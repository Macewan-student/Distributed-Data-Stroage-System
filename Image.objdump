
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00002425 	andeq	r2, r0, r5, lsr #8
		// Called to issue a wait request
		if (st == WNONE)
       8:	0000241f 	andeq	r2, r0, pc, lsl r4
       c:	00002421 	andeq	r2, r0, r1, lsr #8
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00002423 	andeq	r2, r0, r3, lsr #8
      14:	00002423 	andeq	r2, r0, r3, lsr #8
		when (&__input_pins, st);
      18:	00002423 	andeq	r2, r0, r3, lsr #8
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00002423 	andeq	r2, r0, r3, lsr #8
      30:	00002423 	andeq	r2, r0, r3, lsr #8
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00002423 	andeq	r2, r0, r3, lsr #8
      3c:	00002423 	andeq	r2, r0, r3, lsr #8
      40:	00001109 	andeq	r1, r0, r9, lsl #2
      44:	00002423 	andeq	r2, r0, r3, lsr #8
      48:	00002423 	andeq	r2, r0, r3, lsr #8
}
      4c:	00002423 	andeq	r2, r0, r3, lsr #8
      50:	00000cc9 	andeq	r0, r0, r9, asr #25
      54:	00000fc9 	andeq	r0, r0, r9, asr #31
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00002423 	andeq	r2, r0, r3, lsr #8
	    pbutton++) {
      5c:	00002423 	andeq	r2, r0, r3, lsr #8
      60:	00002423 	andeq	r2, r0, r3, lsr #8
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002e55 	andeq	r2, r0, r5, asr lr
      68:	00002423 	andeq	r2, r0, r3, lsr #8
      6c:	00002423 	andeq	r2, r0, r3, lsr #8
      70:	00002423 	andeq	r2, r0, r3, lsr #8
      74:	00002423 	andeq	r2, r0, r3, lsr #8
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00002423 	andeq	r2, r0, r3, lsr #8
      7c:	00002423 	andeq	r2, r0, r3, lsr #8
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00002423 	andeq	r2, r0, r3, lsr #8
      84:	00002423 	andeq	r2, r0, r3, lsr #8
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00002423 	andeq	r2, r0, r3, lsr #8
      8c:	00002423 	andeq	r2, r0, r3, lsr #8
      90:	00002423 	andeq	r2, r0, r3, lsr #8
      94:	00002423 	andeq	r2, r0, r3, lsr #8
      98:	00002423 	andeq	r2, r0, r3, lsr #8
		goto Done;

	if (baction == NULL)
      9c:	00002423 	andeq	r2, r0, r3, lsr #8
      a0:	00002423 	andeq	r2, r0, r3, lsr #8
		goto Term;

	(*baction) (pbutton);
      a4:	00002423 	andeq	r2, r0, r3, lsr #8

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00002423 	andeq	r2, r0, r3, lsr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00002423 	andeq	r2, r0, r3, lsr #8
      b0:	00002423 	andeq	r2, r0, r3, lsr #8
endthread
      b4:	00002423 	andeq	r2, r0, r3, lsr #8
      b8:	00002423 	andeq	r2, r0, r3, lsr #8
      bc:	00002423 	andeq	r2, r0, r3, lsr #8
      c0:	00002423 	andeq	r2, r0, r3, lsr #8
      c4:	00002423 	andeq	r2, r0, r3, lsr #8

000000c8 <sender>:
	return response_message;

};

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b538      	push	{r3, r4, r5, lr}
      ca:	4605      	mov	r5, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d023      	beq.n	11a <_Min_Stack_Size+0x1a>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d6:	f001 bb35 	b.w	1744 <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b20      	ldr	r3, [pc, #128]	; (15c <_Min_Stack_Size+0x5c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4920      	ldr	r1, [pc, #128]	; (160 <_Min_Stack_Size+0x60>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689c      	ldr	r4, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f001 ffd4 	bl	2094 <tcv_wnps>
		packet[0] = 0;
      ec:	8005      	strh	r5, [r0, #0]
		*p = message->gid;
      ee:	8822      	ldrh	r2, [r4, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	4b1c      	ldr	r3, [pc, #112]	; (164 <_Min_Stack_Size+0x64>)
		*p = message->gid;
      f2:	7082      	strb	r2, [r0, #2]
		*p = message->tpe;p++;
      f4:	78a2      	ldrb	r2, [r4, #2]
      f6:	461d      	mov	r5, r3
      f8:	7102      	strb	r2, [r0, #4]
		*p = message->request_number;p++;
      fa:	78e2      	ldrb	r2, [r4, #3]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	6018      	str	r0, [r3, #0]
		*p = message->request_number;p++;
      fe:	7142      	strb	r2, [r0, #5]
		*p = message->sender_id;p++;
     100:	7922      	ldrb	r2, [r4, #4]
     102:	7182      	strb	r2, [r0, #6]
		*p = message->receiver_id;p++;
     104:	7962      	ldrb	r2, [r4, #5]
     106:	71c2      	strb	r2, [r0, #7]
		switch(message->tpe) {
     108:	78a2      	ldrb	r2, [r4, #2]
     10a:	2a04      	cmp	r2, #4
     10c:	d80e      	bhi.n	12c <_Min_Stack_Size+0x2c>
     10e:	2a02      	cmp	r2, #2
     110:	d81e      	bhi.n	150 <_Min_Stack_Size+0x50>
     112:	d016      	beq.n	142 <_Min_Stack_Size+0x42>
		tcv_endp(packet);
     114:	6828      	ldr	r0, [r5, #0]
     116:	f001 fed3 	bl	1ec0 <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     11a:	2001      	movs	r0, #1
     11c:	4912      	ldr	r1, [pc, #72]	; (168 <_Min_Stack_Size+0x68>)
     11e:	f002 fa55 	bl	25cc <ser_out>
}
     122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		finish;
     126:	2000      	movs	r0, #0
     128:	f001 bcec 	b.w	1b04 <kill>
     12c:	2a05      	cmp	r2, #5
     12e:	d1f1      	bne.n	114 <_Min_Stack_Size+0x14>
				*p = message->status;p++;
     130:	79a3      	ldrb	r3, [r4, #6]
				strncpy(p, message->record, sizeof(message->record));
     132:	2214      	movs	r2, #20
				*p = message->status;p++;
     134:	7203      	strb	r3, [r0, #8]
				*p = message->padding;p++;
     136:	79e3      	ldrb	r3, [r4, #7]
				strncpy(p, message->record, sizeof(message->record));
     138:	f104 0108 	add.w	r1, r4, #8
				*p = message->padding;p++;
     13c:	7243      	strb	r3, [r0, #9]
				strncpy(p, message->record, sizeof(message->record));
     13e:	300a      	adds	r0, #10
     140:	e003      	b.n	14a <_Min_Stack_Size+0x4a>
				strncpy(p, message->record, sizeof(message->record));
     142:	2214      	movs	r2, #20
     144:	f104 0108 	add.w	r1, r4, #8
     148:	3008      	adds	r0, #8
				strncpy(p, message->record, sizeof(message->record));
     14a:	f001 fc10 	bl	196e <__pi_strncpy>
				break;
     14e:	e7e1      	b.n	114 <_Min_Stack_Size+0x14>
				*p = message->record_index;p++;
     150:	7f23      	ldrb	r3, [r4, #28]
     152:	7203      	strb	r3, [r0, #8]
				*p = message->padding;
     154:	79e3      	ldrb	r3, [r4, #7]
     156:	7243      	strb	r3, [r0, #9]
				break;
     158:	e7dc      	b.n	114 <_Min_Stack_Size+0x14>
     15a:	bf00      	nop
     15c:	200006d4 	ldrdcs	r0, [r0], -r4
     160:	20000000 	andcs	r0, r0, r0
     164:	2000055c 	andcs	r0, r0, ip, asr r5
     168:	000049b4 			; <UNDEFINED> instruction: 0x000049b4

0000016c <reset_array>:
		node->nnodes[i] = 0;
     16c:	2200      	movs	r2, #0
     16e:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     172:	f200 4081 	addw	r0, r0, #1153	; 0x481
     176:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17a:	4283      	cmp	r3, r0
     17c:	d1fb      	bne.n	176 <reset_array+0xa>
}
     17e:	4770      	bx	lr

00000180 <init_node>:
bool init_node(struct Node* node){
     180:	b510      	push	{r4, lr}
    node->id  = 0;                  // default id value 0
     182:	2400      	movs	r4, #0
     184:	7004      	strb	r4, [r0, #0]
    node->gid = 0;                  // default gid value 0
     186:	8044      	strh	r4, [r0, #2]
    node->index = 0;                // default entry count 0
     188:	f880 4481 	strb.w	r4, [r0, #1153]	; 0x481
    node->data_base.item_count = 0; // default no items in array
     18c:	f880 4464 	strb.w	r4, [r0, #1124]	; 0x464
	reset_array(node);
     190:	f7ff ffec 	bl	16c <reset_array>
    DEBUG_PRINT("Error initializing node...\n");
     194:	4802      	ldr	r0, [pc, #8]	; (1a0 <init_node+0x20>)
     196:	f001 fd57 	bl	1c48 <diag>
};
     19a:	4620      	mov	r0, r4
     19c:	bd10      	pop	{r4, pc}
     19e:	bf00      	nop
     1a0:	000049c3 	andeq	r4, r0, r3, asr #19

000001a4 <generate_request_num>:
uint8_t generate_request_num(void){
     1a4:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     1a6:	f004 fbbf 	bl	4928 <rand>
     1aa:	23ff      	movs	r3, #255	; 0xff
     1ac:	fb90 f3f3 	sdiv	r3, r0, r3
     1b0:	4418      	add	r0, r3
}
     1b2:	b2c0      	uxtb	r0, r0
     1b4:	bd08      	pop	{r3, pc}

000001b6 <clear_node_neighbour_array>:
            node->nnodes[i] = 0; // set to null byte
     1b6:	2200      	movs	r2, #0
     1b8:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     1bc:	f200 4081 	addw	r0, r0, #1153	; 0x481
     1c0:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	4283      	cmp	r3, r0
     1c6:	d1fb      	bne.n	1c0 <clear_node_neighbour_array+0xa>
};
     1c8:	2001      	movs	r0, #1
     1ca:	4770      	bx	lr

000001cc <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     1d0:	b143      	cbz	r3, 1e4 <delete_record+0x18>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d2:	221c      	movs	r2, #28
     1d4:	fb02 0101 	mla	r1, r2, r1, r0
     1d8:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     1da:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1dc:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     1de:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     1e0:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     1e4:	2000      	movs	r0, #0
     1e6:	4770      	bx	lr

000001e8 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     1e8:	b570      	push	{r4, r5, r6, lr}
     1ea:	4ba2      	ldr	r3, [pc, #648]	; (474 <receiver+0x28c>)
     1ec:	b090      	sub	sp, #64	; 0x40
     1ee:	681b      	ldr	r3, [r3, #0]
     1f0:	689c      	ldr	r4, [r3, #8]
     1f2:	2809      	cmp	r0, #9
     1f4:	f200 81b7 	bhi.w	566 <receiver+0x37e>
     1f8:	e8df f010 	tbh	[pc, r0, lsl #1]
     1fc:	0011000a 	andseq	r0, r1, sl
     200:	009b0094 	umullseq	r0, fp, r4, r0
     204:	00a900a2 	adceq	r0, r9, r2, lsr #1
     208:	00bf00b5 	ldrhteq	r0, [pc], r5
     20c:	00d300c9 	sbcseq	r0, r3, r9, asr #1
	address incoming_packet;
	char array[20];

	state receiving:
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	4b99      	ldr	r3, [pc, #612]	; (478 <receiver+0x290>)
     212:	2000      	movs	r0, #0
     214:	6819      	ldr	r1, [r3, #0]
     216:	f001 fefd 	bl	2014 <tcv_rnp>
     21a:	4b98      	ldr	r3, [pc, #608]	; (47c <receiver+0x294>)
     21c:	6018      	str	r0, [r3, #0]
	state ok:
		payload = (struct ResponseMessage*)(incoming_packet+1);
     21e:	4d97      	ldr	r5, [pc, #604]	; (47c <receiver+0x294>)
     220:	4e97      	ldr	r6, [pc, #604]	; (480 <receiver+0x298>)
     222:	6828      	ldr	r0, [r5, #0]
		uint8_t tpe;
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	2201      	movs	r2, #1
		payload = (struct ResponseMessage*)(incoming_packet+1);
     226:	1c83      	adds	r3, r0, #2
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     228:	f10d 0107 	add.w	r1, sp, #7
     22c:	3006      	adds	r0, #6
		payload = (struct ResponseMessage*)(incoming_packet+1);
     22e:	6033      	str	r3, [r6, #0]
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     230:	f001 ff8e 	bl	2150 <tcv_read>
		
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	6833      	ldr	r3, [r6, #0]
     236:	4893      	ldr	r0, [pc, #588]	; (484 <receiver+0x29c>)
     238:	7899      	ldrb	r1, [r3, #2]
     23a:	f001 fd05 	bl	1c48 <diag>
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     23e:	6833      	ldr	r3, [r6, #0]
     240:	4891      	ldr	r0, [pc, #580]	; (488 <receiver+0x2a0>)
     242:	8819      	ldrh	r1, [r3, #0]
     244:	f001 fd00 	bl	1c48 <diag>
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	6833      	ldr	r3, [r6, #0]
     24a:	4890      	ldr	r0, [pc, #576]	; (48c <receiver+0x2a4>)
     24c:	7919      	ldrb	r1, [r3, #4]
     24e:	f001 fcfb 	bl	1c48 <diag>
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     252:	6833      	ldr	r3, [r6, #0]
     254:	488e      	ldr	r0, [pc, #568]	; (490 <receiver+0x2a8>)
     256:	7959      	ldrb	r1, [r3, #5]
     258:	f001 fcf6 	bl	1c48 <diag>

		if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (tpe){
     25c:	f89d 1007 	ldrb.w	r1, [sp, #7]
     260:	2905      	cmp	r1, #5
     262:	f200 817c 	bhi.w	55e <receiver+0x376>
     266:	e8df f011 	tbh	[pc, r1, lsl #1]
     26a:	00320006 	eorseq	r0, r2, r6
     26e:	00cc00a4 	sbceq	r0, ip, r4, lsr #1
     272:	013f00dc 	ldrsbeq	r0, [pc, -ip]!
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct ResponseMessage *response_message_0;
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     276:	682d      	ldr	r5, [r5, #0]

				/*DEBUGGING*/
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	4886      	ldr	r0, [pc, #536]	; (494 <receiver+0x2ac>)
     27a:	8869      	ldrh	r1, [r5, #2]
     27c:	f001 fce4 	bl	1c48 <diag>
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	7929      	ldrb	r1, [r5, #4]
     282:	4885      	ldr	r0, [pc, #532]	; (498 <receiver+0x2b0>)
     284:	f001 fce0 	bl	1c48 <diag>
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	7969      	ldrb	r1, [r5, #5]
     28a:	4884      	ldr	r0, [pc, #528]	; (49c <receiver+0x2b4>)
     28c:	f001 fcdc 	bl	1c48 <diag>
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	79a9      	ldrb	r1, [r5, #6]
     292:	4883      	ldr	r0, [pc, #524]	; (4a0 <receiver+0x2b8>)
     294:	f001 fcd8 	bl	1c48 <diag>
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	79e9      	ldrb	r1, [r5, #7]
     29a:	4882      	ldr	r0, [pc, #520]	; (4a4 <receiver+0x2bc>)
     29c:	f001 fcd4 	bl	1c48 <diag>

				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     2a0:	886a      	ldrh	r2, [r5, #2]
     2a2:	8863      	ldrh	r3, [r4, #2]
     2a4:	4293      	cmp	r3, r2
     2a6:	d13d      	bne.n	324 <receiver+0x13c>
					response_message_0->gid = discovery_request_message->gid;
     2a8:	2100      	movs	r1, #0
     2aa:	800b      	strh	r3, [r1, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	2301      	movs	r3, #1
     2ae:	708b      	strb	r3, [r1, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	796b      	ldrb	r3, [r5, #5]
     2b2:	70cb      	strb	r3, [r1, #3]
					response_message_0->sender_id = node_db->id;
     2b4:	7823      	ldrb	r3, [r4, #0]
     2b6:	710b      	strb	r3, [r1, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	79ab      	ldrb	r3, [r5, #6]
     2ba:	714b      	strb	r3, [r1, #5]
					//diag("\r\ngid:%u, tpe:%d, sen:%u, rec:%u", response_message_0->gid, response_message_0->tpe, response_message_0->sender_id, response_message_0->receiver_id);
					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					call sender(response_message_0, done_case);
     2bc:	487a      	ldr	r0, [pc, #488]	; (4a8 <receiver+0x2c0>)
     2be:	f001 fc9d 	bl	1bfc <__pi_fork>
     2c2:	2102      	movs	r1, #2
     2c4:	f001 fb04 	bl	18d0 <__pi_join>
     2c8:	b360      	cbz	r0, 324 <receiver+0x13c>
     2ca:	f001 f85d 	bl	1388 <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     2ce:	682d      	ldr	r5, [r5, #0]

				/*DEBUGGING*/
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	4876      	ldr	r0, [pc, #472]	; (4ac <receiver+0x2c4>)
     2d2:	8869      	ldrh	r1, [r5, #2]
     2d4:	f001 fcb8 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2d8:	7929      	ldrb	r1, [r5, #4]
     2da:	4875      	ldr	r0, [pc, #468]	; (4b0 <receiver+0x2c8>)
     2dc:	f001 fcb4 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	7969      	ldrb	r1, [r5, #5]
     2e2:	4874      	ldr	r0, [pc, #464]	; (4b4 <receiver+0x2cc>)
     2e4:	f001 fcb0 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	79a9      	ldrb	r1, [r5, #6]
     2ea:	4873      	ldr	r0, [pc, #460]	; (4b8 <receiver+0x2d0>)
     2ec:	f001 fcac 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	79e9      	ldrb	r1, [r5, #7]
     2f2:	4872      	ldr	r0, [pc, #456]	; (4bc <receiver+0x2d4>)
     2f4:	f001 fca8 	bl	1c48 <diag>

				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	886b      	ldrh	r3, [r5, #2]
     2fa:	8862      	ldrh	r2, [r4, #2]
     2fc:	429a      	cmp	r2, r3
     2fe:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     302:	d103      	bne.n	30c <receiver+0x124>
     304:	79aa      	ldrb	r2, [r5, #6]
     306:	1e51      	subs	r1, r2, #1
     308:	2917      	cmp	r1, #23
     30a:	d902      	bls.n	312 <receiver+0x12a>
     30c:	18e2      	adds	r2, r4, r3
     30e:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     312:	18e1      	adds	r1, r4, r3
     314:	f881 2468 	strb.w	r2, [r1, #1128]	; 0x468
				
				//node_db->index = node_db->nnodes[node_db->index] == discovery_response_message->sender_id ? node_db->index+1 : node_db->index;
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	79a9      	ldrb	r1, [r5, #6]
     31a:	4291      	cmp	r1, r2
     31c:	d102      	bne.n	324 <receiver+0x13c>
					node_db->index+=1;
     31e:	3301      	adds	r3, #1
     320:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
				break;

		};
	state done_case:
		tcv_endp(incoming_packet);
     324:	4b55      	ldr	r3, [pc, #340]	; (47c <receiver+0x294>)
     326:	6818      	ldr	r0, [r3, #0]
     328:	f001 fdca 	bl	1ec0 <tcv_endp>
		proceed receiving;
     32c:	2000      	movs	r0, #0
     32e:	f001 fa91 	bl	1854 <proceed>
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\nData Saved");
     332:	2003      	movs	r0, #3
     334:	4962      	ldr	r1, [pc, #392]	; (4c0 <receiver+0x2d8>)
     336:	f002 f949 	bl	25cc <ser_out>
		proceed receiving;
     33a:	2000      	movs	r0, #0
     33c:	f001 fa8a 	bl	1854 <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	2004      	movs	r0, #4
     342:	4960      	ldr	r1, [pc, #384]	; (4c4 <receiver+0x2dc>)
     344:	f002 f942 	bl	25cc <ser_out>
		proceed receiving;
     348:	2000      	movs	r0, #0
     34a:	f001 fa83 	bl	1854 <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     34e:	4b5e      	ldr	r3, [pc, #376]	; (4c8 <receiver+0x2e0>)
     350:	2005      	movs	r0, #5
     352:	681a      	ldr	r2, [r3, #0]
     354:	495d      	ldr	r1, [pc, #372]	; (4cc <receiver+0x2e4>)
     356:	f102 0308 	add.w	r3, r2, #8
     35a:	7912      	ldrb	r2, [r2, #4]
     35c:	f002 f9a8 	bl	26b0 <ser_outf>
		proceed receiving;
     360:	2000      	movs	r0, #0
     362:	f001 fa77 	bl	1854 <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     366:	4b58      	ldr	r3, [pc, #352]	; (4c8 <receiver+0x2e0>)
     368:	2006      	movs	r0, #6
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	4958      	ldr	r1, [pc, #352]	; (4d0 <receiver+0x2e8>)
     36e:	791a      	ldrb	r2, [r3, #4]
     370:	f002 f99e 	bl	26b0 <ser_outf>
		proceed receiving;
     374:	2000      	movs	r0, #0
     376:	f001 fa6d 	bl	1854 <proceed>
	state response_3:
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     37a:	4b53      	ldr	r3, [pc, #332]	; (4c8 <receiver+0x2e0>)
     37c:	2007      	movs	r0, #7
     37e:	681b      	ldr	r3, [r3, #0]
     380:	4954      	ldr	r1, [pc, #336]	; (4d4 <receiver+0x2ec>)
     382:	791a      	ldrb	r2, [r3, #4]
     384:	f002 f994 	bl	26b0 <ser_outf>
		proceed receiving;
     388:	2000      	movs	r0, #0
     38a:	f001 fa63 	bl	1854 <proceed>
	state response_4:
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     38e:	4b4e      	ldr	r3, [pc, #312]	; (4c8 <receiver+0x2e0>)
     390:	2008      	movs	r0, #8
     392:	681b      	ldr	r3, [r3, #0]
     394:	4950      	ldr	r1, [pc, #320]	; (4d8 <receiver+0x2f0>)
     396:	791a      	ldrb	r2, [r3, #4]
     398:	f002 f98a 	bl	26b0 <ser_outf>
		proceed receiving;
     39c:	2000      	movs	r0, #0
     39e:	f001 fa59 	bl	1854 <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a2:	484e      	ldr	r0, [pc, #312]	; (4dc <receiver+0x2f4>)
     3a4:	f001 fc50 	bl	1c48 <diag>
		// handle error
		// retry?
		proceed receiving;
     3a8:	2000      	movs	r0, #0
     3aa:	f001 fa53 	bl	1854 <proceed>
		
}
     3ae:	b010      	add	sp, #64	; 0x40
     3b0:	bd70      	pop	{r4, r5, r6, pc}
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3b2:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	483d      	ldr	r0, [pc, #244]	; (4ac <receiver+0x2c4>)
     3b6:	8869      	ldrh	r1, [r5, #2]
     3b8:	f001 fc46 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	7929      	ldrb	r1, [r5, #4]
     3be:	483c      	ldr	r0, [pc, #240]	; (4b0 <receiver+0x2c8>)
     3c0:	f001 fc42 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	7969      	ldrb	r1, [r5, #5]
     3c6:	483b      	ldr	r0, [pc, #236]	; (4b4 <receiver+0x2cc>)
     3c8:	f001 fc3e 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	79a9      	ldrb	r1, [r5, #6]
     3ce:	483a      	ldr	r0, [pc, #232]	; (4b8 <receiver+0x2d0>)
     3d0:	f001 fc3a 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	79e9      	ldrb	r1, [r5, #7]
     3d6:	4839      	ldr	r0, [pc, #228]	; (4bc <receiver+0x2d4>)
     3d8:	f001 fc36 	bl	1c48 <diag>
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	4840      	ldr	r0, [pc, #256]	; (4e0 <receiver+0x2f8>)
     3de:	f105 0108 	add.w	r1, r5, #8
     3e2:	f001 fc31 	bl	1c48 <diag>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e6:	7822      	ldrb	r2, [r4, #0]
     3e8:	79eb      	ldrb	r3, [r5, #7]
     3ea:	4293      	cmp	r3, r2
     3ec:	d19a      	bne.n	324 <receiver+0x13c>
     3ee:	886a      	ldrh	r2, [r5, #2]
     3f0:	429a      	cmp	r2, r3
     3f2:	d197      	bne.n	324 <receiver+0x13c>
		strncpy(response_message->record, rec, 20);
     3f4:	2214      	movs	r2, #20
     3f6:	493b      	ldr	r1, [pc, #236]	; (4e4 <receiver+0x2fc>)
     3f8:	2008      	movs	r0, #8
     3fa:	f001 fab8 	bl	196e <__pi_strncpy>
					call sender(response_message_4, done_case);
     3fe:	2100      	movs	r1, #0
     400:	e75c      	b.n	2bc <receiver+0xd4>
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     402:	682b      	ldr	r3, [r5, #0]
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     404:	8862      	ldrh	r2, [r4, #2]
     406:	8859      	ldrh	r1, [r3, #2]
     408:	4291      	cmp	r1, r2
     40a:	d18b      	bne.n	324 <receiver+0x13c>
     40c:	79d9      	ldrb	r1, [r3, #7]
     40e:	7822      	ldrb	r2, [r4, #0]
     410:	4291      	cmp	r1, r2
     412:	d187      	bne.n	324 <receiver+0x13c>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	7a19      	ldrb	r1, [r3, #8]
     416:	2928      	cmp	r1, #40	; 0x28
     418:	d884      	bhi.n	324 <receiver+0x13c>
					if (delete_record(node_db, delete_record_message->record_index)){
     41a:	4620      	mov	r0, r4
     41c:	f7ff fed6 	bl	1cc <delete_record>
     420:	e7e8      	b.n	3f4 <receiver+0x20c>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     422:	2200      	movs	r2, #0
     424:	8811      	ldrh	r1, [r2, #0]
     426:	8862      	ldrh	r2, [r4, #2]
     428:	4291      	cmp	r1, r2
     42a:	f47f af7b 	bne.w	324 <receiver+0x13c>
     42e:	2200      	movs	r2, #0
     430:	7951      	ldrb	r1, [r2, #5]
     432:	7822      	ldrb	r2, [r4, #0]
     434:	4291      	cmp	r1, r2
     436:	f47f af75 	bne.w	324 <receiver+0x13c>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43a:	682b      	ldr	r3, [r5, #0]
     43c:	7a1b      	ldrb	r3, [r3, #8]
     43e:	2b28      	cmp	r3, #40	; 0x28
     440:	f63f af70 	bhi.w	324 <receiver+0x13c>
    return node->data_base.item_array[index];
     444:	221c      	movs	r2, #28
     446:	fb02 4403 	mla	r4, r2, r3, r4
     44a:	ad09      	add	r5, sp, #36	; 0x24
     44c:	3404      	adds	r4, #4
     44e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     452:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     456:	ae09      	add	r6, sp, #36	; 0x24
     458:	ac02      	add	r4, sp, #8
    return node->data_base.item_array[index];
     45a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     45e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     462:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		strncpy(response_message->record, rec, 20);
     46a:	2214      	movs	r2, #20
     46c:	f10d 0109 	add.w	r1, sp, #9
     470:	e7c2      	b.n	3f8 <receiver+0x210>
     472:	bf00      	nop
     474:	200006d4 	ldrdcs	r0, [r0], -r4
     478:	20000000 	andcs	r0, r0, r0
     47c:	20000558 	andcs	r0, r0, r8, asr r5
     480:	20000560 	andcs	r0, r0, r0, ror #10
     484:	000049df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
     488:	000049f3 	strdeq	r4, [r0], -r3
     48c:	00004a0b 	andeq	r4, r0, fp, lsl #20
     490:	00004a24 	andeq	r4, r0, r4, lsr #20
     494:	00004a3a 	andeq	r4, r0, sl, lsr sl
     498:	00004a4d 	andeq	r4, r0, sp, asr #20
     49c:	00004a60 	andeq	r4, r0, r0, ror #20
     4a0:	00004a77 	andeq	r4, r0, r7, ror sl
     4a4:	00004a8a 	andeq	r4, r0, sl, lsl #21
     4a8:	000000c9 	andeq	r0, r0, r9, asr #1
     4ac:	00004a9d 	muleq	r0, sp, sl
     4b0:	00004aaf 	andeq	r4, r0, pc, lsr #21
     4b4:	00004ac2 	andeq	r4, r0, r2, asr #21
     4b8:	00004ad8 	ldrdeq	r4, [r0], -r8
     4bc:	00004aea 	andeq	r4, r0, sl, ror #21
     4c0:	00004b44 	andeq	r4, r0, r4, asr #22
     4c4:	00004b51 	andeq	r4, r0, r1, asr fp
     4c8:	20000568 	andcs	r0, r0, r8, ror #10
     4cc:	00004b62 	andeq	r4, r0, r2, ror #22
     4d0:	00004b80 	andeq	r4, r0, r0, lsl #23
     4d4:	00004ba7 	andeq	r4, r0, r7, lsr #23
     4d8:	00004bcf 	andeq	r4, r0, pc, asr #23
     4dc:	00004bf6 	strdeq	r4, [r0], -r6
     4e0:	00004afc 	strdeq	r4, [r0], -ip
     4e4:	20000540 	andcs	r0, r0, r0, asr #10
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	682a      	ldr	r2, [r5, #0]
     4ea:	4d20      	ldr	r5, [pc, #128]	; (56c <receiver+0x384>)
     4ec:	1c91      	adds	r1, r2, #2
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4ee:	8850      	ldrh	r0, [r2, #2]
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4f0:	6029      	str	r1, [r5, #0]
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f2:	8861      	ldrh	r1, [r4, #2]
     4f4:	4288      	cmp	r0, r1
     4f6:	f47f af15 	bne.w	324 <receiver+0x13c>
     4fa:	79d2      	ldrb	r2, [r2, #7]
     4fc:	7823      	ldrb	r3, [r4, #0]
     4fe:	429a      	cmp	r2, r3
     500:	f47f af10 	bne.w	324 <receiver+0x13c>
				if(!response_flag){
     504:	481a      	ldr	r0, [pc, #104]	; (570 <receiver+0x388>)
     506:	8803      	ldrh	r3, [r0, #0]
     508:	b91b      	cbnz	r3, 512 <receiver+0x32a>
					response_flag=1;
     50a:	2301      	movs	r3, #1
     50c:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     50e:	f001 f9c5 	bl	189c <__pi_trigger>
				switch(response_message_5->status){
     512:	682a      	ldr	r2, [r5, #0]
     514:	7993      	ldrb	r3, [r2, #6]
     516:	3b01      	subs	r3, #1
     518:	2b03      	cmp	r3, #3
     51a:	f63f af03 	bhi.w	324 <receiver+0x13c>
     51e:	e8df f003 	tbb	[pc, r3]
     522:	1c1a1802 	ldcne	8, cr1, [sl], {2}
						if (response_checker[0] == response_message_5->request_number){
     526:	4b13      	ldr	r3, [pc, #76]	; (574 <receiver+0x38c>)
     528:	78d2      	ldrb	r2, [r2, #3]
     52a:	6819      	ldr	r1, [r3, #0]
     52c:	4291      	cmp	r1, r2
     52e:	f47f aef9 	bne.w	324 <receiver+0x13c>
							switch(response_checker[1]){
     532:	685b      	ldr	r3, [r3, #4]
     534:	2b03      	cmp	r3, #3
     536:	d008      	beq.n	54a <receiver+0x362>
     538:	2b04      	cmp	r3, #4
     53a:	d008      	beq.n	54e <receiver+0x366>
     53c:	2b02      	cmp	r3, #2
     53e:	f47f aef1 	bne.w	324 <receiver+0x13c>
									proceed response_1_create;
     542:	2003      	movs	r0, #3
						proceed response_2;
     544:	f001 f986 	bl	1854 <proceed>
						break;
     548:	e6ec      	b.n	324 <receiver+0x13c>
									proceed response_1_delete;
     54a:	2004      	movs	r0, #4
     54c:	e7fa      	b.n	544 <receiver+0x35c>
									proceed response_1_retrieve;
     54e:	2005      	movs	r0, #5
     550:	e7f8      	b.n	544 <receiver+0x35c>
						proceed response_2;
     552:	2006      	movs	r0, #6
     554:	e7f6      	b.n	544 <receiver+0x35c>
						proceed response_3;
     556:	2007      	movs	r0, #7
     558:	e7f4      	b.n	544 <receiver+0x35c>
						proceed response_4;
     55a:	2008      	movs	r0, #8
     55c:	e7f2      	b.n	544 <receiver+0x35c>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     55e:	4806      	ldr	r0, [pc, #24]	; (578 <receiver+0x390>)
     560:	f001 fb72 	bl	1c48 <diag>
				break;
     564:	e6de      	b.n	324 <receiver+0x13c>
}
     566:	f001 f8ed 	bl	1744 <__pi_badstate>
     56a:	e720      	b.n	3ae <receiver+0x1c6>
     56c:	20000568 	andcs	r0, r0, r8, ror #10
     570:	20000564 	andcs	r0, r0, r4, ror #10
     574:	20000664 	andcs	r0, r0, r4, ror #12
     578:	00004b11 	andeq	r4, r0, r1, lsl fp

0000057c <delete_all>:
bool delete_all(struct Node *node){
     57c:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     57e:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     582:	b164      	cbz	r4, 59e <delete_all+0x22>
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	2300      	movs	r3, #0
     586:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     58a:	3301      	adds	r3, #1
     58c:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     58e:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     590:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	daf9      	bge.n	58a <delete_all+0xe>
    node->data_base.item_count = 0;
     596:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    	return false;
     59a:	2000      	movs	r0, #0
}
     59c:	bd10      	pop	{r4, pc}
        return true;
     59e:	2001      	movs	r0, #1
     5a0:	e7fc      	b.n	59c <delete_all+0x20>
	...

000005a4 <root>:

fsm root {
     5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a6:	b085      	sub	sp, #20
     5a8:	2820      	cmp	r0, #32
     5aa:	f200 8290 	bhi.w	ace <root+0x52a>
     5ae:	e8df f010 	tbh	[pc, r0, lsl #1]
     5b2:	00480021 	subeq	r0, r8, r1, lsr #32
     5b6:	00770055 	rsbseq	r0, r7, r5, asr r0
     5ba:	008b007b 	addeq	r0, fp, fp, ror r0
     5be:	00b1008f 	adcseq	r0, r1, pc, lsl #1
     5c2:	00c900bc 	strheq	r0, [r9], #12
     5c6:	01390102 	teqeq	r9, r2, lsl #2
     5ca:	015a0156 	cmpeq	sl, r6, asr r1
     5ce:	0170016c 	cmneq	r0, ip, ror #2
     5d2:	019d0175 	orrseq	r0, sp, r5, ror r1
     5d6:	01b301a1 			; <UNDEFINED> instruction: 0x01b301a1
     5da:	01c801b7 	strheq	r0, [r8, #23]
     5de:	01f401f0 	ldrsheq	r0, [r4, #16]!
     5e2:	020a0206 	andeq	r0, sl, #1610612736	; 0x60000000
     5e6:	0243021b 	subeq	r0, r3, #-1342177279	; 0xb0000001
     5ea:	02530247 	subseq	r0, r3, #1879048196	; 0x70000004
     5ee:	027d025a 	rsbseq	r0, sp, #-1610612731	; 0xa0000005
     5f2:	f2400284 	vhsub.s8	d16, d16, d4

	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f6:	4084      	lsls	r4, r0
     5f8:	f001 faac 	bl	1b54 <__pi_malloc>
     5fc:	4c76      	ldr	r4, [pc, #472]	; (7d8 <root+0x234>)
     5fe:	6020      	str	r0, [r4, #0]

		// Bool condition, check for failure
		init_node(node_db);
     600:	f7ff fdbe 	bl	180 <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     604:	21fa      	movs	r1, #250	; 0xfa
     606:	2000      	movs	r0, #0
     608:	f002 fc5c 	bl	2ec4 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     60c:	4973      	ldr	r1, [pc, #460]	; (7dc <root+0x238>)
     60e:	2000      	movs	r0, #0
     610:	f001 fcee 	bl	1ff0 <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     614:	2200      	movs	r2, #0
     616:	f64f 70ff 	movw	r0, #65535	; 0xffff
     61a:	4611      	mov	r1, r2
     61c:	f001 fc88 	bl	1f30 <tcv_open>
     620:	4a6f      	ldr	r2, [pc, #444]	; (7e0 <root+0x23c>)

		if (sfd < 0) {
     622:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     624:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     626:	da04      	bge.n	632 <root+0x8e>
			diag("Cannot open tcv interface");
     628:	486e      	ldr	r0, [pc, #440]	; (7e4 <root+0x240>)
     62a:	f001 fb0d 	bl	1c48 <diag>
			halt();
     62e:	f000 ffd7 	bl	15e0 <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     632:	2104      	movs	r1, #4
     634:	2200      	movs	r2, #0
     636:	f001 fdbf 	bl	21b8 <tcv_control>

		runfsm receiver(node_db);
     63a:	6821      	ldr	r1, [r4, #0]
     63c:	486a      	ldr	r0, [pc, #424]	; (7e8 <root+0x244>)
     63e:	f001 fadd 	bl	1bfc <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     642:	2028      	movs	r0, #40	; 0x28
     644:	4b64      	ldr	r3, [pc, #400]	; (7d8 <root+0x234>)
     646:	6819      	ldr	r1, [r3, #0]
     648:	780b      	ldrb	r3, [r1, #0]
     64a:	884a      	ldrh	r2, [r1, #2]
     64c:	9001      	str	r0, [sp, #4]
     64e:	f891 1481 	ldrb.w	r1, [r1, #1153]	; 0x481
     652:	2001      	movs	r0, #1
     654:	9100      	str	r1, [sp, #0]
     656:	4965      	ldr	r1, [pc, #404]	; (7ec <root+0x248>)
     658:	f002 f82a 	bl	26b0 <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	4c64      	ldr	r4, [pc, #400]	; (7f0 <root+0x24c>)
     65e:	2002      	movs	r0, #2
     660:	4622      	mov	r2, r4
     662:	4964      	ldr	r1, [pc, #400]	; (7f4 <root+0x250>)
     664:	f002 f84e 	bl	2704 <ser_inf>
		switch(CHOICE) {
     668:	7823      	ldrb	r3, [r4, #0]
     66a:	2b53      	cmp	r3, #83	; 0x53
     66c:	d80f      	bhi.n	68e <root+0xea>
     66e:	2b42      	cmp	r3, #66	; 0x42
     670:	d911      	bls.n	696 <root+0xf2>
     672:	3b43      	subs	r3, #67	; 0x43
     674:	2b10      	cmp	r3, #16
     676:	d80e      	bhi.n	696 <root+0xf2>
     678:	e8df f003 	tbb	[pc, r3]
     67c:	818b8583 	orrhi	r8, fp, r3, lsl #11
     680:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     684:	7f0d0d0d 	svcvc	0x000d0d0d
     688:	870d0d0d 	strhi	r0, [sp, -sp, lsl #26]
     68c:	3b630089 	blcc	18c08b8 <__ccfg+0x18a0910>
     690:	b2da      	uxtb	r2, r3
     692:	2a10      	cmp	r2, #16
     694:	d9ee      	bls.n	674 <root+0xd0>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     696:	2001      	movs	r0, #1
     698:	e000      	b.n	69c <root+0xf8>
				proceed get_new_group_id;
     69a:	2003      	movs	r0, #3
				proceed menu;
     69c:	f001 f8da 	bl	1854 <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	2003      	movs	r0, #3
     6a2:	4955      	ldr	r1, [pc, #340]	; (7f8 <root+0x254>)
     6a4:	f001 ff92 	bl	25cc <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		uint16_t NEW_NODE_GID;
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	aa03      	add	r2, sp, #12
     6aa:	4954      	ldr	r1, [pc, #336]	; (7fc <root+0x258>)
     6ac:	2004      	movs	r0, #4
     6ae:	f002 f829 	bl	2704 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     6b2:	4853      	ldr	r0, [pc, #332]	; (800 <root+0x25c>)
     6b4:	f001 fac8 	bl	1c48 <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	4b47      	ldr	r3, [pc, #284]	; (7d8 <root+0x234>)
    node->gid = gid; 
     6ba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6be:	681b      	ldr	r3, [r3, #0]
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     6c0:	2001      	movs	r0, #1
    node->gid = gid; 
     6c2:	805a      	strh	r2, [r3, #2]
		proceed menu;
     6c4:	f001 f8c6 	bl	1854 <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	2005      	movs	r0, #5
     6ca:	494e      	ldr	r1, [pc, #312]	; (804 <root+0x260>)
     6cc:	f001 ff7e 	bl	25cc <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	4d41      	ldr	r5, [pc, #260]	; (7d8 <root+0x234>)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d2:	494a      	ldr	r1, [pc, #296]	; (7fc <root+0x258>)
     6d4:	aa03      	add	r2, sp, #12
     6d6:	2006      	movs	r0, #6
     6d8:	f002 f814 	bl	2704 <ser_inf>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	682a      	ldr	r2, [r5, #0]
     6de:	f89d 100c 	ldrb.w	r1, [sp, #12]
    node->id = id;
     6e2:	7011      	strb	r1, [r2, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		// Check to see if the number given is within range.
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	682a      	ldr	r2, [r5, #0]
     6e6:	7812      	ldrb	r2, [r2, #0]
     6e8:	3a01      	subs	r2, #1
     6ea:	2a18      	cmp	r2, #24
     6ec:	d907      	bls.n	6fe <root+0x15a>
			strncpy(reason, "Out of Range", 50);
     6ee:	4846      	ldr	r0, [pc, #280]	; (808 <root+0x264>)
     6f0:	2232      	movs	r2, #50	; 0x32
     6f2:	4946      	ldr	r1, [pc, #280]	; (80c <root+0x268>)
     6f4:	f001 f93b 	bl	196e <__pi_strncpy>
			proceed invalid_node_id;
     6f8:	2007      	movs	r0, #7
     6fa:	f001 f8ab 	bl	1854 <proceed>
fsm root {
     6fe:	2400      	movs	r4, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < node_db->index; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     700:	4e43      	ldr	r6, [pc, #268]	; (810 <root+0x26c>)
     702:	4f41      	ldr	r7, [pc, #260]	; (808 <root+0x264>)
		for(int i = 0; i < node_db->index; i++){
     704:	682b      	ldr	r3, [r5, #0]
     706:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
     70a:	42a2      	cmp	r2, r4
     70c:	dc43      	bgt.n	796 <root+0x1f2>
				proceed invalid_node_id;
			};
		};
		
		proceed menu;
     70e:	2001      	movs	r0, #1
     710:	f001 f8a0 	bl	1854 <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	4b30      	ldr	r3, [pc, #192]	; (7d8 <root+0x234>)
     716:	2007      	movs	r0, #7
     718:	681a      	ldr	r2, [r3, #0]
     71a:	493e      	ldr	r1, [pc, #248]	; (814 <root+0x270>)
     71c:	4b3a      	ldr	r3, [pc, #232]	; (808 <root+0x264>)
     71e:	7812      	ldrb	r2, [r2, #0]
     720:	f001 ffc6 	bl	26b0 <ser_outf>
		proceed get_new_node_id;
     724:	2005      	movs	r0, #5
     726:	f001 f895 	bl	1854 <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     72a:	4b2b      	ldr	r3, [pc, #172]	; (7d8 <root+0x234>)
     72c:	6818      	ldr	r0, [r3, #0]
     72e:	f7ff fd42 	bl	1b6 <clear_node_neighbour_array>
     732:	b938      	cbnz	r0, 744 <root+0x1a0>
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	4834      	ldr	r0, [pc, #208]	; (808 <root+0x264>)
     736:	2232      	movs	r2, #50	; 0x32
     738:	4937      	ldr	r1, [pc, #220]	; (818 <root+0x274>)
     73a:	f001 f918 	bl	196e <__pi_strncpy>
			proceed error;
     73e:	2020      	movs	r0, #32
     740:	f001 f888 	bl	1854 <proceed>
		};

	state find_proto_start:

		struct ResponseMessage *request_packet;
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     744:	201e      	movs	r0, #30
     746:	f001 fa05 	bl	1b54 <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     74a:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     74c:	4e22      	ldr	r6, [pc, #136]	; (7d8 <root+0x234>)
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     74e:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     750:	6833      	ldr	r3, [r6, #0]
     752:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     756:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     758:	f7ff fd24 	bl	1a4 <generate_request_num>
     75c:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     75e:	6833      	ldr	r3, [r6, #0]

		// call sender?
		// delay() ?
		// what should the trigger listen for?
		//trigger(&fin);
		call sender(request_packet, wait_discovery);
     760:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     762:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     764:	482d      	ldr	r0, [pc, #180]	; (81c <root+0x278>)
		request_packet->sender_id = node_db->id;
     766:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     768:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     76a:	f001 fa47 	bl	1bfc <__pi_fork>
     76e:	210a      	movs	r1, #10
     770:	f001 f8ae 	bl	18d0 <__pi_join>
     774:	b1f8      	cbz	r0, 7b6 <root+0x212>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     776:	f000 fe07 	bl	1388 <__pi_release>
				proceed get_new_node_id;
     77a:	2005      	movs	r0, #5
     77c:	e78e      	b.n	69c <root+0xf8>
				proceed clear_neighbour_array;
     77e:	2008      	movs	r0, #8
     780:	e78c      	b.n	69c <root+0xf8>
				proceed create_proto_start;
     782:	200c      	movs	r0, #12
     784:	e78a      	b.n	69c <root+0xf8>
				proceed start_delete_proto;
     786:	2011      	movs	r0, #17
     788:	e788      	b.n	69c <root+0xf8>
				proceed retrieve_proto;
     78a:	201a      	movs	r0, #26
     78c:	e786      	b.n	69c <root+0xf8>
				proceed display_db;
     78e:	201b      	movs	r0, #27
     790:	e784      	b.n	69c <root+0xf8>
				proceed del_local;
     792:	201d      	movs	r0, #29
     794:	e782      	b.n	69c <root+0xf8>
			if(node_db->id == node_db->nnodes[i]){
     796:	1919      	adds	r1, r3, r4
     798:	781a      	ldrb	r2, [r3, #0]
     79a:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     79e:	429a      	cmp	r2, r3
     7a0:	d107      	bne.n	7b2 <root+0x20e>
				strncpy(reason, "ID is already in use", 50);
     7a2:	4638      	mov	r0, r7
     7a4:	2232      	movs	r2, #50	; 0x32
     7a6:	4631      	mov	r1, r6
     7a8:	f001 f8e1 	bl	196e <__pi_strncpy>
				proceed invalid_node_id;
     7ac:	2007      	movs	r0, #7
     7ae:	f001 f851 	bl	1854 <proceed>
		for(int i = 0; i < node_db->index; i++){
     7b2:	3401      	adds	r4, #1
     7b4:	e7a6      	b.n	704 <root+0x160>
		if (discovery_wait_flag == 0){
     7b6:	4b1a      	ldr	r3, [pc, #104]	; (820 <root+0x27c>)
     7b8:	681a      	ldr	r2, [r3, #0]
     7ba:	b93a      	cbnz	r2, 7cc <root+0x228>
			discovery_wait_flag=1;
     7bc:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     7be:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     7c0:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     7c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
     7c6:	f001 f895 	bl	18f4 <delay>
     7ca:	e7d4      	b.n	776 <root+0x1d2>
		}
		if (discovery_wait_flag == 1){
     7cc:	2a01      	cmp	r2, #1
     7ce:	d129      	bne.n	824 <root+0x280>
			discovery_wait_flag=0;
     7d0:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     7d2:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     7d4:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     7d6:	e7f4      	b.n	7c2 <root+0x21e>
     7d8:	200006a0 	andcs	r0, r0, r0, lsr #13
     7dc:	00005abc 			; <UNDEFINED> instruction: 0x00005abc
     7e0:	20000000 	andcs	r0, r0, r0
     7e4:	00004c2b 	andeq	r4, r0, fp, lsr #24
     7e8:	000001e9 	andeq	r0, r0, r9, ror #3
     7ec:	00004c45 	andeq	r4, r0, r5, asr #24
     7f0:	2000069e 	mulcs	r0, lr, r6
     7f4:	00004d31 	andeq	r4, r0, r1, lsr sp
     7f8:	00004d34 	andeq	r4, r0, r4, lsr sp
     7fc:	00004a4a 	andeq	r4, r0, sl, asr #20
     800:	00004d55 	andeq	r4, r0, r5, asr sp
     804:	00004d6b 	andeq	r4, r0, fp, ror #26
     808:	2000066c 	andcs	r0, r0, ip, ror #12
     80c:	00004d9e 	muleq	r0, lr, sp
     810:	00004dab 	andeq	r4, r0, fp, lsr #27
     814:	00004dc0 	andeq	r4, r0, r0, asr #27
     818:	00004ded 	andeq	r4, r0, sp, ror #27
     81c:	000000c9 	andeq	r0, r0, r9, asr #1
     820:	20000554 	andcs	r0, r0, r4, asr r5
			release;
		}
	
	state display_neighbour_nodes:
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	200b      	movs	r0, #11
     826:	49ab      	ldr	r1, [pc, #684]	; (ad4 <root+0x530>)
     828:	f001 fed0 	bl	25cc <ser_out>
		//ser_outf(display_neighbour_nodes, "\r\n Neighbors: %s", node_db->nnodes);
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	2400      	movs	r4, #0
			if (node_db->nnodes[i] == 0) break;
     82e:	4eaa      	ldr	r6, [pc, #680]	; (ad8 <root+0x534>)
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	4daa      	ldr	r5, [pc, #680]	; (adc <root+0x538>)
			if (node_db->nnodes[i] == 0) break;
     832:	6833      	ldr	r3, [r6, #0]
     834:	191a      	adds	r2, r3, r4
     836:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     83a:	b14a      	cbz	r2, 850 <root+0x2ac>
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	f504 628d 	add.w	r2, r4, #1128	; 0x468
     840:	4629      	mov	r1, r5
     842:	200b      	movs	r0, #11
     844:	441a      	add	r2, r3
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     846:	3401      	adds	r4, #1
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     848:	f001 ff32 	bl	26b0 <ser_outf>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	2c19      	cmp	r4, #25
     84e:	d1f0      	bne.n	832 <root+0x28e>
		}
		ser_out(display_neighbour_nodes, "\r\n");
     850:	200b      	movs	r0, #11
     852:	49a3      	ldr	r1, [pc, #652]	; (ae0 <root+0x53c>)
     854:	f001 feba 	bl	25cc <ser_out>
		proceed menu;
     858:	2001      	movs	r0, #1
     85a:	f000 fffb 	bl	1854 <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     85e:	200c      	movs	r0, #12
     860:	49a0      	ldr	r1, [pc, #640]	; (ae4 <root+0x540>)
     862:	f001 feb3 	bl	25cc <ser_out>

	state get_id_for_create:
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     866:	4ca0      	ldr	r4, [pc, #640]	; (ae8 <root+0x544>)
     868:	200d      	movs	r0, #13
     86a:	4622      	mov	r2, r4
     86c:	499f      	ldr	r1, [pc, #636]	; (aec <root+0x548>)
     86e:	f001 ff49 	bl	2704 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     872:	7823      	ldrb	r3, [r4, #0]
     874:	3b01      	subs	r3, #1
     876:	2b18      	cmp	r3, #24
     878:	d907      	bls.n	88a <root+0x2e6>
			strncpy(reason, "Error: improper ID", 50);
     87a:	489d      	ldr	r0, [pc, #628]	; (af0 <root+0x54c>)
     87c:	2232      	movs	r2, #50	; 0x32
     87e:	499d      	ldr	r1, [pc, #628]	; (af4 <root+0x550>)
     880:	f001 f875 	bl	196e <__pi_strncpy>
			proceed error;
     884:	2020      	movs	r0, #32
     886:	f000 ffe5 	bl	1854 <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88a:	200e      	movs	r0, #14
     88c:	499a      	ldr	r1, [pc, #616]	; (af8 <root+0x554>)
     88e:	f001 fe9d 	bl	25cc <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     892:	2214      	movs	r2, #20
     894:	200f      	movs	r0, #15
     896:	4999      	ldr	r1, [pc, #612]	; (afc <root+0x558>)
     898:	f001 fece 	bl	2638 <ser_in>
		// NOTE: im not sure if we need to add checks here, this should stop them from entering anymore than 20 characters?

	state init_create_record_message:

		struct ResponseMessage *create_message;
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	201e      	movs	r0, #30
     89e:	f001 f959 	bl	1b54 <__pi_malloc>
		create_message->gid = node_db->gid;
     8a2:	4d8d      	ldr	r5, [pc, #564]	; (ad8 <root+0x534>)
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8a4:	4604      	mov	r4, r0
		create_message->gid = node_db->gid;
     8a6:	682b      	ldr	r3, [r5, #0]
     8a8:	885b      	ldrh	r3, [r3, #2]
     8aa:	8003      	strh	r3, [r0, #0]
		create_message->tpe = 2;
     8ac:	2302      	movs	r3, #2
     8ae:	7083      	strb	r3, [r0, #2]
		create_message->request_number = generate_request_num();
     8b0:	f7ff fc78 	bl	1a4 <generate_request_num>
     8b4:	70e0      	strb	r0, [r4, #3]
		create_message->sender_id = node_db->id;
     8b6:	682b      	ldr	r3, [r5, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     8ba:	781b      	ldrb	r3, [r3, #0]
		strncpy(create_message->record, user_provided_record, 20);
     8bc:	498f      	ldr	r1, [pc, #572]	; (afc <root+0x558>)
		create_message->sender_id = node_db->id;
     8be:	7123      	strb	r3, [r4, #4]
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	4b89      	ldr	r3, [pc, #548]	; (ae8 <root+0x544>)
		strncpy(create_message->record, user_provided_record, 20);
     8c2:	f104 0008 	add.w	r0, r4, #8
		create_message->receiver_id = user_provided_receiver_id;
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	7163      	strb	r3, [r4, #5]
		strncpy(create_message->record, user_provided_record, 20);
     8ca:	f001 f850 	bl	196e <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     8ce:	78e2      	ldrb	r2, [r4, #3]
     8d0:	4b8b      	ldr	r3, [pc, #556]	; (b00 <root+0x55c>)
		response_checker[1] = create_message->tpe;

		call sender(create_message, wait);
     8d2:	4621      	mov	r1, r4
		response_checker[0] = create_message->request_number;
     8d4:	601a      	str	r2, [r3, #0]
		response_checker[1] = create_message->tpe;
     8d6:	78a2      	ldrb	r2, [r4, #2]
		call sender(create_message, wait);
     8d8:	488a      	ldr	r0, [pc, #552]	; (b04 <root+0x560>)
		response_checker[1] = create_message->tpe;
     8da:	605a      	str	r2, [r3, #4]
		call sender(create_message, wait);
     8dc:	f001 f98e 	bl	1bfc <__pi_fork>
     8e0:	211e      	movs	r1, #30
     8e2:	f000 fff5 	bl	18d0 <__pi_join>
     8e6:	2800      	cmp	r0, #0
     8e8:	f47f af45 	bne.w	776 <root+0x1d2>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	2011      	movs	r0, #17
     8ee:	497d      	ldr	r1, [pc, #500]	; (ae4 <root+0x540>)
     8f0:	f001 fe6c 	bl	25cc <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	4c7c      	ldr	r4, [pc, #496]	; (ae8 <root+0x544>)
     8f6:	2012      	movs	r0, #18
     8f8:	4622      	mov	r2, r4
     8fa:	497c      	ldr	r1, [pc, #496]	; (aec <root+0x548>)
     8fc:	f001 ff02 	bl	2704 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	7823      	ldrb	r3, [r4, #0]
     902:	3b01      	subs	r3, #1
     904:	2b18      	cmp	r3, #24
     906:	d907      	bls.n	918 <root+0x374>
			strncpy(reason, "Error: improper node ID", 50);
     908:	4879      	ldr	r0, [pc, #484]	; (af0 <root+0x54c>)
     90a:	2232      	movs	r2, #50	; 0x32
     90c:	497e      	ldr	r1, [pc, #504]	; (b08 <root+0x564>)
     90e:	f001 f82e 	bl	196e <__pi_strncpy>
			proceed error;
     912:	2020      	movs	r0, #32
     914:	f000 ff9e 	bl	1854 <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	2013      	movs	r0, #19
     91a:	497c      	ldr	r1, [pc, #496]	; (b0c <root+0x568>)
     91c:	f001 fe56 	bl	25cc <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	4c7b      	ldr	r4, [pc, #492]	; (b10 <root+0x56c>)
     922:	2014      	movs	r0, #20
     924:	4622      	mov	r2, r4
     926:	4971      	ldr	r1, [pc, #452]	; (aec <root+0x548>)
     928:	f001 feec 	bl	2704 <ser_inf>

		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	7823      	ldrb	r3, [r4, #0]
     92e:	2b28      	cmp	r3, #40	; 0x28
     930:	d907      	bls.n	942 <root+0x39e>
			strncpy(reason, "Error: invalid index", 50);
     932:	486f      	ldr	r0, [pc, #444]	; (af0 <root+0x54c>)
     934:	2232      	movs	r2, #50	; 0x32
     936:	4977      	ldr	r1, [pc, #476]	; (b14 <root+0x570>)
     938:	f001 f819 	bl	196e <__pi_strncpy>
			proceed error;
     93c:	2020      	movs	r0, #32
     93e:	f000 ff89 	bl	1854 <proceed>
		};

	state init_delete_record_message:

		struct ResponseMessage *delete_record;
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     942:	201e      	movs	r0, #30
     944:	f001 f906 	bl	1b54 <__pi_malloc>
		delete_record->gid = node_db->gid;
		delete_record->tpe = DELETE_RECORD;
     948:	2203      	movs	r2, #3
		delete_record->gid = node_db->gid;
     94a:	4c63      	ldr	r4, [pc, #396]	; (ad8 <root+0x534>)
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	9002      	str	r0, [sp, #8]
		delete_record->gid = node_db->gid;
     94e:	6823      	ldr	r3, [r4, #0]
     950:	885b      	ldrh	r3, [r3, #2]
     952:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     954:	9b02      	ldr	r3, [sp, #8]
     956:	709a      	strb	r2, [r3, #2]
		delete_record->request_number = generate_request_num();
     958:	9d02      	ldr	r5, [sp, #8]
     95a:	f7ff fc23 	bl	1a4 <generate_request_num>
     95e:	70e8      	strb	r0, [r5, #3]
		delete_record->sender_id = node_db->id;
     960:	6822      	ldr	r2, [r4, #0]
     962:	9b02      	ldr	r3, [sp, #8]
     964:	7812      	ldrb	r2, [r2, #0]
		delete_record->receiver_id = user_provided_receiver_id;
		delete_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
     966:	78d9      	ldrb	r1, [r3, #3]
		delete_record->sender_id = node_db->id;
     968:	711a      	strb	r2, [r3, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     96a:	4a5f      	ldr	r2, [pc, #380]	; (ae8 <root+0x544>)
		response_checker[1] = delete_record->tpe;

		call sender(&delete_record, wait);
     96c:	4865      	ldr	r0, [pc, #404]	; (b04 <root+0x560>)
		delete_record->receiver_id = user_provided_receiver_id;
     96e:	7812      	ldrb	r2, [r2, #0]
     970:	715a      	strb	r2, [r3, #5]
		delete_record->record_index = user_provided_index;
     972:	4a67      	ldr	r2, [pc, #412]	; (b10 <root+0x56c>)
     974:	7812      	ldrb	r2, [r2, #0]
     976:	771a      	strb	r2, [r3, #28]
		response_checker[0] = delete_record->request_number;
     978:	4a61      	ldr	r2, [pc, #388]	; (b00 <root+0x55c>)
     97a:	6011      	str	r1, [r2, #0]
		response_checker[1] = delete_record->tpe;
     97c:	789b      	ldrb	r3, [r3, #2]
		call sender(&delete_record, wait);
     97e:	a902      	add	r1, sp, #8
		response_checker[1] = delete_record->tpe;
     980:	6053      	str	r3, [r2, #4]
		call sender(&delete_record, wait);
     982:	f001 f93b 	bl	1bfc <__pi_fork>
     986:	211e      	movs	r1, #30
     988:	f000 ffa2 	bl	18d0 <__pi_join>
     98c:	2800      	cmp	r0, #0
     98e:	f47f aef2 	bne.w	776 <root+0x1d2>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     992:	2016      	movs	r0, #22
     994:	4953      	ldr	r1, [pc, #332]	; (ae4 <root+0x540>)
     996:	f001 fe19 	bl	25cc <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99a:	4c53      	ldr	r4, [pc, #332]	; (ae8 <root+0x544>)
     99c:	2017      	movs	r0, #23
     99e:	4622      	mov	r2, r4
     9a0:	4952      	ldr	r1, [pc, #328]	; (aec <root+0x548>)
     9a2:	f001 feaf 	bl	2704 <ser_inf>

		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a6:	7823      	ldrb	r3, [r4, #0]
     9a8:	3b01      	subs	r3, #1
     9aa:	2b18      	cmp	r3, #24
     9ac:	d907      	bls.n	9be <root+0x41a>
			strncpy(reason, "Error: improper node ID", 50);
     9ae:	4850      	ldr	r0, [pc, #320]	; (af0 <root+0x54c>)
     9b0:	2232      	movs	r2, #50	; 0x32
     9b2:	4955      	ldr	r1, [pc, #340]	; (b08 <root+0x564>)
     9b4:	f000 ffdb 	bl	196e <__pi_strncpy>
			proceed error;
     9b8:	2020      	movs	r0, #32
     9ba:	f000 ff4b 	bl	1854 <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9be:	2018      	movs	r0, #24
     9c0:	4952      	ldr	r1, [pc, #328]	; (b0c <root+0x568>)
     9c2:	f001 fe03 	bl	25cc <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c6:	4c52      	ldr	r4, [pc, #328]	; (b10 <root+0x56c>)
     9c8:	2019      	movs	r0, #25
     9ca:	4622      	mov	r2, r4
     9cc:	4947      	ldr	r1, [pc, #284]	; (aec <root+0x548>)
     9ce:	f001 fe99 	bl	2704 <ser_inf>

		if (user_provided_index < 0 || user_provided_index > 40){
     9d2:	7823      	ldrb	r3, [r4, #0]
     9d4:	2b28      	cmp	r3, #40	; 0x28
     9d6:	d907      	bls.n	9e8 <root+0x444>
			strncpy(reason, "Error: invalid index", 50);
     9d8:	4845      	ldr	r0, [pc, #276]	; (af0 <root+0x54c>)
     9da:	2232      	movs	r2, #50	; 0x32
     9dc:	494d      	ldr	r1, [pc, #308]	; (b14 <root+0x570>)
     9de:	f000 ffc6 	bl	196e <__pi_strncpy>
			proceed error;
     9e2:	2020      	movs	r0, #32
     9e4:	f000 ff36 	bl	1854 <proceed>
		};

	state retrieve_proto:

		struct ResponseMessage *retrieve_record;
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	201e      	movs	r0, #30
     9ea:	f001 f8b3 	bl	1b54 <__pi_malloc>
		retrieve_record->gid = node_db->gid;
		retrieve_record->tpe = RETRIEVE_RECORD;
     9ee:	2204      	movs	r2, #4
		retrieve_record->gid = node_db->gid;
     9f0:	4c39      	ldr	r4, [pc, #228]	; (ad8 <root+0x534>)
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9f2:	9003      	str	r0, [sp, #12]
		retrieve_record->gid = node_db->gid;
     9f4:	6823      	ldr	r3, [r4, #0]
     9f6:	885b      	ldrh	r3, [r3, #2]
     9f8:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fa:	9b03      	ldr	r3, [sp, #12]
     9fc:	709a      	strb	r2, [r3, #2]
		retrieve_record->request_number = generate_request_num();
     9fe:	9d03      	ldr	r5, [sp, #12]
     a00:	f7ff fbd0 	bl	1a4 <generate_request_num>
     a04:	70e8      	strb	r0, [r5, #3]
		retrieve_record->sender_id = node_db->id;
     a06:	6822      	ldr	r2, [r4, #0]
     a08:	9b03      	ldr	r3, [sp, #12]
     a0a:	7812      	ldrb	r2, [r2, #0]
		retrieve_record->receiver_id = user_provided_receiver_id;
		retrieve_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     a0c:	78d9      	ldrb	r1, [r3, #3]
		retrieve_record->sender_id = node_db->id;
     a0e:	711a      	strb	r2, [r3, #4]
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	4a35      	ldr	r2, [pc, #212]	; (ae8 <root+0x544>)
		response_checker[1] = retrieve_record->tpe;
		
		call sender(&retrieve_record, wait);
     a12:	483c      	ldr	r0, [pc, #240]	; (b04 <root+0x560>)
		retrieve_record->receiver_id = user_provided_receiver_id;
     a14:	7812      	ldrb	r2, [r2, #0]
     a16:	715a      	strb	r2, [r3, #5]
		retrieve_record->record_index = user_provided_index;
     a18:	4a3d      	ldr	r2, [pc, #244]	; (b10 <root+0x56c>)
     a1a:	7812      	ldrb	r2, [r2, #0]
     a1c:	771a      	strb	r2, [r3, #28]
		response_checker[0] = retrieve_record->request_number;
     a1e:	4a38      	ldr	r2, [pc, #224]	; (b00 <root+0x55c>)
     a20:	6011      	str	r1, [r2, #0]
		response_checker[1] = retrieve_record->tpe;
     a22:	789b      	ldrb	r3, [r3, #2]
		call sender(&retrieve_record, wait);
     a24:	a903      	add	r1, sp, #12
		response_checker[1] = retrieve_record->tpe;
     a26:	6053      	str	r3, [r2, #4]
		call sender(&retrieve_record, wait);
     a28:	f001 f8e8 	bl	1bfc <__pi_fork>
     a2c:	211e      	movs	r1, #30
     a2e:	f000 ff4f 	bl	18d0 <__pi_join>
     a32:	2800      	cmp	r0, #0
     a34:	f47f ae9f 	bne.w	776 <root+0x1d2>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	201b      	movs	r0, #27
     a3a:	4937      	ldr	r1, [pc, #220]	; (b18 <root+0x574>)
     a3c:	f001 fdc6 	bl	25cc <ser_out>
		
	state loop_through_data:
		if(node_db->data_base.item_count != 0){
     a40:	4d25      	ldr	r5, [pc, #148]	; (ad8 <root+0x534>)
     a42:	682a      	ldr	r2, [r5, #0]
     a44:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
     a48:	bb62      	cbnz	r2, aa4 <root+0x500>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
			}
		}
		ser_out(loop_through_data, "\r\n");
     a4a:	201c      	movs	r0, #28
     a4c:	4924      	ldr	r1, [pc, #144]	; (ae0 <root+0x53c>)
     a4e:	f001 fdbd 	bl	25cc <ser_out>
		proceed menu;
     a52:	2001      	movs	r0, #1
     a54:	f000 fefe 	bl	1854 <proceed>

	state del_local:
		delete_all(node_db);
     a58:	4b1f      	ldr	r3, [pc, #124]	; (ad8 <root+0x534>)
     a5a:	6818      	ldr	r0, [r3, #0]
     a5c:	f7ff fd8e 	bl	57c <delete_all>
		proceed menu;
     a60:	2001      	movs	r0, #1
     a62:	f000 fef7 	bl	1854 <proceed>

	state wait:
		delay(3000, timeout);
     a66:	211f      	movs	r1, #31
     a68:	f640 30b8 	movw	r0, #3000	; 0xbb8
     a6c:	f000 ff42 	bl	18f4 <delay>
		when(&response_flag, menu);
     a70:	2101      	movs	r1, #1
     a72:	482a      	ldr	r0, [pc, #168]	; (b1c <root+0x578>)
     a74:	f000 fef8 	bl	1868 <__pi_wait>
		release;
     a78:	e67d      	b.n	776 <root+0x1d2>
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7a:	fb06 f204 	mul.w	r2, r6, r4
     a7e:	1898      	adds	r0, r3, r2
     a80:	3205      	adds	r2, #5
     a82:	4413      	add	r3, r2
     a84:	9301      	str	r3, [sp, #4]
     a86:	7903      	ldrb	r3, [r0, #4]
     a88:	4622      	mov	r2, r4
     a8a:	9300      	str	r3, [sp, #0]
     a8c:	69c3      	ldr	r3, [r0, #28]
     a8e:	4639      	mov	r1, r7
     a90:	201c      	movs	r0, #28
     a92:	f001 fe0d 	bl	26b0 <ser_outf>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a96:	3401      	adds	r4, #1
     a98:	682b      	ldr	r3, [r5, #0]
     a9a:	f893 2464 	ldrb.w	r2, [r3, #1124]	; 0x464
     a9e:	42a2      	cmp	r2, r4
     aa0:	daeb      	bge.n	a7a <root+0x4d6>
     aa2:	e7d2      	b.n	a4a <root+0x4a6>
     aa4:	2400      	movs	r4, #0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa6:	261c      	movs	r6, #28
     aa8:	4f1d      	ldr	r7, [pc, #116]	; (b20 <root+0x57c>)
     aaa:	e7f5      	b.n	a98 <root+0x4f4>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	201f      	movs	r0, #31
     aae:	491d      	ldr	r1, [pc, #116]	; (b24 <root+0x580>)
     ab0:	f001 fd8c 	bl	25cc <ser_out>
		proceed menu;
     ab4:	2001      	movs	r0, #1
     ab6:	f000 fecd 	bl	1854 <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     aba:	2007      	movs	r0, #7
     abc:	4a0c      	ldr	r2, [pc, #48]	; (af0 <root+0x54c>)
     abe:	491a      	ldr	r1, [pc, #104]	; (b28 <root+0x584>)
     ac0:	f001 fdf6 	bl	26b0 <ser_outf>
		proceed menu;
     ac4:	2001      	movs	r0, #1
     ac6:	f000 fec5 	bl	1854 <proceed>
}
     aca:	b005      	add	sp, #20
     acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ace:	f000 fe39 	bl	1744 <__pi_badstate>
     ad2:	e7fa      	b.n	aca <root+0x526>
     ad4:	00004e07 	andeq	r4, r0, r7, lsl #28
     ad8:	200006a0 	andcs	r0, r0, r0, lsr #13
     adc:	00004e15 	andeq	r4, r0, r5, lsl lr
     ae0:	000049c0 	andeq	r4, r0, r0, asr #19
     ae4:	00004e1a 	andeq	r4, r0, sl, lsl lr
     ae8:	2000056d 	andcs	r0, r0, sp, ror #10
     aec:	00005143 	andeq	r5, r0, r3, asr #2
     af0:	2000066c 	andcs	r0, r0, ip, ror #12
     af4:	00004e3c 	andeq	r4, r0, ip, lsr lr
     af8:	00004e4f 	andeq	r4, r0, pc, asr #28
     afc:	2000056e 	andcs	r0, r0, lr, ror #10
     b00:	20000664 	andcs	r0, r0, r4, ror #12
     b04:	000000c9 	andeq	r0, r0, r9, asr #1
     b08:	00004e78 	andeq	r4, r0, r8, ror lr
     b0c:	00004e90 	muleq	r0, r0, lr
     b10:	2000056c 	andcs	r0, r0, ip, ror #10
     b14:	00004eb9 			; <UNDEFINED> instruction: 0x00004eb9
     b18:	00004ece 	andeq	r4, r0, lr, asr #29
     b1c:	20000564 	andcs	r0, r0, r4, ror #10
     b20:	00004ef7 	strdeq	r4, [r0], -r7
     b24:	00004f07 	andeq	r4, r0, r7, lsl #30
     b28:	00004f29 	andeq	r4, r0, r9, lsr #30

00000b2c <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     b2c:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     b2e:	4801      	ldr	r0, [pc, #4]	; (b34 <devinit_uart+0x8>)
     b30:	f000 bf3c 	b.w	19ac <adddevfunc>
     b34:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9

00000b38 <udelay>:
void udelay (volatile word n) {
     b38:	b082      	sub	sp, #8
     b3a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     b3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b42:	b29b      	uxth	r3, r3
     b44:	b90b      	cbnz	r3, b4a <udelay+0x12>
}
     b46:	b002      	add	sp, #8
     b48:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     b4a:	2304      	movs	r3, #4
	while (n--);
     b4c:	461a      	mov	r2, r3
     b4e:	3b01      	subs	r3, #1
     b50:	b29b      	uxth	r3, r3
     b52:	2a00      	cmp	r2, #0
     b54:	d1fa      	bne.n	b4c <udelay+0x14>
		n--;
     b56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b5a:	3b01      	subs	r3, #1
     b5c:	b29b      	uxth	r3, r3
     b5e:	f8ad 3006 	strh.w	r3, [sp, #6]
     b62:	e7ec      	b.n	b3e <udelay+0x6>

00000b64 <mdelay>:
void mdelay (volatile word n) {
     b64:	b507      	push	{r0, r1, r2, lr}
     b66:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     b6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b6e:	b29b      	uxth	r3, r3
     b70:	b913      	cbnz	r3, b78 <mdelay+0x14>
}
     b72:	b003      	add	sp, #12
     b74:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     b78:	f240 30e7 	movw	r0, #999	; 0x3e7
     b7c:	f7ff ffdc 	bl	b38 <udelay>
		n--;
     b80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     b84:	3b01      	subs	r3, #1
     b86:	b29b      	uxth	r3, r3
     b88:	f8ad 3006 	strh.w	r3, [sp, #6]
     b8c:	e7ed      	b.n	b6a <mdelay+0x6>
	...

00000b90 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     b90:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     b92:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     b94:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     b96:	d505      	bpl.n	ba4 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     b98:	4b0a      	ldr	r3, [pc, #40]	; (bc4 <__pi_ondomain+0x34>)
     b9a:	78da      	ldrb	r2, [r3, #3]
     b9c:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     b9e:	bf84      	itt	hi
     ba0:	2201      	movhi	r2, #1
     ba2:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     ba4:	4d08      	ldr	r5, [pc, #32]	; (bc8 <__pi_ondomain+0x38>)
     ba6:	4620      	mov	r0, r4
     ba8:	682b      	ldr	r3, [r5, #0]
     baa:	695b      	ldr	r3, [r3, #20]
     bac:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bae:	682b      	ldr	r3, [r5, #0]
     bb0:	4620      	mov	r0, r4
     bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     bb4:	4798      	blx	r3
     bb6:	2801      	cmp	r0, #1
     bb8:	d1f9      	bne.n	bae <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     bba:	4b02      	ldr	r3, [pc, #8]	; (bc4 <__pi_ondomain+0x34>)
     bbc:	6858      	ldr	r0, [r3, #4]
     bbe:	4304      	orrs	r4, r0
     bc0:	605c      	str	r4, [r3, #4]
}
     bc2:	bd38      	pop	{r3, r4, r5, pc}
     bc4:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     bc8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000bcc <__pi_offdomain>:
void __pi_offdomain (lword d) {
     bcc:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     bce:	4d0d      	ldr	r5, [pc, #52]	; (c04 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     bd0:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     bd2:	682b      	ldr	r3, [r5, #0]
     bd4:	699b      	ldr	r3, [r3, #24]
     bd6:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	682b      	ldr	r3, [r5, #0]
     bda:	4620      	mov	r0, r4
     bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     bde:	4798      	blx	r3
     be0:	2802      	cmp	r0, #2
     be2:	d1f9      	bne.n	bd8 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	f014 0f01 	tst.w	r4, #1
     be8:	4b07      	ldr	r3, [pc, #28]	; (c08 <__pi_offdomain+0x3c>)
     bea:	d006      	beq.n	bfa <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	7899      	ldrb	r1, [r3, #2]
     bee:	78da      	ldrb	r2, [r3, #3]
     bf0:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf2:	bf82      	ittt	hi
     bf4:	789a      	ldrbhi	r2, [r3, #2]
     bf6:	b2d2      	uxtbhi	r2, r2
     bf8:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     bfa:	6858      	ldr	r0, [r3, #4]
     bfc:	ea20 0404 	bic.w	r4, r0, r4
     c00:	605c      	str	r4, [r3, #4]
}
     c02:	bd38      	pop	{r3, r4, r5, pc}
     c04:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     c08:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00000c0c <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     c0c:	460a      	mov	r2, r1
     c0e:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     c10:	4601      	mov	r1, r0
     c12:	480f      	ldr	r0, [pc, #60]	; (c50 <__pi_syserror+0x44>)
     c14:	f001 f818 	bl	1c48 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c1a:	2540      	movs	r5, #64	; 0x40
     c1c:	462f      	mov	r7, r5
     c1e:	4e0d      	ldr	r6, [pc, #52]	; (c54 <__pi_syserror+0x48>)
     c20:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     c22:	490d      	ldr	r1, [pc, #52]	; (c58 <__pi_syserror+0x4c>)
     c24:	6037      	str	r7, [r6, #0]
     c26:	6034      	str	r4, [r6, #0]
     c28:	780b      	ldrb	r3, [r1, #0]
     c2a:	780b      	ldrb	r3, [r1, #0]
     c2c:	20c8      	movs	r0, #200	; 0xc8
     c2e:	f36f 1307 	bfc	r3, #4, #4
     c32:	700b      	strb	r3, [r1, #0]
     c34:	f7ff ff96 	bl	b64 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	4b08      	ldr	r3, [pc, #32]	; (c5c <__pi_syserror+0x50>)
     c3a:	20c8      	movs	r0, #200	; 0xc8
     c3c:	601d      	str	r5, [r3, #0]
     c3e:	601c      	str	r4, [r3, #0]
     c40:	780b      	ldrb	r3, [r1, #0]
     c42:	780b      	ldrb	r3, [r1, #0]
     c44:	f36f 1307 	bfc	r3, #4, #4
     c48:	700b      	strb	r3, [r1, #0]
     c4a:	f7ff ff8b 	bl	b64 <mdelay>
	while (1) {
     c4e:	e7e7      	b.n	c20 <__pi_syserror+0x14>
     c50:	00004f35 	andeq	r4, r0, r5, lsr pc
     c54:	40022090 	mulmi	r2, r0, r0
     c58:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     c5c:	400220a0 	andmi	r2, r2, r0, lsr #1

00000c60 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     c60:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     c62:	4b0a      	ldr	r3, [pc, #40]	; (c8c <tci_run_delay_timer+0x2c>)
     c64:	881c      	ldrh	r4, [r3, #0]
     c66:	4b0a      	ldr	r3, [pc, #40]	; (c90 <tci_run_delay_timer+0x30>)
     c68:	8818      	ldrh	r0, [r3, #0]
     c6a:	4b0a      	ldr	r3, [pc, #40]	; (c94 <tci_run_delay_timer+0x34>)
     c6c:	1b00      	subs	r0, r0, r4
     c6e:	b284      	uxth	r4, r0
     c70:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c72:	f002 fe4b 	bl	390c <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     c76:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c78:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c7a:	4b07      	ldr	r3, [pc, #28]	; (c98 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     c80:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	6018      	str	r0, [r3, #0]
	sti_tim;
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <tci_run_delay_timer+0x3c>)
     c88:	601a      	str	r2, [r3, #0]
}
     c8a:	bd10      	pop	{r4, pc}
     c8c:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
     c90:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     c94:	20000582 	andcs	r0, r0, r2, lsl #11
     c98:	40092018 	andmi	r2, r9, r8, lsl r0
     c9c:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000ca0 <tci_run_auxiliary_timer>:
	cli_aux;
     ca0:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     ca2:	b510      	push	{r4, lr}
	cli_aux;
     ca4:	4c06      	ldr	r4, [pc, #24]	; (cc0 <tci_run_auxiliary_timer+0x20>)
     ca6:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	f002 fe30 	bl	390c <NOROM_AONRTCCurrent64BitValueGet>
     cac:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     cae:	4b05      	ldr	r3, [pc, #20]	; (cc4 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     cb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     cb4:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     cb6:	6018      	str	r0, [r3, #0]
	sti_aux;
     cb8:	2301      	movs	r3, #1
     cba:	6023      	str	r3, [r4, #0]
}
     cbc:	bd10      	pop	{r4, pc}
     cbe:	bf00      	nop
     cc0:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     cc4:	40092020 	andmi	r2, r9, r0, lsr #32

00000cc8 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     cc8:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     cca:	4b3b      	ldr	r3, [pc, #236]	; (db8 <AONRTCIntHandler+0xf0>)
     ccc:	6818      	ldr	r0, [r3, #0]
     cce:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     cd2:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     cd6:	d542      	bpl.n	d5e <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     cd8:	4b38      	ldr	r3, [pc, #224]	; (dbc <AONRTCIntHandler+0xf4>)
     cda:	6819      	ldr	r1, [r3, #0]
     cdc:	2900      	cmp	r1, #0
     cde:	d053      	beq.n	d88 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     ce0:	880a      	ldrh	r2, [r1, #0]
     ce2:	2a00      	cmp	r2, #0
     ce4:	d04e      	beq.n	d84 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     ce6:	3a01      	subs	r2, #1
     ce8:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     cea:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     cec:	685c      	ldr	r4, [r3, #4]
     cee:	b194      	cbz	r4, d16 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     cf0:	8821      	ldrh	r1, [r4, #0]
     cf2:	b111      	cbz	r1, cfa <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     cf4:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     cf6:	3901      	subs	r1, #1
     cf8:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     cfa:	689c      	ldr	r4, [r3, #8]
     cfc:	b15c      	cbz	r4, d16 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     cfe:	8821      	ldrh	r1, [r4, #0]
     d00:	b111      	cbz	r1, d08 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     d02:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     d04:	3901      	subs	r1, #1
     d06:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     d08:	68d9      	ldr	r1, [r3, #12]
     d0a:	b121      	cbz	r1, d16 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     d0c:	880b      	ldrh	r3, [r1, #0]
     d0e:	b113      	cbz	r3, d16 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     d10:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     d12:	3b01      	subs	r3, #1
     d14:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     d16:	4b2a      	ldr	r3, [pc, #168]	; (dc0 <AONRTCIntHandler+0xf8>)
     d18:	7819      	ldrb	r1, [r3, #0]
     d1a:	0909      	lsrs	r1, r1, #4
     d1c:	d047      	beq.n	dae <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     d1e:	7859      	ldrb	r1, [r3, #1]
     d20:	1c4a      	adds	r2, r1, #1
     d22:	b2d2      	uxtb	r2, r2
     d24:	705a      	strb	r2, [r3, #1]
     d26:	b9d1      	cbnz	r1, d5e <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     d28:	781a      	ldrb	r2, [r3, #0]
     d2a:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     d2e:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     d30:	d02c      	beq.n	d8c <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     d32:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	bf42      	ittt	mi
     d36:	2140      	movmi	r1, #64	; 0x40
     d38:	4a22      	ldrmi	r2, [pc, #136]	; (dc4 <AONRTCIntHandler+0xfc>)
     d3a:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     d3c:	781a      	ldrb	r2, [r3, #0]
     d3e:	0692      	lsls	r2, r2, #26
     d40:	bf42      	ittt	mi
     d42:	2180      	movmi	r1, #128	; 0x80
     d44:	4a1f      	ldrmi	r2, [pc, #124]	; (dc4 <AONRTCIntHandler+0xfc>)
     d46:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     d48:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     d4a:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     d4c:	781a      	ldrb	r2, [r3, #0]
     d4e:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     d52:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     d54:	781a      	ldrb	r2, [r3, #0]
     d56:	0752      	lsls	r2, r2, #29
     d58:	d501      	bpl.n	d5e <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     d5a:	22c8      	movs	r2, #200	; 0xc8
     d5c:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     d5e:	07c3      	lsls	r3, r0, #31
     d60:	d50f      	bpl.n	d82 <AONRTCIntHandler+0xba>
		cli_tim;
     d62:	2100      	movs	r1, #0
     d64:	4b18      	ldr	r3, [pc, #96]	; (dc8 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     d66:	4a19      	ldr	r2, [pc, #100]	; (dcc <AONRTCIntHandler+0x104>)
     d68:	4819      	ldr	r0, [pc, #100]	; (dd0 <AONRTCIntHandler+0x108>)
		cli_tim;
     d6a:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     d6c:	8803      	ldrh	r3, [r0, #0]
     d6e:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     d70:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     d72:	4423      	add	r3, r4
		RISE_N_SHINE;
     d74:	4a12      	ldr	r2, [pc, #72]	; (dc0 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     d76:	b29b      	uxth	r3, r3
     d78:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     d7a:	7813      	ldrb	r3, [r2, #0]
     d7c:	f043 0302 	orr.w	r3, r3, #2
     d80:	7013      	strb	r3, [r2, #0]
}
     d82:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     d84:	2201      	movs	r2, #1
     d86:	e7b1      	b.n	cec <AONRTCIntHandler+0x24>
     d88:	2201      	movs	r2, #1
     d8a:	e7c4      	b.n	d16 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     d8c:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d8e:	bf42      	ittt	mi
     d90:	2140      	movmi	r1, #64	; 0x40
     d92:	4a10      	ldrmi	r2, [pc, #64]	; (dd4 <AONRTCIntHandler+0x10c>)
     d94:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     d96:	781a      	ldrb	r2, [r3, #0]
     d98:	0691      	lsls	r1, r2, #26
     d9a:	bf42      	ittt	mi
     d9c:	2180      	movmi	r1, #128	; 0x80
     d9e:	4a0d      	ldrmi	r2, [pc, #52]	; (dd4 <AONRTCIntHandler+0x10c>)
     da0:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     da2:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     da4:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     da6:	781a      	ldrb	r2, [r3, #0]
     da8:	f042 0208 	orr.w	r2, r2, #8
     dac:	e7d1      	b.n	d52 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     dae:	2a00      	cmp	r2, #0
     db0:	d0d5      	beq.n	d5e <AONRTCIntHandler+0x96>
			cli_aux;
     db2:	4b09      	ldr	r3, [pc, #36]	; (dd8 <AONRTCIntHandler+0x110>)
     db4:	6019      	str	r1, [r3, #0]
     db6:	e7d2      	b.n	d5e <AONRTCIntHandler+0x96>
     db8:	40092004 	andmi	r2, r9, r4
     dbc:	200006c4 	andcs	r0, r0, r4, asr #13
     dc0:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     dc4:	40022090 	mulmi	r2, r0, r0
     dc8:	43240280 			; <UNDEFINED> instruction: 0x43240280
     dcc:	20000582 	andcs	r0, r0, r2, lsl #11
     dd0:	200006c0 	andcs	r0, r0, r0, asr #13
     dd4:	400220a0 	andmi	r2, r2, r0, lsr #1
     dd8:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000ddc <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     dde:	2600      	movs	r6, #0
     de0:	4b0e      	ldr	r3, [pc, #56]	; (e1c <tci_update_delay_ticks+0x40>)
	if (setdel) {
     de2:	4f0f      	ldr	r7, [pc, #60]	; (e20 <tci_update_delay_ticks+0x44>)
	cli_tim;
     de4:	601e      	str	r6, [r3, #0]
	if (setdel) {
     de6:	883d      	ldrh	r5, [r7, #0]
     de8:	b19d      	cbz	r5, e12 <tci_update_delay_ticks+0x36>
		if (force) {
     dea:	b1a0      	cbz	r0, e16 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	4b0d      	ldr	r3, [pc, #52]	; (e24 <tci_update_delay_ticks+0x48>)
     dee:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	f002 fd8c 	bl	390c <NOROM_AONRTCCurrent64BitValueGet>
     df4:	0d80      	lsrs	r0, r0, #22
     df6:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfa:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     dfe:	b280      	uxth	r0, r0
     e00:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e02:	1b2c      	subs	r4, r5, r4
	return NO;
     e04:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e06:	4b08      	ldr	r3, [pc, #32]	; (e28 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     e08:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0a:	881a      	ldrh	r2, [r3, #0]
     e0c:	4414      	add	r4, r2
     e0e:	b2a4      	uxth	r4, r4
     e10:	801c      	strh	r4, [r3, #0]
}
     e12:	4628      	mov	r0, r5
     e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     e16:	2501      	movs	r5, #1
     e18:	601d      	str	r5, [r3, #0]
		return YES;
     e1a:	e7fa      	b.n	e12 <tci_update_delay_ticks+0x36>
     e1c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     e20:	20000582 	andcs	r0, r0, r2, lsl #11
     e24:	40092018 	andmi	r2, r9, r8, lsl r0
     e28:	200006c0 	andcs	r0, r0, r0, asr #13

00000e2c <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     e2e:	4e0f      	ldr	r6, [pc, #60]	; (e6c <__pi_uart_setrate+0x40>)
     e30:	4d0f      	ldr	r5, [pc, #60]	; (e70 <__pi_uart_setrate+0x44>)
     e32:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     e36:	68db      	ldr	r3, [r3, #12]
     e38:	4628      	mov	r0, r5
     e3a:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	2264      	movs	r2, #100	; 0x64
     e3e:	6833      	ldr	r3, [r6, #0]
     e40:	4628      	mov	r0, r5
     e42:	4362      	muls	r2, r4
     e44:	685e      	ldr	r6, [r3, #4]
     e46:	490b      	ldr	r1, [pc, #44]	; (e74 <__pi_uart_setrate+0x48>)
     e48:	2360      	movs	r3, #96	; 0x60
     e4a:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	4a0a      	ldr	r2, [pc, #40]	; (e78 <__pi_uart_setrate+0x4c>)
}
     e4e:	2001      	movs	r0, #1
     e50:	6813      	ldr	r3, [r2, #0]
     e52:	f043 0310 	orr.w	r3, r3, #16
     e56:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	6853      	ldr	r3, [r2, #4]
     e5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     e5e:	f043 0301 	orr.w	r3, r3, #1
     e62:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     e64:	4b05      	ldr	r3, [pc, #20]	; (e7c <__pi_uart_setrate+0x50>)
     e66:	801c      	strh	r4, [r3, #0]
}
     e68:	bd70      	pop	{r4, r5, r6, pc}
     e6a:	bf00      	nop
     e6c:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     e70:	40001000 	andmi	r1, r0, r0
     e74:	02dc6c00 	sbcseq	r6, ip, #0, 24
     e78:	4000102c 	andmi	r1, r0, ip, lsr #32
     e7c:	20000584 	andcs	r0, r0, r4, lsl #11

00000e80 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	4a08      	ldr	r2, [pc, #32]	; (ea4 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     e82:	4909      	ldr	r1, [pc, #36]	; (ea8 <reinit_uart+0x28>)
     e84:	6813      	ldr	r3, [r2, #0]
     e86:	f043 0310 	orr.w	r3, r3, #16
     e8a:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	2212      	movs	r2, #18
     e8e:	4b07      	ldr	r3, [pc, #28]	; (eac <reinit_uart+0x2c>)
     e90:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e92:	4a07      	ldr	r2, [pc, #28]	; (eb0 <reinit_uart+0x30>)
     e94:	6813      	ldr	r3, [r2, #0]
     e96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     e9a:	6013      	str	r3, [r2, #0]
     e9c:	4b05      	ldr	r3, [pc, #20]	; (eb4 <reinit_uart+0x34>)
     e9e:	8818      	ldrh	r0, [r3, #0]
     ea0:	f7ff bfc4 	b.w	e2c <__pi_uart_setrate>
     ea4:	4000102c 	andmi	r1, r0, ip, lsr #32
     ea8:	200006a4 	andcs	r0, r0, r4, lsr #13
     eac:	40001034 	andmi	r1, r0, r4, lsr r0
     eb0:	40001030 	andmi	r1, r0, r0, lsr r0
     eb4:	20000584 	andcs	r0, r0, r4, lsl #11

00000eb8 <ioreq_uart_a>:
	switch (operation) {
     eb8:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     eba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ebe:	460d      	mov	r5, r1
     ec0:	4614      	mov	r4, r2
     ec2:	2803      	cmp	r0, #3
     ec4:	d86e      	bhi.n	fa4 <ioreq_uart_a+0xec>
     ec6:	e8df f000 	tbb	[pc, r0]
     eca:	5a471253 	bpl	11c581e <__ccfg+0x11a5876>
				*buf++ = uart_a_read;
     ece:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     ed2:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     ed4:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     ed8:	b11e      	cbz	r6, ee2 <ioreq_uart_a+0x2a>
     eda:	f8d8 3000 	ldr.w	r3, [r8]
     ede:	06d8      	lsls	r0, r3, #27
     ee0:	d5f5      	bpl.n	ece <ioreq_uart_a+0x16>
			if (len != operation) {
     ee2:	42a6      	cmp	r6, r4
     ee4:	d00a      	beq.n	efc <ioreq_uart_a+0x44>
				return operation - len;
     ee6:	1ba4      	subs	r4, r4, r6
}
     ee8:	4620      	mov	r0, r4
     eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     eee:	4616      	mov	r6, r2
			uart_a_disable_int;
     ef0:	4f2e      	ldr	r7, [pc, #184]	; (fac <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     ef2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; fc0 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     ef6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; fc4 <ioreq_uart_a+0x10c>
     efa:	e7ed      	b.n	ed8 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     efc:	683b      	ldr	r3, [r7, #0]
     efe:	2015      	movs	r0, #21
     f00:	695b      	ldr	r3, [r3, #20]
     f02:	4798      	blx	r3
			if (uart_a_char_available) {
     f04:	f8d8 3000 	ldr.w	r3, [r8]
     f08:	06d9      	lsls	r1, r3, #27
     f0a:	d404      	bmi.n	f16 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     f0c:	683b      	ldr	r3, [r7, #0]
     f0e:	2015      	movs	r0, #21
     f10:	691b      	ldr	r3, [r3, #16]
     f12:	4798      	blx	r3
				goto Redo_rx;
     f14:	e7e0      	b.n	ed8 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f16:	4a26      	ldr	r2, [pc, #152]	; (fb0 <ioreq_uart_a+0xf8>)
     f18:	7993      	ldrb	r3, [r2, #6]
     f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     f1e:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f22:	7193      	strb	r3, [r2, #6]
			return -2;
     f24:	e7e0      	b.n	ee8 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     f26:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     f2a:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     f2c:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     f30:	b11e      	cbz	r6, f3a <ioreq_uart_a+0x82>
     f32:	f8d8 3000 	ldr.w	r3, [r8]
     f36:	069a      	lsls	r2, r3, #26
     f38:	d5f5      	bpl.n	f26 <ioreq_uart_a+0x6e>
			if (len != operation) {
     f3a:	42a6      	cmp	r6, r4
     f3c:	d1d3      	bne.n	ee6 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     f3e:	683b      	ldr	r3, [r7, #0]
     f40:	2015      	movs	r0, #21
     f42:	695b      	ldr	r3, [r3, #20]
     f44:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     f46:	f8d8 3000 	ldr.w	r3, [r8]
     f4a:	069b      	lsls	r3, r3, #26
     f4c:	d40b      	bmi.n	f66 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     f4e:	683b      	ldr	r3, [r7, #0]
     f50:	2015      	movs	r0, #21
     f52:	691b      	ldr	r3, [r3, #16]
     f54:	4798      	blx	r3
				goto Redo_tx;
     f56:	e7eb      	b.n	f30 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     f58:	4616      	mov	r6, r2
			uart_a_disable_int;
     f5a:	4f14      	ldr	r7, [pc, #80]	; (fac <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     f5c:	f8df 8060 	ldr.w	r8, [pc, #96]	; fc0 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     f60:	f8df 9060 	ldr.w	r9, [pc, #96]	; fc4 <ioreq_uart_a+0x10c>
     f64:	e7e4      	b.n	f30 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f66:	4a12      	ldr	r2, [pc, #72]	; (fb0 <ioreq_uart_a+0xf8>)
     f68:	7993      	ldrb	r3, [r2, #6]
     f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f6e:	e7d6      	b.n	f1e <ioreq_uart_a+0x66>
			uart_a_enable_int;
     f70:	4b0e      	ldr	r3, [pc, #56]	; (fac <ioreq_uart_a+0xf4>)
     f72:	2015      	movs	r0, #21
     f74:	681b      	ldr	r3, [r3, #0]
			return 0;
     f76:	2400      	movs	r4, #0
			uart_a_enable_int;
     f78:	691b      	ldr	r3, [r3, #16]
     f7a:	4798      	blx	r3
			return 0;
     f7c:	e7b4      	b.n	ee8 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     f7e:	2a01      	cmp	r2, #1
     f80:	d109      	bne.n	f96 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     f82:	490b      	ldr	r1, [pc, #44]	; (fb0 <ioreq_uart_a+0xf8>)
     f84:	8828      	ldrh	r0, [r5, #0]
     f86:	f7ff ff51 	bl	e2c <__pi_uart_setrate>
     f8a:	2800      	cmp	r0, #0
     f8c:	d1ac      	bne.n	ee8 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     f8e:	2003      	movs	r0, #3
     f90:	4908      	ldr	r1, [pc, #32]	; (fb4 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     f92:	f7ff fe3b 	bl	c0c <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     f96:	2a02      	cmp	r2, #2
     f98:	d104      	bne.n	fa4 <ioreq_uart_a+0xec>
	return urates [0];
     f9a:	4b07      	ldr	r3, [pc, #28]	; (fb8 <ioreq_uart_a+0x100>)
				return 1;
     f9c:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     f9e:	881b      	ldrh	r3, [r3, #0]
     fa0:	800b      	strh	r3, [r1, #0]
				return 1;
     fa2:	e7a1      	b.n	ee8 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     fa4:	2002      	movs	r0, #2
     fa6:	4905      	ldr	r1, [pc, #20]	; (fbc <ioreq_uart_a+0x104>)
     fa8:	e7f3      	b.n	f92 <ioreq_uart_a+0xda>
     faa:	bf00      	nop
     fac:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     fb0:	200006a4 	andcs	r0, r0, r4, lsr #13
     fb4:	00004f44 	andeq	r4, r0, r4, asr #30
     fb8:	20000584 	andcs	r0, r0, r4, lsl #11
     fbc:	00004f48 	andeq	r4, r0, r8, asr #30
     fc0:	40001018 	andmi	r1, r0, r8, lsl r0
     fc4:	40001000 	andmi	r1, r0, r0

00000fc8 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     fcc:	b530      	push	{r4, r5, lr}
     fce:	4b29      	ldr	r3, [pc, #164]	; (1074 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	4c29      	ldr	r4, [pc, #164]	; (1078 <UART0IntHandler+0xb0>)
     fd2:	601a      	str	r2, [r3, #0]
     fd4:	6822      	ldr	r2, [r4, #0]
     fd6:	06d5      	lsls	r5, r2, #27
     fd8:	d423      	bmi.n	1022 <UART0IntHandler+0x5a>
     fda:	4b28      	ldr	r3, [pc, #160]	; (107c <UART0IntHandler+0xb4>)
     fdc:	799a      	ldrb	r2, [r3, #6]
     fde:	0610      	lsls	r0, r2, #24
     fe0:	d51f      	bpl.n	1022 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe2:	799a      	ldrb	r2, [r3, #6]
     fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     fe8:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     fea:	4a25      	ldr	r2, [pc, #148]	; (1080 <UART0IntHandler+0xb8>)
     fec:	7813      	ldrb	r3, [r2, #0]
     fee:	f043 0302 	orr.w	r3, r3, #2
     ff2:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     ff4:	4b23      	ldr	r3, [pc, #140]	; (1084 <UART0IntHandler+0xbc>)
     ff6:	681a      	ldr	r2, [r3, #0]
     ff8:	b19a      	cbz	r2, 1022 <UART0IntHandler+0x5a>
     ffa:	4610      	mov	r0, r2
     ffc:	2300      	movs	r3, #0
     ffe:	f830 1b10 	ldrh.w	r1, [r0], #16
    1002:	f001 0107 	and.w	r1, r1, #7
    1006:	4299      	cmp	r1, r3
    1008:	dd09      	ble.n	101e <UART0IntHandler+0x56>
    100a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    100e:	3301      	adds	r3, #1
    1010:	f515 7f81 	cmn.w	r5, #258	; 0x102
    1014:	d1f7      	bne.n	1006 <UART0IntHandler+0x3e>
    1016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    101a:	889b      	ldrh	r3, [r3, #4]
    101c:	8013      	strh	r3, [r2, #0]
    101e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1020:	e7ea      	b.n	ff8 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1022:	6823      	ldr	r3, [r4, #0]
    1024:	0699      	lsls	r1, r3, #26
    1026:	d424      	bmi.n	1072 <UART0IntHandler+0xaa>
    1028:	4b14      	ldr	r3, [pc, #80]	; (107c <UART0IntHandler+0xb4>)
    102a:	799a      	ldrb	r2, [r3, #6]
    102c:	0652      	lsls	r2, r2, #25
    102e:	d520      	bpl.n	1072 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
    1030:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	799a      	ldrb	r2, [r3, #6]
    1036:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    103a:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    103c:	4a10      	ldr	r2, [pc, #64]	; (1080 <UART0IntHandler+0xb8>)
    103e:	7813      	ldrb	r3, [r2, #0]
    1040:	f043 0302 	orr.w	r3, r3, #2
    1044:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
    1046:	4b0f      	ldr	r3, [pc, #60]	; (1084 <UART0IntHandler+0xbc>)
    1048:	681a      	ldr	r2, [r3, #0]
    104a:	b192      	cbz	r2, 1072 <UART0IntHandler+0xaa>
    104c:	4610      	mov	r0, r2
    104e:	2300      	movs	r3, #0
    1050:	f830 1b10 	ldrh.w	r1, [r0], #16
    1054:	f001 0107 	and.w	r1, r1, #7
    1058:	4299      	cmp	r1, r3
    105a:	dd08      	ble.n	106e <UART0IntHandler+0xa6>
    105c:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    1060:	3301      	adds	r3, #1
    1062:	42a5      	cmp	r5, r4
    1064:	d1f8      	bne.n	1058 <UART0IntHandler+0x90>
    1066:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    106a:	889b      	ldrh	r3, [r3, #4]
    106c:	8013      	strh	r3, [r2, #0]
    106e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1070:	e7eb      	b.n	104a <UART0IntHandler+0x82>
	}

	RTNI;
}
    1072:	bd30      	pop	{r4, r5, pc}
    1074:	40001044 	andmi	r1, r0, r4, asr #32
    1078:	40001018 	andmi	r1, r0, r8, lsl r0
    107c:	200006a4 	andcs	r0, r0, r4, lsr #13
    1080:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1084:	20000588 	andcs	r0, r0, r8, lsl #11

00001088 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
    1088:	b570      	push	{r4, r5, r6, lr}
    108a:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
    108e:	4e0c      	ldr	r6, [pc, #48]	; (10c0 <__buttons_setirq+0x38>)
    1090:	4d0c      	ldr	r5, [pc, #48]	; (10c4 <__buttons_setirq+0x3c>)
    1092:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	4c0c      	ldr	r4, [pc, #48]	; (10c8 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
    1096:	0a1b      	lsrs	r3, r3, #8
    1098:	fa01 f203 	lsl.w	r2, r1, r3
    109c:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    109e:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
    10a0:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10a2:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
    10a6:	0a1b      	lsrs	r3, r3, #8
    10a8:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10aa:	01db      	lsls	r3, r3, #7
    10ac:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    10b0:	4322      	orrs	r2, r4
    10b2:	4323      	orrs	r3, r4
    10b4:	6010      	str	r0, [r2, #0]
    10b6:	6029      	str	r1, [r5, #0]
    10b8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    10ba:	b662      	cpsie	i
			val;
	}
	sti;
}
    10bc:	bd70      	pop	{r4, r5, r6, pc}
    10be:	bf00      	nop
    10c0:	000050de 	ldrdeq	r5, [r0], -lr
    10c4:	400220e0 	andmi	r2, r2, r0, ror #1
    10c8:	42000048 	andmi	r0, r0, #72	; 0x48

000010cc <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
    10cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    10ce:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	2200      	movs	r2, #0
    10d2:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	4f09      	ldr	r7, [pc, #36]	; (10fc <__pinlist_setirq+0x30>)
    10d6:	4c0a      	ldr	r4, [pc, #40]	; (1100 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	490a      	ldr	r1, [pc, #40]	; (1104 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10da:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    10e2:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e6:	01db      	lsls	r3, r3, #7
    10e8:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    10ec:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
    10ee:	2a04      	cmp	r2, #4
    10f0:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10f2:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	d1f1      	bne.n	10da <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    10f6:	b662      	cpsie	i
			val;
	}
	sti;
}
    10f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10fa:	bf00      	nop
    10fc:	000050d9 	ldrdeq	r5, [r0], -r9
    1100:	400220e0 	andmi	r2, r2, r0, ror #1
    1104:	42000048 	andmi	r0, r0, #72	; 0x48

00001108 <GPIOIntHandler>:
void GPIOIntHandler () {
    1108:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    110a:	4c23      	ldr	r4, [pc, #140]	; (1198 <GPIOIntHandler+0x90>)
    110c:	6822      	ldr	r2, [r4, #0]
    110e:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    1112:	d01e      	beq.n	1152 <GPIOIntHandler+0x4a>
	buttons_disable ();
    1114:	2000      	movs	r0, #0
    1116:	f7ff ffb7 	bl	1088 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    111a:	4b20      	ldr	r3, [pc, #128]	; (119c <GPIOIntHandler+0x94>)
    111c:	4d20      	ldr	r5, [pc, #128]	; (11a0 <GPIOIntHandler+0x98>)
    111e:	681a      	ldr	r2, [r3, #0]
    1120:	b192      	cbz	r2, 1148 <GPIOIntHandler+0x40>
    1122:	4610      	mov	r0, r2
    1124:	2300      	movs	r3, #0
    1126:	f830 1b10 	ldrh.w	r1, [r0], #16
    112a:	f001 0107 	and.w	r1, r1, #7
    112e:	4299      	cmp	r1, r3
    1130:	dd08      	ble.n	1144 <GPIOIntHandler+0x3c>
    1132:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    1136:	3301      	adds	r3, #1
    1138:	42ae      	cmp	r6, r5
    113a:	d1f8      	bne.n	112e <GPIOIntHandler+0x26>
    113c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1140:	889b      	ldrh	r3, [r3, #4]
    1142:	8013      	strh	r3, [r2, #0]
    1144:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1146:	e7eb      	b.n	1120 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    1148:	4a16      	ldr	r2, [pc, #88]	; (11a4 <GPIOIntHandler+0x9c>)
    114a:	7813      	ldrb	r3, [r2, #0]
    114c:	f043 0302 	orr.w	r3, r3, #2
    1150:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    1152:	6823      	ldr	r3, [r4, #0]
    1154:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    1158:	d01d      	beq.n	1196 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    115a:	4b10      	ldr	r3, [pc, #64]	; (119c <GPIOIntHandler+0x94>)
    115c:	4c12      	ldr	r4, [pc, #72]	; (11a8 <GPIOIntHandler+0xa0>)
    115e:	6818      	ldr	r0, [r3, #0]
    1160:	b190      	cbz	r0, 1188 <GPIOIntHandler+0x80>
    1162:	4601      	mov	r1, r0
    1164:	2300      	movs	r3, #0
    1166:	f831 2b10 	ldrh.w	r2, [r1], #16
    116a:	f002 0207 	and.w	r2, r2, #7
    116e:	429a      	cmp	r2, r3
    1170:	dd08      	ble.n	1184 <GPIOIntHandler+0x7c>
    1172:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    1176:	3301      	adds	r3, #1
    1178:	42a5      	cmp	r5, r4
    117a:	d1f8      	bne.n	116e <GPIOIntHandler+0x66>
    117c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1180:	889b      	ldrh	r3, [r3, #4]
    1182:	8003      	strh	r3, [r0, #0]
    1184:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1186:	e7eb      	b.n	1160 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    1188:	f7ff ffa0 	bl	10cc <__pinlist_setirq>
	RISE_N_SHINE;
    118c:	4a05      	ldr	r2, [pc, #20]	; (11a4 <GPIOIntHandler+0x9c>)
    118e:	7813      	ldrb	r3, [r2, #0]
    1190:	f043 0302 	orr.w	r3, r3, #2
    1194:	7013      	strb	r3, [r2, #0]
}
    1196:	bd70      	pop	{r4, r5, r6, pc}
    1198:	400220e0 	andmi	r2, r2, r0, ror #1
    119c:	20000588 	andcs	r0, r0, r8, lsl #11
    11a0:	000050de 	ldrdeq	r5, [r0], -lr
    11a4:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    11a8:	000050d9 	ldrdeq	r5, [r0], -r9

000011ac <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    11ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	4c58      	ldr	r4, [pc, #352]	; (1314 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b2:	2004      	movs	r0, #4
    11b4:	f7ff fcec 	bl	b90 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	6823      	ldr	r3, [r4, #0]
    11ba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    11be:	69db      	ldr	r3, [r3, #28]
    11c0:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c2:	6823      	ldr	r3, [r4, #0]
    11c4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    11c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11ca:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	6823      	ldr	r3, [r4, #0]
    11ce:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    11d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11d4:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11d6:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	2600      	movs	r6, #0
    11da:	4c4f      	ldr	r4, [pc, #316]	; (1318 <system_init+0x16c>)
    11dc:	4f4f      	ldr	r7, [pc, #316]	; (131c <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11de:	f8df c17c 	ldr.w	ip, [pc, #380]	; 135c <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e2:	f8df e17c 	ldr.w	lr, [pc, #380]	; 1360 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1328 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ea:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1320 <system_init+0x174>
    11ee:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    11f6:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fa:	0091      	lsls	r1, r2, #2
    11fc:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    1200:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    1204:	ea05 0a0c 	and.w	sl, r5, ip
    1208:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    120c:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    120e:	bf44      	itt	mi
    1210:	ea41 010e 	orrmi.w	r1, r1, lr
    1214:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    1216:	fa03 f202 	lsl.w	r2, r3, r2
    121a:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	bf4c      	ite	mi
    121e:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1222:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1226:	2e11      	cmp	r6, #17
    1228:	d1e2      	bne.n	11f0 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122a:	2540      	movs	r5, #64	; 0x40
    122c:	2680      	movs	r6, #128	; 0x80
    122e:	4b3c      	ldr	r3, [pc, #240]	; (1320 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    1230:	493c      	ldr	r1, [pc, #240]	; (1324 <system_init+0x178>)
    1232:	601d      	str	r5, [r3, #0]
    1234:	601e      	str	r6, [r3, #0]
    1236:	780b      	ldrb	r3, [r1, #0]
    1238:	780b      	ldrb	r3, [r1, #0]
    123a:	20c8      	movs	r0, #200	; 0xc8
    123c:	f36f 1307 	bfc	r3, #4, #4
    1240:	700b      	strb	r3, [r1, #0]
    1242:	f7ff fc8f 	bl	b64 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1246:	4b38      	ldr	r3, [pc, #224]	; (1328 <system_init+0x17c>)
    1248:	20c8      	movs	r0, #200	; 0xc8
    124a:	601d      	str	r5, [r3, #0]
    124c:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    124e:	2601      	movs	r6, #1
	all_leds_blink;
    1250:	780b      	ldrb	r3, [r1, #0]
    1252:	780b      	ldrb	r3, [r1, #0]
    1254:	f36f 1307 	bfc	r3, #4, #4
    1258:	700b      	strb	r3, [r1, #0]
    125a:	f7ff fc83 	bl	b64 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    125e:	4b33      	ldr	r3, [pc, #204]	; (132c <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	4a33      	ldr	r2, [pc, #204]	; (1330 <system_init+0x184>)
    1262:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	4b33      	ldr	r3, [pc, #204]	; (1334 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    1266:	4d34      	ldr	r5, [pc, #208]	; (1338 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1268:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    126a:	4b34      	ldr	r3, [pc, #208]	; (133c <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    126c:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    126e:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    1270:	682b      	ldr	r3, [r5, #0]
    1272:	691b      	ldr	r3, [r3, #16]
    1274:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    1276:	f000 fbf9 	bl	1a6c <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    127a:	682b      	ldr	r3, [r5, #0]
    127c:	2010      	movs	r0, #16
    127e:	691b      	ldr	r3, [r3, #16]
    1280:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1282:	2002      	movs	r0, #2
    1284:	f7ff fc84 	bl	b90 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	68ab      	ldr	r3, [r5, #8]
    128a:	f44f 7000 	mov.w	r0, #512	; 0x200
    128e:	69db      	ldr	r3, [r3, #28]
    1290:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1292:	68ab      	ldr	r3, [r5, #8]
    1294:	f44f 7000 	mov.w	r0, #512	; 0x200
    1298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    129a:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	68ab      	ldr	r3, [r5, #8]
    129e:	f44f 7000 	mov.w	r0, #512	; 0x200
    12a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12a4:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    12a6:	2260      	movs	r2, #96	; 0x60
    12a8:	4b25      	ldr	r3, [pc, #148]	; (1340 <system_init+0x194>)
    12aa:	6026      	str	r6, [r4, #0]
    12ac:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    12ae:	f7ff fde7 	bl	e80 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    12b2:	f001 f977 	bl	25a4 <ee_open>
    12b6:	f001 f97f 	bl	25b8 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12ba:	f003 fa49 	bl	4750 <NOROM_SysCtrlResetSourceGet>
    12be:	2808      	cmp	r0, #8
    12c0:	d11a      	bne.n	12f8 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    12c2:	4b20      	ldr	r3, [pc, #128]	; (1344 <system_init+0x198>)
    12c4:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    12ca:	3b04      	subs	r3, #4
    12cc:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    12d2:	3324      	adds	r3, #36	; 0x24
    12d4:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    12d6:	2000      	movs	r0, #0
    12d8:	f7ff fc28 	bl	b2c <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	4a1a      	ldr	r2, [pc, #104]	; (1348 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    12de:	2015      	movs	r0, #21
    12e0:	6813      	ldr	r3, [r2, #0]
    12e2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    12e6:	6013      	str	r3, [r2, #0]
    12e8:	4b13      	ldr	r3, [pc, #76]	; (1338 <system_init+0x18c>)
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	691b      	ldr	r3, [r3, #16]
    12ee:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    12f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    12f4:	f7ff bcd4 	b.w	ca0 <tci_run_auxiliary_timer>
		diag ("");
    12f8:	4814      	ldr	r0, [pc, #80]	; (134c <system_init+0x1a0>)
    12fa:	f000 fca5 	bl	1c48 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    12fe:	4814      	ldr	r0, [pc, #80]	; (1350 <system_init+0x1a4>)
    1300:	f000 fca2 	bl	1c48 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	4913      	ldr	r1, [pc, #76]	; (1354 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    1306:	4814      	ldr	r0, [pc, #80]	; (1358 <system_init+0x1ac>)
    1308:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    130c:	b289      	uxth	r1, r1
    130e:	f000 fc9b 	bl	1c48 <diag>
    1312:	e7e0      	b.n	12d6 <system_init+0x12a>
    1314:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    1318:	60082028 	andvs	r2, r8, r8, lsr #32
    131c:	00004fc0 	andeq	r4, r0, r0, asr #31
    1320:	40022090 	mulmi	r2, r0, r0
    1324:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1328:	400220a0 	andmi	r2, r2, r0, lsr #1
    132c:	40092024 	andmi	r2, r9, r4, lsr #32
    1330:	00050003 	andeq	r0, r5, r3
    1334:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    1338:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    133c:	40092000 	andmi	r2, r9, r0
    1340:	20000584 	andcs	r0, r0, r4, lsl #11
    1344:	4009400c 	andmi	r4, r9, ip
    1348:	40001038 	andmi	r1, r0, r8, lsr r0
    134c:	000049c2 	andeq	r4, r0, r2, asr #19
    1350:	00004f4c 	andeq	r4, r0, ip, asr #30
    1354:	200006d8 	ldrdcs	r0, [r0], -r8
    1358:	00004f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    135c:	7f077f3f 	svcvc	0x00077f3f
    1360:	42441a00 	submi	r1, r4, #0, 20

00001364 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	2803      	cmp	r0, #3
    1366:	4603      	mov	r3, r0
    1368:	bf28      	it	cs
    136a:	2303      	movcs	r3, #3
    136c:	4a05      	ldr	r2, [pc, #20]	; (1384 <setpowermode+0x20>)
    136e:	b2db      	uxtb	r3, r3
    1370:	2801      	cmp	r0, #1
    1372:	7093      	strb	r3, [r2, #2]
    1374:	d904      	bls.n	1380 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    1376:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1378:	f011 0f01 	tst.w	r1, #1
    137c:	bf18      	it	ne
    137e:	2301      	movne	r3, #1
    1380:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    1382:	4770      	bx	lr
    1384:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00001388 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    1388:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    138c:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    138e:	4b79      	ldr	r3, [pc, #484]	; (1574 <__pi_release+0x1ec>)
    1390:	af00      	add	r7, sp, #0
    1392:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    1396:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    139a:	681a      	ldr	r2, [r3, #0]
    139c:	4b76      	ldr	r3, [pc, #472]	; (1578 <__pi_release+0x1f0>)
    139e:	429a      	cmp	r2, r3
    13a0:	d127      	bne.n	13f2 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a2:	4e76      	ldr	r6, [pc, #472]	; (157c <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    13a4:	2100      	movs	r1, #0
    13a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    13aa:	f000 f9ed 	bl	1788 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    13ae:	4a74      	ldr	r2, [pc, #464]	; (1580 <__pi_release+0x1f8>)
    13b0:	4b74      	ldr	r3, [pc, #464]	; (1584 <__pi_release+0x1fc>)
    13b2:	6812      	ldr	r2, [r2, #0]
    13b4:	601a      	str	r2, [r3, #0]
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	b9fa      	cbnz	r2, 13fa <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13ba:	4c73      	ldr	r4, [pc, #460]	; (1588 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    13be:	4d73      	ldr	r5, [pc, #460]	; (158c <__pi_release+0x204>)
    13c0:	782b      	ldrb	r3, [r5, #0]
    13c2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    13c6:	0798      	lsls	r0, r3, #30
    13c8:	607a      	str	r2, [r7, #4]
    13ca:	f100 80cd 	bmi.w	1568 <__pi_release+0x1e0>
	system_event_count ++;
    13ce:	4a70      	ldr	r2, [pc, #448]	; (1590 <__pi_release+0x208>)
    13d0:	6813      	ldr	r3, [r2, #0]
    13d2:	3301      	adds	r3, #1
    13d4:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    13d6:	78ea      	ldrb	r2, [r5, #3]
    13d8:	2a01      	cmp	r2, #1
    13da:	b2d3      	uxtb	r3, r2
    13dc:	d017      	beq.n	140e <__pi_release+0x86>
    13de:	2b02      	cmp	r3, #2
    13e0:	d031      	beq.n	1446 <__pi_release+0xbe>
    13e2:	2b00      	cmp	r3, #0
    13e4:	f040 8095 	bne.w	1512 <__pi_release+0x18a>
			__WFI ();
    13e8:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    13ea:	b662      	cpsie	i
    13ec:	bf00      	nop
    13ee:	bf00      	nop
    13f0:	e7e4      	b.n	13bc <__pi_release+0x34>
	check_stack_overflow;
    13f2:	200b      	movs	r0, #11
    13f4:	4967      	ldr	r1, [pc, #412]	; (1594 <__pi_release+0x20c>)
    13f6:	f7ff fc09 	bl	c0c <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fa:	6851      	ldr	r1, [r2, #4]
    13fc:	b129      	cbz	r1, 140a <__pi_release+0x82>
    13fe:	8810      	ldrh	r0, [r2, #0]
    1400:	0704      	lsls	r4, r0, #28
    1402:	d102      	bne.n	140a <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	0900      	lsrs	r0, r0, #4
    1406:	4788      	blx	r1
			goto Redo;
    1408:	e7cc      	b.n	13a4 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    140a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    140c:	e7d2      	b.n	13b4 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    140e:	4a62      	ldr	r2, [pc, #392]	; (1598 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1412:	6813      	ldr	r3, [r2, #0]
    1414:	f043 0301 	orr.w	r3, r3, #1
    1418:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    141e:	f043 0303 	orr.w	r3, r3, #3
    1422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1426:	4b5d      	ldr	r3, [pc, #372]	; (159c <__pi_release+0x214>)
    1428:	681b      	ldr	r3, [r3, #0]
    142a:	699b      	ldr	r3, [r3, #24]
    142c:	4798      	blx	r3
    142e:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	6823      	ldr	r3, [r4, #0]
    1432:	f043 0304 	orr.w	r3, r3, #4
    1436:	6023      	str	r3, [r4, #0]
			__WFI ();
    1438:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143a:	6823      	ldr	r3, [r4, #0]
    143c:	f023 0304 	bic.w	r3, r3, #4
    1440:	6023      	str	r3, [r4, #0]
    1442:	6833      	ldr	r3, [r6, #0]
}
    1444:	e7d1      	b.n	13ea <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1446:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144a:	687a      	ldr	r2, [r7, #4]
    144c:	4b54      	ldr	r3, [pc, #336]	; (15a0 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    144e:	f8df b188 	ldr.w	fp, [pc, #392]	; 15d8 <__pi_release+0x250>
    1452:	601a      	str	r2, [r3, #0]
    1454:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1456:	f8df a144 	ldr.w	sl, [pc, #324]	; 159c <__pi_release+0x214>
    145a:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    145e:	6833      	ldr	r3, [r6, #0]
    1460:	4b50      	ldr	r3, [pc, #320]	; (15a4 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1462:	f8df 9178 	ldr.w	r9, [pc, #376]	; 15dc <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1466:	f8c3 8000 	str.w	r8, [r3]
    146a:	6868      	ldr	r0, [r5, #4]
    146c:	f8da 3000 	ldr.w	r3, [sl]
    1470:	f040 0020 	orr.w	r0, r0, #32
    1474:	699b      	ldr	r3, [r3, #24]
    1476:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	4b4b      	ldr	r3, [pc, #300]	; (15a8 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    147a:	2103      	movs	r1, #3
    147c:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	f8d9 3000 	ldr.w	r3, [r9]
    1484:	4849      	ldr	r0, [pc, #292]	; (15ac <__pi_release+0x224>)
    1486:	f023 0303 	bic.w	r3, r3, #3
    148a:	f8c9 3000 	str.w	r3, [r9]
    148e:	4b48      	ldr	r3, [pc, #288]	; (15b0 <__pi_release+0x228>)
    1490:	681a      	ldr	r2, [r3, #0]
    1492:	6852      	ldr	r2, [r2, #4]
    1494:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    1496:	6878      	ldr	r0, [r7, #4]
    1498:	f003 f81a 	bl	44d0 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    149c:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    149e:	6822      	ldr	r2, [r4, #0]
    14a0:	f042 0204 	orr.w	r2, r2, #4
    14a4:	6022      	str	r2, [r4, #0]
			__WFI ();
    14a6:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14aa:	4b41      	ldr	r3, [pc, #260]	; (15b0 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14ac:	f022 0204 	bic.w	r2, r2, #4
    14b0:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	4641      	mov	r1, r8
    14b6:	685b      	ldr	r3, [r3, #4]
    14b8:	483c      	ldr	r0, [pc, #240]	; (15ac <__pi_release+0x224>)
    14ba:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	4a3c      	ldr	r2, [pc, #240]	; (15b4 <__pi_release+0x22c>)
    14c2:	f043 0303 	orr.w	r3, r3, #3
    14c6:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ca:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14ce:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    14d0:	0699      	lsls	r1, r3, #26
    14d2:	d5fc      	bpl.n	14ce <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	f8da 3000 	ldr.w	r3, [sl]
    14d8:	6868      	ldr	r0, [r5, #4]
    14da:	695b      	ldr	r3, [r3, #20]
    14dc:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14de:	4d2f      	ldr	r5, [pc, #188]	; (159c <__pi_release+0x214>)
    14e0:	4b2a      	ldr	r3, [pc, #168]	; (158c <__pi_release+0x204>)
    14e2:	6858      	ldr	r0, [r3, #4]
    14e4:	682b      	ldr	r3, [r5, #0]
    14e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    14e8:	4798      	blx	r3
    14ea:	2801      	cmp	r0, #1
    14ec:	d1f8      	bne.n	14e0 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14ee:	4b2d      	ldr	r3, [pc, #180]	; (15a4 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	4a2d      	ldr	r2, [pc, #180]	; (15a8 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14f2:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f4:	2300      	movs	r3, #0
    14f6:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    14f8:	4b29      	ldr	r3, [pc, #164]	; (15a0 <__pi_release+0x218>)
    14fa:	6018      	str	r0, [r3, #0]
    14fc:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    14fe:	f003 f8f7 	bl	46f0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    1502:	f7ff fcbd 	bl	e80 <reinit_uart>
    1506:	4a2c      	ldr	r2, [pc, #176]	; (15b8 <__pi_release+0x230>)
    1508:	6813      	ldr	r3, [r2, #0]
    150a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    150e:	6013      	str	r3, [r2, #0]
}
    1510:	e76b      	b.n	13ea <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1512:	4b2a      	ldr	r3, [pc, #168]	; (15bc <__pi_release+0x234>)
    1514:	2001      	movs	r0, #1
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	68db      	ldr	r3, [r3, #12]
    151a:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	4a28      	ldr	r2, [pc, #160]	; (15c0 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    151e:	4929      	ldr	r1, [pc, #164]	; (15c4 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1520:	6813      	ldr	r3, [r2, #0]
    1522:	f023 0301 	bic.w	r3, r3, #1
    1526:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	4b27      	ldr	r3, [pc, #156]	; (15c8 <__pi_release+0x240>)
    152a:	681a      	ldr	r2, [r3, #0]
    152c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1530:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1532:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    1536:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	604a      	str	r2, [r1, #4]
    153a:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	687a      	ldr	r2, [r7, #4]
    153e:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	687a      	ldr	r2, [r7, #4]
    1542:	4b22      	ldr	r3, [pc, #136]	; (15cc <__pi_release+0x244>)
    1544:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1546:	2201      	movs	r2, #1
    1548:	4b21      	ldr	r3, [pc, #132]	; (15d0 <__pi_release+0x248>)
    154a:	601a      	str	r2, [r3, #0]
    154c:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    154e:	4a19      	ldr	r2, [pc, #100]	; (15b4 <__pi_release+0x22c>)
    1550:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1552:	069b      	lsls	r3, r3, #26
    1554:	d4fc      	bmi.n	1550 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1556:	2201      	movs	r2, #1
    1558:	4b1e      	ldr	r3, [pc, #120]	; (15d4 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    155a:	2037      	movs	r0, #55	; 0x37
    155c:	601a      	str	r2, [r3, #0]
    155e:	4b0f      	ldr	r3, [pc, #60]	; (159c <__pi_release+0x214>)
    1560:	681b      	ldr	r3, [r3, #0]
    1562:	699b      	ldr	r3, [r3, #24]
    1564:	4798      	blx	r3
			goto DeepSleep;
    1566:	e763      	b.n	1430 <__pi_release+0xa8>
	__SLEEP;
    1568:	782b      	ldrb	r3, [r5, #0]
    156a:	f36f 0341 	bfc	r3, #1, #1
    156e:	702b      	strb	r3, [r5, #0]
    1570:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    1572:	e717      	b.n	13a4 <__pi_release+0x1c>
    1574:	20005000 	andcs	r5, r0, r0
    1578:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    157c:	4009202c 	andmi	r2, r9, ip, lsr #32
    1580:	20000588 	andcs	r0, r0, r8, lsl #11
    1584:	200006d4 	ldrdcs	r0, [r0], -r4
    1588:	e000ed10 	and	lr, r0, r0, lsl sp
    158c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1590:	200006ac 	andcs	r0, r0, ip, lsr #13
    1594:	00004faf 	andeq	r4, r0, pc, lsr #31
    1598:	4008218c 	andmi	r2, r8, ip, lsl #3
    159c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    15a0:	4009400c 	andmi	r4, r9, ip
    15a4:	60082028 	andvs	r2, r8, r8, lsr #32
    15a8:	43040180 	movwmi	r0, #16768	; 0x4180
    15ac:	40034000 	andmi	r4, r3, r0
    15b0:	100001d8 	ldrdne	r0, [r0], -r8
    15b4:	40091014 	andmi	r1, r9, r4, lsl r0
    15b8:	40001038 	andmi	r1, r0, r8, lsr r0
    15bc:	100001a0 	andne	r0, r0, r0, lsr #3
    15c0:	40091010 	andmi	r1, r9, r0, lsl r0
    15c4:	40093000 	andmi	r3, r9, r0
    15c8:	40091040 	andmi	r1, r9, r0, asr #32
    15cc:	43220420 			; <UNDEFINED> instruction: 0x43220420
    15d0:	40091018 	andmi	r1, r9, r8, lsl r0
    15d4:	43040188 	movwmi	r0, #16776	; 0x4188
    15d8:	43220200 			; <UNDEFINED> instruction: 0x43220200
    15dc:	40082224 	andmi	r2, r8, r4, lsr #4

000015e0 <halt>:
	cli_tim;
    15e0:	2400      	movs	r4, #0
void halt (void) {
    15e2:	b508      	push	{r3, lr}
	cli_tim;
    15e4:	4b07      	ldr	r3, [pc, #28]	; (1604 <halt+0x24>)
	diag ("PicOS halted");
    15e6:	4808      	ldr	r0, [pc, #32]	; (1608 <halt+0x28>)
	cli_tim;
    15e8:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    15ea:	f000 fb2d 	bl	1c48 <diag>
	mdelay (500);
    15ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    15f2:	f7ff fab7 	bl	b64 <mdelay>
	setpowermode (2);
    15f6:	2002      	movs	r0, #2
    15f8:	f7ff feb4 	bl	1364 <setpowermode>
	__PCB = NULL;
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <halt+0x2c>)
    15fe:	601c      	str	r4, [r3, #0]
	release;
    1600:	f7ff fec2 	bl	1388 <__pi_release>
    1604:	43240280 			; <UNDEFINED> instruction: 0x43240280
    1608:	00004fb2 			; <UNDEFINED> instruction: 0x00004fb2
    160c:	20000588 	andcs	r0, r0, r8, lsl #11

00001610 <main>:

#include "scheduler.h"

}

int main (void) {
    1610:	b510      	push	{r4, lr}
    1612:	4b11      	ldr	r3, [pc, #68]	; (1658 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	4911      	ldr	r1, [pc, #68]	; (165c <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1616:	4a12      	ldr	r2, [pc, #72]	; (1660 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1618:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	4293      	cmp	r3, r2
    161e:	d1fb      	bne.n	1618 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	4c10      	ldr	r4, [pc, #64]	; (1664 <main+0x54>)
	system_init ();
    1622:	f7ff fdc3 	bl	11ac <system_init>
	tcv_init ();
    1626:	f000 fef9 	bl	241c <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    162a:	6823      	ldr	r3, [r4, #0]
    162c:	2129      	movs	r1, #41	; 0x29
    162e:	2000      	movs	r0, #0
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	6823      	ldr	r3, [r4, #0]
    1636:	2120      	movs	r1, #32
    1638:	681b      	ldr	r3, [r3, #0]
    163a:	2001      	movs	r0, #1
    163c:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    163e:	2100      	movs	r1, #0
    1640:	4809      	ldr	r0, [pc, #36]	; (1668 <main+0x58>)
    1642:	f000 fadb 	bl	1bfc <__pi_fork>
    1646:	4b09      	ldr	r3, [pc, #36]	; (166c <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    1648:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    164a:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    164c:	2010      	movs	r0, #16
    164e:	f000 f951 	bl	18f4 <delay>
    1652:	b662      	cpsie	i

	sti;

	__pi_release ();
    1654:	f7ff fe98 	bl	1388 <__pi_release>
    1658:	20004bfc 	strdcs	r4, [r0], -ip
    165c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1660:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    1664:	10000184 	andne	r0, r0, r4, lsl #3
    1668:	000005a5 	andeq	r0, r0, r5, lsr #11
    166c:	200006d4 	ldrdcs	r0, [r0], -r4

00001670 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    1670:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    1672:	4b0d      	ldr	r3, [pc, #52]	; (16a8 <killev+0x38>)
	wfun = (aword)(pid->code);
    1674:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    1676:	681a      	ldr	r2, [r3, #0]
    1678:	b1aa      	cbz	r2, 16a6 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    167a:	4614      	mov	r4, r2
    167c:	f834 1b10 	ldrh.w	r1, [r4], #16
    1680:	2300      	movs	r3, #0
    1682:	f001 0107 	and.w	r1, r1, #7
    1686:	e001      	b.n	168c <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    1688:	42b5      	cmp	r5, r6
    168a:	d006      	beq.n	169a <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    168c:	4299      	cmp	r1, r3
    168e:	dd08      	ble.n	16a2 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    1690:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1694:	3301      	adds	r3, #1
    1696:	42a8      	cmp	r0, r5
    1698:	d1f6      	bne.n	1688 <killev+0x18>
			    ) {
				wakeupev (i, j);
    169a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    169e:	889b      	ldrh	r3, [r3, #4]
    16a0:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    16a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    16a4:	e7e8      	b.n	1678 <killev+0x8>
				break;
			}
		}
	}
}
    16a6:	bd70      	pop	{r4, r5, r6, pc}
    16a8:	20000588 	andcs	r0, r0, r8, lsl #11

000016ac <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16ac:	4a1d      	ldr	r2, [pc, #116]	; (1724 <qfree+0x78>)
static void qfree (aword *ch) {
    16ae:	b530      	push	{r4, r5, lr}
    16b0:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b2:	6813      	ldr	r3, [r2, #0]
    16b4:	b93b      	cbnz	r3, 16c6 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    16b6:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    16b8:	4a1a      	ldr	r2, [pc, #104]	; (1724 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    16ba:	bb53      	cbnz	r3, 1712 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    16bc:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    16be:	4b1a      	ldr	r3, [pc, #104]	; (1728 <qfree+0x7c>)
	m_setnextp (cc, ch);
    16c0:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    16c2:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    16c4:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16c6:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    16ca:	3101      	adds	r1, #1
    16cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    16d0:	4288      	cmp	r0, r1
    16d2:	d10b      	bne.n	16ec <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    16d4:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    16d6:	f850 0c04 	ldr.w	r0, [r0, #-4]
    16da:	f853 1c04 	ldr.w	r1, [r3, #-4]
    16de:	4401      	add	r1, r0
    16e0:	4618      	mov	r0, r3
    16e2:	3101      	adds	r1, #1
    16e4:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16e8:	681b      	ldr	r3, [r3, #0]
    16ea:	e7e3      	b.n	16b4 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	f850 1c04 	ldr.w	r1, [r0, #-4]
    16f0:	3101      	adds	r1, #1
    16f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    16f6:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    16f8:	bf03      	ittte	eq
    16fa:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    1700:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    1704:	461a      	movne	r2, r3
    1706:	bf02      	ittt	eq
    1708:	1949      	addeq	r1, r1, r5
    170a:	3101      	addeq	r1, #1
    170c:	f840 1c04 	streq.w	r1, [r0, #-4]
    1710:	e7ea      	b.n	16e8 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    1712:	f853 4c04 	ldr.w	r4, [r3, #-4]
    1716:	f850 1c04 	ldr.w	r1, [r0, #-4]
    171a:	428c      	cmp	r4, r1
    171c:	d2ce      	bcs.n	16bc <qfree+0x10>
		chunk = m_nextp (chunk))
    171e:	461a      	mov	r2, r3
    1720:	681b      	ldr	r3, [r3, #0]
    1722:	e7ca      	b.n	16ba <qfree+0xe>
    1724:	2000059c 	mulcs	r0, ip, r5
    1728:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

0000172c <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	4a03      	ldr	r2, [pc, #12]	; (173c <dgout+0x10>)
    172e:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1730:	071b      	lsls	r3, r3, #28
    1732:	d4fc      	bmi.n	172e <dgout+0x2>
	diag_wchar (c, a);
    1734:	4b02      	ldr	r3, [pc, #8]	; (1740 <dgout+0x14>)
    1736:	b2c0      	uxtb	r0, r0
    1738:	6018      	str	r0, [r3, #0]
}
    173a:	4770      	bx	lr
    173c:	40001018 	andmi	r1, r0, r8, lsl r0
    1740:	40001000 	andmi	r1, r0, r0

00001744 <__pi_badstate>:
	syserror (ESTATE, "state");
    1744:	2007      	movs	r0, #7
void __pi_badstate (void) {
    1746:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1748:	4901      	ldr	r1, [pc, #4]	; (1750 <__pi_badstate+0xc>)
    174a:	f7ff fa5f 	bl	c0c <__pi_syserror>
    174e:	bf00      	nop
    1750:	00005004 	andeq	r5, r0, r4

00001754 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	4a08      	ldr	r2, [pc, #32]	; (1778 <utimer_add+0x24>)
void utimer_add (address ut) {
    1756:	4603      	mov	r3, r0
    1758:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    175a:	2000      	movs	r0, #0
void utimer_add (address ut) {
    175c:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    175e:	f852 4b04 	ldr.w	r4, [r2], #4
    1762:	b12c      	cbz	r4, 1770 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	3001      	adds	r0, #1
    1766:	2804      	cmp	r0, #4
    1768:	d1f9      	bne.n	175e <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    176a:	4904      	ldr	r1, [pc, #16]	; (177c <utimer_add+0x28>)
    176c:	f7ff fa4e 	bl	c0c <__pi_syserror>
	__pi_utims [i] = ut;
    1770:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    1774:	bd10      	pop	{r4, pc}
    1776:	bf00      	nop
    1778:	200006c4 	andcs	r0, r0, r4, asr #13
    177c:	0000500a 	andeq	r5, r0, sl

00001780 <__pi_utimer_set>:
	*t = v;
    1780:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    1782:	f7ff ba8d 	b.w	ca0 <tci_run_auxiliary_timer>
	...

00001788 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    178a:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	4608      	mov	r0, r1
    178e:	f7ff fb25 	bl	ddc <tci_update_delay_ticks>
    1792:	2800      	cmp	r0, #0
    1794:	d154      	bne.n	1840 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1796:	4b2b      	ldr	r3, [pc, #172]	; (1844 <update_n_wake+0xbc>)
    1798:	4d2b      	ldr	r5, [pc, #172]	; (1848 <update_n_wake+0xc0>)
    179a:	8819      	ldrh	r1, [r3, #0]
    179c:	882a      	ldrh	r2, [r5, #0]
    179e:	b289      	uxth	r1, r1
    17a0:	428a      	cmp	r2, r1
    17a2:	492a      	ldr	r1, [pc, #168]	; (184c <update_n_wake+0xc4>)
    17a4:	d803      	bhi.n	17ae <update_n_wake+0x26>
    17a6:	8808      	ldrh	r0, [r1, #0]
    17a8:	b280      	uxth	r0, r0
    17aa:	4282      	cmp	r2, r0
    17ac:	d20d      	bcs.n	17ca <update_n_wake+0x42>
    17ae:	881e      	ldrh	r6, [r3, #0]
    17b0:	8808      	ldrh	r0, [r1, #0]
    17b2:	b2b6      	uxth	r6, r6
    17b4:	b280      	uxth	r0, r0
    17b6:	4286      	cmp	r6, r0
    17b8:	d236      	bcs.n	1828 <update_n_wake+0xa0>
    17ba:	8818      	ldrh	r0, [r3, #0]
    17bc:	b280      	uxth	r0, r0
    17be:	4282      	cmp	r2, r0
    17c0:	d903      	bls.n	17ca <update_n_wake+0x42>
    17c2:	8808      	ldrh	r0, [r1, #0]
    17c4:	b280      	uxth	r0, r0
    17c6:	4282      	cmp	r2, r0
    17c8:	d32e      	bcc.n	1828 <update_n_wake+0xa0>
		for_all_tasks (i) {
    17ca:	4a21      	ldr	r2, [pc, #132]	; (1850 <update_n_wake+0xc8>)
    17cc:	6810      	ldr	r0, [r2, #0]
    17ce:	b918      	cbnz	r0, 17d8 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    17d0:	8818      	ldrh	r0, [r3, #0]
    17d2:	4404      	add	r4, r0
    17d4:	802c      	strh	r4, [r5, #0]
    17d6:	e02c      	b.n	1832 <update_n_wake+0xaa>
			if (!twaiting (i))
    17d8:	8806      	ldrh	r6, [r0, #0]
    17da:	0732      	lsls	r2, r6, #28
    17dc:	d51b      	bpl.n	1816 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17de:	881f      	ldrh	r7, [r3, #0]
    17e0:	8842      	ldrh	r2, [r0, #2]
    17e2:	b2bf      	uxth	r7, r7
    17e4:	42ba      	cmp	r2, r7
    17e6:	d803      	bhi.n	17f0 <update_n_wake+0x68>
    17e8:	880f      	ldrh	r7, [r1, #0]
    17ea:	b2bf      	uxth	r7, r7
    17ec:	42ba      	cmp	r2, r7
    17ee:	d20f      	bcs.n	1810 <update_n_wake+0x88>
    17f0:	f8b3 c000 	ldrh.w	ip, [r3]
    17f4:	880f      	ldrh	r7, [r1, #0]
    17f6:	fa1f fc8c 	uxth.w	ip, ip
    17fa:	b2bf      	uxth	r7, r7
    17fc:	45bc      	cmp	ip, r7
    17fe:	d20c      	bcs.n	181a <update_n_wake+0x92>
    1800:	881f      	ldrh	r7, [r3, #0]
    1802:	b2bf      	uxth	r7, r7
    1804:	42ba      	cmp	r2, r7
    1806:	d903      	bls.n	1810 <update_n_wake+0x88>
    1808:	880f      	ldrh	r7, [r1, #0]
    180a:	b2bf      	uxth	r7, r7
    180c:	42ba      	cmp	r2, r7
    180e:	d304      	bcc.n	181a <update_n_wake+0x92>
				wakeuptm (i);
    1810:	f026 060f 	bic.w	r6, r6, #15
    1814:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    1816:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1818:	e7d9      	b.n	17ce <update_n_wake+0x46>
				d = i->Timer - znew;
    181a:	881e      	ldrh	r6, [r3, #0]
    181c:	1b92      	subs	r2, r2, r6
    181e:	b292      	uxth	r2, r2
    1820:	4294      	cmp	r4, r2
    1822:	bf28      	it	cs
    1824:	4614      	movcs	r4, r2
    1826:	e7f6      	b.n	1816 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1828:	8818      	ldrh	r0, [r3, #0]
    182a:	1a12      	subs	r2, r2, r0
    182c:	b292      	uxth	r2, r2
    182e:	4294      	cmp	r4, r2
    1830:	d9ce      	bls.n	17d0 <update_n_wake+0x48>
	__pi_old = znew;
    1832:	881b      	ldrh	r3, [r3, #0]
    1834:	b29b      	uxth	r3, r3
    1836:	800b      	strh	r3, [r1, #0]
}
    1838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    183c:	f7ff ba10 	b.w	c60 <tci_run_delay_timer>
}
    1840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1842:	bf00      	nop
    1844:	200006c0 	andcs	r0, r0, r0, asr #13
    1848:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    184c:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
    1850:	20000588 	andcs	r0, r0, r8, lsl #11

00001854 <proceed>:
void proceed (word state) {
    1854:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1856:	4b03      	ldr	r3, [pc, #12]	; (1864 <proceed+0x10>)
    1858:	0100      	lsls	r0, r0, #4
    185a:	681b      	ldr	r3, [r3, #0]
    185c:	8018      	strh	r0, [r3, #0]
	release;
    185e:	f7ff fd93 	bl	1388 <__pi_release>
    1862:	bf00      	nop
    1864:	200006d4 	ldrdcs	r0, [r0], -r4

00001868 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1868:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    186a:	4b0a      	ldr	r3, [pc, #40]	; (1894 <__pi_wait+0x2c>)
    186c:	681c      	ldr	r4, [r3, #0]
    186e:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	f013 0f04 	tst.w	r3, #4
    1874:	f003 0207 	and.w	r2, r3, #7
    1878:	d003      	beq.n	1882 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    187a:	2005      	movs	r0, #5
    187c:	4906      	ldr	r1, [pc, #24]	; (1898 <__pi_wait+0x30>)
    187e:	f7ff f9c5 	bl	c0c <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1882:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1886:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1888:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    188a:	8191      	strh	r1, [r2, #12]
    188c:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    188e:	8023      	strh	r3, [r4, #0]
}
    1890:	bd10      	pop	{r4, pc}
    1892:	bf00      	nop
    1894:	200006d4 	ldrdcs	r0, [r0], -r4
    1898:	0000500f 	andeq	r5, r0, pc

0000189c <__pi_trigger>:
void __pi_trigger (aword event) {
    189c:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    189e:	4b0b      	ldr	r3, [pc, #44]	; (18cc <__pi_trigger+0x30>)
    18a0:	681a      	ldr	r2, [r3, #0]
    18a2:	b192      	cbz	r2, 18ca <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    18a4:	4614      	mov	r4, r2
    18a6:	2300      	movs	r3, #0
    18a8:	f834 1b10 	ldrh.w	r1, [r4], #16
    18ac:	f001 0107 	and.w	r1, r1, #7
    18b0:	4299      	cmp	r1, r3
    18b2:	dd08      	ble.n	18c6 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    18b4:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    18b8:	3301      	adds	r3, #1
    18ba:	4285      	cmp	r5, r0
    18bc:	d1f8      	bne.n	18b0 <__pi_trigger+0x14>
				wakeupev (i, j);
    18be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    18c2:	889b      	ldrh	r3, [r3, #4]
    18c4:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    18c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    18c8:	e7eb      	b.n	18a2 <__pi_trigger+0x6>
}
    18ca:	bd30      	pop	{r4, r5, pc}
    18cc:	20000588 	andcs	r0, r0, r8, lsl #11

000018d0 <__pi_join>:
aword __pi_join (aword pid, word st) {
    18d0:	b510      	push	{r4, lr}
    18d2:	4604      	mov	r4, r0
	for_all_tasks (i) {
    18d4:	4b06      	ldr	r3, [pc, #24]	; (18f0 <__pi_join+0x20>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	b90b      	cbnz	r3, 18de <__pi_join+0xe>
	return 0;
    18da:	461c      	mov	r4, r3
    18dc:	e004      	b.n	18e8 <__pi_join+0x18>
		if ((aword)i == pid) {
    18de:	42a3      	cmp	r3, r4
    18e0:	d104      	bne.n	18ec <__pi_join+0x1c>
			__pi_wait (pid, st);
    18e2:	4620      	mov	r0, r4
    18e4:	f7ff ffc0 	bl	1868 <__pi_wait>
}
    18e8:	4620      	mov	r0, r4
    18ea:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    18ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18ee:	e7f3      	b.n	18d8 <__pi_join+0x8>
    18f0:	20000588 	andcs	r0, r0, r8, lsl #11

000018f4 <delay>:
void delay (word d, word state) {
    18f4:	b538      	push	{r3, r4, r5, lr}
    18f6:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    18f8:	4d0a      	ldr	r5, [pc, #40]	; (1924 <delay+0x30>)
    18fa:	682a      	ldr	r2, [r5, #0]
    18fc:	8813      	ldrh	r3, [r2, #0]
    18fe:	f003 0307 	and.w	r3, r3, #7
    1902:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1906:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    1908:	2101      	movs	r1, #1
    190a:	f7ff ff3d 	bl	1788 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    190e:	4b06      	ldr	r3, [pc, #24]	; (1928 <delay+0x34>)
    1910:	8818      	ldrh	r0, [r3, #0]
    1912:	682b      	ldr	r3, [r5, #0]
    1914:	4404      	add	r4, r0
    1916:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    1918:	682a      	ldr	r2, [r5, #0]
    191a:	8813      	ldrh	r3, [r2, #0]
    191c:	f043 0308 	orr.w	r3, r3, #8
    1920:	8013      	strh	r3, [r2, #0]
}
    1922:	bd38      	pop	{r3, r4, r5, pc}
    1924:	200006d4 	ldrdcs	r0, [r0], -r4
    1928:	200006b6 			; <UNDEFINED> instruction: 0x200006b6

0000192c <running>:
	if (fun == NULL)
    192c:	4603      	mov	r3, r0
    192e:	b910      	cbnz	r0, 1936 <running+0xa>
		return (int) __pi_curr;
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <running+0x1c>)
    1932:	6818      	ldr	r0, [r3, #0]
    1934:	4770      	bx	lr
	for_all_tasks (i)
    1936:	4a05      	ldr	r2, [pc, #20]	; (194c <running+0x20>)
    1938:	6810      	ldr	r0, [r2, #0]
    193a:	b900      	cbnz	r0, 193e <running+0x12>
}
    193c:	4770      	bx	lr
		if (i->code == fun)
    193e:	6842      	ldr	r2, [r0, #4]
    1940:	429a      	cmp	r2, r3
    1942:	d0fb      	beq.n	193c <running+0x10>
	for_all_tasks (i)
    1944:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1946:	e7f8      	b.n	193a <running+0xe>
    1948:	200006d4 	ldrdcs	r0, [r0], -r4
    194c:	20000588 	andcs	r0, r0, r8, lsl #11

00001950 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1950:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1952:	2000      	movs	r0, #0
    1954:	5c1a      	ldrb	r2, [r3, r0]
    1956:	b902      	cbnz	r2, 195a <__pi_strlen+0xa>
}
    1958:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    195a:	3001      	adds	r0, #1
    195c:	e7fa      	b.n	1954 <__pi_strlen+0x4>

0000195e <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    195e:	3801      	subs	r0, #1
    1960:	f811 3b01 	ldrb.w	r3, [r1], #1
    1964:	f800 3f01 	strb.w	r3, [r0, #1]!
    1968:	2b00      	cmp	r3, #0
    196a:	d1f9      	bne.n	1960 <__pi_strcpy+0x2>
}
    196c:	4770      	bx	lr

0000196e <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    196e:	3901      	subs	r1, #1
    1970:	4402      	add	r2, r0
    1972:	4290      	cmp	r0, r2
    1974:	d102      	bne.n	197c <__pi_strncpy+0xe>
	*d = '\0';
    1976:	2300      	movs	r3, #0
    1978:	7003      	strb	r3, [r0, #0]
}
    197a:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    197c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1980:	2b00      	cmp	r3, #0
    1982:	d0f8      	beq.n	1976 <__pi_strncpy+0x8>
		*d++ = *s++;
    1984:	f800 3b01 	strb.w	r3, [r0], #1
    1988:	e7f3      	b.n	1972 <__pi_strncpy+0x4>

0000198a <__pi_memcpy>:
	while (n--)
    198a:	3801      	subs	r0, #1
    198c:	440a      	add	r2, r1
    198e:	4291      	cmp	r1, r2
    1990:	d100      	bne.n	1994 <__pi_memcpy+0xa>
}
    1992:	4770      	bx	lr
		*dest++ = *src++;
    1994:	f811 3b01 	ldrb.w	r3, [r1], #1
    1998:	f800 3f01 	strb.w	r3, [r0, #1]!
    199c:	e7f7      	b.n	198e <__pi_memcpy+0x4>

0000199e <__pi_memset>:
	while (n--)
    199e:	4402      	add	r2, r0
    19a0:	4290      	cmp	r0, r2
    19a2:	d100      	bne.n	19a6 <__pi_memset+0x8>
}
    19a4:	4770      	bx	lr
		*dest++ = c;
    19a6:	f800 1b01 	strb.w	r1, [r0], #1
    19aa:	e7f9      	b.n	19a0 <__pi_memset+0x2>

000019ac <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    19ac:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    19ae:	b119      	cbz	r1, 19b8 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    19b0:	2003      	movs	r0, #3
    19b2:	4905      	ldr	r1, [pc, #20]	; (19c8 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    19b4:	f7ff f92a 	bl	c0c <__pi_syserror>
	if (ioreq [loc] != NULL)
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <adddevfunc+0x20>)
    19ba:	681a      	ldr	r2, [r3, #0]
    19bc:	b112      	cbz	r2, 19c4 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    19be:	2004      	movs	r0, #4
    19c0:	4901      	ldr	r1, [pc, #4]	; (19c8 <adddevfunc+0x1c>)
    19c2:	e7f7      	b.n	19b4 <adddevfunc+0x8>
	ioreq [loc] = rf;
    19c4:	6018      	str	r0, [r3, #0]
}
    19c6:	bd08      	pop	{r3, pc}
    19c8:	00005012 	andeq	r5, r0, r2, lsl r0
    19cc:	2000058c 	andcs	r0, r0, ip, lsl #11

000019d0 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    19d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    19d4:	4604      	mov	r4, r0
    19d6:	4616      	mov	r6, r2
    19d8:	461d      	mov	r5, r3
    19da:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    19de:	b921      	cbnz	r1, 19ea <io+0x1a>
    19e0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1a68 <io+0x98>
    19e4:	f8d9 3000 	ldr.w	r3, [r9]
    19e8:	b91b      	cbnz	r3, 19f2 <io+0x22>
		syserror (ENODEVICE, "io");
    19ea:	2001      	movs	r0, #1
    19ec:	491d      	ldr	r1, [pc, #116]	; (1a64 <io+0x94>)
    19ee:	f7ff f90d 	bl	c0c <__pi_syserror>
	if (len == 0)
    19f2:	f1b8 0f00 	cmp.w	r8, #0
    19f6:	d028      	beq.n	1a4a <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    19f8:	4642      	mov	r2, r8
    19fa:	4629      	mov	r1, r5
    19fc:	4630      	mov	r0, r6
    19fe:	4798      	blx	r3
	if (ret >= 0)
    1a00:	2800      	cmp	r0, #0
    1a02:	da23      	bge.n	1a4c <io+0x7c>
	if (ret == -1) {
    1a04:	1c41      	adds	r1, r0, #1
    1a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1a0a:	d108      	bne.n	1a1e <io+0x4e>
		if (retry == WNONE)
    1a0c:	429c      	cmp	r4, r3
    1a0e:	d01c      	beq.n	1a4a <io+0x7a>
		iowait (dev, operation, retry);
    1a10:	4621      	mov	r1, r4
    1a12:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1a16:	f7ff ff27 	bl	1868 <__pi_wait>
			release;
    1a1a:	f7ff fcb5 	bl	1388 <__pi_release>
	if (ret == -2) {
    1a1e:	1c82      	adds	r2, r0, #2
    1a20:	d116      	bne.n	1a50 <io+0x80>
		if (retry != WNONE) {
    1a22:	429c      	cmp	r4, r3
    1a24:	f8d9 9000 	ldr.w	r9, [r9]
    1a28:	d00a      	beq.n	1a40 <io+0x70>
			iowait (dev, operation, retry);
    1a2a:	4621      	mov	r1, r4
    1a2c:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1a30:	f7ff ff1a 	bl	1868 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1a34:	4642      	mov	r2, r8
    1a36:	4629      	mov	r1, r5
    1a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a3c:	47c8      	blx	r9
    1a3e:	e7ec      	b.n	1a1a <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1a40:	4642      	mov	r2, r8
    1a42:	4629      	mov	r1, r5
    1a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a48:	47c8      	blx	r9
		return 0;
    1a4a:	2000      	movs	r0, #0
}
    1a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1a50:	429c      	cmp	r4, r3
    1a52:	d0fa      	beq.n	1a4a <io+0x7a>
		delay (-ret - 2, retry);
    1a54:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1a58:	30fe      	adds	r0, #254	; 0xfe
    1a5a:	4621      	mov	r1, r4
    1a5c:	b280      	uxth	r0, r0
    1a5e:	f7ff ff49 	bl	18f4 <delay>
		release;
    1a62:	e7da      	b.n	1a1a <io+0x4a>
    1a64:	00005017 	andeq	r5, r0, r7, lsl r0
    1a68:	2000058c 	andcs	r0, r0, ip, lsl #11

00001a6c <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a6c:	4a0d      	ldr	r2, [pc, #52]	; (1aa4 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1a6e:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a70:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1a74:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1a78:	089b      	lsrs	r3, r3, #2
    1a7a:	1e59      	subs	r1, r3, #1
    1a7c:	29ff      	cmp	r1, #255	; 0xff
    1a7e:	d803      	bhi.n	1a88 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1a80:	2004      	movs	r0, #4
    1a82:	4909      	ldr	r1, [pc, #36]	; (1aa8 <__pi_malloc_init+0x3c>)
    1a84:	f7ff f8c2 	bl	c0c <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a88:	4908      	ldr	r1, [pc, #32]	; (1aac <__pi_malloc_init+0x40>)
    1a8a:	1d10      	adds	r0, r2, #4
    1a8c:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a8e:	2000      	movs	r0, #0
    1a90:	4907      	ldr	r1, [pc, #28]	; (1ab0 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a92:	3b02      	subs	r3, #2
    1a94:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a96:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a9a:	4a06      	ldr	r2, [pc, #24]	; (1ab4 <__pi_malloc_init+0x48>)
    1a9c:	6013      	str	r3, [r2, #0]
    1a9e:	4a06      	ldr	r2, [pc, #24]	; (1ab8 <__pi_malloc_init+0x4c>)
    1aa0:	6013      	str	r3, [r2, #0]
}
    1aa2:	bd08      	pop	{r3, pc}
    1aa4:	200006d8 	ldrdcs	r0, [r0], -r8
    1aa8:	0000501a 	andeq	r5, r0, sl, lsl r0
    1aac:	2000059c 	mulcs	r0, ip, r5
    1ab0:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1ab4:	20000590 	mulcs	r0, r0, r5
    1ab8:	20000598 	mulcs	r0, r8, r5

00001abc <__pi_free>:
void __pi_free (aword *ch) {
    1abc:	b508      	push	{r3, lr}
	if (ch == NULL)
    1abe:	b1c8      	cbz	r0, 1af4 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1ac0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	db03      	blt.n	1ad0 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1ac8:	2006      	movs	r0, #6
    1aca:	490b      	ldr	r1, [pc, #44]	; (1af8 <__pi_free+0x3c>)
    1acc:	f7ff f89e 	bl	c0c <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1ad0:	490a      	ldr	r1, [pc, #40]	; (1afc <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1ad2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1ad6:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1ad8:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1adc:	4413      	add	r3, r2
    1ade:	600b      	str	r3, [r1, #0]
	QFREE;
    1ae0:	f7ff fde4 	bl	16ac <qfree>
	if (mevent [MA_NP] . nwait) {
    1ae4:	4806      	ldr	r0, [pc, #24]	; (1b00 <__pi_free+0x44>)
    1ae6:	7803      	ldrb	r3, [r0, #0]
    1ae8:	b123      	cbz	r3, 1af4 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1aea:	f7ff fed7 	bl	189c <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1aee:	7803      	ldrb	r3, [r0, #0]
    1af0:	3b01      	subs	r3, #1
    1af2:	7003      	strb	r3, [r0, #0]
}
    1af4:	bd08      	pop	{r3, pc}
    1af6:	bf00      	nop
    1af8:	0000501f 	andeq	r5, r0, pc, lsl r0
    1afc:	20000590 	mulcs	r0, r0, r5
    1b00:	20000594 	mulcs	r0, r4, r5

00001b04 <kill>:
void kill (aword pid) {
    1b04:	b510      	push	{r4, lr}
	if (pid == 0)
    1b06:	b908      	cbnz	r0, 1b0c <kill+0x8>
		pid = (aword) __pi_curr;
    1b08:	4b0f      	ldr	r3, [pc, #60]	; (1b48 <kill+0x44>)
    1b0a:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1b0c:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1b0e:	4b0f      	ldr	r3, [pc, #60]	; (1b4c <kill+0x48>)
    1b10:	681c      	ldr	r4, [r3, #0]
    1b12:	b91c      	cbnz	r4, 1b1c <kill+0x18>
	syserror (EREQPAR, "kpi");
    1b14:	2003      	movs	r0, #3
    1b16:	490e      	ldr	r1, [pc, #56]	; (1b50 <kill+0x4c>)
    1b18:	f7ff f878 	bl	c0c <__pi_syserror>
		if ((aword)i == pid) {
    1b1c:	4284      	cmp	r4, r0
    1b1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1b20:	d10e      	bne.n	1b40 <kill+0x3c>
			if (j == NULL)
    1b22:	b95a      	cbnz	r2, 1b3c <kill+0x38>
				__PCB = i->Next;
    1b24:	6019      	str	r1, [r3, #0]
			killev (i);
    1b26:	4620      	mov	r0, r4
    1b28:	f7ff fda2 	bl	1670 <killev>
			ufree (i);
    1b2c:	f7ff ffc6 	bl	1abc <__pi_free>
			if (i == __pi_curr)
    1b30:	4b05      	ldr	r3, [pc, #20]	; (1b48 <kill+0x44>)
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	42a3      	cmp	r3, r4
    1b36:	d106      	bne.n	1b46 <kill+0x42>
				release;
    1b38:	f7ff fc26 	bl	1388 <__pi_release>
				j->Next = i->Next;
    1b3c:	62d1      	str	r1, [r2, #44]	; 0x2c
    1b3e:	e7f2      	b.n	1b26 <kill+0x22>
    1b40:	4622      	mov	r2, r4
    1b42:	460c      	mov	r4, r1
    1b44:	e7e5      	b.n	1b12 <kill+0xe>
}
    1b46:	bd10      	pop	{r4, pc}
    1b48:	200006d4 	ldrdcs	r0, [r0], -r4
    1b4c:	20000588 	andcs	r0, r0, r8, lsl #11
    1b50:	00005024 	andeq	r5, r0, r4, lsr #32

00001b54 <__pi_malloc>:
	if (size < 8)
    1b54:	2807      	cmp	r0, #7
		_size = 2;
    1b56:	bf98      	it	ls
    1b58:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1b5a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b5c:	4b21      	ldr	r3, [pc, #132]	; (1be4 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1b5e:	bf88      	it	hi
    1b60:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b62:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b64:	4920      	ldr	r1, [pc, #128]	; (1be8 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1b66:	bf88      	it	hi
    1b68:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b6a:	b94c      	cbnz	r4, 1b80 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1b6c:	4a1f      	ldr	r2, [pc, #124]	; (1bec <__pi_malloc+0x98>)
    1b6e:	7853      	ldrb	r3, [r2, #1]
    1b70:	2bff      	cmp	r3, #255	; 0xff
    1b72:	d001      	beq.n	1b78 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1b74:	3301      	adds	r3, #1
    1b76:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1b78:	2200      	movs	r2, #0
    1b7a:	4b1d      	ldr	r3, [pc, #116]	; (1bf0 <__pi_malloc+0x9c>)
    1b7c:	601a      	str	r2, [r3, #0]
	return chunk;
    1b7e:	e02f      	b.n	1be0 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b80:	6862      	ldr	r2, [r4, #4]
    1b82:	428a      	cmp	r2, r1
    1b84:	d003      	beq.n	1b8e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1b86:	2006      	movs	r0, #6
    1b88:	491a      	ldr	r1, [pc, #104]	; (1bf4 <__pi_malloc+0xa0>)
    1b8a:	f7ff f83f 	bl	c0c <__pi_syserror>
		if (m_size (chunk) >= _size)
    1b8e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1b92:	4285      	cmp	r5, r0
    1b94:	d202      	bcs.n	1b9c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1b96:	4623      	mov	r3, r4
    1b98:	4614      	mov	r4, r2
    1b9a:	e7e6      	b.n	1b6a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1b9c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1b9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1ba2:	1a1b      	subs	r3, r3, r0
    1ba4:	2b08      	cmp	r3, #8
    1ba6:	d909      	bls.n	1bbc <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1ba8:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1bac:	3001      	adds	r0, #1
    1bae:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1bb2:	3b01      	subs	r3, #1
    1bb4:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1bb8:	f7ff fd78 	bl	16ac <qfree>
		mevent [MA_NP] . nfail = 0;
    1bbc:	2200      	movs	r2, #0
    1bbe:	4b0b      	ldr	r3, [pc, #44]	; (1bec <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1bc0:	490d      	ldr	r1, [pc, #52]	; (1bf8 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1bc2:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1bc4:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1bc8:	680b      	ldr	r3, [r1, #0]
    1bca:	1a9b      	subs	r3, r3, r2
    1bcc:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bce:	4908      	ldr	r1, [pc, #32]	; (1bf0 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1bd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bd4:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1bd6:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bda:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1bdc:	bf38      	it	cc
    1bde:	600b      	strcc	r3, [r1, #0]
}
    1be0:	4620      	mov	r0, r4
    1be2:	bd38      	pop	{r3, r4, r5, pc}
    1be4:	2000059c 	mulcs	r0, ip, r5
    1be8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1bec:	20000594 	mulcs	r0, r4, r5
    1bf0:	20000598 	mulcs	r0, r8, r5
    1bf4:	00005028 	andeq	r5, r0, r8, lsr #32
    1bf8:	20000590 	mulcs	r0, r0, r5

00001bfc <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1bfc:	b538      	push	{r3, r4, r5, lr}
    1bfe:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c00:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1c02:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c04:	f7ff ffa6 	bl	1b54 <__pi_malloc>
    1c08:	2300      	movs	r3, #0
    1c0a:	b138      	cbz	r0, 1c1c <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1c0c:	4a07      	ldr	r2, [pc, #28]	; (1c2c <__pi_fork+0x30>)
	i->Status = 0;
    1c0e:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1c10:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1c12:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1c14:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1c18:	b90b      	cbnz	r3, 1c1e <__pi_fork+0x22>
			__PCB = i;
    1c1a:	6010      	str	r0, [r2, #0]
}
    1c1c:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1c1e:	461a      	mov	r2, r3
    1c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c22:	2b00      	cmp	r3, #0
    1c24:	d1fb      	bne.n	1c1e <__pi_fork+0x22>
			j->Next = i;
    1c26:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1c28:	e7f8      	b.n	1c1c <__pi_fork+0x20>
    1c2a:	bf00      	nop
    1c2c:	20000588 	andcs	r0, r0, r8, lsl #11

00001c30 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1c30:	4a04      	ldr	r2, [pc, #16]	; (1c44 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1c32:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1c34:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1c36:	4803      	ldr	r0, [pc, #12]	; (1c44 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1c38:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1c3a:	bf1c      	itt	ne
    1c3c:	3301      	addne	r3, #1
    1c3e:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1c40:	f7ff be12 	b.w	1868 <__pi_wait>
    1c44:	20000594 	mulcs	r0, r4, r5

00001c48 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1c48:	b40f      	push	{r0, r1, r2, r3}
    1c4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1c4e:	ab0a      	add	r3, sp, #40	; 0x28
    1c50:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1c54:	2015      	movs	r0, #21
	va_start (ap, mess);
    1c56:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1c58:	4b46      	ldr	r3, [pc, #280]	; (1d74 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1c5a:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1c5c:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1c5e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1d7c <diag+0x134>
	diag_disable_int (a, is);
    1c62:	695b      	ldr	r3, [r3, #20]
    1c64:	4798      	blx	r3
	while (*mess != '\0') {
    1c66:	7820      	ldrb	r0, [r4, #0]
    1c68:	b998      	cbnz	r0, 1c92 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1c6a:	200d      	movs	r0, #13
    1c6c:	f7ff fd5e 	bl	172c <dgout>
	dgout ('\n');
    1c70:	200a      	movs	r0, #10
    1c72:	f7ff fd5b 	bl	172c <dgout>
    1c76:	4a40      	ldr	r2, [pc, #256]	; (1d78 <diag+0x130>)
    1c78:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1c7a:	071b      	lsls	r3, r3, #28
    1c7c:	d4fc      	bmi.n	1c78 <diag+0x30>
	diag_enable_int (a, is);
    1c7e:	4b3d      	ldr	r3, [pc, #244]	; (1d74 <diag+0x12c>)
    1c80:	2015      	movs	r0, #21
    1c82:	681b      	ldr	r3, [r3, #0]
    1c84:	691b      	ldr	r3, [r3, #16]
    1c86:	4798      	blx	r3
}
    1c88:	b003      	add	sp, #12
    1c8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c8e:	b004      	add	sp, #16
    1c90:	4770      	bx	lr
		if (*mess == '%') {
    1c92:	2825      	cmp	r0, #37	; 0x25
    1c94:	f104 0601 	add.w	r6, r4, #1
    1c98:	d169      	bne.n	1d6e <diag+0x126>
			if (*mess == 'l') {
    1c9a:	9b01      	ldr	r3, [sp, #4]
    1c9c:	7862      	ldrb	r2, [r4, #1]
    1c9e:	f853 1b04 	ldr.w	r1, [r3], #4
    1ca2:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1ca4:	bf08      	it	eq
    1ca6:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1ca8:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1caa:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1cac:	bf0c      	ite	eq
    1cae:	2520      	moveq	r5, #32
				bc = 16;
    1cb0:	2510      	movne	r5, #16
			switch (*mess) {
    1cb2:	2b75      	cmp	r3, #117	; 0x75
    1cb4:	d04e      	beq.n	1d54 <diag+0x10c>
    1cb6:	d80a      	bhi.n	1cce <diag+0x86>
    1cb8:	2b64      	cmp	r3, #100	; 0x64
    1cba:	d01c      	beq.n	1cf6 <diag+0xae>
    1cbc:	2b73      	cmp	r3, #115	; 0x73
    1cbe:	d052      	beq.n	1d66 <diag+0x11e>
				dgout ('%');
    1cc0:	2025      	movs	r0, #37	; 0x25
    1cc2:	f7ff fd33 	bl	172c <dgout>
				dgout (*mess);
    1cc6:	7830      	ldrb	r0, [r6, #0]
    1cc8:	f7ff fd30 	bl	172c <dgout>
    1ccc:	e010      	b.n	1cf0 <diag+0xa8>
			switch (*mess) {
    1cce:	2b78      	cmp	r3, #120	; 0x78
    1cd0:	d1f6      	bne.n	1cc0 <diag+0x78>
    1cd2:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1cd4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d80 <diag+0x138>
					i += 4;
    1cd8:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1cda:	1b2b      	subs	r3, r5, r4
    1cdc:	fa21 f303 	lsr.w	r3, r1, r3
    1ce0:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1ce4:	f819 0003 	ldrb.w	r0, [r9, r3]
    1ce8:	f7ff fd20 	bl	172c <dgout>
				while (i < bc) {
    1cec:	42a5      	cmp	r5, r4
    1cee:	dcf3      	bgt.n	1cd8 <diag+0x90>
			mess++;
    1cf0:	3601      	adds	r6, #1
					d /= 10;
    1cf2:	4634      	mov	r4, r6
    1cf4:	e7b7      	b.n	1c66 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1cf6:	1e6b      	subs	r3, r5, #1
    1cf8:	fa21 f303 	lsr.w	r3, r1, r3
    1cfc:	07da      	lsls	r2, r3, #31
    1cfe:	d509      	bpl.n	1d14 <diag+0xcc>
					dgout ('-');
    1d00:	202d      	movs	r0, #45	; 0x2d
    1d02:	f7ff fd13 	bl	172c <dgout>
					if (bc == 16)
    1d06:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1d08:	bf04      	itt	eq
    1d0a:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1d0e:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1d12:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1d14:	f242 7410 	movw	r4, #10000	; 0x2710
    1d18:	2d10      	cmp	r5, #16
    1d1a:	bf18      	it	ne
    1d1c:	4644      	movne	r4, r8
					v = (word) (val / d);
    1d1e:	fbb1 f5f4 	udiv	r5, r1, r4
    1d22:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1d24:	b935      	cbnz	r5, 1d34 <diag+0xec>
    1d26:	2c01      	cmp	r4, #1
    1d28:	d004      	beq.n	1d34 <diag+0xec>
					d /= 10;
    1d2a:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1d2e:	e7f6      	b.n	1d1e <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	4c12      	ldr	r4, [pc, #72]	; (1d7c <diag+0x134>)
    1d32:	e7f4      	b.n	1d1e <diag+0xd6>
					dgout (v + '0');
    1d34:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1d38:	b280      	uxth	r0, r0
    1d3a:	f7ff fcf7 	bl	172c <dgout>
					if (d == 0) break;
    1d3e:	2c09      	cmp	r4, #9
					d /= 10;
    1d40:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1d44:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1d48:	d9d2      	bls.n	1cf0 <diag+0xa8>
					v = (word) (val / d);
    1d4a:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1d4e:	461c      	mov	r4, r3
					v = (word) (val / d);
    1d50:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1d52:	e7ef      	b.n	1d34 <diag+0xec>
				if (bc == 16)
    1d54:	2d10      	cmp	r5, #16
    1d56:	d1eb      	bne.n	1d30 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1d58:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1d5c:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1d5e:	e7de      	b.n	1d1e <diag+0xd6>
					dgout (*s);
    1d60:	f7ff fce4 	bl	172c <dgout>
					s++;
    1d64:	3101      	adds	r1, #1
				while (*s != '\0') {
    1d66:	7808      	ldrb	r0, [r1, #0]
    1d68:	2800      	cmp	r0, #0
    1d6a:	d1f9      	bne.n	1d60 <diag+0x118>
    1d6c:	e7c0      	b.n	1cf0 <diag+0xa8>
			dgout (*mess++);
    1d6e:	f7ff fcdd 	bl	172c <dgout>
    1d72:	e7be      	b.n	1cf2 <diag+0xaa>
    1d74:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1d78:	40001018 	andmi	r1, r0, r8, lsl r0
    1d7c:	3b9aca00 	blcc	fe6b4584 <_estack+0xde6af584>
    1d80:	0000502d 	andeq	r5, r0, sp, lsr #32

00001d84 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d84:	f243 0039 	movw	r0, #12345	; 0x3039
    1d88:	4a04      	ldr	r2, [pc, #16]	; (1d9c <lrnd+0x18>)
    1d8a:	4905      	ldr	r1, [pc, #20]	; (1da0 <lrnd+0x1c>)
    1d8c:	6813      	ldr	r3, [r2, #0]
    1d8e:	fb01 0303 	mla	r3, r1, r3, r0
    1d92:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1d94:	4a03      	ldr	r2, [pc, #12]	; (1da4 <lrnd+0x20>)
    1d96:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1d98:	4058      	eors	r0, r3
    1d9a:	4770      	bx	lr
    1d9c:	20000004 	andcs	r0, r0, r4
    1da0:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1da4:	200006b0 			; <UNDEFINED> instruction: 0x200006b0

00001da8 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1da8:	b510      	push	{r4, lr}
    1daa:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1dac:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1dae:	b280      	uxth	r0, r0
    1db0:	f7ff fed0 	bl	1b54 <__pi_malloc>
    1db4:	b110      	cbz	r0, 1dbc <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1db6:	2300      	movs	r3, #0
	p -> length = size;
    1db8:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1dba:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1dbc:	bd10      	pop	{r4, pc}

00001dbe <deq>:
	if (p->attributes.b.queued) {
    1dbe:	7a83      	ldrb	r3, [r0, #10]
    1dc0:	07db      	lsls	r3, r3, #31
    1dc2:	d508      	bpl.n	1dd6 <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1dc4:	e9d0 2300 	ldrd	r2, r3, [r0]
    1dc8:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1dca:	6802      	ldr	r2, [r0, #0]
    1dcc:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1dce:	7a83      	ldrb	r3, [r0, #10]
    1dd0:	f36f 0300 	bfc	r3, #0, #1
    1dd4:	7283      	strb	r3, [r0, #10]
}
    1dd6:	4770      	bx	lr

00001dd8 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1dd8:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1dda:	f7ff fff0 	bl	1dbe <deq>
}
    1dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1de2:	f7ff be6b 	b.w	1abc <__pi_free>
	...

00001de8 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1de8:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1dea:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1dec:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1dee:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1df0:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1df2:	d503      	bpl.n	1dfc <enq+0x14>
    1df4:	200a      	movs	r0, #10
    1df6:	490e      	ldr	r1, [pc, #56]	; (1e30 <enq+0x48>)
    1df8:	f7fe ff08 	bl	c0c <__pi_syserror>
	if (q_empty (q))
    1dfc:	6803      	ldr	r3, [r0, #0]
    1dfe:	4283      	cmp	r3, r0
    1e00:	d101      	bne.n	1e06 <enq+0x1e>
		trigger (q);
    1e02:	f7ff fd4b 	bl	189c <__pi_trigger>
	if (p->attributes.b.urgent) {
    1e06:	7aa3      	ldrb	r3, [r4, #10]
    1e08:	075b      	lsls	r3, r3, #29
    1e0a:	d50a      	bpl.n	1e22 <enq+0x3a>
		p->u.bqueue.next = q->next;
    1e0c:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1e0e:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1e12:	682b      	ldr	r3, [r5, #0]
    1e14:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1e16:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1e18:	7aa3      	ldrb	r3, [r4, #10]
    1e1a:	f043 0301 	orr.w	r3, r3, #1
    1e1e:	72a3      	strb	r3, [r4, #10]
}
    1e20:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1e22:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1e24:	686b      	ldr	r3, [r5, #4]
    1e26:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1e28:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1e2a:	606c      	str	r4, [r5, #4]
    1e2c:	e7f4      	b.n	1e18 <enq+0x30>
    1e2e:	bf00      	nop
    1e30:	0000503d 	andeq	r5, r0, sp, lsr r0

00001e34 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1e34:	b510      	push	{r4, lr}
    1e36:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1e38:	f7ff ffc1 	bl	1dbe <deq>
	switch (dv) {
    1e3c:	3901      	subs	r1, #1
    1e3e:	2904      	cmp	r1, #4
    1e40:	d832      	bhi.n	1ea8 <dispose+0x74>
    1e42:	e8df f001 	tbb	[pc, r1]
    1e46:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1e4a:	7a830019 	bvc	fe0c1eb6 <_estack+0xde0bceb6>
			p->attributes.b.urgent = 1;
    1e4e:	f043 0304 	orr.w	r3, r3, #4
    1e52:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1e54:	8963      	ldrh	r3, [r4, #10]
    1e56:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1e5a:	2b07      	cmp	r3, #7
    1e5c:	d803      	bhi.n	1e66 <dispose+0x32>
    1e5e:	4a13      	ldr	r2, [pc, #76]	; (1eac <dispose+0x78>)
    1e60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1e64:	b918      	cbnz	r0, 1e6e <dispose+0x3a>
    1e66:	4912      	ldr	r1, [pc, #72]	; (1eb0 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1e68:	200a      	movs	r0, #10
    1e6a:	f7fe fecf 	bl	c0c <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1e6e:	4621      	mov	r1, r4
}
    1e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1e74:	f7ff bfb8 	b.w	1de8 <enq>
			p->attributes.b.urgent = 1;
    1e78:	7a83      	ldrb	r3, [r0, #10]
    1e7a:	f043 0304 	orr.w	r3, r3, #4
    1e7e:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1e80:	7ae2      	ldrb	r2, [r4, #11]
    1e82:	2a5f      	cmp	r2, #95	; 0x5f
    1e84:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1e88:	d803      	bhi.n	1e92 <dispose+0x5e>
    1e8a:	4a0a      	ldr	r2, [pc, #40]	; (1eb4 <dispose+0x80>)
    1e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e90:	b90a      	cbnz	r2, 1e96 <dispose+0x62>
    1e92:	4909      	ldr	r1, [pc, #36]	; (1eb8 <dispose+0x84>)
    1e94:	e7e8      	b.n	1e68 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1e96:	4a09      	ldr	r2, [pc, #36]	; (1ebc <dispose+0x88>)
    1e98:	4621      	mov	r1, r4
    1e9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1e9e:	e7e7      	b.n	1e70 <dispose+0x3c>
}
    1ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1ea4:	f7ff bf98 	b.w	1dd8 <rlp>
}
    1ea8:	bd10      	pop	{r4, pc}
    1eaa:	bf00      	nop
    1eac:	200005a0 	andcs	r0, r0, r0, lsr #11
    1eb0:	00005043 	andeq	r5, r0, r3, asr #32
    1eb4:	200005cc 	andcs	r0, r0, ip, asr #11
    1eb8:	0000504f 	andeq	r5, r0, pc, asr #32
    1ebc:	200005c0 	andcs	r0, r0, r0, asr #11

00001ec0 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1ec0:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1ec2:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1ec6:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1eca:	0792      	lsls	r2, r2, #30
    1ecc:	d522      	bpl.n	1f14 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1ece:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1ed2:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1ed6:	2a07      	cmp	r2, #7
    1ed8:	d803      	bhi.n	1ee2 <tcv_endp+0x22>
    1eda:	4911      	ldr	r1, [pc, #68]	; (1f20 <tcv_endp+0x60>)
    1edc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1ee0:	b91a      	cbnz	r2, 1eea <tcv_endp+0x2a>
    1ee2:	4910      	ldr	r1, [pc, #64]	; (1f24 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1ee4:	200a      	movs	r0, #10
    1ee6:	f7fe fe91 	bl	c0c <__pi_syserror>
    1eea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1eee:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d805      	bhi.n	1f02 <tcv_endp+0x42>
    1ef6:	4a0c      	ldr	r2, [pc, #48]	; (1f28 <tcv_endp+0x68>)
    1ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1efc:	b10b      	cbz	r3, 1f02 <tcv_endp+0x42>
    1efe:	691b      	ldr	r3, [r3, #16]
    1f00:	b90b      	cbnz	r3, 1f06 <tcv_endp+0x46>
    1f02:	490a      	ldr	r1, [pc, #40]	; (1f2c <tcv_endp+0x6c>)
    1f04:	e7ee      	b.n	1ee4 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f06:	4798      	blx	r3
    1f08:	4601      	mov	r1, r0
    1f0a:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f10:	f7ff bf90 	b.w	1e34 <dispose>
		rlp (b);
    1f14:	4620      	mov	r0, r4
}
    1f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1f1a:	f7ff bf5d 	b.w	1dd8 <rlp>
    1f1e:	bf00      	nop
    1f20:	200005a0 	andcs	r0, r0, r0, lsr #11
    1f24:	0000505b 	andeq	r5, r0, fp, asr r0
    1f28:	200005e4 	andcs	r0, r0, r4, ror #11
    1f2c:	00005061 	andeq	r5, r0, r1, rrx

00001f30 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f30:	b40c      	push	{r2, r3}
    1f32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1f36:	ab0a      	add	r3, sp, #40	; 0x28
    1f38:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f3c:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f3e:	460f      	mov	r7, r1
	va_start (ap, plid);
    1f40:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f42:	d80b      	bhi.n	1f5c <tcv_open+0x2c>
    1f44:	4b24      	ldr	r3, [pc, #144]	; (1fd8 <tcv_open+0xa8>)
    1f46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1f4a:	b13b      	cbz	r3, 1f5c <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1f4c:	f1b8 0f02 	cmp.w	r8, #2
    1f50:	d804      	bhi.n	1f5c <tcv_open+0x2c>
    1f52:	4b22      	ldr	r3, [pc, #136]	; (1fdc <tcv_open+0xac>)
    1f54:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1f58:	4699      	mov	r9, r3
    1f5a:	b91a      	cbnz	r2, 1f64 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1f5c:	2001      	movs	r0, #1
    1f5e:	4920      	ldr	r1, [pc, #128]	; (1fe0 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1f60:	f7fe fe54 	bl	c0c <__pi_syserror>
	attp.b.outgoing = 1;
    1f64:	f008 0307 	and.w	r3, r8, #7
    1f68:	029b      	lsls	r3, r3, #10
    1f6a:	f043 0302 	orr.w	r3, r3, #2
    1f6e:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f72:	4b1c      	ldr	r3, [pc, #112]	; (1fe4 <tcv_open+0xb4>)
    1f74:	2600      	movs	r6, #0
    1f76:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    1f78:	f853 2b04 	ldr.w	r2, [r3], #4
    1f7c:	b312      	cbz	r2, 1fc4 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f7e:	3601      	adds	r6, #1
    1f80:	2e08      	cmp	r6, #8
    1f82:	d1f9      	bne.n	1f78 <tcv_open+0x48>
		return ERROR;
    1f84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    1f88:	4630      	mov	r0, r6
    1f8a:	b002      	add	sp, #8
    1f8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f90:	b002      	add	sp, #8
    1f92:	4770      	bx	lr
	s->attpattern.b.session = fd;
    1f94:	462b      	mov	r3, r5
    1f96:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    1f9a:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    1f9e:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    1fa0:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1fa4:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	b913      	cbnz	r3, 1fb2 <tcv_open+0x82>
    1fac:	200a      	movs	r0, #10
    1fae:	490e      	ldr	r1, [pc, #56]	; (1fe8 <tcv_open+0xb8>)
    1fb0:	e7d6      	b.n	1f60 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1fb2:	4631      	mov	r1, r6
    1fb4:	4638      	mov	r0, r7
    1fb6:	9a01      	ldr	r2, [sp, #4]
    1fb8:	4798      	blx	r3
    1fba:	2800      	cmp	r0, #0
    1fbc:	d1e2      	bne.n	1f84 <tcv_open+0x54>
	descriptors [fd] = s;
    1fbe:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    1fc2:	e7e1      	b.n	1f88 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1fc4:	200c      	movs	r0, #12
    1fc6:	f7ff fdc5 	bl	1b54 <__pi_malloc>
	if (s == NULL)
    1fca:	4604      	mov	r4, r0
    1fcc:	2800      	cmp	r0, #0
    1fce:	d1e1      	bne.n	1f94 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    1fd0:	2006      	movs	r0, #6
    1fd2:	4906      	ldr	r1, [pc, #24]	; (1fec <tcv_open+0xbc>)
    1fd4:	e7c4      	b.n	1f60 <tcv_open+0x30>
    1fd6:	bf00      	nop
    1fd8:	200005c0 	andcs	r0, r0, r0, asr #11
    1fdc:	200005e4 	andcs	r0, r0, r4, ror #11
    1fe0:	00005067 	andeq	r5, r0, r7, rrx
    1fe4:	200005a0 	andcs	r0, r0, r0, lsr #11
    1fe8:	00005073 	andeq	r5, r0, r3, ror r0
    1fec:	0000506d 	andeq	r5, r0, sp, rrx

00001ff0 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ff0:	2802      	cmp	r0, #2
    1ff2:	d809      	bhi.n	2008 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ff4:	4b06      	ldr	r3, [pc, #24]	; (2010 <tcv_plug+0x20>)
    1ff6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ffa:	b10a      	cbz	r2, 2000 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ffc:	428a      	cmp	r2, r1
    1ffe:	d103      	bne.n	2008 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    2000:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    2004:	2000      	movs	r0, #0
    2006:	4770      	bx	lr
		return ERROR;
    2008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    200c:	4770      	bx	lr
    200e:	bf00      	nop
    2010:	200005e4 	andcs	r0, r0, r4, ror #11

00002014 <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    2014:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2016:	b538      	push	{r3, r4, r5, lr}
    2018:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    201a:	d803      	bhi.n	2024 <tcv_rnp+0x10>
    201c:	4a19      	ldr	r2, [pc, #100]	; (2084 <tcv_rnp+0x70>)
    201e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    2022:	b918      	cbnz	r0, 202c <tcv_rnp+0x18>
    2024:	4918      	ldr	r1, [pc, #96]	; (2088 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    2026:	200a      	movs	r0, #10
    2028:	f7fe fdf0 	bl	c0c <__pi_syserror>
	b = q_first (rq);
    202c:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    202e:	42a0      	cmp	r0, r4
    2030:	d108      	bne.n	2044 <tcv_rnp+0x30>
		if (state != WNONE) {
    2032:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2036:	4293      	cmp	r3, r2
    2038:	d021      	beq.n	207e <tcv_rnp+0x6a>
			when (rq, state);
    203a:	4619      	mov	r1, r3
    203c:	f7ff fc14 	bl	1868 <__pi_wait>
			release;
    2040:	f7ff f9a2 	bl	1388 <__pi_release>
	deq (b);	// Dequeue the packet ...
    2044:	4620      	mov	r0, r4
    2046:	f7ff feba 	bl	1dbe <deq>
	verify_plg (b, tcv_frm, "tcv11");
    204a:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    204c:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    2050:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2054:	2b02      	cmp	r3, #2
    2056:	d805      	bhi.n	2064 <tcv_rnp+0x50>
    2058:	4a0c      	ldr	r2, [pc, #48]	; (208c <tcv_rnp+0x78>)
    205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    205e:	b10b      	cbz	r3, 2064 <tcv_rnp+0x50>
    2060:	68db      	ldr	r3, [r3, #12]
    2062:	b90b      	cbnz	r3, 2068 <tcv_rnp+0x54>
    2064:	490a      	ldr	r1, [pc, #40]	; (2090 <tcv_rnp+0x7c>)
    2066:	e7de      	b.n	2026 <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2068:	4621      	mov	r1, r4
    206a:	4628      	mov	r0, r5
    206c:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    206e:	8823      	ldrh	r3, [r4, #0]
    2070:	8862      	ldrh	r2, [r4, #2]
    2072:	441a      	add	r2, r3
    2074:	8923      	ldrh	r3, [r4, #8]
    2076:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    2078:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    207a:	4628      	mov	r0, r5
    207c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    207e:	2500      	movs	r5, #0
    2080:	e7fb      	b.n	207a <tcv_rnp+0x66>
    2082:	bf00      	nop
    2084:	200005a0 	andcs	r0, r0, r0, lsr #11
    2088:	00005079 	andeq	r5, r0, r9, ror r0
    208c:	200005e4 	andcs	r0, r0, r4, ror #11
    2090:	0000507f 	andeq	r5, r0, pc, ror r0

00002094 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    2094:	2908      	cmp	r1, #8
								Boolean urg) {
    2096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2098:	4605      	mov	r5, r0
    209a:	4614      	mov	r4, r2
    209c:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    209e:	d803      	bhi.n	20a8 <tcv_wnps+0x14>
    20a0:	4b26      	ldr	r3, [pc, #152]	; (213c <tcv_wnps+0xa8>)
    20a2:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    20a6:	b91f      	cbnz	r7, 20b0 <tcv_wnps+0x1c>
    20a8:	4925      	ldr	r1, [pc, #148]	; (2140 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    20aa:	200a      	movs	r0, #10
    20ac:	f7fe fdae 	bl	c0c <__pi_syserror>
    20b0:	7a7b      	ldrb	r3, [r7, #9]
    20b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    20b6:	2b02      	cmp	r3, #2
    20b8:	d805      	bhi.n	20c6 <tcv_wnps+0x32>
    20ba:	4a22      	ldr	r2, [pc, #136]	; (2144 <tcv_wnps+0xb0>)
    20bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    20c0:	b10b      	cbz	r3, 20c6 <tcv_wnps+0x32>
    20c2:	68db      	ldr	r3, [r3, #12]
    20c4:	b90b      	cbnz	r3, 20ca <tcv_wnps+0x36>
    20c6:	4920      	ldr	r1, [pc, #128]	; (2148 <tcv_wnps+0xb4>)
    20c8:	e7ef      	b.n	20aa <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    20ca:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20ce:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    20d0:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20d4:	a901      	add	r1, sp, #4
    20d6:	4798      	blx	r3
    20d8:	b158      	cbz	r0, 20f2 <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    20da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    20de:	429d      	cmp	r5, r3
    20e0:	d102      	bne.n	20e8 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    20e2:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    20e4:	b003      	add	sp, #12
    20e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    20e8:	4629      	mov	r1, r5
    20ea:	f7ff fbbd 	bl	1868 <__pi_wait>
			release;
    20ee:	f7ff f94b 	bl	1388 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    20f2:	7a3b      	ldrb	r3, [r7, #8]
    20f4:	07db      	lsls	r3, r3, #31
    20f6:	d501      	bpl.n	20fc <tcv_wnps+0x68>
    20f8:	4914      	ldr	r1, [pc, #80]	; (214c <tcv_wnps+0xb8>)
    20fa:	e7d6      	b.n	20aa <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20fc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2100:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2104:	b2a4      	uxth	r4, r4
    2106:	4418      	add	r0, r3
    2108:	4420      	add	r0, r4
    210a:	b280      	uxth	r0, r0
    210c:	f7ff fe4c 	bl	1da8 <apb>
    2110:	b938      	cbnz	r0, 2122 <tcv_wnps+0x8e>
		if (state != WNONE) {
    2112:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2116:	429d      	cmp	r5, r3
    2118:	d0e3      	beq.n	20e2 <tcv_wnps+0x4e>
			tmwait (state);
    211a:	4628      	mov	r0, r5
    211c:	f7ff fd88 	bl	1c30 <__pi_waitmem>
    2120:	e7e5      	b.n	20ee <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    2122:	893b      	ldrh	r3, [r7, #8]
    2124:	8143      	strh	r3, [r0, #10]
	if (urg)
    2126:	b11e      	cbz	r6, 2130 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    2128:	7a83      	ldrb	r3, [r0, #10]
    212a:	f043 0304 	orr.w	r3, r3, #4
    212e:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    2130:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    2134:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    2136:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    2138:	300c      	adds	r0, #12
    213a:	e7d3      	b.n	20e4 <tcv_wnps+0x50>
    213c:	200005a0 	andcs	r0, r0, r0, lsr #11
    2140:	00005085 	andeq	r5, r0, r5, lsl #1
    2144:	200005e4 	andcs	r0, r0, r4, ror #11
    2148:	0000508b 	andeq	r5, r0, fp, lsl #1
    214c:	00005091 	muleq	r0, r1, r0

00002150 <tcv_read>:

__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2150:	b538      	push	{r3, r4, r5, lr}
    2152:	4604      	mov	r4, r0
/*
 * Extracts (up to) len bytes from the packet
 */
	hblock_t *b = header (p);

	if (len >= b->u.pointers.tail)
    2154:	f834 5c0a 	ldrh.w	r5, [r4, #-10]
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2158:	4608      	mov	r0, r1
    215a:	4295      	cmp	r5, r2
    215c:	bfa8      	it	ge
    215e:	4615      	movge	r5, r2
		len = b->u.pointers.tail;

	if (len > 0) {
    2160:	2d00      	cmp	r5, #0
    2162:	dd10      	ble.n	2186 <tcv_read+0x36>
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2164:	f834 1c0c 	ldrh.w	r1, [r4, #-12]
    2168:	462a      	mov	r2, r5
    216a:	4421      	add	r1, r4
    216c:	f7ff fc0d 	bl	198a <__pi_memcpy>
		b->u.pointers.tail -= len;
    2170:	f834 2c0a 	ldrh.w	r2, [r4, #-10]
    2174:	b2ab      	uxth	r3, r5
    2176:	1ad2      	subs	r2, r2, r3
    2178:	f824 2c0a 	strh.w	r2, [r4, #-10]
		b->u.pointers.head += len;
    217c:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    2180:	4413      	add	r3, r2
    2182:	f824 3c0c 	strh.w	r3, [r4, #-12]
	}

	return len;
}
    2186:	4628      	mov	r0, r5
    2188:	bd38      	pop	{r3, r4, r5, pc}
	...

0000218c <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    218c:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    218e:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2190:	4608      	mov	r0, r1
    2192:	b510      	push	{r4, lr}
    2194:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    2196:	d803      	bhi.n	21a0 <tcvp_control+0x14>
    2198:	4a05      	ldr	r2, [pc, #20]	; (21b0 <tcvp_control+0x24>)
    219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    219e:	b91b      	cbnz	r3, 21a8 <tcvp_control+0x1c>
    21a0:	200a      	movs	r0, #10
    21a2:	4904      	ldr	r1, [pc, #16]	; (21b4 <tcvp_control+0x28>)
    21a4:	f7fe fd32 	bl	c0c <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    21a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    21ac:	4718      	bx	r3
    21ae:	bf00      	nop
    21b0:	200005cc 	andcs	r0, r0, ip, asr #11
    21b4:	00005097 	muleq	r0, r7, r0

000021b8 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    21b8:	b508      	push	{r3, lr}
	if (opt < 0) {
    21ba:	1e0b      	subs	r3, r1, #0
    21bc:	da11      	bge.n	21e2 <tcv_control+0x2a>
		if (fd < 0)
    21be:	2800      	cmp	r0, #0
    21c0:	db1f      	blt.n	2202 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    21c2:	3301      	adds	r3, #1
    21c4:	d107      	bne.n	21d6 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    21c6:	2802      	cmp	r0, #2
    21c8:	dc1b      	bgt.n	2202 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    21ca:	4b0f      	ldr	r3, [pc, #60]	; (2208 <tcv_control+0x50>)
    21cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    21d0:	b100      	cbz	r0, 21d4 <tcv_control+0x1c>
			return p->tcv_info;
    21d2:	69c0      	ldr	r0, [r0, #28]
}
    21d4:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    21d6:	2802      	cmp	r0, #2
    21d8:	dc13      	bgt.n	2202 <tcv_control+0x4a>
		return physinfo [fd];
    21da:	4b0c      	ldr	r3, [pc, #48]	; (220c <tcv_control+0x54>)
    21dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    21e0:	e7f8      	b.n	21d4 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    21e2:	2808      	cmp	r0, #8
    21e4:	d803      	bhi.n	21ee <tcv_control+0x36>
    21e6:	4b0a      	ldr	r3, [pc, #40]	; (2210 <tcv_control+0x58>)
    21e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    21ec:	b91b      	cbnz	r3, 21f6 <tcv_control+0x3e>
    21ee:	200a      	movs	r0, #10
    21f0:	4908      	ldr	r1, [pc, #32]	; (2214 <tcv_control+0x5c>)
    21f2:	f7fe fd0b 	bl	c0c <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21f6:	7a58      	ldrb	r0, [r3, #9]
}
    21f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21fc:	0940      	lsrs	r0, r0, #5
    21fe:	f7ff bfc5 	b.w	218c <tcvp_control>
			return 0;
    2202:	2000      	movs	r0, #0
    2204:	e7e6      	b.n	21d4 <tcv_control+0x1c>
    2206:	bf00      	nop
    2208:	200005e4 	andcs	r0, r0, r4, ror #11
    220c:	200005d8 	ldrdcs	r0, [r0], -r8
    2210:	200005a0 	andcs	r0, r0, r0, lsr #11
    2214:	0000509d 	muleq	r0, sp, r0

00002218 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    221a:	b280      	uxth	r0, r0
    221c:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    221e:	460e      	mov	r6, r1
    2220:	b309      	cbz	r1, 2266 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    2222:	1c53      	adds	r3, r2, #1
    2224:	d103      	bne.n	222e <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    2226:	2003      	movs	r0, #3
    2228:	4912      	ldr	r1, [pc, #72]	; (2274 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    222a:	f7fe fcef 	bl	c0c <__pi_syserror>
    222e:	2a08      	cmp	r2, #8
    2230:	d803      	bhi.n	223a <tcvp_new+0x22>
    2232:	4f11      	ldr	r7, [pc, #68]	; (2278 <tcvp_new+0x60>)
    2234:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    2238:	b913      	cbnz	r3, 2240 <tcvp_new+0x28>
    223a:	200a      	movs	r0, #10
    223c:	490f      	ldr	r1, [pc, #60]	; (227c <tcvp_new+0x64>)
    223e:	e7f4      	b.n	222a <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    2240:	f7ff fdb2 	bl	1da8 <apb>
    2244:	4604      	mov	r4, r0
    2246:	b908      	cbnz	r0, 224c <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    2248:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    224c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    2250:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    2252:	891b      	ldrh	r3, [r3, #8]
    2254:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    2256:	f36f 0341 	bfc	r3, #1, #1
    225a:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    225c:	f7ff fdea 	bl	1e34 <dispose>
			return (address)(p + 1);
    2260:	f104 000c 	add.w	r0, r4, #12
    2264:	e7f1      	b.n	224a <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    2266:	f7ff fd9f 	bl	1da8 <apb>
    226a:	2800      	cmp	r0, #0
    226c:	d0ec      	beq.n	2248 <tcvp_new+0x30>
		return (address)(p + 1);
    226e:	300c      	adds	r0, #12
    2270:	e7eb      	b.n	224a <tcvp_new+0x32>
    2272:	bf00      	nop
    2274:	000050a3 	andeq	r5, r0, r3, lsr #1
    2278:	200005a0 	andcs	r0, r0, r0, lsr #11
    227c:	000050a9 	andeq	r5, r0, r9, lsr #1

00002280 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2280:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2282:	b510      	push	{r4, lr}
    2284:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2286:	d803      	bhi.n	2290 <tcvphy_reg+0x10>
    2288:	4b0c      	ldr	r3, [pc, #48]	; (22bc <tcvphy_reg+0x3c>)
    228a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    228e:	b118      	cbz	r0, 2298 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    2290:	2003      	movs	r0, #3
    2292:	490b      	ldr	r1, [pc, #44]	; (22c0 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    2294:	f7fe fcba 	bl	c0c <__pi_syserror>
	physical [phy] = ps;
    2298:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    229c:	4b09      	ldr	r3, [pc, #36]	; (22c4 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    229e:	2008      	movs	r0, #8
	physinfo [phy] = info;
    22a0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22a4:	f7ff fc56 	bl	1b54 <__pi_malloc>
    22a8:	4a07      	ldr	r2, [pc, #28]	; (22c8 <tcvphy_reg+0x48>)
    22aa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    22ae:	b910      	cbnz	r0, 22b6 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    22b0:	2006      	movs	r0, #6
    22b2:	4906      	ldr	r1, [pc, #24]	; (22cc <tcvphy_reg+0x4c>)
    22b4:	e7ee      	b.n	2294 <tcvphy_reg+0x14>
	q_init (q);
    22b6:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    22ba:	bd10      	pop	{r4, pc}
    22bc:	200005cc 	andcs	r0, r0, ip, asr #11
    22c0:	000050af 	andeq	r5, r0, pc, lsr #1
    22c4:	200005d8 	ldrdcs	r0, [r0], -r8
    22c8:	200005c0 	andcs	r0, r0, r0, asr #11
    22cc:	000050b5 	strheq	r5, [r0], -r5	; <UNPREDICTABLE>

000022d0 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    22d4:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d6:	4605      	mov	r5, r0
    22d8:	460f      	mov	r7, r1
    22da:	4614      	mov	r4, r2
    22dc:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    22de:	d803      	bhi.n	22e8 <tcvphy_rcv+0x18>
    22e0:	4b1e      	ldr	r3, [pc, #120]	; (235c <tcvphy_rcv+0x8c>)
    22e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    22e6:	b91b      	cbnz	r3, 22f0 <tcvphy_rcv+0x20>
    22e8:	491d      	ldr	r1, [pc, #116]	; (2360 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22ea:	200a      	movs	r0, #10
    22ec:	f7fe fc8e 	bl	c0c <__pi_syserror>
    22f0:	4e1c      	ldr	r6, [pc, #112]	; (2364 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22f2:	f10d 080c 	add.w	r8, sp, #12
    22f6:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    22fa:	6833      	ldr	r3, [r6, #0]
    22fc:	46b1      	mov	r9, r6
    22fe:	3e04      	subs	r6, #4
    2300:	b92b      	cbnz	r3, 230e <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2302:	45ca      	cmp	sl, r9
    2304:	d1f9      	bne.n	22fa <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    2306:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    2308:	b005      	add	sp, #20
    230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    230e:	f8d3 b008 	ldr.w	fp, [r3, #8]
    2312:	f1bb 0f00 	cmp.w	fp, #0
    2316:	d101      	bne.n	231c <tcvphy_rcv+0x4c>
    2318:	4913      	ldr	r1, [pc, #76]	; (2368 <tcvphy_rcv+0x98>)
    231a:	e7e6      	b.n	22ea <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    231c:	4639      	mov	r1, r7
    231e:	4622      	mov	r2, r4
    2320:	4628      	mov	r0, r5
    2322:	f8cd 8000 	str.w	r8, [sp]
    2326:	ab02      	add	r3, sp, #8
    2328:	47d8      	blx	fp
    232a:	4601      	mov	r1, r0
    232c:	2800      	cmp	r0, #0
    232e:	d0e8      	beq.n	2302 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2330:	2801      	cmp	r0, #1
    2332:	d0e8      	beq.n	2306 <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    2334:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    2338:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    233c:	441a      	add	r2, r3
    233e:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2340:	4620      	mov	r0, r4
    2342:	9a02      	ldr	r2, [sp, #8]
    2344:	f7ff ff68 	bl	2218 <tcvp_new>
    2348:	2800      	cmp	r0, #0
    234a:	d0dc      	beq.n	2306 <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    234c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    2350:	4622      	mov	r2, r4
    2352:	4439      	add	r1, r7
    2354:	f7ff fb19 	bl	198a <__pi_memcpy>
	return 1;
    2358:	2001      	movs	r0, #1
    235a:	e7d5      	b.n	2308 <tcvphy_rcv+0x38>
    235c:	200005cc 	andcs	r0, r0, ip, asr #11
    2360:	000050bb 	strheq	r5, [r0], -fp
    2364:	200005ec 	andcs	r0, r0, ip, ror #11
    2368:	000050c1 	andeq	r5, r0, r1, asr #1

0000236c <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    236c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    236e:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    2370:	d803      	bhi.n	237a <tcvphy_get+0xe>
    2372:	4b0b      	ldr	r3, [pc, #44]	; (23a0 <tcvphy_get+0x34>)
    2374:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2378:	b91b      	cbnz	r3, 2382 <tcvphy_get+0x16>
    237a:	200a      	movs	r0, #10
    237c:	4909      	ldr	r1, [pc, #36]	; (23a4 <tcvphy_get+0x38>)
    237e:	f7fe fc45 	bl	c0c <__pi_syserror>

	oq = oqueues [phy];
    2382:	4b09      	ldr	r3, [pc, #36]	; (23a8 <tcvphy_get+0x3c>)
    2384:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    2388:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    238a:	4283      	cmp	r3, r0
    238c:	d005      	beq.n	239a <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    238e:	8903      	ldrh	r3, [r0, #8]
    2390:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    2392:	f7ff fd14 	bl	1dbe <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    2396:	300c      	adds	r0, #12
}
    2398:	bd08      	pop	{r3, pc}
		return NULL;
    239a:	2000      	movs	r0, #0
    239c:	e7fc      	b.n	2398 <tcvphy_get+0x2c>
    239e:	bf00      	nop
    23a0:	200005cc 	andcs	r0, r0, ip, asr #11
    23a4:	000050c7 	andeq	r5, r0, r7, asr #1
    23a8:	200005c0 	andcs	r0, r0, r0, asr #11

000023ac <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    23ac:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    23ae:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    23b0:	d803      	bhi.n	23ba <tcvphy_top+0xe>
    23b2:	4b08      	ldr	r3, [pc, #32]	; (23d4 <tcvphy_top+0x28>)
    23b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    23b8:	b91b      	cbnz	r3, 23c2 <tcvphy_top+0x16>
    23ba:	200a      	movs	r0, #10
    23bc:	4906      	ldr	r1, [pc, #24]	; (23d8 <tcvphy_top+0x2c>)
    23be:	f7fe fc25 	bl	c0c <__pi_syserror>

	oq = oqueues [phy];
    23c2:	4b06      	ldr	r3, [pc, #24]	; (23dc <tcvphy_top+0x30>)
    23c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    23c8:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    23ca:	4283      	cmp	r3, r0
		return NULL;
    23cc:	bf0c      	ite	eq
    23ce:	2000      	moveq	r0, #0

	return (address)(b + 1);
    23d0:	300c      	addne	r0, #12
}
    23d2:	bd08      	pop	{r3, pc}
    23d4:	200005cc 	andcs	r0, r0, ip, asr #11
    23d8:	000050cd 	andeq	r5, r0, sp, asr #1
    23dc:	200005c0 	andcs	r0, r0, r0, asr #11

000023e0 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    23e0:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    23e2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    23e6:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    23ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    23ee:	2b02      	cmp	r3, #2
    23f0:	d805      	bhi.n	23fe <tcvphy_end+0x1e>
    23f2:	4a08      	ldr	r2, [pc, #32]	; (2414 <tcvphy_end+0x34>)
    23f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23f8:	b10b      	cbz	r3, 23fe <tcvphy_end+0x1e>
    23fa:	695b      	ldr	r3, [r3, #20]
    23fc:	b91b      	cbnz	r3, 2406 <tcvphy_end+0x26>
    23fe:	200a      	movs	r0, #10
    2400:	4905      	ldr	r1, [pc, #20]	; (2418 <tcvphy_end+0x38>)
    2402:	f7fe fc03 	bl	c0c <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    2406:	4798      	blx	r3
    2408:	4601      	mov	r1, r0
    240a:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    240c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    2410:	f7ff bd10 	b.w	1e34 <dispose>
    2414:	200005e4 	andcs	r0, r0, r4, ror #11
    2418:	000050d3 	ldrdeq	r5, [r0], -r3

0000241c <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    241c:	4770      	bx	lr

0000241e <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    241e:	e7fe      	b.n	241e <NmiSR>

00002420 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    2420:	e7fe      	b.n	2420 <FaultISR>

00002422 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    2422:	e7fe      	b.n	2422 <AONIntHandler>

00002424 <ResetISR>:
{
    2424:	b508      	push	{r3, lr}
    SetupTrimDevice();
    2426:	f001 fd15 	bl	3e54 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    242a:	4b0c      	ldr	r3, [pc, #48]	; (245c <zero_loop+0x20>)
    pui32Src = &_etext;
    242c:	4a0c      	ldr	r2, [pc, #48]	; (2460 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    242e:	490d      	ldr	r1, [pc, #52]	; (2464 <zero_loop+0x28>)
    2430:	428b      	cmp	r3, r1
    2432:	d30d      	bcc.n	2450 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    2434:	480c      	ldr	r0, [pc, #48]	; (2468 <zero_loop+0x2c>)
    2436:	490d      	ldr	r1, [pc, #52]	; (246c <zero_loop+0x30>)
    2438:	f04f 0200 	mov.w	r2, #0

0000243c <zero_loop>:
    243c:	4288      	cmp	r0, r1
    243e:	bfb8      	it	lt
    2440:	f840 2b04 	strlt.w	r2, [r0], #4
    2444:	dbfa      	blt.n	243c <zero_loop>
   main();
    2446:	f7ff f8e3 	bl	1610 <main>
    FaultISR();
    244a:	f7ff ffe9 	bl	2420 <FaultISR>
}
    244e:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    2450:	f852 0b04 	ldr.w	r0, [r2], #4
    2454:	f843 0b04 	str.w	r0, [r3], #4
    2458:	e7ea      	b.n	2430 <ResetISR+0xc>
    245a:	bf00      	nop
    245c:	20000000 	andcs	r0, r0, r0
    2460:	00005adc 	ldrdeq	r5, [r0], -ip
    2464:	20000540 	andcs	r0, r0, r0, asr #10
    2468:	20000540 	andcs	r0, r0, r0, asr #10
    246c:	200006d8 	ldrdcs	r0, [r0], -r8

00002470 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    2470:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    2472:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2474:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    2478:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    247a:	4907      	ldr	r1, [pc, #28]	; (2498 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    247c:	4d07      	ldr	r5, [pc, #28]	; (249c <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    247e:	4c08      	ldr	r4, [pc, #32]	; (24a0 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2480:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    2482:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    2484:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    2486:	b2c0      	uxtb	r0, r0
			b |= 1;
    2488:	bf48      	it	mi
    248a:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    248e:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2490:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2492:	600a      	str	r2, [r1, #0]
    2494:	d1f4      	bne.n	2480 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    2496:	bd70      	pop	{r4, r5, r6, pc}
    2498:	400220a0 	andmi	r2, r2, r0, lsr #1
    249c:	400220c0 	andmi	r2, r2, r0, asr #1
    24a0:	40022090 	mulmi	r2, r0, r0

000024a4 <put_byte>:

static void put_byte (byte b) {
    24a4:	b530      	push	{r4, r5, lr}
    24a6:	2308      	movs	r3, #8
    24a8:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    24b0:	4c06      	ldr	r4, [pc, #24]	; (24cc <put_byte+0x28>)
    24b2:	4a07      	ldr	r2, [pc, #28]	; (24d0 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    24b4:	f010 0f80 	tst.w	r0, #128	; 0x80
    24b8:	bf14      	ite	ne
    24ba:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24bc:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    24be:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    24c0:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24c2:	6021      	str	r1, [r4, #0]
		b <<= 1;
    24c4:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24c6:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    24c8:	d1f4      	bne.n	24b4 <put_byte+0x10>
	}
}
    24ca:	bd30      	pop	{r4, r5, pc}
    24cc:	40022090 	mulmi	r2, r0, r0
    24d0:	400220a0 	andmi	r2, r2, r0, lsr #1

000024d4 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    24d4:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    24d6:	b510      	push	{r4, lr}
    24d8:	4c03      	ldr	r4, [pc, #12]	; (24e8 <cmd_0+0x14>)
    24da:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    24dc:	f7ff ffe2 	bl	24a4 <put_byte>
    24e0:	2300      	movs	r3, #0
    24e2:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    24e4:	bd10      	pop	{r4, pc}
    24e6:	bf00      	nop
    24e8:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000024ec <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    24ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24f0:	4604      	mov	r4, r0
    24f2:	460d      	mov	r5, r1
    24f4:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    24f6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 253c <wwait+0x50>
    24fa:	4e0f      	ldr	r6, [pc, #60]	; (2538 <wwait+0x4c>)
    24fc:	f898 3000 	ldrb.w	r3, [r8]
    2500:	b14b      	cbz	r3, 2516 <wwait+0x2a>
	put_byte (CMD_RDSR);
    2502:	2005      	movs	r0, #5
    2504:	6037      	str	r7, [r6, #0]
    2506:	f7ff ffcd 	bl	24a4 <put_byte>
	r = get_byte ();
    250a:	f7ff ffb1 	bl	2470 <get_byte>
    250e:	2300      	movs	r3, #0
    2510:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    2512:	07c3      	lsls	r3, r0, #31
    2514:	d401      	bmi.n	251a <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    2516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    251e:	429c      	cmp	r4, r3
    2520:	d103      	bne.n	252a <wwait+0x3e>
			mdelay (1);
    2522:	2001      	movs	r0, #1
    2524:	f7fe fb1e 	bl	b64 <mdelay>
    2528:	e7e8      	b.n	24fc <wwait+0x10>
			delay (del, st);
    252a:	4621      	mov	r1, r4
    252c:	4628      	mov	r0, r5
    252e:	f7ff f9e1 	bl	18f4 <delay>
			release;
    2532:	f7fe ff29 	bl	1388 <__pi_release>
    2536:	bf00      	nop
    2538:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    253c:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

00002540 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    2540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    2542:	4d0c      	ldr	r5, [pc, #48]	; (2574 <ready+0x34>)
    2544:	782f      	ldrb	r7, [r5, #0]
    2546:	b147      	cbz	r7, 255a <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    2548:	2101      	movs	r1, #1
    254a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    254e:	f7ff ffcd 	bl	24ec <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    2552:	2200      	movs	r2, #0
    2554:	4b08      	ldr	r3, [pc, #32]	; (2578 <ready+0x38>)
    2556:	701a      	strb	r2, [r3, #0]
}
    2558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    255a:	2401      	movs	r4, #1
    255c:	4e07      	ldr	r6, [pc, #28]	; (257c <ready+0x3c>)
	udelay (1);
    255e:	4620      	mov	r0, r4
    2560:	6034      	str	r4, [r6, #0]
    2562:	f7fe fae9 	bl	b38 <udelay>
	udelay (1);
    2566:	4620      	mov	r0, r4
    2568:	6037      	str	r7, [r6, #0]
    256a:	f7fe fae5 	bl	b38 <udelay>
		dopen = DOPEN_TEMP;
    256e:	2302      	movs	r3, #2
    2570:	702b      	strb	r3, [r5, #0]
    2572:	e7ee      	b.n	2552 <ready+0x12>
    2574:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2578:	200005f1 	strdcs	r0, [r0], -r1
    257c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002580 <cclose>:
static void cclose () {
    2580:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    2582:	4c07      	ldr	r4, [pc, #28]	; (25a0 <cclose+0x20>)
    2584:	7823      	ldrb	r3, [r4, #0]
    2586:	2b02      	cmp	r3, #2
    2588:	d109      	bne.n	259e <cclose+0x1e>
		wwait (WNONE, 1);
    258a:	2101      	movs	r1, #1
    258c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2590:	f7ff ffac 	bl	24ec <wwait>
	cmd_0 (CMD_DP);
    2594:	20b9      	movs	r0, #185	; 0xb9
    2596:	f7ff ff9d 	bl	24d4 <cmd_0>
		dopen = 0;
    259a:	2300      	movs	r3, #0
    259c:	7023      	strb	r3, [r4, #0]
}
    259e:	bd10      	pop	{r4, pc}
    25a0:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

000025a4 <ee_open>:

// ============================================================================

word ee_open () {
    25a4:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    25a6:	f7ff ffcb 	bl	2540 <ready>
	dopen = DOPEN_PERM;
    25aa:	2201      	movs	r2, #1
    25ac:	4b01      	ldr	r3, [pc, #4]	; (25b4 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    25ae:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    25b0:	701a      	strb	r2, [r3, #0]
}
    25b2:	bd08      	pop	{r3, pc}
    25b4:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

000025b8 <ee_close>:

void ee_close () {

	if (dopen) {
    25b8:	4b03      	ldr	r3, [pc, #12]	; (25c8 <ee_close+0x10>)
    25ba:	781a      	ldrb	r2, [r3, #0]
    25bc:	b11a      	cbz	r2, 25c6 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    25be:	2202      	movs	r2, #2
    25c0:	701a      	strb	r2, [r3, #0]
		cclose ();
    25c2:	f7ff bfdd 	b.w	2580 <cclose>
	}
}
    25c6:	4770      	bx	lr
    25c8:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

000025cc <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    25cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ce:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    25d0:	4818      	ldr	r0, [pc, #96]	; (2634 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    25d2:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    25d4:	f7ff f9aa 	bl	192c <running>
    25d8:	b120      	cbz	r0, 25e4 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    25da:	4631      	mov	r1, r6
    25dc:	f7ff f978 	bl	18d0 <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    25e0:	f7fe fed2 	bl	1388 <__pi_release>
	if (*m)
    25e4:	7823      	ldrb	r3, [r4, #0]
    25e6:	b163      	cbz	r3, 2602 <ser_out+0x36>
		prcs = strlen (m) +1;
    25e8:	4620      	mov	r0, r4
    25ea:	f7ff f9b1 	bl	1950 <__pi_strlen>
    25ee:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    25f0:	b2a8      	uxth	r0, r5
    25f2:	f7ff faaf 	bl	1b54 <__pi_malloc>
    25f6:	4607      	mov	r7, r0
    25f8:	b930      	cbnz	r0, 2608 <ser_out+0x3c>
		umwait (st);
    25fa:	4630      	mov	r0, r6
    25fc:	f7ff fb18 	bl	1c30 <__pi_waitmem>
    2600:	e7ee      	b.n	25e0 <ser_out+0x14>
		prcs =  m [1] + 3;
    2602:	7865      	ldrb	r5, [r4, #1]
    2604:	3503      	adds	r5, #3
    2606:	e7f3      	b.n	25f0 <ser_out+0x24>
	}

	if (*m)
    2608:	7823      	ldrb	r3, [r4, #0]
    260a:	b15b      	cbz	r3, 2624 <ser_out+0x58>
		strcpy (buf, m);
    260c:	4621      	mov	r1, r4
    260e:	f7ff f9a6 	bl	195e <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    2612:	4639      	mov	r1, r7
    2614:	4807      	ldr	r0, [pc, #28]	; (2634 <ser_out+0x68>)
    2616:	f7ff faf1 	bl	1bfc <__pi_fork>
    261a:	b940      	cbnz	r0, 262e <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    261c:	4638      	mov	r0, r7
    261e:	f7ff fa4d 	bl	1abc <__pi_free>
		// and wait for a process slot
		npwait (st);
    2622:	e7ea      	b.n	25fa <ser_out+0x2e>
		memcpy (buf, m, prcs);
    2624:	462a      	mov	r2, r5
    2626:	4621      	mov	r1, r4
    2628:	f7ff f9af 	bl	198a <__pi_memcpy>
    262c:	e7f1      	b.n	2612 <ser_out+0x46>
		release;
	}

	return 0;
}
    262e:	2000      	movs	r0, #0
    2630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2632:	bf00      	nop
    2634:	000030d9 	ldrdeq	r3, [r0], -r9

00002638 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    2638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263a:	4604      	mov	r4, r0
    263c:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    263e:	4615      	mov	r5, r2
    2640:	b37a      	cbz	r2, 26a2 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    2642:	4e19      	ldr	r6, [pc, #100]	; (26a8 <ser_in+0x70>)
    2644:	6830      	ldr	r0, [r6, #0]
    2646:	b988      	cbnz	r0, 266c <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2648:	4818      	ldr	r0, [pc, #96]	; (26ac <ser_in+0x74>)
    264a:	f7ff f96f 	bl	192c <running>
    264e:	b948      	cbnz	r0, 2664 <ser_in+0x2c>
			prcs = runthread (__inserial);
    2650:	4601      	mov	r1, r0
    2652:	4816      	ldr	r0, [pc, #88]	; (26ac <ser_in+0x74>)
    2654:	f7ff fad2 	bl	1bfc <__pi_fork>
			if (prcs == 0) {
    2658:	b920      	cbnz	r0, 2664 <ser_in+0x2c>
				npwait (st);
    265a:	4620      	mov	r0, r4
    265c:	f7ff fae8 	bl	1c30 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    2660:	f7fe fe92 	bl	1388 <__pi_release>
		join (prcs, st);
    2664:	4621      	mov	r1, r4
    2666:	f7ff f933 	bl	18d0 <__pi_join>
    266a:	e7f9      	b.n	2660 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    266c:	7803      	ldrb	r3, [r0, #0]
    266e:	b9a3      	cbnz	r3, 269a <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2670:	7844      	ldrb	r4, [r0, #1]
    2672:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    2674:	42ac      	cmp	r4, r5
		prcs = len-1;
    2676:	bfa8      	it	ge
    2678:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    267c:	4622      	mov	r2, r4
    267e:	4638      	mov	r0, r7
    2680:	6831      	ldr	r1, [r6, #0]
    2682:	f7ff f982 	bl	198a <__pi_memcpy>
	ufree (__inpline);
    2686:	6830      	ldr	r0, [r6, #0]
    2688:	f7ff fa18 	bl	1abc <__pi_free>
	__inpline = NULL;
    268c:	2300      	movs	r3, #0
    268e:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    2690:	783a      	ldrb	r2, [r7, #0]
    2692:	b102      	cbz	r2, 2696 <ser_in+0x5e>
		buf [prcs] = '\0';
    2694:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    2696:	4620      	mov	r0, r4
    2698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    269a:	f7ff f959 	bl	1950 <__pi_strlen>
    269e:	4604      	mov	r4, r0
    26a0:	e7e8      	b.n	2674 <ser_in+0x3c>
		return 0;
    26a2:	4614      	mov	r4, r2
    26a4:	e7f7      	b.n	2696 <ser_in+0x5e>
    26a6:	bf00      	nop
    26a8:	2000063c 	andcs	r0, r0, ip, lsr r6
    26ac:	00003149 	andeq	r3, r0, r9, asr #2

000026b0 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    26b0:	b40e      	push	{r1, r2, r3}
    26b2:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    26b4:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    26b6:	4812      	ldr	r0, [pc, #72]	; (2700 <ser_outf+0x50>)
    26b8:	f7ff f938 	bl	192c <running>
    26bc:	4606      	mov	r6, r0
    26be:	b120      	cbz	r0, 26ca <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    26c0:	4621      	mov	r1, r4
    26c2:	f7ff f905 	bl	18d0 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    26c6:	f7fe fe5f 	bl	1388 <__pi_release>
	va_start (ap, m);
    26ca:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26cc:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    26ce:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26d0:	f000 fef0 	bl	34b4 <vform>
    26d4:	4605      	mov	r5, r0
    26d6:	b918      	cbnz	r0, 26e0 <ser_outf+0x30>
		umwait (st);
    26d8:	4620      	mov	r0, r4
    26da:	f7ff faa9 	bl	1c30 <__pi_waitmem>
    26de:	e7f2      	b.n	26c6 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    26e0:	4601      	mov	r1, r0
    26e2:	4807      	ldr	r0, [pc, #28]	; (2700 <ser_outf+0x50>)
    26e4:	f7ff fa8a 	bl	1bfc <__pi_fork>
    26e8:	b918      	cbnz	r0, 26f2 <ser_outf+0x42>
		ufree (buf);
    26ea:	4628      	mov	r0, r5
    26ec:	f7ff f9e6 	bl	1abc <__pi_free>
		npwait (st);
    26f0:	e7f2      	b.n	26d8 <ser_outf+0x28>
		release;
	}

	return 0;
}
    26f2:	4630      	mov	r0, r6
    26f4:	b003      	add	sp, #12
    26f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    26fa:	b003      	add	sp, #12
    26fc:	4770      	bx	lr
    26fe:	bf00      	nop
    2700:	000030d9 	ldrdeq	r3, [r0], -r9

00002704 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    2704:	b40e      	push	{r1, r2, r3}
    2706:	b533      	push	{r0, r1, r4, r5, lr}
    2708:	9905      	ldr	r1, [sp, #20]
    270a:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    270c:	b321      	cbz	r1, 2758 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    270e:	4d13      	ldr	r5, [pc, #76]	; (275c <ser_inf+0x58>)
    2710:	6828      	ldr	r0, [r5, #0]
    2712:	b988      	cbnz	r0, 2738 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2714:	4812      	ldr	r0, [pc, #72]	; (2760 <ser_inf+0x5c>)
    2716:	f7ff f909 	bl	192c <running>
    271a:	b948      	cbnz	r0, 2730 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    271c:	4601      	mov	r1, r0
    271e:	4810      	ldr	r0, [pc, #64]	; (2760 <ser_inf+0x5c>)
    2720:	f7ff fa6c 	bl	1bfc <__pi_fork>
			if (prcs == 0) {
    2724:	b920      	cbnz	r0, 2730 <ser_inf+0x2c>
				npwait (st);
    2726:	4620      	mov	r0, r4
    2728:	f7ff fa82 	bl	1c30 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    272c:	f7fe fe2c 	bl	1388 <__pi_release>
		join (prcs, st);
    2730:	4621      	mov	r1, r4
    2732:	f7ff f8cd 	bl	18d0 <__pi_join>
    2736:	e7f9      	b.n	272c <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    2738:	aa06      	add	r2, sp, #24
    273a:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    273c:	f000 fee2 	bl	3504 <vscan>
    2740:	4604      	mov	r4, r0

	ufree (__inpline);
    2742:	6828      	ldr	r0, [r5, #0]
    2744:	f7ff f9ba 	bl	1abc <__pi_free>
	__inpline = NULL;
    2748:	2300      	movs	r3, #0
    274a:	602b      	str	r3, [r5, #0]

	return prcs;
}
    274c:	4620      	mov	r0, r4
    274e:	b002      	add	sp, #8
    2750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2754:	b003      	add	sp, #12
    2756:	4770      	bx	lr
		return 0;
    2758:	460c      	mov	r4, r1
    275a:	e7f7      	b.n	274c <ser_inf+0x48>
    275c:	2000063c 	andcs	r0, r0, ip, lsr r6
    2760:	00003149 	andeq	r3, r0, r9, asr #2

00002764 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2764:	4b04      	ldr	r3, [pc, #16]	; (2778 <plugch+0x14>)
    2766:	4a05      	ldr	r2, [pc, #20]	; (277c <plugch+0x18>)
    2768:	781b      	ldrb	r3, [r3, #0]
    276a:	f503 7359 	add.w	r3, r3, #868	; 0x364
    276e:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    2770:	4a03      	ldr	r2, [pc, #12]	; (2780 <plugch+0x1c>)
    2772:	81d3      	strh	r3, [r2, #14]
}
    2774:	4770      	bx	lr
    2776:	bf00      	nop
    2778:	200005f4 	strdcs	r0, [r0], -r4
    277c:	20000054 	andcs	r0, r0, r4, asr r0
    2780:	2000003c 	andcs	r0, r0, ip, lsr r0

00002784 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2784:	b570      	push	{r4, r5, r6, lr}
    2786:	460c      	mov	r4, r1
    2788:	281a      	cmp	r0, #26
    278a:	f200 80a4 	bhi.w	28d6 <option+0x152>
    278e:	e8df f000 	tbb	[pc, r0]
    2792:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    2796:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    279a:	3b35445b 	blcc	d5390e <__ccfg+0xd33966>
    279e:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    27a2:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    27a6:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    27aa:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    27ae:	4b4c      	ldr	r3, [pc, #304]	; (28e0 <option+0x15c>)
    27b0:	7818      	ldrb	r0, [r3, #0]
    27b2:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    27b6:	3002      	adds	r0, #2
			goto RVal;
    27b8:	e028      	b.n	280c <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    27ba:	4a49      	ldr	r2, [pc, #292]	; (28e0 <option+0x15c>)
    27bc:	7813      	ldrb	r3, [r2, #0]
    27be:	f043 0301 	orr.w	r3, r3, #1
    27c2:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    27c4:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    27c6:	4b47      	ldr	r3, [pc, #284]	; (28e4 <option+0x160>)
    27c8:	6819      	ldr	r1, [r3, #0]
    27ca:	4b47      	ldr	r3, [pc, #284]	; (28e8 <option+0x164>)
    27cc:	460c      	mov	r4, r1
    27ce:	681d      	ldr	r5, [r3, #0]
    27d0:	2300      	movs	r3, #0
    27d2:	f834 2b10 	ldrh.w	r2, [r4], #16
    27d6:	f002 0207 	and.w	r2, r2, #7
    27da:	429a      	cmp	r2, r3
    27dc:	dd08      	ble.n	27f0 <option+0x6c>
    27de:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    27e2:	3301      	adds	r3, #1
    27e4:	42ae      	cmp	r6, r5
    27e6:	d1f8      	bne.n	27da <option+0x56>
    27e8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    27ec:	889b      	ldrh	r3, [r3, #4]
    27ee:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    27f0:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    27f2:	4a3b      	ldr	r2, [pc, #236]	; (28e0 <option+0x15c>)
    27f4:	7813      	ldrb	r3, [r2, #0]
    27f6:	f023 0301 	bic.w	r3, r3, #1
    27fa:	e7e2      	b.n	27c2 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    27fc:	b101      	cbz	r1, 2800 <option+0x7c>
    27fe:	880c      	ldrh	r4, [r1, #0]
    2800:	4b3a      	ldr	r3, [pc, #232]	; (28ec <option+0x168>)
    2802:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    2804:	2000      	movs	r0, #0
    2806:	e7f3      	b.n	27f0 <option+0x6c>
			ret = (int) statid;
    2808:	4b38      	ldr	r3, [pc, #224]	; (28ec <option+0x168>)
    280a:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    280c:	2c00      	cmp	r4, #0
    280e:	d0ef      	beq.n	27f0 <option+0x6c>
		*val = ret;
    2810:	8020      	strh	r0, [r4, #0]
	return ret;
    2812:	e7ed      	b.n	27f0 <option+0x6c>
			ret = rbuffl + 2;
    2814:	4b36      	ldr	r3, [pc, #216]	; (28f0 <option+0x16c>)
    2816:	7818      	ldrb	r0, [r3, #0]
    2818:	e7cd      	b.n	27b6 <option+0x32>
				memcpy (val, &rxstat,
    281a:	220c      	movs	r2, #12
			if (val != NULL) {
    281c:	b121      	cbz	r1, 2828 <option+0xa4>
				memcpy (val, &rxstat,
    281e:	4620      	mov	r0, r4
    2820:	4934      	ldr	r1, [pc, #208]	; (28f4 <option+0x170>)
    2822:	f7ff f8b2 	bl	198a <__pi_memcpy>
    2826:	e7ed      	b.n	2804 <option+0x80>
				memset (&rxstat, 0, 
    2828:	4832      	ldr	r0, [pc, #200]	; (28f4 <option+0x170>)
    282a:	f7ff f8b8 	bl	199e <__pi_memset>
    282e:	e7e9      	b.n	2804 <option+0x80>
			if (val == NULL)
    2830:	b941      	cbnz	r1, 2844 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2832:	f7ff faa7 	bl	1d84 <lrnd>
    2836:	f3c0 4105 	ubfx	r1, r0, #16, #6
    283a:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    283c:	482e      	ldr	r0, [pc, #184]	; (28f8 <option+0x174>)
    283e:	f7fe ff9f 	bl	1780 <__pi_utimer_set>
    2842:	e7bf      	b.n	27c4 <option+0x40>
    2844:	8809      	ldrh	r1, [r1, #0]
    2846:	e7f9      	b.n	283c <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    2848:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    284a:	4b2c      	ldr	r3, [pc, #176]	; (28fc <option+0x178>)
    284c:	8b5a      	ldrh	r2, [r3, #26]
    284e:	4b2c      	ldr	r3, [pc, #176]	; (2900 <option+0x17c>)
					== patable [ret])
    2850:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    2854:	428a      	cmp	r2, r1
    2856:	d0d9      	beq.n	280c <option+0x88>
			for (ret = 0; ret < 8; ret++)
    2858:	3001      	adds	r0, #1
    285a:	2808      	cmp	r0, #8
    285c:	d1f8      	bne.n	2850 <option+0xcc>
    285e:	e7d5      	b.n	280c <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2860:	b119      	cbz	r1, 286a <option+0xe6>
				(*val > 7) ? 7 : *val;
    2862:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2864:	2807      	cmp	r0, #7
    2866:	bf28      	it	cs
    2868:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    286a:	4b25      	ldr	r3, [pc, #148]	; (2900 <option+0x17c>)
    286c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2870:	4b22      	ldr	r3, [pc, #136]	; (28fc <option+0x178>)
    2872:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2874:	4a1a      	ldr	r2, [pc, #104]	; (28e0 <option+0x15c>)
    2876:	7813      	ldrb	r3, [r2, #0]
    2878:	f063 037f 	orn	r3, r3, #127	; 0x7f
    287c:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    287e:	e7a2      	b.n	27c6 <option+0x42>
			ret = (int) channel;
    2880:	4b20      	ldr	r3, [pc, #128]	; (2904 <option+0x180>)
			ret = (int) vrate;
    2882:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2884:	e7c2      	b.n	280c <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2886:	b121      	cbz	r1, 2892 <option+0x10e>
				(*val > 7) ? 7 : *val;
    2888:	880c      	ldrh	r4, [r1, #0]
    288a:	2c07      	cmp	r4, #7
    288c:	bf28      	it	cs
    288e:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2890:	b2e4      	uxtb	r4, r4
    2892:	4b1c      	ldr	r3, [pc, #112]	; (2904 <option+0x180>)
    2894:	701c      	strb	r4, [r3, #0]
			plugch ();
    2896:	f7ff ff65 	bl	2764 <plugch>
			_BIS (dstate, DSTATE_IRST);
    289a:	4a11      	ldr	r2, [pc, #68]	; (28e0 <option+0x15c>)
    289c:	7813      	ldrb	r3, [r2, #0]
    289e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    28a2:	e78e      	b.n	27c2 <option+0x3e>
			ret = (int) vrate;
    28a4:	4b18      	ldr	r3, [pc, #96]	; (2908 <option+0x184>)
    28a6:	e7ec      	b.n	2882 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28a8:	b139      	cbz	r1, 28ba <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    28aa:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28ac:	2b03      	cmp	r3, #3
    28ae:	d806      	bhi.n	28be <option+0x13a>
    28b0:	b13b      	cbz	r3, 28c2 <option+0x13e>
    28b2:	b2db      	uxtb	r3, r3
    28b4:	4a14      	ldr	r2, [pc, #80]	; (2908 <option+0x184>)
    28b6:	7013      	strb	r3, [r2, #0]
    28b8:	e7ed      	b.n	2896 <option+0x112>
    28ba:	2302      	movs	r3, #2
    28bc:	e7fa      	b.n	28b4 <option+0x130>
    28be:	2303      	movs	r3, #3
    28c0:	e7f8      	b.n	28b4 <option+0x130>
    28c2:	2301      	movs	r3, #1
    28c4:	e7f6      	b.n	28b4 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28c6:	b119      	cbz	r1, 28d0 <option+0x14c>
    28c8:	880b      	ldrh	r3, [r1, #0]
    28ca:	4a10      	ldr	r2, [pc, #64]	; (290c <option+0x188>)
    28cc:	8013      	strh	r3, [r2, #0]
			goto RRet;
    28ce:	e799      	b.n	2804 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    28d4:	e7f9      	b.n	28ca <option+0x146>
			syserror (EREQPAR, "cc13 op");
    28d6:	2003      	movs	r0, #3
    28d8:	490d      	ldr	r1, [pc, #52]	; (2910 <option+0x18c>)
    28da:	f7fe f997 	bl	c0c <__pi_syserror>
    28de:	bf00      	nop
    28e0:	200005fc 	strdcs	r0, [r0], -ip
    28e4:	200005f8 	strdcs	r0, [r0], -r8
    28e8:	20000608 	andcs	r0, r0, r8, lsl #12
    28ec:	2000062c 	andcs	r0, r0, ip, lsr #12
    28f0:	2000060c 	andcs	r0, r0, ip, lsl #12
    28f4:	20000620 	andcs	r0, r0, r0, lsr #12
    28f8:	200005f2 	strdcs	r0, [r0], -r2
    28fc:	20000054 	andcs	r0, r0, r4, asr r0
    2900:	00005146 	andeq	r5, r0, r6, asr #2
    2904:	200005f4 	strdcs	r0, [r0], -r4
    2908:	2000003a 	andcs	r0, r0, sl, lsr r0
    290c:	20000038 	andcs	r0, r0, r8, lsr r0
    2910:	000050e2 	andeq	r5, r0, r2, ror #1

00002914 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2914:	b538      	push	{r3, r4, r5, lr}
    2916:	4604      	mov	r4, r0
    2918:	4d0c      	ldr	r5, [pc, #48]	; (294c <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    291a:	4620      	mov	r0, r4
    291c:	f001 f8a4 	bl	3a68 <NOROM_RFCDoorbellSendTo>
    2920:	b2c2      	uxtb	r2, r0
    2922:	2a01      	cmp	r2, #1
    2924:	d011      	beq.n	294a <issue_cmd+0x36>
		if (res != 0x86)
    2926:	2a86      	cmp	r2, #134	; 0x86
    2928:	d003      	beq.n	2932 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    292a:	4909      	ldr	r1, [pc, #36]	; (2950 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    292c:	2008      	movs	r0, #8
    292e:	f7fe f96d 	bl	c0c <__pi_syserror>
		if (cnt-- == 0) {
    2932:	3d01      	subs	r5, #1
    2934:	d105      	bne.n	2942 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    2936:	4621      	mov	r1, r4
    2938:	4806      	ldr	r0, [pc, #24]	; (2954 <issue_cmd+0x40>)
    293a:	f7ff f985 	bl	1c48 <diag>
			syserror (EHARDWARE, "hang ic0");
    293e:	4906      	ldr	r1, [pc, #24]	; (2958 <issue_cmd+0x44>)
    2940:	e7f4      	b.n	292c <issue_cmd+0x18>
		udelay (1);
    2942:	2001      	movs	r0, #1
    2944:	f7fe f8f8 	bl	b38 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2948:	e7e7      	b.n	291a <issue_cmd+0x6>
}
    294a:	bd38      	pop	{r3, r4, r5, pc}
    294c:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    2950:	000050ea 	andeq	r5, r0, sl, ror #1
    2954:	000050ee 	andeq	r5, r0, lr, ror #1
    2958:	000050fa 	strdeq	r5, [r0], -sl

0000295c <rx_de>:
static void rx_de () {
    295c:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    295e:	4c06      	ldr	r4, [pc, #24]	; (2978 <rx_de+0x1c>)
    2960:	7823      	ldrb	r3, [r4, #0]
    2962:	079b      	lsls	r3, r3, #30
    2964:	d506      	bpl.n	2974 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2966:	4805      	ldr	r0, [pc, #20]	; (297c <rx_de+0x20>)
    2968:	f7ff ffd4 	bl	2914 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    296c:	7823      	ldrb	r3, [r4, #0]
    296e:	f023 0302 	bic.w	r3, r3, #2
    2972:	7023      	strb	r3, [r4, #0]
}
    2974:	bd10      	pop	{r4, pc}
    2976:	bf00      	nop
    2978:	200005fc 	strdcs	r0, [r0], -ip
    297c:	04010001 	streq	r0, [r1], #-1

00002980 <rf_off>:
static void rf_off () {
    2980:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2982:	4c11      	ldr	r4, [pc, #68]	; (29c8 <rf_off+0x48>)
    2984:	7823      	ldrb	r3, [r4, #0]
    2986:	06db      	lsls	r3, r3, #27
    2988:	d51d      	bpl.n	29c6 <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    298a:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    298c:	4b0f      	ldr	r3, [pc, #60]	; (29cc <rf_off+0x4c>)
    298e:	2019      	movs	r0, #25
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	695b      	ldr	r3, [r3, #20]
    2994:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    2996:	2000      	movs	r0, #0
    2998:	f001 f9e4 	bl	3d64 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    299c:	f001 f878 	bl	3a90 <NOROM_RFCSynthPowerDown>
    29a0:	4b0b      	ldr	r3, [pc, #44]	; (29d0 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    29a2:	2001      	movs	r0, #1
    29a4:	601d      	str	r5, [r3, #0]
    29a6:	f7fe f911 	bl	bcc <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29aa:	4b0a      	ldr	r3, [pc, #40]	; (29d4 <rf_off+0x54>)
    29ac:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    29ae:	f001 f841 	bl	3a34 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    29b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29b6:	4b08      	ldr	r3, [pc, #32]	; (29d8 <rf_off+0x58>)
    29b8:	601a      	str	r2, [r3, #0]
    29ba:	2202      	movs	r2, #2
    29bc:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    29be:	7823      	ldrb	r3, [r4, #0]
    29c0:	f023 0310 	bic.w	r3, r3, #16
    29c4:	7023      	strb	r3, [r4, #0]
}
    29c6:	bd38      	pop	{r3, r4, r5, pc}
    29c8:	200005fc 	strdcs	r0, [r0], -ip
    29cc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    29d0:	60040000 	andvs	r0, r4, r0
    29d4:	43240004 			; <UNDEFINED> instruction: 0x43240004
    29d8:	400220a0 	andmi	r2, r2, r0, lsr #1

000029dc <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    29dc:	b570      	push	{r4, r5, r6, lr}
    29de:	4604      	mov	r4, r0
    29e0:	460d      	mov	r5, r1
    29e2:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    29e6:	8862      	ldrh	r2, [r4, #2]
    29e8:	42aa      	cmp	r2, r5
    29ea:	d00e      	beq.n	2a0a <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    29ec:	3e01      	subs	r6, #1
    29ee:	d108      	bne.n	2a02 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    29f0:	8821      	ldrh	r1, [r4, #0]
    29f2:	4806      	ldr	r0, [pc, #24]	; (2a0c <wait_cmd.constprop.0+0x30>)
    29f4:	462b      	mov	r3, r5
    29f6:	f7ff f927 	bl	1c48 <diag>
			syserror (EHARDWARE, "rt2");
    29fa:	2008      	movs	r0, #8
    29fc:	4904      	ldr	r1, [pc, #16]	; (2a10 <wait_cmd.constprop.0+0x34>)
    29fe:	f7fe f905 	bl	c0c <__pi_syserror>
		udelay (1);
    2a02:	2001      	movs	r0, #1
    2a04:	f7fe f898 	bl	b38 <udelay>
		if (cmd->status == tstat)
    2a08:	e7ed      	b.n	29e6 <wait_cmd.constprop.0+0xa>
}
    2a0a:	bd70      	pop	{r4, r5, r6, pc}
    2a0c:	00005103 	andeq	r5, r0, r3, lsl #2
    2a10:	00005113 	andeq	r5, r0, r3, lsl r1

00002a14 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a18:	4b46      	ldr	r3, [pc, #280]	; (2b34 <rf_on.part.0+0x120>)
static void rf_on () {
    2a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a1e:	601a      	str	r2, [r3, #0]
    2a20:	2202      	movs	r2, #2
    2a22:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2a24:	f000 ffca 	bl	39bc <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a28:	200a      	movs	r0, #10
    2a2a:	f7fe f885 	bl	b38 <udelay>
    2a2e:	f000 ffd1 	bl	39d4 <NOROM_OSCHF_AttemptToSwitchToXosc>
    2a32:	2800      	cmp	r0, #0
    2a34:	d0f8      	beq.n	2a28 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a36:	2401      	movs	r4, #1
    2a38:	4b3f      	ldr	r3, [pc, #252]	; (2b38 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a3a:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a3c:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a3e:	f7fe f8a7 	bl	b90 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2a42:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2a46:	4b3d      	ldr	r3, [pc, #244]	; (2b3c <rf_on.part.0+0x128>)
	issue_cmd (
    2a48:	483d      	ldr	r0, [pc, #244]	; (2b40 <rf_on.part.0+0x12c>)
    2a4a:	601a      	str	r2, [r3, #0]
    2a4c:	f7ff ff62 	bl	2914 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2a50:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2a54:	493b      	ldr	r1, [pc, #236]	; (2b44 <rf_on.part.0+0x130>)
    2a56:	483c      	ldr	r0, [pc, #240]	; (2b48 <rf_on.part.0+0x134>)
    2a58:	f001 ff06 	bl	4868 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2a5c:	2200      	movs	r2, #0
    2a5e:	4b3b      	ldr	r3, [pc, #236]	; (2b4c <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2a60:	493b      	ldr	r1, [pc, #236]	; (2b50 <rf_on.part.0+0x13c>)
    2a62:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2a64:	2202      	movs	r2, #2
    2a66:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2a6a:	2203      	movs	r2, #3
    2a6c:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2a70:	2204      	movs	r2, #4
    2a72:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2a74:	2205      	movs	r2, #5
    2a76:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2a78:	2206      	movs	r2, #6
    2a7a:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2a7e:	4a35      	ldr	r2, [pc, #212]	; (2b54 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2a80:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a84:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2a86:	4b34      	ldr	r3, [pc, #208]	; (2b58 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2a88:	4a34      	ldr	r2, [pc, #208]	; (2b5c <rf_on.part.0+0x148>)
      t7 = *pS++;
    2a8a:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2a8c:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2a90:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2a94:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2a98:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2a9a:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2a9e:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2aa2:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2aa6:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2aa8:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2aaa:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2aac:	6198      	str	r0, [r3, #24]
    2aae:	4618      	mov	r0, r3
   } while (--nIterations);
    2ab0:	4288      	cmp	r0, r1
    2ab2:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2ab6:	f103 0320 	add.w	r3, r3, #32
    2aba:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2abc:	d1e5      	bne.n	2a8a <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2abe:	4b28      	ldr	r3, [pc, #160]	; (2b60 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2ac0:	4828      	ldr	r0, [pc, #160]	; (2b64 <rf_on.part.0+0x150>)
    2ac2:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2ac4:	4b28      	ldr	r3, [pc, #160]	; (2b68 <rf_on.part.0+0x154>)
    2ac6:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2ac8:	4b28      	ldr	r3, [pc, #160]	; (2b6c <rf_on.part.0+0x158>)
    2aca:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2acc:	4b28      	ldr	r3, [pc, #160]	; (2b70 <rf_on.part.0+0x15c>)
    2ace:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2ad0:	4b28      	ldr	r3, [pc, #160]	; (2b74 <rf_on.part.0+0x160>)
    2ad2:	630b      	str	r3, [r1, #48]	; 0x30
    2ad4:	f7ff ff1e 	bl	2914 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2ad8:	2001      	movs	r0, #1
    2ada:	f001 f943 	bl	3d64 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2ade:	4826      	ldr	r0, [pc, #152]	; (2b78 <rf_on.part.0+0x164>)
    2ae0:	f001 f930 	bl	3d44 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2ae4:	4825      	ldr	r0, [pc, #148]	; (2b7c <rf_on.part.0+0x168>)
    2ae6:	f7ff ff15 	bl	2914 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2aea:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2aee:	4823      	ldr	r0, [pc, #140]	; (2b7c <rf_on.part.0+0x168>)
    2af0:	f7ff ff74 	bl	29dc <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2af4:	4822      	ldr	r0, [pc, #136]	; (2b80 <rf_on.part.0+0x16c>)
    2af6:	f7ff ff0d 	bl	2914 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2afa:	4822      	ldr	r0, [pc, #136]	; (2b84 <rf_on.part.0+0x170>)
    2afc:	f7ff ff0a 	bl	2914 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b00:	4820      	ldr	r0, [pc, #128]	; (2b84 <rf_on.part.0+0x170>)
    2b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2b06:	f7ff ff69 	bl	29dc <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2b0a:	4a1f      	ldr	r2, [pc, #124]	; (2b88 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2b0c:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2b0e:	7813      	ldrb	r3, [r2, #0]
    2b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b14:	f043 0310 	orr.w	r3, r3, #16
    2b18:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b1a:	2300      	movs	r3, #0
    2b1c:	4a1b      	ldr	r2, [pc, #108]	; (2b8c <rf_on.part.0+0x178>)
    2b1e:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b20:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2b24:	4b1a      	ldr	r3, [pc, #104]	; (2b90 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b26:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2b28:	681b      	ldr	r3, [r3, #0]
}
    2b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2b2e:	691b      	ldr	r3, [r3, #16]
    2b30:	4718      	bx	r3
    2b32:	bf00      	nop
    2b34:	40022090 	mulmi	r2, r0, r0
    2b38:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2b3c:	60040000 	andvs	r0, r4, r0
    2b40:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2b44:	0000580c 	andeq	r5, r0, ip, lsl #16
    2b48:	2100041c 	tstcs	r0, ip, lsl r4
    2b4c:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2b50:	2100c680 	smlabbcs	r0, r0, r6, ip
    2b54:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2b58:	2100c000 	mrscs	ip, (UNDEF: 0)
    2b5c:	00005158 	andeq	r5, r0, r8, asr r1
    2b60:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2b64:	06070001 	streq	r0, [r7], -r1
    2b68:	1a101020 	bne	406bf0 <__ccfg+0x3e6c48>
    2b6c:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2b70:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2b74:	70006b54 	andvc	r6, r0, r4, asr fp
    2b78:	20000610 	andcs	r0, r0, r0, lsl r6
    2b7c:	20000054 	andcs	r0, r0, r4, asr r0
    2b80:	20000024 	andcs	r0, r0, r4, lsr #32
    2b84:	2000003c 	andcs	r0, r0, ip, lsr r0
    2b88:	200005fc 	strdcs	r0, [r0], -ip
    2b8c:	40041014 	andmi	r1, r4, r4, lsl r0
    2b90:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002b94 <rx_int_enable>:
static void rx_int_enable () {
    2b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b98:	4a2a      	ldr	r2, [pc, #168]	; (2c44 <rx_int_enable+0xb0>)
    2b9a:	6813      	ldr	r3, [r2, #0]
    2b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2ba4:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2ba6:	2200      	movs	r2, #0
    2ba8:	4b27      	ldr	r3, [pc, #156]	; (2c48 <rx_int_enable+0xb4>)
    2baa:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2bac:	681d      	ldr	r5, [r3, #0]
    2bae:	2d00      	cmp	r5, #0
    2bb0:	d1fb      	bne.n	2baa <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bb2:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2bb4:	4a25      	ldr	r2, [pc, #148]	; (2c4c <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2bb6:	4f26      	ldr	r7, [pc, #152]	; (2c50 <rx_int_enable+0xbc>)
    2bb8:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2c5c <rx_int_enable+0xc8>
    2bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2bc6:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bc8:	4b22      	ldr	r3, [pc, #136]	; (2c54 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bca:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2c60 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bce:	69db      	ldr	r3, [r3, #28]
    2bd0:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2bd2:	7923      	ldrb	r3, [r4, #4]
    2bd4:	2b03      	cmp	r3, #3
    2bd6:	d11e      	bne.n	2c16 <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bd8:	7a63      	ldrb	r3, [r4, #9]
    2bda:	7a21      	ldrb	r1, [r4, #8]
    2bdc:	1cda      	adds	r2, r3, #3
    2bde:	4291      	cmp	r1, r2
			nr++;
    2be0:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2be4:	d11c      	bne.n	2c20 <rx_int_enable+0x8c>
    2be6:	f898 2000 	ldrb.w	r2, [r8]
    2bea:	429a      	cmp	r2, r3
    2bec:	d318      	bcc.n	2c20 <rx_int_enable+0x8c>
    2bee:	f013 0c01 	ands.w	ip, r3, #1
    2bf2:	d115      	bne.n	2c20 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2bf4:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2bf8:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2bfa:	5c88      	ldrb	r0, [r1, r2]
    2bfc:	440b      	add	r3, r1
    2bfe:	3880      	subs	r0, #128	; 0x80
    2c00:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2c02:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c06:	f8b9 0000 	ldrh.w	r0, [r9]
    2c0a:	f104 010a 	add.w	r1, r4, #10
    2c0e:	f7ff fb5f 	bl	22d0 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2c12:	2300      	movs	r3, #0
    2c14:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c16:	2e01      	cmp	r6, #1
    2c18:	d006      	beq.n	2c28 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c1a:	2601      	movs	r6, #1
    2c1c:	6824      	ldr	r4, [r4, #0]
    2c1e:	e7d8      	b.n	2bd2 <rx_int_enable+0x3e>
				diag ("BAD RX");
    2c20:	4638      	mov	r0, r7
    2c22:	f7ff f811 	bl	1c48 <diag>
    2c26:	e7f4      	b.n	2c12 <rx_int_enable+0x7e>
	if (nr) {
    2c28:	b14d      	cbz	r5, 2c3e <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c2a:	f7ff f8ab 	bl	1d84 <lrnd>
}
    2c2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c32:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2c36:	3102      	adds	r1, #2
    2c38:	4807      	ldr	r0, [pc, #28]	; (2c58 <rx_int_enable+0xc4>)
    2c3a:	f7fe bda1 	b.w	1780 <__pi_utimer_set>
}
    2c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c42:	bf00      	nop
    2c44:	40041018 	andmi	r1, r4, r8, lsl r0
    2c48:	40041010 	andmi	r1, r4, r0, lsl r0
    2c4c:	40041014 	andmi	r1, r4, r4, lsl r0
    2c50:	00005117 	andeq	r5, r0, r7, lsl r1
    2c54:	2000007c 	andcs	r0, r0, ip, ror r0
    2c58:	200005f2 	strdcs	r0, [r0], -r2
    2c5c:	2000060c 	andcs	r0, r0, ip, lsl #12
    2c60:	20000604 	andcs	r0, r0, r4, lsl #12

00002c64 <cc1350_driver>:
thread (cc1350_driver)
    2c64:	2801      	cmp	r0, #1
    2c66:	b570      	push	{r4, r5, r6, lr}
    2c68:	f000 808b 	beq.w	2d82 <cc1350_driver+0x11e>
    2c6c:	2802      	cmp	r0, #2
    2c6e:	f000 80bd 	beq.w	2dec <cc1350_driver+0x188>
    2c72:	2800      	cmp	r0, #0
    2c74:	f040 80ce 	bne.w	2e14 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2c78:	4c68      	ldr	r4, [pc, #416]	; (2e1c <cc1350_driver+0x1b8>)
    2c7a:	f994 3000 	ldrsb.w	r3, [r4]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	da05      	bge.n	2c8e <cc1350_driver+0x2a>
			rf_off ();
    2c82:	f7ff fe7d 	bl	2980 <rf_off>
			_BIC (dstate,
    2c86:	7823      	ldrb	r3, [r4, #0]
    2c88:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2c8c:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2c8e:	7823      	ldrb	r3, [r4, #0]
    2c90:	0798      	lsls	r0, r3, #30
    2c92:	f003 0201 	and.w	r2, r3, #1
    2c96:	d51e      	bpl.n	2cd6 <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2c98:	b90a      	cbnz	r2, 2c9e <cc1350_driver+0x3a>
				rx_de ();
    2c9a:	f7ff fe5f 	bl	295c <rx_de>
		if (paylen == 0) {
    2c9e:	4d60      	ldr	r5, [pc, #384]	; (2e20 <cc1350_driver+0x1bc>)
    2ca0:	4e60      	ldr	r6, [pc, #384]	; (2e24 <cc1350_driver+0x1c0>)
    2ca2:	682b      	ldr	r3, [r5, #0]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d14c      	bne.n	2d42 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2ca8:	4b5f      	ldr	r3, [pc, #380]	; (2e28 <cc1350_driver+0x1c4>)
    2caa:	4629      	mov	r1, r5
    2cac:	8818      	ldrh	r0, [r3, #0]
    2cae:	f7ff fb5d 	bl	236c <tcvphy_get>
    2cb2:	6170      	str	r0, [r6, #20]
    2cb4:	2800      	cmp	r0, #0
    2cb6:	d02f      	beq.n	2d18 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cb8:	4a5c      	ldr	r2, [pc, #368]	; (2e2c <cc1350_driver+0x1c8>)
				paylen -= 2;
    2cba:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cbc:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2cbe:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cc0:	4293      	cmp	r3, r2
				paylen -= 2;
    2cc2:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cc4:	dc03      	bgt.n	2cce <cc1350_driver+0x6a>
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	dd01      	ble.n	2cce <cc1350_driver+0x6a>
    2cca:	07db      	lsls	r3, r3, #31
    2ccc:	d51b      	bpl.n	2d06 <cc1350_driver+0xa2>
    2cce:	200a      	movs	r0, #10
    2cd0:	4957      	ldr	r1, [pc, #348]	; (2e30 <cc1350_driver+0x1cc>)
    2cd2:	f7fd ff9b 	bl	c0c <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2cd6:	2a00      	cmp	r2, #0
    2cd8:	d0e1      	beq.n	2c9e <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2cda:	06d9      	lsls	r1, r3, #27
    2cdc:	d50d      	bpl.n	2cfa <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2cde:	4855      	ldr	r0, [pc, #340]	; (2e34 <cc1350_driver+0x1d0>)
    2ce0:	69c3      	ldr	r3, [r0, #28]
    2ce2:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2ce4:	2300      	movs	r3, #0
    2ce6:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2ce8:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2cea:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2cec:	f7ff fe12 	bl	2914 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2cf0:	7823      	ldrb	r3, [r4, #0]
    2cf2:	f043 0302 	orr.w	r3, r3, #2
    2cf6:	7023      	strb	r3, [r4, #0]
    2cf8:	e7d1      	b.n	2c9e <cc1350_driver+0x3a>
    2cfa:	f7ff fe8b 	bl	2a14 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2cfe:	7823      	ldrb	r3, [r4, #0]
    2d00:	079a      	lsls	r2, r3, #30
    2d02:	d5ec      	bpl.n	2cde <cc1350_driver+0x7a>
    2d04:	e7cb      	b.n	2c9e <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d0a:	4b4b      	ldr	r3, [pc, #300]	; (2e38 <cc1350_driver+0x1d4>)
    2d0c:	881b      	ldrh	r3, [r3, #0]
    2d0e:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d10:	bf18      	it	ne
    2d12:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d14:	682b      	ldr	r3, [r5, #0]
    2d16:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2d18:	6829      	ldr	r1, [r5, #0]
    2d1a:	b991      	cbnz	r1, 2d42 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2d1c:	4b47      	ldr	r3, [pc, #284]	; (2e3c <cc1350_driver+0x1d8>)
    2d1e:	6818      	ldr	r0, [r3, #0]
    2d20:	f7fe fda2 	bl	1868 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2d24:	7823      	ldrb	r3, [r4, #0]
    2d26:	079d      	lsls	r5, r3, #30
    2d28:	d503      	bpl.n	2d32 <cc1350_driver+0xce>
				rx_int_enable ();
    2d2a:	f7ff ff33 	bl	2b94 <rx_int_enable>
			release;
    2d2e:	f7fe fb2b 	bl	1388 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2d32:	06dc      	lsls	r4, r3, #27
    2d34:	d5fb      	bpl.n	2d2e <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2d36:	2102      	movs	r1, #2
    2d38:	4b41      	ldr	r3, [pc, #260]	; (2e40 <cc1350_driver+0x1dc>)
    2d3a:	8818      	ldrh	r0, [r3, #0]
    2d3c:	f7fe fdda 	bl	18f4 <delay>
    2d40:	e7f5      	b.n	2d2e <cc1350_driver+0xca>
		if (bckf_timer) {
    2d42:	4d40      	ldr	r5, [pc, #256]	; (2e44 <cc1350_driver+0x1e0>)
    2d44:	882b      	ldrh	r3, [r5, #0]
    2d46:	b163      	cbz	r3, 2d62 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2d48:	4b3c      	ldr	r3, [pc, #240]	; (2e3c <cc1350_driver+0x1d8>)
    2d4a:	2100      	movs	r1, #0
    2d4c:	6818      	ldr	r0, [r3, #0]
    2d4e:	f7fe fd8b 	bl	1868 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2d52:	8828      	ldrh	r0, [r5, #0]
    2d54:	2100      	movs	r1, #0
    2d56:	f7fe fdcd 	bl	18f4 <delay>
			if (dstate & DSTATE_RXAC)
    2d5a:	7823      	ldrb	r3, [r4, #0]
    2d5c:	0798      	lsls	r0, r3, #30
    2d5e:	d5e6      	bpl.n	2d2e <cc1350_driver+0xca>
    2d60:	e7e3      	b.n	2d2a <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2d62:	7823      	ldrb	r3, [r4, #0]
    2d64:	06d9      	lsls	r1, r3, #27
    2d66:	d401      	bmi.n	2d6c <cc1350_driver+0x108>
    2d68:	f7ff fe54 	bl	2a14 <rf_on.part.0>
		rx_de ();
    2d6c:	f7ff fdf6 	bl	295c <rx_de>
		RF_cmdPropTx . status = 0;
    2d70:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d72:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2d76:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d78:	4b33      	ldr	r3, [pc, #204]	; (2e48 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2d7a:	4834      	ldr	r0, [pc, #208]	; (2e4c <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d7c:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2d7e:	f7ff fdc9 	bl	2914 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2d82:	4b26      	ldr	r3, [pc, #152]	; (2e1c <cc1350_driver+0x1b8>)
    2d84:	f993 3000 	ldrsb.w	r3, [r3]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	f6ff af75 	blt.w	2c78 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d8e:	4b2e      	ldr	r3, [pc, #184]	; (2e48 <cc1350_driver+0x1e4>)
    2d90:	681a      	ldr	r2, [r3, #0]
    2d92:	0792      	lsls	r2, r2, #30
    2d94:	d402      	bmi.n	2d9c <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2d96:	2101      	movs	r1, #1
    2d98:	4608      	mov	r0, r1
    2d9a:	e7cf      	b.n	2d3c <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d9c:	4821      	ldr	r0, [pc, #132]	; (2e24 <cc1350_driver+0x1c0>)
    2d9e:	4c2c      	ldr	r4, [pc, #176]	; (2e50 <cc1350_driver+0x1ec>)
    2da0:	8842      	ldrh	r2, [r0, #2]
    2da2:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2da6:	d018      	beq.n	2dda <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2da8:	7822      	ldrb	r2, [r4, #0]
    2daa:	2a0f      	cmp	r2, #15
    2dac:	d909      	bls.n	2dc2 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2dae:	2200      	movs	r2, #0
    2db0:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2db2:	f06f 0202 	mvn.w	r2, #2
    2db6:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2db8:	f7ff fdac 	bl	2914 <issue_cmd>
				proceed (DR_XMIT);
    2dbc:	2001      	movs	r0, #1
    2dbe:	f7fe fd49 	bl	1854 <proceed>
			txtries++;
    2dc2:	7823      	ldrb	r3, [r4, #0]
    2dc4:	3301      	adds	r3, #1
    2dc6:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2dc8:	f7fe ffdc 	bl	1d84 <lrnd>
    2dcc:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2dd0:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dd2:	481c      	ldr	r0, [pc, #112]	; (2e44 <cc1350_driver+0x1e0>)
    2dd4:	f7fe fcd4 	bl	1780 <__pi_utimer_set>
		goto DR_LOOP__;
    2dd8:	e74e      	b.n	2c78 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2dda:	6940      	ldr	r0, [r0, #20]
    2ddc:	f7ff fb00 	bl	23e0 <tcvphy_end>
		paylen = 0;
    2de0:	2300      	movs	r3, #0
    2de2:	4a0f      	ldr	r2, [pc, #60]	; (2e20 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2de4:	2102      	movs	r1, #2
		paylen = 0;
    2de6:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2de8:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dea:	e7f2      	b.n	2dd2 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dec:	4b0b      	ldr	r3, [pc, #44]	; (2e1c <cc1350_driver+0x1b8>)
    2dee:	781a      	ldrb	r2, [r3, #0]
    2df0:	f993 3000 	ldrsb.w	r3, [r3]
    2df4:	2b00      	cmp	r3, #0
    2df6:	f6ff af3f 	blt.w	2c78 <cc1350_driver+0x14>
    2dfa:	07d3      	lsls	r3, r2, #31
    2dfc:	f53f af3c 	bmi.w	2c78 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2e00:	4b09      	ldr	r3, [pc, #36]	; (2e28 <cc1350_driver+0x1c4>)
    2e02:	8818      	ldrh	r0, [r3, #0]
    2e04:	f7ff fad2 	bl	23ac <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e08:	2800      	cmp	r0, #0
    2e0a:	f47f af35 	bne.w	2c78 <cc1350_driver+0x14>
			rf_off ();
    2e0e:	f7ff fdb7 	bl	2980 <rf_off>
    2e12:	e731      	b.n	2c78 <cc1350_driver+0x14>
endthread
    2e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e18:	f7fe bc94 	b.w	1744 <__pi_badstate>
    2e1c:	200005fc 	strdcs	r0, [r0], -ip
    2e20:	20000600 	andcs	r0, r0, r0, lsl #12
    2e24:	200000a0 	andcs	r0, r0, r0, lsr #1
    2e28:	20000604 	andcs	r0, r0, r4, lsl #12
    2e2c:	2000060c 	andcs	r0, r0, ip, lsl #12
    2e30:	0000511e 	andeq	r5, r0, lr, lsl r1
    2e34:	2000007c 	andcs	r0, r0, ip, ror r0
    2e38:	2000062c 	andcs	r0, r0, ip, lsr #12
    2e3c:	20000608 	andcs	r0, r0, r8, lsl #12
    2e40:	20000038 	andcs	r0, r0, r8, lsr r0
    2e44:	200005f2 	strdcs	r0, [r0], -r2
    2e48:	40041010 	andmi	r1, r4, r0, lsl r0
    2e4c:	20000008 	andcs	r0, r0, r8
    2e50:	2000062e 	andcs	r0, r0, lr, lsr #12

00002e54 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2e54:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e56:	4a15      	ldr	r2, [pc, #84]	; (2eac <RFCCPE0IntHandler+0x58>)
    2e58:	6813      	ldr	r3, [r2, #0]
    2e5a:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2e5c:	bfbf      	itttt	lt
    2e5e:	4914      	ldrlt	r1, [pc, #80]	; (2eb0 <RFCCPE0IntHandler+0x5c>)
    2e60:	780b      	ldrblt	r3, [r1, #0]
    2e62:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2e66:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e68:	2100      	movs	r1, #0
    2e6a:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e6c:	6813      	ldr	r3, [r2, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d1fb      	bne.n	2e6a <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e72:	4a10      	ldr	r2, [pc, #64]	; (2eb4 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2e74:	4c10      	ldr	r4, [pc, #64]	; (2eb8 <RFCCPE0IntHandler+0x64>)
    2e76:	6811      	ldr	r1, [r2, #0]
    2e78:	6013      	str	r3, [r2, #0]
    2e7a:	4a10      	ldr	r2, [pc, #64]	; (2ebc <RFCCPE0IntHandler+0x68>)
    2e7c:	6824      	ldr	r4, [r4, #0]
    2e7e:	6811      	ldr	r1, [r2, #0]
    2e80:	4608      	mov	r0, r1
    2e82:	f830 2b10 	ldrh.w	r2, [r0], #16
    2e86:	f002 0207 	and.w	r2, r2, #7
    2e8a:	429a      	cmp	r2, r3
    2e8c:	dd08      	ble.n	2ea0 <RFCCPE0IntHandler+0x4c>
    2e8e:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2e92:	3301      	adds	r3, #1
    2e94:	42a5      	cmp	r5, r4
    2e96:	d1f8      	bne.n	2e8a <RFCCPE0IntHandler+0x36>
    2e98:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2e9c:	889b      	ldrh	r3, [r3, #4]
    2e9e:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2ea0:	4a07      	ldr	r2, [pc, #28]	; (2ec0 <RFCCPE0IntHandler+0x6c>)
    2ea2:	7813      	ldrb	r3, [r2, #0]
    2ea4:	f043 0302 	orr.w	r3, r3, #2
    2ea8:	7013      	strb	r3, [r2, #0]
}
    2eaa:	bd30      	pop	{r4, r5, pc}
    2eac:	40041010 	andmi	r1, r4, r0, lsl r0
    2eb0:	200005fc 	strdcs	r0, [r0], -ip
    2eb4:	40041014 	andmi	r1, r4, r4, lsl r0
    2eb8:	20000608 	andcs	r0, r0, r8, lsl #12
    2ebc:	200005f8 	strdcs	r0, [r0], -r8
    2ec0:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00002ec4 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2ec8:	4c49      	ldr	r4, [pc, #292]	; (2ff0 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2eca:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2ecc:	7822      	ldrb	r2, [r4, #0]
    2ece:	b11a      	cbz	r2, 2ed8 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2ed0:	2009      	movs	r0, #9
    2ed2:	4948      	ldr	r1, [pc, #288]	; (2ff4 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2ed4:	f7fd fe9a 	bl	c0c <__pi_syserror>
	if (mbs == 0)
    2ed8:	b129      	cbz	r1, 2ee6 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2eda:	1f8a      	subs	r2, r1, #6
    2edc:	2af4      	cmp	r2, #244	; 0xf4
    2ede:	d903      	bls.n	2ee8 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2ee0:	2003      	movs	r0, #3
    2ee2:	4945      	ldr	r1, [pc, #276]	; (2ff8 <phys_cc1350+0x134>)
    2ee4:	e7f6      	b.n	2ed4 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2ee6:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2ee8:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2eea:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2eee:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2ef0:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2ef4:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2ef6:	7820      	ldrb	r0, [r4, #0]
    2ef8:	469b      	mov	fp, r3
    2efa:	300d      	adds	r0, #13
    2efc:	f7fe fe2a 	bl	1b54 <__pi_malloc>
		if (db == NULL)
    2f00:	4603      	mov	r3, r0
    2f02:	b920      	cbnz	r0, 2f0e <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2f04:	2006      	movs	r0, #6
    2f06:	493b      	ldr	r1, [pc, #236]	; (2ff4 <phys_cc1350+0x130>)
    2f08:	e7e4      	b.n	2ed4 <phys_cc1350+0x10>
    2f0a:	46b8      	mov	r8, r7
    2f0c:	e7f3      	b.n	2ef6 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2f0e:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2f12:	2f00      	cmp	r7, #0
    2f14:	d03e      	beq.n	2f94 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2f16:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2f1a:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2f1c:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    2f1e:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    2f20:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2f24:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2f28:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2f2a:	d1ee      	bne.n	2f0a <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2f2c:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f2e:	2008      	movs	r0, #8
    2f30:	f7fe fe10 	bl	1b54 <__pi_malloc>
    2f34:	4b31      	ldr	r3, [pc, #196]	; (2ffc <phys_cc1350+0x138>)
    2f36:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    2f38:	2800      	cmp	r0, #0
    2f3a:	d0e3      	beq.n	2f04 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    2f3c:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    2f3e:	2500      	movs	r5, #0
    2f40:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f42:	492f      	ldr	r1, [pc, #188]	; (3000 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    2f44:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2f46:	4a2f      	ldr	r2, [pc, #188]	; (3004 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f48:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2f4a:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2f4c:	89da      	ldrh	r2, [r3, #14]
    2f4e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    2f52:	f042 0206 	orr.w	r2, r2, #6
    2f56:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    2f58:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    2f5e:	3b02      	subs	r3, #2
    2f60:	7023      	strb	r3, [r4, #0]
	physid = phy;
    2f62:	4b29      	ldr	r3, [pc, #164]	; (3008 <phys_cc1350+0x144>)
    2f64:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f66:	f7ff f98b 	bl	2280 <tcvphy_reg>
    2f6a:	4b28      	ldr	r3, [pc, #160]	; (300c <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f6c:	2207      	movs	r2, #7
    2f6e:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f70:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f72:	462b      	mov	r3, r5
    2f74:	4826      	ldr	r0, [pc, #152]	; (3010 <phys_cc1350+0x14c>)
    2f76:	f7fe fe67 	bl	1c48 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    2f7a:	4826      	ldr	r0, [pc, #152]	; (3014 <phys_cc1350+0x150>)
    2f7c:	f7fe fbea 	bl	1754 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2f80:	4629      	mov	r1, r5
    2f82:	4825      	ldr	r0, [pc, #148]	; (3018 <phys_cc1350+0x154>)
    2f84:	f7fe fe3a 	bl	1bfc <__pi_fork>
    2f88:	4b24      	ldr	r3, [pc, #144]	; (301c <phys_cc1350+0x158>)
    2f8a:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2f8c:	b920      	cbnz	r0, 2f98 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    2f8e:	2004      	movs	r0, #4
    2f90:	4918      	ldr	r1, [pc, #96]	; (2ff4 <phys_cc1350+0x130>)
    2f92:	e79f      	b.n	2ed4 <phys_cc1350+0x10>
    2f94:	4605      	mov	r5, r0
    2f96:	e7c0      	b.n	2f1a <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f98:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2f9c:	4c20      	ldr	r4, [pc, #128]	; (3020 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2f9e:	4921      	ldr	r1, [pc, #132]	; (3024 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2fa0:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fa2:	4b21      	ldr	r3, [pc, #132]	; (3028 <phys_cc1350+0x164>)
    2fa4:	781a      	ldrb	r2, [r3, #0]
    2fa6:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2fa8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fac:	8858      	ldrh	r0, [r3, #2]
    2fae:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    2fb2:	6922      	ldr	r2, [r4, #16]
    2fb4:	f003 030f 	and.w	r3, r3, #15
    2fb8:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    2fbc:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2fc0:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2fc4:	f022 020f 	bic.w	r2, r2, #15
    2fc8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    2fcc:	4313      	orrs	r3, r2
    2fce:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2fd0:	f7ff fbc8 	bl	2764 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd4:	4b15      	ldr	r3, [pc, #84]	; (302c <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fd6:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd8:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fda:	f000 fe27 	bl	3c2c <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2fde:	4620      	mov	r0, r4
    2fe0:	4913      	ldr	r1, [pc, #76]	; (3030 <phys_cc1350+0x16c>)
    2fe2:	f000 fd7b 	bl	3adc <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2fe6:	4b13      	ldr	r3, [pc, #76]	; (3034 <phys_cc1350+0x170>)
    2fe8:	601d      	str	r5, [r3, #0]
}
    2fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fee:	bf00      	nop
    2ff0:	2000060c 	andcs	r0, r0, ip, lsl #12
    2ff4:	00005126 	andeq	r5, r0, r6, lsr #2
    2ff8:	0000512b 	andeq	r5, r0, fp, lsr #2
    2ffc:	2000007c 	andcs	r0, r0, ip, ror r0
    3000:	00002785 	andeq	r2, r0, r5, lsl #15
    3004:	20000620 	andcs	r0, r0, r0, lsr #12
    3008:	20000604 	andcs	r0, r0, r4, lsl #12
    300c:	20000608 	andcs	r0, r0, r8, lsl #12
    3010:	00005133 	andeq	r5, r0, r3, lsr r1
    3014:	200005f2 	strdcs	r0, [r0], -r2
    3018:	00002c65 	andeq	r2, r0, r5, ror #24
    301c:	200005f8 	strdcs	r0, [r0], -r8
    3020:	20000054 	andcs	r0, r0, r4, asr r0
    3024:	00005a98 	muleq	r0, r8, sl
    3028:	2000003a 	andcs	r0, r0, sl, lsr r0
    302c:	400821d0 	ldrdmi	r2, [r8], -r0
    3030:	20000610 	andcs	r0, r0, r0, lsl r6
    3034:	40041018 	andmi	r1, r4, r8, lsl r0

00003038 <tcv_clo_null>:
    3038:	b510      	push	{r4, lr}
    303a:	4a07      	ldr	r2, [pc, #28]	; (3058 <tcv_clo_null+0x20>)
    303c:	4603      	mov	r3, r0
    303e:	6812      	ldr	r2, [r2, #0]
    3040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3044:	b132      	cbz	r2, 3054 <tcv_clo_null+0x1c>
    3046:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    304a:	428c      	cmp	r4, r1
    304c:	bf04      	itt	eq
    304e:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    3052:	2000      	moveq	r0, #0
    3054:	bd10      	pop	{r4, pc}
    3056:	bf00      	nop
    3058:	20000630 	andcs	r0, r0, r0, lsr r6

0000305c <tcv_rcv_null>:
    305c:	4907      	ldr	r1, [pc, #28]	; (307c <tcv_rcv_null+0x20>)
    305e:	9a00      	ldr	r2, [sp, #0]
    3060:	6809      	ldr	r1, [r1, #0]
    3062:	b909      	cbnz	r1, 3068 <tcv_rcv_null+0xc>
    3064:	2000      	movs	r0, #0
    3066:	4770      	bx	lr
    3068:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    306c:	6019      	str	r1, [r3, #0]
    306e:	3101      	adds	r1, #1
    3070:	d0f8      	beq.n	3064 <tcv_rcv_null+0x8>
    3072:	2300      	movs	r3, #0
    3074:	2002      	movs	r0, #2
    3076:	8053      	strh	r3, [r2, #2]
    3078:	8013      	strh	r3, [r2, #0]
    307a:	4770      	bx	lr
    307c:	20000630 	andcs	r0, r0, r0, lsr r6

00003080 <tcv_frm_null>:
    3080:	2000      	movs	r0, #0
    3082:	8048      	strh	r0, [r1, #2]
    3084:	8008      	strh	r0, [r1, #0]
    3086:	4770      	bx	lr

00003088 <tcv_out_null>:
    3088:	2004      	movs	r0, #4
    308a:	4770      	bx	lr

0000308c <tcv_xmt_null>:
    308c:	2001      	movs	r0, #1
    308e:	4770      	bx	lr

00003090 <tcv_ope_null>:
    3090:	b570      	push	{r4, r5, r6, lr}
    3092:	4c0f      	ldr	r4, [pc, #60]	; (30d0 <tcv_ope_null+0x40>)
    3094:	4605      	mov	r5, r0
    3096:	6823      	ldr	r3, [r4, #0]
    3098:	460e      	mov	r6, r1
    309a:	b94b      	cbnz	r3, 30b0 <tcv_ope_null+0x20>
    309c:	200c      	movs	r0, #12
    309e:	f7fe fd59 	bl	1b54 <__pi_malloc>
    30a2:	6020      	str	r0, [r4, #0]
    30a4:	b178      	cbz	r0, 30c6 <tcv_ope_null+0x36>
    30a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    30aa:	e9c0 3300 	strd	r3, r3, [r0]
    30ae:	6083      	str	r3, [r0, #8]
    30b0:	6823      	ldr	r3, [r4, #0]
    30b2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    30b6:	3201      	adds	r2, #1
    30b8:	bf06      	itte	eq
    30ba:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    30be:	2000      	moveq	r0, #0
    30c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    30c4:	bd70      	pop	{r4, r5, r6, pc}
    30c6:	2006      	movs	r0, #6
    30c8:	4902      	ldr	r1, [pc, #8]	; (30d4 <tcv_ope_null+0x44>)
    30ca:	f7fd fd9f 	bl	c0c <__pi_syserror>
    30ce:	bf00      	nop
    30d0:	20000630 	andcs	r0, r0, r0, lsr r6
    30d4:	00005aa4 	andeq	r5, r0, r4, lsr #21

000030d8 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    30d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    30da:	4b18      	ldr	r3, [pc, #96]	; (313c <__outserial+0x64>)
    30dc:	681b      	ldr	r3, [r3, #0]
    30de:	689d      	ldr	r5, [r3, #8]
    30e0:	b130      	cbz	r0, 30f0 <__outserial+0x18>
    30e2:	280a      	cmp	r0, #10
    30e4:	d00d      	beq.n	3102 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    30e6:	b003      	add	sp, #12
    30e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    30ec:	f7fe bb2a 	b.w	1744 <__pi_badstate>
	ptr = data;
    30f0:	4b13      	ldr	r3, [pc, #76]	; (3140 <__outserial+0x68>)
    30f2:	4c14      	ldr	r4, [pc, #80]	; (3144 <__outserial+0x6c>)
    30f4:	601d      	str	r5, [r3, #0]
	if (*ptr)
    30f6:	782b      	ldrb	r3, [r5, #0]
    30f8:	b1e3      	cbz	r3, 3134 <__outserial+0x5c>
		len = strlen (ptr);
    30fa:	4628      	mov	r0, r5
    30fc:	f7fe fc28 	bl	1950 <__pi_strlen>
    3100:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3102:	4e0f      	ldr	r6, [pc, #60]	; (3140 <__outserial+0x68>)
    3104:	4f0f      	ldr	r7, [pc, #60]	; (3144 <__outserial+0x6c>)
    3106:	883b      	ldrh	r3, [r7, #0]
    3108:	2201      	movs	r2, #1
    310a:	9300      	str	r3, [sp, #0]
    310c:	2100      	movs	r1, #0
    310e:	6833      	ldr	r3, [r6, #0]
    3110:	200a      	movs	r0, #10
    3112:	f7fe fc5d 	bl	19d0 <io>
	ptr += quant;
    3116:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    3118:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    311a:	4403      	add	r3, r0
	len -= quant;
    311c:	1a24      	subs	r4, r4, r0
	ptr += quant;
    311e:	6033      	str	r3, [r6, #0]
	len -= quant;
    3120:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    3122:	2c00      	cmp	r4, #0
    3124:	d1ef      	bne.n	3106 <__outserial+0x2e>
		ufree (data);
    3126:	4628      	mov	r0, r5
    3128:	f7fe fcc8 	bl	1abc <__pi_free>
		finish;
    312c:	4620      	mov	r0, r4
    312e:	f7fe fce9 	bl	1b04 <kill>
    3132:	e7e8      	b.n	3106 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3134:	786b      	ldrb	r3, [r5, #1]
    3136:	3303      	adds	r3, #3
    3138:	6023      	str	r3, [r4, #0]
    313a:	e7e2      	b.n	3102 <__outserial+0x2a>
    313c:	200006d4 	ldrdcs	r0, [r0], -r4
    3140:	20000638 	andcs	r0, r0, r8, lsr r6
    3144:	20000634 	andcs	r0, r0, r4, lsr r6

00003148 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    3148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    314a:	4d42      	ldr	r5, [pc, #264]	; (3254 <__inserial+0x10c>)
    314c:	682a      	ldr	r2, [r5, #0]
    314e:	6894      	ldr	r4, [r2, #8]
    3150:	2803      	cmp	r0, #3
    3152:	d87a      	bhi.n	324a <__inserial+0x102>
    3154:	e8df f000 	tbb	[pc, r0]
    3158:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    315c:	4b3e      	ldr	r3, [pc, #248]	; (3258 <__inserial+0x110>)
    315e:	681b      	ldr	r3, [r3, #0]
    3160:	b113      	cbz	r3, 3168 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    3162:	2000      	movs	r0, #0
    3164:	f7fe fcce 	bl	1b04 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3168:	2040      	movs	r0, #64	; 0x40
    316a:	f7fe fcf3 	bl	1b54 <__pi_malloc>
    316e:	4b3b      	ldr	r3, [pc, #236]	; (325c <__inserial+0x114>)
    3170:	4604      	mov	r4, r0
    3172:	6018      	str	r0, [r3, #0]
    3174:	b918      	cbnz	r0, 317e <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    3176:	f7fe fd5b 	bl	1c30 <__pi_waitmem>
		release;
    317a:	f7fe f905 	bl	1388 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    317e:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    3180:	682b      	ldr	r3, [r5, #0]
    3182:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    3184:	4b36      	ldr	r3, [pc, #216]	; (3260 <__inserial+0x118>)
    3186:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    3188:	2001      	movs	r0, #1
    318a:	2200      	movs	r2, #0
    318c:	4d33      	ldr	r5, [pc, #204]	; (325c <__inserial+0x114>)
    318e:	9000      	str	r0, [sp, #0]
    3190:	682b      	ldr	r3, [r5, #0]
    3192:	4611      	mov	r1, r2
    3194:	f7fe fc1c 	bl	19d0 <io>
	if (ptr == (char*) data) { // new line
    3198:	682b      	ldr	r3, [r5, #0]
    319a:	42a3      	cmp	r3, r4
    319c:	d10d      	bne.n	31ba <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    319e:	7823      	ldrb	r3, [r4, #0]
    31a0:	b923      	cbnz	r3, 31ac <__inserial+0x64>
			ptr++;
    31a2:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    31a4:	2002      	movs	r0, #2
			ptr++;
    31a6:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    31a8:	f7fe fb54 	bl	1854 <proceed>
		}

		if (*ptr < 0x20)
    31ac:	682b      	ldr	r3, [r5, #0]
    31ae:	781b      	ldrb	r3, [r3, #0]
    31b0:	2b1f      	cmp	r3, #31
    31b2:	d802      	bhi.n	31ba <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    31b4:	2001      	movs	r0, #1
    31b6:	f7fe fb4d 	bl	1854 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    31ba:	682b      	ldr	r3, [r5, #0]
    31bc:	781a      	ldrb	r2, [r3, #0]
    31be:	2a0a      	cmp	r2, #10
    31c0:	d001      	beq.n	31c6 <__inserial+0x7e>
    31c2:	2a0d      	cmp	r2, #13
    31c4:	d105      	bne.n	31d2 <__inserial+0x8a>
		*ptr = '\0';
    31c6:	2000      	movs	r0, #0
    31c8:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    31ca:	4b23      	ldr	r3, [pc, #140]	; (3258 <__inserial+0x110>)
    31cc:	601c      	str	r4, [r3, #0]
		finish;
    31ce:	f7fe fc99 	bl	1b04 <kill>
	}

	if (len) {
    31d2:	4923      	ldr	r1, [pc, #140]	; (3260 <__inserial+0x118>)
    31d4:	680b      	ldr	r3, [r1, #0]
    31d6:	b123      	cbz	r3, 31e2 <__inserial+0x9a>
		ptr++;
    31d8:	682a      	ldr	r2, [r5, #0]
		len--;
    31da:	3b01      	subs	r3, #1
		ptr++;
    31dc:	3201      	adds	r2, #1
    31de:	602a      	str	r2, [r5, #0]
		len--;
    31e0:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    31e2:	2001      	movs	r0, #1
    31e4:	f7fe fb36 	bl	1854 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    31e8:	2301      	movs	r3, #1
    31ea:	2200      	movs	r2, #0
    31ec:	4d1b      	ldr	r5, [pc, #108]	; (325c <__inserial+0x114>)
    31ee:	9300      	str	r3, [sp, #0]
    31f0:	4611      	mov	r1, r2
    31f2:	682b      	ldr	r3, [r5, #0]
    31f4:	2002      	movs	r0, #2
    31f6:	f7fe fbeb 	bl	19d0 <io>
	len -= 2;
    31fa:	4819      	ldr	r0, [pc, #100]	; (3260 <__inserial+0x118>)
    31fc:	6803      	ldr	r3, [r0, #0]
    31fe:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    3200:	682b      	ldr	r3, [r5, #0]
    3202:	f813 1b01 	ldrb.w	r1, [r3], #1
    3206:	3101      	adds	r1, #1
		len = *ptr + 1;
    3208:	4291      	cmp	r1, r2
    320a:	bfd4      	ite	le
    320c:	6001      	strle	r1, [r0, #0]
    320e:	6002      	strgt	r2, [r0, #0]
	ptr++;
    3210:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    3212:	2200      	movs	r2, #0
    3214:	4f12      	ldr	r7, [pc, #72]	; (3260 <__inserial+0x118>)
    3216:	4d11      	ldr	r5, [pc, #68]	; (325c <__inserial+0x114>)
    3218:	883b      	ldrh	r3, [r7, #0]
    321a:	4611      	mov	r1, r2
    321c:	9300      	str	r3, [sp, #0]
    321e:	682b      	ldr	r3, [r5, #0]
    3220:	2003      	movs	r0, #3
    3222:	f7fe fbd5 	bl	19d0 <io>
	len -= quant;
    3226:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3228:	4606      	mov	r6, r0
	len -= quant;
    322a:	1a18      	subs	r0, r3, r0
    322c:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    322e:	b918      	cbnz	r0, 3238 <__inserial+0xf0>
		__inpline = (char*)data;
    3230:	4b09      	ldr	r3, [pc, #36]	; (3258 <__inserial+0x110>)
    3232:	601c      	str	r4, [r3, #0]
		finish;
    3234:	f7fe fc66 	bl	1b04 <kill>
	}
	ptr += quant;
    3238:	6828      	ldr	r0, [r5, #0]
    323a:	4430      	add	r0, r6
    323c:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    323e:	2003      	movs	r0, #3

endstrand
    3240:	b003      	add	sp, #12
    3242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    3246:	f7fe bb05 	b.w	1854 <proceed>
endstrand
    324a:	b003      	add	sp, #12
    324c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3250:	f7fe ba78 	b.w	1744 <__pi_badstate>
    3254:	200006d4 	ldrdcs	r0, [r0], -r4
    3258:	2000063c 	andcs	r0, r0, ip, lsr r6
    325c:	20000644 	andcs	r0, r0, r4, asr #12
    3260:	20000640 	andcs	r0, r0, r0, asr #12

00003264 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    3264:	f8dc 2000 	ldr.w	r2, [ip]
    3268:	b132      	cbz	r2, 3278 <outc.5724+0x14>
    326a:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    326e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    3272:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    3274:	bf88      	it	hi
    3276:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    3278:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    327c:	3301      	adds	r3, #1
    327e:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    3282:	4770      	bx	lr

00003284 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3288:	461c      	mov	r4, r3
    328a:	ab0c      	add	r3, sp, #48	; 0x30
    328c:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    328e:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    3290:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    3292:	4f86      	ldr	r7, [pc, #536]	; (34ac <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3294:	9001      	str	r0, [sp, #4]
    3296:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    329a:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    329e:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    32a2:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    32a6:	d118      	bne.n	32da <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    32a8:	f892 9001 	ldrb.w	r9, [r2, #1]
    32ac:	1c95      	adds	r5, r2, #2
				outc ('\\');
    32ae:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    32b2:	f1b9 0f00 	cmp.w	r9, #0
    32b6:	d10b      	bne.n	32d0 <__pi_vfparse+0x4c>
				outc ('\\');
    32b8:	205c      	movs	r0, #92	; 0x5c
    32ba:	f7ff ffd3 	bl	3264 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    32be:	4648      	mov	r0, r9
    32c0:	f10d 0c04 	add.w	ip, sp, #4
    32c4:	f7ff ffce 	bl	3264 <outc.5724>
			if (c == '\0')
    32c8:	f1b9 0f00 	cmp.w	r9, #0
    32cc:	d103      	bne.n	32d6 <__pi_vfparse+0x52>
    32ce:	e027      	b.n	3320 <__pi_vfparse+0x9c>
			outc (c);
    32d0:	4648      	mov	r0, r9
				outc (val);
    32d2:	f7ff ffc7 	bl	3264 <outc.5724>
				val = (word) va_arg (ap, aword);
    32d6:	462a      	mov	r2, r5
    32d8:	e7e1      	b.n	329e <__pi_vfparse+0x1a>
		if (c == '%') {
    32da:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    32de:	f040 80e2 	bne.w	34a6 <__pi_vfparse+0x222>
			c = *fm++;
    32e2:	f892 8001 	ldrb.w	r8, [r2, #1]
    32e6:	1c95      	adds	r5, r2, #2
			switch (c) {
    32e8:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    32ec:	f000 80cd 	beq.w	348a <__pi_vfparse+0x206>
    32f0:	d81b      	bhi.n	332a <__pi_vfparse+0xa6>
    32f2:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    32f6:	d033      	beq.n	3360 <__pi_vfparse+0xdc>
    32f8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    32fc:	d067      	beq.n	33ce <__pi_vfparse+0x14a>
    32fe:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    3302:	f000 80bc 	beq.w	347e <__pi_vfparse+0x1fa>
				outc ('%');
    3306:	2025      	movs	r0, #37	; 0x25
    3308:	f10d 0c04 	add.w	ip, sp, #4
    330c:	f7ff ffaa 	bl	3264 <outc.5724>
				outc (c);
    3310:	4640      	mov	r0, r8
    3312:	f10d 0c04 	add.w	ip, sp, #4
    3316:	f7ff ffa5 	bl	3264 <outc.5724>
				if (c == '\0')
    331a:	f1b8 0f00 	cmp.w	r8, #0
    331e:	d1da      	bne.n	32d6 <__pi_vfparse+0x52>
Ret:
				return d;
    3320:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    3324:	b004      	add	sp, #16
    3326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    332a:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    332e:	d017      	beq.n	3360 <__pi_vfparse+0xdc>
    3330:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    3334:	d1e7      	bne.n	3306 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    3336:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    333a:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    333e:	fa1f f983 	uxth.w	r9, r3
    3342:	fa49 f308 	asr.w	r3, r9, r8
    3346:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    334a:	5cf8      	ldrb	r0, [r7, r3]
    334c:	f10d 0c04 	add.w	ip, sp, #4
    3350:	f7ff ff88 	bl	3264 <outc.5724>
					if (i == 0)
    3354:	f1b8 0f00 	cmp.w	r8, #0
    3358:	d0bd      	beq.n	32d6 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    335a:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    335e:	e7f0      	b.n	3342 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    3360:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    3364:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    3368:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    336c:	d10a      	bne.n	3384 <__pi_vfparse+0x100>
    336e:	041b      	lsls	r3, r3, #16
    3370:	d508      	bpl.n	3384 <__pi_vfparse+0x100>
					outc ('-');
    3372:	202d      	movs	r0, #45	; 0x2d
    3374:	f10d 0c04 	add.w	ip, sp, #4
    3378:	f7ff ff74 	bl	3264 <outc.5724>
					val = (~val) + 1;
    337c:	f1c9 0900 	rsb	r9, r9, #0
    3380:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    3384:	2305      	movs	r3, #5
				enci (10000);
    3386:	f242 7810 	movw	r8, #10000	; 0x2710
    338a:	fbb9 f0f8 	udiv	r0, r9, r8
    338e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    3392:	d103      	bne.n	339c <__pi_vfparse+0x118>
    3394:	3b01      	subs	r3, #1
    3396:	d117      	bne.n	33c8 <__pi_vfparse+0x144>
    3398:	f04f 0801 	mov.w	r8, #1
    339c:	fa1f fa80 	uxth.w	sl, r0
    33a0:	f10d 0c04 	add.w	ip, sp, #4
    33a4:	3030      	adds	r0, #48	; 0x30
    33a6:	f7ff ff5d 	bl	3264 <outc.5724>
    33aa:	fbb8 f3f6 	udiv	r3, r8, r6
    33ae:	fb08 991a 	mls	r9, r8, sl, r9
    33b2:	f1b8 0f09 	cmp.w	r8, #9
    33b6:	fa1f f989 	uxth.w	r9, r9
    33ba:	b29b      	uxth	r3, r3
    33bc:	d98b      	bls.n	32d6 <__pi_vfparse+0x52>
    33be:	fbb9 f0f3 	udiv	r0, r9, r3
    33c2:	4698      	mov	r8, r3
    33c4:	b2c0      	uxtb	r0, r0
    33c6:	e7e9      	b.n	339c <__pi_vfparse+0x118>
    33c8:	fbb8 f8f6 	udiv	r8, r8, r6
    33cc:	e7dd      	b.n	338a <__pi_vfparse+0x106>
				c = *fm;
    33ce:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    33d0:	2b64      	cmp	r3, #100	; 0x64
    33d2:	d001      	beq.n	33d8 <__pi_vfparse+0x154>
    33d4:	2b75      	cmp	r3, #117	; 0x75
    33d6:	d132      	bne.n	343e <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    33d8:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    33da:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    33de:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    33e2:	d109      	bne.n	33f8 <__pi_vfparse+0x174>
    33e4:	f1ba 0f00 	cmp.w	sl, #0
    33e8:	da06      	bge.n	33f8 <__pi_vfparse+0x174>
						outc ('-');
    33ea:	202d      	movs	r0, #45	; 0x2d
    33ec:	f10d 0c04 	add.w	ip, sp, #4
    33f0:	f7ff ff38 	bl	3264 <outc.5724>
						val = (~val) + 1;
    33f4:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    33f8:	230a      	movs	r3, #10
					enci (1000000000UL);
    33fa:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 34b0 <__pi_vfparse+0x22c>
    33fe:	fbba f9f8 	udiv	r9, sl, r8
    3402:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    3406:	d103      	bne.n	3410 <__pi_vfparse+0x18c>
    3408:	3b01      	subs	r3, #1
    340a:	d115      	bne.n	3438 <__pi_vfparse+0x1b4>
    340c:	f04f 0801 	mov.w	r8, #1
    3410:	f10d 0c04 	add.w	ip, sp, #4
    3414:	f109 0030 	add.w	r0, r9, #48	; 0x30
    3418:	f7ff ff24 	bl	3264 <outc.5724>
    341c:	f1b8 0f09 	cmp.w	r8, #9
    3420:	fbb8 f3f6 	udiv	r3, r8, r6
    3424:	fb08 aa19 	mls	sl, r8, r9, sl
    3428:	f67f af55 	bls.w	32d6 <__pi_vfparse+0x52>
    342c:	fbba f9f3 	udiv	r9, sl, r3
    3430:	4698      	mov	r8, r3
    3432:	fa5f f989 	uxtb.w	r9, r9
    3436:	e7eb      	b.n	3410 <__pi_vfparse+0x18c>
    3438:	fbb8 f8f6 	udiv	r8, r8, r6
    343c:	e7df      	b.n	33fe <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    343e:	2b78      	cmp	r3, #120	; 0x78
    3440:	d114      	bne.n	346c <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    3442:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    3446:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    344a:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    344c:	fa29 f308 	lsr.w	r3, r9, r8
    3450:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    3454:	5cf8      	ldrb	r0, [r7, r3]
    3456:	f10d 0c04 	add.w	ip, sp, #4
    345a:	f7ff ff03 	bl	3264 <outc.5724>
						if (i == 0)
    345e:	f1b8 0f00 	cmp.w	r8, #0
    3462:	f43f af38 	beq.w	32d6 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    3466:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    346a:	e7ef      	b.n	344c <__pi_vfparse+0x1c8>
					outc ('%');
    346c:	4648      	mov	r0, r9
    346e:	f10d 0c04 	add.w	ip, sp, #4
    3472:	f7ff fef7 	bl	3264 <outc.5724>
					outc ('l');
    3476:	4640      	mov	r0, r8
    3478:	f10d 0c04 	add.w	ip, sp, #4
    347c:	e729      	b.n	32d2 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    347e:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    3482:	f10d 0c04 	add.w	ip, sp, #4
    3486:	b280      	uxth	r0, r0
    3488:	e723      	b.n	32d2 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    348a:	f854 3b04 	ldr.w	r3, [r4], #4
    348e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3492:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    3496:	2800      	cmp	r0, #0
    3498:	f43f af1d 	beq.w	32d6 <__pi_vfparse+0x52>
					outc (*st);
    349c:	f10d 0c04 	add.w	ip, sp, #4
    34a0:	f7ff fee0 	bl	3264 <outc.5724>
					st++;
    34a4:	e7f5      	b.n	3492 <__pi_vfparse+0x20e>
		c = *fm++;
    34a6:	1c55      	adds	r5, r2, #1
    34a8:	e709      	b.n	32be <__pi_vfparse+0x3a>
    34aa:	bf00      	nop
    34ac:	0000502d 	andeq	r5, r0, sp, lsr #32
    34b0:	3b9aca00 	blcc	fe6b5cb8 <_estack+0xde6b0cb8>

000034b4 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    34b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34b8:	460e      	mov	r6, r1
    34ba:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    34bc:	4604      	mov	r4, r0
    34be:	b140      	cbz	r0, 34d2 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    34c0:	4613      	mov	r3, r2
    34c2:	460a      	mov	r2, r1
    34c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    34c8:	f7ff fedc 	bl	3284 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    34cc:	4620      	mov	r0, r4
    34ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    34d2:	4608      	mov	r0, r1
    34d4:	f7fe fa3c 	bl	1950 <__pi_strlen>
    34d8:	f100 0511 	add.w	r5, r0, #17
    34dc:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    34de:	4628      	mov	r0, r5
    34e0:	f7fe fb38 	bl	1b54 <__pi_malloc>
    34e4:	4604      	mov	r4, r0
    34e6:	2800      	cmp	r0, #0
    34e8:	d0f0      	beq.n	34cc <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    34ea:	463b      	mov	r3, r7
    34ec:	4632      	mov	r2, r6
    34ee:	4629      	mov	r1, r5
    34f0:	f7ff fec8 	bl	3284 <__pi_vfparse>
    34f4:	4285      	cmp	r5, r0
    34f6:	4680      	mov	r8, r0
    34f8:	d2e8      	bcs.n	34cc <vform+0x18>
		ufree (res);
    34fa:	4620      	mov	r0, r4
    34fc:	f7fe fade 	bl	1abc <__pi_free>
		goto Again;
    3500:	4645      	mov	r5, r8
    3502:	e7ec      	b.n	34de <vform+0x2a>

00003504 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    3504:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    3506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    350a:	2800      	cmp	r0, #0
    350c:	f000 81b5 	beq.w	387a <vscan+0x376>
    3510:	2900      	cmp	r1, #0
    3512:	f000 81b4 	beq.w	387e <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    3516:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    3518:	270a      	movs	r7, #10
    351a:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    351c:	f8df c370 	ldr.w	ip, [pc, #880]	; 3890 <vscan+0x38c>
    3520:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    3522:	f811 0b01 	ldrb.w	r0, [r1], #1
    3526:	b170      	cbz	r0, 3546 <vscan+0x42>
		if (*fmt++ != '%')
    3528:	2825      	cmp	r0, #37	; 0x25
    352a:	d1f9      	bne.n	3520 <vscan+0x1c>
		switch (*fmt++) {
    352c:	7870      	ldrb	r0, [r6, #1]
    352e:	1cb1      	adds	r1, r6, #2
    3530:	286c      	cmp	r0, #108	; 0x6c
    3532:	f000 80e1 	beq.w	36f8 <vscan+0x1f4>
    3536:	d809      	bhi.n	354c <vscan+0x48>
    3538:	2863      	cmp	r0, #99	; 0x63
    353a:	f000 8184 	beq.w	3846 <vscan+0x342>
    353e:	2864      	cmp	r0, #100	; 0x64
    3540:	d043      	beq.n	35ca <vscan+0xc6>
    3542:	2800      	cmp	r0, #0
    3544:	d1ec      	bne.n	3520 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    3546:	4620      	mov	r0, r4
    3548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    354c:	2875      	cmp	r0, #117	; 0x75
    354e:	d074      	beq.n	363a <vscan+0x136>
    3550:	2878      	cmp	r0, #120	; 0x78
    3552:	f000 8098 	beq.w	3686 <vscan+0x182>
    3556:	2873      	cmp	r0, #115	; 0x73
    3558:	d1e2      	bne.n	3520 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    355a:	7818      	ldrb	r0, [r3, #0]
    355c:	461e      	mov	r6, r3
    355e:	f1a0 0e09 	sub.w	lr, r0, #9
    3562:	fa5f fe8e 	uxtb.w	lr, lr
    3566:	f1be 0f17 	cmp.w	lr, #23
    356a:	4698      	mov	r8, r3
    356c:	f103 0301 	add.w	r3, r3, #1
    3570:	f240 8173 	bls.w	385a <vscan+0x356>
			if (*buf == '\0')
    3574:	2800      	cmp	r0, #0
    3576:	d0e6      	beq.n	3546 <vscan+0x42>
			if (*buf != ',') {
    3578:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    357a:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    357e:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    3582:	d00e      	beq.n	35a2 <vscan+0x9e>
    3584:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    3586:	f818 3b01 	ldrb.w	r3, [r8], #1
    358a:	f1a3 0009 	sub.w	r0, r3, #9
    358e:	2801      	cmp	r0, #1
    3590:	d907      	bls.n	35a2 <vscan+0x9e>
    3592:	2b0d      	cmp	r3, #13
    3594:	d005      	beq.n	35a2 <vscan+0x9e>
    3596:	2b2c      	cmp	r3, #44	; 0x2c
    3598:	d003      	beq.n	35a2 <vscan+0x9e>
    359a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    359e:	f040 8163 	bne.w	3868 <vscan+0x364>
			while (isspace (*buf)) buf++;
    35a2:	f896 8000 	ldrb.w	r8, [r6]
    35a6:	4633      	mov	r3, r6
    35a8:	f1a8 0009 	sub.w	r0, r8, #9
    35ac:	b2c0      	uxtb	r0, r0
    35ae:	2817      	cmp	r0, #23
    35b0:	f106 0601 	add.w	r6, r6, #1
    35b4:	f240 815b 	bls.w	386e <vscan+0x36a>
			if (*buf == ',') buf++;
    35b8:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    35bc:	bf08      	it	eq
    35be:	4633      	moveq	r3, r6
			*sap = '\0';
    35c0:	f88e 5000 	strb.w	r5, [lr]
			break;
    35c4:	e7ac      	b.n	3520 <vscan+0x1c>
		    case 'd': scani (word); break;
    35c6:	2e00      	cmp	r6, #0
    35c8:	d0bd      	beq.n	3546 <vscan+0x42>
    35ca:	469e      	mov	lr, r3
    35cc:	f813 6b01 	ldrb.w	r6, [r3], #1
    35d0:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    35d4:	2809      	cmp	r0, #9
    35d6:	d923      	bls.n	3620 <vscan+0x11c>
    35d8:	2e2d      	cmp	r6, #45	; 0x2d
    35da:	d001      	beq.n	35e0 <vscan+0xdc>
    35dc:	2e2b      	cmp	r6, #43	; 0x2b
    35de:	d1f2      	bne.n	35c6 <vscan+0xc2>
    35e0:	7818      	ldrb	r0, [r3, #0]
    35e2:	469e      	mov	lr, r3
    35e4:	3830      	subs	r0, #48	; 0x30
    35e6:	2809      	cmp	r0, #9
    35e8:	d8ef      	bhi.n	35ca <vscan+0xc6>
    35ea:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    35ee:	f1d9 0800 	rsbs	r8, r9, #0
    35f2:	eb48 0809 	adc.w	r8, r8, r9
    35f6:	f852 6b04 	ldr.w	r6, [r2], #4
    35fa:	3401      	adds	r4, #1
    35fc:	8035      	strh	r5, [r6, #0]
    35fe:	f89e 0000 	ldrb.w	r0, [lr]
    3602:	4673      	mov	r3, lr
    3604:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    3608:	f1b9 0f09 	cmp.w	r9, #9
    360c:	f10e 0e01 	add.w	lr, lr, #1
    3610:	d909      	bls.n	3626 <vscan+0x122>
    3612:	f1b8 0f00 	cmp.w	r8, #0
    3616:	d183      	bne.n	3520 <vscan+0x1c>
    3618:	8830      	ldrh	r0, [r6, #0]
    361a:	4240      	negs	r0, r0
    361c:	8030      	strh	r0, [r6, #0]
    361e:	e77f      	b.n	3520 <vscan+0x1c>
    3620:	f04f 0800 	mov.w	r8, #0
    3624:	e7e7      	b.n	35f6 <vscan+0xf2>
    3626:	8833      	ldrh	r3, [r6, #0]
    3628:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    362c:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    3630:	3030      	adds	r0, #48	; 0x30
    3632:	8030      	strh	r0, [r6, #0]
    3634:	e7e3      	b.n	35fe <vscan+0xfa>
		    case 'u': scanu (word); break;
    3636:	2800      	cmp	r0, #0
    3638:	d085      	beq.n	3546 <vscan+0x42>
    363a:	7818      	ldrb	r0, [r3, #0]
    363c:	461e      	mov	r6, r3
    363e:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3642:	f1be 0f09 	cmp.w	lr, #9
    3646:	f103 0301 	add.w	r3, r3, #1
    364a:	d8f4      	bhi.n	3636 <vscan+0x132>
    364c:	f852 eb04 	ldr.w	lr, [r2], #4
    3650:	3401      	adds	r4, #1
    3652:	f8ae 5000 	strh.w	r5, [lr]
    3656:	7830      	ldrb	r0, [r6, #0]
    3658:	4633      	mov	r3, r6
    365a:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    365e:	f1b8 0f09 	cmp.w	r8, #9
    3662:	f106 0601 	add.w	r6, r6, #1
    3666:	f63f af5b 	bhi.w	3520 <vscan+0x1c>
    366a:	f8be 3000 	ldrh.w	r3, [lr]
    366e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3672:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    3676:	3830      	subs	r0, #48	; 0x30
    3678:	f8ae 0000 	strh.w	r0, [lr]
    367c:	e7eb      	b.n	3656 <vscan+0x152>
		    case 'x': scanx (word); break;
    367e:	f1be 0f00 	cmp.w	lr, #0
    3682:	f43f af60 	beq.w	3546 <vscan+0x42>
    3686:	f893 e000 	ldrb.w	lr, [r3]
    368a:	461e      	mov	r6, r3
    368c:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3690:	2809      	cmp	r0, #9
    3692:	f103 0301 	add.w	r3, r3, #1
    3696:	d904      	bls.n	36a2 <vscan+0x19e>
    3698:	f02e 0020 	bic.w	r0, lr, #32
    369c:	3841      	subs	r0, #65	; 0x41
    369e:	2805      	cmp	r0, #5
    36a0:	d8ed      	bhi.n	367e <vscan+0x17a>
    36a2:	f852 eb04 	ldr.w	lr, [r2], #4
    36a6:	3401      	adds	r4, #1
    36a8:	f8ae 5000 	strh.w	r5, [lr]
    36ac:	f106 0805 	add.w	r8, r6, #5
    36b0:	f896 9000 	ldrb.w	r9, [r6]
    36b4:	4633      	mov	r3, r6
    36b6:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    36ba:	b2c0      	uxtb	r0, r0
    36bc:	2809      	cmp	r0, #9
    36be:	f106 0601 	add.w	r6, r6, #1
    36c2:	f240 80de 	bls.w	3882 <vscan+0x37e>
    36c6:	f029 0020 	bic.w	r0, r9, #32
    36ca:	3841      	subs	r0, #65	; 0x41
    36cc:	2805      	cmp	r0, #5
    36ce:	f63f af27 	bhi.w	3520 <vscan+0x1c>
    36d2:	4546      	cmp	r6, r8
    36d4:	f43f af24 	beq.w	3520 <vscan+0x1c>
    36d8:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    36dc:	2b05      	cmp	r3, #5
    36de:	bf94      	ite	ls
    36e0:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    36e4:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    36e8:	b2c0      	uxtb	r0, r0
    36ea:	f8be 3000 	ldrh.w	r3, [lr]
    36ee:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    36f2:	f8ae 0000 	strh.w	r0, [lr]
    36f6:	e7db      	b.n	36b0 <vscan+0x1ac>
			switch (*fmt++) {
    36f8:	78b0      	ldrb	r0, [r6, #2]
    36fa:	1cf1      	adds	r1, r6, #3
    36fc:	2875      	cmp	r0, #117	; 0x75
    36fe:	d07d      	beq.n	37fc <vscan+0x2f8>
    3700:	d831      	bhi.n	3766 <vscan+0x262>
    3702:	2800      	cmp	r0, #0
    3704:	f43f af1f 	beq.w	3546 <vscan+0x42>
    3708:	2864      	cmp	r0, #100	; 0x64
    370a:	f47f af09 	bne.w	3520 <vscan+0x1c>
    370e:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    3710:	f813 6b01 	ldrb.w	r6, [r3], #1
    3714:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3718:	2809      	cmp	r0, #9
    371a:	d962      	bls.n	37e2 <vscan+0x2de>
    371c:	2e2d      	cmp	r6, #45	; 0x2d
    371e:	d001      	beq.n	3724 <vscan+0x220>
    3720:	2e2b      	cmp	r6, #43	; 0x2b
    3722:	d15b      	bne.n	37dc <vscan+0x2d8>
    3724:	7818      	ldrb	r0, [r3, #0]
    3726:	4698      	mov	r8, r3
    3728:	3830      	subs	r0, #48	; 0x30
    372a:	2809      	cmp	r0, #9
    372c:	d8ef      	bhi.n	370e <vscan+0x20a>
    372e:	3e2d      	subs	r6, #45	; 0x2d
    3730:	4270      	negs	r0, r6
    3732:	4170      	adcs	r0, r6
    3734:	f852 eb04 	ldr.w	lr, [r2], #4
    3738:	3401      	adds	r4, #1
    373a:	f8ce 5000 	str.w	r5, [lr]
    373e:	f898 6000 	ldrb.w	r6, [r8]
    3742:	4643      	mov	r3, r8
    3744:	3e30      	subs	r6, #48	; 0x30
    3746:	fa5f f986 	uxtb.w	r9, r6
    374a:	f1b9 0f09 	cmp.w	r9, #9
    374e:	f108 0801 	add.w	r8, r8, #1
    3752:	d948      	bls.n	37e6 <vscan+0x2e2>
    3754:	2800      	cmp	r0, #0
    3756:	f47f aee3 	bne.w	3520 <vscan+0x1c>
    375a:	f8de 0000 	ldr.w	r0, [lr]
    375e:	4240      	negs	r0, r0
    3760:	f8ce 0000 	str.w	r0, [lr]
    3764:	e6dc      	b.n	3520 <vscan+0x1c>
    3766:	2878      	cmp	r0, #120	; 0x78
    3768:	f47f aeda 	bne.w	3520 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    376c:	f893 e000 	ldrb.w	lr, [r3]
    3770:	461e      	mov	r6, r3
    3772:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3776:	2809      	cmp	r0, #9
    3778:	f103 0301 	add.w	r3, r3, #1
    377c:	d904      	bls.n	3788 <vscan+0x284>
    377e:	f02e 0020 	bic.w	r0, lr, #32
    3782:	3841      	subs	r0, #65	; 0x41
    3784:	2805      	cmp	r0, #5
    3786:	d85a      	bhi.n	383e <vscan+0x33a>
    3788:	f852 eb04 	ldr.w	lr, [r2], #4
    378c:	3401      	adds	r4, #1
    378e:	f8ce 5000 	str.w	r5, [lr]
    3792:	f106 0809 	add.w	r8, r6, #9
    3796:	f896 9000 	ldrb.w	r9, [r6]
    379a:	4633      	mov	r3, r6
    379c:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    37a0:	b2c0      	uxtb	r0, r0
    37a2:	2809      	cmp	r0, #9
    37a4:	f106 0601 	add.w	r6, r6, #1
    37a8:	d96f      	bls.n	388a <vscan+0x386>
    37aa:	f029 0020 	bic.w	r0, r9, #32
    37ae:	3841      	subs	r0, #65	; 0x41
    37b0:	2805      	cmp	r0, #5
    37b2:	f63f aeb5 	bhi.w	3520 <vscan+0x1c>
    37b6:	4546      	cmp	r6, r8
    37b8:	f43f aeb2 	beq.w	3520 <vscan+0x1c>
    37bc:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    37c0:	2b05      	cmp	r3, #5
    37c2:	bf94      	ite	ls
    37c4:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    37c8:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    37cc:	b2c0      	uxtb	r0, r0
    37ce:	f8de 3000 	ldr.w	r3, [lr]
    37d2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    37d6:	f8ce 0000 	str.w	r0, [lr]
    37da:	e7dc      	b.n	3796 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    37dc:	2e00      	cmp	r6, #0
    37de:	d196      	bne.n	370e <vscan+0x20a>
    37e0:	e6b1      	b.n	3546 <vscan+0x42>
    37e2:	2000      	movs	r0, #0
    37e4:	e7a6      	b.n	3734 <vscan+0x230>
    37e6:	f8de 3000 	ldr.w	r3, [lr]
    37ea:	b2b6      	uxth	r6, r6
    37ec:	437b      	muls	r3, r7
    37ee:	1b9e      	subs	r6, r3, r6
    37f0:	f8ce 6000 	str.w	r6, [lr]
    37f4:	e7a3      	b.n	373e <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    37f6:	2800      	cmp	r0, #0
    37f8:	f43f aea5 	beq.w	3546 <vscan+0x42>
    37fc:	7818      	ldrb	r0, [r3, #0]
    37fe:	461e      	mov	r6, r3
    3800:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3804:	f1be 0f09 	cmp.w	lr, #9
    3808:	f103 0301 	add.w	r3, r3, #1
    380c:	d8f3      	bhi.n	37f6 <vscan+0x2f2>
    380e:	f852 eb04 	ldr.w	lr, [r2], #4
    3812:	3401      	adds	r4, #1
    3814:	f8ce 5000 	str.w	r5, [lr]
    3818:	7830      	ldrb	r0, [r6, #0]
    381a:	4633      	mov	r3, r6
    381c:	3830      	subs	r0, #48	; 0x30
    381e:	fa5f f880 	uxtb.w	r8, r0
    3822:	f1b8 0f09 	cmp.w	r8, #9
    3826:	f106 0601 	add.w	r6, r6, #1
    382a:	f63f ae79 	bhi.w	3520 <vscan+0x1c>
    382e:	f8de 3000 	ldr.w	r3, [lr]
    3832:	b280      	uxth	r0, r0
    3834:	fb07 0003 	mla	r0, r7, r3, r0
    3838:	f8ce 0000 	str.w	r0, [lr]
    383c:	e7ec      	b.n	3818 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    383e:	f1be 0f00 	cmp.w	lr, #0
    3842:	d193      	bne.n	376c <vscan+0x268>
    3844:	e67f      	b.n	3546 <vscan+0x42>
			if ((c = *buf++) == '\0')
    3846:	f813 0b01 	ldrb.w	r0, [r3], #1
    384a:	2800      	cmp	r0, #0
    384c:	f43f ae7b 	beq.w	3546 <vscan+0x42>
			sap = va_arg (ap, char*);
    3850:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    3854:	3401      	adds	r4, #1
			*sap = c;
    3856:	7030      	strb	r0, [r6, #0]
			break;
    3858:	e662      	b.n	3520 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    385a:	fa2c fe0e 	lsr.w	lr, ip, lr
    385e:	f01e 0f01 	tst.w	lr, #1
    3862:	f47f ae7a 	bne.w	355a <vscan+0x56>
    3866:	e687      	b.n	3578 <vscan+0x74>
						*sap++ = *buf++;
    3868:	f80e 3b01 	strb.w	r3, [lr], #1
    386c:	e68a      	b.n	3584 <vscan+0x80>
			while (isspace (*buf)) buf++;
    386e:	fa2c f000 	lsr.w	r0, ip, r0
    3872:	07c0      	lsls	r0, r0, #31
    3874:	f53f ae95 	bmi.w	35a2 <vscan+0x9e>
    3878:	e6a2      	b.n	35c0 <vscan+0xbc>
		return 0;
    387a:	4604      	mov	r4, r0
    387c:	e663      	b.n	3546 <vscan+0x42>
    387e:	460c      	mov	r4, r1
    3880:	e661      	b.n	3546 <vscan+0x42>
		    case 'x': scanx (word); break;
    3882:	4546      	cmp	r6, r8
    3884:	f47f af31 	bne.w	36ea <vscan+0x1e6>
    3888:	e64a      	b.n	3520 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    388a:	4546      	cmp	r6, r8
    388c:	d19f      	bne.n	37ce <vscan+0x2ca>
    388e:	e647      	b.n	3520 <vscan+0x1c>
    3890:	00800013 	addeq	r0, r0, r3, lsl r0

00003894 <SafeHapiVoid>:
    3894:	b570      	push	{r4, r5, r6, lr}
    3896:	4606      	mov	r6, r0
    3898:	f000 f844 	bl	3924 <NOROM_CPUcpsid>
    389c:	4605      	mov	r5, r0
    389e:	4c06      	ldr	r4, [pc, #24]	; (38b8 <SafeHapiVoid+0x24>)
    38a0:	6823      	ldr	r3, [r4, #0]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d0fb      	beq.n	389e <SafeHapiVoid+0xa>
    38a6:	47b0      	blx	r6
    38a8:	2301      	movs	r3, #1
    38aa:	6023      	str	r3, [r4, #0]
    38ac:	b91d      	cbnz	r5, 38b6 <SafeHapiVoid+0x22>
    38ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    38b2:	f000 b83b 	b.w	392c <NOROM_CPUcpsie>
    38b6:	bd70      	pop	{r4, r5, r6, pc}
    38b8:	400c8000 	andmi	r8, ip, r0

000038bc <NOROM_AONBatMonTemperatureGetDegC>:
    38bc:	4b08      	ldr	r3, [pc, #32]	; (38e0 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    38be:	6818      	ldr	r0, [r3, #0]
    38c0:	4b08      	ldr	r3, [pc, #32]	; (38e4 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    38c2:	7819      	ldrb	r1, [r3, #0]
    38c4:	4b08      	ldr	r3, [pc, #32]	; (38e8 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	f340 0310 	sbfx	r3, r0, #0, #17
    38cc:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    38d0:	b248      	sxtb	r0, r1
    38d2:	4350      	muls	r0, r2
    38d4:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    38d8:	3080      	adds	r0, #128	; 0x80
    38da:	1200      	asrs	r0, r0, #8
    38dc:	4770      	bx	lr
    38de:	bf00      	nop
    38e0:	40095030 	andmi	r5, r9, r0, lsr r0
    38e4:	5000130c 	andpl	r1, r0, ip, lsl #6
    38e8:	40095028 	andmi	r5, r9, r8, lsr #32

000038ec <NOROM_AONRTCCurrentCompareValueGet>:
    38ec:	4a05      	ldr	r2, [pc, #20]	; (3904 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    38ee:	4906      	ldr	r1, [pc, #24]	; (3908 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    38f0:	6813      	ldr	r3, [r2, #0]
    38f2:	6808      	ldr	r0, [r1, #0]
    38f4:	6812      	ldr	r2, [r2, #0]
    38f6:	4293      	cmp	r3, r2
    38f8:	d1f8      	bne.n	38ec <NOROM_AONRTCCurrentCompareValueGet>
    38fa:	041b      	lsls	r3, r3, #16
    38fc:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3900:	4770      	bx	lr
    3902:	bf00      	nop
    3904:	40092008 	andmi	r2, r9, r8
    3908:	4009200c 	andmi	r2, r9, ip

0000390c <NOROM_AONRTCCurrent64BitValueGet>:
    390c:	4b03      	ldr	r3, [pc, #12]	; (391c <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    390e:	4904      	ldr	r1, [pc, #16]	; (3920 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3910:	681a      	ldr	r2, [r3, #0]
    3912:	6808      	ldr	r0, [r1, #0]
    3914:	6819      	ldr	r1, [r3, #0]
    3916:	4291      	cmp	r1, r2
    3918:	d1f8      	bne.n	390c <NOROM_AONRTCCurrent64BitValueGet>
    391a:	4770      	bx	lr
    391c:	40092008 	andmi	r2, r9, r8
    3920:	4009200c 	andmi	r2, r9, ip

00003924 <NOROM_CPUcpsid>:
    3924:	f3ef 8010 	mrs	r0, PRIMASK
    3928:	b672      	cpsid	i
    392a:	4770      	bx	lr

0000392c <NOROM_CPUcpsie>:
    392c:	f3ef 8010 	mrs	r0, PRIMASK
    3930:	b662      	cpsie	i
    3932:	4770      	bx	lr

00003934 <NOROM_OSCClockSourceSet>:
    3934:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3936:	460c      	mov	r4, r1
    3938:	07c1      	lsls	r1, r0, #31
    393a:	4605      	mov	r5, r0
    393c:	d509      	bpl.n	3952 <NOROM_OSCClockSourceSet+0x1e>
    393e:	4b12      	ldr	r3, [pc, #72]	; (3988 <NOROM_OSCClockSourceSet+0x54>)
    3940:	b2a2      	uxth	r2, r4
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	2100      	movs	r1, #0
    3946:	9200      	str	r2, [sp, #0]
    3948:	685e      	ldr	r6, [r3, #4]
    394a:	4810      	ldr	r0, [pc, #64]	; (398c <NOROM_OSCClockSourceSet+0x58>)
    394c:	2201      	movs	r2, #1
    394e:	460b      	mov	r3, r1
    3950:	47b0      	blx	r6
    3952:	07aa      	lsls	r2, r5, #30
    3954:	d509      	bpl.n	396a <NOROM_OSCClockSourceSet+0x36>
    3956:	4b0c      	ldr	r3, [pc, #48]	; (3988 <NOROM_OSCClockSourceSet+0x54>)
    3958:	b2a2      	uxth	r2, r4
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	9200      	str	r2, [sp, #0]
    395e:	685e      	ldr	r6, [r3, #4]
    3960:	480a      	ldr	r0, [pc, #40]	; (398c <NOROM_OSCClockSourceSet+0x58>)
    3962:	2100      	movs	r1, #0
    3964:	2202      	movs	r2, #2
    3966:	2301      	movs	r3, #1
    3968:	47b0      	blx	r6
    396a:	076b      	lsls	r3, r5, #29
    396c:	d509      	bpl.n	3982 <NOROM_OSCClockSourceSet+0x4e>
    396e:	4b06      	ldr	r3, [pc, #24]	; (3988 <NOROM_OSCClockSourceSet+0x54>)
    3970:	b2a4      	uxth	r4, r4
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	9400      	str	r4, [sp, #0]
    3976:	685c      	ldr	r4, [r3, #4]
    3978:	4804      	ldr	r0, [pc, #16]	; (398c <NOROM_OSCClockSourceSet+0x58>)
    397a:	2100      	movs	r1, #0
    397c:	220c      	movs	r2, #12
    397e:	2302      	movs	r3, #2
    3980:	47a0      	blx	r4
    3982:	b002      	add	sp, #8
    3984:	bd70      	pop	{r4, r5, r6, pc}
    3986:	bf00      	nop
    3988:	100001a4 	andne	r0, r0, r4, lsr #3
    398c:	400ca000 	andmi	sl, ip, r0

00003990 <NOROM_OSCClockSourceGet>:
    3990:	b510      	push	{r4, lr}
    3992:	4b08      	ldr	r3, [pc, #32]	; (39b4 <NOROM_OSCClockSourceGet+0x24>)
    3994:	2804      	cmp	r0, #4
    3996:	681b      	ldr	r3, [r3, #0]
    3998:	f04f 0134 	mov.w	r1, #52	; 0x34
    399c:	68dc      	ldr	r4, [r3, #12]
    399e:	bf07      	ittee	eq
    39a0:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    39a4:	231d      	moveq	r3, #29
    39a6:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    39aa:	231c      	movne	r3, #28
    39ac:	4802      	ldr	r0, [pc, #8]	; (39b8 <NOROM_OSCClockSourceGet+0x28>)
    39ae:	47a0      	blx	r4
    39b0:	bd10      	pop	{r4, pc}
    39b2:	bf00      	nop
    39b4:	100001a4 	andne	r0, r0, r4, lsr #3
    39b8:	400ca000 	andmi	sl, ip, r0

000039bc <NOROM_OSCHF_TurnOnXosc>:
    39bc:	b508      	push	{r3, lr}
    39be:	2003      	movs	r0, #3
    39c0:	2101      	movs	r1, #1
    39c2:	f7ff ffb7 	bl	3934 <NOROM_OSCClockSourceSet>
    39c6:	f7ff ff91 	bl	38ec <NOROM_AONRTCCurrentCompareValueGet>
    39ca:	4b01      	ldr	r3, [pc, #4]	; (39d0 <NOROM_OSCHF_TurnOnXosc+0x14>)
    39cc:	6098      	str	r0, [r3, #8]
    39ce:	bd08      	pop	{r3, pc}
    39d0:	20000648 	andcs	r0, r0, r8, asr #12

000039d4 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    39d4:	b510      	push	{r4, lr}
    39d6:	2001      	movs	r0, #1
    39d8:	f7ff ffda 	bl	3990 <NOROM_OSCClockSourceGet>
    39dc:	2801      	cmp	r0, #1
    39de:	d01c      	beq.n	3a1a <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    39e0:	4b0f      	ldr	r3, [pc, #60]	; (3a20 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    39e2:	4810      	ldr	r0, [pc, #64]	; (3a24 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	2134      	movs	r1, #52	; 0x34
    39e8:	68dc      	ldr	r4, [r3, #12]
    39ea:	2201      	movs	r2, #1
    39ec:	2300      	movs	r3, #0
    39ee:	47a0      	blx	r4
    39f0:	b1a0      	cbz	r0, 3a1c <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    39f2:	4b0d      	ldr	r3, [pc, #52]	; (3a28 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    39f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
    39f6:	f7ff ff4d 	bl	3894 <SafeHapiVoid>
    39fa:	f7ff ff77 	bl	38ec <NOROM_AONRTCCurrentCompareValueGet>
    39fe:	4a0b      	ldr	r2, [pc, #44]	; (3a2c <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3a00:	6893      	ldr	r3, [r2, #8]
    3a02:	60d0      	str	r0, [r2, #12]
    3a04:	1ac0      	subs	r0, r0, r3
    3a06:	4b0a      	ldr	r3, [pc, #40]	; (3a30 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3a08:	4358      	muls	r0, r3
    3a0a:	6813      	ldr	r3, [r2, #0]
    3a0c:	0c00      	lsrs	r0, r0, #16
    3a0e:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3a12:	4283      	cmp	r3, r0
    3a14:	bf94      	ite	ls
    3a16:	6010      	strls	r0, [r2, #0]
    3a18:	6013      	strhi	r3, [r2, #0]
    3a1a:	2001      	movs	r0, #1
    3a1c:	bd10      	pop	{r4, pc}
    3a1e:	bf00      	nop
    3a20:	100001a4 	andne	r0, r0, r4, lsr #3
    3a24:	400ca000 	andmi	sl, ip, r0
    3a28:	10000048 	andne	r0, r0, r8, asr #32
    3a2c:	20000648 	andcs	r0, r0, r8, asr #12
    3a30:	000f4240 	andeq	r4, pc, r0, asr #4

00003a34 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3a34:	b510      	push	{r4, lr}
    3a36:	2003      	movs	r0, #3
    3a38:	2100      	movs	r1, #0
    3a3a:	f7ff ff7b 	bl	3934 <NOROM_OSCClockSourceSet>
    3a3e:	2001      	movs	r0, #1
    3a40:	f7ff ffa6 	bl	3990 <NOROM_OSCClockSourceGet>
    3a44:	b118      	cbz	r0, 3a4e <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    3a46:	4b06      	ldr	r3, [pc, #24]	; (3a60 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    3a48:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3a4a:	f7ff ff23 	bl	3894 <SafeHapiVoid>
    3a4e:	f7ff ff4d 	bl	38ec <NOROM_AONRTCCurrentCompareValueGet>
    3a52:	4c04      	ldr	r4, [pc, #16]	; (3a64 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3a54:	6060      	str	r0, [r4, #4]
    3a56:	f7ff ff31 	bl	38bc <NOROM_AONBatMonTemperatureGetDegC>
    3a5a:	6120      	str	r0, [r4, #16]
    3a5c:	bd10      	pop	{r4, pc}
    3a5e:	bf00      	nop
    3a60:	10000048 	andne	r0, r0, r8, asr #32
    3a64:	20000648 	andcs	r0, r0, r8, asr #12

00003a68 <NOROM_RFCDoorbellSendTo>:
    3a68:	4a07      	ldr	r2, [pc, #28]	; (3a88 <NOROM_RFCDoorbellSendTo+0x20>)
    3a6a:	6811      	ldr	r1, [r2, #0]
    3a6c:	2900      	cmp	r1, #0
    3a6e:	d1fb      	bne.n	3a68 <NOROM_RFCDoorbellSendTo>
    3a70:	4b06      	ldr	r3, [pc, #24]	; (3a8c <NOROM_RFCDoorbellSendTo+0x24>)
    3a72:	6019      	str	r1, [r3, #0]
    3a74:	6010      	str	r0, [r2, #0]
    3a76:	681a      	ldr	r2, [r3, #0]
    3a78:	2a00      	cmp	r2, #0
    3a7a:	d0fc      	beq.n	3a76 <NOROM_RFCDoorbellSendTo+0xe>
    3a7c:	4b03      	ldr	r3, [pc, #12]	; (3a8c <NOROM_RFCDoorbellSendTo+0x24>)
    3a7e:	2200      	movs	r2, #0
    3a80:	601a      	str	r2, [r3, #0]
    3a82:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3a86:	4770      	bx	lr
    3a88:	40041000 	andmi	r1, r4, r0
    3a8c:	4004101c 	andmi	r1, r4, ip, lsl r0

00003a90 <NOROM_RFCSynthPowerDown>:
    3a90:	4a0e      	ldr	r2, [pc, #56]	; (3acc <NOROM_RFCSynthPowerDown+0x3c>)
    3a92:	490f      	ldr	r1, [pc, #60]	; (3ad0 <NOROM_RFCSynthPowerDown+0x40>)
    3a94:	6813      	ldr	r3, [r2, #0]
    3a96:	2050      	movs	r0, #80	; 0x50
    3a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3a9c:	f023 0302 	bic.w	r3, r3, #2
    3aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3aa4:	6013      	str	r3, [r2, #0]
    3aa6:	4b0b      	ldr	r3, [pc, #44]	; (3ad4 <NOROM_RFCSynthPowerDown+0x44>)
    3aa8:	2203      	movs	r2, #3
    3aaa:	601a      	str	r2, [r3, #0]
    3aac:	f241 0330 	movw	r3, #4144	; 0x1030
    3ab0:	4a09      	ldr	r2, [pc, #36]	; (3ad8 <NOROM_RFCSynthPowerDown+0x48>)
    3ab2:	600b      	str	r3, [r1, #0]
    3ab4:	2301      	movs	r3, #1
    3ab6:	6013      	str	r3, [r2, #0]
    3ab8:	6008      	str	r0, [r1, #0]
    3aba:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3abe:	6013      	str	r3, [r2, #0]
    3ac0:	6008      	str	r0, [r1, #0]
    3ac2:	6013      	str	r3, [r2, #0]
    3ac4:	f842 3c0c 	str.w	r3, [r2, #-12]
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop
    3acc:	60040000 	andvs	r0, r4, r0
    3ad0:	40044114 	andmi	r4, r4, r4, lsl r1
    3ad4:	40044108 	andmi	r4, r4, r8, lsl #2
    3ad8:	4004410c 	andmi	r4, r4, ip, lsl #2

00003adc <NOROM_RFCRfTrimRead>:
    3adc:	f640 0202 	movw	r2, #2050	; 0x802
    3ae0:	8803      	ldrh	r3, [r0, #0]
    3ae2:	4293      	cmp	r3, r2
    3ae4:	d006      	beq.n	3af4 <NOROM_RFCRfTrimRead+0x18>
    3ae6:	f643 0207 	movw	r2, #14343	; 0x3807
    3aea:	4293      	cmp	r3, r2
    3aec:	d104      	bne.n	3af8 <NOROM_RFCRfTrimRead+0x1c>
    3aee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3af2:	e002      	b.n	3afa <NOROM_RFCRfTrimRead+0x1e>
    3af4:	7bc3      	ldrb	r3, [r0, #15]
    3af6:	e000      	b.n	3afa <NOROM_RFCRfTrimRead+0x1e>
    3af8:	2300      	movs	r3, #0
    3afa:	4a36      	ldr	r2, [pc, #216]	; (3bd4 <NOROM_RFCRfTrimRead+0xf8>)
    3afc:	2b0a      	cmp	r3, #10
    3afe:	6812      	ldr	r2, [r2, #0]
    3b00:	600a      	str	r2, [r1, #0]
    3b02:	d031      	beq.n	3b68 <NOROM_RFCRfTrimRead+0x8c>
    3b04:	dc10      	bgt.n	3b28 <NOROM_RFCRfTrimRead+0x4c>
    3b06:	2b05      	cmp	r3, #5
    3b08:	d021      	beq.n	3b4e <NOROM_RFCRfTrimRead+0x72>
    3b0a:	2b06      	cmp	r3, #6
    3b0c:	d153      	bne.n	3bb6 <NOROM_RFCRfTrimRead+0xda>
    3b0e:	4b32      	ldr	r3, [pc, #200]	; (3bd8 <NOROM_RFCRfTrimRead+0xfc>)
    3b10:	681b      	ldr	r3, [r3, #0]
    3b12:	604b      	str	r3, [r1, #4]
    3b14:	4b31      	ldr	r3, [pc, #196]	; (3bdc <NOROM_RFCRfTrimRead+0x100>)
    3b16:	681b      	ldr	r3, [r3, #0]
    3b18:	608b      	str	r3, [r1, #8]
    3b1a:	4b31      	ldr	r3, [pc, #196]	; (3be0 <NOROM_RFCRfTrimRead+0x104>)
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b22:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3b26:	e052      	b.n	3bce <NOROM_RFCRfTrimRead+0xf2>
    3b28:	2b0f      	cmp	r3, #15
    3b2a:	d02a      	beq.n	3b82 <NOROM_RFCRfTrimRead+0xa6>
    3b2c:	2b1e      	cmp	r3, #30
    3b2e:	d035      	beq.n	3b9c <NOROM_RFCRfTrimRead+0xc0>
    3b30:	2b0c      	cmp	r3, #12
    3b32:	d140      	bne.n	3bb6 <NOROM_RFCRfTrimRead+0xda>
    3b34:	4b2b      	ldr	r3, [pc, #172]	; (3be4 <NOROM_RFCRfTrimRead+0x108>)
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	604b      	str	r3, [r1, #4]
    3b3a:	4b2b      	ldr	r3, [pc, #172]	; (3be8 <NOROM_RFCRfTrimRead+0x10c>)
    3b3c:	681b      	ldr	r3, [r3, #0]
    3b3e:	608b      	str	r3, [r1, #8]
    3b40:	4b2a      	ldr	r3, [pc, #168]	; (3bec <NOROM_RFCRfTrimRead+0x110>)
    3b42:	681b      	ldr	r3, [r3, #0]
    3b44:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3b4c:	e03f      	b.n	3bce <NOROM_RFCRfTrimRead+0xf2>
    3b4e:	4b28      	ldr	r3, [pc, #160]	; (3bf0 <NOROM_RFCRfTrimRead+0x114>)
    3b50:	681b      	ldr	r3, [r3, #0]
    3b52:	604b      	str	r3, [r1, #4]
    3b54:	4b27      	ldr	r3, [pc, #156]	; (3bf4 <NOROM_RFCRfTrimRead+0x118>)
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	608b      	str	r3, [r1, #8]
    3b5a:	4b27      	ldr	r3, [pc, #156]	; (3bf8 <NOROM_RFCRfTrimRead+0x11c>)
    3b5c:	681b      	ldr	r3, [r3, #0]
    3b5e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b62:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3b66:	e032      	b.n	3bce <NOROM_RFCRfTrimRead+0xf2>
    3b68:	4b24      	ldr	r3, [pc, #144]	; (3bfc <NOROM_RFCRfTrimRead+0x120>)
    3b6a:	681b      	ldr	r3, [r3, #0]
    3b6c:	604b      	str	r3, [r1, #4]
    3b6e:	4b24      	ldr	r3, [pc, #144]	; (3c00 <NOROM_RFCRfTrimRead+0x124>)
    3b70:	681b      	ldr	r3, [r3, #0]
    3b72:	608b      	str	r3, [r1, #8]
    3b74:	4b23      	ldr	r3, [pc, #140]	; (3c04 <NOROM_RFCRfTrimRead+0x128>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b7c:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3b80:	e025      	b.n	3bce <NOROM_RFCRfTrimRead+0xf2>
    3b82:	4b21      	ldr	r3, [pc, #132]	; (3c08 <NOROM_RFCRfTrimRead+0x12c>)
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	604b      	str	r3, [r1, #4]
    3b88:	4b20      	ldr	r3, [pc, #128]	; (3c0c <NOROM_RFCRfTrimRead+0x130>)
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	608b      	str	r3, [r1, #8]
    3b8e:	4b20      	ldr	r3, [pc, #128]	; (3c10 <NOROM_RFCRfTrimRead+0x134>)
    3b90:	681b      	ldr	r3, [r3, #0]
    3b92:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b96:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3b9a:	e018      	b.n	3bce <NOROM_RFCRfTrimRead+0xf2>
    3b9c:	4b1d      	ldr	r3, [pc, #116]	; (3c14 <NOROM_RFCRfTrimRead+0x138>)
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	604b      	str	r3, [r1, #4]
    3ba2:	4b1d      	ldr	r3, [pc, #116]	; (3c18 <NOROM_RFCRfTrimRead+0x13c>)
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	608b      	str	r3, [r1, #8]
    3ba8:	4b1c      	ldr	r3, [pc, #112]	; (3c1c <NOROM_RFCRfTrimRead+0x140>)
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3bb4:	e00b      	b.n	3bce <NOROM_RFCRfTrimRead+0xf2>
    3bb6:	4b1a      	ldr	r3, [pc, #104]	; (3c20 <NOROM_RFCRfTrimRead+0x144>)
    3bb8:	681b      	ldr	r3, [r3, #0]
    3bba:	604b      	str	r3, [r1, #4]
    3bbc:	4b19      	ldr	r3, [pc, #100]	; (3c24 <NOROM_RFCRfTrimRead+0x148>)
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	608b      	str	r3, [r1, #8]
    3bc2:	4b19      	ldr	r3, [pc, #100]	; (3c28 <NOROM_RFCRfTrimRead+0x14c>)
    3bc4:	681b      	ldr	r3, [r3, #0]
    3bc6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3bce:	60cb      	str	r3, [r1, #12]
    3bd0:	4770      	bx	lr
    3bd2:	bf00      	nop
    3bd4:	5000134c 	andpl	r1, r0, ip, asr #6
    3bd8:	500010c8 	andpl	r1, r0, r8, asr #1
    3bdc:	500010e0 	andpl	r1, r0, r0, ror #1
    3be0:	500010f8 	strdpl	r1, [r0], -r8
    3be4:	500010d0 	ldrdpl	r1, [r0], -r0
    3be8:	500010e8 	andpl	r1, r0, r8, ror #1
    3bec:	50001100 	andpl	r1, r0, r0, lsl #2
    3bf0:	500010c4 	andpl	r1, r0, r4, asr #1
    3bf4:	500010dc 	ldrdpl	r1, [r0], -ip
    3bf8:	500010f4 	strdpl	r1, [r0], -r4
    3bfc:	500010cc 	andpl	r1, r0, ip, asr #1
    3c00:	500010e4 	andpl	r1, r0, r4, ror #1
    3c04:	500010fc 	strdpl	r1, [r0], -ip
    3c08:	500010d4 	ldrdpl	r1, [r0], -r4
    3c0c:	500010ec 	andpl	r1, r0, ip, ror #1
    3c10:	50001104 	andpl	r1, r0, r4, lsl #2
    3c14:	500010d8 	ldrdpl	r1, [r0], -r8
    3c18:	500010f0 	strdpl	r1, [r0], -r0
    3c1c:	50001108 	andpl	r1, r0, r8, lsl #2
    3c20:	50001354 	andpl	r1, r0, r4, asr r3
    3c24:	50001358 	andpl	r1, r0, r8, asr r3
    3c28:	50001380 	andpl	r1, r0, r0, lsl #7

00003c2c <NOROM_RFCRTrim>:
    3c2c:	f643 0206 	movw	r2, #14342	; 0x3806
    3c30:	b570      	push	{r4, r5, r6, lr}
    3c32:	8803      	ldrh	r3, [r0, #0]
    3c34:	4293      	cmp	r3, r2
    3c36:	d00a      	beq.n	3c4e <NOROM_RFCRTrim+0x22>
    3c38:	f643 0207 	movw	r2, #14343	; 0x3807
    3c3c:	4293      	cmp	r3, r2
    3c3e:	d009      	beq.n	3c54 <NOROM_RFCRTrim+0x28>
    3c40:	f640 0202 	movw	r2, #2050	; 0x802
    3c44:	4293      	cmp	r3, r2
    3c46:	d16b      	bne.n	3d20 <NOROM_RFCRTrim+0xf4>
    3c48:	7bc1      	ldrb	r1, [r0, #15]
    3c4a:	6943      	ldr	r3, [r0, #20]
    3c4c:	e005      	b.n	3c5a <NOROM_RFCRTrim+0x2e>
    3c4e:	69c3      	ldr	r3, [r0, #28]
    3c50:	2102      	movs	r1, #2
    3c52:	e002      	b.n	3c5a <NOROM_RFCRTrim+0x2e>
    3c54:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3c58:	69c3      	ldr	r3, [r0, #28]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d060      	beq.n	3d20 <NOROM_RFCRTrim+0xf4>
    3c5e:	f103 0414 	add.w	r4, r3, #20
    3c62:	f244 0538 	movw	r5, #16440	; 0x4038
    3c66:	681a      	ldr	r2, [r3, #0]
    3c68:	4618      	mov	r0, r3
    3c6a:	b296      	uxth	r6, r2
    3c6c:	42ae      	cmp	r6, r5
    3c6e:	f103 0304 	add.w	r3, r3, #4
    3c72:	d103      	bne.n	3c7c <NOROM_RFCRTrim+0x50>
    3c74:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3c78:	b91c      	cbnz	r4, 3c82 <NOROM_RFCRTrim+0x56>
    3c7a:	bd70      	pop	{r4, r5, r6, pc}
    3c7c:	42a3      	cmp	r3, r4
    3c7e:	d1f0      	bne.n	3c62 <NOROM_RFCRTrim+0x36>
    3c80:	bd70      	pop	{r4, r5, r6, pc}
    3c82:	290a      	cmp	r1, #10
    3c84:	d01d      	beq.n	3cc2 <NOROM_RFCRTrim+0x96>
    3c86:	dc06      	bgt.n	3c96 <NOROM_RFCRTrim+0x6a>
    3c88:	2905      	cmp	r1, #5
    3c8a:	d013      	beq.n	3cb4 <NOROM_RFCRTrim+0x88>
    3c8c:	2906      	cmp	r1, #6
    3c8e:	d016      	beq.n	3cbe <NOROM_RFCRTrim+0x92>
    3c90:	2902      	cmp	r1, #2
    3c92:	d11f      	bne.n	3cd4 <NOROM_RFCRTrim+0xa8>
    3c94:	e007      	b.n	3ca6 <NOROM_RFCRTrim+0x7a>
    3c96:	290f      	cmp	r1, #15
    3c98:	d015      	beq.n	3cc6 <NOROM_RFCRTrim+0x9a>
    3c9a:	291e      	cmp	r1, #30
    3c9c:	d015      	beq.n	3cca <NOROM_RFCRTrim+0x9e>
    3c9e:	290c      	cmp	r1, #12
    3ca0:	d118      	bne.n	3cd4 <NOROM_RFCRTrim+0xa8>
    3ca2:	4b20      	ldr	r3, [pc, #128]	; (3d24 <NOROM_RFCRTrim+0xf8>)
    3ca4:	e012      	b.n	3ccc <NOROM_RFCRTrim+0xa0>
    3ca6:	4b20      	ldr	r3, [pc, #128]	; (3d28 <NOROM_RFCRTrim+0xfc>)
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3cae:	2b0f      	cmp	r3, #15
    3cb0:	d12a      	bne.n	3d08 <NOROM_RFCRTrim+0xdc>
    3cb2:	e023      	b.n	3cfc <NOROM_RFCRTrim+0xd0>
    3cb4:	4b1d      	ldr	r3, [pc, #116]	; (3d2c <NOROM_RFCRTrim+0x100>)
    3cb6:	681b      	ldr	r3, [r3, #0]
    3cb8:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3cbc:	e02c      	b.n	3d18 <NOROM_RFCRTrim+0xec>
    3cbe:	4b1c      	ldr	r3, [pc, #112]	; (3d30 <NOROM_RFCRTrim+0x104>)
    3cc0:	e004      	b.n	3ccc <NOROM_RFCRTrim+0xa0>
    3cc2:	4b1c      	ldr	r3, [pc, #112]	; (3d34 <NOROM_RFCRTrim+0x108>)
    3cc4:	e002      	b.n	3ccc <NOROM_RFCRTrim+0xa0>
    3cc6:	4b1c      	ldr	r3, [pc, #112]	; (3d38 <NOROM_RFCRTrim+0x10c>)
    3cc8:	e000      	b.n	3ccc <NOROM_RFCRTrim+0xa0>
    3cca:	4b1c      	ldr	r3, [pc, #112]	; (3d3c <NOROM_RFCRTrim+0x110>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3cd2:	e021      	b.n	3d18 <NOROM_RFCRTrim+0xec>
    3cd4:	4b14      	ldr	r3, [pc, #80]	; (3d28 <NOROM_RFCRTrim+0xfc>)
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3cdc:	2b0f      	cmp	r3, #15
    3cde:	d113      	bne.n	3d08 <NOROM_RFCRTrim+0xdc>
    3ce0:	3905      	subs	r1, #5
    3ce2:	2919      	cmp	r1, #25
    3ce4:	d80a      	bhi.n	3cfc <NOROM_RFCRTrim+0xd0>
    3ce6:	2301      	movs	r3, #1
    3ce8:	fa03 f101 	lsl.w	r1, r3, r1
    3cec:	4b14      	ldr	r3, [pc, #80]	; (3d40 <NOROM_RFCRTrim+0x114>)
    3cee:	400b      	ands	r3, r1
    3cf0:	b123      	cbz	r3, 3cfc <NOROM_RFCRTrim+0xd0>
    3cf2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3cf6:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3cfa:	e003      	b.n	3d04 <NOROM_RFCRTrim+0xd8>
    3cfc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3d04:	6002      	str	r2, [r0, #0]
    3d06:	bd70      	pop	{r4, r5, r6, pc}
    3d08:	429c      	cmp	r4, r3
    3d0a:	d209      	bcs.n	3d20 <NOROM_RFCRTrim+0xf4>
    3d0c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d10:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3d14:	6003      	str	r3, [r0, #0]
    3d16:	bd70      	pop	{r4, r5, r6, pc}
    3d18:	2b0f      	cmp	r3, #15
    3d1a:	d1f5      	bne.n	3d08 <NOROM_RFCRTrim+0xdc>
    3d1c:	3905      	subs	r1, #5
    3d1e:	e7e2      	b.n	3ce6 <NOROM_RFCRTrim+0xba>
    3d20:	bd70      	pop	{r4, r5, r6, pc}
    3d22:	bf00      	nop
    3d24:	50001100 	andpl	r1, r0, r0, lsl #2
    3d28:	50001380 	andpl	r1, r0, r0, lsl #7
    3d2c:	50001320 	andpl	r1, r0, r0, lsr #6
    3d30:	500010f8 	strdpl	r1, [r0], -r8
    3d34:	500010fc 	strdpl	r1, [r0], -ip
    3d38:	50001104 	andpl	r1, r0, r4, lsl #2
    3d3c:	50001108 	andpl	r1, r0, r8, lsl #2
    3d40:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003d44 <NOROM_RFCRfTrimSet>:
    3d44:	4603      	mov	r3, r0
    3d46:	b530      	push	{r4, r5, lr}
    3d48:	4c05      	ldr	r4, [pc, #20]	; (3d60 <NOROM_RFCRfTrimSet+0x1c>)
    3d4a:	f100 0510 	add.w	r5, r0, #16
    3d4e:	4622      	mov	r2, r4
    3d50:	6818      	ldr	r0, [r3, #0]
    3d52:	6859      	ldr	r1, [r3, #4]
    3d54:	3308      	adds	r3, #8
    3d56:	c203      	stmia	r2!, {r0, r1}
    3d58:	42ab      	cmp	r3, r5
    3d5a:	4614      	mov	r4, r2
    3d5c:	d1f7      	bne.n	3d4e <NOROM_RFCRfTrimSet+0xa>
    3d5e:	bd30      	pop	{r4, r5, pc}
    3d60:	21000018 	tstcs	r0, r8, lsl r0

00003d64 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3d64:	4b04      	ldr	r3, [pc, #16]	; (3d78 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3d66:	b128      	cbz	r0, 3d74 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3d68:	4a04      	ldr	r2, [pc, #16]	; (3d7c <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3d6a:	2100      	movs	r1, #0
    3d6c:	7011      	strb	r1, [r2, #0]
    3d6e:	2220      	movs	r2, #32
    3d70:	701a      	strb	r2, [r3, #0]
    3d72:	4770      	bx	lr
    3d74:	7018      	strb	r0, [r3, #0]
    3d76:	4770      	bx	lr
    3d78:	40086202 	andmi	r6, r8, r2, lsl #4
    3d7c:	40086200 	andmi	r6, r8, r0, lsl #4

00003d80 <TrimAfterColdResetWakeupFromShutDown>:
    3d80:	b538      	push	{r3, r4, r5, lr}
    3d82:	4605      	mov	r5, r0
    3d84:	4b26      	ldr	r3, [pc, #152]	; (3e20 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3d86:	2201      	movs	r2, #1
    3d88:	601a      	str	r2, [r3, #0]
    3d8a:	4b26      	ldr	r3, [pc, #152]	; (3e24 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d0fb      	beq.n	3d8a <TrimAfterColdResetWakeupFromShutDown+0xa>
    3d92:	4b25      	ldr	r3, [pc, #148]	; (3e28 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3d94:	22c0      	movs	r2, #192	; 0xc0
    3d96:	601a      	str	r2, [r3, #0]
    3d98:	4b24      	ldr	r3, [pc, #144]	; (3e2c <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3d9a:	681b      	ldr	r3, [r3, #0]
    3d9c:	079b      	lsls	r3, r3, #30
    3d9e:	bf5f      	itttt	pl
    3da0:	4b23      	ldrpl	r3, [pc, #140]	; (3e30 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3da2:	4a24      	ldrpl	r2, [pc, #144]	; (3e34 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3da4:	681b      	ldrpl	r3, [r3, #0]
    3da6:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3daa:	bf5c      	itt	pl
    3dac:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3db0:	7013      	strbpl	r3, [r2, #0]
    3db2:	4b21      	ldr	r3, [pc, #132]	; (3e38 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3db4:	2200      	movs	r2, #0
    3db6:	601a      	str	r2, [r3, #0]
    3db8:	4b20      	ldr	r3, [pc, #128]	; (3e3c <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3dba:	681c      	ldr	r4, [r3, #0]
    3dbc:	4620      	mov	r0, r4
    3dbe:	f000 f8d9 	bl	3f74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3dc2:	4628      	mov	r0, r5
    3dc4:	4621      	mov	r1, r4
    3dc6:	f000 fa0d 	bl	41e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3dca:	f240 221d 	movw	r2, #541	; 0x21d
    3dce:	4b1c      	ldr	r3, [pc, #112]	; (3e40 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3dd0:	681b      	ldr	r3, [r3, #0]
    3dd2:	b29b      	uxth	r3, r3
    3dd4:	4293      	cmp	r3, r2
    3dd6:	d814      	bhi.n	3e02 <TrimAfterColdResetWakeupFromShutDown+0x82>
    3dd8:	4a1a      	ldr	r2, [pc, #104]	; (3e44 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3dda:	6813      	ldr	r3, [r2, #0]
    3ddc:	6812      	ldr	r2, [r2, #0]
    3dde:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3de2:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3de6:	b103      	cbz	r3, 3dea <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3de8:	3b01      	subs	r3, #1
    3dea:	1f91      	subs	r1, r2, #6
    3dec:	2901      	cmp	r1, #1
    3dee:	bf86      	itte	hi
    3df0:	3202      	addhi	r2, #2
    3df2:	f002 020f 	andhi.w	r2, r2, #15
    3df6:	2207      	movls	r2, #7
    3df8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3dfc:	4a12      	ldr	r2, [pc, #72]	; (3e48 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3dfe:	b2db      	uxtb	r3, r3
    3e00:	7013      	strb	r3, [r2, #0]
    3e02:	4620      	mov	r0, r4
    3e04:	f000 fabc 	bl	4380 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3e08:	4b10      	ldr	r3, [pc, #64]	; (3e4c <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3e0a:	2002      	movs	r0, #2
    3e0c:	681b      	ldr	r3, [r3, #0]
    3e0e:	68db      	ldr	r3, [r3, #12]
    3e10:	4798      	blx	r3
    3e12:	4b05      	ldr	r3, [pc, #20]	; (3e28 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3e14:	2240      	movs	r2, #64	; 0x40
    3e16:	601a      	str	r2, [r3, #0]
    3e18:	4b0d      	ldr	r3, [pc, #52]	; (3e50 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3e1a:	2201      	movs	r2, #1
    3e1c:	601a      	str	r2, [r3, #0]
    3e1e:	bd38      	pop	{r3, r4, r5, pc}
    3e20:	40091010 	andmi	r1, r9, r0, lsl r0
    3e24:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3e28:	400c6000 	andmi	r6, ip, r0
    3e2c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3e30:	50003fac 	andpl	r3, r0, ip, lsr #31
    3e34:	40086256 	andmi	r6, r8, r6, asr r2
    3e38:	40091040 	andmi	r1, r9, r0, asr #32
    3e3c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3e40:	50001314 	andpl	r1, r0, r4, lsl r3
    3e44:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3e48:	40086002 	andmi	r6, r8, r2
    3e4c:	100001a0 	andne	r0, r0, r0, lsr #3
    3e50:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003e54 <NOROM_SetupTrimDevice>:
    3e54:	b510      	push	{r4, lr}
    3e56:	4b1f      	ldr	r3, [pc, #124]	; (3ed4 <NOROM_SetupTrimDevice+0x80>)
    3e58:	681c      	ldr	r4, [r3, #0]
    3e5a:	1c63      	adds	r3, r4, #1
    3e5c:	bf08      	it	eq
    3e5e:	2400      	moveq	r4, #0
    3e60:	f000 fcde 	bl	4820 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3e64:	4b1c      	ldr	r3, [pc, #112]	; (3ed8 <NOROM_SetupTrimDevice+0x84>)
    3e66:	2200      	movs	r2, #0
    3e68:	601a      	str	r2, [r3, #0]
    3e6a:	4a1c      	ldr	r2, [pc, #112]	; (3edc <NOROM_SetupTrimDevice+0x88>)
    3e6c:	2301      	movs	r3, #1
    3e6e:	6013      	str	r3, [r2, #0]
    3e70:	4a1b      	ldr	r2, [pc, #108]	; (3ee0 <NOROM_SetupTrimDevice+0x8c>)
    3e72:	6013      	str	r3, [r2, #0]
    3e74:	f000 fa3e 	bl	42f4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3e78:	4b1a      	ldr	r3, [pc, #104]	; (3ee4 <NOROM_SetupTrimDevice+0x90>)
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	b123      	cbz	r3, 3e88 <NOROM_SetupTrimDevice+0x34>
    3e7e:	4b1a      	ldr	r3, [pc, #104]	; (3ee8 <NOROM_SetupTrimDevice+0x94>)
    3e80:	4620      	mov	r0, r4
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	f7ff ff7c 	bl	3d80 <TrimAfterColdResetWakeupFromShutDown>
    3e88:	4b18      	ldr	r3, [pc, #96]	; (3eec <NOROM_SetupTrimDevice+0x98>)
    3e8a:	2200      	movs	r2, #0
    3e8c:	601a      	str	r2, [r3, #0]
    3e8e:	4a18      	ldr	r2, [pc, #96]	; (3ef0 <NOROM_SetupTrimDevice+0x9c>)
    3e90:	6813      	ldr	r3, [r2, #0]
    3e92:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3e96:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3e9a:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3ea2:	6013      	str	r3, [r2, #0]
    3ea4:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3ea8:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3eac:	6813      	ldr	r3, [r2, #0]
    3eae:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3eb2:	2b01      	cmp	r3, #1
    3eb4:	bf01      	itttt	eq
    3eb6:	6813      	ldreq	r3, [r2, #0]
    3eb8:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3ebc:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3ec0:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3ec4:	bf04      	itt	eq
    3ec6:	6011      	streq	r1, [r2, #0]
    3ec8:	6013      	streq	r3, [r2, #0]
    3eca:	4b0a      	ldr	r3, [pc, #40]	; (3ef4 <NOROM_SetupTrimDevice+0xa0>)
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d1fb      	bne.n	3eca <NOROM_SetupTrimDevice+0x76>
    3ed2:	bd10      	pop	{r4, pc}
    3ed4:	5000131c 	andpl	r1, r0, ip, lsl r3
    3ed8:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3edc:	400c605c 	andmi	r6, ip, ip, asr r0
    3ee0:	43042208 	movwmi	r2, #16904	; 0x4208
    3ee4:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3ee8:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3eec:	4008218c 	andmi	r2, r8, ip, lsl #3
    3ef0:	40032048 	andmi	r2, r3, r8, asr #32
    3ef4:	4268000c 	rsbmi	r0, r8, #12

00003ef8 <NOROM_SetupSetVddrLevel>:
    3ef8:	b530      	push	{r4, r5, lr}
    3efa:	4b19      	ldr	r3, [pc, #100]	; (3f60 <NOROM_SetupSetVddrLevel+0x68>)
    3efc:	681a      	ldr	r2, [r3, #0]
    3efe:	4b19      	ldr	r3, [pc, #100]	; (3f64 <NOROM_SetupSetVddrLevel+0x6c>)
    3f00:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3f04:	781b      	ldrb	r3, [r3, #0]
    3f06:	2a15      	cmp	r2, #21
    3f08:	f003 031f 	and.w	r3, r3, #31
    3f0c:	bf88      	it	hi
    3f0e:	3a20      	subhi	r2, #32
    3f10:	2b15      	cmp	r3, #21
    3f12:	bf88      	it	hi
    3f14:	3b20      	subhi	r3, #32
    3f16:	4293      	cmp	r3, r2
    3f18:	d020      	beq.n	3f5c <NOROM_SetupSetVddrLevel+0x64>
    3f1a:	4913      	ldr	r1, [pc, #76]	; (3f68 <NOROM_SetupSetVddrLevel+0x70>)
    3f1c:	2000      	movs	r0, #0
    3f1e:	6008      	str	r0, [r1, #0]
    3f20:	4608      	mov	r0, r1
    3f22:	1ad1      	subs	r1, r2, r3
    3f24:	2902      	cmp	r1, #2
    3f26:	dc05      	bgt.n	3f34 <NOROM_SetupSetVddrLevel+0x3c>
    3f28:	f06f 0401 	mvn.w	r4, #1
    3f2c:	42a1      	cmp	r1, r4
    3f2e:	bfb8      	it	lt
    3f30:	4621      	movlt	r1, r4
    3f32:	e000      	b.n	3f36 <NOROM_SetupSetVddrLevel+0x3e>
    3f34:	2102      	movs	r1, #2
    3f36:	440b      	add	r3, r1
    3f38:	490c      	ldr	r1, [pc, #48]	; (3f6c <NOROM_SetupSetVddrLevel+0x74>)
    3f3a:	4d0d      	ldr	r5, [pc, #52]	; (3f70 <NOROM_SetupSetVddrLevel+0x78>)
    3f3c:	680c      	ldr	r4, [r1, #0]
    3f3e:	f003 041f 	and.w	r4, r3, #31
    3f42:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    3f46:	802c      	strh	r4, [r5, #0]
    3f48:	4293      	cmp	r3, r2
    3f4a:	f04f 0401 	mov.w	r4, #1
    3f4e:	600c      	str	r4, [r1, #0]
    3f50:	d1e7      	bne.n	3f22 <NOROM_SetupSetVddrLevel+0x2a>
    3f52:	680b      	ldr	r3, [r1, #0]
    3f54:	600c      	str	r4, [r1, #0]
    3f56:	680b      	ldr	r3, [r1, #0]
    3f58:	6004      	str	r4, [r0, #0]
    3f5a:	680b      	ldr	r3, [r1, #0]
    3f5c:	bd30      	pop	{r4, r5, pc}
    3f5e:	bf00      	nop
    3f60:	50001388 	andpl	r1, r0, r8, lsl #7
    3f64:	40086206 	andmi	r6, r8, r6, lsl #4
    3f68:	43200098 			; <UNDEFINED> instruction: 0x43200098
    3f6c:	4009202c 	andmi	r2, r9, ip, lsr #32
    3f70:	4008626c 	andmi	r6, r8, ip, ror #4

00003f74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    3f74:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3f7c:	b510      	push	{r4, lr}
    3f7e:	4604      	mov	r4, r0
    3f80:	d10f      	bne.n	3fa2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    3f82:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    3f86:	4a1e      	ldr	r2, [pc, #120]	; (4000 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3f88:	2380      	movs	r3, #128	; 0x80
    3f8a:	7013      	strb	r3, [r2, #0]
    3f8c:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3f90:	f802 3c10 	strb.w	r3, [r2, #-16]
    3f94:	f7ff ffb0 	bl	3ef8 <NOROM_SetupSetVddrLevel>
    3f98:	4b1a      	ldr	r3, [pc, #104]	; (4004 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3f9a:	681b      	ldr	r3, [r3, #0]
    3f9c:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3fa0:	e003      	b.n	3faa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    3fa2:	4b19      	ldr	r3, [pc, #100]	; (4008 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    3fa4:	681b      	ldr	r3, [r3, #0]
    3fa6:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3faa:	2b15      	cmp	r3, #21
    3fac:	bf88      	it	hi
    3fae:	3b20      	subhi	r3, #32
    3fb0:	eb03 7324 	add.w	r3, r3, r4, asr #28
    3fb4:	3301      	adds	r3, #1
    3fb6:	2b15      	cmp	r3, #21
    3fb8:	dc05      	bgt.n	3fc6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    3fba:	f06f 0209 	mvn.w	r2, #9
    3fbe:	4293      	cmp	r3, r2
    3fc0:	bfb8      	it	lt
    3fc2:	4613      	movlt	r3, r2
    3fc4:	e000      	b.n	3fc8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    3fc6:	2315      	movs	r3, #21
    3fc8:	4a10      	ldr	r2, [pc, #64]	; (400c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    3fca:	f003 031f 	and.w	r3, r3, #31
    3fce:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    3fd2:	8013      	strh	r3, [r2, #0]
    3fd4:	4b0e      	ldr	r3, [pc, #56]	; (4010 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    3fd6:	681b      	ldr	r3, [r3, #0]
    3fd8:	f013 0302 	ands.w	r3, r3, #2
    3fdc:	bf0a      	itet	eq
    3fde:	4a0d      	ldreq	r2, [pc, #52]	; (4014 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3fe0:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    3fe4:	6013      	streq	r3, [r2, #0]
    3fe6:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    3fea:	4a0b      	ldr	r2, [pc, #44]	; (4018 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    3fec:	f083 0301 	eor.w	r3, r3, #1
    3ff0:	6013      	str	r3, [r2, #0]
    3ff2:	f3c4 6480 	ubfx	r4, r4, #26, #1
    3ff6:	4b09      	ldr	r3, [pc, #36]	; (401c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    3ff8:	f084 0401 	eor.w	r4, r4, #1
    3ffc:	601c      	str	r4, [r3, #0]
    3ffe:	bd10      	pop	{r4, pc}
    4000:	40086225 	andmi	r6, r8, r5, lsr #4
    4004:	50001388 	andpl	r1, r0, r8, lsl #7
    4008:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    400c:	4008626e 	andmi	r6, r8, lr, ror #4
    4010:	40090000 	andmi	r0, r9, r0
    4014:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    4018:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    401c:	43200008 			; <UNDEFINED> instruction: 0x43200008

00004020 <NOROM_SetupGetTrimForAnabypassValue1>:
    4020:	4b15      	ldr	r3, [pc, #84]	; (4078 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    4022:	0381      	lsls	r1, r0, #14
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	f3c3 6283 	ubfx	r2, r3, #26, #4
    402a:	f3c3 238f 	ubfx	r3, r3, #10, #16
    402e:	d41f      	bmi.n	4070 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    4030:	f340 2007 	sbfx	r0, r0, #8, #8
    4034:	2800      	cmp	r0, #0
    4036:	da19      	bge.n	406c <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    4038:	085b      	lsrs	r3, r3, #1
    403a:	d105      	bne.n	4048 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    403c:	0852      	lsrs	r2, r2, #1
    403e:	bf06      	itte	eq
    4040:	2301      	moveq	r3, #1
    4042:	461a      	moveq	r2, r3
    4044:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    4048:	3001      	adds	r0, #1
    404a:	e7f3      	b.n	4034 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    404c:	005b      	lsls	r3, r3, #1
    404e:	f043 0301 	orr.w	r3, r3, #1
    4052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4056:	d308      	bcc.n	406a <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    4058:	0052      	lsls	r2, r2, #1
    405a:	f042 0201 	orr.w	r2, r2, #1
    405e:	2a0f      	cmp	r2, #15
    4060:	bf86      	itte	hi
    4062:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    4066:	220f      	movhi	r2, #15
    4068:	2301      	movls	r3, #1
    406a:	3801      	subs	r0, #1
    406c:	2800      	cmp	r0, #0
    406e:	d1ed      	bne.n	404c <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    4070:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    4074:	4770      	bx	lr
    4076:	bf00      	nop
    4078:	50001350 	andpl	r1, r0, r0, asr r3

0000407c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    407c:	4a04      	ldr	r2, [pc, #16]	; (4090 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    407e:	6813      	ldr	r3, [r2, #0]
    4080:	6810      	ldr	r0, [r2, #0]
    4082:	f3c3 0387 	ubfx	r3, r3, #2, #8
    4086:	f000 0003 	and.w	r0, r0, #3
    408a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    408e:	4770      	bx	lr
    4090:	50001350 	andpl	r1, r0, r0, asr r3

00004094 <NOROM_SetupGetTrimForAmpcompTh2>:
    4094:	4b02      	ldr	r3, [pc, #8]	; (40a0 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    4096:	6818      	ldr	r0, [r3, #0]
    4098:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    409c:	4770      	bx	lr
    409e:	bf00      	nop
    40a0:	50001374 	andpl	r1, r0, r4, ror r3

000040a4 <NOROM_SetupGetTrimForAmpcompTh1>:
    40a4:	4b03      	ldr	r3, [pc, #12]	; (40b4 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    40a6:	6818      	ldr	r0, [r3, #0]
    40a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    40ac:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    40b0:	4770      	bx	lr
    40b2:	bf00      	nop
    40b4:	50001370 	andpl	r1, r0, r0, ror r3

000040b8 <NOROM_SetupGetTrimForAmpcompCtrl>:
    40b8:	b570      	push	{r4, r5, r6, lr}
    40ba:	4b15      	ldr	r3, [pc, #84]	; (4110 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    40bc:	4915      	ldr	r1, [pc, #84]	; (4114 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    40be:	681c      	ldr	r4, [r3, #0]
    40c0:	6809      	ldr	r1, [r1, #0]
    40c2:	f3c4 5203 	ubfx	r2, r4, #20, #4
    40c6:	f011 0501 	ands.w	r5, r1, #1
    40ca:	f3c4 4303 	ubfx	r3, r4, #16, #4
    40ce:	d113      	bne.n	40f8 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    40d0:	4911      	ldr	r1, [pc, #68]	; (4118 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    40d2:	6809      	ldr	r1, [r1, #0]
    40d4:	f341 2603 	sbfx	r6, r1, #8, #4
    40d8:	18b2      	adds	r2, r6, r2
    40da:	d403      	bmi.n	40e4 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    40dc:	2a0f      	cmp	r2, #15
    40de:	bfa8      	it	ge
    40e0:	220f      	movge	r2, #15
    40e2:	e000      	b.n	40e6 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    40e4:	462a      	mov	r2, r5
    40e6:	f341 3103 	sbfx	r1, r1, #12, #4
    40ea:	18cb      	adds	r3, r1, r3
    40ec:	d403      	bmi.n	40f6 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    40ee:	2b0f      	cmp	r3, #15
    40f0:	bfa8      	it	ge
    40f2:	230f      	movge	r3, #15
    40f4:	e000      	b.n	40f8 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    40f6:	2300      	movs	r3, #0
    40f8:	b2a1      	uxth	r1, r4
    40fa:	2821      	cmp	r0, #33	; 0x21
    40fc:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    4100:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    4104:	bf84      	itt	hi
    4106:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    410a:	4323      	orrhi	r3, r4
    410c:	4618      	mov	r0, r3
    410e:	bd70      	pop	{r4, r5, r6, pc}
    4110:	50001378 	andpl	r1, r0, r8, ror r3
    4114:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4118:	50003fac 	andpl	r3, r0, ip, lsr #31

0000411c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    411c:	281f      	cmp	r0, #31
    411e:	bf83      	ittte	hi
    4120:	4b02      	ldrhi	r3, [pc, #8]	; (412c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    4122:	6818      	ldrhi	r0, [r3, #0]
    4124:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    4128:	2000      	movls	r0, #0
    412a:	4770      	bx	lr
    412c:	50001398 	mulpl	r0, r8, r3

00004130 <NOROM_SetupGetTrimForAdcShModeEn>:
    4130:	2821      	cmp	r0, #33	; 0x21
    4132:	bf83      	ittte	hi
    4134:	4b02      	ldrhi	r3, [pc, #8]	; (4140 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    4136:	6818      	ldrhi	r0, [r3, #0]
    4138:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    413c:	2001      	movls	r0, #1
    413e:	4770      	bx	lr
    4140:	5000138c 	andpl	r1, r0, ip, lsl #7

00004144 <NOROM_SetupGetTrimForAdcShVbufEn>:
    4144:	2821      	cmp	r0, #33	; 0x21
    4146:	bf83      	ittte	hi
    4148:	4b02      	ldrhi	r3, [pc, #8]	; (4154 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    414a:	6818      	ldrhi	r0, [r3, #0]
    414c:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    4150:	2001      	movls	r0, #1
    4152:	4770      	bx	lr
    4154:	5000138c 	andpl	r1, r0, ip, lsl #7

00004158 <NOROM_SetupGetTrimForXoscHfCtl>:
    4158:	281f      	cmp	r0, #31
    415a:	bf81      	itttt	hi
    415c:	4b07      	ldrhi	r3, [pc, #28]	; (417c <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    415e:	681b      	ldrhi	r3, [r3, #0]
    4160:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    4164:	0080      	lslhi	r0, r0, #2
    4166:	bf81      	itttt	hi
    4168:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    416c:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    4170:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    4174:	4318      	orrhi	r0, r3
    4176:	bf98      	it	ls
    4178:	2000      	movls	r0, #0
    417a:	4770      	bx	lr
    417c:	50001398 	mulpl	r0, r8, r3

00004180 <NOROM_SetupGetTrimForXoscHfFastStart>:
    4180:	4b02      	ldr	r3, [pc, #8]	; (418c <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    4182:	6818      	ldr	r0, [r3, #0]
    4184:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    4188:	4770      	bx	lr
    418a:	bf00      	nop
    418c:	5000138c 	andpl	r1, r0, ip, lsl #7

00004190 <NOROM_SetupGetTrimForRadcExtCfg>:
    4190:	281f      	cmp	r0, #31
    4192:	bf81      	itttt	hi
    4194:	4b07      	ldrhi	r3, [pc, #28]	; (41b4 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    4196:	681b      	ldrhi	r3, [r3, #0]
    4198:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    419c:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    41a0:	bf81      	itttt	hi
    41a2:	0400      	lslhi	r0, r0, #16
    41a4:	031b      	lslhi	r3, r3, #12
    41a6:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    41aa:	b29b      	uxthhi	r3, r3
    41ac:	bf8c      	ite	hi
    41ae:	4318      	orrhi	r0, r3
    41b0:	4801      	ldrls	r0, [pc, #4]	; (41b8 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    41b2:	4770      	bx	lr
    41b4:	50001398 	mulpl	r0, r8, r3
    41b8:	403f8000 	eorsmi	r8, pc, r0

000041bc <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    41bc:	2821      	cmp	r0, #33	; 0x21
    41be:	bf83      	ittte	hi
    41c0:	4b02      	ldrhi	r3, [pc, #8]	; (41cc <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    41c2:	6818      	ldrhi	r0, [r3, #0]
    41c4:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    41c8:	2000      	movls	r0, #0
    41ca:	4770      	bx	lr
    41cc:	5000138c 	andpl	r1, r0, ip, lsl #7

000041d0 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    41d0:	2821      	cmp	r0, #33	; 0x21
    41d2:	bf83      	ittte	hi
    41d4:	4b02      	ldrhi	r3, [pc, #8]	; (41e0 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    41d6:	6818      	ldrhi	r0, [r3, #0]
    41d8:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    41dc:	2000      	movls	r0, #0
    41de:	4770      	bx	lr
    41e0:	5000138c 	andpl	r1, r0, ip, lsl #7

000041e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    41e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    41e6:	4605      	mov	r5, r0
    41e8:	4608      	mov	r0, r1
    41ea:	f7ff ff19 	bl	4020 <NOROM_SetupGetTrimForAnabypassValue1>
    41ee:	4c39      	ldr	r4, [pc, #228]	; (42d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    41f0:	4602      	mov	r2, r0
    41f2:	2118      	movs	r1, #24
    41f4:	4620      	mov	r0, r4
    41f6:	f000 fb33 	bl	4860 <NOROM_DDI32RegWrite>
    41fa:	f7ff ff3f 	bl	407c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    41fe:	4b36      	ldr	r3, [pc, #216]	; (42d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    4200:	b280      	uxth	r0, r0
    4202:	681b      	ldr	r3, [r3, #0]
    4204:	9000      	str	r0, [sp, #0]
    4206:	685e      	ldr	r6, [r3, #4]
    4208:	4620      	mov	r0, r4
    420a:	212c      	movs	r1, #44	; 0x2c
    420c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4210:	2300      	movs	r3, #0
    4212:	47b0      	blx	r6
    4214:	4b31      	ldr	r3, [pc, #196]	; (42dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    4216:	4620      	mov	r0, r4
    4218:	681a      	ldr	r2, [r3, #0]
    421a:	211c      	movs	r1, #28
    421c:	f3c2 020d 	ubfx	r2, r2, #0, #14
    4220:	f000 fb1e 	bl	4860 <NOROM_DDI32RegWrite>
    4224:	f7ff ff36 	bl	4094 <NOROM_SetupGetTrimForAmpcompTh2>
    4228:	2114      	movs	r1, #20
    422a:	4602      	mov	r2, r0
    422c:	4620      	mov	r0, r4
    422e:	f000 fb17 	bl	4860 <NOROM_DDI32RegWrite>
    4232:	f7ff ff37 	bl	40a4 <NOROM_SetupGetTrimForAmpcompTh1>
    4236:	2110      	movs	r1, #16
    4238:	4602      	mov	r2, r0
    423a:	4620      	mov	r0, r4
    423c:	f000 fb10 	bl	4860 <NOROM_DDI32RegWrite>
    4240:	4628      	mov	r0, r5
    4242:	f7ff ff39 	bl	40b8 <NOROM_SetupGetTrimForAmpcompCtrl>
    4246:	210c      	movs	r1, #12
    4248:	4602      	mov	r2, r0
    424a:	4620      	mov	r0, r4
    424c:	f000 fb08 	bl	4860 <NOROM_DDI32RegWrite>
    4250:	4628      	mov	r0, r5
    4252:	f7ff ff6d 	bl	4130 <NOROM_SetupGetTrimForAdcShModeEn>
    4256:	0040      	lsls	r0, r0, #1
    4258:	4e21      	ldr	r6, [pc, #132]	; (42e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    425a:	f040 0020 	orr.w	r0, r0, #32
    425e:	b2c0      	uxtb	r0, r0
    4260:	7030      	strb	r0, [r6, #0]
    4262:	4628      	mov	r0, r5
    4264:	f7ff ff6e 	bl	4144 <NOROM_SetupGetTrimForAdcShVbufEn>
    4268:	f040 0010 	orr.w	r0, r0, #16
    426c:	b2c0      	uxtb	r0, r0
    426e:	7030      	strb	r0, [r6, #0]
    4270:	4628      	mov	r0, r5
    4272:	f7ff ff71 	bl	4158 <NOROM_SetupGetTrimForXoscHfCtl>
    4276:	2128      	movs	r1, #40	; 0x28
    4278:	4602      	mov	r2, r0
    427a:	4620      	mov	r0, r4
    427c:	f000 faf0 	bl	4860 <NOROM_DDI32RegWrite>
    4280:	4628      	mov	r0, r5
    4282:	f7ff ff4b 	bl	411c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    4286:	0040      	lsls	r0, r0, #1
    4288:	4b16      	ldr	r3, [pc, #88]	; (42e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    428a:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    428e:	b2c0      	uxtb	r0, r0
    4290:	7018      	strb	r0, [r3, #0]
    4292:	4628      	mov	r0, r5
    4294:	f7ff ff92 	bl	41bc <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    4298:	00c0      	lsls	r0, r0, #3
    429a:	4b13      	ldr	r3, [pc, #76]	; (42e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    429c:	f060 007f 	orn	r0, r0, #127	; 0x7f
    42a0:	b2c0      	uxtb	r0, r0
    42a2:	7018      	strb	r0, [r3, #0]
    42a4:	4628      	mov	r0, r5
    42a6:	f7ff ff93 	bl	41d0 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    42aa:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    42ae:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    42b2:	4b0e      	ldr	r3, [pc, #56]	; (42ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    42b4:	b280      	uxth	r0, r0
    42b6:	8018      	strh	r0, [r3, #0]
    42b8:	4628      	mov	r0, r5
    42ba:	f7ff ff69 	bl	4190 <NOROM_SetupGetTrimForRadcExtCfg>
    42be:	2108      	movs	r1, #8
    42c0:	4602      	mov	r2, r0
    42c2:	4620      	mov	r0, r4
    42c4:	f000 facc 	bl	4860 <NOROM_DDI32RegWrite>
    42c8:	4b09      	ldr	r3, [pc, #36]	; (42f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    42ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    42ce:	601a      	str	r2, [r3, #0]
    42d0:	b002      	add	sp, #8
    42d2:	bd70      	pop	{r4, r5, r6, pc}
    42d4:	400ca000 	andmi	sl, ip, r0
    42d8:	100001a4 	andne	r0, r0, r4, lsr #3
    42dc:	5000137c 	andpl	r1, r0, ip, ror r3
    42e0:	400ca149 	andmi	sl, ip, r9, asr #2
    42e4:	400ca14c 	andmi	sl, ip, ip, asr #2
    42e8:	400ca141 	andmi	sl, ip, r1, asr #2
    42ec:	400ca1dc 	ldrdmi	sl, [ip], -ip
    42f0:	400ca040 	andmi	sl, ip, r0, asr #32

000042f4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    42f4:	b530      	push	{r4, r5, lr}
    42f6:	4b14      	ldr	r3, [pc, #80]	; (4348 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d1fb      	bne.n	42f6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    42fe:	4a13      	ldr	r2, [pc, #76]	; (434c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    4300:	4913      	ldr	r1, [pc, #76]	; (4350 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    4302:	6813      	ldr	r3, [r2, #0]
    4304:	6809      	ldr	r1, [r1, #0]
    4306:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    430a:	f023 0307 	bic.w	r3, r3, #7
    430e:	f011 0f04 	tst.w	r1, #4
    4312:	4614      	mov	r4, r2
    4314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    4318:	d003      	beq.n	4322 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    431a:	f043 0305 	orr.w	r3, r3, #5
    431e:	6013      	str	r3, [r2, #0]
    4320:	bd30      	pop	{r4, r5, pc}
    4322:	490c      	ldr	r1, [pc, #48]	; (4354 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    4324:	f043 0004 	orr.w	r0, r3, #4
    4328:	680d      	ldr	r5, [r1, #0]
    432a:	07ad      	lsls	r5, r5, #30
    432c:	d009      	beq.n	4342 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    432e:	f043 0307 	orr.w	r3, r3, #7
    4332:	6013      	str	r3, [r2, #0]
    4334:	680b      	ldr	r3, [r1, #0]
    4336:	f003 0303 	and.w	r3, r3, #3
    433a:	2b03      	cmp	r3, #3
    433c:	d1fa      	bne.n	4334 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    433e:	6020      	str	r0, [r4, #0]
    4340:	bd30      	pop	{r4, r5, pc}
    4342:	6010      	str	r0, [r2, #0]
    4344:	bd30      	pop	{r4, r5, pc}
    4346:	bf00      	nop
    4348:	4268000c 	rsbmi	r0, r8, #12
    434c:	40034004 	andmi	r4, r3, r4
    4350:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4354:	40034000 	andmi	r4, r3, r0

00004358 <NOROM_SetupSetAonRtcSubSecInc>:
    4358:	4b07      	ldr	r3, [pc, #28]	; (4378 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    435a:	b282      	uxth	r2, r0
    435c:	f3c0 4007 	ubfx	r0, r0, #16, #8
    4360:	601a      	str	r2, [r3, #0]
    4362:	6058      	str	r0, [r3, #4]
    4364:	2201      	movs	r2, #1
    4366:	3308      	adds	r3, #8
    4368:	601a      	str	r2, [r3, #0]
    436a:	4a04      	ldr	r2, [pc, #16]	; (437c <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    436c:	6812      	ldr	r2, [r2, #0]
    436e:	2a00      	cmp	r2, #0
    4370:	d0fb      	beq.n	436a <NOROM_SetupSetAonRtcSubSecInc+0x12>
    4372:	2200      	movs	r2, #0
    4374:	601a      	str	r2, [r3, #0]
    4376:	4770      	bx	lr
    4378:	400c603c 	andmi	r6, ip, ip, lsr r0
    437c:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00004380 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    4380:	f3c0 4381 	ubfx	r3, r0, #18, #2
    4384:	2b01      	cmp	r3, #1
    4386:	b510      	push	{r4, lr}
    4388:	4604      	mov	r4, r0
    438a:	d002      	beq.n	4392 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    438c:	2b02      	cmp	r3, #2
    438e:	d02f      	beq.n	43f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    4390:	e02a      	b.n	43e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    4392:	4b42      	ldr	r3, [pc, #264]	; (449c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    4394:	681b      	ldr	r3, [r3, #0]
    4396:	039a      	lsls	r2, r3, #14
    4398:	d426      	bmi.n	43e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    439a:	4a41      	ldr	r2, [pc, #260]	; (44a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    439c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    43a0:	6011      	str	r1, [r2, #0]
    43a2:	4940      	ldr	r1, [pc, #256]	; (44a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    43a4:	f3c3 3003 	ubfx	r0, r3, #12, #4
    43a8:	680a      	ldr	r2, [r1, #0]
    43aa:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    43ae:	4302      	orrs	r2, r0
    43b0:	f3c3 4000 	ubfx	r0, r3, #16, #1
    43b4:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    43b8:	600a      	str	r2, [r1, #0]
    43ba:	f851 2c01 	ldr.w	r2, [r1, #-1]
    43be:	f3c3 2003 	ubfx	r0, r3, #8, #4
    43c2:	f022 020f 	bic.w	r2, r2, #15
    43c6:	4302      	orrs	r2, r0
    43c8:	f851 0c01 	ldr.w	r0, [r1, #-1]
    43cc:	f841 2c01 	str.w	r2, [r1, #-1]
    43d0:	f851 2c02 	ldr.w	r2, [r1, #-2]
    43d4:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    43d8:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    43dc:	4313      	orrs	r3, r2
    43de:	f851 2c02 	ldr.w	r2, [r1, #-2]
    43e2:	f841 3c02 	str.w	r3, [r1, #-2]
    43e6:	e003      	b.n	43f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    43e8:	4b2d      	ldr	r3, [pc, #180]	; (44a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    43ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    43ee:	601a      	str	r2, [r3, #0]
    43f0:	4b2d      	ldr	r3, [pc, #180]	; (44a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	071b      	lsls	r3, r3, #28
    43f6:	bf5e      	ittt	pl
    43f8:	4b2c      	ldrpl	r3, [pc, #176]	; (44ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    43fa:	2240      	movpl	r2, #64	; 0x40
    43fc:	601a      	strpl	r2, [r3, #0]
    43fe:	4b2c      	ldr	r3, [pc, #176]	; (44b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    4400:	f44f 7200 	mov.w	r2, #512	; 0x200
    4404:	601a      	str	r2, [r3, #0]
    4406:	f7ff febb 	bl	4180 <NOROM_SetupGetTrimForXoscHfFastStart>
    440a:	4b2a      	ldr	r3, [pc, #168]	; (44b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    440c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    4410:	b2c0      	uxtb	r0, r0
    4412:	7018      	strb	r0, [r3, #0]
    4414:	f3c4 5081 	ubfx	r0, r4, #22, #2
    4418:	2801      	cmp	r0, #1
    441a:	d00b      	beq.n	4434 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    441c:	d302      	bcc.n	4424 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    441e:	2802      	cmp	r0, #2
    4420:	d026      	beq.n	4470 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    4422:	e028      	b.n	4476 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    4424:	2004      	movs	r0, #4
    4426:	2101      	movs	r1, #1
    4428:	f7ff fa84 	bl	3934 <NOROM_OSCClockSourceSet>
    442c:	4822      	ldr	r0, [pc, #136]	; (44b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    442e:	f7ff ff93 	bl	4358 <NOROM_SetupSetAonRtcSubSecInc>
    4432:	e024      	b.n	447e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    4434:	f7ff faac 	bl	3990 <NOROM_OSCClockSourceGet>
    4438:	4604      	mov	r4, r0
    443a:	2004      	movs	r0, #4
    443c:	4621      	mov	r1, r4
    443e:	f7ff fa79 	bl	3934 <NOROM_OSCClockSourceSet>
    4442:	2004      	movs	r0, #4
    4444:	f7ff faa4 	bl	3990 <NOROM_OSCClockSourceGet>
    4448:	42a0      	cmp	r0, r4
    444a:	d1fa      	bne.n	4442 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    444c:	4b1b      	ldr	r3, [pc, #108]	; (44bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    444e:	681c      	ldr	r4, [r3, #0]
    4450:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4454:	f7ff ff80 	bl	4358 <NOROM_SetupSetAonRtcSubSecInc>
    4458:	4b19      	ldr	r3, [pc, #100]	; (44c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    445a:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    445e:	681b      	ldr	r3, [r3, #0]
    4460:	0e20      	lsrs	r0, r4, #24
    4462:	681b      	ldr	r3, [r3, #0]
    4464:	2107      	movs	r1, #7
    4466:	4798      	blx	r3
    4468:	4b0d      	ldr	r3, [pc, #52]	; (44a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    446a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    446e:	601a      	str	r2, [r3, #0]
    4470:	2004      	movs	r0, #4
    4472:	2103      	movs	r1, #3
    4474:	e001      	b.n	447a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    4476:	2004      	movs	r0, #4
    4478:	2102      	movs	r1, #2
    447a:	f7ff fa5b 	bl	3934 <NOROM_OSCClockSourceSet>
    447e:	4b11      	ldr	r3, [pc, #68]	; (44c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    4480:	4a11      	ldr	r2, [pc, #68]	; (44c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4488:	7013      	strb	r3, [r2, #0]
    448a:	f647 0218 	movw	r2, #30744	; 0x7818
    448e:	4b0f      	ldr	r3, [pc, #60]	; (44cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    4490:	801a      	strh	r2, [r3, #0]
    4492:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    4496:	3b44      	subs	r3, #68	; 0x44
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	bd10      	pop	{r4, pc}
    449c:	5000138c 	andpl	r1, r0, ip, lsl #7
    44a0:	400ca040 	andmi	sl, ip, r0, asr #32
    44a4:	4008600c 	andmi	r6, r8, ip
    44a8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    44ac:	400ca068 	andmi	sl, ip, r8, rrx
    44b0:	400ca080 	andmi	sl, ip, r0, lsl #1
    44b4:	400ca108 	andmi	sl, ip, r8, lsl #2
    44b8:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    44bc:	50003fa8 	andpl	r3, r0, r8, lsr #31
    44c0:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    44c4:	5000136c 	andpl	r1, r0, ip, ror #6
    44c8:	400cb00b 	andmi	fp, ip, fp
    44cc:	400cb070 	andmi	fp, ip, r0, ror r0

000044d0 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    44d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44d4:	4b77      	ldr	r3, [pc, #476]	; (46b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    44d6:	4607      	mov	r7, r0
    44d8:	681b      	ldr	r3, [r3, #0]
    44da:	4e77      	ldr	r6, [pc, #476]	; (46b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    44dc:	f013 0f02 	tst.w	r3, #2
    44e0:	d004      	beq.n	44ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    44e2:	2308      	movs	r3, #8
    44e4:	71b3      	strb	r3, [r6, #6]
    44e6:	4a75      	ldr	r2, [pc, #468]	; (46bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    44e8:	4b75      	ldr	r3, [pc, #468]	; (46c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    44ea:	e0df      	b.n	46ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    44ec:	f7ff f9e6 	bl	38bc <NOROM_AONBatMonTemperatureGetDegC>
    44f0:	4b74      	ldr	r3, [pc, #464]	; (46c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    44f2:	681d      	ldr	r5, [r3, #0]
    44f4:	172a      	asrs	r2, r5, #28
    44f6:	02ac      	lsls	r4, r5, #10
    44f8:	f102 0101 	add.w	r1, r2, #1
    44fc:	d408      	bmi.n	4510 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    44fe:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    4502:	10db      	asrs	r3, r3, #3
    4504:	2b08      	cmp	r3, #8
    4506:	bfa8      	it	ge
    4508:	2308      	movge	r3, #8
    450a:	4299      	cmp	r1, r3
    450c:	bfb8      	it	lt
    450e:	4619      	movlt	r1, r3
    4510:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    4514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4518:	d10a      	bne.n	4530 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    451a:	4b6b      	ldr	r3, [pc, #428]	; (46c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    451c:	681a      	ldr	r2, [r3, #0]
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	f3c2 2204 	ubfx	r2, r2, #8, #5
    4524:	2a15      	cmp	r2, #21
    4526:	bf88      	it	hi
    4528:	3a20      	subhi	r2, #32
    452a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    452e:	e00a      	b.n	4546 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    4530:	4b66      	ldr	r3, [pc, #408]	; (46cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    4532:	681a      	ldr	r2, [r3, #0]
    4534:	4b66      	ldr	r3, [pc, #408]	; (46d0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    4536:	f3c2 6204 	ubfx	r2, r2, #24, #5
    453a:	681b      	ldr	r3, [r3, #0]
    453c:	2a15      	cmp	r2, #21
    453e:	bf88      	it	hi
    4540:	3a20      	subhi	r2, #32
    4542:	f3c3 4304 	ubfx	r3, r3, #16, #5
    4546:	2b15      	cmp	r3, #21
    4548:	440a      	add	r2, r1
    454a:	bf88      	it	hi
    454c:	3b20      	subhi	r3, #32
    454e:	2a15      	cmp	r2, #21
    4550:	dc05      	bgt.n	455e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    4552:	f06f 0109 	mvn.w	r1, #9
    4556:	428a      	cmp	r2, r1
    4558:	bfb8      	it	lt
    455a:	460a      	movlt	r2, r1
    455c:	e000      	b.n	4560 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    455e:	2215      	movs	r2, #21
    4560:	4c5c      	ldr	r4, [pc, #368]	; (46d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    4562:	f002 011f 	and.w	r1, r2, #31
    4566:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    456a:	8021      	strh	r1, [r4, #0]
    456c:	495a      	ldr	r1, [pc, #360]	; (46d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    456e:	6809      	ldr	r1, [r1, #0]
    4570:	f011 0403 	ands.w	r4, r1, #3
    4574:	bf18      	it	ne
    4576:	2401      	movne	r4, #1
    4578:	0749      	lsls	r1, r1, #29
    457a:	bf48      	it	mi
    457c:	f044 0402 	orrmi.w	r4, r4, #2
    4580:	b10f      	cbz	r7, 4586 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    4582:	f044 0404 	orr.w	r4, r4, #4
    4586:	f996 1007 	ldrsb.w	r1, [r6, #7]
    458a:	1a41      	subs	r1, r0, r1
    458c:	2904      	cmp	r1, #4
    458e:	dc03      	bgt.n	4598 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    4590:	4949      	ldr	r1, [pc, #292]	; (46b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4592:	7989      	ldrb	r1, [r1, #6]
    4594:	428c      	cmp	r4, r1
    4596:	d06f      	beq.n	4678 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    4598:	f1b0 010f 	subs.w	r1, r0, #15
    459c:	9101      	str	r1, [sp, #4]
    459e:	f004 0101 	and.w	r1, r4, #1
    45a2:	f8df a144 	ldr.w	sl, [pc, #324]	; 46e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    45a6:	f004 0904 	and.w	r9, r4, #4
    45aa:	f004 0802 	and.w	r8, r4, #2
    45ae:	460f      	mov	r7, r1
    45b0:	d42a      	bmi.n	4608 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    45b2:	9901      	ldr	r1, [sp, #4]
    45b4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    45b8:	ea4f 2e21 	mov.w	lr, r1, asr #8
    45bc:	f1be 0f07 	cmp.w	lr, #7
    45c0:	9101      	str	r1, [sp, #4]
    45c2:	d801      	bhi.n	45c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    45c4:	d104      	bne.n	45d0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    45c6:	e001      	b.n	45cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    45c8:	f04f 0e07 	mov.w	lr, #7
    45cc:	2106      	movs	r1, #6
    45ce:	e000      	b.n	45d2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    45d0:	4671      	mov	r1, lr
    45d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 46ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    45d6:	3101      	adds	r1, #1
    45d8:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    45dc:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    45e0:	ebc1 0c0c 	rsb	ip, r1, ip
    45e4:	fa5f f18c 	uxtb.w	r1, ip
    45e8:	f1b9 0f00 	cmp.w	r9, #0
    45ec:	d002      	beq.n	45f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    45ee:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    45f2:	4459      	add	r1, fp
    45f4:	f1b8 0f00 	cmp.w	r8, #0
    45f8:	d002      	beq.n	4600 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    45fa:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    45fe:	4459      	add	r1, fp
    4600:	b12f      	cbz	r7, 460e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4602:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    4606:	e002      	b.n	460e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4608:	f04f 0e00 	mov.w	lr, #0
    460c:	4671      	mov	r1, lr
    460e:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    4612:	fa5f fc8a 	uxtb.w	ip, sl
    4616:	f1b9 0f00 	cmp.w	r9, #0
    461a:	d002      	beq.n	4622 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    461c:	f3ca 2907 	ubfx	r9, sl, #8, #8
    4620:	44cc      	add	ip, r9
    4622:	f1b8 0f00 	cmp.w	r8, #0
    4626:	d002      	beq.n	462e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    4628:	f3ca 4807 	ubfx	r8, sl, #16, #8
    462c:	44c4      	add	ip, r8
    462e:	b10f      	cbz	r7, 4634 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    4630:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    4634:	1a9b      	subs	r3, r3, r2
    4636:	2b01      	cmp	r3, #1
    4638:	bfb8      	it	lt
    463a:	2301      	movlt	r3, #1
    463c:	9f01      	ldr	r7, [sp, #4]
    463e:	2234      	movs	r2, #52	; 0x34
    4640:	4353      	muls	r3, r2
    4642:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    4646:	4379      	muls	r1, r7
    4648:	b2ed      	uxtb	r5, r5
    464a:	436b      	muls	r3, r5
    464c:	3180      	adds	r1, #128	; 0x80
    464e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    4652:	fbb3 f1f1 	udiv	r1, r3, r1
    4656:	f64f 7cff 	movw	ip, #65535	; 0xffff
    465a:	4561      	cmp	r1, ip
    465c:	bf28      	it	cs
    465e:	4661      	movcs	r1, ip
    4660:	287f      	cmp	r0, #127	; 0x7f
    4662:	80b1      	strh	r1, [r6, #4]
    4664:	dc05      	bgt.n	4672 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    4666:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    466a:	4298      	cmp	r0, r3
    466c:	bfb8      	it	lt
    466e:	4618      	movlt	r0, r3
    4670:	e000      	b.n	4674 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    4672:	207f      	movs	r0, #127	; 0x7f
    4674:	71f0      	strb	r0, [r6, #7]
    4676:	71b4      	strb	r4, [r6, #6]
    4678:	4b18      	ldr	r3, [pc, #96]	; (46dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    467a:	2100      	movs	r1, #0
    467c:	681b      	ldr	r3, [r3, #0]
    467e:	6033      	str	r3, [r6, #0]
    4680:	88b3      	ldrh	r3, [r6, #4]
    4682:	2b1e      	cmp	r3, #30
    4684:	bf9e      	ittt	ls
    4686:	4a0c      	ldrls	r2, [pc, #48]	; (46b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4688:	231f      	movls	r3, #31
    468a:	8093      	strhls	r3, [r2, #4]
    468c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4690:	d302      	bcc.n	4698 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    4692:	085b      	lsrs	r3, r3, #1
    4694:	3101      	adds	r1, #1
    4696:	e7f9      	b.n	468c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    4698:	4a11      	ldr	r2, [pc, #68]	; (46e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    469a:	3b0f      	subs	r3, #15
    469c:	430a      	orrs	r2, r1
    469e:	091b      	lsrs	r3, r3, #4
    46a0:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    46a4:	4a06      	ldr	r2, [pc, #24]	; (46c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    46a6:	6013      	str	r3, [r2, #0]
    46a8:	4b0e      	ldr	r3, [pc, #56]	; (46e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    46aa:	2200      	movs	r2, #0
    46ac:	601a      	str	r2, [r3, #0]
    46ae:	b003      	add	sp, #12
    46b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46b4:	40090000 	andmi	r0, r9, r0
    46b8:	2000065c 	andcs	r0, r0, ip, asr r6
    46bc:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    46c0:	40091030 	andmi	r1, r9, r0, lsr r0
    46c4:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    46c8:	50001388 	andpl	r1, r0, r8, lsl #7
    46cc:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    46d0:	5000113c 	andpl	r1, r0, ip, lsr r1
    46d4:	4008626e 	andmi	r6, r8, lr, ror #4
    46d8:	40082224 	andmi	r2, r8, r4, lsr #4
    46dc:	40092008 	andmi	r2, r9, r8
    46e0:	80a4e700 	adchi	lr, r4, r0, lsl #14
    46e4:	40091034 	andmi	r1, r9, r4, lsr r0
    46e8:	5000139c 	mulpl	r0, ip, r3
    46ec:	50001398 	mulpl	r0, r8, r3

000046f0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    46f0:	b510      	push	{r4, lr}
    46f2:	4b14      	ldr	r3, [pc, #80]	; (4744 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    46f4:	681c      	ldr	r4, [r3, #0]
    46f6:	b2a4      	uxth	r4, r4
    46f8:	b314      	cbz	r4, 4740 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    46fa:	f7ff f8df 	bl	38bc <NOROM_AONBatMonTemperatureGetDegC>
    46fe:	4b12      	ldr	r3, [pc, #72]	; (4748 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4700:	f993 2007 	ldrsb.w	r2, [r3, #7]
    4704:	4290      	cmp	r0, r2
    4706:	da05      	bge.n	4714 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    4708:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    470c:	4290      	cmp	r0, r2
    470e:	bfb8      	it	lt
    4710:	4610      	movlt	r0, r2
    4712:	71d8      	strb	r0, [r3, #7]
    4714:	889a      	ldrh	r2, [r3, #4]
    4716:	490c      	ldr	r1, [pc, #48]	; (4748 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4718:	4294      	cmp	r4, r2
    471a:	d310      	bcc.n	473e <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    471c:	4b0b      	ldr	r3, [pc, #44]	; (474c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    471e:	6808      	ldr	r0, [r1, #0]
    4720:	681b      	ldr	r3, [r3, #0]
    4722:	1aa4      	subs	r4, r4, r2
    4724:	3302      	adds	r3, #2
    4726:	1a1b      	subs	r3, r3, r0
    4728:	2b1f      	cmp	r3, #31
    472a:	bf28      	it	cs
    472c:	231f      	movcs	r3, #31
    472e:	085b      	lsrs	r3, r3, #1
    4730:	40dc      	lsrs	r4, r3
    4732:	4414      	add	r4, r2
    4734:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4738:	4294      	cmp	r4, r2
    473a:	bf28      	it	cs
    473c:	4614      	movcs	r4, r2
    473e:	808c      	strh	r4, [r1, #4]
    4740:	bd10      	pop	{r4, pc}
    4742:	bf00      	nop
    4744:	40091034 	andmi	r1, r9, r4, lsr r0
    4748:	2000065c 	andcs	r0, r0, ip, asr r6
    474c:	40092008 	andmi	r2, r9, r8

00004750 <NOROM_SysCtrlResetSourceGet>:
    4750:	4b04      	ldr	r3, [pc, #16]	; (4764 <NOROM_SysCtrlResetSourceGet+0x14>)
    4752:	681a      	ldr	r2, [r3, #0]
    4754:	0412      	lsls	r2, r2, #16
    4756:	bf5a      	itte	pl
    4758:	6818      	ldrpl	r0, [r3, #0]
    475a:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    475e:	2008      	movmi	r0, #8
    4760:	4770      	bx	lr
    4762:	bf00      	nop
    4764:	40090004 	andmi	r0, r9, r4

00004768 <NOROM_ChipInfo_GetChipFamily>:
    4768:	f64b 129a 	movw	r2, #47514	; 0xb99a
    476c:	4b10      	ldr	r3, [pc, #64]	; (47b0 <NOROM_ChipInfo_GetChipFamily+0x48>)
    476e:	6818      	ldr	r0, [r3, #0]
    4770:	f3c0 300f 	ubfx	r0, r0, #12, #16
    4774:	4290      	cmp	r0, r2
    4776:	d106      	bne.n	4786 <NOROM_ChipInfo_GetChipFamily+0x1e>
    4778:	681b      	ldr	r3, [r3, #0]
    477a:	0f1b      	lsrs	r3, r3, #28
    477c:	2b0b      	cmp	r3, #11
    477e:	bf0c      	ite	eq
    4780:	2004      	moveq	r0, #4
    4782:	2000      	movne	r0, #0
    4784:	e011      	b.n	47aa <NOROM_ChipInfo_GetChipFamily+0x42>
    4786:	f64b 13be 	movw	r3, #47550	; 0xb9be
    478a:	4298      	cmp	r0, r3
    478c:	d00a      	beq.n	47a4 <NOROM_ChipInfo_GetChipFamily+0x3c>
    478e:	f64b 3341 	movw	r3, #47937	; 0xbb41
    4792:	4298      	cmp	r0, r3
    4794:	d008      	beq.n	47a8 <NOROM_ChipInfo_GetChipFamily+0x40>
    4796:	f64b 3320 	movw	r3, #47904	; 0xbb20
    479a:	4298      	cmp	r0, r3
    479c:	bf14      	ite	ne
    479e:	20ff      	movne	r0, #255	; 0xff
    47a0:	2002      	moveq	r0, #2
    47a2:	e002      	b.n	47aa <NOROM_ChipInfo_GetChipFamily+0x42>
    47a4:	2001      	movs	r0, #1
    47a6:	e000      	b.n	47aa <NOROM_ChipInfo_GetChipFamily+0x42>
    47a8:	2003      	movs	r0, #3
    47aa:	b240      	sxtb	r0, r0
    47ac:	4770      	bx	lr
    47ae:	bf00      	nop
    47b0:	50001318 	andpl	r1, r0, r8, lsl r3

000047b4 <NOROM_ChipInfo_GetHwRevision>:
    47b4:	b538      	push	{r3, r4, r5, lr}
    47b6:	4b19      	ldr	r3, [pc, #100]	; (481c <NOROM_ChipInfo_GetHwRevision+0x68>)
    47b8:	681d      	ldr	r5, [r3, #0]
    47ba:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    47be:	6818      	ldr	r0, [r3, #0]
    47c0:	0f2d      	lsrs	r5, r5, #28
    47c2:	b2c4      	uxtb	r4, r0
    47c4:	2c80      	cmp	r4, #128	; 0x80
    47c6:	bf28      	it	cs
    47c8:	2400      	movcs	r4, #0
    47ca:	f7ff ffcd 	bl	4768 <NOROM_ChipInfo_GetChipFamily>
    47ce:	2804      	cmp	r0, #4
    47d0:	d821      	bhi.n	4816 <NOROM_ChipInfo_GetHwRevision+0x62>
    47d2:	e8df f000 	tbb	[pc, r0]
    47d6:	1b1b1303 	blne	6c93ea <__ccfg+0x6a9442>
    47da:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    47de:	2d07      	cmp	r5, #7
    47e0:	d819      	bhi.n	4816 <NOROM_ChipInfo_GetHwRevision+0x62>
    47e2:	e8df f005 	tbb	[pc, r5]
    47e6:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    47ea:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    47ee:	2014      	movs	r0, #20
    47f0:	e012      	b.n	4818 <NOROM_ChipInfo_GetHwRevision+0x64>
    47f2:	2015      	movs	r0, #21
    47f4:	e010      	b.n	4818 <NOROM_ChipInfo_GetHwRevision+0x64>
    47f6:	f104 0016 	add.w	r0, r4, #22
    47fa:	e00a      	b.n	4812 <NOROM_ChipInfo_GetHwRevision+0x5e>
    47fc:	b125      	cbz	r5, 4808 <NOROM_ChipInfo_GetHwRevision+0x54>
    47fe:	2d02      	cmp	r5, #2
    4800:	d109      	bne.n	4816 <NOROM_ChipInfo_GetHwRevision+0x62>
    4802:	f104 0014 	add.w	r0, r4, #20
    4806:	e004      	b.n	4812 <NOROM_ChipInfo_GetHwRevision+0x5e>
    4808:	200a      	movs	r0, #10
    480a:	e005      	b.n	4818 <NOROM_ChipInfo_GetHwRevision+0x64>
    480c:	b91d      	cbnz	r5, 4816 <NOROM_ChipInfo_GetHwRevision+0x62>
    480e:	f104 000a 	add.w	r0, r4, #10
    4812:	b2c0      	uxtb	r0, r0
    4814:	e000      	b.n	4818 <NOROM_ChipInfo_GetHwRevision+0x64>
    4816:	20ff      	movs	r0, #255	; 0xff
    4818:	b240      	sxtb	r0, r0
    481a:	bd38      	pop	{r3, r4, r5, pc}
    481c:	50001318 	andpl	r1, r0, r8, lsl r3

00004820 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    4820:	b508      	push	{r3, lr}
    4822:	f7ff ffa1 	bl	4768 <NOROM_ChipInfo_GetChipFamily>
    4826:	2801      	cmp	r0, #1
    4828:	d103      	bne.n	4832 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    482a:	f7ff ffc3 	bl	47b4 <NOROM_ChipInfo_GetHwRevision>
    482e:	2813      	cmp	r0, #19
    4830:	dc00      	bgt.n	4834 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    4832:	e7fe      	b.n	4832 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    4834:	bd08      	pop	{r3, pc}
	...

00004838 <AuxAdiDdiSafeWrite.constprop.1>:
    4838:	b538      	push	{r3, r4, r5, lr}
    483a:	4604      	mov	r4, r0
    483c:	460d      	mov	r5, r1
    483e:	f7ff f871 	bl	3924 <NOROM_CPUcpsid>
    4842:	4b06      	ldr	r3, [pc, #24]	; (485c <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    4844:	681a      	ldr	r2, [r3, #0]
    4846:	2a00      	cmp	r2, #0
    4848:	d0fb      	beq.n	4842 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    484a:	2201      	movs	r2, #1
    484c:	6025      	str	r5, [r4, #0]
    484e:	601a      	str	r2, [r3, #0]
    4850:	b918      	cbnz	r0, 485a <AuxAdiDdiSafeWrite.constprop.1+0x22>
    4852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4856:	f7ff b869 	b.w	392c <NOROM_CPUcpsie>
    485a:	bd38      	pop	{r3, r4, r5, pc}
    485c:	400c8000 	andmi	r8, ip, r0

00004860 <NOROM_DDI32RegWrite>:
    4860:	4408      	add	r0, r1
    4862:	4611      	mov	r1, r2
    4864:	f7ff bfe8 	b.w	4838 <AuxAdiDdiSafeWrite.constprop.1>

00004868 <memcpy>:
    4868:	b5f0      	push	{r4, r5, r6, r7, lr}
    486a:	46c6      	mov	lr, r8
    486c:	b500      	push	{lr}
    486e:	2a0f      	cmp	r2, #15
    4870:	d945      	bls.n	48fe <memcpy+0x96>
    4872:	000b      	movs	r3, r1
    4874:	2603      	movs	r6, #3
    4876:	4303      	orrs	r3, r0
    4878:	401e      	ands	r6, r3
    487a:	000c      	movs	r4, r1
    487c:	0003      	movs	r3, r0
    487e:	2e00      	cmp	r6, #0
    4880:	d142      	bne.n	4908 <memcpy+0xa0>
    4882:	0015      	movs	r5, r2
    4884:	3d10      	subs	r5, #16
    4886:	092d      	lsrs	r5, r5, #4
    4888:	46ac      	mov	ip, r5
    488a:	012d      	lsls	r5, r5, #4
    488c:	46a8      	mov	r8, r5
    488e:	4480      	add	r8, r0
    4890:	e000      	b.n	4894 <memcpy+0x2c>
    4892:	003b      	movs	r3, r7
    4894:	6867      	ldr	r7, [r4, #4]
    4896:	605f      	str	r7, [r3, #4]
    4898:	68e7      	ldr	r7, [r4, #12]
    489a:	60df      	str	r7, [r3, #12]
    489c:	001f      	movs	r7, r3
    489e:	6825      	ldr	r5, [r4, #0]
    48a0:	601d      	str	r5, [r3, #0]
    48a2:	68a5      	ldr	r5, [r4, #8]
    48a4:	3710      	adds	r7, #16
    48a6:	609d      	str	r5, [r3, #8]
    48a8:	3410      	adds	r4, #16
    48aa:	4543      	cmp	r3, r8
    48ac:	d1f1      	bne.n	4892 <memcpy+0x2a>
    48ae:	4665      	mov	r5, ip
    48b0:	230f      	movs	r3, #15
    48b2:	240c      	movs	r4, #12
    48b4:	3501      	adds	r5, #1
    48b6:	012d      	lsls	r5, r5, #4
    48b8:	1949      	adds	r1, r1, r5
    48ba:	4013      	ands	r3, r2
    48bc:	1945      	adds	r5, r0, r5
    48be:	4214      	tst	r4, r2
    48c0:	d025      	beq.n	490e <memcpy+0xa6>
    48c2:	598c      	ldr	r4, [r1, r6]
    48c4:	51ac      	str	r4, [r5, r6]
    48c6:	3604      	adds	r6, #4
    48c8:	1b9c      	subs	r4, r3, r6
    48ca:	2c03      	cmp	r4, #3
    48cc:	d8f9      	bhi.n	48c2 <memcpy+0x5a>
    48ce:	2403      	movs	r4, #3
    48d0:	3b04      	subs	r3, #4
    48d2:	089b      	lsrs	r3, r3, #2
    48d4:	3301      	adds	r3, #1
    48d6:	009b      	lsls	r3, r3, #2
    48d8:	4022      	ands	r2, r4
    48da:	18ed      	adds	r5, r5, r3
    48dc:	18c9      	adds	r1, r1, r3
    48de:	1e56      	subs	r6, r2, #1
    48e0:	2a00      	cmp	r2, #0
    48e2:	d007      	beq.n	48f4 <memcpy+0x8c>
    48e4:	2300      	movs	r3, #0
    48e6:	e000      	b.n	48ea <memcpy+0x82>
    48e8:	0023      	movs	r3, r4
    48ea:	5cca      	ldrb	r2, [r1, r3]
    48ec:	1c5c      	adds	r4, r3, #1
    48ee:	54ea      	strb	r2, [r5, r3]
    48f0:	429e      	cmp	r6, r3
    48f2:	d1f9      	bne.n	48e8 <memcpy+0x80>
    48f4:	bc04      	pop	{r2}
    48f6:	4690      	mov	r8, r2
    48f8:	bcf0      	pop	{r4, r5, r6, r7}
    48fa:	bc02      	pop	{r1}
    48fc:	4708      	bx	r1
    48fe:	0005      	movs	r5, r0
    4900:	1e56      	subs	r6, r2, #1
    4902:	2a00      	cmp	r2, #0
    4904:	d1ee      	bne.n	48e4 <memcpy+0x7c>
    4906:	e7f5      	b.n	48f4 <memcpy+0x8c>
    4908:	1e56      	subs	r6, r2, #1
    490a:	0005      	movs	r5, r0
    490c:	e7ea      	b.n	48e4 <memcpy+0x7c>
    490e:	001a      	movs	r2, r3
    4910:	e7f6      	b.n	4900 <memcpy+0x98>
    4912:	46c0      	nop			; (mov r8, r8)

00004914 <srand>:
    4914:	2200      	movs	r2, #0
    4916:	4b03      	ldr	r3, [pc, #12]	; (4924 <srand+0x10>)
    4918:	681b      	ldr	r3, [r3, #0]
    491a:	33a8      	adds	r3, #168	; 0xa8
    491c:	6018      	str	r0, [r3, #0]
    491e:	605a      	str	r2, [r3, #4]
    4920:	4770      	bx	lr
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	20000110 	andcs	r0, r0, r0, lsl r1

00004928 <rand>:
    4928:	4b0a      	ldr	r3, [pc, #40]	; (4954 <rand+0x2c>)
    492a:	b510      	push	{r4, lr}
    492c:	681c      	ldr	r4, [r3, #0]
    492e:	34a8      	adds	r4, #168	; 0xa8
    4930:	6820      	ldr	r0, [r4, #0]
    4932:	6861      	ldr	r1, [r4, #4]
    4934:	4a08      	ldr	r2, [pc, #32]	; (4958 <rand+0x30>)
    4936:	4b09      	ldr	r3, [pc, #36]	; (495c <rand+0x34>)
    4938:	f000 f812 	bl	4960 <__aeabi_lmul>
    493c:	2201      	movs	r2, #1
    493e:	2300      	movs	r3, #0
    4940:	1880      	adds	r0, r0, r2
    4942:	4159      	adcs	r1, r3
    4944:	6020      	str	r0, [r4, #0]
    4946:	6061      	str	r1, [r4, #4]
    4948:	0048      	lsls	r0, r1, #1
    494a:	0840      	lsrs	r0, r0, #1
    494c:	bc10      	pop	{r4}
    494e:	bc02      	pop	{r1}
    4950:	4708      	bx	r1
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	20000110 	andcs	r0, r0, r0, lsl r1
    4958:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    495c:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

00004960 <__aeabi_lmul>:
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	000f      	movs	r7, r1
    4964:	0001      	movs	r1, r0
    4966:	46c6      	mov	lr, r8
    4968:	4684      	mov	ip, r0
    496a:	0415      	lsls	r5, r2, #16
    496c:	0400      	lsls	r0, r0, #16
    496e:	0c14      	lsrs	r4, r2, #16
    4970:	0c00      	lsrs	r0, r0, #16
    4972:	0c09      	lsrs	r1, r1, #16
    4974:	0c2d      	lsrs	r5, r5, #16
    4976:	002e      	movs	r6, r5
    4978:	4346      	muls	r6, r0
    497a:	434d      	muls	r5, r1
    497c:	4360      	muls	r0, r4
    497e:	4361      	muls	r1, r4
    4980:	1940      	adds	r0, r0, r5
    4982:	0c34      	lsrs	r4, r6, #16
    4984:	1824      	adds	r4, r4, r0
    4986:	b500      	push	{lr}
    4988:	42a5      	cmp	r5, r4
    498a:	d903      	bls.n	4994 <__aeabi_lmul+0x34>
    498c:	2080      	movs	r0, #128	; 0x80
    498e:	0240      	lsls	r0, r0, #9
    4990:	4680      	mov	r8, r0
    4992:	4441      	add	r1, r8
    4994:	0c25      	lsrs	r5, r4, #16
    4996:	186d      	adds	r5, r5, r1
    4998:	4661      	mov	r1, ip
    499a:	4359      	muls	r1, r3
    499c:	437a      	muls	r2, r7
    499e:	0430      	lsls	r0, r6, #16
    49a0:	1949      	adds	r1, r1, r5
    49a2:	0424      	lsls	r4, r4, #16
    49a4:	0c00      	lsrs	r0, r0, #16
    49a6:	1820      	adds	r0, r4, r0
    49a8:	1889      	adds	r1, r1, r2
    49aa:	bc04      	pop	{r2}
    49ac:	4690      	mov	r8, r2
    49ae:	bcf0      	pop	{r4, r5, r6, r7}
    49b0:	bc04      	pop	{r2}
    49b2:	4710      	bx	r2
    49b4:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    49b8:	20656761 	rsbcs	r6, r5, r1, ror #14
    49bc:	746e6573 	strbtvc	r6, [lr], #-1395	; 0xfffffa8d
    49c0:	45000a0d 	strmi	r0, [r0, #-2573]	; 0xfffff5f3
    49c4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    49c8:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    49cc:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    49d0:	6e697a69 	vnmulvs.f32	s15, s18, s19
    49d4:	6f6e2067 	svcvs	0x006e2067
    49d8:	2e2e6564 	cfsh64cs	mvdx6, mvdx14, #52
    49dc:	0d000a2e 	vstreq	s0, [r0, #-184]	; 0xffffff48
    49e0:	4345520a 	movtmi	r5, #21002	; 0x520a
    49e4:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    49e8:	59542044 	ldmdbpl	r4, {r2, r6, sp}^
    49ec:	203a4550 	eorscs	r4, sl, r0, asr r5
    49f0:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    49f4:	4345520a 	movtmi	r5, #21002	; 0x520a
    49f8:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    49fc:	72672044 	rsbvc	r2, r7, #68	; 0x44
    4a00:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4a04:	203a6469 	eorscs	r6, sl, r9, ror #8
    4a08:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4a0c:	4345520a 	movtmi	r5, #21002	; 0x520a
    4a10:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    4a14:	65732044 	ldrbvs	r2, [r3, #-68]!	; 0xffffffbc
    4a18:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
    4a1c:	3a646920 	bcc	191eea4 <__ccfg+0x18feefc>
    4a20:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4a24:	45520a0d 	ldrbmi	r0, [r2, #-2573]	; 0xfffff5f3
    4a28:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4a2c:	72204445 	eorvc	r4, r0, #1157627904	; 0x45000000
    4a30:	69206365 	stmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sp, lr}
    4a34:	25203a64 	strcs	r3, [r0, #-2660]!	; 0xfffff59c
    4a38:	0a0d0064 	beq	344bd0 <__ccfg+0x324c28>
    4a3c:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    4a40:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4a44:	44494720 	strbmi	r4, [r9], #-1824	; 0xfffff8e0
    4a48:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
    4a4c:	45520d00 	ldrbmi	r0, [r2, #-3328]	; 0xfffff300
    4a50:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4a54:	54204445 	strtpl	r4, [r0], #-1093	; 0xfffffbbb
    4a58:	3a455059 	bcc	1158bc4 <__ccfg+0x1138c1c>
    4a5c:	00752520 	rsbseq	r2, r5, r0, lsr #10
    4a60:	45520a0d 	ldrbmi	r0, [r2, #-2573]	; 0xfffff5f3
    4a64:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4a68:	52204445 	eorpl	r4, r0, #1157627904	; 0x45000000
    4a6c:	4e205145 	sufmism	f5, f0, f5
    4a70:	203a4d55 	eorscs	r4, sl, r5, asr sp
    4a74:	0d007525 	cfstr32eq	mvfx7, [r0, #-148]	; 0xffffff6c
    4a78:	4345520a 	movtmi	r5, #21002	; 0x520a
    4a7c:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    4a80:	49532044 	ldmdbmi	r3, {r2, r6, sp}^
    4a84:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    4a88:	0a0d0075 	beq	344c64 <__ccfg+0x324cbc>
    4a8c:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    4a90:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4a94:	44495220 	strbmi	r5, [r9], #-544	; 0xfffffde0
    4a98:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
    4a9c:	43455200 	movtmi	r5, #20992	; 0x5200
    4aa0:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    4aa4:	49472044 	stmdbmi	r7, {r2, r6, sp}^
    4aa8:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    4aac:	52000a64 	andpl	r0, r0, #100, 20	; 0x64000
    4ab0:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
    4ab4:	20444556 	subcs	r4, r4, r6, asr r5
    4ab8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4abc:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    4ac0:	4552000a 	ldrbmi	r0, [r2, #-10]
    4ac4:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4ac8:	52204445 	eorpl	r4, r0, #1157627904	; 0x45000000
    4acc:	4e205145 	sufmism	f5, f0, f5
    4ad0:	203a4d55 	eorscs	r4, sl, r5, asr sp
    4ad4:	000a6425 	andeq	r6, sl, r5, lsr #8
    4ad8:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    4adc:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4ae0:	44495320 	strbmi	r5, [r9], #-800	; 0xfffffce0
    4ae4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    4ae8:	4552000a 	ldrbmi	r0, [r2, #-10]
    4aec:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4af0:	52204445 	eorpl	r4, r0, #1157627904	; 0x45000000
    4af4:	203a4449 	eorscs	r4, sl, r9, asr #8
    4af8:	000a6425 	andeq	r6, sl, r5, lsr #8
    4afc:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    4b00:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4b04:	43455220 	movtmi	r5, #21024	; 0x5220
    4b08:	3a44524f 	bcc	111944c <__ccfg+0x10f94a4>
    4b0c:	0a732520 	beq	1ccdf94 <__ccfg+0x1cadfec>
    4b10:	52524500 	subspl	r4, r2, #0, 10
    4b14:	203a524f 	eorscs	r5, sl, pc, asr #4
    4b18:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4b1c:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    4b20:	70797420 	rsbsvc	r7, r9, r0, lsr #8
    4b24:	255b2065 	ldrbcs	r2, [fp, #-101]	; 0xffffff9b
    4b28:	69205d64 	stmdbvs	r0!, {r2, r5, r6, r8, sl, fp, ip, lr}
    4b2c:	6f6e2073 	svcvs	0x006e2073
    4b30:	656c2074 	strbvs	r2, [ip, #-116]!	; 0xffffff8c
    4b34:	206c6167 	rsbcs	r6, ip, r7, ror #2
    4b38:	6b636170 	blvs	18dd100 <__ccfg+0x18bd158>
    4b3c:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
    4b40:	00657079 	rsbeq	r7, r5, r9, ror r0
    4b44:	61440a0d 	cmpvs	r4, sp, lsl #20
    4b48:	53206174 			; <UNDEFINED> instruction: 0x53206174
    4b4c:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
    4b50:	520a0d00 	andpl	r0, sl, #0, 26
    4b54:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4b58:	65442064 	strbvs	r2, [r4, #-100]	; 0xffffff9c
    4b5c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4b60:	0a0d0064 	beq	344cf8 <__ccfg+0x324d50>
    4b64:	6f636552 	svcvs	0x00636552
    4b68:	52206472 	eorpl	r6, r0, #1912602624	; 0x72000000
    4b6c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4b70:	20646576 	rsbcs	r6, r4, r6, ror r5
    4b74:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 49e4 <__aeabi_lmul+0x84>
    4b78:	3a642520 	bcc	190e000 <__ccfg+0x18ee058>
    4b7c:	00732520 	rsbseq	r2, r3, r0, lsr #10
    4b80:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4b84:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b88:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4b8c:	6e616320 	cdpvs	3, 6, cr6, cr1, cr0, {1}
    4b90:	62207427 	eorvs	r7, r0, #654311424	; 0x27000000
    4b94:	61732065 	cmnvs	r3, r5, rrx
    4b98:	20646576 	rsbcs	r6, r4, r6, ror r5
    4b9c:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4ba0:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4ba4:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4ba8:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4bac:	63657220 	cmnvs	r5, #32, 4
    4bb0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4bb4:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4bb8:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4bc0 <__aeabi_lmul+0x260>
    4bbc:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4bc0:	20737473 	rsbscs	r7, r3, r3, ror r4
    4bc4:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4bc8:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4bcc:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4bd0:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4bd4:	63657220 	cmnvs	r5, #32, 4
    4bd8:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4bdc:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4be0:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4be8 <__aeabi_lmul+0x288>
    4be4:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4be8:	6f207473 	svcvs	0x00207473
    4bec:	6f6e206e 	svcvs	0x006e206e
    4bf0:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4bf4:	52450064 	subpl	r0, r5, #100	; 0x64
    4bf8:	3a524f52 	bcc	1498948 <__ccfg+0x14789a0>
    4bfc:	6d6f7320 	stclvs	3, cr7, [pc, #-128]!	; 4b84 <__aeabi_lmul+0x224>
    4c00:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
    4c04:	65772067 	ldrbvs	r2, [r7, #-103]!	; 0xffffff99
    4c08:	7720746e 	strvc	r7, [r0, -lr, ror #8]!
    4c0c:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    4c10:	65687720 	strbvs	r7, [r8, #-1824]!	; 0xfffff8e0
    4c14:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0xffffff92
    4c18:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4c1c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4c20:	20656874 	rsbcs	r6, r5, r4, ror r8
    4c24:	6b636170 	blvs	18dd1ec <__ccfg+0x18bd244>
    4c28:	43007465 	movwmi	r7, #1125	; 0x465
    4c2c:	6f6e6e61 	svcvs	0x006e6e61
    4c30:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    4c34:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    4c38:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    4c3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4c40:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    4c44:	470a0d00 	strmi	r0, [sl, -r0, lsl #26]
    4c48:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4c4c:	20642520 	rsbcs	r2, r4, r0, lsr #10
    4c50:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4c54:	23206563 			; <UNDEFINED> instruction: 0x23206563
    4c58:	28206425 	stmdacs	r0!, {r0, r2, r5, sl, sp, lr}
    4c5c:	252f6425 	strcs	r6, [pc, #-1061]!	; 483f <AuxAdiDdiSafeWrite.constprop.1+0x7>
    4c60:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    4c64:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4c68:	0a0d2973 	beq	34f23c <__ccfg+0x32f294>
    4c6c:	72294728 	eorvc	r4, r9, #40, 14	; 0xa00000
    4c70:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4c74:	0a0d4449 	beq	355da0 <__ccfg+0x335df8>
    4c78:	65294e28 	strvs	r4, [r9, #-3624]!	; 0xfffff1d8
    4c7c:	65642077 	strbvs	r2, [r4, #-119]!	; 0xffffff89
    4c80:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4c84:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4c88:	2946280a 	stmdbcs	r6, {r1, r3, fp, sp}^
    4c8c:	20646e69 	rsbcs	r6, r4, r9, ror #28
    4c90:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4c94:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4c98:	280a0d73 	stmdacs	sl, {r0, r1, r4, r5, r6, r8, sl, fp}
    4c9c:	65722943 	ldrbvs	r2, [r2, #-2371]!	; 0xfffff6bd
    4ca0:	20657461 	rsbcs	r7, r5, r1, ror #8
    4ca4:	6f636572 	svcvs	0x00636572
    4ca8:	6f206472 	svcvs	0x00206472
    4cac:	656e206e 	strbvs	r2, [lr, #-110]!	; 0xffffff92
    4cb0:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4cb4:	0a0d726f 	beq	361678 <__ccfg+0x3416d0>
    4cb8:	65294428 	strvs	r4, [r9, #-1064]!	; 0xfffffbd8
    4cbc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4cc0:	63657220 	cmnvs	r5, #32, 4
    4cc4:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4cc8:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4ccc:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4cd0:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4cd4:	2952280a 	ldmdbcs	r2, {r1, r3, fp, sp}^
    4cd8:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4cdc:	20657665 	rsbcs	r7, r5, r5, ror #12
    4ce0:	6f636572 	svcvs	0x00636572
    4ce4:	66206472 			; <UNDEFINED> instruction: 0x66206472
    4ce8:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    4cec:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4cf0:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4cf4:	53280a0d 			; <UNDEFINED> instruction: 0x53280a0d
    4cf8:	776f6829 	strbvc	r6, [pc, -r9, lsr #16]!
    4cfc:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    4d00:	72206c61 	eorvc	r6, r0, #24832	; 0x6100
    4d04:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4d08:	0a0d7364 	beq	361aa0 <__ccfg+0x341af8>
    4d0c:	29652852 	stmdbcs	r5!, {r1, r4, r6, fp, sp}^
    4d10:	20746573 	rsbscs	r6, r4, r3, ror r5
    4d14:	61636f6c 	cmnvs	r3, ip, ror #30
    4d18:	7473206c 	ldrbtvc	r2, [r3], #-108	; 0xffffff94
    4d1c:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4d20:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
    4d24:	6c65530a 	stclvs	3, cr5, [r5], #-40	; 0xffffffd8
    4d28:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4d2c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4d30:	00632500 	rsbeq	r2, r3, r0, lsl #10
    4d34:	61656c50 	cmnvs	r5, r0, asr ip
    4d38:	70206573 	eorvc	r6, r0, r3, ror r5
    4d3c:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4d40:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4d44:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4d48:	6f726720 	svcvs	0x00726720
    4d4c:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4d50:	203a2344 	eorscs	r2, sl, r4, asr #6
    4d54:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    4d58:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4d5c:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4d64 <__aeabi_lmul+0x404>
    4d60:	72672065 	rsbvc	r2, r7, #101	; 0x65
    4d64:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4d68:	0d004449 	cfstrseq	mvf4, [r0, #-292]	; 0xfffffedc
    4d6c:	656c500a 	strbvs	r5, [ip, #-10]!
    4d70:	20657361 	rsbcs	r7, r5, r1, ror #6
    4d74:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4d78:	20656469 	rsbcs	r6, r5, r9, ror #8
    4d7c:	656e2061 	strbvs	r2, [lr, #-97]!	; 0xffffff9f
    4d80:	6f6e2077 	svcvs	0x006e2077
    4d84:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4d88:	28202344 	stmdacs	r0!, {r2, r6, r8, r9, sp}
    4d8c:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    4d90:	636e6920 	cmnvs	lr, #32, 18	; 0x80000
    4d94:	6973756c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    4d98:	3a296576 	bcc	a5e378 <__ccfg+0xa3e3d0>
    4d9c:	754f0020 	strbvc	r0, [pc, #-32]	; 4d84 <__aeabi_lmul+0x424>
    4da0:	666f2074 			; <UNDEFINED> instruction: 0x666f2074
    4da4:	6e615220 	cdpvs	2, 6, cr5, cr1, cr0, {1}
    4da8:	49006567 	stmdbmi	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    4dac:	73692044 	cmnvc	r9, #68	; 0x44
    4db0:	726c6120 	rsbvc	r6, ip, #32, 2
    4db4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    4db8:	206e6920 	rsbcs	r6, lr, r0, lsr #18
    4dbc:	00657375 	rsbeq	r7, r5, r5, ror r3
    4dc0:	44490a0d 	strbmi	r0, [r9], #-2573	; 0xfffff5f3
    4dc4:	25203a23 	strcs	r3, [r0, #-2595]!	; 0xfffff5dd
    4dc8:	69202c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp}
    4dcc:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    4dd0:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
    4dd4:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    4dd8:	6f686320 	svcvs	0x00686320
    4ddc:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    4de0:	61655220 	cmnvs	r5, r0, lsr #4
    4de4:	3a6e6f73 	bcc	1ba0bb8 <__ccfg+0x1b80c10>
    4de8:	2e732520 	cdpcs	5, 7, cr2, cr3, cr0, {1}
    4dec:	72724500 	rsbsvc	r4, r2, #0, 10
    4df0:	4320726f 			; <UNDEFINED> instruction: 0x4320726f
    4df4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    4df8:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4dfc:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
    4e00:	72724120 	rsbsvc	r4, r2, #32, 2
    4e04:	0d007961 	vstreq.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
    4e08:	69654e0a 	stmdbvs	r5!, {r1, r3, r9, sl, fp, lr}^
    4e0c:	6f626867 	svcvs	0x00626867
    4e10:	203a7372 	eorscs	r7, sl, r2, ror r3
    4e14:	2c752500 	cfldr64cs	mvdx2, [r5], #-0
    4e18:	6c500020 	mrrcvs	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
    4e1c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4e20:	6f727020 	svcvs	0x00727020
    4e24:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    4e28:	6e206120 	sufvssp	f6, f0, f0
    4e2c:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4e30:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    4e34:	35322d30 	ldrcc	r2, [r2, #-3376]!	; 0xfffff2d0
    4e38:	00203a29 	eoreq	r3, r0, r9, lsr #20
    4e3c:	6f727245 	svcvs	0x00727245
    4e40:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    4e44:	6f72706d 	svcvs	0x0072706d
    4e48:	20726570 	rsbscs	r6, r2, r0, ror r5
    4e4c:	50004449 	andpl	r4, r0, r9, asr #8
    4e50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4e54:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4e58:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4e5c:	20612065 	rsbcs	r2, r1, r5, rrx
    4e60:	6f636572 	svcvs	0x00636572
    4e64:	28206472 	stmdacs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4e68:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    4e6c:	3c206874 	stccc	8, cr6, [r0], #-464	; 0xfffffe30
    4e70:	3032203d 	eorscc	r2, r2, sp, lsr r0
    4e74:	00203a29 	eoreq	r3, r0, r9, lsr #20
    4e78:	6f727245 	svcvs	0x00727245
    4e7c:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    4e80:	6f72706d 	svcvs	0x0072706d
    4e84:	20726570 	rsbscs	r6, r2, r0, ror r5
    4e88:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4e8c:	00444920 	subeq	r4, r4, r0, lsr #18
    4e90:	61656c50 	cmnvs	r5, r0, asr ip
    4e94:	70206573 	eorvc	r6, r0, r3, ror r5
    4e98:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4e9c:	74206564 	strtvc	r6, [r0], #-1380	; 0xfffffa9c
    4ea0:	72206568 	eorvc	r6, r0, #104, 10	; 0x1a000000
    4ea4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4ea8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    4eac:	20786564 	rsbscs	r6, r8, r4, ror #10
    4eb0:	342d3028 	strtcc	r3, [sp], #-40	; 0xffffffd8
    4eb4:	203a2930 	eorscs	r2, sl, r0, lsr r9
    4eb8:	72724500 	rsbsvc	r4, r2, #0, 10
    4ebc:	203a726f 	eorscs	r7, sl, pc, ror #4
    4ec0:	61766e69 	cmnvs	r6, r9, ror #28
    4ec4:	2064696c 	rsbcs	r6, r4, ip, ror #18
    4ec8:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    4ecc:	0a0d0078 	beq	3450b4 <__ccfg+0x32510c>
    4ed0:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    4ed4:	69540978 	ldmdbvs	r4, {r3, r4, r5, r6, r8, fp}^
    4ed8:	5320656d 			; <UNDEFINED> instruction: 0x5320656d
    4edc:	706d6174 	rsbvc	r6, sp, r4, ror r1
    4ee0:	774f0909 	strbvc	r0, [pc, -r9, lsl #18]
    4ee4:	2072656e 	rsbscs	r6, r2, lr, ror #10
    4ee8:	52094449 	andpl	r4, r9, #1224736768	; 0x49000000
    4eec:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4ef0:	61442064 	cmpvs	r4, r4, rrx
    4ef4:	0d006174 	stfeqs	f6, [r0, #-464]	; 0xfffffe30
    4ef8:	0964250a 	stmdbeq	r4!, {r1, r3, r8, sl, sp}^
    4efc:	09096425 	stmdbeq	r9, {r0, r2, r5, sl, sp, lr}
    4f00:	09642509 	stmdbeq	r4!, {r0, r3, r8, sl, sp}^
    4f04:	0d007325 	stceq	3, cr7, [r0, #-148]	; 0xffffff6c
    4f08:	6961460a 	stmdbvs	r1!, {r1, r3, r9, sl, lr}^
    4f0c:	2064656c 	rsbcs	r6, r4, ip, ror #10
    4f10:	72206f74 	eorvc	r6, r0, #116, 30	; 0x1d0
    4f14:	68636165 	stmdavs	r3!, {r0, r2, r5, r6, r8, sp, lr}^
    4f18:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    4f1c:	73656420 	cmnvc	r5, #32, 8	; 0x20000000
    4f20:	616e6974 	smcvs	59028	; 0xe694
    4f24:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    4f28:	450a0d00 	strmi	r0, [sl, #-3328]	; 0xfffff300
    4f2c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4f30:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    4f34:	53595300 	cmppl	r9, #0, 6
    4f38:	3a525245 	bcc	1499854 <__ccfg+0x14798ac>
    4f3c:	2c782520 	cfldr64cs	mvdx2, [r8], #-128	; 0xffffff80
    4f40:	00732520 	rsbseq	r2, r3, r0, lsr #10
    4f44:	00726175 	rsbseq	r6, r2, r5, ror r1
    4f48:	00696175 	rsbeq	r6, r9, r5, ror r1
    4f4c:	4f636950 	svcmi	0x00636950
    4f50:	35762053 	ldrbcc	r2, [r6, #-83]!	; 0xffffffad
    4f54:	502f342e 	eorpl	r3, pc, lr, lsr #8
    4f58:	30383147 	eorscc	r3, r8, r7, asr #2
    4f5c:	41323232 	teqmi	r2, r2, lsr r2
    4f60:	3143432d 	cmpcc	r3, sp, lsr #6
    4f64:	5f303533 	svcpl	0x00303533
    4f68:	4e55414c 	rdfmism	f4, f5, #4.0
    4f6c:	4c584843 	mrrcmi	8, 4, r4, r8, cr3
    4f70:	4328202c 			; <UNDEFINED> instruction: 0x4328202c
    4f74:	6c4f2029 	mcrrvs	0, 2, r2, pc, cr9
    4f78:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    4f7c:	6f432074 	svcvs	0x00432074
    4f80:	6e756d6d 	cdpvs	13, 7, cr6, cr5, cr13, {3}
    4f84:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    4f88:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    4f8c:	3032202c 	eorscc	r2, r2, ip, lsr #32
    4f90:	322d3230 	eorcc	r3, sp, #48, 4
    4f94:	00383130 	eorseq	r3, r8, r0, lsr r1
    4f98:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
    4f9c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    4fa0:	4d415220 	sfmmi	f5, 2, [r1, #-128]	; 0xffffff80
    4fa4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    4fa8:	74796220 	ldrbtvc	r6, [r9], #-544	; 0xfffffde0
    4fac:	73007365 	movwvc	r7, #869	; 0x365
    4fb0:	69500074 	ldmdbvs	r0, {r2, r4, r5, r6}^
    4fb4:	20534f63 	subscs	r4, r3, r3, ror #30
    4fb8:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
    4fbc:	00006465 	andeq	r6, r0, r5, ror #8

00004fc0 <port_confs>:
    4fc0:	00306080 	eorseq	r6, r0, r0, lsl #1
    4fc4:	00386080 	eorseq	r6, r8, r0, lsl #1
    4fc8:	00186010 	andseq	r6, r8, r0, lsl r0
    4fcc:	2010400f 	andscs	r4, r0, pc
    4fd0:	30694000 	rsbcc	r4, r9, r0
    4fd4:	30714000 	rsbscc	r4, r1, r0
    4fd8:	00b86008 	adcseq	r6, r8, r8
    4fdc:	60c94000 	sbcvs	r4, r9, r0
    4fe0:	60d14000 	sbcsvs	r4, r1, r0
    4fe4:	60d94000 	sbcsvs	r4, r9, r0
    4fe8:	60e14000 	rscvs	r4, r1, r0
    4fec:	00096380 	andeq	r6, r9, r0, lsl #7
    4ff0:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    4ff4:	20402000 	subcs	r2, r0, r0
    4ff8:	00486080 	subeq	r6, r8, r0, lsl #1
    4ffc:	00506080 	subseq	r6, r0, r0, lsl #1
    5000:	00a06000 	adceq	r6, r0, r0
    5004:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    5008:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    500c:	73006120 	movwvc	r6, #288	; 0x120
    5010:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    5014:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    5018:	616d006f 	cmnvs	sp, pc, rrx
    501c:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    5020:	00676c61 	rsbeq	r6, r7, r1, ror #24
    5024:	0069706b 	rsbeq	r7, r9, fp, rrx
    5028:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

0000502d <__pi_hex_enc_table>:
    502d:	33323130 	teqcc	r2, #48, 2
    5031:	37363534 			; <UNDEFINED> instruction: 0x37363534
    5035:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    5039:	46454443 	strbmi	r4, [r5], -r3, asr #8
    503d:	30766374 	rsbscc	r6, r6, r4, ror r3
    5041:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    5045:	736f7073 	cmnvc	pc, #115	; 0x73
    5049:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    504d:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    5051:	736f7073 	cmnvc	pc, #115	; 0x73
    5055:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    5059:	63740079 	cmnvs	r4, #121	; 0x79
    505d:	00323076 	eorseq	r3, r2, r6, ror r0
    5061:	30766374 	rsbscc	r6, r6, r4, ror r3
    5065:	63740033 	cmnvs	r4, #51	; 0x33
    5069:	00343076 	eorseq	r3, r4, r6, ror r0
    506d:	30766374 	rsbscc	r6, r6, r4, ror r3
    5071:	63740035 	cmnvs	r4, #53	; 0x35
    5075:	00363076 	eorseq	r3, r6, r6, ror r0
    5079:	31766374 	cmncc	r6, r4, ror r3
    507d:	63740030 	cmnvs	r4, #48	; 0x30
    5081:	00313176 	eorseq	r3, r1, r6, ror r1
    5085:	31766374 	cmncc	r6, r4, ror r3
    5089:	63740036 	cmnvs	r4, #54	; 0x36
    508d:	00373176 	eorseq	r3, r7, r6, ror r1
    5091:	31766374 	cmncc	r6, r4, ror r3
    5095:	63740038 	cmnvs	r4, #56	; 0x38
    5099:	00333276 	eorseq	r3, r3, r6, ror r2
    509d:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    50a1:	63740032 	cmnvs	r4, #50	; 0x32
    50a5:	00363276 	eorseq	r3, r6, r6, ror r2
    50a9:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    50ad:	63740037 	cmnvs	r4, #55	; 0x37
    50b1:	00383276 	eorseq	r3, r8, r6, ror r2
    50b5:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    50b9:	63740039 	cmnvs	r4, #57	; 0x39
    50bd:	00303376 	eorseq	r3, r0, r6, ror r3
    50c1:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    50c5:	63740031 	cmnvs	r4, #49	; 0x31
    50c9:	00323376 	eorseq	r3, r2, r6, ror r3
    50cd:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    50d1:	63740033 	cmnvs	r4, #51	; 0x33
    50d5:	00343376 	eorseq	r3, r4, r6, ror r3

000050d9 <__input_pins>:
    50d9:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

000050de <__button_list>:
    50de:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    50e2:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    50e6:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    50ea:	00317472 	eorseq	r7, r1, r2, ror r4
    50ee:	20505548 	subscs	r5, r0, r8, asr #10
    50f2:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    50f6:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    50fa:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    50fe:	30636920 	rsbcc	r6, r3, r0, lsr #18
    5102:	50554800 	subspl	r4, r5, r0, lsl #16
    5106:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    510a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    510e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5112:	32747200 	rsbscc	r7, r4, #0, 4
    5116:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    511a:	00585220 	subseq	r5, r8, r0, lsr #4
    511e:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    5122:	00797020 	rsbseq	r7, r9, r0, lsr #32
    5126:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    512a:	31636300 	cmncc	r3, r0, lsl #6
    512e:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    5132:	31434300 	mrscc	r4, (UNDEF: 115)
    5136:	3a303533 	bcc	c1260a <__ccfg+0xbf2662>
    513a:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    513e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    5142:	00642520 	rsbeq	r2, r4, r0, lsr #10

00005146 <patable>:
    5146:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    514a:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    514e:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    5152:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

00005158 <patchGenfskRfe>:
    5158:	000061a3 	andeq	r6, r0, r3, lsr #3
    515c:	1307147f 	movwne	r1, #29823	; 0x747f
    5160:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    5164:	3f131f2e 	svccc	0x00131f2e
    5168:	003f0ab0 	ldrhteq	r0, [pc], -r0
    516c:	0000ff07 	andeq	pc, r0, r7, lsl #30
    5170:	40004030 	andmi	r4, r0, r0, lsr r0
    5174:	40034001 	andmi	r4, r3, r1
    5178:	400f4007 	andmi	r4, pc, r7
    517c:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    5180:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    5184:	4fcf47cf 	svcmi	0x00cf47cf
    5188:	2fcf3fcf 	svccs	0x00cf3fcf
    518c:	0fcf1fcf 	svceq	0x00cf1fcf
    5190:	00000000 	andeq	r0, r0, r0
    5194:	0008000f 	andeq	r0, r8, pc
    5198:	003f0000 	eorseq	r0, pc, r0
    519c:	00400000 	subeq	r0, r0, r0
    51a0:	0000003f 	andeq	r0, r0, pc, lsr r0
    51a4:	00680004 	rsbeq	r0, r8, r4
    51a8:	00dc000e 	sbcseq	r0, ip, lr
    51ac:	00430006 	subeq	r0, r3, r6
    51b0:	0005001a 	andeq	r0, r5, sl, lsl r0
    51b4:	00000000 	andeq	r0, r0, r0
    51b8:	00000002 	andeq	r0, r0, r2
    51bc:	0000003f 	andeq	r0, r0, pc, lsr r0
    51c0:	00040000 	andeq	r0, r4, r0
    51c4:	000000c0 	andeq	r0, r0, r0, asr #1
    51c8:	00c00004 	sbceq	r0, r0, r4
    51cc:	00070000 	andeq	r0, r7, r0
    51d0:	9100c050 	qaddls	ip, r0, r0
    51d4:	c0707000 	rsbsgt	r7, r0, r0
    51d8:	70009100 	andvc	r9, r0, r0, lsl #2
    51dc:	00213182 	eoreq	r3, r1, r2, lsl #3
    51e0:	b1109131 	tstlt	r0, r1, lsr r1
    51e4:	81017000 	mrshi	r7, (UNDEF: 1)
    51e8:	a100b101 	tstge	r0, r1, lsl #2
    51ec:	91323182 	teqls	r2, r2, lsl #3
    51f0:	9101b110 	tstls	r1, r0, lsl r1
    51f4:	81411011 	cmphi	r1, r1, lsl r0
    51f8:	404f2241 	submi	r2, pc, r1, asr #4
    51fc:	700006f1 	strdvc	r0, [r0], -r1
    5200:	9101c051 	qaddls	ip, r1, r1
    5204:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    5208:	d0083183 	andle	r3, r8, r3, lsl #3
    520c:	6f413118 	svcvs	0x00413118
    5210:	91310031 	teqls	r1, r1, lsr r0
    5214:	1483b110 	strne	fp, [r3], #272	; 0x110
    5218:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    521c:	10257000 	eorne	r7, r5, r0
    5220:	9100c050 	qaddls	ip, r0, r0
    5224:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    5228:	6f031420 	svcvs	0x00031420
    522c:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5230:	3182c022 	orrcc	ip, r2, r2, lsr #32
    5234:	91310021 	teqls	r1, r1, lsr #32
    5238:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    523c:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5240:	3182c082 	orrcc	ip, r2, r2, lsl #1
    5244:	91310021 	teqls	r1, r1, lsr #32
    5248:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    524c:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    5250:	00213182 	eoreq	r3, r1, r2, lsl #3
    5254:	b1109131 	tstlt	r0, r1, lsr r1
    5258:	31151050 	tstcc	r5, r0, asr r0
    525c:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    5260:	643f7000 	ldrtvs	r7, [pc], #-0	; 5268 <patchGenfskRfe+0x110>
    5264:	1031c052 	eorsne	ip, r1, r2, asr r0
    5268:	31610631 	cmncc	r1, r1, lsr r6
    526c:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    5270:	1031c112 	eorsne	ip, r1, r2, lsl r1
    5274:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    5278:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    527c:	70006442 	andvc	r6, r0, r2, asr #8
    5280:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    5284:	8220c088 	eorhi	ip, r0, #136	; 0x88
    5288:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    528c:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    5290:	3001c041 	andcc	ip, r1, r1, asr #32
    5294:	1a181418 	bne	60a2fc <__ccfg+0x5ea354>
    5298:	8230c089 	eorshi	ip, r0, #137	; 0x89
    529c:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    52a0:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    52a4:	3001c041 	andcc	ip, r1, r1, asr #32
    52a8:	1a191419 	bne	64a314 <__ccfg+0x62a36c>
    52ac:	9136643c 	teqls	r6, ip, lsr r4
    52b0:	9134b110 	teqls	r4, r0, lsl r1
    52b4:	b054b110 	subslt	fp, r4, r0, lsl r1
    52b8:	a0547100 	subsge	r7, r4, r0, lsl #2
    52bc:	80f0b064 	rscshi	fp, r0, r4, rrx
    52c0:	40af2200 	adcmi	r2, pc, r0, lsl #4
    52c4:	90b01240 	adcsls	r1, r0, r0, asr #4
    52c8:	8253b032 	subshi	fp, r3, #50	; 0x32
    52cc:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    52d0:	643f6485 	ldrtvs	r6, [pc], #-1157	; 52d8 <patchGenfskRfe+0x180>
    52d4:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    52d8:	c1706442 	cmngt	r0, r2, asr #8
    52dc:	c11168c2 	tstgt	r1, r2, asr #17
    52e0:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    52e4:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    52e8:	9100c050 	qaddls	ip, r0, r0
    52ec:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    52f0:	16141615 			; <UNDEFINED> instruction: 0x16141615
    52f4:	10531042 	subsne	r1, r3, r2, asr #32
    52f8:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    52fc:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    5300:	31313981 	teqcc	r1, r1, lsl #19
    5304:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5308:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    530c:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    5310:	10731062 	rsbsne	r1, r3, r2, rrx
    5314:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    5318:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    531c:	101b3981 	andsne	r3, fp, r1, lsl #19
    5320:	c0e26572 	rscgt	r6, r2, r2, ror r5
    5324:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    5328:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    532c:	b0610002 	rsblt	r0, r1, r2
    5330:	91327100 	teqls	r2, r0, lsl #2
    5334:	a051b110 	subsge	fp, r1, r0, lsl r1
    5338:	7227b061 	eorvc	fp, r7, #97	; 0x61
    533c:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    5340:	12800000 	addne	r0, r0, #0
    5344:	b03290b0 	ldrhtlt	r9, [r2], -r0
    5348:	c0507000 	subsgt	r7, r0, r0
    534c:	72279100 	eorvc	r9, r7, #0, 2
    5350:	10629299 	mlsne	r2, r9, r2, r9
    5354:	c3f01073 	mvnsgt	r1, #115	; 0x73
    5358:	31218231 			; <UNDEFINED> instruction: 0x31218231
    535c:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    5360:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5364:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    5368:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    536c:	10531042 	subsne	r1, r3, r2, asr #32
    5370:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5374:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    5378:	31313981 	teqcc	r1, r1, lsl #19
    537c:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    5380:	b061a051 	rsblt	sl, r1, r1, asr r0
    5384:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    5388:	643f6918 	ldrtvs	r6, [pc], #-2328	; 5390 <patchGenfskRfe+0x238>
    538c:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    5390:	c1016442 	tstgt	r1, r2, asr #8
    5394:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    5398:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    539c:	b1109135 	tstlt	r0, r5, lsr r1
    53a0:	64858253 	strvs	r8, [r5], #595	; 0x253
    53a4:	90b012c0 	adcsls	r1, r0, r0, asr #5
    53a8:	7000b032 	andvc	fp, r0, r2, lsr r0
    53ac:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    53b0:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    53b4:	c111c122 	tstgt	r1, r2, lsr #2
    53b8:	c0026442 	andgt	r6, r2, r2, asr #8
    53bc:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    53c0:	c331c062 	teqgt	r1, #98	; 0x62
    53c4:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    53c8:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    53cc:	c111c302 	tstgt	r1, r2, lsl #6
    53d0:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    53d4:	64853953 	strvs	r3, [r5], #2387	; 0x953
    53d8:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    53dc:	41402211 	cmpmi	r0, r1, lsl r2
    53e0:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    53e4:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    53e8:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    53ec:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    53f0:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    53f4:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    53f8:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    53fc:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    5400:	70006954 	andvc	r6, r0, r4, asr r9
    5404:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    5408:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    540c:	c011c252 	andsgt	ip, r1, r2, asr r2
    5410:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    5414:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    5418:	c101c002 	tstgt	r1, r2
    541c:	c0626442 	rsbgt	r6, r2, r2, asr #8
    5420:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    5424:	c101c122 	tstgt	r1, r2, lsr #2
    5428:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    542c:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    5430:	c101c302 	tstgt	r1, r2, lsl #6
    5434:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    5438:	70006485 	andvc	r6, r0, r5, lsl #9
    543c:	7100b061 	tstvc	r0, r1, rrx
    5440:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    5444:	91334d7a 	teqls	r3, sl, ror sp
    5448:	7000b110 	andvc	fp, r0, r0, lsl r1
    544c:	b1109132 	tstlt	r0, r2, lsr r1
    5450:	70006972 	andvc	r6, r0, r2, ror r9
    5454:	7100b061 	tstvc	r0, r1, rrx
    5458:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    545c:	91324986 	teqls	r2, r6, lsl #19
    5460:	7000b110 	andvc	fp, r0, r0, lsl r1
    5464:	b1109133 	tstlt	r0, r3, lsr r1
    5468:	7000697e 	andvc	r6, r0, lr, ror r9
    546c:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    5470:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    5474:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    5478:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    547c:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    5480:	10541405 	subsne	r1, r4, r5, lsl #8
    5484:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    5488:	c0e67000 	rscgt	r7, r6, r0
    548c:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    5490:	10671416 	rsbne	r1, r7, r6, lsl r4
    5494:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    5498:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    549c:	73067000 	movwvc	r7, #24576	; 0x6000
    54a0:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    54a4:	b050720e 	subslt	r7, r0, lr, lsl #4
    54a8:	80817100 	addhi	r7, r1, r0, lsl #2
    54ac:	a050b060 	subsge	fp, r0, r0, rrx
    54b0:	22418092 	subcs	r8, r1, #146	; 0x92
    54b4:	808045c3 	addhi	r4, r0, r3, asr #11
    54b8:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    54bc:	11011630 	tstne	r1, r0, lsr r6
    54c0:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    54c4:	61d761d6 	ldrsbvs	r6, [r7, #22]
    54c8:	61d961d8 	ldrsbvs	r6, [r9, #24]
    54cc:	61db61da 	ldrsbvs	r6, [fp, #26]
    54d0:	61de61dc 	ldrsbvs	r6, [lr, #28]
    54d4:	61e261e0 	mvnvs	r6, r0, ror #3
    54d8:	633661e4 	teqvs	r6, #228, 2	; 0x39
    54dc:	80916339 	addshi	r6, r1, r9, lsr r3
    54e0:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    54e4:	80823121 	addhi	r3, r2, r1, lsr #2
    54e8:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    54ec:	11011632 	tstne	r1, r2, lsr r6
    54f0:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    54f4:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    54f8:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    54fc:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    5500:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5504:	61e661e6 	mvnvs	r6, r6, ror #3
    5508:	61e661e6 	mvnvs	r6, r6, ror #3
    550c:	61e661e6 	mvnvs	r6, r6, ror #3
    5510:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    5514:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    5518:	61e6652a 	mvnvs	r6, sl, lsr #10
    551c:	61e66556 	mvnvs	r6, r6, asr r5
    5520:	61e66746 	mvnvs	r6, r6, asr #14
    5524:	90b01210 	adcsls	r1, r0, r0, lsl r2
    5528:	7306720e 	movwvc	r7, #25102	; 0x620e
    552c:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    5530:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    5534:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    5538:	c003c1d4 	ldrdgt	ip, [r3], -r4
    553c:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    5540:	91507840 	cmpls	r0, r0, asr #16
    5544:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    5548:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    554c:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    5550:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    5554:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    5558:	91907830 	orrsls	r7, r0, r0, lsr r8
    555c:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    5560:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    5564:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    5568:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    556c:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    5570:	a054a0e2 	subsge	sl, r4, r2, ror #1
    5574:	225080f0 	subscs	r8, r0, #240	; 0xf0
    5578:	80404615 	subhi	r4, r0, r5, lsl r6
    557c:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    5580:	a040620d 	subge	r6, r0, sp, lsl #4
    5584:	318d822d 	orrcc	r8, sp, sp, lsr #4
    5588:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    558c:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    5590:	821a1009 	andshi	r1, sl, #9
    5594:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    5598:	39808210 	stmibcc	r0, {r4, r9, pc}
    559c:	100e0410 	andne	r0, lr, r0, lsl r4
    55a0:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    55a4:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    55a8:	cfe07229 	svcgt	0x00e07229
    55ac:	b013673c 	andslt	r6, r3, ip, lsr r7
    55b0:	66c8b003 	strbvs	fp, [r8], r3
    55b4:	b050b053 	subslt	fp, r0, r3, asr r0
    55b8:	b064b054 	rsblt	fp, r4, r4, asr r0
    55bc:	66a5b013 	ssatvs	fp, #6, r3
    55c0:	22e08210 	rsccs	r8, r0, #16, 4
    55c4:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    55c8:	80417100 	subhi	r7, r1, r0, lsl #2
    55cc:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    55d0:	221080f0 	andscs	r8, r0, #240	; 0xf0
    55d4:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    55d8:	b0644718 	rsblt	r4, r4, r8, lsl r7
    55dc:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    55e0:	66ceb063 	strbvs	fp, [lr], r3, rrx
    55e4:	22e08210 	rsccs	r8, r0, #16, 4
    55e8:	66704638 			; <UNDEFINED> instruction: 0x66704638
    55ec:	b0646238 	rsblt	r6, r4, r8, lsr r2
    55f0:	318f816f 	orrcc	r8, pc, pc, ror #2
    55f4:	dfd03d8f 	svcle	0x00d03d8f
    55f8:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    55fc:	80417100 	subhi	r7, r1, r0, lsl #2
    5600:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5604:	80f0b064 	rscshi	fp, r0, r4, rrx
    5608:	42652250 	rsbmi	r2, r5, #80, 4
    560c:	8211b063 	andshi	fp, r1, #99	; 0x63
    5610:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    5614:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    5618:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    561c:	66704652 			; <UNDEFINED> instruction: 0x66704652
    5620:	81616252 	cmnhi	r1, r2, asr r2
    5624:	31818172 	orrcc	r8, r1, r2, ror r1
    5628:	31823d81 	orrcc	r3, r2, r1, lsl #27
    562c:	efc03d82 	svc	0x00c03d82
    5630:	930292f1 	movwls	r9, #8945	; 0x22f1
    5634:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    5638:	91c081b0 	strhls	r8, [r0, #16]
    563c:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    5640:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    5644:	0bf34e7f 	bleq	ffcd9048 <_estack+0xdfcd4048>
    5648:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    564c:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5650:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    5654:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    5658:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    565c:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    5660:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    5664:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    5668:	1a1ba290 	bne	6ee0b0 <__ccfg+0x6ce108>
    566c:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    5670:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5674:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    5678:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    567c:	4aa21c9b 	bmi	fe88c8f0 <_estack+0xde8878f0>
    5680:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    5684:	821010b2 	andshi	r1, r0, #178	; 0xb2
    5688:	429d22d0 	addsmi	r2, sp, #208, 4
    568c:	221080f0 	andscs	r8, r0, #240	; 0xf0
    5690:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    5694:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    5698:	629410ab 	addsvs	r1, r4, #171	; 0xab
    569c:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    56a0:	82307000 	eorshi	r7, r0, #0
    56a4:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    56a8:	7100b063 	tstvc	r0, r3, rrx
    56ac:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    56b0:	7000b0e0 	andvc	fp, r0, r0, ror #1
    56b4:	91c281b2 	strhls	r8, [r2, #18]
    56b8:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    56bc:	81511812 	cmphi	r1, r2, lsl r8
    56c0:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    56c4:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    56c8:	4abf1c12 	bmi	fefcc718 <_estack+0xdefc7718>
    56cc:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    56d0:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    56d4:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    56d8:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    56dc:	9162c812 	cmnls	r2, r2, lsl r8
    56e0:	b0319172 	eorslt	r9, r1, r2, ror r1
    56e4:	7000b0e1 	andvc	fp, r0, r1, ror #1
    56e8:	c006c008 	andgt	ip, r6, r8
    56ec:	9160c800 	cmnls	r0, r0, lsl #16
    56f0:	70009170 	andvc	r9, r0, r0, ror r1
    56f4:	81b08201 	lslshi	r8, r1, #4
    56f8:	81d091c0 	bicshi	r9, r0, r0, asr #3
    56fc:	81511810 	cmphi	r1, r0, lsl r8
    5700:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    5704:	824280e1 	subhi	r8, r2, #225	; 0xe1
    5708:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    570c:	4ae41c20 	bmi	ff90c794 <_estack+0xdf907794>
    5710:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    5714:	b03246e8 	eorslt	r4, r2, r8, ror #13
    5718:	dfa01005 	svcle	0x00a01005
    571c:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    5720:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    5724:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    5728:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    572c:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    5730:	42f61e01 	rscsmi	r1, r6, #1, 28
    5734:	c0101618 	andsgt	r1, r0, r8, lsl r6
    5738:	1c083010 	stcne	0, cr3, [r8], {16}
    573c:	10604704 	rsbne	r4, r0, r4, lsl #14
    5740:	10063c10 	andne	r3, r6, r0, lsl ip
    5744:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    5748:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    574c:	81719166 	cmnhi	r1, r6, ror #2
    5750:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5754:	4b011c16 	blmi	4c7b4 <__ccfg+0x2c80c>
    5758:	b0319176 	eorslt	r9, r1, r6, ror r1
    575c:	c008c006 	andgt	ip, r8, r6
    5760:	81617000 	cmnhi	r1, r0
    5764:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5768:	39808240 	stmibcc	r0, {r6, r9, pc}
    576c:	1cf11801 	ldclne	8, cr1, [r1], #4
    5770:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    5774:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    5778:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    577c:	ef90b033 	svc	0x0090b033
    5780:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    5784:	7000673c 	andvc	r6, r0, ip, lsr r7
    5788:	b063a003 	rsblt	sl, r3, r3
    578c:	b0efb064 	rsclt	fp, pc, r4, rrx
    5790:	71006556 	tstvc	r0, r6, asr r5
    5794:	22008040 	andcs	r8, r0, #64	; 0x40
    5798:	b064472b 	rsblt	r4, r4, fp, lsr #14
    579c:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    57a0:	80407100 	subhi	r7, r0, r0, lsl #2
    57a4:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    57a8:	b003b064 	andlt	fp, r3, r4, rrx
    57ac:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    57b0:	31828162 	orrcc	r8, r2, r2, ror #2
    57b4:	ef803d82 	svc	0x00803d82
    57b8:	930292f1 	movwls	r9, #8945	; 0x22f1
    57bc:	a003673c 	andge	r6, r3, ip, lsr r7
    57c0:	61e66556 	mvnvs	r6, r6, asr r5
    57c4:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    57c8:	b05061e6 	subslt	r6, r0, r6, ror #3
    57cc:	61e67100 	mvnvs	r7, r0, lsl #2
    57d0:	82d092e0 	sbcshi	r9, r0, #224, 4
    57d4:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    57d8:	7000b2c0 	andvc	fp, r0, r0, asr #5
    57dc:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    57e0:	b0304359 	eorslt	r4, r0, r9, asr r3
    57e4:	3162c102 	cmncc	r2, r2, lsl #2
    57e8:	80a0c001 	adchi	ip, r0, r1
    57ec:	43521e00 	cmpmi	r2, #0, 28
    57f0:	435322f0 	cmpmi	r3, #240, 4
    57f4:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    57f8:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    57fc:	1a101020 	bne	409884 <__ccfg+0x3e98dc>
    5800:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    5804:	16121611 			; <UNDEFINED> instruction: 0x16121611
    5808:	70006b54 	andvc	r6, r0, r4, asr fp

0000580c <patchImageGenfsk>:
    580c:	210004ad 	smlatbcs	r0, sp, r4, r0
    5810:	21000449 	tstcs	r0, r9, asr #8
    5814:	2100047d 	tstcs	r0, sp, ror r4
    5818:	21000481 	smlabbcs	r0, r1, r4, r0
    581c:	21000511 	tstcs	r0, r1, lsl r5
    5820:	21000591 			; <UNDEFINED> instruction: 0x21000591
    5824:	21000641 	tstcs	r0, r1, asr #12
    5828:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    582c:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    5830:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    5834:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    5838:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    583c:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    5840:	d00b079b 	mulle	fp, fp, r7
    5844:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    5848:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    584c:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    5850:	240f490e 	strcs	r4, [pc], #-2318	; 5858 <patchImageGenfsk+0x4c>
    5854:	43200224 			; <UNDEFINED> instruction: 0x43200224
    5858:	82c83160 	sbchi	r3, r8, #96, 2
    585c:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    5860:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    5864:	2100026b 	tstcs	r0, fp, ror #4
    5868:	00004ce5 	andeq	r4, r0, r5, ror #25
    586c:	e0014809 	and	r4, r1, r9, lsl #16
    5870:	0c004808 	stceq	8, cr4, [r0], {8}
    5874:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    5878:	2aff7822 	bcs	fffe3908 <_estack+0xdffde908>
    587c:	7acad101 	bvc	ff2b9c88 <_estack+0xdf2b4c88>
    5880:	31607022 	cmncc	r0, r2, lsr #32
    5884:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    5888:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    588c:	40086200 	andmi	r6, r8, r0, lsl #4
    5890:	210006a4 	smlatbcs	r0, r4, r6, r0
    5894:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    5898:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    589c:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    58a0:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    58a4:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    58a8:	4a11d006 	bmi	4798c8 <__ccfg+0x459920>
    58ac:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    58b0:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    58b4:	e000480f 	and	r4, r0, pc, lsl #16
    58b8:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    58bc:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    58c0:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    58c4:	dcf92c00 	ldclle	12, cr2, [r9]
    58c8:	200140e3 	andcs	r4, r1, r3, ror #1
    58cc:	18180340 	ldmdane	r8, {r6, r8, r9}
    58d0:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    58d4:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    58d8:	31802300 	orrcc	r2, r0, r0, lsl #6
    58dc:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    58e0:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    58e4:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    58e8:	316c4b04 	cmncc	ip, r4, lsl #22
    58ec:	0000e7f6 	strdeq	lr, [r0], -r6
    58f0:	00005c83 	andeq	r5, r0, r3, lsl #25
    58f4:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    58f8:	230d8300 	movwcs	r8, #54016	; 0xd300
    58fc:	21000674 	tstcs	r0, r4, ror r6
    5900:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    5904:	6b714605 	blvs	1c57120 <__ccfg+0x1c37178>
    5908:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    590c:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    5910:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    5914:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5918:	7b00d00f 	blvc	3995c <__ccfg+0x199b4>
    591c:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    5920:	4f152001 	svcmi	0x00152001
    5924:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5928:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    592c:	09c18800 	stmibeq	r1, {fp, pc}^
    5930:	d00407c9 	andle	r0, r4, r9, asr #15
    5934:	7ac0e016 	bvc	ff03d994 <_estack+0xdf038994>
    5938:	7b40e7f0 	blvc	103f900 <__ccfg+0x101f958>
    593c:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    5940:	61cc6374 	bicvs	r6, ip, r4, ror r3
    5944:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5948:	2001d00c 	andcs	sp, r1, ip
    594c:	6b310380 	blvs	c46754 <__ccfg+0xc267ac>
    5950:	d0012d00 	andle	r2, r1, r0, lsl #26
    5954:	e0004301 	and	r4, r0, r1, lsl #6
    5958:	46084381 	strmi	r4, [r8], -r1, lsl #7
    595c:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    5960:	63483940 	movtvs	r3, #35136	; 0x8940
    5964:	47b82000 	ldrmi	r2, [r8, r0]!
    5968:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    596c:	21000280 	smlabbcs	r0, r0, r2, r0
    5970:	21000088 	smlabbcs	r0, r8, r0, r0
    5974:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    5978:	00003f7b 	andeq	r3, r0, fp, ror pc
    597c:	40044040 	andmi	r4, r4, r0, asr #32
    5980:	4a22b510 	bmi	8b2dc8 <__ccfg+0x892e20>
    5984:	61512100 	cmpvs	r1, r0, lsl #2
    5988:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    598c:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    5990:	4b204921 	blmi	817e1c <__ccfg+0x7f7e74>
    5994:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    5998:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    599c:	e0004313 	and	r4, r0, r3, lsl r3
    59a0:	634b4393 	movtvs	r4, #45971	; 0xb393
    59a4:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    59a8:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    59ac:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    59b0:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    59b4:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    59b8:	09c08800 	stmibeq	r0, {fp, pc}^
    59bc:	d12207c0 	smlawtle	r2, r0, r7, r0
    59c0:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    59c4:	d11e2800 	tstle	lr, r0, lsl #16
    59c8:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    59cc:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    59d0:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    59d4:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    59d8:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    59dc:	2008d213 	andcs	sp, r8, r3, lsl r2
    59e0:	6a686160 	bvs	1a1df68 <__ccfg+0x19fdfc0>
    59e4:	01400940 	cmpeq	r0, r0, asr #18
    59e8:	4a0e6020 	bmi	39da70 <__ccfg+0x37dac8>
    59ec:	62d12100 	sbcsvs	r2, r1, #0, 2
    59f0:	21024a0d 	tstcs	r2, sp, lsl #20
    59f4:	21016011 	tstcs	r1, r1, lsl r0
    59f8:	60204308 	eorvs	r4, r0, r8, lsl #6
    59fc:	43082103 	movwmi	r2, #33027	; 0x8103
    5a00:	60206268 	eorvs	r6, r0, r8, ror #4
    5a04:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5a08:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5a0c:	40044000 	andmi	r4, r4, r0
    5a10:	21000018 	tstcs	r0, r8, lsl r0
    5a14:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5a18:	21000280 	smlabbcs	r0, r0, r2, r0
    5a1c:	000068cf 	andeq	r6, r0, pc, asr #17
    5a20:	21000068 	tstcs	r0, r8, rrx
    5a24:	40041100 	andmi	r1, r4, r0, lsl #2
    5a28:	e000e280 	and	lr, r0, r0, lsl #5
    5a2c:	00003bc3 	andeq	r3, r0, r3, asr #23
    5a30:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5a34:	2004d000 	andcs	sp, r4, r0
    5a38:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5a3c:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    5a40:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5a44:	2080e000 	addcs	lr, r0, r0
    5a48:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5a4c:	00004770 	andeq	r4, r0, r0, ror r7
    5a50:	2100026b 	tstcs	r0, fp, ror #4
    5a54:	40046058 	andmi	r6, r4, r8, asr r0
    5a58:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5a5c:	bd019001 	stclt	0, cr9, [r1, #-4]
    5a60:	00006fa5 	andeq	r6, r0, r5, lsr #31
    5a64:	00000000 	andeq	r0, r0, r0
    5a68:	00030001 	andeq	r0, r3, r1
    5a6c:	001f000a 	andseq	r0, pc, sl
    5a70:	00eb0059 	rsceq	r0, fp, r9, asr r0
    5a74:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    5a78:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    5a7c:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    5a80:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    5a84:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    5a88:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    5a8c:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    5a90:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    5a94:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00005a98 <ratable>:
    5a98:	12c5000b 	sbcne	r0, r5, #11
    5a9c:	2de00007 	stclcs	0, cr0, [r0, #28]!
    5aa0:	8000000f 	andhi	r0, r0, pc
    5aa4:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    5aa8:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    5aac:	6374206c 	cmnvs	r4, #108	; 0x6c
    5ab0:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    5ab4:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5ab8:	00006c6c 	andeq	r6, r0, ip, ror #24

00005abc <plug_null>:
    5abc:	00003091 	muleq	r0, r1, r0
    5ac0:	00003039 	andeq	r3, r0, r9, lsr r0
    5ac4:	0000305d 	andeq	r3, r0, sp, asr r0
    5ac8:	00003081 	andeq	r3, r0, r1, lsl #1
    5acc:	00003089 	andeq	r3, r0, r9, lsl #1
    5ad0:	0000308d 	andeq	r3, r0, sp, lsl #1
    5ad4:	00000000 	andeq	r0, r0, r0
    5ad8:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <array.6523>:
	...

20000554 <discovery_wait_flag.6583>:
20000554:	00000000 	andeq	r0, r0, r0

20000558 <incoming_packet.6522>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <packet.6501>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <payload.6521>:
20000560:	00000000 	andeq	r0, r0, r0

20000564 <response_flag>:
word response_flag=0;
20000564:	00000000 	andeq	r0, r0, r0

20000568 <response_message_5.6520>:
20000568:	00000000 	andeq	r0, r0, r0

2000056c <user_provided_index.6585>:
	...

2000056d <user_provided_receiver_id.6586>:
	...

2000056e <user_provided_record.6584>:
	...

20000582 <setdel>:
	...

20000584 <urates>:
static word urates [N_UARTS];
20000584:	00000000 	andeq	r0, r0, r0

20000588 <__PCB>:
20000588:	00000000 	andeq	r0, r0, r0

2000058c <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
2000058c:	00000000 	andeq	r0, r0, r0

20000590 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000590:	00000000 	andeq	r0, r0, r0

20000594 <mevent>:
20000594:	00000000 	andeq	r0, r0, r0

20000598 <mnfree>:
20000598:	00000000 	andeq	r0, r0, r0

2000059c <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
2000059c:	00000000 	andeq	r0, r0, r0

200005a0 <descriptors>:
	...

200005c0 <oqueues>:
	...

200005cc <physical>:
	...

200005d8 <physinfo>:
	...

200005e4 <plugins>:
	...

200005f0 <dopen>:
	...

200005f1 <dstat>:
	...

200005f2 <bckf_timer>:
	...

200005f4 <channel>:
200005f4:	00000000 	andeq	r0, r0, r0

200005f8 <drvprcs>:
static aword drvprcs, qevent;
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <dstate>:
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <paylen>:
static	int paylen = 0;			// Current TX payload length
20000600:	00000000 	andeq	r0, r0, r0

20000604 <physid>:
static word	physid,
20000604:	00000000 	andeq	r0, r0, r0

20000608 <qevent>:
static aword drvprcs, qevent;
20000608:	00000000 	andeq	r0, r0, r0

2000060c <rbuffl>:
2000060c:	00000000 	andeq	r0, r0, r0

20000610 <rfTrim>:
	...

20000620 <rxstat>:
	...

2000062c <statid>:
	...

2000062e <txtries>:
	...

20000630 <ndsc_null>:
20000630:	00000000 	andeq	r0, r0, r0

20000634 <len.5699>:
20000634:	00000000 	andeq	r0, r0, r0

20000638 <ptr.5698>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <__inpline>:
char *__inpline = NULL;
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <len.5700>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <ptr.5699>:
20000644:	00000000 	andeq	r0, r0, r0

20000648 <oscHfGlobals>:
	...

2000065c <powerQualGlobals>:
	...

20000664 <response_checker>:
	...

2000066c <reason>:
	...

2000069e <CHOICE>:
	...

200006a0 <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
200006a0:	00000000 	andeq	r0, r0, r0

200006a4 <__pi_uart>:
	...

200006ac <system_event_count>:
200006ac:	00000000 	andeq	r0, r0, r0

200006b0 <entropy>:
200006b0:	00000000 	andeq	r0, r0, r0

200006b4 <__pi_mintk>:
	...

200006b6 <__pi_old>:
	...

200006b8 <__pi_systat>:
	...

200006c0 <__pi_new>:
200006c0:	00000000 	andeq	r0, r0, r0

200006c4 <__pi_utims>:
	...

200006d4 <__pi_curr>:
200006d4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006d8 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001cc0 	andeq	r1, r0, r0, asr #25
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000a3 	andeq	r0, r0, r3, lsr #1
    return node->data_base.item_array[index];
      10:	00083a0c 	andeq	r3, r8, ip, lsl #20
      14:	000dff00 	andeq	pc, sp, r0, lsl #30
      18:	00017000 	andeq	r7, r1, r0
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000042d 	andeq	r0, r0, sp, lsr #8
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000bd8 	ldrdeq	r0, [r0], -r8
      38:	16015e02 	strne	r5, [r1], -r2, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	60060102 	andvs	r0, r6, r2, lsl #2
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a6e05 	andeq	r6, sl, r5, lsl #28
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d5b 	andeq	r0, r0, fp, asr sp
      5c:	00050402 	andeq	r0, r5, r2, lsl #8
			nq++;
      60:	02000008 	andeq	r0, r0, #8
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	0007fb05 	andeq	pc, r7, r5, lsl #22
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000423 	andeq	r0, r0, r3, lsr #8
      78:	000e3e05 	andeq	r3, lr, r5, lsl #28
      7c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	0002f605 	andeq	pc, r2, r5, lsl #12
      88:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	076f0700 	strbeq	r0, [pc, -r0, lsl #14]!
	if (baction == NULL)
      9c:	a7030000 	strge	r0, [r3, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0ab70700 	beq	fedc1cac <_estack+0xdedbccac>
endthread
      a8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a203 	str	sl, [r9], -r3, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	00000390 	muleq	r0, r0, r3
      d0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	0006040b 	andeq	r0, r6, fp, lsl #8
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
      e0:	00000090 	muleq	r0, r0, r0
      e4:	b8050004 	stmdalt	r5, {r2}
      e8:	03000008 	movweq	r0, #8
		packet[0] = 0;
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	040c0000 	streq	r0, [ip], #-0
		*p = message->tpe;p++;
      f4:	000b930d 	andeq	r9, fp, sp, lsl #6
      f8:	00110400 	andseq	r0, r1, r0, lsl #8
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		*p = message->sender_id;p++;
     100:	0008700e 	andeq	r7, r8, lr
		*p = message->receiver_id;p++;
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		switch(message->tpe) {
     108:	00010000 	andeq	r0, r1, r0
     10c:	00084505 	andeq	r4, r8, r5, lsl #10
     110:	17160400 	ldrne	r0, [r6, -r0, lsl #8]
		tcv_endp(packet);
     114:	00000063 	andeq	r0, r0, r3, rrx
     118:	00024a05 	andeq	r4, r2, r5, lsl #20
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
}
     124:	00072d05 	andeq	r2, r7, r5, lsl #26
		finish;
     128:	1b230400 	blne	8c1130 <__ccfg+0x8a1188>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
				*p = message->status;p++;
     130:	0003290f 	andeq	r2, r3, pc, lsl #18
     134:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
				strncpy(p, message->record, sizeof(message->record));
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
				*p = message->padding;p++;
     13c:	0eb90b00 	vmoveq.f64	d0, #144	; 0xc0800000 -4.0
				strncpy(p, message->record, sizeof(message->record));
     140:	36040000 	strcc	r0, [r4], -r0
				strncpy(p, message->record, sizeof(message->record));
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
     148:	5f100000 	svcpl	0x00100000
				strncpy(p, message->record, sizeof(message->record));
     14c:	3704006b 	strcc	r0, [r4, -fp, rrx]
				*p = message->record_index;p++;
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				*p = message->padding;
     154:	650b0400 	strvs	r0, [fp, #-1024]	; 0xfffffc00
				break;
     158:	0400000b 	streq	r0, [r0], #-11
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
     164:	000043e5 	andeq	r4, r0, r5, ror #7
     168:	2c143704 	ldccs	7, cr3, [r4], {4}
		node->nnodes[i] = 0;
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
     170:	0004570b 	andeq	r5, r4, fp, lsl #14
     174:	1b370400 	blne	dc117c <__ccfg+0xda11d4>
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
bool init_node(struct Node* node){
     180:	0b380400 	bleq	e01188 <__ccfg+0xde11e0>
    node->id  = 0;                  // default id value 0
     184:	00000190 	muleq	r0, r0, r1
    node->index = 0;                // default entry count 0
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    node->data_base.item_count = 0; // default no items in array
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
	reset_array(node);
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
    DEBUG_PRINT("Error initializing node...\n");
     194:	0001a000 	andeq	sl, r1, r0
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
};
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	000b800f 	andeq	r8, fp, pc
uint8_t generate_request_num(void){
     1a4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
    return (uint8_t) (rand() % 255);
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
     1ac:	056f0b00 	strbeq	r0, [pc, #-2816]!	; fffff6b4 <_estack+0xdfffa6b4>
     1b0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
}
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
            node->nnodes[i] = 0; // set to null byte
     1b8:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
     1bc:	04000003 	streq	r0, [r0], #-3
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
};
     1c8:	0000035a 	andeq	r0, r0, sl, asr r3
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	2c074004 	stccs	0, cr4, [r7], {4}
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	0006770b 	andeq	r7, r6, fp, lsl #14
     1d8:	07410400 	strbeq	r0, [r1, -r0, lsl #8]
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
        node->data_base.item_count -= 1;
     1e0:	09570b0c 	ldmdbeq	r7, {r2, r3, r8, r9, fp}^
};
     1e4:	42040000 	andmi	r0, r4, #0
fsm receiver(struct Node* node_db) {
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
     1ec:	d10b1000 	mrsle	r1, (UNDEF: 11)
     1f0:	0400000a 	streq	r0, [r0], #-10
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
     1fc:	0000033d 	andeq	r0, r0, sp, lsr r3
     200:	2c074404 	cfstrscs	mvf4, [r7], {4}
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     208:	0005780b 	andeq	r7, r5, fp, lsl #16
     20c:	07450400 	strbeq	r0, [r5, -r0, lsl #8]
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
     214:	08f30b1c 	ldmeq	r3!, {r2, r3, r4, r8, r9, fp}^
     218:	46040000 	strmi	r0, [r4], -r0
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
		payload = (struct ResponseMessage*)(incoming_packet+1);
     220:	12002000 	andne	r2, r0, #0
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	00000032 	andeq	r0, r0, r2, lsr r0
     228:	4f040108 	svcmi	0x00040108
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
     230:	0d220b00 	vstmdbeq	r2!, {d0-d-1}
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	50040000 	andpl	r0, r4, r0
     238:	00026809 	andeq	r6, r2, r9, lsl #16
     23c:	1a0b0000 	bne	2c0244 <__ccfg+0x2a029c>
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	0400000c 	streq	r0, [r0], #-12
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	13800000 	orrne	r0, r0, #0
     24c:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
     250:	0c0a5304 	stceq	3, cr5, [sl], {4}
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	00000001 	andeq	r0, r0, r1
     258:	0eac1301 	cdpeq	3, 10, cr1, cr12, cr1, {0}
		switch (tpe){
     25c:	56040000 	strpl	r0, [r4], -r0
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
     264:	00010400 	andeq	r0, r1, r0, lsl #8
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
     274:	001f0000 	andseq	r0, pc, r0
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	000a1912 	andeq	r1, sl, r2, lsl r9
     27c:	04019000 	streq	r9, [r1], #-0
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
     284:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	0400000e 	streq	r0, [r0], #-14
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	0b000000 	bleq	298 <receiver+0xb0>
     294:	00000587 	andeq	r0, r0, r7, lsl #11
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	2c066404 	cfstrscs	mvf6, [r6], {4}
     29c:	04000000 	streq	r0, [r0], #-0
				if (discovery_request_message->gid == node_db->gid){
     2a0:	0002fe0b 	andeq	pc, r2, fp, lsl #28
     2a4:	09660400 	stmdbeq	r6!, {sl}^
					response_message_0->gid = discovery_request_message->gid;
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	00320b08 	eorseq	r0, r2, r8, lsl #22
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	67040000 	strvs	r0, [r4, -r0]
					response_message_0->sender_id = node_db->id;
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	11008800 	tstne	r0, r0, lsl #16
					call sender(response_message_0, done_case);
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
     2c4:	02d10000 	sbcseq	r0, r1, #0
     2c8:	25090000 	strcs	r0, [r9, #-0]
     2cc:	1f000000 	svcne	0x00000000
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
     2d4:	14000002 	strne	r0, [r0], #-2
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2d8:	0cba0f01 	ldceq	15, cr0, [sl], #4
     2dc:	04080000 	streq	r0, [r8], #-0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
     2e4:	cc0b0000 	stcgt	0, cr0, [fp], {-0}
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	0400000c 	streq	r0, [r0], #-12
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	0b000000 	bleq	2f8 <receiver+0x110>
     2f4:	00001d95 	muleq	r0, r5, sp
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	2c067c04 	stccs	12, cr7, [r6], {4}
     2fc:	04000000 	streq	r0, [r0], #-0
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
     304:	0f000000 	svceq	0x00000000
     308:	0000044f 	andeq	r0, r0, pc, asr #8
     30c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
     310:	0000044a 	andeq	r0, r0, sl, asr #8
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	0112bb04 	tsteq	r2, r4, lsl #22
     31c:	00000003 	andeq	r0, r0, r3
					node_db->index+=1;
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
		tcv_endp(incoming_packet);
     324:	2c07bc04 	stccs	12, cr11, [r7], {4}
     328:	04000000 	streq	r0, [r0], #-0
		proceed receiving;
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
     330:	2c07bd04 	stccs	13, cr11, [r7], {4}
		ser_out(response_1_create, "\r\nData Saved");
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     338:	0001bb0b 	andeq	fp, r1, fp, lsl #22
		proceed receiving;
     33c:	09be0400 	ldmibeq	lr!, {sl}
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	0000004e 	andeq	r0, r0, lr, asr #32
     344:	085c0b0c 	ldmdaeq	ip, {r2, r3, r8, r9, fp}^
		proceed receiving;
     348:	bf040000 	svclt	0x00040000
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     350:	5f100e00 	svcpl	0x00100e00
     354:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
		proceed receiving;
     360:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     364:	2c07c104 	stfcsd	f4, [r7], {4}
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     36c:	0003030b 	andeq	r0, r3, fp, lsl #6
     370:	0ac80400 	beq	ff201378 <_estack+0xdf1fc378>
		proceed receiving;
     374:	000000f2 	strdeq	r0, [r0], -r2
     378:	1d240b1c 	vstmdbne	r4!, {d0-d13}
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     37c:	ca040000 	bgt	100384 <__ccfg+0xe03dc>
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
     384:	eb0b2000 	bl	2c838c <__ccfg+0x2a83e4>
		proceed receiving;
     388:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
     394:	00000ed9 	ldrdeq	r0, [r0], -r9
     398:	1f0dcf04 	svcne	0x000dcf04
		proceed receiving;
     39c:	28000006 	stmdacs	r0, {r1, r2}
     3a0:	001cd90b 	andseq	sp, ip, fp, lsl #18
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a4:	09d00400 	ldmibeq	r0, {sl}^
		proceed receiving;
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x1a0>
}
     3b0:	d3040062 	movwle	r0, #16482	; 0x4062
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	10380000 	eorsne	r0, r8, r0
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	000f100b 	andeq	r1, pc, fp
     3d8:	11d80400 	bicsne	r0, r8, r0, lsl #8
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
     3e0:	0e590b40 	vnmlaeq.f64	d16, d9, d0
     3e4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
     3ec:	5f104300 	svcpl	0x00104300
     3f0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
		strncpy(response_message->record, rec, 20);
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
     3fc:	00000b77 	andeq	r0, r0, r7, ror fp
					call sender(response_message_4, done_case);
     400:	2c07df04 	stccs	15, cr13, [r7], {4}
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
     408:	0004830b 	andeq	r8, r4, fp, lsl #6
     40c:	0ae00400 	beq	ff801414 <_estack+0xdf7fc414>
     410:	00000078 	andeq	r0, r0, r8, ror r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	47430b50 	smlsldmi	r0, r3, r0, fp
     418:	e3040000 	movw	r0, #16384	; 0x4000
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
     420:	9d0b5400 	cfstrsls	mvf5, [fp, #-0]
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     424:	0400000b 	streq	r0, [r0], #-11
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
     430:	00000a21 	andeq	r0, r0, r1, lsr #20
     434:	e60ee904 	str	lr, [lr], -r4, lsl #18
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43c:	000e8c0b 	andeq	r8, lr, fp, lsl #24
     440:	07ea0400 	strbeq	r0, [sl, r0, lsl #8]!
    return node->data_base.item_array[index];
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
     448:	01150064 	tsteq	r5, r4, rrx
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
     450:	00000469 	andeq	r0, r0, r9, ror #8
     454:	00046916 	andeq	r6, r4, r6, lsl r9
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
    return node->data_base.item_array[index];
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	16000005 	strne	r0, [r0], -r5
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
		strncpy(response_message->record, rec, 20);
     46c:	17000004 	strne	r0, [r0, -r4]
     470:	00000469 	andeq	r0, r0, r9, ror #8
     474:	000d5418 	andeq	r5, sp, r8, lsl r4
     478:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
     480:	19000005 	stmdbne	r0, {r0, r2}
     484:	00000907 	andeq	r0, r0, r7, lsl #18
     488:	07026704 	streq	r6, [r2, -r4, lsl #14]
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
     490:	07e51900 	strbeq	r1, [r5, r0, lsl #18]!
     494:	6c040000 	stcvs	0, cr0, [r4], {-0}
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002ee 	andeq	r0, r0, lr, ror #5
     4a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
     4ac:	0eff1908 	vmoveq.f16	s3, #248	; 0xbfc00000 -1.5	; <UNPREDICTABLE>
     4b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4bc:	00000582 	andeq	r0, r0, r2, lsl #11
     4c0:	07026e04 	streq	r6, [r2, -r4, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	04cf1910 	strbeq	r1, [pc], #2320	; 4d0 <receiver+0x2e8>
     4cc:	6f040000 	svcvs	0x00040000
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     4d8:	00000e6c 	andeq	r0, r0, ip, ror #28
     4dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	42911930 	addsmi	r1, r1, #48, 18	; 0xc0000
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	73040000 	movwvc	r0, #16384	; 0x4000
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	0000078d 	andeq	r0, r0, sp, lsl #15
     4f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     500:	08871938 	stmeq	r7, {r3, r4, r5, r8, fp, ip}
				if(!response_flag){
     504:	77040000 	strvc	r0, [r4, -r0]
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
					response_flag=1;
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
					trigger(&response_flag);
     510:	00000352 	andeq	r0, r0, r2, asr r3
				switch(response_message_5->status){
     514:	13027a04 	movwne	r7, #10756	; 0x2a04
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
     51c:	040d1940 	streq	r1, [sp], #-2368	; 0xfffff6c0
     520:	7b040000 	blvc	100528 <__ccfg+0xe0580>
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
						if (response_checker[0] == response_message_5->request_number){
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     52c:	0000060c 	andeq	r0, r0, ip, lsl #12
     530:	13027c04 	movwne	r7, #11268	; 0x2c04
							switch(response_checker[1]){
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
     538:	08221948 	stmdaeq	r2!, {r3, r6, r8, fp, ip}
     53c:	7d040000 	stcvc	0, cr0, [r4, #-0]
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
						proceed response_2;
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
						break;
     548:	00000b5d 	andeq	r0, r0, sp, asr fp
									proceed response_1_delete;
     54c:	07028004 	streq	r8, [r2, -r4]
									proceed response_1_retrieve;
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
						proceed response_2;
     554:	0c561950 	mrrceq	9, 5, r1, r6, cr0	; <UNPREDICTABLE>
						proceed response_3;
     558:	81040000 	mrshi	r0, (UNDEF: 4)
						proceed response_4;
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
				break;
     564:	00000c70 	andeq	r0, r0, r0, ror ip
}
     568:	0702a404 	streq	sl, [r2, -r4, lsl #8]
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a191a58 	beq	646ed8 <__ccfg+0x626f30>
     574:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
bool delete_all(struct Node *node){
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	0006b11a 	andeq	fp, r6, sl, lsl r1
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	02a90400 	adceq	r0, r9, #0, 8
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	00027812 	andeq	r7, r2, r2, lsl r8
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
            node->data_base.item_array[i].timestamp = 0;
     590:	00000698 	muleq	r0, r8, r6
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	0c02ad04 	stceq	13, cr10, [r2], {4}
    node->data_base.item_count = 0;
     598:	000008ec 	andeq	r0, r0, ip, ror #17
}
     59c:	d81a02dc 	ldmdale	sl, {r2, r3, r4, r6, r7, r9}
        return true;
     5a0:	0400000c 	streq	r0, [r0], #-12
fsm root {
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
     5a8:	e0000006 	and	r0, r0, r6
     5ac:	0aa91a02 	beq	fea46dbc <_estack+0xdea41dbc>
     5b0:	b4040000 	strlt	r0, [r4], #-0
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
     5b8:	02ec0000 	rsceq	r0, ip, #0
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
     5c0:	02000005 	andeq	r0, r0, #5
     5c4:	0c670801 	stcleq	8, cr0, [r7], #-4
     5c8:	c3170000 	tstgt	r7, #0
     5cc:	11000005 	tstne	r0, r5
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
		init_node(node_db);
     600:	00840115 	addeq	r0, r4, r5, lsl r1
		phys_cc1350(0, MAX_PKT_LEN);
     604:	061f0000 	ldreq	r0, [pc], -r0
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
		tcv_plug (0, &plug_null);
     60c:	16000004 	strne	r0, [r0], -r4
     610:	000000f2 	strdeq	r0, [r0], -r2
		sfd = tcv_open (WNONE, 0, 0);
     614:	00008416 	andeq	r8, r0, r6, lsl r4
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
     620:	00060004 	andeq	r0, r6, r4
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
			diag("Cannot open tcv interface");
     628:	3a000000 	bcc	630 <root+0x8c>
     62c:	16000006 	strne	r0, [r0], -r6
			halt();
     630:	00000469 	andeq	r0, r0, r9, ror #8
		tcv_control(sfd, PHYSOPT_ON, NULL);
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     638:	04110000 	ldreq	r0, [r1], #-0
		runfsm receiver(node_db);
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
     640:	00004708 	andeq	r4, r0, r8, lsl #14
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	00065000 	andeq	r5, r6, r0
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
     64c:	00020000 	andeq	r0, r2, r0
     650:	00004708 	andeq	r4, r0, r8, lsl #14
     654:	00066000 	andeq	r6, r6, r0
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	00000000 	andeq	r0, r0, r0
     660:	00047004 	andeq	r7, r4, r4
     664:	01240400 			; <UNDEFINED> instruction: 0x01240400
		switch(CHOICE) {
     668:	00030718 	andeq	r0, r3, r8, lsl r7
     66c:	0cd21b00 	vldmiaeq	r2, {d17-d16}
     670:	040c0000 	streq	r0, [ip], #-0
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
     680:	11012a04 	tstne	r1, r4, lsl #20
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
     688:	0bd11900 	bleq	ff446a90 <_estack+0xdf441a90>
     68c:	2b040000 	blcs	100694 <__ccfg+0xe06ec>
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
				proceed menu;
     698:	00000775 	andeq	r0, r0, r5, ror r7
     69c:	0b012c04 	bleq	4b6b4 <__ccfg+0x2b70c>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
     6a4:	04110008 	ldreq	r0, [r1], #-8
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
     6b0:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
		DEBUG_PRINT("setting node group ID");
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	08014404 	stmdaeq	r1, {r2, sl, lr}
    node->gid = gid; 
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
		proceed menu;
     6c0:	00164019 	andseq	r4, r6, r9, lsl r0
     6c4:	01450400 	cmpeq	r5, r0, lsl #8
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
     6cc:	34190000 	ldrcc	r0, [r9], #-0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	04000008 	streq	r0, [r0], #-8
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
     6d8:	06000006 	streq	r0, [r0], -r6
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	0014f219 	andseq	pc, r4, r9, lsl r2	; <UNPREDICTABLE>
     6e0:	01470400 	cmpeq	r7, r0, lsl #8
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
			strncpy(reason, "Out of Range", 50);
     6f0:	000006fb 	strdeq	r0, [r0], -fp
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
			proceed invalid_node_id;
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
     6fc:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
				strncpy(reason, "ID is already in use", 50);
     700:	00081007 	andeq	r1, r8, r7
		for(int i = 0; i < node_db->index; i++){
     704:	0e5f1900 	vnmlseq.f16	s3, s30, s0	; <UNPREDICTABLE>
     708:	87040000 	strhi	r0, [r4, -r0]
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
		proceed menu;
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	00000ce0 	andeq	r0, r0, r0, ror #25
     718:	12028804 	andne	r8, r2, #4, 16	; 0x40000
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     720:	043a1904 	ldrteq	r1, [sl], #-2308	; 0xfffff6fc
		proceed get_new_node_id;
     724:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
     728:	08101002 	ldmdaeq	r0, {r1, ip}
		if (!clear_node_neighbour_array(node_db)){
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     730:	00000b46 	andeq	r0, r0, r6, asr #22
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	17028a04 	strne	r8, [r2, -r4, lsl #20]
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
     73c:	07ec1924 	strbeq	r1, [ip, r4, lsr #18]!
			proceed error;
     740:	8b040000 	blhi	100748 <__ccfg+0xe07a0>
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
		request_packet->gid = node_db->gid;
     74c:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
     750:	2c028c04 	stccs	12, cr8, [r2], {4}
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	00000071 	andeq	r0, r0, r1, ror r0
		request_packet->request_number = generate_request_num();
     758:	00761950 	rsbseq	r1, r6, r0, asr r9
     75c:	8d040000 	stchi	0, cr0, [r4, #-0]
		call sender(request_packet, wait_discovery);
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
		request_packet->receiver_id=0;
     768:	0000063c 	andeq	r0, r0, ip, lsr r6
		call sender(request_packet, wait_discovery);
     76c:	16028e04 	strne	r8, [r2], -r4, lsl #28
     770:	000000e6 	andeq	r0, r0, r6, ror #1
     774:	0ced1968 			; <UNDEFINED> instruction: 0x0ced1968
			release;
     778:	8f040000 	svchi	0x00040000
				proceed get_new_node_id;
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
				proceed clear_neighbour_array;
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
				proceed create_proto_start;
     784:	00000068 	andeq	r0, r0, r8, rrx
				proceed start_delete_proto;
     788:	16029004 	strne	r9, [r2], -r4
				proceed retrieve_proto;
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
				proceed display_db;
     790:	0b6d1978 	bleq	1b46d78 <__ccfg+0x1b26dd0>
				proceed del_local;
     794:	91040000 	mrsls	r0, (UNDEF: 4)
			if(node_db->id == node_db->nnodes[i]){
     798:	08201002 	stmdaeq	r0!, {r1, ip}
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     7a0:	00000417 	andeq	r0, r0, r7, lsl r4
				strncpy(reason, "ID is already in use", 50);
     7a4:	10029204 	andne	r9, r2, r4, lsl #4
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
				proceed invalid_node_id;
     7ac:	0c901988 			; <UNDEFINED> instruction: 0x0c901988
     7b0:	93040000 	movwls	r0, #16384	; 0x4000
		for(int i = 0; i < node_db->index; i++){
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
		if (discovery_wait_flag == 0){
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
			discovery_wait_flag=1;
     7bc:	000002a3 	andeq	r0, r0, r3, lsr #5
     7c0:	16029404 	strne	r9, [r2], -r4, lsl #8
			delay(3000, find_proto_start);
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
     7c8:	06a219a4 	strteq	r1, [r2], r4, lsr #19
		if (discovery_wait_flag == 1){
     7cc:	95040000 	strls	r0, [r4, #-0]
			discovery_wait_flag=0;
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
			delay(3000, display_neighbour_nodes);
     7d8:	000005be 			; <UNDEFINED> instruction: 0x000005be
     7dc:	16029604 	strne	r9, [r2], -r4, lsl #12
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
     7e4:	084d19b4 	stmdaeq	sp, {r2, r4, r5, r7, r8, fp, ip}^
     7e8:	97040000 	strls	r0, [r4, -r0]
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     7f4:	0000062b 	andeq	r0, r0, fp, lsr #12
     7f8:	16029804 	strne	r9, [r2], -r4, lsl #16
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
     800:	090519c4 	stmdbeq	r5, {r2, r6, r7, r8, fp, ip}
     804:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
     80c:	00cc0000 	sbceq	r0, ip, r0
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
     814:	00082000 	andeq	r2, r8, r0
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
     81c:	00190000 	andseq	r0, r9, r0
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	00083000 	andeq	r3, r8, r0
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	00070000 	andeq	r0, r7, r0
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
			if (node_db->nnodes[i] == 0) break;
     834:	00084000 	andeq	r4, r8, r0
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	00170000 	andseq	r0, r7, r0
     840:	9e04f01c 	mcrls	0, 0, pc, cr4, cr12, {0}	; <UNPREDICTABLE>
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
     848:	c2190000 	andsgt	r0, r9, #0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	04000003 	streq	r0, [r0], #-3
		ser_out(display_neighbour_nodes, "\r\n");
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
     854:	00000008 	andeq	r0, r0, r8
		proceed menu;
     858:	000f0719 	andeq	r0, pc, r9, lsl r7	; <UNPREDICTABLE>
     85c:	02a20400 	adceq	r0, r2, #0, 8
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	00087718 	andeq	r7, r8, r8, lsl r7
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	00000301 	andeq	r0, r0, r1, lsl #6
     86c:	00000877 	andeq	r0, r0, r7, ror r8
     870:	00002509 	andeq	r2, r0, r9, lsl #10
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     878:	00000025 	andeq	r0, r0, r5, lsr #32
			strncpy(reason, "Error: improper ID", 50);
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
     880:	00002509 	andeq	r2, r0, r9, lsl #10
			proceed error;
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
     888:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
     890:	0d541e00 	ldcleq	14, cr1, [r4, #-0]
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	9a040000 	bls	10089c <__ccfg+0xe08f4>
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	551e0000 	ldrpl	r0, [lr, #-0]
     8a0:	0400000b 	streq	r0, [r0], #-11
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
		create_message->gid = node_db->gid;
     8a8:	00000008 	andeq	r0, r0, r8
		create_message->tpe = 2;
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
		create_message->request_number = generate_request_num();
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	00180000 	andseq	r0, r8, r0
     8bc:	000ebf1f 	andeq	fp, lr, pc, lsl pc
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
		response_checker[0] = create_message->request_number;
     8d0:	00000004 	andeq	r0, r0, r4
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
		call sender(create_message, wait);
     8d8:	04110000 	ldreq	r0, [r1], #-0
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
     8e8:	00000000 	andeq	r0, r0, r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
     8f0:	04110000 	ldreq	r0, [r1], #-0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
     8f8:	00066008 	andeq	r6, r6, r8
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
     904:	00020000 	andeq	r0, r2, r0
			strncpy(reason, "Error: improper node ID", 50);
     908:	000ac521 	andeq	ip, sl, r1, lsr #10
     90c:	03330400 	teqeq	r3, #0, 8
     910:	00046917 	andeq	r6, r4, r7, lsl r9
			proceed error;
     914:	21010100 	mrscs	r0, (UNDEF: 17)
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
     91c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	0000046f 	andeq	r0, r0, pc, ror #8
     924:	11050101 	tstne	r5, r1, lsl #2
     928:	0600002a 	streq	r0, [r0], -sl, lsr #32
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
     930:	07050000 	streq	r0, [r5, -r0]
			strncpy(reason, "Error: invalid index", 50);
     934:	0600002e 	streq	r0, [r0], -lr, lsr #32
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
			proceed error;
     93c:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
     940:	06000029 	streq	r0, [r0], -r9, lsr #32
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
		delete_record->tpe = DELETE_RECORD;
     948:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	07000005 	streq	r0, [r0, -r5]
		delete_record->gid = node_db->gid;
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
		delete_record->tpe = DELETE_RECORD;
     954:	95050000 	strls	r0, [r5, #-0]
		delete_record->request_number = generate_request_num();
     958:	0700000b 	streq	r0, [r0, -fp]
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
		delete_record->sender_id = node_db->id;
     960:	f0050000 			; <UNDEFINED> instruction: 0xf0050000
     964:	08000028 	stmdaeq	r0, {r3, r5}
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
		call sender(&delete_record, wait);
     96c:	62170000 	andsvs	r0, r7, #0
		delete_record->receiver_id = user_provided_receiver_id;
     970:	22000009 	andcs	r0, r0, #9
		delete_record->record_index = user_provided_index;
     974:	00000962 	andeq	r0, r0, r2, ror #18
		response_checker[0] = delete_record->request_number;
     978:	001db705 	andseq	fp, sp, r5, lsl #14
		response_checker[1] = delete_record->tpe;
     97c:	112b0800 			; <UNDEFINED> instruction: 0x112b0800
     980:	00000926 	andeq	r0, r0, r6, lsr #18
		call sender(&delete_record, wait);
     984:	00097822 	andeq	r7, r9, r2, lsr #16
     988:	29420500 	stmdbcs	r2, {r8, sl}^
     98c:	2c080000 	stccs	0, cr0, [r8], {-0}
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
     998:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	08000006 	stmdaeq	r0, {r1, r2}
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
     9a4:	b7050000 	strlt	r0, [r5, -r0]
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	04110000 	ldreq	r0, [r1], #-0
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
			proceed error;
     9b8:	3208080a 	andcc	r0, r8, #655360	; 0xa0000
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c0:	002b2300 	eoreq	r2, fp, r0, lsl #6
     9c4:	34080000 	strcc	r0, [r8], #-0
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
     9d0:	064f2300 	strbeq	r2, [pc], -r0, lsl #6
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	35080000 	strcc	r0, [r8, #-0]
			strncpy(reason, "Error: invalid index", 50);
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
     9e0:	02de2300 	sbcseq	r2, lr, #0, 6
			proceed error;
     9e4:	36080000 	strcc	r0, [r8], -r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		retrieve_record->gid = node_db->gid;
     9f0:	06ba2300 	ldrteq	r2, [sl], r0, lsl #6
     9f4:	37080000 	strcc	r0, [r8, -r0]
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
		retrieve_record->request_number = generate_request_num();
     a00:	0aa22300 	beq	fe889608 <_estack+0xde884608>
     a04:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
		retrieve_record->sender_id = node_db->id;
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
		response_checker[0] = retrieve_record->request_number;
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	065e0b00 	ldrbeq	r0, [lr], -r0, lsl #22
     a14:	3a080000 	bcc	200a1c <__ccfg+0x1e0a74>
		retrieve_record->record_index = user_provided_index;
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
     a1c:	fe0b0100 	cdp2	1, 0, cr0, cr11, cr0, {0}
		response_checker[0] = retrieve_record->request_number;
     a20:	08000008 	stmdaeq	r0, {r3}
		call sender(&retrieve_record, wait);
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
     a2c:	00000f2f 	andeq	r0, r0, pc, lsr #30
     a30:	78033d08 	stmdavc	r3, {r3, r8, sl, fp, ip, sp}
     a34:	03000009 	movweq	r0, #9
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	0009160b 	andeq	r1, r9, fp, lsl #12
     a3c:	083f0800 	ldmdaeq	pc!, {fp}	; <UNPREDICTABLE>
		if(node_db->data_base.item_count != 0){
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
     a44:	14050004 	strne	r0, [r5], #-4
     a48:	08000003 	stmdaeq	r0, {r0, r1}
		ser_out(loop_through_data, "\r\n");
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
     a50:	46220000 	strtmi	r0, [r2], -r0
		proceed menu;
     a54:	2400000a 	strcs	r0, [r0], #-10
		delete_all(node_db);
     a58:	000006c1 	andeq	r0, r0, r1, asr #13
     a5c:	521a4308 	andspl	r4, sl, #8, 6	; 0x20000000
		proceed menu;
     a60:	0100000a 	tsteq	r0, sl
     a64:	01972401 	orrseq	r2, r7, r1, lsl #8
		delay(3000, timeout);
     a68:	45080000 	strmi	r0, [r8, #-0]
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
		when(&response_flag, menu);
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
     a74:	0000031d 	andeq	r0, r0, sp, lsl r3
		release;
     a78:	bd1e4508 	cfldr32lt	mvfx4, [lr, #-32]	; 0xffffffe0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	01000005 	tsteq	r0, r5
     a80:	09080a01 	stmdbeq	r8, {r0, r9, fp}
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
     a88:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
     a8c:	0900000c 	stmdbeq	r0, {r2, r3}
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
     a94:	0b000000 	bleq	a9c <root+0x4f8>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	0000106a 	andeq	r1, r0, sl, rrx
     a9c:	62079109 	andvs	r9, r7, #1073741826	; 0x40000002
     aa0:	04000009 	streq	r0, [r0], #-9
     aa4:	0001bc0b 	andeq	fp, r1, fp, lsl #24
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa8:	10920900 	addsne	r0, r2, r0, lsl #18
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
     ab0:	c1050006 	tstgt	r5, r6
		proceed menu;
     ab4:	0900000c 	stmdbeq	r0, {r2, r3}
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	b2080000 	andlt	r0, r8, #0
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
		proceed menu;
     ac4:	2500000a 	strcs	r0, [r0, #-10]
     ac8:	09402400 	stmdbeq	r0, {sl, sp}^
}
     acc:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
     ad8:	09910a01 	ldmibeq	r1, {r0, r9, fp}
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
     ae0:	00091d23 	andeq	r1, r9, r3, lsr #26
     ae4:	07930a00 	ldreq	r0, [r3, r0, lsl #20]
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
     af0:	0005cf23 	andeq	ip, r5, r3, lsr #30
     af4:	03940a00 	orrseq	r0, r4, #0, 20
     af8:	00000978 	andeq	r0, r0, r8, ror r9
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
     b00:	0aae0500 	beq	feb81f08 <_estack+0xdeb7cf08>
     b04:	960a0000 	strls	r0, [sl], -r0
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     b18:	2500000b 	strcs	r0, [r0, #-11]
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
     b20:	ac240000 	stcge	0, cr0, [r4], #-0
     b24:	0a000003 	beq	b38 <udelay>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
static void devinit_uart (int devnum) {
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
	adddevfunc (ioreq_uart_a, devnum);
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
void udelay (volatile word n) {
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
	while (n) {
     b40:	00061124 	andeq	r1, r6, r4, lsr #2
     b44:	13060b00 	movwne	r0, #27392	; 0x6b00
}
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
	while (n--);
     b4c:	e0240101 	eor	r0, r4, r1, lsl #2
     b50:	09000008 	stmdbeq	r0, {r3}
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
		n--;
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
     b5c:	000c7504 	andeq	r7, ip, r4, lsl #10
     b60:	016e0c00 	cmneq	lr, r0, lsl #24
void mdelay (volatile word n) {
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
     b68:	6f041100 	svcvs	0x00041100
	while (n) {
     b6c:	2000000b 	andcs	r0, r0, fp
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
}
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
		udelay (999);
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
		n--;
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
     b88:	2100000b 	tstcs	r0, fp
     b8c:	000009e9 	andeq	r0, r0, r9, ror #19
void __pi_ondomain (lword d) {
     b90:	13017f0c 	movwne	r7, #7948	; 0x1f0c
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
		if (__pi_systat.effpdm > 1)
     b98:	98210101 	stmdals	r1!, {r0, r8}
     b9c:	0c000003 	stceq	0, cr0, [r0], {3}
			__pi_systat.effpdm = 1;
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
	PRCMPowerDomainOn (d);
     ba4:	01000009 	tsteq	r0, r9
     ba8:	0d040a01 	vstreq	s0, [r4, #-4]
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb0:	c20b0000 	andgt	r0, fp, #0
     bb4:	0d000001 	stceq	0, cr0, [r0, #-4]
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
	__pi_systat.ondmns |= d;
     bbc:	0b000000 	bleq	bc4 <__pi_ondomain+0x34>
     bc0:	00000ca5 	andeq	r0, r0, r5, lsr #25
}
     bc4:	6203100d 	andvs	r1, r3, #13
     bc8:	02000009 	andeq	r0, r0, #9
void __pi_offdomain (lword d) {
     bcc:	0d6e0500 	cfstr64eq	mvdx0, [lr, #-0]
     bd0:	110d0000 	mrsne	r0, (UNDEF: 13)
	PRCMPowerDomainOff (d);
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	0d200a00 	vstmdbeq	r0!, {s0-s-1}
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
     be0:	b30b0000 	movwlt	r0, #45056	; 0xb000
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	0d000004 	stceq	0, cr0, [r0, #-16]
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	0b000000 	bleq	bf4 <__pi_offdomain+0x28>
     bf0:	0000090e 	andeq	r0, r0, lr, lsl #18
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf4:	8008180d 	andhi	r1, r8, sp, lsl #16
     bf8:	0400000c 	streq	r0, [r0], #-12
	__pi_systat.ondmns &= ~d;
     bfc:	000bc90b 	andeq	ip, fp, fp, lsl #18
     c00:	08190d00 	ldmdaeq	r9, {r8, sl, fp}
}
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     c08:	0c9d0b08 	vldmiaeq	sp, {d0-d3}
void __pi_syserror (word ec, const char *m) {
     c0c:	1a0d0000 	bne	340c14 <__ccfg+0x320c6c>
	diag ("SYSERR: %x, %s", ec, m);
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
     c14:	650b0c00 	strvs	r0, [fp, #-3072]	; 0xfffff400
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
     c24:	00000a66 	andeq	r0, r0, r6, ror #20
		all_leds_blink;
     c28:	e7081c0d 	str	r1, [r8, -sp, lsl #24]
     c2c:	1400000c 	strne	r0, [r0], #-12
     c30:	0001a50b 	andeq	sl, r1, fp, lsl #10
     c34:	081d0d00 	ldmdaeq	sp, {r8, sl, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
     c3c:	030b0b18 	movweq	r0, #47896	; 0xbb18
     c40:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
	while (1) {
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c5c:	16000000 	strne	r0, [r0], -r0
void tci_run_delay_timer () {
     c60:	00000956 	andeq	r0, r0, r6, asr r9
	setdel = __pi_mintk - __pi_old;
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
     c68:	1500000c 	strne	r0, [r0, #-12]
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c70:	000c8000 	andeq	r8, ip, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	01150000 	tsteq	r5, r0
	sti_tim;
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
}
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c9c:	16000000 	strne	r0, [r0], -r0
	cli_aux;
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	04110000 	ldreq	r0, [r1], #-0
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
     cb4:	04110000 	ldreq	r0, [r1], #-0
	sti_aux;
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
}
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
     cc4:	a6160000 	ldrge	r0, [r6], -r0
void AONRTCIntHandler () {
     cc8:	16000009 	strne	r0, [r0], -r9
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	1500000c 	strne	r0, [r0, #-12]
		if (__pi_utims [0] == 0)
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
		if (*(__pi_utims [0])) {
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
			(*(__pi_utims [0]))--;
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
		if (__pi_utims [1] == 0)
     cec:	0d2a0500 	cfstr32eq	mvfx0, [sl, #-0]
		if (*(__pi_utims [1])) {
     cf0:	1f0d0000 	svcne	0x000d0000
			aux_timer_inactive = 0;
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
			(*(__pi_utims [1]))--;
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
		if (__pi_utims [2] == 0)
     cfc:	70210000 	eorvc	r0, r1, r0
		if (*(__pi_utims [2])) {
     d00:	0c000003 	stceq	0, cr0, [r0], {3}
			(*(__pi_utims [2]))--;
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
		if (__pi_utims [3] != 0) {
     d08:	01000009 	tsteq	r0, r9
			if (*(__pi_utims [3])) {
     d0c:	0c081c01 	stceq	12, cr1, [r8], {1}
				aux_timer_inactive = 0;
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
				(*(__pi_utims [3]))--;
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
	if (__pi_systat.ledsts) {
     d18:	00003c91 	muleq	r0, r1, ip
     d1c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
		if (__pi_systat.ledblc++ == 0) {
     d20:	00000962 	andeq	r0, r0, r2, ror #18
     d24:	0fc21900 	svceq	0x00c21900
			if (__pi_systat.ledblk) {
     d28:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
     d30:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	000a0c04 	andeq	r0, sl, r4, lsl #24
     d38:	03090c00 	movweq	r0, #39936	; 0x9c00
				if (__pi_systat.ledsts & 0x2)
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
     d40:	00201b00 	eoreq	r1, r0, r0, lsl #22
     d44:	0c300000 	ldceq	0, cr0, [r0], #-0
				if (__pi_systat.ledsts & 0x4)
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
				__pi_systat.ledblk = 0;
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d50:	00001f19 	andeq	r1, r0, r9, lsl pc
			if (__pi_systat.fstblk)
     d54:	0703140c 	streq	r1, [r3, -ip, lsl #8]
     d58:	00000962 	andeq	r0, r0, r2, ror #18
				__pi_systat.ledblc = 200;
     d5c:	0bea1900 	bleq	ffa87164 <_estack+0xdfa82164>
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	150c0000 	strne	r0, [ip, #-0]
		cli_tim;
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
		__pi_new += setdel;
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     d6c:	00004c7e 	andeq	r4, r0, lr, ror ip
		setdel = 0;
     d70:	0a03160c 	beq	c65a8 <__ccfg+0xa6600>
		RISE_N_SHINE;
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
		__pi_new += setdel;
     d78:	47441904 	strbmi	r1, [r4, -r4, lsl #18]
		RISE_N_SHINE;
     d7c:	170c0000 	strne	r0, [ip, -r0]
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
		aux_timer_inactive = 1;
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     d88:	0000000f 	andeq	r0, r0, pc
				if (__pi_systat.ledsts & 0x1)
     d8c:	0f03180c 	svceq	0x0003180c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
     d94:	0960190c 	stmdbeq	r0!, {r2, r3, r8, fp, ip}^
				if (__pi_systat.ledsts & 0x2)
     d98:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
     da0:	002c0000 	eoreq	r0, ip, r0
				if (__pi_systat.ledsts & 0x8)
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
				__pi_systat.ledblk = 1;
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
		if (aux_timer_inactive) {
     db0:	00030000 	andeq	r0, r3, r0
			cli_aux;
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
     db8:	df040000 	svcle	0x00040000
     dbc:	0c00000b 	stceq	0, cr0, [r0], {11}
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
     dc4:	2100000d 	tstcs	r0, sp
     dc8:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
     dcc:	14031e0c 	strne	r1, [r3], #-3596	; 0xfffff1f4
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
word tci_update_delay_ticks (Boolean force) {
     ddc:	00071224 	andeq	r1, r7, r4, lsr #4
	cli_tim;
     de0:	0d1d0e00 	ldceq	14, cr0, [sp, #-0]
     de4:	00000962 	andeq	r0, r0, r2, ror #18
	if (setdel) {
     de8:	e5240101 	str	r0, [r4, #-257]!	; 0xfffffeff
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
     df8:	000c6c24 	andeq	r6, ip, r4, lsr #24
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfc:	201e0e00 	andscs	r0, lr, r0, lsl #28
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	00000973 	andeq	r0, r0, r3, ror r9
	return NO;
     e04:	8a240101 	bhi	901210 <__ccfg+0x8e1268>
			setdel = 0;
     e08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
}
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
		sti_tim;
     e18:	180c0f00 	stmdane	ip, {r8, r9, sl, fp}
		return YES;
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
     e20:	1f260101 	svcne	0x00260101
     e24:	01000006 	tsteq	r0, r6
     e28:	00000047 	andeq	r0, r0, r7, asr #32
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	58061910 	stmdapl	r6, {r4, r8, fp, ip}
	UARTDisable (UART0_BASE);
     e30:	2700000e 	strcs	r0, [r0, -lr]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	UARTDisable (UART0_BASE);
     e38:	09c62700 	stmibeq	r6, {r8, r9, sl, sp}^
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	27010000 	strcs	r0, [r1, -r0]
     e40:	00000f16 	andeq	r0, r0, r6, lsl pc
     e44:	0b382702 	bleq	e0aa54 <__ccfg+0xdeaaac>
     e48:	27030000 	strcs	r0, [r3, -r0]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	00000986 	andeq	r0, r0, r6, lsl #19
     e50:	09d02704 	ldmibeq	r0, {r2, r8, r9, sl, sp}^
     e54:	00050000 	andeq	r0, r5, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	001f1926 	andseq	r1, pc, r6, lsr #18
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
     e60:	22100000 	andscs	r0, r0, #0
	urates [0] = rate;
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
}
     e68:	03312700 	teqeq	r1, #0, 14
     e6c:	27000000 	strcs	r0, [r0, -r0]
     e70:	00000656 	andeq	r0, r0, r6, asr r6
     e74:	04682701 	strbteq	r2, [r8], #-1793	; 0xfffff8ff
     e78:	27020000 	strcs	r0, [r2, -r0]
     e7c:	000008ab 	andeq	r0, r0, fp, lsr #17
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	0b1b2703 	bleq	6caa94 <__ccfg+0x6aaaec>
     e84:	00040000 	andeq	r0, r4, r0
     e88:	0004990f 	andeq	r9, r4, pc, lsl #18
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	2c101c00 	ldccs	12, cr1, [r0], {-0}
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	0f360b00 	svceq	0x00360b00
     e98:	2d100000 	ldccs	0, cr0, [r0, #-0]
	__pi_uart_setrate (urates [0], __pi_uart);
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
     ea0:	820b0000 	andhi	r0, fp, #0
     ea4:	10000007 	andne	r0, r0, r7
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
     eb0:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     eb4:	63102f10 	tstvs	r0, #16, 30	; 0x40
	switch (operation) {
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
     ec4:	25090000 	strcs	r0, [r9, #-0]
     ec8:	13000000 	movwne	r0, #0
     ecc:	47441200 	strbmi	r1, [r4, -r0, lsl #4]
				*buf++ = uart_a_read;
     ed0:	04640000 	strbteq	r0, [r4], #-0
     ed4:	f7083310 			; <UNDEFINED> instruction: 0xf7083310
			while (len && uart_a_char_available) {
     ed8:	0b00000e 	bleq	f18 <ioreq_uart_a+0x60>
     edc:	00000040 	andeq	r0, r0, r0, asr #32
     ee0:	f7103410 			; <UNDEFINED> instruction: 0xf7103410
			if (len != operation) {
     ee4:	0000000e 	andeq	r0, r0, lr
}
     ee8:	00052813 	andeq	r2, r5, r3, lsl r8
     eec:	0a351000 	beq	d44ef4 <__ccfg+0xd24f4c>
			uart_a_disable_int;
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
			if (uart_a_char_available) {
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
				*buf++ = uart_a_read;
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
			uart_a_disable_int;
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
			if (uart_a_char_available) {
     f04:	12002700 	andne	r2, r0, #0, 14
     f08:	00000463 	andeq	r0, r0, r3, ror #8
				uart_a_enable_int;
     f0c:	3c100484 	cfldrscc	mvf0, [r0], {132}	; 0x84
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
				goto Redo_rx;
     f14:	64691000 	strbtvs	r1, [r9], #-0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	0a3d1000 	beq	f44f20 <__ccfg+0xf24f78>
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
			return -2;
     f20:	69671000 	stmdbvs	r7!, {ip}^
     f24:	3e100064 	cdpcc	0, 1, cr0, cr0, cr4, {3}
				uart_a_write (*buf);
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
     f2c:	c80b0200 	stmdagt	fp, {r9}
			while (len && uart_a_room_in_tx) {
     f30:	1000000c 	andne	r0, r0, ip
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
     f38:	13040000 	movwne	r0, #16384	; 0x4000
			if (len != operation) {
     f3c:	0000029c 	muleq	r0, ip, r2
			uart_a_disable_int;
     f40:	580a4010 	stmdapl	sl, {r4, lr}
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
			if (uart_a_room_in_tx) {
     f48:	04c91304 	strbeq	r1, [r9], #772	; 0x304
     f4c:	41100000 	tstmi	r0, r0
				uart_a_enable_int;
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
				*buf++ = uart_a_read;
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
			if (uart_a_room_in_tx) {
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
				uart_a_write (*buf);
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
     f64:	00180000 	andseq	r0, r8, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	0006fa0f 	andeq	pc, r6, pc, lsl #20
     f6c:	44100600 	ldrmi	r0, [r0], #-1536	; 0xfffffa00
			uart_a_enable_int;
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
     f74:	69671000 	stmdbvs	r7!, {ip}^
     f78:	45100064 	ldrmi	r0, [r0, #-100]	; 0xffffff9c
			return 0;
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
			if (len == UART_CNTRL_SETRATE) {
     f80:	74100000 	ldrvc	r0, [r0], #-0
				if (__pi_uart_setrate (*((word*)buf),
     f84:	10006570 	andne	r6, r0, r0, ror r5
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
				syserror (EREQPAR, "uar");
     f90:	00000d77 	andeq	r0, r0, r7, ror sp
			syserror (ENOOPER, "uai");
     f94:	260a4710 			; <UNDEFINED> instruction: 0x260a4710
			if (len == UART_CNTRL_GETRATE) {
     f98:	03000009 	movweq	r0, #9
				return 1;
     f9c:	0004da0b 	andeq	sp, r4, fp, lsl #20
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     fa0:	0a481000 	beq	1204fa8 <__ccfg+0x11e5000>
			syserror (ENOOPER, "uai");
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
     fa8:	02900b04 	addseq	r0, r0, #4, 22	; 0x1000
     fac:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
     fb4:	0f000500 	svceq	0x00000500
     fb8:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     fbc:	084c1006 	stmdaeq	ip, {r1, r2, ip}^
     fc0:	00001006 	andeq	r1, r0, r6
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	0b4d1000 	bleq	1344fd0 <__ccfg+0x1325028>
void UART0IntHandler () {
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	70741000 	rsbsvc	r1, r4, r0
     fd4:	4e100065 	cdpmi	0, 1, cr0, cr0, cr5, {3}
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
     fdc:	770b0200 	strvc	r0, [fp, -r0, lsl #4]
     fe0:	1000000d 	andne	r0, r0, sp
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
		RISE_N_SHINE;
     fec:	000004da 	ldrdeq	r0, [r0], -sl
     ff0:	260a5010 			; <UNDEFINED> instruction: 0x260a5010
		i_trigger (devevent (UART_A, READ));
     ff4:	04000009 	streq	r0, [r0], #-9
     ff8:	0002900b 	andeq	r9, r2, fp
     ffc:	0a511000 	beq	1445004 <__ccfg+0x142505c>
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
    1004:	a30f0005 	movwge	r0, #61445	; 0xf005
    1008:	1a00000b 	bne	103c <UART0IntHandler+0x74>
    100c:	62085410 	andvs	r5, r8, #16, 8	; 0x10000000
    1010:	10000010 	andne	r0, r0, r0, lsl r0
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
    1018:	320b5510 	andcc	r5, fp, #16, 10	; 0x4000000
    101c:	00000009 	andeq	r0, r0, r9
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	0a561000 	beq	158502c <__ccfg+0x1565084>
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
    102c:	0d770b02 	vldmdbeq	r7!, {d16}
		i_trigger (devevent (UART_A, WRITE));
    1030:	57100000 	ldrpl	r0, [r0, -r0]
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
    1038:	da0b0300 	ble	2c1c40 <__ccfg+0x2a1c98>
		RISE_N_SHINE;
    103c:	10000004 	andne	r0, r0, r4
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
		i_trigger (devevent (UART_A, WRITE));
    1048:	00000290 	muleq	r0, r0, r2
    104c:	260a5910 			; <UNDEFINED> instruction: 0x260a5910
    1050:	05000009 	streq	r0, [r0, #-9]
    1054:	0004990b 	andeq	r9, r4, fp, lsl #18
    1058:	075a1000 	ldrbeq	r1, [sl, -r0]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    1060:	450f0006 	strmi	r0, [pc, #-6]	; 1062 <UART0IntHandler+0x9a>
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1068:	cb085d10 	blgt	2184b0 <__ccfg+0x1f8508>
    106c:	10000010 	andne	r0, r0, r0, lsl r0
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
}
    1074:	320b5e10 	andcc	r5, fp, #16, 28	; 0x100
    1078:	00000009 	andeq	r0, r0, r9
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1080:	0a5f1000 	beq	17c5088 <__ccfg+0x17a50e0>
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
void __buttons_setirq (int val) {
    1088:	0d770b02 	vldmdbeq	r7!, {d16}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	60100000 	andsvs	r0, r0, r0
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	da0b0300 	ble	2c1c9c <__ccfg+0x2a1cf4>
    1098:	10000004 	andne	r0, r0, r4
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
		bn = BUTTON_GPIO (__button_list [i]);
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10a4:	00000290 	muleq	r0, r0, r2
    10a8:	260a6210 			; <UNDEFINED> instruction: 0x260a6210
    10ac:	05000009 	streq	r0, [r0, #-9]
    10b0:	00005b0b 	andeq	r5, r0, fp, lsl #22
    10b4:	0a631000 	beq	18c50bc <__ccfg+0x18a5114>
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
}
    10bc:	082c0b06 	stmdaeq	ip!, {r1, r2, r8, r9, fp}
    10c0:	64100000 	ldrvs	r0, [r0], #-0
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
    10c8:	0f000700 	svceq	0x00000700
void __pinlist_setirq (int val) {
    10cc:	00000edf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	08681008 	stmdaeq	r8!, {r3, ip}^
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	0b691000 	bleq	1a450e4 <__ccfg+0x1a2513c>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
    10e4:	70741000 	rsbsvc	r1, r4, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e8:	6a100065 	bvs	401284 <__ccfg+0x3e12dc>
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    10f0:	770b0200 	strvc	r0, [fp, -r0, lsl #4]
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	1000000d 	andne	r0, r0, sp
}
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
    1100:	000004da 	ldrdeq	r0, [r0], -sl
    1104:	260a6c10 			; <UNDEFINED> instruction: 0x260a6c10
void GPIOIntHandler () {
    1108:	04000009 	streq	r0, [r0], #-9
if (buttons_int) {
    110c:	0002900b 	andeq	r9, r2, fp
    1110:	0a6d1000 	beq	1b45118 <__ccfg+0x1b25170>
	buttons_disable ();
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
    1118:	005b0b05 	subseq	r0, fp, r5, lsl #22
	i_trigger ((aword)&__button_list);
    111c:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
    1124:	2c0b0600 	stccs	6, cr0, [fp], {-0}
    1128:	10000008 	andne	r0, r0, r8
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
    1130:	00070000 	andeq	r0, r7, r0
    1134:	0002ba0f 	andeq	fp, r2, pc, lsl #20
    1138:	76101e00 	ldrvc	r1, [r0], -r0, lsl #28
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
    1140:	69671000 	stmdbvs	r7!, {ip}^
    1144:	77100064 	ldrvc	r0, [r0, -r4, rrx]
	RISE_N_SHINE;
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
    114c:	74100000 	ldrvc	r0, [r0], #-0
    1150:	10006570 	andne	r6, r0, r0, ror r5
if (pin_sensor_int) {
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
	i_trigger ((aword)(&__input_pins));
    115c:	00000d77 	andeq	r0, r0, r7, ror sp
    1160:	260a7910 			; <UNDEFINED> instruction: 0x260a7910
    1164:	03000009 	movweq	r0, #9
    1168:	0004da0b 	andeq	sp, r4, fp, lsl #20
    116c:	0a7a1000 	beq	1e85174 <__ccfg+0x1e651cc>
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
    1174:	02900b04 	addseq	r0, r0, #4, 22	; 0x1000
    1178:	7b100000 	blvc	401180 <__ccfg+0x3e11d8>
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
    1180:	7b0b0500 	blvc	2c2588 <__ccfg+0x2a25e0>
    1184:	10000007 	andne	r0, r0, r7
	__pinsen_disable_and_clear;
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
	RISE_N_SHINE;
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
    1190:	0000082c 	andeq	r0, r0, ip, lsr #16
    1194:	260a7d10 			; <UNDEFINED> instruction: 0x260a7d10
}
    1198:	07000009 	streq	r0, [r0, -r9]
    119c:	0004990b 	andeq	r9, r4, fp, lsl #18
    11a0:	077e1000 	ldrbeq	r1, [lr, -r0]!
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    11a8:	005b0b08 	subseq	r0, fp, r8, lsl #22
void system_init () {
    11ac:	7f100000 	svcvc	0x00100000
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	00000e85 	andeq	r0, r0, r5, lsl #29
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
    11c0:	01000005 	tsteq	r0, r5
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	069e0305 	ldreq	r0, [lr], r5, lsl #6
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	da000005 	ble	11e8 <system_init+0x3c>
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	5c280031 	stcpl	0, cr0, [r8], #-196	; 0xffffff3c
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11dc:	01000004 	tsteq	r0, r4
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e4:	05010000 	streq	r0, [r1, #-0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	00066c03 	andeq	r6, r6, r3, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	20000000 	andcs	r0, r0, r0
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
    1204:	00121000 	andseq	r1, r2, r0
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
		if (port_confs [i] & 0x80)
    120c:	00010000 	andeq	r0, r1, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	0006e928 	andeq	lr, r6, r8, lsr #18
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
		if (port_confs [i] & 0x40)
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	64030501 	strvs	r0, [r3], #-1281	; 0xfffffaff
    1220:	28200006 	stmdacs	r0!, {r1, r2}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	00000862 	andeq	r0, r0, r2, ror #16
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1228:	62060a01 	andvs	r0, r6, #4096	; 0x1000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122c:	01000009 	tsteq	r0, r9
	all_leds_blink;
    1230:	05640305 	strbeq	r0, [r4, #-773]!	; 0xfffffcfb
    1234:	47282000 	strmi	r2, [r8, -r0]!
    1238:	01000004 	tsteq	r0, r4
    123c:	12490e0c 	subne	r0, r9, #12, 28	; 0xc0
    1240:	05010000 	streq	r0, [r1, #-0]
    1244:	0006a003 	andeq	sl, r6, r3
    1248:	07041120 	streq	r1, [r4, -r0, lsr #2]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	2a00000f 	bcs	1290 <system_init+0xe4>
    1250:	0001ad01 	andeq	sl, r1, r1, lsl #26
    1254:	02050100 	andeq	r0, r5, #0, 2
    1258:	05a40106 	streq	r0, [r4, #262]!	; 0x106
    125c:	0b2c0000 	bleq	b01264 <__ccfg+0xae12bc>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	9c010000 	stcls	0, cr0, [r1], {-0}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	000015be 			; <UNDEFINED> instruction: 0x000015be
    1268:	000c362b 	andeq	r3, ip, fp, lsr #12
	IntEnable (INT_AON_RTC_COMB);
    126c:	02050100 	andeq	r0, r5, #0, 2
    1270:	00096211 	andeq	r6, r9, r1, lsl r2
    1274:	00000000 	andeq	r0, r0, r0
	__pi_malloc_init ();
    1278:	0c3e2c00 	ldceq	12, cr2, [lr], #-0
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	13010000 	movwne	r0, #4096	; 0x1000
    1280:	05f41902 	ldrbeq	r1, [r4, #2306]!	; 0x902
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1284:	222c0000 	eorcs	r0, ip, #0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	01000009 	tsteq	r0, r9
    128c:	4210024b 	andsmi	r0, r0, #-1342177276	; 0xb0000004
    1290:	2c000006 	stccs	0, cr0, [r0], {6}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	00000084 	andeq	r0, r0, r4, lsl #1
    1298:	16024e01 	strne	r4, [r2], -r1, lsl #28
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	0000065c 	andeq	r0, r0, ip, asr r6
    12a0:	0008092c 	andeq	r0, r8, ip, lsr #18
    12a4:	02770100 	rsbseq	r0, r7, #0, 2
	urates [0] = UART_RATE / 100;
    12a8:	0006a01c 	andeq	sl, r6, ip, lsl r0
    12ac:	01e22c00 	mvneq	r2, r0, lsl #24
	reinit_uart ();
    12b0:	7b010000 	blvc	412b8 <__ccfg+0x21310>
	EXTRA_INITIALIZERS;
    12b4:	06a81802 	strteq	r1, [r8], r2, lsl #16
    12b8:	782c0000 	stmdavc	ip!, {}	; <UNPREDICTABLE>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	01000003 	tsteq	r0, r3
    12c0:	c81b0289 	ldmdagt	fp, {r0, r3, r7, r9}
    12c4:	2c000006 	stccs	0, cr0, [r0], {6}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	000002ca 	andeq	r0, r0, sl, asr #5
    12cc:	17028c01 	strne	r8, [r2, -r1, lsl #24]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12d4:	0007982c 	andeq	r9, r7, ip, lsr #16
			devinit [i] . init (devinit [i] . param);
    12d8:	02a70100 	adceq	r0, r7, #0, 2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	0007141b 	andeq	r1, r7, fp, lsl r4
    12e0:	04fb2c00 	ldrbteq	r2, [fp], #3072	; 0xc00
    12e4:	b7010000 	strlt	r0, [r1, -r0]
	IntEnable (INT_UART0_COMB);
    12e8:	072a2102 	streq	r2, [sl, -r2, lsl #2]!
    12ec:	6d2c0000 	stcvs	0, cr0, [ip, #-0]
}
    12f0:	01000009 	tsteq	r0, r9
	tci_run_auxiliary_timer ();
    12f4:	441c02bd 	ldrmi	r0, [ip], #-701	; 0xfffffd43
		diag ("");
    12f8:	2c000007 	stccs	0, cr0, [r0], {7}
    12fc:	00000681 	andeq	r0, r0, r1, lsl #13
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1300:	1a02ce01 	bne	b4b0c <__ccfg+0x94b64>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
		diag ("Leftover RAM: %d bytes",
    1308:	000d342c 	andeq	r3, sp, ip, lsr #8
    130c:	02da0100 	sbcseq	r0, sl, #0, 2
    1310:	00082423 	andeq	r2, r8, r3, lsr #8
    1314:	03f22c00 	mvnseq	r2, #0, 24
    1318:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    131c:	085e1e02 	ldmdaeq	lr, {r1, r9, sl, fp, ip}^
    1320:	552c0000 	strpl	r0, [ip, #-0]!
    1324:	01000005 	tsteq	r0, r5
    1328:	661d02f1 			; <UNDEFINED> instruction: 0x661d02f1
    132c:	2c000008 	stccs	0, cr0, [r0], {8}
    1330:	00000dde 	ldrdeq	r0, [r0], -lr
    1334:	2402f901 	strcs	pc, [r2], #-2305	; 0xfffff6ff
    1338:	0000088a 	andeq	r0, r0, sl, lsl #17
    133c:	0007b02c 	andeq	fp, r7, ip, lsr #32
    1340:	02fc0100 	rscseq	r0, ip, #0, 2
    1344:	00089220 	andeq	r9, r8, r0, lsr #4
    1348:	0a782c00 	beq	1e0c350 <__ccfg+0x1dec3a8>
    134c:	00010000 	andeq	r0, r1, r0
    1350:	089c2603 	ldmeq	ip, {r0, r1, r9, sl, sp}
    1354:	c72c0000 	strgt	r0, [ip, -r0]!
    1358:	01000001 	tsteq	r0, r1
    135c:	ec1e031a 	ldc	3, cr0, [lr], {26}
    1360:	2c000008 	stccs	0, cr0, [r0], {8}
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	000001f7 	strdeq	r0, [r0], -r7
    1368:	1d031d01 	stcne	13, cr1, [r3, #-4]
    136c:	000008f4 	strdeq	r0, [r0], -r4
    1370:	00004b2c 	andeq	r4, r0, ip, lsr #22
    1374:	03250100 			; <UNDEFINED> instruction: 0x03250100
    1378:	00091820 	andeq	r1, r9, r0, lsr #16
    137c:	0a492c00 	beq	124c384 <__ccfg+0x122c3dc>
    1380:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
}
    1384:	09202003 	stmdbeq	r0!, {r0, r1, sp}
__attribute__ ((noreturn)) void __pi_release () {
    1388:	862c0000 	strthi	r0, [ip], -r0
    138c:	0100000d 	tsteq	r0, sp
    1390:	42260330 	eormi	r0, r6, #48, 6	; 0xc0000000
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1394:	2c000009 	stccs	0, cr0, [r0], {9}
	check_stack_overflow;
    1398:	000005a1 	andeq	r0, r0, r1, lsr #11
    139c:	20034b01 	andcs	r4, r3, r1, lsl #22
    13a0:	00000992 	muleq	r0, r2, r9
	update_n_wake (MAX_WORD, NO);
    13a4:	0009aa2c 	andeq	sl, r9, ip, lsr #20
    13a8:	034e0100 	movteq	r0, #57600	; 0xe100
    13ac:	00099a1f 	andeq	r9, r9, pc, lsl sl
	for_all_tasks (__pi_curr) {
    13b0:	0af52c00 	beq	ffd4c3b8 <_estack+0xdfd473b8>
    13b4:	56010000 	strpl	r0, [r1], -r0
    13b8:	09be2903 	ldmibeq	lr!, {r0, r1, r8, fp, sp}
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	2a2c0000 	bcs	b013c4 <__ccfg+0xae141c>
	__SLEEP;
    13c0:	0100000a 	tsteq	r0, sl
    13c4:	c6220359 			; <UNDEFINED> instruction: 0xc6220359
    13c8:	2c000009 	stccs	0, cr0, [r0], {9}
    13cc:	000004e4 	andeq	r0, r0, r4, ror #9
	system_event_count ++;
    13d0:	1a036101 	bne	d97dc <__ccfg+0xb9834>
    13d4:	000009e8 	andeq	r0, r0, r8, ror #19
	switch (__pi_systat.effpdm) {
    13d8:	0004a02c 	andeq	sl, r4, ip, lsr #32
    13dc:	03730100 	cmneq	r3, #0, 2
    13e0:	000a3816 	andeq	r3, sl, r6, lsl r8
    13e4:	08912c00 	ldmeq	r1, {sl, fp, sp}
			__WFI ();
    13e8:	76010000 	strvc	r0, [r1], -r0
    13ec:	0a401d03 	beq	1008800 <__ccfg+0xfe8858>
    13f0:	752c0000 	strvc	r0, [ip, #-0]!
	check_stack_overflow;
    13f4:	01000008 	tsteq	r0, r8
    13f8:	5815037f 	ldmdapl	r5, {r0, r1, r2, r3, r4, r5, r6, r8, r9}
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	2c00000a 	stccs	0, cr0, [r0], {10}
    1400:	00000d15 	andeq	r0, r0, r5, lsl sp
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	10038301 	andne	r8, r3, r1, lsl #6
			goto Redo;
    1408:	00000a66 	andeq	r0, r0, r6, ror #20
	for_all_tasks (__pi_curr) {
    140c:	00071d2c 	andeq	r1, r7, ip, lsr #26
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	03880100 	orreq	r0, r8, #0, 2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	000aac13 	andeq	sl, sl, r3, lsl ip
    1418:	0b2a2c00 	bleq	a8c420 <__ccfg+0xa6c478>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141c:	8d010000 	stchi	0, cr0, [r1, #-0]
    1420:	0aba1103 	beq	fee85834 <_estack+0xdee80834>
    1424:	e02d0000 	eor	r0, sp, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    142c:	00000996 	muleq	r0, r6, r9
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	0d020b01 	vstreq	d0, [r2, #-4]
    1434:	0000002c 	andeq	r0, r0, ip, lsr #32
			__WFI ();
    1438:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	8b2e2000 	blhi	b89444 <__ccfg+0xb6949c>
    1440:	01000004 	tsteq	r0, r4
}
    1444:	bd0e020c 	sfmlt	f0, 4, [lr, #-48]	; 0xffffffd0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1448:	0500000e 	streq	r0, [r0, #-14]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144c:	00056e03 	andeq	r6, r5, r3, lsl #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1450:	04bb2e20 	ldrteq	r2, [fp], #3616	; 0xe20
    1454:	0d010000 	stceq	0, cr0, [r1, #-0]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1458:	09261102 	stmdbeq	r6!, {r1, r8, ip}
    145c:	03050000 	movweq	r0, #20480	; 0x5000
    1460:	2000056c 	andcs	r0, r0, ip, ror #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1464:	0002822e 	andeq	r8, r2, lr, lsr #4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1468:	020e0100 	andeq	r0, lr, #0, 2
    146c:	00092611 	andeq	r2, r9, r1, lsl r6
    1470:	6d030500 	cfstr32vs	mvfx0, [r3, #-0]
    1474:	2f200005 	svccs	0x00200005
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	000006a8 	andeq	r0, r0, r8, lsr #13
    147c:	000006c8 	andeq	r0, r0, r8, asr #13
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	000014b9 			; <UNDEFINED> instruction: 0x000014b9
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1484:	000c7d2e 	andeq	r7, ip, lr, lsr #26
    1488:	027c0100 	rsbseq	r0, ip, #0, 2
    148c:	0009320c 	andeq	r3, r9, ip, lsl #4
    1490:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1494:	001b4130 	andseq	r4, fp, r0, lsr r1
			SysCtrlSetRechargeBeforePowerDown
    1498:	0006ba00 	andeq	fp, r6, r0, lsl #20
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    149c:	00010000 	andeq	r0, r1, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14a0:	02810100 	addeq	r0, r1, #0, 2
    14a4:	1b603108 	blne	180d8cc <__ccfg+0x17ed924>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	00290000 	eoreq	r0, r9, r0
    14ac:	54310000 	ldrtpl	r0, [r1], #-0
    14b0:	3d00001b 	stccc	0, cr0, [r0, #-108]	; 0xffffff94
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b4:	00000000 	andeq	r0, r0, r0
    14b8:	01203200 			; <UNDEFINED> instruction: 0x01203200
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	15100000 	ldrne	r0, [r0, #-0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	642e0000 	strtvs	r0, [lr], #-0
    14c4:	01000003 	tsteq	r0, r3
    14c8:	260b028d 	strcs	r0, [fp], -sp, lsl #5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14cc:	02000009 	andeq	r0, r0, #9
			while (!(AONWUCPowerStatusGet () &
    14d0:	40326491 	mlasmi	r2, r1, r4, r6
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	eb000001 	bl	14e0 <__pi_release+0x158>
    14d8:	33000014 	movwcc	r0, #20
    14dc:	9d010069 	stcls	0, cr0, [r1, #-420]	; 0xfffffe5c
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14e0:	002c0b02 	eoreq	r0, ip, r2, lsl #22
    14e4:	00500000 	subseq	r0, r0, r0
    14e8:	34000000 	strcc	r0, [r0], #-0
    14ec:	00001b6d 	andeq	r1, r0, sp, ror #22
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	000006e2 	andeq	r0, r0, r2, ror #13
    14f4:	000006e4 	andeq	r0, r0, r4, ror #13
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    14f8:	08029101 	stmdaeq	r2, {r0, r8, ip, pc}
    14fc:	001b8c31 	andseq	r8, fp, r1, lsr ip
			SysCtrlAdjustRechargeAfterPowerDown ();
    1500:	00006e00 	andeq	r6, r0, r0, lsl #28
			reinit_uart ();
    1504:	1b803100 	blne	fe00d90c <_estack+0xde00890c>
    1508:	00810000 	addeq	r0, r1, r0
    150c:	00000000 	andeq	r0, r0, r0
}
    1510:	00015832 	andeq	r5, r1, r2, lsr r8
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1514:	00152b00 	andseq	r2, r5, r0, lsl #22
    1518:	0eca3500 	cdpeq	5, 12, cr3, cr10, cr0, {0}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	bf010000 	svclt	0x00010000
    1520:	15be1b02 	ldrne	r1, [lr, #2818]!	; 0xb02
    1524:	00940000 	addseq	r0, r4, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	2f000000 	svccs	0x00000000
    152c:	0000082c 	andeq	r0, r0, ip, lsr #16
    1530:	00000850 	andeq	r0, r0, r0, asr r8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1534:	00001548 	andeq	r1, r0, r8, asr #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	01006933 	tsteq	r0, r3, lsr r9
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	2c0c02dd 	sfmcs	f0, 4, [ip], {221}	; 0xdd
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	b2000000 	andlt	r0, r0, #0
    1544:	00000000 	andeq	r0, r0, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1548:	00089c2f 	andeq	r9, r8, pc, lsr #24
    154c:	0008ec00 	andeq	lr, r8, r0, lsl #24
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1550:	00156700 	andseq	r6, r5, r0, lsl #14
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1554:	00003500 	andeq	r3, r0, r0, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1558:	02010000 	andeq	r0, r1, #0
    155c:	15be1b03 	ldrne	r1, [lr, #2819]!	; 0xb03
			PRCMPowerDomainOff (
    1560:	00d00000 	sbcseq	r0, r0, r0
    1564:	2f000000 	svccs	0x00000000
	__SLEEP;
    1568:	00000942 	andeq	r0, r0, r2, asr #18
    156c:	00000992 	muleq	r0, r2, r9
  __ASM volatile ("cpsie i" : : : "memory");
    1570:	00001585 	andeq	r1, r0, r5, lsl #11
	goto Redo;
    1574:	000b852e 	andeq	r8, fp, lr, lsr #10
    1578:	03320100 	teqeq	r2, #0, 2
    157c:	0015be1b 	andseq	fp, r5, fp, lsl lr
    1580:	60910200 	addsvs	r0, r1, r0, lsl #4
    1584:	09e82f00 	stmibeq	r8!, {r8, r9, sl, fp, sp}^
    1588:	0a380000 	beq	e01590 <__ccfg+0xde15e8>
    158c:	15a30000 	strne	r0, [r3, #0]!
    1590:	d92e0000 	stmdble	lr!, {}	; <UNPREDICTABLE>
    1594:	01000009 	tsteq	r0, r9
    1598:	be1b0363 	cdplt	3, 1, cr0, cr11, cr3, {3}
    159c:	02000015 	andeq	r0, r0, #21
    15a0:	36006491 			; <UNDEFINED> instruction: 0x36006491
    15a4:	00000a7a 	andeq	r0, r0, sl, ror sl
    15a8:	00000aac 	andeq	r0, r0, ip, lsr #21
    15ac:	01006933 	tsteq	r0, r3, lsr r9
    15b0:	2c0c0378 	stccs	3, cr0, [ip], {120}	; 0x78
    15b4:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    15b8:	00000000 	andeq	r0, r0, r0
    15bc:	04110000 	ldreq	r0, [r1], #-0
    15c0:	00001134 	andeq	r1, r0, r4, lsr r1
    15c4:	007b0137 	rsbseq	r0, fp, r7, lsr r1
    15c8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    15cc:	01e80106 	mvneq	r0, r6, lsl #2
    15d0:	057c0000 	ldrbeq	r0, [ip, #-0]!
    15d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15d8:	0000184f 	andeq	r1, r0, pc, asr #16
    15dc:	000c3638 	andeq	r3, ip, r8, lsr r6
	cli_tim;
    15e0:	15f00100 	ldrbne	r0, [r0, #256]!	; 0x100
    15e4:	00000962 	andeq	r0, r0, r2, ror #18
    15e8:	00000101 	andeq	r0, r0, r1, lsl #2
	diag ("PicOS halted");
    15ec:	00044739 	andeq	r4, r4, r9, lsr r7
	mdelay (500);
    15f0:	2ef00100 	cdpcs	1, 15, cr0, cr0, cr0, {0}
    15f4:	00001249 	andeq	r1, r0, r9, asr #4
	setpowermode (2);
    15f8:	0000011f 	andeq	r0, r0, pc, lsl r1
	__PCB = NULL;
    15fc:	0006653a 	andeq	r6, r6, sl, lsr r5
	release;
    1600:	13f70100 	mvnsne	r0, #0, 2
    1604:	00000210 	andeq	r0, r0, r0, lsl r2
    1608:	0005d43a 	andeq	sp, r5, sl, lsr r4
    160c:	0efa0100 	cdpeq	1, 15, cr0, cr10, cr0, {0}
int main (void) {
    1610:	0000021e 	andeq	r0, r0, lr, lsl r2
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	000da92c 	andeq	sl, sp, ip, lsr #18
    1618:	01e20100 	mvneq	r0, r0, lsl #2
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	00032415 	andeq	r2, r3, r5, lsl r4
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	0dc42c00 	stcleq	12, cr2, [r4]
	system_init ();
    1624:	e7010000 	str	r0, [r1, -r0]
	tcv_init ();
    1628:	03321d01 	teqeq	r2, #1, 26	; 0x40
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    162c:	332c0000 			; <UNDEFINED> instruction: 0x332c0000
    1630:	01000005 	tsteq	r0, r5
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	401d01ea 	andsmi	r0, sp, sl, ror #3
    1638:	2c000003 	stccs	0, cr0, [r0], {3}
    163c:	000006cd 	andeq	r0, r0, sp, asr #13
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1640:	1f01ed01 	svcne	0x0001ed01
    1644:	0000034e 	andeq	r0, r0, lr, asr #6
	delay (16, 0);
    1648:	0007362c 	andeq	r3, r7, ip, lsr #12
    164c:	01f20100 	mvnseq	r0, r0, lsl #2
    1650:	00036616 	andeq	r6, r3, r6, lsl r6
	__pi_release ();
    1654:	07492c00 	strbeq	r2, [r9, -r0, lsl #24]
    1658:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    165c:	037a1601 	cmneq	sl, #1048576	; 0x100000
    1660:	5c2c0000 	stcpl	0, cr0, [ip], #-0
    1664:	01000007 	tsteq	r0, r7
    1668:	8e1601f8 	mrchi	1, 0, r0, cr6, cr8, {7}
    166c:	2c000003 	stccs	0, cr0, [r0], {3}
static void killev (__pi_pcb_t *pid) {
    1670:	00000b2a 	andeq	r0, r0, sl, lsr #22
	wfun = (aword)(pid->code);
    1674:	1101fd01 	tstne	r1, r1, lsl #26	; <UNPREDICTABLE>
	for_all_tasks (i) {
    1678:	000003a2 	andeq	r0, r0, r2, lsr #7
		for (j = 0; j < nevents (i); j++) {
    167c:	0000602d 	andeq	r6, r0, sp, lsr #32
    1680:	026f3b00 	rsbeq	r3, pc, #0, 22
    1684:	f1010000 	setend	le
			    || i->Events [j] . Event == wfun
    1688:	0015be21 	andseq	fp, r5, r1, lsr #28
		for (j = 0; j < nevents (i); j++) {
    168c:	68030500 	stmdavs	r3, {r8, sl}
			if (i->Events [j] . Event == (aword)pid
    1690:	3b200005 	blcc	8016ac <__ccfg+0x7e1704>
    1694:	0000054d 	andeq	r0, r0, sp, asr #10
    1698:	be21f201 	cdplt	2, 2, cr15, cr1, cr1, {0}
				wakeupev (i, j);
    169c:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    16a0:	00056003 	andeq	r6, r5, r3
	for_all_tasks (i) {
    16a4:	0c263b20 			; <UNDEFINED> instruction: 0x0c263b20
}
    16a8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16ac:	0009a611 	andeq	sl, r9, r1, lsl r6
static void qfree (aword *ch) {
    16b0:	58030500 	stmdapl	r3, {r8, sl}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b4:	3b200005 	blcc	8016d0 <__ccfg+0x7e1728>
	cc = (aword*)(mpools + MA_NP);
    16b8:	00000045 	andeq	r0, r0, r5, asr #32
	m_setnextp (ch, chunk);
    16bc:	bd0ef501 	cfstr32lt	mvfx15, [lr, #-4]
	m_setnextp (cc, ch);
    16c0:	0500000e 	streq	r0, [r0, #-14]
}
    16c4:	00054003 	andeq	r4, r5, r3
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16c8:	00782d20 	rsbseq	r2, r8, r0, lsr #26
    16cc:	743c0000 	ldrtvc	r0, [ip], #-0
    16d0:	01006570 	tsteq	r0, r0, ror r5
			m_setnextp (cc, m_nextp (chunk));
    16d4:	09260bfc 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
			m_size (chunk) += m_hdrlen + m_size (ch);
    16d8:	91030000 	mrsls	r0, (UNDEF: 3)
    16dc:	473d7fb7 			; <UNDEFINED> instruction: 0x473d7fb7
    16e0:	01000003 	tsteq	r0, r3
    16e4:	09260bfd 	stmdbeq	r6!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16e8:	902d0000 	eorls	r0, sp, r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    16f0:	00000211 	andeq	r0, r0, r1, lsl r2
    16f4:	1d011801 	stcne	8, cr1, [r1, #-4]
			m_setnextp (cc, m_nextp (chunk));
    16f8:	000015be 			; <UNDEFINED> instruction: 0x000015be
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	fb3e5101 	blx	f95b0a <__ccfg+0xf75b62>
    1700:	0100000c 	tsteq	r0, ip
    1704:	4f25011a 	svcmi	0x0025011a
    1708:	3e000018 	mcrcc	0, 0, r0, cr0, cr8, {0}
    170c:	00000224 	andeq	r0, r0, r4, lsr #4
    1710:	26013b01 	strcs	r3, [r1], -r1, lsl #22
			if (m_size (chunk) >= m_size (ch))
    1714:	00001855 	andeq	r1, r0, r5, asr r8
    1718:	0002373e 	andeq	r3, r2, lr, lsr r7
    171c:	01520100 	cmpeq	r2, r0, lsl #2
		chunk = m_nextp (chunk))
    1720:	0015be1d 	andseq	fp, r5, sp, lsl lr
    1724:	0a853e00 	beq	fe150f2c <_estack+0xde14bf2c>
    1728:	53010000 	movwpl	r0, #4096	; 0x1000
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	185b2101 	ldmdane	fp, {r0, r8, sp}^
	diag_wait (a);
    1730:	c33e0000 	teqgt	lr, #0
	diag_wchar (c, a);
    1734:	01000008 	tsteq	r0, r8
    1738:	61090154 	tstvs	r9, r4, asr r1
}
    173c:	3e000018 	mcrcc	0, 0, r0, cr0, cr8, {0}
    1740:	0000077b 	andeq	r0, r0, fp, ror r7
	syserror (ESTATE, "state");
    1744:	0d015501 	cfstr32eq	mvfx5, [r1, #-4]
    1748:	00000926 	andeq	r0, r0, r6, lsr #18
    174c:	0003c93e 	andeq	ip, r3, lr, lsr r9
    1750:	01750100 	cmneq	r5, r0, lsl #2
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	0015be1d 	andseq	fp, r5, sp, lsl lr
void utimer_add (address ut) {
    1758:	0d933e00 	ldceq	14, cr3, [r3]
    175c:	76010000 	strvc	r0, [r1], -r0
		if (__pi_utims [i] == NULL)
    1760:	18682101 	stmdane	r8!, {r0, r8, sp}^
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	5c3e0000 	ldcpl	0, cr0, [lr], #-0
    1768:	01000002 	tsteq	r0, r2
		syserror (ERESOURCE, "ut a");
    176c:	be1d0190 	mrclt	1, 0, r0, cr13, cr0, {4}
	__pi_utims [i] = ut;
    1770:	3e000015 	mcrcc	0, 0, r0, cr0, cr5, {0}
}
    1774:	000007cd 	andeq	r0, r0, sp, asr #15
    1778:	23019101 	movwcs	r9, #4353	; 0x1101
    177c:	0000186e 	andeq	r1, r0, lr, ror #16
	*t = v;
    1780:	00092f2e 	andeq	r2, r9, lr, lsr #30
	TCI_RUN_AUXILIARY_TIMER;
    1784:	01920100 	orrseq	r0, r2, r0, lsl #2
void update_n_wake (word min, Boolean force) {
    1788:	000e8813 	andeq	r8, lr, r3, lsl r8
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	b8910300 	ldmlt	r1, {r8, r9}
    1790:	18fe3f7f 	ldmne	lr!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp}^
    1794:	03f40000 	mvnseq	r0, #0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1798:	03f80000 	mvnseq	r0, #0
    179c:	87010000 	strhi	r0, [r1, -r0]
    17a0:	17d71b01 	ldrbne	r1, [r7, r1, lsl #22]
    17a4:	59400000 	stmdbpl	r0, {}^	; <UNPREDICTABLE>
    17a8:	40000019 	andmi	r0, r0, r9, lsl r0
    17ac:	0000194d 	andeq	r1, r0, sp, asr #18
    17b0:	00194140 	andseq	r4, r9, r0, asr #2
    17b4:	19354000 	ldmdbne	r5!, {lr}
    17b8:	29310000 	ldmdbcs	r1!, {}	; <UNPREDICTABLE>
    17bc:	5e000019 	mcrpl	0, 0, r0, cr0, cr9, {0}
    17c0:	40000001 	andmi	r0, r0, r1
    17c4:	0000191d 	andeq	r1, r0, sp, lsl r9
    17c8:	00191131 	andseq	r1, r9, r1, lsr r1
		for_all_tasks (i) {
    17cc:	00017200 	andeq	r7, r1, r0, lsl #4
	__pi_mintk = znew + min;
    17d0:	19654100 	stmdbne	r5!, {r8, lr}^
    17d4:	42000000 	andmi	r0, r0, #0
			if (!twaiting (i))
    17d8:	000018fe 	strdeq	r1, [r0], -lr
    17dc:	000003f8 	strdeq	r0, [r0], -r8
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17e0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    17e4:	1c01a201 	sfmne	f2, 1, [r1], {1}
    17e8:	00001827 	andeq	r1, r0, r7, lsr #16
    17ec:	00195931 	andseq	r5, r9, r1, lsr r9
    17f0:	00018600 	andeq	r8, r1, r0, lsl #12
    17f4:	194d4000 	stmdbne	sp, {lr}^
    17f8:	41400000 	mrsmi	r0, (UNDEF: 64)
    17fc:	31000019 	tstcc	r0, r9, lsl r0
    1800:	00001935 	andeq	r1, r0, r5, lsr r9
    1804:	00000199 	muleq	r0, r9, r1
    1808:	00192940 	andseq	r2, r9, r0, asr #18
    180c:	191d3100 	ldmdbne	sp, {r8, ip, sp}
				wakeuptm (i);
    1810:	01b30000 			; <UNDEFINED> instruction: 0x01b30000
    1814:	11400000 	mrsne	r0, (UNDEF: 64)
		for_all_tasks (i) {
    1818:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
				d = i->Timer - znew;
    181c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1820:	00196541 	andseq	r6, r9, r1, asr #10
    1824:	30000000 	andcc	r0, r0, r0
		if ((word)(__pi_mintk - znew) < min) 
    1828:	000019b7 			; <UNDEFINED> instruction: 0x000019b7
    182c:	00000444 	andeq	r0, r0, r4, asr #8
    1830:	000000c8 	andeq	r0, r0, r8, asr #1
	__pi_old = znew;
    1834:	19019b01 	stmdbne	r1, {r0, r8, r9, fp, ip, pc}
}
    1838:	0019d631 	andseq	sp, r9, r1, lsr r6
	TCI_RUN_DELAY_TIMER;
    183c:	0001cd00 	andeq	ip, r1, r0, lsl #26
}
    1840:	19ca3100 	stmibne	sl, {r8, ip, sp}^
    1844:	01f20000 	mvnseq	r0, r0
    1848:	00000000 	andeq	r0, r0, r0
    184c:	11000000 	mrsne	r0, (UNDEF: 0)
    1850:	000f6804 	andeq	r6, pc, r4, lsl #16
void proceed (word state) {
    1854:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
	prcdstate (__pi_curr, state);
    1858:	1100000f 	tstne	r0, pc
    185c:	00100604 	andseq	r0, r0, r4, lsl #12
	release;
    1860:	02010200 	andeq	r0, r1, #0, 4
    1864:	00000caa 	andeq	r0, r0, sl, lsr #25
void __pi_wait (aword event, word state) {
    1868:	10620411 	rsbne	r0, r2, r1, lsl r4
	sint j = nevents (__pi_curr);
    186c:	04110000 	ldreq	r0, [r1], #-0
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	000010cb 	andeq	r1, r0, fp, asr #1
    1874:	0a9b0137 	beq	fe6c1d58 <_estack+0xde6bcd58>
    1878:	b6010000 	strlt	r0, [r1], -r0
		syserror (ENEVENTS, "sw");
    187c:	00c80106 	sbceq	r0, r8, r6, lsl #2
    1880:	016c0000 	cmneq	ip, r0
	setestate (__pi_curr->Events [j], state, event);
    1884:	9c010000 	stcls	0, cr0, [r1], {-0}
	incwait (__pi_curr);
    1888:	000018fe 	strdeq	r1, [r0], -lr
	setestate (__pi_curr->Events [j], state, event);
    188c:	000c3638 	andeq	r3, ip, r8, lsr r6
}
    1890:	13b60100 			; <UNDEFINED> instruction: 0x13b60100
    1894:	00000962 	andeq	r0, r0, r2, ror #18
    1898:	00000205 	andeq	r0, r0, r5, lsl #4
void __pi_trigger (aword event) {
    189c:	000c1239 	andeq	r1, ip, r9, lsr r2
	for_all_tasks (i) {
    18a0:	37b60100 	ldrcc	r0, [r6, r0, lsl #2]!
		for (j = 0; j < nevents (i); j++) {
    18a4:	000015be 			; <UNDEFINED> instruction: 0x000015be
    18a8:	00000223 	andeq	r0, r0, r3, lsr #4
    18ac:	0009fc3a 	andeq	pc, r9, sl, lsr ip	; <UNPREDICTABLE>
    18b0:	11bb0100 			; <UNDEFINED> instruction: 0x11bb0100
			if (i->Events [j] . Event == event) {
    18b4:	000000da 	ldrdeq	r0, [r0], -sl
    18b8:	000c023a 	andeq	r0, ip, sl, lsr r2
    18bc:	1be80100 	blne	ffa01cc4 <_estack+0xdf9fccc4>
				wakeupev (i, j);
    18c0:	0000011a 	andeq	r0, r0, sl, lsl r1
    18c4:	0000002d 	andeq	r0, r0, sp, lsr #32
	for_all_tasks (i) {
    18c8:	0c2f3b00 			; <UNDEFINED> instruction: 0x0c2f3b00
}
    18cc:	b7010000 	strlt	r0, [r1, -r0]
aword __pi_join (aword pid, word st) {
    18d0:	0009a611 	andeq	sl, r9, r1, lsl r6
	for_all_tasks (i) {
    18d4:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    18d8:	43200005 			; <UNDEFINED> instruction: 0x43200005
	return 0;
    18dc:	000003a0 	andeq	r0, r0, r0, lsr #7
		if ((aword)i == pid) {
    18e0:	2c0db901 			; <UNDEFINED> instruction: 0x2c0db901
			__pi_wait (pid, st);
    18e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
}
    18e8:	0000382d 	andeq	r3, r0, sp, lsr #16
	for_all_tasks (i) {
    18ec:	00704400 	rsbseq	r4, r0, r0, lsl #8
    18f0:	bd0abe01 	stclt	14, cr11, [sl, #-4]
void delay (word d, word state) {
    18f4:	3a000005 	bcc	1910 <delay+0x1c>
	settstate (__pi_curr, state);
    18f8:	00000002 	andeq	r0, r0, r2
    18fc:	01450000 	mrseq	r0, (UNDEF: 69)
    1900:	00000adb 	ldrdeq	r0, [r0], -fp
    1904:	0119a101 	tsteq	r9, r1, lsl #2
	update_n_wake (d, YES);
    1908:	000015be 			; <UNDEFINED> instruction: 0x000015be
    190c:	00197201 	andseq	r7, r9, r1, lsl #4
	__pi_curr->Timer = __pi_old + d;
    1910:	69674600 	stmdbvs	r7!, {r9, sl, lr}^
    1914:	a1010064 	tstge	r1, r4, rrx
	inctimer (__pi_curr);
    1918:	0009323c 	andeq	r3, r9, ip, lsr r2
    191c:	0d774700 	ldcleq	7, cr4, [r7, #-0]
    1920:	a1010000 	mrsge	r0, (UNDEF: 1)
}
    1924:	00092649 	andeq	r2, r9, r9, asr #12
    1928:	04da4700 	ldrbeq	r4, [sl], #1792	; 0x700
	if (fun == NULL)
    192c:	a1010000 	mrsge	r0, (UNDEF: 1)
		return (int) __pi_curr;
    1930:	00092661 	andeq	r2, r9, r1, ror #12
    1934:	02904700 	addseq	r4, r0, #0, 14
	for_all_tasks (i)
    1938:	a1010000 	mrsge	r0, (UNDEF: 1)
}
    193c:	00092674 	andeq	r2, r9, r4, ror r6
		if (i->code == fun)
    1940:	077b4700 	ldrbeq	r4, [fp, -r0, lsl #14]!
	for_all_tasks (i)
    1944:	a1010000 	mrsge	r0, (UNDEF: 1)
    1948:	00092689 	andeq	r2, r9, r9, lsl #13
    194c:	082c4700 	stmdaeq	ip!, {r8, r9, sl, lr}
int __pi_strlen (const char *s) {
    1950:	a1010000 	mrsge	r0, (UNDEF: 1)
	for (i = 0; *(s+i) != '\0'; i++);
    1954:	00092699 	muleq	r9, r9, r6
}
    1958:	65724600 	ldrbvs	r4, [r2, #-1536]!	; 0xfffffa00
	for (i = 0; *(s+i) != '\0'; i++);
    195c:	a1010063 	tstge	r1, r3, rrx
	while ((Boolean)(*d++ = *s++));
    1960:	0005bda7 	andeq	fp, r5, r7, lsr #27
    1964:	0ae43d00 	beq	ff910d6c <_estack+0xdf90bd6c>
    1968:	a2010000 	andge	r0, r1, #0
}
    196c:	0015be1a 	andseq	fp, r5, sl, lsl lr
	while (n-- && (*s != '\0'))
    1970:	01480000 	mrseq	r0, (UNDEF: 72)
    1974:	00000f24 	andeq	r0, r0, r4, lsr #30
	*d = '\0';
    1978:	01058e01 	tsteq	r5, r1, lsl #28
	while (n-- && (*s != '\0'))
    197c:	00001861 	andeq	r1, r0, r1, ror #16
    1980:	0000057c 	andeq	r0, r0, ip, ror r5
		*d++ = *s++;
    1984:	000005a2 	andeq	r0, r0, r2, lsr #11
    1988:	19b79c01 	ldmibne	r7!, {r0, sl, fp, ip, pc}
	while (n--)
    198c:	d9380000 	ldmdble	r8!, {}	; <UNPREDICTABLE>
    1990:	01000051 	qaddeq	r0, r1, r0
		*dest++ = *src++;
    1994:	12491d8e 	subne	r1, r9, #9088	; 0x2380
    1998:	024d0000 	subeq	r0, sp, #0
    199c:	84360000 	ldrthi	r0, [r6], #-0
	while (n--)
    19a0:	96000005 	strls	r0, [r0], -r5
}
    19a4:	44000005 	strmi	r0, [r0], #-5
		*dest++ = c;
    19a8:	94010069 	strls	r0, [r1], #-105	; 0xffffff97
void adddevfunc (devreqfun_t rf, int loc) {
    19ac:	00002c11 	andeq	r2, r0, r1, lsl ip
		syserror (EREQPAR, "addv");
    19b0:	00026b00 	andeq	r6, r2, r0, lsl #22
		syserror (ERESOURCE, "addv");
    19b4:	45000000 	strmi	r0, [r0, #-0]
	if (ioreq [loc] != NULL)
    19b8:	0009d901 	andeq	sp, r9, r1, lsl #18
    19bc:	0f860100 	svceq	0x00860100
		syserror (ERESOURCE, "addv");
    19c0:	000e8801 	andeq	r8, lr, r1, lsl #16
	ioreq [loc] = rf;
    19c4:	19e30100 	stmibne	r3!, {r8}^
}
    19c8:	d9470000 	stmdble	r7, {}^	; <UNPREDICTABLE>
    19cc:	01000051 	qaddeq	r0, r1, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    19d0:	12492c86 	subne	r2, r9, #34304	; 0x8600
    19d4:	c9470000 	stmdbgt	r7, {}^	; <UNPREDICTABLE>
    19d8:	01000004 	tsteq	r0, r4
    19dc:	09263a86 	stmdbeq	r6!, {r1, r2, r7, r9, fp, ip, sp}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    19e0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    19e4:	000b8501 	andeq	r8, fp, r1, lsl #10
    19e8:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
		syserror (ENODEVICE, "io");
    19ec:	00186101 	andseq	r6, r8, r1, lsl #2
    19f0:	0001cc00 	andeq	ip, r1, r0, lsl #24
	if (len == 0)
    19f4:	0001e800 	andeq	lr, r1, r0, lsl #16
	ret = (ioreq [dev]) (operation, buf, len);
    19f8:	209c0100 	addscs	r0, ip, r0, lsl #2
    19fc:	3800001a 	stmdacc	r0, {r1, r3, r4}
	if (ret >= 0)
    1a00:	000051d9 	ldrdeq	r5, [r0], -r9
	if (ret == -1) {
    1a04:	49207201 	stmdbmi	r0!, {r0, r9, ip, sp, lr}
    1a08:	89000012 	stmdbhi	r0, {r1, r4}
		if (retry == WNONE)
    1a0c:	38000002 	stmdacc	r0, {r1}
		iowait (dev, operation, retry);
    1a10:	000004c9 	andeq	r0, r0, r9, asr #9
    1a14:	262e7201 	strtcs	r7, [lr], -r1, lsl #4
    1a18:	9c000009 	stcls	0, cr0, [r0], {9}
			release;
    1a1c:	00000002 	andeq	r0, r0, r2
	if (ret == -2) {
    1a20:	05e90148 	strbeq	r0, [r9, #328]!	; 0x148
		if (retry != WNONE) {
    1a24:	62010000 	andvs	r0, r1, #0
    1a28:	18610105 	stmdane	r1!, {r0, r2, r8}^
			iowait (dev, operation, retry);
    1a2c:	01b60000 			; <UNDEFINED> instruction: 0x01b60000
    1a30:	01cc0000 	biceq	r0, ip, r0
			(ioreq [dev]) (NONE, buf, len);
    1a34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a38:	00001a61 	andeq	r1, r0, r1, ror #20
    1a3c:	0051d938 	subseq	sp, r1, r8, lsr r9
		(ioreq [dev]) (NONE, buf, len);
    1a40:	2d620100 	stfcse	f0, [r2, #-0]
    1a44:	00001249 	andeq	r1, r0, r9, asr #4
    1a48:	000002af 	andeq	r0, r0, pc, lsr #5
}
    1a4c:	0001b636 	andeq	fp, r1, r6, lsr r6
	if (retry != WNONE) {
    1a50:	0001c800 	andeq	ip, r1, r0, lsl #16
		delay (-ret - 2, retry);
    1a54:	00694900 	rsbeq	r4, r9, r0, lsl #18
    1a58:	2c126701 	ldccs	7, cr6, [r2], {1}
    1a5c:	00000000 	andeq	r0, r0, r0
    1a60:	e4014500 	str	r4, [r1], #-1280	; 0xfffffb00
		release;
    1a64:	01000003 	tsteq	r0, r3
    1a68:	61010542 	tstvs	r1, r2, asr #10
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a6c:	01000018 	tsteq	r0, r8, lsl r0
    1a70:	00001ab1 			; <UNDEFINED> instruction: 0x00001ab1
    1a74:	0051d947 	subseq	sp, r1, r7, asr #18
    1a78:	20420100 	subcs	r0, r2, r0, lsl #2
    1a7c:	00001249 	andeq	r1, r0, r9, asr #4
		syserror (ERESOURCE, "mal1");
    1a80:	000ef547 	andeq	pc, lr, r7, asr #10
    1a84:	2c420100 	stfcse	f0, [r2], {-0}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a88:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    1a8c:	000f3647 	andeq	r3, pc, r7, asr #12
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a90:	3f420100 	svccc	0x00420100
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a94:	00000926 	andeq	r0, r0, r6, lsr #18
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a98:	6d756e49 	ldclvs	14, cr6, [r5, #-292]!	; 0xfffffedc
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a9c:	09450100 	stmdbeq	r5, {r8}^
    1aa0:	0000002c 	andeq	r0, r0, ip, lsr #32
}
    1aa4:	0069494a 	rsbeq	r4, r9, sl, asr #18
    1aa8:	2c124d01 	ldccs	13, cr4, [r2], {1}
    1aac:	00000000 	andeq	r0, r0, r0
    1ab0:	8c014b00 			; <UNDEFINED> instruction: 0x8c014b00
    1ab4:	01000005 	tsteq	r0, r5
    1ab8:	2601093d 			; <UNDEFINED> instruction: 0x2601093d
void __pi_free (aword *ch) {
    1abc:	a4000009 	strge	r0, [r0], #-9
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1ac0:	b6000001 	strlt	r0, [r0], -r1
    1ac4:	01000001 	tsteq	r0, r1
		syserror (EMALLOC, "malg");
    1ac8:	9701379c 			; <UNDEFINED> instruction: 0x9701379c
    1acc:	01000000 	mrseq	r0, (UNDEF: 0)
	mcfree [MA_NP] += m_size (ch);
    1ad0:	6c010636 	stcvs	6, cr0, [r1], {54}	; 0x36
		m_size (ch) ^= MALLOC_UMASK;
    1ad4:	80000001 	andhi	r0, r0, r1
    1ad8:	01000001 	tsteq	r0, r1
	mcfree [MA_NP] += m_size (ch);
    1adc:	001b069c 	mulseq	fp, ip, r6
	QFREE;
    1ae0:	51d93800 	bicspl	r3, r9, r0, lsl #16
	if (mevent [MA_NP] . nwait) {
    1ae4:	36010000 	strcc	r0, [r1], -r0
    1ae8:	0012491f 	andseq	r4, r2, pc, lsl r9
		trigger ((aword)(&(mevent [MA_NP])));
    1aec:	0002c200 	andeq	ip, r2, r0, lsl #4
		mevent [MA_NP] . nwait --;
    1af0:	016c3600 	cmneq	ip, r0, lsl #12
}
    1af4:	017e0000 	cmneq	lr, r0
    1af8:	69490000 	stmdbvs	r9, {}^	; <UNPREDICTABLE>
    1afc:	0b370100 	bleq	dc1f04 <__ccfg+0xda1f5c>
    1b00:	0000002c 	andeq	r0, r0, ip, lsr #32
void kill (aword pid) {
    1b04:	01480000 	mrseq	r0, (UNDEF: 72)
		pid = (aword) __pi_curr;
    1b08:	00000e94 	muleq	r0, r4, lr
	j = NULL;
    1b0c:	01052f01 	tsteq	r5, r1, lsl #30
	for_all_tasks (i) {
    1b10:	00001861 	andeq	r1, r0, r1, ror #16
	...
		if ((aword)i == pid) {
    1b1c:	1b419c01 	blne	1068b28 <__ccfg+0x1048b80>
    1b20:	d9380000 	ldmdble	r8!, {}	; <UNPREDICTABLE>
				__PCB = i->Next;
    1b24:	01000051 	qaddeq	r0, r1, r0
			killev (i);
    1b28:	12492a2f 	subne	r2, r9, #192512	; 0x2f000
			ufree (i);
    1b2c:	02d50000 	sbcseq	r0, r5, #0
			if (i == __pi_curr)
    1b30:	924c0000 	subls	r0, ip, #0
    1b34:	01000003 	tsteq	r0, r3
				release;
    1b38:	0926382f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, fp, ip, sp}
				j->Next = i->Next;
    1b3c:	51010000 	mrspl	r0, (UNDEF: 1)
    1b40:	d3014500 	movwle	r4, #5376	; 0x1500
    1b44:	01000008 	tsteq	r0, r8
}
    1b48:	61010529 	tstvs	r1, r9, lsr #10
    1b4c:	01000018 	tsteq	r0, r8, lsl r0
    1b50:	00001b6d 	andeq	r1, r0, sp, ror #22
	if (size < 8)
    1b54:	0051d947 	subseq	sp, r1, r7, asr #18
		_size = 2;
    1b58:	1f290100 	svcne	0x00290100
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b5c:	00001249 	andeq	r1, r0, r9, asr #4
		_size = (((aword)size) + 3) >> 2;
    1b60:	64696746 	strbtvs	r6, [r9], #-1862	; 0xfffff8ba
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b64:	2e290100 	sufcse	f0, f1, f0
		_size = (((aword)size) + 3) >> 2;
    1b68:	00000932 	andeq	r0, r0, r2, lsr r9
		if (mevent [MA_NP] . nfail != 255)
    1b6c:	77014500 	strvc	r4, [r1, -r0, lsl #10]
    1b70:	01000004 	tsteq	r0, r4
			mevent [MA_NP] . nfail ++;
    1b74:	61010524 	tstvs	r1, r4, lsr #10
		mnfree [MA_NP] = 0;
    1b78:	01000018 	tsteq	r0, r8, lsl r0
    1b7c:	00001b98 	muleq	r0, r8, fp
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b80:	0051d947 	subseq	sp, r1, r7, asr #18
    1b84:	1e240100 	sufnes	f0, f4, f0
			syserror (EMALLOC, "malc");
    1b88:	00001249 	andeq	r1, r0, r9, asr #4
    1b8c:	00646946 	rsbeq	r6, r4, r6, asr #18
		if (m_size (chunk) >= _size)
    1b90:	262c2401 	strtcs	r2, [ip], -r1, lsl #8
    1b94:	00000009 	andeq	r0, r0, r9
		chunk = m_nextp (chunk)) {
    1b98:	0cb00148 	ldfeqs	f0, [r0], #288	; 0x120
		m_setnextp (cc, m_nextp (chunk));
    1b9c:	11010000 	mrsne	r0, (UNDEF: 1)
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ba0:	18610105 	stmdane	r1!, {r0, r2, r8}^
    1ba4:	01800000 	orreq	r0, r0, r0
			m_size (chunk) = _size;
    1ba8:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
			cc = chunk + _size + m_hdrlen;
    1bac:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bb0:	00001bc5 	andeq	r1, r0, r5, asr #23
			m_size (cc) = waste - m_hdrlen;
    1bb4:	0051d938 	subseq	sp, r1, r8, lsr r9
			QFREE;
    1bb8:	1c110100 	ldfnes	f0, [r1], {-0}
		mevent [MA_NP] . nfail = 0;
    1bbc:	00001249 	andeq	r1, r0, r9, asr #4
		mcfree [MA_NP] -= m_size (chunk);
    1bc0:	000002e8 	andeq	r0, r0, r8, ror #5
    1bc4:	094a4d00 	stmdbeq	sl, {r8, sl, fp, lr}^
    1bc8:	d3120000 	tstle	r2, #0
    1bcc:	3e010101 	adfccs	f0, f1, f1
		m_size (chunk) |= MALLOC_UMASK;
    1bd0:	03000009 	movweq	r0, #9
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bd4:	001b6d4e 	andseq	r6, fp, lr, asr #26
	...
}
    1be0:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    1be4:	3100001b 	tstcc	r0, fp, lsl r0
    1be8:	00001b80 	andeq	r1, r0, r0, lsl #23
    1bec:	000002fb 	strdeq	r0, [r0], -fp
    1bf0:	001b8c4f 	andseq	r8, fp, pc, asr #24
    1bf4:	00510100 	subseq	r0, r1, r0, lsl #2
    1bf8:	001b414e 	andseq	r4, fp, lr, asr #2
	...
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c04:	1c9c0100 	ldfnes	f0, [ip], {0}
    1c08:	3100001c 	tstcc	r0, ip, lsl r0
		if ((j = __PCB) == NULL)
    1c0c:	00001b54 	andeq	r1, r0, r4, asr fp
	i->Next = NULL;
    1c10:	0000030e 	andeq	r0, r0, lr, lsl #6
	i->data = data;
    1c14:	001b604f 	andseq	r6, fp, pc, asr #32
		if ((j = __PCB) == NULL)
    1c18:	00510100 	subseq	r0, r1, r0, lsl #2
}
    1c1c:	001a614e 	andseq	r6, sl, lr, asr #2
	...
	return (aword) i;
    1c28:	4c9c0100 	ldfmis	f0, [ip], {0}
    1c2c:	3100001c 	tstcc	r0, ip, lsl r0
	if (mevent [MA_NP] . nwait != 255)
    1c30:	00001a74 	andeq	r1, r0, r4, ror sl
    1c34:	00000321 	andeq	r0, r0, r1, lsr #6
    1c38:	001a804f 	andseq	r8, sl, pc, asr #32
		mevent [MA_NP] . nwait ++;
    1c3c:	4f510100 	svcmi	0x00510100
	wait ((aword)(&(mevent [MA_NP])), state);
    1c40:	00001a8c 	andeq	r1, r0, ip, lsl #21
    1c44:	98415201 	stmdals	r1, {r0, r9, ip, lr}^
void diag (const char *mess, ...) {
    1c48:	0000001a 	andeq	r0, r0, sl, lsl r0
    1c4c:	0019b74e 	andseq	fp, r9, lr, asr #14
	...
	diag_disable_int (a, is);
    1c58:	729c0100 	addsvc	r0, ip, #0, 2
    1c5c:	3100001c 	tstcc	r0, ip, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1c60:	000019ca 	andeq	r1, r0, sl, asr #19
	diag_disable_int (a, is);
    1c64:	00000334 	andeq	r0, r0, r4, lsr r3
	while (*mess != '\0') {
    1c68:	0019d631 	andseq	sp, r9, r1, lsr r6
	dgout ('\r');
    1c6c:	00034700 	andeq	r4, r3, r0, lsl #14
	dgout ('\n');
    1c70:	fe500000 	cdp2	0, 5, cr0, cr0, cr0, {0}
    1c74:	00000018 	andeq	r0, r0, r8, lsl r0
    1c78:	00000000 	andeq	r0, r0, r0
	diag_wait (a);
    1c7c:	01000000 	mrseq	r0, (UNDEF: 0)
	diag_enable_int (a, is);
    1c80:	1911319c 	ldmdbne	r1, {r2, r3, r4, r7, r8, ip, sp}
    1c84:	035a0000 	cmpeq	sl, #0
}
    1c88:	1d310000 	ldcne	0, cr0, [r1, #-0]
    1c8c:	6d000019 	stcvs	0, cr0, [r0, #-100]	; 0xffffff9c
    1c90:	31000003 	tstcc	r0, r3
		if (*mess == '%') {
    1c94:	00001929 	andeq	r1, r0, r9, lsr #18
    1c98:	00000380 	andeq	r0, r0, r0, lsl #7
			if (*mess == 'l') {
    1c9c:	00193531 	andseq	r3, r9, r1, lsr r5
    1ca0:	00039300 	andeq	r9, r3, r0, lsl #6
				mess++;
    1ca4:	19414f00 	stmdbne	r1, {r8, r9, sl, fp, lr}^
				val = va_arg (ap, lword);
    1ca8:	91020000 	mrsls	r0, (UNDEF: 2)
				bc = 32;
    1cac:	194d4f00 	stmdbne	sp, {r8, r9, sl, fp, lr}^
				bc = 16;
    1cb0:	91020000 	mrsls	r0, (UNDEF: 2)
			switch (*mess) {
    1cb4:	19594f04 	ldmdbne	r9, {r2, r8, r9, sl, fp, lr}^
    1cb8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cbc:	19654108 	stmdbne	r5!, {r3, r8, lr}^
				dgout ('%');
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	0000148c 	andeq	r1, r0, ip, lsl #9
				dgout (*mess);
    1cc8:	04970003 	ldreq	r0, [r7], #3
    1ccc:	01040000 	mrseq	r0, (UNDEF: 4)
			switch (*mess) {
    1cd0:	000000a3 	andeq	r0, r0, r3, lsr #1
					v = __pi_hex_enc_table [
    1cd4:	0012810c 	andseq	r8, r2, ip, lsl #2
					i += 4;
    1cd8:	000dff00 	andeq	pc, sp, r0, lsl #30
					(val >> (bc - i)) & 0xf];
    1cdc:	00065800 	andeq	r5, r6, r0, lsl #16
    1ce0:	00000000 	andeq	r0, r0, r0
					dgout (v);
    1ce4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1ce8:	06010200 	streq	r0, [r1], -r0, lsl #4
				while (i < bc) {
    1cec:	00000c60 	andeq	r0, r0, r0, ror #24
			mess++;
    1cf0:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
					d /= 10;
    1cf4:	0300000a 	movweq	r0, #10
				if ((val >> (bc - 1)) & 1) {
    1cf8:	00002b96 	muleq	r0, r6, fp
    1cfc:	3f182810 	svccc	0x00182810
					dgout ('-');
    1d00:	02000000 	andeq	r0, r0, #0
    1d04:	08000504 	stmdaeq	r0, {r2, r8, sl}
						val |= 0xffff0000;
    1d08:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1d0c:	0007fb05 	andeq	pc, r7, r5, lsl #22
    1d10:	2a110300 	bcs	442918 <__ccfg+0x422970>
				d = (bc == 16) ? 10000 : 1000000000;
    1d14:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1d18:	00005918 	andeq	r5, r0, r8, lsl r9
    1d1c:	08010200 	stmdaeq	r1, {r9}
					v = (word) (val / d);
    1d20:	00000c5e 	andeq	r0, r0, lr, asr ip
					if (v || d == 1) break;
    1d24:	002e0703 	eoreq	r0, lr, r3, lsl #14
    1d28:	19311000 	ldmdbne	r1!, {ip}
					d /= 10;
    1d2c:	0000006c 	andeq	r0, r0, ip, rrx
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	5b070202 	blpl	1c2540 <__ccfg+0x1a2598>
					dgout (v + '0');
    1d34:	0300000d 	movweq	r0, #13
    1d38:	000029a9 	andeq	r2, r0, r9, lsr #19
    1d3c:	7f193410 	svcvc	0x00193410
					d /= 10;
    1d40:	02000000 	andeq	r0, r0, #0
					val = val - (v * d);
    1d44:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
					if (d == 0) break;
    1d48:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
					v = (word) (val / d);
    1d4c:	00042307 	andeq	r2, r4, r7, lsl #6
    1d50:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
				if (bc == 16)
    1d54:	00746e69 	rsbseq	r6, r4, r9, ror #28
				d = (bc == 16) ? 10000 : 1000000000;
    1d58:	2d070402 	cfstrscs	mvf0, [r7, #-8]
					val &= 0xffff;
    1d5c:	03000004 	movweq	r0, #4
					dgout (*s);
    1d60:	0000131d 	andeq	r1, r0, sp, lsl r3
					s++;
    1d64:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
				while (*s != '\0') {
    1d68:	03000000 	movweq	r0, #0
    1d6c:	000028f0 	strdeq	r2, [r0], -r0
			dgout (*mess++);
    1d70:	60122711 	andsvs	r2, r2, r1, lsl r7
    1d74:	05000000 	streq	r0, [r0, #-0]
    1d78:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d7c:	0000a706 	andeq	sl, r0, r6, lsl #14
    1d80:	13c10300 	bicne	r0, r1, #0, 6
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d84:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
    1d88:	00003312 	andeq	r3, r0, r2, lsl r3
    1d8c:	1db70300 	ldcne	3, cr0, [r7]
    1d90:	2b110000 	blcs	441d98 <__ccfg+0x421df0>
	^ entropy
    1d94:	00004d12 	andeq	r4, r0, r2, lsl sp
}
    1d98:	00c90600 	sbceq	r0, r9, r0, lsl #12
    1d9c:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    1da0:	03000000 	movweq	r0, #0
    1da4:	00002942 	andeq	r2, r0, r2, asr #18
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1da8:	73122c11 	tstvc	r2, #4352	; 0x1100
	word cs = size + hblenb;
    1dac:	05000000 	streq	r0, [r0, #-0]
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1db0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1db4:	00064903 	andeq	r4, r6, r3, lsl #18
	p -> length = size;
    1db8:	122d1100 	eorne	r1, sp, #0, 2
}
    1dbc:	00000073 	andeq	r0, r0, r3, ror r0
	if (p->attributes.b.queued) {
    1dc0:	000bb703 	andeq	fp, fp, r3, lsl #14
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1dc4:	102e1100 	eorne	r1, lr, r0, lsl #2
    1dc8:	00000108 	andeq	r0, r0, r8, lsl #2
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1dcc:	00a70407 	adceq	r0, r7, r7, lsl #8
		p->attributes.b.queued = 0;
    1dd0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    1dd4:	9c093211 	sfmls	f3, 4, [r9], {17}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1dd8:	09000001 	stmdbeq	r0, {r0}
	deq (p);	// Remove from queue
    1ddc:	0000002b 	andeq	r0, r0, fp, lsr #32
}
    1de0:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
	tfree ((address)p);
    1de4:	01000000 	mrseq	r0, (UNDEF: 0)
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1de8:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    1dec:	0000064f 	andeq	r0, r0, pc, asr #12
    1df0:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1df4:	01000000 	mrseq	r0, (UNDEF: 0)
    1df8:	09000601 	stmdbeq	r0, {r0, r9, sl}
	if (q_empty (q))
    1dfc:	000002de 	ldrdeq	r0, [r0], -lr
    1e00:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
		trigger (q);
    1e04:	01000000 	mrseq	r0, (UNDEF: 0)
	if (p->attributes.b.urgent) {
    1e08:	09000501 	stmdbeq	r0, {r0, r8, sl}
		p->u.bqueue.next = q->next;
    1e0c:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
		p->u.bqueue.prev = q;
    1e10:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
		q->next->prev = (qitem_t*) p;
    1e14:	01000000 	mrseq	r0, (UNDEF: 0)
	p->attributes.b.queued = 1;
    1e18:	09000401 	stmdbeq	r0, {r0, sl}
    1e1c:	00000aa2 	andeq	r0, r0, r2, lsr #21
}
    1e20:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
		p->u.bqueue.prev = q->prev;
    1e24:	01000000 	mrseq	r0, (UNDEF: 0)
		q->prev->next = (qitem_t*) p;
    1e28:	0a000004 	beq	1e40 <dispose+0xc>
		q->prev = (qitem_t*) p;
    1e2c:	0000065e 	andeq	r0, r0, lr, asr r6
    1e30:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1e34:	01000000 	mrseq	r0, (UNDEF: 0)
	deq (p);	// Soft dequeue, timer and hook left intact
    1e38:	0008fe0a 	andeq	pc, r8, sl, lsl #28
	switch (dv) {
    1e3c:	033c1100 	teqeq	ip, #0, 2
    1e40:	000000c9 	andeq	r0, r0, r9, asr #1
    1e44:	0f2f0a02 	svceq	0x002f0a02
    1e48:	3d110000 	ldccc	0, cr0, [r1, #-0]
			p->attributes.b.urgent = 1;
    1e4c:	0000c903 	andeq	ip, r0, r3, lsl #18
    1e50:	160a0300 	strne	r0, [sl], -r0, lsl #6
			verify_ses (p, "dispose ses");
    1e54:	11000009 	tstne	r0, r9
    1e58:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    1e5c:	00040000 	andeq	r0, r4, r0
    1e60:	00031403 	andeq	r1, r3, r3, lsl #8
    1e64:	03411100 	movteq	r1, #4352	; 0x1100
			verify_phy (p, "dispose phy");
    1e68:	0000010e 	andeq	r0, r0, lr, lsl #2
    1e6c:	00019c06 	andeq	r9, r1, r6, lsl #24
}
    1e70:	06c10b00 	strbeq	r0, [r1], r0, lsl #22
			enq (oqueues [p->attributes.b.phys], p);
    1e74:	43110000 	tstmi	r1, #0
			p->attributes.b.urgent = 1;
    1e78:	0001a81a 	andeq	sl, r1, sl, lsl r8
    1e7c:	0b010100 	bleq	42284 <__ccfg+0x222dc>
			verify_phy (p, "dispose phy");
    1e80:	00000197 	muleq	r0, r7, r1
    1e84:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
    1e88:	01000001 	tsteq	r0, r1
    1e8c:	cf040701 	svcgt	0x00040701
    1e90:	02000001 	andeq	r0, r0, #1
    1e94:	0c670801 	stcleq	8, cr0, [r7], #-4
			enq (oqueues [p->attributes.b.phys], p);
    1e98:	cf050000 	svcgt	0x00050000
    1e9c:	0b000001 	bleq	1ea8 <dispose+0x74>
}
    1ea0:	0000031d 	andeq	r0, r0, sp, lsl r3
			rlp (p);
    1ea4:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
}
    1ea8:	01000001 	tsteq	r0, r1
    1eac:	12080801 	andne	r0, r8, #65536	; 0x10000
    1eb0:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
    1eb4:	cd0a0000 	stcgt	0, cr0, [sl, #-0]
    1eb8:	1200000c 	andne	r0, r0, #12
    1ebc:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1ec0:	0a000000 	beq	1ec8 <tcv_endp+0x8>
	if (b->attributes.b.outgoing) {
    1ec4:	0000106a 	andeq	r1, r0, sl, rrx
	b = header (p);
    1ec8:	a7089112 	smladge	r8, r2, r1, r9
	if (b->attributes.b.outgoing) {
    1ecc:	04000000 	streq	r0, [r0], #-0
		verify_ses (b, "tcv02");
    1ed0:	0001bc0a 	andeq	fp, r1, sl, lsl #24
    1ed4:	10921200 	addsne	r1, r2, r0, lsl #4
    1ed8:	000000d5 	ldrdeq	r0, [r0], -r5
    1edc:	c1030006 	tstgt	r3, r6
    1ee0:	1200000c 	andne	r0, r0, #12
		verify_plg (b, tcv_out, "tcv03");
    1ee4:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
    1ee8:	1a050000 	bne	141ef0 <__ccfg+0x121f48>
    1eec:	0c000002 	stceq	0, cr0, [r0], {2}
    1ef0:	0000021a 	andeq	r0, r0, sl, lsl r2
    1ef4:	00000236 	andeq	r0, r0, r6, lsr r2
    1ef8:	400b000d 	andmi	r0, fp, sp
    1efc:	12000009 	andne	r0, r0, #9
    1f00:	022b0f99 	eoreq	r0, fp, #612	; 0x264
    1f04:	01010000 	mrseq	r0, (UNDEF: 1)
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f08:	00da0407 	sbcseq	r0, sl, r7, lsl #8
}
    1f0c:	01080000 	mrseq	r0, (UNDEF: 8)
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f10:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
		rlp (b);
    1f14:	09000002 	stmdbeq	r0, {r1}
}
    1f18:	0000091d 	andeq	r0, r0, sp, lsl r9
		rlp (b);
    1f1c:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
    1f20:	01000000 	mrseq	r0, (UNDEF: 0)
    1f24:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    1f28:	000005cf 	andeq	r0, r0, pc, asr #11
    1f2c:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f30:	01000000 	mrseq	r0, (UNDEF: 0)
    1f34:	00000001 	andeq	r0, r0, r1
    1f38:	000aae03 	andeq	sl, sl, r3, lsl #28
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f3c:	03961300 	orrseq	r1, r6, #0, 6
	va_start (ap, plid);
    1f40:	0000024a 	andeq	r0, r0, sl, asr #4
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f44:	00027405 	andeq	r7, r2, r5, lsl #8
    1f48:	02800c00 	addeq	r0, r0, #0, 24
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1f4c:	02900000 	addseq	r0, r0, #0
    1f50:	000d0000 	andeq	r0, sp, r0
    1f54:	00028505 	andeq	r8, r2, r5, lsl #10
    1f58:	03ac0b00 			; <UNDEFINED> instruction: 0x03ac0b00
			syserror (ENODEVICE, "tcv04");
    1f5c:	9c130000 	ldcls	0, cr0, [r3], {-0}
		syserror (EMALLOC, "tcv05");
    1f60:	00029017 	andeq	r9, r2, r7, lsl r0
	attp.b.outgoing = 1;
    1f64:	0c010100 	stfeqs	f0, [r1], {-0}
    1f68:	000000b3 	strheq	r0, [r0], -r3
    1f6c:	000002ae 	andeq	r0, r0, lr, lsr #5
    1f70:	a305000d 	movwge	r0, #20493	; 0x500d
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f74:	0b000002 	bleq	1f84 <tcv_open+0x54>
		if (descriptors [fd] == NULL)
    1f78:	00000611 	andeq	r0, r0, r1, lsl r6
    1f7c:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f80:	01000002 	tsteq	r0, r2
		return ERROR;
    1f84:	08e00b01 	stmiaeq	r0!, {r0, r8, r9, fp}^
}
    1f88:	c3120000 	tstgt	r2, #0
    1f8c:	0000df0e 	andeq	sp, r0, lr, lsl #30
    1f90:	0e010100 	adfeqs	f0, f1, f0
	s->attpattern.b.session = fd;
    1f94:	00000c75 	andeq	r0, r0, r5, ror ip
    1f98:	10016e15 	andne	r6, r1, r5, lsl lr
	descriptors [fd] = s;
    1f9c:	000002dc 	ldrdeq	r0, [r0], -ip
	q_init (&(s->rqueue));
    1fa0:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1fa4:	010f0000 	mrseq	r0, CPSR
    1fa8:	000002ee 	andeq	r0, r0, lr, ror #5
    1fac:	0000a710 	andeq	sl, r0, r0, lsl r7
    1fb0:	d60c0000 	strle	r0, [ip], -r0
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1fb4:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
    1fb8:	0d000002 	stceq	0, cr0, [r0, #-8]
    1fbc:	02ee0500 	rsceq	r0, lr, #0, 10
	descriptors [fd] = s;
    1fc0:	e9110000 	ldmdb	r1, {}	; <UNPREDICTABLE>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1fc4:	15000009 	strne	r0, [r0, #-9]
    1fc8:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
	if (s == NULL)
    1fcc:	01000002 	tsteq	r0, r2
		syserror (EMALLOC, "tcv05");
    1fd0:	03981101 	orrseq	r1, r8, #1073741824	; 0x40000000
    1fd4:	82150000 	andshi	r0, r5, #0
    1fd8:	00eb1401 	rsceq	r1, fp, r1, lsl #8
    1fdc:	01010000 	mrseq	r0, (UNDEF: 1)
    1fe0:	00037011 	andeq	r7, r3, r1, lsl r0
    1fe4:	02d81500 	sbcseq	r1, r8, #0, 10
    1fe8:	0000df0e 	andeq	sp, r0, lr, lsl #30
    1fec:	12010100 	andne	r0, r1, #0, 2
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ff0:	03031508 	movweq	r1, #13576	; 0x3508
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ff4:	00035209 	andeq	r5, r3, r9, lsl #4
    1ff8:	3c911300 	ldccc	3, cr1, [r1], {0}
    1ffc:	07150000 	ldreq	r0, [r5, -r0]
	plugins [ord] = pl;
    2000:	00a70703 	adceq	r0, r7, r3, lsl #14
	return 0;
    2004:	13000000 	movwne	r0, #0
		return ERROR;
    2008:	00000fc2 	andeq	r0, r0, r2, asr #31
}
    200c:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
    2010:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	verify_fds (fd, "tcv10");
    2014:	0c0e0004 	stceq	0, cr0, [lr], {4}
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2018:	1500000a 	strne	r0, [r0, #-10]
	verify_fds (fd, "tcv10");
    201c:	2b030309 	blcs	c2c48 <__ccfg+0xa2ca0>
    2020:	14000003 	strne	r0, [r0], #-3
    2024:	00000020 	andeq	r0, r0, r0, lsr #32
	verify_plg (b, tcv_frm, "tcv11");
    2028:	030b1530 	movweq	r1, #46384	; 0xb530
	b = q_first (rq);
    202c:	0003c208 	andeq	ip, r3, r8, lsl #4
	if (q_end (b, rq)) {
    2030:	1f191300 	svcne	0x00191300
		if (state != WNONE) {
    2034:	14150000 	ldrne	r0, [r5], #-0
    2038:	00a70803 	adceq	r0, r7, r3, lsl #16
			when (rq, state);
    203c:	13000000 	movwne	r0, #0
			release;
    2040:	00000bea 	andeq	r0, r0, sl, ror #23
	deq (b);	// Dequeue the packet ...
    2044:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
    2048:	000000a7 	andeq	r0, r0, r7, lsr #1
	p = ((address)(b + 1));
    204c:	4c7e1302 	ldclmi	3, cr1, [lr], #-8
	verify_plg (b, tcv_frm, "tcv11");
    2050:	16150000 	ldrne	r0, [r5], -r0
    2054:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
    2058:	13040000 	movwne	r0, #16384	; 0x4000
    205c:	00004744 	andeq	r4, r0, r4, asr #14
    2060:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
    2064:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2068:	000f1308 	andeq	r1, pc, r8, lsl #6
    206c:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2070:	03c20f03 	biceq	r0, r2, #3, 30
    2074:	130c0000 	movwne	r0, #49152	; 0xc000
	b->u.pointers.tail =
    2078:	00000960 	andeq	r0, r0, r0, ror #18
}
    207c:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
		return NULL;
    2080:	000003d2 	ldrdeq	r0, [r0], -r2
    2084:	520c002c 	andpl	r0, ip, #44	; 0x2c
    2088:	d2000003 	andle	r0, r0, #3
    208c:	15000003 	strne	r0, [r0, #-3]
    2090:	00000094 	muleq	r0, r4, r0
	verify_fds (fd, "tcv16");
    2094:	04070003 	streq	r0, [r7], #-3
								Boolean urg) {
    2098:	0000035f 	andeq	r0, r0, pc, asr r3
    209c:	000bdf0e 	andeq	sp, fp, lr, lsl #30
	verify_fds (fd, "tcv16");
    20a0:	031c1500 	tsteq	ip, #0, 10
    20a4:	00035f1b 	andeq	r5, r3, fp, lsl pc
    20a8:	0bbf1100 	bleq	fefc64b0 <_estack+0xdefc14b0>
	verify_pld (s, tcv_frm, "tcv17");
    20ac:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
    20b0:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
    20b4:	01010000 	mrseq	r0, (UNDEF: 1)
    20b8:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
    20bc:	120b0000 	andne	r0, fp, #0
    20c0:	16000007 	strne	r0, [r0], -r7
    20c4:	00a7131d 	adceq	r1, r7, sp, lsl r3
    20c8:	01010000 	mrseq	r0, (UNDEF: 1)
	ptrs.head = (word) fd;
    20cc:	0002e50b 	andeq	lr, r2, fp, lsl #10
	ptrs.tail = (word) urg;
    20d0:	1a1e1600 	bne	7878d8 <__ccfg+0x767930>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20d4:	000000b8 	strheq	r0, [r0], -r8
    20d8:	6c0b0101 	stfvss	f0, [fp], {1}
		if (state != WNONE) {
    20dc:	1600000c 	strne	r0, [r0], -ip
    20e0:	00b8241e 	adcseq	r2, r8, lr, lsl r4
}
    20e4:	01010000 	mrseq	r0, (UNDEF: 1)
			when (eid, state);
    20e8:	000c8a0b 	andeq	r8, ip, fp, lsl #20
    20ec:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
			release;
    20f0:	000003f4 	strdeq	r0, [r0], -r4
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    20f4:	a6030101 	strge	r0, [r3], -r1, lsl #2
    20f8:	1600000f 	strne	r0, [r0], -pc
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20fc:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
    2100:	04070000 	streq	r0, [r7], #-0
    2104:	00000444 	andeq	r0, r0, r4, asr #8
    2108:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
    210c:	8d100000 	ldchi	0, cr0, [r0, #-0]
    2110:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    2114:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
    2118:	00047409 	andeq	r7, r4, r9, lsl #8
			tmwait (state);
    211c:	150c0a00 	strne	r0, [ip, #-2560]	; 0xfffff600
    2120:	4a160000 	bmi	582128 <__ccfg+0x562180>
	b->attributes = s->attpattern;
    2124:	0004320f 	andeq	r3, r4, pc, lsl #4
		b->attributes.b.urgent = 1;
    2128:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
    212c:	16000011 			; <UNDEFINED> instruction: 0x16000011
	b->u.pointers.head = ptrs.head;
    2130:	008d074b 	addeq	r0, sp, fp, asr #14
	b->u.pointers.tail = length;
    2134:	00040000 	andeq	r0, r4, r0
	return (address) (b + 1);
    2138:	00102c03 	andseq	r2, r0, r3, lsl #24
    213c:	034c1600 	movteq	r1, #50688	; 0xc600
    2140:	00000450 	andeq	r0, r0, r0, asr r4
    2144:	00047405 	andeq	r7, r4, r5, lsl #8
    2148:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
    214c:	04950000 	ldreq	r0, [r5], #0
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2150:	94150000 	ldrls	r0, [r5], #-0
	if (len >= b->u.pointers.tail)
    2154:	03000000 	movweq	r0, #0
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2158:	13b60b00 			; <UNDEFINED> instruction: 0x13b60b00
    215c:	0d010000 	stceq	0, cr0, [r1, #-0]
	if (len > 0) {
    2160:	00048512 	andeq	r8, r4, r2, lsl r5
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2164:	0c010100 	stfeqs	f0, [r1], {-0}
    2168:	00000480 	andeq	r0, r0, r0, lsl #9
    216c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
		b->u.pointers.tail -= len;
    2170:	00009415 	andeq	r9, r0, r5, lsl r4
    2174:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    2178:	000004a3 	andeq	r0, r0, r3, lsr #9
		b->u.pointers.head += len;
    217c:	0013d216 	andseq	sp, r3, r6, lsl r2
    2180:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
    2184:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
}
    2188:	0000eb0c 	andeq	lr, r0, ip, lsl #22
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    218c:	0004d400 	andeq	sp, r4, r0, lsl #8
    2190:	00941500 	addseq	r1, r4, r0, lsl #10
    2194:	00100000 	andseq	r0, r0, r0
	verify_fph (phy, "tcv23");
    2198:	0004c405 	andeq	ip, r4, r5, lsl #8
    219c:	118f1700 	orrne	r1, pc, r0, lsl #14
    21a0:	ec010000 	stc	0, cr0, [r1], {-0}
    21a4:	0004d40d 	andeq	sp, r4, sp, lsl #8
}
    21a8:	03050100 	movweq	r0, #20736	; 0x5100
	return (physical [phy]) (opt, arg);
    21ac:	00004fc0 	andeq	r4, r0, r0, asr #31
    21b0:	00100b18 	andseq	r0, r0, r8, lsl fp
    21b4:	010c0100 	mrseq	r0, (UNDEF: 28)
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    21b8:	0000a70d 	andeq	sl, r0, sp, lsl #14
	if (opt < 0) {
    21bc:	82030500 	andhi	r0, r3, #0, 10
		if (fd < 0)
    21c0:	19200005 	stmdbne	r0!, {r0, r2}
		if (opt == PHYSOPT_PLUGINFO) {
    21c4:	00000236 	andeq	r0, r0, r6, lsr r2
			if (fd >= TCV_MAX_PLUGS)
    21c8:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
			if ((p = plugins [fd]) == NULL)
    21cc:	06a40305 	strteq	r0, [r4], r5, lsl #6
    21d0:	a70c2000 	strge	r2, [ip, -r0]
}
    21d4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
		if (fd >= TCV_MAX_PHYS)
    21d8:	15000005 	strne	r0, [r0, #-5]
		return physinfo [fd];
    21dc:	00000094 	muleq	r0, r4, r0
    21e0:	8c180000 	ldchi	0, cr0, [r8], {-0}
	verify_fds (fd, "tcv22");
    21e4:	0100000f 	tsteq	r0, pc
    21e8:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
    21ec:	05000005 	streq	r0, [r0, #-5]
    21f0:	00058403 	andeq	r8, r5, r3, lsl #8
    21f4:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
}
    21f8:	8c010000 	stchi	0, cr0, [r1], {-0}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21fc:	03050704 	movweq	r0, #22276	; 0x5704
    2200:	200006ac 	andcs	r0, r0, ip, lsr #13
			return 0;
    2204:	0f80011a 	svceq	0x0080011a
    2208:	72010000 	andvc	r0, r1, #0
    220c:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
    2210:	10000000 	andne	r0, r0, r0
    2214:	70000016 	andvc	r0, r0, r6, lsl r0
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2218:	01000016 	tsteq	r0, r6, lsl r0
    221c:	0005849c 	muleq	r5, ip, r4
	if (dsp != TCV_DSP_PASS) {
    2220:	06401b00 	strbeq	r1, [r0], -r0, lsl #22
		if (ses == NONE)
    2224:	05720000 	ldrbeq	r0, [r2, #-0]!
			syserror (EREQPAR, "tcv26");
    2228:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
		verify_fds (ses, "tcv27");
    222c:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
    2230:	0000bd11 	andeq	fp, r0, r1, lsl sp
    2234:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    2238:	52000011 	andpl	r0, r0, #17
    223c:	54000016 	strpl	r0, [r0], #-22	; 0xffffffea
		if ((p = apb (size)) != NULL) {
    2240:	01000016 	tsteq	r0, r6, lsl r0
    2244:	0002058d 	andeq	r0, r2, sp, lsl #11
		return NULL;
    2248:	1218011e 	andsne	r0, r8, #-2147483641	; 0x80000007
			p->attributes = descriptors [ses] -> attpattern;
    224c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
			dispose (p, dsp);
    2250:	13882105 	orrne	r2, r8, #1073741825	; 0x40000001
			p->attributes = descriptors [ses] -> attpattern;
    2254:	15e00000 	strbne	r0, [r0, #0]!
			p->attributes.b.outgoing = 0;
    2258:	9c010000 	stcls	0, cr0, [r1], {-0}
			dispose (p, dsp);
    225c:	000007e4 	andeq	r0, r0, r4, ror #15
			return (address)(p + 1);
    2260:	0012251f 	andseq	r2, r2, pc, lsl r5
    2264:	01080d00 	tsteq	r8, r0, lsl #26
	if ((p = apb (size)) != NULL)
    2268:	0011d020 	andseq	sp, r1, r0, lsr #32
    226c:	00138800 	andseq	r8, r3, r0, lsl #16
		return (address)(p + 1);
    2270:	0004a000 	andeq	sl, r4, r0
    2274:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    2278:	0005bf02 	andeq	fp, r5, r2, lsl #30
    227c:	11df2100 	bicsne	r2, pc, r0, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2280:	22000000 	andcs	r0, r0, #0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2284:	00000812 	andeq	r0, r0, r2, lsl r8
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2288:	000013a2 	andeq	r1, r0, r2, lsr #7
    228c:	000004c0 	andeq	r0, r0, r0, asr #9
		syserror (EREQPAR, "tcv28");
    2290:	b302270d 	movwlt	r2, #9997	; 0x270d
		syserror (EMALLOC, "tcv29");
    2294:	23000007 	movwcs	r0, #7
	physical [phy] = ps;
    2298:	000004c0 	andeq	r0, r0, r0, asr #9
	physinfo [phy] = info;
    229c:	00082024 	andeq	r2, r8, r4, lsr #32
    22a0:	00143000 	andseq	r3, r4, r0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22a4:	125c2500 	subsne	r2, ip, #0, 10
    22a8:	13a20000 			; <UNDEFINED> instruction: 0x13a20000
    22ac:	04e80000 	strbteq	r0, [r8], #0
		syserror (EMALLOC, "tcv29");
    22b0:	b3010000 	movwlt	r0, #4096	; 0x1000
    22b4:	381d0404 	ldmdacc	sp, {r2, sl}
	q_init (q);
    22b8:	1a000014 	bne	2310 <tcvphy_rcv+0x40>
}
    22bc:	26000014 			; <UNDEFINED> instruction: 0x26000014
    22c0:	01000014 	tsteq	r0, r4, lsl r0
    22c4:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
    22c8:	0000125c 	andeq	r1, r0, ip, asr r2
    22cc:	0000142e 	andeq	r1, r0, lr, lsr #8
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d0:	00001430 	andeq	r1, r0, r0, lsr r4
	verify_fph (phy, "tcv30");
    22d4:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d8:	0012c025 	andseq	ip, r2, r5, lsr #32
    22dc:	00144600 	andseq	r4, r4, r0, lsl #12
	verify_fph (phy, "tcv30");
    22e0:	00050000 	andeq	r0, r5, r0
    22e4:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
    22e8:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22ec:	14460000 	strbne	r0, [r6], #-0
    22f0:	05200000 	streq	r0, [r0, #-0]!
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22f4:	c5010000 	strgt	r0, [r1, #-0]
    22f8:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
		if (plugins [plg] == NULL)
    22fc:	4e000012 	mcrmi	0, 0, r0, cr0, cr2, {0}
    2300:	40000014 	andmi	r0, r0, r4, lsl r0
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2304:	01000005 	tsteq	r0, r5
}
    2308:	510404c0 	smlabtpl	r4, r0, r4, r0
    230c:	21000006 	tstcs	r0, r6
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2310:	0000129d 	muleq	r0, sp, r2
    2314:	125c1d00 	subsne	r1, ip, #0, 26
    2318:	145e0000 	ldrbne	r0, [lr], #-0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    231c:	14600000 	strbtne	r0, [r0], #-0
    2320:	c3010000 	movwgt	r0, #4096	; 0x1000
    2324:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
    2328:	62000014 	andvs	r0, r0, #20
    232c:	60000014 	andvs	r0, r0, r4, lsl r0
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2330:	01000005 	tsteq	r0, r5
	len -= (ap.head + ap.tail);
    2334:	200404d5 	ldrdcs	r0, [r4], -r5
    2338:	0000144e 	andeq	r1, r0, lr, asr #8
    233c:	00001478 	andeq	r1, r0, r8, ror r4
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2340:	00000580 	andeq	r0, r0, r0, lsl #11
    2344:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
    2348:	0000068e 	andeq	r0, r0, lr, lsl #13
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    234c:	00145d21 	andseq	r5, r4, r1, lsr #26
    2350:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
    2354:	9c000012 	stcls	0, cr0, [r0], {18}
	return 1;
    2358:	9e000014 	mcrls	0, 0, r0, cr0, cr4, {0}
    235c:	01000014 	tsteq	r0, r4, lsl r0
    2360:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
    2364:	00001438 	andeq	r1, r0, r8, lsr r4
    2368:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
	verify_fph (phy, "tcv32");
    236c:	00000598 	muleq	r0, r8, r5
    2370:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
    2374:	00127f25 	andseq	r7, r2, r5, lsr #30
    2378:	0014c000 	andseq	ip, r4, r0
    237c:	0005b000 	andeq	fp, r5, r0
    2380:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
	oq = oqueues [phy];
    2384:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
	b = q_first (oq);
    2388:	14ca0000 	strbne	r0, [sl], #0
	if (q_end (b, oq)) {
    238c:	14ce0000 	strbne	r0, [lr], #0
	*len = b->length;
    2390:	ed010000 	stc	0, cr0, [r1, #-0]
	deq (b);	// Dequeue the packet ...
    2394:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
}
    2398:	9d210000 	stcls	0, cr0, [r1, #-0]
		return NULL;
    239c:	00000012 	andeq	r0, r0, r2, lsl r0
    23a0:	00144325 	andseq	r4, r4, r5, lsr #6
    23a4:	0014ee00 	andseq	lr, r4, r0, lsl #28
    23a8:	0005c800 	andeq	ip, r5, r0, lsl #16
	verify_fph (phy, "tcv33");
    23ac:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
    23b0:	144e2004 	strbne	r2, [lr], #-4
    23b4:	14f00000 	ldrbtne	r0, [r0], #0
    23b8:	05e00000 	strbeq	r0, [r0, #0]!
    23bc:	fa010000 	blx	423c4 <__ccfg+0x2241c>
    23c0:	07080404 	streq	r0, [r8, -r4, lsl #8]
	oq = oqueues [phy];
    23c4:	5d210000 	stcpl	0, cr0, [r1, #-0]
	b = q_first (oq);
    23c8:	00000014 	andeq	r0, r0, r4, lsl r0
		return NULL;
    23cc:	0012b61d 	andseq	fp, r2, sp, lsl r6
	return (address)(b + 1);
    23d0:	0014f800 	andseq	pc, r4, r0, lsl #16
}
    23d4:	0014fc00 	andseq	pc, r4, r0, lsl #24
    23d8:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    23dc:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    23e0:	14fc0000 	ldrbtne	r0, [ip], #0
	verify_plg (b, tcv_xmt, "tcv34");
    23e4:	14fe0000 	ldrbtne	r0, [lr], #0
	hblock_t *b = header (pkt);
    23e8:	00010000 	andeq	r0, r1, r0
	verify_plg (b, tcv_xmt, "tcv34");
    23ec:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
    23f0:	0600000b 	streq	r0, [r0], -fp
    23f4:	12000015 	andne	r0, r0, #21
    23f8:	01000015 	tsteq	r0, r5, lsl r0
    23fc:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
    2400:	27000007 	strcs	r0, [r0, -r7]
    2404:	00001311 	andeq	r1, r0, r1, lsl r3
	dispose (b, plugins [b->attributes.b.plugin] ->
    2408:	00001506 	andeq	r1, r0, r6, lsl #10
}
    240c:	00001510 	andeq	r1, r0, r0, lsl r5
	dispose (b, plugins [b->attributes.b.plugin] ->
    2410:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
    2414:	00132d21 	andseq	r2, r3, r1, lsr #26
    2418:	13202100 	nopne	{0}	; <UNPREDICTABLE>
}
    241c:	00000000 	andeq	r0, r0, r0
    while(1)
    2420:	00125c1d 	andseq	r5, r2, sp, lsl ip
{
    2424:	00153a00 	andseq	r3, r5, r0, lsl #20
    SetupTrimDevice();
    2428:	00153c00 	andseq	r3, r5, r0, lsl #24
    pui32Src = &_etext;
    242c:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2430:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
    __asm("    ldr     r0, =_bss\n"
    2434:	153c0000 	ldrne	r0, [ip, #-0]!
    2438:	154c0000 	strbne	r0, [ip, #-0]
    243c:	41010000 	mrsmi	r0, (UNDEF: 1)
    2440:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
    2444:	4c000012 	stcmi	0, cr0, [r0], {18}
   main();
    2448:	4e000015 	mcrmi	0, 0, r0, cr0, cr5, {0}
    FaultISR();
    244c:	01000015 	tsteq	r0, r5, lsl r0
        *pui32Dest++ = *pui32Src++;
    2450:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
    2454:	0000127f 	andeq	r1, r0, pc, ror r2
    2458:	0000154e 	andeq	r1, r0, lr, asr #10
    245c:	000005f8 	strdeq	r0, [r0], -r8
    2460:	0b054701 	bleq	15406c <__ccfg+0x1340c4>
    2464:	00146b25 	andseq	r6, r4, r5, lsr #22
    2468:	00155600 	andseq	r5, r5, r0, lsl #12
    246c:	00061000 	andeq	r1, r6, r0
static byte get_byte () {
    2470:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2474:	28000004 	stmdacs	r0, {r2}
    2478:	000011ed 	andeq	r1, r0, sp, ror #3
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    247c:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
    2480:	000013be 			; <UNDEFINED> instruction: 0x000013be
		if (ee_inp)
    2484:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
			b |= 1;
    2488:	000011f7 	strdeq	r1, [r0], -r7
    248c:	000013ea 	andeq	r1, r0, sl, ror #7
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2490:	000013ec 	andeq	r1, r0, ip, ror #7
	for (b = 0, i = 0; i < 8; i++) {
    2494:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
}
    2498:	000011f7 	strdeq	r1, [r0], -r7
    249c:	00001570 	andeq	r1, r0, r0, ror r5
    24a0:	00001572 	andeq	r1, r0, r2, ror r5
static void put_byte (byte b) {
    24a4:	0002270d 	andeq	r2, r2, sp, lsl #14
    24a8:	12d6011a 	sbcsne	r0, r6, #-2147483642	; 0x80000006
    24ac:	5c010000 	stcpl	0, cr0, [r1], {-0}
    24b0:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24bc:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = 0; i < 8; i++) {
    24c0:	0008129c 	muleq	r8, ip, r2
		b <<= 1;
    24c4:	63732900 	cmnvs	r3, #0, 18
	for (i = 0; i < 8; i++) {
    24c8:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
}
    24cc:	0000a707 	andeq	sl, r0, r7, lsl #14
    24d0:	0003a600 	andeq	sl, r3, r0, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    24d4:	b82a0000 	stmdalt	sl!, {}	; <UNPREDICTABLE>
    24d8:	01000011 	tsteq	r0, r1, lsl r0
	put_byte (cmd);
    24dc:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
    24e0:	0000082a 	andeq	r0, r0, sl, lsr #16
}
    24e4:	0014632b 	andseq	r6, r4, fp, lsr #6
    24e8:	04ad0100 	strteq	r0, [sp], #256	; 0x100
static void wwait (word st, word del) {
    24ec:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
    24f0:	00001165 	andeq	r1, r0, r5, ror #2
    24f4:	06047e01 	streq	r7, [r4], -r1, lsl #28
	while (dopen && (rdsr () & 1)) {
    24f8:	00136401 	andseq	r6, r3, r1, lsl #8
    24fc:	00138800 	andseq	r8, r3, r0, lsl #16
    2500:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    2504:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
	put_byte (CMD_RDSR);
    2508:	0000002d 	andeq	r0, r0, sp, lsr #32
	r = get_byte ();
    250c:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
    2510:	000000a7 	andeq	r0, r0, r7, lsr #1
	while (dopen && (rdsr () & 1)) {
    2514:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
}
    2518:	ea011e00 	b	49d20 <__ccfg+0x29d78>
		if (st == WNONE)
    251c:	0100000f 	tsteq	r0, pc
    2520:	ac060401 	cfstrsge	mvf0, [r6], {1}
			mdelay (1);
    2524:	64000011 	strvs	r0, [r0], #-17	; 0xffffffef
    2528:	01000013 	tsteq	r0, r3, lsl r0
			delay (del, st);
    252c:	000a1e9c 	muleq	sl, ip, lr
    2530:	12d62e00 	sbcsne	r2, r6, #0, 28
			release;
    2534:	12dc0000 	sbcsne	r0, ip, #0
    2538:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    253c:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
static void ready () {
    2540:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
	if (dopen) {
    2544:	00008d0b 	andeq	r8, r0, fp, lsl #26
		wwait (WNONE, 1);
    2548:	43250000 			; <UNDEFINED> instruction: 0x43250000
    254c:	d6000014 			; <UNDEFINED> instruction: 0xd6000014
    2550:	80000011 	andhi	r0, r0, r1, lsl r0
	dstat = 0;
    2554:	01000003 	tsteq	r0, r3
}
    2558:	20020408 	andcs	r0, r2, r8, lsl #8
    255c:	00000f54 	andeq	r0, r0, r4, asr pc
    2560:	000011d8 	ldrdeq	r1, [r0], -r8
	udelay (1);
    2564:	000003a0 	andeq	r0, r0, r0, lsr #7
    2568:	02040b01 	andeq	r0, r4, #1024	; 0x400
	udelay (1);
    256c:	0000091a 	andeq	r0, r0, sl, lsl r9
		dopen = DOPEN_TEMP;
    2570:	0003a023 	andeq	sl, r3, r3, lsr #32
    2574:	0f612f00 	svceq	0x00612f00
    2578:	6d300000 	ldcvs	0, cr0, [r0, #-0]
    257c:	a000000f 	andge	r0, r0, pc
static void cclose () {
    2580:	31000003 	tstcc	r0, r3
	if (dopen == DOPEN_TEMP) {
    2584:	00000f6e 	andeq	r0, r0, lr, ror #30
    2588:	000003cc 	andeq	r0, r0, ip, asr #7
		wwait (WNONE, 1);
    258c:	0013c922 	andseq	ip, r3, r2, lsr #18
    2590:	0011e200 	andseq	lr, r1, r0, lsl #4
	cmd_0 (CMD_DP);
    2594:	0003c000 	andeq	ip, r3, r0
    2598:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
		dopen = 0;
    259c:	000008e7 	andeq	r0, r0, r7, ror #17
}
    25a0:	0013e521 	andseq	lr, r3, r1, lsr #10
word ee_open () {
    25a4:	13d82100 	bicsne	r2, r8, #0, 2
	ready ();
    25a8:	22000000 	andcs	r0, r0, #0
	dopen = DOPEN_PERM;
    25ac:	000013f3 	strdeq	r1, [r0], -r3
    25b0:	000011e6 	andeq	r1, r0, r6, ror #3
}
    25b4:	000003d8 	ldrdeq	r0, [r0], -r8
	if (dopen) {
    25b8:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
    25bc:	21000009 	tstcs	r0, r9
		dopen = DOPEN_TEMP;
    25c0:	00001402 	andeq	r1, r0, r2, lsl #8
		cclose ();
    25c4:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
}
    25c8:	11ea0000 	mvnne	r0, r0
int ser_out (word st, const char *m) {
    25cc:	03f00000 	mvnseq	r0, #0
	if ((prcs = running (__outserial)) != 0) {
    25d0:	fc010000 	stc2	0, cr0, [r1], {-0}
    25d4:	141f2104 	ldrne	r2, [pc], #-260	; 25dc <ser_out+0x10>
    25d8:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    25dc:	10200000 	eorne	r0, r0, r0
		release;
    25e0:	2a000014 	bcs	2638 <ser_in>
	if (*m)
    25e4:	08000012 	stmdaeq	r0, {r1, r4}
		prcs = strlen (m) +1;
    25e8:	01000004 	tsteq	r0, r4
    25ec:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    25f0:	21000009 	tstcs	r0, r9
    25f4:	0000141f 	andeq	r1, r0, pc, lsl r4
    25f8:	14102000 	ldrne	r2, [r0], #-0
		umwait (st);
    25fc:	122c0000 	eorne	r0, ip, #0
    2600:	04280000 	strteq	r0, [r8], #-0
		prcs =  m [1] + 3;
    2604:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
	if (*m)
    2608:	09500204 	ldmdbeq	r0, {r2, r9}^
		strcpy (buf, m);
    260c:	1f210000 	svcne	0x00210000
    2610:	00000014 	andeq	r0, r0, r4, lsl r0
	if (runstrand (__outserial, buf) == 0) {
    2614:	0013f320 	andseq	pc, r3, r0, lsr #6
    2618:	00124600 	andseq	r4, r2, r0, lsl #12
		ufree (buf);
    261c:	00044000 	andeq	r4, r4, r0
    2620:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
		memcpy (buf, m, prcs);
    2624:	00096b02 	andeq	r6, r9, r2, lsl #22
    2628:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    262c:	26000000 	strcs	r0, [r0], -r0
}
    2630:	000013f3 	strdeq	r1, [r0], -r3
    2634:	0000124c 	andeq	r1, r0, ip, asr #4
int ser_in (word st, char *buf, int len) {
    2638:	0000124e 	andeq	r1, r0, lr, asr #4
    263c:	02040e01 	andeq	r0, r4, #1, 28
	if (len == 0)
    2640:	00000986 	andeq	r0, r0, r6, lsl #19
	if (__inpline == NULL) {
    2644:	00140221 	andseq	r0, r4, r1, lsr #4
		if ((prcs = running (__inserial)) == 0) {
    2648:	34200000 	strtcc	r0, [r0], #-0
    264c:	5e000012 	mcrpl	0, 0, r0, cr0, cr2, {0}
			prcs = runthread (__inserial);
    2650:	58000012 	stmdapl	r0, {r1, r4}
    2654:	01000004 	tsteq	r0, r4
			if (prcs == 0) {
    2658:	a102041b 	tstge	r2, fp, lsl r4
				npwait (st);
    265c:	21000009 	tstcs	r0, r9
		release;
    2660:	00001243 	andeq	r1, r0, r3, asr #4
		join (prcs, st);
    2664:	0ccb2600 	stcleq	6, cr2, [fp], {0}
    2668:	12880000 	addne	r0, r8, #0
	if (*__inpline == NULL) // bin cmd
    266c:	12b20000 	adcsne	r0, r2, #0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2670:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
	if (prcs >= len)
    2674:	09c80204 	stmibeq	r8, {r2, r9}^
		prcs = len-1;
    2678:	43250000 			; <UNDEFINED> instruction: 0x43250000
	memcpy (buf, __inpline, prcs);
    267c:	a6000014 			; <UNDEFINED> instruction: 0xa6000014
    2680:	70000012 	andvc	r0, r0, r2, lsl r0
    2684:	01000004 	tsteq	r0, r4
	ufree (__inpline);
    2688:	00020301 	andeq	r0, r2, r1, lsl #6
	__inpline = NULL;
    268c:	0012ab26 	andseq	sl, r2, r6, lsr #22
	if (*buf) // if it's NULL, it's a bin cmd
    2690:	0012c200 	andseq	ip, r2, r0, lsl #4
		buf [prcs] = '\0';
    2694:	0012d600 	andseq	sp, r2, r0, lsl #12
}
    2698:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
		prcs = strlen (__inpline);
    269c:	0009ef03 	andeq	lr, r9, r3, lsl #30
    26a0:	12b61d00 	adcsne	r1, r6, #0, 26
		return 0;
    26a4:	12c20000 	sbcne	r0, r2, #0
    26a8:	12c60000 	sbcne	r0, r6, #0
    26ac:	140b0000 	strne	r0, [fp], #-0
int ser_outf (word st, const char *m, ...) {
    26b0:	33000501 	movwcc	r0, #1281	; 0x501
    26b4:	00000b95 	muleq	r0, r5, fp
	if ((prcs = running (__outserial)) != 0) {
    26b8:	000012dc 	ldrdeq	r1, [r0], -ip
    26bc:	00000488 	andeq	r0, r0, r8, lsl #9
		join (prcs, st);
    26c0:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
    26c4:	00131133 	andseq	r1, r3, r3, lsr r1
		release;
    26c8:	0012dc00 	andseq	sp, r2, r0, lsl #24
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26cc:	00048800 	andeq	r8, r4, r0, lsl #16
    26d0:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
    26d4:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
		umwait (st);
    26d8:	20210000 	eorcs	r0, r1, r0
    26dc:	00000013 	andeq	r0, r0, r3, lsl r0
	if (runstrand (__outserial, buf) == 0) {
    26e0:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    26e4:	000012fd 	strdeq	r1, [r0], -sp
    26e8:	0603ed01 	streq	lr, [r3], -r1, lsl #26
		ufree (buf);
    26ec:	0010cc01 	andseq	ip, r0, r1, lsl #24
		npwait (st);
    26f0:	00110800 	andseq	r0, r1, r0, lsl #16
}
    26f4:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    26f8:	3400000a 	strcc	r0, [r0], #-10
    26fc:	006c6176 	rsbeq	r6, ip, r6, ror r1
    2700:	1c03ed01 	stcne	13, cr14, [r3], {1}
int ser_inf (word st, const char *fmt, ...) {
    2704:	0000008d 	andeq	r0, r0, sp, lsl #1
    2708:	69295001 	stmdbvs	r9!, {r0, ip, lr}
	if (fmt == NULL)
    270c:	03ef0100 	mvneq	r0, #0, 2
	if (__inpline == NULL) {
    2710:	00008d06 	andeq	r8, r0, r6, lsl #26
		if ((prcs = running (__inserial)) == 0) {
    2714:	0003ea00 	andeq	lr, r3, r0, lsl #20
    2718:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
			prcs = runthread (__inserial);
    271c:	03f00100 	mvnseq	r0, #0, 2
    2720:	0000df08 	andeq	sp, r0, r8, lsl #30
			if (prcs == 0) {
    2724:	00040800 	andeq	r0, r4, r0, lsl #16
				npwait (st);
    2728:	11ed2500 	mvnne	r2, r0, lsl #10
		release;
    272c:	10cc0000 	sbcne	r0, ip, r0
		join (prcs, st);
    2730:	03400000 	movteq	r0, #0
    2734:	f2010000 	vhadd.s8	d0, d1, d0
	va_start (ap, fmt);
    2738:	ac200203 	sfmge	f0, 4, [r0], #-12
	prcs = vscan (__inpline, fmt, ap);
    273c:	d2000013 	andle	r0, r0, #19
    2740:	58000010 	stmdapl	r0, {r4}
	ufree (__inpline);
    2744:	01000003 	tsteq	r0, r3
	__inpline = NULL;
    2748:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
}
    274c:	3500000a 	strcc	r0, [r0, #-10]
    2750:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    2754:	00000408 	andeq	r0, r0, r8, lsl #8
		return 0;
    2758:	11f71d00 	mvnsne	r1, r0, lsl #26
    275c:	10f60000 	rscsne	r0, r6, r0
    2760:	10f80000 	rscsne	r0, r8, r0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2764:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    2768:	2c000203 	sfmcs	f0, 4, [r0], {3}
    276c:	00125b01 	andseq	r5, r2, r1, lsl #22
	RF_cmdFs.frequency = 
    2770:	03da0100 	bicseq	r0, sl, #0, 2
}
    2774:	10880106 	addne	r0, r8, r6, lsl #2
    2778:	10cc0000 	sbcne	r0, ip, r0
    277c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2780:	00000b2c 	andeq	r0, r0, ip, lsr #22
static int option (int opt, address val) {
    2784:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
    2788:	03da0100 	bicseq	r0, sl, #0, 2
    278c:	00008d1c 	andeq	r8, r0, ip, lsl sp
    2790:	1c500100 	ldfnee	f0, [r0], {-0}
    2794:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
    2798:	008d0603 	addeq	r0, sp, r3, lsl #12
    279c:	62290000 	eorvs	r0, r9, #0
    27a0:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    27a4:	00df0803 	sbcseq	r0, pc, r3, lsl #16
    27a8:	041b0000 	ldreq	r0, [fp], #-0
    27ac:	ed250000 	stc	0, cr0, [r5, #-0]
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    27b0:	88000011 	stmdahi	r0, {r0, r4}
    27b4:	f8000010 			; <UNDEFINED> instruction: 0xf8000010
			goto RVal;
    27b8:	01000002 	tsteq	r0, r2
			_BIS (dstate, DSTATE_RXON);
    27bc:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
    27c0:	000013ac 	andeq	r1, r0, ip, lsr #7
	int ret = 0;
    27c4:	0000108c 	andeq	r1, r0, ip, lsl #1
			p_trigger (drvprcs, qevent);
    27c8:	00000310 	andeq	r0, r0, r0, lsl r3
    27cc:	0303e201 	movweq	lr, #12801	; 0x3201
    27d0:	00000b1a 	andeq	r0, r0, sl, lsl fp
    27d4:	0013bb35 	andseq	fp, r3, r5, lsr fp
    27d8:	00042e00 	andeq	r2, r4, r0, lsl #28
    27dc:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    27e0:	ba000011 	blt	282c <option+0xa8>
    27e4:	bc000010 	stclt	0, cr0, [r0], {16}
    27e8:	01000010 	tsteq	r0, r0, lsl r0
    27ec:	000203e6 	andeq	r0, r2, r6, ror #7
}
    27f0:	130e011e 	movwne	r0, #57630	; 0xe11e
			_BIC (dstate, DSTATE_RXON);
    27f4:	c6010000 	strgt	r0, [r1], -r0
    27f8:	11080603 	tstne	r8, r3, lsl #12
			statid = (val == NULL) ? 0 : *val;
    27fc:	11ac0000 			; <UNDEFINED> instruction: 0x11ac0000
    2800:	9c010000 	stcls	0, cr0, [r1], {-0}
	int ret = 0;
    2804:	00000b95 	muleq	r0, r5, fp
			ret = (int) statid;
    2808:	00111a2e 	andseq	r1, r1, lr, lsr #20
	if (val != NULL)
    280c:	00114800 	andseq	r4, r1, r0, lsl #16
		*val = ret;
    2810:	000b6e00 	andeq	r6, fp, r0, lsl #28
			ret = rbuffl + 2;
    2814:	006a3600 	rsbeq	r3, sl, r0, lsl #12
    2818:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
			if (val != NULL) {
    281c:	41000000 	mrsmi	r0, (UNDEF: 0)
				memcpy (val, &rxstat,
    2820:	36000004 	strcc	r0, [r0], -r4
    2824:	03070069 	movweq	r0, #28777	; 0x7069
				memset (&rxstat, 0, 
    2828:	0003f402 	andeq	pc, r3, r2, lsl #8
    282c:	00045400 	andeq	r5, r4, r0, lsl #8
			if (val == NULL)
    2830:	5a370000 	bpl	dc2838 <__ccfg+0xda2890>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2834:	88000011 	stmdahi	r0, {r0, r4}
    2838:	36000011 			; <UNDEFINED> instruction: 0x36000011
				utimer_set (bckf_timer, *val);
    283c:	0208006a 	andeq	r0, r8, #106	; 0x6a
    2840:	00008d02 	andeq	r8, r0, r2, lsl #26
    2844:	00046700 	andeq	r6, r4, r0, lsl #14
			for (ret = 0; ret < 8; ret++)
    2848:	00693600 	rsbeq	r3, r9, r0, lsl #12
				if (RF_cmdPropRadioDivSetup.txPower
    284c:	f4020208 	vst1.8	{d0-d3}, [r2], r8
					== patable [ret])
    2850:	7a000003 	bvc	2864 <option+0xe0>
				if (RF_cmdPropRadioDivSetup.txPower
    2854:	00000004 	andeq	r0, r0, r4
			for (ret = 0; ret < 8; ret++)
    2858:	10e33800 	rscne	r3, r3, r0, lsl #16
    285c:	bb010000 	bllt	42864 <__ccfg+0x228bc>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2860:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
    2864:	00145301 	andseq	r5, r4, r1, lsl #6
    2868:	03820100 	orreq	r0, r2, #0, 2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    286c:	000fc806 	andeq	ip, pc, r6, lsl #16
    2870:	00108800 	andseq	r8, r0, r0, lsl #16
			_BIS (dstate, DSTATE_IRST);
    2874:	289c0100 	ldmcs	ip, {r8}
    2878:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
    287c:	00000ff4 	strdeq	r0, [r0], -r4
			ret = (int) channel;
    2880:	00001022 	andeq	r1, r0, r2, lsr #32
			goto RVal;
    2884:	00000be3 	andeq	r0, r0, r3, ror #23
				(*val > 7) ? 7 : *val;
    2888:	01006a29 	tsteq	r0, r9, lsr #20
    288c:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2890:	8d000000 	stchi	0, cr0, [r0, #-0]
    2894:	29000004 	stmdbcs	r0, {r2}
			plugch ();
    2898:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
			_BIS (dstate, DSTATE_IRST);
    289c:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    28a0:	04a00000 	strteq	r0, [r0], #0
			ret = (int) vrate;
    28a4:	1b000000 	blne	28ac <option+0x128>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28a8:	000002e0 	andeq	r0, r0, r0, ror #5
    28ac:	00000c0b 	andeq	r0, r0, fp, lsl #24
    28b0:	01006a29 	tsteq	r0, r9, lsr #20
    28b4:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
    28b8:	b3000000 	movwlt	r0, #0
    28bc:	29000004 	stmdbcs	r0, {r2}
    28c0:	8f010069 	svchi	0x00010069
    28c4:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28c8:	04c60000 	strbeq	r0, [r6], #0
    28cc:	33000000 	movwcc	r0, #0
    28d0:	000012e7 	andeq	r1, r0, r7, ror #5
    28d4:	00000fc8 	andeq	r0, r0, r8, asr #31
			syserror (EREQPAR, "cc13 op");
    28d8:	000002c0 	andeq	r0, r0, r0, asr #5
    28dc:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
    28e0:	00130321 	andseq	r0, r3, r1, lsr #6
    28e4:	12f62100 	rscsne	r2, r6, #0, 2
    28e8:	00000000 	andeq	r0, r0, r0
    28ec:	0011e039 	andseq	lr, r1, r9, lsr r0
    28f0:	037d0100 	cmneq	sp, #0, 2
    28f4:	0b2c010d 	bleq	b02d30 <__ccfg+0xae2d88>
    28f8:	0b380000 	bleq	e02900 <__ccfg+0xde2958>
    28fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2900:	00000c52 	andeq	r0, r0, r2, asr ip
    2904:	0013e82d 	andseq	lr, r3, sp, lsr #16
    2908:	037d0100 	cmneq	sp, #0, 2
    290c:	00008d1f 	andeq	r8, r0, pc, lsl sp
    2910:	0004d900 	andeq	sp, r4, r0, lsl #18
static void issue_cmd (lword cmd) {
    2914:	a93a0000 	ldmdbge	sl!, {}	; <UNPREDICTABLE>
    2918:	01000013 	tsteq	r0, r3, lsl r0
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    291c:	010c0310 	tsteq	ip, r0, lsl r3
    2920:	0000008d 	andeq	r0, r0, sp, lsl #1
    2924:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
		if (res != 0x86)
    2928:	00000fc8 	andeq	r0, r0, r8, asr #31
			syserror (EHARDWARE, "hang ic0");
    292c:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
    2930:	722d0000 	eorvc	r0, sp, #0
		if (cnt-- == 0) {
    2934:	01000011 	tsteq	r0, r1, lsl r0
			diag ("HUP %lx %lx", cmd, res);
    2938:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
    293c:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
			syserror (EHARDWARE, "hang ic0");
    2940:	3b000004 	blcc	2958 <issue_cmd+0x44>
		udelay (1);
    2944:	00667562 	rsbeq	r7, r6, r2, ror #10
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2948:	2f031001 	svccs	0x00031001
}
    294c:	000001c9 	andeq	r0, r0, r9, asr #3
    2950:	0000050a 	andeq	r0, r0, sl, lsl #10
    2954:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
    2958:	03100100 	tsteq	r0, #0, 2
static void rx_de () {
    295c:	00008d38 	andeq	r8, r0, r8, lsr sp
	if ((dstate & DSTATE_RXAC) == 0)
    2960:	0005ac00 	andeq	sl, r5, r0, lsl #24
    2964:	108f2b00 	addne	r2, pc, r0, lsl #22
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2968:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
	_BIC (dstate, DSTATE_RXAC);
    296c:	9a2b0103 	bls	ac2d80 <__ccfg+0xaa2dd8>
    2970:	01000011 	tsteq	r0, r1, lsl r0
}
    2974:	2701033d 	smladxcs	r1, sp, r3, r0
    2978:	00000d44 	andeq	r0, r0, r4, asr #26
    297c:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
static void rf_off () {
    2980:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
	if ((dstate & DSTATE_RFON) == 0)
    2984:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
    2988:	000d5821 	andeq	r5, sp, r1, lsr #16
	IntDisable (INT_RFC_CPE_0);
    298c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2990:	0000122a 	andeq	r1, r0, sl, lsr #4
    2994:	0d02fc01 	stceq	12, cr15, [r2, #-4]
	RFCAdi3VcoLdoVoltageMode (false);
    2998:	122b3c01 	eorne	r3, fp, #256	; 0x100
	RFCSynthPowerDown ();
    299c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    29a0:	0e800d02 	cdpeq	13, 8, cr0, cr0, cr2, {0}
    29a4:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    29a8:	9c010000 	stcls	0, cr0, [r1], {-0}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29ac:	00000d44 	andeq	r0, r0, r4, asr #26
	OSCHF_SwitchToRcOscTurnOffXosc ();
    29b0:	00133b20 	andseq	r3, r3, r0, lsr #22
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    29b4:	000e8000 	andeq	r8, lr, r0
    29b8:	0002a800 	andeq	sl, r2, r0, lsl #16
    29bc:	02f50100 	rscseq	r0, r5, #0, 2
	_BIC (dstate, DSTATE_RFON);
    29c0:	000d0702 	andeq	r0, sp, r2, lsl #14
    29c4:	134a2100 	movtne	r2, #41216	; 0xa100
}
    29c8:	26000000 	strcs	r0, [r0], -r0
    29cc:	00001375 	andeq	r1, r0, r5, ror r3
    29d0:	00000e8c 	andeq	r0, r0, ip, lsl #29
    29d4:	00000e92 	muleq	r0, r2, lr
    29d8:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    29dc:	00000d2c 	andeq	r0, r0, ip, lsr #26
    29e0:	00139e21 	andseq	r9, r3, r1, lsr #28
    29e4:	13912100 	orrsne	r2, r1, #0, 2
		if (cmd->status == tstat)
    29e8:	84210000 	strthi	r0, [r1], #-0
		if (timeout-- == 0) {
    29ec:	00000013 	andeq	r0, r0, r3, lsl r0
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    29f0:	0012ca27 	andseq	ip, r2, r7, lsr #20
    29f4:	000e9200 	andeq	r9, lr, r0, lsl #4
    29f8:	000e9c00 	andeq	r9, lr, r0, lsl #24
			syserror (EHARDWARE, "rt2");
    29fc:	02f70100 	rscseq	r0, r7, #0, 2
    2a00:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
		udelay (1);
    2a04:	00000000 	andeq	r0, r0, r0
		if (cmd->status == tstat)
    2a08:	105d013d 	subsne	r0, sp, sp, lsr r1
}
    2a0c:	eb010000 	bl	42a14 <__ccfg+0x22a6c>
    2a10:	a7010602 	strge	r0, [r1, -r2, lsl #12]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a14:	01000000 	mrseq	r0, (UNDEF: 0)
    2a18:	00000d65 	andeq	r0, r0, r5, ror #26
static void rf_on () {
    2a1c:	0061753e 	rsbeq	r7, r1, lr, lsr r5
    2a20:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
	OSCHF_TurnOnXosc();
    2a24:	00000d65 	andeq	r0, r0, r5, ror #26
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a28:	26040700 	strcs	r0, [r4], -r0, lsl #14
    2a2c:	1a000002 	bne	2a3c <rf_on.part.0+0x28>
    2a30:	00112001 	andseq	r2, r1, r1
    2a34:	02d40100 	sbcseq	r0, r4, #0, 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a38:	009b0109 	addseq	r0, fp, r9, lsl #2
    2a3c:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a40:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2a44:	9c010000 	stcls	0, cr0, [r1], {-0}
	issue_cmd (
    2a48:	00000dc1 	andeq	r0, r0, r1, asr #27
    2a4c:	00106a2d 	andseq	r6, r0, sp, lsr #20
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2a50:	02d40100 	sbcseq	r0, r4, #0, 2
    2a54:	0000a721 	andeq	sl, r0, r1, lsr #14
    2a58:	00063800 	andeq	r3, r6, r0, lsl #16
   pPatchTab[80] = 0;
    2a5c:	61753b00 	cmnvs	r5, r0, lsl #22
   } while (--nIterations);
    2a60:	02d40100 	sbcseq	r0, r4, #0, 2
   pPatchTab[53] = 2;
    2a64:	000dc12f 	andeq	ip, sp, pc, lsr #2
    2a68:	00064b00 	andeq	r4, r6, r0, lsl #22
   pPatchTab[55] = 3;
    2a6c:	13583300 	cmpne	r8, #0, 6
   pPatchTab[110] = 4;
    2a70:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
   pPatchTab[107] = 5;
    2a74:	02900000 	addseq	r0, r0, #0
   pPatchTab[65] = 6;
    2a78:	e6010000 	str	r0, [r1], -r0
    2a7c:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
   pPatchTab[57] = 1;
    2a80:	00000013 	andeq	r0, r0, r3, lsl r0
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a84:	1a040700 	bne	10468c <__ccfg+0xe46e4>
   const uint32_t *pS = patchGenfskRfe;
    2a88:	1a000002 	bne	2a98 <rf_on.part.0+0x84>
      t2 = *pS++;
    2a8c:	00147901 	andseq	r7, r4, r1, lsl #18
      t4 = *pS++;
    2a90:	018a0100 	orreq	r0, sl, r0, lsl #2
      t6 = *pS++;
    2a94:	00a70106 	adceq	r0, r7, r6, lsl #2
      t8 = *pS++;
    2a98:	0ddc0000 	ldcleq	0, cr0, [ip]
      *pD++ = t1;
    2a9c:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
      *pD++ = t2;
    2aa0:	9c010000 	stcls	0, cr0, [r1], {-0}
      *pD++ = t3;
    2aa4:	00000e0f 	andeq	r0, r0, pc, lsl #28
      *pD++ = t5;
    2aa8:	0012372d 	andseq	r3, r2, sp, lsr #14
      *pD++ = t7;
    2aac:	018a0100 	orreq	r0, sl, r0, lsl #2
   } while (--nIterations);
    2ab0:	00009b26 	andeq	r9, r0, r6, lsr #22
    2ab4:	00065e00 	andeq	r5, r6, r0, lsl #28
      *pD++ = t8;
    2ab8:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
   } while (--nIterations);
    2abc:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2ac0:	0f461d01 	svceq	0x00461d01
   *pD++ = t2;
    2ac4:	0df00000 	ldcleq	0, cr0, [r0]
   *pD++ = t3;
    2ac8:	0dfa0000 	ldcleq	0, cr0, [sl]
   *pD++ = t4;
    2acc:	9c010000 	stcls	0, cr0, [r1], {-0}
   *pD++ = t5;
    2ad0:	1e001a01 	vmlane.f32	s2, s0, s2
    2ad4:	0011ed01 	andseq	lr, r1, r1, lsl #26
	RFCAdi3VcoLdoVoltageMode (true);
    2ad8:	01380100 	teqeq	r8, r0, lsl #2
    2adc:	000cc806 	andeq	ip, ip, r6, lsl #16
       	RFCRfTrimSet (&rfTrim);
    2ae0:	000ddc00 	andeq	sp, sp, r0, lsl #24
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2ae4:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2ae8:	4000000e 	andmi	r0, r0, lr
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2aec:	00001350 	andeq	r1, r0, r0, asr r3
    2af0:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
	issue_cmd ((lword)&cmd_srt);
    2af4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2af8:	0000067c 	andeq	r0, r0, ip, ror r6
	issue_cmd ((lword)&RF_cmdFs);
    2afc:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b00:	01680100 	cmneq	r8, r0, lsl #2
    2b04:	000d1601 	andeq	r1, sp, r1, lsl #12
    2b08:	02782300 	rsbseq	r2, r8, #0, 6
	IntEnable (INT_RFC_CPE_0);
    2b0c:	7c400000 	marvc	acc0, r0, r0
	_BIC (dstate, DSTATE_IRST);
    2b10:	01000011 	tsteq	r0, r1, lsl r0
    2b14:	9b0b0147 	blls	2c3038 <__ccfg+0x2a3090>
    2b18:	c7000000 	strgt	r0, [r0, -r0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b1c:	42000006 	andmi	r0, r0, #6
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b20:	00001410 	andeq	r1, r0, r0, lsl r4
	IntEnable (INT_RFC_CPE_0);
    2b24:	00000d34 	andeq	r0, r0, r4, lsr sp
    2b28:	00000d3c 	andeq	r0, r0, ip, lsr sp
}
    2b2c:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
	IntEnable (INT_RFC_CPE_0);
    2b30:	2100000e 	tstcs	r0, lr
    2b34:	0000141f 	andeq	r1, r0, pc, lsl r4
    2b38:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
    2b3c:	0d400000 	stcleq	0, cr0, [r0, #-0]
    2b40:	0d480000 	stcleq	0, cr0, [r8, #-0]
    2b44:	0f050000 	svceq	0x00050000
    2b48:	000e8f06 	andeq	r8, lr, r6, lsl #30
    2b4c:	141f2100 	ldrne	r2, [pc], #-256	; 2b54 <rf_on.part.0+0x140>
    2b50:	42000000 	andmi	r0, r0, #0
    2b54:	000013f3 	strdeq	r1, [r0], -r3
    2b58:	00000d8e 	andeq	r0, r0, lr, lsl #27
    2b5c:	00000d96 	muleq	r0, r6, sp
    2b60:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
    2b64:	2100000e 	tstcs	r0, lr
    2b68:	00001402 	andeq	r1, r0, r2, lsl #8
    2b6c:	13f34300 	mvnsne	r4, #0, 6
    2b70:	0d9a0000 	ldceq	0, cr0, [sl]
    2b74:	0da20000 	stceq	0, cr0, [r2]
    2b78:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    2b7c:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
    2b80:	00000000 	andeq	r0, r0, r0
    2b84:	e5011e00 	str	r1, [r1, #-3584]	; 0xfffff200
    2b88:	01000012 	tsteq	r0, r2, lsl r0
    2b8c:	a006012b 	andge	r0, r6, fp, lsr #2
    2b90:	c800000c 	stmdagt	r0, {r2, r3}
static void rx_int_enable () {
    2b94:	0100000c 	tsteq	r0, ip
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b98:	000ef19c 	muleq	lr, ip, r1
    2b9c:	0f253300 	svceq	0x00253300
    2ba0:	0ca80000 	stceq	0, cr0, [r8]
    2ba4:	02600000 	rsbeq	r0, r0, #0
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2ba8:	32010000 	andcc	r0, r1, #0
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2bac:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
    2bb0:	0000000f 	andeq	r0, r0, pc
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2bb4:	04011e00 	streq	r1, [r1], #-3584	; 0xfffff200
    2bb8:	01000012 	tsteq	r0, r2, lsl r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bbc:	6006011e 	andvs	r0, r6, lr, lsl r1
    2bc0:	a000000c 	andge	r0, r0, ip
    2bc4:	0100000c 	tsteq	r0, ip
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bc8:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bcc:	0f253300 	svceq	0x00253300
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bd0:	0c720000 	ldcleq	0, cr0, [r2], #-0
		if (db->status == DATA_ENTRY_FINISHED) {
    2bd4:	02400000 	subeq	r0, r0, #0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bd8:	25010000 	strcs	r0, [r1, #-0]
    2bdc:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
			nr++;
    2be0:	0600000f 	streq	r0, [r0], -pc
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2be4:	00000007 	andeq	r0, r0, r7
    2be8:	13494400 	movtne	r4, #37888	; 0x9400
    2bec:	17010000 	strne	r0, [r1, -r0]
    2bf0:	df011501 	svcle	0x00011501
				__dp [pl + 1] = __dp [pl] - 128;
    2bf4:	03000000 	movweq	r0, #0
				pl = __dp [1] + 2;
    2bf8:	00000f46 	andeq	r0, r0, r6, asr #30
				__dp [pl + 1] = __dp [pl] - 128;
    2bfc:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
    2c00:	01170100 	tsteq	r7, r0, lsl #2
				__dp [pl] = 0;
    2c04:	0000a722 	andeq	sl, r0, r2, lsr #14
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c08:	85450000 	strbhi	r0, [r5, #-0]
    2c0c:	0100000f 	tsteq	r0, pc
    2c10:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
			db->status = DATA_ENTRY_PENDING;
    2c14:	03000000 	movweq	r0, #0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c18:	00146d46 	andseq	r6, r4, r6, asr #26
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c1c:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
				diag ("BAD RX");
    2c20:	000f7a03 	andeq	r7, pc, r3, lsl #20
    2c24:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
	if (nr) {
    2c28:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c2c:	00008d06 	andeq	r8, r0, r6, lsl #26
}
    2c30:	69474800 	stmdbvs	r7, {fp, lr}^
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c34:	0bf40100 	bleq	ffd0303c <_estack+0xdfcfe03c>
    2c38:	0000008d 	andeq	r0, r0, sp, lsl #1
    2c3c:	01490000 	mrseq	r0, (UNDEF: 73)
}
    2c40:	000013da 	ldrdeq	r1, [r0], -sl
    2c44:	01069801 	tsteq	r6, r1, lsl #16
    2c48:	00000c0c 	andeq	r0, r0, ip, lsl #24
    2c4c:	00000c60 	andeq	r0, r0, r0, ror #24
    2c50:	10249c01 	eorne	r9, r4, r1, lsl #24
    2c54:	654a0000 	strbvs	r0, [sl, #-0]
    2c58:	98010063 	stmdals	r1, {r0, r1, r5, r6}
    2c5c:	0000a71a 	andeq	sl, r0, sl, lsl r7
    2c60:	00071900 	andeq	r1, r7, r0, lsl #18
thread (cc1350_driver)
    2c64:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
    2c68:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
    2c6c:	2c000010 	stccs	0, cr0, [r0], {16}
    2c70:	28000007 	stmdacs	r0, {r0, r1, r2}
    2c74:	000011ed 	andeq	r1, r0, sp, ror #3
		if (dstate & DSTATE_IRST) {
    2c78:	00000c18 	andeq	r0, r0, r8, lsl ip
    2c7c:	00000c1a 	andeq	r0, r0, sl, lsl ip
    2c80:	2202a801 	andcs	sl, r2, #65536	; 0x10000
			rf_off ();
    2c84:	00001410 	andeq	r1, r0, r0, lsl r4
			_BIC (dstate,
    2c88:	00000c1a 	andeq	r0, r0, sl, lsl ip
    2c8c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (dstate & DSTATE_RXAC) {
    2c90:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
    2c94:	2100000f 	tstcs	r0, pc
			if ((dstate & DSTATE_RXON) == 0)
    2c98:	0000141f 	andeq	r1, r0, pc, lsl r4
				rx_de ();
    2c9c:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
		if (paylen == 0) {
    2ca0:	0c200000 	stceq	0, cr0, [r0], #-0
    2ca4:	02100000 	andseq	r0, r0, #0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2ca8:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2cac:	000ff303 	andeq	pc, pc, r3, lsl #6
    2cb0:	141f2100 	ldrne	r2, [pc], #-256	; 2cb8 <cc1350_driver+0x54>
    2cb4:	22000000 	andcs	r0, r0, #0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cb8:	000013f3 	strdeq	r1, [r0], -r3
    2cbc:	00000c38 	andeq	r0, r0, r8, lsr ip
    2cc0:	00000228 	andeq	r0, r0, r8, lsr #4
    2cc4:	0d03b801 	stceq	8, cr11, [r3, #-4]
    2cc8:	21000010 	tstcs	r0, r0, lsl r0
    2ccc:	00001402 	andeq	r1, r0, r2, lsl #8
    2cd0:	13f34300 	mvnsne	r4, #0, 6
    2cd4:	0c3e0000 	ldceq	0, cr0, [lr], #-0
		} else if (dstate & DSTATE_RXON) {
    2cd8:	0c400000 	mareq	acc0, r0, r0
	if (dstate & DSTATE_RFON)
    2cdc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2ce0:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
		re->status = DATA_ENTRY_PENDING;
    2ce4:	00000000 	andeq	r0, r0, r0
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2ce8:	01d60407 	bicseq	r0, r6, r7, lsl #8
	issue_cmd ((lword)&RF_cmdPropRx);
    2cec:	01490000 	mrseq	r0, (UNDEF: 73)
	_BIS (dstate, DSTATE_RXAC);
    2cf0:	0000136f 	andeq	r1, r0, pc, ror #6
    2cf4:	01067201 	tsteq	r6, r1, lsl #4
	...
	if (dstate & DSTATE_RXAC)
    2d00:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
    2d04:	734a0000 	movtvc	r0, #40960	; 0xa000
				if (statid != 0xffff)
    2d08:	72010074 	andvc	r0, r1, #116	; 0x74
    2d0c:	0000a718 	andeq	sl, r0, r8, lsl r7
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d10:	00074a00 	andeq	r4, r7, r0, lsl #20
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d14:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
		if (paylen == 0) {
    2d18:	7201006e 	andvc	r0, r1, #110	; 0x6e
			wait (qevent, DR_LOOP);
    2d1c:	00024428 	andeq	r4, r2, r8, lsr #8
    2d20:	00075d00 	andeq	r5, r7, r0, lsl #26
			if (dstate & DSTATE_RXAC) {
    2d24:	61764a00 	cmnvs	r6, r0, lsl #20
    2d28:	7201006c 	andvc	r0, r1, #108	; 0x6c
				rx_int_enable ();
    2d2c:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
			release;
    2d30:	00077b00 	andeq	r7, r7, r0, lsl #22
			} else if (dstate & DSTATE_RFON) {
    2d34:	0fa04b00 	svceq	0x00a04b00
				delay (offdelay, DR_GOOF);
    2d38:	74010000 	strvc	r0, [r1], #-0
    2d3c:	0000c90e 	andeq	ip, r0, lr, lsl #18
    2d40:	00030500 	andeq	r0, r3, r0, lsl #10
		if (bckf_timer) {
    2d44:	4c000000 	stcmi	0, cr0, [r0], {-0}
			wait (qevent, DR_LOOP);
    2d48:	00001490 	muleq	r0, r0, r4
    2d4c:	00017801 	andeq	r7, r1, r1, lsl #16
    2d50:	4d000000 	stcmi	0, cr0, [r0, #-0]
			delay (bckf_timer, DR_LOOP);
    2d54:	00001220 	andeq	r1, r0, r0, lsr #4
    2d58:	00000000 	andeq	r0, r0, r0
			if (dstate & DSTATE_RXAC)
    2d5c:	00000628 	andeq	r0, r0, r8, lsr #12
    2d60:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
	if (dstate & DSTATE_RFON)
    2d64:	00001201 	andeq	r1, r0, r1, lsl #4
	...
		RF_cmdPropTx . status = 0;
    2d70:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d74:	2f000010 	svccs	0x00000010
    2d78:	00001213 	andeq	r1, r0, r3, lsl r2
    2d7c:	122a2800 	eorne	r2, sl, #0, 16
	...
		if (dstate & DSTATE_IRST)
    2d88:	84010000 	strhi	r0, [r1], #-0
    2d8c:	014e0003 	cmpeq	lr, r3
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d90:	00001437 	andeq	r1, r0, r7, lsr r4
    2d94:	01066201 	tsteq	r6, r1, lsl #4
			delay (1, DR_XMIT);
    2d98:	000015e0 	andeq	r1, r0, r0, ror #11
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d9c:	00001610 	andeq	r1, r0, r0, lsl r6
    2da0:	01499c01 	cmpeq	r9, r1, lsl #24
    2da4:	00000f3f 	andeq	r0, r0, pc, lsr pc
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2da8:	01064f01 	tsteq	r6, r1, lsl #30
	...
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2db4:	11079c01 	tstne	r7, r1, lsl #24
				issue_cmd ((lword)&RF_cmdPropTx);
    2db8:	51280000 			; <UNDEFINED> instruction: 0x51280000
				proceed (DR_XMIT);
    2dbc:	00000012 	andeq	r0, r0, r2, lsl r0
    2dc0:	00000000 	andeq	r0, r0, r0
			txtries++;
    2dc4:	01000000 	mrseq	r0, (UNDEF: 0)
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2dc8:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
    2dcc:	000f7601 	andeq	r7, pc, r1, lsl #12
    2dd0:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dd4:	000bcc01 	andeq	ip, fp, r1, lsl #24
		goto DR_LOOP__;
    2dd8:	000c0c00 	andeq	r0, ip, r0, lsl #24
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ddc:	2e9c0100 	fmlcse	f0, f4, f0
		paylen = 0;
    2de0:	4a000011 	bmi	2e2c <cc1350_driver+0x1c8>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2de4:	3b010064 	blcc	42f7c <__ccfg+0x22fd4>
		txtries = 0;
    2de8:	0000df1c 	andeq	sp, r0, ip, lsl pc
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dec:	00079900 	andeq	r9, r7, r0, lsl #18
    2df0:	01490000 	mrseq	r0, (UNDEF: 73)
    2df4:	00001036 	andeq	r1, r0, r6, lsr r0
    2df8:	01062b01 	tsteq	r6, r1, lsl #22
    2dfc:	00000b90 	muleq	r0, r0, fp
		    tcvphy_top (physid) == NULL)
    2e00:	00000bcc 	andeq	r0, r0, ip, asr #23
    2e04:	11559c01 	cmpne	r5, r1, lsl #24
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e08:	644a0000 	strbvs	r0, [sl], #-0
    2e0c:	1b2b0100 	blne	ac3214 <__ccfg+0xaa326c>
			rf_off ();
    2e10:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
endthread
    2e14:	000007b7 			; <UNDEFINED> instruction: 0x000007b7
    2e18:	6c014900 			; <UNDEFINED> instruction: 0x6c014900
    2e1c:	01000012 	tsteq	r0, r2, lsl r0
    2e20:	64010620 	strvs	r0, [r1], #-1568	; 0xfffff9e0
    2e24:	8e00000b 	cdphi	0, 0, cr0, cr0, cr11, {0}
    2e28:	0100000b 	tsteq	r0, fp
    2e2c:	00117c9c 	mulseq	r1, ip, ip
    2e30:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
    2e34:	b81c2001 	ldmdalt	ip, {r0, sp}
    2e38:	d5000000 	strle	r0, [r0, #-0]
    2e3c:	00000007 	andeq	r0, r0, r7
    2e40:	13570149 	cmpne	r7, #1073741842	; 0x40000012
    2e44:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2e48:	0b380106 	bleq	e03268 <__ccfg+0xde32c0>
    2e4c:	0b640000 	bleq	1902e54 <__ccfg+0x18e2eac>
    2e50:	9c010000 	stcls	0, cr0, [r1], {-0}
void RFCCPE0IntHandler (void) {
    2e54:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e58:	01006e4f 	tsteq	r0, pc, asr #28
		_BIS (dstate, DSTATE_IRST);
    2e5c:	00b81c19 	adcseq	r1, r8, r9, lsl ip
    2e60:	50010000 	andpl	r0, r1, r0
    2e64:	0011b743 	andseq	fp, r1, r3, asr #14
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e68:	000b4c00 	andeq	r4, fp, r0, lsl #24
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e6c:	000b5600 	andeq	r5, fp, r0, lsl #12
    2e70:	031b0100 	tsteq	fp, #0, 2
	p_trigger (drvprcs, qevent);
    2e74:	0011c521 	andseq	ip, r1, r1, lsr #10
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e78:	50000000 	andpl	r0, r0, r0
    2e7c:	0000144b 	andeq	r1, r0, fp, asr #8
    2e80:	01141501 	tsteq	r4, r1, lsl #10
    2e84:	0011d003 	andseq	sp, r1, r3
    2e88:	006e5100 	rsbeq	r5, lr, r0, lsl #2
    2e8c:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
    2e90:	00000000 	andeq	r0, r0, r0
    2e94:	00102252 	andseq	r2, r0, r2, asr r2
    2e98:	011a0300 	tsteq	sl, r0, lsl #6
    2e9c:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
	RISE_N_SHINE;
    2ea0:	53000011 	movwpl	r0, #17
    2ea4:	0000143c 	andeq	r1, r0, ip, lsr r4
    2ea8:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
}
    2eac:	00000073 	andeq	r0, r0, r3, ror r0
    2eb0:	12735400 	rsbsne	r5, r3, #0, 8
    2eb4:	5b030000 	blpl	c2ebc <__ccfg+0xa2f14>
    2eb8:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
    2ebc:	00000f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    2ec0:	01355003 	teqeq	r5, r3
void phys_cc1350 (int phy, int mbs) {
    2ec4:	138e5503 	orrne	r5, lr, #12582912	; 0xc00000
	if (rbuffl != 0)
    2ec8:	bf0f0000 	svclt	0x000f0000
    2ecc:	00730101 	rsbseq	r0, r3, r1, lsl #2
		syserror (ETOOMANY, "cc13");
    2ed0:	20030000 	andcs	r0, r3, r0
		syserror (EREQPAR, "cc13 mb");
    2ed4:	16000012 			; <UNDEFINED> instruction: 0x16000012
	if (mbs == 0)
    2ed8:	000013ef 	andeq	r1, r0, pc, ror #7
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2edc:	730ec10f 	movwvc	ip, #57615	; 0xe10f
		syserror (EREQPAR, "cc13 mb");
    2ee0:	00000000 	andeq	r0, r0, r0
    2ee4:	00135e54 	andseq	r5, r3, r4, asr lr
	i = 0;
    2ee8:	01900f00 	orrseq	r0, r0, r0, lsl #30
	rbuffl = (byte) mbs;
    2eec:	5d540301 	ldclpl	3, cr0, [r4, #-4]
		db->config.type = 0;	// General (data in structure)
    2ef0:	0f00000f 	svceq	0x0000000f
	rbuffl = (byte) mbs;
    2ef4:	0301017b 	movweq	r0, #4475	; 0x117b
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2ef8:	0011cb52 	andseq	ip, r1, r2, asr fp
    2efc:	03660a00 	cmneq	r6, #0, 20
		if (db == NULL)
    2f00:	51030101 	tstpl	r3, r1, lsl #2
			syserror (EMALLOC, "cc13");
    2f04:	53000012 	movwpl	r0, #18
    2f08:	000011a2 	andeq	r1, r0, r2, lsr #3
    2f0c:	1f03660a 	svcne	0x0003660a
		db->status = DATA_ENTRY_PENDING;
    2f10:	00000073 	andeq	r0, r0, r3, ror r0
		if (i)
    2f14:	13365600 	teqne	r6, #0, 12
			da->pNextEntry = (byte*) db;
    2f18:	4c020000 	stcmi	0, cr0, [r2], {-0}
		db->length = rbuffl + 2;
    2f1c:	03010101 	movweq	r0, #4353	; 0x1101
    2f20:	0012c754 	andseq	ip, r2, r4, asr r7
		db->config.type = 0;	// General (data in structure)
    2f24:	01c40200 	biceq	r0, r4, r0, lsl #4
		db->length = rbuffl + 2;
    2f28:	a3570301 	cmpge	r7, #67108864	; 0x4000000
	db->pNextEntry = (byte*) re;
    2f2c:	02000010 	andeq	r0, r0, #16
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f30:	730101ad 	movwvc	r0, #4525	; 0x11ad
    2f34:	03000000 	movweq	r0, #0
	if (rbuffs == NULL)
    2f38:	000ff656 	andeq	pc, pc, r6, asr r6	; <UNPREDICTABLE>
	rbuffs->pCurrEntry = (byte*) re;
    2f3c:	02450e00 	subeq	r0, r5, #0, 28
	rbuffs->pLastEntry = NULL;
    2f40:	58030101 	stmdapl	r3, {r0, r8}
    2f44:	00000fc8 	andeq	r0, r0, r8, asr #31
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f48:	01022c0e 	tsteq	r2, lr, lsl #24
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2f4c:	00007301 	andeq	r7, r0, r1, lsl #6
    2f50:	b3520300 	cmplt	r2, #0, 6
    2f54:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
	rbuffl -= 2;
    2f58:	010101dc 	ldrdeq	r0, [r1, -ip]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f5c:	0012ab03 	andseq	sl, r2, r3, lsl #22
	rbuffl -= 2;
    2f60:	0f6d5300 	svceq	0x006d5300
	physid = phy;
    2f64:	dc0e0000 	stcle	0, cr0, [lr], {-0}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f68:	00731f01 	rsbseq	r1, r3, r1, lsl #30
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f6c:	56000000 	strpl	r0, [r0], -r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f70:	00001132 	andeq	r1, r0, r2, lsr r1
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f74:	01010f0b 	tsteq	r1, fp, lsl #30
    2f78:	6f540301 	svcvs	0x00540301
	utimer_add (&bckf_timer);
    2f7c:	0c000010 	stceq	0, cr0, [r0], {16}
	drvprcs = runthread (cc1350_driver);
    2f80:	030101ed 	movweq	r0, #4589	; 0x11ed
    2f84:	00137b54 	andseq	r7, r3, r4, asr fp
    2f88:	01d60c00 	bicseq	r0, r6, r0, lsl #24
	if (drvprcs == 0)
    2f8c:	44520301 	ldrbmi	r0, [r2], #-769	; 0xfffffcff
		syserror (ERESOURCE, "cc13");
    2f90:	06000010 			; <UNDEFINED> instruction: 0x06000010
    2f94:	01010440 	tsteq	r1, r0, asr #8
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f98:	0012e703 	andseq	lr, r2, r3, lsl #14
    2f9c:	11af5300 			; <UNDEFINED> instruction: 0x11af5300
    2fa0:	40060000 	andmi	r0, r6, r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fa4:	00732404 	rsbseq	r2, r3, r4, lsl #8
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2fa8:	52000000 	andpl	r0, r0, #0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fac:	00000fdd 	ldrdeq	r0, [r0], -sp
    2fb0:	01039106 	tsteq	r3, r6, lsl #2
    2fb4:	13110301 	tstne	r1, #67108864	; 0x4000000
    2fb8:	af530000 	svcge	0x00530000
    2fbc:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2fc0:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    2fc4:	53000000 	movwpl	r0, #0
    2fc8:	00001109 	andeq	r1, r0, r9, lsl #2
    2fcc:	2a039106 	bcs	e73ec <__ccfg+0xc7444>
	plugch ();
    2fd0:	00000073 	andeq	r0, r0, r3, ror r0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd4:	14025200 	strne	r5, [r2], #-512	; 0xfffffe00
    2fd8:	0c060000 	stceq	0, cr0, [r6], {-0}
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fdc:	03010103 	movweq	r0, #4355	; 0x1103
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2fe0:	0000133b 	andeq	r1, r0, fp, lsr r3
    2fe4:	0011af53 	andseq	sl, r1, r3, asr pc
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2fe8:	030c0600 	movweq	r0, #50688	; 0xc600
}
    2fec:	00007318 	andeq	r7, r0, r8, lsl r3
    2ff0:	11095300 	mrsne	r5, (UNDEF: 57)
    2ff4:	0c060000 	stceq	0, cr0, [r6], {-0}
    2ff8:	00732b03 	rsbseq	r2, r3, r3, lsl #22
    2ffc:	52000000 	andpl	r0, r0, #0
    3000:	000010fa 	strdeq	r1, [r0], -sl
    3004:	0101e706 	tsteq	r1, r6, lsl #14
    3008:	13580301 	cmpne	r8, #67108864	; 0x4000000
    300c:	af530000 	svcge	0x00530000
    3010:	06000011 			; <UNDEFINED> instruction: 0x06000011
    3014:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    3018:	00000000 	andeq	r0, r0, r0
    301c:	00123d52 	andseq	r3, r2, r2, asr sp
    3020:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    3024:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
    3028:	53000013 	movwpl	r0, #19
    302c:	000011af 	andeq	r1, r0, pc, lsr #3
    3030:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
    3034:	00000073 	andeq	r0, r0, r3, ror r0
    3038:	13255200 			; <UNDEFINED> instruction: 0x13255200
    303c:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    3040:	03010101 	movweq	r0, #4353	; 0x1101
    3044:	000013ac 	andeq	r1, r0, ip, lsr #7
    3048:	0011af53 	andseq	sl, r1, r3, asr pc
    304c:	01390600 	teqeq	r9, r0, lsl #12
    3050:	0000731b 	andeq	r7, r0, fp, lsl r3
    3054:	10975300 	addsne	r5, r7, r0, lsl #6
    3058:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    305c:	00732e01 	rsbseq	r2, r3, r1, lsl #28
    3060:	83530000 	cmphi	r3, #0
    3064:	06000010 			; <UNDEFINED> instruction: 0x06000010
    3068:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
    306c:	00000000 	andeq	r0, r0, r0
    3070:	00124852 	andseq	r4, r2, r2, asr r8
    3074:	02840400 	addeq	r0, r4, #0, 8
    3078:	c9030101 	stmdbgt	r3, {r0, r8}
    307c:	53000013 	movwpl	r0, #19
    3080:	00001116 	andeq	r1, r0, r6, lsl r1
    3084:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
    3088:	00000073 	andeq	r0, r0, r3, ror r0
    308c:	0f455200 	svceq	0x00455200
    3090:	06040000 	streq	r0, [r4], -r0
    3094:	03010102 	movweq	r0, #4354	; 0x1102
    3098:	000013f3 	strdeq	r1, [r0], -r3
    309c:	00111653 	andseq	r1, r1, r3, asr r6
    30a0:	02060400 	andeq	r0, r6, #0, 8
    30a4:	00007323 	andeq	r7, r0, r3, lsr #6
    30a8:	14255300 	strtne	r5, [r5], #-768	; 0xfffffd00
    30ac:	06040000 	streq	r0, [r4], -r0
    30b0:	00733702 	rsbseq	r3, r3, r2, lsl #14
    30b4:	52000000 	andpl	r0, r0, #0
    30b8:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    30bc:	01015404 	tsteq	r1, r4, lsl #8
    30c0:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
    30c4:	16530000 	ldrbne	r0, [r3], -r0
    30c8:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    30cc:	73190154 	tstvc	r9, #84, 2
    30d0:	00000000 	andeq	r0, r0, r0
    30d4:	0013c652 	andseq	ip, r3, r2, asr r6
strand (__outserial, const char*)
    30d8:	011e0400 	tsteq	lr, r0, lsl #8
    30dc:	2d030101 	stfcss	f0, [r3, #-4]
    30e0:	53000014 	movwpl	r0, #20
    30e4:	00001116 	andeq	r1, r0, r6, lsl r1
endstrand
    30e8:	17011e04 	strne	r1, [r1, -r4, lsl #28]
    30ec:	00000073 	andeq	r0, r0, r3, ror r0
	ptr = data;
    30f0:	114b5600 	cmpne	fp, r0, lsl #12
    30f4:	63090000 	movwvs	r0, #36864	; 0x9000
	if (*ptr)
    30f8:	03010104 	movweq	r0, #4356	; 0x1104
		len = strlen (ptr);
    30fc:	0010b356 	andseq	fp, r0, r6, asr r3
    3100:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3104:	56030101 	strpl	r0, [r3], -r1, lsl #2
    3108:	000010cc 	andeq	r1, r0, ip, asr #1
    310c:	01022a09 	tsteq	r2, r9, lsl #20
    3110:	10520301 	subsne	r0, r2, r1, lsl #6
    3114:	09000014 	stmdbeq	r0, {r2, r4}
	len -= quant;
    3118:	01010168 	tsteq	r1, r8, ror #2
    311c:	00146b03 	andseq	r6, r4, r3, lsl #22
    3120:	10d85300 	sbcsne	r5, r8, r0, lsl #6
	if (len == 0) {
    3124:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
		ufree (data);
    3128:	00731f01 	rsbseq	r1, r3, r1, lsl #30
		finish;
    312c:	56000000 	strpl	r0, [r0], -r0
    3130:	00001012 	andeq	r1, r0, r2, lsl r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3134:	01013209 	tsteq	r1, r9, lsl #4
    3138:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
    313c:	0000000d 	andeq	r0, r0, sp
    3140:	00000000 	andeq	r0, r0, r0
    3144:	01000000 	mrseq	r0, (UNDEF: 0)
strand (__inserial, address)
    3148:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
    314c:	07e80000 	strbeq	r0, [r8, r0]!
    3150:	00000000 	andeq	r0, r0, r0
    3154:	0000121f 	andeq	r1, r0, pc, lsl r2
    3158:	0a030003 	beq	c316c <__ccfg+0xa31c4>
	if (__inpline != NULL)
    315c:	01040000 	mrseq	r0, (UNDEF: 4)
    3160:	000000a3 	andeq	r0, r0, r3, lsr #1
		finish;
    3164:	0015b00c 	andseq	fp, r5, ip
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3168:	000dff00 	andeq	pc, sp, r0, lsl #30
    316c:	0007d000 	andeq	sp, r7, r0
    3170:	00000000 	andeq	r0, r0, r0
    3174:	00227200 	eoreq	r7, r2, r0, lsl #4
		umwait (IM_INIT);
    3178:	06010200 	streq	r0, [r1], -r0, lsl #4
		release;
    317c:	00000c60 	andeq	r0, r0, r0, ror #24
	savedata (data);
    3180:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
	len = MAX_LINE_LENGTH;
    3184:	0300000a 	movweq	r0, #10
	io (IM_READ, __cport, READ, ptr, 1);
    3188:	00002b96 	muleq	r0, r6, fp
    318c:	3f182803 	svccc	0x00182803
    3190:	02000000 	andeq	r0, r0, #0
    3194:	08000504 	stmdaeq	r0, {r2, r8, sl}
	if (ptr == (char*) data) { // new line
    3198:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    319c:	0007fb05 	andeq	pc, r7, r5, lsl #22
		if (*ptr == '\0') { // bin cmd
    31a0:	2a110300 	bcs	443da8 <__ccfg+0x423e00>
			proceed (IM_BIN);
    31a4:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    31a8:	00005918 	andeq	r5, r0, r8, lsl r9
		if (*ptr < 0x20)
    31ac:	08010200 	stmdaeq	r1, {r9}
    31b0:	00000c5e 	andeq	r0, r0, lr, asr ip
			proceed (IM_READ);
    31b4:	002e0703 	eoreq	r0, lr, r3, lsl #14
    31b8:	19310300 	ldmdbne	r1!, {r8, r9}
	if (*ptr == '\n' || *ptr == '\r') {
    31bc:	0000006c 	andeq	r0, r0, ip, rrx
    31c0:	5b070202 	blpl	1c39d0 <__ccfg+0x1a3a28>
    31c4:	0300000d 	movweq	r0, #13
		*ptr = '\0';
    31c8:	000029a9 	andeq	r2, r0, r9, lsr #19
		__inpline = (char*)data;
    31cc:	7f193403 	svcvc	0x00193403
		finish;
    31d0:	02000000 	andeq	r0, r0, #0
	if (len) {
    31d4:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
		ptr++;
    31d8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    31dc:	00042307 	andeq	r2, r4, r7, lsl #6
		len--;
    31e0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
	proceed (IM_READ);
    31e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
	io (IM_BIN, __cport, READ, ptr, 1);
    31e8:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    31ec:	03000004 	movweq	r0, #4
    31f0:	00000519 	andeq	r0, r0, r9, lsl r5
    31f4:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    31f8:	05000000 	streq	r0, [r0, #-0]
	len -= 2;
    31fc:	00000b93 	muleq	r0, r3, fp
	if (len > *ptr + 1) // 1 for 0x04
    3200:	bf000b04 	svclt	0x00000b04
    3204:	06000000 	streq	r0, [r0], -r0
		len = *ptr + 1;
    3208:	00000870 	andeq	r0, r0, r0, ror r8
    320c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
	ptr++;
    3210:	07000100 	streq	r0, [r0, -r0, lsl #2]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3214:	0b950304 	bleq	fe543e2c <_estack+0xde53ee2c>
    3218:	63040000 	movwvs	r0, #16384	; 0x4000
    321c:	00009b18 	andeq	r9, r0, r8, lsl fp
    3220:	131d0300 	tstne	sp, #0, 6
    3224:	26050000 	strcs	r0, [r5], -r0
    3228:	00004d12 	andeq	r4, r0, r2, lsl sp
	len -= quant;
    322c:	28f00300 	ldmcs	r0!, {r8, r9}^
		__inpline = (char*)data;
    3230:	27050000 	strcs	r0, [r5, -r0]
		finish;
    3234:	00006012 	andeq	r6, r0, r2, lsl r0
	ptr += quant;
    3238:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    323c:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
endstrand
    3240:	03000000 	movweq	r0, #0
    3244:	000013c1 	andeq	r1, r0, r1, asr #7
	proceed (IM_BINL);
    3248:	33122805 	tstcc	r2, #327680	; 0x50000
endstrand
    324c:	03000000 	movweq	r0, #0
    3250:	00001db7 			; <UNDEFINED> instruction: 0x00001db7
    3254:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
    3258:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    325c:	000000fb 	strdeq	r0, [r0], -fp
    3260:	00294203 	eoreq	r4, r9, r3, lsl #4
		if (res && (d < n))
    3264:	122c0500 	eorne	r0, ip, #0, 10
    3268:	00000073 	andeq	r0, r0, r3, ror r0
    326c:	00010c08 	andeq	r0, r1, r8, lsl #24
    3270:	06490300 	strbeq	r0, [r9], -r0, lsl #6
			res [d] = (char) c;
    3274:	2d050000 	stccs	0, cr0, [r5, #-0]
		d++;
    3278:	00007312 	andeq	r7, r0, r2, lsl r3
    327c:	0bb70300 	bleq	fedc3e84 <_estack+0xdedbee84>
    3280:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3284:	00013510 	andeq	r3, r1, r0, lsl r5
    3288:	d9040a00 	stmdble	r4, {r9, fp}
    328c:	0b000000 	bleq	3294 <__pi_vfparse+0x10>
				enci (10000);
    3290:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3294:	000001c9 	andeq	r0, r0, r9, asr #3
    3298:	00002b0c 	andeq	r2, r0, ip, lsl #22
	d = 0;
    329c:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
		c = *fm++;
    32a0:	000000fb 	strdeq	r0, [r0], -fp
		if (c == '\\') {
    32a4:	00070101 	andeq	r0, r7, r1, lsl #2
			if ((c = *fm++) == '\0') {
    32a8:	00064f0c 	andeq	r4, r6, ip, lsl #30
    32ac:	03350500 	teqeq	r5, #0, 10
				outc ('\\');
    32b0:	000000fb 	strdeq	r0, [r0], -fp
			if ((c = *fm++) == '\0') {
    32b4:	00060101 	andeq	r0, r6, r1, lsl #2
				outc ('\\');
    32b8:	0002de0c 	andeq	sp, r2, ip, lsl #28
    32bc:	03360500 	teqeq	r6, #0, 10
			outc (c);
    32c0:	000000fb 	strdeq	r0, [r0], -fp
    32c4:	00050101 	andeq	r0, r5, r1, lsl #2
			if (c == '\0')
    32c8:	0006ba0c 	andeq	fp, r6, ip, lsl #20
    32cc:	03370500 	teqeq	r7, #0, 10
			outc (c);
    32d0:	000000fb 	strdeq	r0, [r0], -fp
				outc (val);
    32d4:	00040101 	andeq	r0, r4, r1, lsl #2
				val = (word) va_arg (ap, aword);
    32d8:	000aa20c 	andeq	sl, sl, ip, lsl #4
		if (c == '%') {
    32dc:	03380500 	teqeq	r8, #0, 10
    32e0:	000000fb 	strdeq	r0, [r0], -fp
			c = *fm++;
    32e4:	00000401 	andeq	r0, r0, r1, lsl #8
			switch (c) {
    32e8:	00065e0d 	andeq	r5, r6, sp, lsl #28
    32ec:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    32f0:	000000fb 	strdeq	r0, [r0], -fp
    32f4:	08fe0d01 	ldmeq	lr!, {r0, r8, sl, fp}^
    32f8:	3c050000 	stccc	0, cr0, [r5], {-0}
    32fc:	0000fb03 	andeq	pc, r0, r3, lsl #22
    3300:	2f0d0200 	svccs	0x000d0200
    3304:	0500000f 	streq	r0, [r0, #-15]
				outc ('%');
    3308:	00fb033d 	rscseq	r0, fp, sp, lsr r3
    330c:	0d030000 	stceq	0, cr0, [r3, #-0]
				outc (c);
    3310:	00000916 	andeq	r0, r0, r6, lsl r9
    3314:	0c083f05 	stceq	15, cr3, [r8], {5}
    3318:	04000001 	streq	r0, [r0], #-1
				if (c == '\0')
    331c:	03140300 	tsteq	r4, #0, 6
				return d;
    3320:	41050000 	mrsmi	r0, (UNDEF: 5)
}
    3324:	00013b03 	andeq	r3, r1, r3, lsl #22
    3328:	01c90900 	biceq	r0, r9, r0, lsl #18
			switch (c) {
    332c:	c10e0000 	mrsgt	r0, (UNDEF: 14)
    3330:	05000006 	streq	r0, [r0, #-6]
    3334:	01d51a43 	bicseq	r1, r5, r3, asr #20
				for (i = 12; ; i -= 4) {
    3338:	01010000 	mrseq	r0, (UNDEF: 1)
				val = (word) va_arg (ap, aword);
    333c:	0001970e 	andeq	r9, r1, lr, lsl #14
						[ (val >> i) & 0xf ]);
    3340:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    3344:	000001f6 	strdeq	r0, [r0], -r6
    3348:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
					outc (__pi_hex_enc_table
    334c:	000001fc 	strdeq	r0, [r0], -ip
    3350:	67080102 	strvs	r0, [r8, -r2, lsl #2]
					if (i == 0)
    3354:	0800000c 	stmdaeq	r0, {r2, r3}
    3358:	000001fc 	strdeq	r0, [r0], -ip
				for (i = 12; ; i -= 4) {
    335c:	00031d0e 	andeq	r1, r3, lr, lsl #26
				val = (word) va_arg (ap, aword);
    3360:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
				if (c == 'd' && (val & 0x8000) != 0) {
    3364:	000001f6 	strdeq	r0, [r0], -r6
				val = (word) va_arg (ap, aword);
    3368:	080b0101 	stmdaeq	fp, {r0, r8}
				if (c == 'd' && (val & 0x8000) != 0) {
    336c:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
    3370:	0d000002 	stceq	0, cr0, [r0, #-8]
					outc ('-');
    3374:	00000ccd 	andeq	r0, r0, sp, asr #25
    3378:	730b9006 	movwvc	r9, #45062	; 0xb006
					val = (~val) + 1;
    337c:	00000000 	andeq	r0, r0, r0
    3380:	00106a0d 	andseq	r6, r0, sp, lsl #20
				for (i = 12; ; i -= 4) {
    3384:	08910600 	ldmeq	r1, {r9, sl}
				enci (10000);
    3388:	000000d9 	ldrdeq	r0, [r0], -r9
    338c:	01bc0d04 			; <UNDEFINED> instruction: 0x01bc0d04
    3390:	92060000 	andls	r0, r6, #0
    3394:	00010710 	andeq	r0, r1, r0, lsl r7
    3398:	03000600 	movweq	r0, #1536	; 0x600
    339c:	00000cc1 	andeq	r0, r0, r1, asr #25
    33a0:	16039306 	strne	r9, [r3], -r6, lsl #6
    33a4:	0f000002 	svceq	0x00000002
    33a8:	00000247 	andeq	r0, r0, r7, asr #4
    33ac:	0000025e 	andeq	r0, r0, lr, asr r2
    33b0:	400e0010 	andmi	r0, lr, r0, lsl r0
    33b4:	06000009 	streq	r0, [r0], -r9
    33b8:	02530f99 	subseq	r0, r3, #612	; 0x264
    33bc:	01010000 	mrseq	r0, (UNDEF: 1)
    33c0:	9107010b 	tstls	r7, fp, lsl #2
    33c4:	00029609 	andeq	r9, r2, r9, lsl #12
    33c8:	091d0c00 	ldmdbeq	sp, {sl, fp}
    33cc:	93070000 	movwls	r0, #28672	; 0x7000
				if (c == 'd' || c == 'u') {
    33d0:	0000fb07 	andeq	pc, r0, r7, lsl #22
    33d4:	01070100 	mrseq	r0, (UNDEF: 23)
					if (c == 'd' &&
    33d8:	05cf0c00 	strbeq	r0, [pc, #3072]	; 3fe0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x6c>
					val = va_arg (ap, lword);
    33dc:	94070000 	strls	r0, [r7], #-0
					fm++;
    33e0:	0000fb03 	andeq	pc, r0, r3, lsl #22
					if (c == 'd' &&
    33e4:	00010100 	andeq	r0, r1, r0, lsl #2
    33e8:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
						outc ('-');
    33ec:	0700000a 	streq	r0, [r0, -sl]
    33f0:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
						val = (~val) + 1;
    33f4:	96080000 	strls	r0, [r8], -r0
				enci (10000);
    33f8:	0f000002 	svceq	0x00000002
					enci (1000000000UL);
    33fc:	000002a2 	andeq	r0, r0, r2, lsr #5
    3400:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    3404:	a7080010 	smladge	r8, r0, r0, r0
    3408:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    340c:	000003ac 	andeq	r0, r0, ip, lsr #7
    3410:	b2179c07 	andslt	r9, r7, #1792	; 0x700
    3414:	01000002 	tsteq	r0, r2
    3418:	00e50f01 	rsceq	r0, r5, r1, lsl #30
    341c:	02d00000 	sbcseq	r0, r0, #0
    3420:	00100000 	andseq	r0, r0, r0
    3424:	0002c508 	andeq	ip, r2, r8, lsl #10
    3428:	06110e00 	ldreq	r0, [r1], -r0, lsl #28
    342c:	06080000 	streq	r0, [r8], -r0
    3430:	0002d013 	andeq	sp, r2, r3, lsl r0
    3434:	0e010100 	adfeqs	f0, f1, f0
    3438:	000008e0 	andeq	r0, r0, r0, ror #17
    343c:	0c0ec306 	stceq	3, cr12, [lr], {6}
				} else if (c == 'x') {
    3440:	01000001 	tsteq	r0, r1
					for (i = 28; ; i -= 4) {
    3444:	0c751101 	ldfeqe	f1, [r5], #-4
					val = va_arg (ap, lword);
    3448:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
							[ (val >> i) & 0xf ]);
    344c:	02fe1001 	rscseq	r1, lr, #1
    3450:	040a0000 	streq	r0, [sl], #-0
						outc (__pi_hex_enc_table
    3454:	00000304 	andeq	r0, r0, r4, lsl #6
    3458:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    345c:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
						if (i == 0)
    3460:	00000000 	andeq	r0, r0, r0
    3464:	0002030f 	andeq	r0, r2, pc, lsl #6
					for (i = 28; ; i -= 4) {
    3468:	00031b00 	andeq	r1, r3, r0, lsl #22
					outc ('%');
    346c:	08001000 	stmdaeq	r0, {ip}
    3470:	00000310 	andeq	r0, r0, r0, lsl r3
    3474:	0009e914 	andeq	lr, r9, r4, lsl r9
					outc ('l');
    3478:	017f0900 	cmneq	pc, r0, lsl #18
    347c:	00031b16 	andeq	r1, r3, r6, lsl fp
				val = (word) va_arg (ap, aword);
    3480:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
				outc (val);
    3484:	00000398 	muleq	r0, r8, r3
    3488:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
				while (*st != '\0') {
    348c:	00000118 	andeq	r0, r0, r8, lsl r1
    3490:	70140101 	andsvc	r0, r4, r1, lsl #2
    3494:	09000003 	stmdbeq	r0, {r0, r1}
    3498:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
					outc (*st);
    349c:	01000001 	tsteq	r0, r1
    34a0:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
					st++;
    34a4:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
		c = *fm++;
    34a8:	16000003 	strne	r0, [r0], -r3
    34ac:	00003c91 	muleq	r0, r1, ip
    34b0:	07030709 	streq	r0, [r3, -r9, lsl #14]
char *vform (char *res, const char *fm, va_list aq) {
    34b4:	000000d9 	ldrdeq	r0, [r0], -r9
    34b8:	0fc21600 	svceq	0x00c21600
	if (res != NULL) {
    34bc:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    34c0:	011d0803 	tsteq	sp, r3, lsl #16
    34c4:	00040000 	andeq	r0, r4, r0
    34c8:	000a0c11 	andeq	r0, sl, r1, lsl ip
}
    34cc:	03090900 	movweq	r0, #39168	; 0x9900
    34d0:	00034d03 	andeq	r4, r3, r3, lsl #26
	fml = strlen (fm) + 17;
    34d4:	00201700 	eoreq	r1, r0, r0, lsl #14
    34d8:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    34dc:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
	if ((res = (char*) umalloc (fml)) == NULL)
    34e0:	16000003 	strne	r0, [r0], -r3
    34e4:	00001f19 	andeq	r1, r0, r9, lsl pc
    34e8:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    34ec:	000000d9 	ldrdeq	r0, [r0], -r9
    34f0:	0bea1600 	bleq	ffa88cf8 <_estack+0xdfa83cf8>
    34f4:	15090000 	strne	r0, [r9, #-0]
    34f8:	00d90803 	sbcseq	r0, r9, r3, lsl #16
		ufree (res);
    34fc:	16020000 	strne	r0, [r2], -r0
		goto Again;
    3500:	00004c7e 	andeq	r4, r0, lr, ror ip
	if (buf == NULL || fmt == NULL)
    3504:	0b031609 	bleq	c8d30 <__ccfg+0xa8d88>
int vscan (const char *buf, const char *fmt, va_list ap) {
    3508:	000002f1 	strdeq	r0, [r0], -r1
	if (buf == NULL || fmt == NULL)
    350c:	47441604 	strbmi	r1, [r4, -r4, lsl #12]
    3510:	17090000 	strne	r0, [r9, -r0]
    3514:	011d0903 	tsteq	sp, r3, lsl #18
		    	    case 'u': scanu (lword); break;
    3518:	16080000 	strne	r0, [r8], -r0
			while (isspace (*buf)) buf++;
    351c:	0000000f 	andeq	r0, r0, pc
    3520:	0f031809 	svceq	0x00031809
	while (*fmt != '\0') {
    3524:	000003e4 	andeq	r0, r0, r4, ror #7
		if (*fmt++ != '%')
    3528:	0960160c 	stmdbeq	r0!, {r2, r3, r9, sl, ip}^
		switch (*fmt++) {
    352c:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    3530:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
    3534:	002c0000 	eoreq	r0, ip, r0
    3538:	0003740f 	andeq	r7, r3, pc, lsl #8
    353c:	0003f400 	andeq	pc, r3, r0, lsl #8
    3540:	00941800 	addseq	r1, r4, r0, lsl #16
    3544:	00030000 	andeq	r0, r3, r0
}
    3548:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
		switch (*fmt++) {
    354c:	df110000 	svcle	0x00110000
    3550:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3554:	811b031c 	tsthi	fp, ip, lsl r3
    3558:	14000003 	strne	r0, [r0], #-3
			while (isspace (*buf)) buf++;
    355c:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    3560:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    3564:	00000416 	andeq	r0, r0, r6, lsl r4
    3568:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    356c:	000003fa 	strdeq	r0, [r0], -sl
    3570:	0007120e 	andeq	r1, r7, lr, lsl #4
			if (*buf == '\0')
    3574:	131d0a00 	tstne	sp, #0, 20
			if (*buf != ',') {
    3578:	000000d9 	ldrdeq	r0, [r0], -r9
			sap = va_arg (ap, char*);
    357c:	e50e0101 	str	r0, [lr, #-257]	; 0xfffffeff
			nc++;
    3580:	0a000002 	beq	3590 <vscan+0x8c>
			if (*buf != ',') {
    3584:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
				while (!isspace (*buf) && *buf != ',' &&
    3588:	01010000 	mrseq	r0, (UNDEF: 1)
    358c:	000c6c0e 	andeq	r6, ip, lr, lsl #24
    3590:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    3594:	000000ea 	andeq	r0, r0, sl, ror #1
    3598:	8a0e0101 	bhi	3839a4 <__ccfg+0x3639fc>
    359c:	0a00000c 	beq	35d4 <vscan+0xd0>
    35a0:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
			while (isspace (*buf)) buf++;
    35a4:	01010000 	mrseq	r0, (UNDEF: 1)
    35a8:	00149803 	andseq	r9, r4, r3, lsl #16
    35ac:	0f440a00 	svceq	0x00440a00
    35b0:	00000460 	andeq	r0, r0, r0, ror #8
    35b4:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
			if (*buf == ',') buf++;
    35b8:	01190000 	tsteq	r9, r0
    35bc:	0000008d 	andeq	r0, r0, sp, lsl #1
			*sap = '\0';
    35c0:	00000480 	andeq	r0, r0, r0, lsl #9
			break;
    35c4:	00008d13 	andeq	r8, r0, r3, lsl sp
		    case 'd': scani (word); break;
    35c8:	01f61300 	mvnseq	r1, r0, lsl #6
    35cc:	8d130000 	ldchi	0, cr0, [r3, #-0]
    35d0:	00000000 	andeq	r0, r0, r0
    35d4:	00033e1a 	andeq	r3, r3, sl, lsl lr
    35d8:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    35dc:	06b00305 	ldrteq	r0, [r0], r5, lsl #6
    35e0:	3c1b2000 	ldccc	0, cr2, [fp], {-0}
    35e4:	01000016 	tsteq	r0, r6, lsl r0
    35e8:	010c0710 	tsteq	ip, r0, lsl r7
    35ec:	05010000 	streq	r0, [r1, #-0]
    35f0:	00000403 	andeq	r0, r0, r3, lsl #8
    35f4:	04461a20 	strbeq	r1, [r6], #-2592	; 0xfffff5e0
    35f8:	1a010000 	bne	43600 <__ccfg+0x23658>
    35fc:	8803050d 	stmdahi	r3, {r0, r2, r3, r8, sl}
    3600:	0f200005 	svceq	0x00200005
    3604:	00000454 	andeq	r0, r0, r4, asr r4
    3608:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    360c:	00009418 	andeq	r9, r0, r8, lsl r4
    3610:	1c000000 	stcne	0, cr0, [r0], {-0}
    3614:	000014d0 	ldrdeq	r1, [r0], -r0
    3618:	af141e01 	svcge	0x00141e01
    361c:	05000004 	streq	r0, [r0, #-4]
    3620:	00058c03 	andeq	r8, r5, r3, lsl #24
    3624:	01da1a20 	bicseq	r1, sl, r0, lsr #20
    3628:	22010000 	andcs	r0, r1, #0
    362c:	b8030513 	stmdalt	r3, {r0, r1, r4, r8, sl}
    3630:	1a200006 	bne	803650 <__ccfg+0x7e36a8>
    3634:	00000407 	andeq	r0, r0, r7, lsl #8
		    case 'u': scanu (word); break;
    3638:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
    363c:	0006d403 	andeq	sp, r6, r3, lsl #8
    3640:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
    3644:	30010000 	andcc	r0, r1, r0
    3648:	b4030507 	strlt	r0, [r3], #-1287	; 0xfffffaf9
    364c:	1a200006 	bne	80366c <__ccfg+0x7e36c4>
    3650:	0000042a 	andeq	r0, r0, sl, lsr #8
    3654:	050f3101 	streq	r3, [pc, #-257]	; 355b <vscan+0x57>
    3658:	0006b603 	andeq	fp, r6, r3, lsl #12
    365c:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
    3660:	31010000 	mrscc	r0, (UNDEF: 1)
    3664:	c0030519 	andgt	r0, r3, r9, lsl r5
    3668:	0f200006 	svceq	0x00200006
    366c:	00000129 	andeq	r0, r0, r9, lsr #2
    3670:	00000527 	andeq	r0, r0, r7, lsr #10
    3674:	00009418 	andeq	r9, r0, r8, lsl r4
    3678:	1b000300 	blne	4280 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x9c>
    367c:	000013b6 			; <UNDEFINED> instruction: 0x000013b6
		    case 'x': scanx (word); break;
    3680:	170a3601 	strne	r3, [sl, -r1, lsl #12]
    3684:	01000005 	tsteq	r0, r5
    3688:	06c40305 	strbeq	r0, [r4], r5, lsl #6
    368c:	201a2000 	andscs	r2, sl, r0
    3690:	01000003 	tsteq	r0, r3
    3694:	03050c3f 	movweq	r0, #23615	; 0x5c3f
    3698:	0000502d 	andeq	r5, r0, sp, lsr #32
    369c:	00032f1a 	andeq	r2, r3, sl, lsl pc
    36a0:	0d450100 	stfeqe	f0, [r5, #-0]
    36a4:	00000305 	andeq	r0, r0, r5, lsl #6
    36a8:	020b0000 	andeq	r0, fp, #0
    36ac:	7a094901 	bvc	255ab8 <__ccfg+0x235b10>
    36b0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    36b4:	000014c4 	andeq	r1, r0, r4, asr #9
    36b8:	fb074a01 	blx	1d5ec6 <__ccfg+0x1b5f1e>
    36bc:	00000000 	andeq	r0, r0, r0
    36c0:	00167b0d 	andseq	r7, r6, sp, lsl #22
    36c4:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
    36c8:	000000fb 	strdeq	r0, [r0], -fp
    36cc:	8a030001 	bhi	c36d8 <__ccfg+0xa3730>
    36d0:	01000015 	tsteq	r0, r5, lsl r0
    36d4:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
    36d8:	7a0f0000 	bvc	3c36e0 <__ccfg+0x3a3738>
    36dc:	96000005 	strls	r0, [r0], -r5
    36e0:	18000005 	stmdane	r0, {r0, r2}
    36e4:	00000094 	muleq	r0, r4, r0
    36e8:	ea1c0000 	b	7036f0 <__ccfg+0x6e3748>
    36ec:	01000015 	tsteq	r0, r5, lsl r0
    36f0:	0586114e 	streq	r1, [r6, #334]	; 0x14e
    36f4:	03050000 	movweq	r0, #20480	; 0x5000
			switch (*fmt++) {
    36f8:	20000594 	mulcs	r0, r4, r5
    36fc:	0005b80f 	andeq	fp, r5, pc, lsl #16
    3700:	0005b800 	andeq	fp, r5, r0, lsl #16
    3704:	00941800 	addseq	r1, r4, r0, lsl #16
    3708:	00000000 	andeq	r0, r0, r0
    370c:	011d040a 	tsteq	sp, sl, lsl #8
		    	    case 'd': scani (lword); break;
    3710:	e51d0000 	ldr	r0, [sp, #-0]
    3714:	01000014 	tsteq	r0, r4, lsl r0
    3718:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
    371c:	05000005 	streq	r0, [r0, #-5]
    3720:	00059c03 	andeq	r9, r5, r3, lsl #24
    3724:	011d0f20 	tsteq	sp, r0, lsr #30
    3728:	05e10000 	strbeq	r0, [r1, #0]!
    372c:	94180000 	ldrls	r0, [r8], #-0
    3730:	00000000 	andeq	r0, r0, r0
    3734:	15451d00 	strbne	r1, [r5, #-3328]	; 0xfffff300
    3738:	c2010000 	andgt	r0, r1, #0
    373c:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
    3740:	03050000 	movweq	r0, #20480	; 0x5000
    3744:	20000598 	mulcs	r0, r8, r5
    3748:	0015931d 	andseq	r9, r5, sp, lsl r3
    374c:	02c20100 	sbceq	r0, r2, #0, 2
    3750:	0005d126 	andeq	sp, r5, r6, lsr #2
    3754:	90030500 	andls	r0, r3, r0, lsl #10
    3758:	1e200005 	cdpne	0, 2, cr0, cr0, cr5, {0}
    375c:	00161601 	andseq	r1, r6, r1, lsl #12
    3760:	052f0100 	streq	r0, [pc, #-256]!	; 3668 <vscan+0x164>
    3764:	010c0107 	tsteq	ip, r7, lsl #2
    3768:	1d840000 	stcne	0, cr0, [r4]
		    	    case 'x': scanx (lword); break;
    376c:	1da80000 	stcne	0, cr0, [r8]
    3770:	9c010000 	stcls	0, cr0, [r1], {-0}
    3774:	1579011f 	ldrbne	r0, [r9, #-287]!	; 0xfffffee1
    3778:	82010000 	andhi	r0, r1, #0
    377c:	48010604 	stmdami	r1, {r2, r9, sl}
    3780:	8400001c 	strhi	r0, [r0], #-28	; 0xffffffe4
    3784:	0100001d 	tsteq	r0, sp, lsl r0
    3788:	00070e9c 	muleq	r7, ip, lr
    378c:	15ab2000 	strne	r2, [fp, #0]!
    3790:	82010000 	andhi	r0, r1, #0
    3794:	070e1804 	streq	r1, [lr, -r4, lsl #16]
    3798:	07fb0000 	ldrbeq	r0, [fp, r0]!
    379c:	22210000 	eorcs	r0, r1, #0
    37a0:	006c6176 	rsbeq	r6, ip, r6, ror r1
    37a4:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    37a8:	0000010c 	andeq	r0, r0, ip, lsl #2
    37ac:	0000083b 	andeq	r0, r0, fp, lsr r8
    37b0:	00706123 	rsbseq	r6, r0, r3, lsr #2
    37b4:	0a048801 	beq	1257c0 <__ccfg+0x105818>
    37b8:	000000c1 	andeq	r0, r0, r1, asr #1
    37bc:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    37c0:	01006362 	tsteq	r0, r2, ror #6
    37c4:	ef070489 	svc	0x00070489
    37c8:	7a000000 	bvc	37d0 <vscan+0x2cc>
    37cc:	22000008 	andcs	r0, r0, #8
    37d0:	8a010076 	bhi	439b0 <__ccfg+0x23a08>
    37d4:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    37d8:	08ae0000 	stmiaeq	lr!, {}	; <UNPREDICTABLE>
		    	    case 'd': scani (lword); break;
    37dc:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    37e0:	8b010073 	blhi	439b4 <__ccfg+0x23a0c>
    37e4:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    37e8:	8b250000 	blhi	9437f0 <__ccfg+0x923848>
    37ec:	01000016 	tsteq	r0, r6, lsl r0
    37f0:	140104b0 	strne	r0, [r1], #-1200	; 0xfffffb50
    37f4:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
		    	    case 'u': scanu (lword); break;
    37f8:	00001cd4 	ldrdeq	r1, [r0], -r4
    37fc:	00001cf0 	strdeq	r1, [r0], -r0
    3800:	000006c0 	andeq	r0, r0, r0, asr #13
    3804:	01006922 	tsteq	r0, r2, lsr #18
    3808:	ef0a049f 	svc	0x000a049f
    380c:	d7000000 	strle	r0, [r0, -r0]
    3810:	00000008 	andeq	r0, r0, r8
    3814:	00078827 	andeq	r8, r7, r7, lsr #16
    3818:	0006d900 	andeq	sp, r6, r0, lsl #18
    381c:	00642200 	rsbeq	r2, r4, r0, lsl #4
    3820:	0b04a901 	bleq	12dc2c <__ccfg+0x10dc84>
    3824:	0000010c 	andeq	r0, r0, ip, lsl #2
    3828:	000008ea 	andeq	r0, r0, sl, ror #17
    382c:	1d602600 	stclne	6, cr2, [r0, #-0]
    3830:	1d6e0000 	stclne	0, cr0, [lr, #-0]
    3834:	06f60000 	ldrbteq	r0, [r6], r0
    3838:	73220000 			; <UNDEFINED> instruction: 0x73220000
    383c:	04c60100 	strbeq	r0, [r6], #256	; 0x100
		    	    case 'x': scanx (lword); break;
    3840:	0001f60b 	andeq	pc, r1, fp, lsl #12
    3844:	00091300 	andeq	r1, r9, r0, lsl #6
			if ((c = *buf++) == '\0')
    3848:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    384c:	76000010 			; <UNDEFINED> instruction: 0x76000010
			sap = va_arg (ap, char*);
    3850:	b800001c 	stmdalt	r0, {r2, r3, r4}
			nc++;
    3854:	01000007 	tsteq	r0, r7
			break;
    3858:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
			while (isspace (*buf)) buf++;
    385c:	000010d4 	ldrdeq	r1, [r0], -r4
    3860:	040a0000 	streq	r0, [sl], #-0
    3864:	00000203 	andeq	r0, r0, r3, lsl #4
						*sap++ = *buf++;
    3868:	0016602a 	andseq	r6, r6, sl, lsr #32
    386c:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
			while (isspace (*buf)) buf++;
    3870:	172c010d 	strne	r0, [ip, -sp, lsl #2]!
    3874:	17440000 	strbne	r0, [r4, -r0]
    3878:	9c010000 	stcls	0, cr0, [r1], {-0}
		return 0;
    387c:	00000753 	andeq	r0, r0, r3, asr r7
    3880:	0100632b 	tsteq	r0, fp, lsr #6
		    case 'x': scanx (word); break;
    3884:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
    3888:	26000000 	strcs	r0, [r0], -r0
		    	    case 'x': scanx (lword); break;
    388c:	28000009 	stmdacs	r0, {r0, r3}
    3890:	000010c1 	andeq	r1, r0, r1, asr #1
    3894:	0000172c 	andeq	r1, r0, ip, lsr #14
    3898:	00000730 	andeq	r0, r0, r0, lsr r7
    389c:	02044901 	andeq	r4, r4, #16384	; 0x4000
    38a0:	0010d429 	andseq	sp, r0, r9, lsr #8
    38a4:	2c000000 	stccs	0, cr0, [r0], {-0}
    38a8:	00152a01 	andseq	r2, r5, r1, lsl #20
    38ac:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    38b0:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    38bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    38c0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    38c4:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
    38c8:	1c042801 	stcne	8, cr2, [r4], {1}
    38cc:	00000129 	andeq	r0, r0, r9, lsr #2
    38d0:	00000939 	andeq	r0, r0, r9, lsr r9
    38d4:	0016282d 	andseq	r2, r6, sp, lsr #16
    38d8:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    38dc:	0005b809 	andeq	fp, r5, r9, lsl #16
    38e0:	00095700 	andeq	r5, r9, r0, lsl #14
    38e4:	616d2200 	cmnvs	sp, r0, lsl #4
    38e8:	32010078 	andcc	r0, r1, #120	; 0x78
    38ec:	011d0804 	tsteq	sp, r4, lsl #16
    38f0:	09750000 	ldmdbeq	r5!, {}^	; <UNPREDICTABLE>
    38f4:	402d0000 	eormi	r0, sp, r0
    38f8:	01000015 	tsteq	r0, r5, lsl r0
    38fc:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
    3900:	93000001 	movwls	r0, #1
    3904:	00000009 	andeq	r0, r0, r9
    3908:	161b012c 	ldrne	r0, [fp], -ip, lsr #2
    390c:	15010000 	strne	r0, [r1, #-0]
    3910:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    391c:	01000000 	mrseq	r0, (UNDEF: 0)
    3920:	0007e39c 	muleq	r7, ip, r3
    3924:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    3928:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    392c:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    3930:	09bc0000 	ldmibeq	ip!, {}	; <UNPREDICTABLE>
    3934:	1f000000 	svcne	0x00000000
    3938:	00160901 	andseq	r0, r6, r1, lsl #18
    393c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    3940:	1c300106 	ldfnes	f0, [r0], #-24	; 0xffffffe8
    3944:	1c480000 	marne	acc0, r0, r8
    3948:	9c010000 	stcls	0, cr0, [r1], {-0}
    394c:	0000080e 	andeq	r0, r0, lr, lsl #16
    3950:	00007020 	andeq	r7, r0, r0, lsr #32
    3954:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    3958:	0000d919 	andeq	sp, r0, r9, lsl r9
    395c:	0009cf00 	andeq	ip, r9, r0, lsl #30
    3960:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3964:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    3968:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
    396c:	0005b801 	andeq	fp, r5, r1, lsl #16
    3970:	001b5400 	andseq	r5, fp, r0, lsl #8
    3974:	001bfc00 	andseq	pc, fp, r0, lsl #24
    3978:	809c0100 	addshi	r0, ip, r0, lsl #2
    397c:	20000008 	andcs	r0, r0, r8
    3980:	00001d96 	muleq	r0, r6, sp
    3984:	1a03a301 	bne	ec590 <__ccfg+0xcc5e8>
    3988:	000000d9 	ldrdeq	r0, [r0], -r9
    398c:	000009e2 	andeq	r0, r0, r2, ror #19
    3990:	0016282d 	andseq	r2, r6, sp, lsr #16
    3994:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3998:	0005b809 	andeq	fp, r5, r9, lsl #16
    399c:	0009f500 	andeq	pc, r9, r0, lsl #10
    39a0:	63632200 	cmnvs	r3, #0, 4
    39a4:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    39a8:	0005b811 	andeq	fp, r5, r1, lsl r8
    39ac:	000a2900 	andeq	r2, sl, r0, lsl #18
    39b0:	159a2d00 	ldrne	r2, [sl, #3328]	; 0xd00
    39b4:	ab010000 	blge	439bc <__ccfg+0x23a14>
    39b8:	011d1503 	tsteq	sp, r3, lsl #10
    39bc:	0a520000 	beq	14839c4 <__ccfg+0x1463a1c>
    39c0:	952d0000 	strls	r0, [sp, #-0]!
    39c4:	0100001d 	tsteq	r0, sp, lsl r0
    39c8:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
    39cc:	65000001 	strvs	r0, [r0, #-1]
    39d0:	0000000a 	andeq	r0, r0, sl
    39d4:	1681012e 	strne	r0, [r1], lr, lsr #2
    39d8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    39dc:	01010603 	tsteq	r1, r3, lsl #12
    39e0:	0000089d 	muleq	r0, sp, r8
    39e4:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    39e8:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
    39ec:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    39f0:	14ca2a00 	strbne	r2, [sl], #2560	; 0xa00
    39f4:	4a010000 	bmi	439fc <__ccfg+0x23a54>
    39f8:	ac010d03 	stcge	13, cr0, [r1], {3}
    39fc:	2c000016 	stccs	0, cr0, [r0], {22}
    3a00:	01000017 	tsteq	r0, r7, lsl r0
    3a04:	0008e79c 	muleq	r8, ip, r7
    3a08:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    3a0c:	034a0100 	movteq	r0, #41216	; 0xa100
    3a10:	0005b81b 	andeq	fp, r5, fp, lsl r8
    3a14:	000a8f00 	andeq	r8, sl, r0, lsl #30
    3a18:	16282d00 	strtne	r2, [r8], -r0, lsl #26
    3a1c:	57010000 	strpl	r0, [r1, -r0]
    3a20:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    3a24:	0aad0000 	beq	feb43a2c <_estack+0xdeb3ea2c>
    3a28:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3a2c:	57010063 	strpl	r0, [r1, -r3, rrx]
    3a30:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    3a34:	0aee0000 	beq	ffb83a3c <_estack+0xdfb7ea3c>
    3a38:	30000000 	andcc	r0, r0, r0
    3a3c:	00150001 	andseq	r0, r5, r1
    3a40:	02f00100 	rscseq	r0, r0, #0, 2
    3a44:	001a6c06 	andseq	r6, sl, r6, lsl #24
    3a48:	001abc00 	andseq	fp, sl, r0, lsl #24
    3a4c:	119c0100 	orrsne	r0, ip, r0, lsl #2
    3a50:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    3a54:	00001554 	andeq	r1, r0, r4, asr r5
    3a58:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
    3a5c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3a60:	00000b22 	andeq	r0, r0, r2, lsr #22
    3a64:	69013100 	stmdbvs	r1, {r8, ip, sp}
    3a68:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
    3a6c:	ef010602 	svc	0x00010602
    3a70:	d0000000 	andle	r0, r0, r0
    3a74:	6c000019 	stcvs	0, cr0, [r0], {25}
    3a78:	0100001a 	tsteq	r0, sl, lsl r0
    3a7c:	0009949c 	muleq	r9, ip, r4
    3a80:	15a02000 	strne	r2, [r0, #0]!
    3a84:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3a88:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    3a8c:	0b400000 	bleq	1003a94 <__ccfg+0xfe3aec>
    3a90:	642b0000 	strtvs	r0, [fp], #-0
    3a94:	01007665 	tsteq	r0, r5, ror #12
    3a98:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    3a9c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    3aa0:	2000000b 	andcs	r0, r0, fp
    3aa4:	00001172 	andeq	r1, r0, r2, ror r1
    3aa8:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    3aac:	000000d9 	ldrdeq	r0, [r0], -r9
    3ab0:	00000b7c 	andeq	r0, r0, ip, ror fp
    3ab4:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
    3ab8:	02790100 	rsbseq	r0, r9, #0, 2
    3abc:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
    3ac0:	000b9a00 	andeq	r9, fp, r0, lsl #20
    3ac4:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
    3ac8:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
    3acc:	00d94002 	sbcseq	r4, r9, r2
    3ad0:	0bb80000 	bleq	fee03ad8 <_estack+0xdedfead8>
    3ad4:	72220000 	eorvc	r0, r2, #0
    3ad8:	01007465 	tsteq	r0, r5, ror #8
    3adc:	ef07027b 	svc	0x0007027b
    3ae0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    3ae4:	0000000b 	andeq	r0, r0, fp
    3ae8:	1567011f 	strbne	r0, [r7, #-287]!	; 0xfffffee1
    3aec:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3af0:	ac010602 	stcge	6, cr0, [r1], {2}
    3af4:	d0000019 	andle	r0, r0, r9, lsl r0
    3af8:	01000019 	tsteq	r0, r9, lsl r0
    3afc:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    3b00:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
    3b04:	02690100 	rsbeq	r0, r9, #0, 2
    3b08:	0004541e 	andeq	r5, r4, lr, lsl r4
    3b0c:	000c0c00 	andeq	r0, ip, r0, lsl #24
    3b10:	6f6c2b00 	svcvs	0x006c2b00
    3b14:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    3b18:	008d2602 	addeq	r2, sp, r2, lsl #12
    3b1c:	0c350000 	ldceq	0, cr0, [r5], #-0
    3b20:	1f000000 	svcne	0x00000000
    3b24:	00169201 	andseq	r9, r6, r1, lsl #4
    3b28:	025f0100 	subseq	r0, pc, #0, 2
    3b2c:	199e0106 	ldmibne	lr, {r1, r2, r8}
    3b30:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
    3b34:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b38:	00000a16 	andeq	r0, r0, r6, lsl sl
    3b3c:	0015a620 	andseq	sl, r5, r0, lsr #12
    3b40:	025f0100 	subseq	r0, pc, #0, 2
    3b44:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3b48:	000c5e00 	andeq	r5, ip, r0, lsl #28
    3b4c:	00633200 	rsbeq	r3, r3, r0, lsl #4
    3b50:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    3b54:	000001fc 	strdeq	r0, [r0], -ip
    3b58:	6e2b5101 	sufvse	f5, f3, f1
    3b5c:	025f0100 	subseq	r0, pc, #0, 2
    3b60:	00008d2b 	andeq	r8, r0, fp, lsr #26
    3b64:	000c7c00 	andeq	r7, ip, r0, lsl #24
    3b68:	011f0000 	tsteq	pc, r0
    3b6c:	00001654 	andeq	r1, r0, r4, asr r6
    3b70:	06025901 	streq	r5, [r2], -r1, lsl #18
    3b74:	00198a01 	andseq	r8, r9, r1, lsl #20
    3b78:	00199e00 	andseq	r9, r9, r0, lsl #28
    3b7c:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    3b80:	2000000a 	andcs	r0, r0, sl
    3b84:	000015a6 	andeq	r1, r0, r6, lsr #11
    3b88:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    3b8c:	000001f6 	strdeq	r0, [r0], -r6
    3b90:	00000c8f 	andeq	r0, r0, pc, lsl #25
    3b94:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    3b98:	02590100 	subseq	r0, r9, #0, 2
    3b9c:	00070e2b 	andeq	r0, r7, fp, lsr #28
    3ba0:	000ca200 	andeq	sl, ip, r0, lsl #4
    3ba4:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    3ba8:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    3bac:	0000008d 	andeq	r0, r0, sp, lsl #1
    3bb0:	00000cc0 	andeq	r0, r0, r0, asr #25
    3bb4:	cb011f00 	blgt	4b7bc <__ccfg+0x2b814>
    3bb8:	01000016 	tsteq	r0, r6, lsl r0
    3bbc:	01060254 	tsteq	r6, r4, asr r2
	...
    3bc8:	0aa69c01 	beq	fe9aabd4 <_estack+0xde9a5bd4>
    3bcc:	642b0000 	strtvs	r0, [fp], #-0
    3bd0:	02540100 	subseq	r0, r4, #0, 2
    3bd4:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    3bd8:	000cd300 	andeq	sp, ip, r0, lsl #6
    3bdc:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3be0:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    3be4:	0000070e 	andeq	r0, r0, lr, lsl #14
    3be8:	00000ce6 	andeq	r0, r0, r6, ror #25
    3bec:	01006e32 	tsteq	r0, r2, lsr lr
    3bf0:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    3bf4:	01000000 	mrseq	r0, (UNDEF: 0)
    3bf8:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    3bfc:	0000157e 	andeq	r1, r0, lr, ror r5
    3c00:	06024e01 	streq	r4, [r2], -r1, lsl #28
    3c04:	00000001 	andeq	r0, r0, r1
    3c08:	00000000 	andeq	r0, r0, r0
    3c0c:	de9c0100 	fmllee	f0, f4, f0
    3c10:	2b00000a 	blcs	3c40 <NOROM_RFCRTrim+0x14>
    3c14:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    3c18:	01f61902 	mvnseq	r1, r2, lsl #18
    3c1c:	0cf90000 	ldcleq	0, cr0, [r9]
    3c20:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3c24:	024e0100 	subeq	r0, lr, #0, 2
    3c28:	00070e28 	andeq	r0, r7, r8, lsr #28
    3c2c:	000d1700 	andeq	r1, sp, r0, lsl #14
    3c30:	011f0000 	tsteq	pc, r0
    3c34:	000016a6 	andeq	r1, r0, r6, lsr #13
    3c38:	06024701 	streq	r4, [r2], -r1, lsl #14
    3c3c:	00196e01 	andseq	r6, r9, r1, lsl #28
    3c40:	00198a00 	andseq	r8, r9, r0, lsl #20
    3c44:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    3c48:	2b00000b 	blcs	3c7c <NOROM_RFCRTrim+0x50>
    3c4c:	47010064 	strmi	r0, [r1, -r4, rrx]
    3c50:	01f61a02 	mvnseq	r1, r2, lsl #20
    3c54:	0d2a0000 	stceq	0, cr0, [sl, #-0]
    3c58:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3c5c:	02470100 	subeq	r0, r7, #0, 2
    3c60:	00070e29 	andeq	r0, r7, r9, lsr #28
    3c64:	000d4800 	andeq	r4, sp, r0, lsl #16
    3c68:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    3c6c:	30024701 	andcc	r4, r2, r1, lsl #14
    3c70:	0000008d 	andeq	r0, r0, sp, lsl #1
    3c74:	00000d5b 	andeq	r0, r0, fp, asr sp
    3c78:	ab011f00 	blge	4b880 <__ccfg+0x2b8d8>
    3c7c:	01000014 	tsteq	r0, r4, lsl r0
    3c80:	01060242 	tsteq	r6, r2, asr #4
    3c84:	0000195e 	andeq	r1, r0, lr, asr r9
    3c88:	0000196e 	andeq	r1, r0, lr, ror #18
    3c8c:	0b5d9c01 	bleq	176ac98 <__ccfg+0x174acf0>
    3c90:	642b0000 	strtvs	r0, [fp], #-0
    3c94:	02420100 	subeq	r0, r2, #0, 2
    3c98:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3c9c:	000d6e00 	andeq	r6, sp, r0, lsl #28
    3ca0:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3ca4:	28024201 	stmdacs	r2, {r0, r9, lr}
    3ca8:	0000070e 	andeq	r0, r0, lr, lsl #14
    3cac:	00000d81 	andeq	r0, r0, r1, lsl #27
    3cb0:	1e012c00 	cdpne	12, 0, cr2, cr1, cr0, {0}
    3cb4:	01000015 	tsteq	r0, r5, lsl r0
    3cb8:	01050239 	tsteq	r5, r9, lsr r2
    3cbc:	0000008d 	andeq	r0, r0, sp, lsl #1
    3cc0:	00001950 	andeq	r1, r0, r0, asr r9
    3cc4:	0000195e 	andeq	r1, r0, lr, asr r9
    3cc8:	0b999c01 	bleq	fe66acd4 <_estack+0xde665cd4>
    3ccc:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3cd0:	02390100 	eorseq	r0, r9, #0, 2
    3cd4:	00070e1e 	andeq	r0, r7, lr, lsl lr
    3cd8:	000d9f00 	andeq	r9, sp, r0, lsl #30
    3cdc:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3ce0:	06023b01 	streq	r3, [r2], -r1, lsl #22
    3ce4:	0000008d 	andeq	r0, r0, sp, lsl #1
    3ce8:	00000dbd 			; <UNDEFINED> instruction: 0x00000dbd
    3cec:	37012c00 	strcc	r2, [r1, -r0, lsl #24]
    3cf0:	01000015 	tsteq	r0, r5, lsl r0
    3cf4:	0106022d 	tsteq	r6, sp, lsr #4
    3cf8:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3d04:	0be69c01 	bleq	ff9aad10 <_estack+0xdf9a5d10>
    3d08:	662b0000 	strtvs	r0, [fp], -r0
    3d0c:	01006e75 	tsteq	r0, r5, ror lr
    3d10:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
    3d14:	d0000002 	andle	r0, r0, r2
    3d18:	2200000d 	andcs	r0, r0, #13
    3d1c:	2f010069 	svccs	0x00010069
    3d20:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3d24:	0dee0000 	stcleq	0, cr0, [lr]
    3d28:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3d2c:	02300100 	eorseq	r0, r0, #0, 2
    3d30:	0000d907 	andeq	sp, r0, r7, lsl #18
    3d34:	000e0c00 	andeq	r0, lr, r0, lsl #24
    3d38:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3d3c:	00001538 	andeq	r1, r0, r8, lsr r5
    3d40:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    3d44:	00011d01 	andeq	r1, r1, r1, lsl #26
    3d48:	00192c00 	andseq	r2, r9, r0, lsl #24
    3d4c:	00195000 	andseq	r5, r9, r0
    3d50:	229c0100 	addscs	r0, ip, #0, 2
    3d54:	2b00000c 	blcs	3d8c <TrimAfterColdResetWakeupFromShutDown+0xc>
    3d58:	006e7566 	rsbeq	r7, lr, r6, ror #10
    3d5c:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
    3d60:	000002f1 	strdeq	r0, [r0], -r1
    3d64:	00000e1f 	andeq	r0, r0, pc, lsl lr
    3d68:	01006923 	tsteq	r0, r3, lsr #18
    3d6c:	160e0221 	strne	r0, [lr], -r1, lsr #4
    3d70:	01000004 	tsteq	r0, r4
    3d74:	012c0050 	qsubeq	r0, r0, ip
    3d78:	00001646 	andeq	r1, r0, r6, asr #12
    3d7c:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    3d80:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
    3d8c:	609c0100 	addsvs	r0, ip, r0, lsl #2
    3d90:	2b00000c 	blcs	3dc8 <TrimAfterColdResetWakeupFromShutDown+0x48>
    3d94:	00646970 	rsbeq	r6, r4, r0, ror r9
    3d98:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    3d9c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3da0:	00000e48 	andeq	r0, r0, r8, asr #28
    3da4:	01006922 	tsteq	r0, r2, lsr #18
    3da8:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    3dac:	66000004 	strvs	r0, [r0], -r4
    3db0:	0000000e 	andeq	r0, r0, lr
    3db4:	169e011f 			; <UNDEFINED> instruction: 0x169e011f
    3db8:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3dbc:	00010601 	andeq	r0, r1, r1, lsl #12
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	01000000 	mrseq	r0, (UNDEF: 0)
    3dc8:	000cc99c 	muleq	ip, ip, r9
    3dcc:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3dd0:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    3dd4:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    3dd8:	0e840000 	cdpeq	0, 8, cr0, cr4, cr0, {0}
    3ddc:	72220000 	eorvc	r0, r2, #0
    3de0:	01006c65 	tsteq	r0, r5, ror #24
    3de4:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
    3de8:	a2000000 	andge	r0, r0, #0
    3dec:	2200000e 	andcs	r0, r0, #14
    3df0:	fa010069 	blx	43f9c <__ccfg+0x23ff4>
    3df4:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3df8:	0eb50000 	cdpeq	0, 11, cr0, cr5, cr0, {0}
    3dfc:	6a220000 	bvs	883e04 <__ccfg+0x863e5c>
    3e00:	01fa0100 	mvnseq	r0, r0, lsl #2
    3e04:	00041612 	andeq	r1, r4, r2, lsl r6
    3e08:	000ee900 	andeq	lr, lr, r0, lsl #18
    3e0c:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    3e10:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    3e14:	00000416 	andeq	r0, r0, r6, lsl r4
    3e18:	00000f07 	andeq	r0, r0, r7, lsl #30
    3e1c:	e0011f00 	and	r1, r1, r0, lsl #30
    3e20:	01000014 	tsteq	r0, r4, lsl r0
    3e24:	010601d9 	ldrdeq	r0, [r6, -r9]
    3e28:	00001b04 	andeq	r1, r0, r4, lsl #22
    3e2c:	00001b54 	andeq	r1, r0, r4, asr fp
    3e30:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
    3e34:	702b0000 	eorvc	r0, fp, r0
    3e38:	01006469 	tsteq	r0, r9, ror #8
    3e3c:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
    3e40:	25000001 	strcs	r0, [r0, #-1]
    3e44:	2200000f 	andcs	r0, r0, #15
    3e48:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    3e4c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3e50:	0f590000 	svceq	0x00590000
    3e54:	6a240000 	bvs	903e5c <__ccfg+0x8e3eb4>
    3e58:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    3e5c:	00041612 	andeq	r1, r4, r2, lsl r6
    3e60:	a42a0000 	strtge	r0, [sl], #-0
    3e64:	01000014 	tsteq	r0, r4, lsl r0
    3e68:	010d01c4 	smlabteq	sp, r4, r1, r0
    3e6c:	00001670 	andeq	r1, r0, r0, ror r6
    3e70:	000016ac 	andeq	r1, r0, ip, lsr #13
    3e74:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
    3e78:	70320000 	eorsvc	r0, r2, r0
    3e7c:	01006469 	tsteq	r0, r9, ror #8
    3e80:	162101c4 	strtne	r0, [r1], -r4, asr #3
    3e84:	01000004 	tsteq	r0, r4
    3e88:	16762d50 			; <UNDEFINED> instruction: 0x16762d50
    3e8c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    3e90:	011d0801 	tsteq	sp, r1, lsl #16
    3e94:	0f820000 	svceq	0x00820000
    3e98:	6a220000 	bvs	883ea0 <__ccfg+0x863ef8>
    3e9c:	01c90100 	biceq	r0, r9, r0, lsl #2
    3ea0:	00008d06 	andeq	r8, r0, r6, lsl #26
    3ea4:	000f9500 	andeq	r9, pc, r0, lsl #10
    3ea8:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3eac:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    3eb0:	00000416 	andeq	r0, r0, r6, lsl r4
    3eb4:	2c005201 	sfmcs	f5, 4, [r0], {1}
    3eb8:	00164e01 	andseq	r4, r6, r1, lsl #28
    3ebc:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    3ec0:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ed0:	00000da1 	andeq	r0, r0, r1, lsr #27
    3ed4:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3ed8:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    3edc:	00011d13 	andeq	r1, r1, r3, lsl sp
    3ee0:	000fa800 	andeq	sl, pc, r0, lsl #16
    3ee4:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3ee8:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    3eec:	00000416 	andeq	r0, r0, r6, lsl r4
    3ef0:	00000fc6 	andeq	r0, r0, r6, asr #31
    3ef4:	c3013300 	movwgt	r3, #4864	; 0x1300
    3ef8:	01000014 	tsteq	r0, r4, lsl r0
    3efc:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    3f08:	011f9c01 	tsteq	pc, r1, lsl #24
    3f0c:	00002cce 	andeq	r2, r0, lr, asr #25
    3f10:	06019a01 	streq	r9, [r1], -r1, lsl #20
    3f14:	0018f401 	andseq	pc, r8, r1, lsl #8
    3f18:	00192c00 	andseq	r2, r9, r0, lsl #24
    3f1c:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    3f20:	2b00000d 	blcs	3f5c <NOROM_SetupSetVddrLevel+0x64>
    3f24:	9a010064 	bls	440bc <__ccfg+0x24114>
    3f28:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    3f2c:	0fe40000 	svceq	0x00e40000
    3f30:	70200000 	eorvc	r0, r0, r0
    3f34:	01000000 	mrseq	r0, (UNDEF: 0)
    3f38:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    3f3c:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    3f40:	0000000f 	andeq	r0, r0, pc
    3f44:	16b3012c 	ldrtne	r0, [r3], ip, lsr #2
    3f48:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    3f4c:	1d010701 	stcne	7, cr0, [r1, #-4]
    3f50:	d0000001 	andle	r0, r0, r1
    3f54:	f4000018 	vst4.8	{d0-d3}, [r0 :64], r8
    3f58:	01000018 	tsteq	r0, r8, lsl r0
    3f5c:	000e3e9c 	muleq	lr, ip, lr
    3f60:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3f64:	88010064 	stmdahi	r1, {r2, r5, r6}
    3f68:	011d1801 	tsteq	sp, r1, lsl #16
    3f6c:	100a0000 	andne	r0, sl, r0
    3f70:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3f74:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    3f78:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    3f7c:	10330000 	eorsne	r0, r3, r0
    3f80:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3f84:	018a0100 	orreq	r0, sl, r0, lsl #2
    3f88:	0004160e 	andeq	r1, r4, lr, lsl #12
    3f8c:	00105100 	andseq	r5, r0, r0, lsl #2
    3f90:	011f0000 	tsteq	pc, r0
    3f94:	00001559 	andeq	r1, r0, r9, asr r5
    3f98:	06017801 	streq	r7, [r1], -r1, lsl #16
    3f9c:	00000001 	andeq	r0, r0, r1
    3fa0:	00000000 	andeq	r0, r0, r0
    3fa4:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3fa8:	2b00000e 	blcs	3fe8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x74>
    3fac:	00646970 	rsbeq	r6, r4, r0, ror r9
    3fb0:	1b017801 	blne	61fbc <__ccfg+0x42014>
    3fb4:	0000011d 	andeq	r0, r0, sp, lsl r1
    3fb8:	0000106f 	andeq	r1, r0, pc, rrx
    3fbc:	0015eb20 	andseq	lr, r5, r0, lsr #22
    3fc0:	01780100 	cmneq	r8, r0, lsl #2
    3fc4:	00011d26 	andeq	r1, r1, r6, lsr #26
    3fc8:	00108200 	andseq	r8, r0, r0, lsl #4
    3fcc:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3fd0:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    3fd4:	00000416 	andeq	r0, r0, r6, lsl r4
    3fd8:	6a225001 	bvs	897fe4 <__ccfg+0x87803c>
    3fdc:	017d0100 	cmneq	sp, r0, lsl #2
    3fe0:	00008d07 	andeq	r8, r0, r7, lsl #26
    3fe4:	0010a000 	andseq	sl, r0, r0
    3fe8:	011f0000 	tsteq	pc, r0
    3fec:	00001511 	andeq	r1, r0, r1, lsl r5
    3ff0:	06016601 	streq	r6, [r1], -r1, lsl #12
    3ff4:	00189c01 	andseq	r9, r8, r1, lsl #24
    3ff8:	0018d000 	andseq	sp, r8, r0
    3ffc:	db9c0100 	blle	fe704404 <_estack+0xde6ff404>
    4000:	3400000e 	strcc	r0, [r0], #-14
    4004:	000015eb 	andeq	r1, r0, fp, ror #11
    4008:	1a016601 	bne	5d814 <__ccfg+0x3d86c>
    400c:	0000011d 	andeq	r0, r0, sp, lsl r1
    4010:	6a225001 	bvs	89801c <__ccfg+0x878074>
    4014:	016a0100 	cmneq	sl, r0, lsl #2
    4018:	00008d06 	andeq	r8, r0, r6, lsl #26
    401c:	0010be00 	andseq	fp, r0, r0, lsl #28
    4020:	00692300 	rsbeq	r2, r9, r0, lsl #6
    4024:	0e016b01 	vmlaeq.f64	d6, d1, d1
    4028:	00000416 	andeq	r0, r0, r6, lsl r4
    402c:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    4030:	0015ff01 	andseq	pc, r5, r1, lsl #30
    4034:	01590100 	cmpeq	r9, r0, lsl #2
    4038:	11010106 	tstne	r1, r6, lsl #2
    403c:	3500000f 	strcc	r0, [r0, #-15]
    4040:	000015eb 	andeq	r1, r0, fp, ror #11
    4044:	17015901 	strne	r5, [r1, -r1, lsl #18]
    4048:	0000011d 	andeq	r0, r0, sp, lsl r1
    404c:	00007035 	andeq	r7, r0, r5, lsr r0
    4050:	01590100 	cmpeq	r9, r0, lsl #2
    4054:	0000d923 	andeq	sp, r0, r3, lsr #18
    4058:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    405c:	07015d01 	streq	r5, [r1, -r1, lsl #26]
    4060:	000000ef 	andeq	r0, r0, pc, ror #1
    4064:	4c011f00 	stcmi	15, cr1, [r1], {-0}
    4068:	01000015 	tsteq	r0, r5, lsl r0
    406c:	01060153 	tsteq	r6, r3, asr r1
    4070:	00001854 	andeq	r1, r0, r4, asr r8
    4074:	00001868 	andeq	r1, r0, r8, ror #16
    4078:	0f3c9c01 	svceq	0x003c9c01
    407c:	70200000 	eorvc	r0, r0, r0
    4080:	01000000 	mrseq	r0, (UNDEF: 0)
    4084:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    4088:	d1000000 	mrsle	r0, (UNDEF: 0)
    408c:	00000010 	andeq	r0, r0, r0, lsl r0
    4090:	14d6012c 	ldrbne	r0, [r6], #300	; 0x12c
    4094:	2c010000 	stccs	0, cr0, [r1], {-0}
    4098:	1d010701 	stcne	7, cr0, [r1, #-4]
    409c:	fc000001 	stc2	0, cr0, [r0], {1}
    40a0:	3000001b 	andcc	r0, r0, fp, lsl r0
    40a4:	0100001c 	tsteq	r0, ip, lsl r0
    40a8:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    40ac:	069d2000 	ldreq	r2, [sp], r0
    40b0:	2c010000 	stccs	0, cr0, [r1], {-0}
    40b4:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    40b8:	10e40000 	rscne	r0, r4, r0
    40bc:	44200000 	strtmi	r0, [r0], #-0
    40c0:	01000047 	tsteq	r0, r7, asr #32
    40c4:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    40c8:	02000001 	andeq	r0, r0, #1
    40cc:	23000011 	movwcs	r0, #17
    40d0:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    40d4:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    40d8:	50010000 	andpl	r0, r1, r0
    40dc:	00076036 	andeq	r6, r7, r6, lsr r0
    40e0:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    40e4:	0f013d01 	svceq	0x00013d01
    40e8:	00000416 	andeq	r0, r0, r6, lsl r4
    40ec:	00001120 	andeq	r1, r0, r0, lsr #2
    40f0:	01370000 	teqeq	r7, r0
    40f4:	0000162e 	andeq	r1, r0, lr, lsr #12
    40f8:	0106af01 	tsteq	r6, r1, lsl #30
    40fc:	000fe301 	andeq	lr, pc, r1, lsl #6
    4100:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    4104:	af01006e 	svcge	0x0001006e
    4108:	0000d91a 	andeq	sp, r0, sl, lsl r9
    410c:	12373900 	eorsne	r3, r7, #0, 18
    4110:	af010000 	svcge	0x00010000
    4114:	0000cd27 	andeq	ip, r0, r7, lsr #26
    4118:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    411c:	160ebd01 	strne	fp, [lr], -r1, lsl #26
    4120:	3a000004 	bcc	4138 <NOROM_SetupGetTrimForAdcShModeEn+0x8>
    4124:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    4128:	0000d907 	andeq	sp, r0, r7, lsl #18
    412c:	4f4d3b00 	svcmi	0x004d3b00
    4130:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    4134:	3c000101 	stfccs	f0, [r0], {1}
    4138:	00166601 	andseq	r6, r6, r1, lsl #12
    413c:	06a70100 	strteq	r0, [r7], r0, lsl #2
    4140:	00178001 	andseq	r8, r7, r1
    4144:	00178600 	andseq	r8, r7, r0, lsl #12
    4148:	189c0100 	ldmne	ip, {r8}
    414c:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    4150:	a7010074 	smlsdxge	r1, r4, r0, r0
    4154:	0001291f 	andeq	r2, r1, pc, lsl r9
    4158:	00114900 	andseq	r4, r1, r0, lsl #18
    415c:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    4160:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    4164:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4168:	00000011 	andeq	r0, r0, r1, lsl r0
    416c:	16bd013c 			; <UNDEFINED> instruction: 0x16bd013c
    4170:	8f010000 	svchi	0x00010000
    4174:	00000106 	andeq	r0, r0, r6, lsl #2
    4178:	00000000 	andeq	r0, r0, r0
    417c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4180:	0000104e 	andeq	r1, r0, lr, asr #32
    4184:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    4188:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    418c:	6f000001 	svcvs	0x00000001
    4190:	3e000011 	mcrcc	0, 0, r0, cr0, cr1, {0}
    4194:	93010069 	movwls	r0, #4201	; 0x1069
    4198:	00008d06 	andeq	r8, r0, r6, lsl #26
    419c:	00118d00 	andseq	r8, r1, r0, lsl #26
    41a0:	013c0000 	teqeq	ip, r0
    41a4:	000014ec 	andeq	r1, r0, ip, ror #9
    41a8:	01067f01 	tsteq	r6, r1, lsl #30
    41ac:	00001754 	andeq	r1, r0, r4, asr r7
    41b0:	00001780 	andeq	r1, r0, r0, lsl #15
    41b4:	10849c01 	addne	r9, r4, r1, lsl #24
    41b8:	753d0000 	ldrvc	r0, [sp, #-0]!
    41bc:	7f010074 	svcvc	0x00010074
    41c0:	0001291a 	andeq	r2, r1, sl, lsl r9
    41c4:	0011ab00 	andseq	sl, r1, r0, lsl #22
    41c8:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    41cc:	8d068301 	stchi	3, cr8, [r6, #-4]
    41d0:	d4000000 	strle	r0, [r0], #-0
    41d4:	00000011 	andeq	r0, r0, r1, lsl r0
    41d8:	15f1013f 	ldrbne	r0, [r1, #319]!	; 0x13f
    41dc:	7b010000 	blvc	441e4 <__ccfg+0x2423c>
    41e0:	17440106 	strbne	r0, [r4, -r6, lsl #2]
    41e4:	17540000 	ldrbne	r0, [r4, -r0]
    41e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    41ec:	00157240 	andseq	r7, r5, r0, asr #4
    41f0:	145f0100 	ldrbne	r0, [pc], #-256	; 41f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x14>
    41f4:	00041601 	andeq	r1, r4, r1, lsl #12
    41f8:	10c10100 	sbcne	r0, r1, r0, lsl #2
    41fc:	70380000 	eorsvc	r0, r8, r0
    4200:	01006469 	tsteq	r0, r9, ror #8
    4204:	011d225f 	tsteq	sp, pc, asr r2
    4208:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    420c:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    4210:	00000416 	andeq	r0, r0, r6, lsl r4
    4214:	14f74100 	ldrbtne	r4, [r7], #256	; 0x100
    4218:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    421c:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    4220:	03000010 	movweq	r0, #16
    4224:	000010e2 	andeq	r1, r0, r2, ror #1
    4228:	0011af35 	andseq	sl, r1, r5, lsr pc
    422c:	029e0200 	addseq	r0, lr, #0, 4
    4230:	00007313 	andeq	r7, r0, r3, lsl r3
    4234:	01020000 	mrseq	r0, (UNDEF: 2)
    4238:	000caa02 	andeq	sl, ip, r2, lsl #20
    423c:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    4248:	9c010000 	stcls	0, cr0, [r1], {-0}
    424c:	0000112e 	andeq	r1, r0, lr, lsr #2
    4250:	0010aa43 	andseq	sl, r0, r3, asr #20
    4254:	0011f200 	andseq	pc, r1, r0, lsl #4
    4258:	10b64400 	adcsne	r4, r6, r0, lsl #8
    425c:	121b0000 	andsne	r0, fp, #0
    4260:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    4264:	00000010 	andeq	r0, r0, r0, lsl r0
    4268:	00000000 	andeq	r0, r0, r0
    426c:	01000000 	mrseq	r0, (UNDEF: 0)
    4270:	aa43145f 	bge	10c93f4 <__ccfg+0x10a944c>
    4274:	39000010 	stmdbcc	r0, {r4}
    4278:	46000012 			; <UNDEFINED> instruction: 0x46000012
    427c:	000010b6 	strheq	r1, [r0], -r6
    4280:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    4284:	8800000f 	stmdahi	r0, {r0, r1, r2, r3}
    4288:	54000017 	strpl	r0, [r0], #-23	; 0xffffffe9
    428c:	01000018 	tsteq	r0, r8, lsl r0
    4290:	00119a9c 	mulseq	r1, ip, sl
    4294:	0fad4300 	svceq	0x00ad4300
    4298:	124c0000 	subne	r0, ip, #0
    429c:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    42a0:	5f00000f 	svcpl	0x0000000f
    42a4:	46000012 			; <UNDEFINED> instruction: 0x46000012
    42a8:	00000fc5 	andeq	r0, r0, r5, asr #31
    42ac:	000fcf46 	andeq	ip, pc, r6, asr #30
    42b0:	0f9e4700 	svceq	0x009e4700
    42b4:	17960000 	ldrne	r0, [r6, r0]
    42b8:	07480000 	strbeq	r0, [r8, -r0]
    42bc:	af010000 	svcge	0x00010000
    42c0:	0fb92906 	svceq	0x00b92906
    42c4:	ad430000 	stclge	0, cr0, [r3, #-0]
    42c8:	7200000f 	andvc	r0, r0, #15
    42cc:	36000012 			; <UNDEFINED> instruction: 0x36000012
    42d0:	00000748 	andeq	r0, r0, r8, asr #14
    42d4:	000fc544 	andeq	ip, pc, r4, asr #10
    42d8:	00129b00 	andseq	r9, r2, r0, lsl #22
    42dc:	0fcf4600 	svceq	0x00cf4600
    42e0:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    42e4:	3200000f 	andcc	r0, r0, #15
    42e8:	00000018 	andeq	r0, r0, r8, lsl r0
    42ec:	db420000 	blle	10842f4 <__ccfg+0x106434c>
    42f0:	6800000e 	stmdavs	r0, {r1, r2, r3}
    42f4:	9c000018 	stcls	0, cr0, [r0], {24}
    42f8:	01000018 	tsteq	r0, r8, lsl r0
    42fc:	0011ee9c 	mulseq	r1, ip, lr
    4300:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    4304:	12b90000 	adcsne	r0, r9, #0
    4308:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    430c:	d700000e 	strle	r0, [r0, -lr]
    4310:	46000012 			; <UNDEFINED> instruction: 0x46000012
    4314:	00000f05 	andeq	r0, r0, r5, lsl #30
    4318:	000edb49 	andeq	sp, lr, r9, asr #22
    431c:	00187a00 	andseq	r7, r8, r0, lsl #20
    4320:	00188200 	andseq	r8, r8, r0, lsl #4
    4324:	01590100 	cmpeq	r9, r0, lsl #2
    4328:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    432c:	12f50000 	rscsne	r0, r5, #0
    4330:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    4334:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    4338:	46000013 			; <UNDEFINED> instruction: 0x46000013
    433c:	00000f05 	andeq	r0, r0, r5, lsl #30
    4340:	804a0000 	subhi	r0, sl, r0
    4344:	bc000008 	stclt	0, cr0, [r0], {8}
    4348:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    434c:	0100001b 	tsteq	r0, fp, lsl r0
    4350:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    4354:	131b0000 	tstne	fp, #0
    4358:	80490000 	subhi	r0, r9, r0
    435c:	c8000008 	stmdagt	r0, {r3}
    4360:	d000001a 	andle	r0, r0, sl, lsl r0
    4364:	0100001a 	tsteq	r0, sl, lsl r0
    4368:	4306037c 	movwmi	r0, #25468	; 0x637c
    436c:	00000890 	muleq	r0, r0, r8
    4370:	00001339 	andeq	r1, r0, r9, lsr r3
    4374:	33000000 	movwcc	r0, #0
    4378:	03000013 	movweq	r0, #19
    437c:	000e7200 	andeq	r7, lr, r0, lsl #4
    4380:	a3010400 	movwge	r0, #5120	; 0x1400
    4384:	0c000000 	stceq	0, cr0, [r0], {-0}
    4388:	00001737 	andeq	r1, r0, r7, lsr r7
    438c:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4390:	00000950 	andeq	r0, r0, r0, asr r9
    4394:	00000000 	andeq	r0, r0, r0
    4398:	0000315a 	andeq	r3, r0, sl, asr r1
    439c:	60060102 	andvs	r0, r6, r2, lsl #2
    43a0:	0200000c 	andeq	r0, r0, #12
    43a4:	0a6e0502 	beq	1b857b4 <__ccfg+0x1b6580c>
    43a8:	04020000 	streq	r0, [r2], #-0
    43ac:	00080005 	andeq	r0, r8, r5
    43b0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    43b4:	000007fb 	strdeq	r0, [r0], -fp
    43b8:	002a1103 	eoreq	r1, sl, r3, lsl #2
    43bc:	182e0200 	stmdane	lr!, {r9}
    43c0:	0000004d 	andeq	r0, r0, sp, asr #32
    43c4:	5e080102 	adfple	f0, f0, f2
    43c8:	0300000c 	movweq	r0, #12
    43cc:	00002e07 	andeq	r2, r0, r7, lsl #28
    43d0:	60193102 	andsvs	r3, r9, r2, lsl #2
    43d4:	02000000 	andeq	r0, r0, #0
    43d8:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
    43dc:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    43e0:	02000029 	andeq	r0, r0, #41	; 0x29
    43e4:	00731934 	rsbseq	r1, r3, r4, lsr r9
    43e8:	04020000 	streq	r0, [r2], #-0
    43ec:	00042807 	andeq	r2, r4, r7, lsl #16
    43f0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    43f4:	00000423 	andeq	r0, r0, r3, lsr #8
    43f8:	69050404 	stmdbvs	r5, {r2, sl}
    43fc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4400:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    4404:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    4408:	03000005 	movweq	r0, #5
    440c:	009b1b28 	addseq	r1, fp, r8, lsr #22
    4410:	93050000 	movwls	r0, #20480	; 0x5000
    4414:	0400000b 	streq	r0, [r0], #-11
    4418:	00b3000d 	adcseq	r0, r3, sp
    441c:	70060000 	andvc	r0, r6, r0
    4420:	b3000008 	movwlt	r0, #8
    4424:	00000000 	andeq	r0, r0, r0
    4428:	04070001 	streq	r0, [r7], #-1
    442c:	000b9503 	andeq	r9, fp, r3, lsl #10
    4430:	18630300 	stmdane	r3!, {r8, r9}^
    4434:	0000008f 	andeq	r0, r0, pc, lsl #1
    4438:	00131d03 	andseq	r1, r3, r3, lsl #26
    443c:	12260400 	eorne	r0, r6, #0, 8
    4440:	00000041 	andeq	r0, r0, r1, asr #32
    4444:	0028f003 	eoreq	pc, r8, r3
    4448:	12270400 	eorne	r0, r7, #0, 8
    444c:	00000054 	andeq	r0, r0, r4, asr r0
    4450:	0000cd08 	andeq	ip, r0, r8, lsl #26
    4454:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    4458:	b7030000 	strlt	r0, [r3, -r0]
    445c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    4460:	0041122b 	subeq	r1, r1, fp, lsr #4
    4464:	e3090000 	movw	r0, #36864	; 0x9000
    4468:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    446c:	000000e3 	andeq	r0, r0, r3, ror #1
    4470:	00294203 	eoreq	r4, r9, r3, lsl #4
    4474:	122c0400 	eorne	r0, ip, #0, 8
    4478:	00000067 	andeq	r0, r0, r7, rrx
    447c:	0000f908 	andeq	pc, r0, r8, lsl #18
    4480:	06490300 	strbeq	r0, [r9], -r0, lsl #6
    4484:	2d040000 	stccs	0, cr0, [r4, #-0]
    4488:	00006712 	andeq	r6, r0, r2, lsl r7
    448c:	0bb70300 	bleq	fedc5094 <_estack+0xdedc0094>
    4490:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    4494:	00012210 	andeq	r2, r1, r0, lsl r2
    4498:	cd040a00 	vstrgt	s0, [r4, #-0]
    449c:	0b000000 	bleq	44a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>
    44a0:	09320408 	ldmdbeq	r2!, {r3, sl}
    44a4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    44a8:	00002b0c 	andeq	r2, r0, ip, lsl #22
    44ac:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    44b0:	000000e3 	andeq	r0, r0, r3, ror #1
    44b4:	00070101 	andeq	r0, r7, r1, lsl #2
    44b8:	00064f0c 	andeq	r4, r6, ip, lsl #30
    44bc:	03350400 	teqeq	r5, #0, 8
    44c0:	000000e3 	andeq	r0, r0, r3, ror #1
    44c4:	00060101 	andeq	r0, r6, r1, lsl #2
    44c8:	0002de0c 	andeq	sp, r2, ip, lsl #28
    44cc:	03360400 	teqeq	r6, #0, 8
    44d0:	000000e3 	andeq	r0, r0, r3, ror #1
    44d4:	00050101 	andeq	r0, r5, r1, lsl #2
    44d8:	0006ba0c 	andeq	fp, r6, ip, lsl #20
    44dc:	03370400 	teqeq	r7, #0, 8
    44e0:	000000e3 	andeq	r0, r0, r3, ror #1
    44e4:	00040101 	andeq	r0, r4, r1, lsl #2
    44e8:	000aa20c 	andeq	sl, sl, ip, lsl #4
    44ec:	03380400 	teqeq	r8, #0, 8
    44f0:	000000e3 	andeq	r0, r0, r3, ror #1
    44f4:	00000401 	andeq	r0, r0, r1, lsl #8
    44f8:	00065e0d 	andeq	r5, r6, sp, lsl #28
    44fc:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    4500:	000000e3 	andeq	r0, r0, r3, ror #1
    4504:	08fe0d01 	ldmeq	lr!, {r0, r8, sl, fp}^
    4508:	3c040000 	stccc	0, cr0, [r4], {-0}
    450c:	0000e303 	andeq	lr, r0, r3, lsl #6
    4510:	2f0d0200 	svccs	0x000d0200
    4514:	0400000f 	streq	r0, [r0], #-15
    4518:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    451c:	0d030000 	stceq	0, cr0, [r3, #-0]
    4520:	00000916 	andeq	r0, r0, r6, lsl r9
    4524:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    4528:	04000000 	streq	r0, [r0], #-0
    452c:	03140300 	tsteq	r4, #0, 6
    4530:	41040000 	mrsmi	r0, (UNDEF: 4)
    4534:	00012803 	andeq	r2, r1, r3, lsl #16
    4538:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    453c:	c10e0000 	mrsgt	r0, (UNDEF: 14)
    4540:	04000006 	streq	r0, [r0], #-6
    4544:	01c21a43 	biceq	r1, r2, r3, asr #20
    4548:	01010000 	mrseq	r0, (UNDEF: 1)
    454c:	0001970e 	andeq	r9, r1, lr, lsl #14
    4550:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    4554:	000001e3 	andeq	r0, r0, r3, ror #3
    4558:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    455c:	000001e9 	andeq	r0, r0, r9, ror #3
    4560:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    4564:	0800000c 	stmdaeq	r0, {r2, r3}
    4568:	000001e9 	andeq	r0, r0, r9, ror #3
    456c:	00031d0e 	andeq	r1, r3, lr, lsl #26
    4570:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    4574:	000001e3 	andeq	r0, r0, r3, ror #3
    4578:	080b0101 	stmdaeq	fp, {r0, r8}
    457c:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    4580:	0d000002 	stceq	0, cr0, [r0, #-8]
    4584:	00000ccd 	andeq	r0, r0, sp, asr #25
    4588:	670b9005 	strvs	r9, [fp, -r5]
    458c:	00000000 	andeq	r0, r0, r0
    4590:	00106a0d 	andseq	r6, r0, sp, lsl #20
    4594:	08910500 	ldmeq	r1, {r8, sl}
    4598:	000000cd 	andeq	r0, r0, sp, asr #1
    459c:	01bc0d04 			; <UNDEFINED> instruction: 0x01bc0d04
    45a0:	92050000 	andls	r0, r5, #0
    45a4:	0000ef10 	andeq	lr, r0, r0, lsl pc
    45a8:	03000600 	movweq	r0, #1536	; 0x600
    45ac:	00000cc1 	andeq	r0, r0, r1, asr #25
    45b0:	03039305 	movweq	r9, #13061	; 0x3305
    45b4:	0f000002 	svceq	0x00000002
    45b8:	00000234 	andeq	r0, r0, r4, lsr r2
    45bc:	0000024b 	andeq	r0, r0, fp, asr #4
    45c0:	400e0010 	andmi	r0, lr, r0, lsl r0
    45c4:	05000009 	streq	r0, [r0, #-9]
    45c8:	02400f99 	subeq	r0, r0, #612	; 0x264
    45cc:	01010000 	mrseq	r0, (UNDEF: 1)
    45d0:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    45d4:	010b0000 	mrseq	r0, (UNDEF: 11)
    45d8:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    45dc:	0c000002 	stceq	0, cr0, [r0], {2}
    45e0:	0000091d 	andeq	r0, r0, sp, lsl r9
    45e4:	e3079306 	movw	r9, #29446	; 0x7306
    45e8:	01000000 	mrseq	r0, (UNDEF: 0)
    45ec:	0c000107 	stfeqs	f0, [r0], {7}
    45f0:	000005cf 	andeq	r0, r0, pc, asr #11
    45f4:	e3039406 	movw	r9, #13318	; 0x3406
    45f8:	01000000 	mrseq	r0, (UNDEF: 0)
    45fc:	00000001 	andeq	r0, r0, r1
    4600:	000aae03 	andeq	sl, sl, r3, lsl #28
    4604:	03960600 	orrseq	r0, r6, #0, 12
    4608:	0000025f 	andeq	r0, r0, pc, asr r2
    460c:	00028908 	andeq	r8, r2, r8, lsl #18
    4610:	02950f00 	addseq	r0, r5, #0, 30
    4614:	02a50000 	adceq	r0, r5, #0
    4618:	00100000 	andseq	r0, r0, r0
    461c:	00029a08 	andeq	r9, r2, r8, lsl #20
    4620:	03ac0e00 			; <UNDEFINED> instruction: 0x03ac0e00
    4624:	9c060000 	stcls	0, cr0, [r6], {-0}
    4628:	0002a517 	andeq	sl, r2, r7, lsl r5
    462c:	0f010100 	svceq	0x00010100
    4630:	000000d9 	ldrdeq	r0, [r0], -r9
    4634:	000002c3 	andeq	r0, r0, r3, asr #5
    4638:	b8080010 	stmdalt	r8, {r4}
    463c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4640:	00000611 	andeq	r0, r0, r1, lsl r6
    4644:	c3130607 	tstgt	r3, #7340032	; 0x700000
    4648:	01000002 	tsteq	r0, r2
    464c:	08e00e01 	stmiaeq	r0!, {r0, r9, sl, fp}^
    4650:	c3050000 	movwgt	r0, #20480	; 0x5000
    4654:	0000f90e 	andeq	pc, r0, lr, lsl #18
    4658:	11010100 	mrsne	r0, (UNDEF: 17)
    465c:	00000c75 	andeq	r0, r0, r5, ror ip
    4660:	10016e08 	andne	r6, r1, r8, lsl #28
    4664:	000002f1 	strdeq	r0, [r0], -r1
    4668:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    466c:	01120000 	tsteq	r2, r0
    4670:	00000303 	andeq	r0, r0, r3, lsl #6
    4674:	0000cd13 	andeq	ip, r0, r3, lsl sp
    4678:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    467c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4680:	10000003 	andne	r0, r0, r3
    4684:	03030800 	movweq	r0, #14336	; 0x3800
    4688:	e9140000 	ldmdb	r4, {}	; <UNPREDICTABLE>
    468c:	08000009 	stmdaeq	r0, {r0, r3}
    4690:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    4694:	01000003 	tsteq	r0, r3
    4698:	03981401 	orrseq	r1, r8, #16777216	; 0x1000000
    469c:	82080000 	andhi	r0, r8, #0
    46a0:	01051401 	tsteq	r5, r1, lsl #8
    46a4:	01010000 	mrseq	r0, (UNDEF: 1)
    46a8:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    46ac:	00035509 	andeq	r5, r3, r9, lsl #10
    46b0:	01c20d00 	biceq	r0, r2, r0, lsl #26
    46b4:	0f090000 	svceq	0x00090000
    46b8:	0000cd07 	andeq	ip, r0, r7, lsl #26
    46bc:	a50d0000 	strge	r0, [sp, #-0]
    46c0:	0900000c 	stmdbeq	r0, {r2, r3}
    46c4:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    46c8:	00020000 	andeq	r0, r2, r0
    46cc:	000d6e03 	andeq	r6, sp, r3, lsl #28
    46d0:	03110900 	tsteq	r1, #0, 18
    46d4:	00000331 	andeq	r0, r0, r1, lsr r3
    46d8:	1609200b 	strne	r2, [r9], -fp
    46dc:	0003d309 	andeq	sp, r3, r9, lsl #6
    46e0:	04b30d00 	ldrteq	r0, [r3], #3328	; 0xd00
    46e4:	17090000 	strne	r0, [r9, -r0]
    46e8:	0003ed08 	andeq	lr, r3, r8, lsl #26
    46ec:	0e0d0000 	cdpeq	0, 0, cr0, cr13, cr0, {0}
    46f0:	09000009 	stmdbeq	r0, {r0, r3}
    46f4:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    46f8:	0d040000 	stceq	0, cr0, [r4, #-0]
    46fc:	00000bc9 	andeq	r0, r0, r9, asr #23
    4700:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    4704:	08000004 	stmdaeq	r0, {r2}
    4708:	000c9d0d 	andeq	r9, ip, sp, lsl #26
    470c:	081a0900 	ldmdaeq	sl, {r8, fp}
    4710:	00000459 	andeq	r0, r0, r9, asr r4
    4714:	09650d0c 	stmdbeq	r5!, {r2, r3, r8, sl, fp}^
    4718:	1b090000 	blne	244720 <__ccfg+0x224778>
    471c:	00046f08 	andeq	r6, r4, r8, lsl #30
    4720:	660d1000 	strvs	r1, [sp], -r0
    4724:	0900000a 	stmdbeq	r0, {r1, r3}
    4728:	046f081c 	strbteq	r0, [pc], #-2076	; 4730 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x40>
    472c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    4730:	000001a5 	andeq	r0, r0, r5, lsr #3
    4734:	6f081d09 	svcvs	0x00081d09
    4738:	18000004 	stmdane	r0, {r2}
    473c:	00030b0d 	andeq	r0, r3, sp, lsl #22
    4740:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    4744:	00000081 	andeq	r0, r0, r1, lsl #1
    4748:	0115001c 	tsteq	r5, ip, lsl r0
    474c:	00000081 	andeq	r0, r0, r1, lsl #1
    4750:	000003ed 	andeq	r0, r0, sp, ror #7
    4754:	00008113 	andeq	r8, r0, r3, lsl r1
    4758:	00811300 	addeq	r1, r1, r0, lsl #6
    475c:	b5130000 	ldrlt	r0, [r3, #-0]
    4760:	00000000 	andeq	r0, r0, r0
    4764:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    4768:	01150000 	tsteq	r5, r0
    476c:	00000081 	andeq	r0, r0, r1, lsl #1
    4770:	00000408 	andeq	r0, r0, r8, lsl #8
    4774:	00008113 	andeq	r8, r0, r3, lsl r1
    4778:	00811300 	addeq	r1, r1, r0, lsl #6
    477c:	0a000000 	beq	4784 <NOROM_ChipInfo_GetChipFamily+0x1c>
    4780:	0003f304 	andeq	pc, r3, r4, lsl #6
    4784:	81011500 	tsthi	r1, r0, lsl #10
    4788:	32000000 	andcc	r0, r0, #0
    478c:	13000004 	movwne	r0, #4
    4790:	00000081 	andeq	r0, r0, r1, lsl #1
    4794:	00011613 	andeq	r1, r1, r3, lsl r6
    4798:	00811300 	addeq	r1, r1, r0, lsl #6
    479c:	32130000 	andscc	r0, r3, #0
    47a0:	13000004 	movwne	r0, #4
    47a4:	00000438 	andeq	r0, r0, r8, lsr r4
    47a8:	81040a00 	tsthi	r4, r0, lsl #20
    47ac:	0a000000 	beq	47b4 <NOROM_ChipInfo_GetHwRevision>
    47b0:	00035504 	andeq	r5, r3, r4, lsl #10
    47b4:	0e040a00 	vmlaeq.f32	s0, s8, s0
    47b8:	15000004 	strne	r0, [r0, #-4]
    47bc:	00008101 	andeq	r8, r0, r1, lsl #2
    47c0:	00045900 	andeq	r5, r4, r0, lsl #18
    47c4:	01161300 	tsteq	r6, r0, lsl #6
    47c8:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    47cc:	00000004 	andeq	r0, r0, r4
    47d0:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    47d4:	01150000 	tsteq	r5, r0
    47d8:	00000081 	andeq	r0, r0, r1, lsl #1
    47dc:	0000046f 	andeq	r0, r0, pc, ror #8
    47e0:	00011613 	andeq	r1, r1, r3, lsl r6
    47e4:	040a0000 	streq	r0, [sl], #-0
    47e8:	0000045f 	andeq	r0, r0, pc, asr r4
    47ec:	000d2a03 	andeq	r2, sp, r3, lsl #20
    47f0:	031f0900 	tsteq	pc, #0, 18
    47f4:	00000361 	andeq	r0, r0, r1, ror #6
    47f8:	00047508 	andeq	r7, r4, r8, lsl #10
    47fc:	17c01600 	strbne	r1, [r0, r0, lsl #12]
    4800:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    4804:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    4808:	ba0d0000 	blt	344810 <__ccfg+0x324868>
    480c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    4810:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    4814:	0d000000 	stceq	0, cr0, [r0, #-0]
    4818:	000016e2 	andeq	r1, r0, r2, ror #13
    481c:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    4820:	04000004 	streq	r0, [r0], #-4
    4824:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    4828:	03000004 	movweq	r0, #4
    482c:	000017ce 	andeq	r1, r0, lr, asr #15
    4830:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    4834:	03000004 	movweq	r0, #4
    4838:	000018d3 	ldrdeq	r1, [r0], -r3
    483c:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    4840:	0b000004 	bleq	4858 <AuxAdiDdiSafeWrite.constprop.1+0x20>
    4844:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    4848:	00000536 	andeq	r0, r0, r6, lsr r5
    484c:	0018750c 	andseq	r7, r8, ip, lsl #10
    4850:	09400900 	stmdbeq	r0, {r8, fp}^
    4854:	000000cd 	andeq	r0, r0, sp, asr #1
    4858:	000f0102 	andeq	r0, pc, r2, lsl #2
    485c:	0019250c 	andseq	r2, r9, ip, lsl #10
    4860:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    4864:	000000cd 	andeq	r0, r0, sp, asr #1
    4868:	000e0102 	andeq	r0, lr, r2, lsl #2
    486c:	0017f00c 	andseq	pc, r7, ip
    4870:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    4874:	000000cd 	andeq	r0, r0, sp, asr #1
    4878:	000d0102 	andeq	r0, sp, r2, lsl #2
    487c:	0018850c 	andseq	r8, r8, ip, lsl #10
    4880:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    4884:	000000cd 	andeq	r0, r0, sp, asr #1
    4888:	00060702 	andeq	r0, r6, r2, lsl #14
    488c:	0018e10c 	andseq	lr, r8, ip, lsl #2
    4890:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    4894:	000000cd 	andeq	r0, r0, sp, asr #1
    4898:	00030302 	andeq	r0, r3, r2, lsl #6
    489c:	0018670c 	andseq	r6, r8, ip, lsl #14
    48a0:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    48a4:	000000cd 	andeq	r0, r0, sp, asr #1
    48a8:	00000302 	andeq	r0, r0, r2, lsl #6
    48ac:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    48b0:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    48b4:	06180000 	ldreq	r0, [r8], -r0
    48b8:	09000006 	stmdbeq	r0, {r1, r2}
    48bc:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    48c0:	62190000 	andsvs	r0, r9, #0
    48c4:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    48c8:	000004cc 	andeq	r0, r0, ip, asr #9
    48cc:	16e70300 	strbtne	r0, [r7], r0, lsl #6
    48d0:	47090000 	strmi	r0, [r9, -r0]
    48d4:	00053603 	andeq	r3, r5, r3, lsl #12
    48d8:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    48dc:	05840550 	streq	r0, [r4, #1360]	; 0x550
    48e0:	07180000 	ldreq	r0, [r8, -r0]
    48e4:	09000019 	stmdbeq	r0, {r0, r3, r4}
    48e8:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    48ec:	31180000 	tstcc	r8, r0
    48f0:	09000018 	stmdbeq	r0, {r3, r4}
    48f4:	03550b52 	cmpeq	r5, #83968	; 0x14800
    48f8:	16000000 	strne	r0, [r0], -r0
    48fc:	00001916 	andeq	r1, r0, r6, lsl r9
    4900:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    4904:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    4908:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    490c:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    4910:	0d000000 	stceq	0, cr0, [r0, #-0]
    4914:	000018e8 	andeq	r1, r0, r8, ror #17
    4918:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    491c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4920:	0018c80d 	andseq	ip, r8, sp, lsl #16
    4924:	10680900 	rsbne	r0, r8, r0, lsl #18
    4928:	00000556 	andeq	r0, r0, r6, asr r5
    492c:	dc03000a 	stcle	0, cr0, [r3], {10}
    4930:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    4934:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    4938:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    493c:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    4940:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    4944:	00001825 	andeq	r1, r0, r5, lsr #16
    4948:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    494c:	00000004 	andeq	r0, r0, r4
    4950:	0018b40d 	andseq	fp, r8, sp, lsl #8
    4954:	11830900 	orrne	r0, r3, r0, lsl #18
    4958:	00000556 	andeq	r0, r0, r6, asr r5
    495c:	57030008 	strpl	r0, [r3, -r8]
    4960:	09000018 	stmdbeq	r0, {r3, r4}
    4964:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    4968:	70140000 	andsvc	r0, r4, r0
    496c:	08000003 	stmdaeq	r0, {r0, r1}
    4970:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    4974:	01000000 	mrseq	r0, (UNDEF: 0)
    4978:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    497c:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    4980:	1c000006 	stcne	0, cr0, [r0], {6}
    4984:	00003c91 	muleq	r0, r1, ip
    4988:	07030708 	streq	r0, [r3, -r8, lsl #14]
    498c:	000000cd 	andeq	r0, r0, sp, asr #1
    4990:	0fc21c00 	svceq	0x00c21c00
    4994:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    4998:	010a0803 	tsteq	sl, r3, lsl #16
    499c:	00040000 	andeq	r0, r4, r0
    49a0:	000a0c11 	andeq	r0, sl, r1, lsl ip
    49a4:	03090800 	movweq	r0, #38912	; 0x9800
    49a8:	00060203 	andeq	r0, r6, r3, lsl #4
    49ac:	00201d00 	eoreq	r1, r0, r0, lsl #26
    49b0:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    49b4:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    49b8:	1c000006 	stcne	0, cr0, [r0], {6}
    49bc:	00001f19 	andeq	r1, r0, r9, lsl pc
    49c0:	08031408 	stmdaeq	r3, {r3, sl, ip}
    49c4:	000000cd 	andeq	r0, r0, sp, asr #1
    49c8:	0bea1c00 	bleq	ffa8b9d0 <_estack+0xdfa869d0>
    49cc:	15080000 	strne	r0, [r8, #-0]
    49d0:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    49d4:	1c020000 	stcne	0, cr0, [r2], {-0}
    49d8:	00004c7e 	andeq	r4, r0, lr, ror ip
    49dc:	0b031608 	bleq	ca204 <__ccfg+0xaa25c>
    49e0:	000002e4 	andeq	r0, r0, r4, ror #5
    49e4:	47441c04 	strbmi	r1, [r4, -r4, lsl #24]
    49e8:	17080000 	strne	r0, [r8, -r0]
    49ec:	010a0903 	tsteq	sl, r3, lsl #18
    49f0:	1c080000 	stcne	0, cr0, [r8], {-0}
    49f4:	0000000f 	andeq	r0, r0, pc
    49f8:	0f031808 	svceq	0x00031808
    49fc:	00000699 	muleq	r0, r9, r6
    4a00:	09601c0c 	stmdbeq	r0!, {r2, r3, sl, fp, ip}^
    4a04:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4a08:	06a91503 	strteq	r1, [r9], r3, lsl #10
    4a0c:	002c0000 	eoreq	r0, ip, r0
    4a10:	0006290f 	andeq	r2, r6, pc, lsl #18
    4a14:	0006a900 	andeq	sl, r6, r0, lsl #18
    4a18:	00881e00 	addeq	r1, r8, r0, lsl #28
    4a1c:	00030000 	andeq	r0, r3, r0
    4a20:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    4a24:	df110000 	svcle	0x00110000
    4a28:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    4a2c:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    4a30:	14000006 	strne	r0, [r0], #-6
    4a34:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    4a38:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    4a3c:	000006cb 	andeq	r0, r0, fp, asr #13
    4a40:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    4a44:	000006af 	andeq	r0, r0, pc, lsr #13
    4a48:	0007120e 	andeq	r1, r7, lr, lsl #4
    4a4c:	131d0a00 	tstne	sp, #0, 20
    4a50:	000000cd 	andeq	r0, r0, sp, asr #1
    4a54:	e50e0101 	str	r0, [lr, #-257]	; 0xfffffeff
    4a58:	0a000002 	beq	4a68 <__aeabi_lmul+0x108>
    4a5c:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    4a60:	01010000 	mrseq	r0, (UNDEF: 1)
    4a64:	000c6c0e 	andeq	r6, ip, lr, lsl #24
    4a68:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    4a6c:	000000de 	ldrdeq	r0, [r0], -lr
    4a70:	8a0e0101 	bhi	384e7c <__ccfg+0x364ed4>
    4a74:	0a00000c 	beq	4aac <__aeabi_lmul+0x14c>
    4a78:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    4a7c:	01010000 	mrseq	r0, (UNDEF: 1)
    4a80:	00172d03 	andseq	r2, r7, r3, lsl #26
    4a84:	0f0e0b00 	svceq	0x000e0b00
    4a88:	00000715 	andeq	r0, r0, r5, lsl r7
    4a8c:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    4a90:	01150000 	tsteq	r5, r0
    4a94:	00000081 	andeq	r0, r0, r1, lsl #1
    4a98:	00000730 	andeq	r0, r0, r0, lsr r7
    4a9c:	00008113 	andeq	r8, r0, r3, lsl r1
    4aa0:	01161300 	tsteq	r6, r0, lsl #6
    4aa4:	0f000000 	svceq	0x00000000
    4aa8:	00000740 	andeq	r0, r0, r0, asr #14
    4aac:	00000740 	andeq	r0, r0, r0, asr #14
    4ab0:	0000881e 	andeq	r8, r0, lr, lsl r8
    4ab4:	0a000700 	beq	66bc <__exidx_end+0xbe0>
    4ab8:	0005e704 	andeq	lr, r5, r4, lsl #14
    4abc:	17fd1f00 	ldrbne	r1, [sp, r0, lsl #30]!
    4ac0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4ac4:	00073015 	andeq	r3, r7, r5, lsl r0
    4ac8:	a0030500 	andge	r0, r3, r0, lsl #10
    4acc:	0f200005 	svceq	0x00200005
    4ad0:	00000709 	andeq	r0, r0, r9, lsl #14
    4ad4:	00000768 	andeq	r0, r0, r8, ror #14
    4ad8:	0000881e 	andeq	r8, r0, lr, lsl r8
    4adc:	1f000200 	svcne	0x00000200
    4ae0:	0000186c 	andeq	r1, r0, ip, ror #16
    4ae4:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    4ae8:	05000007 	streq	r0, [r0, #-7]
    4aec:	0005cc03 	andeq	ip, r5, r3, lsl #24
    4af0:	078a0f20 	streq	r0, [sl, r0, lsr #30]
    4af4:	078a0000 	streq	r0, [sl, r0]
    4af8:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4afc:	02000000 	andeq	r0, r0, #0
    4b00:	c0040a00 	andgt	r0, r4, r0, lsl #20
    4b04:	1f000004 	svcne	0x00000004
    4b08:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    4b0c:	7a13190c 	bvc	4caf44 <__ccfg+0x4aaf9c>
    4b10:	05000007 	streq	r0, [r0, #-7]
    4b14:	0005c003 	andeq	ip, r5, r3
    4b18:	00810f20 	addeq	r0, r1, r0, lsr #30
    4b1c:	07b20000 	ldreq	r0, [r2, r0]!
    4b20:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4b24:	02000000 	andeq	r0, r0, #0
    4b28:	17901f00 	ldrne	r1, [r0, r0, lsl #30]
    4b2c:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    4b30:	0007a20f 	andeq	sl, r7, pc, lsl #4
    4b34:	d8030500 	stmdale	r3, {r8, sl}
    4b38:	0f200005 	svceq	0x00200005
    4b3c:	000007d4 	ldrdeq	r0, [r0], -r4
    4b40:	000007d4 	ldrdeq	r0, [r0], -r4
    4b44:	0000881e 	andeq	r8, r0, lr, lsl r8
    4b48:	0a000200 	beq	5350 <patchGenfskRfe+0x1f8>
    4b4c:	00048104 	andeq	r8, r4, r4, lsl #2
    4b50:	190e1f00 	stmdbne	lr, {r8, r9, sl, fp, ip}
    4b54:	230c0000 	movwcs	r0, #49152	; 0xc000
    4b58:	0007c41b 	andeq	ip, r7, fp, lsl r4
    4b5c:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    4b60:	20200005 	eorcs	r0, r0, r5
    4b64:	00187c01 	andseq	r7, r8, r1, lsl #24
    4b68:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    4b6c:	241c0101 	ldrcs	r0, [ip], #-257	; 0xfffffeff
    4b70:	241e0000 	ldrcs	r0, [lr], #-0
    4b74:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b78:	179f0121 	ldrne	r0, [pc, r1, lsr #2]
    4b7c:	05010000 	streq	r0, [r1, #-0]
    4b80:	81010105 	tsthi	r1, r5, lsl #2
	...
    4b8c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b90:	0008639c 	muleq	r8, ip, r3
    4b94:	68702200 	ldmdavs	r0!, {r9, sp}^
    4b98:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    4b9c:	00812d05 	addeq	r2, r1, r5, lsl #26
    4ba0:	134c0000 	movtne	r0, #49152	; 0xc000
    4ba4:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    4ba8:	00000011 	andeq	r0, r0, r1, lsl r0
    4bac:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4bb0:	01000009 	tsteq	r0, r9
    4bb4:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    4bb8:	00001160 	andeq	r1, r0, r0, ror #2
    4bbc:	0000136a 	andeq	r1, r0, sl, ror #6
    4bc0:	00093825 	andeq	r3, r9, r5, lsr #16
    4bc4:	116b2600 	cmnne	fp, r0, lsl #12
    4bc8:	137d0000 	cmnne	sp, #0
    4bcc:	76260000 	strtvc	r0, [r6], -r0
    4bd0:	9b000011 	blls	4c1c <__aeabi_lmul+0x2bc>
    4bd4:	00000013 	andeq	r0, r0, r3, lsl r0
    4bd8:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4bdc:	000018a9 	andeq	r1, r0, r9, lsr #17
    4be0:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    4be4:	0023e001 	eoreq	lr, r3, r1
    4be8:	00241c00 	eoreq	r1, r4, r0, lsl #24
    4bec:	9d9c0100 	ldflss	f0, [ip]
    4bf0:	22000008 	andcs	r0, r0, #8
    4bf4:	00746b70 	rsbseq	r6, r4, r0, ror fp
    4bf8:	3004fa01 	andcc	pc, r4, r1, lsl #20
    4bfc:	00000116 	andeq	r0, r0, r6, lsl r1
    4c00:	000013c5 	andeq	r1, r0, r5, asr #7
    4c04:	01006228 	tsteq	r0, r8, lsr #4
    4c08:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    4c0c:	e3000008 	movw	r0, #8
    4c10:	00000013 	andeq	r0, r0, r3, lsl r0
    4c14:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    4c18:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4c1c:	000016f5 	strdeq	r1, [r0], -r5
    4c20:	0104e901 	tsteq	r4, r1, lsl #18
    4c24:	00011601 	andeq	r1, r1, r1, lsl #12
    4c28:	0023ac00 	eoreq	sl, r3, r0, lsl #24
    4c2c:	0023e000 	eoreq	lr, r3, r0
    4c30:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    4c34:	22000008 	andcs	r0, r0, #8
    4c38:	00796870 	rsbseq	r6, r9, r0, ror r8
    4c3c:	2f04e901 	svccs	0x0004e901
    4c40:	00000081 	andeq	r0, r0, r1, lsl #1
    4c44:	00001401 	andeq	r1, r0, r1, lsl #8
    4c48:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    4c4c:	0b04ed01 	bleq	140058 <__ccfg+0x1200b0>
    4c50:	0000078a 	andeq	r0, r0, sl, lsl #15
    4c54:	0000141f 	andeq	r1, r0, pc, lsl r4
    4c58:	01006228 	tsteq	r0, r8, lsr #4
    4c5c:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    4c60:	32000008 	andcc	r0, r0, #8
    4c64:	00000014 	andeq	r0, r0, r4, lsl r0
    4c68:	17730121 	ldrbne	r0, [r3, -r1, lsr #2]!
    4c6c:	d2010000 	andle	r0, r1, #0
    4c70:	16010104 	strne	r0, [r1], -r4, lsl #2
    4c74:	6c000001 	stcvs	0, cr0, [r0], {1}
    4c78:	ac000023 	stcge	0, cr0, [r0], {35}	; 0x23
    4c7c:	01000023 	tsteq	r0, r3, lsr #32
    4c80:	0009509c 	muleq	r9, ip, r0
    4c84:	68702200 	ldmdavs	r0!, {r9, sp}^
    4c88:	d2010079 	andle	r0, r1, #121	; 0x79
    4c8c:	00812f04 	addeq	r2, r1, r4, lsl #30
    4c90:	14510000 	ldrbne	r0, [r1], #-0
    4c94:	6c220000 	stcvs	0, cr0, [r2], #-0
    4c98:	01006e65 	tsteq	r0, r5, ror #28
    4c9c:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    4ca0:	6f000004 	svcvs	0x00000004
    4ca4:	28000014 	stmdacs	r0, {r2, r4}
    4ca8:	0100716f 	tsteq	r0, pc, ror #2
    4cac:	8a0b04d7 	bhi	2c6010 <__ccfg+0x2a6068>
    4cb0:	8d000007 	stchi	0, cr0, [r0, #-28]	; 0xffffffe4
    4cb4:	28000014 	stmdacs	r0, {r2, r4}
    4cb8:	d8010062 	stmdale	r1, {r1, r5, r6}
    4cbc:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    4cc0:	14ab0000 	strtne	r0, [fp], #0
    4cc4:	21000000 	mrscs	r0, (UNDEF: 0)
    4cc8:	0018fc01 	andseq	pc, r8, r1, lsl #24
    4ccc:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4cd0:	00810101 	addeq	r0, r1, r1, lsl #2
    4cd4:	22d00000 	sbcscs	r0, r0, #0
    4cd8:	236c0000 	cmncs	ip, #0
    4cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ce0:	000009eb 	andeq	r0, r0, fp, ror #19
    4ce4:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4ce8:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4cec:	0000812b 	andeq	r8, r0, fp, lsr #2
    4cf0:	0014d500 	andseq	sp, r4, r0, lsl #10
    4cf4:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4cf8:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    4cfc:	00000116 	andeq	r0, r0, r6, lsl r1
    4d00:	00001509 	andeq	r1, r0, r9, lsl #10
    4d04:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4d08:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4d0c:	0000813f 	andeq	r8, r0, pc, lsr r1
    4d10:	00153d00 	andseq	r3, r5, r0, lsl #26
    4d14:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    4d18:	a6010067 	strge	r0, [r1], -r7, rrx
    4d1c:	00810604 	addeq	r0, r1, r4, lsl #12
    4d20:	64280000 	strtvs	r0, [r8], #-0
    4d24:	01007073 	tsteq	r0, r3, ror r0
    4d28:	810b04a6 	smlatbhi	fp, r6, r4, r0
    4d2c:	71000000 	mrsvc	r0, (UNDEF: 0)
    4d30:	2a000015 	bcs	4d8c <__aeabi_lmul+0x42c>
    4d34:	00736573 	rsbseq	r6, r3, r3, ror r5
    4d38:	1004a601 	andne	sl, r4, r1, lsl #12
    4d3c:	00000081 	andeq	r0, r0, r1, lsl #1
    4d40:	2a509102 	bcs	1429150 <__ccfg+0x14091a8>
    4d44:	01007061 	tsteq	r0, r1, rrx
    4d48:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    4d4c:	02000003 	andeq	r0, r0, #3
    4d50:	63285491 			; <UNDEFINED> instruction: 0x63285491
    4d54:	04a80100 	strteq	r0, [r8], #256	; 0x100
    4d58:	0001160a 	andeq	r1, r1, sl, lsl #12
    4d5c:	00158f00 	andseq	r8, r5, r0, lsl #30
    4d60:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4d64:	00001722 	andeq	r1, r0, r2, lsr #14
    4d68:	01048701 	tsteq	r4, r1, lsl #14
    4d6c:	00008101 	andeq	r8, r0, r1, lsl #2
    4d70:	00228000 	eoreq	r8, r2, r0
    4d74:	0022d000 	eoreq	sp, r2, r0
    4d78:	4a9c0100 	bmi	fe705180 <_estack+0xde700180>
    4d7c:	2200000a 	andcs	r0, r0, #10
    4d80:	00796870 	rsbseq	r6, r9, r0, ror r8
    4d84:	2b048701 	blcs	126990 <__ccfg+0x1069e8>
    4d88:	00000081 	andeq	r0, r0, r1, lsl #1
    4d8c:	000015a2 	andeq	r1, r0, r2, lsr #11
    4d90:	00737022 	rsbseq	r7, r3, r2, lsr #32
    4d94:	3a048701 	bcc	1269a0 <__ccfg+0x1069f8>
    4d98:	00000709 	andeq	r0, r0, r9, lsl #14
    4d9c:	000015c0 	andeq	r1, r0, r0, asr #11
    4da0:	000e802b 	andeq	r8, lr, fp, lsr #32
    4da4:	04870100 	streq	r0, [r7], #256	; 0x100
    4da8:	00008142 	andeq	r8, r0, r2, asr #2
    4dac:	0015de00 	andseq	sp, r5, r0, lsl #28
    4db0:	00712800 	rsbseq	r2, r1, r0, lsl #16
    4db4:	0b048d01 	bleq	1281c0 <__ccfg+0x108218>
    4db8:	0000078a 	andeq	r0, r0, sl, lsl #15
    4dbc:	000015fc 	strdeq	r1, [r0], -ip
    4dc0:	1c012c00 	stcne	12, cr2, [r1], {-0}
    4dc4:	01000018 	tsteq	r0, r8, lsl r0
    4dc8:	01010386 	smlabbeq	r1, r6, r3, r0
    4dcc:	00000116 	andeq	r0, r0, r6, lsl r1
    4dd0:	000a9101 	andeq	r9, sl, r1, lsl #2
    4dd4:	1d962d00 	ldcne	13, cr2, [r6]
    4dd8:	86010000 	strhi	r0, [r1], -r0
    4ddc:	00812d03 	addeq	r2, r1, r3, lsl #26
    4de0:	642e0000 	strtvs	r0, [lr], #-0
    4de4:	01007073 	tsteq	r0, r3, ror r0
    4de8:	81370386 	teqhi	r7, r6, lsl #7
    4dec:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4df0:	00736573 	rsbseq	r6, r3, r3, ror r5
    4df4:	40038601 	andmi	r8, r3, r1, lsl #12
    4df8:	00000081 	andeq	r0, r0, r1, lsl #1
    4dfc:	01007029 	tsteq	r0, r9, lsr #32
    4e00:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    4e04:	00000008 	andeq	r0, r0, r8
    4e08:	17150127 	ldrne	r0, [r5, -r7, lsr #2]
    4e0c:	7f010000 	svcvc	0x00010000
    4e10:	00010103 	andeq	r0, r1, r3, lsl #2
    4e14:	00000000 	andeq	r0, r0, r0
    4e18:	01000000 	mrseq	r0, (UNDEF: 0)
    4e1c:	000acb9c 	muleq	sl, ip, fp
    4e20:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4e24:	32037f01 	andcc	r7, r3, #1, 30
    4e28:	00000116 	andeq	r0, r0, r6, lsl r1
    4e2c:	0000162b 	andeq	r1, r0, fp, lsr #12
    4e30:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    4e34:	037f0100 	cmneq	pc, #0, 2
    4e38:	00008139 	andeq	r8, r0, r9, lsr r1
    4e3c:	00163e00 	andseq	r3, r6, r0, lsl #28
    4e40:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4e44:	0000188d 	andeq	r1, r0, sp, lsl #17
    4e48:	01036b01 	tsteq	r3, r1, lsl #22
    4e4c:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    4e58:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    4e5c:	2200000b 	andcs	r0, r0, #11
    4e60:	6b010070 	blvs	45028 <__ccfg+0x25080>
    4e64:	01163303 	tsteq	r6, r3, lsl #6
    4e68:	16510000 	ldrbne	r0, [r1], -r0
    4e6c:	ef2b0000 	svc	0x002b0000
    4e70:	01000018 	tsteq	r0, r8, lsl r0
    4e74:	813a036b 	teqhi	sl, fp, ror #6
    4e78:	6f000000 	svcvs	0x00000000
    4e7c:	28000016 	stmdacs	r0, {r1, r2, r4}
    4e80:	01006370 	tsteq	r0, r0, ror r3
    4e84:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    4e88:	8d000008 	stchi	0, cr0, [r0, #-32]	; 0xffffffe0
    4e8c:	29000016 	stmdbcs	r0, {r1, r2, r4}
    4e90:	01007070 	tsteq	r0, r0, ror r0
    4e94:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    4e98:	00000008 	andeq	r0, r0, r8
    4e9c:	17ac0127 	strne	r0, [ip, r7, lsr #2]!
    4ea0:	63010000 	movwvs	r0, #4096	; 0x1000
    4ea4:	00010103 	andeq	r0, r1, r3, lsl #2
    4ea8:	00000000 	andeq	r0, r0, r0
    4eac:	01000000 	mrseq	r0, (UNDEF: 0)
    4eb0:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    4eb4:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4eb8:	31036301 	tstcc	r3, r1, lsl #6
    4ebc:	00000116 	andeq	r0, r0, r6, lsl r1
    4ec0:	000016ab 	andeq	r1, r0, fp, lsr #13
    4ec4:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4ec8:	03630100 	cmneq	r3, #0, 2
    4ecc:	00008138 	andeq	r8, r0, r8, lsr r1
    4ed0:	0016c900 	andseq	ip, r6, r0, lsl #18
    4ed4:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4ed8:	00001898 	muleq	r0, r8, r8
    4edc:	01035a01 	tsteq	r3, r1, lsl #20
    4ee0:	00000001 	andeq	r0, r0, r1
    4ee4:	00000000 	andeq	r0, r0, r0
    4ee8:	999c0100 	ldmibls	ip, {r8}
    4eec:	2200000b 	andcs	r0, r0, #11
    4ef0:	5a010070 	bpl	450b8 <__ccfg+0x25110>
    4ef4:	01163103 	tsteq	r6, r3, lsl #2
    4ef8:	16e70000 	strbtne	r0, [r7], r0
    4efc:	73220000 			; <UNDEFINED> instruction: 0x73220000
    4f00:	01007365 	tsteq	r0, r5, ror #6
    4f04:	8138035a 	teqhi	r8, sl, asr r3
    4f08:	05000000 	streq	r0, [r0, #-0]
    4f0c:	00000017 	andeq	r0, r0, r7, lsl r0
    4f10:	192e012c 	stmdbne	lr!, {r2, r3, r5, r8}
    4f14:	52010000 	andpl	r0, r1, #0
    4f18:	81010103 	tsthi	r1, r3, lsl #2
    4f1c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f20:	00000bd5 	ldrdeq	r0, [r0], -r5
    4f24:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    4f28:	03520100 	cmpeq	r2, #0, 2
    4f2c:	0000812d 	andeq	r8, r0, sp, lsr #2
    4f30:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    4f34:	52010074 	andpl	r0, r1, #116	; 0x74
    4f38:	00813603 	addeq	r3, r1, r3, lsl #12
    4f3c:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    4f40:	01006772 	tsteq	r0, r2, ror r7
    4f44:	16430352 			; <UNDEFINED> instruction: 0x16430352
    4f48:	00000001 	andeq	r0, r0, r1
    4f4c:	17000121 	strne	r0, [r0, -r1, lsr #2]
    4f50:	33010000 	movwcc	r0, #4096	; 0x1000
    4f54:	81010103 	tsthi	r1, r3, lsl #2
    4f58:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    4f5c:	18000021 	stmdane	r0, {r0, r5}
    4f60:	01000022 	tsteq	r0, r2, lsr #32
    4f64:	000c3e9c 	muleq	ip, ip, lr
    4f68:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    4f6c:	03330100 	teqeq	r3, #0, 2
    4f70:	0000812c 	andeq	r8, r0, ip, lsr #2
    4f74:	00172300 	andseq	r2, r7, r0, lsl #6
    4f78:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    4f7c:	33010074 	movwcc	r0, #4212	; 0x1074
    4f80:	00813403 	addeq	r3, r1, r3, lsl #8
    4f84:	17620000 	strbne	r0, [r2, -r0]!
    4f88:	61220000 			; <UNDEFINED> instruction: 0x61220000
    4f8c:	01006772 	tsteq	r0, r2, ror r7
    4f90:	16410333 			; <UNDEFINED> instruction: 0x16410333
    4f94:	8b000001 	blhi	4fa0 <__aeabi_lmul+0x640>
    4f98:	2f000017 	svccs	0x00000017
    4f9c:	000021c6 	andeq	r2, r0, r6, asr #3
    4fa0:	000021d4 	ldrdeq	r2, [r0], -r4
    4fa4:	01007028 	tsteq	r0, r8, lsr #32
    4fa8:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    4fac:	b4000007 	strlt	r0, [r0], #-7
    4fb0:	00000017 	andeq	r0, r0, r7, lsl r0
    4fb4:	87012700 	strhi	r2, [r1, -r0, lsl #14]
    4fb8:	01000017 	tsteq	r0, r7, lsl r0
    4fbc:	0101032b 	tsteq	r1, fp, lsr #6
	...
    4fc8:	0c679c01 	stcleq	12, cr9, [r7], #-4
    4fcc:	70220000 	eorvc	r0, r2, r0
    4fd0:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4fd4:	0001162e 	andeq	r1, r1, lr, lsr #12
    4fd8:	0017c700 	andseq	ip, r7, r0, lsl #14
    4fdc:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4fe0:	00001843 	andeq	r1, r0, r3, asr #16
    4fe4:	01031a01 	tsteq	r3, r1, lsl #20
    4fe8:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4ff4:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    4ff8:	2200000c 	andcs	r0, r0, #12
    4ffc:	1a010070 	bne	451c4 <__ccfg+0x2521c>
    5000:	01162e03 	tsteq	r6, r3, lsl #28
    5004:	17e50000 	strbne	r0, [r5, r0]!
    5008:	62220000 	eorvs	r0, r2, #0
    500c:	01006675 	tsteq	r0, r5, ror r6
    5010:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    5014:	03000002 	movweq	r0, #2
    5018:	22000018 	andcs	r0, r0, #24
    501c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5020:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    5024:	00000081 	andeq	r0, r0, r1, lsl #1
    5028:	00001816 	andeq	r1, r0, r6, lsl r8
    502c:	01006229 	tsteq	r0, r9, lsr #4
    5030:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    5034:	00000008 	andeq	r0, r0, r8
    5038:	170c0121 	strne	r0, [ip, -r1, lsr #2]
    503c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5040:	81010103 	tsthi	r1, r3, lsl #2
    5044:	50000000 	andpl	r0, r0, r0
    5048:	8a000021 	bhi	50d4 <__pi_hex_enc_table+0xa7>
    504c:	01000021 	tsteq	r0, r1, lsr #32
    5050:	000d1b9c 	muleq	sp, ip, fp
    5054:	00702200 	rsbseq	r2, r0, r0, lsl #4
    5058:	2d030801 	stccs	8, cr0, [r3, #-4]
    505c:	00000116 	andeq	r0, r0, r6, lsl r1
    5060:	00001834 	andeq	r1, r0, r4, lsr r8
    5064:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    5068:	03080100 	movweq	r0, #33024	; 0x8100
    506c:	000d1b36 	andeq	r1, sp, r6, lsr fp
    5070:	00185200 	andseq	r5, r8, r0, lsl #4
    5074:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    5078:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    507c:	00813f03 	addeq	r3, r1, r3, lsl #30
    5080:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    5084:	62290000 	eorvs	r0, r9, #0
    5088:	030c0100 	movweq	r0, #49408	; 0xc100
    508c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5090:	040a0000 	streq	r0, [sl], #-0
    5094:	000000e3 	andeq	r0, r0, r3, ror #1
    5098:	183a0121 	ldmdane	sl!, {r0, r5, r8}
    509c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    50a0:	16010102 	strne	r0, [r1], -r2, lsl #2
    50a4:	94000001 	strls	r0, [r0], #-1
    50a8:	50000020 	andpl	r0, r0, r0, lsr #32
    50ac:	01000021 	tsteq	r0, r1, lsr #32
    50b0:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    50b4:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    50b8:	cd010000 	stcgt	0, cr0, [r1, #-0]
    50bc:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    50c0:	188e0000 	stmne	lr, {}	; <UNPREDICTABLE>
    50c4:	66220000 	strtvs	r0, [r2], -r0
    50c8:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    50cc:	00813902 	addeq	r3, r1, r2, lsl #18
    50d0:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    50d4:	e82b0000 	stmda	fp!, {}	; <UNPREDICTABLE>
    50d8:	01000018 	tsteq	r0, r8, lsl r0
    50dc:	814102cd 	smlalbthi	r0, r1, sp, r2
    50e0:	d5000000 	strle	r0, [r0, #-0]
    50e4:	22000018 	andcs	r0, r0, #24
    50e8:	00677275 	rsbeq	r7, r7, r5, ror r2
    50ec:	1102ce01 	tstne	r2, r1, lsl #28
    50f0:	000000c1 	andeq	r0, r0, r1, asr #1
    50f4:	0000191f 	andeq	r1, r0, pc, lsl r9
    50f8:	01006228 	tsteq	r0, r8, lsr #4
    50fc:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    5100:	32000008 	andcc	r0, r0, #8
    5104:	30000019 	andcc	r0, r0, r9, lsl r0
    5108:	0000182c 	andeq	r1, r0, ip, lsr #16
    510c:	0b02d001 	bleq	b9118 <__ccfg+0x99170>
    5110:	00000355 	andeq	r0, r0, r5, asr r3
    5114:	2a649102 	bcs	1929524 <__ccfg+0x190957c>
    5118:	d1010073 	tstle	r1, r3, ror r0
    511c:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    5120:	57010000 	strpl	r0, [r1, -r0]
    5124:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    5128:	02d20100 	sbcseq	r0, r2, #0, 2
    512c:	00008106 	andeq	r8, r0, r6, lsl #2
    5130:	00195000 	andseq	r5, r9, r0
    5134:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5138:	00001809 	andeq	r1, r0, r9, lsl #16
    513c:	0102a401 	tsteq	r2, r1, lsl #8
    5140:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    514c:	729c0100 	addsvc	r0, ip, #0, 2
    5150:	2200000e 	andcs	r0, r0, #14
    5154:	01006466 	tsteq	r0, r6, ror #8
    5158:	812a02a4 	smulwbhi	sl, r4, r2
    515c:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    5160:	2b000019 	blcs	51cc <patchGenfskRfe+0x74>
    5164:	000018ef 	andeq	r1, r0, pc, ror #17
    5168:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    516c:	00000081 	andeq	r0, r0, r1, lsl #1
    5170:	000019ad 	andeq	r1, r0, sp, lsr #19
    5174:	01007328 	tsteq	r0, r8, lsr #6
    5178:	400d02a8 	andmi	r0, sp, r8, lsr #5
    517c:	e1000007 	tst	r0, r7
    5180:	28000019 	stmdacs	r0, {r0, r3, r4}
    5184:	0100716e 	tsteq	r0, lr, ror #2
    5188:	810602a9 	smlatbhi	r6, r9, r2, r0
    518c:	46000000 	strmi	r0, [r0], -r0
    5190:	2800001a 	stmdacs	r0, {r1, r3, r4}
    5194:	01007172 	tsteq	r0, r2, ror r1
    5198:	8a0b02aa 	bhi	2c5c48 <__ccfg+0x2a5ca0>
    519c:	64000007 	strvs	r0, [r0], #-7
    51a0:	2800001a 	stmdacs	r0, {r1, r3, r4}
    51a4:	ab010062 	blge	45334 <__ccfg+0x2538c>
    51a8:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    51ac:	1a820000 	bne	fe0851b4 <_estack+0xde0801b4>
    51b0:	f7310000 			; <UNDEFINED> instruction: 0xf7310000
    51b4:	01000017 	tsteq	r0, r7, lsl r0
    51b8:	000102c0 	andeq	r0, r1, r0, asr #5
    51bc:	32000000 	andcc	r0, r0, #0
    51c0:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    51cc:	0a02bb01 	beq	b3dd8 <__ccfg+0x93e30>
    51d0:	00116033 	andseq	r6, r1, r3, lsr r0
    51d4:	116b2600 	cmnne	fp, r0, lsl #12
    51d8:	1aab0000 	bne	feac51e0 <_estack+0xdeac01e0>
    51dc:	76260000 	strtvc	r0, [r6], -r0
    51e0:	be000011 	mcrlt	0, 0, r0, cr0, cr1, {0}
    51e4:	0000001a 	andeq	r0, r0, sl, lsl r0
    51e8:	d8012100 	stmdale	r1, {r8, sp}
    51ec:	01000016 	tsteq	r0, r6, lsl r0
    51f0:	0101027d 	tsteq	r1, sp, ror r2
    51f4:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    5200:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    5204:	66220000 	strtvs	r0, [r2], -r0
    5208:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    520c:	00812a02 	addeq	r2, r1, r2, lsl #20
    5210:	1ad10000 	bne	ff445218 <_estack+0xdf440218>
    5214:	ef2b0000 	svc	0x002b0000
    5218:	01000018 	tsteq	r0, r8, lsl r0
    521c:	8132027d 	teqhi	r2, sp, ror r2
    5220:	05000000 	streq	r0, [r0, #-0]
    5224:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    5228:	81010073 	tsthi	r1, r3, ror r0
    522c:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    5230:	1b2e0000 	blne	b85238 <__ccfg+0xb65290>
    5234:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    5238:	82010071 	andhi	r0, r1, #113	; 0x71
    523c:	00810602 	addeq	r0, r1, r2, lsl #12
    5240:	1b930000 	blne	fe4c5248 <_estack+0xde4c0248>
    5244:	72280000 	eorvc	r0, r8, #0
    5248:	83010071 	movwhi	r0, #4209	; 0x1071
    524c:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    5250:	1bb10000 	blne	fec45258 <_estack+0xdec40258>
    5254:	62280000 	eorvs	r0, r8, #0
    5258:	02840100 	addeq	r0, r4, #0, 2
    525c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5260:	001bda00 	andseq	sp, fp, r0, lsl #20
    5264:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5268:	000018f4 	strdeq	r1, [r0], -r4
    526c:	01025601 	tsteq	r2, r1, lsl #12
    5270:	00011601 	andeq	r1, r1, r1, lsl #12
    5274:	00201400 	eoreq	r1, r0, r0, lsl #8
    5278:	00209400 	eoreq	r9, r0, r0, lsl #8
    527c:	5c9c0100 	ldfpls	f0, [ip], {0}
    5280:	2b00000f 	blcs	52c4 <patchGenfskRfe+0x16c>
    5284:	00000070 	andeq	r0, r0, r0, ror r0
    5288:	2d025601 	stccs	6, cr5, [r2, #-4]
    528c:	000000cd 	andeq	r0, r0, sp, asr #1
    5290:	00001c0e 	andeq	r1, r0, lr, lsl #24
    5294:	00646622 	rsbeq	r6, r4, r2, lsr #12
    5298:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    529c:	00000081 	andeq	r0, r0, r1, lsl #1
    52a0:	00001c21 	andeq	r1, r0, r1, lsr #24
    52a4:	01007028 	tsteq	r0, r8, lsr #32
    52a8:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    52ac:	60000001 	andvs	r0, r0, r1
    52b0:	2800001c 	stmdacs	r0, {r2, r3, r4}
    52b4:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    52b8:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    52bc:	1c730000 	ldclne	0, cr0, [r3], #-0
    52c0:	72280000 	eorvc	r0, r8, #0
    52c4:	5f010071 	svcpl	0x00010071
    52c8:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    52cc:	1c9c0000 	ldcne	0, cr0, [ip], {0}
    52d0:	21000000 	mrscs	r0, (UNDEF: 0)
    52d4:	0018bf01 	andseq	fp, r8, r1, lsl #30
    52d8:	024a0100 	subeq	r0, sl, #0, 2
    52dc:	00810101 	addeq	r0, r1, r1, lsl #2
    52e0:	1ff00000 	svcne	0x00f00000	; IMB
    52e4:	20140000 	andscs	r0, r4, r0
    52e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    52ec:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    52f0:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    52f4:	024a0100 	subeq	r0, sl, #0, 2
    52f8:	00008129 	andeq	r8, r0, r9, lsr #2
    52fc:	001cd600 	andseq	sp, ip, r0, lsl #12
    5300:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    5304:	024a0100 	subeq	r0, sl, #0, 2
    5308:	0007d43f 	andeq	sp, r7, pc, lsr r4
    530c:	00510100 	subseq	r0, r1, r0, lsl #2
    5310:	184d0121 	stmdane	sp, {r0, r5, r8}^
    5314:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    5318:	81010102 	tsthi	r1, r2, lsl #2
	...
    5324:	01000000 	mrseq	r0, (UNDEF: 0)
    5328:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    532c:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    5330:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    5334:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    5338:	1cf40000 	ldclne	0, cr0, [r4]
    533c:	66220000 	strtvs	r0, [r2], -r0
    5340:	29010064 	stmdbcs	r1, {r2, r5, r6}
    5344:	00813602 	addeq	r3, r1, r2, lsl #12
    5348:	1d120000 	ldcne	0, cr0, [r2, #-0]
    534c:	73280000 			; <UNDEFINED> instruction: 0x73280000
    5350:	022b0100 	eoreq	r0, fp, #0, 2
    5354:	0007400d 	andeq	r4, r7, sp
    5358:	001d5c00 	andseq	r5, sp, r0, lsl #24
    535c:	00622800 	rsbeq	r2, r2, r0, lsl #16
    5360:	0c022c01 	stceq	12, cr2, [r2], {1}
    5364:	0000089d 	muleq	r0, sp, r8
    5368:	00001d6f 	andeq	r1, r0, pc, ror #26
    536c:	7e012100 	adfvcs	f2, f1, f0
    5370:	01000017 	tsteq	r0, r7, lsl r0
    5374:	010101f6 	strdeq	r0, [r1, -r6]
    5378:	00000081 	andeq	r0, r0, r1, lsl #1
    537c:	00001f30 	andeq	r1, r0, r0, lsr pc
    5380:	00001ff0 	strdeq	r1, [r0], -r0
    5384:	10839c01 	addne	r9, r3, r1, lsl #24
    5388:	702b0000 	eorvc	r0, fp, r0
    538c:	01000000 	mrseq	r0, (UNDEF: 0)
    5390:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    5394:	82000000 	andhi	r0, r0, #0
    5398:	2200001d 	andcs	r0, r0, #29
    539c:	00796870 	rsbseq	r6, r9, r0, ror r8
    53a0:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    53a4:	00000081 	andeq	r0, r0, r1, lsl #1
    53a8:	00001dab 	andeq	r1, r0, fp, lsr #27
    53ac:	0018a42b 	andseq	sl, r8, fp, lsr #8
    53b0:	01f60100 	mvnseq	r0, r0, lsl #2
    53b4:	0000813e 	andeq	r8, r0, lr, lsr r1
    53b8:	001e0000 	andseq	r0, lr, r0
    53bc:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    53c0:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    53c4:	00810601 	addeq	r0, r1, r1, lsl #12
    53c8:	1e380000 	cdpne	0, 3, cr0, cr8, cr0, {0}
    53cc:	eb360000 	bl	d853d4 <__ccfg+0xd6542c>
    53d0:	01000017 	tsteq	r0, r7, lsl r0
    53d4:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    53d8:	28000005 	stmdacs	r0, {r0, r2}
    53dc:	fa010073 	blx	455b0 <__ccfg+0x25608>
    53e0:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    53e4:	1e560000 	cdpne	0, 5, cr0, cr6, cr0, {0}
    53e8:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    53ec:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    53f0:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    53f4:	91020000 	mrsls	r0, (UNDEF: 2)
    53f8:	01270054 	qsubeq	r0, r4, r7
    53fc:	00001813 	andeq	r1, r0, r3, lsl r8
    5400:	01013b01 	tsteq	r1, r1, lsl #22
    5404:	001ec001 	andseq	ip, lr, r1
    5408:	001f3000 	andseq	r3, pc, r0
    540c:	bb9c0100 	bllt	fe705814 <_estack+0xde700814>
    5410:	22000010 	andcs	r0, r0, #16
    5414:	3b010070 	blcc	455dc <__ccfg+0x25634>
    5418:	01162e01 	tsteq	r6, r1, lsl #28
    541c:	1ea00000 	cdpne	0, 10, cr0, cr0, cr0, {0}
    5420:	62280000 	eorvs	r0, r8, #0
    5424:	01410100 	mrseq	r0, (UNDEF: 81)
    5428:	00089d0c 	andeq	r9, r8, ip, lsl #26
    542c:	001ec900 	andseq	ip, lr, r0, lsl #18
    5430:	61370000 	teqvs	r7, r0
    5434:	01006270 	tsteq	r0, r0, ror r2
    5438:	01010114 	tsteq	r1, r4, lsl r1
    543c:	0000089d 	muleq	r0, sp, r8
    5440:	00001da8 	andeq	r1, r0, r8, lsr #27
    5444:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
    5448:	11029c01 	tstne	r2, r1, lsl #24
    544c:	962b0000 	strtls	r0, [fp], -r0
    5450:	0100001d 	tsteq	r0, sp, lsl r0
    5454:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    5458:	fd000000 	stc2	0, cr0, [r0, #-0]
    545c:	2a00001e 	bcs	54dc <patchGenfskRfe+0x384>
    5460:	19010070 	stmdbne	r1, {r4, r5, r6}
    5464:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    5468:	50010000 	andpl	r0, r1, r0
    546c:	00736329 	rsbseq	r6, r3, r9, lsr #6
    5470:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    5474:	000000cd 	andeq	r0, r0, sp, asr #1
    5478:	6c723800 	ldclvs	8, cr3, [r2], #-0
    547c:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    5480:	d8010101 	stmdale	r1, {r0, r8}
    5484:	e600001d 			; <UNDEFINED> instruction: 0xe600001d
    5488:	0100001d 	tsteq	r0, sp, lsl r0
    548c:	00112a9c 	mulseq	r1, ip, sl
    5490:	00702200 	rsbseq	r2, r0, r0, lsl #4
    5494:	2b010401 	blcs	464a0 <__ccfg+0x264f8>
    5498:	0000089d 	muleq	r0, sp, r8
    549c:	00001f10 	andeq	r1, r0, r0, lsl pc
    54a0:	171a3900 	ldrne	r3, [sl, -r0, lsl #18]
    54a4:	e0010000 	and	r0, r1, r0
    54a8:	4e010101 	adfmis	f0, f1, f1
    54ac:	3a000011 	bcc	54f8 <patchGenfskRfe+0x3a0>
    54b0:	e0010070 	and	r0, r1, r0, ror r0
    54b4:	00089d2f 	andeq	r9, r8, pc, lsr #26
    54b8:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    54bc:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    54c0:	00000081 	andeq	r0, r0, r1, lsl #1
    54c4:	17993b00 	ldrne	r3, [r9, r0, lsl #22]
    54c8:	cf010000 	svcgt	0x00010000
    54cc:	00810101 	addeq	r0, r1, r1, lsl #2
    54d0:	81010000 	mrshi	r0, (UNDEF: 1)
    54d4:	3a000011 	bcc	5520 <patchGenfskRfe+0x3c8>
    54d8:	0100716f 	tsteq	r0, pc, ror #2
    54dc:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    54e0:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    54e4:	d3010071 	movwle	r0, #4209	; 0x1071
    54e8:	00008106 	andeq	r8, r0, r6, lsl #2
    54ec:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    54f0:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    54f4:	00000008 	andeq	r0, r0, r8
    54f8:	716e653d 	cmnvc	lr, sp, lsr r5
    54fc:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    5500:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    5504:	713a0000 	teqvc	sl, r0
    5508:	2aa80100 	bcs	fea05910 <_estack+0xdea00910>
    550c:	0000078a 	andeq	r0, r0, sl, lsl #15
    5510:	0100703a 	tsteq	r0, sl, lsr r0
    5514:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    5518:	3d000000 	stccc	0, cr0, [r0, #-0]
    551c:	00716564 	rsbseq	r6, r1, r4, ror #10
    5520:	01017f01 	tsteq	r1, r1, lsl #30
    5524:	0011bd01 	andseq	fp, r1, r1, lsl #26
    5528:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    552c:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    5530:	00000008 	andeq	r0, r0, r8
    5534:	0011a43e 	andseq	sl, r1, lr, lsr r4
    5538:	001dbe00 	andseq	fp, sp, r0, lsl #28
    553c:	001dd800 	andseq	sp, sp, r0, lsl #16
    5540:	f29c0100 	vaddw.s16	q0, q6, d0
    5544:	3f000011 	svccc	0x00000011
    5548:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    554c:	a4405001 	strbge	r5, [r0], #-1
    5550:	c4000011 	strgt	r0, [r0], #-17	; 0xffffffef
    5554:	d600001d 			; <UNDEFINED> instruction: 0xd600001d
    5558:	0100001d 	tsteq	r0, sp, lsl r0
    555c:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    5560:	23000011 	movwcs	r0, #17
    5564:	0000001f 	andeq	r0, r0, pc, lsl r0
    5568:	11813e00 	orrne	r3, r1, r0, lsl #28
    556c:	1de80000 	stclne	0, cr0, [r8]
    5570:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    5574:	9c010000 	stcls	0, cr0, [r1], {-0}
    5578:	0000123b 	andeq	r1, r0, fp, lsr r2
    557c:	00118f24 	andseq	r8, r1, r4, lsr #30
    5580:	001f3600 	andseq	r3, pc, r0, lsl #12
    5584:	11992400 	orrsne	r2, r9, r0, lsl #8
    5588:	1f6a0000 	svcne	0x006a0000
    558c:	81400000 	mrshi	r0, (UNDEF: 64)
    5590:	f4000011 	vst4.8	{d0-d3}, [r0 :64], r1
    5594:	fc00001d 	stc2	0, cr0, [r0], {29}
    5598:	0100001d 	tsteq	r0, sp, lsl r0
    559c:	8f2401a8 	svchi	0x002401a8
    55a0:	9e000011 	mcrls	0, 0, r0, cr0, cr1, {0}
    55a4:	2400001f 	strcs	r0, [r0], #-31	; 0xffffffe1
    55a8:	00001199 	muleq	r0, r9, r1
    55ac:	00001fbc 			; <UNDEFINED> instruction: 0x00001fbc
    55b0:	2a3e0000 	bcs	f855b8 <__ccfg+0xf65610>
    55b4:	34000011 	strcc	r0, [r0], #-17	; 0xffffffef
    55b8:	c000001e 	andgt	r0, r0, lr, lsl r0
    55bc:	0100001e 	tsteq	r0, lr, lsl r0
    55c0:	0012809c 	mulseq	r2, ip, r0
    55c4:	11382400 	teqne	r8, r0, lsl #8
    55c8:	1fda0000 	svcne	0x00da0000
    55cc:	42240000 	eormi	r0, r4, #0
    55d0:	2f000011 	svccs	0x00000011
    55d4:	41000020 	tstmi	r0, r0, lsr #32
    55d8:	0000112a 	andeq	r1, r0, sl, lsr #2
    55dc:	00001e68 	andeq	r1, r0, r8, ror #28
    55e0:	00000918 	andeq	r0, r0, r8, lsl r9
    55e4:	3301e001 	movwcc	lr, #4097	; 0x1001
    55e8:	00001142 	andeq	r1, r0, r2, asr #2
    55ec:	00113824 	andseq	r3, r1, r4, lsr #16
    55f0:	00204200 	eoreq	r4, r0, r0, lsl #4
    55f4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    55f8:	00000b99 	muleq	r0, r9, fp
    55fc:	0000218c 	andeq	r2, r0, ip, lsl #3
    5600:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
    5604:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    5608:	ad240000 	stcge	0, cr0, [r4, #-0]
    560c:	6000000b 	andvs	r0, r0, fp
    5610:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
    5614:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    5618:	0000207e 	andeq	r2, r0, lr, ror r0
    561c:	000bc724 	andeq	ip, fp, r4, lsr #14
    5620:	0020a700 	eoreq	sl, r0, r0, lsl #14
    5624:	0b993200 	bleq	fe651e2c <_estack+0xde64ce2c>
    5628:	21a00000 	movcs	r0, r0
    562c:	21a80000 			; <UNDEFINED> instruction: 0x21a80000
    5630:	52010000 	andpl	r0, r1, #0
    5634:	ad330103 	ldfges	f0, [r3, #-12]!
    5638:	2400000b 	strcs	r0, [r0], #-11
    563c:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    5640:	000020d0 	ldrdeq	r2, [r0], -r0
    5644:	000bc724 	andeq	ip, fp, r4, lsr #14
    5648:	0020e300 	eoreq	lr, r0, r0, lsl #6
    564c:	42000000 	andmi	r0, r0, #0
    5650:	00000a4a 	andeq	r0, r0, sl, asr #20
    5654:	00002218 	andeq	r2, r0, r8, lsl r2
    5658:	00002280 	andeq	r2, r0, r0, lsl #5
    565c:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    5660:	f600000a 			; <UNDEFINED> instruction: 0xf600000a
    5664:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
    5668:	00000a6b 	andeq	r0, r0, fp, ror #20
    566c:	00002109 	andeq	r2, r0, r9, lsl #2
    5670:	000a7824 	andeq	r7, sl, r4, lsr #16
    5674:	00216900 	eoreq	r6, r1, r0, lsl #18
    5678:	0a852600 	beq	fe14ee80 <_estack+0xde149e80>
    567c:	21b30000 			; <UNDEFINED> instruction: 0x21b30000
    5680:	4a320000 	bmi	c85688 <__ccfg+0xc656e0>
    5684:	2600000a 	strcs	r0, [r0], -sl
    5688:	2a000022 	bcs	5718 <patchGenfskRfe+0x5c0>
    568c:	01000022 	tsteq	r0, r2, lsr #32
    5690:	33010386 	movwcc	r0, #4998	; 0x1386
    5694:	00000a5e 	andeq	r0, r0, lr, asr sl
    5698:	000a6b24 	andeq	r6, sl, r4, lsr #22
    569c:	0021e700 	eoreq	lr, r1, r0, lsl #14
    56a0:	0a783300 	beq	1e122a8 <__ccfg+0x1df2300>
    56a4:	85430000 	strbhi	r0, [r3, #-0]
    56a8:	0000000a 	andeq	r0, r0, sl
    56ac:	01740000 	cmneq	r4, r0
    56b0:	00030000 	andeq	r0, r3, r0
    56b4:	0000124e 	andeq	r1, r0, lr, asr #4
    56b8:	00a30104 	adceq	r0, r3, r4, lsl #2
    56bc:	760c0000 	strvc	r0, [ip], -r0
    56c0:	ff000019 			; <UNDEFINED> instruction: 0xff000019
    56c4:	4800000d 	stmdami	r0, {r0, r2, r3}
    56c8:	0000000a 	andeq	r0, r0, sl
    56cc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    56d0:	0200003e 	andeq	r0, r0, #62	; 0x3e
    56d4:	0c600601 	stcleq	6, cr0, [r0], #-4
    56d8:	02020000 	andeq	r0, r2, #0
    56dc:	000a6e05 	andeq	r6, sl, r5, lsl #28
    56e0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    56e4:	00000800 	andeq	r0, r0, r0, lsl #16
    56e8:	fb050802 	blx	1476fa <__ccfg+0x127752>
    56ec:	02000007 	andeq	r0, r0, #7
    56f0:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    56f4:	02020000 	andeq	r0, r2, #0
    56f8:	000d5b07 	andeq	r5, sp, r7, lsl #22
    56fc:	29a90300 	stmibcs	r9!, {r8, r9}
    5700:	34020000 	strcc	r0, [r2], #-0
    5704:	00005b19 	andeq	r5, r0, r9, lsl fp
    5708:	07040200 	streq	r0, [r4, -r0, lsl #4]
    570c:	00000428 	andeq	r0, r0, r8, lsr #8
    5710:	23070802 	movwcs	r0, #30722	; 0x7802
    5714:	04000004 	streq	r0, [r0], #-4
    5718:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    571c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5720:	00042d07 	andeq	r2, r4, r7, lsl #26
    5724:	82040500 	andhi	r0, r4, #0, 10
    5728:	06000000 	streq	r0, [r0], -r0
    572c:	00000077 	andeq	r0, r0, r7, ror r0
    5730:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    5734:	0000004f 	andeq	r0, r0, pc, asr #32
    5738:	00196908 	andseq	r6, r9, r8, lsl #18
    573c:	117f0100 	cmnne	pc, r0, lsl #2
    5740:	0000004f 	andeq	r0, r0, pc, asr #32
    5744:	43080101 	movwmi	r0, #33025	; 0x8101
    5748:	01000047 	tsteq	r0, r7, asr #32
    574c:	004f1180 	subeq	r1, pc, r0, lsl #3
    5750:	01010000 	mrseq	r0, (UNDEF: 1)
    5754:	0019ba08 	andseq	fp, r9, r8, lsl #20
    5758:	11810100 	orrne	r0, r1, r0, lsl #2
    575c:	0000004f 	andeq	r0, r0, pc, asr #32
    5760:	b5080101 	strlt	r0, [r8, #-257]	; 0xfffffeff
    5764:	01000019 	tsteq	r0, r9, lsl r0
    5768:	004f1182 	subeq	r1, pc, r2, lsl #3
    576c:	01010000 	mrseq	r0, (UNDEF: 1)
    5770:	00197008 	andseq	r7, r9, r8
    5774:	11830100 	orrne	r0, r3, r0, lsl #2
    5778:	0000004f 	andeq	r0, r0, pc, asr #32
    577c:	3b080101 	blcc	205b88 <__ccfg+0x1e5be0>
    5780:	01000019 	tsteq	r0, r9, lsl r0
    5784:	004f1184 	subeq	r1, pc, r4, lsl #3
    5788:	01010000 	mrseq	r0, (UNDEF: 1)
    578c:	00007d09 	andeq	r7, r0, r9, lsl #26
    5790:	0000ee00 	andeq	lr, r0, r0, lsl #28
    5794:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    5798:	00310000 	eorseq	r0, r1, r0
    579c:	0000de06 	andeq	sp, r0, r6, lsl #28
    57a0:	19d30b00 	ldmibne	r3, {r8, r9, fp}^
    57a4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    57a8:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    57ac:	03050100 	movweq	r0, #20736	; 0x5100
    57b0:	00000000 	andeq	r0, r0, r0
    57b4:	0019c10c 	andseq	ip, r9, ip, lsl #2
    57b8:	01280100 			; <UNDEFINED> instruction: 0x01280100
    57bc:	24220101 	strtcs	r0, [r2], #-257	; 0xfffffeff
    57c0:	24240000 	strtcs	r0, [r4], #-0
    57c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    57c8:	00194c0c 	andseq	r4, r9, ip, lsl #24
    57cc:	01160100 	tsteq	r6, r0, lsl #2
    57d0:	24200101 	strtcs	r0, [r0], #-257	; 0xfffffeff
    57d4:	24220000 	strtcs	r0, [r2], #-0
    57d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    57dc:	00195c0c 	andseq	r5, r9, ip, lsl #24
    57e0:	01040100 	mrseq	r0, (UNDEF: 20)
    57e4:	241e0101 	ldrcs	r0, [lr], #-257	; 0xfffffeff
    57e8:	24200000 	strtcs	r0, [r0], #-0
    57ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    57f0:	19ea010d 	stmibne	sl!, {r0, r2, r3, r8}^
    57f4:	d2010000 	andle	r0, r1, #0
    57f8:	24240101 	strtcs	r0, [r4], #-257	; 0xfffffeff
    57fc:	24680000 	strbtcs	r0, [r8], #-0
    5800:	9c010000 	stcls	0, cr0, [r1], {-0}
    5804:	0019430e 	andseq	r4, r9, lr, lsl #6
    5808:	0fd40100 	svceq	0x00d40100
    580c:	00000084 	andeq	r0, r0, r4, lsl #1
    5810:	000021fa 	strdeq	r2, [r0], -sl
    5814:	0019e00e 	andseq	lr, r9, lr
    5818:	1ad40100 	bne	ff505c20 <_estack+0xdf500c20>
    581c:	00000084 	andeq	r0, r0, r4, lsl #1
    5820:	00002218 	andeq	r2, r0, r8, lsl r2
    5824:	05370000 	ldreq	r0, [r7, #-0]!
    5828:	00030000 	andeq	r0, r3, r0
    582c:	00001313 	andeq	r1, r0, r3, lsl r3
    5830:	00a30104 	adceq	r0, r3, r4, lsl #2
    5834:	820c0000 	andhi	r0, ip, #0
    5838:	ff00001a 			; <UNDEFINED> instruction: 0xff00001a
    583c:	4100000d 	tstmi	r0, sp
    5840:	0200003f 	andeq	r0, r0, #63	; 0x3f
    5844:	0c600601 	stcleq	6, cr0, [r0], #-4
    5848:	02020000 	andeq	r0, r2, #0
    584c:	000a6e05 	andeq	r6, sl, r5, lsl #28
    5850:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5854:	00000800 	andeq	r0, r0, r0, lsl #16
    5858:	fb050802 	blx	14786a <__ccfg+0x1278c2>
    585c:	03000007 	movweq	r0, #7
    5860:	00002a11 	andeq	r2, r0, r1, lsl sl
    5864:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    5868:	02000000 	andeq	r0, r0, #0
    586c:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    5870:	07030000 	streq	r0, [r3, -r0]
    5874:	0100002e 	tsteq	r0, lr, lsr #32
    5878:	00581931 	subseq	r1, r8, r1, lsr r9
    587c:	02020000 	andeq	r0, r2, #0
    5880:	000d5b07 	andeq	r5, sp, r7, lsl #22
    5884:	29a90300 	stmibcs	r9!, {r8, r9}
    5888:	34010000 	strcc	r0, [r1], #-0
    588c:	00006b19 	andeq	r6, r0, r9, lsl fp
    5890:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5894:	00000428 	andeq	r0, r0, r8, lsr #8
    5898:	23070802 	movwcs	r0, #30722	; 0x7802
    589c:	04000004 	streq	r0, [r0], #-4
    58a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    58a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    58a8:	00042d07 	andeq	r2, r4, r7, lsl #26
    58ac:	02580500 	subseq	r0, r8, #0, 10
    58b0:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    58b4:	a5060000 	strge	r0, [r6, #-0]
    58b8:	0200001b 	andeq	r0, r0, #27
    58bc:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    58c0:	06000000 	streq	r0, [r0], -r0
    58c4:	00001aba 			; <UNDEFINED> instruction: 0x00001aba
    58c8:	5f103202 	svcpl	0x00103202
    58cc:	04000000 	streq	r0, [r0], #-0
    58d0:	001a4a06 	andseq	r4, sl, r6, lsl #20
    58d4:	10330200 	eorsne	r0, r3, r0, lsl #4
    58d8:	0000005f 	andeq	r0, r0, pc, asr r0
    58dc:	1a340608 	bne	d07104 <__ccfg+0xce715c>
    58e0:	34020000 	strcc	r0, [r2], #-0
    58e4:	00005f10 	andeq	r5, r0, r0, lsl pc
    58e8:	f3060c00 			; <UNDEFINED> instruction: 0xf3060c00
    58ec:	02000019 	andeq	r0, r0, #25
    58f0:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    58f4:	06100000 	ldreq	r0, [r0], -r0
    58f8:	00001a04 	andeq	r1, r0, r4, lsl #20
    58fc:	5f103602 	svcpl	0x00103602
    5900:	14000000 	strne	r0, [r0], #-0
    5904:	001a2406 	andseq	r2, sl, r6, lsl #8
    5908:	10370200 	eorsne	r0, r7, r0, lsl #4
    590c:	0000005f 	andeq	r0, r0, pc, asr r0
    5910:	1b4a0618 	blne	1287178 <__ccfg+0x12671d0>
    5914:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    5918:	00005f10 	andeq	r5, r0, r0, lsl pc
    591c:	62061c00 	andvs	r1, r6, #0, 24
    5920:	0200001a 	andeq	r0, r0, #26
    5924:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    5928:	06200000 	strteq	r0, [r0], -r0
    592c:	00001a72 	andeq	r1, r0, r2, ror sl
    5930:	5f103a02 	svcpl	0x00103a02
    5934:	24000000 	strcs	r0, [r0], #-0
    5938:	001b7006 	andseq	r7, fp, r6
    593c:	103b0200 	eorsne	r0, fp, r0, lsl #4
    5940:	0000005f 	andeq	r0, r0, pc, asr r0
    5944:	1b800628 	blne	fe0071ec <_estack+0xde0021ec>
    5948:	3c020000 	stccc	0, cr0, [r2], {-0}
    594c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5950:	15062c00 	strne	r2, [r6, #-3072]	; 0xfffff400
    5954:	0200001a 	andeq	r0, r0, #26
    5958:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    595c:	06300000 	ldrteq	r0, [r0], -r0
    5960:	00001b10 	andeq	r1, r0, r0, lsl fp
    5964:	5f103e02 	svcpl	0x00103e02
    5968:	34000000 	strcc	r0, [r0], #-0
    596c:	001bb506 	andseq	fp, fp, r6, lsl #10
    5970:	103f0200 	eorsne	r0, pc, r0, lsl #4
    5974:	0000005f 	andeq	r0, r0, pc, asr r0
    5978:	1acb0638 	bne	ff2c7260 <_estack+0xdf2c2260>
    597c:	40020000 	andmi	r0, r2, r0
    5980:	00005f10 	andeq	r5, r0, r0, lsl pc
    5984:	df063c00 	svcle	0x00063c00
    5988:	0200001a 	andeq	r0, r0, #26
    598c:	005f1041 	subseq	r1, pc, r1, asr #32
    5990:	06400000 	strbeq	r0, [r0], -r0
    5994:	00001b34 	andeq	r1, r0, r4, lsr fp
    5998:	5f104202 	svcpl	0x00104202
    599c:	44000000 	strmi	r0, [r0], #-0
    59a0:	001b2006 	andseq	r2, fp, r6
    59a4:	10430200 	subne	r0, r3, r0, lsl #4
    59a8:	0000005f 	andeq	r0, r0, pc, asr r0
    59ac:	1b5b0648 	blne	16c72d4 <__ccfg+0x16a732c>
    59b0:	44020000 	strmi	r0, [r2], #-0
    59b4:	00005f10 	andeq	r5, r0, r0, lsl pc
    59b8:	90064c00 	andls	r4, r6, r0, lsl #24
    59bc:	0200001b 	andeq	r0, r0, #27
    59c0:	005f1045 	subseq	r1, pc, r5, asr #32
    59c4:	06500000 	ldrbeq	r0, [r0], -r0
    59c8:	00001afa 	strdeq	r1, [r0], -sl
    59cc:	5f104602 	svcpl	0x00104602
    59d0:	54000000 	strpl	r0, [r0], #-0
    59d4:	1af30300 	bne	ffcc65dc <_estack+0xdfcc15dc>
    59d8:	47020000 	strmi	r0, [r2, -r0]
    59dc:	00008703 	andeq	r8, r0, r3, lsl #14
    59e0:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    59e4:	43080000 	movwmi	r0, #32768	; 0x8000
    59e8:	0200001a 	andeq	r0, r0, #26
    59ec:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    59f0:	01010000 	mrseq	r0, (UNDEF: 1)
    59f4:	0028f003 	eoreq	pc, r8, r3
    59f8:	12270300 	eorne	r0, r7, #0, 6
    59fc:	0000004c 	andeq	r0, r0, ip, asr #32
    5a00:	0001ce07 	andeq	ip, r1, r7, lsl #28
    5a04:	01ce0900 	biceq	r0, lr, r0, lsl #18
    5a08:	b7030000 	strlt	r0, [r3, -r0]
    5a0c:	0300001d 	movweq	r0, #29
    5a10:	0039122b 	eorseq	r1, r9, fp, lsr #4
    5a14:	e4090000 	str	r0, [r9], #-0
    5a18:	03000001 	movweq	r0, #1
    5a1c:	00002942 	andeq	r2, r0, r2, asr #18
    5a20:	5f122c03 	svcpl	0x00122c03
    5a24:	07000000 	streq	r0, [r0, -r0]
    5a28:	000001f5 	strdeq	r0, [r0], -r5
    5a2c:	00064903 	andeq	r4, r6, r3, lsl #18
    5a30:	122d0300 	eorne	r0, sp, #0, 6
    5a34:	0000005f 	andeq	r0, r0, pc, asr r0
    5a38:	32030805 	andcc	r0, r3, #327680	; 0x50000
    5a3c:	0002a009 	andeq	sl, r2, r9
    5a40:	002b0a00 	eoreq	r0, fp, r0, lsl #20
    5a44:	34030000 	strcc	r0, [r3], #-0
    5a48:	0001e407 	andeq	lr, r1, r7, lsl #8
    5a4c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5a50:	064f0a00 	strbeq	r0, [pc], -r0, lsl #20
    5a54:	35030000 	strcc	r0, [r3, #-0]
    5a58:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a5c:	06010100 	streq	r0, [r1], -r0, lsl #2
    5a60:	02de0a00 	sbcseq	r0, lr, #0, 20
    5a64:	36030000 	strcc	r0, [r3], -r0
    5a68:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5a70:	06ba0a00 	ldrteq	r0, [sl], r0, lsl #20
    5a74:	37030000 	strcc	r0, [r3, -r0]
    5a78:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a7c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5a80:	0aa20a00 	beq	fe888288 <_estack+0xde883288>
    5a84:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5a88:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a8c:	00040100 	andeq	r0, r4, r0, lsl #2
    5a90:	065e0600 	ldrbeq	r0, [lr], -r0, lsl #12
    5a94:	3a030000 	bcc	c5a9c <__ccfg+0xa5af4>
    5a98:	0001e407 	andeq	lr, r1, r7, lsl #8
    5a9c:	fe060100 	cdp2	1, 0, cr0, cr6, cr0, {0}
    5aa0:	03000008 	movweq	r0, #8
    5aa4:	01e4033c 	mvneq	r0, ip, lsr r3
    5aa8:	06020000 	streq	r0, [r2], -r0
    5aac:	00000f2f 	andeq	r0, r0, pc, lsr #30
    5ab0:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    5ab4:	03000001 	movweq	r0, #1
    5ab8:	00091606 	andeq	r1, r9, r6, lsl #12
    5abc:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    5ac0:	000001f5 	strdeq	r0, [r0], -r5
    5ac4:	14030004 	strne	r0, [r3], #-4
    5ac8:	03000003 	movweq	r0, #3
    5acc:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    5ad0:	a0090000 	andge	r0, r9, r0
    5ad4:	08000002 	stmdaeq	r0, {r1}
    5ad8:	000006c1 	andeq	r0, r0, r1, asr #13
    5adc:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    5ae0:	01000002 	tsteq	r0, r2
    5ae4:	01970801 	orrseq	r0, r7, r1, lsl #16
    5ae8:	45030000 	strmi	r0, [r3, #-0]
    5aec:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    5af0:	0b010100 	bleq	45ef8 <__ccfg+0x25f50>
    5af4:	0002d304 	andeq	sp, r2, r4, lsl #6
    5af8:	08010200 	stmdaeq	r1, {r9}
    5afc:	00000c67 	andeq	r0, r0, r7, ror #24
    5b00:	0002d307 	andeq	sp, r2, r7, lsl #6
    5b04:	031d0800 	tsteq	sp, #0, 16
    5b08:	45030000 	strmi	r0, [r3, #-0]
    5b0c:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    5b10:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5b14:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    5b18:	0000031e 	andeq	r0, r0, lr, lsl r3
    5b1c:	000ccd06 	andeq	ip, ip, r6, lsl #26
    5b20:	0b900400 	bleq	fe406b28 <_estack+0xde401b28>
    5b24:	0000005f 	andeq	r0, r0, pc, asr r0
    5b28:	106a0600 	rsbne	r0, sl, r0, lsl #12
    5b2c:	91040000 	mrsls	r0, (UNDEF: 4)
    5b30:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5b34:	bc060400 	cfstrslt	mvf0, [r6], {-0}
    5b38:	04000001 	streq	r0, [r0], #-1
    5b3c:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    5b40:	00060000 	andeq	r0, r6, r0
    5b44:	000cc103 	andeq	ip, ip, r3, lsl #2
    5b48:	03930400 	orrseq	r0, r3, #0, 8
    5b4c:	000002ed 	andeq	r0, r0, sp, ror #5
    5b50:	00031e0c 	andeq	r1, r3, ip, lsl #28
    5b54:	00033500 	andeq	r3, r3, r0, lsl #10
    5b58:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    5b5c:	00000940 	andeq	r0, r0, r0, asr #18
    5b60:	2a0f9904 	bcs	3ebf78 <__ccfg+0x3cbfd0>
    5b64:	01000003 	tsteq	r0, r3
    5b68:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    5b6c:	036d0991 	cmneq	sp, #2375680	; 0x244000
    5b70:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    5b74:	05000009 	streq	r0, [r0, #-9]
    5b78:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    5b7c:	07010000 	streq	r0, [r1, -r0]
    5b80:	cf0a0001 	svcgt	0x000a0001
    5b84:	05000005 	streq	r0, [r0, #-5]
    5b88:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    5b8c:	01010000 	mrseq	r0, (UNDEF: 1)
    5b90:	03000000 	movweq	r0, #0
    5b94:	00000aae 	andeq	r0, r0, lr, lsr #21
    5b98:	43039605 	movwmi	r9, #13829	; 0x3605
    5b9c:	07000003 	streq	r0, [r0, -r3]
    5ba0:	0000036d 	andeq	r0, r0, sp, ror #6
    5ba4:	0003790c 	andeq	r7, r3, ip, lsl #18
    5ba8:	00038900 	andeq	r8, r3, r0, lsl #18
    5bac:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5bb0:	0000037e 	andeq	r0, r0, lr, ror r3
    5bb4:	0003ac08 	andeq	sl, r3, r8, lsl #24
    5bb8:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    5bbc:	00000389 	andeq	r0, r0, r9, lsl #7
    5bc0:	da0c0101 	ble	305fcc <__ccfg+0x2e6024>
    5bc4:	a7000001 	strge	r0, [r0, -r1]
    5bc8:	0d000003 	stceq	0, cr0, [r0, #-12]
    5bcc:	039c0700 	orrseq	r0, ip, #0, 14
    5bd0:	11080000 	mrsne	r0, (UNDEF: 8)
    5bd4:	06000006 	streq	r0, [r0], -r6
    5bd8:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    5bdc:	01010000 	mrseq	r0, (UNDEF: 1)
    5be0:	0008e008 	andeq	lr, r8, r8
    5be4:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    5be8:	000001f5 	strdeq	r0, [r0], -r5
    5bec:	750e0101 	strvc	r0, [lr, #-257]	; 0xfffffeff
    5bf0:	0700000c 	streq	r0, [r0, -ip]
    5bf4:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    5bf8:	0b000003 	bleq	5c0c <__exidx_end+0x130>
    5bfc:	0003db04 	andeq	sp, r3, r4, lsl #22
    5c00:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    5c04:	10000003 	andne	r0, r0, r3
    5c08:	000001ce 	andeq	r0, r0, lr, asr #3
    5c0c:	02da0c00 	sbcseq	r0, sl, #0, 24
    5c10:	03f20000 	mvnseq	r0, #0
    5c14:	000d0000 	andeq	r0, sp, r0
    5c18:	0003e707 	andeq	lr, r3, r7, lsl #14
    5c1c:	09e91100 	stmibeq	r9!, {r8, ip}^
    5c20:	7f070000 	svcvc	0x00070000
    5c24:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    5c28:	01010000 	mrseq	r0, (UNDEF: 1)
    5c2c:	00039811 	andeq	r9, r3, r1, lsl r8
    5c30:	01820700 	orreq	r0, r2, r0, lsl #14
    5c34:	00020114 	andeq	r0, r2, r4, lsl r1
    5c38:	11010100 	mrsne	r0, (UNDEF: 17)
    5c3c:	00000370 	andeq	r0, r0, r0, ror r3
    5c40:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    5c44:	000001f5 	strdeq	r0, [r0], -r5
    5c48:	08120101 	ldmdaeq	r2, {r0, r8}
    5c4c:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    5c50:	0000044b 	andeq	r0, r0, fp, asr #8
    5c54:	003c9113 	eorseq	r9, ip, r3, lsl r1
    5c58:	03070700 	movweq	r0, #30464	; 0x7700
    5c5c:	0001ce07 	andeq	ip, r1, r7, lsl #28
    5c60:	c2130000 	andsgt	r0, r3, #0
    5c64:	0700000f 	streq	r0, [r0, -pc]
    5c68:	06080308 	streq	r0, [r8], -r8, lsl #6
    5c6c:	04000002 	streq	r0, [r0], #-2
    5c70:	0a0c0e00 	beq	309478 <__ccfg+0x2e94d0>
    5c74:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    5c78:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    5c7c:	20140000 	andscs	r0, r4, r0
    5c80:	30000000 	andcc	r0, r0, r0
    5c84:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    5c88:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    5c8c:	001f1913 	andseq	r1, pc, r3, lsl r9	; <UNPREDICTABLE>
    5c90:	03140700 	tsteq	r4, #0, 14
    5c94:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5c98:	ea130000 	b	4c5ca0 <__ccfg+0x4a5cf8>
    5c9c:	0700000b 	streq	r0, [r0, -fp]
    5ca0:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    5ca4:	02000001 	andeq	r0, r0, #1
    5ca8:	004c7e13 	subeq	r7, ip, r3, lsl lr
    5cac:	03160700 	tsteq	r6, #0, 14
    5cb0:	0003c80b 	andeq	ip, r3, fp, lsl #16
    5cb4:	44130400 	ldrmi	r0, [r3], #-1024	; 0xfffffc00
    5cb8:	07000047 	streq	r0, [r0, -r7, asr #32]
    5cbc:	06090317 			; <UNDEFINED> instruction: 0x06090317
    5cc0:	08000002 	stmdaeq	r0, {r1}
    5cc4:	00000f13 	andeq	r0, r0, r3, lsl pc
    5cc8:	03180700 	tsteq	r8, #0, 14
    5ccc:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    5cd0:	60130c00 	andsvs	r0, r3, r0, lsl #24
    5cd4:	07000009 	streq	r0, [r0, -r9]
    5cd8:	cb150319 	blgt	546944 <__ccfg+0x52699c>
    5cdc:	2c000004 	stccs	0, cr0, [r0], {4}
    5ce0:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    5ce4:	04cb0000 	strbeq	r0, [fp], #0
    5ce8:	80150000 	andshi	r0, r5, r0
    5cec:	03000000 	movweq	r0, #0
    5cf0:	58040b00 	stmdapl	r4, {r8, r9, fp}
    5cf4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5cf8:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5cfc:	1b031c07 	blne	ccd20 <__ccfg+0xacd78>
    5d00:	00000458 	andeq	r0, r0, r8, asr r4
    5d04:	000bbf11 	andeq	fp, fp, r1, lsl pc
    5d08:	031e0700 	tsteq	lr, #0, 14
    5d0c:	0004ed14 	andeq	lr, r4, r4, lsl sp
    5d10:	0b010100 	bleq	46118 <__ccfg+0x26170>
    5d14:	0004d104 	andeq	sp, r4, r4, lsl #2
    5d18:	07120800 	ldreq	r0, [r2, -r0, lsl #16]
    5d1c:	1d080000 	stcne	0, cr0, [r8, #-0]
    5d20:	0001ce13 	andeq	ip, r1, r3, lsl lr
    5d24:	08010100 	stmdaeq	r1, {r8}
    5d28:	000002e5 	andeq	r0, r0, r5, ror #5
    5d2c:	df1a1e08 	svcle	0x001a1e08
    5d30:	01000001 	tsteq	r0, r1
    5d34:	0c6c0801 	stcleq	8, cr0, [ip], #-4
    5d38:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    5d3c:	0001df24 	andeq	sp, r1, r4, lsr #30
    5d40:	08010100 	stmdaeq	r1, {r8}
    5d44:	00000c8a 	andeq	r0, r0, sl, lsl #25
    5d48:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    5d4c:	01000004 	tsteq	r0, r4
    5d50:	01c01601 	biceq	r1, r0, r1, lsl #12
    5d54:	17090000 	strne	r0, [r9, -r0]
    5d58:	03050e02 	movweq	r0, #24066	; 0x5e02
    5d5c:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    5d60:	00050000 	andeq	r0, r5, r0
    5d64:	32000300 	andcc	r0, r0, #0, 6
    5d68:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    5d6c:	0000a301 	andeq	sl, r0, r1, lsl #6
    5d70:	1bd70c00 	blne	ff5c8d78 <_estack+0xdf5c3d78>
    5d74:	0dff0000 	ldcleq	0, cr0, [pc]	; 5d7c <__exidx_end+0x2a0>
    5d78:	0a980000 	beq	fe605d80 <_estack+0xde600d80>
    5d7c:	00000000 	andeq	r0, r0, r0
    5d80:	40ce0000 	sbcmi	r0, lr, r0
    5d84:	01020000 	mrseq	r0, (UNDEF: 2)
    5d88:	000c6006 	andeq	r6, ip, r6
    5d8c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5d90:	00000a6e 	andeq	r0, r0, lr, ror #20
    5d94:	00050402 	andeq	r0, r5, r2, lsl #8
    5d98:	02000008 	andeq	r0, r0, #8
    5d9c:	07fb0508 	ldrbeq	r0, [fp, r8, lsl #10]!
    5da0:	11030000 	mrsne	r0, (UNDEF: 3)
    5da4:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5da8:	004d182e 	subeq	r1, sp, lr, lsr #16
    5dac:	01020000 	mrseq	r0, (UNDEF: 2)
    5db0:	000c5e08 	andeq	r5, ip, r8, lsl #28
    5db4:	2e070300 	cdpcs	3, 0, cr0, cr7, cr0, {0}
    5db8:	31040000 	mrscc	r0, (UNDEF: 4)
    5dbc:	00006019 	andeq	r6, r0, r9, lsl r0
    5dc0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5dc4:	00000d5b 	andeq	r0, r0, fp, asr sp
    5dc8:	0029a903 	eoreq	sl, r9, r3, lsl #18
    5dcc:	19340400 	ldmdbne	r4!, {sl}
    5dd0:	00000073 	andeq	r0, r0, r3, ror r0
    5dd4:	28070402 	stmdacs	r7, {r1, sl}
    5dd8:	02000004 	andeq	r0, r0, #4
    5ddc:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    5de0:	04040000 	streq	r0, [r4], #-0
    5de4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5de8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5dec:	0000042d 	andeq	r0, r0, sp, lsr #8
    5df0:	0028f003 	eoreq	pc, r8, r3
    5df4:	12270500 	eorne	r0, r7, #0, 10
    5df8:	00000054 	andeq	r0, r0, r4, asr r0
    5dfc:	00008f05 	andeq	r8, r0, r5, lsl #30
    5e00:	008f0600 	addeq	r0, pc, r0, lsl #12
    5e04:	b7030000 	strlt	r0, [r3, -r0]
    5e08:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    5e0c:	0041122b 	subeq	r1, r1, fp, lsr #4
    5e10:	a5060000 	strge	r0, [r6, #-0]
    5e14:	05000000 	streq	r0, [r0, #-0]
    5e18:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e1c:	00294203 	eoreq	r4, r9, r3, lsl #4
    5e20:	122c0500 	eorne	r0, ip, #0, 10
    5e24:	00000067 	andeq	r0, r0, r7, rrx
    5e28:	0000bb05 	andeq	fp, r0, r5, lsl #22
    5e2c:	06490300 	strbeq	r0, [r9], -r0, lsl #6
    5e30:	2d050000 	stccs	0, cr0, [r5, #-0]
    5e34:	00006712 	andeq	r6, r0, r2, lsl r7
    5e38:	0bb70300 	bleq	fedc6a40 <_estack+0xdedc1a40>
    5e3c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5e40:	0000e410 	andeq	lr, r0, r0, lsl r4
    5e44:	8f040700 	svchi	0x00040700
    5e48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5e4c:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    5e50:	00000178 	andeq	r0, r0, r8, ror r1
    5e54:	00002b09 	andeq	r2, r0, r9, lsl #22
    5e58:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    5e5c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e60:	00070101 	andeq	r0, r7, r1, lsl #2
    5e64:	00064f09 	andeq	r4, r6, r9, lsl #30
    5e68:	03350500 	teqeq	r5, #0, 10
    5e6c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e70:	00060101 	andeq	r0, r6, r1, lsl #2
    5e74:	0002de09 	andeq	sp, r2, r9, lsl #28
    5e78:	03360500 	teqeq	r6, #0, 10
    5e7c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e80:	00050101 	andeq	r0, r5, r1, lsl #2
    5e84:	0006ba09 	andeq	fp, r6, r9, lsl #20
    5e88:	03370500 	teqeq	r7, #0, 10
    5e8c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e90:	00040101 	andeq	r0, r4, r1, lsl #2
    5e94:	000aa209 	andeq	sl, sl, r9, lsl #4
    5e98:	03380500 	teqeq	r8, #0, 10
    5e9c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5ea0:	00000401 	andeq	r0, r0, r1, lsl #8
    5ea4:	00065e0a 	andeq	r5, r6, sl, lsl #28
    5ea8:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    5eac:	000000a5 	andeq	r0, r0, r5, lsr #1
    5eb0:	08fe0a01 	ldmeq	lr!, {r0, r9, fp}^
    5eb4:	3c050000 	stccc	0, cr0, [r5], {-0}
    5eb8:	0000a503 	andeq	sl, r0, r3, lsl #10
    5ebc:	2f0a0200 	svccs	0x000a0200
    5ec0:	0500000f 	streq	r0, [r0, #-15]
    5ec4:	00a5033d 	adceq	r0, r5, sp, lsr r3
    5ec8:	0a030000 	beq	c5ed0 <__ccfg+0xa5f28>
    5ecc:	00000916 	andeq	r0, r0, r6, lsl r9
    5ed0:	bb083f05 	bllt	215aec <__ccfg+0x1f5b44>
    5ed4:	04000000 	streq	r0, [r0], #-0
    5ed8:	03140300 	tsteq	r4, #0, 6
    5edc:	41050000 	mrsmi	r0, (UNDEF: 5)
    5ee0:	0000ea03 	andeq	lr, r0, r3, lsl #20
    5ee4:	01780600 	cmneq	r8, r0, lsl #12
    5ee8:	c10b0000 	mrsgt	r0, (UNDEF: 11)
    5eec:	05000006 	streq	r0, [r0, #-6]
    5ef0:	01841a43 	orreq	r1, r4, r3, asr #20
    5ef4:	01010000 	mrseq	r0, (UNDEF: 1)
    5ef8:	0001970b 	andeq	r9, r1, fp, lsl #14
    5efc:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    5f00:	000001a5 	andeq	r0, r0, r5, lsr #3
    5f04:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5f08:	000001ab 	andeq	r0, r0, fp, lsr #3
    5f0c:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    5f10:	0500000c 	streq	r0, [r0, #-12]
    5f14:	000001ab 	andeq	r0, r0, fp, lsr #3
    5f18:	00031d0b 	andeq	r1, r3, fp, lsl #26
    5f1c:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    5f20:	000001a5 	andeq	r0, r0, r5, lsr #3
    5f24:	08080101 	stmdaeq	r8, {r0, r8}
    5f28:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    5f2c:	0a000001 	beq	5f38 <__exidx_end+0x45c>
    5f30:	00000ccd 	andeq	r0, r0, sp, asr #25
    5f34:	670b9006 	strvs	r9, [fp, -r6]
    5f38:	00000000 	andeq	r0, r0, r0
    5f3c:	00106a0a 	andseq	r6, r0, sl, lsl #20
    5f40:	08910600 	ldmeq	r1, {r9, sl}
    5f44:	0000008f 	andeq	r0, r0, pc, lsl #1
    5f48:	01bc0a04 			; <UNDEFINED> instruction: 0x01bc0a04
    5f4c:	92060000 	andls	r0, r6, #0
    5f50:	0000b110 	andeq	fp, r0, r0, lsl r1
    5f54:	03000600 	movweq	r0, #1536	; 0x600
    5f58:	00000cc1 	andeq	r0, r0, r1, asr #25
    5f5c:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    5f60:	0c000001 	stceq	0, cr0, [r0], {1}
    5f64:	000001f6 	strdeq	r0, [r0], -r6
    5f68:	0000020d 	andeq	r0, r0, sp, lsl #4
    5f6c:	400b000d 	andmi	r0, fp, sp
    5f70:	06000009 	streq	r0, [r0], -r9
    5f74:	02020f99 	andeq	r0, r2, #612	; 0x264
    5f78:	01010000 	mrseq	r0, (UNDEF: 1)
    5f7c:	00b60407 	adcseq	r0, r6, r7, lsl #8
    5f80:	01080000 	mrseq	r0, (UNDEF: 8)
    5f84:	4b099107 	blmi	26a3a8 <__ccfg+0x24a400>
    5f88:	09000002 	stmdbeq	r0, {r1}
    5f8c:	0000091d 	andeq	r0, r0, sp, lsl r9
    5f90:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    5f94:	01000000 	mrseq	r0, (UNDEF: 0)
    5f98:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    5f9c:	000005cf 	andeq	r0, r0, pc, asr #11
    5fa0:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    5fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    5fa8:	00000001 	andeq	r0, r0, r1
    5fac:	000aae03 	andeq	sl, sl, r3, lsl #28
    5fb0:	03960700 	orrseq	r0, r6, #0, 14
    5fb4:	00000221 	andeq	r0, r0, r1, lsr #4
    5fb8:	00024b05 	andeq	r4, r2, r5, lsl #22
    5fbc:	02570c00 	subseq	r0, r7, #0, 24
    5fc0:	02670000 	rsbeq	r0, r7, #0
    5fc4:	000d0000 	andeq	r0, sp, r0
    5fc8:	00025c05 	andeq	r5, r2, r5, lsl #24
    5fcc:	03ac0b00 			; <UNDEFINED> instruction: 0x03ac0b00
    5fd0:	9c070000 	stcls	0, cr0, [r7], {-0}
    5fd4:	00026717 	andeq	r6, r2, r7, lsl r7
    5fd8:	0c010100 	stfeqs	f0, [r1], {-0}
    5fdc:	0000009b 	muleq	r0, fp, r0
    5fe0:	00000285 	andeq	r0, r0, r5, lsl #5
    5fe4:	7a05000d 	bvc	146020 <__ccfg+0x126078>
    5fe8:	0b000002 	bleq	5ff8 <__exidx_end+0x51c>
    5fec:	00000611 	andeq	r0, r0, r1, lsl r6
    5ff0:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    5ff4:	01000002 	tsteq	r0, r2
    5ff8:	08e00b01 	stmiaeq	r0!, {r0, r8, r9, fp}^
    5ffc:	c3060000 	movwgt	r0, #24576	; 0x6000
    6000:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    6004:	0e010100 	adfeqs	f0, f1, f0
    6008:	00000c75 	andeq	r0, r0, r5, ror ip
    600c:	10016e09 	andne	r6, r1, r9, lsl #28
    6010:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6014:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    6018:	010f0000 	mrseq	r0, CPSR
    601c:	000002c5 	andeq	r0, r0, r5, asr #5
    6020:	00008f10 	andeq	r8, r0, r0, lsl pc
    6024:	b20c0000 	andlt	r0, ip, #0
    6028:	d0000001 	andle	r0, r0, r1
    602c:	0d000002 	stceq	0, cr0, [r0, #-8]
    6030:	02c50500 	sbceq	r0, r5, #0, 10
    6034:	e9110000 	ldmdb	r1, {}	; <UNPREDICTABLE>
    6038:	09000009 	stmdbeq	r0, {r0, r3}
    603c:	d016017f 	andsle	r0, r6, pc, ror r1
    6040:	01000002 	tsteq	r0, r2
    6044:	03981101 	orrseq	r1, r8, #1073741824	; 0x40000000
    6048:	82090000 	andhi	r0, r9, #0
    604c:	00c71401 	sbceq	r1, r7, r1, lsl #8
    6050:	01010000 	mrseq	r0, (UNDEF: 1)
    6054:	00037011 	andeq	r7, r3, r1, lsl r0
    6058:	02d80900 	sbcseq	r0, r8, #0, 18
    605c:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    6060:	12010100 	andne	r0, r1, #0, 2
    6064:	03030908 	movweq	r0, #14600	; 0x3908
    6068:	00032909 	andeq	r2, r3, r9, lsl #18
    606c:	3c911300 	ldccc	3, cr1, [r1], {0}
    6070:	07090000 	streq	r0, [r9, -r0]
    6074:	008f0703 	addeq	r0, pc, r3, lsl #14
    6078:	13000000 	movwne	r0, #0
    607c:	00000fc2 	andeq	r0, r0, r2, asr #31
    6080:	08030809 	stmdaeq	r3, {r0, r3, fp}
    6084:	000000cc 	andeq	r0, r0, ip, asr #1
    6088:	0c0e0004 	stceq	0, cr0, [lr], {4}
    608c:	0900000a 	stmdbeq	r0, {r1, r3}
    6090:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    6094:	14000003 	strne	r0, [r0], #-3
    6098:	00000020 	andeq	r0, r0, r0, lsr #32
    609c:	030b0930 	movweq	r0, #47408	; 0xb930
    60a0:	00039908 	andeq	r9, r3, r8, lsl #18
    60a4:	1f191300 	svcne	0x00191300
    60a8:	14090000 	strne	r0, [r9], #-0
    60ac:	008f0803 	addeq	r0, pc, r3, lsl #16
    60b0:	13000000 	movwne	r0, #0
    60b4:	00000bea 	andeq	r0, r0, sl, ror #23
    60b8:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    60bc:	0000008f 	andeq	r0, r0, pc, lsl #1
    60c0:	4c7e1302 	ldclmi	3, cr1, [lr], #-8
    60c4:	16090000 	strne	r0, [r9], -r0
    60c8:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    60cc:	13040000 	movwne	r0, #16384	; 0x4000
    60d0:	00004744 	andeq	r4, r0, r4, asr #14
    60d4:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    60d8:	000000cc 	andeq	r0, r0, ip, asr #1
    60dc:	000f1308 	andeq	r1, pc, r8, lsl #6
    60e0:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    60e4:	03990f03 	orrseq	r0, r9, #3, 30
    60e8:	130c0000 	movwne	r0, #49152	; 0xc000
    60ec:	00000960 	andeq	r0, r0, r0, ror #18
    60f0:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    60f4:	000003a9 	andeq	r0, r0, r9, lsr #7
    60f8:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    60fc:	a9000003 	stmdbge	r0, {r0, r1}
    6100:	15000003 	strne	r0, [r0, #-3]
    6104:	00000088 	andeq	r0, r0, r8, lsl #1
    6108:	04070003 	streq	r0, [r7], #-3
    610c:	00000336 	andeq	r0, r0, r6, lsr r3
    6110:	000bdf0e 	andeq	sp, fp, lr, lsl #30
    6114:	031c0900 	tsteq	ip, #0, 18
    6118:	0003361b 	andeq	r3, r3, fp, lsl r6
    611c:	0bbf1100 	bleq	fefca524 <_estack+0xdefc5524>
    6120:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    6124:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    6128:	01010000 	mrseq	r0, (UNDEF: 1)
    612c:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    6130:	120b0000 	andne	r0, fp, #0
    6134:	0a000007 	beq	6158 <__exidx_end+0x67c>
    6138:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    613c:	01010000 	mrseq	r0, (UNDEF: 1)
    6140:	0002e50b 	andeq	lr, r2, fp, lsl #10
    6144:	1a1e0a00 	bne	78894c <__ccfg+0x7689a4>
    6148:	000000a0 	andeq	r0, r0, r0, lsr #1
    614c:	6c0b0101 	stfvss	f0, [fp], {1}
    6150:	0a00000c 	beq	6188 <__exidx_end+0x6ac>
    6154:	00a0241e 	adceq	r2, r0, lr, lsl r4
    6158:	01010000 	mrseq	r0, (UNDEF: 1)
    615c:	000c8a0b 	andeq	r8, ip, fp, lsl #20
    6160:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    6164:	000003cb 	andeq	r0, r0, fp, asr #7
    6168:	6c160101 	ldfvss	f0, [r6], {1}
    616c:	01000002 	tsteq	r0, r2
    6170:	0305100d 	movweq	r1, #20493	; 0x500d
    6174:	000050d9 	ldrdeq	r5, [r0], -r9
    6178:	1c210117 	stfnes	f0, [r1], #-92	; 0xffffffa4
    617c:	11010000 	mrsne	r0, (UNDEF: 1)
    6180:	00000106 	andeq	r0, r0, r6, lsl #2
    6184:	00000000 	andeq	r0, r0, r0
    6188:	9c010000 	stcls	0, cr0, [r1], {-0}
    618c:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    6190:	00747318 	rsbseq	r7, r4, r8, lsl r3
    6194:	8f1c1101 	svchi	0x001c1101
    6198:	36000000 	strcc	r0, [r0], -r0
    619c:	19000022 	stmdbne	r0, {r1, r5}
    61a0:	00001c1c 	andeq	r1, r0, ip, lsl ip
    61a4:	1b2c1101 	blne	b0a5b0 <__ccfg+0xaea608>
    61a8:	54000002 	strpl	r0, [r0], #-2
    61ac:	18000022 	stmdane	r0, {r1, r5}
    61b0:	006c6176 	rsbeq	r6, ip, r6, ror r1
    61b4:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    61b8:	72000000 	andvc	r0, r0, #0
    61bc:	1a000022 	bne	624c <__exidx_end+0x770>
    61c0:	13010070 	movwne	r0, #4208	; 0x1070
    61c4:	0004bb12 	andeq	fp, r4, r2, lsl fp
    61c8:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    61cc:	8f071401 	svchi	0x00071401
    61d0:	90000000 	andls	r0, r0, r0
    61d4:	1a000022 	bne	6264 <__exidx_end+0x788>
    61d8:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    61dc:	0000a507 	andeq	sl, r0, r7, lsl #10
    61e0:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    61ec:	1c010000 	stcne	0, cr0, [r1], {-0}
    61f0:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    61fc:	1f010000 	svcne	0x00010000
    6200:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    6204:	00000000 	andeq	r0, r0, r0
    6208:	0a700000 	beq	1c06210 <__ccfg+0x1be6268>
    620c:	26010000 	strcs	r0, [r1], -r0
    6210:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    6214:	22a30000 	adccs	r0, r3, #0
    6218:	00000000 	andeq	r0, r0, r0
    621c:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    6220:	011f0000 	tsteq	pc, r0
    6224:	00001c31 	andeq	r1, r0, r1, lsr ip
    6228:	00060f01 	andeq	r0, r6, r1, lsl #30
    622c:	00000000 	andeq	r0, r0, r0
    6230:	01000000 	mrseq	r0, (UNDEF: 0)
    6234:	1273209c 	rsbsne	r2, r3, #156	; 0x9c
    6238:	5b020000 	blpl	86240 <__ccfg+0x66298>
    623c:	20030135 	andcs	r0, r3, r5, lsr r1
    6240:	00000f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    6244:	01355002 	teqeq	r5, r2
    6248:	1bca2103 	blne	ff28e65c <_estack+0xdf28965c>
    624c:	a4030000 	strge	r0, [r3], #-0
    6250:	00670101 	rsbeq	r0, r7, r1, lsl #2
    6254:	22030000 	andcs	r0, r3, #0
    6258:	00001116 	andeq	r1, r0, r6, lsl r1
    625c:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    6260:	00000000 	andeq	r0, r0, r0
    6264:	0004f600 	andeq	pc, r4, r0, lsl #12
    6268:	23000300 	movwcs	r0, #768	; 0x300
    626c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    6270:	0000a301 	andeq	sl, r0, r1, lsl #6
    6274:	1c7b0c00 	ldclne	12, cr0, [fp], #-0
    6278:	0dff0000 	ldcleq	0, cr0, [pc]	; 6280 <__exidx_end+0x7a4>
    627c:	0b100000 	bleq	406284 <__ccfg+0x3e62dc>
    6280:	00000000 	andeq	r0, r0, r0
    6284:	43700000 	cmnmi	r0, #0
    6288:	01020000 	mrseq	r0, (UNDEF: 2)
    628c:	000c6006 	andeq	r6, ip, r6
    6290:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6294:	00000a6e 	andeq	r0, r0, lr, ror #20
    6298:	00050402 	andeq	r0, r5, r2, lsl #8
    629c:	02000008 	andeq	r0, r0, #8
    62a0:	07fb0508 	ldrbeq	r0, [fp, r8, lsl #10]!
    62a4:	11030000 	mrsne	r0, (UNDEF: 3)
    62a8:	0300002a 	movweq	r0, #42	; 0x2a
    62ac:	004d182e 	subeq	r1, sp, lr, lsr #16
    62b0:	01020000 	mrseq	r0, (UNDEF: 2)
    62b4:	000c5e08 	andeq	r5, ip, r8, lsl #28
    62b8:	2e070300 	cdpcs	3, 0, cr0, cr7, cr0, {0}
    62bc:	31030000 	mrscc	r0, (UNDEF: 3)
    62c0:	00006019 	andeq	r6, r0, r9, lsl r0
    62c4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    62c8:	00000d5b 	andeq	r0, r0, fp, asr sp
    62cc:	0029a903 	eoreq	sl, r9, r3, lsl #18
    62d0:	19340300 	ldmdbne	r4!, {r8, r9}
    62d4:	00000073 	andeq	r0, r0, r3, ror r0
    62d8:	28070402 	stmdacs	r7, {r1, sl}
    62dc:	02000004 	andeq	r0, r0, #4
    62e0:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    62e4:	04040000 	streq	r0, [r4], #-0
    62e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    62ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    62f0:	0000042d 	andeq	r0, r0, sp, lsr #8
    62f4:	0028f003 	eoreq	pc, r8, r3
    62f8:	12270400 	eorne	r0, r7, #0, 8
    62fc:	00000054 	andeq	r0, r0, r4, asr r0
    6300:	00008f05 	andeq	r8, r0, r5, lsl #30
    6304:	008f0600 	addeq	r0, pc, r0, lsl #12
    6308:	b7030000 	strlt	r0, [r3, -r0]
    630c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    6310:	0041122b 	subeq	r1, r1, fp, lsr #4
    6314:	a5060000 	strge	r0, [r6, #-0]
    6318:	03000000 	movweq	r0, #0
    631c:	00002942 	andeq	r2, r0, r2, asr #18
    6320:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6324:	05000000 	streq	r0, [r0, #-0]
    6328:	000000b6 	strheq	r0, [r0], -r6
    632c:	00064903 	andeq	r4, r6, r3, lsl #18
    6330:	122d0400 	eorne	r0, sp, #0, 8
    6334:	00000067 	andeq	r0, r0, r7, rrx
    6338:	32040807 	andcc	r0, r4, #458752	; 0x70000
    633c:	00016109 	andeq	r6, r1, r9, lsl #2
    6340:	002b0800 	eoreq	r0, fp, r0, lsl #16
    6344:	34040000 	strcc	r0, [r4], #-0
    6348:	0000a507 	andeq	sl, r0, r7, lsl #10
    634c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6350:	064f0800 	strbeq	r0, [pc], -r0, lsl #16
    6354:	35040000 	strcc	r0, [r4, #-0]
    6358:	0000a503 	andeq	sl, r0, r3, lsl #10
    635c:	06010100 	streq	r0, [r1], -r0, lsl #2
    6360:	02de0800 	sbcseq	r0, lr, #0, 16
    6364:	36040000 	strcc	r0, [r4], -r0
    6368:	0000a503 	andeq	sl, r0, r3, lsl #10
    636c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6370:	06ba0800 	ldrteq	r0, [sl], r0, lsl #16
    6374:	37040000 	strcc	r0, [r4, -r0]
    6378:	0000a503 	andeq	sl, r0, r3, lsl #10
    637c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6380:	0aa20800 	beq	fe888388 <_estack+0xde883388>
    6384:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6388:	0000a503 	andeq	sl, r0, r3, lsl #10
    638c:	00040100 	andeq	r0, r4, r0, lsl #2
    6390:	065e0900 	ldrbeq	r0, [lr], -r0, lsl #18
    6394:	3a040000 	bcc	10639c <__ccfg+0xe63f4>
    6398:	0000a507 	andeq	sl, r0, r7, lsl #10
    639c:	fe090100 	cdp2	1, 0, cr0, cr9, cr0, {0}
    63a0:	04000008 	streq	r0, [r0], #-8
    63a4:	00a5033c 	adceq	r0, r5, ip, lsr r3
    63a8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    63ac:	00000f2f 	andeq	r0, r0, pc, lsr #30
    63b0:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    63b4:	03000000 	movweq	r0, #0
    63b8:	00091609 	andeq	r1, r9, r9, lsl #12
    63bc:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    63c0:	000000b6 	strheq	r0, [r0], -r6
    63c4:	14030004 	strne	r0, [r3], #-4
    63c8:	04000003 	streq	r0, [r0], #-3
    63cc:	00d30341 	sbcseq	r0, r3, r1, asr #6
    63d0:	61060000 	mrsvs	r0, (UNDEF: 6)
    63d4:	0a000001 	beq	63e0 <__exidx_end+0x904>
    63d8:	000006c1 	andeq	r0, r0, r1, asr #13
    63dc:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    63e0:	01000001 	tsteq	r0, r1
    63e4:	01970a01 	orrseq	r0, r7, r1, lsl #20
    63e8:	45040000 	strmi	r0, [r4, #-0]
    63ec:	00018e0e 	andeq	r8, r1, lr, lsl #28
    63f0:	0b010100 	bleq	467f8 <__ccfg+0x26850>
    63f4:	00019404 	andeq	r9, r1, r4, lsl #8
    63f8:	08010200 	stmdaeq	r1, {r9}
    63fc:	00000c67 	andeq	r0, r0, r7, ror #24
    6400:	00019405 	andeq	r9, r1, r5, lsl #8
    6404:	031d0a00 	tsteq	sp, #0, 20
    6408:	45040000 	strmi	r0, [r4, #-0]
    640c:	00018e1e 	andeq	r8, r1, lr, lsl lr
    6410:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6414:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6418:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    641c:	000ccd09 	andeq	ip, ip, r9, lsl #26
    6420:	0b900500 	bleq	fe407828 <_estack+0xde402828>
    6424:	00000067 	andeq	r0, r0, r7, rrx
    6428:	106a0900 	rsbne	r0, sl, r0, lsl #18
    642c:	91050000 	mrsls	r0, (UNDEF: 5)
    6430:	00008f08 	andeq	r8, r0, r8, lsl #30
    6434:	bc090400 	cfstrslt	mvf0, [r9], {-0}
    6438:	05000001 	streq	r0, [r0, #-1]
    643c:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    6440:	00060000 	andeq	r0, r6, r0
    6444:	000cc103 	andeq	ip, ip, r3, lsl #2
    6448:	03930500 	orrseq	r0, r3, #0, 10
    644c:	000001ae 	andeq	r0, r0, lr, lsr #3
    6450:	0001df0c 	andeq	sp, r1, ip, lsl #30
    6454:	0001f600 	andeq	pc, r1, r0, lsl #12
    6458:	0a000d00 	beq	9860 <__exidx_end+0x3d84>
    645c:	00000940 	andeq	r0, r0, r0, asr #18
    6460:	eb0f9905 	bl	3ec87c <__ccfg+0x3cc8d4>
    6464:	01000001 	tsteq	r0, r1
    6468:	06010701 	streq	r0, [r1], -r1, lsl #14
    646c:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    6470:	1d080000 	stcne	0, cr0, [r8, #-0]
    6474:	06000009 	streq	r0, [r0], -r9
    6478:	00a50793 	umlaleq	r0, r5, r3, r7
    647c:	07010000 	streq	r0, [r1, -r0]
    6480:	cf080001 	svcgt	0x00080001
    6484:	06000005 	streq	r0, [r0], -r5
    6488:	00a50394 	umlaleq	r0, r5, r4, r3
    648c:	01010000 	mrseq	r0, (UNDEF: 1)
    6490:	03000000 	movweq	r0, #0
    6494:	00000aae 	andeq	r0, r0, lr, lsr #21
    6498:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    649c:	05000002 	streq	r0, [r0, #-2]
    64a0:	0000022e 	andeq	r0, r0, lr, lsr #4
    64a4:	00023a0c 	andeq	r3, r2, ip, lsl #20
    64a8:	00024a00 	andeq	r4, r2, r0, lsl #20
    64ac:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    64b0:	0000023f 	andeq	r0, r0, pc, lsr r2
    64b4:	0003ac0a 	andeq	sl, r3, sl, lsl #24
    64b8:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    64bc:	0000024a 	andeq	r0, r0, sl, asr #4
    64c0:	9b0c0101 	blls	3068cc <__ccfg+0x2e6924>
    64c4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    64c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    64cc:	025d0500 	subseq	r0, sp, #0, 10
    64d0:	110a0000 	mrsne	r0, (UNDEF: 10)
    64d4:	07000006 	streq	r0, [r0, -r6]
    64d8:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    64dc:	01010000 	mrseq	r0, (UNDEF: 1)
    64e0:	0008e00a 	andeq	lr, r8, sl
    64e4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    64e8:	000000b6 	strheq	r0, [r0], -r6
    64ec:	750e0101 	strvc	r0, [lr, #-257]	; 0xfffffeff
    64f0:	0800000c 	stmdaeq	r0, {r2, r3}
    64f4:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    64f8:	0b000002 	bleq	6508 <__exidx_end+0xa2c>
    64fc:	00029c04 	andeq	r9, r2, r4, lsl #24
    6500:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    6504:	10000002 	andne	r0, r0, r2
    6508:	0000008f 	andeq	r0, r0, pc, lsl #1
    650c:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    6510:	02b30000 	adcseq	r0, r3, #0
    6514:	000d0000 	andeq	r0, sp, r0
    6518:	0002a805 	andeq	sl, r2, r5, lsl #16
    651c:	09e91100 	stmibeq	r9!, {r8, ip}^
    6520:	7f080000 	svcvc	0x00080000
    6524:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    6528:	01010000 	mrseq	r0, (UNDEF: 1)
    652c:	00039811 	andeq	r9, r3, r1, lsl r8
    6530:	01820800 	orreq	r0, r2, r0, lsl #16
    6534:	0000c214 	andeq	ip, r0, r4, lsl r2
    6538:	11010100 	mrsne	r0, (UNDEF: 17)
    653c:	00000370 	andeq	r0, r0, r0, ror r3
    6540:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    6544:	000000b6 	strheq	r0, [r0], -r6
    6548:	08120101 	ldmdaeq	r2, {r0, r8}
    654c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    6550:	0000030c 	andeq	r0, r0, ip, lsl #6
    6554:	003c9113 	eorseq	r9, ip, r3, lsl r1
    6558:	03070800 	movweq	r0, #30720	; 0x7800
    655c:	00008f07 	andeq	r8, r0, r7, lsl #30
    6560:	c2130000 	andsgt	r0, r3, #0
    6564:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    6568:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    656c:	04000000 	streq	r0, [r0], #-0
    6570:	0a0c0e00 	beq	309d78 <__ccfg+0x2e9dd0>
    6574:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    6578:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    657c:	20140000 	andscs	r0, r4, r0
    6580:	30000000 	andcc	r0, r0, r0
    6584:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    6588:	0000037c 	andeq	r0, r0, ip, ror r3
    658c:	001f1913 	andseq	r1, pc, r3, lsl r9	; <UNPREDICTABLE>
    6590:	03140800 	tsteq	r4, #0, 16
    6594:	00008f08 	andeq	r8, r0, r8, lsl #30
    6598:	ea130000 	b	4c65a0 <__ccfg+0x4a65f8>
    659c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    65a0:	8f080315 	svchi	0x00080315
    65a4:	02000000 	andeq	r0, r0, #0
    65a8:	004c7e13 	subeq	r7, ip, r3, lsl lr
    65ac:	03160800 	tsteq	r6, #0, 16
    65b0:	0002890b 	andeq	r8, r2, fp, lsl #18
    65b4:	44130400 	ldrmi	r0, [r3], #-1024	; 0xfffffc00
    65b8:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    65bc:	c7090317 	smladgt	r9, r7, r3, r0
    65c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    65c4:	00000f13 	andeq	r0, r0, r3, lsl pc
    65c8:	03180800 	tsteq	r8, #0, 16
    65cc:	00037c0f 	andeq	r7, r3, pc, lsl #24
    65d0:	60130c00 	andsvs	r0, r3, r0, lsl #24
    65d4:	08000009 	stmdaeq	r0, {r0, r3}
    65d8:	8c150319 	ldchi	3, cr0, [r5], {25}
    65dc:	2c000003 	stccs	0, cr0, [r0], {3}
    65e0:	030c0c00 	movweq	r0, #52224	; 0xcc00
    65e4:	038c0000 	orreq	r0, ip, #0
    65e8:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    65ec:	03000000 	movweq	r0, #0
    65f0:	19040b00 	stmdbne	r4, {r8, r9, fp}
    65f4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    65f8:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    65fc:	1b031c08 	blne	cd624 <__ccfg+0xad67c>
    6600:	00000319 	andeq	r0, r0, r9, lsl r3
    6604:	000bbf11 	andeq	fp, fp, r1, lsl pc
    6608:	031e0800 	tsteq	lr, #0, 16
    660c:	0003ae14 	andeq	sl, r3, r4, lsl lr
    6610:	0b010100 	bleq	46a18 <__ccfg+0x26a70>
    6614:	00039204 	andeq	r9, r3, r4, lsl #4
    6618:	07120a00 	ldreq	r0, [r2, -r0, lsl #20]
    661c:	1d090000 	stcne	0, cr0, [r9, #-0]
    6620:	00008f13 	andeq	r8, r0, r3, lsl pc
    6624:	0a010100 	beq	46a2c <__ccfg+0x26a84>
    6628:	000002e5 	andeq	r0, r0, r5, ror #5
    662c:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    6630:	01000000 	mrseq	r0, (UNDEF: 0)
    6634:	0c6c0a01 			; <UNDEFINED> instruction: 0x0c6c0a01
    6638:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    663c:	0000a024 	andeq	sl, r0, r4, lsr #32
    6640:	0a010100 	beq	46a48 <__ccfg+0x26aa0>
    6644:	00000c8a 	andeq	r0, r0, sl, lsl #25
    6648:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    664c:	01000003 	tsteq	r0, r3
    6650:	1c461601 	mcrrne	6, 0, r1, r6, cr1
    6654:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    6658:	0002960f 	andeq	r9, r2, pc, lsl #12
    665c:	00030500 	andeq	r0, r3, r0, lsl #10
    6660:	16000000 	strne	r0, [r0], -r0
    6664:	00001c57 	andeq	r1, r0, r7, asr ip
    6668:	8f0d0901 	svchi	0x000d0901
    666c:	05000000 	streq	r0, [r0, #-0]
    6670:	00000003 	andeq	r0, r0, r3
    6674:	026d1700 	rsbeq	r1, sp, #0, 14
    6678:	0a010000 	beq	46680 <__ccfg+0x266d8>
    667c:	de03050c 	cfsh32le	mvfx0, mvfx3, #12
    6680:	18000050 	stmdane	r0, {r4, r6}
    6684:	001c6c01 	andseq	r6, ip, r1, lsl #24
    6688:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    668c:	00000001 	andeq	r0, r0, r1
    6690:	00000000 	andeq	r0, r0, r0
    6694:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    6698:	19000004 	stmdbne	r0, {r2}
    669c:	00746361 	rsbseq	r6, r4, r1, ror #6
    66a0:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    66a4:	b6000002 	strlt	r0, [r0], -r2
    66a8:	00000022 	andeq	r0, r0, r2, lsr #32
    66ac:	1c5f0118 	ldfnee	f0, [pc], {24}
    66b0:	1c010000 	stcne	0, cr0, [r1], {-0}
    66b4:	00000101 	andeq	r0, r0, r1, lsl #2
    66b8:	00000000 	andeq	r0, r0, r0
    66bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    66c0:	000004de 	ldrdeq	r0, [r0], -lr
    66c4:	000c361a 	andeq	r3, ip, sl, lsl r6
    66c8:	011c0100 	tsteq	ip, r0, lsl #2
    66cc:	0000008f 	andeq	r0, r0, pc, lsl #1
    66d0:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    66d4:	001c411b 	andseq	r4, ip, fp, lsl r1
    66d8:	01210100 			; <UNDEFINED> instruction: 0x01210100
    66dc:	00000000 	andeq	r0, r0, r0
    66e0:	001c4e1b 	andseq	r4, ip, fp, lsl lr
    66e4:	01300100 	teqeq	r0, r0, lsl #2
    66e8:	00000000 	andeq	r0, r0, r0
    66ec:	001da21b 	andseq	sl, sp, fp, lsl r2
    66f0:	01370100 	teqeq	r7, r0, lsl #2
    66f4:	00000000 	andeq	r0, r0, r0
    66f8:	0004de1c 	andeq	sp, r4, ip, lsl lr
    66fc:	00000000 	andeq	r0, r0, r0
    6700:	000ab000 	andeq	fp, sl, r0
    6704:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    6708:	000004ad 	andeq	r0, r0, sp, lsr #9
    670c:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    6710:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    6714:	00000004 	andeq	r0, r0, r4
    6718:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    671c:	0100000a 	tsteq	r0, sl
    6720:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    6724:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    6728:	00000004 	andeq	r0, r0, r4
    672c:	0004de1e 	andeq	sp, r4, lr, lsl lr
    6730:	00000000 	andeq	r0, r0, r0
    6734:	000af000 	andeq	pc, sl, r0
    6738:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    673c:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    6740:	1f000000 	svcne	0x00000000
    6744:	00001bca 	andeq	r1, r0, sl, asr #23
    6748:	0101a402 	tsteq	r1, r2, lsl #8
    674c:	00000067 	andeq	r0, r0, r7, rrx
    6750:	11162003 	tstne	r6, r3
    6754:	a4020000 	strge	r0, [r2], #-0
    6758:	00006718 	andeq	r6, r0, r8, lsl r7
    675c:	a7000000 	strge	r0, [r0, -r0]
    6760:	0300000a 	movweq	r0, #10
    6764:	0017ee00 	andseq	lr, r7, r0, lsl #28
    6768:	a3010400 	movwge	r0, #5120	; 0x1400
    676c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6770:	00001d3c 	andeq	r1, r0, ip, lsr sp
    6774:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6778:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    677c:	00000000 	andeq	r0, r0, r0
    6780:	000046b5 			; <UNDEFINED> instruction: 0x000046b5
    6784:	60060102 	andvs	r0, r6, r2, lsl #2
    6788:	0200000c 	andeq	r0, r0, #12
    678c:	0a6e0502 	beq	1b87b9c <__ccfg+0x1b67bf4>
    6790:	04020000 	streq	r0, [r2], #-0
    6794:	00080005 	andeq	r0, r8, r5
    6798:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    679c:	000007fb 	strdeq	r0, [r0], -fp
    67a0:	002a1103 	eoreq	r1, sl, r3, lsl #2
    67a4:	182e0400 	stmdane	lr!, {sl}
    67a8:	0000004d 	andeq	r0, r0, sp, asr #32
    67ac:	5e080102 	adfple	f0, f0, f2
    67b0:	0300000c 	movweq	r0, #12
    67b4:	00002e07 	andeq	r2, r0, r7, lsl #28
    67b8:	60193104 	andsvs	r3, r9, r4, lsl #2
    67bc:	02000000 	andeq	r0, r0, #0
    67c0:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
    67c4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    67c8:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    67cc:	00731934 	rsbseq	r1, r3, r4, lsr r9
    67d0:	04020000 	streq	r0, [r2], #-0
    67d4:	00042807 	andeq	r2, r4, r7, lsl #16
    67d8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    67dc:	00000423 	andeq	r0, r0, r3, lsr #8
    67e0:	69050404 	stmdbvs	r5, {r2, sl}
    67e4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    67e8:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    67ec:	1d030000 	stcne	0, cr0, [r3, #-0]
    67f0:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    67f4:	00411226 	subeq	r1, r1, r6, lsr #4
    67f8:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
    67fc:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    6800:	00541227 	subseq	r1, r4, r7, lsr #4
    6804:	9b050000 	blls	14680c <__ccfg+0x126864>
    6808:	06000000 	streq	r0, [r0], -r0
    680c:	0000009b 	muleq	r0, fp, r0
    6810:	001db703 	andseq	fp, sp, r3, lsl #14
    6814:	122b0500 	eorne	r0, fp, #0, 10
    6818:	00000041 	andeq	r0, r0, r1, asr #32
    681c:	0000b106 	andeq	fp, r0, r6, lsl #2
    6820:	00b10500 	adcseq	r0, r1, r0, lsl #10
    6824:	42030000 	andmi	r0, r3, #0
    6828:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    682c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6830:	c7050000 	strgt	r0, [r5, -r0]
    6834:	03000000 	movweq	r0, #0
    6838:	00000649 	andeq	r0, r0, r9, asr #12
    683c:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    6840:	07000000 	streq	r0, [r0, -r0]
    6844:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    6848:	00000172 	andeq	r0, r0, r2, ror r1
    684c:	00002b08 	andeq	r2, r0, r8, lsl #22
    6850:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    6854:	000000b1 	strheq	r0, [r0], -r1
    6858:	00070101 	andeq	r0, r7, r1, lsl #2
    685c:	00064f08 	andeq	r4, r6, r8, lsl #30
    6860:	03350500 	teqeq	r5, #0, 10
    6864:	000000b1 	strheq	r0, [r0], -r1
    6868:	00060101 	andeq	r0, r6, r1, lsl #2
    686c:	0002de08 	andeq	sp, r2, r8, lsl #28
    6870:	03360500 	teqeq	r6, #0, 10
    6874:	000000b1 	strheq	r0, [r0], -r1
    6878:	00050101 	andeq	r0, r5, r1, lsl #2
    687c:	0006ba08 	andeq	fp, r6, r8, lsl #20
    6880:	03370500 	teqeq	r7, #0, 10
    6884:	000000b1 	strheq	r0, [r0], -r1
    6888:	00040101 	andeq	r0, r4, r1, lsl #2
    688c:	000aa208 	andeq	sl, sl, r8, lsl #4
    6890:	03380500 	teqeq	r8, #0, 10
    6894:	000000b1 	strheq	r0, [r0], -r1
    6898:	00000401 	andeq	r0, r0, r1, lsl #8
    689c:	00065e09 	andeq	r5, r6, r9, lsl #28
    68a0:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    68a4:	000000b1 	strheq	r0, [r0], -r1
    68a8:	08fe0901 	ldmeq	lr!, {r0, r8, fp}^
    68ac:	3c050000 	stccc	0, cr0, [r5], {-0}
    68b0:	0000b103 	andeq	fp, r0, r3, lsl #2
    68b4:	2f090200 	svccs	0x00090200
    68b8:	0500000f 	streq	r0, [r0, #-15]
    68bc:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    68c0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    68c4:	00000916 	andeq	r0, r0, r6, lsl r9
    68c8:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    68cc:	04000000 	streq	r0, [r0], #-0
    68d0:	03140300 	tsteq	r4, #0, 6
    68d4:	41050000 	mrsmi	r0, (UNDEF: 5)
    68d8:	0000e403 	andeq	lr, r0, r3, lsl #8
    68dc:	01720600 	cmneq	r2, r0, lsl #12
    68e0:	c10a0000 	mrsgt	r0, (UNDEF: 10)
    68e4:	05000006 	streq	r0, [r0, #-6]
    68e8:	017e1a43 	cmneq	lr, r3, asr #20
    68ec:	01010000 	mrseq	r0, (UNDEF: 1)
    68f0:	0001970a 	andeq	r9, r1, sl, lsl #14
    68f4:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    68f8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    68fc:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6900:	000001a5 	andeq	r0, r0, r5, lsr #3
    6904:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    6908:	0500000c 	streq	r0, [r0, #-12]
    690c:	000001a5 	andeq	r0, r0, r5, lsr #3
    6910:	00031d0a 	andeq	r1, r3, sl, lsl #26
    6914:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    6918:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    691c:	08070101 	stmdaeq	r7, {r0, r8}
    6920:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    6924:	09000001 	stmdbeq	r0, {r0}
    6928:	00000ccd 	andeq	r0, r0, sp, asr #25
    692c:	670b9006 	strvs	r9, [fp, -r6]
    6930:	00000000 	andeq	r0, r0, r0
    6934:	00106a09 	andseq	r6, r0, r9, lsl #20
    6938:	08910600 	ldmeq	r1, {r9, sl}
    693c:	0000009b 	muleq	r0, fp, r0
    6940:	01bc0904 			; <UNDEFINED> instruction: 0x01bc0904
    6944:	92060000 	andls	r0, r6, #0
    6948:	0000bd10 	andeq	fp, r0, r0, lsl sp
    694c:	03000600 	movweq	r0, #1536	; 0x600
    6950:	00000cc1 	andeq	r0, r0, r1, asr #25
    6954:	bf039306 	svclt	0x00039306
    6958:	0c000001 	stceq	0, cr0, [r0], {1}
    695c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6960:	00000207 	andeq	r0, r0, r7, lsl #4
    6964:	400a000d 	andmi	r0, sl, sp
    6968:	06000009 	streq	r0, [r0], -r9
    696c:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    6970:	01010000 	mrseq	r0, (UNDEF: 1)
    6974:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    6978:	01070000 	mrseq	r0, (UNDEF: 7)
    697c:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    6980:	08000002 	stmdaeq	r0, {r1}
    6984:	0000091d 	andeq	r0, r0, sp, lsl r9
    6988:	b1079307 	tstlt	r7, r7, lsl #6
    698c:	01000000 	mrseq	r0, (UNDEF: 0)
    6990:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    6994:	000005cf 	andeq	r0, r0, pc, asr #11
    6998:	b1039407 	tstlt	r3, r7, lsl #8
    699c:	01000000 	mrseq	r0, (UNDEF: 0)
    69a0:	00000001 	andeq	r0, r0, r1
    69a4:	000aae03 	andeq	sl, sl, r3, lsl #28
    69a8:	03960700 	orrseq	r0, r6, #0, 14
    69ac:	0000021b 	andeq	r0, r0, fp, lsl r2
    69b0:	00024505 	andeq	r4, r2, r5, lsl #10
    69b4:	02510c00 	subseq	r0, r1, #0, 24
    69b8:	02610000 	rsbeq	r0, r1, #0
    69bc:	000d0000 	andeq	r0, sp, r0
    69c0:	00025605 	andeq	r5, r2, r5, lsl #12
    69c4:	03ac0a00 			; <UNDEFINED> instruction: 0x03ac0a00
    69c8:	9c070000 	stcls	0, cr0, [r7], {-0}
    69cc:	00026117 	andeq	r6, r2, r7, lsl r1
    69d0:	0c010100 	stfeqs	f0, [r1], {-0}
    69d4:	000000a7 	andeq	r0, r0, r7, lsr #1
    69d8:	0000027f 	andeq	r0, r0, pc, ror r2
    69dc:	7405000d 	strvc	r0, [r5], #-13
    69e0:	0a000002 	beq	69f0 <__exidx_end+0xf14>
    69e4:	00000611 	andeq	r0, r0, r1, lsl r6
    69e8:	7f130608 	svcvc	0x00130608
    69ec:	01000002 	tsteq	r0, r2
    69f0:	08e00a01 	stmiaeq	r0!, {r0, r9, fp}^
    69f4:	c3060000 	movwgt	r0, #24576	; 0x6000
    69f8:	0000c70e 	andeq	ip, r0, lr, lsl #14
    69fc:	0e010100 	adfeqs	f0, f1, f0
    6a00:	00000c75 	andeq	r0, r0, r5, ror ip
    6a04:	10016e09 	andne	r6, r1, r9, lsl #28
    6a08:	000002ad 	andeq	r0, r0, sp, lsr #5
    6a0c:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    6a10:	010f0000 	mrseq	r0, CPSR
    6a14:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    6a18:	00009b10 	andeq	r9, r0, r0, lsl fp
    6a1c:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    6a20:	ca000001 	bgt	6a2c <__exidx_end+0xf50>
    6a24:	0d000002 	stceq	0, cr0, [r0, #-8]
    6a28:	02bf0500 	adcseq	r0, pc, #0, 10
    6a2c:	e9110000 	ldmdb	r1, {}	; <UNPREDICTABLE>
    6a30:	09000009 	stmdbeq	r0, {r0, r3}
    6a34:	ca16017f 	bgt	587038 <__ccfg+0x567090>
    6a38:	01000002 	tsteq	r0, r2
    6a3c:	03981101 	orrseq	r1, r8, #1073741824	; 0x40000000
    6a40:	82090000 	andhi	r0, r9, #0
    6a44:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    6a48:	01010000 	mrseq	r0, (UNDEF: 1)
    6a4c:	00037011 	andeq	r7, r3, r1, lsl r0
    6a50:	02d80900 	sbcseq	r0, r8, #0, 18
    6a54:	0000c70e 	andeq	ip, r0, lr, lsl #14
    6a58:	12010100 	andne	r0, r1, #0, 2
    6a5c:	03030908 	movweq	r0, #14600	; 0x3908
    6a60:	00032309 	andeq	r2, r3, r9, lsl #6
    6a64:	3c911300 	ldccc	3, cr1, [r1], {0}
    6a68:	07090000 	streq	r0, [r9, -r0]
    6a6c:	009b0703 	addseq	r0, fp, r3, lsl #14
    6a70:	13000000 	movwne	r0, #0
    6a74:	00000fc2 	andeq	r0, r0, r2, asr #31
    6a78:	08030809 	stmdaeq	r3, {r0, r3, fp}
    6a7c:	000000d8 	ldrdeq	r0, [r0], -r8
    6a80:	0c0e0004 	stceq	0, cr0, [lr], {4}
    6a84:	0900000a 	stmdbeq	r0, {r1, r3}
    6a88:	fc030309 	stc2	3, cr0, [r3], {9}
    6a8c:	14000002 	strne	r0, [r0], #-2
    6a90:	00000020 	andeq	r0, r0, r0, lsr #32
    6a94:	030b0930 	movweq	r0, #47408	; 0xb930
    6a98:	00039308 	andeq	r9, r3, r8, lsl #6
    6a9c:	1f191300 	svcne	0x00191300
    6aa0:	14090000 	strne	r0, [r9], #-0
    6aa4:	009b0803 	addseq	r0, fp, r3, lsl #16
    6aa8:	13000000 	movwne	r0, #0
    6aac:	00000bea 	andeq	r0, r0, sl, ror #23
    6ab0:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    6ab4:	0000009b 	muleq	r0, fp, r0
    6ab8:	4c7e1302 	ldclmi	3, cr1, [lr], #-8
    6abc:	16090000 	strne	r0, [r9], -r0
    6ac0:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    6ac4:	13040000 	movwne	r0, #16384	; 0x4000
    6ac8:	00004744 	andeq	r4, r0, r4, asr #14
    6acc:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    6ad0:	000000d8 	ldrdeq	r0, [r0], -r8
    6ad4:	000f1308 	andeq	r1, pc, r8, lsl #6
    6ad8:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    6adc:	03930f03 	orrseq	r0, r3, #3, 30
    6ae0:	130c0000 	movwne	r0, #49152	; 0xc000
    6ae4:	00000960 	andeq	r0, r0, r0, ror #18
    6ae8:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    6aec:	000003a3 	andeq	r0, r0, r3, lsr #7
    6af0:	230c002c 	movwcs	r0, #49196	; 0xc02c
    6af4:	a3000003 	movwge	r0, #3
    6af8:	15000003 	strne	r0, [r0, #-3]
    6afc:	00000088 	andeq	r0, r0, r8, lsl #1
    6b00:	040b0003 	streq	r0, [fp], #-3
    6b04:	00000330 	andeq	r0, r0, r0, lsr r3
    6b08:	000bdf0e 	andeq	sp, fp, lr, lsl #30
    6b0c:	031c0900 	tsteq	ip, #0, 18
    6b10:	0003301b 	andeq	r3, r3, fp, lsl r0
    6b14:	0bbf1100 	bleq	fefcaf1c <_estack+0xdefc5f1c>
    6b18:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    6b1c:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    6b20:	01010000 	mrseq	r0, (UNDEF: 1)
    6b24:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    6b28:	120a0000 	andne	r0, sl, #0
    6b2c:	0a000007 	beq	6b50 <__exidx_end+0x1074>
    6b30:	009b131d 	addseq	r1, fp, sp, lsl r3
    6b34:	01010000 	mrseq	r0, (UNDEF: 1)
    6b38:	0002e50a 	andeq	lr, r2, sl, lsl #10
    6b3c:	1a1e0a00 	bne	789344 <__ccfg+0x76939c>
    6b40:	000000ac 	andeq	r0, r0, ip, lsr #1
    6b44:	6c0a0101 	stfvss	f0, [sl], {1}
    6b48:	0a00000c 	beq	6b80 <__exidx_end+0x10a4>
    6b4c:	00ac241e 	adceq	r2, ip, lr, lsl r4
    6b50:	01010000 	mrseq	r0, (UNDEF: 1)
    6b54:	000c8a0a 	andeq	r8, ip, sl, lsl #20
    6b58:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    6b5c:	000003c5 	andeq	r0, r0, r5, asr #7
    6b60:	c4160101 	ldrgt	r0, [r6], #-257	; 0xfffffeff
    6b64:	0100000b 	tsteq	r0, fp
    6b68:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    6b6c:	03050000 	movweq	r0, #20480	; 0x5000
    6b70:	00000000 	andeq	r0, r0, r0
    6b74:	000ce816 	andeq	lr, ip, r6, lsl r8
    6b78:	150f0100 	strne	r0, [pc, #-256]	; 6a80 <__exidx_end+0xfa4>
    6b7c:	000000c7 	andeq	r0, r0, r7, asr #1
    6b80:	00000305 	andeq	r0, r0, r5, lsl #6
    6b84:	8e160000 	cdphi	0, 1, cr0, cr6, cr0, {0}
    6b88:	0100001d 	tsteq	r0, sp, lsl r0
    6b8c:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    6b90:	03050000 	movweq	r0, #20480	; 0x5000
    6b94:	00000000 	andeq	r0, r0, r0
    6b98:	001cf216 	andseq	pc, ip, r6, lsl r2	; <UNPREDICTABLE>
    6b9c:	0d120100 	ldfeqs	f0, [r2, #-0]
    6ba0:	000000b1 	strheq	r0, [r0], -r1
    6ba4:	05f00305 	ldrbeq	r0, [r0, #773]!	; 0x305
    6ba8:	36162000 	ldrcc	r2, [r6], -r0
    6bac:	0100001d 	tsteq	r0, sp, lsl r0
    6bb0:	00b10313 	adcseq	r0, r1, r3, lsl r3
    6bb4:	03050000 	movweq	r0, #20480	; 0x5000
    6bb8:	200005f1 	strdcs	r0, [r0], -r1
    6bbc:	00164f16 	andseq	r4, r6, r6, lsl pc
    6bc0:	0d150100 	ldfeqs	f0, [r5, #-0]
    6bc4:	0000009b 	muleq	r0, fp, r0
    6bc8:	00000305 	andeq	r0, r0, r5, lsl #6
    6bcc:	01170000 	tsteq	r7, r0
    6bd0:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    6bd4:	00061303 	andeq	r1, r6, r3, lsl #6
    6bd8:	00000000 	andeq	r0, r0, r0
    6bdc:	01000000 	mrseq	r0, (UNDEF: 0)
    6be0:	9301189c 	movwls	r1, #6300	; 0x189c
    6be4:	0300001d 	movweq	r0, #29
    6be8:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    6bf4:	01000000 	mrseq	r0, (UNDEF: 0)
    6bf8:	0004bc9c 	muleq	r4, ip, ip
    6bfc:	72651900 	rsbvc	r1, r5, #0, 18
    6c00:	19080300 	stmdbne	r8, {r8, r9}
    6c04:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    6c08:	00002326 	andeq	r2, r0, r6, lsr #6
    6c0c:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    6c10:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    6c14:	000004c2 	andeq	r0, r0, r2, asr #9
    6c18:	0b005101 	bleq	1b024 <__exidx_end+0x15548>
    6c1c:	00008f04 	andeq	r8, r0, r4, lsl #30
    6c20:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    6c24:	1b000000 	blne	6c2c <__exidx_end+0x1150>
    6c28:	001d1501 	andseq	r1, sp, r1, lsl #10
    6c2c:	01600100 	cmneq	r0, r0, lsl #2
    6c30:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6c3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6c40:	000004f6 	strdeq	r0, [r0], -r6
    6c44:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    6c48:	14016001 	strne	r6, [r1], #-1
    6c4c:	0000009b 	muleq	r0, fp, r0
    6c50:	00002339 	andeq	r2, r0, r9, lsr r3
    6c54:	0c011d00 	stceq	13, cr1, [r1], {-0}
    6c58:	0100001d 	tsteq	r0, sp, lsl r0
    6c5c:	0006015b 	andeq	r0, r6, fp, asr r1
    6c60:	00000000 	andeq	r0, r0, r0
    6c64:	01000000 	mrseq	r0, (UNDEF: 0)
    6c68:	e9011b9c 	stmdb	r1, {r2, r3, r4, r7, r8, r9, fp, ip}
    6c6c:	0100001c 	tsteq	r0, ip, lsl r0
    6c70:	01060121 	tsteq	r6, r1, lsr #2
    6c74:	0000009b 	muleq	r0, fp, r0
	...
    6c80:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    6c84:	731c0000 	tstvc	ip, #0
    6c88:	21010074 	tstcs	r1, r4, ror r0
    6c8c:	009b1501 	addseq	r1, fp, r1, lsl #10
    6c90:	234c0000 	movtcs	r0, #49152	; 0xc000
    6c94:	611c0000 	tstvs	ip, r0
    6c98:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c9c:	0000c71f 	andeq	ip, r0, pc, lsl r7
    6ca0:	00235f00 	eoreq	r5, r3, r0, lsl #30
    6ca4:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    6ca8:	2e012101 	adfcss	f2, f1, f1
    6cac:	00000215 	andeq	r0, r0, r5, lsl r2
    6cb0:	0000237d 	andeq	r2, r0, sp, ror r3
    6cb4:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    6cb8:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6cbc:	00009b36 	andeq	r9, r0, r6, lsr fp
    6cc0:	00239000 	eoreq	r9, r3, r0
    6cc4:	6c621e00 	stclvs	14, cr1, [r2], #-0
    6cc8:	01230100 			; <UNDEFINED> instruction: 0x01230100
    6ccc:	00009b07 	andeq	r9, r0, r7, lsl #22
    6cd0:	0023a300 	eoreq	sl, r3, r0, lsl #6
    6cd4:	1d001f00 	stcne	15, cr1, [r0, #-0]
    6cd8:	32010000 	andcc	r0, r1, #0
    6cdc:	00000101 	andeq	r0, r0, r1, lsl #2
    6ce0:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    6ce4:	00000009 	andeq	r0, r0, r9
    6ce8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    6cec:	0100000c 	tsteq	r0, ip
    6cf0:	a3030143 	movwge	r0, #12611	; 0x3143
    6cf4:	21000005 	tstcs	r0, r5
    6cf8:	00000a12 	andeq	r0, r0, r2, lsl sl
    6cfc:	000a0521 	andeq	r0, sl, r1, lsr #10
    6d00:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    6d04:	00000009 	andeq	r0, r0, r9
    6d08:	00000000 	andeq	r0, r0, r0
    6d0c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d10:	21030150 	tstcs	r3, r0, asr r1
    6d14:	00000a12 	andeq	r0, r0, r2, lsl sl
    6d18:	000a0521 	andeq	r0, sl, r1, lsr #10
    6d1c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6d20:	001ce001 	andseq	lr, ip, r1
    6d24:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    6d28:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6d34:	819c0100 	orrshi	r0, ip, r0, lsl #2
    6d38:	19000006 	stmdbne	r0, {r1, r2}
    6d3c:	01007473 	tsteq	r0, r3, ror r4
    6d40:	009b15cb 	addseq	r1, fp, fp, asr #11
    6d44:	23cc0000 	biccs	r0, ip, #0
    6d48:	1d230000 	stcne	0, cr0, [r3, #-0]
    6d4c:	0100001d 	tsteq	r0, sp, lsl r0
    6d50:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    6d54:	23ea0000 	mvncs	r0, #0
    6d58:	cc230000 	stcgt	0, cr0, [r3], #-0
    6d5c:	0100001c 	tsteq	r0, ip, lsl r0
    6d60:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    6d64:	24130000 	ldrcs	r0, [r3], #-0
    6d68:	b8240000 	stmdalt	r4!, {}	; <UNPREDICTABLE>
    6d6c:	0100001c 	tsteq	r0, ip, lsl r0
    6d70:	000001e6 	andeq	r0, r0, r6, ror #3
    6d74:	a1240000 			; <UNDEFINED> instruction: 0xa1240000
    6d78:	0100001d 	tsteq	r0, sp, lsl r0
    6d7c:	000001ea 	andeq	r0, r0, sl, ror #3
    6d80:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    6d84:	00000008 	andeq	r0, r0, r8
    6d88:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6d8c:	0100000c 	tsteq	r0, ip
    6d90:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    6d94:	31000008 	tstcc	r0, r8
    6d98:	26000024 	strcs	r0, [r0], -r4, lsr #32
    6d9c:	0000086c 	andeq	r0, r0, ip, ror #16
    6da0:	00002444 	andeq	r2, r0, r4, asr #8
    6da4:	0009f627 	andeq	pc, r9, r7, lsr #12
    6da8:	00000000 	andeq	r0, r0, r0
    6dac:	000c8000 	andeq	r8, ip, r0
    6db0:	02430100 	subeq	r0, r3, #0, 2
    6db4:	00000664 	andeq	r0, r0, r4, ror #12
    6db8:	000a1221 	andeq	r1, sl, r1, lsr #4
    6dbc:	0a052100 	beq	14f1c4 <__ccfg+0x12f21c>
    6dc0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6dc4:	000009f6 	strdeq	r0, [r0], -r6
	...
    6dd0:	21024801 	tstcs	r2, r1, lsl #16
    6dd4:	00000a12 	andeq	r0, r0, r2, lsl sl
    6dd8:	000a0521 	andeq	r0, sl, r1, lsr #10
    6ddc:	00000000 	andeq	r0, r0, r0
    6de0:	1d220118 	stfnes	f0, [r2, #-96]!	; 0xffffffa0
    6de4:	b0010000 	andlt	r0, r1, r0
    6de8:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6df4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6df8:	00000704 	andeq	r0, r0, r4, lsl #14
    6dfc:	01006119 	tsteq	r0, r9, lsl r1
    6e00:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    6e04:	24570000 	ldrbcs	r0, [r7], #-0
    6e08:	73190000 	tstvc	r9, #0
    6e0c:	1eb00100 	frdnes	f0, f0, f0
    6e10:	00000704 	andeq	r0, r0, r4, lsl #14
    6e14:	00002480 	andeq	r2, r0, r0, lsl #9
    6e18:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    6e1c:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    6e20:	0000009b 	muleq	r0, fp, r0
    6e24:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    6e28:	0009f627 	andeq	pc, r9, r7, lsr #12
    6e2c:	00000000 	andeq	r0, r0, r0
    6e30:	000c5000 	andeq	r5, ip, r0
    6e34:	02ba0100 	adcseq	r0, sl, #0, 2
    6e38:	000006e8 	andeq	r0, r0, r8, ror #13
    6e3c:	000a1221 	andeq	r1, sl, r1, lsr #4
    6e40:	0a052100 	beq	14f248 <__ccfg+0x12f2a0>
    6e44:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6e48:	000009f6 	strdeq	r0, [r0], -r6
	...
    6e54:	2102c401 	tstcs	r2, r1, lsl #8
    6e58:	00000a12 	andeq	r0, r0, r2, lsl sl
    6e5c:	000a0521 	andeq	r0, sl, r1, lsr #10
    6e60:	0b000000 	bleq	6e68 <__exidx_end+0x138c>
    6e64:	0000b104 	andeq	fp, r0, r4, lsl #2
    6e68:	d7011700 	strle	r1, [r1, -r0, lsl #14]
    6e6c:	0100001c 	tsteq	r0, ip, lsl r0
    6e70:	25b806a8 	ldrcs	r0, [r8, #1704]!	; 0x6a8
    6e74:	25cc0000 	strbcs	r0, [ip]
    6e78:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e7c:	1cf80129 	ldfnee	f0, [r8], #164	; 0xa4
    6e80:	93010000 	movwls	r0, #4096	; 0x1000
    6e84:	00009b06 	andeq	r9, r0, r6, lsl #22
    6e88:	0025a400 	eoreq	sl, r5, r0, lsl #8
    6e8c:	0025b800 	eoreq	fp, r5, r0, lsl #16
    6e90:	2a9c0100 	bcs	fe707298 <_estack+0xde702298>
    6e94:	00001d9b 	muleq	r0, fp, sp
    6e98:	400d8201 	andmi	r8, sp, r1, lsl #4
    6e9c:	80000025 	andhi	r0, r0, r5, lsr #32
    6ea0:	01000025 	tsteq	r0, r5, lsr #32
    6ea4:	0007969c 	muleq	r7, ip, r6
    6ea8:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    6eac:	255a0000 	ldrbcs	r0, [sl, #-0]
    6eb0:	256e0000 	strbcs	r0, [lr, #-0]!
    6eb4:	8a010000 	bhi	46ebc <__ccfg+0x26f14>
    6eb8:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    6ebc:	255a0000 	ldrbcs	r0, [sl, #-0]
    6ec0:	0c200000 	stceq	0, cr0, [r0], #-0
    6ec4:	72010000 	andvc	r0, r1, #0
    6ec8:	00077902 	andeq	r7, r7, r2, lsl #18
    6ecc:	0a122100 	beq	48f2d4 <__ccfg+0x46f32c>
    6ed0:	05210000 	streq	r0, [r1, #-0]!
    6ed4:	0000000a 	andeq	r0, r0, sl
    6ed8:	0009f625 	andeq	pc, r9, r5, lsr #12
    6edc:	00256600 	eoreq	r6, r5, r0, lsl #12
    6ee0:	000c3800 	andeq	r3, ip, r0, lsl #16
    6ee4:	02740100 	rsbseq	r0, r4, #0, 2
    6ee8:	000a1221 	andeq	r1, sl, r1, lsr #4
    6eec:	0a052100 	beq	14f2f4 <__ccfg+0x12f34c>
    6ef0:	00000000 	andeq	r0, r0, r0
    6ef4:	1d2f2b00 	vstmdbne	pc!, {d2-d1}
    6ef8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    6efc:	882b010d 	stmdahi	fp!, {r0, r2, r3, r8}
    6f00:	0100001d 	tsteq	r0, sp, lsl r0
    6f04:	2b010d6d 	blcs	4a4c0 <__ccfg+0x2a518>
    6f08:	00001da7 	andeq	r1, r0, r7, lsr #27
    6f0c:	010d6601 	tsteq	sp, r1, lsl #12
    6f10:	001dad2c 	andseq	sl, sp, ip, lsr #26
    6f14:	0d580100 	ldfeqe	f0, [r8, #-0]
    6f18:	0024ec01 	eoreq	lr, r4, r1, lsl #24
    6f1c:	00254000 	eoreq	r4, r5, r0
    6f20:	429c0100 	addsmi	r0, ip, #0, 2
    6f24:	19000008 	stmdbne	r0, {r3}
    6f28:	01007473 	tsteq	r0, r3, ror r4
    6f2c:	009b1958 	addseq	r1, fp, r8, asr r9
    6f30:	24d20000 	ldrbcs	r0, [r2], #0
    6f34:	64190000 	ldrvs	r0, [r9], #-0
    6f38:	01006c65 	tsteq	r0, r5, ror #24
    6f3c:	009b2258 	addseq	r2, fp, r8, asr r2
    6f40:	24e50000 	strbtcs	r0, [r5], #0
    6f44:	42250000 	eormi	r0, r5, #0
    6f48:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    6f4c:	d8000024 	stmdale	r0, {r2, r5}
    6f50:	0100000b 	tsteq	r0, fp
    6f54:	d82d135c 	stmdale	sp!, {r2, r3, r4, r6, r8, r9, ip}
    6f58:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    6f5c:	00000853 	andeq	r0, r0, r3, asr r8
    6f60:	000024f8 	strdeq	r2, [r0], -r8
    6f64:	0009f627 	andeq	pc, r9, r7, lsr #12
    6f68:	0024f400 	eoreq	pc, r4, r0, lsl #8
    6f6c:	000bf800 	andeq	pc, fp, r0, lsl #16
    6f70:	02510100 	subseq	r0, r1, #0, 2
    6f74:	00000824 	andeq	r0, r0, r4, lsr #16
    6f78:	000a1221 	andeq	r1, sl, r1, lsr #4
    6f7c:	0a052100 	beq	14f384 <__ccfg+0x12f3dc>
    6f80:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6f84:	000009f6 	strdeq	r0, [r0], -r6
    6f88:	0000250e 	andeq	r2, r0, lr, lsl #10
    6f8c:	00002512 	andeq	r2, r0, r2, lsl r5
    6f90:	21025401 	tstcs	r2, r1, lsl #8
    6f94:	00000a12 	andeq	r0, r0, r2, lsl sl
    6f98:	000a0521 	andeq	r0, sl, r1, lsr #10
    6f9c:	00000000 	andeq	r0, r0, r0
    6fa0:	1d2a2f00 	stcne	15, cr2, [sl, #-0]
    6fa4:	4b010000 	blmi	46fac <__ccfg+0x27004>
    6fa8:	0000b10d 	andeq	fp, r0, sp, lsl #2
    6fac:	085e0100 	ldmdaeq	lr, {r8}^
    6fb0:	72300000 	eorsvc	r0, r0, #0
    6fb4:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    6fb8:	000000b1 	strheq	r0, [r0], -r1
    6fbc:	1d063100 	stfnes	f3, [r6, #-0]
    6fc0:	41010000 	mrsmi	r0, (UNDEF: 1)
    6fc4:	8301010d 	movwhi	r0, #4365	; 0x110d
    6fc8:	32000008 	andcc	r0, r0, #8
    6fcc:	00646d63 	rsbeq	r6, r4, r3, ror #26
    6fd0:	b1194101 	tstlt	r9, r1, lsl #2
    6fd4:	32000000 	andcc	r0, r0, #0
    6fd8:	41010061 	tstmi	r1, r1, rrx
    6fdc:	0000c724 	andeq	ip, r0, r4, lsr #14
    6fe0:	d12c0000 			; <UNDEFINED> instruction: 0xd12c0000
    6fe4:	0100001c 	tsteq	r0, ip, lsl r0
    6fe8:	d4010d3a 	strle	r0, [r1], #-3386	; 0xfffff2c6
    6fec:	ec000024 	stc	0, cr0, [r0], {36}	; 0x24
    6ff0:	01000024 	tsteq	r0, r4, lsr #32
    6ff4:	0008e59c 	muleq	r8, ip, r5
    6ff8:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    6ffc:	3a010064 	bcc	47194 <__ccfg+0x271ec>
    7000:	0000b119 	andeq	fp, r0, r9, lsl r1
    7004:	00250b00 	eoreq	r0, r5, r0, lsl #22
    7008:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    700c:	24d40000 	ldrbcs	r0, [r4], #0
    7010:	0bc00000 	bleq	ff007018 <_estack+0xdf002018>
    7014:	3c010000 	stccc	0, cr0, [r1], {-0}
    7018:	0008c902 	andeq	ip, r8, r2, lsl #18
    701c:	0a122100 	beq	48f424 <__ccfg+0x46f47c>
    7020:	05210000 	streq	r0, [r1, #-0]!
    7024:	0000000a 	andeq	r0, r0, sl
    7028:	0009f628 	andeq	pc, r9, r8, lsr #12
    702c:	0024e000 	eoreq	lr, r4, r0
    7030:	0024e400 	eoreq	lr, r4, r0, lsl #8
    7034:	023e0100 	eorseq	r0, lr, #0, 2
    7038:	000a1221 	andeq	r1, sl, r1, lsr #4
    703c:	0a052100 	beq	14f444 <__ccfg+0x12f49c>
    7040:	00000000 	andeq	r0, r0, r0
    7044:	001dbc2c 	andseq	fp, sp, ip, lsr #24
    7048:	0d290100 	stfeqs	f0, [r9, #-0]
    704c:	0024a401 	eoreq	sl, r4, r1, lsl #8
    7050:	0024d400 	eoreq	sp, r4, r0, lsl #8
    7054:	799c0100 	ldmibvc	ip, {r8}
    7058:	19000009 	stmdbne	r0, {r0, r3}
    705c:	29010062 	stmdbcs	r1, {r1, r5, r6}
    7060:	0000b11c 	andeq	fp, r0, ip, lsl r1
    7064:	00251e00 	eoreq	r1, r5, r0, lsl #28
    7068:	00693000 	rsbeq	r3, r9, r0
    706c:	81062b01 	tsthi	r6, r1, lsl #22
    7070:	27000000 	strcs	r0, [r0, -r0]
    7074:	00000a3d 	andeq	r0, r0, sp, lsr sl
    7078:	000024ac 	andeq	r2, r0, ip, lsr #9
    707c:	00000b88 	andeq	r0, r0, r8, lsl #23
    7080:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    7084:	21000009 	tstcs	r0, r9
    7088:	00000a4c 	andeq	r0, r0, ip, asr #20
    708c:	0a3d3300 	beq	f53c94 <__ccfg+0xf33cec>
    7090:	24b80000 	ldrtcs	r0, [r8], #0
    7094:	24bc0000 	ldrtcs	r0, [ip], #0
    7098:	2f010000 	svccs	0x00010000
    709c:	00094804 	andeq	r4, r9, r4, lsl #16
    70a0:	0a4c2100 	beq	130f4a8 <__ccfg+0x12ef500>
    70a4:	33000000 	movwcc	r0, #0
    70a8:	00000a20 	andeq	r0, r0, r0, lsr #20
    70ac:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    70b0:	000024be 			; <UNDEFINED> instruction: 0x000024be
    70b4:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    70b8:	21000009 	tstcs	r0, r9
    70bc:	00000a2f 	andeq	r0, r0, pc, lsr #20
    70c0:	0a202500 	beq	8104c8 <__ccfg+0x7f0520>
    70c4:	24c40000 	strbcs	r0, [r4], #0
    70c8:	0ba80000 	bleq	fea070d0 <_estack+0xdea020d0>
    70cc:	33010000 	movwcc	r0, #4096	; 0x1000
    70d0:	0a2f2103 	beq	bcf4e4 <__ccfg+0xbaf53c>
    70d4:	00000000 	andeq	r0, r0, r0
    70d8:	001db334 	andseq	fp, sp, r4, lsr r3
    70dc:	0d190100 	ldfeqs	f0, [r9, #-0]
    70e0:	000000b1 	strheq	r0, [r0], -r1
    70e4:	00002470 	andeq	r2, r0, r0, ror r4
    70e8:	000024a4 	andeq	r2, r0, r4, lsr #9
    70ec:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    70f0:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    70f4:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    70f8:	00000081 	andeq	r0, r0, r1, lsl #1
    70fc:	01006235 	tsteq	r0, r5, lsr r2
    7100:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    7104:	253c0000 	ldrcs	r0, [ip, #-0]!
    7108:	3d270000 	stccc	0, cr0, [r7, #-0]
    710c:	7400000a 	strvc	r0, [r0], #-10
    7110:	28000024 	stmdacs	r0, {r2, r5}
    7114:	0100000b 	tsteq	r0, fp
    7118:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    711c:	4c210000 	stcmi	0, cr0, [r1], #-0
    7120:	0000000a 	andeq	r0, r0, sl
    7124:	000a2027 	andeq	r2, sl, r7, lsr #32
    7128:	00247a00 	eoreq	r7, r4, r0, lsl #20
    712c:	000b5000 	andeq	r5, fp, r0
    7130:	03230100 			; <UNDEFINED> instruction: 0x03230100
    7134:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7138:	000a2f21 	andeq	r2, sl, r1, lsr #30
    713c:	5a250000 	bpl	947144 <__ccfg+0x92719c>
    7140:	7c00000a 	stcvc	0, cr0, [r0], {10}
    7144:	68000024 	stmdavs	r0, {r2, r5}
    7148:	0100000b 	tsteq	r0, fp
    714c:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    7150:	0000000a 	andeq	r0, r0, sl
    7154:	0f453600 	svceq	0x00453600
    7158:	06020000 	streq	r0, [r2], -r0
    715c:	03010102 	movweq	r0, #4354	; 0x1102
    7160:	00000a20 	andeq	r0, r0, r0, lsr #20
    7164:	00111637 	andseq	r1, r1, r7, lsr r6
    7168:	02060200 	andeq	r0, r6, #0, 4
    716c:	00006723 	andeq	r6, r0, r3, lsr #14
    7170:	14253700 	strtne	r3, [r5], #-1792	; 0xfffff900
    7174:	06020000 	streq	r0, [r2], -r0
    7178:	00673702 	rsbeq	r3, r7, r2, lsl #14
    717c:	36000000 	strcc	r0, [r0], -r0
    7180:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    7184:	01015402 	tsteq	r1, r2, lsl #8
    7188:	0a3d0301 	beq	f47d94 <__ccfg+0xf27dec>
    718c:	16370000 	ldrtne	r0, [r7], -r0
    7190:	02000011 	andeq	r0, r0, #17
    7194:	67190154 			; <UNDEFINED> instruction: 0x67190154
    7198:	00000000 	andeq	r0, r0, r0
    719c:	0013c636 	andseq	ip, r3, r6, lsr r6
    71a0:	011e0200 	tsteq	lr, r0, lsl #4
    71a4:	5a030101 	bpl	c75b0 <__ccfg+0xa7608>
    71a8:	3700000a 	strcc	r0, [r0, -sl]
    71ac:	00001116 	andeq	r1, r0, r6, lsl r1
    71b0:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    71b4:	00000067 	andeq	r0, r0, r7, rrx
    71b8:	1bca3800 	blne	ff2951c0 <_estack+0xdf2901c0>
    71bc:	a4020000 	strge	r0, [r2], #-0
    71c0:	00670101 	rsbeq	r0, r7, r1, lsl #2
    71c4:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    71c8:	3900000a 	stmdbcc	r0, {r1, r3}
    71cc:	00001116 	andeq	r1, r0, r6, lsl r1
    71d0:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    71d4:	00000000 	andeq	r0, r0, r0
    71d8:	0007963a 	andeq	r9, r7, sl, lsr r6
    71dc:	00258000 	eoreq	r8, r5, r0
    71e0:	0025a400 	eoreq	sl, r5, r0, lsl #8
    71e4:	289c0100 	ldmcs	ip, {r8}
    71e8:	00000796 	muleq	r0, r6, r7
    71ec:	0000258a 	andeq	r2, r0, sl, lsl #11
    71f0:	0000259e 	muleq	r0, lr, r5
    71f4:	3b0d7801 	blcc	365200 <__ccfg+0x345258>
    71f8:	000007a8 	andeq	r0, r0, r8, lsr #15
    71fc:	00002594 	muleq	r0, r4, r5
    7200:	0000259a 	muleq	r0, sl, r5
    7204:	00037c01 	andeq	r7, r3, r1, lsl #24
    7208:	041e0000 	ldreq	r0, [lr], #-0
    720c:	00030000 	andeq	r0, r3, r0
    7210:	00001b94 	muleq	r0, r4, fp
    7214:	00a30104 	adceq	r0, r3, r4, lsl #2
    7218:	c50c0000 	strgt	r0, [ip, #-0]
    721c:	ff00001d 			; <UNDEFINED> instruction: 0xff00001d
    7220:	3000000d 	andcc	r0, r0, sp
    7224:	0000000d 	andeq	r0, r0, sp
    7228:	ef000000 	svc	0x00000000
    722c:	0200004f 	andeq	r0, r0, #79	; 0x4f
    7230:	0c600601 	stcleq	6, cr0, [r0], #-4
    7234:	02020000 	andeq	r0, r2, #0
    7238:	000a6e05 	andeq	r6, sl, r5, lsl #28
    723c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7240:	00000800 	andeq	r0, r0, r0, lsl #16
    7244:	fb050802 	blx	149256 <__ccfg+0x1292ae>
    7248:	03000007 	movweq	r0, #7
    724c:	00002a11 	andeq	r2, r0, r1, lsl sl
    7250:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7254:	02000000 	andeq	r0, r0, #0
    7258:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    725c:	07030000 	streq	r0, [r3, -r0]
    7260:	0200002e 	andeq	r0, r0, #46	; 0x2e
    7264:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7268:	02020000 	andeq	r0, r2, #0
    726c:	000d5b07 	andeq	r5, sp, r7, lsl #22
    7270:	29a90300 	stmibcs	r9!, {r8, r9}
    7274:	34020000 	strcc	r0, [r2], #-0
    7278:	00007319 	andeq	r7, r0, r9, lsl r3
    727c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7280:	00000428 	andeq	r0, r0, r8, lsr #8
    7284:	23070802 	movwcs	r0, #30722	; 0x7802
    7288:	04000004 	streq	r0, [r0], #-4
    728c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7290:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7294:	00042d07 	andeq	r2, r4, r7, lsl #26
    7298:	28f00300 	ldmcs	r0!, {r8, r9}^
    729c:	27030000 	strcs	r0, [r3, -r0]
    72a0:	00005412 	andeq	r5, r0, r2, lsl r4
    72a4:	008f0500 	addeq	r0, pc, r0, lsl #10
    72a8:	b7030000 	strlt	r0, [r3, -r0]
    72ac:	0300001d 	movweq	r0, #29
    72b0:	0041122b 	subeq	r1, r1, fp, lsr #4
    72b4:	a0060000 	andge	r0, r6, r0
    72b8:	03000000 	movweq	r0, #0
    72bc:	00002942 	andeq	r2, r0, r2, asr #18
    72c0:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    72c4:	05000000 	streq	r0, [r0, #-0]
    72c8:	000000b1 	strheq	r0, [r0], -r1
    72cc:	00064903 	andeq	r4, r6, r3, lsl #18
    72d0:	122d0300 	eorne	r0, sp, #0, 6
    72d4:	00000067 	andeq	r0, r0, r7, rrx
    72d8:	000bb703 	andeq	fp, fp, r3, lsl #14
    72dc:	102e0300 	eorne	r0, lr, r0, lsl #6
    72e0:	000000da 	ldrdeq	r0, [r0], -sl
    72e4:	008f0407 	addeq	r0, pc, r7, lsl #8
    72e8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    72ec:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    72f0:	09000001 	stmdbeq	r0, {r0}
    72f4:	0000002b 	andeq	r0, r0, fp, lsr #32
    72f8:	a0073403 	andge	r3, r7, r3, lsl #8
    72fc:	01000000 	mrseq	r0, (UNDEF: 0)
    7300:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    7304:	0000064f 	andeq	r0, r0, pc, asr #12
    7308:	a0033503 	andge	r3, r3, r3, lsl #10
    730c:	01000000 	mrseq	r0, (UNDEF: 0)
    7310:	09000601 	stmdbeq	r0, {r0, r9, sl}
    7314:	000002de 	ldrdeq	r0, [r0], -lr
    7318:	a0033603 	andge	r3, r3, r3, lsl #12
    731c:	01000000 	mrseq	r0, (UNDEF: 0)
    7320:	09000501 	stmdbeq	r0, {r0, r8, sl}
    7324:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    7328:	a0033703 	andge	r3, r3, r3, lsl #14
    732c:	01000000 	mrseq	r0, (UNDEF: 0)
    7330:	09000401 	stmdbeq	r0, {r0, sl}
    7334:	00000aa2 	andeq	r0, r0, r2, lsr #21
    7338:	a0033803 	andge	r3, r3, r3, lsl #16
    733c:	01000000 	mrseq	r0, (UNDEF: 0)
    7340:	0a000004 	beq	7358 <__exidx_end+0x187c>
    7344:	0000065e 	andeq	r0, r0, lr, asr r6
    7348:	a0073a03 	andge	r3, r7, r3, lsl #20
    734c:	01000000 	mrseq	r0, (UNDEF: 0)
    7350:	0008fe0a 	andeq	pc, r8, sl, lsl #28
    7354:	033c0300 	teqeq	ip, #0, 6
    7358:	000000a0 	andeq	r0, r0, r0, lsr #1
    735c:	0f2f0a02 	svceq	0x002f0a02
    7360:	3d030000 	stccc	0, cr0, [r3, #-0]
    7364:	0000a003 	andeq	sl, r0, r3
    7368:	160a0300 	strne	r0, [sl], -r0, lsl #6
    736c:	03000009 	movweq	r0, #9
    7370:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    7374:	00040000 	andeq	r0, r4, r0
    7378:	00031403 	andeq	r1, r3, r3, lsl #8
    737c:	03410300 	movteq	r0, #4864	; 0x1300
    7380:	000000e0 	andeq	r0, r0, r0, ror #1
    7384:	00016e06 	andeq	r6, r1, r6, lsl #28
    7388:	06c10b00 	strbeq	r0, [r1], r0, lsl #22
    738c:	43030000 	movwmi	r0, #12288	; 0x3000
    7390:	00017a1a 	andeq	r7, r1, sl, lsl sl
    7394:	0b010100 	bleq	4779c <__ccfg+0x277f4>
    7398:	00000197 	muleq	r0, r7, r1
    739c:	9b0e4503 	blls	3987b0 <__ccfg+0x378808>
    73a0:	01000001 	tsteq	r0, r1
    73a4:	a1040701 	tstge	r4, r1, lsl #14
    73a8:	02000001 	andeq	r0, r0, #1
    73ac:	0c670801 	stcleq	8, cr0, [r7], #-4
    73b0:	a1050000 	mrsge	r0, (UNDEF: 5)
    73b4:	0b000001 	bleq	73c0 <__exidx_end+0x18e4>
    73b8:	0000031d 	andeq	r0, r0, sp, lsl r3
    73bc:	9b1e4503 	blls	7987d0 <__ccfg+0x778828>
    73c0:	01000001 	tsteq	r0, r1
    73c4:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    73c8:	01ec098f 	mvneq	r0, pc, lsl #19
    73cc:	cd0a0000 	stcgt	0, cr0, [sl, #-0]
    73d0:	0400000c 	streq	r0, [r0], #-12
    73d4:	00670b90 	mlseq	r7, r0, fp, r0
    73d8:	0a000000 	beq	73e0 <__exidx_end+0x1904>
    73dc:	0000106a 	andeq	r1, r0, sl, rrx
    73e0:	8f089104 	svchi	0x00089104
    73e4:	04000000 	streq	r0, [r0], #-0
    73e8:	0001bc0a 	andeq	fp, r1, sl, lsl #24
    73ec:	10920400 	addsne	r0, r2, r0, lsl #8
    73f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    73f4:	c1030006 	tstgt	r3, r6
    73f8:	0400000c 	streq	r0, [r0], #-12
    73fc:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    7400:	ec0c0000 	stc	0, cr0, [ip], {-0}
    7404:	03000001 	movweq	r0, #1
    7408:	0d000002 	stceq	0, cr0, [r0, #-8]
    740c:	09400b00 	stmdbeq	r0, {r8, r9, fp}^
    7410:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    7414:	0001f80f 	andeq	pc, r1, pc, lsl #16
    7418:	08010100 	stmdaeq	r1, {r8}
    741c:	09910501 	ldmibeq	r1, {r0, r8, sl}
    7420:	0000023b 	andeq	r0, r0, fp, lsr r2
    7424:	00091d09 	andeq	r1, r9, r9, lsl #26
    7428:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    742c:	000000a0 	andeq	r0, r0, r0, lsr #1
    7430:	00010701 	andeq	r0, r1, r1, lsl #14
    7434:	0005cf09 	andeq	ip, r5, r9, lsl #30
    7438:	03940500 	orrseq	r0, r4, #0, 10
    743c:	000000a0 	andeq	r0, r0, r0, lsr #1
    7440:	00000101 	andeq	r0, r0, r1, lsl #2
    7444:	0aae0300 	beq	feb8804c <_estack+0xdeb8304c>
    7448:	96050000 	strls	r0, [r5], -r0
    744c:	00021103 	andeq	r1, r2, r3, lsl #2
    7450:	023b0500 	eorseq	r0, fp, #0, 10
    7454:	470c0000 	strmi	r0, [ip, -r0]
    7458:	57000002 	strpl	r0, [r0, -r2]
    745c:	0d000002 	stceq	0, cr0, [r0, #-8]
    7460:	024c0500 	subeq	r0, ip, #0, 10
    7464:	ac0b0000 	stcge	0, cr0, [fp], {-0}
    7468:	05000003 	streq	r0, [r0, #-3]
    746c:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    7470:	01010000 	mrseq	r0, (UNDEF: 1)
    7474:	00009b0c 	andeq	r9, r0, ip, lsl #22
    7478:	00027500 	andeq	r7, r2, r0, lsl #10
    747c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7480:	0000026a 	andeq	r0, r0, sl, ror #4
    7484:	0006110b 	andeq	r1, r6, fp, lsl #2
    7488:	13060600 	movwne	r0, #26112	; 0x6600
    748c:	00000275 	andeq	r0, r0, r5, ror r2
    7490:	e00b0101 	and	r0, fp, r1, lsl #2
    7494:	04000008 	streq	r0, [r0], #-8
    7498:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    749c:	01010000 	mrseq	r0, (UNDEF: 1)
    74a0:	000c750e 	andeq	r7, ip, lr, lsl #10
    74a4:	016e0700 	cmneq	lr, r0, lsl #14
    74a8:	0002a310 	andeq	sl, r2, r0, lsl r3
    74ac:	a9040700 	stmdbge	r4, {r8, r9, sl}
    74b0:	0f000002 	svceq	0x00000002
    74b4:	0002b501 	andeq	fp, r2, r1, lsl #10
    74b8:	008f1000 	addeq	r1, pc, r0
    74bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    74c0:	000001a8 	andeq	r0, r0, r8, lsr #3
    74c4:	000002c0 	andeq	r0, r0, r0, asr #5
    74c8:	b505000d 	strlt	r0, [r5, #-13]
    74cc:	11000002 	tstne	r0, r2
    74d0:	000009e9 	andeq	r0, r0, r9, ror #19
    74d4:	16017f07 	strne	r7, [r1], -r7, lsl #30
    74d8:	000002c0 	andeq	r0, r0, r0, asr #5
    74dc:	98110101 	ldmdals	r1, {r0, r8}
    74e0:	07000003 	streq	r0, [r0, -r3]
    74e4:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    74e8:	01000000 	mrseq	r0, (UNDEF: 0)
    74ec:	03701101 	cmneq	r0, #1073741824	; 0x40000000
    74f0:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    74f4:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    74f8:	01010000 	mrseq	r0, (UNDEF: 1)
    74fc:	03070812 	movweq	r0, #30738	; 0x7812
    7500:	03190903 	tsteq	r9, #49152	; 0xc000
    7504:	91130000 	tstls	r3, r0
    7508:	0700003c 	smladxeq	r0, ip, r0, r0
    750c:	8f070307 	svchi	0x00070307
    7510:	00000000 	andeq	r0, r0, r0
    7514:	000fc213 	andeq	ip, pc, r3, lsl r2	; <UNPREDICTABLE>
    7518:	03080700 	movweq	r0, #34560	; 0x8700
    751c:	0000c208 	andeq	ip, r0, r8, lsl #4
    7520:	0e000400 	cfcpyseq	mvf0, mvf0
    7524:	00000a0c 	andeq	r0, r0, ip, lsl #20
    7528:	03030907 	movweq	r0, #14599	; 0x3907
    752c:	000002f2 	strdeq	r0, [r0], -r2
    7530:	00002014 	andeq	r2, r0, r4, lsl r0
    7534:	0b073000 	bleq	1d353c <__ccfg+0x1b3594>
    7538:	03890803 	orreq	r0, r9, #196608	; 0x30000
    753c:	19130000 	ldmdbne	r3, {}	; <UNPREDICTABLE>
    7540:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    7544:	8f080314 	svchi	0x00080314
    7548:	00000000 	andeq	r0, r0, r0
    754c:	000bea13 	andeq	lr, fp, r3, lsl sl
    7550:	03150700 	tsteq	r5, #0, 14
    7554:	00008f08 	andeq	r8, r0, r8, lsl #30
    7558:	7e130200 	cdpvc	2, 1, cr0, cr3, cr0, {0}
    755c:	0700004c 	streq	r0, [r0, -ip, asr #32]
    7560:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    7564:	04000002 	streq	r0, [r0], #-2
    7568:	00474413 	subeq	r4, r7, r3, lsl r4
    756c:	03170700 	tsteq	r7, #0, 14
    7570:	0000c209 	andeq	ip, r0, r9, lsl #4
    7574:	0f130800 	svceq	0x00130800
    7578:	07000000 	streq	r0, [r0, -r0]
    757c:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7580:	0c000003 	stceq	0, cr0, [r0], {3}
    7584:	00096013 	andeq	r6, r9, r3, lsl r0
    7588:	03190700 	tsteq	r9, #0, 14
    758c:	00039915 	andeq	r9, r3, r5, lsl r9
    7590:	0c002c00 	stceq	12, cr2, [r0], {-0}
    7594:	00000319 	andeq	r0, r0, r9, lsl r3
    7598:	00000399 	muleq	r0, r9, r3
    759c:	00008815 	andeq	r8, r0, r5, lsl r8
    75a0:	07000300 	streq	r0, [r0, -r0, lsl #6]
    75a4:	00032604 	andeq	r2, r3, r4, lsl #12
    75a8:	0bdf0e00 	bleq	ff7cadb0 <_estack+0xdf7c5db0>
    75ac:	1c070000 	stcne	0, cr0, [r7], {-0}
    75b0:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    75b4:	bf110000 	svclt	0x00110000
    75b8:	0700000b 	streq	r0, [r0, -fp]
    75bc:	bb14031e 	bllt	50823c <__ccfg+0x4e8294>
    75c0:	01000003 	tsteq	r0, r3
    75c4:	9f040701 	svcls	0x00040701
    75c8:	16000003 	strne	r0, [r0], -r3
    75cc:	001e0601 	andseq	r0, lr, r1, lsl #12
    75d0:	050b0100 	streq	r0, [fp, #-256]	; 0xffffff00
    75d4:	00008101 	andeq	r8, r0, r1, lsl #2
    75d8:	0025cc00 	eoreq	ip, r5, r0, lsl #24
    75dc:	00263800 	eoreq	r3, r6, r0, lsl #16
    75e0:	1b9c0100 	blne	fe7079e8 <_estack+0xde7029e8>
    75e4:	17000004 	strne	r0, [r0, -r4]
    75e8:	01007473 	tsteq	r0, r3, ror r4
    75ec:	008f130b 	addeq	r1, pc, fp, lsl #6
    75f0:	255a0000 	ldrbcs	r0, [sl, #-0]
    75f4:	6d170000 	ldcvs	0, cr0, [r7, #-0]
    75f8:	230b0100 	movwcs	r0, #45312	; 0xb100
    75fc:	0000041b 	andeq	r0, r0, fp, lsl r4
    7600:	0000256d 	andeq	r2, r0, sp, ror #10
    7604:	00260018 	eoreq	r0, r6, r8, lsl r0
    7608:	060d0100 	streq	r0, [sp], -r0, lsl #2
    760c:	00000081 	andeq	r0, r0, r1, lsl #1
    7610:	0000258b 	andeq	r2, r0, fp, lsl #11
    7614:	66756219 			; <UNDEFINED> instruction: 0x66756219
    7618:	080e0100 	stmdaeq	lr, {r8}
    761c:	0000019b 	muleq	r0, fp, r1
    7620:	000025ca 	andeq	r2, r0, sl, asr #11
    7624:	a8040700 	stmdage	r4, {r8, r9, sl}
    7628:	00000001 	andeq	r0, r0, r1
    762c:	00000412 	andeq	r0, r0, r2, lsl r4
    7630:	1cf60003 	ldclne	0, cr0, [r6], #12
    7634:	01040000 	mrseq	r0, (UNDEF: 4)
    7638:	000000a3 	andeq	r0, r0, r3, lsr #1
    763c:	001e0e0c 	andseq	r0, lr, ip, lsl #28
    7640:	000dff00 	andeq	pc, sp, r0, lsl #30
    7644:	000d4000 	andeq	r4, sp, r0
    7648:	00000000 	andeq	r0, r0, r0
    764c:	0051a300 	subseq	sl, r1, r0, lsl #6
    7650:	06010200 	streq	r0, [r1], -r0, lsl #4
    7654:	00000c60 	andeq	r0, r0, r0, ror #24
    7658:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
    765c:	0200000a 	andeq	r0, r0, #10
    7660:	08000504 	stmdaeq	r0, {r2, r8, sl}
    7664:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7668:	0007fb05 	andeq	pc, r7, r5, lsl #22
    766c:	2a110300 	bcs	448274 <__ccfg+0x4282cc>
    7670:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7674:	00004d18 	andeq	r4, r0, r8, lsl sp
    7678:	08010200 	stmdaeq	r1, {r9}
    767c:	00000c5e 	andeq	r0, r0, lr, asr ip
    7680:	002e0703 	eoreq	r0, lr, r3, lsl #14
    7684:	19310200 	ldmdbne	r1!, {r9}
    7688:	00000060 	andeq	r0, r0, r0, rrx
    768c:	5b070202 	blpl	1c7e9c <__ccfg+0x1a7ef4>
    7690:	0300000d 	movweq	r0, #13
    7694:	000029a9 	andeq	r2, r0, r9, lsr #19
    7698:	73193402 	tstvc	r9, #33554432	; 0x2000000
    769c:	02000000 	andeq	r0, r0, #0
    76a0:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    76a4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    76a8:	00042307 	andeq	r2, r4, r7, lsl #6
    76ac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    76b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    76b4:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    76b8:	03000004 	movweq	r0, #4
    76bc:	000028f0 	strdeq	r2, [r0], -r0
    76c0:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    76c4:	05000000 	streq	r0, [r0, #-0]
    76c8:	0000008f 	andeq	r0, r0, pc, lsl #1
    76cc:	001db703 	andseq	fp, sp, r3, lsl #14
    76d0:	122b0300 	eorne	r0, fp, #0, 6
    76d4:	00000041 	andeq	r0, r0, r1, asr #32
    76d8:	0000a006 	andeq	sl, r0, r6
    76dc:	29420300 	stmdbcs	r2, {r8, r9}^
    76e0:	2c030000 	stccs	0, cr0, [r3], {-0}
    76e4:	00006712 	andeq	r6, r0, r2, lsl r7
    76e8:	00b10500 	adcseq	r0, r1, r0, lsl #10
    76ec:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    76f0:	03000006 	movweq	r0, #6
    76f4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    76f8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    76fc:	5c093203 	sfmpl	f3, 4, [r9], {3}
    7700:	08000001 	stmdaeq	r0, {r0}
    7704:	0000002b 	andeq	r0, r0, fp, lsr #32
    7708:	a0073403 	andge	r3, r7, r3, lsl #8
    770c:	01000000 	mrseq	r0, (UNDEF: 0)
    7710:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    7714:	0000064f 	andeq	r0, r0, pc, asr #12
    7718:	a0033503 	andge	r3, r3, r3, lsl #10
    771c:	01000000 	mrseq	r0, (UNDEF: 0)
    7720:	08000601 	stmdaeq	r0, {r0, r9, sl}
    7724:	000002de 	ldrdeq	r0, [r0], -lr
    7728:	a0033603 	andge	r3, r3, r3, lsl #12
    772c:	01000000 	mrseq	r0, (UNDEF: 0)
    7730:	08000501 	stmdaeq	r0, {r0, r8, sl}
    7734:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    7738:	a0033703 	andge	r3, r3, r3, lsl #14
    773c:	01000000 	mrseq	r0, (UNDEF: 0)
    7740:	08000401 	stmdaeq	r0, {r0, sl}
    7744:	00000aa2 	andeq	r0, r0, r2, lsr #21
    7748:	a0033803 	andge	r3, r3, r3, lsl #16
    774c:	01000000 	mrseq	r0, (UNDEF: 0)
    7750:	09000004 	stmdbeq	r0, {r2}
    7754:	0000065e 	andeq	r0, r0, lr, asr r6
    7758:	a0073a03 	andge	r3, r7, r3, lsl #20
    775c:	01000000 	mrseq	r0, (UNDEF: 0)
    7760:	0008fe09 	andeq	pc, r8, r9, lsl #28
    7764:	033c0300 	teqeq	ip, #0, 6
    7768:	000000a0 	andeq	r0, r0, r0, lsr #1
    776c:	0f2f0902 	svceq	0x002f0902
    7770:	3d030000 	stccc	0, cr0, [r3, #-0]
    7774:	0000a003 	andeq	sl, r0, r3
    7778:	16090300 	strne	r0, [r9], -r0, lsl #6
    777c:	03000009 	movweq	r0, #9
    7780:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    7784:	00040000 	andeq	r0, r4, r0
    7788:	00031403 	andeq	r1, r3, r3, lsl #8
    778c:	03410300 	movteq	r0, #4864	; 0x1300
    7790:	000000ce 	andeq	r0, r0, lr, asr #1
    7794:	00015c06 	andeq	r5, r1, r6, lsl #24
    7798:	06c10a00 	strbeq	r0, [r1], r0, lsl #20
    779c:	43030000 	movwmi	r0, #12288	; 0x3000
    77a0:	0001681a 	andeq	r6, r1, sl, lsl r8
    77a4:	0a010100 	beq	47bac <__ccfg+0x27c04>
    77a8:	00000197 	muleq	r0, r7, r1
    77ac:	890e4503 	stmdbhi	lr, {r0, r1, r8, sl, lr}
    77b0:	01000001 	tsteq	r0, r1
    77b4:	8f040b01 	svchi	0x00040b01
    77b8:	02000001 	andeq	r0, r0, #1
    77bc:	0c670801 	stcleq	8, cr0, [r7], #-4
    77c0:	8f050000 	svchi	0x00050000
    77c4:	0a000001 	beq	77d0 <__exidx_end+0x1cf4>
    77c8:	0000031d 	andeq	r0, r0, sp, lsl r3
    77cc:	891e4503 	ldmdbhi	lr, {r0, r1, r8, sl, lr}
    77d0:	01000001 	tsteq	r0, r1
    77d4:	04080701 	streq	r0, [r8], #-1793	; 0xfffff8ff
    77d8:	01da098f 	bicseq	r0, sl, pc, lsl #19
    77dc:	cd090000 	stcgt	0, cr0, [r9, #-0]
    77e0:	0400000c 	streq	r0, [r0], #-12
    77e4:	00670b90 	mlseq	r7, r0, fp, r0
    77e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    77ec:	0000106a 	andeq	r1, r0, sl, rrx
    77f0:	8f089104 	svchi	0x00089104
    77f4:	04000000 	streq	r0, [r0], #-0
    77f8:	0001bc09 	andeq	fp, r1, r9, lsl #24
    77fc:	10920400 	addsne	r0, r2, r0, lsl #8
    7800:	000000ac 	andeq	r0, r0, ip, lsr #1
    7804:	c1030006 	tstgt	r3, r6
    7808:	0400000c 	streq	r0, [r0], #-12
    780c:	01a90393 			; <UNDEFINED> instruction: 0x01a90393
    7810:	da0c0000 	ble	307818 <__ccfg+0x2e7870>
    7814:	f1000001 	cps	#1
    7818:	0d000001 	stceq	0, cr0, [r0, #-4]
    781c:	09400a00 	stmdbeq	r0, {r9, fp}^
    7820:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    7824:	0001e60f 	andeq	lr, r1, pc, lsl #12
    7828:	07010100 	streq	r0, [r1, -r0, lsl #2]
    782c:	09910501 	ldmibeq	r1, {r0, r8, sl}
    7830:	00000229 	andeq	r0, r0, r9, lsr #4
    7834:	00091d08 	andeq	r1, r9, r8, lsl #26
    7838:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    783c:	000000a0 	andeq	r0, r0, r0, lsr #1
    7840:	00010701 	andeq	r0, r1, r1, lsl #14
    7844:	0005cf08 	andeq	ip, r5, r8, lsl #30
    7848:	03940500 	orrseq	r0, r4, #0, 10
    784c:	000000a0 	andeq	r0, r0, r0, lsr #1
    7850:	00000101 	andeq	r0, r0, r1, lsl #2
    7854:	0aae0300 	beq	feb8845c <_estack+0xdeb8345c>
    7858:	96050000 	strls	r0, [r5], -r0
    785c:	0001ff03 	andeq	pc, r1, r3, lsl #30
    7860:	02290500 	eoreq	r0, r9, #0, 10
    7864:	350c0000 	strcc	r0, [ip, #-0]
    7868:	45000002 	strmi	r0, [r0, #-2]
    786c:	0d000002 	stceq	0, cr0, [r0, #-8]
    7870:	023a0500 	eorseq	r0, sl, #0, 10
    7874:	ac0a0000 	stcge	0, cr0, [sl], {-0}
    7878:	05000003 	streq	r0, [r0, #-3]
    787c:	0245179c 	subeq	r1, r5, #156, 14	; 0x2700000
    7880:	01010000 	mrseq	r0, (UNDEF: 1)
    7884:	00009b0c 	andeq	r9, r0, ip, lsl #22
    7888:	00026300 	andeq	r6, r2, r0, lsl #6
    788c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7890:	00000258 	andeq	r0, r0, r8, asr r2
    7894:	0006110a 	andeq	r1, r6, sl, lsl #2
    7898:	13060600 	movwne	r0, #26112	; 0x6600
    789c:	00000263 	andeq	r0, r0, r3, ror #4
    78a0:	e00a0101 	and	r0, sl, r1, lsl #2
    78a4:	04000008 	streq	r0, [r0], #-8
    78a8:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    78ac:	01010000 	mrseq	r0, (UNDEF: 1)
    78b0:	000c750e 	andeq	r7, ip, lr, lsl #10
    78b4:	016e0700 	cmneq	lr, r0, lsl #14
    78b8:	00029110 	andeq	r9, r2, r0, lsl r1
    78bc:	97040b00 	strls	r0, [r4, -r0, lsl #22]
    78c0:	0f000002 	svceq	0x00000002
    78c4:	0002a301 	andeq	sl, r2, r1, lsl #6
    78c8:	008f1000 	addeq	r1, pc, r0
    78cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    78d0:	00000196 	muleq	r0, r6, r1
    78d4:	000002ae 	andeq	r0, r0, lr, lsr #5
    78d8:	a305000d 	movwge	r0, #20493	; 0x500d
    78dc:	11000002 	tstne	r0, r2
    78e0:	000009e9 	andeq	r0, r0, r9, ror #19
    78e4:	16017f07 	strne	r7, [r1], -r7, lsl #30
    78e8:	000002ae 	andeq	r0, r0, lr, lsr #5
    78ec:	98110101 	ldmdals	r1, {r0, r8}
    78f0:	07000003 	streq	r0, [r0, -r3]
    78f4:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    78f8:	01000000 	mrseq	r0, (UNDEF: 0)
    78fc:	03701101 	cmneq	r0, #1073741824	; 0x40000000
    7900:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    7904:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    7908:	01010000 	mrseq	r0, (UNDEF: 1)
    790c:	03070812 	movweq	r0, #30738	; 0x7812
    7910:	03070903 	movweq	r0, #30979	; 0x7903
    7914:	91130000 	tstls	r3, r0
    7918:	0700003c 	smladxeq	r0, ip, r0, r0
    791c:	8f070307 	svchi	0x00070307
    7920:	00000000 	andeq	r0, r0, r0
    7924:	000fc213 	andeq	ip, pc, r3, lsl r2	; <UNPREDICTABLE>
    7928:	03080700 	movweq	r0, #34560	; 0x8700
    792c:	0000c208 	andeq	ip, r0, r8, lsl #4
    7930:	0e000400 	cfcpyseq	mvf0, mvf0
    7934:	00000a0c 	andeq	r0, r0, ip, lsl #20
    7938:	03030907 	movweq	r0, #14599	; 0x3907
    793c:	000002e0 	andeq	r0, r0, r0, ror #5
    7940:	00002014 	andeq	r2, r0, r4, lsl r0
    7944:	0b073000 	bleq	1d394c <__ccfg+0x1b39a4>
    7948:	03770803 	cmneq	r7, #196608	; 0x30000
    794c:	19130000 	ldmdbne	r3, {}	; <UNPREDICTABLE>
    7950:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    7954:	8f080314 	svchi	0x00080314
    7958:	00000000 	andeq	r0, r0, r0
    795c:	000bea13 	andeq	lr, fp, r3, lsl sl
    7960:	03150700 	tsteq	r5, #0, 14
    7964:	00008f08 	andeq	r8, r0, r8, lsl #30
    7968:	7e130200 	cdpvc	2, 1, cr0, cr3, cr0, {0}
    796c:	0700004c 	streq	r0, [r0, -ip, asr #32]
    7970:	840b0316 	strhi	r0, [fp], #-790	; 0xfffffcea
    7974:	04000002 	streq	r0, [r0], #-2
    7978:	00474413 	subeq	r4, r7, r3, lsl r4
    797c:	03170700 	tsteq	r7, #0, 14
    7980:	0000c209 	andeq	ip, r0, r9, lsl #4
    7984:	0f130800 	svceq	0x00130800
    7988:	07000000 	streq	r0, [r0, -r0]
    798c:	770f0318 	smladvc	pc, r8, r3, r0	; <UNPREDICTABLE>
    7990:	0c000003 	stceq	0, cr0, [r0], {3}
    7994:	00096013 	andeq	r6, r9, r3, lsl r0
    7998:	03190700 	tsteq	r9, #0, 14
    799c:	00038715 	andeq	r8, r3, r5, lsl r7
    79a0:	0c002c00 	stceq	12, cr2, [r0], {-0}
    79a4:	00000307 	andeq	r0, r0, r7, lsl #6
    79a8:	00000387 	andeq	r0, r0, r7, lsl #7
    79ac:	00008815 	andeq	r8, r0, r5, lsl r8
    79b0:	0b000300 	bleq	85b8 <__exidx_end+0x2adc>
    79b4:	00031404 	andeq	r1, r3, r4, lsl #8
    79b8:	0bdf0e00 	bleq	ff7cb1c0 <_estack+0xdf7c61c0>
    79bc:	1c070000 	stcne	0, cr0, [r7], {-0}
    79c0:	03141b03 	tsteq	r4, #3072	; 0xc00
    79c4:	bf110000 	svclt	0x00110000
    79c8:	0700000b 	streq	r0, [r0, -fp]
    79cc:	a914031e 	ldmdbge	r4, {r1, r2, r3, r4, r8, r9}
    79d0:	01000003 	tsteq	r0, r3
    79d4:	8d040b01 	vstrhi	d0, [r4, #-4]
    79d8:	0a000003 	beq	79ec <__exidx_end+0x1f10>
    79dc:	00001e4e 	andeq	r1, r0, lr, asr #28
    79e0:	890e0901 	stmdbhi	lr, {r0, r8, fp}
    79e4:	01000001 	tsteq	r0, r1
    79e8:	58011601 	stmdapl	r1, {r0, r9, sl, ip}
    79ec:	0100001e 	tsteq	r0, lr, lsl r0
    79f0:	8101050d 	tsthi	r1, sp, lsl #10
    79f4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    79f8:	b0000026 	andlt	r0, r0, r6, lsr #32
    79fc:	01000026 	tsteq	r0, r6, lsr #32
    7a00:	7473179c 	ldrbtvc	r1, [r3], #-1948	; 0xfffff864
    7a04:	120d0100 	andne	r0, sp, #0, 2
    7a08:	0000008f 	andeq	r0, r0, pc, lsl #1
    7a0c:	00002614 	andeq	r2, r0, r4, lsl r6
    7a10:	66756217 			; <UNDEFINED> instruction: 0x66756217
    7a14:	1c0d0100 	stfnes	f0, [sp], {-0}
    7a18:	00000189 	andeq	r0, r0, r9, lsl #3
    7a1c:	00002632 	andeq	r2, r0, r2, lsr r6
    7a20:	6e656c17 	mcrvs	12, 3, r6, cr5, cr7, {0}
    7a24:	250d0100 	strcs	r0, [sp, #-256]	; 0xffffff00
    7a28:	00000081 	andeq	r0, r0, r1, lsl #1
    7a2c:	00002687 	andeq	r2, r0, r7, lsl #13
    7a30:	00260018 	eoreq	r0, r6, r8, lsl r0
    7a34:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    7a38:	00000081 	andeq	r0, r0, r1, lsl #1
    7a3c:	000026dc 	ldrdeq	r2, [r0], -ip
    7a40:	044c0000 	strbeq	r0, [ip], #-0
    7a44:	00030000 	andeq	r0, r3, r0
    7a48:	00001e45 	andeq	r1, r0, r5, asr #28
    7a4c:	00a30104 	adceq	r0, r3, r4, lsl #2
    7a50:	680c0000 	stmdavs	ip, {}	; <UNPREDICTABLE>
    7a54:	ff00001e 			; <UNDEFINED> instruction: 0xff00001e
    7a58:	5000000d 	andpl	r0, r0, sp
    7a5c:	0000000d 	andeq	r0, r0, sp
    7a60:	6b000000 	blvs	7a68 <__exidx_end+0x1f8c>
    7a64:	02000053 	andeq	r0, r0, #83	; 0x53
    7a68:	0c600601 	stcleq	6, cr0, [r0], #-4
    7a6c:	02020000 	andeq	r0, r2, #0
    7a70:	000a6e05 	andeq	r6, sl, r5, lsl #28
    7a74:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7a78:	00000800 	andeq	r0, r0, r0, lsl #16
    7a7c:	fb050802 	blx	149a8e <__ccfg+0x129ae6>
    7a80:	03000007 	movweq	r0, #7
    7a84:	00002a11 	andeq	r2, r0, r1, lsl sl
    7a88:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7a8c:	02000000 	andeq	r0, r0, #0
    7a90:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    7a94:	07030000 	streq	r0, [r3, -r0]
    7a98:	0200002e 	andeq	r0, r0, #46	; 0x2e
    7a9c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7aa0:	02020000 	andeq	r0, r2, #0
    7aa4:	000d5b07 	andeq	r5, sp, r7, lsl #22
    7aa8:	29a90300 	stmibcs	r9!, {r8, r9}
    7aac:	34020000 	strcc	r0, [r2], #-0
    7ab0:	00007319 	andeq	r7, r0, r9, lsl r3
    7ab4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7ab8:	00000428 	andeq	r0, r0, r8, lsr #8
    7abc:	23070802 	movwcs	r0, #30722	; 0x7802
    7ac0:	04000004 	streq	r0, [r0], #-4
    7ac4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7ac8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7acc:	00042d07 	andeq	r2, r4, r7, lsl #26
    7ad0:	05190300 	ldreq	r0, [r9, #-768]	; 0xfffffd00
    7ad4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    7ad8:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7adc:	0b930500 	bleq	fe4c8ee4 <_estack+0xde4c3ee4>
    7ae0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7ae4:	0000b300 	andeq	fp, r0, r0, lsl #6
    7ae8:	08700600 	ldmdaeq	r0!, {r9, sl}^
    7aec:	00b30000 	adcseq	r0, r3, r0
    7af0:	01000000 	mrseq	r0, (UNDEF: 0)
    7af4:	03040700 	movweq	r0, #18176	; 0x4700
    7af8:	00000b95 	muleq	r0, r5, fp
    7afc:	8f186303 	svchi	0x00186303
    7b00:	03000000 	movweq	r0, #0
    7b04:	000028f0 	strdeq	r2, [r0], -r0
    7b08:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    7b0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7b10:	000000c1 	andeq	r0, r0, r1, asr #1
    7b14:	001db703 	andseq	fp, sp, r3, lsl #14
    7b18:	122b0400 	eorne	r0, fp, #0, 8
    7b1c:	00000041 	andeq	r0, r0, r1, asr #32
    7b20:	0000d209 	andeq	sp, r0, r9, lsl #4
    7b24:	29420300 	stmdbcs	r2, {r8, r9}^
    7b28:	2c040000 	stccs	0, cr0, [r4], {-0}
    7b2c:	00006712 	andeq	r6, r0, r2, lsl r7
    7b30:	00e30800 	rsceq	r0, r3, r0, lsl #16
    7b34:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    7b38:	04000006 	streq	r0, [r0], #-6
    7b3c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7b40:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    7b44:	8e093204 	cdphi	2, 0, cr3, cr9, cr4, {0}
    7b48:	0b000001 	bleq	7b54 <__exidx_end+0x2078>
    7b4c:	0000002b 	andeq	r0, r0, fp, lsr #32
    7b50:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    7b54:	01000000 	mrseq	r0, (UNDEF: 0)
    7b58:	0b000701 	bleq	9764 <__exidx_end+0x3c88>
    7b5c:	0000064f 	andeq	r0, r0, pc, asr #12
    7b60:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    7b64:	01000000 	mrseq	r0, (UNDEF: 0)
    7b68:	0b000601 	bleq	9374 <__exidx_end+0x3898>
    7b6c:	000002de 	ldrdeq	r0, [r0], -lr
    7b70:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    7b74:	01000000 	mrseq	r0, (UNDEF: 0)
    7b78:	0b000501 	bleq	8f84 <__exidx_end+0x34a8>
    7b7c:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    7b80:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    7b84:	01000000 	mrseq	r0, (UNDEF: 0)
    7b88:	0b000401 	bleq	8b94 <__exidx_end+0x30b8>
    7b8c:	00000aa2 	andeq	r0, r0, r2, lsr #21
    7b90:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    7b94:	01000000 	mrseq	r0, (UNDEF: 0)
    7b98:	0c000004 	stceq	0, cr0, [r0], {4}
    7b9c:	0000065e 	andeq	r0, r0, lr, asr r6
    7ba0:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    7ba4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ba8:	0008fe0c 	andeq	pc, r8, ip, lsl #28
    7bac:	033c0400 	teqeq	ip, #0, 8
    7bb0:	000000d2 	ldrdeq	r0, [r0], -r2
    7bb4:	0f2f0c02 	svceq	0x002f0c02
    7bb8:	3d040000 	stccc	0, cr0, [r4, #-0]
    7bbc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7bc0:	160c0300 	strne	r0, [ip], -r0, lsl #6
    7bc4:	04000009 	streq	r0, [r0], #-9
    7bc8:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    7bcc:	00040000 	andeq	r0, r4, r0
    7bd0:	00031403 	andeq	r1, r3, r3, lsl #8
    7bd4:	03410400 	movteq	r0, #5120	; 0x1400
    7bd8:	00000100 	andeq	r0, r0, r0, lsl #2
    7bdc:	00018e09 	andeq	r8, r1, r9, lsl #28
    7be0:	06c10d00 	strbeq	r0, [r1], r0, lsl #26
    7be4:	43040000 	movwmi	r0, #16384	; 0x4000
    7be8:	00019a1a 	andeq	r9, r1, sl, lsl sl
    7bec:	0d010100 	stfeqs	f0, [r1, #-0]
    7bf0:	00000197 	muleq	r0, r7, r1
    7bf4:	bb0e4504 	bllt	39900c <__ccfg+0x379064>
    7bf8:	01000001 	tsteq	r0, r1
    7bfc:	c1040e01 	tstgt	r4, r1, lsl #28
    7c00:	02000001 	andeq	r0, r0, #1
    7c04:	0c670801 	stcleq	8, cr0, [r7], #-4
    7c08:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7c0c:	0d000001 	stceq	0, cr0, [r0, #-4]
    7c10:	0000031d 	andeq	r0, r0, sp, lsl r3
    7c14:	bb1e4504 	bllt	79902c <__ccfg+0x779084>
    7c18:	01000001 	tsteq	r0, r1
    7c1c:	05080a01 	streq	r0, [r8, #-2561]	; 0xfffff5ff
    7c20:	020c098f 	andeq	r0, ip, #2342912	; 0x23c000
    7c24:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    7c28:	0500000c 	streq	r0, [r0, #-12]
    7c2c:	00670b90 	mlseq	r7, r0, fp, r0
    7c30:	0c000000 	stceq	0, cr0, [r0], {-0}
    7c34:	0000106a 	andeq	r1, r0, sl, rrx
    7c38:	c1089105 	tstgt	r8, r5, lsl #2
    7c3c:	04000000 	streq	r0, [r0], #-0
    7c40:	0001bc0c 	andeq	fp, r1, ip, lsl #24
    7c44:	10920500 	addsne	r0, r2, r0, lsl #10
    7c48:	000000de 	ldrdeq	r0, [r0], -lr
    7c4c:	c1030006 	tstgt	r3, r6
    7c50:	0500000c 	streq	r0, [r0, #-12]
    7c54:	01db0393 			; <UNDEFINED> instruction: 0x01db0393
    7c58:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    7c5c:	23000002 	movwcs	r0, #2
    7c60:	10000002 	andne	r0, r0, r2
    7c64:	09400d00 	stmdbeq	r0, {r8, sl, fp}^
    7c68:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7c6c:	0002180f 	andeq	r1, r2, pc, lsl #16
    7c70:	0a010100 	beq	48078 <__ccfg+0x280d0>
    7c74:	09910601 	ldmibeq	r1, {r0, r9, sl}
    7c78:	0000025b 	andeq	r0, r0, fp, asr r2
    7c7c:	00091d0b 	andeq	r1, r9, fp, lsl #26
    7c80:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7c84:	000000d2 	ldrdeq	r0, [r0], -r2
    7c88:	00010701 	andeq	r0, r1, r1, lsl #14
    7c8c:	0005cf0b 	andeq	ip, r5, fp, lsl #30
    7c90:	03940600 	orrseq	r0, r4, #0, 12
    7c94:	000000d2 	ldrdeq	r0, [r0], -r2
    7c98:	00000101 	andeq	r0, r0, r1, lsl #2
    7c9c:	0aae0300 	beq	feb888a4 <_estack+0xdeb838a4>
    7ca0:	96060000 	strls	r0, [r6], -r0
    7ca4:	00023103 	andeq	r3, r2, r3, lsl #2
    7ca8:	025b0800 	subseq	r0, fp, #0, 16
    7cac:	670f0000 	strvs	r0, [pc, -r0]
    7cb0:	77000002 	strvc	r0, [r0, -r2]
    7cb4:	10000002 	andne	r0, r0, r2
    7cb8:	026c0800 	rsbeq	r0, ip, #0, 16
    7cbc:	ac0d0000 	stcge	0, cr0, [sp], {-0}
    7cc0:	06000003 	streq	r0, [r0], -r3
    7cc4:	0277179c 	rsbseq	r1, r7, #156, 14	; 0x2700000
    7cc8:	01010000 	mrseq	r0, (UNDEF: 1)
    7ccc:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    7cd0:	00029500 	andeq	r9, r2, r0, lsl #10
    7cd4:	08001000 	stmdaeq	r0, {ip}
    7cd8:	0000028a 	andeq	r0, r0, sl, lsl #5
    7cdc:	0006110d 	andeq	r1, r6, sp, lsl #2
    7ce0:	13060700 	movwne	r0, #26368	; 0x6700
    7ce4:	00000295 	muleq	r0, r5, r2
    7ce8:	e00d0101 	and	r0, sp, r1, lsl #2
    7cec:	05000008 	streq	r0, [r0, #-8]
    7cf0:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    7cf4:	01010000 	mrseq	r0, (UNDEF: 1)
    7cf8:	000c7511 	andeq	r7, ip, r1, lsl r5
    7cfc:	016e0800 	cmneq	lr, r0, lsl #16
    7d00:	0002c310 	andeq	ip, r2, r0, lsl r3
    7d04:	c9040e00 	stmdbgt	r4, {r9, sl, fp}
    7d08:	12000002 	andne	r0, r0, #2
    7d0c:	0002d501 	andeq	sp, r2, r1, lsl #10
    7d10:	00c11300 	sbceq	r1, r1, r0, lsl #6
    7d14:	0f000000 	svceq	0x00000000
    7d18:	000001c8 	andeq	r0, r0, r8, asr #3
    7d1c:	000002e0 	andeq	r0, r0, r0, ror #5
    7d20:	d5080010 	strle	r0, [r8, #-16]
    7d24:	14000002 	strne	r0, [r0], #-2
    7d28:	000009e9 	andeq	r0, r0, r9, ror #19
    7d2c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7d30:	000002e0 	andeq	r0, r0, r0, ror #5
    7d34:	98140101 	ldmdals	r4, {r0, r8}
    7d38:	08000003 	stmdaeq	r0, {r0, r1}
    7d3c:	ef140182 	svc	0x00140182
    7d40:	01000000 	mrseq	r0, (UNDEF: 0)
    7d44:	03701401 	cmneq	r0, #16777216	; 0x1000000
    7d48:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7d4c:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    7d50:	01010000 	mrseq	r0, (UNDEF: 1)
    7d54:	03080815 	movweq	r0, #34837	; 0x8815
    7d58:	03390903 	teqeq	r9, #49152	; 0xc000
    7d5c:	91160000 	tstls	r6, r0
    7d60:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    7d64:	c1070307 	tstgt	r7, r7, lsl #6
    7d68:	00000000 	andeq	r0, r0, r0
    7d6c:	000fc216 	andeq	ip, pc, r6, lsl r2	; <UNPREDICTABLE>
    7d70:	03080800 	movweq	r0, #34816	; 0x8800
    7d74:	0000f408 	andeq	pc, r0, r8, lsl #8
    7d78:	11000400 	tstne	r0, r0, lsl #8
    7d7c:	00000a0c 	andeq	r0, r0, ip, lsl #20
    7d80:	03030908 	movweq	r0, #14600	; 0x3908
    7d84:	00000312 	andeq	r0, r0, r2, lsl r3
    7d88:	00002017 	andeq	r2, r0, r7, lsl r0
    7d8c:	0b083000 	bleq	213d94 <__ccfg+0x1f3dec>
    7d90:	03a90803 			; <UNDEFINED> instruction: 0x03a90803
    7d94:	19160000 	ldmdbne	r6, {}	; <UNPREDICTABLE>
    7d98:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    7d9c:	c1080314 	tstgt	r8, r4, lsl r3
    7da0:	00000000 	andeq	r0, r0, r0
    7da4:	000bea16 	andeq	lr, fp, r6, lsl sl
    7da8:	03150800 	tsteq	r5, #0, 16
    7dac:	0000c108 	andeq	ip, r0, r8, lsl #2
    7db0:	7e160200 	cdpvc	2, 1, cr0, cr6, cr0, {0}
    7db4:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    7db8:	b60b0316 			; <UNDEFINED> instruction: 0xb60b0316
    7dbc:	04000002 	streq	r0, [r0], #-2
    7dc0:	00474416 	subeq	r4, r7, r6, lsl r4
    7dc4:	03170800 	tsteq	r7, #0, 16
    7dc8:	0000f409 	andeq	pc, r0, r9, lsl #8
    7dcc:	0f160800 	svceq	0x00160800
    7dd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7dd4:	a90f0318 	stmdbge	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7dd8:	0c000003 	stceq	0, cr0, [r0], {3}
    7ddc:	00096016 	andeq	r6, r9, r6, lsl r0
    7de0:	03190800 	tsteq	r9, #0, 16
    7de4:	0003b915 	andeq	fp, r3, r5, lsl r9
    7de8:	0f002c00 	svceq	0x00002c00
    7dec:	00000339 	andeq	r0, r0, r9, lsr r3
    7df0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    7df4:	00008818 	andeq	r8, r0, r8, lsl r8
    7df8:	0e000300 	cdpeq	3, 0, cr0, cr0, cr0, {0}
    7dfc:	00034604 	andeq	r4, r3, r4, lsl #12
    7e00:	0bdf1100 	bleq	ff7cc208 <_estack+0xdf7c7208>
    7e04:	1c080000 	stcne	0, cr0, [r8], {-0}
    7e08:	03461b03 	movteq	r1, #27395	; 0x6b03
    7e0c:	bf140000 	svclt	0x00140000
    7e10:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7e14:	db14031e 	blle	508a94 <__ccfg+0x4e8aec>
    7e18:	01000003 	tsteq	r0, r3
    7e1c:	bf040e01 	svclt	0x00040e01
    7e20:	19000003 	stmdbne	r0, {r0, r1}
    7e24:	001e5f01 	andseq	r5, lr, r1, lsl #30
    7e28:	050c0100 	streq	r0, [ip, #-256]	; 0xffffff00
    7e2c:	00008101 	andeq	r8, r0, r1, lsl #2
    7e30:	0026b000 	eoreq	fp, r6, r0
    7e34:	00270400 	eoreq	r0, r7, r0, lsl #8
    7e38:	499c0100 	ldmibmi	ip, {r8}
    7e3c:	1a000004 	bne	7e54 <__exidx_end+0x2378>
    7e40:	01007473 	tsteq	r0, r3, ror r4
    7e44:	00c1140c 	sbceq	r1, r1, ip, lsl #8
    7e48:	27260000 	strcs	r0, [r6, -r0]!
    7e4c:	6d1b0000 	ldcvs	0, cr0, [fp, #-0]
    7e50:	240c0100 	strcs	r0, [ip], #-256	; 0xffffff00
    7e54:	00000449 	andeq	r0, r0, r9, asr #8
    7e58:	1c749102 	ldfnep	f1, [r4], #-8
    7e5c:	0026001d 	eoreq	r0, r6, sp, lsl r0
    7e60:	060e0100 	streq	r0, [lr], -r0, lsl #2
    7e64:	00000081 	andeq	r0, r0, r1, lsl #1
    7e68:	00002739 	andeq	r2, r0, r9, lsr r7
    7e6c:	6675621e 			; <UNDEFINED> instruction: 0x6675621e
    7e70:	080f0100 	stmdaeq	pc, {r8}	; <UNPREDICTABLE>
    7e74:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7e78:	00002778 	andeq	r2, r0, r8, ror r7
    7e7c:	0070611f 	rsbseq	r6, r0, pc, lsl r1
    7e80:	b50a1001 	strlt	r1, [sl, #-1]
    7e84:	02000000 	andeq	r0, r0, #0
    7e88:	0e005c91 	mcreq	12, 0, r5, cr0, cr1, {4}
    7e8c:	0001c804 	andeq	ip, r1, r4, lsl #16
    7e90:	044c0000 	strbeq	r0, [ip], #-0
    7e94:	00030000 	andeq	r0, r3, r0
    7e98:	00001ff1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    7e9c:	00a30104 	adceq	r0, r3, r4, lsl #2
    7ea0:	aa0c0000 	bge	307ea8 <__ccfg+0x2e7f00>
    7ea4:	ff00001e 			; <UNDEFINED> instruction: 0xff00001e
    7ea8:	6000000d 	andvs	r0, r0, sp
    7eac:	0000000d 	andeq	r0, r0, sp
    7eb0:	10000000 	andne	r0, r0, r0
    7eb4:	02000055 	andeq	r0, r0, #85	; 0x55
    7eb8:	0c600601 	stcleq	6, cr0, [r0], #-4
    7ebc:	02020000 	andeq	r0, r2, #0
    7ec0:	000a6e05 	andeq	r6, sl, r5, lsl #28
    7ec4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7ec8:	00000800 	andeq	r0, r0, r0, lsl #16
    7ecc:	fb050802 	blx	149ede <__ccfg+0x129f36>
    7ed0:	03000007 	movweq	r0, #7
    7ed4:	00002a11 	andeq	r2, r0, r1, lsl sl
    7ed8:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7edc:	02000000 	andeq	r0, r0, #0
    7ee0:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    7ee4:	07030000 	streq	r0, [r3, -r0]
    7ee8:	0200002e 	andeq	r0, r0, #46	; 0x2e
    7eec:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7ef0:	02020000 	andeq	r0, r2, #0
    7ef4:	000d5b07 	andeq	r5, sp, r7, lsl #22
    7ef8:	29a90300 	stmibcs	r9!, {r8, r9}
    7efc:	34020000 	strcc	r0, [r2], #-0
    7f00:	00007319 	andeq	r7, r0, r9, lsl r3
    7f04:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7f08:	00000428 	andeq	r0, r0, r8, lsr #8
    7f0c:	23070802 	movwcs	r0, #30722	; 0x7802
    7f10:	04000004 	streq	r0, [r0], #-4
    7f14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7f18:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7f1c:	00042d07 	andeq	r2, r4, r7, lsl #26
    7f20:	05190300 	ldreq	r0, [r9, #-768]	; 0xfffffd00
    7f24:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    7f28:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7f2c:	0b930500 	bleq	fe4c9334 <_estack+0xde4c4334>
    7f30:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7f34:	0000b300 	andeq	fp, r0, r0, lsl #6
    7f38:	08700600 	ldmdaeq	r0!, {r9, sl}^
    7f3c:	00b30000 	adcseq	r0, r3, r0
    7f40:	01000000 	mrseq	r0, (UNDEF: 0)
    7f44:	03040700 	movweq	r0, #18176	; 0x4700
    7f48:	00000b95 	muleq	r0, r5, fp
    7f4c:	8f186303 	svchi	0x00186303
    7f50:	03000000 	movweq	r0, #0
    7f54:	000028f0 	strdeq	r2, [r0], -r0
    7f58:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    7f5c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7f60:	000000c1 	andeq	r0, r0, r1, asr #1
    7f64:	001db703 	andseq	fp, sp, r3, lsl #14
    7f68:	122b0400 	eorne	r0, fp, #0, 8
    7f6c:	00000041 	andeq	r0, r0, r1, asr #32
    7f70:	0000d209 	andeq	sp, r0, r9, lsl #4
    7f74:	29420300 	stmdbcs	r2, {r8, r9}^
    7f78:	2c040000 	stccs	0, cr0, [r4], {-0}
    7f7c:	00006712 	andeq	r6, r0, r2, lsl r7
    7f80:	00e30800 	rsceq	r0, r3, r0, lsl #16
    7f84:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    7f88:	04000006 	streq	r0, [r0], #-6
    7f8c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7f90:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    7f94:	8e093204 	cdphi	2, 0, cr3, cr9, cr4, {0}
    7f98:	0b000001 	bleq	7fa4 <__exidx_end+0x24c8>
    7f9c:	0000002b 	andeq	r0, r0, fp, lsr #32
    7fa0:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    7fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fa8:	0b000701 	bleq	9bb4 <__exidx_end+0x40d8>
    7fac:	0000064f 	andeq	r0, r0, pc, asr #12
    7fb0:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    7fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fb8:	0b000601 	bleq	97c4 <__exidx_end+0x3ce8>
    7fbc:	000002de 	ldrdeq	r0, [r0], -lr
    7fc0:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    7fc4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fc8:	0b000501 	bleq	93d4 <__exidx_end+0x38f8>
    7fcc:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    7fd0:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    7fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fd8:	0b000401 	bleq	8fe4 <__exidx_end+0x3508>
    7fdc:	00000aa2 	andeq	r0, r0, r2, lsr #21
    7fe0:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    7fe4:	01000000 	mrseq	r0, (UNDEF: 0)
    7fe8:	0c000004 	stceq	0, cr0, [r0], {4}
    7fec:	0000065e 	andeq	r0, r0, lr, asr r6
    7ff0:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    7ff4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ff8:	0008fe0c 	andeq	pc, r8, ip, lsl #28
    7ffc:	033c0400 	teqeq	ip, #0, 8
    8000:	000000d2 	ldrdeq	r0, [r0], -r2
    8004:	0f2f0c02 	svceq	0x002f0c02
    8008:	3d040000 	stccc	0, cr0, [r4, #-0]
    800c:	0000d203 	andeq	sp, r0, r3, lsl #4
    8010:	160c0300 	strne	r0, [ip], -r0, lsl #6
    8014:	04000009 	streq	r0, [r0], #-9
    8018:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    801c:	00040000 	andeq	r0, r4, r0
    8020:	00031403 	andeq	r1, r3, r3, lsl #8
    8024:	03410400 	movteq	r0, #5120	; 0x1400
    8028:	00000100 	andeq	r0, r0, r0, lsl #2
    802c:	00018e09 	andeq	r8, r1, r9, lsl #28
    8030:	06c10d00 	strbeq	r0, [r1], r0, lsl #26
    8034:	43040000 	movwmi	r0, #16384	; 0x4000
    8038:	00019a1a 	andeq	r9, r1, sl, lsl sl
    803c:	0d010100 	stfeqs	f0, [r1, #-0]
    8040:	00000197 	muleq	r0, r7, r1
    8044:	bb0e4504 	bllt	39945c <__ccfg+0x3794b4>
    8048:	01000001 	tsteq	r0, r1
    804c:	c1040e01 	tstgt	r4, r1, lsl #28
    8050:	02000001 	andeq	r0, r0, #1
    8054:	0c670801 	stcleq	8, cr0, [r7], #-4
    8058:	c1080000 	mrsgt	r0, (UNDEF: 8)
    805c:	0d000001 	stceq	0, cr0, [r0, #-4]
    8060:	0000031d 	andeq	r0, r0, sp, lsl r3
    8064:	bb1e4504 	bllt	79947c <__ccfg+0x7794d4>
    8068:	01000001 	tsteq	r0, r1
    806c:	05080a01 	streq	r0, [r8, #-2561]	; 0xfffff5ff
    8070:	020c098f 	andeq	r0, ip, #2342912	; 0x23c000
    8074:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    8078:	0500000c 	streq	r0, [r0, #-12]
    807c:	00670b90 	mlseq	r7, r0, fp, r0
    8080:	0c000000 	stceq	0, cr0, [r0], {-0}
    8084:	0000106a 	andeq	r1, r0, sl, rrx
    8088:	c1089105 	tstgt	r8, r5, lsl #2
    808c:	04000000 	streq	r0, [r0], #-0
    8090:	0001bc0c 	andeq	fp, r1, ip, lsl #24
    8094:	10920500 	addsne	r0, r2, r0, lsl #10
    8098:	000000de 	ldrdeq	r0, [r0], -lr
    809c:	c1030006 	tstgt	r3, r6
    80a0:	0500000c 	streq	r0, [r0, #-12]
    80a4:	01db0393 			; <UNDEFINED> instruction: 0x01db0393
    80a8:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    80ac:	23000002 	movwcs	r0, #2
    80b0:	10000002 	andne	r0, r0, r2
    80b4:	09400d00 	stmdbeq	r0, {r8, sl, fp}^
    80b8:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    80bc:	0002180f 	andeq	r1, r2, pc, lsl #16
    80c0:	0a010100 	beq	484c8 <__ccfg+0x28520>
    80c4:	09910601 	ldmibeq	r1, {r0, r9, sl}
    80c8:	0000025b 	andeq	r0, r0, fp, asr r2
    80cc:	00091d0b 	andeq	r1, r9, fp, lsl #26
    80d0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    80d4:	000000d2 	ldrdeq	r0, [r0], -r2
    80d8:	00010701 	andeq	r0, r1, r1, lsl #14
    80dc:	0005cf0b 	andeq	ip, r5, fp, lsl #30
    80e0:	03940600 	orrseq	r0, r4, #0, 12
    80e4:	000000d2 	ldrdeq	r0, [r0], -r2
    80e8:	00000101 	andeq	r0, r0, r1, lsl #2
    80ec:	0aae0300 	beq	feb88cf4 <_estack+0xdeb83cf4>
    80f0:	96060000 	strls	r0, [r6], -r0
    80f4:	00023103 	andeq	r3, r2, r3, lsl #2
    80f8:	025b0800 	subseq	r0, fp, #0, 16
    80fc:	670f0000 	strvs	r0, [pc, -r0]
    8100:	77000002 	strvc	r0, [r0, -r2]
    8104:	10000002 	andne	r0, r0, r2
    8108:	026c0800 	rsbeq	r0, ip, #0, 16
    810c:	ac0d0000 	stcge	0, cr0, [sp], {-0}
    8110:	06000003 	streq	r0, [r0], -r3
    8114:	0277179c 	rsbseq	r1, r7, #156, 14	; 0x2700000
    8118:	01010000 	mrseq	r0, (UNDEF: 1)
    811c:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    8120:	00029500 	andeq	r9, r2, r0, lsl #10
    8124:	08001000 	stmdaeq	r0, {ip}
    8128:	0000028a 	andeq	r0, r0, sl, lsl #5
    812c:	0006110d 	andeq	r1, r6, sp, lsl #2
    8130:	13060700 	movwne	r0, #26368	; 0x6700
    8134:	00000295 	muleq	r0, r5, r2
    8138:	e00d0101 	and	r0, sp, r1, lsl #2
    813c:	05000008 	streq	r0, [r0, #-8]
    8140:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    8144:	01010000 	mrseq	r0, (UNDEF: 1)
    8148:	000c7511 	andeq	r7, ip, r1, lsl r5
    814c:	016e0800 	cmneq	lr, r0, lsl #16
    8150:	0002c310 	andeq	ip, r2, r0, lsl r3
    8154:	c9040e00 	stmdbgt	r4, {r9, sl, fp}
    8158:	12000002 	andne	r0, r0, #2
    815c:	0002d501 	andeq	sp, r2, r1, lsl #10
    8160:	00c11300 	sbceq	r1, r1, r0, lsl #6
    8164:	0f000000 	svceq	0x00000000
    8168:	000001c8 	andeq	r0, r0, r8, asr #3
    816c:	000002e0 	andeq	r0, r0, r0, ror #5
    8170:	d5080010 	strle	r0, [r8, #-16]
    8174:	14000002 	strne	r0, [r0], #-2
    8178:	000009e9 	andeq	r0, r0, r9, ror #19
    817c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    8180:	000002e0 	andeq	r0, r0, r0, ror #5
    8184:	98140101 	ldmdals	r4, {r0, r8}
    8188:	08000003 	stmdaeq	r0, {r0, r1}
    818c:	ef140182 	svc	0x00140182
    8190:	01000000 	mrseq	r0, (UNDEF: 0)
    8194:	03701401 	cmneq	r0, #16777216	; 0x1000000
    8198:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    819c:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    81a0:	01010000 	mrseq	r0, (UNDEF: 1)
    81a4:	03080815 	movweq	r0, #34837	; 0x8815
    81a8:	03390903 	teqeq	r9, #49152	; 0xc000
    81ac:	91160000 	tstls	r6, r0
    81b0:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    81b4:	c1070307 	tstgt	r7, r7, lsl #6
    81b8:	00000000 	andeq	r0, r0, r0
    81bc:	000fc216 	andeq	ip, pc, r6, lsl r2	; <UNPREDICTABLE>
    81c0:	03080800 	movweq	r0, #34816	; 0x8800
    81c4:	0000f408 	andeq	pc, r0, r8, lsl #8
    81c8:	11000400 	tstne	r0, r0, lsl #8
    81cc:	00000a0c 	andeq	r0, r0, ip, lsl #20
    81d0:	03030908 	movweq	r0, #14600	; 0x3908
    81d4:	00000312 	andeq	r0, r0, r2, lsl r3
    81d8:	00002017 	andeq	r2, r0, r7, lsl r0
    81dc:	0b083000 	bleq	2141e4 <__ccfg+0x1f423c>
    81e0:	03a90803 			; <UNDEFINED> instruction: 0x03a90803
    81e4:	19160000 	ldmdbne	r6, {}	; <UNPREDICTABLE>
    81e8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    81ec:	c1080314 	tstgt	r8, r4, lsl r3
    81f0:	00000000 	andeq	r0, r0, r0
    81f4:	000bea16 	andeq	lr, fp, r6, lsl sl
    81f8:	03150800 	tsteq	r5, #0, 16
    81fc:	0000c108 	andeq	ip, r0, r8, lsl #2
    8200:	7e160200 	cdpvc	2, 1, cr0, cr6, cr0, {0}
    8204:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    8208:	b60b0316 			; <UNDEFINED> instruction: 0xb60b0316
    820c:	04000002 	streq	r0, [r0], #-2
    8210:	00474416 	subeq	r4, r7, r6, lsl r4
    8214:	03170800 	tsteq	r7, #0, 16
    8218:	0000f409 	andeq	pc, r0, r9, lsl #8
    821c:	0f160800 	svceq	0x00160800
    8220:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8224:	a90f0318 	stmdbge	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    8228:	0c000003 	stceq	0, cr0, [r0], {3}
    822c:	00096016 	andeq	r6, r9, r6, lsl r0
    8230:	03190800 	tsteq	r9, #0, 16
    8234:	0003b915 	andeq	fp, r3, r5, lsl r9
    8238:	0f002c00 	svceq	0x00002c00
    823c:	00000339 	andeq	r0, r0, r9, lsr r3
    8240:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    8244:	00008818 	andeq	r8, r0, r8, lsl r8
    8248:	0e000300 	cdpeq	3, 0, cr0, cr0, cr0, {0}
    824c:	00034604 	andeq	r4, r3, r4, lsl #12
    8250:	0bdf1100 	bleq	ff7cc658 <_estack+0xdf7c7658>
    8254:	1c080000 	stcne	0, cr0, [r8], {-0}
    8258:	03461b03 	movteq	r1, #27395	; 0x6b03
    825c:	bf140000 	svclt	0x00140000
    8260:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8264:	db14031e 	blle	508ee4 <__ccfg+0x4e8f3c>
    8268:	01000003 	tsteq	r0, r3
    826c:	bf040e01 	svclt	0x00040e01
    8270:	0d000003 	stceq	0, cr0, [r0, #-12]
    8274:	00001e4e 	andeq	r1, r0, lr, asr #28
    8278:	bb0e0a01 	bllt	38aa84 <__ccfg+0x36aadc>
    827c:	01000001 	tsteq	r0, r1
    8280:	eb011901 	bl	4e68c <__ccfg+0x2e6e4>
    8284:	0100001e 	tsteq	r0, lr, lsl r0
    8288:	8101050e 	tsthi	r1, lr, lsl #10
    828c:	04000000 	streq	r0, [r0], #-0
    8290:	64000027 	strvs	r0, [r0], #-39	; 0xffffffd9
    8294:	01000027 	tsteq	r0, r7, lsr #32
    8298:	0004499c 	muleq	r4, ip, r9
    829c:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    82a0:	130e0100 	movwne	r0, #57600	; 0xe100
    82a4:	000000c1 	andeq	r0, r0, r1, asr #1
    82a8:	000027ac 	andeq	r2, r0, ip, lsr #15
    82ac:	746d661b 	strbtvc	r6, [sp], #-1563	; 0xfffff9e5
    82b0:	230e0100 	movwcs	r0, #57600	; 0xe100
    82b4:	00000449 	andeq	r0, r0, r9, asr #8
    82b8:	1c749102 	ldfnep	f1, [r4], #-8
    82bc:	0026001d 	eoreq	r0, r6, sp, lsl r0
    82c0:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    82c4:	00000081 	andeq	r0, r0, r1, lsl #1
    82c8:	000027ca 	andeq	r2, r0, sl, asr #15
    82cc:	0070611e 	rsbseq	r6, r0, lr, lsl r1
    82d0:	b50a1401 	strlt	r1, [sl, #-1025]	; 0xfffffbff
    82d4:	02000000 	andeq	r0, r0, #0
    82d8:	0e006491 	mcreq	4, 0, r6, cr0, cr1, {4}
    82dc:	0001c804 	andeq	ip, r1, r4, lsl #16
    82e0:	24740000 	ldrbtcs	r0, [r4], #-0
    82e4:	00030000 	andeq	r0, r3, r0
    82e8:	0000218c 	andeq	r2, r0, ip, lsl #3
    82ec:	00a30104 	adceq	r0, r3, r4, lsl #2
    82f0:	d00c0000 	andle	r0, ip, r0
    82f4:	ff000022 			; <UNDEFINED> instruction: 0xff000022
    82f8:	e800000d 	stmda	r0, {r0, r2, r3}
    82fc:	0000000e 	andeq	r0, r0, lr
    8300:	c6000000 	strgt	r0, [r0], -r0
    8304:	02000056 	andeq	r0, r0, #86	; 0x56
    8308:	00002ba0 	andeq	r2, r0, r0, lsr #23
    830c:	31172206 	tstcc	r7, r6, lsl #4
    8310:	03000000 	movweq	r0, #0
    8314:	0c600601 	stcleq	6, cr0, [r0], #-4
    8318:	e2020000 	and	r0, r2, #0
    831c:	06000031 			; <UNDEFINED> instruction: 0x06000031
    8320:	00441825 	subeq	r1, r4, r5, lsr #16
    8324:	02030000 	andeq	r0, r3, #0
    8328:	000a6e05 	andeq	r6, sl, r5, lsl #28
    832c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    8330:	00000800 	andeq	r0, r0, r0, lsl #16
    8334:	fb050803 	blx	14a34a <__ccfg+0x12a3a2>
    8338:	02000007 	andeq	r0, r0, #7
    833c:	00002a11 	andeq	r2, r0, r1, lsl sl
    8340:	65182e06 	ldrvs	r2, [r8, #-3590]	; 0xfffff1fa
    8344:	03000000 	movweq	r0, #0
    8348:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    834c:	07020000 	streq	r0, [r2, -r0]
    8350:	0600002e 	streq	r0, [r0], -lr, lsr #32
    8354:	00781931 	rsbseq	r1, r8, r1, lsr r9
    8358:	02030000 	andeq	r0, r3, #0
    835c:	000d5b07 	andeq	r5, sp, r7, lsl #22
    8360:	29a90200 	stmibcs	r9!, {r9}
    8364:	34060000 	strcc	r0, [r6], #-0
    8368:	00009019 	andeq	r9, r0, r9, lsl r0
    836c:	007f0400 	rsbseq	r0, pc, r0, lsl #8
    8370:	04030000 	streq	r0, [r3], #-0
    8374:	00042807 	andeq	r2, r4, r7, lsl #16
    8378:	00900500 	addseq	r0, r0, r0, lsl #10
    837c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8380:	00042307 	andeq	r2, r4, r7, lsl #6
    8384:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    8388:	00746e69 	rsbseq	r6, r4, r9, ror #28
    838c:	2d070403 	cfstrscs	mvf0, [r7, #-12]
    8390:	07000004 	streq	r0, [r0, -r4]
    8394:	00000bd8 	ldrdeq	r0, [r0], -r8
    8398:	17015e07 	strne	r5, [r1, -r7, lsl #28]
    839c:	000000aa 	andeq	r0, r0, sl, lsr #1
    83a0:	000e3e02 	andeq	r3, lr, r2, lsl #28
    83a4:	0e2e0800 	cdpeq	8, 2, cr0, cr14, cr0, {0}
    83a8:	0000004b 	andeq	r0, r0, fp, asr #32
    83ac:	0002f602 	andeq	pc, r2, r2, lsl #12
    83b0:	0e740800 	cdpeq	8, 7, cr0, cr4, cr0, {0}
    83b4:	0000004b 	andeq	r0, r0, fp, asr #32
    83b8:	a5080408 	strge	r0, [r8, #-1032]	; 0xfffffbf8
    83bc:	0000f803 	andeq	pc, r0, r3, lsl #16
    83c0:	076f0900 	strbeq	r0, [pc, -r0, lsl #18]!
    83c4:	a7080000 	strge	r0, [r8, -r0]
    83c8:	0000b10c 	andeq	fp, r0, ip, lsl #2
    83cc:	0ab70900 	beq	fedca7d4 <_estack+0xdedc57d4>
    83d0:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    83d4:	0000f813 	andeq	pc, r0, r3, lsl r8	; <UNPREDICTABLE>
    83d8:	650a0000 	strvs	r0, [sl, #-0]
    83dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    83e0:	0b000001 	bleq	83ec <__exidx_end+0x2910>
    83e4:	000000aa 	andeq	r0, r0, sl, lsr #1
    83e8:	080c0003 	stmdaeq	ip, {r0, r1}
    83ec:	2c09a208 	sfmcs	f2, 1, [r9], {8}
    83f0:	0d000001 	stceq	0, cr0, [r0, #-4]
    83f4:	00000390 	muleq	r0, r0, r3
    83f8:	a307a408 	movwge	sl, #29704	; 0x7408
    83fc:	00000000 	andeq	r0, r0, r0
    8400:	0006040d 	andeq	r0, r6, sp, lsl #8
    8404:	05a90800 	streq	r0, [r9, #2048]!	; 0x800
    8408:	000000d6 	ldrdeq	r0, [r0], -r6
    840c:	b8020004 	stmdalt	r2, {r2}
    8410:	08000008 	stmdaeq	r0, {r3}
    8414:	010803aa 	smlatbeq	r8, sl, r3, r0
    8418:	040e0000 	streq	r0, [lr], #-0
    841c:	00084502 	andeq	r4, r8, r2, lsl #10
    8420:	19160900 	ldmdbne	r6, {r8, fp}
    8424:	00000090 	muleq	r0, r0, r0
    8428:	00024a02 	andeq	r4, r2, r2, lsl #20
    842c:	0d0c0a00 	vstreq	s0, [ip, #-0]
    8430:	000000a3 	andeq	r0, r0, r3, lsr #1
    8434:	00072d02 	andeq	r2, r7, r2, lsl #26
    8438:	1b230900 	blne	8ca840 <__ccfg+0x8aa898>
    843c:	00000146 	andeq	r0, r0, r6, asr #2
    8440:	0003290f 	andeq	r2, r3, pc, lsl #18
    8444:	34091800 	strcc	r1, [r9], #-2048	; 0xfffff800
    8448:	0001b808 	andeq	fp, r1, r8, lsl #16
    844c:	0eb90d00 	cdpeq	13, 11, cr0, cr9, cr0, {0}
    8450:	36090000 	strcc	r0, [r9], -r0
    8454:	0001b813 	andeq	fp, r1, r3, lsl r8
    8458:	5f100000 	svcpl	0x00100000
    845c:	3709006b 	strcc	r0, [r9, -fp, rrx]
    8460:	0000a307 	andeq	sl, r0, r7, lsl #6
    8464:	650d0400 	strvs	r0, [sp, #-1024]	; 0xfffffc00
    8468:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    846c:	00a30b37 	adceq	r0, r3, r7, lsr fp
    8470:	0d080000 	stceq	0, cr0, [r8, #-0]
    8474:	000043e5 	andeq	r4, r0, r5, ror #7
    8478:	a3143709 	tstge	r4, #2359296	; 0x240000
    847c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8480:	0004570d 	andeq	r5, r4, sp, lsl #14
    8484:	1b370900 	blne	dca88c <__ccfg+0xdaa8e4>
    8488:	000000a3 	andeq	r0, r0, r3, lsr #1
    848c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    8490:	0b380900 	bleq	e0a898 <__ccfg+0xdea8f0>
    8494:	000001be 			; <UNDEFINED> instruction: 0x000001be
    8498:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    849c:	0000015e 	andeq	r0, r0, lr, asr r1
    84a0:	00013a0a 	andeq	r3, r1, sl, lsl #20
    84a4:	0001ce00 	andeq	ip, r1, r0, lsl #28
    84a8:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    84ac:	00000000 	andeq	r0, r0, r0
    84b0:	000b800f 	andeq	r8, fp, pc
    84b4:	3c092400 	cfstrscc	mvf2, [r9], {-0}
    84b8:	00025108 	andeq	r5, r2, r8, lsl #2
    84bc:	056f0d00 	strbeq	r0, [pc, #-3328]!	; 77c4 <__exidx_end+0x1ce8>
    84c0:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    84c4:	0000a309 	andeq	sl, r0, r9, lsl #6
    84c8:	b90d0000 	stmdblt	sp, {}	; <UNPREDICTABLE>
    84cc:	09000003 	stmdbeq	r0, {r0, r1}
    84d0:	00a3093f 	adceq	r0, r3, pc, lsr r9
    84d4:	0d040000 	stceq	0, cr0, [r4, #-0]
    84d8:	0000035a 	andeq	r0, r0, sl, asr r3
    84dc:	a3094009 	movwge	r4, #36873	; 0x9009
    84e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84e4:	0006770d 	andeq	r7, r6, sp, lsl #14
    84e8:	09410900 	stmdbeq	r1, {r8, fp}^
    84ec:	000000a3 	andeq	r0, r0, r3, lsr #1
    84f0:	09570d0c 	ldmdbeq	r7, {r2, r3, r8, sl, fp}^
    84f4:	42090000 	andmi	r0, r9, #0
    84f8:	0000a309 	andeq	sl, r0, r9, lsl #6
    84fc:	d10d1000 	mrsle	r1, (UNDEF: 13)
    8500:	0900000a 	stmdbeq	r0, {r1, r3}
    8504:	00a30943 	adceq	r0, r3, r3, asr #18
    8508:	0d140000 	ldceq	0, cr0, [r4, #-0]
    850c:	0000033d 	andeq	r0, r0, sp, lsr r3
    8510:	a3094409 	movwge	r4, #37897	; 0x9409
    8514:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8518:	0005780d 	andeq	r7, r5, sp, lsl #16
    851c:	09450900 	stmdbeq	r5, {r8, fp}^
    8520:	000000a3 	andeq	r0, r0, r3, lsr #1
    8524:	08f30d1c 	ldmeq	r3!, {r2, r3, r4, r8, sl, fp}^
    8528:	46090000 	strmi	r0, [r9], -r0
    852c:	0000a309 	andeq	sl, r0, r9, lsl #6
    8530:	12002000 	andne	r2, r0, #0
    8534:	00000032 	andeq	r0, r0, r2, lsr r0
    8538:	4f090108 	svcmi	0x00090108
    853c:	00029608 	andeq	r9, r2, r8, lsl #12
    8540:	0d220d00 	stceq	13, cr0, [r2, #-0]
    8544:	50090000 	andpl	r0, r9, r0
    8548:	0002960a 	andeq	r9, r2, sl, lsl #12
    854c:	1a0d0000 	bne	348554 <__ccfg+0x3285ac>
    8550:	0900000c 	stmdbeq	r0, {r2, r3}
    8554:	02960951 	addseq	r0, r6, #1327104	; 0x144000
    8558:	13800000 	orrne	r0, r0, #0
    855c:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
    8560:	3a0a5309 	bcc	29d18c <__ccfg+0x27d1e4>
    8564:	00000001 	andeq	r0, r0, r1
    8568:	0eac1301 	cdpeq	3, 10, cr1, cr12, cr1, {0}
    856c:	56090000 	strpl	r0, [r9], -r0
    8570:	00013a0a 	andeq	r3, r1, sl, lsl #20
    8574:	00010400 	andeq	r0, r1, r0, lsl #8
    8578:	0001380a 	andeq	r3, r1, sl, lsl #16
    857c:	0002a600 	andeq	sl, r2, r0, lsl #12
    8580:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8584:	001f0000 	andseq	r0, pc, r0
    8588:	000a1912 	andeq	r1, sl, r2, lsl r9
    858c:	09019000 	stmdbeq	r1, {ip, pc}
    8590:	02e90862 	rsceq	r0, r9, #6422528	; 0x620000
    8594:	b90d0000 	stmdblt	sp, {}	; <UNPREDICTABLE>
    8598:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    859c:	02e91263 	rsceq	r1, r9, #805306374	; 0x30000006
    85a0:	0d000000 	stceq	0, cr0, [r0, #-0]
    85a4:	00000587 	andeq	r0, r0, r7, lsl #11
    85a8:	a3066409 	movwge	r6, #25609	; 0x6409
    85ac:	04000000 	streq	r0, [r0], #-0
    85b0:	0002fe0d 	andeq	pc, r2, sp, lsl #28
    85b4:	09660900 	stmdbeq	r6!, {r8, fp}^
    85b8:	000002ef 	andeq	r0, r0, pc, ror #5
    85bc:	00320d08 	eorseq	r0, r2, r8, lsl #26
    85c0:	67090000 	strvs	r0, [r9, -r0]
    85c4:	0002511e 	andeq	r5, r2, lr, lsl r1
    85c8:	11008800 	tstne	r0, r0, lsl #16
    85cc:	0002a604 	andeq	sl, r2, r4, lsl #12
    85d0:	02ff0a00 	rscseq	r0, pc, #0, 20
    85d4:	02ff0000 	rscseq	r0, pc, #0
    85d8:	aa0b0000 	bge	2c85e0 <__ccfg+0x2a8638>
    85dc:	1f000000 	svcne	0x00000000
    85e0:	05041100 	streq	r1, [r4, #-256]	; 0xffffff00
    85e4:	14000003 	strne	r0, [r0], #-3
    85e8:	0cba0f01 	ldceq	15, cr0, [sl], #4
    85ec:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    85f0:	032f087a 			; <UNDEFINED> instruction: 0x032f087a
    85f4:	cc0d0000 	stcgt	0, cr0, [sp], {-0}
    85f8:	0900000c 	stmdbeq	r0, {r2, r3}
    85fc:	032f117b 			; <UNDEFINED> instruction: 0x032f117b
    8600:	0d000000 	stceq	0, cr0, [r0, #-0]
    8604:	00001d95 	muleq	r0, r5, sp
    8608:	a3067c09 	movwge	r7, #27657	; 0x6c09
    860c:	04000000 	streq	r0, [r0], #-0
    8610:	65041100 	strvs	r1, [r4, #-256]	; 0xffffff00
    8614:	0f000000 	svceq	0x00000000
    8618:	0000044f 	andeq	r0, r0, pc, asr #8
    861c:	08ba0968 	ldmeq	sl!, {r3, r5, r6, r8, fp}
    8620:	00000478 	andeq	r0, r0, r8, ror r4
    8624:	00705f10 	rsbseq	r5, r0, r0, lsl pc
    8628:	2f12bb09 	svccs	0x0012bb09
    862c:	00000003 	andeq	r0, r0, r3
    8630:	00725f10 	rsbseq	r5, r2, r0, lsl pc
    8634:	a307bc09 	movwge	fp, #31753	; 0x7c09
    8638:	04000000 	streq	r0, [r0], #-0
    863c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    8640:	a307bd09 	movwge	fp, #32009	; 0x7d09
    8644:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8648:	0001bb0d 	andeq	fp, r1, sp, lsl #22
    864c:	09be0900 	ldmibeq	lr!, {r8, fp}
    8650:	00000044 	andeq	r0, r0, r4, asr #32
    8654:	085c0d0c 	ldmdaeq	ip, {r2, r3, r8, sl, fp}^
    8658:	bf090000 	svclt	0x00090000
    865c:	00004409 	andeq	r4, r0, r9, lsl #8
    8660:	5f100e00 	svcpl	0x00100e00
    8664:	09006662 	stmdbeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    8668:	030711c0 	movweq	r1, #29120	; 0x71c0
    866c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8670:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    8674:	a307c109 	movwge	ip, #28937	; 0x7109
    8678:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    867c:	0003030d 	andeq	r0, r3, sp, lsl #6
    8680:	0ac80900 	beq	ff20aa88 <_estack+0xdf205a88>
    8684:	00000138 	andeq	r0, r0, r8, lsr r1
    8688:	1d240d1c 	stcne	13, cr0, [r4, #-112]!	; 0xffffff90
    868c:	ca090000 	bgt	248694 <__ccfg+0x2286ec>
    8690:	0005fd1d 	andeq	pc, r5, sp, lsl sp	; <UNPREDICTABLE>
    8694:	eb0d2000 	bl	35069c <__ccfg+0x3306f4>
    8698:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    869c:	06281dcc 	strteq	r1, [r8], -ip, asr #27
    86a0:	0d240000 	stceq	0, cr0, [r4, #-0]
    86a4:	00000ed9 	ldrdeq	r0, [r0], -r9
    86a8:	4d0dcf09 	stcmi	15, cr12, [sp, #-36]	; 0xffffffdc
    86ac:	28000006 	stmdacs	r0, {r1, r2}
    86b0:	001cd90d 	andseq	sp, ip, sp, lsl #18
    86b4:	09d00900 	ldmibeq	r0, {r8, fp}^
    86b8:	00000668 	andeq	r0, r0, r8, ror #12
    86bc:	755f102c 	ldrbvc	r1, [pc, #-44]	; 8698 <__exidx_end+0x2bbc>
    86c0:	d3090062 	movwle	r0, #36962	; 0x9062
    86c4:	00030711 	andeq	r0, r3, r1, lsl r7
    86c8:	5f103000 	svcpl	0x00103000
    86cc:	09007075 	stmdbeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    86d0:	032f12d4 			; <UNDEFINED> instruction: 0x032f12d4
    86d4:	10380000 	eorsne	r0, r8, r0
    86d8:	0072755f 	rsbseq	r7, r2, pc, asr r5
    86dc:	a307d509 	movwge	sp, #29961	; 0x7509
    86e0:	3c000000 	stccc	0, cr0, [r0], {-0}
    86e4:	000f100d 	andeq	r1, pc, sp
    86e8:	11d80900 	bicsne	r0, r8, r0, lsl #18
    86ec:	0000066e 	andeq	r0, r0, lr, ror #12
    86f0:	0e590d40 	cdpeq	13, 5, cr0, cr9, cr0, {2}
    86f4:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    86f8:	00067e11 	andeq	r7, r6, r1, lsl lr
    86fc:	5f104300 	svcpl	0x00104300
    8700:	0900626c 	stmdbeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    8704:	030711dc 	movweq	r1, #29148	; 0x71dc
    8708:	0d440000 	stcleq	0, cr0, [r4, #-0]
    870c:	00000b77 	andeq	r0, r0, r7, ror fp
    8710:	a307df09 	movwge	sp, #32521	; 0x7f09
    8714:	4c000000 	stcmi	0, cr0, [r0], {-0}
    8718:	0004830d 	andeq	r8, r4, sp, lsl #6
    871c:	0ae00900 	beq	ff80ab24 <_estack+0xdf805b24>
    8720:	000000be 	strheq	r0, [r0], -lr
    8724:	47430d50 	smlsldmi	r0, r3, r0, sp
    8728:	e3090000 	movw	r0, #36864	; 0x9000
    872c:	00049712 	andeq	r9, r4, r2, lsl r7
    8730:	9d0d5400 	cfstrsls	mvf5, [sp, #-0]
    8734:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8738:	01520ce7 	cmpeq	r2, r7, ror #25
    873c:	0d580000 	ldcleq	0, cr0, [r8, #-0]
    8740:	00000a21 	andeq	r0, r0, r1, lsr #20
    8744:	2c0ee909 			; <UNDEFINED> instruction: 0x2c0ee909
    8748:	5c000001 	stcpl	0, cr0, [r0], {1}
    874c:	000e8c0d 	andeq	r8, lr, sp, lsl #24
    8750:	09ea0900 	stmibeq	sl!, {r8, fp}^
    8754:	000000a3 	andeq	r0, r0, r3, lsr #1
    8758:	01150064 	tsteq	r5, r4, rrx
    875c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8760:	00000497 	muleq	r0, r7, r4
    8764:	00049716 	andeq	r9, r4, r6, lsl r7
    8768:	01381600 	teqeq	r8, r0, lsl #12
    876c:	eb160000 	bl	588774 <__ccfg+0x5687cc>
    8770:	16000005 	strne	r0, [r0], -r5
    8774:	000000a3 	andeq	r0, r0, r3, lsr #1
    8778:	a2041100 	andge	r1, r4, #0, 2
    877c:	04000004 	streq	r0, [r0], #-4
    8780:	00000497 	muleq	r0, r7, r4
    8784:	000d5417 	andeq	r5, sp, r7, lsl r4
    8788:	09042800 	stmdbeq	r4, {fp, sp}
    878c:	eb080265 	bl	209128 <__ccfg+0x1e9180>
    8790:	18000005 	stmdane	r0, {r0, r2}
    8794:	00000907 	andeq	r0, r0, r7, lsl #18
    8798:	07026709 	streq	r6, [r2, -r9, lsl #14]
    879c:	000000a3 	andeq	r0, r0, r3, lsr #1
    87a0:	07e51800 	strbeq	r1, [r5, r0, lsl #16]!
    87a4:	6c090000 	stcvs	0, cr0, [r9], {-0}
    87a8:	06da0b02 	ldrbeq	r0, [sl], r2, lsl #22
    87ac:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    87b0:	000002ee 	andeq	r0, r0, lr, ror #5
    87b4:	14026c09 	strne	r6, [r2], #-3081	; 0xfffff3f7
    87b8:	000006da 	ldrdeq	r0, [r0], -sl
    87bc:	0eff1808 	cdpeq	8, 15, cr1, cr15, cr8, {0}
    87c0:	6c090000 	stcvs	0, cr0, [r9], {-0}
    87c4:	06da1e02 	ldrbeq	r1, [sl], r2, lsl #28
    87c8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    87cc:	00000582 	andeq	r0, r0, r2, lsl #11
    87d0:	08026e09 	stmdaeq	r2, {r0, r3, r9, sl, fp, sp, lr}
    87d4:	000000a3 	andeq	r0, r0, r3, lsr #1
    87d8:	04cf1810 	strbeq	r1, [pc], #2064	; 87e0 <__exidx_end+0x2d04>
    87dc:	6f090000 	svcvs	0x00090000
    87e0:	08da0802 	ldmeq	sl, {r1, fp}^
    87e4:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    87e8:	00000e6c 	andeq	r0, r0, ip, ror #28
    87ec:	07027209 	streq	r7, [r2, -r9, lsl #4]
    87f0:	000000a3 	andeq	r0, r0, r3, lsr #1
    87f4:	42911830 	addsmi	r1, r1, #48, 16	; 0x300000
    87f8:	73090000 	movwvc	r0, #36864	; 0x9000
    87fc:	08f01602 	ldmeq	r0!, {r1, r9, sl, ip}^
    8800:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    8804:	0000078d 	andeq	r0, r0, sp, lsl #15
    8808:	07027509 	streq	r7, [r2, -r9, lsl #10]
    880c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8810:	08871838 	stmeq	r7, {r3, r4, r5, fp, ip}
    8814:	77090000 	strvc	r0, [r9, -r0]
    8818:	09020a02 	stmdbeq	r2, {r1, r9, fp}
    881c:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    8820:	00000352 	andeq	r0, r0, r2, asr r3
    8824:	13027a09 	movwne	r7, #10761	; 0x2a09
    8828:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    882c:	040d1840 	streq	r1, [sp], #-2112	; 0xfffff7c0
    8830:	7b090000 	blvc	248838 <__ccfg+0x228890>
    8834:	00a30702 	adceq	r0, r3, r2, lsl #14
    8838:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    883c:	0000060c 	andeq	r0, r0, ip, lsl #12
    8840:	13027c09 	movwne	r7, #11273	; 0x2c09
    8844:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    8848:	08221848 	stmdaeq	r2!, {r3, r6, fp, ip}
    884c:	7d090000 	stcvc	0, cr0, [r9, #-0]
    8850:	09081402 	stmdbeq	r8, {r1, sl, ip}
    8854:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    8858:	00000b5d 	andeq	r0, r0, sp, asr fp
    885c:	07028009 	streq	r8, [r2, -r9]
    8860:	000000a3 	andeq	r0, r0, r3, lsr #1
    8864:	0c561850 	mrrceq	8, 5, r1, r6, cr0
    8868:	81090000 	mrshi	r0, (UNDEF: 9)
    886c:	05eb0902 	strbeq	r0, [fp, #2306]!	; 0x902
    8870:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    8874:	00000c70 	andeq	r0, r0, r0, ror ip
    8878:	0702a409 	streq	sl, [r2, -r9, lsl #8]
    887c:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    8880:	0a191958 	beq	64ede8 <__ccfg+0x62ee40>
    8884:	a8090000 	stmdage	r9, {}	; <UNPREDICTABLE>
    8888:	02e91302 	rsceq	r1, r9, #134217728	; 0x8000000
    888c:	01480000 	mrseq	r0, (UNDEF: 72)
    8890:	0006b119 	andeq	fp, r6, r9, lsl r1
    8894:	02a90900 	adceq	r0, r9, #0, 18
    8898:	0002a612 	andeq	sl, r2, r2, lsl r6
    889c:	19014c00 	stmdbne	r1, {sl, fp, lr}
    88a0:	00000698 	muleq	r0, r8, r6
    88a4:	0c02ad09 	stceq	13, cr10, [r2], {9}
    88a8:	0000091a 	andeq	r0, r0, sl, lsl r9
    88ac:	d81902dc 	ldmdale	r9, {r2, r3, r4, r6, r7, r9}
    88b0:	0900000c 	stmdbeq	r0, {r2, r3}
    88b4:	9b1002b2 	blls	409384 <__ccfg+0x3e93dc>
    88b8:	e0000006 	and	r0, r0, r6
    88bc:	0aa91902 	beq	fea4eccc <_estack+0xdea49ccc>
    88c0:	b4090000 	strlt	r0, [r9], #-0
    88c4:	09260a02 	stmdbeq	r6!, {r1, r9, fp}
    88c8:	02ec0000 	rsceq	r0, ip, #0
    88cc:	f1041100 			; <UNDEFINED> instruction: 0xf1041100
    88d0:	03000005 	movweq	r0, #5
    88d4:	0c670801 	stcleq	8, cr0, [r7], #-4
    88d8:	f1040000 	cps	#0
    88dc:	11000005 	tstne	r0, r5
    88e0:	00047804 	andeq	r7, r4, r4, lsl #16
    88e4:	a3011500 	movwge	r1, #5376	; 0x1500
    88e8:	22000000 	andcs	r0, r0, #0
    88ec:	16000006 	strne	r0, [r0], -r6
    88f0:	00000497 	muleq	r0, r7, r4
    88f4:	00013816 	andeq	r3, r1, r6, lsl r8
    88f8:	06221600 	strteq	r1, [r2], -r0, lsl #12
    88fc:	a3160000 	tstge	r6, #0
    8900:	00000000 	andeq	r0, r0, r0
    8904:	05f80411 	ldrbeq	r0, [r8, #1041]!	; 0x411
    8908:	04110000 	ldreq	r0, [r1], #-0
    890c:	00000603 	andeq	r0, r0, r3, lsl #12
    8910:	00ca0115 	sbceq	r0, sl, r5, lsl r1
    8914:	064d0000 	strbeq	r0, [sp], -r0
    8918:	97160000 	ldrls	r0, [r6, -r0]
    891c:	16000004 	strne	r0, [r0], -r4
    8920:	00000138 	andeq	r0, r0, r8, lsr r1
    8924:	0000ca16 	andeq	ip, r0, r6, lsl sl
    8928:	00a31600 	adceq	r1, r3, r0, lsl #12
    892c:	11000000 	mrsne	r0, (UNDEF: 0)
    8930:	00062e04 	andeq	r2, r6, r4, lsl #28
    8934:	a3011500 	movwge	r1, #5376	; 0x1500
    8938:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    893c:	16000006 	strne	r0, [r0], -r6
    8940:	00000497 	muleq	r0, r7, r4
    8944:	00013816 	andeq	r3, r1, r6, lsl r8
    8948:	04110000 	ldreq	r0, [r1], #-0
    894c:	00000653 	andeq	r0, r0, r3, asr r6
    8950:	0000650a 	andeq	r6, r0, sl, lsl #10
    8954:	00067e00 	andeq	r7, r6, r0, lsl #28
    8958:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    895c:	00020000 	andeq	r0, r2, r0
    8960:	0000650a 	andeq	r6, r0, sl, lsl #10
    8964:	00068e00 	andeq	r8, r6, r0, lsl #28
    8968:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    896c:	00000000 	andeq	r0, r0, r0
    8970:	00047007 	andeq	r7, r4, r7
    8974:	01240900 			; <UNDEFINED> instruction: 0x01240900
    8978:	0003351a 	andeq	r3, r3, sl, lsl r5
    897c:	0cd21a00 	vldmiaeq	r2, {s3-s2}
    8980:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    8984:	d4080128 	strle	r0, [r8], #-296	; 0xfffffed8
    8988:	18000006 	stmdane	r0, {r1, r2}
    898c:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    8990:	11012a09 	tstne	r1, r9, lsl #20
    8994:	000006d4 	ldrdeq	r0, [r0], -r4
    8998:	0bd11800 	bleq	ff44e9a0 <_estack+0xdf4499a0>
    899c:	2b090000 	blcs	2489a4 <__ccfg+0x2289fc>
    89a0:	00a30701 	adceq	r0, r3, r1, lsl #14
    89a4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    89a8:	00000775 	andeq	r0, r0, r5, ror r7
    89ac:	0b012c09 	bleq	539d8 <__ccfg+0x33a30>
    89b0:	000006da 	ldrdeq	r0, [r0], -sl
    89b4:	04110008 	ldreq	r0, [r1], #-8
    89b8:	0000069b 	muleq	r0, fp, r6
    89bc:	068e0411 	pkhbteq	r0, lr, r1, lsl #8
    89c0:	dc1a0000 	ldcle	0, cr0, [sl], {-0}
    89c4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    89c8:	08014409 	stmdaeq	r1, {r0, r3, sl, lr}
    89cc:	00000719 	andeq	r0, r0, r9, lsl r7
    89d0:	00164018 	andseq	r4, r6, r8, lsl r0
    89d4:	01450900 	cmpeq	r5, r0, lsl #18
    89d8:	00071912 	andeq	r1, r7, r2, lsl r9
    89dc:	34180000 	ldrcc	r0, [r8], #-0
    89e0:	09000008 	stmdbeq	r0, {r3}
    89e4:	19120146 	ldmdbne	r2, {r1, r2, r6, r8}
    89e8:	06000007 	streq	r0, [r0], -r7
    89ec:	0014f218 	andseq	pc, r4, r8, lsl r2	; <UNPREDICTABLE>
    89f0:	01470900 	cmpeq	r7, r0, lsl #18
    89f4:	00007812 	andeq	r7, r0, r2, lsl r8
    89f8:	0a000c00 	beq	ba00 <__exidx_end+0x5f24>
    89fc:	00000078 	andeq	r0, r0, r8, ror r0
    8a00:	00000729 	andeq	r0, r0, r9, lsr #14
    8a04:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8a08:	1b000200 	blne	9210 <__exidx_end+0x3734>
    8a0c:	028509d0 	addeq	r0, r5, #208, 18	; 0x340000
    8a10:	00083e07 	andeq	r3, r8, r7, lsl #28
    8a14:	0e5f1800 	cdpeq	8, 5, cr1, cr15, cr0, {0}
    8a18:	87090000 	strhi	r0, [r9, -r0]
    8a1c:	00aa1802 	adceq	r1, sl, r2, lsl #16
    8a20:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8a24:	00000ce0 	andeq	r0, r0, r0, ror #25
    8a28:	12028809 	andne	r8, r2, #589824	; 0x90000
    8a2c:	000005eb 	andeq	r0, r0, fp, ror #11
    8a30:	043a1804 	ldrteq	r1, [sl], #-2052	; 0xfffff7fc
    8a34:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    8a38:	083e1002 	ldmdaeq	lr!, {r1, ip}
    8a3c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8a40:	00000b46 	andeq	r0, r0, r6, asr #22
    8a44:	17028a09 	strne	r8, [r2, -r9, lsl #20]
    8a48:	000001ce 	andeq	r0, r0, lr, asr #3
    8a4c:	07ec1824 	strbeq	r1, [ip, r4, lsr #16]!
    8a50:	8b090000 	blhi	248a58 <__ccfg+0x228ab0>
    8a54:	00a30f02 	adceq	r0, r3, r2, lsl #30
    8a58:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    8a5c:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    8a60:	2c028c09 	stccs	12, cr8, [r2], {9}
    8a64:	0000009c 	muleq	r0, ip, r0
    8a68:	00761850 	rsbseq	r1, r6, r0, asr r8
    8a6c:	8d090000 	stchi	0, cr0, [r9, #-0]
    8a70:	06e01a02 	strbteq	r1, [r0], r2, lsl #20
    8a74:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    8a78:	0000063c 	andeq	r0, r0, ip, lsr r6
    8a7c:	16028e09 	strne	r8, [r2], -r9, lsl #28
    8a80:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a84:	0ced1868 	stcleq	8, cr1, [sp], #416	; 0x1a0
    8a88:	8f090000 	svchi	0x00090000
    8a8c:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a90:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    8a94:	00000068 	andeq	r0, r0, r8, rrx
    8a98:	16029009 	strne	r9, [r2], -r9
    8a9c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8aa0:	0b6d1878 	bleq	1b4ec88 <__ccfg+0x1b2ece0>
    8aa4:	91090000 	mrsls	r0, (UNDEF: 9)
    8aa8:	084e1002 	stmdaeq	lr, {r1, ip}^
    8aac:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
    8ab0:	00000417 	andeq	r0, r0, r7, lsl r4
    8ab4:	10029209 	andne	r9, r2, r9, lsl #4
    8ab8:	0000085e 	andeq	r0, r0, lr, asr r8
    8abc:	0c901888 	ldceq	8, cr1, [r0], {136}	; 0x88
    8ac0:	93090000 	movwls	r0, #36864	; 0x9000
    8ac4:	00a30f02 	adceq	r0, r3, r2, lsl #30
    8ac8:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    8acc:	000002a3 	andeq	r0, r0, r3, lsr #5
    8ad0:	16029409 	strne	r9, [r2], -r9, lsl #8
    8ad4:	0000012c 	andeq	r0, r0, ip, lsr #2
    8ad8:	06a218a4 	strteq	r1, [r2], r4, lsr #17
    8adc:	95090000 	strls	r0, [r9, #-0]
    8ae0:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8ae4:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    8ae8:	000005be 			; <UNDEFINED> instruction: 0x000005be
    8aec:	16029609 	strne	r9, [r2], -r9, lsl #12
    8af0:	0000012c 	andeq	r0, r0, ip, lsr #2
    8af4:	084d18b4 	stmdaeq	sp, {r2, r4, r5, r7, fp, ip}^
    8af8:	97090000 	strls	r0, [r9, -r0]
    8afc:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8b00:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    8b04:	0000062b 	andeq	r0, r0, fp, lsr #12
    8b08:	16029809 	strne	r9, [r2], -r9, lsl #16
    8b0c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8b10:	090518c4 	stmdbeq	r5, {r2, r6, r7, fp, ip}
    8b14:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    8b18:	00a30802 	adceq	r0, r3, r2, lsl #16
    8b1c:	00cc0000 	sbceq	r0, ip, r0
    8b20:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8b24:	00084e00 	andeq	r4, r8, r0, lsl #28
    8b28:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8b2c:	00190000 	andseq	r0, r9, r0
    8b30:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8b34:	00085e00 	andeq	r5, r8, r0, lsl #28
    8b38:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8b3c:	00070000 	andeq	r0, r7, r0
    8b40:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8b44:	00086e00 	andeq	r6, r8, r0, lsl #28
    8b48:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8b4c:	00170000 	andseq	r0, r7, r0
    8b50:	9e09f01b 	mcrls	0, 0, pc, cr9, cr11, {0}	; <UNPREDICTABLE>
    8b54:	08950702 	ldmeq	r5, {r1, r8, r9, sl}
    8b58:	c2180000 	andsgt	r0, r8, #0
    8b5c:	09000003 	stmdbeq	r0, {r0, r1}
    8b60:	951b02a1 	ldrls	r0, [fp, #-673]	; 0xfffffd5f
    8b64:	00000008 	andeq	r0, r0, r8
    8b68:	000f0718 	andeq	r0, pc, r8, lsl r7	; <UNPREDICTABLE>
    8b6c:	02a20900 	adceq	r0, r2, #0, 18
    8b70:	0008a518 	andeq	sl, r8, r8, lsl r5
    8b74:	0a007800 	beq	26b7c <__ccfg+0x6bd4>
    8b78:	0000032f 	andeq	r0, r0, pc, lsr #6
    8b7c:	000008a5 	andeq	r0, r0, r5, lsr #17
    8b80:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8b84:	0a001d00 	beq	ff8c <__exidx_end+0xa4b0>
    8b88:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b8c:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    8b90:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8b94:	1c001d00 	stcne	13, cr1, [r0], {-0}
    8b98:	028309f0 	addeq	r0, r3, #240, 18	; 0x3c0000
    8b9c:	0008da03 	andeq	sp, r8, r3, lsl #20
    8ba0:	0d541d00 	ldcleq	13, cr1, [r4, #-0]
    8ba4:	9a090000 	bls	248bac <__ccfg+0x228c04>
    8ba8:	07290b02 	streq	r0, [r9, -r2, lsl #22]!
    8bac:	551d0000 	ldrpl	r0, [sp, #-0]
    8bb0:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8bb4:	6e0b02a3 	cdpvs	2, 0, cr0, cr11, cr3, {5}
    8bb8:	00000008 	andeq	r0, r0, r8
    8bbc:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8bc0:	0008ea00 	andeq	lr, r8, r0, lsl #20
    8bc4:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8bc8:	00180000 	andseq	r0, r8, r0
    8bcc:	000ebf1e 	andeq	fp, lr, lr, lsl pc
    8bd0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
    8bd4:	000008ea 	andeq	r0, r0, sl, ror #17
    8bd8:	0902011f 	stmdbeq	r2, {r0, r1, r2, r3, r4, r8}
    8bdc:	97160000 	ldrls	r0, [r6, -r0]
    8be0:	00000004 	andeq	r0, r0, r4
    8be4:	08f60411 	ldmeq	r6!, {r0, r4, sl}^
    8be8:	04110000 	ldreq	r0, [r1], #-0
    8bec:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    8bf0:	091a011f 	ldmdbeq	sl, {r0, r1, r2, r3, r4, r8}
    8bf4:	a3160000 	tstge	r6, #0
    8bf8:	00000000 	andeq	r0, r0, r0
    8bfc:	09200411 	stmdbeq	r0!, {r0, r4, sl}
    8c00:	04110000 	ldreq	r0, [r1], #-0
    8c04:	0000090e 	andeq	r0, r0, lr, lsl #18
    8c08:	00068e0a 	andeq	r8, r6, sl, lsl #28
    8c0c:	00093600 	andeq	r3, r9, r0, lsl #12
    8c10:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8c14:	00020000 	andeq	r0, r2, r0
    8c18:	000ac520 	andeq	ip, sl, r0, lsr #10
    8c1c:	03330900 	teqeq	r3, #0, 18
    8c20:	00049717 	andeq	r9, r4, r7, lsl r7
    8c24:	20010100 	andcs	r0, r1, r0, lsl #2
    8c28:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
    8c2c:	1d033409 	cfstrsne	mvf3, [r3, #-36]	; 0xffffffdc
    8c30:	0000049d 	muleq	r0, sp, r4
    8c34:	d6020101 	strle	r0, [r2], -r1, lsl #2
    8c38:	0b000024 	bleq	8cd0 <__exidx_end+0x31f4>
    8c3c:	007f123b 	rsbseq	r1, pc, fp, lsr r2	; <UNPREDICTABLE>
    8c40:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    8c44:	8409400b 	strhi	r4, [r9], #-11
    8c48:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    8c4c:	00001fd9 	ldrdeq	r1, [r0], -r9
    8c50:	840d410b 	strhi	r4, [sp], #-267	; 0xfffffef5
    8c54:	00000009 	andeq	r0, r0, r9
    8c58:	00221c0d 	eoreq	r1, r2, sp, lsl #24
    8c5c:	0d420b00 	vstreq	d16, [r2, #-0]
    8c60:	00000984 	andeq	r0, r0, r4, lsl #19
    8c64:	04110004 	ldreq	r0, [r1], #-4
    8c68:	00000059 	andeq	r0, r0, r9, asr r0
    8c6c:	00272102 	eoreq	r2, r7, r2, lsl #2
    8c70:	03430b00 	movteq	r0, #15104	; 0x3b00
    8c74:	00000960 	andeq	r0, r0, r0, ror #18
    8c78:	00229d02 	eoreq	r9, r2, r2, lsl #26
    8c7c:	2b3c0c00 	blcs	f0bc84 <__ccfg+0xeebcdc>
    8c80:	000009a2 	andeq	r0, r0, r2, lsr #19
    8c84:	00253c0f 	eoreq	r3, r5, pc, lsl #24
    8c88:	6f0c1000 	svcvs	0x000c1000
    8c8c:	0009fe15 	andeq	pc, r9, r5, lsl lr	; <UNPREDICTABLE>
    8c90:	1f080d00 	svcne	0x00080d00
    8c94:	700c0000 	andvc	r0, ip, r0
    8c98:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8c9c:	7b0d0000 	blvc	348ca4 <__ccfg+0x328cfc>
    8ca0:	0c000007 	stceq	0, cr0, [r0], {7}
    8ca4:	006c0d71 	rsbeq	r0, ip, r1, ror sp
    8ca8:	0d020000 	stceq	0, cr0, [r2, #-0]
    8cac:	0000227b 	andeq	r2, r0, fp, ror r2
    8cb0:	c013740c 	andsgt	r7, r3, ip, lsl #8
    8cb4:	0400000b 	streq	r0, [r0], #-11
    8cb8:	00200a0d 	eoreq	r0, r0, sp, lsl #20
    8cbc:	0c750c00 	ldcleq	12, cr0, [r5], #-0
    8cc0:	00000954 	andeq	r0, r0, r4, asr r9
    8cc4:	22ab0d08 	adccs	r0, fp, #8, 26	; 0x200
    8cc8:	7d0c0000 	stcvc	0, cr0, [ip, #-0]
    8ccc:	000b4c06 	andeq	r4, fp, r6, lsl #24
    8cd0:	f50d0c00 			; <UNDEFINED> instruction: 0xf50d0c00
    8cd4:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8cd8:	0b960681 	bleq	fe58a6e4 <_estack+0xde5856e4>
    8cdc:	000d0000 	andeq	r0, sp, r0
    8ce0:	00207e02 	eoreq	r7, r0, r2, lsl #28
    8ce4:	2a3f0c00 	bcs	fcbcec <__ccfg+0xfabd44>
    8ce8:	00000a0a 	andeq	r0, r0, sl, lsl #20
    8cec:	0020710f 	eoreq	r7, r0, pc, lsl #2
    8cf0:	e00c1800 	and	r1, ip, r0, lsl #16
    8cf4:	000ac115 	andeq	ip, sl, r5, lsl r1
    8cf8:	1f080d00 	svcne	0x00080d00
    8cfc:	e10c0000 	mrs	r0, (UNDEF: 12)
    8d00:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d04:	7b0d0000 	blvc	348d0c <__ccfg+0x328d64>
    8d08:	0c000007 	stceq	0, cr0, [r0], {7}
    8d0c:	006c0de2 	rsbeq	r0, ip, r2, ror #27
    8d10:	0d020000 	stceq	0, cr0, [r2, #-0]
    8d14:	0000227b 	andeq	r2, r0, fp, ror r2
    8d18:	c013e50c 	andsgt	lr, r3, ip, lsl #10
    8d1c:	0400000b 	streq	r0, [r0], #-11
    8d20:	00200a0d 	eoreq	r0, r0, sp, lsl #20
    8d24:	0ce60c00 	stcleq	12, cr0, [r6]
    8d28:	00000954 	andeq	r0, r0, r4, asr r9
    8d2c:	22ab0d08 	adccs	r0, fp, #8, 26	; 0x200
    8d30:	ee0c0000 	cdp	0, 0, cr0, cr12, cr0, {0}
    8d34:	000bcc06 	andeq	ip, fp, r6, lsl #24
    8d38:	f50d0c00 			; <UNDEFINED> instruction: 0xf50d0c00
    8d3c:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8d40:	0c1606f2 	ldceq	6, cr0, [r6], {242}	; 0xf2
    8d44:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    8d48:	00002647 	andeq	r2, r0, r7, asr #12
    8d4c:	6c0df30c 	stcvs	3, cr15, [sp], {12}
    8d50:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8d54:	00239f0d 	eoreq	r9, r3, sp, lsl #30
    8d58:	0df40c00 	ldcleq	12, cr0, [r4]
    8d5c:	0000006c 	andeq	r0, r0, ip, rrx
    8d60:	20b10d10 	adcscs	r0, r1, r0, lsl sp
    8d64:	fa0c0000 	blx	308d6c <__ccfg+0x2e8dc4>
    8d68:	000c4006 	andeq	r4, ip, r6
    8d6c:	5b0d1200 	blpl	34d574 <__ccfg+0x32d5cc>
    8d70:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8d74:	00590cfb 	ldrsheq	r0, [r9], #-203	; 0xffffff35
    8d78:	0d130000 	ldceq	0, cr0, [r3, #-0]
    8d7c:	000025ab 	andeq	r2, r0, fp, lsr #11
    8d80:	590cfc0c 	stmdbpl	ip, {r2, r3, sl, fp, ip, sp, lr, pc}
    8d84:	14000000 	strne	r0, [r0], #-0
    8d88:	0025b40d 	eoreq	fp, r5, sp, lsl #8
    8d8c:	0cfd0c00 	ldcleq	12, cr0, [sp]
    8d90:	00000059 	andeq	r0, r0, r9, asr r0
    8d94:	25bd0d15 	ldrcs	r0, [sp, #3349]!	; 0xd15
    8d98:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
    8d9c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8da0:	02001600 	andeq	r1, r0, #0, 12
    8da4:	000026c2 	andeq	r2, r0, r2, asr #13
    8da8:	cd36440c 	cfldrsgt	mvf4, [r6, #-48]!	; 0xffffffd0
    8dac:	1a00000a 	bne	8ddc <__exidx_end+0x3300>
    8db0:	000026a9 	andeq	r2, r0, r9, lsr #13
    8db4:	019f0c14 	orrseq	r0, pc, r4, lsl ip	; <UNPREDICTABLE>
    8db8:	000b4c15 	andeq	r4, fp, r5, lsl ip
    8dbc:	1f081800 	svcne	0x00081800
    8dc0:	a00c0000 	andge	r0, ip, r0
    8dc4:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8dc8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8dcc:	0000077b 	andeq	r0, r0, fp, ror r7
    8dd0:	0d01a10c 	stfeqd	f2, [r1, #-48]	; 0xffffffd0
    8dd4:	0000006c 	andeq	r0, r0, ip, rrx
    8dd8:	227b1802 	rsbscs	r1, fp, #131072	; 0x20000
    8ddc:	a40c0000 	strge	r0, [ip], #-0
    8de0:	0bc01301 	bleq	ff00d9ec <_estack+0xdf0089ec>
    8de4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8de8:	0000200a 	andeq	r2, r0, sl
    8dec:	0c01a50c 	cfstr32eq	mvfx10, [r1], {12}
    8df0:	00000954 	andeq	r0, r0, r4, asr r9
    8df4:	22ab1808 	adccs	r1, fp, #8, 16	; 0x80000
    8df8:	ad0c0000 	stcge	0, cr0, [ip, #-0]
    8dfc:	0c6a0601 	stcleq	6, cr0, [sl], #-4
    8e00:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    8e04:	000021f5 	strdeq	r2, [r0], -r5
    8e08:	0601b10c 	streq	fp, [r1], -ip, lsl #2
    8e0c:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    8e10:	225b180d 	subscs	r1, fp, #851968	; 0xd0000
    8e14:	b20c0000 	andlt	r0, ip, #0
    8e18:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8e1c:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    8e20:	00002149 	andeq	r2, r0, r9, asr #2
    8e24:	0c01b30c 	stceq	3, cr11, [r1], {12}
    8e28:	00000954 	andeq	r0, r0, r4, asr r9
    8e2c:	010c0010 	tsteq	ip, r0, lsl r0
    8e30:	9604760c 	strls	r7, [r4], -ip, lsl #12
    8e34:	2100000b 	tstcs	r0, fp
    8e38:	0000275e 	andeq	r2, r0, lr, asr r7
    8e3c:	590f770c 	stmdbpl	pc, {r2, r3, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
    8e40:	01000000 	mrseq	r0, (UNDEF: 0)
    8e44:	21000404 	tstcs	r0, r4, lsl #8
    8e48:	000020fc 	strdeq	r2, [r0], -ip
    8e4c:	590f780c 	stmdbpl	pc, {r2, r3, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8e50:	01000000 	mrseq	r0, (UNDEF: 0)
    8e54:	21000301 	tstcs	r0, r1, lsl #6
    8e58:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    8e5c:	590f7a0c 	stmdbpl	pc, {r2, r3, r9, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8e60:	01000000 	mrseq	r0, (UNDEF: 0)
    8e64:	21000102 	tstcs	r0, r2, lsl #2
    8e68:	00001f77 	andeq	r1, r0, r7, ror pc
    8e6c:	590f7b0c 	stmdbpl	pc, {r2, r3, r8, r9, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8e70:	01000000 	mrseq	r0, (UNDEF: 0)
    8e74:	00000001 	andeq	r0, r0, r1
    8e78:	7e0c010c 	adfvce	f0, f4, #4.0
    8e7c:	000bc004 	andeq	ip, fp, r4
    8e80:	25d92100 	ldrbcs	r2, [r9, #256]	; 0x100
    8e84:	7f0c0000 	svcvc	0x000c0000
    8e88:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e8c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8e90:	272d2100 	strcs	r2, [sp, -r0, lsl #2]!
    8e94:	800c0000 	andhi	r0, ip, r0
    8e98:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e9c:	00040100 	andeq	r0, r4, r0, lsl #2
    8ea0:	04110000 	ldreq	r0, [r1], #-0
    8ea4:	00000996 	muleq	r0, r6, r9
    8ea8:	007f0411 	rsbseq	r0, pc, r1, lsl r4	; <UNPREDICTABLE>
    8eac:	010c0000 	mrseq	r0, (UNDEF: 12)
    8eb0:	1604e70c 	strne	lr, [r4], -ip, lsl #14
    8eb4:	2100000c 	tstcs	r0, ip
    8eb8:	0000275e 	andeq	r2, r0, lr, asr r7
    8ebc:	590fe80c 	stmdbpl	pc, {r2, r3, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ec4:	21000404 	tstcs	r0, r4, lsl #8
    8ec8:	000020fc 	strdeq	r2, [r0], -ip
    8ecc:	590fe90c 	stmdbpl	pc, {r2, r3, r8, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ed4:	21000301 	tstcs	r0, r1, lsl #6
    8ed8:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    8edc:	590feb0c 	stmdbpl	pc, {r2, r3, r8, r9, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ee4:	21000102 	tstcs	r0, r2, lsl #2
    8ee8:	00001f77 	andeq	r1, r0, r7, ror pc
    8eec:	590fec0c 	stmdbpl	pc, {r2, r3, sl, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ef4:	00000001 	andeq	r0, r0, r1
    8ef8:	ef0c010c 	svc	0x000c010c
    8efc:	000c4004 	andeq	r4, ip, r4
    8f00:	25d92100 	ldrbcs	r2, [r9, #256]	; 0x100
    8f04:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    8f08:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f0c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8f10:	272d2100 	strcs	r2, [sp, -r0, lsl #2]!
    8f14:	f10c0000 	cpsid	
    8f18:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f1c:	00040100 	andeq	r0, r4, r0, lsl #2
    8f20:	010c0000 	mrseq	r0, (UNDEF: 12)
    8f24:	6a04f50c 	bvs	14635c <__ccfg+0x1263b4>
    8f28:	2100000c 	tstcs	r0, ip
    8f2c:	000020e6 	andeq	r2, r0, r6, ror #1
    8f30:	590ff60c 	stmdbpl	pc, {r2, r3, r9, sl, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8f34:	01000000 	mrseq	r0, (UNDEF: 0)
    8f38:	21000701 	tstcs	r0, r1, lsl #14
    8f3c:	00002747 	andeq	r2, r0, r7, asr #14
    8f40:	590ff80c 	stmdbpl	pc, {r2, r3, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8f44:	01000000 	mrseq	r0, (UNDEF: 0)
    8f48:	00000106 	andeq	r0, r0, r6, lsl #2
    8f4c:	a60c011b 			; <UNDEFINED> instruction: 0xa60c011b
    8f50:	0cb90401 	cfldrseq	mvf0, [r9], #4
    8f54:	5e220000 	cdppl	0, 2, cr0, cr2, cr0, {0}
    8f58:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8f5c:	590f01a7 	stmdbpl	pc, {r0, r1, r2, r5, r7, r8}	; <UNPREDICTABLE>
    8f60:	01000000 	mrseq	r0, (UNDEF: 0)
    8f64:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8f68:	000020fc 	strdeq	r2, [r0], -ip
    8f6c:	0f01a80c 	svceq	0x0001a80c
    8f70:	00000059 	andeq	r0, r0, r9, asr r0
    8f74:	00030101 	andeq	r0, r3, r1, lsl #2
    8f78:	0021bc22 	eoreq	fp, r1, r2, lsr #24
    8f7c:	01aa0c00 			; <UNDEFINED> instruction: 0x01aa0c00
    8f80:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f84:	01020100 	mrseq	r0, (UNDEF: 18)
    8f88:	1f772200 	svcne	0x00772200
    8f8c:	ab0c0000 	blge	308f94 <__ccfg+0x2e8fec>
    8f90:	00590f01 	subseq	r0, r9, r1, lsl #30
    8f94:	01010000 	mrseq	r0, (UNDEF: 1)
    8f98:	1b000000 	blne	8fa0 <__exidx_end+0x34c4>
    8f9c:	01ae0c01 			; <UNDEFINED> instruction: 0x01ae0c01
    8fa0:	000ce604 	andeq	lr, ip, r4, lsl #12
    8fa4:	25d92200 	ldrbcs	r2, [r9, #512]	; 0x200
    8fa8:	af0c0000 	svcge	0x000c0000
    8fac:	00590f01 	subseq	r0, r9, r1, lsl #30
    8fb0:	04010000 	streq	r0, [r1], #-0
    8fb4:	2d220004 	stccs	0, cr0, [r2, #-16]!
    8fb8:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8fbc:	590f01b0 	stmdbpl	pc, {r4, r5, r7, r8}	; <UNPREDICTABLE>
    8fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    8fc4:	00000004 	andeq	r0, r0, r4
    8fc8:	098a0411 	stmibeq	sl, {r0, r4, sl}
    8fcc:	1c020000 	stcne	0, cr0, [r2], {-0}
    8fd0:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    8fd4:	0cf82f3d 	ldcleq	15, cr2, [r8], #244	; 0xf4
    8fd8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    8fdc:	18000026 	stmdane	r0, {r1, r2, r5}
    8fe0:	8815780d 	ldmdahi	r5, {r0, r2, r3, fp, ip, sp, lr}
    8fe4:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    8fe8:	00001f08 	andeq	r1, r0, r8, lsl #30
    8fec:	6c0d790d 			; <UNDEFINED> instruction: 0x6c0d790d
    8ff0:	00000000 	andeq	r0, r0, r0
    8ff4:	00077b0d 	andeq	r7, r7, sp, lsl #22
    8ff8:	0d7a0d00 	ldcleq	13, cr0, [sl, #-0]
    8ffc:	0000006c 	andeq	r0, r0, ip, rrx
    9000:	227b0d02 	rsbscs	r0, fp, #2, 26	; 0x80
    9004:	7d0d0000 	stcvc	0, cr0, [sp, #-0]
    9008:	000bc013 	andeq	ip, fp, r3, lsl r0
    900c:	0a0d0400 	beq	34a014 <__ccfg+0x32a06c>
    9010:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9014:	09540c7e 	ldmdbeq	r4, {r1, r2, r3, r4, r5, r6, sl, fp}^
    9018:	0d080000 	stceq	0, cr0, [r8, #-0]
    901c:	000022ab 	andeq	r2, r0, fp, lsr #5
    9020:	f306860d 	vmax.u8	d8, d6, d13
    9024:	0c000010 	stceq	0, cr0, [r0], {16}
    9028:	0021f50d 	eoreq	pc, r1, sp, lsl #10
    902c:	068a0d00 	streq	r0, [sl], r0, lsl #26
    9030:	0000113d 	andeq	r1, r0, sp, lsr r1
    9034:	204f0d0d 	subcs	r0, pc, sp, lsl #26
    9038:	930d0000 	movwls	r0, #53248	; 0xd000
    903c:	00116706 	andseq	r6, r1, r6, lsl #14
    9040:	d20d0e00 	andle	r0, sp, #0, 28
    9044:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9048:	00590c94 			; <UNDEFINED> instruction: 0x00590c94
    904c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 9054 <__exidx_end+0x3578>
    9050:	00002331 	andeq	r2, r0, r1, lsr r3
    9054:	7f0d950d 	svcvc	0x000d950d
    9058:	10000000 	andne	r0, r0, r0
    905c:	001f350d 	andseq	r3, pc, sp, lsl #10
    9060:	0d960d00 	ldceq	13, cr0, [r6]
    9064:	00000984 	andeq	r0, r0, r4, lsl #19
    9068:	88020014 	stmdahi	r2, {r2, r4}
    906c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9070:	0d942f3e 	ldceq	15, cr2, [r4, #248]	; 0xf8
    9074:	800f0000 	andhi	r0, pc, r0
    9078:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    907c:	72159f0d 	andsvc	r9, r5, #13, 30	; 0x34
    9080:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    9084:	00001f08 	andeq	r1, r0, r8, lsl #30
    9088:	6c0da00d 	stcvs	0, cr10, [sp], {13}
    908c:	00000000 	andeq	r0, r0, r0
    9090:	00077b0d 	andeq	r7, r7, sp, lsl #22
    9094:	0da10d00 	stceq	13, cr0, [r1]
    9098:	0000006c 	andeq	r0, r0, ip, rrx
    909c:	227b0d02 	rsbscs	r0, fp, #2, 26	; 0x80
    90a0:	a40d0000 	strge	r0, [sp], #-0
    90a4:	000bc013 	andeq	ip, fp, r3, lsl r0
    90a8:	0a0d0400 	beq	34a0b0 <__ccfg+0x32a108>
    90ac:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    90b0:	09540ca5 	ldmdbeq	r4, {r0, r2, r5, r7, sl, fp}^
    90b4:	0d080000 	stceq	0, cr0, [r8, #-0]
    90b8:	000022ab 	andeq	r2, r0, fp, lsr #5
    90bc:	a106ad0d 	tstge	r6, sp, lsl #26
    90c0:	0c000011 	stceq	0, cr0, [r0], {17}
    90c4:	0021f50d 	eoreq	pc, r1, sp, lsl #10
    90c8:	06b10d00 	ldrteq	r0, [r1], r0, lsl #26
    90cc:	000011eb 	andeq	r1, r0, fp, ror #3
    90d0:	204f0d0d 	subcs	r0, pc, sp, lsl #26
    90d4:	c30d0000 	movwgt	r0, #53248	; 0xd000
    90d8:	00121506 	andseq	r1, r2, r6, lsl #10
    90dc:	e60d0e00 	str	r0, [sp], -r0, lsl #28
    90e0:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    90e4:	129f06cd 	addsne	r0, pc, #214958080	; 0xcd00000
    90e8:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 90f0 <__exidx_end+0x3614>
    90ec:	00002331 	andeq	r2, r0, r1, lsr r3
    90f0:	7f0dce0d 	svcvc	0x000dce0d
    90f4:	10000000 	andne	r0, r0, r0
    90f8:	0021340d 	eoreq	r3, r1, sp, lsl #8
    90fc:	0ccf0d00 	stcleq	13, cr0, [pc], {0}
    9100:	00000059 	andeq	r0, r0, r9, asr r0
    9104:	24380d14 	ldrtcs	r0, [r8], #-3348	; 0xfffff2ec
    9108:	d10d0000 	mrsle	r0, (UNDEF: 13)
    910c:	0000590c 	andeq	r5, r0, ip, lsl #18
    9110:	410d1500 	tstmi	sp, r0, lsl #10
    9114:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9118:	00590cd2 	ldrsbeq	r0, [r9], #-194	; 0xffffff3e
    911c:	0d160000 	ldceq	0, cr0, [r6, #-0]
    9120:	00002192 	muleq	r0, r2, r1
    9124:	1906db0d 	stmdbne	r6, {r0, r2, r3, r8, r9, fp, ip, lr, pc}
    9128:	17000013 	smladne	r0, r3, r0, r0
    912c:	0026810d 	eoreq	r8, r6, sp, lsl #2
    9130:	0cdc0d00 	ldcleq	13, cr0, [ip], {0}
    9134:	00000954 	andeq	r0, r0, r4, asr r9
    9138:	21c60d18 	biccs	r0, r6, r8, lsl sp
    913c:	dd0d0000 	stcle	0, cr0, [sp, #-0]
    9140:	000ce611 	andeq	lr, ip, r1, lsl r6
    9144:	9a0d1c00 	bls	35014c <__ccfg+0x3301a4>
    9148:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    914c:	09840dde 	stmibeq	r4, {r1, r2, r3, r4, r6, r7, r8, sl, fp}
    9150:	00200000 	eoreq	r0, r0, r0
    9154:	00219d02 	eoreq	r9, r1, r2, lsl #26
    9158:	2f410d00 	svccs	0x00410d00
    915c:	00000e7e 	andeq	r0, r0, lr, ror lr
    9160:	001f651a 	andseq	r6, pc, sl, lsl r5	; <UNPREDICTABLE>
    9164:	7d0d1c00 	stcvc	12, cr1, [sp, #-0]
    9168:	0f6d1501 	svceq	0x006d1501
    916c:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    9170:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9174:	6c0d017e 	stfvss	f0, [sp], {126}	; 0x7e
    9178:	00000000 	andeq	r0, r0, r0
    917c:	00077b18 	andeq	r7, r7, r8, lsl fp
    9180:	017f0d00 	cmneq	pc, r0, lsl #26
    9184:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9188:	7b180200 	blvc	609990 <__ccfg+0x5e99e8>
    918c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9190:	c0130182 	andsgt	r0, r3, r2, lsl #3
    9194:	0400000b 	streq	r0, [r0], #-11
    9198:	00200a18 	eoreq	r0, r0, r8, lsl sl
    919c:	01830d00 	orreq	r0, r3, r0, lsl #26
    91a0:	0009540c 	andeq	r5, r9, ip, lsl #8
    91a4:	ab180800 	blge	60b1ac <__ccfg+0x5eb204>
    91a8:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    91ac:	6306018b 	movwvs	r0, #24971	; 0x618b
    91b0:	0c000013 	stceq	0, cr0, [r0], {19}
    91b4:	0021f518 	eoreq	pc, r1, r8, lsl r5	; <UNPREDICTABLE>
    91b8:	018f0d00 	orreq	r0, pc, r0, lsl #26
    91bc:	0013b206 	andseq	fp, r3, r6, lsl #4
    91c0:	5b180d00 	blpl	60c5c8 <__ccfg+0x5ec620>
    91c4:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    91c8:	df060195 	svcle	0x00060195
    91cc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    91d0:	00225b18 	eoreq	r5, r2, r8, lsl fp
    91d4:	01960d00 	orrseq	r0, r6, r0, lsl #26
    91d8:	0000590c 	andeq	r5, r0, ip, lsl #18
    91dc:	1a180f00 	bne	60cde4 <__ccfg+0x5ece3c>
    91e0:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    91e4:	0c0601a3 	stfeqs	f0, [r6], {163}	; 0xa3
    91e8:	10000014 	andne	r0, r0, r4, lsl r0
    91ec:	0021dc18 	eoreq	sp, r1, r8, lsl ip
    91f0:	01a40d00 			; <UNDEFINED> instruction: 0x01a40d00
    91f4:	0000250b 	andeq	r2, r0, fp, lsl #10
    91f8:	ad181100 	ldfges	f1, [r8, #-0]
    91fc:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9200:	590c01a5 	stmdbpl	ip, {r0, r2, r5, r7, r8}
    9204:	12000000 	andne	r0, r0, #0
    9208:	0026e218 	eoreq	lr, r6, r8, lsl r2
    920c:	01a70d00 			; <UNDEFINED> instruction: 0x01a70d00
    9210:	0000590c 	andeq	r5, r0, ip, lsl #18
    9214:	64181300 	ldrvs	r1, [r8], #-768	; 0xfffffd00
    9218:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    921c:	6c0d01a9 	stfvss	f0, [sp], {169}	; 0xa9
    9220:	14000000 	strne	r0, [r0], #-0
    9224:	00213e18 	eoreq	r3, r1, r8, lsl lr
    9228:	01af0d00 			; <UNDEFINED> instruction: 0x01af0d00
    922c:	00147d06 	andseq	r7, r4, r6, lsl #26
    9230:	41181600 	tstmi	r8, r0, lsl #12
    9234:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9238:	aa0601b7 	bge	18991c <__ccfg+0x169974>
    923c:	17000014 	smladne	r0, r4, r0, r0
    9240:	00235018 	eoreq	r5, r3, r8, lsl r0
    9244:	01b80d00 			; <UNDEFINED> instruction: 0x01b80d00
    9248:	0009540c 	andeq	r5, r9, ip, lsl #8
    924c:	02001800 	andeq	r1, r0, #0, 16
    9250:	00002469 	andeq	r2, r0, r9, ror #8
    9254:	793c430d 	ldmdbvc	ip!, {r0, r2, r3, r8, r9, lr}
    9258:	1a00000f 	bne	929c <__exidx_end+0x37c0>
    925c:	0000244a 	andeq	r2, r0, sl, asr #8
    9260:	021a0d28 	andseq	r0, sl, #40, 26	; 0xa00
    9264:	00107615 	andseq	r7, r0, r5, lsl r6
    9268:	1f081800 	svcne	0x00081800
    926c:	1b0d0000 	blne	349274 <__ccfg+0x3292cc>
    9270:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    9274:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9278:	0000077b 	andeq	r0, r0, fp, ror r7
    927c:	0d021d0d 	stceq	13, cr1, [r2, #-52]	; 0xffffffcc
    9280:	0000006c 	andeq	r0, r0, ip, rrx
    9284:	227b1802 	rsbscs	r1, fp, #131072	; 0x20000
    9288:	200d0000 	andcs	r0, sp, r0
    928c:	0bc01302 	bleq	ff00de9c <_estack+0xdf008e9c>
    9290:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    9294:	0000200a 	andeq	r2, r0, sl
    9298:	0c02210d 	stfeqs	f2, [r2], {13}
    929c:	00000954 	andeq	r0, r0, r4, asr r9
    92a0:	22ab1808 	adccs	r1, fp, #8, 16	; 0x80000
    92a4:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
    92a8:	14f90602 	ldrbtne	r0, [r9], #1538	; 0x602
    92ac:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    92b0:	000021f5 	strdeq	r2, [r0], -r5
    92b4:	06022d0d 	streq	r2, [r2], -sp, lsl #26
    92b8:	00001548 	andeq	r1, r0, r8, asr #10
    92bc:	1efd180d 	cdpne	8, 15, cr1, cr13, cr13, {0}
    92c0:	330d0000 	movwcc	r0, #53248	; 0xd000
    92c4:	15750602 	ldrbne	r0, [r5, #-1538]!	; 0xfffff9fe
    92c8:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    92cc:	00002264 	andeq	r2, r0, r4, ror #4
    92d0:	0602380d 	streq	r3, [r2], -sp, lsl #16
    92d4:	000015a2 	andeq	r1, r0, r2, lsr #11
    92d8:	20931810 	addscs	r1, r3, r0, lsl r8
    92dc:	390d0000 	stmdbcc	sp, {}	; <UNPREDICTABLE>
    92e0:	00590c02 	subseq	r0, r9, r2, lsl #24
    92e4:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    92e8:	00002327 	andeq	r2, r0, r7, lsr #6
    92ec:	0602410d 	streq	r4, [r2], -sp, lsl #2
    92f0:	000015cf 	andeq	r1, r0, pc, asr #11
    92f4:	1fff1815 	svcne	0x00ff1815
    92f8:	550d0000 	strpl	r0, [sp, #-0]
    92fc:	15fc0602 	ldrbne	r0, [ip, #1538]!	; 0x602
    9300:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    9304:	00001472 	andeq	r1, r0, r2, ror r4
    9308:	0602680d 	streq	r6, [r2], -sp, lsl #16
    930c:	0000165c 	andeq	r1, r0, ip, asr r6
    9310:	208b1818 	addcs	r1, fp, r8, lsl r8
    9314:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
    9318:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    931c:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    9320:	000024c9 	andeq	r2, r0, r9, asr #9
    9324:	0e026a0d 	vmlaeq.f32	s12, s4, s26
    9328:	00000bc6 	andeq	r0, r0, r6, asr #23
    932c:	1f3a181c 	svcne	0x003a181c
    9330:	6c0d0000 	stcvs	0, cr0, [sp], {-0}
    9334:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    9338:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    933c:	00002283 	andeq	r2, r0, r3, lsl #5
    9340:	0c02700d 	stceq	0, cr7, [r2], {13}
    9344:	00000038 	andeq	r0, r0, r8, lsr r0
    9348:	23c11822 	biccs	r1, r1, #2228224	; 0x220000
    934c:	730d0000 	movwvc	r0, #53248	; 0xd000
    9350:	00590c02 	subseq	r0, r9, r2, lsl #24
    9354:	00240000 	eoreq	r0, r4, r0
    9358:	0024fd02 	eoreq	pc, r4, r2, lsl #26
    935c:	30480d00 	subcc	r0, r8, r0, lsl #26
    9360:	00001082 	andeq	r1, r0, r2, lsl #1
    9364:	0024ea1a 	eoreq	lr, r4, sl, lsl sl
    9368:	750d0c00 	strvc	r0, [sp, #-3072]	; 0xfffff400
    936c:	10f31503 	rscsne	r1, r3, r3, lsl #10
    9370:	a0180000 	andsge	r0, r8, r0
    9374:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9378:	6c0d0376 	stcvs	3, cr0, [sp], {118}	; 0x76
    937c:	00000000 	andeq	r0, r0, r0
    9380:	001fbf18 	andseq	fp, pc, r8, lsl pc	; <UNPREDICTABLE>
    9384:	03770d00 	cmneq	r7, #0, 26
    9388:	00006c0d 	andeq	r6, r0, sp, lsl #24
    938c:	ac180200 	lfmge	f0, 4, [r8], {-0}
    9390:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9394:	590c0378 	stmdbpl	ip, {r3, r4, r5, r6, r8, r9}
    9398:	04000000 	streq	r0, [r0], #-0
    939c:	0024a218 	eoreq	sl, r4, r8, lsl r2
    93a0:	03790d00 	cmneq	r9, #0, 26
    93a4:	0000590c 	andeq	r5, r0, ip, lsl #18
    93a8:	27180500 	ldrcs	r0, [r8, -r0, lsl #10]
    93ac:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    93b0:	590c037a 	stmdbpl	ip, {r1, r3, r4, r5, r6, r8, r9}
    93b4:	06000000 	streq	r0, [r0], -r0
    93b8:	00220b18 	eoreq	r0, r2, r8, lsl fp
    93bc:	037b0d00 	cmneq	fp, #0, 26
    93c0:	0000250b 	andeq	r2, r0, fp, lsl #10
    93c4:	e4180700 	ldr	r0, [r8], #-1792	; 0xfffff900
    93c8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    93cc:	540c037c 	strpl	r0, [ip], #-892	; 0xfffffc84
    93d0:	08000009 	stmdaeq	r0, {r0, r3}
    93d4:	0d010c00 	stceq	12, cr0, [r1, #-0]
    93d8:	113d047f 	teqne	sp, pc, ror r4
    93dc:	5e210000 	cdppl	0, 2, cr0, cr1, cr0, {0}
    93e0:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    93e4:	00590f80 	subseq	r0, r9, r0, lsl #31
    93e8:	04010000 	streq	r0, [r1], #-0
    93ec:	fc210004 	stc2	0, cr0, [r1], #-16
    93f0:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    93f4:	00590f81 	subseq	r0, r9, r1, lsl #31
    93f8:	01010000 	mrseq	r0, (UNDEF: 1)
    93fc:	bc210003 	stclt	0, cr0, [r1], #-12
    9400:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9404:	00590f83 	subseq	r0, r9, r3, lsl #31
    9408:	02010000 	andeq	r0, r1, #0
    940c:	77210001 	strvc	r0, [r1, -r1]!
    9410:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9414:	00590f84 	subseq	r0, r9, r4, lsl #31
    9418:	01010000 	mrseq	r0, (UNDEF: 1)
    941c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9420:	04870d01 	streq	r0, [r7], #3329	; 0xd01
    9424:	00001167 	andeq	r1, r0, r7, ror #2
    9428:	0025d921 	eoreq	sp, r5, r1, lsr #18
    942c:	0f880d00 	svceq	0x00880d00
    9430:	00000059 	andeq	r0, r0, r9, asr r0
    9434:	00040401 	andeq	r0, r4, r1, lsl #8
    9438:	00272d21 	eoreq	r2, r7, r1, lsr #26
    943c:	0f890d00 	svceq	0x00890d00
    9440:	00000059 	andeq	r0, r0, r9, asr r0
    9444:	00000401 	andeq	r0, r0, r1, lsl #8
    9448:	0d010c00 	stceq	12, cr0, [r1, #-0]
    944c:	11a1048b 			; <UNDEFINED> instruction: 0x11a1048b
    9450:	6c210000 	stcvs	0, cr0, [r1], #-0
    9454:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9458:	00590f8c 	subseq	r0, r9, ip, lsl #31
    945c:	01010000 	mrseq	r0, (UNDEF: 1)
    9460:	f4210007 	vld4.8	{d0-d3}, [r1], r7
    9464:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9468:	00590f8f 	subseq	r0, r9, pc, lsl #31
    946c:	01010000 	mrseq	r0, (UNDEF: 1)
    9470:	2d210004 	stccs	0, cr0, [r1, #-16]!
    9474:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9478:	00590f91 			; <UNDEFINED> instruction: 0x00590f91
    947c:	01010000 	mrseq	r0, (UNDEF: 1)
    9480:	0c000003 	stceq	0, cr0, [r0], {3}
    9484:	04a60d01 	strteq	r0, [r6], #3329	; 0xd01
    9488:	000011eb 	andeq	r1, r0, fp, ror #3
    948c:	00275e21 	eoreq	r5, r7, r1, lsr #28
    9490:	0fa70d00 	svceq	0x00a70d00
    9494:	00000059 	andeq	r0, r0, r9, asr r0
    9498:	00040401 	andeq	r0, r4, r1, lsl #8
    949c:	0020fc21 	eoreq	pc, r0, r1, lsr #24
    94a0:	0fa80d00 	svceq	0x00a80d00
    94a4:	00000059 	andeq	r0, r0, r9, asr r0
    94a8:	00030101 	andeq	r0, r3, r1, lsl #2
    94ac:	0021bc21 	eoreq	fp, r1, r1, lsr #24
    94b0:	0faa0d00 	svceq	0x00aa0d00
    94b4:	00000059 	andeq	r0, r0, r9, asr r0
    94b8:	00010201 	andeq	r0, r1, r1, lsl #4
    94bc:	001f7721 	andseq	r7, pc, r1, lsr #14
    94c0:	0fab0d00 	svceq	0x00ab0d00
    94c4:	00000059 	andeq	r0, r0, r9, asr r0
    94c8:	00000101 	andeq	r0, r0, r1, lsl #2
    94cc:	0d010c00 	stceq	12, cr0, [r1, #-0]
    94d0:	121504ae 	andsne	r0, r5, #-1375731712	; 0xae000000
    94d4:	d9210000 	stmdble	r1!, {}	; <UNPREDICTABLE>
    94d8:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    94dc:	00590faf 	subseq	r0, r9, pc, lsr #31
    94e0:	04010000 	streq	r0, [r1], #-0
    94e4:	2d210004 	stccs	0, cr0, [r1, #-16]!
    94e8:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    94ec:	00590fb0 	ldrheq	r0, [r9], #-240	; 0xffffff10
    94f0:	04010000 	streq	r0, [r1], #-0
    94f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    94f8:	04b20d01 	ldrteq	r0, [r2], #3329	; 0xd01
    94fc:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    9500:	00266c21 	eoreq	r6, r6, r1, lsr #24
    9504:	0fb30d00 	svceq	0x00b30d00
    9508:	00000059 	andeq	r0, r0, r9, asr r0
    950c:	00070101 	andeq	r0, r7, r1, lsl #2
    9510:	001fa221 	andseq	sl, pc, r1, lsr #4
    9514:	0fb50d00 	svceq	0x00b50d00
    9518:	00000059 	andeq	r0, r0, r9, asr r0
    951c:	00060101 	andeq	r0, r6, r1, lsl #2
    9520:	00254a21 	eoreq	r4, r5, r1, lsr #20
    9524:	0fb70d00 	svceq	0x00b70d00
    9528:	00000059 	andeq	r0, r0, r9, asr r0
    952c:	00050101 	andeq	r0, r5, r1, lsl #2
    9530:	0026f421 	eoreq	pc, r6, r1, lsr #8
    9534:	0fb90d00 	svceq	0x00b90d00
    9538:	00000059 	andeq	r0, r0, r9, asr r0
    953c:	00040101 	andeq	r0, r4, r1, lsl #2
    9540:	001f2d21 	andseq	r2, pc, r1, lsr #26
    9544:	0fbb0d00 	svceq	0x00bb0d00
    9548:	00000059 	andeq	r0, r0, r9, asr r0
    954c:	00030101 	andeq	r0, r3, r1, lsl #2
    9550:	00268921 	eoreq	r8, r6, r1, lsr #18
    9554:	0fbd0d00 	svceq	0x00bd0d00
    9558:	00000059 	andeq	r0, r0, r9, asr r0
    955c:	00020101 	andeq	r0, r2, r1, lsl #2
    9560:	0021cd21 	eoreq	ip, r1, r1, lsr #26
    9564:	0fbf0d00 	svceq	0x00bf0d00
    9568:	00000059 	andeq	r0, r0, r9, asr r0
    956c:	00010101 	andeq	r0, r1, r1, lsl #2
    9570:	00255521 	eoreq	r5, r5, r1, lsr #10
    9574:	0fc10d00 	svceq	0x00c10d00
    9578:	00000059 	andeq	r0, r0, r9, asr r0
    957c:	00000101 	andeq	r0, r0, r1, lsl #2
    9580:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9584:	131904c4 	tstne	r9, #196, 8	; 0xc4000000
    9588:	8b210000 	blhi	849590 <__ccfg+0x8295e8>
    958c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9590:	00590fc5 	subseq	r0, r9, r5, asr #31
    9594:	01010000 	mrseq	r0, (UNDEF: 1)
    9598:	c4210007 	strtgt	r0, [r1], #-7
    959c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    95a0:	00590fc6 	subseq	r0, r9, r6, asr #31
    95a4:	01010000 	mrseq	r0, (UNDEF: 1)
    95a8:	ff210006 			; <UNDEFINED> instruction: 0xff210006
    95ac:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    95b0:	00590fc8 	subseq	r0, r9, r8, asr #31
    95b4:	01010000 	mrseq	r0, (UNDEF: 1)
    95b8:	68210004 	stmdavs	r1!, {r2}
    95bc:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    95c0:	00590fc9 	subseq	r0, r9, r9, asr #31
    95c4:	01010000 	mrseq	r0, (UNDEF: 1)
    95c8:	de210003 	cdple	0, 2, cr0, cr1, cr3, {0}
    95cc:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    95d0:	00590fca 	subseq	r0, r9, sl, asr #31
    95d4:	01010000 	mrseq	r0, (UNDEF: 1)
    95d8:	14210002 	strtne	r0, [r1], #-2
    95dc:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    95e0:	00590fcb 	subseq	r0, r9, fp, asr #31
    95e4:	01010000 	mrseq	r0, (UNDEF: 1)
    95e8:	12210001 	eorne	r0, r1, #1
    95ec:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    95f0:	00590fcc 	subseq	r0, r9, ip, asr #31
    95f4:	01010000 	mrseq	r0, (UNDEF: 1)
    95f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    95fc:	04d40d01 	ldrbeq	r0, [r4], #3329	; 0xd01
    9600:	00001363 	andeq	r1, r0, r3, ror #6
    9604:	00275e21 	eoreq	r5, r7, r1, lsr #28
    9608:	0fd50d00 	svceq	0x00d50d00
    960c:	00000059 	andeq	r0, r0, r9, asr r0
    9610:	00040401 	andeq	r0, r4, r1, lsl #8
    9614:	0020fc21 	eoreq	pc, r0, r1, lsr #24
    9618:	0fd60d00 	svceq	0x00d60d00
    961c:	00000059 	andeq	r0, r0, r9, asr r0
    9620:	00030101 	andeq	r0, r3, r1, lsl #2
    9624:	0021bc21 	eoreq	fp, r1, r1, lsr #24
    9628:	0fd80d00 	svceq	0x00d80d00
    962c:	00000059 	andeq	r0, r0, r9, asr r0
    9630:	00010201 	andeq	r0, r1, r1, lsl #4
    9634:	001f7721 	andseq	r7, pc, r1, lsr #14
    9638:	0fd90d00 	svceq	0x00d90d00
    963c:	00000059 	andeq	r0, r0, r9, asr r0
    9640:	00000101 	andeq	r0, r0, r1, lsl #2
    9644:	0d011b00 	vstreq	d1, [r1, #-0]
    9648:	b2040184 	andlt	r0, r4, #132, 2	; 0x21
    964c:	22000013 	andcs	r0, r0, #19
    9650:	0000275e 	andeq	r2, r0, lr, asr r7
    9654:	0f01850d 	svceq	0x0001850d
    9658:	00000059 	andeq	r0, r0, r9, asr r0
    965c:	00040401 	andeq	r0, r4, r1, lsl #8
    9660:	0020fc22 	eoreq	pc, r0, r2, lsr #24
    9664:	01860d00 	orreq	r0, r6, r0, lsl #26
    9668:	0000590f 	andeq	r5, r0, pc, lsl #18
    966c:	03010100 	movweq	r0, #4352	; 0x1100
    9670:	21bc2200 			; <UNDEFINED> instruction: 0x21bc2200
    9674:	880d0000 	stmdahi	sp, {}	; <UNPREDICTABLE>
    9678:	00590f01 	subseq	r0, r9, r1, lsl #30
    967c:	02010000 	andeq	r0, r1, #0
    9680:	77220001 	strvc	r0, [r2, -r1]!
    9684:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9688:	590f0189 	stmdbpl	pc, {r0, r3, r7, r8}	; <UNPREDICTABLE>
    968c:	01000000 	mrseq	r0, (UNDEF: 0)
    9690:	00000001 	andeq	r0, r0, r1
    9694:	8c0d011b 	stfhis	f0, [sp], {27}
    9698:	13df0401 	bicsne	r0, pc, #16777216	; 0x1000000
    969c:	d9220000 	stmdble	r2!, {}	; <UNPREDICTABLE>
    96a0:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    96a4:	590f018d 	stmdbpl	pc, {r0, r2, r3, r7, r8}	; <UNPREDICTABLE>
    96a8:	01000000 	mrseq	r0, (UNDEF: 0)
    96ac:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    96b0:	0000272d 	andeq	r2, r0, sp, lsr #14
    96b4:	0f018e0d 	svceq	0x00018e0d
    96b8:	00000059 	andeq	r0, r0, r9, asr r0
    96bc:	00000401 	andeq	r0, r0, r1, lsl #8
    96c0:	0d011b00 	vstreq	d1, [r1, #-0]
    96c4:	0c040190 	stfeqs	f0, [r4], {144}	; 0x90
    96c8:	22000014 	andcs	r0, r0, #20
    96cc:	00002313 	andeq	r2, r0, r3, lsl r3
    96d0:	0f01910d 	svceq	0x0001910d
    96d4:	00000059 	andeq	r0, r0, r9, asr r0
    96d8:	00070101 	andeq	r0, r7, r1, lsl #2
    96dc:	00240122 	eoreq	r0, r4, r2, lsr #2
    96e0:	01930d00 	orrseq	r0, r3, r0, lsl #26
    96e4:	0000590f 	andeq	r5, r0, pc, lsl #18
    96e8:	06010100 	streq	r0, [r1], -r0, lsl #2
    96ec:	011b0000 	tsteq	fp, r0
    96f0:	0401970d 	streq	r9, [r1], #-1805	; 0xfffff8f3
    96f4:	0000147d 	andeq	r1, r0, sp, ror r4
    96f8:	0020bb22 	eoreq	fp, r0, r2, lsr #22
    96fc:	01980d00 	orrseq	r0, r8, r0, lsl #26
    9700:	0000590f 	andeq	r5, r0, pc, lsl #18
    9704:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9708:	230a2200 	movwcs	r2, #41472	; 0xa200
    970c:	990d0000 	stmdbls	sp, {}	; <UNPREDICTABLE>
    9710:	00590f01 	subseq	r0, r9, r1, lsl #30
    9714:	01010000 	mrseq	r0, (UNDEF: 1)
    9718:	72220006 	eorvc	r0, r2, #6
    971c:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    9720:	590f019a 	stmdbpl	pc, {r1, r3, r4, r7, r8}	; <UNPREDICTABLE>
    9724:	01000000 	mrseq	r0, (UNDEF: 0)
    9728:	22000501 	andcs	r0, r0, #4194304	; 0x400000
    972c:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    9730:	0f019c0d 	svceq	0x00019c0d
    9734:	00000059 	andeq	r0, r0, r9, asr r0
    9738:	00040101 	andeq	r0, r4, r1, lsl #2
    973c:	00264022 	eoreq	r4, r6, r2, lsr #32
    9740:	019f0d00 	orrseq	r0, pc, r0, lsl #26
    9744:	0000590f 	andeq	r5, r0, pc, lsl #18
    9748:	03010100 	movweq	r0, #4352	; 0x1100
    974c:	23942200 	orrscs	r2, r4, #0, 4
    9750:	a10d0000 	mrsge	r0, (UNDEF: 13)
    9754:	00590f01 	subseq	r0, r9, r1, lsl #30
    9758:	01010000 	mrseq	r0, (UNDEF: 1)
    975c:	1b000002 	blne	976c <__exidx_end+0x3c90>
    9760:	01aa0d01 			; <UNDEFINED> instruction: 0x01aa0d01
    9764:	0014aa04 	andseq	sl, r4, r4, lsl #20
    9768:	21042200 	mrscs	r2, R12_usr
    976c:	ab0d0000 	blge	349774 <__ccfg+0x3297cc>
    9770:	00590f01 	subseq	r0, r9, r1, lsl #30
    9774:	04010000 	streq	r0, [r1], #-0
    9778:	e4220004 	strt	r0, [r2], #-4
    977c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9780:	590f01ad 	stmdbpl	pc, {r0, r2, r3, r5, r7, r8}	; <UNPREDICTABLE>
    9784:	01000000 	mrseq	r0, (UNDEF: 0)
    9788:	00000004 	andeq	r0, r0, r4
    978c:	b00d011b 	andlt	r0, sp, fp, lsl r1
    9790:	14f90401 	ldrbtne	r0, [r9], #1025	; 0x401
    9794:	5e220000 	cdppl	0, 2, cr0, cr2, cr0, {0}
    9798:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    979c:	590f01b1 	stmdbpl	pc, {r0, r4, r5, r7, r8}	; <UNPREDICTABLE>
    97a0:	01000000 	mrseq	r0, (UNDEF: 0)
    97a4:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    97a8:	000020fc 	strdeq	r2, [r0], -ip
    97ac:	0f01b20d 	svceq	0x0001b20d
    97b0:	00000059 	andeq	r0, r0, r9, asr r0
    97b4:	00030101 	andeq	r0, r3, r1, lsl #2
    97b8:	0021bc22 	eoreq	fp, r1, r2, lsr #24
    97bc:	01b40d00 			; <UNDEFINED> instruction: 0x01b40d00
    97c0:	0000590f 	andeq	r5, r0, pc, lsl #18
    97c4:	01020100 	mrseq	r0, (UNDEF: 18)
    97c8:	1f772200 	svcne	0x00772200
    97cc:	b50d0000 	strlt	r0, [sp, #-0]
    97d0:	00590f01 	subseq	r0, r9, r1, lsl #30
    97d4:	01010000 	mrseq	r0, (UNDEF: 1)
    97d8:	1b000000 	blne	97e0 <__exidx_end+0x3d04>
    97dc:	02220d01 	eoreq	r0, r2, #1, 26	; 0x40
    97e0:	00154804 	andseq	r4, r5, r4, lsl #16
    97e4:	275e2200 	ldrbcs	r2, [lr, -r0, lsl #4]
    97e8:	230d0000 	movwcs	r0, #53248	; 0xd000
    97ec:	00590f02 	subseq	r0, r9, r2, lsl #30
    97f0:	04010000 	streq	r0, [r1], #-0
    97f4:	fc220004 	stc2	0, cr0, [r2], #-16
    97f8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    97fc:	590f0224 	stmdbpl	pc, {r2, r5, r9}	; <UNPREDICTABLE>
    9800:	01000000 	mrseq	r0, (UNDEF: 0)
    9804:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    9808:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    980c:	0f02260d 	svceq	0x0002260d
    9810:	00000059 	andeq	r0, r0, r9, asr r0
    9814:	00010201 	andeq	r0, r1, r1, lsl #4
    9818:	001f7722 	andseq	r7, pc, r2, lsr #14
    981c:	02270d00 	eoreq	r0, r7, #0, 26
    9820:	0000590f 	andeq	r5, r0, pc, lsl #18
    9824:	00010100 	andeq	r0, r1, r0, lsl #2
    9828:	011b0000 	tsteq	fp, r0
    982c:	04022a0d 	streq	r2, [r2], #-2573	; 0xfffff5f3
    9830:	00001575 	andeq	r1, r0, r5, ror r5
    9834:	0025d922 	eoreq	sp, r5, r2, lsr #18
    9838:	022b0d00 	eoreq	r0, fp, #0, 26
    983c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9840:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    9844:	272d2200 	strcs	r2, [sp, -r0, lsl #4]!
    9848:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    984c:	00590f02 	subseq	r0, r9, r2, lsl #30
    9850:	04010000 	streq	r0, [r1], #-0
    9854:	1b000000 	blne	985c <__exidx_end+0x3d80>
    9858:	022e0d02 	eoreq	r0, lr, #2, 26	; 0x80
    985c:	0015a204 	andseq	sl, r5, r4, lsl #4
    9860:	22142200 	andscs	r2, r4, #0, 4
    9864:	2f0d0000 	svccs	0x000d0000
    9868:	006c1002 	rsbeq	r1, ip, r2
    986c:	03020000 	movweq	r0, #8192	; 0x2000
    9870:	1022000d 	eorne	r0, r2, sp
    9874:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9878:	6c100232 	lfmvs	f0, 4, [r0], {50}	; 0x32
    987c:	02000000 	andeq	r0, r0, #0
    9880:	0000000d 	andeq	r0, r0, sp
    9884:	340d041b 	strcc	r0, [sp], #-1051	; 0xfffffbe5
    9888:	15cf0402 	strbne	r0, [pc, #1026]	; 9c92 <__exidx_end+0x41b6>
    988c:	a9220000 	stmdbge	r2!, {}	; <UNPREDICTABLE>
    9890:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9894:	7f100235 	svcvc	0x00100235
    9898:	04000000 	streq	r0, [r0], #-0
    989c:	22001c04 	andcs	r1, r0, #4, 24	; 0x400
    98a0:	000024b9 			; <UNDEFINED> instruction: 0x000024b9
    98a4:	1002370d 	andne	r3, r2, sp, lsl #14
    98a8:	0000007f 	andeq	r0, r0, pc, ror r0
    98ac:	00031504 	andeq	r1, r3, r4, lsl #10
    98b0:	0d011b00 	vstreq	d1, [r1, #-0]
    98b4:	fc04023a 	stc2	2, cr0, [r4], {58}	; 0x3a
    98b8:	22000015 	andcs	r0, r0, #21
    98bc:	00002605 	andeq	r2, r0, r5, lsl #12
    98c0:	0f023b0d 	svceq	0x00023b0d
    98c4:	00000059 	andeq	r0, r0, r9, asr r0
    98c8:	00020601 	andeq	r0, r2, r1, lsl #12
    98cc:	001fcf22 	andseq	ip, pc, r2, lsr #30
    98d0:	023d0d00 	eorseq	r0, sp, #0, 26
    98d4:	0000590f 	andeq	r5, r0, pc, lsl #18
    98d8:	00020100 	andeq	r0, r2, r0, lsl #2
    98dc:	021b0000 	andseq	r0, fp, #0
    98e0:	0402420d 	streq	r4, [r2], #-525	; 0xfffffdf3
    98e4:	0000165c 	andeq	r1, r0, ip, asr r6
    98e8:	0023b222 	eoreq	fp, r3, r2, lsr #4
    98ec:	02430d00 	subeq	r0, r3, #0, 26
    98f0:	00006c10 	andeq	r6, r0, r0, lsl ip
    98f4:	0a060200 	beq	18a0fc <__ccfg+0x16a154>
    98f8:	224e2200 	subcs	r2, lr, #0, 4
    98fc:	440d0000 	strmi	r0, [sp], #-0
    9900:	006c1002 	rsbeq	r1, ip, r2
    9904:	01020000 	mrseq	r0, (UNDEF: 2)
    9908:	1a220009 	bne	889934 <__ccfg+0x86998c>
    990c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9910:	6c100246 	lfmvs	f0, 4, [r0], {70}	; 0x46
    9914:	02000000 	andeq	r0, r0, #0
    9918:	22000801 	andcs	r0, r0, #65536	; 0x10000
    991c:	00001fb7 			; <UNDEFINED> instruction: 0x00001fb7
    9920:	1002480d 	andne	r4, r2, sp, lsl #16
    9924:	0000006c 	andeq	r0, r0, ip, rrx
    9928:	00040402 	andeq	r0, r4, r2, lsl #8
    992c:	001f5a22 	andseq	r5, pc, r2, lsr #20
    9930:	024d0d00 	subeq	r0, sp, #0, 26
    9934:	00006c10 	andeq	r6, r0, r0, lsl ip
    9938:	00030200 	andeq	r0, r3, r0, lsl #4
    993c:	021b0000 	andseq	r0, fp, #0
    9940:	0402560d 	streq	r5, [r2], #-1549	; 0xfffff9f3
    9944:	000016ab 	andeq	r1, r0, fp, lsr #13
    9948:	0021af22 	eoreq	sl, r1, r2, lsr #30
    994c:	02570d00 	subseq	r0, r7, #0, 26
    9950:	00006c10 	andeq	r6, r0, r0, lsl ip
    9954:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    9958:	214e2200 	mrscs	r2, SPSR_fiq
    995c:	5d0d0000 	stcpl	0, cr0, [sp, #-0]
    9960:	006c1002 	rsbeq	r1, ip, r2
    9964:	01020000 	mrseq	r0, (UNDEF: 2)
    9968:	ee22000c 	cdp	0, 2, cr0, cr2, cr12, {0}
    996c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9970:	6c10025f 	lfmvs	f0, 4, [r0], {95}	; 0x5f
    9974:	02000000 	andeq	r0, r0, #0
    9978:	22000606 	andcs	r0, r0, #6291456	; 0x600000
    997c:	000023ed 	andeq	r2, r0, sp, ror #7
    9980:	1002660d 	andne	r6, r2, sp, lsl #12
    9984:	0000006c 	andeq	r0, r0, ip, rrx
    9988:	00050102 	andeq	r0, r5, r2, lsl #2
    998c:	25750200 	ldrbcs	r0, [r5, #-512]!	; 0xfffffe00
    9990:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    9994:	0016b734 	andseq	fp, r6, r4, lsr r7
    9998:	255e0f00 	ldrbcs	r0, [lr, #-3840]	; 0xfffff100
    999c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    99a0:	1706155e 	smlsdne	r6, lr, r5, r1
    99a4:	250d0000 	strcs	r0, [sp, #-0]
    99a8:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    99ac:	09840d5f 	stmibeq	r4, {r0, r1, r2, r3, r4, r6, r8, sl, fp}
    99b0:	0d000000 	stceq	0, cr0, [r0, #-0]
    99b4:	0000077b 	andeq	r0, r0, fp, ror r7
    99b8:	590c600e 	stmdbpl	ip, {r1, r2, r3, sp, lr}
    99bc:	04000000 	streq	r0, [r0], #-0
    99c0:	0014720d 	andseq	r7, r4, sp, lsl #4
    99c4:	066e0e00 	strbteq	r0, [lr], -r0, lsl #28
    99c8:	00001706 	andeq	r1, r0, r6, lsl #14
    99cc:	18e80d05 	stmiane	r8!, {r0, r2, r8, sl, fp}^
    99d0:	6f0e0000 	svcvs	0x000e0000
    99d4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    99d8:	440d0600 	strmi	r0, [sp], #-1536	; 0xfffffa00
    99dc:	0e000047 	cdpeq	0, 0, cr0, cr0, cr7, {2}
    99e0:	00590c71 	subseq	r0, r9, r1, ror ip
    99e4:	00080000 	andeq	r0, r8, r0
    99e8:	610e010c 	tstvs	lr, ip, lsl #2
    99ec:	00174004 	andseq	r4, r7, r4
    99f0:	53562100 	cmppl	r6, #0, 2
    99f4:	620e0000 	andvs	r0, lr, #0
    99f8:	0000590f 	andeq	r5, r0, pc, lsl #18
    99fc:	06020100 	streq	r0, [r2], -r0, lsl #2
    9a00:	25362100 	ldrcs	r2, [r6, #-256]!	; 0xffffff00
    9a04:	670e0000 	strvs	r0, [lr, -r0]
    9a08:	0000590f 	andeq	r5, r0, pc, lsl #18
    9a0c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    9a10:	1fee2100 	svcne	0x00ee2100
    9a14:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    9a18:	0000590f 	andeq	r5, r0, pc, lsl #18
    9a1c:	00040100 	andeq	r0, r4, r0, lsl #2
    9a20:	100c0000 	andne	r0, ip, r0
    9a24:	7e094802 	cdpvc	8, 0, cr4, cr9, cr2, {0}
    9a28:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    9a2c:	00002174 	andeq	r2, r0, r4, ror r1
    9a30:	7f0d4902 	svcvc	0x000d4902
    9a34:	00000000 	andeq	r0, r0, r0
    9a38:	0020d50d 	eoreq	sp, r0, sp, lsl #10
    9a3c:	0d4a0200 	sfmeq	f0, 2, [sl, #-0]
    9a40:	0000007f 	andeq	r0, r0, pc, ror r0
    9a44:	25200d04 	strcs	r0, [r0, #-3332]!	; 0xfffff2fc
    9a48:	4b020000 	blmi	89a50 <__ccfg+0x69aa8>
    9a4c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9a50:	730d0800 	movwvc	r0, #55296	; 0xd800
    9a54:	02000026 	andeq	r0, r0, #38	; 0x26
    9a58:	007f0d4c 	rsbseq	r0, pc, ip, asr #26
    9a5c:	000c0000 	andeq	r0, ip, r0
    9a60:	001f8002 	andseq	r8, pc, r2
    9a64:	034d0200 	movteq	r0, #53760	; 0xd200
    9a68:	00001740 	andeq	r1, r0, r0, asr #14
    9a6c:	00008b0a 	andeq	r8, r0, sl, lsl #22
    9a70:	00179a00 	andseq	r9, r7, r0, lsl #20
    9a74:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9a78:	00a20000 	adceq	r0, r2, r0
    9a7c:	00178a04 	andseq	r8, r7, r4, lsl #20
    9a80:	22b82300 	adcscs	r2, r8, #0, 6
    9a84:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    9a88:	00179a10 	andseq	r9, r7, r0, lsl sl
    9a8c:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    9a90:	0a000058 	beq	9bf8 <__exidx_end+0x411c>
    9a94:	0000008b 	andeq	r0, r0, fp, lsl #1
    9a98:	000017c2 	andeq	r1, r0, r2, asr #15
    9a9c:	0000aa24 	andeq	sl, r0, r4, lsr #20
    9aa0:	0001ac00 	andeq	sl, r1, r0, lsl #24
    9aa4:	0017b104 	andseq	fp, r7, r4, lsl #2
    9aa8:	23412300 	movtcs	r2, #4864	; 0x1300
    9aac:	3a050000 	bcc	149ab4 <__ccfg+0x129b0c>
    9ab0:	0017c210 	andseq	ip, r7, r0, lsl r2
    9ab4:	58030500 	stmdapl	r3, {r8, sl}
    9ab8:	02000051 	andeq	r0, r0, #81	; 0x51
    9abc:	000028f0 	strdeq	r2, [r0], -r0
    9ac0:	6c12270f 	ldcvs	7, cr2, [r2], {15}
    9ac4:	04000000 	streq	r0, [r0], #-0
    9ac8:	000017d9 	ldrdeq	r1, [r0], -r9
    9acc:	0017d905 	andseq	sp, r7, r5, lsl #18
    9ad0:	1db70200 	lfmne	f0, 4, [r7]
    9ad4:	2b0f0000 	blcs	3c9adc <__ccfg+0x3a9b34>
    9ad8:	00005912 	andeq	r5, r0, r2, lsl r9
    9adc:	17ef0500 	strbne	r0, [pc, r0, lsl #10]!
    9ae0:	42020000 	andmi	r0, r2, #0
    9ae4:	0f000029 	svceq	0x00000029
    9ae8:	007f122c 	rsbseq	r1, pc, ip, lsr #4
    9aec:	00040000 	andeq	r0, r4, r0
    9af0:	02000018 	andeq	r0, r0, #24
    9af4:	00000649 	andeq	r0, r0, r9, asr #12
    9af8:	7f122d0f 	svcvc	0x00122d0f
    9afc:	02000000 	andeq	r0, r0, #0
    9b00:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    9b04:	29102e0f 	ldmdbcs	r0, {r0, r1, r2, r3, r9, sl, fp, sp}
    9b08:	11000018 	tstne	r0, r8, lsl r0
    9b0c:	0017d904 	andseq	sp, r7, r4, lsl #18
    9b10:	0f080c00 	svceq	0x00080c00
    9b14:	18bd0932 	popne	{r1, r4, r5, r8, fp}
    9b18:	2b210000 	blcs	849b20 <__ccfg+0x829b78>
    9b1c:	0f000000 	svceq	0x00000000
    9b20:	17ef0734 			; <UNDEFINED> instruction: 0x17ef0734
    9b24:	01010000 	mrseq	r0, (UNDEF: 1)
    9b28:	4f210007 	svcmi	0x00210007
    9b2c:	0f000006 	svceq	0x00000006
    9b30:	17ef0335 			; <UNDEFINED> instruction: 0x17ef0335
    9b34:	01010000 	mrseq	r0, (UNDEF: 1)
    9b38:	de210006 	cdple	0, 2, cr0, cr1, cr6, {0}
    9b3c:	0f000002 	svceq	0x00000002
    9b40:	17ef0336 			; <UNDEFINED> instruction: 0x17ef0336
    9b44:	01010000 	mrseq	r0, (UNDEF: 1)
    9b48:	ba210005 	blt	849b64 <__ccfg+0x829bbc>
    9b4c:	0f000006 	svceq	0x00000006
    9b50:	17ef0337 			; <UNDEFINED> instruction: 0x17ef0337
    9b54:	01010000 	mrseq	r0, (UNDEF: 1)
    9b58:	a2210004 	eorge	r0, r1, #4
    9b5c:	0f00000a 	svceq	0x0000000a
    9b60:	17ef0338 			; <UNDEFINED> instruction: 0x17ef0338
    9b64:	04010000 	streq	r0, [r1], #-0
    9b68:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    9b6c:	0f000006 	svceq	0x00000006
    9b70:	17ef073a 			; <UNDEFINED> instruction: 0x17ef073a
    9b74:	0d010000 	stceq	0, cr0, [r1, #-0]
    9b78:	000008fe 	strdeq	r0, [r0], -lr
    9b7c:	ef033c0f 	svc	0x00033c0f
    9b80:	02000017 	andeq	r0, r0, #23
    9b84:	000f2f0d 	andeq	r2, pc, sp, lsl #30
    9b88:	033d0f00 	teqeq	sp, #0, 30
    9b8c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b90:	09160d03 	ldmdbeq	r6, {r0, r1, r8, sl, fp}
    9b94:	3f0f0000 	svccc	0x000f0000
    9b98:	00180008 	andseq	r0, r8, r8
    9b9c:	02000400 	andeq	r0, r0, #0, 8
    9ba0:	00000314 	andeq	r0, r0, r4, lsl r3
    9ba4:	2f03410f 	svccs	0x0003410f
    9ba8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9bac:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    9bb0:	0006c125 	andeq	ip, r6, r5, lsr #2
    9bb4:	1a430f00 	bne	10cd7bc <__ccfg+0x10ad814>
    9bb8:	000018c9 	andeq	r1, r0, r9, asr #17
    9bbc:	97250101 	strls	r0, [r5, -r1, lsl #2]!
    9bc0:	0f000001 	svceq	0x00000001
    9bc4:	05eb0e45 	strbeq	r0, [fp, #3653]!	; 0xe45
    9bc8:	01010000 	mrseq	r0, (UNDEF: 1)
    9bcc:	00031d25 	andeq	r1, r3, r5, lsr #26
    9bd0:	1e450f00 	cdpne	15, 4, cr0, cr5, cr0, {0}
    9bd4:	000005eb 	andeq	r0, r0, fp, ror #11
    9bd8:	080c0101 	stmdaeq	ip, {r0, r8}
    9bdc:	29098f10 	stmdbcs	r9, {r4, r8, r9, sl, fp, pc}
    9be0:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    9be4:	00000ccd 	andeq	r0, r0, sp, asr #25
    9be8:	7f0b9010 	svcvc	0x000b9010
    9bec:	00000000 	andeq	r0, r0, r0
    9bf0:	00106a0d 	andseq	r6, r0, sp, lsl #20
    9bf4:	08911000 	ldmeq	r1, {ip}
    9bf8:	000017d9 	ldrdeq	r1, [r0], -r9
    9bfc:	01bc0d04 			; <UNDEFINED> instruction: 0x01bc0d04
    9c00:	92100000 	andsls	r0, r0, #0
    9c04:	0017fb10 	andseq	pc, r7, r0, lsl fp	; <UNPREDICTABLE>
    9c08:	02000600 	andeq	r0, r0, #0, 12
    9c0c:	00000cc1 	andeq	r0, r0, r1, asr #25
    9c10:	f8039310 			; <UNDEFINED> instruction: 0xf8039310
    9c14:	0a000018 	beq	9c7c <__exidx_end+0x41a0>
    9c18:	00001929 	andeq	r1, r0, r9, lsr #18
    9c1c:	00001940 	andeq	r1, r0, r0, asr #18
    9c20:	40250026 	eormi	r0, r5, r6, lsr #32
    9c24:	10000009 	andne	r0, r0, r9
    9c28:	19350f99 	ldmdbne	r5!, {r0, r3, r4, r7, r8, r9, sl, fp}
    9c2c:	01010000 	mrseq	r0, (UNDEF: 1)
    9c30:	9111010c 	tstls	r1, ip, lsl #2
    9c34:	00197809 	andseq	r7, r9, r9, lsl #16
    9c38:	091d2100 	ldmdbeq	sp, {r8, sp}
    9c3c:	93110000 	tstls	r1, #0
    9c40:	0017ef07 	andseq	lr, r7, r7, lsl #30
    9c44:	01070100 	mrseq	r0, (UNDEF: 23)
    9c48:	05cf2100 	strbeq	r2, [pc, #256]	; 9d50 <__exidx_end+0x4274>
    9c4c:	94110000 	ldrls	r0, [r1], #-0
    9c50:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9c54:	00010100 	andeq	r0, r1, r0, lsl #2
    9c58:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    9c5c:	1100000a 	tstne	r0, sl
    9c60:	194e0396 	stmdbne	lr, {r1, r2, r4, r7, r8, r9}^
    9c64:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    9c68:	0a000019 	beq	9cd4 <__exidx_end+0x41f8>
    9c6c:	00001984 	andeq	r1, r0, r4, lsl #19
    9c70:	00001994 	muleq	r0, r4, r9
    9c74:	89040026 	stmdbhi	r4, {r1, r2, r5}
    9c78:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    9c7c:	000003ac 	andeq	r0, r0, ip, lsr #7
    9c80:	94179c11 	ldrls	r9, [r7], #-3089	; 0xfffff3ef
    9c84:	01000019 	tsteq	r0, r9, lsl r0
    9c88:	17e50a01 	strbne	r0, [r5, r1, lsl #20]!
    9c8c:	19b20000 	ldmibne	r2!, {}	; <UNPREDICTABLE>
    9c90:	00260000 	eoreq	r0, r6, r0
    9c94:	0019a704 	andseq	sl, r9, r4, lsl #14
    9c98:	06112500 	ldreq	r2, [r1], -r0, lsl #10
    9c9c:	06120000 	ldreq	r0, [r2], -r0
    9ca0:	0019b213 	andseq	fp, r9, r3, lsl r2
    9ca4:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9ca8:	000008e0 	andeq	r0, r0, r0, ror #17
    9cac:	000ec310 	andeq	ip, lr, r0, lsl r3
    9cb0:	01000018 	tsteq	r0, r8, lsl r0
    9cb4:	0c750701 	ldcleq	7, cr0, [r5], #-4
    9cb8:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
    9cbc:	19e01001 	stmibne	r0!, {r0, ip}^
    9cc0:	04110000 	ldreq	r0, [r1], #-0
    9cc4:	000019e6 	andeq	r1, r0, r6, ror #19
    9cc8:	19f2011f 	ldmibne	r2!, {r0, r1, r2, r3, r4, r8}^
    9ccc:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    9cd0:	00000017 	andeq	r0, r0, r7, lsl r0
    9cd4:	0005f80a 	andeq	pc, r5, sl, lsl #16
    9cd8:	0019fd00 	andseq	pc, r9, r0, lsl #26
    9cdc:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    9ce0:	000019f2 	strdeq	r1, [r0], -r2
    9ce4:	0009e920 	andeq	lr, r9, r0, lsr #18
    9ce8:	017f1300 	cmneq	pc, r0, lsl #6
    9cec:	0019fd16 	andseq	pc, r9, r6, lsl sp	; <UNPREDICTABLE>
    9cf0:	20010100 	andcs	r0, r1, r0, lsl #2
    9cf4:	00000398 	muleq	r0, r8, r3
    9cf8:	14018213 	strne	r8, [r1], #-531	; 0xfffffded
    9cfc:	0000180c 	andeq	r1, r0, ip, lsl #16
    9d00:	70200101 	eorvc	r0, r0, r1, lsl #2
    9d04:	13000003 	movwne	r0, #3
    9d08:	000e02d8 	ldrdeq	r0, [lr], -r8
    9d0c:	01000018 	tsteq	r0, r8, lsl r0
    9d10:	13081b01 	movwne	r1, #35585	; 0x8b01
    9d14:	56090303 	strpl	r0, [r9], -r3, lsl #6
    9d18:	1800001a 	stmdane	r0, {r1, r3, r4}
    9d1c:	00003c91 	muleq	r0, r1, ip
    9d20:	07030713 	smladeq	r3, r3, r7, r0
    9d24:	000017d9 	ldrdeq	r1, [r0], -r9
    9d28:	0fc21800 	svceq	0x00c21800
    9d2c:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    9d30:	18110803 	ldmdane	r1, {r0, r1, fp}
    9d34:	00040000 	andeq	r0, r4, r0
    9d38:	000a0c07 	andeq	r0, sl, r7, lsl #24
    9d3c:	03091300 	movweq	r1, #37632	; 0x9300
    9d40:	001a2f03 	andseq	r2, sl, r3, lsl #30
    9d44:	00201a00 	eoreq	r1, r0, r0, lsl #20
    9d48:	13300000 	teqne	r0, #0
    9d4c:	c608030b 	strgt	r0, [r8], -fp, lsl #6
    9d50:	1800001a 	stmdane	r0, {r1, r3, r4}
    9d54:	00001f19 	andeq	r1, r0, r9, lsl pc
    9d58:	08031413 	stmdaeq	r3, {r0, r1, r4, sl, ip}
    9d5c:	000017d9 	ldrdeq	r1, [r0], -r9
    9d60:	0bea1800 	bleq	ffa8fd68 <_estack+0xdfa8ad68>
    9d64:	15130000 	ldrne	r0, [r3, #-0]
    9d68:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    9d6c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    9d70:	00004c7e 	andeq	r4, r0, lr, ror ip
    9d74:	0b031613 	bleq	cf5c8 <__ccfg+0xaf620>
    9d78:	000019d3 	ldrdeq	r1, [r0], -r3
    9d7c:	47441804 	strbmi	r1, [r4, -r4, lsl #16]
    9d80:	17130000 	ldrne	r0, [r3, -r0]
    9d84:	18110903 	ldmdane	r1, {r0, r1, r8, fp}
    9d88:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    9d8c:	0000000f 	andeq	r0, r0, pc
    9d90:	0f031813 	svceq	0x00031813
    9d94:	00001ac6 	andeq	r1, r0, r6, asr #21
    9d98:	0960180c 	stmdbeq	r0!, {r2, r3, fp, ip}^
    9d9c:	19130000 	ldmdbne	r3, {}	; <UNPREDICTABLE>
    9da0:	1ad61503 	bne	ff58f1b4 <_estack+0xdf58a1b4>
    9da4:	002c0000 	eoreq	r0, ip, r0
    9da8:	001a560a 	andseq	r5, sl, sl, lsl #12
    9dac:	001ad600 	andseq	sp, sl, r0, lsl #12
    9db0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9db4:	00030000 	andeq	r0, r3, r0
    9db8:	1a630411 	bne	18cae04 <__ccfg+0x18aae5c>
    9dbc:	df070000 	svcle	0x00070000
    9dc0:	1300000b 	movwne	r0, #11
    9dc4:	631b031c 	tstvs	fp, #28, 6	; 0x70000000
    9dc8:	2000001a 	andcs	r0, r0, sl, lsl r0
    9dcc:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    9dd0:	14031e13 	strne	r1, [r3], #-3603	; 0xfffff1ed
    9dd4:	00001af8 	strdeq	r1, [r0], -r8
    9dd8:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
    9ddc:	00001adc 	ldrdeq	r1, [r0], -ip
    9de0:	00071225 	andeq	r1, r7, r5, lsr #4
    9de4:	131d1400 	tstne	sp, #0, 8
    9de8:	000017d9 	ldrdeq	r1, [r0], -r9
    9dec:	e5250101 	str	r0, [r5, #-257]!	; 0xfffffeff
    9df0:	14000002 	strne	r0, [r0], #-2
    9df4:	17ea1a1e 			; <UNDEFINED> instruction: 0x17ea1a1e
    9df8:	01010000 	mrseq	r0, (UNDEF: 1)
    9dfc:	000c6c25 	andeq	r6, ip, r5, lsr #24
    9e00:	241e1400 	ldrcs	r1, [lr], #-1024	; 0xfffffc00
    9e04:	000017ea 	andeq	r1, r0, sl, ror #15
    9e08:	8a250101 	bhi	94a214 <__ccfg+0x92a26c>
    9e0c:	1400000c 	strne	r0, [r0], #-12
    9e10:	1af81422 	bne	ffe0eea0 <_estack+0xdfe09ea0>
    9e14:	01010000 	mrseq	r0, (UNDEF: 1)
    9e18:	00203025 	eoreq	r3, r0, r5, lsr #32
    9e1c:	27391500 	ldrcs	r1, [r9, -r0, lsl #10]!
    9e20:	00000f6d 	andeq	r0, r0, sp, ror #30
    9e24:	1e250101 	sufnes	f0, f5, f1
    9e28:	15000023 	strne	r0, [r0, #-35]	; 0xffffffdd
    9e2c:	09fe153a 	ldmibeq	lr!, {r1, r3, r4, r5, r8, sl, ip}^
    9e30:	01010000 	mrseq	r0, (UNDEF: 1)
    9e34:	00273a25 	eoreq	r3, r7, r5, lsr #20
    9e38:	1a3b1500 	bne	ecf240 <__ccfg+0xeaf298>
    9e3c:	00000cec 	andeq	r0, r0, ip, ror #25
    9e40:	de250101 	sufles	f0, f5, f1
    9e44:	15000025 	strne	r0, [r0, #-37]	; 0xffffffdb
    9e48:	0d881a3c 	vstreq	s2, [r8, #240]	; 0xf0
    9e4c:	01010000 	mrseq	r0, (UNDEF: 1)
    9e50:	0026db23 	eoreq	sp, r6, r3, lsr #22
    9e54:	0c240100 	stfeqs	f0, [r4], #-0
    9e58:	000000a3 	andeq	r0, r0, r3, lsr #1
    9e5c:	06000305 	streq	r0, [r0], -r5, lsl #6
    9e60:	89232000 	stmdbhi	r3!, {sp}
    9e64:	0100001f 	tsteq	r0, pc, lsl r0
    9e68:	17ef0d26 	strbne	r0, [pc, r6, lsr #26]!
    9e6c:	03050000 	movweq	r0, #20480	; 0x5000
    9e70:	2000060c 	andcs	r0, r0, ip, lsl #12
    9e74:	0015f823 	andseq	pc, r5, r3, lsr #16
    9e78:	03270100 			; <UNDEFINED> instruction: 0x03270100
    9e7c:	000017ef 	andeq	r1, r0, pc, ror #15
    9e80:	05fc0305 	ldrbeq	r0, [ip, #773]!	; 0x305
    9e84:	12232000 	eorne	r2, r3, #0
    9e88:	01000024 	tsteq	r0, r4, lsr #32
    9e8c:	17ef0d2a 	strbne	r0, [pc, sl, lsr #26]!
    9e90:	03050000 	movweq	r0, #20480	; 0x5000
    9e94:	2000062e 	andcs	r0, r0, lr, lsr #12
    9e98:	00240c23 	eoreq	r0, r4, r3, lsr #24
    9e9c:	0d430100 	stfeqe	f0, [r3, #-0]
    9ea0:	000017ef 	andeq	r1, r0, pc, ror #15
    9ea4:	003a0305 	eorseq	r0, sl, r5, lsl #6
    9ea8:	a9232000 	stmdbge	r3!, {sp}
    9eac:	01000020 	tsteq	r0, r0, lsr #32
    9eb0:	17ef0d47 	strbne	r0, [pc, r7, asr #26]!
    9eb4:	03050000 	movweq	r0, #20480	; 0x5000
    9eb8:	200005f4 	strdcs	r0, [r0], -r4
    9ebc:	0017e50a 	andseq	lr, r7, sl, lsl #10
    9ec0:	001bea00 	andseq	lr, fp, r0, lsl #20
    9ec4:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9ec8:	00070000 	andeq	r0, r7, r0
    9ecc:	001bda04 	andseq	sp, fp, r4, lsl #20
    9ed0:	249a2300 	ldrcs	r2, [sl], #768	; 0x300
    9ed4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    9ed8:	001bea13 	andseq	lr, fp, r3, lsl sl
    9edc:	46030500 	strmi	r0, [r3], -r0, lsl #10
    9ee0:	23000051 	movwcs	r0, #81	; 0x51
    9ee4:	00002733 	andeq	r2, r0, r3, lsr r7
    9ee8:	d90d5201 	stmdble	sp, {r0, r9, ip, lr}
    9eec:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9ef0:	00060403 	andeq	r0, r6, r3, lsl #8
    9ef4:	23cb2320 	biccs	r2, fp, #32, 6	; 0x80000000
    9ef8:	53010000 	movwpl	r0, #4096	; 0x1000
    9efc:	0017d903 	andseq	sp, r7, r3, lsl #18
    9f00:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    9f04:	23200006 			; <UNDEFINED> instruction: 0x23200006
    9f08:	00002611 	andeq	r2, r0, r1, lsl r6
    9f0c:	d9035401 	stmdble	r3, {r0, sl, ip, lr}
    9f10:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9f14:	0005f203 	andeq	pc, r5, r3, lsl #4
    9f18:	1fc62320 	svcne	0x00c62320
    9f1c:	55010000 	strpl	r0, [r1, #-0]
    9f20:	0017d903 	andseq	sp, r7, r3, lsl #18
    9f24:	38030500 	stmdacc	r3, {r8, sl}
    9f28:	0c200000 	stceq	0, cr0, [r0], #-0
    9f2c:	09590104 	ldmdbeq	r9, {r2, r8}^
    9f30:	00001c6b 	andeq	r1, r0, fp, ror #24
    9f34:	00737010 	rsbseq	r7, r3, r0, lsl r0
    9f38:	d9085a01 	stmdble	r8, {r0, r9, fp, ip, lr}
    9f3c:	00000017 	andeq	r0, r0, r7, lsl r0
    9f40:	00777210 	rsbseq	r7, r7, r0, lsl r2
    9f44:	d9045b01 	stmdble	r4, {r0, r8, r9, fp, ip, lr}
    9f48:	02000017 	andeq	r0, r0, #23
    9f4c:	235a0200 	cmpcs	sl, #0, 4
    9f50:	5c010000 	stcpl	0, cr0, [r1], {-0}
    9f54:	001c4903 	andseq	r4, ip, r3, lsl #18
    9f58:	1c6b0400 	cfstrdne	mvd0, [fp], #-0
    9f5c:	770a0000 	strvc	r0, [sl, -r0]
    9f60:	8c00001c 	stchi	0, cr0, [r0], {28}
    9f64:	0b00001c 	bleq	9fdc <__exidx_end+0x4500>
    9f68:	000000aa 	andeq	r0, r0, sl, lsr #1
    9f6c:	7c040002 	stcvc	0, cr0, [r4], {2}
    9f70:	2300001c 	movwcs	r0, #28
    9f74:	0000238c 	andeq	r2, r0, ip, lsl #7
    9f78:	8c185e01 	ldchi	14, cr5, [r8], {1}
    9f7c:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    9f80:	005a9803 	subseq	r9, sl, r3, lsl #16
    9f84:	24c22300 	strbcs	r2, [r2], #768	; 0x300
    9f88:	66010000 	strvs	r0, [r1], -r0
    9f8c:	0010761b 	andseq	r7, r0, fp, lsl r6
    9f90:	20030500 	andcs	r0, r3, r0, lsl #10
    9f94:	23200006 			; <UNDEFINED> instruction: 0x23200006
    9f98:	000025fd 	strdeq	r2, [r0], -sp
    9f9c:	110e6901 	tstne	lr, r1, lsl #18
    9fa0:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9fa4:	0005f803 	andeq	pc, r5, r3, lsl #16
    9fa8:	20482320 	subcs	r2, r8, r0, lsr #6
    9fac:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    9fb0:	00181117 	andseq	r1, r8, r7, lsl r1
    9fb4:	08030500 	stmdaeq	r3, {r8, sl}
    9fb8:	23200006 			; <UNDEFINED> instruction: 0x23200006
    9fbc:	00002664 	andeq	r2, r0, r4, ror #12
    9fc0:	c1217801 			; <UNDEFINED> instruction: 0xc1217801
    9fc4:	0500000a 	streq	r0, [r0, #-10]
    9fc8:	00002403 	andeq	r2, r0, r3, lsl #8
    9fcc:	21d52320 	bicscs	r2, r5, r0, lsr #6
    9fd0:	83010000 	movwhi	r0, #4096	; 0x1000
    9fd4:	000e721a 	andeq	r7, lr, sl, lsl r2
    9fd8:	08030500 	stmdaeq	r3, {r8, sl}
    9fdc:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9fe0:	00001f26 	andeq	r1, r0, r6, lsr #30
    9fe4:	7e11c101 	mnfvcs	f4, f1
    9fe8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9fec:	00061003 	andeq	r1, r6, r3
    9ff0:	252c2720 	strcs	r2, [ip, #-1824]!	; 0xfffff8e0
    9ff4:	0a010000 	beq	49ffc <__ccfg+0x2a054>
    9ff8:	00a30c02 	adceq	r0, r3, r2, lsl #24
    9ffc:	01280000 			; <UNDEFINED> instruction: 0x01280000
    a000:	00002057 	andeq	r2, r0, r7, asr r0
    a004:	0603d701 	streq	sp, [r3], -r1, lsl #14
    a008:	002ec401 	eoreq	ip, lr, r1, lsl #8
    a00c:	00303800 	eorseq	r3, r0, r0, lsl #16
    a010:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    a014:	2900001d 	stmdbcs	r0, {r0, r2, r3, r4}
    a018:	00796870 	rsbseq	r6, r9, r0, ror r8
    a01c:	1703d701 	strne	sp, [r3, -r1, lsl #14]
    a020:	000000a3 	andeq	r0, r0, r3, lsr #1
    a024:	00002814 	andeq	r2, r0, r4, lsl r8
    a028:	73626d29 	cmnvc	r2, #2624	; 0xa40
    a02c:	03d70100 	bicseq	r0, r7, #0, 2
    a030:	0000a320 	andeq	sl, r0, r0, lsr #6
    a034:	00285e00 	eoreq	r5, r8, r0, lsl #28
    a038:	1e352a00 	vaddne.f32	s4, s10, s0
    a03c:	2ee80000 	cdpcs	0, 14, cr0, cr8, cr0, {0}
    a040:	0e900000 	cdpeq	0, 9, cr0, cr0, cr0, {0}
    a044:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    a048:	1d930203 	lfmne	f0, 4, [r3, #12]
    a04c:	902b0000 	eorls	r0, fp, r0
    a050:	2c00000e 	stccs	0, cr0, [r0], {14}
    a054:	00001e43 	andeq	r1, r0, r3, asr #28
    a058:	001e4e2d 	andseq	r4, lr, sp, lsr #28
    a05c:	00288700 	eoreq	r8, r8, r0, lsl #14
    a060:	1e5a2d00 	cdpne	13, 5, cr2, cr10, cr0, {0}
    a064:	28a60000 	stmiacs	r6!, {}	; <UNPREDICTABLE>
    a068:	662d0000 	strtvs	r0, [sp], -r0
    a06c:	cf00001e 	svcgt	0x0000001e
    a070:	00000028 	andeq	r0, r0, r8, lsr #32
    a074:	1fcc2e00 	svcne	0x00cc2e00
    a078:	2f9e0000 	svccs	0x009e0000
    a07c:	0ed00000 	cdpeq	0, 13, cr0, cr0, cr0, {0}
    a080:	14010000 	strne	r0, [r1], #-0
    a084:	2f000204 	svccs	0x00000204
    a088:	0000233a 	andeq	r2, r0, sl, lsr r3
    a08c:	0c034a01 			; <UNDEFINED> instruction: 0x0c034a01
    a090:	0000a301 	andeq	sl, r0, r1, lsl #6
    a094:	00278400 	eoreq	r8, r7, r0, lsl #8
    a098:	00291400 	eoreq	r1, r9, r0, lsl #8
    a09c:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    a0a0:	2900001e 	stmdbcs	r0, {r1, r2, r3, r4}
    a0a4:	0074706f 	rsbseq	r7, r4, pc, rrx
    a0a8:	18034a01 	stmdane	r3, {r0, r9, fp, lr}
    a0ac:	000000a3 	andeq	r0, r0, r3, lsr #1
    a0b0:	00002903 	andeq	r2, r0, r3, lsl #18
    a0b4:	6c617629 	stclvs	6, cr7, [r1], #-164	; 0xffffff5c
    a0b8:	034a0100 	movteq	r0, #41216	; 0xa100
    a0bc:	00181d25 	andseq	r1, r8, r5, lsr #26
    a0c0:	00298f00 	eoreq	r8, r9, r0, lsl #30
    a0c4:	65723000 	ldrbvs	r3, [r2, #-0]!
    a0c8:	4c010074 	stcmi	0, cr0, [r1], {116}	; 0x74
    a0cc:	00a30603 	adceq	r0, r3, r3, lsl #12
    a0d0:	2a470000 	bcs	11ca0d8 <__ccfg+0x11aa130>
    a0d4:	f0310000 			; <UNDEFINED> instruction: 0xf0310000
    a0d8:	01000021 	tsteq	r0, r1, lsr #32
    a0dc:	0c0103cf 	stceq	3, cr0, [r1], {207}	; 0xcf
    a0e0:	31000028 	tstcc	r0, r8, lsr #32
    a0e4:	000023fa 	strdeq	r2, [r0], -sl
    a0e8:	01035801 	tsteq	r3, r1, lsl #16
    a0ec:	000027c6 	andeq	r2, r0, r6, asr #15
    a0f0:	0025a631 	eoreq	sl, r5, r1, lsr r6
    a0f4:	03cd0100 	biceq	r0, sp, #0, 2
    a0f8:	00281001 	eoreq	r1, r8, r1
    a0fc:	27c63200 	strbcs	r3, [r6, r0, lsl #4]
    a100:	27f00000 	ldrbcs	r0, [r0, r0]!
    a104:	6a300000 	bvs	c0a10c <__ccfg+0xbea164>
    a108:	03590100 	cmpeq	r9, #0, 2
    a10c:	0000a304 	andeq	sl, r0, r4, lsl #6
    a110:	002a9100 	eoreq	r9, sl, r0, lsl #2
    a114:	33000000 	movwcc	r0, #0
    a118:	0000226f 	andeq	r2, r0, pc, ror #4
    a11c:	0d030701 	stceq	7, cr0, [r3, #-4]
    a120:	001e7301 	andseq	r7, lr, r1, lsl #6
    a124:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a128:	06030b01 	streq	r0, [r3], -r1, lsl #22
    a12c:	000000a3 	andeq	r0, r0, r3, lsr #1
    a130:	00657234 	rsbeq	r7, r5, r4, lsr r2
    a134:	1a030c01 	bne	cd140 <__ccfg+0xad198>
    a138:	00001e73 	andeq	r1, r0, r3, ror lr
    a13c:	00616434 	rsbeq	r6, r1, r4, lsr r4
    a140:	1f030c01 	svcne	0x00030c01
    a144:	00001e73 	andeq	r1, r0, r3, ror lr
    a148:	00626434 	rsbeq	r6, r2, r4, lsr r4
    a14c:	24030c01 	strcs	r0, [r3], #-3073	; 0xfffff3ff
    a150:	00001e73 	andeq	r1, r0, r3, ror lr
    a154:	ab041100 	blge	10e55c <__ccfg+0xee5b4>
    a158:	28000016 	stmdacs	r0, {r1, r2, r4}
    a15c:	00206301 	eoreq	r6, r0, r1, lsl #6
    a160:	020d0100 	andeq	r0, sp, #0, 2
    a164:	2c640101 	stfcse	f0, [r4], #-4
    a168:	2e540000 	cdpcs	0, 5, cr0, cr4, cr0, {0}
    a16c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a170:	00001efd 	strdeq	r1, [r0], -sp
    a174:	000c3635 	andeq	r3, ip, r5, lsr r6
    a178:	020d0100 	andeq	r0, sp, #0, 2
    a17c:	0017d901 	andseq	sp, r7, r1, lsl #18
    a180:	002aa400 	eoreq	sl, sl, r0, lsl #8
    a184:	1f903100 	svcne	0x00903100
    a188:	16010000 	strne	r0, [r1], -r0
    a18c:	2c780102 	ldfcse	f0, [r8], #-8
    a190:	232e0000 			; <UNDEFINED> instruction: 0x232e0000
    a194:	da000020 	ble	a21c <__exidx_end+0x4740>
    a198:	3000002c 	andcc	r0, r0, ip, lsr #32
    a19c:	0100000e 	tsteq	r0, lr
    a1a0:	2a040225 	bcs	10aa3c <__ccfg+0xeaa94>
    a1a4:	00001ff3 	strdeq	r1, [r0], -r3
    a1a8:	00002cde 	ldrdeq	r2, [r0], -lr
    a1ac:	00000e48 	andeq	r0, r0, r8, asr #28
    a1b0:	04022601 	streq	r2, [r2], #-1537	; 0xfffff9ff
    a1b4:	00001eeb 	andeq	r1, r0, fp, ror #29
    a1b8:	000e482b 	andeq	r4, lr, fp, lsr #16
    a1bc:	20012d00 	andcs	r2, r1, r0, lsl #26
    a1c0:	2acd0000 	bcs	ff34a1c8 <_estack+0xdf3451c8>
    a1c4:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    a1c8:	00000020 	andeq	r0, r0, r0, lsr #32
    a1cc:	20233600 	eorcs	r3, r3, r0, lsl #12
    a1d0:	2d620000 	stclcs	0, cr0, [r2, #-0]
    a1d4:	2d6c0000 	stclcs	0, cr0, [ip, #-0]
    a1d8:	65010000 	strvs	r0, [r1, #-0]
    a1dc:	28000302 	stmdacs	r0, {r1, r8, r9}
    a1e0:	0025eb01 	eoreq	lr, r5, r1, lsl #22
    a1e4:	01ec0100 	mvneq	r0, r0, lsl #2
    a1e8:	2e540106 	rdfcss	f0, f4, f6
    a1ec:	2ec40000 	cdpcs	0, 12, cr0, cr4, cr0, {0}
    a1f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a1f4:	00001f62 	andeq	r1, r0, r2, ror #30
    a1f8:	000e7837 	andeq	r7, lr, r7, lsr r8
    a1fc:	001f2f00 	andseq	r2, pc, r0, lsl #30
    a200:	006a3000 	rsbeq	r3, sl, r0
    a204:	0201fe01 	andeq	pc, r1, #1, 28
    a208:	000000a3 	andeq	r0, r0, r3, lsr #1
    a20c:	00002aec 	andeq	r2, r0, ip, ror #21
    a210:	21d53800 	bicscs	r3, r5, r0, lsl #16
    a214:	2e680000 	cdpcs	0, 6, cr0, cr8, cr0, {0}
    a218:	2e720000 	cdpcs	0, 7, cr0, cr2, cr0, {0}
    a21c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    a220:	1f4a0201 	svcne	0x004a0201
    a224:	e4390000 	ldrt	r0, [r9], #-0
    a228:	00000021 	andeq	r0, r0, r1, lsr #32
    a22c:	0021f23a 	eoreq	pc, r1, sl, lsr r2	; <UNPREDICTABLE>
    a230:	002e7200 	eoreq	r7, lr, r0, lsl #4
    a234:	000e6000 	andeq	r6, lr, r0
    a238:	01fb0100 	mvnseq	r0, r0, lsl #2
    a23c:	22003902 	andcs	r3, r0, #32768	; 0x8000
    a240:	00000000 	andeq	r0, r0, r0
    a244:	00242a3b 	eoreq	r2, r4, fp, lsr sl
    a248:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    a24c:	002b940d 	eoreq	r9, fp, sp, lsl #8
    a250:	002c6400 	eoreq	r6, ip, r0, lsl #8
    a254:	cc9c0100 	ldfgts	f0, [ip], {0}
    a258:	3000001f 	andcc	r0, r0, pc, lsl r0
    a25c:	01006264 	tsteq	r0, r4, ror #4
    a260:	731a01b7 	tstvc	sl, #-1073741779	; 0xc000002d
    a264:	ff00001e 			; <UNDEFINED> instruction: 0xff00001e
    a268:	3400002a 	strcc	r0, [r0], #-42	; 0xffffffd6
    a26c:	b8010069 	stmdalt	r1, {r0, r3, r5, r6}
    a270:	00a30601 	adceq	r0, r3, r1, lsl #12
    a274:	70300000 	eorsvc	r0, r0, r0
    a278:	b801006c 	stmdalt	r1, {r2, r3, r5, r6}
    a27c:	00a30901 	adceq	r0, r3, r1, lsl #18
    a280:	2b410000 	blcs	104a288 <__ccfg+0x102a2e0>
    a284:	6e300000 	cdpvs	0, 3, cr0, cr0, cr0, {0}
    a288:	b8010072 	stmdalt	r1, {r1, r4, r5, r6}
    a28c:	00a30d01 	adceq	r0, r3, r1, lsl #26
    a290:	2b540000 	blcs	150a298 <__ccfg+0x14ea2f0>
    a294:	0d3a0000 	ldceq	0, cr0, [sl, #-0]
    a298:	94000022 	strls	r0, [r0], #-34	; 0xffffffde
    a29c:	0000002b 	andeq	r0, r0, fp, lsr #32
    a2a0:	0100000e 	tsteq	r0, lr
    a2a4:	390201c1 	stmdbcc	r2, {r0, r6, r7, r8}
    a2a8:	0000221b 	andeq	r2, r0, fp, lsl r2
    a2ac:	6f3c0000 	svcvs	0x003c0000
    a2b0:	01000023 	tsteq	r0, r3, lsr #32
    a2b4:	010d01ab 	smlatbeq	sp, fp, r1, r0
    a2b8:	0023853d 	eoreq	r8, r3, sp, lsr r5
    a2bc:	01a00100 	lsleq	r0, r0, #2
    a2c0:	0027640d 	eoreq	r6, r7, sp, lsl #8
    a2c4:	00278400 	eoreq	r8, r7, r0, lsl #8
    a2c8:	3c9c0100 	ldfccs	f0, [ip], {0}
    a2cc:	00002424 	andeq	r2, r0, r4, lsr #8
    a2d0:	0d019501 	cfstr32eq	mvfx9, [r1, #-4]
    a2d4:	22323301 	eorscs	r3, r2, #67108864	; 0x4000000
    a2d8:	80010000 	andhi	r0, r1, r0
    a2dc:	19010d01 	stmdbne	r1, {r0, r8, sl, fp}
    a2e0:	34000020 	strcc	r0, [r0], #-32	; 0xffffffe0
    a2e4:	01006572 	tsteq	r0, r2, ror r5
    a2e8:	731a0184 	tstvc	sl, #132, 2	; 0x21
    a2ec:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a2f0:	85010069 	strhi	r0, [r1, #-105]	; 0xffffff97
    a2f4:	00a30601 	adceq	r0, r3, r1, lsl #12
    a2f8:	3c000000 	stccc	0, cr0, [r0], {-0}
    a2fc:	000022c9 	andeq	r2, r0, r9, asr #5
    a300:	0d016101 	stfeqs	f6, [r1, #-4]
    a304:	1f203e01 	svcne	0x00203e01
    a308:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a30c:	f63f010d 			; <UNDEFINED> instruction: 0xf63f010d
    a310:	0100001f 	tsteq	r0, pc, lsl r0
    a314:	01010de2 	smlatteq	r1, r2, sp, r0
    a318:	0000205f 	andeq	r2, r0, pc, asr r0
    a31c:	646d6340 	strbtvs	r6, [sp], #-832	; 0xfffffcc0
    a320:	26e20100 	strbtcs	r0, [r2], r0, lsl #2
    a324:	00000bc0 	andeq	r0, r0, r0, asr #23
    a328:	0026ee41 	eoreq	lr, r6, r1, asr #28
    a32c:	31e20100 	mvncc	r0, r0, lsl #2
    a330:	00001800 	andeq	r1, r0, r0, lsl #16
    a334:	00072541 	andeq	r2, r7, r1, asr #10
    a338:	3ee20100 	cdpcc	1, 14, cr0, cr2, cr0, {0}
    a33c:	00001800 	andeq	r1, r0, r0, lsl #16
    a340:	1ef33f00 	cdpne	15, 15, cr3, cr3, cr0, {0}
    a344:	c5010000 	strgt	r0, [r1, #-0]
    a348:	9201010d 	andls	r0, r1, #1073741827	; 0x40000003
    a34c:	40000020 	andmi	r0, r0, r0, lsr #32
    a350:	00646d63 	rsbeq	r6, r4, r3, ror #26
    a354:	001ec501 	andseq	ip, lr, r1, lsl #10
    a358:	42000018 	andmi	r0, r0, #24
    a35c:	00736572 	rsbseq	r6, r3, r2, ror r5
    a360:	a306ca01 	movwge	ip, #27137	; 0x6a01
    a364:	42000000 	andmi	r0, r0, #0
    a368:	00746e63 	rsbseq	r6, r4, r3, ror #28
    a36c:	a306cd01 	movwge	ip, #27905	; 0x6d01
    a370:	00000000 	andeq	r0, r0, r0
    a374:	0012b943 	andseq	fp, r2, r3, asr #18
    a378:	01540300 	cmpeq	r4, r0, lsl #6
    a37c:	af030101 	svcge	0x00030101
    a380:	44000020 	strmi	r0, [r0], #-32	; 0xffffffe0
    a384:	00001116 	andeq	r1, r0, r6, lsl r1
    a388:	19015403 	stmdbne	r1, {r0, r1, sl, ip, lr}
    a38c:	0000007f 	andeq	r0, r0, pc, ror r0
    a390:	13c64300 	bicne	r4, r6, #0, 6
    a394:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    a398:	03010101 	movweq	r0, #4353	; 0x1101
    a39c:	000020cc 	andeq	r2, r0, ip, asr #1
    a3a0:	00111644 	andseq	r1, r1, r4, asr #12
    a3a4:	011e0300 	tsteq	lr, r0, lsl #6
    a3a8:	00007f17 	andeq	r7, r0, r7, lsl pc
    a3ac:	8c430000 	marhi	acc0, r0, r3
    a3b0:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    a3b4:	011501ea 	tsteq	r5, sl, ror #3
    a3b8:	00216103 	eoreq	r6, r1, r3, lsl #2
    a3bc:	53703400 	cmnpl	r0, #0, 8
    a3c0:	01f20500 	mvnseq	r0, r0, lsl #10
    a3c4:	00216114 	eoreq	r6, r1, r4, lsl r1
    a3c8:	44703400 	ldrbtmi	r3, [r0], #-1024	; 0xfffffc00
    a3cc:	01f30500 	mvnseq	r0, r0, lsl #10
    a3d0:	0021671c 	eoreq	r6, r1, ip, lsl r7
    a3d4:	31743400 	cmncc	r4, r0, lsl #8
    a3d8:	01f40500 	mvnseq	r0, r0, lsl #10
    a3dc:	00007f0d 	andeq	r7, r0, sp, lsl #30
    a3e0:	32743400 	rsbscc	r3, r4, #0, 8
    a3e4:	01f40500 	mvnseq	r0, r0, lsl #10
    a3e8:	00007f11 	andeq	r7, r0, r1, lsl pc
    a3ec:	33743400 	cmncc	r4, #0, 8
    a3f0:	01f40500 	mvnseq	r0, r0, lsl #10
    a3f4:	00007f15 	andeq	r7, r0, r5, lsl pc
    a3f8:	34743400 	ldrbtcc	r3, [r4], #-1024	; 0xfffffc00
    a3fc:	01f40500 	mvnseq	r0, r0, lsl #10
    a400:	00007f19 	andeq	r7, r0, r9, lsl pc
    a404:	35743400 	ldrbcc	r3, [r4, #-1024]!	; 0xfffffc00
    a408:	01f40500 	mvnseq	r0, r0, lsl #10
    a40c:	00007f1d 	andeq	r7, r0, sp, lsl pc
    a410:	36743400 	ldrbtcc	r3, [r4], -r0, lsl #8
    a414:	01f40500 	mvnseq	r0, r0, lsl #10
    a418:	00007f21 	andeq	r7, r0, r1, lsr #30
    a41c:	37743400 	ldrbcc	r3, [r4, -r0, lsl #8]!
    a420:	01f40500 	mvnseq	r0, r0, lsl #10
    a424:	00007f25 	andeq	r7, r0, r5, lsr #30
    a428:	38743400 	ldmdacc	r4!, {sl, ip, sp}^
    a42c:	01f40500 	mvnseq	r0, r0, lsl #10
    a430:	00007f29 	andeq	r7, r0, r9, lsr #30
    a434:	25c62700 	strbcs	r2, [r6, #1792]	; 0x700
    a438:	f5050000 			; <UNDEFINED> instruction: 0xf5050000
    a43c:	007f0d01 	rsbseq	r0, pc, r1, lsl #26
    a440:	11000000 	mrsne	r0, (UNDEF: 0)
    a444:	00008b04 	andeq	r8, r0, r4, lsl #22
    a448:	97041100 	strls	r1, [r4, -r0, lsl #2]
    a44c:	45000000 	strmi	r0, [r0, #-0]
    a450:	000023d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a454:	15012f04 	strne	r2, [r1, #-3844]	; 0xfffff0fc
    a458:	98450301 	stmdals	r5, {r0, r8, r9}^
    a45c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    a460:	01150122 	tsteq	r5, r2, lsr #2
    a464:	1f454303 	svcne	0x00454303
    a468:	11040000 	mrsne	r0, (UNDEF: 4)
    a46c:	03011501 	movweq	r1, #5377	; 0x1501
    a470:	000021ad 	andeq	r2, r0, sp, lsr #3
    a474:	00265127 	eoreq	r5, r6, r7, lsr #2
    a478:	01130400 	tsteq	r3, r0, lsl #8
    a47c:	0009840d 	andeq	r8, r9, sp, lsl #8
    a480:	210f2700 	tstcs	pc, r0, lsl #14
    a484:	14040000 	strne	r0, [r4], #-0
    a488:	0bc60e01 	bleq	ff18dc94 <_estack+0xdf188c94>
    a48c:	45000000 	strmi	r0, [r0, #-0]
    a490:	000026fc 	strdeq	r2, [r0], -ip
    a494:	15010d04 	strne	r0, [r1, #-3332]	; 0xfffff2fc
    a498:	95430301 	strbls	r0, [r3, #-769]	; 0xfffffcff
    a49c:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    a4a0:	01150104 	tsteq	r5, r4, lsl #2
    a4a4:	0021d503 	eoreq	sp, r1, r3, lsl #10
    a4a8:	21192700 	tstcs	r9, r0, lsl #14
    a4ac:	06040000 	streq	r0, [r4], -r0
    a4b0:	0bc60e01 	bleq	ff18dcbc <_estack+0xdf188cbc>
    a4b4:	43000000 	movwmi	r0, #0
    a4b8:	00002376 	andeq	r2, r0, r6, ror r3
    a4bc:	01011d02 	tsteq	r1, r2, lsl #26
    a4c0:	21f20301 	mvnscs	r0, r1, lsl #6
    a4c4:	38440000 	stmdacc	r4, {}^	; <UNPREDICTABLE>
    a4c8:	02000022 	andeq	r0, r0, #34	; 0x22
    a4cc:	7f19011d 	svcvc	0x0019011d
    a4d0:	00000000 	andeq	r0, r0, r0
    a4d4:	0021233f 	eoreq	r2, r1, pc, lsr r3
    a4d8:	01f70200 	mvnseq	r0, r0, lsl #4
    a4dc:	220d0301 	andcs	r0, sp, #67108864	; 0x4000000
    a4e0:	38410000 	stmdacc	r1, {}^	; <UNPREDICTABLE>
    a4e4:	02000022 	andeq	r0, r0, #34	; 0x22
    a4e8:	007f1bf7 	ldrshteq	r1, [pc], #-183
    a4ec:	3f000000 	svccc	0x00000000
    a4f0:	00002157 	andeq	r2, r0, r7, asr r1
    a4f4:	0101aa02 	tsteq	r1, r2, lsl #20
    a4f8:	00222803 	eoreq	r2, r2, r3, lsl #16
    a4fc:	22384100 	eorscs	r4, r8, #0, 2
    a500:	aa020000 	bge	8a508 <__ccfg+0x6a560>
    a504:	00007f1b 	andeq	r7, r0, fp, lsl pc
    a508:	10460000 	subne	r0, r6, r0
    a50c:	02000025 	andeq	r0, r0, #37	; 0x25
    a510:	0301019c 	movweq	r0, #4508	; 0x119c
    a514:	00274f46 	eoreq	r4, r7, r6, asr #30
    a518:	01790200 	cmneq	r9, r0, lsl #4
    a51c:	5f470301 	svcpl	0x00470301
    a520:	14000020 	strne	r0, [r0], #-32	; 0xffffffe0
    a524:	5c000029 	stcpl	0, cr0, [r0], {41}	; 0x29
    a528:	01000029 	tsteq	r0, r9, lsr #32
    a52c:	00228b9c 	mlaeq	r2, ip, fp, r8
    a530:	206d4800 	rsbcs	r4, sp, r0, lsl #16
    a534:	2b720000 	blcs	1c8a53c <__ccfg+0x1c6a594>
    a538:	792d0000 	pushvc	{}	; <UNPREDICTABLE>
    a53c:	90000020 	andls	r0, r0, r0, lsr #32
    a540:	2c00002b 	stccs	0, cr0, [r0], {43}	; 0x2b
    a544:	00002085 	andeq	r2, r0, r5, lsl #1
    a548:	00205f49 	eoreq	r5, r0, r9, asr #30
    a54c:	00292a00 	eoreq	r2, r9, r0, lsl #20
    a550:	00292c00 	eoreq	r2, r9, r0, lsl #24
    a554:	0dc50100 	stfeqe	f0, [r5]
    a558:	00206d48 	eoreq	r6, r0, r8, asr #26
    a55c:	002bc400 	eoreq	ip, fp, r0, lsl #8
    a560:	20792c00 	rsbscs	r2, r9, r0, lsl #24
    a564:	852c0000 	strhi	r0, [ip, #-0]!
    a568:	00000020 	andeq	r0, r0, r0, lsr #32
    a56c:	1fe94700 	svcne	0x00e94700
    a570:	295c0000 	ldmdbcs	ip, {}^	; <UNPREDICTABLE>
    a574:	29800000 	stmibcs	r0, {}	; <UNPREDICTABLE>
    a578:	9c010000 	stcls	0, cr0, [r1], {-0}
    a57c:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    a580:	001fe936 	andseq	lr, pc, r6, lsr r9	; <UNPREDICTABLE>
    a584:	00296600 	eoreq	r6, r9, r0, lsl #12
    a588:	00297400 	eoreq	r7, r9, r0, lsl #8
    a58c:	01950100 	orrseq	r0, r5, r0, lsl #2
    a590:	1947000d 	stmdbne	r7, {r0, r2, r3}^
    a594:	80000020 	andhi	r0, r0, r0, lsr #32
    a598:	dc000029 	stcle	0, cr0, [r0], {41}	; 0x29
    a59c:	01000029 	tsteq	r0, r9, lsr #32
    a5a0:	0023199c 	mlaeq	r3, ip, r9, r1
    a5a4:	20194a00 	andscs	r4, r9, r0, lsl #20
    a5a8:	298a0000 	stmibcs	sl, {}	; <UNPREDICTABLE>
    a5ac:	29c60000 	stmibcs	r6, {}^	; <UNPREDICTABLE>
    a5b0:	61010000 	mrsvs	r0, (UNDEF: 1)
    a5b4:	282e0d01 	stmdacs	lr!, {r0, r8, sl, fp}
    a5b8:	8a000022 	bhi	a648 <__exidx_end+0x4b6c>
    a5bc:	70000029 	andvc	r0, r0, r9, lsr #32
    a5c0:	0100000d 	tsteq	r0, sp
    a5c4:	3802016f 	stmdacc	r2, {r0, r1, r2, r3, r5, r6, r8}
    a5c8:	00002092 	muleq	r0, r2, r0
    a5cc:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    a5d0:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    a5d4:	02017a01 	andeq	r7, r1, #4096	; 0x1000
    a5d8:	00002300 	andeq	r2, r0, r0, lsl #6
    a5dc:	0020a139 	eoreq	sl, r0, r9, lsr r1
    a5e0:	924a0000 	subls	r0, sl, #0
    a5e4:	ba000020 	blt	a66c <__exidx_end+0x4b90>
    a5e8:	be000029 	cdplt	0, 0, cr0, cr0, cr9, {1}
    a5ec:	01000029 	tsteq	r0, r9, lsr #32
    a5f0:	3902017a 	stmdbcc	r2, {r1, r3, r4, r5, r6, r8}
    a5f4:	000020a1 	andeq	r2, r0, r1, lsr #1
    a5f8:	47000000 	strmi	r0, [r0, -r0]
    a5fc:	0000202c 	andeq	r2, r0, ip, lsr #32
    a600:	000029dc 	ldrdeq	r2, [r0], -ip
    a604:	00002a14 	andeq	r2, r0, r4, lsl sl
    a608:	23449c01 	movtcs	r9, #19457	; 0x4c01
    a60c:	3a480000 	bcc	120a614 <__ccfg+0x11ea66c>
    a610:	d7000020 	strle	r0, [r0, -r0, lsr #32]
    a614:	4800002b 	stmdami	r0, {r0, r1, r3, r5}
    a618:	00002046 	andeq	r2, r0, r6, asr #32
    a61c:	00002bf5 	strdeq	r2, [r0], -r5
    a620:	00205239 	eoreq	r5, r0, r9, lsr r2
    a624:	234b0000 	movtcs	r0, #45056	; 0xb000
    a628:	14000020 	strne	r0, [r0], #-32	; 0xffffffe0
    a62c:	9400002a 	strls	r0, [r0], #-42	; 0xffffffd6
    a630:	0100002b 	tsteq	r0, fp, lsr #32
    a634:	20af2a9c 	umlalcs	r2, pc, ip, sl	; <UNPREDICTABLE>
    a638:	2a140000 	bcs	50a640 <__ccfg+0x4ea698>
    a63c:	0d900000 	ldceq	0, cr0, [r0]
    a640:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a644:	236e0201 	cmncs	lr, #268435456	; 0x10000000
    a648:	be390000 	cdplt	0, 3, cr0, cr9, cr0, {0}
    a64c:	00000020 	andeq	r0, r0, r0, lsr #32
    a650:	0020af38 	eoreq	sl, r0, r8, lsr pc
    a654:	002a2000 	eoreq	r2, sl, r0
    a658:	002a2400 	eoreq	r2, sl, r0, lsl #8
    a65c:	01080100 	mrseq	r0, (UNDEF: 24)
    a660:	00238902 	eoreq	r8, r3, r2, lsl #18
    a664:	20be3900 	adcscs	r3, lr, r0, lsl #18
    a668:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    a66c:	00002232 	andeq	r2, r0, r2, lsr r2
    a670:	00002a42 	andeq	r2, r0, r2, asr #20
    a674:	00000da8 	andeq	r0, r0, r8, lsr #27
    a678:	02011a01 	andeq	r1, r1, #4096	; 0x1000
    a67c:	00216d2a 	eoreq	r6, r1, sl, lsr #26
    a680:	002a5000 	eoreq	r5, sl, r0
    a684:	000dc000 	andeq	ip, sp, r0
    a688:	01210100 			; <UNDEFINED> instruction: 0x01210100
    a68c:	00240b02 	eoreq	r0, r4, r2, lsl #22
    a690:	21783a00 	cmncs	r8, r0, lsl #20
    a694:	2a500000 	bcs	140a69c <__ccfg+0x13ea6f4>
    a698:	0dc00000 	stcleq	0, cr0, [r0]
    a69c:	31040000 	mrscc	r0, (UNDEF: 4)
    a6a0:	b8380401 	ldmdalt	r8!, {r0, sl}
    a6a4:	50000021 	andpl	r0, r0, r1, lsr #32
    a6a8:	5c00002a 	stcpl	0, cr0, [r0], {42}	; 0x2a
    a6ac:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    a6b0:	df040125 	svcle	0x00040125
    a6b4:	4c000023 	stcmi	0, cr0, [r0], {35}	; 0x23
    a6b8:	000021c7 	andeq	r2, r0, r7, asr #3
    a6bc:	2100041c 	tstcs	r0, ip, lsl r4
    a6c0:	21833a00 	orrcs	r3, r3, r0, lsl #20
    a6c4:	2a5c0000 	bcs	170a6cc <__ccfg+0x16ea724>
    a6c8:	0dc80000 	stcleq	0, cr0, [r8]
    a6cc:	26040000 	strcs	r0, [r4], -r0
    a6d0:	c82b0401 	stmdagt	fp!, {r0, sl}
    a6d4:	4c00000d 	stcmi	0, cr0, [r0], {13}
    a6d8:	00002192 	muleq	r0, r2, r1
    a6dc:	21000340 	tstcs	r0, r0, asr #6
    a6e0:	00219f4c 	eoreq	r9, r1, ip, asr #30
    a6e4:	0003bc00 	andeq	fp, r3, r0, lsl #24
    a6e8:	00000021 	andeq	r0, r0, r1, lsr #32
    a6ec:	20cc3a00 	sbccs	r3, ip, r0, lsl #20
    a6f0:	2a600000 	bcs	180a6f8 <__ccfg+0x17ea750>
    a6f4:	0de00000 	stcleq	0, cr0, [r0]
    a6f8:	22010000 	andcs	r0, r1, #0
    a6fc:	e02b0201 	eor	r0, fp, r1, lsl #4
    a700:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    a704:	000020db 	ldrdeq	r2, [r0], -fp
    a708:	00002c13 	andeq	r2, r0, r3, lsl ip
    a70c:	0020e72d 	eoreq	lr, r0, sp, lsr #14
    a710:	002c2600 	eoreq	r2, ip, r0, lsl #12
    a714:	20f32c00 	rscscs	r2, r3, r0, lsl #24
    a718:	ff2d0000 			; <UNDEFINED> instruction: 0xff2d0000
    a71c:	44000020 	strmi	r0, [r0], #-32	; 0xffffffe0
    a720:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a724:	0000210b 	andeq	r2, r0, fp, lsl #2
    a728:	0021172d 	eoreq	r1, r1, sp, lsr #14
    a72c:	002c5700 	eoreq	r5, ip, r0, lsl #14
    a730:	21232c00 			; <UNDEFINED> instruction: 0x21232c00
    a734:	2f2d0000 	svccs	0x002d0000
    a738:	6a000021 	bvs	a7c4 <__exidx_end+0x4ce8>
    a73c:	2d00002c 	stccs	0, cr0, [r0, #-176]	; 0xffffff50
    a740:	0000213b 	andeq	r2, r0, fp, lsr r1
    a744:	00002c7d 	andeq	r2, r0, sp, ror ip
    a748:	0021472d 	eoreq	r4, r1, sp, lsr #14
    a74c:	002ca800 	eoreq	sl, ip, r0, lsl #16
    a750:	21532c00 	cmpcs	r3, r0, lsl #24
    a754:	00000000 	andeq	r0, r0, r0
    a758:	07310000 	ldreq	r0, [r1, -r0]!
    a75c:	00030000 	andeq	r0, r3, r0
    a760:	000025db 	ldrdeq	r2, [r0], -fp
    a764:	00a30104 	adceq	r0, r3, r4, lsl #2
    a768:	6a0c0000 	bvs	30a770 <__ccfg+0x2ea7c8>
    a76c:	ff000027 			; <UNDEFINED> instruction: 0xff000027
    a770:	4800000d 	stmdami	r0, {r0, r2, r3}
    a774:	0000000f 	andeq	r0, r0, pc
    a778:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    a77c:	02000063 	andeq	r0, r0, #99	; 0x63
    a780:	0c600601 	stcleq	6, cr0, [r0], #-4
    a784:	02020000 	andeq	r0, r2, #0
    a788:	000a6e05 	andeq	r6, sl, r5, lsl #28
    a78c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a790:	00000800 	andeq	r0, r0, r0, lsl #16
    a794:	fb050802 	blx	14c7a6 <__ccfg+0x12c7fe>
    a798:	03000007 	movweq	r0, #7
    a79c:	00002a11 	andeq	r2, r0, r1, lsl sl
    a7a0:	4d172e02 	ldcmi	14, cr2, [r7, #-8]
    a7a4:	02000000 	andeq	r0, r0, #0
    a7a8:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    a7ac:	07030000 	streq	r0, [r3, -r0]
    a7b0:	0200002e 	andeq	r0, r0, #46	; 0x2e
    a7b4:	00601c31 	rsbeq	r1, r0, r1, lsr ip
    a7b8:	02020000 	andeq	r0, r2, #0
    a7bc:	000d5b07 	andeq	r5, sp, r7, lsl #22
    a7c0:	29a90300 	stmibcs	r9!, {r8, r9}
    a7c4:	34020000 	strcc	r0, [r2], #-0
    a7c8:	0000731b 	andeq	r7, r0, fp, lsl r3
    a7cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a7d0:	00000428 	andeq	r0, r0, r8, lsr #8
    a7d4:	23070802 	movwcs	r0, #30722	; 0x7802
    a7d8:	04000004 	streq	r0, [r0], #-4
    a7dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a7e0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a7e4:	00042d07 	andeq	r2, r4, r7, lsl #26
    a7e8:	05190300 	ldreq	r0, [r9, #-768]	; 0xfffffd00
    a7ec:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a7f0:	00009b1b 	andeq	r9, r0, fp, lsl fp
    a7f4:	0b930500 	bleq	fe4cbbfc <_estack+0xde4c6bfc>
    a7f8:	0a040000 	beq	10a800 <__ccfg+0xea858>
    a7fc:	0000b300 	andeq	fp, r0, r0, lsl #6
    a800:	08700600 	ldmdaeq	r0!, {r9, sl}^
    a804:	00b30000 	adcseq	r0, r3, r0
    a808:	01000000 	mrseq	r0, (UNDEF: 0)
    a80c:	03040700 	movweq	r0, #18176	; 0x4700
    a810:	00000b95 	muleq	r0, r5, fp
    a814:	8f186303 	svchi	0x00186303
    a818:	03000000 	movweq	r0, #0
    a81c:	000028f0 	strdeq	r2, [r0], -r0
    a820:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    a824:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a828:	000000c1 	andeq	r0, r0, r1, asr #1
    a82c:	001db703 	andseq	fp, sp, r3, lsl #14
    a830:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
    a834:	00000041 	andeq	r0, r0, r1, asr #32
    a838:	0000d209 	andeq	sp, r0, r9, lsl #4
    a83c:	29420300 	stmdbcs	r2, {r8, r9}^
    a840:	2c040000 	stccs	0, cr0, [r4], {-0}
    a844:	00006712 	andeq	r6, r0, r2, lsl r7
    a848:	00e30800 	rsceq	r0, r3, r0, lsl #16
    a84c:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    a850:	04000006 	streq	r0, [r0], #-6
    a854:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    a858:	b7030000 	strlt	r0, [r3, -r0]
    a85c:	0400000b 	streq	r0, [r0], #-11
    a860:	010c0f2e 	tsteq	ip, lr, lsr #30
    a864:	040a0000 	streq	r0, [sl], #-0
    a868:	000000c1 	andeq	r0, r0, r1, asr #1
    a86c:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    a870:	0001a009 	andeq	sl, r1, r9
    a874:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    a878:	34040000 	strcc	r0, [r4], #-0
    a87c:	0000d207 	andeq	sp, r0, r7, lsl #4
    a880:	07010100 	streq	r0, [r1, -r0, lsl #2]
    a884:	064f0c00 	strbeq	r0, [pc], -r0, lsl #24
    a888:	35040000 	strcc	r0, [r4, #-0]
    a88c:	0000d203 	andeq	sp, r0, r3, lsl #4
    a890:	06010100 	streq	r0, [r1], -r0, lsl #2
    a894:	02de0c00 	sbcseq	r0, lr, #0, 24
    a898:	36040000 	strcc	r0, [r4], -r0
    a89c:	0000d203 	andeq	sp, r0, r3, lsl #4
    a8a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    a8a4:	06ba0c00 	ldrteq	r0, [sl], r0, lsl #24
    a8a8:	37040000 	strcc	r0, [r4, -r0]
    a8ac:	0000d203 	andeq	sp, r0, r3, lsl #4
    a8b0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    a8b4:	0aa20c00 	beq	fe88d8bc <_estack+0xde8888bc>
    a8b8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    a8bc:	0000d203 	andeq	sp, r0, r3, lsl #4
    a8c0:	00040100 	andeq	r0, r4, r0, lsl #2
    a8c4:	065e0d00 	ldrbeq	r0, [lr], -r0, lsl #26
    a8c8:	3a040000 	bcc	10a8d0 <__ccfg+0xea928>
    a8cc:	0000d207 	andeq	sp, r0, r7, lsl #4
    a8d0:	fe0d0100 	cdp2	1, 0, cr0, cr13, cr0, {0}
    a8d4:	04000008 	streq	r0, [r0], #-8
    a8d8:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    a8dc:	0d020000 	stceq	0, cr0, [r2, #-0]
    a8e0:	00000f2f 	andeq	r0, r0, pc, lsr #30
    a8e4:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    a8e8:	03000000 	movweq	r0, #0
    a8ec:	0009160d 	andeq	r1, r9, sp, lsl #12
    a8f0:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    a8f4:	000000e3 	andeq	r0, r0, r3, ror #1
    a8f8:	14030004 	strne	r0, [r3], #-4
    a8fc:	04000003 	streq	r0, [r0], #-3
    a900:	01120341 	tsteq	r2, r1, asr #6
    a904:	a0090000 	andge	r0, r9, r0
    a908:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a90c:	000006c1 	andeq	r0, r0, r1, asr #13
    a910:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    a914:	01000001 	tsteq	r0, r1
    a918:	01970e01 	orrseq	r0, r7, r1, lsl #28
    a91c:	45040000 	strmi	r0, [r4, #-0]
    a920:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    a924:	0a010100 	beq	4ad2c <__ccfg+0x2ad84>
    a928:	0001d304 	andeq	sp, r1, r4, lsl #6
    a92c:	08010200 	stmdaeq	r1, {r9}
    a930:	00000c67 	andeq	r0, r0, r7, ror #24
    a934:	0001d308 	andeq	sp, r1, r8, lsl #6
    a938:	031d0e00 	tsteq	sp, #0, 28
    a93c:	45040000 	strmi	r0, [r4, #-0]
    a940:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    a944:	0b010100 	bleq	4ad4c <__ccfg+0x2ada4>
    a948:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    a94c:	0000021e 	andeq	r0, r0, lr, lsl r2
    a950:	000ccd0d 	andeq	ip, ip, sp, lsl #26
    a954:	0b900500 	bleq	fe40bd5c <_estack+0xde406d5c>
    a958:	00000067 	andeq	r0, r0, r7, rrx
    a95c:	106a0d00 	rsbne	r0, sl, r0, lsl #26
    a960:	91050000 	mrsls	r0, (UNDEF: 5)
    a964:	0000c107 	andeq	ip, r0, r7, lsl #2
    a968:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    a96c:	05000001 	streq	r0, [r0, #-1]
    a970:	00de1092 	smullseq	r1, lr, r2, r0
    a974:	00060000 	andeq	r0, r6, r0
    a978:	000cc103 	andeq	ip, ip, r3, lsl #2
    a97c:	03930500 	orrseq	r0, r3, #0, 10
    a980:	000001ed 	andeq	r0, r0, sp, ror #3
    a984:	00021e0f 	andeq	r1, r2, pc, lsl #28
    a988:	00023500 	andeq	r3, r2, r0, lsl #10
    a98c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    a990:	00000940 	andeq	r0, r0, r0, asr #18
    a994:	2a0f9905 	bcs	3f0db0 <__ccfg+0x3d0e08>
    a998:	01000002 	tsteq	r0, r2
    a99c:	06010b01 	streq	r0, [r1], -r1, lsl #22
    a9a0:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    a9a4:	1d0c0000 	stcne	0, cr0, [ip, #-0]
    a9a8:	06000009 	streq	r0, [r0], -r9
    a9ac:	00d20793 	smullseq	r0, r2, r3, r7
    a9b0:	07010000 	streq	r0, [r1, -r0]
    a9b4:	cf0c0001 	svcgt	0x000c0001
    a9b8:	06000005 	streq	r0, [r0], -r5
    a9bc:	00d20394 	smullseq	r0, r2, r4, r3
    a9c0:	01010000 	mrseq	r0, (UNDEF: 1)
    a9c4:	03000000 	movweq	r0, #0
    a9c8:	00000aae 	andeq	r0, r0, lr, lsr #21
    a9cc:	43039606 	movwmi	r9, #13830	; 0x3606
    a9d0:	08000002 	stmdaeq	r0, {r1}
    a9d4:	0000026d 	andeq	r0, r0, sp, ror #4
    a9d8:	0002790f 	andeq	r7, r2, pc, lsl #18
    a9dc:	00028900 	andeq	r8, r2, r0, lsl #18
    a9e0:	08001000 	stmdaeq	r0, {ip}
    a9e4:	0000027e 	andeq	r0, r0, lr, ror r2
    a9e8:	0003ac0e 	andeq	sl, r3, lr, lsl #24
    a9ec:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    a9f0:	00000289 	andeq	r0, r0, r9, lsl #5
    a9f4:	cd0f0101 	stfgts	f0, [pc, #-4]	; a9f8 <__exidx_end+0x4f1c>
    a9f8:	a7000000 	strge	r0, [r0, -r0]
    a9fc:	10000002 	andne	r0, r0, r2
    aa00:	029c0800 	addseq	r0, ip, #0, 16
    aa04:	110e0000 	mrsne	r0, (UNDEF: 14)
    aa08:	07000006 	streq	r0, [r0, -r6]
    aa0c:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    aa10:	01010000 	mrseq	r0, (UNDEF: 1)
    aa14:	0008e00e 	andeq	lr, r8, lr
    aa18:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    aa1c:	000000e3 	andeq	r0, r0, r3, ror #1
    aa20:	75110101 	ldrvc	r0, [r1, #-257]	; 0xfffffeff
    aa24:	0800000c 	stmdaeq	r0, {r2, r3}
    aa28:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    aa2c:	0a000002 	beq	aa3c <__exidx_end+0x4f60>
    aa30:	0002db04 	andeq	sp, r2, r4, lsl #22
    aa34:	e7011200 	str	r1, [r1, -r0, lsl #4]
    aa38:	13000002 	movwne	r0, #2
    aa3c:	000000c1 	andeq	r0, r0, r1, asr #1
    aa40:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    aa44:	02f20000 	rscseq	r0, r2, #0
    aa48:	00100000 	andseq	r0, r0, r0
    aa4c:	0002e708 	andeq	lr, r2, r8, lsl #14
    aa50:	09e91400 	stmibeq	r9!, {sl, ip}^
    aa54:	7f080000 	svcvc	0x00080000
    aa58:	02f21301 	rscseq	r1, r2, #67108864	; 0x4000000
    aa5c:	01010000 	mrseq	r0, (UNDEF: 1)
    aa60:	00039814 	andeq	r9, r3, r4, lsl r8
    aa64:	01820800 	orreq	r0, r2, r0, lsl #16
    aa68:	0000ef14 	andeq	lr, r0, r4, lsl pc
    aa6c:	0b010100 	bleq	4ae74 <__ccfg+0x2aecc>
    aa70:	09080904 	stmdbeq	r8, {r2, r8, fp}
    aa74:	00000339 	andeq	r0, r0, r9, lsr r3
    aa78:	0001c20d 	andeq	ip, r1, sp, lsl #4
    aa7c:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    aa80:	000000c1 	andeq	r0, r0, r1, asr #1
    aa84:	0ca50d00 	stceq	13, cr0, [r5]
    aa88:	10090000 	andne	r0, r9, r0
    aa8c:	0000c103 	andeq	ip, r0, r3, lsl #2
    aa90:	03000200 	movweq	r0, #512	; 0x200
    aa94:	00000d6e 	andeq	r0, r0, lr, ror #26
    aa98:	15031109 	strne	r1, [r3, #-265]	; 0xfffffef7
    aa9c:	0b000003 	bleq	aab0 <__exidx_end+0x4fd4>
    aaa0:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    aaa4:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    aaa8:	0004b30d 	andeq	fp, r4, sp, lsl #6
    aaac:	08170900 	ldmdaeq	r7, {r8, fp}
    aab0:	000003d1 	ldrdeq	r0, [r0], -r1
    aab4:	090e0d00 	stmdbeq	lr, {r8, sl, fp}
    aab8:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    aabc:	0003ec08 	andeq	lr, r3, r8, lsl #24
    aac0:	c90d0400 	stmdbgt	sp, {sl}
    aac4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    aac8:	04220819 	strteq	r0, [r2], #-2073	; 0xfffff7e7
    aacc:	0d080000 	stceq	0, cr0, [r8, #-0]
    aad0:	00000c9d 	muleq	r0, sp, ip
    aad4:	3d081a09 	vstrcc	s2, [r8, #-36]	; 0xffffffdc
    aad8:	0c000004 	stceq	0, cr0, [r0], {4}
    aadc:	0009650d 	andeq	r6, r9, sp, lsl #10
    aae0:	081b0900 	ldmdaeq	fp, {r8, fp}
    aae4:	00000453 	andeq	r0, r0, r3, asr r4
    aae8:	0a660d10 	beq	198df30 <__ccfg+0x196df88>
    aaec:	1c090000 	stcne	0, cr0, [r9], {-0}
    aaf0:	00045308 	andeq	r5, r4, r8, lsl #6
    aaf4:	a50d1400 	strge	r1, [sp, #-1024]	; 0xfffffc00
    aaf8:	09000001 	stmdbeq	r0, {r0}
    aafc:	0453081d 	ldrbeq	r0, [r3], #-2077	; 0xfffff7e3
    ab00:	0d180000 	ldceq	0, cr0, [r8, #-0]
    ab04:	0000030b 	andeq	r0, r0, fp, lsl #6
    ab08:	81061e09 	tsthi	r6, r9, lsl #28
    ab0c:	1c000000 	stcne	0, cr0, [r0], {-0}
    ab10:	81011500 	tsthi	r1, r0, lsl #10
    ab14:	d1000000 	mrsle	r0, (UNDEF: 0)
    ab18:	13000003 	movwne	r0, #3
    ab1c:	00000081 	andeq	r0, r0, r1, lsl #1
    ab20:	00008113 	andeq	r8, r0, r3, lsl r1
    ab24:	00b51300 	adcseq	r1, r5, r0, lsl #6
    ab28:	0a000000 	beq	ab30 <__exidx_end+0x5054>
    ab2c:	0003b704 	andeq	fp, r3, r4, lsl #14
    ab30:	81011500 	tsthi	r1, r0, lsl #10
    ab34:	ec000000 	stc	0, cr0, [r0], {-0}
    ab38:	13000003 	movwne	r0, #3
    ab3c:	00000081 	andeq	r0, r0, r1, lsl #1
    ab40:	00008113 	andeq	r8, r0, r3, lsl r1
    ab44:	040a0000 	streq	r0, [sl], #-0
    ab48:	000003d7 	ldrdeq	r0, [r0], -r7
    ab4c:	00810115 	addeq	r0, r1, r5, lsl r1
    ab50:	04160000 	ldreq	r0, [r6], #-0
    ab54:	81130000 	tsthi	r3, r0
    ab58:	13000000 	movwne	r0, #0
    ab5c:	00000100 	andeq	r0, r0, r0, lsl #2
    ab60:	00008113 	andeq	r8, r0, r3, lsl r1
    ab64:	04161300 	ldreq	r1, [r6], #-768	; 0xfffffd00
    ab68:	1c130000 	ldcne	0, cr0, [r3], {-0}
    ab6c:	00000004 	andeq	r0, r0, r4
    ab70:	0081040a 	addeq	r0, r1, sl, lsl #8
    ab74:	040a0000 	streq	r0, [sl], #-0
    ab78:	00000339 	andeq	r0, r0, r9, lsr r3
    ab7c:	03f2040a 	mvnseq	r0, #167772160	; 0xa000000
    ab80:	01150000 	tsteq	r5, r0
    ab84:	00000081 	andeq	r0, r0, r1, lsl #1
    ab88:	0000043d 	andeq	r0, r0, sp, lsr r4
    ab8c:	00010013 	andeq	r0, r1, r3, lsl r0
    ab90:	041c1300 	ldreq	r1, [ip], #-768	; 0xfffffd00
    ab94:	0a000000 	beq	ab9c <__exidx_end+0x50c0>
    ab98:	00042804 	andeq	r2, r4, r4, lsl #16
    ab9c:	81011500 	tsthi	r1, r0, lsl #10
    aba0:	53000000 	movwpl	r0, #0
    aba4:	13000004 	movwne	r0, #4
    aba8:	00000100 	andeq	r0, r0, r0, lsl #2
    abac:	43040a00 	movwmi	r0, #18944	; 0x4a00
    abb0:	03000004 	movweq	r0, #4
    abb4:	00000d2a 	andeq	r0, r0, sl, lsr #26
    abb8:	45031f09 	strmi	r1, [r3, #-3849]	; 0xfffff0f7
    abbc:	08000003 	stmdaeq	r0, {r0, r1}
    abc0:	00000459 	andeq	r0, r0, r9, asr r4
    abc4:	00037014 	andeq	r7, r3, r4, lsl r0
    abc8:	02d80800 	sbcseq	r0, r8, #0, 16
    abcc:	0000e30e 	andeq	lr, r0, lr, lsl #6
    abd0:	16010100 	strne	r0, [r1], -r0, lsl #2
    abd4:	03030808 	movweq	r0, #14344	; 0x3808
    abd8:	0004a009 	andeq	sl, r4, r9
    abdc:	3c911700 	ldccc	7, cr1, [r1], {0}
    abe0:	07080000 	streq	r0, [r8, -r0]
    abe4:	00c10703 	sbceq	r0, r1, r3, lsl #14
    abe8:	17000000 	strne	r0, [r0, -r0]
    abec:	00000fc2 	andeq	r0, r0, r2, asr #31
    abf0:	08030808 	stmdaeq	r3, {r3, fp}
    abf4:	000000f4 	strdeq	r0, [r0], -r4
    abf8:	0c110004 	ldceq	0, cr0, [r1], {4}
    abfc:	0800000a 	stmdaeq	r0, {r1, r3}
    ac00:	79030309 	stmdbvc	r3, {r0, r3, r8, r9}
    ac04:	18000004 	stmdane	r0, {r2}
    ac08:	00000020 	andeq	r0, r0, r0, lsr #32
    ac0c:	030b0830 	movweq	r0, #47152	; 0xb830
    ac10:	00051008 	andeq	r1, r5, r8
    ac14:	1f191700 	svcne	0x00191700
    ac18:	14080000 	strne	r0, [r8], #-0
    ac1c:	00c10703 	sbceq	r0, r1, r3, lsl #14
    ac20:	17000000 	strne	r0, [r0, -r0]
    ac24:	00000bea 	andeq	r0, r0, sl, ror #23
    ac28:	07031508 	streq	r1, [r3, -r8, lsl #10]
    ac2c:	000000c1 	andeq	r0, r0, r1, asr #1
    ac30:	4c7e1702 	ldclmi	7, cr1, [lr], #-8
    ac34:	16080000 	strne	r0, [r8], -r0
    ac38:	02c80a03 	sbceq	r0, r8, #12288	; 0x3000
    ac3c:	17040000 	strne	r0, [r4, -r0]
    ac40:	00004744 	andeq	r4, r0, r4, asr #14
    ac44:	08031708 	stmdaeq	r3, {r3, r8, r9, sl, ip}
    ac48:	000000f4 	strdeq	r0, [r0], -r4
    ac4c:	000f1708 	andeq	r1, pc, r8, lsl #14
    ac50:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    ac54:	05100f03 	ldreq	r0, [r0, #-3843]	; 0xfffff0fd
    ac58:	170c0000 	strne	r0, [ip, -r0]
    ac5c:	00000960 	andeq	r0, r0, r0, ror #18
    ac60:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    ac64:	00000520 	andeq	r0, r0, r0, lsr #10
    ac68:	a00f002c 	andge	r0, pc, ip, lsr #32
    ac6c:	20000004 	andcs	r0, r0, r4
    ac70:	19000005 	stmdbne	r0, {r0, r2}
    ac74:	00000088 	andeq	r0, r0, r8, lsl #1
    ac78:	040a0003 	streq	r0, [sl], #-3
    ac7c:	000004ad 	andeq	r0, r0, sp, lsr #9
    ac80:	000bdf11 	andeq	sp, fp, r1, lsl pc
    ac84:	031c0800 	tsteq	ip, #0, 16
    ac88:	0004ad1b 	andeq	sl, r4, fp, lsl sp
    ac8c:	0bbf1400 	bleq	fefcfc94 <_estack+0xdefcac94>
    ac90:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    ac94:	05421403 	strbeq	r1, [r2, #-1027]	; 0xfffffbfd
    ac98:	01010000 	mrseq	r0, (UNDEF: 1)
    ac9c:	0526040a 	streq	r0, [r6, #-1034]!	; 0xfffffbf6
    aca0:	161a0000 	ldrne	r0, [sl], -r0
    aca4:	01000000 	mrseq	r0, (UNDEF: 0)
    aca8:	0465111a 	strbteq	r1, [r5], #-282	; 0xfffffee6
    acac:	05010000 	streq	r0, [r1, #-0]
    acb0:	005abc03 	subseq	fp, sl, r3, lsl #24
    acb4:	27d01b00 	ldrbcs	r1, [r0, r0, lsl #22]
    acb8:	1f010000 	svcne	0x00010000
    acbc:	0004160d 	andeq	r1, r4, sp, lsl #12
    acc0:	30030500 	andcc	r0, r3, r0, lsl #10
    acc4:	1c200006 	stcne	0, cr0, [r0], #-24	; 0xffffffe8
    acc8:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
    accc:	010c5801 	tsteq	ip, r1, lsl #16
    acd0:	00000081 	andeq	r0, r0, r1, lsl #1
    acd4:	0000308c 	andeq	r3, r0, ip, lsl #1
    acd8:	00003090 	muleq	r0, r0, r0
    acdc:	05979c01 	ldreq	r9, [r7, #3073]	; 0xc01
    ace0:	701d0000 	andsvc	r0, sp, r0
    ace4:	22580100 	subscs	r0, r8, #0, 2
    ace8:	00000100 	andeq	r0, r0, r0, lsl #2
    acec:	00002cbb 			; <UNDEFINED> instruction: 0x00002cbb
    acf0:	277b1c00 	ldrbcs	r1, [fp, -r0, lsl #24]!
    acf4:	52010000 	andpl	r0, r1, #0
    acf8:	0081010c 	addeq	r0, r1, ip, lsl #2
    acfc:	30880000 	addcc	r0, r8, r0
    ad00:	308c0000 	addcc	r0, ip, r0
    ad04:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad08:	000005c1 	andeq	r0, r0, r1, asr #11
    ad0c:	0100701d 	tsteq	r0, sp, lsl r0
    ad10:	01002252 	tsteq	r0, r2, asr r2
    ad14:	2cce0000 	stclcs	0, cr0, [lr], {0}
    ad18:	1c000000 	stcne	0, cr0, [r0], {-0}
    ad1c:	000027a2 	andeq	r2, r0, r2, lsr #15
    ad20:	010c4d01 	tsteq	ip, r1, lsl #26
    ad24:	00000081 	andeq	r0, r0, r1, lsl #1
    ad28:	00003080 	andeq	r3, r0, r0, lsl #1
    ad2c:	00003088 	andeq	r3, r0, r8, lsl #1
    ad30:	05f99c01 	ldrbeq	r9, [r9, #3073]!	; 0xc01
    ad34:	701d0000 	andsvc	r0, sp, r0
    ad38:	224d0100 	subcs	r0, sp, #0, 2
    ad3c:	00000100 	andeq	r0, r0, r0, lsl #2
    ad40:	00002ce1 	andeq	r2, r0, r1, ror #25
    ad44:	0027c91e 	eoreq	ip, r7, lr, lsl r9
    ad48:	2f4d0100 	svccs	0x004d0100
    ad4c:	0000041c 	andeq	r0, r0, ip, lsl r4
    ad50:	1c005101 	stfnes	f5, [r0], {1}
    ad54:	00002788 	andeq	r2, r0, r8, lsl #15
    ad58:	010c4201 	tsteq	ip, r1, lsl #4
    ad5c:	00000081 	andeq	r0, r0, r1, lsl #1
    ad60:	0000305c 	andeq	r3, r0, ip, asr r0
    ad64:	00003080 	andeq	r3, r0, r0, lsl #1
    ad68:	06629c01 	strbteq	r9, [r2], -r1, lsl #24
    ad6c:	701d0000 	andsvc	r0, sp, r0
    ad70:	01007968 	tsteq	r0, r8, ror #18
    ad74:	00811e42 	addeq	r1, r1, r2, asr #28
    ad78:	2cf40000 	ldclcs	0, cr0, [r4]
    ad7c:	701d0000 	andsvc	r0, sp, r0
    ad80:	2b420100 	blcs	108b188 <__ccfg+0x106b1e0>
    ad84:	00000100 	andeq	r0, r0, r0, lsl #2
    ad88:	00002d12 	andeq	r2, r0, r2, lsl sp
    ad8c:	6e656c1d 	mcrvs	12, 3, r6, cr5, cr13, {0}
    ad90:	32420100 	subcc	r0, r2, #0, 2
    ad94:	00000081 	andeq	r0, r0, r1, lsl #1
    ad98:	00002d25 	andeq	r2, r0, r5, lsr #26
    ad9c:	7365731d 	cmnvc	r5, #1946157056	; 0x74000000
    ada0:	3c420100 	stfcce	f0, [r2], {-0}
    ada4:	00000416 	andeq	r0, r0, r6, lsl r4
    ada8:	00002d38 	andeq	r2, r0, r8, lsr sp
    adac:	0027c91e 	eoreq	ip, r7, lr, lsl r9
    adb0:	17430100 	strbne	r0, [r3, -r0, lsl #2]
    adb4:	0000041c 	andeq	r0, r0, ip, lsl r4
    adb8:	00009102 	andeq	r9, r0, r2, lsl #2
    adbc:	0027af1c 	eoreq	sl, r7, ip, lsl pc
    adc0:	0c370100 	ldfeqs	f0, [r7], #-0
    adc4:	00008101 	andeq	r8, r0, r1, lsl #2
    adc8:	00303800 	eorseq	r3, r0, r0, lsl #16
    adcc:	00305c00 	eorseq	r5, r0, r0, lsl #24
    add0:	9b9c0100 	blls	fe70b1d8 <_estack+0xde7061d8>
    add4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    add8:	00796870 	rsbseq	r6, r9, r0, ror r8
    addc:	811e3701 	tsthi	lr, r1, lsl #14
    ade0:	4b000000 	blmi	ade8 <__exidx_end+0x530c>
    ade4:	1f00002d 	svcne	0x0000002d
    ade8:	01006466 	tsteq	r0, r6, ror #8
    adec:	00812737 	addeq	r2, r1, r7, lsr r7
    adf0:	51010000 	mrspl	r0, (UNDEF: 1)
    adf4:	27952000 	ldrcs	r2, [r5, r0]
    adf8:	21010000 	mrscs	r0, (UNDEF: 1)
    adfc:	0081010c 	addeq	r0, r1, ip, lsl #2
    ae00:	db010000 	blle	4ae08 <__ccfg+0x2ae60>
    ae04:	21000006 	tstcs	r0, r6
    ae08:	00796870 	rsbseq	r6, r9, r0, ror r8
    ae0c:	811e2101 	tsthi	lr, r1, lsl #2
    ae10:	21000000 	mrscs	r0, (UNDEF: 0)
    ae14:	01006466 	tsteq	r0, r6, ror #8
    ae18:	00812721 	addeq	r2, r1, r1, lsr #14
    ae1c:	a4220000 	strtge	r0, [r2], #-0
    ae20:	01000018 	tsteq	r0, r8, lsl r0
    ae24:	00b53321 	adcseq	r3, r5, r1, lsr #6
    ae28:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    ae2c:	06250100 	strteq	r0, [r5], -r0, lsl #2
    ae30:	00000081 	andeq	r0, r0, r1, lsl #1
    ae34:	069b2400 	ldreq	r2, [fp], r0, lsl #8
    ae38:	30900000 	addscc	r0, r0, r0
    ae3c:	30d80000 	sbcscc	r0, r8, r0
    ae40:	9c010000 	stcls	0, cr0, [r1], {-0}
    ae44:	0006ad25 	andeq	sl, r6, r5, lsr #26
    ae48:	002d6900 	eoreq	r6, sp, r0, lsl #18
    ae4c:	06b92500 	ldrteq	r2, [r9], r0, lsl #10
    ae50:	2d870000 	stccs	0, cr0, [r7]
    ae54:	c4250000 	strtgt	r0, [r5], #-0
    ae58:	a5000006 	strge	r0, [r0, #-6]
    ae5c:	2600002d 	strcs	r0, [r0], -sp, lsr #32
    ae60:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    ae64:	00069b27 	andeq	r9, r6, r7, lsr #22
    ae68:	0030c600 	eorseq	ip, r0, r0, lsl #12
    ae6c:	0030d800 	eorseq	sp, r0, r0, lsl #16
    ae70:	0c210100 	stfeqs	f0, [r1], #-0
    ae74:	0006ad28 	andeq	sl, r6, r8, lsr #26
    ae78:	28550100 	ldmdacs	r5, {r8}^
    ae7c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    ae80:	c4295601 	strtgt	r5, [r9], #-1537	; 0xfffff9ff
    ae84:	26000006 	strcs	r0, [r0], -r6
    ae88:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    ae8c:	2d000000 	stccs	0, cr0, [r0, #-0]
    ae90:	03000004 	movweq	r0, #4
    ae94:	00280d00 	eoreq	r0, r8, r0, lsl #26
    ae98:	a3010400 	movwge	r0, #5120	; 0x1400
    ae9c:	0c000000 	stceq	0, cr0, [r0], {-0}
    aea0:	000027e0 	andeq	r2, r0, r0, ror #15
    aea4:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    aea8:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    aeac:	00000000 	andeq	r0, r0, r0
    aeb0:	00006627 	andeq	r6, r0, r7, lsr #12
    aeb4:	60060102 	andvs	r0, r6, r2, lsl #2
    aeb8:	0200000c 	andeq	r0, r0, #12
    aebc:	0a6e0502 	beq	1b8c2cc <__ccfg+0x1b6c324>
    aec0:	04020000 	streq	r0, [r2], #-0
    aec4:	00080005 	andeq	r0, r8, r5
    aec8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    aecc:	000007fb 	strdeq	r0, [r0], -fp
    aed0:	002a1103 	eoreq	r1, sl, r3, lsl #2
    aed4:	182e0200 	stmdane	lr!, {r9}
    aed8:	0000004d 	andeq	r0, r0, sp, asr #32
    aedc:	5e080102 	adfple	f0, f0, f2
    aee0:	0300000c 	movweq	r0, #12
    aee4:	00002e07 	andeq	r2, r0, r7, lsl #28
    aee8:	60193102 	andsvs	r3, r9, r2, lsl #2
    aeec:	02000000 	andeq	r0, r0, #0
    aef0:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
    aef4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    aef8:	02000029 	andeq	r0, r0, #41	; 0x29
    aefc:	00731934 	rsbseq	r1, r3, r4, lsr r9
    af00:	04020000 	streq	r0, [r2], #-0
    af04:	00042807 	andeq	r2, r4, r7, lsl #16
    af08:	07080200 	streq	r0, [r8, -r0, lsl #4]
    af0c:	00000423 	andeq	r0, r0, r3, lsr #8
    af10:	69050404 	stmdbvs	r5, {r2, sl}
    af14:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    af18:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    af1c:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
    af20:	03000028 	movweq	r0, #40	; 0x28
    af24:	00541227 	subseq	r1, r4, r7, lsr #4
    af28:	8f050000 	svchi	0x00050000
    af2c:	03000000 	movweq	r0, #0
    af30:	00001db7 			; <UNDEFINED> instruction: 0x00001db7
    af34:	41122b03 	tstmi	r2, r3, lsl #22
    af38:	06000000 	streq	r0, [r0], -r0
    af3c:	000000a0 	andeq	r0, r0, r0, lsr #1
    af40:	00294203 	eoreq	r4, r9, r3, lsl #4
    af44:	122c0300 	eorne	r0, ip, #0, 6
    af48:	00000067 	andeq	r0, r0, r7, rrx
    af4c:	0000b105 	andeq	fp, r0, r5, lsl #2
    af50:	06490300 	strbeq	r0, [r9], -r0, lsl #6
    af54:	2d030000 	stccs	0, cr0, [r3, #-0]
    af58:	00006712 	andeq	r6, r0, r2, lsl r7
    af5c:	03080700 	movweq	r0, #34560	; 0x8700
    af60:	015c0932 	cmpeq	ip, r2, lsr r9
    af64:	2b080000 	blcs	20af6c <__ccfg+0x1eafc4>
    af68:	03000000 	movweq	r0, #0
    af6c:	00a00734 	adceq	r0, r0, r4, lsr r7
    af70:	01010000 	mrseq	r0, (UNDEF: 1)
    af74:	4f080007 	svcmi	0x00080007
    af78:	03000006 	movweq	r0, #6
    af7c:	00a00335 	adceq	r0, r0, r5, lsr r3
    af80:	01010000 	mrseq	r0, (UNDEF: 1)
    af84:	de080006 	cdple	0, 0, cr0, cr8, cr6, {0}
    af88:	03000002 	movweq	r0, #2
    af8c:	00a00336 	adceq	r0, r0, r6, lsr r3
    af90:	01010000 	mrseq	r0, (UNDEF: 1)
    af94:	ba080005 	blt	20afb0 <__ccfg+0x1eb008>
    af98:	03000006 	movweq	r0, #6
    af9c:	00a00337 	adceq	r0, r0, r7, lsr r3
    afa0:	01010000 	mrseq	r0, (UNDEF: 1)
    afa4:	a2080004 	andge	r0, r8, #4
    afa8:	0300000a 	movweq	r0, #10
    afac:	00a00338 	adceq	r0, r0, r8, lsr r3
    afb0:	04010000 	streq	r0, [r1], #-0
    afb4:	5e090000 	cdppl	0, 0, cr0, cr9, cr0, {0}
    afb8:	03000006 	movweq	r0, #6
    afbc:	00a0073a 	adceq	r0, r0, sl, lsr r7
    afc0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    afc4:	000008fe 	strdeq	r0, [r0], -lr
    afc8:	a0033c03 	andge	r3, r3, r3, lsl #24
    afcc:	02000000 	andeq	r0, r0, #0
    afd0:	000f2f09 	andeq	r2, pc, r9, lsl #30
    afd4:	033d0300 	teqeq	sp, #0, 6
    afd8:	000000a0 	andeq	r0, r0, r0, lsr #1
    afdc:	09160903 	ldmdbeq	r6, {r0, r1, r8, fp}
    afe0:	3f030000 	svccc	0x00030000
    afe4:	0000b108 	andeq	fp, r0, r8, lsl #2
    afe8:	03000400 	movweq	r0, #1024	; 0x400
    afec:	00000314 	andeq	r0, r0, r4, lsl r3
    aff0:	ce034103 	adfgts	f4, f3, f3
    aff4:	06000000 	streq	r0, [r0], -r0
    aff8:	0000015c 	andeq	r0, r0, ip, asr r1
    affc:	0006c10a 	andeq	ip, r6, sl, lsl #2
    b000:	1a430300 	bne	10cbc08 <__ccfg+0x10abc60>
    b004:	00000168 	andeq	r0, r0, r8, ror #2
    b008:	970a0101 	strls	r0, [sl, -r1, lsl #2]
    b00c:	03000001 	movweq	r0, #1
    b010:	01890e45 	orreq	r0, r9, r5, asr #28
    b014:	01010000 	mrseq	r0, (UNDEF: 1)
    b018:	018f040b 	orreq	r0, pc, fp, lsl #8
    b01c:	01020000 	mrseq	r0, (UNDEF: 2)
    b020:	000c6708 	andeq	r6, ip, r8, lsl #14
    b024:	018f0500 	orreq	r0, pc, r0, lsl #10
    b028:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    b02c:	03000003 	movweq	r0, #3
    b030:	01891e45 	orreq	r1, r9, r5, asr #28
    b034:	01010000 	mrseq	r0, (UNDEF: 1)
    b038:	8f040807 	svchi	0x00040807
    b03c:	0001da09 	andeq	sp, r1, r9, lsl #20
    b040:	0ccd0900 			; <UNDEFINED> instruction: 0x0ccd0900
    b044:	90040000 	andls	r0, r4, r0
    b048:	0000670b 	andeq	r6, r0, fp, lsl #14
    b04c:	6a090000 	bvs	24b054 <__ccfg+0x22b0ac>
    b050:	04000010 	streq	r0, [r0], #-16
    b054:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    b058:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    b05c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    b060:	ac109204 	lfmge	f1, 1, [r0], {4}
    b064:	06000000 	streq	r0, [r0], -r0
    b068:	0cc10300 	stcleq	3, cr0, [r1], {0}
    b06c:	93040000 	movwls	r0, #16384	; 0x4000
    b070:	0001a903 	andeq	sl, r1, r3, lsl #18
    b074:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    b078:	01f10000 	mvnseq	r0, r0
    b07c:	000d0000 	andeq	r0, sp, r0
    b080:	0009400a 	andeq	r4, r9, sl
    b084:	0f990400 	svceq	0x00990400
    b088:	000001e6 	andeq	r0, r0, r6, ror #3
    b08c:	01070101 	tsteq	r7, r1, lsl #2
    b090:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    b094:	08000002 	stmdaeq	r0, {r1}
    b098:	0000091d 	andeq	r0, r0, sp, lsl r9
    b09c:	a0079305 	andge	r9, r7, r5, lsl #6
    b0a0:	01000000 	mrseq	r0, (UNDEF: 0)
    b0a4:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    b0a8:	000005cf 	andeq	r0, r0, pc, asr #11
    b0ac:	a0039405 	andge	r9, r3, r5, lsl #8
    b0b0:	01000000 	mrseq	r0, (UNDEF: 0)
    b0b4:	00000001 	andeq	r0, r0, r1
    b0b8:	000aae03 	andeq	sl, sl, r3, lsl #28
    b0bc:	03960500 	orrseq	r0, r6, #0, 10
    b0c0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b0c4:	00022905 	andeq	r2, r2, r5, lsl #18
    b0c8:	02350c00 	eorseq	r0, r5, #0, 24
    b0cc:	02450000 	subeq	r0, r5, #0
    b0d0:	000d0000 	andeq	r0, sp, r0
    b0d4:	00023a05 	andeq	r3, r2, r5, lsl #20
    b0d8:	03ac0a00 			; <UNDEFINED> instruction: 0x03ac0a00
    b0dc:	9c050000 	stcls	0, cr0, [r5], {-0}
    b0e0:	00024517 	andeq	r4, r2, r7, lsl r5
    b0e4:	0c010100 	stfeqs	f0, [r1], {-0}
    b0e8:	0000009b 	muleq	r0, fp, r0
    b0ec:	00000263 	andeq	r0, r0, r3, ror #4
    b0f0:	5805000d 	stmdapl	r5, {r0, r2, r3}
    b0f4:	0a000002 	beq	b104 <__exidx_end+0x5628>
    b0f8:	00000611 	andeq	r0, r0, r1, lsl r6
    b0fc:	63130606 	tstvs	r3, #6291456	; 0x600000
    b100:	01000002 	tsteq	r0, r2
    b104:	08e00a01 	stmiaeq	r0!, {r0, r9, fp}^
    b108:	c3040000 	movwgt	r0, #16384	; 0x4000
    b10c:	0000b10e 	andeq	fp, r0, lr, lsl #2
    b110:	0e010100 	adfeqs	f0, f1, f0
    b114:	00000c75 	andeq	r0, r0, r5, ror ip
    b118:	10016e07 	andne	r6, r1, r7, lsl #28
    b11c:	00000291 	muleq	r0, r1, r2
    b120:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    b124:	010f0000 	mrseq	r0, CPSR
    b128:	000002a3 	andeq	r0, r0, r3, lsr #5
    b12c:	00008f10 	andeq	r8, r0, r0, lsl pc
    b130:	960c0000 	strls	r0, [ip], -r0
    b134:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    b138:	0d000002 	stceq	0, cr0, [r0, #-8]
    b13c:	02a30500 	adceq	r0, r3, #0, 10
    b140:	e9110000 	ldmdb	r1, {}	; <UNPREDICTABLE>
    b144:	07000009 	streq	r0, [r0, -r9]
    b148:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    b14c:	01000002 	tsteq	r0, r2
    b150:	03981101 	orrseq	r1, r8, #1073741824	; 0x40000000
    b154:	82070000 	andhi	r0, r7, #0
    b158:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    b15c:	01010000 	mrseq	r0, (UNDEF: 1)
    b160:	00037011 	andeq	r7, r3, r1, lsl r0
    b164:	02d80700 	sbcseq	r0, r8, #0, 14
    b168:	0000b10e 	andeq	fp, r0, lr, lsl #2
    b16c:	12010100 	andne	r0, r1, #0, 2
    b170:	03030708 	movweq	r0, #14088	; 0x3708
    b174:	00030709 	andeq	r0, r3, r9, lsl #14
    b178:	3c911300 	ldccc	3, cr1, [r1], {0}
    b17c:	07070000 	streq	r0, [r7, -r0]
    b180:	008f0703 	addeq	r0, pc, r3, lsl #14
    b184:	13000000 	movwne	r0, #0
    b188:	00000fc2 	andeq	r0, r0, r2, asr #31
    b18c:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    b190:	000000c2 	andeq	r0, r0, r2, asr #1
    b194:	0c0e0004 	stceq	0, cr0, [lr], {4}
    b198:	0700000a 	streq	r0, [r0, -sl]
    b19c:	e0030309 	and	r0, r3, r9, lsl #6
    b1a0:	14000002 	strne	r0, [r0], #-2
    b1a4:	00000020 	andeq	r0, r0, r0, lsr #32
    b1a8:	030b0730 	movweq	r0, #46896	; 0xb730
    b1ac:	00037708 	andeq	r7, r3, r8, lsl #14
    b1b0:	1f191300 	svcne	0x00191300
    b1b4:	14070000 	strne	r0, [r7], #-0
    b1b8:	008f0803 	addeq	r0, pc, r3, lsl #16
    b1bc:	13000000 	movwne	r0, #0
    b1c0:	00000bea 	andeq	r0, r0, sl, ror #23
    b1c4:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    b1c8:	0000008f 	andeq	r0, r0, pc, lsl #1
    b1cc:	4c7e1302 	ldclmi	3, cr1, [lr], #-8
    b1d0:	16070000 	strne	r0, [r7], -r0
    b1d4:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    b1d8:	13040000 	movwne	r0, #16384	; 0x4000
    b1dc:	00004744 	andeq	r4, r0, r4, asr #14
    b1e0:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    b1e4:	000000c2 	andeq	r0, r0, r2, asr #1
    b1e8:	000f1308 	andeq	r1, pc, r8, lsl #6
    b1ec:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    b1f0:	03770f03 	cmneq	r7, #3, 30
    b1f4:	130c0000 	movwne	r0, #49152	; 0xc000
    b1f8:	00000960 	andeq	r0, r0, r0, ror #18
    b1fc:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    b200:	00000387 	andeq	r0, r0, r7, lsl #7
    b204:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    b208:	87000003 	strhi	r0, [r0, -r3]
    b20c:	15000003 	strne	r0, [r0, #-3]
    b210:	00000088 	andeq	r0, r0, r8, lsl #1
    b214:	040b0003 	streq	r0, [fp], #-3
    b218:	00000314 	andeq	r0, r0, r4, lsl r3
    b21c:	000bdf0e 	andeq	sp, fp, lr, lsl #30
    b220:	031c0700 	tsteq	ip, #0, 14
    b224:	0003141b 	andeq	r1, r3, fp, lsl r4
    b228:	0bbf1100 	bleq	fefcf630 <_estack+0xdefca630>
    b22c:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    b230:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    b234:	01010000 	mrseq	r0, (UNDEF: 1)
    b238:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    b23c:	01160000 	tsteq	r6, r0
    b240:	00002825 	andeq	r2, r0, r5, lsr #16
    b244:	01011d01 	tsteq	r1, r1, lsl #26
    b248:	000030d8 	ldrdeq	r3, [r0], -r8
    b24c:	00003148 	andeq	r3, r0, r8, asr #2
    b250:	042a9c01 	strteq	r9, [sl], #-3073	; 0xfffff3ff
    b254:	36170000 	ldrcc	r0, [r7], -r0
    b258:	0100000c 	tsteq	r0, ip
    b25c:	008f011d 	addeq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    b260:	2dc30000 	stclcs	0, cr0, [r3]
    b264:	44180000 	ldrmi	r0, [r8], #-0
    b268:	01000047 	tsteq	r0, r7, asr #32
    b26c:	042a011d 	strteq	r0, [sl], #-285	; 0xfffffee3
    b270:	2dec0000 	stclcs	0, cr0, [ip]
    b274:	31190000 	tstcc	r9, r0
    b278:	01000028 	tsteq	r0, r8, lsr #32
    b27c:	801a0130 	andshi	r0, sl, r0, lsr r1
    b280:	1b00000f 	blne	b2c4 <__exidx_end+0x57e8>
    b284:	00727470 	rsbseq	r7, r2, r0, ror r4
    b288:	2a152201 	bcs	553a94 <__ccfg+0x533aec>
    b28c:	05000004 	streq	r0, [r0, #-4]
    b290:	00063803 	andeq	r3, r6, r3, lsl #16
    b294:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    b298:	2301006e 	movwcs	r0, #4206	; 0x106e
    b29c:	0000810d 	andeq	r8, r0, sp, lsl #2
    b2a0:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    b2a4:	18200006 	stmdane	r0!, {r1, r2}
    b2a8:	000027da 	ldrdeq	r2, [r0], -sl
    b2ac:	81062401 	tsthi	r6, r1, lsl #8
    b2b0:	16000000 	strne	r0, [r0], -r0
    b2b4:	0000002e 	andeq	r0, r0, lr, lsr #32
    b2b8:	96040b00 	strls	r0, [r4], -r0, lsl #22
    b2bc:	00000001 	andeq	r0, r0, r1
    b2c0:	00000440 	andeq	r0, r0, r0, asr #8
    b2c4:	29810003 	stmibcs	r1, {r0, r1}
    b2c8:	01040000 	mrseq	r0, (UNDEF: 4)
    b2cc:	000000a3 	andeq	r0, r0, r3, lsr #1
    b2d0:	0028470c 	eoreq	r4, r8, ip, lsl #14
    b2d4:	000dff00 	andeq	pc, sp, r0, lsl #30
    b2d8:	000fc800 	andeq	ip, pc, r0, lsl #16
    b2dc:	00000000 	andeq	r0, r0, r0
    b2e0:	0067cf00 	rsbeq	ip, r7, r0, lsl #30
    b2e4:	06010200 	streq	r0, [r1], -r0, lsl #4
    b2e8:	00000c60 	andeq	r0, r0, r0, ror #24
    b2ec:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
    b2f0:	0200000a 	andeq	r0, r0, #10
    b2f4:	08000504 	stmdaeq	r0, {r2, r8, sl}
    b2f8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b2fc:	0007fb05 	andeq	pc, r7, r5, lsl #22
    b300:	2a110300 	bcs	44bf08 <__ccfg+0x42bf60>
    b304:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    b308:	00004d18 	andeq	r4, r0, r8, lsl sp
    b30c:	08010200 	stmdaeq	r1, {r9}
    b310:	00000c5e 	andeq	r0, r0, lr, asr ip
    b314:	002e0703 	eoreq	r0, lr, r3, lsl #14
    b318:	19310200 	ldmdbne	r1!, {r9}
    b31c:	00000060 	andeq	r0, r0, r0, rrx
    b320:	5b070202 	blpl	1cbb30 <__ccfg+0x1abb88>
    b324:	0300000d 	movweq	r0, #13
    b328:	000029a9 	andeq	r2, r0, r9, lsr #19
    b32c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    b330:	02000000 	andeq	r0, r0, #0
    b334:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    b338:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b33c:	00042307 	andeq	r2, r4, r7, lsl #6
    b340:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    b344:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b348:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    b34c:	03000004 	movweq	r0, #4
    b350:	000028f0 	strdeq	r2, [r0], -r0
    b354:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    b358:	05000000 	streq	r0, [r0, #-0]
    b35c:	0000008f 	andeq	r0, r0, pc, lsl #1
    b360:	001db703 	andseq	fp, sp, r3, lsl #14
    b364:	122b0300 	eorne	r0, fp, #0, 6
    b368:	00000041 	andeq	r0, r0, r1, asr #32
    b36c:	0000a006 	andeq	sl, r0, r6
    b370:	29420300 	stmdbcs	r2, {r8, r9}^
    b374:	2c030000 	stccs	0, cr0, [r3], {-0}
    b378:	00006712 	andeq	r6, r0, r2, lsl r7
    b37c:	00b10500 	adcseq	r0, r1, r0, lsl #10
    b380:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    b384:	03000006 	movweq	r0, #6
    b388:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b38c:	b7030000 	strlt	r0, [r3, -r0]
    b390:	0300000b 	movweq	r0, #11
    b394:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    b398:	04070000 	streq	r0, [r7], #-0
    b39c:	0000008f 	andeq	r0, r0, pc, lsl #1
    b3a0:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    b3a4:	00016e09 	andeq	r6, r1, r9, lsl #28
    b3a8:	002b0900 	eoreq	r0, fp, r0, lsl #18
    b3ac:	34030000 	strcc	r0, [r3], #-0
    b3b0:	0000a007 	andeq	sl, r0, r7
    b3b4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b3b8:	064f0900 	strbeq	r0, [pc], -r0, lsl #18
    b3bc:	35030000 	strcc	r0, [r3, #-0]
    b3c0:	0000a003 	andeq	sl, r0, r3
    b3c4:	06010100 	streq	r0, [r1], -r0, lsl #2
    b3c8:	02de0900 	sbcseq	r0, lr, #0, 18
    b3cc:	36030000 	strcc	r0, [r3], -r0
    b3d0:	0000a003 	andeq	sl, r0, r3
    b3d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b3d8:	06ba0900 	ldrteq	r0, [sl], r0, lsl #18
    b3dc:	37030000 	strcc	r0, [r3, -r0]
    b3e0:	0000a003 	andeq	sl, r0, r3
    b3e4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b3e8:	0aa20900 	beq	fe88d7f0 <_estack+0xde8887f0>
    b3ec:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    b3f0:	0000a003 	andeq	sl, r0, r3
    b3f4:	00040100 	andeq	r0, r4, r0, lsl #2
    b3f8:	065e0a00 	ldrbeq	r0, [lr], -r0, lsl #20
    b3fc:	3a030000 	bcc	cb404 <__ccfg+0xab45c>
    b400:	0000a007 	andeq	sl, r0, r7
    b404:	fe0a0100 	cdp2	1, 0, cr0, cr10, cr0, {0}
    b408:	03000008 	movweq	r0, #8
    b40c:	00a0033c 	adceq	r0, r0, ip, lsr r3
    b410:	0a020000 	beq	8b418 <__ccfg+0x6b470>
    b414:	00000f2f 	andeq	r0, r0, pc, lsr #30
    b418:	a0033d03 	andge	r3, r3, r3, lsl #26
    b41c:	03000000 	movweq	r0, #0
    b420:	0009160a 	andeq	r1, r9, sl, lsl #12
    b424:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    b428:	000000b1 	strheq	r0, [r0], -r1
    b42c:	14030004 	strne	r0, [r3], #-4
    b430:	03000003 	movweq	r0, #3
    b434:	00e00341 	rsceq	r0, r0, r1, asr #6
    b438:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    b43c:	0b000001 	bleq	b448 <__exidx_end+0x596c>
    b440:	000006c1 	andeq	r0, r0, r1, asr #13
    b444:	7a1a4303 	bvc	69c058 <__ccfg+0x67c0b0>
    b448:	01000001 	tsteq	r0, r1
    b44c:	01970b01 	orrseq	r0, r7, r1, lsl #22
    b450:	45030000 	strmi	r0, [r3, #-0]
    b454:	00019b0e 	andeq	r9, r1, lr, lsl #22
    b458:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b45c:	0001a104 	andeq	sl, r1, r4, lsl #2
    b460:	08010200 	stmdaeq	r1, {r9}
    b464:	00000c67 	andeq	r0, r0, r7, ror #24
    b468:	0001a105 	andeq	sl, r1, r5, lsl #2
    b46c:	031d0b00 	tsteq	sp, #0, 22
    b470:	45030000 	strmi	r0, [r3, #-0]
    b474:	00019b1e 	andeq	r9, r1, lr, lsl fp
    b478:	08010100 	stmdaeq	r1, {r8}
    b47c:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    b480:	000001ec 	andeq	r0, r0, ip, ror #3
    b484:	000ccd0a 	andeq	ip, ip, sl, lsl #26
    b488:	0b900400 	bleq	fe40c490 <_estack+0xde407490>
    b48c:	00000067 	andeq	r0, r0, r7, rrx
    b490:	106a0a00 	rsbne	r0, sl, r0, lsl #20
    b494:	91040000 	mrsls	r0, (UNDEF: 4)
    b498:	00008f08 	andeq	r8, r0, r8, lsl #30
    b49c:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
    b4a0:	04000001 	streq	r0, [r0], #-1
    b4a4:	00ac1092 	umlaleq	r1, ip, r2, r0
    b4a8:	00060000 	andeq	r0, r6, r0
    b4ac:	000cc103 	andeq	ip, ip, r3, lsl #2
    b4b0:	03930400 	orrseq	r0, r3, #0, 8
    b4b4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    b4b8:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    b4bc:	00020300 	andeq	r0, r2, r0, lsl #6
    b4c0:	0b000d00 	bleq	e8c8 <__exidx_end+0x8dec>
    b4c4:	00000940 	andeq	r0, r0, r0, asr #18
    b4c8:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    b4cc:	01000001 	tsteq	r0, r1
    b4d0:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    b4d4:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    b4d8:	1d090000 	stcne	0, cr0, [r9, #-0]
    b4dc:	05000009 	streq	r0, [r0, #-9]
    b4e0:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    b4e4:	07010000 	streq	r0, [r1, -r0]
    b4e8:	cf090001 	svcgt	0x00090001
    b4ec:	05000005 	streq	r0, [r0, #-5]
    b4f0:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    b4f4:	01010000 	mrseq	r0, (UNDEF: 1)
    b4f8:	03000000 	movweq	r0, #0
    b4fc:	00000aae 	andeq	r0, r0, lr, lsr #21
    b500:	11039605 	tstne	r3, r5, lsl #12
    b504:	05000002 	streq	r0, [r0, #-2]
    b508:	0000023b 	andeq	r0, r0, fp, lsr r2
    b50c:	0002470c 	andeq	r4, r2, ip, lsl #14
    b510:	00025700 	andeq	r5, r2, r0, lsl #14
    b514:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b518:	0000024c 	andeq	r0, r0, ip, asr #4
    b51c:	0003ac0b 	andeq	sl, r3, fp, lsl #24
    b520:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    b524:	00000257 	andeq	r0, r0, r7, asr r2
    b528:	9b0c0101 	blls	30b934 <__ccfg+0x2eb98c>
    b52c:	75000000 	strvc	r0, [r0, #-0]
    b530:	0d000002 	stceq	0, cr0, [r0, #-8]
    b534:	026a0500 	rsbeq	r0, sl, #0, 10
    b538:	110b0000 	mrsne	r0, (UNDEF: 11)
    b53c:	06000006 	streq	r0, [r0], -r6
    b540:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    b544:	01010000 	mrseq	r0, (UNDEF: 1)
    b548:	0008e00b 	andeq	lr, r8, fp
    b54c:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    b550:	000000b1 	strheq	r0, [r0], -r1
    b554:	750e0101 	strvc	r0, [lr, #-257]	; 0xfffffeff
    b558:	0700000c 	streq	r0, [r0, -ip]
    b55c:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    b560:	07000002 	streq	r0, [r0, -r2]
    b564:	0002a904 	andeq	sl, r2, r4, lsl #18
    b568:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    b56c:	10000002 	andne	r0, r0, r2
    b570:	0000008f 	andeq	r0, r0, pc, lsl #1
    b574:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    b578:	02c00000 	sbceq	r0, r0, #0
    b57c:	000d0000 	andeq	r0, sp, r0
    b580:	0002b505 	andeq	fp, r2, r5, lsl #10
    b584:	09e91100 	stmibeq	r9!, {r8, ip}^
    b588:	7f070000 	svcvc	0x00070000
    b58c:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    b590:	01010000 	mrseq	r0, (UNDEF: 1)
    b594:	00039811 	andeq	r9, r3, r1, lsl r8
    b598:	01820700 	orreq	r0, r2, r0, lsl #14
    b59c:	0000bd14 	andeq	fp, r0, r4, lsl sp
    b5a0:	11010100 	mrsne	r0, (UNDEF: 17)
    b5a4:	00000370 	andeq	r0, r0, r0, ror r3
    b5a8:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    b5ac:	000000b1 	strheq	r0, [r0], -r1
    b5b0:	08120101 	ldmdaeq	r2, {r0, r8}
    b5b4:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    b5b8:	00000319 	andeq	r0, r0, r9, lsl r3
    b5bc:	003c9113 	eorseq	r9, ip, r3, lsl r1
    b5c0:	03070700 	movweq	r0, #30464	; 0x7700
    b5c4:	00008f07 	andeq	r8, r0, r7, lsl #30
    b5c8:	c2130000 	andsgt	r0, r3, #0
    b5cc:	0700000f 	streq	r0, [r0, -pc]
    b5d0:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    b5d4:	04000000 	streq	r0, [r0], #-0
    b5d8:	0a0c0e00 	beq	30ede0 <__ccfg+0x2eee38>
    b5dc:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    b5e0:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    b5e4:	20140000 	andscs	r0, r4, r0
    b5e8:	30000000 	andcc	r0, r0, r0
    b5ec:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    b5f0:	00000389 	andeq	r0, r0, r9, lsl #7
    b5f4:	001f1913 	andseq	r1, pc, r3, lsl r9	; <UNPREDICTABLE>
    b5f8:	03140700 	tsteq	r4, #0, 14
    b5fc:	00008f08 	andeq	r8, r0, r8, lsl #30
    b600:	ea130000 	b	4cb608 <__ccfg+0x4ab660>
    b604:	0700000b 	streq	r0, [r0, -fp]
    b608:	8f080315 	svchi	0x00080315
    b60c:	02000000 	andeq	r0, r0, #0
    b610:	004c7e13 	subeq	r7, ip, r3, lsl lr
    b614:	03160700 	tsteq	r6, #0, 14
    b618:	0002960b 	andeq	r9, r2, fp, lsl #12
    b61c:	44130400 	ldrmi	r0, [r3], #-1024	; 0xfffffc00
    b620:	07000047 	streq	r0, [r0, -r7, asr #32]
    b624:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    b628:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b62c:	00000f13 	andeq	r0, r0, r3, lsl pc
    b630:	03180700 	tsteq	r8, #0, 14
    b634:	0003890f 	andeq	r8, r3, pc, lsl #18
    b638:	60130c00 	andsvs	r0, r3, r0, lsl #24
    b63c:	07000009 	streq	r0, [r0, -r9]
    b640:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    b644:	2c000003 	stccs	0, cr0, [r0], {3}
    b648:	03190c00 	tsteq	r9, #0, 24
    b64c:	03990000 	orrseq	r0, r9, #0
    b650:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    b654:	03000000 	movweq	r0, #0
    b658:	26040700 	strcs	r0, [r4], -r0, lsl #14
    b65c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    b660:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b664:	1b031c07 	blne	d2688 <__ccfg+0xb26e0>
    b668:	00000326 	andeq	r0, r0, r6, lsr #6
    b66c:	000bbf11 	andeq	fp, fp, r1, lsl pc
    b670:	031e0700 	tsteq	lr, #0, 14
    b674:	0003bb14 	andeq	fp, r3, r4, lsl fp
    b678:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b67c:	00039f04 	andeq	r9, r3, r4, lsl #30
    b680:	1e4e1600 	cdpne	6, 4, cr1, cr14, cr0, {0}
    b684:	0d010000 	stceq	0, cr0, [r1, #-0]
    b688:	00019b07 	andeq	r9, r1, r7, lsl #22
    b68c:	03050100 	movweq	r0, #20736	; 0x5100
    b690:	2000063c 	andcs	r0, r0, ip, lsr r6
    b694:	283c0117 	ldmdacs	ip!, {r0, r1, r2, r4, r8}
    b698:	23010000 	movwcs	r0, #4096	; 0x1000
    b69c:	31480101 	cmpcc	r8, r1, lsl #2
    b6a0:	32640000 	rsbcc	r0, r4, #0
    b6a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    b6a8:	000c3618 	andeq	r3, ip, r8, lsl r6
    b6ac:	01230100 			; <UNDEFINED> instruction: 0x01230100
    b6b0:	0000008f 	andeq	r0, r0, pc, lsl #1
    b6b4:	00002e29 	andeq	r2, r0, r9, lsr #28
    b6b8:	00474419 	subeq	r4, r7, r9, lsl r4
    b6bc:	01230100 			; <UNDEFINED> instruction: 0x01230100
    b6c0:	000000ce 	andeq	r0, r0, lr, asr #1
    b6c4:	00002e47 	andeq	r2, r0, r7, asr #28
    b6c8:	000fa81a 	andeq	sl, pc, sl, lsl r8	; <UNPREDICTABLE>
    b6cc:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    b6d0:	28010072 	stmdacs	r1, {r1, r4, r5, r6}
    b6d4:	00019b0f 	andeq	r9, r1, pc, lsl #22
    b6d8:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    b6dc:	1b200006 	blne	80b6fc <__ccfg+0x7eb754>
    b6e0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    b6e4:	810d2901 	tsthi	sp, r1, lsl #18
    b6e8:	05000000 	streq	r0, [r0, #-0]
    b6ec:	00064003 	andeq	r4, r6, r3
    b6f0:	27da1920 	ldrbcs	r1, [sl, r0, lsr #18]
    b6f4:	2a010000 	bcs	4b6fc <__ccfg+0x2b754>
    b6f8:	00008106 	andeq	r8, r0, r6, lsl #2
    b6fc:	002e9d00 	eoreq	r9, lr, r0, lsl #26
    b700:	00000000 	andeq	r0, r0, r0
    b704:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    b708:	2af90003 	bcs	ffe4b71c <_estack+0xdfe4671c>
    b70c:	01040000 	mrseq	r0, (UNDEF: 4)
    b710:	000000a3 	andeq	r0, r0, r3, lsr #1
    b714:	00288b0c 	eoreq	r8, r8, ip, lsl #22
    b718:	000dff00 	andeq	pc, sp, r0, lsl #30
    b71c:	00105000 	andseq	r5, r0, r0
    b720:	00000000 	andeq	r0, r0, r0
    b724:	006a2100 	rsbeq	r2, sl, r0, lsl #2
    b728:	06010200 	streq	r0, [r1], -r0, lsl #4
    b72c:	00000c60 	andeq	r0, r0, r0, ror #24
    b730:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
    b734:	0200000a 	andeq	r0, r0, #10
    b738:	08000504 	stmdaeq	r0, {r2, r8, sl}
    b73c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b740:	0007fb05 	andeq	pc, r7, r5, lsl #22
    b744:	2a110300 	bcs	44c34c <__ccfg+0x42c3a4>
    b748:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    b74c:	00004d18 	andeq	r4, r0, r8, lsl sp
    b750:	08010200 	stmdaeq	r1, {r9}
    b754:	00000c5e 	andeq	r0, r0, lr, asr ip
    b758:	002e0703 	eoreq	r0, lr, r3, lsl #14
    b75c:	19310200 	ldmdbne	r1!, {r9}
    b760:	00000060 	andeq	r0, r0, r0, rrx
    b764:	5b070202 	blpl	1cbf74 <__ccfg+0x1abfcc>
    b768:	0300000d 	movweq	r0, #13
    b76c:	000029a9 	andeq	r2, r0, r9, lsr #19
    b770:	73193402 	tstvc	r9, #33554432	; 0x2000000
    b774:	02000000 	andeq	r0, r0, #0
    b778:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    b77c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b780:	00042307 	andeq	r2, r4, r7, lsl #6
    b784:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    b788:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b78c:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    b790:	03000004 	movweq	r0, #4
    b794:	00000519 	andeq	r0, r0, r9, lsl r5
    b798:	9b1b2803 	blls	6d57ac <__ccfg+0x6b5804>
    b79c:	05000000 	streq	r0, [r0, #-0]
    b7a0:	00000b93 	muleq	r0, r3, fp
    b7a4:	b3000904 	movwlt	r0, #2308	; 0x904
    b7a8:	06000000 	streq	r0, [r0], -r0
    b7ac:	00000870 	andeq	r0, r0, r0, ror r8
    b7b0:	000000b3 	strheq	r0, [r0], -r3
    b7b4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    b7b8:	0b950304 	bleq	fe54c3d0 <_estack+0xde5473d0>
    b7bc:	63030000 	movwvs	r0, #12288	; 0x3000
    b7c0:	00008f18 	andeq	r8, r0, r8, lsl pc
    b7c4:	28f00300 	ldmcs	r0!, {r8, r9}^
    b7c8:	27040000 	strcs	r0, [r4, -r0]
    b7cc:	00005412 	andeq	r5, r0, r2, lsl r4
    b7d0:	00c10800 	sbceq	r0, r1, r0, lsl #16
    b7d4:	b7030000 	strlt	r0, [r3, -r0]
    b7d8:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    b7dc:	0041122b 	subeq	r1, r1, fp, lsr #4
    b7e0:	d2090000 	andle	r0, r9, #0
    b7e4:	03000000 	movweq	r0, #0
    b7e8:	00002942 	andeq	r2, r0, r2, asr #18
    b7ec:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    b7f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b7f4:	000000e3 	andeq	r0, r0, r3, ror #1
    b7f8:	00064903 	andeq	r4, r6, r3, lsl #18
    b7fc:	122d0400 	eorne	r0, sp, #0, 8
    b800:	00000067 	andeq	r0, r0, r7, rrx
    b804:	000bb703 	andeq	fp, fp, r3, lsl #14
    b808:	102e0400 	eorne	r0, lr, r0, lsl #8
    b80c:	0000010c 	andeq	r0, r0, ip, lsl #2
    b810:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    b814:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    b818:	a0093204 	andge	r3, r9, r4, lsl #4
    b81c:	0c000001 	stceq	0, cr0, [r0], {1}
    b820:	0000002b 	andeq	r0, r0, fp, lsr #32
    b824:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    b828:	01000000 	mrseq	r0, (UNDEF: 0)
    b82c:	0c000701 	stceq	7, cr0, [r0], {1}
    b830:	0000064f 	andeq	r0, r0, pc, asr #12
    b834:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    b838:	01000000 	mrseq	r0, (UNDEF: 0)
    b83c:	0c000601 	stceq	6, cr0, [r0], {1}
    b840:	000002de 	ldrdeq	r0, [r0], -lr
    b844:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    b848:	01000000 	mrseq	r0, (UNDEF: 0)
    b84c:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    b850:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    b854:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    b858:	01000000 	mrseq	r0, (UNDEF: 0)
    b85c:	0c000401 	cfstrseq	mvf0, [r0], {1}
    b860:	00000aa2 	andeq	r0, r0, r2, lsr #21
    b864:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    b868:	01000000 	mrseq	r0, (UNDEF: 0)
    b86c:	0d000004 	stceq	0, cr0, [r0, #-16]
    b870:	0000065e 	andeq	r0, r0, lr, asr r6
    b874:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    b878:	01000000 	mrseq	r0, (UNDEF: 0)
    b87c:	0008fe0d 	andeq	pc, r8, sp, lsl #28
    b880:	033c0400 	teqeq	ip, #0, 8
    b884:	000000d2 	ldrdeq	r0, [r0], -r2
    b888:	0f2f0d02 	svceq	0x002f0d02
    b88c:	3d040000 	stccc	0, cr0, [r4, #-0]
    b890:	0000d203 	andeq	sp, r0, r3, lsl #4
    b894:	160d0300 	strne	r0, [sp], -r0, lsl #6
    b898:	04000009 	streq	r0, [r0], #-9
    b89c:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    b8a0:	00040000 	andeq	r0, r4, r0
    b8a4:	00031403 	andeq	r1, r3, r3, lsl #8
    b8a8:	03410400 	movteq	r0, #5120	; 0x1400
    b8ac:	00000112 	andeq	r0, r0, r2, lsl r1
    b8b0:	0001a009 	andeq	sl, r1, r9
    b8b4:	06c10e00 	strbeq	r0, [r1], r0, lsl #28
    b8b8:	43040000 	movwmi	r0, #16384	; 0x4000
    b8bc:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    b8c0:	0e010100 	adfeqs	f0, f1, f0
    b8c4:	00000197 	muleq	r0, r7, r1
    b8c8:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    b8cc:	01000001 	tsteq	r0, r1
    b8d0:	d3040a01 	movwle	r0, #18945	; 0x4a01
    b8d4:	02000001 	andeq	r0, r0, #1
    b8d8:	0c670801 	stcleq	8, cr0, [r7], #-4
    b8dc:	d3080000 	movwle	r0, #32768	; 0x8000
    b8e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b8e4:	0000031d 	andeq	r0, r0, sp, lsl r3
    b8e8:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    b8ec:	01000001 	tsteq	r0, r1
    b8f0:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    b8f4:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    b8f8:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    b8fc:	0500000c 	streq	r0, [r0, #-12]
    b900:	00670b90 	mlseq	r7, r0, fp, r0
    b904:	0d000000 	stceq	0, cr0, [r0, #-0]
    b908:	0000106a 	andeq	r1, r0, sl, rrx
    b90c:	c1089105 	tstgt	r8, r5, lsl #2
    b910:	04000000 	streq	r0, [r0], #-0
    b914:	0001bc0d 	andeq	fp, r1, sp, lsl #24
    b918:	10920500 	addsne	r0, r2, r0, lsl #10
    b91c:	000000de 	ldrdeq	r0, [r0], -lr
    b920:	c1030006 	tstgt	r3, r6
    b924:	0500000c 	streq	r0, [r0, #-12]
    b928:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    b92c:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    b930:	35000002 	strcc	r0, [r0, #-2]
    b934:	10000002 	andne	r0, r0, r2
    b938:	09400e00 	stmdbeq	r0, {r9, sl, fp}^
    b93c:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    b940:	00022a0f 	andeq	r2, r2, pc, lsl #20
    b944:	0b010100 	bleq	4bd4c <__ccfg+0x2bda4>
    b948:	09910601 	ldmibeq	r1, {r0, r9, sl}
    b94c:	0000026d 	andeq	r0, r0, sp, ror #4
    b950:	00091d0c 	andeq	r1, r9, ip, lsl #26
    b954:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    b958:	000000d2 	ldrdeq	r0, [r0], -r2
    b95c:	00010701 	andeq	r0, r1, r1, lsl #14
    b960:	0005cf0c 	andeq	ip, r5, ip, lsl #30
    b964:	03940600 	orrseq	r0, r4, #0, 12
    b968:	000000d2 	ldrdeq	r0, [r0], -r2
    b96c:	00000101 	andeq	r0, r0, r1, lsl #2
    b970:	0aae0300 	beq	feb8c578 <_estack+0xdeb87578>
    b974:	96060000 	strls	r0, [r6], -r0
    b978:	00024303 	andeq	r4, r2, r3, lsl #6
    b97c:	026d0800 	rsbeq	r0, sp, #0, 16
    b980:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    b984:	89000002 	stmdbhi	r0, {r1}
    b988:	10000002 	andne	r0, r0, r2
    b98c:	027e0800 	rsbseq	r0, lr, #0, 16
    b990:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    b994:	06000003 	streq	r0, [r0], -r3
    b998:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    b99c:	01010000 	mrseq	r0, (UNDEF: 1)
    b9a0:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    b9a4:	0002a700 	andeq	sl, r2, r0, lsl #14
    b9a8:	08001000 	stmdaeq	r0, {ip}
    b9ac:	0000029c 	muleq	r0, ip, r2
    b9b0:	0006110e 	andeq	r1, r6, lr, lsl #2
    b9b4:	13060700 	movwne	r0, #26368	; 0x6700
    b9b8:	000002a7 	andeq	r0, r0, r7, lsr #5
    b9bc:	e00e0101 	and	r0, lr, r1, lsl #2
    b9c0:	05000008 	streq	r0, [r0, #-8]
    b9c4:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    b9c8:	01010000 	mrseq	r0, (UNDEF: 1)
    b9cc:	000c7511 	andeq	r7, ip, r1, lsl r5
    b9d0:	016e0800 	cmneq	lr, r0, lsl #16
    b9d4:	0002d510 	andeq	sp, r2, r0, lsl r5
    b9d8:	db040a00 	blle	10e1e0 <__ccfg+0xee238>
    b9dc:	12000002 	andne	r0, r0, #2
    b9e0:	0002e701 	andeq	lr, r2, r1, lsl #14
    b9e4:	00c11300 	sbceq	r1, r1, r0, lsl #6
    b9e8:	0f000000 	svceq	0x00000000
    b9ec:	000001da 	ldrdeq	r0, [r0], -sl
    b9f0:	000002f2 	strdeq	r0, [r0], -r2
    b9f4:	e7080010 	smlad	r8, r0, r0, r0
    b9f8:	14000002 	strne	r0, [r0], #-2
    b9fc:	000009e9 	andeq	r0, r0, r9, ror #19
    ba00:	16017f08 	strne	r7, [r1], -r8, lsl #30
    ba04:	000002f2 	strdeq	r0, [r0], -r2
    ba08:	98140101 	ldmdals	r4, {r0, r8}
    ba0c:	08000003 	stmdaeq	r0, {r0, r1}
    ba10:	ef140182 	svc	0x00140182
    ba14:	01000000 	mrseq	r0, (UNDEF: 0)
    ba18:	03701401 	cmneq	r0, #16777216	; 0x1000000
    ba1c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    ba20:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    ba24:	01010000 	mrseq	r0, (UNDEF: 1)
    ba28:	03080815 	movweq	r0, #34837	; 0x8815
    ba2c:	034b0903 	movteq	r0, #47363	; 0xb903
    ba30:	91160000 	tstls	r6, r0
    ba34:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    ba38:	c1070307 	tstgt	r7, r7, lsl #6
    ba3c:	00000000 	andeq	r0, r0, r0
    ba40:	000fc216 	andeq	ip, pc, r6, lsl r2	; <UNPREDICTABLE>
    ba44:	03080800 	movweq	r0, #34816	; 0x8800
    ba48:	0000f408 	andeq	pc, r0, r8, lsl #8
    ba4c:	11000400 	tstne	r0, r0, lsl #8
    ba50:	00000a0c 	andeq	r0, r0, ip, lsl #20
    ba54:	03030908 	movweq	r0, #14600	; 0x3908
    ba58:	00000324 	andeq	r0, r0, r4, lsr #6
    ba5c:	00002017 	andeq	r2, r0, r7, lsl r0
    ba60:	0b083000 	bleq	217a68 <__ccfg+0x1f7ac0>
    ba64:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    ba68:	19160000 	ldmdbne	r6, {}	; <UNPREDICTABLE>
    ba6c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    ba70:	c1080314 	tstgt	r8, r4, lsl r3
    ba74:	00000000 	andeq	r0, r0, r0
    ba78:	000bea16 	andeq	lr, fp, r6, lsl sl
    ba7c:	03150800 	tsteq	r5, #0, 16
    ba80:	0000c108 	andeq	ip, r0, r8, lsl #2
    ba84:	7e160200 	cdpvc	2, 1, cr0, cr6, cr0, {0}
    ba88:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    ba8c:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    ba90:	04000002 	streq	r0, [r0], #-2
    ba94:	00474416 	subeq	r4, r7, r6, lsl r4
    ba98:	03170800 	tsteq	r7, #0, 16
    ba9c:	0000f409 	andeq	pc, r0, r9, lsl #8
    baa0:	0f160800 	svceq	0x00160800
    baa4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    baa8:	bb0f0318 	bllt	3cc710 <__ccfg+0x3ac768>
    baac:	0c000003 	stceq	0, cr0, [r0], {3}
    bab0:	00096016 	andeq	r6, r9, r6, lsl r0
    bab4:	03190800 	tsteq	r9, #0, 16
    bab8:	0003cb15 	andeq	ip, r3, r5, lsl fp
    babc:	0f002c00 	svceq	0x00002c00
    bac0:	0000034b 	andeq	r0, r0, fp, asr #6
    bac4:	000003cb 	andeq	r0, r0, fp, asr #7
    bac8:	00008818 	andeq	r8, r0, r8, lsl r8
    bacc:	0a000300 	beq	c6d4 <__exidx_end+0x6bf8>
    bad0:	00035804 	andeq	r5, r3, r4, lsl #16
    bad4:	0bdf1100 	bleq	ff7cfedc <_estack+0xdf7caedc>
    bad8:	1c080000 	stcne	0, cr0, [r8], {-0}
    badc:	03581b03 	cmpeq	r8, #3072	; 0xc00
    bae0:	bf140000 	svclt	0x00140000
    bae4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    bae8:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    baec:	01000003 	tsteq	r0, r3
    baf0:	d1040a01 	tstle	r4, r1, lsl #20
    baf4:	19000003 	stmdbne	r0, {r0, r1}
    baf8:	0028e201 	eoreq	lr, r8, r1, lsl #4
    bafc:	07910100 	ldreq	r0, [r1, r0, lsl #2]
    bb00:	0001cd01 	andeq	ip, r1, r1, lsl #26
    bb04:	0034b400 	eorseq	fp, r4, r0, lsl #8
    bb08:	00350400 	eorseq	r0, r5, r0, lsl #8
    bb0c:	689c0100 	ldmvs	ip, {r8}
    bb10:	1a000004 	bne	bb28 <__exidx_end+0x604c>
    bb14:	00736572 	rsbseq	r6, r3, r2, ror r5
    bb18:	cd149101 	ldfgtd	f1, [r4, #-4]
    bb1c:	bb000001 	bllt	bb28 <__exidx_end+0x604c>
    bb20:	1a00002e 	bne	bbe0 <__exidx_end+0x6104>
    bb24:	01006d66 	tsteq	r0, r6, ror #26
    bb28:	04682591 	strbteq	r2, [r8], #-1425	; 0xfffffa6f
    bb2c:	2f050000 	svccs	0x00050000
    bb30:	611a0000 	tstvs	sl, r0
    bb34:	91010071 	tstls	r1, r1, ror r0
    bb38:	0000b531 	andeq	fp, r0, r1, lsr r5
    bb3c:	002f4400 	eoreq	r4, pc, r0, lsl #8
    bb40:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    bb44:	9301006c 	movwls	r0, #4204	; 0x106c
    bb48:	0000c107 	andeq	ip, r0, r7, lsl #2
    bb4c:	002f7800 	eoreq	r7, pc, r0, lsl #16
    bb50:	00641b00 	rsbeq	r1, r4, r0, lsl #22
    bb54:	c10c9301 	tstgt	ip, r1, lsl #6
    bb58:	96000000 	strls	r0, [r0], -r0
    bb5c:	1c00002f 	stcne	0, cr0, [r0], {47}	; 0x2f
    bb60:	000028ca 	andeq	r2, r0, sl, asr #17
    bb64:	de019e01 	cdple	14, 0, cr9, cr1, cr1, {0}
    bb68:	00000034 	andeq	r0, r0, r4, lsr r0
    bb6c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    bb70:	011d0000 	tsteq	sp, r0
    bb74:	000028d5 	ldrdeq	r2, [r0], -r5
    bb78:	01060801 	tsteq	r6, r1, lsl #16
    bb7c:	000000c1 	andeq	r0, r0, r1, asr #1
    bb80:	00003284 	andeq	r3, r0, r4, lsl #5
    bb84:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
    bb88:	721a9c01 	andsvc	r9, sl, #256	; 0x100
    bb8c:	01007365 	tsteq	r0, r5, ror #6
    bb90:	01cd1a08 	biceq	r1, sp, r8, lsl #20
    bb94:	2fa90000 	svccs	0x00a90000
    bb98:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    bb9c:	24080100 	strcs	r0, [r8], #-256	; 0xffffff00
    bba0:	000000c1 	andeq	r0, r0, r1, asr #1
    bba4:	00002fbc 			; <UNDEFINED> instruction: 0x00002fbc
    bba8:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    bbac:	68330801 	ldmdavs	r3!, {r0, fp}
    bbb0:	cf000004 	svcgt	0x00000004
    bbb4:	1a00002f 	bne	bc78 <__exidx_end+0x619c>
    bbb8:	01007061 	tsteq	r0, r1, rrx
    bbbc:	00b53f08 	adcseq	r3, r5, r8, lsl #30
    bbc0:	2ff80000 	svccs	0x00f80000
    bbc4:	631b0000 	tstvs	fp, #0
    bbc8:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    bbcc:	000001d3 	ldrdeq	r0, [r0], -r3
    bbd0:	0000309a 	muleq	r0, sl, r0
    bbd4:	0100641e 	tsteq	r0, lr, lsl r4
    bbd8:	00c1070b 	sbceq	r0, r1, fp, lsl #14
    bbdc:	91040000 	mrsls	r0, (UNDEF: 4)
    bbe0:	1f062354 	svcne	0x00062354
    bbe4:	000028d0 	ldrdeq	r2, [r0], -r0
    bbe8:	01070d01 	tsteq	r7, r1, lsl #26
    bbec:	00003264 	andeq	r3, r0, r4, ror #4
    bbf0:	00003284 	andeq	r3, r0, r4, lsl #5
    bbf4:	7c059c01 	stcvc	12, cr9, [r5], {1}
    bbf8:	06082300 	streq	r2, [r8], -r0, lsl #6
    bbfc:	00000509 	andeq	r0, r0, r9, lsl #10
    bc00:	01006320 	tsteq	r0, r0, lsr #6
    bc04:	00c1120d 	sbceq	r1, r1, sp, lsl #4
    bc08:	50010000 	andpl	r0, r1, r0
    bc0c:	6f452100 	svcvs	0x00452100
    bc10:	8801006c 	stmdahi	r1, {r2, r3, r5, r6}
    bc14:	0032be01 	eorseq	fp, r2, r1, lsl #28
    bc18:	65522100 	ldrbvs	r2, [r2, #-256]	; 0xffffff00
    bc1c:	8b010074 	blhi	4bdf4 <__ccfg+0x2be4c>
    bc20:	00332001 	eorseq	r2, r3, r1
    bc24:	10002200 	andne	r2, r0, r0, lsl #4
    bc28:	05450000 	strbeq	r0, [r5, #-0]
    bc2c:	76230000 	strtvc	r0, [r3], -r0
    bc30:	01006c61 	tsteq	r0, r1, ror #24
    bc34:	00c10a3a 	sbceq	r0, r1, sl, lsr sl
    bc38:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    bc3c:	133a0100 	teqne	sl, #0, 2
    bc40:	00000081 	andeq	r0, r0, r1, lsl #1
    bc44:	00003180 	andeq	r3, r0, r0, lsl #3
    bc48:	0fd82200 	svceq	0x00d82200
    bc4c:	056d0000 	strbeq	r0, [sp, #-0]!
    bc50:	761b0000 	ldrvc	r0, [fp], -r0
    bc54:	01006c61 	tsteq	r0, r1, ror #24
    bc58:	00c10a46 	sbceq	r0, r1, r6, asr #20
    bc5c:	31930000 	orrscc	r0, r3, r0
    bc60:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    bc64:	0f460100 	svceq	0x00460100
    bc68:	000000c1 	andeq	r0, r0, r1, asr #1
    bc6c:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    bc70:	10382200 	eorsne	r2, r8, r0, lsl #4
    bc74:	05950000 	ldreq	r0, [r5]
    bc78:	761b0000 	ldrvc	r0, [fp], -r0
    bc7c:	01006c61 	tsteq	r0, r1, ror #24
    bc80:	00e30c55 	rsceq	r0, r3, r5, asr ip
    bc84:	31e50000 	mvncc	r0, r0
    bc88:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    bc8c:	11550100 	cmpne	r5, r0, lsl #2
    bc90:	000000e3 	andeq	r0, r0, r3, ror #1
    bc94:	000031f8 	strdeq	r3, [r0], -r8
    bc98:	34422400 	strbcc	r2, [r2], #-1024	; 0xfffffc00
    bc9c:	346c0000 	strbtcc	r0, [ip], #-0
    bca0:	05bf0000 	ldreq	r0, [pc, #0]!	; bca8 <__exidx_end+0x61cc>
    bca4:	761e0000 	ldrvc	r0, [lr], -r0
    bca8:	01006c61 	tsteq	r0, r1, ror #24
    bcac:	00e30c60 	rsceq	r0, r3, r0, ror #24
    bcb0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    bcb4:	0100691b 	tsteq	r0, fp, lsl r9
    bcb8:	00810a61 	addeq	r0, r1, r1, ror #20
    bcbc:	32210000 	eorcc	r0, r1, #0
    bcc0:	22000000 	andcs	r0, r0, #0
    bcc4:	00001020 	andeq	r1, r0, r0, lsr #32
    bcc8:	000005d9 	ldrdeq	r0, [r0], -r9
    bccc:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bcd0:	0a710100 	beq	1c4c0d8 <__ccfg+0x1c2c130>
    bcd4:	000000c1 	andeq	r0, r0, r1, asr #1
    bcd8:	00003234 	andeq	r3, r0, r4, lsr r2
    bcdc:	348a2500 	strcc	r2, [sl], #1280	; 0x500
    bce0:	34a60000 	strtcc	r0, [r6], #0
    bce4:	731b0000 	tstvc	fp, #0
    bce8:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    bcec:	0001cd0b 	andeq	ip, r1, fp, lsl #26
    bcf0:	00325400 	eorseq	r5, r2, r0, lsl #8
    bcf4:	00000000 	andeq	r0, r0, r0
    bcf8:	0000058f 	andeq	r0, r0, pc, lsl #11
    bcfc:	2d0b0003 	stccs	0, cr0, [fp, #-12]
    bd00:	01040000 	mrseq	r0, (UNDEF: 4)
    bd04:	000000a3 	andeq	r0, r0, r3, lsr #1
    bd08:	0028f50c 	eoreq	pc, r8, ip, lsl #10
    bd0c:	000dff00 	andeq	pc, sp, r0, lsl #30
    bd10:	0010f800 	andseq	pc, r0, r0, lsl #16
    bd14:	00000000 	andeq	r0, r0, r0
    bd18:	006de500 	rsbeq	lr, sp, r0, lsl #10
    bd1c:	06010200 	streq	r0, [r1], -r0, lsl #4
    bd20:	00000c60 	andeq	r0, r0, r0, ror #24
    bd24:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
    bd28:	0200000a 	andeq	r0, r0, #10
    bd2c:	08000504 	stmdaeq	r0, {r2, r8, sl}
    bd30:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    bd34:	0007fb05 	andeq	pc, r7, r5, lsl #22
    bd38:	2a110300 	bcs	44c940 <__ccfg+0x42c998>
    bd3c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    bd40:	00004d18 	andeq	r4, r0, r8, lsl sp
    bd44:	08010200 	stmdaeq	r1, {r9}
    bd48:	00000c5e 	andeq	r0, r0, lr, asr ip
    bd4c:	002e0703 	eoreq	r0, lr, r3, lsl #14
    bd50:	19310200 	ldmdbne	r1!, {r9}
    bd54:	00000060 	andeq	r0, r0, r0, rrx
    bd58:	5b070202 	blpl	1cc568 <__ccfg+0x1ac5c0>
    bd5c:	0300000d 	movweq	r0, #13
    bd60:	000029a9 	andeq	r2, r0, r9, lsr #19
    bd64:	73193402 	tstvc	r9, #33554432	; 0x2000000
    bd68:	02000000 	andeq	r0, r0, #0
    bd6c:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    bd70:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    bd74:	00042307 	andeq	r2, r4, r7, lsl #6
    bd78:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    bd7c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    bd80:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    bd84:	03000004 	movweq	r0, #4
    bd88:	00000519 	andeq	r0, r0, r9, lsl r5
    bd8c:	9b1b2803 	blls	6d5da0 <__ccfg+0x6b5df8>
    bd90:	05000000 	streq	r0, [r0, #-0]
    bd94:	00000b93 	muleq	r0, r3, fp
    bd98:	b3000904 	movwlt	r0, #2308	; 0x904
    bd9c:	06000000 	streq	r0, [r0], -r0
    bda0:	00000870 	andeq	r0, r0, r0, ror r8
    bda4:	000000b3 	strheq	r0, [r0], -r3
    bda8:	07000100 	streq	r0, [r0, -r0, lsl #2]
    bdac:	0b950304 	bleq	fe54c9c4 <_estack+0xde5479c4>
    bdb0:	63030000 	movwvs	r0, #12288	; 0x3000
    bdb4:	00008f18 	andeq	r8, r0, r8, lsl pc
    bdb8:	131d0300 	tstne	sp, #0, 6
    bdbc:	26040000 	strcs	r0, [r4], -r0
    bdc0:	00004112 	andeq	r4, r0, r2, lsl r1
    bdc4:	28f00300 	ldmcs	r0!, {r8, r9}^
    bdc8:	27040000 	strcs	r0, [r4, -r0]
    bdcc:	00005412 	andeq	r5, r0, r2, lsl r4
    bdd0:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    bdd4:	b7030000 	strlt	r0, [r3, -r0]
    bdd8:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    bddc:	0041122b 	subeq	r1, r1, fp, lsr #4
    bde0:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    bde4:	03000000 	movweq	r0, #0
    bde8:	00002942 	andeq	r2, r0, r2, asr #18
    bdec:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    bdf0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bdf4:	000000ef 	andeq	r0, r0, pc, ror #1
    bdf8:	00064903 	andeq	r4, r6, r3, lsl #18
    bdfc:	122d0400 	eorne	r0, sp, #0, 8
    be00:	00000067 	andeq	r0, r0, r7, rrx
    be04:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    be08:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    be0c:	a0093204 	andge	r3, r9, r4, lsl #4
    be10:	0c000001 	stceq	0, cr0, [r0], {1}
    be14:	0000002b 	andeq	r0, r0, fp, lsr #32
    be18:	de073404 	cdple	4, 0, cr3, cr7, cr4, {0}
    be1c:	01000000 	mrseq	r0, (UNDEF: 0)
    be20:	0c000701 	stceq	7, cr0, [r0], {1}
    be24:	0000064f 	andeq	r0, r0, pc, asr #12
    be28:	de033504 	cfsh32le	mvfx3, mvfx3, #4
    be2c:	01000000 	mrseq	r0, (UNDEF: 0)
    be30:	0c000601 	stceq	6, cr0, [r0], {1}
    be34:	000002de 	ldrdeq	r0, [r0], -lr
    be38:	de033604 	cfmadd32le	mvax0, mvfx3, mvfx3, mvfx4
    be3c:	01000000 	mrseq	r0, (UNDEF: 0)
    be40:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    be44:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    be48:	de033704 	cdple	7, 0, cr3, cr3, cr4, {0}
    be4c:	01000000 	mrseq	r0, (UNDEF: 0)
    be50:	0c000401 	cfstrseq	mvf0, [r0], {1}
    be54:	00000aa2 	andeq	r0, r0, r2, lsr #21
    be58:	de033804 	cdple	8, 0, cr3, cr3, cr4, {0}
    be5c:	01000000 	mrseq	r0, (UNDEF: 0)
    be60:	0d000004 	stceq	0, cr0, [r0, #-16]
    be64:	0000065e 	andeq	r0, r0, lr, asr r6
    be68:	de073a04 	vmlale.f32	s6, s14, s8
    be6c:	01000000 	mrseq	r0, (UNDEF: 0)
    be70:	0008fe0d 	andeq	pc, r8, sp, lsl #28
    be74:	033c0400 	teqeq	ip, #0, 8
    be78:	000000de 	ldrdeq	r0, [r0], -lr
    be7c:	0f2f0d02 	svceq	0x002f0d02
    be80:	3d040000 	stccc	0, cr0, [r4, #-0]
    be84:	0000de03 	andeq	sp, r0, r3, lsl #28
    be88:	160d0300 	strne	r0, [sp], -r0, lsl #6
    be8c:	04000009 	streq	r0, [r0], #-9
    be90:	00ef083f 	rsceq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    be94:	00040000 	andeq	r0, r4, r0
    be98:	00031403 	andeq	r1, r3, r3, lsl #8
    be9c:	03410400 	movteq	r0, #5120	; 0x1400
    bea0:	00000112 	andeq	r0, r0, r2, lsl r1
    bea4:	0001a009 	andeq	sl, r1, r9
    bea8:	06c10e00 	strbeq	r0, [r1], r0, lsl #28
    beac:	43040000 	movwmi	r0, #16384	; 0x4000
    beb0:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    beb4:	0e010100 	adfeqs	f0, f1, f0
    beb8:	00000197 	muleq	r0, r7, r1
    bebc:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    bec0:	01000001 	tsteq	r0, r1
    bec4:	d3040a01 	movwle	r0, #18945	; 0x4a01
    bec8:	02000001 	andeq	r0, r0, #1
    becc:	0c670801 	stcleq	8, cr0, [r7], #-4
    bed0:	d3080000 	movwle	r0, #32768	; 0x8000
    bed4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    bed8:	0000031d 	andeq	r0, r0, sp, lsl r3
    bedc:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    bee0:	01000001 	tsteq	r0, r1
    bee4:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    bee8:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    beec:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    bef0:	0500000c 	streq	r0, [r0, #-12]
    bef4:	00670b90 	mlseq	r7, r0, fp, r0
    bef8:	0d000000 	stceq	0, cr0, [r0, #-0]
    befc:	0000106a 	andeq	r1, r0, sl, rrx
    bf00:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    bf04:	04000000 	streq	r0, [r0], #-0
    bf08:	0001bc0d 	andeq	fp, r1, sp, lsl #24
    bf0c:	10920500 	addsne	r0, r2, r0, lsl #10
    bf10:	000000ea 	andeq	r0, r0, sl, ror #1
    bf14:	c1030006 	tstgt	r3, r6
    bf18:	0500000c 	streq	r0, [r0, #-12]
    bf1c:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    bf20:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    bf24:	35000002 	strcc	r0, [r0, #-2]
    bf28:	10000002 	andne	r0, r0, r2
    bf2c:	09400e00 	stmdbeq	r0, {r9, sl, fp}^
    bf30:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    bf34:	00022a0f 	andeq	r2, r2, pc, lsl #20
    bf38:	0b010100 	bleq	4c340 <__ccfg+0x2c398>
    bf3c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    bf40:	0000026d 	andeq	r0, r0, sp, ror #4
    bf44:	00091d0c 	andeq	r1, r9, ip, lsl #26
    bf48:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    bf4c:	000000de 	ldrdeq	r0, [r0], -lr
    bf50:	00010701 	andeq	r0, r1, r1, lsl #14
    bf54:	0005cf0c 	andeq	ip, r5, ip, lsl #30
    bf58:	03940600 	orrseq	r0, r4, #0, 12
    bf5c:	000000de 	ldrdeq	r0, [r0], -lr
    bf60:	00000101 	andeq	r0, r0, r1, lsl #2
    bf64:	0aae0300 	beq	feb8cb6c <_estack+0xdeb87b6c>
    bf68:	96060000 	strls	r0, [r6], -r0
    bf6c:	00024303 	andeq	r4, r2, r3, lsl #6
    bf70:	026d0800 	rsbeq	r0, sp, #0, 16
    bf74:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    bf78:	89000002 	stmdbhi	r0, {r1}
    bf7c:	10000002 	andne	r0, r0, r2
    bf80:	027e0800 	rsbseq	r0, lr, #0, 16
    bf84:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    bf88:	06000003 	streq	r0, [r0], -r3
    bf8c:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    bf90:	01010000 	mrseq	r0, (UNDEF: 1)
    bf94:	0000d90f 	andeq	sp, r0, pc, lsl #18
    bf98:	0002a700 	andeq	sl, r2, r0, lsl #14
    bf9c:	08001000 	stmdaeq	r0, {ip}
    bfa0:	0000029c 	muleq	r0, ip, r2
    bfa4:	0006110e 	andeq	r1, r6, lr, lsl #2
    bfa8:	13060700 	movwne	r0, #26368	; 0x6700
    bfac:	000002a7 	andeq	r0, r0, r7, lsr #5
    bfb0:	e00e0101 	and	r0, lr, r1, lsl #2
    bfb4:	05000008 	streq	r0, [r0, #-8]
    bfb8:	00ef0ec3 	rsceq	r0, pc, r3, asr #29
    bfbc:	01010000 	mrseq	r0, (UNDEF: 1)
    bfc0:	000c7511 	andeq	r7, ip, r1, lsl r5
    bfc4:	016e0800 	cmneq	lr, r0, lsl #16
    bfc8:	0002d510 	andeq	sp, r2, r0, lsl r5
    bfcc:	db040a00 	blle	10e7d4 <__ccfg+0xee82c>
    bfd0:	12000002 	andne	r0, r0, #2
    bfd4:	0002e701 	andeq	lr, r2, r1, lsl #14
    bfd8:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    bfdc:	0f000000 	svceq	0x00000000
    bfe0:	000001da 	ldrdeq	r0, [r0], -sl
    bfe4:	000002f2 	strdeq	r0, [r0], -r2
    bfe8:	e7080010 	smlad	r8, r0, r0, r0
    bfec:	14000002 	strne	r0, [r0], #-2
    bff0:	000009e9 	andeq	r0, r0, r9, ror #19
    bff4:	16017f08 	strne	r7, [r1], -r8, lsl #30
    bff8:	000002f2 	strdeq	r0, [r0], -r2
    bffc:	98140101 	ldmdals	r4, {r0, r8}
    c000:	08000003 	stmdaeq	r0, {r0, r1}
    c004:	fb140182 	blx	50c616 <__ccfg+0x4ec66e>
    c008:	01000000 	mrseq	r0, (UNDEF: 0)
    c00c:	03701401 	cmneq	r0, #16777216	; 0x1000000
    c010:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    c014:	00ef0e02 	rsceq	r0, pc, r2, lsl #28
    c018:	01010000 	mrseq	r0, (UNDEF: 1)
    c01c:	03080815 	movweq	r0, #34837	; 0x8815
    c020:	034b0903 	movteq	r0, #47363	; 0xb903
    c024:	91160000 	tstls	r6, r0
    c028:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    c02c:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    c030:	00000000 	andeq	r0, r0, r0
    c034:	000fc216 	andeq	ip, pc, r6, lsl r2	; <UNPREDICTABLE>
    c038:	03080800 	movweq	r0, #34816	; 0x8800
    c03c:	00010008 	andeq	r0, r1, r8
    c040:	11000400 	tstne	r0, r0, lsl #8
    c044:	00000a0c 	andeq	r0, r0, ip, lsl #20
    c048:	03030908 	movweq	r0, #14600	; 0x3908
    c04c:	00000324 	andeq	r0, r0, r4, lsr #6
    c050:	00002017 	andeq	r2, r0, r7, lsl r0
    c054:	0b083000 	bleq	21805c <__ccfg+0x1f80b4>
    c058:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    c05c:	19160000 	ldmdbne	r6, {}	; <UNPREDICTABLE>
    c060:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    c064:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    c068:	00000000 	andeq	r0, r0, r0
    c06c:	000bea16 	andeq	lr, fp, r6, lsl sl
    c070:	03150800 	tsteq	r5, #0, 16
    c074:	0000cd08 	andeq	ip, r0, r8, lsl #26
    c078:	7e160200 	cdpvc	2, 1, cr0, cr6, cr0, {0}
    c07c:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    c080:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    c084:	04000002 	streq	r0, [r0], #-2
    c088:	00474416 	subeq	r4, r7, r6, lsl r4
    c08c:	03170800 	tsteq	r7, #0, 16
    c090:	00010009 	andeq	r0, r1, r9
    c094:	0f160800 	svceq	0x00160800
    c098:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c09c:	bb0f0318 	bllt	3ccd04 <__ccfg+0x3acd5c>
    c0a0:	0c000003 	stceq	0, cr0, [r0], {3}
    c0a4:	00096016 	andeq	r6, r9, r6, lsl r0
    c0a8:	03190800 	tsteq	r9, #0, 16
    c0ac:	0003cb15 	andeq	ip, r3, r5, lsl fp
    c0b0:	0f002c00 	svceq	0x00002c00
    c0b4:	0000034b 	andeq	r0, r0, fp, asr #6
    c0b8:	000003cb 	andeq	r0, r0, fp, asr #7
    c0bc:	00008818 	andeq	r8, r0, r8, lsl r8
    c0c0:	0a000300 	beq	ccc8 <__exidx_end+0x71ec>
    c0c4:	00035804 	andeq	r5, r3, r4, lsl #16
    c0c8:	0bdf1100 	bleq	ff7d04d0 <_estack+0xdf7cb4d0>
    c0cc:	1c080000 	stcne	0, cr0, [r8], {-0}
    c0d0:	03581b03 	cmpeq	r8, #3072	; 0xc00
    c0d4:	bf140000 	svclt	0x00140000
    c0d8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    c0dc:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    c0e0:	01000003 	tsteq	r0, r3
    c0e4:	d1040a01 	tstle	r4, r1, lsl #20
    c0e8:	19000003 	stmdbne	r0, {r0, r1}
    c0ec:	00293401 	eoreq	r3, r9, r1, lsl #8
    c0f0:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    c0f4:	00008101 	andeq	r8, r0, r1, lsl #2
    c0f8:	00350400 	eorseq	r0, r5, r0, lsl #8
    c0fc:	00389400 	eorseq	r9, r8, r0, lsl #8
    c100:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    c104:	1a000005 	bne	c120 <__exidx_end+0x6644>
    c108:	00667562 	rsbeq	r7, r6, r2, ror #10
    c10c:	86180801 	ldrhi	r0, [r8], -r1, lsl #16
    c110:	67000005 	strvs	r0, [r0, -r5]
    c114:	1a000032 	bne	c1e4 <__exidx_end+0x6708>
    c118:	00746d66 	rsbseq	r6, r4, r6, ror #26
    c11c:	86290801 	strthi	r0, [r9], -r1, lsl #16
    c120:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    c124:	1a000034 	bne	c1fc <__exidx_end+0x6720>
    c128:	01007061 	tsteq	r0, r1, rrx
    c12c:	00b53608 	adcseq	r3, r5, r8, lsl #12
    c130:	34920000 	ldrcc	r0, [r2], #0
    c134:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
    c138:	0a010063 	beq	4c2cc <__ccfg+0x2c324>
    c13c:	00008106 	andeq	r8, r0, r6, lsl #2
    c140:	00352b00 	eorseq	r2, r5, r0, lsl #22
    c144:	28e81c00 	stmiacs	r8!, {sl, fp, ip}^
    c148:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    c14c:	293a1c11 	ldmdbcs	sl!, {r0, r4, sl, fp, ip}
    c150:	55010000 	strpl	r0, [r1, #-0]
    c154:	35c61d16 	strbcc	r1, [r6, #3350]	; 0xd16
    c158:	36360000 	ldrtcc	r0, [r6], -r0
    c15c:	04880000 	streq	r0, [r8], #0
    c160:	761e0000 	ldrvc	r0, [lr], -r0
    c164:	01007061 	tsteq	r0, r1, rrx
    c168:	010c114e 	tsteq	ip, lr, asr #2
    c16c:	56010000 	strpl	r0, [r1], -r0
    c170:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    c174:	c1114e01 	tstgt	r1, r1, lsl #28
    c178:	ac000000 	stcge	0, cr0, [r0], {-0}
    c17c:	00000035 	andeq	r0, r0, r5, lsr r0
    c180:	0036361d 	eorseq	r3, r6, sp, lsl r6
    c184:	00367e00 	eorseq	r7, r6, r0, lsl #28
    c188:	0004a400 	andeq	sl, r4, r0, lsl #8
    c18c:	61761e00 	cmnvs	r6, r0, lsl #28
    c190:	4f010070 	svcmi	0x00010070
    c194:	00010c11 	andeq	r0, r1, r1, lsl ip
    c198:	005e0100 	subseq	r0, lr, r0, lsl #2
    c19c:	0010a81f 	andseq	sl, r0, pc, lsl r8
    c1a0:	0004d500 	andeq	sp, r4, r0, lsl #10
    c1a4:	61761e00 	cmnvs	r6, r0, lsl #28
    c1a8:	50010070 	andpl	r0, r1, r0, ror r0
    c1ac:	00010c11 	andeq	r0, r1, r1, lsl ip
    c1b0:	205e0100 	subscs	r0, lr, r0, lsl #2
    c1b4:	01006364 	tsteq	r0, r4, ror #6
    c1b8:	00811150 	addeq	r1, r1, r0, asr r1
    c1bc:	631b0000 	tstvs	fp, #0
    c1c0:	11500100 	cmpne	r0, r0, lsl #2
    c1c4:	000001d3 	ldrdeq	r0, [r0], -r3
    c1c8:	000035ca 	andeq	r3, r0, sl, asr #11
    c1cc:	10c01f00 	sbcne	r1, r0, r0, lsl #30
    c1d0:	04fc0000 	ldrbteq	r0, [ip], #0
    c1d4:	761e0000 	ldrvc	r0, [lr], -r0
    c1d8:	01007061 	tsteq	r0, r1, rrx
    c1dc:	058c1655 	streq	r1, [ip, #1621]	; 0x655
    c1e0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    c1e4:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    c1e8:	c1165501 	tstgt	r6, r1, lsl #10
    c1ec:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    c1f0:	00000035 	andeq	r0, r0, r5, lsr r0
    c1f4:	0010701f 	andseq	r7, r0, pc, lsl r0
    c1f8:	00051400 	andeq	r1, r5, r0, lsl #8
    c1fc:	61761e00 	cmnvs	r6, r0, lsl #28
    c200:	56010070 			; <UNDEFINED> instruction: 0x56010070
    c204:	00058c16 	andeq	r8, r5, r6, lsl ip
    c208:	005e0100 	subseq	r0, lr, r0, lsl #2
    c20c:	0010d81f 	andseq	sp, r0, pc, lsl r8
    c210:	00054500 	andeq	r4, r5, r0, lsl #10
    c214:	61761e00 	cmnvs	r6, r0, lsl #28
    c218:	57010070 	smlsdxpl	r1, r0, r0, r0
    c21c:	00058c16 	andeq	r8, r5, r6, lsl ip
    c220:	205e0100 	subscs	r0, lr, r0, lsl #2
    c224:	01006364 	tsteq	r0, r4, ror #6
    c228:	00811657 	addeq	r1, r1, r7, asr r6
    c22c:	631b0000 	tstvs	fp, #0
    c230:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    c234:	000001d3 	ldrdeq	r0, [r0], -r3
    c238:	00003606 	andeq	r3, r0, r6, lsl #12
    c23c:	38461d00 	stmdacc	r6, {r8, sl, fp, ip}^
    c240:	385a0000 	ldmdacc	sl, {}^	; <UNPREDICTABLE>
    c244:	056f0000 	strbeq	r0, [pc, #-0]!	; c24c <__exidx_end+0x6770>
    c248:	631b0000 	tstvs	fp, #0
    c24c:	095c0100 	ldmdbeq	ip, {r8}^
    c250:	000001d3 	ldrdeq	r0, [r0], -r3
    c254:	00003624 	andeq	r3, r0, r4, lsr #12
    c258:	7061731e 	rsbvc	r7, r1, lr, lsl r3
    c25c:	0d5c0100 	ldfeqe	f0, [ip, #-0]
    c260:	000001cd 	andeq	r0, r0, sp, asr #3
    c264:	21005601 	tstcs	r0, r1, lsl #12
    c268:	00001088 	andeq	r1, r0, r8, lsl #1
    c26c:	7061731b 	rsbvc	r7, r1, fp, lsl r3
    c270:	0a660100 	beq	198c678 <__ccfg+0x196c6d0>
    c274:	000001cd 	andeq	r0, r0, sp, asr #3
    c278:	00003637 	andeq	r3, r0, r7, lsr r6
    c27c:	040a0000 	streq	r0, [sl], #-0
    c280:	000001da 	ldrdeq	r0, [r0], -sl
    c284:	00ef040a 	rsceq	r0, pc, sl, lsl #8
    c288:	ea000000 	b	c290 <__exidx_end+0x67b4>
    c28c:	0300001f 	movweq	r0, #31
    c290:	002ec700 	eoreq	ip, lr, r0, lsl #14
    c294:	a3010400 	movwge	r0, #5120	; 0x1400
    c298:	0c000000 	stceq	0, cr0, [r0], {-0}
    c29c:	00002948 	andeq	r2, r0, r8, asr #18
    c2a0:	00000dff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c2a4:	000070b2 	strheq	r7, [r0], -r2
    c2a8:	60060102 	andvs	r0, r6, r2, lsl #2
    c2ac:	0300000c 	movweq	r0, #12
    c2b0:	000031e2 	andeq	r3, r0, r2, ror #3
    c2b4:	30182501 	andscc	r2, r8, r1, lsl #10
    c2b8:	02000000 	andeq	r0, r0, #0
    c2bc:	0a6e0502 	beq	1b8d6cc <__ccfg+0x1b6d724>
    c2c0:	04020000 	streq	r0, [r2], #-0
    c2c4:	00080005 	andeq	r0, r8, r5
    c2c8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    c2cc:	000007fb 	strdeq	r0, [r0], -fp
    c2d0:	002a1103 	eoreq	r1, sl, r3, lsl #2
    c2d4:	182e0100 	stmdane	lr!, {r8}
    c2d8:	00000051 	andeq	r0, r0, r1, asr r0
    c2dc:	5e080102 	adfple	f0, f0, f2
    c2e0:	0300000c 	movweq	r0, #12
    c2e4:	00002e07 	andeq	r2, r0, r7, lsl #28
    c2e8:	64193101 	ldrvs	r3, [r9], #-257	; 0xfffffeff
    c2ec:	02000000 	andeq	r0, r0, #0
    c2f0:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
    c2f4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    c2f8:	01000029 	tsteq	r0, r9, lsr #32
    c2fc:	007c1934 	rsbseq	r1, ip, r4, lsr r9
    c300:	6b040000 	blvs	10c308 <__ccfg+0xec360>
    c304:	02000000 	andeq	r0, r0, #0
    c308:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    c30c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c310:	00042307 	andeq	r2, r4, r7, lsl #6
    c314:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    c318:	00746e69 	rsbseq	r6, r4, r9, ror #28
    c31c:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    c320:	03000004 	movweq	r0, #4
    c324:	00002992 	muleq	r0, r2, r9
    c328:	911a5601 	tstls	sl, r1, lsl #12
    c32c:	06000000 	streq	r0, [r0], -r0
    c330:	00000bd8 	ldrdeq	r0, [r0], -r8
    c334:	17015e02 	strne	r5, [r1, -r2, lsl #28]
    c338:	00000091 	muleq	r0, r1, r0
    c33c:	000e3e03 	andeq	r3, lr, r3, lsl #28
    c340:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
    c344:	00000037 	andeq	r0, r0, r7, lsr r0
    c348:	0002f603 	andeq	pc, r2, r3, lsl #12
    c34c:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
    c350:	00000037 	andeq	r0, r0, r7, lsr r0
    c354:	a5030407 	strge	r0, [r3, #-1031]	; 0xfffffbf9
    c358:	0000eb03 	andeq	lr, r0, r3, lsl #22
    c35c:	076f0800 	strbeq	r0, [pc, -r0, lsl #16]!
    c360:	a7030000 	strge	r0, [r3, -r0]
    c364:	0000a40c 	andeq	sl, r0, ip, lsl #8
    c368:	0ab70800 	beq	fedce370 <_estack+0xdedc9370>
    c36c:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    c370:	0000eb13 	andeq	lr, r0, r3, lsl fp
    c374:	51090000 	mrspl	r0, (UNDEF: 9)
    c378:	fb000000 	blx	c382 <__exidx_end+0x68a6>
    c37c:	0a000000 	beq	c384 <__exidx_end+0x68a8>
    c380:	00000091 	muleq	r0, r1, r0
    c384:	080b0003 	stmdaeq	fp, {r0, r1}
    c388:	1f09a203 	svcne	0x0009a203
    c38c:	0c000001 	stceq	0, cr0, [r0], {1}
    c390:	00000390 	muleq	r0, r0, r3
    c394:	8a07a403 	bhi	1f53a8 <__ccfg+0x1d5400>
    c398:	00000000 	andeq	r0, r0, r0
    c39c:	0006040c 	andeq	r0, r6, ip, lsl #8
    c3a0:	05a90300 	streq	r0, [r9, #768]!	; 0x300
    c3a4:	000000c9 	andeq	r0, r0, r9, asr #1
    c3a8:	b8030004 	stmdalt	r3, {r2}
    c3ac:	03000008 	movweq	r0, #8
    c3b0:	00fb03aa 	rscseq	r0, fp, sl, lsr #7
    c3b4:	040d0000 	streq	r0, [sp], #-0
    c3b8:	00084503 	andeq	r4, r8, r3, lsl #10
    c3bc:	19160400 	ldmdbne	r6, {sl}
    c3c0:	0000007c 	andeq	r0, r0, ip, ror r0
    c3c4:	00024a03 	andeq	r4, r2, r3, lsl #20
    c3c8:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
    c3cc:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3d0:	00072d03 	andeq	r2, r7, r3, lsl #26
    c3d4:	1b230400 	blne	8cd3dc <__ccfg+0x8ad434>
    c3d8:	00000139 	andeq	r0, r0, r9, lsr r1
    c3dc:	0003290e 	andeq	r2, r3, lr, lsl #18
    c3e0:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
    c3e4:	0001ab08 	andeq	sl, r1, r8, lsl #22
    c3e8:	0eb90c00 	cdpeq	12, 11, cr0, cr9, cr0, {0}
    c3ec:	36040000 	strcc	r0, [r4], -r0
    c3f0:	0001ab13 	andeq	sl, r1, r3, lsl fp
    c3f4:	5f0f0000 	svcpl	0x000f0000
    c3f8:	3704006b 	strcc	r0, [r4, -fp, rrx]
    c3fc:	00008a07 	andeq	r8, r0, r7, lsl #20
    c400:	650c0400 	strvs	r0, [ip, #-1024]	; 0xfffffc00
    c404:	0400000b 	streq	r0, [r0], #-11
    c408:	008a0b37 	addeq	r0, sl, r7, lsr fp
    c40c:	0c080000 	stceq	0, cr0, [r8], {-0}
    c410:	000043e5 	andeq	r4, r0, r5, ror #7
    c414:	8a143704 	bhi	51a02c <__ccfg+0x4fa084>
    c418:	0c000000 	stceq	0, cr0, [r0], {-0}
    c41c:	0004570c 	andeq	r5, r4, ip, lsl #14
    c420:	1b370400 	blne	dcd428 <__ccfg+0xdad480>
    c424:	0000008a 	andeq	r0, r0, sl, lsl #1
    c428:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    c42c:	0b380400 	bleq	e0d434 <__ccfg+0xded48c>
    c430:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    c434:	04100014 	ldreq	r0, [r0], #-20	; 0xffffffec
    c438:	00000151 	andeq	r0, r0, r1, asr r1
    c43c:	00012d09 	andeq	r2, r1, r9, lsl #26
    c440:	0001c100 	andeq	ip, r1, r0, lsl #2
    c444:	00910a00 	addseq	r0, r1, r0, lsl #20
    c448:	00000000 	andeq	r0, r0, r0
    c44c:	000b800e 	andeq	r8, fp, lr
    c450:	3c042400 	cfstrscc	mvf2, [r4], {-0}
    c454:	00024408 	andeq	r4, r2, r8, lsl #8
    c458:	056f0c00 	strbeq	r0, [pc, #-3072]!	; b860 <__exidx_end+0x5d84>
    c45c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    c460:	00008a09 	andeq	r8, r0, r9, lsl #20
    c464:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
    c468:	04000003 	streq	r0, [r0], #-3
    c46c:	008a093f 	addeq	r0, sl, pc, lsr r9
    c470:	0c040000 	stceq	0, cr0, [r4], {-0}
    c474:	0000035a 	andeq	r0, r0, sl, asr r3
    c478:	8a094004 	bhi	25c490 <__ccfg+0x23c4e8>
    c47c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c480:	0006770c 	andeq	r7, r6, ip, lsl #14
    c484:	09410400 	stmdbeq	r1, {sl}^
    c488:	0000008a 	andeq	r0, r0, sl, lsl #1
    c48c:	09570c0c 	ldmdbeq	r7, {r2, r3, sl, fp}^
    c490:	42040000 	andmi	r0, r4, #0
    c494:	00008a09 	andeq	r8, r0, r9, lsl #20
    c498:	d10c1000 	mrsle	r1, (UNDEF: 12)
    c49c:	0400000a 	streq	r0, [r0], #-10
    c4a0:	008a0943 	addeq	r0, sl, r3, asr #18
    c4a4:	0c140000 	ldceq	0, cr0, [r4], {-0}
    c4a8:	0000033d 	andeq	r0, r0, sp, lsr r3
    c4ac:	8a094404 	bhi	25d4c4 <__ccfg+0x23d51c>
    c4b0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    c4b4:	0005780c 	andeq	r7, r5, ip, lsl #16
    c4b8:	09450400 	stmdbeq	r5, {sl}^
    c4bc:	0000008a 	andeq	r0, r0, sl, lsl #1
    c4c0:	08f30c1c 	ldmeq	r3!, {r2, r3, r4, sl, fp}^
    c4c4:	46040000 	strmi	r0, [r4], -r0
    c4c8:	00008a09 	andeq	r8, r0, r9, lsl #20
    c4cc:	11002000 	mrsne	r2, (UNDEF: 0)
    c4d0:	00000032 	andeq	r0, r0, r2, lsr r0
    c4d4:	4f040108 	svcmi	0x00040108
    c4d8:	00028908 	andeq	r8, r2, r8, lsl #18
    c4dc:	0d220c00 	stceq	12, cr0, [r2, #-0]
    c4e0:	50040000 	andpl	r0, r4, r0
    c4e4:	0002890a 	andeq	r8, r2, sl, lsl #18
    c4e8:	1a0c0000 	bne	30c4f0 <__ccfg+0x2ec548>
    c4ec:	0400000c 	streq	r0, [r0], #-12
    c4f0:	02890951 	addeq	r0, r9, #1327104	; 0x144000
    c4f4:	12800000 	addne	r0, r0, #0
    c4f8:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
    c4fc:	2d0a5304 	stccs	3, cr5, [sl, #-16]
    c500:	00000001 	andeq	r0, r0, r1
    c504:	0eac1201 	cdpeq	2, 10, cr1, cr12, cr1, {0}
    c508:	56040000 	strpl	r0, [r4], -r0
    c50c:	00012d0a 	andeq	r2, r1, sl, lsl #26
    c510:	00010400 	andeq	r0, r1, r0, lsl #8
    c514:	00012b09 	andeq	r2, r1, r9, lsl #22
    c518:	00029900 	andeq	r9, r2, r0, lsl #18
    c51c:	00910a00 	addseq	r0, r1, r0, lsl #20
    c520:	001f0000 	andseq	r0, pc, r0
    c524:	000a1911 	andeq	r1, sl, r1, lsl r9
    c528:	04019000 	streq	r9, [r1], #-0
    c52c:	02dc0862 	sbcseq	r0, ip, #6422528	; 0x620000
    c530:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
    c534:	0400000e 	streq	r0, [r0], #-14
    c538:	02dc1263 	sbcseq	r1, ip, #805306374	; 0x30000006
    c53c:	0c000000 	stceq	0, cr0, [r0], {-0}
    c540:	00000587 	andeq	r0, r0, r7, lsl #11
    c544:	8a066404 	bhi	1a555c <__ccfg+0x1855b4>
    c548:	04000000 	streq	r0, [r0], #-0
    c54c:	0002fe0c 	andeq	pc, r2, ip, lsl #28
    c550:	09660400 	stmdbeq	r6!, {sl}^
    c554:	000002e2 	andeq	r0, r0, r2, ror #5
    c558:	00320c08 	eorseq	r0, r2, r8, lsl #24
    c55c:	67040000 	strvs	r0, [r4, -r0]
    c560:	0002441e 	andeq	r4, r2, lr, lsl r4
    c564:	10008800 	andne	r8, r0, r0, lsl #16
    c568:	00029904 	andeq	r9, r2, r4, lsl #18
    c56c:	02f20900 	rscseq	r0, r2, #0, 18
    c570:	02f20000 	rscseq	r0, r2, #0
    c574:	910a0000 	mrsls	r0, (UNDEF: 10)
    c578:	1f000000 	svcne	0x00000000
    c57c:	f8041000 			; <UNDEFINED> instruction: 0xf8041000
    c580:	13000002 	movwne	r0, #2
    c584:	0cba0e01 	ldceq	14, cr0, [sl], #4
    c588:	04080000 	streq	r0, [r8], #-0
    c58c:	0322087a 			; <UNDEFINED> instruction: 0x0322087a
    c590:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    c594:	0400000c 	streq	r0, [r0], #-12
    c598:	0322117b 			; <UNDEFINED> instruction: 0x0322117b
    c59c:	0c000000 	stceq	0, cr0, [r0], {-0}
    c5a0:	00001d95 	muleq	r0, r5, sp
    c5a4:	8a067c04 	bhi	1ab5bc <__ccfg+0x18b614>
    c5a8:	04000000 	streq	r0, [r0], #-0
    c5ac:	51041000 	mrspl	r1, (UNDEF: 4)
    c5b0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c5b4:	0000044f 	andeq	r0, r0, pc, asr #8
    c5b8:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
    c5bc:	0000046b 	andeq	r0, r0, fp, ror #8
    c5c0:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    c5c4:	2212bb04 	andscs	fp, r2, #4, 22	; 0x1000
    c5c8:	00000003 	andeq	r0, r0, r3
    c5cc:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
    c5d0:	8a07bc04 	bhi	1fb5e8 <__ccfg+0x1db640>
    c5d4:	04000000 	streq	r0, [r0], #-0
    c5d8:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
    c5dc:	8a07bd04 	bhi	1fb9f4 <__ccfg+0x1dba4c>
    c5e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c5e4:	0001bb0c 	andeq	fp, r1, ip, lsl #22
    c5e8:	09be0400 	ldmibeq	lr!, {sl}
    c5ec:	00000030 	andeq	r0, r0, r0, lsr r0
    c5f0:	085c0c0c 	ldmdaeq	ip, {r2, r3, sl, fp}^
    c5f4:	bf040000 	svclt	0x00040000
    c5f8:	00003009 	andeq	r3, r0, r9
    c5fc:	5f0f0e00 	svcpl	0x000f0e00
    c600:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
    c604:	02fa11c0 	rscseq	r1, sl, #192, 2	; 0x30
    c608:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c60c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    c610:	8a07c104 	bhi	1fca28 <__ccfg+0x1dca80>
    c614:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    c618:	0003030c 	andeq	r0, r3, ip, lsl #6
    c61c:	0ac80400 	beq	ff20d624 <_estack+0xdf208624>
    c620:	0000012b 	andeq	r0, r0, fp, lsr #2
    c624:	1d240c1c 	stcne	12, cr0, [r4, #-112]!	; 0xffffff90
    c628:	ca040000 	bgt	10c630 <__ccfg+0xec688>
    c62c:	0005f01d 	andeq	pc, r5, sp, lsl r0	; <UNPREDICTABLE>
    c630:	eb0c2000 	bl	314638 <__ccfg+0x2f4690>
    c634:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    c638:	061b1dcc 	ldreq	r1, [fp], -ip, asr #27
    c63c:	0c240000 	stceq	0, cr0, [r4], #-0
    c640:	00000ed9 	ldrdeq	r0, [r0], -r9
    c644:	400dcf04 	andmi	ip, sp, r4, lsl #30
    c648:	28000006 	stmdacs	r0, {r1, r2}
    c64c:	001cd90c 	andseq	sp, ip, ip, lsl #18
    c650:	09d00400 	ldmibeq	r0, {sl}^
    c654:	0000065b 	andeq	r0, r0, fp, asr r6
    c658:	755f0f2c 	ldrbvc	r0, [pc, #-3884]	; b734 <__exidx_end+0x5c58>
    c65c:	d3040062 	movwle	r0, #16482	; 0x4062
    c660:	0002fa11 	andeq	pc, r2, r1, lsl sl	; <UNPREDICTABLE>
    c664:	5f0f3000 	svcpl	0x000f3000
    c668:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
    c66c:	032212d4 			; <UNDEFINED> instruction: 0x032212d4
    c670:	0f380000 	svceq	0x00380000
    c674:	0072755f 	rsbseq	r7, r2, pc, asr r5
    c678:	8a07d504 	bhi	201a90 <__ccfg+0x1e1ae8>
    c67c:	3c000000 	stccc	0, cr0, [r0], {-0}
    c680:	000f100c 	andeq	r1, pc, ip
    c684:	11d80400 	bicsne	r0, r8, r0, lsl #8
    c688:	00000661 	andeq	r0, r0, r1, ror #12
    c68c:	0e590c40 	cdpeq	12, 5, cr0, cr9, cr0, {2}
    c690:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    c694:	00067111 	andeq	r7, r6, r1, lsl r1
    c698:	5f0f4300 	svcpl	0x000f4300
    c69c:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
    c6a0:	02fa11dc 	rscseq	r1, sl, #220, 2	; 0x37
    c6a4:	0c440000 	mareq	acc0, r0, r4
    c6a8:	00000b77 	andeq	r0, r0, r7, ror fp
    c6ac:	8a07df04 	bhi	2042c4 <__ccfg+0x1e431c>
    c6b0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    c6b4:	0004830c 	andeq	r8, r4, ip, lsl #6
    c6b8:	0ae00400 	beq	ff80d6c0 <_estack+0xdf8086c0>
    c6bc:	000000b1 	strheq	r0, [r0], -r1
    c6c0:	47430c50 	smlsldmi	r0, r3, r0, ip
    c6c4:	e3040000 	movw	r0, #16384	; 0x4000
    c6c8:	00048a12 	andeq	r8, r4, r2, lsl sl
    c6cc:	9d0c5400 	cfstrsls	mvf5, [ip, #-0]
    c6d0:	0400000b 	streq	r0, [r0], #-11
    c6d4:	01450ce7 	smlaltteq	r0, r5, r7, ip
    c6d8:	0c580000 	mraeq	r0, r8, acc0
    c6dc:	00000a21 	andeq	r0, r0, r1, lsr #20
    c6e0:	1f0ee904 	svcne	0x000ee904
    c6e4:	5c000001 	stcpl	0, cr0, [r0], {1}
    c6e8:	000e8c0c 	andeq	r8, lr, ip, lsl #24
    c6ec:	09ea0400 	stmibeq	sl!, {sl}^
    c6f0:	0000008a 	andeq	r0, r0, sl, lsl #1
    c6f4:	01140064 	tsteq	r4, r4, rrx
    c6f8:	0000008a 	andeq	r0, r0, sl, lsl #1
    c6fc:	0000048a 	andeq	r0, r0, sl, lsl #9
    c700:	00048a15 	andeq	r8, r4, r5, lsl sl
    c704:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c708:	de150000 	cdple	0, 1, cr0, cr5, cr0, {0}
    c70c:	15000005 	strne	r0, [r0, #-5]
    c710:	0000008a 	andeq	r0, r0, sl, lsl #1
    c714:	95041000 	strls	r1, [r4, #-0]
    c718:	04000004 	streq	r0, [r0], #-4
    c71c:	0000048a 	andeq	r0, r0, sl, lsl #9
    c720:	000d5416 	andeq	r5, sp, r6, lsl r4
    c724:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    c728:	de080265 	cdple	2, 0, cr0, cr8, cr5, {3}
    c72c:	17000005 	strne	r0, [r0, -r5]
    c730:	00000907 	andeq	r0, r0, r7, lsl #18
    c734:	07026704 	streq	r6, [r2, -r4, lsl #14]
    c738:	0000008a 	andeq	r0, r0, sl, lsl #1
    c73c:	07e51700 	strbeq	r1, [r5, r0, lsl #14]!
    c740:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c744:	06cd0b02 	strbeq	r0, [sp], r2, lsl #22
    c748:	17040000 	strne	r0, [r4, -r0]
    c74c:	000002ee 	andeq	r0, r0, lr, ror #5
    c750:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    c754:	000006cd 	andeq	r0, r0, sp, asr #13
    c758:	0eff1708 	cdpeq	7, 15, cr1, cr15, cr8, {0}
    c75c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c760:	06cd1e02 	strbeq	r1, [sp], r2, lsl #28
    c764:	170c0000 	strne	r0, [ip, -r0]
    c768:	00000582 	andeq	r0, r0, r2, lsl #11
    c76c:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    c770:	0000008a 	andeq	r0, r0, sl, lsl #1
    c774:	04cf1710 	strbeq	r1, [pc], #1808	; c77c <__exidx_end+0x6ca0>
    c778:	6f040000 	svcvs	0x00040000
    c77c:	08cd0802 	stmiaeq	sp, {r1, fp}^
    c780:	17140000 	ldrne	r0, [r4, -r0]
    c784:	00000e6c 	andeq	r0, r0, ip, ror #28
    c788:	07027204 	streq	r7, [r2, -r4, lsl #4]
    c78c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c790:	42911730 	addsmi	r1, r1, #48, 14	; 0xc00000
    c794:	73040000 	movwvc	r0, #16384	; 0x4000
    c798:	08e31602 	stmiaeq	r3!, {r1, r9, sl, ip}^
    c79c:	17340000 	ldrne	r0, [r4, -r0]!
    c7a0:	0000078d 	andeq	r0, r0, sp, lsl #15
    c7a4:	07027504 	streq	r7, [r2, -r4, lsl #10]
    c7a8:	0000008a 	andeq	r0, r0, sl, lsl #1
    c7ac:	08871738 	stmeq	r7, {r3, r4, r5, r8, r9, sl, ip}
    c7b0:	77040000 	strvc	r0, [r4, -r0]
    c7b4:	08f50a02 	ldmeq	r5!, {r1, r9, fp}^
    c7b8:	173c0000 	ldrne	r0, [ip, -r0]!
    c7bc:	00000352 	andeq	r0, r0, r2, asr r3
    c7c0:	13027a04 	movwne	r7, #10756	; 0x2a04
    c7c4:	000001ab 	andeq	r0, r0, fp, lsr #3
    c7c8:	040d1740 	streq	r1, [sp], #-1856	; 0xfffff8c0
    c7cc:	7b040000 	blvc	10c7d4 <__ccfg+0xec82c>
    c7d0:	008a0702 	addeq	r0, sl, r2, lsl #14
    c7d4:	17440000 	strbne	r0, [r4, -r0]
    c7d8:	0000060c 	andeq	r0, r0, ip, lsl #12
    c7dc:	13027c04 	movwne	r7, #11268	; 0x2c04
    c7e0:	000001ab 	andeq	r0, r0, fp, lsr #3
    c7e4:	08221748 	stmdaeq	r2!, {r3, r6, r8, r9, sl, ip}
    c7e8:	7d040000 	stcvc	0, cr0, [r4, #-0]
    c7ec:	08fb1402 	ldmeq	fp!, {r1, sl, ip}^
    c7f0:	174c0000 	strbne	r0, [ip, -r0]
    c7f4:	00000b5d 	andeq	r0, r0, sp, asr fp
    c7f8:	07028004 	streq	r8, [r2, -r4]
    c7fc:	0000008a 	andeq	r0, r0, sl, lsl #1
    c800:	0c561750 	mrrceq	7, 5, r1, r6, cr0
    c804:	81040000 	mrshi	r0, (UNDEF: 4)
    c808:	05de0902 	ldrbeq	r0, [lr, #2306]	; 0x902
    c80c:	17540000 	ldrbne	r0, [r4, -r0]
    c810:	00000c70 	andeq	r0, r0, r0, ror ip
    c814:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    c818:	000008a8 	andeq	r0, r0, r8, lsr #17
    c81c:	0a191858 	beq	652984 <__ccfg+0x6329dc>
    c820:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    c824:	02dc1302 	sbcseq	r1, ip, #134217728	; 0x8000000
    c828:	01480000 	mrseq	r0, (UNDEF: 72)
    c82c:	0006b118 	andeq	fp, r6, r8, lsl r1
    c830:	02a90400 	adceq	r0, r9, #0, 8
    c834:	00029912 	andeq	r9, r2, r2, lsl r9
    c838:	18014c00 	stmdane	r1, {sl, fp, lr}
    c83c:	00000698 	muleq	r0, r8, r6
    c840:	0c02ad04 	stceq	13, cr10, [r2], {4}
    c844:	0000090d 	andeq	r0, r0, sp, lsl #18
    c848:	d81802dc 	ldmdale	r8, {r2, r3, r4, r6, r7, r9}
    c84c:	0400000c 	streq	r0, [r0], #-12
    c850:	8e1002b2 	mrchi	2, 0, r0, cr0, cr2, {5}
    c854:	e0000006 	and	r0, r0, r6
    c858:	0aa91802 	beq	fea52868 <_estack+0xdea4d868>
    c85c:	b4040000 	strlt	r0, [r4], #-0
    c860:	09190a02 	ldmdbeq	r9, {r1, r9, fp}
    c864:	02ec0000 	rsceq	r0, ip, #0
    c868:	e4041000 	str	r1, [r4], #-0
    c86c:	02000005 	andeq	r0, r0, #5
    c870:	0c670801 	stcleq	8, cr0, [r7], #-4
    c874:	e4040000 	str	r0, [r4], #-0
    c878:	10000005 	andne	r0, r0, r5
    c87c:	00046b04 	andeq	r6, r4, r4, lsl #22
    c880:	8a011400 	bhi	51888 <__ccfg+0x318e0>
    c884:	15000000 	strne	r0, [r0, #-0]
    c888:	15000006 	strne	r0, [r0, #-6]
    c88c:	0000048a 	andeq	r0, r0, sl, lsl #9
    c890:	00012b15 	andeq	r2, r1, r5, lsl fp
    c894:	06151500 	ldreq	r1, [r5], -r0, lsl #10
    c898:	8a150000 	bhi	54c8a0 <__ccfg+0x52c8f8>
    c89c:	00000000 	andeq	r0, r0, r0
    c8a0:	05eb0410 	strbeq	r0, [fp, #1040]!	; 0x410
    c8a4:	04100000 	ldreq	r0, [r0], #-0
    c8a8:	000005f6 	strdeq	r0, [r0], -r6
    c8ac:	00bd0114 	adcseq	r0, sp, r4, lsl r1
    c8b0:	06400000 	strbeq	r0, [r0], -r0
    c8b4:	8a150000 	bhi	54c8bc <__ccfg+0x52c914>
    c8b8:	15000004 	strne	r0, [r0, #-4]
    c8bc:	0000012b 	andeq	r0, r0, fp, lsr #2
    c8c0:	0000bd15 	andeq	fp, r0, r5, lsl sp
    c8c4:	008a1500 	addeq	r1, sl, r0, lsl #10
    c8c8:	10000000 	andne	r0, r0, r0
    c8cc:	00062104 	andeq	r2, r6, r4, lsl #2
    c8d0:	8a011400 	bhi	518d8 <__ccfg+0x31930>
    c8d4:	5b000000 	blpl	c8dc <__exidx_end+0x6e00>
    c8d8:	15000006 	strne	r0, [r0, #-6]
    c8dc:	0000048a 	andeq	r0, r0, sl, lsl #9
    c8e0:	00012b15 	andeq	r2, r1, r5, lsl fp
    c8e4:	04100000 	ldreq	r0, [r0], #-0
    c8e8:	00000646 	andeq	r0, r0, r6, asr #12
    c8ec:	00005109 	andeq	r5, r0, r9, lsl #2
    c8f0:	00067100 	andeq	r7, r6, r0, lsl #2
    c8f4:	00910a00 	addseq	r0, r1, r0, lsl #20
    c8f8:	00020000 	andeq	r0, r2, r0
    c8fc:	00005109 	andeq	r5, r0, r9, lsl #2
    c900:	00068100 	andeq	r8, r6, r0, lsl #2
    c904:	00910a00 	addseq	r0, r1, r0, lsl #20
    c908:	00000000 	andeq	r0, r0, r0
    c90c:	00047006 	andeq	r7, r4, r6
    c910:	01240400 			; <UNDEFINED> instruction: 0x01240400
    c914:	0003281a 	andeq	r2, r3, sl, lsl r8
    c918:	0cd21900 			; <UNDEFINED> instruction: 0x0cd21900
    c91c:	040c0000 	streq	r0, [ip], #-0
    c920:	c7080128 	strgt	r0, [r8, -r8, lsr #2]
    c924:	17000006 	strne	r0, [r0, -r6]
    c928:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    c92c:	11012a04 	tstne	r1, r4, lsl #20
    c930:	000006c7 	andeq	r0, r0, r7, asr #13
    c934:	0bd11700 	bleq	ff45253c <_estack+0xdf44d53c>
    c938:	2b040000 	blcs	10c940 <__ccfg+0xec998>
    c93c:	008a0701 	addeq	r0, sl, r1, lsl #14
    c940:	17040000 	strne	r0, [r4, -r0]
    c944:	00000775 	andeq	r0, r0, r5, ror r7
    c948:	0b012c04 	bleq	57960 <__ccfg+0x379b8>
    c94c:	000006cd 	andeq	r0, r0, sp, asr #13
    c950:	04100008 	ldreq	r0, [r0], #-8
    c954:	0000068e 	andeq	r0, r0, lr, lsl #13
    c958:	06810410 	pkhbteq	r0, r1, r0, lsl #8
    c95c:	dc190000 	ldcle	0, cr0, [r9], {-0}
    c960:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    c964:	08014404 	stmdaeq	r1, {r2, sl, lr}
    c968:	0000070c 	andeq	r0, r0, ip, lsl #14
    c96c:	00164017 	andseq	r4, r6, r7, lsl r0
    c970:	01450400 	cmpeq	r5, r0, lsl #8
    c974:	00070c12 	andeq	r0, r7, r2, lsl ip
    c978:	34170000 	ldrcc	r0, [r7], #-0
    c97c:	04000008 	streq	r0, [r0], #-8
    c980:	0c120146 	ldfeqs	f0, [r2], {70}	; 0x46
    c984:	06000007 	streq	r0, [r0], -r7
    c988:	0014f217 	andseq	pc, r4, r7, lsl r2	; <UNPREDICTABLE>
    c98c:	01470400 	cmpeq	r7, r0, lsl #8
    c990:	00006412 	andeq	r6, r0, r2, lsl r4
    c994:	09000c00 	stmdbeq	r0, {sl, fp}
    c998:	00000064 	andeq	r0, r0, r4, rrx
    c99c:	0000071c 	andeq	r0, r0, ip, lsl r7
    c9a0:	0000910a 	andeq	r9, r0, sl, lsl #2
    c9a4:	1a000200 	bne	d1ac <__exidx_end+0x76d0>
    c9a8:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
    c9ac:	00083107 	andeq	r3, r8, r7, lsl #2
    c9b0:	0e5f1700 	cdpeq	7, 5, cr1, cr15, cr0, {0}
    c9b4:	87040000 	strhi	r0, [r4, -r0]
    c9b8:	00911802 	addseq	r1, r1, r2, lsl #16
    c9bc:	17000000 	strne	r0, [r0, -r0]
    c9c0:	00000ce0 	andeq	r0, r0, r0, ror #25
    c9c4:	12028804 	andne	r8, r2, #4, 16	; 0x40000
    c9c8:	000005de 	ldrdeq	r0, [r0], -lr
    c9cc:	043a1704 	ldrteq	r1, [sl], #-1796	; 0xfffff8fc
    c9d0:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    c9d4:	08311002 	ldmdaeq	r1!, {r1, ip}
    c9d8:	17080000 	strne	r0, [r8, -r0]
    c9dc:	00000b46 	andeq	r0, r0, r6, asr #22
    c9e0:	17028a04 	strne	r8, [r2, -r4, lsl #20]
    c9e4:	000001c1 	andeq	r0, r0, r1, asr #3
    c9e8:	07ec1724 	strbeq	r1, [ip, r4, lsr #14]!
    c9ec:	8b040000 	blhi	10c9f4 <__ccfg+0xeca4c>
    c9f0:	008a0f02 	addeq	r0, sl, r2, lsl #30
    c9f4:	17480000 	strbne	r0, [r8, -r0]
    c9f8:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    c9fc:	2c028c04 	stccs	12, cr8, [r2], {4}
    ca00:	00000083 	andeq	r0, r0, r3, lsl #1
    ca04:	00761750 	rsbseq	r1, r6, r0, asr r7
    ca08:	8d040000 	stchi	0, cr0, [r4, #-0]
    ca0c:	06d31a02 	ldrbeq	r1, [r3], r2, lsl #20
    ca10:	17580000 	ldrbne	r0, [r8, -r0]
    ca14:	0000063c 	andeq	r0, r0, ip, lsr r6
    ca18:	16028e04 	strne	r8, [r2], -r4, lsl #28
    ca1c:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca20:	0ced1768 	stcleq	7, cr1, [sp], #416	; 0x1a0
    ca24:	8f040000 	svchi	0x00040000
    ca28:	011f1602 	tsteq	pc, r2, lsl #12
    ca2c:	17700000 	ldrbne	r0, [r0, -r0]!
    ca30:	00000068 	andeq	r0, r0, r8, rrx
    ca34:	16029004 	strne	r9, [r2], -r4
    ca38:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca3c:	0b6d1778 	bleq	1b52824 <__ccfg+0x1b3287c>
    ca40:	91040000 	mrsls	r0, (UNDEF: 4)
    ca44:	08411002 	stmdaeq	r1, {r1, ip}^
    ca48:	17800000 	strne	r0, [r0, r0]
    ca4c:	00000417 	andeq	r0, r0, r7, lsl r4
    ca50:	10029204 	andne	r9, r2, r4, lsl #4
    ca54:	00000851 	andeq	r0, r0, r1, asr r8
    ca58:	0c901788 	ldceq	7, cr1, [r0], {136}	; 0x88
    ca5c:	93040000 	movwls	r0, #16384	; 0x4000
    ca60:	008a0f02 	addeq	r0, sl, r2, lsl #30
    ca64:	17a00000 	strne	r0, [r0, r0]!
    ca68:	000002a3 	andeq	r0, r0, r3, lsr #5
    ca6c:	16029404 	strne	r9, [r2], -r4, lsl #8
    ca70:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca74:	06a217a4 	strteq	r1, [r2], r4, lsr #15
    ca78:	95040000 	strls	r0, [r4, #-0]
    ca7c:	011f1602 	tsteq	pc, r2, lsl #12
    ca80:	17ac0000 	strne	r0, [ip, r0]!
    ca84:	000005be 			; <UNDEFINED> instruction: 0x000005be
    ca88:	16029604 	strne	r9, [r2], -r4, lsl #12
    ca8c:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca90:	084d17b4 	stmdaeq	sp, {r2, r4, r5, r7, r8, r9, sl, ip}^
    ca94:	97040000 	strls	r0, [r4, -r0]
    ca98:	011f1602 	tsteq	pc, r2, lsl #12
    ca9c:	17bc0000 	ldrne	r0, [ip, r0]!
    caa0:	0000062b 	andeq	r0, r0, fp, lsr #12
    caa4:	16029804 	strne	r9, [r2], -r4, lsl #16
    caa8:	0000011f 	andeq	r0, r0, pc, lsl r1
    caac:	090517c4 	stmdbeq	r5, {r2, r6, r7, r8, r9, sl, ip}
    cab0:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    cab4:	008a0802 	addeq	r0, sl, r2, lsl #16
    cab8:	00cc0000 	sbceq	r0, ip, r0
    cabc:	0005e409 	andeq	lr, r5, r9, lsl #8
    cac0:	00084100 	andeq	r4, r8, r0, lsl #2
    cac4:	00910a00 	addseq	r0, r1, r0, lsl #20
    cac8:	00190000 	andseq	r0, r9, r0
    cacc:	0005e409 	andeq	lr, r5, r9, lsl #8
    cad0:	00085100 	andeq	r5, r8, r0, lsl #2
    cad4:	00910a00 	addseq	r0, r1, r0, lsl #20
    cad8:	00070000 	andeq	r0, r7, r0
    cadc:	0005e409 	andeq	lr, r5, r9, lsl #8
    cae0:	00086100 	andeq	r6, r8, r0, lsl #2
    cae4:	00910a00 	addseq	r0, r1, r0, lsl #20
    cae8:	00170000 	andseq	r0, r7, r0
    caec:	9e04f01a 	mcrls	0, 0, pc, cr4, cr10, {0}	; <UNPREDICTABLE>
    caf0:	08880702 	stmeq	r8, {r1, r8, r9, sl}
    caf4:	c2170000 	andsgt	r0, r7, #0
    caf8:	04000003 	streq	r0, [r0], #-3
    cafc:	881b02a1 	ldmdahi	fp, {r0, r5, r7, r9}
    cb00:	00000008 	andeq	r0, r0, r8
    cb04:	000f0717 	andeq	r0, pc, r7, lsl r7	; <UNPREDICTABLE>
    cb08:	02a20400 	adceq	r0, r2, #0, 8
    cb0c:	00089818 	andeq	r9, r8, r8, lsl r8
    cb10:	09007800 	stmdbeq	r0, {fp, ip, sp, lr}
    cb14:	00000322 	andeq	r0, r0, r2, lsr #6
    cb18:	00000898 	muleq	r0, r8, r8
    cb1c:	0000910a 	andeq	r9, r0, sl, lsl #2
    cb20:	09001d00 	stmdbeq	r0, {r8, sl, fp, ip}
    cb24:	00000091 	muleq	r0, r1, r0
    cb28:	000008a8 	andeq	r0, r0, r8, lsr #17
    cb2c:	0000910a 	andeq	r9, r0, sl, lsl #2
    cb30:	1b001d00 	blne	13f38 <__exidx_end+0xe45c>
    cb34:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
    cb38:	0008cd03 	andeq	ip, r8, r3, lsl #26
    cb3c:	0d541c00 	ldcleq	12, cr1, [r4, #-0]
    cb40:	9a040000 	bls	10cb48 <__ccfg+0xecba0>
    cb44:	071c0b02 	ldreq	r0, [ip, -r2, lsl #22]
    cb48:	551c0000 	ldrpl	r0, [ip, #-0]
    cb4c:	0400000b 	streq	r0, [r0], #-11
    cb50:	610b02a3 	smlatbvs	fp, r3, r2, r0
    cb54:	00000008 	andeq	r0, r0, r8
    cb58:	0005e409 	andeq	lr, r5, r9, lsl #8
    cb5c:	0008dd00 	andeq	sp, r8, r0, lsl #26
    cb60:	00910a00 	addseq	r0, r1, r0, lsl #20
    cb64:	00180000 	andseq	r0, r8, r0
    cb68:	000ebf1d 	andeq	fp, lr, sp, lsl pc
    cb6c:	04100100 	ldreq	r0, [r0], #-256	; 0xffffff00
    cb70:	000008dd 	ldrdeq	r0, [r0], -sp
    cb74:	08f5011e 	ldmeq	r5!, {r1, r2, r3, r4, r8}^
    cb78:	8a150000 	bhi	54cb80 <__ccfg+0x52cbd8>
    cb7c:	00000004 	andeq	r0, r0, r4
    cb80:	08e90410 	stmiaeq	r9!, {r4, sl}^
    cb84:	04100000 	ldreq	r0, [r0], #-0
    cb88:	000001ab 	andeq	r0, r0, fp, lsr #3
    cb8c:	090d011e 	stmdbeq	sp, {r1, r2, r3, r4, r8}
    cb90:	8a150000 	bhi	54cb98 <__ccfg+0x52cbf0>
    cb94:	00000000 	andeq	r0, r0, r0
    cb98:	09130410 	ldmdbeq	r3, {r4, sl}
    cb9c:	04100000 	ldreq	r0, [r0], #-0
    cba0:	00000901 	andeq	r0, r0, r1, lsl #18
    cba4:	00068109 	andeq	r8, r6, r9, lsl #2
    cba8:	00092900 	andeq	r2, r9, r0, lsl #18
    cbac:	00910a00 	addseq	r0, r1, r0, lsl #20
    cbb0:	00020000 	andeq	r0, r2, r0
    cbb4:	000ac51f 	andeq	ip, sl, pc, lsl r5
    cbb8:	03330400 	teqeq	r3, #0, 8
    cbbc:	00048a17 	andeq	r8, r4, r7, lsl sl
    cbc0:	1f010100 	svcne	0x00010100
    cbc4:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
    cbc8:	1d033404 	cfstrsne	mvf3, [r3, #-16]
    cbcc:	00000490 	muleq	r0, r0, r4
    cbd0:	d6030101 	strle	r0, [r3], -r1, lsl #2
    cbd4:	06000024 	streq	r0, [r0], -r4, lsr #32
    cbd8:	006b123b 	rsbeq	r1, fp, fp, lsr r2
    cbdc:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    cbe0:	77094006 	strvc	r4, [r9, -r6]
    cbe4:	0c000009 	stceq	0, cr0, [r0], {9}
    cbe8:	00001fd9 	ldrdeq	r1, [r0], -r9
    cbec:	770d4106 	strvc	r4, [sp, -r6, lsl #2]
    cbf0:	00000009 	andeq	r0, r0, r9
    cbf4:	00221c0c 	eoreq	r1, r2, ip, lsl #24
    cbf8:	0d420600 	stcleq	6, cr0, [r2, #-0]
    cbfc:	00000977 	andeq	r0, r0, r7, ror r9
    cc00:	04100004 	ldreq	r0, [r0], #-4
    cc04:	00000045 	andeq	r0, r0, r5, asr #32
    cc08:	00272103 	eoreq	r2, r7, r3, lsl #2
    cc0c:	03430600 	movteq	r0, #13824	; 0x3600
    cc10:	00000953 	andeq	r0, r0, r3, asr r9
    cc14:	00229d03 	eoreq	r9, r2, r3, lsl #26
    cc18:	2b3c0700 	blcs	f0e820 <__ccfg+0xeee878>
    cc1c:	00000995 	muleq	r0, r5, r9
    cc20:	00253c0e 	eoreq	r3, r5, lr, lsl #24
    cc24:	6f071000 	svcvs	0x00071000
    cc28:	0009f115 	andeq	pc, r9, r5, lsl r1	; <UNPREDICTABLE>
    cc2c:	1f080c00 	svcne	0x00080c00
    cc30:	70070000 	andvc	r0, r7, r0
    cc34:	0000580d 	andeq	r5, r0, sp, lsl #16
    cc38:	7b0c0000 	blvc	30cc40 <__ccfg+0x2ecc98>
    cc3c:	07000007 	streq	r0, [r0, -r7]
    cc40:	00580d71 	subseq	r0, r8, r1, ror sp
    cc44:	0c020000 	stceq	0, cr0, [r2], {-0}
    cc48:	0000227b 	andeq	r2, r0, fp, ror r2
    cc4c:	28137407 	ldmdacs	r3, {r0, r1, r2, sl, ip, sp, lr}
    cc50:	0400000b 	streq	r0, [r0], #-11
    cc54:	00200a0c 	eoreq	r0, r0, ip, lsl #20
    cc58:	0c750700 	ldcleq	7, cr0, [r5], #-0
    cc5c:	00000947 	andeq	r0, r0, r7, asr #18
    cc60:	22ab0c08 	adccs	r0, fp, #8, 24	; 0x800
    cc64:	7d070000 	stcvc	0, cr0, [r7, #-0]
    cc68:	000ab406 	andeq	fp, sl, r6, lsl #8
    cc6c:	f50c0c00 			; <UNDEFINED> instruction: 0xf50c0c00
    cc70:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cc74:	0afe0681 	beq	fff8e680 <_estack+0xdff89680>
    cc78:	000d0000 	andeq	r0, sp, r0
    cc7c:	00207e03 	eoreq	r7, r0, r3, lsl #28
    cc80:	2a3f0700 	bcs	fce888 <__ccfg+0xfae8e0>
    cc84:	000009fd 	strdeq	r0, [r0], -sp
    cc88:	0020710e 	eoreq	r7, r0, lr, lsl #2
    cc8c:	e0071800 	and	r1, r7, r0, lsl #16
    cc90:	000ab415 	andeq	fp, sl, r5, lsl r4
    cc94:	1f080c00 	svcne	0x00080c00
    cc98:	e1070000 	mrs	r0, (UNDEF: 7)
    cc9c:	0000580d 	andeq	r5, r0, sp, lsl #16
    cca0:	7b0c0000 	blvc	30cca8 <__ccfg+0x2ecd00>
    cca4:	07000007 	streq	r0, [r0, -r7]
    cca8:	00580de2 	subseq	r0, r8, r2, ror #27
    ccac:	0c020000 	stceq	0, cr0, [r2], {-0}
    ccb0:	0000227b 	andeq	r2, r0, fp, ror r2
    ccb4:	2813e507 	ldmdacs	r3, {r0, r1, r2, r8, sl, sp, lr, pc}
    ccb8:	0400000b 	streq	r0, [r0], #-11
    ccbc:	00200a0c 	eoreq	r0, r0, ip, lsl #20
    ccc0:	0ce60700 	stcleq	7, cr0, [r6]
    ccc4:	00000947 	andeq	r0, r0, r7, asr #18
    ccc8:	22ab0c08 	adccs	r0, fp, #8, 24	; 0x800
    cccc:	ee070000 	cdp	0, 0, cr0, cr7, cr0, {0}
    ccd0:	000b3406 	andeq	r3, fp, r6, lsl #8
    ccd4:	f50c0c00 			; <UNDEFINED> instruction: 0xf50c0c00
    ccd8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    ccdc:	0b7e06f2 	bleq	1f8e8ac <__ccfg+0x1f6e904>
    cce0:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    cce4:	00002647 	andeq	r2, r0, r7, asr #12
    cce8:	580df307 	stmdapl	sp, {r0, r1, r2, r8, r9, ip, sp, lr, pc}
    ccec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ccf0:	00239f0c 	eoreq	r9, r3, ip, lsl #30
    ccf4:	0df40700 	ldcleq	7, cr0, [r4]
    ccf8:	00000058 	andeq	r0, r0, r8, asr r0
    ccfc:	20b10c10 	adcscs	r0, r1, r0, lsl ip
    cd00:	fa070000 	blx	1ccd08 <__ccfg+0x1acd60>
    cd04:	000ba806 	andeq	sl, fp, r6, lsl #16
    cd08:	5b0c1200 	blpl	311510 <__ccfg+0x2f1568>
    cd0c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cd10:	00450cfb 	strdeq	r0, [r5], #-203	; 0xffffff35
    cd14:	0c130000 	ldceq	0, cr0, [r3], {-0}
    cd18:	000025ab 	andeq	r2, r0, fp, lsr #11
    cd1c:	450cfc07 	strmi	pc, [ip, #-3079]	; 0xfffff3f9
    cd20:	14000000 	strne	r0, [r0], #-0
    cd24:	0025b40c 	eoreq	fp, r5, ip, lsl #8
    cd28:	0cfd0700 	ldcleq	7, cr0, [sp]
    cd2c:	00000045 	andeq	r0, r0, r5, asr #32
    cd30:	25bd0c15 	ldrcs	r0, [sp, #3093]!	; 0xc15
    cd34:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
    cd38:	0000580d 	andeq	r5, r0, sp, lsl #16
    cd3c:	0b001600 	bleq	12544 <__exidx_end+0xca68>
    cd40:	04760701 	ldrbteq	r0, [r6], #-1793	; 0xfffff8ff
    cd44:	00000afe 	strdeq	r0, [r0], -lr
    cd48:	00275e20 	eoreq	r5, r7, r0, lsr #28
    cd4c:	0f770700 	svceq	0x00770700
    cd50:	00000045 	andeq	r0, r0, r5, asr #32
    cd54:	00040401 	andeq	r0, r4, r1, lsl #8
    cd58:	0020fc20 	eoreq	pc, r0, r0, lsr #24
    cd5c:	0f780700 	svceq	0x00780700
    cd60:	00000045 	andeq	r0, r0, r5, asr #32
    cd64:	00030101 	andeq	r0, r3, r1, lsl #2
    cd68:	0021bc20 	eoreq	fp, r1, r0, lsr #24
    cd6c:	0f7a0700 	svceq	0x007a0700
    cd70:	00000045 	andeq	r0, r0, r5, asr #32
    cd74:	00010201 	andeq	r0, r1, r1, lsl #4
    cd78:	001f7720 	andseq	r7, pc, r0, lsr #14
    cd7c:	0f7b0700 	svceq	0x007b0700
    cd80:	00000045 	andeq	r0, r0, r5, asr #32
    cd84:	00000101 	andeq	r0, r0, r1, lsl #2
    cd88:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd8c:	0b28047e 	bleq	a0df8c <__ccfg+0x9edfe4>
    cd90:	d9200000 	stmdble	r0!, {}	; <UNPREDICTABLE>
    cd94:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cd98:	00450f7f 	subeq	r0, r5, pc, ror pc
    cd9c:	04010000 	streq	r0, [r1], #-0
    cda0:	2d200004 	stccs	0, cr0, [r0, #-16]!
    cda4:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cda8:	00450f80 	subeq	r0, r5, r0, lsl #31
    cdac:	04010000 	streq	r0, [r1], #-0
    cdb0:	10000000 	andne	r0, r0, r0
    cdb4:	00098904 	andeq	r8, r9, r4, lsl #18
    cdb8:	6b041000 	blvs	110dc0 <__ccfg+0xf0e18>
    cdbc:	0b000000 	bleq	cdc4 <__exidx_end+0x72e8>
    cdc0:	04e70701 	strbteq	r0, [r7], #1793	; 0x701
    cdc4:	00000b7e 	andeq	r0, r0, lr, ror fp
    cdc8:	00275e20 	eoreq	r5, r7, r0, lsr #28
    cdcc:	0fe80700 	svceq	0x00e80700
    cdd0:	00000045 	andeq	r0, r0, r5, asr #32
    cdd4:	00040401 	andeq	r0, r4, r1, lsl #8
    cdd8:	0020fc20 	eoreq	pc, r0, r0, lsr #24
    cddc:	0fe90700 	svceq	0x00e90700
    cde0:	00000045 	andeq	r0, r0, r5, asr #32
    cde4:	00030101 	andeq	r0, r3, r1, lsl #2
    cde8:	0021bc20 	eoreq	fp, r1, r0, lsr #24
    cdec:	0feb0700 	svceq	0x00eb0700
    cdf0:	00000045 	andeq	r0, r0, r5, asr #32
    cdf4:	00010201 	andeq	r0, r1, r1, lsl #4
    cdf8:	001f7720 	andseq	r7, pc, r0, lsr #14
    cdfc:	0fec0700 	svceq	0x00ec0700
    ce00:	00000045 	andeq	r0, r0, r5, asr #32
    ce04:	00000101 	andeq	r0, r0, r1, lsl #2
    ce08:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    ce0c:	0ba804ef 	bleq	fea0e1d0 <_estack+0xdea091d0>
    ce10:	d9200000 	stmdble	r0!, {}	; <UNPREDICTABLE>
    ce14:	07000025 	streq	r0, [r0, -r5, lsr #32]
    ce18:	00450ff0 	strdeq	r0, [r5], #-240	; 0xffffff10
    ce1c:	04010000 	streq	r0, [r1], #-0
    ce20:	2d200004 	stccs	0, cr0, [r0, #-16]!
    ce24:	07000027 	streq	r0, [r0, -r7, lsr #32]
    ce28:	00450ff1 	strdeq	r0, [r5], #-241	; 0xffffff0f
    ce2c:	04010000 	streq	r0, [r1], #-0
    ce30:	0b000000 	bleq	ce38 <__exidx_end+0x735c>
    ce34:	04f50701 	ldrbteq	r0, [r5], #1793	; 0x701
    ce38:	00000bd2 	ldrdeq	r0, [r0], -r2
    ce3c:	0020e620 	eoreq	lr, r0, r0, lsr #12
    ce40:	0ff60700 	svceq	0x00f60700
    ce44:	00000045 	andeq	r0, r0, r5, asr #32
    ce48:	00070101 	andeq	r0, r7, r1, lsl #2
    ce4c:	00274720 	eoreq	r4, r7, r0, lsr #14
    ce50:	0ff80700 	svceq	0x00f80700
    ce54:	00000045 	andeq	r0, r0, r5, asr #32
    ce58:	00010601 	andeq	r0, r1, r1, lsl #12
    ce5c:	7d041000 	stcvc	0, cr1, [r4, #-0]
    ce60:	03000009 	movweq	r0, #9
    ce64:	0000261c 	andeq	r2, r0, ip, lsl r6
    ce68:	e42f3d08 	strt	r3, [pc], #-3336	; ce70 <__exidx_end+0x7394>
    ce6c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    ce70:	0000262e 	andeq	r2, r0, lr, lsr #12
    ce74:	15780818 	ldrbne	r0, [r8, #-2072]!	; 0xfffff7e8
    ce78:	00000c74 	andeq	r0, r0, r4, ror ip
    ce7c:	001f080c 	andseq	r0, pc, ip, lsl #16
    ce80:	0d790800 	ldcleq	8, cr0, [r9, #-0]
    ce84:	00000058 	andeq	r0, r0, r8, asr r0
    ce88:	077b0c00 	ldrbeq	r0, [fp, -r0, lsl #24]!
    ce8c:	7a080000 	bvc	20ce94 <__ccfg+0x1eceec>
    ce90:	0000580d 	andeq	r5, r0, sp, lsl #16
    ce94:	7b0c0200 	blvc	30d69c <__ccfg+0x2ed6f4>
    ce98:	08000022 	stmdaeq	r0, {r1, r5}
    ce9c:	0b28137d 	bleq	a11c98 <__ccfg+0x9f1cf0>
    cea0:	0c040000 	stceq	0, cr0, [r4], {-0}
    cea4:	0000200a 	andeq	r2, r0, sl
    cea8:	470c7e08 	strmi	r7, [ip, -r8, lsl #28]
    ceac:	08000009 	stmdaeq	r0, {r0, r3}
    ceb0:	0022ab0c 	eoreq	sl, r2, ip, lsl #22
    ceb4:	06860800 	streq	r0, [r6], r0, lsl #16
    ceb8:	00000e67 	andeq	r0, r0, r7, ror #28
    cebc:	21f50c0c 	mvnscs	r0, ip, lsl #24
    cec0:	8a080000 	bhi	20cec8 <__ccfg+0x1ecf20>
    cec4:	000eb106 	andeq	fp, lr, r6, lsl #2
    cec8:	4f0c0d00 	svcmi	0x000c0d00
    cecc:	08000020 	stmdaeq	r0, {r5}
    ced0:	0edb0693 	mrceq	6, 6, r0, cr11, cr3, {4}
    ced4:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    ced8:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    cedc:	450c9408 	strmi	r9, [ip, #-1032]	; 0xfffffbf8
    cee0:	0f000000 	svceq	0x00000000
    cee4:	0023310c 	eoreq	r3, r3, ip, lsl #2
    cee8:	0d950800 	ldceq	8, cr0, [r5]
    ceec:	0000006b 	andeq	r0, r0, fp, rrx
    cef0:	1f350c10 	svcne	0x00350c10
    cef4:	96080000 	strls	r0, [r8], -r0
    cef8:	0009770d 	andeq	r7, r9, sp, lsl #14
    cefc:	03001400 	movweq	r1, #1024	; 0x400
    cf00:	00002488 	andeq	r2, r0, r8, lsl #9
    cf04:	802f3e08 	eorhi	r3, pc, r8, lsl #28
    cf08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    cf0c:	00002180 	andeq	r2, r0, r0, lsl #3
    cf10:	159f0824 	ldrne	r0, [pc, #2084]	; d73c <__exidx_end+0x7c60>
    cf14:	00000d5e 	andeq	r0, r0, lr, asr sp
    cf18:	001f080c 	andseq	r0, pc, ip, lsl #16
    cf1c:	0da00800 	stceq	8, cr0, [r0]
    cf20:	00000058 	andeq	r0, r0, r8, asr r0
    cf24:	077b0c00 	ldrbeq	r0, [fp, -r0, lsl #24]!
    cf28:	a1080000 	mrsge	r0, (UNDEF: 8)
    cf2c:	0000580d 	andeq	r5, r0, sp, lsl #16
    cf30:	7b0c0200 	blvc	30d738 <__ccfg+0x2ed790>
    cf34:	08000022 	stmdaeq	r0, {r1, r5}
    cf38:	0b2813a4 	bleq	a11dd0 <__ccfg+0x9f1e28>
    cf3c:	0c040000 	stceq	0, cr0, [r4], {-0}
    cf40:	0000200a 	andeq	r2, r0, sl
    cf44:	470ca508 	strmi	sl, [ip, -r8, lsl #10]
    cf48:	08000009 	stmdaeq	r0, {r0, r3}
    cf4c:	0022ab0c 	eoreq	sl, r2, ip, lsl #22
    cf50:	06ad0800 	strteq	r0, [sp], r0, lsl #16
    cf54:	00000f15 	andeq	r0, r0, r5, lsl pc
    cf58:	21f50c0c 	mvnscs	r0, ip, lsl #24
    cf5c:	b1080000 	mrslt	r0, (UNDEF: 8)
    cf60:	000f5f06 	andeq	r5, pc, r6, lsl #30
    cf64:	4f0c0d00 	svcmi	0x000c0d00
    cf68:	08000020 	stmdaeq	r0, {r5}
    cf6c:	0f8906c3 	svceq	0x008906c3
    cf70:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    cf74:	000023e6 	andeq	r2, r0, r6, ror #7
    cf78:	1306cd08 	movwne	ip, #27912	; 0x6d08
    cf7c:	0f000010 	svceq	0x00000010
    cf80:	0023310c 	eoreq	r3, r3, ip, lsl #2
    cf84:	0dce0800 	stcleq	8, cr0, [lr]
    cf88:	0000006b 	andeq	r0, r0, fp, rrx
    cf8c:	21340c10 	teqcs	r4, r0, lsl ip
    cf90:	cf080000 	svcgt	0x00080000
    cf94:	0000450c 	andeq	r4, r0, ip, lsl #10
    cf98:	380c1400 	stmdacc	ip, {sl, ip}
    cf9c:	08000024 	stmdaeq	r0, {r2, r5}
    cfa0:	00450cd1 	ldrdeq	r0, [r5], #-193	; 0xffffff3f
    cfa4:	0c150000 	ldceq	0, cr0, [r5], {-0}
    cfa8:	00002441 	andeq	r2, r0, r1, asr #8
    cfac:	450cd208 	strmi	sp, [ip, #-520]	; 0xfffffdf8
    cfb0:	16000000 	strne	r0, [r0], -r0
    cfb4:	0021920c 	eoreq	r9, r1, ip, lsl #4
    cfb8:	06db0800 	ldrbeq	r0, [fp], r0, lsl #16
    cfbc:	0000108d 	andeq	r1, r0, sp, lsl #1
    cfc0:	26810c17 	pkhbtcs	r0, r1, r7, lsl #24
    cfc4:	dc080000 	stcle	0, cr0, [r8], {-0}
    cfc8:	0009470c 	andeq	r4, r9, ip, lsl #14
    cfcc:	c60c1800 	strgt	r1, [ip], -r0, lsl #16
    cfd0:	08000021 	stmdaeq	r0, {r0, r5}
    cfd4:	0bd211dd 	bleq	ff491750 <_estack+0xdf48c750>
    cfd8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    cfdc:	00001f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    cfe0:	770dde08 	strvc	sp, [sp, -r8, lsl #28]
    cfe4:	20000009 	andcs	r0, r0, r9
    cfe8:	24690300 	strbtcs	r0, [r9], #-768	; 0xfffffd00
    cfec:	43080000 	movwmi	r0, #32768	; 0x8000
    cff0:	000d6a3c 	andeq	r6, sp, ip, lsr sl
    cff4:	244a1900 	strbcs	r1, [sl], #-2304	; 0xfffff700
    cff8:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    cffc:	6715021a 			; <UNDEFINED> instruction: 0x6715021a
    d000:	1700000e 	strne	r0, [r0, -lr]
    d004:	00001f08 	andeq	r1, r0, r8, lsl #30
    d008:	0d021b08 	vstreq	d1, [r2, #-32]	; 0xffffffe0
    d00c:	00000058 	andeq	r0, r0, r8, asr r0
    d010:	077b1700 	ldrbeq	r1, [fp, -r0, lsl #14]!
    d014:	1d080000 	stcne	0, cr0, [r8, #-0]
    d018:	00580d02 	subseq	r0, r8, r2, lsl #26
    d01c:	17020000 	strne	r0, [r2, -r0]
    d020:	0000227b 	andeq	r2, r0, fp, ror r2
    d024:	13022008 	movwne	r2, #8200	; 0x2008
    d028:	00000b28 	andeq	r0, r0, r8, lsr #22
    d02c:	200a1704 	andcs	r1, sl, r4, lsl #14
    d030:	21080000 	mrscs	r0, (UNDEF: 8)
    d034:	09470c02 	stmdbeq	r7, {r1, sl, fp}^
    d038:	17080000 	strne	r0, [r8, -r0]
    d03c:	000022ab 	andeq	r2, r0, fp, lsr #5
    d040:	06022908 	streq	r2, [r2], -r8, lsl #18
    d044:	000010d7 	ldrdeq	r1, [r0], -r7
    d048:	21f5170c 	mvnscs	r1, ip, lsl #14
    d04c:	2d080000 	stccs	0, cr0, [r8, #-0]
    d050:	11260602 			; <UNDEFINED> instruction: 0x11260602
    d054:	170d0000 	strne	r0, [sp, -r0]
    d058:	00001efd 	strdeq	r1, [r0], -sp
    d05c:	06023308 	streq	r3, [r2], -r8, lsl #6
    d060:	00001153 	andeq	r1, r0, r3, asr r1
    d064:	2264170e 	rsbcs	r1, r4, #3670016	; 0x380000
    d068:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    d06c:	11800602 	orrne	r0, r0, r2, lsl #12
    d070:	17100000 	ldrne	r0, [r0, -r0]
    d074:	00002093 	muleq	r0, r3, r0
    d078:	0c023908 			; <UNDEFINED> instruction: 0x0c023908
    d07c:	00000045 	andeq	r0, r0, r5, asr #32
    d080:	23271714 			; <UNDEFINED> instruction: 0x23271714
    d084:	41080000 	mrsmi	r0, (UNDEF: 8)
    d088:	11ad0602 			; <UNDEFINED> instruction: 0x11ad0602
    d08c:	17150000 	ldrne	r0, [r5, -r0]
    d090:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    d094:	06025508 	streq	r5, [r2], -r8, lsl #10
    d098:	000011da 	ldrdeq	r1, [r0], -sl
    d09c:	14721716 	ldrbtne	r1, [r2], #-1814	; 0xfffff8ea
    d0a0:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    d0a4:	123a0602 	eorsne	r0, sl, #2097152	; 0x200000
    d0a8:	17180000 	ldrne	r0, [r8, -r0]
    d0ac:	0000208b 	andeq	r2, r0, fp, lsl #1
    d0b0:	0d026908 	vstreq.16	s12, [r2, #-16]	; <UNPREDICTABLE>
    d0b4:	00000058 	andeq	r0, r0, r8, asr r0
    d0b8:	24c9171a 	strbcs	r1, [r9], #1818	; 0x71a
    d0bc:	6a080000 	bvs	20d0c4 <__ccfg+0x1ed11c>
    d0c0:	0b2e0e02 	bleq	b908d0 <__ccfg+0xb70928>
    d0c4:	171c0000 	ldrne	r0, [ip, -r0]
    d0c8:	00001f3a 	andeq	r1, r0, sl, lsr pc
    d0cc:	0d026c08 	stceq	12, cr6, [r2, #-32]	; 0xffffffe0
    d0d0:	00000058 	andeq	r0, r0, r8, asr r0
    d0d4:	22831720 	addcs	r1, r3, #32, 14	; 0x800000
    d0d8:	70080000 	andvc	r0, r8, r0
    d0dc:	00240c02 	eoreq	r0, r4, r2, lsl #24
    d0e0:	17220000 	strne	r0, [r2, -r0]!
    d0e4:	000023c1 	andeq	r2, r0, r1, asr #7
    d0e8:	0c027308 	stceq	3, cr7, [r2], {8}
    d0ec:	00000045 	andeq	r0, r0, r5, asr #32
    d0f0:	010b0024 	tsteq	fp, r4, lsr #32
    d0f4:	b1047f08 	tstlt	r4, r8, lsl #30
    d0f8:	2000000e 	andcs	r0, r0, lr
    d0fc:	0000275e 	andeq	r2, r0, lr, asr r7
    d100:	450f8008 	strmi	r8, [pc, #-8]	; d100 <__exidx_end+0x7624>
    d104:	01000000 	mrseq	r0, (UNDEF: 0)
    d108:	20000404 	andcs	r0, r0, r4, lsl #8
    d10c:	000020fc 	strdeq	r2, [r0], -ip
    d110:	450f8108 	strmi	r8, [pc, #-264]	; d010 <__exidx_end+0x7534>
    d114:	01000000 	mrseq	r0, (UNDEF: 0)
    d118:	20000301 	andcs	r0, r0, r1, lsl #6
    d11c:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    d120:	450f8308 	strmi	r8, [pc, #-776]	; ce20 <__exidx_end+0x7344>
    d124:	01000000 	mrseq	r0, (UNDEF: 0)
    d128:	20000102 	andcs	r0, r0, r2, lsl #2
    d12c:	00001f77 	andeq	r1, r0, r7, ror pc
    d130:	450f8408 	strmi	r8, [pc, #-1032]	; cd30 <__exidx_end+0x7254>
    d134:	01000000 	mrseq	r0, (UNDEF: 0)
    d138:	00000001 	andeq	r0, r0, r1
    d13c:	8708010b 	strhi	r0, [r8, -fp, lsl #2]
    d140:	000edb04 	andeq	sp, lr, r4, lsl #22
    d144:	25d92000 	ldrbcs	r2, [r9]
    d148:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    d14c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d150:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d154:	272d2000 	strcs	r2, [sp, -r0]!
    d158:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    d15c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d160:	00040100 	andeq	r0, r4, r0, lsl #2
    d164:	010b0000 	mrseq	r0, (UNDEF: 11)
    d168:	15048b08 	strne	r8, [r4, #-2824]	; 0xfffff4f8
    d16c:	2000000f 	andcs	r0, r0, pc
    d170:	0000266c 	andeq	r2, r0, ip, ror #12
    d174:	450f8c08 	strmi	r8, [pc, #-3080]	; c574 <__exidx_end+0x6a98>
    d178:	01000000 	mrseq	r0, (UNDEF: 0)
    d17c:	20000701 	andcs	r0, r0, r1, lsl #14
    d180:	000026f4 	strdeq	r2, [r0], -r4
    d184:	450f8f08 	strmi	r8, [pc, #-3848]	; c284 <__exidx_end+0x67a8>
    d188:	01000000 	mrseq	r0, (UNDEF: 0)
    d18c:	20000401 	andcs	r0, r0, r1, lsl #8
    d190:	00001f2d 	andeq	r1, r0, sp, lsr #30
    d194:	450f9108 	strmi	r9, [pc, #-264]	; d094 <__exidx_end+0x75b8>
    d198:	01000000 	mrseq	r0, (UNDEF: 0)
    d19c:	00000301 	andeq	r0, r0, r1, lsl #6
    d1a0:	a608010b 	strge	r0, [r8], -fp, lsl #2
    d1a4:	000f5f04 	andeq	r5, pc, r4, lsl #30
    d1a8:	275e2000 	ldrbcs	r2, [lr, -r0]
    d1ac:	a7080000 	strge	r0, [r8, -r0]
    d1b0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1b4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d1b8:	20fc2000 	rscscs	r2, ip, r0
    d1bc:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    d1c0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1c4:	03010100 	movweq	r0, #4352	; 0x1100
    d1c8:	21bc2000 			; <UNDEFINED> instruction: 0x21bc2000
    d1cc:	aa080000 	bge	20d1d4 <__ccfg+0x1ed22c>
    d1d0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1d4:	01020100 	mrseq	r0, (UNDEF: 18)
    d1d8:	1f772000 	svcne	0x00772000
    d1dc:	ab080000 	blge	20d1e4 <__ccfg+0x1ed23c>
    d1e0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1e4:	00010100 	andeq	r0, r1, r0, lsl #2
    d1e8:	010b0000 	mrseq	r0, (UNDEF: 11)
    d1ec:	8904ae08 	stmdbhi	r4, {r3, r9, sl, fp, sp, pc}
    d1f0:	2000000f 	andcs	r0, r0, pc
    d1f4:	000025d9 	ldrdeq	r2, [r0], -r9
    d1f8:	450faf08 	strmi	sl, [pc, #-3848]	; c2f8 <__exidx_end+0x681c>
    d1fc:	01000000 	mrseq	r0, (UNDEF: 0)
    d200:	20000404 	andcs	r0, r0, r4, lsl #8
    d204:	0000272d 	andeq	r2, r0, sp, lsr #14
    d208:	450fb008 	strmi	fp, [pc, #-8]	; d208 <__exidx_end+0x772c>
    d20c:	01000000 	mrseq	r0, (UNDEF: 0)
    d210:	00000004 	andeq	r0, r0, r4
    d214:	b208010b 	andlt	r0, r8, #-1073741822	; 0xc0000002
    d218:	00101304 	andseq	r1, r0, r4, lsl #6
    d21c:	266c2000 	strbtcs	r2, [ip], -r0
    d220:	b3080000 	movwlt	r0, #32768	; 0x8000
    d224:	0000450f 	andeq	r4, r0, pc, lsl #10
    d228:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d22c:	1fa22000 	svcne	0x00a22000
    d230:	b5080000 	strlt	r0, [r8, #-0]
    d234:	0000450f 	andeq	r4, r0, pc, lsl #10
    d238:	06010100 	streq	r0, [r1], -r0, lsl #2
    d23c:	254a2000 	strbcs	r2, [sl, #-0]
    d240:	b7080000 	strlt	r0, [r8, -r0]
    d244:	0000450f 	andeq	r4, r0, pc, lsl #10
    d248:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    d24c:	26f42000 	ldrbtcs	r2, [r4], r0
    d250:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    d254:	0000450f 	andeq	r4, r0, pc, lsl #10
    d258:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d25c:	1f2d2000 	svcne	0x002d2000
    d260:	bb080000 	bllt	20d268 <__ccfg+0x1ed2c0>
    d264:	0000450f 	andeq	r4, r0, pc, lsl #10
    d268:	03010100 	movweq	r0, #4352	; 0x1100
    d26c:	26892000 	strcs	r2, [r9], r0
    d270:	bd080000 	stclt	0, cr0, [r8, #-0]
    d274:	0000450f 	andeq	r4, r0, pc, lsl #10
    d278:	02010100 	andeq	r0, r1, #0, 2
    d27c:	21cd2000 	biccs	r2, sp, r0
    d280:	bf080000 	svclt	0x00080000
    d284:	0000450f 	andeq	r4, r0, pc, lsl #10
    d288:	01010100 	mrseq	r0, (UNDEF: 17)
    d28c:	25552000 	ldrbcs	r2, [r5, #-0]
    d290:	c1080000 	mrsgt	r0, (UNDEF: 8)
    d294:	0000450f 	andeq	r4, r0, pc, lsl #10
    d298:	00010100 	andeq	r0, r1, r0, lsl #2
    d29c:	010b0000 	mrseq	r0, (UNDEF: 11)
    d2a0:	8d04c408 	cfstrshi	mvf12, [r4, #-32]	; 0xffffffe0
    d2a4:	20000010 	andcs	r0, r0, r0, lsl r0
    d2a8:	0000228b 	andeq	r2, r0, fp, lsl #5
    d2ac:	450fc508 	strmi	ip, [pc, #-1288]	; cdac <__exidx_end+0x72d0>
    d2b0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2b4:	20000701 	andcs	r0, r0, r1, lsl #14
    d2b8:	000020c4 	andeq	r2, r0, r4, asr #1
    d2bc:	450fc608 	strmi	ip, [pc, #-1544]	; ccbc <__exidx_end+0x71e0>
    d2c0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2c4:	20000601 	andcs	r0, r0, r1, lsl #12
    d2c8:	000021ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    d2cc:	450fc808 	strmi	ip, [pc, #-2056]	; cacc <__exidx_end+0x6ff0>
    d2d0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2d4:	20000401 	andcs	r0, r0, r1, lsl #8
    d2d8:	00002168 	andeq	r2, r0, r8, ror #2
    d2dc:	450fc908 	strmi	ip, [pc, #-2312]	; c9dc <__exidx_end+0x6f00>
    d2e0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2e4:	20000301 	andcs	r0, r0, r1, lsl #6
    d2e8:	000024de 	ldrdeq	r2, [r0], -lr
    d2ec:	450fca08 	strmi	ip, [pc, #-2568]	; c8ec <__exidx_end+0x6e10>
    d2f0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2f4:	20000201 	andcs	r0, r0, r1, lsl #4
    d2f8:	00002014 	andeq	r2, r0, r4, lsl r0
    d2fc:	450fcb08 	strmi	ip, [pc, #-2824]	; c7fc <__exidx_end+0x6d20>
    d300:	01000000 	mrseq	r0, (UNDEF: 0)
    d304:	20000101 	andcs	r0, r0, r1, lsl #2
    d308:	00001f12 	andeq	r1, r0, r2, lsl pc
    d30c:	450fcc08 	strmi	ip, [pc, #-3080]	; c70c <__exidx_end+0x6c30>
    d310:	01000000 	mrseq	r0, (UNDEF: 0)
    d314:	00000001 	andeq	r0, r0, r1
    d318:	d408010b 	strle	r0, [r8], #-267	; 0xfffffef5
    d31c:	0010d704 	andseq	sp, r0, r4, lsl #14
    d320:	275e2000 	ldrbcs	r2, [lr, -r0]
    d324:	d5080000 	strle	r0, [r8, #-0]
    d328:	0000450f 	andeq	r4, r0, pc, lsl #10
    d32c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d330:	20fc2000 	rscscs	r2, ip, r0
    d334:	d6080000 	strle	r0, [r8], -r0
    d338:	0000450f 	andeq	r4, r0, pc, lsl #10
    d33c:	03010100 	movweq	r0, #4352	; 0x1100
    d340:	21bc2000 			; <UNDEFINED> instruction: 0x21bc2000
    d344:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    d348:	0000450f 	andeq	r4, r0, pc, lsl #10
    d34c:	01020100 	mrseq	r0, (UNDEF: 18)
    d350:	1f772000 	svcne	0x00772000
    d354:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    d358:	0000450f 	andeq	r4, r0, pc, lsl #10
    d35c:	00010100 	andeq	r0, r1, r0, lsl #2
    d360:	011a0000 	tsteq	sl, r0
    d364:	04022208 	streq	r2, [r2], #-520	; 0xfffffdf8
    d368:	00001126 	andeq	r1, r0, r6, lsr #2
    d36c:	00275e21 	eoreq	r5, r7, r1, lsr #28
    d370:	02230800 	eoreq	r0, r3, #0, 16
    d374:	0000450f 	andeq	r4, r0, pc, lsl #10
    d378:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d37c:	20fc2100 	rscscs	r2, ip, r0, lsl #2
    d380:	24080000 	strcs	r0, [r8], #-0
    d384:	00450f02 	subeq	r0, r5, r2, lsl #30
    d388:	01010000 	mrseq	r0, (UNDEF: 1)
    d38c:	bc210003 	stclt	0, cr0, [r1], #-12
    d390:	08000021 	stmdaeq	r0, {r0, r5}
    d394:	450f0226 	strmi	r0, [pc, #-550]	; d176 <__exidx_end+0x769a>
    d398:	01000000 	mrseq	r0, (UNDEF: 0)
    d39c:	21000102 	tstcs	r0, r2, lsl #2
    d3a0:	00001f77 	andeq	r1, r0, r7, ror pc
    d3a4:	0f022708 	svceq	0x00022708
    d3a8:	00000045 	andeq	r0, r0, r5, asr #32
    d3ac:	00000101 	andeq	r0, r0, r1, lsl #2
    d3b0:	08011a00 	stmdaeq	r1, {r9, fp, ip}
    d3b4:	5304022a 	movwpl	r0, #16938	; 0x422a
    d3b8:	21000011 	tstcs	r0, r1, lsl r0
    d3bc:	000025d9 	ldrdeq	r2, [r0], -r9
    d3c0:	0f022b08 	svceq	0x00022b08
    d3c4:	00000045 	andeq	r0, r0, r5, asr #32
    d3c8:	00040401 	andeq	r0, r4, r1, lsl #8
    d3cc:	00272d21 	eoreq	r2, r7, r1, lsr #26
    d3d0:	022c0800 	eoreq	r0, ip, #0, 16
    d3d4:	0000450f 	andeq	r4, r0, pc, lsl #10
    d3d8:	00040100 	andeq	r0, r4, r0, lsl #2
    d3dc:	021a0000 	andseq	r0, sl, #0
    d3e0:	04022e08 	streq	r2, [r2], #-3592	; 0xfffff1f8
    d3e4:	00001180 	andeq	r1, r0, r0, lsl #3
    d3e8:	00221421 	eoreq	r1, r2, r1, lsr #8
    d3ec:	022f0800 	eoreq	r0, pc, #0, 16
    d3f0:	00005810 	andeq	r5, r0, r0, lsl r8
    d3f4:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    d3f8:	27102100 	ldrcs	r2, [r0, -r0, lsl #2]
    d3fc:	32080000 	andcc	r0, r8, #0
    d400:	00581002 	subseq	r1, r8, r2
    d404:	0d020000 	stceq	0, cr0, [r2, #-0]
    d408:	1a000000 	bne	d410 <__exidx_end+0x7934>
    d40c:	02340804 	eorseq	r0, r4, #4, 16	; 0x40000
    d410:	0011ad04 	andseq	sl, r1, r4, lsl #26
    d414:	23a92100 			; <UNDEFINED> instruction: 0x23a92100
    d418:	35080000 	strcc	r0, [r8, #-0]
    d41c:	006b1002 	rsbeq	r1, fp, r2
    d420:	04040000 	streq	r0, [r4], #-0
    d424:	b921001c 	stmdblt	r1!, {r2, r3, r4}
    d428:	08000024 	stmdaeq	r0, {r2, r5}
    d42c:	6b100237 	blvs	40dd10 <__ccfg+0x3edd68>
    d430:	04000000 	streq	r0, [r0], #-0
    d434:	00000315 	andeq	r0, r0, r5, lsl r3
    d438:	3a08011a 	bcc	20d8a8 <__ccfg+0x1ed900>
    d43c:	11da0402 	bicsne	r0, sl, r2, lsl #8
    d440:	05210000 	streq	r0, [r1, #-0]!
    d444:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d448:	450f023b 	strmi	r0, [pc, #-571]	; d215 <__exidx_end+0x7739>
    d44c:	01000000 	mrseq	r0, (UNDEF: 0)
    d450:	21000206 	tstcs	r0, r6, lsl #4
    d454:	00001fcf 	andeq	r1, r0, pc, asr #31
    d458:	0f023d08 	svceq	0x00023d08
    d45c:	00000045 	andeq	r0, r0, r5, asr #32
    d460:	00000201 	andeq	r0, r0, r1, lsl #4
    d464:	08021a00 	stmdaeq	r2, {r9, fp, ip}
    d468:	3a040242 	bcc	10dd78 <__ccfg+0xeddd0>
    d46c:	21000012 	tstcs	r0, r2, lsl r0
    d470:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    d474:	10024308 	andne	r4, r2, r8, lsl #6
    d478:	00000058 	andeq	r0, r0, r8, asr r0
    d47c:	000a0602 	andeq	r0, sl, r2, lsl #12
    d480:	00224e21 	eoreq	r4, r2, r1, lsr #28
    d484:	02440800 	subeq	r0, r4, #0, 16
    d488:	00005810 	andeq	r5, r0, r0, lsl r8
    d48c:	09010200 	stmdbeq	r1, {r9}
    d490:	241a2100 	ldrcs	r2, [sl], #-256	; 0xffffff00
    d494:	46080000 	strmi	r0, [r8], -r0
    d498:	00581002 	subseq	r1, r8, r2
    d49c:	01020000 	mrseq	r0, (UNDEF: 2)
    d4a0:	b7210008 	strlt	r0, [r1, -r8]!
    d4a4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d4a8:	58100248 	ldmdapl	r0, {r3, r6, r9}
    d4ac:	02000000 	andeq	r0, r0, #0
    d4b0:	21000404 	tstcs	r0, r4, lsl #8
    d4b4:	00001f5a 	andeq	r1, r0, sl, asr pc
    d4b8:	10024d08 	andne	r4, r2, r8, lsl #26
    d4bc:	00000058 	andeq	r0, r0, r8, asr r0
    d4c0:	00000302 	andeq	r0, r0, r2, lsl #6
    d4c4:	08021a00 	stmdaeq	r2, {r9, fp, ip}
    d4c8:	89040256 	stmdbhi	r4, {r1, r2, r4, r6, r9}
    d4cc:	21000012 	tstcs	r0, r2, lsl r0
    d4d0:	000021af 	andeq	r2, r0, pc, lsr #3
    d4d4:	10025708 	andne	r5, r2, r8, lsl #14
    d4d8:	00000058 	andeq	r0, r0, r8, asr r0
    d4dc:	000d0302 	andeq	r0, sp, r2, lsl #6
    d4e0:	00214e21 	eoreq	r4, r1, r1, lsr #28
    d4e4:	025d0800 	subseq	r0, sp, #0, 16
    d4e8:	00005810 	andeq	r5, r0, r0, lsl r8
    d4ec:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    d4f0:	20ee2100 	rsccs	r2, lr, r0, lsl #2
    d4f4:	5f080000 	svcpl	0x00080000
    d4f8:	00581002 	subseq	r1, r8, r2
    d4fc:	06020000 	streq	r0, [r2], -r0
    d500:	ed210006 	stc	0, cr0, [r1, #-24]!	; 0xffffffe8
    d504:	08000023 	stmdaeq	r0, {r0, r1, r5}
    d508:	58100266 	ldmdapl	r0, {r1, r2, r5, r6, r9}
    d50c:	02000000 	andeq	r0, r0, #0
    d510:	00000501 	andeq	r0, r0, r1, lsl #10
    d514:	00007709 	andeq	r7, r0, r9, lsl #14
    d518:	00129900 	andseq	r9, r2, r0, lsl #18
    d51c:	00910a00 	addseq	r0, r1, r0, lsl #20
    d520:	00a20000 	adceq	r0, r2, r0
    d524:	00128904 	andseq	r8, r2, r4, lsl #18
    d528:	22b82200 	adcscs	r2, r8, #0, 4
    d52c:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
    d530:	00129910 	andseq	r9, r2, r0, lsl r9
    d534:	ad028c00 	stcge	12, cr8, [r2, #-0]
    d538:	49210004 	stmdbmi	r1!, {r2}
    d53c:	7d210004 	stcvc	0, cr0, [r1, #-16]!
    d540:	81210004 			; <UNDEFINED> instruction: 0x81210004
    d544:	11210004 			; <UNDEFINED> instruction: 0x11210004
    d548:	91210005 			; <UNDEFINED> instruction: 0x91210005
    d54c:	41210005 			; <UNDEFINED> instruction: 0x41210005
    d550:	f8210006 			; <UNDEFINED> instruction: 0xf8210006
    d554:	f84710b5 			; <UNDEFINED> instruction: 0xf84710b5
    d558:	00460eb5 	strheq	r0, [r6], #-229	; 0xffffff1b
    d55c:	ad250121 	stfges	f0, [r5, #-132]!	; 0xffffff7c
    d560:	0a473004 	beq	11d9578 <__ccfg+0x11b95d0>
    d564:	00780348 	rsbseq	r0, r8, r8, asr #6
    d568:	9bf80ff0 	blls	ffe11530 <_estack+0xdfe0c530>
    d56c:	12d00b07 	sbcsne	r0, r0, #7168	; 0x1c00
    d570:	ff78204c 			; <UNDEFINED> instruction: 0xff78204c
    d574:	ffd00728 			; <UNDEFINED> instruction: 0xffd00728
    d578:	0e702121 	rpweqsp	f2, f0, f1
    d57c:	24240f49 	strtcs	r0, [r4], #-3913	; 0xfffff0b7
    d580:	60432002 	subvs	r2, r3, r2
    d584:	f882c831 			; <UNDEFINED> instruction: 0xf882c831
    d588:	01b5f8bd 			; <UNDEFINED> instruction: 0x01b5f8bd
    d58c:	6b470048 	blvs	11cd6b4 <__ccfg+0x11ad70c>
    d590:	e5210002 	str	r0, [r1, #-2]!
    d594:	0900004c 	stmdbeq	r0, {r2, r3, r6}
    d598:	08e00148 	stmiaeq	r0!, {r3, r6, r8}^
    d59c:	060c0048 	streq	r0, [ip], -r8, asr #32
    d5a0:	2249054c 	subcs	r0, r9, #76, 10	; 0x13000000
    d5a4:	012aff78 	msreq	(UNDEF: 58), r8
    d5a8:	227acad1 	rsbscs	ip, sl, #856064	; 0xd1000
    d5ac:	c8316070 	ldmdagt	r1!, {r4, r5, r6, sp, lr}
    d5b0:	80467082 	subhi	r7, r6, r2, lsl #1
    d5b4:	0047001c 	subeq	r0, r7, ip, lsl r0
    d5b8:	a4400862 	strbge	r0, [r0], #-2146	; 0xfffff79e
    d5bc:	07210006 	streq	r0, [r1, -r6]!
    d5c0:	f008080f 			; <UNDEFINED> instruction: 0xf008080f
    d5c4:	704708b4 	strhvc	r0, [r7], #-132	; 0xffffff7c
    d5c8:	154603b5 	strbne	r0, [r6, #-949]	; 0xfffffc4b
    d5cc:	06290146 	strteq	r0, [r9], -r6, asr #2
    d5d0:	062900d0 			; <UNDEFINED> instruction: 0x062900d0
    d5d4:	284a11d0 	stmdacs	sl, {r4, r6, r7, r8, ip}^
    d5d8:	bbf7ff46 	bllt	ffe0d2f8 <_estack+0xdfe082f8>
    d5dc:	0fbd70ff 	svceq	0x00bd70ff
    d5e0:	0fe00048 	svceq	0x00e00048
    d5e4:	83240548 			; <UNDEFINED> instruction: 0x83240548
    d5e8:	40d80342 	sbcsmi	r0, r8, r2, asr #6
    d5ec:	001e6408 	andseq	r6, lr, r8, lsl #8
    d5f0:	e3dcf92c 	bics	pc, ip, #44, 18	; 0xb0000
    d5f4:	40200140 	eormi	r0, r0, r0, asr #2
    d5f8:	82181803 	andshi	r1, r8, #196608	; 0x30000
    d5fc:	0729010b 	streq	r0, [r9, -fp, lsl #2]!
    d600:	004906d0 	ldrdeq	r0, [r9], #-96	; 0xffffffa0
    d604:	28318023 	ldmdacs	r1!, {r0, r1, r5, pc}
    d608:	a5f7ff46 	ldrbge	pc, [r7, #3910]!	; 0xf46	; <UNPREDICTABLE>
    d60c:	70b2e0ff 	ldrshtvc	lr, [r2], pc
    d610:	044902bd 	strbeq	r0, [r9], #-701	; 0xfffffd43
    d614:	f6316c4b 			; <UNDEFINED> instruction: 0xf6316c4b
    d618:	830000e7 	movwhi	r0, #231	; 0xe7
    d61c:	a000005c 	andge	r0, r0, ip, asr r0
    d620:	002386bc 	strhteq	r8, [r3], -ip
    d624:	74230d83 	strtvc	r0, [r3], #-3459	; 0xfffff27d
    d628:	f8210006 			; <UNDEFINED> instruction: 0xf8210006
    d62c:	054e1ab5 	strbeq	r1, [lr, #-2741]	; 0xfffff54b
    d630:	196b7146 	stmdbne	fp!, {r1, r2, r6, r8, ip, sp, lr}^
    d634:	e409cc48 	str	ip, [r9], #-3144	; 0xfffff3b8
    d638:	112d0001 			; <UNDEFINED> instruction: 0x112d0001
    d63c:	094918d0 	stmdbeq	r9, {r4, r6, r7, fp, ip}^
    d640:	0f290278 	svceq	0x00290278
    d644:	047b00d0 	ldrbteq	r0, [fp], #-208	; 0xffffff30
    d648:	01b67243 			; <UNDEFINED> instruction: 0x01b67243
    d64c:	404f1520 	submi	r1, pc, r0, lsr #10
    d650:	1147b802 	cmpne	r7, r2, lsl #16
    d654:	00382048 	eorseq	r2, r8, r8, asr #32
    d658:	c909c188 	stmdbgt	r9, {r3, r7, r8, lr, pc}
    d65c:	16d00407 	ldrbne	r0, [r0], r7, lsl #8
    d660:	f07ac0e0 			; <UNDEFINED> instruction: 0xf07ac0e0
    d664:	ee7b40e7 	cdp	0, 7, cr4, cr11, cr7, {7}
    d668:	74490fe7 	strbvc	r0, [r9], #-4071	; 0xfffff019
    d66c:	4061cc63 	rsbmi	ip, r1, r3, ror #24
    d670:	0c07c00a 	stceq	0, cr12, [r7], {10}
    d674:	802001d0 	ldrdhi	r0, [r0], -r0	; <UNPREDICTABLE>
    d678:	006b3103 	rsbeq	r3, fp, r3, lsl #2
    d67c:	01d0012d 	bicseq	r0, r0, sp, lsr #2
    d680:	81e00043 	mvnhi	r0, r3, asr #32
    d684:	31460843 	cmpcc	r6, r3, asr #16
    d688:	40490763 	submi	r0, r9, r3, ror #14
    d68c:	00634839 	rsbeq	r4, r3, r9, lsr r8
    d690:	6247b820 	subvs	fp, r7, #32, 16	; 0x200000
    d694:	80bdf8b6 	ldrhthi	pc, [sp], r6	; <UNPREDICTABLE>
    d698:	88210002 	stmdahi	r1!, {r1}
    d69c:	9b210000 	blls	84d6a4 <__ccfg+0x82d6fc>
    d6a0:	7b210002 	blvc	84d6b0 <__ccfg+0x82d708>
    d6a4:	4000003f 	andmi	r0, r0, pc, lsr r0
    d6a8:	10400440 	subne	r0, r0, r0, asr #8
    d6ac:	004a22b5 	strheq	r2, [sl], #-37	; 0xffffffdb
    d6b0:	21615121 	cmncs	r1, r1, lsr #2
    d6b4:	c9688949 	stmdbgt	r8!, {r0, r3, r6, r8, fp, pc}^
    d6b8:	21d40900 	bicscs	r0, r4, r0, lsl #18
    d6bc:	ca4b2049 	bgt	12d57e8 <__ccfg+0x12b5840>
    d6c0:	4b429805 	blmi	10b36dc <__ccfg+0x1093734>
    d6c4:	13d8016b 	bicsne	r0, r8, #-1073741798	; 0xc000001a
    d6c8:	93e00043 	mvnls	r0, #67	; 0x43
    d6cc:	1d634b43 	fstmdbxne	r3!, {d20-d52}	;@ Deprecated
    d6d0:	77f7ff49 	ldrbvc	pc, [r7, r9, asr #30]!	; <UNPREDICTABLE>
    d6d4:	38bd10ff 	popcc	{r0, r1, r2, r3, r4, r5, r6, r7, ip}
    d6d8:	284d1ab5 	stmdacs	sp, {r0, r2, r4, r5, r7, r9, fp, ip}^
    d6dc:	2728007f 			; <UNDEFINED> instruction: 0x2728007f
    d6e0:	00481ad1 	ldrdeq	r1, [r8], #-161	; 0xffffff5f
    d6e4:	c009c088 	andgt	ip, r9, r8, lsl #1
    d6e8:	12d12207 	sbcsne	r2, r1, #1879048192	; 0x70000000
    d6ec:	0069604c 	rsbeq	r6, r9, ip, asr #32
    d6f0:	68d11e28 	ldmvs	r1, {r3, r5, r9, sl, fp, ip}^
    d6f4:	45f00046 	ldrbmi	r0, [r0, #70]!	; 0x46
    d6f8:	004668f8 	strdeq	r6, [r6], #-136	; 0xffffff78
    d6fc:	17280178 			; <UNDEFINED> instruction: 0x17280178
    d700:	404668d1 	ldrdmi	r6, [r6], #-129	; 0xffffff7f
    d704:	13281078 			; <UNDEFINED> instruction: 0x13281078
    d708:	602008d2 	ldrdvs	r0, [r0], -r2	; <UNPREDICTABLE>
    d70c:	406a6861 	rsbmi	r6, sl, r1, ror #16
    d710:	20014009 	andcs	r4, r1, r9
    d714:	004a0e60 	subeq	r0, sl, r0, ror #28
    d718:	0d62d121 	stfeqp	f5, [r2, #-132]!	; 0xffffff7c
    d71c:	1121024a 			; <UNDEFINED> instruction: 0x1121024a
    d720:	08210160 	stmdaeq	r1!, {r5, r6, r8}
    d724:	03602043 	cmneq	r0, #67	; 0x43
    d728:	68430821 	stmdavs	r3, {r0, r5, fp}^
    d72c:	38602062 	stmdacc	r0!, {r1, r5, r6, sp}^
    d730:	804809bd 	strhhi	r0, [r8], #-157	; 0xffffff63
    d734:	00bd3847 	adcseq	r3, sp, r7, asr #16
    d738:	18400440 	stmdane	r0, {r6, sl}^
    d73c:	00210000 	eoreq	r0, r1, r0
    d740:	80089300 	andhi	r9, r8, r0, lsl #6
    d744:	cf210002 	svcgt	0x00210002
    d748:	68000068 	stmdavs	r0, {r3, r5, r6}
    d74c:	00210000 	eoreq	r0, r1, r0
    d750:	80400411 	subhi	r0, r0, r1, lsl r4
    d754:	c3e000e2 	mvngt	r0, #226	; 0xe2
    d758:	0700003b 	smladxeq	r0, fp, r0, r0
    d75c:	00280049 	eoreq	r0, r8, r9, asr #32
    d760:	062004d0 			; <UNDEFINED> instruction: 0x062004d0
    d764:	09b6724a 	ldmibeq	r6!, {r1, r3, r6, r9, ip, sp, lr}
    d768:	0107c978 	tsteq	r7, r8, ror r9
    d76c:	005810d0 	ldrsbeq	r1, [r8], #-0
    d770:	622080e0 	eorvs	r8, r0, #224	; 0xe0
    d774:	70b240b6 	ldrhtvc	r4, [r2], r6
    d778:	6b000047 	blvs	d89c <__exidx_end+0x7dc0>
    d77c:	58210002 	stmdapl	r1!, {r1}
    d780:	03400460 	movteq	r0, #1120	; 0x460
    d784:	014801b4 	strheq	r0, [r8, #-20]	; 0xffffffec
    d788:	a5bd0190 	ldrge	r0, [sp, #400]!	; 0x190
    d78c:	0000006f 	andeq	r0, r0, pc, rrx
    d790:	01000000 	mrseq	r0, (UNDEF: 0)
    d794:	0a000300 	beq	e39c <__exidx_end+0x88c0>
    d798:	59001f00 	stmdbpl	r0, {r8, r9, sl, fp, ip}
    d79c:	3900eb00 	stmdbcc	r0, {r8, r9, fp, sp, lr, pc}
    d7a0:	f904ea02 			; <UNDEFINED> instruction: 0xf904ea02
    d7a4:	eb129709 	bl	4b33d0 <__ccfg+0x493428>
    d7a8:	7832a11f 	ldmdavc	r2!, {r0, r1, r2, r3, r4, r8, sp, pc}
    d7ac:	fa660a4a 	blx	19900dc <__ccfg+0x1970134>
    d7b0:	639e8c82 	orrsvs	r8, lr, #33280	; 0x8200
    d7b4:	64c917b6 	strbvs	r1, [r9], #1974	; 0x7b6
    d7b8:	c1deedd6 	ldrsbgt	lr, [lr, #214]	; 0xd6
    d7bc:	ffe5e0e3 			; <UNDEFINED> instruction: 0xffe5e0e3
    d7c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    d7c4:	00000077 	andeq	r0, r0, r7, ror r0
    d7c8:	00001549 	andeq	r1, r0, r9, asr #10
    d7cc:	00009123 	andeq	r9, r0, r3, lsr #2
    d7d0:	0001ac00 	andeq	sl, r1, r0, lsl #24
    d7d4:	00153804 	andseq	r3, r5, r4, lsl #16
    d7d8:	23412200 	movtcs	r2, #4608	; 0x1200
    d7dc:	3a0a0000 	bcc	28d7e4 <__ccfg+0x26d83c>
    d7e0:	00154910 	andseq	r4, r5, r0, lsl r9
    d7e4:	a306b400 	movwge	fp, #25600	; 0x6400
    d7e8:	7f000061 	svcvc	0x00000061
    d7ec:	4d130714 	ldcmi	7, cr0, [r3, #-80]	; 0xffffffb0
    d7f0:	2e24f100 	abscss	f7, f0
    d7f4:	b03f131f 	eorslt	r1, pc, pc, lsl r3	; <UNPREDICTABLE>
    d7f8:	07003f0a 	streq	r3, [r0, -sl, lsl #30]
    d7fc:	300000ff 	strdcc	r0, [r0], -pc	; <UNPREDICTABLE>
    d800:	01400040 	cmpeq	r0, r0, asr #32
    d804:	07400340 	strbeq	r0, [r0, -r0, asr #6]
    d808:	4f400f40 	svcmi	0x00400f40
    d80c:	cf40cf40 	svcgt	0x0040cf40
    d810:	cf43cf41 	svcgt	0x0043cf41
    d814:	cf4fcf47 	svcgt	0x004fcf47
    d818:	cf2fcf3f 	svcgt	0x002fcf3f
    d81c:	000fcf1f 	andeq	ip, pc, pc, lsl pc	; <UNPREDICTABLE>
    d820:	0f000000 	svceq	0x00000000
    d824:	00000800 	andeq	r0, r0, r0, lsl #16
    d828:	00003f00 	andeq	r3, r0, r0, lsl #30
    d82c:	3f004000 	svccc	0x00004000
    d830:	04000000 	streq	r0, [r0], #-0
    d834:	0e006800 	cdpeq	8, 0, cr6, cr0, cr0, {0}
    d838:	0600dc00 	streq	sp, [r0], -r0, lsl #24
    d83c:	1a004300 	bne	1e444 <__exidx_end+0x18968>
    d840:	00000500 	andeq	r0, r0, r0, lsl #10
    d844:	02000000 	andeq	r0, r0, #0
    d848:	3f000000 	svccc	0x00000000
    d84c:	00000000 	andeq	r0, r0, r0
    d850:	c0000400 	andgt	r0, r0, r0, lsl #8
    d854:	04000000 	streq	r0, [r0], #-0
    d858:	0000c000 	andeq	ip, r0, r0
    d85c:	50000700 	andpl	r0, r0, r0, lsl #14
    d860:	009100c0 	addseq	r0, r1, r0, asr #1
    d864:	00c07070 	sbceq	r7, r0, r0, ror r0
    d868:	82700091 	rsbshi	r0, r0, #145	; 0x91
    d86c:	31002131 	tstcc	r0, r1, lsr r1
    d870:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    d874:	01810170 	orreq	r0, r1, r0, ror r1
    d878:	82a100b1 	adchi	r0, r1, #177	; 0xb1
    d87c:	10913231 	addsne	r3, r1, r1, lsr r2
    d880:	119101b1 			; <UNDEFINED> instruction: 0x119101b1
    d884:	41814110 	orrmi	r4, r1, r0, lsl r1
    d888:	f1404f22 			; <UNDEFINED> instruction: 0xf1404f22
    d88c:	51700006 	cmnpl	r0, r6
    d890:	309101c0 	addscc	r0, r1, r0, asr #3
    d894:	83391018 	teqhi	r9, #24
    d898:	18d00831 	ldmne	r0, {r0, r4, r5, fp}^
    d89c:	316f4131 	cmncc	pc, r1, lsr r1	; <UNPREDICTABLE>
    d8a0:	10913100 	addsne	r3, r1, r0, lsl #2
    d8a4:	141483b1 	ldrne	r8, [r4], #-945	; 0xfffffc4f
    d8a8:	00685b16 	rsbeq	r5, r8, r6, lsl fp
    d8ac:	50102570 	andspl	r2, r0, r0, ror r5
    d8b0:	f49100c0 			; <UNDEFINED> instruction: 0xf49100c0
    d8b4:	20c0c0c3 	sbccs	ip, r0, r3, asr #1
    d8b8:	316f0314 	cmncc	pc, r4, lsl r3	; <UNPREDICTABLE>
    d8bc:	22044110 	andcs	r4, r4, #16, 2
    d8c0:	213182c0 	teqcs	r1, r0, asr #5
    d8c4:	10913100 	addsne	r3, r1, r0, lsl #2
    d8c8:	313963b1 	teqcc	r9, r1	; <illegal shifter operand>
    d8cc:	82044110 	andhi	r4, r4, #16, 2
    d8d0:	213182c0 	teqcs	r1, r0, asr #5
    d8d4:	10913100 	addsne	r3, r1, r0, lsl #2
    d8d8:	313963b1 	teqcc	r9, r1	; <illegal shifter operand>
    d8dc:	82c0a210 	sbchi	sl, r0, #16, 4
    d8e0:	31002131 	tstcc	r0, r1, lsr r1
    d8e4:	50b11091 	umlalspl	r1, r1, r1, r0	; <UNPREDICTABLE>
    d8e8:	05311510 	ldreq	r1, [r1, #-1296]!	; 0xfffffaf0
    d8ec:	00920514 	addseq	r0, r2, r4, lsl r5
    d8f0:	52643f70 	rsbpl	r3, r4, #112, 30	; 0x1c0
    d8f4:	311031c0 	tstcc	r0, r0, asr #3
    d8f8:	c1316106 	teqgt	r1, r6, lsl #2
    d8fc:	12644202 	rsbne	r4, r4, #536870912	; 0x20000000
    d900:	211031c1 	tstcs	r0, r1, asr #3
    d904:	51067139 	tstpl	r6, r9, lsr r1
    d908:	4202e131 	andmi	lr, r2, #1073741836	; 0x4000000c
    d90c:	8a700064 	bhi	1c0daa4 <__ccfg+0x1bedafc>
    d910:	88659965 	stmdahi	r5!, {r0, r2, r5, r6, r8, fp, ip, pc}^
    d914:	508220c0 	addpl	r2, r2, r0, asr #1
    d918:	00398039 	eorseq	r8, r9, r9, lsr r0
    d91c:	41409f1e 	cmpmi	r0, lr, lsl pc
    d920:	183001c0 	ldmdane	r0!, {r6, r7, r8}
    d924:	891a1814 	ldmdbhi	sl, {r2, r4, fp, ip}
    d928:	608230c0 	addvs	r3, r2, r0, asr #1
    d92c:	00398039 	eorseq	r8, r9, r9, lsr r0
    d930:	4140a91e 	cmpmi	r0, lr, lsl r9
    d934:	193001c0 	ldmdbne	r0!, {r6, r7, r8}
    d938:	3c1a1914 			; <UNDEFINED> instruction: 0x3c1a1914
    d93c:	10913664 	addsne	r3, r1, r4, ror #12
    d940:	109134b1 			; <UNDEFINED> instruction: 0x109134b1
    d944:	00b054b1 	ldrhteq	r5, [r0], r1
    d948:	64a05471 	strtvs	r5, [r0], #1137	; 0x471
    d94c:	0080f0b0 	strheq	pc, [r0], r0	; <UNPREDICTABLE>
    d950:	4040af22 	submi	sl, r0, r2, lsr #30
    d954:	3290b012 	addscc	fp, r0, #18
    d958:	538253b0 	orrpl	r5, r2, #176, 6	; 0xc0000002
    d95c:	85395339 	ldrhi	r5, [r9, #-825]!	; 0xfffffcc7
    d960:	11643f64 	cmnne	r4, r4, ror #30
    d964:	42c122c1 	sbcmi	r2, r1, #268435468	; 0x1000000c
    d968:	c2c17064 	sbcgt	r7, r1, #100	; 0x64
    d96c:	c2c11168 	sbcgt	r1, r1, #104, 2
    d970:	706442c0 	rsbvc	r4, r4, r0, asr #5
    d974:	5068c7c1 	rsbpl	ip, r8, r1, asr #15
    d978:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    d97c:	15929872 	ldrne	r9, [r2, #2162]	; 0x872
    d980:	42161416 	andsmi	r1, r6, #369098752	; 0x16000000
    d984:	f0105310 			; <UNDEFINED> instruction: 0xf0105310
    d988:	318221c1 	orrcc	r2, r2, r1, asr #3
    d98c:	81393131 	teqhi	r9, r1, lsr r1
    d990:	51313139 	teqpl	r1, r9, lsr r1
    d994:	72b270b0 	adcsvc	r7, r2, #176	; 0xb0
    d998:	99722765 	ldmdbls	r2!, {r0, r2, r5, r6, r8, r9, sl, sp}^
    d99c:	62b27092 	adcsvs	r7, r2, #146	; 0x92
    d9a0:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    d9a4:	218231c3 	orrcs	r3, r2, r3, asr #3
    d9a8:	81392131 	teqhi	r9, r1, lsr r1
    d9ac:	72101b39 	andsvc	r1, r0, #58368	; 0xe400
    d9b0:	82c0e265 	sbchi	lr, r0, #1342177286	; 0x50000006
    d9b4:	80826031 	addhi	r6, r2, r1, lsr r0
    d9b8:	02398031 	eorseq	r8, r9, #49	; 0x31
    d9bc:	00b06100 	adcseq	r6, r0, r0, lsl #2
    d9c0:	10913271 	addsne	r3, r1, r1, ror r2
    d9c4:	61a051b1 	lsrvs	r5, r1	; <illegal shifter operand>
    d9c8:	307227b0 	ldrhtcc	r2, [r2], #-112	; 0xffffff90
    d9cc:	0068f3c2 	rsbeq	pc, r8, r2, asr #7
    d9d0:	b0128000 	andslt	r8, r2, r0
    d9d4:	00b03290 	umlalseq	r3, r0, r0, r2
    d9d8:	00c05070 	sbceq	r5, r0, r0, ror r0
    d9dc:	99722791 	ldmdbls	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    d9e0:	73106292 	tstvc	r0, #536870921	; 0x20000009
    d9e4:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    d9e8:	21312182 	teqcs	r1, r2, lsl #3
    d9ec:	51398139 	teqpl	r9, r9, lsr r1
    d9f0:	7eb270b0 	mrcvc	0, 5, r7, cr2, cr0, {5}
    d9f4:	98722765 	ldmdals	r2!, {r0, r2, r5, r6, r8, r9, sl, sp}^
    d9f8:	42b27092 	adcsmi	r7, r2, #146	; 0x92
    d9fc:	f0105310 			; <UNDEFINED> instruction: 0xf0105310
    da00:	318221c1 	orrcc	r2, r2, r1, asr #3
    da04:	81393131 	teqhi	r9, r1, lsr r1
    da08:	1a313139 	bne	c59ef4 <__ccfg+0xc39f4c>
    da0c:	51657e10 	cmnpl	r5, r0, lsl lr
    da10:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    da14:	18c0b072 	stmiane	r0, {r1, r4, r5, r6, ip, sp, pc}^
    da18:	01643f69 	cmneq	r4, r9, ror #30
    da1c:	42c122c1 	sbcmi	r2, r1, #268435468	; 0x1000000c
    da20:	c2c10164 	sbcgt	r0, r1, #100, 2
    da24:	156442c0 	strbne	r4, [r4, #-704]!	; 0xfffffd40
    da28:	35643c1a 	strbcc	r3, [r4, #-3098]!	; 0xfffff3e6
    da2c:	53b11091 			; <UNDEFINED> instruction: 0x53b11091
    da30:	c0648582 	rsbgt	r8, r4, r2, lsl #11
    da34:	3290b012 	addscc	fp, r0, #18
    da38:	3f7000b0 	svccc	0x007000b0
    da3c:	81c27264 	bichi	r7, r2, r4, ror #4
    da40:	226442c0 	rsbcs	r4, r4, #192, 4
    da44:	42c111c1 	sbcmi	r1, r1, #1073741872	; 0x40000030
    da48:	11c00264 	bicne	r0, r0, r4, ror #4
    da4c:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    da50:	42c331c0 	sbcmi	r3, r3, #192, 2	; 0x30
    da54:	11c36264 	bicne	r6, r3, r4, ror #4
    da58:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    da5c:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    da60:	53825364 	orrpl	r5, r2, #100, 6	; 0x90000001
    da64:	e2648539 	rsb	r8, r4, #239075328	; 0xe400000
    da68:	116447c3 	cmnne	r4, r3, asr #15
    da6c:	42414022 	submi	r4, r1, #34	; 0x22
    da70:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    da74:	11c25264 	bicne	r5, r2, r4, ror #4
    da78:	726442c1 	rsbvc	r4, r4, #268435468	; 0x1000000c
    da7c:	42cee1c2 	sbcmi	lr, lr, #-2147483600	; 0x80000030
    da80:	81c20264 	bichi	r0, r2, r4, ror #4
    da84:	026442c8 	rsbeq	r4, r4, #200, 4	; 0x8000000c
    da88:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    da8c:	54c0b064 	strbpl	fp, [r0], #100	; 0x64
    da90:	3f700069 	svccc	0x00700069
    da94:	01c24264 	biceq	r4, r2, r4, ror #4
    da98:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    da9c:	42c011c2 	sbcmi	r1, r0, #-2147483600	; 0x80000030
    daa0:	e1c27264 	bic	r7, r2, r4, ror #4
    daa4:	026442c0 	rsbeq	r4, r4, #192, 4
    daa8:	42c101c0 	sbcmi	r0, r1, #192, 2	; 0x30
    daac:	01c06264 	biceq	r6, r0, r4, ror #4
    dab0:	226442c3 	rsbcs	r4, r4, #805306380	; 0x3000000c
    dab4:	42c101c1 	sbcmi	r0, r1, #1073741872	; 0x40000030
    dab8:	01c36264 	biceq	r6, r3, r4, ror #4
    dabc:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    dac0:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    dac4:	85825364 	strhi	r5, [r2, #868]	; 0x364
    dac8:	61700064 	cmnvs	r0, r4, rrx
    dacc:	127100b0 	rsbsne	r0, r1, #176	; 0xb0
    dad0:	7a1c2314 	bvc	716728 <__ccfg+0x6f6780>
    dad4:	1091334d 	addsne	r3, r1, sp, asr #6
    dad8:	327000b1 	rsbscc	r0, r0, #177	; 0xb1
    dadc:	72b11091 	adcsvc	r1, r1, #145	; 0x91
    dae0:	61700069 	cmnvs	r0, r9, rrx
    dae4:	137100b0 	cmnne	r1, #176	; 0xb0
    dae8:	861c3218 			; <UNDEFINED> instruction: 0x861c3218
    daec:	10913249 	addsne	r3, r1, r9, asr #4
    daf0:	337000b1 	cmncc	r0, #177	; 0xb1
    daf4:	7eb11091 	mrcvc	0, 5, r1, cr1, cr1, {4}
    daf8:	c2700069 	rsbsgt	r0, r0, #105	; 0x69
    dafc:	156447c0 	strbne	r4, [r4, #-1984]!	; 0xfffff840
    db00:	12c0c210 	sbcne	ip, r0, #16, 4
    db04:	41644716 	cmnmi	r4, r6, lsl r7
    db08:	c0141531 	andsgt	r1, r4, r1, lsr r5
    db0c:	053180c0 	ldreq	r8, [r1, #-192]!	; 0xffffff40
    db10:	a0105414 	andsge	r5, r0, r4, lsl r4
    db14:	00040478 	andeq	r0, r4, r8, ror r4
    db18:	86c0e670 			; <UNDEFINED> instruction: 0x86c0e670
    db1c:	16cc0131 			; <UNDEFINED> instruction: 0x16cc0131
    db20:	61106714 	tstvs	r0, r4, lsl r7
    db24:	01c3f082 	biceq	pc, r3, r2, lsl #1
    db28:	00141704 	andseq	r1, r4, r4, lsl #14
    db2c:	05730670 	ldrbeq	r0, [r3, #-1648]!	; 0xfffff990
    db30:	0e720b72 	vmoveq.s8	r0, d2[7]
    db34:	00b05072 	adcseq	r5, r0, r2, ror r0
    db38:	60808171 	addvs	r8, r0, r1, ror r1
    db3c:	92a050b0 	adcls	r5, r0, #176	; 0xb0
    db40:	c3224180 			; <UNDEFINED> instruction: 0xc3224180
    db44:	f1808045 			; <UNDEFINED> instruction: 0xf1808045
    db48:	300410c1 	andcc	r1, r4, r1, asr #1
    db4c:	01110116 	tsteq	r1, r6, lsl r1
    db50:	d66c0114 			; <UNDEFINED> instruction: 0xd66c0114
    db54:	d861d761 	stmdale	r1!, {r0, r5, r6, r8, r9, sl, ip, lr, pc}^
    db58:	da61d961 	ble	18840e4 <__ccfg+0x186413c>
    db5c:	dc61db61 			; <UNDEFINED> instruction: 0xdc61db61
    db60:	e061de61 	rsb	sp, r1, r1, ror #28
    db64:	e461e261 	strbt	lr, [r1], #-609	; 0xfffffd9f
    db68:	39633661 	stmdbcc	r3!, {r0, r5, r6, r9, sl, ip, sp}^
    db6c:	f2809163 	vmla.f<illegal width 8>	d9, d0, d3[4]
    db70:	210421c0 	smlabtcs	r4, r0, r1, r2
    db74:	42808231 	addmi	r8, r0, #268435459	; 0x10000003
    db78:	3214122a 	andscc	r1, r4, #-1610612734	; 0xa0000002
    db7c:	21110116 	tstcs	r1, r6, lsl r1
    db80:	ee6c0114 	mcr	1, 3, r0, cr12, cr4, {0}
    db84:	f4620b61 			; <UNDEFINED> instruction: 0xf4620b61
    db88:	ee633961 	vnmul.f16	s7, s6, s3
    db8c:	f4620b61 			; <UNDEFINED> instruction: 0xf4620b61
    db90:	e6633961 	strbt	r3, [r3], -r1, ror #18
    db94:	e661e661 	strbt	lr, [r1], -r1, ror #12
    db98:	e661e661 	strbt	lr, [r1], -r1, ror #12
    db9c:	9461e661 	strbtls	lr, [r1], #-1633	; 0xfffff99f
    dba0:	f961e664 			; <UNDEFINED> instruction: 0xf961e664
    dba4:	2a61e664 	bcs	188753c <__ccfg+0x1867594>
    dba8:	5661e665 	strbtpl	lr, [r1], -r5, ror #12
    dbac:	4661e665 	strbtmi	lr, [r1], -r5, ror #12
    dbb0:	1061e667 	rsbne	lr, r1, r7, ror #12
    dbb4:	0e90b012 	mrceq	0, 4, fp, cr0, cr2, {0}
    dbb8:	05730672 	ldrbeq	r0, [r3, #-1650]!	; 0xfffff98e
    dbbc:	30121072 	andscc	r1, r2, r2, ror r0
    dbc0:	f061a790 			; <UNDEFINED> instruction: 0xf061a790
    dbc4:	d4673ccf 	strbtle	r3, [r7], #-3279	; 0xfffff331
    dbc8:	c0c003c1 	sbcgt	r0, r0, r1, asr #7
    dbcc:	406454c3 	rsbmi	r5, r4, r3, asr #9
    dbd0:	50915078 	addspl	r5, r1, r8, ror r0
    dbd4:	60921078 	addsvs	r1, r2, r8, ror r0
    dbd8:	70922078 	addsvc	r2, r2, r8, ror r0
    dbdc:	80923078 	addshi	r3, r2, r8, ror r0
    dbe0:	90924078 	addsls	r4, r2, r8, ror r0
    dbe4:	30926078 	addscc	r6, r2, r8, ror r0
    dbe8:	10919078 	addsne	r9, r1, r8, ror r0
    dbec:	f0394082 			; <UNDEFINED> instruction: 0xf0394082
    dbf0:	10100106 	andsne	r0, r0, r6, lsl #2
    dbf4:	00141031 	andseq	r1, r4, r1, lsr r0
    dbf8:	e6674292 			; <UNDEFINED> instruction: 0xe6674292
    dbfc:	e2a0bc61 	adc	fp, r0, #24832	; 0x6100
    dc00:	f0a054a0 			; <UNDEFINED> instruction: 0xf0a054a0
    dc04:	15225080 	strne	r5, [r2, #-128]!	; 0xffffff80
    dc08:	00804046 	addeq	r4, r0, r6, asr #32
    dc0c:	0d472b22 	vstreq	d18, [r7, #-136]	; 0xffffff78
    dc10:	2da04062 	stccs	0, cr4, [r0, #392]!	; 0x188
    dc14:	8d318d82 	ldchi	13, cr8, [r1, #-520]!	; 0xfffffdf8
    dc18:	f1821039 			; <UNDEFINED> instruction: 0xf1821039
    dc1c:	090410c0 	stmdbeq	r4, {r6, r7, ip}
    dc20:	4a821a10 	bmi	fe094468 <_estack+0xde08f468>
    dc24:	10041a39 	andne	r1, r4, r9, lsr sl
    dc28:	10398082 	eorsne	r8, r9, r2, lsl #1
    dc2c:	ab100e04 	blge	411444 <__ccfg+0x3f149c>
    dc30:	c210bc10 	andsgt	fp, r0, #16, 24	; 0x1000
    dc34:	29646310 	stmdbcs	r4!, {r4, r8, r9, sp, lr}^
    dc38:	3ccfe072 	stclcc	0, cr14, [pc], {114}	; 0x72
    dc3c:	03b01367 	movseq	r1, #-1677721599	; 0x9c000001
    dc40:	5366c8b0 	cmnpl	r6, #176, 16	; 0xb00000
    dc44:	54b050b0 	ldrtpl	r5, [r0], #176	; 0xb0
    dc48:	13b064b0 	movsne	r6, #176, 8	; 0xb0000000
    dc4c:	1066a5b0 	strhtne	sl, [r6], #-80	; 0xffffffb0
    dc50:	3822e082 	stmdacc	r2!, {r1, r7, sp, lr, pc}
    dc54:	0066ae46 	rsbeq	sl, r6, r6, asr #28
    dc58:	01804171 	orreq	r4, r0, r1, ror r1
    dc5c:	f0472b22 			; <UNDEFINED> instruction: 0xf0472b22
    dc60:	4b221080 	blmi	891e68 <__ccfg+0x871ec0>
    dc64:	1822f046 	stmdane	r2!, {r1, r2, r6, ip, sp, lr, pc}
    dc68:	31b06447 	asrscc	r6, r7, #8
    dc6c:	63423822 	movtvs	r3, #10274	; 0x2822
    dc70:	1066ceb0 	strhtne	ip, [r6], #-224	; 0xffffff20
    dc74:	3822e082 	stmdacc	r2!, {r1, r7, sp, lr, pc}
    dc78:	38667046 	stmdacc	r6!, {r1, r2, r6, ip, sp, lr}^
    dc7c:	6fb06462 	svcvs	0x00b06462
    dc80:	8f318f81 	svchi	0x00318f81
    dc84:	ffdfd03d 			; <UNDEFINED> instruction: 0xffdfd03d
    dc88:	00673c92 	mlseq	r7, r2, ip, r3
    dc8c:	01804171 	orreq	r4, r0, r1, ror r1
    dc90:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    dc94:	5080f0b0 	strhpl	pc, [r0], r0	; <UNPREDICTABLE>
    dc98:	63426522 	movtvs	r6, #9506	; 0x2522
    dc9c:	c18211b0 			; <UNDEFINED> instruction: 0xc18211b0
    dca0:	ce466022 	cdpgt	0, 4, cr6, cr6, cr2, {1}
    dca4:	11670566 	cmnne	r7, r6, ror #10
    dca8:	5222d182 	eorpl	sp, r2, #-2147483616	; 0x80000020
    dcac:	52667046 	rsbpl	r7, r6, #70	; 0x46
    dcb0:	72816162 	addvc	r6, r1, #-2147483624	; 0x80000018
    dcb4:	81318181 	teqhi	r1, r1, lsl #3
    dcb8:	8231823d 	eorshi	r8, r1, #-805306365	; 0xd0000003
    dcbc:	f1efc03d 			; <UNDEFINED> instruction: 0xf1efc03d
    dcc0:	3c930292 	lfmcc	f0, 4, [r3], {146}	; 0x92
    dcc4:	b0620b67 	rsblt	r0, r2, r7, ror #22
    dcc8:	d391c081 	orrsle	ip, r1, #129	; 0x81
    dccc:	90829781 	addls	r9, r2, r1, lsl #15
    dcd0:	7f18d3a2 	svcvc	0x0018d3a2
    dcd4:	130bf34e 	movwne	pc, #45902	; 0xb34e	; <UNPREDICTABLE>
    dcd8:	a41ce316 	ldrge	lr, [ip], #-790	; 0xfffffcea
    dcdc:	e391c34a 	orrs	ip, r1, #671088641	; 0x28000001
    dce0:	90143b81 	andsls	r3, r4, r1, lsl #23
    dce4:	8b1cba62 	blhi	73c674 <__ccfg+0x71c6cc>
    dce8:	8b1e2346 	blhi	796a08 <__ccfg+0x776a60>
    dcec:	8b1ce34a 	blhi	746a1c <__ccfg+0x726a74>
    dcf0:	07b2904e 	ldreq	r9, [r2, lr, asr #32]!
    dcf4:	90428b22 	subls	r8, r2, r2, lsr #22
    dcf8:	961a1ba2 	ldrls	r1, [sl], -r2, lsr #23
    dcfc:	a41ce362 	ldrge	lr, [ip], #-866	; 0xfffffc9e
    dd00:	e391c34a 	orrs	ip, r1, #671088641	; 0x28000001
    dd04:	ab183b81 	blge	61cb10 <__ccfg+0x5fcb68>
    dd08:	9b4ea01c 	blls	13b5d80 <__ccfg+0x1395dd8>
    dd0c:	bc4aa21c 	sfmlt	f2, 3, [sl], {28}
    dd10:	b242a41c 	sublt	sl, r2, #28, 8	; 0x1c000000
    dd14:	d0821010 	addle	r1, r2, r0, lsl r0
    dd18:	f0429d22 			; <UNDEFINED> instruction: 0xf0429d22
    dd1c:	a4221080 	strtge	r1, [r2], #-128	; 0xffffff80
    dd20:	a5646346 	strbge	r6, [r4, #-838]!	; 0xfffffcba
    dd24:	ab62a466 	blge	18b6ec4 <__ccfg+0x1896f1c>
    dd28:	9b629410 	blls	18b2d70 <__ccfg+0x1892dc8>
    dd2c:	00629410 	rsbeq	r9, r2, r0, lsl r4
    dd30:	f1823070 			; <UNDEFINED> instruction: 0xf1823070
    dd34:	630410c0 	movwvs	r1, #16576	; 0x40c0
    dd38:	a87100b0 	ldmdage	r1!, {r4, r5, r7}^
    dd3c:	e010bc6a 	ands	fp, r0, sl, ror #24
    dd40:	b27000b0 	rsbslt	r0, r0, #176	; 0xb0
    dd44:	d291c281 	addsle	ip, r1, #268435464	; 0x10000008
    dd48:	12820181 	addne	r0, r2, #1073741856	; 0x40000020
    dd4c:	12815118 	addne	r5, r1, #24, 2
    dd50:	81824118 	orrhi	r4, r2, r8, lsl r1
    dd54:	123d8131 	eorsne	r8, sp, #1073741836	; 0x4000000c
    dd58:	e24abf1c 	sub	fp, sl, #28, 30	; 0x70
    dd5c:	b0b032b0 	ldrhtlt	r3, [r0], r0
    dd60:	3c92f2df 	lfmcc	f7, 1, [r2], {223}	; 0xdf
    dd64:	21c7f167 	biccs	pc, r7, r7, ror #2
    dd68:	124ec314 	subne	ip, lr, #20, 6	; 0x50000000
    dd6c:	729162c8 	addsvc	r6, r1, #200, 4	; 0x8000000c
    dd70:	e1b03191 	lsls	r3, r1	; <illegal shifter operand>
    dd74:	087000b0 	ldmdaeq	r0!, {r4, r5, r7}^
    dd78:	00c006c0 	sbceq	r0, r0, r0, asr #13
    dd7c:	709160c8 	addsvc	r6, r1, r8, asr #1
    dd80:	01700091 			; <UNDEFINED> instruction: 0x01700091
    dd84:	c081b082 	addgt	fp, r1, r2, lsl #1
    dd88:	1081d091 	umullne	sp, r1, r1, r0
    dd8c:	10815118 	addne	r5, r1, r8, lsl r1
    dd90:	e1140618 	tst	r4, r8, lsl r6
    dd94:	82824280 	addhi	r4, r2, #128, 4
    dd98:	203d8231 	eorscs	r8, sp, r1, lsr r2
    dd9c:	e24ae41c 	sub	lr, sl, #28, 8	; 0x1c000000
    dda0:	e82221b0 	stmda	r2!, {r4, r5, r7, r8, sp}
    dda4:	05b03246 	ldreq	r3, [r0, #582]!	; 0x246
    dda8:	f5dfa010 			; <UNDEFINED> instruction: 0xf5dfa010
    ddac:	21673c92 			; <UNDEFINED> instruction: 0x21673c92
    ddb0:	e242e822 	sub	lr, r2, #2228224	; 0x220000
    ddb4:	31b032a0 	lsrscc	r3, r0, #5
    ddb8:	f0394182 			; <UNDEFINED> instruction: 0xf0394182
    ddbc:	010401c0 	smlabteq	r4, r0, r1, r0
    ddc0:	1842f61e 	stmdane	r2, {r1, r2, r3, r4, r9, sl, ip, sp, lr, pc}^
    ddc4:	10c01016 	sbcne	r1, r0, r6, lsl r0
    ddc8:	041c0830 	ldreq	r0, [ip], #-2096	; 0xfffff7d0
    ddcc:	10106047 	andsne	r6, r0, r7, asr #32
    ddd0:	f110063c 			; <UNDEFINED> instruction: 0xf110063c
    ddd4:	fa1461c7 	blx	5264f8 <__ccfg+0x506550>
    ddd8:	66c8164e 	strbvs	r1, [r8], lr, asr #12
    dddc:	81817191 			; <UNDEFINED> instruction: 0x81817191
    dde0:	163d8131 			; <UNDEFINED> instruction: 0x163d8131
    dde4:	764b011c 			; <UNDEFINED> instruction: 0x764b011c
    dde8:	06b03191 	ssateq	r3, #17, r1, lsl #3
    ddec:	00c008c0 	sbceq	r0, r0, r0, asr #17
    ddf0:	81816170 	orrhi	r6, r1, r0, ror r1
    ddf4:	403d8131 	eorsmi	r8, sp, r1, lsr r1
    ddf8:	01398082 	teqeq	r9, r2, lsl #1
    ddfc:	171cf118 	sdivne	ip, r8, r1
    de00:	b014014b 	andslt	r0, r4, fp, asr #2
    de04:	1722c080 	strne	ip, [r2, -r0, lsl #1]!
    de08:	33b0bc47 	movscc	fp, #18176	; 0x4700
    de0c:	f1ef90b0 			; <UNDEFINED> instruction: 0xf1ef90b0
    de10:	3c930f92 	ldccc	15, cr0, [r3], {146}	; 0x92
    de14:	03700067 	cmneq	r0, #103	; 0x67
    de18:	64b063a0 	ldrtvs	r6, [r0], #928	; 0x3a0
    de1c:	56b0efb0 			; <UNDEFINED> instruction: 0x56b0efb0
    de20:	40710065 	rsbsmi	r0, r1, r5, rrx
    de24:	2b220080 	blcs	88e02c <__ccfg+0x86e084>
    de28:	2ab06447 	bcs	fec26f4c <_estack+0xdec21f4c>
    de2c:	00a0ef65 	adceq	lr, r0, r5, ror #30
    de30:	00804071 	addeq	r4, r0, r1, ror r0
    de34:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    de38:	38b003b0 	ldmcc	r0!, {r4, r5, r7, r8, r9}
    de3c:	62820162 	addvs	r0, r2, #-2147483624	; 0x80000018
    de40:	82318281 	eorshi	r8, r1, #268435464	; 0x10000008
    de44:	f1ef803d 			; <UNDEFINED> instruction: 0xf1ef803d
    de48:	3c930292 	lfmcc	f0, 4, [r3], {146}	; 0x92
    de4c:	56a00367 	strtpl	r0, [r0], r7, ror #6
    de50:	a261e665 	rsbge	lr, r1, #105906176	; 0x6500000
    de54:	e6646380 	strbt	r6, [r4], -r0, lsl #7
    de58:	00b05061 	adcseq	r5, r0, r1, rrx
    de5c:	e061e671 	rsb	lr, r1, r1, ror r6
    de60:	0082d092 	umulleq	sp, r2, r2, r0
    de64:	c0473d22 	subgt	r3, r7, r2, lsr #26
    de68:	a07000b2 	ldrhtge	r0, [r0], #-2
    de6c:	5922f080 	stmdbpl	r2!, {r7, ip, sp, lr, pc}
    de70:	02b03043 	adcseq	r3, r0, #67	; 0x43
    de74:	013162c1 	teqeq	r1, r1, asr #5
    de78:	0080a0c0 	addeq	sl, r0, r0, asr #1
    de7c:	f043521e 			; <UNDEFINED> instruction: 0xf043521e
    de80:	a0435322 	subge	r5, r3, r2, lsr #6
    de84:	603160f5 	ldrshtvs	r6, [r1], -r5
    de88:	20635339 	rsbcs	r5, r3, r9, lsr r3
    de8c:	131a1010 	tstne	sl, #16
    de90:	116e236f 	cmnne	lr, pc, ror #6
    de94:	54161216 	ldrpl	r1, [r6], #-534	; 0xfffffdea
    de98:	0370006b 	cmneq	r0, #107	; 0x6b
    de9c:	000028f0 	strdeq	r2, [r0], -r0
    dea0:	5812270b 	ldmdapl	r2, {r0, r1, r3, r8, r9, sl, sp}
    dea4:	04000000 	streq	r0, [r0], #-0
    dea8:	00001c10 	andeq	r1, r0, r0, lsl ip
    deac:	001c1024 	andseq	r1, ip, r4, lsr #32
    deb0:	1db70300 	ldcne	3, cr0, [r7]
    deb4:	2b0b0000 	blcs	2cdebc <__ccfg+0x2adf14>
    deb8:	00004512 	andeq	r4, r0, r2, lsl r5
    debc:	1c262400 	cfstrsne	mvf2, [r6], #-0
    dec0:	42030000 	andmi	r0, r3, #0
    dec4:	0b000029 	bleq	df70 <__exidx_end+0x8494>
    dec8:	006b122c 	rsbeq	r1, fp, ip, lsr #4
    decc:	37040000 	strcc	r0, [r4, -r0]
    ded0:	0300001c 	movweq	r0, #28
    ded4:	00000649 	andeq	r0, r0, r9, asr #12
    ded8:	6b122d0b 	blvs	49930c <__ccfg+0x479364>
    dedc:	0b000000 	bleq	dee4 <__exidx_end+0x8408>
    dee0:	09320b08 	ldmdbeq	r2!, {r3, r8, r9, fp}
    dee4:	00001ce2 	andeq	r1, r0, r2, ror #25
    dee8:	00002b20 	andeq	r2, r0, r0, lsr #22
    deec:	07340b00 	ldreq	r0, [r4, -r0, lsl #22]!
    def0:	00001c26 	andeq	r1, r0, r6, lsr #24
    def4:	00070101 	andeq	r0, r7, r1, lsl #2
    def8:	00064f20 	andeq	r4, r6, r0, lsr #30
    defc:	03350b00 	teqeq	r5, #0, 22
    df00:	00001c26 	andeq	r1, r0, r6, lsr #24
    df04:	00060101 	andeq	r0, r6, r1, lsl #2
    df08:	0002de20 	andeq	sp, r2, r0, lsr #28
    df0c:	03360b00 	teqeq	r6, #0, 22
    df10:	00001c26 	andeq	r1, r0, r6, lsr #24
    df14:	00050101 	andeq	r0, r5, r1, lsl #2
    df18:	0006ba20 	andeq	fp, r6, r0, lsr #20
    df1c:	03370b00 	teqeq	r7, #0, 22
    df20:	00001c26 	andeq	r1, r0, r6, lsr #24
    df24:	00040101 	andeq	r0, r4, r1, lsl #2
    df28:	000aa220 	andeq	sl, sl, r0, lsr #4
    df2c:	03380b00 	teqeq	r8, #0, 22
    df30:	00001c26 	andeq	r1, r0, r6, lsr #24
    df34:	00000401 	andeq	r0, r0, r1, lsl #8
    df38:	00065e0c 	andeq	r5, r6, ip, lsl #28
    df3c:	073a0b00 	ldreq	r0, [sl, -r0, lsl #22]!
    df40:	00001c26 	andeq	r1, r0, r6, lsr #24
    df44:	08fe0c01 	ldmeq	lr!, {r0, sl, fp}^
    df48:	3c0b0000 	stccc	0, cr0, [fp], {-0}
    df4c:	001c2603 	andseq	r2, ip, r3, lsl #12
    df50:	2f0c0200 	svccs	0x000c0200
    df54:	0b00000f 	bleq	df98 <__exidx_end+0x84bc>
    df58:	1c26033d 	stcne	3, cr0, [r6], #-244	; 0xffffff0c
    df5c:	0c030000 	stceq	0, cr0, [r3], {-0}
    df60:	00000916 	andeq	r0, r0, r6, lsl r9
    df64:	37083f0b 	strcc	r3, [r8, -fp, lsl #30]
    df68:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    df6c:	03140300 	tsteq	r4, #0, 6
    df70:	410b0000 	mrsmi	r0, (UNDEF: 11)
    df74:	001c5403 	andseq	r5, ip, r3, lsl #8
    df78:	1ce22400 	cfstrdne	mvd2, [r2]
    df7c:	c1250000 			; <UNDEFINED> instruction: 0xc1250000
    df80:	0b000006 	bleq	dfa0 <__exidx_end+0x84c4>
    df84:	1cee1a43 	vstmiane	lr!, {s3-s69}
    df88:	01010000 	mrseq	r0, (UNDEF: 1)
    df8c:	00019725 	andeq	r9, r1, r5, lsr #14
    df90:	0e450b00 	vmlaeq.f64	d16, d5, d0
    df94:	000005de 	ldrdeq	r0, [r0], -lr
    df98:	1d250101 	stfnes	f0, [r5, #-4]!
    df9c:	0b000003 	bleq	dfb0 <__exidx_end+0x84d4>
    dfa0:	05de1e45 	ldrbeq	r1, [lr, #3653]	; 0xe45
    dfa4:	01010000 	mrseq	r0, (UNDEF: 1)
    dfa8:	8f0c080b 	svchi	0x000c080b
    dfac:	001d4e09 	andseq	r4, sp, r9, lsl #28
    dfb0:	0ccd0c00 	stcleq	12, cr0, [sp], {0}
    dfb4:	900c0000 	andls	r0, ip, r0
    dfb8:	00006b0b 	andeq	r6, r0, fp, lsl #22
    dfbc:	6a0c0000 	bvs	30dfc4 <__ccfg+0x2ee01c>
    dfc0:	0c000010 	stceq	0, cr0, [r0], {16}
    dfc4:	1c100891 	ldcne	8, cr0, [r0], {145}	; 0x91
    dfc8:	0c040000 	stceq	0, cr0, [r4], {-0}
    dfcc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    dfd0:	3210920c 	andscc	r9, r0, #12, 4	; 0xc0000000
    dfd4:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    dfd8:	0cc10300 	stcleq	3, cr0, [r1], {0}
    dfdc:	930c0000 	movwls	r0, #49152	; 0xc000
    dfe0:	001d1d03 	andseq	r1, sp, r3, lsl #26
    dfe4:	1d4e0900 	vstrne.16	s1, [lr, #-0]	; <UNPREDICTABLE>
    dfe8:	1d650000 	stclne	0, cr0, [r5, #-0]
    dfec:	00260000 	eoreq	r0, r6, r0
    dff0:	00094025 	andeq	r4, r9, r5, lsr #32
    dff4:	0f990c00 	svceq	0x00990c00
    dff8:	00001d5a 	andeq	r1, r0, sl, asr sp
    dffc:	010b0101 	tsteq	fp, r1, lsl #2
    e000:	9d09910d 	stflsd	f1, [r9, #-52]	; 0xffffffcc
    e004:	2000001d 	andcs	r0, r0, sp, lsl r0
    e008:	0000091d 	andeq	r0, r0, sp, lsl r9
    e00c:	2607930d 	strcs	r9, [r7], -sp, lsl #6
    e010:	0100001c 	tsteq	r0, ip, lsl r0
    e014:	20000107 	andcs	r0, r0, r7, lsl #2
    e018:	000005cf 	andeq	r0, r0, pc, asr #11
    e01c:	2603940d 	strcs	r9, [r3], -sp, lsl #8
    e020:	0100001c 	tsteq	r0, ip, lsl r0
    e024:	00000001 	andeq	r0, r0, r1
    e028:	000aae03 	andeq	sl, sl, r3, lsl #28
    e02c:	03960d00 	orrseq	r0, r6, #0, 26
    e030:	00001d73 	andeq	r1, r0, r3, ror sp
    e034:	001d9d04 	andseq	r9, sp, r4, lsl #26
    e038:	1da90900 			; <UNDEFINED> instruction: 0x1da90900
    e03c:	1db90000 	ldcne	0, cr0, [r9]
    e040:	00260000 	eoreq	r0, r6, r0
    e044:	001dae04 	andseq	sl, sp, r4, lsl #28
    e048:	03ac2500 			; <UNDEFINED> instruction: 0x03ac2500
    e04c:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    e050:	001db917 	andseq	fp, sp, r7, lsl r9
    e054:	09010100 	stmdbeq	r1, {r8}
    e058:	00001c1c 	andeq	r1, r0, ip, lsl ip
    e05c:	00001dd7 	ldrdeq	r1, [r0], -r7
    e060:	cc040026 	stcgt	0, cr0, [r4], {38}	; 0x26
    e064:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    e068:	00000611 	andeq	r0, r0, r1, lsl r6
    e06c:	d713060e 	ldrle	r0, [r3, -lr, lsl #12]
    e070:	0100001d 	tsteq	r0, sp, lsl r0
    e074:	08e02501 	stmiaeq	r0!, {r0, r8, sl, sp}^
    e078:	c30c0000 	movwgt	r0, #49152	; 0xc000
    e07c:	001c370e 	andseq	r3, ip, lr, lsl #14
    e080:	06010100 	streq	r0, [r1], -r0, lsl #2
    e084:	00000c75 	andeq	r0, r0, r5, ror ip
    e088:	10016e0f 	andne	r6, r1, pc, lsl #28
    e08c:	00001e05 	andeq	r1, r0, r5, lsl #28
    e090:	1e0b0410 	cfmvdlrne	mvd11, r0
    e094:	011e0000 	tsteq	lr, r0
    e098:	00001e17 	andeq	r1, r0, r7, lsl lr
    e09c:	001c1015 	andseq	r1, ip, r5, lsl r0
    e0a0:	eb090000 	bl	24e0a8 <__ccfg+0x22e100>
    e0a4:	22000005 	andcs	r0, r0, #5
    e0a8:	2600001e 			; <UNDEFINED> instruction: 0x2600001e
    e0ac:	1e170400 	cfmulsne	mvf0, mvf7, mvf0
    e0b0:	e91f0000 	ldmdb	pc, {}	; <UNPREDICTABLE>
    e0b4:	0f000009 	svceq	0x00000009
    e0b8:	2216017f 	andscs	r0, r6, #-1073741793	; 0xc000001f
    e0bc:	0100001e 	tsteq	r0, lr, lsl r0
    e0c0:	03981f01 	orrseq	r1, r8, #1, 30
    e0c4:	820f0000 	andhi	r0, pc, #0
    e0c8:	1c431401 	cfstrdne	mvd1, [r3], {1}
    e0cc:	01010000 	mrseq	r0, (UNDEF: 1)
    e0d0:	0003701f 	andeq	r7, r3, pc, lsl r0
    e0d4:	02d80f00 	sbcseq	r0, r8, #0, 30
    e0d8:	001c370e 	andseq	r3, ip, lr, lsl #14
    e0dc:	1a010100 	bne	4e4e4 <__ccfg+0x2e53c>
    e0e0:	03030f08 	movweq	r0, #16136	; 0x3f08
    e0e4:	001e7b09 	andseq	r7, lr, r9, lsl #22
    e0e8:	3c911700 	ldccc	7, cr1, [r1], {0}
    e0ec:	070f0000 	streq	r0, [pc, -r0]
    e0f0:	1c100703 	ldcne	7, cr0, [r0], {3}
    e0f4:	17000000 	strne	r0, [r0, -r0]
    e0f8:	00000fc2 	andeq	r0, r0, r2, asr #31
    e0fc:	0803080f 	stmdaeq	r3, {r0, r1, r2, r3, fp}
    e100:	00001c48 	andeq	r1, r0, r8, asr #24
    e104:	0c060004 	stceq	0, cr0, [r6], {4}
    e108:	0f00000a 	svceq	0x0000000a
    e10c:	54030309 	strpl	r0, [r3], #-777	; 0xfffffcf7
    e110:	1900001e 	stmdbne	r0, {r1, r2, r3, r4}
    e114:	00000020 	andeq	r0, r0, r0, lsr #32
    e118:	030b0f30 	movweq	r0, #48944	; 0xbf30
    e11c:	001eeb08 	andseq	lr, lr, r8, lsl #22
    e120:	1f191700 	svcne	0x00191700
    e124:	140f0000 	strne	r0, [pc], #-0	; e12c <__exidx_end+0x8650>
    e128:	1c100803 	ldcne	8, cr0, [r0], {3}
    e12c:	17000000 	strne	r0, [r0, -r0]
    e130:	00000bea 	andeq	r0, r0, sl, ror #23
    e134:	0803150f 	stmdaeq	r3, {r0, r1, r2, r3, r8, sl, ip}
    e138:	00001c10 	andeq	r1, r0, r0, lsl ip
    e13c:	4c7e1702 	ldclmi	7, cr1, [lr], #-8
    e140:	160f0000 	strne	r0, [pc], -r0
    e144:	1df80b03 			; <UNDEFINED> instruction: 0x1df80b03
    e148:	17040000 	strne	r0, [r4, -r0]
    e14c:	00004744 	andeq	r4, r0, r4, asr #14
    e150:	0903170f 	stmdbeq	r3, {r0, r1, r2, r3, r8, r9, sl, ip}
    e154:	00001c48 	andeq	r1, r0, r8, asr #24
    e158:	000f1708 	andeq	r1, pc, r8, lsl #14
    e15c:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    e160:	1eeb0f03 	cdpne	15, 14, cr0, cr11, cr3, {0}
    e164:	170c0000 	strne	r0, [ip, -r0]
    e168:	00000960 	andeq	r0, r0, r0, ror #18
    e16c:	1503190f 	strne	r1, [r3, #-2319]	; 0xfffff6f1
    e170:	00001efb 	strdeq	r1, [r0], -fp
    e174:	7b09002c 	blvc	24e22c <__ccfg+0x22e284>
    e178:	fb00001e 	blx	e1fa <__exidx_end+0x871e>
    e17c:	0a00001e 	beq	e1fc <__exidx_end+0x8720>
    e180:	00000091 	muleq	r0, r1, r0
    e184:	04100003 	ldreq	r0, [r0], #-3
    e188:	00001e88 	andeq	r1, r0, r8, lsl #29
    e18c:	000bdf06 	andeq	sp, fp, r6, lsl #30
    e190:	031c0f00 	tsteq	ip, #0, 30
    e194:	001e881b 	andseq	r8, lr, fp, lsl r8
    e198:	0bbf1f00 	bleq	fefd5da0 <_estack+0xdefd0da0>
    e19c:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    e1a0:	1f1d1403 	svcne	0x001d1403
    e1a4:	01010000 	mrseq	r0, (UNDEF: 1)
    e1a8:	1f010410 	svcne	0x00010410
    e1ac:	12250000 	eorne	r0, r5, #0
    e1b0:	10000007 	andne	r0, r0, r7
    e1b4:	1c10131d 	ldcne	3, cr1, [r0], {29}
    e1b8:	01010000 	mrseq	r0, (UNDEF: 1)
    e1bc:	0002e525 	andeq	lr, r2, r5, lsr #10
    e1c0:	1a1e1000 	bne	7921c8 <__ccfg+0x772220>
    e1c4:	00001c21 	andeq	r1, r0, r1, lsr #24
    e1c8:	6c250101 	stfvss	f0, [r5], #-4
    e1cc:	1000000c 	andne	r0, r0, ip
    e1d0:	1c21241e 	cfstrsne	mvf2, [r1], #-120	; 0xffffff88
    e1d4:	01010000 	mrseq	r0, (UNDEF: 1)
    e1d8:	000c8a25 	andeq	r8, ip, r5, lsr #20
    e1dc:	14221000 	strtne	r1, [r2], #-0
    e1e0:	00001f1d 	andeq	r1, r0, sp, lsl pc
    e1e4:	30250101 	eorcc	r0, r5, r1, lsl #2
    e1e8:	11000020 	tstne	r0, r0, lsr #32
    e1ec:	0d5e2739 	ldcleq	7, cr2, [lr, #-228]	; 0xffffff1c
    e1f0:	01010000 	mrseq	r0, (UNDEF: 1)
    e1f4:	00231e25 	eoreq	r1, r3, r5, lsr #28
    e1f8:	153a1100 	ldrne	r1, [sl, #-256]!	; 0xffffff00
    e1fc:	000009f1 	strdeq	r0, [r0], -r1
    e200:	3a250101 	bcc	94e60c <__ccfg+0x92e664>
    e204:	11000027 	tstne	r0, r7, lsr #32
    e208:	0bd81a3b 	bleq	ff614afc <_estack+0xdf60fafc>
    e20c:	01010000 	mrseq	r0, (UNDEF: 1)
    e210:	0025de25 	eoreq	sp, r5, r5, lsr #28
    e214:	1a3c1100 	bne	f1261c <__ccfg+0xef2674>
    e218:	00000c74 	andeq	r0, r0, r4, ror ip
    e21c:	6b090101 	blvs	24e628 <__ccfg+0x22e680>
    e220:	a3000000 	movwge	r0, #0
    e224:	0a00001f 	beq	e2a8 <__exidx_end+0x87cc>
    e228:	00000091 	muleq	r0, r1, r0
    e22c:	9c270014 	stcls	0, cr0, [r7], #-80	; 0xffffffb0
    e230:	12000029 	andne	r0, r0, #41	; 0x29
    e234:	1f93113d 	svcne	0x0093113d
    e238:	03050000 	movweq	r0, #20480	; 0x5000
    e23c:	200000b8 	strhcs	r0, [r0], -r8
    e240:	001f5b28 	andseq	r5, pc, r8, lsr #22
    e244:	20721200 	rsbscs	r1, r2, r0, lsl #4
    e248:	00540305 	subseq	r0, r4, r5, lsl #6
    e24c:	69282000 	stmdbvs	r8!, {sp}
    e250:	1200001f 	andne	r0, r0, #31
    e254:	03050e96 	movweq	r0, #24214	; 0x5e96
    e258:	2000003c 	andcs	r0, r0, ip, lsr r0
    e25c:	001f7728 	andseq	r7, pc, r8, lsr #14
    e260:	13ad1200 			; <UNDEFINED> instruction: 0x13ad1200
    e264:	00a00305 	adceq	r0, r0, r5, lsl #6
    e268:	85282000 	strhi	r2, [r8, #-0]!
    e26c:	1200001f 	andne	r0, r0, #31
    e270:	030513c2 	movweq	r1, #21442	; 0x53c2
    e274:	2000007c 	andcs	r0, r0, ip, ror r0
    e278:	00018a00 	andeq	r8, r1, r0, lsl #20
    e27c:	ec000400 	cfstrs	mvf0, [r0], {-0}
    e280:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    e284:	002a3401 	eoreq	r3, sl, r1, lsl #8
    e288:	2a190100 	bcs	64e690 <__ccfg+0x62e6e8>
    e28c:	2afb0000 	bcs	ffece294 <_estack+0xdfec9294>
    e290:	11080000 	mrsne	r0, (UNDEF: 8)
    e294:	00000000 	andeq	r0, r0, r0
    e298:	73440000 	movtvc	r0, #16384	; 0x4000
    e29c:	01020000 	mrseq	r0, (UNDEF: 2)
    e2a0:	000c6006 	andeq	r6, ip, r6
    e2a4:	2a0f0300 	bcs	3ceeac <__ccfg+0x3aef04>
    e2a8:	1d020000 	stcne	0, cr0, [r2, #-0]
    e2ac:	00000037 	andeq	r0, r0, r7, lsr r0
    e2b0:	5e080102 	adfple	f0, f0, f2
    e2b4:	0200000c 	andeq	r0, r0, #12
    e2b8:	0a6e0502 	beq	1b8f6c8 <__ccfg+0x1b6f720>
    e2bc:	02020000 	andeq	r0, r2, #0
    e2c0:	000d5b07 	andeq	r5, sp, r7, lsl #22
    e2c4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e2c8:	00000800 	andeq	r0, r0, r0, lsl #16
    e2cc:	0029a703 	eoreq	sl, r9, r3, lsl #14
    e2d0:	5e410200 	cdppl	2, 4, cr0, cr1, cr0, {0}
    e2d4:	02000000 	andeq	r0, r0, #0
    e2d8:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    e2dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e2e0:	0007fb05 	andeq	pc, r7, r5, lsl #22
    e2e4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    e2e8:	00000423 	andeq	r0, r0, r3, lsr #8
    e2ec:	69050404 	stmdbvs	r5, {r2, sl}
    e2f0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    e2f4:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    e2f8:	11030000 	mrsne	r0, (UNDEF: 3)
    e2fc:	0300002a 	movweq	r0, #42	; 0x2a
    e300:	00002c14 	andeq	r2, r0, r4, lsl ip
    e304:	29a90300 	stmibcs	r9!, {r8, r9}
    e308:	20030000 	andcs	r0, r3, r0
    e30c:	00000053 	andeq	r0, r0, r3, asr r0
    e310:	0029d303 	eoreq	sp, r9, r3, lsl #6
    e314:	a2330400 	eorsge	r0, r3, #0, 8
    e318:	05000000 	streq	r0, [r0, #-0]
    e31c:	0000a804 	andeq	sl, r0, r4, lsl #16
    e320:	e9030600 	stmdb	r3, {r9, sl}
    e324:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    e328:	0000b434 	andeq	fp, r0, r4, lsr r4
    e32c:	ba040500 	blt	10f734 <__ccfg+0xef78c>
    e330:	07000000 	streq	r0, [r0, -r0]
    e334:	000000c5 	andeq	r0, r0, r5, asr #1
    e338:	00008108 	andeq	r8, r0, r8, lsl #2
    e33c:	02090000 	andeq	r0, r9, #0
    e340:	0500002a 	streq	r0, [r0, #-42]	; 0xffffffd6
    e344:	00389499 	mlaseq	r8, r9, r4, r9
    e348:	00002800 	andeq	r2, r0, r0, lsl #16
    e34c:	0b9c0100 	bleq	fe70e754 <_estack+0xde709754>
    e350:	0a000001 	beq	e35c <__exidx_end+0x8880>
    e354:	00002ae4 	andeq	r2, r0, r4, ror #21
    e358:	00973501 	addseq	r3, r7, r1, lsl #10
    e35c:	36550000 	ldrbcc	r0, [r5], -r0
    e360:	b20b0000 	andlt	r0, fp, #0
    e364:	01000029 	tsteq	r0, r9, lsr #32
    e368:	00010b37 	andeq	r0, r1, r7, lsr fp
    e36c:	00369a00 	eorseq	r9, r6, r0, lsl #20
    e370:	389c0c00 	ldmcc	ip, {sl, fp}
    e374:	01770000 	cmneq	r7, r0
    e378:	b60d0000 	strlt	r0, [sp], -r0
    e37c:	82000038 	andhi	r0, r0, #56	; 0x38
    e380:	00000001 	andeq	r0, r0, r1
    e384:	aa020102 	bge	8e794 <__ccfg+0x6e7ec>
    e388:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    e38c:	000029be 			; <UNDEFINED> instruction: 0x000029be
    e390:	00009a05 	andeq	r9, r0, r5, lsl #20
    e394:	002c0000 	eoreq	r0, ip, r0
    e398:	9c010000 	stcls	0, cr0, [r1], {-0}
    e39c:	00000177 	andeq	r0, r0, r7, ror r1
    e3a0:	002ae40a 	eoreq	lr, sl, sl, lsl #8
    e3a4:	a9400100 	stmdbge	r0, {r8}^
    e3a8:	cf000000 	svcgt	0x00000000
    e3ac:	0a000036 	beq	e48c <__exidx_end+0x89b0>
    e3b0:	00002b5b 	andeq	r2, r0, fp, asr fp
    e3b4:	00814001 	addeq	r4, r1, r1
    e3b8:	37140000 	ldrcc	r0, [r4, -r0]
    e3bc:	b20b0000 	andlt	r0, fp, #0
    e3c0:	01000029 	tsteq	r0, r9, lsr #32
    e3c4:	00010b42 	andeq	r0, r1, r2, asr #22
    e3c8:	00373500 	eorseq	r3, r7, r0, lsl #10
    e3cc:	00000c00 	andeq	r0, r0, r0, lsl #24
    e3d0:	01770000 	cmneq	r7, r0
    e3d4:	000f0000 	andeq	r0, pc, r0
    e3d8:	6d000000 	stcvs	0, cr0, [r0, #-0]
    e3dc:	10000001 	andne	r0, r0, r1
    e3e0:	77025001 	strvc	r5, [r2, -r1]
    e3e4:	000d0000 	andeq	r0, sp, r0
    e3e8:	82000000 	andhi	r0, r0, #0
    e3ec:	00000001 	andeq	r0, r0, r1
    e3f0:	0029e411 	eoreq	lr, r9, r1, lsl r4
    e3f4:	8c6a0600 	stclhi	6, cr0, [sl], #-0
    e3f8:	11000000 	mrsne	r0, (UNDEF: 0)
    e3fc:	000029f3 	strdeq	r2, [r0], -r3
    e400:	008c8406 	addeq	r8, ip, r6, lsl #8
    e404:	d5000000 	strle	r0, [r0, #-0]
    e408:	04000000 	streq	r0, [r0], #-0
    e40c:	0031d800 	eorseq	sp, r1, r0, lsl #16
    e410:	34010400 	strcc	r0, [r1], #-1024	; 0xfffffc00
    e414:	0100002a 	tsteq	r0, sl, lsr #32
    e418:	00002ba7 	andeq	r2, r0, r7, lsr #23
    e41c:	00002afb 	strdeq	r2, [r0], -fp
    e420:	00001120 	andeq	r1, r0, r0, lsr #2
    e424:	00000000 	andeq	r0, r0, r0
    e428:	000074e4 	andeq	r7, r0, r4, ror #9
    e42c:	002b9e02 	eoreq	r9, fp, r2, lsl #28
    e430:	301b0200 	andscc	r0, fp, r0, lsl #4
    e434:	03000000 	movweq	r0, #0
    e438:	0c600601 	stcleq	6, cr0, [r0], #-4
    e43c:	01030000 	mrseq	r0, (UNDEF: 3)
    e440:	000c5e08 	andeq	r5, ip, r8, lsl #28
    e444:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    e448:	00000a6e 	andeq	r0, r0, lr, ror #20
    e44c:	5b070203 	blpl	1cec60 <__ccfg+0x1aecb8>
    e450:	0200000d 	andeq	r0, r0, #13
    e454:	00002b94 	muleq	r0, r4, fp
    e458:	00573f02 	subseq	r3, r7, r2, lsl #30
    e45c:	04030000 	streq	r0, [r3], #-0
    e460:	00080005 	andeq	r0, r8, r5
    e464:	07040300 	streq	r0, [r4, -r0, lsl #6]
    e468:	00000428 	andeq	r0, r0, r8, lsr #8
    e46c:	fb050803 	blx	150482 <__ccfg+0x1304da>
    e470:	03000007 	movweq	r0, #7
    e474:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    e478:	04040000 	streq	r0, [r4], #-0
    e47c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e480:	07040300 	streq	r0, [r4, -r0, lsl #6]
    e484:	0000042d 	andeq	r0, r0, sp, lsr #8
    e488:	002ba002 	eoreq	sl, fp, r2
    e48c:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    e490:	02000000 	andeq	r0, r0, #0
    e494:	00002b96 	muleq	r0, r6, fp
    e498:	004c1f03 	subeq	r1, ip, r3, lsl #30
    e49c:	65050000 	strvs	r0, [r5, #-0]
    e4a0:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    e4a4:	00008caa 	andeq	r8, r0, sl, lsr #25
    e4a8:	0038bc00 	eorseq	fp, r8, r0, lsl #24
    e4ac:	00003000 	andeq	r3, r0, r0
    e4b0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    e4b4:	00002bd8 	ldrdeq	r2, [r0], -r8
    e4b8:	008c3e01 	addeq	r3, ip, r1, lsl #28
    e4bc:	376a0000 	strbcc	r0, [sl, -r0]!
    e4c0:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
    e4c4:	0100002b 	tsteq	r0, fp, lsr #32
    e4c8:	00008c3f 	andeq	r8, r0, pc, lsr ip
    e4cc:	00378300 	eorseq	r8, r7, r0, lsl #6
    e4d0:	2b870700 	blcs	fe1d00d8 <_estack+0xde1cb0d8>
    e4d4:	40010000 	andmi	r0, r1, r0
    e4d8:	00000081 	andeq	r0, r0, r1, lsl #1
    e4dc:	00005101 	andeq	r5, r0, r1, lsl #2
    e4e0:	00000143 	andeq	r0, r0, r3, asr #2
    e4e4:	32470004 	subcc	r0, r7, #4
    e4e8:	01040000 	mrseq	r0, (UNDEF: 4)
    e4ec:	00002a34 	andeq	r2, r0, r4, lsr sl
    e4f0:	002c8901 	eoreq	r8, ip, r1, lsl #18
    e4f4:	002afb00 	eoreq	pc, sl, r0, lsl #22
    e4f8:	00113000 	andseq	r3, r1, r0
    e4fc:	00000000 	andeq	r0, r0, r0
    e500:	00764f00 	rsbseq	r4, r6, r0, lsl #30
    e504:	06010200 	streq	r0, [r1], -r0, lsl #4
    e508:	00000c60 	andeq	r0, r0, r0, ror #24
    e50c:	5e080102 	adfple	f0, f0, f2
    e510:	0200000c 	andeq	r0, r0, #12
    e514:	0a6e0502 	beq	1b8f924 <__ccfg+0x1b6f97c>
    e518:	02020000 	andeq	r0, r2, #0
    e51c:	000d5b07 	andeq	r5, sp, r7, lsl #22
    e520:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e524:	00000800 	andeq	r0, r0, r0, lsl #16
    e528:	0029a703 	eoreq	sl, r9, r3, lsl #14
    e52c:	53410200 	movtpl	r0, #4608	; 0x1200
    e530:	02000000 	andeq	r0, r0, #0
    e534:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    e538:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e53c:	0007fb05 	andeq	pc, r7, r5, lsl #22
    e540:	2c330300 	ldccs	3, cr0, [r3], #-0
    e544:	5b020000 	blpl	8e54c <__ccfg+0x6e5a4>
    e548:	0000006c 	andeq	r0, r0, ip, rrx
    e54c:	23070802 	movwcs	r0, #30722	; 0x7802
    e550:	04000004 	streq	r0, [r0], #-4
    e554:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e558:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e55c:	00042d07 	andeq	r2, r4, r7, lsl #26
    e560:	29a90300 	stmibcs	r9!, {r8, r9}
    e564:	20030000 	andcs	r0, r3, r0
    e568:	00000048 	andeq	r0, r0, r8, asr #32
    e56c:	002c3503 	eoreq	r3, ip, r3, lsl #10
    e570:	61260300 			; <UNDEFINED> instruction: 0x61260300
    e574:	05000000 	streq	r0, [r0, #-0]
    e578:	00002bfe 	strdeq	r2, [r0], -lr
    e57c:	81034504 	tsthi	r3, r4, lsl #10
    e580:	ec000000 	stc	0, cr0, [r0], {-0}
    e584:	20000038 	andcs	r0, r0, r8, lsr r0
    e588:	01000000 	mrseq	r0, (UNDEF: 0)
    e58c:	0000dd9c 	muleq	r0, ip, sp
    e590:	2bef0600 	blcs	ffbcfd98 <_estack+0xdfbcad98>
    e594:	40010000 	andmi	r0, r1, r0
    e598:	00000081 	andeq	r0, r0, r1, lsl #1
    e59c:	000037b8 			; <UNDEFINED> instruction: 0x000037b8
    e5a0:	002c3e06 	eoreq	r3, ip, r6, lsl #28
    e5a4:	81410100 	mrshi	r0, (UNDEF: 81)
    e5a8:	cb000000 	blgt	e5b0 <__exidx_end+0x8ad4>
    e5ac:	07000037 	smladxeq	r0, r7, r0, r0
    e5b0:	00002c21 	andeq	r2, r0, r1, lsr #24
    e5b4:	00814201 	addeq	r4, r1, r1, lsl #4
    e5b8:	52010000 	andpl	r0, r1, #0
    e5bc:	2c500500 	cfldr64cs	mvdx0, [r0], {-0}
    e5c0:	53040000 	movwpl	r0, #16384	; 0x4000
    e5c4:	00008c03 	andeq	r8, r0, r3, lsl #24
    e5c8:	00390c00 	eorseq	r0, r9, r0, lsl #24
    e5cc:	00001800 	andeq	r1, r0, r0, lsl #16
    e5d0:	2f9c0100 	svccs	0x009c0100
    e5d4:	08000001 	stmdaeq	r0, {r0}
    e5d8:	16590108 	ldrbne	r0, [r9], -r8, lsl #2
    e5dc:	09000001 	stmdbeq	r0, {r0}
    e5e0:	00002be3 	andeq	r2, r0, r3, ror #23
    e5e4:	008c5a01 	addeq	r5, ip, r1, lsl #20
    e5e8:	7c090000 	stcvc	0, cr0, [r9], {-0}
    e5ec:	0100002c 	tsteq	r0, ip, lsr #32
    e5f0:	00012f5b 	andeq	r2, r1, fp, asr pc
    e5f4:	710a0000 	mrsvc	r0, (UNDEF: 10)
    e5f8:	0100002c 	tsteq	r0, ip, lsr #32
    e5fc:	0000f75c 	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
    e600:	2c210700 	stccs	7, cr0, [r1], #-0
    e604:	5d010000 	stcpl	0, cr0, [r1, #-0]
    e608:	00000081 	andeq	r0, r0, r1, lsl #1
    e60c:	0b005101 	bleq	22a18 <__ccfg+0x2a70>
    e610:	00000081 	andeq	r0, r0, r1, lsl #1
    e614:	0000013f 	andeq	r0, r0, pc, lsr r1
    e618:	00013f0c 	andeq	r3, r1, ip, lsl #30
    e61c:	02000100 	andeq	r0, r0, #0, 2
    e620:	2ca80704 	stccs	7, cr0, [r8], #16
    e624:	36000000 	strcc	r0, [r0], -r0
    e628:	04000001 	streq	r0, [r0], #-1
    e62c:	0032f100 	eorseq	pc, r2, r0, lsl #2
    e630:	34010400 	strcc	r0, [r1], #-1024	; 0xfffffc00
    e634:	0100002a 	tsteq	r0, sl, lsr #32
    e638:	00002ce6 	andeq	r2, r0, r6, ror #25
    e63c:	00002afb 	strdeq	r2, [r0], -fp
    e640:	00001148 	andeq	r1, r0, r8, asr #2
    e644:	00000000 	andeq	r0, r0, r0
    e648:	000077fc 	strdeq	r7, [r0], -ip
    e64c:	60060102 	andvs	r0, r6, r2, lsl #2
    e650:	0200000c 	andeq	r0, r0, #12
    e654:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    e658:	02020000 	andeq	r0, r2, #0
    e65c:	000a6e05 	andeq	r6, sl, r5, lsl #28
    e660:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e664:	00000d5b 	andeq	r0, r0, fp, asr sp
    e668:	00050402 	andeq	r0, r5, r2, lsl #8
    e66c:	03000008 	movweq	r0, #8
    e670:	000029a7 	andeq	r2, r0, r7, lsr #19
    e674:	00534102 	subseq	r4, r3, r2, lsl #2
    e678:	04020000 	streq	r0, [r2], #-0
    e67c:	00042807 	andeq	r2, r4, r7, lsl #16
    e680:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e684:	000007fb 	strdeq	r0, [r0], -fp
    e688:	23070802 	movwcs	r0, #30722	; 0x7802
    e68c:	04000004 	streq	r0, [r0], #-4
    e690:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e694:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e698:	00042d07 	andeq	r2, r4, r7, lsl #26
    e69c:	29a90300 	stmibcs	r9!, {r8, r9}
    e6a0:	20030000 	andcs	r0, r3, r0
    e6a4:	00000048 	andeq	r0, r0, r8, asr #32
    e6a8:	0029e405 	eoreq	lr, r9, r5, lsl #8
    e6ac:	766a0400 	strbtvc	r0, [sl], -r0, lsl #8
    e6b0:	24000000 	strcs	r0, [r0], #-0
    e6b4:	08000039 	stmdaeq	r0, {r0, r3, r4, r5}
    e6b8:	01000000 	mrseq	r0, (UNDEF: 0)
    e6bc:	0000a69c 	muleq	r0, ip, r6
    e6c0:	2cd40600 	ldclcs	6, cr0, [r4], {0}
    e6c4:	77010000 	strvc	r0, [r1, -r0]
    e6c8:	00000076 	andeq	r0, r0, r6, ror r0
    e6cc:	2d010500 	cfstr32cs	mvfx0, [r1, #-0]
    e6d0:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    e6d4:	00000076 	andeq	r0, r0, r6, ror r0
    e6d8:	00000000 	andeq	r0, r0, r0
    e6dc:	00000006 	andeq	r0, r0, r6
    e6e0:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    e6e4:	d4060000 	strle	r0, [r6], #-0
    e6e8:	0100002c 	tsteq	r0, ip, lsr #32
    e6ec:	000076c2 	andeq	r7, r0, r2, asr #13
    e6f0:	f3050000 	vhadd.u8	d0, d5, d0
    e6f4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e6f8:	00007684 	andeq	r7, r0, r4, lsl #13
    e6fc:	00392c00 	eorseq	r2, r9, r0, lsl #24
    e700:	00000800 	andeq	r0, r0, r0, lsl #16
    e704:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    e708:	07000000 	streq	r0, [r0, -r0]
    e70c:	00002cd4 	ldrdeq	r2, [r0], -r4
    e710:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    e714:	00000000 	andeq	r0, r0, r0
    e718:	002cb108 	eoreq	fp, ip, r8, lsl #2
    e71c:	015b0400 	cmpeq	fp, r0, lsl #8
    e720:	00000076 	andeq	r0, r0, r6, ror r0
    e724:	00000000 	andeq	r0, r0, r0
    e728:	00000006 	andeq	r0, r0, r6
    e72c:	01189c01 	tsteq	r8, r1, lsl #24
    e730:	d4070000 	strle	r0, [r7], #-0
    e734:	0100002c 	tsteq	r0, ip, lsr #32
    e738:	0076015a 	rsbseq	r0, r6, sl, asr r1
    e73c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e740:	00002cc5 	andeq	r2, r0, r5, asr #25
    e744:	00016c04 	andeq	r6, r1, r4, lsl #24
    e748:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e74c:	01000000 	mrseq	r0, (UNDEF: 0)
    e750:	2cdc0a9c 	vldmiacs	ip, {s1-s156}
    e754:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    e758:	00007601 	andeq	r7, r0, r1, lsl #12
    e75c:	00500100 	subseq	r0, r0, r0, lsl #2
    e760:	0008bf00 	andeq	fp, r8, r0, lsl #30
    e764:	a1000400 	tstge	r0, r0, lsl #8
    e768:	04000033 	streq	r0, [r0], #-51	; 0xffffffcd
    e76c:	002a3401 	eoreq	r3, sl, r1, lsl #8
    e770:	2e390100 	rsfcse	f0, f1, f0
    e774:	2afb0000 	bcs	ffece77c <_estack+0xdfec977c>
    e778:	11900000 	orrsne	r0, r0, r0
    e77c:	00000000 	andeq	r0, r0, r0
    e780:	799c0000 	ldmibvc	ip, {}	; <UNPREDICTABLE>
    e784:	01020000 	mrseq	r0, (UNDEF: 2)
    e788:	000c6006 	andeq	r6, ip, r6
    e78c:	2a0f0300 	bcs	3cf394 <__ccfg+0x3af3ec>
    e790:	1d030000 	stcne	0, cr0, [r3, #-0]
    e794:	00000037 	andeq	r0, r0, r7, lsr r0
    e798:	5e080102 	adfple	f0, f0, f2
    e79c:	0300000c 	movweq	r0, #12
    e7a0:	000031e0 	andeq	r3, r0, r0, ror #3
    e7a4:	00492903 	subeq	r2, r9, r3, lsl #18
    e7a8:	02020000 	andeq	r0, r2, #0
    e7ac:	000a6e05 	andeq	r6, sl, r5, lsl #28
    e7b0:	2e050300 	cdpcs	3, 0, cr0, cr5, cr0, {0}
    e7b4:	2b030000 	blcs	ce7bc <__ccfg+0xae814>
    e7b8:	0000005b 	andeq	r0, r0, fp, asr r0
    e7bc:	5b070202 	blpl	1cefcc <__ccfg+0x1af024>
    e7c0:	0300000d 	movweq	r0, #13
    e7c4:	00002b94 	muleq	r0, r4, fp
    e7c8:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    e7cc:	04020000 	streq	r0, [r2], #-0
    e7d0:	00080005 	andeq	r0, r8, r5
    e7d4:	29a70300 	stmibcs	r7!, {r8, r9}
    e7d8:	41030000 	mrsmi	r0, (UNDEF: 3)
    e7dc:	0000007f 	andeq	r0, r0, pc, ror r0
    e7e0:	28070402 	stmdacs	r7, {r1, sl}
    e7e4:	02000004 	andeq	r0, r0, #4
    e7e8:	07fb0508 	ldrbeq	r0, [fp, r8, lsl #10]!
    e7ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e7f0:	00042307 	andeq	r2, r4, r7, lsl #6
    e7f4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e7f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e7fc:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    e800:	03000004 	movweq	r0, #4
    e804:	00002a11 	andeq	r2, r0, r1, lsl sl
    e808:	002c1404 	eoreq	r1, ip, r4, lsl #8
    e80c:	e2030000 	and	r0, r3, #0
    e810:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    e814:	00003e19 	andeq	r3, r0, r9, lsl lr
    e818:	2e070300 	cdpcs	3, 0, cr0, cr7, cr0, {0}
    e81c:	1a040000 	bne	10e824 <__ccfg+0xee87c>
    e820:	00000050 	andeq	r0, r0, r0, asr r0
    e824:	002b9603 	eoreq	r9, fp, r3, lsl #12
    e828:	621f0400 	andsvs	r0, pc, #0, 8
    e82c:	03000000 	movweq	r0, #0
    e830:	000029a9 	andeq	r2, r0, r9, lsr #19
    e834:	00742004 	rsbseq	r2, r4, r4
    e838:	d3030000 	movwle	r0, #12288	; 0x3000
    e83c:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    e840:	0000e433 	andeq	lr, r0, r3, lsr r4
    e844:	ea040500 	b	10fc4c <__ccfg+0xefca4>
    e848:	06000000 	streq	r0, [r0], -r0
    e84c:	00f10405 	rscseq	r0, r1, r5, lsl #8
    e850:	fc070000 	stc2	0, cr0, [r7], {-0}
    e854:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e858:	000000a2 	andeq	r0, r0, r2, lsr #1
    e85c:	31090300 	mrscc	r0, (UNDEF: 57)
    e860:	42060000 	andmi	r0, r6, #0
    e864:	00000107 	andeq	r0, r0, r7, lsl #2
    e868:	010d0405 	tsteq	sp, r5, lsl #8
    e86c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e870:	26000000 	strcs	r0, [r0], -r0
    e874:	08000001 	stmdaeq	r0, {r0}
    e878:	00000126 	andeq	r0, r0, r6, lsr #2
    e87c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e880:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    e884:	05000000 	streq	r0, [r0, #-0]
    e888:	0000a204 	andeq	sl, r0, r4, lsl #4
    e88c:	32710300 	rsbscc	r0, r1, #0, 6
    e890:	46060000 	strmi	r0, [r6], -r0
    e894:	00000137 	andeq	r0, r0, r7, lsr r1
    e898:	013d0405 	teqeq	sp, r5, lsl #8
    e89c:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    e8a0:	03000000 	movweq	r0, #0
    e8a4:	000032ba 			; <UNDEFINED> instruction: 0x000032ba
    e8a8:	01374806 	teqeq	r7, r6, lsl #16
    e8ac:	a1030000 	mrsge	r0, (UNDEF: 3)
    e8b0:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e8b4:	0001584a 	andeq	r5, r1, sl, asr #16
    e8b8:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    e8bc:	09000001 	stmdbeq	r0, {r0}
    e8c0:	000000ce 	andeq	r0, r0, lr, asr #1
    e8c4:	0000016d 	andeq	r0, r0, sp, ror #2
    e8c8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e8cc:	b0030000 	andlt	r0, r3, r0
    e8d0:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e8d4:	0001374c 	andeq	r3, r1, ip, asr #14
    e8d8:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
    e8dc:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    e8e0:	00000107 	andeq	r0, r0, r7, lsl #2
    e8e4:	002ea003 	eoreq	sl, lr, r3
    e8e8:	e4510600 	ldrb	r0, [r1], #-1536	; 0xfffffa00
    e8ec:	03000000 	movweq	r0, #0
    e8f0:	00002d2a 	andeq	r2, r0, sl, lsr #26
    e8f4:	01995306 	orrseq	r5, r9, r6, lsl #6
    e8f8:	04050000 	streq	r0, [r5], #-0
    e8fc:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    e900:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e904:	0001b800 	andeq	fp, r1, r0, lsl #16
    e908:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    e90c:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    e910:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e914:	000000b8 	strheq	r0, [r0], -r8
    e918:	b8040500 	stmdalt	r4, {r8, sl}
    e91c:	03000000 	movweq	r0, #0
    e920:	0000311f 	andeq	r3, r0, pc, lsl r1
    e924:	01c95706 	biceq	r5, r9, r6, lsl #14
    e928:	04050000 	streq	r0, [r5], #-0
    e92c:	000001cf 	andeq	r0, r0, pc, asr #3
    e930:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e934:	0001e300 	andeq	lr, r1, r0, lsl #6
    e938:	01e30800 	mvneq	r0, r0, lsl #16
    e93c:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e940:	00000000 	andeq	r0, r0, r0
    e944:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    e948:	13030000 	movwne	r0, #12288	; 0x3000
    e94c:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e950:	0001c95a 	andeq	ip, r1, sl, asr r9
    e954:	2fcd0300 	svccs	0x00cd0300
    e958:	5d060000 	stcpl	0, cr0, [r6, #-0]
    e95c:	000001c9 	andeq	r0, r0, r9, asr #3
    e960:	002d3c03 	eoreq	r3, sp, r3, lsl #24
    e964:	c9600600 	stmdbgt	r0!, {r9, sl}^
    e968:	03000001 	movweq	r0, #1
    e96c:	0000312d 	andeq	r3, r0, sp, lsr #2
    e970:	00e46306 	rsceq	r6, r4, r6, lsl #6
    e974:	7a030000 	bvc	ce97c <__ccfg+0xae9d4>
    e978:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e97c:	00022065 	andeq	r2, r2, r5, rrx
    e980:	26040500 	strcs	r0, [r4], -r0, lsl #10
    e984:	07000002 	streq	r0, [r0, -r2]
    e988:	00000231 	andeq	r0, r0, r1, lsr r2
    e98c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e990:	cb030000 	blgt	ce998 <__ccfg+0xae9f0>
    e994:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e998:	00022067 	andeq	r2, r2, r7, rrx
    e99c:	300f0300 	andcc	r0, pc, r0, lsl #6
    e9a0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    e9a4:	000000eb 	andeq	r0, r0, fp, ror #1
    e9a8:	0032aa03 	eorseq	sl, r2, r3, lsl #20
    e9ac:	eb6b0600 	bl	1ad01b4 <__ccfg+0x1ab020c>
    e9b0:	03000000 	movweq	r0, #0
    e9b4:	00002fdc 	ldrdeq	r2, [r0], -ip
    e9b8:	00eb6d06 	rsceq	r6, fp, r6, lsl #26
    e9bc:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    e9c0:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e9c4:	0000eb6f 	andeq	lr, r0, pc, ror #22
    e9c8:	064c0b00 	strbeq	r0, [ip], -r0, lsl #22
    e9cc:	0003557a 	andeq	r5, r3, sl, ror r5
    e9d0:	2fb20c00 	svccs	0x00b20c00
    e9d4:	7c060000 	stcvc	0, cr0, [r6], {-0}
    e9d8:	000000fc 	strdeq	r0, [r0], -ip
    e9dc:	329d0c00 	addscc	r0, sp, #0, 24
    e9e0:	7d060000 	stcvc	0, cr0, [r6, #-0]
    e9e4:	0000012c 	andeq	r0, r0, ip, lsr #2
    e9e8:	2fc30c04 	svccs	0x00c30c04
    e9ec:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    e9f0:	00000142 	andeq	r0, r0, r2, asr #2
    e9f4:	31bc0c08 			; <UNDEFINED> instruction: 0x31bc0c08
    e9f8:	7f060000 	svcvc	0x00060000
    e9fc:	0000014d 	andeq	r0, r0, sp, asr #2
    ea00:	31ce0c0c 	biccc	r0, lr, ip, lsl #24
    ea04:	80060000 	andhi	r0, r6, r0
    ea08:	0000016d 	andeq	r0, r0, sp, ror #2
    ea0c:	2ec10c10 	mcrcs	12, 6, r0, cr1, cr0, {0}
    ea10:	81060000 	mrshi	r0, (UNDEF: 6)
    ea14:	00000178 	andeq	r0, r0, r8, ror r1
    ea18:	2e7d0c14 	mrccs	12, 3, r0, cr13, cr4, {0}
    ea1c:	82060000 	andhi	r0, r6, #0
    ea20:	00000183 	andeq	r0, r0, r3, lsl #3
    ea24:	2fb80c18 	svccs	0x00b80c18
    ea28:	83060000 	movwhi	r0, #24576	; 0x6000
    ea2c:	0000018e 	andeq	r0, r0, lr, lsl #3
    ea30:	31470c1c 	cmpcc	r7, ip, lsl ip
    ea34:	84060000 	strhi	r0, [r6], #-0
    ea38:	000001be 			; <UNDEFINED> instruction: 0x000001be
    ea3c:	2f3f0c20 	svccs	0x003f0c20
    ea40:	85060000 	strhi	r0, [r6, #-0]
    ea44:	000001e9 	andeq	r0, r0, r9, ror #3
    ea48:	2f970c24 	svccs	0x00970c24
    ea4c:	86060000 	strhi	r0, [r6], -r0
    ea50:	000001f4 	strdeq	r0, [r0], -r4
    ea54:	31fc0c28 	mvnscc	r0, r8, lsr #24
    ea58:	87060000 	strhi	r0, [r6, -r0]
    ea5c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    ea60:	2edc0c2c 	cdpcs	12, 13, cr0, cr12, cr12, {1}
    ea64:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    ea68:	00000215 	andeq	r0, r0, r5, lsl r2
    ea6c:	31ea0c30 	mvncc	r0, r0, lsr ip
    ea70:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    ea74:	00000231 	andeq	r0, r0, r1, lsr r2
    ea78:	2dbb0c34 	ldccs	12, cr0, [fp, #208]!	; 0xd0
    ea7c:	8a060000 	bhi	18ea84 <__ccfg+0x16eadc>
    ea80:	0000020a 	andeq	r0, r0, sl, lsl #4
    ea84:	2ffe0c38 	svccs	0x00fe0c38
    ea88:	8b060000 	blhi	18ea90 <__ccfg+0x16eae8>
    ea8c:	0000023c 	andeq	r0, r0, ip, lsr r2
    ea90:	319d0c3c 	orrscc	r0, sp, ip, lsr ip
    ea94:	8c060000 	stchi	0, cr0, [r6], {-0}
    ea98:	00000247 	andeq	r0, r0, r7, asr #4
    ea9c:	2f210c40 	svccs	0x00210c40
    eaa0:	8d060000 	stchi	0, cr0, [r6, #-0]
    eaa4:	00000252 	andeq	r0, r0, r2, asr r2
    eaa8:	2d6b0c44 	stclcs	12, cr0, [fp, #-272]!	; 0xfffffef0
    eaac:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    eab0:	0000025d 	andeq	r0, r0, sp, asr r2
    eab4:	cd030048 	stcgt	0, cr0, [r3, #-288]	; 0xfffffee0
    eab8:	06000030 			; <UNDEFINED> instruction: 0x06000030
    eabc:	0002688f 	andeq	r6, r2, pc, lsl #17
    eac0:	01140b00 	tsteq	r4, r0, lsl #22
    eac4:	0003a554 	andeq	sl, r3, r4, asr r5
    eac8:	2e210c00 	cdpcs	12, 2, cr0, cr1, cr0, {0}
    eacc:	55010000 	strpl	r0, [r1, #-0]
    ead0:	000000ce 	andeq	r0, r0, lr, asr #1
    ead4:	30930c00 	addscc	r0, r3, r0, lsl #24
    ead8:	56010000 	strpl	r0, [r1], -r0
    eadc:	000000ce 	andeq	r0, r0, lr, asr #1
    eae0:	2d8b0c04 	stccs	12, cr0, [fp, #16]
    eae4:	57010000 	strpl	r0, [r1, -r0]
    eae8:	000000ce 	andeq	r0, r0, lr, asr #1
    eaec:	2e540c08 	cdpcs	12, 5, cr0, cr4, cr8, {0}
    eaf0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    eaf4:	000000ce 	andeq	r0, r0, lr, asr #1
    eaf8:	2dce0c0c 	stclcs	12, cr0, [lr, #48]	; 0x30
    eafc:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    eb00:	000000c3 	andeq	r0, r0, r3, asr #1
    eb04:	be030010 	mcrlt	0, 0, r0, cr3, cr0, {0}
    eb08:	01000030 	tsteq	r0, r0, lsr r0
    eb0c:	0003605a 	andeq	r6, r3, sl, asr r0
    eb10:	2d120d00 	ldccs	13, cr0, [r2, #-0]
    eb14:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    eb18:	0003d301 	andeq	sp, r3, r1, lsl #6
    eb1c:	30ec0e00 	rsccc	r0, ip, r0, lsl #28
    eb20:	65010000 	strvs	r0, [r1, #-0]
    eb24:	000000ce 	andeq	r0, r0, lr, asr #1
    eb28:	002d630e 	eoreq	r6, sp, lr, lsl #6
    eb2c:	ce650100 	powgts	f0, f5, f0
    eb30:	00000000 	andeq	r0, r0, r0
    eb34:	002d4b0f 	eoreq	r4, sp, pc, lsl #22
    eb38:	01100200 	tsteq	r0, r0, lsl #4
    eb3c:	000000ce 	andeq	r0, r0, lr, asr #1
    eb40:	0003fb01 	andeq	pc, r3, r1, lsl #22
    eb44:	30ec0e00 	rsccc	r0, ip, r0, lsl #28
    eb48:	a0010000 	andge	r0, r1, r0
    eb4c:	000000ce 	andeq	r0, r0, lr, asr #1
    eb50:	0031ac10 	eorseq	sl, r1, r0, lsl ip
    eb54:	cea20100 	fdvgts	f0, f2, f0
    eb58:	00000000 	andeq	r0, r0, r0
    eb5c:	0003b011 	andeq	fp, r3, r1, lsl r0
    eb60:	00393400 	eorseq	r3, r9, r0, lsl #8
    eb64:	00005c00 	andeq	r5, r0, r0, lsl #24
    eb68:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    eb6c:	12000004 	andne	r0, r0, #4
    eb70:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    eb74:	000037de 	ldrdeq	r3, [r0], -lr
    eb78:	0003c712 	andeq	ip, r3, r2, lsl r7
    eb7c:	00380a00 	eorseq	r0, r8, r0, lsl #20
    eb80:	396e1300 	stmdbcc	lr!, {r8, r9, ip}^
    eb84:	00140000 	andseq	r0, r4, r0
    eb88:	04610000 	strbteq	r0, [r1], #-0
    eb8c:	bc120000 	ldclt	0, cr0, [r2], {-0}
    eb90:	36000003 	strcc	r0, [r0], -r3
    eb94:	12000038 	andne	r0, r0, #56	; 0x38
    eb98:	000003c7 	andeq	r0, r0, r7, asr #7
    eb9c:	00003849 	andeq	r3, r0, r9, asr #16
    eba0:	00398214 	eorseq	r8, r9, r4, lsl r2
    eba4:	00740200 	rsbseq	r0, r4, r0, lsl #4
    eba8:	01530115 	cmpeq	r3, r5, lsl r1
    ebac:	52011532 	andpl	r1, r1, #209715200	; 0xc800000
    ebb0:	01153c01 	tsteq	r5, r1, lsl #24
    ebb4:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ebb8:	0c055001 	stceq	0, cr5, [r5], {1}
    ebbc:	400ca000 	andmi	sl, ip, r0
    ebc0:	52160000 	andspl	r0, r6, #0
    ebc4:	02000039 	andeq	r0, r0, #57	; 0x39
    ebc8:	048d0076 	streq	r0, [sp], #118	; 0x76
    ebcc:	01150000 	tsteq	r5, r0
    ebd0:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    ebd4:	31015201 	tstcc	r1, r1, lsl #4
    ebd8:	01510115 	cmpeq	r1, r5, lsl r1
    ebdc:	50011530 	andpl	r1, r1, r0, lsr r5
    ebe0:	a0000c05 	andge	r0, r0, r5, lsl #24
    ebe4:	0215400c 	andseq	r4, r5, #12
    ebe8:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    ebec:	6a140000 	bvs	50ebf4 <__ccfg+0x4eec4c>
    ebf0:	02000039 	andeq	r0, r0, #57	; 0x39
    ebf4:	01150076 	tsteq	r5, r6, ror r0
    ebf8:	15310153 	ldrne	r0, [r1, #-339]!	; 0xfffffead
    ebfc:	32015201 	andcc	r5, r1, #268435456	; 0x10000000
    ec00:	01510115 	cmpeq	r1, r5, lsl r1
    ec04:	50011530 	andpl	r1, r1, r0, lsr r5
    ec08:	a0000c05 	andge	r0, r0, r5, lsl #24
    ec0c:	0215400c 	andseq	r4, r5, #12
    ec10:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    ec14:	11000000 	mrsne	r0, (UNDEF: 0)
    ec18:	000003d3 	ldrdeq	r0, [r0], -r3
    ec1c:	00003990 	muleq	r0, r0, r9
    ec20:	0000002c 	andeq	r0, r0, ip, lsr #32
    ec24:	050d9c01 	streq	r9, [sp, #-3073]	; 0xfffff3ff
    ec28:	e4120000 	ldr	r0, [r2], #-0
    ec2c:	6a000003 	bvs	ec40 <__exidx_end+0x9164>
    ec30:	17000038 	smladxne	r0, r8, r0, r0
    ec34:	000003ef 	andeq	r0, r0, pc, ror #7
    ec38:	78185001 	ldmdavc	r8, {r0, ip, lr}
    ec3c:	f4000011 	vst4.8	{d0-d3}, [r0 :64], r1
    ec40:	19000004 	stmdbne	r0, {r2}
    ec44:	000003e4 	andeq	r0, r0, r4, ror #7
    ec48:	11781a04 	cmnne	r8, r4, lsl #20
    ec4c:	ef1b0000 	svc	0x001b0000
    ec50:	00000003 	andeq	r0, r0, r3
    ec54:	39b01400 	ldmibcc	r0!, {sl, ip}
    ec58:	74020000 	strvc	r0, [r2], #-0
    ec5c:	51011500 	tstpl	r1, r0, lsl #10
    ec60:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    ec64:	0c055001 	stceq	0, cr5, [r5], {1}
    ec68:	400ca000 	andmi	sl, ip, r0
    ec6c:	821c0000 	andshi	r0, ip, #0
    ec70:	02000032 	andeq	r0, r0, #50	; 0x32
    ec74:	00ce0184 	sbceq	r0, lr, r4, lsl #3
    ec78:	00000000 	andeq	r0, r0, r0
    ec7c:	00900000 	addseq	r0, r0, r0
    ec80:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec84:	00000576 	andeq	r0, r0, r6, ror r5
    ec88:	0030d81d 	eorseq	sp, r0, sp, lsl r8
    ec8c:	cec20100 	polgts	f0, f2, f0
    ec90:	8b000000 	blhi	ec98 <__exidx_end+0x91bc>
    ec94:	1e000038 	mcrne	0, 0, r0, cr0, cr8, {1}
    ec98:	0000304b 	andeq	r3, r0, fp, asr #32
    ec9c:	00cec401 	sbceq	ip, lr, r1, lsl #8
    eca0:	38b70000 	ldmcc	r7!, {}	; <UNPREDICTABLE>
    eca4:	641e0000 	ldrvs	r0, [lr], #-0
    eca8:	01000030 	tsteq	r0, r0, lsr r0
    ecac:	0000c3c5 	andeq	ip, r0, r5, asr #7
    ecb0:	0038ca00 	eorseq	ip, r8, r0, lsl #20
    ecb4:	2dda1e00 	ldclcs	14, cr1, [sl]
    ecb8:	c6010000 	strgt	r0, [r1], -r0
    ecbc:	000000ce 	andeq	r0, r0, lr, asr #1
    ecc0:	000038f1 	strdeq	r3, [r0], -r1
    ecc4:	0000001f 	andeq	r0, r0, pc, lsl r0
    ecc8:	00089e00 	andeq	r9, r8, r0, lsl #28
    eccc:	00001f00 	andeq	r1, r0, r0, lsl #30
    ecd0:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    ecd4:	20000000 	andcs	r0, r0, r0
    ecd8:	00002e89 	andeq	r2, r0, r9, lsl #29
    ecdc:	bc019102 	stfltd	f1, [r1], {2}
    ece0:	18000039 	stmdane	r0, {r0, r3, r4, r5}
    ece4:	01000000 	mrseq	r0, (UNDEF: 0)
    ece8:	0005ae9c 	muleq	r5, ip, lr
    ecec:	39c62100 	stmibcc	r6, {r8, sp}^
    ecf0:	03b00000 	movseq	r0, #0
    ecf4:	05a40000 	streq	r0, [r4, #0]!
    ecf8:	01150000 	tsteq	r5, r0
    ecfc:	15310151 	ldrne	r0, [r1, #-337]!	; 0xfffffeaf
    ed00:	33015001 	movwcc	r5, #4097	; 0x1001
    ed04:	39ca1f00 	stmibcc	sl, {r8, r9, sl, fp, ip}^
    ed08:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ed0c:	22000000 	andcs	r0, r0, #0
    ed10:	000030a2 	andeq	r3, r0, r2, lsr #1
    ed14:	bb012202 	bllt	57524 <__ccfg+0x3757c>
    ed18:	03000005 	movweq	r0, #5
    ed1c:	aa020102 	bge	8f12c <__ccfg+0x6f184>
    ed20:	2300000c 	movwcs	r0, #12
    ed24:	000030f7 	strdeq	r3, [r0], -r7
    ed28:	03014002 	movweq	r4, #4098	; 0x1002
    ed2c:	002d991c 	eoreq	r9, sp, ip, lsl r9
    ed30:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
    ed34:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    ed38:	000039d4 	ldrdeq	r3, [r0], -r4
    ed3c:	00000060 	andeq	r0, r0, r0, rrx
    ed40:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    ed44:	83240000 			; <UNDEFINED> instruction: 0x83240000
    ed48:	01000030 	tsteq	r0, r0, lsr r0
    ed4c:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    ed50:	39450000 	stmdbcc	r5, {}^	; <UNPREDICTABLE>
    ed54:	50240000 	eorpl	r0, r4, r0
    ed58:	01000031 	tsteq	r0, r1, lsr r0
    ed5c:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    ed60:	39580000 	ldmdbcc	r8, {}^	; <UNPREDICTABLE>
    ed64:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    ed68:	e0000005 	and	r0, r0, r5
    ed6c:	10000039 	andne	r0, r0, r9, lsr r0
    ed70:	01000000 	mrseq	r0, (UNDEF: 0)
    ed74:	063c0109 	ldrteq	r0, [ip], -r9, lsl #2
    ed78:	f0140000 			; <UNDEFINED> instruction: 0xf0140000
    ed7c:	02000039 	andeq	r0, r0, #57	; 0x39
    ed80:	01150074 	tsteq	r5, r4, ror r0
    ed84:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    ed88:	31015201 	tstcc	r1, r1, lsl #4
    ed8c:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    ed90:	01153408 	tsteq	r5, r8, lsl #8
    ed94:	000c0550 	andeq	r0, ip, r0, asr r5
    ed98:	00400ca0 	subeq	r0, r0, r0, lsr #25
    ed9c:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    eda0:	39f20000 	ldmibcc	r2!, {}^	; <UNPREDICTABLE>
    eda4:	00080000 	andeq	r0, r8, r0
    eda8:	0a010000 	beq	4edb0 <__ccfg+0x2ee08>
    edac:	00065a01 	andeq	r5, r6, r1, lsl #20
    edb0:	39fa1f00 	ldmibcc	sl!, {r8, r9, sl, fp, ip}^
    edb4:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    edb8:	21000000 	mrscs	r0, (UNDEF: 0)
    edbc:	000039dc 	ldrdeq	r3, [r0], -ip
    edc0:	000003d3 	ldrdeq	r0, [r0], -r3
    edc4:	0000066d 	andeq	r0, r0, sp, ror #12
    edc8:	01500115 	cmpeq	r0, r5, lsl r1
    edcc:	fe1f0031 	mrc2	0, 0, r0, cr15, cr1, {1}
    edd0:	9e000039 	mcrls	0, 0, r0, cr0, cr9, {1}
    edd4:	00000008 	andeq	r0, r0, r8
    edd8:	002eee20 	eoreq	lr, lr, r0, lsr #28
    eddc:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
    ede0:	00003a34 	andeq	r3, r0, r4, lsr sl
    ede4:	00000034 	andeq	r0, r0, r4, lsr r0
    ede8:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    edec:	c2250000 	eorgt	r0, r5, #0
    edf0:	46000005 	strmi	r0, [r0], -r5
    edf4:	0800003a 	stmdaeq	r0, {r1, r3, r4, r5}
    edf8:	01000000 	mrseq	r0, (UNDEF: 0)
    edfc:	06ab012f 	strteq	r0, [fp], pc, lsr #2
    ee00:	4e1f0000 	cdpmi	0, 1, cr0, cr15, cr0, {0}
    ee04:	b500003a 	strlt	r0, [r0, #-58]	; 0xffffffc6
    ee08:	00000008 	andeq	r0, r0, r8
    ee0c:	003a3e21 	eorseq	r3, sl, r1, lsr #28
    ee10:	0003b000 	andeq	fp, r3, r0
    ee14:	0006c300 	andeq	ip, r6, r0, lsl #6
    ee18:	51011500 	tstpl	r1, r0, lsl #10
    ee1c:	01153001 	tsteq	r5, r1
    ee20:	00330150 	eorseq	r0, r3, r0, asr r1
    ee24:	003a4421 	eorseq	r4, sl, r1, lsr #8
    ee28:	0003d300 	andeq	sp, r3, r0, lsl #6
    ee2c:	0006d600 	andeq	sp, r6, r0, lsl #12
    ee30:	50011500 	andpl	r1, r1, r0, lsl #10
    ee34:	1f003101 	svcne	0x00003101
    ee38:	00003a52 	andeq	r3, r0, r2, asr sl
    ee3c:	0000089e 	muleq	r0, lr, r8
    ee40:	003a5a1f 	eorseq	r5, sl, pc, lsl sl
    ee44:	0008aa00 	andeq	sl, r8, r0, lsl #20
    ee48:	481c0000 	ldmdami	ip, {}	; <UNPREDICTABLE>
    ee4c:	0200002f 	andeq	r0, r0, #47	; 0x2f
    ee50:	00c301f2 	strdeq	r0, [r3], #18
    ee54:	00000000 	andeq	r0, r0, r0
    ee58:	00380000 	eorseq	r0, r8, r0
    ee5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ee60:	0000079a 	muleq	r0, sl, r7
    ee64:	00311626 	eorseq	r1, r1, r6, lsr #12
    ee68:	013c0100 	teqeq	ip, r0, lsl #2
    ee6c:	000000c3 	andeq	r0, r0, r3, asr #1
    ee70:	0000396b 	andeq	r3, r0, fp, ror #18
    ee74:	00307927 	eorseq	r7, r0, r7, lsr #18
    ee78:	013f0100 	teqeq	pc, r0, lsl #2
    ee7c:	000000ce 	andeq	r0, r0, lr, asr #1
    ee80:	dc275101 	stfles	f5, [r7], #-4
    ee84:	01000032 	tsteq	r0, r2, lsr r0
    ee88:	00c30141 	sbceq	r0, r3, r1, asr #2
    ee8c:	71050000 	mrsvc	r0, (UNDEF: 5)
    ee90:	9f264000 	svcls	0x00264000
    ee94:	002ded27 	eoreq	lr, sp, r7, lsr #26
    ee98:	01430100 	mrseq	r0, (UNDEF: 83)
    ee9c:	000000c3 	andeq	r0, r0, r3, asr #1
    eea0:	40007107 	andmi	r7, r0, r7, lsl #2
    eea4:	9f264824 	svcls	0x00264824
    eea8:	002df527 	eoreq	pc, sp, r7, lsr #10
    eeac:	01450100 	mrseq	r0, (UNDEF: 85)
    eeb0:	000000c3 	andeq	r0, r0, r3, asr #1
    eeb4:	48007107 	stmdami	r0, {r0, r1, r2, r8, ip, sp, lr}
    eeb8:	9f264824 	svcls	0x00264824
    eebc:	002dfd24 	eoreq	pc, sp, r4, lsr #26
    eec0:	01470100 	mrseq	r0, (UNDEF: 87)
    eec4:	000000c3 	andeq	r0, r0, r3, asr #1
    eec8:	00003999 	muleq	r0, r9, r9
    eecc:	002e6624 	eoreq	r6, lr, r4, lsr #12
    eed0:	01560100 	cmpeq	r6, r0, lsl #2
    eed4:	000000c3 	andeq	r0, r0, r3, asr #1
    eed8:	000039b2 			; <UNDEFINED> instruction: 0x000039b2
    eedc:	00301e24 	eorseq	r1, r0, r4, lsr #28
    eee0:	01570100 	cmpeq	r7, r0, lsl #2
    eee4:	000000c3 	andeq	r0, r0, r3, asr #1
    eee8:	000039d5 	ldrdeq	r3, [r0], -r5
    eeec:	01006428 	tsteq	r0, r8, lsr #8
    eef0:	00c30158 	sbceq	r0, r3, r8, asr r1
    eef4:	39fe0000 	ldmibcc	lr!, {}^	; <UNPREDICTABLE>
    eef8:	1c000000 	stcne	0, cr0, [r0], {-0}
    eefc:	00003161 	andeq	r3, r0, r1, ror #2
    ef00:	ad020e02 	stcge	14, cr0, [r2, #-8]
    ef04:	00000000 	andeq	r0, r0, r0
    ef08:	0c000000 	stceq	0, cr0, [r0], {-0}
    ef0c:	01000000 	mrseq	r0, (UNDEF: 0)
    ef10:	0007d59c 	muleq	r7, ip, r5
    ef14:	30372600 	eorscc	r2, r7, r0, lsl #12
    ef18:	63010000 	movwvs	r0, #4096	; 0x1000
    ef1c:	0000c301 	andeq	ip, r0, r1, lsl #6
    ef20:	003a7800 	eorseq	r7, sl, r0, lsl #16
    ef24:	32102400 	andscc	r2, r0, #0, 8
    ef28:	85010000 	strhi	r0, [r1, #-0]
    ef2c:	0000c301 	andeq	ip, r0, r1, lsl #6
    ef30:	003a9900 	eorseq	r9, sl, r0, lsl #18
    ef34:	721c0000 	andsvc	r0, ip, #0
    ef38:	0200002f 	andeq	r0, r0, #47	; 0x2f
    ef3c:	00ce01c2 	sbceq	r0, lr, r2, asr #3
    ef40:	00000000 	andeq	r0, r0, r0
    ef44:	00340000 	eorseq	r0, r4, r0
    ef48:	9c010000 	stcls	0, cr0, [r1], {-0}
    ef4c:	00000842 	andeq	r0, r0, r2, asr #16
    ef50:	00326324 	eorseq	r6, r2, r4, lsr #6
    ef54:	01920100 	orrseq	r0, r2, r0, lsl #2
    ef58:	000000ce 	andeq	r0, r0, lr, asr #1
    ef5c:	00003ad9 	ldrdeq	r3, [r0], -r9
    ef60:	00200a24 	eoreq	r0, r0, r4, lsr #20
    ef64:	01930100 	orrseq	r0, r3, r0, lsl #2
    ef68:	000000ce 	andeq	r0, r0, lr, asr #1
    ef6c:	00003afb 	strdeq	r3, [r0], -fp
    ef70:	002f3524 	eoreq	r3, pc, r4, lsr #10
    ef74:	01940100 	orrseq	r0, r4, r0, lsl #2
    ef78:	000000ce 	andeq	r0, r0, lr, asr #1
    ef7c:	00003b0e 	andeq	r3, r0, lr, lsl #22
    ef80:	002ed324 	eoreq	sp, lr, r4, lsr #6
    ef84:	01950100 	orrseq	r0, r5, r0, lsl #2
    ef88:	000000ce 	andeq	r0, r0, lr, asr #1
    ef8c:	00003b31 	andeq	r3, r0, r1, lsr fp
    ef90:	0000001f 	andeq	r0, r0, pc, lsl r0
    ef94:	00089e00 	andeq	r9, r8, r0, lsl #28
    ef98:	00001f00 	andeq	r1, r0, r0, lsl #30
    ef9c:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    efa0:	1c000000 	stcne	0, cr0, [r0], {-0}
    efa4:	0000322f 	andeq	r3, r0, pc, lsr #4
    efa8:	ce01d302 	cdpgt	3, 0, cr13, cr1, cr2, {0}
    efac:	00000000 	andeq	r0, r0, r0
    efb0:	1c000000 	stcne	0, cr0, [r0], {-0}
    efb4:	01000000 	mrseq	r0, (UNDEF: 0)
    efb8:	00088d9c 	muleq	r8, ip, sp
    efbc:	30b32400 	adcscc	r2, r3, r0, lsl #8
    efc0:	b7010000 	strlt	r0, [r1, -r0]
    efc4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    efc8:	003b4d00 	eorseq	r4, fp, r0, lsl #26
    efcc:	32212400 	eorcc	r2, r1, #0, 8
    efd0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    efd4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    efd8:	003b6000 	eorseq	r6, fp, r0
    efdc:	2e702400 	cdpcs	4, 7, cr2, cr0, cr0, {0}
    efe0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    efe4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    efe8:	003b7b00 	eorseq	r7, fp, r0, lsl #22
    efec:	2a290000 	bcs	a4eff4 <__ccfg+0xa2f04c>
    eff0:	01000030 	tsteq	r0, r0, lsr r0
    eff4:	0003a55c 	andeq	sl, r3, ip, asr r5
    eff8:	48030500 	stmdami	r3, {r8, sl}
    effc:	2a200006 	bcs	80f01c <__ccfg+0x7ef074>
    f000:	00002bfe 	strdeq	r2, [r0], -lr
    f004:	ce034507 	cfsh32gt	mvfx4, mvfx3, #7
    f008:	2b000000 	blcs	f010 <__exidx_end+0x9534>
    f00c:	00002b65 	andeq	r2, r0, r5, ror #22
    f010:	00c3aa08 	sbceq	sl, r3, r8, lsl #20
    f014:	022c0000 	eoreq	r0, ip, #0
    f018:	0600002a 	streq	r0, [r0], -sl, lsr #32
    f01c:	00d90899 	smullseq	r0, r9, r9, r8
    f020:	00000000 	andeq	r0, r0, r0
    f024:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    f028:	35fe0004 	ldrbcc	r0, [lr, #4]!
    f02c:	01040000 	mrseq	r0, (UNDEF: 4)
    f030:	00002a34 	andeq	r2, r0, r4, lsr sl
    f034:	00340001 	eorseq	r0, r4, r1
    f038:	002afb00 	eoreq	pc, sl, r0, lsl #22
    f03c:	0011e800 	andseq	lr, r1, r0, lsl #16
    f040:	00000000 	andeq	r0, r0, r0
    f044:	007c7600 	rsbseq	r7, ip, r0, lsl #12
    f048:	06010200 	streq	r0, [r1], -r0, lsl #4
    f04c:	00000c60 	andeq	r0, r0, r0, ror #24
    f050:	002a0f03 	eoreq	r0, sl, r3, lsl #30
    f054:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    f058:	02000000 	andeq	r0, r0, #0
    f05c:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    f060:	e0030000 	and	r0, r3, r0
    f064:	03000031 	movweq	r0, #49	; 0x31
    f068:	00004929 	andeq	r4, r0, r9, lsr #18
    f06c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    f070:	00000a6e 	andeq	r0, r0, lr, ror #20
    f074:	002e0503 	eoreq	r0, lr, r3, lsl #10
    f078:	5b2b0300 	blpl	acfc80 <__ccfg+0xaafcd8>
    f07c:	02000000 	andeq	r0, r0, #0
    f080:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
    f084:	94030000 	strls	r0, [r3], #-0
    f088:	0300002b 	movweq	r0, #43	; 0x2b
    f08c:	00006d3f 	andeq	r6, r0, pc, lsr sp
    f090:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    f094:	00000800 	andeq	r0, r0, r0, lsl #16
    f098:	0029a703 	eoreq	sl, r9, r3, lsl #14
    f09c:	7f410300 	svcvc	0x00410300
    f0a0:	02000000 	andeq	r0, r0, #0
    f0a4:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    f0a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    f0ac:	0007fb05 	andeq	pc, r7, r5, lsl #22
    f0b0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    f0b4:	00000423 	andeq	r0, r0, r3, lsr #8
    f0b8:	69050404 	stmdbvs	r5, {r2, sl}
    f0bc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    f0c0:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    f0c4:	11030000 	mrsne	r0, (UNDEF: 3)
    f0c8:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    f0cc:	00002c14 	andeq	r2, r0, r4, lsl ip
    f0d0:	31e20300 	mvncc	r0, r0, lsl #6
    f0d4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    f0d8:	0000003e 	andeq	r0, r0, lr, lsr r0
    f0dc:	002e0703 	eoreq	r0, lr, r3, lsl #14
    f0e0:	501a0400 	andspl	r0, sl, r0, lsl #8
    f0e4:	03000000 	movweq	r0, #0
    f0e8:	00002b96 	muleq	r0, r6, fp
    f0ec:	00621f04 	rsbeq	r1, r2, r4, lsl #30
    f0f0:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    f0f4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    f0f8:	00007420 	andeq	r7, r0, r0, lsr #8
    f0fc:	33090300 	movwcc	r0, #37632	; 0x9300
    f100:	d4050000 	strle	r0, [r5], #-0
    f104:	0000009b 	muleq	r0, fp, r0
    f108:	a8070402 	stmdage	r7, {r1, sl}
    f10c:	0500002c 	streq	r0, [r0, #-44]	; 0xffffffd4
    f110:	08010204 	stmdaeq	r1, {r2, r9}
    f114:	00000c67 	andeq	r0, r0, r7, ror #24
    f118:	0024d603 	eoreq	sp, r4, r3, lsl #12
    f11c:	ce3b0600 	cfmsuba32gt	mvax0, mvax0, mvfx11, mvfx0
    f120:	06000000 	streq	r0, [r0], -r0
    f124:	0000a204 	andeq	sl, r0, r4, lsl #4
    f128:	229d0300 	addscs	r0, sp, #0, 6
    f12c:	3c070000 	stccc	0, cr0, [r7], {-0}
    f130:	00000110 	andeq	r0, r0, r0, lsl r1
    f134:	00253c07 	eoreq	r3, r5, r7, lsl #24
    f138:	6f071000 	svcvs	0x00071000
    f13c:	00000165 	andeq	r0, r0, r5, ror #2
    f140:	001f0808 	andseq	r0, pc, r8, lsl #16
    f144:	b8700700 	ldmdalt	r0!, {r8, r9, sl}^
    f148:	00000000 	andeq	r0, r0, r0
    f14c:	00077b08 	andeq	r7, r7, r8, lsl #22
    f150:	b8710700 	ldmdalt	r1!, {r8, r9, sl}^
    f154:	02000000 	andeq	r0, r0, #0
    f158:	00227b08 	eoreq	r7, r2, r8, lsl #22
    f15c:	6d740700 	ldclvs	7, cr0, [r4, #-0]
    f160:	04000002 	streq	r0, [r0], #-2
    f164:	00200a08 	eoreq	r0, r0, r8, lsl #20
    f168:	f4750700 			; <UNDEFINED> instruction: 0xf4750700
    f16c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f170:	0022ab08 	eoreq	sl, r2, r8, lsl #22
    f174:	017d0700 	cmneq	sp, r0, lsl #14
    f178:	0c000002 	stceq	0, cr0, [r0], {2}
    f17c:	0021f508 	eoreq	pc, r1, r8, lsl #10
    f180:	46810700 	strmi	r0, [r1], r0, lsl #14
    f184:	0d000002 	stceq	0, cr0, [r0, #-8]
    f188:	34310300 	ldrtcc	r0, [r1], #-768	; 0xfffffd00
    f18c:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    f190:	00000170 	andeq	r0, r0, r0, ror r1
    f194:	00341b07 	eorseq	r1, r4, r7, lsl #22
    f198:	a5071800 	strge	r1, [r7, #-2048]	; 0xfffff800
    f19c:	00000201 	andeq	r0, r0, r1, lsl #4
    f1a0:	001f0808 	andseq	r0, pc, r8, lsl #16
    f1a4:	b8a60700 	stmialt	r6!, {r8, r9, sl}
    f1a8:	00000000 	andeq	r0, r0, r0
    f1ac:	00077b08 	andeq	r7, r7, r8, lsl #22
    f1b0:	b8a70700 	stmialt	r7!, {r8, r9, sl}
    f1b4:	02000000 	andeq	r0, r0, #0
    f1b8:	00227b08 	eoreq	r7, r2, r8, lsl #22
    f1bc:	6daa0700 	stcvs	7, cr0, [sl]
    f1c0:	04000002 	streq	r0, [r0], #-2
    f1c4:	00200a08 	eoreq	r0, r0, r8, lsl #20
    f1c8:	f4ab0700 	vld4.16	{d0[0],d1[0],d2[0],d3[0]}, [fp], r0
    f1cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f1d0:	0022ab08 	eoreq	sl, r2, r8, lsl #22
    f1d4:	73b30700 			; <UNDEFINED> instruction: 0x73b30700
    f1d8:	0c000002 	stceq	0, cr0, [r0], {2}
    f1dc:	0021f508 	eoreq	pc, r1, r8, lsl #10
    f1e0:	b8b70700 	ldmlt	r7!, {r8, r9, sl}
    f1e4:	0d000002 	stceq	0, cr0, [r0, #-8]
    f1e8:	00002d08 	andeq	r2, r0, r8, lsl #26
    f1ec:	a2b80700 	adcsge	r0, r8, #0, 14
    f1f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f1f4:	0023c108 	eoreq	ip, r3, r8, lsl #2
    f1f8:	a2bf0700 	adcsge	r0, pc, #0, 14
    f1fc:	0f000000 	svceq	0x00000000
    f200:	00147208 	andseq	r7, r4, r8, lsl #4
    f204:	dfd40700 	svcle	0x00d40700
    f208:	10000002 	andne	r0, r0, r2
    f20c:	00208b08 	eoreq	r8, r0, r8, lsl #22
    f210:	b8d50700 	ldmlt	r5, {r8, r9, sl}^
    f214:	12000000 	andne	r0, r0, #0
    f218:	0024c908 	eoreq	ip, r4, r8, lsl #18
    f21c:	24d60700 	ldrbcs	r0, [r6], #1792	; 0x700
    f220:	14000003 	strne	r0, [r0], #-3
    f224:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f228:	00024676 	andeq	r4, r2, r6, ror r6
    f22c:	275e0a00 	ldrbcs	r0, [lr, -r0, lsl #20]
    f230:	77070000 	strvc	r0, [r7, -r0]
    f234:	000000a2 	andeq	r0, r0, r2, lsr #1
    f238:	00040401 	andeq	r0, r4, r1, lsl #8
    f23c:	0020fc0a 	eoreq	pc, r0, sl, lsl #24
    f240:	a2780700 	rsbsge	r0, r8, #0, 14
    f244:	01000000 	mrseq	r0, (UNDEF: 0)
    f248:	0a000301 	beq	fe54 <__exidx_end+0xa378>
    f24c:	000021bc 			; <UNDEFINED> instruction: 0x000021bc
    f250:	00a27a07 	adceq	r7, r2, r7, lsl #20
    f254:	02010000 	andeq	r0, r1, #0
    f258:	770a0001 	strvc	r0, [sl, -r1]
    f25c:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f260:	0000a27b 	andeq	sl, r0, fp, ror r2
    f264:	00010100 	andeq	r0, r1, r0, lsl #2
    f268:	01090000 	mrseq	r0, (UNDEF: 9)
    f26c:	026d7e07 	rsbeq	r7, sp, #7, 28	; 0x70
    f270:	d90a0000 	stmdble	sl, {}	; <UNPREDICTABLE>
    f274:	07000025 	streq	r0, [r0, -r5, lsr #32]
    f278:	0000a27f 	andeq	sl, r0, pc, ror r2
    f27c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f280:	272d0a00 	strcs	r0, [sp, -r0, lsl #20]!
    f284:	80070000 	andhi	r0, r7, r0
    f288:	000000a2 	andeq	r0, r0, r2, lsr #1
    f28c:	00000401 	andeq	r0, r0, r1, lsl #8
    f290:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    f294:	09000001 	stmdbeq	r0, {r0}
    f298:	b8ac0701 	stmialt	ip!, {r0, r8, r9, sl}
    f29c:	0a000002 	beq	f2ac <__exidx_end+0x97d0>
    f2a0:	0000275e 	andeq	r2, r0, lr, asr r7
    f2a4:	00a2ad07 	adceq	sl, r2, r7, lsl #26
    f2a8:	04010000 	streq	r0, [r1], #-0
    f2ac:	fc0a0004 	stc2	0, cr0, [sl], {4}
    f2b0:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f2b4:	0000a2ae 	andeq	sl, r0, lr, lsr #5
    f2b8:	03010100 	movweq	r0, #4352	; 0x1100
    f2bc:	21bc0a00 			; <UNDEFINED> instruction: 0x21bc0a00
    f2c0:	b0070000 	andlt	r0, r7, r0
    f2c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f2c8:	00010201 	andeq	r0, r1, r1, lsl #4
    f2cc:	001f770a 	andseq	r7, pc, sl, lsl #14
    f2d0:	a2b10700 	adcsge	r0, r1, #0, 14
    f2d4:	01000000 	mrseq	r0, (UNDEF: 0)
    f2d8:	00000001 	andeq	r0, r0, r1
    f2dc:	b4070109 	strlt	r0, [r7], #-265	; 0xfffffef7
    f2e0:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f2e4:	0025d90a 	eoreq	sp, r5, sl, lsl #18
    f2e8:	a2b50700 	adcsge	r0, r5, #0, 14
    f2ec:	01000000 	mrseq	r0, (UNDEF: 0)
    f2f0:	0a000404 	beq	10308 <__exidx_end+0xa82c>
    f2f4:	0000272d 	andeq	r2, r0, sp, lsr #14
    f2f8:	00a2b607 	adceq	fp, r2, r7, lsl #12
    f2fc:	04010000 	streq	r0, [r1], #-0
    f300:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    f304:	24c20702 	strbcs	r0, [r2], #1794	; 0x702
    f308:	0a000003 	beq	f31c <__exidx_end+0x9840>
    f30c:	000021af 	andeq	r2, r0, pc, lsr #3
    f310:	00b8c307 	adcseq	ip, r8, r7, lsl #6
    f314:	03020000 	movweq	r0, #8192	; 0x2000
    f318:	4e0a000d 	cdpmi	0, 0, cr0, cr10, cr13, {0}
    f31c:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f320:	0000b8c9 	andeq	fp, r0, r9, asr #17
    f324:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    f328:	20ee0a00 	rsccs	r0, lr, r0, lsl #20
    f32c:	cb070000 	blgt	1cf334 <__ccfg+0x1af38c>
    f330:	000000b8 	strheq	r0, [r0], -r8
    f334:	00060602 	andeq	r0, r6, r2, lsl #12
    f338:	0023ed0a 	eoreq	lr, r3, sl, lsl #26
    f33c:	b8d20700 	ldmlt	r2, {r8, r9, sl}^
    f340:	02000000 	andeq	r0, r0, #0
    f344:	00000501 	andeq	r0, r0, r1, lsl #10
    f348:	00ce0406 	sbceq	r0, lr, r6, lsl #8
    f34c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    f350:	08000033 	stmdaeq	r0, {r0, r1, r4, r5}
    f354:	00033542 	andeq	r3, r3, r2, asr #10
    f358:	33ce0b00 	biccc	r0, lr, #0, 22
    f35c:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    f360:	03f901c1 	mvnseq	r0, #1073741872	; 0x40000030
    f364:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    f368:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f36c:	00b801c2 	adcseq	r0, r8, r2, asr #3
    f370:	0c000000 	stceq	0, cr0, [r0], {-0}
    f374:	0000077b 	andeq	r0, r0, fp, ror r7
    f378:	b801c308 	stmdalt	r1, {r3, r8, r9, lr, pc}
    f37c:	02000000 	andeq	r0, r0, #0
    f380:	00227b0c 	eoreq	r7, r2, ip, lsl #22
    f384:	01c60800 	biceq	r0, r6, r0, lsl #16
    f388:	0000026d 	andeq	r0, r0, sp, ror #4
    f38c:	200a0c04 	andcs	r0, sl, r4, lsl #24
    f390:	c7080000 	strgt	r0, [r8, -r0]
    f394:	0000f401 	andeq	pc, r0, r1, lsl #8
    f398:	ab0c0800 	blge	3113a0 <__ccfg+0x2f13f8>
    f39c:	08000022 	stmdaeq	r0, {r1, r5}
    f3a0:	04ef01cf 	strbteq	r0, [pc], #463	; f3a8 <__exidx_end+0x98cc>
    f3a4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    f3a8:	000021f5 	strdeq	r2, [r0], -r5
    f3ac:	3901d308 	stmdbcc	r1, {r3, r8, r9, ip, lr, pc}
    f3b0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    f3b4:	001efd0c 	andseq	pc, lr, ip, lsl #26
    f3b8:	01d90800 	bicseq	r0, r9, r0, lsl #16
    f3bc:	00000563 	andeq	r0, r0, r3, ror #10
    f3c0:	22640c0e 	rsbcs	r0, r4, #3584	; 0xe00
    f3c4:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    f3c8:	00058d01 	andeq	r8, r5, r1, lsl #26
    f3cc:	930c1000 	movwls	r1, #49152	; 0xc000
    f3d0:	08000020 	stmdaeq	r0, {r5}
    f3d4:	00a201df 	ldrdeq	r0, [r2], pc	; <UNPREDICTABLE>
    f3d8:	0c140000 	ldceq	0, cr0, [r4], {-0}
    f3dc:	00002327 	andeq	r2, r0, r7, lsr #6
    f3e0:	b701e708 	strlt	lr, [r1, -r8, lsl #14]
    f3e4:	15000005 	strne	r0, [r0, #-5]
    f3e8:	001fff0c 	andseq	pc, pc, ip, lsl #30
    f3ec:	01fb0800 	mvnseq	r0, r0, lsl #16
    f3f0:	000005e1 	andeq	r0, r0, r1, ror #11
    f3f4:	14720c16 	ldrbtne	r0, [r2], #-3094	; 0xfffff3ea
    f3f8:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    f3fc:	00063b02 	andeq	r3, r6, r2, lsl #22
    f400:	8b0c1800 	blhi	315408 <__ccfg+0x2f5460>
    f404:	08000020 	stmdaeq	r0, {r5}
    f408:	00b8020f 	adcseq	r0, r8, pc, lsl #4
    f40c:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    f410:	000024c9 	andeq	r2, r0, r9, asr #9
    f414:	24021008 	strcs	r1, [r2], #-8
    f418:	1c000003 	stcne	0, cr0, [r0], {3}
    f41c:	24690300 	strbtcs	r0, [r9], #-768	; 0xfffffd00
    f420:	43080000 	movwmi	r0, #32768	; 0x8000
    f424:	00000404 	andeq	r0, r0, r4, lsl #8
    f428:	00244a0b 	eoreq	r4, r4, fp, lsl #20
    f42c:	1a082800 	bne	219434 <__ccfg+0x1f948c>
    f430:	0004ef02 	andeq	lr, r4, r2, lsl #30
    f434:	1f080c00 	svcne	0x00080c00
    f438:	1b080000 	blne	20f440 <__ccfg+0x1ef498>
    f43c:	0000b802 	andeq	fp, r0, r2, lsl #16
    f440:	7b0c0000 	blvc	30f448 <__ccfg+0x2ef4a0>
    f444:	08000007 	stmdaeq	r0, {r0, r1, r2}
    f448:	00b8021d 	adcseq	r0, r8, sp, lsl r2
    f44c:	0c020000 	stceq	0, cr0, [r2], {-0}
    f450:	0000227b 	andeq	r2, r0, fp, ror r2
    f454:	6d022008 	stcvs	0, cr2, [r2, #-32]	; 0xffffffe0
    f458:	04000002 	streq	r0, [r0], #-2
    f45c:	00200a0c 	eoreq	r0, r0, ip, lsl #20
    f460:	02210800 	eoreq	r0, r1, #0, 16
    f464:	000000f4 	strdeq	r0, [r0], -r4
    f468:	22ab0c08 	adccs	r0, fp, #8, 24	; 0x800
    f46c:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    f470:	00068502 	andeq	r8, r6, r2, lsl #10
    f474:	f50c0c00 			; <UNDEFINED> instruction: 0xf50c0c00
    f478:	08000021 	stmdaeq	r0, {r0, r5}
    f47c:	06cf022d 	strbeq	r0, [pc], sp, lsr #4
    f480:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    f484:	00001efd 	strdeq	r1, [r0], -sp
    f488:	f9023308 			; <UNDEFINED> instruction: 0xf9023308
    f48c:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    f490:	0022640c 	eoreq	r6, r2, ip, lsl #8
    f494:	02380800 	eorseq	r0, r8, #0, 16
    f498:	00000723 	andeq	r0, r0, r3, lsr #14
    f49c:	20930c10 	addscs	r0, r3, r0, lsl ip
    f4a0:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    f4a4:	0000a202 	andeq	sl, r0, r2, lsl #4
    f4a8:	270c1400 	strcs	r1, [ip, -r0, lsl #8]
    f4ac:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f4b0:	074d0241 	strbeq	r0, [sp, -r1, asr #4]
    f4b4:	0c150000 	ldceq	0, cr0, [r5], {-0}
    f4b8:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    f4bc:	77025508 	strvc	r5, [r2, -r8, lsl #10]
    f4c0:	16000007 	strne	r0, [r0], -r7
    f4c4:	0014720c 	andseq	r7, r4, ip, lsl #4
    f4c8:	02680800 	rsbeq	r0, r8, #0, 16
    f4cc:	000007d1 	ldrdeq	r0, [r0], -r1
    f4d0:	208b0c18 	addcs	r0, fp, r8, lsl ip
    f4d4:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    f4d8:	0000b802 	andeq	fp, r0, r2, lsl #16
    f4dc:	c90c1a00 	stmdbgt	ip, {r9, fp, ip}
    f4e0:	08000024 	stmdaeq	r0, {r2, r5}
    f4e4:	0324026a 			; <UNDEFINED> instruction: 0x0324026a
    f4e8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    f4ec:	00001f3a 	andeq	r1, r0, sl, lsr pc
    f4f0:	b8026c08 	stmdalt	r2, {r3, sl, fp, sp, lr}
    f4f4:	20000000 	andcs	r0, r0, r0
    f4f8:	0022830c 	eoreq	r8, r2, ip, lsl #6
    f4fc:	02700800 	rsbseq	r0, r0, #0, 16
    f500:	000000ad 	andeq	r0, r0, sp, lsr #1
    f504:	23c10c22 	biccs	r0, r1, #8704	; 0x2200
    f508:	73080000 	movwvc	r0, #32768	; 0x8000
    f50c:	0000a202 	andeq	sl, r0, r2, lsl #4
    f510:	0d002400 	cfstrseq	mvf2, [r0, #-0]
    f514:	01c80801 	biceq	r0, r8, r1, lsl #16
    f518:	00000539 	andeq	r0, r0, r9, lsr r5
    f51c:	00275e0e 	eoreq	r5, r7, lr, lsl #28
    f520:	01c90800 	biceq	r0, r9, r0, lsl #16
    f524:	000000a2 	andeq	r0, r0, r2, lsr #1
    f528:	00040401 	andeq	r0, r4, r1, lsl #8
    f52c:	0020fc0e 	eoreq	pc, r0, lr, lsl #24
    f530:	01ca0800 	biceq	r0, sl, r0, lsl #16
    f534:	000000a2 	andeq	r0, r0, r2, lsr #1
    f538:	00030101 	andeq	r0, r3, r1, lsl #2
    f53c:	0021bc0e 	eoreq	fp, r1, lr, lsl #24
    f540:	01cc0800 	biceq	r0, ip, r0, lsl #16
    f544:	000000a2 	andeq	r0, r0, r2, lsr #1
    f548:	00010201 	andeq	r0, r1, r1, lsl #4
    f54c:	001f770e 	andseq	r7, pc, lr, lsl #14
    f550:	01cd0800 	biceq	r0, sp, r0, lsl #16
    f554:	000000a2 	andeq	r0, r0, r2, lsr #1
    f558:	00000101 	andeq	r0, r0, r1, lsl #2
    f55c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f560:	056301d0 	strbeq	r0, [r3, #-464]!	; 0xfffffe30
    f564:	d90e0000 	stmdble	lr, {}	; <UNPREDICTABLE>
    f568:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f56c:	00a201d1 	ldrdeq	r0, [r2], r1	; <UNPREDICTABLE>
    f570:	04010000 	streq	r0, [r1], #-0
    f574:	2d0e0004 	stccs	0, cr0, [lr, #-16]
    f578:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f57c:	00a201d2 	ldrdeq	r0, [r2], r2	; <UNPREDICTABLE>
    f580:	04010000 	streq	r0, [r1], #-0
    f584:	0d000000 	stceq	0, cr0, [r0, #-0]
    f588:	01d40802 	bicseq	r0, r4, r2, lsl #16
    f58c:	0000058d 	andeq	r0, r0, sp, lsl #11
    f590:	0022140e 	eoreq	r1, r2, lr, lsl #8
    f594:	01d50800 	bicseq	r0, r5, r0, lsl #16
    f598:	000000b8 	strheq	r0, [r0], -r8
    f59c:	000d0302 	andeq	r0, sp, r2, lsl #6
    f5a0:	0027100e 	eoreq	r1, r7, lr
    f5a4:	01d80800 	bicseq	r0, r8, r0, lsl #16
    f5a8:	000000b8 	strheq	r0, [r0], -r8
    f5ac:	00000d02 	andeq	r0, r0, r2, lsl #26
    f5b0:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    f5b4:	05b701da 	ldreq	r0, [r7, #474]!	; 0x1da
    f5b8:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    f5bc:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f5c0:	00ce01db 	ldrdeq	r0, [lr], #27
    f5c4:	04040000 	streq	r0, [r4], #-0
    f5c8:	b90e001c 	stmdblt	lr, {r2, r3, r4}
    f5cc:	08000024 	stmdaeq	r0, {r2, r5}
    f5d0:	00ce01dd 	ldrdeq	r0, [lr], #29
    f5d4:	15040000 	strne	r0, [r4, #-0]
    f5d8:	0d000003 	stceq	0, cr0, [r0, #-12]
    f5dc:	01e00801 	mvneq	r0, r1, lsl #16
    f5e0:	000005e1 	andeq	r0, r0, r1, ror #11
    f5e4:	0026050e 	eoreq	r0, r6, lr, lsl #10
    f5e8:	01e10800 	mvneq	r0, r0, lsl #16
    f5ec:	000000a2 	andeq	r0, r0, r2, lsr #1
    f5f0:	00020601 	andeq	r0, r2, r1, lsl #12
    f5f4:	001fcf0e 	andseq	ip, pc, lr, lsl #30
    f5f8:	01e30800 	mvneq	r0, r0, lsl #16
    f5fc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f600:	00000201 	andeq	r0, r0, r1, lsl #4
    f604:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f608:	063b01e8 	ldrteq	r0, [fp], -r8, ror #3
    f60c:	b20e0000 	andlt	r0, lr, #0
    f610:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f614:	00b801e9 	adcseq	r0, r8, r9, ror #3
    f618:	06020000 	streq	r0, [r2], -r0
    f61c:	4e0e000a 	cdpmi	0, 0, cr0, cr14, cr10, {0}
    f620:	08000022 	stmdaeq	r0, {r1, r5}
    f624:	00b801ea 	adcseq	r0, r8, sl, ror #3
    f628:	01020000 	mrseq	r0, (UNDEF: 2)
    f62c:	1a0e0009 	bne	38f658 <__ccfg+0x36f6b0>
    f630:	08000024 	stmdaeq	r0, {r2, r5}
    f634:	00b801ec 	adcseq	r0, r8, ip, ror #3
    f638:	01020000 	mrseq	r0, (UNDEF: 2)
    f63c:	b70e0008 	strlt	r0, [lr, -r8]
    f640:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f644:	00b801ee 	adcseq	r0, r8, lr, ror #3
    f648:	04020000 	streq	r0, [r2], #-0
    f64c:	5a0e0004 	bpl	38f664 <__ccfg+0x36f6bc>
    f650:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f654:	00b801f3 	ldrshteq	r0, [r8], r3
    f658:	03020000 	movweq	r0, #8192	; 0x2000
    f65c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f660:	01fc0802 	mvnseq	r0, r2, lsl #16
    f664:	00000685 	andeq	r0, r0, r5, lsl #13
    f668:	0021af0e 	eoreq	sl, r1, lr, lsl #30
    f66c:	01fd0800 	mvnseq	r0, r0, lsl #16
    f670:	000000b8 	strheq	r0, [r0], -r8
    f674:	000d0302 	andeq	r0, sp, r2, lsl #6
    f678:	00214e0e 	eoreq	r4, r1, lr, lsl #28
    f67c:	02030800 	andeq	r0, r3, #0, 16
    f680:	000000b8 	strheq	r0, [r0], -r8
    f684:	000c0102 	andeq	r0, ip, r2, lsl #2
    f688:	0020ee0e 	eoreq	lr, r0, lr, lsl #28
    f68c:	02050800 	andeq	r0, r5, #0, 16
    f690:	000000b8 	strheq	r0, [r0], -r8
    f694:	00060602 	andeq	r0, r6, r2, lsl #12
    f698:	0023ed0e 	eoreq	lr, r3, lr, lsl #26
    f69c:	020c0800 	andeq	r0, ip, #0, 16
    f6a0:	000000b8 	strheq	r0, [r0], -r8
    f6a4:	00050102 	andeq	r0, r5, r2, lsl #2
    f6a8:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f6ac:	06cf0222 	strbeq	r0, [pc], r2, lsr #4
    f6b0:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    f6b4:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f6b8:	00a20223 	adceq	r0, r2, r3, lsr #4
    f6bc:	04010000 	streq	r0, [r1], #-0
    f6c0:	fc0e0004 	stc2	0, cr0, [lr], {4}
    f6c4:	08000020 	stmdaeq	r0, {r5}
    f6c8:	00a20224 	adceq	r0, r2, r4, lsr #4
    f6cc:	01010000 	mrseq	r0, (UNDEF: 1)
    f6d0:	bc0e0003 	stclt	0, cr0, [lr], {3}
    f6d4:	08000021 	stmdaeq	r0, {r0, r5}
    f6d8:	00a20226 	adceq	r0, r2, r6, lsr #4
    f6dc:	02010000 	andeq	r0, r1, #0
    f6e0:	770e0001 	strvc	r0, [lr, -r1]
    f6e4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f6e8:	00a20227 	adceq	r0, r2, r7, lsr #4
    f6ec:	01010000 	mrseq	r0, (UNDEF: 1)
    f6f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    f6f4:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    f6f8:	000006f9 	strdeq	r0, [r0], -r9
    f6fc:	0025d90e 	eoreq	sp, r5, lr, lsl #18
    f700:	022b0800 	eoreq	r0, fp, #0, 16
    f704:	000000a2 	andeq	r0, r0, r2, lsr #1
    f708:	00040401 	andeq	r0, r4, r1, lsl #8
    f70c:	00272d0e 	eoreq	r2, r7, lr, lsl #26
    f710:	022c0800 	eoreq	r0, ip, #0, 16
    f714:	000000a2 	andeq	r0, r0, r2, lsr #1
    f718:	00000401 	andeq	r0, r0, r1, lsl #8
    f71c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f720:	0723022e 	streq	r0, [r3, -lr, lsr #4]!
    f724:	140e0000 	strne	r0, [lr], #-0
    f728:	08000022 	stmdaeq	r0, {r1, r5}
    f72c:	00b8022f 	adcseq	r0, r8, pc, lsr #4
    f730:	03020000 	movweq	r0, #8192	; 0x2000
    f734:	100e000d 	andne	r0, lr, sp
    f738:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f73c:	00b80232 	adcseq	r0, r8, r2, lsr r2
    f740:	0d020000 	stceq	0, cr0, [r2, #-0]
    f744:	0d000000 	stceq	0, cr0, [r0, #-0]
    f748:	02340804 	eorseq	r0, r4, #4, 16	; 0x40000
    f74c:	0000074d 	andeq	r0, r0, sp, asr #14
    f750:	0023a90e 	eoreq	sl, r3, lr, lsl #18
    f754:	02350800 	eorseq	r0, r5, #0, 16
    f758:	000000ce 	andeq	r0, r0, lr, asr #1
    f75c:	001c0404 	andseq	r0, ip, r4, lsl #8
    f760:	0024b90e 	eoreq	fp, r4, lr, lsl #18
    f764:	02370800 	eorseq	r0, r7, #0, 16
    f768:	000000ce 	andeq	r0, r0, lr, asr #1
    f76c:	00031504 	andeq	r1, r3, r4, lsl #10
    f770:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f774:	0777023a 			; <UNDEFINED> instruction: 0x0777023a
    f778:	050e0000 	streq	r0, [lr, #-0]
    f77c:	08000026 	stmdaeq	r0, {r1, r2, r5}
    f780:	00a2023b 	adceq	r0, r2, fp, lsr r2
    f784:	06010000 	streq	r0, [r1], -r0
    f788:	cf0e0002 	svcgt	0x000e0002
    f78c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f790:	00a2023d 	adceq	r0, r2, sp, lsr r2
    f794:	02010000 	andeq	r0, r1, #0
    f798:	0d000000 	stceq	0, cr0, [r0, #-0]
    f79c:	02420802 	subeq	r0, r2, #131072	; 0x20000
    f7a0:	000007d1 	ldrdeq	r0, [r0], -r1
    f7a4:	0023b20e 	eoreq	fp, r3, lr, lsl #4
    f7a8:	02430800 	subeq	r0, r3, #0, 16
    f7ac:	000000b8 	strheq	r0, [r0], -r8
    f7b0:	000a0602 	andeq	r0, sl, r2, lsl #12
    f7b4:	00224e0e 	eoreq	r4, r2, lr, lsl #28
    f7b8:	02440800 	subeq	r0, r4, #0, 16
    f7bc:	000000b8 	strheq	r0, [r0], -r8
    f7c0:	00090102 	andeq	r0, r9, r2, lsl #2
    f7c4:	00241a0e 	eoreq	r1, r4, lr, lsl #20
    f7c8:	02460800 	subeq	r0, r6, #0, 16
    f7cc:	000000b8 	strheq	r0, [r0], -r8
    f7d0:	00080102 	andeq	r0, r8, r2, lsl #2
    f7d4:	001fb70e 	andseq	fp, pc, lr, lsl #14
    f7d8:	02480800 	subeq	r0, r8, #0, 16
    f7dc:	000000b8 	strheq	r0, [r0], -r8
    f7e0:	00040402 	andeq	r0, r4, r2, lsl #8
    f7e4:	001f5a0e 	andseq	r5, pc, lr, lsl #20
    f7e8:	024d0800 	subeq	r0, sp, #0, 16
    f7ec:	000000b8 	strheq	r0, [r0], -r8
    f7f0:	00000302 	andeq	r0, r0, r2, lsl #6
    f7f4:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f7f8:	081b0256 	ldmdaeq	fp, {r1, r2, r4, r6, r9}
    f7fc:	af0e0000 	svcge	0x000e0000
    f800:	08000021 	stmdaeq	r0, {r0, r5}
    f804:	00b80257 	adcseq	r0, r8, r7, asr r2
    f808:	03020000 	movweq	r0, #8192	; 0x2000
    f80c:	4e0e000d 	cdpmi	0, 0, cr0, cr14, cr13, {0}
    f810:	08000021 	stmdaeq	r0, {r0, r5}
    f814:	00b8025d 	adcseq	r0, r8, sp, asr r2
    f818:	01020000 	mrseq	r0, (UNDEF: 2)
    f81c:	ee0e000c 	cdp	0, 0, cr0, cr14, cr12, {0}
    f820:	08000020 	stmdaeq	r0, {r5}
    f824:	00b8025f 	adcseq	r0, r8, pc, asr r2
    f828:	06020000 	streq	r0, [r2], -r0
    f82c:	ed0e0006 	stc	0, cr0, [lr, #-24]	; 0xffffffe8
    f830:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f834:	00b80266 	adcseq	r0, r8, r6, ror #4
    f838:	01020000 	mrseq	r0, (UNDEF: 2)
    f83c:	09000005 	stmdbeq	r0, {r0, r2}
    f840:	54480210 	strbpl	r0, [r8], #-528	; 0xfffffdf0
    f844:	08000008 	stmdaeq	r0, {r3}
    f848:	00002174 	andeq	r2, r0, r4, ror r1
    f84c:	00ce4902 	sbceq	r4, lr, r2, lsl #18
    f850:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f854:	000020d5 	ldrdeq	r2, [r0], -r5
    f858:	00ce4a02 	sbceq	r4, lr, r2, lsl #20
    f85c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    f860:	00002520 	andeq	r2, r0, r0, lsr #10
    f864:	00ce4b02 	sbceq	r4, lr, r2, lsl #22
    f868:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    f86c:	00002673 	andeq	r2, r0, r3, ror r6
    f870:	00ce4c02 	sbceq	r4, lr, r2, lsl #24
    f874:	000c0000 	andeq	r0, ip, r0
    f878:	001f8003 	andseq	r8, pc, r3
    f87c:	1b4d0200 	blne	1350084 <__ccfg+0x13300dc>
    f880:	0f000008 	svceq	0x00000008
    f884:	00003482 	andeq	r3, r0, r2, lsl #9
    f888:	03013e02 	movweq	r3, #7682	; 0x1e02
    f88c:	0032e410 	eorseq	lr, r2, r0, lsl r4
    f890:	01140200 	tsteq	r4, r0, lsl #4
    f894:	000000ce 	andeq	r0, r0, lr, asr #1
    f898:	00000000 	andeq	r0, r0, r0
    f89c:	00000014 	andeq	r0, r0, r4, lsl r0
    f8a0:	08909c01 	ldmeq	r0, {r0, sl, fp, ip, pc}
    f8a4:	9c110000 	ldcls	0, cr0, [r1], {-0}
    f8a8:	01000033 	tsteq	r0, r3, lsr r0
    f8ac:	0000ce6a 	andeq	ip, r0, sl, ror #28
    f8b0:	00500100 	subseq	r0, r0, r0, lsl #2
    f8b4:	00346a10 	eorseq	r6, r4, r0, lsl sl
    f8b8:	014c0200 	mrseq	r0, (UNDEF: 108)
    f8bc:	000000ce 	andeq	r0, r0, lr, asr #1
    f8c0:	00003a68 	andeq	r3, r0, r8, ror #20
    f8c4:	00000028 	andeq	r0, r0, r8, lsr #32
    f8c8:	08d89c01 	ldmeq	r8, {r0, sl, fp, ip, pc}^
    f8cc:	70120000 	andsvc	r0, r2, r0
    f8d0:	0100704f 	tsteq	r0, pc, asr #32
    f8d4:	0000ce7a 	andeq	ip, r0, sl, ror lr
    f8d8:	003b9700 	eorseq	r9, fp, r0, lsl #14
    f8dc:	085f1300 	ldmdaeq	pc, {r8, r9, ip}^	; <UNPREDICTABLE>
    f8e0:	3a700000 	bcc	1c0f8e8 <__ccfg+0x1bef940>
    f8e4:	00040000 	andeq	r0, r4, r0
    f8e8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    f8ec:	00085f13 	andeq	r5, r8, r3, lsl pc
    f8f0:	003a7c00 	eorseq	r7, sl, r0, lsl #24
    f8f4:	00000600 	andeq	r0, r0, r0, lsl #12
    f8f8:	00830100 	addeq	r0, r3, r0, lsl #2
    f8fc:	00336c14 	eorseq	r6, r3, r4, lsl ip
    f900:	01540200 	cmpeq	r4, r0, lsl #4
    f904:	00003a90 	muleq	r0, r0, sl
    f908:	0000004c 	andeq	r0, r0, ip, asr #32
    f90c:	99159c01 	ldmdbls	r5, {r0, sl, fp, ip, pc}
    f910:	02000034 	andeq	r0, r0, #52	; 0x34
    f914:	3adc015c 	bcc	ff70fe8c <_estack+0xdf70ae8c>
    f918:	01500000 	cmpeq	r0, r0
    f91c:	9c010000 	stcls	0, cr0, [r1], {-0}
    f920:	0000092a 	andeq	r0, r0, sl, lsr #18
    f924:	00339316 	eorseq	r9, r3, r6, lsl r3
    f928:	6da40100 	stfvss	f0, [r4]
    f92c:	01000002 	tsteq	r0, r2
    f930:	33e91650 	mvncc	r1, #80, 12	; 0x5000000
    f934:	a4010000 	strge	r0, [r1], #-0
    f938:	0000092a 	andeq	r0, r0, sl, lsr #18
    f93c:	91175101 	tstls	r7, r1, lsl #2
    f940:	01000034 	tsteq	r0, r4, lsr r0
    f944:	000094a6 	andeq	r9, r0, r6, lsr #9
    f948:	003bb800 	eorseq	fp, fp, r0, lsl #16
    f94c:	04060000 	streq	r0, [r6], #-0
    f950:	00000854 	andeq	r0, r0, r4, asr r8
    f954:	00345b15 	eorseq	r5, r4, r5, lsl fp
    f958:	016c0200 	cmneq	ip, r0, lsl #4
    f95c:	00003c2c 	andeq	r3, r0, ip, lsr #24
    f960:	00000118 	andeq	r0, r0, r8, lsl r1
    f964:	09ac9c01 	stmibeq	ip!, {r0, sl, fp, ip, pc}
    f968:	93180000 	tstls	r8, #0
    f96c:	01000033 	tsteq	r0, r3, lsr r0
    f970:	00026df3 	strdeq	r6, [r2], -r3
    f974:	003bd600 	eorseq	sp, fp, r0, lsl #12
    f978:	34911700 	ldrcc	r1, [r1], #1792	; 0x700
    f97c:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    f980:	000000c3 	andeq	r0, r0, r3, asr #1
    f984:	00003bf7 	strdeq	r3, [r0], -r7
    f988:	00344f17 	eorseq	r4, r4, r7, lsl pc
    f98c:	cef60100 	cdpgt	1, 15, cr0, cr6, cr0, {0}
    f990:	46000000 	strmi	r0, [r0], -r0
    f994:	1700003c 	smladxne	r0, ip, r0, r0
    f998:	000032ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    f99c:	0324f701 	msreq	CPSR_s, #262144	; 0x40000
    f9a0:	3c900000 	ldccc	0, cr0, [r0], {0}
    f9a4:	10190000 	andsne	r0, r9, r0
    f9a8:	01000033 	tsteq	r0, r3, lsr r0
    f9ac:	0000c3f8 	strdeq	ip, [r0], -r8
    f9b0:	33f11700 	mvnscc	r1, #0, 14
    f9b4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    f9b8:	000000ce 	andeq	r0, r0, lr, asr #1
    f9bc:	00003cd3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    f9c0:	00338417 	eorseq	r8, r3, r7, lsl r4
    f9c4:	cefa0100 	cdpgt	1, 15, cr0, cr10, cr0, {0}
    f9c8:	2b000000 	blcs	f9d0 <__exidx_end+0x9ef4>
    f9cc:	0000003d 	andeq	r0, r0, sp, lsr r0
    f9d0:	00335915 	eorseq	r5, r3, r5, lsl r9
    f9d4:	01640200 	cmneq	r4, r0, lsl #4
    f9d8:	00003d44 	andeq	r3, r0, r4, asr #26
    f9dc:	00000020 	andeq	r0, r0, r0, lsr #32
    f9e0:	09d39c01 	ldmibeq	r3, {r0, sl, fp, ip, pc}^
    f9e4:	e91a0000 	ldmdb	sl, {}	; <UNPREDICTABLE>
    f9e8:	01000033 	tsteq	r0, r3, lsr r0
    f9ec:	092a0177 	stmdbeq	sl!, {r0, r1, r2, r4, r5, r6, r8}
    f9f0:	3d610000 	stclcc	0, cr0, [r1, #-0]
    f9f4:	15000000 	strne	r0, [r0, #-0]
    f9f8:	000033b7 			; <UNDEFINED> instruction: 0x000033b7
    f9fc:	00017402 	andeq	r7, r1, r2, lsl #8
    fa00:	60000000 	andvs	r0, r0, r0
    fa04:	01000000 	mrseq	r0, (UNDEF: 0)
    fa08:	000a379c 	muleq	sl, ip, r7
    fa0c:	26511b00 	ldrbcs	r1, [r1], -r0, lsl #22
    fa10:	84010000 	strhi	r0, [r1], #-0
    fa14:	0000ff01 	andeq	pc, r0, r1, lsl #30
    fa18:	00033800 	andeq	r3, r3, r0, lsl #16
    fa1c:	210f1b21 	tstcs	pc, r1, lsr #22
    fa20:	85010000 	strhi	r0, [r1, #-0]
    fa24:	00032401 	andeq	r2, r3, r1, lsl #8
    fa28:	0003bc00 	andeq	fp, r3, r0, lsl #24
    fa2c:	00691c21 	rsbeq	r1, r9, r1, lsr #24
    fa30:	94018901 	strls	r8, [r1], #-2305	; 0xfffff6ff
    fa34:	8f000000 	svchi	0x00000000
    fa38:	1d00003d 	stcne	0, cr0, [r0, #-244]	; 0xffffff0c
    fa3c:	00000000 	andeq	r0, r0, r0
    fa40:	00000a9c 	muleq	r0, ip, sl
    fa44:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    fa48:	011e8408 	tsteq	lr, r8, lsl #8
    fa4c:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    fa50:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    fa54:	0003380c 	andeq	r3, r3, ip, lsl #16
    fa58:	15000021 	strne	r0, [r0, #-33]	; 0xffffffdf
    fa5c:	0000331f 	andeq	r3, r0, pc, lsl r3
    fa60:	64017c02 	strvs	r7, [r1], #-3074	; 0xfffff3fe
    fa64:	1c00003d 	stcne	0, cr0, [r0], {61}	; 0x3d
    fa68:	01000000 	mrseq	r0, (UNDEF: 0)
    fa6c:	000a5c9c 	muleq	sl, ip, ip
    fa70:	34471f00 	strbcc	r1, [r7], #-3840	; 0xfffff100
    fa74:	96010000 	strls	r0, [r1], -r0
    fa78:	000a5c01 	andeq	r5, sl, r1, lsl #24
    fa7c:	00500100 	subseq	r0, r0, r0, lsl #2
    fa80:	aa020102 	bge	8fe90 <__ccfg+0x6fee8>
    fa84:	2000000c 	andcs	r0, r0, ip
    fa88:	000000b8 	strheq	r0, [r0], -r8
    fa8c:	00000a73 	andeq	r0, r0, r3, ror sl
    fa90:	0000e421 	andeq	lr, r0, r1, lsr #8
    fa94:	22000b00 	andcs	r0, r0, #0, 22
    fa98:	000033a4 	andeq	r3, r0, r4, lsr #7
    fa9c:	0a975201 	beq	fe5e42a8 <_estack+0xde5df2a8>
    faa0:	c3180000 	tstgt	r8, #0
    faa4:	5d3a3d3b 	ldcpl	13, cr3, [sl, #-236]!	; 0xffffff14
    faa8:	a13a713a 	teqge	sl, sl, lsr r1
    faac:	0f3a8f0a 	svceq	0x003a8f0a
    fab0:	4909b33b 	stmdbmi	r9, {r0, r1, r3, r4, r5, r8, r9, ip, sp, pc}
    fab4:	2f0a855e 	svccs	0x000a855e
    fab8:	233b853b 	teqcs	fp, #247463936	; 0xec00000
    fabc:	00000a63 	andeq	r0, r0, r3, ror #20
    fac0:	00169724 	andseq	r9, r6, r4, lsr #14
    fac4:	eb190900 	bl	651ecc <__ccfg+0x631f24>
    fac8:	25000000 	strcs	r0, [r0, #-0]
    facc:	000000eb 	andeq	r0, r0, fp, ror #1
    fad0:	00009425 	andeq	r9, r0, r5, lsr #8
    fad4:	00d92500 	sbcseq	r2, r9, r0, lsl #10
    fad8:	00000000 	andeq	r0, r0, r0
    fadc:	00000207 	andeq	r0, r0, r7, lsl #4
    fae0:	381e0004 	ldmdacc	lr, {r2}
    fae4:	01040000 	mrseq	r0, (UNDEF: 4)
    fae8:	00002a34 	andeq	r2, r0, r4, lsr sl
    faec:	00356901 	eorseq	r6, r5, r1, lsl #18
    faf0:	002afb00 	eoreq	pc, sl, r0, lsl #22
    faf4:	00123000 	andseq	r3, r2, r0
    faf8:	00000000 	andeq	r0, r0, r0
    fafc:	00802100 	addeq	r2, r0, r0, lsl #2
    fb00:	06010200 	streq	r0, [r1], -r0, lsl #4
    fb04:	00000c60 	andeq	r0, r0, r0, ror #24
    fb08:	5e080102 	adfple	f0, f0, f2
    fb0c:	0200000c 	andeq	r0, r0, #12
    fb10:	0a6e0502 	beq	1b90f20 <__ccfg+0x1b70f78>
    fb14:	02020000 	andeq	r0, r2, #0
    fb18:	000d5b07 	andeq	r5, sp, r7, lsl #22
    fb1c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    fb20:	00000800 	andeq	r0, r0, r0, lsl #16
    fb24:	0029a703 	eoreq	sl, r9, r3, lsl #14
    fb28:	53410300 	movtpl	r0, #4864	; 0x1300
    fb2c:	02000000 	andeq	r0, r0, #0
    fb30:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
    fb34:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fb38:	0007fb05 	andeq	pc, r7, r5, lsl #22
    fb3c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    fb40:	00000423 	andeq	r0, r0, r3, lsr #8
    fb44:	69050404 	stmdbvs	r5, {r2, sl}
    fb48:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    fb4c:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
    fb50:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    fb54:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    fb58:	00004820 	andeq	r4, r0, r0, lsr #16
    fb5c:	35c60500 	strbcc	r0, [r6, #1280]	; 0x500
    fb60:	30020000 	andcc	r0, r2, r0
    fb64:	31060303 	tstcc	r6, r3, lsl #6
    fb68:	01000036 	tsteq	r0, r6, lsr r0
    fb6c:	d90501fd 	stmdble	r5, {r0, r2, r3, r4, r5, r6, r7, r8}
    fb70:	01000035 	tsteq	r0, r5, lsr r0
    fb74:	07010182 	streq	r0, [r1, -r2, lsl #3]
    fb78:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
    fb7c:	80010d01 	andhi	r0, r1, r1, lsl #26
    fb80:	d400003d 	strle	r0, [r0], #-61	; 0xffffffc3
    fb84:	01000000 	mrseq	r0, (UNDEF: 0)
    fb88:	00016d9c 	muleq	r1, ip, sp
    fb8c:	35b40800 	ldrcc	r0, [r4, #2048]!	; 0x800
    fb90:	0d010000 	stceq	0, cr0, [r1, #-0]
    fb94:	00007601 	andeq	r7, r0, r1, lsl #12
    fb98:	003e3300 	eorseq	r3, lr, r0, lsl #6
    fb9c:	36200900 	strtcc	r0, [r0], -r0, lsl #18
    fba0:	0f010000 	svceq	0x00010000
    fba4:	00007601 	andeq	r7, r0, r1, lsl #12
    fba8:	003e5f00 	eorseq	r5, lr, r0, lsl #30
    fbac:	34ad0900 	strtcc	r0, [sp], #2304	; 0x900
    fbb0:	10010000 	andne	r0, r1, r0
    fbb4:	00007601 	andeq	r7, r0, r1, lsl #12
    fbb8:	003e7200 	eorseq	r7, lr, r0, lsl #4
    fbbc:	00810a00 	addeq	r0, r1, r0, lsl #20
    fbc0:	3db20000 	ldccc	0, cr0, [r2]
    fbc4:	00060000 	andeq	r0, r6, r0
    fbc8:	36010000 	strcc	r0, [r1], -r0
    fbcc:	3dd80b01 	vldrcc	d16, [r8, #4]
    fbd0:	002a0000 	eoreq	r0, sl, r0
    fbd4:	011f0000 	tsteq	pc, r0
    fbd8:	a6090000 	strge	r0, [r9], -r0
    fbdc:	01000036 	tsteq	r0, r6, lsr r0
    fbe0:	00760153 	rsbseq	r0, r6, r3, asr r1
    fbe4:	3e8b0000 	cdpcc	0, 8, cr0, cr11, cr0, {0}
    fbe8:	02090000 	andeq	r0, r9, #0
    fbec:	01000036 	tsteq	r0, r6, lsr r0
    fbf0:	00760154 	rsbseq	r0, r6, r4, asr r1
    fbf4:	3e9e0000 	cdpcc	0, 9, cr0, cr14, cr0, {0}
    fbf8:	0c000000 	stceq	0, cr0, [r0], {-0}
    fbfc:	00003dc2 	andeq	r3, r0, r2, asr #27
    fc00:	000001c3 	andeq	r0, r0, r3, asr #3
    fc04:	00000133 	andeq	r0, r0, r3, lsr r1
    fc08:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fc0c:	0c000074 	stceq	0, cr0, [r0], {116}	; 0x74
    fc10:	00003dca 	andeq	r3, r0, sl, asr #27
    fc14:	000001d4 	ldrdeq	r0, [r0], -r4
    fc18:	0000014d 	andeq	r0, r0, sp, asr #2
    fc1c:	0251010d 	subseq	r0, r1, #1073741827	; 0x40000003
    fc20:	010d0074 	tsteq	sp, r4, ror r0
    fc24:	00750250 	rsbseq	r0, r5, r0, asr r2
    fc28:	3e080c00 	cdpcc	12, 0, cr0, cr8, cr0, {0}
    fc2c:	01ea0000 	mvneq	r0, r0
    fc30:	01610000 	cmneq	r1, r0
    fc34:	010d0000 	mrseq	r0, (UNDEF: 13)
    fc38:	00740250 	rsbseq	r0, r4, r0, asr r2
    fc3c:	3e120e00 	cdpcc	14, 1, cr0, cr2, cr0, {0}
    fc40:	010d0000 	mrseq	r0, (UNDEF: 13)
    fc44:	00320150 	eorseq	r0, r2, r0, asr r1
    fc48:	35ec0f00 	strbcc	r0, [ip, #3840]!	; 0xf00
    fc4c:	5f070000 	svcpl	0x00070000
    fc50:	00003e54 	andeq	r3, r0, r4, asr lr
    fc54:	000000a4 	andeq	r0, r0, r4, lsr #1
    fc58:	01c39c01 	biceq	r9, r3, r1, lsl #24
    fc5c:	b4100000 	ldrlt	r0, [r0], #-0
    fc60:	01000035 	tsteq	r0, r5, lsr r0
    fc64:	00007672 	andeq	r7, r0, r2, ror r6
    fc68:	003ec900 	eorseq	ip, lr, r0, lsl #18
    fc6c:	360d1000 	strcc	r1, [sp], -r0
    fc70:	73010000 	movwvc	r0, #4096	; 0x1000
    fc74:	00000076 	andeq	r0, r0, r6, ror r0
    fc78:	00003edc 	ldrdeq	r3, [r0], -ip
    fc7c:	003e6411 	eorseq	r6, lr, r1, lsl r4
    fc80:	0001fb00 	andeq	pc, r1, r0, lsl #22
    fc84:	3e781100 	rpwcce	f1, f0, f0
    fc88:	02030000 	andeq	r0, r3, #0
    fc8c:	88120000 	ldmdahi	r2, {}	; <UNPREDICTABLE>
    fc90:	9b00003e 	blls	fd90 <__exidx_end+0xa2b4>
    fc94:	0d000000 	stceq	0, cr0, [r0, #-0]
    fc98:	74025001 	strvc	r5, [r2], #-1
    fc9c:	13000000 	movwne	r0, #0
    fca0:	000034d9 	ldrdeq	r3, [r0], -r9
    fca4:	01d46c05 	bicseq	r6, r4, r5, lsl #24
    fca8:	76140000 	ldrvc	r0, [r4], -r0
    fcac:	00000000 	andeq	r0, r0, r0
    fcb0:	00350913 	eorseq	r0, r5, r3, lsl r9
    fcb4:	ea730500 	b	1cd10bc <__ccfg+0x1cb1114>
    fcb8:	14000001 	strne	r0, [r0], #-1
    fcbc:	00000076 	andeq	r0, r0, r6, ror r0
    fcc0:	00007614 	andeq	r7, r0, r4, lsl r6
    fcc4:	39130000 	ldmdbcc	r3, {}	; <UNPREDICTABLE>
    fcc8:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    fccc:	0001fb7a 	andeq	pc, r1, sl, ror fp	; <UNPREDICTABLE>
    fcd0:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fcd4:	15000000 	strne	r0, [r0, #-0]
    fcd8:	00003669 	andeq	r3, r0, r9, ror #12
    fcdc:	16024306 	strne	r4, [r2], -r6, lsl #6
    fce0:	00003586 	andeq	r3, r0, r6, lsl #11
    fce4:	1700fd05 	strne	pc, [r0, -r5, lsl #26]
    fce8:	0400000b 	streq	r0, [r0], #-11
    fcec:	00396000 	eorseq	r6, r9, r0
    fcf0:	34010400 	strcc	r0, [r1], #-1024	; 0xfffffc00
    fcf4:	0100002a 	tsteq	r0, sl, lsr #32
    fcf8:	000038e9 	andeq	r3, r0, r9, ror #17
    fcfc:	00002afb 	strdeq	r2, [r0], -fp
    fd00:	00001278 	andeq	r1, r0, r8, ror r2
    fd04:	00000000 	andeq	r0, r0, r0
    fd08:	0000820e 	andeq	r8, r0, lr, lsl #4
    fd0c:	60060102 	andvs	r0, r6, r2, lsl #2
    fd10:	0200000c 	andeq	r0, r0, #12
    fd14:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
    fd18:	02020000 	andeq	r0, r2, #0
    fd1c:	000a6e05 	andeq	r6, sl, r5, lsl #28
    fd20:	07020200 	streq	r0, [r2, -r0, lsl #4]
    fd24:	00000d5b 	andeq	r0, r0, fp, asr sp
    fd28:	002b9403 	eoreq	r9, fp, r3, lsl #8
    fd2c:	4c3f0400 	cfldrsmi	mvf0, [pc], #-0	; fd34 <__exidx_end+0xa258>
    fd30:	02000000 	andeq	r0, r0, #0
    fd34:	08000504 	stmdaeq	r0, {r2, r8, sl}
    fd38:	a7030000 	strge	r0, [r3, -r0]
    fd3c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    fd40:	00005e41 	andeq	r5, r0, r1, asr #28
    fd44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fd48:	00000428 	andeq	r0, r0, r8, lsr #8
    fd4c:	fb050802 	blx	151d5e <__ccfg+0x131db6>
    fd50:	02000007 	andeq	r0, r0, #7
    fd54:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
    fd58:	04040000 	streq	r0, [r4], #-0
    fd5c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fd60:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fd64:	0000042d 	andeq	r0, r0, sp, lsr #8
    fd68:	002b9603 	eoreq	r9, fp, r3, lsl #12
    fd6c:	411f0500 	tstmi	pc, r0, lsl #10
    fd70:	03000000 	movweq	r0, #0
    fd74:	000029a9 	andeq	r2, r0, r9, lsr #19
    fd78:	00532005 	subseq	r2, r3, r5
    fd7c:	7c050000 	stcvc	0, cr0, [r5], {-0}
    fd80:	02000039 	andeq	r0, r0, #57	; 0x39
    fd84:	000081e9 	andeq	r8, r0, r9, ror #3
    fd88:	00be0300 	adcseq	r0, lr, r0, lsl #6
    fd8c:	cc060000 	stcgt	0, cr0, [r6], {-0}
    fd90:	02000036 	andeq	r0, r0, #54	; 0x36
    fd94:	00008ce9 	andeq	r8, r0, r9, ror #25
    fd98:	39d50700 	ldmibcc	r5, {r8, r9, sl}^
    fd9c:	ef020000 	svc	0x00020000
    fda0:	00000081 	andeq	r0, r0, r1, lsl #1
    fda4:	37010800 	strcc	r0, [r1, -r0, lsl #16]
    fda8:	ab020000 	blge	8fdb0 <__ccfg+0x6fe08>
    fdac:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdb0:	0000e701 	andeq	lr, r0, r1, lsl #14
    fdb4:	35b40900 	ldrcc	r0, [r4, #2304]!	; 0x900
    fdb8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    fdbc:	00008c03 	andeq	r8, r0, r3, lsl #24
    fdc0:	3a5e0a00 	bcc	17925c8 <__ccfg+0x1772620>
    fdc4:	2b010000 	blcs	4fdcc <__ccfg+0x2fe24>
    fdc8:	00008c03 	andeq	r8, r0, r3, lsl #24
    fdcc:	b4080000 	strlt	r0, [r8], #-0
    fdd0:	02000039 	andeq	r0, r0, #57	; 0x39
    fdd4:	00008c81 	andeq	r8, r0, r1, lsl #25
    fdd8:	01100100 	tsteq	r0, r0, lsl #2
    fddc:	b4090000 	strlt	r0, [r9], #-0
    fde0:	01000035 	tsteq	r0, r5, lsr r0
    fde4:	008c033c 	addeq	r0, ip, ip, lsr r3
    fde8:	250a0000 	strcs	r0, [sl, #-0]
    fdec:	0100003a 	tsteq	r0, sl, lsr r0
    fdf0:	008c033e 	addeq	r0, ip, lr, lsr r3
    fdf4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fdf8:	00003862 	andeq	r3, r0, r2, ror #16
    fdfc:	008c8802 	addeq	r8, ip, r2, lsl #16
    fe00:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    fe04:	09000001 	stmdbeq	r0, {r0}
    fe08:	000035b4 			; <UNDEFINED> instruction: 0x000035b4
    fe0c:	8c034f01 	stchi	15, cr4, [r3], {1}
    fe10:	0a000000 	beq	fe18 <__exidx_end+0xa33c>
    fe14:	00003999 	muleq	r0, r9, r9
    fe18:	8c035101 	stfhis	f5, [r3], {1}
    fe1c:	00000000 	andeq	r0, r0, r0
    fe20:	0037c608 	eorseq	ip, r7, r8, lsl #12
    fe24:	8cc80200 	sfmhi	f0, 2, [r8], {0}
    fe28:	01000000 	mrseq	r0, (UNDEF: 0)
    fe2c:	0000016e 	andeq	r0, r0, lr, ror #2
    fe30:	0035b409 	eorseq	fp, r5, r9, lsl #8
    fe34:	03620100 	cmneq	r2, #0, 2
    fe38:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe3c:	0037560a 	eorseq	r5, r7, sl, lsl #12
    fe40:	03640100 	cmneq	r4, #0, 2
    fe44:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe48:	0038970a 	eorseq	r9, r8, sl, lsl #14
    fe4c:	03650100 	cmneq	r5, #0, 2
    fe50:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe54:	38c90800 	stmiacc	r9, {fp}^
    fe58:	b2020000 	andlt	r0, r2, #0
    fe5c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe60:	0001a301 	andeq	sl, r1, r1, lsl #6
    fe64:	35b40900 	ldrcc	r0, [r4, #2304]!	; 0x900
    fe68:	94010000 	strls	r0, [r1], #-0
    fe6c:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe70:	37e50a00 	strbcc	r0, [r5, r0, lsl #20]!
    fe74:	96010000 	strls	r0, [r1], -r0
    fe78:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe7c:	38970a00 	ldmcc	r7, {r9, fp}
    fe80:	97010000 	strls	r0, [r1, -r0]
    fe84:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe88:	94080000 	strls	r0, [r8], #-0
    fe8c:	02000037 	andeq	r0, r0, #55	; 0x37
    fe90:	00008cb9 			; <UNDEFINED> instruction: 0x00008cb9
    fe94:	01cc0100 	biceq	r0, ip, r0, lsl #2
    fe98:	b4090000 	strlt	r0, [r9], #-0
    fe9c:	01000035 	tsteq	r0, r5, lsr r0
    fea0:	008c03b4 			; <UNDEFINED> instruction: 0x008c03b4
    fea4:	a10a0000 	mrsge	r0, (UNDEF: 10)
    fea8:	01000038 	tsteq	r0, r8, lsr r0
    feac:	008c03b6 			; <UNDEFINED> instruction: 0x008c03b6
    feb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    feb4:	0000393f 	andeq	r3, r0, pc, lsr r9
    feb8:	008cdf02 	addeq	sp, ip, r2, lsl #30
    febc:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    fec0:	09000001 	stmdbeq	r0, {r0}
    fec4:	000035b4 			; <UNDEFINED> instruction: 0x000035b4
    fec8:	8c03c801 	stchi	8, cr12, [r3], {1}
    fecc:	0a000000 	beq	fed4 <__exidx_end+0xa3f8>
    fed0:	00003a7e 	andeq	r3, r0, lr, ror sl
    fed4:	8c03ca01 			; <UNDEFINED> instruction: 0x8c03ca01
    fed8:	00000000 	andeq	r0, r0, r0
    fedc:	0039ff08 	eorseq	pc, r9, r8, lsl #30
    fee0:	8cd70200 	lfmhi	f0, 2, [r7], {0}
    fee4:	01000000 	mrseq	r0, (UNDEF: 0)
    fee8:	00000212 	andeq	r0, r0, r2, lsl r2
    feec:	003b310a 	eorseq	r3, fp, sl, lsl #2
    fef0:	02830100 	addeq	r0, r3, #0, 2
    fef4:	0000008c 	andeq	r0, r0, ip, lsl #1
    fef8:	12c70b00 	sbcne	r0, r7, #0, 22
    fefc:	c4030000 	strgt	r0, [r3], #-0
    ff00:	3b0e0c03 	blcc	392f14 <__ccfg+0x372f6c>
    ff04:	0f020000 	svceq	0x00020000
    ff08:	003ef801 	eorseq	pc, lr, r1, lsl #16
    ff0c:	00007c00 	andeq	r7, r0, r0, lsl #24
    ff10:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    ff14:	0d000002 	stceq	0, cr0, [r0, #-8]
    ff18:	00003620 	andeq	r3, r0, r0, lsr #12
    ff1c:	008c7f01 	addeq	r7, ip, r1, lsl #30
    ff20:	3eef0000 	cdpcc	0, 14, cr0, cr15, cr0, {0}
    ff24:	26070000 	strcs	r0, [r7], -r0
    ff28:	0100003b 	tsteq	r0, fp, lsr r0
    ff2c:	00008c81 	andeq	r8, r0, r1, lsl #25
    ff30:	38be0e00 	ldmcc	lr!, {r9, sl, fp}
    ff34:	82010000 	andhi	r0, r1, #0
    ff38:	00000081 	andeq	r0, r0, r1, lsl #1
    ff3c:	310f5201 	tstcc	pc, r1, lsl #4
    ff40:	01000037 	tsteq	r0, r7, lsr r0
    ff44:	00008183 	andeq	r8, r0, r3, lsl #3
    ff48:	003f1000 	eorseq	r1, pc, r0
    ff4c:	37ff0f00 	ldrbcc	r0, [pc, r0, lsl #30]!
    ff50:	84010000 	strhi	r0, [r1], #-0
    ff54:	00000081 	andeq	r0, r0, r1, lsl #1
    ff58:	00003f23 	andeq	r3, r0, r3, lsr #30
    ff5c:	00009710 	andeq	r9, r0, r0, lsl r7
    ff60:	003f0600 	eorseq	r0, pc, r0, lsl #12
    ff64:	00124800 	andseq	r4, r2, r0, lsl #16
    ff68:	9b970100 	blls	fe5d0370 <_estack+0xde5cb370>
    ff6c:	11000002 	tstne	r0, r2
    ff70:	000000a7 	andeq	r0, r0, r7, lsr #1
    ff74:	00124812 	andseq	r4, r2, r2, lsl r8
    ff78:	00b21300 	adcseq	r1, r2, r0, lsl #6
    ff7c:	52010000 	andpl	r0, r1, #0
    ff80:	97140000 	ldrls	r0, [r4, -r0]
    ff84:	10000000 	andne	r0, r0, r0
    ff88:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    ff8c:	01000000 	mrseq	r0, (UNDEF: 0)
    ff90:	00a71198 	umlaleq	r1, r7, r8, r1
    ff94:	10150000 	andsne	r0, r5, r0
    ff98:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    ff9c:	16000000 	strne	r0, [r0], -r0
    ffa0:	000000b2 	strheq	r0, [r0], -r2
    ffa4:	00003f51 	andeq	r3, r0, r1, asr pc
    ffa8:	17000000 	strne	r0, [r0, -r0]
    ffac:	000034d9 	ldrdeq	r3, [r0], -r9
    ffb0:	3f746c02 	svccc	0x00746c02
    ffb4:	00ac0000 	adceq	r0, ip, r0
    ffb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    ffbc:	00000343 	andeq	r0, r0, r3, asr #6
    ffc0:	0036200d 	eorseq	r2, r6, sp
    ffc4:	8cbf0100 	ldfhis	f0, [pc]	; ffcc <__exidx_end+0xa4f0>
    ffc8:	64000000 	strvs	r0, [r0], #-0
    ffcc:	0f00003f 	svceq	0x0000003f
    ffd0:	00003a40 	andeq	r3, r0, r0, asr #20
    ffd4:	0081c101 	addeq	ip, r1, r1, lsl #2
    ffd8:	3f980000 	svccc	0x00980000
    ffdc:	560f0000 	strpl	r0, [pc], -r0
    ffe0:	0100003b 	tsteq	r0, fp, lsr r0
    ffe4:	000081c2 	andeq	r8, r0, r2, asr #3
    ffe8:	003fc100 	eorseq	ip, pc, r0, lsl #2
    ffec:	00971800 	addseq	r1, r7, r0, lsl #16
    fff0:	3faa0000 	svccc	0x00aa0000
    fff4:	00060000 	andeq	r0, r6, r0
    fff8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    fffc:	00000332 	andeq	r0, r0, r2, lsr r3
   10000:	0000a711 	andeq	sl, r0, r1, lsl r7
   10004:	3faa1500 	svccc	0x00aa1500
   10008:	00060000 	andeq	r0, r6, r0
   1000c:	b2160000 	andslt	r0, r6, #0
   10010:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   10014:	0000003f 	andeq	r0, r0, pc, lsr r0
   10018:	3f981900 	svccc	0x00981900
   1001c:	021a0000 	andseq	r0, sl, #0
   10020:	011a0000 	tsteq	sl, r0
   10024:	00740250 	rsbseq	r0, r4, r0, asr r2
   10028:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
   1002c:	02000036 	andeq	r0, r0, #54	; 0x36
   10030:	00008ca4 	andeq	r8, r0, r4, lsr #25
   10034:	00402000 	subeq	r2, r0, r0
   10038:	00005c00 	andeq	r5, r0, r0, lsl #24
   1003c:	bd9c0100 	ldflts	f0, [ip]
   10040:	1c000003 	stcne	0, cr0, [r0], {3}
   10044:	00003620 	andeq	r3, r0, r0, lsr #12
   10048:	8c021f01 	stchi	15, cr1, [r2], {1}
   1004c:	fb000000 	blx	10056 <__exidx_end+0xa57a>
   10050:	1d00003f 	stcne	0, cr0, [r0, #-252]	; 0xffffff04
   10054:	000039f0 	strdeq	r3, [r0], -r0
   10058:	8c022101 	stfhis	f2, [r2], {1}
   1005c:	1c000000 	stcne	0, cr0, [r0], {-0}
   10060:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
   10064:	00003af2 	strdeq	r3, [r0], -r2
   10068:	8c022201 	sfmhi	f2, 4, [r2], {1}
   1006c:	2f000000 	svccs	0x00000000
   10070:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
   10074:	00003b00 	andeq	r3, r0, r0, lsl #22
   10078:	8c022301 	stchi	3, cr2, [r2], {1}
   1007c:	7d000000 	stcvc	0, cr0, [r0, #-0]
   10080:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
   10084:	00003b3f 	andeq	r3, r0, pc, lsr fp
   10088:	81022401 	tsthi	r2, r1, lsl #8
   1008c:	e5000000 	str	r0, [r0, #-0]
   10090:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
   10094:	00003b31 	andeq	r3, r0, r1, lsr fp
   10098:	8c022501 	cfstr32hi	mvfx2, [r2], {1}
   1009c:	04000000 	streq	r0, [r0], #-0
   100a0:	00000041 	andeq	r0, r0, r1, asr #32
   100a4:	0039141b 	eorseq	r1, r9, fp, lsl r4
   100a8:	8cc10200 	sfmhi	f0, 2, [r1], {0}
   100ac:	7c000000 	stcvc	0, cr0, [r0], {-0}
   100b0:	18000040 	stmdane	r0, {r6}
   100b4:	01000000 	mrseq	r0, (UNDEF: 0)
   100b8:	0003e79c 	muleq	r3, ip, r7
   100bc:	3b311d00 	blcc	c574c4 <__ccfg+0xc3751c>
   100c0:	67010000 	strvs	r0, [r1, -r0]
   100c4:	00008c02 	andeq	r8, r0, r2, lsl #24
   100c8:	00412900 	subeq	r2, r1, r0, lsl #18
   100cc:	f51e0000 			; <UNDEFINED> instruction: 0xf51e0000
   100d0:	00000001 	andeq	r0, r0, r1
   100d4:	10000000 	andne	r0, r0, r0
   100d8:	01000000 	mrseq	r0, (UNDEF: 0)
   100dc:	0004049c 	muleq	r4, ip, r4
   100e0:	02051600 	andeq	r1, r5, #0, 12
   100e4:	41500000 	cmpmi	r0, r0
   100e8:	1b000000 	blne	100f0 <__exidx_end+0xa614>
   100ec:	00003842 	andeq	r3, r0, r2, asr #16
   100f0:	008c9d02 	addeq	r9, ip, r2, lsl #26
   100f4:	40940000 	addsmi	r0, r4, r0
   100f8:	00100000 	andseq	r0, r0, r0
   100fc:	9c010000 	stcls	0, cr0, [r1], {-0}
   10100:	0000043e 	andeq	r0, r0, lr, lsr r4
   10104:	003b311d 	eorseq	r3, fp, sp, lsl r1
   10108:	02970100 	addseq	r0, r7, #0, 2
   1010c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10110:	00004169 	andeq	r4, r0, r9, ror #2
   10114:	0039f01d 	eorseq	pc, r9, sp, lsl r0	; <UNPREDICTABLE>
   10118:	02980100 	addseq	r0, r8, #0, 2
   1011c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10120:	0000418a 	andeq	r4, r0, sl, lsl #3
   10124:	38221b00 	stmdacc	r2!, {r8, r9, fp, ip}
   10128:	96020000 	strls	r0, [r2], -r0
   1012c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10130:	000040a4 	andeq	r4, r0, r4, lsr #1
   10134:	00000014 	andeq	r0, r0, r4, lsl r0
   10138:	04789c01 	ldrbteq	r9, [r8], #-3073	; 0xfffff3ff
   1013c:	311d0000 	tstcc	sp, r0
   10140:	0100003b 	tsteq	r0, fp, lsr r0
   10144:	008c02ba 			; <UNDEFINED> instruction: 0x008c02ba
   10148:	419d0000 	orrsmi	r0, sp, r0
   1014c:	f01d0000 			; <UNDEFINED> instruction: 0xf01d0000
   10150:	01000039 	tsteq	r0, r9, lsr r0
   10154:	008c02bb 			; <UNDEFINED> instruction: 0x008c02bb
   10158:	41be0000 			; <UNDEFINED> instruction: 0x41be0000
   1015c:	1b000000 	blne	10164 <__exidx_end+0xa688>
   10160:	00003ad1 	ldrdeq	r3, [r0], -r1
   10164:	008c8f02 	addeq	r8, ip, r2, lsl #30
   10168:	40b80000 	adcsmi	r0, r8, r0
   1016c:	00640000 	rsbeq	r0, r4, r0
   10170:	9c010000 	stcls	0, cr0, [r1], {-0}
   10174:	000004fe 	strdeq	r0, [r0], -lr
   10178:	0035b41c 	eorseq	fp, r5, ip, lsl r4
   1017c:	02db0100 	sbcseq	r0, fp, #0, 2
   10180:	0000008c 	andeq	r0, r0, ip, lsl #1
   10184:	000041d1 	ldrdeq	r4, [r0], -r1
   10188:	003b311d 	eorseq	r3, fp, sp, lsl r1
   1018c:	02dd0100 	sbcseq	r0, sp, #0, 2
   10190:	0000008c 	andeq	r0, r0, ip, lsl #1
   10194:	000041f2 	strdeq	r4, [r0], -r2
   10198:	0039f01d 	eorseq	pc, r9, sp, lsl r0	; <UNPREDICTABLE>
   1019c:	02de0100 	sbcseq	r0, lr, #0, 2
   101a0:	0000008c 	andeq	r0, r0, ip, lsl #1
   101a4:	00004226 	andeq	r4, r0, r6, lsr #4
   101a8:	00374a1d 	eorseq	r4, r7, sp, lsl sl
   101ac:	02df0100 	sbcseq	r0, pc, #0, 2
   101b0:	0000008c 	andeq	r0, r0, ip, lsl #1
   101b4:	00004239 	andeq	r4, r0, r9, lsr r2
   101b8:	003aa91d 	eorseq	sl, sl, sp, lsl r9
   101bc:	02e00100 	rsceq	r0, r0, #0, 2
   101c0:	0000008c 	andeq	r0, r0, ip, lsl #1
   101c4:	00004267 	andeq	r4, r0, r7, ror #4
   101c8:	0039e60a 	eorseq	lr, r9, sl, lsl #12
   101cc:	02e10100 	rsceq	r0, r1, #0, 2
   101d0:	0000008c 	andeq	r0, r0, ip, lsl #1
   101d4:	0037ba1d 	eorseq	fp, r7, sp, lsl sl
   101d8:	02e20100 	rsceq	r0, r2, #0, 2
   101dc:	00000081 	andeq	r0, r0, r1, lsl #1
   101e0:	00004295 	muleq	r0, r5, r2
   101e4:	00be1e00 	adcseq	r1, lr, r0, lsl #28
   101e8:	411c0000 	tstmi	ip, r0
   101ec:	00140000 	andseq	r0, r4, r0
   101f0:	9c010000 	stcls	0, cr0, [r1], {-0}
   101f4:	0000054a 	andeq	r0, r0, sl, asr #10
   101f8:	0000ce1f 	andeq	ip, r0, pc, lsl lr
   101fc:	00431000 	subeq	r1, r3, r0
   10200:	00da1600 	sbcseq	r1, sl, r0, lsl #12
   10204:	43310000 	teqmi	r1, #0
   10208:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
   1020c:	0a000041 	beq	10318 <__exidx_end+0xa83c>
   10210:	1f000000 	svcne	0x00000000
   10214:	000000ce 	andeq	r0, r0, lr, asr #1
   10218:	00004350 	andeq	r4, r0, r0, asr r3
   1021c:	00411e15 	subeq	r1, r1, r5, lsl lr
   10220:	00000a00 	andeq	r0, r0, r0, lsl #20
   10224:	00da1600 	sbcseq	r1, sl, r0, lsl #12
   10228:	43710000 	cmnmi	r1, #0
   1022c:	00000000 	andeq	r0, r0, r0
   10230:	00e71e00 	rsceq	r1, r7, r0, lsl #28
   10234:	41300000 	teqmi	r0, r0
   10238:	00140000 	andseq	r0, r4, r0
   1023c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10240:	00000596 	muleq	r0, r6, r5
   10244:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
   10248:	00438400 	subeq	r8, r3, r0, lsl #8
   1024c:	01031600 	tsteq	r3, r0, lsl #12
   10250:	43a50000 			; <UNDEFINED> instruction: 0x43a50000
   10254:	32150000 	andscc	r0, r5, #0
   10258:	0a000041 	beq	10364 <__exidx_end+0xa888>
   1025c:	1f000000 	svcne	0x00000000
   10260:	000000f7 	strdeq	r0, [r0], -r7
   10264:	000043c4 	andeq	r4, r0, r4, asr #7
   10268:	00413215 	subeq	r3, r1, r5, lsl r2
   1026c:	00000a00 	andeq	r0, r0, r0, lsl #20
   10270:	01031600 	tsteq	r3, r0, lsl #12
   10274:	43e50000 	mvnmi	r0, #0
   10278:	00000000 	andeq	r0, r0, r0
   1027c:	01101e00 	tsteq	r0, r0, lsl #28
   10280:	41440000 	mrsmi	r0, (UNDEF: 68)
   10284:	00140000 	andseq	r0, r4, r0
   10288:	9c010000 	stcls	0, cr0, [r1], {-0}
   1028c:	000005e2 	andeq	r0, r0, r2, ror #11
   10290:	0001201f 	andeq	r2, r1, pc, lsl r0
   10294:	0043f800 	subeq	pc, r3, r0, lsl #16
   10298:	012c1600 			; <UNDEFINED> instruction: 0x012c1600
   1029c:	44190000 	ldrmi	r0, [r9], #-0
   102a0:	46150000 	ldrmi	r0, [r5], -r0
   102a4:	0a000041 	beq	103b0 <__exidx_end+0xa8d4>
   102a8:	1f000000 	svcne	0x00000000
   102ac:	00000120 	andeq	r0, r0, r0, lsr #2
   102b0:	00004438 	andeq	r4, r0, r8, lsr r4
   102b4:	00414615 	subeq	r4, r1, r5, lsl r6
   102b8:	00000a00 	andeq	r0, r0, r0, lsl #20
   102bc:	012c1600 			; <UNDEFINED> instruction: 0x012c1600
   102c0:	44590000 	ldrbmi	r0, [r9], #-0
   102c4:	00000000 	andeq	r0, r0, r0
   102c8:	01391e00 	teqeq	r9, r0, lsl #28
   102cc:	41580000 	cmpmi	r8, r0
   102d0:	00280000 	eoreq	r0, r8, r0
   102d4:	9c010000 	stcls	0, cr0, [r1], {-0}
   102d8:	0000063c 	andeq	r0, r0, ip, lsr r6
   102dc:	0001491f 	andeq	r4, r1, pc, lsl r9
   102e0:	00446c00 	subeq	r6, r4, r0, lsl #24
   102e4:	01551600 	cmpeq	r5, r0, lsl #12
   102e8:	448d0000 	strmi	r0, [sp], #0
   102ec:	61200000 			; <UNDEFINED> instruction: 0x61200000
   102f0:	15000001 	strne	r0, [r0, #-1]
   102f4:	0000415a 	andeq	r4, r0, sl, asr r1
   102f8:	0000001c 	andeq	r0, r0, ip, lsl r0
   102fc:	0001491f 	andeq	r4, r1, pc, lsl r9
   10300:	0044ac00 	subeq	sl, r4, r0, lsl #24
   10304:	415a1500 	cmpmi	sl, r0, lsl #10
   10308:	001c0000 	andseq	r0, ip, r0
   1030c:	55160000 	ldrpl	r0, [r6, #-0]
   10310:	cd000001 	stcgt	0, cr0, [r0, #-4]
   10314:	16000044 	strne	r0, [r0], -r4, asr #32
   10318:	00000161 	andeq	r0, r0, r1, ror #2
   1031c:	000044fa 	strdeq	r4, [r0], -sl
   10320:	1b000000 	blne	10328 <__exidx_end+0xa84c>
   10324:	0000376f 	andeq	r3, r0, pc, ror #14
   10328:	008ccf02 	addeq	ip, ip, r2, lsl #30
   1032c:	41800000 	orrmi	r0, r0, r0
   10330:	00100000 	andseq	r0, r0, r0
   10334:	9c010000 	stcls	0, cr0, [r1], {-0}
   10338:	00000666 	andeq	r0, r0, r6, ror #12
   1033c:	0038091d 	eorseq	r0, r8, sp, lsl r9
   10340:	03840100 	orreq	r0, r4, #0, 2
   10344:	0000008c 	andeq	r0, r0, ip, lsl #1
   10348:	0000450d 	andeq	r4, r0, sp, lsl #10
   1034c:	016e1e00 	cmneq	lr, r0, lsl #28
   10350:	41900000 	orrsmi	r0, r0, r0
   10354:	002c0000 	eoreq	r0, ip, r0
   10358:	9c010000 	stcls	0, cr0, [r1], {-0}
   1035c:	000006c0 	andeq	r0, r0, r0, asr #13
   10360:	00017e1f 	andeq	r7, r1, pc, lsl lr
   10364:	00452800 	subeq	r2, r5, r0, lsl #16
   10368:	018a1600 	orreq	r1, sl, r0, lsl #12
   1036c:	45490000 	strbmi	r0, [r9, #-0]
   10370:	96200000 	strtls	r0, [r0], -r0
   10374:	15000001 	strne	r0, [r0, #-1]
   10378:	00004192 	muleq	r0, r2, r1
   1037c:	0000001e 	andeq	r0, r0, lr, lsl r0
   10380:	00017e1f 	andeq	r7, r1, pc, lsl lr
   10384:	00456c00 	subeq	r6, r5, r0, lsl #24
   10388:	41921500 	orrsmi	r1, r2, r0, lsl #10
   1038c:	001e0000 	andseq	r0, lr, r0
   10390:	8a160000 	bhi	590398 <__ccfg+0x5703f0>
   10394:	8d000001 	stchi	0, cr0, [r0, #-4]
   10398:	16000045 	strne	r0, [r0], -r5, asr #32
   1039c:	00000196 	muleq	r0, r6, r1
   103a0:	000045ba 			; <UNDEFINED> instruction: 0x000045ba
   103a4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   103a8:	000001a3 	andeq	r0, r0, r3, lsr #3
   103ac:	000041bc 			; <UNDEFINED> instruction: 0x000041bc
   103b0:	00000014 	andeq	r0, r0, r4, lsl r0
   103b4:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
   103b8:	b31f0000 	tstlt	pc, #0
   103bc:	cd000001 	stcgt	0, cr0, [r0, #-4]
   103c0:	16000045 	strne	r0, [r0], -r5, asr #32
   103c4:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
   103c8:	000045ee 	andeq	r4, r0, lr, ror #11
   103cc:	0041be15 	subeq	fp, r1, r5, lsl lr
   103d0:	00000a00 	andeq	r0, r0, r0, lsl #20
   103d4:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
   103d8:	460d0000 	strmi	r0, [sp], -r0
   103dc:	be150000 	cdplt	0, 1, cr0, cr5, cr0, {0}
   103e0:	0a000041 	beq	104ec <__exidx_end+0xaa10>
   103e4:	16000000 	strne	r0, [r0], -r0
   103e8:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
   103ec:	0000462e 	andeq	r4, r0, lr, lsr #12
   103f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   103f4:	000001cc 	andeq	r0, r0, ip, asr #3
   103f8:	000041d0 	ldrdeq	r4, [r0], -r0
   103fc:	00000014 	andeq	r0, r0, r4, lsl r0
   10400:	07589c01 	ldrbeq	r9, [r8, -r1, lsl #24]
   10404:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
   10408:	41000001 	tstmi	r0, r1
   1040c:	16000046 	strne	r0, [r0], -r6, asr #32
   10410:	000001e8 	andeq	r0, r0, r8, ror #3
   10414:	00004662 	andeq	r4, r0, r2, ror #12
   10418:	0041d215 	subeq	sp, r1, r5, lsl r2
   1041c:	00000a00 	andeq	r0, r0, r0, lsl #20
   10420:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
   10424:	46810000 	strmi	r0, [r1], r0
   10428:	d2150000 	andsle	r0, r5, #0
   1042c:	0a000041 	beq	10538 <__exidx_end+0xaa5c>
   10430:	16000000 	strne	r0, [r0], -r0
   10434:	000001e8 	andeq	r0, r0, r8, ror #3
   10438:	000046a2 	andeq	r4, r0, r2, lsr #13
   1043c:	17000000 	strne	r0, [r0, -r0]
   10440:	00003509 	andeq	r3, r0, r9, lsl #10
   10444:	41e47302 	mvnmi	r7, r2, lsl #6
   10448:	01100000 	tsteq	r0, r0
   1044c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10450:	00000963 	andeq	r0, r0, r3, ror #18
   10454:	0035b41c 	eorseq	fp, r5, ip, lsl r4
   10458:	01270100 			; <UNDEFINED> instruction: 0x01270100
   1045c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10460:	000046b5 			; <UNDEFINED> instruction: 0x000046b5
   10464:	0036201c 	eorseq	r2, r6, ip, lsl r0
   10468:	01270100 			; <UNDEFINED> instruction: 0x01270100
   1046c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10470:	000046e1 	andeq	r4, r0, r1, ror #13
   10474:	0039731d 	eorseq	r7, r9, sp, lsl r3
   10478:	01290100 			; <UNDEFINED> instruction: 0x01290100
   1047c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10480:	00004702 	andeq	r4, r0, r2, lsl #14
   10484:	0001f521 	andeq	pc, r1, r1, lsr #10
   10488:	00421400 	subeq	r1, r2, r0, lsl #8
   1048c:	00126000 	andseq	r6, r2, r0
   10490:	01400100 	mrseq	r0, (UNDEF: 80)
   10494:	000007c1 	andeq	r0, r0, r1, asr #15
   10498:	00126012 	andseq	r6, r2, r2, lsl r0
   1049c:	02051600 	andeq	r1, r5, #0, 12
   104a0:	47d00000 	ldrbmi	r0, [r0, r0]
   104a4:	00000000 	andeq	r0, r0, r0
   104a8:	0041ee22 	subeq	lr, r1, r2, lsr #28
   104ac:	00034300 	andeq	r4, r3, r0, lsl #6
   104b0:	0007d600 	andeq	sp, r7, r0, lsl #12
   104b4:	50011a00 	andpl	r1, r1, r0, lsl #20
   104b8:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
   104bc:	41fa2200 	mvnsmi	r2, r0, lsl #4
   104c0:	0ad60000 	beq	ff5904c8 <_estack+0xdf58b4c8>
   104c4:	07ef0000 	strbeq	r0, [pc, r0]!
   104c8:	011a0000 	tsteq	sl, r0
   104cc:	1a480151 	bne	1210a18 <__ccfg+0x11f0a70>
   104d0:	74025001 	strvc	r5, [r2], #-1
   104d4:	fe230000 	cdp2	0, 2, cr0, cr3, cr0, {0}
   104d8:	bd000041 	stclt	0, cr0, [r0, #-260]	; 0xfffffefc
   104dc:	24000003 	strcs	r0, [r0], #-3
   104e0:	00004214 	andeq	r4, r0, r4, lsl r2
   104e4:	1d007602 	stcne	6, cr7, [r0, #-8]
   104e8:	1a000008 	bne	10510 <__exidx_end+0xaa34>
   104ec:	30015301 	andcc	r5, r1, r1, lsl #6
   104f0:	0352011a 	cmpeq	r2, #-2147483642	; 0x80000006
   104f4:	1a03ff0a 	bne	110124 <__ccfg+0xf017c>
   104f8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
   104fc:	50011a2c 	andpl	r1, r1, ip, lsr #20
   10500:	00007402 	andeq	r7, r0, r2, lsl #8
   10504:	00422422 	subeq	r2, r2, r2, lsr #8
   10508:	000ad600 	andeq	sp, sl, r0, lsl #12
   1050c:	00083600 	andeq	r3, r8, r0, lsl #12
   10510:	51011a00 	tstpl	r1, r0, lsl #20
   10514:	011a4c01 	tsteq	sl, r1, lsl #24
   10518:	00740250 	rsbseq	r0, r4, r0, asr r2
   1051c:	42282300 	eormi	r2, r8, #0, 6
   10520:	04040000 	streq	r0, [r4], #-0
   10524:	32220000 	eorcc	r0, r2, #0
   10528:	d6000042 	strle	r0, [r0], -r2, asr #32
   1052c:	5800000a 	stmdapl	r0, {r1, r3}
   10530:	1a000008 	bne	10558 <__exidx_end+0xaa7c>
   10534:	44015101 	strmi	r5, [r1], #-257	; 0xfffffeff
   10538:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1053c:	23000074 	movwcs	r0, #116	; 0x74
   10540:	00004236 	andeq	r4, r0, r6, lsr r2
   10544:	0000043e 	andeq	r0, r0, lr, lsr r4
   10548:	00424022 	subeq	r4, r2, r2, lsr #32
   1054c:	000ad600 	andeq	sp, sl, r0, lsl #12
   10550:	00087a00 	andeq	r7, r8, r0, lsl #20
   10554:	51011a00 	tstpl	r1, r0, lsl #20
   10558:	011a4001 	tsteq	sl, r1
   1055c:	00740250 	rsbseq	r0, r4, r0, asr r2
   10560:	42462200 	submi	r2, r6, #0, 4
   10564:	04780000 	ldrbteq	r0, [r8], #-0
   10568:	088e0000 	stmeq	lr, {}	; <UNPREDICTABLE>
   1056c:	011a0000 	tsteq	sl, r0
   10570:	00750250 	rsbseq	r0, r5, r0, asr r2
   10574:	42502200 	subsmi	r2, r0, #0, 4
   10578:	0ad60000 	beq	ff590580 <_estack+0xdf58b580>
   1057c:	08a70000 	stmiaeq	r7!, {}	; <UNPREDICTABLE>
   10580:	011a0000 	tsteq	sl, r0
   10584:	1a3c0151 	bne	f10ad0 <__ccfg+0xef0b28>
   10588:	74025001 	strvc	r5, [r2], #-1
   1058c:	56220000 	strtpl	r0, [r2], -r0
   10590:	e7000042 	str	r0, [r0, -r2, asr #32]
   10594:	bb000000 	bllt	1059c <__exidx_end+0xaac0>
   10598:	1a000008 	bne	105c0 <__exidx_end+0xaae4>
   1059c:	75025001 	strvc	r5, [r2, #-1]
   105a0:	68220000 	stmdavs	r2!, {}	; <UNPREDICTABLE>
   105a4:	10000042 	andne	r0, r0, r2, asr #32
   105a8:	cf000001 	svcgt	0x00000001
   105ac:	1a000008 	bne	105d4 <__exidx_end+0xaaf8>
   105b0:	75025001 	strvc	r5, [r2, #-1]
   105b4:	76220000 	strtvc	r0, [r2], -r0
   105b8:	39000042 	stmdbcc	r0, {r1, r6}
   105bc:	e3000001 	movw	r0, #1
   105c0:	1a000008 	bne	105e8 <__exidx_end+0xab0c>
   105c4:	75025001 	strvc	r5, [r2, #-1]
   105c8:	80220000 	eorhi	r0, r2, r0
   105cc:	d6000042 	strle	r0, [r0], -r2, asr #32
   105d0:	fd00000a 	stc2	0, cr0, [r0, #-40]	; 0xffffffd8
   105d4:	1a000008 	bne	105fc <__exidx_end+0xab20>
   105d8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
   105dc:	50011a28 	andpl	r1, r1, r8, lsr #20
   105e0:	00007402 	andeq	r7, r0, r2, lsl #8
   105e4:	00428622 	subeq	r8, r2, r2, lsr #12
   105e8:	0000be00 	andeq	fp, r0, r0, lsl #28
   105ec:	00091100 	andeq	r1, r9, r0, lsl #2
   105f0:	50011a00 	andpl	r1, r1, r0, lsl #20
   105f4:	00007502 	andeq	r7, r0, r2, lsl #10
   105f8:	00429822 	subeq	r9, r2, r2, lsr #16
   105fc:	0001a300 	andeq	sl, r1, r0, lsl #6
   10600:	00092500 	andeq	r2, r9, r0, lsl #10
   10604:	50011a00 	andpl	r1, r1, r0, lsl #20
   10608:	00007502 	andeq	r7, r0, r2, lsl #10
   1060c:	0042aa22 	subeq	sl, r2, r2, lsr #20
   10610:	0001cc00 	andeq	ip, r1, r0, lsl #24
   10614:	00093900 	andeq	r3, r9, r0, lsl #18
   10618:	50011a00 	andpl	r1, r1, r0, lsl #20
   1061c:	00007502 	andeq	r7, r0, r2, lsl #10
   10620:	0042be22 	subeq	fp, r2, r2, lsr #28
   10624:	00016e00 	andeq	r6, r1, r0, lsl #28
   10628:	00094d00 	andeq	r4, r9, r0, lsl #26
   1062c:	50011a00 	andpl	r1, r1, r0, lsl #20
   10630:	00007502 	andeq	r7, r0, r2, lsl #10
   10634:	0042c819 	subeq	ip, r2, r9, lsl r8
   10638:	000ad600 	andeq	sp, sl, r0, lsl #12
   1063c:	51011a00 	tstpl	r1, r0, lsl #20
   10640:	011a3801 	tsteq	sl, r1, lsl #16
   10644:	00740250 	rsbseq	r0, r4, r0, asr r2
   10648:	86170000 	ldrhi	r0, [r7], -r0
   1064c:	02000035 	andeq	r0, r0, #53	; 0x35
   10650:	0042f4fd 	strdeq	pc, [r2], #-77	; 0xffffffb3
   10654:	00006400 	andeq	r6, r0, r0, lsl #8
   10658:	899c0100 	ldmibhi	ip, {r8}
   1065c:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   10660:	0000373d 	andeq	r3, r0, sp, lsr r7
   10664:	8c03eb01 			; <UNDEFINED> instruction: 0x8c03eb01
   10668:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
   1066c:	00000047 	andeq	r0, r0, r7, asr #32
   10670:	003ab30c 	eorseq	fp, sl, ip, lsl #6
   10674:	01060200 	mrseq	r0, LR_usr
   10678:	00004358 	andeq	r4, r0, r8, asr r3
   1067c:	00000028 	andeq	r0, r0, r8, lsr #32
   10680:	09b09c01 	ldmibeq	r0!, {r0, sl, fp, ip, pc}
   10684:	0a1c0000 	beq	71068c <__ccfg+0x6f06e4>
   10688:	01000039 	tsteq	r0, r9, lsr r0
   1068c:	008c0413 	addeq	r0, ip, r3, lsl r4
   10690:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
   10694:	17000000 	strne	r0, [r0, -r0]
   10698:	00003539 	andeq	r3, r0, r9, lsr r5
   1069c:	43807a02 	orrmi	r7, r0, #8192	; 0x2000
   106a0:	01500000 	cmpeq	r0, r0
   106a4:	9c010000 	stcls	0, cr0, [r1], {-0}
   106a8:	00000ad6 	ldrdeq	r0, [r0], -r6
   106ac:	0036201c 	eorseq	r2, r6, ip, lsl r0
   106b0:	019b0100 	orrseq	r0, fp, r0, lsl #2
   106b4:	0000008c 	andeq	r0, r0, ip, lsl #1
   106b8:	00004825 	andeq	r4, r0, r5, lsr #16
   106bc:	003a511d 	eorseq	r5, sl, sp, lsl r1
   106c0:	019d0100 	orrseq	r0, sp, r0, lsl #2
   106c4:	0000008c 	andeq	r0, r0, ip, lsl #1
   106c8:	00004880 	andeq	r4, r0, r0, lsl #17
   106cc:	0039731d 	eorseq	r7, r9, sp, lsl r3
   106d0:	019e0100 	orrseq	r0, lr, r0, lsl #2
   106d4:	0000008c 	andeq	r0, r0, ip, lsl #1
   106d8:	00004893 	muleq	r0, r3, r8
   106dc:	0036bd1d 	eorseq	fp, r6, sp, lsl sp
   106e0:	019f0100 	orrseq	r0, pc, r0, lsl #2
   106e4:	0000008c 	andeq	r0, r0, ip, lsl #1
   106e8:	000048a6 	andeq	r4, r0, r6, lsr #17
   106ec:	0036b01d 	eorseq	fp, r6, sp, lsl r0
   106f0:	01a00100 	lsleq	r0, r0, #2
   106f4:	0000008c 	andeq	r0, r0, ip, lsl #1
   106f8:	000048c4 	andeq	r4, r0, r4, asr #17
   106fc:	00021225 	andeq	r1, r2, r5, lsr #4
   10700:	00449200 	subeq	r9, r4, r0, lsl #4
   10704:	00003e00 	andeq	r3, r0, r0, lsl #28
   10708:	02160100 	andseq	r0, r6, #0, 2
   1070c:	00440a23 	subeq	r0, r4, r3, lsr #20
   10710:	00063c00 	andeq	r3, r6, r0, lsl #24
   10714:	442c2200 	strtmi	r2, [ip], #-512	; 0xfffffe00
   10718:	0af20000 	beq	ffc90720 <_estack+0xdfc8b720>
   1071c:	0a460000 	beq	1190724 <__ccfg+0x117077c>
   10720:	011a0000 	tsteq	sl, r0
   10724:	1a310151 	bne	c50c70 <__ccfg+0xc30cc8>
   10728:	34015001 	strcc	r5, [r1], #-1
   1072c:	44322200 	ldrtmi	r2, [r2], #-512	; 0xfffffe00
   10730:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
   10734:	0a5d0000 	beq	175073c <__ccfg+0x1730794>
   10738:	011a0000 	tsteq	sl, r0
   1073c:	bd0c0550 	cfstr32lt	mvfx0, [ip, #-320]	; 0xfffffec0
   10740:	00008637 	andeq	r8, r0, r7, lsr r6
   10744:	00443823 	subeq	r3, r4, r3, lsr #16
   10748:	000b0800 	andeq	r0, fp, r0, lsl #16
   1074c:	44422200 	strbmi	r2, [r2], #-512	; 0xfffffe00
   10750:	0af20000 	beq	ffc90758 <_estack+0xdfc8b758>
   10754:	0a7f0000 	beq	1fd075c <__ccfg+0x1fb07b4>
   10758:	011a0000 	tsteq	sl, r0
   1075c:	00740251 	rsbseq	r0, r4, r1, asr r2
   10760:	0150011a 	cmpeq	r0, sl, lsl r1
   10764:	48220034 	stmdami	r2!, {r2, r4, r5}
   10768:	08000044 	stmdaeq	r0, {r2, r6}
   1076c:	9200000b 	andls	r0, r0, #11
   10770:	1a00000a 	bne	107a0 <__exidx_end+0xacc4>
   10774:	34015001 	strcc	r5, [r1], #-1
   10778:	44582200 	ldrbmi	r2, [r8], #-512	; 0xfffffe00
   1077c:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
   10780:	0aac0000 	beq	feb10788 <_estack+0xdeb0b788>
   10784:	011a0000 	tsteq	sl, r0
   10788:	00740850 	rsbseq	r0, r4, r0, asr r8
   1078c:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
   10790:	26001a00 	strcs	r1, [r0], -r0, lsl #20
   10794:	00004468 	andeq	r4, r0, r8, ror #8
   10798:	00000acc 	andeq	r0, r0, ip, asr #21
   1079c:	0552011a 	ldrbeq	r0, [r2, #-282]	; 0xfffffee6
   107a0:	0060000c 	rsbeq	r0, r0, ip
   107a4:	51011a60 	tstpl	r1, r0, ror #20
   107a8:	011a3701 	tsteq	sl, r1, lsl #14
   107ac:	00740450 	rsbseq	r0, r4, r0, asr r4
   107b0:	23002548 	movwcs	r2, #1352	; 0x548
   107b4:	0000447e 	andeq	r4, r0, lr, ror r4
   107b8:	00000af2 	strdeq	r0, [r0], -r2
   107bc:	38832700 	stmcc	r3, {r8, r9, sl, sp}
   107c0:	ca060000 	bgt	1907c8 <__ccfg+0x170820>
   107c4:	000af201 	andeq	pc, sl, r1, lsl #4
   107c8:	008c2800 	addeq	r2, ip, r0, lsl #16
   107cc:	8c280000 	stchi	0, cr0, [r8], #-0
   107d0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   107d4:	0000008c 	andeq	r0, r0, ip, lsl #1
   107d8:	2d122900 	vldrcs.16	s4, [r2, #-0]	; <UNPREDICTABLE>
   107dc:	f9070000 			; <UNDEFINED> instruction: 0xf9070000
   107e0:	00000b08 	andeq	r0, r0, r8, lsl #22
   107e4:	00008c28 	andeq	r8, r0, r8, lsr #24
   107e8:	008c2800 	addeq	r2, ip, r0, lsl #16
   107ec:	2a000000 	bcs	107f4 <__exidx_end+0xad18>
   107f0:	00002d4b 	andeq	r2, r0, fp, asr #26
   107f4:	8c011007 	stchi	0, cr1, [r1], {7}
   107f8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   107fc:	0000008c 	andeq	r0, r0, ip, lsl #1
   10800:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
   10804:	00040000 	andeq	r0, r4, r0
   10808:	00003bc1 	andeq	r3, r0, r1, asr #23
   1080c:	2a340104 	bcs	d10c24 <__ccfg+0xcf0c7c>
   10810:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
   10814:	fb00003b 	blx	1090a <__exidx_end+0xae2e>
   10818:	5000002a 	andpl	r0, r0, sl, lsr #32
   1081c:	00000013 	andeq	r0, r0, r3, lsl r0
   10820:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
   10824:	02000086 	andeq	r0, r0, #134	; 0x86
   10828:	00002b9e 	muleq	r0, lr, fp
   1082c:	00301b06 	eorseq	r1, r0, r6, lsl #22
   10830:	01030000 	mrseq	r0, (UNDEF: 3)
   10834:	000c6006 	andeq	r6, ip, r6
   10838:	2a0f0200 	bcs	3d1040 <__ccfg+0x3b1098>
   1083c:	1d060000 	stcne	0, cr0, [r6, #-0]
   10840:	00000042 	andeq	r0, r0, r2, asr #32
   10844:	5e080103 	adfple	f0, f0, f3
   10848:	0300000c 	movweq	r0, #12
   1084c:	0a6e0502 	beq	1b91c5c <__ccfg+0x1b71cb4>
   10850:	05020000 	streq	r0, [r2, #-0]
   10854:	0600002e 	streq	r0, [r0], -lr, lsr #32
   10858:	00005b2b 	andeq	r5, r0, fp, lsr #22
   1085c:	07020300 	streq	r0, [r2, -r0, lsl #6]
   10860:	00000d5b 	andeq	r0, r0, fp, asr sp
   10864:	002b9402 	eoreq	r9, fp, r2, lsl #8
   10868:	6d3f0600 	ldcvs	6, cr0, [pc, #-0]	; 10870 <__exidx_end+0xad94>
   1086c:	03000000 	movweq	r0, #0
   10870:	08000504 	stmdaeq	r0, {r2, r8, sl}
   10874:	a7020000 	strge	r0, [r2, -r0]
   10878:	06000029 	streq	r0, [r0], -r9, lsr #32
   1087c:	00007f41 	andeq	r7, r0, r1, asr #30
   10880:	07040300 	streq	r0, [r4, -r0, lsl #6]
   10884:	00000428 	andeq	r0, r0, r8, lsr #8
   10888:	fb050803 	blx	15289e <__ccfg+0x1328f6>
   1088c:	03000007 	movweq	r0, #7
   10890:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
   10894:	04040000 	streq	r0, [r4], #-0
   10898:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   1089c:	07040300 	streq	r0, [r4, -r0, lsl #6]
   108a0:	0000042d 	andeq	r0, r0, sp, lsr #8
   108a4:	002ba002 	eoreq	sl, fp, r2
   108a8:	25130700 	ldrcs	r0, [r3, #-1792]	; 0xfffff900
   108ac:	02000000 	andeq	r0, r0, #0
   108b0:	00002a11 	andeq	r2, r0, r1, lsl sl
   108b4:	00371407 	eorseq	r1, r7, r7, lsl #8
   108b8:	07020000 	streq	r0, [r2, -r0]
   108bc:	0700002e 	streq	r0, [r0, -lr, lsr #32]
   108c0:	0000501a 	andeq	r5, r0, sl, lsl r0
   108c4:	2b960200 	blcs	fe5910cc <_estack+0xde58c0cc>
   108c8:	1f070000 	svcne	0x00070000
   108cc:	00000062 	andeq	r0, r0, r2, rrx
   108d0:	0029a902 	eoreq	sl, r9, r2, lsl #18
   108d4:	74200700 	strtvc	r0, [r0], #-1792	; 0xfffff900
   108d8:	02000000 	andeq	r0, r0, #0
   108dc:	000029d3 	ldrdeq	r2, [r0], -r3
   108e0:	00e43308 	rsceq	r3, r4, r8, lsl #6
   108e4:	04050000 	streq	r0, [r5], #-0
   108e8:	000000ea 	andeq	r0, r0, sl, ror #1
   108ec:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
   108f0:	07000000 	streq	r0, [r0, -r0]
   108f4:	000000fc 	strdeq	r0, [r0], -ip
   108f8:	0000ad08 	andeq	sl, r0, r8, lsl #26
   108fc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
   10900:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10904:	00010742 	andeq	r0, r1, r2, asr #14
   10908:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
   1090c:	09000001 	stmdbeq	r0, {r0}
   10910:	000000ce 	andeq	r0, r0, lr, asr #1
   10914:	00000126 	andeq	r0, r0, r6, lsr #2
   10918:	00012608 	andeq	r2, r1, r8, lsl #12
   1091c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   10920:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   10924:	00000000 	andeq	r0, r0, r0
   10928:	00ad0405 	adceq	r0, sp, r5, lsl #8
   1092c:	71020000 	mrsvc	r0, (UNDEF: 2)
   10930:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10934:	00013746 	andeq	r3, r1, r6, asr #14
   10938:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
   1093c:	0a000001 	beq	10948 <__exidx_end+0xae6c>
   10940:	000000ce 	andeq	r0, r0, lr, asr #1
   10944:	0032ba02 	eorseq	fp, r2, r2, lsl #20
   10948:	37480900 	strbcc	r0, [r8, -r0, lsl #18]
   1094c:	02000001 	andeq	r0, r0, #1
   10950:	00002fa1 	andeq	r2, r0, r1, lsr #31
   10954:	01584a09 	cmpeq	r8, r9, lsl #20
   10958:	04050000 	streq	r0, [r5], #-0
   1095c:	0000015e 	andeq	r0, r0, lr, asr r1
   10960:	0000ce09 	andeq	ip, r0, r9, lsl #28
   10964:	00016d00 	andeq	r6, r1, r0, lsl #26
   10968:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   1096c:	02000000 	andeq	r0, r0, #0
   10970:	00002eb0 			; <UNDEFINED> instruction: 0x00002eb0
   10974:	01374c09 	teqeq	r7, r9, lsl #24
   10978:	10020000 	andne	r0, r2, r0
   1097c:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10980:	0001074e 	andeq	r0, r1, lr, asr #14
   10984:	2ea00200 	cdpcs	2, 10, cr0, cr0, cr0, {0}
   10988:	51090000 	mrspl	r0, (UNDEF: 9)
   1098c:	000000e4 	andeq	r0, r0, r4, ror #1
   10990:	002d2a02 	eoreq	r2, sp, r2, lsl #20
   10994:	99530900 	ldmdbls	r3, {r8, fp}^
   10998:	05000001 	streq	r0, [r0, #-1]
   1099c:	00019f04 	andeq	r9, r1, r4, lsl #30
   109a0:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   109a4:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
   109a8:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   109ac:	08000001 	stmdaeq	r0, {r0}
   109b0:	000000b8 	strheq	r0, [r0], -r8
   109b4:	0000b808 	andeq	fp, r0, r8, lsl #16
   109b8:	04050000 	streq	r0, [r5], #-0
   109bc:	000000b8 	strheq	r0, [r0], -r8
   109c0:	00311f02 	eorseq	r1, r1, r2, lsl #30
   109c4:	c9570900 	ldmdbgt	r7, {r8, fp}^
   109c8:	05000001 	streq	r0, [r0, #-1]
   109cc:	0001cf04 	andeq	ip, r1, r4, lsl #30
   109d0:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   109d4:	01e30000 	mvneq	r0, r0
   109d8:	e3080000 	movw	r0, #32768	; 0x8000
   109dc:	08000001 	stmdaeq	r0, {r0}
   109e0:	000000ce 	andeq	r0, r0, lr, asr #1
   109e4:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
   109e8:	02000000 	andeq	r0, r0, #0
   109ec:	00002f13 	andeq	r2, r0, r3, lsl pc
   109f0:	01c95a09 	biceq	r5, r9, r9, lsl #20
   109f4:	cd020000 	stcgt	0, cr0, [r2, #-0]
   109f8:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   109fc:	0001c95d 	andeq	ip, r1, sp, asr r9
   10a00:	2d3c0200 	lfmcs	f0, 4, [ip, #-0]
   10a04:	60090000 	andvs	r0, r9, r0
   10a08:	000001c9 	andeq	r0, r0, r9, asr #3
   10a0c:	00312d02 	eorseq	r2, r1, r2, lsl #26
   10a10:	e4630900 	strbt	r0, [r3], #-2304	; 0xfffff700
   10a14:	02000000 	andeq	r0, r0, #0
   10a18:	00002d7a 	andeq	r2, r0, sl, ror sp
   10a1c:	02206509 	eoreq	r6, r0, #37748736	; 0x2400000
   10a20:	04050000 	streq	r0, [r5], #-0
   10a24:	00000226 	andeq	r0, r0, r6, lsr #4
   10a28:	00023107 	andeq	r3, r2, r7, lsl #2
   10a2c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   10a30:	02000000 	andeq	r0, r0, #0
   10a34:	000032cb 	andeq	r3, r0, fp, asr #5
   10a38:	02206709 	eoreq	r6, r0, #2359296	; 0x240000
   10a3c:	0f020000 	svceq	0x00020000
   10a40:	09000030 	stmdbeq	r0, {r4, r5}
   10a44:	0000eb69 	andeq	lr, r0, r9, ror #22
   10a48:	32aa0200 	adccc	r0, sl, #0, 4
   10a4c:	6b090000 	blvs	250a54 <__ccfg+0x230aac>
   10a50:	000000eb 	andeq	r0, r0, fp, ror #1
   10a54:	002fdc02 	eoreq	sp, pc, r2, lsl #24
   10a58:	eb6d0900 	bl	1b52e60 <__ccfg+0x1b32eb8>
   10a5c:	02000000 	andeq	r0, r0, #0
   10a60:	00002fee 	andeq	r2, r0, lr, ror #31
   10a64:	00eb6f09 	rsceq	r6, fp, r9, lsl #30
   10a68:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
   10a6c:	03557a09 	cmpeq	r5, #36864	; 0x9000
   10a70:	b20c0000 	andlt	r0, ip, #0
   10a74:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a78:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
   10a7c:	9d0c0000 	stcls	0, cr0, [ip, #-0]
   10a80:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10a84:	00012c7d 	andeq	r2, r1, sp, ror ip
   10a88:	c30c0400 	movwgt	r0, #50176	; 0xc400
   10a8c:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a90:	0001427e 	andeq	r4, r1, lr, ror r2
   10a94:	bc0c0800 	stclt	8, cr0, [ip], {-0}
   10a98:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a9c:	00014d7f 	andeq	r4, r1, pc, ror sp
   10aa0:	ce0c0c00 	cdpgt	12, 0, cr0, cr12, cr0, {0}
   10aa4:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10aa8:	00016d80 	andeq	r6, r1, r0, lsl #27
   10aac:	c10c1000 	mrsgt	r1, (UNDEF: 12)
   10ab0:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10ab4:	00017881 	andeq	r7, r1, r1, lsl #17
   10ab8:	7d0c1400 	cfstrsvc	mvf1, [ip, #-0]
   10abc:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10ac0:	00018382 	andeq	r8, r1, r2, lsl #7
   10ac4:	b80c1800 	stmdalt	ip, {fp, ip}
   10ac8:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10acc:	00018e83 	andeq	r8, r1, r3, lsl #29
   10ad0:	470c1c00 	strmi	r1, [ip, -r0, lsl #24]
   10ad4:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10ad8:	0001be84 	andeq	fp, r1, r4, lsl #29
   10adc:	3f0c2000 	svccc	0x000c2000
   10ae0:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10ae4:	0001e985 	andeq	lr, r1, r5, lsl #19
   10ae8:	970c2400 	strls	r2, [ip, -r0, lsl #8]
   10aec:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10af0:	0001f486 	andeq	pc, r1, r6, lsl #9
   10af4:	fc0c2800 	stc2	8, cr2, [ip], {-0}
   10af8:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10afc:	0001ff87 	andeq	pc, r1, r7, lsl #31
   10b00:	dc0c2c00 	stcle	12, cr2, [ip], {-0}
   10b04:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10b08:	00021588 	andeq	r1, r2, r8, lsl #11
   10b0c:	ea0c3000 	b	31cb14 <__ccfg+0x2fcb6c>
   10b10:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10b14:	00023189 	andeq	r3, r2, r9, lsl #3
   10b18:	bb0c3400 	bllt	31db20 <__ccfg+0x2fdb78>
   10b1c:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10b20:	00020a8a 	andeq	r0, r2, sl, lsl #21
   10b24:	fe0c3800 	vcmla.f16	d3, d12, d0[0], #0
   10b28:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10b2c:	00023c8b 	andeq	r3, r2, fp, lsl #25
   10b30:	9d0c3c00 	stcls	12, cr3, [ip, #-0]
   10b34:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10b38:	0002478c 	andeq	r4, r2, ip, lsl #15
   10b3c:	210c4000 	mrscs	r4, (UNDEF: 12)
   10b40:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10b44:	0002528d 	andeq	r5, r2, sp, lsl #5
   10b48:	6b0c4400 	blvs	321b50 <__ccfg+0x301ba8>
   10b4c:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10b50:	00025d8e 	andeq	r5, r2, lr, lsl #27
   10b54:	02004800 	andeq	r4, r0, #0, 16
   10b58:	000030cd 	andeq	r3, r0, sp, asr #1
   10b5c:	02688f09 	rsbeq	r8, r8, #9, 30	; 0x24
   10b60:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
   10b64:	03994e01 	orrseq	r4, r9, #1, 28
   10b68:	240c0000 	strcs	r0, [ip], #-0
   10b6c:	0100003d 	tsteq	r0, sp, lsr r0
   10b70:	0000ce4f 	andeq	ip, r0, pc, asr #28
   10b74:	550c0000 	strpl	r0, [ip, #-0]
   10b78:	0100003d 	tsteq	r0, sp, lsr r0
   10b7c:	0000b850 	andeq	fp, r0, r0, asr r8
   10b80:	8f0c0400 	svchi	0x000c0400
   10b84:	0100003c 	tsteq	r0, ip, lsr r0
   10b88:	0000ad51 	andeq	sl, r0, r1, asr sp
   10b8c:	420c0600 	andmi	r0, ip, #0, 12
   10b90:	0100003c 	tsteq	r0, ip, lsr r0
   10b94:	0000a252 	andeq	sl, r0, r2, asr r2
   10b98:	02000700 	andeq	r0, r0, #0, 14
   10b9c:	00003d81 	andeq	r3, r0, r1, lsl #27
   10ba0:	03605301 	cmneq	r0, #67108864	; 0x4000000
   10ba4:	b30d0000 	movwlt	r0, #53248	; 0xd000
   10ba8:	0200000f 	andeq	r0, r0, #15
   10bac:	be0301dc 	mcrlt	1, 0, r0, cr3, cr12, {6}
   10bb0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   10bb4:	00000f6d 	andeq	r0, r0, sp, ror #30
   10bb8:	ce01dc02 	cdpgt	12, 0, cr13, cr1, cr2, {0}
   10bbc:	00000000 	andeq	r0, r0, r0
   10bc0:	000fc80f 	andeq	ip, pc, pc, lsl #16
   10bc4:	022c0200 	eoreq	r0, ip, #0, 4
   10bc8:	000000ce 	andeq	r0, r0, lr, asr #1
   10bcc:	10cc1003 	sbcne	r1, ip, r3
   10bd0:	2a040000 	bcs	110bd8 <__ccfg+0xf0c30>
   10bd4:	7c110302 	ldcvc	3, cr0, [r1], {2}
   10bd8:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
   10bdc:	0000c3e9 	andeq	ip, r0, r9, ror #7
   10be0:	03fb0300 	mvnseq	r0, #0, 6
   10be4:	cc120000 	ldcgt	0, cr0, [r2], {-0}
   10be8:	05000036 	streq	r0, [r0, #-54]	; 0xffffffca
   10bec:	0000cee9 	andeq	ip, r0, r9, ror #29
   10bf0:	39d51300 	ldmibcc	r5, {r8, r9, ip}^
   10bf4:	ef050000 	svc	0x00050000
   10bf8:	000000c3 	andeq	r0, r0, r3, asr #1
   10bfc:	3c570d00 	mrrccc	13, 0, r0, r7, cr0
   10c00:	5c040000 	stcpl	0, cr0, [r4], {-0}
   10c04:	04150302 	ldreq	r0, [r5], #-770	; 0xfffffcfe
   10c08:	310e0000 	mrscc	r0, (UNDEF: 14)
   10c0c:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
   10c10:	00ce025c 	sbceq	r0, lr, ip, asr r2
   10c14:	10000000 	andne	r0, r0, r0
   10c18:	000030f7 	strdeq	r3, [r0], -r7
   10c1c:	03014003 	movweq	r4, #4099	; 0x1003
   10c20:	003cdb0f 	eorseq	sp, ip, pc, lsl #22
   10c24:	023e0400 	eorseq	r0, lr, #0, 8
   10c28:	0000042b 	andeq	r0, r0, fp, lsr #8
   10c2c:	02010303 	andeq	r0, r1, #201326592	; 0xc000000
   10c30:	00000caa 	andeq	r0, r0, sl, lsr #25
   10c34:	003d2b14 	eorseq	r2, sp, r4, lsl fp
   10c38:	009e0a00 	addseq	r0, lr, r0, lsl #20
   10c3c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
   10c40:	01000000 	mrseq	r0, (UNDEF: 0)
   10c44:	0005cd9c 	muleq	r5, ip, sp
   10c48:	3c871500 	cfstr32cc	mvfx1, [r7], {0}
   10c4c:	7b010000 	blvc	50c54 <__ccfg+0x30cac>
   10c50:	000000ce 	andeq	r0, r0, lr, asr #1
   10c54:	000048d7 	ldrdeq	r4, [r0], -r7
   10c58:	003c4916 	eorseq	r4, ip, r6, lsl r9
   10c5c:	ce7c0100 	rpwgte	f0, f4, f0
   10c60:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   10c64:	03a41707 			; <UNDEFINED> instruction: 0x03a41707
   10c68:	00000000 	andeq	r0, r0, r0
   10c6c:	13200000 	nopne	{0}	; <UNPREDICTABLE>
   10c70:	81010000 	mrshi	r0, (UNDEF: 1)
   10c74:	0000047d 	andeq	r0, r0, sp, ror r4
   10c78:	0003b118 	andeq	fp, r3, r8, lsl r1
   10c7c:	19000100 	stmdbne	r0, {r8}
   10c80:	000003be 			; <UNDEFINED> instruction: 0x000003be
   10c84:	00000000 	andeq	r0, r0, r0
   10c88:	00000004 	andeq	r0, r0, r4
   10c8c:	151a8201 	ldrne	r8, [sl, #-513]	; 0xfffffdff
   10c90:	00000004 	andeq	r0, r0, r4
   10c94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10c98:	01000000 	mrseq	r0, (UNDEF: 0)
   10c9c:	0004a9a1 	andeq	sl, r4, r1, lsr #19
   10ca0:	00001b00 	andeq	r1, r0, r0, lsl #22
   10ca4:	08de0000 	ldmeq	lr, {}^	; <UNPREDICTABLE>
   10ca8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   10cac:	000003cb 	andeq	r0, r0, fp, asr #7
   10cb0:	00000000 	andeq	r0, r0, r0
   10cb4:	00000006 	andeq	r0, r0, r6
   10cb8:	1e19b101 	mnfnee	f3, f1
   10cbc:	00000004 	andeq	r0, r0, r4
   10cc0:	04000000 	streq	r0, [r0], #-0
   10cc4:	01000000 	mrseq	r0, (UNDEF: 0)
   10cc8:	03fb1ab2 	mvnseq	r1, #729088	; 0xb2000
   10ccc:	00000000 	andeq	r0, r0, r0
   10cd0:	000a0000 	andeq	r0, sl, r0
   10cd4:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   10cd8:	000004e1 	andeq	r0, r0, r1, ror #9
   10cdc:	00040818 	andeq	r0, r4, r8, lsl r8
   10ce0:	19001100 	stmdbne	r0, {r8, ip}
   10ce4:	000003cb 	andeq	r0, r0, fp, asr #7
   10ce8:	00000000 	andeq	r0, r0, r0
   10cec:	00000004 	andeq	r0, r0, r4
   10cf0:	1e19b901 	vnmlsne.f16	s22, s18, s2	; <UNPREDICTABLE>
   10cf4:	00000004 	andeq	r0, r0, r4
   10cf8:	02000000 	andeq	r0, r0, #0
   10cfc:	01000000 	mrseq	r0, (UNDEF: 0)
   10d00:	03cb19ba 	biceq	r1, fp, #3047424	; 0x2e8000
   10d04:	00000000 	andeq	r0, r0, r0
   10d08:	00060000 	andeq	r0, r6, r0
   10d0c:	cf010000 	svcgt	0x00010000
   10d10:	00041e19 	andeq	r1, r4, r9, lsl lr
   10d14:	00000000 	andeq	r0, r0, r0
   10d18:	00000200 	andeq	r0, r0, r0, lsl #4
   10d1c:	1cd00100 	ldfnee	f0, [r0], {0}
   10d20:	00000000 	andeq	r0, r0, r0
   10d24:	0000052e 	andeq	r0, r0, lr, lsr #10
   10d28:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
   10d2c:	0007ff0a 	andeq	pc, r7, sl, lsl #30
   10d30:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d34:	00053f00 	andeq	r3, r5, r0, lsl #30
   10d38:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d3c:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
   10d40:	00001e00 	andeq	r1, r0, r0, lsl #28
   10d44:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   10d48:	05570000 	ldrbeq	r0, [r7, #-0]
   10d4c:	011d0000 	tsteq	sp, r0
   10d50:	1d310151 	ldfnes	f0, [r1, #-324]!	; 0xfffffebc
   10d54:	33015001 	movwcc	r5, #4097	; 0x1001
   10d58:	00001e00 	andeq	r1, r0, r0, lsl #28
   10d5c:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   10d60:	056f0000 	strbeq	r0, [pc, #-0]!	; 10d68 <__exidx_end+0xb28c>
   10d64:	011d0000 	tsteq	sp, r0
   10d68:	1d330151 	ldfnes	f0, [r3, #-324]!	; 0xfffffebc
   10d6c:	34015001 	strcc	r5, [r1], #-1
   10d70:	00001e00 	andeq	r1, r0, r0, lsl #28
   10d74:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
   10d78:	05820000 	streq	r0, [r2]
   10d7c:	011d0000 	tsteq	sp, r0
   10d80:	00310150 	eorseq	r0, r1, r0, asr r1
   10d84:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d88:	00059100 	andeq	r9, r5, r0, lsl #2
   10d8c:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d90:	1c003701 	stcne	7, cr3, [r0], {1}
   10d94:	00000000 	andeq	r0, r0, r0
   10d98:	000005a0 	andeq	r0, r0, r0, lsr #11
   10d9c:	0150011d 	cmpeq	r0, sp, lsl r1
   10da0:	001c0037 	andseq	r0, ip, r7, lsr r0
   10da4:	b0000000 	andlt	r0, r0, r0
   10da8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10dac:	76025001 	strvc	r5, [r2], -r1
   10db0:	001c0000 	andseq	r0, ip, r0
   10db4:	c0000000 	andgt	r0, r0, r0
   10db8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10dbc:	76025001 	strvc	r5, [r2], -r1
   10dc0:	001f0000 	andseq	r0, pc, r0
   10dc4:	1d000000 	stcne	0, cr0, [r0, #-0]
   10dc8:	76025001 	strvc	r5, [r2], -r1
   10dcc:	20000000 	andcs	r0, r0, r0
   10dd0:	00003bcd 	andeq	r3, r0, sp, asr #23
   10dd4:	d001010a 	andle	r0, r1, sl, lsl #2
   10dd8:	20000044 	andcs	r0, r0, r4, asr #32
   10ddc:	01000002 	tsteq	r0, r2
   10de0:	0007c89c 	muleq	r7, ip, r8
   10de4:	3ccd2100 	stfcce	f2, [sp], {0}
   10de8:	da010000 	ble	50df0 <__ccfg+0x30e48>
   10dec:	000000ce 	andeq	r0, r0, lr, asr #1
   10df0:	00004902 	andeq	r4, r0, r2, lsl #18
   10df4:	003b7615 	eorseq	r7, fp, r5, lsl r6
   10df8:	c3dc0100 	bicsgt	r0, ip, #0, 2
   10dfc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
   10e00:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10e04:	00003ce7 	andeq	r3, r0, r7, ror #25
   10e08:	00c3dd01 	sbceq	sp, r3, r1, lsl #26
   10e0c:	494c0000 	stmdbmi	ip, {}^	; <UNPREDICTABLE>
   10e10:	ad150000 	ldcge	0, cr0, [r5, #-0]
   10e14:	0100003c 	tsteq	r0, ip, lsr r0
   10e18:	0000c3de 	ldrdeq	ip, [r0], -lr
   10e1c:	0049a600 	subeq	sl, r9, r0, lsl #12
   10e20:	3d731500 	cfldr64cc	mvdx1, [r3, #-0]
   10e24:	df010000 	svcle	0x00010000
   10e28:	000000c3 	andeq	r0, r0, r3, asr #1
   10e2c:	000049c4 	andeq	r4, r0, r4, asr #19
   10e30:	003b6815 	eorseq	r6, fp, r5, lsl r8
   10e34:	c3e00100 	mvngt	r0, #0, 2
   10e38:	e2000000 	and	r0, r0, #0
   10e3c:	22000049 	andcs	r0, r0, #73	; 0x49
   10e40:	00003b7e 	andeq	r3, r0, lr, ror fp
   10e44:	00c3e101 	sbceq	lr, r3, r1, lsl #2
   10e48:	53010000 	movwpl	r0, #4096	; 0x1000
   10e4c:	00362015 	eorseq	r2, r6, r5, lsl r0
   10e50:	cee20100 	cdpgt	1, 14, cr0, cr2, cr0, {0}
   10e54:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
   10e58:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10e5c:	00003d0b 	andeq	r3, r0, fp, lsl #26
   10e60:	00cee301 	sbceq	lr, lr, r1, lsl #6
   10e64:	4a080000 	bmi	210e6c <__ccfg+0x1f0ec4>
   10e68:	92150000 	andsls	r0, r5, #0
   10e6c:	0100003b 	tsteq	r0, fp, lsr r0
   10e70:	0000cee4 	andeq	ip, r0, r4, ror #29
   10e74:	004a2700 	subeq	r2, sl, r0, lsl #14
   10e78:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   10e7c:	cee50100 	cdpgt	1, 14, cr0, cr5, cr0, {0}
   10e80:	3a000000 	bcc	10e88 <__exidx_end+0xb3ac>
   10e84:	2300004a 	movwcs	r0, #74	; 0x4a
   10e88:	00696964 	rsbeq	r6, r9, r4, ror #18
   10e8c:	00cee601 	sbceq	lr, lr, r1, lsl #12
   10e90:	4a700000 	bmi	1c10e98 <__ccfg+0x1bf0ef0>
   10e94:	74230000 	strtvc	r0, [r3], #-0
   10e98:	e7010069 	str	r0, [r1, -r9, rrx]
   10e9c:	000000ce 	andeq	r0, r0, lr, asr #1
   10ea0:	00004aa6 	andeq	r4, r0, r6, lsr #21
   10ea4:	00646323 	rsbeq	r6, r4, r3, lsr #6
   10ea8:	00cee801 	sbceq	lr, lr, r1, lsl #16
   10eac:	4b160000 	blmi	590eb4 <__ccfg+0x570f0c>
   10eb0:	63230000 			; <UNDEFINED> instruction: 0x63230000
   10eb4:	e901006c 	stmdb	r1, {r2, r3, r5, r6}
   10eb8:	000000ce 	andeq	r0, r0, lr, asr #1
   10ebc:	00004b29 	andeq	r4, r0, r9, lsr #22
   10ec0:	00055015 	andeq	r5, r5, r5, lsl r0
   10ec4:	ceea0100 	cdpgt	1, 14, cr0, cr10, cr0, {0}
   10ec8:	3c000000 	stccc	0, cr0, [r0], {-0}
   10ecc:	2400004b 	strcs	r0, [r0], #-75	; 0xffffffb5
   10ed0:	eb01006b 	bl	51084 <__ccfg+0x310dc>
   10ed4:	000000ce 	andeq	r0, r0, lr, asr #1
   10ed8:	003c7f13 	eorseq	r7, ip, r3, lsl pc
   10edc:	ceec0100 	cdpgt	1, 14, cr0, cr12, cr0, {0}
   10ee0:	15000000 	strne	r0, [r0, #-0]
   10ee4:	00003c6d 	andeq	r3, r0, sp, ror #24
   10ee8:	00ceed01 	sbceq	lr, lr, r1, lsl #26
   10eec:	4b5a0000 	blmi	1690ef4 <__ccfg+0x1670f4c>
   10ef0:	3d150000 	ldccc	0, cr0, [r5, #-0]
   10ef4:	0100003c 	tsteq	r0, ip, lsr r0
   10ef8:	0000ceee 	andeq	ip, r0, lr, ror #29
   10efc:	004b8300 	subeq	r8, fp, r0, lsl #6
   10f00:	3c681500 	cfstr64cc	mvdx1, [r8], #-0
   10f04:	ef010000 	svc	0x00010000
   10f08:	000000ce 	andeq	r0, r0, lr, asr #1
   10f0c:	00004ba2 	andeq	r4, r0, r2, lsr #23
   10f10:	003d4815 	eorseq	r4, sp, r5, lsl r8
   10f14:	c8f00100 	ldmgt	r0!, {r8}^
   10f18:	e6000007 	str	r0, [r0], -r7
   10f1c:	2500004b 	strcs	r0, [r0, #-75]	; 0xffffffb5
   10f20:	000044fe 	strdeq	r4, [r0], -lr
   10f24:	00000012 	andeq	r0, r0, r2, lsl r0
   10f28:	0000073b 	andeq	r0, r0, fp, lsr r7
   10f2c:	003cf326 	eorseq	pc, ip, r6, lsr #6
   10f30:	010a0100 	mrseq	r0, (UNDEF: 26)
   10f34:	000000c3 	andeq	r0, r0, r3, asr #1
   10f38:	00004bfe 	strdeq	r4, [r0], -lr
   10f3c:	03d42700 	bicseq	r2, r4, #0, 14
   10f40:	45240000 	strmi	r0, [r4, #-0]!
   10f44:	00060000 	andeq	r0, r6, r0
   10f48:	11010000 	mrsne	r0, (UNDEF: 1)
   10f4c:	00076801 	andeq	r6, r7, r1, lsl #16
   10f50:	03e42800 	mvneq	r2, #0, 16
   10f54:	24290000 	strtcs	r0, [r9], #-0
   10f58:	06000045 	streq	r0, [r0], -r5, asr #32
   10f5c:	2a000000 	bcs	10f64 <__exidx_end+0xb488>
   10f60:	000003ef 	andeq	r0, r0, pc, ror #7
   10f64:	00004c11 	andeq	r4, r0, r1, lsl ip
   10f68:	d4270000 	strtle	r0, [r7], #-0
   10f6c:	3c000003 	stccc	0, cr0, [r0], {3}
   10f70:	06000045 	streq	r0, [r0], -r5, asr #32
   10f74:	01000000 	mrseq	r0, (UNDEF: 0)
   10f78:	0795011b 			; <UNDEFINED> instruction: 0x0795011b
   10f7c:	e4280000 	strt	r0, [r8], #-0
   10f80:	29000003 	stmdbcs	r0, {r0, r1}
   10f84:	0000453c 	andeq	r4, r0, ip, lsr r5
   10f88:	00000006 	andeq	r0, r0, r6
   10f8c:	0003ef2a 	andeq	lr, r3, sl, lsr #30
   10f90:	004c2400 	subeq	r2, ip, r0, lsl #8
   10f94:	2b000000 	blcs	10f9c <__exidx_end+0xb4c0>
   10f98:	000003d4 	ldrdeq	r0, [r0], -r4
   10f9c:	00004546 	andeq	r4, r0, r6, asr #10
   10fa0:	00001338 	andeq	r1, r0, r8, lsr r3
   10fa4:	be011f01 	cdplt	15, 0, cr1, cr1, cr1, {0}
   10fa8:	28000007 	stmdacs	r0, {r0, r1, r2}
   10fac:	000003e4 	andeq	r0, r0, r4, ror #7
   10fb0:	0013382c 	andseq	r3, r3, ip, lsr #16
   10fb4:	03ef2a00 	mvneq	r2, #0, 20
   10fb8:	4c370000 	ldcmi	0, cr0, [r7], #-0
   10fbc:	00000000 	andeq	r0, r0, r0
   10fc0:	0044f01b 	subeq	pc, r4, fp, lsl r0	; <UNPREDICTABLE>
   10fc4:	00091b00 	andeq	r1, r9, r0, lsl #22
   10fc8:	04050000 	streq	r0, [r5], #-0
   10fcc:	000007ce 	andeq	r0, r0, lr, asr #15
   10fd0:	0000ce2d 	andeq	ip, r0, sp, lsr #28
   10fd4:	3ba32000 	blcc	fe8d8fdc <_estack+0xde8d3fdc>
   10fd8:	170a0000 	strne	r0, [sl, -r0]
   10fdc:	0046f001 	subeq	pc, r6, r1
   10fe0:	00006000 	andeq	r6, r0, r0
   10fe4:	339c0100 	orrscc	r0, ip, #0, 2
   10fe8:	26000008 	strcs	r0, [r0], -r8
   10fec:	00003b76 	andeq	r3, r0, r6, ror fp
   10ff0:	c301b801 	movwgt	fp, #6145	; 0x1801
   10ff4:	4a000000 	bmi	10ffc <__exidx_end+0xb520>
   10ff8:	2600004c 	strcs	r0, [r0], -ip, asr #32
   10ffc:	00003c97 	muleq	r0, r7, ip
   11000:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
   11004:	75000000 	strvc	r0, [r0, #-0]
   11008:	2600004c 	strcs	r0, [r0], -ip, asr #32
   1100c:	00002f35 	andeq	r2, r0, r5, lsr pc
   11010:	ce01ba01 	vmlagt.f32	s22, s2, s2
   11014:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
   11018:	2600004c 	strcs	r0, [r0], -ip, asr #32
   1101c:	00003c6d 	andeq	r3, r0, sp, ror #24
   11020:	ce01bb01 	vmlagt.f64	d11, d1, d1
   11024:	af000000 	svcge	0x00000000
   11028:	1b00004c 	blne	11160 <__exidx_end+0xb684>
   1102c:	000046fe 	strdeq	r4, [r0], -lr
   11030:	0000091b 	andeq	r0, r0, fp, lsl r9
   11034:	3d942000 	ldccc	0, cr2, [r4]
   11038:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
   1103c:	00000001 	andeq	r0, r0, r1
   11040:	00007800 	andeq	r7, r0, r0, lsl #16
   11044:	8a9c0100 	bhi	fe71144c <_estack+0xde70c44c>
   11048:	26000008 	strcs	r0, [r0], -r8
   1104c:	00003cc0 	andeq	r3, r0, r0, asr #25
   11050:	ce01e701 	cdpgt	7, 0, cr14, cr1, cr1, {0}
   11054:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
   11058:	2600004c 	strcs	r0, [r0], -ip, asr #32
   1105c:	00003d66 	andeq	r3, r0, r6, ror #26
   11060:	ce01e801 	cdpgt	8, 0, cr14, cr1, cr1, {0}
   11064:	eb000000 	bl	1106c <__exidx_end+0xb590>
   11068:	2600004c 	strcs	r0, [r0], -ip, asr #32
   1106c:	00003620 	andeq	r3, r0, r0, lsr #12
   11070:	ce01e901 	vmlagt.f16	s28, s2, s2	; <UNPREDICTABLE>
   11074:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
   11078:	2600004c 	strcs	r0, [r0], -ip, asr #32
   1107c:	00003d14 	andeq	r3, r0, r4, lsl sp
   11080:	ce01ea01 	vmlagt.f32	s28, s2, s2
   11084:	11000000 	mrsne	r0, (UNDEF: 0)
   11088:	0000004d 	andeq	r0, r0, sp, asr #32
   1108c:	003c152e 	eorseq	r1, ip, lr, lsr #10
   11090:	01420a00 	cmpeq	r2, r0, lsl #20
   11094:	000000ce 	andeq	r0, r0, lr, asr #1
   11098:	00004750 	andeq	r4, r0, r0, asr r7
   1109c:	00000018 	andeq	r0, r0, r8, lsl r0
   110a0:	c1229c01 			; <UNDEFINED> instruction: 0xc1229c01
   110a4:	0100003d 	tsteq	r0, sp, lsr r0
   110a8:	00039955 	andeq	r9, r3, r5, asr r9
   110ac:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
   110b0:	2f200006 	svccs	0x00200006
   110b4:	000000ce 	andeq	r0, r0, lr, asr #1
   110b8:	000008c1 	andeq	r0, r0, r1, asr #17
   110bc:	0008c130 	andeq	ip, r8, r0, lsr r1
   110c0:	03000c00 	movweq	r0, #3072	; 0xc00
   110c4:	2ca80704 	stccs	7, cr0, [r8], #16
   110c8:	fb220000 	blx	8910d2 <__ccfg+0x87112a>
   110cc:	0100003c 	tsteq	r0, ip, lsr r0
   110d0:	0008d961 	andeq	sp, r8, r1, ror #18
   110d4:	00030500 	andeq	r0, r3, r0, lsl #10
   110d8:	2d000000 	stccs	0, cr0, [r0, #-0]
   110dc:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   110e0:	002a0231 	eoreq	r0, sl, r1, lsr r2
   110e4:	ef990900 	svc	0x00990900
   110e8:	08000008 	stmdaeq	r0, {r3}
   110ec:	000000d9 	ldrdeq	r0, [r0], -r9
   110f0:	2d123100 	ldfcss	f3, [r2, #-0]
   110f4:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
   110f8:	00000905 	andeq	r0, r0, r5, lsl #18
   110fc:	0000ce08 	andeq	ip, r0, r8, lsl #28
   11100:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   11104:	32000000 	andcc	r0, r0, #0
   11108:	00002d4b 	andeq	r2, r0, fp, asr #26
   1110c:	ce011003 	cdpgt	0, 0, cr1, cr1, cr3, {0}
   11110:	1b000000 	blne	11118 <__exidx_end+0xb63c>
   11114:	08000009 	stmdaeq	r0, {r0, r3}
   11118:	000000ce 	andeq	r0, r0, lr, asr #1
   1111c:	2b653300 	blcs	195dd24 <__ccfg+0x193dd7c>
   11120:	aa0b0000 	bge	2d1128 <__ccfg+0x2b1180>
   11124:	000000c3 	andeq	r0, r0, r3, asr #1
   11128:	0003cc00 	andeq	ip, r3, r0, lsl #24
   1112c:	7b000400 	blvc	12134 <__exidx_end+0xc658>
   11130:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   11134:	002a3401 	eoreq	r3, sl, r1, lsl #8
   11138:	40a80100 	adcmi	r0, r8, r0, lsl #2
   1113c:	2afb0000 	bcs	ffed1144 <_estack+0xdfecc144>
   11140:	13b00000 	movsne	r0, #0
   11144:	00000000 	andeq	r0, r0, r0
   11148:	89d20000 	ldmibhi	r2, {}^	; <UNPREDICTABLE>
   1114c:	01020000 	mrseq	r0, (UNDEF: 2)
   11150:	000c6006 	andeq	r6, ip, r6
   11154:	08010200 	stmdaeq	r1, {r9}
   11158:	00000c5e 	andeq	r0, r0, lr, asr ip
   1115c:	6e050202 	cdpvs	2, 0, cr0, cr5, cr2, {0}
   11160:	0200000a 	andeq	r0, r0, #10
   11164:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
   11168:	04020000 	streq	r0, [r2], #-0
   1116c:	00080005 	andeq	r0, r8, r5
   11170:	29a70300 	stmibcs	r7!, {r8, r9}
   11174:	41030000 	mrsmi	r0, (UNDEF: 3)
   11178:	00000053 	andeq	r0, r0, r3, asr r0
   1117c:	28070402 	stmdacs	r7, {r1, sl}
   11180:	02000004 	andeq	r0, r0, #4
   11184:	07fb0508 	ldrbeq	r0, [fp, r8, lsl #10]!
   11188:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   1118c:	00042307 	andeq	r2, r4, r7, lsl #6
   11190:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11194:	00746e69 	rsbseq	r6, r4, r9, ror #28
   11198:	2d070402 	cfstrscs	mvf0, [r7, #-8]
   1119c:	03000004 	movweq	r0, #4
   111a0:	000029a9 	andeq	r2, r0, r9, lsr #19
   111a4:	00482004 	subeq	r2, r8, r4
   111a8:	01050000 	mrseq	r0, (UNDEF: 5)
   111ac:	00a26302 	adceq	r6, r2, r2, lsl #6
   111b0:	e2060000 	and	r0, r6, #0
   111b4:	0000003f 	andeq	r0, r0, pc, lsr r0
   111b8:	00402206 	subeq	r2, r0, r6, lsl #4
   111bc:	92060200 	andls	r0, r6, #0, 4
   111c0:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   111c4:	003dd206 	eorseq	sp, sp, r6, lsl #4
   111c8:	03000800 	movweq	r0, #2048	; 0x800
   111cc:	00003f7e 	andeq	r3, r0, lr, ror pc
   111d0:	00816802 	addeq	r6, r1, r2, lsl #16
   111d4:	01050000 	mrseq	r0, (UNDEF: 5)
   111d8:	00daa502 	sbcseq	sl, sl, r2, lsl #10
   111dc:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
   111e0:	7f000040 	svcvc	0x00000040
   111e4:	003dea06 	eorseq	lr, sp, r6, lsl #20
   111e8:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
   111ec:	01000041 	tsteq	r0, r1, asr #32
   111f0:	003fd606 	eorseq	sp, pc, r6, lsl #12
   111f4:	3b060200 	blcc	1919fc <__ccfg+0x171a54>
   111f8:	03000041 	movweq	r0, #65	; 0x41
   111fc:	003ecf06 	eorseq	ip, lr, r6, lsl #30
   11200:	03000400 	movweq	r0, #1024	; 0x400
   11204:	00004155 	andeq	r4, r0, r5, asr r1
   11208:	00adac02 	adceq	sl, sp, r2, lsl #24
   1120c:	01070000 	mrseq	r0, (UNDEF: 7)
   11210:	25013d02 	strcs	r3, [r1, #-3330]	; 0xfffff2fe
   11214:	06000001 	streq	r0, [r0], -r1
   11218:	00003fac 	andeq	r3, r0, ip, lsr #31
   1121c:	3e9a067f 	mrccc	6, 4, r0, cr10, cr15, {3}
   11220:	06000000 	streq	r0, [r0], -r0
   11224:	00003ef6 	strdeq	r3, [r0], -r6
   11228:	3f320601 	svccc	0x00320601
   1122c:	06020000 	streq	r0, [r2], -r0
   11230:	0000407d 	andeq	r4, r0, sp, ror r0
   11234:	3df60603 	ldclcc	6, cr0, [r6, #12]!
   11238:	06040000 	streq	r0, [r4], -r0
   1123c:	00003ebe 			; <UNDEFINED> instruction: 0x00003ebe
   11240:	40570605 	subsmi	r0, r7, r5, lsl #12
   11244:	06060000 	streq	r0, [r6], -r0
   11248:	0000406a 	andeq	r4, r0, sl, rrx
   1124c:	82080007 	andhi	r0, r8, #7
   11250:	0200003e 	andeq	r0, r0, #62	; 0x3e
   11254:	00e50147 	rsceq	r0, r5, r7, asr #2
   11258:	01070000 	mrseq	r0, (UNDEF: 7)
   1125c:	5f015902 	svcpl	0x00015902
   11260:	06000001 	streq	r0, [r0], -r1
   11264:	00003f23 	andeq	r3, r0, r3, lsr #30
   11268:	3f4c067f 	svccc	0x004c067f
   1126c:	06000000 	streq	r0, [r0], -r0
   11270:	00003fc8 	andeq	r3, r0, r8, asr #31
   11274:	3e0f0601 	cfmadd32cc	mvax0, mvfx0, mvfx15, mvfx1
   11278:	06020000 	streq	r0, [r2], -r0
   1127c:	00004032 	andeq	r4, r0, r2, lsr r0
   11280:	3ee50603 	cdpcc	6, 14, cr0, cr5, cr3, {0}
   11284:	00040000 	andeq	r0, r4, r0
   11288:	003eab08 	eorseq	sl, lr, r8, lsl #22
   1128c:	01600200 	cmneq	r0, r0, lsl #4
   11290:	00000131 	andeq	r0, r0, r1, lsr r1
   11294:	b8020107 	stmdalt	r2, {r0, r1, r2, r8}
   11298:	00019901 	andeq	r9, r1, r1, lsl #18
   1129c:	3f620600 	svccc	0x00620600
   112a0:	067f0000 	ldrbteq	r0, [pc], -r0
   112a4:	0000408e 	andeq	r4, r0, lr, lsl #1
   112a8:	3ff3060a 	svccc	0x00f3060a
   112ac:	06140000 	ldreq	r0, [r4], -r0
   112b0:	00004018 	andeq	r4, r0, r8, lsl r0
   112b4:	3fbe0615 	svccc	0x00be0615
   112b8:	06160000 	ldreq	r0, [r6], -r0
   112bc:	00004044 	andeq	r4, r0, r4, asr #32
   112c0:	8d080017 	stchi	0, cr0, [r8, #-92]	; 0xffffffa4
   112c4:	0200003e 	andeq	r0, r0, #62	; 0x3e
   112c8:	016b01bf 	strheq	r0, [fp, #-31]!	; 0xffffffe1
   112cc:	d4090000 	strle	r0, [r9], #-0
   112d0:	02000040 	andeq	r0, r0, #64	; 0x40
   112d4:	00760107 	rsbseq	r0, r6, r7, lsl #2
   112d8:	0a030000 	beq	d12e0 <__ccfg+0xb1338>
   112dc:	00003e21 	andeq	r3, r0, r1, lsr #28
   112e0:	5f016a02 	svcpl	0x00016a02
   112e4:	01000001 	tsteq	r0, r1
   112e8:	000001da 	ldrdeq	r0, [r0], -sl
   112ec:	003f5a0b 	eorseq	r5, pc, fp, lsl #20
   112f0:	5f680100 	svcpl	0x00680100
   112f4:	0b000001 	bleq	11300 <__exidx_end+0xb824>
   112f8:	00003e07 	andeq	r3, r0, r7, lsl #28
   112fc:	00766901 	rsbseq	r6, r6, r1, lsl #18
   11300:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11304:	00004182 	andeq	r4, r0, r2, lsl #3
   11308:	76013202 	strvc	r3, [r1], -r2, lsl #4
   1130c:	03000000 	movweq	r0, #0
   11310:	0041140c 	subeq	r1, r1, ip, lsl #8
   11314:	a2720200 	rsbsge	r0, r2, #0, 4
   11318:	00000000 	andeq	r0, r0, r0
   1131c:	10000000 	andne	r0, r0, r0
   11320:	01000000 	mrseq	r0, (UNDEF: 0)
   11324:	3e3e0d9c 	mrccc	13, 1, r0, cr14, cr12, {4}
   11328:	b6020000 	strlt	r0, [r2], -r0
   1132c:	000000da 	ldrdeq	r0, [r0], -sl
   11330:	00000000 	andeq	r0, r0, r0
   11334:	00000018 	andeq	r0, r0, r8, lsl r0
   11338:	02259c01 	eoreq	r9, r5, #256	; 0x100
   1133c:	790e0000 	stmdbvc	lr, {}	; <UNPREDICTABLE>
   11340:	0100003e 	tsteq	r0, lr, lsr r0
   11344:	0000da52 	andeq	sp, r0, r2, asr sl
   11348:	004d2400 	subeq	r2, sp, r0, lsl #8
   1134c:	b20f0000 	andlt	r0, pc, #0
   11350:	68000001 	stmdavs	r0, {r0}
   11354:	4c000047 	stcmi	0, cr0, [r0], {71}	; 0x47
   11358:	01000000 	mrseq	r0, (UNDEF: 0)
   1135c:	00026e9c 	muleq	r2, ip, lr
   11360:	01c31000 	biceq	r1, r3, r0
   11364:	4d4c0000 	stclmi	0, cr0, [ip, #-0]
   11368:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
   1136c:	6c000001 	stcvs	0, cr0, [r0], {1}
   11370:	1100004d 	tstne	r0, sp, asr #32
   11374:	00004778 	andeq	r4, r0, r8, ror r7
   11378:	0000000e 	andeq	r0, r0, lr
   1137c:	0001c312 	andeq	ip, r1, r2, lsl r3
   11380:	01ce1200 	biceq	r1, lr, r0, lsl #4
   11384:	a5130000 	ldrge	r0, [r3, #-0]
   11388:	78000001 	stmdavc	r0, {r0}
   1138c:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   11390:	01000000 	mrseq	r0, (UNDEF: 0)
   11394:	14000070 	strne	r0, [r0], #-112	; 0xffffff90
   11398:	00003ffd 	strdeq	r3, [r0], -sp
   1139c:	25015102 	strcs	r5, [r1, #-258]	; 0xfffffefe
   113a0:	00000001 	andeq	r0, r0, r1
   113a4:	30000000 	andcc	r0, r0, r0
   113a8:	01000000 	mrseq	r0, (UNDEF: 0)
   113ac:	0002ca9c 	muleq	r2, ip, sl
   113b0:	404e0e00 	submi	r0, lr, r0, lsl #28
   113b4:	85010000 	strhi	r0, [r1, #-0]
   113b8:	00000125 	andeq	r0, r0, r5, lsr #2
   113bc:	00004da0 	andeq	r4, r0, r0, lsr #27
   113c0:	0040c80b 	subeq	ip, r0, fp, lsl #16
   113c4:	76860100 	strvc	r0, [r6], r0, lsl #2
   113c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   113cc:	00003f70 	andeq	r3, r0, r0, ror pc
   113d0:	00768701 	rsbseq	r8, r6, r1, lsl #14
   113d4:	4dc00000 	stclmi	0, cr0, [r0]
   113d8:	da130000 	ble	4d13e0 <__ccfg+0x4b1438>
   113dc:	00000001 	andeq	r0, r0, r1
   113e0:	04000000 	streq	r0, [r0], #-0
   113e4:	01000000 	mrseq	r0, (UNDEF: 0)
   113e8:	00001586 	andeq	r1, r0, r6, lsl #11
   113ec:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   113f0:	16000000 	strne	r0, [r0], -r0
   113f4:	000040f2 	strdeq	r4, [r0], -r2
   113f8:	76011902 	strvc	r1, [r1], -r2, lsl #18
   113fc:	03000000 	movweq	r0, #0
   11400:	000002e8 	andeq	r0, r0, r8, ror #5
   11404:	003edc17 	eorseq	sp, lr, r7, lsl ip
   11408:	011b0200 	tsteq	fp, r0, lsl #4
   1140c:	00000076 	andeq	r0, r0, r6, ror r0
   11410:	3e5c1400 	cdpcc	4, 5, cr1, cr12, cr0, {0}
   11414:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
   11418:	00019901 	andeq	r9, r1, r1, lsl #18
   1141c:	0047b400 	subeq	fp, r7, r0, lsl #8
   11420:	00006c00 	andeq	r6, r0, r0, lsl #24
   11424:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
   11428:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   1142c:	00003eb8 			; <UNDEFINED> instruction: 0x00003eb8
   11430:	0199a801 	orrseq	sl, r9, r1, lsl #16
   11434:	4dd30000 	ldclmi	0, cr0, [r3]
   11438:	430b0000 	movwmi	r0, #45056	; 0xb000
   1143c:	0100003f 	tsteq	r0, pc, lsr r0
   11440:	000076a9 	andeq	r7, r0, r9, lsr #13
   11444:	41091800 	tstmi	r9, r0, lsl #16
   11448:	aa010000 	bge	51450 <__ccfg+0x314a8>
   1144c:	00000076 	andeq	r0, r0, r6, ror r0
   11450:	a5195401 	ldrge	r5, [r9, #-1025]	; 0xfffffbff
   11454:	b6000001 	strlt	r0, [r0], -r1
   11458:	80000047 	andhi	r0, r0, r7, asr #32
   1145c:	01000013 	tsteq	r0, r3, lsl r0
   11460:	02ca1aa9 	sbceq	r1, sl, #692224	; 0xa9000
   11464:	47ba0000 	ldrmi	r0, [sl, r0]!
   11468:	13980000 	orrsne	r0, r8, #0
   1146c:	aa010000 	bge	51474 <__ccfg+0x314cc>
   11470:	0000035b 	andeq	r0, r0, fp, asr r3
   11474:	0013981b 	andseq	r9, r3, fp, lsl r8
   11478:	02db1000 	sbcseq	r1, fp, #0
   1147c:	4e300000 	cdpmi	0, 3, cr0, cr0, cr0, {0}
   11480:	00000000 	andeq	r0, r0, r0
   11484:	0047ce15 	subeq	ip, r7, r5, lsl lr
   11488:	0001b200 	andeq	fp, r1, r0, lsl #4
   1148c:	07090000 	streq	r0, [r9, -r0]
   11490:	0200003f 	andeq	r0, r0, #63	; 0x3f
   11494:	03720183 	cmneq	r2, #-1073741792	; 0xc0000020
   11498:	02030000 	andeq	r0, r3, #0
   1149c:	0caa0201 	sfmeq	f0, 4, [sl], #4
   114a0:	63090000 	movwvs	r0, #36864	; 0x9000
   114a4:	02000041 	andeq	r0, r0, #65	; 0x41
   114a8:	037201f0 	cmneq	r2, #240, 2	; 0x3c
   114ac:	1c030000 	stcne	0, cr0, [r3], {-0}
   114b0:	00003669 	andeq	r3, r0, r9, ror #12
   114b4:	20024302 	andcs	r4, r2, r2, lsl #6
   114b8:	16000048 	strne	r0, [r0], -r8, asr #32
   114bc:	01000000 	mrseq	r0, (UNDEF: 0)
   114c0:	03651d9c 	cmneq	r5, #156, 26	; 0x2700
   114c4:	48220000 	stmdami	r2!, {}	; <UNPREDICTABLE>
   114c8:	00040000 	andeq	r0, r4, r0
   114cc:	e2010000 	and	r0, r1, #0
   114d0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
   114d4:	00482615 	subeq	r2, r8, r5, lsl r6
   114d8:	0001b200 	andeq	fp, r1, r0, lsl #4
   114dc:	791e0000 	ldmdbvc	lr, {}	; <UNPREDICTABLE>
   114e0:	2a000003 	bcs	114f4 <__exidx_end+0xba18>
   114e4:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
   114e8:	01000000 	mrseq	r0, (UNDEF: 0)
   114ec:	482e15e3 	stmdami	lr!, {r0, r1, r5, r6, r7, r8, sl, ip}
   114f0:	02e80000 	rsceq	r0, r8, #0
   114f4:	00000000 	andeq	r0, r0, r0
   114f8:	0005a700 	andeq	sl, r5, r0, lsl #14
   114fc:	49000400 	stmdbmi	r0, {sl}
   11500:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
   11504:	002a3401 	eoreq	r3, sl, r1, lsl #8
   11508:	425a0100 	subsmi	r0, sl, #0, 2
   1150c:	2afb0000 	bcs	ffed1514 <_estack+0xdfecc514>
   11510:	13e80000 	mvnne	r0, #0
   11514:	00000000 	andeq	r0, r0, r0
   11518:	8c010000 	stchi	0, cr0, [r1], {-0}
   1151c:	01020000 	mrseq	r0, (UNDEF: 2)
   11520:	000c6006 	andeq	r6, ip, r6
   11524:	2a0f0300 	bcs	3d212c <__ccfg+0x3b2184>
   11528:	1d030000 	stcne	0, cr0, [r3, #-0]
   1152c:	00000037 	andeq	r0, r0, r7, lsr r0
   11530:	5e080102 	adfple	f0, f0, f2
   11534:	0200000c 	andeq	r0, r0, #12
   11538:	0a6e0502 	beq	1b92948 <__ccfg+0x1b729a0>
   1153c:	05030000 	streq	r0, [r3, #-0]
   11540:	0300002e 	movweq	r0, #46	; 0x2e
   11544:	0000502b 	andeq	r5, r0, fp, lsr #32
   11548:	07020200 	streq	r0, [r2, -r0, lsl #4]
   1154c:	00000d5b 	andeq	r0, r0, fp, asr sp
   11550:	00050402 	andeq	r0, r5, r2, lsl #8
   11554:	03000008 	movweq	r0, #8
   11558:	000029a7 	andeq	r2, r0, r7, lsr #19
   1155c:	00694103 	rsbeq	r4, r9, r3, lsl #2
   11560:	04020000 	streq	r0, [r2], #-0
   11564:	00042807 	andeq	r2, r4, r7, lsl #16
   11568:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   1156c:	000007fb 	strdeq	r0, [r0], -fp
   11570:	23070802 	movwcs	r0, #30722	; 0x7802
   11574:	04000004 	streq	r0, [r0], #-4
   11578:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   1157c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   11580:	00042d07 	andeq	r2, r4, r7, lsl #26
   11584:	2a110300 	bcs	45218c <__ccfg+0x4321e4>
   11588:	14040000 	strne	r0, [r4], #-0
   1158c:	0000002c 	andeq	r0, r0, ip, lsr #32
   11590:	002e0703 	eoreq	r0, lr, r3, lsl #14
   11594:	451a0400 	ldrmi	r0, [sl, #-1024]	; 0xfffffc00
   11598:	03000000 	movweq	r0, #0
   1159c:	000029a9 	andeq	r2, r0, r9, lsr #19
   115a0:	005e2004 	subseq	r2, lr, r4
   115a4:	d3050000 	movwle	r0, #20480	; 0x5000
   115a8:	01000041 	tsteq	r0, r1, asr #32
   115ac:	00e60389 	rsceq	r0, r6, r9, lsl #7
   115b0:	b5060000 	strlt	r0, [r6, #-0]
   115b4:	01000041 	tsteq	r0, r1, asr #32
   115b8:	0000a289 	andeq	sl, r0, r9, lsl #5
   115bc:	42260600 	eormi	r0, r6, #0, 12
   115c0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
   115c4:	000000a2 	andeq	r0, r0, r2, lsr #1
   115c8:	00428106 	subeq	r8, r2, r6, lsl #2
   115cc:	a2890100 	addge	r0, r9, #0, 2
   115d0:	07000000 	streq	r0, [r0, -r0]
   115d4:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
   115d8:	00e68c01 	rsceq	r8, r6, r1, lsl #24
   115dc:	02000000 	andeq	r0, r0, #0
   115e0:	0caa0201 	sfmeq	f0, 4, [sl], #4
   115e4:	34080000 	strcc	r0, [r8], #-0
   115e8:	01000042 	tsteq	r0, r2, asr #32
   115ec:	0000a2a9 	andeq	sl, r0, r9, lsr #5
   115f0:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
   115f4:	b5060000 	strlt	r0, [r6, #-0]
   115f8:	01000041 	tsteq	r0, r1, asr #32
   115fc:	0000a2a9 	andeq	sl, r0, r9, lsr #5
   11600:	42810600 	addmi	r0, r1, #0, 12
   11604:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
   11608:	000000a2 	andeq	r0, r0, r2, lsr #1
   1160c:	0041ce07 	subeq	ip, r1, r7, lsl #28
   11610:	a2ab0100 	adcge	r0, fp, #0, 2
   11614:	07000000 	streq	r0, [r0, -r0]
   11618:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
   1161c:	00e6ad01 	rsceq	sl, r6, r1, lsl #26
   11620:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11624:	000000ad 	andeq	r0, r0, sp, lsr #1
   11628:	00004838 	andeq	r4, r0, r8, lsr r8
   1162c:	00000028 	andeq	r0, r0, r8, lsr #32
   11630:	01719c01 	cmneq	r1, r1, lsl #24
   11634:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
   11638:	43000000 	movwmi	r0, #0
   1163c:	0a00004e 	beq	1177c <__exidx_end+0xbca0>
   11640:	000000c4 	andeq	r0, r0, r4, asr #1
   11644:	00004e88 	andeq	r4, r0, r8, lsl #29
   11648:	0000da0b 	andeq	sp, r0, fp, lsl #20
   1164c:	004ecd00 	subeq	ip, lr, r0, lsl #26
   11650:	00cf0c00 	sbceq	r0, pc, r0, lsl #24
   11654:	0d040000 	stceq	0, cr0, [r4, #-0]
   11658:	00004842 	andeq	r4, r0, r2, asr #16
   1165c:	00000594 	muleq	r0, r4, r5
   11660:	00485a0e 	subeq	r5, r8, lr, lsl #20
   11664:	00059f00 	andeq	r9, r5, r0, lsl #30
   11668:	830f0000 	movwhi	r0, #61440	; 0xf000
   1166c:	01000038 	tsteq	r0, r8, lsr r0
   11670:	486001ca 	stmdami	r0!, {r1, r3, r6, r7, r8}^
   11674:	00080000 	andeq	r0, r8, r0
   11678:	9c010000 	stcls	0, cr0, [r1], {-0}
   1167c:	000001d1 	ldrdeq	r0, [r0], -r1
   11680:	0011af10 	andseq	sl, r1, r0, lsl pc
   11684:	a2420200 	subge	r0, r2, #0, 4
   11688:	f3000000 	vhadd.u8	d0, d0, d0
   1168c:	1000004e 	andne	r0, r0, lr, asr #32
   11690:	00004195 	muleq	r0, r5, r1
   11694:	00a24202 	adceq	r4, r2, r2, lsl #4
   11698:	4f140000 	svcmi	0x00140000
   1169c:	2c100000 	ldccs	0, cr0, [r0], {-0}
   116a0:	02000042 	andeq	r0, r0, #66	; 0x42
   116a4:	0000a243 	andeq	sl, r0, r3, asr #4
   116a8:	004f3500 	subeq	r3, pc, r0, lsl #10
   116ac:	48681100 	stmdami	r8!, {r8, ip}^
   116b0:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
   116b4:	01120000 	tsteq	r2, r0
   116b8:	01f30351 	mvnseq	r0, r1, asr r3
   116bc:	50011252 	andpl	r1, r1, r2, asr r2
   116c0:	5001f307 	andpl	pc, r1, r7, lsl #6
   116c4:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
   116c8:	460f0000 	strmi	r0, [pc], -r0
   116cc:	01000042 	tsteq	r0, r2, asr #32
   116d0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   116d4:	00220000 	eoreq	r0, r2, r0
   116d8:	9c010000 	stcls	0, cr0, [r1], {-0}
   116dc:	000002ea 	andeq	r0, r0, sl, ror #5
   116e0:	0011af10 	andseq	sl, r1, r0, lsl pc
   116e4:	a2570200 	subsge	r0, r7, #0, 4
   116e8:	56000000 	strpl	r0, [r0], -r0
   116ec:	1000004f 	andne	r0, r0, pc, asr #32
   116f0:	00004195 	muleq	r0, r5, r1
   116f4:	00a25702 	adceq	r5, r2, r2, lsl #14
   116f8:	4f770000 	svcmi	0x00770000
   116fc:	38100000 	ldmdacc	r0, {}	; <UNPREDICTABLE>
   11700:	02000022 	andeq	r0, r0, #34	; 0x22
   11704:	0000a258 	andeq	sl, r0, r8, asr r2
   11708:	004f9800 	subeq	r9, pc, r0, lsl #16
   1170c:	41ef1000 	mvnmi	r1, r0
   11710:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
   11714:	000000a2 	andeq	r0, r0, r2, lsr #1
   11718:	00004fe3 	andeq	r4, r0, r3, ror #31
   1171c:	00427513 	subeq	r7, r2, r3, lsl r5
   11720:	a25a0200 	subsge	r0, sl, #0, 4
   11724:	04000000 	streq	r0, [r0], #-0
   11728:	13000050 	movwne	r0, #80	; 0x50
   1172c:	000041fa 	strdeq	r4, [r0], -sl
   11730:	00a25b02 	adceq	r5, r2, r2, lsl #22
   11734:	50980000 	addspl	r0, r8, r0
   11738:	00110000 	andseq	r0, r1, r0
   1173c:	2a000000 	bcs	11744 <__exidx_end+0xbc68>
   11740:	12000001 	andne	r0, r0, #1
   11744:	f3455101 	vrhadd.u8	d21, d5, d1
   11748:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   1174c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
   11750:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   11754:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   11758:	40131600 	andsmi	r1, r3, r0, lsl #12
   1175c:	01f33024 	mvnseq	r3, r4, lsr #32
   11760:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
   11764:	01f35201 	mvnseq	r5, r1, lsl #4
   11768:	30254052 	eorcc	r4, r5, r2, asr r0
   1176c:	0001282e 	andeq	r2, r1, lr, lsr #16
   11770:	01f31316 	mvnseq	r1, r6, lsl r3
   11774:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
   11778:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
   1177c:	16000128 	strne	r0, [r0], -r8, lsr #2
   11780:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
   11784:	01282930 			; <UNDEFINED> instruction: 0x01282930
   11788:	21131600 	tstcs	r3, r0, lsl #12
   1178c:	51500112 	cmppl	r0, r2, lsl r1
   11790:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   11794:	5001f324 	andpl	pc, r1, r4, lsr #6
   11798:	04802322 	streq	r2, [r0], #802	; 0x322
   1179c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   117a0:	5001f324 	andpl	pc, r1, r4, lsr #6
   117a4:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
   117a8:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
   117ac:	16000128 	strne	r0, [r0], -r8, lsr #2
   117b0:	04842313 	streq	r2, [r4], #787	; 0x313
   117b4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   117b8:	5001f324 	andpl	pc, r1, r4, lsr #6
   117bc:	04802322 	streq	r2, [r0], #802	; 0x322
   117c0:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   117c4:	5001f324 	andpl	pc, r1, r4, lsr #6
   117c8:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
   117cc:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
   117d0:	16000128 	strne	r0, [r0], -r8, lsr #2
   117d4:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
   117d8:	2e302540 	cfneg32cs	mvfx2, mvfx0
   117dc:	16000128 	strne	r0, [r0], -r8, lsr #2
   117e0:	0f000013 	svceq	0x00000013
   117e4:	0000420d 	andeq	r4, r0, sp, lsl #4
   117e8:	0001f601 	andeq	pc, r1, r1, lsl #12
   117ec:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
   117f0:	01000000 	mrseq	r0, (UNDEF: 0)
   117f4:	00041f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
   117f8:	11af1000 			; <UNDEFINED> instruction: 0x11af1000
   117fc:	83020000 	movwhi	r0, #8192	; 0x2000
   11800:	000000a2 	andeq	r0, r0, r2, lsr #1
   11804:	000050e4 	andeq	r5, r0, r4, ror #1
   11808:	00419510 	subeq	r9, r1, r0, lsl r5
   1180c:	a2830200 	addge	r0, r3, #0, 4
   11810:	05000000 	streq	r0, [r0, #-0]
   11814:	10000051 	andne	r0, r0, r1, asr r0
   11818:	00002238 	andeq	r2, r0, r8, lsr r2
   1181c:	00a28402 	adceq	r8, r2, r2, lsl #8
   11820:	51260000 			; <UNDEFINED> instruction: 0x51260000
   11824:	03100000 	tsteq	r0, #0
   11828:	02000042 	andeq	r0, r0, #66	; 0x42
   1182c:	0000a284 	andeq	sl, r0, r4, lsl #5
   11830:	00517700 	subseq	r7, r1, r0, lsl #14
   11834:	41fa1000 	mvnsmi	r1, r0
   11838:	85020000 	strhi	r0, [r2, #-0]
   1183c:	00000097 	muleq	r0, r7, r0
   11840:	000051c8 	andeq	r5, r0, r8, asr #3
   11844:	00427513 	subeq	r7, r2, r3, lsl r5
   11848:	a2870200 	addge	r0, r7, #0, 4
   1184c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   11850:	13000051 	movwne	r0, #81	; 0x51
   11854:	000041ef 	andeq	r4, r0, pc, ror #3
   11858:	00a28802 	adceq	r8, r2, r2, lsl #16
   1185c:	528e0000 	addpl	r0, lr, #0
   11860:	00110000 	andseq	r0, r1, r0
   11864:	2a000000 	bcs	1186c <__exidx_end+0xbd90>
   11868:	12000001 	andne	r0, r0, #1
   1186c:	f3405101 	vrhadd.u8	d21, d0, d1
   11870:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   11874:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
   11878:	4b405301 	blmi	1026484 <__ccfg+0x10064dc>
   1187c:	0f0c2224 	svceq	0x000c2224
   11880:	2b800000 	blcs	fe011888 <_estack+0xde00c888>
   11884:	16000128 	strne	r0, [r0], -r8, lsr #2
   11888:	7d244013 	stcvc	0, cr4, [r4, #-76]!	; 0xffffffb4
   1188c:	0a029400 	beq	b6894 <__ccfg+0x968ec>
   11890:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
   11894:	1c405301 	mcrrne	3, 0, r5, r0, cr1
   11898:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
   1189c:	4b405301 	blmi	10264a8 <__ccfg+0x1006500>
   118a0:	0f0c2224 	svceq	0x000c2224
   118a4:	2b800000 	blcs	fe0118ac <_estack+0xde00c8ac>
   118a8:	16000128 	strne	r0, [r0], -r8, lsr #2
   118ac:	12212413 	eorne	r2, r1, #318767104	; 0x13000000
   118b0:	f3635001 	vhadd.u32	d21, d3, d1
   118b4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   118b8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   118bc:	f3048023 	vhadd.u8	d8, d4, d19
   118c0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   118c4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   118c8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   118cc:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   118d0:	8000000f 	andhi	r0, r0, pc
   118d4:	0001282c 	andeq	r2, r1, ip, lsr #16
   118d8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
   118dc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   118e0:	01f32431 	mvnseq	r2, r1, lsr r4
   118e4:	80232250 	eorhi	r2, r3, r0, asr r2
   118e8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   118ec:	01f32431 	mvnseq	r2, r1, lsr r4
   118f0:	01f32250 	mvnseq	r2, r0, asr r2
   118f4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   118f8:	000f0c22 	andeq	r0, pc, r2, lsr #24
   118fc:	282c8000 	stmdacs	ip!, {pc}
   11900:	13160001 	tstne	r6, #1
   11904:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11908:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   1190c:	8000000f 	andhi	r0, r0, pc
   11910:	0001282b 	andeq	r2, r1, fp, lsr #16
   11914:	00001316 	andeq	r1, r0, r6, lsl r3
   11918:	0041bb14 	subeq	fp, r1, r4, lsl fp
   1191c:	02080100 	andeq	r0, r8, #0, 2
   11920:	00000097 	muleq	r0, r7, r0
   11924:	00000000 	andeq	r0, r0, r0
   11928:	00000034 	andeq	r0, r0, r4, lsr r0
   1192c:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
   11930:	af100000 	svcge	0x00100000
   11934:	02000011 	andeq	r0, r0, #17
   11938:	0000a2af 	andeq	sl, r0, pc, lsr #5
   1193c:	0052ee00 	subseq	lr, r2, r0, lsl #28
   11940:	41951000 	orrsmi	r1, r5, r0
   11944:	af020000 	svcge	0x00020000
   11948:	000000a2 	andeq	r0, r0, r2, lsr #1
   1194c:	0000530f 	andeq	r5, r0, pc, lsl #6
   11950:	00223810 	eoreq	r3, r2, r0, lsl r8
   11954:	a2af0200 	adcge	r0, pc, #0, 4
   11958:	30000000 	andcc	r0, r0, r0
   1195c:	13000053 	movwne	r0, #83	; 0x53
   11960:	00004275 	andeq	r4, r0, r5, ror r2
   11964:	00a2b102 	adceq	fp, r2, r2, lsl #2
   11968:	536d0000 	cmnpl	sp, #0
   1196c:	e6130000 	ldr	r0, [r3], -r0
   11970:	02000041 	andeq	r0, r0, #65	; 0x41
   11974:	000097b2 			; <UNDEFINED> instruction: 0x000097b2
   11978:	0053a700 	subseq	sl, r3, r0, lsl #14
   1197c:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   11980:	00000000 	andeq	r0, r0, r0
   11984:	001a0000 	andseq	r0, sl, r0
   11988:	ca020000 	bgt	91990 <__ccfg+0x719e8>
   1198c:	0001080c 	andeq	r0, r1, ip, lsl #16
   11990:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   11994:	bf000000 	svclt	0x00000000
   11998:	16000053 			; <UNDEFINED> instruction: 0x16000053
   1199c:	00000000 	andeq	r0, r0, r0
   119a0:	0000001a 	andeq	r0, r0, sl, lsl r0
   119a4:	0001130b 	andeq	r1, r1, fp, lsl #6
   119a8:	0053f900 	subseq	pc, r3, r0, lsl #18
   119ac:	011e0b00 	tsteq	lr, r0, lsl #22
   119b0:	54120000 	ldrpl	r0, [r2], #-0
   119b4:	000d0000 	andeq	r0, sp, r0
   119b8:	94000000 	strls	r0, [r0], #-0
   119bc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   119c0:	00000000 	andeq	r0, r0, r0
   119c4:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   119c8:	14000000 	strne	r0, [r0], #-0
   119cc:	0000419d 	muleq	r0, sp, r1
   119d0:	97021d01 	strls	r1, [r2, -r1, lsl #26]
   119d4:	00000000 	andeq	r0, r0, r0
   119d8:	40000000 	andmi	r0, r0, r0
   119dc:	01000000 	mrseq	r0, (UNDEF: 0)
   119e0:	0005949c 	muleq	r5, ip, r4
   119e4:	11af1000 			; <UNDEFINED> instruction: 0x11af1000
   119e8:	dd020000 	stcle	0, cr0, [r2, #-0]
   119ec:	000000a2 	andeq	r0, r0, r2, lsr #1
   119f0:	00005429 	andeq	r5, r0, r9, lsr #8
   119f4:	00419510 	subeq	r9, r1, r0, lsl r5
   119f8:	a2dd0200 	sbcsge	r0, sp, #0, 4
   119fc:	4a000000 	bmi	11a04 <__exidx_end+0xbf28>
   11a00:	10000054 	andne	r0, r0, r4, asr r0
   11a04:	00002238 	andeq	r2, r0, r8, lsr r2
   11a08:	00a2de02 	adceq	sp, r2, r2, lsl #28
   11a0c:	546b0000 	strbtpl	r0, [fp], #-0
   11a10:	03100000 	tsteq	r0, #0
   11a14:	02000042 	andeq	r0, r0, #66	; 0x42
   11a18:	0000a2de 	ldrdeq	sl, [r0], -lr
   11a1c:	0054ae00 	subseq	sl, r4, r0, lsl #28
   11a20:	42751300 	rsbsmi	r1, r5, #0, 6
   11a24:	e0020000 	and	r0, r2, r0
   11a28:	000000a2 	andeq	r0, r0, r2, lsr #1
   11a2c:	000054f1 	strdeq	r5, [r0], -r1
   11a30:	0041e613 	subeq	lr, r1, r3, lsl r6
   11a34:	97e10200 	strbls	r0, [r1, r0, lsl #4]!
   11a38:	4c000000 	stcmi	0, cr0, [r0], {-0}
   11a3c:	15000055 	strne	r0, [r0, #-85]	; 0xffffffab
   11a40:	000000ed 	andeq	r0, r0, sp, ror #1
   11a44:	00000000 	andeq	r0, r0, r0
   11a48:	0000001a 	andeq	r0, r0, sl, lsl r0
   11a4c:	080cfa02 	stmdaeq	ip, {r1, r9, fp, ip, sp, lr, pc}
   11a50:	02000001 	andeq	r0, r0, #1
   11a54:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   11a58:	00556f00 	subseq	r6, r5, r0, lsl #30
   11a5c:	00001600 	andeq	r1, r0, r0, lsl #12
   11a60:	001a0000 	andseq	r0, sl, r0
   11a64:	130b0000 	movwne	r0, #45056	; 0xb000
   11a68:	af000001 	svcge	0x00000001
   11a6c:	0b000055 	bleq	11bc8 <__exidx_end+0xc0ec>
   11a70:	0000011e 	andeq	r0, r0, lr, lsl r1
   11a74:	000055c8 	andeq	r5, r0, r8, asr #11
   11a78:	0000000d 	andeq	r0, r0, sp
   11a7c:	00059400 	andeq	r9, r5, r0, lsl #8
   11a80:	00000d00 	andeq	r0, r0, r0, lsl #26
   11a84:	059f0000 	ldreq	r0, [pc]	; 11a8c <__exidx_end+0xbfb0>
   11a88:	00000000 	andeq	r0, r0, r0
   11a8c:	29e41700 	stmibcs	r4!, {r8, r9, sl, ip}^
   11a90:	6a050000 	bvs	151a98 <__ccfg+0x131af0>
   11a94:	000000a2 	andeq	r0, r0, r2, lsr #1
   11a98:	0029f317 	eoreq	pc, r9, r7, lsl r3	; <UNPREDICTABLE>
   11a9c:	a2840500 	addge	r0, r4, #0, 10
   11aa0:	00000000 	andeq	r0, r0, r0
   11aa4:	00000f31 	andeq	r0, r0, r1, lsr pc
   11aa8:	419d0004 	orrsmi	r0, sp, r4
   11aac:	01040000 	mrseq	r0, (UNDEF: 4)
   11ab0:	00004549 	andeq	r4, r0, r9, asr #10
   11ab4:	0044620c 	subeq	r6, r4, ip, lsl #4
   11ab8:	0045e400 	subeq	lr, r5, r0, lsl #8
   11abc:	00486800 	subeq	r6, r8, r0, lsl #16
   11ac0:	0000aa00 	andeq	sl, r0, r0, lsl #20
   11ac4:	008e2300 	addeq	r2, lr, r0, lsl #6
   11ac8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   11acc:	00746e69 	rsbseq	r6, r4, r9, ror #28
   11ad0:	00330903 	eorseq	r0, r3, r3, lsl #18
   11ad4:	17d80200 	ldrbne	r0, [r8, r0, lsl #4]
   11ad8:	00000038 	andeq	r0, r0, r8, lsr r0
   11adc:	2d070404 	cfstrscs	mvf0, [r7, #-16]
   11ae0:	05000004 	streq	r0, [r0, #-4]
   11ae4:	000043f6 	strdeq	r4, [r0], -r6
   11ae8:	18014802 	stmdane	r1, {r1, fp, lr}
   11aec:	00000038 	andeq	r0, r0, r8, lsr r0
   11af0:	fb050804 	blx	153b0a <__ccfg+0x133b62>
   11af4:	04000007 	streq	r0, [r0], #-7
   11af8:	441a0408 	ldrmi	r0, [sl], #-1032	; 0xfffffbf8
   11afc:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
   11b00:	0200000b 	andeq	r0, r0, #11
   11b04:	38170165 	ldmdacc	r7, {r0, r2, r5, r6, r8}
   11b08:	04000000 	streq	r0, [r0], #-0
   11b0c:	0c600601 	stcleq	6, cr0, [r0], #-4
   11b10:	01040000 	mrseq	r0, (UNDEF: 4)
   11b14:	000c5e08 	andeq	r5, ip, r8, lsl #28
   11b18:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
   11b1c:	00000a6e 	andeq	r0, r0, lr, ror #20
   11b20:	5b070204 	blpl	1d2338 <__ccfg+0x1b2390>
   11b24:	0400000d 	streq	r0, [r0], #-13
   11b28:	08000504 	stmdaeq	r0, {r2, r8, sl}
   11b2c:	83060000 	movwhi	r0, #24576	; 0x6000
   11b30:	04000000 	streq	r0, [r0], #-0
   11b34:	04280704 	strteq	r0, [r8], #-1796	; 0xfffff8fc
   11b38:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11b3c:	00042307 	andeq	r2, r4, r7, lsl #6
   11b40:	0e3e0300 	cdpeq	3, 3, cr0, cr14, cr0, {0}
   11b44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
   11b48:	0000830e 	andeq	r8, r0, lr, lsl #6
   11b4c:	02f60300 	rscseq	r0, r6, #0, 6
   11b50:	74030000 	strvc	r0, [r3], #-0
   11b54:	0000830e 	andeq	r8, r0, lr, lsl #6
   11b58:	03040700 	movweq	r0, #18176	; 0x4700
   11b5c:	00d703a5 	sbcseq	r0, r7, r5, lsr #7
   11b60:	6f080000 	svcvs	0x00080000
   11b64:	03000007 	movweq	r0, #7
   11b68:	005a0ca7 	subseq	r0, sl, r7, lsr #25
   11b6c:	b7080000 	strlt	r0, [r8, -r0]
   11b70:	0300000a 	movweq	r0, #10
   11b74:	00d713a8 	sbcseq	r1, r7, r8, lsr #7
   11b78:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11b7c:	0000006e 	andeq	r0, r0, lr, rrx
   11b80:	000000e7 	andeq	r0, r0, r7, ror #1
   11b84:	0000380a 	andeq	r3, r0, sl, lsl #16
   11b88:	0b000300 	bleq	12790 <__exidx_end+0xccb4>
   11b8c:	09a20308 	stmibeq	r2!, {r3, r8, r9}
   11b90:	0000010b 	andeq	r0, r0, fp, lsl #2
   11b94:	0003900c 	andeq	r9, r3, ip
   11b98:	07a40300 	streq	r0, [r4, r0, lsl #6]!
   11b9c:	00000025 	andeq	r0, r0, r5, lsr #32
   11ba0:	06040c00 	streq	r0, [r4], -r0, lsl #24
   11ba4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
   11ba8:	0000b505 	andeq	fp, r0, r5, lsl #10
   11bac:	03000400 	movweq	r0, #1024	; 0x400
   11bb0:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
   11bb4:	e703aa03 	str	sl, [r3, -r3, lsl #20]
   11bb8:	0d000000 	stceq	0, cr0, [r0, #-0]
   11bbc:	01170e04 	tsteq	r7, r4, lsl #28
   11bc0:	45030000 	strmi	r0, [r3, #-0]
   11bc4:	04000008 	streq	r0, [r0], #-8
   11bc8:	008f1916 	addeq	r1, pc, r6, lsl r9	; <UNPREDICTABLE>
   11bcc:	4a030000 	bmi	d1bd4 <__ccfg+0xb1c2c>
   11bd0:	05000002 	streq	r0, [r0, #-2]
   11bd4:	00250d0c 	eoreq	r0, r5, ip, lsl #26
   11bd8:	2d030000 	stccs	0, cr0, [r3, #-0]
   11bdc:	04000007 	streq	r0, [r0], #-7
   11be0:	012a1b23 			; <UNDEFINED> instruction: 0x012a1b23
   11be4:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
   11be8:	18000003 	stmdane	r0, {r0, r1}
   11bec:	9c083404 	cfstrsls	mvf3, [r8], {4}
   11bf0:	0c000001 	stceq	0, cr0, [r0], {1}
   11bf4:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
   11bf8:	9c133604 	ldcls	6, cr3, [r3], {4}
   11bfc:	00000001 	andeq	r0, r0, r1
   11c00:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
   11c04:	25073704 	strcs	r3, [r7, #-1796]	; 0xfffff8fc
   11c08:	04000000 	streq	r0, [r0], #-0
   11c0c:	000b650c 	andeq	r6, fp, ip, lsl #10
   11c10:	0b370400 	bleq	dd2c18 <__ccfg+0xdb2c70>
   11c14:	00000025 	andeq	r0, r0, r5, lsr #32
   11c18:	43e50c08 	mvnmi	r0, #8, 24	; 0x800
   11c1c:	37040000 	strcc	r0, [r4, -r0]
   11c20:	00002514 	andeq	r2, r0, r4, lsl r5
   11c24:	570c0c00 	strpl	r0, [ip, -r0, lsl #24]
   11c28:	04000004 	streq	r0, [r0], #-4
   11c2c:	00251b37 	eoreq	r1, r5, r7, lsr fp
   11c30:	10100000 	andsne	r0, r0, r0
   11c34:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   11c38:	01a20b38 			; <UNDEFINED> instruction: 0x01a20b38
   11c3c:	00140000 	andseq	r0, r4, r0
   11c40:	01420411 	cmpeq	r2, r1, lsl r4
   11c44:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
   11c48:	b2000001 	andlt	r0, r0, #1
   11c4c:	0a000001 	beq	11c58 <__exidx_end+0xc17c>
   11c50:	00000038 	andeq	r0, r0, r8, lsr r0
   11c54:	800f0000 	andhi	r0, pc, r0
   11c58:	2400000b 	strcs	r0, [r0], #-11
   11c5c:	35083c04 	strcc	r3, [r8, #-3076]	; 0xfffff3fc
   11c60:	0c000002 	stceq	0, cr0, [r0], {2}
   11c64:	0000056f 	andeq	r0, r0, pc, ror #10
   11c68:	25093e04 	strcs	r3, [r9, #-3588]	; 0xfffff1fc
   11c6c:	00000000 	andeq	r0, r0, r0
   11c70:	0003b90c 	andeq	fp, r3, ip, lsl #18
   11c74:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   11c78:	00000025 	andeq	r0, r0, r5, lsr #32
   11c7c:	035a0c04 	cmpeq	sl, #4, 24	; 0x400
   11c80:	40040000 	andmi	r0, r4, r0
   11c84:	00002509 	andeq	r2, r0, r9, lsl #10
   11c88:	770c0800 	strvc	r0, [ip, -r0, lsl #16]
   11c8c:	04000006 	streq	r0, [r0], #-6
   11c90:	00250941 	eoreq	r0, r5, r1, asr #18
   11c94:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   11c98:	00000957 	andeq	r0, r0, r7, asr r9
   11c9c:	25094204 	strcs	r4, [r9, #-516]	; 0xfffffdfc
   11ca0:	10000000 	andne	r0, r0, r0
   11ca4:	000ad10c 	andeq	sp, sl, ip, lsl #2
   11ca8:	09430400 	stmdbeq	r3, {sl}^
   11cac:	00000025 	andeq	r0, r0, r5, lsr #32
   11cb0:	033d0c14 	teqeq	sp, #20, 24	; 0x1400
   11cb4:	44040000 	strmi	r0, [r4], #-0
   11cb8:	00002509 	andeq	r2, r0, r9, lsl #10
   11cbc:	780c1800 	stmdavc	ip, {fp, ip}
   11cc0:	04000005 	streq	r0, [r0], #-5
   11cc4:	00250945 	eoreq	r0, r5, r5, asr #18
   11cc8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   11ccc:	000008f3 	strdeq	r0, [r0], -r3
   11cd0:	25094604 	strcs	r4, [r9, #-1540]	; 0xfffff9fc
   11cd4:	20000000 	andcs	r0, r0, r0
   11cd8:	00321200 	eorseq	r1, r2, r0, lsl #4
   11cdc:	01080000 	mrseq	r0, (UNDEF: 8)
   11ce0:	7a084f04 	bvc	2258f8 <__ccfg+0x205950>
   11ce4:	0c000002 	stceq	0, cr0, [r0], {2}
   11ce8:	00000d22 	andeq	r0, r0, r2, lsr #26
   11cec:	7a0a5004 	bvc	2a5d04 <__ccfg+0x285d5c>
   11cf0:	00000002 	andeq	r0, r0, r2
   11cf4:	000c1a0c 	andeq	r1, ip, ip, lsl #20
   11cf8:	09510400 	ldmdbeq	r1, {sl}^
   11cfc:	0000027a 	andeq	r0, r0, sl, ror r2
   11d00:	0dbb1380 	ldceq	3, cr1, [fp, #512]!	; 0x200
   11d04:	53040000 	movwpl	r0, #16384	; 0x4000
   11d08:	00011e0a 	andeq	r1, r1, sl, lsl #28
   11d0c:	13010000 	movwne	r0, #4096	; 0x1000
   11d10:	00000eac 	andeq	r0, r0, ip, lsr #29
   11d14:	1e0a5604 	cfmadd32ne	mvax0, mvfx5, mvfx10, mvfx4
   11d18:	04000001 	streq	r0, [r0], #-1
   11d1c:	17090001 	strne	r0, [r9, -r1]
   11d20:	8a000001 	bhi	11d2c <__exidx_end+0xc250>
   11d24:	0a000002 	beq	11d34 <__exidx_end+0xc258>
   11d28:	00000038 	andeq	r0, r0, r8, lsr r0
   11d2c:	1912001f 	ldmdbne	r2, {r0, r1, r2, r3, r4}
   11d30:	9000000a 	andls	r0, r0, sl
   11d34:	08620401 	stmdaeq	r2!, {r0, sl}^
   11d38:	000002cd 	andeq	r0, r0, sp, asr #5
   11d3c:	000eb90c 	andeq	fp, lr, ip, lsl #18
   11d40:	12630400 	rsbne	r0, r3, #0, 8
   11d44:	000002cd 	andeq	r0, r0, sp, asr #5
   11d48:	05870c00 	streq	r0, [r7, #3072]	; 0xc00
   11d4c:	64040000 	strvs	r0, [r4], #-0
   11d50:	00002506 	andeq	r2, r0, r6, lsl #10
   11d54:	fe0c0400 	cdp2	4, 0, cr0, cr12, cr0, {0}
   11d58:	04000002 	streq	r0, [r0], #-2
   11d5c:	02d30966 	sbcseq	r0, r3, #1671168	; 0x198000
   11d60:	0c080000 	stceq	0, cr0, [r8], {-0}
   11d64:	00000032 	andeq	r0, r0, r2, lsr r0
   11d68:	351e6704 	ldrcc	r6, [lr, #-1796]	; 0xfffff8fc
   11d6c:	88000002 	stmdahi	r0, {r1}
   11d70:	8a041100 	bhi	116178 <__ccfg+0xf61d0>
   11d74:	09000002 	stmdbeq	r0, {r1}
   11d78:	000002e3 	andeq	r0, r0, r3, ror #5
   11d7c:	000002e3 	andeq	r0, r0, r3, ror #5
   11d80:	0000380a 	andeq	r3, r0, sl, lsl #16
   11d84:	11001f00 	tstne	r0, r0, lsl #30
   11d88:	0002e904 	andeq	lr, r2, r4, lsl #18
   11d8c:	ba0f1400 	blt	3d6d94 <__ccfg+0x3b6dec>
   11d90:	0800000c 	stmdaeq	r0, {r2, r3}
   11d94:	12087a04 	andne	r7, r8, #4, 20	; 0x4000
   11d98:	0c000003 	stceq	0, cr0, [r0], {3}
   11d9c:	00000ccc 	andeq	r0, r0, ip, asr #25
   11da0:	12117b04 	andsne	r7, r1, #4, 22	; 0x1000
   11da4:	00000003 	andeq	r0, r0, r3
   11da8:	001d950c 	andseq	r9, sp, ip, lsl #10
   11dac:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   11db0:	00000025 	andeq	r0, r0, r5, lsr #32
   11db4:	04110004 	ldreq	r0, [r1], #-4
   11db8:	0000006e 	andeq	r0, r0, lr, rrx
   11dbc:	00044f0f 	andeq	r4, r4, pc, lsl #30
   11dc0:	ba046800 	blt	12bdc8 <__ccfg+0x10be20>
   11dc4:	00045b08 	andeq	r5, r4, r8, lsl #22
   11dc8:	705f1000 	subsvc	r1, pc, r0
   11dcc:	12bb0400 	adcsne	r0, fp, #0, 8
   11dd0:	00000312 	andeq	r0, r0, r2, lsl r3
   11dd4:	725f1000 	subsvc	r1, pc, #0
   11dd8:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   11ddc:	00000025 	andeq	r0, r0, r5, lsr #32
   11de0:	775f1004 	ldrbvc	r1, [pc, -r4]
   11de4:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   11de8:	00000025 	andeq	r0, r0, r5, lsr #32
   11dec:	01bb0c08 			; <UNDEFINED> instruction: 0x01bb0c08
   11df0:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   11df4:	00007509 	andeq	r7, r0, r9, lsl #10
   11df8:	5c0c0c00 	stcpl	12, cr0, [ip], {-0}
   11dfc:	04000008 	streq	r0, [r0], #-8
   11e00:	007509bf 	ldrhteq	r0, [r5], #-159	; 0xffffff61
   11e04:	100e0000 	andne	r0, lr, r0
   11e08:	0066625f 	rsbeq	r6, r6, pc, asr r2
   11e0c:	ea11c004 	b	481e24 <__ccfg+0x461e7c>
   11e10:	10000002 	andne	r0, r0, r2
   11e14:	0001b20c 	andeq	fp, r1, ip, lsl #4
   11e18:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   11e1c:	00000025 	andeq	r0, r0, r5, lsr #32
   11e20:	03030c18 	movweq	r0, #15384	; 0x3c18
   11e24:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   11e28:	0001170a 	andeq	r1, r1, sl, lsl #14
   11e2c:	240c1c00 	strcs	r1, [ip], #-3072	; 0xfffff400
   11e30:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   11e34:	05df1dca 	ldrbeq	r1, [pc, #3530]	; 12c06 <__exidx_end+0xd12a>
   11e38:	0c200000 	stceq	0, cr0, [r0], #-0
   11e3c:	00001ceb 	andeq	r1, r0, fp, ror #25
   11e40:	091dcc04 	ldmdbeq	sp, {r2, sl, fp, lr, pc}
   11e44:	24000006 	strcs	r0, [r0], #-6
   11e48:	000ed90c 	andeq	sp, lr, ip, lsl #18
   11e4c:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 11e54 <__exidx_end+0xc378>
   11e50:	0000062d 	andeq	r0, r0, sp, lsr #12
   11e54:	1cd90c28 	ldclne	12, cr0, [r9], {40}	; 0x28
   11e58:	d0040000 	andle	r0, r4, r0
   11e5c:	00064709 	andeq	r4, r6, r9, lsl #14
   11e60:	5f102c00 	svcpl	0x00102c00
   11e64:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   11e68:	02ea11d3 	rsceq	r1, sl, #-1073741772	; 0xc0000034
   11e6c:	10300000 	eorsne	r0, r0, r0
   11e70:	0070755f 	rsbseq	r7, r0, pc, asr r5
   11e74:	1212d404 	andsne	sp, r2, #4, 8	; 0x4000000
   11e78:	38000003 	stmdacc	r0, {r0, r1}
   11e7c:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
   11e80:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   11e84:	00000025 	andeq	r0, r0, r5, lsr #32
   11e88:	0f100c3c 	svceq	0x00100c3c
   11e8c:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   11e90:	00064d11 	andeq	r4, r6, r1, lsl sp
   11e94:	590c4000 	stmdbpl	ip, {lr}
   11e98:	0400000e 	streq	r0, [r0], #-14
   11e9c:	065d11d9 			; <UNDEFINED> instruction: 0x065d11d9
   11ea0:	10430000 	subne	r0, r3, r0
   11ea4:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   11ea8:	ea11dc04 	b	488ec0 <__ccfg+0x468f18>
   11eac:	44000002 	strmi	r0, [r0], #-2
   11eb0:	000b770c 	andeq	r7, fp, ip, lsl #14
   11eb4:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   11eb8:	00000025 	andeq	r0, r0, r5, lsr #32
   11ebc:	04830c4c 	streq	r0, [r3], #3148	; 0xc4c
   11ec0:	e0040000 	and	r0, r4, r0
   11ec4:	00009d0a 	andeq	r9, r0, sl, lsl #26
   11ec8:	430c5000 	movwmi	r5, #49152	; 0xc000
   11ecc:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   11ed0:	047912e3 	ldrbteq	r1, [r9], #-739	; 0xfffffd1d
   11ed4:	0c540000 	mraeq	r0, r4, acc0
   11ed8:	00000b9d 	muleq	r0, sp, fp
   11edc:	360ce704 	strcc	lr, [ip], -r4, lsl #14
   11ee0:	58000001 	stmdapl	r0, {r0}
   11ee4:	000a210c 	andeq	r2, sl, ip, lsl #2
   11ee8:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   11eec:	0000010b 	andeq	r0, r0, fp, lsl #2
   11ef0:	0e8c0c5c 	mcreq	12, 4, r0, cr12, cr12, {2}
   11ef4:	ea040000 	b	111efc <__ccfg+0xf1f54>
   11ef8:	00002509 	andeq	r2, r0, r9, lsl #10
   11efc:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
   11f00:	00000025 	andeq	r0, r0, r5, lsr #32
   11f04:	00000479 	andeq	r0, r0, r9, ror r4
   11f08:	00047916 	andeq	r7, r4, r6, lsl r9
   11f0c:	01171600 	tsteq	r7, r0, lsl #12
   11f10:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   11f14:	16000005 	strne	r0, [r0], -r5
   11f18:	00000025 	andeq	r0, r0, r5, lsr #32
   11f1c:	84041100 	strhi	r1, [r4], #-256	; 0xffffff00
   11f20:	06000004 	streq	r0, [r0], -r4
   11f24:	00000479 	andeq	r0, r0, r9, ror r4
   11f28:	000d5417 	andeq	r5, sp, r7, lsl r4
   11f2c:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   11f30:	cd080265 	sfmgt	f0, 4, [r8, #-404]	; 0xfffffe6c
   11f34:	18000005 	stmdane	r0, {r0, r2}
   11f38:	00000907 	andeq	r0, r0, r7, lsl #18
   11f3c:	07026704 	streq	r6, [r2, -r4, lsl #14]
   11f40:	00000025 	andeq	r0, r0, r5, lsr #32
   11f44:	07e51800 	strbeq	r1, [r5, r0, lsl #16]!
   11f48:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11f4c:	06b90b02 	ldrteq	r0, [r9], r2, lsl #22
   11f50:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
   11f54:	000002ee 	andeq	r0, r0, lr, ror #5
   11f58:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   11f5c:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11f60:	0eff1808 	cdpeq	8, 15, cr1, cr15, cr8, {0}
   11f64:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11f68:	06b91e02 	ldrteq	r1, [r9], r2, lsl #28
   11f6c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
   11f70:	00000582 	andeq	r0, r0, r2, lsl #11
   11f74:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   11f78:	00000025 	andeq	r0, r0, r5, lsr #32
   11f7c:	04cf1810 	strbeq	r1, [pc], #2064	; 11f84 <__exidx_end+0xc4a8>
   11f80:	6f040000 	svcvs	0x00040000
   11f84:	08b90802 	ldmeq	r9!, {r1, fp}
   11f88:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
   11f8c:	00000e6c 	andeq	r0, r0, ip, ror #28
   11f90:	07027204 	streq	r7, [r2, -r4, lsl #4]
   11f94:	00000025 	andeq	r0, r0, r5, lsr #32
   11f98:	42911830 	addsmi	r1, r1, #48, 16	; 0x300000
   11f9c:	73040000 	movwvc	r0, #16384	; 0x4000
   11fa0:	09501602 	ldmdbeq	r0, {r1, r9, sl, ip}^
   11fa4:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
   11fa8:	0000078d 	andeq	r0, r0, sp, lsl #15
   11fac:	07027504 	streq	r7, [r2, -r4, lsl #10]
   11fb0:	00000025 	andeq	r0, r0, r5, lsr #32
   11fb4:	08871838 	stmeq	r7, {r3, r4, r5, fp, ip}
   11fb8:	77040000 	strvc	r0, [r4, -r0]
   11fbc:	09610a02 	stmdbeq	r1!, {r1, r9, fp}^
   11fc0:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
   11fc4:	00000352 	andeq	r0, r0, r2, asr r3
   11fc8:	13027a04 	movwne	r7, #10756	; 0x2a04
   11fcc:	0000019c 	muleq	r0, ip, r1
   11fd0:	040d1840 	streq	r1, [sp], #-2112	; 0xfffff7c0
   11fd4:	7b040000 	blvc	111fdc <__ccfg+0xf2034>
   11fd8:	00250702 	eoreq	r0, r5, r2, lsl #14
   11fdc:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
   11fe0:	0000060c 	andeq	r0, r0, ip, lsl #12
   11fe4:	13027c04 	movwne	r7, #11268	; 0x2c04
   11fe8:	0000019c 	muleq	r0, ip, r1
   11fec:	08221848 	stmdaeq	r2!, {r3, r6, fp, ip}
   11ff0:	7d040000 	stcvc	0, cr0, [r4, #-0]
   11ff4:	09671402 	stmdbeq	r7!, {r1, sl, ip}^
   11ff8:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
   11ffc:	00000b5d 	andeq	r0, r0, sp, asr fp
   12000:	07028004 	streq	r8, [r2, -r4]
   12004:	00000025 	andeq	r0, r0, r5, lsr #32
   12008:	0c561850 	mrrceq	8, 5, r1, r6, cr0
   1200c:	81040000 	mrshi	r0, (UNDEF: 4)
   12010:	05cd0902 	strbeq	r0, [sp, #2306]	; 0x902
   12014:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
   12018:	00000c70 	andeq	r0, r0, r0, ror ip
   1201c:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   12020:	00000894 	muleq	r0, r4, r8
   12024:	0a191958 	beq	65858c <__ccfg+0x6385e4>
   12028:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   1202c:	02cd1302 	sbceq	r1, sp, #134217728	; 0x8000000
   12030:	01480000 	mrseq	r0, (UNDEF: 72)
   12034:	0006b119 	andeq	fp, r6, r9, lsl r1
   12038:	02a90400 	adceq	r0, r9, #0, 8
   1203c:	00028a12 	andeq	r8, r2, r2, lsl sl
   12040:	19014c00 	stmdbne	r1, {sl, fp, lr}
   12044:	00000698 	muleq	r0, r8, r6
   12048:	0c02ad04 	stceq	13, cr10, [r2], {4}
   1204c:	00000978 	andeq	r0, r0, r8, ror r9
   12050:	d81902dc 	ldmdale	r9, {r2, r3, r4, r6, r7, r9}
   12054:	0400000c 	streq	r0, [r0], #-12
   12058:	7a1002b2 	bvc	412b28 <__ccfg+0x3f2b80>
   1205c:	e0000006 	and	r0, r0, r6
   12060:	0aa91902 	beq	fea58470 <_estack+0xdea53470>
   12064:	b4040000 	strlt	r0, [r4], #-0
   12068:	09840a02 	stmibeq	r4, {r1, r9, fp}
   1206c:	02ec0000 	rsceq	r0, ip, #0
   12070:	d3041100 	movwle	r1, #16640	; 0x4100
   12074:	04000005 	streq	r0, [r0], #-5
   12078:	0c670801 	stcleq	8, cr0, [r7], #-4
   1207c:	d3060000 	movwle	r0, #24576	; 0x6000
   12080:	11000005 	tstne	r0, r5
   12084:	00045b04 	andeq	r5, r4, r4, lsl #22
   12088:	00251500 	eoreq	r1, r5, r0, lsl #10
   1208c:	06030000 	streq	r0, [r3], -r0
   12090:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   12094:	16000004 	strne	r0, [r0], -r4
   12098:	00000117 	andeq	r0, r0, r7, lsl r1
   1209c:	00060316 	andeq	r0, r6, r6, lsl r3
   120a0:	00251600 	eoreq	r1, r5, r0, lsl #12
   120a4:	11000000 	mrsne	r0, (UNDEF: 0)
   120a8:	0005da04 	andeq	sp, r5, r4, lsl #20
   120ac:	e5041100 	str	r1, [r4, #-256]	; 0xffffff00
   120b0:	15000005 	strne	r0, [r0, #-5]
   120b4:	000000a9 	andeq	r0, r0, r9, lsr #1
   120b8:	0000062d 	andeq	r0, r0, sp, lsr #12
   120bc:	00047916 	andeq	r7, r4, r6, lsl r9
   120c0:	01171600 	tsteq	r7, r0, lsl #12
   120c4:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
   120c8:	16000000 	strne	r0, [r0], -r0
   120cc:	00000025 	andeq	r0, r0, r5, lsr #32
   120d0:	0f041100 	svceq	0x00041100
   120d4:	15000006 	strne	r0, [r0, #-6]
   120d8:	00000025 	andeq	r0, r0, r5, lsr #32
   120dc:	00000647 	andeq	r0, r0, r7, asr #12
   120e0:	00047916 	andeq	r7, r4, r6, lsl r9
   120e4:	01171600 	tsteq	r7, r0, lsl #12
   120e8:	11000000 	mrsne	r0, (UNDEF: 0)
   120ec:	00063304 	andeq	r3, r6, r4, lsl #6
   120f0:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   120f4:	065d0000 	ldrbeq	r0, [sp], -r0
   120f8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   120fc:	02000000 	andeq	r0, r0, #0
   12100:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   12104:	066d0000 	strbteq	r0, [sp], -r0
   12108:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1210c:	00000000 	andeq	r0, r0, r0
   12110:	04700500 	ldrbteq	r0, [r0], #-1280	; 0xfffffb00
   12114:	24040000 	strcs	r0, [r4], #-0
   12118:	03181a01 	tsteq	r8, #4096	; 0x1000
   1211c:	d21a0000 	andsle	r0, sl, #0
   12120:	0c00000c 	stceq	0, cr0, [r0], {12}
   12124:	08012804 	stmdaeq	r1, {r2, fp, sp}
   12128:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
   1212c:	000eb918 	andeq	fp, lr, r8, lsl r9
   12130:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   12134:	0006b311 	andeq	fp, r6, r1, lsl r3
   12138:	d1180000 	tstle	r8, r0
   1213c:	0400000b 	streq	r0, [r0], #-11
   12140:	2507012b 	strcs	r0, [r7, #-299]	; 0xfffffed5
   12144:	04000000 	streq	r0, [r0], #-0
   12148:	00077518 	andeq	r7, r7, r8, lsl r5
   1214c:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   12150:	0006b90b 	andeq	fp, r6, fp, lsl #18
   12154:	11000800 	tstne	r0, r0, lsl #16
   12158:	00067a04 	andeq	r7, r6, r4, lsl #20
   1215c:	6d041100 	stfvss	f1, [r4, #-0]
   12160:	1a000006 	bne	12180 <__exidx_end+0xc6a4>
   12164:	000003dc 	ldrdeq	r0, [r0], -ip
   12168:	0144040e 	cmpeq	r4, lr, lsl #8
   1216c:	0006f808 	andeq	pc, r6, r8, lsl #16
   12170:	16401800 	strbne	r1, [r0], -r0, lsl #16
   12174:	45040000 	strmi	r0, [r4, #-0]
   12178:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   1217c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12180:	00000834 	andeq	r0, r0, r4, lsr r8
   12184:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   12188:	000006f8 	strdeq	r0, [r0], -r8
   1218c:	14f21806 	ldrbtne	r1, [r2], #2054	; 0x806
   12190:	47040000 	strmi	r0, [r4, -r0]
   12194:	007c1201 	rsbseq	r1, ip, r1, lsl #4
   12198:	000c0000 	andeq	r0, ip, r0
   1219c:	00007c09 	andeq	r7, r0, r9, lsl #24
   121a0:	00070800 	andeq	r0, r7, r0, lsl #16
   121a4:	00380a00 	eorseq	r0, r8, r0, lsl #20
   121a8:	00020000 	andeq	r0, r2, r0
   121ac:	8504d01b 	strhi	sp, [r4, #-27]	; 0xffffffe5
   121b0:	081d0702 	ldmdaeq	sp, {r1, r8, r9, sl}
   121b4:	5f180000 	svcpl	0x00180000
   121b8:	0400000e 	streq	r0, [r0], #-14
   121bc:	38180287 	ldmdacc	r8, {r0, r1, r2, r7, r9}
   121c0:	00000000 	andeq	r0, r0, r0
   121c4:	000ce018 	andeq	lr, ip, r8, lsl r0
   121c8:	02880400 	addeq	r0, r8, #0, 8
   121cc:	0005cd12 	andeq	ip, r5, r2, lsl sp
   121d0:	3a180400 	bcc	6131d8 <__ccfg+0x5f3230>
   121d4:	04000004 	streq	r0, [r0], #-4
   121d8:	1d100289 	lfmne	f0, 4, [r0, #-548]	; 0xfffffddc
   121dc:	08000008 	stmdaeq	r0, {r3}
   121e0:	000b4618 	andeq	r4, fp, r8, lsl r6
   121e4:	028a0400 	addeq	r0, sl, #0, 8
   121e8:	0001b217 	andeq	fp, r1, r7, lsl r2
   121ec:	ec182400 	cfldrs	mvf2, [r8], {-0}
   121f0:	04000007 	streq	r0, [r0], #-7
   121f4:	250f028b 	strcs	r0, [pc, #-651]	; 11f71 <__exidx_end+0xc495>
   121f8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   121fc:	000eb418 	andeq	fp, lr, r8, lsl r4
   12200:	028c0400 	addeq	r0, ip, #0, 8
   12204:	0000962c 	andeq	r9, r0, ip, lsr #12
   12208:	76185000 	ldrvc	r5, [r8], -r0
   1220c:	04000000 	streq	r0, [r0], #-0
   12210:	bf1a028d 	svclt	0x001a028d
   12214:	58000006 	stmdapl	r0, {r1, r2}
   12218:	00063c18 	andeq	r3, r6, r8, lsl ip
   1221c:	028e0400 	addeq	r0, lr, #0, 8
   12220:	00010b16 	andeq	r0, r1, r6, lsl fp
   12224:	ed186800 	ldc	8, cr6, [r8, #-0]
   12228:	0400000c 	streq	r0, [r0], #-12
   1222c:	0b16028f 	bleq	592c70 <__ccfg+0x572cc8>
   12230:	70000001 	andvc	r0, r0, r1
   12234:	00006818 	andeq	r6, r0, r8, lsl r8
   12238:	02900400 	addseq	r0, r0, #0, 8
   1223c:	00010b16 	andeq	r0, r1, r6, lsl fp
   12240:	6d187800 	ldcvs	8, cr7, [r8, #-0]
   12244:	0400000b 	streq	r0, [r0], #-11
   12248:	2d100291 	lfmcs	f0, 4, [r0, #-580]	; 0xfffffdbc
   1224c:	80000008 	andhi	r0, r0, r8
   12250:	00041718 	andeq	r1, r4, r8, lsl r7
   12254:	02920400 	addseq	r0, r2, #0, 8
   12258:	00083d10 	andeq	r3, r8, r0, lsl sp
   1225c:	90188800 	andsls	r8, r8, r0, lsl #16
   12260:	0400000c 	streq	r0, [r0], #-12
   12264:	250f0293 	strcs	r0, [pc, #-659]	; 11fd9 <__exidx_end+0xc4fd>
   12268:	a0000000 	andge	r0, r0, r0
   1226c:	0002a318 	andeq	sl, r2, r8, lsl r3
   12270:	02940400 	addseq	r0, r4, #0, 8
   12274:	00010b16 	andeq	r0, r1, r6, lsl fp
   12278:	a218a400 	andsge	sl, r8, #0, 8
   1227c:	04000006 	streq	r0, [r0], #-6
   12280:	0b160295 	bleq	592cdc <__ccfg+0x572d34>
   12284:	ac000001 	stcge	0, cr0, [r0], {1}
   12288:	0005be18 	andeq	fp, r5, r8, lsl lr
   1228c:	02960400 	addseq	r0, r6, #0, 8
   12290:	00010b16 	andeq	r0, r1, r6, lsl fp
   12294:	4d18b400 	cfldrsmi	mvf11, [r8, #-0]
   12298:	04000008 	streq	r0, [r0], #-8
   1229c:	0b160297 	bleq	592d00 <__ccfg+0x572d58>
   122a0:	bc000001 	stclt	0, cr0, [r0], {1}
   122a4:	00062b18 	andeq	r2, r6, r8, lsl fp
   122a8:	02980400 	addseq	r0, r8, #0, 8
   122ac:	00010b16 	andeq	r0, r1, r6, lsl fp
   122b0:	0518c400 	ldreq	ip, [r8, #-1024]	; 0xfffffc00
   122b4:	04000009 	streq	r0, [r0], #-9
   122b8:	25080299 	strcs	r0, [r8, #-665]	; 0xfffffd67
   122bc:	cc000000 	stcgt	0, cr0, [r0], {-0}
   122c0:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   122c4:	082d0000 	stmdaeq	sp!, {}	; <UNPREDICTABLE>
   122c8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   122cc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   122d0:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   122d4:	083d0000 	ldmdaeq	sp!, {}	; <UNPREDICTABLE>
   122d8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   122dc:	07000000 	streq	r0, [r0, -r0]
   122e0:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   122e4:	084d0000 	stmdaeq	sp, {}^	; <UNPREDICTABLE>
   122e8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   122ec:	17000000 	strne	r0, [r0, -r0]
   122f0:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
   122f4:	7407029e 	strvc	r0, [r7], #-670	; 0xfffffd62
   122f8:	18000008 	stmdane	r0, {r3}
   122fc:	000003c2 	andeq	r0, r0, r2, asr #7
   12300:	1b02a104 	blne	ba718 <__ccfg+0x9a770>
   12304:	00000874 	andeq	r0, r0, r4, ror r8
   12308:	0f071800 	svceq	0x00071800
   1230c:	a2040000 	andge	r0, r4, #0
   12310:	08841802 	stmeq	r4, {r1, fp, ip}
   12314:	00780000 	rsbseq	r0, r8, r0
   12318:	00031209 	andeq	r1, r3, r9, lsl #4
   1231c:	00088400 	andeq	r8, r8, r0, lsl #8
   12320:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12324:	001d0000 	andseq	r0, sp, r0
   12328:	00003809 	andeq	r3, r0, r9, lsl #16
   1232c:	00089400 	andeq	r9, r8, r0, lsl #8
   12330:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12334:	001d0000 	andseq	r0, sp, r0
   12338:	8304f01c 	movwhi	pc, #16412	; 0x401c	; <UNPREDICTABLE>
   1233c:	08b90302 	ldmeq	r9!, {r1, r8, r9}
   12340:	541d0000 	ldrpl	r0, [sp], #-0
   12344:	0400000d 	streq	r0, [r0], #-13
   12348:	080b029a 	stmdaeq	fp, {r1, r3, r4, r7, r9}
   1234c:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
   12350:	00000b55 	andeq	r0, r0, r5, asr fp
   12354:	0b02a304 	bleq	baf6c <__ccfg+0x9afc4>
   12358:	0000084d 	andeq	r0, r0, sp, asr #16
   1235c:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   12360:	08c90000 	stmiaeq	r9, {}^	; <UNPREDICTABLE>
   12364:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1236c:	0ebf1200 	cdpeq	2, 11, cr1, cr15, cr0, {0}
   12370:	016c0000 	cmneq	ip, r0
   12374:	5008b206 	andpl	fp, r8, r6, lsl #4
   12378:	0c000009 	stceq	0, cr0, [r0], {9}
   1237c:	00004522 	andeq	r4, r0, r2, lsr #10
   12380:	f80bb406 			; <UNDEFINED> instruction: 0xf80bb406
   12384:	0000000d 	andeq	r0, r0, sp
   12388:	0044d70c 	subeq	sp, r4, ip, lsl #14
   1238c:	0bb50600 	bleq	fed53b94 <_estack+0xded4eb94>
   12390:	00000e32 	andeq	r0, r0, r2, lsr lr
   12394:	436d0ce0 	cmnmi	sp, #224, 24	; 0xe000
   12398:	b7060000 	strlt	r0, [r6, -r0]
   1239c:	000e610b 	andeq	r6, lr, fp, lsl #2
   123a0:	dd0ce400 	cfstrsle	mvf14, [ip, #-0]
   123a4:	06000042 	streq	r0, [r0], -r2, asr #32
   123a8:	00250ab9 	strhteq	r0, [r5], -r9
   123ac:	0ce80000 	stcleq	0, cr0, [r8]
   123b0:	000042a9 	andeq	r4, r0, r9, lsr #5
   123b4:	cd0bba06 	vstrgt	s22, [fp, #-24]	; 0xffffffe8
   123b8:	ec000005 	stc	0, cr0, [r0], {5}
   123bc:	0042d70c 	subeq	sp, r2, ip, lsl #14
   123c0:	12bb0600 	adcsne	r0, fp, #0, 12
   123c4:	000009d2 	ldrdeq	r0, [r0], -r2
   123c8:	43eb13f0 	mvnmi	r1, #240, 6	; 0xc0000003
   123cc:	bd060000 	stclt	0, cr0, [r6, #-0]
   123d0:	000e670b 	andeq	r6, lr, fp, lsl #14
   123d4:	13012800 	movwne	r2, #6144	; 0x1800
   123d8:	0000440c 	andeq	r4, r0, ip, lsl #8
   123dc:	770bbe06 	strvc	fp, [fp, -r6, lsl #28]
   123e0:	2a00000e 	bcs	12420 <__exidx_end+0xc944>
   123e4:	435d1301 	cmpmi	sp, #67108864	; 0x4000000
   123e8:	bf060000 	svclt	0x00060000
   123ec:	000e770b 	andeq	r7, lr, fp, lsl #14
   123f0:	00014a00 	andeq	r4, r1, r0, lsl #20
   123f4:	08c90411 	stmiaeq	r9, {r0, r4, sl}^
   123f8:	611e0000 	tstvs	lr, r0
   123fc:	16000009 	strne	r0, [r0], -r9
   12400:	00000479 	andeq	r0, r0, r9, ror r4
   12404:	56041100 	strpl	r1, [r4], -r0, lsl #2
   12408:	11000009 	tstne	r0, r9
   1240c:	00019c04 	andeq	r9, r1, r4, lsl #24
   12410:	09781e00 	ldmdbeq	r8!, {r9, sl, fp, ip}^
   12414:	25160000 	ldrcs	r0, [r6, #-0]
   12418:	00000000 	andeq	r0, r0, r0
   1241c:	097e0411 	ldmdbeq	lr!, {r0, r4, sl}^
   12420:	04110000 	ldreq	r0, [r1], #-0
   12424:	0000096d 	andeq	r0, r0, sp, ror #18
   12428:	00066d09 	andeq	r6, r6, r9, lsl #26
   1242c:	00099400 	andeq	r9, r9, r0, lsl #8
   12430:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12434:	00020000 	andeq	r0, r2, r0
   12438:	000ac51f 	andeq	ip, sl, pc, lsl r5
   1243c:	03330400 	teqeq	r3, #0, 8
   12440:	00047917 	andeq	r7, r4, r7, lsl r9
   12444:	0abe1f00 	beq	fef9a04c <_estack+0xdef9504c>
   12448:	34040000 	strcc	r0, [r4], #-0
   1244c:	047f1d03 	ldrbteq	r1, [pc], #-3331	; 12454 <__exidx_end+0xc978>
   12450:	04110000 	ldreq	r0, [r1], #-0
   12454:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
   12458:	0009ae0e 	andeq	sl, r9, lr, lsl #28
   1245c:	33212000 			; <UNDEFINED> instruction: 0x33212000
   12460:	07000044 	streq	r0, [r0, -r4, asr #32]
   12464:	05cd0e67 	strbeq	r0, [sp, #3687]	; 0xe67
   12468:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
   1246c:	08000008 	stmdaeq	r0, {r3}
   12470:	010b1456 	tsteq	fp, r6, asr r4
   12474:	d70f0000 	strle	r0, [pc, -r0]
   12478:	38000042 	stmdacc	r0, {r1, r6}
   1247c:	18082a09 	stmdane	r8, {r0, r3, r9, fp, sp}
   12480:	0c00000b 	stceq	0, cr0, [r0], {11}
   12484:	000043c0 	andeq	r4, r0, r0, asr #7
   12488:	cd092c09 	stcgt	12, cr2, [r9, #-36]	; 0xffffffdc
   1248c:	00000005 	andeq	r0, r0, r5
   12490:	0044e20c 	subeq	lr, r4, ip, lsl #4
   12494:	092d0900 	pusheq	{r8, fp}
   12498:	000005cd 	andeq	r0, r0, sp, asr #11
   1249c:	439b0c04 	orrsmi	r0, fp, #4, 24	; 0x400
   124a0:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
   124a4:	0005cd09 	andeq	ip, r5, r9, lsl #26
   124a8:	020c0800 	andeq	r0, ip, #0, 16
   124ac:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124b0:	05cd092f 	strbeq	r0, [sp, #2351]	; 0x92f
   124b4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   124b8:	00004299 	muleq	r0, r9, r2
   124bc:	cd093009 	stcgt	0, cr3, [r9, #-36]	; 0xffffffdc
   124c0:	10000005 	andne	r0, r0, r5
   124c4:	0043bc0c 	subeq	fp, r3, ip, lsl #24
   124c8:	09310900 	ldmdbeq	r1!, {r8, fp}
   124cc:	000005cd 	andeq	r0, r0, sp, asr #11
   124d0:	44de0c14 	ldrbmi	r0, [lr], #3092	; 0xc14
   124d4:	32090000 	andcc	r0, r9, #0
   124d8:	0005cd09 	andeq	ip, r5, r9, lsl #26
   124dc:	970c1800 	strls	r1, [ip, -r0, lsl #16]
   124e0:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124e4:	05cd0933 	strbeq	r0, [sp, #2355]	; 0x933
   124e8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   124ec:	000043fe 	strdeq	r4, [r0], -lr
   124f0:	cd093409 	cfstrsgt	mvf3, [r9, #-36]	; 0xffffffdc
   124f4:	20000005 	andcs	r0, r0, r5
   124f8:	0043dd0c 	subeq	sp, r3, ip, lsl #26
   124fc:	09350900 	ldmdbeq	r5!, {r8, fp}
   12500:	000005cd 	andeq	r0, r0, sp, asr #11
   12504:	46420c24 	strbmi	r0, [r2], -r4, lsr #24
   12508:	36090000 	strcc	r0, [r9], -r0
   1250c:	0005d308 	andeq	sp, r5, r8, lsl #6
   12510:	460c2800 	strmi	r2, [ip], -r0, lsl #16
   12514:	09000046 	stmdbeq	r0, {r1, r2, r6}
   12518:	05d30837 	ldrbeq	r0, [r3, #2103]	; 0x837
   1251c:	0c290000 	stceq	0, cr0, [r9], #-0
   12520:	000043ae 	andeq	r4, r0, lr, lsr #7
   12524:	d3083809 	movwle	r3, #34825	; 0x8809
   12528:	2a000005 	bcs	12544 <__exidx_end+0xca68>
   1252c:	0044410c 	subeq	r4, r4, ip, lsl #2
   12530:	08390900 	ldmdaeq	r9!, {r8, fp}
   12534:	000005d3 	ldrdeq	r0, [r0], -r3
   12538:	44540c2b 	ldrbmi	r0, [r4], #-3115	; 0xfffff3d5
   1253c:	3a090000 	bcc	252544 <__ccfg+0x23259c>
   12540:	0005d308 	andeq	sp, r5, r8, lsl #6
   12544:	c80c2c00 	stmdagt	ip, {sl, fp, sp}
   12548:	09000042 	stmdbeq	r0, {r1, r6}
   1254c:	05d3083b 	ldrbeq	r0, [r3, #2107]	; 0x83b
   12550:	0c2d0000 	stceq	0, cr0, [sp], #-0
   12554:	0000438b 	andeq	r4, r0, fp, lsl #7
   12558:	d3083c09 	movwle	r3, #35849	; 0x8c09
   1255c:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
   12560:	0045310c 	subeq	r3, r5, ip, lsl #2
   12564:	083d0900 	ldmdaeq	sp!, {r8, fp}
   12568:	000005d3 	ldrdeq	r0, [r0], -r3
   1256c:	44500c2f 	ldrbmi	r0, [r0], #-3119	; 0xfffff3d1
   12570:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
   12574:	0005d308 	andeq	sp, r5, r8, lsl #6
   12578:	c40c3000 	strgt	r3, [ip], #-0
   1257c:	09000042 	stmdbeq	r0, {r1, r6}
   12580:	05d3083f 	ldrbeq	r0, [r3, #2111]	; 0x83f
   12584:	0c310000 	ldceq	0, cr0, [r1], #-0
   12588:	0000452d 	andeq	r4, r0, sp, lsr #10
   1258c:	d3084009 	movwle	r4, #32777	; 0x8009
   12590:	32000005 	andcc	r0, r0, #5
   12594:	0043aa0c 	subeq	sl, r3, ip, lsl #20
   12598:	08410900 	stmdaeq	r1, {r8, fp}^
   1259c:	000005d3 	ldrdeq	r0, [r0], -r3
   125a0:	443d0c33 	ldrtmi	r0, [sp], #-3123	; 0xfffff3cd
   125a4:	42090000 	andmi	r0, r9, #0
   125a8:	0005d308 	andeq	sp, r5, r8, lsl #6
   125ac:	870c3400 	strhi	r3, [ip, -r0, lsl #8]
   125b0:	09000043 	stmdbeq	r0, {r0, r1, r6}
   125b4:	05d30843 	ldrbeq	r0, [r3, #2115]	; 0x843
   125b8:	00350000 	eorseq	r0, r5, r0
   125bc:	0044c20f 	subeq	ip, r4, pc, lsl #4
   125c0:	39060800 	stmdbcc	r6, {fp}
   125c4:	000b4008 	andeq	r4, fp, r8
   125c8:	43650c00 	cmnmi	r5, #0, 24
   125cc:	3b060000 	blcc	1925d4 <__ccfg+0x17262c>
   125d0:	0006030f 	andeq	r0, r6, pc, lsl #6
   125d4:	eb0c0000 	bl	3125dc <__ccfg+0x2f2634>
   125d8:	06000043 	streq	r0, [r0], -r3, asr #32
   125dc:	06030f3c 			; <UNDEFINED> instruction: 0x06030f3c
   125e0:	00040000 	andeq	r0, r4, r0
   125e4:	000b1806 	andeq	r1, fp, r6, lsl #16
   125e8:	43272100 			; <UNDEFINED> instruction: 0x43272100
   125ec:	42060000 	andmi	r0, r6, #0
   125f0:	000b4020 	andeq	r4, fp, r0, lsr #32
   125f4:	434f0f00 	movtmi	r0, #65280	; 0xff00
   125f8:	063c0000 	ldrteq	r0, [ip], -r0
   125fc:	0c220844 	stceq	8, cr0, [r2], #-272	; 0xfffffef0
   12600:	020c0000 	andeq	r0, ip, #0
   12604:	06000043 	streq	r0, [r0], -r3, asr #32
   12608:	06030f46 	streq	r0, [r3], -r6, asr #30
   1260c:	0c000000 	stceq	0, cr0, [r0], {-0}
   12610:	00004299 	muleq	r0, r9, r2
   12614:	030f4706 	movweq	r4, #63238	; 0xf706
   12618:	04000006 	streq	r0, [r0], #-6
   1261c:	0043bc0c 	subeq	fp, r3, ip, lsl #24
   12620:	0f480600 	svceq	0x00480600
   12624:	00000603 	andeq	r0, r0, r3, lsl #12
   12628:	44de0c08 	ldrbmi	r0, [lr], #3080	; 0xc08
   1262c:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
   12630:	0006030f 	andeq	r0, r6, pc, lsl #6
   12634:	970c0c00 	strls	r0, [ip, -r0, lsl #24]
   12638:	06000043 	streq	r0, [r0], -r3, asr #32
   1263c:	06030f4a 	streq	r0, [r3], -sl, asr #30
   12640:	0c100000 	ldceq	0, cr0, [r0], {-0}
   12644:	000043fe 	strdeq	r4, [r0], -lr
   12648:	030f4b06 	movweq	r4, #64262	; 0xfb06
   1264c:	14000006 	strne	r0, [r0], #-6
   12650:	0043dd0c 	subeq	sp, r3, ip, lsl #26
   12654:	0f4c0600 	svceq	0x004c0600
   12658:	00000603 	andeq	r0, r0, r3, lsl #12
   1265c:	46420c18 			; <UNDEFINED> instruction: 0x46420c18
   12660:	4d060000 	stcmi	0, cr0, [r6, #-0]
   12664:	0006030f 	andeq	r0, r6, pc, lsl #6
   12668:	460c1c00 	strmi	r1, [ip], -r0, lsl #24
   1266c:	06000046 	streq	r0, [r0], -r6, asr #32
   12670:	06030f4e 	streq	r0, [r3], -lr, asr #30
   12674:	0c200000 	stceq	0, cr0, [r0], #-0
   12678:	000043ae 	andeq	r4, r0, lr, lsr #7
   1267c:	030f4f06 	movweq	r4, #65286	; 0xff06
   12680:	24000006 	strcs	r0, [r0], #-6
   12684:	0044410c 	subeq	r4, r4, ip, lsl #2
   12688:	0f500600 	svceq	0x00500600
   1268c:	00000603 	andeq	r0, r0, r3, lsl #12
   12690:	44540c28 	ldrbmi	r0, [r4], #-3112	; 0xfffff3d8
   12694:	51060000 	mrspl	r0, (UNDEF: 6)
   12698:	0006030f 	andeq	r0, r6, pc, lsl #6
   1269c:	c80c2c00 	stmdagt	ip, {sl, fp, sp}
   126a0:	06000042 	streq	r0, [r0], -r2, asr #32
   126a4:	06030f52 			; <UNDEFINED> instruction: 0x06030f52
   126a8:	0c300000 	ldceq	0, cr0, [r0], #-0
   126ac:	0000438b 	andeq	r4, r0, fp, lsl #7
   126b0:	030f5306 	movweq	r5, #62214	; 0xf306
   126b4:	34000006 	strcc	r0, [r0], #-6
   126b8:	0045310c 	subeq	r3, r5, ip, lsl #2
   126bc:	0f540600 	svceq	0x00540600
   126c0:	00000603 	andeq	r0, r0, r3, lsl #12
   126c4:	51060038 	tstpl	r6, r8, lsr r0
   126c8:	2100000b 	tstcs	r0, fp
   126cc:	0000450f 	andeq	r4, r0, pc, lsl #10
   126d0:	22236506 	eorcs	r6, r3, #25165824	; 0x1800000
   126d4:	0f00000c 	svceq	0x0000000c
   126d8:	000042e6 	andeq	r4, r0, r6, ror #5
   126dc:	0867060c 	stmdaeq	r7!, {r2, r3, r9, sl}^
   126e0:	00000c68 	andeq	r0, r0, r8, ror #24
   126e4:	0043c00c 	subeq	ip, r3, ip
   126e8:	0f690600 	svceq	0x00690600
   126ec:	00000603 	andeq	r0, r0, r3, lsl #12
   126f0:	44e20c00 	strbtmi	r0, [r2], #3072	; 0xc00
   126f4:	6a060000 	bvs	1926fc <__ccfg+0x172754>
   126f8:	0006030f 	andeq	r0, r6, pc, lsl #6
   126fc:	9b0c0400 	blls	313704 <__ccfg+0x2f375c>
   12700:	06000043 	streq	r0, [r0], -r3, asr #32
   12704:	06030f6b 	streq	r0, [r3], -fp, ror #30
   12708:	00080000 	andeq	r0, r8, r0
   1270c:	000c3306 	andeq	r3, ip, r6, lsl #6
   12710:	42872100 	addmi	r2, r7, #0, 2
   12714:	72060000 	andvc	r0, r6, #0
   12718:	000c6822 	andeq	r6, ip, r2, lsr #16
   1271c:	43120f00 	tstmi	r2, #0, 30
   12720:	06fc0000 	ldrbteq	r0, [ip], r0
   12724:	0d640874 	stcleq	8, cr0, [r4, #-464]!	; 0xfffffe30
   12728:	6d100000 	ldcvs	0, cr0, [r0, #-0]
   1272c:	06006e6f 	streq	r6, [r0], -pc, ror #28
   12730:	0d690f76 	stcleq	15, cr0, [r9, #-472]!	; 0xfffffe28
   12734:	0c000000 	stceq	0, cr0, [r0], {-0}
   12738:	0000465b 	andeq	r4, r0, fp, asr r6
   1273c:	690f7706 	stmdbvs	pc, {r1, r2, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
   12740:	3000000d 	andcc	r0, r0, sp
   12744:	0003420c 	andeq	r4, r3, ip, lsl #4
   12748:	0f780600 	svceq	0x00780600
   1274c:	00000d79 	andeq	r0, r0, r9, ror sp
   12750:	45070c60 	strmi	r0, [r7, #-3168]	; 0xfffff3a0
   12754:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
   12758:	000d790f 	andeq	r7, sp, pc, lsl #18
   1275c:	a40c7c00 	strge	r7, [ip], #-3072	; 0xfffff400
   12760:	06000043 	streq	r0, [r0], -r3, asr #32
   12764:	06030f7a 			; <UNDEFINED> instruction: 0x06030f7a
   12768:	0c980000 	ldceq	0, cr0, [r8], {0}
   1276c:	0000442d 	andeq	r4, r0, sp, lsr #8
   12770:	030f7b06 	movweq	r7, #64262	; 0xfb06
   12774:	9c000006 	stcls	0, cr0, [r0], {6}
   12778:	0043ce0c 	subeq	ip, r3, ip, lsl #28
   1277c:	0f7c0600 	svceq	0x007c0600
   12780:	00000603 	andeq	r0, r0, r3, lsl #12
   12784:	43370ca0 	teqmi	r7, #160, 24	; 0xa000
   12788:	7d060000 	stcvc	0, cr0, [r6, #-0]
   1278c:	000d890f 	andeq	r8, sp, pc, lsl #18
   12790:	d40ca400 	strle	sl, [ip], #-1024	; 0xfffffc00
   12794:	06000043 	streq	r0, [r0], -r3, asr #32
   12798:	06030f7e 			; <UNDEFINED> instruction: 0x06030f7e
   1279c:	0cac0000 	stceq	0, cr0, [ip]
   127a0:	00004657 	andeq	r4, r0, r7, asr r6
   127a4:	690f7f06 	stmdbvs	pc, {r1, r2, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   127a8:	b000000d 	andlt	r0, r0, sp
   127ac:	0044a00c 	subeq	sl, r4, ip
   127b0:	0f800600 	svceq	0x00800600
   127b4:	00000603 	andeq	r0, r0, r3, lsl #12
   127b8:	44f00ce0 	ldrbtmi	r0, [r0], #3296	; 0xce0
   127bc:	81060000 	mrshi	r0, (UNDEF: 6)
   127c0:	0006030f 	andeq	r0, r6, pc, lsl #6
   127c4:	6510e400 	ldrvs	lr, [r0, #-1024]	; 0xfffffc00
   127c8:	06006172 			; <UNDEFINED> instruction: 0x06006172
   127cc:	06030f82 	streq	r0, [r3], -r2, lsl #31
   127d0:	0ce80000 	stcleq	0, cr0, [r8]
   127d4:	000044b8 			; <UNDEFINED> instruction: 0x000044b8
   127d8:	030f8306 	movweq	r8, #62214	; 0xf306
   127dc:	ec000006 	stc	0, cr0, [r0], {6}
   127e0:	00433d0c 	subeq	r3, r3, ip, lsl #26
   127e4:	0f840600 	svceq	0x00840600
   127e8:	00000603 	andeq	r0, r0, r3, lsl #12
   127ec:	44cd0cf0 	strbmi	r0, [sp], #3312	; 0xcf0
   127f0:	85060000 	strhi	r0, [r6, #-0]
   127f4:	0006030f 	andeq	r0, r6, pc, lsl #6
   127f8:	1c0cf400 	cfstrsne	mvf15, [ip], {-0}
   127fc:	06000043 	streq	r0, [r0], -r3, asr #32
   12800:	06030f86 	streq	r0, [r3], -r6, lsl #31
   12804:	00f80000 	rscseq	r0, r8, r0
   12808:	000c7906 	andeq	r7, ip, r6, lsl #18
   1280c:	06030900 	streq	r0, [r3], -r0, lsl #18
   12810:	0d790000 	ldcleq	0, cr0, [r9, #-0]
   12814:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12818:	0b000000 	bleq	12820 <__exidx_end+0xcd44>
   1281c:	06030900 	streq	r0, [r3], -r0, lsl #18
   12820:	0d890000 	stceq	0, cr0, [r9]
   12824:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12828:	06000000 	streq	r0, [r0], -r0
   1282c:	06030900 	streq	r0, [r3], -r0, lsl #18
   12830:	0d990000 	ldceq	0, cr0, [r9]
   12834:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12838:	01000000 	mrseq	r0, (UNDEF: 0)
   1283c:	42f32100 	rscsmi	r2, r3, #0, 2
   12840:	9a060000 	bls	192848 <__ccfg+0x1728a0>
   12844:	000d641f 	andeq	r6, sp, pc, lsl r4
   12848:	44f90f00 	ldrbtmi	r0, [r9], #3840	; 0xf00
   1284c:	06100000 	ldreq	r0, [r0], -r0
   12850:	0de7089c 	stcleq	8, cr0, [r7, #624]!	; 0x270
   12854:	b00c0000 	andlt	r0, ip, r0
   12858:	06000044 	streq	r0, [r0], -r4, asr #32
   1285c:	06030f9e 			; <UNDEFINED> instruction: 0x06030f9e
   12860:	0c000000 	stceq	0, cr0, [r0], {-0}
   12864:	00004426 	andeq	r4, r0, r6, lsr #8
   12868:	030f9f06 	movweq	r9, #65286	; 0xff06
   1286c:	04000006 	streq	r0, [r0], #-6
   12870:	0044a90c 	subeq	sl, r4, ip, lsl #18
   12874:	0fa00600 	svceq	0x00a00600
   12878:	00000603 	andeq	r0, r0, r3, lsl #12
   1287c:	43490c08 	movtmi	r0, #39944	; 0x9c08
   12880:	a1060000 	mrsge	r0, (UNDEF: 6)
   12884:	0006030f 	andeq	r0, r6, pc, lsl #6
   12888:	06000c00 	streq	r0, [r0], -r0, lsl #24
   1288c:	00000da5 	andeq	r0, r0, r5, lsr #27
   12890:	00437421 	subeq	r7, r3, r1, lsr #8
   12894:	23aa0600 			; <UNDEFINED> instruction: 0x23aa0600
   12898:	00000de7 	andeq	r0, r0, r7, ror #27
   1289c:	0005d309 	andeq	sp, r5, r9, lsl #6
   128a0:	000e0e00 	andeq	r0, lr, r0, lsl #28
   128a4:	00380a00 	eorseq	r0, r8, r0, lsl #20
   128a8:	0a060000 	beq	1928b0 <__ccfg+0x172908>
   128ac:	00000038 	andeq	r0, r0, r8, lsr r0
   128b0:	2515001f 	ldrcs	r0, [r5, #-31]	; 0xffffffe1
   128b4:	2c000000 	stccs	0, cr0, [r0], {-0}
   128b8:	1600000e 	strne	r0, [r0], -lr
   128bc:	00000479 	andeq	r0, r0, r9, ror r4
   128c0:	0005cd16 	andeq	ip, r5, r6, lsl sp
   128c4:	003f1600 	eorseq	r1, pc, r0, lsl #12
   128c8:	2c160000 	ldccs	0, cr0, [r6], {-0}
   128cc:	0000000e 	andeq	r0, r0, lr
   128d0:	09c60411 	stmibeq	r6, {r0, r4, sl}^
   128d4:	04110000 	ldreq	r0, [r1], #-0
   128d8:	00000e0e 	andeq	r0, r0, lr, lsl #28
   128dc:	00002515 	andeq	r2, r0, r5, lsl r5
   128e0:	000e5b00 	andeq	r5, lr, r0, lsl #22
   128e4:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   128e8:	5b160000 	blpl	5928f0 <__ccfg+0x572948>
   128ec:	1600000e 	strne	r0, [r0], -lr
   128f0:	00000603 	andeq	r0, r0, r3, lsl #12
   128f4:	00002c16 	andeq	r2, r0, r6, lsl ip
   128f8:	0e2c1600 	cfmadda32eq	mvax0, mvax1, mvfx12, mvfx0
   128fc:	11000000 	mrsne	r0, (UNDEF: 0)
   12900:	00003f04 	andeq	r3, r0, r4, lsl #30
   12904:	38041100 	stmdacc	r4, {r8, ip}
   12908:	0900000e 	stmdbeq	r0, {r1, r2, r3}
   1290c:	000005d3 	ldrdeq	r0, [r0], -r3
   12910:	00000e77 	andeq	r0, r0, r7, ror lr
   12914:	0000380a 	andeq	r3, r0, sl, lsl #16
   12918:	09000100 	stmdbeq	r0, {r8}
   1291c:	000005d3 	ldrdeq	r0, [r0], -r3
   12920:	00000e87 	andeq	r0, r0, r7, lsl #29
   12924:	0000380a 	andeq	r3, r0, sl, lsl #16
   12928:	22001f00 	andcs	r1, r0, #0, 30
   1292c:	00001659 	andeq	r1, r0, r9, asr r6
   12930:	17091f0a 	strne	r1, [r9, -sl, lsl #30]
   12934:	68000001 	stmdavs	r0, {r0}
   12938:	aa000048 	bge	12a60 <__exidx_end+0xcf84>
   1293c:	01000000 	mrseq	r0, (UNDEF: 0)
   12940:	000f289c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
   12944:	42b32300 	adcsmi	r2, r3, #0, 6
   12948:	31010000 	mrscc	r0, (UNDEF: 1)
   1294c:	0001191a 	andeq	r1, r1, sl, lsl r9
   12950:	24500100 	ldrbcs	r0, [r0], #-256	; 0xffffff00
   12954:	00004652 	andeq	r4, r0, r2, asr r6
   12958:	b4193201 	ldrlt	r3, [r9], #-513	; 0xfffffdff
   1295c:	eb000009 	bl	12988 <__exidx_end+0xceac>
   12960:	df000055 	svcle	0x00000055
   12964:	24000055 	strcs	r0, [r0], #-85	; 0xffffffab
   12968:	0000463d 	andeq	r4, r0, sp, lsr r6
   1296c:	2c093301 	stccs	3, cr3, [r9], {1}
   12970:	66000000 	strvs	r0, [r0], -r0
   12974:	3e000056 	mcrcc	0, 0, r0, cr0, cr6, {2}
   12978:	25000056 	strcs	r0, [r0, #-86]	; 0xffffffaa
   1297c:	00747364 	rsbseq	r7, r4, r4, ror #6
   12980:	cd094201 	sfmgt	f4, 4, [r9, #-4]
   12984:	a5000005 	strge	r0, [r0, #-5]
   12988:	95000057 	strls	r0, [r0, #-87]	; 0xffffffa9
   1298c:	25000057 	strcs	r0, [r0, #-87]	; 0xffffffa9
   12990:	00637273 	rsbeq	r7, r3, r3, ror r2
   12994:	030f4301 	movweq	r4, #62209	; 0xf301
   12998:	28000006 	stmdacs	r0, {r1, r2}
   1299c:	18000058 	stmdane	r0, {r3, r4, r6}
   129a0:	26000058 			; <UNDEFINED> instruction: 0x26000058
   129a4:	000042b8 			; <UNDEFINED> instruction: 0x000042b8
   129a8:	28094401 	stmdacs	r9, {r0, sl, lr}
   129ac:	b900000f 	stmdblt	r0, {r0, r1, r2, r3}
   129b0:	a1000058 	qaddge	r0, r8, r0
   129b4:	26000058 			; <UNDEFINED> instruction: 0x26000058
   129b8:	0000453d 	andeq	r4, r0, sp, lsr r5
   129bc:	2e0f4501 	cfsh32cs	mvfx4, mvfx15, #1
   129c0:	b000000f 	andlt	r0, r0, pc
   129c4:	98000059 	stmdals	r0, {r0, r3, r4, r6}
   129c8:	00000059 	andeq	r0, r0, r9, asr r0
   129cc:	00830411 	addeq	r0, r3, r1, lsl r4
   129d0:	04110000 	ldreq	r0, [r1], #-0
   129d4:	0000008a 	andeq	r0, r0, sl, lsl #1
   129d8:	00097600 	andeq	r7, r9, r0, lsl #12
   129dc:	c0000400 	andgt	r0, r0, r0, lsl #8
   129e0:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   129e4:	00454901 	subeq	r4, r5, r1, lsl #18
   129e8:	46610c00 	strbtmi	r0, [r1], -r0, lsl #24
   129ec:	46960000 	ldrmi	r0, [r6], r0
   129f0:	49140000 	ldmdbmi	r4, {}	; <UNPREDICTABLE>
   129f4:	004c0000 	subeq	r0, ip, r0
   129f8:	906a0000 	rsbls	r0, sl, r0
   129fc:	04020000 	streq	r0, [r2], #-0
   12a00:	00042d07 	andeq	r2, r4, r7, lsl #26
   12a04:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   12a08:	00746e69 	rsbseq	r6, r4, r9, ror #28
   12a0c:	fb050802 	blx	154a1e <__ccfg+0x134a76>
   12a10:	02000007 	andeq	r0, r0, #7
   12a14:	441a0408 	ldrmi	r0, [sl], #-1032	; 0xfffffbf8
   12a18:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   12a1c:	0200000b 	andeq	r0, r0, #11
   12a20:	25170165 	ldrcs	r0, [r7, #-357]	; 0xfffffe9b
   12a24:	02000000 	andeq	r0, r0, #0
   12a28:	0c600601 	stcleq	6, cr0, [r0], #-4
   12a2c:	01020000 	mrseq	r0, (UNDEF: 2)
   12a30:	000c5e08 	andeq	r5, ip, r8, lsl #28
   12a34:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   12a38:	00000a6e 	andeq	r0, r0, lr, ror #20
   12a3c:	5b070202 	blpl	1d324c <__ccfg+0x1b32a4>
   12a40:	0200000d 	andeq	r0, r0, #13
   12a44:	08000504 	stmdaeq	r0, {r2, r8, sl}
   12a48:	04020000 	streq	r0, [r2], #-0
   12a4c:	00042807 	andeq	r2, r4, r7, lsl #16
   12a50:	07080200 	streq	r0, [r8, -r0, lsl #4]
   12a54:	00000423 	andeq	r0, r0, r3, lsr #8
   12a58:	000e3e05 	andeq	r3, lr, r5, lsl #28
   12a5c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
   12a60:	0000006a 	andeq	r0, r0, sl, rrx
   12a64:	0002f605 	andeq	pc, r2, r5, lsl #12
   12a68:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
   12a6c:	0000006a 	andeq	r0, r0, sl, rrx
   12a70:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
   12a74:	0000b903 	andeq	fp, r0, r3, lsl #18
   12a78:	076f0700 	strbeq	r0, [pc, -r0, lsl #14]!
   12a7c:	a7030000 	strge	r0, [r3, -r0]
   12a80:	0000410c 	andeq	r4, r0, ip, lsl #2
   12a84:	0ab70700 	beq	fedd468c <_estack+0xdedcf68c>
   12a88:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
   12a8c:	0000b913 	andeq	fp, r0, r3, lsl r9
   12a90:	55080000 	strpl	r0, [r8, #-0]
   12a94:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
   12a98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   12a9c:	00000025 	andeq	r0, r0, r5, lsr #32
   12aa0:	080a0003 	stmdaeq	sl, {r0, r1}
   12aa4:	ed09a203 	sfm	f2, 1, [r9, #-12]
   12aa8:	0b000000 	bleq	12ab0 <__exidx_end+0xcfd4>
   12aac:	00000390 	muleq	r0, r0, r3
   12ab0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
   12ab4:	00000000 	andeq	r0, r0, r0
   12ab8:	0006040b 	andeq	r0, r6, fp, lsl #8
   12abc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
   12ac0:	00000097 	muleq	r0, r7, r0
   12ac4:	b8050004 	stmdalt	r5, {r2}
   12ac8:	03000008 	movweq	r0, #8
   12acc:	00c903aa 	sbceq	r0, r9, sl, lsr #7
   12ad0:	040c0000 	streq	r0, [ip], #-0
   12ad4:	00084505 	andeq	r4, r8, r5, lsl #10
   12ad8:	19160400 	ldmdbne	r6, {sl}
   12adc:	00000071 	andeq	r0, r0, r1, ror r0
   12ae0:	00024a05 	andeq	r4, r2, r5, lsl #20
   12ae4:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   12ae8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12aec:	00072d05 	andeq	r2, r7, r5, lsl #26
   12af0:	1b230400 	blne	8d3af8 <__ccfg+0x8b3b50>
   12af4:	00000107 	andeq	r0, r0, r7, lsl #2
   12af8:	0003290d 	andeq	r2, r3, sp, lsl #18
   12afc:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   12b00:	00017908 	andeq	r7, r1, r8, lsl #18
   12b04:	0eb90b00 	vmoveq.f64	d0, #144	; 0xc0800000 -4.0
   12b08:	36040000 	strcc	r0, [r4], -r0
   12b0c:	00017913 	andeq	r7, r1, r3, lsl r9
   12b10:	5f0e0000 	svcpl	0x000e0000
   12b14:	3704006b 	strcc	r0, [r4, -fp, rrx]
   12b18:	00002c07 	andeq	r2, r0, r7, lsl #24
   12b1c:	650b0400 	strvs	r0, [fp, #-1024]	; 0xfffffc00
   12b20:	0400000b 	streq	r0, [r0], #-11
   12b24:	002c0b37 	eoreq	r0, ip, r7, lsr fp
   12b28:	0b080000 	bleq	212b30 <__ccfg+0x1f2b88>
   12b2c:	000043e5 	andeq	r4, r0, r5, ror #7
   12b30:	2c143704 	ldccs	7, cr3, [r4], {4}
   12b34:	0c000000 	stceq	0, cr0, [r0], {-0}
   12b38:	0004570b 	andeq	r5, r4, fp, lsl #14
   12b3c:	1b370400 	blne	dd3b44 <__ccfg+0xdb3b9c>
   12b40:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b44:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   12b48:	0b380400 	bleq	e13b50 <__ccfg+0xdf3ba8>
   12b4c:	0000017f 	andeq	r0, r0, pc, ror r1
   12b50:	040f0014 	streq	r0, [pc], #-20	; 12b58 <__exidx_end+0xd07c>
   12b54:	0000011f 	andeq	r0, r0, pc, lsl r1
   12b58:	0000fb08 	andeq	pc, r0, r8, lsl #22
   12b5c:	00018f00 	andeq	r8, r1, r0, lsl #30
   12b60:	00250900 	eoreq	r0, r5, r0, lsl #18
   12b64:	00000000 	andeq	r0, r0, r0
   12b68:	000b800d 	andeq	r8, fp, sp
   12b6c:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   12b70:	00021208 	andeq	r1, r2, r8, lsl #4
   12b74:	056f0b00 	strbeq	r0, [pc, #-2816]!	; 1207c <__exidx_end+0xc5a0>
   12b78:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   12b7c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b80:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
   12b84:	04000003 	streq	r0, [r0], #-3
   12b88:	002c093f 	eoreq	r0, ip, pc, lsr r9
   12b8c:	0b040000 	bleq	112b94 <__ccfg+0xf2bec>
   12b90:	0000035a 	andeq	r0, r0, sl, asr r3
   12b94:	2c094004 	stccs	0, cr4, [r9], {4}
   12b98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12b9c:	0006770b 	andeq	r7, r6, fp, lsl #14
   12ba0:	09410400 	stmdbeq	r1, {sl}^
   12ba4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ba8:	09570b0c 	ldmdbeq	r7, {r2, r3, r8, r9, fp}^
   12bac:	42040000 	andmi	r0, r4, #0
   12bb0:	00002c09 	andeq	r2, r0, r9, lsl #24
   12bb4:	d10b1000 	mrsle	r1, (UNDEF: 11)
   12bb8:	0400000a 	streq	r0, [r0], #-10
   12bbc:	002c0943 	eoreq	r0, ip, r3, asr #18
   12bc0:	0b140000 	bleq	512bc8 <__ccfg+0x4f2c20>
   12bc4:	0000033d 	andeq	r0, r0, sp, lsr r3
   12bc8:	2c094404 	cfstrscs	mvf4, [r9], {4}
   12bcc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12bd0:	0005780b 	andeq	r7, r5, fp, lsl #16
   12bd4:	09450400 	stmdbeq	r5, {sl}^
   12bd8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12bdc:	08f30b1c 	ldmeq	r3!, {r2, r3, r4, r8, r9, fp}^
   12be0:	46040000 	strmi	r0, [r4], -r0
   12be4:	00002c09 	andeq	r2, r0, r9, lsl #24
   12be8:	10002000 	andne	r2, r0, r0
   12bec:	00000032 	andeq	r0, r0, r2, lsr r0
   12bf0:	4f040108 	svcmi	0x00040108
   12bf4:	00025708 	andeq	r5, r2, r8, lsl #14
   12bf8:	0d220b00 	vstmdbeq	r2!, {d0-d-1}
   12bfc:	50040000 	andpl	r0, r4, r0
   12c00:	0002570a 	andeq	r5, r2, sl, lsl #14
   12c04:	1a0b0000 	bne	2d2c0c <__ccfg+0x2b2c64>
   12c08:	0400000c 	streq	r0, [r0], #-12
   12c0c:	02570951 	subseq	r0, r7, #1327104	; 0x144000
   12c10:	11800000 	orrne	r0, r0, r0
   12c14:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
   12c18:	fb0a5304 	blx	2a7832 <__ccfg+0x28788a>
   12c1c:	00000000 	andeq	r0, r0, r0
   12c20:	0eac1101 	fdveqe	f1, f4, f1
   12c24:	56040000 	strpl	r0, [r4], -r0
   12c28:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   12c2c:	00010400 	andeq	r0, r1, r0, lsl #8
   12c30:	0000f908 	andeq	pc, r0, r8, lsl #18
   12c34:	00026700 	andeq	r6, r2, r0, lsl #14
   12c38:	00250900 	eoreq	r0, r5, r0, lsl #18
   12c3c:	001f0000 	andseq	r0, pc, r0
   12c40:	000a1910 	andeq	r1, sl, r0, lsl r9
   12c44:	04019000 	streq	r9, [r1], #-0
   12c48:	02aa0862 	adceq	r0, sl, #6422528	; 0x620000
   12c4c:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
   12c50:	0400000e 	streq	r0, [r0], #-14
   12c54:	02aa1263 	adceq	r1, sl, #805306374	; 0x30000006
   12c58:	0b000000 	bleq	12c60 <__exidx_end+0xd184>
   12c5c:	00000587 	andeq	r0, r0, r7, lsl #11
   12c60:	2c066404 	cfstrscs	mvf6, [r6], {4}
   12c64:	04000000 	streq	r0, [r0], #-0
   12c68:	0002fe0b 	andeq	pc, r2, fp, lsl #28
   12c6c:	09660400 	stmdbeq	r6!, {sl}^
   12c70:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
   12c74:	00320b08 	eorseq	r0, r2, r8, lsl #22
   12c78:	67040000 	strvs	r0, [r4, -r0]
   12c7c:	0002121e 	andeq	r1, r2, lr, lsl r2
   12c80:	0f008800 	svceq	0x00008800
   12c84:	00026704 	andeq	r6, r2, r4, lsl #14
   12c88:	02c00800 	sbceq	r0, r0, #0, 16
   12c8c:	02c00000 	sbceq	r0, r0, #0
   12c90:	25090000 	strcs	r0, [r9, #-0]
   12c94:	1f000000 	svcne	0x00000000
   12c98:	c6040f00 	strgt	r0, [r4], -r0, lsl #30
   12c9c:	12000002 	andne	r0, r0, #2
   12ca0:	000cba0d 	andeq	fp, ip, sp, lsl #20
   12ca4:	7a040800 	bvc	114cac <__ccfg+0xf4d04>
   12ca8:	0002ef08 	andeq	lr, r2, r8, lsl #30
   12cac:	0ccc0b00 	vstmiaeq	ip, {d16-d15}
   12cb0:	7b040000 	blvc	112cb8 <__ccfg+0xf2d10>
   12cb4:	0002ef11 	andeq	lr, r2, r1, lsl pc
   12cb8:	950b0000 	strls	r0, [fp, #-0]
   12cbc:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   12cc0:	002c067c 	eoreq	r0, ip, ip, ror r6
   12cc4:	00040000 	andeq	r0, r4, r0
   12cc8:	0055040f 	subseq	r0, r5, pc, lsl #8
   12ccc:	4f0d0000 	svcmi	0x000d0000
   12cd0:	68000004 	stmdavs	r0, {r2}
   12cd4:	3808ba04 	stmdacc	r8, {r2, r9, fp, ip, sp, pc}
   12cd8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   12cdc:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   12ce0:	02ef12bb 	rsceq	r1, pc, #-1342177269	; 0xb000000b
   12ce4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   12ce8:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   12cec:	002c07bc 	strhteq	r0, [ip], -ip
   12cf0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   12cf4:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   12cf8:	002c07bd 	strhteq	r0, [ip], -sp
   12cfc:	0b080000 	bleq	212d04 <__ccfg+0x1f2d5c>
   12d00:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   12d04:	5c09be04 	stcpl	14, cr11, [r9], {4}
   12d08:	0c000000 	stceq	0, cr0, [r0], {-0}
   12d0c:	00085c0b 	andeq	r5, r8, fp, lsl #24
   12d10:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   12d14:	0000005c 	andeq	r0, r0, ip, asr r0
   12d18:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   12d1c:	c0040066 	andgt	r0, r4, r6, rrx
   12d20:	0002c711 	andeq	ip, r2, r1, lsl r7
   12d24:	b20b1000 	andlt	r1, fp, #0
   12d28:	04000001 	streq	r0, [r0], #-1
   12d2c:	002c07c1 	eoreq	r0, ip, r1, asr #15
   12d30:	0b180000 	bleq	612d38 <__ccfg+0x5f2d90>
   12d34:	00000303 	andeq	r0, r0, r3, lsl #6
   12d38:	f90ac804 			; <UNDEFINED> instruction: 0xf90ac804
   12d3c:	1c000000 	stcne	0, cr0, [r0], {-0}
   12d40:	001d240b 	andseq	r2, sp, fp, lsl #8
   12d44:	1dca0400 	cfstrdne	mvd0, [sl]
   12d48:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
   12d4c:	1ceb0b20 	vstmiane	fp!, {d16-d31}
   12d50:	cc040000 	stcgt	0, cr0, [r4], {-0}
   12d54:	0005e61d 	andeq	lr, r5, sp, lsl r6
   12d58:	d90b2400 	stmdble	fp, {sl, sp}
   12d5c:	0400000e 	streq	r0, [r0], #-14
   12d60:	060a0dcf 	streq	r0, [sl], -pc, asr #27
   12d64:	0b280000 	bleq	a12d6c <__ccfg+0x9f2dc4>
   12d68:	00001cd9 	ldrdeq	r1, [r0], -r9
   12d6c:	2409d004 	strcs	sp, [r9], #-4
   12d70:	2c000006 	stccs	0, cr0, [r0], {6}
   12d74:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   12d78:	11d30400 	bicsne	r0, r3, r0, lsl #8
   12d7c:	000002c7 	andeq	r0, r0, r7, asr #5
   12d80:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 11f58 <__exidx_end+0xc47c>
   12d84:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   12d88:	0002ef12 	andeq	lr, r2, r2, lsl pc
   12d8c:	5f0e3800 	svcpl	0x000e3800
   12d90:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   12d94:	002c07d5 	ldrdeq	r0, [ip], -r5	; <UNPREDICTABLE>
   12d98:	0b3c0000 	bleq	f12da0 <__ccfg+0xef2df8>
   12d9c:	00000f10 	andeq	r0, r0, r0, lsl pc
   12da0:	2a11d804 	bcs	488db8 <__ccfg+0x468e10>
   12da4:	40000006 	andmi	r0, r0, r6
   12da8:	000e590b 	andeq	r5, lr, fp, lsl #18
   12dac:	11d90400 	bicsne	r0, r9, r0, lsl #8
   12db0:	0000063a 	andeq	r0, r0, sl, lsr r6
   12db4:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   12db8:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   12dbc:	0002c711 	andeq	ip, r2, r1, lsl r7
   12dc0:	770b4400 	strvc	r4, [fp, -r0, lsl #8]
   12dc4:	0400000b 	streq	r0, [r0], #-11
   12dc8:	002c07df 	ldrdeq	r0, [ip], -pc	; <UNPREDICTABLE>
   12dcc:	0b4c0000 	bleq	1312dd4 <__ccfg+0x12f2e2c>
   12dd0:	00000483 	andeq	r0, r0, r3, lsl #9
   12dd4:	7f0ae004 	svcvc	0x000ae004
   12dd8:	50000000 	andpl	r0, r0, r0
   12ddc:	0047430b 	subeq	r4, r7, fp, lsl #6
   12de0:	12e30400 	rscne	r0, r3, #0, 8
   12de4:	00000456 	andeq	r0, r0, r6, asr r4
   12de8:	0b9d0b54 	bleq	fe755b40 <_estack+0xde750b40>
   12dec:	e7040000 	str	r0, [r4, -r0]
   12df0:	0001130c 	andeq	r1, r1, ip, lsl #6
   12df4:	210b5800 	tstcs	fp, r0, lsl #16
   12df8:	0400000a 	streq	r0, [r0], #-10
   12dfc:	00ed0ee9 	rsceq	r0, sp, r9, ror #29
   12e00:	0b5c0000 	bleq	1712e08 <__ccfg+0x16f2e60>
   12e04:	00000e8c 	andeq	r0, r0, ip, lsl #29
   12e08:	2c09ea04 			; <UNDEFINED> instruction: 0x2c09ea04
   12e0c:	64000000 	strvs	r0, [r0], #-0
   12e10:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12e14:	04560000 	ldrbeq	r0, [r6], #-0
   12e18:	56140000 	ldrpl	r0, [r4], -r0
   12e1c:	14000004 	strne	r0, [r0], #-4
   12e20:	000000f9 	strdeq	r0, [r0], -r9
   12e24:	0005aa14 	andeq	sl, r5, r4, lsl sl
   12e28:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12e2c:	0f000000 	svceq	0x00000000
   12e30:	00046104 	andeq	r6, r4, r4, lsl #2
   12e34:	04561500 	ldrbeq	r1, [r6], #-1280	; 0xfffffb00
   12e38:	54160000 	ldrpl	r0, [r6], #-0
   12e3c:	2800000d 	stmdacs	r0, {r0, r2, r3}
   12e40:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   12e44:	0005aa08 	andeq	sl, r5, r8, lsl #20
   12e48:	09071700 	stmdbeq	r7, {r8, r9, sl, ip}
   12e4c:	67040000 	strvs	r0, [r4, -r0]
   12e50:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12e54:	17000000 	strne	r0, [r0, -r0]
   12e58:	000007e5 	andeq	r0, r0, r5, ror #15
   12e5c:	0b026c04 	bleq	ade74 <__ccfg+0x8decc>
   12e60:	00000696 	muleq	r0, r6, r6
   12e64:	02ee1704 	rsceq	r1, lr, #4, 14	; 0x100000
   12e68:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12e6c:	06961402 	ldreq	r1, [r6], r2, lsl #8
   12e70:	17080000 	strne	r0, [r8, -r0]
   12e74:	00000eff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12e78:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   12e7c:	00000696 	muleq	r0, r6, r6
   12e80:	0582170c 	streq	r1, [r2, #1804]	; 0x70c
   12e84:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   12e88:	002c0802 	eoreq	r0, ip, r2, lsl #16
   12e8c:	17100000 	ldrne	r0, [r0, -r0]
   12e90:	000004cf 	andeq	r0, r0, pc, asr #9
   12e94:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   12e98:	00000896 	muleq	r0, r6, r8
   12e9c:	0e6c1714 	mcreq	7, 3, r1, cr12, cr4, {0}
   12ea0:	72040000 	andvc	r0, r4, #0
   12ea4:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12ea8:	17300000 	ldrne	r0, [r0, -r0]!
   12eac:	00004291 	muleq	r0, r1, r2
   12eb0:	16027304 	strne	r7, [r2], -r4, lsl #6
   12eb4:	000008ab 	andeq	r0, r0, fp, lsr #17
   12eb8:	078d1734 			; <UNDEFINED> instruction: 0x078d1734
   12ebc:	75040000 	strvc	r0, [r4, #-0]
   12ec0:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12ec4:	17380000 	ldrne	r0, [r8, -r0]!
   12ec8:	00000887 	andeq	r0, r0, r7, lsl #17
   12ecc:	0a027704 	beq	b0ae4 <__ccfg+0x90b3c>
   12ed0:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
   12ed4:	0352173c 	cmpeq	r2, #60, 14	; 0xf00000
   12ed8:	7a040000 	bvc	112ee0 <__ccfg+0xf2f38>
   12edc:	01791302 	cmneq	r9, r2, lsl #6
   12ee0:	17400000 	strbne	r0, [r0, -r0]
   12ee4:	0000040d 	andeq	r0, r0, sp, lsl #8
   12ee8:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   12eec:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ef0:	060c1744 	streq	r1, [ip], -r4, asr #14
   12ef4:	7c040000 	stcvc	0, cr0, [r4], {-0}
   12ef8:	01791302 	cmneq	r9, r2, lsl #6
   12efc:	17480000 	strbne	r0, [r8, -r0]
   12f00:	00000822 	andeq	r0, r0, r2, lsr #16
   12f04:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   12f08:	000008c2 	andeq	r0, r0, r2, asr #17
   12f0c:	0b5d174c 	bleq	1758c44 <__ccfg+0x1738c9c>
   12f10:	80040000 	andhi	r0, r4, r0
   12f14:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12f18:	17500000 	ldrbne	r0, [r0, -r0]
   12f1c:	00000c56 	andeq	r0, r0, r6, asr ip
   12f20:	09028104 	stmdbeq	r2, {r2, r8, pc}
   12f24:	000005aa 	andeq	r0, r0, sl, lsr #11
   12f28:	0c701754 	ldcleq	7, cr1, [r0], #-336	; 0xfffffeb0
   12f2c:	a4040000 	strge	r0, [r4], #-0
   12f30:	08710702 	ldmdaeq	r1!, {r1, r8, r9, sl}^
   12f34:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   12f38:	00000a19 	andeq	r0, r0, r9, lsl sl
   12f3c:	1302a804 	movwne	sl, #10244	; 0x2804
   12f40:	000002aa 	andeq	r0, r0, sl, lsr #5
   12f44:	b1180148 	tstlt	r8, r8, asr #2
   12f48:	04000006 	streq	r0, [r0], #-6
   12f4c:	671202a9 	ldrvs	r0, [r2, -r9, lsr #5]
   12f50:	4c000002 	stcmi	0, cr0, [r0], {2}
   12f54:	06981801 	ldreq	r1, [r8], r1, lsl #16
   12f58:	ad040000 	stcge	0, cr0, [r4, #-0]
   12f5c:	08d30c02 	ldmeq	r3, {r1, sl, fp}^
   12f60:	02dc0000 	sbcseq	r0, ip, #0
   12f64:	000cd818 	andeq	sp, ip, r8, lsl r8
   12f68:	02b20400 	adcseq	r0, r2, #0, 8
   12f6c:	00065710 	andeq	r5, r6, r0, lsl r7
   12f70:	1802e000 	stmdane	r2, {sp, lr, pc}
   12f74:	00000aa9 	andeq	r0, r0, r9, lsr #21
   12f78:	0a02b404 	beq	bff90 <__ccfg+0x9ffe8>
   12f7c:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12f80:	0f0002ec 	svceq	0x000002ec
   12f84:	0005b004 	andeq	fp, r5, r4
   12f88:	08010200 	stmdaeq	r1, {r9}
   12f8c:	00000c67 	andeq	r0, r0, r7, ror #24
   12f90:	0005b015 	andeq	fp, r5, r5, lsl r0
   12f94:	38040f00 	stmdacc	r4, {r8, r9, sl, fp}
   12f98:	13000004 	movwne	r0, #4
   12f9c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12fa0:	000005e0 	andeq	r0, r0, r0, ror #11
   12fa4:	00045614 	andeq	r5, r4, r4, lsl r6
   12fa8:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12fac:	e0140000 	ands	r0, r4, r0
   12fb0:	14000005 	strne	r0, [r0], #-5
   12fb4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12fb8:	b7040f00 	strlt	r0, [r4, -r0, lsl #30]
   12fbc:	0f000005 	svceq	0x00000005
   12fc0:	0005c204 	andeq	ip, r5, r4, lsl #4
   12fc4:	008b1300 	addeq	r1, fp, r0, lsl #6
   12fc8:	060a0000 	streq	r0, [sl], -r0
   12fcc:	56140000 	ldrpl	r0, [r4], -r0
   12fd0:	14000004 	strne	r0, [r0], #-4
   12fd4:	000000f9 	strdeq	r0, [r0], -r9
   12fd8:	00008b14 	andeq	r8, r0, r4, lsl fp
   12fdc:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12fe0:	0f000000 	svceq	0x00000000
   12fe4:	0005ec04 	andeq	lr, r5, r4, lsl #24
   12fe8:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12fec:	06240000 	strteq	r0, [r4], -r0
   12ff0:	56140000 	ldrpl	r0, [r4], -r0
   12ff4:	14000004 	strne	r0, [r0], #-4
   12ff8:	000000f9 	strdeq	r0, [r0], -r9
   12ffc:	10040f00 	andne	r0, r4, r0, lsl #30
   13000:	08000006 	stmdaeq	r0, {r1, r2}
   13004:	00000055 	andeq	r0, r0, r5, asr r0
   13008:	0000063a 	andeq	r0, r0, sl, lsr r6
   1300c:	00002509 	andeq	r2, r0, r9, lsl #10
   13010:	08000200 	stmdaeq	r0, {r9}
   13014:	00000055 	andeq	r0, r0, r5, asr r0
   13018:	0000064a 	andeq	r0, r0, sl, asr #12
   1301c:	00002509 	andeq	r2, r0, r9, lsl #10
   13020:	04000000 	streq	r0, [r0], #-0
   13024:	00000470 	andeq	r0, r0, r0, ror r4
   13028:	1a012404 	bne	5c040 <__ccfg+0x3c098>
   1302c:	000002f5 	strdeq	r0, [r0], -r5
   13030:	000cd219 	andeq	sp, ip, r9, lsl r2
   13034:	28040c00 	stmdacs	r4, {sl, fp}
   13038:	06900801 	ldreq	r0, [r0], r1, lsl #16
   1303c:	b9170000 	ldmdblt	r7, {}	; <UNPREDICTABLE>
   13040:	0400000e 	streq	r0, [r0], #-14
   13044:	9011012a 	andsls	r0, r1, sl, lsr #2
   13048:	00000006 	andeq	r0, r0, r6
   1304c:	000bd117 	andeq	sp, fp, r7, lsl r1
   13050:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   13054:	00002c07 	andeq	r2, r0, r7, lsl #24
   13058:	75170400 	ldrvc	r0, [r7, #-1024]	; 0xfffffc00
   1305c:	04000007 	streq	r0, [r0], #-7
   13060:	960b012c 	strls	r0, [fp], -ip, lsr #2
   13064:	08000006 	stmdaeq	r0, {r1, r2}
   13068:	57040f00 	strpl	r0, [r4, -r0, lsl #30]
   1306c:	0f000006 	svceq	0x00000006
   13070:	00064a04 	andeq	r4, r6, r4, lsl #20
   13074:	03dc1900 	bicseq	r1, ip, #0, 18
   13078:	040e0000 	streq	r0, [lr], #-0
   1307c:	d5080144 	strle	r0, [r8, #-324]	; 0xfffffebc
   13080:	17000006 	strne	r0, [r0, -r6]
   13084:	00001640 	andeq	r1, r0, r0, asr #12
   13088:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   1308c:	000006d5 	ldrdeq	r0, [r0], -r5
   13090:	08341700 	ldmdaeq	r4!, {r8, r9, sl, ip}
   13094:	46040000 	strmi	r0, [r4], -r0
   13098:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   1309c:	17060000 	strne	r0, [r6, -r0]
   130a0:	000014f2 	strdeq	r1, [r0], -r2
   130a4:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   130a8:	00000063 	andeq	r0, r0, r3, rrx
   130ac:	6308000c 	movwvs	r0, #32780	; 0x800c
   130b0:	e5000000 	str	r0, [r0, #-0]
   130b4:	09000006 	stmdbeq	r0, {r1, r2}
   130b8:	00000025 	andeq	r0, r0, r5, lsr #32
   130bc:	d01a0002 	andsle	r0, sl, r2
   130c0:	07028504 	streq	r8, [r2, -r4, lsl #10]
   130c4:	000007fa 	strdeq	r0, [r0], -sl
   130c8:	000e5f17 	andeq	r5, lr, r7, lsl pc
   130cc:	02870400 	addeq	r0, r7, #0, 8
   130d0:	00002518 	andeq	r2, r0, r8, lsl r5
   130d4:	e0170000 	ands	r0, r7, r0
   130d8:	0400000c 	streq	r0, [r0], #-12
   130dc:	aa120288 	bge	493b04 <__ccfg+0x473b5c>
   130e0:	04000005 	streq	r0, [r0], #-5
   130e4:	00043a17 	andeq	r3, r4, r7, lsl sl
   130e8:	02890400 	addeq	r0, r9, #0, 8
   130ec:	0007fa10 	andeq	pc, r7, r0, lsl sl	; <UNPREDICTABLE>
   130f0:	46170800 	ldrmi	r0, [r7], -r0, lsl #16
   130f4:	0400000b 	streq	r0, [r0], #-11
   130f8:	8f17028a 	svchi	0x0017028a
   130fc:	24000001 	strcs	r0, [r0], #-1
   13100:	0007ec17 	andeq	lr, r7, r7, lsl ip
   13104:	028b0400 	addeq	r0, fp, #0, 8
   13108:	00002c0f 	andeq	r2, r0, pc, lsl #24
   1310c:	b4174800 	ldrlt	r4, [r7], #-2048	; 0xfffff800
   13110:	0400000e 	streq	r0, [r0], #-14
   13114:	782c028c 	stmdavc	ip!, {r2, r3, r7, r9}
   13118:	50000000 	andpl	r0, r0, r0
   1311c:	00007617 	andeq	r7, r0, r7, lsl r6
   13120:	028d0400 	addeq	r0, sp, #0, 8
   13124:	00069c1a 	andeq	r9, r6, sl, lsl ip
   13128:	3c175800 	ldccc	8, cr5, [r7], {-0}
   1312c:	04000006 	streq	r0, [r0], #-6
   13130:	ed16028e 	lfm	f0, 4, [r6, #-568]	; 0xfffffdc8
   13134:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   13138:	000ced17 	andeq	lr, ip, r7, lsl sp
   1313c:	028f0400 	addeq	r0, pc, #0, 8
   13140:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13144:	68177000 	ldmdavs	r7, {ip, sp, lr}
   13148:	04000000 	streq	r0, [r0], #-0
   1314c:	ed160290 	lfm	f0, 4, [r6, #-576]	; 0xfffffdc0
   13150:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   13154:	000b6d17 	andeq	r6, fp, r7, lsl sp
   13158:	02910400 	addseq	r0, r1, #0, 8
   1315c:	00080a10 	andeq	r0, r8, r0, lsl sl
   13160:	17178000 	ldrne	r8, [r7, -r0]
   13164:	04000004 	streq	r0, [r0], #-4
   13168:	1a100292 	bne	413bb8 <__ccfg+0x3f3c10>
   1316c:	88000008 	stmdahi	r0, {r3}
   13170:	000c9017 	andeq	r9, ip, r7, lsl r0
   13174:	02930400 	addseq	r0, r3, #0, 8
   13178:	00002c0f 	andeq	r2, r0, pc, lsl #24
   1317c:	a317a000 	tstge	r7, #0
   13180:	04000002 	streq	r0, [r0], #-2
   13184:	ed160294 	lfm	f0, 4, [r6, #-592]	; 0xfffffdb0
   13188:	a4000000 	strge	r0, [r0], #-0
   1318c:	0006a217 	andeq	sl, r6, r7, lsl r2
   13190:	02950400 	addseq	r0, r5, #0, 8
   13194:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13198:	be17ac00 	cdplt	12, 1, cr10, cr7, cr0, {0}
   1319c:	04000005 	streq	r0, [r0], #-5
   131a0:	ed160296 	lfm	f0, 4, [r6, #-600]	; 0xfffffda8
   131a4:	b4000000 	strlt	r0, [r0], #-0
   131a8:	00084d17 	andeq	r4, r8, r7, lsl sp
   131ac:	02970400 	addseq	r0, r7, #0, 8
   131b0:	0000ed16 	andeq	lr, r0, r6, lsl sp
   131b4:	2b17bc00 	blcs	6021bc <__ccfg+0x5e2214>
   131b8:	04000006 	streq	r0, [r0], #-6
   131bc:	ed160298 	lfm	f0, 4, [r6, #-608]	; 0xfffffda0
   131c0:	c4000000 	strgt	r0, [r0], #-0
   131c4:	00090517 	andeq	r0, r9, r7, lsl r5
   131c8:	02990400 	addseq	r0, r9, #0, 8
   131cc:	00002c08 	andeq	r2, r0, r8, lsl #24
   131d0:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   131d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   131d8:	0000080a 	andeq	r0, r0, sl, lsl #16
   131dc:	00002509 	andeq	r2, r0, r9, lsl #10
   131e0:	08001900 	stmdaeq	r0, {r8, fp, ip}
   131e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   131e8:	0000081a 	andeq	r0, r0, sl, lsl r8
   131ec:	00002509 	andeq	r2, r0, r9, lsl #10
   131f0:	08000700 	stmdaeq	r0, {r8, r9, sl}
   131f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   131f8:	0000082a 	andeq	r0, r0, sl, lsr #16
   131fc:	00002509 	andeq	r2, r0, r9, lsl #10
   13200:	1a001700 	bne	18e08 <__exidx_end+0x1332c>
   13204:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   13208:	00085107 	andeq	r5, r8, r7, lsl #2
   1320c:	03c21700 	biceq	r1, r2, #0, 14
   13210:	a1040000 	mrsge	r0, (UNDEF: 4)
   13214:	08511b02 	ldmdaeq	r1, {r1, r8, r9, fp, ip}^
   13218:	17000000 	strne	r0, [r0, -r0]
   1321c:	00000f07 	andeq	r0, r0, r7, lsl #30
   13220:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   13224:	00000861 	andeq	r0, r0, r1, ror #16
   13228:	ef080078 	svc	0x00080078
   1322c:	61000002 	tstvs	r0, r2
   13230:	09000008 	stmdbeq	r0, {r3}
   13234:	00000025 	andeq	r0, r0, r5, lsr #32
   13238:	2508001d 	strcs	r0, [r8, #-29]	; 0xffffffe3
   1323c:	71000000 	mrsvc	r0, (UNDEF: 0)
   13240:	09000008 	stmdbeq	r0, {r3}
   13244:	00000025 	andeq	r0, r0, r5, lsr #32
   13248:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   1324c:	03028304 	movweq	r8, #8964	; 0x2304
   13250:	00000896 	muleq	r0, r6, r8
   13254:	000d541c 	andeq	r5, sp, ip, lsl r4
   13258:	029a0400 	addseq	r0, sl, #0, 8
   1325c:	0006e50b 	andeq	lr, r6, fp, lsl #10
   13260:	0b551c00 	bleq	155a268 <__ccfg+0x153a2c0>
   13264:	a3040000 	movwge	r0, #16384	; 0x4000
   13268:	082a0b02 	stmdaeq	sl!, {r1, r8, r9, fp}
   1326c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13270:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   13274:	000008a6 	andeq	r0, r0, r6, lsr #17
   13278:	00002509 	andeq	r2, r0, r9, lsl #10
   1327c:	1d001800 	stcne	8, cr1, [r0, #-0]
   13280:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
   13284:	08a6040f 	stmiaeq	r6!, {r0, r1, r2, r3, sl}
   13288:	bc1e0000 	ldclt	0, cr0, [lr], {-0}
   1328c:	14000008 	strne	r0, [r0], #-8
   13290:	00000456 	andeq	r0, r0, r6, asr r4
   13294:	b1040f00 	tstlt	r4, r0, lsl #30
   13298:	0f000008 	svceq	0x00000008
   1329c:	00017904 	andeq	r7, r1, r4, lsl #18
   132a0:	08d31e00 	ldmeq	r3, {r9, sl, fp, ip}^
   132a4:	2c140000 	ldccs	0, cr0, [r4], {-0}
   132a8:	00000000 	andeq	r0, r0, r0
   132ac:	08d9040f 	ldmeq	r9, {r0, r1, r2, r3, sl}^
   132b0:	040f0000 	streq	r0, [pc], #-0	; 132b8 <__exidx_end+0xd7dc>
   132b4:	000008c8 	andeq	r0, r0, r8, asr #17
   132b8:	00064a08 	andeq	r4, r6, r8, lsl #20
   132bc:	0008ef00 	andeq	lr, r8, r0, lsl #30
   132c0:	00250900 	eoreq	r0, r5, r0, lsl #18
   132c4:	00020000 	andeq	r0, r2, r0
   132c8:	000ac51f 	andeq	ip, sl, pc, lsl r5
   132cc:	03330400 	teqeq	r3, #0, 8
   132d0:	00045617 	andeq	r5, r4, r7, lsl r6
   132d4:	0abe1f00 	beq	fef9aedc <_estack+0xdef95edc>
   132d8:	34040000 	strcc	r0, [r4], #-0
   132dc:	045c1d03 	ldrbeq	r1, [ip], #-3331	; 0xfffff2fd
   132e0:	33200000 	nopcc	{0}	; <UNPREDICTABLE>
   132e4:	06000044 	streq	r0, [r0], -r4, asr #32
   132e8:	05aa0e67 	streq	r0, [sl, #3687]!	; 0xe67
   132ec:	67210000 	strvs	r0, [r1, -r0]!
   132f0:	0600000e 	streq	r0, [r0], -lr
   132f4:	002c0590 	mlaeq	ip, r0, r5, r0
   132f8:	49280000 	stmdbmi	r8!, {}	; <UNPREDICTABLE>
   132fc:	00380000 	eorseq	r0, r8, r0
   13300:	9c010000 	stcls	0, cr0, [r1], {-0}
   13304:	00000944 	andeq	r0, r0, r4, asr #18
   13308:	00473722 	subeq	r3, r7, r2, lsr #14
   1330c:	12490100 	subne	r0, r9, #0, 2
   13310:	00000456 	andeq	r0, r0, r6, asr r4
   13314:	00005a66 	andeq	r5, r0, r6, ror #20
   13318:	00005a60 	andeq	r5, r0, r0, ror #20
   1331c:	46902300 	ldrmi	r2, [r0], r0, lsl #6
   13320:	9f060000 	svcls	0x00060000
   13324:	00491406 	subeq	r1, r9, r6, lsl #8
   13328:	00001400 	andeq	r1, r0, r0, lsl #8
   1332c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
   13330:	00001641 	andeq	r1, r0, r1, asr #12
   13334:	25153e01 	ldrcs	r3, [r5, #-3585]	; 0xfffff1ff
   13338:	01000000 	mrseq	r0, (UNDEF: 0)
   1333c:	47372250 			; <UNDEFINED> instruction: 0x47372250
   13340:	40010000 	andmi	r0, r1, r0
   13344:	00045612 	andeq	r5, r4, r2, lsl r6
   13348:	005a9700 	subseq	r9, sl, r0, lsl #14
   1334c:	005a9300 	subseq	r9, sl, r0, lsl #6
   13350:	26000000 	strcs	r0, [r0], -r0
   13354:	04000009 	streq	r0, [r0], #-9
   13358:	0045d200 	subeq	sp, r5, r0, lsl #4
   1335c:	49010400 	stmdbmi	r1, {sl}
   13360:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   13364:	00004749 	andeq	r4, r0, r9, asr #14
   13368:	000046ea 	andeq	r4, r0, sl, ror #13
   1336c:	000091df 	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>
   13370:	69050402 	stmdbvs	r5, {r1, sl}
   13374:	0300746e 	movweq	r7, #1134	; 0x46e
   13378:	042d0704 	strteq	r0, [sp], #-1796	; 0xfffff8fc
   1337c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13380:	0007fb05 	andeq	pc, r7, r5, lsl #22
   13384:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
   13388:	0000441a 	andeq	r4, r0, sl, lsl r4
   1338c:	000bd804 	andeq	sp, fp, r4, lsl #16
   13390:	01650100 	cmneq	r5, r0, lsl #2
   13394:	00002417 	andeq	r2, r0, r7, lsl r4
   13398:	06010300 	streq	r0, [r1], -r0, lsl #6
   1339c:	00000c60 	andeq	r0, r0, r0, ror #24
   133a0:	5e080103 	adfple	f0, f0, f3
   133a4:	0300000c 	movweq	r0, #12
   133a8:	0a6e0502 	beq	1b947b8 <__ccfg+0x1b74810>
   133ac:	02030000 	andeq	r0, r3, #0
   133b0:	000d5b07 	andeq	r5, sp, r7, lsl #22
   133b4:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   133b8:	00000800 	andeq	r0, r0, r0, lsl #16
   133bc:	28070403 	stmdacs	r7, {r0, r1, sl}
   133c0:	03000004 	movweq	r0, #4
   133c4:	04230708 	strteq	r0, [r3], #-1800	; 0xfffff8f8
   133c8:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   133cc:	0200000e 	andeq	r0, r0, #14
   133d0:	00620e2e 	rsbeq	r0, r2, lr, lsr #28
   133d4:	f6050000 			; <UNDEFINED> instruction: 0xf6050000
   133d8:	02000002 	andeq	r0, r0, #2
   133dc:	00620e74 	rsbeq	r0, r2, r4, ror lr
   133e0:	04060000 	streq	r0, [r6], #-0
   133e4:	b103a502 	tstlt	r3, r2, lsl #10
   133e8:	07000000 	streq	r0, [r0, -r0]
   133ec:	0000076f 	andeq	r0, r0, pc, ror #14
   133f0:	390ca702 	stmdbcc	ip, {r1, r8, r9, sl, sp, pc}
   133f4:	07000000 	streq	r0, [r0, -r0]
   133f8:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
   133fc:	b113a802 	tstlt	r3, r2, lsl #16
   13400:	00000000 	andeq	r0, r0, r0
   13404:	00004d08 	andeq	r4, r0, r8, lsl #26
   13408:	0000c100 	andeq	ip, r0, r0, lsl #2
   1340c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13410:	00030000 	andeq	r0, r3, r0
   13414:	a202080a 	andge	r0, r2, #655360	; 0xa0000
   13418:	0000e509 	andeq	lr, r0, r9, lsl #10
   1341c:	03900b00 	orrseq	r0, r0, #0, 22
   13420:	a4020000 	strge	r0, [r2], #-0
   13424:	00001d07 	andeq	r1, r0, r7, lsl #26
   13428:	040b0000 	streq	r0, [fp], #-0
   1342c:	02000006 	andeq	r0, r0, #6
   13430:	008f05a9 	addeq	r0, pc, r9, lsr #11
   13434:	00040000 	andeq	r0, r4, r0
   13438:	0008b805 	andeq	fp, r8, r5, lsl #16
   1343c:	03aa0200 			; <UNDEFINED> instruction: 0x03aa0200
   13440:	000000c1 	andeq	r0, r0, r1, asr #1
   13444:	4505040c 	strmi	r0, [r5, #-1036]	; 0xfffffbf4
   13448:	03000008 	movweq	r0, #8
   1344c:	00691916 	rsbeq	r1, r9, r6, lsl r9
   13450:	4a050000 	bmi	153458 <__ccfg+0x1334b0>
   13454:	04000002 	streq	r0, [r0], #-2
   13458:	001d0d0c 	andseq	r0, sp, ip, lsl #26
   1345c:	2d050000 	stccs	0, cr0, [r5, #-0]
   13460:	03000007 	movweq	r0, #7
   13464:	00ff1b23 	rscseq	r1, pc, r3, lsr #22
   13468:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
   1346c:	18000003 	stmdane	r0, {r0, r1}
   13470:	71083403 	tstvc	r8, r3, lsl #8
   13474:	0b000001 	bleq	13480 <__exidx_end+0xd9a4>
   13478:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
   1347c:	71133603 	tstvc	r3, r3, lsl #12
   13480:	00000001 	andeq	r0, r0, r1
   13484:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   13488:	1d073703 	stcne	7, cr3, [r7, #-12]
   1348c:	04000000 	streq	r0, [r0], #-0
   13490:	000b650b 	andeq	r6, fp, fp, lsl #10
   13494:	0b370300 	bleq	dd409c <__ccfg+0xdb40f4>
   13498:	0000001d 	andeq	r0, r0, sp, lsl r0
   1349c:	43e50b08 	mvnmi	r0, #8, 22	; 0x2000
   134a0:	37030000 	strcc	r0, [r3, -r0]
   134a4:	00001d14 	andeq	r1, r0, r4, lsl sp
   134a8:	570b0c00 	strpl	r0, [fp, -r0, lsl #24]
   134ac:	03000004 	movweq	r0, #4
   134b0:	001d1b37 	andseq	r1, sp, r7, lsr fp
   134b4:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   134b8:	0300785f 	movweq	r7, #2143	; 0x85f
   134bc:	01770b38 	cmneq	r7, r8, lsr fp
   134c0:	00140000 	andseq	r0, r4, r0
   134c4:	0117040f 	tsteq	r7, pc, lsl #8
   134c8:	f3080000 	vhadd.u8	d0, d8, d0
   134cc:	87000000 	strhi	r0, [r0, -r0]
   134d0:	09000001 	stmdbeq	r0, {r0}
   134d4:	00000024 	andeq	r0, r0, r4, lsr #32
   134d8:	800d0000 	andhi	r0, sp, r0
   134dc:	2400000b 	strcs	r0, [r0], #-11
   134e0:	0a083c03 	beq	2224f4 <__ccfg+0x20254c>
   134e4:	0b000002 	bleq	134f4 <__exidx_end+0xda18>
   134e8:	0000056f 	andeq	r0, r0, pc, ror #10
   134ec:	1d093e03 	stcne	14, cr3, [r9, #-12]
   134f0:	00000000 	andeq	r0, r0, r0
   134f4:	0003b90b 	andeq	fp, r3, fp, lsl #18
   134f8:	093f0300 	ldmdbeq	pc!, {r8, r9}	; <UNPREDICTABLE>
   134fc:	0000001d 	andeq	r0, r0, sp, lsl r0
   13500:	035a0b04 	cmpeq	sl, #4, 22	; 0x1000
   13504:	40030000 	andmi	r0, r3, r0
   13508:	00001d09 	andeq	r1, r0, r9, lsl #26
   1350c:	770b0800 	strvc	r0, [fp, -r0, lsl #16]
   13510:	03000006 	movweq	r0, #6
   13514:	001d0941 	andseq	r0, sp, r1, asr #18
   13518:	0b0c0000 	bleq	313520 <__ccfg+0x2f3578>
   1351c:	00000957 	andeq	r0, r0, r7, asr r9
   13520:	1d094203 	sfmne	f4, 4, [r9, #-12]
   13524:	10000000 	andne	r0, r0, r0
   13528:	000ad10b 	andeq	sp, sl, fp, lsl #2
   1352c:	09430300 	stmdbeq	r3, {r8, r9}^
   13530:	0000001d 	andeq	r0, r0, sp, lsl r0
   13534:	033d0b14 	teqeq	sp, #20, 22	; 0x5000
   13538:	44030000 	strmi	r0, [r3], #-0
   1353c:	00001d09 	andeq	r1, r0, r9, lsl #26
   13540:	780b1800 	stmdavc	fp, {fp, ip}
   13544:	03000005 	movweq	r0, #5
   13548:	001d0945 	andseq	r0, sp, r5, asr #18
   1354c:	0b1c0000 	bleq	713554 <__ccfg+0x6f35ac>
   13550:	000008f3 	strdeq	r0, [r0], -r3
   13554:	1d094603 	stcne	6, cr4, [r9, #-12]
   13558:	20000000 	andcs	r0, r0, r0
   1355c:	00321000 	eorseq	r1, r2, r0
   13560:	01080000 	mrseq	r0, (UNDEF: 8)
   13564:	4f084f03 	svcmi	0x00084f03
   13568:	0b000002 	bleq	13578 <__exidx_end+0xda9c>
   1356c:	00000d22 	andeq	r0, r0, r2, lsr #26
   13570:	4f0a5003 	svcmi	0x000a5003
   13574:	00000002 	andeq	r0, r0, r2
   13578:	000c1a0b 	andeq	r1, ip, fp, lsl #20
   1357c:	09510300 	ldmdbeq	r1, {r8, r9}^
   13580:	0000024f 	andeq	r0, r0, pc, asr #4
   13584:	0dbb1180 	ldfeqs	f1, [fp, #512]!	; 0x200
   13588:	53030000 	movwpl	r0, #12288	; 0x3000
   1358c:	0000f30a 	andeq	pc, r0, sl, lsl #6
   13590:	11010000 	mrsne	r0, (UNDEF: 1)
   13594:	00000eac 	andeq	r0, r0, ip, lsr #29
   13598:	f30a5603 	vmax.u8	d5, d10, d3
   1359c:	04000000 	streq	r0, [r0], #-0
   135a0:	f1080001 	cps	#1
   135a4:	5f000000 	svcpl	0x00000000
   135a8:	09000002 	stmdbeq	r0, {r1}
   135ac:	00000024 	andeq	r0, r0, r4, lsr #32
   135b0:	1910001f 	ldmdbne	r0, {r0, r1, r2, r3, r4}
   135b4:	9000000a 	andls	r0, r0, sl
   135b8:	08620301 	stmdaeq	r2!, {r0, r8, r9}^
   135bc:	000002a2 	andeq	r0, r0, r2, lsr #5
   135c0:	000eb90b 	andeq	fp, lr, fp, lsl #18
   135c4:	12630300 	rsbne	r0, r3, #0, 6
   135c8:	000002a2 	andeq	r0, r0, r2, lsr #5
   135cc:	05870b00 	streq	r0, [r7, #2816]	; 0xb00
   135d0:	64030000 	strvs	r0, [r3], #-0
   135d4:	00001d06 	andeq	r1, r0, r6, lsl #26
   135d8:	fe0b0400 	cdp2	4, 0, cr0, cr11, cr0, {0}
   135dc:	03000002 	movweq	r0, #2
   135e0:	02a80966 	adceq	r0, r8, #1671168	; 0x198000
   135e4:	0b080000 	bleq	2135ec <__ccfg+0x1f3644>
   135e8:	00000032 	andeq	r0, r0, r2, lsr r0
   135ec:	0a1e6703 	beq	7ad200 <__ccfg+0x78d258>
   135f0:	88000002 	stmdahi	r0, {r1}
   135f4:	5f040f00 	svcpl	0x00040f00
   135f8:	08000002 	stmdaeq	r0, {r1}
   135fc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
   13600:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
   13604:	00002409 	andeq	r2, r0, r9, lsl #8
   13608:	0f001f00 	svceq	0x00001f00
   1360c:	0002be04 	andeq	fp, r2, r4, lsl #28
   13610:	ba0d1200 	blt	357e18 <__ccfg+0x337e70>
   13614:	0800000c 	stmdaeq	r0, {r2, r3}
   13618:	e7087a03 	str	r7, [r8, -r3, lsl #20]
   1361c:	0b000002 	bleq	1362c <__exidx_end+0xdb50>
   13620:	00000ccc 	andeq	r0, r0, ip, asr #25
   13624:	e7117b03 	ldr	r7, [r1, -r3, lsl #22]
   13628:	00000002 	andeq	r0, r0, r2
   1362c:	001d950b 	andseq	r9, sp, fp, lsl #10
   13630:	067c0300 	ldrbteq	r0, [ip], -r0, lsl #6
   13634:	0000001d 	andeq	r0, r0, sp, lsl r0
   13638:	040f0004 	streq	r0, [pc], #-4	; 13640 <__exidx_end+0xdb64>
   1363c:	0000004d 	andeq	r0, r0, sp, asr #32
   13640:	00044f0d 	andeq	r4, r4, sp, lsl #30
   13644:	ba036800 	blt	ed64c <__ccfg+0xcd6a4>
   13648:	00043008 	andeq	r3, r4, r8
   1364c:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   13650:	12bb0300 	adcsne	r0, fp, #0, 6
   13654:	000002e7 	andeq	r0, r0, r7, ror #5
   13658:	725f0e00 	subsvc	r0, pc, #0, 28
   1365c:	07bc0300 	ldreq	r0, [ip, r0, lsl #6]!
   13660:	0000001d 	andeq	r0, r0, sp, lsl r0
   13664:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   13668:	07bd0300 	ldreq	r0, [sp, r0, lsl #6]!
   1366c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13670:	01bb0b08 			; <UNDEFINED> instruction: 0x01bb0b08
   13674:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
   13678:	00005409 	andeq	r5, r0, r9, lsl #8
   1367c:	5c0b0c00 	stcpl	12, cr0, [fp], {-0}
   13680:	03000008 	movweq	r0, #8
   13684:	005409bf 	ldrheq	r0, [r4], #-159	; 0xffffff61
   13688:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   1368c:	0066625f 	rsbeq	r6, r6, pc, asr r2
   13690:	bf11c003 	svclt	0x0011c003
   13694:	10000002 	andne	r0, r0, r2
   13698:	0001b20b 	andeq	fp, r1, fp, lsl #4
   1369c:	07c10300 	strbeq	r0, [r1, r0, lsl #6]
   136a0:	0000001d 	andeq	r0, r0, sp, lsl r0
   136a4:	03030b18 	movweq	r0, #15128	; 0x3b18
   136a8:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
   136ac:	0000f10a 	andeq	pc, r0, sl, lsl #2
   136b0:	240b1c00 	strcs	r1, [fp], #-3072	; 0xfffff400
   136b4:	0300001d 	movweq	r0, #29
   136b8:	05b41dca 	ldreq	r1, [r4, #3530]!	; 0xdca
   136bc:	0b200000 	bleq	8136c4 <__ccfg+0x7f371c>
   136c0:	00001ceb 	andeq	r1, r0, fp, ror #25
   136c4:	de1dcc03 	cdple	12, 1, cr12, cr13, cr3, {0}
   136c8:	24000005 	strcs	r0, [r0], #-5
   136cc:	000ed90b 	andeq	sp, lr, fp, lsl #18
   136d0:	0dcf0300 	stcleq	3, cr0, [pc]	; 136d8 <__exidx_end+0xdbfc>
   136d4:	00000602 	andeq	r0, r0, r2, lsl #12
   136d8:	1cd90b28 	vldmiane	r9, {d16-<overflow reg d35>}
   136dc:	d0030000 	andle	r0, r3, r0
   136e0:	00061c09 	andeq	r1, r6, r9, lsl #24
   136e4:	5f0e2c00 	svcpl	0x000e2c00
   136e8:	03006275 	movweq	r6, #629	; 0x275
   136ec:	02bf11d3 	adcseq	r1, pc, #-1073741772	; 0xc0000034
   136f0:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   136f4:	0070755f 	rsbseq	r7, r0, pc, asr r5
   136f8:	e712d403 	ldr	sp, [r2, -r3, lsl #8]
   136fc:	38000002 	stmdacc	r0, {r1}
   13700:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   13704:	07d50300 	ldrbeq	r0, [r5, r0, lsl #6]
   13708:	0000001d 	andeq	r0, r0, sp, lsl r0
   1370c:	0f100b3c 	svceq	0x00100b3c
   13710:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
   13714:	00062211 	andeq	r2, r6, r1, lsl r2
   13718:	590b4000 	stmdbpl	fp, {lr}
   1371c:	0300000e 	movweq	r0, #14
   13720:	063211d9 			; <UNDEFINED> instruction: 0x063211d9
   13724:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   13728:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   1372c:	bf11dc03 	svclt	0x0011dc03
   13730:	44000002 	strmi	r0, [r0], #-2
   13734:	000b770b 	andeq	r7, fp, fp, lsl #14
   13738:	07df0300 	ldrbeq	r0, [pc, r0, lsl #6]
   1373c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13740:	04830b4c 	streq	r0, [r3], #2892	; 0xb4c
   13744:	e0030000 	and	r0, r3, r0
   13748:	0000770a 	andeq	r7, r0, sl, lsl #14
   1374c:	430b5000 	movwmi	r5, #45056	; 0xb000
   13750:	03000047 	movweq	r0, #71	; 0x47
   13754:	044e12e3 	strbeq	r1, [lr], #-739	; 0xfffffd1d
   13758:	0b540000 	bleq	1513760 <__ccfg+0x14f37b8>
   1375c:	00000b9d 	muleq	r0, sp, fp
   13760:	0b0ce703 	bleq	34d374 <__ccfg+0x32d3cc>
   13764:	58000001 	stmdapl	r0, {r0}
   13768:	000a210b 	andeq	r2, sl, fp, lsl #2
   1376c:	0ee90300 	cdpeq	3, 14, cr0, cr9, cr0, {0}
   13770:	000000e5 	andeq	r0, r0, r5, ror #1
   13774:	0e8c0b5c 			; <UNDEFINED> instruction: 0x0e8c0b5c
   13778:	ea030000 	b	d3780 <__ccfg+0xb37d8>
   1377c:	00001d09 	andeq	r1, r0, r9, lsl #26
   13780:	13006400 	movwne	r6, #1024	; 0x400
   13784:	0000001d 	andeq	r0, r0, sp, lsl r0
   13788:	0000044e 	andeq	r0, r0, lr, asr #8
   1378c:	00044e14 	andeq	r4, r4, r4, lsl lr
   13790:	00f11400 	rscseq	r1, r1, r0, lsl #8
   13794:	a2140000 	andsge	r0, r4, #0
   13798:	14000005 	strne	r0, [r0], #-5
   1379c:	0000001d 	andeq	r0, r0, sp, lsl r0
   137a0:	59040f00 	stmdbpl	r4, {r8, r9, sl, fp}
   137a4:	15000004 	strne	r0, [r0, #-4]
   137a8:	0000044e 	andeq	r0, r0, lr, asr #8
   137ac:	000d5416 	andeq	r5, sp, r6, lsl r4
   137b0:	03042800 	movweq	r2, #18432	; 0x4800
   137b4:	a2080265 	andge	r0, r8, #1342177286	; 0x50000006
   137b8:	17000005 	strne	r0, [r0, -r5]
   137bc:	00000907 	andeq	r0, r0, r7, lsl #18
   137c0:	07026703 	streq	r6, [r2, -r3, lsl #14]
   137c4:	0000001d 	andeq	r0, r0, sp, lsl r0
   137c8:	07e51700 	strbeq	r1, [r5, r0, lsl #14]!
   137cc:	6c030000 	stcvs	0, cr0, [r3], {-0}
   137d0:	068e0b02 	streq	r0, [lr], r2, lsl #22
   137d4:	17040000 	strne	r0, [r4, -r0]
   137d8:	000002ee 	andeq	r0, r0, lr, ror #5
   137dc:	14026c03 	strne	r6, [r2], #-3075	; 0xfffff3fd
   137e0:	0000068e 	andeq	r0, r0, lr, lsl #13
   137e4:	0eff1708 	cdpeq	7, 15, cr1, cr15, cr8, {0}
   137e8:	6c030000 	stcvs	0, cr0, [r3], {-0}
   137ec:	068e1e02 	streq	r1, [lr], r2, lsl #28
   137f0:	170c0000 	strne	r0, [ip, -r0]
   137f4:	00000582 	andeq	r0, r0, r2, lsl #11
   137f8:	08026e03 	stmdaeq	r2, {r0, r1, r9, sl, fp, sp, lr}
   137fc:	0000001d 	andeq	r0, r0, sp, lsl r0
   13800:	04cf1710 	strbeq	r1, [pc], #1808	; 13808 <__exidx_end+0xdd2c>
   13804:	6f030000 	svcvs	0x00030000
   13808:	088e0802 	stmeq	lr, {r1, fp}
   1380c:	17140000 	ldrne	r0, [r4, -r0]
   13810:	00000e6c 	andeq	r0, r0, ip, ror #28
   13814:	07027203 	streq	r7, [r2, -r3, lsl #4]
   13818:	0000001d 	andeq	r0, r0, sp, lsl r0
   1381c:	42911730 	addsmi	r1, r1, #48, 14	; 0xc00000
   13820:	73030000 	movwvc	r0, #12288	; 0x3000
   13824:	08a31602 	stmiaeq	r3!, {r1, r9, sl, ip}
   13828:	17340000 	ldrne	r0, [r4, -r0]!
   1382c:	0000078d 	andeq	r0, r0, sp, lsl #15
   13830:	07027503 	streq	r7, [r2, -r3, lsl #10]
   13834:	0000001d 	andeq	r0, r0, sp, lsl r0
   13838:	08871738 	stmeq	r7, {r3, r4, r5, r8, r9, sl, ip}
   1383c:	77030000 	strvc	r0, [r3, -r0]
   13840:	08b40a02 	ldmeq	r4!, {r1, r9, fp}
   13844:	173c0000 	ldrne	r0, [ip, -r0]!
   13848:	00000352 	andeq	r0, r0, r2, asr r3
   1384c:	13027a03 	movwne	r7, #10755	; 0x2a03
   13850:	00000171 	andeq	r0, r0, r1, ror r1
   13854:	040d1740 	streq	r1, [sp], #-1856	; 0xfffff8c0
   13858:	7b030000 	blvc	d3860 <__ccfg+0xb38b8>
   1385c:	001d0702 	andseq	r0, sp, r2, lsl #14
   13860:	17440000 	strbne	r0, [r4, -r0]
   13864:	0000060c 	andeq	r0, r0, ip, lsl #12
   13868:	13027c03 	movwne	r7, #11267	; 0x2c03
   1386c:	00000171 	andeq	r0, r0, r1, ror r1
   13870:	08221748 	stmdaeq	r2!, {r3, r6, r8, r9, sl, ip}
   13874:	7d030000 	stcvc	0, cr0, [r3, #-0]
   13878:	08ba1402 	ldmeq	sl!, {r1, sl, ip}
   1387c:	174c0000 	strbne	r0, [ip, -r0]
   13880:	00000b5d 	andeq	r0, r0, sp, asr fp
   13884:	07028003 	streq	r8, [r2, -r3]
   13888:	0000001d 	andeq	r0, r0, sp, lsl r0
   1388c:	0c561750 	mrrceq	7, 5, r1, r6, cr0
   13890:	81030000 	mrshi	r0, (UNDEF: 3)
   13894:	05a20902 	streq	r0, [r2, #2306]!	; 0x902
   13898:	17540000 	ldrbne	r0, [r4, -r0]
   1389c:	00000c70 	andeq	r0, r0, r0, ror ip
   138a0:	0702a403 	streq	sl, [r2, -r3, lsl #8]
   138a4:	00000869 	andeq	r0, r0, r9, ror #16
   138a8:	0a191858 	beq	659a10 <__ccfg+0x639a68>
   138ac:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
   138b0:	02a21302 	adceq	r1, r2, #134217728	; 0x8000000
   138b4:	01480000 	mrseq	r0, (UNDEF: 72)
   138b8:	0006b118 	andeq	fp, r6, r8, lsl r1
   138bc:	02a90300 	adceq	r0, r9, #0, 6
   138c0:	00025f12 	andeq	r5, r2, r2, lsl pc
   138c4:	18014c00 	stmdane	r1, {sl, fp, lr}
   138c8:	00000698 	muleq	r0, r8, r6
   138cc:	0c02ad03 	stceq	13, cr10, [r2], {3}
   138d0:	000008cb 	andeq	r0, r0, fp, asr #17
   138d4:	d81802dc 	ldmdale	r8, {r2, r3, r4, r6, r7, r9}
   138d8:	0300000c 	movweq	r0, #12
   138dc:	4f1002b2 	svcmi	0x001002b2
   138e0:	e0000006 	and	r0, r0, r6
   138e4:	0aa91802 	beq	fea598f4 <_estack+0xdea548f4>
   138e8:	b4030000 	strlt	r0, [r3], #-0
   138ec:	08d70a02 	ldmeq	r7, {r1, r9, fp}^
   138f0:	02ec0000 	rsceq	r0, ip, #0
   138f4:	a8040f00 	stmdage	r4, {r8, r9, sl, fp}
   138f8:	03000005 	movweq	r0, #5
   138fc:	0c670801 	stcleq	8, cr0, [r7], #-4
   13900:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
   13904:	0f000005 	svceq	0x00000005
   13908:	00043004 	andeq	r3, r4, r4
   1390c:	001d1300 	andseq	r1, sp, r0, lsl #6
   13910:	05d80000 	ldrbeq	r0, [r8]
   13914:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13918:	14000004 	strne	r0, [r0], #-4
   1391c:	000000f1 	strdeq	r0, [r0], -r1
   13920:	0005d814 	andeq	sp, r5, r4, lsl r8
   13924:	001d1400 	andseq	r1, sp, r0, lsl #8
   13928:	0f000000 	svceq	0x00000000
   1392c:	0005af04 	andeq	sl, r5, r4, lsl #30
   13930:	ba040f00 	blt	117538 <__ccfg+0xf7590>
   13934:	13000005 	movwne	r0, #5
   13938:	00000083 	andeq	r0, r0, r3, lsl #1
   1393c:	00000602 	andeq	r0, r0, r2, lsl #12
   13940:	00044e14 	andeq	r4, r4, r4, lsl lr
   13944:	00f11400 	rscseq	r1, r1, r0, lsl #8
   13948:	83140000 	tsthi	r4, #0
   1394c:	14000000 	strne	r0, [r0], #-0
   13950:	0000001d 	andeq	r0, r0, sp, lsl r0
   13954:	e4040f00 	str	r0, [r4], #-3840	; 0xfffff100
   13958:	13000005 	movwne	r0, #5
   1395c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13960:	0000061c 	andeq	r0, r0, ip, lsl r6
   13964:	00044e14 	andeq	r4, r4, r4, lsl lr
   13968:	00f11400 	rscseq	r1, r1, r0, lsl #8
   1396c:	0f000000 	svceq	0x00000000
   13970:	00060804 	andeq	r0, r6, r4, lsl #16
   13974:	004d0800 	subeq	r0, sp, r0, lsl #16
   13978:	06320000 	ldrteq	r0, [r2], -r0
   1397c:	24090000 	strcs	r0, [r9], #-0
   13980:	02000000 	andeq	r0, r0, #0
   13984:	004d0800 	subeq	r0, sp, r0, lsl #16
   13988:	06420000 	strbeq	r0, [r2], -r0
   1398c:	24090000 	strcs	r0, [r9], #-0
   13990:	00000000 	andeq	r0, r0, r0
   13994:	04700400 	ldrbteq	r0, [r0], #-1024	; 0xfffffc00
   13998:	24030000 	strcs	r0, [r3], #-0
   1399c:	02ed1a01 	rsceq	r1, sp, #4096	; 0x1000
   139a0:	d2190000 	andsle	r0, r9, #0
   139a4:	0c00000c 	stceq	0, cr0, [r0], {12}
   139a8:	08012803 	stmdaeq	r1, {r0, r1, fp, sp}
   139ac:	00000688 	andeq	r0, r0, r8, lsl #13
   139b0:	000eb917 	andeq	fp, lr, r7, lsl r9
   139b4:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
   139b8:	00068811 	andeq	r8, r6, r1, lsl r8
   139bc:	d1170000 	tstle	r7, r0
   139c0:	0300000b 	movweq	r0, #11
   139c4:	1d07012b 	stfnes	f0, [r7, #-172]	; 0xffffff54
   139c8:	04000000 	streq	r0, [r0], #-0
   139cc:	00077517 	andeq	r7, r7, r7, lsl r5
   139d0:	012c0300 			; <UNDEFINED> instruction: 0x012c0300
   139d4:	00068e0b 	andeq	r8, r6, fp, lsl #28
   139d8:	0f000800 	svceq	0x00000800
   139dc:	00064f04 	andeq	r4, r6, r4, lsl #30
   139e0:	42040f00 	andmi	r0, r4, #0, 30
   139e4:	19000006 	stmdbne	r0, {r1, r2}
   139e8:	000003dc 	ldrdeq	r0, [r0], -ip
   139ec:	0144030e 	cmpeq	r4, lr, lsl #6
   139f0:	0006cd08 	andeq	ip, r6, r8, lsl #26
   139f4:	16401700 	strbne	r1, [r0], -r0, lsl #14
   139f8:	45030000 	strmi	r0, [r3, #-0]
   139fc:	06cd1201 	strbeq	r1, [sp], r1, lsl #4
   13a00:	17000000 	strne	r0, [r0, -r0]
   13a04:	00000834 	andeq	r0, r0, r4, lsr r8
   13a08:	12014603 	andne	r4, r1, #3145728	; 0x300000
   13a0c:	000006cd 	andeq	r0, r0, sp, asr #13
   13a10:	14f21706 	ldrbtne	r1, [r2], #1798	; 0x706
   13a14:	47030000 	strmi	r0, [r3, -r0]
   13a18:	005b1201 	subseq	r1, fp, r1, lsl #4
   13a1c:	000c0000 	andeq	r0, ip, r0
   13a20:	00005b08 	andeq	r5, r0, r8, lsl #22
   13a24:	0006dd00 	andeq	sp, r6, r0, lsl #26
   13a28:	00240900 	eoreq	r0, r4, r0, lsl #18
   13a2c:	00020000 	andeq	r0, r2, r0
   13a30:	8503d01a 	strhi	sp, [r3, #-26]	; 0xffffffe6
   13a34:	07f20702 	ldrbeq	r0, [r2, r2, lsl #14]!
   13a38:	5f170000 	svcpl	0x00170000
   13a3c:	0300000e 	movweq	r0, #14
   13a40:	24180287 	ldrcs	r0, [r8], #-647	; 0xfffffd79
   13a44:	00000000 	andeq	r0, r0, r0
   13a48:	000ce017 	andeq	lr, ip, r7, lsl r0
   13a4c:	02880300 	addeq	r0, r8, #0, 6
   13a50:	0005a212 	andeq	sl, r5, r2, lsl r2
   13a54:	3a170400 	bcc	5d4a5c <__ccfg+0x5b4ab4>
   13a58:	03000004 	movweq	r0, #4
   13a5c:	f2100289 	vhsub.s16	d0, d16, d9
   13a60:	08000007 	stmdaeq	r0, {r0, r1, r2}
   13a64:	000b4617 	andeq	r4, fp, r7, lsl r6
   13a68:	028a0300 	addeq	r0, sl, #0, 6
   13a6c:	00018717 	andeq	r8, r1, r7, lsl r7
   13a70:	ec172400 	cfldrs	mvf2, [r7], {-0}
   13a74:	03000007 	movweq	r0, #7
   13a78:	1d0f028b 	sfmne	f0, 4, [pc, #-556]	; 13854 <__exidx_end+0xdd78>
   13a7c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   13a80:	000eb417 	andeq	fp, lr, r7, lsl r4
   13a84:	028c0300 	addeq	r0, ip, #0, 6
   13a88:	0000702c 	andeq	r7, r0, ip, lsr #32
   13a8c:	76175000 	ldrvc	r5, [r7], -r0
   13a90:	03000000 	movweq	r0, #0
   13a94:	941a028d 	ldrls	r0, [sl], #-653	; 0xfffffd73
   13a98:	58000006 	stmdapl	r0, {r1, r2}
   13a9c:	00063c17 	andeq	r3, r6, r7, lsl ip
   13aa0:	028e0300 	addeq	r0, lr, #0, 6
   13aa4:	0000e516 	andeq	lr, r0, r6, lsl r5
   13aa8:	ed176800 	ldc	8, cr6, [r7, #-0]
   13aac:	0300000c 	movweq	r0, #12
   13ab0:	e516028f 	ldr	r0, [r6, #-655]	; 0xfffffd71
   13ab4:	70000000 	andvc	r0, r0, r0
   13ab8:	00006817 	andeq	r6, r0, r7, lsl r8
   13abc:	02900300 	addseq	r0, r0, #0, 6
   13ac0:	0000e516 	andeq	lr, r0, r6, lsl r5
   13ac4:	6d177800 	ldcvs	8, cr7, [r7, #-0]
   13ac8:	0300000b 	movweq	r0, #11
   13acc:	02100291 	andseq	r0, r0, #268435465	; 0x10000009
   13ad0:	80000008 	andhi	r0, r0, r8
   13ad4:	00041717 	andeq	r1, r4, r7, lsl r7
   13ad8:	02920300 	addseq	r0, r2, #0, 6
   13adc:	00081210 	andeq	r1, r8, r0, lsl r2
   13ae0:	90178800 	andsls	r8, r7, r0, lsl #16
   13ae4:	0300000c 	movweq	r0, #12
   13ae8:	1d0f0293 	sfmne	f0, 4, [pc, #-588]	; 138a4 <__exidx_end+0xddc8>
   13aec:	a0000000 	andge	r0, r0, r0
   13af0:	0002a317 	andeq	sl, r2, r7, lsl r3
   13af4:	02940300 	addseq	r0, r4, #0, 6
   13af8:	0000e516 	andeq	lr, r0, r6, lsl r5
   13afc:	a217a400 	andsge	sl, r7, #0, 8
   13b00:	03000006 	movweq	r0, #6
   13b04:	e5160295 	ldr	r0, [r6, #-661]	; 0xfffffd6b
   13b08:	ac000000 	stcge	0, cr0, [r0], {-0}
   13b0c:	0005be17 	andeq	fp, r5, r7, lsl lr
   13b10:	02960300 	addseq	r0, r6, #0, 6
   13b14:	0000e516 	andeq	lr, r0, r6, lsl r5
   13b18:	4d17b400 	cfldrsmi	mvf11, [r7, #-0]
   13b1c:	03000008 	movweq	r0, #8
   13b20:	e5160297 	ldr	r0, [r6, #-663]	; 0xfffffd69
   13b24:	bc000000 	stclt	0, cr0, [r0], {-0}
   13b28:	00062b17 	andeq	r2, r6, r7, lsl fp
   13b2c:	02980300 	addseq	r0, r8, #0, 6
   13b30:	0000e516 	andeq	lr, r0, r6, lsl r5
   13b34:	0517c400 	ldreq	ip, [r7, #-1024]	; 0xfffffc00
   13b38:	03000009 	movweq	r0, #9
   13b3c:	1d080299 	sfmne	f0, 4, [r8, #-612]	; 0xfffffd9c
   13b40:	cc000000 	stcgt	0, cr0, [r0], {-0}
   13b44:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13b48:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13b4c:	24090000 	strcs	r0, [r9], #-0
   13b50:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   13b54:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13b58:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
   13b5c:	24090000 	strcs	r0, [r9], #-0
   13b60:	07000000 	streq	r0, [r0, -r0]
   13b64:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13b68:	08220000 	stmdaeq	r2!, {}	; <UNPREDICTABLE>
   13b6c:	24090000 	strcs	r0, [r9], #-0
   13b70:	17000000 	strne	r0, [r0, -r0]
   13b74:	03f01a00 	mvnseq	r1, #0, 20
   13b78:	4907029e 	stmdbmi	r7, {r1, r2, r3, r4, r7, r9}
   13b7c:	17000008 	strne	r0, [r0, -r8]
   13b80:	000003c2 	andeq	r0, r0, r2, asr #7
   13b84:	1b02a103 	blne	bbf98 <__ccfg+0x9bff0>
   13b88:	00000849 	andeq	r0, r0, r9, asr #16
   13b8c:	0f071700 	svceq	0x00071700
   13b90:	a2030000 	andge	r0, r3, #0
   13b94:	08591802 	ldmdaeq	r9, {r1, fp, ip}^
   13b98:	00780000 	rsbseq	r0, r8, r0
   13b9c:	0002e708 	andeq	lr, r2, r8, lsl #14
   13ba0:	00085900 	andeq	r5, r8, r0, lsl #18
   13ba4:	00240900 	eoreq	r0, r4, r0, lsl #18
   13ba8:	001d0000 	andseq	r0, sp, r0
   13bac:	00002408 	andeq	r2, r0, r8, lsl #8
   13bb0:	00086900 	andeq	r6, r8, r0, lsl #18
   13bb4:	00240900 	eoreq	r0, r4, r0, lsl #18
   13bb8:	001d0000 	andseq	r0, sp, r0
   13bbc:	8303f01b 	movwhi	pc, #12315	; 0x301b	; <UNPREDICTABLE>
   13bc0:	088e0302 	stmeq	lr, {r1, r8, r9}
   13bc4:	541c0000 	ldrpl	r0, [ip], #-0
   13bc8:	0300000d 	movweq	r0, #13
   13bcc:	dd0b029a 	sfmle	f0, 4, [fp, #-616]	; 0xfffffd98
   13bd0:	1c000006 	stcne	0, cr0, [r0], {6}
   13bd4:	00000b55 	andeq	r0, r0, r5, asr fp
   13bd8:	0b02a303 	bleq	bc7ec <__ccfg+0x9c844>
   13bdc:	00000822 	andeq	r0, r0, r2, lsr #16
   13be0:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13be4:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
   13be8:	24090000 	strcs	r0, [r9], #-0
   13bec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13bf0:	0ebf1d00 	cdpeq	13, 11, cr1, cr15, cr0, {0}
   13bf4:	040f0000 	streq	r0, [pc], #-0	; 13bfc <__exidx_end+0xe120>
   13bf8:	0000089e 	muleq	r0, lr, r8
   13bfc:	0008b41e 	andeq	fp, r8, lr, lsl r4
   13c00:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   13c04:	0f000000 	svceq	0x00000000
   13c08:	0008a904 	andeq	sl, r8, r4, lsl #18
   13c0c:	71040f00 	tstvc	r4, r0, lsl #30
   13c10:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   13c14:	000008cb 	andeq	r0, r0, fp, asr #17
   13c18:	00001d14 	andeq	r1, r0, r4, lsl sp
   13c1c:	040f0000 	streq	r0, [pc], #-0	; 13c24 <__exidx_end+0xe148>
   13c20:	000008d1 	ldrdeq	r0, [r0], -r1
   13c24:	08c0040f 	stmiaeq	r0, {r0, r1, r2, r3, sl}^
   13c28:	42080000 	andmi	r0, r8, #0
   13c2c:	e7000006 	str	r0, [r0, -r6]
   13c30:	09000008 	stmdbeq	r0, {r3}
   13c34:	00000024 	andeq	r0, r0, r4, lsr #32
   13c38:	c51f0002 	ldrgt	r0, [pc, #-2]	; 13c3e <__exidx_end+0xe162>
   13c3c:	0300000a 	movweq	r0, #10
   13c40:	4e170333 	mrcmi	3, 0, r0, cr7, cr3, {1}
   13c44:	1f000004 	svcne	0x00000004
   13c48:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
   13c4c:	1d033403 	cfstrsne	mvf3, [r3, #-12]
   13c50:	00000454 	andeq	r0, r0, r4, asr r4
   13c54:	00473d20 	subeq	r3, r7, r0, lsr #26
   13c58:	30170500 	andscc	r0, r7, r0, lsl #10
   13c5c:	00000459 	andeq	r0, r0, r9, asr r4
   13c60:	01180305 	tsteq	r8, r5, lsl #6
   13c64:	e7212000 	str	r2, [r1, -r0]!
   13c68:	05000008 	streq	r0, [r0, #-8]
   13c6c:	00011003 	andeq	r1, r1, r3
   13c70:	08f42120 	ldmeq	r4!, {r5, r8, sp}^
   13c74:	03050000 	movweq	r0, #20480	; 0x5000
   13c78:	00000000 	andeq	r0, r0, r0
   13c7c:	000a9200 	andeq	r9, sl, r0, lsl #4
   13c80:	8a000400 	bhi	14c88 <__exidx_end+0xf1ac>
   13c84:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   13c88:	004a9a01 	subeq	r9, sl, r1, lsl #20
   13c8c:	48f40c00 	ldmmi	r4!, {sl, fp}^
   13c90:	52170000 	andspl	r0, r7, #0
   13c94:	49600000 	stmdbmi	r0!, {}^	; <UNPREDICTABLE>
   13c98:	00540000 	subseq	r0, r4, r0
   13c9c:	92bf0000 	adcsls	r0, pc, #0
   13ca0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13ca4:	00042307 	andeq	r2, r4, r7, lsl #6
   13ca8:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   13cac:	00746e69 	rsbseq	r6, r4, r9, ror #28
   13cb0:	2d070402 	cfstrscs	mvf0, [r7, #-8]
   13cb4:	02000004 	andeq	r0, r0, #4
   13cb8:	07fb0508 	ldrbeq	r0, [fp, r8, lsl #10]!
   13cbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13cc0:	00441a04 	subeq	r1, r4, r4, lsl #20
   13cc4:	4b850400 	blmi	fe154ccc <_estack+0xde14fccc>
   13cc8:	2a020000 	bcs	93cd0 <__ccfg+0x73d28>
   13ccc:	00003316 	andeq	r3, r0, r6, lsl r3
   13cd0:	4f320400 	svcmi	0x00320400
   13cd4:	2f020000 	svccs	0x00020000
   13cd8:	00006015 	andeq	r6, r0, r5, lsl r0
   13cdc:	66040500 	strvs	r0, [r4], -r0, lsl #10
   13ce0:	06000000 	streq	r0, [r0], -r0
   13ce4:	00000048 	andeq	r0, r0, r8, asr #32
   13ce8:	00000075 	andeq	r0, r0, r5, ror r0
   13cec:	00007507 	andeq	r7, r0, r7, lsl #10
   13cf0:	04050000 	streq	r0, [r5], #-0
   13cf4:	0000007b 	andeq	r0, r0, fp, ror r0
   13cf8:	56940408 	ldrpl	r0, [r4], r8, lsl #8
   13cfc:	36020000 	strcc	r0, [r2], -r0
   13d00:	0000880f 	andeq	r8, r0, pc, lsl #16
   13d04:	8e040500 	cfsh32hi	mvfx0, mvfx4, #0
   13d08:	06000000 	streq	r0, [r0], -r0
   13d0c:	0000002c 	andeq	r0, r0, ip, lsr #32
   13d10:	000000a2 	andeq	r0, r0, r2, lsr #1
   13d14:	00007507 	andeq	r7, r0, r7, lsl #10
   13d18:	00750700 	rsbseq	r0, r5, r0, lsl #14
   13d1c:	02000000 	andeq	r0, r0, #0
   13d20:	0c5e0801 	mrrceq	8, 0, r0, lr, cr1
   13d24:	4c090000 	stcmi	0, cr0, [r9], {-0}
   13d28:	02000051 	andeq	r0, r0, #81	; 0x51
   13d2c:	005412bb 	ldrheq	r1, [r4], #-43	; 0xffffffd5
   13d30:	c7090000 	strgt	r0, [r9, -r0]
   13d34:	02000056 	andeq	r0, r0, #86	; 0x56
   13d38:	007c10be 	ldrhteq	r1, [ip], #-14
   13d3c:	01020000 	mrseq	r0, (UNDEF: 2)
   13d40:	000c6006 	andeq	r6, ip, r6
   13d44:	4e520a00 	vnmlsmi.f32	s1, s4, s0
   13d48:	01070000 	mrseq	r0, (UNDEF: 7)
   13d4c:	000000a2 	andeq	r0, r0, r2, lsr #1
   13d50:	f5061703 			; <UNDEFINED> instruction: 0xf5061703
   13d54:	0b000001 	bleq	13d60 <__exidx_end+0xe284>
   13d58:	00004928 	andeq	r4, r0, r8, lsr #18
   13d5c:	4d510b00 	vldrmi	d16, [r1, #-0]
   13d60:	0b010000 	bleq	53d68 <__ccfg+0x33dc0>
   13d64:	00005279 	andeq	r5, r0, r9, ror r2
   13d68:	55da0b02 	ldrbpl	r0, [sl, #2818]	; 0xb02
   13d6c:	0b030000 	bleq	d3d74 <__ccfg+0xb3dcc>
   13d70:	000051bb 			; <UNDEFINED> instruction: 0x000051bb
   13d74:	54f70b04 	ldrbtpl	r0, [r7], #2820	; 0xb04
   13d78:	0b050000 	bleq	153d80 <__ccfg+0x133dd8>
   13d7c:	0000545b 	andeq	r5, r0, fp, asr r4
   13d80:	49490b06 	stmdbmi	r9, {r1, r2, r8, r9, fp}^
   13d84:	0b070000 	bleq	1d3d8c <__ccfg+0x1b3de4>
   13d88:	0000550c 	andeq	r5, r0, ip, lsl #10
   13d8c:	551a0b08 	ldrpl	r0, [sl, #-2824]	; 0xfffff4f8
   13d90:	0b090000 	bleq	253d98 <__ccfg+0x233df0>
   13d94:	000055cd 	andeq	r5, r0, sp, asr #11
   13d98:	51120b0a 	tstpl	r2, sl, lsl #22
   13d9c:	0b0b0000 	bleq	2d3da4 <__ccfg+0x2b3dfc>
   13da0:	00004bc6 	andeq	r4, r0, r6, asr #23
   13da4:	4bda0b0c 	blmi	ff6969dc <_estack+0xdf6919dc>
   13da8:	0b0d0000 	bleq	353db0 <__ccfg+0x333e08>
   13dac:	00004e96 	muleq	r0, r6, lr
   13db0:	4eac0b0e 	vfmami.f64	d0, d12, d14
   13db4:	0b0f0000 	bleq	3d3dbc <__ccfg+0x3b3e14>
   13db8:	00004d8b 	andeq	r4, r0, fp, lsl #27
   13dbc:	519f0b10 	orrspl	r0, pc, r0, lsl fp	; <UNPREDICTABLE>
   13dc0:	0b110000 	bleq	453dc8 <__ccfg+0x433e20>
   13dc4:	00004e15 	andeq	r4, r0, r5, lsl lr
   13dc8:	58920b12 	ldmpl	r2, {r1, r4, r8, r9, fp}
   13dcc:	0b130000 	bleq	4d3dd4 <__ccfg+0x4b3e2c>
   13dd0:	000049b2 			; <UNDEFINED> instruction: 0x000049b2
   13dd4:	4e390b14 	vmovmi.32	r0, d9[1]
   13dd8:	0b150000 	bleq	553de0 <__ccfg+0x533e38>
   13ddc:	000048c7 	andeq	r4, r0, r7, asr #17
   13de0:	55fd0b16 	ldrbpl	r0, [sp, #2838]!	; 0xb16
   13de4:	0b170000 	bleq	5d3dec <__ccfg+0x5b3e44>
   13de8:	00005720 	andeq	r5, r0, r0, lsr #14
   13dec:	4e5e0b18 	vmovmi.s8	r0, d14[0]
   13df0:	0b190000 	bleq	653df8 <__ccfg+0x633e50>
   13df4:	000052eb 	andeq	r5, r0, fp, ror #5
   13df8:	560b0b1a 			; <UNDEFINED> instruction: 0x560b0b1a
   13dfc:	0b1b0000 	bleq	6d3e04 <__ccfg+0x6b3e5c>
   13e00:	000047e8 	andeq	r4, r0, r8, ror #15
   13e04:	56190b1c 			; <UNDEFINED> instruction: 0x56190b1c
   13e08:	0b1d0000 	bleq	753e10 <__ccfg+0x733e68>
   13e0c:	00005627 	andeq	r5, r0, r7, lsr #12
   13e10:	47960b1e 			; <UNDEFINED> instruction: 0x47960b1e
   13e14:	0b1f0000 	bleq	7d3e1c <__ccfg+0x7b3e74>
   13e18:	00005651 	andeq	r5, r0, r1, asr r6
   13e1c:	539c0b20 	orrspl	r0, ip, #32, 22	; 0x8000
   13e20:	0b210000 	bleq	853e28 <__ccfg+0x833e80>
   13e24:	00005171 	andeq	r5, r0, r1, ror r1
   13e28:	55f00b22 	ldrbpl	r0, [r0, #2850]!	; 0xb22
   13e2c:	0b230000 	bleq	8d3e34 <__ccfg+0x8b3e8c>
   13e30:	00005093 	muleq	r0, r3, r0
   13e34:	4f950b24 	svcmi	0x00950b24
   13e38:	0b250000 	bleq	953e40 <__ccfg+0x933e98>
   13e3c:	00004c91 	muleq	r0, r1, ip
   13e40:	4fb30b26 	svcmi	0x00b30b26
   13e44:	0b270000 	bleq	9d3e4c <__ccfg+0x9b3ea4>
   13e48:	00004d2d 	andeq	r4, r0, sp, lsr #26
   13e4c:	4fc30b28 	svcmi	0x00c30b28
   13e50:	0b290000 	bleq	a53e58 <__ccfg+0xa33eb0>
   13e54:	00004fd3 	ldrdeq	r4, [r0], -r3
   13e58:	50f80b2a 	rscspl	r0, r8, sl, lsr #22
   13e5c:	0b2b0000 	bleq	ad3e64 <__ccfg+0xab3ebc>
   13e60:	00004f3c 	andeq	r4, r0, ip, lsr pc
   13e64:	53a90b2c 			; <UNDEFINED> instruction: 0x53a90b2c
   13e68:	0b2d0000 	bleq	b53e70 <__ccfg+0xb33ec8>
   13e6c:	00004cd2 	ldrdeq	r4, [r0], -r2
   13e70:	ce0a002e 	cdpgt	0, 0, cr0, cr10, cr14, {1}
   13e74:	0700004e 	streq	r0, [r0, -lr, asr #32]
   13e78:	0000a201 	andeq	sl, r0, r1, lsl #4
   13e7c:	06170400 	ldreq	r0, [r7], -r0, lsl #8
   13e80:	000003d6 	ldrdeq	r0, [r0], -r6
   13e84:	004bfc0b 	subeq	pc, fp, fp, lsl #24
   13e88:	2f0b0000 	svccs	0x000b0000
   13e8c:	01000048 	tsteq	r0, r8, asr #32
   13e90:	00582c0b 	subseq	r2, r8, fp, lsl #24
   13e94:	9c0b0200 	sfmls	f0, 4, [fp], {-0}
   13e98:	03000056 	movweq	r0, #86	; 0x56
   13e9c:	004c1c0b 	subeq	r1, ip, fp, lsl #24
   13ea0:	140b0400 	strne	r0, [fp], #-1024	; 0xfffffc00
   13ea4:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
   13ea8:	004cae0b 	subeq	sl, ip, fp, lsl #28
   13eac:	0c0b0600 	stceq	6, cr0, [fp], {-0}
   13eb0:	0700004c 	streq	r0, [r0, -ip, asr #32]
   13eb4:	0055480b 	subseq	r4, r5, fp, lsl #16
   13eb8:	7c0b0800 	stcvc	8, cr0, [fp], {-0}
   13ebc:	09000056 	stmdbeq	r0, {r1, r2, r4, r6}
   13ec0:	00547f0b 	subseq	r7, r4, fp, lsl #30
   13ec4:	670b0a00 	strvs	r0, [fp, -r0, lsl #20]
   13ec8:	0b000049 	bleq	13ff4 <__exidx_end+0xe518>
   13ecc:	004c4f0b 	subeq	r4, ip, fp, lsl #30
   13ed0:	b00b0c00 	andlt	r0, fp, r0, lsl #24
   13ed4:	0d000048 	stceq	0, cr0, [r0, #-288]	; 0xfffffee0
   13ed8:	0058610b 	subseq	r6, r8, fp, lsl #2
   13edc:	e50b0e00 	str	r0, [fp, #-3584]	; 0xfffff200
   13ee0:	0f000050 	svceq	0x00000050
   13ee4:	004de00b 	subeq	lr, sp, fp
   13ee8:	220b1000 	andcs	r1, fp, #0
   13eec:	11000051 	qaddne	r0, r1, r0
   13ef0:	0057620b 	subseq	r6, r7, fp, lsl #4
   13ef4:	320b1200 	andcc	r1, fp, #0, 4
   13ef8:	1300004a 	movwne	r0, #74	; 0x4a
   13efc:	004df30b 	subeq	pc, sp, fp, lsl #6
   13f00:	560b1400 	strpl	r1, [fp], -r0, lsl #8
   13f04:	15000050 	strne	r0, [r0, #-80]	; 0xffffffb0
   13f08:	004be70b 	subeq	lr, fp, fp, lsl #14
   13f0c:	a20b1600 	andge	r1, fp, #0, 12
   13f10:	17000050 	smlsdne	r0, r0, r0, r0
   13f14:	004eb80b 	subeq	fp, lr, fp, lsl #16
   13f18:	320b1800 	andcc	r1, fp, #0, 16
   13f1c:	19000049 	stmdbne	r0, {r0, r3, r6}
   13f20:	0057090b 	subseq	r0, r7, fp, lsl #18
   13f24:	220b1a00 	andcs	r1, fp, #0, 20
   13f28:	1b000050 	blne	14070 <__exidx_end+0xe594>
   13f2c:	004dac0b 	subeq	sl, sp, fp, lsl #24
   13f30:	d10b1c00 	tstle	fp, r0, lsl #24
   13f34:	1d000047 	stcne	0, cr0, [r0, #-284]	; 0xfffffee4
   13f38:	004f6d0b 	subeq	r6, pc, fp, lsl #26
   13f3c:	590b1e00 	stmdbpl	fp, {r9, sl, fp, ip}
   13f40:	1f00004f 	svcne	0x0000004f
   13f44:	00543c0b 	subseq	r3, r4, fp, lsl #24
   13f48:	c70b2000 	strgt	r2, [fp, -r0]
   13f4c:	21000054 	qaddcs	r0, r4, r0
   13f50:	0056e80b 	subseq	lr, r6, fp, lsl #16
   13f54:	df0b2200 	svcle	0x000b2200
   13f58:	2300004c 	movwcs	r0, #76	; 0x4c
   13f5c:	00529b0b 	subseq	r9, r2, fp, lsl #22
   13f60:	940b2400 	strls	r2, [fp], #-1024	; 0xfffffc00
   13f64:	25000054 	strcs	r0, [r0, #-84]	; 0xffffffac
   13f68:	0053b80b 	subseq	fp, r3, fp, lsl #16
   13f6c:	cc0b2600 	stcgt	6, cr2, [fp], {-0}
   13f70:	27000053 	smlsdcs	r0, r3, r0, r0
   13f74:	0053e00b 	subseq	lr, r3, fp
   13f78:	700b2800 	andvc	r2, fp, r0, lsl #16
   13f7c:	2900004b 	stmdbcs	r0, {r0, r1, r3, r6}
   13f80:	004a1d0b 	subeq	r1, sl, fp, lsl #26
   13f84:	450b2a00 	strmi	r2, [fp, #-2560]	; 0xfffff600
   13f88:	2b00004a 	blcs	140b8 <__exidx_end+0xe5dc>
   13f8c:	0057a10b 	subseq	sl, r7, fp, lsl #2
   13f90:	770b2c00 	strvc	r2, [fp, -r0, lsl #24]
   13f94:	2d00004a 	stccs	0, cr0, [r0, #-296]	; 0xfffffed8
   13f98:	0055910b 	subseq	r9, r5, fp, lsl #2
   13f9c:	a50b2e00 	strge	r2, [fp, #-3584]	; 0xfffff200
   13fa0:	2f000055 	svccs	0x00000055
   13fa4:	0055b90b 	subseq	fp, r5, fp, lsl #18
   13fa8:	610b3000 	mrsvs	r3, (UNDEF: 11)
   13fac:	3100004c 	tstcc	r0, ip, asr #32
   13fb0:	004c3b0b 	subeq	r3, ip, fp, lsl #22
   13fb4:	810b3200 	mrshi	r3, R11_fiq
   13fb8:	3300004f 	movwcc	r0, #79	; 0x4f
   13fbc:	0051350b 	subseq	r3, r1, fp, lsl #10
   13fc0:	b50b3400 	strlt	r3, [fp, #-1024]	; 0xfffffc00
   13fc4:	35000057 	strcc	r0, [r0, #-87]	; 0xffffffa9
   13fc8:	0047790b 	subeq	r7, r7, fp, lsl #18
   13fcc:	610b3600 	tstvs	fp, r0, lsl #12
   13fd0:	3700004d 	strcc	r0, [r0, -sp, asr #32]
   13fd4:	004d760b 	subeq	r7, sp, fp, lsl #12
   13fd8:	e30b3800 	movw	r3, #47104	; 0xb800
   13fdc:	3900004f 	stmdbcc	r0, {r0, r1, r2, r3, r6}
   13fe0:	00500d0b 	subseq	r0, r0, fp, lsl #26
   13fe4:	de0b3a00 	vmlale.f32	s6, s22, s0
   13fe8:	3b000057 	blcc	1414c <__exidx_end+0xe670>
   13fec:	0052860b 	subseq	r8, r2, fp, lsl #12
   13ff0:	040b3c00 	streq	r3, [fp], #-3072	; 0xfffff400
   13ff4:	3d00004d 	stccc	0, cr0, [r0, #-308]	; 0xfffffecc
   13ff8:	0048410b 	subeq	r4, r8, fp, lsl #2
   13ffc:	f60b3e00 			; <UNDEFINED> instruction: 0xf60b3e00
   14000:	3f000047 	svccc	0x00000047
   14004:	0051810b 	subseq	r8, r1, fp, lsl #2
   14008:	070b4000 	streq	r4, [fp, -r0]
   1400c:	41000053 	qaddmi	r0, r3, r0
   14010:	00541e0b 	subseq	r1, r4, fp, lsl #28
   14014:	f80b4200 			; <UNDEFINED> instruction: 0xf80b4200
   14018:	4300004f 	movwmi	r0, #79	; 0x4f
   1401c:	0058170b 	subseq	r1, r8, fp, lsl #14
   14020:	b10b4400 	tstlt	fp, r0, lsl #8
   14024:	45000052 	strmi	r0, [r0, #-82]	; 0xffffffae
   14028:	004a610b 	subeq	r6, sl, fp, lsl #2
   1402c:	c20b4600 	andgt	r4, fp, #0, 12
   14030:	4700004d 	strmi	r0, [r0, -sp, asr #32]
   14034:	004f060b 	subeq	r0, pc, fp, lsl #12
   14038:	b50b4800 	strlt	r4, [fp, #-2048]	; 0xfffff800
   1403c:	49000047 	stmdbmi	r0, {r0, r1, r2, r6}
   14040:	0048d70b 	subeq	sp, r8, fp, lsl #14
   14044:	180b4a00 	stmdane	fp, {r9, fp, lr}
   14048:	4b00004d 	blmi	14184 <__exidx_end+0xe6a8>
   1404c:	0050340b 	subseq	r3, r0, fp, lsl #8
   14050:	02004c00 	andeq	r4, r0, #0, 24
   14054:	0d5b0702 	ldcleq	7, cr0, [fp, #-8]
   14058:	f30c0000 	vhadd.u8	d0, d12, d0
   1405c:	e8000003 	stmda	r0, {r0, r1}
   14060:	0d000003 	stceq	0, cr0, [r0, #-12]
   14064:	03dd0e00 	bicseq	r0, sp, #0, 28
   14068:	04050000 	streq	r0, [r5], #-0
   1406c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14070:	0003ed0e 	andeq	lr, r3, lr, lsl #26
   14074:	08010200 	stmdaeq	r1, {r9}
   14078:	00000c67 	andeq	r0, r0, r7, ror #24
   1407c:	0003f80e 	andeq	pc, r3, lr, lsl #16
   14080:	49a30f00 	stmibmi	r3!, {r8, r9, sl, fp}
   14084:	4c050000 	stcmi	0, cr0, [r5], {-0}
   14088:	03e81a01 	mvneq	r1, #4096	; 0x1000
   1408c:	9c0f0000 	stcls	0, cr0, [pc], {-0}
   14090:	0500004d 	streq	r0, [r0, #-77]	; 0xffffffb3
   14094:	e81a0182 	ldmda	sl, {r1, r7, r8}
   14098:	0c000003 	stceq	0, cr0, [r0], {3}
   1409c:	000003f8 	strdeq	r0, [r0], -r8
   140a0:	00000429 	andeq	r0, r0, r9, lsr #8
   140a4:	a509000d 	strge	r0, [r9, #-13]
   140a8:	0600004f 	streq	r0, [r0], -pc, asr #32
   140ac:	041e0d2d 	ldreq	r0, [lr], #-3373	; 0xfffff2d3
   140b0:	61090000 	mrsvs	r0, (UNDEF: 9)
   140b4:	06000056 			; <UNDEFINED> instruction: 0x06000056
   140b8:	01f51c38 	mvnseq	r1, r8, lsr ip
   140bc:	750a0000 	strvc	r0, [sl, #-0]
   140c0:	0700004c 	streq	r0, [r0, -ip, asr #32]
   140c4:	0000a201 	andeq	sl, r0, r1, lsl #4
   140c8:	0e3a0600 	cfmsuba32eq	mvax0, mvax0, mvfx10, mvfx0
   140cc:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
   140d0:	0047ca0b 	subeq	ip, r7, fp, lsl #20
   140d4:	a50b0000 	strge	r0, [fp, #-0]
   140d8:	0100004e 	tsteq	r0, lr, asr #32
   140dc:	0057740b 	subseq	r7, r7, fp, lsl #8
   140e0:	370b0200 	strcc	r0, [fp, -r0, lsl #4]
   140e4:	03000057 	movweq	r0, #87	; 0x57
   140e8:	0051de0b 	subseq	sp, r1, fp, lsl #28
   140ec:	050b0400 	streq	r0, [fp, #-1024]	; 0xfffffc00
   140f0:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   140f4:	0049ee0b 	subeq	lr, r9, fp, lsl #28
   140f8:	c80b0600 	stmdagt	fp, {r9, sl}
   140fc:	07000049 	streq	r0, [r0, -r9, asr #32]
   14100:	004bd30b 	subeq	sp, fp, fp, lsl #6
   14104:	b80b0800 	stmdalt	fp, {fp}
   14108:	09000050 	stmdbeq	r0, {r4, r6}
   1410c:	0049f50b 	subeq	pc, r9, fp, lsl #10
   14110:	bf0b0a00 	svclt	0x000b0a00
   14114:	0b000050 	bleq	1425c <__exidx_end+0xe780>
   14118:	004a5a0b 	subeq	r5, sl, fp, lsl #20
   1411c:	df0b0c00 	svcle	0x000b0c00
   14120:	0d000049 	stceq	0, cr0, [r0, #-292]	; 0xfffffedc
   14124:	00555c0b 	subseq	r5, r5, fp, lsl #24
   14128:	250b0e00 	strcs	r0, [fp, #-3584]	; 0xfffff200
   1412c:	0f000053 	svceq	0x00000053
   14130:	54540400 	ldrbpl	r0, [r4], #-1024	; 0xfffffc00
   14134:	3f060000 	svccc	0x00060000
   14138:	00044101 	andeq	r4, r4, r1, lsl #2
   1413c:	54e80900 	strbtpl	r0, [r8], #2304	; 0x900
   14140:	41060000 	mrsmi	r0, (UNDEF: 6)
   14144:	0004b40f 	andeq	fp, r4, pc, lsl #8
   14148:	55700900 	ldrbpl	r0, [r0, #-2304]!	; 0xfffff700
   1414c:	4a060000 	bmi	194154 <__ccfg+0x1741ac>
   14150:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14154:	49870900 	stmibmi	r7, {r8, fp}
   14158:	4b060000 	blmi	194160 <__ccfg+0x1741b8>
   1415c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14160:	56351000 	ldrtpl	r1, [r5], -r0
   14164:	81090000 	mrshi	r0, (UNDEF: 9)
   14168:	06000055 			; <UNDEFINED> instruction: 0x06000055
   1416c:	04f5144c 	ldrbteq	r1, [r5], #1100	; 0x44c
   14170:	04050000 	streq	r0, [r5], #-0
   14174:	000004e4 	andeq	r0, r0, r4, ror #9
   14178:	4e6f0911 			; <UNDEFINED> instruction: 0x4e6f0911
   1417c:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
   14180:	0005080f 	andeq	r0, r5, pc, lsl #16
   14184:	fb040500 	blx	11558e <__ccfg+0xf55e6>
   14188:	12000004 	andne	r0, r0, #4
   1418c:	0000546a 	andeq	r5, r0, sl, ror #8
   14190:	0051cb09 	subseq	ip, r1, r9, lsl #22
   14194:	0d520600 	ldcleq	6, cr0, [r2, #-0]
   14198:	0000051f 	andeq	r0, r0, pc, lsl r5
   1419c:	050e0405 	streq	r0, [lr, #-1029]	; 0xfffffbfb
   141a0:	b9130000 	ldmdblt	r3, {}	; <UNPREDICTABLE>
   141a4:	3400004b 	strcc	r0, [r0], #-75	; 0xffffffb5
   141a8:	15016706 	strne	r6, [r1, #-1798]	; 0xfffff8fa
   141ac:	00000550 	andeq	r0, r0, r0, asr r5
   141b0:	004fae14 	subeq	sl, pc, r4, lsl lr	; <UNPREDICTABLE>
   141b4:	01690600 	cmneq	r9, r0, lsl #12
   141b8:	0003ed0f 	andeq	lr, r3, pc, lsl #26
   141bc:	9d140000 	ldcls	0, cr0, [r4, #-0]
   141c0:	0600004b 	streq	r0, [r0], -fp, asr #32
   141c4:	5514016a 	ldrpl	r0, [r4, #-362]	; 0xfffffe96
   141c8:	04000005 	streq	r0, [r0], #-5
   141cc:	05250e00 	streq	r0, [r5, #-3584]!	; 0xfffff200
   141d0:	c80c0000 	stmdagt	ip, {}	; <UNPREDICTABLE>
   141d4:	65000000 	strvs	r0, [r0, #-0]
   141d8:	15000005 	strne	r0, [r0, #-5]
   141dc:	00000033 	andeq	r0, r0, r3, lsr r0
   141e0:	500c002d 	andpl	r0, ip, sp, lsr #32
   141e4:	70000005 	andvc	r0, r0, r5
   141e8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   141ec:	05650e00 	strbeq	r0, [r5, #-3584]!	; 0xfffff200
   141f0:	dd0f0000 	stcle	0, cr0, [pc, #-0]	; 141f8 <__exidx_end+0xe71c>
   141f4:	0600004e 	streq	r0, [r0], -lr, asr #32
   141f8:	7003016b 	andvc	r0, r3, fp, ror #2
   141fc:	0f000005 	svceq	0x00000005
   14200:	00005105 	andeq	r5, r0, r5, lsl #2
   14204:	0c016e06 	stceq	14, cr6, [r1], {6}
   14208:	0000002c 	andeq	r0, r0, ip, lsr #32
   1420c:	0054a816 	subseq	sl, r4, r6, lsl r8
   14210:	a2010700 	andge	r0, r1, #0, 14
   14214:	06000000 	streq	r0, [r0], -r0
   14218:	39060181 	stmdbcc	r6, {r0, r7, r8}
   1421c:	0b000006 	bleq	1423c <__exidx_end+0xe760>
   14220:	00004868 	andeq	r4, r0, r8, ror #16
   14224:	48740b00 	ldmdami	r4!, {r8, r9, fp}^
   14228:	0b020000 	bleq	94230 <__ccfg+0x74288>
   1422c:	00004880 	andeq	r4, r0, r0, lsl #17
   14230:	4ca10b03 	fstmiaxmi	r1!, {d0}	;@ Deprecated
   14234:	0b030000 	bleq	d423c <__ccfg+0xb4294>
   14238:	0000488c 	andeq	r4, r0, ip, lsl #17
   1423c:	4e080b04 	vmlami.f64	d0, d8, d4
   14240:	0b040000 	bleq	114248 <__ccfg+0xf42a0>
   14244:	00004eee 	andeq	r4, r0, lr, ror #29
   14248:	4e440b05 	vmlami.f64	d16, d4, d5
   1424c:	0b050000 	bleq	154254 <__ccfg+0x1342ac>
   14250:	00004978 	andeq	r4, r0, r8, ror r9
   14254:	48980b05 	ldmmi	r8, {r0, r2, r8, r9, fp}
   14258:	0b060000 	bleq	194260 <__ccfg+0x1742b8>
   1425c:	0000506c 	andeq	r5, r0, ip, rrx
   14260:	4b8f0b06 	blmi	fe3d6e80 <_estack+0xde3d1e80>
   14264:	0b060000 	bleq	19426c <__ccfg+0x1742c4>
   14268:	00005079 	andeq	r5, r0, r9, ror r0
   1426c:	55280b06 	strpl	r0, [r8, #-2822]!	; 0xfffff4fa
   14270:	0b060000 	bleq	194278 <__ccfg+0x1742d0>
   14274:	00005086 	andeq	r5, r0, r6, lsl #1
   14278:	50c60b06 	sbcpl	r0, r6, r6, lsl #22
   1427c:	0b060000 	bleq	194284 <__ccfg+0x1742dc>
   14280:	000048a4 	andeq	r4, r0, r4, lsr #17
   14284:	51ae0b07 			; <UNDEFINED> instruction: 0x51ae0b07
   14288:	0b070000 	bleq	1d4290 <__ccfg+0x1b42e8>
   1428c:	000051fb 	strdeq	r5, [r0], -fp
   14290:	55630b07 	strbpl	r0, [r3, #-2823]!	; 0xfffff4f9
   14294:	0b070000 	bleq	1d429c <__ccfg+0x1b42f4>
   14298:	00004a8c 	andeq	r4, r0, ip, lsl #21
   1429c:	52de0b07 	sbcspl	r0, lr, #7168	; 0x1c00
   142a0:	0b080000 	bleq	2142a8 <__ccfg+0x1f4300>
   142a4:	0000481d 	andeq	r4, r0, sp, lsl r8
   142a8:	55360b08 	ldrpl	r0, [r6, #-2824]!	; 0xfffff4f8
   142ac:	0b080000 	bleq	2142b4 <__ccfg+0x1f430c>
   142b0:	000052fa 	strdeq	r5, [r0], -sl
   142b4:	8e0f0008 	cdphi	0, 0, cr0, cr15, cr8, {0}
   142b8:	06000057 			; <UNDEFINED> instruction: 0x06000057
   142bc:	8f1f019f 	svchi	0x001f019f
   142c0:	0f000005 	svceq	0x00000005
   142c4:	0000532c 	andeq	r5, r0, ip, lsr #6
   142c8:	0c01a206 	sfmeq	f2, 1, [r1], {6}
   142cc:	0000002c 	andeq	r0, r0, ip, lsr #32
   142d0:	004efb0f 	subeq	pc, lr, pc, lsl #22
   142d4:	01a50600 			; <UNDEFINED> instruction: 0x01a50600
   142d8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142dc:	58730f00 	ldmdapl	r3!, {r8, r9, sl, fp}^
   142e0:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   142e4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142e8:	970f0000 	strls	r0, [pc, -r0]
   142ec:	06000049 	streq	r0, [r0], -r9, asr #32
   142f0:	2c0c01ab 	stfcss	f0, [ip], {171}	; 0xab
   142f4:	0f000000 	svceq	0x00000000
   142f8:	00005336 	andeq	r5, r0, r6, lsr r3
   142fc:	0c01ae06 	stceq	14, cr10, [r1], {6}
   14300:	0000002c 	andeq	r0, r0, ip, lsr #32
   14304:	0051e50f 	subseq	lr, r1, pc, lsl #10
   14308:	01b10600 			; <UNDEFINED> instruction: 0x01b10600
   1430c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14310:	51f00f00 	mvnspl	r0, r0, lsl #30
   14314:	b4060000 	strlt	r0, [r6], #-0
   14318:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1431c:	400f0000 	andmi	r0, pc, r0
   14320:	06000053 			; <UNDEFINED> instruction: 0x06000053
   14324:	2c0c01b7 	stfcss	f0, [ip], {183}	; 0xb7
   14328:	0f000000 	svceq	0x00000000
   1432c:	00005048 	andeq	r5, r0, r8, asr #32
   14330:	0c01ba06 			; <UNDEFINED> instruction: 0x0c01ba06
   14334:	0000002c 	andeq	r0, r0, ip, lsr #32
   14338:	0057d20f 	subseq	sp, r7, pc, lsl #4
   1433c:	01bd0600 			; <UNDEFINED> instruction: 0x01bd0600
   14340:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14344:	534a0f00 	movtpl	r0, #44800	; 0xaf00
   14348:	c0060000 	andgt	r0, r6, r0
   1434c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14350:	aa0f0000 	bge	3d4358 <__ccfg+0x3b43b0>
   14354:	06000058 			; <UNDEFINED> instruction: 0x06000058
   14358:	2c0c01c3 	stfcss	f0, [ip], {195}	; 0xc3
   1435c:	0f000000 	svceq	0x00000000
   14360:	0000573e 	andeq	r5, r0, lr, lsr r7
   14364:	0c01c606 	stceq	6, cr12, [r1], {6}
   14368:	0000002c 	andeq	r0, r0, ip, lsr #32
   1436c:	00574a0f 	subseq	r4, r7, pc, lsl #20
   14370:	01c90600 	biceq	r0, r9, r0, lsl #12
   14374:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14378:	57560f00 	ldrbpl	r0, [r6, -r0, lsl #30]
   1437c:	cc060000 	stcgt	0, cr0, [r6], {-0}
   14380:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14384:	7b0f0000 	blvc	3d438c <__ccfg+0x3b43e4>
   14388:	06000057 			; <UNDEFINED> instruction: 0x06000057
   1438c:	2c0c01d0 	stfcss	f0, [ip], {208}	; 0xd0
   14390:	0f000000 	svceq	0x00000000
   14394:	0000589d 	muleq	r0, sp, r8
   14398:	0c01d306 	stceq	3, cr13, [r1], {6}
   1439c:	0000002c 	andeq	r0, r0, ip, lsr #32
   143a0:	0049fc0f 	subeq	pc, r9, pc, lsl #24
   143a4:	01d60600 	bicseq	r0, r6, r0, lsl #12
   143a8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143ac:	47a50f00 	strmi	r0, [r5, r0, lsl #30]!
   143b0:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
   143b4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143b8:	c10f0000 	mrsgt	r0, CPSR
   143bc:	0600004c 	streq	r0, [r0], -ip, asr #32
   143c0:	2c0c01dc 	stfcss	f0, [ip], {220}	; 0xdc
   143c4:	0f000000 	svceq	0x00000000
   143c8:	000049cf 	andeq	r4, r0, pc, asr #19
   143cc:	0c01df06 	stceq	15, cr13, [r1], {6}
   143d0:	0000002c 	andeq	r0, r0, ip, lsr #32
   143d4:	00535b0f 	subseq	r5, r3, pc, lsl #22
   143d8:	01e20600 	mvneq	r0, r0, lsl #12
   143dc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143e0:	4f240f00 	svcmi	0x00240f00
   143e4:	e5060000 	str	r0, [r6, #-0]
   143e8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143ec:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
   143f0:	06000051 			; <UNDEFINED> instruction: 0x06000051
   143f4:	2c0c01e8 	stfcss	f0, [ip], {232}	; 0xe8
   143f8:	0f000000 	svceq	0x00000000
   143fc:	0000566a 	andeq	r5, r0, sl, ror #12
   14400:	0c01ef06 	stceq	15, cr14, [r1], {6}
   14404:	0000002c 	andeq	r0, r0, ip, lsr #32
   14408:	0058410f 	subseq	r4, r8, pc, lsl #2
   1440c:	01f20600 	mvnseq	r0, r0, lsl #12
   14410:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14414:	58510f00 	ldmdapl	r1, {r8, r9, sl, fp}^
   14418:	f5060000 			; <UNDEFINED> instruction: 0xf5060000
   1441c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14420:	a60f0000 	strge	r0, [pc], -r0
   14424:	0600004b 	streq	r0, [r0], -fp, asr #32
   14428:	2c0c01f8 	stfcss	f0, [ip], {248}	; 0xf8
   1442c:	0f000000 	svceq	0x00000000
   14430:	000056b2 			; <UNDEFINED> instruction: 0x000056b2
   14434:	0c01fb06 			; <UNDEFINED> instruction: 0x0c01fb06
   14438:	0000002c 	andeq	r0, r0, ip, lsr #32
   1443c:	0052c60f 	subseq	ip, r2, pc, lsl #12
   14440:	01fe0600 	mvnseq	r0, r0, lsl #12
   14444:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14448:	4d3a0f00 	ldcmi	15, cr0, [sl, #-0]
   1444c:	02060000 	andeq	r0, r6, #0
   14450:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   14454:	ba0f0000 	blt	3d445c <__ccfg+0x3b44b4>
   14458:	06000054 			; <UNDEFINED> instruction: 0x06000054
   1445c:	2c0c020a 	sfmcs	f0, 4, [ip], {10}
   14460:	0f000000 	svceq	0x00000000
   14464:	00004c2d 	andeq	r4, r0, sp, lsr #24
   14468:	0c020d06 	stceq	13, cr0, [r2], {6}
   1446c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14470:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14474:	0007fe00 	andeq	pc, r7, r0, lsl #28
   14478:	0f000d00 	svceq	0x00000d00
   1447c:	00004e24 	andeq	r4, r0, r4, lsr #28
   14480:	0c03fb06 			; <UNDEFINED> instruction: 0x0c03fb06
   14484:	000007f3 	strdeq	r0, [r0], -r3
   14488:	0004f50c 	andeq	pc, r4, ip, lsl #10
   1448c:	00081b00 	andeq	r1, r8, r0, lsl #22
   14490:	00331500 	eorseq	r1, r3, r0, lsl #10
   14494:	000d0000 	andeq	r0, sp, r0
   14498:	0053870f 	subseq	r8, r3, pc, lsl #14
   1449c:	05840600 	streq	r0, [r4, #1536]	; 0x600
   144a0:	00080b14 	andeq	r0, r8, r4, lsl fp
   144a4:	4ee61600 	cdpmi	6, 14, cr1, cr6, cr0, {0}
   144a8:	01070000 	mrseq	r0, (UNDEF: 7)
   144ac:	000000a2 	andeq	r0, r0, r2, lsr #1
   144b0:	06058b06 	streq	r8, [r5], -r6, lsl #22
   144b4:	00000866 	andeq	r0, r0, r6, ror #16
   144b8:	004c830b 	subeq	r8, ip, fp, lsl #6
   144bc:	d30b0000 	movwle	r0, #45056	; 0xb000
   144c0:	01000050 	qaddeq	r0, r0, r0
   144c4:	0048530b 	subeq	r5, r8, fp, lsl #6
   144c8:	030b0200 	movweq	r0, #45568	; 0xb200
   144cc:	03000058 	movweq	r0, #88	; 0x58
   144d0:	0054010b 	subseq	r0, r4, fp, lsl #2
   144d4:	f40b0400 	vst3.8	{d0-d2}, [fp], r0
   144d8:	05000053 	streq	r0, [r0, #-83]	; 0xffffffad
   144dc:	0049570b 	subeq	r5, r9, fp, lsl #14
   144e0:	0f000600 	svceq	0x00000600
   144e4:	000057f3 	strdeq	r5, [r0], -r3
   144e8:	15059806 	strne	r9, [r5, #-2054]	; 0xfffff7fa
   144ec:	00000828 	andeq	r0, r0, r8, lsr #16
   144f0:	0056d70f 	subseq	sp, r6, pc, lsl #14
   144f4:	07990600 	ldreq	r0, [r9, r0, lsl #12]
   144f8:	00003311 	andeq	r3, r0, r1, lsl r3
   144fc:	53740f00 	cmnpl	r4, #0, 30
   14500:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   14504:	002c0c07 	eoreq	r0, ip, r7, lsl #24
   14508:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
   1450c:	07000056 	smlsdeq	r0, r6, r0, r0
   14510:	00a2167b 	adceq	r1, r2, fp, ror r6
   14514:	8d0e0000 	stchi	0, cr0, [lr, #-0]
   14518:	02000008 	andeq	r0, r0, #8
   1451c:	0a6e0502 	beq	1b9592c <__ccfg+0x1b75984>
   14520:	ed040000 	stc	0, cr0, [r4, #-0]
   14524:	07000048 	streq	r0, [r0, -r8, asr #32]
   14528:	002c0f80 	eoreq	r0, ip, r0, lsl #31
   1452c:	ec040000 	stc	0, cr0, [r4], {-0}
   14530:	07000048 	streq	r0, [r0, -r8, asr #32]
   14534:	00331681 	eorseq	r1, r3, r1, lsl #13
   14538:	54040000 	strpl	r0, [r4], #-0
   1453c:	07000053 	smlsdeq	r0, r3, r0, r0
   14540:	003a0f84 	eorseq	r0, sl, r4, lsl #31
   14544:	04020000 	streq	r0, [r2], #-0
   14548:	004a1704 	subeq	r1, sl, r4, lsl #14
   1454c:	03080200 	movweq	r0, #33280	; 0x8200
   14550:	00004a0f 	andeq	r4, r0, pc, lsl #20
   14554:	1f040802 	svcne	0x00040802
   14558:	02000044 	andeq	r0, r0, #68	; 0x44
   1455c:	540f0310 	strpl	r0, [pc], #-784	; 14564 <__exidx_end+0xea88>
   14560:	6b130000 	blvs	4d4568 <__ccfg+0x4b45c0>
   14564:	08000053 	stmdaeq	r0, {r0, r1, r4, r6}
   14568:	0a01ed07 	beq	8f98c <__ccfg+0x6f9e4>
   1456c:	00000910 	andeq	r0, r0, r0, lsl r9
   14570:	776f6c17 			; <UNDEFINED> instruction: 0x776f6c17
   14574:	01ed0700 	mvneq	r0, r0, lsl #14
   14578:	0008a51a 	andeq	sl, r8, sl, lsl r5
   1457c:	c2140000 	andsgt	r0, r4, #0
   14580:	07000048 	streq	r0, [r0, -r8, asr #32]
   14584:	a51f01ed 	ldrge	r0, [pc, #-493]	; 1439f <__exidx_end+0xe8c3>
   14588:	04000008 	streq	r0, [r0], #-8
   1458c:	07081800 	streq	r1, [r8, -r0, lsl #16]
   14590:	320901f4 	andcc	r0, r9, #244, 2	; 0x3d
   14594:	19000009 	stmdbne	r0, {r0, r3}
   14598:	f6070073 			; <UNDEFINED> instruction: 0xf6070073
   1459c:	08e51301 	stmiaeq	r5!, {r0, r8, r9, ip}^
   145a0:	6c190000 	ldcvs	0, cr0, [r9], {-0}
   145a4:	f707006c 			; <UNDEFINED> instruction: 0xf707006c
   145a8:	08bd0a01 	popeq	{r0, r9, fp}
   145ac:	1a000000 	bne	145b4 <__exidx_end+0xead8>
   145b0:	000049e6 	andeq	r4, r0, r6, ror #19
   145b4:	0301f807 	movweq	pc, #6151	; 0x1807	; <UNPREDICTABLE>
   145b8:	00000910 	andeq	r0, r0, r0, lsl r9
   145bc:	0009320e 	andeq	r3, r9, lr, lsl #4
   145c0:	08990c00 	ldmeq	r9, {sl, fp}
   145c4:	09540000 	ldmdbeq	r4, {}^	; <UNPREDICTABLE>
   145c8:	33150000 	tstcc	r5, #0
   145cc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   145d0:	09440e00 	stmdbeq	r4, {r9, sl, fp}^
   145d4:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
   145d8:	07000052 	smlsdeq	r0, r2, r0, r0
   145dc:	541601fc 	ldrpl	r0, [r6], #-508	; 0xfffffe04
   145e0:	0f000009 	svceq	0x00000009
   145e4:	000049be 			; <UNDEFINED> instruction: 0x000049be
   145e8:	16020207 	strne	r0, [r2], -r7, lsl #4
   145ec:	00000954 	andeq	r0, r0, r4, asr r9
   145f0:	0048141b 	subeq	r1, r8, fp, lsl r4
   145f4:	02240100 	eoreq	r0, r4, #0, 2
   145f8:	0008bd01 	andeq	fp, r8, r1, lsl #26
   145fc:	00496000 	subeq	r6, r9, r0
   14600:	00005400 	andeq	r5, r0, r0, lsl #8
   14604:	1c9c0100 	ldfnes	f0, [ip], {0}
   14608:	24010075 	strcs	r0, [r1], #-117	; 0xffffff8b
   1460c:	08bd1202 	popeq	{r1, r9, ip}
   14610:	5aba0000 	bpl	fee94618 <_estack+0xdee8f618>
   14614:	5ab60000 	bpl	fed9461c <_estack+0xded8f61c>
   14618:	761c0000 	ldrvc	r0, [ip], -r0
   1461c:	02240100 	eoreq	r0, r4, #0, 2
   14620:	0008bd1c 	andeq	fp, r8, ip, lsl sp
   14624:	005ae600 	subseq	lr, sl, r0, lsl #12
   14628:	005ae200 	subseq	lr, sl, r0, lsl #4
   1462c:	75751d00 	ldrbvc	r1, [r5, #-3328]!	; 0xfffff300
   14630:	02260100 	eoreq	r0, r6, #0, 2
   14634:	00093f11 	andeq	r3, r9, r1, lsl pc
   14638:	76761d00 	ldrbtvc	r1, [r6], -r0, lsl #26
   1463c:	02270100 	eoreq	r0, r7, #0, 2
   14640:	00093f11 	andeq	r3, r9, r1, lsl pc
   14644:	00771d00 	rsbseq	r1, r7, r0, lsl #26
   14648:	0b022801 	bleq	9e654 <__ccfg+0x7e6ac>
   1464c:	00000932 	andeq	r0, r0, r2, lsr r9
   14650:	0014201e 	andseq	r2, r4, lr, lsl r0
   14654:	5f5f1d00 	svcpl	0x005f1d00
   14658:	28010077 	stmdacs	r1, {r0, r1, r2, r4, r5, r6}
   1465c:	09321602 	ldmdbeq	r2!, {r1, r9, sl, ip}
   14660:	201e0000 	andscs	r0, lr, r0
   14664:	1f000014 	svcne	0x00000014
   14668:	0000587e 	andeq	r5, r0, lr, ror r8
   1466c:	16022801 	strne	r2, [r2], -r1, lsl #16
   14670:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   14674:	00005b10 	andeq	r5, r0, r0, lsl fp
   14678:	00005b0e 	andeq	r5, r0, lr, lsl #22
   1467c:	0058831f 	subseq	r8, r8, pc, lsl r3
   14680:	02280100 	eoreq	r0, r8, #0, 2
   14684:	0008b116 	andeq	fp, r8, r6, lsl r1
   14688:	005b2900 	subseq	r2, fp, r0, lsl #18
   1468c:	005b2300 	subseq	r2, fp, r0, lsl #6
   14690:	58881f00 	stmpl	r8, {r8, r9, sl, fp, ip}
   14694:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   14698:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   1469c:	5b5b0000 	blpl	16d46a4 <__ccfg+0x16b46fc>
   146a0:	5b570000 	blpl	15d46a8 <__ccfg+0x15b4700>
   146a4:	8d1f0000 	ldchi	0, cr0, [pc, #-0]	; 146ac <__exidx_end+0xebd0>
   146a8:	01000058 	qaddeq	r0, r8, r0
   146ac:	b1160228 	tstlt	r6, r8, lsr #4
   146b0:	86000008 	strhi	r0, [r0], -r8
   146b4:	8400005b 	strhi	r0, [r0], #-91	; 0xffffffa5
   146b8:	1f00005b 	svcne	0x0000005b
   146bc:	000056ad 	andeq	r5, r0, sp, lsr #13
   146c0:	16022801 	strne	r2, [r2], -r1, lsl #16
   146c4:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   146c8:	00005b9d 	muleq	r0, sp, fp
   146cc:	00005b99 	muleq	r0, r9, fp
   146d0:	00579c1f 	subseq	r9, r7, pc, lsl ip
   146d4:	02280100 	eoreq	r0, r8, #0, 2
   146d8:	0008b116 	andeq	fp, r8, r6, lsl r1
   146dc:	005bc500 	subseq	ip, fp, r0, lsl #10
   146e0:	005bc100 	subseq	ip, fp, r0, lsl #2
   146e4:	568f1f00 	strpl	r1, [pc], r0, lsl #30
   146e8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   146ec:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   146f0:	5bed0000 	blpl	ffb546f8 <_estack+0xdfb4f6f8>
   146f4:	5be90000 	blpl	ffa546fc <_estack+0xdfa4f6fc>
   146f8:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
   146fc:	01000057 	qaddeq	r0, r7, r0
   14700:	b1160228 	tstlt	r6, r8, lsr #4
   14704:	13000008 	movwne	r0, #8
   14708:	0f00005c 	svceq	0x0000005c
   1470c:	0000005c 	andeq	r0, r0, ip, asr r0
   14710:	Address 0x0000000000014710 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <NOROM_RFCRTrim+0xfc>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
		packet[0] = 0;
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
		*p = message->tpe;p++;
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		*p = message->sender_id;p++;
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		*p = message->receiver_id;p++;
     104:	14000005 	strne	r0, [r0], #-5
		switch(message->tpe) {
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
     10c:	15150000 	ldrne	r0, [r5, #-0]
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		tcv_endp(packet);
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
}
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		finish;
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
				*p = message->status;p++;
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
     134:	00001301 	andeq	r1, r0, r1, lsl #6
				strncpy(p, message->record, sizeof(message->record));
     138:	03000d19 	movweq	r0, #3353	; 0xd19
				*p = message->padding;p++;
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				strncpy(p, message->record, sizeof(message->record));
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
				strncpy(p, message->record, sizeof(message->record));
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
				*p = message->record_index;p++;
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				*p = message->padding;
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
				break;
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
     164:	010b3905 	tsteq	fp, r5, lsl #18
     168:	1c000013 	stcne	0, cr0, [r0], {19}
		node->nnodes[i] = 0;
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
bool init_node(struct Node* node){
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    node->id  = 0;                  // default id value 0
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
    node->index = 0;                // default entry count 0
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
    node->data_base.item_count = 0; // default no items in array
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
	reset_array(node);
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
    DEBUG_PRINT("Error initializing node...\n");
     194:	00001349 	andeq	r1, r0, r9, asr #6
     198:	0300131f 	movweq	r1, #799	; 0x31f
};
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
     1a0:	01152000 	tsteq	r5, r0
uint8_t generate_request_num(void){
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
    return (uint8_t) (rand() % 255);
     1a8:	34210000 	strtcc	r0, [r1], #-0
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     1b4:	3f13490b 	svccc	0x0013490b
            node->nnodes[i] = 0; // set to null byte
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
};
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
        node->data_base.item_count -= 1;
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
};
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
fsm receiver(struct Node* node_db) {
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
		payload = (struct ResponseMessage*)(incoming_packet+1);
     220:	34290000 	strtcc	r0, [r9], #-0
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	3f13490b 	svccc	0x0013490b
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     244:	01120111 	tsteq	r2, r1, lsl r1
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
     24c:	052b0000 	streq	r0, [fp, #-0]!
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		switch (tpe){
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     268:	01110b39 	tsteq	r1, r9, lsr fp
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
     270:	00065501 	andeq	r5, r6, r1, lsl #10
     274:	00342e00 	eorseq	r2, r4, r0, lsl #28
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	0b3a0e03 	bleq	e83a8c <__ccfg+0xe63ae4>
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	0a021349 	beq	84fac <__ccfg+0x65004>
     284:	0b2f0000 	bleq	bc028c <__ccfg+0xba02e4>
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     28c:	00130101 	andseq	r0, r3, r1, lsl #2
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	011d3000 	tsteq	sp, r0
     294:	01521331 	cmpeq	r2, r1, lsr r3
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	0b580655 	bleq	1601bf4 <__ccfg+0x15e1c4c>
     29c:	0b570559 	bleq	15c1808 <__ccfg+0x15a1860>
				if (discovery_request_message->gid == node_db->gid){
     2a0:	05310000 	ldreq	r0, [r1, #-0]!
     2a4:	02133100 	andseq	r3, r3, #0, 2
					response_message_0->gid = discovery_request_message->gid;
     2a8:	32000006 	andcc	r0, r0, #6
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	00001301 	andeq	r1, r0, r1, lsl #6
					response_message_0->sender_id = node_db->id;
     2b4:	03003433 	movweq	r3, #1075	; 0x433
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	3b0b3a08 	blcc	2ceae0 <__ccfg+0x2aeb38>
					call sender(response_message_0, done_case);
     2bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     2c0:	00060213 	andeq	r0, r6, r3, lsl r2
     2c4:	011d3400 	tsteq	sp, r0, lsl #8
     2c8:	01111331 	tsteq	r1, r1, lsr r3
     2cc:	0b580112 	bleq	160071c <__ccfg+0x15e0774>
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	0b570559 	bleq	15c183c <__ccfg+0x15a1894>
     2d4:	34350000 	ldrtcc	r0, [r5], #-0
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2d8:	3a0e0300 	bcc	380ee0 <__ccfg+0x360f38>
     2dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2e4:	36000006 	strcc	r0, [r0], -r6
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	0111010b 	tsteq	r1, fp, lsl #2
     2ec:	00000112 	andeq	r0, r0, r2, lsl r1
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	3f012e37 	svccc	0x00012e37
     2f4:	3a0e030c 	bcc	380f2c <__ccfg+0x360f84>
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2fc:	110c270b 	tstne	ip, fp, lsl #14
     300:	40011201 	andmi	r1, r1, r1, lsl #4
     304:	0013010a 	andseq	r0, r3, sl, lsl #2
     308:	00053800 	andeq	r3, r5, r0, lsl #16
     30c:	0b3a0e03 	bleq	e83b20 <__ccfg+0xe63b78>
     310:	0b390b3b 	bleq	e43004 <__ccfg+0xe2305c>
     314:	06021349 	streq	r1, [r2], -r9, asr #6
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	34390000 	ldrtcc	r0, [r9], #-0
     31c:	3a0e0300 	bcc	380f24 <__ccfg+0x360f7c>
					node_db->index+=1;
     320:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		tcv_endp(incoming_packet);
     324:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     328:	3a000006 	bcc	348 <receiver+0x160>
		proceed receiving;
     32c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     330:	0b3b0b3a 	bleq	ec3020 <__ccfg+0xea3078>
		ser_out(response_1_create, "\r\nData Saved");
     334:	01110b39 	tsteq	r1, r9, lsr fp
     338:	343b0000 	ldrtcc	r0, [fp], #-0
		proceed receiving;
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		proceed receiving;
     348:	3c00000a 	stccc	0, cr0, [r0], {10}
     34c:	08030034 	stmdaeq	r3, {r2, r4, r5}
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     350:	0b3b0b3a 	bleq	ec3040 <__ccfg+0xea3098>
     354:	13490b39 	movtne	r0, #39737	; 0x9b39
     358:	00000a02 	andeq	r0, r0, r2, lsl #20
     35c:	0300343d 	movweq	r3, #1085	; 0x43d
		proceed receiving;
     360:	3b0b3a0e 	blcc	2ceba0 <__ccfg+0x2aebf8>
     364:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     368:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     36c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     370:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		proceed receiving;
     374:	13490b39 	movtne	r0, #39737	; 0x9b39
     378:	1d3f0000 	ldcne	0, cr0, [pc, #-0]	; 380 <receiver+0x198>
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     37c:	11133101 	tstne	r3, r1, lsl #2
     380:	58011201 	stmdapl	r1, {r0, r9, ip}
     384:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		proceed receiving;
     388:	0013010b 	andseq	r0, r3, fp, lsl #2
     38c:	00054000 	andeq	r4, r5, r0
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     390:	00001331 	andeq	r1, r0, r1, lsr r3
     394:	31003441 	tstcc	r0, r1, asr #8
     398:	42000013 	andmi	r0, r0, #19
		proceed receiving;
     39c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     3a0:	06550152 			; <UNDEFINED> instruction: 0x06550152
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		proceed receiving;
     3a8:	13010b57 	movwne	r0, #6999	; 0x1b57
     3ac:	34430000 	strbcc	r0, [r3], #-0
}
     3b0:	3a0e0300 	bcc	380fb8 <__ccfg+0x361010>
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3b8:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	4400000b 	strmi	r0, [r0], #-11
     3c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	0b3b0b3a 	bleq	ec30b4 <__ccfg+0xea310c>
     3c8:	13490b39 	movtne	r0, #39737	; 0x9b39
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	00000602 	andeq	r0, r0, r2, lsl #12
     3d0:	3f012e45 	svccc	0x00012e45
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	3a0e030c 	bcc	38100c <__ccfg+0x361064>
     3d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     3e0:	010b2013 	tsteq	fp, r3, lsl r0
     3e4:	46000013 			; <UNDEFINED> instruction: 0x46000013
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e8:	08030005 	stmdaeq	r3, {r0, r2}
     3ec:	0b3b0b3a 	bleq	ec30dc <__ccfg+0xea3134>
     3f0:	13490b39 	movtne	r0, #39737	; 0x9b39
		strncpy(response_message->record, rec, 20);
     3f4:	05470000 	strbeq	r0, [r7, #-0]
     3f8:	3a0e0300 	bcc	381000 <__ccfg+0x361058>
     3fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					call sender(response_message_4, done_case);
     400:	0013490b 	andseq	r4, r3, fp, lsl #18
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     404:	012e4800 			; <UNDEFINED> instruction: 0x012e4800
     408:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     40c:	0b3b0b3a 	bleq	ec30fc <__ccfg+0xea3154>
     410:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	01111349 	tsteq	r1, r9, asr #6
     418:	0a400112 	beq	1000868 <__ccfg+0xfe08c0>
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	00001301 	andeq	r1, r0, r1, lsl #6
     420:	03003449 	movweq	r3, #1097	; 0x449
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     424:	3b0b3a08 	blcc	2cec4c <__ccfg+0x2aeca4>
     428:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     42c:	4a000013 	bmi	480 <receiver+0x298>
     430:	0000010b 	andeq	r0, r0, fp, lsl #2
     434:	3f002e4b 	svccc	0x00002e4b
     438:	3a0e030c 	bcc	381070 <__ccfg+0x3610c8>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     440:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    return node->data_base.item_array[index];
     444:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     448:	000a4001 	andeq	r4, sl, r1
     44c:	00054c00 	andeq	r4, r5, r0, lsl #24
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
     454:	0b390b3b 	bleq	e43148 <__ccfg+0xe231a0>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	0a021349 	beq	85184 <__ccfg+0x651dc>
    return node->data_base.item_array[index];
     45c:	2e4d0000 	cdpcs	0, 4, cr0, cr13, cr0, {0}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	3a0e0300 	bcc	381068 <__ccfg+0x3610c0>
     464:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     468:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		strncpy(response_message->record, rec, 20);
     46c:	000b2013 	andeq	r2, fp, r3, lsl r0
     470:	012e4e00 			; <UNDEFINED> instruction: 0x012e4e00
     474:	01111331 	tsteq	r1, r1, lsr r3
     478:	0a400112 	beq	10008c8 <__ccfg+0xfe0920>
     47c:	00001301 	andeq	r1, r0, r1, lsl #6
     480:	3100054f 	tstcc	r0, pc, asr #10
     484:	000a0213 	andeq	r0, sl, r3, lsl r2
     488:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
     48c:	01111331 	tsteq	r1, r1, lsr r3
     490:	0a400112 	beq	10008e0 <__ccfg+0xfe0938>
     494:	01000000 	mrseq	r0, (UNDEF: 0)
     498:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     49c:	0e030b13 	vmoveq.32	d3[0], r0
     4a0:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     4a4:	06100111 			; <UNDEFINED> instruction: 0x06100111
     4a8:	24020000 	strcs	r0, [r2], #-0
     4ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4b0:	000e030b 	andeq	r0, lr, fp, lsl #6
     4b4:	00160300 	andseq	r0, r6, r0, lsl #6
     4b8:	0b3a0e03 	bleq	e83ccc <__ccfg+0xe63d24>
     4bc:	0b390b3b 	bleq	e431b0 <__ccfg+0xe23208>
     4c0:	00001349 	andeq	r1, r0, r9, asr #6
     4c4:	0b002404 	bleq	94dc <__exidx_end+0x3a00>
     4c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4cc:	05000008 	streq	r0, [r0, #-8]
     4d0:	13490026 	movtne	r0, #36902	; 0x9026
     4d4:	35060000 	strcc	r0, [r6, #-0]
     4d8:	00134900 	andseq	r4, r3, r0, lsl #18
     4dc:	000f0700 	andeq	r0, pc, r0, lsl #14
     4e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     4e4:	13080000 	movwne	r0, #32768	; 0x8000
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	3a0b0b01 	bcc	2c30f4 <__ccfg+0x2a314c>
     4ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f0:	0013010b 	andseq	r0, r3, fp, lsl #2
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	000d0900 	andeq	r0, sp, r0, lsl #18
     4f8:	0b3a0e03 	bleq	e83d0c <__ccfg+0xe63d64>
     4fc:	0b390b3b 	bleq	e431f0 <__ccfg+0xe23248>
     500:	0b0b1349 	bleq	2c522c <__ccfg+0x2a5284>
				if(!response_flag){
     504:	0b0c0b0d 	bleq	303140 <__ccfg+0x2e3198>
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
					response_flag=1;
     50c:	03000d0a 	movweq	r0, #3338	; 0xd0a
					trigger(&response_flag);
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
				switch(response_message_5->status){
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     518:	000b3813 	andeq	r3, fp, r3, lsl r8
     51c:	00340b00 	eorseq	r0, r4, r0, lsl #22
     520:	0b3a0e03 	bleq	e83d34 <__ccfg+0xe63d8c>
     524:	0b390b3b 	bleq	e43218 <__ccfg+0xe23270>
						if (response_checker[0] == response_message_5->request_number){
     528:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 40c <receiver+0x224>
     52c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     530:	4901010c 	stmdbmi	r1, {r2, r3, r8}
							switch(response_checker[1]){
     534:	00130113 	andseq	r0, r3, r3, lsl r1
     538:	00210d00 	eoreq	r0, r1, r0, lsl #26
     53c:	160e0000 	strne	r0, [lr], -r0
     540:	3a0e0300 	bcc	381148 <__ccfg+0x3611a0>
						proceed response_2;
     544:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
						break;
     548:	0013490b 	andseq	r4, r3, fp, lsl #18
									proceed response_1_delete;
     54c:	01150f00 	tsteq	r5, r0, lsl #30
									proceed response_1_retrieve;
     550:	13010c27 	movwne	r0, #7207	; 0x1c27
						proceed response_2;
     554:	05100000 	ldreq	r0, [r0, #-0]
						proceed response_3;
     558:	00134900 	andseq	r4, r3, r0, lsl #18
						proceed response_4;
     55c:	00341100 	eorseq	r1, r4, r0, lsl #2
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	0b3a0e03 	bleq	e83d74 <__ccfg+0xe63dcc>
				break;
     564:	0b39053b 	bleq	e41a58 <__ccfg+0xe21ab0>
}
     568:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 44c <receiver+0x264>
     56c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     570:	0b011312 	bleq	451c0 <__ccfg+0x25218>
     574:	3b0b3a0b 	blcc	2ceda8 <__ccfg+0x2aee00>
     578:	010b3905 	tsteq	fp, r5, lsl #18
bool delete_all(struct Node *node){
     57c:	13000013 	movwne	r0, #19
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	13490b39 	movtne	r0, #39737	; 0x9b39
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	00000b38 	andeq	r0, r0, r8, lsr fp
            node->data_base.item_array[i].timestamp = 0;
     590:	03011314 	movweq	r1, #4884	; 0x1314
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	3a0b0b0e 	bcc	2c31d4 <__ccfg+0x2a322c>
    node->data_base.item_count = 0;
     598:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     59c:	0013010b 	andseq	r0, r3, fp, lsl #2
        return true;
     5a0:	00211500 	eoreq	r1, r1, r0, lsl #10
fsm root {
     5a4:	0b2f1349 	bleq	bc52d0 <__ccfg+0xba5328>
     5a8:	34160000 	ldrcc	r0, [r6], #-0
     5ac:	3a0e0300 	bcc	3811b4 <__ccfg+0x36120c>
     5b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5b4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5b8:	00341700 	eorseq	r1, r4, r0, lsl #14
     5bc:	0b3a0e03 	bleq	e83dd0 <__ccfg+0xe63e28>
     5c0:	0b390b3b 	bleq	e432b4 <__ccfg+0xe2330c>
     5c4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 4a8 <receiver+0x2c0>
     5c8:	00000a02 	andeq	r0, r0, r2, lsl #20
     5cc:	03003418 	movweq	r3, #1048	; 0x418
     5d0:	3b0b3a0e 	blcc	2cee10 <__ccfg+0x2aee68>
     5d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     5d8:	000a0213 	andeq	r0, sl, r3, lsl r2
     5dc:	00341900 	eorseq	r1, r4, r0, lsl #18
     5e0:	0b3a1347 	bleq	e85304 <__ccfg+0xe6535c>
     5e4:	0b39053b 	bleq	e41ad8 <__ccfg+0xe21b30>
     5e8:	00000a02 	andeq	r0, r0, r2, lsl #20
     5ec:	3f012e1a 	svccc	0x00012e1a
     5f0:	3a0e030c 	bcc	381228 <__ccfg+0x361280>
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     5fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		init_node(node_db);
     600:	010a4001 	tsteq	sl, r1
		phys_cc1350(0, MAX_PKT_LEN);
     604:	1b000013 	blne	658 <root+0xb4>
     608:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
		tcv_plug (0, &plug_null);
     60c:	00001301 	andeq	r1, r0, r1, lsl #6
     610:	0300341c 	movweq	r3, #1052	; 0x41c
		sfd = tcv_open (WNONE, 0, 0);
     614:	3b0b3a08 	blcc	2cee3c <__ccfg+0x2aee94>
     618:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     61c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     620:	1331001d 	teqne	r1, #29
     624:	01120111 	tsteq	r2, r1, lsl r1
			diag("Cannot open tcv interface");
     628:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     62c:	00000b57 	andeq	r0, r0, r7, asr fp
			halt();
     630:	3f012e1e 	svccc	0x00012e1e
		tcv_control(sfd, PHYSOPT_ON, NULL);
     634:	3a0e030c 	bcc	38126c <__ccfg+0x3612c4>
     638:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		runfsm receiver(node_db);
     63c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     640:	010a4001 	tsteq	sl, r1
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	1f000013 	svcne	0x00000013
     648:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     64c:	0b3b0b3a 	bleq	ec333c <__ccfg+0xea3394>
     650:	00000b39 	andeq	r0, r0, r9, lsr fp
     654:	31011d20 	tstcc	r1, r0, lsr #26
     658:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     660:	010b5705 	tsteq	fp, r5, lsl #14
     664:	21000013 	tstcs	r0, r3, lsl r0
		switch(CHOICE) {
     668:	13310005 	teqne	r1, #5
     66c:	1d220000 	stcne	0, cr0, [r2, #-0]
     670:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     674:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     678:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     67c:	0013010b 	andseq	r0, r3, fp, lsl #2
     680:	010b2300 	mrseq	r2, (UNDEF: 59)
     684:	00000655 	andeq	r0, r0, r5, asr r6
     688:	31000a24 	tstcc	r0, r4, lsr #20
     68c:	00011113 	andeq	r1, r1, r3, lsl r1
     690:	001d2500 	andseq	r2, sp, r0, lsl #10
     694:	01521331 	cmpeq	r2, r1, lsr r3
				proceed menu;
     698:	0b580655 	bleq	1601ff4 <__ccfg+0x15e204c>
     69c:	0b570559 	bleq	15c1c08 <__ccfg+0x15a1c60>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	1d260000 	stcne	0, cr0, [r6, #-0]
     6a4:	11133101 	tstne	r3, r1, lsl #2
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	58011201 	stmdapl	r1, {r0, r9, ip}
     6ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     6b0:	0013010b 	andseq	r0, r3, fp, lsl #2
		DEBUG_PRINT("setting node group ID");
     6b4:	011d2700 	tsteq	sp, r0, lsl #14
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	01111331 	tsteq	r1, r1, lsr r3
    node->gid = gid; 
     6bc:	0b580112 	bleq	1600b0c <__ccfg+0x15e0b64>
		proceed menu;
     6c0:	0b570559 	bleq	15c1c2c <__ccfg+0x15a1c84>
     6c4:	1d280000 	stcne	0, cr0, [r8, #-0]
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	11133100 	tstne	r3, r0, lsl #2
     6cc:	58011201 	stmdapl	r1, {r0, r9, ip}
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     6d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6e0:	13490b39 	movtne	r0, #39737	; 0x9b39
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	00000602 	andeq	r0, r0, r2, lsl #12
     6e8:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     6ec:	3b0b3a0e 	blcc	2cef2c <__ccfg+0x2aef84>
			strncpy(reason, "Out of Range", 50);
     6f0:	200b3905 	andcs	r3, fp, r5, lsl #18
     6f4:	0013010b 	andseq	r0, r3, fp, lsl #2
			proceed invalid_node_id;
     6f8:	000a2b00 	andeq	r2, sl, r0, lsl #22
     6fc:	0b3a0e03 	bleq	e83f10 <__ccfg+0xe63f68>
				strncpy(reason, "ID is already in use", 50);
     700:	0b39053b 	bleq	e41bf4 <__ccfg+0xe21c4c>
		for(int i = 0; i < node_db->index; i++){
     704:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     708:	030c3f01 	movweq	r3, #52993	; 0xcf01
     70c:	3b0b3a0e 	blcc	2cef4c <__ccfg+0x2aefa4>
		proceed menu;
     710:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	1201110c 	andne	r1, r1, #12, 2
     718:	010a4001 	tsteq	sl, r1
     71c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     720:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		proceed get_new_node_id;
     724:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     728:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (!clear_node_neighbour_array(node_db)){
     72c:	00000602 	andeq	r0, r0, r2, lsl #12
     730:	11010b2e 	tstne	r1, lr, lsr #22
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	01011201 	tsteq	r1, r1, lsl #4
     738:	2f000013 	svccs	0x00000013
     73c:	13310034 	teqne	r1, #52	; 0x34
			proceed error;
     740:	0b300000 	bleq	c00748 <__ccfg+0xbe07a0>
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     744:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
     748:	31000006 	tstcc	r0, r6
		request_packet->gid = node_db->gid;
     74c:	13310034 	teqne	r1, #52	; 0x34
     750:	00000602 	andeq	r0, r0, r2, lsl #12
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	31011d32 	tstcc	r1, r2, lsr sp
		request_packet->request_number = generate_request_num();
     758:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     75c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		call sender(request_packet, wait_discovery);
     760:	000b570b 	andeq	r5, fp, fp, lsl #14
     764:	011d3300 	tsteq	sp, r0, lsl #6
		request_packet->receiver_id=0;
     768:	01521331 	cmpeq	r2, r1, lsr r3
		call sender(request_packet, wait_discovery);
     76c:	0b580655 	bleq	16020c8 <__ccfg+0x15e2120>
     770:	0b570559 	bleq	15c1cdc <__ccfg+0x15a1d34>
     774:	05340000 	ldreq	r0, [r4, #-0]!
			release;
     778:	3a080300 	bcc	201380 <__ccfg+0x1e13d8>
				proceed get_new_node_id;
     77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				proceed clear_neighbour_array;
     780:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				proceed create_proto_start;
     784:	3500000a 	strcc	r0, [r0, #-10]
				proceed start_delete_proto;
     788:	13310005 	teqne	r1, #5
				proceed retrieve_proto;
     78c:	00000602 	andeq	r0, r0, r2, lsl #12
				proceed display_db;
     790:	03003436 	movweq	r3, #1078	; 0x436
				proceed del_local;
     794:	3b0b3a08 	blcc	2cefbc <__ccfg+0x2af014>
			if(node_db->id == node_db->nnodes[i]){
     798:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     79c:	00060213 	andeq	r0, r6, r3, lsl r2
     7a0:	010b3700 	tsteq	fp, r0, lsl #14
				strncpy(reason, "ID is already in use", 50);
     7a4:	01120111 	tsteq	r2, r1, lsl r1
     7a8:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
				proceed invalid_node_id;
     7ac:	3a0e0300 	bcc	3813b4 <__ccfg+0x36140c>
     7b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		for(int i = 0; i < node_db->index; i++){
     7b4:	000b200b 	andeq	r2, fp, fp
		if (discovery_wait_flag == 0){
     7b8:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
			discovery_wait_flag=1;
     7bc:	0b3a0e03 	bleq	e83fd0 <__ccfg+0xe64028>
     7c0:	0b39053b 	bleq	e41cb4 <__ccfg+0xe21d0c>
			delay(3000, find_proto_start);
     7c4:	01110c27 	tsteq	r1, r7, lsr #24
     7c8:	0a400112 	beq	1000c18 <__ccfg+0xfe0c70>
		if (discovery_wait_flag == 1){
     7cc:	00001301 	andeq	r1, r0, r1, lsl #6
			discovery_wait_flag=0;
     7d0:	03012e3a 	movweq	r2, #7738	; 0x1e3a
     7d4:	3b0b3a0e 	blcc	2cf014 <__ccfg+0x2af06c>
			delay(3000, display_neighbour_nodes);
     7d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     7dc:	1113490c 	tstne	r3, ip, lsl #18
     7e0:	40011201 	andmi	r1, r1, r1, lsl #4
     7e4:	0013010a 	andseq	r0, r3, sl, lsl #2
     7e8:	00053b00 	andeq	r3, r5, r0, lsl #22
     7ec:	0b3a0803 	bleq	e82800 <__ccfg+0xe62858>
     7f0:	0b39053b 	bleq	e41ce4 <__ccfg+0xe21d3c>
     7f4:	06021349 	streq	r1, [r2], -r9, asr #6
     7f8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
     7fc:	3a0e0301 	bcc	381408 <__ccfg+0x361460>
     800:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     804:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     808:	010a4001 	tsteq	sl, r1
     80c:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     810:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 760 <root+0x1bc>
     814:	0b3a0e03 	bleq	e84028 <__ccfg+0xe64080>
     818:	0b39053b 	bleq	e41d0c <__ccfg+0xe21d64>
     81c:	13490c27 	movtne	r0, #39975	; 0x9c27
     820:	13010b20 	movwne	r0, #6944	; 0x1b20
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	053e0000 	ldreq	r0, [lr, #-0]!
     828:	3a080300 	bcc	201430 <__ccfg+0x1e1488>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	0013490b 	andseq	r4, r3, fp, lsl #18
			if (node_db->nnodes[i] == 0) break;
     834:	000a3f00 	andeq	r3, sl, r0, lsl #30
     838:	0b3a0803 	bleq	e8284c <__ccfg+0xe628a4>
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	0b39053b 	bleq	e41d30 <__ccfg+0xe21d88>
     840:	34400000 	strbcc	r0, [r0], #-0
     844:	3a0e0300 	bcc	38144c <__ccfg+0x3614a4>
     848:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		ser_out(display_neighbour_nodes, "\r\n");
     850:	41000006 	tstmi	r0, r6
     854:	0803000a 	stmdaeq	r3, {r1, r3}
		proceed menu;
     858:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     85c:	01110b39 	tsteq	r1, r9, lsr fp
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	1d420000 	stclne	0, cr0, [r2, #-0]
     864:	11133101 	tstne	r3, r1, lsl #2
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	58011201 	stmdapl	r1, {r0, r9, ip}
     86c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     870:	0013010b 	andseq	r0, r3, fp, lsl #2
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	011d4300 	tsteq	sp, r0, lsl #6
     878:	01111331 	tsteq	r1, r1, lsr r3
			strncpy(reason, "Error: improper ID", 50);
     87c:	0b580112 	bleq	1600ccc <__ccfg+0x15e0d24>
     880:	0b570b59 	bleq	15c35ec <__ccfg+0x15a3644>
			proceed error;
     884:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
     888:	3a0e0301 	bcc	381494 <__ccfg+0x3614ec>
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     890:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	010b2013 	tsteq	fp, r3, lsl r0
     898:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     8a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8a4:	13490b39 	movtne	r0, #39737	; 0x9b39
		create_message->gid = node_db->gid;
     8a8:	00000b20 	andeq	r0, r0, r0, lsr #22
		create_message->tpe = 2;
     8ac:	03012e46 	movweq	r2, #7750	; 0x1e46
		create_message->request_number = generate_request_num();
     8b0:	3b0b3a0e 	blcc	2cf0f0 <__ccfg+0x2af148>
     8b4:	200b390b 	andcs	r3, fp, fp, lsl #18
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	0013010b 	andseq	r0, r3, fp, lsl #2
     8bc:	00344700 	eorseq	r4, r4, r0, lsl #14
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	0b3a0803 	bleq	e828d4 <__ccfg+0xe6292c>
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	0b390b3b 	bleq	e435b8 <__ccfg+0xe23610>
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	00001349 	andeq	r1, r0, r9, asr #6
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	00010b48 	andeq	r0, r1, r8, asr #22
		response_checker[0] = create_message->request_number;
     8d0:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
     8d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		call sender(create_message, wait);
     8d8:	0b3b0b3a 	bleq	ec35c8 <__ccfg+0xea3620>
     8dc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     8e0:	01120111 	tsteq	r2, r1, lsl r1
     8e4:	13010a40 	movwne	r0, #6720	; 0x1a40
     8e8:	054a0000 	strbeq	r0, [sl, #-0]
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	3a080300 	bcc	2014f4 <__ccfg+0x1e154c>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8f8:	4b000006 	blmi	918 <root+0x374>
     8fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	0b3b0b3a 	bleq	ec35f0 <__ccfg+0xea3648>
     904:	13490b39 	movtne	r0, #39737	; 0x9b39
			strncpy(reason, "Error: improper node ID", 50);
     908:	00000a02 	andeq	r0, r0, r2, lsl #20
     90c:	03000a4c 	movweq	r0, #2636	; 0xa4c
     910:	3b0b3a0e 	blcc	2cf150 <__ccfg+0x2af1a8>
			proceed error;
     914:	110b390b 	tstne	fp, fp, lsl #18
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	4d000001 	stcmi	0, cr0, [r0, #-4]
     91c:	1331001d 	teqne	r1, #29
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	06550152 			; <UNDEFINED> instruction: 0x06550152
     924:	0b590b58 	bleq	164368c <__ccfg+0x16236e4>
     928:	00000b57 	andeq	r0, r0, r7, asr fp
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	3f002e4e 	svccc	0x00002e4e
     930:	3a0e030c 	bcc	381568 <__ccfg+0x3615c0>
			strncpy(reason, "Error: invalid index", 50);
     934:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     938:	110c270b 	tstne	ip, fp, lsl #14
			proceed error;
     93c:	40011201 	andmi	r1, r1, r1, lsl #4
     940:	4f00000a 	svcmi	0x0000000a
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     944:	08030005 	stmdaeq	r3, {r0, r2}
		delete_record->tpe = DELETE_RECORD;
     948:	0b3b0b3a 	bleq	ec3638 <__ccfg+0xea3690>
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	13490b39 	movtne	r0, #39737	; 0x9b39
		delete_record->gid = node_db->gid;
     950:	00000a02 	andeq	r0, r0, r2, lsl #20
		delete_record->tpe = DELETE_RECORD;
     954:	03012e50 	movweq	r2, #7760	; 0x1e50
		delete_record->request_number = generate_request_num();
     958:	3b0b3a0e 	blcc	2cf198 <__ccfg+0x2af1f0>
     95c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		delete_record->sender_id = node_db->id;
     960:	010b200c 	tsteq	fp, ip
     964:	51000013 	tstpl	r0, r3, lsl r0
     968:	08030005 	stmdaeq	r3, {r0, r2}
		call sender(&delete_record, wait);
     96c:	0b3b0b3a 	bleq	ec365c <__ccfg+0xea36b4>
		delete_record->receiver_id = user_provided_receiver_id;
     970:	13490b39 	movtne	r0, #39737	; 0x9b39
		delete_record->record_index = user_provided_index;
     974:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
		response_checker[0] = delete_record->request_number;
     978:	3a0e0301 	bcc	381584 <__ccfg+0x3615dc>
		response_checker[1] = delete_record->tpe;
     97c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     980:	200c270b 	andcs	r2, ip, fp, lsl #14
		call sender(&delete_record, wait);
     984:	0013010b 	andseq	r0, r3, fp, lsl #2
     988:	00055300 	andeq	r5, r5, r0, lsl #6
     98c:	0b3a0e03 	bleq	e841a0 <__ccfg+0xe641f8>
     990:	0b39053b 	bleq	e41e84 <__ccfg+0xe21edc>
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     994:	00001349 	andeq	r1, r0, r9, asr #6
     998:	03002e54 	movweq	r2, #3668	; 0xe54
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	3b0b3a0e 	blcc	2cf1dc <__ccfg+0x2af234>
     9a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     9a4:	000b200c 	andeq	r2, fp, ip
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
     9ac:	0b3a0e03 	bleq	e841c0 <__ccfg+0xe64218>
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	0b390b3b 	bleq	e436a4 <__ccfg+0xe236fc>
     9b4:	13490c27 	movtne	r0, #39975	; 0x9c27
			proceed error;
     9b8:	13010b20 	movwne	r0, #6944	; 0x1b20
     9bc:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c0:	3a0e0300 	bcc	3815c8 <__ccfg+0x361620>
     9c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	200c270b 	andcs	r2, ip, fp, lsl #14
     9cc:	5700000b 	strpl	r0, [r0, -fp]
     9d0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	0b3b0b3a 	bleq	ec36c4 <__ccfg+0xea371c>
			strncpy(reason, "Error: invalid index", 50);
     9d8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     9dc:	0b201349 	bleq	805708 <__ccfg+0x7e5760>
     9e0:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
			proceed error;
     9e4:	3a0e0300 	bcc	3815ec <__ccfg+0x361644>
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ec:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		retrieve_record->gid = node_db->gid;
     9f0:	000b2013 	andeq	r2, fp, r3, lsl r0
     9f4:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
     9f8:	01111331 	tsteq	r1, r1, lsr r3
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	0a400112 	beq	1000e4c <__ccfg+0xfe0ea4>
		retrieve_record->request_number = generate_request_num();
     a00:	01000000 	mrseq	r0, (UNDEF: 0)
     a04:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		retrieve_record->sender_id = node_db->id;
     a08:	0e030b13 	vmoveq.32	d3[0], r0
		response_checker[0] = retrieve_record->request_number;
     a0c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	06100111 			; <UNDEFINED> instruction: 0x06100111
     a14:	24020000 	strcs	r0, [r2], #-0
		retrieve_record->record_index = user_provided_index;
     a18:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a1c:	000e030b 	andeq	r0, lr, fp, lsl #6
		response_checker[0] = retrieve_record->request_number;
     a20:	00160300 	andseq	r0, r6, r0, lsl #6
		call sender(&retrieve_record, wait);
     a24:	0b3a0e03 	bleq	e84238 <__ccfg+0xe64290>
     a28:	0b390b3b 	bleq	e4371c <__ccfg+0xe23774>
     a2c:	00001349 	andeq	r1, r0, r9, asr #6
     a30:	0b002404 	bleq	9a48 <__exidx_end+0x3f6c>
     a34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	05000008 	streq	r0, [r0, #-8]
     a3c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		if(node_db->data_base.item_count != 0){
     a40:	0b3a0b0b 	bleq	e83674 <__ccfg+0xe636cc>
     a44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a48:	0d060000 	stceq	0, cr0, [r6, #-0]
		ser_out(loop_through_data, "\r\n");
     a4c:	490e0300 	stmdbmi	lr, {r8, r9}
     a50:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
		proceed menu;
     a54:	0700000c 	streq	r0, [r0, -ip]
		delete_all(node_db);
     a58:	0b0b000f 	bleq	2c0a9c <__ccfg+0x2a0af4>
     a5c:	26080000 	strcs	r0, [r8], -r0
		proceed menu;
     a60:	00134900 	andseq	r4, r3, r0, lsl #18
     a64:	00350900 	eorseq	r0, r5, r0, lsl #18
		delay(3000, timeout);
     a68:	00001349 	andeq	r1, r0, r9, asr #6
     a6c:	0b000f0a 	bleq	469c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1cc>
		when(&response_flag, menu);
     a70:	0013490b 	andseq	r4, r3, fp, lsl #18
     a74:	01130b00 	tsteq	r3, r0, lsl #22
		release;
     a78:	0b3a0b0b 	bleq	e836ac <__ccfg+0xe63704>
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	0b390b3b 	bleq	e43770 <__ccfg+0xe237c8>
     a80:	00001301 	andeq	r1, r0, r1, lsl #6
     a84:	03000d0c 	movweq	r0, #3340	; 0xd0c
     a88:	3b0b3a0e 	blcc	2cf2c8 <__ccfg+0x2af320>
     a8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a90:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     a94:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     a9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa8:	00000b38 	andeq	r0, r0, r8, lsr fp
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	0300340e 	movweq	r3, #1038	; 0x40e
     ab0:	3b0b3a0e 	blcc	2cf2f0 <__ccfg+0x2af348>
		proceed menu;
     ab4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ab8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	0f00000c 	svceq	0x0000000c
     ac0:	13490101 	movtne	r0, #37121	; 0x9101
		proceed menu;
     ac4:	00001301 	andeq	r1, r0, r1, lsl #6
     ac8:	00002110 	andeq	r2, r0, r0, lsl r1
}
     acc:	00161100 	andseq	r1, r6, r0, lsl #2
     ad0:	0b3a0e03 	bleq	e842e4 <__ccfg+0xe6433c>
     ad4:	0b39053b 	bleq	e41fc8 <__ccfg+0xe22020>
     ad8:	00001349 	andeq	r1, r0, r9, asr #6
     adc:	27011512 	smladcs	r1, r2, r5, r1
     ae0:	0013010c 	andseq	r0, r3, ip, lsl #2
     ae4:	00051300 	andeq	r1, r5, r0, lsl #6
     ae8:	00001349 	andeq	r1, r0, r9, asr #6
     aec:	03003414 	movweq	r3, #1044	; 0x414
     af0:	3b0b3a0e 	blcc	2cf330 <__ccfg+0x2af388>
     af4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     af8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     afc:	1500000c 	strne	r0, [r0, #-12]
     b00:	0b0b0113 	bleq	2c0f54 <__ccfg+0x2a0fac>
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b08:	13010b39 	movwne	r0, #6969	; 0x1b39
     b0c:	0d160000 	ldceq	0, cr0, [r6, #-0]
     b10:	3a0e0300 	bcc	381718 <__ccfg+0x361770>
     b14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     b1c:	1700000b 	strne	r0, [r0, -fp]
     b20:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     b24:	0b3a0b0b 	bleq	e83758 <__ccfg+0xe637b0>
     b28:	0b39053b 	bleq	e4201c <__ccfg+0xe22074>
static void devinit_uart (int devnum) {
     b2c:	00001301 	andeq	r1, r0, r1, lsl #6
	adddevfunc (ioreq_uart_a, devnum);
     b30:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
     b34:	000b2f13 	andeq	r2, fp, r3, lsl pc
void udelay (volatile word n) {
     b38:	01151900 	tsteq	r5, r0, lsl #18
     b3c:	13490c27 	movtne	r0, #39975	; 0x9c27
	while (n) {
     b40:	00001301 	andeq	r1, r0, r1, lsl #6
     b44:	4700341a 	smladmi	r0, sl, r4, r3
}
     b48:	3b0b3a13 	blcc	2cf39c <__ccfg+0x2af3f4>
	while (n--);
     b4c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
     b50:	1b00000a 	blne	b80 <mdelay+0x1c>
     b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		n--;
     b58:	0b3b0b3a 	bleq	ec3848 <__ccfg+0xea38a0>
     b5c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b60:	0a020c3f 	beq	83c64 <__ccfg+0x63cbc>
void mdelay (volatile word n) {
     b64:	341c0000 	ldrcc	r0, [ip], #-0
     b68:	3a0e0300 	bcc	381770 <__ccfg+0x3617c8>
	while (n) {
     b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     b74:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
		udelay (999);
     b78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		n--;
     b80:	13490b39 	movtne	r0, #39737	; 0x9b39
     b84:	00000a02 	andeq	r0, r0, r2, lsl #20
     b88:	3f002e1e 	svccc	0x00002e1e
     b8c:	3a0e030c 	bcc	3817c4 <__ccfg+0x36181c>
void __pi_ondomain (lword d) {
     b90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b94:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		if (__pi_systat.effpdm > 1)
     b98:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b9c:	000a4001 	andeq	r4, sl, r1
			__pi_systat.effpdm = 1;
     ba0:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
	PRCMPowerDomainOn (d);
     ba4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ba8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb0:	01120111 	tsteq	r2, r1, lsl r1
     bb4:	13010a40 	movwne	r0, #6720	; 0x1a40
     bb8:	05200000 	streq	r0, [r0, #-0]!
	__pi_systat.ondmns |= d;
     bbc:	3a0e0300 	bcc	3817c4 <__ccfg+0x36181c>
     bc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     bc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bc8:	21000006 	tstcs	r0, r6
void __pi_offdomain (lword d) {
     bcc:	00000018 	andeq	r0, r0, r8, lsl r0
     bd0:	03003422 	movweq	r3, #1058	; 0x422
	PRCMPowerDomainOff (d);
     bd4:	3b0b3a08 	blcc	2cf3fc <__ccfg+0x2af454>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     bdc:	00060213 	andeq	r0, r6, r3, lsl r2
     be0:	00342300 	eorseq	r2, r4, r0, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	0b3a0803 	bleq	e82bf8 <__ccfg+0xe62c50>
     be8:	0b39053b 	bleq	e420dc <__ccfg+0xe22134>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	0a021349 	beq	85918 <__ccfg+0x65970>
     bf0:	34240000 	strtcc	r0, [r4], #-0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf4:	3a080300 	bcc	2017fc <__ccfg+0x1e1854>
     bf8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_systat.ondmns &= ~d;
     bfc:	0013490b 	andseq	r4, r3, fp, lsl #18
     c00:	000a2500 	andeq	r2, sl, r0, lsl #10
}
     c04:	0b3a0e03 	bleq	e84418 <__ccfg+0xe64470>
     c08:	0b39053b 	bleq	e420fc <__ccfg+0xe22154>
void __pi_syserror (word ec, const char *m) {
     c0c:	00000111 	andeq	r0, r0, r1, lsl r1
	diag ("SYSERR: %x, %s", ec, m);
     c10:	11010b26 	tstne	r1, r6, lsr #22
     c14:	01011201 	tsteq	r1, r1, lsl #4
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	27000013 	smladcs	r0, r3, r0, r0
     c1c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     c20:	00001301 	andeq	r1, r0, r1, lsl #6
     c24:	31011d28 	tstcc	r1, r8, lsr #26
		all_leds_blink;
     c28:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     c2c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     c30:	000b5705 	andeq	r5, fp, r5, lsl #14
     c34:	00052900 	andeq	r2, r5, r0, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	00001331 	andeq	r1, r0, r1, lsr r3
     c3c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     c40:	3b0b3a0e 	blcc	2cf480 <__ccfg+0x2af4d8>
     c44:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     c48:	1201110c 	andne	r1, r1, #12, 2
     c4c:	010a4001 	tsteq	sl, r1
	while (1) {
     c50:	2b000013 	blcs	ca4 <tci_run_auxiliary_timer+0x4>
     c54:	08030005 	stmdaeq	r3, {r0, r2}
     c58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c5c:	13490b39 	movtne	r0, #39737	; 0x9b39
void tci_run_delay_timer () {
     c60:	00000602 	andeq	r0, r0, r2, lsl #12
	setdel = __pi_mintk - __pi_old;
     c64:	3f012e2c 	svccc	0x00012e2c
     c68:	3a0e030c 	bcc	3818a0 <__ccfg+0x3618f8>
     c6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c70:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c78:	010a4001 	tsteq	sl, r1
     c7c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     c80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	sti_tim;
     c88:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     c8c:	00000602 	andeq	r0, r0, r2, lsl #12
     c90:	3f012e2e 	svccc	0x00012e2e
     c94:	3a0e030c 	bcc	3818cc <__ccfg+0x361924>
     c98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c9c:	200c270b 	andcs	r2, ip, fp, lsl #14
	cli_aux;
     ca0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ca4:	00052f00 	andeq	r2, r5, r0, lsl #30
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	0b3a0803 	bleq	e82cbc <__ccfg+0xe62d14>
     cac:	0b39053b 	bleq	e421a0 <__ccfg+0xe221f8>
     cb0:	00001349 	andeq	r1, r0, r9, asr #6
     cb4:	3f012e30 	svccc	0x00012e30
	sti_aux;
     cb8:	3a0e030c 	bcc	3818f0 <__ccfg+0x361948>
}
     cbc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     cc4:	010a4001 	tsteq	sl, r1
void AONRTCIntHandler () {
     cc8:	31000013 	tstcc	r0, r3, lsl r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     ccc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; c1c <__pi_syserror+0x10>
     cd0:	0b3a0803 	bleq	e82ce4 <__ccfg+0xe62d3c>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	0b39053b 	bleq	e421c8 <__ccfg+0xe22220>
		if (__pi_utims [0] == 0)
     cd8:	13490c27 	movtne	r0, #39975	; 0x9c27
     cdc:	01120111 	tsteq	r2, r1, lsl r1
		if (*(__pi_utims [0])) {
     ce0:	13010a40 	movwne	r0, #6720	; 0x1a40
     ce4:	05320000 	ldreq	r0, [r2, #-0]!
			(*(__pi_utims [0]))--;
     ce8:	3a080300 	bcc	2018f0 <__ccfg+0x1e1948>
		if (__pi_utims [1] == 0)
     cec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (*(__pi_utims [1])) {
     cf0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			aux_timer_inactive = 0;
     cf4:	3300000a 	movwcc	r0, #10
			(*(__pi_utims [1]))--;
     cf8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; c48 <__pi_syserror+0x3c>
		if (__pi_utims [2] == 0)
     cfc:	0b3a0e03 	bleq	e84510 <__ccfg+0xe64568>
		if (*(__pi_utims [2])) {
     d00:	0b39053b 	bleq	e421f4 <__ccfg+0xe2224c>
			(*(__pi_utims [2]))--;
     d04:	01110c27 	tsteq	r1, r7, lsr #24
		if (__pi_utims [3] != 0) {
     d08:	0a400112 	beq	1001158 <__ccfg+0xfe11b0>
			if (*(__pi_utims [3])) {
     d0c:	05340000 	ldreq	r0, [r4, #-0]!
				aux_timer_inactive = 0;
     d10:	3a0e0300 	bcc	381918 <__ccfg+0x361970>
				(*(__pi_utims [3]))--;
     d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (__pi_systat.ledsts) {
     d18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d1c:	3500000a 	strcc	r0, [r0, #-10]
		if (__pi_systat.ledblc++ == 0) {
     d20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (__pi_systat.ledblk) {
     d28:	13490b39 	movtne	r0, #39737	; 0x9b39
     d2c:	0b360000 	bleq	d80d34 <__ccfg+0xd60d8c>
     d30:	00065501 	andeq	r5, r6, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
     d38:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (__pi_systat.ledsts & 0x2)
     d3c:	0b3b0b3a 	bleq	ec3a2c <__ccfg+0xea3a84>
     d40:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     d44:	13010b20 	movwne	r0, #6944	; 0x1b20
				if (__pi_systat.ledsts & 0x4)
     d48:	05380000 	ldreq	r0, [r8, #-0]!
				__pi_systat.ledblk = 0;
     d4c:	3a080300 	bcc	201954 <__ccfg+0x1e19ac>
     d50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (__pi_systat.fstblk)
     d54:	0013490b 	andseq	r4, r3, fp, lsl #18
     d58:	00053900 	andeq	r3, r5, r0, lsl #18
				__pi_systat.ledblc = 200;
     d5c:	0b3a0e03 	bleq	e84570 <__ccfg+0xe645c8>
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	0b390b3b 	bleq	e43a54 <__ccfg+0xe23aac>
		cli_tim;
     d64:	00001349 	andeq	r1, r0, r9, asr #6
		__pi_new += setdel;
     d68:	0300343a 	movweq	r3, #1082	; 0x43a
     d6c:	3b0b3a08 	blcc	2cf594 <__ccfg+0x2af5ec>
		setdel = 0;
     d70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		RISE_N_SHINE;
     d74:	3b000013 	blcc	dc8 <AONRTCIntHandler+0x100>
		__pi_new += setdel;
     d78:	0803000a 	stmdaeq	r3, {r1, r3}
		RISE_N_SHINE;
     d7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d80:	00000b39 	andeq	r0, r0, r9, lsr fp
		aux_timer_inactive = 1;
     d84:	3f012e3c 	svccc	0x00012e3c
     d88:	3a0e030c 	bcc	3819c0 <__ccfg+0x361a18>
				if (__pi_systat.ledsts & 0x1)
     d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	110c270b 	tstne	ip, fp, lsl #14
     d94:	40011201 	andmi	r1, r1, r1, lsl #4
				if (__pi_systat.ledsts & 0x2)
     d98:	0013010a 	andseq	r0, r3, sl, lsl #2
     d9c:	00053d00 	andeq	r3, r5, r0, lsl #26
     da0:	0b3a0803 	bleq	e82db4 <__ccfg+0xe62e0c>
				if (__pi_systat.ledsts & 0x8)
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
				__pi_systat.ledblk = 1;
     da8:	06021349 	streq	r1, [r2], -r9, asr #6
     dac:	343e0000 	ldrtcc	r0, [lr], #-0
		if (aux_timer_inactive) {
     db0:	3a080300 	bcc	2019b8 <__ccfg+0x1e1a10>
			cli_aux;
     db4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     dbc:	3f000006 	svccc	0x00000006
     dc0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d10 <AONRTCIntHandler+0x48>
     dc4:	0b3a0e03 	bleq	e845d8 <__ccfg+0xe64630>
     dc8:	0b390b3b 	bleq	e43abc <__ccfg+0xe23b14>
     dcc:	01110c27 	tsteq	r1, r7, lsr #24
     dd0:	0a400112 	beq	1001220 <__ccfg+0xfe1278>
     dd4:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
     dd8:	3a0e0301 	bcc	3819e4 <__ccfg+0x361a3c>
word tci_update_delay_ticks (Boolean force) {
     ddc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	cli_tim;
     de0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     de4:	010b2013 	tsteq	fp, r3, lsl r0
	if (setdel) {
     de8:	41000013 	tstmi	r0, r3, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	0e03012e 	adfeqsp	f0, f3, #0.5
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     df4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     df8:	0b201349 	bleq	805b24 <__ccfg+0x7e5b7c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	31012e42 	tstcc	r1, r2, asr #28
	return NO;
     e04:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			setdel = 0;
     e08:	010a4001 	tsteq	sl, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0c:	43000013 	movwmi	r0, #19
     e10:	13310005 	teqne	r1, #5
}
     e14:	00000602 	andeq	r0, r0, r2, lsl #12
		sti_tim;
     e18:	31003444 	tstcc	r0, r4, asr #8
		return YES;
     e1c:	00060213 	andeq	r0, r6, r3, lsl r2
     e20:	011d4500 	tsteq	sp, r0, lsl #10
     e24:	01111331 	tsteq	r1, r1, lsr r3
     e28:	0b580112 	bleq	1601278 <__ccfg+0x15e12d0>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	0b570b59 	bleq	15c3b98 <__ccfg+0x15a3bf0>
	UARTDisable (UART0_BASE);
     e30:	34460000 	strbcc	r0, [r6], #-0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	00133100 	andseq	r3, r3, r0, lsl #2
	UARTDisable (UART0_BASE);
     e38:	011d4700 	tsteq	sp, r0, lsl #14
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	01521331 	cmpeq	r2, r1, lsr r3
     e40:	0b580655 	bleq	160279c <__ccfg+0x15e27f4>
     e44:	0b570b59 	bleq	15c3bb0 <__ccfg+0x15a3c08>
     e48:	0a480000 	beq	1200e50 <__ccfg+0x11e0ea8>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	11133100 	tstne	r3, r0, lsl #2
     e50:	49000001 	stmdbmi	r0, {r0}
     e54:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	01120111 	tsteq	r2, r1, lsl r1
     e5c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     e60:	00000b57 	andeq	r0, r0, r7, asr fp
	urates [0] = rate;
     e64:	31012e4a 	tstcc	r1, sl, asr #28
}
     e68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e6c:	000a4001 	andeq	r4, sl, r1
     e70:	11010000 	mrsne	r0, (UNDEF: 1)
     e74:	130e2501 	movwne	r2, #58625	; 0xe501
     e78:	1b0e030b 	blne	381aac <__ccfg+0x361b04>
     e7c:	1106550e 	tstne	r6, lr, lsl #10
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	00061001 	andeq	r1, r6, r1
     e84:	00240200 	eoreq	r0, r4, r0, lsl #4
     e88:	0b3e0b0b 	bleq	f83abc <__ccfg+0xf63b14>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	00000e03 	andeq	r0, r0, r3, lsl #28
     e90:	03001603 	movweq	r1, #1539	; 0x603
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	3b0b3a0e 	blcc	2cf6d4 <__ccfg+0x2af72c>
     e98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	__pi_uart_setrate (urates [0], __pi_uart);
     e9c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     ea0:	0b0b0024 	bleq	2c0f38 <__ccfg+0x2a0f90>
     ea4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     ea8:	13050000 	movwne	r0, #20480	; 0x5000
     eac:	0b0e0301 	bleq	381ab8 <__ccfg+0x361b10>
     eb0:	3b0b3a0b 	blcc	2cf6e4 <__ccfg+0x2af73c>
     eb4:	0013010b 	andseq	r0, r3, fp, lsl #2
	switch (operation) {
     eb8:	000d0600 	andeq	r0, sp, r0, lsl #12
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	13490e03 	movtne	r0, #40451	; 0x9e03
     ec0:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     ec4:	0f070000 	svceq	0x00070000
     ec8:	000b0b00 	andeq	r0, fp, r0, lsl #22
     ecc:	00260800 	eoreq	r0, r6, r0, lsl #16
				*buf++ = uart_a_read;
     ed0:	00001349 	andeq	r1, r0, r9, asr #6
     ed4:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
			while (len && uart_a_char_available) {
     ed8:	0a000013 	beq	f2c <ioreq_uart_a+0x74>
     edc:	0b0b000f 	bleq	2c0f20 <__ccfg+0x2a0f78>
     ee0:	00001349 	andeq	r1, r0, r9, asr #6
			if (len != operation) {
     ee4:	0b01130b 	bleq	45b18 <__ccfg+0x25b70>
}
     ee8:	3b0b3a0b 	blcc	2cf71c <__ccfg+0x2af774>
     eec:	010b390b 	tsteq	fp, fp, lsl #18
			uart_a_disable_int;
     ef0:	0c000013 	stceq	0, cr0, [r0], {19}
			if (uart_a_char_available) {
     ef4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				*buf++ = uart_a_read;
     ef8:	0b3b0b3a 	bleq	ec3be8 <__ccfg+0xea3c40>
			uart_a_disable_int;
     efc:	13490b39 	movtne	r0, #39737	; 0x9b39
     f00:	0b0d0b0b 	bleq	343b34 <__ccfg+0x323b8c>
			if (uart_a_char_available) {
     f04:	0b380b0c 	bleq	e03b3c <__ccfg+0xde3b94>
     f08:	0d0d0000 	stceq	0, cr0, [sp, #-0]
				uart_a_enable_int;
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				goto Redo_rx;
     f14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     f1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			return -2;
     f20:	0b3b0b3a 	bleq	ec3c10 <__ccfg+0xea3c68>
     f24:	13490b39 	movtne	r0, #39737	; 0x9b39
				uart_a_write (*buf);
     f28:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     f2c:	010f0000 	mrseq	r0, CPSR
			while (len && uart_a_room_in_tx) {
     f30:	01134901 	tsteq	r3, r1, lsl #18
     f34:	10000013 	andne	r0, r0, r3, lsl r0
     f38:	00000021 	andeq	r0, r0, r1, lsr #32
			if (len != operation) {
     f3c:	03001611 	movweq	r1, #1553	; 0x611
			uart_a_disable_int;
     f40:	3b0b3a0e 	blcc	2cf780 <__ccfg+0x2af7d8>
     f44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (uart_a_room_in_tx) {
     f48:	12000013 	andne	r0, r0, #19
     f4c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
				uart_a_enable_int;
     f50:	00001301 	andeq	r1, r0, r1, lsl #6
     f54:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
				*buf++ = uart_a_read;
     f58:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
			if (uart_a_room_in_tx) {
     f5c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				uart_a_write (*buf);
     f60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f64:	13490b39 	movtne	r0, #39737	; 0x9b39
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     f6c:	15150000 	ldrne	r0, [r5, #-0]
			uart_a_enable_int;
     f70:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     f74:	00130113 	andseq	r0, r3, r3, lsl r1
     f78:	01131600 	tsteq	r3, r0, lsl #12
			return 0;
     f7c:	0b0b0e03 	bleq	2c4790 <__ccfg+0x2a47e8>
			if (len == UART_CNTRL_SETRATE) {
     f80:	0b3b0b3a 	bleq	ec3c70 <__ccfg+0xea3cc8>
				if (__pi_uart_setrate (*((word*)buf),
     f84:	13010b39 	movwne	r0, #6969	; 0x1b39
     f88:	17170000 	ldrne	r0, [r7, -r0]
     f8c:	3a0b0b01 	bcc	2c3b98 <__ccfg+0x2a3bf0>
				syserror (EREQPAR, "uar");
     f90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			syserror (ENOOPER, "uai");
     f94:	0013010b 	andseq	r0, r3, fp, lsl #2
			if (len == UART_CNTRL_GETRATE) {
     f98:	000d1800 	andeq	r1, sp, r0, lsl #16
				return 1;
     f9c:	0b3a0e03 	bleq	e847b0 <__ccfg+0xe64808>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     fa0:	0b390b3b 	bleq	e43c94 <__ccfg+0xe23cec>
			syserror (ENOOPER, "uai");
     fa4:	00001349 	andeq	r1, r0, r9, asr #6
     fa8:	03000d19 	movweq	r0, #3353	; 0xd19
     fac:	3b0b3a08 	blcc	2cf7d4 <__ccfg+0x2af82c>
     fb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fb4:	1a000013 	bne	1008 <UART0IntHandler+0x40>
     fb8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     fbc:	0b3b0b3a 	bleq	ec3cac <__ccfg+0xea3d04>
     fc0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fc4:	00000b38 	andeq	r0, r0, r8, lsr fp
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	0b01131b 	bleq	45c3c <__ccfg+0x25c94>
void UART0IntHandler () {
     fcc:	3b0b3a0b 	blcc	2cf800 <__ccfg+0x2af858>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	010b3905 	tsteq	fp, r5, lsl #18
     fd4:	1c000013 	stcne	0, cr0, [r0], {19}
     fd8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     fdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fe0:	13490b39 	movtne	r0, #39737	; 0x9b39
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	00000b38 	andeq	r0, r0, r8, lsr fp
     fe8:	0301131d 	movweq	r1, #4893	; 0x131d
		RISE_N_SHINE;
     fec:	3a0b0b0e 	bcc	2c3c2c <__ccfg+0x2a3c84>
     ff0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		i_trigger (devevent (UART_A, READ));
     ff4:	0013010b 	andseq	r0, r3, fp, lsl #2
     ff8:	00211e00 	eoreq	r1, r1, r0, lsl #28
     ffc:	0b2f1349 	bleq	bc5d28 <__ccfg+0xba5d80>
    1000:	341f0000 	ldrcc	r0, [pc], #-0	; 1008 <UART0IntHandler+0x40>
    1004:	3a0e0300 	bcc	381c0c <__ccfg+0x361c64>
    1008:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    100c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1010:	2000000a 	andcs	r0, r0, sl
    1014:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; f64 <ioreq_uart_a+0xac>
    1018:	0b3a0e03 	bleq	e8482c <__ccfg+0xe64884>
    101c:	0b39053b 	bleq	e42510 <__ccfg+0xe22568>
    1020:	01110c27 	tsteq	r1, r7, lsr #24
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	0a400112 	beq	1001474 <__ccfg+0xfe14cc>
    1028:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    102c:	030c3f01 	movweq	r3, #52993	; 0xcf01
		i_trigger (devevent (UART_A, WRITE));
    1030:	3b0b3a0e 	blcc	2cf870 <__ccfg+0x2af8c8>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1038:	1113490c 	tstne	r3, ip, lsl #18
		RISE_N_SHINE;
    103c:	40011201 	andmi	r1, r1, r1, lsl #4
    1040:	0013010a 	andseq	r0, r3, sl, lsl #2
    1044:	00052200 	andeq	r2, r5, r0, lsl #4
		i_trigger (devevent (UART_A, WRITE));
    1048:	0b3a0803 	bleq	e8305c <__ccfg+0xe630b4>
    104c:	0b39053b 	bleq	e42540 <__ccfg+0xe22598>
    1050:	06021349 	streq	r1, [r2], -r9, asr #6
    1054:	1d230000 	stcne	0, cr0, [r3, #-0]
    1058:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    105c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1060:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1064:	2400000b 	strcs	r0, [r0], #-11
    1068:	13310005 	teqne	r1, #5
    106c:	00000602 	andeq	r0, r0, r2, lsl #12
    1070:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
}
    1074:	26000006 	strcs	r0, [r0], -r6
    1078:	13310034 	teqne	r1, #52	; 0x34
    107c:	00000602 	andeq	r0, r0, r2, lsl #12
    1080:	3f012e27 	svccc	0x00012e27
    1084:	3a0e030c 	bcc	381cbc <__ccfg+0x361d14>
void __buttons_setirq (int val) {
    1088:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	110c270b 	tstne	ip, fp, lsl #14
    1090:	40011201 	andmi	r1, r1, r1, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	0013010a 	andseq	r0, r3, sl, lsl #2
    1098:	00342800 	eorseq	r2, r4, r0, lsl #16
    109c:	0b3a0803 	bleq	e830b0 <__ccfg+0xe63108>
		bn = BUTTON_GPIO (__button_list [i]);
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10a4:	06021349 	streq	r1, [r2], -r9, asr #6
    10a8:	34290000 	strtcc	r0, [r9], #-0
    10ac:	3a080300 	bcc	201cb4 <__ccfg+0x1e1d0c>
    10b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    10b8:	00342a00 	eorseq	r2, r4, r0, lsl #20
}
    10bc:	0b3a0803 	bleq	e830d0 <__ccfg+0xe63128>
    10c0:	0b39053b 	bleq	e425b4 <__ccfg+0xe2260c>
    10c4:	0a021349 	beq	85df0 <__ccfg+0x65e48>
    10c8:	052b0000 	streq	r0, [fp, #-0]!
void __pinlist_setirq (int val) {
    10cc:	3a0e0300 	bcc	381cd4 <__ccfg+0x361d2c>
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	2c000006 	stccs	0, cr0, [r0], {6}
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 102c <UART0IntHandler+0x64>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10e0:	0b3a0e03 	bleq	e848f4 <__ccfg+0xe6494c>
    10e4:	0b39053b 	bleq	e425d8 <__ccfg+0xe22630>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e8:	13490c27 	movtne	r0, #39975	; 0x9c27
    10ec:	13010b20 	movwne	r0, #6944	; 0x1b20
    10f0:	052d0000 	streq	r0, [sp, #-0]!
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	3a0e0300 	bcc	381cfc <__ccfg+0x361d54>
}
    10f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10fc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1100:	00052e00 	andeq	r2, r5, r0, lsl #28
    1104:	0b3a0803 	bleq	e83118 <__ccfg+0xe63170>
void GPIOIntHandler () {
    1108:	0b39053b 	bleq	e425fc <__ccfg+0xe22654>
if (buttons_int) {
    110c:	00001349 	andeq	r1, r0, r9, asr #6
    1110:	11010b2f 	tstne	r1, pc, lsr #22
	buttons_disable ();
    1114:	00011201 	andeq	r1, r1, r1, lsl #4
    1118:	00343000 	eorseq	r3, r4, r0
	i_trigger ((aword)&__button_list);
    111c:	0b3a0e03 	bleq	e84930 <__ccfg+0xe64988>
    1120:	0b39053b 	bleq	e42614 <__ccfg+0xe2266c>
    1124:	0a021349 	beq	85e50 <__ccfg+0x65ea8>
    1128:	0a310000 	beq	c41130 <__ccfg+0xc21188>
    112c:	3a0e0300 	bcc	381d34 <__ccfg+0x361d8c>
    1130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1134:	0001110b 	andeq	r1, r1, fp, lsl #2
    1138:	011d3200 	tsteq	sp, r0, lsl #4
    113c:	01111331 	tsteq	r1, r1, lsr r3
    1140:	0b580112 	bleq	1601590 <__ccfg+0x15e15e8>
    1144:	0b570559 	bleq	15c26b0 <__ccfg+0x15a2708>
	RISE_N_SHINE;
    1148:	05330000 	ldreq	r0, [r3, #-0]!
    114c:	00133100 	andseq	r3, r3, r0, lsl #2
    1150:	00053400 	andeq	r3, r5, r0, lsl #8
if (pin_sensor_int) {
    1154:	0b3a0803 	bleq	e83168 <__ccfg+0xe631c0>
    1158:	0b39053b 	bleq	e4264c <__ccfg+0xe226a4>
	i_trigger ((aword)(&__input_pins));
    115c:	0a021349 	beq	85e88 <__ccfg+0x65ee0>
    1160:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
    1164:	36000000 	strcc	r0, [r0], -r0
    1168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    116c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1170:	13490b39 	movtne	r0, #39737	; 0x9b39
    1174:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
    1178:	3a080301 	bcc	201d84 <__ccfg+0x1e1ddc>
    117c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1180:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1184:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	__pinsen_disable_and_clear;
    1188:	010a4001 	tsteq	sl, r1
	RISE_N_SHINE;
    118c:	38000013 	stmdacc	r0, {r0, r1, r4}
    1190:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    1194:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1198:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    119c:	01120111 	tsteq	r2, r1, lsl r1
    11a0:	13010a40 	movwne	r0, #6720	; 0x1a40
    11a4:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
    11a8:	3a0e0301 	bcc	381db4 <__ccfg+0x361e0c>
void system_init () {
    11ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	200c270b 	andcs	r2, ip, fp, lsl #14
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	0013010b 	andseq	r0, r3, fp, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	00053a00 	andeq	r3, r5, r0, lsl #20
    11bc:	0b3a0803 	bleq	e831d0 <__ccfg+0xe63228>
    11c0:	0b390b3b 	bleq	e43eb4 <__ccfg+0xe23f0c>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	00001349 	andeq	r1, r0, r9, asr #6
    11c8:	03012e3b 	movweq	r2, #7739	; 0x1e3b
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	3b0b3a0e 	blcc	2cfa0c <__ccfg+0x2afa64>
    11d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    11d4:	2013490c 	andscs	r4, r3, ip, lsl #18
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11dc:	00343c00 	eorseq	r3, r4, r0, lsl #24
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11e0:	0b3a0803 	bleq	e831f4 <__ccfg+0xe6324c>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e4:	0b390b3b 	bleq	e43ed8 <__ccfg+0xe23f30>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ec:	03012e3d 	movweq	r2, #7741	; 0x1e3d
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	3b0b3a08 	blcc	2cfa18 <__ccfg+0x2afa70>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	010b200c 	tsteq	fp, ip
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    1200:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1204:	01120111 	tsteq	r2, r1, lsl r1
    1208:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (port_confs [i] & 0x80)
    120c:	053f0000 	ldreq	r0, [pc, #-0]!	; 1214 <system_init+0x68>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	02133100 	andseq	r3, r3, #0, 2
    1214:	4000000a 	andmi	r0, r0, sl
		if (port_confs [i] & 0x40)
    1218:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	01120111 	tsteq	r2, r1, lsl r1
    1220:	0b590b58 	bleq	1643f88 <__ccfg+0x1623fe0>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	00000b57 	andeq	r0, r0, r7, asr fp
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1228:	31011d41 	tstcc	r1, r1, asr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	all_leds_blink;
    1230:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1234:	000b570b 	andeq	r5, fp, fp, lsl #14
    1238:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
    123c:	01111331 	tsteq	r1, r1, lsr r3
    1240:	0a400112 	beq	1001690 <__ccfg+0xfe16e8>
    1244:	34430000 	strbcc	r0, [r3], #-0
    1248:	00133100 	andseq	r3, r3, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	11010000 	mrsne	r0, (UNDEF: 1)
    1250:	130e2501 	movwne	r2, #58625	; 0xe501
    1254:	1b0e030b 	blne	381e88 <__ccfg+0x361ee0>
    1258:	1106550e 	tstne	r6, lr, lsl #10
    125c:	00061001 	andeq	r1, r6, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	00240200 	eoreq	r0, r4, r0, lsl #4
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	0b3e0b0b 	bleq	f83e98 <__ccfg+0xf63ef0>
    1268:	00000e03 	andeq	r0, r0, r3, lsl #28
	IntEnable (INT_AON_RTC_COMB);
    126c:	03001603 	movweq	r1, #1539	; 0x603
    1270:	3b0b3a0e 	blcc	2cfab0 <__ccfg+0x2afb08>
    1274:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	__pi_malloc_init ();
    1278:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	0b0b0024 	bleq	2c1314 <__ccfg+0x2a136c>
    1280:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1284:	0f050000 	svceq	0x00050000
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    128c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1290:	13490026 	movtne	r0, #36902	; 0x9026
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	15070000 	strne	r0, [r7, #-0]
    1298:	000c2700 	andeq	r2, ip, r0, lsl #14
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	00340800 	eorseq	r0, r4, r0, lsl #16
    12a0:	0b3a0e03 	bleq	e84ab4 <__ccfg+0xe64b0c>
    12a4:	0b390b3b 	bleq	e43f98 <__ccfg+0xe23ff0>
	urates [0] = UART_RATE / 100;
    12a8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 118c <GPIOIntHandler+0x84>
    12ac:	00000c3c 	andeq	r0, r0, ip, lsr ip
	reinit_uart ();
    12b0:	49010109 	stmdbmi	r1, {r0, r3, r8}
	EXTRA_INITIALIZERS;
    12b4:	00130113 	andseq	r0, r3, r3, lsl r1
    12b8:	00210a00 	eoreq	r0, r1, r0, lsl #20
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	0b2f1349 	bleq	bc5fe8 <__ccfg+0xba6040>
    12c0:	340b0000 	strcc	r0, [fp], #-0
    12c4:	3a0e0300 	bcc	381ecc <__ccfg+0x361f24>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12cc:	3f13490b 	svccc	0x0013490b
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	000a020c 	andeq	r0, sl, ip, lsl #4
    12d4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
			devinit [i] . init (devinit [i] . param);
    12d8:	0b3a0e03 	bleq	e84aec <__ccfg+0xe64b44>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	0b39053b 	bleq	e427d0 <__ccfg+0xe22828>
    12e0:	01110c27 	tsteq	r1, r7, lsr #24
    12e4:	0a400112 	beq	1001734 <__ccfg+0xfe178c>
	IntEnable (INT_UART0_COMB);
    12e8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    12ec:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
    12f0:	3b0b3a0e 	blcc	2cfb30 <__ccfg+0x2afb88>
	tci_run_auxiliary_timer ();
    12f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		diag ("");
    12f8:	1201110c 	andne	r1, r1, #12, 2
    12fc:	000a4001 	andeq	r4, sl, r1
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1300:	00340e00 	eorseq	r0, r4, r0, lsl #28
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	0b3a0e03 	bleq	e84b18 <__ccfg+0xe64b70>
		diag ("Leftover RAM: %d bytes",
    1308:	0b390b3b 	bleq	e43ffc <__ccfg+0xe24054>
    130c:	06021349 	streq	r1, [r2], -r9, asr #6
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
    1314:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1318:	0e030b13 	vmoveq.32	d3[0], r0
    131c:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
    1320:	24020000 	strcs	r0, [r2], #-0
    1324:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1328:	000e030b 	andeq	r0, lr, fp, lsl #6
    132c:	00160300 	andseq	r0, r6, r0, lsl #6
    1330:	0b3a0e03 	bleq	e84b44 <__ccfg+0xe64b9c>
    1334:	0b390b3b 	bleq	e44028 <__ccfg+0xe24080>
    1338:	00001349 	andeq	r1, r0, r9, asr #6
    133c:	0b002404 	bleq	a354 <__exidx_end+0x4878>
    1340:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1344:	05000008 	streq	r0, [r0, #-8]
    1348:	0b0b0113 	bleq	2c179c <__ccfg+0x2a17f4>
    134c:	0b3b0b3a 	bleq	ec403c <__ccfg+0xea4094>
    1350:	13010b39 	movwne	r0, #6969	; 0x1b39
    1354:	0d060000 	stceq	0, cr0, [r6, #-0]
    1358:	3a0e0300 	bcc	381f60 <__ccfg+0x361fb8>
    135c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1360:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	0700000b 	streq	r0, [r0, -fp]
    1368:	13490026 	movtne	r0, #36902	; 0x9026
    136c:	34080000 	strcc	r0, [r8], #-0
    1370:	3a0e0300 	bcc	381f78 <__ccfg+0x361fd0>
    1374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1378:	3f13490b 	svccc	0x0013490b
    137c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1380:	00350900 	eorseq	r0, r5, r0, lsl #18
}
    1384:	00001349 	andeq	r1, r0, r9, asr #6
__attribute__ ((noreturn)) void __pi_release () {
    1388:	03000d0a 	movweq	r0, #3338	; 0xd0a
    138c:	3b0b3a0e 	blcc	2cfbcc <__ccfg+0x2afc24>
    1390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1394:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	check_stack_overflow;
    1398:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    139c:	0b00000b 	bleq	13d0 <__pi_release+0x48>
    13a0:	0b0b000f 	bleq	2c13e4 <__ccfg+0x2a143c>
	update_n_wake (MAX_WORD, NO);
    13a4:	00001349 	andeq	r1, r0, r9, asr #6
    13a8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    13ac:	00130113 	andseq	r0, r3, r3, lsl r1
	for_all_tasks (__pi_curr) {
    13b0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    13b4:	160e0000 	strne	r0, [lr], -r0
    13b8:	3a0e0300 	bcc	381fc0 <__ccfg+0x362018>
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__SLEEP;
    13c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    13c4:	01150f00 	tsteq	r5, r0, lsl #30
    13c8:	13010c27 	movwne	r0, #7207	; 0x1c27
    13cc:	05100000 	ldreq	r0, [r0, #-0]
	system_event_count ++;
    13d0:	00134900 	andseq	r4, r3, r0, lsl #18
    13d4:	00341100 	eorseq	r1, r4, r0, lsl #2
	switch (__pi_systat.effpdm) {
    13d8:	0b3a0e03 	bleq	e84bec <__ccfg+0xe64c44>
    13dc:	0b39053b 	bleq	e428d0 <__ccfg+0xe22928>
    13e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 12c4 <system_init+0x118>
    13e4:	00000c3c 	andeq	r0, r0, ip, lsr ip
			__WFI ();
    13e8:	0b011312 	bleq	46038 <__ccfg+0x26090>
    13ec:	3b0b3a0b 	blcc	2cfc20 <__ccfg+0x2afc78>
    13f0:	010b3905 	tsteq	fp, r5, lsl #18
	check_stack_overflow;
    13f4:	13000013 	movwne	r0, #19
    13f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1400:	13490b39 	movtne	r0, #39737	; 0x9b39
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	00000b38 	andeq	r0, r0, r8, lsr fp
			goto Redo;
    1408:	03011314 	movweq	r1, #4884	; 0x1314
	for_all_tasks (__pi_curr) {
    140c:	3a0b0b0e 	bcc	2c404c <__ccfg+0x2a40a4>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	0013010b 	andseq	r0, r3, fp, lsl #2
    1418:	00211500 	eoreq	r1, r1, r0, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141c:	0b2f1349 	bleq	bc6148 <__ccfg+0xba61a0>
    1420:	34160000 	ldrcc	r0, [r6], #-0
    1424:	3a134700 	bcc	4d302c <__ccfg+0x4b3084>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    142c:	000a020b 	andeq	r0, sl, fp, lsl #4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	11010000 	mrsne	r0, (UNDEF: 1)
    1434:	130e2501 	movwne	r2, #58625	; 0xe501
			__WFI ();
    1438:	1b0e030b 	blne	38206c <__ccfg+0x3620c4>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	1106550e 	tstne	r6, lr, lsl #10
    1440:	00061001 	andeq	r1, r6, r1
}
    1444:	00240200 	eoreq	r0, r4, r0, lsl #4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1448:	0b3e0b0b 	bleq	f8407c <__ccfg+0xf640d4>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144c:	00000e03 	andeq	r0, r0, r3, lsl #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1450:	03001603 	movweq	r1, #1539	; 0x603
    1454:	3b0b3a0e 	blcc	2cfc94 <__ccfg+0x2afcec>
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1458:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    145c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1460:	0b0b0024 	bleq	2c14f8 <__ccfg+0x2a1550>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1464:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1468:	26050000 	strcs	r0, [r5], -r0
    146c:	00134900 	andseq	r4, r3, r0, lsl #18
    1470:	00350600 	eorseq	r0, r5, r0, lsl #12
    1474:	00001349 	andeq	r1, r0, r9, asr #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	0b000f07 	bleq	509c <__pi_hex_enc_table+0x6f>
    147c:	0013490b 	andseq	r4, r3, fp, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	01130800 	tsteq	r3, r0, lsl #16
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1484:	0b3a0b0b 	bleq	e840b8 <__ccfg+0xe64110>
    1488:	0b390b3b 	bleq	e4417c <__ccfg+0xe241d4>
    148c:	00001301 	andeq	r1, r0, r1, lsl #6
    1490:	03000d09 	movweq	r0, #3337	; 0xd09
    1494:	3b0b3a0e 	blcc	2cfcd4 <__ccfg+0x2afd2c>
			SysCtrlSetRechargeBeforePowerDown
    1498:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    149c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14a0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    14a4:	0a00000b 	beq	14d8 <__pi_release+0x150>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b4:	00000b38 	andeq	r0, r0, r8, lsr fp
    14b8:	0300340b 	movweq	r3, #1035	; 0x40b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	3b0b3a0e 	blcc	2cfcfc <__ccfg+0x2afd54>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    14c4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    14c8:	0c00000c 	stceq	0, cr0, [r0], {12}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14cc:	13490101 	movtne	r0, #37121	; 0x9101
			while (!(AONWUCPowerStatusGet () &
    14d0:	00001301 	andeq	r1, r0, r1, lsl #6
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	0000210d 	andeq	r2, r0, sp, lsl #2
    14d8:	00160e00 	andseq	r0, r6, r0, lsl #28
    14dc:	0b3a0e03 	bleq	e84cf0 <__ccfg+0xe64d48>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14e0:	0b39053b 	bleq	e429d4 <__ccfg+0xe22a2c>
    14e4:	00001349 	andeq	r1, r0, r9, asr #6
    14e8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    14ec:	0013010c 	andseq	r0, r3, ip, lsl #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	00051000 	andeq	r1, r5, r0
    14f4:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    14f8:	03003411 	movweq	r3, #1041	; 0x411
    14fc:	3b0b3a0e 	blcc	2cfd3c <__ccfg+0x2afd94>
			SysCtrlAdjustRechargeAfterPowerDown ();
    1500:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			reinit_uart ();
    1504:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1508:	1200000c 	andne	r0, r0, #12
    150c:	0b0b0113 	bleq	2c1960 <__ccfg+0x2a19b8>
}
    1510:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1514:	13010b39 	movwne	r0, #6969	; 0x1b39
    1518:	0d130000 	ldceq	0, cr0, [r3, #-0]
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	3a0e0300 	bcc	382124 <__ccfg+0x36217c>
    1520:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1524:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	1400000b 	strne	r0, [r0], #-11
    152c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1530:	0b3a0b0b 	bleq	e84164 <__ccfg+0xe641bc>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1534:	0b39053b 	bleq	e42a28 <__ccfg+0xe22a80>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1544:	00341600 	eorseq	r1, r4, r0, lsl #12
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1548:	0b3a1347 	bleq	e8626c <__ccfg+0xe662c4>
    154c:	0b390b3b 	bleq	e44240 <__ccfg+0xe24298>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1550:	00000a02 	andeq	r0, r0, r2, lsl #20
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1554:	3f012e17 	svccc	0x00012e17
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1558:	3a0e030c 	bcc	382190 <__ccfg+0x3621e8>
    155c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			PRCMPowerDomainOff (
    1560:	110c270b 	tstne	ip, fp, lsl #14
    1564:	40011201 	andmi	r1, r1, r1, lsl #4
	__SLEEP;
    1568:	0013010a 	andseq	r0, r3, sl, lsl #2
    156c:	00051800 	andeq	r1, r5, r0, lsl #16
  __ASM volatile ("cpsie i" : : : "memory");
    1570:	0b3a0803 	bleq	e83584 <__ccfg+0xe635dc>
	goto Redo;
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
    1578:	06021349 	streq	r1, [r2], -r9, asr #6
    157c:	05190000 	ldreq	r0, [r9, #-0]
    1580:	3a0e0300 	bcc	382188 <__ccfg+0x3621e0>
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1588:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    158c:	1a000006 	bne	15ac <__pi_release+0x224>
    1590:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1594:	0b3b0b3a 	bleq	ec4284 <__ccfg+0xea42dc>
    1598:	13490b39 	movtne	r0, #39737	; 0x9b39
    159c:	341b0000 	ldrcc	r0, [fp], #-0
    15a0:	3a080300 	bcc	2021a8 <__ccfg+0x1e2200>
    15a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15ac:	1c000006 	stcne	0, cr0, [r0], {6}
    15b0:	1331001d 	teqne	r1, #29
    15b4:	01120111 	tsteq	r2, r1, lsl r1
    15b8:	0b590b58 	bleq	1644320 <__ccfg+0x1624378>
    15bc:	00000b57 	andeq	r0, r0, r7, asr fp
    15c0:	31011d1d 	tstcc	r1, sp, lsl sp
    15c4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    15c8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    15cc:	000b570b 	andeq	r5, fp, fp, lsl #14
    15d0:	00051e00 	andeq	r1, r5, r0, lsl #28
    15d4:	06021331 			; <UNDEFINED> instruction: 0x06021331
    15d8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    15dc:	030c3f00 	movweq	r3, #52992	; 0xcf00
	cli_tim;
    15e0:	3b0b3a0e 	blcc	2cfe20 <__ccfg+0x2afe78>
    15e4:	110b390b 	tstne	fp, fp, lsl #18
    15e8:	40011201 	andmi	r1, r1, r1, lsl #4
	diag ("PicOS halted");
    15ec:	2000000a 	andcs	r0, r0, sl
	mdelay (500);
    15f0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
	setpowermode (2);
    15f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	__PCB = NULL;
    15fc:	00000b20 	andeq	r0, r0, r0, lsr #22
	release;
    1600:	03012e21 	movweq	r2, #7713	; 0x1e21
    1604:	3b0b3a0e 	blcc	2cfe44 <__ccfg+0x2afe9c>
    1608:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    160c:	2013490c 	andscs	r4, r3, ip, lsl #18
int main (void) {
    1610:	2200000b 	andcs	r0, r0, #11
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1618:	0b3b0b3a 	bleq	ec4308 <__ccfg+0xea4360>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	13490b39 	movtne	r0, #39737	; 0x9b39
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	01000000 	mrseq	r0, (UNDEF: 0)
	system_init ();
    1624:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	tcv_init ();
    1628:	0e030b13 	vmoveq.32	d3[0], r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    162c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1630:	06100111 			; <UNDEFINED> instruction: 0x06100111
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	24020000 	strcs	r0, [r2], #-0
    1638:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    163c:	000e030b 	andeq	r0, lr, fp, lsl #6
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1640:	00160300 	andseq	r0, r6, r0, lsl #6
    1644:	0b3a0e03 	bleq	e84e58 <__ccfg+0xe64eb0>
	delay (16, 0);
    1648:	0b390b3b 	bleq	e4433c <__ccfg+0xe24394>
    164c:	00001349 	andeq	r1, r0, r9, asr #6
    1650:	0b002404 	bleq	a668 <__exidx_end+0x4b8c>
	__pi_release ();
    1654:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1658:	05000008 	streq	r0, [r0, #-8]
    165c:	13490026 	movtne	r0, #36902	; 0x9026
    1660:	35060000 	strcc	r0, [r6, #-0]
    1664:	00134900 	andseq	r4, r3, r0, lsl #18
    1668:	01130700 	tsteq	r3, r0, lsl #14
    166c:	0b3a0b0b 	bleq	e842a0 <__ccfg+0xe642f8>
static void killev (__pi_pcb_t *pid) {
    1670:	0b390b3b 	bleq	e44364 <__ccfg+0xe243bc>
	wfun = (aword)(pid->code);
    1674:	00001301 	andeq	r1, r0, r1, lsl #6
	for_all_tasks (i) {
    1678:	03000d08 	movweq	r0, #3336	; 0xd08
		for (j = 0; j < nevents (i); j++) {
    167c:	3b0b3a0e 	blcc	2cfebc <__ccfg+0x2aff14>
    1680:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1684:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			    || i->Events [j] . Event == wfun
    1688:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		for (j = 0; j < nevents (i); j++) {
    168c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
			if (i->Events [j] . Event == (aword)pid
    1690:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
				wakeupev (i, j);
    169c:	00000b38 	andeq	r0, r0, r8, lsr fp
    16a0:	0300340a 	movweq	r3, #1034	; 0x40a
	for_all_tasks (i) {
    16a4:	3b0b3a0e 	blcc	2cfee4 <__ccfg+0x2aff3c>
}
    16a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16ac:	3c0c3f13 	stccc	15, cr3, [ip], {19}
static void qfree (aword *ch) {
    16b0:	0b00000c 	bleq	16e8 <qfree+0x3c>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b4:	0b0b000f 	bleq	2c16f8 <__ccfg+0x2a1750>
	cc = (aword*)(mpools + MA_NP);
    16b8:	00001349 	andeq	r1, r0, r9, asr #6
	m_setnextp (ch, chunk);
    16bc:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	m_setnextp (cc, ch);
    16c0:	00130113 	andseq	r0, r3, r3, lsl r1
}
    16c4:	00210d00 	eoreq	r0, r1, r0, lsl #26
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16c8:	160e0000 	strne	r0, [lr], -r0
    16cc:	3a0e0300 	bcc	3822d4 <__ccfg+0x36232c>
    16d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			m_setnextp (cc, m_nextp (chunk));
    16d4:	0013490b 	andseq	r4, r3, fp, lsl #18
			m_size (chunk) += m_hdrlen + m_size (ch);
    16d8:	01150f00 	tsteq	r5, r0, lsl #30
    16dc:	13010c27 	movwne	r0, #7207	; 0x1c27
    16e0:	05100000 	ldreq	r0, [r0, #-0]
    16e4:	00134900 	andseq	r4, r3, r0, lsl #18
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16e8:	00341100 	eorseq	r1, r4, r0, lsl #2
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	0b3a0e03 	bleq	e84f00 <__ccfg+0xe64f58>
    16f0:	0b39053b 	bleq	e42be4 <__ccfg+0xe22c3c>
    16f4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 15d8 <__pi_release+0x250>
			m_setnextp (cc, m_nextp (chunk));
    16f8:	00000c3c 	andeq	r0, r0, ip, lsr ip
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	0b011312 	bleq	4634c <__ccfg+0x263a4>
    1700:	3b0b3a0b 	blcc	2cff34 <__ccfg+0x2aff8c>
    1704:	010b3905 	tsteq	fp, r5, lsl #18
    1708:	13000013 	movwne	r0, #19
    170c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1710:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (m_size (chunk) >= m_size (ch))
    1714:	13490b39 	movtne	r0, #39737	; 0x9b39
    1718:	00000b38 	andeq	r0, r0, r8, lsr fp
    171c:	03011314 	movweq	r1, #4884	; 0x1314
		chunk = m_nextp (chunk))
    1720:	3a0b0b0e 	bcc	2c4360 <__ccfg+0x2a43b8>
    1724:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1728:	0013010b 	andseq	r0, r3, fp, lsl #2
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	00211500 	eoreq	r1, r1, r0, lsl #10
	diag_wait (a);
    1730:	0b2f1349 	bleq	bc645c <__ccfg+0xba64b4>
	diag_wchar (c, a);
    1734:	34160000 	ldrcc	r0, [r6], #-0
    1738:	3a0e0300 	bcc	382340 <__ccfg+0x362398>
}
    173c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1740:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	syserror (ESTATE, "state");
    1744:	1700000a 	strne	r0, [r0, -sl]
    1748:	13470034 	movtne	r0, #28724	; 0x7034
    174c:	0b3b0b3a 	bleq	ec443c <__ccfg+0xea4494>
    1750:	0a020b39 	beq	8443c <__ccfg+0x64494>
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
void utimer_add (address ut) {
    1758:	030c3f01 	movweq	r3, #52993	; 0xcf01
    175c:	3b0b3a0e 	blcc	2cff9c <__ccfg+0x2afff4>
		if (__pi_utims [i] == NULL)
    1760:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	1201110c 	andne	r1, r1, #12, 2
    1768:	010a4001 	tsteq	sl, r1
		syserror (ERESOURCE, "ut a");
    176c:	19000013 	stmdbne	r0, {r0, r1, r4}
	__pi_utims [i] = ut;
    1770:	08030005 	stmdaeq	r3, {r0, r2}
}
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
    177c:	00000602 	andeq	r0, r0, r2, lsl #12
	*t = v;
    1780:	0300051a 	movweq	r0, #1306	; 0x51a
	TCI_RUN_AUXILIARY_TIMER;
    1784:	3b0b3a0e 	blcc	2cffc4 <__ccfg+0x2b001c>
void update_n_wake (word min, Boolean force) {
    1788:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	00060213 	andeq	r0, r6, r3, lsl r2
    1790:	000a1b00 	andeq	r1, sl, r0, lsl #22
    1794:	0b3a0e03 	bleq	e84fa8 <__ccfg+0xe65000>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1798:	0b390b3b 	bleq	e4448c <__ccfg+0xe244e4>
    179c:	00000111 	andeq	r0, r0, r1, lsl r1
    17a0:	31011d1c 	tstcc	r1, ip, lsl sp
    17a4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    17a8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    17ac:	010b570b 	tsteq	fp, fp, lsl #14
    17b0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    17b4:	13310005 	teqne	r1, #5
    17b8:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    17bc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    17c0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    17c4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    17c8:	1f00000b 	svcne	0x0000000b
		for_all_tasks (i) {
    17cc:	0e03012e 	adfeqsp	f0, f3, #0.5
	__pi_mintk = znew + min;
    17d0:	0b3b0b3a 	bleq	ec44c0 <__ccfg+0xea4518>
    17d4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (!twaiting (i))
    17d8:	0b201349 	bleq	806504 <__ccfg+0x7e655c>
    17dc:	05200000 	streq	r0, [r0, #-0]!
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17e0:	3a0e0300 	bcc	3823e8 <__ccfg+0x362440>
    17e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e8:	0013490b 	andseq	r4, r3, fp, lsl #18
    17ec:	11010000 	mrsne	r0, (UNDEF: 1)
    17f0:	130e2501 	movwne	r2, #58625	; 0xe501
    17f4:	1b0e030b 	blne	382428 <__ccfg+0x362480>
    17f8:	1106550e 	tstne	r6, lr, lsl #10
    17fc:	00061001 	andeq	r1, r6, r1
    1800:	00240200 	eoreq	r0, r4, r0, lsl #4
    1804:	0b3e0b0b 	bleq	f84438 <__ccfg+0xf64490>
    1808:	00000e03 	andeq	r0, r0, r3, lsl #28
    180c:	03001603 	movweq	r1, #1539	; 0x603
				wakeuptm (i);
    1810:	3b0b3a0e 	blcc	2d0050 <__ccfg+0x2b00a8>
    1814:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		for_all_tasks (i) {
    1818:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
				d = i->Timer - znew;
    181c:	0b0b0024 	bleq	2c18b4 <__ccfg+0x2a190c>
    1820:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1824:	26050000 	strcs	r0, [r5], -r0
		if ((word)(__pi_mintk - znew) < min) 
    1828:	00134900 	andseq	r4, r3, r0, lsl #18
    182c:	00350600 	eorseq	r0, r5, r0, lsl #12
    1830:	00001349 	andeq	r1, r0, r9, asr #6
	__pi_old = znew;
    1834:	0b011307 	bleq	46458 <__ccfg+0x264b0>
}
    1838:	3b0b3a0b 	blcc	2d006c <__ccfg+0x2b00c4>
	TCI_RUN_DELAY_TIMER;
    183c:	010b390b 	tsteq	fp, fp, lsl #18
}
    1840:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1844:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1848:	0b3b0b3a 	bleq	ec4538 <__ccfg+0xea4590>
    184c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1850:	0b0d0b0b 	bleq	344484 <__ccfg+0x3244dc>
void proceed (word state) {
    1854:	0b380b0c 	bleq	e0448c <__ccfg+0xde44e4>
	prcdstate (__pi_curr, state);
    1858:	0d090000 	stceq	0, cr0, [r9, #-0]
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
	release;
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1864:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
void __pi_wait (aword event, word state) {
    1868:	0a00000b 	beq	189c <__pi_trigger>
	sint j = nevents (__pi_curr);
    186c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	0b3b0b3a 	bleq	ec4560 <__ccfg+0xea45b8>
    1874:	13490b39 	movtne	r0, #39737	; 0x9b39
    1878:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		syserror (ENEVENTS, "sw");
    187c:	0f0b0000 	svceq	0x000b0000
    1880:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	setestate (__pi_curr->Events [j], state, event);
    1884:	0c000013 	stceq	0, cr0, [r0], {19}
	incwait (__pi_curr);
    1888:	13490101 	movtne	r0, #37121	; 0x9101
	setestate (__pi_curr->Events [j], state, event);
    188c:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1890:	0000210d 	andeq	r2, r0, sp, lsl #2
    1894:	00160e00 	andseq	r0, r6, r0, lsl #28
    1898:	0b3a0e03 	bleq	e850ac <__ccfg+0xe65104>
void __pi_trigger (aword event) {
    189c:	0b39053b 	bleq	e42d90 <__ccfg+0xe22de8>
	for_all_tasks (i) {
    18a0:	00001349 	andeq	r1, r0, r9, asr #6
		for (j = 0; j < nevents (i); j++) {
    18a4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    18a8:	0013010c 	andseq	r0, r3, ip, lsl #2
    18ac:	00051000 	andeq	r1, r5, r0
    18b0:	00001349 	andeq	r1, r0, r9, asr #6
			if (i->Events [j] . Event == event) {
    18b4:	03003411 	movweq	r3, #1041	; 0x411
    18b8:	3b0b3a0e 	blcc	2d00f8 <__ccfg+0x2b0150>
    18bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				wakeupev (i, j);
    18c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    18c4:	1200000c 	andne	r0, r0, #12
	for_all_tasks (i) {
    18c8:	0b0b0113 	bleq	2c1d1c <__ccfg+0x2a1d74>
}
    18cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
aword __pi_join (aword pid, word st) {
    18d0:	13010b39 	movwne	r0, #6969	; 0x1b39
	for_all_tasks (i) {
    18d4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    18d8:	3a0e0300 	bcc	3824e0 <__ccfg+0x362538>
	return 0;
    18dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((aword)i == pid) {
    18e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			__pi_wait (pid, st);
    18e4:	1400000b 	strne	r0, [r0], #-11
}
    18e8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	for_all_tasks (i) {
    18ec:	0b3a0b0b 	bleq	e84520 <__ccfg+0xe64578>
    18f0:	0b39053b 	bleq	e42de4 <__ccfg+0xe22e3c>
void delay (word d, word state) {
    18f4:	00001301 	andeq	r1, r0, r1, lsl #6
	settstate (__pi_curr, state);
    18f8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    18fc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1900:	00341600 	eorseq	r1, r4, r0, lsl #12
    1904:	0b3a0e03 	bleq	e85118 <__ccfg+0xe65170>
	update_n_wake (d, YES);
    1908:	0b390b3b 	bleq	e445fc <__ccfg+0xe24654>
    190c:	0a021349 	beq	86638 <__ccfg+0x66690>
	__pi_curr->Timer = __pi_old + d;
    1910:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    1914:	030c3f00 	movweq	r3, #52992	; 0xcf00
	inctimer (__pi_curr);
    1918:	3b0b3a0e 	blcc	2d0158 <__ccfg+0x2b01b0>
    191c:	110b390b 	tstne	fp, fp, lsl #18
    1920:	40011201 	andmi	r1, r1, r1, lsl #4
}
    1924:	1800000a 	stmdane	r0, {r1, r3}
    1928:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1878 <__pi_wait+0x10>
	if (fun == NULL)
    192c:	0b3a0e03 	bleq	e85140 <__ccfg+0xe65198>
		return (int) __pi_curr;
    1930:	0b390b3b 	bleq	e44624 <__ccfg+0xe2467c>
    1934:	13490c27 	movtne	r0, #39975	; 0x9c27
	for_all_tasks (i)
    1938:	01120111 	tsteq	r2, r1, lsl r1
}
    193c:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (i->code == fun)
    1940:	05190000 	ldreq	r0, [r9, #-0]
	for_all_tasks (i)
    1944:	3a080300 	bcc	20254c <__ccfg+0x1e25a4>
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    194c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
int __pi_strlen (const char *s) {
    1950:	1a000006 	bne	1970 <__pi_strncpy+0x2>
	for (i = 0; *(s+i) != '\0'; i++);
    1954:	08030005 	stmdaeq	r3, {r0, r2}
}
    1958:	0b3b0b3a 	bleq	ec4648 <__ccfg+0xea46a0>
	for (i = 0; *(s+i) != '\0'; i++);
    195c:	13490b39 	movtne	r0, #39737	; 0x9b39
	while ((Boolean)(*d++ = *s++));
    1960:	00000a02 	andeq	r0, r0, r2, lsl #20
    1964:	3f012e1b 	svccc	0x00012e1b
    1968:	3a0e030c 	bcc	3825a0 <__ccfg+0x3625f8>
}
    196c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (n-- && (*s != '\0'))
    1970:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1974:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	*d = '\0';
    1978:	010a4001 	tsteq	sl, r1
	while (n-- && (*s != '\0'))
    197c:	1c000013 	stcne	0, cr0, [r0], {19}
    1980:	08030005 	stmdaeq	r3, {r0, r2}
		*d++ = *s++;
    1984:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1988:	13490b39 	movtne	r0, #39737	; 0x9b39
	while (n--)
    198c:	00000602 	andeq	r0, r0, r2, lsl #12
    1990:	3f002e1d 	svccc	0x00002e1d
		*dest++ = *src++;
    1994:	3a0e030c 	bcc	3825cc <__ccfg+0x362624>
    1998:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    199c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
	while (n--)
    19a0:	000a4001 	andeq	r4, sl, r1
}
    19a4:	00341e00 	eorseq	r1, r4, r0, lsl #28
		*dest++ = c;
    19a8:	0b3a0803 	bleq	e839bc <__ccfg+0xe63a14>
void adddevfunc (devreqfun_t rf, int loc) {
    19ac:	0b39053b 	bleq	e42ea0 <__ccfg+0xe22ef8>
		syserror (EREQPAR, "addv");
    19b0:	06021349 	streq	r1, [r2], -r9, asr #6
		syserror (ERESOURCE, "addv");
    19b4:	0a1f0000 	beq	7c19bc <__ccfg+0x7a1a14>
	if (ioreq [loc] != NULL)
    19b8:	3a0e0300 	bcc	3825c0 <__ccfg+0x362618>
    19bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ERESOURCE, "addv");
    19c0:	0001110b 	andeq	r1, r1, fp, lsl #2
	ioreq [loc] = rf;
    19c4:	011d2000 	tsteq	sp, r0
}
    19c8:	01521331 	cmpeq	r2, r1, lsr r3
    19cc:	0b580655 	bleq	1603328 <__ccfg+0x15e3380>
sint io (word retry, word dev, word operation, char *buf, word len) {
    19d0:	0b570559 	bleq	15c2f3c <__ccfg+0x15a2f94>
    19d4:	00001301 	andeq	r1, r0, r1, lsl #6
    19d8:	31000521 	tstcc	r0, r1, lsr #10
    19dc:	22000013 	andcs	r0, r0, #19
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    19e0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    19e4:	01120111 	tsteq	r2, r1, lsl r1
    19e8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		syserror (ENODEVICE, "io");
    19ec:	00000b57 	andeq	r0, r0, r7, asr fp
    19f0:	03000523 	movweq	r0, #1315	; 0x523
	if (len == 0)
    19f4:	3b0b3a0e 	blcc	2d0234 <__ccfg+0x2b028c>
	ret = (ioreq [dev]) (operation, buf, len);
    19f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19fc:	00060213 	andeq	r0, r6, r3, lsl r2
	if (ret >= 0)
    1a00:	000a2400 	andeq	r2, sl, r0, lsl #8
	if (ret == -1) {
    1a04:	0b3a0e03 	bleq	e85218 <__ccfg+0xe65270>
    1a08:	0b390b3b 	bleq	e446fc <__ccfg+0xe24754>
		if (retry == WNONE)
    1a0c:	00000111 	andeq	r0, r0, r1, lsl r1
		iowait (dev, operation, retry);
    1a10:	31011d25 	tstcc	r1, r5, lsr #26
    1a14:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1a18:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
			release;
    1a1c:	000b570b 	andeq	r5, fp, fp, lsl #14
	if (ret == -2) {
    1a20:	00052600 	andeq	r2, r5, r0, lsl #12
		if (retry != WNONE) {
    1a24:	06021331 			; <UNDEFINED> instruction: 0x06021331
    1a28:	1d270000 	stcne	0, cr0, [r7, #-0]
			iowait (dev, operation, retry);
    1a2c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1a30:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			(ioreq [dev]) (NONE, buf, len);
    1a34:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1a38:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a3c:	011d2800 	tsteq	sp, r0, lsl #16
		(ioreq [dev]) (NONE, buf, len);
    1a40:	01111331 	tsteq	r1, r1, lsr r3
    1a44:	0b580112 	bleq	1601e94 <__ccfg+0x15e1eec>
    1a48:	0b570b59 	bleq	15c47b4 <__ccfg+0x15a480c>
}
    1a4c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
	if (retry != WNONE) {
    1a50:	030c3f00 	movweq	r3, #52992	; 0xcf00
		delay (-ret - 2, retry);
    1a54:	3b0b3a0e 	blcc	2d0294 <__ccfg+0x2b02ec>
    1a58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a5c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a60:	000a4001 	andeq	r4, sl, r1
		release;
    1a64:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    1a68:	0b3a0e03 	bleq	e8527c <__ccfg+0xe652d4>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a6c:	0b390b3b 	bleq	e44760 <__ccfg+0xe247b8>
    1a70:	01120111 	tsteq	r2, r1, lsl r1
    1a74:	13010a40 	movwne	r0, #6720	; 0x1a40
    1a78:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    1a7c:	3a0e0300 	bcc	382684 <__ccfg+0x3626dc>
		syserror (ERESOURCE, "mal1");
    1a80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a84:	000b200b 	andeq	r2, fp, fp
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a88:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    1a8c:	0b3a0e03 	bleq	e852a0 <__ccfg+0xe652f8>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a90:	0b390b3b 	bleq	e44784 <__ccfg+0xe247dc>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a94:	01110c27 	tsteq	r1, r7, lsr #24
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a98:	0a400112 	beq	1001ee8 <__ccfg+0xfe1f40>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a9c:	00001301 	andeq	r1, r0, r1, lsl #6
    1aa0:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
}
    1aa4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    1aa8:	13310034 	teqne	r1, #52	; 0x34
    1aac:	00000602 	andeq	r0, r0, r2, lsl #12
    1ab0:	03012e2f 	movweq	r2, #7727	; 0x1e2f
    1ab4:	3b0b3a0e 	blcc	2d02f4 <__ccfg+0x2b034c>
    1ab8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
void __pi_free (aword *ch) {
    1abc:	010b2013 	tsteq	fp, r3, lsl r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1ac0:	30000013 	andcc	r0, r0, r3, lsl r0
    1ac4:	08030034 	stmdaeq	r3, {r2, r4, r5}
		syserror (EMALLOC, "malg");
    1ac8:	0b3b0b3a 	bleq	ec47b8 <__ccfg+0xea4810>
    1acc:	13490b39 	movtne	r0, #39737	; 0x9b39
	mcfree [MA_NP] += m_size (ch);
    1ad0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
		m_size (ch) ^= MALLOC_UMASK;
    1ad4:	3a0e0301 	bcc	3826e0 <__ccfg+0x362738>
    1ad8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	mcfree [MA_NP] += m_size (ch);
    1adc:	200c270b 	andcs	r2, ip, fp, lsl #14
	QFREE;
    1ae0:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (mevent [MA_NP] . nwait) {
    1ae4:	00053200 	andeq	r3, r5, r0, lsl #4
    1ae8:	0b3a0803 	bleq	e83afc <__ccfg+0xe63b54>
		trigger ((aword)(&(mevent [MA_NP])));
    1aec:	0b390b3b 	bleq	e447e0 <__ccfg+0xe24838>
		mevent [MA_NP] . nwait --;
    1af0:	00001349 	andeq	r1, r0, r9, asr #6
}
    1af4:	31011d33 	tstcc	r1, r3, lsr sp
    1af8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1afc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1b00:	010b570b 	tsteq	fp, fp, lsl #14
void kill (aword pid) {
    1b04:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
		pid = (aword) __pi_curr;
    1b08:	0e03012e 	adfeqsp	f0, f3, #0.5
	j = NULL;
    1b0c:	0b3b0b3a 	bleq	ec47fc <__ccfg+0xea4854>
	for_all_tasks (i) {
    1b10:	13490b39 	movtne	r0, #39737	; 0x9b39
	syserror (EREQPAR, "kpi");
    1b14:	01120111 	tsteq	r2, r1, lsl r1
    1b18:	13010a40 	movwne	r0, #6720	; 0x1a40
		if ((aword)i == pid) {
    1b1c:	34350000 	ldrtcc	r0, [r5], #-0
    1b20:	3a080300 	bcc	202728 <__ccfg+0x1e2780>
				__PCB = i->Next;
    1b24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			killev (i);
    1b28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			ufree (i);
    1b2c:	36000006 	strcc	r0, [r0], -r6
			if (i == __pi_curr)
    1b30:	0e03012e 	adfeqsp	f0, f3, #0.5
    1b34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				release;
    1b38:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				j->Next = i->Next;
    1b3c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1b40:	05370000 	ldreq	r0, [r7, #-0]!
    1b44:	3a0e0300 	bcc	38274c <__ccfg+0x3627a4>
}
    1b48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b50:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
	if (size < 8)
    1b54:	0b3a0e03 	bleq	e85368 <__ccfg+0xe653c0>
		_size = 2;
    1b58:	0b390b3b 	bleq	e4484c <__ccfg+0xe248a4>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b5c:	13490c27 	movtne	r0, #39975	; 0x9c27
		_size = (((aword)size) + 3) >> 2;
    1b60:	13010b20 	movwne	r0, #6944	; 0x1b20
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b64:	05390000 	ldreq	r0, [r9, #-0]!
		_size = (((aword)size) + 3) >> 2;
    1b68:	3a0e0300 	bcc	382770 <__ccfg+0x3627c8>
		if (mevent [MA_NP] . nfail != 255)
    1b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b70:	0013490b 	andseq	r4, r3, fp, lsl #18
			mevent [MA_NP] . nfail ++;
    1b74:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
		mnfree [MA_NP] = 0;
    1b78:	01111331 	tsteq	r1, r1, lsr r3
    1b7c:	0a400112 	beq	1001fcc <__ccfg+0xfe2024>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b80:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
    1b84:	11133100 	tstne	r3, r0, lsl #2
			syserror (EMALLOC, "malc");
    1b88:	58011201 	stmdapl	r1, {r0, r9, ip}
    1b8c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		if (m_size (chunk) >= _size)
    1b90:	0000000b 	andeq	r0, r0, fp
    1b94:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
		chunk = m_nextp (chunk)) {
    1b98:	030b130e 	movweq	r1, #45838	; 0xb30e
		m_setnextp (cc, m_nextp (chunk));
    1b9c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ba0:	10011106 	andne	r1, r1, r6, lsl #2
    1ba4:	02000006 	andeq	r0, r0, #6
			m_size (chunk) = _size;
    1ba8:	0b0b0024 	bleq	2c1c40 <__ccfg+0x2a1c98>
			cc = chunk + _size + m_hdrlen;
    1bac:	0e030b3e 	vmoveq.16	d3[0], r0
    1bb0:	16030000 	strne	r0, [r3], -r0
			m_size (cc) = waste - m_hdrlen;
    1bb4:	3a0e0300 	bcc	3827bc <__ccfg+0x362814>
			QFREE;
    1bb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		mevent [MA_NP] . nfail = 0;
    1bbc:	0013490b 	andseq	r4, r3, fp, lsl #18
		mcfree [MA_NP] -= m_size (chunk);
    1bc0:	00240400 	eoreq	r0, r4, r0, lsl #8
    1bc4:	0b3e0b0b 	bleq	f847f8 <__ccfg+0xf64850>
    1bc8:	00000803 	andeq	r0, r0, r3, lsl #16
    1bcc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
		m_size (chunk) |= MALLOC_UMASK;
    1bd0:	06000013 			; <UNDEFINED> instruction: 0x06000013
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bd4:	13490035 	movtne	r0, #36917	; 0x9035
		m_size (chunk) |= MALLOC_UMASK;
    1bd8:	0f070000 	svceq	0x00070000
			mnfree [MA_NP] = mcfree [MA_NP];
    1bdc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    1be0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1be4:	0b0b0113 	bleq	2c2038 <__ccfg+0x2a2090>
    1be8:	0b3b0b3a 	bleq	ec48d8 <__ccfg+0xea4930>
    1bec:	13010b39 	movwne	r0, #6969	; 0x1b39
    1bf0:	0d090000 	stceq	0, cr0, [r9, #-0]
    1bf4:	3a0e0300 	bcc	3827fc <__ccfg+0x362854>
    1bf8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
aword __pi_fork (fsmcode func, aword data) {
    1bfc:	0b13490b 	bleq	4d4030 <__ccfg+0x4b4088>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c00:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1c04:	000b380b 	andeq	r3, fp, fp, lsl #16
    1c08:	000d0a00 	andeq	r0, sp, r0, lsl #20
		if ((j = __PCB) == NULL)
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
	i->Next = NULL;
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
	i->data = data;
    1c14:	0b381349 	bleq	e06940 <__ccfg+0xde6998>
		if ((j = __PCB) == NULL)
    1c18:	340b0000 	strcc	r0, [fp], #-0
}
    1c1c:	3a0e0300 	bcc	382824 <__ccfg+0x36287c>
			for (; j->Next != NULL; j = j->Next);
    1c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c24:	3f13490b 	svccc	0x0013490b
	return (aword) i;
    1c28:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1c2c:	01010c00 	tsteq	r1, r0, lsl #24
	if (mevent [MA_NP] . nwait != 255)
    1c30:	13011349 	movwne	r1, #4937	; 0x1349
    1c34:	210d0000 	mrscs	r0, (UNDEF: 13)
    1c38:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
		mevent [MA_NP] . nwait ++;
    1c3c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	wait ((aword)(&(mevent [MA_NP])), state);
    1c40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c44:	13490b39 	movtne	r0, #39737	; 0x9b39
void diag (const char *mess, ...) {
    1c48:	150f0000 	strne	r0, [pc, #-0]	; 1c50 <diag+0x8>
    1c4c:	010c2701 	tsteq	ip, r1, lsl #14
    1c50:	10000013 	andne	r0, r0, r3, lsl r0
	diag_disable_int (a, is);
    1c54:	13490005 	movtne	r0, #36869	; 0x9005
    1c58:	34110000 	ldrcc	r0, [r1], #-0
    1c5c:	3a0e0300 	bcc	382864 <__ccfg+0x3628bc>
				d = (bc == 16) ? 10000 : 1000000000;
    1c60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_disable_int (a, is);
    1c64:	3f13490b 	svccc	0x0013490b
	while (*mess != '\0') {
    1c68:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	dgout ('\r');
    1c6c:	01131200 	tsteq	r3, r0, lsl #4
	dgout ('\n');
    1c70:	0b3a0b0b 	bleq	e848a4 <__ccfg+0xe648fc>
    1c74:	0b39053b 	bleq	e43168 <__ccfg+0xe231c0>
    1c78:	00001301 	andeq	r1, r0, r1, lsl #6
	diag_wait (a);
    1c7c:	03000d13 	movweq	r0, #3347	; 0xd13
	diag_enable_int (a, is);
    1c80:	3b0b3a0e 	blcc	2d04c0 <__ccfg+0x2b0518>
    1c84:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    1c88:	000b3813 	andeq	r3, fp, r3, lsl r8
    1c8c:	01131400 	tsteq	r3, r0, lsl #8
    1c90:	0b0b0e03 	bleq	2c54a4 <__ccfg+0x2a54fc>
		if (*mess == '%') {
    1c94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c98:	13010b39 	movwne	r0, #6969	; 0x1b39
			if (*mess == 'l') {
    1c9c:	21150000 	tstcs	r5, r0
    1ca0:	2f134900 	svccs	0x00134900
				mess++;
    1ca4:	1600000b 	strne	r0, [r0], -fp
				val = va_arg (ap, lword);
    1ca8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1bf8 <__pi_malloc+0xa4>
				bc = 32;
    1cac:	0b3a0e03 	bleq	e854c0 <__ccfg+0xe65518>
				bc = 16;
    1cb0:	0b390b3b 	bleq	e449a4 <__ccfg+0xe249fc>
			switch (*mess) {
    1cb4:	13490c27 	movtne	r0, #39975	; 0x9c27
    1cb8:	01120111 	tsteq	r2, r1, lsl r1
    1cbc:	13010a40 	movwne	r0, #6720	; 0x1a40
				dgout ('%');
    1cc0:	05170000 	ldreq	r0, [r7, #-0]
    1cc4:	3a080300 	bcc	2028cc <__ccfg+0x1e2924>
				dgout (*mess);
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			switch (*mess) {
    1cd0:	18000006 	stmdane	r0, {r1, r2}
					v = __pi_hex_enc_table [
    1cd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
					i += 4;
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
					(val >> (bc - i)) & 0xf];
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ce0:	00000602 	andeq	r0, r0, r2, lsl #12
					dgout (v);
    1ce4:	03003419 	movweq	r3, #1049	; 0x419
    1ce8:	3b0b3a08 	blcc	2d0510 <__ccfg+0x2b0568>
				while (i < bc) {
    1cec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			mess++;
    1cf0:	00060213 	andeq	r0, r6, r3, lsl r2
					d /= 10;
    1cf4:	11010000 	mrsne	r0, (UNDEF: 1)
				if ((val >> (bc - 1)) & 1) {
    1cf8:	130e2501 	movwne	r2, #58625	; 0xe501
    1cfc:	1b0e030b 	blne	382930 <__ccfg+0x362988>
					dgout ('-');
    1d00:	1106550e 	tstne	r6, lr, lsl #10
    1d04:	00061001 	andeq	r1, r6, r1
						val |= 0xffff0000;
    1d08:	00240200 	eoreq	r0, r4, r0, lsl #4
    1d0c:	0b3e0b0b 	bleq	f84940 <__ccfg+0xf64998>
    1d10:	00000e03 	andeq	r0, r0, r3, lsl #28
				d = (bc == 16) ? 10000 : 1000000000;
    1d14:	03001603 	movweq	r1, #1539	; 0x603
    1d18:	3b0b3a0e 	blcc	2d0558 <__ccfg+0x2b05b0>
    1d1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					v = (word) (val / d);
    1d20:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
					if (v || d == 1) break;
    1d24:	0b0b0024 	bleq	2c1dbc <__ccfg+0x2a1e14>
    1d28:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
					d /= 10;
    1d2c:	26050000 	strcs	r0, [r5], -r0
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	00134900 	andseq	r4, r3, r0, lsl #18
					dgout (v + '0');
    1d34:	00350600 	eorseq	r0, r5, r0, lsl #12
    1d38:	00001349 	andeq	r1, r0, r9, asr #6
    1d3c:	0b011307 	bleq	46960 <__ccfg+0x269b8>
					d /= 10;
    1d40:	3b0b3a0b 	blcc	2d0574 <__ccfg+0x2b05cc>
					val = val - (v * d);
    1d44:	010b390b 	tsteq	fp, fp, lsl #18
					if (d == 0) break;
    1d48:	08000013 	stmdaeq	r0, {r0, r1, r4}
					v = (word) (val / d);
    1d4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d50:	0b3b0b3a 	bleq	ec4a40 <__ccfg+0xea4a98>
				if (bc == 16)
    1d54:	13490b39 	movtne	r0, #39737	; 0x9b39
				d = (bc == 16) ? 10000 : 1000000000;
    1d58:	0b0d0b0b 	bleq	34498c <__ccfg+0x3249e4>
					val &= 0xffff;
    1d5c:	0b380b0c 	bleq	e04994 <__ccfg+0xde49ec>
					dgout (*s);
    1d60:	0d090000 	stceq	0, cr0, [r9, #-0]
					s++;
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
				while (*s != '\0') {
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			dgout (*mess++);
    1d70:	0a00000b 	beq	1da4 <lrnd+0x20>
    1d74:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d78:	0b3b0b3a 	bleq	ec4a68 <__ccfg+0xea4ac0>
    1d7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d80:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d84:	0f0b0000 	svceq	0x000b0000
    1d88:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d8c:	0c000013 	stceq	0, cr0, [r0], {19}
    1d90:	13490101 	movtne	r0, #37121	; 0x9101
	^ entropy
    1d94:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1d98:	0000210d 	andeq	r2, r0, sp, lsl #2
    1d9c:	00160e00 	andseq	r0, r6, r0, lsl #28
    1da0:	0b3a0e03 	bleq	e855b4 <__ccfg+0xe6560c>
    1da4:	0b39053b 	bleq	e43298 <__ccfg+0xe232f0>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1da8:	00001349 	andeq	r1, r0, r9, asr #6
	word cs = size + hblenb;
    1dac:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1db0:	0013010c 	andseq	r0, r3, ip, lsl #2
    1db4:	00051000 	andeq	r1, r5, r0
	p -> length = size;
    1db8:	00001349 	andeq	r1, r0, r9, asr #6
}
    1dbc:	03003411 	movweq	r3, #1041	; 0x411
	if (p->attributes.b.queued) {
    1dc0:	3b0b3a0e 	blcc	2d0600 <__ccfg+0x2b0658>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1dc4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1dc8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1dcc:	1200000c 	andne	r0, r0, #12
		p->attributes.b.queued = 0;
    1dd0:	0b0b0113 	bleq	2c2224 <__ccfg+0x2a227c>
    1dd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1dd8:	13010b39 	movwne	r0, #6969	; 0x1b39
	deq (p);	// Remove from queue
    1ddc:	0d130000 	ldceq	0, cr0, [r3, #-0]
}
    1de0:	3a0e0300 	bcc	3829e8 <__ccfg+0x362a40>
	tfree ((address)p);
    1de4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1de8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1dec:	1400000b 	strne	r0, [r0], #-11
    1df0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1df4:	0b3a0b0b 	bleq	e84a28 <__ccfg+0xe64a80>
    1df8:	0b39053b 	bleq	e432ec <__ccfg+0xe23344>
	if (q_empty (q))
    1dfc:	00001301 	andeq	r1, r0, r1, lsl #6
    1e00:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
		trigger (q);
    1e04:	000b2f13 	andeq	r2, fp, r3, lsl pc
	if (p->attributes.b.urgent) {
    1e08:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
		p->u.bqueue.next = q->next;
    1e0c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		p->u.bqueue.prev = q;
    1e10:	0b3b0b3a 	bleq	ec4b00 <__ccfg+0xea4b58>
		q->next->prev = (qitem_t*) p;
    1e14:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	p->attributes.b.queued = 1;
    1e18:	01111349 	tsteq	r1, r9, asr #6
    1e1c:	0a400112 	beq	100226c <__ccfg+0xfe22c4>
}
    1e20:	05170000 	ldreq	r0, [r7, #-0]
		p->u.bqueue.prev = q->prev;
    1e24:	3a080300 	bcc	202a2c <__ccfg+0x1e2a84>
		q->prev->next = (qitem_t*) p;
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		q->prev = (qitem_t*) p;
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e30:	18000006 	stmdane	r0, {r1, r2}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1e34:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	deq (p);	// Soft dequeue, timer and hook left intact
    1e38:	0b3b0b3a 	bleq	ec4b28 <__ccfg+0xea4b80>
	switch (dv) {
    1e3c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e40:	00000602 	andeq	r0, r0, r2, lsl #12
    1e44:	01110100 	tsteq	r1, r0, lsl #2
    1e48:	0b130e25 	bleq	4c56e4 <__ccfg+0x4a573c>
			p->attributes.b.urgent = 1;
    1e4c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1e50:	01110655 	tsteq	r1, r5, asr r6
			verify_ses (p, "dispose ses");
    1e54:	00000610 	andeq	r0, r0, r0, lsl r6
    1e58:	0b002402 	bleq	ae68 <__exidx_end+0x538c>
    1e5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e60:	0300000e 	movweq	r0, #14
    1e64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			verify_phy (p, "dispose phy");
    1e68:	0b3b0b3a 	bleq	ec4b58 <__ccfg+0xea4bb0>
    1e6c:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1e70:	24040000 	strcs	r0, [r4], #-0
			enq (oqueues [p->attributes.b.phys], p);
    1e74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			p->attributes.b.urgent = 1;
    1e78:	0008030b 	andeq	r0, r8, fp, lsl #6
    1e7c:	01130500 	tsteq	r3, r0, lsl #10
			verify_phy (p, "dispose phy");
    1e80:	0b0b0e03 	bleq	2c5694 <__ccfg+0x2a56ec>
    1e84:	0b3b0b3a 	bleq	ec4b74 <__ccfg+0xea4bcc>
    1e88:	00001301 	andeq	r1, r0, r1, lsl #6
    1e8c:	03000d06 	movweq	r0, #3334	; 0xd06
    1e90:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    1e94:	000c340b 	andeq	r3, ip, fp, lsl #8
			enq (oqueues [p->attributes.b.phys], p);
    1e98:	000f0700 	andeq	r0, pc, r0, lsl #14
    1e9c:	00000b0b 	andeq	r0, r0, fp, lsl #22
}
    1ea0:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
			rlp (p);
    1ea4:	09000013 	stmdbeq	r0, {r0, r1, r4}
}
    1ea8:	13490035 	movtne	r0, #36917	; 0x9035
    1eac:	130a0000 	movwne	r0, #40960	; 0xa000
    1eb0:	3a0b0b01 	bcc	2c4abc <__ccfg+0x2a4b14>
    1eb4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1eb8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ebc:	000d0b00 	andeq	r0, sp, r0, lsl #22
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1ec0:	0b3a0e03 	bleq	e856d4 <__ccfg+0xe6572c>
	if (b->attributes.b.outgoing) {
    1ec4:	0b390b3b 	bleq	e44bb8 <__ccfg+0xe24c10>
	b = header (p);
    1ec8:	0b0b1349 	bleq	2c6bf4 <__ccfg+0x2a6c4c>
	if (b->attributes.b.outgoing) {
    1ecc:	0b0c0b0d 	bleq	304b08 <__ccfg+0x2e4b60>
		verify_ses (b, "tcv02");
    1ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ed4:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ee0:	000b3813 	andeq	r3, fp, r3, lsl r8
		verify_plg (b, tcv_out, "tcv03");
    1ee4:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1ee8:	0b3a0e03 	bleq	e856fc <__ccfg+0xe65754>
    1eec:	0b390b3b 	bleq	e44be0 <__ccfg+0xe24c38>
    1ef0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1dd4 <deq+0x16>
    1ef4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1ef8:	0b000f0e 	bleq	5b38 <__exidx_end+0x5c>
    1efc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f00:	01010f00 	tsteq	r1, r0, lsl #30
    1f04:	13011349 	movwne	r1, #4937	; 0x1349
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f08:	21100000 	tstcs	r0, r0
}
    1f0c:	11000000 	mrsne	r0, (UNDEF: 0)
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f10:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		rlp (b);
    1f14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1f18:	13490b39 	movtne	r0, #39737	; 0x9b39
		rlp (b);
    1f1c:	15120000 	ldrne	r0, [r2, #-0]
    1f20:	010c2701 	tsteq	ip, r1, lsl #14
    1f24:	13000013 	movwne	r0, #19
    1f28:	13490005 	movtne	r0, #36869	; 0x9005
    1f2c:	34140000 	ldrcc	r0, [r4], #-0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f30:	3a0e0300 	bcc	382b38 <__ccfg+0x362b90>
    1f34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f38:	3f13490b 	svccc	0x0013490b
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f3c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	va_start (ap, plid);
    1f40:	01131500 	tsteq	r3, r0, lsl #10
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f44:	0b3a0b0b 	bleq	e84b78 <__ccfg+0xe64bd0>
    1f48:	0b39053b 	bleq	e4343c <__ccfg+0xe23494>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    1f50:	03000d16 	movweq	r0, #3350	; 0xd16
    1f54:	3b0b3a0e 	blcc	2d0794 <__ccfg+0x2b07ec>
    1f58:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			syserror (ENODEVICE, "tcv04");
    1f5c:	000b3813 	andeq	r3, fp, r3, lsl r8
		syserror (EMALLOC, "tcv05");
    1f60:	01131700 	tsteq	r3, r0, lsl #14
	attp.b.outgoing = 1;
    1f64:	0b0b0e03 	bleq	2c5778 <__ccfg+0x2a57d0>
    1f68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f6c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1f70:	21180000 	tstcs	r8, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f74:	2f134900 	svccs	0x00134900
		if (descriptors [fd] == NULL)
    1f78:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1f7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1ecc <tcv_endp+0xc>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f80:	0b3a0e03 	bleq	e85794 <__ccfg+0xe657ec>
		return ERROR;
    1f84:	0b390b3b 	bleq	e44c78 <__ccfg+0xe24cd0>
}
    1f88:	13490c27 	movtne	r0, #39975	; 0x9c27
    1f8c:	01120111 	tsteq	r2, r1, lsl r1
    1f90:	13010a40 	movwne	r0, #6720	; 0x1a40
	s->attpattern.b.session = fd;
    1f94:	051a0000 	ldreq	r0, [sl, #-0]
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
	descriptors [fd] = s;
    1f9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	q_init (&(s->rqueue));
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1fa4:	1b000006 	blne	1fc4 <tcv_open+0x94>
    1fa8:	08030005 	stmdaeq	r3, {r0, r2}
    1fac:	0b3b0b3a 	bleq	ec4c9c <__ccfg+0xea4cf4>
    1fb0:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1fb4:	00000a02 	andeq	r0, r0, r2, lsl #20
    1fb8:	0000181c 	andeq	r1, r0, ip, lsl r8
    1fbc:	00341d00 	eorseq	r1, r4, r0, lsl #26
	descriptors [fd] = s;
    1fc0:	0b3a0e03 	bleq	e857d4 <__ccfg+0xe6582c>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
	if (s == NULL)
    1fcc:	341e0000 	ldrcc	r0, [lr], #-0
		syserror (EMALLOC, "tcv05");
    1fd0:	3a080300 	bcc	202bd8 <__ccfg+0x1e2c30>
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fd8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fdc:	1f000006 	svcne	0x00000006
    1fe0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1fe4:	0b3b0b3a 	bleq	ec4cd4 <__ccfg+0xea4d2c>
    1fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1fec:	00000a02 	andeq	r0, r0, r2, lsl #20
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ff0:	01110100 	tsteq	r1, r0, lsl #2
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ff4:	0b130e25 	bleq	4c5890 <__ccfg+0x4a58e8>
    1ff8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1ffc:	01110655 	tsteq	r1, r5, asr r6
	plugins [ord] = pl;
    2000:	00000610 	andeq	r0, r0, r0, lsl r6
	return 0;
    2004:	0b002402 	bleq	b014 <__exidx_end+0x5538>
		return ERROR;
    2008:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    200c:	0300000e 	movweq	r0, #14
    2010:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	verify_fds (fd, "tcv10");
    2014:	0b3b0b3a 	bleq	ec4d04 <__ccfg+0xea4d5c>
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2018:	13490b39 	movtne	r0, #39737	; 0x9b39
	verify_fds (fd, "tcv10");
    201c:	24040000 	strcs	r0, [r4], #-0
    2020:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2024:	0008030b 	andeq	r0, r8, fp, lsl #6
	verify_plg (b, tcv_frm, "tcv11");
    2028:	01130500 	tsteq	r3, r0, lsl #10
	b = q_first (rq);
    202c:	0b0b0e03 	bleq	2c5840 <__ccfg+0x2a5898>
	if (q_end (b, rq)) {
    2030:	0b3b0b3a 	bleq	ec4d20 <__ccfg+0xea4d78>
		if (state != WNONE) {
    2034:	00001301 	andeq	r1, r0, r1, lsl #6
    2038:	03000d06 	movweq	r0, #3334	; 0xd06
			when (rq, state);
    203c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
			release;
    2040:	000c340b 	andeq	r3, ip, fp, lsl #8
	deq (b);	// Dequeue the packet ...
    2044:	000f0700 	andeq	r0, pc, r0, lsl #14
    2048:	00000b0b 	andeq	r0, r0, fp, lsl #22
	p = ((address)(b + 1));
    204c:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
	verify_plg (b, tcv_frm, "tcv11");
    2050:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2054:	13490035 	movtne	r0, #36917	; 0x9035
    2058:	130a0000 	movwne	r0, #40960	; 0xa000
    205c:	3a0b0b01 	bcc	2c4c68 <__ccfg+0x2a4cc0>
    2060:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2064:	0013010b 	andseq	r0, r3, fp, lsl #2
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2068:	000d0b00 	andeq	r0, sp, r0, lsl #22
    206c:	0b3a0e03 	bleq	e85880 <__ccfg+0xe658d8>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2070:	0b390b3b 	bleq	e44d64 <__ccfg+0xe24dbc>
    2074:	0b0b1349 	bleq	2c6da0 <__ccfg+0x2a6df8>
	b->u.pointers.tail =
    2078:	0b0c0b0d 	bleq	304cb4 <__ccfg+0x2e4d0c>
}
    207c:	00000b38 	andeq	r0, r0, r8, lsr fp
		return NULL;
    2080:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    208c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2090:	00340d00 	eorseq	r0, r4, r0, lsl #26
	verify_fds (fd, "tcv16");
    2094:	0b3a0e03 	bleq	e858a8 <__ccfg+0xe65900>
								Boolean urg) {
    2098:	0b390b3b 	bleq	e44d8c <__ccfg+0xe24de4>
    209c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f80 <tcv_open+0x50>
	verify_fds (fd, "tcv16");
    20a0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    20a4:	0b000f0e 	bleq	5ce4 <__exidx_end+0x208>
    20a8:	0013490b 	andseq	r4, r3, fp, lsl #18
	verify_pld (s, tcv_frm, "tcv17");
    20ac:	01010f00 	tsteq	r1, r0, lsl #30
    20b0:	13011349 	movwne	r1, #4937	; 0x1349
    20b4:	21100000 	tstcs	r0, r0
    20b8:	11000000 	mrsne	r0, (UNDEF: 0)
    20bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    20c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    20c8:	15120000 	ldrne	r0, [r2, #-0]
	ptrs.head = (word) fd;
    20cc:	010c2701 	tsteq	ip, r1, lsl #14
	ptrs.tail = (word) urg;
    20d0:	13000013 	movwne	r0, #19
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20d4:	13490005 	movtne	r0, #36869	; 0x9005
    20d8:	34140000 	ldrcc	r0, [r4], #-0
		if (state != WNONE) {
    20dc:	3a0e0300 	bcc	382ce4 <__ccfg+0x362d3c>
    20e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    20e4:	3f13490b 	svccc	0x0013490b
			when (eid, state);
    20e8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    20ec:	01131500 	tsteq	r3, r0, lsl #10
			release;
    20f0:	0b3a0b0b 	bleq	e84d24 <__ccfg+0xe64d7c>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    20f4:	0b39053b 	bleq	e435e8 <__ccfg+0xe23640>
    20f8:	00001301 	andeq	r1, r0, r1, lsl #6
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20fc:	03000d16 	movweq	r0, #3350	; 0xd16
    2100:	3b0b3a0e 	blcc	2d0940 <__ccfg+0x2b0998>
    2104:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2108:	000b3813 	andeq	r3, fp, r3, lsl r8
    210c:	01131700 	tsteq	r3, r0, lsl #14
    2110:	0b0b0e03 	bleq	2c5924 <__ccfg+0x2a597c>
		if (state != WNONE) {
    2114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2118:	13010b39 	movwne	r0, #6969	; 0x1b39
			tmwait (state);
    211c:	21180000 	tstcs	r8, r0
    2120:	2f134900 	svccs	0x00134900
	b->attributes = s->attpattern;
    2124:	1900000b 	stmdbne	r0, {r0, r1, r3}
		b->attributes.b.urgent = 1;
    2128:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2078 <tcv_rnp+0x64>
    212c:	0b3a0e03 	bleq	e85940 <__ccfg+0xe65998>
	b->u.pointers.head = ptrs.head;
    2130:	0b390b3b 	bleq	e44e24 <__ccfg+0xe24e7c>
	b->u.pointers.tail = length;
    2134:	13490c27 	movtne	r0, #39975	; 0x9c27
	return (address) (b + 1);
    2138:	01120111 	tsteq	r2, r1, lsl r1
    213c:	13010a40 	movwne	r0, #6720	; 0x1a40
    2140:	051a0000 	ldreq	r0, [sl, #-0]
    2144:	3a080300 	bcc	202d4c <__ccfg+0x1e2da4>
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2150:	1b000006 	blne	2170 <tcv_read+0x20>
	if (len >= b->u.pointers.tail)
    2154:	08030005 	stmdaeq	r3, {r0, r2}
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2158:	0b3b0b3a 	bleq	ec4e48 <__ccfg+0xea4ea0>
    215c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (len > 0) {
    2160:	00000a02 	andeq	r0, r0, r2, lsl #20
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2164:	0000181c 	andeq	r1, r0, ip, lsl r8
    2168:	00341d00 	eorseq	r1, r4, r0, lsl #26
    216c:	0b3a0e03 	bleq	e85980 <__ccfg+0xe659d8>
		b->u.pointers.tail -= len;
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
    2174:	06021349 	streq	r1, [r2], -r9, asr #6
    2178:	341e0000 	ldrcc	r0, [lr], #-0
		b->u.pointers.head += len;
    217c:	3a080300 	bcc	202d84 <__ccfg+0x1e2ddc>
    2180:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2184:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    2188:	0000000a 	andeq	r0, r0, sl
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    218c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2190:	030b130e 	movweq	r1, #45838	; 0xb30e
    2194:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	verify_fph (phy, "tcv23");
    2198:	10011106 	andne	r1, r1, r6, lsl #2
    219c:	02000006 	andeq	r0, r0, #6
    21a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    21a4:	0b3b0b3a 	bleq	ec4e94 <__ccfg+0xea4eec>
}
    21a8:	13490b39 	movtne	r0, #39737	; 0x9b39
	return (physical [phy]) (opt, arg);
    21ac:	24030000 	strcs	r0, [r3], #-0
    21b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21b4:	000e030b 	andeq	r0, lr, fp, lsl #6
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    21b8:	00260400 	eoreq	r0, r6, r0, lsl #8
	if (opt < 0) {
    21bc:	00001349 	andeq	r1, r0, r9, asr #6
		if (fd < 0)
    21c0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
		if (opt == PHYSOPT_PLUGINFO) {
    21c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
			if (fd >= TCV_MAX_PLUGS)
    21c8:	0b0b0024 	bleq	2c2260 <__ccfg+0x2a22b8>
			if ((p = plugins [fd]) == NULL)
    21cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    21d0:	16070000 	strne	r0, [r7], -r0
}
    21d4:	3a0e0300 	bcc	382ddc <__ccfg+0x362e34>
		if (fd >= TCV_MAX_PHYS)
    21d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		return physinfo [fd];
    21dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    21e0:	01170800 	tsteq	r7, r0, lsl #16
	verify_fds (fd, "tcv22");
    21e4:	0b3a0b0b 	bleq	e84e18 <__ccfg+0xe64e70>
    21e8:	0b390b3b 	bleq	e44edc <__ccfg+0xe24f34>
    21ec:	00001301 	andeq	r1, r0, r1, lsl #6
    21f0:	03000d09 	movweq	r0, #3337	; 0xd09
    21f4:	3b0b3a0e 	blcc	2d0a34 <__ccfg+0x2b0a8c>
}
    21f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21fc:	0a000013 	beq	2250 <tcvp_new+0x38>
    2200:	13490101 	movtne	r0, #37121	; 0x9101
			return 0;
    2204:	00001301 	andeq	r1, r0, r1, lsl #6
    2208:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
    220c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2210:	01130c00 	tsteq	r3, r0, lsl #24
    2214:	0b3a0b0b 	bleq	e84e48 <__ccfg+0xe64ea0>
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2218:	0b390b3b 	bleq	e44f0c <__ccfg+0xe24f64>
    221c:	00001301 	andeq	r1, r0, r1, lsl #6
	if (dsp != TCV_DSP_PASS) {
    2220:	03000d0d 	movweq	r0, #3341	; 0xd0d
		if (ses == NONE)
    2224:	3b0b3a0e 	blcc	2d0a64 <__ccfg+0x2b0abc>
			syserror (EREQPAR, "tcv26");
    2228:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		verify_fds (ses, "tcv27");
    222c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2230:	000f0e00 	andeq	r0, pc, r0, lsl #28
    2234:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2238:	0301130f 	movweq	r1, #4879	; 0x130f
    223c:	3a0b0b0e 	bcc	2c4e7c <__ccfg+0x2a4ed4>
		if ((p = apb (size)) != NULL) {
    2240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2244:	0013010b 	andseq	r0, r3, fp, lsl #2
		return NULL;
    2248:	000d1000 	andeq	r1, sp, r0
			p->attributes = descriptors [ses] -> attpattern;
    224c:	0b3a0803 	bleq	e84260 <__ccfg+0xe642b8>
			dispose (p, dsp);
    2250:	0b390b3b 	bleq	e44f44 <__ccfg+0xe24f9c>
			p->attributes = descriptors [ses] -> attpattern;
    2254:	0b381349 	bleq	e06f80 <__ccfg+0xde6fd8>
			p->attributes.b.outgoing = 0;
    2258:	0f110000 	svceq	0x00110000
			dispose (p, dsp);
    225c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
			return (address)(p + 1);
    2260:	12000013 	andne	r0, r0, #19
    2264:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	if ((p = apb (size)) != NULL)
    2268:	0b3a050b 	bleq	e8369c <__ccfg+0xe636f4>
    226c:	0b390b3b 	bleq	e44f60 <__ccfg+0xe24fb8>
		return (address)(p + 1);
    2270:	00001301 	andeq	r1, r0, r1, lsl #6
    2274:	03000d13 	movweq	r0, #3347	; 0xd13
    2278:	3b0b3a0e 	blcc	2d0ab8 <__ccfg+0x2b0b10>
    227c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2280:	00053813 	andeq	r3, r5, r3, lsl r8
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2284:	00151400 	andseq	r1, r5, r0, lsl #8
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2288:	00000c27 	andeq	r0, r0, r7, lsr #24
    228c:	27011515 	smladcs	r1, r5, r5, r1
		syserror (EREQPAR, "tcv28");
    2290:	0113490c 	tsteq	r3, ip, lsl #18
		syserror (EMALLOC, "tcv29");
    2294:	16000013 			; <UNDEFINED> instruction: 0x16000013
	physical [phy] = ps;
    2298:	13490005 	movtne	r0, #36869	; 0x9005
	physinfo [phy] = info;
    229c:	13170000 	tstne	r7, #0
    22a0:	0b0e0301 	bleq	382eac <__ccfg+0x362f04>
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22a4:	3b0b3a05 	blcc	2d0ac0 <__ccfg+0x2b0b18>
    22a8:	010b3905 	tsteq	fp, r5, lsl #18
    22ac:	18000013 	stmdane	r0, {r0, r1, r4}
		syserror (EMALLOC, "tcv29");
    22b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    22b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	q_init (q);
    22b8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    22bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    22c0:	03000d19 	movweq	r0, #3353	; 0xd19
    22c4:	3b0b3a0e 	blcc	2d0b04 <__ccfg+0x2b0b5c>
    22c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    22cc:	00053813 	andeq	r3, r5, r3, lsl r8
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d0:	01131a00 	tsteq	r3, r0, lsl #20
	verify_fph (phy, "tcv30");
    22d4:	0b0b0e03 	bleq	2c5ae8 <__ccfg+0x2a5b40>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22dc:	13010b39 	movwne	r0, #6969	; 0x1b39
	verify_fph (phy, "tcv30");
    22e0:	131b0000 	tstne	fp, #0
    22e4:	3a0b0b01 	bcc	2c4ef0 <__ccfg+0x2a4f48>
    22e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    22f0:	01171c00 	tsteq	r7, r0, lsl #24
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22f4:	0b3a0b0b 	bleq	e84f28 <__ccfg+0xe64f80>
    22f8:	0b39053b 	bleq	e437ec <__ccfg+0xe23844>
		if (plugins [plg] == NULL)
    22fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2300:	03000d1d 	movweq	r0, #3357	; 0xd1d
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2304:	3b0b3a0e 	blcc	2d0b44 <__ccfg+0x2b0b9c>
}
    2308:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    230c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2310:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    2314:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2318:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    231c:	0013010c 	andseq	r0, r3, ip, lsl #2
    2320:	00342000 	eorseq	r2, r4, r0
    2324:	0b3a0e03 	bleq	e85b38 <__ccfg+0xe65b90>
    2328:	0b39053b 	bleq	e4381c <__ccfg+0xe23874>
    232c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2210 <tcv_control+0x58>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2330:	00000c3c 	andeq	r0, r0, ip, lsr ip
	len -= (ap.head + ap.tail);
    2334:	03000d21 	movweq	r0, #3361	; 0xd21
    2338:	3b0b3a0e 	blcc	2d0b78 <__ccfg+0x2b0bd0>
    233c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2340:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2344:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2348:	2200000b 	andcs	r0, r0, #11
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    234c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2354:	13490b39 	movtne	r0, #39737	; 0x9b39
	return 1;
    2358:	0b0d0b0b 	bleq	344f8c <__ccfg+0x324fe4>
    235c:	0b380b0c 	bleq	e04f94 <__ccfg+0xde4fec>
    2360:	34230000 	strtcc	r0, [r3], #-0
    2364:	3a0e0300 	bcc	382f6c <__ccfg+0x362fc4>
    2368:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	verify_fph (phy, "tcv32");
    236c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2370:	2400000a 	strcs	r0, [r0], #-10
    2374:	13490021 	movtne	r0, #36897	; 0x9021
    2378:	0000052f 	andeq	r0, r0, pc, lsr #10
    237c:	03003425 	movweq	r3, #1061	; 0x425
    2380:	3b0b3a0e 	blcc	2d0bc0 <__ccfg+0x2b0c18>
	oq = oqueues [phy];
    2384:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	b = q_first (oq);
    2388:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	if (q_end (b, oq)) {
    238c:	2600000c 	strcs	r0, [r0], -ip
	*len = b->length;
    2390:	00000021 	andeq	r0, r0, r1, lsr #32
	deq (b);	// Dequeue the packet ...
    2394:	03003427 	movweq	r3, #1063	; 0x427
}
    2398:	3b0b3a0e 	blcc	2d0bd8 <__ccfg+0x2b0c30>
		return NULL;
    239c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    23a0:	28000013 	stmdacs	r0, {r0, r1, r4}
    23a4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 22f4 <tcvphy_rcv+0x24>
    23a8:	0b3a0e03 	bleq	e85bbc <__ccfg+0xe65c14>
	verify_fph (phy, "tcv33");
    23ac:	0b39053b 	bleq	e438a0 <__ccfg+0xe238f8>
    23b0:	01110c27 	tsteq	r1, r7, lsr #24
    23b4:	0a400112 	beq	1002804 <__ccfg+0xfe285c>
    23b8:	00001301 	andeq	r1, r0, r1, lsl #6
    23bc:	03000529 	movweq	r0, #1321	; 0x529
    23c0:	3b0b3a08 	blcc	2d0be8 <__ccfg+0x2b0c40>
	oq = oqueues [phy];
    23c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	b = q_first (oq);
    23c8:	00060213 	andeq	r0, r6, r3, lsl r2
		return NULL;
    23cc:	011d2a00 	tsteq	sp, r0, lsl #20
	return (address)(b + 1);
    23d0:	01521331 	cmpeq	r2, r1, lsr r3
}
    23d4:	0b580655 	bleq	1603d30 <__ccfg+0x15e3d88>
    23d8:	0b570559 	bleq	15c3944 <__ccfg+0x15a399c>
    23dc:	00001301 	andeq	r1, r0, r1, lsl #6
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    23e0:	55010b2b 	strpl	r0, [r1, #-2859]	; 0xfffff4d5
	verify_plg (b, tcv_xmt, "tcv34");
    23e4:	2c000006 	stccs	0, cr0, [r0], {6}
	hblock_t *b = header (pkt);
    23e8:	13310034 	teqne	r1, #52	; 0x34
	verify_plg (b, tcv_xmt, "tcv34");
    23ec:	342d0000 	strtcc	r0, [sp], #-0
    23f0:	02133100 	andseq	r3, r3, #0, 2
    23f4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    23f8:	1331001d 	teqne	r1, #29
    23fc:	06550152 			; <UNDEFINED> instruction: 0x06550152
    2400:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2404:	00000b57 	andeq	r0, r0, r7, asr fp
	dispose (b, plugins [b->attributes.b.plugin] ->
    2408:	03012e2f 	movweq	r2, #7727	; 0x1e2f
}
    240c:	3b0b3a0e 	blcc	2d0c4c <__ccfg+0x2b0ca4>
	dispose (b, plugins [b->attributes.b.plugin] ->
    2410:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    2414:	1113490c 	tstne	r3, ip, lsl #18
    2418:	40011201 	andmi	r1, r1, r1, lsl #4
}
    241c:	0013010a 	andseq	r0, r3, sl, lsl #2
    while(1)
    2420:	00343000 	eorseq	r3, r4, r0
{
    2424:	0b3a0803 	bleq	e84438 <__ccfg+0xe64490>
    SetupTrimDevice();
    2428:	0b39053b 	bleq	e4391c <__ccfg+0xe23974>
    pui32Src = &_etext;
    242c:	06021349 	streq	r1, [r2], -r9, asr #6
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2430:	0a310000 	beq	c42438 <__ccfg+0xc22490>
    __asm("    ldr     r0, =_bss\n"
    2434:	3a0e0300 	bcc	38303c <__ccfg+0x363094>
    2438:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    243c:	0001110b 	andeq	r1, r1, fp, lsl #2
    2440:	010b3200 	mrseq	r3, R11_fiq
    2444:	01120111 	tsteq	r2, r1, lsl r1
   main();
    2448:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    FaultISR();
    244c:	3a0e0301 	bcc	383058 <__ccfg+0x3630b0>
        *pui32Dest++ = *pui32Src++;
    2450:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2454:	010b200b 	tsteq	fp, fp
    2458:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    245c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2464:	13490b39 	movtne	r0, #39737	; 0x9b39
    2468:	05350000 	ldreq	r0, [r5, #-0]!
    246c:	3a0e0300 	bcc	383074 <__ccfg+0x3630cc>
static byte get_byte () {
    2470:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2478:	36000006 	strcc	r0, [r0], -r6
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    247c:	1331001d 	teqne	r1, #29
    2480:	01120111 	tsteq	r2, r1, lsl r1
		if (ee_inp)
    2484:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
			b |= 1;
    2488:	00000b57 	andeq	r0, r0, r7, asr fp
    248c:	55010b37 	strpl	r0, [r1, #-2871]	; 0xfffff4c9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2490:	00130106 	andseq	r0, r3, r6, lsl #2
	for (b = 0, i = 0; i < 8; i++) {
    2494:	011d3800 	tsteq	sp, r0, lsl #16
}
    2498:	01111331 	tsteq	r1, r1, lsr r3
    249c:	0b580112 	bleq	16028ec <__ccfg+0x15e2944>
    24a0:	0b570559 	bleq	15c3a0c <__ccfg+0x15a3a64>
static void put_byte (byte b) {
    24a4:	00001301 	andeq	r1, r0, r1, lsl #6
    24a8:	31000539 	tstcc	r0, r9, lsr r5
    24ac:	3a000013 	bcc	2500 <wwait+0x14>
    24b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		if (b & 0x80)
    24b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
    24b8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24bc:	00000b57 	andeq	r0, r0, r7, asr fp
	for (i = 0; i < 8; i++) {
    24c0:	03012e3b 	movweq	r2, #7739	; 0x1e3b
		b <<= 1;
    24c4:	3b0b3a0e 	blcc	2d0d04 <__ccfg+0x2b0d5c>
	for (i = 0; i < 8; i++) {
    24c8:	110b3905 	tstne	fp, r5, lsl #18
}
    24cc:	40011201 	andmi	r1, r1, r1, lsl #4
    24d0:	0013010a 	andseq	r0, r3, sl, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    24d4:	002e3c00 	eoreq	r3, lr, r0, lsl #24
    24d8:	0b3a0e03 	bleq	e85cec <__ccfg+0xe65d44>
	put_byte (cmd);
    24dc:	0b39053b 	bleq	e439d0 <__ccfg+0xe23a28>
    24e0:	00000b20 	andeq	r0, r0, r0, lsr #22
}
    24e4:	03002e3d 	movweq	r2, #3645	; 0xe3d
    24e8:	3b0b3a0e 	blcc	2d0d28 <__ccfg+0x2b0d80>
static void wwait (word st, word del) {
    24ec:	110b3905 	tstne	fp, r5, lsl #18
    24f0:	40011201 	andmi	r1, r1, r1, lsl #4
    24f4:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
	while (dopen && (rdsr () & 1)) {
    24f8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    24fc:	0b3b0b3a 	bleq	ec51ec <__ccfg+0xea5244>
    2500:	0b200b39 	bleq	8051ec <__ccfg+0x7e5244>
    2504:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
	put_byte (CMD_RDSR);
    2508:	3a0e0301 	bcc	383114 <__ccfg+0x36316c>
	r = get_byte ();
    250c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2510:	200c270b 	andcs	r2, ip, fp, lsl #14
	while (dopen && (rdsr () & 1)) {
    2514:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    2518:	00054000 	andeq	r4, r5, r0
		if (st == WNONE)
    251c:	0b3a0803 	bleq	e84530 <__ccfg+0xe64588>
    2520:	0b390b3b 	bleq	e45214 <__ccfg+0xe2526c>
			mdelay (1);
    2524:	00001349 	andeq	r1, r0, r9, asr #6
    2528:	03000541 	movweq	r0, #1345	; 0x541
			delay (del, st);
    252c:	3b0b3a0e 	blcc	2d0d6c <__ccfg+0x2b0dc4>
    2530:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			release;
    2534:	42000013 	andmi	r0, r0, #19
    2538:	08030034 	stmdaeq	r3, {r2, r4, r5}
    253c:	0b3b0b3a 	bleq	ec522c <__ccfg+0xea5284>
static void ready () {
    2540:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (dopen) {
    2544:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
		wwait (WNONE, 1);
    2548:	3a0e0301 	bcc	383154 <__ccfg+0x3631ac>
    254c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2550:	200c270b 	andcs	r2, ip, fp, lsl #14
	dstat = 0;
    2554:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    2558:	00054400 	andeq	r4, r5, r0, lsl #8
    255c:	0b3a0e03 	bleq	e85d70 <__ccfg+0xe65dc8>
    2560:	0b39053b 	bleq	e43a54 <__ccfg+0xe23aac>
	udelay (1);
    2564:	00001349 	andeq	r1, r0, r9, asr #6
    2568:	03002e45 	movweq	r2, #3653	; 0xe45
	udelay (1);
    256c:	3b0b3a0e 	blcc	2d0dac <__ccfg+0x2b0e04>
		dopen = DOPEN_TEMP;
    2570:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    2574:	000b200c 	andeq	r2, fp, ip
    2578:	002e4600 	eoreq	r4, lr, r0, lsl #12
    257c:	0b3a0e03 	bleq	e85d90 <__ccfg+0xe65de8>
static void cclose () {
    2580:	0b390b3b 	bleq	e45274 <__ccfg+0xe252cc>
	if (dopen == DOPEN_TEMP) {
    2584:	0b200c27 	bleq	805628 <__ccfg+0x7e5680>
    2588:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
		wwait (WNONE, 1);
    258c:	11133101 	tstne	r3, r1, lsl #2
    2590:	40011201 	andmi	r1, r1, r1, lsl #4
	cmd_0 (CMD_DP);
    2594:	0013010a 	andseq	r0, r3, sl, lsl #2
    2598:	00054800 	andeq	r4, r5, r0, lsl #16
		dopen = 0;
    259c:	06021331 			; <UNDEFINED> instruction: 0x06021331
}
    25a0:	1d490000 	stclne	0, cr0, [r9, #-0]
word ee_open () {
    25a4:	11133101 	tstne	r3, r1, lsl #2
	ready ();
    25a8:	58011201 	stmdapl	r1, {r0, r9, ip}
	dopen = DOPEN_PERM;
    25ac:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    25b0:	4a00000b 	bmi	25e4 <ser_out+0x18>
}
    25b4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	if (dopen) {
    25b8:	01120111 	tsteq	r2, r1, lsl r1
    25bc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		dopen = DOPEN_TEMP;
    25c0:	00000b57 	andeq	r0, r0, r7, asr fp
		cclose ();
    25c4:	31012e4b 	tstcc	r1, fp, asr #28
}
    25c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
int ser_out (word st, const char *m) {
    25cc:	000a4001 	andeq	r4, sl, r1
	if ((prcs = running (__outserial)) != 0) {
    25d0:	00344c00 	eorseq	r4, r4, r0, lsl #24
    25d4:	061c1331 			; <UNDEFINED> instruction: 0x061c1331
    25d8:	01000000 	mrseq	r0, (UNDEF: 0)
		join (prcs, st);
    25dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		release;
    25e0:	0e030b13 	vmoveq.32	d3[0], r0
	if (*m)
    25e4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		prcs = strlen (m) +1;
    25e8:	06100111 			; <UNDEFINED> instruction: 0x06100111
    25ec:	24020000 	strcs	r0, [r2], #-0
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    25f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    25f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    25f8:	00160300 	andseq	r0, r6, r0, lsl #6
		umwait (st);
    25fc:	0b3a0e03 	bleq	e85e10 <__ccfg+0xe65e68>
    2600:	0b390b3b 	bleq	e452f4 <__ccfg+0xe2534c>
		prcs =  m [1] + 3;
    2604:	00001349 	andeq	r1, r0, r9, asr #6
	if (*m)
    2608:	0b002404 	bleq	b620 <__exidx_end+0x5b44>
		strcpy (buf, m);
    260c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2610:	05000008 	streq	r0, [r0, #-8]
	if (runstrand (__outserial, buf) == 0) {
    2614:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2618:	0b3a0b0b 	bleq	e8524c <__ccfg+0xe652a4>
		ufree (buf);
    261c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2620:	0d060000 	stceq	0, cr0, [r6, #-0]
		memcpy (buf, m, prcs);
    2624:	490e0300 	stmdbmi	lr, {r8, r9}
    2628:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    262c:	0700000c 	streq	r0, [r0, -ip]
}
    2630:	0b0b000f 	bleq	2c2674 <__ccfg+0x2a26cc>
    2634:	26080000 	strcs	r0, [r8], -r0
int ser_in (word st, char *buf, int len) {
    2638:	00134900 	andseq	r4, r3, r0, lsl #18
    263c:	00350900 	eorseq	r0, r5, r0, lsl #18
	if (len == 0)
    2640:	00001349 	andeq	r1, r0, r9, asr #6
	if (__inpline == NULL) {
    2644:	0b000f0a 	bleq	6274 <__exidx_end+0x798>
		if ((prcs = running (__inserial)) == 0) {
    2648:	0013490b 	andseq	r4, r3, fp, lsl #18
    264c:	01130b00 	tsteq	r3, r0, lsl #22
			prcs = runthread (__inserial);
    2650:	0b3a0b0b 	bleq	e85284 <__ccfg+0xe652dc>
    2654:	0b390b3b 	bleq	e45348 <__ccfg+0xe253a0>
			if (prcs == 0) {
    2658:	00001301 	andeq	r1, r0, r1, lsl #6
				npwait (st);
    265c:	03000d0c 	movweq	r0, #3340	; 0xd0c
		release;
    2660:	3b0b3a0e 	blcc	2d0ea0 <__ccfg+0x2b0ef8>
		join (prcs, st);
    2664:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2668:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	if (*__inpline == NULL) // bin cmd
    266c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2670:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
	if (prcs >= len)
    2674:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		prcs = len-1;
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
	memcpy (buf, __inpline, prcs);
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2680:	00000b38 	andeq	r0, r0, r8, lsr fp
    2684:	0300340e 	movweq	r3, #1038	; 0x40e
	ufree (__inpline);
    2688:	3b0b3a0e 	blcc	2d0ec8 <__ccfg+0x2b0f20>
	__inpline = NULL;
    268c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (*buf) // if it's NULL, it's a bin cmd
    2690:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		buf [prcs] = '\0';
    2694:	0f00000c 	svceq	0x0000000c
}
    2698:	13490101 	movtne	r0, #37121	; 0x9101
		prcs = strlen (__inpline);
    269c:	00001301 	andeq	r1, r0, r1, lsl #6
    26a0:	00002110 	andeq	r2, r0, r0, lsl r1
		return 0;
    26a4:	00161100 	andseq	r1, r6, r0, lsl #2
    26a8:	0b3a0e03 	bleq	e85ebc <__ccfg+0xe65f14>
    26ac:	0b39053b 	bleq	e43ba0 <__ccfg+0xe23bf8>
int ser_outf (word st, const char *m, ...) {
    26b0:	00001349 	andeq	r1, r0, r9, asr #6
    26b4:	27011512 	smladcs	r1, r2, r5, r1
	if ((prcs = running (__outserial)) != 0) {
    26b8:	0013010c 	andseq	r0, r3, ip, lsl #2
    26bc:	00051300 	andeq	r1, r5, r0, lsl #6
		join (prcs, st);
    26c0:	00001349 	andeq	r1, r0, r9, asr #6
    26c4:	03003414 	movweq	r3, #1044	; 0x414
		release;
    26c8:	3b0b3a0e 	blcc	2d0f08 <__ccfg+0x2b0f60>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    26d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    26d4:	1500000c 	strne	r0, [r0, #-12]
		umwait (st);
    26d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    26dc:	13011349 	movwne	r1, #4937	; 0x1349
	if (runstrand (__outserial, buf) == 0) {
    26e0:	13160000 	tstne	r6, #0
    26e4:	3a0b0b01 	bcc	2c52f0 <__ccfg+0x2a5348>
    26e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		ufree (buf);
    26ec:	0013010b 	andseq	r0, r3, fp, lsl #2
		npwait (st);
    26f0:	000d1700 	andeq	r1, sp, r0, lsl #14
}
    26f4:	0b3a0e03 	bleq	e85f08 <__ccfg+0xe65f60>
    26f8:	0b39053b 	bleq	e43bec <__ccfg+0xe23c44>
    26fc:	0b381349 	bleq	e07428 <__ccfg+0xde7480>
    2700:	13180000 	tstne	r8, #0
int ser_inf (word st, const char *fmt, ...) {
    2704:	0b0e0301 	bleq	383310 <__ccfg+0x363368>
    2708:	3b0b3a0b 	blcc	2d0f3c <__ccfg+0x2b0f94>
	if (fmt == NULL)
    270c:	010b3905 	tsteq	fp, r5, lsl #18
	if (__inpline == NULL) {
    2710:	19000013 	stmdbne	r0, {r0, r1, r4}
		if ((prcs = running (__inserial)) == 0) {
    2714:	13490021 	movtne	r0, #36897	; 0x9021
    2718:	00000b2f 	andeq	r0, r0, pc, lsr #22
			prcs = runthread (__inserial);
    271c:	0300341a 	movweq	r3, #1050	; 0x41a
    2720:	3b0b3a0e 	blcc	2d0f60 <__ccfg+0x2b0fb8>
			if (prcs == 0) {
    2724:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				npwait (st);
    2728:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
		release;
    272c:	1b00000a 	blne	275c <ser_inf+0x58>
		join (prcs, st);
    2730:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2734:	0b3b0b3a 	bleq	ec5424 <__ccfg+0xea547c>
	va_start (ap, fmt);
    2738:	13490b39 	movtne	r0, #39737	; 0x9b39
	prcs = vscan (__inpline, fmt, ap);
    273c:	00000a02 	andeq	r0, r0, r2, lsl #20
    2740:	03012e1c 	movweq	r2, #7708	; 0x1e1c
	ufree (__inpline);
    2744:	3b0b3a0e 	blcc	2d0f84 <__ccfg+0x2b0fdc>
	__inpline = NULL;
    2748:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
    274c:	1113490c 	tstne	r3, ip, lsl #18
    2750:	40011201 	andmi	r1, r1, r1, lsl #4
    2754:	0013010a 	andseq	r0, r3, sl, lsl #2
		return 0;
    2758:	00051d00 	andeq	r1, r5, r0, lsl #26
    275c:	0b3a0803 	bleq	e84770 <__ccfg+0xe647c8>
    2760:	0b390b3b 	bleq	e45454 <__ccfg+0xe254ac>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2764:	06021349 	streq	r1, [r2], -r9, asr #6
    2768:	051e0000 	ldreq	r0, [lr, #-0]
    276c:	3a0e0300 	bcc	383374 <__ccfg+0x3633cc>
	RF_cmdFs.frequency = 
    2770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    2774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2778:	1f00000a 	svcne	0x0000000a
    277c:	08030005 	stmdaeq	r3, {r0, r2}
    2780:	0b3b0b3a 	bleq	ec5470 <__ccfg+0xea54c8>
static int option (int opt, address val) {
    2784:	13490b39 	movtne	r0, #39737	; 0x9b39
    2788:	00000a02 	andeq	r0, r0, r2, lsl #20
    278c:	03012e20 	movweq	r2, #7712	; 0x1e20
    2790:	3b0b3a0e 	blcc	2d0fd0 <__ccfg+0x2b1028>
    2794:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2798:	2013490c 	andscs	r4, r3, ip, lsl #18
    279c:	0013010b 	andseq	r0, r3, fp, lsl #2
    27a0:	00052100 	andeq	r2, r5, r0, lsl #2
    27a4:	0b3a0803 	bleq	e847b8 <__ccfg+0xe64810>
    27a8:	0b390b3b 	bleq	e4549c <__ccfg+0xe254f4>
    27ac:	00001349 	andeq	r1, r0, r9, asr #6
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    27b0:	03000522 	movweq	r0, #1314	; 0x522
    27b4:	3b0b3a0e 	blcc	2d0ff4 <__ccfg+0x2b104c>
			goto RVal;
    27b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			_BIS (dstate, DSTATE_RXON);
    27bc:	23000013 	movwcs	r0, #19
    27c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
	int ret = 0;
    27c4:	0b3b0b3a 	bleq	ec54b4 <__ccfg+0xea550c>
			p_trigger (drvprcs, qevent);
    27c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    27cc:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    27d0:	11133101 	tstne	r3, r1, lsl #2
    27d4:	40011201 	andmi	r1, r1, r1, lsl #4
    27d8:	2500000a 	strcs	r0, [r0, #-10]
    27dc:	13310005 	teqne	r1, #5
    27e0:	00000602 	andeq	r0, r0, r2, lsl #12
    27e4:	31003426 	tstcc	r0, r6, lsr #8
    27e8:	27000013 	smladcs	r0, r3, r0, r0
    27ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
    27f0:	01120111 	tsteq	r2, r1, lsl r1
			_BIC (dstate, DSTATE_RXON);
    27f4:	0b590b58 	bleq	164555c <__ccfg+0x16255b4>
    27f8:	00000b57 	andeq	r0, r0, r7, asr fp
			statid = (val == NULL) ? 0 : *val;
    27fc:	31000528 	tstcc	r0, r8, lsr #10
    2800:	000a0213 	andeq	r0, sl, r3, lsl r2
	int ret = 0;
    2804:	00052900 	andeq	r2, r5, r0, lsl #18
			ret = (int) statid;
    2808:	00001331 	andeq	r1, r0, r1, lsr r3
	if (val != NULL)
    280c:	01110100 	tsteq	r1, r0, lsl #2
		*val = ret;
    2810:	0b130e25 	bleq	4c60ac <__ccfg+0x4a6104>
			ret = rbuffl + 2;
    2814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2818:	01110655 	tsteq	r1, r5, asr r6
			if (val != NULL) {
    281c:	00000610 	andeq	r0, r0, r0, lsl r6
				memcpy (val, &rxstat,
    2820:	0b002402 	bleq	b830 <__exidx_end+0x5d54>
    2824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
				memset (&rxstat, 0, 
    2828:	0300000e 	movweq	r0, #14
    282c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			if (val == NULL)
    2830:	0b3b0b3a 	bleq	ec5520 <__ccfg+0xea5578>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2834:	13490b39 	movtne	r0, #39737	; 0x9b39
    2838:	24040000 	strcs	r0, [r4], #-0
				utimer_set (bckf_timer, *val);
    283c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2840:	0008030b 	andeq	r0, r8, fp, lsl #6
    2844:	00260500 	eoreq	r0, r6, r0, lsl #10
			for (ret = 0; ret < 8; ret++)
    2848:	00001349 	andeq	r1, r0, r9, asr #6
				if (RF_cmdPropRadioDivSetup.txPower
    284c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
					== patable [ret])
    2850:	07000013 	smladeq	r0, r3, r0, r0
				if (RF_cmdPropRadioDivSetup.txPower
    2854:	0b0b0113 	bleq	2c2ca8 <__ccfg+0x2a2d00>
			for (ret = 0; ret < 8; ret++)
    2858:	0b3b0b3a 	bleq	ec5548 <__ccfg+0xea55a0>
    285c:	13010b39 	movwne	r0, #6969	; 0x1b39
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2860:	0d080000 	stceq	0, cr0, [r8, #-0]
    2864:	3a0e0300 	bcc	38346c <__ccfg+0x3634c4>
    2868:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    286c:	0b13490b 	bleq	4d4ca0 <__ccfg+0x4b4cf8>
    2870:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
			_BIS (dstate, DSTATE_IRST);
    2874:	000b380b 	andeq	r3, fp, fp, lsl #16
    2878:	000d0900 	andeq	r0, sp, r0, lsl #18
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
			ret = (int) channel;
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
			goto RVal;
    2884:	0b381349 	bleq	e075b0 <__ccfg+0xde7608>
				(*val > 7) ? 7 : *val;
    2888:	340a0000 	strcc	r0, [sl], #-0
    288c:	3a0e0300 	bcc	383494 <__ccfg+0x3634ec>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2890:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2894:	3f13490b 	svccc	0x0013490b
			plugch ();
    2898:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			_BIS (dstate, DSTATE_IRST);
    289c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    28a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			ret = (int) vrate;
    28a4:	010c0000 	mrseq	r0, (UNDEF: 12)
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28a8:	01134901 	tsteq	r3, r1, lsl #18
    28ac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    28b0:	00000021 	andeq	r0, r0, r1, lsr #32
    28b4:	0300160e 	movweq	r1, #1550	; 0x60e
    28b8:	3b0b3a0e 	blcc	2d10f8 <__ccfg+0x2b1150>
    28bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    28c0:	0f000013 	svceq	0x00000013
    28c4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28c8:	00001301 	andeq	r1, r0, r1, lsl #6
    28cc:	49000510 	stmdbmi	r0, {r4, r8, sl}
    28d0:	11000013 	tstne	r0, r3, lsl r0
    28d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			syserror (EREQPAR, "cc13 op");
    28d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28dc:	13490b39 	movtne	r0, #39737	; 0x9b39
    28e0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    28e4:	13120000 	tstne	r2, #0
    28e8:	3a0b0b01 	bcc	2c54f4 <__ccfg+0x2a554c>
    28ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    28f4:	000d1300 	andeq	r1, sp, r0, lsl #6
    28f8:	0b3a0e03 	bleq	e8610c <__ccfg+0xe66164>
    28fc:	0b39053b 	bleq	e43df0 <__ccfg+0xe23e48>
    2900:	0b381349 	bleq	e0762c <__ccfg+0xde7684>
    2904:	13140000 	tstne	r4, #0
    2908:	0b0e0301 	bleq	383514 <__ccfg+0x36356c>
    290c:	3b0b3a0b 	blcc	2d1140 <__ccfg+0x2b1198>
    2910:	010b3905 	tsteq	fp, r5, lsl #18
static void issue_cmd (lword cmd) {
    2914:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2918:	13490021 	movtne	r0, #36897	; 0x9021
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    291c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2920:	3f012e16 	svccc	0x00012e16
    2924:	3a0e030c 	bcc	38355c <__ccfg+0x3635b4>
		if (res != 0x86)
    2928:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			syserror (EHARDWARE, "hang ic0");
    292c:	110c270b 	tstne	ip, fp, lsl #14
    2930:	40011201 	andmi	r1, r1, r1, lsl #4
		if (cnt-- == 0) {
    2934:	0013010a 	andseq	r0, r3, sl, lsl #2
			diag ("HUP %lx %lx", cmd, res);
    2938:	00051700 	andeq	r1, r5, r0, lsl #14
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
			syserror (EHARDWARE, "hang ic0");
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
		udelay (1);
    2944:	06021349 	streq	r1, [r2], -r9, asr #6
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2948:	34180000 	ldrcc	r0, [r8], #-0
}
    294c:	3a0e0300 	bcc	383554 <__ccfg+0x3635ac>
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2954:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2958:	19000006 	stmdbne	r0, {r1, r2}
static void rx_de () {
    295c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	if ((dstate & DSTATE_RXAC) == 0)
    2960:	0b3b0b3a 	bleq	ec5650 <__ccfg+0xea56a8>
    2964:	00000b39 	andeq	r0, r0, r9, lsr fp
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2968:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
	_BIC (dstate, DSTATE_RXAC);
    296c:	1b000006 	blne	298c <rf_off+0xc>
    2970:	08030034 	stmdaeq	r3, {r2, r4, r5}
}
    2974:	0b3b0b3a 	bleq	ec5664 <__ccfg+0xea56bc>
    2978:	13490b39 	movtne	r0, #39737	; 0x9b39
    297c:	00000a02 	andeq	r0, r0, r2, lsl #20
static void rf_off () {
    2980:	01110100 	tsteq	r1, r0, lsl #2
	if ((dstate & DSTATE_RFON) == 0)
    2984:	0b130e25 	bleq	4c6220 <__ccfg+0x4a6278>
    2988:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	IntDisable (INT_RFC_CPE_0);
    298c:	01110655 	tsteq	r1, r5, asr r6
    2990:	00000610 	andeq	r0, r0, r0, lsl r6
    2994:	0b002402 	bleq	b9a4 <__exidx_end+0x5ec8>
	RFCAdi3VcoLdoVoltageMode (false);
    2998:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	RFCSynthPowerDown ();
    299c:	0300000e 	movweq	r0, #14
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    29a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    29a4:	0b3b0b3a 	bleq	ec5694 <__ccfg+0xea56ec>
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    29a8:	13490b39 	movtne	r0, #39737	; 0x9b39
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29ac:	24040000 	strcs	r0, [r4], #-0
	OSCHF_SwitchToRcOscTurnOffXosc ();
    29b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    29b4:	0008030b 	andeq	r0, r8, fp, lsl #6
    29b8:	00260500 	eoreq	r0, r6, r0, lsl #10
    29bc:	00001349 	andeq	r1, r0, r9, asr #6
	_BIC (dstate, DSTATE_RFON);
    29c0:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    29c4:	07000013 	smladeq	r0, r3, r0, r0
}
    29c8:	0b0b000f 	bleq	2c2a0c <__ccfg+0x2a2a64>
    29cc:	00001349 	andeq	r1, r0, r9, asr #6
    29d0:	0b011308 	bleq	475f8 <__ccfg+0x27650>
    29d4:	3b0b3a0b 	blcc	2d1208 <__ccfg+0x2b1260>
    29d8:	010b390b 	tsteq	fp, fp, lsl #18
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    29dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    29e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    29e4:	0b3b0b3a 	bleq	ec56d4 <__ccfg+0xea572c>
		if (cmd->status == tstat)
    29e8:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (timeout-- == 0) {
    29ec:	0b0d0b0b 	bleq	345620 <__ccfg+0x325678>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    29f0:	0b380b0c 	bleq	e05628 <__ccfg+0xde5680>
    29f4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
			syserror (EHARDWARE, "rt2");
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a00:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		udelay (1);
    2a04:	0b00000b 	bleq	2a38 <rf_on.part.0+0x24>
		if (cmd->status == tstat)
    2a08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
}
    2a0c:	0b3b0b3a 	bleq	ec56fc <__ccfg+0xea5754>
    2a10:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a14:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2a18:	010c0000 	mrseq	r0, (UNDEF: 12)
static void rf_on () {
    2a1c:	01134901 	tsteq	r3, r1, lsl #18
    2a20:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	OSCHF_TurnOnXosc();
    2a24:	00000021 	andeq	r0, r0, r1, lsr #32
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a28:	0300160e 	movweq	r1, #1550	; 0x60e
    2a2c:	3b0b3a0e 	blcc	2d126c <__ccfg+0x2b12c4>
    2a30:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2a34:	0f000013 	svceq	0x00000013
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a38:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2a3c:	00001301 	andeq	r1, r0, r1, lsl #6
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a40:	49000510 	stmdbmi	r0, {r4, r8, sl}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2a44:	11000013 	tstne	r0, r3, lsl r0
	issue_cmd (
    2a48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2a50:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a54:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2a58:	13120000 	tstne	r2, #0
   pPatchTab[80] = 0;
    2a5c:	3a0b0b01 	bcc	2c5668 <__ccfg+0x2a56c0>
   } while (--nIterations);
    2a60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
   pPatchTab[53] = 2;
    2a64:	0013010b 	andseq	r0, r3, fp, lsl #2
    2a68:	000d1300 	andeq	r1, sp, r0, lsl #6
   pPatchTab[55] = 3;
    2a6c:	0b3a0e03 	bleq	e86280 <__ccfg+0xe662d8>
   pPatchTab[110] = 4;
    2a70:	0b39053b 	bleq	e43f64 <__ccfg+0xe23fbc>
   pPatchTab[107] = 5;
    2a74:	0b381349 	bleq	e077a0 <__ccfg+0xde77f8>
   pPatchTab[65] = 6;
    2a78:	13140000 	tstne	r4, #0
    2a7c:	0b0e0301 	bleq	383688 <__ccfg+0x3636e0>
   pPatchTab[57] = 1;
    2a80:	3b0b3a0b 	blcc	2d12b4 <__ccfg+0x2b130c>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a84:	010b3905 	tsteq	fp, r5, lsl #18
   const uint32_t *pS = patchGenfskRfe;
    2a88:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
      t2 = *pS++;
    2a8c:	13490021 	movtne	r0, #36897	; 0x9021
      t4 = *pS++;
    2a90:	00000b2f 	andeq	r0, r0, pc, lsr #22
      t6 = *pS++;
    2a94:	03003416 	movweq	r3, #1046	; 0x416
      t8 = *pS++;
    2a98:	3b0b3a0e 	blcc	2d12d8 <__ccfg+0x2b1330>
      *pD++ = t1;
    2a9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      *pD++ = t2;
    2aa0:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
      *pD++ = t3;
    2aa4:	1700000a 	strne	r0, [r0, -sl]
      *pD++ = t5;
    2aa8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 29f8 <wait_cmd.constprop.0+0x1c>
      *pD++ = t7;
    2aac:	0b3a0e03 	bleq	e862c0 <__ccfg+0xe66318>
   } while (--nIterations);
    2ab0:	0b390b3b 	bleq	e457a4 <__ccfg+0xe257fc>
    2ab4:	01110c27 	tsteq	r1, r7, lsr #24
      *pD++ = t8;
    2ab8:	0a400112 	beq	1002f08 <__ccfg+0xfe2f60>
   } while (--nIterations);
    2abc:	05180000 	ldreq	r0, [r8, #-0]
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2ac0:	3a0e0300 	bcc	3836c8 <__ccfg+0x363720>
   *pD++ = t2;
    2ac4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   *pD++ = t3;
    2ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
   *pD++ = t4;
    2acc:	19000006 	stmdbne	r0, {r1, r2}
   *pD++ = t5;
    2ad0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2ad4:	0b3b0b3a 	bleq	ec57c4 <__ccfg+0xea581c>
	RFCAdi3VcoLdoVoltageMode (true);
    2ad8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2adc:	00000602 	andeq	r0, r0, r2, lsl #12
       	RFCRfTrimSet (&rfTrim);
    2ae0:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2ae4:	1b000006 	blne	2b04 <rf_on.part.0+0xf0>
    2ae8:	08030034 	stmdaeq	r3, {r2, r4, r5}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2aec:	0b3b0b3a 	bleq	ec57dc <__ccfg+0xea5834>
    2af0:	13490b39 	movtne	r0, #39737	; 0x9b39
	issue_cmd ((lword)&cmd_srt);
    2af4:	00000a02 	andeq	r0, r0, r2, lsl #20
    2af8:	01110100 	tsteq	r1, r0, lsl #2
	issue_cmd ((lword)&RF_cmdFs);
    2afc:	0b130e25 	bleq	4c6398 <__ccfg+0x4a63f0>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2b04:	01110655 	tsteq	r1, r5, asr r6
    2b08:	00000610 	andeq	r0, r0, r0, lsl r6
	IntEnable (INT_RFC_CPE_0);
    2b0c:	0b002402 	bleq	bb1c <__exidx_end+0x6040>
	_BIC (dstate, DSTATE_IRST);
    2b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2b14:	0300000e 	movweq	r0, #14
    2b18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b1c:	0b3b0b3a 	bleq	ec580c <__ccfg+0xea5864>
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b20:	13490b39 	movtne	r0, #39737	; 0x9b39
	IntEnable (INT_RFC_CPE_0);
    2b24:	24040000 	strcs	r0, [r4], #-0
    2b28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
}
    2b2c:	0008030b 	andeq	r0, r8, fp, lsl #6
	IntEnable (INT_RFC_CPE_0);
    2b30:	01130500 	tsteq	r3, r0, lsl #10
    2b34:	0b0b0e03 	bleq	2c6348 <__ccfg+0x2a63a0>
    2b38:	0b3b0b3a 	bleq	ec5828 <__ccfg+0xea5880>
    2b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b40:	03000d06 	movweq	r0, #3334	; 0xd06
    2b44:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2b48:	000c340b 	andeq	r3, ip, fp, lsl #8
    2b4c:	000f0700 	andeq	r0, pc, r0, lsl #14
    2b50:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2b54:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    2b58:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2b5c:	13490035 	movtne	r0, #36917	; 0x9035
    2b60:	0f0a0000 	svceq	0x000a0000
    2b64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2b68:	0b000013 	bleq	2bbc <rx_int_enable+0x28>
    2b6c:	0b0b0113 	bleq	2c2fc0 <__ccfg+0x2a3018>
    2b70:	0b3b0b3a 	bleq	ec5860 <__ccfg+0xea58b8>
    2b74:	13010b39 	movwne	r0, #6969	; 0x1b39
    2b78:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2b7c:	3a0e0300 	bcc	383784 <__ccfg+0x3637dc>
    2b80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b84:	0b13490b 	bleq	4d4fb8 <__ccfg+0x4b5010>
    2b88:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2b8c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2b90:	000d0d00 	andeq	r0, sp, r0, lsl #26
static void rx_int_enable () {
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
    2b9c:	0b381349 	bleq	e078c8 <__ccfg+0xde7920>
    2ba0:	340e0000 	strcc	r0, [lr], #-0
    2ba4:	3a0e0300 	bcc	3837ac <__ccfg+0x363804>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2ba8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2bac:	3f13490b 	svccc	0x0013490b
    2bb0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2bb4:	01010f00 	tsteq	r1, r0, lsl #30
    2bb8:	13011349 	movwne	r1, #4937	; 0x1349
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bbc:	21100000 	tstcs	r0, r0
    2bc0:	11000000 	mrsne	r0, (UNDEF: 0)
    2bc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bd0:	15120000 	ldrne	r0, [r2, #-0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2bd4:	010c2701 	tsteq	ip, r1, lsl #14
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bd8:	13000013 	movwne	r0, #19
    2bdc:	13490005 	movtne	r0, #36869	; 0x9005
			nr++;
    2be0:	34140000 	ldrcc	r0, [r4], #-0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2be4:	3a0e0300 	bcc	3837ec <__ccfg+0x363844>
    2be8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bec:	3f13490b 	svccc	0x0013490b
    2bf0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				__dp [pl + 1] = __dp [pl] - 128;
    2bf4:	01131500 	tsteq	r3, r0, lsl #10
				pl = __dp [1] + 2;
    2bf8:	0b3a0b0b 	bleq	e8582c <__ccfg+0xe65884>
				__dp [pl + 1] = __dp [pl] - 128;
    2bfc:	0b39053b 	bleq	e440f0 <__ccfg+0xe24148>
    2c00:	00001301 	andeq	r1, r0, r1, lsl #6
				__dp [pl] = 0;
    2c04:	03000d16 	movweq	r0, #3350	; 0xd16
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c08:	3b0b3a0e 	blcc	2d1448 <__ccfg+0x2b14a0>
    2c0c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2c10:	000b3813 	andeq	r3, fp, r3, lsl r8
			db->status = DATA_ENTRY_PENDING;
    2c14:	01131700 	tsteq	r3, r0, lsl #14
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c18:	0b0b0e03 	bleq	2c642c <__ccfg+0x2a6484>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				diag ("BAD RX");
    2c20:	13010b39 	movwne	r0, #6969	; 0x1b39
    2c24:	21180000 	tstcs	r8, r0
	if (nr) {
    2c28:	2f134900 	svccs	0x00134900
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c2c:	1900000b 	stmdbne	r0, {r0, r1, r3}
}
    2c30:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2b80 <rf_on.part.0+0x16c>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c34:	0b3a0e03 	bleq	e86448 <__ccfg+0xe664a0>
    2c38:	0b390b3b 	bleq	e4592c <__ccfg+0xe25984>
    2c3c:	13490c27 	movtne	r0, #39975	; 0x9c27
}
    2c40:	01120111 	tsteq	r2, r1, lsl r1
    2c44:	13010a40 	movwne	r0, #6720	; 0x1a40
    2c48:	051a0000 	ldreq	r0, [sl, #-0]
    2c4c:	3a080300 	bcc	203854 <__ccfg+0x1e38ac>
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c58:	1b000006 	blne	2c78 <cc1350_driver+0x14>
    2c5c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
thread (cc1350_driver)
    2c64:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c68:	00000602 	andeq	r0, r0, r2, lsl #12
    2c6c:	03000a1c 	movweq	r0, #2588	; 0xa1c
    2c70:	3b0b3a0e 	blcc	2d14b0 <__ccfg+0x2b1508>
    2c74:	110b390b 	tstne	fp, fp, lsl #18
		if (dstate & DSTATE_IRST) {
    2c78:	1d000001 	stcne	0, cr0, [r0, #-4]
    2c7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2bcc <rx_int_enable+0x38>
    2c80:	0b3a0e03 	bleq	e86494 <__ccfg+0xe664ec>
			rf_off ();
    2c84:	0b390b3b 	bleq	e45978 <__ccfg+0xe259d0>
			_BIC (dstate,
    2c88:	13490c27 	movtne	r0, #39975	; 0x9c27
    2c8c:	01120111 	tsteq	r2, r1, lsl r1
		if (dstate & DSTATE_RXAC) {
    2c90:	00000a40 	andeq	r0, r0, r0, asr #20
    2c94:	0300341e 	movweq	r3, #1054	; 0x41e
			if ((dstate & DSTATE_RXON) == 0)
    2c98:	3b0b3a08 	blcc	2d14c0 <__ccfg+0x2b1518>
				rx_de ();
    2c9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (paylen == 0) {
    2ca0:	000a0213 	andeq	r0, sl, r3, lsl r2
    2ca4:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2ca8:	0b3a0e03 	bleq	e864bc <__ccfg+0xe66514>
    2cac:	0b390b3b 	bleq	e459a0 <__ccfg+0xe259f8>
    2cb0:	01110c27 	tsteq	r1, r7, lsr #24
    2cb4:	0a400112 	beq	1003104 <__ccfg+0xfe315c>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cb8:	13010a48 	movwne	r0, #6728	; 0x1a48
    2cbc:	05200000 	streq	r0, [r0, #-0]!
    2cc0:	3a080300 	bcc	2038c8 <__ccfg+0x1e3920>
    2cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ccc:	2100000a 	tstcs	r0, sl
    2cd0:	0803000a 	stmdaeq	r3, {r1, r3}
    2cd4:	0b3b0b3a 	bleq	ec59c4 <__ccfg+0xea5a1c>
		} else if (dstate & DSTATE_RXON) {
    2cd8:	01110b39 	tsteq	r1, r9, lsr fp
	if (dstate & DSTATE_RFON)
    2cdc:	0b220000 	bleq	882ce4 <__ccfg+0x862d3c>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2ce0:	01065501 	tsteq	r6, r1, lsl #10
		re->status = DATA_ENTRY_PENDING;
    2ce4:	23000013 	movwcs	r0, #19
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2ce8:	08030034 	stmdaeq	r3, {r2, r4, r5}
	issue_cmd ((lword)&RF_cmdPropRx);
    2cec:	0b3b0b3a 	bleq	ec59dc <__ccfg+0xea5a34>
	_BIS (dstate, DSTATE_RXAC);
    2cf0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2cf4:	0b240000 	bleq	902cfc <__ccfg+0x8e2d54>
    2cf8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2cfc:	00130101 	andseq	r0, r3, r1, lsl #2
	if (dstate & DSTATE_RXAC)
    2d00:	010b2500 	tsteq	fp, r0, lsl #10
    2d04:	01120111 	tsteq	r2, r1, lsl r1
				if (statid != 0xffff)
    2d08:	01000000 	mrseq	r0, (UNDEF: 0)
    2d0c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d10:	0e030b13 	vmoveq.32	d3[0], r0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d14:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		if (paylen == 0) {
    2d18:	06100111 			; <UNDEFINED> instruction: 0x06100111
			wait (qevent, DR_LOOP);
    2d1c:	24020000 	strcs	r0, [r2], #-0
    2d20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			if (dstate & DSTATE_RXAC) {
    2d24:	000e030b 	andeq	r0, lr, fp, lsl #6
    2d28:	00160300 	andseq	r0, r6, r0, lsl #6
				rx_int_enable ();
    2d2c:	0b3a0e03 	bleq	e86540 <__ccfg+0xe66598>
			release;
    2d30:	0b390b3b 	bleq	e45a24 <__ccfg+0xe25a7c>
			} else if (dstate & DSTATE_RFON) {
    2d34:	00001349 	andeq	r1, r0, r9, asr #6
				delay (offdelay, DR_GOOF);
    2d38:	0b002404 	bleq	bd50 <__exidx_end+0x6274>
    2d3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2d40:	05000008 	streq	r0, [r0, #-8]
		if (bckf_timer) {
    2d44:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			wait (qevent, DR_LOOP);
    2d48:	0b3a0b0b 	bleq	e8597c <__ccfg+0xe659d4>
    2d4c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2d50:	0d060000 	stceq	0, cr0, [r6, #-0]
			delay (bckf_timer, DR_LOOP);
    2d54:	490e0300 	stmdbmi	lr, {r8, r9}
    2d58:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
			if (dstate & DSTATE_RXAC)
    2d5c:	0700000c 	streq	r0, [r0, -ip]
    2d60:	0b0b000f 	bleq	2c2da4 <__ccfg+0x2a2dfc>
	if (dstate & DSTATE_RFON)
    2d64:	26080000 	strcs	r0, [r8], -r0
    2d68:	00134900 	andseq	r4, r3, r0, lsl #18
		rx_de ();
    2d6c:	00350900 	eorseq	r0, r5, r0, lsl #18
		RF_cmdPropTx . status = 0;
    2d70:	00001349 	andeq	r1, r0, r9, asr #6
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d74:	0b000f0a 	bleq	69a4 <__exidx_end+0xec8>
    2d78:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d7c:	01130b00 	tsteq	r3, r0, lsl #22
		issue_cmd ((lword)&cmd_cs);
    2d80:	0b3a0b0b 	bleq	e859b4 <__ccfg+0xe65a0c>
		if (dstate & DSTATE_IRST)
    2d84:	0b390b3b 	bleq	e45a78 <__ccfg+0xe25ad0>
    2d88:	00001301 	andeq	r1, r0, r1, lsl #6
    2d8c:	03000d0c 	movweq	r0, #3340	; 0xd0c
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d90:	3b0b3a0e 	blcc	2d15d0 <__ccfg+0x2b1628>
    2d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			delay (1, DR_XMIT);
    2d98:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d9c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2da0:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2da4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
				RF_cmdPropTx . status = 0;
    2db0:	00000b38 	andeq	r0, r0, r8, lsr fp
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2db4:	0300340e 	movweq	r3, #1038	; 0x40e
				issue_cmd ((lword)&RF_cmdPropTx);
    2db8:	3b0b3a0e 	blcc	2d15f8 <__ccfg+0x2b1650>
				proceed (DR_XMIT);
    2dbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2dc0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			txtries++;
    2dc4:	0f00000c 	svceq	0x0000000c
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2dc8:	13490101 	movtne	r0, #37121	; 0x9101
    2dcc:	00001301 	andeq	r1, r0, r1, lsl #6
    2dd0:	00002110 	andeq	r2, r0, r0, lsl r1
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dd4:	00161100 	andseq	r1, r6, r0, lsl #2
		goto DR_LOOP__;
    2dd8:	0b3a0e03 	bleq	e865ec <__ccfg+0xe66644>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ddc:	0b39053b 	bleq	e442d0 <__ccfg+0xe24328>
		paylen = 0;
    2de0:	00001349 	andeq	r1, r0, r9, asr #6
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2de4:	27011512 	smladcs	r1, r2, r5, r1
		txtries = 0;
    2de8:	0013010c 	andseq	r0, r3, ip, lsl #2
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dec:	00051300 	andeq	r1, r5, r0, lsl #6
    2df0:	00001349 	andeq	r1, r0, r9, asr #6
    2df4:	03003414 	movweq	r3, #1044	; 0x414
    2df8:	3b0b3a0e 	blcc	2d1638 <__ccfg+0x2b1690>
    2dfc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		    tcvphy_top (physid) == NULL)
    2e00:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2e04:	1500000c 	strne	r0, [r0, #-12]
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e08:	0b0b0113 	bleq	2c325c <__ccfg+0x2a32b4>
    2e0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			rf_off ();
    2e10:	13010b39 	movwne	r0, #6969	; 0x1b39
endthread
    2e14:	0d160000 	ldceq	0, cr0, [r6, #-0]
    2e18:	3a0e0300 	bcc	383a20 <__ccfg+0x363a78>
    2e1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e20:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e24:	1700000b 	strne	r0, [r0, -fp]
    2e28:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2e2c:	0b3a0b0b 	bleq	e85a60 <__ccfg+0xe65ab8>
    2e30:	0b39053b 	bleq	e44324 <__ccfg+0xe2437c>
    2e34:	00001301 	andeq	r1, r0, r1, lsl #6
    2e38:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    2e3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2e40:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    2e44:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2e48:	0b3b0b3a 	bleq	ec5b38 <__ccfg+0xea5b90>
    2e4c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2e50:	01111349 	tsteq	r1, r9, asr #6
void RFCCPE0IntHandler (void) {
    2e54:	0a400112 	beq	10032a4 <__ccfg+0xfe32fc>
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e58:	00001301 	andeq	r1, r0, r1, lsl #6
		_BIS (dstate, DSTATE_IRST);
    2e5c:	0300051a 	movweq	r0, #1306	; 0x51a
    2e60:	3b0b3a08 	blcc	2d1688 <__ccfg+0x2b16e0>
    2e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e68:	00060213 	andeq	r0, r6, r3, lsl r2
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e6c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2e70:	0b3a0803 	bleq	e84e84 <__ccfg+0xe64edc>
	p_trigger (drvprcs, qevent);
    2e74:	0b390b3b 	bleq	e45b68 <__ccfg+0xe25bc0>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e78:	06021349 	streq	r1, [r2], -r9, asr #6
    2e7c:	0a1c0000 	beq	702e84 <__ccfg+0x6e2edc>
    2e80:	3a0e0300 	bcc	383a88 <__ccfg+0x363ae0>
    2e84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e88:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2e8c:	0111010b 	tsteq	r1, fp, lsl #2
    2e90:	13010112 	movwne	r0, #4370	; 0x1112
    2e94:	341e0000 	ldrcc	r0, [lr], #-0
    2e98:	3a080300 	bcc	203aa0 <__ccfg+0x1e3af8>
    2e9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	RISE_N_SHINE;
    2ea0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ea4:	1f00000a 	svcne	0x0000000a
    2ea8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
}
    2eac:	00001301 	andeq	r1, r0, r1, lsl #6
    2eb0:	03003420 	movweq	r3, #1056	; 0x420
    2eb4:	3b0b3a08 	blcc	2d16dc <__ccfg+0x2b1734>
    2eb8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2ebc:	21000013 	tstcs	r0, r3, lsl r0
    2ec0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
void phys_cc1350 (int phy, int mbs) {
    2ec4:	01000000 	mrseq	r0, (UNDEF: 0)
	if (rbuffl != 0)
    2ec8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ecc:	0e030b13 	vmoveq.32	d3[0], r0
		syserror (ETOOMANY, "cc13");
    2ed0:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
		syserror (EREQPAR, "cc13 mb");
    2ed4:	24020000 	strcs	r0, [r2], #-0
	if (mbs == 0)
    2ed8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2edc:	000e030b 	andeq	r0, lr, fp, lsl #6
		syserror (EREQPAR, "cc13 mb");
    2ee0:	00160300 	andseq	r0, r6, r0, lsl #6
    2ee4:	0b3a0e03 	bleq	e866f8 <__ccfg+0xe66750>
	i = 0;
    2ee8:	0b390b3b 	bleq	e45bdc <__ccfg+0xe25c34>
	rbuffl = (byte) mbs;
    2eec:	00001349 	andeq	r1, r0, r9, asr #6
		db->config.type = 0;	// General (data in structure)
    2ef0:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
	rbuffl = (byte) mbs;
    2ef4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2ef8:	0b0b0024 	bleq	2c2f90 <__ccfg+0x2a2fe8>
    2efc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		if (db == NULL)
    2f00:	16060000 	strne	r0, [r6], -r0
			syserror (EMALLOC, "cc13");
    2f04:	3a0e0300 	bcc	383b0c <__ccfg+0x363b64>
    2f08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f0c:	0013490b 	andseq	r4, r3, fp, lsl #18
		db->status = DATA_ENTRY_PENDING;
    2f10:	01170700 	tsteq	r7, r0, lsl #14
		if (i)
    2f14:	0b3a0b0b 	bleq	e85b48 <__ccfg+0xe65ba0>
			da->pNextEntry = (byte*) db;
    2f18:	0b390b3b 	bleq	e45c0c <__ccfg+0xe25c64>
		db->length = rbuffl + 2;
    2f1c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f20:	03000d08 	movweq	r0, #3336	; 0xd08
		db->config.type = 0;	// General (data in structure)
    2f24:	3b0b3a0e 	blcc	2d1764 <__ccfg+0x2b17bc>
		db->length = rbuffl + 2;
    2f28:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	db->pNextEntry = (byte*) re;
    2f2c:	09000013 	stmdbeq	r0, {r0, r1, r4}
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f30:	13490101 	movtne	r0, #37121	; 0x9101
    2f34:	00001301 	andeq	r1, r0, r1, lsl #6
	if (rbuffs == NULL)
    2f38:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
	rbuffs->pCurrEntry = (byte*) re;
    2f3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
	rbuffs->pLastEntry = NULL;
    2f40:	01130b00 	tsteq	r3, r0, lsl #22
    2f44:	0b3a0b0b 	bleq	e85b78 <__ccfg+0xe65bd0>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f48:	0b390b3b 	bleq	e45c3c <__ccfg+0xe25c94>
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f50:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2f54:	3b0b3a0e 	blcc	2d1794 <__ccfg+0x2b17ec>
	rbuffl -= 2;
    2f58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f5c:	000b3813 	andeq	r3, fp, r3, lsl r8
	rbuffl -= 2;
    2f60:	000f0d00 	andeq	r0, pc, r0, lsl #26
	physid = phy;
    2f64:	00000b0b 	andeq	r0, r0, fp, lsl #22
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f68:	0301130e 	movweq	r1, #4878	; 0x130e
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f6c:	3a0b0b0e 	bcc	2c5bac <__ccfg+0x2a5c04>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f74:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f78:	000d0f00 	andeq	r0, sp, r0, lsl #30
	utimer_add (&bckf_timer);
    2f7c:	0b3a0803 	bleq	e84f90 <__ccfg+0xe64fe8>
	drvprcs = runthread (cc1350_driver);
    2f80:	0b390b3b 	bleq	e45c74 <__ccfg+0xe25ccc>
    2f84:	0b381349 	bleq	e07cb0 <__ccfg+0xde7d08>
    2f88:	0f100000 	svceq	0x00100000
	if (drvprcs == 0)
    2f8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		syserror (ERESOURCE, "cc13");
    2f90:	11000013 	tstne	r0, r3, lsl r0
    2f94:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f98:	0b3a050b 	bleq	e843cc <__ccfg+0xe64424>
    2f9c:	0b390b3b 	bleq	e45c90 <__ccfg+0xe25ce8>
    2fa0:	00001301 	andeq	r1, r0, r1, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fa4:	03000d12 	movweq	r0, #3346	; 0xd12
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2fa8:	3b0b3a0e 	blcc	2d17e8 <__ccfg+0x2b1840>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2fb0:	00053813 	andeq	r3, r5, r3, lsl r8
    2fb4:	00151300 	andseq	r1, r5, r0, lsl #6
    2fb8:	00000c27 	andeq	r0, r0, r7, lsr #24
    2fbc:	27011514 	smladcs	r1, r4, r5, r1
    2fc0:	0113490c 	tsteq	r3, ip, lsl #18
    2fc4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2fc8:	13490005 	movtne	r0, #36869	; 0x9005
    2fcc:	13160000 	tstne	r6, #0
	plugch ();
    2fd0:	0b0e0301 	bleq	383bdc <__ccfg+0x363c34>
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd4:	3b0b3a05 	blcc	2d17f0 <__ccfg+0x2b1848>
    2fd8:	010b3905 	tsteq	fp, r5, lsl #18
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fdc:	17000013 	smladne	r0, r3, r0, r0
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2fec:	00000b38 	andeq	r0, r0, r8, lsr fp
    2ff0:	03000d18 	movweq	r0, #3352	; 0xd18
    2ff4:	3b0b3a0e 	blcc	2d1834 <__ccfg+0x2b188c>
    2ff8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2ffc:	00053813 	andeq	r3, r5, r3, lsl r8
    3000:	01131900 	tsteq	r3, r0, lsl #18
    3004:	0b0b0e03 	bleq	2c6818 <__ccfg+0x2a6870>
    3008:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    300c:	13010b39 	movwne	r0, #6969	; 0x1b39
    3010:	131a0000 	tstne	sl, #0
    3014:	3a0b0b01 	bcc	2c5c20 <__ccfg+0x2a5c78>
    3018:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    301c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3020:	01171b00 	tsteq	r7, r0, lsl #22
    3024:	0b3a0b0b 	bleq	e85c58 <__ccfg+0xe65cb0>
    3028:	0b39053b 	bleq	e4451c <__ccfg+0xe24574>
    302c:	00001301 	andeq	r1, r0, r1, lsl #6
    3030:	03000d1c 	movweq	r0, #3356	; 0xd1c
    3034:	3b0b3a0e 	blcc	2d1874 <__ccfg+0x2b18cc>
    3038:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    303c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    3040:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    3044:	00000c3c 	andeq	r0, r0, ip, lsr ip
    3048:	2701151e 	smladcs	r1, lr, r5, r1
    304c:	0013010c 	andseq	r0, r3, ip, lsl #2
    3050:	00341f00 	eorseq	r1, r4, r0, lsl #30
    3054:	0b3a0e03 	bleq	e86868 <__ccfg+0xe668c0>
    3058:	0b39053b 	bleq	e4454c <__ccfg+0xe245a4>
    305c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2f40 <phys_cc1350+0x7c>
    3060:	00000c3c 	andeq	r0, r0, ip, lsr ip
    3064:	03000d20 	movweq	r0, #3360	; 0xd20
    3068:	3b0b3a0e 	blcc	2d18a8 <__ccfg+0x2b1900>
    306c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    3070:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    3074:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3078:	2100000b 	tstcs	r0, fp
    307c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3080:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3084:	13490b39 	movtne	r0, #39737	; 0x9b39
    3088:	0b0d0b0b 	bleq	345cbc <__ccfg+0x325d14>
    308c:	0b380b0c 	bleq	e05cc4 <__ccfg+0xde5d1c>
    3090:	34220000 	strtcc	r0, [r2], #-0
    3094:	3a0e0300 	bcc	383c9c <__ccfg+0x363cf4>
    3098:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    309c:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    30a0:	23000003 	movwcs	r0, #3
    30a4:	13490021 	movtne	r0, #36897	; 0x9021
    30a8:	0000052f 	andeq	r0, r0, pc, lsr #10
    30ac:	49003524 	stmdbmi	r0, {r2, r5, r8, sl, ip, sp}
    30b0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    30b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30b8:	0b3b0b3a 	bleq	ec5da8 <__ccfg+0xea5e00>
    30bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    30c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    30c4:	21260000 			; <UNDEFINED> instruction: 0x21260000
    30c8:	27000000 	strcs	r0, [r0, -r0]
    30cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30d0:	0b3b0b3a 	bleq	ec5dc0 <__ccfg+0xea5e18>
    30d4:	13490b39 	movtne	r0, #39737	; 0x9b39
strand (__outserial, const char*)
    30d8:	00000a02 	andeq	r0, r0, r2, lsl #20
    30dc:	47003428 	strmi	r3, [r0, -r8, lsr #8]
    30e0:	3b0b3a13 	blcc	2d1934 <__ccfg+0x2b198c>
    30e4:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
endstrand
    30e8:	0000000a 	andeq	r0, r0, sl
    30ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	ptr = data;
    30f0:	030b130e 	movweq	r1, #45838	; 0xb30e
    30f4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	if (*ptr)
    30f8:	10011117 	andne	r1, r1, r7, lsl r1
		len = strlen (ptr);
    30fc:	02000017 	andeq	r0, r0, #23
    3100:	0b0b0024 	bleq	2c3198 <__ccfg+0x2a31f0>
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3104:	0e030b3e 	vmoveq.16	d3[0], r0
    3108:	16030000 	strne	r0, [r3], -r0
    310c:	3a0e0300 	bcc	383d14 <__ccfg+0x363d6c>
    3110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3114:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	len -= quant;
    3118:	0b0b0024 	bleq	2c31b0 <__ccfg+0x2a3208>
    311c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3120:	0f050000 	svceq	0x00050000
	if (len == 0) {
    3124:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		ufree (data);
    3128:	06000013 			; <UNDEFINED> instruction: 0x06000013
		finish;
    312c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3130:	15070000 	strne	r0, [r7, #-0]
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3134:	01192701 	tsteq	r9, r1, lsl #14
    3138:	08000013 	stmdaeq	r0, {r0, r1, r4}
    313c:	13490005 	movtne	r0, #36869	; 0x9005
    3140:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    3144:	03193f01 	tsteq	r9, #1, 30
strand (__inserial, address)
    3148:	3b0b3a0e 	blcc	2d1988 <__ccfg+0x2b19e0>
    314c:	1119270b 	tstne	r9, fp, lsl #14
    3150:	40061201 	andmi	r1, r6, r1, lsl #4
    3154:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    3158:	00001301 	andeq	r1, r0, r1, lsl #6
	if (__inpline != NULL)
    315c:	0300050a 	movweq	r0, #1290	; 0x50a
    3160:	3b0b3a0e 	blcc	2d19a0 <__ccfg+0x2b19f8>
		finish;
    3164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3168:	0b000017 	bleq	31cc <__inserial+0x84>
    316c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3170:	0b3b0b3a 	bleq	ec5e60 <__ccfg+0xea5eb8>
    3174:	17021349 	strne	r1, [r2, -r9, asr #6]
		umwait (IM_INIT);
    3178:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
		release;
    317c:	11000182 	smlabbne	r0, r2, r1, r0
	savedata (data);
    3180:	00133101 	andseq	r3, r3, r1, lsl #2
	len = MAX_LINE_LENGTH;
    3184:	82890d00 	addhi	r0, r9, #0, 26
	io (IM_READ, __cport, READ, ptr, 1);
    3188:	01110001 	tsteq	r1, r1
    318c:	31194295 			; <UNDEFINED> instruction: 0x31194295
    3190:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
	if (ptr == (char*) data) { // new line
    3198:	0b3a0e03 	bleq	e869ac <__ccfg+0xe66a04>
    319c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
		if (*ptr == '\0') { // bin cmd
    31a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
			proceed (IM_BIN);
    31a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    31a8:	00130119 	andseq	r0, r3, r9, lsl r1
		if (*ptr < 0x20)
    31ac:	82890f00 	addhi	r0, r9, #0, 30
    31b0:	01110101 	tsteq	r1, r1, lsl #2
			proceed (IM_READ);
    31b4:	00001301 	andeq	r1, r0, r1, lsl #6
    31b8:	01828a10 	orreq	r8, r2, r0, lsl sl
	if (*ptr == '\n' || *ptr == '\r') {
    31bc:	91180200 	tstls	r8, r0, lsl #4
    31c0:	00001842 	andeq	r1, r0, r2, asr #16
    31c4:	3f002e11 	svccc	0x00002e11
		*ptr = '\0';
    31c8:	3a0e0319 	bcc	383e34 <__ccfg+0x363e8c>
		__inpline = (char*)data;
    31cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
		finish;
    31d0:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
	if (len) {
    31d4:	00000019 	andeq	r0, r0, r9, lsl r0
		ptr++;
    31d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    31dc:	030b130e 	movweq	r1, #45838	; 0xb30e
		len--;
    31e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	proceed (IM_READ);
    31e4:	10011117 	andne	r1, r1, r7, lsl r1
	io (IM_BIN, __cport, READ, ptr, 1);
    31e8:	02000017 	andeq	r0, r0, #23
    31ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    31f0:	0b3b0b3a 	bleq	ec5ee0 <__ccfg+0xea5f38>
    31f4:	00001349 	andeq	r1, r0, r9, asr #6
    31f8:	0b002403 	bleq	c20c <__exidx_end+0x6730>
	len -= 2;
    31fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	if (len > *ptr + 1) // 1 for 0x04
    3200:	0400000e 	streq	r0, [r0], #-14
    3204:	0b0b0024 	bleq	2c329c <__ccfg+0x2a32f4>
		len = *ptr + 1;
    3208:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    320c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
	ptr++;
    3210:	03193f01 	tsteq	r9, #1, 30
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3214:	3b0b3a0e 	blcc	2d1a54 <__ccfg+0x2b1aac>
    3218:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    321c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3220:	97184006 	ldrls	r4, [r8, -r6]
    3224:	00001942 	andeq	r1, r0, r2, asr #18
    3228:	03003406 	movweq	r3, #1030	; 0x406
	len -= quant;
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
		__inpline = (char*)data;
    3230:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		finish;
    3234:	07000017 	smladeq	r0, r7, r0, r0
	ptr += quant;
    3238:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    323c:	0b3b0b3a 	bleq	ec5f2c <__ccfg+0xea5f84>
endstrand
    3240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3244:	01000000 	mrseq	r0, (UNDEF: 0)
	proceed (IM_BINL);
    3248:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
endstrand
    324c:	0e030b13 	vmoveq.32	d3[0], r0
    3250:	17550e1b 	smmlane	r5, fp, lr, r0
    3254:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3258:	24020000 	strcs	r0, [r2], #-0
    325c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3260:	000e030b 	andeq	r0, lr, fp, lsl #6
		if (res && (d < n))
    3264:	00160300 	andseq	r0, r6, r0, lsl #6
    3268:	0b3a0e03 	bleq	e86a7c <__ccfg+0xe66ad4>
    326c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3270:	24040000 	strcs	r0, [r4], #-0
			res [d] = (char) c;
    3274:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		d++;
    3278:	0008030b 	andeq	r0, r8, fp, lsl #6
    327c:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3280:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3288:	13491927 	movtne	r1, #39207	; 0x9927
    328c:	06120111 			; <UNDEFINED> instruction: 0x06120111
				enci (10000);
    3290:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3294:	00130119 	andseq	r0, r3, r9, lsl r1
    3298:	00340600 	eorseq	r0, r4, r0, lsl #12
	d = 0;
    329c:	0b3a0e03 	bleq	e86ab0 <__ccfg+0xe66b08>
		c = *fm++;
    32a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		if (c == '\\') {
    32a4:	00001702 	andeq	r1, r0, r2, lsl #14
			if ((c = *fm++) == '\0') {
    32a8:	03003407 	movweq	r3, #1031	; 0x407
    32ac:	3b0b3a0e 	blcc	2d1aec <__ccfg+0x2b1b44>
				outc ('\\');
    32b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if ((c = *fm++) == '\0') {
    32b4:	08000018 	stmdaeq	r0, {r3, r4}
				outc ('\\');
    32b8:	0b0b0117 	bleq	2c371c <__ccfg+0x2a3774>
    32bc:	0b3b0b3a 	bleq	ec5fac <__ccfg+0xea6004>
			outc (c);
    32c0:	00001301 	andeq	r1, r0, r1, lsl #6
    32c4:	03000d09 	movweq	r0, #3337	; 0xd09
			if (c == '\0')
    32c8:	3b0b3a0e 	blcc	2d1b08 <__ccfg+0x2b1b60>
    32cc:	0013490b 	andseq	r4, r3, fp, lsl #18
			outc (c);
    32d0:	00340a00 	eorseq	r0, r4, r0, lsl #20
				outc (val);
    32d4:	0b3a0e03 	bleq	e86ae8 <__ccfg+0xe66b40>
				val = (word) va_arg (ap, aword);
    32d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		if (c == '%') {
    32dc:	010b0000 	mrseq	r0, (UNDEF: 11)
    32e0:	01134901 	tsteq	r3, r1, lsl #18
			c = *fm++;
    32e4:	0c000013 	stceq	0, cr0, [r0], {19}
			switch (c) {
    32e8:	13490021 	movtne	r0, #36897	; 0x9021
    32ec:	00000b2f 	andeq	r0, r0, pc, lsr #22
    32f0:	01110100 	tsteq	r1, r0, lsl #2
    32f4:	0b130e25 	bleq	4c6b90 <__ccfg+0x4a6be8>
    32f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    32fc:	01111755 	tsteq	r1, r5, asr r7
    3300:	00001710 	andeq	r1, r0, r0, lsl r7
    3304:	0b002402 	bleq	c314 <__exidx_end+0x6838>
				outc ('%');
    3308:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    330c:	0300000e 	movweq	r0, #14
				outc (c);
    3310:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3314:	0b3b0b3a 	bleq	ec6004 <__ccfg+0xea605c>
    3318:	00001349 	andeq	r1, r0, r9, asr #6
				if (c == '\0')
    331c:	0b002404 	bleq	c334 <__exidx_end+0x6858>
				return d;
    3320:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    3324:	05000008 	streq	r0, [r0, #-8]
    3328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
			switch (c) {
    332c:	0b3a0e03 	bleq	e86b40 <__ccfg+0xe66b98>
    3330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3334:	01111349 	tsteq	r1, r9, asr #6
				for (i = 12; ; i -= 4) {
    3338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
				val = (word) va_arg (ap, aword);
    333c:	01194297 			; <UNDEFINED> instruction: 0x01194297
						[ (val >> i) & 0xf ]);
    3340:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3348:	0b3b0b3a 	bleq	ec6038 <__ccfg+0xea6090>
					outc (__pi_hex_enc_table
    334c:	00001349 	andeq	r1, r0, r9, asr #6
    3350:	03003407 	movweq	r3, #1031	; 0x407
					if (i == 0)
    3354:	3b0b3a0e 	blcc	2d1b94 <__ccfg+0x2b1bec>
    3358:	00134905 	andseq	r4, r3, r5, lsl #18
				for (i = 12; ; i -= 4) {
    335c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
				val = (word) va_arg (ap, aword);
    3360:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
				if (c == 'd' && (val & 0x8000) != 0) {
    3364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				val = (word) va_arg (ap, aword);
    3368:	13491927 	movtne	r1, #39207	; 0x9927
				if (c == 'd' && (val & 0x8000) != 0) {
    336c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3370:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
					outc ('-');
    3374:	00130119 	andseq	r0, r3, r9, lsl r1
    3378:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
					val = (~val) + 1;
    337c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				for (i = 12; ; i -= 4) {
    3384:	01111927 	tsteq	r1, r7, lsr #18
				enci (10000);
    3388:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    338c:	00194297 	mulseq	r9, r7, r2
    3390:	00050a00 	andeq	r0, r5, r0, lsl #20
    3394:	0b3a0e03 	bleq	e86ba8 <__ccfg+0xe66c00>
    3398:	1349053b 	movtne	r0, #38203	; 0x953b
    339c:	00001802 	andeq	r1, r0, r2, lsl #16
    33a0:	01110100 	tsteq	r1, r0, lsl #2
    33a4:	0b130e25 	bleq	4c6c40 <__ccfg+0x4a6c98>
    33a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    33ac:	01111755 	tsteq	r1, r5, asr r7
    33b0:	00001710 	andeq	r1, r0, r0, lsl r7
    33b4:	0b002402 	bleq	c3c4 <__exidx_end+0x68e8>
    33b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33bc:	0300000e 	movweq	r0, #14
    33c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    33c4:	0b3b0b3a 	bleq	ec60b4 <__ccfg+0xea610c>
    33c8:	00001349 	andeq	r1, r0, r9, asr #6
    33cc:	0b002404 	bleq	c3e4 <__exidx_end+0x6908>
				if (c == 'd' || c == 'u') {
    33d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33d4:	05000008 	streq	r0, [r0, #-8]
					if (c == 'd' &&
    33d8:	0b0b000f 	bleq	2c341c <__ccfg+0x2a3474>
					val = va_arg (ap, lword);
    33dc:	00001349 	andeq	r1, r0, r9, asr #6
					fm++;
    33e0:	27001506 	strcs	r1, [r0, -r6, lsl #10]
					if (c == 'd' &&
    33e4:	07000019 	smladeq	r0, r9, r0, r0
    33e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
						outc ('-');
    33ec:	00001301 	andeq	r1, r0, r1, lsl #6
    33f0:	49000508 	stmdbmi	r0, {r3, r8, sl}
						val = (~val) + 1;
    33f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
				enci (10000);
    33f8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
					enci (1000000000UL);
    33fc:	13011349 	movwne	r1, #4937	; 0x1349
    3400:	150a0000 	strne	r0, [sl, #-0]
    3404:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3408:	0b000013 	bleq	345c <__pi_vfparse+0x1d8>
    340c:	0b0b0113 	bleq	2c3860 <__ccfg+0x2a38b8>
    3410:	0b3b0b3a 	bleq	ec6100 <__ccfg+0xea6158>
    3414:	00001301 	andeq	r1, r0, r1, lsl #6
    3418:	03000d0c 	movweq	r0, #3340	; 0xd0c
    341c:	3b0b3a0e 	blcc	2d1c5c <__ccfg+0x2b1cb4>
    3420:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3424:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3428:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    342c:	0b3a0e03 	bleq	e86c40 <__ccfg+0xe66c98>
    3430:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3434:	13010b20 	movwne	r0, #6944	; 0x1b20
    3438:	050e0000 	streq	r0, [lr, #-0]
    343c:	3a0e0300 	bcc	384044 <__ccfg+0x36409c>
				} else if (c == 'x') {
    3440:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					for (i = 28; ; i -= 4) {
    3444:	0f000013 	svceq	0x00000013
					val = va_arg (ap, lword);
    3448:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
							[ (val >> i) & 0xf ]);
    344c:	0b3a0e03 	bleq	e86c60 <__ccfg+0xe66cb8>
    3450:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
						outc (__pi_hex_enc_table
    3454:	0b201349 	bleq	808180 <__ccfg+0x7e81d8>
    3458:	00001301 	andeq	r1, r0, r1, lsl #6
    345c:	03003410 	movweq	r3, #1040	; 0x410
						if (i == 0)
    3460:	3b0b3a0e 	blcc	2d1ca0 <__ccfg+0x2b1cf8>
    3464:	0013490b 	andseq	r4, r3, fp, lsl #18
					for (i = 28; ; i -= 4) {
    3468:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
					outc ('%');
    346c:	01111331 	tsteq	r1, r1, lsr r3
    3470:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3474:	01194297 			; <UNDEFINED> instruction: 0x01194297
					outc ('l');
    3478:	12000013 	andne	r0, r0, #19
    347c:	13310005 	teqne	r1, #5
				val = (word) va_arg (ap, aword);
    3480:	00001702 	andeq	r1, r0, r2, lsl #14
				outc (val);
    3484:	11010b13 	tstne	r1, r3, lsl fp
    3488:	01061201 	tsteq	r6, r1, lsl #4
				while (*st != '\0') {
    348c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3490:	01018289 	smlabbeq	r1, r9, r2, r8
    3494:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3498:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
					outc (*st);
    349c:	0001828a 	andeq	r8, r1, sl, lsl #5
    34a0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
					st++;
    34a4:	16000018 			; <UNDEFINED> instruction: 0x16000018
		c = *fm++;
    34a8:	01018289 	smlabbeq	r1, r9, r2, r8
    34ac:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    34b0:	00130118 	andseq	r0, r3, r8, lsl r1
char *vform (char *res, const char *fm, va_list aq) {
    34b4:	00341700 	eorseq	r1, r4, r0, lsl #14
    34b8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
	if (res != NULL) {
    34bc:	0b180000 	bleq	6034c4 <__ccfg+0x5e351c>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    34c0:	01175501 	tsteq	r7, r1, lsl #10
    34c4:	19000013 	stmdbne	r0, {r0, r1, r4}
    34c8:	13310005 	teqne	r1, #5
}
    34cc:	00000b1c 	andeq	r0, r0, ip, lsl fp
    34d0:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
	fml = strlen (fm) + 17;
    34d4:	1b000017 	blne	3538 <vscan+0x34>
    34d8:	13310034 	teqne	r1, #52	; 0x34
    34dc:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
	if ((res = (char*) umalloc (fml)) == NULL)
    34e0:	03193f01 	tsteq	r9, #1, 30
    34e4:	3b0b3a0e 	blcc	2d1d24 <__ccfg+0x2b1d7c>
    34e8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    34ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34f0:	97184006 	ldrls	r4, [r8, -r6]
    34f4:	13011942 	movwne	r1, #6466	; 0x1942
    34f8:	051d0000 	ldreq	r0, [sp, #-0]
		ufree (res);
    34fc:	3a0e0300 	bcc	384104 <__ccfg+0x36415c>
		goto Again;
    3500:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (buf == NULL || fmt == NULL)
    3504:	00170213 	andseq	r0, r7, r3, lsl r2
int vscan (const char *buf, const char *fmt, va_list ap) {
    3508:	00341e00 	eorseq	r1, r4, r0, lsl #28
	if (buf == NULL || fmt == NULL)
    350c:	0b3a0e03 	bleq	e86d20 <__ccfg+0xe66d78>
    3510:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3514:	00001702 	andeq	r1, r0, r2, lsl #14
		    	    case 'u': scanu (lword); break;
    3518:	0182891f 	orreq	r8, r2, pc, lsl r9
			while (isspace (*buf)) buf++;
    351c:	31011100 	mrscc	r1, (UNDEF: 17)
    3520:	20000013 	andcs	r0, r0, r3, lsl r0
	while (*fmt != '\0') {
    3524:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
		if (*fmt++ != '%')
    3528:	0b3a0e03 	bleq	e86d3c <__ccfg+0xe66d94>
		switch (*fmt++) {
    352c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3530:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3534:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3538:	00130119 	andseq	r0, r3, r9, lsl r1
    353c:	82892100 	addhi	r2, r9, #0, 2
    3540:	01110101 	tsteq	r1, r1, lsl #2
    3544:	13011331 	movwne	r1, #4913	; 0x1331
}
    3548:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
		switch (*fmt++) {
    354c:	3a0e0300 	bcc	384154 <__ccfg+0x3641ac>
    3550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3554:	20134919 	andscs	r4, r3, r9, lsl r9
    3558:	2300000b 	movwcs	r0, #11
			while (isspace (*buf)) buf++;
    355c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3560:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3564:	0b201927 	bleq	809a08 <__ccfg+0x7e9a60>
    3568:	34240000 	strtcc	r0, [r4], #-0
    356c:	3a0e0300 	bcc	384174 <__ccfg+0x3641cc>
    3570:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (*buf == '\0')
    3574:	00170213 	andseq	r0, r7, r3, lsl r2
			if (*buf != ',') {
    3578:	011d2500 	tsteq	sp, r0, lsl #10
			sap = va_arg (ap, char*);
    357c:	01111331 	tsteq	r1, r1, lsr r3
			nc++;
    3580:	0b580612 	bleq	1604dd0 <__ccfg+0x15e4e28>
			if (*buf != ',') {
    3584:	13010559 	movwne	r0, #5465	; 0x1559
				while (!isspace (*buf) && *buf != ',' &&
    3588:	05260000 	streq	r0, [r6, #-0]!
    358c:	3a0e0300 	bcc	384194 <__ccfg+0x3641ec>
    3590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3594:	00170213 	andseq	r0, r7, r3, lsl r2
    3598:	00342700 	eorseq	r2, r4, r0, lsl #14
    359c:	0b3a0e03 	bleq	e86db0 <__ccfg+0xe66e08>
    35a0:	1349053b 	movtne	r0, #38203	; 0x953b
			while (isspace (*buf)) buf++;
    35a4:	00001802 	andeq	r1, r0, r2, lsl #16
    35a8:	03003428 	movweq	r3, #1064	; 0x428
    35ac:	3b0b3a08 	blcc	2d1dd4 <__ccfg+0x2b1e2c>
    35b0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    35b4:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
			if (*buf == ',') buf++;
    35b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    35bc:	0b3b0b3a 	bleq	ec62ac <__ccfg+0xea6304>
			*sap = '\0';
    35c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
			break;
    35c4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
		    case 'd': scani (word); break;
    35c8:	03193f00 	tsteq	r9, #0, 30
    35cc:	3b0b3a0e 	blcc	2d1e0c <__ccfg+0x2b1e64>
    35d0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    35d4:	00193c13 	andseq	r3, r9, r3, lsl ip
    35d8:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    35dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    35e0:	0b3b0b3a 	bleq	ec62d0 <__ccfg+0xea6328>
    35e4:	13491927 	movtne	r1, #39207	; 0x9927
    35e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    35ec:	3f012e2c 	svccc	0x00012e2c
    35f0:	3a0e0319 	bcc	38425c <__ccfg+0x3642b4>
    35f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    35f8:	00193c19 	andseq	r3, r9, r9, lsl ip
    35fc:	11010000 	mrsne	r0, (UNDEF: 1)
    3600:	130e2501 	movwne	r2, #58625	; 0xe501
    3604:	1b0e030b 	blne	384238 <__ccfg+0x364290>
    3608:	1117550e 	tstne	r7, lr, lsl #10
    360c:	00171001 	andseq	r1, r7, r1
    3610:	00240200 	eoreq	r0, r4, r0, lsl #4
    3614:	0b3e0b0b 	bleq	f86248 <__ccfg+0xf662a0>
    3618:	00000e03 	andeq	r0, r0, r3, lsl #28
    361c:	03001603 	movweq	r1, #1539	; 0x603
    3620:	3b0b3a0e 	blcc	2d1e60 <__ccfg+0x2b1eb8>
    3624:	0013490b 	andseq	r4, r3, fp, lsl #18
    3628:	00240400 	eoreq	r0, r4, r0, lsl #8
    362c:	0b3e0b0b 	bleq	f86260 <__ccfg+0xf662b8>
    3630:	00000803 	andeq	r0, r0, r3, lsl #16
    3634:	0b000f05 	bleq	7250 <__exidx_end+0x1774>
		    case 'u': scanu (word); break;
    3638:	0600000b 	streq	r0, [r0], -fp
    363c:	0b0b000f 	bleq	2c3680 <__ccfg+0x2a36d8>
    3640:	00001349 	andeq	r1, r0, r9, asr #6
    3644:	03011307 	movweq	r1, #4871	; 0x1307
    3648:	3a0b0b0e 	bcc	2c6288 <__ccfg+0x2a62e0>
    364c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3650:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3654:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3658:	0b3b0b3a 	bleq	ec6348 <__ccfg+0xea63a0>
    365c:	0b381349 	bleq	e08388 <__ccfg+0xde83e0>
    3660:	13090000 	movwne	r0, #36864	; 0x9000
    3664:	3a0b0b01 	bcc	2c6270 <__ccfg+0x2a62c8>
    3668:	010b3b0b 	tsteq	fp, fp, lsl #22
    366c:	0a000013 	beq	36c0 <vscan+0x1bc>
    3670:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3674:	0b3b0b3a 	bleq	ec6364 <__ccfg+0xea63bc>
    3678:	0b0b1349 	bleq	2c83a4 <__ccfg+0x2a83fc>
    367c:	0b0c0b0d 	bleq	3062b8 <__ccfg+0x2e6310>
		    case 'x': scanx (word); break;
    3680:	00000b38 	andeq	r0, r0, r8, lsr fp
    3684:	0301130b 	movweq	r1, #4875	; 0x130b
    3688:	3a0b0b0e 	bcc	2c62c8 <__ccfg+0x2a6320>
    368c:	01053b0b 	tsteq	r5, fp, lsl #22
    3690:	0c000013 	stceq	0, cr0, [r0], {19}
    3694:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    369c:	0b381349 	bleq	e083c8 <__ccfg+0xde8420>
    36a0:	130d0000 	movwne	r0, #53248	; 0xd000
    36a4:	3a0b0b01 	bcc	2c62b0 <__ccfg+0x2a6308>
    36a8:	01053b0b 	tsteq	r5, fp, lsl #22
    36ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    36b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    36b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36b8:	0b0b1349 	bleq	2c83e4 <__ccfg+0x2a843c>
    36bc:	0b0c0b0d 	bleq	3062f8 <__ccfg+0x2e6350>
    36c0:	00000b38 	andeq	r0, r0, r8, lsr fp
    36c4:	03002e0f 	movweq	r2, #3599	; 0xe0f
    36c8:	3b0b3a0e 	blcc	2d1f08 <__ccfg+0x2b1f60>
    36cc:	20192705 	andscs	r2, r9, r5, lsl #14
    36d0:	1000000b 	andne	r0, r0, fp
    36d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    36d8:	0b3a0e03 	bleq	e86eec <__ccfg+0xe66f44>
    36dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    36e0:	01111349 	tsteq	r1, r9, asr #6
    36e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    36e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    36ec:	11000013 	tstne	r0, r3, lsl r0
    36f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    36f4:	0b3b0b3a 	bleq	ec63e4 <__ccfg+0xea643c>
			switch (*fmt++) {
    36f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    36fc:	05120000 	ldreq	r0, [r2, #-0]
    3700:	3a080300 	bcc	204308 <__ccfg+0x1e4360>
    3704:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3708:	00170213 	andseq	r0, r7, r3, lsl r2
    370c:	001d1300 	andseq	r1, sp, r0, lsl #6
		    	    case 'd': scani (lword); break;
    3710:	01111331 	tsteq	r1, r1, lsr r3
    3714:	0b580612 	bleq	1604f64 <__ccfg+0x15e4fbc>
    3718:	00000b59 	andeq	r0, r0, r9, asr fp
    371c:	3f002e14 	svccc	0x00002e14
    3720:	3a0e0319 	bcc	38438c <__ccfg+0x3643e4>
    3724:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3728:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    372c:	97184006 	ldrls	r4, [r8, -r6]
    3730:	00001942 	andeq	r1, r0, r2, asr #18
    3734:	3f012e15 	svccc	0x00012e15
    3738:	3a0e0319 	bcc	3843a4 <__ccfg+0x3643fc>
    373c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3740:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3744:	97184006 	ldrls	r4, [r8, -r6]
    3748:	13011942 	movwne	r1, #6466	; 0x1942
    374c:	05160000 	ldreq	r0, [r6, #-0]
    3750:	3a0e0300 	bcc	384358 <__ccfg+0x3643b0>
    3754:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3758:	00180213 	andseq	r0, r8, r3, lsl r2
    375c:	00341700 	eorseq	r1, r4, r0, lsl #14
    3760:	0b3a0e03 	bleq	e86f74 <__ccfg+0xe66fcc>
    3764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3768:	00001702 	andeq	r1, r0, r2, lsl #14
		    	    case 'x': scanx (lword); break;
    376c:	03000518 	movweq	r0, #1304	; 0x518
    3770:	3b0b3a0e 	blcc	2d1fb0 <__ccfg+0x2b2008>
    3774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3778:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    377c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3780:	0b3b0b3a 	bleq	ec6470 <__ccfg+0xea64c8>
    3784:	00001349 	andeq	r1, r0, r9, asr #6
    3788:	0300051a 	movweq	r0, #1306	; 0x51a
    378c:	3b0b3a0e 	blcc	2d1fcc <__ccfg+0x2b2024>
    3790:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3794:	1b000017 	blne	37f8 <vscan+0x2f4>
    3798:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    379c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37a0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
    37a4:	341c0000 	ldrcc	r0, [ip], #-0
    37a8:	3a080300 	bcc	2043b0 <__ccfg+0x1e4408>
    37ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    37b0:	00170213 	andseq	r0, r7, r3, lsl r2
    37b4:	82891d00 	addhi	r1, r9, #0, 26
    37b8:	01110101 	tsteq	r1, r1, lsl #2
    37bc:	00001331 	andeq	r1, r0, r1, lsr r3
    37c0:	01828a1e 	orreq	r8, r2, lr, lsl sl
    37c4:	91180200 	tstls	r8, r0, lsl #4
    37c8:	00001842 	andeq	r1, r0, r2, asr #16
    37cc:	0300051f 	movweq	r0, #1311	; 0x51f
    37d0:	3b0b3a0e 	blcc	2d2010 <__ccfg+0x2b2068>
    37d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    37d8:	20000018 	andcs	r0, r0, r8, lsl r0
		    	    case 'd': scani (lword); break;
    37dc:	13490101 	movtne	r0, #37121	; 0x9101
    37e0:	00001301 	andeq	r1, r0, r1, lsl #6
    37e4:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
    37e8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    37ec:	00342200 	eorseq	r2, r4, r0, lsl #4
    37f0:	0b3a0e03 	bleq	e87004 <__ccfg+0xe6705c>
    37f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		    	    case 'u': scanu (lword); break;
    37f8:	00000a1c 	andeq	r0, r0, ip, lsl sl
    37fc:	49002623 	stmdbmi	r0, {r0, r1, r5, r9, sl, sp}
    3800:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3804:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3808:	0b3a0e03 	bleq	e8701c <__ccfg+0xe67074>
    380c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3810:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3814:	05250000 	streq	r0, [r5, #-0]!
    3818:	00134900 	andseq	r4, r3, r0, lsl #18
    381c:	11010000 	mrsne	r0, (UNDEF: 1)
    3820:	130e2501 	movwne	r2, #58625	; 0xe501
    3824:	1b0e030b 	blne	384458 <__ccfg+0x3644b0>
    3828:	1117550e 	tstne	r7, lr, lsl #10
    382c:	00171001 	andseq	r1, r7, r1
    3830:	00240200 	eoreq	r0, r4, r0, lsl #4
    3834:	0b3e0b0b 	bleq	f86468 <__ccfg+0xf664c0>
    3838:	00000e03 	andeq	r0, r0, r3, lsl #28
    383c:	03001603 	movweq	r1, #1539	; 0x603
		    	    case 'x': scanx (lword); break;
    3840:	3b0b3a0e 	blcc	2d2080 <__ccfg+0x2b20d8>
    3844:	0013490b 	andseq	r4, r3, fp, lsl #18
			if ((c = *buf++) == '\0')
    3848:	00240400 	eoreq	r0, r4, r0, lsl #8
    384c:	0b3e0b0b 	bleq	f86480 <__ccfg+0xf664d8>
			sap = va_arg (ap, char*);
    3850:	00000803 	andeq	r0, r0, r3, lsl #16
			nc++;
    3854:	03002e05 	movweq	r2, #3589	; 0xe05
			break;
    3858:	3b0b3a0e 	blcc	2d2098 <__ccfg+0x2b20f0>
			while (isspace (*buf)) buf++;
    385c:	20192705 	andscs	r2, r9, r5, lsl #14
    3860:	0600000b 	streq	r0, [r0], -fp
    3864:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
						*sap++ = *buf++;
    3868:	0b3b0b3a 	bleq	ec6558 <__ccfg+0xea65b0>
    386c:	0b201927 	bleq	809d10 <__ccfg+0x7e9d68>
			while (isspace (*buf)) buf++;
    3870:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    3874:	3a0e0301 	bcc	384480 <__ccfg+0x3644d8>
    3878:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
		return 0;
    387c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3880:	97184006 	ldrls	r4, [r8, -r6]
		    case 'x': scanx (word); break;
    3884:	13011942 	movwne	r1, #6466	; 0x1942
    3888:	05080000 	streq	r0, [r8, #-0]
		    	    case 'x': scanx (lword); break;
    388c:	3a0e0300 	bcc	384494 <__ccfg+0x3644ec>
    3890:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3894:	00170213 	andseq	r0, r7, r3, lsl r2
    3898:	00340900 	eorseq	r0, r4, r0, lsl #18
    389c:	0b3a0e03 	bleq	e870b0 <__ccfg+0xe67108>
    38a0:	1349053b 	movtne	r0, #38203	; 0x953b
    38a4:	00001702 	andeq	r1, r0, r2, lsl #14
    38a8:	31001d0a 	tstcc	r0, sl, lsl #26
    38ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38b0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    38b4:	0b000005 	bleq	38d0 <NOROM_AONBatMonTemperatureGetDegC+0x14>
    38b8:	0111010b 	tsteq	r1, fp, lsl #2
    38bc:	13010612 	movwne	r0, #5650	; 0x1612
    38c0:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
    38c4:	11010182 	smlabbne	r1, r2, r1, r0
    38c8:	01133101 	tsteq	r3, r1, lsl #2
    38cc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    38d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    38d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    38d8:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    38dc:	01018289 	smlabbeq	r1, r9, r2, r8
    38e0:	00000111 	andeq	r0, r0, r1, lsl r1
    38e4:	3f012e0f 	svccc	0x00012e0f
    38e8:	3a0e0319 	bcc	384554 <__ccfg+0x3645ac>
    38ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    38f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    38f4:	97184006 	ldrls	r4, [r8, -r6]
    38f8:	13011942 	movwne	r1, #6466	; 0x1942
    38fc:	34100000 	ldrcc	r0, [r0], #-0
    3900:	3a0e0300 	bcc	384508 <__ccfg+0x364560>
    3904:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3908:	00170213 	andseq	r0, r7, r3, lsl r2
    390c:	82891100 	addhi	r1, r9, #0, 2
    3910:	01110001 	tsteq	r1, r1
    3914:	00001331 	andeq	r1, r0, r1, lsr r3
    3918:	01828912 	orreq	r8, r2, r2, lsl r9
    391c:	31011101 	tstcc	r1, r1, lsl #2
    3920:	13000013 	movwne	r0, #19
    3924:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3928:	0b3a0e03 	bleq	e8713c <__ccfg+0xe67194>
    392c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3930:	1301193c 	movwne	r1, #6460	; 0x193c
    3934:	05140000 	ldreq	r0, [r4, #-0]
    3938:	00134900 	andseq	r4, r3, r0, lsl #18
    393c:	002e1500 	eoreq	r1, lr, r0, lsl #10
    3940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3944:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    394c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    3950:	03193f00 	tsteq	r9, #0, 30
    3954:	3b0b3a0e 	blcc	2d2194 <__ccfg+0x2b21ec>
    3958:	3c19270b 	ldccc	7, cr2, [r9], {11}
    395c:	00000019 	andeq	r0, r0, r9, lsl r0
    3960:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3964:	030b130e 	movweq	r1, #45838	; 0xb30e
    3968:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    396c:	10011117 	andne	r1, r1, r7, lsl r1
    3970:	02000017 	andeq	r0, r0, #23
    3974:	0b0b0024 	bleq	2c3a0c <__ccfg+0x2a3a64>
    3978:	0e030b3e 	vmoveq.16	d3[0], r0
    397c:	16030000 	strne	r0, [r3], -r0
    3980:	3a0e0300 	bcc	384588 <__ccfg+0x3645e0>
    3984:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3988:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    398c:	0b0b0024 	bleq	2c3a24 <__ccfg+0x2a3a7c>
    3990:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3994:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3998:	3a0e0301 	bcc	3845a4 <__ccfg+0x3645fc>
    399c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39a0:	20134919 	andscs	r4, r3, r9, lsl r9
    39a4:	0013010b 	andseq	r0, r3, fp, lsl #2
    39a8:	00050600 	andeq	r0, r5, r0, lsl #12
    39ac:	0b3a0e03 	bleq	e871c0 <__ccfg+0xe67218>
    39b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39b4:	34070000 	strcc	r0, [r7], #-0
    39b8:	3a0e0300 	bcc	3845c0 <__ccfg+0x364618>
    39bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    39c0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    39c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    39c8:	0b3a0e03 	bleq	e871dc <__ccfg+0xe67234>
    39cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39d0:	0b201349 	bleq	8086fc <__ccfg+0x7e8754>
    39d4:	00001301 	andeq	r1, r0, r1, lsl #6
    39d8:	03000509 	movweq	r0, #1289	; 0x509
    39dc:	3b0b3a0e 	blcc	2d221c <__ccfg+0x2b2274>
    39e0:	00134905 	andseq	r4, r3, r5, lsl #18
    39e4:	00340a00 	eorseq	r0, r4, r0, lsl #20
    39e8:	0b3a0e03 	bleq	e871fc <__ccfg+0xe67254>
    39ec:	1349053b 	movtne	r0, #38203	; 0x953b
    39f0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    39f4:	3a0e0300 	bcc	3845fc <__ccfg+0x364654>
    39f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39fc:	000b2019 	andeq	r2, fp, r9, lsl r0
    3a00:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
    3a04:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a0c:	01111927 	tsteq	r1, r7, lsr #18
    3a10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3a14:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3a18:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    3a1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a20:	0b3b0b3a 	bleq	ec6710 <__ccfg+0xea6768>
    3a24:	17021349 	strne	r1, [r2, -r9, asr #6]
    3a28:	340e0000 	strcc	r0, [lr], #-0
    3a2c:	3a0e0300 	bcc	384634 <__ccfg+0x36468c>
    3a30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a34:	00180213 	andseq	r0, r8, r3, lsl r2
    3a38:	00340f00 	eorseq	r0, r4, r0, lsl #30
    3a3c:	0b3a0e03 	bleq	e87250 <__ccfg+0xe672a8>
    3a40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a44:	00001702 	andeq	r1, r0, r2, lsl #14
    3a48:	31011d10 	tstcc	r1, r0, lsl sp
    3a4c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3a50:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3a54:	0013010b 	andseq	r0, r3, fp, lsl #2
    3a58:	00051100 	andeq	r1, r5, r0, lsl #2
    3a5c:	00001331 	andeq	r1, r0, r1, lsr r3
    3a60:	55010b12 	strpl	r0, [r1, #-2834]	; 0xfffff4ee
    3a64:	13000017 	movwne	r0, #23
    3a68:	13310034 	teqne	r1, #52	; 0x34
    3a6c:	00001802 	andeq	r1, r0, r2, lsl #16
    3a70:	31011d14 	tstcc	r1, r4, lsl sp
    3a74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3a78:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3a7c:	1500000b 	strne	r0, [r0, #-11]
    3a80:	0111010b 	tsteq	r1, fp, lsl #2
    3a84:	00000612 	andeq	r0, r0, r2, lsl r6
    3a88:	31003416 	tstcc	r0, r6, lsl r4
    3a8c:	00170213 	andseq	r0, r7, r3, lsl r2
    3a90:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    3a94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a98:	0b3b0b3a 	bleq	ec6788 <__ccfg+0xea67e0>
    3a9c:	01111927 	tsteq	r1, r7, lsr #18
    3aa0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3aa4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aa8:	18000013 	stmdane	r0, {r0, r1, r4}
    3aac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3ab0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ab4:	0b590b58 	bleq	164681c <__ccfg+0x1626874>
    3ab8:	00001301 	andeq	r1, r0, r1, lsl #6
    3abc:	01828919 	orreq	r8, r2, r9, lsl r9
    3ac0:	31011101 	tstcc	r1, r1, lsl #2
    3ac4:	1a000013 	bne	3b18 <NOROM_RFCRfTrimRead+0x3c>
    3ac8:	0001828a 	andeq	r8, r1, sl, lsl #5
    3acc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3ad0:	1b000018 	blne	3b38 <NOROM_RFCRfTrimRead+0x5c>
    3ad4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3ad8:	0b3a0e03 	bleq	e872ec <__ccfg+0xe67344>
    3adc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3ae0:	01111349 	tsteq	r1, r9, asr #6
    3ae4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3ae8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aec:	1c000013 	stcne	0, cr0, [r0], {19}
    3af0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3af4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3af8:	17021349 	strne	r1, [r2, -r9, asr #6]
    3afc:	341d0000 	ldrcc	r0, [sp], #-0
    3b00:	3a0e0300 	bcc	384708 <__ccfg+0x364760>
    3b04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b08:	00170213 	andseq	r0, r7, r3, lsl r2
    3b0c:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    3b10:	01111331 	tsteq	r1, r1, lsr r3
    3b14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3b18:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3b1c:	1f000013 	svcne	0x00000013
    3b20:	13310005 	teqne	r1, #5
    3b24:	00001702 	andeq	r1, r0, r2, lsl #14
    3b28:	31003420 	tstcc	r0, r0, lsr #8
    3b2c:	21000013 	tstcs	r0, r3, lsl r0
    3b30:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3b34:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3b38:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    3b40:	01828922 	orreq	r8, r2, r2, lsr #18
    3b44:	31011101 	tstcc	r1, r1, lsl #2
    3b48:	00130113 	andseq	r0, r3, r3, lsl r1
    3b4c:	82892300 	addhi	r2, r9, #0, 6
    3b50:	01110001 	tsteq	r1, r1
    3b54:	00001331 	andeq	r1, r0, r1, lsr r3
    3b58:	01828924 	orreq	r8, r2, r4, lsr #18
    3b5c:	93011101 	movwls	r1, #4353	; 0x1101
    3b60:	13011842 	movwne	r1, #6210	; 0x1842
    3b64:	1d250000 	stcne	0, cr0, [r5, #-0]
    3b68:	11133100 	tstne	r3, r0, lsl #2
    3b6c:	58061201 	stmdapl	r6, {r0, r9, ip}
    3b70:	0005590b 	andeq	r5, r5, fp, lsl #18
    3b74:	82892600 	addhi	r2, r9, #0, 12
    3b78:	01110101 	tsteq	r1, r1, lsl #2
    3b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    3b80:	3f012e27 	svccc	0x00012e27
    3b84:	3a0e0319 	bcc	3847f0 <__ccfg+0x364848>
    3b88:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3b8c:	01193c19 	tsteq	r9, r9, lsl ip
    3b90:	28000013 	stmdacs	r0, {r0, r1, r4}
    3b94:	13490005 	movtne	r0, #36869	; 0x9005
    3b98:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    3b9c:	03193f01 	tsteq	r9, #1, 30
    3ba0:	3b0b3a0e 	blcc	2d23e0 <__ccfg+0x2b2438>
    3ba4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3ba8:	00130119 	andseq	r0, r3, r9, lsl r1
    3bac:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    3bb0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3bb8:	13491927 	movtne	r1, #39207	; 0x9927
    3bbc:	0000193c 	andeq	r1, r0, ip, lsr r9
    3bc0:	01110100 	tsteq	r1, r0, lsl #2
    3bc4:	0b130e25 	bleq	4c7460 <__ccfg+0x4a74b8>
    3bc8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3bcc:	01111755 	tsteq	r1, r5, asr r7
    3bd0:	00001710 	andeq	r1, r0, r0, lsl r7
    3bd4:	03001602 	movweq	r1, #1538	; 0x602
    3bd8:	3b0b3a0e 	blcc	2d2418 <__ccfg+0x2b2470>
    3bdc:	0013490b 	andseq	r4, r3, fp, lsl #18
    3be0:	00240300 	eoreq	r0, r4, r0, lsl #6
    3be4:	0b3e0b0b 	bleq	f86818 <__ccfg+0xf66870>
    3be8:	00000e03 	andeq	r0, r0, r3, lsl #28
    3bec:	0b002404 	bleq	cc04 <__exidx_end+0x7128>
    3bf0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bf4:	05000008 	streq	r0, [r0, #-8]
    3bf8:	0b0b000f 	bleq	2c3c3c <__ccfg+0x2a3c94>
    3bfc:	00001349 	andeq	r1, r0, r9, asr #6
    3c00:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    3c04:	07000019 	smladeq	r0, r9, r0, r0
    3c08:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c0c:	00001301 	andeq	r1, r0, r1, lsl #6
    3c10:	49000508 	stmdbmi	r0, {r3, r8, sl}
    3c14:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3c18:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c1c:	13011349 	movwne	r1, #4937	; 0x1349
    3c20:	150a0000 	strne	r0, [sl, #-0]
    3c24:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3c28:	0b000013 	bleq	3c7c <NOROM_RFCRTrim+0x50>
    3c2c:	0b0b0113 	bleq	2c4080 <__ccfg+0x2a40d8>
    3c30:	0b3b0b3a 	bleq	ec6920 <__ccfg+0xea6978>
    3c34:	00001301 	andeq	r1, r0, r1, lsl #6
    3c38:	03000d0c 	movweq	r0, #3340	; 0xd0c
    3c3c:	3b0b3a0e 	blcc	2d247c <__ccfg+0x2b24d4>
    3c40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3c44:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3c48:	0e03012e 	adfeqsp	f0, f3, #0.5
    3c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c50:	0b201927 	bleq	80a0f4 <__ccfg+0x7ea14c>
    3c54:	00001301 	andeq	r1, r0, r1, lsl #6
    3c58:	0300050e 	movweq	r0, #1294	; 0x50e
    3c5c:	3b0b3a0e 	blcc	2d249c <__ccfg+0x2b24f4>
    3c60:	00134905 	andseq	r4, r3, r5, lsl #18
    3c64:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    3c68:	0b3a0e03 	bleq	e8747c <__ccfg+0xe674d4>
    3c6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c70:	0b201349 	bleq	80899c <__ccfg+0x7e89f4>
    3c74:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    3c78:	3a0e0300 	bcc	384880 <__ccfg+0x3648d8>
    3c7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c80:	000b2019 	andeq	r2, fp, r9, lsl r0
    3c84:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    3c88:	0b3a0e03 	bleq	e8749c <__ccfg+0xe674f4>
    3c8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3c90:	0b201349 	bleq	8089bc <__ccfg+0x7e8a14>
    3c94:	00001301 	andeq	r1, r0, r1, lsl #6
    3c98:	03000512 	movweq	r0, #1298	; 0x512
    3c9c:	3b0b3a0e 	blcc	2d24dc <__ccfg+0x2b2534>
    3ca0:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ca4:	00341300 	eorseq	r1, r4, r0, lsl #6
    3ca8:	0b3a0e03 	bleq	e874bc <__ccfg+0xe67514>
    3cac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3cb0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3cb4:	03193f01 	tsteq	r9, #1, 30
    3cb8:	3b0b3a0e 	blcc	2d24f8 <__ccfg+0x2b2550>
    3cbc:	1119270b 	tstne	r9, fp, lsl #14
    3cc0:	40061201 	andmi	r1, r6, r1, lsl #4
    3cc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3cc8:	00001301 	andeq	r1, r0, r1, lsl #6
    3ccc:	03003415 	movweq	r3, #1045	; 0x415
    3cd0:	3b0b3a0e 	blcc	2d2510 <__ccfg+0x2b2568>
    3cd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3cd8:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3cdc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3ce0:	0b3b0b3a 	bleq	ec69d0 <__ccfg+0xea6a28>
    3ce4:	051c1349 	ldreq	r1, [ip, #-841]	; 0xfffffcb7
    3ce8:	1d170000 	ldcne	0, cr0, [r7, #-0]
    3cec:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3cf0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3cf4:	010b590b 	tsteq	fp, fp, lsl #18
    3cf8:	18000013 	stmdane	r0, {r0, r1, r4}
    3cfc:	13310005 	teqne	r1, #5
    3d00:	00000b1c 	andeq	r0, r0, ip, lsl fp
    3d04:	31001d19 	tstcc	r0, r9, lsl sp
    3d08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d0c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3d10:	1a00000b 	bne	3d44 <NOROM_RFCRfTrimSet>
    3d14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3d18:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d1c:	0b590b58 	bleq	1646a84 <__ccfg+0x1626adc>
    3d20:	00001301 	andeq	r1, r0, r1, lsl #6
    3d24:	0182891b 	orreq	r8, r2, fp, lsl r9
    3d28:	31011100 	mrscc	r1, (UNDEF: 17)
    3d2c:	1c000013 	stcne	0, cr0, [r0], {19}
    3d30:	01018289 	smlabbeq	r1, r9, r2, r8
    3d34:	13010111 	movwne	r0, #4369	; 0x1111
    3d38:	8a1d0000 	bhi	743d40 <__ccfg+0x723d98>
    3d3c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3d40:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3d44:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    3d48:	11010182 	smlabbne	r1, r2, r1, r0
    3d4c:	01133101 	tsteq	r3, r1, lsl #2
    3d50:	1f000013 	svcne	0x00000013
    3d54:	01018289 	smlabbeq	r1, r9, r2, r8
    3d58:	00000111 	andeq	r0, r0, r1, lsl r1
    3d5c:	3f012e20 	svccc	0x00012e20
    3d60:	3a0e0319 	bcc	3849cc <__ccfg+0x364a24>
    3d64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3d68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3d6c:	97184006 	ldrls	r4, [r8, -r6]
    3d70:	13011942 	movwne	r1, #6466	; 0x1942
    3d74:	05210000 	streq	r0, [r1, #-0]!
    3d78:	3a0e0300 	bcc	384980 <__ccfg+0x3649d8>
    3d7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d80:	00170213 	andseq	r0, r7, r3, lsl r2
    3d84:	00342200 	eorseq	r2, r4, r0, lsl #4
    3d88:	0b3a0e03 	bleq	e8759c <__ccfg+0xe675f4>
    3d8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d90:	00001802 	andeq	r1, r0, r2, lsl #16
    3d94:	03003423 	movweq	r3, #1059	; 0x423
    3d98:	3b0b3a08 	blcc	2d25c0 <__ccfg+0x2b2618>
    3d9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3da0:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    3da4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3da8:	0b3b0b3a 	bleq	ec6a98 <__ccfg+0xea6af0>
    3dac:	00001349 	andeq	r1, r0, r9, asr #6
    3db0:	11010b25 	tstne	r1, r5, lsr #22
    3db4:	01061201 	tsteq	r6, r1, lsl #4
    3db8:	26000013 			; <UNDEFINED> instruction: 0x26000013
    3dbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3dc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3dc4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3dc8:	1d270000 	stcne	0, cr0, [r7, #-0]
    3dcc:	11133101 	tstne	r3, r1, lsl #2
    3dd0:	58061201 	stmdapl	r6, {r0, r9, ip}
    3dd4:	0105590b 	tsteq	r5, fp, lsl #18
    3dd8:	28000013 	stmdacs	r0, {r0, r1, r4}
    3ddc:	13310005 	teqne	r1, #5
    3de0:	0b290000 	bleq	a43de8 <__ccfg+0xa23e40>
    3de4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3de8:	2a000006 	bcs	3e08 <TrimAfterColdResetWakeupFromShutDown+0x88>
    3dec:	13310034 	teqne	r1, #52	; 0x34
    3df0:	00001702 	andeq	r1, r0, r2, lsl #14
    3df4:	31011d2b 	tstcc	r1, fp, lsr #26
    3df8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3dfc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3e00:	00130105 	andseq	r0, r3, r5, lsl #2
    3e04:	010b2c00 	tsteq	fp, r0, lsl #24
    3e08:	00001755 	andeq	r1, r0, r5, asr r7
    3e0c:	4900262d 	stmdbmi	r0, {r0, r2, r3, r5, r9, sl, sp}
    3e10:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    3e14:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3e18:	0b3a0e03 	bleq	e8762c <__ccfg+0xe67684>
    3e1c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3e20:	01111349 	tsteq	r1, r9, asr #6
    3e24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3e28:	00194297 	mulseq	r9, r7, r2
    3e2c:	01012f00 	tsteq	r1, r0, lsl #30
    3e30:	13011349 	movwne	r1, #4937	; 0x1349
    3e34:	21300000 	teqcs	r0, r0
    3e38:	2f134900 	svccs	0x00134900
    3e3c:	3100000b 	tstcc	r0, fp
    3e40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3e44:	0b3a0e03 	bleq	e87658 <__ccfg+0xe676b0>
    3e48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e4c:	1301193c 	movwne	r1, #6460	; 0x193c
    3e50:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
    3e54:	03193f01 	tsteq	r9, #1, 30
    3e58:	3b0b3a0e 	blcc	2d2698 <__ccfg+0x2b26f0>
    3e5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e60:	01193c13 	tsteq	r9, r3, lsl ip
    3e64:	33000013 	movwcc	r0, #19
    3e68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3e6c:	0b3a0e03 	bleq	e87680 <__ccfg+0xe676d8>
    3e70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e74:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3e78:	01000000 	mrseq	r0, (UNDEF: 0)
    3e7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3e80:	0e030b13 	vmoveq.32	d3[0], r0
    3e84:	17550e1b 	smmlane	r5, fp, lr, r0
    3e88:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3e8c:	24020000 	strcs	r0, [r2], #-0
    3e90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3e94:	000e030b 	andeq	r0, lr, fp, lsl #6
    3e98:	00160300 	andseq	r0, r6, r0, lsl #6
    3e9c:	0b3a0e03 	bleq	e876b0 <__ccfg+0xe67708>
    3ea0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3ea4:	24040000 	strcs	r0, [r4], #-0
    3ea8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3eac:	0008030b 	andeq	r0, r8, fp, lsl #6
    3eb0:	01040500 	tsteq	r4, r0, lsl #10
    3eb4:	0b3a0b0b 	bleq	e86ae8 <__ccfg+0xe66b40>
    3eb8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3ebc:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    3ec0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    3ec4:	0700000d 	streq	r0, [r0, -sp]
    3ec8:	0b0b0104 	bleq	2c42e0 <__ccfg+0x2a4338>
    3ecc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ed0:	00001301 	andeq	r1, r0, r1, lsl #6
    3ed4:	03001608 	movweq	r1, #1544	; 0x608
    3ed8:	3b0b3a0e 	blcc	2d2718 <__ccfg+0x2b2770>
    3edc:	00134905 	andseq	r4, r3, r5, lsl #18
    3ee0:	002e0900 	eoreq	r0, lr, r0, lsl #18
    3ee4:	0b3a0e03 	bleq	e876f8 <__ccfg+0xe67750>
    3ee8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3eec:	0b201349 	bleq	808c18 <__ccfg+0x7e8c70>
    3ef0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    3ef4:	03193f01 	tsteq	r9, #1, 30
    3ef8:	3b0b3a0e 	blcc	2d2738 <__ccfg+0x2b2790>
    3efc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f00:	010b2013 	tsteq	fp, r3, lsl r0
    3f04:	0b000013 	bleq	3f58 <NOROM_SetupSetVddrLevel+0x60>
    3f08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3f0c:	0b3b0b3a 	bleq	ec6bfc <__ccfg+0xea6c54>
    3f10:	00001349 	andeq	r1, r0, r9, asr #6
    3f14:	3f002e0c 	svccc	0x00002e0c
    3f18:	3a0e0319 	bcc	384b84 <__ccfg+0x364bdc>
    3f1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3f20:	11134919 	tstne	r3, r9, lsl r9
    3f24:	40061201 	andmi	r1, r6, r1, lsl #4
    3f28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3f2c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3f30:	03193f01 	tsteq	r9, #1, 30
    3f34:	3b0b3a0e 	blcc	2d2774 <__ccfg+0x2b27cc>
    3f38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3f3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f40:	97184006 	ldrls	r4, [r8, -r6]
    3f44:	13011942 	movwne	r1, #6466	; 0x1942
    3f48:	340e0000 	strcc	r0, [lr], #-0
    3f4c:	3a0e0300 	bcc	384b54 <__ccfg+0x364bac>
    3f50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f54:	00170213 	andseq	r0, r7, r3, lsl r2
    3f58:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    3f5c:	01111331 	tsteq	r1, r1, lsr r3
    3f60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f64:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3f68:	10000013 	andne	r0, r0, r3, lsl r0
    3f6c:	13310034 	teqne	r1, #52	; 0x34
    3f70:	00001702 	andeq	r1, r0, r2, lsl #14
    3f74:	11010b11 	tstne	r1, r1, lsl fp
    3f78:	00061201 	andeq	r1, r6, r1, lsl #4
    3f7c:	00341200 	eorseq	r1, r4, r0, lsl #4
    3f80:	00001331 	andeq	r1, r0, r1, lsr r3
    3f84:	31001d13 	tstcc	r0, r3, lsl sp
    3f88:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f8c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3f90:	1400000b 	strne	r0, [r0], #-11
    3f94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3f98:	0b3a0e03 	bleq	e877ac <__ccfg+0xe67804>
    3f9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fa0:	01111349 	tsteq	r1, r9, asr #6
    3fa4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3fa8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3fac:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3fb0:	00018289 	andeq	r8, r1, r9, lsl #5
    3fb4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3fb8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    3fbc:	3a0e0301 	bcc	384bc8 <__ccfg+0x364c20>
    3fc0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3fc4:	20134919 	andscs	r4, r3, r9, lsl r9
    3fc8:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fcc:	00341700 	eorseq	r1, r4, r0, lsl #14
    3fd0:	0b3a0e03 	bleq	e877e4 <__ccfg+0xe6783c>
    3fd4:	1349053b 	movtne	r0, #38203	; 0x953b
    3fd8:	34180000 	ldrcc	r0, [r8], #-0
    3fdc:	3a0e0300 	bcc	384be4 <__ccfg+0x364c3c>
    3fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fe4:	00180213 	andseq	r0, r8, r3, lsl r2
    3fe8:	001d1900 	andseq	r1, sp, r0, lsl #18
    3fec:	01521331 	cmpeq	r2, r1, lsr r3
    3ff0:	0b581755 	bleq	1609d4c <__ccfg+0x15e9da4>
    3ff4:	00000b59 	andeq	r0, r0, r9, asr fp
    3ff8:	31011d1a 	tstcc	r1, sl, lsl sp
    3ffc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    4000:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    4004:	0013010b 	andseq	r0, r3, fp, lsl #2
    4008:	010b1b00 	tsteq	fp, r0, lsl #22
    400c:	00001755 	andeq	r1, r0, r5, asr r7
    4010:	3f012e1c 	svccc	0x00012e1c
    4014:	3a0e0319 	bcc	384c80 <__ccfg+0x364cd8>
    4018:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    401c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    4020:	97184006 	ldrls	r4, [r8, -r6]
    4024:	00001942 	andeq	r1, r0, r2, asr #18
    4028:	31011d1d 	tstcc	r1, sp, lsl sp
    402c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4030:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4034:	0013010b 	andseq	r0, r3, fp, lsl #2
    4038:	011d1e00 	tsteq	sp, r0, lsl #28
    403c:	01111331 	tsteq	r1, r1, lsr r3
    4040:	0b580612 	bleq	1605890 <__ccfg+0x15e58e8>
    4044:	00000b59 	andeq	r0, r0, r9, asr fp
    4048:	01110100 	tsteq	r1, r0, lsl #2
    404c:	0b130e25 	bleq	4c78e8 <__ccfg+0x4a7940>
    4050:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    4054:	01111755 	tsteq	r1, r5, asr r7
    4058:	00001710 	andeq	r1, r0, r0, lsl r7
    405c:	0b002402 	bleq	d06c <__exidx_end+0x7590>
    4060:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4064:	0300000e 	movweq	r0, #14
    4068:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    406c:	0b3b0b3a 	bleq	ec6d5c <__ccfg+0xea6db4>
    4070:	00001349 	andeq	r1, r0, r9, asr #6
    4074:	0b002404 	bleq	d08c <__exidx_end+0x75b0>
    4078:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    407c:	05000008 	streq	r0, [r0, #-8]
    4080:	0e03012e 	adfeqsp	f0, f3, #0.5
    4084:	0b3b0b3a 	bleq	ec6d74 <__ccfg+0xea6dcc>
    4088:	0b201927 	bleq	80a52c <__ccfg+0x7ea584>
    408c:	00001301 	andeq	r1, r0, r1, lsl #6
    4090:	03000506 	movweq	r0, #1286	; 0x506
    4094:	3b0b3a0e 	blcc	2d28d4 <__ccfg+0x2b292c>
    4098:	0013490b 	andseq	r4, r3, fp, lsl #18
    409c:	00340700 	eorseq	r0, r4, r0, lsl #14
    40a0:	0b3a0e03 	bleq	e878b4 <__ccfg+0xe6790c>
    40a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    40a8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    40ac:	3a0e0301 	bcc	384cb8 <__ccfg+0x364d10>
    40b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    40b4:	20134919 	andscs	r4, r3, r9, lsl r9
    40b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    40bc:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    40c0:	01111331 	tsteq	r1, r1, lsr r3
    40c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    40c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    40cc:	0a000013 	beq	4120 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x4>
    40d0:	13310005 	teqne	r1, #5
    40d4:	00001702 	andeq	r1, r0, r2, lsl #14
    40d8:	3100340b 	tstcc	r0, fp, lsl #8
    40dc:	00170213 	andseq	r0, r7, r3, lsl r2
    40e0:	00050c00 	andeq	r0, r5, r0, lsl #24
    40e4:	0b1c1331 	bleq	708db0 <__ccfg+0x6e8e08>
    40e8:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    40ec:	11000182 	smlabbne	r0, r2, r1, r0
    40f0:	00133101 	andseq	r3, r3, r1, lsl #2
    40f4:	82890e00 	addhi	r0, r9, #0, 28
    40f8:	01110001 	tsteq	r1, r1
    40fc:	31194295 			; <UNDEFINED> instruction: 0x31194295
    4100:	0f000013 	svceq	0x00000013
    4104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4108:	0b3a0e03 	bleq	e8791c <__ccfg+0xe67974>
    410c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    4110:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4114:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4118:	00130119 	andseq	r0, r3, r9, lsl r1
    411c:	00051000 	andeq	r1, r5, r0
    4120:	0b3a0e03 	bleq	e87934 <__ccfg+0xe6798c>
    4124:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4128:	00001702 	andeq	r1, r0, r2, lsl #14
    412c:	01828911 	orreq	r8, r2, r1, lsl r9
    4130:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    4134:	13311942 	teqne	r1, #1081344	; 0x108000
    4138:	8a120000 	bhi	484140 <__ccfg+0x464198>
    413c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    4140:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    4144:	34130000 	ldrcc	r0, [r3], #-0
    4148:	3a0e0300 	bcc	384d50 <__ccfg+0x364da8>
    414c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4150:	00170213 	andseq	r0, r7, r3, lsl r2
    4154:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    4158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    415c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4160:	13491927 	movtne	r1, #39207	; 0x9927
    4164:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4168:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    416c:	00130119 	andseq	r0, r3, r9, lsl r1
    4170:	011d1500 	tsteq	sp, r0, lsl #10
    4174:	01111331 	tsteq	r1, r1, lsr r3
    4178:	0b580612 	bleq	16059c8 <__ccfg+0x15e5a20>
    417c:	00000b59 	andeq	r0, r0, r9, asr fp
    4180:	11010b16 	tstne	r1, r6, lsl fp
    4184:	00061201 	andeq	r1, r6, r1, lsl #4
    4188:	002e1700 	eoreq	r1, lr, r0, lsl #14
    418c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    4190:	0b3b0b3a 	bleq	ec6e80 <__ccfg+0xea6ed8>
    4194:	13491927 	movtne	r1, #39207	; 0x9927
    4198:	0000193c 	andeq	r1, r0, ip, lsr r9
    419c:	01110100 	tsteq	r1, r0, lsl #2
    41a0:	0b130e25 	bleq	4c7a3c <__ccfg+0x4a7a94>
    41a4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    41a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    41ac:	00001710 	andeq	r1, r0, r0, lsl r7
    41b0:	0b002402 	bleq	d1c0 <__exidx_end+0x76e4>
    41b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    41b8:	03000008 	movweq	r0, #8
    41bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    41c0:	0b3b0b3a 	bleq	ec6eb0 <__ccfg+0xea6f08>
    41c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    41c8:	24040000 	strcs	r0, [r4], #-0
    41cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    41d0:	000e030b 	andeq	r0, lr, fp, lsl #6
    41d4:	00160500 	andseq	r0, r6, r0, lsl #10
    41d8:	0b3a0e03 	bleq	e879ec <__ccfg+0xe67a44>
    41dc:	0b39053b 	bleq	e456d0 <__ccfg+0xe25728>
    41e0:	00001349 	andeq	r1, r0, r9, asr #6
    41e4:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    41e8:	07000013 	smladeq	r0, r3, r0, r0
    41ec:	0b0b0117 	bleq	2c4650 <__ccfg+0x2a46a8>
    41f0:	0b3b0b3a 	bleq	ec6ee0 <__ccfg+0xea6f38>
    41f4:	13010b39 	movwne	r0, #6969	; 0x1b39
    41f8:	0d080000 	stceq	0, cr0, [r8, #-0]
    41fc:	3a0e0300 	bcc	384e04 <__ccfg+0x364e5c>
    4200:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4204:	0013490b 	andseq	r4, r3, fp, lsl #18
    4208:	01010900 	tsteq	r1, r0, lsl #18
    420c:	13011349 	movwne	r1, #4937	; 0x1349
    4210:	210a0000 	mrscs	r0, (UNDEF: 10)
    4214:	2f134900 	svccs	0x00134900
    4218:	0b00000b 	bleq	424c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x68>
    421c:	0b0b0113 	bleq	2c4670 <__ccfg+0x2a46c8>
    4220:	0b3b0b3a 	bleq	ec6f10 <__ccfg+0xea6f68>
    4224:	13010b39 	movwne	r0, #6969	; 0x1b39
    4228:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    422c:	3a0e0300 	bcc	384e34 <__ccfg+0x364e8c>
    4230:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4234:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4238:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    423c:	0b0b000f 	bleq	2c4280 <__ccfg+0x2a42d8>
    4240:	370e0000 	strcc	r0, [lr, -r0]
    4244:	00134900 	andseq	r4, r3, r0, lsl #18
    4248:	01130f00 	tsteq	r3, r0, lsl #30
    424c:	0b0b0e03 	bleq	2c7a60 <__ccfg+0x2a7ab8>
    4250:	0b3b0b3a 	bleq	ec6f40 <__ccfg+0xea6f98>
    4254:	13010b39 	movwne	r0, #6969	; 0x1b39
    4258:	0d100000 	ldceq	0, cr0, [r0, #-0]
    425c:	3a080300 	bcc	204e64 <__ccfg+0x1e4ebc>
    4260:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4264:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4268:	1100000b 	tstne	r0, fp
    426c:	0b0b000f 	bleq	2c42b0 <__ccfg+0x2a4308>
    4270:	00001349 	andeq	r1, r0, r9, asr #6
    4274:	03011312 	movweq	r1, #4882	; 0x1312
    4278:	3a050b0e 	bcc	146eb8 <__ccfg+0x126f10>
    427c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4280:	0013010b 	andseq	r0, r3, fp, lsl #2
    4284:	000d1300 	andeq	r1, sp, r0, lsl #6
    4288:	0b3a0e03 	bleq	e87a9c <__ccfg+0xe67af4>
    428c:	0b390b3b 	bleq	e46f80 <__ccfg+0xe26fd8>
    4290:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4294:	15140000 	ldrne	r0, [r4, #-0]
    4298:	00192700 	andseq	r2, r9, r0, lsl #14
    429c:	01151500 	tsteq	r5, r0, lsl #10
    42a0:	13491927 	movtne	r1, #39207	; 0x9927
    42a4:	00001301 	andeq	r1, r0, r1, lsl #6
    42a8:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
    42ac:	17000013 	smladne	r0, r3, r0, r0
    42b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    42b4:	0b3a050b 	bleq	e856e8 <__ccfg+0xe65740>
    42b8:	0b39053b 	bleq	e457ac <__ccfg+0xe25804>
    42bc:	00001301 	andeq	r1, r0, r1, lsl #6
    42c0:	03000d18 	movweq	r0, #3352	; 0xd18
    42c4:	3b0b3a0e 	blcc	2d2b04 <__ccfg+0x2b2b5c>
    42c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42cc:	000b3813 	andeq	r3, fp, r3, lsl r8
    42d0:	000d1900 	andeq	r1, sp, r0, lsl #18
    42d4:	0b3a0e03 	bleq	e87ae8 <__ccfg+0xe67b40>
    42d8:	0b39053b 	bleq	e457cc <__ccfg+0xe25824>
    42dc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    42e0:	131a0000 	tstne	sl, #0
    42e4:	0b0e0301 	bleq	384ef0 <__ccfg+0x364f48>
    42e8:	3b0b3a0b 	blcc	2d2b1c <__ccfg+0x2b2b74>
    42ec:	010b3905 	tsteq	fp, r5, lsl #18
    42f0:	1b000013 	blne	4344 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x50>
    42f4:	0b0b0113 	bleq	2c4748 <__ccfg+0x2a47a0>
    42f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42fc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4300:	171c0000 	ldrne	r0, [ip, -r0]
    4304:	3a0b0b01 	bcc	2c6f10 <__ccfg+0x2a6f68>
    4308:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    430c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4310:	000d1d00 	andeq	r1, sp, r0, lsl #26
    4314:	0b3a0e03 	bleq	e87b28 <__ccfg+0xe67b80>
    4318:	0b39053b 	bleq	e4580c <__ccfg+0xe25864>
    431c:	00001349 	andeq	r1, r0, r9, asr #6
    4320:	2701151e 	smladcs	r1, lr, r5, r1
    4324:	00130119 	andseq	r0, r3, r9, lsl r1
    4328:	00341f00 	eorseq	r1, r4, r0, lsl #30
    432c:	0b3a0e03 	bleq	e87b40 <__ccfg+0xe67b98>
    4330:	0b39053b 	bleq	e45824 <__ccfg+0xe2587c>
    4334:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4338:	0000193c 	andeq	r1, r0, ip, lsr r9
    433c:	00002620 	andeq	r2, r0, r0, lsr #12
    4340:	00342100 	eorseq	r2, r4, r0, lsl #2
    4344:	0b3a0e03 	bleq	e87b58 <__ccfg+0xe67bb0>
    4348:	0b390b3b 	bleq	e4703c <__ccfg+0xe27094>
    434c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4350:	0000193c 	andeq	r1, r0, ip, lsr r9
    4354:	3f012e22 	svccc	0x00012e22
    4358:	3a0e0319 	bcc	384fc4 <__ccfg+0x36501c>
    435c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4360:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4364:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4368:	97184006 	ldrls	r4, [r8, -r6]
    436c:	13011942 	movwne	r1, #6466	; 0x1942
    4370:	05230000 	streq	r0, [r3, #-0]!
    4374:	3a0e0300 	bcc	384f7c <__ccfg+0x364fd4>
    4378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    437c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4380:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
    4384:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4388:	0b3b0b3a 	bleq	ec7078 <__ccfg+0xea70d0>
    438c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4390:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4394:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    4398:	08030034 	stmdaeq	r3, {r2, r4, r5}
    439c:	0b3b0b3a 	bleq	ec708c <__ccfg+0xea70e4>
    43a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43a4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    43a8:	26000017 			; <UNDEFINED> instruction: 0x26000017
    43ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    43b0:	0b3b0b3a 	bleq	ec70a0 <__ccfg+0xea70f8>
    43b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    43b8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    43bc:	00000017 	andeq	r0, r0, r7, lsl r0
    43c0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    43c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    43c8:	110e1b0e 	tstne	lr, lr, lsl #22
    43cc:	10061201 	andne	r1, r6, r1, lsl #4
    43d0:	02000017 	andeq	r0, r0, #23
    43d4:	0b0b0024 	bleq	2c446c <__ccfg+0x2a44c4>
    43d8:	0e030b3e 	vmoveq.16	d3[0], r0
    43dc:	24030000 	strcs	r0, [r3], #-0
    43e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43e4:	0008030b 	andeq	r0, r8, fp, lsl #6
    43e8:	00160400 	andseq	r0, r6, r0, lsl #8
    43ec:	0b3a0e03 	bleq	e87c00 <__ccfg+0xe67c58>
    43f0:	0b39053b 	bleq	e458e4 <__ccfg+0xe2593c>
    43f4:	00001349 	andeq	r1, r0, r9, asr #6
    43f8:	03001605 	movweq	r1, #1541	; 0x605
    43fc:	3b0b3a0e 	blcc	2d2c3c <__ccfg+0x2b2c94>
    4400:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4404:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4408:	0b0b0117 	bleq	2c486c <__ccfg+0x2a48c4>
    440c:	0b3b0b3a 	bleq	ec70fc <__ccfg+0xea7154>
    4410:	13010b39 	movwne	r0, #6969	; 0x1b39
    4414:	0d070000 	stceq	0, cr0, [r7, #-0]
    4418:	3a0e0300 	bcc	385020 <__ccfg+0x365078>
    441c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4420:	0013490b 	andseq	r4, r3, fp, lsl #18
    4424:	01010800 	tsteq	r1, r0, lsl #16
    4428:	13011349 	movwne	r1, #4937	; 0x1349
    442c:	21090000 	mrscs	r0, (UNDEF: 9)
    4430:	2f134900 	svccs	0x00134900
    4434:	0a00000b 	beq	4468 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xe8>
    4438:	0b0b0113 	bleq	2c488c <__ccfg+0x2a48e4>
    443c:	0b3b0b3a 	bleq	ec712c <__ccfg+0xea7184>
    4440:	13010b39 	movwne	r0, #6969	; 0x1b39
    4444:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4448:	3a0e0300 	bcc	385050 <__ccfg+0x3650a8>
    444c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4450:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4454:	0c00000b 	stceq	0, cr0, [r0], {11}
    4458:	0b0b000f 	bleq	2c449c <__ccfg+0x2a44f4>
    445c:	130d0000 	movwne	r0, #53248	; 0xd000
    4460:	0b0e0301 	bleq	38506c <__ccfg+0x3650c4>
    4464:	3b0b3a0b 	blcc	2d2c98 <__ccfg+0x2b2cf0>
    4468:	010b390b 	tsteq	fp, fp, lsl #18
    446c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4470:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4474:	0b3b0b3a 	bleq	ec7164 <__ccfg+0xea71bc>
    4478:	13490b39 	movtne	r0, #39737	; 0x9b39
    447c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4480:	0b000f0f 	bleq	80c4 <__exidx_end+0x25e8>
    4484:	0013490b 	andseq	r4, r3, fp, lsl #18
    4488:	01131000 	tsteq	r3, r0
    448c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    4490:	0b3b0b3a 	bleq	ec7180 <__ccfg+0xea71d8>
    4494:	13010b39 	movwne	r0, #6969	; 0x1b39
    4498:	0d110000 	ldceq	0, cr0, [r1, #-0]
    449c:	3a0e0300 	bcc	3850a4 <__ccfg+0x3650fc>
    44a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    44a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    44a8:	12000005 	andne	r0, r0, #5
    44ac:	19270015 	stmdbne	r7!, {r0, r2, r4}
    44b0:	15130000 	ldrne	r0, [r3, #-0]
    44b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    44b8:	00130113 	andseq	r0, r3, r3, lsl r1
    44bc:	00051400 	andeq	r1, r5, r0, lsl #8
    44c0:	00001349 	andeq	r1, r0, r9, asr #6
    44c4:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    44c8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    44cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    44d0:	0b3a050b 	bleq	e85904 <__ccfg+0xe6595c>
    44d4:	0b39053b 	bleq	e459c8 <__ccfg+0xe25a20>
    44d8:	00001301 	andeq	r1, r0, r1, lsl #6
    44dc:	03000d17 	movweq	r0, #3351	; 0xd17
    44e0:	3b0b3a0e 	blcc	2d2d20 <__ccfg+0x2b2d78>
    44e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    44e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    44ec:	000d1800 	andeq	r1, sp, r0, lsl #16
    44f0:	0b3a0e03 	bleq	e87d04 <__ccfg+0xe67d5c>
    44f4:	0b39053b 	bleq	e459e8 <__ccfg+0xe25a40>
    44f8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    44fc:	13190000 	tstne	r9, #0
    4500:	0b0e0301 	bleq	38510c <__ccfg+0x365164>
    4504:	3b0b3a0b 	blcc	2d2d38 <__ccfg+0x2b2d90>
    4508:	010b3905 	tsteq	fp, r5, lsl #18
    450c:	1a000013 	bne	4560 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    4510:	0b0b0113 	bleq	2c4964 <__ccfg+0x2a49bc>
    4514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4518:	13010b39 	movwne	r0, #6969	; 0x1b39
    451c:	171b0000 	ldrne	r0, [fp, -r0]
    4520:	3a0b0b01 	bcc	2c712c <__ccfg+0x2a7184>
    4524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4528:	0013010b 	andseq	r0, r3, fp, lsl #2
    452c:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4530:	0b3a0e03 	bleq	e87d44 <__ccfg+0xe67d9c>
    4534:	0b39053b 	bleq	e45a28 <__ccfg+0xe25a80>
    4538:	00001349 	andeq	r1, r0, r9, asr #6
    453c:	0300131d 	movweq	r1, #797	; 0x31d
    4540:	00193c0e 	andseq	r3, r9, lr, lsl #24
    4544:	01151e00 	tsteq	r5, r0, lsl #28
    4548:	13011927 	movwne	r1, #6439	; 0x1927
    454c:	341f0000 	ldrcc	r0, [pc], #-0	; 4554 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x84>
    4550:	3a0e0300 	bcc	385158 <__ccfg+0x3651b0>
    4554:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4558:	3f13490b 	svccc	0x0013490b
    455c:	00193c19 	andseq	r3, r9, r9, lsl ip
    4560:	00342000 	eorseq	r2, r4, r0
    4564:	0b3a0e03 	bleq	e87d78 <__ccfg+0xe67dd0>
    4568:	0b390b3b 	bleq	e4725c <__ccfg+0xe272b4>
    456c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4570:	0000193c 	andeq	r1, r0, ip, lsr r9
    4574:	3f012e21 	svccc	0x00012e21
    4578:	3a0e0319 	bcc	3851e4 <__ccfg+0x36523c>
    457c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4580:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4584:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4588:	96184006 	ldrls	r4, [r8], -r6
    458c:	13011942 	movwne	r1, #6466	; 0x1942
    4590:	34220000 	strtcc	r0, [r2], #-0
    4594:	3a0e0300 	bcc	38519c <__ccfg+0x3651f4>
    4598:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    459c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    45a0:	1742b717 	smlaldne	fp, r2, r7, r7
    45a4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    45a8:	03193f01 	tsteq	r9, #1, 30
    45ac:	3b0b3a0e 	blcc	2d2dec <__ccfg+0x2b2e44>
    45b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    45b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    45b8:	97184006 	ldrls	r4, [r8, -r6]
    45bc:	00001942 	andeq	r1, r0, r2, asr #18
    45c0:	03000524 	movweq	r0, #1316	; 0x524
    45c4:	3b0b3a0e 	blcc	2d2e04 <__ccfg+0x2b2e5c>
    45c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    45cc:	00180213 	andseq	r0, r8, r3, lsl r2
    45d0:	11010000 	mrsne	r0, (UNDEF: 1)
    45d4:	130e2501 	movwne	r2, #58625	; 0xe501
    45d8:	1b0e030b 	blne	38520c <__ccfg+0x365264>
    45dc:	0017100e 	andseq	r1, r7, lr
    45e0:	00240200 	eoreq	r0, r4, r0, lsl #4
    45e4:	0b3e0b0b 	bleq	f87218 <__ccfg+0xf67270>
    45e8:	00000803 	andeq	r0, r0, r3, lsl #16
    45ec:	0b002403 	bleq	d600 <__exidx_end+0x7b24>
    45f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    45f4:	0400000e 	streq	r0, [r0], #-14
    45f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    45fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4600:	13490b39 	movtne	r0, #39737	; 0x9b39
    4604:	16050000 	strne	r0, [r5], -r0
    4608:	3a0e0300 	bcc	385210 <__ccfg+0x365268>
    460c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4610:	0013490b 	andseq	r4, r3, fp, lsl #18
    4614:	01170600 	tsteq	r7, r0, lsl #12
    4618:	0b3a0b0b 	bleq	e8724c <__ccfg+0xe672a4>
    461c:	0b390b3b 	bleq	e47310 <__ccfg+0xe27368>
    4620:	00001301 	andeq	r1, r0, r1, lsl #6
    4624:	03000d07 	movweq	r0, #3335	; 0xd07
    4628:	3b0b3a0e 	blcc	2d2e68 <__ccfg+0x2b2ec0>
    462c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4630:	08000013 	stmdaeq	r0, {r0, r1, r4}
    4634:	13490101 	movtne	r0, #37121	; 0x9101
    4638:	00001301 	andeq	r1, r0, r1, lsl #6
    463c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    4640:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4644:	01130a00 	tsteq	r3, r0, lsl #20
    4648:	0b3a0b0b 	bleq	e8727c <__ccfg+0xe672d4>
    464c:	0b390b3b 	bleq	e47340 <__ccfg+0xe27398>
    4650:	00001301 	andeq	r1, r0, r1, lsl #6
    4654:	03000d0b 	movweq	r0, #3339	; 0xd0b
    4658:	3b0b3a0e 	blcc	2d2e98 <__ccfg+0x2b2ef0>
    465c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4660:	000b3813 	andeq	r3, fp, r3, lsl r8
    4664:	000f0c00 	andeq	r0, pc, r0, lsl #24
    4668:	00000b0b 	andeq	r0, r0, fp, lsl #22
    466c:	0301130d 	movweq	r1, #4877	; 0x130d
    4670:	3a0b0b0e 	bcc	2c72b0 <__ccfg+0x2a7308>
    4674:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4678:	0013010b 	andseq	r0, r3, fp, lsl #2
    467c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    4680:	0b3a0803 	bleq	e86694 <__ccfg+0xe666ec>
    4684:	0b390b3b 	bleq	e47378 <__ccfg+0xe273d0>
    4688:	0b381349 	bleq	e093b4 <__ccfg+0xde940c>
    468c:	0f0f0000 	svceq	0x000f0000
    4690:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4694:	10000013 	andne	r0, r0, r3, lsl r0
    4698:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    469c:	0b3a050b 	bleq	e85ad0 <__ccfg+0xe65b28>
    46a0:	0b390b3b 	bleq	e47394 <__ccfg+0xe273ec>
    46a4:	00001301 	andeq	r1, r0, r1, lsl #6
    46a8:	03000d11 	movweq	r0, #3345	; 0xd11
    46ac:	3b0b3a0e 	blcc	2d2eec <__ccfg+0x2b2f44>
    46b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    46b4:	00053813 	andeq	r3, r5, r3, lsl r8
    46b8:	00151200 	andseq	r1, r5, r0, lsl #4
    46bc:	00001927 	andeq	r1, r0, r7, lsr #18
    46c0:	27011513 	smladcs	r1, r3, r5, r1
    46c4:	01134919 	tsteq	r3, r9, lsl r9
    46c8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    46cc:	13490005 	movtne	r0, #36869	; 0x9005
    46d0:	26150000 	ldrcs	r0, [r5], -r0
    46d4:	00134900 	andseq	r4, r3, r0, lsl #18
    46d8:	01131600 	tsteq	r3, r0, lsl #12
    46dc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    46e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46e4:	13010b39 	movwne	r0, #6969	; 0x1b39
    46e8:	0d170000 	ldceq	0, cr0, [r7, #-0]
    46ec:	3a0e0300 	bcc	3852f4 <__ccfg+0x36534c>
    46f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    46f8:	1800000b 	stmdane	r0, {r0, r1, r3}
    46fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4704:	13490b39 	movtne	r0, #39737	; 0x9b39
    4708:	00000538 	andeq	r0, r0, r8, lsr r5
    470c:	03011319 	movweq	r1, #4889	; 0x1319
    4710:	3a0b0b0e 	bcc	2c7350 <__ccfg+0x2a73a8>
    4714:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4718:	0013010b 	andseq	r0, r3, fp, lsl #2
    471c:	01131a00 	tsteq	r3, r0, lsl #20
    4720:	0b3a0b0b 	bleq	e87354 <__ccfg+0xe673ac>
    4724:	0b39053b 	bleq	e45c18 <__ccfg+0xe25c70>
    4728:	00001301 	andeq	r1, r0, r1, lsl #6
    472c:	0b01171b 	bleq	4a3a0 <__ccfg+0x2a3f8>
    4730:	3b0b3a0b 	blcc	2d2f64 <__ccfg+0x2b2fbc>
    4734:	010b3905 	tsteq	fp, r5, lsl #18
    4738:	1c000013 	stcne	0, cr0, [r0], {19}
    473c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4744:	13490b39 	movtne	r0, #39737	; 0x9b39
    4748:	131d0000 	tstne	sp, #0
    474c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4750:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    4754:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4758:	00001301 	andeq	r1, r0, r1, lsl #6
    475c:	0300341f 	movweq	r3, #1055	; 0x41f
    4760:	3b0b3a0e 	blcc	2d2fa0 <__ccfg+0x2b2ff8>
    4764:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4768:	3c193f13 	ldccc	15, cr3, [r9], {19}
    476c:	20000019 	andcs	r0, r0, r9, lsl r0
    4770:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4774:	0b3b0b3a 	bleq	ec7464 <__ccfg+0xea74bc>
    4778:	13490b39 	movtne	r0, #39737	; 0x9b39
    477c:	00001802 	andeq	r1, r0, r2, lsl #16
    4780:	47003421 	strmi	r3, [r0, -r1, lsr #8]
    4784:	00180213 	andseq	r0, r8, r3, lsl r2
    4788:	11010000 	mrsne	r0, (UNDEF: 1)
    478c:	130e2501 	movwne	r2, #58625	; 0xe501
    4790:	1b0e030b 	blne	3853c4 <__ccfg+0x36541c>
    4794:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    4798:	00171006 	andseq	r1, r7, r6
    479c:	00240200 	eoreq	r0, r4, r0, lsl #4
    47a0:	0b3e0b0b 	bleq	f873d4 <__ccfg+0xf6742c>
    47a4:	00000e03 	andeq	r0, r0, r3, lsl #28
    47a8:	0b002403 	bleq	d7bc <__exidx_end+0x7ce0>
    47ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    47b0:	04000008 	streq	r0, [r0], #-8
    47b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    47b8:	0b3b0b3a 	bleq	ec74a8 <__ccfg+0xea7500>
    47bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    47c0:	0f050000 	svceq	0x00050000
    47c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    47c8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    47cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    47d0:	13011349 	movwne	r1, #4937	; 0x1349
    47d4:	05070000 	streq	r0, [r7, #-0]
    47d8:	00134900 	andseq	r4, r3, r0, lsl #18
    47dc:	00260800 	eoreq	r0, r6, r0, lsl #16
    47e0:	34090000 	strcc	r0, [r9], #-0
    47e4:	3a0e0300 	bcc	3853ec <__ccfg+0x365444>
    47e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47ec:	3f13490b 	svccc	0x0013490b
    47f0:	00193c19 	andseq	r3, r9, r9, lsl ip
    47f4:	01040a00 	tsteq	r4, r0, lsl #20
    47f8:	0b3e0e03 	bleq	f8800c <__ccfg+0xf68064>
    47fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4800:	0b3b0b3a 	bleq	ec74f0 <__ccfg+0xea7548>
    4804:	13010b39 	movwne	r0, #6969	; 0x1b39
    4808:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    480c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    4810:	0c00000b 	stceq	0, cr0, [r0], {11}
    4814:	13490101 	movtne	r0, #37121	; 0x9101
    4818:	00001301 	andeq	r1, r0, r1, lsl #6
    481c:	0000210d 	andeq	r2, r0, sp, lsl #2
    4820:	00260e00 	eoreq	r0, r6, r0, lsl #28
    4824:	00001349 	andeq	r1, r0, r9, asr #6
    4828:	0300340f 	movweq	r3, #1039	; 0x40f
    482c:	3b0b3a0e 	blcc	2d306c <__ccfg+0x2b30c4>
    4830:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4834:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4838:	10000019 	andne	r0, r0, r9, lsl r0
    483c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4840:	0000193c 	andeq	r1, r0, ip, lsr r9
    4844:	27001511 	smladcs	r0, r1, r5, r1
    4848:	12000019 	andne	r0, r0, #25
    484c:	0e030017 	mcreq	0, 0, r0, cr3, cr7, {0}
    4850:	0000193c 	andeq	r1, r0, ip, lsr r9
    4854:	03011313 	movweq	r1, #4883	; 0x1313
    4858:	3a0b0b0e 	bcc	2c7498 <__ccfg+0x2a74f0>
    485c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4860:	0013010b 	andseq	r0, r3, fp, lsl #2
    4864:	000d1400 	andeq	r1, sp, r0, lsl #8
    4868:	0b3a0e03 	bleq	e8807c <__ccfg+0xe680d4>
    486c:	0b39053b 	bleq	e45d60 <__ccfg+0xe25db8>
    4870:	0b381349 	bleq	e0959c <__ccfg+0xde95f4>
    4874:	21150000 	tstcs	r5, r0
    4878:	2f134900 	svccs	0x00134900
    487c:	1600000b 	strne	r0, [r0], -fp
    4880:	0e030104 	adfeqs	f0, f3, f4
    4884:	0b0b0b3e 	bleq	2c7584 <__ccfg+0x2a75dc>
    4888:	0b3a1349 	bleq	e895b4 <__ccfg+0xe6960c>
    488c:	0b39053b 	bleq	e45d80 <__ccfg+0xe25dd8>
    4890:	00001301 	andeq	r1, r0, r1, lsl #6
    4894:	03000d17 	movweq	r0, #3351	; 0xd17
    4898:	3b0b3a08 	blcc	2d30c0 <__ccfg+0x2b3118>
    489c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    48a0:	000b3813 	andeq	r3, fp, r3, lsl r8
    48a4:	01171800 	tsteq	r7, r0, lsl #16
    48a8:	0b3a0b0b 	bleq	e874dc <__ccfg+0xe67534>
    48ac:	0b39053b 	bleq	e45da0 <__ccfg+0xe25df8>
    48b0:	00001301 	andeq	r1, r0, r1, lsl #6
    48b4:	03000d19 	movweq	r0, #3353	; 0xd19
    48b8:	3b0b3a08 	blcc	2d30e0 <__ccfg+0x2b3138>
    48bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    48c0:	1a000013 	bne	4914 <srand>
    48c4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    48c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    48d0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    48d4:	03193f01 	tsteq	r9, #1, 30
    48d8:	3b0b3a0e 	blcc	2d3118 <__ccfg+0x2b3170>
    48dc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    48e0:	11134919 	tstne	r3, r9, lsl r9
    48e4:	40061201 	andmi	r1, r6, r1, lsl #4
    48e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    48ec:	051c0000 	ldreq	r0, [ip, #-0]
    48f0:	3a080300 	bcc	2054f8 <__ccfg+0x1e5550>
    48f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    48fc:	1742b717 	smlaldne	fp, r2, r7, r7
    4900:	341d0000 	ldrcc	r0, [sp], #-0
    4904:	3a080300 	bcc	20550c <__ccfg+0x1e5564>
    4908:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    490c:	0013490b 	andseq	r4, r3, fp, lsl #18
    4910:	010b1e00 	tsteq	fp, r0, lsl #28
    4914:	00001755 	andeq	r1, r0, r5, asr r7
    4918:	0300341f 	movweq	r3, #1055	; 0x41f
    491c:	3b0b3a0e 	blcc	2d315c <__ccfg+0x2b31b4>
    4920:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4924:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4928:	00001742 	andeq	r1, r0, r2, asr #14
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000005a4 	andeq	r0, r0, r4, lsr #11
       4:	000005f8 	strdeq	r0, [r0], -r8
       8:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
       c:	ae00000a 	cdpge	0, 0, cr0, cr0, cr10, {0}
    return node->data_base.item_array[index];
      10:	0100000a 	tsteq	r0, sl
      14:	0ace5000 	beq	ff39401c <_estack+0xdf38f01c>
      18:	0ad10000 	beq	ff440020 <_estack+0xdf43b020>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	0006c000 	andeq	ip, r6, r0
      2c:	0006c400 	andeq	ip, r6, r0, lsl #8
      30:	91000200 	mrsls	r0, R8_usr
      34:	00000064 	andeq	r0, r0, r4, rrx
      38:	00000000 	andeq	r0, r0, r0
      3c:	0006c000 	andeq	ip, r6, r0
			i = k;
      40:	0006c400 	andeq	ip, r6, r0, lsl #8
				j->Next = k;
      44:	53000100 	movwpl	r0, #256	; 0x100
	...
}
      50:	00000704 	andeq	r0, r0, r4, lsl #14
      54:	00000714 	andeq	r0, r0, r4, lsl r7
		release;
      58:	96540001 	ldrbls	r0, [r4], -r1
      5c:	b6000007 	strlt	r0, [r0], -r7
			nq++;
      60:	01000007 	tsteq	r0, r7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00005400 	andeq	r5, r0, r0, lsl #8
      68:	00000000 	andeq	r0, r0, r0
      6c:	06e20000 	strbteq	r0, [r2], r0
      70:	06e40000 	strbteq	r0, [r4], r0
      74:	00010000 	andeq	r0, r1, r0
      78:	00000051 	andeq	r0, r0, r1, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	0006e200 	andeq	lr, r6, r0, lsl #4
      84:	0006e400 	andeq	lr, r6, r0, lsl #8
      88:	52000100 	andpl	r0, r0, #0, 2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	00000750 	andeq	r0, r0, r0, asr r7
      98:	0000075b 	andeq	r0, r0, fp, asr r7
	if (baction == NULL)
      9c:	5b500001 	blpl	14000a8 <__ccfg+0x13e0100>
      a0:	76000007 	strvc	r0, [r0], -r7
	(*baction) (pbutton);
      a4:	01000007 	tsteq	r0, r7
endthread
      a8:	00005400 	andeq	r5, r0, r0, lsl #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	08320000 	ldmdaeq	r2!, {}	; <UNPREDICTABLE>
endthread
      b4:	08480000 	stmdaeq	r8, {}^	; <UNPREDICTABLE>
      b8:	00010000 	andeq	r0, r1, r0
      bc:	00084c54 	andeq	r4, r8, r4, asr ip
      c0:	00085e00 	andeq	r5, r8, r0, lsl #28
      c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
fsm sender(struct ResponseMessage *message) {
      d0:	000008a6 	andeq	r0, r0, r6, lsr #17
}
      d4:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
      d8:	b3500001 	cmplt	r0, #1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	ec000008 	stc	0, cr0, [r0], {8}
      e0:	01000008 	tsteq	r0, r8
      e4:	00005400 	andeq	r5, r0, r0, lsl #8
      e8:	00000000 	andeq	r0, r0, r0
		packet[0] = 0;
      ec:	0a7a0000 	beq	1e800f4 <__ccfg+0x1e6014c>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	0aa40000 	beq	fe9000f8 <_estack+0xde8fb0f8>
		*p = message->tpe;p++;
      f4:	00010000 	andeq	r0, r1, r0
      f8:	00000054 	andeq	r0, r0, r4, asr r0
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	00000000 	andeq	r0, r0, r0
		*p = message->sender_id;p++;
     100:	0001e800 	andeq	lr, r1, r0, lsl #16
		*p = message->receiver_id;p++;
     104:	00021400 	andeq	r1, r2, r0, lsl #8
		switch(message->tpe) {
     108:	50000100 	andpl	r0, r0, r0, lsl #2
     10c:	00000566 	andeq	r0, r0, r6, ror #10
     110:	00000569 	andeq	r0, r0, r9, ror #10
		tcv_endp(packet);
     114:	00500001 	subseq	r0, r0, r1
     118:	00000000 	andeq	r0, r0, r0
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	f2000000 	vhadd.s8	d0, d0, d0
     120:	bc000001 	stclt	0, cr0, [r0], {1}
}
     124:	01000002 	tsteq	r0, r2
		finish;
     128:	02ce5400 	sbceq	r5, lr, #0, 8
     12c:	03240000 			; <UNDEFINED> instruction: 0x03240000
				*p = message->status;p++;
     130:	00010000 	andeq	r0, r1, r0
     134:	0003b254 	andeq	fp, r3, r4, asr r2
				strncpy(p, message->record, sizeof(message->record));
     138:	0003f800 	andeq	pc, r3, r0, lsl #16
				*p = message->padding;p++;
     13c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				strncpy(p, message->record, sizeof(message->record));
     140:	00000402 	andeq	r0, r0, r2, lsl #8
				strncpy(p, message->record, sizeof(message->record));
     144:	0000044a 	andeq	r0, r0, sl, asr #8
     148:	e8540001 	ldmda	r4, {r0}^
				strncpy(p, message->record, sizeof(message->record));
     14c:	7c000004 	stcvc	0, cr0, [r0], {4}
				*p = message->record_index;p++;
     150:	01000005 	tsteq	r0, r5
				*p = message->padding;
     154:	00005400 	andeq	r5, r0, r0, lsl #8
				break;
     158:	00000000 	andeq	r0, r0, r0
     15c:	03f40000 	mvnseq	r0, #0
     160:	03f80000 	mvnseq	r0, #0
     164:	00020000 	andeq	r0, r2, r0
     168:	00000074 	andeq	r0, r0, r4, ror r0
		node->nnodes[i] = 0;
     16c:	00000000 	andeq	r0, r0, r0
     170:	03f40000 	mvnseq	r0, #0
     174:	03f80000 	mvnseq	r0, #0
     178:	00020000 	andeq	r0, r2, r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	00000274 	andeq	r0, r0, r4, ror r2
bool init_node(struct Node* node){
     180:	00000000 	andeq	r0, r0, r0
    node->id  = 0;                  // default id value 0
     184:	04700000 	ldrbteq	r0, [r0], #-0
    node->index = 0;                // default entry count 0
     188:	04e80000 	strbteq	r0, [r8], #0
    node->data_base.item_count = 0; // default no items in array
     18c:	00010000 	andeq	r0, r1, r0
	reset_array(node);
     190:	00000051 	andeq	r0, r0, r1, asr r0
    DEBUG_PRINT("Error initializing node...\n");
     194:	00000000 	andeq	r0, r0, r0
     198:	00046a00 	andeq	r6, r4, r0, lsl #20
};
     19c:	0004e800 	andeq	lr, r4, r0, lsl #16
     1a0:	03000800 	movweq	r0, #2048	; 0x800
uint8_t generate_request_num(void){
     1a4:	20000558 	andcs	r0, r0, r8, asr r5
    return (uint8_t) (rand() % 255);
     1a8:	00072306 	andeq	r2, r7, r6, lsl #6
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	6a000000 	bvs	1b8 <clear_node_neighbour_array+0x2>
}
     1b4:	e8000004 	stmda	r0, {r2}
            node->nnodes[i] = 0; // set to null byte
     1b8:	08000004 	stmdaeq	r0, {r2}
     1bc:	05580300 	ldrbeq	r0, [r8, #-768]	; 0xfffffd00
     1c0:	23062000 	movwcs	r2, #24576	; 0x6000
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	00000005 	andeq	r0, r0, r5
};
     1c8:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	00044400 	andeq	r4, r4, r0, lsl #8
     1d0:	00045000 	andeq	r5, r4, r0
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	53000100 	movwpl	r0, #256	; 0x100
     1d8:	00000450 	andeq	r0, r0, r0, asr r4
     1dc:	0000045e 	andeq	r0, r0, lr, asr r4
        node->data_base.item_count -= 1;
     1e0:	58030008 	stmdapl	r3, {r3}
};
     1e4:	06200005 	strteq	r0, [r0], -r5
fsm receiver(struct Node* node_db) {
     1e8:	00000823 	andeq	r0, r0, r3, lsr #16
     1ec:	00000000 	andeq	r0, r0, r0
     1f0:	04440000 	strbeq	r0, [r4], #-0
     1f4:	044a0000 	strbeq	r0, [sl], #-0
     1f8:	00010000 	andeq	r0, r1, r0
     1fc:	00000054 	andeq	r0, r0, r4, asr r0
     200:	00000000 	andeq	r0, r0, r0
     204:	0000c800 	andeq	ip, r0, r0, lsl #16
     208:	0000d900 	andeq	sp, r0, r0, lsl #18
     20c:	50000100 	andpl	r0, r0, r0, lsl #2
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	000000da 	ldrdeq	r0, [r0], -sl
     214:	000000eb 	andeq	r0, r0, fp, ror #1
     218:	00500001 	subseq	r0, r0, r1
     21c:	00000000 	andeq	r0, r0, r0
		payload = (struct ResponseMessage*)(incoming_packet+1);
     220:	dc000000 	stcle	0, cr0, [r0], {-0}
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	e0000000 	and	r0, r0, r0
     228:	05000000 	streq	r0, [r0, #-0]
     22c:	06007300 	streq	r7, [r0], -r0, lsl #6
     230:	00000823 	andeq	r0, r0, r3, lsr #16
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	00000000 	andeq	r0, r0, r0
     238:	01400000 	mrseq	r0, (UNDEF: 64)
     23c:	01420000 	mrseq	r0, (UNDEF: 66)
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	00010000 	andeq	r0, r1, r0
     244:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	00000000 	andeq	r0, r0, r0
     24c:	00057c00 	andeq	r7, r5, r0, lsl #24
     250:	00059c00 	andeq	r9, r5, r0, lsl #24
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	50000100 	andpl	r0, r0, r0, lsl #2
     258:	0000059e 	muleq	r0, lr, r5
		switch (tpe){
     25c:	000005a0 	andeq	r0, r0, r0, lsr #11
     260:	00500001 	subseq	r0, r0, r1
     264:	00000000 	andeq	r0, r0, r0
     268:	8a000000 	bhi	270 <receiver+0x88>
     26c:	8c000005 	stchi	0, cr0, [r0], {5}
     270:	01000005 	tsteq	r0, r5
     274:	05945300 	ldreq	r5, [r4, #768]	; 0x300
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	059c0000 	ldreq	r0, [ip]
     27c:	00010000 	andeq	r0, r1, r0
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	00000053 	andeq	r0, r0, r3, asr r0
     284:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	0001cc00 	andeq	ip, r1, r0, lsl #24
     28c:	0001e600 	andeq	lr, r1, r0, lsl #12
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     29c:	000001cc 	andeq	r0, r0, ip, asr #3
				if (discovery_request_message->gid == node_db->gid){
     2a0:	000001d8 	ldrdeq	r0, [r0], -r8
     2a4:	00510001 	subseq	r0, r1, r1
					response_message_0->gid = discovery_request_message->gid;
     2a8:	00000000 	andeq	r0, r0, r0
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	b6000000 	strlt	r0, [r0], -r0
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	c0000001 	andgt	r0, r0, r1
					response_message_0->sender_id = node_db->id;
     2b4:	01000001 	tsteq	r0, r1
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	00005000 	andeq	r5, r0, r0
					call sender(response_message_0, done_case);
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	016c0000 	cmneq	ip, r0
     2c4:	01760000 	cmneq	r6, r0
     2c8:	00010000 	andeq	r0, r1, r0
     2cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	00000180 	andeq	r0, r0, r0, lsl #3
     2ec:	00000193 	muleq	r0, r3, r1
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	00500001 	subseq	r0, r0, r1
	...
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     300:	01000000 	mrseq	r0, (UNDEF: 0)
     304:	00005000 	andeq	r5, r0, r0
	...
     314:	00010000 	andeq	r0, r1, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	00000050 	andeq	r0, r0, r0, asr r0
	...
		tcv_endp(incoming_packet);
     328:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		proceed receiving;
     33c:	00510001 	subseq	r0, r1, r1
	...
		proceed receiving;
     34c:	01000000 	mrseq	r0, (UNDEF: 0)
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     350:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		proceed receiving;
     360:	00010000 	andeq	r0, r1, r0
     364:	00000050 	andeq	r0, r0, r0, asr r0
	...
		proceed receiving;
     374:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		proceed receiving;
     388:	00520001 	subseq	r0, r2, r1
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     398:	01000000 	mrseq	r0, (UNDEF: 0)
		proceed receiving;
     39c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		proceed receiving;
     3ac:	00010000 	andeq	r0, r1, r0
}
     3b0:	00000050 	andeq	r0, r0, r0, asr r0
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	00136400 	andseq	r6, r3, r0, lsl #8
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	00136400 	andseq	r6, r3, r0, lsl #8
     3c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	000011f0 	strdeq	r1, [r0], -r0
     3d0:	000011f6 	strdeq	r1, [r0], -r6
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	26560001 	ldrbcs	r0, [r6], -r1
     3d8:	2a000012 	bcs	428 <receiver+0x240>
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	01000012 	tsteq	r0, r2, lsl r0
     3e0:	00005600 	andeq	r5, r0, r0, lsl #12
     3e4:	00000000 	andeq	r0, r0, r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e8:	10da0000 	sbcsne	r0, sl, r0
     3ec:	10de0000 	sbcsne	r0, lr, r0
     3f0:	00010000 	andeq	r0, r1, r0
		strncpy(response_message->record, rec, 20);
     3f4:	0010f452 	andseq	pc, r0, r2, asr r4	; <UNPREDICTABLE>
     3f8:	00110800 	andseq	r0, r1, r0, lsl #16
     3fc:	52000100 	andpl	r0, r0, #0, 2
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     408:	000010e2 	andeq	r1, r0, r2, ror #1
     40c:	000010e8 	andeq	r1, r0, r8, ror #1
     410:	00530001 	subseq	r0, r3, r1
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	00000000 	andeq	r0, r0, r0
     418:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	a2000010 	andge	r0, r0, #16
     420:	01000010 	tsteq	r0, r0, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     424:	00005300 	andeq	r5, r0, r0, lsl #6
     428:	00000000 	andeq	r0, r0, r0
     42c:	10980000 	addsne	r0, r8, r0
     430:	109e0000 	addsne	r0, lr, r0
     434:	00010000 	andeq	r0, r1, r0
     438:	00000053 	andeq	r0, r0, r3, asr r0
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43c:	00000000 	andeq	r0, r0, r0
     440:	00112e00 	andseq	r2, r1, r0, lsl #28
    return node->data_base.item_array[index];
     444:	00113800 	andseq	r3, r1, r0, lsl #16
     448:	53000100 	movwpl	r0, #256	; 0x100
	...
     454:	00001120 	andeq	r1, r0, r0, lsr #2
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	0000114a 	andeq	r1, r0, sl, asr #2
    return node->data_base.item_array[index];
     45c:	00520001 	subseq	r0, r2, r1
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	00000000 	andeq	r0, r0, r0
     464:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     468:	78000011 	stmdavc	r0, {r0, r4}
		strncpy(response_message->record, rec, 20);
     46c:	01000011 	tsteq	r0, r1, lsl r0
     470:	00005300 	andeq	r5, r0, r0, lsl #6
     474:	00000000 	andeq	r0, r0, r0
     478:	11600000 	cmnne	r0, r0
     47c:	11960000 	orrsne	r0, r6, r0
     480:	00010000 	andeq	r0, r1, r0
     484:	00000050 	andeq	r0, r0, r0, asr r0
     488:	00000000 	andeq	r0, r0, r0
     48c:	00100600 	andseq	r0, r0, r0, lsl #12
     490:	00101000 	andseq	r1, r0, r0
     494:	53000100 	movwpl	r0, #256	; 0x100
	...
     4a0:	00000ff8 	strdeq	r0, [r0], -r8
     4a4:	00001022 	andeq	r1, r0, r2, lsr #32
     4a8:	00520001 	subseq	r0, r2, r1
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     4b4:	62000010 	andvs	r0, r0, #16
     4b8:	01000010 	tsteq	r0, r0, lsl r0
     4bc:	00005300 	andeq	r5, r0, r0, lsl #6
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	104a0000 	subne	r0, sl, r0
     4c8:	10720000 	rsbsne	r0, r2, r0
     4cc:	00010000 	andeq	r0, r1, r0
     4d0:	00000052 	andeq	r0, r0, r2, asr r0
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	000b2c00 	andeq	r2, fp, r0, lsl #24
     4dc:	000b3000 	andeq	r3, fp, r0
     4e0:	50000100 	andpl	r0, r0, r0, lsl #2
     4e4:	00000b30 	andeq	r0, r0, r0, lsr fp
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	00000b33 	andeq	r0, r0, r3, lsr fp
     4ec:	00510001 	subseq	r0, r1, r1
     4f0:	00000000 	andeq	r0, r0, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     4f8:	ba00000e 	blt	538 <receiver+0x350>
     4fc:	0100000e 	tsteq	r0, lr
     500:	00005000 	andeq	r5, r0, r0
				if(!response_flag){
     504:	00000000 	andeq	r0, r0, r0
     508:	0eb80000 	cdpeq	0, 11, cr0, cr8, cr0, {0}
					response_flag=1;
     50c:	0ece0000 	cdpeq	0, 12, cr0, cr14, cr0, {0}
					trigger(&response_flag);
     510:	00010000 	andeq	r0, r1, r0
				switch(response_message_5->status){
     514:	000ece51 	andeq	ip, lr, r1, asr lr
     518:	000ed200 	andeq	sp, lr, r0, lsl #4
     51c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     520:	00000ed8 	ldrdeq	r0, [r0], -r8
     524:	00000eee 	andeq	r0, r0, lr, ror #29
						if (response_checker[0] == response_message_5->request_number){
     528:	ee550001 	cdp	0, 5, cr0, cr5, cr1, {0}
     52c:	fc00000e 	stc2	0, cr0, [r0], {14}
     530:	0100000e 	tsteq	r0, lr
							switch(response_checker[1]){
     534:	0efc5100 	cdpeq	1, 15, cr5, cr12, cr0, {0}
     538:	0f2a0000 	svceq	0x002a0000
     53c:	00010000 	andeq	r0, r1, r0
     540:	000f3055 	andeq	r3, pc, r5, asr r0	; <UNPREDICTABLE>
						proceed response_2;
     544:	000f5800 	andeq	r5, pc, r0, lsl #16
						break;
     548:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
									proceed response_1_delete;
     54c:	00000f58 	andeq	r0, r0, r8, asr pc
									proceed response_1_retrieve;
     550:	00000f66 	andeq	r0, r0, r6, ror #30
						proceed response_2;
     554:	66510001 	ldrbvs	r0, [r1], -r1
						proceed response_3;
     558:	7000000f 	andvc	r0, r0, pc
						proceed response_4;
     55c:	0100000f 	tsteq	r0, pc
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	0f705500 	svceq	0x00705500
				break;
     564:	0f7b0000 	svceq	0x007b0000
}
     568:	00010000 	andeq	r0, r1, r0
     56c:	000f7b51 	andeq	r7, pc, r1, asr fp	; <UNPREDICTABLE>
     570:	000f7e00 	andeq	r7, pc, r0, lsl #28
     574:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     578:	00000f7e 	andeq	r0, r0, lr, ror pc
bool delete_all(struct Node *node){
     57c:	00000f84 	andeq	r0, r0, r4, lsl #31
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	84510001 	ldrbhi	r0, [r1], #-1
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	9600000f 	strls	r0, [r0], -pc
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	0100000f 	tsteq	r0, pc
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	0f965500 	svceq	0x00965500
            node->data_base.item_array[i].timestamp = 0;
     590:	0fa80000 	svceq	0x00a80000
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	00010000 	andeq	r0, r1, r0
    node->data_base.item_count = 0;
     598:	000fa851 	andeq	sl, pc, r1, asr r8	; <UNPREDICTABLE>
}
     59c:	000fc800 	andeq	ip, pc, r0, lsl #16
        return true;
     5a0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
fsm root {
     5ac:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     5b0:	00000ece 	andeq	r0, r0, lr, asr #29
     5b4:	ce520001 	cdpgt	0, 5, cr0, cr2, cr1, {0}
     5b8:	d400000e 	strle	r0, [r0], #-14
     5bc:	0100000e 	tsteq	r0, lr
     5c0:	0ed85600 	cdpeq	6, 13, cr5, cr8, cr0, {0}
     5c4:	0ee80000 	cdpeq	0, 14, cr0, cr8, cr0, {0}
     5c8:	00010000 	andeq	r0, r1, r0
     5cc:	000eee56 	andeq	lr, lr, r6, asr lr
     5d0:	000efc00 	andeq	pc, lr, r0, lsl #24
     5d4:	52000100 	andpl	r0, r0, #0, 2
     5d8:	00000efc 	strdeq	r0, [r0], -ip
     5dc:	00000f2c 	andeq	r0, r0, ip, lsr #30
     5e0:	30560001 	subscc	r0, r6, r1
     5e4:	5800000f 	stmdapl	r0, {r0, r1, r2, r3}
     5e8:	0100000f 	tsteq	r0, pc
     5ec:	0f585600 	svceq	0x00585600
     5f0:	0f660000 	svceq	0x00660000
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f4:	00010000 	andeq	r0, r1, r0
     5f8:	000f6652 	andeq	r6, pc, r2, asr r6	; <UNPREDICTABLE>
     5fc:	000f7000 	andeq	r7, pc, r0
		init_node(node_db);
     600:	56000100 	strpl	r0, [r0], -r0, lsl #2
		phys_cc1350(0, MAX_PKT_LEN);
     604:	00000f70 	andeq	r0, r0, r0, ror pc
     608:	00000f7b 	andeq	r0, r0, fp, ror pc
		tcv_plug (0, &plug_null);
     60c:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
     610:	8900000f 	stmdbhi	r0, {r0, r1, r2, r3}
		sfd = tcv_open (WNONE, 0, 0);
     614:	0100000f 	tsteq	r0, pc
     618:	0f895200 	svceq	0x00895200
     61c:	0f960000 	svceq	0x00960000
     620:	00010000 	andeq	r0, r1, r0
     624:	000f9654 	andeq	r9, pc, r4, asr r6	; <UNPREDICTABLE>
			diag("Cannot open tcv interface");
     628:	000fc800 	andeq	ip, pc, r0, lsl #16
     62c:	52000100 	andpl	r0, r0, #0, 2
	...
		tcv_control(sfd, PHYSOPT_ON, NULL);
     638:	00000e2c 	andeq	r0, r0, ip, lsr #28
		runfsm receiver(node_db);
     63c:	00000e3a 	andeq	r0, r0, sl, lsr lr
     640:	00500001 	subseq	r0, r0, r1
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	00000000 	andeq	r0, r0, r0
     648:	2c000000 	stccs	0, cr0, [r0], {-0}
     64c:	3b00000e 	blcc	68c <root+0xe8>
     650:	0100000e 	tsteq	r0, lr
     654:	00005100 	andeq	r5, r0, r0, lsl #2
     658:	00000000 	andeq	r0, r0, r0
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	0ddc0000 	ldcleq	0, cr0, [ip]
     660:	0df30000 	ldcleq	0, cr0, [r3]
     664:	00010000 	andeq	r0, r1, r0
		switch(CHOICE) {
     668:	000e1650 	andeq	r1, lr, r0, asr r6
     66c:	000e2c00 	andeq	r2, lr, r0, lsl #24
     670:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     67c:	00000cd2 	ldrdeq	r0, [r0], -r2
     680:	00000ce2 	andeq	r0, r0, r2, ror #25
     684:	e2520001 	subs	r0, r2, #1
     688:	ea00000c 	b	6c0 <root+0x11c>
     68c:	0500000c 	streq	r0, [r0, #-12]
     690:	20040c00 	andcs	r0, r4, r0, lsl #24
     694:	0d844009 	stceq	0, cr4, [r4, #36]	; 0x24
				proceed menu;
     698:	0d880000 	stceq	0, cr0, [r8]
     69c:	00050000 	andeq	r0, r5, r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     6a4:	000d8840 	andeq	r8, sp, r0, asr #16
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	000d8a00 	andeq	r8, sp, r0, lsl #20
     6ac:	52000100 	andpl	r0, r0, #0, 2
     6b0:	00000d8a 	andeq	r0, r0, sl, lsl #27
		DEBUG_PRINT("setting node group ID");
     6b4:	00000d8c 	andeq	r0, r0, ip, lsl #27
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	040c0005 	streq	r0, [ip], #-5
    node->gid = gid; 
     6bc:	00400920 	subeq	r0, r0, r0, lsr #18
		proceed menu;
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	ec000000 	stc	0, cr0, [r0], {-0}
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	f600000c 			; <UNDEFINED> instruction: 0xf600000c
     6cc:	0100000c 	tsteq	r0, ip
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	0cfa5200 	lfmeq	f5, 2, [sl]
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	0d040000 	stceq	0, cr0, [r4, #-0]
     6d8:	00010000 	andeq	r0, r1, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	000d0852 	andeq	r0, sp, r2, asr r8
     6e0:	000d1200 	andeq	r1, sp, r0, lsl #4
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	52000100 	andpl	r0, r0, #0, 2
     6e8:	00000d16 	andeq	r0, r0, r6, lsl sp
     6ec:	00000d22 	andeq	r0, r0, r2, lsr #26
			strncpy(reason, "Out of Range", 50);
     6f0:	ae520001 	cdpge	0, 5, cr0, cr2, cr1, {0}
     6f4:	b200000d 	andlt	r0, r0, #13
			proceed invalid_node_id;
     6f8:	0100000d 	tsteq	r0, sp
     6fc:	00005200 	andeq	r5, r0, r0, lsl #4
				strncpy(reason, "ID is already in use", 50);
     700:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
     704:	0c720000 	ldcleq	0, cr0, [r2], #-0
     708:	0c840000 	stceq	0, cr0, [r4], {0}
     70c:	00010000 	andeq	r0, r1, r0
		proceed menu;
     710:	00000054 	andeq	r0, r0, r4, asr r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	00000000 	andeq	r0, r0, r0
     718:	000c0c00 	andeq	r0, ip, r0, lsl #24
     71c:	000c1400 	andeq	r1, ip, r0, lsl #8
     720:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (!clear_node_neighbour_array(node_db)){
     72c:	00000c0c 	andeq	r0, r0, ip, lsl #24
     730:	00000c12 	andeq	r0, r0, r2, lsl ip
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	12510001 	subsne	r0, r1, #1
     738:	1700000c 	strne	r0, [r0, -ip]
     73c:	0100000c 	tsteq	r0, ip
			proceed error;
     740:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		request_packet->gid = node_db->gid;
     750:	00010000 	andeq	r0, r1, r0
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	00000050 	andeq	r0, r0, r0, asr r0
	...
		call sender(request_packet, wait_discovery);
     764:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     770:	00510001 	subseq	r0, r1, r1
	...
				proceed clear_neighbour_array;
     780:	01000000 	mrseq	r0, (UNDEF: 0)
				proceed create_proto_start;
     784:	00005200 	andeq	r5, r0, r0, lsl #4
				proceed start_delete_proto;
     788:	00000000 	andeq	r0, r0, r0
				proceed retrieve_proto;
     78c:	00010000 	andeq	r0, r1, r0
				proceed display_db;
     790:	00000054 	andeq	r0, r0, r4, asr r0
				proceed del_local;
     794:	00000000 	andeq	r0, r0, r0
			if(node_db->id == node_db->nnodes[i]){
     798:	000bcc00 	andeq	ip, fp, r0, lsl #24
     79c:	000bd700 	andeq	sp, fp, r0, lsl #14
     7a0:	50000100 	andpl	r0, r0, r0, lsl #2
				strncpy(reason, "ID is already in use", 50);
     7a4:	00000bd7 	ldrdeq	r0, [r0], -r7
     7a8:	00000c00 	andeq	r0, r0, r0, lsl #24
				proceed invalid_node_id;
     7ac:	00540001 	subseq	r0, r4, r1
     7b0:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
     7b4:	90000000 	andls	r0, r0, r0
		if (discovery_wait_flag == 0){
     7b8:	a800000b 	stmdage	r0, {r0, r1, r3}
			discovery_wait_flag=1;
     7bc:	0100000b 	tsteq	r0, fp
     7c0:	0ba85000 	bleq	fea147c8 <_estack+0xdea0f7c8>
			delay(3000, find_proto_start);
     7c4:	0bc00000 	bleq	ff0007cc <_estack+0xdeffb7cc>
     7c8:	00010000 	andeq	r0, r1, r0
		if (discovery_wait_flag == 1){
     7cc:	00000054 	andeq	r0, r0, r4, asr r0
			discovery_wait_flag=0;
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	000b6400 	andeq	r6, fp, r0, lsl #8
			delay(3000, display_neighbour_nodes);
     7d8:	000b6a00 	andeq	r6, fp, r0, lsl #20
     7dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7f0:	00500001 	subseq	r0, r0, r1
     7f4:	00000000 	andeq	r0, r0, r0
     7f8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     7fc:	6600001c 			; <UNDEFINED> instruction: 0x6600001c
     800:	0200001c 	andeq	r0, r0, #28
     804:	66709100 	ldrbtvs	r9, [r0], -r0, lsl #2
     808:	8e00001c 	mcrhi	0, 0, r0, cr0, cr12, {0}
     80c:	0100001c 	tsteq	r0, ip, lsl r0
     810:	1c925400 	cfldrsne	mvf5, [r2], {0}
     814:	1c9a0000 	ldcne	0, cr0, [sl], {0}
     818:	00010000 	andeq	r0, r1, r0
     81c:	001ca854 	andseq	sl, ip, r4, asr r8
     820:	001cf200 	andseq	pc, ip, r0, lsl #4
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	56000100 	strpl	r0, [r0], -r0, lsl #2
     828:	00001cf6 	strdeq	r1, [r0], -r6
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	00001d6e 	andeq	r1, r0, lr, ror #26
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	00560001 	subseq	r0, r6, r1
			if (node_db->nnodes[i] == 0) break;
     834:	00000000 	andeq	r0, r0, r0
     838:	b2000000 	andlt	r0, r0, #0
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	f000001c 			; <UNDEFINED> instruction: 0xf000001c
     840:	0100001c 	tsteq	r0, ip, lsl r0
     844:	1cf65100 	ldfnee	f5, [r6]
     848:	1d080000 	stcne	0, cr0, [r8, #-0]
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	00010000 	andeq	r0, r1, r0
		ser_out(display_neighbour_nodes, "\r\n");
     850:	001d1451 	andseq	r1, sp, r1, asr r4
     854:	001d1e00 	andseq	r1, sp, r0, lsl #28
		proceed menu;
     858:	51000100 	mrspl	r0, (UNDEF: 16)
     85c:	00001d30 	andeq	r1, r0, r0, lsr sp
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	00001d34 	andeq	r1, r0, r4, lsr sp
     864:	54510001 	ldrbpl	r0, [r1], #-1
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	5800001d 	stmdapl	r0, {r0, r2, r3, r4}
     86c:	0100001d 	tsteq	r0, sp, lsl r0
     870:	00005100 	andeq	r5, r0, r0, lsl #2
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	00000000 	andeq	r0, r0, r0
     878:	1cb20000 	ldcne	0, cr0, [r2]
			strncpy(reason, "Error: improper ID", 50);
     87c:	1cf00000 	ldclne	0, cr0, [r0]
     880:	00010000 	andeq	r0, r1, r0
			proceed error;
     884:	001cf655 	andseq	pc, ip, r5, asr r6	; <UNPREDICTABLE>
     888:	001d1e00 	andseq	r1, sp, r0, lsl #28
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     890:	00001d30 	andeq	r1, r0, r0, lsr sp
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	00001d34 	andeq	r1, r0, r4, lsr sp
     898:	54550001 	ldrbpl	r0, [r5], #-1
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	6e00001d 	mcrvs	0, 0, r0, cr0, cr13, {0}
     8a0:	0100001d 	tsteq	r0, sp, lsl r0
     8a4:	00005500 	andeq	r5, r0, r0, lsl #10
		create_message->gid = node_db->gid;
     8a8:	00000000 	andeq	r0, r0, r0
		create_message->tpe = 2;
     8ac:	1d240000 	stcne	0, cr0, [r4, #-0]
		create_message->request_number = generate_request_num();
     8b0:	1d300000 	ldcne	0, cr0, [r0, #-0]
     8b4:	00010000 	andeq	r0, r1, r0
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	001d3455 	andseq	r3, sp, r5, asr r4
     8bc:	001d4e00 	andseq	r4, sp, r0, lsl #28
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	00001d52 	andeq	r1, r0, r2, asr sp
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	00001d54 	andeq	r1, r0, r4, asr sp
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	00550001 	subseq	r0, r5, r1
		response_checker[0] = create_message->request_number;
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
		call sender(create_message, wait);
     8d8:	f000001c 			; <UNDEFINED> instruction: 0xf000001c
     8dc:	0100001c 	tsteq	r0, ip, lsl r0
     8e0:	00005400 	andeq	r5, r0, r0, lsl #8
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	1d300000 	ldcne	0, cr0, [r0, #-0]
     8f0:	00010000 	andeq	r0, r1, r0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	001d3454 	andseq	r3, sp, r4, asr r4
     8f8:	001d4800 	andseq	r4, sp, r0, lsl #16
     8fc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	00001d48 	andeq	r1, r0, r8, asr #26
     904:	00001d54 	andeq	r1, r0, r4, asr sp
			strncpy(reason, "Error: improper node ID", 50);
     908:	00530001 	subseq	r0, r3, r1
     90c:	00000000 	andeq	r0, r0, r0
     910:	60000000 	andvs	r0, r0, r0
			proceed error;
     914:	6e00001d 	mcrvs	0, 0, r0, cr0, cr13, {0}
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	0100001d 	tsteq	r0, sp, lsl r0
     91c:	00005100 	andeq	r5, r0, r0, lsl #2
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	00000000 	andeq	r0, r0, r0
     924:	172c0000 	strne	r0, [ip, -r0]!
     928:	17380000 	ldrne	r0, [r8, -r0]!
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	00010000 	andeq	r0, r1, r0
     930:	00000050 	andeq	r0, r0, r0, asr r0
	...
			proceed error;
     940:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	00500001 	subseq	r0, r0, r1
	...
		delete_record->request_number = generate_request_num();
     95c:	01000000 	mrseq	r0, (UNDEF: 0)
		delete_record->sender_id = node_db->id;
     960:	00005100 	andeq	r5, r0, r0, lsl #2
     964:	00000000 	andeq	r0, r0, r0
     968:	00010000 	andeq	r0, r1, r0
		call sender(&delete_record, wait);
     96c:	00000051 	andeq	r0, r0, r1, asr r0
	...
		response_checker[1] = delete_record->tpe;
     97c:	52000100 	andpl	r0, r0, #0, 2
	...
		call sender(&delete_record, wait);
     988:	00520001 	subseq	r0, r2, r1
	...
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     998:	01000000 	mrseq	r0, (UNDEF: 0)
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	00005300 	andeq	r5, r0, r0, lsl #6
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	00010000 	andeq	r0, r1, r0
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	00000053 	andeq	r0, r0, r3, asr r0
     9ac:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	53000100 	movwpl	r0, #256	; 0x100
	...
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c4:	00500001 	subseq	r0, r0, r1
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	30000000 	andcc	r0, r0, r0
     9d0:	3800001c 	stmdacc	r0, {r2, r3, r4}
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	0100001c 	tsteq	r0, ip, lsl r0
			strncpy(reason, "Error: invalid index", 50);
     9d8:	00005000 	andeq	r5, r0, r0
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	1b540000 	blne	15009e8 <__ccfg+0x14e0a40>
			proceed error;
     9e4:	1b5a0000 	blne	16809ec <__ccfg+0x1660a44>
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	00010000 	andeq	r0, r1, r0
     9ec:	00000050 	andeq	r0, r0, r0, asr r0
		retrieve_record->gid = node_db->gid;
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	001b6a00 	andseq	r6, fp, r0, lsl #20
     9f8:	001b9600 	andseq	r9, fp, r0, lsl #12
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		retrieve_record->request_number = generate_request_num();
     a00:	00001b96 	muleq	r0, r6, fp
     a04:	00001b9c 	muleq	r0, ip, fp
		retrieve_record->sender_id = node_db->id;
     a08:	9c520001 	mrrcls	0, 0, r0, r2, cr1
		response_checker[0] = retrieve_record->request_number;
     a0c:	e400001b 	str	r0, [r0], #-27	; 0xffffffe5
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	0100001b 	tsteq	r0, fp, lsl r0
     a14:	1be45400 	blne	ff915a1c <_estack+0xdf910a1c>
		retrieve_record->record_index = user_provided_index;
     a18:	1bfc0000 	blne	fff00a20 <_estack+0xdfefba20>
     a1c:	00010000 	andeq	r0, r1, r0
		response_checker[0] = retrieve_record->request_number;
     a20:	00000050 	andeq	r0, r0, r0, asr r0
		call sender(&retrieve_record, wait);
     a24:	00000000 	andeq	r0, r0, r0
     a28:	001b9600 	andseq	r9, fp, r0, lsl #12
     a2c:	001b9a00 	andseq	r9, fp, r0, lsl #20
     a30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     a34:	00001b9a 	muleq	r0, sl, fp
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	00001b9c 	muleq	r0, ip, fp
     a3c:	b2530001 	subslt	r0, r3, #1
		if(node_db->data_base.item_count != 0){
     a40:	bb00001b 	bllt	ab4 <root+0x510>
     a44:	0100001b 	tsteq	r0, fp, lsl r0
     a48:	00005000 	andeq	r5, r0, r0
		ser_out(loop_through_data, "\r\n");
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	1ba40000 	blne	fe900a58 <_estack+0xde8fba58>
		proceed menu;
     a54:	1bb40000 	blne	fed00a5c <_estack+0xdecfba5c>
		delete_all(node_db);
     a58:	00010000 	andeq	r0, r1, r0
     a5c:	00000053 	andeq	r0, r0, r3, asr r0
		proceed menu;
     a60:	00000000 	andeq	r0, r0, r0
     a64:	001b6a00 	andseq	r6, fp, r0, lsl #20
		delay(3000, timeout);
     a68:	001b8800 	andseq	r8, fp, r0, lsl #16
     a6c:	50000100 	andpl	r0, r0, r0, lsl #2
		when(&response_flag, menu);
     a70:	00001b8e 	andeq	r1, r0, lr, lsl #23
     a74:	00001bae 	andeq	r1, r0, lr, lsr #23
		release;
     a78:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	b800001b 	stmdalt	r0, {r0, r1, r3, r4}
     a80:	0200001b 	andeq	r0, r0, #27
     a84:	007c7400 	rsbseq	r7, ip, r0, lsl #8
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	ac000000 	stcge	0, cr0, [r0], {-0}
     a90:	da000016 	ble	af0 <root+0x54c>
     a94:	01000016 	tsteq	r0, r6, lsl r0
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	16e85000 	strbtne	r5, [r8], r0
     a9c:	172c0000 	strne	r0, [ip, -r0]!
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	00000050 	andeq	r0, r0, r0, asr r0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa8:	00000000 	andeq	r0, r0, r0
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	0016b400 	andseq	fp, r6, r0, lsl #8
     ab0:	0016c000 	andseq	ip, r6, r0
		proceed menu;
     ab4:	53000100 	movwpl	r0, #256	; 0x100
     ab8:	000016c0 	andeq	r1, r0, r0, asr #13
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	000016c2 	andeq	r1, r0, r2, asr #13
     ac0:	00700002 	rsbseq	r0, r0, r2
		proceed menu;
     ac4:	000016c6 	andeq	r1, r0, r6, asr #13
     ac8:	0000171e 	andeq	r1, r0, lr, lsl r7
}
     acc:	1e530001 	cdpne	0, 5, cr0, cr3, cr1, {0}
     ad0:	22000017 	andcs	r0, r0, #23
     ad4:	02000017 	andeq	r0, r0, #23
     ad8:	22007300 	andcs	r7, r0, #0, 6
     adc:	2c000017 	stccs	0, cr0, [r0], {23}
     ae0:	01000017 	tsteq	r0, r7, lsl r0
     ae4:	00005300 	andeq	r5, r0, r0, lsl #6
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	16b40000 	ldrtne	r0, [r4], r0
     af0:	16b60000 	ldrtne	r0, [r6], r0
     af4:	00010000 	andeq	r0, r1, r0
     af8:	0016c652 	andseq	ip, r6, r2, asr r6
     afc:	00170600 	andseq	r0, r7, r0, lsl #12
     b00:	52000100 	andpl	r0, r0, #0, 2
     b04:	0000171e 	andeq	r1, r0, lr, lsl r7
     b08:	00001722 	andeq	r1, r0, r2, lsr #14
     b0c:	22530001 	subscs	r0, r3, #1
     b10:	2c000017 	stccs	0, cr0, [r0], {23}
     b14:	01000017 	tsteq	r0, r7, lsl r0
     b18:	00005200 	andeq	r5, r0, r0, lsl #4
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	1a7c0000 	bne	1f00b28 <__ccfg+0x1ee0b80>
     b24:	1a840000 	bne	fe100b2c <_estack+0xde0fbb2c>
     b28:	00010000 	andeq	r0, r1, r0
static void devinit_uart (int devnum) {
     b2c:	001a8851 	andseq	r8, sl, r1, asr r8
	adddevfunc (ioreq_uart_a, devnum);
     b30:	001a8a00 	andseq	r8, sl, r0, lsl #20
     b34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (n) {
     b40:	000019d0 	ldrdeq	r1, [r0], -r0
     b44:	000019ec 	andeq	r1, r0, ip, ror #19
}
     b48:	f2500001 	vhadd.s16	d16, d0, d1
	while (n--);
     b4c:	fe000019 	mcr2	0, 0, r0, cr0, cr9, {0}
     b50:	01000019 	tsteq	r0, r9, lsl r0
     b54:	00005000 	andeq	r5, r0, r0
		n--;
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	19d00000 	ldmibne	r0, {}^	; <UNPREDICTABLE>
     b60:	19ee0000 	stmibne	lr!, {}^	; <UNPREDICTABLE>
void mdelay (volatile word n) {
     b64:	00010000 	andeq	r0, r1, r0
     b68:	0019f251 	andseq	pc, r9, r1, asr r2	; <UNPREDICTABLE>
	while (n) {
     b6c:	0019fc00 	andseq	pc, r9, r0, lsl #24
     b70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		udelay (999);
     b7c:	000019d0 	ldrdeq	r1, [r0], -r0
		n--;
     b80:	000019f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
     b84:	f2520001 	vhadd.s16	d16, d2, d1
     b88:	fa000019 	blx	bf4 <__pi_offdomain+0x28>
     b8c:	01000019 	tsteq	r0, r9, lsl r0
void __pi_ondomain (lword d) {
     b90:	00005200 	andeq	r5, r0, r0, lsl #4
     b94:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
     b98:	19d00000 	ldmibne	r0, {}^	; <UNPREDICTABLE>
     b9c:	19e80000 	stmibne	r8!, {}^	; <UNPREDICTABLE>
			__pi_systat.effpdm = 1;
     ba0:	00010000 	andeq	r0, r1, r0
	PRCMPowerDomainOn (d);
     ba4:	0019e853 	andseq	lr, r9, r3, asr r8
     ba8:	001a6c00 	andseq	r6, sl, r0, lsl #24
     bac:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb8:	000019d0 	ldrdeq	r1, [r0], -r0
	__pi_systat.ondmns |= d;
     bbc:	00001a50 	andeq	r1, r0, r0, asr sl
     bc0:	00910002 	addseq	r0, r1, r2
}
     bc4:	00001a50 	andeq	r1, r0, r0, asr sl
     bc8:	00001a6c 	andeq	r1, r0, ip, ror #20
void __pi_offdomain (lword d) {
     bcc:	00910002 	addseq	r0, r1, r2
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	00001a00 	andeq	r1, r0, r0, lsl #20
     bdc:	00001a16 	andeq	r1, r0, r6, lsl sl
     be0:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	3000001a 	andcc	r0, r0, sl, lsl r0
     be8:	0100001a 	tsteq	r0, sl, lsl r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	1a405000 	bne	1014bf4 <__ccfg+0xff4c4c>
     bf0:	1a480000 	bne	1200bf8 <__ccfg+0x11e0c50>
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf4:	00010000 	andeq	r0, r1, r0
     bf8:	001a5050 	andseq	r5, sl, r0, asr r0
	__pi_systat.ondmns &= ~d;
     bfc:	001a5800 	andseq	r5, sl, r0, lsl #16
     c00:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void __pi_syserror (word ec, const char *m) {
     c0c:	000019ac 	andeq	r1, r0, ip, lsr #19
	diag ("SYSERR: %x, %s", ec, m);
     c10:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
     c14:	b8500001 	ldmdalt	r0, {r0}^
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	c0000019 	andgt	r0, r0, r9, lsl r0
     c1c:	01000019 	tsteq	r0, r9, lsl r0
     c20:	19c45000 	stmibne	r4, {ip, lr}^
     c24:	19d00000 	ldmibne	r0, {}^	; <UNPREDICTABLE>
		all_leds_blink;
     c28:	00010000 	andeq	r0, r1, r0
     c2c:	00000050 	andeq	r0, r0, r0, asr r0
     c30:	00000000 	andeq	r0, r0, r0
     c34:	0019ac00 	andseq	sl, r9, r0, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	0019b400 	andseq	fp, r9, r0, lsl #8
     c3c:	51000100 	mrspl	r0, (UNDEF: 16)
     c40:	000019b8 			; <UNDEFINED> instruction: 0x000019b8
     c44:	000019c2 	andeq	r1, r0, r2, asr #19
     c48:	c4510001 	ldrbgt	r0, [r1], #-1
     c4c:	d0000019 	andle	r0, r0, r9, lsl r0
	while (1) {
     c50:	01000019 	tsteq	r0, r9, lsl r0
     c54:	00005100 	andeq	r5, r0, r0, lsl #2
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	199e0000 	ldmibne	lr, {}	; <UNPREDICTABLE>
void tci_run_delay_timer () {
     c60:	19a60000 	stmibne	r6!, {}	; <UNPREDICTABLE>
	setdel = __pi_mintk - __pi_old;
     c64:	00010000 	andeq	r0, r1, r0
     c68:	0019aa50 	andseq	sl, r9, r0, asr sl
     c6c:	0019ac00 	andseq	sl, r9, r0, lsl #24
     c70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c7c:	0000199e 	muleq	r0, lr, r9
     c80:	000019a0 	andeq	r1, r0, r0, lsr #19
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	00520001 	subseq	r0, r2, r1
	sti_tim;
     c88:	00000000 	andeq	r0, r0, r0
}
     c8c:	8a000000 	bhi	c94 <tci_run_delay_timer+0x34>
     c90:	8c000019 	stchi	0, cr0, [r0], {25}
     c94:	01000019 	tsteq	r0, r9, lsl r0
     c98:	00005000 	andeq	r5, r0, r0
     c9c:	00000000 	andeq	r0, r0, r0
	cli_aux;
     ca0:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
     ca4:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	00010000 	andeq	r0, r1, r0
     cac:	00199851 	andseq	r9, r9, r1, asr r8
     cb0:	00199e00 	andseq	r9, r9, r0, lsl #28
     cb4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
     cc0:	0000198a 	andeq	r1, r0, sl, lsl #19
     cc4:	0000198e 	andeq	r1, r0, lr, lsl #19
void AONRTCIntHandler () {
     cc8:	00520001 	subseq	r0, r2, r1
	...
		if (__pi_utims [0] == 0)
     cd8:	01000000 	mrseq	r0, (UNDEF: 0)
     cdc:	00005000 	andeq	r5, r0, r0
	...
		if (__pi_utims [1] == 0)
     cec:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [1])) {
     cf0:	00000051 	andeq	r0, r0, r1, asr r0
	...
		if (*(__pi_utims [2])) {
     d00:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (*(__pi_utims [3])) {
     d0c:	00500001 	subseq	r0, r0, r1
	...
	if (__pi_systat.ledsts) {
     d1c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (__pi_systat.ledblc++ == 0) {
     d20:	00005100 	andeq	r5, r0, r0, lsl #2
     d24:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.ledblk) {
     d28:	196e0000 	stmdbne	lr!, {}^	; <UNPREDICTABLE>
     d2c:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
     d30:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	00198850 	andseq	r8, r9, r0, asr r8
     d38:	00198a00 	andseq	r8, r9, r0, lsl #20
				if (__pi_systat.ledsts & 0x2)
     d3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (__pi_systat.ledsts & 0x4)
     d48:	0000196e 	andeq	r1, r0, lr, ror #18
				__pi_systat.ledblk = 0;
     d4c:	00001970 	andeq	r1, r0, r0, ror r9
     d50:	00510001 	subseq	r0, r1, r1
			if (__pi_systat.fstblk)
     d54:	00000000 	andeq	r0, r0, r0
     d58:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
				__pi_systat.ledblc = 200;
     d5c:	72000019 	andvc	r0, r0, #25
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	01000019 	tsteq	r0, r9, lsl r0
		cli_tim;
     d64:	00005200 	andeq	r5, r0, r0, lsl #4
		__pi_new += setdel;
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	195e0000 	ldmdbne	lr, {}^	; <UNPREDICTABLE>
		setdel = 0;
     d70:	19600000 	stmdbne	r0!, {}^	; <UNPREDICTABLE>
		RISE_N_SHINE;
     d74:	00010000 	andeq	r0, r1, r0
		__pi_new += setdel;
     d78:	00000050 	andeq	r0, r0, r0, asr r0
		RISE_N_SHINE;
     d7c:	00000000 	andeq	r0, r0, r0
     d80:	00195e00 	andseq	r5, r9, r0, lsl #28
		aux_timer_inactive = 1;
     d84:	00196000 	andseq	r6, r9, r0
     d88:	51000100 	mrspl	r0, (UNDEF: 16)
				if (__pi_systat.ledsts & 0x1)
     d8c:	00001964 	andeq	r1, r0, r4, ror #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	0000196e 	andeq	r1, r0, lr, ror #18
     d94:	00510001 	subseq	r0, r1, r1
				if (__pi_systat.ledsts & 0x2)
     d98:	00000000 	andeq	r0, r0, r0
     d9c:	50000000 	andpl	r0, r0, r0
     da0:	54000019 	strpl	r0, [r0], #-25	; 0xffffffe7
				if (__pi_systat.ledsts & 0x8)
     da4:	01000019 	tsteq	r0, r9, lsl r0
				__pi_systat.ledblk = 1;
     da8:	19545000 	ldmdbne	r4, {ip, lr}^
     dac:	195e0000 	ldmdbne	lr, {}^	; <UNPREDICTABLE>
		if (aux_timer_inactive) {
     db0:	00010000 	andeq	r0, r1, r0
			cli_aux;
     db4:	00000053 	andeq	r0, r0, r3, asr r0
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	00195400 	andseq	r5, r9, r0, lsl #8
     dc0:	00195e00 	andseq	r5, r9, r0, lsl #28
     dc4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     dd8:	00500001 	subseq	r0, r0, r1
word tci_update_delay_ticks (Boolean force) {
     ddc:	00000000 	andeq	r0, r0, r0
	cli_tim;
     de0:	01000000 	mrseq	r0, (UNDEF: 0)
     de4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df4:	00010000 	andeq	r0, r1, r0
     df8:	00000052 	andeq	r0, r0, r2, asr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfc:	00000000 	andeq	r0, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	52000100 	andpl	r0, r0, #0, 2
	...
}
     e14:	00500001 	subseq	r0, r0, r1
		sti_tim;
     e18:	00000000 	andeq	r0, r0, r0
		return YES;
     e1c:	2c000000 	stccs	0, cr0, [r0], {-0}
     e20:	34000019 	strcc	r0, [r0], #-25	; 0xffffffe7
     e24:	01000019 	tsteq	r0, r9, lsl r0
     e28:	19365000 	ldmdbne	r6!, {ip, lr}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	193a0000 	ldmdbne	sl!, {}	; <UNPREDICTABLE>
	UARTDisable (UART0_BASE);
     e30:	00010000 	andeq	r0, r1, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	00193a50 	andseq	r3, r9, r0, asr sl
	UARTDisable (UART0_BASE);
     e38:	00195000 	andseq	r5, r9, r0
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e50:	00500001 	subseq	r0, r0, r1
     e54:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	01000000 	mrseq	r0, (UNDEF: 0)
     e5c:	00005000 	andeq	r5, r0, r0
	...
}
     e6c:	00010000 	andeq	r0, r1, r0
     e70:	00000050 	andeq	r0, r0, r0, asr r0
     e74:	00000000 	andeq	r0, r0, r0
     e78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	00500001 	subseq	r0, r0, r1
     e90:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	01000000 	mrseq	r0, (UNDEF: 0)
     e98:	00005700 	andeq	r5, r0, r0, lsl #14
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     ea8:	00010000 	andeq	r0, r1, r0
     eac:	00000056 	andeq	r0, r0, r6, asr r0
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ec8:	00500001 	subseq	r0, r0, r1
     ecc:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     ed0:	01000000 	mrseq	r0, (UNDEF: 0)
     ed4:	00005800 	andeq	r5, r0, r0, lsl #16
			while (len && uart_a_char_available) {
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	00010000 	andeq	r0, r1, r0
     ee0:	00000050 	andeq	r0, r0, r0, asr r0
	...
			uart_a_disable_int;
     ef0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     efc:	00540001 	subseq	r0, r4, r1
	...
				uart_a_enable_int;
     f0c:	01000000 	mrseq	r0, (UNDEF: 0)
     f10:	00005800 	andeq	r5, r0, r0, lsl #16
				goto Redo_rx;
     f14:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	00010000 	andeq	r0, r1, r0
     f1c:	00000058 	andeq	r0, r0, r8, asr r0
			return -2;
     f20:	00000000 	andeq	r0, r0, r0
     f24:	001b0400 	andseq	r0, fp, r0, lsl #8
				uart_a_write (*buf);
     f28:	001b0c00 	andseq	r0, fp, r0, lsl #24
     f2c:	50000100 	andpl	r0, r0, r0, lsl #2
			while (len && uart_a_room_in_tx) {
     f30:	00001b0c 	andeq	r1, r0, ip, lsl #22
     f34:	00001b16 	andeq	r1, r0, r6, lsl fp
     f38:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
			if (len != operation) {
     f3c:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
			uart_a_disable_int;
     f40:	0100001b 	tsteq	r0, fp, lsl r0
     f44:	1b3c5000 	blne	f14f4c <__ccfg+0xef4fa4>
			if (uart_a_room_in_tx) {
     f48:	1b460000 	blne	1180f50 <__ccfg+0x1160fa8>
     f4c:	00010000 	andeq	r0, r1, r0
				uart_a_enable_int;
     f50:	00000050 	andeq	r0, r0, r0, asr r0
     f54:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     f58:	001b1200 	andseq	r1, fp, r0, lsl #4
			if (uart_a_room_in_tx) {
     f5c:	001b4400 	andseq	r4, fp, r0, lsl #8
				uart_a_write (*buf);
     f60:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     f64:	00001b44 	andeq	r1, r0, r4, asr #22
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	00001b46 	andeq	r1, r0, r6, asr #22
     f6c:	46520001 	ldrbmi	r0, [r2], -r1
			uart_a_enable_int;
     f70:	4800001b 	stmdami	r0, {r0, r1, r3, r4}
     f74:	0100001b 	tsteq	r0, fp, lsl r0
     f78:	00005400 	andeq	r5, r0, r0, lsl #8
			return 0;
     f7c:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_SETRATE) {
     f80:	16760000 	ldrbtne	r0, [r6], -r0
				if (__pi_uart_setrate (*((word*)buf),
     f84:	16a80000 	strtne	r0, [r8], r0
     f88:	00010000 	andeq	r0, r1, r0
     f8c:	00000056 	andeq	r0, r0, r6, asr r0
				syserror (EREQPAR, "uar");
     f90:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     f94:	00168c00 	andseq	r8, r6, r0, lsl #24
			if (len == UART_CNTRL_GETRATE) {
     f98:	00169600 	andseq	r9, r6, r0, lsl #12
				return 1;
     f9c:	53000100 	movwpl	r0, #256	; 0x100
	...
			syserror (ENOOPER, "uai");
     fb0:	00500001 	subseq	r0, r0, r1
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	01000000 	mrseq	r0, (UNDEF: 0)
     fbc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
void UART0IntHandler () {
     fcc:	00010000 	andeq	r0, r1, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	00000050 	andeq	r0, r0, r0, asr r0
     fd4:	00000000 	andeq	r0, r0, r0
     fd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	000018f4 	strdeq	r1, [r0], -r4
     fe8:	0000190d 	andeq	r1, r0, sp, lsl #18
		RISE_N_SHINE;
     fec:	00500001 	subseq	r0, r0, r1
     ff0:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, READ));
     ff4:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     ff8:	0a000018 	beq	1060 <UART0IntHandler+0x98>
     ffc:	01000019 	tsteq	r0, r9, lsl r0
    1000:	00005100 	andeq	r5, r0, r0, lsl #2
    1004:	00000000 	andeq	r0, r0, r0
    1008:	18d00000 	ldmne	r0, {}^	; <UNPREDICTABLE>
    100c:	18e40000 	stmiane	r4!, {}^	; <UNPREDICTABLE>
    1010:	00010000 	andeq	r0, r1, r0
    1014:	0018e450 	andseq	lr, r8, r0, asr r4
    1018:	0018e800 	andseq	lr, r8, r0, lsl #16
    101c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1020:	000018ec 	andeq	r1, r0, ip, ror #17
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	000018f4 	strdeq	r1, [r0], -r4
    1028:	00500001 	subseq	r0, r0, r1
    102c:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
    1030:	d0000000 	andle	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	e7000018 	smlad	r0, r8, r0, r0
    1038:	01000018 	tsteq	r0, r8, lsl r0
		RISE_N_SHINE;
    103c:	18ec5100 	stmiane	ip!, {r8, ip, lr}^
    1040:	18f40000 	ldmne	r4!, {}^	; <UNPREDICTABLE>
    1044:	00010000 	andeq	r0, r1, r0
		i_trigger (devevent (UART_A, WRITE));
    1048:	00000051 	andeq	r0, r0, r1, asr r0
    104c:	00000000 	andeq	r0, r0, r0
    1050:	0018d800 	andseq	sp, r8, r0, lsl #16
    1054:	0018e700 	andseq	lr, r8, r0, lsl #14
    1058:	53000100 	movwpl	r0, #256	; 0x100
    105c:	000018ec 	andeq	r1, r0, ip, ror #17
    1060:	000018f4 	strdeq	r1, [r0], -r4
    1064:	00530001 	subseq	r0, r3, r1
	...
}
    1074:	01000000 	mrseq	r0, (UNDEF: 0)
    1078:	00005000 	andeq	r5, r0, r0
	...
void __buttons_setirq (int val) {
    1088:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	00000051 	andeq	r0, r0, r1, asr r0
    1090:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    10a8:	00520001 	subseq	r0, r2, r1
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	01000000 	mrseq	r0, (UNDEF: 0)
    10b4:	00005200 	andeq	r5, r0, r0, lsl #4
    10b8:	00000000 	andeq	r0, r0, r0
}
    10bc:	18b00000 	ldmne	r0!, {}	; <UNPREDICTABLE>
    10c0:	18ba0000 	ldmne	sl!, {}	; <UNPREDICTABLE>
    10c4:	00010000 	andeq	r0, r1, r0
    10c8:	00000053 	andeq	r0, r0, r3, asr r0
void __pinlist_setirq (int val) {
    10cc:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	00185400 	andseq	r5, r8, r0, lsl #8
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	00185a00 	andseq	r5, r8, r0, lsl #20
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10e4:	00001bfc 	strdeq	r1, [r0], -ip
    10e8:	00001c02 	andeq	r1, r0, r2, lsl #24
    10ec:	02500001 	subseq	r0, r0, #1
    10f0:	3000001c 	andcc	r0, r0, ip, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	0100001c 	tsteq	r0, ip, lsl r0
}
    10f8:	00005500 	andeq	r5, r0, r0, lsl #10
    10fc:	00000000 	andeq	r0, r0, r0
    1100:	1bfc0000 	blne	fff01108 <_estack+0xdfefc108>
    1104:	1c070000 	stcne	0, cr0, [r7], {-0}
void GPIOIntHandler () {
    1108:	00010000 	andeq	r0, r1, r0
if (buttons_int) {
    110c:	001c0751 	andseq	r0, ip, r1, asr r7
    1110:	001c3000 	andseq	r3, ip, r0
	buttons_disable ();
    1114:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	i_trigger ((aword)&__button_list);
    1120:	00001c18 	andeq	r1, r0, r8, lsl ip
    1124:	00001c1c 	andeq	r1, r0, ip, lsl ip
    1128:	1e530001 	cdpne	0, 5, cr0, cr3, cr1, {0}
    112c:	2200001c 	andcs	r0, r0, #28
    1130:	0100001c 	tsteq	r0, ip, lsl r0
    1134:	1c225300 	stcne	3, cr5, [r2], #-0
    1138:	1c300000 	ldcne	0, cr0, [r0], #-0
    113c:	00010000 	andeq	r0, r1, r0
    1140:	00000052 	andeq	r0, r0, r2, asr r0
    1144:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
    1148:	00178000 	andseq	r8, r7, r0
    114c:	00178500 	andseq	r8, r7, r0, lsl #10
    1150:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	i_trigger ((aword)(&__input_pins));
    115c:	00001780 	andeq	r1, r0, r0, lsl #15
    1160:	00001785 	andeq	r1, r0, r5, lsl #15
    1164:	00510001 	subseq	r0, r1, r1
	...
    1174:	01000000 	mrseq	r0, (UNDEF: 0)
    1178:	00005000 	andeq	r5, r0, r0
    117c:	00000000 	andeq	r0, r0, r0
    1180:	00010000 	andeq	r0, r1, r0
    1184:	00000050 	andeq	r0, r0, r0, asr r0
	...
	RISE_N_SHINE;
    1194:	53000100 	movwpl	r0, #256	; 0x100
	...
}
    11a0:	00530001 	subseq	r0, r3, r1
    11a4:	00000000 	andeq	r0, r0, r0
    11a8:	54000000 	strpl	r0, [r0], #-0
void system_init () {
    11ac:	5c000017 	stcpl	0, cr0, [r0], {23}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	01000017 	tsteq	r0, r7, lsl r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	175c5000 	ldrbne	r5, [ip, -r0]
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	176f0000 	strbne	r0, [pc, -r0]!
    11bc:	00010000 	andeq	r0, r1, r0
    11c0:	00177053 	andseq	r7, r7, r3, asr r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	00178000 	andseq	r8, r7, r0
    11c8:	53000100 	movwpl	r0, #256	; 0x100
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11d4:	0000175e 	andeq	r1, r0, lr, asr r7
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	0000176f 	andeq	r1, r0, pc, ror #14
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11dc:	70500001 	subsvc	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11e0:	80000017 	andhi	r0, r0, r7, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e4:	01000017 	tsteq	r0, r7, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	00005000 	andeq	r5, r0, r0
	...
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	00010000 	andeq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	00000050 	andeq	r0, r0, r0, asr r0
    1200:	00000000 	andeq	r0, r0, r0
    1204:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	00530001 	subseq	r0, r3, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1220:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	00005000 	andeq	r5, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1228:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122c:	00010000 	andeq	r0, r1, r0
	all_leds_blink;
    1230:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1240:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	00001788 	andeq	r1, r0, r8, lsl #15
    1250:	0000178e 	andeq	r1, r0, lr, lsl #15
    1254:	00500001 	subseq	r0, r0, r1
    1258:	00000000 	andeq	r0, r0, r0
    125c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	91000017 	tstls	r0, r7, lsl r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	01000017 	tsteq	r0, r7, lsl r0
    1268:	00005100 	andeq	r5, r0, r0, lsl #2
	IntEnable (INT_AON_RTC_COMB);
    126c:	00000000 	andeq	r0, r0, r0
    1270:	17960000 	ldrne	r0, [r6, r0]
    1274:	17d40000 	ldrbne	r0, [r4, r0]
	__pi_malloc_init ();
    1278:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	0017d854 	andseq	sp, r7, r4, asr r8
    1280:	00182600 	andseq	r2, r8, r0, lsl #12
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1284:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	00001828 	andeq	r1, r0, r8, lsr #16
    128c:	00001832 	andeq	r1, r0, r2, lsr r8
    1290:	00540001 	subseq	r0, r4, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	00000000 	andeq	r0, r0, r0
    1298:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	d0000017 	andle	r0, r0, r7, lsl r0
    12a0:	01000017 	tsteq	r0, r7, lsl r0
    12a4:	17d85000 	ldrbne	r5, [r8, r0]
	urates [0] = UART_RATE / 100;
    12a8:	18280000 	stmdane	r8!, {}	; <UNPREDICTABLE>
    12ac:	00010000 	andeq	r0, r1, r0
	reinit_uart ();
    12b0:	00000050 	andeq	r0, r0, r0, asr r0
	EXTRA_INITIALIZERS;
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	00186800 	andseq	r6, r8, r0, lsl #16
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	00187c00 	andseq	r7, r8, r0, lsl #24
    12c0:	50000100 	andpl	r0, r0, r0, lsl #2
    12c4:	00001882 	andeq	r1, r0, r2, lsl #17
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	0000189c 	muleq	r0, ip, r8
    12cc:	00500001 	subseq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
			devinit [i] . init (devinit [i] . param);
    12d8:	7e000018 	mcrvc	0, 0, r0, cr0, cr8, {0}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	01000018 	tsteq	r0, r8, lsl r0
    12e0:	18825100 	stmne	r2, {r8, ip, lr}
    12e4:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
	IntEnable (INT_UART0_COMB);
    12e8:	00010000 	andeq	r0, r1, r0
    12ec:	00000051 	andeq	r0, r0, r1, asr r0
}
    12f0:	00000000 	andeq	r0, r0, r0
	tci_run_auxiliary_timer ();
    12f4:	00187a00 	andseq	r7, r8, r0, lsl #20
		diag ("");
    12f8:	00187c00 	andseq	r7, r8, r0, lsl #24
    12fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("Leftover RAM: %d bytes",
    1308:	0000187a 	andeq	r1, r0, sl, ror r8
    130c:	0000187e 	andeq	r1, r0, lr, ror r8
    1310:	00510001 	subseq	r0, r1, r1
    1314:	00000000 	andeq	r0, r0, r0
    1318:	bc000000 	stclt	0, cr0, [r0], {-0}
    131c:	ca00001a 	bgt	138c <__pi_release+0x4>
    1320:	0100001a 	tsteq	r0, sl, lsl r0
    1324:	1ad05000 	bne	ff41532c <_estack+0xdf41032c>
    1328:	1ae30000 	bne	ff8c1330 <_estack+0xdf8bc330>
    132c:	00010000 	andeq	r0, r1, r0
    1330:	00000050 	andeq	r0, r0, r0, asr r0
    1334:	00000000 	andeq	r0, r0, r0
    1338:	001ac800 	andseq	ip, sl, r0, lsl #16
    133c:	001aca00 	andseq	ip, sl, r0, lsl #20
    1340:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1354:	00500001 	subseq	r0, r0, r1
    1358:	00000000 	andeq	r0, r0, r0
    135c:	01000000 	mrseq	r0, (UNDEF: 0)
    1360:	00005000 	andeq	r5, r0, r0
	...
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1370:	00010000 	andeq	r0, r1, r0
    1374:	00000055 	andeq	r0, r0, r5, asr r0
	...
}
    1384:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
__attribute__ ((noreturn)) void __pi_release () {
    1390:	00500001 	subseq	r0, r0, r1
	...
	check_stack_overflow;
    13a0:	01000000 	mrseq	r0, (UNDEF: 0)
	update_n_wake (MAX_WORD, NO);
    13a4:	00005000 	andeq	r5, r0, r0
    13a8:	00000000 	andeq	r0, r0, r0
    13ac:	00010000 	andeq	r0, r1, r0
	for_all_tasks (__pi_curr) {
    13b0:	00000050 	andeq	r0, r0, r0, asr r0
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
	...
	__SLEEP;
    13c4:	0023e000 	eoreq	lr, r3, r0
    13c8:	00240000 	eoreq	r0, r4, r0
    13cc:	50000100 	andpl	r0, r0, r0, lsl #2
	system_event_count ++;
    13d0:	00002406 	andeq	r2, r0, r6, lsl #8
    13d4:	00002407 	andeq	r2, r0, r7, lsl #8
	switch (__pi_systat.effpdm) {
    13d8:	00500001 	subseq	r0, r0, r1
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	ea000000 	b	13e8 <__pi_release+0x60>
    13e4:	10000023 	andne	r0, r0, r3, lsr #32
			__WFI ();
    13e8:	01000024 	tsteq	r0, r4, lsr #32
    13ec:	24105400 	ldrcs	r5, [r0], #-1024	; 0xfffffc00
    13f0:	24130000 	ldrcs	r0, [r3], #-0
	check_stack_overflow;
    13f4:	00010000 	andeq	r0, r1, r0
    13f8:	00000050 	andeq	r0, r0, r0, asr r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	0023ac00 	eoreq	sl, r3, r0, lsl #24
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	0023bc00 	eoreq	fp, r3, r0, lsl #24
			goto Redo;
    1408:	50000100 	andpl	r0, r0, r0, lsl #2
	for_all_tasks (__pi_curr) {
    140c:	000023c2 	andeq	r2, r0, r2, asr #7
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	000023ca 	andeq	r2, r0, sl, asr #7
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	00500001 	subseq	r0, r0, r1
    1418:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1420:	d4000023 	strle	r0, [r0], #-35	; 0xffffffdd
    1424:	01000023 	tsteq	r0, r3, lsr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	00005300 	andeq	r5, r0, r0, lsl #6
    142c:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	23ca0000 	biccs	r0, sl, #0
    1434:	23d00000 	bicscs	r0, r0, #0
			__WFI ();
    1438:	00010000 	andeq	r0, r1, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	0023d050 	eoreq	sp, r3, r0, asr r0
    1440:	0023d400 	eoreq	sp, r3, r0, lsl #8
}
    1444:	73000200 	movwvc	r0, #512	; 0x200
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1450:	00236c00 	eoreq	r6, r3, r0, lsl #24
    1454:	00237c00 	eoreq	r7, r3, r0, lsl #24
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1458:	50000100 	andpl	r0, r0, r0, lsl #2
    145c:	00002382 	andeq	r2, r0, r2, lsl #7
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1460:	0000238a 	andeq	r2, r0, sl, lsl #7
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1464:	00500001 	subseq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1468:	00000000 	andeq	r0, r0, r0
    146c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1470:	7e000023 	cdpvc	0, 0, cr0, cr0, cr3, {1}
    1474:	01000023 	tsteq	r0, r3, lsr #32
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	23825100 	orrcs	r5, r2, #0, 2
    147c:	23ac0000 			; <UNDEFINED> instruction: 0x23ac0000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	00010000 	andeq	r0, r1, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1484:	00000051 	andeq	r0, r0, r1, asr r0
    1488:	00000000 	andeq	r0, r0, r0
    148c:	00238800 	eoreq	r8, r3, r0, lsl #16
    1490:	00239000 	eoreq	r9, r3, r0
    1494:	53000100 	movwpl	r0, #256	; 0x100
			SysCtrlSetRechargeBeforePowerDown
    1498:	0000239a 	muleq	r0, sl, r3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    149c:	000023ac 	andeq	r2, r0, ip, lsr #7
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14a0:	00530001 	subseq	r0, r3, r1
    14a4:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	8a000000 	bhi	14b0 <__pi_release+0x128>
    14ac:	98000023 	stmdals	r0, {r0, r1, r5}
    14b0:	01000023 	tsteq	r0, r3, lsr #32
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b4:	239a5000 	orrscs	r5, sl, #0
    14b8:	239c0000 	orrscs	r0, ip, #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	00010000 	andeq	r0, r1, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	00239c50 	eoreq	r9, r3, r0, asr ip
    14c4:	0023ac00 	eoreq	sl, r3, r0, lsl #24
    14c8:	73000200 	movwvc	r0, #512	; 0x200
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	0022d000 	eoreq	sp, r2, r0
    14d8:	0022ea00 	eoreq	lr, r2, r0, lsl #20
    14dc:	50000100 	andpl	r0, r0, r0, lsl #2
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14e0:	000022ea 	andeq	r2, r0, sl, ror #5
    14e4:	000022f0 	strdeq	r2, [r0], -r0
    14e8:	f0550001 			; <UNDEFINED> instruction: 0xf0550001
    14ec:	fa000022 	blx	157c <__pi_release+0x1f4>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	01000022 	tsteq	r0, r2, lsr #32
    14f4:	22fa5000 	rscscs	r5, sl, #0
    14f8:	236c0000 	cmncs	ip, #0
    14fc:	00010000 	andeq	r0, r1, r0
			SysCtrlAdjustRechargeAfterPowerDown ();
    1500:	00000055 	andeq	r0, r0, r5, asr r0
			reinit_uart ();
    1504:	00000000 	andeq	r0, r0, r0
    1508:	0022d000 	eoreq	sp, r2, r0
    150c:	0022ea00 	eoreq	lr, r2, r0, lsl #20
}
    1510:	51000100 	mrspl	r0, (UNDEF: 16)
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1514:	000022ea 	andeq	r2, r0, sl, ror #5
    1518:	000022f0 	strdeq	r2, [r0], -r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	f0570001 			; <UNDEFINED> instruction: 0xf0570001
    1520:	fa000022 	blx	15b0 <__pi_release+0x228>
    1524:	01000022 	tsteq	r0, r2, lsr #32
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	22fa5100 	rscscs	r5, sl, #0, 2
    152c:	236c0000 	cmncs	ip, #0
    1530:	00010000 	andeq	r0, r1, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1534:	00000057 	andeq	r0, r0, r7, asr r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	00000000 	andeq	r0, r0, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	0022d000 	eoreq	sp, r2, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	0022ea00 	eoreq	lr, r2, r0, lsl #20
    1544:	52000100 	andpl	r0, r0, #0, 2
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1548:	000022ea 	andeq	r2, r0, sl, ror #5
    154c:	000022f0 	strdeq	r2, [r0], -r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1550:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1554:	fa000022 	blx	15e4 <halt+0x4>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1558:	01000022 	tsteq	r0, r2, lsr #32
    155c:	22fa5200 	rscscs	r5, sl, #0, 4
			PRCMPowerDomainOff (
    1560:	236c0000 	cmncs	ip, #0
    1564:	00010000 	andeq	r0, r1, r0
	__SLEEP;
    1568:	00000054 	andeq	r0, r0, r4, asr r0
    156c:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsie i" : : : "memory");
    1570:	00232a00 	eoreq	r2, r3, r0, lsl #20
	goto Redo;
    1574:	00234200 	eoreq	r4, r3, r0, lsl #4
    1578:	50000100 	andpl	r0, r0, r0, lsl #2
    157c:	00002342 	andeq	r2, r0, r2, asr #6
    1580:	00002347 	andeq	r2, r0, r7, asr #6
    1584:	00510001 	subseq	r0, r1, r1
    1588:	00000000 	andeq	r0, r0, r0
    158c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1590:	57000023 	strpl	r0, [r0, -r3, lsr #32]
    1594:	01000023 	tsteq	r0, r3, lsr #32
    1598:	00005000 	andeq	r5, r0, r0
    159c:	00000000 	andeq	r0, r0, r0
    15a0:	22800000 	addcs	r0, r0, #0
    15a4:	228e0000 	addcs	r0, lr, #0
    15a8:	00010000 	andeq	r0, r1, r0
    15ac:	00228e50 	eoreq	r8, r2, r0, asr lr
    15b0:	0022bc00 	eoreq	fp, r2, r0, lsl #24
    15b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    15c0:	00002280 	andeq	r2, r0, r0, lsl #5
    15c4:	00002294 	muleq	r0, r4, r2
    15c8:	98510001 	ldmdals	r1, {r0}^
    15cc:	a7000022 	strge	r0, [r0, -r2, lsr #32]
    15d0:	01000022 	tsteq	r0, r2, lsr #32
    15d4:	00005100 	andeq	r5, r0, r0, lsl #2
    15d8:	00000000 	andeq	r0, r0, r0
    15dc:	22800000 	addcs	r0, r0, #0
	cli_tim;
    15e0:	22940000 	addscs	r0, r4, #0
    15e4:	00010000 	andeq	r0, r1, r0
    15e8:	00229852 	eoreq	r9, r2, r2, asr r8
	diag ("PicOS halted");
    15ec:	0022a700 	eoreq	sl, r2, r0, lsl #14
	mdelay (500);
    15f0:	52000100 	andpl	r0, r0, #0, 2
	...
	__PCB = NULL;
    15fc:	000022a8 	andeq	r2, r0, r8, lsr #5
	release;
    1600:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
    1604:	b2500001 	subslt	r0, r0, #1
    1608:	b6000022 	strlt	r0, [r0], -r2, lsr #32
    160c:	07000022 	streq	r0, [r0, -r2, lsr #32]
int main (void) {
    1610:	32007400 	andcc	r7, r0, #0, 8
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
    1618:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	000022d0 	ldrdeq	r2, [r0], -r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	00500001 	subseq	r0, r0, r1
	...
    1630:	01000000 	mrseq	r0, (UNDEF: 0)
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	00005000 	andeq	r5, r0, r0
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1644:	00010000 	andeq	r0, r1, r0
	delay (16, 0);
    1648:	00000051 	andeq	r0, r0, r1, asr r0
	...
	__pi_release ();
    1658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1664:	00550001 	subseq	r0, r5, r1
	...
	wfun = (aword)(pid->code);
    1674:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
    1678:	00005100 	andeq	r5, r0, r0, lsl #2
		for (j = 0; j < nevents (i); j++) {
    167c:	00000000 	andeq	r0, r0, r0
    1680:	00010000 	andeq	r0, r1, r0
    1684:	00000056 	andeq	r0, r0, r6, asr r0
	...
			if (i->Events [j] . Event == (aword)pid
    1694:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				wakeupev (i, j);
    16a0:	00540001 	subseq	r0, r4, r1
	...
static void qfree (aword *ch) {
    16b0:	01000000 	mrseq	r0, (UNDEF: 0)
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b4:	00005000 	andeq	r5, r0, r0
	cc = (aword*)(mpools + MA_NP);
    16b8:	00000000 	andeq	r0, r0, r0
	m_setnextp (ch, chunk);
    16bc:	00010000 	andeq	r0, r1, r0
	m_setnextp (cc, ch);
    16c0:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
    16dc:	00510001 	subseq	r0, r1, r1
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	01000000 	mrseq	r0, (UNDEF: 0)
    16f0:	00005000 	andeq	r5, r0, r0
    16f4:	00000000 	andeq	r0, r0, r0
			m_setnextp (cc, m_nextp (chunk));
    16f8:	00010000 	andeq	r0, r1, r0
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	00000050 	andeq	r0, r0, r0, asr r0
	...
    170c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (m_size (chunk) >= m_size (ch))
    1718:	00510001 	subseq	r0, r1, r1
    171c:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk))
    1720:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1724:	d0000021 	andle	r0, r0, r1, lsr #32
    1728:	01000021 	tsteq	r0, r1, lsr #32
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	21d65000 	bicscs	r5, r6, r0
	diag_wait (a);
    1730:	21e00000 	mvncs	r0, r0
	diag_wchar (c, a);
    1734:	00010000 	andeq	r0, r1, r0
    1738:	0021e250 	eoreq	lr, r1, r0, asr r2
}
    173c:	0021f000 	eoreq	pc, r1, r0
    1740:	50000100 	andpl	r0, r0, r0, lsl #2
	syserror (ESTATE, "state");
    1744:	000021f6 	strdeq	r2, [r0], -r6
    1748:	000021f8 	strdeq	r2, [r0], -r8
    174c:	02500001 	subseq	r0, r0, #1
    1750:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	01000022 	tsteq	r0, r2, lsr #32
void utimer_add (address ut) {
    1758:	00005000 	andeq	r5, r0, r0
    175c:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [i] == NULL)
    1760:	21b80000 			; <UNDEFINED> instruction: 0x21b80000
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	21f20000 	mvnscs	r0, r0
    1768:	00010000 	andeq	r0, r1, r0
		syserror (ERESOURCE, "ut a");
    176c:	0021f651 	eoreq	pc, r1, r1, asr r6	; <UNPREDICTABLE>
	__pi_utims [i] = ut;
    1770:	00220100 	eoreq	r0, r2, r0, lsl #2
}
    1774:	51000100 	mrspl	r0, (UNDEF: 16)
    1778:	00002202 	andeq	r2, r0, r2, lsl #4
    177c:	00002218 	andeq	r2, r0, r8, lsl r2
	*t = v;
    1780:	00510001 	subseq	r0, r1, r1
	TCI_RUN_AUXILIARY_TIMER;
    1784:	00000000 	andeq	r0, r0, r0
void update_n_wake (word min, Boolean force) {
    1788:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	f5000021 			; <UNDEFINED> instruction: 0xf5000021
    1790:	01000021 	tsteq	r0, r1, lsr #32
    1794:	21f65200 	mvnscs	r5, r0, lsl #4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1798:	22010000 	andcs	r0, r1, #0
    179c:	00010000 	andeq	r0, r1, r0
    17a0:	00220252 	eoreq	r0, r2, r2, asr r2
    17a4:	00221800 	eoreq	r1, r2, r0, lsl #16
    17a8:	52000100 	andpl	r0, r0, #0, 2
	...
    17b4:	000021d0 	ldrdeq	r2, [r0], -r0
    17b8:	000021d4 	ldrdeq	r2, [r0], -r4
    17bc:	00500001 	subseq	r0, r0, r1
	...
		for_all_tasks (i) {
    17cc:	01000000 	mrseq	r0, (UNDEF: 0)
	__pi_mintk = znew + min;
    17d0:	00005000 	andeq	r5, r0, r0
    17d4:	00000000 	andeq	r0, r0, r0
			if (!twaiting (i))
    17d8:	00010000 	andeq	r0, r1, r0
    17dc:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    17f8:	00540001 	subseq	r0, r4, r1
	...
    1808:	01000000 	mrseq	r0, (UNDEF: 0)
    180c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				d = i->Timer - znew;
    181c:	00010000 	andeq	r0, r1, r0
    1820:	00000052 	andeq	r0, r0, r2, asr r0
    1824:	00000000 	andeq	r0, r0, r0
		if ((word)(__pi_mintk - znew) < min) 
    1828:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	__pi_old = znew;
    1834:	00002150 	andeq	r2, r0, r0, asr r1
}
    1838:	0000215a 	andeq	r2, r0, sl, asr r1
	TCI_RUN_DELAY_TIMER;
    183c:	5a500001 	bpl	1401848 <__ccfg+0x13e18a0>
}
    1840:	8a000021 	bhi	18cc <__pi_trigger+0x30>
    1844:	01000021 	tsteq	r0, r1, lsr #32
    1848:	00005400 	andeq	r5, r0, r0, lsl #8
    184c:	00000000 	andeq	r0, r0, r0
    1850:	21500000 	cmpcs	r0, r0
void proceed (word state) {
    1854:	21680000 	cmncs	r8, r0
	prcdstate (__pi_curr, state);
    1858:	00010000 	andeq	r0, r1, r0
    185c:	00216851 	eoreq	r6, r1, r1, asr r8
	release;
    1860:	00216f00 	eoreq	r6, r1, r0, lsl #30
    1864:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	00002150 	andeq	r2, r0, r0, asr r1
    1874:	00002160 	andeq	r2, r0, r0, ror #2
    1878:	60520001 	subsvs	r0, r2, r1
		syserror (ENEVENTS, "sw");
    187c:	8a000021 	bhi	1908 <delay+0x14>
    1880:	01000021 	tsteq	r0, r1, lsr #32
	setestate (__pi_curr->Events [j], state, event);
    1884:	00005500 	andeq	r5, r0, r0, lsl #10
	incwait (__pi_curr);
    1888:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    188c:	20940000 	addscs	r0, r4, r0
}
    1890:	20aa0000 	adccs	r0, sl, r0
    1894:	00010000 	andeq	r0, r1, r0
    1898:	0020b050 	eoreq	fp, r0, r0, asr r0
void __pi_trigger (aword event) {
    189c:	0020d000 	eoreq	sp, r0, r0
	for_all_tasks (i) {
    18a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		for (j = 0; j < nevents (i); j++) {
    18ac:	00002094 	muleq	r0, r4, r0
    18b0:	000020aa 	andeq	r2, r0, sl, lsr #1
			if (i->Events [j] . Event == event) {
    18b4:	b0510001 	subslt	r0, r1, r1
    18b8:	c8000020 	stmdagt	r0, {r5}
    18bc:	01000020 	tsteq	r0, r0, lsr #32
				wakeupev (i, j);
    18c0:	20ca5100 	sbccs	r5, sl, r0, lsl #2
    18c4:	20d60000 	sbcscs	r0, r6, r0
	for_all_tasks (i) {
    18c8:	00010000 	andeq	r0, r1, r0
}
    18cc:	00000051 	andeq	r0, r0, r1, asr r0
aword __pi_join (aword pid, word st) {
    18d0:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    18d4:	00209400 	eoreq	r9, r0, r0, lsl #8
    18d8:	0020aa00 	eoreq	sl, r0, r0, lsl #20
	return 0;
    18dc:	52000100 	andpl	r0, r0, #0, 2
		if ((aword)i == pid) {
    18e0:	000020aa 	andeq	r2, r0, sl, lsr #1
			__pi_wait (pid, st);
    18e4:	000020b0 	strheq	r2, [r0], -r0
}
    18e8:	b0540001 	subslt	r0, r4, r1
	for_all_tasks (i) {
    18ec:	bc000020 	stclt	0, cr0, [r0], {32}
    18f0:	01000020 	tsteq	r0, r0, lsr #32
void delay (word d, word state) {
    18f4:	20bc5200 	adcscs	r5, ip, r0, lsl #4
	settstate (__pi_curr, state);
    18f8:	20e20000 	rsccs	r0, r2, r0
    18fc:	00010000 	andeq	r0, r1, r0
    1900:	0020e854 	eoreq	lr, r0, r4, asr r8
    1904:	0020ee00 	eoreq	lr, r0, r0, lsl #28
	update_n_wake (d, YES);
    1908:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    190c:	000020f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	__pi_curr->Timer = __pi_old + d;
    1910:	00002106 	andeq	r2, r0, r6, lsl #2
    1914:	00540001 	subseq	r0, r4, r1
	inctimer (__pi_curr);
    1918:	00000000 	andeq	r0, r0, r0
    191c:	94000000 	strls	r0, [r0], #-0
    1920:	a2000020 	andge	r0, r0, #32
}
    1924:	01000020 	tsteq	r0, r0, lsr #32
    1928:	00005300 	andeq	r5, r0, r0, lsl #6
	if (fun == NULL)
    192c:	00000000 	andeq	r0, r0, r0
		return (int) __pi_curr;
    1930:	21100000 	tstcs	r0, r0
    1934:	211c0000 	tstcs	ip, r0
	for_all_tasks (i)
    1938:	00010000 	andeq	r0, r1, r0
}
    193c:	00212250 	eoreq	r2, r1, r0, asr r2
		if (i->code == fun)
    1940:	00213a00 	eoreq	r3, r1, r0, lsl #20
	for_all_tasks (i)
    1944:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int __pi_strlen (const char *s) {
    1950:	000020d8 	ldrdeq	r2, [r0], -r8
	for (i = 0; *(s+i) != '\0'; i++);
    1954:	000020e2 	andeq	r2, r0, r2, ror #1
}
    1958:	e8500001 	ldmda	r0, {r0}^
	for (i = 0; *(s+i) != '\0'; i++);
    195c:	ed000020 	stc	0, cr0, [r0, #-128]	; 0xffffff80
	while ((Boolean)(*d++ = *s++));
    1960:	01000020 	tsteq	r0, r0, lsr #32
    1964:	20f25000 	rscscs	r5, r2, r0
    1968:	21000000 	mrscs	r0, (UNDEF: 0)
}
    196c:	00010000 	andeq	r0, r1, r0
	while (n-- && (*s != '\0'))
    1970:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1980:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (n--)
    198c:	00500001 	subseq	r0, r0, r1
    1990:	00000000 	andeq	r0, r0, r0
		*dest++ = *src++;
    1994:	01000000 	mrseq	r0, (UNDEF: 0)
    1998:	00005000 	andeq	r5, r0, r0
    199c:	00000000 	andeq	r0, r0, r0
	while (n--)
    19a0:	00010000 	andeq	r0, r1, r0
}
    19a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (ERESOURCE, "addv");
    19b4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    19c0:	00510001 	subseq	r0, r1, r1
	ioreq [loc] = rf;
    19c4:	00000000 	andeq	r0, r0, r0
}
    19c8:	01000000 	mrseq	r0, (UNDEF: 0)
    19cc:	00005100 	andeq	r5, r0, r0, lsl #2
sint io (word retry, word dev, word operation, char *buf, word len) {
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	00010000 	andeq	r0, r1, r0
    19d8:	00000051 	andeq	r0, r0, r1, asr r0
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    19e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (len == 0)
    19f4:	0070000a 	rsbseq	r0, r0, sl
	ret = (ioreq [dev]) (operation, buf, len);
    19f8:	a0032432 	andge	r2, r3, r2, lsr r4
    19fc:	22200005 	eorcs	r0, r0, #5
	...
	if (ret == -1) {
    1a08:	00540001 	subseq	r0, r4, r1
		if (retry == WNONE)
    1a0c:	00000000 	andeq	r0, r0, r0
		iowait (dev, operation, retry);
    1a10:	0a000000 	beq	1a18 <io+0x48>
    1a14:	32007000 	andcc	r7, r0, #0
    1a18:	05a00324 	streq	r0, [r0, #804]!	; 0x324
			release;
    1a1c:	00222000 	eoreq	r2, r2, r0
	if (ret == -2) {
    1a20:	00000000 	andeq	r0, r0, r0
		if (retry != WNONE) {
    1a24:	01000000 	mrseq	r0, (UNDEF: 0)
    1a28:	00005400 	andeq	r5, r0, r0, lsl #8
			iowait (dev, operation, retry);
    1a2c:	00000000 	andeq	r0, r0, r0
    1a30:	000a0000 	andeq	r0, sl, r0
			(ioreq [dev]) (NONE, buf, len);
    1a34:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1a38:	0005a003 	andeq	sl, r5, r3
    1a3c:	00002220 	andeq	r2, r0, r0, lsr #4
	...
}
    1a4c:	00010000 	andeq	r0, r1, r0
	if (retry != WNONE) {
    1a50:	00000055 	andeq	r0, r0, r5, asr r0
		delay (-ret - 2, retry);
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a6c:	00540001 	subseq	r0, r4, r1
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
    1a78:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a88:	00010000 	andeq	r0, r1, r0
    1a8c:	00000050 	andeq	r0, r0, r0, asr r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a90:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1aa0:	00500001 	subseq	r0, r0, r1
	...
}
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ab4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1ac4:	00010000 	andeq	r0, r1, r0
		syserror (EMALLOC, "malg");
    1ac8:	00000050 	andeq	r0, r0, r0, asr r0
	...
		m_size (ch) ^= MALLOC_UMASK;
    1ad8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (mevent [MA_NP] . nwait) {
    1ae4:	00500001 	subseq	r0, r0, r1
    1ae8:	00000000 	andeq	r0, r0, r0
		trigger ((aword)(&(mevent [MA_NP])));
    1aec:	01000000 	mrseq	r0, (UNDEF: 0)
		mevent [MA_NP] . nwait --;
    1af0:	00005000 	andeq	r5, r0, r0
}
    1af4:	00000000 	andeq	r0, r0, r0
    1af8:	00010000 	andeq	r0, r1, r0
    1afc:	00000050 	andeq	r0, r0, r0, asr r0
	...
	j = NULL;
    1b0c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	syserror (EREQPAR, "kpi");
    1b18:	00510001 	subseq	r0, r1, r1
		if ((aword)i == pid) {
    1b1c:	00000000 	andeq	r0, r0, r0
    1b20:	01000000 	mrseq	r0, (UNDEF: 0)
				__PCB = i->Next;
    1b24:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			if (i == __pi_curr)
    1b34:	00010000 	andeq	r0, r1, r0
				release;
    1b38:	00000053 	andeq	r0, r0, r3, asr r0
				j->Next = i->Next;
    1b3c:	00000000 	andeq	r0, r0, r0
    1b40:	70000a00 	andvc	r0, r0, r0, lsl #20
    1b44:	03243200 			; <UNDEFINED> instruction: 0x03243200
}
    1b48:	200005a0 	andcs	r0, r0, r0, lsr #11
    1b4c:	00000022 	andeq	r0, r0, r2, lsr #32
    1b50:	00000000 	andeq	r0, r0, r0
	if (size < 8)
    1b54:	53000100 	movwpl	r0, #256	; 0x100
	...
		_size = (((aword)size) + 3) >> 2;
    1b60:	0070000a 	rsbseq	r0, r0, sl
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b64:	a0032432 	andge	r2, r3, r2, lsr r4
		_size = (((aword)size) + 3) >> 2;
    1b68:	22200005 	eorcs	r0, r0, #5
	...
			mevent [MA_NP] . nfail ++;
    1b74:	00530001 	subseq	r0, r3, r1
		mnfree [MA_NP] = 0;
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	0a000000 	beq	1b84 <__pi_malloc+0x30>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b80:	32007000 	andcc	r7, r0, #0
    1b84:	05a00324 	streq	r0, [r0, #804]!	; 0x324
			syserror (EMALLOC, "malc");
    1b88:	00222000 	eoreq	r2, r2, r0
	...
		chunk = m_nextp (chunk)) {
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
		m_setnextp (cc, m_nextp (chunk));
    1b9c:	00005000 	andeq	r5, r0, r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ba0:	00000000 	andeq	r0, r0, r0
    1ba4:	00010000 	andeq	r0, r1, r0
			m_size (chunk) = _size;
    1ba8:	00000050 	andeq	r0, r0, r0, asr r0
	...
			QFREE;
    1bb8:	53000100 	movwpl	r0, #256	; 0x100
	...
		mcfree [MA_NP] -= m_size (chunk);
    1bc4:	00530001 	subseq	r0, r3, r1
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (chunk) |= MALLOC_UMASK;
    1bd0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
}
    1be0:	00010000 	andeq	r0, r1, r0
    1be4:	00000052 	andeq	r0, r0, r2, asr r0
    1be8:	00000000 	andeq	r0, r0, r0
    1bec:	52000100 	andpl	r0, r0, #0, 2
	...
    1bf8:	00520001 	subseq	r0, r2, r1
aword __pi_fork (fsmcode func, aword data) {
    1bfc:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c00:	01000000 	mrseq	r0, (UNDEF: 0)
    1c04:	00005200 	andeq	r5, r0, r0, lsl #4
    1c08:	00000000 	andeq	r0, r0, r0
		if ((j = __PCB) == NULL)
    1c0c:	20140000 	andscs	r0, r4, r0
	i->Next = NULL;
    1c10:	20220000 	eorcs	r0, r2, r0
	i->data = data;
    1c14:	00010000 	andeq	r0, r1, r0
		if ((j = __PCB) == NULL)
    1c18:	00000050 	andeq	r0, r0, r0, asr r0
}
    1c1c:	00000000 	andeq	r0, r0, r0
			for (; j->Next != NULL; j = j->Next);
    1c20:	00201400 	eoreq	r1, r0, r0, lsl #8
    1c24:	00202600 	eoreq	r2, r0, r0, lsl #12
	return (aword) i;
    1c28:	51000100 	mrspl	r0, (UNDEF: 16)
    1c2c:	0000202c 	andeq	r2, r0, ip, lsr #32
	if (mevent [MA_NP] . nwait != 255)
    1c30:	0000203c 	andeq	r2, r0, ip, lsr r0
    1c34:	44510001 	ldrbmi	r0, [r1], #-1
    1c38:	66000020 	strvs	r0, [r0], -r0, lsr #32
		mevent [MA_NP] . nwait ++;
    1c3c:	01000020 	tsteq	r0, r0, lsr #32
	wait ((aword)(&(mevent [MA_NP])), state);
    1c40:	20685100 	rsbcs	r5, r8, r0, lsl #2
    1c44:	206a0000 	rsbcs	r0, sl, r0
void diag (const char *mess, ...) {
    1c48:	00010000 	andeq	r0, r1, r0
    1c4c:	00207e51 	eoreq	r7, r0, r1, asr lr
    1c50:	00209400 	eoreq	r9, r0, r0, lsl #8
	diag_disable_int (a, is);
    1c54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1c60:	00002050 	andeq	r2, r0, r0, asr r0
	diag_disable_int (a, is);
    1c64:	0000207a 	andeq	r2, r0, sl, ror r0
	while (*mess != '\0') {
    1c68:	00550001 	subseq	r0, r5, r1
	dgout ('\r');
    1c6c:	00000000 	andeq	r0, r0, r0
	dgout ('\n');
    1c70:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1c74:	58000020 	stmdapl	r0, {r5}
    1c78:	01000020 	tsteq	r0, r0, lsr #32
	diag_wait (a);
    1c7c:	20585400 	subscs	r5, r8, r0, lsl #8
	diag_enable_int (a, is);
    1c80:	206c0000 	rsbcs	r0, ip, r0
    1c84:	00010000 	andeq	r0, r1, r0
}
    1c88:	00206c50 	eoreq	r6, r0, r0, asr ip
    1c8c:	00209400 	eoreq	r9, r0, r0, lsl #8
    1c90:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			if (*mess == 'l') {
    1c9c:	0000202c 	andeq	r2, r0, ip, lsr #32
    1ca0:	0000203f 	andeq	r2, r0, pc, lsr r0
				mess++;
    1ca4:	44500001 	ldrbmi	r0, [r0], #-1
				val = va_arg (ap, lword);
    1ca8:	46000020 	strmi	r0, [r0], -r0, lsr #32
				bc = 32;
    1cac:	01000020 	tsteq	r0, r0, lsr #32
				bc = 16;
    1cb0:	20465000 	subcs	r5, r6, r0
			switch (*mess) {
    1cb4:	20490000 	subcs	r0, r9, r0
    1cb8:	00070000 	andeq	r0, r7, r0
    1cbc:	24320071 	ldrtcs	r0, [r2], #-113	; 0xffffff8f
				dgout ('%');
    1cc0:	7e220072 	mcrvc	0, 1, r0, cr2, cr2, {3}
    1cc4:	94000020 	strls	r0, [r0], #-32	; 0xffffffe0
				dgout (*mess);
    1cc8:	01000020 	tsteq	r0, r0, lsr #32
    1ccc:	00005000 	andeq	r5, r0, r0
			switch (*mess) {
    1cd0:	00000000 	andeq	r0, r0, r0
					v = __pi_hex_enc_table [
    1cd4:	1ff00000 	svcne	0x00f00000	; IMB
					i += 4;
    1cd8:	20060000 	andcs	r0, r6, r0
					(val >> (bc - i)) & 0xf];
    1cdc:	00010000 	andeq	r0, r1, r0
    1ce0:	00200850 	eoreq	r0, r0, r0, asr r8
					dgout (v);
    1ce4:	00200c00 	eoreq	r0, r0, r0, lsl #24
    1ce8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if ((val >> (bc - 1)) & 1) {
    1cfc:	00500001 	subseq	r0, r0, r1
					dgout ('-');
    1d00:	00000000 	andeq	r0, r0, r0
    1d04:	01000000 	mrseq	r0, (UNDEF: 0)
						val |= 0xffff0000;
    1d08:	00005000 	andeq	r5, r0, r0
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1d18:	00010000 	andeq	r0, r1, r0
    1d1c:	00000051 	andeq	r0, r0, r1, asr r0
					v = (word) (val / d);
    1d20:	00000000 	andeq	r0, r0, r0
					if (v || d == 1) break;
    1d24:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	00510001 	subseq	r0, r1, r1
					dgout (v + '0');
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	01000000 	mrseq	r0, (UNDEF: 0)
    1d3c:	00005500 	andeq	r5, r0, r0, lsl #10
					d /= 10;
    1d40:	00000000 	andeq	r0, r0, r0
					val = val - (v * d);
    1d44:	00010000 	andeq	r0, r1, r0
					if (d == 0) break;
    1d48:	00000051 	andeq	r0, r0, r1, asr r0
					v = (word) (val / d);
    1d4c:	00000000 	andeq	r0, r0, r0
    1d50:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
					s++;
    1d64:	00560001 	subseq	r0, r6, r1
	...
			dgout (*mess++);
    1d74:	01000000 	mrseq	r0, (UNDEF: 0)
    1d78:	00005000 	andeq	r5, r0, r0
    1d7c:	00000000 	andeq	r0, r0, r0
    1d80:	1f300000 	svcne	0x00300000
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d84:	1f5e0000 	svcne	0x005e0000
    1d88:	00010000 	andeq	r0, r1, r0
    1d8c:	001f6450 	andseq	r6, pc, r0, asr r4	; <UNPREDICTABLE>
    1d90:	001f8400 	andseq	r8, pc, r0, lsl #8
	^ entropy
    1d94:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1d98:	00001fc4 	andeq	r1, r0, r4, asr #31
    1d9c:	00001fc6 	andeq	r1, r0, r6, asr #31
    1da0:	00500001 	subseq	r0, r0, r1
    1da4:	00000000 	andeq	r0, r0, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1da8:	30000000 	andcc	r0, r0, r0
	word cs = size + hblenb;
    1dac:	6000001f 	andvs	r0, r0, pc, lsl r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1db0:	0100001f 	tsteq	r0, pc, lsl r0
    1db4:	1f605100 	svcne	0x00605100
	p -> length = size;
    1db8:	1f640000 	svcne	0x00640000
}
    1dbc:	00010000 	andeq	r0, r1, r0
	if (p->attributes.b.queued) {
    1dc0:	001f6457 	andseq	r6, pc, r7, asr r4	; <UNPREDICTABLE>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1dc4:	001f8400 	andseq	r8, pc, r0, lsl #8
    1dc8:	51000100 	mrspl	r0, (UNDEF: 16)
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1dcc:	00001f84 	andeq	r1, r0, r4, lsl #31
		p->attributes.b.queued = 0;
    1dd0:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    1dd4:	94570001 	ldrbls	r0, [r7], #-1
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1dd8:	c400001f 	strgt	r0, [r0], #-31	; 0xffffffe1
	deq (p);	// Remove from queue
    1ddc:	0100001f 	tsteq	r0, pc, lsl r0
}
    1de0:	1fc45700 	svcne	0x00c45700
	tfree ((address)p);
    1de4:	1fc90000 	svcne	0x00c90000
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1de8:	00010000 	andeq	r0, r1, r0
    1dec:	001fc951 	andseq	ip, pc, r1, asr r9	; <UNPREDICTABLE>
    1df0:	001ff000 	andseq	pc, pc, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1df4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	if (q_empty (q))
    1e00:	00001f30 	andeq	r1, r0, r0, lsr pc
		trigger (q);
    1e04:	00001f60 	andeq	r1, r0, r0, ror #30
	if (p->attributes.b.urgent) {
    1e08:	78910002 	ldmvc	r1, {r1}
		p->u.bqueue.next = q->next;
    1e0c:	00001f64 	andeq	r1, r0, r4, ror #30
		p->u.bqueue.prev = q;
    1e10:	00001f84 	andeq	r1, r0, r4, lsl #31
		q->next->prev = (qitem_t*) p;
    1e14:	78910002 	ldmvc	r1, {r1}
	p->attributes.b.queued = 1;
    1e18:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    1e1c:	00001fa0 	andeq	r1, r0, r0, lsr #31
}
    1e20:	78910002 	ldmvc	r1, {r1}
		p->u.bqueue.prev = q->prev;
    1e24:	00001fc4 	andeq	r1, r0, r4, asr #31
		q->prev->next = (qitem_t*) p;
    1e28:	00001ff0 	strdeq	r1, [r0], -r0
		q->prev = (qitem_t*) p;
    1e2c:	78910002 	ldmvc	r1, {r1}
	...
	deq (p);	// Soft dequeue, timer and hook left intact
    1e38:	00001f78 	andeq	r1, r0, r8, ror pc
	switch (dv) {
    1e3c:	00001f88 	andeq	r1, r0, r8, lsl #31
    1e40:	94560001 	ldrbls	r0, [r6], #-1
    1e44:	f000001f 			; <UNDEFINED> instruction: 0xf000001f
    1e48:	0100001f 	tsteq	r0, pc, lsl r0
			p->attributes.b.urgent = 1;
    1e4c:	00005600 	andeq	r5, r0, r0, lsl #12
    1e50:	00000000 	andeq	r0, r0, r0
			verify_ses (p, "dispose ses");
    1e54:	1f940000 	svcne	0x00940000
    1e58:	1fae0000 	svcne	0x00ae0000
    1e5c:	00010000 	andeq	r0, r1, r0
    1e60:	001fae50 	andseq	sl, pc, r0, asr lr	; <UNPREDICTABLE>
    1e64:	001fb200 	andseq	fp, pc, r0, lsl #4
			verify_phy (p, "dispose phy");
    1e68:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1e6c:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
}
    1e70:	00001fb6 			; <UNDEFINED> instruction: 0x00001fb6
			enq (oqueues [p->attributes.b.phys], p);
    1e74:	b6500001 	ldrblt	r0, [r0], -r1
			p->attributes.b.urgent = 1;
    1e78:	c400001f 	strgt	r0, [r0], #-31	; 0xffffffe1
    1e7c:	0100001f 	tsteq	r0, pc, lsl r0
			verify_phy (p, "dispose phy");
    1e80:	1fca5400 	svcne	0x00ca5400
    1e84:	1fd20000 	svcne	0x00d20000
    1e88:	00010000 	andeq	r0, r1, r0
    1e8c:	001fd250 	andseq	sp, pc, r0, asr r2	; <UNPREDICTABLE>
    1e90:	001ff000 	andseq	pc, pc, r0
    1e94:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1ea0:	00001ec0 	andeq	r1, r0, r0, asr #29
			rlp (p);
    1ea4:	00001ee6 	andeq	r1, r0, r6, ror #29
}
    1ea8:	ea500001 	b	1401eb4 <__ccfg+0x13e1f0c>
    1eac:	0700001e 	smladeq	r0, lr, r0, r0
    1eb0:	0100001f 	tsteq	r0, pc, lsl r0
    1eb4:	1f145000 	svcne	0x00145000
    1eb8:	1f160000 	svcne	0x00160000
    1ebc:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1ec0:	00000050 	andeq	r0, r0, r0, asr r0
	if (b->attributes.b.outgoing) {
    1ec4:	00000000 	andeq	r0, r0, r0
	b = header (p);
    1ec8:	001eca00 	andseq	ip, lr, r0, lsl #20
	if (b->attributes.b.outgoing) {
    1ecc:	001f1000 	andseq	r1, pc, r0
		verify_ses (b, "tcv02");
    1ed0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1ed4:	00001f10 	andeq	r1, r0, r0, lsl pc
    1ed8:	00001f13 	andeq	r1, r0, r3, lsl pc
    1edc:	14500001 	ldrbne	r0, [r0], #-1
    1ee0:	1a00001f 	bne	1f64 <tcv_open+0x34>
		verify_plg (b, tcv_out, "tcv03");
    1ee4:	0100001f 	tsteq	r0, pc, lsl r0
    1ee8:	1f1a5400 	svcne	0x001a5400
    1eec:	1f1d0000 	svcne	0x001d0000
    1ef0:	00010000 	andeq	r0, r1, r0
    1ef4:	00000050 	andeq	r0, r0, r0, asr r0
    1ef8:	00000000 	andeq	r0, r0, r0
    1efc:	001da800 	andseq	sl, sp, r0, lsl #16
    1f00:	001dae00 	andseq	sl, sp, r0, lsl #28
    1f04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f10:	00001dd8 	ldrdeq	r1, [r0], -r8
		rlp (b);
    1f14:	00001de5 	andeq	r1, r0, r5, ror #27
}
    1f18:	00500001 	subseq	r0, r0, r1
		rlp (b);
    1f1c:	00000000 	andeq	r0, r0, r0
    1f20:	c4000000 	strgt	r0, [r0], #-0
    1f24:	d600001d 			; <UNDEFINED> instruction: 0xd600001d
    1f28:	0100001d 	tsteq	r0, sp, lsl r0
    1f2c:	00005000 	andeq	r5, r0, r0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	1de80000 	stclne	0, cr0, [r8]
    1f38:	1df60000 	ldclne	0, cr0, [r6]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f3c:	00010000 	andeq	r0, r1, r0
	va_start (ap, plid);
    1f40:	001df650 	andseq	pc, sp, r0, asr r6	; <UNPREDICTABLE>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f44:	001dfc00 	andseq	pc, sp, r0, lsl #24
    1f48:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1f4c:	00001dfc 	strdeq	r1, [r0], -ip
    1f50:	00001e05 	andeq	r1, r0, r5, lsl #28
    1f54:	05500001 	ldrbeq	r0, [r0, #-1]
    1f58:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
			syserror (ENODEVICE, "tcv04");
    1f5c:	0100001e 	tsteq	r0, lr, lsl r0
		syserror (EMALLOC, "tcv05");
    1f60:	00005500 	andeq	r5, r0, r0, lsl #10
	attp.b.outgoing = 1;
    1f64:	00000000 	andeq	r0, r0, r0
    1f68:	1de80000 	stclne	0, cr0, [r8]
    1f6c:	1df80000 	ldclne	0, cr0, [r8]
    1f70:	00010000 	andeq	r0, r1, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f74:	001df851 	andseq	pc, sp, r1, asr r8	; <UNPREDICTABLE>
		if (descriptors [fd] == NULL)
    1f78:	001dfc00 	andseq	pc, sp, r0, lsl #24
    1f7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f80:	00001dfc 	strdeq	r1, [r0], -ip
		return ERROR;
    1f84:	00001e05 	andeq	r1, r0, r5, lsl #28
}
    1f88:	05510001 	ldrbeq	r0, [r1, #-1]
    1f8c:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    1f90:	0100001e 	tsteq	r0, lr, lsl r0
	s->attpattern.b.session = fd;
    1f94:	00005400 	andeq	r5, r0, r0, lsl #8
    1f98:	00000000 	andeq	r0, r0, r0
	descriptors [fd] = s;
    1f9c:	1df40000 	ldclne	0, cr0, [r4]
	q_init (&(s->rqueue));
    1fa0:	1df60000 	ldclne	0, cr0, [r6]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1fa4:	00010000 	andeq	r0, r1, r0
    1fa8:	001df650 	andseq	pc, sp, r0, asr r6	; <UNPREDICTABLE>
    1fac:	001dfc00 	andseq	pc, sp, r0, lsl #24
    1fb0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1fbc:	00001df4 	strdeq	r1, [r0], -r4
	descriptors [fd] = s;
    1fc0:	00001df8 	strdeq	r1, [r0], -r8
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1fc4:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
    1fc8:	fc00001d 	stc2	0, cr0, [r0], {29}
	if (s == NULL)
    1fcc:	0100001d 	tsteq	r0, sp, lsl r0
		syserror (EMALLOC, "tcv05");
    1fd0:	00005400 	andeq	r5, r0, r0, lsl #8
    1fd4:	00000000 	andeq	r0, r0, r0
    1fd8:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    1fdc:	1e640000 	cdpne	0, 6, cr0, cr4, cr0, {0}
    1fe0:	00010000 	andeq	r0, r1, r0
    1fe4:	001e6450 	andseq	r6, lr, r0, asr r4
    1fe8:	001e7000 	andseq	r7, lr, r0
    1fec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ff0:	00001e70 	andeq	r1, r0, r0, ror lr
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ff4:	00001e77 	andeq	r1, r0, r7, ror lr
    1ff8:	78510001 	ldmdavc	r1, {r0}^
    1ffc:	9e00001e 	mcrls	0, 0, r0, cr0, cr14, {0}
	plugins [ord] = pl;
    2000:	0100001e 	tsteq	r0, lr, lsl r0
	return 0;
    2004:	1e9e5000 	cdpne	0, 9, cr5, cr14, cr0, {0}
		return ERROR;
    2008:	1ea00000 	cdpne	0, 10, cr0, cr0, cr0, {0}
}
    200c:	00010000 	andeq	r0, r1, r0
    2010:	001ea054 	andseq	sl, lr, r4, asr r0
	verify_fds (fd, "tcv10");
    2014:	001ea700 	andseq	sl, lr, r0, lsl #14
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2018:	50000100 	andpl	r0, r0, r0, lsl #2
	verify_fds (fd, "tcv10");
    201c:	00001ea8 	andeq	r1, r0, r8, lsr #29
    2020:	00001ec0 	andeq	r1, r0, r0, asr #29
    2024:	00500001 	subseq	r0, r0, r1
	verify_plg (b, tcv_frm, "tcv11");
    2028:	00000000 	andeq	r0, r0, r0
	b = q_first (rq);
    202c:	34000000 	strcc	r0, [r0], #-0
	if (q_end (b, rq)) {
    2030:	3e00001e 	mcrcc	0, 0, r0, cr0, cr14, {0}
		if (state != WNONE) {
    2034:	0100001e 	tsteq	r0, lr, lsl r0
    2038:	00005100 	andeq	r5, r0, r0, lsl #2
			when (rq, state);
    203c:	00000000 	andeq	r0, r0, r0
			release;
    2040:	1e800000 	cdpne	0, 8, cr0, cr0, cr0, {0}
	deq (b);	// Dequeue the packet ...
    2044:	1e9e0000 	cdpne	0, 9, cr0, cr14, cr0, {0}
    2048:	00010000 	andeq	r0, r1, r0
	p = ((address)(b + 1));
    204c:	001e9e50 	andseq	r9, lr, r0, asr lr
	verify_plg (b, tcv_frm, "tcv11");
    2050:	001ea000 	andseq	sl, lr, r0
    2054:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2060:	0000218c 	andeq	r2, r0, ip, lsl #3
    2064:	00002192 	muleq	r0, r2, r1
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2068:	92500001 	subsls	r0, r0, #1
    206c:	9e000021 	cdpls	0, 0, cr0, cr0, cr1, {1}
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2070:	01000021 	tsteq	r0, r1, lsr #32
    2074:	00005300 	andeq	r5, r0, r0, lsl #6
	b->u.pointers.tail =
    2078:	00000000 	andeq	r0, r0, r0
}
    207c:	218c0000 	orrcs	r0, ip, r0
		return NULL;
    2080:	21960000 	orrscs	r0, r6, r0
    2084:	00010000 	andeq	r0, r1, r0
    2088:	00219651 	eoreq	r9, r1, r1, asr r6
    208c:	0021a200 	eoreq	sl, r1, r0, lsl #4
    2090:	50000100 	andpl	r0, r0, r0, lsl #2
	verify_fds (fd, "tcv16");
    2094:	000021a8 	andeq	r2, r0, r8, lsr #3
								Boolean urg) {
    2098:	000021ad 	andeq	r2, r0, sp, lsr #3
    209c:	00500001 	subseq	r0, r0, r1
	verify_fds (fd, "tcv16");
    20a0:	00000000 	andeq	r0, r0, r0
    20a4:	8c000000 	stchi	0, cr0, [r0], {-0}
    20a8:	9a000021 	bls	2134 <tcv_wnps+0xa0>
	verify_pld (s, tcv_frm, "tcv17");
    20ac:	01000021 	tsteq	r0, r1, lsr #32
    20b0:	219a5200 	orrscs	r5, sl, r0, lsl #4
    20b4:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    20b8:	00010000 	andeq	r0, r1, r0
    20bc:	0021a851 	eoreq	sl, r1, r1, asr r8
    20c0:	0021ad00 	eoreq	sl, r1, r0, lsl #26
    20c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	ptrs.tail = (word) urg;
    20d0:	000021a0 	andeq	r2, r0, r0, lsr #3
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20d4:	000021a2 	andeq	r2, r0, r2, lsr #3
    20d8:	00500001 	subseq	r0, r0, r1
		if (state != WNONE) {
    20dc:	00000000 	andeq	r0, r0, r0
    20e0:	a0000000 	andge	r0, r0, r0
}
    20e4:	a4000021 	strge	r0, [r0], #-33	; 0xffffffdf
			when (eid, state);
    20e8:	01000021 	tsteq	r0, r1, lsr #32
    20ec:	00005100 	andeq	r5, r0, r0, lsl #2
			release;
    20f0:	00000000 	andeq	r0, r0, r0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    20f4:	22180000 	andscs	r0, r8, #0
    20f8:	221c0000 	andscs	r0, ip, #0
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20fc:	00010000 	andeq	r0, r1, r0
    2100:	00000050 	andeq	r0, r0, r0, asr r0
    2104:	00000000 	andeq	r0, r0, r0
    2108:	00221800 	eoreq	r1, r2, r0, lsl #16
    210c:	00222a00 	eoreq	r2, r2, r0, lsl #20
    2110:	51000100 	mrspl	r0, (UNDEF: 16)
		if (state != WNONE) {
    2114:	0000222a 	andeq	r2, r0, sl, lsr #4
    2118:	0000222e 	andeq	r2, r0, lr, lsr #4
			tmwait (state);
    211c:	2e560001 	cdpcs	0, 5, cr0, cr6, cr1, {0}
    2120:	3e000022 	cdpcc	0, 0, cr0, cr0, cr2, {1}
	b->attributes = s->attpattern;
    2124:	01000022 	tsteq	r0, r2, lsr #32
		b->attributes.b.urgent = 1;
    2128:	223e5100 	eorscs	r5, lr, #0, 2
    212c:	22400000 	subcs	r0, r0, #0
	b->u.pointers.head = ptrs.head;
    2130:	00010000 	andeq	r0, r1, r0
	b->u.pointers.tail = length;
    2134:	00224056 	eoreq	r4, r2, r6, asr r0
	return (address) (b + 1);
    2138:	00224300 	eoreq	r4, r2, r0, lsl #6
    213c:	51000100 	mrspl	r0, (UNDEF: 16)
    2140:	00002243 	andeq	r2, r0, r3, asr #4
    2144:	00002266 	andeq	r2, r0, r6, ror #4
    2148:	66560001 	ldrbvs	r0, [r6], -r1
    214c:	69000022 	stmdbvs	r0, {r1, r5}
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2150:	01000022 	tsteq	r0, r2, lsr #32
	if (len >= b->u.pointers.tail)
    2154:	22695100 	rsbcs	r5, r9, #0, 2
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2158:	22800000 	addcs	r0, r0, #0
    215c:	00010000 	andeq	r0, r1, r0
	if (len > 0) {
    2160:	00000056 	andeq	r0, r0, r6, asr r0
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2164:	00000000 	andeq	r0, r0, r0
    2168:	00221800 	eoreq	r1, r2, r0, lsl #16
    216c:	00222d00 	eoreq	r2, r2, r0, lsl #26
		b->u.pointers.tail -= len;
    2170:	52000100 	andpl	r0, r0, #0, 2
    2174:	0000222d 	andeq	r2, r0, sp, lsr #4
    2178:	0000222e 	andeq	r2, r0, lr, lsr #4
		b->u.pointers.head += len;
    217c:	2e550001 	cdpcs	0, 5, cr0, cr5, cr1, {0}
    2180:	43000022 	movwmi	r0, #34	; 0x22
    2184:	01000022 	tsteq	r0, r2, lsr #32
}
    2188:	22435200 	subcs	r5, r3, #0, 4
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    218c:	22660000 	rsbcs	r0, r6, #0
    2190:	00010000 	andeq	r0, r1, r0
    2194:	00226655 	eoreq	r6, r2, r5, asr r6
	verify_fph (phy, "tcv23");
    2198:	00226900 	eoreq	r6, r2, r0, lsl #18
    219c:	52000100 	andpl	r0, r0, #0, 2
    21a0:	00002269 	andeq	r2, r0, r9, ror #4
    21a4:	00002280 	andeq	r2, r0, r0, lsl #5
}
    21a8:	00550001 	subseq	r0, r5, r1
	return (physical [phy]) (opt, arg);
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	44000000 	strmi	r0, [r0], #-0
    21b4:	4a000022 	bmi	2244 <tcvp_new+0x2c>
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    21b8:	01000022 	tsteq	r0, r2, lsr #32
	if (opt < 0) {
    21bc:	224c5000 	subcs	r5, ip, #0
		if (fd < 0)
    21c0:	225f0000 	subscs	r0, pc, #0
		if (opt == PHYSOPT_PLUGINFO) {
    21c4:	00010000 	andeq	r0, r1, r0
			if (fd >= TCV_MAX_PLUGS)
    21c8:	00225f50 	eoreq	r5, r2, r0, asr pc
			if ((p = plugins [fd]) == NULL)
    21cc:	00226600 	eoreq	r6, r2, r0, lsl #12
    21d0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
}
    21d4:	0000226a 	andeq	r2, r0, sl, ror #4
		if (fd >= TCV_MAX_PHYS)
    21d8:	00002270 	andeq	r2, r0, r0, ror r2
		return physinfo [fd];
    21dc:	00500001 	subseq	r0, r0, r1
    21e0:	00000000 	andeq	r0, r0, r0
	verify_fds (fd, "tcv22");
    21e4:	26000000 	strcs	r0, [r0], -r0
    21e8:	2a000022 	bcs	2278 <tcvp_new+0x60>
    21ec:	01000022 	tsteq	r0, r2, lsr #32
    21f0:	00005100 	andeq	r5, r0, r0, lsl #2
    21f4:	00000000 	andeq	r0, r0, r0
}
    21f8:	24300000 	ldrtcs	r0, [r0], #-0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21fc:	24490000 	strbcs	r0, [r9], #-0
    2200:	00010000 	andeq	r0, r1, r0
			return 0;
    2204:	00245452 	eoreq	r5, r4, r2, asr r4
    2208:	00246800 	eoreq	r6, r4, r0, lsl #16
    220c:	52000100 	andpl	r0, r0, #0, 2
	...
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2218:	00002430 	andeq	r2, r0, r0, lsr r4
    221c:	00002449 	andeq	r2, r0, r9, asr #8
	if (dsp != TCV_DSP_PASS) {
    2220:	58530001 	ldmdapl	r3, {r0}^
		if (ses == NONE)
    2224:	68000024 	stmdavs	r0, {r2, r5}
			syserror (EREQPAR, "tcv26");
    2228:	01000024 	tsteq	r0, r4, lsr #32
		verify_fds (ses, "tcv27");
    222c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    223c:	00010000 	andeq	r0, r1, r0
		if ((p = apb (size)) != NULL) {
    2240:	00000050 	andeq	r0, r0, r0, asr r0
    2244:	00000000 	andeq	r0, r0, r0
		return NULL;
    2248:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			dispose (p, dsp);
    225c:	00510001 	subseq	r0, r1, r1
			return (address)(p + 1);
    2260:	00000000 	andeq	r0, r0, r0
    2264:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((p = apb (size)) != NULL)
    2268:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		return (address)(p + 1);
    2278:	00010000 	andeq	r0, r1, r0
    227c:	00000052 	andeq	r0, r0, r2, asr r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2280:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2284:	52000100 	andpl	r0, r0, #0, 2
	...
	physical [phy] = ps;
    2298:	00510001 	subseq	r0, r1, r1
	...
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22a8:	01000000 	mrseq	r0, (UNDEF: 0)
    22ac:	00005000 	andeq	r5, r0, r0
	...
}
    22bc:	00010000 	andeq	r0, r1, r0
    22c0:	00000050 	andeq	r0, r0, r0, asr r0
    22c4:	00000000 	andeq	r0, r0, r0
    22c8:	03000500 	movweq	r0, #1280	; 0x500
	...
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d8:	00500001 	subseq	r0, r0, r1
    22dc:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv30");
    22e0:	05000000 	streq	r0, [r0, #-0]
    22e4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22f8:	00010000 	andeq	r0, r1, r0
		if (plugins [plg] == NULL)
    22fc:	00000050 	andeq	r0, r0, r0, asr r0
    2300:	00000000 	andeq	r0, r0, r0
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2304:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2310:	00500001 	subseq	r0, r0, r1
    2314:	00000000 	andeq	r0, r0, r0
    2318:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    231c:	00005000 	andeq	r5, r0, r0
	...
    232c:	00010000 	andeq	r0, r1, r0
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2330:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2340:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2354:	00500001 	subseq	r0, r0, r1
	...
	return 1;
    2364:	01000000 	mrseq	r0, (UNDEF: 0)
    2368:	00005100 	andeq	r5, r0, r0, lsl #2
	verify_fph (phy, "tcv32");
    236c:	00000000 	andeq	r0, r0, r0
    2370:	00010000 	andeq	r0, r1, r0
    2374:	00000056 	andeq	r0, r0, r6, asr r0
	...
	oq = oqueues [phy];
    2384:	52000100 	andpl	r0, r0, #0, 2
	...
}
    2398:	00530001 	subseq	r0, r3, r1
	...
		return NULL;
    23a8:	01000000 	mrseq	r0, (UNDEF: 0)
	verify_fph (phy, "tcv33");
    23ac:	00005400 	andeq	r5, r0, r0, lsl #8
    23b0:	00000000 	andeq	r0, r0, r0
    23b4:	00010000 	andeq	r0, r1, r0
    23b8:	00000054 	andeq	r0, r0, r4, asr r0
    23bc:	00000000 	andeq	r0, r0, r0
    23c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    23d4:	00500001 	subseq	r0, r0, r1
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	01000000 	mrseq	r0, (UNDEF: 0)
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    23e0:	00005000 	andeq	r5, r0, r0
	...
	verify_plg (b, tcv_xmt, "tcv34");
    23f0:	00010000 	andeq	r0, r1, r0
    23f4:	00000051 	andeq	r0, r0, r1, asr r0
    23f8:	00000000 	andeq	r0, r0, r0
    23fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	dispose (b, plugins [b->attributes.b.plugin] ->
    2408:	00510001 	subseq	r0, r1, r1
	...
    2418:	01000000 	mrseq	r0, (UNDEF: 0)
}
    241c:	00005200 	andeq	r5, r0, r0, lsl #4
    while(1)
    2420:	00000000 	andeq	r0, r0, r0
{
    2424:	00010000 	andeq	r0, r1, r0
    SetupTrimDevice();
    2428:	00000054 	andeq	r0, r0, r4, asr r0
	...
    __asm("    ldr     r0, =_bss\n"
    2438:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    FaultISR();
    244c:	00500001 	subseq	r0, r0, r1
	...
        *pui32Dest++ = *pui32Src++;
    245c:	01000000 	mrseq	r0, (UNDEF: 0)
    2460:	00005000 	andeq	r5, r0, r0
    2464:	00000000 	andeq	r0, r0, r0
    2468:	00010000 	andeq	r0, r1, r0
    246c:	00000055 	andeq	r0, r0, r5, asr r0
static byte get_byte () {
    2470:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2474:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			b |= 1;
    2488:	00510001 	subseq	r0, r1, r1
    248c:	00000000 	andeq	r0, r0, r0
    2490:	01000000 	mrseq	r0, (UNDEF: 0)
	for (b = 0, i = 0; i < 8; i++) {
    2494:	00005600 	andeq	r5, r0, r0, lsl #12
}
    2498:	00000000 	andeq	r0, r0, r0
    249c:	00010000 	andeq	r0, r1, r0
    24a0:	00000056 	andeq	r0, r0, r6, asr r0
static void put_byte (byte b) {
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24bc:	00520001 	subseq	r0, r2, r1
	for (i = 0; i < 8; i++) {
    24c0:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    24c4:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = 0; i < 8; i++) {
    24c8:	00005200 	andeq	r5, r0, r0, lsl #4
}
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	24ec0000 	strbtcs	r0, [ip], #0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    24d4:	24fc0000 	ldrbtcs	r0, [ip], #0
    24d8:	00010000 	andeq	r0, r1, r0
	put_byte (cmd);
    24dc:	00000050 	andeq	r0, r0, r0, asr r0
    24e0:	00000000 	andeq	r0, r0, r0
}
    24e4:	0024ec00 	eoreq	lr, r4, r0, lsl #24
    24e8:	0024fc00 	eoreq	pc, r4, r0, lsl #24
static void wwait (word st, word del) {
    24ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (dopen && (rdsr () & 1)) {
    24f8:	0000250e 	andeq	r2, r0, lr, lsl #10
    24fc:	00002512 	andeq	r2, r0, r2, lsl r5
    2500:	00500001 	subseq	r0, r0, r1
    2504:	00000000 	andeq	r0, r0, r0
	put_byte (CMD_RDSR);
    2508:	d4000000 	strle	r0, [r0], #-0
	r = get_byte ();
    250c:	df000024 	svcle	0x00000024
    2510:	01000024 	tsteq	r0, r4, lsr #32
	while (dopen && (rdsr () & 1)) {
    2514:	00005000 	andeq	r5, r0, r0
}
    2518:	00000000 	andeq	r0, r0, r0
		if (st == WNONE)
    251c:	24a40000 	strtcs	r0, [r4], #0
    2520:	24c00000 	strbcs	r0, [r0], #0
			mdelay (1);
    2524:	00010000 	andeq	r0, r1, r0
    2528:	0024c850 	eoreq	ip, r4, r0, asr r8
			delay (del, st);
    252c:	0024d400 	eoreq	sp, r4, r0, lsl #8
    2530:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			release;
    253c:	00002480 	andeq	r2, r0, r0, lsl #9
static void ready () {
    2540:	00002484 	andeq	r2, r0, r4, lsl #9
	if (dopen) {
    2544:	88500001 	ldmdahi	r0, {r0}^
		wwait (WNONE, 1);
    2548:	a4000024 	strge	r0, [r0], #-36	; 0xffffffdc
    254c:	01000024 	tsteq	r0, r4, lsr #32
    2550:	00005000 	andeq	r5, r0, r0
	dstat = 0;
    2554:	00000000 	andeq	r0, r0, r0
}
    2558:	25cc0000 	strbcs	r0, [ip]
    255c:	25d20000 	ldrbcs	r0, [r2]
    2560:	00010000 	andeq	r0, r1, r0
	udelay (1);
    2564:	00000050 	andeq	r0, r0, r0, asr r0
    2568:	00000000 	andeq	r0, r0, r0
	udelay (1);
    256c:	0025cc00 	eoreq	ip, r5, r0, lsl #24
		dopen = DOPEN_TEMP;
    2570:	0025d700 	eoreq	sp, r5, r0, lsl #14
    2574:	51000100 	mrspl	r0, (UNDEF: 16)
    2578:	000025d7 	ldrdeq	r2, [r0], -r7
    257c:	00002632 	andeq	r2, r0, r2, lsr r6
static void cclose () {
    2580:	00540001 	subseq	r0, r4, r1
	if (dopen == DOPEN_TEMP) {
    2584:	00000000 	andeq	r0, r0, r0
    2588:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
		wwait (WNONE, 1);
    258c:	df000025 	svcle	0x00000025
    2590:	01000025 	tsteq	r0, r5, lsr #32
	cmd_0 (CMD_DP);
    2594:	25e45000 	strbcs	r5, [r4, #0]!
    2598:	25ea0000 	strbcs	r0, [sl, #0]!
		dopen = 0;
    259c:	00010000 	andeq	r0, r1, r0
}
    25a0:	0025f050 	eoreq	pc, r5, r0, asr r0	; <UNPREDICTABLE>
word ee_open () {
    25a4:	00260200 	eoreq	r0, r6, r0, lsl #4
	ready ();
    25a8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	dopen = DOPEN_PERM;
    25ac:	00002602 	andeq	r2, r0, r2, lsl #12
    25b0:	00002606 	andeq	r2, r0, r6, lsl #12
}
    25b4:	06500001 	ldrbeq	r0, [r0], -r1
	if (dopen) {
    25b8:	32000026 	andcc	r0, r0, #38	; 0x26
    25bc:	01000026 	tsteq	r0, r6, lsr #32
		dopen = DOPEN_TEMP;
    25c0:	00005500 	andeq	r5, r0, r0, lsl #10
		cclose ();
    25c4:	00000000 	andeq	r0, r0, r0
}
    25c8:	25f60000 	ldrbcs	r0, [r6, #0]!
int ser_out (word st, const char *m) {
    25cc:	25fa0000 	ldrbcs	r0, [sl, #0]!
	if ((prcs = running (__outserial)) != 0) {
    25d0:	00010000 	andeq	r0, r1, r0
    25d4:	0025fa50 	eoreq	pc, r5, r0, asr sl	; <UNPREDICTABLE>
    25d8:	00260200 	eoreq	r0, r6, r0, lsl #4
		join (prcs, st);
    25dc:	57000100 	strpl	r0, [r0, -r0, lsl #2]
		release;
    25e0:	00002608 	andeq	r2, r0, r8, lsl #12
	if (*m)
    25e4:	00002611 	andeq	r2, r0, r1, lsl r6
		prcs = strlen (m) +1;
    25e8:	11500001 	cmpne	r0, r1
    25ec:	24000026 	strcs	r0, [r0], #-38	; 0xffffffda
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    25f0:	01000026 	tsteq	r0, r6, lsr #32
    25f4:	26245700 	strtcs	r5, [r4], -r0, lsl #14
    25f8:	262b0000 	strtcs	r0, [fp], -r0
		umwait (st);
    25fc:	00010000 	andeq	r0, r1, r0
    2600:	00262b50 	eoreq	r2, r6, r0, asr fp
		prcs =  m [1] + 3;
    2604:	00263200 	eoreq	r3, r6, r0, lsl #4
	if (*m)
    2608:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	if (runstrand (__outserial, buf) == 0) {
    2614:	00002638 	andeq	r2, r0, r8, lsr r6
    2618:	00002646 	andeq	r2, r0, r6, asr #12
		ufree (buf);
    261c:	a2500001 	subsge	r0, r0, #1
    2620:	b0000026 	andlt	r0, r0, r6, lsr #32
		memcpy (buf, m, prcs);
    2624:	01000026 	tsteq	r0, r6, lsr #32
    2628:	00005000 	andeq	r5, r0, r0
    262c:	00000000 	andeq	r0, r0, r0
}
    2630:	26380000 	ldrtcs	r0, [r8], -r0
    2634:	264d0000 	strbcs	r0, [sp], -r0
int ser_in (word st, char *buf, int len) {
    2638:	00010000 	andeq	r0, r1, r0
    263c:	00264d51 	eoreq	r4, r6, r1, asr sp
	if (len == 0)
    2640:	00266c00 	eoreq	r6, r6, r0, lsl #24
	if (__inpline == NULL) {
    2644:	57000100 	strpl	r0, [r0, -r0, lsl #2]
		if ((prcs = running (__inserial)) == 0) {
    2648:	0000266c 	andeq	r2, r0, ip, ror #12
    264c:	00002674 	andeq	r2, r0, r4, ror r6
			prcs = runthread (__inserial);
    2650:	74510001 	ldrbvc	r0, [r1], #-1
    2654:	9a000026 	bls	26f4 <ser_outf+0x44>
			if (prcs == 0) {
    2658:	01000026 	tsteq	r0, r6, lsr #32
				npwait (st);
    265c:	269a5700 	ldrcs	r5, [sl], r0, lsl #14
		release;
    2660:	269d0000 	ldrcs	r0, [sp], r0
		join (prcs, st);
    2664:	00010000 	andeq	r0, r1, r0
    2668:	00269d51 	eoreq	r9, r6, r1, asr sp
	if (*__inpline == NULL) // bin cmd
    266c:	0026a200 	eoreq	sl, r6, r0, lsl #4
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2670:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	if (prcs >= len)
    2674:	000026a2 	andeq	r2, r0, r2, lsr #13
		prcs = len-1;
    2678:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
	memcpy (buf, __inpline, prcs);
    267c:	00510001 	subseq	r0, r1, r1
    2680:	00000000 	andeq	r0, r0, r0
    2684:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	ufree (__inpline);
    2688:	4d000026 	stcmi	0, cr0, [r0, #-152]	; 0xffffff68
	__inpline = NULL;
    268c:	01000026 	tsteq	r0, r6, lsr #32
	if (*buf) // if it's NULL, it's a bin cmd
    2690:	264d5200 	strbcs	r5, [sp], -r0, lsl #4
		buf [prcs] = '\0';
    2694:	266c0000 	strbtcs	r0, [ip], -r0
}
    2698:	00010000 	andeq	r0, r1, r0
		prcs = strlen (__inpline);
    269c:	00266c55 	eoreq	r6, r6, r5, asr ip
    26a0:	00267400 	eoreq	r7, r6, r0, lsl #8
		return 0;
    26a4:	52000100 	andpl	r0, r0, #0, 2
    26a8:	00002674 	andeq	r2, r0, r4, ror r6
    26ac:	0000269a 	muleq	r0, sl, r6
int ser_outf (word st, const char *m, ...) {
    26b0:	9a550001 	bls	15426bc <__ccfg+0x1522714>
    26b4:	9d000026 	stcls	0, cr0, [r0, #-152]	; 0xffffff68
	if ((prcs = running (__outserial)) != 0) {
    26b8:	01000026 	tsteq	r0, r6, lsr #32
    26bc:	269d5200 	ldrcs	r5, [sp], r0, lsl #4
		join (prcs, st);
    26c0:	26a20000 	strtcs	r0, [r2], r0
    26c4:	00010000 	andeq	r0, r1, r0
		release;
    26c8:	0026a255 	eoreq	sl, r6, r5, asr r2
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26cc:	0026b000 	eoreq	fp, r6, r0
    26d0:	52000100 	andpl	r0, r0, #0, 2
	...
		umwait (st);
    26dc:	0000264e 	andeq	r2, r0, lr, asr #12
	if (runstrand (__outserial, buf) == 0) {
    26e0:	00002654 	andeq	r2, r0, r4, asr r6
    26e4:	54500001 	ldrbpl	r0, [r0], #-1
    26e8:	57000026 	strpl	r0, [r0, -r6, lsr #32]
		ufree (buf);
    26ec:	01000026 	tsteq	r0, r6, lsr #32
		npwait (st);
    26f0:	26585100 	ldrbcs	r5, [r8], -r0, lsl #2
}
    26f4:	265c0000 	ldrbcs	r0, [ip], -r0
    26f8:	00010000 	andeq	r0, r1, r0
    26fc:	00266450 	eoreq	r6, r6, r0, asr r4
    2700:	00266900 	eoreq	r6, r6, r0, lsl #18
int ser_inf (word st, const char *fmt, ...) {
    2704:	50000100 	andpl	r0, r0, r0, lsl #2
    2708:	00002674 	andeq	r2, r0, r4, ror r6
	if (fmt == NULL)
    270c:	00002696 	muleq	r0, r6, r6
	if (__inpline == NULL) {
    2710:	a0540001 	subsge	r0, r4, r1
		if ((prcs = running (__inserial)) == 0) {
    2714:	a2000026 	andge	r0, r0, #38	; 0x26
    2718:	01000026 	tsteq	r0, r6, lsr #32
			prcs = runthread (__inserial);
    271c:	00005000 	andeq	r5, r0, r0
    2720:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    2724:	26b00000 	ldrtcs	r0, [r0], r0
				npwait (st);
    2728:	26b80000 	ldrtcs	r0, [r8], r0
		release;
    272c:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    2730:	00000050 	andeq	r0, r0, r0, asr r0
    2734:	00000000 	andeq	r0, r0, r0
	va_start (ap, fmt);
    2738:	0026bc00 	eoreq	fp, r6, r0, lsl #24
	prcs = vscan (__inpline, fmt, ap);
    273c:	0026c500 	eoreq	ip, r6, r0, lsl #10
    2740:	50000100 	andpl	r0, r0, r0, lsl #2
	ufree (__inpline);
    2744:	000026c5 	andeq	r2, r0, r5, asr #13
	__inpline = NULL;
    2748:	000026ca 	andeq	r2, r0, sl, asr #13
}
    274c:	ca560001 	bgt	1582758 <__ccfg+0x15627b0>
    2750:	d3000026 	movwle	r0, #38	; 0x26
    2754:	01000026 	tsteq	r0, r6, lsr #32
		return 0;
    2758:	26d35000 	ldrbcs	r5, [r3], r0
    275c:	26fa0000 	ldrbtcs	r0, [sl], r0
    2760:	00010000 	andeq	r0, r1, r0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2764:	0026fa56 	eoreq	pc, r6, r6, asr sl	; <UNPREDICTABLE>
    2768:	00270400 	eoreq	r0, r7, r0, lsl #8
    276c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    2778:	000026d4 	ldrdeq	r2, [r0], -r4
    277c:	000026d8 	ldrdeq	r2, [r0], -r8
    2780:	d8500001 	ldmdale	r0, {r0}^
static int option (int opt, address val) {
    2784:	e0000026 	and	r0, r0, r6, lsr #32
    2788:	01000026 	tsteq	r0, r6, lsr #32
    278c:	26e05500 	strbtcs	r5, [r0], r0, lsl #10
    2790:	26e40000 	strbtcs	r0, [r4], r0
    2794:	00010000 	andeq	r0, r1, r0
    2798:	0026e450 	eoreq	lr, r6, r0, asr r4
    279c:	0026fa00 	eoreq	pc, r6, r0, lsl #20
    27a0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    27ac:	00002704 	andeq	r2, r0, r4, lsl #14
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    27b0:	00002712 	andeq	r2, r0, r2, lsl r7
    27b4:	58500001 	ldmdapl	r0, {r0}^
			goto RVal;
    27b8:	64000027 	strvs	r0, [r0], #-39	; 0xffffffd9
			_BIS (dstate, DSTATE_RXON);
    27bc:	01000027 	tsteq	r0, r7, lsr #32
    27c0:	00005000 	andeq	r5, r0, r0
	int ret = 0;
    27c4:	00000000 	andeq	r0, r0, r0
			p_trigger (drvprcs, qevent);
    27c8:	271a0000 	ldrcs	r0, [sl, -r0]
    27cc:	27200000 	strcs	r0, [r0, -r0]!
    27d0:	00010000 	andeq	r0, r1, r0
    27d4:	00272050 	eoreq	r2, r7, r0, asr r0
    27d8:	00272300 	eoreq	r2, r7, r0, lsl #6
    27dc:	51000100 	mrspl	r0, (UNDEF: 16)
    27e0:	00002724 	andeq	r2, r0, r4, lsr #14
    27e4:	00002728 	andeq	r2, r0, r8, lsr #14
    27e8:	30500001 	subscc	r0, r0, r1
    27ec:	35000027 	strcc	r0, [r0, #-39]	; 0xffffffd9
}
    27f0:	01000027 	tsteq	r0, r7, lsr #32
			_BIC (dstate, DSTATE_RXON);
    27f4:	27425000 	strbcs	r5, [r2, -r0]
    27f8:	27440000 	strbcs	r0, [r4, -r0]
			statid = (val == NULL) ? 0 : *val;
    27fc:	00010000 	andeq	r0, r1, r0
    2800:	00274450 	eoreq	r4, r7, r0, asr r4
	int ret = 0;
    2804:	00274c00 	eoreq	r4, r7, r0, lsl #24
			ret = (int) statid;
    2808:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			ret = rbuffl + 2;
    2814:	00002ec4 	andeq	r2, r0, r4, asr #29
    2818:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
			if (val != NULL) {
    281c:	d2500001 	subsle	r0, r0, #1
				memcpy (val, &rxstat,
    2820:	d800002e 	stmdale	r0, {r1, r2, r3, r5}
    2824:	0100002e 	tsteq	r0, lr, lsr #32
				memset (&rxstat, 0, 
    2828:	2ed85600 	cdpcs	6, 13, cr5, cr8, cr0, {0}
    282c:	2ee20000 	cdpcs	0, 14, cr0, cr2, cr0, {0}
			if (val == NULL)
    2830:	00010000 	andeq	r0, r1, r0
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2834:	002ee250 	eoreq	lr, lr, r0, asr r2
    2838:	002ee600 	eoreq	lr, lr, r0, lsl #12
				utimer_set (bckf_timer, *val);
    283c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2840:	00002ee6 	andeq	r2, r0, r6, ror #29
    2844:	00002ef6 	strdeq	r2, [r0], -r6
			for (ret = 0; ret < 8; ret++)
    2848:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
				if (RF_cmdPropRadioDivSetup.txPower
    284c:	ee00002e 	cdp	0, 0, cr0, cr0, cr14, {1}
					== patable [ret])
    2850:	0100002f 	tsteq	r0, pc, lsr #32
				if (RF_cmdPropRadioDivSetup.txPower
    2854:	00005600 	andeq	r5, r0, r0, lsl #12
			for (ret = 0; ret < 8; ret++)
    2858:	00000000 	andeq	r0, r0, r0
    285c:	2ec40000 	cdpcs	0, 12, cr0, cr4, cr0, {0}
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2860:	2ed40000 	cdpcs	0, 13, cr0, cr4, cr0, {0}
    2864:	00010000 	andeq	r0, r1, r0
    2868:	002ed851 	eoreq	sp, lr, r1, asr r8
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    286c:	002ee400 	eoreq	lr, lr, r0, lsl #8
    2870:	51000100 	mrspl	r0, (UNDEF: 16)
			_BIS (dstate, DSTATE_IRST);
    2874:	00002ee6 	andeq	r2, r0, r6, ror #29
    2878:	00002ef6 	strdeq	r2, [r0], -r6
    287c:	00510001 	subseq	r0, r1, r1
			ret = (int) channel;
    2880:	00000000 	andeq	r0, r0, r0
			goto RVal;
    2884:	2c000000 	stccs	0, cr0, [r0], {-0}
				(*val > 7) ? 7 : *val;
    2888:	4000002f 	andmi	r0, r0, pc, lsr #32
    288c:	0100002f 	tsteq	r0, pc, lsr #32
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2890:	2f405500 	svccs	0x00405500
    2894:	2f460000 	svccs	0x00460000
			plugch ();
    2898:	00020000 	andeq	r0, r2, r0
			_BIS (dstate, DSTATE_IRST);
    289c:	00000070 	andeq	r0, r0, r0, ror r0
    28a0:	00000000 	andeq	r0, r0, r0
			ret = (int) vrate;
    28a4:	2ef60000 	cdpcs	0, 15, cr0, cr6, cr0, {0}
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28a8:	2eff0000 	cdpcs	0, 15, cr0, cr15, cr0, {0}
    28ac:	00010000 	andeq	r0, r1, r0
    28b0:	002eff53 	eoreq	pc, lr, r3, asr pc	; <UNPREDICTABLE>
    28b4:	002f6200 	eoreq	r6, pc, r0, lsl #4
    28b8:	5b000100 	blpl	2cc0 <cc1350_driver+0x5c>
    28bc:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    28c0:	00002f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    28c4:	005b0001 	subseq	r0, fp, r1
	...
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28d0:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    28d4:	0100002f 	tsteq	r0, pc, lsr #32
			syserror (EREQPAR, "cc13 op");
    28d8:	2f0a5000 	svccs	0x000a5000
    28dc:	2f300000 	svccs	0x00300000
    28e0:	00010000 	andeq	r0, r1, r0
    28e4:	002f3050 	eoreq	r3, pc, r0, asr r0	; <UNPREDICTABLE>
    28e8:	002f3300 	eoreq	r3, pc, r0, lsl #6
    28ec:	53000100 	movwpl	r0, #256	; 0x100
    28f0:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    28f4:	00002f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    28f8:	00500001 	subseq	r0, r0, r1
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	84000000 	strhi	r0, [r0], #-0
    2904:	b2000027 	andlt	r0, r0, #39	; 0x27
    2908:	01000027 	tsteq	r0, r7, lsr #32
    290c:	27ba5000 	ldrcs	r5, [sl, r0]!
    2910:	27c40000 	strbcs	r0, [r4, r0]
static void issue_cmd (lword cmd) {
    2914:	00010000 	andeq	r0, r1, r0
    2918:	0027f250 	eoreq	pc, r7, r0, asr r2	; <UNPREDICTABLE>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    291c:	00280400 	eoreq	r0, r8, r0, lsl #8
    2920:	50000100 	andpl	r0, r0, r0, lsl #2
    2924:	00002808 	andeq	r2, r0, r8, lsl #16
		if (res != 0x86)
    2928:	0000280c 	andeq	r2, r0, ip, lsl #16
			syserror (EHARDWARE, "hang ic0");
    292c:	14500001 	ldrbne	r0, [r0], #-1
    2930:	18000028 	stmdane	r0, {r3, r5}
		if (cnt-- == 0) {
    2934:	01000028 	tsteq	r0, r8, lsr #32
			diag ("HUP %lx %lx", cmd, res);
    2938:	281a5000 	ldmdacs	sl, {ip, lr}
    293c:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
			syserror (EHARDWARE, "hang ic0");
    2940:	00010000 	andeq	r0, r1, r0
		udelay (1);
    2944:	00282850 	eoreq	r2, r8, r0, asr r8
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2948:	00282a00 	eoreq	r2, r8, r0, lsl #20
}
    294c:	50000100 	andpl	r0, r0, r0, lsl #2
    2950:	00002830 	andeq	r2, r0, r0, lsr r8
    2954:	00002835 	andeq	r2, r0, r5, lsr r8
    2958:	44500001 	ldrbmi	r0, [r0], #-1
static void rx_de () {
    295c:	4a000028 	bmi	2a04 <wait_cmd.constprop.0+0x28>
	if ((dstate & DSTATE_RXAC) == 0)
    2960:	01000028 	tsteq	r0, r8, lsr #32
    2964:	28605000 	stmdacs	r0!, {ip, lr}^
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2968:	28640000 	stmdacs	r4!, {}^	; <UNPREDICTABLE>
	_BIC (dstate, DSTATE_RXAC);
    296c:	00010000 	andeq	r0, r1, r0
    2970:	00288050 	eoreq	r8, r8, r0, asr r0
}
    2974:	00288400 	eoreq	r8, r8, r0, lsl #8
    2978:	50000100 	andpl	r0, r0, r0, lsl #2
    297c:	00002886 	andeq	r2, r0, r6, lsl #17
static void rf_off () {
    2980:	000028d8 	ldrdeq	r2, [r0], -r8
	if ((dstate & DSTATE_RFON) == 0)
    2984:	00500001 	subseq	r0, r0, r1
    2988:	00000000 	andeq	r0, r0, r0
	IntDisable (INT_RFC_CPE_0);
    298c:	84000000 	strhi	r0, [r0], #-0
    2990:	c4000027 	strgt	r0, [r0], #-39	; 0xffffffd9
    2994:	01000027 	tsteq	r0, r7, lsr #32
	RFCAdi3VcoLdoVoltageMode (false);
    2998:	27f25100 	ldrbcs	r5, [r2, r0, lsl #2]!
	RFCSynthPowerDown ();
    299c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    29a0:	00010000 	andeq	r0, r1, r0
    29a4:	00280851 	eoreq	r0, r8, r1, asr r8
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    29a8:	00280c00 	eoreq	r0, r8, r0, lsl #24
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29ac:	51000100 	mrspl	r0, (UNDEF: 16)
	OSCHF_SwitchToRcOscTurnOffXosc ();
    29b0:	0000280c 	andeq	r2, r0, ip, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    29b4:	00002814 	andeq	r2, r0, r4, lsl r8
    29b8:	14540001 	ldrbne	r0, [r4], #-1
    29bc:	22000028 	andcs	r0, r0, #40	; 0x28
	_BIC (dstate, DSTATE_RFON);
    29c0:	01000028 	tsteq	r0, r8, lsr #32
    29c4:	28225100 	stmdacs	r2!, {r8, ip, lr}
}
    29c8:	28280000 	stmdacs	r8!, {}	; <UNPREDICTABLE>
    29cc:	00010000 	andeq	r0, r1, r0
    29d0:	00282854 	eoreq	r2, r8, r4, asr r8
    29d4:	00282d00 	eoreq	r2, r8, r0, lsl #26
    29d8:	51000100 	mrspl	r0, (UNDEF: 16)
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    29dc:	0000282d 	andeq	r2, r0, sp, lsr #16
    29e0:	00002830 	andeq	r2, r0, r0, lsr r8
    29e4:	30540001 	subscc	r0, r4, r1
		if (cmd->status == tstat)
    29e8:	35000028 	strcc	r0, [r0, #-40]	; 0xffffffd8
		if (timeout-- == 0) {
    29ec:	01000028 	tsteq	r0, r8, lsr #32
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    29f0:	28355100 	ldmdacs	r5!, {r8, ip, lr}
    29f4:	28440000 	stmdacs	r4, {}^	; <UNPREDICTABLE>
    29f8:	00010000 	andeq	r0, r1, r0
			syserror (EHARDWARE, "rt2");
    29fc:	00284454 	eoreq	r4, r8, r4, asr r4
    2a00:	00284600 	eoreq	r4, r8, r0, lsl #12
		udelay (1);
    2a04:	51000100 	mrspl	r0, (UNDEF: 16)
		if (cmd->status == tstat)
    2a08:	00002846 	andeq	r2, r0, r6, asr #16
}
    2a0c:	00002848 	andeq	r2, r0, r8, asr #16
    2a10:	48540001 	ldmdami	r4, {r0}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a14:	50000028 	andpl	r0, r0, r8, lsr #32
    2a18:	01000028 	tsteq	r0, r8, lsr #32
static void rf_on () {
    2a1c:	28505100 	ldmdacs	r0, {r8, ip, lr}^
    2a20:	28600000 	stmdacs	r0!, {}^	; <UNPREDICTABLE>
	OSCHF_TurnOnXosc();
    2a24:	00010000 	andeq	r0, r1, r0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a28:	00286054 	eoreq	r6, r8, r4, asr r0
    2a2c:	0028da00 	eoreq	sp, r8, r0, lsl #20
    2a30:	51000100 	mrspl	r0, (UNDEF: 16)
    2a34:	000028da 	ldrdeq	r2, [r0], -sl
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a38:	00002914 	andeq	r2, r0, r4, lsl r9
    2a3c:	00540001 	subseq	r0, r4, r1
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a40:	00000000 	andeq	r0, r0, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2a44:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
	issue_cmd (
    2a48:	ba000027 	blt	2aec <rf_on.part.0+0xd8>
    2a4c:	01000027 	tsteq	r0, r7, lsr #32
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2a50:	27c65000 	strbcs	r5, [r6, r0]
    2a54:	27f00000 	ldrbcs	r0, [r0, r0]!
    2a58:	00010000 	andeq	r0, r1, r0
   pPatchTab[80] = 0;
    2a5c:	00280c50 	eoreq	r0, r8, r0, asr ip
   } while (--nIterations);
    2a60:	00281400 	eoreq	r1, r8, r0, lsl #8
   pPatchTab[53] = 2;
    2a64:	50000100 	andpl	r0, r0, r0, lsl #2
    2a68:	00002850 	andeq	r2, r0, r0, asr r8
   pPatchTab[55] = 3;
    2a6c:	00002860 	andeq	r2, r0, r0, ror #16
   pPatchTab[110] = 4;
    2a70:	6a500001 	bvs	1402a7c <__ccfg+0x13e2ad4>
   pPatchTab[107] = 5;
    2a74:	80000028 	andhi	r0, r0, r8, lsr #32
   pPatchTab[65] = 6;
    2a78:	01000028 	tsteq	r0, r8, lsr #32
    2a7c:	28845000 	stmcs	r4, {ip, lr}
   pPatchTab[57] = 1;
    2a80:	28860000 	stmcs	r6, {}	; <UNPREDICTABLE>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a84:	00010000 	andeq	r0, r1, r0
   const uint32_t *pS = patchGenfskRfe;
    2a88:	00000050 	andeq	r0, r0, r0, asr r0
      t2 = *pS++;
    2a8c:	00000000 	andeq	r0, r0, r0
      t4 = *pS++;
    2a90:	0027da00 	eoreq	sp, r7, r0, lsl #20
      t6 = *pS++;
    2a94:	0027e400 	eoreq	lr, r7, r0, lsl #8
      t8 = *pS++;
    2a98:	53000100 	movwpl	r0, #256	; 0x100
	...
      *pD++ = t3;
    2aa4:	00002c64 	andeq	r2, r0, r4, ror #24
      *pD++ = t5;
    2aa8:	00002c78 	andeq	r2, r0, r8, ror ip
      *pD++ = t7;
    2aac:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
   } while (--nIterations);
    2ab0:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    2ab4:	0100002e 	tsteq	r0, lr, lsr #32
      *pD++ = t8;
    2ab8:	2e145000 	cdpcs	0, 1, cr5, cr4, cr0, {0}
   } while (--nIterations);
    2abc:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2ac0:	00010000 	andeq	r0, r1, r0
   *pD++ = t2;
    2ac4:	00000050 	andeq	r0, r0, r0, asr r0
   *pD++ = t3;
    2ac8:	00000000 	andeq	r0, r0, r0
   *pD++ = t4;
    2acc:	002ce400 	eoreq	lr, ip, r0, lsl #8
   *pD++ = t5;
    2ad0:	002cec00 	eoreq	lr, ip, r0, lsl #24
    2ad4:	52000100 	andpl	r0, r0, #0, 2
	RFCAdi3VcoLdoVoltageMode (true);
    2ad8:	00002cec 	andeq	r2, r0, ip, ror #25
    2adc:	00002cef 	andeq	r2, r0, pc, ror #25
       	RFCRfTrimSet (&rfTrim);
    2ae0:	00720002 	rsbseq	r0, r2, r2
	...
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2aec:	00002e8a 	andeq	r2, r0, sl, lsl #29
    2af0:	00002e94 	muleq	r0, r4, lr
	issue_cmd ((lword)&cmd_srt);
    2af4:	00530001 	subseq	r0, r3, r1
    2af8:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&RF_cmdFs);
    2afc:	d2000000 	andle	r0, r0, #0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b00:	1600002b 	strne	r0, [r0], -fp, lsr #32
    2b04:	0100002c 	tsteq	r0, ip, lsr #32
    2b08:	2c165400 	cfldrscs	mvf5, [r6], {-0}
	IntEnable (INT_RFC_CPE_0);
    2b0c:	2c1e0000 	ldccs	0, cr0, [lr], {-0}
	_BIC (dstate, DSTATE_IRST);
    2b10:	00020000 	andeq	r0, r2, r0
    2b14:	2c1e0074 	ldccs	0, cr0, [lr], {116}	; 0x74
    2b18:	2c280000 	stccs	0, cr0, [r8], #-0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b1c:	00010000 	andeq	r0, r1, r0
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b20:	002c2854 	eoreq	r2, ip, r4, asr r8
	IntEnable (INT_RFC_CPE_0);
    2b24:	002c2d00 	eoreq	r2, ip, r0, lsl #26
    2b28:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
}
    2b2c:	002c3e00 	eoreq	r3, ip, r0, lsl #28
	IntEnable (INT_RFC_CPE_0);
    2b30:	002c4200 	eoreq	r4, ip, r0, lsl #4
    2b34:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
	...
    2b40:	002bfa00 	eoreq	pc, fp, r0, lsl #20
    2b44:	002c1100 	eoreq	r1, ip, r0, lsl #2
    2b48:	52000100 	andpl	r0, r0, #0, 2
	...
    2b54:	00002bd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2b58:	00002c32 	andeq	r2, r0, r2, lsr ip
    2b5c:	3e550001 	cdpcc	0, 5, cr0, cr5, cr1, {0}
    2b60:	4200002c 	andmi	r0, r0, #44	; 0x2c
    2b64:	0100002c 	tsteq	r0, ip, lsr #32
    2b68:	00005500 	andeq	r5, r0, r0, lsl #10
    2b6c:	00000000 	andeq	r0, r0, r0
    2b70:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    2b74:	291a0000 	ldmdbcs	sl, {}	; <UNPREDICTABLE>
    2b78:	00010000 	andeq	r0, r1, r0
    2b7c:	00291a50 	eoreq	r1, r9, r0, asr sl
    2b80:	00294c00 	eoreq	r4, r9, r0, lsl #24
    2b84:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2b90:	00002922 	andeq	r2, r0, r2, lsr #18
static void rx_int_enable () {
    2b94:	0000292c 	andeq	r2, r0, ip, lsr #18
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b98:	32520001 	subscc	r0, r2, #1
    2b9c:	3d000029 	stccc	0, cr0, [r0, #-164]	; 0xffffff5c
    2ba0:	01000029 	tsteq	r0, r9, lsr #32
    2ba4:	29425200 	stmdbcs	r2, {r9, ip, lr}^
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2ba8:	29470000 	stmdbcs	r7, {}^	; <UNPREDICTABLE>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2bac:	00010000 	andeq	r0, r1, r0
    2bb0:	00294a52 	eoreq	r4, r9, r2, asr sl
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2bb4:	00295c00 	eoreq	r5, r9, r0, lsl #24
    2bb8:	52000100 	andpl	r0, r0, #0, 2
	...
    2bc4:	0000292a 	andeq	r2, r0, sl, lsr #18
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bc8:	0000292c 	andeq	r2, r0, ip, lsr #18
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bcc:	00540001 	subseq	r0, r4, r1
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bd0:	00000000 	andeq	r0, r0, r0
		if (db->status == DATA_ENTRY_FINISHED) {
    2bd4:	dc000000 	stcle	0, cr0, [r0], {-0}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bd8:	e6000029 	str	r0, [r0], -r9, lsr #32
    2bdc:	01000029 	tsteq	r0, r9, lsr #32
			nr++;
    2be0:	29e65000 	stmibcs	r6!, {ip, lr}^
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2be4:	2a0c0000 	bcs	302bec <__ccfg+0x2e2c44>
    2be8:	00010000 	andeq	r0, r1, r0
    2bec:	00000054 	andeq	r0, r0, r4, asr r0
    2bf0:	00000000 	andeq	r0, r0, r0
				__dp [pl + 1] = __dp [pl] - 128;
    2bf4:	0029dc00 	eoreq	sp, r9, r0, lsl #24
				pl = __dp [1] + 2;
    2bf8:	0029e600 	eoreq	lr, r9, r0, lsl #12
				__dp [pl + 1] = __dp [pl] - 128;
    2bfc:	51000100 	mrspl	r0, (UNDEF: 16)
    2c00:	000029e6 	andeq	r2, r0, r6, ror #19
				__dp [pl] = 0;
    2c04:	00002a0c 	andeq	r2, r0, ip, lsl #20
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c08:	00550001 	subseq	r0, r5, r1
    2c0c:	00000000 	andeq	r0, r0, r0
    2c10:	b6000000 	strlt	r0, [r0], -r0
			db->status = DATA_ENTRY_PENDING;
    2c14:	be00002a 	cdplt	0, 0, cr0, cr0, cr10, {1}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c18:	0100002a 	tsteq	r0, sl, lsr #32
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c1c:	00005200 	andeq	r5, r0, r0, lsl #4
				diag ("BAD RX");
    2c20:	00000000 	andeq	r0, r0, r0
    2c24:	2a8a0000 	bcs	fe282c2c <_estack+0xde27dc2c>
	if (nr) {
    2c28:	2ab60000 	bcs	fed82c30 <_estack+0xded7dc30>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c2c:	00010000 	andeq	r0, r1, r0
}
    2c30:	002aba53 	eoreq	fp, sl, r3, asr sl
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c34:	002abe00 	eoreq	fp, sl, r0, lsl #28
    2c38:	53000100 	movwpl	r0, #256	; 0x100
	...
}
    2c44:	00002a90 	muleq	r0, r0, sl
    2c48:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
    2c4c:	005e0001 	subseq	r0, lr, r1
    2c50:	00000000 	andeq	r0, r0, r0
    2c54:	94000000 	strls	r0, [r0], #-0
    2c58:	be00002a 	cdplt	0, 0, cr0, cr0, cr10, {1}
    2c5c:	0100002a 	tsteq	r0, sl, lsr #32
    2c60:	00005700 	andeq	r5, r0, r0, lsl #14
thread (cc1350_driver)
    2c64:	00000000 	andeq	r0, r0, r0
    2c68:	2a980000 	bcs	fe602c70 <_estack+0xde5fdc70>
    2c6c:	2ad40000 	bcs	ff502c74 <_estack+0xdf4fdc74>
    2c70:	00010000 	andeq	r0, r1, r0
    2c74:	00000055 	andeq	r0, r0, r5, asr r0
		if (dstate & DSTATE_IRST) {
    2c78:	00000000 	andeq	r0, r0, r0
    2c7c:	002a9800 	eoreq	r9, sl, r0, lsl #16
    2c80:	002ab000 	eoreq	fp, sl, r0
			rf_off ();
    2c84:	50000100 	andpl	r0, r0, r0, lsl #2
			_BIC (dstate,
    2c88:	00002ab0 			; <UNDEFINED> instruction: 0x00002ab0
    2c8c:	00002aba 			; <UNDEFINED> instruction: 0x00002aba
		if (dstate & DSTATE_RXAC) {
    2c90:	18730002 	ldmdane	r3!, {r1}^
    2c94:	00002aba 			; <UNDEFINED> instruction: 0x00002aba
			if ((dstate & DSTATE_RXON) == 0)
    2c98:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
				rx_de ();
    2c9c:	18700002 	ldmdane	r0!, {r1}^
	...
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2ca8:	00002ab6 			; <UNDEFINED> instruction: 0x00002ab6
    2cac:	00002ad4 	ldrdeq	r2, [r0], -r4
    2cb0:	00540001 	subseq	r0, r4, r1
    2cb4:	00000000 	andeq	r0, r0, r0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cb8:	8c000000 	stchi	0, cr0, [r0], {-0}
    2cbc:	8e000030 	mcrhi	0, 0, r0, cr0, cr0, {1}
    2cc0:	01000030 	tsteq	r0, r0, lsr r0
    2cc4:	00005000 	andeq	r5, r0, r0
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	30880000 	addcc	r0, r8, r0
    2cd0:	308a0000 	addcc	r0, sl, r0
    2cd4:	00010000 	andeq	r0, r1, r0
		} else if (dstate & DSTATE_RXON) {
    2cd8:	00000050 	andeq	r0, r0, r0, asr r0
	if (dstate & DSTATE_RFON)
    2cdc:	00000000 	andeq	r0, r0, r0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2ce0:	00308000 	eorseq	r8, r0, r0
		re->status = DATA_ENTRY_PENDING;
    2ce4:	00308200 	eorseq	r8, r0, r0, lsl #4
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2ce8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	_BIS (dstate, DSTATE_RXAC);
    2cf4:	0000305c 	andeq	r3, r0, ip, asr r0
    2cf8:	00003066 	andeq	r3, r0, r6, rrx
    2cfc:	68500001 	ldmdavs	r0, {r0}^
	if (dstate & DSTATE_RXAC)
    2d00:	76000030 			; <UNDEFINED> instruction: 0x76000030
    2d04:	01000030 	tsteq	r0, r0, lsr r0
				if (statid != 0xffff)
    2d08:	00005000 	andeq	r5, r0, r0
    2d0c:	00000000 	andeq	r0, r0, r0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d10:	305c0000 	subscc	r0, ip, r0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d14:	305e0000 	subscc	r0, lr, r0
		if (paylen == 0) {
    2d18:	00010000 	andeq	r0, r1, r0
			wait (qevent, DR_LOOP);
    2d1c:	00000051 	andeq	r0, r0, r1, asr r0
    2d20:	00000000 	andeq	r0, r0, r0
			if (dstate & DSTATE_RXAC) {
    2d24:	00305c00 	eorseq	r5, r0, r0, lsl #24
    2d28:	00306000 	eorseq	r6, r0, r0
				rx_int_enable ();
    2d2c:	52000100 	andpl	r0, r0, #0, 2
	...
				delay (offdelay, DR_GOOF);
    2d38:	0000305c 	andeq	r3, r0, ip, asr r0
    2d3c:	00003074 	andeq	r3, r0, r4, ror r0
    2d40:	00530001 	subseq	r0, r3, r1
		if (bckf_timer) {
    2d44:	00000000 	andeq	r0, r0, r0
			wait (qevent, DR_LOOP);
    2d48:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2d4c:	44000030 	strmi	r0, [r0], #-48	; 0xffffffd0
    2d50:	01000030 	tsteq	r0, r0, lsr r0
			delay (bckf_timer, DR_LOOP);
    2d54:	30445000 	subcc	r5, r4, r0
    2d58:	305c0000 	subscc	r0, ip, r0
			if (dstate & DSTATE_RXAC)
    2d5c:	00010000 	andeq	r0, r1, r0
    2d60:	00000053 	andeq	r0, r0, r3, asr r0
	if (dstate & DSTATE_RFON)
    2d64:	00000000 	andeq	r0, r0, r0
    2d68:	00309000 	eorseq	r9, r0, r0
		rx_de ();
    2d6c:	00309e00 	eorseq	r9, r0, r0, lsl #28
		RF_cmdPropTx . status = 0;
    2d70:	50000100 	andpl	r0, r0, r0, lsl #2
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d74:	0000309e 	muleq	r0, lr, r0
    2d78:	000030d8 	ldrdeq	r3, [r0], -r8
    2d7c:	00550001 	subseq	r0, r5, r1
		issue_cmd ((lword)&cmd_cs);
    2d80:	00000000 	andeq	r0, r0, r0
		if (dstate & DSTATE_IRST)
    2d84:	90000000 	andls	r0, r0, r0
    2d88:	a1000030 	tstge	r0, r0, lsr r0
    2d8c:	01000030 	tsteq	r0, r0, lsr r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d90:	30a15100 	adccc	r5, r1, r0, lsl #2
    2d94:	30d80000 	sbcscc	r0, r8, r0
			delay (1, DR_XMIT);
    2d98:	00010000 	andeq	r0, r1, r0
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d9c:	00000056 	andeq	r0, r0, r6, asr r0
    2da0:	00000000 	andeq	r0, r0, r0
    2da4:	00309000 	eorseq	r9, r0, r0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2da8:	0030a100 	eorseq	sl, r0, r0, lsl #2
    2dac:	52000100 	andpl	r0, r0, #0, 2
				RF_cmdPropTx . status = 0;
    2db0:	000030b0 	strheq	r3, [r0], -r0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2db4:	000030b6 	strheq	r3, [r0], -r6
				issue_cmd ((lword)&RF_cmdPropTx);
    2db8:	00520001 	subseq	r0, r2, r1
				proceed (DR_XMIT);
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
			txtries++;
    2dc4:	ef000030 	svc	0x00000030
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2dc8:	01000030 	tsteq	r0, r0, lsr r0
    2dcc:	30f05000 	rscscc	r5, r0, r0
    2dd0:	30fc0000 	rscscc	r0, ip, r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dd4:	00010000 	andeq	r0, r1, r0
		goto DR_LOOP__;
    2dd8:	00313450 	eorseq	r3, r1, r0, asr r4
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ddc:	00314800 	eorseq	r4, r1, r0, lsl #16
		paylen = 0;
    2de0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dec:	000030e0 	andeq	r3, r0, r0, ror #1
    2df0:	000030ec 	andeq	r3, r0, ip, ror #1
    2df4:	ec550001 	mrrc	0, 0, r0, r5, cr1
    2df8:	ef000030 	svc	0x00000030
    2dfc:	02000030 	andeq	r0, r0, #48	; 0x30
		    tcvphy_top (physid) == NULL)
    2e00:	f0087300 			; <UNDEFINED> instruction: 0xf0087300
    2e04:	48000030 	stmdami	r0, {r4, r5}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e08:	01000031 	tsteq	r0, r1, lsr r0
    2e0c:	00005500 	andeq	r5, r0, r0, lsl #10
			rf_off ();
    2e10:	00000000 	andeq	r0, r0, r0
endthread
    2e14:	31160000 	tstcc	r6, r0
    2e18:	31280000 			; <UNDEFINED> instruction: 0x31280000
    2e1c:	00010000 	andeq	r0, r1, r0
    2e20:	00000050 	andeq	r0, r0, r0, asr r0
    2e24:	00000000 	andeq	r0, r0, r0
    2e28:	00314800 	eorseq	r4, r1, r0, lsl #16
    2e2c:	00316400 	eorseq	r6, r1, r0, lsl #8
    2e30:	50000100 	andpl	r0, r0, r0, lsl #2
    2e34:	0000324a 	andeq	r3, r0, sl, asr #4
    2e38:	00003253 	andeq	r3, r0, r3, asr r2
    2e3c:	00500001 	subseq	r0, r0, r1
    2e40:	00000000 	andeq	r0, r0, r0
    2e44:	50000000 	andpl	r0, r0, r0
    2e48:	72000031 	andvc	r0, r0, #49	; 0x31
    2e4c:	01000031 	tsteq	r0, r1, lsr r0
    2e50:	31725400 	cmncc	r2, r0, lsl #8
void RFCCPE0IntHandler (void) {
    2e54:	31790000 	cmncc	r9, r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e58:	00010000 	andeq	r0, r1, r0
		_BIS (dstate, DSTATE_IRST);
    2e5c:	00317950 	eorseq	r7, r1, r0, asr r9
    2e60:	00317e00 	eorseq	r7, r1, r0, lsl #28
    2e64:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e68:	0000317e 	andeq	r3, r0, lr, ror r1
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e6c:	00003188 	andeq	r3, r0, r8, lsl #3
    2e70:	88500001 	ldmdahi	r0, {r0}^
	p_trigger (drvprcs, qevent);
    2e74:	46000031 			; <UNDEFINED> instruction: 0x46000031
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e78:	01000032 	tsteq	r0, r2, lsr r0
    2e7c:	324a5400 	subcc	r5, sl, #0, 8
    2e80:	32500000 	subscc	r0, r0, #0
    2e84:	00010000 	andeq	r0, r1, r0
    2e88:	00325054 	eorseq	r5, r2, r4, asr r0
    2e8c:	00325300 	eorseq	r5, r2, r0, lsl #6
    2e90:	72000200 	andvc	r0, r0, #0, 4
    2e94:	00000008 	andeq	r0, r0, r8
    2e98:	00000000 	andeq	r0, r0, r0
    2e9c:	00322a00 	eorseq	r2, r2, r0, lsl #20
	RISE_N_SHINE;
    2ea0:	00322c00 	eorseq	r2, r2, r0, lsl #24
    2ea4:	50000100 	andpl	r0, r0, r0, lsl #2
    2ea8:	0000322c 	andeq	r3, r0, ip, lsr #4
}
    2eac:	00003246 	andeq	r3, r0, r6, asr #4
    2eb0:	00560001 	subseq	r0, r6, r1
    2eb4:	00000000 	andeq	r0, r0, r0
    2eb8:	b4000000 	strlt	r0, [r0], #-0
    2ebc:	cb000034 	blgt	2f94 <phys_cc1350+0xd0>
    2ec0:	01000034 	tsteq	r0, r4, lsr r0
void phys_cc1350 (int phy, int mbs) {
    2ec4:	34cb5000 	strbcc	r5, [fp], #0
	if (rbuffl != 0)
    2ec8:	34d20000 	ldrbcc	r0, [r2], #0
    2ecc:	00010000 	andeq	r0, r1, r0
		syserror (ETOOMANY, "cc13");
    2ed0:	0034d254 	eorseq	sp, r4, r4, asr r2
		syserror (EREQPAR, "cc13 mb");
    2ed4:	0034d400 	eorseq	sp, r4, r0, lsl #8
	if (mbs == 0)
    2ed8:	50000100 	andpl	r0, r0, r0, lsl #2
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2edc:	000034d4 	ldrdeq	r3, [r0], -r4
		syserror (EREQPAR, "cc13 mb");
    2ee0:	000034e4 	andeq	r3, r0, r4, ror #9
    2ee4:	e4540001 	ldrb	r0, [r4], #-1
	i = 0;
    2ee8:	f3000034 	vqadd.u8	d0, d0, d20
	rbuffl = (byte) mbs;
    2eec:	01000034 	tsteq	r0, r4, lsr r0
		db->config.type = 0;	// General (data in structure)
    2ef0:	34f35000 	ldrbtcc	r5, [r3], #0
	rbuffl = (byte) mbs;
    2ef4:	35040000 	strcc	r0, [r4, #-0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2ef8:	00010000 	andeq	r0, r1, r0
    2efc:	00000054 	andeq	r0, r0, r4, asr r0
		if (db == NULL)
    2f00:	00000000 	andeq	r0, r0, r0
			syserror (EMALLOC, "cc13");
    2f04:	0034b400 	eorseq	fp, r4, r0, lsl #8
    2f08:	0034c800 	eorseq	ip, r4, r0, lsl #16
    2f0c:	51000100 	mrspl	r0, (UNDEF: 16)
		db->status = DATA_ENTRY_PENDING;
    2f10:	000034c8 	andeq	r3, r0, r8, asr #9
		if (i)
    2f14:	000034cb 	andeq	r3, r0, fp, asr #9
			da->pNextEntry = (byte*) db;
    2f18:	cb520001 	blgt	1482f24 <__ccfg+0x1462f7c>
		db->length = rbuffl + 2;
    2f1c:	d2000034 	andle	r0, r0, #52	; 0x34
    2f20:	01000034 	tsteq	r0, r4, lsr r0
		db->config.type = 0;	// General (data in structure)
    2f24:	34d25600 	ldrbcc	r5, [r2], #1536	; 0x600
		db->length = rbuffl + 2;
    2f28:	34d70000 	ldrbcc	r0, [r7], #0
	db->pNextEntry = (byte*) re;
    2f2c:	00010000 	andeq	r0, r1, r0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f30:	0034d751 	eorseq	sp, r4, r1, asr r7
    2f34:	00350400 	eorseq	r0, r5, r0, lsl #8
	if (rbuffs == NULL)
    2f38:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	rbuffs->pLastEntry = NULL;
    2f44:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f48:	000034bc 			; <UNDEFINED> instruction: 0x000034bc
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2f4c:	c0520001 	subsgt	r0, r2, r1
    2f50:	c4000034 	strgt	r0, [r0], #-52	; 0xffffffcc
    2f54:	01000034 	tsteq	r0, r4, lsr r0
	rbuffl -= 2;
    2f58:	34cc5200 	strbcc	r5, [ip], #512	; 0x200
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f5c:	34d20000 	ldrbcc	r0, [r2], #0
	rbuffl -= 2;
    2f60:	00010000 	andeq	r0, r1, r0
	physid = phy;
    2f64:	0034de57 	eorseq	sp, r4, r7, asr lr
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f68:	00350400 	eorseq	r0, r5, r0, lsl #8
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f6c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    2f78:	000034de 	ldrdeq	r3, [r0], -lr
	utimer_add (&bckf_timer);
    2f7c:	00003500 	andeq	r3, r0, r0, lsl #10
	drvprcs = runthread (cc1350_driver);
    2f80:	00550001 	subseq	r0, r5, r1
    2f84:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    2f88:	01000035 	tsteq	r0, r5, lsr r0
	if (drvprcs == 0)
    2f8c:	00005800 	andeq	r5, r0, r0, lsl #16
		syserror (ERESOURCE, "cc13");
    2f90:	00000000 	andeq	r0, r0, r0
    2f94:	34f80000 	ldrbtcc	r0, [r8], #0
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f98:	34fc0000 	ldrbtcc	r0, [ip], #0
    2f9c:	00010000 	andeq	r0, r1, r0
    2fa0:	00000050 	andeq	r0, r0, r0, asr r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fa4:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2fa8:	00328400 	eorseq	r8, r2, r0, lsl #8
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fac:	00329e00 	eorseq	r9, r2, r0, lsl #28
    2fb0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2fbc:	00003284 	andeq	r3, r0, r4, lsl #5
    2fc0:	0000329e 	muleq	r0, lr, r2
    2fc4:	00510001 	subseq	r0, r1, r1
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	84000000 	strhi	r0, [r0], #-0
	plugch ();
    2fd0:	9e000032 	mcrls	0, 0, r0, cr0, cr2, {1}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd4:	01000032 	tsteq	r0, r2, lsr r0
    2fd8:	32ae5200 	adccc	r5, lr, #0, 4
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fdc:	32da0000 	sbcscc	r0, sl, #0
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2fe0:	00010000 	andeq	r0, r1, r0
    2fe4:	0032e855 	eorseq	lr, r2, r5, asr r8
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2fe8:	0034a600 	eorseq	sl, r4, r0, lsl #12
}
    2fec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2ff8:	00003284 	andeq	r3, r0, r4, lsl #5
    2ffc:	00003288 	andeq	r3, r0, r8, lsl #5
    3000:	8a530001 	bhi	14c300c <__ccfg+0x14a3064>
    3004:	8c000032 	stchi	0, cr0, [r0], {50}	; 0x32
    3008:	03000032 	movweq	r0, #50	; 0x32
    300c:	04935300 	ldreq	r5, [r3], #768	; 0x300
    3010:	0000328c 	andeq	r3, r0, ip, lsl #5
    3014:	000032d6 	ldrdeq	r3, [r0], -r6
    3018:	93540003 	cmpls	r4, #3
    301c:	0032d604 	eorseq	sp, r2, r4, lsl #12
    3020:	00332a00 	eorseq	r2, r3, r0, lsl #20
    3024:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    3028:	332a0493 			; <UNDEFINED> instruction: 0x332a0493
    302c:	33360000 	teqcc	r6, #0
    3030:	00030000 	andeq	r0, r3, r0
    3034:	3e049354 	mcrcc	3, 0, r9, cr4, cr4, {2}
    3038:	60000033 	andvs	r0, r0, r3, lsr r0
    303c:	03000033 	movweq	r0, #51	; 0x33
    3040:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3044:	00003364 	andeq	r3, r0, r4, ror #6
    3048:	000033de 	ldrdeq	r3, [r0], -lr
    304c:	93540003 	cmpls	r4, #3
    3050:	0033e404 	eorseq	lr, r3, r4, lsl #8
    3054:	0033f800 	eorseq	pc, r3, r0, lsl #16
    3058:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    305c:	343e0493 	ldrtcc	r0, [lr], #-1171	; 0xfffffb6d
    3060:	344a0000 	strbcc	r0, [sl], #-0
    3064:	00030000 	andeq	r0, r3, r0
    3068:	6c049354 	stcvs	3, cr9, [r4], {84}	; 0x54
    306c:	7e000034 	mcrvc	0, 0, r0, cr0, cr4, {1}
    3070:	03000034 	movweq	r0, #52	; 0x34
    3074:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3078:	00003482 	andeq	r3, r0, r2, lsl #9
    307c:	0000348a 	andeq	r3, r0, sl, lsl #9
    3080:	93540003 	cmpls	r4, #3
    3084:	00348e04 	eorseq	r8, r4, r4, lsl #28
    3088:	0034b400 	eorseq	fp, r4, r0, lsl #8
    308c:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    3090:	00000493 	muleq	r0, r3, r4
    3094:	00000000 	andeq	r0, r0, r0
    3098:	32a20000 	adccc	r0, r2, #0
    309c:	32ac0000 	adccc	r0, ip, #0
    30a0:	00010000 	andeq	r0, r1, r0
    30a4:	0032ac59 	eorseq	sl, r2, r9, asr ip
    30a8:	0032ae00 	eorseq	sl, r2, r0, lsl #28
    30ac:	72000200 	andvc	r0, r0, #0, 4
    30b0:	0032ae00 	eorseq	sl, r2, r0, lsl #28
    30b4:	0032d200 	eorseq	sp, r2, r0, lsl #4
    30b8:	59000100 	stmdbpl	r0, {r8}
    30bc:	000032da 	ldrdeq	r3, [r0], -sl
    30c0:	000032e8 	andeq	r3, r0, r8, ror #5
    30c4:	e8590001 	ldmda	r9, {r0}^
    30c8:	20000032 	andcs	r0, r0, r2, lsr r0
    30cc:	01000033 	tsteq	r0, r3, lsr r0
    30d0:	332a5800 			; <UNDEFINED> instruction: 0x332a5800
    30d4:	333a0000 	teqcc	sl, #0
strand (__outserial, const char*)
    30d8:	00010000 	andeq	r0, r1, r0
    30dc:	00333a58 	eorseq	r3, r3, r8, asr sl
    30e0:	00334200 	eorseq	r4, r3, r0, lsl #4
    30e4:	72000200 	andvc	r0, r0, #0, 4
endstrand
    30e8:	00336001 	eorseq	r6, r3, r1
    30ec:	00338a00 	eorseq	r8, r3, r0, lsl #20
	ptr = data;
    30f0:	58000100 	stmdapl	r0, {r8}
    30f4:	0000338e 	andeq	r3, r0, lr, lsl #7
	if (*ptr)
    30f8:	00003392 	muleq	r0, r2, r3
		len = strlen (ptr);
    30fc:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3100:	a6000033 			; <UNDEFINED> instruction: 0xa6000033
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3104:	01000033 	tsteq	r0, r3, lsr r0
    3108:	33c65000 	biccc	r5, r6, #0
    310c:	33c80000 	biccc	r0, r8, #0
    3110:	00010000 	andeq	r0, r1, r0
    3114:	0033ce50 	eorseq	ip, r3, r0, asr lr
	len -= quant;
    3118:	0033d000 	eorseq	sp, r3, r0
    311c:	58000100 	stmdapl	r0, {r8}
    3120:	000033d0 	ldrdeq	r3, [r0], -r0
	if (len == 0) {
    3124:	000033f3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
		ufree (data);
    3128:	02530001 	subseq	r0, r3, #1
		finish;
    312c:	06000034 			; <UNDEFINED> instruction: 0x06000034
    3130:	01000034 	tsteq	r0, r4, lsr r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3134:	34105900 	ldrcc	r5, [r0], #-2304	; 0xfffff700
    3138:	34300000 	ldrtcc	r0, [r0], #-0
    313c:	00010000 	andeq	r0, r1, r0
    3140:	00343659 	eorseq	r3, r4, r9, asr r6
    3144:	00343800 	eorseq	r3, r4, r0, lsl #16
strand (__inserial, address)
    3148:	59000100 	stmdbpl	r0, {r8}
    314c:	0000343e 	andeq	r3, r0, lr, lsr r4
    3150:	0000344c 	andeq	r3, r0, ip, asr #8
    3154:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
    3158:	75000034 	strvc	r0, [r0, #-52]	; 0xffffffcc
	if (__inpline != NULL)
    315c:	01000034 	tsteq	r0, r4, lsr r0
    3160:	347e5300 	ldrbtcc	r5, [lr], #-768	; 0xfffffd00
		finish;
    3164:	34920000 	ldrcc	r0, [r2], #0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3168:	00010000 	andeq	r0, r1, r0
    316c:	0034a658 	eorseq	sl, r4, r8, asr r6
    3170:	0034b400 	eorseq	fp, r4, r0, lsl #8
    3174:	59000100 	stmdbpl	r0, {r8}
	...
	savedata (data);
    3180:	00003342 	andeq	r3, r0, r2, asr #6
	len = MAX_LINE_LENGTH;
    3184:	00003360 	andeq	r3, r0, r0, ror #6
	io (IM_READ, __cport, READ, ptr, 1);
    3188:	00580001 	subseq	r0, r8, r1
    318c:	00000000 	andeq	r0, r0, r0
    3190:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3194:	80000033 	andhi	r0, r0, r3, lsr r0
	if (ptr == (char*) data) { // new line
    3198:	01000033 	tsteq	r0, r3, lsr r0
    319c:	33845900 	orrcc	r5, r4, #0, 18
		if (*ptr == '\0') { // bin cmd
    31a0:	33b20000 			; <UNDEFINED> instruction: 0x33b20000
			proceed (IM_BIN);
    31a4:	00010000 	andeq	r0, r1, r0
    31a8:	0033ba59 	eorseq	fp, r3, r9, asr sl
		if (*ptr < 0x20)
    31ac:	0033ce00 	eorseq	ip, r3, r0, lsl #28
    31b0:	59000100 	stmdbpl	r0, {r8}
	...
	if (*ptr == '\n' || *ptr == '\r') {
    31bc:	0000338a 	andeq	r3, r0, sl, lsl #7
    31c0:	000033bc 			; <UNDEFINED> instruction: 0x000033bc
    31c4:	bc580001 	mrrclt	0, 0, r0, r8, cr1
		*ptr = '\0';
    31c8:	c8000033 	stmdagt	r0, {r0, r1, r4, r5}
		__inpline = (char*)data;
    31cc:	01000033 	tsteq	r0, r3, lsr r0
		finish;
    31d0:	33c85300 	biccc	r5, r8, #0, 6
	if (len) {
    31d4:	33ce0000 	biccc	r0, lr, #0
		ptr++;
    31d8:	00010000 	andeq	r0, r1, r0
    31dc:	00000058 	andeq	r0, r0, r8, asr r0
		len--;
    31e0:	00000000 	andeq	r0, r0, r0
	proceed (IM_READ);
    31e4:	0033f800 	eorseq	pc, r3, r0, lsl #16
	io (IM_BIN, __cport, READ, ptr, 1);
    31e8:	00343e00 	eorseq	r3, r4, r0, lsl #28
    31ec:	5a000100 	bpl	35f4 <vscan+0xf0>
	...
    31f8:	000033fe 	strdeq	r3, [r0], -lr
	len -= 2;
    31fc:	00003428 	andeq	r3, r0, r8, lsr #8
	if (len > *ptr + 1) // 1 for 0x04
    3200:	28580001 	ldmdacs	r8, {r0}^
    3204:	38000034 	stmdacc	r0, {r2, r4, r5}
		len = *ptr + 1;
    3208:	01000034 	tsteq	r0, r4, lsr r0
    320c:	34385300 	ldrtcc	r5, [r8], #-768	; 0xfffffd00
	ptr++;
    3210:	343e0000 	ldrtcc	r0, [lr], #-0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3214:	00010000 	andeq	r0, r1, r0
    3218:	00000058 	andeq	r0, r0, r8, asr r0
    321c:	00000000 	andeq	r0, r0, r0
    3220:	00344c00 	eorseq	r4, r4, r0, lsl #24
    3224:	00346c00 	eorseq	r6, r4, r0, lsl #24
    3228:	58000100 	stmdapl	r0, {r8}
	...
		finish;
    3234:	0000347e 	andeq	r3, r0, lr, ror r4
	ptr += quant;
    3238:	00003482 	andeq	r3, r0, r2, lsl #9
    323c:	00740002 	rsbseq	r0, r4, r2
endstrand
    3240:	00003482 	andeq	r3, r0, r2, lsl #9
    3244:	0000348a 	andeq	r3, r0, sl, lsl #9
	proceed (IM_BINL);
    3248:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
endstrand
    3254:	00003496 	muleq	r0, r6, r4
    3258:	000034a4 	andeq	r3, r0, r4, lsr #9
    325c:	00580001 	subseq	r0, r8, r1
    3260:	00000000 	andeq	r0, r0, r0
		if (res && (d < n))
    3264:	04000000 	streq	r0, [r0], #-0
    3268:	20000035 	andcs	r0, r0, r5, lsr r0
    326c:	01000035 	tsteq	r0, r5, lsr r0
    3270:	355e5000 	ldrbcc	r5, [lr, #-0]
			res [d] = (char) c;
    3274:	35700000 	ldrbcc	r0, [r0, #-0]!
		d++;
    3278:	00010000 	andeq	r0, r1, r0
    327c:	00357053 	eorseq	r7, r5, r3, asr r0
    3280:	00358400 	eorseq	r8, r5, r0, lsl #8
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3284:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3288:	00003586 	andeq	r3, r0, r6, lsl #11
    328c:	000035a2 	andeq	r3, r0, r2, lsr #11
				enci (10000);
    3290:	b4560001 	ldrblt	r0, [r6], #-1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3294:	c0000035 	andgt	r0, r0, r5, lsr r0
    3298:	01000035 	tsteq	r0, r5, lsr r0
	d = 0;
    329c:	35c05600 	strbcc	r5, [r0, #1536]	; 0x600
		c = *fm++;
    32a0:	35c60000 	strbcc	r0, [r6]
		if (c == '\\') {
    32a4:	00010000 	andeq	r0, r1, r0
			if ((c = *fm++) == '\0') {
    32a8:	0035cc53 	eorseq	ip, r5, r3, asr ip
    32ac:	0035d000 	eorseq	sp, r5, r0
				outc ('\\');
    32b0:	53000100 	movwpl	r0, #256	; 0x100
			if ((c = *fm++) == '\0') {
    32b4:	000035d0 	ldrdeq	r3, [r0], -r0
				outc ('\\');
    32b8:	000035e0 	andeq	r3, r0, r0, ror #11
    32bc:	e05e0001 	subs	r0, lr, r1
			outc (c);
    32c0:	f6000035 			; <UNDEFINED> instruction: 0xf6000035
    32c4:	01000035 	tsteq	r0, r5, lsr r0
			if (c == '\0')
    32c8:	35f65300 	ldrbcc	r5, [r6, #768]!	; 0x300
    32cc:	35fe0000 	ldrbcc	r0, [lr, #0]!
			outc (c);
    32d0:	00010000 	andeq	r0, r1, r0
				outc (val);
    32d4:	0036045e 	eorseq	r0, r6, lr, asr r4
				val = (word) va_arg (ap, aword);
    32d8:	00362000 	eorseq	r2, r6, r0
		if (c == '%') {
    32dc:	53000100 	movwpl	r0, #256	; 0x100
    32e0:	00003620 	andeq	r3, r0, r0, lsr #12
			c = *fm++;
    32e4:	00003626 	andeq	r3, r0, r6, lsr #12
			switch (c) {
    32e8:	265e0001 	ldrbcs	r0, [lr], -r1
    32ec:	28000036 	stmdacs	r0, {r1, r2, r4, r5}
    32f0:	01000036 	tsteq	r0, r6, lsr r0
    32f4:	36345300 	ldrtcc	r5, [r4], -r0, lsl #6
    32f8:	36360000 	ldrtcc	r0, [r6], -r0
    32fc:	00010000 	andeq	r0, r1, r0
    3300:	0036365e 	eorseq	r3, r6, lr, asr r6
    3304:	00364a00 	eorseq	r4, r6, r0, lsl #20
				outc ('%');
    3308:	53000100 	movwpl	r0, #256	; 0x100
    330c:	0000364a 	andeq	r3, r0, sl, asr #12
				outc (c);
    3310:	0000365a 	andeq	r3, r0, sl, asr r6
    3314:	5a560001 	bpl	1583320 <__ccfg+0x1563378>
    3318:	6e000036 	mcrvs	0, 0, r0, cr0, cr6, {1}
				if (c == '\0')
    331c:	01000036 	tsteq	r0, r6, lsr r0
				return d;
    3320:	367c5300 	ldrbtcc	r5, [ip], -r0, lsl #6
}
    3324:	367e0000 	ldrbtcc	r0, [lr], -r0
    3328:	00010000 	andeq	r0, r1, r0
			switch (c) {
    332c:	00367e56 	eorseq	r7, r6, r6, asr lr
    3330:	00369600 	eorseq	r9, r6, r0, lsl #12
    3334:	53000100 	movwpl	r0, #256	; 0x100
				for (i = 12; ; i -= 4) {
    3338:	00003696 	muleq	r0, r6, r6
				val = (word) va_arg (ap, aword);
    333c:	000036b0 			; <UNDEFINED> instruction: 0x000036b0
						[ (val >> i) & 0xf ]);
    3340:	b6560001 	ldrblt	r0, [r6], -r1
    3344:	d8000036 	stmdale	r0, {r1, r2, r4, r5}
    3348:	01000036 	tsteq	r0, r6, lsr r0
					outc (__pi_hex_enc_table
    334c:	36d85300 	ldrbcc	r5, [r8], r0, lsl #6
    3350:	36ea0000 	strbtcc	r0, [sl], r0
					if (i == 0)
    3354:	00010000 	andeq	r0, r1, r0
    3358:	00371056 	eorseq	r1, r7, r6, asr r0
				for (i = 12; ; i -= 4) {
    335c:	00371400 	eorseq	r1, r7, r0, lsl #8
				val = (word) va_arg (ap, aword);
    3360:	53000100 	movwpl	r0, #256	; 0x100
				if (c == 'd' && (val & 0x8000) != 0) {
    3364:	00003714 	andeq	r3, r0, r4, lsl r7
				val = (word) va_arg (ap, aword);
    3368:	00003724 	andeq	r3, r0, r4, lsr #14
				if (c == 'd' && (val & 0x8000) != 0) {
    336c:	24580001 	ldrbcs	r0, [r8], #-1
    3370:	34000037 	strcc	r0, [r0], #-55	; 0xffffffc9
					outc ('-');
    3374:	01000037 	tsteq	r0, r7, lsr r0
    3378:	37345300 	ldrcc	r5, [r4, -r0, lsl #6]!
					val = (~val) + 1;
    337c:	373e0000 	ldrcc	r0, [lr, -r0]!
    3380:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    3384:	00374458 	eorseq	r4, r7, r8, asr r4
				enci (10000);
    3388:	00376600 	eorseq	r6, r7, r0, lsl #12
    338c:	53000100 	movwpl	r0, #256	; 0x100
    3390:	0000376c 	andeq	r3, r0, ip, ror #14
    3394:	0000377c 	andeq	r3, r0, ip, ror r7
    3398:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
    339c:	96000037 			; <UNDEFINED> instruction: 0x96000037
    33a0:	01000037 	tsteq	r0, r7, lsr r0
    33a4:	379c5600 	ldrcc	r5, [ip, r0, lsl #12]
    33a8:	37bc0000 	ldrcc	r0, [ip, r0]!
    33ac:	00010000 	andeq	r0, r1, r0
    33b0:	0037bc53 	eorseq	fp, r7, r3, asr ip
    33b4:	0037ce00 	eorseq	ip, r7, r0, lsl #28
    33b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    33bc:	000037e2 	andeq	r3, r0, r2, ror #15
    33c0:	000037e6 	andeq	r3, r0, r6, ror #15
    33c4:	e6580001 	ldrb	r0, [r8], -r1
    33c8:	ea000037 	b	34ac <__pi_vfparse+0x228>
    33cc:	01000037 	tsteq	r0, r7, lsr r0
				if (c == 'd' || c == 'u') {
    33d0:	37f45300 	ldrbcc	r5, [r4, r0, lsl #6]!
    33d4:	37f60000 	ldrbcc	r0, [r6, r0]!
					if (c == 'd' &&
    33d8:	00010000 	andeq	r0, r1, r0
					val = va_arg (ap, lword);
    33dc:	0037f658 	eorseq	pc, r7, r8, asr r6	; <UNPREDICTABLE>
					fm++;
    33e0:	00380c00 	eorseq	r0, r8, r0, lsl #24
					if (c == 'd' &&
    33e4:	53000100 	movwpl	r0, #256	; 0x100
    33e8:	0000380c 	andeq	r3, r0, ip, lsl #16
						outc ('-');
    33ec:	0000381c 	andeq	r3, r0, ip, lsl r8
    33f0:	1c560001 	mrrcne	0, 0, r0, r6, cr1
						val = (~val) + 1;
    33f4:	32000038 	andcc	r0, r0, #56	; 0x38
				enci (10000);
    33f8:	01000038 	tsteq	r0, r8, lsr r0
					enci (1000000000UL);
    33fc:	383c5300 	ldmdacc	ip!, {r8, r9, ip, lr}
    3400:	383e0000 	ldmdacc	lr!, {}	; <UNPREDICTABLE>
    3404:	00010000 	andeq	r0, r1, r0
    3408:	00383e56 	eorseq	r3, r8, r6, asr lr
    340c:	00384600 	eorseq	r4, r8, r0, lsl #12
    3410:	53000100 	movwpl	r0, #256	; 0x100
    3414:	0000384a 	andeq	r3, r0, sl, asr #16
    3418:	0000385a 	andeq	r3, r0, sl, asr r8
    341c:	5a530001 	bpl	14c3428 <__ccfg+0x14a3480>
    3420:	68000038 	stmdavs	r0, {r3, r4, r5}
    3424:	01000038 	tsteq	r0, r8, lsr r0
    3428:	38685600 	stmdacc	r8!, {r9, sl, ip, lr}^
    342c:	386e0000 	stmdacc	lr!, {}^	; <UNPREDICTABLE>
    3430:	00010000 	andeq	r0, r1, r0
    3434:	00386e58 	eorseq	r6, r8, r8, asr lr
    3438:	00387a00 	eorseq	r7, r8, r0, lsl #20
    343c:	56000100 	strpl	r0, [r0], -r0, lsl #2
				} else if (c == 'x') {
    3440:	0000387a 	andeq	r3, r0, sl, ror r8
					for (i = 28; ; i -= 4) {
    3444:	00003882 	andeq	r3, r0, r2, lsl #17
					val = va_arg (ap, lword);
    3448:	82500001 	subshi	r0, r0, #1
							[ (val >> i) & 0xf ]);
    344c:	94000038 	strls	r0, [r0], #-56	; 0xffffffc8
    3450:	01000038 	tsteq	r0, r8, lsr r0
						outc (__pi_hex_enc_table
    3454:	00005300 	andeq	r5, r0, r0, lsl #6
    3458:	00000000 	andeq	r0, r0, r0
    345c:	35040000 	strcc	r0, [r4, #-0]
						if (i == 0)
    3460:	35220000 	strcc	r0, [r2, #-0]!
    3464:	00010000 	andeq	r0, r1, r0
					for (i = 28; ; i -= 4) {
    3468:	00352251 	eorseq	r2, r5, r1, asr r2
					outc ('%');
    346c:	00352800 	eorseq	r2, r5, r0, lsl #16
    3470:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3474:	00003528 	andeq	r3, r0, r8, lsr #10
					outc ('l');
    3478:	00003546 	andeq	r3, r0, r6, asr #10
    347c:	4c510001 	mrrcmi	0, 0, r0, r1, cr1
				val = (word) va_arg (ap, aword);
    3480:	94000035 	strls	r0, [r0], #-53	; 0xffffffcb
				outc (val);
    3484:	01000038 	tsteq	r0, r8, lsr r0
    3488:	00005100 	andeq	r5, r0, r0, lsl #2
				while (*st != '\0') {
    348c:	00000000 	andeq	r0, r0, r0
    3490:	35040000 	strcc	r0, [r4, #-0]
    3494:	35040000 	strcc	r0, [r4, #-0]
    3498:	00010000 	andeq	r0, r1, r0
					outc (*st);
    349c:	00350452 	eorseq	r0, r5, r2, asr r4
    34a0:	00352000 	eorseq	r2, r5, r0
					st++;
    34a4:	52000300 	andpl	r0, r0, #0, 6
		c = *fm++;
    34a8:	35c60493 	strbcc	r0, [r6, #1171]	; 0x493
    34ac:	35fa0000 	ldrbcc	r0, [sl, #0]!
    34b0:	00010000 	andeq	r0, r1, r0
char *vform (char *res, const char *fm, va_list aq) {
    34b4:	00362052 	eorseq	r2, r6, r2, asr r0
    34b8:	00362600 	eorseq	r2, r6, r0, lsl #12
	if (res != NULL) {
    34bc:	52000100 	andpl	r0, r0, #0, 2
		__pi_vfparse (res, MAX_WORD, fm, aq);
    34c0:	00003636 	andeq	r3, r0, r6, lsr r6
    34c4:	00003650 	andeq	r3, r0, r0, asr r6
    34c8:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
}
    34cc:	a6000036 			; <UNDEFINED> instruction: 0xa6000036
    34d0:	01000036 	tsteq	r0, r6, lsr r0
	fml = strlen (fm) + 17;
    34d4:	36f85200 	ldrbtcc	r5, [r8], r0, lsl #4
    34d8:	37380000 	ldrcc	r0, [r8, -r0]!
    34dc:	00010000 	andeq	r0, r1, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    34e0:	00376652 	eorseq	r6, r7, r2, asr r6
    34e4:	00378c00 	eorseq	r8, r7, r0, lsl #24
    34e8:	52000100 	andpl	r0, r0, #0, 2
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    34ec:	000037dc 	ldrdeq	r3, [r0], -ip
    34f0:	000037e6 	andeq	r3, r0, r6, ror #15
    34f4:	f6520001 			; <UNDEFINED> instruction: 0xf6520001
    34f8:	12000037 	andne	r0, r0, #55	; 0x37
		ufree (res);
    34fc:	01000038 	tsteq	r0, r8, lsr r0
		goto Again;
    3500:	383e5200 	ldmdacc	lr!, {r9, ip, lr}
	if (buf == NULL || fmt == NULL)
    3504:	38540000 	ldmdacc	r4, {}^	; <UNPREDICTABLE>
int vscan (const char *buf, const char *fmt, va_list ap) {
    3508:	00010000 	andeq	r0, r1, r0
	if (buf == NULL || fmt == NULL)
    350c:	00385a52 	eorseq	r5, r8, r2, asr sl
    3510:	00386800 	eorseq	r6, r8, r0, lsl #16
    3514:	52000100 	andpl	r0, r0, #0, 2
		    	    case 'u': scanu (lword); break;
    3518:	0000387a 	andeq	r3, r0, sl, ror r8
			while (isspace (*buf)) buf++;
    351c:	00003882 	andeq	r3, r0, r2, lsl #17
    3520:	00520001 	subseq	r0, r2, r1
	while (*fmt != '\0') {
    3524:	00000000 	andeq	r0, r0, r0
		if (*fmt++ != '%')
    3528:	82000000 	andhi	r0, r0, #0
		switch (*fmt++) {
    352c:	84000035 	strhi	r0, [r0], #-53	; 0xffffffcb
    3530:	01000035 	tsteq	r0, r5, lsr r0
    3534:	35fc5400 	ldrbcc	r5, [ip, #1024]!	; 0x400
    3538:	36200000 	strtcc	r0, [r0], -r0
    353c:	00010000 	andeq	r0, r1, r0
    3540:	00362654 	eorseq	r2, r6, r4, asr r6
    3544:	00363600 	eorseq	r3, r6, r0, lsl #12
}
    3548:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		switch (*fmt++) {
    354c:	00003652 	andeq	r3, r0, r2, asr r6
    3550:	0000367e 	andeq	r3, r0, lr, ror r6
    3554:	a8540001 	ldmdage	r4, {r0}^
    3558:	f8000036 			; <UNDEFINED> instruction: 0xf8000036
			while (isspace (*buf)) buf++;
    355c:	01000036 	tsteq	r0, r6, lsr r0
    3560:	373a5400 	ldrcc	r5, [sl, -r0, lsl #8]!
    3564:	37660000 	strbcc	r0, [r6, -r0]!
    3568:	00010000 	andeq	r0, r1, r0
    356c:	00378e54 	eorseq	r8, r7, r4, asr lr
    3570:	0037dc00 	eorseq	sp, r7, r0, lsl #24
			if (*buf == '\0')
    3574:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			if (*buf != ',') {
    3578:	000037e6 	andeq	r3, r0, r6, ror #15
			sap = va_arg (ap, char*);
    357c:	000037f6 	strdeq	r3, [r0], -r6
			nc++;
    3580:	14540001 	ldrbne	r0, [r4], #-1
			if (*buf != ',') {
    3584:	3e000038 	mcrcc	0, 0, r0, cr0, cr8, {1}
				while (!isspace (*buf) && *buf != ',' &&
    3588:	01000038 	tsteq	r0, r8, lsr r0
    358c:	38565400 	ldmdacc	r6, {sl, ip, lr}^
    3590:	385a0000 	ldmdacc	sl, {}^	; <UNPREDICTABLE>
    3594:	00010000 	andeq	r0, r1, r0
    3598:	00388254 	eorseq	r8, r8, r4, asr r2
    359c:	00389400 	eorseq	r9, r8, r0, lsl #8
    35a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			while (isspace (*buf)) buf++;
    35ac:	000035f6 	strdeq	r3, [r0], -r6
    35b0:	00003620 	andeq	r3, r0, r0, lsr #12
    35b4:	26580001 	ldrbcs	r0, [r8], -r1
			if (*buf == ',') buf++;
    35b8:	36000036 			; <UNDEFINED> instruction: 0x36000036
    35bc:	01000036 	tsteq	r0, r6, lsr r0
			*sap = '\0';
    35c0:	00005800 	andeq	r5, r0, r0, lsl #16
			break;
    35c4:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    35c8:	36d80000 	ldrbcc	r0, [r8], r0
    35cc:	36ea0000 	strbtcc	r0, [sl], r0
    35d0:	00010000 	andeq	r0, r1, r0
    35d4:	0036ea59 	eorseq	lr, r6, r9, asr sl
    35d8:	0036f200 	eorseq	pc, r6, r0, lsl #4
    35dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    35e8:	00003734 	andeq	r3, r0, r4, lsr r7
    35ec:	0000375e 	andeq	r3, r0, lr, asr r7
    35f0:	e6500001 	ldrb	r0, [r0], -r1
    35f4:	f6000037 			; <UNDEFINED> instruction: 0xf6000037
    35f8:	01000037 	tsteq	r0, r7, lsr r0
    35fc:	00005000 	andeq	r5, r0, r0
    3600:	00000000 	andeq	r0, r0, r0
    3604:	37bc0000 	ldrcc	r0, [ip, r0]!
    3608:	37ce0000 	strbcc	r0, [lr, r0]
    360c:	00010000 	andeq	r0, r1, r0
    3610:	0037ce59 	eorseq	ip, r7, r9, asr lr
    3614:	0037d600 	eorseq	sp, r7, r0, lsl #12
    3618:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3624:	0000384a 	andeq	r3, r0, sl, asr #16
    3628:	0000385a 	andeq	r3, r0, sl, asr r8
    362c:	00500001 	subseq	r0, r0, r1
    3630:	00000000 	andeq	r0, r0, r0
    3634:	86000000 	strhi	r0, [r0], -r0
		    case 'u': scanu (word); break;
    3638:	a2000035 	andge	r0, r0, #53	; 0x35
    363c:	01000035 	tsteq	r0, r5, lsr r0
    3640:	386c5e00 	stmdacc	ip!, {r9, sl, fp, ip, lr}^
    3644:	386e0000 	stmdacc	lr!, {}^	; <UNPREDICTABLE>
    3648:	00010000 	andeq	r0, r1, r0
    364c:	0000005e 	andeq	r0, r0, lr, asr r0
    3650:	00000000 	andeq	r0, r0, r0
    3654:	00389400 	eorseq	r9, r8, r0, lsl #8
    3658:	00389b00 	eorseq	r9, r8, r0, lsl #22
    365c:	50000100 	andpl	r0, r0, r0, lsl #2
    3660:	0000389b 	muleq	r0, fp, r8
    3664:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
    3668:	b2560001 	subslt	r0, r6, #1
    366c:	b6000038 			; <UNDEFINED> instruction: 0xb6000038
    3670:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    3674:	5001f300 	andpl	pc, r1, r0, lsl #6
    3678:	0038b69f 	mlaseq	r8, pc, r6, fp	; <UNPREDICTABLE>
    367c:	0038b800 	eorseq	fp, r8, r0, lsl #16
		    case 'x': scanx (word); break;
    3680:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3684:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    3688:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    368c:	01f30004 	mvnseq	r0, r4
    3690:	00009f50 	andeq	r9, r0, r0, asr pc
    3694:	00000000 	andeq	r0, r0, r0
    3698:	389e0000 	ldmcc	lr, {}	; <UNPREDICTABLE>
    369c:	38a70000 	stmiacc	r7!, {}	; <UNPREDICTABLE>
    36a0:	00050000 	andeq	r0, r5, r0
    36a4:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    36a8:	0038a79f 	mlaseq	r8, pc, r7, sl	; <UNPREDICTABLE>
    36ac:	0038b200 	eorseq	fp, r8, r0, lsl #4
    36b0:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    36b4:	9f293000 	svcls	0x00293000
    36b8:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
    36bc:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    36c0:	00750005 	rsbseq	r0, r5, r5
    36c4:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    36d4:	01000000 	mrseq	r0, (UNDEF: 0)
    36d8:	00005000 	andeq	r5, r0, r0
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	00010000 	andeq	r0, r1, r0
    36e4:	00000056 	andeq	r0, r0, r6, asr r0
    36e8:	00000000 	andeq	r0, r0, r0
    36ec:	f3000400 	vshl.u8	d0, d0, d0
    36f0:	009f5001 	addseq	r5, pc, r1
    36f4:	00000000 	andeq	r0, r0, r0
			switch (*fmt++) {
    36f8:	01000000 	mrseq	r0, (UNDEF: 0)
    36fc:	00005600 	andeq	r5, r0, r0, lsl #12
    3700:	00000000 	andeq	r0, r0, r0
    3704:	00040000 	andeq	r0, r4, r0
    3708:	9f5001f3 	svcls	0x005001f3
	...
		    	    case 'd': scani (lword); break;
    371c:	00510001 	subseq	r0, r1, r1
    3720:	00000000 	andeq	r0, r0, r0
    3724:	04000000 	streq	r0, [r0], #-0
    3728:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    372c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    373c:	70000500 	andvc	r0, r0, r0, lsl #10
    3740:	9f293000 	svcls	0x00293000
	...
    374c:	00750005 	rsbseq	r0, r5, r5
    3750:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    3754:	00000000 	andeq	r0, r0, r0
    3758:	05000000 	streq	r0, [r0, #-0]
    375c:	30007500 	andcc	r7, r0, r0, lsl #10
    3760:	00009f29 	andeq	r9, r0, r9, lsr #30
    3764:	00000000 	andeq	r0, r0, r0
    3768:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
		    	    case 'x': scanx (lword); break;
    376c:	38d20000 	ldmcc	r2, {}^	; <UNPREDICTABLE>
    3770:	00070000 	andeq	r0, r7, r0
    3774:	243f0070 	ldrtcs	r0, [pc], #-112	; 377c <vscan+0x278>
    3778:	009f263f 	addseq	r2, pc, pc, lsr r6	; <UNPREDICTABLE>
    377c:	00000000 	andeq	r0, r0, r0
    3780:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3784:	d0000038 	andle	r0, r0, r8, lsr r0
    3788:	0d000038 	stceq	0, cr0, [r0, #-224]	; 0xffffff20
    378c:	7a807200 	bvc	fe01ff94 <_estack+0xde01af94>
    3790:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    3794:	341e2648 	ldrcc	r2, [lr], #-1608	; 0xfffff9b8
    3798:	38d09f26 	ldmcc	r0, {r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    379c:	38ec0000 	stmiacc	ip!, {}^	; <UNPREDICTABLE>
    37a0:	000c0000 	andeq	r0, ip, r0
    37a4:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    37a8:	00722648 	rsbseq	r2, r2, r8, asr #12
    37ac:	9f26341e 	svcls	0x0026341e
	...
    37b8:	000038f2 	strdeq	r3, [r0], -r2
    37bc:	000038fc 	strdeq	r3, [r0], -ip
    37c0:	00530001 	subseq	r0, r3, r1
    37c4:	00000000 	andeq	r0, r0, r0
    37c8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    37cc:	00000038 	andeq	r0, r0, r8, lsr r0
    37d0:	01000039 	tsteq	r0, r9, lsr r0
    37d4:	00005000 	andeq	r5, r0, r0
    37d8:	00000000 	andeq	r0, r0, r0
		    	    case 'd': scani (lword); break;
    37dc:	39340000 	ldmdbcc	r4!, {}	; <UNPREDICTABLE>
    37e0:	394c0000 	stmdbcc	ip, {}^	; <UNPREDICTABLE>
    37e4:	00010000 	andeq	r0, r1, r0
    37e8:	00394c50 	eorseq	r4, r9, r0, asr ip
    37ec:	00398600 	eorseq	r8, r9, r0, lsl #12
    37f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    37f4:	00003986 	andeq	r3, r0, r6, lsl #19
		    	    case 'u': scanu (lword); break;
    37f8:	00003990 	muleq	r0, r0, r9
    37fc:	01f30004 	mvnseq	r0, r4
    3800:	00009f50 	andeq	r9, r0, r0, asr pc
    3804:	00000000 	andeq	r0, r0, r0
    3808:	39340000 	ldmdbcc	r4!, {}	; <UNPREDICTABLE>
    380c:	393a0000 	ldmdbcc	sl!, {}	; <UNPREDICTABLE>
    3810:	00010000 	andeq	r0, r1, r0
    3814:	00393a51 	eorseq	r3, r9, r1, asr sl
    3818:	00397200 	eorseq	r7, r9, r0, lsl #4
    381c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3820:	00003972 	andeq	r3, r0, r2, ror r9
    3824:	00003990 	muleq	r0, r0, r9
    3828:	01f30004 	mvnseq	r0, r4
    382c:	00009f51 	andeq	r9, r0, r1, asr pc
    3830:	00000000 	andeq	r0, r0, r0
    3834:	396e0000 	stmdbcc	lr!, {}^	; <UNPREDICTABLE>
    3838:	39820000 	stmibcc	r2, {}	; <UNPREDICTABLE>
    383c:	00010000 	andeq	r0, r1, r0
		    	    case 'x': scanx (lword); break;
    3840:	00000055 	andeq	r0, r0, r5, asr r0
    3844:	00000000 	andeq	r0, r0, r0
			if ((c = *buf++) == '\0')
    3848:	00396e00 	eorseq	r6, r9, r0, lsl #28
    384c:	00397200 	eorseq	r7, r9, r0, lsl #4
			sap = va_arg (ap, char*);
    3850:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			nc++;
    3854:	00003972 	andeq	r3, r0, r2, ror r9
			break;
    3858:	00003982 	andeq	r3, r0, r2, lsl #19
			while (isspace (*buf)) buf++;
    385c:	01f30004 	mvnseq	r0, r4
    3860:	00009f51 	andeq	r9, r0, r1, asr pc
    3864:	00000000 	andeq	r0, r0, r0
						*sap++ = *buf++;
    3868:	39900000 	ldmibcc	r0, {}	; <UNPREDICTABLE>
    386c:	39ae0000 	stmibcc	lr!, {}	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    3870:	00010000 	andeq	r0, r1, r0
    3874:	0039ae50 	eorseq	sl, r9, r0, asr lr
    3878:	0039bc00 	eorseq	fp, r9, r0, lsl #24
		return 0;
    387c:	f3000400 	vshl.u8	d0, d0, d0
    3880:	009f5001 	addseq	r5, pc, r1
	...
		    	    case 'x': scanx (lword); break;
    3890:	01000000 	mrseq	r0, (UNDEF: 0)
    3894:	00005000 	andeq	r5, r0, r0
    3898:	00000000 	andeq	r0, r0, r0
    389c:	00010000 	andeq	r0, r1, r0
    38a0:	00000056 	andeq	r0, r0, r6, asr r0
    38a4:	00000000 	andeq	r0, r0, r0
    38a8:	f3000400 	vshl.u8	d0, d0, d0
    38ac:	009f5001 	addseq	r5, pc, r1
	...
    38bc:	01000000 	mrseq	r0, (UNDEF: 0)
    38c0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    38d0:	00070000 	andeq	r0, r7, r0
    38d4:	00730070 	rsbseq	r0, r3, r0, ror r0
    38d8:	009f191c 	addseq	r1, pc, ip, lsl r9	; <UNPREDICTABLE>
    38dc:	00000000 	andeq	r0, r0, r0
    38e0:	04000000 	streq	r0, [r0], #-0
    38e4:	19007000 	stmdbne	r0, {ip, sp, lr}
    38e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    38f8:	0a000400 	beq	4900 <memcpy+0x98>
    38fc:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    3900:	00000000 	andeq	r0, r0, r0
    3904:	01000000 	mrseq	r0, (UNDEF: 0)
    3908:	00005000 	andeq	r5, r0, r0
    390c:	00000000 	andeq	r0, r0, r0
    3910:	00050000 	andeq	r0, r5, r0
    3914:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    3918:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    391c:	00000000 	andeq	r0, r0, r0
    3920:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    392c:	d00a0004 	andle	r0, sl, r4
    3930:	00009f07 	andeq	r9, r0, r7, lsl #30
    3934:	00000000 	andeq	r0, r0, r0
    3938:	00010000 	andeq	r0, r1, r0
    393c:	00000050 	andeq	r0, r0, r0, asr r0
    3940:	00000000 	andeq	r0, r0, r0
    3944:	003a0e00 	eorseq	r0, sl, r0, lsl #28
    3948:	003a1a00 	eorseq	r1, sl, r0, lsl #20
    394c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3958:	00003a0e 	andeq	r3, r0, lr, lsl #20
    395c:	00003a1a 	andeq	r3, r0, sl, lsl sl
    3960:	00530001 	subseq	r0, r3, r1
	...
    3970:	01000000 	mrseq	r0, (UNDEF: 0)
    3974:	00005000 	andeq	r5, r0, r0
    3978:	00000000 	andeq	r0, r0, r0
    397c:	00030000 	andeq	r0, r3, r0
    3980:	009f1b70 	addseq	r1, pc, r0, ror fp	; <UNPREDICTABLE>
    3984:	00000000 	andeq	r0, r0, r0
    3988:	04000000 	streq	r0, [r0], #-0
    398c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39a0:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
    39a4:	48244800 	stmdami	r4!, {fp, lr}
    39a8:	00009f26 	andeq	r9, r0, r6, lsr #30
	...
    39b8:	00010000 	andeq	r0, r1, r0
    39bc:	00000050 	andeq	r0, r0, r0, asr r0
    39c0:	00000000 	andeq	r0, r0, r0
    39c4:	f3000600 	vmax.u8	d0, d0, d0
    39c8:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    39cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    39e8:	01f3000c 	mvnseq	r0, ip
    39ec:	f31c4b50 	vqrdmlah.s16	q2, q6, q0
    39f0:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    39f4:	00009f1e 	andeq	r9, r0, lr, lsl pc
	...
    3a04:	002c0000 	eoreq	r0, ip, r0
    3a08:	26400071 			; <UNDEFINED> instruction: 0x26400071
    3a0c:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    3a10:	00702648 	rsbseq	r2, r0, r8, asr #12
    3a14:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    3a18:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    3a1c:	00752648 	rsbseq	r2, r5, r8, asr #12
    3a20:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    3a24:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3a28:	00752648 	rsbseq	r2, r5, r8, asr #12
    3a2c:	1e00701e 	mcrne	0, 0, r7, cr0, cr14, {0}
    3a30:	9f222642 	svcls	0x00222642
	...
    3a3c:	00710032 	rsbseq	r0, r1, r2, lsr r0
    3a40:	01f32640 	mvnseq	r2, r0, asr #12
    3a44:	711c4b50 	tstvc	ip, r0, asr fp
    3a48:	48244000 	stmdami	r4!, {lr}
    3a4c:	26331e26 	ldrtcs	r1, [r3], -r6, lsr #28
    3a50:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    3a54:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3a58:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    3a5c:	5001f322 	andpl	pc, r1, r2, lsr #6
    3a60:	00741c4b 	rsbseq	r1, r4, fp, asr #24
    3a64:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3a68:	1e00751e 	mcrne	5, 0, r7, cr0, cr14, {0}
    3a6c:	9f222642 	svcls	0x00222642
	...
    3a80:	00500001 	subseq	r0, r0, r1
    3a84:	00000000 	andeq	r0, r0, r0
    3a88:	04000000 	streq	r0, [r0], #-0
    3a8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3a90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3aa0:	70000b00 	andvc	r0, r0, r0, lsl #22
    3aa4:	1e007000 	cdpne	0, 0, cr7, cr0, cr0, {0}
    3aa8:	00702646 	rsbseq	r2, r0, r6, asr #12
    3aac:	00009f1c 	andeq	r9, r0, ip, lsl pc
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	00010000 	andeq	r0, r1, r0
    3ab8:	00000050 	andeq	r0, r0, r0, asr r0
    3abc:	00000000 	andeq	r0, r0, r0
    3ac0:	f3000e00 	vcge.f32	d0, d0, d0
    3ac4:	01f35001 	mvnseq	r5, r1
    3ac8:	26461e50 			; <UNDEFINED> instruction: 0x26461e50
    3acc:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
    3ad0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ae0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3aec:	380c0005 	stmdacc	ip, {r0, r2}
    3af0:	00400910 	subeq	r0, r0, r0, lsl r9
	...
    3b00:	01000000 	mrseq	r0, (UNDEF: 0)
    3b04:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    3b14:	00060000 	andeq	r0, r6, r0
    3b18:	00760070 	rsbseq	r0, r6, r0, ror r0
    3b1c:	00009f1c 	andeq	r9, r0, ip, lsl pc
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	00010000 	andeq	r0, r1, r0
    3b28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3b38:	70000a00 	andvc	r0, r0, r0, lsl #20
    3b3c:	44fc0800 	ldrbtmi	r0, [ip], #2048	; 0x800
    3b40:	25461a24 	strbcs	r1, [r6, #-2596]	; 0xfffff5dc
    3b44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3b54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b68:	00730009 	rsbseq	r0, r3, r9
    3b6c:	1afc000a 	bne	fff03b9c <_estack+0xdfefeb9c>
    3b70:	009f253a 	addseq	r2, pc, sl, lsr r5	; <UNPREDICTABLE>
	...
    3b80:	0a000000 	beq	3b88 <NOROM_RFCRfTrimRead+0xac>
    3b84:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    3b88:	1a2440fc 	bne	913f80 <__ccfg+0x8f3fd8>
    3b8c:	009f2542 	addseq	r2, pc, r2, asr #10
    3b90:	00000000 	andeq	r0, r0, r0
    3b94:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3b98:	8600003a 			; <UNDEFINED> instruction: 0x8600003a
    3b9c:	0100003a 	tsteq	r0, sl, lsr r0
    3ba0:	3a865000 	bcc	fe197ba8 <_estack+0xde192ba8>
    3ba4:	3a900000 	bcc	fe403bac <_estack+0xde3febac>
    3ba8:	00040000 	andeq	r0, r4, r0
    3bac:	9f5001f3 	svcls	0x005001f3
	...
    3bb8:	00003af2 	strdeq	r3, [r0], -r2
    3bbc:	00003af4 	strdeq	r3, [r0], -r4
    3bc0:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
    3bc4:	f800003a 			; <UNDEFINED> instruction: 0xf800003a
    3bc8:	0100003a 	tsteq	r0, sl, lsr r0
    3bcc:	00005300 	andeq	r5, r0, r0, lsl #6
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	3c2c0000 	stccc	0, cr0, [ip], #-0
    3bd8:	3c620000 	stclcc	0, cr0, [r2], #-0
    3bdc:	00010000 	andeq	r0, r1, r0
    3be0:	003c6250 	eorseq	r6, ip, r0, asr r2
    3be4:	003d4400 	eorseq	r4, sp, r0, lsl #8
    3be8:	f3000400 	vshl.u8	d0, d0, d0
    3bec:	009f5001 	addseq	r5, pc, r1
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	4a000000 	bmi	3bfc <NOROM_RFCRfTrimRead+0x120>
    3bf8:	4e00003c 	mcrmi	0, 0, r0, cr0, cr12, {1}
    3bfc:	0100003c 	tsteq	r0, ip, lsr r0
    3c00:	3c4e5100 	stfcce	f5, [lr], {-0}
    3c04:	3c540000 	mracc	r0, r4, acc0
    3c08:	00020000 	andeq	r0, r2, r0
    3c0c:	3c589f32 	mrrccc	15, 3, r9, r8, cr2
    3c10:	3ce20000 	stclcc	0, cr0, [r2]
    3c14:	00010000 	andeq	r0, r1, r0
    3c18:	003ce251 	eorseq	lr, ip, r1, asr r2
    3c1c:	003ce600 	eorseq	lr, ip, r0, lsl #12
    3c20:	71000300 	mrsvc	r0, LR_irq
    3c24:	3d089f05 	stccc	15, cr9, [r8, #-20]	; 0xffffffec
    3c28:	3d1e0000 	ldccc	0, cr0, [lr, #-0]
    3c2c:	00010000 	andeq	r0, r1, r0
    3c30:	003d1e51 	eorseq	r1, sp, r1, asr lr
    3c34:	003d2000 	eorseq	r2, sp, r0
    3c38:	71000300 	mrsvc	r0, LR_irq
    3c3c:	00009f05 	andeq	r9, r0, r5, lsl #30
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	3cae0000 	stccc	0, cr0, [lr]
    3c48:	3cb40000 	ldccc	0, cr0, [r4]
    3c4c:	00010000 	andeq	r0, r1, r0
    3c50:	003cbc53 	eorseq	fp, ip, r3, asr ip
    3c54:	003cbe00 	eorseq	fp, ip, r0, lsl #28
    3c58:	53000100 	movwpl	r0, #256	; 0x100
    3c5c:	00003cd2 	ldrdeq	r3, [r0], -r2
    3c60:	00003cd4 	ldrdeq	r3, [r0], -r4
    3c64:	dc530001 	mrrcle	0, 0, r0, r3, cr1
    3c68:	e800003c 	stmda	r0, {r2, r3, r4, r5}
    3c6c:	0100003c 	tsteq	r0, ip, lsr r0
    3c70:	3d085300 	stccc	3, cr5, [r8, #-0]
    3c74:	3d140000 	ldccc	0, cr0, [r4, #-0]
    3c78:	00010000 	andeq	r0, r1, r0
    3c7c:	003d1853 	eorseq	r1, sp, r3, asr r8
    3c80:	003d2000 	eorseq	r2, sp, r0
    3c84:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c90:	00003c4c 	andeq	r3, r0, ip, asr #24
    3c94:	00003c4e 	andeq	r3, r0, lr, asr #24
    3c98:	50530001 	subspl	r0, r3, r1
    3c9c:	5400003c 	strpl	r0, [r0], #-60	; 0xffffffc4
    3ca0:	0100003c 	tsteq	r0, ip, lsr r0
    3ca4:	3c5a5300 	mrrccc	3, 0, r5, sl, cr0
    3ca8:	3c620000 	stclcc	0, cr0, [r2], #-0
    3cac:	00010000 	andeq	r0, r1, r0
    3cb0:	003c6253 	eorseq	r6, ip, r3, asr r2
    3cb4:	003c7800 	eorseq	r7, ip, r0, lsl #16
    3cb8:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    3cbc:	3c7c9f6c 	ldclcc	15, cr9, [ip], #-432	; 0xfffffe50
    3cc0:	3c820000 	stccc	0, cr0, [r2], {0}
    3cc4:	00030000 	andeq	r0, r3, r0
    3cc8:	009f6c74 	addseq	r6, pc, r4, ror ip	; <UNPREDICTABLE>
    3ccc:	00000000 	andeq	r0, r0, r0
    3cd0:	72000000 	andvc	r0, r0, #0
    3cd4:	f600003c 			; <UNDEFINED> instruction: 0xf600003c
    3cd8:	0100003c 	tsteq	r0, ip, lsr r0
    3cdc:	3cf65200 	lfmcc	f5, 2, [r6]
    3ce0:	3cfc0000 	ldclcc	0, cr0, [ip]
    3ce4:	00020000 	andeq	r0, r2, r0
    3ce8:	3cfc0070 	ldclcc	0, cr0, [ip], #448	; 0x1c0
    3cec:	3d000000 	stccc	0, cr0, [r0, #-0]
    3cf0:	00010000 	andeq	r0, r1, r0
    3cf4:	003d0052 	eorseq	r0, sp, r2, asr r0
    3cf8:	003d0600 	eorseq	r0, sp, r0, lsl #12
    3cfc:	70000200 	andvc	r0, r0, r0, lsl #4
    3d00:	003d0800 	eorseq	r0, sp, r0, lsl #16
    3d04:	003d1000 	eorseq	r1, sp, r0
    3d08:	52000100 	andpl	r0, r0, #0, 2
    3d0c:	00003d10 	andeq	r3, r0, r0, lsl sp
    3d10:	00003d16 	andeq	r3, r0, r6, lsl sp
    3d14:	00700002 	rsbseq	r0, r0, r2
    3d18:	00003d18 	andeq	r3, r0, r8, lsl sp
    3d1c:	00003d20 	andeq	r3, r0, r0, lsr #26
    3d20:	00520001 	subseq	r0, r2, r1
    3d24:	00000000 	andeq	r0, r0, r0
    3d28:	2c000000 	stccs	0, cr0, [r0], {-0}
    3d2c:	7800003c 	stmdavc	r0, {r2, r3, r4, r5}
    3d30:	0200003c 	andeq	r0, r0, #60	; 0x3c
    3d34:	789f3000 	ldmvc	pc, {ip, sp}	; <UNPREDICTABLE>
    3d38:	7c00003c 	stcvc	0, cr0, [r0], {60}	; 0x3c
    3d3c:	0100003c 	tsteq	r0, ip, lsr r0
    3d40:	3c7c5400 	cfldrdcc	mvd5, [ip], #-0
    3d44:	3c820000 	stccc	0, cr0, [r2], {0}
    3d48:	00020000 	andeq	r0, r2, r0
    3d4c:	3c829f30 	stccc	15, cr9, [r2], {48}	; 0x30
    3d50:	3d200000 	stccc	0, cr0, [r0, #-0]
    3d54:	00010000 	andeq	r0, r1, r0
    3d58:	00000054 	andeq	r0, r0, r4, asr r0
    3d5c:	00000000 	andeq	r0, r0, r0
    3d60:	003d4400 	eorseq	r4, sp, r0, lsl #8
    3d64:	003d4e00 	eorseq	r4, sp, r0, lsl #28
    3d68:	50000100 	andpl	r0, r0, r0, lsl #2
    3d6c:	00003d4e 	andeq	r3, r0, lr, asr #26
    3d70:	00003d60 	andeq	r3, r0, r0, ror #26
    3d74:	70750003 	rsbsvc	r0, r5, r3
    3d78:	003d609f 	mlaseq	sp, pc, r0, r6	; <UNPREDICTABLE>
    3d7c:	003d6400 	eorseq	r6, sp, r0, lsl #8
    3d80:	f3000400 	vshl.u8	d0, d0, d0
    3d84:	009f5001 	addseq	r5, pc, r1
	...
    3d94:	02000000 	andeq	r0, r0, #0
    3d98:	009f3000 	addseq	r3, pc, r0
    3d9c:	00000000 	andeq	r0, r0, r0
    3da0:	02000000 	andeq	r0, r0, #0
    3da4:	009f3100 	addseq	r3, pc, r0, lsl #2
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	02000000 	andeq	r0, r0, #0
    3db0:	009f3200 	addseq	r3, pc, r0, lsl #4
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	02000000 	andeq	r0, r0, #0
    3dbc:	009f3300 	addseq	r3, pc, r0, lsl #6
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	02000000 	andeq	r0, r0, #0
    3dc8:	009f3400 	addseq	r3, pc, r0, lsl #8
    3dcc:	00000000 	andeq	r0, r0, r0
    3dd0:	02000000 	andeq	r0, r0, #0
    3dd4:	009f3500 	addseq	r3, pc, r0, lsl #10
    3dd8:	00000000 	andeq	r0, r0, r0
    3ddc:	02000000 	andeq	r0, r0, #0
    3de0:	009f3600 	addseq	r3, pc, r0, lsl #12
    3de4:	00000000 	andeq	r0, r0, r0
    3de8:	02000000 	andeq	r0, r0, #0
    3dec:	009f3700 	addseq	r3, pc, r0, lsl #14
    3df0:	00000000 	andeq	r0, r0, r0
    3df4:	02000000 	andeq	r0, r0, #0
    3df8:	009f3800 	addseq	r3, pc, r0, lsl #16
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	02000000 	andeq	r0, r0, #0
    3e04:	009f3900 	addseq	r3, pc, r0, lsl #18
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	02000000 	andeq	r0, r0, #0
    3e10:	009f3a00 	addseq	r3, pc, r0, lsl #20
    3e14:	00000000 	andeq	r0, r0, r0
    3e18:	02000000 	andeq	r0, r0, #0
    3e1c:	009f3b00 	addseq	r3, pc, r0, lsl #22
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	02000000 	andeq	r0, r0, #0
    3e28:	009f3c00 	addseq	r3, pc, r0, lsl #24
    3e2c:	00000000 	andeq	r0, r0, r0
    3e30:	80000000 	andhi	r0, r0, r0
    3e34:	be00003d 	mcrlt	0, 0, r0, cr0, cr13, {1}
    3e38:	0100003d 	tsteq	r0, sp, lsr r0
    3e3c:	3dbe5000 	ldccc	0, cr5, [lr]
    3e40:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
    3e44:	00010000 	andeq	r0, r1, r0
    3e48:	003e2055 	eorseq	r2, lr, r5, asr r0
    3e4c:	003e5400 	eorseq	r5, lr, r0, lsl #8
    3e50:	f3000400 	vshl.u8	d0, d0, d0
    3e54:	009f5001 	addseq	r5, pc, r1
    3e58:	00000000 	andeq	r0, r0, r0
    3e5c:	bc000000 	stclt	0, cr0, [r0], {-0}
    3e60:	2000003d 	andcs	r0, r0, sp, lsr r0
    3e64:	0100003e 	tsteq	r0, lr, lsr r0
    3e68:	00005400 	andeq	r5, r0, r0, lsl #8
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	3dd20000 	ldclcc	0, cr0, [r2]
    3e74:	3dd40000 	ldclcc	0, cr0, [r4]
    3e78:	00070000 	andeq	r0, r7, r0
    3e7c:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    3e80:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	e2000000 	and	r0, r0, #0
    3e8c:	fc00003d 	stc2	0, cr0, [r0], {61}	; 0x3d
    3e90:	0100003d 	tsteq	r0, sp, lsr r0
    3e94:	00005300 	andeq	r5, r0, r0, lsl #6
    3e98:	00000000 	andeq	r0, r0, r0
    3e9c:	3de60000 	stclcc	0, cr0, [r6]
    3ea0:	3df20000 	ldclcc	0, cr0, [r2]
    3ea4:	00010000 	andeq	r0, r1, r0
    3ea8:	003df252 	eorseq	pc, sp, r2, asr r2	; <UNPREDICTABLE>
    3eac:	003df600 	eorseq	pc, sp, r0, lsl #12
    3eb0:	71000300 	mrsvc	r0, LR_irq
    3eb4:	3df69f06 	ldclcc	15, cr9, [r6, #24]!
    3eb8:	3dfe0000 	ldclcc	0, cr0, [lr]
    3ebc:	00010000 	andeq	r0, r1, r0
    3ec0:	00000052 	andeq	r0, r0, r2, asr r0
    3ec4:	00000000 	andeq	r0, r0, r0
    3ec8:	003e5a00 	eorseq	r5, lr, r0, lsl #20
    3ecc:	003ed400 	eorseq	sp, lr, r0, lsl #8
    3ed0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3edc:	00003ec0 	andeq	r3, r0, r0, asr #29
    3ee0:	00003eca 	andeq	r3, r0, sl, asr #29
    3ee4:	00530001 	subseq	r0, r3, r1
    3ee8:	00000000 	andeq	r0, r0, r0
    3eec:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3ef0:	1e00003e 	mcrne	0, 0, r0, cr0, cr14, {1}
    3ef4:	0100003f 	tsteq	r0, pc, lsr r0
    3ef8:	3f1e5000 	svccc	0x001e5000
    3efc:	3f740000 	svccc	0x00740000
    3f00:	00040000 	andeq	r0, r4, r0
    3f04:	9f5001f3 	svcls	0x005001f3
	...
    3f10:	00003f20 	andeq	r3, r0, r0, lsr #30
    3f14:	00003f54 	andeq	r3, r0, r4, asr pc
    3f18:	00530001 	subseq	r0, r3, r1
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	24000000 	strcs	r0, [r0], #-0
    3f24:	3200003f 	andcc	r0, r0, #63	; 0x3f
    3f28:	0100003f 	tsteq	r0, pc, lsr r0
    3f2c:	3f325100 	svccc	0x00325100
    3f30:	3f340000 	svccc	0x00340000
    3f34:	00060000 	andeq	r0, r6, r0
    3f38:	00730072 	rsbseq	r0, r3, r2, ror r0
    3f3c:	3f349f1c 	svccc	0x00349f1c
    3f40:	3f3a0000 	svccc	0x003a0000
    3f44:	00010000 	andeq	r0, r1, r0
    3f48:	00000051 	andeq	r0, r0, r1, asr r0
    3f4c:	00000000 	andeq	r0, r0, r0
    3f50:	003f1000 	eorseq	r1, pc, r0
    3f54:	003f2200 	eorseq	r2, pc, r0, lsl #4
    3f58:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f64:	00003f74 	andeq	r3, r0, r4, ror pc
    3f68:	00003f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    3f6c:	97500001 	ldrbls	r0, [r0, -r1]
    3f70:	a200003f 	andge	r0, r0, #63	; 0x3f
    3f74:	0100003f 	tsteq	r0, pc, lsr r0
    3f78:	3fa25400 	svccc	0x00a25400
    3f7c:	3faa0000 	svccc	0x00aa0000
    3f80:	00010000 	andeq	r0, r1, r0
    3f84:	003faa50 	eorseq	sl, pc, r0, asr sl	; <UNPREDICTABLE>
    3f88:	003ff600 	eorseq	pc, pc, r0, lsl #12
    3f8c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3f98:	00003fb0 			; <UNDEFINED> instruction: 0x00003fb0
    3f9c:	00003fb4 			; <UNDEFINED> instruction: 0x00003fb4
    3fa0:	b6530001 	ldrblt	r0, [r3], -r1
    3fa4:	c400003f 	strgt	r0, [r0], #-63	; 0xffffffc1
    3fa8:	0100003f 	tsteq	r0, pc, lsr r0
    3fac:	3fc65300 	svccc	0x00c65300
    3fb0:	3fce0000 	svccc	0x00ce0000
    3fb4:	00010000 	andeq	r0, r1, r0
    3fb8:	00000053 	andeq	r0, r0, r3, asr r0
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	003fb000 	eorseq	fp, pc, r0
    3fc4:	003fe400 	eorseq	lr, pc, r0, lsl #8
    3fc8:	74000500 	strvc	r0, [r0], #-1280	; 0xfffffb00
    3fcc:	9f264c00 	svcls	0x00264c00
    3fd0:	00003fe4 	andeq	r3, r0, r4, ror #31
    3fd4:	00004020 	andeq	r4, r0, r0, lsr #32
    3fd8:	01f30006 	mvnseq	r0, r6
    3fdc:	9f264c50 	svcls	0x00264c50
	...
    3fe8:	00003faa 	andeq	r3, r0, sl, lsr #31
    3fec:	00003fb4 			; <UNDEFINED> instruction: 0x00003fb4
    3ff0:	00530001 	subseq	r0, r3, r1
    3ff4:	00000000 	andeq	r0, r0, r0
    3ff8:	20000000 	andcs	r0, r0, r0
    3ffc:	34000040 	strcc	r0, [r0], #-64	; 0xffffffc0
    4000:	01000040 	tsteq	r0, r0, asr #32
    4004:	40345000 	eorsmi	r5, r4, r0
    4008:	407c0000 	rsbsmi	r0, ip, r0
    400c:	00040000 	andeq	r0, r4, r0
    4010:	9f5001f3 	svcls	0x005001f3
	...
    401c:	00004026 	andeq	r4, r0, r6, lsr #32
    4020:	0000402e 	andeq	r4, r0, lr, lsr #32
    4024:	00530001 	subseq	r0, r3, r1
    4028:	00000000 	andeq	r0, r0, r0
    402c:	2a000000 	bcs	4034 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    4030:	3c000040 	stccc	0, cr0, [r0], {64}	; 0x40
    4034:	01000040 	tsteq	r0, r0, asr #32
    4038:	403c5200 	eorsmi	r5, ip, r0, lsl #4
    403c:	403e0000 	eorsmi	r0, lr, r0
    4040:	00050000 	andeq	r0, r5, r0
    4044:	25310072 	ldrcs	r0, [r1, #-114]!	; 0xffffff8e
    4048:	00403e9f 	umaaleq	r3, r0, pc, lr	; <UNPREDICTABLE>
    404c:	00404400 	subeq	r4, r0, r0, lsl #8
    4050:	52000100 	andpl	r0, r0, #0, 2
    4054:	00004048 	andeq	r4, r0, r8, asr #32
    4058:	0000405a 	andeq	r4, r0, sl, asr r0
    405c:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    4060:	68000040 	stmdavs	r0, {r6}
    4064:	01000040 	tsteq	r0, r0, asr #32
    4068:	406a5200 	rsbmi	r5, sl, r0, lsl #4
    406c:	407c0000 	rsbsmi	r0, ip, r0
    4070:	00010000 	andeq	r0, r1, r0
    4074:	00000052 	andeq	r0, r0, r2, asr r0
    4078:	00000000 	andeq	r0, r0, r0
    407c:	00402e00 	subeq	r2, r0, r0, lsl #28
    4080:	00403800 	subeq	r3, r0, r0, lsl #16
    4084:	53000100 	movwpl	r0, #256	; 0x100
    4088:	00004038 	andeq	r4, r0, r8, lsr r0
    408c:	0000403a 	andeq	r4, r0, sl, lsr r0
    4090:	00730005 	rsbseq	r0, r3, r5
    4094:	3a9f2531 	bcc	fe7cd560 <_estack+0xde7c8560>
    4098:	3c000040 	stccc	0, cr0, [r0], {64}	; 0x40
    409c:	01000040 	tsteq	r0, r0, asr #32
    40a0:	403c5300 	eorsmi	r5, ip, r0, lsl #6
    40a4:	40480000 	submi	r0, r8, r0
    40a8:	00040000 	andeq	r0, r4, r0
    40ac:	9fffff0a 	svcls	0x00ffff0a
    40b0:	00004048 	andeq	r4, r0, r8, asr #32
    40b4:	0000404e 	andeq	r4, r0, lr, asr #32
    40b8:	52530001 	subspl	r0, r3, #1
    40bc:	58000040 	stmdapl	r0, {r6}
    40c0:	01000040 	tsteq	r0, r0, asr #32
    40c4:	40585300 	subsmi	r5, r8, r0, lsl #6
    40c8:	406a0000 	rsbmi	r0, sl, r0
    40cc:	00020000 	andeq	r0, r2, r0
    40d0:	406a9f31 	rsbmi	r9, sl, r1, lsr pc
    40d4:	407c0000 	rsbsmi	r0, ip, r0
    40d8:	00010000 	andeq	r0, r1, r0
    40dc:	00000053 	andeq	r0, r0, r3, asr r0
    40e0:	00000000 	andeq	r0, r0, r0
    40e4:	00402e00 	subeq	r2, r0, r0, lsl #28
    40e8:	00403400 	subeq	r3, r0, r0, lsl #8
    40ec:	30000200 	andcc	r0, r0, r0, lsl #4
    40f0:	0040349f 	umaaleq	r3, r0, pc, r4	; <UNPREDICTABLE>
    40f4:	00407000 	subeq	r7, r0, r0
    40f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4104:	00004070 	andeq	r4, r0, r0, ror r0
    4108:	00004074 	andeq	r4, r0, r4, ror r0
    410c:	00720008 	rsbseq	r0, r2, r8
    4110:	00732440 	rsbseq	r2, r3, r0, asr #8
    4114:	40749f21 	rsbsmi	r9, r4, r1, lsr #30
    4118:	407c0000 	rsbsmi	r0, ip, r0
    411c:	00010000 	andeq	r0, r1, r0
    4120:	00000050 	andeq	r0, r0, r0, asr r0
    4124:	00000000 	andeq	r0, r0, r0
    4128:	00408600 	subeq	r8, r0, r0, lsl #12
    412c:	00408a00 	subeq	r8, r0, r0, lsl #20
    4130:	70000a00 	andvc	r0, r0, r0, lsl #20
    4134:	381a3300 	ldmdacc	sl, {r8, r9, ip, sp}
    4138:	21007324 	tstcs	r0, r4, lsr #6
    413c:	00408e9f 	umaaleq	r8, r0, pc, lr	; <UNPREDICTABLE>
    4140:	00409400 	subeq	r9, r0, r0, lsl #8
    4144:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4158:	00700007 	rsbseq	r0, r0, r7
    415c:	1a3fff0a 	bne	1003d8c <__ccfg+0xfe3de4>
    4160:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4164:	00000000 	andeq	r0, r0, r0
    4168:	00409800 	subeq	r9, r0, r0, lsl #16
    416c:	00409c00 	subeq	r9, r0, r0, lsl #24
    4170:	70000f00 	andvc	r0, r0, r0, lsl #30
    4174:	1afc0800 	bne	fff0617c <_estack+0xdff0117c>
    4178:	80110070 	andshi	r0, r1, r0, ror r0
    417c:	1a67f3f8 	bne	1a01164 <__ccfg+0x19e11bc>
    4180:	00009f21 	andeq	r9, r0, r1, lsr #30
    4184:	00000000 	andeq	r0, r0, r0
    4188:	40980000 	addsmi	r0, r8, r0
    418c:	409c0000 	addsmi	r0, ip, r0
    4190:	00010000 	andeq	r0, r1, r0
    4194:	00000050 	andeq	r0, r0, r0, asr r0
    4198:	00000000 	andeq	r0, r0, r0
    419c:	0040a800 	subeq	sl, r0, r0, lsl #16
    41a0:	0040ac00 	subeq	sl, r0, r0, lsl #24
    41a4:	70000f00 	andvc	r0, r0, r0, lsl #30
    41a8:	1a3f0800 	bne	fc61b0 <__ccfg+0xfa6208>
    41ac:	c00c0070 	andgt	r0, ip, r0, ror r0
    41b0:	1a00fcff 	bne	435b4 <__ccfg+0x2360c>
    41b4:	00009f21 	andeq	r9, r0, r1, lsr #30
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	40a80000 	adcmi	r0, r8, r0
    41c0:	40ac0000 	adcmi	r0, ip, r0
    41c4:	00010000 	andeq	r0, r1, r0
    41c8:	00000050 	andeq	r0, r0, r0, asr r0
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	0040b800 	subeq	fp, r0, r0, lsl #16
    41d4:	00410e00 	subeq	r0, r1, r0, lsl #28
    41d8:	50000100 	andpl	r0, r0, r0, lsl #2
    41dc:	0000410e 	andeq	r4, r0, lr, lsl #2
    41e0:	0000411c 	andeq	r4, r0, ip, lsl r1
    41e4:	01f30004 	mvnseq	r0, r4
    41e8:	00009f50 	andeq	r9, r0, r0, asr pc
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	40f80000 	rscsmi	r0, r8, r0
    41f4:	41000000 	mrsmi	r0, (UNDEF: 0)
    41f8:	00170000 	andseq	r0, r7, r0
    41fc:	000a0074 	andeq	r0, sl, r4, ror r0
    4200:	00741aff 	ldrshteq	r1, [r4], #-175	; 0xffffff51
    4204:	211af008 	tstcs	sl, r8	; <UNPREDICTABLE>
    4208:	24440072 	strbcs	r0, [r4], #-114	; 0xffffff8e
    420c:	40007321 	andmi	r7, r0, r1, lsr #6
    4210:	049f2124 	ldreq	r2, [pc], #292	; 4218 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x34>
    4214:	1c000041 	stcne	0, cr0, [r0], {65}	; 0x41
    4218:	01000041 	tsteq	r0, r1, asr #32
    421c:	00005300 	andeq	r5, r0, r0, lsl #6
    4220:	00000000 	andeq	r0, r0, r0
    4224:	40c00000 	sbcmi	r0, r0, r0
    4228:	410a0000 	mrsmi	r0, (UNDEF: 10)
    422c:	00010000 	andeq	r0, r1, r0
    4230:	00000054 	andeq	r0, r0, r4, asr r0
    4234:	00000000 	andeq	r0, r0, r0
    4238:	0040c600 	subeq	ip, r0, r0, lsl #12
    423c:	0040da00 	subeq	sp, r0, r0, lsl #20
    4240:	52000100 	andpl	r0, r0, #0, 2
    4244:	000040da 	ldrdeq	r4, [r0], -sl
    4248:	000040e6 	andeq	r4, r0, r6, ror #1
    424c:	00740006 	rsbseq	r0, r4, r6
    4250:	9f24ec09 	svcls	0x0024ec09
    4254:	000040f8 	strdeq	r4, [r0], -r8
    4258:	00004100 	andeq	r4, r0, r0, lsl #2
    425c:	00520001 	subseq	r0, r2, r1
    4260:	00000000 	andeq	r0, r0, r0
    4264:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4268:	ec000040 	stc	0, cr0, [r0], {64}	; 0x40
    426c:	01000040 	tsteq	r0, r0, asr #32
    4270:	40ec5300 	rscmi	r5, ip, r0, lsl #6
    4274:	40f80000 	rscsmi	r0, r8, r0
    4278:	00060000 	andeq	r0, r6, r0
    427c:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    4280:	40f89f24 	rscsmi	r9, r8, r4, lsr #30
    4284:	41040000 	mrsmi	r0, (UNDEF: 4)
    4288:	00010000 	andeq	r0, r1, r0
    428c:	00000053 	andeq	r0, r0, r3, asr r0
    4290:	00000000 	andeq	r0, r0, r0
    4294:	0040d800 	subeq	sp, r0, r0, lsl #16
    4298:	0040da00 	subeq	sp, r0, r0, lsl #20
    429c:	76000600 	strvc	r0, [r0], -r0, lsl #12
    42a0:	22007200 	andcs	r7, r0, #0, 4
    42a4:	0040da9f 	umaaleq	sp, r0, pc, sl	; <UNPREDICTABLE>
    42a8:	0040e200 	subeq	lr, r0, r0, lsl #4
    42ac:	52000100 	andpl	r0, r0, #0, 2
    42b0:	000040e2 	andeq	r4, r0, r2, ror #1
    42b4:	000040e4 	andeq	r4, r0, r4, ror #1
    42b8:	00740009 	rsbseq	r0, r4, r9
    42bc:	7624ec09 	strtvc	lr, [r4], -r9, lsl #24
    42c0:	e49f2200 	ldr	r2, [pc], #512	; 42c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe4>
    42c4:	e6000040 	str	r0, [r0], -r0, asr #32
    42c8:	01000040 	tsteq	r0, r0, asr #32
    42cc:	40ea5500 	rscmi	r5, sl, r0, lsl #10
    42d0:	40ec0000 	rscmi	r0, ip, r0
    42d4:	00060000 	andeq	r0, r6, r0
    42d8:	00730071 	rsbseq	r0, r3, r1, ror r0
    42dc:	40ec9f22 	rscmi	r9, ip, r2, lsr #30
    42e0:	40f40000 	rscsmi	r0, r4, r0
    42e4:	00010000 	andeq	r0, r1, r0
    42e8:	0040f453 	subeq	pc, r0, r3, asr r4	; <UNPREDICTABLE>
    42ec:	0040f600 	subeq	pc, r0, r0, lsl #12
    42f0:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    42f4:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    42f8:	9f220071 	svcls	0x00220071
    42fc:	000040f6 	strdeq	r4, [r0], -r6
    4300:	000040f8 	strdeq	r4, [r0], -r8
    4304:	9f300002 	svcls	0x00300002
	...
    4310:	0000411c 	andeq	r4, r0, ip, lsl r1
    4314:	00004124 	andeq	r4, r0, r4, lsr #2
    4318:	24500001 	ldrbcs	r0, [r0], #-1
    431c:	30000041 	andcc	r0, r0, r1, asr #32
    4320:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4324:	5001f300 	andpl	pc, r1, r0, lsl #6
    4328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    432c:	00000000 	andeq	r0, r0, r0
    4330:	00411c00 	subeq	r1, r1, r0, lsl #24
    4334:	00412a00 	subeq	r2, r1, r0, lsl #20
    4338:	30000200 	andcc	r0, r0, r0, lsl #4
    433c:	00412a9f 	umaaleq	r2, r1, pc, sl	; <UNPREDICTABLE>
    4340:	00413000 	subeq	r3, r1, r0
    4344:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4350:	0000411e 	andeq	r4, r0, lr, lsl r1
    4354:	00004124 	andeq	r4, r0, r4, lsr #2
    4358:	24500001 	ldrbcs	r0, [r0], #-1
    435c:	30000041 	andcc	r0, r0, r1, asr #32
    4360:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4364:	5001f300 	andpl	pc, r1, r0, lsl #6
    4368:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    436c:	00000000 	andeq	r0, r0, r0
    4370:	00412800 	subeq	r2, r1, r0, lsl #16
    4374:	00412a00 	subeq	r2, r1, r0, lsl #20
    4378:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4384:	00004130 	andeq	r4, r0, r0, lsr r1
    4388:	00004138 	andeq	r4, r0, r8, lsr r1
    438c:	38500001 	ldmdacc	r0, {r0}^
    4390:	44000041 	strmi	r0, [r0], #-65	; 0xffffffbf
    4394:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4398:	5001f300 	andpl	pc, r1, r0, lsl #6
    439c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43a0:	00000000 	andeq	r0, r0, r0
    43a4:	00413000 	subeq	r3, r1, r0
    43a8:	00413e00 	subeq	r3, r1, r0, lsl #28
    43ac:	31000200 	mrscc	r0, R8_usr
    43b0:	00413e9f 	umaaleq	r3, r1, pc, lr	; <UNPREDICTABLE>
    43b4:	00414400 	subeq	r4, r1, r0, lsl #8
    43b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    43c4:	00004132 	andeq	r4, r0, r2, lsr r1
    43c8:	00004138 	andeq	r4, r0, r8, lsr r1
    43cc:	38500001 	ldmdacc	r0, {r0}^
    43d0:	44000041 	strmi	r0, [r0], #-65	; 0xffffffbf
    43d4:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    43d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    43dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43e0:	00000000 	andeq	r0, r0, r0
    43e4:	00413c00 	subeq	r3, r1, r0, lsl #24
    43e8:	00413e00 	subeq	r3, r1, r0, lsl #28
    43ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    43f8:	00004144 	andeq	r4, r0, r4, asr #2
    43fc:	0000414c 	andeq	r4, r0, ip, asr #2
    4400:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4404:	58000041 	stmdapl	r0, {r0, r6}
    4408:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    440c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4410:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4414:	00000000 	andeq	r0, r0, r0
    4418:	00414400 	subeq	r4, r1, r0, lsl #8
    441c:	00415200 	subeq	r5, r1, r0, lsl #4
    4420:	31000200 	mrscc	r0, R8_usr
    4424:	0041529f 	umaaleq	r5, r1, pc, r2	; <UNPREDICTABLE>
    4428:	00415800 	subeq	r5, r1, r0, lsl #16
    442c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4438:	00004146 	andeq	r4, r0, r6, asr #2
    443c:	0000414c 	andeq	r4, r0, ip, asr #2
    4440:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4444:	58000041 	stmdapl	r0, {r0, r6}
    4448:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    444c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4450:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4454:	00000000 	andeq	r0, r0, r0
    4458:	00415000 	subeq	r5, r1, r0
    445c:	00415200 	subeq	r5, r1, r0, lsl #4
    4460:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    446c:	00004158 	andeq	r4, r0, r8, asr r1
    4470:	00004164 	andeq	r4, r0, r4, ror #2
    4474:	64500001 	ldrbvs	r0, [r0], #-1
    4478:	80000041 	andhi	r0, r0, r1, asr #32
    447c:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4480:	5001f300 	andpl	pc, r1, r0, lsl #6
    4484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4488:	00000000 	andeq	r0, r0, r0
    448c:	00415800 	subeq	r5, r1, r0, lsl #16
    4490:	00417a00 	subeq	r7, r1, r0, lsl #20
    4494:	30000200 	andcc	r0, r0, r0, lsl #4
    4498:	00417a9f 	umaaleq	r7, r1, pc, sl	; <UNPREDICTABLE>
    449c:	00418000 	subeq	r8, r1, r0
    44a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44ac:	0000415a 	andeq	r4, r0, sl, asr r1
    44b0:	00004164 	andeq	r4, r0, r4, ror #2
    44b4:	64500001 	ldrbvs	r0, [r0], #-1
    44b8:	80000041 	andhi	r0, r0, r1, asr #32
    44bc:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    44c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    44c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44c8:	00000000 	andeq	r0, r0, r0
    44cc:	00416c00 	subeq	r6, r1, r0, lsl #24
    44d0:	00417400 	subeq	r7, r1, r0, lsl #8
    44d4:	73001000 	movwvc	r1, #0
    44d8:	24464c00 	strbcs	r4, [r6], #-3072	; 0xfffff400
    44dc:	3225481a 	eorcc	r4, r5, #1703936	; 0x1a0000
    44e0:	38007224 	stmdacc	r0, {r2, r5, r9, ip, sp, lr}
    44e4:	769f2124 	ldrvc	r2, [pc], r4, lsr #2
    44e8:	7a000041 	bvc	45f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    44ec:	01000041 	tsteq	r0, r1, asr #32
    44f0:	00005000 	andeq	r5, r0, r0
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	41600000 	cmnmi	r0, r0
    44fc:	41740000 	cmnmi	r4, r0
    4500:	00010000 	andeq	r0, r1, r0
    4504:	00000053 	andeq	r0, r0, r3, asr r0
    4508:	00000000 	andeq	r0, r0, r0
    450c:	00418400 	subeq	r8, r1, r0, lsl #8
    4510:	00418800 	subeq	r8, r1, r0, lsl #16
    4514:	70000900 	andvc	r0, r0, r0, lsl #18
    4518:	24404800 	strbcs	r4, [r0], #-2048	; 0xfffff800
    451c:	9f25431a 	svcls	0x0025431a
	...
    4528:	00004190 	muleq	r0, r0, r1
    452c:	0000419c 	muleq	r0, ip, r1
    4530:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4534:	bc000041 	stclt	0, cr0, [r0], {65}	; 0x41
    4538:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    453c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4540:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4544:	00000000 	andeq	r0, r0, r0
    4548:	00419000 	subeq	r9, r1, r0
    454c:	0041b200 	subeq	fp, r1, r0, lsl #4
    4550:	0c000600 	stceq	6, cr0, [r0], {-0}
    4554:	403f8000 	eorsmi	r8, pc, r0
    4558:	0041b29f 	umaaleq	fp, r1, pc, r2	; <UNPREDICTABLE>
    455c:	0041bc00 	subeq	fp, r1, r0, lsl #24
    4560:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    456c:	00004192 	muleq	r0, r2, r1
    4570:	0000419c 	muleq	r0, ip, r1
    4574:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4578:	bc000041 	stclt	0, cr0, [r0], {65}	; 0x41
    457c:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4580:	5001f300 	andpl	pc, r1, r0, lsl #6
    4584:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4588:	00000000 	andeq	r0, r0, r0
    458c:	0041a000 	subeq	sl, r1, r0
    4590:	0041a600 	subeq	sl, r1, r0, lsl #12
    4594:	73001000 	movwvc	r1, #0
    4598:	03f00a00 	mvnseq	r0, #0, 20
    459c:	4025341a 	eormi	r3, r5, sl, lsl r4
    45a0:	46007224 	strmi	r7, [r0], -r4, lsr #4
    45a4:	b09f2124 	addslt	r2, pc, r4, lsr #2
    45a8:	b2000041 	andlt	r0, r0, #65	; 0x41
    45ac:	01000041 	tsteq	r0, r1, asr #32
    45b0:	00005000 	andeq	r5, r0, r0
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	41980000 	orrsmi	r0, r8, r0
    45bc:	41a60000 			; <UNDEFINED> instruction: 0x41a60000
    45c0:	00010000 	andeq	r0, r1, r0
    45c4:	00000053 	andeq	r0, r0, r3, asr r0
    45c8:	00000000 	andeq	r0, r0, r0
    45cc:	0041bc00 	subeq	fp, r1, r0, lsl #24
    45d0:	0041c400 	subeq	ip, r1, r0, lsl #8
    45d4:	50000100 	andpl	r0, r0, r0, lsl #2
    45d8:	000041c4 	andeq	r4, r0, r4, asr #3
    45dc:	000041d0 	ldrdeq	r4, [r0], -r0
    45e0:	01f30004 	mvnseq	r0, r4
    45e4:	00009f50 	andeq	r9, r0, r0, asr pc
    45e8:	00000000 	andeq	r0, r0, r0
    45ec:	41bc0000 			; <UNDEFINED> instruction: 0x41bc0000
    45f0:	41ca0000 	bicmi	r0, sl, r0
    45f4:	00020000 	andeq	r0, r2, r0
    45f8:	41ca9f30 	bicmi	r9, sl, r0, lsr pc
    45fc:	41d00000 	bicsmi	r0, r0, r0
    4600:	00010000 	andeq	r0, r1, r0
    4604:	00000050 	andeq	r0, r0, r0, asr r0
    4608:	00000000 	andeq	r0, r0, r0
    460c:	0041be00 	subeq	fp, r1, r0, lsl #28
    4610:	0041c400 	subeq	ip, r1, r0, lsl #8
    4614:	50000100 	andpl	r0, r0, r0, lsl #2
    4618:	000041c4 	andeq	r4, r0, r4, asr #3
    461c:	000041d0 	ldrdeq	r4, [r0], -r0
    4620:	01f30004 	mvnseq	r0, r4
    4624:	00009f50 	andeq	r9, r0, r0, asr pc
    4628:	00000000 	andeq	r0, r0, r0
    462c:	41c80000 	bicmi	r0, r8, r0
    4630:	41ca0000 	bicmi	r0, sl, r0
    4634:	00010000 	andeq	r0, r1, r0
    4638:	00000050 	andeq	r0, r0, r0, asr r0
    463c:	00000000 	andeq	r0, r0, r0
    4640:	0041d000 	subeq	sp, r1, r0
    4644:	0041d800 	subeq	sp, r1, r0, lsl #16
    4648:	50000100 	andpl	r0, r0, r0, lsl #2
    464c:	000041d8 	ldrdeq	r4, [r0], -r8
    4650:	000041e4 	andeq	r4, r0, r4, ror #3
    4654:	01f30004 	mvnseq	r0, r4
    4658:	00009f50 	andeq	r9, r0, r0, asr pc
    465c:	00000000 	andeq	r0, r0, r0
    4660:	41d00000 	bicsmi	r0, r0, r0
    4664:	41de0000 	bicsmi	r0, lr, r0
    4668:	00020000 	andeq	r0, r2, r0
    466c:	41de9f30 	bicsmi	r9, lr, r0, lsr pc
    4670:	41e40000 	mvnmi	r0, r0
    4674:	00010000 	andeq	r0, r1, r0
    4678:	00000050 	andeq	r0, r0, r0, asr r0
    467c:	00000000 	andeq	r0, r0, r0
    4680:	0041d200 	subeq	sp, r1, r0, lsl #4
    4684:	0041d800 	subeq	sp, r1, r0, lsl #16
    4688:	50000100 	andpl	r0, r0, r0, lsl #2
    468c:	000041d8 	ldrdeq	r4, [r0], -r8
    4690:	000041e4 	andeq	r4, r0, r4, ror #3
    4694:	01f30004 	mvnseq	r0, r4
    4698:	00009f50 	andeq	r9, r0, r0, asr pc
    469c:	00000000 	andeq	r0, r0, r0
    46a0:	41dc0000 	bicsmi	r0, ip, r0
    46a4:	41de0000 	bicsmi	r0, lr, r0
    46a8:	00010000 	andeq	r0, r1, r0
    46ac:	00000050 	andeq	r0, r0, r0, asr r0
    46b0:	00000000 	andeq	r0, r0, r0
    46b4:	0041e400 	subeq	lr, r1, r0, lsl #8
    46b8:	0041ea00 	subeq	lr, r1, r0, lsl #20
    46bc:	50000100 	andpl	r0, r0, r0, lsl #2
    46c0:	000041ea 	andeq	r4, r0, sl, ror #3
    46c4:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    46c8:	d4550001 	ldrble	r0, [r5], #-1
    46cc:	f4000042 	vst4.16	{d0-d3}, [r0], r2
    46d0:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    46d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    46d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46dc:	00000000 	andeq	r0, r0, r0
    46e0:	0041e400 	subeq	lr, r1, r0, lsl #8
    46e4:	0041ed00 	subeq	lr, r1, r0, lsl #26
    46e8:	51000100 	mrspl	r0, (UNDEF: 16)
    46ec:	000041ed 	andeq	r4, r0, sp, ror #3
    46f0:	000042f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    46f4:	01f30004 	mvnseq	r0, r4
    46f8:	00009f51 	andeq	r9, r0, r1, asr pc
    46fc:	00000000 	andeq	r0, r0, r0
    4700:	41f20000 	mvnsmi	r0, r0
    4704:	41f60000 	mvnsmi	r0, r0
    4708:	00010000 	andeq	r0, r1, r0
    470c:	0041f650 	subeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
    4710:	0041f900 	subeq	pc, r1, r0, lsl #18
    4714:	52000100 	andpl	r0, r0, #0, 2
    4718:	000041fe 	strdeq	r4, [r0], -lr
    471c:	00004202 	andeq	r4, r0, r2, lsl #4
    4720:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4724:	2e000042 	cdpcs	0, 0, cr0, cr0, cr2, {2}
    4728:	01000042 	tsteq	r0, r2, asr #32
    472c:	422e5000 	eormi	r5, lr, #0
    4730:	42310000 	eorsmi	r0, r1, #0
    4734:	00010000 	andeq	r0, r1, r0
    4738:	00423a52 	subeq	r3, r2, r2, asr sl
    473c:	00423c00 	subeq	r3, r2, r0, lsl #24
    4740:	50000100 	andpl	r0, r0, r0, lsl #2
    4744:	0000423c 	andeq	r4, r0, ip, lsr r2
    4748:	0000423f 	andeq	r4, r0, pc, lsr r2
    474c:	4a520001 	bmi	1484758 <__ccfg+0x14647b0>
    4750:	4c000042 	stcmi	0, cr0, [r0], {66}	; 0x42
    4754:	01000042 	tsteq	r0, r2, asr #32
    4758:	424c5000 	submi	r5, ip, #0
    475c:	424f0000 	submi	r0, pc, #0
    4760:	00010000 	andeq	r0, r1, r0
    4764:	00425652 	subeq	r5, r2, r2, asr r6
    4768:	00425800 	subeq	r5, r2, r0, lsl #16
    476c:	50000100 	andpl	r0, r0, r0, lsl #2
    4770:	00004268 	andeq	r4, r0, r8, ror #4
    4774:	0000426c 	andeq	r4, r0, ip, ror #4
    4778:	7a500001 	bvc	1404784 <__ccfg+0x13e47dc>
    477c:	7c000042 	stcvc	0, cr0, [r0], {66}	; 0x42
    4780:	01000042 	tsteq	r0, r2, asr #32
    4784:	427c5000 	rsbsmi	r5, ip, #0
    4788:	427f0000 	rsbsmi	r0, pc, #0
    478c:	00010000 	andeq	r0, r1, r0
    4790:	00428652 	subeq	r8, r2, r2, asr r6
    4794:	00428800 	subeq	r8, r2, r0, lsl #16
    4798:	50000100 	andpl	r0, r0, r0, lsl #2
    479c:	00004298 	muleq	r0, r8, r2
    47a0:	0000429a 	muleq	r0, sl, r2
    47a4:	aa500001 	bge	14047b0 <__ccfg+0x13e4808>
    47a8:	ae000042 	cdpge	0, 0, cr0, cr0, cr2, {2}
    47ac:	01000042 	tsteq	r0, r2, asr #32
    47b0:	42c25000 	sbcmi	r5, r2, #0
    47b4:	42c40000 	sbcmi	r0, r4, #0
    47b8:	00010000 	andeq	r0, r1, r0
    47bc:	0042c450 	subeq	ip, r2, r0, asr r4
    47c0:	0042c700 	subeq	ip, r2, r0, lsl #14
    47c4:	52000100 	andpl	r0, r0, #0, 2
	...
    47d0:	0000421a 	andeq	r4, r0, sl, lsl r2
    47d4:	00004220 	andeq	r4, r0, r0, lsr #4
    47d8:	00720007 	rsbseq	r0, r2, r7
    47dc:	1a3fff0a 	bne	100440c <__ccfg+0xfe4464>
    47e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47e4:	00000000 	andeq	r0, r0, r0
    47e8:	00430e00 	subeq	r0, r3, r0, lsl #28
    47ec:	00431800 	subeq	r1, r3, r0, lsl #16
    47f0:	73000900 	movwvc	r0, #2304	; 0x900
    47f4:	00040c00 	andeq	r0, r4, r0, lsl #24
    47f8:	9f212000 	svcls	0x00212000
	...
    4804:	00004358 	andeq	r4, r0, r8, asr r3
    4808:	00004360 	andeq	r4, r0, r0, ror #6
    480c:	60500001 	subsvs	r0, r0, r1
    4810:	80000043 	andhi	r0, r0, r3, asr #32
    4814:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    4818:	5001f300 	andpl	pc, r1, r0, lsl #6
    481c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4820:	00000000 	andeq	r0, r0, r0
    4824:	00438000 	subeq	r8, r3, r0
    4828:	0043a800 	subeq	sl, r3, r0, lsl #16
    482c:	50000100 	andpl	r0, r0, r0, lsl #2
    4830:	000043a8 	andeq	r4, r0, r8, lsr #7
    4834:	000043e8 	andeq	r4, r0, r8, ror #7
    4838:	e8540001 	ldmda	r4, {r0}^
    483c:	f0000043 			; <UNDEFINED> instruction: 0xf0000043
    4840:	01000043 	tsteq	r0, r3, asr #32
    4844:	43f05000 	mvnsmi	r5, #0
    4848:	443a0000 	ldrtmi	r0, [sl], #-0
    484c:	00010000 	andeq	r0, r1, r0
    4850:	00443a54 	subeq	r3, r4, r4, asr sl
    4854:	00447600 	subeq	r7, r4, r0, lsl #12
    4858:	f3000400 	vshl.u8	d0, d0, d0
    485c:	769f5001 	ldrvc	r5, [pc], r1
    4860:	7a000044 	bvc	4978 <__aeabi_lmul+0x18>
    4864:	01000044 	tsteq	r0, r4, asr #32
    4868:	447a5400 	ldrbtmi	r5, [sl], #-1024	; 0xfffffc00
    486c:	44d00000 	ldrbmi	r0, [r0], #0
    4870:	00040000 	andeq	r0, r4, r0
    4874:	9f5001f3 	svcls	0x005001f3
	...
    4880:	00004396 	muleq	r0, r6, r3
    4884:	000043d8 	ldrdeq	r4, [r0], -r8
    4888:	00530001 	subseq	r0, r3, r1
    488c:	00000000 	andeq	r0, r0, r0
    4890:	0a000000 	beq	4898 <memcpy+0x30>
    4894:	10000044 	andne	r0, r0, r4, asr #32
    4898:	01000044 	tsteq	r0, r4, asr #32
    489c:	00005000 	andeq	r5, r0, r0
    48a0:	00000000 	andeq	r0, r0, r0
    48a4:	443a0000 	ldrtmi	r0, [sl], #-0
    48a8:	443c0000 	ldrtmi	r0, [ip], #-0
    48ac:	00010000 	andeq	r0, r1, r0
    48b0:	00443c50 	subeq	r3, r4, r0, asr ip
    48b4:	00445000 	subeq	r5, r4, r0
    48b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    48c4:	00004450 	andeq	r4, r0, r0, asr r4
    48c8:	00004470 	andeq	r4, r0, r0, ror r4
    48cc:	00540001 	subseq	r0, r4, r1
	...
    48dc:	01000000 	mrseq	r0, (UNDEF: 0)
    48e0:	00005500 	andeq	r5, r0, r0, lsl #10
    48e4:	00000000 	andeq	r0, r0, r0
    48e8:	00030000 	andeq	r0, r3, r0
    48ec:	009f7f75 	addseq	r7, pc, r5, ror pc	; <UNPREDICTABLE>
    48f0:	00000000 	andeq	r0, r0, r0
    48f4:	01000000 	mrseq	r0, (UNDEF: 0)
    48f8:	00005500 	andeq	r5, r0, r0, lsl #10
    48fc:	00000000 	andeq	r0, r0, r0
    4900:	44d00000 	ldrbmi	r0, [r0], #0
    4904:	44ef0000 	strbtmi	r0, [pc], #0	; 490c <memcpy+0xa4>
    4908:	00010000 	andeq	r0, r1, r0
    490c:	0044ef50 	subeq	lr, r4, r0, asr pc
    4910:	0045b000 	subeq	fp, r5, r0
    4914:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    4918:	000045b0 			; <UNDEFINED> instruction: 0x000045b0
    491c:	000046f0 	strdeq	r4, [r0], -r0
    4920:	01f30004 	mvnseq	r0, r4
    4924:	00009f50 	andeq	r9, r0, r0, asr pc
    4928:	00000000 	andeq	r0, r0, r0
    492c:	44f00000 	ldrbtmi	r0, [r0], #0
    4930:	46700000 	ldrbtmi	r0, [r0], -r0
    4934:	00010000 	andeq	r0, r1, r0
    4938:	00467250 	subeq	r7, r6, r0, asr r2
    493c:	0046ac00 	subeq	sl, r6, r0, lsl #24
    4940:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    494c:	00004598 	muleq	r0, r8, r5
    4950:	0000459c 	muleq	r0, ip, r5
    4954:	71700003 	cmnvc	r0, r3
    4958:	00459c9f 	umaaleq	r9, r5, pc, ip	; <UNPREDICTABLE>
    495c:	0045a200 	subeq	sl, r5, r0, lsl #4
    4960:	51000100 	mrspl	r0, (UNDEF: 16)
    4964:	000045a2 	andeq	r4, r0, r2, lsr #11
    4968:	000045c2 	andeq	r4, r0, r2, asr #11
    496c:	54910002 	ldrpl	r0, [r1], #2
    4970:	000045c2 	andeq	r4, r0, r2, asr #11
    4974:	000045ce 	andeq	r4, r0, lr, asr #11
    4978:	ce510001 	cdpgt	0, 5, cr0, cr1, cr1, {0}
    497c:	d0000045 	andle	r0, r0, r5, asr #32
    4980:	02000045 	andeq	r0, r0, #69	; 0x45
    4984:	d0549100 	subsle	r9, r4, r0, lsl #2
    4988:	d2000045 	andle	r0, r0, #69	; 0x45
    498c:	01000045 	tsteq	r0, r5, asr #32
    4990:	45d25100 	ldrbmi	r5, [r2, #256]	; 0x100
    4994:	46780000 	ldrbtmi	r0, [r8], -r0
    4998:	00020000 	andeq	r0, r2, r0
    499c:	00005491 	muleq	r0, r1, r4
    49a0:	00000000 	andeq	r0, r0, r0
    49a4:	44fc0000 	ldrbtmi	r0, [ip], #0
    49a8:	45560000 	ldrbmi	r0, [r6, #-0]
    49ac:	00010000 	andeq	r0, r1, r0
    49b0:	00455e51 	subeq	r5, r5, r1, asr lr
    49b4:	00456000 	subeq	r6, r5, r0
    49b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    49c4:	0000454e 	andeq	r4, r0, lr, asr #10
    49c8:	0000455c 	andeq	r4, r0, ip, asr r5
    49cc:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    49d0:	40000045 	andmi	r0, r0, r5, asr #32
    49d4:	01000046 	tsteq	r0, r6, asr #32
    49d8:	00005200 	andeq	r5, r0, r0, lsl #4
    49dc:	00000000 	andeq	r0, r0, r0
    49e0:	454e0000 	strbmi	r0, [lr, #-0]
    49e4:	46360000 	ldrtmi	r0, [r6], -r0
    49e8:	00010000 	andeq	r0, r1, r0
    49ec:	00000053 	andeq	r0, r0, r3, asr r0
    49f0:	00000000 	andeq	r0, r0, r0
    49f4:	0044f400 	subeq	pc, r4, r0, lsl #8
    49f8:	00464a00 	subeq	r4, r6, r0, lsl #20
    49fc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4a08:	000044f0 	strdeq	r4, [r0], -r0
    4a0c:	00004578 	andeq	r4, r0, r8, ror r5
    4a10:	9f300002 	svcls	0x00300002
    4a14:	00004578 	andeq	r4, r0, r8, ror r5
    4a18:	000046ac 	andeq	r4, r0, ip, lsr #13
    4a1c:	00540001 	subseq	r0, r4, r1
    4a20:	00000000 	andeq	r0, r0, r0
    4a24:	70000000 	andvc	r0, r0, r0
    4a28:	7a000045 	bvc	4b44 <__aeabi_lmul+0x1e4>
    4a2c:	01000045 	tsteq	r0, r5, asr #32
    4a30:	00005100 	andeq	r5, r0, r0, lsl #2
    4a34:	00000000 	andeq	r0, r0, r0
    4a38:	45980000 	ldrmi	r0, [r8]
    4a3c:	45e80000 	strbmi	r0, [r8, #0]!
    4a40:	00020000 	andeq	r0, r2, r0
    4a44:	45e89f30 	strbmi	r9, [r8, #3888]!	; 0xf30
    4a48:	46080000 	strmi	r0, [r8], -r0
    4a4c:	00010000 	andeq	r0, r1, r0
    4a50:	00460851 	subeq	r0, r6, r1, asr r8
    4a54:	00460e00 	subeq	r0, r6, r0, lsl #28
    4a58:	30000200 	andcc	r0, r0, r0, lsl #4
    4a5c:	00460e9f 	umaaleq	r0, r6, pc, lr	; <UNPREDICTABLE>
    4a60:	00464800 	subeq	r4, r6, r0, lsl #16
    4a64:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4a70:	000045c4 	andeq	r4, r0, r4, asr #11
    4a74:	000045c8 	andeq	r4, r0, r8, asr #11
    4a78:	d05e0001 	subsle	r0, lr, r1
    4a7c:	d2000045 	andle	r0, r0, #69	; 0x45
    4a80:	01000045 	tsteq	r0, r5, asr #32
    4a84:	45d25e00 	ldrbmi	r5, [r2, #3584]	; 0xe00
    4a88:	45d80000 	ldrbmi	r0, [r8]
    4a8c:	00010000 	andeq	r0, r1, r0
    4a90:	0045d851 	subeq	sp, r5, r1, asr r8
    4a94:	0045e000 	subeq	lr, r5, r0
    4a98:	71000300 	mrsvc	r0, LR_irq
    4a9c:	00009f7f 	andeq	r9, r0, pc, ror pc
    4aa0:	00000000 	andeq	r0, r0, r0
    4aa4:	45980000 	ldrmi	r0, [r8]
    4aa8:	45c20000 	strbmi	r0, [r2]
    4aac:	00020000 	andeq	r0, r2, r0
    4ab0:	45c29f30 	strbmi	r9, [r2, #3888]	; 0xf30
    4ab4:	45cc0000 	strbmi	r0, [ip]
    4ab8:	00010000 	andeq	r0, r1, r0
    4abc:	0045cc5e 	subeq	ip, r5, lr, asr ip
    4ac0:	0045ce00 	subeq	ip, r5, r0, lsl #28
    4ac4:	71000500 	tstvc	r0, r0, lsl #10
    4ac8:	9f263800 	svcls	0x00263800
    4acc:	000045ce 	andeq	r4, r0, lr, asr #11
    4ad0:	000045d0 	ldrdeq	r4, [r0], -r0
    4ad4:	54910006 	ldrpl	r0, [r1], #6
    4ad8:	9f263806 	svcls	0x00263806
    4adc:	000045d0 	ldrdeq	r4, [r0], -r0
    4ae0:	000045d2 	ldrdeq	r4, [r0], -r2
    4ae4:	d25e0001 	subsle	r0, lr, #1
    4ae8:	08000045 	stmdaeq	r0, {r0, r2, r6}
    4aec:	06000046 	streq	r0, [r0], -r6, asr #32
    4af0:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    4af4:	089f2638 	ldmeq	pc, {r3, r4, r5, r9, sl, sp}	; <UNPREDICTABLE>
    4af8:	0e000046 	cdpeq	0, 0, cr0, cr0, cr6, {2}
    4afc:	02000046 	andeq	r0, r0, #70	; 0x46
    4b00:	0e9f3000 	cdpeq	0, 9, cr3, cr15, cr0, {0}
    4b04:	78000046 	stmdavc	r0, {r1, r2, r6}
    4b08:	01000046 	tsteq	r0, r6, asr #32
    4b0c:	00005e00 	andeq	r5, r0, r0, lsl #28
    4b10:	00000000 	andeq	r0, r0, r0
    4b14:	45e40000 	strbmi	r0, [r4, #0]!
    4b18:	46080000 	strmi	r0, [r8], -r0
    4b1c:	00010000 	andeq	r0, r1, r0
    4b20:	0000005c 	andeq	r0, r0, ip, asr r0
    4b24:	00000000 	andeq	r0, r0, r0
    4b28:	00461200 	subeq	r1, r6, r0, lsl #4
    4b2c:	00467800 	subeq	r7, r6, r0, lsl #16
    4b30:	5a000100 	bpl	4f38 <__aeabi_lmul+0x5d8>
	...
    4b3c:	00004616 	andeq	r4, r0, r6, lsl r6
    4b40:	00004652 	andeq	r4, r0, r2, asr r6
    4b44:	525c0001 	subspl	r0, ip, #1
    4b48:	56000046 	strpl	r0, [r0], -r6, asr #32
    4b4c:	01000046 	tsteq	r0, r6, asr #32
    4b50:	00005100 	andeq	r5, r0, r0, lsl #2
    4b54:	00000000 	andeq	r0, r0, r0
    4b58:	46560000 	ldrbmi	r0, [r6], -r0
    4b5c:	46600000 	strbtmi	r0, [r0], -r0
    4b60:	00170000 	andseq	r0, r7, r0
    4b64:	40120071 	andsmi	r0, r2, r1, ror r0
    4b68:	0a22244b 	beq	88dc9c <__ccfg+0x86dcf4>
    4b6c:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    4b70:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4b74:	0001282d 	andeq	r2, r1, sp, lsr #16
    4b78:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4b7c:	00000000 	andeq	r0, r0, r0
    4b80:	80000000 	andhi	r0, r0, r0
    4b84:	8c000046 	stchi	0, cr0, [r0], {70}	; 0x46
    4b88:	02000046 	andeq	r0, r0, #70	; 0x46
    4b8c:	8c9f3000 	ldchi	0, cr3, [pc], {0}
    4b90:	ac000046 	stcge	0, cr0, [r0], {70}	; 0x46
    4b94:	01000046 	tsteq	r0, r6, asr #32
    4b98:	00005100 	andeq	r5, r0, r0, lsl #2
    4b9c:	00000000 	andeq	r0, r0, r0
    4ba0:	46820000 	strmi	r0, [r2], r0
    4ba4:	46840000 	strmi	r0, [r4], r0
    4ba8:	00010000 	andeq	r0, r1, r0
    4bac:	00468453 	subeq	r8, r6, r3, asr r4
    4bb0:	00468c00 	subeq	r8, r6, r0, lsl #24
    4bb4:	4f000200 	svcmi	0x00000200
    4bb8:	00468c9f 	umaaleq	r8, r6, pc, ip	; <UNPREDICTABLE>
    4bbc:	00469c00 	subeq	r9, r6, r0, lsl #24
    4bc0:	53000100 	movwpl	r0, #256	; 0x100
    4bc4:	0000469c 	muleq	r0, ip, r6
    4bc8:	000046a0 	andeq	r4, r0, r0, lsr #13
    4bcc:	00730005 	rsbseq	r0, r3, r5
    4bd0:	a09f2534 	addsge	r2, pc, r4, lsr r5	; <UNPREDICTABLE>
    4bd4:	a4000046 	strge	r0, [r0], #-70	; 0xffffffba
    4bd8:	01000046 	tsteq	r0, r6, asr #32
    4bdc:	00005300 	andeq	r5, r0, r0, lsl #6
    4be0:	00000000 	andeq	r0, r0, r0
    4be4:	45980000 	ldrmi	r0, [r8]
    4be8:	46780000 	ldrbtmi	r0, [r8], -r0
    4bec:	00060000 	andeq	r0, r6, r0
    4bf0:	00139c0c 	andseq	r9, r3, ip, lsl #24
    4bf4:	00009f50 	andeq	r9, r0, r0, asr pc
    4bf8:	00000000 	andeq	r0, r0, r0
    4bfc:	45040000 	strmi	r0, [r4, #-0]
    4c00:	45100000 	ldrmi	r0, [r0, #-0]
    4c04:	00010000 	andeq	r0, r1, r0
    4c08:	00000053 	andeq	r0, r0, r3, asr r0
    4c0c:	00000000 	andeq	r0, r0, r0
    4c10:	00452400 	subeq	r2, r5, r0, lsl #8
    4c14:	00453000 	subeq	r3, r5, r0
    4c18:	52000100 	andpl	r0, r0, #0, 2
	...
    4c24:	0000453a 	andeq	r4, r0, sl, lsr r5
    4c28:	00004546 	andeq	r4, r0, r6, asr #10
    4c2c:	00520001 	subseq	r0, r2, r1
    4c30:	00000000 	andeq	r0, r0, r0
    4c34:	46000000 	strmi	r0, [r0], -r0
    4c38:	36000045 	strcc	r0, [r0], -r5, asr #32
    4c3c:	01000046 	tsteq	r0, r6, asr #32
    4c40:	00005300 	andeq	r5, r0, r0, lsl #6
    4c44:	00000000 	andeq	r0, r0, r0
    4c48:	46fe0000 	ldrbtmi	r0, [lr], r0
    4c4c:	47080000 	strmi	r0, [r8, -r0]
    4c50:	00010000 	andeq	r0, r1, r0
    4c54:	00470850 	subeq	r0, r7, r0, asr r8
    4c58:	00471200 	subeq	r1, r7, r0, lsl #4
    4c5c:	70000e00 	andvc	r0, r0, r0, lsl #28
    4c60:	80091200 	andhi	r1, r9, r0, lsl #4
    4c64:	282b1416 	stmdacs	fp!, {r1, r2, r4, sl, ip}
    4c68:	13160001 	tstne	r6, #1
    4c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c70:	00000000 	andeq	r0, r0, r0
    4c74:	0046f800 	subeq	pc, r6, r0, lsl #16
    4c78:	00472400 	subeq	r2, r7, r0, lsl #8
    4c7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4c88:	00004728 	andeq	r4, r0, r8, lsr #14
    4c8c:	0000472e 	andeq	r4, r0, lr, lsr #14
    4c90:	00730015 	rsbseq	r0, r3, r5, lsl r0
    4c94:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4c98:	14164f22 	ldrne	r4, [r6], #-3874	; 0xfffff0de
    4c9c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4ca0:	0001282d 	andeq	r2, r1, sp, lsr #16
    4ca4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4ca8:	00000000 	andeq	r0, r0, r0
    4cac:	34000000 	strcc	r0, [r0], #-0
    4cb0:	3e000047 	cdpcc	0, 0, cr0, cr0, cr7, {2}
    4cb4:	17000047 	strne	r0, [r0, -r7, asr #32]
    4cb8:	12007400 	andne	r7, r0, #0, 8
    4cbc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4cc0:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    4cc4:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4cc8:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4ccc:	9f131600 	svcls	0x00131600
	...
    4ce0:	00520001 	subseq	r0, r2, r1
	...
    4cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    4cf4:	00005000 	andeq	r5, r0, r0
	...
    4d04:	00010000 	andeq	r0, r1, r0
    4d08:	00000051 	andeq	r0, r0, r1, asr r0
	...
    4d18:	53000100 	movwpl	r0, #256	; 0x100
	...
    4d2c:	00700016 	rsbseq	r0, r0, r6, lsl r0
    4d30:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
    4d34:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4d38:	0000050c 	andeq	r0, r0, ip, lsl #10
    4d3c:	01282d80 	smlawbeq	r8, r0, sp, r2
    4d40:	9f131600 	svcls	0x00131600
	...
    4d4c:	00004768 	andeq	r4, r0, r8, ror #14
    4d50:	000047aa 	andeq	r4, r0, sl, lsr #15
    4d54:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4d58:	0047aa9f 	umaaleq	sl, r7, pc, sl	; <UNPREDICTABLE>
    4d5c:	0047b400 	subeq	fp, r7, r0, lsl #8
    4d60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4d6c:	00004774 	andeq	r4, r0, r4, ror r7
    4d70:	00004782 	andeq	r4, r0, r2, lsl #15
    4d74:	86500001 	ldrbhi	r0, [r0], -r1
    4d78:	a2000047 	andge	r0, r0, #71	; 0x47
    4d7c:	01000047 	tsteq	r0, r7, asr #32
    4d80:	47a45000 	strmi	r5, [r4, r0]!
    4d84:	47a60000 	strmi	r0, [r6, r0]!
    4d88:	00010000 	andeq	r0, r1, r0
    4d8c:	0047a850 	subeq	sl, r7, r0, asr r8
    4d90:	0047aa00 	subeq	sl, r7, r0, lsl #20
    4d94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4da8:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4dac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db0:	00000000 	andeq	r0, r0, r0
    4db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4dc8:	00540001 	subseq	r0, r4, r1
    4dcc:	00000000 	andeq	r0, r0, r0
    4dd0:	b4000000 	strlt	r0, [r0], #-0
    4dd4:	ee000047 	cdp	0, 0, cr0, cr0, cr7, {2}
    4dd8:	03000047 	movweq	r0, #71	; 0x47
    4ddc:	9fff0900 	svcls	0x00ff0900
    4de0:	000047ee 	andeq	r4, r0, lr, ror #15
    4de4:	000047f2 	strdeq	r4, [r0], -r2
    4de8:	9f440002 	svcls	0x00440002
    4dec:	000047f2 	strdeq	r4, [r0], -r2
    4df0:	000047f6 	strdeq	r4, [r0], -r6
    4df4:	9f450002 	svcls	0x00450002
    4df8:	000047f6 	strdeq	r4, [r0], -r6
    4dfc:	00004814 	andeq	r4, r0, r4, lsl r8
    4e00:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4e04:	0048149f 	umaaleq	r1, r8, pc, r4	; <UNPREDICTABLE>
    4e08:	00481600 	subeq	r1, r8, r0, lsl #12
    4e0c:	50000100 	andpl	r0, r0, r0, lsl #2
    4e10:	00004816 	andeq	r4, r0, r6, lsl r8
    4e14:	00004818 	andeq	r4, r0, r8, lsl r8
    4e18:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4e1c:	0048189f 	umaaleq	r1, r8, pc, r8	; <UNPREDICTABLE>
    4e20:	00482000 	subeq	r2, r8, r0
    4e24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4e30:	000047c4 	andeq	r4, r0, r4, asr #15
    4e34:	0000481c 	andeq	r4, r0, ip, lsl r8
    4e38:	00540001 	subseq	r0, r4, r1
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4e44:	41000048 	tstmi	r0, r8, asr #32
    4e48:	01000048 	tsteq	r0, r8, asr #32
    4e4c:	48415000 	stmdami	r1, {ip, lr}^
    4e50:	48560000 	ldmdami	r6, {}^	; <UNPREDICTABLE>
    4e54:	00010000 	andeq	r0, r1, r0
    4e58:	00485654 	subeq	r5, r8, r4, asr r6
    4e5c:	00485a00 	subeq	r5, r8, r0, lsl #20
    4e60:	f3000400 	vshl.u8	d0, d0, d0
    4e64:	5a9f5001 	bpl	fe7d8e70 <_estack+0xde7d3e70>
    4e68:	5c000048 	stcpl	0, cr0, [r0], {72}	; 0x48
    4e6c:	01000048 	tsteq	r0, r8, asr #32
    4e70:	485c5400 	ldmdami	ip, {sl, ip, lr}^
    4e74:	48600000 	stmdami	r0!, {}^	; <UNPREDICTABLE>
    4e78:	00040000 	andeq	r0, r4, r0
    4e7c:	9f5001f3 	svcls	0x005001f3
	...
    4e88:	00004838 	andeq	r4, r0, r8, lsr r8
    4e8c:	00004841 	andeq	r4, r0, r1, asr #16
    4e90:	41510001 	cmpmi	r1, r1
    4e94:	56000048 	strpl	r0, [r0], -r8, asr #32
    4e98:	01000048 	tsteq	r0, r8, asr #32
    4e9c:	48565500 	ldmdami	r6, {r8, sl, ip, lr}^
    4ea0:	485a0000 	ldmdami	sl, {}^	; <UNPREDICTABLE>
    4ea4:	00040000 	andeq	r0, r4, r0
    4ea8:	9f5101f3 	svcls	0x005101f3
    4eac:	0000485a 	andeq	r4, r0, sl, asr r8
    4eb0:	0000485c 	andeq	r4, r0, ip, asr r8
    4eb4:	5c550001 	mrrcpl	0, 0, r0, r5, cr1
    4eb8:	60000048 	andvs	r0, r0, r8, asr #32
    4ebc:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4ec0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4ec4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	00484200 	subeq	r4, r8, r0, lsl #4
    4ed0:	00485900 	subeq	r5, r8, r0, lsl #18
    4ed4:	70000500 	andvc	r0, r0, r0, lsl #10
    4ed8:	9f293000 	svcls	0x00293000
    4edc:	0000485a 	andeq	r4, r0, sl, asr r8
    4ee0:	00004860 	andeq	r4, r0, r0, ror #16
    4ee4:	00700005 	rsbseq	r0, r0, r5
    4ee8:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    4eec:	00000000 	andeq	r0, r0, r0
    4ef0:	60000000 	andvs	r0, r0, r0
    4ef4:	62000048 	andvs	r0, r0, #72	; 0x48
    4ef8:	01000048 	tsteq	r0, r8, asr #32
    4efc:	48625000 	stmdami	r2!, {ip, lr}^
    4f00:	48680000 	stmdami	r8!, {}^	; <UNPREDICTABLE>
    4f04:	00040000 	andeq	r0, r4, r0
    4f08:	9f5001f3 	svcls	0x005001f3
	...
    4f14:	00004860 	andeq	r4, r0, r0, ror #16
    4f18:	00004864 	andeq	r4, r0, r4, ror #16
    4f1c:	64510001 	ldrbvs	r0, [r1], #-1
    4f20:	68000048 	stmdavs	r0, {r3, r6}
    4f24:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4f28:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f30:	00000000 	andeq	r0, r0, r0
    4f34:	00486000 	subeq	r6, r8, r0
    4f38:	00486700 	subeq	r6, r8, r0, lsl #14
    4f3c:	52000100 	andpl	r0, r0, #0, 2
    4f40:	00004867 	andeq	r4, r0, r7, ror #16
    4f44:	00004868 	andeq	r4, r0, r8, ror #16
    4f48:	01f30004 	mvnseq	r0, r4
    4f4c:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    4f5c:	00010000 	andeq	r0, r1, r0
    4f60:	00000050 	andeq	r0, r0, r0, asr r0
    4f64:	00000000 	andeq	r0, r0, r0
    4f68:	f3000400 	vshl.u8	d0, d0, d0
    4f6c:	009f5001 	addseq	r5, pc, r1
	...
    4f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f80:	00005100 	andeq	r5, r0, r0, lsl #2
    4f84:	00000000 	andeq	r0, r0, r0
    4f88:	00040000 	andeq	r0, r4, r0
    4f8c:	9f5101f3 	svcls	0x005101f3
	...
    4fa0:	00520001 	subseq	r0, r2, r1
    4fa4:	00000000 	andeq	r0, r0, r0
    4fa8:	04000000 	streq	r0, [r0], #-0
    4fac:	5201f300 	andpl	pc, r1, #0, 6
    4fb0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4fb4:	00000000 	andeq	r0, r0, r0
    4fb8:	52000100 	andpl	r0, r0, #0, 2
	...
    4fc4:	01f30015 	mvnseq	r0, r5, lsl r0
    4fc8:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4fcc:	01f35201 	mvnseq	r5, r1, lsl #4
    4fd0:	30254052 	eorcc	r4, r5, r2, asr r0
    4fd4:	0001282e 	andeq	r2, r1, lr, lsr #16
    4fd8:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    4fec:	00005300 	andeq	r5, r0, r0, lsl #6
    4ff0:	00000000 	andeq	r0, r0, r0
    4ff4:	00040000 	andeq	r0, r4, r0
    4ff8:	9f5301f3 	svcls	0x005301f3
	...
    500c:	80700004 	rsbshi	r0, r0, r4
    5010:	00009f04 	andeq	r9, r0, r4, lsl #30
    5014:	00000000 	andeq	r0, r0, r0
    5018:	000d0000 	andeq	r0, sp, r0
    501c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5020:	5001f324 	andpl	pc, r1, r4, lsr #6
    5024:	04802322 	streq	r2, [r0], #802	; 0x322
    5028:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    502c:	00000000 	andeq	r0, r0, r0
    5030:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    503c:	01f30052 	mvnseq	r0, r2, asr r0
    5040:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5044:	23225001 			; <UNDEFINED> instruction: 0x23225001
    5048:	01f30480 	mvnseq	r0, r0, lsl #9
    504c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5050:	f3225001 	vhadd.u32	d5, d2, d1
    5054:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5058:	01282930 			; <UNDEFINED> instruction: 0x01282930
    505c:	23131600 	tstcs	r3, #0, 12
    5060:	01f30484 	mvnseq	r0, r4, lsl #9
    5064:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5068:	23225001 			; <UNDEFINED> instruction: 0x23225001
    506c:	01f30480 	mvnseq	r0, r0, lsl #9
    5070:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5074:	f3225001 	vhadd.u32	d5, d2, d1
    5078:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    507c:	01282930 			; <UNDEFINED> instruction: 0x01282930
    5080:	f3131600 	vmax.u16	d1, d3, d0
    5084:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5088:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    508c:	9f131600 	svcls	0x00131600
	...
    50a0:	00510001 	subseq	r0, r1, r1
    50a4:	00000000 	andeq	r0, r0, r0
    50a8:	2f000000 	svccs	0x00000000
    50ac:	01f33000 	mvnseq	r3, r0
    50b0:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    50b4:	01f35201 	mvnseq	r5, r1, lsl #4
    50b8:	30254052 	eorcc	r4, r5, r2, asr r0
    50bc:	0001282e 	andeq	r2, r1, lr, lsr #16
    50c0:	01f31316 	mvnseq	r1, r6, lsl r3
    50c4:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    50c8:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
    50cc:	16000128 	strne	r0, [r0], -r8, lsr #2
    50d0:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    50d4:	01282930 			; <UNDEFINED> instruction: 0x01282930
    50d8:	9f131600 	svcls	0x00131600
	...
    50ec:	00500001 	subseq	r0, r0, r1
    50f0:	00000000 	andeq	r0, r0, r0
    50f4:	04000000 	streq	r0, [r0], #-0
    50f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    50fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    510c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5118:	01f30004 	mvnseq	r0, r4
    511c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    512c:	00010000 	andeq	r0, r1, r0
    5130:	00000052 	andeq	r0, r0, r2, asr r0
    5134:	00000000 	andeq	r0, r0, r0
    5138:	f3000400 	vshl.u8	d0, d0, d0
    513c:	009f5201 	addseq	r5, pc, r1, lsl #4
    5140:	00000000 	andeq	r0, r0, r0
    5144:	01000000 	mrseq	r0, (UNDEF: 0)
    5148:	00005200 	andeq	r5, r0, r0, lsl #4
    514c:	00000000 	andeq	r0, r0, r0
    5150:	001b0000 	andseq	r0, fp, r0
    5154:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5158:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    515c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5160:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5164:	8000000f 	andhi	r0, r0, pc
    5168:	0001282b 	andeq	r2, r1, fp, lsr #16
    516c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    517c:	01000000 	mrseq	r0, (UNDEF: 0)
    5180:	00005300 	andeq	r5, r0, r0, lsl #6
    5184:	00000000 	andeq	r0, r0, r0
    5188:	00040000 	andeq	r0, r4, r0
    518c:	9f5301f3 	svcls	0x005301f3
	...
    5198:	00530001 	subseq	r0, r3, r1
    519c:	00000000 	andeq	r0, r0, r0
    51a0:	1b000000 	blne	51a8 <patchGenfskRfe+0x50>
    51a4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    51a8:	01f31c40 	mvnseq	r1, r0, asr #24
    51ac:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    51b0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    51b4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    51b8:	01282b80 	smlawbeq	r8, r0, fp, r2
    51bc:	9f131600 	svcls	0x00131600
	...
    51d0:	00910002 	addseq	r0, r1, r2
	...
    51dc:	007d0002 	rsbseq	r0, sp, r2
	...
    51f0:	80700004 	rsbshi	r0, r0, r4
    51f4:	00009f04 	andeq	r9, r0, r4, lsl #30
    51f8:	00000000 	andeq	r0, r0, r0
    51fc:	000d0000 	andeq	r0, sp, r0
    5200:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5204:	5001f324 	andpl	pc, r1, r4, lsr #6
    5208:	04802322 	streq	r2, [r0], #802	; 0x322
    520c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5210:	00000000 	andeq	r0, r0, r0
    5214:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5220:	01f30064 	mvnseq	r0, r4, rrx
    5224:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5228:	23225001 			; <UNDEFINED> instruction: 0x23225001
    522c:	01f30480 	mvnseq	r0, r0, lsl #9
    5230:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5234:	f3225001 	vhadd.u32	d5, d2, d1
    5238:	4b405301 	blmi	1019e44 <__ccfg+0xff9e9c>
    523c:	0f0c2224 	svceq	0x000c2224
    5240:	2c800000 	stccs	0, cr0, [r0], {0}
    5244:	16000128 	strne	r0, [r0], -r8, lsr #2
    5248:	04842313 	streq	r2, [r4], #787	; 0x313
    524c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5250:	5001f324 	andpl	pc, r1, r4, lsr #6
    5254:	04802322 	streq	r2, [r0], #802	; 0x322
    5258:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    525c:	5001f324 	andpl	pc, r1, r4, lsr #6
    5260:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5264:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5268:	00000f0c 	andeq	r0, r0, ip, lsl #30
    526c:	01282c80 	smlawbeq	r8, r0, ip, r2
    5270:	f3131600 	vmax.u16	d1, d3, d0
    5274:	4b405301 	blmi	1019e80 <__ccfg+0xff9ed8>
    5278:	0f0c2224 	svceq	0x000c2224
    527c:	2b800000 	blcs	fe005284 <_estack+0xde000284>
    5280:	16000128 	strne	r0, [r0], -r8, lsr #2
    5284:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5294:	000a0000 	andeq	r0, sl, r0
    5298:	ff0a0074 			; <UNDEFINED> instruction: 0xff0a0074
    529c:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    52a0:	00009f24 	andeq	r9, r0, r4, lsr #30
    52a4:	00000000 	andeq	r0, r0, r0
    52a8:	000c0000 	andeq	r0, ip, r0
    52ac:	0294007d 	addseq	r0, r4, #125	; 0x7d
    52b0:	1affff0a 	bne	4ee0 <__aeabi_lmul+0x580>
    52b4:	9f240073 	svcls	0x00240073
	...
    52c0:	007d0024 	rsbseq	r0, sp, r4, lsr #32
    52c4:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    52c8:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    52cc:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    52d0:	01f35301 	mvnseq	r5, r1, lsl #6
    52d4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    52d8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    52dc:	282b8000 	stmdacs	fp!, {pc}
    52e0:	13160001 	tstne	r6, #1
    52e4:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    52f4:	00010000 	andeq	r0, r1, r0
    52f8:	00000050 	andeq	r0, r0, r0, asr r0
    52fc:	00000000 	andeq	r0, r0, r0
    5300:	f3000400 	vshl.u8	d0, d0, d0
    5304:	009f5001 	addseq	r5, pc, r1
	...
    5314:	01000000 	mrseq	r0, (UNDEF: 0)
    5318:	00005100 	andeq	r5, r0, r0, lsl #2
    531c:	00000000 	andeq	r0, r0, r0
    5320:	00040000 	andeq	r0, r4, r0
    5324:	9f5101f3 	svcls	0x005101f3
	...
    5338:	00520001 	subseq	r0, r2, r1
    533c:	00000000 	andeq	r0, r0, r0
    5340:	01000000 	mrseq	r0, (UNDEF: 0)
    5344:	00005400 	andeq	r5, r0, r0, lsl #8
    5348:	00000000 	andeq	r0, r0, r0
    534c:	00150000 	andseq	r0, r5, r0
    5350:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5354:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    5358:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    535c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    5360:	13160001 	tstne	r6, #1
    5364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5374:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    5380:	01f3001d 	mvnseq	r0, sp, lsl r0
    5384:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5388:	f3022322 	vcgt.u8	d2, d2, d18
    538c:	01f35001 	mvnseq	r5, r1
    5390:	01f32251 	mvnseq	r2, r1, asr r2
    5394:	30254052 	eorcc	r4, r5, r2, asr r0
    5398:	0001282e 	andeq	r2, r1, lr, lsr #16
    539c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    53ac:	06000000 	streq	r0, [r0], -r0
    53b0:	74007500 	strvc	r7, [r0], #-1280	; 0xfffffb00
    53b4:	009f1a00 	addseq	r1, pc, r0, lsl #20
	...
    53c4:	01000000 	mrseq	r0, (UNDEF: 0)
    53c8:	00005500 	andeq	r5, r0, r0, lsl #10
    53cc:	00000000 	andeq	r0, r0, r0
    53d0:	001d0000 	andseq	r0, sp, r0
    53d4:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    53d8:	23225101 			; <UNDEFINED> instruction: 0x23225101
    53dc:	5001f302 	andpl	pc, r1, r2, lsl #6
    53e0:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    53e4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    53e8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    53ec:	13160001 	tstne	r6, #1
    53f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5400:	75000700 	strvc	r0, [r0, #-1792]	; 0xfffff900
    5404:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5408:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5418:	00050000 	andeq	r0, r5, r0
    541c:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    5420:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5430:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    543c:	01f30004 	mvnseq	r0, r4
    5440:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5450:	00010000 	andeq	r0, r1, r0
    5454:	00000051 	andeq	r0, r0, r1, asr r0
    5458:	00000000 	andeq	r0, r0, r0
    545c:	f3000400 	vshl.u8	d0, d0, d0
    5460:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    5470:	01000000 	mrseq	r0, (UNDEF: 0)
    5474:	00005200 	andeq	r5, r0, r0, lsl #4
    5478:	00000000 	andeq	r0, r0, r0
    547c:	00010000 	andeq	r0, r1, r0
    5480:	00000054 	andeq	r0, r0, r4, asr r0
    5484:	00000000 	andeq	r0, r0, r0
    5488:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    548c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5490:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5494:	4b405301 	blmi	101a0a0 <__ccfg+0xffa0f8>
    5498:	0f0c2224 	svceq	0x000c2224
    549c:	2b800000 	blcs	fe0054a4 <_estack+0xde0004a4>
    54a0:	16000128 	strne	r0, [r0], -r8, lsr #2
    54a4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    54b4:	00010000 	andeq	r0, r1, r0
    54b8:	00000053 	andeq	r0, r0, r3, asr r0
    54bc:	00000000 	andeq	r0, r0, r0
    54c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    54cc:	01f3001b 	mvnseq	r0, fp, lsl r0
    54d0:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    54d4:	01f35301 	mvnseq	r5, r1, lsl #6
    54d8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    54dc:	000f0c22 	andeq	r0, pc, r2, lsr #24
    54e0:	282b8000 	stmdacs	fp!, {pc}
    54e4:	13160001 	tstne	r6, #1
    54e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54f8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5504:	00700006 	rsbseq	r0, r0, r6
    5508:	9f220071 	svcls	0x00220071
	...
    5514:	00560001 	subseq	r0, r6, r1
    5518:	00000000 	andeq	r0, r0, r0
    551c:	23000000 	movwcs	r0, #0
    5520:	5001f300 	andpl	pc, r1, r0, lsl #6
    5524:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5528:	01f30223 	mvnseq	r0, r3, lsr #4
    552c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5530:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5534:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5538:	00000f0c 	andeq	r0, r0, ip, lsl #30
    553c:	01282b80 	smlawbeq	r8, r0, fp, r2
    5540:	9f131600 	svcls	0x00131600
	...
    5554:	00760006 	rsbseq	r0, r6, r6
    5558:	9f1a0074 	svcls	0x001a0074
	...
    5564:	00500001 	subseq	r0, r0, r1
	...
    5574:	01000000 	mrseq	r0, (UNDEF: 0)
    5578:	00005600 	andeq	r5, r0, r0, lsl #12
    557c:	00000000 	andeq	r0, r0, r0
    5580:	00230000 	eoreq	r0, r3, r0
    5584:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5588:	23225101 			; <UNDEFINED> instruction: 0x23225101
    558c:	5001f302 	andpl	pc, r1, r2, lsl #6
    5590:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5594:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5598:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    559c:	8000000f 	andhi	r0, r0, pc
    55a0:	0001282b 	andeq	r2, r1, fp, lsr #16
    55a4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    55b4:	07000000 	streq	r0, [r0, -r0]
    55b8:	0a007600 	beq	22dc0 <__ccfg+0x2e18>
    55bc:	9f1affff 	svcls	0x001affff
	...
    55d0:	00700005 	rsbseq	r0, r0, r5
    55d4:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    55ec:	52000000 	andpl	r0, r0, #0
    55f0:	01000000 	mrseq	r0, (UNDEF: 0)
    55f4:	00525100 	subseq	r5, r2, r0, lsl #2
    55f8:	00960000 	addseq	r0, r6, r0
    55fc:	00040000 	andeq	r0, r4, r0
    5600:	9f5101f3 	svcls	0x005101f3
    5604:	00000096 	muleq	r0, r6, r0
    5608:	00000098 	muleq	r0, r8, r0
    560c:	98510001 	ldmdals	r1, {r0}^
    5610:	a0000000 	andge	r0, r0, r0
    5614:	04000000 	streq	r0, [r0], #-0
    5618:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    561c:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5620:	0000a600 	andeq	sl, r0, r0, lsl #12
    5624:	51000100 	mrspl	r0, (UNDEF: 16)
    5628:	000000a6 	andeq	r0, r0, r6, lsr #1
    562c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5630:	01f30004 	mvnseq	r0, r4
    5634:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5640:	00020200 	andeq	r0, r2, r0, lsl #4
    5644:	00000000 	andeq	r0, r0, r0
    5648:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    5668:	002a0000 	eoreq	r0, sl, r0
    566c:	00010000 	andeq	r0, r1, r0
    5670:	00002a52 	andeq	r2, r0, r2, asr sl
    5674:	00004000 	andeq	r4, r0, r0
    5678:	71000900 	tstvc	r0, r0, lsl #18
    567c:	22007200 	andcs	r7, r0, #0, 4
    5680:	9f1c0074 	svcls	0x001c0074
    5684:	00000040 	andeq	r0, r0, r0, asr #32
    5688:	00000042 	andeq	r0, r0, r2, asr #32
    568c:	0071000b 	rsbseq	r0, r1, fp
    5690:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    5694:	1c401c00 	mcrrne	12, 0, r1, r0, cr0
    5698:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    569c:	00004c00 	andeq	r4, r0, r0, lsl #24
    56a0:	71000900 	tstvc	r0, r0, lsl #18
    56a4:	22007200 	andcs	r7, r0, #0, 4
    56a8:	9f1c0074 	svcls	0x001c0074
    56ac:	00000056 	andeq	r0, r0, r6, asr r0
    56b0:	0000005a 	andeq	r0, r0, sl, asr r0
    56b4:	5a530001 	bpl	14c56c0 <__ccfg+0x14a5718>
    56b8:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    56bc:	06000000 	streq	r0, [r0], -r0
    56c0:	76007300 	strvc	r7, [r0], -r0, lsl #6
    56c4:	5e9f1c00 	cdppl	12, 9, cr1, cr15, cr0, {0}
    56c8:	60000000 	andvs	r0, r0, r0
    56cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    56d0:	76007300 	strvc	r7, [r0], -r0, lsl #6
    56d4:	1c341c00 	ldcne	12, cr1, [r4], #-0
    56d8:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    56dc:	00006a00 	andeq	r6, r0, r0, lsl #20
    56e0:	73000600 	movwvc	r0, #1536	; 0x600
    56e4:	1c007600 	stcne	6, cr7, [r0], {-0}
    56e8:	00006a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    56ec:	00007200 	andeq	r7, r0, r0, lsl #4
    56f0:	72000800 	andvc	r0, r0, #0, 16
    56f4:	761a3f00 	ldrvc	r3, [sl], -r0, lsl #30
    56f8:	729f1c00 	addsvc	r1, pc, #0, 24
    56fc:	76000000 	strvc	r0, [r0], -r0
    5700:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5704:	5201f300 	andpl	pc, r1, #0, 6
    5708:	00761a3f 	rsbseq	r1, r6, pc, lsr sl
    570c:	00769f1c 	rsbseq	r9, r6, ip, lsl pc
    5710:	00780000 	rsbseq	r0, r8, r0
    5714:	00010000 	andeq	r0, r1, r0
    5718:	00007852 	andeq	r7, r0, r2, asr r8
    571c:	00008000 	andeq	r8, r0, r0
    5720:	56000100 	strpl	r0, [r0], -r0, lsl #2
    5724:	00000080 	andeq	r0, r0, r0, lsl #1
    5728:	00000082 	andeq	r0, r0, r2, lsl #1
    572c:	00730007 	rsbseq	r0, r3, r7
    5730:	22007620 	andcs	r7, r0, #32, 12	; 0x2000000
    5734:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5738:	00008800 	andeq	r8, r0, r0, lsl #16
    573c:	76000600 	strvc	r0, [r0], -r0, lsl #12
    5740:	1c007300 	stcne	3, cr7, [r0], {-0}
    5744:	0000889f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    5748:	00008c00 	andeq	r8, r0, r0, lsl #24
    574c:	73000700 	movwvc	r0, #1792	; 0x700
    5750:	00762000 	rsbseq	r2, r6, r0
    5754:	00969f22 	addseq	r9, r6, r2, lsr #30
    5758:	009a0000 	addseq	r0, sl, r0
    575c:	00010000 	andeq	r0, r1, r0
    5760:	00009a52 	andeq	r9, r0, r2, asr sl
    5764:	0000a000 	andeq	sl, r0, r0
    5768:	56000100 	strpl	r0, [r0], -r0, lsl #2
    576c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5770:	000000a2 	andeq	r0, r0, r2, lsr #1
    5774:	a2520001 	subsge	r0, r2, #1
    5778:	a6000000 	strge	r0, [r0], -r0
    577c:	01000000 	mrseq	r0, (UNDEF: 0)
    5780:	00a65600 	adceq	r5, r6, r0, lsl #12
    5784:	00aa0000 	adceq	r0, sl, r0
    5788:	00010000 	andeq	r0, r1, r0
    578c:	00000053 	andeq	r0, r0, r3, asr r0
    5790:	00000000 	andeq	r0, r0, r0
    5794:	00000200 	andeq	r0, r0, r0, lsl #4
    5798:	00000000 	andeq	r0, r0, r0
    579c:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    57a8:	00007600 	andeq	r7, r0, r0, lsl #12
    57ac:	50000100 	andpl	r0, r0, r0, lsl #2
    57b0:	00000076 	andeq	r0, r0, r6, ror r0
    57b4:	00000080 	andeq	r0, r0, r0, lsl #1
    57b8:	80550001 	subshi	r0, r5, r1
    57bc:	82000000 	andhi	r0, r0, #0
    57c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    57c4:	73007500 	movwvc	r7, #1280	; 0x500
    57c8:	01232200 			; <UNDEFINED> instruction: 0x01232200
    57cc:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    57d0:	00008200 	andeq	r8, r0, r0, lsl #4
    57d4:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    57d8:	22007300 	andcs	r7, r0, #0, 6
    57dc:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    57e0:	00008c00 	andeq	r8, r0, r0, lsl #24
    57e4:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    57e8:	22007300 	andcs	r7, r0, #0, 6
    57ec:	969f0123 	ldrls	r0, [pc], r3, lsr #2
    57f0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    57f4:	01000000 	mrseq	r0, (UNDEF: 0)
    57f8:	00985000 	addseq	r5, r8, r0
    57fc:	00a00000 	adceq	r0, r0, r0
    5800:	00010000 	andeq	r0, r1, r0
    5804:	0000a055 	andeq	sl, r0, r5, asr r0
    5808:	0000aa00 	andeq	sl, r0, r0, lsl #20
    580c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5818:	00000003 	andeq	r0, r0, r3
    581c:	00000000 	andeq	r0, r0, r0
    5820:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    582c:	00000052 	andeq	r0, r0, r2, asr r0
    5830:	52510001 	subspl	r0, r1, #1
    5834:	76000000 	strvc	r0, [r0], -r0
    5838:	04000000 	streq	r0, [r0], #-0
    583c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5840:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5844:	00008000 	andeq	r8, r0, r0
    5848:	51000100 	mrspl	r0, (UNDEF: 16)
    584c:	00000080 	andeq	r0, r0, r0, lsl #1
    5850:	00000082 	andeq	r0, r0, r2, lsl #1
    5854:	00710008 	rsbseq	r0, r1, r8
    5858:	23220073 			; <UNDEFINED> instruction: 0x23220073
    585c:	00829f01 	addeq	r9, r2, r1, lsl #30
    5860:	00820000 	addeq	r0, r2, r0
    5864:	00060000 	andeq	r0, r6, r0
    5868:	00730071 	rsbseq	r0, r3, r1, ror r0
    586c:	00829f22 	addeq	r9, r2, r2, lsr #30
    5870:	008c0000 	addeq	r0, ip, r0
    5874:	00080000 	andeq	r0, r8, r0
    5878:	00730071 	rsbseq	r0, r3, r1, ror r0
    587c:	9f012322 	svcls	0x00012322
    5880:	00000096 	muleq	r0, r6, r0
    5884:	000000a6 	andeq	r0, r0, r6, lsr #1
    5888:	a6510001 	ldrbge	r0, [r1], -r1
    588c:	aa000000 	bge	5894 <patchImageGenfsk+0x88>
    5890:	04000000 	streq	r0, [r0], #-0
    5894:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5898:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    589c:	00000000 	andeq	r0, r0, r0
    58a0:	01010000 	mrseq	r0, (UNDEF: 1)
    58a4:	02020101 	andeq	r0, r2, #1073741824	; 0x40000000
    58a8:	00000101 	andeq	r0, r0, r1, lsl #2
    58ac:	00000000 	andeq	r0, r0, r0
    58b0:	00000101 	andeq	r0, r0, r1, lsl #2
    58b4:	00000000 	andeq	r0, r0, r0
    58b8:	00002a00 	andeq	r2, r0, r0, lsl #20
    58bc:	00002c00 	andeq	r2, r0, r0, lsl #24
    58c0:	70000900 	andvc	r0, r0, r0, lsl #18
    58c4:	1c007100 	stfnes	f7, [r0], {-0}
    58c8:	9f220074 	svcls	0x00220074
    58cc:	0000002c 	andeq	r0, r0, ip, lsr #32
    58d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    58d4:	0070000b 	rsbseq	r0, r0, fp
    58d8:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    58dc:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    58e0:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    58e4:	00003a00 	andeq	r3, r0, r0, lsl #20
    58e8:	70000b00 	andvc	r0, r0, r0, lsl #22
    58ec:	1c007100 	stfnes	f7, [r0], {-0}
    58f0:	23220074 			; <UNDEFINED> instruction: 0x23220074
    58f4:	003a9f08 	eorseq	r9, sl, r8, lsl #30
    58f8:	00400000 	subeq	r0, r0, r0
    58fc:	000b0000 	andeq	r0, fp, r0
    5900:	00710070 	rsbseq	r0, r1, r0, ror r0
    5904:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5908:	409f0c23 	addsmi	r0, pc, r3, lsr #24
    590c:	42000000 	andmi	r0, r0, #0
    5910:	0b000000 	bleq	5918 <patchImageGenfsk+0x10c>
    5914:	71007000 	mrsvc	r7, (UNDEF: 0)
    5918:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    591c:	9f102322 	svcls	0x00102322
    5920:	00000042 	andeq	r0, r0, r2, asr #32
    5924:	0000004c 	andeq	r0, r0, ip, asr #32
    5928:	00700009 	rsbseq	r0, r0, r9
    592c:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    5930:	569f2200 	ldrpl	r2, [pc], r0, lsl #4
    5934:	5a000000 	bpl	593c <patchImageGenfsk+0x130>
    5938:	01000000 	mrseq	r0, (UNDEF: 0)
    593c:	005a5500 	subseq	r5, sl, r0, lsl #10
    5940:	005a0000 	subseq	r0, sl, r0
    5944:	00060000 	andeq	r0, r6, r0
    5948:	00760075 	rsbseq	r0, r6, r5, ror r0
    594c:	005a9f22 	subseq	r9, sl, r2, lsr #30
    5950:	00600000 	rsbeq	r0, r0, r0
    5954:	00080000 	andeq	r0, r8, r0
    5958:	00760075 	rsbseq	r0, r6, r5, ror r0
    595c:	9f042322 	svcls	0x00042322
    5960:	00000060 	andeq	r0, r0, r0, rrx
    5964:	00000074 	andeq	r0, r0, r4, ror r0
    5968:	00750006 	rsbseq	r0, r5, r6
    596c:	9f220076 	svcls	0x00220076
    5970:	00000074 	andeq	r0, r0, r4, ror r0
    5974:	00000078 	andeq	r0, r0, r8, ror r0
    5978:	017c000b 	cmneq	ip, fp
    597c:	00702434 	rsbseq	r2, r0, r4, lsr r4
    5980:	22007622 	andcs	r7, r0, #35651584	; 0x2200000
    5984:	0000a69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5988:	0000aa00 	andeq	sl, r0, r0, lsl #20
    598c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    5998:	01010100 	mrseq	r0, (UNDEF: 17)
    599c:	01020201 	tsteq	r2, r1, lsl #4
    59a0:	00000001 	andeq	r0, r0, r1
    59a4:	01000000 	mrseq	r0, (UNDEF: 0)
    59a8:	00000001 	andeq	r0, r0, r1
    59ac:	00000000 	andeq	r0, r0, r0
    59b0:	0000002a 	andeq	r0, r0, sl, lsr #32
    59b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    59b8:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    59bc:	3a000000 	bcc	59c4 <patchImageGenfsk+0x1b8>
    59c0:	03000000 	movweq	r0, #0
    59c4:	9f047400 	svcls	0x00047400
    59c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    59cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    59d0:	08740003 	ldmdaeq	r4!, {r0, r1}^
    59d4:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    59d8:	00004000 	andeq	r4, r0, r0
    59dc:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    59e0:	00409f0c 	subeq	r9, r0, ip, lsl #30
    59e4:	00420000 	subeq	r0, r2, r0
    59e8:	00030000 	andeq	r0, r3, r0
    59ec:	429f1074 	addsmi	r1, pc, #116	; 0x74
    59f0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    59f4:	01000000 	mrseq	r0, (UNDEF: 0)
    59f8:	00545400 	subseq	r5, r4, r0, lsl #8
    59fc:	005a0000 	subseq	r0, sl, r0
    5a00:	00010000 	andeq	r0, r1, r0
    5a04:	00005a51 	andeq	r5, r0, r1, asr sl
    5a08:	00005a00 	andeq	r5, r0, r0, lsl #20
    5a0c:	71000600 	tstvc	r0, r0, lsl #12
    5a10:	22007600 	andcs	r7, r0, #0, 12
    5a14:	00005a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5a18:	00006000 	andeq	r6, r0, r0
    5a1c:	71000800 	tstvc	r0, r0, lsl #16
    5a20:	22007600 	andcs	r7, r0, #0, 12
    5a24:	609f0423 	addsvs	r0, pc, r3, lsr #8
    5a28:	76000000 	strvc	r0, [r0], -r0
    5a2c:	06000000 	streq	r0, [r0], -r0
    5a30:	76007100 	strvc	r7, [r0], -r0, lsl #2
    5a34:	769f2200 	ldrvc	r2, [pc], r0, lsl #4
    5a38:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5a3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5a40:	34017c00 	strcc	r7, [r1], #-3072	; 0xfffff400
    5a44:	5101f324 	tstpl	r1, r4, lsr #6	; <UNPREDICTABLE>
    5a48:	22007622 	andcs	r7, r0, #35651584	; 0x2200000
    5a4c:	0000a69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5a50:	0000aa00 	andeq	sl, r0, r0, lsl #20
    5a54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5a64:	001a0100 	andseq	r0, sl, r0, lsl #2
    5a68:	001c0000 	andseq	r0, ip, r0
    5a6c:	00010000 	andeq	r0, r1, r0
    5a70:	00001c54 	andeq	r1, r0, r4, asr ip
    5a74:	00002400 	andeq	r2, r0, r0, lsl #8
    5a78:	73000200 	movwvc	r0, #512	; 0x200
    5a7c:	00002700 	andeq	r2, r0, r0, lsl #14
    5a80:	00003800 	andeq	r3, r0, r0, lsl #16
    5a84:	74000400 	strvc	r0, [r0], #-1024	; 0xfffffc00
    5a88:	009f7ed8 			; <UNDEFINED> instruction: 0x009f7ed8
	...
    5a94:	04000000 	streq	r0, [r0], #-0
    5a98:	06000000 	streq	r0, [r0], -r0
    5a9c:	02000000 	andeq	r0, r0, #0
    5aa0:	06007300 	streq	r7, [r0], -r0, lsl #6
    5aa4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5aa8:	01000000 	mrseq	r0, (UNDEF: 0)
    5aac:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    5abc:	000e0000 	andeq	r0, lr, r0
    5ac0:	00060000 	andeq	r0, r6, r0
    5ac4:	51049350 	tstpl	r4, r0, asr r3
    5ac8:	000e0493 	muleq	lr, r3, r4
    5acc:	00540000 	subseq	r0, r4, r0
    5ad0:	00060000 	andeq	r0, r6, r0
    5ad4:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    5ad8:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5ae8:	003e0000 	eorseq	r0, lr, r0
    5aec:	00060000 	andeq	r0, r6, r0
    5af0:	53049352 	movwpl	r9, #17234	; 0x4352
    5af4:	003e0493 	mlaseq	lr, r3, r4, r0
    5af8:	00540000 	subseq	r0, r4, r0
    5afc:	00060000 	andeq	r0, r6, r0
    5b00:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
    5b04:	00009f25 	andeq	r9, r0, r5, lsr #30
    5b08:	00000000 	andeq	r0, r0, r0
    5b0c:	02000000 	andeq	r0, r0, #0
    5b10:	0000001a 	andeq	r0, r0, sl, lsl r0
    5b14:	0000004a 	andeq	r0, r0, sl, asr #32
    5b18:	00560001 	subseq	r0, r6, r1
    5b1c:	00000000 	andeq	r0, r0, r0
    5b20:	01000000 	mrseq	r0, (UNDEF: 0)
    5b24:	00000000 	andeq	r0, r0, r0
    5b28:	00001a00 	andeq	r1, r0, r0, lsl #20
    5b2c:	00001e00 	andeq	r1, r0, r0, lsl #28
    5b30:	70000600 	andvc	r0, r0, r0, lsl #12
    5b34:	1e007400 	cfcpysne	mvf7, mvf0
    5b38:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    5b3c:	00002200 	andeq	r2, r0, r0, lsl #4
    5b40:	50000100 	andpl	r0, r0, r0, lsl #2
    5b44:	00000026 	andeq	r0, r0, r6, lsr #32
    5b48:	00000044 	andeq	r0, r0, r4, asr #32
    5b4c:	00540001 	subseq	r0, r4, r1
	...
    5b58:	1c000000 	stcne	0, cr0, [r0], {-0}
    5b5c:	36000000 	strcc	r0, [r0], -r0
    5b60:	01000000 	mrseq	r0, (UNDEF: 0)
    5b64:	00365500 	eorseq	r5, r6, r0, lsl #10
    5b68:	003e0000 	eorseq	r0, lr, r0
    5b6c:	000c0000 	andeq	r0, ip, r0
    5b70:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    5b74:	007c2540 	rsbseq	r2, ip, r0, asr #10
    5b78:	9f1e2540 	svcls	0x001e2540
	...
    5b84:	00200000 	eoreq	r0, r0, r0
    5b88:	003c0000 	eorseq	r0, ip, r0
    5b8c:	00010000 	andeq	r0, r1, r0
    5b90:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5b9c:	00001200 	andeq	r1, r0, r0, lsl #4
    5ba0:	00001e00 	andeq	r1, r0, r0, lsl #28
    5ba4:	50000100 	andpl	r0, r0, r0, lsl #2
    5ba8:	0000001e 	andeq	r0, r0, lr, lsl r0
    5bac:	00000054 	andeq	r0, r0, r4, asr r0
    5bb0:	007c0007 	rsbseq	r0, ip, r7
    5bb4:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5bb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5bc4:	00001600 	andeq	r1, r0, r0, lsl #12
    5bc8:	00001c00 	andeq	r1, r0, r0, lsl #24
    5bcc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5bd0:	0000001c 	andeq	r0, r0, ip, lsl r0
    5bd4:	0000003e 	andeq	r0, r0, lr, lsr r0
    5bd8:	00720007 	rsbseq	r0, r2, r7
    5bdc:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5be0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5bec:	00001400 	andeq	r1, r0, r0, lsl #8
    5bf0:	00002000 	andeq	r2, r0, r0
    5bf4:	51000100 	mrspl	r0, (UNDEF: 16)
    5bf8:	00000020 	andeq	r0, r0, r0, lsr #32
    5bfc:	00000054 	andeq	r0, r0, r4, asr r0
    5c00:	007c0005 	rsbseq	r0, ip, r5
    5c04:	009f2540 	addseq	r2, pc, r0, asr #10
    5c08:	00000000 	andeq	r0, r0, r0
    5c0c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c10:	16000000 	strne	r0, [r0], -r0
    5c14:	24000000 	strcs	r0, [r0], #-0
    5c18:	01000000 	mrseq	r0, (UNDEF: 0)
    5c1c:	00245400 	eoreq	r5, r4, r0, lsl #8
    5c20:	003e0000 	eorseq	r0, lr, r0
    5c24:	00050000 	andeq	r0, r5, r0
    5c28:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    5c2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5c30:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000a4 	andeq	r0, r0, r4, lsr #1
  18:	00000000 	andeq	r0, r0, r0
};
  1c:	00000006 	andeq	r0, r0, r6
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000008 	andeq	r0, r0, r8
  30:	0000016c 	andeq	r0, r0, ip, ror #2
  34:	00000014 	andeq	r0, r0, r4, lsl r0
  38:	00000180 	andeq	r0, r0, r0, lsl #3
  3c:	00000024 	andeq	r0, r0, r4, lsr #32
			i = k;
  40:	000001a4 	andeq	r0, r0, r4, lsr #3
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	00000000 	andeq	r0, r0, r0
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	000001cc 	andeq	r0, r0, ip, asr #3
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
			nq++;
  60:	000001e8 	andeq	r0, r0, r8, ror #3
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	00000394 	muleq	r0, r4, r3
  68:	00000000 	andeq	r0, r0, r0
  6c:	0000001e 	andeq	r0, r0, lr, lsl r0
  70:	0000057c 	andeq	r0, r0, ip, ror r5
  74:	00000026 	andeq	r0, r0, r6, lsr #32
  78:	00000000 	andeq	r0, r0, r0
  7c:	00000012 	andeq	r0, r0, r2, lsl r0
  80:	000005a4 	andeq	r0, r0, r4, lsr #11
  84:	00000588 	andeq	r0, r0, r8, lsl #11
	...
	if (!button_still_pressed (__button_list [pbutton]))
  90:	000000e4 	andeq	r0, r0, r4, ror #1
  94:	1cc40002 	stclne	0, cr0, [r4], {2}
  98:	00040000 	andeq	r0, r4, r0
	if (baction == NULL)
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00000b2c 	andeq	r0, r0, ip, lsr #22
	(*baction) (pbutton);
  a4:	0000000c 	andeq	r0, r0, ip
endthread
  a8:	00000b38 	andeq	r0, r0, r8, lsr fp
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	00000b64 	andeq	r0, r0, r4, ror #22
endthread
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	00000b90 	muleq	r0, r0, fp
  bc:	0000003c 	andeq	r0, r0, ip, lsr r0
  c0:	00000bcc 	andeq	r0, r0, ip, asr #23
  c4:	00000040 	andeq	r0, r0, r0, asr #32
fsm sender(struct ResponseMessage *message) {
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000c0c 	andeq	r0, r0, ip, lsl #24
}
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000c60 	andeq	r0, r0, r0, ror #24
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00000ca0 	andeq	r0, r0, r0, lsr #25
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000cc8 	andeq	r0, r0, r8, asr #25
		packet[0] = 0;
  ec:	00000114 	andeq	r0, r0, r4, lsl r1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  f0:	00000ddc 	ldrdeq	r0, [r0], -ip
		*p = message->tpe;p++;
  f4:	00000050 	andeq	r0, r0, r0, asr r0
  f8:	00000e2c 	andeq	r0, r0, ip, lsr #28
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  fc:	00000054 	andeq	r0, r0, r4, asr r0
		*p = message->sender_id;p++;
 100:	00000e80 	andeq	r0, r0, r0, lsl #29
		*p = message->receiver_id;p++;
 104:	00000038 	andeq	r0, r0, r8, lsr r0
		switch(message->tpe) {
 108:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
 10c:	00000110 	andeq	r0, r0, r0, lsl r1
 110:	00000000 	andeq	r0, r0, r0
		tcv_endp(packet);
 114:	0000000c 	andeq	r0, r0, ip
 118:	00000fc8 	andeq	r0, r0, r8, asr #31
		ser_out(CONFIRM_message, "Message sent\r\n");
 11c:	000000c0 	andeq	r0, r0, r0, asr #1
 120:	00001088 	andeq	r1, r0, r8, lsl #1
}
 124:	00000044 	andeq	r0, r0, r4, asr #32
		finish;
 128:	000010cc 	andeq	r1, r0, ip, asr #1
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
				*p = message->status;p++;
 130:	00001108 	andeq	r1, r0, r8, lsl #2
 134:	000000a4 	andeq	r0, r0, r4, lsr #1
				strncpy(p, message->record, sizeof(message->record));
 138:	000011ac 	andeq	r1, r0, ip, lsr #3
				*p = message->padding;p++;
 13c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
				strncpy(p, message->record, sizeof(message->record));
 140:	00001364 	andeq	r1, r0, r4, ror #6
				strncpy(p, message->record, sizeof(message->record));
 144:	00000024 	andeq	r0, r0, r4, lsr #32
 148:	00000000 	andeq	r0, r0, r0
				strncpy(p, message->record, sizeof(message->record));
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
				*p = message->record_index;p++;
 150:	00001388 	andeq	r1, r0, r8, lsl #7
				*p = message->padding;
 154:	00000258 	andeq	r0, r0, r8, asr r2
				break;
 158:	000015e0 	andeq	r1, r0, r0, ror #11
 15c:	00000030 	andeq	r0, r0, r0, lsr r0
 160:	00000000 	andeq	r0, r0, r0
 164:	0000005c 	andeq	r0, r0, ip, asr r0
 168:	00001610 	andeq	r1, r0, r0, lsl r6
		node->nnodes[i] = 0;
 16c:	00000060 	andeq	r0, r0, r0, rrx
	...
 178:	00000154 	andeq	r0, r0, r4, asr r1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 17c:	31540002 	cmpcc	r4, r2
bool init_node(struct Node* node){
 180:	00040000 	andeq	r0, r4, r0
    node->id  = 0;                  // default id value 0
 184:	00000000 	andeq	r0, r0, r0
    node->index = 0;                // default entry count 0
 188:	00001670 	andeq	r1, r0, r0, ror r6
    node->data_base.item_count = 0; // default no items in array
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
	reset_array(node);
 190:	000016ac 	andeq	r1, r0, ip, lsr #13
    DEBUG_PRINT("Error initializing node...\n");
 194:	00000080 	andeq	r0, r0, r0, lsl #1
 198:	0000172c 	andeq	r1, r0, ip, lsr #14
};
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
uint8_t generate_request_num(void){
 1a4:	00000024 	andeq	r0, r0, r4, lsr #32
    return (uint8_t) (rand() % 255);
 1a8:	00001744 	andeq	r1, r0, r4, asr #14
 1ac:	00000010 	andeq	r0, r0, r0, lsl r0
 1b0:	00001754 	andeq	r1, r0, r4, asr r7
}
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
            node->nnodes[i] = 0; // set to null byte
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
 1c0:	00001780 	andeq	r1, r0, r0, lsl #15
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 1c4:	00000006 	andeq	r0, r0, r6
};
 1c8:	00001788 	andeq	r1, r0, r8, lsl #15
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
 1cc:	000000cc 	andeq	r0, r0, ip, asr #1
 1d0:	00001854 	andeq	r1, r0, r4, asr r8
        node->data_base.item_array[index].data_entry[0] = '\0';
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
 1d8:	00001868 	andeq	r1, r0, r8, ror #16
 1dc:	00000034 	andeq	r0, r0, r4, lsr r0
        node->data_base.item_count -= 1;
 1e0:	0000189c 	muleq	r0, ip, r8
};
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
fsm receiver(struct Node* node_db) {
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	000018d0 	ldrdeq	r1, [r0], -r0
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
 1f8:	000018f4 	strdeq	r1, [r0], -r4
 1fc:	00000038 	andeq	r0, r0, r8, lsr r0
 200:	00000000 	andeq	r0, r0, r0
 204:	00000014 	andeq	r0, r0, r4, lsl r0
 208:	00000000 	andeq	r0, r0, r0
 20c:	00000040 	andeq	r0, r0, r0, asr #32
		incoming_packet = tcv_rnp(receiving, sfd);
 210:	00000000 	andeq	r0, r0, r0
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	0000192c 	andeq	r1, r0, ip, lsr #18
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
		payload = (struct ResponseMessage*)(incoming_packet+1);
 220:	00000000 	andeq	r0, r0, r0
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	00001950 	andeq	r1, r0, r0, asr r9
 22c:	0000000e 	andeq	r0, r0, lr
 230:	0000195e 	andeq	r1, r0, lr, asr r9
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
 234:	00000010 	andeq	r0, r0, r0, lsl r0
 238:	0000196e 	andeq	r1, r0, lr, ror #18
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
 240:	00000000 	andeq	r0, r0, r0
 244:	00000010 	andeq	r0, r0, r0, lsl r0
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000006 	andeq	r0, r0, r6
 250:	0000198a 	andeq	r1, r0, sl, lsl #19
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
 254:	00000014 	andeq	r0, r0, r4, lsl r0
 258:	0000199e 	muleq	r0, lr, r9
		switch (tpe){
 25c:	0000000e 	andeq	r0, r0, lr
 260:	000019ac 	andeq	r1, r0, ip, lsr #19
 264:	00000024 	andeq	r0, r0, r4, lsr #32
 268:	000019d0 	ldrdeq	r1, [r0], -r0
 26c:	0000009c 	muleq	r0, ip, r0
 270:	00001a6c 	andeq	r1, r0, ip, ror #20
 274:	00000050 	andeq	r0, r0, r0, asr r0
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
 278:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
 27c:	00000048 	andeq	r0, r0, r8, asr #32
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
 280:	00001b04 	andeq	r1, r0, r4, lsl #22
 284:	00000050 	andeq	r0, r0, r0, asr r0
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
 288:	00000000 	andeq	r0, r0, r0
 28c:	00000058 	andeq	r0, r0, r8, asr r0
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
 290:	00001b54 	andeq	r1, r0, r4, asr fp
 294:	000000a8 	andeq	r0, r0, r8, lsr #1
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
 298:	00001bfc 	strdeq	r1, [r0], -ip
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
				if (discovery_request_message->gid == node_db->gid){
 2a0:	00001c30 	andeq	r1, r0, r0, lsr ip
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
					response_message_0->gid = discovery_request_message->gid;
 2a8:	00000000 	andeq	r0, r0, r0
					response_message_0->tpe = DISCOVERY_RESPONSE;
 2ac:	00000030 	andeq	r0, r0, r0, lsr r0
					response_message_0->request_number = discovery_request_message->request_number;
 2b0:	00000000 	andeq	r0, r0, r0
					response_message_0->sender_id = node_db->id;
 2b4:	00000038 	andeq	r0, r0, r8, lsr r0
					response_message_0->receiver_id = discovery_request_message->sender_id;
 2b8:	00001c48 	andeq	r1, r0, r8, asr #24
					call sender(response_message_0, done_case);
 2bc:	0000013c 	andeq	r0, r0, ip, lsr r1
 2c0:	00001d84 	andeq	r1, r0, r4, lsl #27
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
 2d0:	00000104 	andeq	r0, r0, r4, lsl #2
 2d4:	43770002 	cmnmi	r7, #2
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
 2d8:	00040000 	andeq	r0, r4, r0
 2dc:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
 2e0:	00001da8 	andeq	r1, r0, r8, lsr #27
 2e4:	00000016 	andeq	r0, r0, r6, lsl r0
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
 2e8:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
 2ec:	0000001a 	andeq	r0, r0, sl, lsl r0
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
 2f0:	00001dd8 	ldrdeq	r1, [r0], -r8
 2f4:	0000000e 	andeq	r0, r0, lr
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 2f8:	00001de8 	andeq	r1, r0, r8, ror #27
 2fc:	0000004c 	andeq	r0, r0, ip, asr #32
 300:	00001e34 	andeq	r1, r0, r4, lsr lr
 304:	0000008c 	andeq	r0, r0, ip, lsl #1
 308:	00001ec0 	andeq	r1, r0, r0, asr #29
 30c:	00000070 	andeq	r0, r0, r0, ror r0
 310:	00001f30 	andeq	r1, r0, r0, lsr pc
 314:	000000c0 	andeq	r0, r0, r0, asr #1
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000006c 	andeq	r0, r0, ip, rrx
					node_db->index+=1;
 320:	00001ff0 	strdeq	r1, [r0], -r0
		tcv_endp(incoming_packet);
 324:	00000024 	andeq	r0, r0, r4, lsr #32
 328:	00002014 	andeq	r2, r0, r4, lsl r0
		proceed receiving;
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
 330:	00000000 	andeq	r0, r0, r0
		ser_out(response_1_create, "\r\nData Saved");
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 33c:	00000078 	andeq	r0, r0, r8, ror r0
		ser_out(response_1_delete, "\r\nRecord Deleted");
 340:	00002094 	muleq	r0, r4, r0
 344:	000000bc 	strheq	r0, [r0], -ip
		proceed receiving;
 348:	00002150 	andeq	r2, r0, r0, asr r1
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 350:	00000000 	andeq	r0, r0, r0
 354:	00000038 	andeq	r0, r0, r8, lsr r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000000a 	andeq	r0, r0, sl
		proceed receiving;
 360:	0000218c 	andeq	r2, r0, ip, lsl #3
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
 368:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
 36c:	00000060 	andeq	r0, r0, r0, rrx
 370:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 374:	00000040 	andeq	r0, r0, r0, asr #32
 378:	00000000 	andeq	r0, r0, r0
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
 37c:	0000002c 	andeq	r0, r0, ip, lsr #32
 380:	00000000 	andeq	r0, r0, r0
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
		proceed receiving;
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000006 	andeq	r0, r0, r6
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
 390:	00002218 	andeq	r2, r0, r8, lsl r2
 394:	00000068 	andeq	r0, r0, r8, rrx
 398:	00002280 	andeq	r2, r0, r0, lsl #5
		proceed receiving;
 39c:	00000050 	andeq	r0, r0, r0, asr r0
 3a0:	000022d0 	ldrdeq	r2, [r0], -r0
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 3a4:	0000009c 	muleq	r0, ip, r0
		proceed receiving;
 3a8:	0000236c 	andeq	r2, r0, ip, ror #6
 3ac:	00000040 	andeq	r0, r0, r0, asr #32
}
 3b0:	000023ac 	andeq	r2, r0, ip, lsr #7
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
 3b4:	00000034 	andeq	r0, r0, r4, lsr r0
 3b8:	000023e0 	andeq	r2, r0, r0, ror #7
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
 3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c0:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c8:	0000241c 	andeq	r2, r0, ip, lsl r4
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
 3cc:	00000002 	andeq	r0, r0, r2
	...
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
 3d8:	00000034 	andeq	r0, r0, r4, lsr r0
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
 3dc:	56ae0002 	strtpl	r0, [lr], r2
 3e0:	00040000 	andeq	r0, r4, r0
 3e4:	00000000 	andeq	r0, r0, r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
 3e8:	0000241e 	andeq	r2, r0, lr, lsl r4
 3ec:	00000002 	andeq	r0, r0, r2
 3f0:	00002420 	andeq	r2, r0, r0, lsr #8
		strncpy(response_message->record, rec, 20);
 3f4:	00000002 	andeq	r0, r0, r2
 3f8:	00002422 	andeq	r2, r0, r2, lsr #8
 3fc:	00000002 	andeq	r0, r0, r2
					call sender(response_message_4, done_case);
 400:	00002424 	andeq	r2, r0, r4, lsr #8
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 404:	00000044 	andeq	r0, r0, r4, asr #32
	...
 410:	00000014 	andeq	r0, r0, r4, lsl r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 414:	58260002 	stmdapl	r6!, {r1}
 418:	00040000 	andeq	r0, r4, r0
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	5d610002 	stclpl	0, cr0, [r1, #-8]!
 430:	00040000 	andeq	r0, r4, r0
	...
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 43c:	00000002 	andeq	r0, r0, r2
 440:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
 444:	00000058 	andeq	r0, r0, r8, asr r0
	...
 450:	00000024 	andeq	r0, r0, r4, lsr #32
 454:	62650002 	rsbvs	r0, r5, #2
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 458:	00040000 	andeq	r0, r4, r0
	...
 464:	000000cc 	andeq	r0, r0, ip, asr #1
 468:	00000000 	andeq	r0, r0, r0
		strncpy(response_message->record, rec, 20);
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 478:	0000008c 	andeq	r0, r0, ip, lsl #1
 47c:	675f0002 	ldrbvs	r0, [pc, -r2]
 480:	00040000 	andeq	r0, r4, r0
 484:	00000000 	andeq	r0, r0, r0
 488:	00002470 	andeq	r2, r0, r0, ror r4
 48c:	00000034 	andeq	r0, r0, r4, lsr r0
 490:	000024a4 	andeq	r2, r0, r4, lsr #9
 494:	00000030 	andeq	r0, r0, r0, lsr r0
 498:	000024d4 	ldrdeq	r2, [r0], -r4
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	000024ec 	andeq	r2, r0, ip, ror #9
 4a4:	00000054 	andeq	r0, r0, r4, asr r0
 4a8:	00002540 	andeq	r2, r0, r0, asr #10
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
 4b0:	00002580 	andeq	r2, r0, r0, lsl #11
 4b4:	00000024 	andeq	r0, r0, r4, lsr #32
 4b8:	000025a4 	andeq	r2, r0, r4, lsr #11
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000064 	andeq	r0, r0, r4, rrx
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	00000128 	andeq	r0, r0, r8, lsr #2
 4d8:	00000000 	andeq	r0, r0, r0
 4dc:	000000ec 	andeq	r0, r0, ip, ror #1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	00000004 	andeq	r0, r0, r4
 4f0:	00000000 	andeq	r0, r0, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
				if(!response_flag){
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
					response_flag=1;
 50c:	720a0002 	andvc	r0, sl, #2
					trigger(&response_flag);
 510:	00040000 	andeq	r0, r4, r0
				switch(response_message_5->status){
 514:	00000000 	andeq	r0, r0, r0
 518:	000025cc 	andeq	r2, r0, ip, asr #11
 51c:	0000006c 	andeq	r0, r0, ip, rrx
	...
						if (response_checker[0] == response_message_5->request_number){
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	762c0002 	strtvc	r0, [ip], -r2
 530:	00040000 	andeq	r0, r4, r0
							switch(response_checker[1]){
 534:	00000000 	andeq	r0, r0, r0
 538:	00002638 	andeq	r2, r0, r8, lsr r6
 53c:	00000078 	andeq	r0, r0, r8, ror r0
	...
						break;
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
									proceed response_1_delete;
 54c:	7a420002 	bvc	108055c <__ccfg+0x10605b4>
									proceed response_1_retrieve;
 550:	00040000 	andeq	r0, r4, r0
						proceed response_2;
 554:	00000000 	andeq	r0, r0, r0
						proceed response_3;
 558:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
						proceed response_4;
 55c:	00000054 	andeq	r0, r0, r4, asr r0
	...
}
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	7e920002 	cdpvc	0, 9, cr0, cr2, cr2, {0}
 570:	00040000 	andeq	r0, r4, r0
 574:	00000000 	andeq	r0, r0, r0
 578:	00002704 	andeq	r2, r0, r4, lsl #14
bool delete_all(struct Node *node){
 57c:	00000060 	andeq	r0, r0, r0, rrx
	...
            node->data_base.item_array[i].data_entry[0] = '\0';
 588:	0000006c 	andeq	r0, r0, ip, rrx
        for(int i = 0; i <= node->data_base.item_count; i++){
 58c:	82e20002 	rschi	r0, r2, #2
            node->data_base.item_array[i].timestamp = 0;
 590:	00040000 	andeq	r0, r4, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 594:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0;
 598:	00002764 	andeq	r2, r0, r4, ror #14
}
 59c:	00000020 	andeq	r0, r0, r0, lsr #32
        return true;
 5a0:	00002784 	andeq	r2, r0, r4, lsl #15
fsm root {
 5a4:	00000190 	muleq	r0, r0, r1
 5a8:	00002914 	andeq	r2, r0, r4, lsl r9
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
 5b0:	0000295c 	andeq	r2, r0, ip, asr r9
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
 5b8:	00002980 	andeq	r2, r0, r0, lsl #19
 5bc:	0000005c 	andeq	r0, r0, ip, asr r0
 5c0:	000029dc 	ldrdeq	r2, [r0], -ip
 5c4:	00000038 	andeq	r0, r0, r8, lsr r0
 5c8:	00002a14 	andeq	r2, r0, r4, lsl sl
 5cc:	00000180 	andeq	r0, r0, r0, lsl #3
 5d0:	00002b94 	muleq	r0, r4, fp
 5d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5d8:	00002c64 	andeq	r2, r0, r4, ror #24
 5dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e0:	00002e54 	andeq	r2, r0, r4, asr lr
 5e4:	00000070 	andeq	r0, r0, r0, ror r0
 5e8:	00002ec4 	andeq	r2, r0, r4, asr #29
 5ec:	00000174 	andeq	r0, r0, r4, ror r1
	...
		node_db = (struct Node *)umalloc(sizeof(struct Node));
 5f8:	00000044 	andeq	r0, r0, r4, asr #32
 5fc:	a75a0002 	ldrbge	r0, [sl, -r2]
		init_node(node_db);
 600:	00040000 	andeq	r0, r4, r0
		phys_cc1350(0, MAX_PKT_LEN);
 604:	00000000 	andeq	r0, r0, r0
 608:	00003038 	andeq	r3, r0, r8, lsr r0
		tcv_plug (0, &plug_null);
 60c:	00000024 	andeq	r0, r0, r4, lsr #32
 610:	0000305c 	andeq	r3, r0, ip, asr r0
		sfd = tcv_open (WNONE, 0, 0);
 614:	00000024 	andeq	r0, r0, r4, lsr #32
 618:	00003080 	andeq	r3, r0, r0, lsl #1
 61c:	00000008 	andeq	r0, r0, r8
 620:	00003088 	andeq	r3, r0, r8, lsl #1
 624:	00000004 	andeq	r0, r0, r4
			diag("Cannot open tcv interface");
 628:	0000308c 	andeq	r3, r0, ip, lsl #1
 62c:	00000004 	andeq	r0, r0, r4
			halt();
 630:	00003090 	muleq	r0, r0, r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 634:	00000048 	andeq	r0, r0, r8, asr #32
	...
		runfsm receiver(node_db);
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
 644:	ae8f0002 	cdpge	0, 8, cr0, cr15, cr2, {0}
 648:	00040000 	andeq	r0, r4, r0
 64c:	00000000 	andeq	r0, r0, r0
 650:	000030d8 	ldrdeq	r3, [r0], -r8
 654:	00000070 	andeq	r0, r0, r0, ror r0
	...
		ser_inf(get_choice, "%c", &CHOICE);
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	b2c00002 	sbclt	r0, r0, #2
		switch(CHOICE) {
 668:	00040000 	andeq	r0, r4, r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	00003148 	andeq	r3, r0, r8, asr #2
 674:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 680:	0000002c 	andeq	r0, r0, ip, lsr #32
 684:	b7040002 	strlt	r0, [r4, -r2]
 688:	00040000 	andeq	r0, r4, r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	00003264 	andeq	r3, r0, r4, ror #4
 694:	00000020 	andeq	r0, r0, r0, lsr #32
				proceed menu;
 698:	00003284 	andeq	r3, r0, r4, lsl #5
 69c:	00000230 	andeq	r0, r0, r0, lsr r2
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 6a0:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
 6a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
		DEBUG_PRINT("setting node group ID");
 6b4:	bcf80002 	ldcllt	0, cr0, [r8], #8
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 6b8:	00040000 	andeq	r0, r4, r0
    node->gid = gid; 
 6bc:	00000000 	andeq	r0, r0, r0
		proceed menu;
 6c0:	00003504 	andeq	r3, r0, r4, lsl #10
 6c4:	00000390 	muleq	r0, r0, r3
	...
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 6d0:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
 6d4:	c28b0002 	addgt	r0, fp, #2
 6d8:	00040000 	andeq	r0, r4, r0
	...
		if((node_db->id < 1) || (node_db->id > 25)){
 6e8:	00000024 	andeq	r0, r0, r4, lsr #32
 6ec:	e2790002 	rsbs	r0, r9, #2
			strncpy(reason, "Out of Range", 50);
 6f0:	00040000 	andeq	r0, r4, r0
 6f4:	00000000 	andeq	r0, r0, r0
			proceed invalid_node_id;
 6f8:	00003894 	muleq	r0, r4, r8
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
				strncpy(reason, "ID is already in use", 50);
 700:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
 704:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		proceed menu;
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 714:	e4070002 	str	r0, [r7], #-2
 718:	00040000 	andeq	r0, r4, r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
		proceed get_new_node_id;
 724:	00000030 	andeq	r0, r0, r0, lsr r0
	...
		if (!clear_node_neighbour_array(node_db)){
 730:	00000024 	andeq	r0, r0, r4, lsr #32
			strncpy(reason, "Error Clearing Node Array", 50);
 734:	e4e00002 	strbt	r0, [r0], #2
 738:	00040000 	andeq	r0, r4, r0
 73c:	00000000 	andeq	r0, r0, r0
			proceed error;
 740:	000038ec 	andeq	r3, r0, ip, ror #17
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 744:	00000020 	andeq	r0, r0, r0, lsr #32
 748:	0000390c 	andeq	r3, r0, ip, lsl #18
		request_packet->gid = node_db->gid;
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		request_packet->request_number = generate_request_num();
 758:	0000003c 	andeq	r0, r0, ip, lsr r0
 75c:	e6270002 	strt	r0, [r7], -r2
		call sender(request_packet, wait_discovery);
 760:	00040000 	andeq	r0, r4, r0
 764:	00000000 	andeq	r0, r0, r0
		request_packet->receiver_id=0;
 768:	00003924 	andeq	r3, r0, r4, lsr #18
		call sender(request_packet, wait_discovery);
 76c:	00000008 	andeq	r0, r0, r8
 770:	00000000 	andeq	r0, r0, r0
 774:	00000006 	andeq	r0, r0, r6
			release;
 778:	0000392c 	andeq	r3, r0, ip, lsr #18
				proceed get_new_node_id;
 77c:	00000008 	andeq	r0, r0, r8
				proceed clear_neighbour_array;
 780:	00000000 	andeq	r0, r0, r0
				proceed create_proto_start;
 784:	00000006 	andeq	r0, r0, r6
				proceed start_delete_proto;
 788:	00000000 	andeq	r0, r0, r0
				proceed retrieve_proto;
 78c:	00000008 	andeq	r0, r0, r8
	...
			if(node_db->id == node_db->nnodes[i]){
 798:	00000064 	andeq	r0, r0, r4, rrx
 79c:	e7610002 	strb	r0, [r1, -r2]!
 7a0:	00040000 	andeq	r0, r4, r0
				strncpy(reason, "ID is already in use", 50);
 7a4:	00000000 	andeq	r0, r0, r0
 7a8:	00003934 	andeq	r3, r0, r4, lsr r9
				proceed invalid_node_id;
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	00003990 	muleq	r0, r0, r9
		for(int i = 0; i < node_db->index; i++){
 7b4:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (discovery_wait_flag == 0){
 7b8:	00000000 	andeq	r0, r0, r0
			discovery_wait_flag=1;
 7bc:	00000090 	muleq	r0, r0, r0
 7c0:	000039bc 			; <UNDEFINED> instruction: 0x000039bc
			delay(3000, find_proto_start);
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	000039d4 	ldrdeq	r3, [r0], -r4
		if (discovery_wait_flag == 1){
 7cc:	00000060 	andeq	r0, r0, r0, rrx
			discovery_wait_flag=0;
 7d0:	00003a34 	andeq	r3, r0, r4, lsr sl
 7d4:	00000034 	andeq	r0, r0, r4, lsr r0
			delay(3000, display_neighbour_nodes);
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
 7e0:	00000000 	andeq	r0, r0, r0
 7e4:	0000000c 	andeq	r0, r0, ip
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00000034 	andeq	r0, r0, r4, lsr r0
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 800:	00000054 	andeq	r0, r0, r4, asr r0
 804:	f0240002 			; <UNDEFINED> instruction: 0xf0240002
 808:	00040000 	andeq	r0, r4, r0
	...
 814:	00000014 	andeq	r0, r0, r4, lsl r0
 818:	00003a68 	andeq	r3, r0, r8, ror #20
 81c:	00000028 	andeq	r0, r0, r8, lsr #32
 820:	00003a90 	muleq	r0, r0, sl
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
 824:	0000004c 	andeq	r0, r0, ip, asr #32
 828:	00003adc 	ldrdeq	r3, [r0], -ip
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 82c:	00000150 	andeq	r0, r0, r0, asr r1
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
 830:	00003c2c 	andeq	r3, r0, ip, lsr #24
			if (node_db->nnodes[i] == 0) break;
 834:	00000118 	andeq	r0, r0, r8, lsl r1
 838:	00003d44 	andeq	r3, r0, r4, asr #26
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
 840:	00000000 	andeq	r0, r0, r0
 844:	00000060 	andeq	r0, r0, r0, rrx
 848:	00003d64 	andeq	r3, r0, r4, ror #26
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		proceed menu;
 858:	00000024 	andeq	r0, r0, r4, lsr #32
 85c:	fadc0002 	blx	ff70086c <_estack+0xdf6fb86c>
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 860:	00040000 	andeq	r0, r4, r0
 864:	00000000 	andeq	r0, r0, r0
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
 868:	00003d80 	andeq	r3, r0, r0, lsl #27
 86c:	000000d4 	ldrdeq	r0, [r0], -r4
 870:	00003e54 	andeq	r3, r0, r4, asr lr
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 874:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			strncpy(reason, "Error: improper ID", 50);
 880:	000000b4 	strheq	r0, [r0], -r4
			proceed error;
 884:	fce70002 	stc2l	0, cr0, [r7], #8
 888:	00040000 	andeq	r0, r4, r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
 88c:	00000000 	andeq	r0, r0, r0
 890:	00003ef8 	strdeq	r3, [r0], -r8
		ser_in(get_record_to_create, user_provided_record, 20);
 894:	0000007c 	andeq	r0, r0, ip, ror r0
 898:	00003f74 	andeq	r3, r0, r4, ror pc
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 89c:	000000ac 	andeq	r0, r0, ip, lsr #1
 8a0:	00004020 	andeq	r4, r0, r0, lsr #32
 8a4:	0000005c 	andeq	r0, r0, ip, asr r0
		create_message->gid = node_db->gid;
 8a8:	0000407c 	andeq	r4, r0, ip, ror r0
		create_message->tpe = 2;
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
		create_message->request_number = generate_request_num();
 8b0:	00000000 	andeq	r0, r0, r0
 8b4:	00000010 	andeq	r0, r0, r0, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
 8b8:	00004094 	muleq	r0, r4, r0
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
		create_message->receiver_id = user_provided_receiver_id;
 8c0:	000040a4 	andeq	r4, r0, r4, lsr #1
		strncpy(create_message->record, user_provided_record, 20);
 8c4:	00000014 	andeq	r0, r0, r4, lsl r0
		create_message->receiver_id = user_provided_receiver_id;
 8c8:	000040b8 	strheq	r4, [r0], -r8
		strncpy(create_message->record, user_provided_record, 20);
 8cc:	00000064 	andeq	r0, r0, r4, rrx
		response_checker[0] = create_message->request_number;
 8d0:	0000411c 	andeq	r4, r0, ip, lsl r1
 8d4:	00000014 	andeq	r0, r0, r4, lsl r0
		call sender(create_message, wait);
 8d8:	00004130 	andeq	r4, r0, r0, lsr r1
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
 8e0:	00004144 	andeq	r4, r0, r4, asr #2
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
 8e8:	00004158 	andeq	r4, r0, r8, asr r1
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
 8ec:	00000028 	andeq	r0, r0, r8, lsr #32
 8f0:	00004180 	andeq	r4, r0, r0, lsl #3
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
 8f4:	00000010 	andeq	r0, r0, r0, lsl r0
 8f8:	00004190 	muleq	r0, r0, r1
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 900:	000041bc 			; <UNDEFINED> instruction: 0x000041bc
 904:	00000014 	andeq	r0, r0, r4, lsl r0
			strncpy(reason, "Error: improper node ID", 50);
 908:	000041d0 	ldrdeq	r4, [r0], -r0
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
 910:	000041e4 	andeq	r4, r0, r4, ror #3
			proceed error;
 914:	00000110 	andeq	r0, r0, r0, lsl r1
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
 918:	000042f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 91c:	00000064 	andeq	r0, r0, r4, rrx
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
 920:	00004358 	andeq	r4, r0, r8, asr r3
 924:	00000028 	andeq	r0, r0, r8, lsr #32
 928:	00004380 	andeq	r4, r0, r0, lsl #7
		if (user_provided_index < 0 || user_provided_index > 40){
 92c:	00000150 	andeq	r0, r0, r0, asr r1
	...
			strncpy(reason, "Error: invalid index", 50);
 938:	0000003c 	andeq	r0, r0, ip, lsr r0
			proceed error;
 93c:	08020002 	stmdaeq	r2, {r1}
 940:	00040001 	andeq	r0, r4, r1
	...
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 94c:	000000f4 	strdeq	r0, [r0], -r4
		delete_record->gid = node_db->gid;
 950:	000044d0 	ldrdeq	r4, [r0], -r0
		delete_record->tpe = DELETE_RECORD;
 954:	00000220 	andeq	r0, r0, r0, lsr #4
		delete_record->request_number = generate_request_num();
 958:	000046f0 	strdeq	r4, [r0], -r0
 95c:	00000060 	andeq	r0, r0, r0, rrx
		delete_record->sender_id = node_db->id;
 960:	00000000 	andeq	r0, r0, r0
 964:	00000078 	andeq	r0, r0, r8, ror r0
 968:	00004750 	andeq	r4, r0, r0, asr r7
		call sender(&delete_record, wait);
 96c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		response_checker[0] = delete_record->request_number;
 978:	00000044 	andeq	r0, r0, r4, asr #32
		response_checker[1] = delete_record->tpe;
 97c:	11290002 			; <UNDEFINED> instruction: 0x11290002
 980:	00040001 	andeq	r0, r4, r1
	...
		call sender(&delete_record, wait);
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
 990:	00000000 	andeq	r0, r0, r0
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
 994:	00000018 	andeq	r0, r0, r8, lsl r0
 998:	00004768 	andeq	r4, r0, r8, ror #14
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
 99c:	0000004c 	andeq	r0, r0, ip, asr #32
 9a0:	00000000 	andeq	r0, r0, r0
 9a4:	00000030 	andeq	r0, r0, r0, lsr r0
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
 9a8:	000047b4 			; <UNDEFINED> instruction: 0x000047b4
 9ac:	0000006c 	andeq	r0, r0, ip, rrx
			strncpy(reason, "Error: improper node ID", 50);
 9b0:	00004820 	andeq	r4, r0, r0, lsr #16
 9b4:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
 9c0:	00000044 	andeq	r0, r0, r4, asr #32
 9c4:	14f90002 	ldrbtne	r0, [r9], #2
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
 9c8:	00040001 	andeq	r0, r4, r1
 9cc:	00000000 	andeq	r0, r0, r0
 9d0:	00004838 	andeq	r4, r0, r8, lsr r8
		if (user_provided_index < 0 || user_provided_index > 40){
 9d4:	00000028 	andeq	r0, r0, r8, lsr #32
			strncpy(reason, "Error: invalid index", 50);
 9d8:	00004860 	andeq	r4, r0, r0, ror #16
 9dc:	00000008 	andeq	r0, r0, r8
 9e0:	00000000 	andeq	r0, r0, r0
			proceed error;
 9e4:	00000022 	andeq	r0, r0, r2, lsr #32
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	0000002e 	andeq	r0, r0, lr, lsr #32
		retrieve_record->gid = node_db->gid;
 9f0:	00000000 	andeq	r0, r0, r0
 9f4:	00000034 	andeq	r0, r0, r4, lsr r0
 9f8:	00000000 	andeq	r0, r0, r0
		retrieve_record->tpe = RETRIEVE_RECORD;
 9fc:	00000040 	andeq	r0, r0, r0, asr #32
	...
		retrieve_record->sender_id = node_db->id;
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
		response_checker[0] = retrieve_record->request_number;
 a0c:	1aa40002 	bne	fe900a1c <_estack+0xde8fba1c>
		retrieve_record->receiver_id = user_provided_receiver_id;
 a10:	00040001 	andeq	r0, r4, r1
 a14:	00000000 	andeq	r0, r0, r0
		retrieve_record->record_index = user_provided_index;
 a18:	00004868 	andeq	r4, r0, r8, ror #16
 a1c:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		call sender(&retrieve_record, wait);
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
 a2c:	29d90002 	ldmibcs	r9, {r1}^
 a30:	00040001 	andeq	r0, r4, r1
 a34:	00000000 	andeq	r0, r0, r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
 a38:	00004914 	andeq	r4, r0, r4, lsl r9
 a3c:	0000004c 	andeq	r0, r0, ip, asr #32
	...
		if(node_db->data_base.item_count != 0){
 a48:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_out(loop_through_data, "\r\n");
 a4c:	33530002 	cmpcc	r3, #2
 a50:	00040001 	andeq	r0, r4, r1
	...
		proceed menu;
 a60:	0000001c 	andeq	r0, r0, ip, lsl r0
 a64:	3c7d0002 	ldclcc	0, cr0, [sp], #-8
		delay(3000, timeout);
 a68:	00040001 	andeq	r0, r4, r1
 a6c:	00000000 	andeq	r0, r0, r0
		when(&response_flag, menu);
 a70:	00004960 	andeq	r4, r0, r0, ror #18
 a74:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000122 	andeq	r0, r0, r2, lsr #2
      28:	00000126 	andeq	r0, r0, r6, lsr #2
      2c:	0000016c 	andeq	r0, r0, ip, ror #2
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	0000011a 	andeq	r0, r0, sl, lsl r1
      50:	0000012c 	andeq	r0, r0, ip, lsr #2
      54:	0000016c 	andeq	r0, r0, ip, ror #2
	...
			nq++;
      60:	00000210 	andeq	r0, r0, r0, lsl r2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	000003ae 	andeq	r0, r0, lr, lsr #7
      68:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
      6c:	0000056a 	andeq	r0, r0, sl, ror #10
	...
      78:	0000021e 	andeq	r0, r0, lr, lsl r2
      7c:	00000324 	andeq	r0, r0, r4, lsr #6
      80:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
      84:	00000566 	andeq	r0, r0, r6, ror #10
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000276 	andeq	r0, r0, r6, ror r2
      94:	00000324 	andeq	r0, r0, r4, lsr #6
      98:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
	if (baction == NULL)
      9c:	00000564 	andeq	r0, r0, r4, ror #10
      a0:	00000564 	andeq	r0, r0, r4, ror #10
	(*baction) (pbutton);
      a4:	00000566 	andeq	r0, r0, r6, ror #10
	...
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b0:	000003f8 	strdeq	r0, [r0], -r8
endthread
      b4:	000003fe 	strdeq	r0, [r0], -lr
      b8:	0000046a 	andeq	r0, r0, sl, ror #8
      bc:	000004e8 	andeq	r0, r0, r8, ror #9
	...
fsm sender(struct ResponseMessage *message) {
      c8:	00000444 	andeq	r0, r0, r4, asr #8
      cc:	00000456 	andeq	r0, r0, r6, asr r4
      d0:	0000045a 	andeq	r0, r0, sl, asr r4
}
      d4:	0000045e 	andeq	r0, r0, lr, asr r4
	...
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	000005f4 	strdeq	r0, [r0], -r4
      e4:	000006fe 	strdeq	r0, [r0], -lr
      e8:	00000700 	andeq	r0, r0, r0, lsl #14
		packet[0] = 0;
      ec:	00000aca 	andeq	r0, r0, sl, asr #21
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	00000ace 	andeq	r0, r0, lr, asr #21
		*p = message->tpe;p++;
      f4:	00000ad2 	ldrdeq	r0, [r0], -r2
	...
		*p = message->sender_id;p++;
     100:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
		*p = message->receiver_id;p++;
     104:	000006be 			; <UNDEFINED> instruction: 0x000006be
		switch(message->tpe) {
     108:	000006c0 	andeq	r0, r0, r0, asr #13
     10c:	000006c0 	andeq	r0, r0, r0, asr #13
     110:	000006c2 	andeq	r0, r0, r2, asr #13
		tcv_endp(packet);
     114:	000006c4 	andeq	r0, r0, r4, asr #13
	...
		ser_out(CONFIRM_message, "Message sent\r\n");
     120:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
     124:	000006fe 	strdeq	r0, [r0], -lr
		finish;
     128:	00000700 	andeq	r0, r0, r0, lsl #14
     12c:	00000714 	andeq	r0, r0, r4, lsl r7
				*p = message->status;p++;
     130:	00000796 	muleq	r0, r6, r7
     134:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
	...
				strncpy(p, message->record, sizeof(message->record));
     140:	00000700 	andeq	r0, r0, r0, lsl #14
				strncpy(p, message->record, sizeof(message->record));
     144:	0000070e 	andeq	r0, r0, lr, lsl #14
     148:	00000796 	muleq	r0, r6, r7
				strncpy(p, message->record, sizeof(message->record));
     14c:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
	...
				break;
     158:	00000744 	andeq	r0, r0, r4, asr #14
     15c:	00000776 	andeq	r0, r0, r6, ror r7
     160:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     164:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
	...
		node->nnodes[i] = 0;
     170:	000000c8 	andeq	r0, r0, r8, asr #1
     174:	0000016c 	andeq	r0, r0, ip, ror #2
     178:	00000001 	andeq	r0, r0, r1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	00000001 	andeq	r0, r0, r1
bool init_node(struct Node* node){
     180:	00000001 	andeq	r0, r0, r1
    node->id  = 0;                  // default id value 0
     184:	00000001 	andeq	r0, r0, r1
    node->index = 0;                // default entry count 0
     188:	00000001 	andeq	r0, r0, r1
    node->data_base.item_count = 0; // default no items in array
     18c:	00000001 	andeq	r0, r0, r1
	reset_array(node);
     190:	0000016c 	andeq	r0, r0, ip, ror #2
    DEBUG_PRINT("Error initializing node...\n");
     194:	00000180 	andeq	r0, r0, r0, lsl #3
     198:	00000180 	andeq	r0, r0, r0, lsl #3
};
     19c:	000001a4 	andeq	r0, r0, r4, lsr #3
     1a0:	000001a4 	andeq	r0, r0, r4, lsr #3
uint8_t generate_request_num(void){
     1a4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    return (uint8_t) (rand() % 255);
     1a8:	00000001 	andeq	r0, r0, r1
     1ac:	00000001 	andeq	r0, r0, r1
     1b0:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
}
     1b4:	000001cc 	andeq	r0, r0, ip, asr #3
            node->nnodes[i] = 0; // set to null byte
     1b8:	000001cc 	andeq	r0, r0, ip, asr #3
     1bc:	000001e8 	andeq	r0, r0, r8, ror #3
     1c0:	000001e8 	andeq	r0, r0, r8, ror #3
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	0000057c 	andeq	r0, r0, ip, ror r5
};
     1c8:	00000001 	andeq	r0, r0, r1
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	00000001 	andeq	r0, r0, r1
     1d0:	0000057c 	andeq	r0, r0, ip, ror r5
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	000005a2 	andeq	r0, r0, r2, lsr #11
     1d8:	00000001 	andeq	r0, r0, r1
     1dc:	00000001 	andeq	r0, r0, r1
        node->data_base.item_count -= 1;
     1e0:	000005a4 	andeq	r0, r0, r4, lsr #11
};
     1e4:	00000b2c 	andeq	r0, r0, ip, lsr #22
	...
fsm receiver(struct Node* node_db) {
     1f0:	00000c1a 	andeq	r0, r0, sl, lsl ip
     1f4:	00000c20 	andeq	r0, r0, r0, lsr #24
     1f8:	00000c20 	andeq	r0, r0, r0, lsr #24
     1fc:	00000c20 	andeq	r0, r0, r0, lsr #24
     200:	00000c24 	andeq	r0, r0, r4, lsr #24
     204:	00000c26 	andeq	r0, r0, r6, lsr #24
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	00000c20 	andeq	r0, r0, r0, lsr #24
     214:	00000c22 	andeq	r0, r0, r2, lsr #24
     218:	00000c26 	andeq	r0, r0, r6, lsr #24
     21c:	00000c28 	andeq	r0, r0, r8, lsr #24
	...
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     228:	00000c38 	andeq	r0, r0, r8, lsr ip
     22c:	00000c3a 	andeq	r0, r0, sl, lsr ip
     230:	00000c3c 	andeq	r0, r0, ip, lsr ip
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	00000c3e 	andeq	r0, r0, lr, lsr ip
	...
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	00000c72 	andeq	r0, r0, r2, ror ip
     244:	00000c76 	andeq	r0, r0, r6, ror ip
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	00000c78 	andeq	r0, r0, r8, ror ip
     24c:	00000c7a 	andeq	r0, r0, sl, ror ip
     250:	00000c7c 	andeq	r0, r0, ip, ror ip
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	00000c84 	andeq	r0, r0, r4, lsl #25
	...
		switch (tpe){
     260:	00000ca8 	andeq	r0, r0, r8, lsr #25
     264:	00000cae 	andeq	r0, r0, lr, lsr #25
     268:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     26c:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
	...
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	00000cd8 	ldrdeq	r0, [r0], -r8
     27c:	00000d5e 	andeq	r0, r0, lr, asr sp
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	00000d84 	andeq	r0, r0, r4, lsl #27
     284:	00000ddc 	ldrdeq	r0, [r0], -ip
	...
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	00000e4c 	andeq	r0, r0, ip, asr #28
     294:	00000e4e 	andeq	r0, r0, lr, asr #28
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	00000e50 	andeq	r0, r0, r0, asr lr
     29c:	00000e64 	andeq	r0, r0, r4, ror #28
	...
					response_message_0->gid = discovery_request_message->gid;
     2a8:	00000e80 	andeq	r0, r0, r0, lsl #29
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	00000e82 	andeq	r0, r0, r2, lsl #29
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	00000e84 	andeq	r0, r0, r4, lsl #29
					response_message_0->sender_id = node_db->id;
     2b4:	00000e8c 	andeq	r0, r0, ip, lsl #29
	...
					call sender(response_message_0, done_case);
     2c0:	00000fc8 	andeq	r0, r0, r8, asr #31
     2c4:	00000fcc 	andeq	r0, r0, ip, asr #31
     2c8:	00000fce 	andeq	r0, r0, lr, asr #31
     2cc:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	00000fd2 	ldrdeq	r0, [r0], -r2
     2d4:	00000fd4 	ldrdeq	r0, [r0], -r4
	...
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	00001030 	andeq	r1, r0, r0, lsr r0
     2e4:	00001034 	andeq	r1, r0, r4, lsr r0
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	00001046 	andeq	r1, r0, r6, asr #32
     2ec:	00001072 	andeq	r1, r0, r2, ror r0
	...
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	00001088 	andeq	r1, r0, r8, lsl #1
     2fc:	00001088 	andeq	r1, r0, r8, lsl #1
     300:	0000108a 	andeq	r1, r0, sl, lsl #1
     304:	0000108c 	andeq	r1, r0, ip, lsl #1
	...
     310:	0000108c 	andeq	r1, r0, ip, lsl #1
     314:	0000108e 	andeq	r1, r0, lr, lsl #1
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	00001090 	muleq	r0, r0, r0
     31c:	00001092 	muleq	r0, r2, r0
					node_db->index+=1;
     320:	00001098 	muleq	r0, r8, r0
		tcv_endp(incoming_packet);
     324:	0000109e 	muleq	r0, lr, r0
     328:	000010a8 	andeq	r1, r0, r8, lsr #1
		proceed receiving;
     32c:	000010aa 	andeq	r1, r0, sl, lsr #1
     330:	000010b6 	strheq	r1, [r0], -r6
		ser_out(response_1_create, "\r\nData Saved");
     334:	000010b8 	strheq	r1, [r0], -r8
	...
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	000010cc 	andeq	r1, r0, ip, asr #1
     344:	000010cc 	andeq	r1, r0, ip, asr #1
		proceed receiving;
     348:	000010ce 	andeq	r1, r0, lr, asr #1
     34c:	000010d0 	ldrdeq	r1, [r0], -r0
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     358:	000010d2 	ldrdeq	r1, [r0], -r2
     35c:	000010d4 	ldrdeq	r1, [r0], -r4
		proceed receiving;
     360:	000010d6 	ldrdeq	r1, [r0], -r6
     364:	000010d8 	ldrdeq	r1, [r0], -r8
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     368:	000010e2 	andeq	r1, r0, r2, ror #1
     36c:	000010e6 	andeq	r1, r0, r6, ror #1
     370:	000010f0 	strdeq	r1, [r0], -r0
		proceed receiving;
     374:	000010f2 	strdeq	r1, [r0], -r2
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     380:	000011d6 	ldrdeq	r1, [r0], -r6
     384:	000011d8 	ldrdeq	r1, [r0], -r8
		proceed receiving;
     388:	000011da 	ldrdeq	r1, [r0], -sl
     38c:	000011de 	ldrdeq	r1, [r0], -lr
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     390:	000011ee 	andeq	r1, r0, lr, ror #3
     394:	000011f0 	strdeq	r1, [r0], -r0
	...
		proceed receiving;
     3a0:	000011d8 	ldrdeq	r1, [r0], -r8
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a4:	000011da 	ldrdeq	r1, [r0], -sl
		proceed receiving;
     3a8:	000011de 	ldrdeq	r1, [r0], -lr
     3ac:	000011ee 	andeq	r1, r0, lr, ror #3
}
     3b0:	000011f0 	strdeq	r1, [r0], -r0
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	0000122a 	andeq	r1, r0, sl, lsr #4
	...
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3c0:	000011e2 	andeq	r1, r0, r2, ror #3
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	000011e6 	andeq	r1, r0, r6, ror #3
     3c8:	0000120e 	andeq	r1, r0, lr, lsl #4
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	00001216 	andeq	r1, r0, r6, lsl r2
	...
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d8:	000011e6 	andeq	r1, r0, r6, ror #3
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	000011ea 	andeq	r1, r0, sl, ror #3
     3e0:	00001222 	andeq	r1, r0, r2, lsr #4
     3e4:	00001226 	andeq	r1, r0, r6, lsr #4
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3f0:	000011ea 	andeq	r1, r0, sl, ror #3
		strncpy(response_message->record, rec, 20);
     3f4:	000011ee 	andeq	r1, r0, lr, ror #3
     3f8:	0000121c 	andeq	r1, r0, ip, lsl r2
     3fc:	00001222 	andeq	r1, r0, r2, lsr #4
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     408:	0000122a 	andeq	r1, r0, sl, lsr #4
     40c:	0000122c 	andeq	r1, r0, ip, lsr #4
     410:	0000122e 	andeq	r1, r0, lr, lsr #4
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	00001230 	andeq	r1, r0, r0, lsr r2
     418:	00001232 	andeq	r1, r0, r2, lsr r2
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	00001234 	andeq	r1, r0, r4, lsr r2
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     428:	0000122c 	andeq	r1, r0, ip, lsr #4
     42c:	0000122e 	andeq	r1, r0, lr, lsr #4
     430:	00001234 	andeq	r1, r0, r4, lsr r2
     434:	00001236 	andeq	r1, r0, r6, lsr r2
	...
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     440:	00001246 	andeq	r1, r0, r6, asr #4
    return node->data_base.item_array[index];
     444:	00001248 	andeq	r1, r0, r8, asr #4
     448:	0000124a 	andeq	r1, r0, sl, asr #4
     44c:	0000124c 	andeq	r1, r0, ip, asr #4
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	0000125e 	andeq	r1, r0, lr, asr r2
    return node->data_base.item_array[index];
     45c:	00001260 	andeq	r1, r0, r0, ror #4
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	00001262 	andeq	r1, r0, r2, ror #4
     464:	00001264 	andeq	r1, r0, r4, ror #4
	...
		strncpy(response_message->record, rec, 20);
     470:	000012a6 	andeq	r1, r0, r6, lsr #5
     474:	000012a6 	andeq	r1, r0, r6, lsr #5
     478:	000012aa 	andeq	r1, r0, sl, lsr #5
     47c:	000012ac 	andeq	r1, r0, ip, lsr #5
	...
     488:	000012dc 	ldrdeq	r1, [r0], -ip
     48c:	000012de 	ldrdeq	r1, [r0], -lr
     490:	000012e0 	andeq	r1, r0, r0, ror #5
     494:	000012e8 	andeq	r1, r0, r8, ror #5
	...
     4a0:	00001388 	andeq	r1, r0, r8, lsl #7
     4a4:	00001388 	andeq	r1, r0, r8, lsl #7
     4a8:	0000138e 	andeq	r1, r0, lr, lsl #7
     4ac:	00001390 	muleq	r0, r0, r3
     4b0:	00001392 	muleq	r0, r2, r3
     4b4:	00001396 	muleq	r0, r6, r3
	...
     4c0:	000013a2 	andeq	r1, r0, r2, lsr #7
     4c4:	000013a4 	andeq	r1, r0, r4, lsr #7
     4c8:	000013ba 			; <UNDEFINED> instruction: 0x000013ba
     4cc:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     4d0:	000013ce 	andeq	r1, r0, lr, asr #7
     4d4:	000013ea 	andeq	r1, r0, sl, ror #7
     4d8:	0000140e 	andeq	r1, r0, lr, lsl #8
     4dc:	00001568 	andeq	r1, r0, r8, ror #10
	...
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	000013a2 	andeq	r1, r0, r2, lsr #7
     4ec:	000013a4 	andeq	r1, r0, r4, lsr #7
     4f0:	00001442 	andeq	r1, r0, r2, asr #8
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	00001446 	andeq	r1, r0, r6, asr #8
	...
     500:	00001446 	andeq	r1, r0, r6, asr #8
				if(!response_flag){
     504:	00001446 	andeq	r1, r0, r6, asr #8
     508:	0000144a 	andeq	r1, r0, sl, asr #8
					response_flag=1;
     50c:	0000144e 	andeq	r1, r0, lr, asr #8
					trigger(&response_flag);
     510:	00001452 	andeq	r1, r0, r2, asr r4
				switch(response_message_5->status){
     514:	00001454 	andeq	r1, r0, r4, asr r4
	...
     520:	00001446 	andeq	r1, r0, r6, asr #8
     524:	0000144a 	andeq	r1, r0, sl, asr #8
						if (response_checker[0] == response_message_5->request_number){
     528:	00001460 	andeq	r1, r0, r0, ror #8
     52c:	00001462 	andeq	r1, r0, r2, ror #8
     530:	00001466 	andeq	r1, r0, r6, ror #8
							switch(response_checker[1]){
     534:	0000146a 	andeq	r1, r0, sl, ror #8
	...
     540:	0000144e 	andeq	r1, r0, lr, asr #8
						proceed response_2;
     544:	00001452 	andeq	r1, r0, r2, asr r4
						break;
     548:	00001454 	andeq	r1, r0, r4, asr r4
									proceed response_1_delete;
     54c:	00001456 	andeq	r1, r0, r6, asr r4
									proceed response_1_retrieve;
     550:	0000145a 	andeq	r1, r0, sl, asr r4
						proceed response_2;
     554:	0000145e 	andeq	r1, r0, lr, asr r4
	...
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	00001462 	andeq	r1, r0, r2, ror #8
				break;
     564:	00001466 	andeq	r1, r0, r6, ror #8
}
     568:	00001480 	andeq	r1, r0, r0, lsl #9
     56c:	00001484 	andeq	r1, r0, r4, lsl #9
     570:	00001486 	andeq	r1, r0, r6, lsl #9
     574:	0000148e 	andeq	r1, r0, lr, lsl #9
	...
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	00001478 	andeq	r1, r0, r8, ror r4
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	0000147a 	andeq	r1, r0, sl, ror r4
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	0000147c 	andeq	r1, r0, ip, ror r4
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	00001480 	andeq	r1, r0, r0, lsl #9
	...
    node->data_base.item_count = 0;
     598:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
}
     59c:	000014c0 	andeq	r1, r0, r0, asr #9
        return true;
     5a0:	000014c2 	andeq	r1, r0, r2, asr #9
fsm root {
     5a4:	000014ca 	andeq	r1, r0, sl, asr #9
	...
     5b0:	000014c0 	andeq	r1, r0, r0, asr #9
     5b4:	000014c2 	andeq	r1, r0, r2, asr #9
     5b8:	000014ce 	andeq	r1, r0, lr, asr #9
     5bc:	000014d0 	ldrdeq	r1, [r0], -r0
	...
     5c8:	000014ee 	andeq	r1, r0, lr, ror #9
     5cc:	000014f0 	strdeq	r1, [r0], -r0
     5d0:	000014f2 	strdeq	r1, [r0], -r2
     5d4:	000014f4 	strdeq	r1, [r0], -r4
	...
     5e0:	000014f0 	strdeq	r1, [r0], -r0
     5e4:	000014f2 	strdeq	r1, [r0], -r2
     5e8:	000014f4 	strdeq	r1, [r0], -r4
     5ec:	000014f8 	strdeq	r1, [r0], -r8
	...
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f8:	0000154e 	andeq	r1, r0, lr, asr #10
     5fc:	00001550 	andeq	r1, r0, r0, asr r5
		init_node(node_db);
     600:	00001550 	andeq	r1, r0, r0, asr r5
		phys_cc1350(0, MAX_PKT_LEN);
     604:	00001552 	andeq	r1, r0, r2, asr r5
	...
		tcv_plug (0, &plug_null);
     610:	00001556 	andeq	r1, r0, r6, asr r5
		sfd = tcv_open (WNONE, 0, 0);
     614:	0000155a 	andeq	r1, r0, sl, asr r5
     618:	0000155c 	andeq	r1, r0, ip, asr r5
     61c:	0000155e 	andeq	r1, r0, lr, asr r5
	...
			diag("Cannot open tcv interface");
     628:	00000001 	andeq	r0, r0, r1
     62c:	00000001 	andeq	r0, r0, r1
			halt();
     630:	00000001 	andeq	r0, r0, r1
		tcv_control(sfd, PHYSOPT_ON, NULL);
     634:	00000001 	andeq	r0, r0, r1
	...
		runfsm receiver(node_db);
     640:	00001610 	andeq	r1, r0, r0, lsl r6
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	00001610 	andeq	r1, r0, r0, lsl r6
     648:	00001614 	andeq	r1, r0, r4, lsl r6
     64c:	00001620 	andeq	r1, r0, r0, lsr #12
	...
     658:	00000b2c 	andeq	r0, r0, ip, lsr #22
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	00000b38 	andeq	r0, r0, r8, lsr fp
     660:	00000b38 	andeq	r0, r0, r8, lsr fp
     664:	00000b64 	andeq	r0, r0, r4, ror #22
		switch(CHOICE) {
     668:	00000b64 	andeq	r0, r0, r4, ror #22
     66c:	00000b8e 	andeq	r0, r0, lr, lsl #23
     670:	00000b90 	muleq	r0, r0, fp
     674:	00000bcc 	andeq	r0, r0, ip, asr #23
     678:	00000bcc 	andeq	r0, r0, ip, asr #23
     67c:	00000c0c 	andeq	r0, r0, ip, lsl #24
     680:	00000001 	andeq	r0, r0, r1
     684:	00000001 	andeq	r0, r0, r1
     688:	00000c0c 	andeq	r0, r0, ip, lsl #24
     68c:	00000c60 	andeq	r0, r0, r0, ror #24
     690:	00000c60 	andeq	r0, r0, r0, ror #24
     694:	00000ca0 	andeq	r0, r0, r0, lsr #25
				proceed menu;
     698:	00000ca0 	andeq	r0, r0, r0, lsr #25
     69c:	00000cc8 	andeq	r0, r0, r8, asr #25
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	00000cc8 	andeq	r0, r0, r8, asr #25
     6a4:	00000ddc 	ldrdeq	r0, [r0], -ip
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	00000ddc 	ldrdeq	r0, [r0], -ip
     6ac:	00000e2c 	andeq	r0, r0, ip, lsr #28
     6b0:	00000e2c 	andeq	r0, r0, ip, lsr #28
		DEBUG_PRINT("setting node group ID");
     6b4:	00000e80 	andeq	r0, r0, r0, lsl #29
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	00000e80 	andeq	r0, r0, r0, lsl #29
    node->gid = gid; 
     6bc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
		proceed menu;
     6c0:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     6c4:	00000fc8 	andeq	r0, r0, r8, asr #31
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	00000001 	andeq	r0, r0, r1
     6cc:	00000001 	andeq	r0, r0, r1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	00000fc8 	andeq	r0, r0, r8, asr #31
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	00001088 	andeq	r1, r0, r8, lsl #1
     6d8:	00001088 	andeq	r1, r0, r8, lsl #1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	000010cc 	andeq	r1, r0, ip, asr #1
     6e0:	000010cc 	andeq	r1, r0, ip, asr #1
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	00001108 	andeq	r1, r0, r8, lsl #2
     6e8:	00001108 	andeq	r1, r0, r8, lsl #2
     6ec:	000011ac 	andeq	r1, r0, ip, lsr #3
			strncpy(reason, "Out of Range", 50);
     6f0:	000011ac 	andeq	r1, r0, ip, lsr #3
     6f4:	00001364 	andeq	r1, r0, r4, ror #6
			proceed invalid_node_id;
     6f8:	00001364 	andeq	r1, r0, r4, ror #6
     6fc:	00001388 	andeq	r1, r0, r8, lsl #7
				strncpy(reason, "ID is already in use", 50);
     700:	00000001 	andeq	r0, r0, r1
		for(int i = 0; i < node_db->index; i++){
     704:	00000001 	andeq	r0, r0, r1
     708:	00001388 	andeq	r1, r0, r8, lsl #7
     70c:	000015e0 	andeq	r1, r0, r0, ror #11
		proceed menu;
     710:	000015e0 	andeq	r1, r0, r0, ror #11
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	00001610 	andeq	r1, r0, r0, lsl r6
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	00001610 	andeq	r1, r0, r0, lsl r6
		proceed get_new_node_id;
     724:	00001670 	andeq	r1, r0, r0, ror r6
	...
		if (!clear_node_neighbour_array(node_db)){
     730:	0000172c 	andeq	r1, r0, ip, lsr #14
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	0000172e 	andeq	r1, r0, lr, lsr #14
     738:	0000172e 	andeq	r1, r0, lr, lsr #14
     73c:	00001730 	andeq	r1, r0, r0, lsr r7
	...
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     748:	00001796 	muleq	r0, r6, r7
		request_packet->gid = node_db->gid;
     74c:	00001838 	andeq	r1, r0, r8, lsr r8
     750:	0000183c 	andeq	r1, r0, ip, lsr r8
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	00001840 	andeq	r1, r0, r0, asr #16
	...
		call sender(request_packet, wait_discovery);
     760:	00001c0c 	andeq	r1, r0, ip, lsl #24
     764:	00001c0e 	andeq	r1, r0, lr, lsl #24
		request_packet->receiver_id=0;
     768:	00001c12 	andeq	r1, r0, r2, lsl ip
		call sender(request_packet, wait_discovery);
     76c:	00001c14 	andeq	r1, r0, r4, lsl ip
     770:	00001c18 	andeq	r1, r0, r8, lsl ip
     774:	00001c1c 	andeq	r1, r0, ip, lsl ip
			release;
     778:	00001c1e 	andeq	r1, r0, lr, lsl ip
				proceed get_new_node_id;
     77c:	00001c28 	andeq	r1, r0, r8, lsr #24
	...
				proceed start_delete_proto;
     788:	00001c5a 	andeq	r1, r0, sl, asr ip
				proceed retrieve_proto;
     78c:	00001c5c 	andeq	r1, r0, ip, asr ip
				proceed display_db;
     790:	00001c5e 	andeq	r1, r0, lr, asr ip
				proceed del_local;
     794:	00001c62 	andeq	r1, r0, r2, ror #24
			if(node_db->id == node_db->nnodes[i]){
     798:	00001cf2 	strdeq	r1, [r0], -r2
     79c:	00001d54 	andeq	r1, r0, r4, asr sp
     7a0:	00001d58 	andeq	r1, r0, r8, asr sp
				strncpy(reason, "ID is already in use", 50);
     7a4:	00001d5c 	andeq	r1, r0, ip, asr sp
     7a8:	00001d5e 	andeq	r1, r0, lr, asr sp
				proceed invalid_node_id;
     7ac:	00001d60 	andeq	r1, r0, r0, ror #26
	...
		if (discovery_wait_flag == 0){
     7b8:	00001c76 	andeq	r1, r0, r6, ror ip
			discovery_wait_flag=1;
     7bc:	00001c78 	andeq	r1, r0, r8, ror ip
     7c0:	00001c78 	andeq	r1, r0, r8, ror ip
			delay(3000, find_proto_start);
     7c4:	00001c7a 	andeq	r1, r0, sl, ror ip
	...
			discovery_wait_flag=0;
     7d0:	00001670 	andeq	r1, r0, r0, ror r6
     7d4:	000016ac 	andeq	r1, r0, ip, lsr #13
			delay(3000, display_neighbour_nodes);
     7d8:	000016ac 	andeq	r1, r0, ip, lsr #13
     7dc:	0000172c 	andeq	r1, r0, ip, lsr #14
     7e0:	0000172c 	andeq	r1, r0, ip, lsr #14
     7e4:	00001744 	andeq	r1, r0, r4, asr #14
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	00001744 	andeq	r1, r0, r4, asr #14
     7f4:	00001754 	andeq	r1, r0, r4, asr r7
     7f8:	00001754 	andeq	r1, r0, r4, asr r7
     7fc:	00001780 	andeq	r1, r0, r0, lsl #15
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
     808:	00001780 	andeq	r1, r0, r0, lsl #15
     80c:	00001786 	andeq	r1, r0, r6, lsl #15
     810:	00001788 	andeq	r1, r0, r8, lsl #15
     814:	00001854 	andeq	r1, r0, r4, asr r8
     818:	00001854 	andeq	r1, r0, r4, asr r8
     81c:	00001868 	andeq	r1, r0, r8, ror #16
     820:	00001868 	andeq	r1, r0, r8, ror #16
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	0000189c 	muleq	r0, ip, r8
     828:	0000189c 	muleq	r0, ip, r8
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	000018d0 	ldrdeq	r1, [r0], -r0
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	00000001 	andeq	r0, r0, r1
			if (node_db->nnodes[i] == 0) break;
     834:	00000001 	andeq	r0, r0, r1
     838:	000018d0 	ldrdeq	r1, [r0], -r0
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	000018f4 	strdeq	r1, [r0], -r4
     840:	000018f4 	strdeq	r1, [r0], -r4
     844:	0000192c 	andeq	r1, r0, ip, lsr #18
     848:	00000001 	andeq	r0, r0, r1
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	00000001 	andeq	r0, r0, r1
		ser_out(display_neighbour_nodes, "\r\n");
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
		proceed menu;
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	0000192c 	andeq	r1, r0, ip, lsr #18
     864:	00001950 	andeq	r1, r0, r0, asr r9
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00001950 	andeq	r1, r0, r0, asr r9
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	0000195e 	andeq	r1, r0, lr, asr r9
     878:	0000195e 	andeq	r1, r0, lr, asr r9
			strncpy(reason, "Error: improper ID", 50);
     87c:	0000196e 	andeq	r1, r0, lr, ror #18
     880:	0000196e 	andeq	r1, r0, lr, ror #18
			proceed error;
     884:	0000198a 	andeq	r1, r0, sl, lsl #19
     888:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	00000001 	andeq	r0, r0, r1
     898:	0000198a 	andeq	r1, r0, sl, lsl #19
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	0000199e 	muleq	r0, lr, r9
     8a0:	0000199e 	muleq	r0, lr, r9
     8a4:	000019ac 	andeq	r1, r0, ip, lsr #19
		create_message->gid = node_db->gid;
     8a8:	000019ac 	andeq	r1, r0, ip, lsr #19
		create_message->tpe = 2;
     8ac:	000019d0 	ldrdeq	r1, [r0], -r0
		create_message->request_number = generate_request_num();
     8b0:	000019d0 	ldrdeq	r1, [r0], -r0
     8b4:	00001a6c 	andeq	r1, r0, ip, ror #20
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	00001a6c 	andeq	r1, r0, ip, ror #20
     8bc:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	00001b04 	andeq	r1, r0, r4, lsl #22
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	00001b04 	andeq	r1, r0, r4, lsl #22
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	00001b54 	andeq	r1, r0, r4, asr fp
		response_checker[0] = create_message->request_number;
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
		call sender(create_message, wait);
     8d8:	00001b54 	andeq	r1, r0, r4, asr fp
     8dc:	00001bfc 	strdeq	r1, [r0], -ip
     8e0:	00001bfc 	strdeq	r1, [r0], -ip
     8e4:	00001c30 	andeq	r1, r0, r0, lsr ip
     8e8:	00001c30 	andeq	r1, r0, r0, lsr ip
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	00001c48 	andeq	r1, r0, r8, asr #24
     8f0:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	00001c48 	andeq	r1, r0, r8, asr #24
     904:	00001d84 	andeq	r1, r0, r4, lsl #27
			strncpy(reason, "Error: improper node ID", 50);
     908:	00001d84 	andeq	r1, r0, r4, lsl #27
     90c:	00001da8 	andeq	r1, r0, r8, lsr #27
	...
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	00001e68 	andeq	r1, r0, r8, ror #28
     91c:	00001e6e 	andeq	r1, r0, lr, ror #28
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	00001e74 	andeq	r1, r0, r4, ror lr
     924:	00001e78 	andeq	r1, r0, r8, ror lr
     928:	00001e80 	andeq	r1, r0, r0, lsl #29
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	00001ea0 	andeq	r1, r0, r0, lsr #29
	...
			strncpy(reason, "Error: invalid index", 50);
     938:	00000001 	andeq	r0, r0, r1
			proceed error;
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     944:	00000001 	andeq	r0, r0, r1
	...
		delete_record->gid = node_db->gid;
     950:	00001da8 	andeq	r1, r0, r8, lsr #27
		delete_record->tpe = DELETE_RECORD;
     954:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
		delete_record->request_number = generate_request_num();
     958:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
     95c:	00001dd8 	ldrdeq	r1, [r0], -r8
		delete_record->sender_id = node_db->id;
     960:	00001dd8 	ldrdeq	r1, [r0], -r8
     964:	00001de6 	andeq	r1, r0, r6, ror #27
     968:	00001de8 	andeq	r1, r0, r8, ror #27
		call sender(&delete_record, wait);
     96c:	00001e34 	andeq	r1, r0, r4, lsr lr
		delete_record->receiver_id = user_provided_receiver_id;
     970:	00001e34 	andeq	r1, r0, r4, lsr lr
		delete_record->record_index = user_provided_index;
     974:	00001ec0 	andeq	r1, r0, r0, asr #29
		response_checker[0] = delete_record->request_number;
     978:	00001ec0 	andeq	r1, r0, r0, asr #29
		response_checker[1] = delete_record->tpe;
     97c:	00001f30 	andeq	r1, r0, r0, lsr pc
     980:	00001f30 	andeq	r1, r0, r0, lsr pc
		call sender(&delete_record, wait);
     984:	00001ff0 	strdeq	r1, [r0], -r0
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
     990:	00001ff0 	strdeq	r1, [r0], -r0
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     994:	00002014 	andeq	r2, r0, r4, lsl r0
     998:	00002014 	andeq	r2, r0, r4, lsl r0
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	00002094 	muleq	r0, r4, r0
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	00002094 	muleq	r0, r4, r0
     9b4:	00002150 	andeq	r2, r0, r0, asr r1
			proceed error;
     9b8:	00002150 	andeq	r2, r0, r0, asr r1
     9bc:	0000218a 	andeq	r2, r0, sl, lsl #3
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
     9d0:	0000218c 	andeq	r2, r0, ip, lsl #3
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
			strncpy(reason, "Error: invalid index", 50);
     9d8:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
     9dc:	00002218 	andeq	r2, r0, r8, lsl r2
     9e0:	00000001 	andeq	r0, r0, r1
			proceed error;
     9e4:	00000001 	andeq	r0, r0, r1
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
		retrieve_record->gid = node_db->gid;
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
     9f8:	00000001 	andeq	r0, r0, r1
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	00000001 	andeq	r0, r0, r1
		retrieve_record->request_number = generate_request_num();
     a00:	00002218 	andeq	r2, r0, r8, lsl r2
     a04:	00002280 	andeq	r2, r0, r0, lsl #5
		retrieve_record->sender_id = node_db->id;
     a08:	00002280 	andeq	r2, r0, r0, lsl #5
		response_checker[0] = retrieve_record->request_number;
     a0c:	000022d0 	ldrdeq	r2, [r0], -r0
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	000022d0 	ldrdeq	r2, [r0], -r0
     a14:	0000236c 	andeq	r2, r0, ip, ror #6
		retrieve_record->record_index = user_provided_index;
     a18:	0000236c 	andeq	r2, r0, ip, ror #6
     a1c:	000023ac 	andeq	r2, r0, ip, lsr #7
		response_checker[0] = retrieve_record->request_number;
     a20:	000023ac 	andeq	r2, r0, ip, lsr #7
		call sender(&retrieve_record, wait);
     a24:	000023e0 	andeq	r2, r0, r0, ror #7
     a28:	000023e0 	andeq	r2, r0, r0, ror #7
     a2c:	0000241c 	andeq	r2, r0, ip, lsl r4
     a30:	00000001 	andeq	r0, r0, r1
     a34:	00000001 	andeq	r0, r0, r1
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	0000241c 	andeq	r2, r0, ip, lsl r4
     a3c:	0000241e 	andeq	r2, r0, lr, lsl r4
	...
		if(node_db->data_base.item_count != 0){
     a48:	0000241e 	andeq	r2, r0, lr, lsl r4
		ser_out(loop_through_data, "\r\n");
     a4c:	00002420 	andeq	r2, r0, r0, lsr #8
     a50:	00002420 	andeq	r2, r0, r0, lsr #8
		proceed menu;
     a54:	00002422 	andeq	r2, r0, r2, lsr #8
		delete_all(node_db);
     a58:	00002422 	andeq	r2, r0, r2, lsr #8
     a5c:	00002424 	andeq	r2, r0, r4, lsr #8
		proceed menu;
     a60:	00002424 	andeq	r2, r0, r4, lsr #8
     a64:	00002468 	andeq	r2, r0, r8, ror #8
	...
		when(&response_flag, menu);
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
		release;
     a78:	00000001 	andeq	r0, r0, r1
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	00000001 	andeq	r0, r0, r1
     a80:	00000001 	andeq	r0, r0, r1
     a84:	00000001 	andeq	r0, r0, r1
     a88:	00000001 	andeq	r0, r0, r1
     a8c:	00000001 	andeq	r0, r0, r1
	...
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	00000001 	andeq	r0, r0, r1
     a9c:	00000001 	andeq	r0, r0, r1
     aa0:	00000001 	andeq	r0, r0, r1
     aa4:	00000001 	andeq	r0, r0, r1
	...
		ser_out(timeout, "\r\nFailed to reach the destination");
     ab0:	00000001 	andeq	r0, r0, r1
		proceed menu;
     ab4:	00000001 	andeq	r0, r0, r1
     ab8:	00000001 	andeq	r0, r0, r1
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	00000001 	andeq	r0, r0, r1
     ac0:	00000001 	andeq	r0, r0, r1
		proceed menu;
     ac4:	00000001 	andeq	r0, r0, r1
     ac8:	00000001 	andeq	r0, r0, r1
}
     acc:	00000001 	andeq	r0, r0, r1
	...
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
     ae0:	00000001 	andeq	r0, r0, r1
     ae4:	00000001 	andeq	r0, r0, r1
	...
     af0:	00000001 	andeq	r0, r0, r1
     af4:	00000001 	andeq	r0, r0, r1
     af8:	00000001 	andeq	r0, r0, r1
     afc:	00000001 	andeq	r0, r0, r1
     b00:	00000001 	andeq	r0, r0, r1
     b04:	00000001 	andeq	r0, r0, r1
	...
     b10:	00000001 	andeq	r0, r0, r1
     b14:	00000001 	andeq	r0, r0, r1
     b18:	00000001 	andeq	r0, r0, r1
     b1c:	00000001 	andeq	r0, r0, r1
	...
     b28:	00002474 	andeq	r2, r0, r4, ror r4
static void devinit_uart (int devnum) {
     b2c:	00002478 	andeq	r2, r0, r8, ror r4
	adddevfunc (ioreq_uart_a, devnum);
     b30:	0000247e 	andeq	r2, r0, lr, ror r4
     b34:	00002480 	andeq	r2, r0, r0, lsl #9
void udelay (volatile word n) {
     b38:	0000248e 	andeq	r2, r0, lr, lsl #9
     b3c:	0000248e 	andeq	r2, r0, lr, lsl #9
	while (n) {
     b40:	00002490 	muleq	r0, r0, r4
     b44:	00002492 	muleq	r0, r2, r4
	...
	while (n--);
     b50:	0000247a 	andeq	r2, r0, sl, ror r4
     b54:	0000247c 	andeq	r2, r0, ip, ror r4
		n--;
     b58:	00002492 	muleq	r0, r2, r4
     b5c:	00002494 	muleq	r0, r4, r4
	...
void mdelay (volatile word n) {
     b68:	0000247c 	andeq	r2, r0, ip, ror r4
	while (n) {
     b6c:	0000247e 	andeq	r2, r0, lr, ror r4
     b70:	00002480 	andeq	r2, r0, r0, lsl #9
}
     b74:	00002482 	andeq	r2, r0, r2, lsl #9
		udelay (999);
     b78:	00002488 	andeq	r2, r0, r8, lsl #9
     b7c:	00002488 	andeq	r2, r0, r8, lsl #9
	...
		n--;
     b88:	000024ac 	andeq	r2, r0, ip, lsr #9
     b8c:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
void __pi_ondomain (lword d) {
     b90:	000024be 			; <UNDEFINED> instruction: 0x000024be
     b94:	000024be 			; <UNDEFINED> instruction: 0x000024be
		if (__pi_systat.effpdm > 1)
     b98:	000024c2 	andeq	r2, r0, r2, asr #9
     b9c:	000024c4 	andeq	r2, r0, r4, asr #9
	...
	PRCMPowerDomainOn (d);
     ba8:	000024c4 	andeq	r2, r0, r4, asr #9
     bac:	000024c4 	andeq	r2, r0, r4, asr #9
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb0:	000024c6 	andeq	r2, r0, r6, asr #9
     bb4:	000024c8 	andeq	r2, r0, r8, asr #9
	...
	__pi_systat.ondmns |= d;
     bc0:	000024d4 	ldrdeq	r2, [r0], -r4
}
     bc4:	000024d6 	ldrdeq	r2, [r0], -r6
     bc8:	000024d8 	ldrdeq	r2, [r0], -r8
void __pi_offdomain (lword d) {
     bcc:	000024dc 	ldrdeq	r2, [r0], -ip
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	000024f4 	strdeq	r2, [r0], -r4
     bdc:	000024f6 	strdeq	r2, [r0], -r6
     be0:	000024fa 	strdeq	r2, [r0], -sl
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	000024fc 	strdeq	r2, [r0], -ip
     be8:	00002502 	andeq	r2, r0, r2, lsl #10
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	00002512 	andeq	r2, r0, r2, lsl r5
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf8:	000024f4 	strdeq	r2, [r0], -r4
	__pi_systat.ondmns &= ~d;
     bfc:	000024f6 	strdeq	r2, [r0], -r6
     c00:	000024fa 	strdeq	r2, [r0], -sl
}
     c04:	000024fc 	strdeq	r2, [r0], -ip
     c08:	00002502 	andeq	r2, r0, r2, lsl #10
void __pi_syserror (word ec, const char *m) {
     c0c:	00002502 	andeq	r2, r0, r2, lsl #10
	diag ("SYSERR: %x, %s", ec, m);
     c10:	00002504 	andeq	r2, r0, r4, lsl #10
     c14:	00002506 	andeq	r2, r0, r6, lsl #10
	...
     c20:	0000255a 	andeq	r2, r0, sl, asr r5
     c24:	0000255e 	andeq	r2, r0, lr, asr r5
		all_leds_blink;
     c28:	00002560 	andeq	r2, r0, r0, ror #10
     c2c:	00002562 	andeq	r2, r0, r2, ror #10
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	00002566 	andeq	r2, r0, r6, ror #10
     c3c:	00002566 	andeq	r2, r0, r6, ror #10
     c40:	00002568 	andeq	r2, r0, r8, ror #10
     c44:	0000256a 	andeq	r2, r0, sl, ror #10
	...
	while (1) {
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00000001 	andeq	r0, r0, r1
     c58:	00000001 	andeq	r0, r0, r1
     c5c:	00000001 	andeq	r0, r0, r1
	...
	setdel = __pi_mintk - __pi_old;
     c68:	00000001 	andeq	r0, r0, r1
     c6c:	00000001 	andeq	r0, r0, r1
     c70:	00000001 	andeq	r0, r0, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c74:	00000001 	andeq	r0, r0, r1
	...
     c80:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	00000001 	andeq	r0, r0, r1
	sti_tim;
     c88:	00000001 	andeq	r0, r0, r1
}
     c8c:	00000001 	andeq	r0, r0, r1
	...
     c98:	00000001 	andeq	r0, r0, r1
     c9c:	00000001 	andeq	r0, r0, r1
	cli_aux;
     ca0:	00000001 	andeq	r0, r0, r1
     ca4:	00000001 	andeq	r0, r0, r1
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     cb0:	00002470 	andeq	r2, r0, r0, ror r4
     cb4:	000024a4 	andeq	r2, r0, r4, lsr #9
	sti_aux;
     cb8:	000024a4 	andeq	r2, r0, r4, lsr #9
}
     cbc:	000024d4 	ldrdeq	r2, [r0], -r4
     cc0:	000024d4 	ldrdeq	r2, [r0], -r4
     cc4:	000024ec 	andeq	r2, r0, ip, ror #9
void AONRTCIntHandler () {
     cc8:	000024ec 	andeq	r2, r0, ip, ror #9
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     ccc:	00002540 	andeq	r2, r0, r0, asr #10
     cd0:	00002540 	andeq	r2, r0, r0, asr #10
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	00002580 	andeq	r2, r0, r0, lsl #11
		if (__pi_utims [0] == 0)
     cd8:	00002580 	andeq	r2, r0, r0, lsl #11
     cdc:	000025a4 	andeq	r2, r0, r4, lsr #11
		if (*(__pi_utims [0])) {
     ce0:	000025a4 	andeq	r2, r0, r4, lsr #11
     ce4:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
			(*(__pi_utims [0]))--;
     ce8:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
		if (__pi_utims [1] == 0)
     cec:	000025cc 	andeq	r2, r0, ip, asr #11
		if (*(__pi_utims [1])) {
     cf0:	00000001 	andeq	r0, r0, r1
			aux_timer_inactive = 0;
     cf4:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [1]))--;
     cf8:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [2] == 0)
     cfc:	00000001 	andeq	r0, r0, r1
		if (*(__pi_utims [2])) {
     d00:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [2]))--;
     d04:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [3] != 0) {
     d08:	00000001 	andeq	r0, r0, r1
			if (*(__pi_utims [3])) {
     d0c:	00000001 	andeq	r0, r0, r1
				aux_timer_inactive = 0;
     d10:	00000001 	andeq	r0, r0, r1
				(*(__pi_utims [3]))--;
     d14:	00000001 	andeq	r0, r0, r1
	if (__pi_systat.ledsts) {
     d18:	00000001 	andeq	r0, r0, r1
     d1c:	00000001 	andeq	r0, r0, r1
		if (__pi_systat.ledblc++ == 0) {
     d20:	00000001 	andeq	r0, r0, r1
     d24:	00000001 	andeq	r0, r0, r1
	...
			if (__pi_systat.ledblk) {
     d30:	000025cc 	andeq	r2, r0, ip, asr #11
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	00002638 	andeq	r2, r0, r8, lsr r6
	...
     d40:	00002638 	andeq	r2, r0, r8, lsr r6
     d44:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
	...
				__pi_systat.ledblk = 0;
     d50:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
			if (__pi_systat.fstblk)
     d54:	00002704 	andeq	r2, r0, r4, lsl #14
	...
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	00002704 	andeq	r2, r0, r4, lsl #14
		cli_tim;
     d64:	00002764 	andeq	r2, r0, r4, ror #14
	...
		setdel = 0;
     d70:	0000298a 	andeq	r2, r0, sl, lsl #19
		RISE_N_SHINE;
     d74:	0000298c 	andeq	r2, r0, ip, lsl #19
		__pi_new += setdel;
     d78:	000029a0 	andeq	r2, r0, r0, lsr #19
		RISE_N_SHINE;
     d7c:	000029a2 	andeq	r2, r0, r2, lsr #19
     d80:	000029a4 	andeq	r2, r0, r4, lsr #19
		aux_timer_inactive = 1;
     d84:	000029a6 	andeq	r2, r0, r6, lsr #19
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	00002a14 	andeq	r2, r0, r4, lsl sl
     d94:	00002a1a 	andeq	r2, r0, sl, lsl sl
				if (__pi_systat.ledsts & 0x2)
     d98:	00002a1e 	andeq	r2, r0, lr, lsl sl
     d9c:	00002a20 	andeq	r2, r0, r0, lsr #20
	...
				__pi_systat.ledblk = 1;
     da8:	00002a42 	andeq	r2, r0, r2, asr #20
     dac:	00002a48 	andeq	r2, r0, r8, asr #20
		if (aux_timer_inactive) {
     db0:	00002a4a 	andeq	r2, r0, sl, asr #20
			cli_aux;
     db4:	00002a4c 	andeq	r2, r0, ip, asr #20
	...
     dc0:	00002a50 	andeq	r2, r0, r0, asr sl
     dc4:	00002a5c 	andeq	r2, r0, ip, asr sl
     dc8:	00002a5c 	andeq	r2, r0, ip, asr sl
     dcc:	00002a60 	andeq	r2, r0, r0, ror #20
     dd0:	00002a62 	andeq	r2, r0, r2, ror #20
     dd4:	00002a86 	andeq	r2, r0, r6, lsl #21
	...
	cli_tim;
     de0:	00002a60 	andeq	r2, r0, r0, ror #20
     de4:	00002a62 	andeq	r2, r0, r2, ror #20
	if (setdel) {
     de8:	00002a86 	andeq	r2, r0, r6, lsl #21
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	00002ac0 	andeq	r2, r0, r0, asr #21
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	00002ac2 	andeq	r2, r0, r2, asr #21
     df4:	00002ad4 	ldrdeq	r2, [r0], -r4
	...
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	00002b94 	muleq	r0, r4, fp
	return NO;
     e04:	00002b94 	muleq	r0, r4, fp
			setdel = 0;
     e08:	00002b98 	muleq	r0, r8, fp
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0c:	00002bb2 			; <UNDEFINED> instruction: 0x00002bb2
     e10:	00002bb4 			; <UNDEFINED> instruction: 0x00002bb4
}
     e14:	00002bb6 			; <UNDEFINED> instruction: 0x00002bb6
		sti_tim;
     e18:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
		return YES;
     e1c:	00002bba 			; <UNDEFINED> instruction: 0x00002bba
     e20:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
     e24:	00002bc8 	andeq	r2, r0, r8, asr #23
	...
	UARTDisable (UART0_BASE);
     e30:	00002cda 	ldrdeq	r2, [r0], -sl
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	00002cde 	ldrdeq	r2, [r0], -lr
	UARTDisable (UART0_BASE);
     e38:	00002cfa 	strdeq	r2, [r0], -sl
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	00002cfe 	strdeq	r2, [r0], -lr
	...
     e48:	00002cde 	ldrdeq	r2, [r0], -lr
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	00002cfa 	strdeq	r2, [r0], -sl
     e50:	00002cfe 	strdeq	r2, [r0], -lr
     e54:	00002d06 	andeq	r2, r0, r6, lsl #26
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e60:	00002e72 	andeq	r2, r0, r2, ror lr
	urates [0] = rate;
     e64:	00002e74 	andeq	r2, r0, r4, ror lr
}
     e68:	00002e76 	andeq	r2, r0, r6, ror lr
     e6c:	00002e7a 	andeq	r2, r0, sl, ror lr
	...
     e78:	00002e74 	andeq	r2, r0, r4, ror lr
     e7c:	00002e76 	andeq	r2, r0, r6, ror lr
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	00002e7a 	andeq	r2, r0, sl, ror lr
     e84:	00002ea0 	andeq	r2, r0, r0, lsr #29
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e90:	00002ee8 	andeq	r2, r0, r8, ror #29
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	00002eea 	andeq	r2, r0, sl, ror #29
     e98:	00002eee 	andeq	r2, r0, lr, ror #29
	__pi_uart_setrate (urates [0], __pi_uart);
     e9c:	00002ef4 	strdeq	r2, [r0], -r4
     ea0:	00002ef6 	strdeq	r2, [r0], -r6
     ea4:	00002f42 	andeq	r2, r0, r2, asr #30
     ea8:	00002f44 	andeq	r2, r0, r4, asr #30
     eac:	00002f48 	andeq	r2, r0, r8, asr #30
     eb0:	00002f4a 	andeq	r2, r0, sl, asr #30
     eb4:	00002f5a 	andeq	r2, r0, sl, asr pc
	switch (operation) {
     eb8:	00002f5e 	andeq	r2, r0, lr, asr pc
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	00002f62 	andeq	r2, r0, r2, ror #30
     ec0:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     ec4:	00002f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
	...
				*buf++ = uart_a_read;
     ed0:	00002f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
     ed4:	00002fa0 	andeq	r2, r0, r0, lsr #31
			while (len && uart_a_char_available) {
     ed8:	00002fa2 	andeq	r2, r0, r2, lsr #31
     edc:	00002fd0 	ldrdeq	r2, [r0], -r0
	...
}
     ee8:	00002764 	andeq	r2, r0, r4, ror #14
     eec:	00002784 	andeq	r2, r0, r4, lsl #15
			uart_a_disable_int;
     ef0:	00002784 	andeq	r2, r0, r4, lsl #15
			if (uart_a_char_available) {
     ef4:	00002914 	andeq	r2, r0, r4, lsl r9
				*buf++ = uart_a_read;
     ef8:	00002914 	andeq	r2, r0, r4, lsl r9
			uart_a_disable_int;
     efc:	0000295c 	andeq	r2, r0, ip, asr r9
     f00:	0000295c 	andeq	r2, r0, ip, asr r9
			if (uart_a_char_available) {
     f04:	00002980 	andeq	r2, r0, r0, lsl #19
     f08:	00002980 	andeq	r2, r0, r0, lsl #19
				uart_a_enable_int;
     f0c:	000029dc 	ldrdeq	r2, [r0], -ip
     f10:	000029dc 	ldrdeq	r2, [r0], -ip
				goto Redo_rx;
     f14:	00002a14 	andeq	r2, r0, r4, lsl sl
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	00002a14 	andeq	r2, r0, r4, lsl sl
     f1c:	00002b94 	muleq	r0, r4, fp
			return -2;
     f20:	00002b94 	muleq	r0, r4, fp
     f24:	00002c64 	andeq	r2, r0, r4, ror #24
				uart_a_write (*buf);
     f28:	00002c64 	andeq	r2, r0, r4, ror #24
     f2c:	00002e54 	andeq	r2, r0, r4, asr lr
			while (len && uart_a_room_in_tx) {
     f30:	00002e54 	andeq	r2, r0, r4, asr lr
     f34:	00002ec4 	andeq	r2, r0, r4, asr #29
     f38:	00002ec4 	andeq	r2, r0, r4, asr #29
			if (len != operation) {
     f3c:	00003038 	andeq	r3, r0, r8, lsr r0
	...
			if (uart_a_room_in_tx) {
     f48:	00003038 	andeq	r3, r0, r8, lsr r0
     f4c:	0000305c 	andeq	r3, r0, ip, asr r0
				uart_a_enable_int;
     f50:	0000305c 	andeq	r3, r0, ip, asr r0
     f54:	00003080 	andeq	r3, r0, r0, lsl #1
				*buf++ = uart_a_read;
     f58:	00003080 	andeq	r3, r0, r0, lsl #1
			if (uart_a_room_in_tx) {
     f5c:	00003088 	andeq	r3, r0, r8, lsl #1
				uart_a_write (*buf);
     f60:	00003088 	andeq	r3, r0, r8, lsl #1
     f64:	0000308c 	andeq	r3, r0, ip, lsl #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	0000308c 	andeq	r3, r0, ip, lsl #1
     f6c:	00003090 	muleq	r0, r0, r0
			uart_a_enable_int;
     f70:	00003090 	muleq	r0, r0, r0
     f74:	000030d8 	ldrdeq	r3, [r0], -r8
	...
			if (len == UART_CNTRL_SETRATE) {
     f80:	000030e6 	andeq	r3, r0, r6, ror #1
				if (__pi_uart_setrate (*((word*)buf),
     f84:	000030e6 	andeq	r3, r0, r6, ror #1
     f88:	000030ec 	andeq	r3, r0, ip, ror #1
     f8c:	00003148 	andeq	r3, r0, r8, asr #2
	...
			if (len == UART_CNTRL_GETRATE) {
     f98:	000030d8 	ldrdeq	r3, [r0], -r8
				return 1;
     f9c:	00003148 	andeq	r3, r0, r8, asr #2
	...
			syserror (ENOOPER, "uai");
     fa8:	0000315c 	andeq	r3, r0, ip, asr r1
     fac:	00003240 	andeq	r3, r0, r0, asr #4
     fb0:	00003246 	andeq	r3, r0, r6, asr #4
     fb4:	0000324a 	andeq	r3, r0, sl, asr #4
     fb8:	00003250 	andeq	r3, r0, r0, asr r2
     fbc:	00003264 	andeq	r3, r0, r4, ror #4
	...
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	00003148 	andeq	r3, r0, r8, asr #2
void UART0IntHandler () {
     fcc:	00003264 	andeq	r3, r0, r4, ror #4
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd8:	00003290 	muleq	r0, r0, r2
     fdc:	00003292 	muleq	r0, r2, r2
     fe0:	00003360 	andeq	r3, r0, r0, ror #6
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	00003384 	andeq	r3, r0, r4, lsl #7
     fe8:	00003386 	andeq	r3, r0, r6, lsl #7
		RISE_N_SHINE;
     fec:	000033ce 	andeq	r3, r0, lr, asr #7
     ff0:	000033f8 	strdeq	r3, [r0], -r8
		i_trigger (devevent (UART_A, READ));
     ff4:	000033fa 	strdeq	r3, [r0], -sl
	...
    1000:	00003292 	muleq	r0, r2, r2
    1004:	00003294 	muleq	r0, r4, r2
    1008:	00003336 	andeq	r3, r0, r6, lsr r3
    100c:	00003360 	andeq	r3, r0, r0, ror #6
    1010:	00003384 	andeq	r3, r0, r4, lsl #7
    1014:	00003386 	andeq	r3, r0, r6, lsl #7
	...
    1020:	000032d2 	ldrdeq	r3, [r0], -r2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	000032da 	ldrdeq	r3, [r0], -sl
    1028:	0000347e 	andeq	r3, r0, lr, ror r4
    102c:	0000348a 	andeq	r3, r0, sl, lsl #9
	...
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	000033d8 	ldrdeq	r3, [r0], -r8
		RISE_N_SHINE;
    103c:	000033f8 	strdeq	r3, [r0], -r8
    1040:	000033fa 	strdeq	r3, [r0], -sl
    1044:	0000343e 	andeq	r3, r0, lr, lsr r4
	...
		i_trigger (devevent (UART_A, WRITE));
    1050:	00003264 	andeq	r3, r0, r4, ror #4
    1054:	00003284 	andeq	r3, r0, r4, lsl #5
    1058:	00003284 	andeq	r3, r0, r4, lsl #5
    105c:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
    1060:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
    1064:	00003504 	andeq	r3, r0, r4, lsl #10
	...
    1070:	00003518 	andeq	r3, r0, r8, lsl r5
}
    1074:	0000351c 	andeq	r3, r0, ip, lsl r5
    1078:	000037f6 	strdeq	r3, [r0], -r6
    107c:	0000383e 	andeq	r3, r0, lr, lsr r8
	...
void __buttons_setirq (int val) {
    1088:	0000351c 	andeq	r3, r0, ip, lsl r5
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	00003522 	andeq	r3, r0, r2, lsr #10
    1090:	0000355a 	andeq	r3, r0, sl, asr r5
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	000035c6 	andeq	r3, r0, r6, asr #11
    1098:	0000385a 	andeq	r3, r0, sl, asr r8
    109c:	0000387a 	andeq	r3, r0, sl, ror r8
	...
    10a8:	0000367e 	andeq	r3, r0, lr, ror r6
    10ac:	000036f8 	strdeq	r3, [r0], -r8
    10b0:	00003882 	andeq	r3, r0, r2, lsl #17
    10b4:	0000388a 	andeq	r3, r0, sl, lsl #17
	...
}
    10c0:	00003710 	andeq	r3, r0, r0, lsl r7
    10c4:	00003766 	andeq	r3, r0, r6, ror #14
    10c8:	000037dc 	ldrdeq	r3, [r0], -ip
void __pinlist_setirq (int val) {
    10cc:	000037f6 	strdeq	r3, [r0], -r6
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	0000376c 	andeq	r3, r0, ip, ror #14
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	000037dc 	ldrdeq	r3, [r0], -ip
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10e0:	0000383e 	andeq	r3, r0, lr, lsr r8
    10e4:	00003846 	andeq	r3, r0, r6, asr #16
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e8:	0000388a 	andeq	r3, r0, sl, lsl #17
    10ec:	00003894 	muleq	r0, r4, r8
	...
}
    10f8:	00003504 	andeq	r3, r0, r4, lsl #10
    10fc:	00003894 	muleq	r0, r4, r8
	...
void GPIOIntHandler () {
    1108:	00003894 	muleq	r0, r4, r8
if (buttons_int) {
    110c:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    1110:	00000001 	andeq	r0, r0, r1
	buttons_disable ();
    1114:	00000001 	andeq	r0, r0, r1
	...
	i_trigger ((aword)&__button_list);
    1120:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    1124:	000038ec 	andeq	r3, r0, ip, ror #17
	...
    1130:	000038ec 	andeq	r3, r0, ip, ror #17
    1134:	0000390c 	andeq	r3, r0, ip, lsl #18
    1138:	0000390c 	andeq	r3, r0, ip, lsl #18
    113c:	00003924 	andeq	r3, r0, r4, lsr #18
	...
	RISE_N_SHINE;
    1148:	00003924 	andeq	r3, r0, r4, lsr #18
    114c:	0000392c 	andeq	r3, r0, ip, lsr #18
    1150:	00000001 	andeq	r0, r0, r1
if (pin_sensor_int) {
    1154:	00000001 	andeq	r0, r0, r1
    1158:	0000392c 	andeq	r3, r0, ip, lsr #18
	i_trigger ((aword)(&__input_pins));
    115c:	00003934 	andeq	r3, r0, r4, lsr r9
    1160:	00000001 	andeq	r0, r0, r1
    1164:	00000001 	andeq	r0, r0, r1
    1168:	00000001 	andeq	r0, r0, r1
    116c:	00000001 	andeq	r0, r0, r1
	...
    1178:	00003996 	muleq	r0, r6, r9
    117c:	000039a6 	andeq	r3, r0, r6, lsr #19
    1180:	000039ac 	andeq	r3, r0, ip, lsr #19
    1184:	000039ae 	andeq	r3, r0, lr, lsr #19
	...
	RISE_N_SHINE;
    1190:	00003934 	andeq	r3, r0, r4, lsr r9
    1194:	00003990 	muleq	r0, r0, r9
}
    1198:	00003990 	muleq	r0, r0, r9
    119c:	000039bc 			; <UNDEFINED> instruction: 0x000039bc
    11a0:	00000001 	andeq	r0, r0, r1
    11a4:	00000001 	andeq	r0, r0, r1
    11a8:	000039bc 			; <UNDEFINED> instruction: 0x000039bc
void system_init () {
    11ac:	000039d4 	ldrdeq	r3, [r0], -r4
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	000039d4 	ldrdeq	r3, [r0], -r4
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	00003a34 	andeq	r3, r0, r4, lsr sl
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	00003a34 	andeq	r3, r0, r4, lsr sl
    11bc:	00003a68 	andeq	r3, r0, r8, ror #20
    11c0:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	00000001 	andeq	r0, r0, r1
    11c8:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	00000001 	andeq	r0, r0, r1
    11d0:	00000001 	andeq	r0, r0, r1
    11d4:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11dc:	00000001 	andeq	r0, r0, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ec:	00000001 	andeq	r0, r0, r1
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	00003a68 	andeq	r3, r0, r8, ror #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	00003a90 	muleq	r0, r0, sl
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	00003a90 	muleq	r0, r0, sl
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	00003adc 	ldrdeq	r3, [r0], -ip
    1200:	00003adc 	ldrdeq	r3, [r0], -ip
    1204:	00003c2c 	andeq	r3, r0, ip, lsr #24
    1208:	00003c2c 	andeq	r3, r0, ip, lsr #24
		if (port_confs [i] & 0x80)
    120c:	00003d44 	andeq	r3, r0, r4, asr #26
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	00003d44 	andeq	r3, r0, r4, asr #26
    1214:	00003d64 	andeq	r3, r0, r4, ror #26
		if (port_confs [i] & 0x40)
    1218:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	00000001 	andeq	r0, r0, r1
    1220:	00003d64 	andeq	r3, r0, r4, ror #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	00003d80 	andeq	r3, r0, r0, lsl #27
	...
	all_leds_blink;
    1230:	00003d80 	andeq	r3, r0, r0, lsl #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1234:	00003e54 	andeq	r3, r0, r4, asr lr
    1238:	00003e54 	andeq	r3, r0, r4, asr lr
    123c:	00003ef8 	strdeq	r3, [r0], -r8
	...
    1248:	00003f06 	andeq	r3, r0, r6, lsl #30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	00003f08 	andeq	r3, r0, r8, lsl #30
    1250:	00003f0c 	andeq	r3, r0, ip, lsl #30
    1254:	00003f10 	andeq	r3, r0, r0, lsl pc
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	00004214 	andeq	r4, r0, r4, lsl r2
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	00004216 	andeq	r4, r0, r6, lsl r2
    1268:	00004218 	andeq	r4, r0, r8, lsl r2
	IntEnable (INT_AON_RTC_COMB);
    126c:	0000421a 	andeq	r4, r0, sl, lsl r2
	...
	__pi_malloc_init ();
    1278:	00003ef8 	strdeq	r3, [r0], -r8
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	00003f74 	andeq	r3, r0, r4, ror pc
    1280:	00003f74 	andeq	r3, r0, r4, ror pc
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1284:	00004020 	andeq	r4, r0, r0, lsr #32
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	00004020 	andeq	r4, r0, r0, lsr #32
    128c:	0000407c 	andeq	r4, r0, ip, ror r0
    1290:	0000407c 	andeq	r4, r0, ip, ror r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	00004094 	muleq	r0, r4, r0
    1298:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	00000001 	andeq	r0, r0, r1
    12a0:	00004094 	muleq	r0, r4, r0
    12a4:	000040a4 	andeq	r4, r0, r4, lsr #1
	urates [0] = UART_RATE / 100;
    12a8:	000040a4 	andeq	r4, r0, r4, lsr #1
    12ac:	000040b8 	strheq	r4, [r0], -r8
	reinit_uart ();
    12b0:	000040b8 	strheq	r4, [r0], -r8
	EXTRA_INITIALIZERS;
    12b4:	0000411c 	andeq	r4, r0, ip, lsl r1
    12b8:	0000411c 	andeq	r4, r0, ip, lsl r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	00004130 	andeq	r4, r0, r0, lsr r1
    12c0:	00004130 	andeq	r4, r0, r0, lsr r1
    12c4:	00004144 	andeq	r4, r0, r4, asr #2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	00004144 	andeq	r4, r0, r4, asr #2
    12cc:	00004158 	andeq	r4, r0, r8, asr r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	00004158 	andeq	r4, r0, r8, asr r1
    12d4:	00004180 	andeq	r4, r0, r0, lsl #3
			devinit [i] . init (devinit [i] . param);
    12d8:	00004180 	andeq	r4, r0, r0, lsl #3
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	00004190 	muleq	r0, r0, r1
    12e0:	00004190 	muleq	r0, r0, r1
    12e4:	000041bc 			; <UNDEFINED> instruction: 0x000041bc
	IntEnable (INT_UART0_COMB);
    12e8:	000041bc 			; <UNDEFINED> instruction: 0x000041bc
    12ec:	000041d0 	ldrdeq	r4, [r0], -r0
}
    12f0:	000041d0 	ldrdeq	r4, [r0], -r0
	tci_run_auxiliary_timer ();
    12f4:	000041e4 	andeq	r4, r0, r4, ror #3
		diag ("");
    12f8:	000041e4 	andeq	r4, r0, r4, ror #3
    12fc:	000042f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1300:	000042f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	00004358 	andeq	r4, r0, r8, asr r3
		diag ("Leftover RAM: %d bytes",
    1308:	00004358 	andeq	r4, r0, r8, asr r3
    130c:	00004380 	andeq	r4, r0, r0, lsl #7
    1310:	00004380 	andeq	r4, r0, r0, lsl #7
    1314:	000044d0 	ldrdeq	r4, [r0], -r0
	...
    1320:	00000001 	andeq	r0, r0, r1
    1324:	00000001 	andeq	r0, r0, r1
    1328:	00000001 	andeq	r0, r0, r1
    132c:	00000001 	andeq	r0, r0, r1
	...
    1338:	00004546 	andeq	r4, r0, r6, asr #10
    133c:	00004548 	andeq	r4, r0, r8, asr #10
    1340:	0000454a 	andeq	r4, r0, sl, asr #10
    1344:	0000454e 	andeq	r4, r0, lr, asr #10
	...
    1350:	00000001 	andeq	r0, r0, r1
    1354:	00000001 	andeq	r0, r0, r1
    1358:	000044d0 	ldrdeq	r4, [r0], -r0
    135c:	000046f0 	strdeq	r4, [r0], -r0
    1360:	000046f0 	strdeq	r4, [r0], -r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	00004750 	andeq	r4, r0, r0, asr r7
    1368:	00000001 	andeq	r0, r0, r1
    136c:	00000001 	andeq	r0, r0, r1
    1370:	00004750 	andeq	r4, r0, r0, asr r7
    1374:	00004768 	andeq	r4, r0, r8, ror #14
	...
    1380:	000047b6 			; <UNDEFINED> instruction: 0x000047b6
}
    1384:	000047ba 			; <UNDEFINED> instruction: 0x000047ba
__attribute__ ((noreturn)) void __pi_release () {
    1388:	000047c0 	andeq	r4, r0, r0, asr #15
    138c:	000047c2 	andeq	r4, r0, r2, asr #15
	...
	check_stack_overflow;
    1398:	000047ba 			; <UNDEFINED> instruction: 0x000047ba
    139c:	000047c0 	andeq	r4, r0, r0, asr #15
    13a0:	000047c2 	andeq	r4, r0, r2, asr #15
	update_n_wake (MAX_WORD, NO);
    13a4:	000047ca 	andeq	r4, r0, sl, asr #15
	...
	for_all_tasks (__pi_curr) {
    13b0:	00000001 	andeq	r0, r0, r1
    13b4:	00000001 	andeq	r0, r0, r1
    13b8:	00000001 	andeq	r0, r0, r1
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	00000001 	andeq	r0, r0, r1
	__SLEEP;
    13c0:	00004768 	andeq	r4, r0, r8, ror #14
    13c4:	000047b4 			; <UNDEFINED> instruction: 0x000047b4
    13c8:	00000001 	andeq	r0, r0, r1
    13cc:	00000001 	andeq	r0, r0, r1
	system_event_count ++;
    13d0:	000047b4 			; <UNDEFINED> instruction: 0x000047b4
    13d4:	00004820 	andeq	r4, r0, r0, lsr #16
	switch (__pi_systat.effpdm) {
    13d8:	00004820 	andeq	r4, r0, r0, lsr #16
    13dc:	00004836 	andeq	r4, r0, r6, lsr r8
	...
			__WFI ();
    13e8:	00004838 	andeq	r4, r0, r8, lsr r8
    13ec:	00004860 	andeq	r4, r0, r0, ror #16
    13f0:	00004860 	andeq	r4, r0, r0, ror #16
	check_stack_overflow;
    13f4:	00004868 	andeq	r4, r0, r8, ror #16
    13f8:	00000001 	andeq	r0, r0, r1
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	00000001 	andeq	r0, r0, r1
    1400:	00000001 	andeq	r0, r0, r1
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	00000001 	andeq	r0, r0, r1
			goto Redo;
    1408:	00000001 	andeq	r0, r0, r1
	for_all_tasks (__pi_curr) {
    140c:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	00000001 	andeq	r0, r0, r1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	00000001 	andeq	r0, r0, r1
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	00000004 	andeq	r0, r0, r4
    142c:	00000006 	andeq	r0, r0, r6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	0000000a 	andeq	r0, r0, sl
    1434:	00000026 	andeq	r0, r0, r6, lsr #32
			__WFI ();
    1438:	00000028 	andeq	r0, r0, r8, lsr #32
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	00000038 	andeq	r0, r0, r8, lsr r0
    1440:	0000003e 	andeq	r0, r0, lr, lsr r0
}
    1444:	00000040 	andeq	r0, r0, r0, asr #32
    1448:	00000042 	andeq	r0, r0, r2, asr #32
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144c:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000d08 	andeq	r0, r0, r8, lsl #26
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      54:	2f62696c 	svccs	0x0062696c
		release;
      58:	00737973 	rsbseq	r7, r3, r3, ror r9
      5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa8 <_estack+0xdfffafa8>
			nq++;
      60:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
      68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      6c:	6f746b73 	svcvs	0x00746b73
      70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      7c:	2f534f43 	svccs	0x00534f43
      80:	4f636950 	svcmi	0x00636950
      84:	43432f53 	movtmi	r2, #16211	; 0x3f53
      88:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      8c:	6f682f00 	svcvs	0x00682f00
	if (!button_still_pressed (__button_list [pbutton]))
      90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      98:	442f6e65 	strtmi	r6, [pc], #-3685	; a0 <g_pfnVectors+0xa0>
	if (baction == NULL)
      9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      a0:	4f2f706f 	svcmi	0x002f706f
	(*baction) (pbutton);
      a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
endthread
      a8:	502f5445 	eorpl	r5, pc, r5, asr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	534f4349 	movtpl	r4, #62281	; 0xf349
      b0:	6369502f 	cmnvs	r9, #47	; 0x2f
endthread
      b4:	2f00534f 	svccs	0x0000534f
      b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
fsm sender(struct ResponseMessage *message) {
      c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
      d4:	4349502f 	movtmi	r5, #36911	; 0x902f
      d8:	502f534f 	eorpl	r5, pc, pc, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	534f6369 	movtpl	r6, #62313	; 0xf369
      e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      e4:	562f7362 	strtpl	r7, [pc], -r2, ror #6
      e8:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
		packet[0] = 0;
      ec:	6f682f00 	svcvs	0x00682f00
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		*p = message->tpe;p++;
      f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 100 <_Min_Stack_Size>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		*p = message->sender_id;p++;
     100:	4f2f706f 	svcmi	0x002f706f
		*p = message->receiver_id;p++;
     104:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		switch(message->tpe) {
     108:	502f5445 	eorpl	r5, pc, r5, asr #8
     10c:	534f4349 	movtpl	r4, #62281	; 0xf349
     110:	6369502f 	cmnvs	r9, #47	; 0x2f
		tcv_endp(packet);
     114:	6b2f534f 	blvs	bd4e58 <__ccfg+0xbb4eb0>
     118:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     120:	2f656d6f 	svccs	0x00656d6f
}
     124:	70657473 	rsbvc	r7, r5, r3, ror r4
		finish;
     128:	2f6e6568 	svccs	0x006e6568
     12c:	6b736544 	blvs	1cd9644 <__ccfg+0x1cb969c>
				*p = message->status;p++;
     130:	2f706f74 	svccs	0x00706f74
     134:	4f534c4f 	svcmi	0x00534c4f
				strncpy(p, message->record, sizeof(message->record));
     138:	2f54454e 	svccs	0x0054454e
				*p = message->padding;p++;
     13c:	4f434950 	svcmi	0x00434950
				strncpy(p, message->record, sizeof(message->record));
     140:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				strncpy(p, message->record, sizeof(message->record));
     144:	2f534f63 	svccs	0x00534f63
     148:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
				strncpy(p, message->record, sizeof(message->record));
     14c:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
				*p = message->record_index;p++;
     150:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
				*p = message->padding;
     154:	2e006c6c 	cdpcs	12, 0, cr6, cr0, cr12, {3}
				break;
     158:	6f682f00 	svcvs	0x00682f00
     15c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
     160:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     164:	442f6e65 	strtmi	r6, [pc], #-3685	; 16c <reset_array>
     168:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		node->nnodes[i] = 0;
     16c:	4f2f706f 	svcmi	0x002f706f
     170:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     174:	502f5445 	eorpl	r5, pc, r5, asr #8
     178:	534f4349 	movtpl	r4, #62281	; 0xf349
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	6369502f 	cmnvs	r9, #47	; 0x2f
bool init_node(struct Node* node){
     180:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    node->id  = 0;                  // default id value 0
     184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    node->index = 0;                // default entry count 0
     188:	43432f58 	movtmi	r2, #16216	; 0x3f58
    node->data_base.item_count = 0; // default no items in array
     18c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
	reset_array(node);
     190:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    DEBUG_PRINT("Error initializing node...\n");
     194:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     198:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
};
     19c:	00006269 	andeq	r6, r0, r9, ror #4
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
uint8_t generate_request_num(void){
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
    return (uint8_t) (rand() % 255);
     1a8:	74730000 	ldrbtvc	r0, [r3], #-0
     1ac:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     1b0:	0100682e 	tsteq	r0, lr, lsr #16
}
     1b4:	745f0000 	ldrbvc	r0, [pc], #-0	; 1bc <clear_node_neighbour_array+0x6>
            node->nnodes[i] = 0; // set to null byte
     1b8:	73657079 	cmnvc	r5, #121	; 0x79
     1bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1c0:	65720000 	ldrbvs	r0, [r2, #-0]!
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
};
     1c8:	00020068 	andeq	r0, r2, r8, rrx
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	636f6c00 	cmnvs	pc, #0, 24
     1d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	73000002 	movwvc	r0, #2
     1d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     1dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
        node->data_base.item_count -= 1;
     1e0:	73000001 	movwvc	r0, #1
};
     1e4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
fsm receiver(struct Node* node_db) {
     1e8:	00682e67 	rsbeq	r2, r8, r7, ror #28
     1ec:	61000001 	tstvs	r0, r1
     1f0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
     1f4:	00030068 	andeq	r0, r3, r8, rrx
     1f8:	63616d00 	cmnvs	r1, #0, 26
     1fc:	00682e68 	rsbeq	r2, r8, r8, ror #28
     200:	70000003 	andvc	r0, r0, r3
     204:	5f736e69 	svcpl	0x00736e69
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     20c:	00030068 	andeq	r0, r3, r8, rrx
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
     214:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     21c:	0300682e 	movweq	r6, #2094	; 0x82e
		payload = (struct ResponseMessage*)(incoming_packet+1);
     220:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
     228:	00040068 	andeq	r0, r4, r8, rrx
     22c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	00682e73 	rsbeq	r2, r8, r3, ror lr
     238:	6b000005 	blvs	254 <receiver+0x6c>
     23c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     244:	70000006 	andvc	r0, r0, r6
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	5f67756c 	svcpl	0x0067756c
     24c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
     250:	0700682e 	streq	r6, [r0, -lr, lsr #16]
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	65680000 	strbvs	r0, [r8, #-0]!
     258:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
		switch (tpe){
     25c:	7070682e 	rsbsvc	r6, r0, lr, lsr #16
     260:	00000800 	andeq	r0, r0, r0, lsl #16
     264:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     268:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     26c:	00003e6e 	andeq	r3, r0, lr, ror #28
     270:	6f610000 	svcvs	0x00610000
     274:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	00682e63 	rsbeq	r2, r8, r3, ror #28
     27c:	00000009 	andeq	r0, r0, r9
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	01b50300 			; <UNDEFINED> instruction: 0x01b50300
     28c:	011e0501 	tsteq	lr, r1, lsl #10
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	1305206e 	movwne	r2, #20590	; 0x506e
     29c:	4a370306 	bmi	dc0ebc <__ccfg+0xda0f14>
				if (discovery_request_message->gid == node_db->gid){
     2a0:	01060105 	tsteq	r6, r5, lsl #2
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
					response_message_0->gid = discovery_request_message->gid;
     2a8:	2e490365 	cdpcs	3, 4, cr0, cr9, cr5, {3}
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
					response_message_0->sender_id = node_db->id;
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
					call sender(response_message_0, done_case);
     2bc:	21060205 	tstcs	r6, r5, lsl #4
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
     2c8:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
     2cc:	0a052306 	beq	148eec <__ccfg+0x128f44>
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	2406051c 	strcs	r0, [r6], #-1308	; 0xfffffae4
     2d4:	05220f05 	streq	r0, [r2, #-3845]!	; 0xfffff0fb
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2d8:	0f052e06 	svceq	0x00052e06
     2dc:	030a0521 	movweq	r0, #42273	; 0xa521
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	03052079 	movweq	r2, #20601	; 0x5079
     2e4:	14132106 	ldrne	r2, [r3], #-262	; 0xfffffefa
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	15051313 	strne	r1, [r5, #-787]	; 0xfffffced
     2ec:	13030501 	movwne	r0, #13569	; 0x3501
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	01060605 	tsteq	r6, r5, lsl #12
     2f4:	20062005 	andcs	r2, r6, r5
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
     2fc:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     300:	1b052006 	blne	148320 <__ccfg+0x128378>
     304:	03052006 	movweq	r2, #20486	; 0x5006
     308:	060f0513 			; <UNDEFINED> instruction: 0x060f0513
     30c:	20060501 	andcs	r0, r6, r1, lsl #10
     310:	20061d05 	andcs	r1, r6, r5, lsl #26
     314:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     31c:	1f030603 	svcne	0x00030603
					node_db->index+=1;
     320:	054c4066 	strbeq	r4, [ip, #-102]	; 0xffffff9a
		tcv_endp(incoming_packet);
     324:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
     328:	05052d03 	streq	r2, [r5, #-3331]	; 0xfffff2fd
		proceed receiving;
     32c:	586e0306 	stmdapl	lr!, {r1, r2, r8, r9}^
     330:	01061105 	tsteq	r6, r5, lsl #2
		ser_out(response_1_create, "\r\nData Saved");
     334:	05230505 	streq	r0, [r3, #-1285]!	; 0xfffffafb
     338:	1a051d08 	bne	147760 <__ccfg+0x1277b8>
		proceed receiving;
     33c:	05052006 	streq	r2, [r5, #-6]
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	06110513 			; <UNDEFINED> instruction: 0x06110513
     344:	22050501 	andcs	r0, r5, #4194304	; 0x400000
		proceed receiving;
     348:	052c0805 	streq	r0, [ip, #-2053]!	; 0xfffff7fb
     34c:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     350:	6f031405 	svcvs	0x00031405
     354:	1103062e 	tstne	r3, lr, lsr #12
     358:	032f064a 			; <UNDEFINED> instruction: 0x032f064a
     35c:	11052075 	tstne	r5, r5, ror r0
		proceed receiving;
     360:	08050106 	stmdaeq	r5, {r1, r2, r8}
     364:	06200520 	strteq	r0, [r0], -r0, lsr #10
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     368:	13050520 	movwne	r0, #21792	; 0x5520
     36c:	01061105 	tsteq	r6, r5, lsl #2
     370:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
		proceed receiving;
     374:	02210605 	eoreq	r0, r1, #5242880	; 0x500000
     378:	0101000a 	tsteq	r1, sl
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     37c:	05002f05 	streq	r2, [r0, #-3845]	; 0xfffff0fb
     380:	00000002 	andeq	r0, r0, r2
     384:	01230300 			; <UNDEFINED> instruction: 0x01230300
		proceed receiving;
     388:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     38c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     390:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     394:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     398:	01010002 	tsteq	r1, r2
		proceed receiving;
     39c:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
     3a0:	00000002 	andeq	r0, r0, r2
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a4:	01280300 			; <UNDEFINED> instruction: 0x01280300
		proceed receiving;
     3a8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     3ac:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
}
     3b0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     3b8:	01010002 	tsteq	r1, r2
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
     3c0:	00000002 	andeq	r0, r0, r2
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
     3c8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     3d0:	052f0605 	streq	r0, [pc, #-1541]!	; fffffdd3 <_estack+0xdfffadd3>
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     3d8:	01010002 	tsteq	r1, r2
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
     3e0:	00016c02 	andeq	r6, r1, r2, lsl #24
     3e4:	01350300 	teqeq	r5, r0, lsl #6
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e8:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
     3ec:	10050107 	andne	r0, r5, r7, lsl #2
     3f0:	06130501 	ldreq	r0, [r3], -r1, lsl #10
		strncpy(response_message->record, rec, 20);
     3f4:	06030513 			; <UNDEFINED> instruction: 0x06030513
     3f8:	06130558 			; <UNDEFINED> instruction: 0x06130558
     3fc:	06160501 	ldreq	r0, [r6], -r1, lsl #10
					call sender(response_message_4, done_case);
     400:	0110052d 	tsteq	r0, sp, lsr #10
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     404:	01060205 	tsteq	r6, r5, lsl #4
     408:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
     40c:	01010001 	tsteq	r1, r1
     410:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	00018002 	andeq	r8, r1, r2
     418:	01100300 	tsteq	r0, r0, lsl #6
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     420:	05110621 	ldreq	r0, [r1, #-1569]	; 0xfffff9df
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     424:	0505210e 	streq	r2, [r5, #-270]	; 0xfffffef2
     428:	0f052f06 	svceq	0x00052f06
     42c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     430:	11052106 	tstne	r5, r6, lsl #2
     434:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     438:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
     440:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    return node->data_base.item_array[index];
     444:	3d153305 	ldccc	3, cr3, [r5, #-20]	; 0xffffffec
     448:	13060105 	movwne	r0, #24837	; 0x6105
     44c:	01000502 	tsteq	r0, r2, lsl #10
     450:	00230501 	eoreq	r0, r3, r1, lsl #10
     454:	01a40205 			; <UNDEFINED> instruction: 0x01a40205
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	3c030000 	stccc	0, cr0, [r3], {-0}
    return node->data_base.item_array[index];
     45c:	13050501 	movwne	r0, #21761	; 0x5501
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	11062305 	tstne	r6, r5, lsl #6
     464:	05211705 	streq	r1, [r1, #-1797]!	; 0xfffff8fb
     468:	01052e1e 	tsteq	r5, lr, lsl lr
		strncpy(response_message->record, rec, 20);
     46c:	0002024b 	andeq	r0, r2, fp, asr #4
     470:	48050101 	stmdami	r5, {r0, r8}
     474:	00020500 	andeq	r0, r2, r0, lsl #10
     478:	03000000 	movweq	r0, #0
     47c:	050100c1 	streq	r0, [r1, #-193]	; 0xffffff3f
     480:	05151505 	ldreq	r1, [r5, #-1285]	; 0xfffffafb
     484:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     488:	2e170301 	cdpcs	3, 1, cr0, cr7, cr1, {0}
     48c:	01000402 	tsteq	r0, r2, lsl #8
     490:	00320501 	eorseq	r0, r2, r1, lsl #10
     494:	01b60205 			; <UNDEFINED> instruction: 0x01b60205
     498:	e1030000 	mrs	r0, (UNDEF: 3)
     49c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     4a0:	15090514 	strne	r0, [r9, #-1300]	; 0xfffffaec
     4a4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     4a8:	1d050119 	stfnes	f0, [r5, #-100]	; 0xffffff9c
     4ac:	0d051306 	stceq	3, cr1, [r5, #-24]	; 0xffffffe8
     4b0:	1d055806 	stcne	8, cr5, [r5, #-24]	; 0xffffffe8
     4b4:	21050106 	tstcs	r5, r6, lsl #2
     4b8:	19052d06 	stmdbne	r5, {r1, r2, r8, sl, fp, sp}
     4bc:	06090501 	streq	r0, [r9], -r1, lsl #10
     4c0:	060a0501 	streq	r0, [sl], -r1, lsl #10
     4c4:	13090530 	movwne	r0, #38192	; 0x9530
     4c8:	17060105 	strne	r0, [r6, -r5, lsl #2]
     4cc:	01000202 	tsteq	r0, r2, lsl #4
     4d0:	00340501 	eorseq	r0, r4, r1, lsl #10
     4d4:	01cc0205 	biceq	r0, ip, r5, lsl #4
     4d8:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
     4dc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     4e0:	06180515 			; <UNDEFINED> instruction: 0x06180515
     4e4:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	24060905 	strcs	r0, [r6], #-2309	; 0xfffff6fb
     4ec:	01063905 	tsteq	r6, r5, lsl #18
     4f0:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	09051e39 	stmdbeq	r5, {r0, r3, r4, r5, r9, sl, fp, ip}
     4f8:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
     4fc:	09050106 	stmdbeq	r5, {r1, r2, r8}
     500:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
				if(!response_flag){
     504:	06050106 	streq	r0, [r5], -r6, lsl #2
     508:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
					response_flag=1;
     50c:	13060515 	movwne	r0, #25877	; 0x6515
					trigger(&response_flag);
     510:	15060105 	strne	r0, [r6, #-261]	; 0xfffffefb
				switch(response_message_5->status){
     514:	01000202 	tsteq	r0, r2, lsl #4
     518:	001e0501 	andseq	r0, lr, r1, lsl #10
     51c:	01e80205 	mvneq	r0, r5, lsl #4
     520:	ef030000 	svc	0x00030000
     524:	20050101 	andcs	r0, r5, r1, lsl #2
						if (response_checker[0] == response_message_5->request_number){
     528:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
     52c:	20510501 	subscs	r0, r1, r1, lsl #10
     530:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
							switch(response_checker[1]){
     534:	5a052051 	bpl	148680 <__ccfg+0x1286d8>
     538:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
     53c:	131413e5 	tstne	r4, #-1811939325	; 0x94000003
     540:	05160305 	ldreq	r0, [r6, #-773]	; 0xfffffcfb
						proceed response_2;
     544:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
						break;
     548:	03055813 	movweq	r5, #22547	; 0x5813
									proceed response_1_delete;
     54c:	36053006 	strcc	r3, [r5], -r6
									proceed response_1_retrieve;
     550:	0b050106 	bleq	140970 <__ccfg+0x1209c8>
						proceed response_2;
     554:	20360520 	eorscs	r0, r6, r0, lsr #10
						proceed response_3;
     558:	05221805 	streq	r1, [r2, #-2053]!	; 0xfffff7fb
						proceed response_4;
     55c:	18051e36 	stmdane	r5, {r1, r2, r4, r5, r9, sl, fp, ip}
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	3a0b0522 	bcc	2c19f0 <__ccfg+0x2a1a48>
				break;
     564:	21060305 	tstcs	r6, r5, lsl #6
}
     568:	06180513 			; <UNDEFINED> instruction: 0x06180513
     56c:	06030501 	streq	r0, [r3], -r1, lsl #10
     570:	06280530 			; <UNDEFINED> instruction: 0x06280530
     574:	20030501 	andcs	r0, r3, r1, lsl #10
     578:	2c054b06 			; <UNDEFINED> instruction: 0x2c054b06
bool delete_all(struct Node *node){
     57c:	03050106 	movweq	r0, #20742	; 0x5106
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	054b0620 	strbeq	r0, [fp, #-1568]	; 0xfffff9e0
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	4b062003 	blmi	18859c <__ccfg+0x1685f4>
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	01062a05 	tsteq	r6, r5, lsl #20
            node->data_base.item_array[i].timestamp = 0;
     590:	06200305 	strteq	r0, [r0], -r5, lsl #6
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	0405144c 	streq	r1, [r5], #-1100	; 0xfffffbb4
    node->data_base.item_count = 0;
     598:	14030501 	strne	r0, [r3], #-1281	; 0xfffffaff
}
     59c:	0e031c05 	cdpeq	12, 0, cr1, cr3, cr5, {0}
        return true;
     5a0:	140505c8 	strne	r0, [r5], #-1480	; 0xfffffa38
fsm root {
     5a4:	06720514 			; <UNDEFINED> instruction: 0x06720514
     5a8:	06050501 	streq	r0, [r5], -r1, lsl #10
     5ac:	4b4b4b23 	blmi	12d3240 <__ccfg+0x12b3298>
     5b0:	22054d4b 	andcs	r4, r5, #4800	; 0x12c0
     5b4:	08050106 	stmdaeq	r5, {r1, r2, r8}
     5b8:	06060520 	streq	r0, [r6], -r0, lsr #10
     5bc:	061e053d 			; <UNDEFINED> instruction: 0x061e053d
     5c0:	06060501 	streq	r0, [r6], -r1, lsl #10
     5c4:	061e052f 	ldreq	r0, [lr], -pc, lsr #10
     5c8:	06060501 	streq	r0, [r6], -r1, lsl #10
     5cc:	0644052f 	strbeq	r0, [r4], -pc, lsr #10
     5d0:	20290501 	eorcs	r0, r9, r1, lsl #10
     5d4:	21060605 	tstcs	r6, r5, lsl #12
     5d8:	01062d05 	tsteq	r6, r5, lsl #26
     5dc:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
     5e0:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
     5e4:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
     5e8:	06052026 	streq	r2, [r5], -r6, lsr #32
     5ec:	0b052306 	bleq	14920c <__ccfg+0x129264>
     5f0:	060f0501 	streq	r0, [pc], -r1, lsl #10
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f4:	660e0501 	strvs	r0, [lr], -r1, lsl #10
     5f8:	20065905 	andcs	r5, r6, r5, lsl #18
     5fc:	0d031d05 	stceq	13, cr1, [r3, #-20]	; 0xffffffec
		init_node(node_db);
     600:	1405052e 	strne	r0, [r5], #-1326	; 0xfffffad2
		phys_cc1350(0, MAX_PKT_LEN);
     604:	01066d05 	tsteq	r6, r5, lsl #26
     608:	23060505 	movwcs	r0, #25861	; 0x6505
		tcv_plug (0, &plug_null);
     60c:	4b4b4b4b 	blmi	12d3340 <__ccfg+0x12b3398>
     610:	0625054c 	strteq	r0, [r5], -ip, asr #10
		sfd = tcv_open (WNONE, 0, 0);
     614:	66640501 	strbtvs	r0, [r4], -r1, lsl #10
     618:	05207505 	streq	r7, [r0, #-1285]!	; 0xfffffafb
     61c:	053c3c25 	ldreq	r3, [ip, #-3109]!	; 0xfffff3db
     620:	05400605 	strbeq	r0, [r0, #-1541]	; 0xfffff9fb
     624:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
			diag("Cannot open tcv interface");
     628:	053d0606 	ldreq	r0, [sp, #-1542]!	; 0xfffff9fa
     62c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
			halt();
     630:	9a030603 	bls	c1e44 <__ccfg+0xa1e9c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     634:	404b3c01 	submi	r3, fp, r1, lsl #24
     638:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
		runfsm receiver(node_db);
     63c:	01065605 	tsteq	r6, r5, lsl #12
     640:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	03052056 	movweq	r2, #20566	; 0x5056
     648:	40670620 	rsbmi	r0, r7, r0, lsr #12
     64c:	01065605 	tsteq	r6, r5, lsl #12
     650:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     654:	03052056 	movweq	r2, #20566	; 0x5056
     658:	3e4b0620 	cdpcc	6, 4, cr0, cr11, cr0, {1}
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	01065705 	tsteq	r6, r5, lsl #14
     660:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     664:	03052057 	movweq	r2, #20567	; 0x5057
		switch(CHOICE) {
     668:	3e4b0620 	cdpcc	6, 4, cr0, cr11, cr0, {1}
     66c:	01065605 	tsteq	r6, r5, lsl #12
     670:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     674:	03052056 	movweq	r2, #20566	; 0x5056
     678:	404b0620 	submi	r0, fp, r0, lsr #12
     67c:	3e01053f 	mcrcc	5, 0, r0, cr1, cr15, {1}
     680:	ce031805 	cdpgt	8, 0, cr1, cr3, cr5, {0}
     684:	05052e7e 	streq	r2, [r5, #-3710]	; 0xfffff182
     688:	66051313 			; <UNDEFINED> instruction: 0x66051313
     68c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     690:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
     694:	4b4b1513 	blmi	12c5ae8 <__ccfg+0x12a5b40>
				proceed menu;
     698:	5b4b4b4b 	blpl	12d33cc <__ccfg+0x12b3424>
     69c:	01063605 	tsteq	r6, r5, lsl #12
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     6a4:	07053c3b 	smladxeq	r5, fp, ip, r3
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	3c250306 	stccc	3, cr0, [r5], #-24	; 0xffffffe8
     6ac:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
     6b0:	7e9b0302 	cdpvc	3, 9, cr0, cr11, cr2, {0}
		DEBUG_PRINT("setting node group ID");
     6b4:	13131401 	tstne	r3, #16777216	; 0x1000000
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    node->gid = gid; 
     6bc:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
		proceed menu;
     6c0:	03051302 	movweq	r1, #21250	; 0x5302
     6c4:	02055913 	andeq	r5, r5, #311296	; 0x4c000
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	03070514 	movweq	r0, #29972	; 0x7514
     6cc:	050101f3 	streq	r0, [r1, #-499]	; 0xfffffe0d
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	0b051306 	bleq	1452f0 <__ccfg+0x125348>
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	060f0501 	streq	r0, [pc], -r1, lsl #10
     6d8:	06180501 	ldreq	r0, [r8], -r1, lsl #10
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	052e4f03 	streq	r4, [lr, #-3843]!	; 0xfffff0fd
     6e0:	05131305 	ldreq	r1, [r3, #-773]	; 0xfffffcfb
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	05010666 	streq	r0, [r1, #-1638]	; 0xfffff99a
     6e8:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
     6ec:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
			strncpy(reason, "Out of Range", 50);
     6f0:	06054a34 			; <UNDEFINED> instruction: 0x06054a34
     6f4:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
			proceed invalid_node_id;
     6f8:	06490515 			; <UNDEFINED> instruction: 0x06490515
     6fc:	20080501 	andcs	r0, r8, r1, lsl #10
				strncpy(reason, "ID is already in use", 50);
     700:	31060605 	tstcc	r6, r5, lsl #12
		for(int i = 0; i < node_db->index; i++){
     704:	01060a05 	tsteq	r6, r5, lsl #20
     708:	03061a05 	movweq	r1, #27141	; 0x6a05
     70c:	05054a0e 	streq	r4, [r5, #-2574]	; 0xfffff5f2
		proceed menu;
     710:	15131313 	ldrne	r1, [r3, #-787]	; 0xfffffced
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	01060805 	tsteq	r6, r5, lsl #16
     718:	05663405 	strbeq	r3, [r6, #-1029]!	; 0xfffffbfb
     71c:	05680606 	strbeq	r0, [r8, #-1542]!	; 0xfffff9fa
     720:	4d051505 	cfstr32mi	mvfx1, [r5, #-20]	; 0xffffffec
		proceed get_new_node_id;
     724:	08050106 	stmdaeq	r5, {r1, r2, r8}
     728:	0606052e 	streq	r0, [r6], -lr, lsr #10
		if (!clear_node_neighbour_array(node_db)){
     72c:	0305053d 	movweq	r0, #21821	; 0x553d
     730:	05017dee 	streq	r7, [r1, #-3566]	; 0xfffff212
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
     738:	02920319 	addseq	r0, r2, #1677721600	; 0x64000000
     73c:	03260590 			; <UNDEFINED> instruction: 0x03260590
			proceed error;
     740:	052e7dee 	streq	r7, [lr, #-3566]!	; 0xfffff212
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     744:	02920319 	addseq	r0, r2, #1677721600	; 0x64000000
     748:	0606052e 	streq	r0, [r6], -lr, lsr #10
		request_packet->gid = node_db->gid;
     74c:	17070567 	strne	r0, [r7, -r7, ror #10]
     750:	03020513 	movweq	r0, #9491	; 0x2513
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	14017e80 	strne	r7, [r1], #-3712	; 0xfffff180
		request_packet->request_number = generate_request_num();
     758:	13131313 	tstne	r3, #1275068416	; 0x4c000000
     75c:	03051313 	movweq	r1, #21267	; 0x5313
		call sender(request_packet, wait_discovery);
     760:	13020514 	movwne	r0, #9492	; 0x2514
     764:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
		request_packet->receiver_id=0;
     768:	01fc0313 	mvnseq	r0, r3, lsl r3
		call sender(request_packet, wait_discovery);
     76c:	05013f02 	streq	r3, [r1, #-3842]	; 0xfffff0fe
     770:	43051305 	movwmi	r1, #21253	; 0x5305
     774:	18050106 	stmdane	r5, {r1, r2, r8}
			release;
     778:	20430520 	subcs	r0, r3, r0, lsr #10
				proceed get_new_node_id;
     77c:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
				proceed clear_neighbour_array;
     780:	05051d18 	streq	r1, [r5, #-3352]	; 0xfffff2e8
				proceed create_proto_start;
     784:	08052306 	stmdaeq	r5, {r1, r2, r8, r9, sp}
				proceed start_delete_proto;
     788:	31050106 	tstcc	r5, r6, lsl #2
				proceed retrieve_proto;
     78c:	0606054a 	streq	r0, [r6], -sl, asr #10
				proceed display_db;
     790:	1405055a 	strne	r0, [r5], #-1370	; 0xfffffaa6
				proceed del_local;
     794:	01060805 	tsteq	r6, r5, lsl #16
			if(node_db->id == node_db->nnodes[i]){
     798:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     79c:	052f0606 	streq	r0, [pc, #-1542]!	; 19e <init_node+0x1e>
     7a0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
				strncpy(reason, "ID is already in use", 50);
     7a4:	052f0606 	streq	r0, [pc, #-1542]!	; 1a6 <generate_request_num+0x2>
     7a8:	1e053105 	adfnes	f3, f5, f5
				proceed invalid_node_id;
     7ac:	07050106 	streq	r0, [r5, -r6, lsl #2]
     7b0:	1b05a306 	blne	1693d0 <__ccfg+0x149428>
		for(int i = 0; i < node_db->index; i++){
     7b4:	34050106 	strcc	r0, [r5], #-262	; 0xfffffefa
		if (discovery_wait_flag == 0){
     7b8:	200a0520 	andcs	r0, sl, r0, lsr #10
			discovery_wait_flag=1;
     7bc:	4b060805 	blmi	1827d8 <__ccfg+0x162830>
     7c0:	01061f05 	tsteq	r6, r5, lsl #30
			delay(3000, find_proto_start);
     7c4:	84060a05 	strhi	r0, [r6], #-2565	; 0xfffff5fb
     7c8:	03060705 	movweq	r0, #26373	; 0x6705
		if (discovery_wait_flag == 1){
     7cc:	2f06200e 	svccs	0x0006200e
			discovery_wait_flag=0;
     7d0:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
     7d4:	07053120 	streq	r3, [r5, -r0, lsr #2]
			delay(3000, display_neighbour_nodes);
     7d8:	05313136 	ldreq	r3, [r1, #-310]!	; 0xfffffeca
     7dc:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
     7e0:	1404053d 	strne	r0, [r4], #-1341	; 0xfffffac3
     7e4:	10060505 	andne	r0, r6, r5, lsl #10
     7e8:	03061305 	movweq	r1, #25349	; 0x6305
     7ec:	01052024 	tsteq	r5, r4, lsr #32
     7f0:	09022e06 	stmdbeq	r2, {r1, r2, r9, sl, fp, sp}
     7f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     7f8:	02050040 	andeq	r0, r5, #64	; 0x40
     7fc:	00000000 	andeq	r0, r0, r0
     800:	01018503 	tsteq	r1, r3, lsl #10
     804:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     808:	050f0640 	streq	r0, [pc, #-1600]	; 1d0 <delete_record+0x4>
     80c:	40052326 	andmi	r2, r5, r6, lsr #6
     810:	2326052b 			; <UNDEFINED> instruction: 0x2326052b
     814:	02920105 	addseq	r0, r2, #1073741825	; 0x40000001
     818:	01010002 	tsteq	r1, r2
     81c:	05002205 	streq	r2, [r0, #-517]	; 0xfffffdfb
     820:	00057c02 	andeq	r7, r5, r2, lsl #24
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	018d0300 	orreq	r0, sp, r0, lsl #6
     828:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	0f062205 	svceq	0x00062205
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	05231805 	streq	r1, [r3, #-2053]!	; 0xfffff7fb
			if (node_db->nnodes[i] == 0) break;
     834:	11052e08 	tstne	r5, r8, lsl #28
     838:	2f390523 	svccs	0x00390523
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	20060d05 	andcs	r0, r6, r5, lsl #26
     840:	11063a05 	tstne	r6, r5, lsl #20
     844:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
     848:	0d052139 	stfeqs	f2, [r5, #-228]	; 0xffffff1c
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
		ser_out(display_neighbour_nodes, "\r\n");
     850:	39050106 	stmdbcc	r5, {r1, r2, r8}
     854:	18052c06 	stmdane	r5, {r1, r2, sl, fp, sp}
		proceed menu;
     858:	06090501 	streq	r0, [r9], -r1, lsl #10
     85c:	06060501 	streq	r0, [r6], -r1, lsl #10
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	13050524 	movwne	r0, #21796	; 0x5524
     864:	01062005 	tsteq	r6, r5
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	30060505 	andcc	r0, r6, r5, lsl #10
     86c:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
     870:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	0f052301 	svceq	0x00052301
     878:	02207303 	eoreq	r7, r0, #201326592	; 0xc000000
			strncpy(reason, "Error: improper ID", 50);
     87c:	01010002 	tsteq	r1, r2
     880:	0001af05 	andeq	sl, r1, r5, lsl #30
			proceed error;
     884:	00000205 	andeq	r0, r0, r5, lsl #4
     888:	a0030000 	andge	r0, r3, r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
     890:	13131413 	tstne	r3, #318767104	; 0x13000000
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	13131313 	tstne	r3, #1275068416	; 0x4c000000
     898:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	af051302 	svcge	0x00051302
     8a0:	74030601 	strvc	r0, [r3], #-1537	; 0xfffff9ff
     8a4:	05052001 	streq	r2, [r5, #-1]
		create_message->gid = node_db->gid;
     8a8:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
		create_message->tpe = 2;
     8ac:	4b210603 	blmi	8420c0 <__ccfg+0x822118>
		create_message->request_number = generate_request_num();
     8b0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     8b4:	02140601 	andseq	r0, r4, #1048576	; 0x100000
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	01010002 	tsteq	r1, r2
     8bc:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	0005a402 	andeq	sl, r5, r2, lsl #8
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	04840300 	streq	r0, [r4], #768	; 0x300
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	011c0501 	tsteq	ip, r1, lsl #10
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	01061a05 	tsteq	r6, r5, lsl #20
		response_checker[0] = create_message->request_number;
     8d0:	02060205 	andeq	r0, r6, #1342177280	; 0x50000000
     8d4:	13131828 	tstne	r3, #40, 16	; 0x280000
		call sender(create_message, wait);
     8d8:	1a030513 	bne	c1d2c <__ccfg+0xa1d84>
     8dc:	01062605 	tsteq	r6, r5, lsl #12
     8e0:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
     8e4:	30310603 	eorscc	r0, r1, r3, lsl #12
     8e8:	034a0e03 	movteq	r0, #44547	; 0xae03
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	09054a11 	stmdbeq	r5, {r0, r4, r9, fp, lr}
     8f0:	07050106 	streq	r0, [r5, -r6, lsl #2]
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	22060566 	andcs	r0, r6, #427819008	; 0x19800000
     8f8:	051e0705 	ldreq	r0, [lr, #-1797]	; 0xfffff8fb
     8fc:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     904:	3d210604 	stccc	6, cr0, [r1, #-16]!
			strncpy(reason, "Error: improper node ID", 50);
     908:	1a03052f 	bne	c1dcc <__ccfg+0xa1e24>
     90c:	9e054d4c 	cdpls	13, 0, cr4, cr5, cr12, {2}
     910:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
			proceed error;
     914:	a1062e03 	tstge	r6, r3, lsl #28
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	03050567 	movweq	r0, #21863	; 0x5567
     91c:	03660823 	cmneq	r6, #2293760	; 0x230000
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	03062e60 	movweq	r2, #28256	; 0x6e60
     924:	2f062020 	svccs	0x00062020
     928:	4e160305 	cdpmi	3, 1, cr0, cr6, cr5, {0}
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	053e5a13 	ldreq	r5, [lr, #-2579]!	; 0xfffff5ed
     930:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
			strncpy(reason, "Error: invalid index", 50);
     934:	7ba9030f 	blvc	fea41578 <_estack+0xdea3c578>
     938:	03080520 	movweq	r0, #34080	; 0x8520
			proceed error;
     93c:	052e04d7 	streq	r0, [lr, #-1239]!	; 0xfffffb29
     940:	a9030605 	stmdbge	r3, {r0, r2, r9, sl}
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     944:	0305207b 	movweq	r2, #20603	; 0x507b
		delete_record->tpe = DELETE_RECORD;
     948:	04dd0306 	ldrbeq	r0, [sp], #774	; 0x306
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	030f0501 	movweq	r0, #62721	; 0xf501
		delete_record->gid = node_db->gid;
     950:	05207ba3 	streq	r7, [r0, #-2979]!	; 0xfffff45d
		delete_record->tpe = DELETE_RECORD;
     954:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
		delete_record->request_number = generate_request_num();
     958:	04da0304 	ldrbeq	r0, [sl], #772	; 0x304
     95c:	14030501 	strne	r0, [r3], #-1281	; 0xfffffaff
		delete_record->sender_id = node_db->id;
     960:	05134d31 	ldreq	r4, [r3, #-3377]	; 0xfffff2cf
     964:	05150608 	ldreq	r0, [r5, #-1544]	; 0xfffff9f8
     968:	5b061d03 	blpl	187d7c <__ccfg+0x167dd4>
		call sender(&delete_record, wait);
     96c:	01060805 	tsteq	r6, r5, lsl #16
		delete_record->receiver_id = user_provided_receiver_id;
     970:	03060505 	movweq	r0, #25861	; 0x6505
		delete_record->record_index = user_provided_index;
     974:	053c7b94 	ldreq	r7, [ip, #-2964]!	; 0xfffff46c
		response_checker[0] = delete_record->request_number;
     978:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		response_checker[1] = delete_record->tpe;
     97c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     980:	04ee0304 	strbteq	r0, [lr], #772	; 0x304
		call sender(&delete_record, wait);
     984:	15030501 	strne	r0, [r3, #-1281]	; 0xfffffaff
     988:	01060e05 	tsteq	r6, r5, lsl #28
     98c:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
     990:	04052005 	streq	r2, [r5], #-5
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     994:	05593d06 	ldrbeq	r3, [r9, #-3334]	; 0xfffff2fa
     998:	ec03061a 	stc	6, cr0, [r3], {26}
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
     9a0:	20019a03 	andcs	r9, r1, r3, lsl #20
     9a4:	2c061205 	sfmcs	f1, 4, [r6], {5}
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	01061d05 	tsteq	r6, r5, lsl #26
     9ac:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	05330604 	ldreq	r0, [r3, #-1540]!	; 0xfffff9fc
     9b4:	05411403 	strbeq	r1, [r1, #-1027]	; 0xfffffbfd
			proceed error;
     9b8:	05010656 	streq	r0, [r1, #-1622]	; 0xfffff9aa
     9bc:	56052003 	strpl	r2, [r5], -r3
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c0:	20030520 	andcs	r0, r3, r0, lsr #10
     9c4:	0e035906 	vmlaeq.f16	s10, s6, s12	; <UNPREDICTABLE>
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
     9cc:	4a060501 	bmi	181dd8 <__ccfg+0x161e30>
     9d0:	21060405 	tstcs	r6, r5, lsl #8
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	03053d59 	movweq	r3, #23897	; 0x5d59
			strncpy(reason, "Error: invalid index", 50);
     9d8:	37051316 	smladcc	r5, r6, r3, r1
     9dc:	17050106 	strne	r0, [r5, -r6, lsl #2]
     9e0:	1f20053f 	svcne	0x0020053f
			proceed error;
     9e4:	051e3705 	ldreq	r3, [lr, #-1797]	; 0xfffff8fb
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     9ec:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
		retrieve_record->gid = node_db->gid;
     9f0:	051f2f17 	ldreq	r2, [pc, #-3863]	; fffffae1 <_estack+0xdfffaae1>
     9f4:	13210603 			; <UNDEFINED> instruction: 0x13210603
     9f8:	01062405 	tsteq	r6, r5, lsl #8
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
		retrieve_record->request_number = generate_request_num();
     a00:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     a04:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
		retrieve_record->sender_id = node_db->id;
     a08:	2605270c 	strcs	r2, [r5], -ip, lsl #14
		response_checker[0] = retrieve_record->request_number;
     a0c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	1d05270c 	stcne	7, cr2, [r5, #-48]	; 0xffffffd0
     a14:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
		retrieve_record->record_index = user_provided_index;
     a18:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     a1c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
		response_checker[0] = retrieve_record->request_number;
     a20:	05260603 	streq	r0, [r6, #-1539]!	; 0xfffff9fd
		call sender(&retrieve_record, wait);
     a24:	0c050108 	stfeqs	f0, [r5], {8}
     a28:	0b050106 	bleq	140e48 <__ccfg+0x120ea0>
     a2c:	06040558 			; <UNDEFINED> instruction: 0x06040558
     a30:	03050526 	movweq	r0, #21798	; 0x5526
     a34:	322e7f85 	eorcc	r7, lr, #532	; 0x214
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	32323332 	eorscc	r3, r2, #-939524096	; 0xc8000000
     a3c:	03040532 	movweq	r0, #17714	; 0x4532
		if(node_db->data_base.item_count != 0){
     a40:	25052e2e 	strcs	r2, [r5, #-3630]	; 0xfffff1d2
     a44:	06050106 	streq	r0, [r5], -r6, lsl #2
     a48:	06050520 	streq	r0, [r5], -r0, lsr #10
		ser_out(loop_through_data, "\r\n");
     a4c:	053d5959 	ldreq	r5, [sp, #-2393]!	; 0xfffff6a7
     a50:	27050e26 	strcs	r0, [r5, -r6, lsr #28]
		proceed menu;
     a54:	70050106 	andvc	r0, r5, r6, lsl #2
		delete_all(node_db);
     a58:	2e2f0306 	cdpcs	3, 2, cr0, cr15, cr6, {0}
     a5c:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
		proceed menu;
     a60:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
     a64:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		delay(3000, timeout);
     a68:	17052106 	strne	r2, [r5, -r6, lsl #2]
     a6c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		when(&response_flag, menu);
     a70:	1f170521 	svcne	0x00170521
     a74:	21060405 	tstcs	r6, r5, lsl #8
		release;
     a78:	055b0305 	ldrbeq	r0, [fp, #-773]	; 0xfffffcfb
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     a80:	052f0604 	streq	r0, [pc, #-1540]!	; 484 <receiver+0x29c>
     a84:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     a88:	17052104 	strne	r2, [r5, -r4, lsl #2]
     a8c:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     a90:	02030521 	andeq	r0, r3, #138412032	; 0x8400000
     a94:	054c1727 	strbeq	r1, [ip, #-1831]	; 0xfffff8d9
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	11050108 	tstne	r5, r8, lsl #2
     a9c:	060c0501 	streq	r0, [ip], -r1, lsl #10
     aa0:	210f0501 	tstcs	pc, r1, lsl #10
     aa4:	06210405 	strteq	r0, [r1], -r5, lsl #8
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa8:	060f051f 			; <UNDEFINED> instruction: 0x060f051f
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	20170501 	andscs	r0, r7, r1, lsl #10
     ab0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
		proceed menu;
     ab4:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
     ab8:	05560618 	ldrbeq	r0, [r6, #-1560]	; 0xfffff9e8
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	17052204 	strne	r2, [r5, -r4, lsl #4]
     ac0:	11052c06 	tstne	r5, r6, lsl #24
		proceed menu;
     ac4:	06030501 	streq	r0, [r3], -r1, lsl #10
     ac8:	4b320601 	blmi	c822d4 <__ccfg+0xc6232c>
}
     acc:	4d3c0d03 	ldcmi	13, cr0, [ip, #-12]!
     ad0:	06270568 	strteq	r0, [r7], -r8, ror #10
     ad4:	20060501 	andcs	r0, r6, r1, lsl #10
     ad8:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
     adc:	03053d59 	movweq	r3, #23897	; 0x5d59
     ae0:	135d4d15 	cmpne	sp, #1344	; 0x540
     ae4:	01063705 	tsteq	r6, r5, lsl #14
     ae8:	053d2005 	ldreq	r2, [sp, #-5]!
     aec:	03051f37 	movweq	r1, #24375	; 0x5f37
     af0:	20052106 	andcs	r2, r5, r6, lsl #2
     af4:	17050106 	strne	r0, [r5, -r6, lsl #2]
     af8:	0603052e 	streq	r0, [r3], -lr, lsr #10
     afc:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     b00:	06030501 	streq	r0, [r3], -r1, lsl #10
     b04:	0624052f 	strteq	r0, [r4], -pc, lsr #10
     b08:	2e220501 	cfsh64cs	mvdx0, mvdx2, #1
     b0c:	21060305 	tstcs	r6, r5, lsl #6
     b10:	01062605 	tsteq	r6, r5, lsl #12
     b14:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
     b18:	03051e26 	movweq	r1, #24102	; 0x5e26
     b1c:	1e1d0522 	cfmul64ne	mvdx0, mvdx13, mvdx2
     b20:	21060305 	tstcs	r6, r5, lsl #6
     b24:	01061f05 	tsteq	r6, r5, lsl #30
     b28:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
static void devinit_uart (int devnum) {
     b2c:	03052d1f 	movweq	r2, #23839	; 0x5d1f
	adddevfunc (ioreq_uart_a, devnum);
     b30:	05312f06 	ldreq	r2, [r1, #-3846]!	; 0xfffff0fa
     b34:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
void udelay (volatile word n) {
     b38:	0c052017 	stceq	0, cr2, [r5], {23}
     b3c:	1d270523 	cfstr32ne	mvfx0, [r7, #-140]!	; 0xffffff74
	while (n) {
     b40:	21060305 	tstcs	r6, r5, lsl #6
     b44:	01062705 	tsteq	r6, r5, lsl #14
}
     b48:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
	while (n--);
     b4c:	03051e27 	movweq	r1, #24103	; 0x5e27
     b50:	08052206 	stmdaeq	r5, {r1, r2, r9, sp}
     b54:	060c0501 	streq	r0, [ip], -r1, lsl #10
		n--;
     b58:	580b0501 	stmdapl	fp, {r0, r8, sl}
     b5c:	3c066605 	stccc	6, cr6, [r6], {5}
     b60:	0c030305 	stceq	3, cr0, [r3], {5}
void mdelay (volatile word n) {
     b64:	05684d01 	strbeq	r4, [r8, #-3329]!	; 0xfffff2ff
     b68:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
	while (n) {
     b6c:	04052006 	streq	r2, [r5], #-6
     b70:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
}
     b74:	4d150305 	ldcmi	3, cr0, [r5, #-20]	; 0xffffffec
		udelay (999);
     b78:	06060568 	streq	r0, [r6], -r8, ror #10
     b7c:	06040501 	streq	r0, [r4], -r1, lsl #10
		n--;
     b80:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     b84:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
     b88:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
     b8c:	1f053e16 	svcne	0x00053e16
void __pi_ondomain (lword d) {
     b90:	1f11051f 	svcne	0x0011051f
     b94:	21060305 	tstcs	r6, r5, lsl #6
		if (__pi_systat.effpdm > 1)
     b98:	01061f05 	tsteq	r6, r5, lsl #30
     b9c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
			__pi_systat.effpdm = 1;
     ba0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	PRCMPowerDomainOn (d);
     ba4:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     ba8:	052f0603 	streq	r0, [pc, #-1539]!	; 5ad <root+0x9>
     bac:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb0:	21052023 	tstcs	r5, r3, lsr #32
     bb4:	0603052e 	streq	r0, [r3], -lr, lsr #10
     bb8:	06250521 	strteq	r0, [r5], -r1, lsr #10
	__pi_systat.ondmns |= d;
     bbc:	20100501 	andscs	r0, r0, r1, lsl #10
     bc0:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
}
     bc4:	1c052626 	stcne	6, cr2, [r5], {38}	; 0x26
     bc8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
void __pi_offdomain (lword d) {
     bcc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     bd0:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
	PRCMPowerDomainOff (d);
     bd4:	1e05280c 	cdpne	8, 0, cr2, cr5, cr12, {0}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
     bdc:	052f0603 	streq	r0, [pc, #-1539]!	; 5e1 <root+0x3d>
     be0:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	05400603 	strbeq	r0, [r0, #-1539]	; 0xfffff9fd
     be8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	03052026 	movweq	r2, #20518	; 0x5026
     bf0:	26052106 	strcs	r2, [r5], -r6, lsl #2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf4:	0c050106 	stfeqs	f0, [r5], {6}
     bf8:	1e260522 	cfsh64ne	mvdx0, mvdx6, #18
	__pi_systat.ondmns &= ~d;
     bfc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     c00:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
}
     c04:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     c08:	0305580b 	movweq	r5, #22539	; 0x580b
void __pi_syserror (word ec, const char *m) {
     c0c:	3c0c0306 	stccc	3, cr0, [ip], {6}
	diag ("SYSERR: %x, %s", ec, m);
     c10:	2505684d 	strcs	r6, [r5, #-2125]	; 0xfffff7b3
     c14:	06050106 	streq	r0, [r5], -r6, lsl #2
     c18:	06040520 	streq	r0, [r4], -r0, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c1c:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     c20:	684d1503 	stmdavs	sp, {r0, r1, r8, sl, ip}^
     c24:	01060605 	tsteq	r6, r5, lsl #12
		all_leds_blink;
     c28:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
     c2c:	03053d59 	movweq	r3, #23897	; 0x5d59
     c30:	39051316 	stmdbcc	r5, {r1, r2, r4, r8, r9, ip}
     c34:	18050106 	stmdane	r5, {r1, r2, r8}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	1f21053e 	svcne	0x0021053e
     c3c:	051f1305 	ldreq	r1, [pc, #-773]	; 93f <root+0x39b>
     c40:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     c44:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
     c48:	03052e18 	movweq	r2, #24088	; 0x5e18
     c4c:	18052106 	stmdane	r5, {r1, r2, r8, sp}
	while (1) {
     c50:	03050106 	movweq	r0, #20742	; 0x5106
     c54:	12052f06 	andne	r2, r5, #6, 30
     c58:	25050106 	strcs	r0, [r5, #-262]	; 0xfffffefa
     c5c:	2e230520 	cfsh64cs	mvdx0, mvdx3, #16
void tci_run_delay_timer () {
     c60:	21060305 	tstcs	r6, r5, lsl #6
	setdel = __pi_mintk - __pi_old;
     c64:	01062705 	tsteq	r6, r5, lsl #14
     c68:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
     c6c:	28052027 	stmdacs	r5, {r0, r1, r2, r5, sp}
     c70:	031e0526 	tsteq	lr, #159383552	; 0x9800000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c74:	0305207a 	movweq	r2, #20602	; 0x507a
     c78:	20052106 	andcs	r2, r5, r6, lsl #2
     c7c:	0c050106 	stfeqs	f0, [r5], {6}
     c80:	03200528 			; <UNDEFINED> instruction: 0x03200528
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	03052078 	movweq	r2, #20600	; 0x5078
	sti_tim;
     c88:	21052f06 	tstcs	r5, r6, lsl #30
}
     c8c:	03050106 	movweq	r0, #20742	; 0x5106
     c90:	17054006 	strne	r4, [r5, -r6]
     c94:	28050106 	stmdacs	r5, {r1, r2, r8}
     c98:	06030520 	streq	r0, [r3], -r0, lsr #10
     c9c:	06280521 	strteq	r0, [r8], -r1, lsr #10
	cli_aux;
     ca0:	220c0501 	andcs	r0, ip, #4194304	; 0x400000
     ca4:	051e2805 	ldreq	r2, [lr, #-2053]	; 0xfffff7fb
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     cac:	0c050108 	stfeqs	f0, [r5], {8}
     cb0:	0b050106 	bleq	1410d0 <__ccfg+0x121128>
     cb4:	06030558 			; <UNDEFINED> instruction: 0x06030558
	sti_aux;
     cb8:	18054d3f 	stmdane	r5, {r0, r1, r2, r3, r4, r5, r8, sl, fp, lr}
}
     cbc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     cc0:	0603052e 	streq	r0, [r3], -lr, lsr #10
     cc4:	4b3f4b41 	blmi	fd39d0 <__ccfg+0xfb3a28>
void AONRTCIntHandler () {
     cc8:	054b593f 	strbeq	r5, [fp, #-2367]	; 0xfffff6c1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     ccc:	20730305 	rsbscs	r0, r3, r5, lsl #6
     cd0:	0601b505 	streq	fp, [r1], -r5, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	2e05053c 	mcrcs	5, 0, r0, cr5, cr12, {1}
		if (__pi_utims [0] == 0)
     cd8:	8f063705 	svchi	0x00063705
     cdc:	01063805 	tsteq	r6, r5, lsl #16
		if (*(__pi_utims [0])) {
     ce0:	20061305 	andcs	r1, r6, r5, lsl #6
     ce4:	01061f05 	tsteq	r6, r5, lsl #30
			(*(__pi_utims [0]))--;
     ce8:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
		if (__pi_utims [1] == 0)
     cec:	0c052e04 	stceq	14, cr2, [r5], {4}
		if (*(__pi_utims [1])) {
     cf0:	2105053c 	tstcs	r5, ip, lsr r5
			aux_timer_inactive = 0;
     cf4:	03060305 	movweq	r0, #25349	; 0x6305
			(*(__pi_utims [1]))--;
     cf8:	404b3c10 	submi	r3, fp, r0, lsl ip
		if (__pi_utims [2] == 0)
     cfc:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
		if (*(__pi_utims [2])) {
     d00:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
			(*(__pi_utims [2]))--;
     d04:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
		if (__pi_utims [3] != 0) {
     d08:	0101002d 	tsteq	r1, sp, lsr #32
			if (*(__pi_utims [3])) {
     d0c:	00001562 	andeq	r1, r0, r2, ror #10
				aux_timer_inactive = 0;
     d10:	02a10003 	adceq	r0, r1, #3
				(*(__pi_utims [3]))--;
     d14:	01020000 	mrseq	r0, (UNDEF: 2)
	if (__pi_systat.ledsts) {
     d18:	000d0efb 	strdeq	r0, [sp], -fp
     d1c:	01010101 	tsteq	r1, r1, lsl #2
		if (__pi_systat.ledblc++ == 0) {
     d20:	01000000 	mrseq	r0, (UNDEF: 0)
     d24:	2f010000 	svccs	0x00010000
			if (__pi_systat.ledblk) {
     d28:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     d2c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     d30:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     d38:	706f746b 	rsbvc	r7, pc, fp, ror #8
				if (__pi_systat.ledsts & 0x2)
     d3c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     d40:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     d44:	4349502f 	movtmi	r5, #36911	; 0x902f
				if (__pi_systat.ledsts & 0x4)
     d48:	502f534f 	eorpl	r5, pc, pc, asr #6
				__pi_systat.ledblk = 0;
     d4c:	534f6369 	movtpl	r6, #62313	; 0xf369
     d50:	3143432f 	cmpcc	r3, pc, lsr #6
			if (__pi_systat.fstblk)
     d54:	00585833 	subseq	r5, r8, r3, lsr r8
     d58:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ca4 <tci_run_auxiliary_timer+0x4>
				__pi_systat.ledblc = 200;
     d5c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
		cli_tim;
     d64:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		__pi_new += setdel;
     d68:	6f746b73 	svcvs	0x00746b73
     d6c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		setdel = 0;
     d70:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		RISE_N_SHINE;
     d74:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		__pi_new += setdel;
     d78:	2f534f43 	svccs	0x00534f43
		RISE_N_SHINE;
     d7c:	4f636950 	svcmi	0x00636950
     d80:	43432f53 	movtmi	r2, #16211	; 0x3f53
		aux_timer_inactive = 1;
     d84:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     d88:	3143432f 	cmpcc	r3, pc, lsr #6
				if (__pi_systat.ledsts & 0x1)
     d8c:	57585833 	smmlarpl	r8, r3, r8, r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	2f455241 	svccs	0x00455241
     d94:	76697264 	strbtvc	r7, [r9], -r4, ror #4
				if (__pi_systat.ledsts & 0x2)
     d98:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     d9c:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     da0:	2f656d6f 	svccs	0x00656d6f
				if (__pi_systat.ledsts & 0x8)
     da4:	70657473 	rsbvc	r7, r5, r3, ror r4
				__pi_systat.ledblk = 1;
     da8:	2f6e6568 	svccs	0x006e6568
     dac:	6b736544 	blvs	1cda2c4 <__ccfg+0x1cba31c>
		if (aux_timer_inactive) {
     db0:	2f706f74 	svccs	0x00706f74
			cli_aux;
     db4:	4f534c4f 	svcmi	0x00534c4f
     db8:	2f54454e 	svccs	0x0054454e
     dbc:	4f434950 	svcmi	0x00434950
     dc0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     dc4:	2f534f63 	svccs	0x00534f63
     dc8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     dcc:	4f492f73 	svcmi	0x00492f73
     dd0:	6f682f00 	svcvs	0x00682f00
     dd4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
     dd8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
word tci_update_delay_ticks (Boolean force) {
     ddc:	442f6e65 	strtmi	r6, [pc], #-3685	; de4 <tci_update_delay_ticks+0x8>
	cli_tim;
     de0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     de4:	4f2f706f 	svcmi	0x002f706f
	if (setdel) {
     de8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	502f5445 	eorpl	r5, pc, r5, asr #8
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	534f4349 	movtpl	r4, #62281	; 0xf349
     df4:	6369502f 	cmnvs	r9, #47	; 0x2f
     df8:	502f534f 	eorpl	r5, pc, pc, asr #6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfc:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
	return NO;
     e04:	73726f73 	cmnvc	r2, #460	; 0x1cc
			setdel = 0;
     e08:	6f682f00 	svcvs	0x00682f00
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
     e10:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
}
     e14:	442f6e65 	strtmi	r6, [pc], #-3685	; e1c <tci_update_delay_ticks+0x40>
		sti_tim;
     e18:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		return YES;
     e1c:	4f2f706f 	svcmi	0x002f706f
     e20:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     e24:	502f5445 	eorpl	r5, pc, r5, asr #8
     e28:	534f4349 	movtpl	r4, #62281	; 0xf349
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	6369502f 	cmnvs	r9, #47	; 0x2f
	UARTDisable (UART0_BASE);
     e30:	6b2f534f 	blvs	bd5b74 <__ccfg+0xbb5bcc>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	UARTDisable (UART0_BASE);
     e38:	752f006c 	strvc	r0, [pc, #-108]!	; dd4 <AONRTCIntHandler+0x10c>
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; c78 <tci_run_delay_timer+0x18>
     e40:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     e44:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     e48:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     e50:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     e54:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     e5c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     e60:	2f006564 	svccs	0x00006564
	urates [0] = rate;
     e64:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
     e68:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     e6c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     e70:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     e74:	706f746b 	rsbvc	r7, pc, fp, ror #8
     e78:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     e7c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	4349502f 	movtmi	r5, #36911	; 0x902f
     e84:	502f534f 	eorpl	r5, pc, pc, asr #6
     e88:	534f6369 	movtpl	r6, #62313	; 0xf369
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	616d0000 	cmnvs	sp, r0
     e90:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	00000100 	andeq	r0, r0, r0, lsl #2
     e98:	5f737973 	svcpl	0x00737973
	__pi_uart_setrate (urates [0], __pi_uart);
     e9c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
     ea0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ea4:	6d630000 	stclvs	0, cr0, [r3, #-0]
     ea8:	5f736973 	svcpl	0x00736973
     eac:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
     eb0:	00010068 	andeq	r0, r1, r8, rrx
     eb4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
	switch (operation) {
     eb8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	69000002 	stmdbvs	r0, {r1}
     ec0:	745f7172 	ldrbvc	r7, [pc], #-370	; ec8 <ioreq_uart_a+0x10>
     ec4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     ec8:	64656c5f 	strbtvs	r6, [r5], #-3167	; 0xfffff3a1
     ecc:	00682e73 	rsbeq	r2, r8, r3, ror lr
				*buf++ = uart_a_read;
     ed0:	75000003 	strvc	r0, [r0, #-3]
     ed4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
			while (len && uart_a_char_available) {
     ed8:	00020068 	andeq	r0, r2, r8, rrx
     edc:	71726900 	cmnvc	r2, r0, lsl #18
     ee0:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
			if (len != operation) {
     ee4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
}
     ee8:	0300682e 	movweq	r6, #2094	; 0x82e
     eec:	72690000 	rsbvc	r0, r9, #0
			uart_a_disable_int;
     ef0:	69705f71 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			if (uart_a_char_available) {
     ef4:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
				*buf++ = uart_a_read;
     ef8:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
			uart_a_disable_int;
     efc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     f00:	72700000 	rsbsvc	r0, r0, #0
			if (uart_a_char_available) {
     f04:	682e6d63 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}
     f08:	00000200 	andeq	r0, r0, r0, lsl #4
				uart_a_enable_int;
     f0c:	5f6e6f61 	svcpl	0x006e6f61
     f10:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
				goto Redo_rx;
     f14:	00020068 	andeq	r0, r2, r8, rrx
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	72777000 	rsbsvc	r7, r7, #0
     f1c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
			return -2;
     f20:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     f24:	61000002 	tstvs	r0, r2
				uart_a_write (*buf);
     f28:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     f2c:	682e636f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
			while (len && uart_a_room_in_tx) {
     f30:	00000200 	andeq	r0, r0, r0, lsl #4
     f34:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
     f38:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
			if (len != operation) {
     f3c:	00682e72 	rsbeq	r2, r8, r2, ror lr
			uart_a_disable_int;
     f40:	61000005 	tstvs	r0, r5
     f44:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
			if (uart_a_room_in_tx) {
     f48:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
     f4c:	00000200 	andeq	r0, r0, r0, lsl #4
				uart_a_enable_int;
     f50:	5f6e6f61 	svcpl	0x006e6f61
     f54:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
				*buf++ = uart_a_read;
     f58:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
			if (uart_a_room_in_tx) {
     f5c:	00000200 	andeq	r0, r0, r0, lsl #4
				uart_a_write (*buf);
     f60:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     f64:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	00000600 	andeq	r0, r0, r0, lsl #12
     f6c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
			uart_a_enable_int;
     f70:	0100682e 	tsteq	r0, lr, lsr #16
     f74:	616d0000 	cmnvs	sp, r0
     f78:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
			return 0;
     f7c:	00000100 	andeq	r0, r0, r0, lsl #2
			if (len == UART_CNTRL_SETRATE) {
     f80:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
				if (__pi_uart_setrate (*((word*)buf),
     f84:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     f88:	0100682e 	tsteq	r0, lr, lsr #16
     f8c:	75620000 	strbvc	r0, [r2, #-0]!
				syserror (EREQPAR, "uar");
     f90:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			syserror (ENOOPER, "uai");
     f94:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			if (len == UART_CNTRL_GETRATE) {
     f98:	00682e73 	rsbeq	r2, r8, r3, ror lr
				return 1;
     f9c:	73000001 	movwvc	r0, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     fa0:	6f697379 	svcvs	0x00697379
			syserror (ENOOPER, "uai");
     fa4:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     fa8:	656b0000 	strbvs	r0, [fp, #-0]!
     fac:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     fb0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     fb4:	05000000 	streq	r0, [r0, #-0]
     fb8:	02050027 	andeq	r0, r5, #39	; 0x27
     fbc:	00000b2c 	andeq	r0, r0, ip, lsr #22
     fc0:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
     fc4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	05100627 	ldreq	r0, [r0, #-1575]	; 0xfffff9d9
void UART0IntHandler () {
     fcc:	05022202 	streq	r2, [r2, #-514]	; 0xfffffdfe
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     fd4:	0205001f 	andeq	r0, r5, #31
     fd8:	00000b38 	andeq	r0, r0, r8, lsr fp
     fdc:	05011803 	streq	r1, [r1, #-2051]	; 0xfffff7fd
     fe0:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	06090501 	streq	r0, [r9], -r1, lsl #10
     fe8:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
		RISE_N_SHINE;
     fec:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
     ff0:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
		i_trigger (devevent (UART_A, READ));
     ff4:	0d051b02 	vstreq	d1, [r5, #-8]
     ff8:	01080501 	tsteq	r8, r1, lsl #10
     ffc:	01060a05 	tsteq	r6, r5, lsl #20
    1000:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
    1004:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
    1008:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
    100c:	01010007 	tsteq	r1, r7
    1010:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    1014:	000b6402 	andeq	r6, fp, r2, lsl #8
    1018:	011f0300 	tsteq	pc, r0, lsl #6
    101c:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
    1020:	09050108 	stmdbeq	r5, {r3, r8}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	08050106 	stmdaeq	r5, {r1, r2, r8}
    1028:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
    102c:	39060305 	stmdbcc	r6, {r0, r2, r8, r9}
		i_trigger (devevent (UART_A, WRITE));
    1030:	0604054b 	streq	r0, [r4], -fp, asr #10
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	00070201 	andeq	r0, r7, r1, lsl #4
    1038:	1e050101 	adfnes	f0, f5, f1
		RISE_N_SHINE;
    103c:	90020500 	andls	r0, r2, r0, lsl #10
    1040:	0300000b 	movweq	r0, #11
    1044:	0205012a 	andeq	r0, r5, #-2147483638	; 0x8000000a
		i_trigger (devevent (UART_A, WRITE));
    1048:	061e0516 			; <UNDEFINED> instruction: 0x061e0516
    104c:	2405050e 	strcs	r0, [r5], #-1294	; 0xfffffaf2
    1050:	051c1e05 	ldreq	r1, [ip, #-3589]	; 0xfffff1fb
    1054:	03052405 	movweq	r2, #21509	; 0x5405
    1058:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
    105c:	06050106 	streq	r0, [r5], -r6, lsl #2
    1060:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1064:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    1068:	06020501 	streq	r0, [r2], -r1, lsl #10
    106c:	3b05593f 	blcc	157570 <__ccfg+0x1375c8>
    1070:	01080501 	tsteq	r8, r1, lsl #10
}
    1074:	01060905 	tsteq	r6, r5, lsl #18
    1078:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    107c:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    1080:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    1084:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
void __buttons_setirq (int val) {
    1088:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	0205001f 	andeq	r0, r5, #31
    1090:	00000bcc 	andeq	r0, r0, ip, asr #23
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    1098:	1f051702 	svcne	0x00051702
    109c:	02050d06 	andeq	r0, r5, #384	; 0x180
		bn = BUTTON_GPIO (__button_list [i]);
    10a0:	1b1f0525 	blne	7c253c <__ccfg+0x7a2594>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10a4:	06250205 	strteq	r0, [r5], -r5, lsl #4
    10a8:	013c053d 	teqeq	ip, sp, lsr r5
    10ac:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    10b0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    10b4:	02054a08 	andeq	r4, r5, #8, 20	; 0x8000
    10b8:	05053006 	streq	r3, [r5, #-6]
}
    10bc:	03050106 	movweq	r0, #20742	; 0x5106
    10c0:	12054b06 	andne	r4, r5, #6144	; 0x1800
    10c4:	27050106 	strcs	r0, [r5, -r6, lsl #2]
    10c8:	20060520 	andcs	r0, r6, r0, lsr #10
void __pinlist_setirq (int val) {
    10cc:	21060405 	tstcs	r6, r5, lsl #8
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	01062405 	tsteq	r6, r5, lsl #8
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10e0:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
    10e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e8:	02050013 	andeq	r0, r5, #19
    10ec:	00000000 	andeq	r0, r0, r0
    10f0:	0100ce03 	tsteq	r0, r3, lsl #28
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
}
    10f8:	051e0613 	ldreq	r0, [lr, #-1555]	; 0xfffff9ed
    10fc:	33062202 	movwcc	r2, #25090	; 0x6202
    1100:	13030536 	movwne	r0, #13622	; 0x3536
    1104:	04050204 	streq	r0, [r5], #-516	; 0xfffffdfc
void GPIOIntHandler () {
    1108:	0101f003 	tsteq	r1, r3	; <UNPREDICTABLE>
if (buttons_int) {
    110c:	065c0530 			; <UNDEFINED> instruction: 0x065c0530
    1110:	06040501 	streq	r0, [r4], -r1, lsl #10
	buttons_disable ();
    1114:	0a05143e 	beq	146214 <__ccfg+0x12626c>
    1118:	00050210 	andeq	r0, r5, r0, lsl r2
	i_trigger ((aword)&__button_list);
    111c:	2d050101 	stfcss	f0, [r5, #-4]
    1120:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    1124:	0300000c 	movweq	r0, #12
    1128:	05010197 	streq	r0, [r1, #-407]	; 0xfffffe69
    112c:	01011402 	tsteq	r1, r2, lsl #8
    1130:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1134:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    1138:	03063502 	movweq	r3, #25858	; 0x6502
    113c:	03044a09 	movweq	r4, #18953	; 0x4a09
    1140:	b5030305 	strlt	r0, [r3, #-773]	; 0xfffffcfb
    1144:	0404017f 	streq	r0, [r4], #-383	; 0xfffffe81
	RISE_N_SHINE;
    1148:	03062d05 	movweq	r2, #27909	; 0x6d05
    114c:	042001cb 	strteq	r0, [r0], #-459	; 0xfffffe35
    1150:	06020501 	streq	r0, [r2], -r1, lsl #10
if (pin_sensor_int) {
    1154:	3c7f8f03 	ldclcc	15, cr8, [pc], #-12	; 1150 <GPIOIntHandler+0x48>
    1158:	01130305 	tsteq	r3, r5, lsl #6
	i_trigger ((aword)(&__input_pins));
    115c:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1160:	00eb0329 	rsceq	r0, fp, r9, lsr #6
    1164:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1168:	01062d05 	tsteq	r6, r5, lsl #26
    116c:	03050104 	movweq	r0, #20740	; 0x5104
    1170:	207f9003 	rsbscs	r9, pc, r3
    1174:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1178:	2000f003 	andcs	pc, r0, r3
    117c:	03050104 	movweq	r0, #20740	; 0x5104
    1180:	7f900306 	svcvc	0x00900306
    1184:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	__pinsen_disable_and_clear;
    1188:	00eb0329 	rsceq	r0, fp, r9, lsr #6
	RISE_N_SHINE;
    118c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1190:	01062d05 	tsteq	r6, r5, lsl #26
    1194:	03050104 	movweq	r0, #20740	; 0x5104
}
    1198:	7f900306 	svcvc	0x00900306
    119c:	01010120 	tsteq	r1, r0, lsr #2
    11a0:	66010101 	strvs	r0, [r1], -r1, lsl #2
    11a4:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
    11a8:	03290504 			; <UNDEFINED> instruction: 0x03290504
void system_init () {
    11ac:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	01040106 	tsteq	r4, r6, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	da030305 	ble	c1dd4 <__ccfg+0xa1e2c>
    11bc:	0404207e 	streq	r2, [r4], #-126	; 0xffffff82
    11c0:	a6032d05 	strge	r2, [r3], -r5, lsl #26
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	01042001 	tsteq	r4, r1
    11c8:	03060305 	movweq	r0, #25349	; 0x6305
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    11d0:	03290504 			; <UNDEFINED> instruction: 0x03290504
    11d4:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    11dc:	01040106 	tsteq	r4, r6, lsl #2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11e0:	03060305 	movweq	r0, #25349	; 0x6305
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e4:	01207eda 	ldrdeq	r7, [r0, -sl]!
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	01010101 	tsteq	r1, r1, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ec:	2e015801 	cdpcs	8, 0, cr5, cr1, cr1, {0}
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	02110805 	andseq	r0, r1, #327680	; 0x50000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	01010009 	tsteq	r1, r9
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	000c6002 	andeq	r6, ip, r2
    1200:	029d0300 	addseq	r0, sp, #0, 6
    1204:	16020501 	strne	r0, [r2], -r1, lsl #10
    1208:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
		if (port_confs [i] & 0x80)
    120c:	05241605 	streq	r1, [r4, #-1541]!	; 0xfffff9fb
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	16054a09 	strne	r4, [r5], -r9, lsl #20
    1214:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
		if (port_confs [i] & 0x40)
    1218:	23060205 	movwcs	r0, #25093	; 0x6205
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	05017603 	streq	r7, [r1, #-1539]	; 0xfffff9fd
    1220:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	2e0d0302 	cdpcs	3, 0, cr0, cr13, cr2, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1228:	73032f05 	movwvc	r2, #16133	; 0x3f05
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122c:	032a0520 			; <UNDEFINED> instruction: 0x032a0520
	all_leds_blink;
    1230:	2f05200a 	svccs	0x0005200a
    1234:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    1238:	2a052e36 	bcs	14cb18 <__ccfg+0x12cb70>
    123c:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    1240:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    1244:	022f0601 	eoreq	r0, pc, #1048576	; 0x100000
    1248:	0101000b 	tsteq	r1, fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1250:	000ca002 	andeq	sl, ip, r2
    1254:	02aa0300 	adceq	r0, sl, #0, 6
    1258:	17020501 	strne	r0, [r2, -r1, lsl #10]
    125c:	1b062105 	blne	189678 <__ccfg+0x1696d0>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	052e0609 	streq	r0, [lr, #-1545]!	; 0xfffff9f7
    1268:	69031402 	stmdbvs	r3, {r1, sl, ip}
	IntEnable (INT_AON_RTC_COMB);
    126c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    1270:	2e2f0501 	cfsh64cs	mvdx0, mvdx15, #1
    1274:	17032a05 	strne	r2, [r3, -r5, lsl #20]
	__pi_malloc_init ();
    1278:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	36052069 	strcc	r2, [r5], -r9, rrx
    1280:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1284:	02052017 	andeq	r2, r5, #23
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    128c:	0601052e 	streq	r0, [r1], -lr, lsr #10
    1290:	00060213 	andeq	r0, r6, r3, lsl r2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	1a050101 	bne	1416a0 <__ccfg+0x1216f8>
    1298:	c8020500 	stmdagt	r2, {r8, sl}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	0300000c 	movweq	r0, #12
    12a0:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
    12a4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
	urates [0] = UART_RATE / 100;
    12a8:	050e061a 	streq	r0, [lr, #-1562]	; 0xfffff9e6
    12ac:	0905240b 	stmdbeq	r5, {r0, r1, r3, sl, sp}
	reinit_uart ();
    12b0:	0602052e 	streq	r0, [r2], -lr, lsr #10
	EXTRA_INITIALIZERS;
    12b4:	06050532 			; <UNDEFINED> instruction: 0x06050532
    12b8:	1e2b0514 	mcrne	5, 1, r0, cr11, cr4, {0}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    12c0:	01060505 	tsteq	r6, r5, lsl #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    12c4:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	12051518 	andne	r1, r5, #24, 10	; 0x6000000
    12cc:	06050106 	streq	r0, [r5], -r6, lsl #2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    12d4:	06070530 			; <UNDEFINED> instruction: 0x06070530
			devinit [i] . init (devinit [i] . param);
    12d8:	20060501 	andcs	r0, r6, r1, lsl #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	2f060405 	svccs	0x00060405
    12e0:	01061705 	tsteq	r6, r5, lsl #14
    12e4:	2f060405 	svccs	0x00060405
	IntEnable (INT_UART0_COMB);
    12e8:	01061705 	tsteq	r6, r5, lsl #14
    12ec:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
}
    12f0:	01061205 	tsteq	r6, r5, lsl #4
	tci_run_auxiliary_timer ();
    12f4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
		diag ("");
    12f8:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    12fc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1300:	04052006 	streq	r2, [r5], #-6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	17052106 	strne	r2, [r5, -r6, lsl #2]
		diag ("Leftover RAM: %d bytes",
    1308:	051f1306 	ldreq	r1, [pc, #-774]	; 100a <UART0IntHandler+0x42>
    130c:	052f0604 	streq	r0, [pc, #-1540]!	; d10 <AONRTCIntHandler+0x48>
    1310:	12051403 	andne	r1, r5, #50331648	; 0x3000000
    1314:	06050106 	streq	r0, [r5], -r6, lsl #2
    1318:	06030520 	streq	r0, [r3], -r0, lsr #10
    131c:	06070522 	streq	r0, [r7], -r2, lsr #10
    1320:	20060501 	andcs	r0, r6, r1, lsl #10
    1324:	21060405 	tstcs	r6, r5, lsl #8
    1328:	13061705 	movwne	r1, #26373	; 0x6705
    132c:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
    1330:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    1334:	01061205 	tsteq	r6, r5, lsl #4
    1338:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    133c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1340:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    1344:	05052007 	streq	r2, [r5, #-7]
    1348:	18052106 	stmdane	r5, {r1, r2, r8, sp}
    134c:	051f1306 	ldreq	r1, [pc, #-774]	; 104e <UART0IntHandler+0x86>
    1350:	042f0605 	strteq	r0, [pc], #-1541	; 1358 <system_init+0x1ac>
    1354:	03020505 	movweq	r0, #9477	; 0x2505
    1358:	05017da3 	streq	r7, [r1, #-3491]	; 0xfffff25d
    135c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1360:	03052e05 	movweq	r2, #24069	; 0x5e05
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	12053006 	andne	r3, r5, #6
    1368:	19050106 	stmdbne	r5, {r1, r2, r8}
    136c:	3c060520 	cfstr32cc	mvfx0, [r6], {32}
    1370:	21060405 	tstcs	r6, r5, lsl #8
    1374:	01061305 	tsteq	r6, r5, lsl #6
    1378:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    137c:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
    1380:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
}
    1384:	06080521 	streq	r0, [r8], -r1, lsr #10
__attribute__ ((noreturn)) void __pi_release () {
    1388:	06060501 	streq	r0, [r6], -r1, lsl #10
    138c:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    1390:	02960329 	addseq	r0, r6, #-1543503872	; 0xa4000000
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1394:	17050501 	strne	r0, [r5, -r1, lsl #10]
	check_stack_overflow;
    1398:	01062d05 	tsteq	r6, r5, lsl #26
    139c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    13a0:	7de60306 	stclvc	3, cr0, [r6, #24]!
	update_n_wake (MAX_WORD, NO);
    13a4:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    13a8:	20080501 	andcs	r0, r8, r1, lsl #10
    13ac:	21060605 	tstcs	r6, r5, lsl #12
	for_all_tasks (__pi_curr) {
    13b0:	29050404 	stmdbcs	r5, {r2, sl}
    13b4:	01029403 	tsteq	r2, r3, lsl #8
    13b8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	__SLEEP;
    13c0:	06050505 	streq	r0, [r5], -r5, lsl #10
    13c4:	4a7de803 	bmi	1f7b3d8 <__ccfg+0x1f5b430>
    13c8:	01061405 	tsteq	r6, r5, lsl #8
    13cc:	21060605 	tstcs	r6, r5, lsl #12
	system_event_count ++;
    13d0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    13d4:	06140513 			; <UNDEFINED> instruction: 0x06140513
	switch (__pi_systat.effpdm) {
    13d8:	06060501 	streq	r0, [r6], -r1, lsl #10
    13dc:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    13e0:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
    13e4:	0a030106 	beq	c1804 <__ccfg+0xa185c>
			__WFI ();
    13e8:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    13ec:	06130522 	ldreq	r0, [r3], -r2, lsr #10
    13f0:	20070501 	andcs	r0, r7, r1, lsl #10
	check_stack_overflow;
    13f4:	2f060505 	svccs	0x00060505
    13f8:	01061805 	tsteq	r6, r5, lsl #16
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	0b050104 	bleq	141814 <__ccfg+0x12186c>
    1400:	02cd0306 	sbceq	r0, sp, #402653184	; 0x18000000
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	1a02052e 	bne	828c4 <__ccfg+0x6291c>
			goto Redo;
    1408:	01060505 	tsteq	r6, r5, lsl #10
	for_all_tasks (__pi_curr) {
    140c:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	30060c05 	andcc	r0, r6, r5, lsl #24
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	062c0305 	strteq	r0, [ip], -r5, lsl #6
    1418:	060c0522 	streq	r0, [ip], -r2, lsr #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141c:	2f0a0501 	svccs	0x000a0501
    1420:	051f0c05 	ldreq	r0, [pc, #-3077]	; 823 <root+0x27f>
    1424:	0c052203 	sfmeq	f2, 4, [r5], {3}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    142c:	4a01132f 	bmi	460f0 <__ccfg+0x26148>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
    1434:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
			__WFI ();
    1438:	20450316 	subcs	r0, r5, r6, lsl r3
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    1440:	7dc90306 	stclvc	3, cr0, [r9, #24]
    1444:	0608054a 	streq	r0, [r8], -sl, asr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1448:	06060501 	streq	r0, [r6], -r1, lsl #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144c:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1450:	02c20329 	sbceq	r0, r2, #-1543503872	; 0xa4000000
    1454:	17050501 	strne	r0, [r5, -r1, lsl #10]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1458:	01062d05 	tsteq	r6, r5, lsl #26
    145c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    1460:	7dba0306 	ldcvc	3, cr0, [sl, #24]!
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1464:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1468:	20080501 	andcs	r0, r8, r1, lsl #10
    146c:	21060605 	tstcs	r6, r5, lsl #12
    1470:	29050404 	stmdbcs	r5, {r2, sl}
    1474:	0102c003 	tsteq	r2, r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    147c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	06050505 	streq	r0, [r5], -r5, lsl #10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1484:	4a7dbc03 	bmi	1f70498 <__ccfg+0x1f504f0>
    1488:	01061405 	tsteq	r6, r5, lsl #8
    148c:	21060605 	tstcs	r6, r5, lsl #12
    1490:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    1494:	06140513 			; <UNDEFINED> instruction: 0x06140513
			SysCtrlSetRechargeBeforePowerDown
    1498:	06060501 	streq	r0, [r6], -r1, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    149c:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14a0:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
    14a4:	01040106 	tsteq	r4, r6, lsl #2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	03060305 	movweq	r0, #25349	; 0x6305
    14ac:	054a02ce 	strbeq	r0, [sl, #-718]	; 0xfffffd32
    14b0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b4:	02300604 	eorseq	r0, r0, #4, 12	; 0x400000
    14b8:	01010015 	tsteq	r1, r5, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	000ddc02 	andeq	sp, sp, r2, lsl #24
    14c4:	03890300 	orreq	r0, r9, #0, 6
    14c8:	16020501 	strne	r0, [r2], -r1, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14cc:	0e062d05 	cdpeq	13, 0, cr2, cr6, cr5, {0}
			while (!(AONWUCPowerStatusGet () &
    14d0:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	02052f06 	andeq	r2, r5, #6, 30
    14d8:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
    14dc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14e0:	03052005 	movweq	r2, #20485	; 0x5005
    14e4:	20090306 	andcs	r0, r9, r6, lsl #6
    14e8:	01060605 	tsteq	r6, r5, lsl #12
    14ec:	23060405 	movwcs	r0, #25605	; 0x6405
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	01061a05 	tsteq	r6, r5, lsl #20
    14f4:	03060205 	movweq	r0, #25093	; 0x6205
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    14f8:	052e7ef9 	streq	r7, [lr, #-3833]!	; 0xfffff107
    14fc:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
			SysCtrlAdjustRechargeAfterPowerDown ();
    1500:	1a052e2e 	bne	14cdc0 <__ccfg+0x12ce18>
			reinit_uart ();
    1504:	3c018703 	stccc	7, cr8, [r1], {3}
    1508:	2018052f 	andscs	r0, r8, pc, lsr #10
    150c:	051f1705 	ldreq	r1, [pc, #-1797]	; e0f <tci_update_delay_ticks+0x33>
}
    1510:	200a0309 	andcs	r0, sl, r9, lsl #6
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1514:	76030d05 	strvc	r0, [r3], -r5, lsl #26
    1518:	230b0520 	movwcs	r0, #46368	; 0xb520
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	051d0d05 	ldreq	r0, [sp, #-3333]	; 0xfffff2fb
    1520:	134d0604 	movtne	r0, #54788	; 0xd604
    1524:	19060105 	stmdbne	r6, {r0, r2, r8}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
    152c:	060a052f 	streq	r0, [sl], -pc, lsr #10
    1530:	00090201 	andeq	r0, r9, r1, lsl #4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1534:	33050101 	movwcc	r0, #20737	; 0x5101
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	0300000e 	movweq	r0, #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	050105d3 	streq	r0, [r1, #-1491]	; 0xfffffa2d
    1544:	05171402 	ldreq	r1, [r7, #-1026]	; 0xfffffbfe
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1548:	79030633 	stmdbvc	r3, {r0, r1, r4, r5, r9, sl}
    154c:	27020501 	strcs	r0, [r2, -r1, lsl #10]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1550:	79033305 	stmdbvc	r3, {r0, r2, r8, r9, ip, sp}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1554:	2702053c 	smladxcs	r2, ip, r5, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1558:	02043e06 	andeq	r3, r4, #6, 28	; 0x60
    155c:	d5030505 	strle	r0, [r3, #-1285]	; 0xfffffafb
			PRCMPowerDomainOff (
    1560:	0104017b 	tsteq	r4, fp, ror r1
    1564:	03060205 	movweq	r0, #25093	; 0x6205
	__SLEEP;
    1568:	060104ab 	streq	r0, [r1], -fp, lsr #9
    156c:	04820903 	streq	r0, [r2], #2307	; 0x903
  __ASM volatile ("cpsie i" : : : "memory");
    1570:	03240506 			; <UNDEFINED> instruction: 0x03240506
	goto Redo;
    1574:	05017dd9 	streq	r7, [r1, #-3545]	; 0xfffff227
    1578:	23051705 	movwcs	r1, #22277	; 0x5705
    157c:	01040106 	tsteq	r4, r6, lsl #2
    1580:	a5030105 	strge	r0, [r3, #-261]	; 0xfffffefb
    1584:	06042002 	streq	r2, [r4], -r2
    1588:	db032305 	blle	ca1a4 <__ccfg+0xaa1fc>
    158c:	0505207d 	streq	r2, [r5, #-125]	; 0xffffff83
    1590:	22054f06 	andcs	r4, r5, #6, 30
    1594:	01040106 	tsteq	r4, r6, lsl #2
    1598:	03060205 	movweq	r0, #25093	; 0x6205
    159c:	0566029e 	strbeq	r0, [r6, #-670]!	; 0xfffffd62
    15a0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    15a4:	052f0602 	streq	r0, [pc, #-1538]!	; faa <ioreq_uart_a+0xf2>
    15a8:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    15ac:	0101000c 	tsteq	r1, ip
    15b0:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    15b4:	000e8002 	andeq	r8, lr, r2
    15b8:	05ef0300 	strbeq	r0, [pc, #768]!	; 18c0 <__pi_trigger+0x24>
    15bc:	17020501 	strne	r0, [r2, -r1, lsl #10]
    15c0:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    15c4:	017df703 	cmneq	sp, r3, lsl #14	; <UNPREDICTABLE>
    15c8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    15cc:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    15d0:	03020501 	movweq	r0, #9473	; 0x2501
    15d4:	04200288 	strteq	r0, [r0], #-648	; 0xfffffd78
    15d8:	03230506 			; <UNDEFINED> instruction: 0x03230506
    15dc:	04207df8 	strteq	r7, [r0], #-3576	; 0xfffff208
	cli_tim;
    15e0:	06020501 	streq	r0, [r2], -r1, lsl #10
    15e4:	4a028503 	bmi	a29f8 <__ccfg+0x82a50>
    15e8:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
	diag ("PicOS halted");
    15ec:	017cc903 	cmneq	ip, r3, lsl #18
	mdelay (500);
    15f0:	17172d05 	ldrne	r2, [r7, -r5, lsl #26]
    15f4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	setpowermode (2);
    15f8:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
	__PCB = NULL;
    15fc:	06020501 	streq	r0, [r2], -r1, lsl #10
	release;
    1600:	3c03a903 			; <UNDEFINED> instruction: 0x3c03a903
    1604:	27050604 	strcs	r0, [r5, -r4, lsl #12]
    1608:	0102ce03 	tsteq	r2, r3, lsl #28
    160c:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
int main (void) {
    1610:	04010624 	streq	r0, [r1], #-1572	; 0xfffff9dc
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	06020501 	streq	r0, [r2], -r1, lsl #10
    1618:	587db203 	ldmdapl	sp!, {r0, r1, r9, ip, sp, pc}^
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	01000e02 	tsteq	r0, r2, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	003d0501 	eorseq	r0, sp, r1, lsl #10
	system_init ();
    1624:	0eb80205 	cdpeq	2, 11, cr0, cr8, cr5, {0}
	tcv_init ();
    1628:	8f030000 	svchi	0x00030000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    162c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1630:	063d0514 			; <UNDEFINED> instruction: 0x063d0514
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	05052e1e 	streq	r2, [r5, #-3614]	; 0xfffff1e2
    1638:	820b0306 	andhi	r0, fp, #402653184	; 0x18000000
    163c:	01060e05 	tsteq	r6, r5, lsl #28
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1640:	052f0805 	streq	r0, [pc, #-2053]!	; e43 <__pi_uart_setrate+0x17>
    1644:	05051f0e 	streq	r1, [r5, #-3854]	; 0xfffff0f2
	delay (16, 0);
    1648:	0a052f06 	beq	14d268 <__ccfg+0x12d2c0>
    164c:	0612050f 	ldreq	r0, [r2], -pc, lsl #10
    1650:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
	__pi_release ();
    1654:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
    1658:	01060705 	tsteq	r6, r5, lsl #14
    165c:	03060505 	movweq	r0, #25861	; 0x6505
    1660:	16052e28 	strne	r2, [r5], -r8, lsr #28
    1664:	01050106 	tsteq	r5, r6, lsl #2
    1668:	05203403 	streq	r3, [r0, #-1027]!	; 0xfffffbfd
    166c:	7fa00309 	svcvc	0x00a00309
static void killev (__pi_pcb_t *pid) {
    1670:	0304053c 	movweq	r0, #17724	; 0x453c
	wfun = (aword)(pid->code);
    1674:	0805200b 	stmdaeq	r5, {r0, r1, r3, sp}
	for_all_tasks (i) {
    1678:	030e0521 	movweq	r0, #58657	; 0xe521
		for (j = 0; j < nevents (i); j++) {
    167c:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
    1680:	3c0b0306 	stccc	3, cr0, [fp], {6}
    1684:	0608054b 	streq	r0, [r8], -fp, asr #10
			    || i->Events [j] . Event == wfun
    1688:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
		for (j = 0; j < nevents (i); j++) {
    168c:	30060505 	andcc	r0, r6, r5, lsl #10
			if (i->Events [j] . Event == (aword)pid
    1690:	2404054b 	strcs	r0, [r4], #-1355	; 0xfffffab5
    1694:	03060b05 	movweq	r0, #27397	; 0x6b05
    1698:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
				wakeupev (i, j);
    169c:	0521062d 	streq	r0, [r1, #-1581]!	; 0xfffff9d3
    16a0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	for_all_tasks (i) {
    16a4:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
}
    16a8:	06080520 	streq	r0, [r8], -r0, lsr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16ac:	1e050530 	cfmv64hrne	mvdx5, r0
static void qfree (aword *ch) {
    16b0:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b4:	12050e0a 	andne	r0, r5, #10, 28	; 0xa0
	cc = (aword*)(mpools + MA_NP);
    16b8:	0f052006 	svceq	0x00052006
	m_setnextp (ch, chunk);
    16bc:	0604052e 	streq	r0, [r4], -lr, lsr #10
	m_setnextp (cc, ch);
    16c0:	06070535 			; <UNDEFINED> instruction: 0x06070535
}
    16c4:	06040501 	streq	r0, [r4], -r1, lsl #10
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16c8:	08054b34 	stmdaeq	r5, {r2, r4, r5, r8, r9, fp, lr}
    16cc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    16d0:	0605052e 	streq	r0, [r5], -lr, lsr #10
			m_setnextp (cc, m_nextp (chunk));
    16d4:	09054b2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
			m_size (chunk) += m_hdrlen + m_size (ch);
    16d8:	204d0306 	subcs	r0, sp, r6, lsl #6
    16dc:	30030405 	andcc	r0, r3, r5, lsl #8
    16e0:	21080520 	tstcs	r8, r0, lsr #10
    16e4:	74030505 	strvc	r0, [r3], #-1285	; 0xfffffafb
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16e8:	0604052e 	streq	r0, [r4], -lr, lsr #10
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	5e3c1103 	rsfple	f1, f4, f3
    16f0:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
    16f4:	061f0405 	ldreq	r0, [pc], -r5, lsl #8
			m_setnextp (cc, m_nextp (chunk));
    16f8:	060b052f 	streq	r0, [fp], -pc, lsr #10
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	06040501 	streq	r0, [r4], -r1, lsl #10
    1700:	06070525 	streq	r0, [r7], -r5, lsr #10
    1704:	06050501 	streq	r0, [r5], -r1, lsl #10
    1708:	0609052f 	streq	r0, [r9], -pc, lsr #10
    170c:	4a080501 	bmi	202b18 <__ccfg+0x1e2b70>
    1710:	31060505 	tstcc	r6, r5, lsl #10
			if (m_size (chunk) >= m_size (ch))
    1714:	03060405 	movweq	r0, #25605	; 0x6405
    1718:	03062e16 	movweq	r2, #28182	; 0x6e16
    171c:	07052e6d 	streq	r2, [r5, -sp, ror #28]
		chunk = m_nextp (chunk))
    1720:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1724:	02052f06 	andeq	r2, r5, #6, 30
    1728:	017f8803 	cmneq	pc, r3, lsl #16
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	01061005 	tsteq	r6, r5
	diag_wait (a);
    1730:	f9030c05 			; <UNDEFINED> instruction: 0xf9030c05
	diag_wchar (c, a);
    1734:	13052000 	movwne	r2, #20480	; 0x5000
    1738:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
}
    173c:	060c052f 	streq	r0, [ip], -pc, lsr #10
    1740:	06040501 	streq	r0, [r4], -r1, lsl #10
	syserror (ESTATE, "state");
    1744:	02201103 	eoreq	r1, r0, #-1073741824	; 0xc0000000
    1748:	01010012 	tsteq	r1, r2, lsl r0
    174c:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    1750:	00000002 	andeq	r0, r0, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	05ea0300 	strbeq	r0, [sl, #768]!	; 0x300
void utimer_add (address ut) {
    1758:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    175c:	13060105 	movwne	r0, #24837	; 0x6105
		if (__pi_utims [i] == NULL)
    1760:	01000602 	tsteq	r0, r2, lsl #12
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	00190501 	andseq	r0, r9, r1, lsl #10
    1768:	0fc80205 	svceq	0x00c80205
		syserror (ERESOURCE, "ut a");
    176c:	81030000 	mrshi	r0, (UNDEF: 3)
	__pi_utims [i] = ut;
    1770:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
}
    1774:	05060414 	streq	r0, [r6, #-1044]	; 0xfffffbec
    1778:	01120324 	tsteq	r2, r4, lsr #6
    177c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	*t = v;
    1780:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
	TCI_RUN_AUXILIARY_TIMER;
    1784:	03190501 	tsteq	r9, #4194304	; 0x400000
void update_n_wake (word min, Boolean force) {
    1788:	06042e67 	streq	r2, [r4], -r7, ror #28
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	19032205 	stmdbne	r3, {r0, r2, r9, sp}
    1790:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1794:	206b0306 	rsbcs	r0, fp, r6, lsl #6
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1798:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
    179c:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    17a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    17a4:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    17a8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    17ac:	29052005 	stmdbcs	r5, {r0, r2, sp}
    17b0:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
    17b4:	2f060305 	svccs	0x00060305
    17b8:	1358014b 	cmpne	r8, #-1073741806	; 0xc0000012
    17bc:	2e010101 	adfcss	f0, f1, f1
    17c0:	66062006 	strvs	r2, [r6], -r6
    17c4:	014a662e 	cmpeq	sl, lr, lsr #12
    17c8:	1502052e 	strne	r0, [r2, #-1326]	; 0xfffffad2
		for_all_tasks (i) {
    17cc:	01060605 	tsteq	r6, r5, lsl #12
	__pi_mintk = znew + min;
    17d0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    17d4:	18052e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, sp}
			if (!twaiting (i))
    17d8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    17dc:	2c14062f 	ldccs	6, cr0, [r4], {47}	; 0x2f
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17e0:	58014b06 	stmdapl	r1, {r1, r2, r8, r9, fp, lr}
    17e4:	01010113 	tsteq	r1, r3, lsl r1
    17e8:	0620062e 	strteq	r0, [r0], -lr, lsr #12
    17ec:	4a582e66 	bmi	160d18c <__ccfg+0x15ed1e4>
    17f0:	06010501 	streq	r0, [r1], -r1, lsl #10
    17f4:	000b0232 	andeq	r0, fp, r2, lsr r2
    17f8:	21050101 	tstcs	r5, r1, lsl #2
    17fc:	88020500 	stmdahi	r2, {r8, sl}
    1800:	03000010 	movweq	r0, #16
    1804:	050107d9 	streq	r0, [r1, #-2009]	; 0xfffff827
    1808:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    180c:	03050304 	movweq	r0, #21252	; 0x5304
				wakeuptm (i);
    1810:	0178fe03 	cmneq	r8, r3, lsl #28	; <UNPREDICTABLE>
    1814:	21050104 	tstcs	r5, r4, lsl #2
		for_all_tasks (i) {
    1818:	06fd0306 	ldrbteq	r0, [sp], r6, lsl #6
				d = i->Timer - znew;
    181c:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    1820:	79830303 	stmibvc	r3, {r0, r1, r8, r9}
    1824:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		if ((word)(__pi_mintk - znew) < min) 
    1828:	83030602 	movwhi	r0, #13826	; 0x3602
    182c:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    1830:	13030501 	movwne	r0, #13569	; 0x3501
	__pi_old = znew;
    1834:	33050404 	movwcc	r0, #21508	; 0x5404
}
    1838:	7dad0306 	stcvc	3, cr0, [sp, #24]!
	TCI_RUN_DELAY_TIMER;
    183c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1840:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
    1844:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    1848:	7dad032d 	stcvc	3, cr0, [sp, #180]!	; 0xb4
    184c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1850:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
void proceed (word state) {
    1854:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
	prcdstate (__pi_curr, state);
    1858:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    185c:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
	release;
    1860:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1864:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
void __pi_wait (aword event, word state) {
    1868:	33051705 	movwcc	r1, #22277	; 0x5705
	sint j = nevents (__pi_curr);
    186c:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1874:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
    1878:	08052002 	stmdaeq	r5, {r1, sp}
		syserror (ENEVENTS, "sw");
    187c:	03051e06 	movweq	r1, #24070	; 0x5e06
    1880:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
	setestate (__pi_curr->Events [j], state, event);
    1884:	33050404 	movwcc	r0, #21508	; 0x5404
	incwait (__pi_curr);
    1888:	207dad03 	rsbscs	sl, sp, r3, lsl #26
	setestate (__pi_curr->Events [j], state, event);
    188c:	03050104 	movweq	r0, #20740	; 0x5104
}
    1890:	2002d503 	andcs	sp, r2, r3, lsl #10
    1894:	05584105 	ldrbeq	r4, [r8, #-261]	; 0xfffffefb
    1898:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
void __pi_trigger (aword event) {
    189c:	0305010e 	movweq	r0, #20750	; 0x510e
	for_all_tasks (i) {
    18a0:	04041313 	streq	r1, [r4], #-787	; 0xfffffced
		for (j = 0; j < nevents (i); j++) {
    18a4:	a7032905 	strge	r2, [r3, -r5, lsl #18]
    18a8:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    18ac:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    18b0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			if (i->Events [j] . Event == event) {
    18b4:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
    18b8:	41052002 	tstmi	r5, r2
    18bc:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
				wakeupev (i, j);
    18c0:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
    18c4:	18020501 	stmdane	r2, {r0, r8, sl}
	for_all_tasks (i) {
    18c8:	03050304 	movweq	r0, #21252	; 0x5304
}
    18cc:	0178ec03 	cmneq	r8, r3, lsl #24
aword __pi_join (aword pid, word st) {
    18d0:	01050104 	tsteq	r5, r4, lsl #2
	for_all_tasks (i) {
    18d4:	07950306 	ldreq	r0, [r5, r6, lsl #6]
    18d8:	00080220 	andeq	r0, r8, r0, lsr #4
	return 0;
    18dc:	21050101 	tstcs	r5, r1, lsl #2
		if ((aword)i == pid) {
    18e0:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
			__pi_wait (pid, st);
    18e4:	03000010 	movweq	r0, #16
}
    18e8:	050107ec 	streq	r0, [r1, #-2028]	; 0xfffff814
	for_all_tasks (i) {
    18ec:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    18f0:	03050304 	movweq	r0, #21252	; 0x5304
void delay (word d, word state) {
    18f4:	0178eb03 	cmneq	r8, r3, lsl #22
	settstate (__pi_curr, state);
    18f8:	21050104 	tstcs	r5, r4, lsl #2
    18fc:	07900306 	ldreq	r0, [r0, r6, lsl #6]
    1900:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    1904:	78f00303 	ldmvc	r0!, {r0, r1, r8, r9}^
	update_n_wake (d, YES);
    1908:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    190c:	96030602 	strls	r0, [r3], -r2, lsl #12
	__pi_curr->Timer = __pi_old + d;
    1910:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    1914:	06090501 	streq	r0, [r9], -r1, lsl #10
	inctimer (__pi_curr);
    1918:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    191c:	7d9b0333 	ldcvc	3, cr0, [fp, #204]	; 0xcc
    1920:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
}
    1924:	02e60308 	rsceq	r0, r6, #8, 6	; 0x20000000
    1928:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	if (fun == NULL)
    192c:	7d9a032d 	ldcvc	3, cr0, [sl, #180]	; 0xb4
		return (int) __pi_curr;
    1930:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1934:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	for_all_tasks (i)
    1938:	051e0620 	ldreq	r0, [lr, #-1568]	; 0xfffff9e0
}
    193c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		if (i->code == fun)
    1940:	06051f1e 			; <UNDEFINED> instruction: 0x06051f1e
	for_all_tasks (i)
    1944:	06030521 	streq	r0, [r3], -r1, lsr #10
    1948:	0504042f 	streq	r0, [r4, #-1071]	; 0xfffffbd1
    194c:	7d940329 	ldcvc	3, cr0, [r4, #164]	; 0xa4
int __pi_strlen (const char *s) {
    1950:	17050501 	strne	r0, [r5, -r1, lsl #10]
	for (i = 0; *(s+i) != '\0'; i++);
    1954:	01063305 	tsteq	r6, r5, lsl #6
}
    1958:	03050104 	movweq	r0, #20740	; 0x5104
	for (i = 0; *(s+i) != '\0'; i++);
    195c:	2e02e803 	cdpcs	8, 0, cr14, cr2, cr3, {0}
	while ((Boolean)(*d++ = *s++));
    1960:	04470205 	strbeq	r0, [r7], #-517	; 0xfffffdfb
    1964:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1968:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
}
    196c:	06030501 	streq	r0, [r3], -r1, lsl #10
	while (n-- && (*s != '\0'))
    1970:	2002e803 	andcs	lr, r2, r3, lsl #16
    1974:	01064105 	tsteq	r6, r5, lsl #2
	*d = '\0';
    1978:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	while (n-- && (*s != '\0'))
    197c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1980:	06010602 	streq	r0, [r1], -r2, lsl #12
		*d++ = *s++;
    1984:	05030426 	streq	r0, [r3, #-1062]	; 0xfffffbda
    1988:	78d90303 	ldmvc	r9, {r0, r1, r8, r9}^
	while (n--)
    198c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1990:	a8030601 	stmdage	r3, {r0, r9, sl}
		*dest++ = *src++;
    1994:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1998:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    199c:	02050018 	andeq	r0, r5, #24
	while (n--)
    19a0:	00001108 	andeq	r1, r0, r8, lsl #2
}
    19a4:	0107c503 	tsteq	r7, r3, lsl #10
		*dest++ = c;
    19a8:	01050704 	tsteq	r5, r4, lsl #14
void adddevfunc (devreqfun_t rf, int loc) {
    19ac:	0178bb03 	cmneq	r8, r3, lsl #22
		syserror (EREQPAR, "addv");
    19b0:	18050104 	stmdane	r5, {r2, r8}
		syserror (ERESOURCE, "addv");
    19b4:	07c50306 	strbeq	r0, [r5, r6, lsl #6]
	if (ioreq [loc] != NULL)
    19b8:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
    19bc:	78bb0305 	ldmvc	fp!, {r0, r2, r8, r9}
		syserror (ERESOURCE, "addv");
    19c0:	2e040520 	cfsh32cs	mvfx0, mvfx4, #16
	ioreq [loc] = rf;
    19c4:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
}
    19c8:	0101013d 	tsteq	r1, sp, lsr r1
    19cc:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
sint io (word retry, word dev, word operation, char *buf, word len) {
    19d0:	4a582e66 	bmi	160d370 <__ccfg+0x15ed3c8>
    19d4:	01132e01 	tsteq	r3, r1, lsl #28
    19d8:	05080458 	streq	r0, [r8, #-1112]	; 0xfffffba8
    19dc:	05050f01 	streq	r0, [r5, #-3841]	; 0xfffff0ff
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    19e0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    19e4:	06020520 	streq	r0, [r2], -r0, lsr #10
    19e8:	0101013d 	tsteq	r1, sp, lsr r1
		syserror (ENODEVICE, "io");
    19ec:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
    19f0:	4a582e66 	bmi	160d390 <__ccfg+0x15ed3e8>
	if (len == 0)
    19f4:	2f132e01 	svccs	0x00132e01
	ret = (ioreq [dev]) (operation, buf, len);
    19f8:	01045801 	tsteq	r4, r1, lsl #16
    19fc:	03060105 	movweq	r0, #24837	; 0x6105
	if (ret >= 0)
    1a00:	020107d0 	andeq	r0, r1, #208, 14	; 0x3400000
	if (ret == -1) {
    1a04:	0101000b 	tsteq	r1, fp
    1a08:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
		if (retry == WNONE)
    1a0c:	0011ac02 	andseq	sl, r1, r2, lsl #24
		iowait (dev, operation, retry);
    1a10:	08800300 	stmeq	r0, {r8, r9}
    1a14:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1a18:	10061505 	andne	r1, r6, r5, lsl #10
			release;
    1a1c:	1e320205 	cdpne	2, 3, cr0, cr2, cr5, {0}
	if (ret == -2) {
    1a20:	59593e06 	ldmdbpl	r9, {r1, r2, r9, sl, fp, ip, sp}^
		if (retry != WNONE) {
    1a24:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
    1a28:	7ca70305 	stcvc	3, cr0, [r7], #20
			iowait (dev, operation, retry);
    1a2c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1a30:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			(ioreq [dev]) (NONE, buf, len);
    1a34:	7dc5030b 	stclvc	3, cr0, [r5, #44]	; 0x2c
    1a38:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    1a3c:	02bb0331 	adcseq	r0, fp, #-1006632960	; 0xc4000000
		(ioreq [dev]) (NONE, buf, len);
    1a40:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1a44:	7dc80332 	stclvc	3, cr0, [r8, #200]	; 0xc8
    1a48:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
}
    1a4c:	029b0305 	addseq	r0, fp, #335544320	; 0x14000000
	if (retry != WNONE) {
    1a50:	032d052e 			; <UNDEFINED> instruction: 0x032d052e
		delay (-ret - 2, retry);
    1a54:	032e7ecc 			; <UNDEFINED> instruction: 0x032e7ecc
    1a58:	09042e4a 	stmdbeq	r4, {r1, r3, r6, r9, sl, fp, sp}
    1a5c:	87033105 	strhi	r3, [r3, -r5, lsl #2]
    1a60:	01042e02 	tsteq	r4, r2, lsl #28
		release;
    1a64:	03060205 	movweq	r0, #25093	; 0x6205
    1a68:	032003dc 			; <UNDEFINED> instruction: 0x032003dc
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a6c:	140179e7 	strne	r7, [r1], #-2535	; 0xfffff619
    1a70:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
    1a74:	03050112 	movweq	r0, #20754	; 0x5112
    1a78:	06150514 			; <UNDEFINED> instruction: 0x06150514
    1a7c:	2c3d0501 	cfldr32cs	mvfx0, [sp], #-4
		syserror (ERESOURCE, "mal1");
    1a80:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    1a84:	052f0603 	streq	r0, [pc, #-1539]!	; 1489 <__pi_release+0x101>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a88:	05580632 	ldrbeq	r0, [r8, #-1586]	; 0xfffff9ce
    1a8c:	03052e21 	movweq	r2, #24097	; 0x5e21
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a90:	06052f06 	streq	r2, [r5], -r6, lsl #30
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a94:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a98:	04042206 	streq	r2, [r4], #-518	; 0xfffffdfa
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a9c:	91032905 	tstls	r3, r5, lsl #18
    1aa0:	3d050102 	stfccs	f0, [r5, #-8]
}
    1aa4:	17050514 	smladne	r5, r4, r5, r0
    1aa8:	3c063805 	stccc	8, cr3, [r6], {5}
    1aac:	03050104 	movweq	r0, #20740	; 0x5104
    1ab0:	7de90306 	stclvc	3, cr0, [r9, #24]!
    1ab4:	06060520 	streq	r0, [r6], -r0, lsr #10
    1ab8:	0604052e 	streq	r0, [r4], -lr, lsr #10
void __pi_free (aword *ch) {
    1abc:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1ac0:	01270329 			; <UNDEFINED> instruction: 0x01270329
    1ac4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		syserror (EMALLOC, "malg");
    1ac8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1acc:	06040501 	streq	r0, [r4], -r1, lsl #10
	mcfree [MA_NP] += m_size (ch);
    1ad0:	043c5603 	ldrteq	r5, [ip], #-1539	; 0xfffff9fd
		m_size (ch) ^= MALLOC_UMASK;
    1ad4:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1ad8:	050100db 	streq	r0, [r1, #-219]	; 0xffffff25
	mcfree [MA_NP] += m_size (ch);
    1adc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	QFREE;
    1ae0:	01040106 	tsteq	r4, r6, lsl #2
	if (mevent [MA_NP] . nwait) {
    1ae4:	03063c05 	movweq	r3, #27653	; 0x6c05
    1ae8:	052e7f96 	streq	r7, [lr, #-3990]!	; 0xfffff06a
		trigger ((aword)(&(mevent [MA_NP])));
    1aec:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
		mevent [MA_NP] . nwait --;
    1af0:	03060106 	movweq	r0, #24838	; 0x6106
}
    1af4:	012e069a 			; <UNDEFINED> instruction: 0x012e069a
    1af8:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1afc:	7a950329 	bvc	fe5427a8 <_estack+0xde53d7a8>
    1b00:	17050501 	strne	r0, [r5, -r1, lsl #10]
void kill (aword pid) {
    1b04:	01062d05 	tsteq	r6, r5, lsl #26
		pid = (aword) __pi_curr;
    1b08:	02050104 	andeq	r0, r5, #4, 2
	j = NULL;
    1b0c:	3c05e603 	stccc	6, cr14, [r5], {3}
	for_all_tasks (i) {
    1b10:	2d050404 	cfstrscs	mvf0, [r5, #-16]
	syserror (EREQPAR, "kpi");
    1b14:	207a9a03 	rsbscs	r9, sl, r3, lsl #20
    1b18:	02050104 	andeq	r0, r5, #4, 2
		if ((aword)i == pid) {
    1b1c:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
    1b20:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
				__PCB = i->Next;
    1b24:	7a950329 	bvc	fe5427d0 <_estack+0xde53d7d0>
			killev (i);
    1b28:	17050501 	strne	r0, [r5, -r1, lsl #10]
			ufree (i);
    1b2c:	01062d05 	tsteq	r6, r5, lsl #26
			if (i == __pi_curr)
    1b30:	02050104 	andeq	r0, r5, #4, 2
    1b34:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
				release;
    1b38:	01010120 	tsteq	r1, r0, lsr #2
				j->Next = i->Next;
    1b3c:	66010101 	strvs	r0, [r1], -r1, lsl #2
    1b40:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
    1b44:	03290504 			; <UNDEFINED> instruction: 0x03290504
}
    1b48:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
    1b4c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1b50:	01040106 	tsteq	r4, r6, lsl #2
	if (size < 8)
    1b54:	b0030205 	andlt	r0, r3, r5, lsl #4
		_size = 2;
    1b58:	04042005 	streq	r2, [r4], #-5
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b5c:	d0032d05 	andle	r2, r3, r5, lsl #26
		_size = (((aword)size) + 3) >> 2;
    1b60:	0104207a 	tsteq	r4, sl, ror r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b64:	03060205 	movweq	r0, #25093	; 0x6205
		_size = (((aword)size) + 3) >> 2;
    1b68:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
		if (mevent [MA_NP] . nfail != 255)
    1b6c:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1b70:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
			mevent [MA_NP] . nfail ++;
    1b74:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		mnfree [MA_NP] = 0;
    1b78:	01040106 	tsteq	r4, r6, lsl #2
    1b7c:	03060205 	movweq	r0, #25093	; 0x6205
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b80:	012005b0 			; <UNDEFINED> instruction: 0x012005b0
    1b84:	01010101 	tsteq	r1, r1, lsl #2
			syserror (EMALLOC, "malc");
    1b88:	06230501 	strteq	r0, [r3], -r1, lsl #10
    1b8c:	05011003 	streq	r1, [r1, #-3]
		if (m_size (chunk) >= _size)
    1b90:	20700302 	rsbscs	r0, r0, r2, lsl #6
    1b94:	2e015806 	cdpcs	8, 0, cr5, cr1, cr6, {0}
		chunk = m_nextp (chunk)) {
    1b98:	04010d03 	streq	r0, [r1], #-3331	; 0xfffff2fd
		m_setnextp (cc, m_nextp (chunk));
    1b9c:	0305050a 	movweq	r0, #21770	; 0x550a
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ba0:	05017ecd 	streq	r7, [r1, #-3789]	; 0xfffff133
    1ba4:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
			m_size (chunk) = _size;
    1ba8:	03270501 			; <UNDEFINED> instruction: 0x03270501
			cc = chunk + _size + m_hdrlen;
    1bac:	042001ba 	strteq	r0, [r0], #-442	; 0xfffffe46
    1bb0:	032f050a 			; <UNDEFINED> instruction: 0x032f050a
			m_size (cc) = waste - m_hdrlen;
    1bb4:	04207ec6 	strteq	r7, [r0], #-3782	; 0xfffff13a
			QFREE;
    1bb8:	06020501 	streq	r0, [r2], -r1, lsl #10
		mevent [MA_NP] . nfail = 0;
    1bbc:	2001b503 	andcs	fp, r1, r3, lsl #10
		mcfree [MA_NP] -= m_size (chunk);
    1bc0:	13062305 	movwne	r2, #25349	; 0x6305
    1bc4:	0c030205 	sfmeq	f0, 4, [r3], {5}
    1bc8:	03230520 			; <UNDEFINED> instruction: 0x03230520
    1bcc:	02052074 	andeq	r2, r5, #116	; 0x74
		m_size (chunk) |= MALLOC_UMASK;
    1bd0:	27052406 	strcs	r2, [r5, -r6, lsl #8]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bd4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		m_size (chunk) |= MALLOC_UMASK;
    1bd8:	03270528 			; <UNDEFINED> instruction: 0x03270528
			mnfree [MA_NP] = mcfree [MA_NP];
    1bdc:	02052078 	andeq	r2, r5, #120	; 0x78
}
    1be0:	313f2806 	teqcc	pc, r6, lsl #16
    1be4:	404a0a03 	submi	r0, sl, r3, lsl #20
    1be8:	017dc003 	cmneq	sp, r3
    1bec:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
    1bf0:	03050509 	movweq	r0, #21769	; 0x5509
    1bf4:	04017eae 	streq	r7, [r1], #-3758	; 0xfffff152
    1bf8:	060d0501 	streq	r0, [sp], -r1, lsl #10
aword __pi_fork (fsmcode func, aword data) {
    1bfc:	0101d403 	tsteq	r1, r3, lsl #8
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c00:	31050904 	tstcc	r5, r4, lsl #18
    1c04:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    1c08:	02050104 	andeq	r0, r5, #4, 2
		if ((j = __PCB) == NULL)
    1c0c:	01d40306 	bicseq	r0, r4, r6, lsl #6
	i->Next = NULL;
    1c10:	060d0520 	streq	r0, [sp], -r0, lsr #10
	i->data = data;
    1c14:	06020501 	streq	r0, [r2], -r1, lsl #10
		if ((j = __PCB) == NULL)
    1c18:	02c70322 	sbceq	r0, r7, #-2013265920	; 0x88000000
}
    1c1c:	2e2e012e 	sufcsep	f0, f6, #0.5
			for (; j->Next != NULL; j = j->Next);
    1c20:	06060515 			; <UNDEFINED> instruction: 0x06060515
    1c24:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
	return (aword) i;
    1c28:	30060305 	andcc	r0, r6, r5, lsl #6
    1c2c:	05050b04 	streq	r0, [r5, #-2820]	; 0xfffff4fc
	if (mevent [MA_NP] . nwait != 255)
    1c30:	0179c303 	cmneq	r9, r3, lsl #6
    1c34:	5e030c04 	cdppl	12, 0, cr0, cr3, cr4, {0}
    1c38:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		mevent [MA_NP] . nwait ++;
    1c3c:	050b0401 	streq	r0, [fp, #-1025]	; 0xfffffbff
	wait ((aword)(&(mevent [MA_NP])), state);
    1c40:	23030605 	movwcs	r0, #13829	; 0x3605
    1c44:	0634052e 	ldrteq	r0, [r4], -lr, lsr #10
void diag (const char *mess, ...) {
    1c48:	06050501 	streq	r0, [r5], -r1, lsl #10
    1c4c:	0501044b 	streq	r0, [r1, #-1099]	; 0xfffffbb5
    1c50:	06d50315 			; <UNDEFINED> instruction: 0x06d50315
	diag_disable_int (a, is);
    1c54:	1303054a 	movwne	r0, #13642	; 0x354a
    1c58:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
    1c5c:	02053a15 	andeq	r3, r5, #86016	; 0x15000
				d = (bc == 16) ? 10000 : 1000000000;
    1c60:	7ecb0319 	mcrvc	3, 6, r0, cr11, cr9, {0}
	diag_disable_int (a, is);
    1c64:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
	while (*mess != '\0') {
    1c68:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
	dgout ('\r');
    1c6c:	17050501 	strne	r0, [r5, -r1, lsl #10]
	dgout ('\n');
    1c70:	01062305 	tsteq	r6, r5, lsl #6
    1c74:	02050104 	andeq	r0, r5, #4, 2
    1c78:	2002dd03 	andcs	sp, r2, r3, lsl #26
	diag_wait (a);
    1c7c:	23050604 	movwcs	r0, #22020	; 0x5604
	diag_enable_int (a, is);
    1c80:	207da303 	rsbscs	sl, sp, r3, lsl #6
    1c84:	02050104 	andeq	r0, r5, #4, 2
}
    1c88:	02dd0306 	sbcseq	r0, sp, #402653184	; 0x18000000
    1c8c:	01054e4a 	tsteq	r5, sl, asr #28
    1c90:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
		if (*mess == '%') {
    1c94:	0603052d 	streq	r0, [r3], -sp, lsr #10
    1c98:	412e5f03 			; <UNDEFINED> instruction: 0x412e5f03
			if (*mess == 'l') {
    1c9c:	06040541 	streq	r0, [r4], -r1, asr #10
    1ca0:	1f030513 	svcne	0x00030513
				mess++;
    1ca4:	01002f02 	tsteq	r0, r2, lsl #30
				val = va_arg (ap, lword);
    1ca8:	001f0501 	andseq	r0, pc, r1, lsl #10
				bc = 32;
    1cac:	13640205 	cmnne	r4, #1342177280	; 0x50000000
				bc = 16;
    1cb0:	fd030000 	stc2	0, cr0, [r3, #-0]
			switch (*mess) {
    1cb4:	02050108 	andeq	r0, r5, #8, 2
    1cb8:	2c051617 	stccs	6, cr1, [r5], {23}
    1cbc:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
				dgout ('%');
    1cc0:	202c0566 	eorcs	r0, ip, r6, ror #10
    1cc4:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
				dgout (*mess);
    1cc8:	15052112 	strne	r2, [r5, #-274]	; 0xfffffeee
    1ccc:	01054a1f 	tsteq	r5, pc, lsl sl
			switch (*mess) {
    1cd0:	00030223 	andeq	r0, r3, r3, lsr #4
					v = __pi_hex_enc_table [
    1cd4:	1c050101 	stfnes	f0, [r5], {1}
					i += 4;
    1cd8:	00020500 	andeq	r0, r2, r0, lsl #10
					(val >> (bc - i)) & 0xf];
    1cdc:	03000000 	movweq	r0, #0
    1ce0:	05010adb 	streq	r0, [r1, #-2779]	; 0xfffff525
					dgout (v);
    1ce4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1ce8:	1c05010f 	stfnes	f0, [r5], {15}
				while (i < bc) {
    1cec:	06050e06 	streq	r0, [r5], -r6, lsl #28
			mess++;
    1cf0:	20070525 	andcs	r0, r7, r5, lsr #10
					d /= 10;
    1cf4:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
				if ((val >> (bc - 1)) & 1) {
    1cf8:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
    1cfc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
					dgout ('-');
    1d00:	052d0631 	streq	r0, [sp, #-1585]!	; 0xfffff9cf
    1d04:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
						val |= 0xffff0000;
    1d08:	4d062006 	stcmi	0, cr2, [r6, #-24]	; 0xffffffe8
    1d0c:	13060105 	movwne	r0, #24837	; 0x6105
    1d10:	01000402 	tsteq	r0, r2, lsl #8
				d = (bc == 16) ? 10000 : 1000000000;
    1d14:	00310501 	eorseq	r0, r1, r1, lsl #10
    1d18:	13880205 	orrne	r0, r8, #1342177280	; 0x50000000
    1d1c:	e7030000 	str	r0, [r3, -r0]
					v = (word) (val / d);
    1d20:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
					if (v || d == 1) break;
    1d24:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1d28:	77b20303 	ldrvc	r0, [r2, r3, lsl #6]!
					d /= 10;
    1d2c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	cc030631 	stcgt	6, cr0, [r3], {49}	; 0x31
					dgout (v + '0');
    1d34:	03040108 	movweq	r0, #16648	; 0x4108
    1d38:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
    1d3c:	01043c77 	tsteq	r4, r7, ror ip
					d /= 10;
    1d40:	cc033105 	stfgts	f3, [r3], {5}
					val = val - (v * d);
    1d44:	03042008 	movweq	r2, #16392	; 0x4008
					if (d == 0) break;
    1d48:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
					v = (word) (val / d);
    1d4c:	01042077 	tsteq	r4, r7, ror r0
    1d50:	03060205 	movweq	r0, #25093	; 0x6205
				if (bc == 16)
    1d54:	012e08d0 	ldrdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
				d = (bc == 16) ? 10000 : 1000000000;
    1d58:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
					val &= 0xffff;
    1d5c:	76dd0306 	ldrbvc	r0, [sp], r6, lsl #6
					dgout (*s);
    1d60:	05010466 	streq	r0, [r1, #-1126]	; 0xfffffb9a
					s++;
    1d64:	a3030602 	movwge	r0, #13826	; 0x3602
				while (*s != '\0') {
    1d68:	0d042009 	stceq	0, cr2, [r4, #-36]	; 0xffffffdc
    1d6c:	01759b03 	cmneq	r5, r3, lsl #22
			dgout (*mess++);
    1d70:	5b190101 	blpl	64217c <__ccfg+0x6221d4>
    1d74:	0501044a 	streq	r0, [r1, #-1098]	; 0xfffffbb6
    1d78:	9d03061a 	stcls	6, cr0, [r3, #-104]	; 0xffffff98
    1d7c:	0d042e09 	stceq	14, cr2, [r4, #-36]	; 0xffffffdc
    1d80:	03060205 	movweq	r0, #25093	; 0x6205
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d84:	012076f9 	strdeq	r7, [r0, -r9]!
    1d88:	01010101 	tsteq	r1, r1, lsl #2
    1d8c:	03050304 	movweq	r0, #21252	; 0x5304
    1d90:	04013603 	streq	r3, [r1], #-1539	; 0xfffff9fd
	^ entropy
    1d94:	0302050d 	movweq	r0, #9485	; 0x250d
}
    1d98:	0482204a 	streq	r2, [r2], #74	; 0x4a
    1d9c:	08eb0301 	stmiaeq	fp!, {r0, r8, r9}^
    1da0:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    1da4:	06020501 	streq	r0, [r2], -r1, lsl #10
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1da8:	0615054c 	ldreq	r0, [r5], -ip, asr #10
	word cs = size + hblenb;
    1dac:	20020501 	andcs	r0, r2, r1, lsl #10
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1db0:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    1db4:	04052002 	streq	r2, [r5], #-2
	p -> length = size;
    1db8:	04216a06 	strteq	r6, [r1], #-2566	; 0xfffff5fa
}
    1dbc:	0302050d 	movweq	r0, #9485	; 0x250d
	if (p->attributes.b.queued) {
    1dc0:	0401778e 	streq	r7, [r1], #-1934	; 0xfffff872
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1dc4:	03030503 	movweq	r0, #13571	; 0x3503
    1dc8:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1dcc:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
		p->attributes.b.queued = 0;
    1dd0:	04202020 	strteq	r2, [r0], #-32	; 0xffffffe0
    1dd4:	0ac50301 	beq	ff1429e0 <_estack+0xdf13d9e0>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1dd8:	050d0420 	streq	r0, [sp, #-1056]	; 0xfffffbe0
	deq (p);	// Remove from queue
    1ddc:	75a60303 	strvc	r0, [r6, #771]!	; 0x303
}
    1de0:	0610054a 	ldreq	r0, [r0], -sl, asr #10
	tfree ((address)p);
    1de4:	20060501 	andcs	r0, r6, r1, lsl #10
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1de8:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
    1dec:	0405201f 	streq	r2, [r5], #-31	; 0xffffffe1
    1df0:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1df4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1df8:	02052f06 	andeq	r2, r5, #6, 30
	if (q_empty (q))
    1dfc:	0501041c 	streq	r0, [r1, #-1052]	; 0xfffffbe4
    1e00:	098f0304 	stmibeq	pc, {r2, r8, r9}	; <UNPREDICTABLE>
		trigger (q);
    1e04:	062a052e 	strteq	r0, [sl], -lr, lsr #10
	if (p->attributes.b.urgent) {
    1e08:	27040501 	strcs	r0, [r4, -r1, lsl #10]
		p->u.bqueue.next = q->next;
    1e0c:	79032a05 	stmdbvc	r3, {r0, r2, r9, fp, sp}
		p->u.bqueue.prev = q;
    1e10:	06040520 	streq	r0, [r4], -r0, lsr #10
		q->next->prev = (qitem_t*) p;
    1e14:	0309044e 	movweq	r0, #37966	; 0x944e
	p->attributes.b.queued = 1;
    1e18:	05017fb2 	streq	r7, [r1, #-4018]	; 0xfffff04e
    1e1c:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
}
    1e20:	06040501 	streq	r0, [r4], -r1, lsl #10
		p->u.bqueue.prev = q->prev;
    1e24:	6600d103 	strvs	sp, [r0], -r3, lsl #2
		q->prev->next = (qitem_t*) p;
    1e28:	0502044d 	streq	r0, [r2, #-1101]	; 0xfffffbb3
		q->prev = (qitem_t*) p;
    1e2c:	789f0305 	ldmvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
    1e30:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1e34:	07e50304 	strbeq	r0, [r5, r4, lsl #6]!
	deq (p);	// Soft dequeue, timer and hook left intact
    1e38:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
	switch (dv) {
    1e3c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1e40:	1a05214b 	bne	14a374 <__ccfg+0x12a3cc>
    1e44:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1e48:	02044d06 	andeq	r4, r4, #384	; 0x180
			p->attributes.b.urgent = 1;
    1e4c:	96030505 	strls	r0, [r3], -r5, lsl #10
    1e50:	01050178 	tsteq	r5, r8, ror r1
			verify_ses (p, "dispose ses");
    1e54:	01042106 	tsteq	r4, r6, lsl #2
    1e58:	03060405 	movweq	r0, #25605	; 0x6405
    1e5c:	042007f1 	strteq	r0, [r0], #-2033	; 0xfffff80f
    1e60:	0305050c 	movweq	r0, #21772	; 0x550c
    1e64:	040178a0 	streq	r7, [r1], #-2208	; 0xfffff760
			verify_phy (p, "dispose phy");
    1e68:	06310509 	ldrteq	r0, [r1], -r9, lsl #10
    1e6c:	0102d403 	tsteq	r2, r3, lsl #8
}
    1e70:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
			enq (oqueues [p->attributes.b.phys], p);
    1e74:	2e7dac03 	cdpcs	12, 7, cr10, cr13, cr3, {0}
			p->attributes.b.urgent = 1;
    1e78:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
    1e7c:	2e028803 	cdpcs	8, 0, cr8, cr2, cr3, {0}
			verify_phy (p, "dispose phy");
    1e80:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
    1e84:	2e7df803 	cdpcs	8, 7, cr15, cr13, cr3, {0}
    1e88:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1e8c:	07e50306 	strbeq	r0, [r5, r6, lsl #6]!
    1e90:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    1e94:	7aa00331 	bvc	fe802b60 <_estack+0xde7fdb60>
			enq (oqueues [p->attributes.b.phys], p);
    1e98:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    1e9c:	01065205 	tsteq	r6, r5, lsl #4
}
    1ea0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
			rlp (p);
    1ea4:	2005e503 	andcs	lr, r5, r3, lsl #10
}
    1ea8:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
    1eac:	2e7a9b03 	vaddcs.f64	d25, d10, d3
    1eb0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1eb4:	05e00306 	strbeq	r0, [r0, #774]!	; 0x306
    1eb8:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    1ebc:	78860305 	stmvc	r6, {r0, r2, r8, r9}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1ec0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (b->attributes.b.outgoing) {
    1ec4:	07fc0304 	ldrbeq	r0, [ip, r4, lsl #6]!
	b = header (p);
    1ec8:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
	if (b->attributes.b.outgoing) {
    1ecc:	7aea0305 	bvc	ffa82ae8 <_estack+0xdfa7dae8>
		verify_ses (b, "tcv02");
    1ed0:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1ed4:	03290501 			; <UNDEFINED> instruction: 0x03290501
    1ed8:	052004b6 	streq	r0, [r0, #-1206]!	; 0xfffffb4a
    1edc:	7bca0331 	blvc	ff282ba8 <_estack+0xdf27dba8>
    1ee0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
		verify_plg (b, tcv_out, "tcv03");
    1ee4:	99030604 	stmdbls	r3, {r2, r9, sl}
    1ee8:	23052e05 	movwcs	r2, #24069	; 0x5e05
    1eec:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1ef0:	046a0620 	strbteq	r0, [sl], #-1568	; 0xfffff9e0
    1ef4:	03050509 	movweq	r0, #21769	; 0x5509
    1ef8:	0501799f 	streq	r7, [r1, #-2463]	; 0xfffff661
    1efc:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    1f00:	03040501 	movweq	r0, #17665	; 0x4501
    1f04:	042006ed 	strteq	r0, [r0], #-1773	; 0xfffff913
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f08:	033f0509 	teqeq	pc, #37748736	; 0x2400000
}
    1f0c:	04207993 	strteq	r7, [r0], #-2451	; 0xfffff66d
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f10:	06040501 	streq	r0, [r4], -r1, lsl #10
		rlp (b);
    1f14:	2e06ea03 	vmlacs.f32	s28, s12, s6
}
    1f18:	90030904 	andls	r0, r3, r4, lsl #18
		rlp (b);
    1f1c:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
    1f20:	01040106 	tsteq	r4, r6, lsl #2
    1f24:	f3030405 	vshl.u8	d0, d5, d3
    1f28:	09042e00 	stmdbeq	r4, {r9, sl, fp, sp}
    1f2c:	8d032905 	vstrhi.16	s4, [r3, #-10]	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f30:	0104207f 	tsteq	r4, pc, ror r0
    1f34:	03060405 	movweq	r0, #25605	; 0x6405
    1f38:	4d4a00f3 	stclmi	0, cr0, [sl, #-972]	; 0xfffffc34
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f3c:	05020440 	streq	r0, [r2, #-1088]	; 0xfffffbc0
	va_start (ap, plid);
    1f40:	77ea0305 	strbvc	r0, [sl, r5, lsl #6]!
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f44:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1f48:	08990304 	ldmeq	r9, {r2, r8, r9}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1f4c:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    1f50:	06040501 	streq	r0, [r4], -r1, lsl #10
    1f54:	1a05214b 	bne	14a488 <__ccfg+0x12a4e0>
    1f58:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			syserror (ENODEVICE, "tcv04");
    1f5c:	1d1a0523 	cfldr32ne	mvfx0, [sl, #-140]	; 0xffffff74
		syserror (EMALLOC, "tcv05");
    1f60:	3f060405 	svccc	0x00060405
	attp.b.outgoing = 1;
    1f64:	03090459 	movweq	r0, #37977	; 0x9459
    1f68:	05017eee 	streq	r7, [r1, #-3822]	; 0xfffff112
    1f6c:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1f70:	030d050e 	movweq	r0, #54542	; 0xd50e
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f74:	042e7bdb 	strteq	r7, [lr], #-3035	; 0xfffff425
		if (descriptors [fd] == NULL)
    1f78:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1f7c:	042004a5 	strteq	r0, [r0], #-1189	; 0xfffffb5b
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f80:	06040501 	streq	r0, [r4], -r1, lsl #10
		return ERROR;
    1f84:	4a019703 	bmi	67b98 <__ccfg+0x47bf0>
}
    1f88:	31050e04 	tstcc	r5, r4, lsl #28
    1f8c:	0179f303 	cmneq	r9, r3, lsl #6	; <UNPREDICTABLE>
    1f90:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
	s->attpattern.b.session = fd;
    1f94:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
    1f98:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
	descriptors [fd] = s;
    1f9c:	2e068c03 	cdpcs	12, 0, cr8, cr6, cr3, {0}
	q_init (&(s->rqueue));
    1fa0:	04110a05 	ldreq	r0, [r1], #-2565	; 0xfffff5fb
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1fa4:	0305050e 	movweq	r0, #21774	; 0x550e
    1fa8:	05017ac3 	streq	r7, [r1, #-2755]	; 0xfffff53d
    1fac:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    1fb0:	030a0501 	movweq	r0, #42241	; 0xa501
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1fb4:	052005bd 	streq	r0, [r0, #-1469]!	; 0xfffffa43
    1fb8:	59320604 	ldmdbpl	r2!, {r2, r9, sl}
    1fbc:	01060b05 	tsteq	r6, r5, lsl #22
	descriptors [fd] = s;
    1fc0:	21061a05 	tstcs	r6, r5, lsl #20
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1fc4:	05110a05 	ldreq	r0, [r1, #-2565]	; 0xfffff5fb
    1fc8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	if (s == NULL)
    1fcc:	0405580a 	streq	r5, [r5], #-2058	; 0xfffff7f6
		syserror (EMALLOC, "tcv05");
    1fd0:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
    1fd4:	b8030505 	stmdalt	r3, {r0, r2, r8, sl}
    1fd8:	3105017a 	tstcc	r5, sl, ror r1
    1fdc:	3f050106 	svccc	0x00050106
    1fe0:	207ebc03 	rsbscs	fp, lr, r3, lsl #24
    1fe4:	c4033105 	strgt	r3, [r3], #-261	; 0xfffffefb
    1fe8:	01042001 	tsteq	r4, r1
    1fec:	03060405 	movweq	r0, #25605	; 0x6405
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ff0:	042005cb 	strteq	r0, [r0], #-1483	; 0xfffffa35
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ff4:	03050509 	movweq	r0, #21769	; 0x5509
    1ff8:	050178f1 	streq	r7, [r1, #-2289]	; 0xfffff70f
    1ffc:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
	plugins [ord] = pl;
    2000:	06040501 	streq	r0, [r4], -r1, lsl #10
	return 0;
    2004:	2e079203 	cdpcs	2, 0, cr9, cr7, cr3, {0}
		return ERROR;
    2008:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
}
    200c:	0177f503 	cmneq	r7, r3, lsl #10	; <UNPREDICTABLE>
    2010:	01062e05 	tsteq	r6, r5, lsl #28
	verify_fds (fd, "tcv10");
    2014:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2018:	088e0306 	stmeq	lr, {r1, r2, r8, r9}
	verify_fds (fd, "tcv10");
    201c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    2020:	77c90305 	strbvc	r0, [r9, r5, lsl #6]
    2024:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	verify_plg (b, tcv_frm, "tcv11");
    2028:	08ba0304 	ldmeq	sl!, {r2, r8, r9}
	b = q_first (rq);
    202c:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
	if (q_end (b, rq)) {
    2030:	0302052f 	movweq	r0, #9519	; 0x252f
		if (state != WNONE) {
    2034:	04017db0 	streq	r7, [r1], #-3504	; 0xfffff250
    2038:	03240506 			; <UNDEFINED> instruction: 0x03240506
			when (rq, state);
    203c:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
			release;
    2040:	23051705 	movwcs	r1, #22277	; 0x5705
	deq (b);	// Dequeue the packet ...
    2044:	01040106 	tsteq	r4, r6, lsl #2
    2048:	a8030105 	stmdage	r3, {r0, r2, r8}
	p = ((address)(b + 1));
    204c:	04055801 	streq	r5, [r5], #-2049	; 0xfffff7ff
	verify_plg (b, tcv_frm, "tcv11");
    2050:	02f00306 	rscseq	r0, r0, #402653184	; 0x18000000
    2054:	2c055b20 			; <UNDEFINED> instruction: 0x2c055b20
    2058:	32050106 	andcc	r0, r5, #-2147483647	; 0x80000001
    205c:	032c0527 			; <UNDEFINED> instruction: 0x032c0527
    2060:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    2064:	2d054c06 	stccs	12, cr4, [r5, #-24]	; 0xffffffe8
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2068:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    206c:	32055d06 	andcc	r5, r5, #384	; 0x180
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2070:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2074:	32053e06 	andcc	r3, r5, #6, 28	; 0x60
	b->u.pointers.tail =
    2078:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
    207c:	02042406 	andeq	r2, r4, #100663296	; 0x6000000
		return NULL;
    2080:	8b030505 	blhi	c349c <__ccfg+0xa34f4>
    2084:	01040177 	tsteq	r4, r7, ror r1
    2088:	f8030405 			; <UNDEFINED> instruction: 0xf8030405
    208c:	0e042008 	cdpeq	0, 0, cr2, cr4, cr8, {0}
    2090:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
	verify_fds (fd, "tcv16");
    2094:	2d05017a 	stfcss	f0, [r5, #-488]	; 0xfffffe18
								Boolean urg) {
    2098:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    209c:	4d053106 	stfmis	f3, [r5, #-24]	; 0xffffffe8
	verify_fds (fd, "tcv16");
    20a0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    20a4:	2e053d06 	cdpcs	13, 0, cr3, cr5, cr6, {0}
    20a8:	01040106 	tsteq	r4, r6, lsl #2
	verify_pld (s, tcv_frm, "tcv17");
    20ac:	03060405 	movweq	r0, #25605	; 0x6405
    20b0:	043c05f7 	ldrteq	r0, [ip], #-1527	; 0xfffffa09
    20b4:	03050502 	movweq	r0, #21762	; 0x5502
    20b8:	04017785 	streq	r7, [r1], #-1925	; 0xfffff87b
    20bc:	060d050e 	streq	r0, [sp], -lr, lsl #10
    20c0:	2002e803 	andcs	lr, r2, r3, lsl #16
    20c4:	39050104 	stmdbcc	r5, {r2, r8}
    20c8:	06960306 	ldreq	r0, [r6], r6, lsl #6
	ptrs.head = (word) fd;
    20cc:	010a0520 	tsteq	sl, r0, lsr #10
	ptrs.tail = (word) urg;
    20d0:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20d4:	0179ea03 	cmneq	r9, r3, lsl #20
    20d8:	01060d05 	tsteq	r6, r5, lsl #26
		if (state != WNONE) {
    20dc:	0a050104 	beq	1424f4 <__ccfg+0x12254c>
    20e0:	20069603 	andcs	r9, r6, r3, lsl #12
}
    20e4:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
			when (eid, state);
    20e8:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    20ec:	0177ec03 	cmneq	r7, r3, lsl #24
			release;
    20f0:	01064105 	tsteq	r6, r5, lsl #2
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    20f4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    20f8:	2e089703 	cdpcs	7, 0, cr9, cr8, cr3, {0}
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20fc:	41050904 	tstmi	r5, r4, lsl #18
    2100:	2077e903 	rsbscs	lr, r7, r3, lsl #18
    2104:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2108:	08970306 	ldmeq	r7, {r1, r2, r8, r9}
    210c:	0d045220 	sfmeq	f5, 4, [r4, #-128]	; 0xffffff80
    2110:	d1030205 	tstle	r3, r5, lsl #4
		if (state != WNONE) {
    2114:	014a2075 	hvceq	41477	; 0xa205
    2118:	03040101 	movweq	r0, #16641	; 0x4101
			tmwait (state);
    211c:	2b030305 	blcs	c2d38 <__ccfg+0xa2d90>
    2120:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
	b->attributes = s->attpattern;
    2124:	20550302 	subscs	r0, r5, r2, lsl #6
		b->attributes.b.urgent = 1;
    2128:	00370216 	eorseq	r0, r7, r6, lsl r2
    212c:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
	b->u.pointers.head = ptrs.head;
    2130:	e0020500 	and	r0, r2, r0, lsl #10
	b->u.pointers.tail = length;
    2134:	03000015 	movweq	r0, #21
	return (address) (b + 1);
    2138:	050100e1 	streq	r0, [r1, #-225]	; 0xffffff1f
    213c:	12051402 	andne	r1, r5, #33554432	; 0x2000000
    2140:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
    2144:	061f2122 	ldreq	r2, [pc], -r2, lsr #2
    2148:	3f4b2f21 	svccc	0x004b2f21
    214c:	01060805 	tsteq	r6, r5, lsl #16
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2150:	2f060205 	svccs	0x00060205
	if (len >= b->u.pointers.tail)
    2154:	01000802 	tsteq	r0, r2, lsl #16
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2158:	003a0501 	eorseq	r0, sl, r1, lsl #10
    215c:	00000205 	andeq	r0, r0, r5, lsl #4
	if (len > 0) {
    2160:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2164:	02050100 	andeq	r0, r5, #0, 2
    2168:	3a051414 	bcc	1471c0 <__ccfg+0x127218>
    216c:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
		b->u.pointers.tail -= len;
    2170:	3a052406 	bcc	14b190 <__ccfg+0x12b1e8>
    2174:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    2178:	3f060305 	svccc	0x00060305
		b->u.pointers.head += len;
    217c:	01060605 	tsteq	r6, r5, lsl #12
    2180:	30060405 	andcc	r0, r6, r5, lsl #8
    2184:	01061205 	tsteq	r6, r5, lsl #4
}
    2188:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    218c:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
    2190:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
    2194:	032f050f 			; <UNDEFINED> instruction: 0x032f050f
	verify_fph (phy, "tcv23");
    2198:	01042015 	tsteq	r4, r5, lsl r0
    219c:	6b030905 	blvs	c45b8 <__ccfg+0xa4610>
    21a0:	06030520 	streq	r0, [r3], -r0, lsr #10
    21a4:	050f0421 	streq	r0, [pc, #-1057]	; 1d8b <lrnd+0x7>
}
    21a8:	01140305 	tsteq	r4, r5, lsl #6
	return (physical [phy]) (opt, arg);
    21ac:	01062f05 	tsteq	r6, r5, lsl #30
    21b0:	01050104 	tsteq	r5, r4, lsl #2
    21b4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    21b8:	6f030604 	svcvs	0x00030604
	if (opt < 0) {
    21bc:	050f0420 	streq	r0, [pc, #-1056]	; 1da4 <lrnd+0x20>
		if (fd < 0)
    21c0:	00c30305 	sbceq	r0, r3, r5, lsl #6
		if (opt == PHYSOPT_PLUGINFO) {
    21c4:	18051401 	stmdane	r5, {r0, sl, ip}
			if (fd >= TCV_MAX_PLUGS)
    21c8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			if ((p = plugins [fd]) == NULL)
    21cc:	01043306 	tsteq	r4, r6, lsl #6
    21d0:	03060b05 	movweq	r0, #27397	; 0x6b05
}
    21d4:	05017fb6 	streq	r7, [r1, #-4022]	; 0xfffff04a
		if (fd >= TCV_MAX_PHYS)
    21d8:	04340603 	ldrteq	r0, [r4], #-1539	; 0xfffff9fd
		return physinfo [fd];
    21dc:	0e05050f 	cfsh32eq	mvfx0, mvfx5, #15
    21e0:	01062f05 	tsteq	r6, r5, lsl #30
	verify_fds (fd, "tcv22");
    21e4:	03050104 	movweq	r0, #20740	; 0x5104
    21e8:	06054106 	streq	r4, [r5], -r6, lsl #2
    21ec:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    21f0:	2b06053f 	blcs	1836f4 <__ccfg+0x16374c>
    21f4:	23060405 	movwcs	r0, #25605	; 0x6405
}
    21f8:	2203052f 	andcs	r0, r3, #197132288	; 0xbc00000
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21fc:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
    2200:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
			return 0;
    2204:	09022f21 	stmdbeq	r2, {r0, r5, r8, r9, sl, fp, sp}
    2208:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    220c:	02050011 	andeq	r0, r5, #17
    2210:	00001610 	andeq	r1, r0, r0, lsl r6
    2214:	010af103 	tsteq	sl, r3, lsl #2	; <UNPREDICTABLE>
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2218:	13160305 	tstne	r6, #335544320	; 0x14000000
    221c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
	if (dsp != TCV_DSP_PASS) {
    2220:	200d0611 	andcs	r0, sp, r1, lsl r6
		if (ses == NONE)
    2224:	05262505 	streq	r2, [r6, #-1285]!	; 0xfffffafb
			syserror (EREQPAR, "tcv26");
    2228:	04051f03 	streq	r1, [r5], #-3843	; 0xfffff0fd
		verify_fds (ses, "tcv27");
    222c:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
    2230:	37050106 	strcc	r0, [r5, -r6, lsl #2]
    2234:	0f052d06 	svceq	0x00052d06
    2238:	06030501 	streq	r0, [r3], -r1, lsl #10
    223c:	06020501 	streq	r0, [r2], -r1, lsl #10
		if ((p = apb (size)) != NULL) {
    2240:	03190632 	tsteq	r9, #52428800	; 0x3200000
    2244:	31062079 	tstcc	r6, r9, ror r0
		return NULL;
    2248:	055b5b32 	ldrbeq	r5, [fp, #-2866]	; 0xfffff4ce
			p->attributes = descriptors [ses] -> attpattern;
    224c:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
			dispose (p, dsp);
    2250:	02054a0c 	andeq	r4, r5, #12, 20	; 0xc000
			p->attributes = descriptors [ses] -> attpattern;
    2254:	1d0c0523 	cfstr32ne	mvfx0, [ip, #-140]	; 0xffffff74
			p->attributes.b.outgoing = 0;
    2258:	23060205 	movwcs	r0, #25093	; 0x6205
			dispose (p, dsp);
    225c:	0503043e 	streq	r0, [r3, #-1086]	; 0xfffffbc2
			return (address)(p + 1);
    2260:	75c50303 	strbvc	r0, [r5, #771]	; 0x303
    2264:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if ((p = apb (size)) != NULL)
    2268:	0abd0302 	beq	fef42e78 <_estack+0xdef3de78>
    226c:	000e0220 	andeq	r0, lr, r0, lsr #4
		return (address)(p + 1);
    2270:	0ee40101 	cdpeq	1, 14, cr0, cr4, cr1, {0}
    2274:	00030000 	andeq	r0, r3, r0
    2278:	00000194 	muleq	r0, r4, r1
    227c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2280:	0101000d 	tsteq	r1, sp
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2284:	00000101 	andeq	r0, r0, r1, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2288:	00000100 	andeq	r0, r0, r0, lsl #2
    228c:	6f682f01 	svcvs	0x00682f01
		syserror (EREQPAR, "tcv28");
    2290:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		syserror (EMALLOC, "tcv29");
    2294:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	physical [phy] = ps;
    2298:	442f6e65 	strtmi	r6, [pc], #-3685	; 22a0 <tcvphy_reg+0x20>
	physinfo [phy] = info;
    229c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    22a0:	4f2f706f 	svcmi	0x002f706f
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    22a8:	502f5445 	eorpl	r5, pc, r5, asr #8
    22ac:	534f4349 	movtpl	r4, #62281	; 0xf349
		syserror (EMALLOC, "tcv29");
    22b0:	6369502f 	cmnvs	r9, #47	; 0x2f
    22b4:	6b2f534f 	blvs	bd6ff8 <__ccfg+0xbb7050>
	q_init (q);
    22b8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
}
    22bc:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    22c0:	2f656d6f 	svccs	0x00656d6f
    22c4:	70657473 	rsbvc	r7, r5, r3, ror r4
    22c8:	2f6e6568 	svccs	0x006e6568
    22cc:	6b736544 	blvs	1cdb7e4 <__ccfg+0x1cbb83c>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d0:	2f706f74 	svccs	0x00706f74
	verify_fph (phy, "tcv30");
    22d4:	4f534c4f 	svcmi	0x00534c4f
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d8:	2f54454e 	svccs	0x0054454e
    22dc:	4f434950 	svcmi	0x00434950
	verify_fph (phy, "tcv30");
    22e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    22e4:	2f534f63 	svccs	0x00534f63
    22e8:	33314343 	teqcc	r1, #201326593	; 0xc000001
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22ec:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    22f0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22f4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    22f8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		if (plugins [plg] == NULL)
    22fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2300:	0062696c 	rsbeq	r6, r2, ip, ror #18
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2304:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
}
    2308:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    230c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2310:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2314:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2318:	61652d65 	cmnvs	r5, r5, ror #26
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    231c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    2320:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    2324:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2328:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    232c:	6f682f00 	svcvs	0x00682f00
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2330:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	len -= (ap.head + ap.tail);
    2334:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2338:	442f6e65 	strtmi	r6, [pc], #-3685	; 2340 <tcvphy_rcv+0x70>
    233c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2340:	4f2f706f 	svcmi	0x002f706f
    2344:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2348:	502f5445 	eorpl	r5, pc, r5, asr #8
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    234c:	534f4349 	movtpl	r4, #62281	; 0xf349
    2350:	6369502f 	cmnvs	r9, #47	; 0x2f
    2354:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	return 1;
    2358:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    235c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    2360:	2f656d6f 	svccs	0x00656d6f
    2364:	70657473 	rsbvc	r7, r5, r3, ror r4
    2368:	2f6e6568 	svccs	0x006e6568
	verify_fph (phy, "tcv32");
    236c:	6b736544 	blvs	1cdb884 <__ccfg+0x1cbb8dc>
    2370:	2f706f74 	svccs	0x00706f74
    2374:	4f534c4f 	svcmi	0x00534c4f
    2378:	2f54454e 	svccs	0x0054454e
    237c:	4f434950 	svcmi	0x00434950
    2380:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	oq = oqueues [phy];
    2384:	00534f63 	subseq	r4, r3, r3, ror #30
	b = q_first (oq);
    2388:	72656b00 	rsbvc	r6, r5, #0, 22
	if (q_end (b, oq)) {
    238c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
	*len = b->length;
    2390:	00010063 	andeq	r0, r1, r3, rrx
	deq (b);	// Dequeue the packet ...
    2394:	72617500 	rsbvc	r7, r1, #0, 10
}
    2398:	00682e74 	rsbeq	r2, r8, r4, ror lr
		return NULL;
    239c:	73000002 	movwvc	r0, #2
    23a0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    23a4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    23a8:	73000003 	movwvc	r0, #3
	verify_fph (phy, "tcv33");
    23ac:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    23b0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    23b4:	61000003 	tstvs	r0, r3
    23b8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    23bc:	00040068 	andeq	r0, r4, r8, rrx
    23c0:	63616d00 	cmnvs	r1, #0, 26
	oq = oqueues [phy];
    23c4:	00682e68 	rsbeq	r2, r8, r8, ror #28
	b = q_first (oq);
    23c8:	70000004 	andvc	r0, r0, r4
		return NULL;
    23cc:	5f736e69 	svcpl	0x00736e69
	return (address)(b + 1);
    23d0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
}
    23d4:	00040068 	andeq	r0, r4, r8, rrx
    23d8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    23dc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    23e0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
	verify_plg (b, tcv_xmt, "tcv34");
    23e4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	hblock_t *b = header (pkt);
    23e8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
	verify_plg (b, tcv_xmt, "tcv34");
    23ec:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    23f0:	00050068 	andeq	r0, r5, r8, rrx
    23f4:	72656b00 	rsbvc	r6, r5, #0, 22
    23f8:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    23fc:	00010068 	andeq	r0, r1, r8, rrx
    2400:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    2404:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
	dispose (b, plugins [b->attributes.b.plugin] ->
    2408:	003e6e69 	eorseq	r6, lr, r9, ror #28
}
    240c:	00000000 	andeq	r0, r0, r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    2410:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    2414:	00167002 	andseq	r7, r6, r2
    2418:	03c30300 	biceq	r0, r3, #0, 6
}
    241c:	16020501 	strne	r0, [r2], -r1, lsl #10
    while(1)
    2420:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
{
    2424:	78030626 	stmdavc	r3, {r1, r2, r5, r9, sl}
    SetupTrimDevice();
    2428:	03020501 	movweq	r0, #9473	; 0x2501
    pui32Src = &_etext;
    242c:	07052009 	streq	r2, [r5, -r9]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2430:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    __asm("    ldr     r0, =_bss\n"
    2434:	13052021 	movwne	r2, #20513	; 0x5021
    2438:	0a052106 	beq	14a858 <__ccfg+0x12a8b0>
    243c:	2013053c 	andscs	r0, r3, ip, lsr r5
    2440:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
    2444:	052c060f 	streq	r0, [ip, #-1551]!	; 0xfffff9f1
   main();
    2448:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    FaultISR();
    244c:	052f0604 	streq	r0, [pc, #-1540]!	; 1e50 <dispose+0x1c>
        *pui32Dest++ = *pui32Src++;
    2450:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2454:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
    2458:	054b3106 	strbeq	r3, [fp, #-262]	; 0xfffffefa
    245c:	017a0302 	cmneq	sl, r2, lsl #6
    2460:	03060105 	movweq	r0, #24837	; 0x6105
    2464:	03022e0a 	movweq	r2, #11786	; 0x2e0a
    2468:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    246c:	0205001f 	andeq	r0, r5, #31
static byte get_byte () {
    2470:	000016ac 	andeq	r1, r0, ip, lsr #13
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2474:	0106c903 	tsteq	r6, r3, lsl #18
    2478:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    247c:	05131401 	ldreq	r1, [r3, #-1025]	; 0xfffffbff
    2480:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		if (ee_inp)
    2484:	2070031f 	rsbscs	r0, r0, pc, lsl r3
			b |= 1;
    2488:	10030d05 	andne	r0, r3, r5, lsl #26
    248c:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2490:	06020520 	streq	r0, [r2], -r0, lsr #10
	for (b = 0, i = 0; i < 8; i++) {
    2494:	11030601 	tstne	r3, r1, lsl #12
}
    2498:	0d051320 	stceq	3, cr1, [r5, #-128]	; 0xffffff80
    249c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    24a0:	061f051f 			; <UNDEFINED> instruction: 0x061f051f
static void put_byte (byte b) {
    24a4:	06020521 	streq	r0, [r2], -r1, lsr #10
    24a8:	21250601 			; <UNDEFINED> instruction: 0x21250601
    24ac:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
    24b0:	061d0205 	ldreq	r0, [sp], -r5, lsl #4
		if (b & 0x80)
    24b4:	060f0523 	streq	r0, [pc], -r3, lsr #10
    24b8:	24010501 	strcs	r0, [r1], #-1281	; 0xfffffaff
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24bc:	03060305 	movweq	r0, #25349	; 0x6305
	for (i = 0; i < 8; i++) {
    24c0:	1e052062 	cdpne	0, 0, cr2, cr5, cr2, {3}
		b <<= 1;
    24c4:	06050106 	streq	r0, [r5], -r6, lsl #2
	for (i = 0; i < 8; i++) {
    24c8:	06040558 			; <UNDEFINED> instruction: 0x06040558
}
    24cc:	13052130 	movwne	r2, #20784	; 0x5130
    24d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    24d4:	2e059106 	mvfcss	f1, f6
    24d8:	0636050d 	ldrteq	r0, [r6], -sp, lsl #10
	put_byte (cmd);
    24dc:	060a0501 	streq	r0, [sl], -r1, lsl #10
    24e0:	061f0534 			; <UNDEFINED> instruction: 0x061f0534
}
    24e4:	580d0501 	stmdapl	sp, {r0, r8, sl}
    24e8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
static void wwait (word st, word del) {
    24ec:	0610052f 	ldreq	r0, [r0], -pc, lsr #10
    24f0:	06040501 	streq	r0, [r4], -r1, lsl #10
    24f4:	05ac0b03 	streq	r0, [ip, #2819]!	; 0xb03
	while (dopen && (rdsr () & 1)) {
    24f8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    24fc:	0564062e 	strbeq	r0, [r4, #-1582]!	; 0xfffff9d2
    2500:	02130609 	andseq	r0, r3, #9437184	; 0x900000
    2504:	01010007 	tsteq	r1, r7
	put_byte (CMD_RDSR);
    2508:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
	r = get_byte ();
    250c:	00172c02 	andseq	r2, r7, r2, lsl #24
    2510:	08c60300 	stmiaeq	r6, {r8, r9}^
	while (dopen && (rdsr () & 1)) {
    2514:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
}
    2518:	0d050204 	sfmeq	f0, 4, [r5, #-16]
		if (st == WNONE)
    251c:	7cdf0306 	ldclvc	3, cr0, [pc], {6}
    2520:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			mdelay (1);
    2524:	a103060f 	tstge	r3, pc, lsl #12
    2528:	02052003 	andeq	r2, r5, #3
			delay (del, st);
    252c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    2530:	7cda0324 	ldclvc	3, cr0, [sl], {36}	; 0x24
			release;
    2534:	17050501 	strne	r0, [r5, -r1, lsl #10]
    2538:	01060d05 	tsteq	r6, r5, lsl #26
    253c:	02050104 	andeq	r0, r5, #4, 2
static void ready () {
    2540:	2003a103 	andcs	sl, r3, r3, lsl #2
	if (dopen) {
    2544:	01052f06 	tsteq	r5, r6, lsl #30
		wwait (WNONE, 1);
    2548:	05023d06 	streq	r3, [r2, #-3334]	; 0xfffff2fa
    254c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2550:	02050027 	andeq	r0, r5, #39	; 0x27
	dstat = 0;
    2554:	00000000 	andeq	r0, r0, r0
}
    2558:	0100de03 	tsteq	r0, r3, lsl #28
    255c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2560:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
	udelay (1);
    2564:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    2568:	02051c27 	andeq	r1, r5, #9984	; 0x2700
	udelay (1);
    256c:	23200624 			; <UNDEFINED> instruction: 0x23200624
		dopen = DOPEN_TEMP;
    2570:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
    2574:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2578:	052d0602 	streq	r0, [sp, #-1538]!	; 0xfffff9fe
    257c:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
static void cclose () {
    2580:	01010005 	tsteq	r1, r5
	if (dopen == DOPEN_TEMP) {
    2584:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
    2588:	00174402 	andseq	r4, r7, r2, lsl #8
		wwait (WNONE, 1);
    258c:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    2590:	13020501 	movwne	r0, #9473	; 0x2501
	cmd_0 (CMD_DP);
    2594:	1f061b05 	svcne	0x00061b05
    2598:	02210205 	eoreq	r0, r1, #1342177280	; 0x50000000
		dopen = 0;
    259c:	01010006 	tsteq	r1, r6
}
    25a0:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
word ee_open () {
    25a4:	00175402 	andseq	r5, r7, r2, lsl #8
	ready ();
    25a8:	00fe0300 	rscseq	r0, lr, r0, lsl #6
	dopen = DOPEN_PERM;
    25ac:	16020501 	strne	r0, [r2], -r1, lsl #10
    25b0:	010e0514 	tsteq	lr, r4, lsl r5
}
    25b4:	03061e05 	movweq	r1, #28165	; 0x6e05
	if (dopen) {
    25b8:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
    25bc:	031e0534 	tsteq	lr, #52, 10	; 0xd000000
		dopen = DOPEN_TEMP;
    25c0:	0305207a 	movweq	r2, #20602	; 0x507a
		cclose ();
    25c4:	12052706 	andne	r2, r5, #1572864	; 0x180000
}
    25c8:	06050106 	streq	r0, [r5], -r6, lsl #2
int ser_out (word st, const char *m) {
    25cc:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
	if ((prcs = running (__outserial)) != 0) {
    25d0:	0620051f 			; <UNDEFINED> instruction: 0x0620051f
    25d4:	060e0501 	streq	r0, [lr], -r1, lsl #10
    25d8:	06020520 	streq	r0, [r2], -r0, lsr #10
		join (prcs, st);
    25dc:	05320601 	ldreq	r0, [r2, #-1537]!	; 0xfffff9ff
		release;
    25e0:	02051303 	andeq	r1, r5, #201326592	; 0xc000000
	if (*m)
    25e4:	1105153b 	tstne	r5, fp, lsr r5
		prcs = strlen (m) +1;
    25e8:	01050106 	tsteq	r5, r6, lsl #2
    25ec:	0006022f 	andeq	r0, r6, pc, lsr #4
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    25f0:	21050101 	tstcs	r5, r1, lsl #2
    25f4:	00020500 	andeq	r0, r2, r0, lsl #10
    25f8:	03000000 	movweq	r0, #0
		umwait (st);
    25fc:	0501018e 	streq	r0, [r1, #-398]	; 0xfffffe72
    2600:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
		prcs =  m [1] + 3;
    2604:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	if (*m)
    2608:	21052006 	tstcs	r5, r6
		strcpy (buf, m);
    260c:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    2610:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
	if (runstrand (__outserial, buf) == 0) {
    2614:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2618:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		ufree (buf);
    261c:	03052106 	movweq	r2, #20742	; 0x5106
    2620:	0606054b 	streq	r0, [r6], -fp, asr #10
		memcpy (buf, m, prcs);
    2624:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    2628:	0620052b 	strteq	r0, [r0], -fp, lsr #10
    262c:	060e0501 	streq	r0, [lr], -r1, lsl #10
}
    2630:	06020520 	streq	r0, [r2], -r0, lsr #10
    2634:	05340601 	ldreq	r0, [r4, #-1537]!	; 0xfffff9ff
int ser_in (word st, char *buf, int len) {
    2638:	0205580b 	andeq	r5, r5, #720896	; 0xb0000
    263c:	01080513 	tsteq	r8, r3, lsl r5
	if (len == 0)
    2640:	052f0305 	streq	r0, [pc, #-773]!	; 2343 <tcvphy_rcv+0x73>
	if (__inpline == NULL) {
    2644:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
		if ((prcs = running (__inserial)) == 0) {
    2648:	12052021 	andne	r2, r5, #33	; 0x21
    264c:	06030520 	streq	r0, [r3], -r0, lsr #10
			prcs = runthread (__inserial);
    2650:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2654:	06020501 	streq	r0, [r2], -r1, lsl #10
			if (prcs == 0) {
    2658:	2e0b0532 	mcrcs	5, 0, r0, cr11, cr2, {1}
				npwait (st);
    265c:	13060105 	movwne	r0, #24837	; 0x6105
		release;
    2660:	01000702 	tsteq	r0, r2, lsl #14
		join (prcs, st);
    2664:	002a0501 	eoreq	r0, sl, r1, lsl #10
    2668:	17800205 	strne	r0, [r0, r5, lsl #4]
	if (*__inpline == NULL) // bin cmd
    266c:	a6030000 	strge	r0, [r3], -r0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2670:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
	if (prcs >= len)
    2674:	06050514 			; <UNDEFINED> instruction: 0x06050514
		prcs = len-1;
    2678:	06020501 	streq	r0, [r2], -r1, lsl #10
	memcpy (buf, __inpline, prcs);
    267c:	00020221 	andeq	r0, r2, r1, lsr #4
    2680:	2e050101 	adfcss	f0, f5, f1
    2684:	88020500 	stmdahi	r2, {r8, sl}
	ufree (__inpline);
    2688:	03000017 	movweq	r0, #23
	__inpline = NULL;
    268c:	060101ae 	streq	r0, [r1], -lr, lsr #3
	if (*buf) // if it's NULL, it's a bin cmd
    2690:	06020520 	streq	r0, [r2], -r0, lsr #10
		buf [prcs] = '\0';
    2694:	13200e03 			; <UNDEFINED> instruction: 0x13200e03
}
    2698:	05011003 	streq	r1, [r1, #-3]
		prcs = strlen (__inpline);
    269c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    26a0:	02053c05 	andeq	r3, r5, #1280	; 0x500
		return 0;
    26a4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    26a8:	01060605 	tsteq	r6, r5, lsl #12
    26ac:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
int ser_outf (word st, const char *m, ...) {
    26b0:	03053c06 	movweq	r3, #23558	; 0x5c06
    26b4:	2e270806 	cdpcs	8, 2, cr0, cr7, cr6, {0}
	if ((prcs = running (__outserial)) != 0) {
    26b8:	29030205 	stmdbcs	r3, {r0, r2, r9}
    26bc:	06140520 	ldreq	r0, [r4], -r0, lsr #10
		join (prcs, st);
    26c0:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    26c4:	03060405 	movweq	r0, #25605	; 0x6405
		release;
    26c8:	09052e59 	stmdbeq	r5, {r0, r3, r4, r6, r9, sl, fp, sp}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26cc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    26d0:	06040520 	streq	r0, [r4], -r0, lsr #10
    26d4:	06080531 			; <UNDEFINED> instruction: 0x06080531
		umwait (st);
    26d8:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    26dc:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
	if (runstrand (__outserial, buf) == 0) {
    26e0:	3e080605 	cfmadd32cc	mvax0, mvfx0, mvfx8, mvfx5
    26e4:	79030305 	stmdbvc	r3, {r0, r2, r8, r9}
    26e8:	0305053c 	movweq	r0, #21820	; 0x553c
		ufree (buf);
    26ec:	12052e0b 	andne	r2, r5, #11, 28	; 0xb0
		npwait (st);
    26f0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
}
    26f4:	07052106 	streq	r2, [r5, -r6, lsl #2]
    26f8:	03051106 	movweq	r1, #20742	; 0x5106
    26fc:	66170306 	ldrvs	r0, [r7], -r6, lsl #6
    2700:	01060705 	tsteq	r6, r5, lsl #14
int ser_inf (word st, const char *fmt, ...) {
    2704:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2708:	16030602 	strne	r0, [r3], -r2, lsl #12
	if (fmt == NULL)
    270c:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
	if (__inpline == NULL) {
    2710:	06020501 	streq	r0, [r2], -r1, lsl #10
		if ((prcs = running (__inserial)) == 0) {
    2714:	06010540 	streq	r0, [r1], -r0, asr #10
    2718:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
			prcs = runthread (__inserial);
    271c:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
    2720:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
			if (prcs == 0) {
    2724:	000a022e 	andeq	r0, sl, lr, lsr #4
				npwait (st);
    2728:	1b050101 	blne	142b34 <__ccfg+0x122b8c>
		release;
    272c:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
		join (prcs, st);
    2730:	03000018 	movweq	r0, #24
    2734:	050102d2 	streq	r0, [r1, #-722]	; 0xfffffd2e
	va_start (ap, fmt);
    2738:	1b051402 	blne	147748 <__ccfg+0x1277a0>
	prcs = vscan (__inpline, fmt, ap);
    273c:	02051006 	andeq	r1, r5, #6
    2740:	024b0622 	subeq	r0, fp, #35651584	; 0x2200000
	ufree (__inpline);
    2744:	01010005 	tsteq	r1, r5
	__inpline = NULL;
    2748:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
}
    274c:	00186802 	andseq	r6, r8, r2, lsl #16
    2750:	02d80300 	sbcseq	r0, r8, #0, 6
    2754:	16020501 	strne	r0, [r2], -r1, lsl #10
		return 0;
    2758:	0e062a05 	vmlaeq.f32	s4, s12, s10
    275c:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    2760:	02053e05 	andeq	r3, r5, #5, 28	; 0x50
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2764:	05054a06 	streq	r4, [r5, #-2566]	; 0xfffff5fa
    2768:	03050106 	movweq	r0, #20742	; 0x5106
    276c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
	RF_cmdFs.frequency = 
    2770:	3d06014c 	stfccs	f0, [r6, #-304]	; 0xfffffed0
}
    2774:	2020061f 	eorcs	r0, r0, pc, lsl r6
    2778:	06010513 			; <UNDEFINED> instruction: 0x06010513
    277c:	00060221 	andeq	r0, r6, r1, lsr #4
    2780:	21050101 	tstcs	r5, r1, lsl #2
static int option (int opt, address val) {
    2784:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    2788:	03000018 	movweq	r0, #24
    278c:	050102e5 	streq	r0, [r1, #-741]	; 0xfffffd1b
    2790:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    2794:	03062105 	movweq	r2, #24837	; 0x6105
    2798:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    279c:	052e0627 	streq	r0, [lr, #-1575]!	; 0xfffff9d9
    27a0:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    27a4:	1305200a 	movwne	r2, #20490	; 0x500a
    27a8:	060f0520 	streq	r0, [pc], -r0, lsr #10
    27ac:	0603054a 	streq	r0, [r3], -sl, asr #10
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    27b0:	06040501 	streq	r0, [r4], -r1, lsl #10
    27b4:	0607052f 	streq	r0, [r7], -pc, lsr #10
			goto RVal;
    27b8:	06050501 	streq	r0, [r5], -r1, lsl #10
			_BIS (dstate, DSTATE_RXON);
    27bc:	02054b5a 	andeq	r4, r5, #92160	; 0x16800
    27c0:	0601050d 	streq	r0, [r1], -sp, lsl #10
	int ret = 0;
    27c4:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
			p_trigger (drvprcs, qevent);
    27c8:	01010003 	tsteq	r1, r3
    27cc:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    27d0:	00000002 	andeq	r0, r0, r2
    27d4:	02f70300 	rscseq	r0, r7, #0, 6
    27d8:	16020501 	strne	r0, [r2], -r1, lsl #10
    27dc:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    27e0:	01790306 	cmneq	r9, r6, lsl #6
    27e4:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    27e8:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    27ec:	0e050106 	adfeqs	f0, f5, f6
}
    27f0:	12052e06 	andne	r2, r5, #6, 28	; 0x60
			_BIC (dstate, DSTATE_RXON);
    27f4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    27f8:	3301053c 	movwcc	r0, #5436	; 0x153c
			statid = (val == NULL) ? 0 : *val;
    27fc:	1c060305 	stcne	3, cr0, [r6], {5}
    2800:	01060605 	tsteq	r6, r5, lsl #12
	int ret = 0;
    2804:	051f2005 	ldreq	r2, [pc, #-5]	; 2807 <option+0x83>
			ret = (int) statid;
    2808:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
	if (val != NULL)
    280c:	1f052106 	svcne	0x00052106
		*val = ret;
    2810:	00010264 	andeq	r0, r1, r4, ror #4
			ret = rbuffl + 2;
    2814:	26050101 	strcs	r0, [r5], -r1, lsl #2
    2818:	d0020500 	andle	r0, r2, r0, lsl #10
			if (val != NULL) {
    281c:	03000018 	movweq	r0, #24
				memcpy (val, &rxstat,
    2820:	05010387 	streq	r0, [r1, #-903]	; 0xfffffc79
    2824:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
				memset (&rxstat, 0, 
    2828:	200e0626 	andcs	r0, lr, r6, lsr #12
    282c:	06240205 	strteq	r0, [r4], -r5, lsl #4
			if (val == NULL)
    2830:	0609052e 	streq	r0, [r9], -lr, lsr #10
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2834:	06030528 	streq	r0, [r3], -r8, lsr #10
    2838:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
				utimer_set (bckf_timer, *val);
    283c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2840:	3d300604 	ldccc	6, cr0, [r0, #-16]!
    2844:	17060105 	strne	r0, [r6, -r5, lsl #2]
			for (ret = 0; ret < 8; ret++)
    2848:	03060205 	movweq	r0, #25093	; 0x6205
				if (RF_cmdPropRadioDivSetup.txPower
    284c:	04022e77 	streq	r2, [r2], #-3703	; 0xfffff189
					== patable [ret])
    2850:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				if (RF_cmdPropRadioDivSetup.txPower
    2854:	02050021 	andeq	r0, r5, #33	; 0x21
			for (ret = 0; ret < 8; ret++)
    2858:	000018f4 	strdeq	r1, [r0], -r4
    285c:	01039903 	tsteq	r3, r3, lsl #18
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2860:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2864:	200e0621 	andcs	r0, lr, r1, lsr #12
    2868:	06240205 	strteq	r0, [r4], -r5, lsl #4
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    286c:	1e053e85 	cdpne	14, 0, cr3, cr5, cr5, {4}
    2870:	0b050106 	bleq	142c90 <__ccfg+0x122ce8>
			_BIS (dstate, DSTATE_IRST);
    2874:	201e052e 	andscs	r0, lr, lr, lsr #10
    2878:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    287c:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
			ret = (int) channel;
    2880:	02590601 	subseq	r0, r9, #1048576	; 0x100000
			goto RVal;
    2884:	01010005 	tsteq	r1, r5
				(*val > 7) ? 7 : *val;
    2888:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
    288c:	00000002 	andeq	r0, r0, r2
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2890:	03a70300 			; <UNDEFINED> instruction: 0x03a70300
    2894:	16020501 	strne	r0, [r2], -r1, lsl #10
			plugch ();
    2898:	67060105 	strvs	r0, [r6, -r5, lsl #2]
			_BIS (dstate, DSTATE_IRST);
    289c:	01000402 	tsteq	r0, r2, lsl #8
    28a0:	00180501 	andseq	r0, r8, r1, lsl #10
			ret = (int) vrate;
    28a4:	00000205 	andeq	r0, r0, r5, lsl #4
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28a8:	b2030000 	andlt	r0, r3, #0
    28ac:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    28b0:	18051414 	stmdane	r5, {r2, r4, sl, ip}
    28b4:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    28b8:	5a062402 	bpl	18b8c8 <__ccfg+0x16b920>
    28bc:	01060505 	tsteq	r6, r5, lsl #10
    28c0:	21060305 	tstcs	r6, r5, lsl #6
    28c4:	01060505 	tsteq	r6, r5, lsl #10
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28c8:	35060205 	strcc	r0, [r6, #-517]	; 0xfffffdfb
    28cc:	01061205 	tsteq	r6, r5, lsl #4
    28d0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
    28d4:	7a030603 	bvc	c40e8 <__ccfg+0xa4140>
			syserror (EREQPAR, "cc13 op");
    28d8:	06053d20 	streq	r3, [r5], -r0, lsr #26
    28dc:	17050106 	strne	r0, [r5, -r6, lsl #2]
    28e0:	3d0b052e 	cfstr32cc	mvfx0, [fp, #-184]	; 0xffffff48
    28e4:	01000802 	tsteq	r0, r2, lsl #16
    28e8:	001d0501 	andseq	r0, sp, r1, lsl #10
    28ec:	00000205 	andeq	r0, r0, r5, lsl #4
    28f0:	92030000 	andls	r0, r3, #0
    28f4:	02050104 	andeq	r0, r5, #4, 2
    28f8:	1d051414 	cfstrsne	mvf1, [r5, #-80]	; 0xffffffb0
    28fc:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    2900:	06030524 	streq	r0, [r3], -r4, lsr #10
    2904:	06050521 	streq	r0, [r5], -r1, lsr #10
    2908:	06020501 	streq	r0, [r2], -r1, lsl #10
    290c:	06010532 			; <UNDEFINED> instruction: 0x06010532
    2910:	06030513 			; <UNDEFINED> instruction: 0x06030513
static void issue_cmd (lword cmd) {
    2914:	0006022b 	andeq	r0, r6, fp, lsr #4
    2918:	1d050101 	stfnes	f0, [r5, #-4]
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    291c:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    2920:	03000019 	movweq	r0, #25
    2924:	0501049e 	streq	r0, [r1, #-1182]	; 0xfffffb62
		if (res != 0x86)
    2928:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
			syserror (EHARDWARE, "hang ic0");
    292c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2930:	052f0603 	streq	r0, [pc, #-1539]!	; 2335 <tcvphy_rcv+0x65>
		if (cnt-- == 0) {
    2934:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
			diag ("HUP %lx %lx", cmd, res);
    2938:	2e3e0602 	cfmsuba32cs	mvax0, mvax0, mvfx14, mvfx2
    293c:	25060105 	strcs	r0, [r6, #-261]	; 0xfffffefb
			syserror (EHARDWARE, "hang ic0");
    2940:	1c060305 	stcne	3, cr0, [r6], {5}
		udelay (1);
    2944:	01060605 	tsteq	r6, r5, lsl #12
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2948:	3b060205 	blcc	183164 <__ccfg+0x1631bc>
}
    294c:	01000602 	tsteq	r0, r2, lsl #12
    2950:	001d0501 	andseq	r0, sp, r1, lsl #10
    2954:	00000205 	andeq	r0, r0, r5, lsl #4
    2958:	ac030000 	stcge	0, cr0, [r3], {-0}
static void rx_de () {
    295c:	02050104 	andeq	r0, r5, #4, 2
	if ((dstate & DSTATE_RXAC) == 0)
    2960:	13141314 	tstne	r4, #20, 6	; 0x50000000
    2964:	03061d05 	movweq	r1, #27909	; 0x6d05
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2968:	0405017a 	streq	r0, [r5], #-378	; 0xfffffe86
	_BIC (dstate, DSTATE_RXAC);
    296c:	21020525 	tstcs	r2, r5, lsr #10
    2970:	01052e06 	tsteq	r5, r6, lsl #28
}
    2974:	03052406 	movweq	r2, #21510	; 0x5406
    2978:	06051d06 	streq	r1, [r5], -r6, lsl #26
    297c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
static void rf_off () {
    2980:	2106051f 	tstcs	r6, pc, lsl r5
	if ((dstate & DSTATE_RFON) == 0)
    2984:	21060405 	tstcs	r6, r5, lsl #8
    2988:	01060505 	tsteq	r6, r5, lsl #10
	IntDisable (INT_RFC_CPE_0);
    298c:	3a060205 	bcc	1831a8 <__ccfg+0x163200>
    2990:	01000402 	tsteq	r0, r2, lsl #8
    2994:	00210501 	eoreq	r0, r1, r1, lsl #10
	RFCAdi3VcoLdoVoltageMode (false);
    2998:	19500205 	ldmdbne	r0, {r0, r2, r9}^
	RFCSynthPowerDown ();
    299c:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    29a0:	02050104 	andeq	r0, r5, #4, 2
    29a4:	21051414 	tstcs	r5, r4, lsl r4
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    29a8:	09050e06 	stmdbeq	r5, {r1, r2, r9, sl, fp}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29ac:	060e0524 	streq	r0, [lr], -r4, lsr #10
	OSCHF_SwitchToRcOscTurnOffXosc ();
    29b0:	06020520 	streq	r0, [r2], -r0, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    29b4:	31010501 	tstcc	r1, r1, lsl #10
    29b8:	1d062205 	sfmne	f2, 4, [r6, #-20]	; 0xffffffec
    29bc:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
	_BIC (dstate, DSTATE_RFON);
    29c0:	0201061f 	andeq	r0, r1, #32505856	; 0x1f00000
    29c4:	01010002 	tsteq	r1, r2
}
    29c8:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    29cc:	00195e02 	andseq	r5, r9, r2, lsl #28
    29d0:	04c10300 	strbeq	r0, [r1], #768	; 0x300
    29d4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    29d8:	05202005 	streq	r2, [r0, #-5]!
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    29dc:	1a050108 	bne	142e04 <__ccfg+0x122e5c>
    29e0:	18050106 	stmdane	r5, {r1, r2, r8}
    29e4:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
		if (cmd->status == tstat)
    29e8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
		if (timeout-- == 0) {
    29ec:	01010001 	tsteq	r1, r1
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    29f0:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    29f4:	00196e02 	andseq	r6, r9, r2, lsl #28
    29f8:	04c60300 	strbeq	r0, [r6], #768	; 0x300
			syserror (EHARDWARE, "rt2");
    29fc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2a00:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
		udelay (1);
    2a04:	05053002 	streq	r3, [r5, #-2]
		if (cmd->status == tstat)
    2a08:	01050106 	tsteq	r5, r6, lsl #2
}
    2a0c:	1d11052f 	cfldr32ne	mvfx0, [r1, #-188]	; 0xffffff44
    2a10:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a14:	052f0603 	streq	r0, [pc, #-1539]!	; 2419 <tcvphy_end+0x39>
    2a18:	02010608 	andeq	r0, r1, #8, 12	; 0x800000
static void rf_on () {
    2a1c:	01010003 	tsteq	r1, r3
    2a20:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
	OSCHF_TurnOnXosc();
    2a24:	00000002 	andeq	r0, r0, r2
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a28:	04cd0300 	strbeq	r0, [sp], #768	; 0x300
    2a2c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2a30:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2a34:	02024b02 	andeq	r4, r2, #2048	; 0x800
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2a3c:	02050033 	andeq	r0, r5, #51	; 0x33
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a40:	00000000 	andeq	r0, r0, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2a44:	0104d303 	tsteq	r4, r3, lsl #6
	issue_cmd (
    2a48:	02140205 	andseq	r0, r4, #1342177280	; 0x50000000
    2a4c:	01010003 	tsteq	r1, r3
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2a50:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
    2a54:	00198a02 	andseq	r8, r9, r2, lsl #20
    2a58:	04d80300 	ldrbeq	r0, [r8], #768	; 0x300
   pPatchTab[80] = 0;
    2a5c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   } while (--nIterations);
    2a60:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
   pPatchTab[53] = 2;
    2a64:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2a68:	051f0603 	ldreq	r0, [pc, #-1539]	; 246d <zero_loop+0x31>
   pPatchTab[55] = 3;
    2a6c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
   pPatchTab[110] = 4;
    2a70:	03022e0b 	movweq	r2, #11787	; 0x2e0b
   pPatchTab[107] = 5;
    2a74:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
   pPatchTab[65] = 6;
    2a78:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2a7c:	0000199e 	muleq	r0, lr, r9
   pPatchTab[57] = 1;
    2a80:	0104de03 	tsteq	r4, r3, lsl #28
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a84:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
   const uint32_t *pS = patchGenfskRfe;
    2a88:	01052008 	tsteq	r5, r8
      t2 = *pS++;
    2a8c:	03053006 	movweq	r3, #20486	; 0x5006
      t4 = *pS++;
    2a90:	0b051f06 	bleq	14a6b0 <__ccfg+0x12a708>
      t6 = *pS++;
    2a94:	03020106 	movweq	r0, #8454	; 0x2106
      t8 = *pS++;
    2a98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
      *pD++ = t1;
    2a9c:	0205002b 	andeq	r0, r5, #43	; 0x2b
      *pD++ = t2;
    2aa0:	000019ac 	andeq	r1, r0, ip, lsr #19
      *pD++ = t3;
    2aa4:	0104e803 	tsteq	r4, r3, lsl #16
      *pD++ = t5;
    2aa8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
      *pD++ = t7;
    2aac:	0510062b 	ldreq	r0, [r0, #-1579]	; 0xfffff9d5
   } while (--nIterations);
    2ab0:	03052205 	movweq	r2, #20997	; 0x5205
    2ab4:	31062106 	tstcc	r6, r6, lsl #2
      *pD++ = t8;
    2ab8:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
   } while (--nIterations);
    2abc:	01060c05 	tsteq	r6, r5, lsl #24
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2ac0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
   *pD++ = t2;
    2ac4:	052f0603 	streq	r0, [pc, #-1539]!	; 24c9 <put_byte+0x25>
   *pD++ = t3;
    2ac8:	0e053e02 	cdpeq	14, 0, cr3, cr5, cr2, {0}
   *pD++ = t4;
    2acc:	01050106 	tsteq	r5, r6, lsl #2
   *pD++ = t5;
    2ad0:	00050221 	andeq	r0, r5, r1, lsr #4
    2ad4:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
	RFCAdi3VcoLdoVoltageMode (true);
    2ad8:	d0020500 	andle	r0, r2, r0, lsl #10
    2adc:	03000019 	movweq	r0, #25
       	RFCRfTrimSet (&rfTrim);
    2ae0:	050104f8 	streq	r0, [r1, #-1272]	; 0xfffffb08
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2ae4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2ae8:	2e0e0645 	cfmadd32cs	mvax2, mvfx0, mvfx14, mvfx5
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2aec:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
    2af0:	19052022 	stmdbne	r5, {r1, r5, sp}
	issue_cmd ((lword)&cmd_srt);
    2af4:	0603054a 	streq	r0, [r3], -sl, asr #10
    2af8:	4c020521 	cfstr32mi	mvfx0, [r2], {33}	; 0x21
	issue_cmd ((lword)&RF_cmdFs);
    2afc:	01060505 	tsteq	r6, r5, lsl #10
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b00:	40060205 	andmi	r0, r6, r5, lsl #4
    2b04:	01060f05 	tsteq	r6, r5, lsl #30
    2b08:	4c060205 	sfmmi	f0, 4, [r6], {5}
	IntEnable (INT_RFC_CPE_0);
    2b0c:	01060505 	tsteq	r6, r5, lsl #10
	_BIC (dstate, DSTATE_IRST);
    2b10:	31060205 	tstcc	r6, r5, lsl #4
    2b14:	01060505 	tsteq	r6, r5, lsl #10
    2b18:	4f060305 	svcmi	0x00060305
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b1c:	01060605 	tsteq	r6, r5, lsl #12
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b20:	30060305 	andcc	r0, r6, r5, lsl #6
	IntEnable (INT_RFC_CPE_0);
    2b24:	03040559 	movweq	r0, #17753	; 0x4559
    2b28:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
}
    2b2c:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
	IntEnable (INT_RFC_CPE_0);
    2b30:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2b34:	05350603 	ldreq	r0, [r5, #-1539]!	; 0xfffff9fd
    2b38:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2b3c:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
    2b40:	01060b05 	tsteq	r6, r5, lsl #22
    2b44:	69060305 	stmdbvs	r6, {r0, r2, r8, r9}
    2b48:	01060a05 	tsteq	r6, r5, lsl #20
    2b4c:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
    2b50:	03060a05 	movweq	r0, #27141	; 0x6a05
    2b54:	01050161 	tsteq	r5, r1, ror #2
    2b58:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    2b5c:	7a030602 	bvc	c436c <__ccfg+0xa43c4>
    2b60:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2b64:	06030501 	streq	r0, [r3], -r1, lsl #10
    2b68:	0502752f 	streq	r7, [r2, #-1327]	; 0xfffffad1
    2b6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b70:	0205001a 	andeq	r0, r5, #26
    2b74:	00001a6c 	andeq	r1, r0, ip, ror #20
    2b78:	0105ef03 	tsteq	r5, r3, lsl #30
    2b7c:	03170205 	tsteq	r7, #1342177280	; 0x50000000
    2b80:	15050113 	strne	r0, [r5, #-275]	; 0xfffffeed
    2b84:	1a050106 	bne	142fa4 <__ccfg+0x122ffc>
    2b88:	05206803 	streq	r6, [r0, #-2051]!	; 0xfffff7fd
    2b8c:	20180315 	andscs	r0, r8, r5, lsl r3
    2b90:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
static void rx_int_enable () {
    2b94:	03052005 	movweq	r2, #20485	; 0x5005
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b98:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    2b9c:	060d0552 			; <UNDEFINED> instruction: 0x060d0552
    2ba0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ba4:	0617053e 			; <UNDEFINED> instruction: 0x0617053e
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2ba8:	2b1d0515 	blcs	744004 <__ccfg+0x72405c>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2bac:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
    2bb0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2bb4:	05140617 	ldreq	r0, [r4, #-1559]	; 0xfffff9e9
    2bb8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bbc:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2bc0:	01052e0d 	tsteq	r5, sp, lsl #28
    2bc4:	022e2c03 	eoreq	r2, lr, #768	; 0x300
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bc8:	0101000d 	tsteq	r1, sp
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bcc:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bd0:	001abc02 	andseq	fp, sl, r2, lsl #24
		if (db->status == DATA_ENTRY_FINISHED) {
    2bd4:	06fb0300 	ldrbteq	r0, [fp], r0, lsl #6
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bd8:	03020501 	movweq	r0, #9473	; 0x2501
    2bdc:	1c05010c 	stfnes	f0, [r5], {12}
			nr++;
    2be0:	01740306 	cmneq	r4, r6, lsl #6
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2be4:	0c030505 	cfstr32eq	mvfx0, [r3], {5}
    2be8:	06020520 	streq	r0, [r2], -r0, lsr #10
    2bec:	06070525 	streq	r0, [r7], -r5, lsr #10
    2bf0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
				__dp [pl + 1] = __dp [pl] - 128;
    2bf4:	2f060305 	svccs	0x00060305
				pl = __dp [1] + 2;
    2bf8:	0611054c 	ldreq	r0, [r1], -ip, asr #10
				__dp [pl + 1] = __dp [pl] - 128;
    2bfc:	1c0f0516 	cfstr32ne	mvfx0, [pc], {22}
    2c00:	05321105 	ldreq	r1, [r2, #-261]!	; 0xfffffefb
				__dp [pl] = 0;
    2c04:	02051c0f 	andeq	r1, r5, #3840	; 0xf00
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c08:	11053206 	tstne	r5, r6, lsl #4
    2c0c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c10:	05303006 	ldreq	r3, [r0, #-6]!
			db->status = DATA_ENTRY_PENDING;
    2c14:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c18:	03052005 	movweq	r2, #20485	; 0x5005
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c1c:	052f2f06 	streq	r2, [pc, #-3846]!	; 1d1e <diag+0xd6>
				diag ("BAD RX");
    2c20:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2c24:	08024201 	stmdaeq	r2, {r0, r9, lr}
	if (nr) {
    2c28:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c2c:	02050017 	andeq	r0, r5, #23
}
    2c30:	00001b04 	andeq	r1, r0, r4, lsl #22
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c34:	0103d803 	tsteq	r3, r3, lsl #16
    2c38:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    2c3c:	03061705 	movweq	r1, #26373	; 0x6705
}
    2c40:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    2c44:	06030526 	streq	r0, [r3], -r6, lsr #10
    2c48:	06090521 	streq	r0, [r9], -r1, lsr #10
    2c4c:	20070501 	andcs	r0, r7, r1, lsl #10
    2c50:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    2c54:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2c58:	21020511 	tstcs	r2, r1, lsl r5
    2c5c:	0f032e06 	svceq	0x00032e06
    2c60:	03030520 	movweq	r0, #13600	; 0x3520
thread (cc1350_driver)
    2c64:	06054a72 			; <UNDEFINED> instruction: 0x06054a72
    2c68:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2c6c:	07053e06 	streq	r3, [r5, -r6, lsl #28]
    2c70:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2c74:	0b052106 	bleq	14b094 <__ccfg+0x12b0ec>
		if (dstate & DSTATE_IRST) {
    2c78:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2c7c:	2f3d2306 	svccs	0x003d2306
    2c80:	01060a05 	tsteq	r6, r5, lsl #20
			rf_off ();
    2c84:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
			_BIC (dstate,
    2c88:	2a3d0605 	bcs	f444a4 <__ccfg+0xf244fc>
    2c8c:	01060d05 	tsteq	r6, r5, lsl #26
		if (dstate & DSTATE_RXAC) {
    2c90:	0a030105 	beq	c30ac <__ccfg+0xa3104>
    2c94:	00070258 	andeq	r0, r7, r8, asr r2
			if ((dstate & DSTATE_RXON) == 0)
    2c98:	1c050101 	stfnes	f0, [r5], {1}
				rx_de ();
    2c9c:	00020500 	andeq	r0, r2, r0, lsl #10
		if (paylen == 0) {
    2ca0:	03000000 	movweq	r0, #0
    2ca4:	050103f4 	streq	r0, [r1, #-1012]	; 0xfffffc0c
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2ca8:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    2cac:	1c051313 	stcne	3, cr1, [r5], {19}
    2cb0:	01770306 	cmneq	r7, r6, lsl #6
    2cb4:	05360405 	ldreq	r0, [r6, #-1029]!	; 0xfffffbfb
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cb8:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    2cbc:	031c0522 	tsteq	ip, #142606336	; 0x8800000
    2cc0:	0a052077 	beq	14aea4 <__ccfg+0x12aefc>
    2cc4:	05201003 	streq	r1, [r0, #-3]!
    2cc8:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    2ccc:	20061205 	andcs	r1, r6, r5, lsl #4
    2cd0:	01060205 	tsteq	r6, r5, lsl #4
    2cd4:	20110306 	andscs	r0, r1, r6, lsl #6
		} else if (dstate & DSTATE_RXON) {
    2cd8:	01060505 	tsteq	r6, r5, lsl #10
	if (dstate & DSTATE_RFON)
    2cdc:	21060305 	tstcs	r6, r5, lsl #6
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2ce0:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
		re->status = DATA_ENTRY_PENDING;
    2ce4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2ce8:	13590604 	cmpne	r9, #4, 12	; 0x400000
	issue_cmd ((lword)&RF_cmdPropRx);
    2cec:	01060705 	tsteq	r6, r5, lsl #14
	_BIS (dstate, DSTATE_RXAC);
    2cf0:	21060505 	tstcs	r6, r5, lsl #10
    2cf4:	01060b05 	tsteq	r6, r5, lsl #22
    2cf8:	31060405 	tstcc	r6, r5, lsl #8
    2cfc:	01060705 	tsteq	r6, r5, lsl #14
	if (dstate & DSTATE_RXAC)
    2d00:	052f0905 	streq	r0, [pc, #-2309]!	; 2403 <tcvphy_end+0x23>
    2d04:	2f3d0604 	svccs	0x003d0604
				if (statid != 0xffff)
    2d08:	4505052f 	strmi	r0, [r5, #-1327]	; 0xfffffad1
    2d0c:	01060d05 	tsteq	r6, r5, lsl #26
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d10:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d14:	0007023c 	andeq	r0, r7, ip, lsr r2
		if (paylen == 0) {
    2d18:	20050101 	andcs	r0, r5, r1, lsl #2
			wait (qevent, DR_LOOP);
    2d1c:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    2d20:	0300001b 	movweq	r0, #27
			if (dstate & DSTATE_RXAC) {
    2d24:	050107a2 	streq	r0, [r1, #-1954]	; 0xfffff85e
    2d28:	14161a02 	ldrne	r1, [r6], #-2562	; 0xfffff5fe
				rx_int_enable ();
    2d2c:	01060505 	tsteq	r6, r5, lsl #10
			release;
    2d30:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
			} else if (dstate & DSTATE_RFON) {
    2d34:	0f060905 	svceq	0x00060905
				delay (offdelay, DR_GOOF);
    2d38:	70032005 	andvc	r2, r3, r5
    2d3c:	030d052e 	movweq	r0, #54574	; 0xd52e
    2d40:	1a052023 	bne	14add4 <__ccfg+0x12ae2c>
		if (bckf_timer) {
    2d44:	05207003 	streq	r7, [r0, #-3]!
			wait (qevent, DR_LOOP);
    2d48:	2e10030d 	cdpcs	3, 1, cr0, cr0, cr13, {0}
    2d4c:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    2d50:	206d0309 	rsbcs	r0, sp, r9, lsl #6
			delay (bckf_timer, DR_LOOP);
    2d54:	03060205 	movweq	r0, #25093	; 0x6205
    2d58:	05132e0f 	ldreq	r2, [r3, #-3599]	; 0xfffff1f1
			if (dstate & DSTATE_RXAC)
    2d5c:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
    2d60:	03060106 	movweq	r0, #24838	; 0x6106
	if (dstate & DSTATE_RFON)
    2d64:	03052009 	movweq	r2, #20489	; 0x5009
    2d68:	05011903 	streq	r1, [r1, #-2307]	; 0xfffff6fd
		rx_de ();
    2d6c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
		RF_cmdPropTx . status = 0;
    2d70:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d74:	1b052f06 	blne	14e994 <__ccfg+0x12e9ec>
    2d78:	03050106 	movweq	r0, #20742	; 0x5106
    2d7c:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
		issue_cmd ((lword)&cmd_cs);
    2d80:	01061205 	tsteq	r6, r5, lsl #4
		if (dstate & DSTATE_IRST)
    2d84:	40060205 	andmi	r0, r6, r5, lsl #4
    2d88:	01060905 	tsteq	r6, r5, lsl #18
    2d8c:	03060305 	movweq	r0, #25349	; 0x6305
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d90:	0605204f 	streq	r2, [r5], -pc, asr #32
    2d94:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			delay (1, DR_XMIT);
    2d98:	03053d06 	movweq	r3, #23814	; 0x5d06
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d9c:	0606054c 	streq	r0, [r6], -ip, asr #10
    2da0:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    2da4:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2da8:	05130609 	ldreq	r0, [r3, #-1545]	; 0xfffff9f7
    2dac:	05440602 	strbeq	r0, [r4, #-1538]	; 0xfffff9fe
				RF_cmdPropTx . status = 0;
    2db0:	05221403 	streq	r1, [r2, #-1027]!	; 0xfffffbfd
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2db4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
				issue_cmd ((lword)&RF_cmdPropTx);
    2db8:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
				proceed (DR_XMIT);
    2dbc:	13053006 	movwne	r3, #20486	; 0x5006
    2dc0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			txtries++;
    2dc4:	17052f06 	strne	r2, [r5, -r6, lsl #30]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2dc8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2dcc:	06040520 	streq	r0, [r4], -r0, lsr #10
    2dd0:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dd4:	20100501 	andscs	r0, r0, r1, lsl #10
		goto DR_LOOP__;
    2dd8:	30060405 	andcc	r0, r6, r5, lsl #8
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ddc:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
		paylen = 0;
    2de0:	1a051503 	bne	1481f4 <__ccfg+0x12824c>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2de4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
		txtries = 0;
    2de8:	1e1a0530 	cfmvr64hne	r0, mvdx10
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dec:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    2df0:	01061505 	tsteq	r6, r5, lsl #10
    2df4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2df8:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    2dfc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		    tcvphy_top (physid) == NULL)
    2e00:	06052512 			; <UNDEFINED> instruction: 0x06052512
    2e04:	25120529 	ldrcs	r0, [r2, #-1321]	; 0xfffffad7
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e08:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    2e0c:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
			rf_off ();
    2e10:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
endthread
    2e14:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2e18:	1b030601 	blne	c4624 <__ccfg+0xa467c>
    2e1c:	000e0201 	andeq	r0, lr, r1, lsl #4
    2e20:	2c050101 	stfcss	f0, [r5], {1}
    2e24:	fc020500 	stc2	5, cr0, [r2], {-0}
    2e28:	0300001b 	movweq	r0, #27
    2e2c:	050102ab 	streq	r0, [r1, #-683]	; 0xfffffd55
    2e30:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2e34:	200e062c 	andcs	r0, lr, ip, lsr #12
    2e38:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    2e3c:	19051c2c 	stmdbne	r5, {r2, r3, r5, sl, fp, ip}
    2e40:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
    2e44:	23060205 	movwcs	r0, #25093	; 0x6205
    2e48:	03060a05 	movweq	r0, #27141	; 0x6a05
    2e4c:	0c05010b 	stfeqs	f0, [r5], {11}
    2e50:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
void RFCCPE0IntHandler (void) {
    2e54:	0323260a 			; <UNDEFINED> instruction: 0x0323260a
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e58:	02052076 	andeq	r2, r5, #118	; 0x76
		_BIS (dstate, DSTATE_IRST);
    2e5c:	05182f06 	ldreq	r2, [r8, #-3846]	; 0xfffff0fa
    2e60:	05131403 	ldreq	r1, [r3, #-1027]	; 0xfffffbfd
    2e64:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e68:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e6c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2e70:	200f0301 	andcs	r0, pc, r1, lsl #6
	p_trigger (drvprcs, qevent);
    2e74:	03060b05 	movweq	r0, #27397	; 0x6b05
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e78:	0c052073 	stceq	0, cr2, [r5], {115}	; 0x73
    2e7c:	04052006 	streq	r2, [r5], #-6
    2e80:	052f0620 	streq	r0, [pc, #-1568]!	; 2868 <option+0xe4>
    2e84:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    2e88:	0b030602 	bleq	c4698 <__ccfg+0xa46f0>
    2e8c:	06090520 	streq	r0, [r9], -r0, lsr #10
    2e90:	00040201 	andeq	r0, r4, r1, lsl #4
    2e94:	20050101 	andcs	r0, r5, r1, lsl #2
    2e98:	30020500 	andcc	r0, r2, r0, lsl #10
    2e9c:	0300001c 	movweq	r0, #28
	RISE_N_SHINE;
    2ea0:	05010881 	streq	r0, [r1, #-2177]	; 0xfffff77f
    2ea4:	01090302 	tsteq	r9, r2, lsl #6
    2ea8:	01061505 	tsteq	r6, r5, lsl #10
}
    2eac:	77032005 	strvc	r2, [r3, -r5]
    2eb0:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    2eb4:	02052009 	andeq	r2, r5, #9
    2eb8:	1d050523 	cfstr32ne	mvfx0, [r5, #-140]	; 0xffffff74
    2ebc:	21060305 	tstcs	r6, r5, lsl #6
    2ec0:	01061a05 	tsteq	r6, r5, lsl #20
void phys_cc1350 (int phy, int mbs) {
    2ec4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
	if (rbuffl != 0)
    2ec8:	01000402 	tsteq	r0, r2, lsl #8
    2ecc:	00210501 	eoreq	r0, r1, r1, lsl #10
		syserror (ETOOMANY, "cc13");
    2ed0:	00000205 	andeq	r0, r0, r5, lsl #4
		syserror (EREQPAR, "cc13 mb");
    2ed4:	94030000 	strls	r0, [r3], #-0
	if (mbs == 0)
    2ed8:	02050108 	andeq	r0, r5, #8, 2
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2edc:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
		syserror (EREQPAR, "cc13 mb");
    2ee0:	77030621 	strvc	r0, [r3, -r1, lsr #12]
    2ee4:	03050501 	movweq	r0, #21761	; 0x5501
	i = 0;
    2ee8:	03053c09 	movweq	r3, #23561	; 0x5c09
	rbuffl = (byte) mbs;
    2eec:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
		db->config.type = 0;	// General (data in structure)
    2ef0:	0a050106 	beq	143310 <__ccfg+0x123368>
	rbuffl = (byte) mbs;
    2ef4:	2008052e 	andcs	r0, r8, lr, lsr #10
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2ef8:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
    2efc:	03051e08 	movweq	r1, #24072	; 0x5e08
		if (db == NULL)
    2f00:	02054c06 	andeq	r4, r5, #1536	; 0x600
			syserror (EMALLOC, "cc13");
    2f04:	06090514 			; <UNDEFINED> instruction: 0x06090514
    2f08:	5a010501 	bpl	44314 <__ccfg+0x2436c>
    2f0c:	01000602 	tsteq	r0, r2, lsl #12
		db->status = DATA_ENTRY_PENDING;
    2f10:	00200501 	eoreq	r0, r0, r1, lsl #10
		if (i)
    2f14:	00000205 	andeq	r0, r0, r5, lsl #4
			da->pNextEntry = (byte*) db;
    2f18:	a7030000 	strge	r0, [r3, -r0]
		db->length = rbuffl + 2;
    2f1c:	02050108 	andeq	r0, r5, #8, 2
    2f20:	13010903 	movwne	r0, #6403	; 0x1903
		db->config.type = 0;	// General (data in structure)
    2f24:	06200514 			; <UNDEFINED> instruction: 0x06200514
		db->length = rbuffl + 2;
    2f28:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
	db->pNextEntry = (byte*) re;
    2f2c:	200c031d 	andcs	r0, ip, sp, lsl r3
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f30:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2f34:	2f05200b 	svccs	0x0005200b
	if (rbuffs == NULL)
    2f38:	02052006 	andeq	r2, r5, #6
	rbuffs->pCurrEntry = (byte*) re;
    2f3c:	24060106 	strcs	r0, [r6], #-262	; 0xfffffefa
	rbuffs->pLastEntry = NULL;
    2f40:	2e060505 	cfsh32cs	mvfx0, mvfx6, #5
    2f44:	21060305 	tstcs	r6, r5, lsl #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f48:	01060705 	tsteq	r6, r5, lsl #14
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2f4c:	4c060205 	sfmmi	f0, 4, [r6], {5}
    2f50:	01060905 	tsteq	r6, r5, lsl #18
    2f54:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
	rbuffl -= 2;
    2f58:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f5c:	0623052e 	strteq	r0, [r3], -lr, lsr #10
	rbuffl -= 2;
    2f60:	0606052d 	streq	r0, [r6], -sp, lsr #10
	physid = phy;
    2f64:	060e054a 	streq	r0, [lr], -sl, asr #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f68:	00040201 	andeq	r0, r4, r1, lsl #4
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f6c:	23050101 	movwcs	r0, #20737	; 0x5101
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f70:	48020500 	stmdami	r2, {r8, sl}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f74:	0300001c 	movweq	r0, #28
    2f78:	05010981 	streq	r0, [r1, #-2433]	; 0xfffff67f
	utimer_add (&bckf_timer);
    2f7c:	13134102 	tstne	r3, #-2147483648	; 0x80000000
	drvprcs = runthread (cc1350_driver);
    2f80:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    2f84:	75030623 	strvc	r0, [r3, #-1571]	; 0xfffff9dd
    2f88:	03020501 	movweq	r0, #9473	; 0x2501
	if (drvprcs == 0)
    2f8c:	061f3c0c 	ldreq	r3, [pc], -ip, lsl #24
		syserror (ERESOURCE, "cc13");
    2f90:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    2f94:	28030608 	stmdacs	r3, {r3, r9, sl}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f98:	03020520 	movweq	r0, #9504	; 0x2520
    2f9c:	1c052058 	stcne	0, cr2, [r5], {88}	; 0x58
    2fa0:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fa4:	2e5d0302 	cdpcs	3, 5, cr0, cr13, cr2, {0}
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2fa8:	05142e06 	ldreq	r2, [r4, #-3590]	; 0xfffff1fa
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fac:	09050108 	stmdbeq	r5, {r3, r8}
    2fb0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2fb4:	06020520 	streq	r0, [r2], -r0, lsr #10
    2fb8:	2000c703 	andcs	ip, r0, r3, lsl #14
    2fbc:	02043d3d 	andeq	r3, r4, #3904	; 0xf40
    2fc0:	03060d05 	movweq	r0, #27909	; 0x6d05
    2fc4:	04017bcf 	streq	r7, [r1], #-3023	; 0xfffff431
    2fc8:	060f0501 	streq	r0, [pc], -r1, lsl #10
    2fcc:	2004b103 	andcs	fp, r4, r3, lsl #2
	plugch ();
    2fd0:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd4:	03240502 			; <UNDEFINED> instruction: 0x03240502
    2fd8:	05017bca 	streq	r7, [r1, #-3018]	; 0xfffff436
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fdc:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2fe0:	01040106 	tsteq	r4, r6, lsl #2
    2fe4:	b1030205 	tstlt	r3, r5, lsl #4
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2fe8:	2f062004 	svccs	0x00062004
}
    2fec:	05580101 	ldrbeq	r0, [r8, #-257]	; 0xfffffeff
    2ff0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2ff4:	b6030603 	strlt	r0, [r3], -r3, lsl #12
    2ff8:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    2ffc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3000:	05134b06 	ldreq	r4, [r3, #-2822]	; 0xfffff4fa
    3004:	05200607 	streq	r0, [r0, #-1543]!	; 0xfffff9f9
    3008:	134b0605 	movtne	r0, #46597	; 0xb605
    300c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3010:	0c052d01 	stceq	13, cr2, [r5], {1}
    3014:	03080528 	movweq	r0, #34088	; 0x8528
    3018:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    301c:	05153206 	ldreq	r3, [r5, #-518]	; 0xfffffdfa
    3020:	050f0608 	streq	r0, [pc, #-1544]	; 2a20 <rf_on.part.0+0xc>
    3024:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    3028:	74310305 	ldrtvc	r0, [r1], #-773	; 0xfffffcfb
    302c:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3030:	054a4e03 	strbeq	r4, [sl, #-3587]	; 0xfffff1fd
    3034:	0605411d 			; <UNDEFINED> instruction: 0x0605411d
    3038:	08052d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, sp}
    303c:	06050106 	streq	r0, [r5], -r6, lsl #2
    3040:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    3044:	0511060b 	ldreq	r0, [r1, #-1547]	; 0xfffff9f5
    3048:	06053c18 			; <UNDEFINED> instruction: 0x06053c18
    304c:	060b052f 	streq	r0, [fp], -pc, lsr #10
    3050:	03040546 	movweq	r0, #17734	; 0x4546
    3054:	08052e31 	stmdaeq	r5, {r0, r4, r5, r9, sl, fp, sp}
    3058:	6a030106 	bvs	c3478 <__ccfg+0xa34d0>
    305c:	06050520 	streq	r0, [r5], -r0, lsr #10
    3060:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    3064:	01061505 	tsteq	r6, r5, lsl #10
    3068:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
    306c:	06052e08 	streq	r2, [r5], -r8, lsl #28
    3070:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
    3074:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3078:	05210607 	streq	r0, [r1, #-1543]!	; 0xfffff9f9
    307c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3080:	05590606 	ldrbeq	r0, [r9, #-1542]	; 0xfffff9fa
    3084:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    3088:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    308c:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    3090:	05590605 	ldrbeq	r0, [r9, #-1541]	; 0xfffff9fb
    3094:	16051406 	strne	r1, [r5], -r6, lsl #8
    3098:	08050106 	stmdaeq	r5, {r1, r2, r8}
    309c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    30a0:	06090521 	streq	r0, [r9], -r1, lsr #10
    30a4:	200c0501 	andcs	r0, ip, r1, lsl #10
    30a8:	2f060605 	svccs	0x00060605
    30ac:	01060805 	tsteq	r6, r5, lsl #16
    30b0:	2a060b05 	bcs	185ccc <__ccfg+0x165d24>
    30b4:	14060805 	strne	r0, [r6], #-2053	; 0xfffff7fb
    30b8:	051d1c05 	ldreq	r1, [sp, #-3077]	; 0xfffff3fb
    30bc:	05350605 	ldreq	r0, [r5, #-1541]!	; 0xfffff9fb
    30c0:	05591306 	ldrbeq	r1, [r9, #-774]	; 0xfffffcfa
    30c4:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    30c8:	0a051f08 	beq	14acf0 <__ccfg+0x12ad48>
    30cc:	0606052d 	streq	r0, [r6], -sp, lsr #10
    30d0:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    30d4:	06050106 	streq	r0, [r5], -r6, lsl #2
strand (__outserial, const char*)
    30d8:	16052106 	strne	r2, [r5], -r6, lsl #2
    30dc:	08050106 	stmdaeq	r5, {r1, r2, r8}
    30e0:	0b05222c 	bleq	14b998 <__ccfg+0x12b9f0>
    30e4:	06051b06 	streq	r1, [r5], -r6, lsl #22
endstrand
    30e8:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    30ec:	20090306 	andcs	r0, r9, r6, lsl #6
	ptr = data;
    30f0:	01060805 	tsteq	r6, r5, lsl #16
    30f4:	2f060605 	svccs	0x00060605
	if (*ptr)
    30f8:	03061c05 	movweq	r1, #27653	; 0x6c05
		len = strlen (ptr);
    30fc:	0a05016e 	beq	1436bc <__ccfg+0x123714>
    3100:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3104:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    3108:	03060520 	movweq	r0, #25888	; 0x6520
    310c:	052f2017 	streq	r2, [pc, #-23]!	; 30fd <__outserial+0x25>
    3110:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    3114:	051e060b 	ldreq	r0, [lr, #-1547]	; 0xfffff9f5
	len -= quant;
    3118:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    311c:	0405200b 	streq	r2, [r5], #-11
    3120:	3c0c0306 	stccc	3, cr0, [ip], {6}
	if (len == 0) {
    3124:	01000b02 	tsteq	r0, r2, lsl #22
		ufree (data);
    3128:	000f0501 	andeq	r0, pc, r1, lsl #10
		finish;
    312c:	1d840205 	sfmne	f0, 4, [r4, #20]
    3130:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3134:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    3138:	06250513 			; <UNDEFINED> instruction: 0x06250513
    313c:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
    3140:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    3144:	25052018 	strcs	r2, [r5, #-24]	; 0xffffffe8
strand (__inserial, address)
    3148:	2e0c0520 	cfsh32cs	mvfx0, mvfx12, #16
    314c:	21060205 	tstcs	r6, r5, lsl #4
    3150:	01051406 	tsteq	r5, r6, lsl #8
    3154:	00080231 	andeq	r0, r8, r1, lsr r2
    3158:	0cbb0101 	ldfeqs	f0, [fp], #4
	if (__inpline != NULL)
    315c:	00030000 	andeq	r0, r3, r0
    3160:	000001a5 	andeq	r0, r0, r5, lsr #3
		finish;
    3164:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3168:	0101000d 	tsteq	r1, sp
    316c:	00000101 	andeq	r0, r0, r1, lsl #2
    3170:	00000100 	andeq	r0, r0, r0, lsl #2
    3174:	6f682f01 	svcvs	0x00682f01
		umwait (IM_INIT);
    3178:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		release;
    317c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	savedata (data);
    3180:	442f6e65 	strtmi	r6, [pc], #-3685	; 3188 <__inserial+0x40>
	len = MAX_LINE_LENGTH;
    3184:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	io (IM_READ, __cport, READ, ptr, 1);
    3188:	4f2f706f 	svcmi	0x002f706f
    318c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3190:	502f5445 	eorpl	r5, pc, r5, asr #8
    3194:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (ptr == (char*) data) { // new line
    3198:	6369502f 	cmnvs	r9, #47	; 0x2f
    319c:	502f534f 	eorpl	r5, pc, pc, asr #6
		if (*ptr == '\0') { // bin cmd
    31a0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
			proceed (IM_BIN);
    31a4:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    31a8:	2f004974 	svccs	0x00004974
		if (*ptr < 0x20)
    31ac:	2f727375 	svccs	0x00727375
    31b0:	2f62696c 	svccs	0x0062696c
			proceed (IM_READ);
    31b4:	2f636367 	svccs	0x00636367
    31b8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
	if (*ptr == '\n' || *ptr == '\r') {
    31bc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    31c0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    31c4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
		*ptr = '\0';
    31c8:	2f312e32 	svccs	0x00312e32
		__inpline = (char*)data;
    31cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
		finish;
    31d0:	00656475 	rsbeq	r6, r5, r5, ror r4
	if (len) {
    31d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3120 <__outserial+0x48>
		ptr++;
    31d8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    31dc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
		len--;
    31e0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	proceed (IM_READ);
    31e4:	6f746b73 	svcvs	0x00746b73
	io (IM_BIN, __cport, READ, ptr, 1);
    31e8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    31ec:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    31f0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    31f4:	2f534f43 	svccs	0x00534f43
    31f8:	4f636950 	svcmi	0x00636950
	len -= 2;
    31fc:	43432f53 	movtmi	r2, #16211	; 0x3f53
	if (len > *ptr + 1) // 1 for 0x04
    3200:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3204:	6f682f00 	svcvs	0x00682f00
		len = *ptr + 1;
    3208:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    320c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	ptr++;
    3210:	442f6e65 	strtmi	r6, [pc], #-3685	; 3218 <__inserial+0xd0>
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3214:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3218:	4f2f706f 	svcmi	0x002f706f
    321c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3220:	502f5445 	eorpl	r5, pc, r5, asr #8
    3224:	534f4349 	movtpl	r4, #62281	; 0xf349
    3228:	6369502f 	cmnvs	r9, #47	; 0x2f
	len -= quant;
    322c:	2f00534f 	svccs	0x0000534f
		__inpline = (char*)data;
    3230:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		finish;
    3234:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	ptr += quant;
    3238:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    323c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
endstrand
    3240:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3244:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	proceed (IM_BINL);
    3248:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
endstrand
    324c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3250:	502f534f 	eorpl	r5, pc, pc, asr #6
    3254:	534f6369 	movtpl	r6, #62313	; 0xf369
    3258:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    325c:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3260:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		if (res && (d < n))
    3264:	0100632e 	tsteq	r0, lr, lsr #6
    3268:	74730000 	ldrbtvc	r0, [r3], #-0
    326c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3270:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			res [d] = (char) c;
    3274:	74730000 	ldrbtvc	r0, [r3], #-0
		d++;
    3278:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    327c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3280:	72610000 	rsbvc	r0, r1, #0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3284:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3288:	00000300 	andeq	r0, r0, r0, lsl #6
    328c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
				enci (10000);
    3290:	0300682e 	movweq	r6, #2094	; 0x82e
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3294:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3298:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
	d = 0;
    329c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
		c = *fm++;
    32a0:	00000300 	andeq	r0, r0, r0, lsl #6
		if (c == '\\') {
    32a4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
			if ((c = *fm++) == '\0') {
    32a8:	5f736e6f 	svcpl	0x00736e6f
    32ac:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
				outc ('\\');
    32b0:	00030068 	andeq	r0, r3, r8, rrx
			if ((c = *fm++) == '\0') {
    32b4:	73797300 	cmnvc	r9, #0, 6
				outc ('\\');
    32b8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    32bc:	00000400 	andeq	r0, r0, r0, lsl #8
			outc (c);
    32c0:	5f766374 	svcpl	0x00766374
    32c4:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
			if (c == '\0')
    32c8:	0100682e 	tsteq	r0, lr, lsr #16
    32cc:	656b0000 	strbvs	r0, [fp, #-0]!
			outc (c);
    32d0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
				outc (val);
    32d4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
				val = (word) va_arg (ap, aword);
    32d8:	63740000 	cmnvs	r4, #0
		if (c == '%') {
    32dc:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    32e0:	00682e73 	rsbeq	r2, r8, r3, ror lr
			c = *fm++;
    32e4:	74000001 	strvc	r0, [r0], #-1
			switch (c) {
    32e8:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    32ec:	5f65646f 	svcpl	0x0065646f
    32f0:	61746164 	cmnvs	r4, r4, ror #2
    32f4:	0100682e 	tsteq	r0, lr, lsr #16
    32f8:	623c0000 	eorsvs	r0, ip, #0
    32fc:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    3300:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    3304:	00000000 	andeq	r0, r0, r0
				outc ('%');
    3308:	00310500 	eorseq	r0, r1, r0, lsl #10
    330c:	1da80205 	sfmne	f0, 4, [r8, #20]!
				outc (c);
    3310:	93030000 	movwls	r0, #12288	; 0x3000
    3314:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    3318:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
				if (c == '\0')
    331c:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
				return d;
    3320:	07052001 	streq	r2, [r5, -r1]
}
    3324:	22160526 	andscs	r0, r6, #159383552	; 0x9800000
    3328:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
			switch (c) {
    332c:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    3330:	0513061a 	ldreq	r0, [r3, #-1562]	; 0xfffff9e6
    3334:	02051f0e 	andeq	r1, r5, #14, 30	; 0x38
				for (i = 12; ; i -= 4) {
    3338:	1a052106 	bne	14b758 <__ccfg+0x12b7b0>
				val = (word) va_arg (ap, aword);
    333c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
						[ (val >> i) & 0xf ]);
    3340:	200c0306 	andcs	r0, ip, r6, lsl #6
    3344:	16060105 	strne	r0, [r6], -r5, lsl #2
    3348:	01000102 	tsteq	r0, r2, lsl #2
					outc (__pi_hex_enc_table
    334c:	002e0501 	eoreq	r0, lr, r1, lsl #10
    3350:	1dbe0205 	lfmne	f0, 4, [lr, #20]!
					if (i == 0)
    3354:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3358:	02050100 	andeq	r0, r5, #0, 2
				for (i = 12; ; i -= 4) {
    335c:	06060516 			; <UNDEFINED> instruction: 0x06060516
				val = (word) va_arg (ap, aword);
    3360:	20050501 	andcs	r0, r5, r1, lsl #10
				if (c == 'd' && (val & 0x8000) != 0) {
    3364:	2f060305 	svccs	0x00060305
				val = (word) va_arg (ap, aword);
    3368:	01062905 	tsteq	r6, r5, lsl #18
				if (c == 'd' && (val & 0x8000) != 0) {
    336c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    3370:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
					outc ('-');
    3374:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    3378:	0305201c 	movweq	r2, #20508	; 0x501c
					val = (~val) + 1;
    337c:	1a052106 	bne	14b79c <__ccfg+0x12b7f4>
    3380:	01050106 	tsteq	r5, r6, lsl #2
				for (i = 12; ; i -= 4) {
    3384:	0001024c 	andeq	r0, r1, ip, asr #4
				enci (10000);
    3388:	2e050101 	adfcss	f0, f5, f1
    338c:	d8020500 	stmdale	r2, {r8, sl}
    3390:	0300001d 	movweq	r0, #29
    3394:	05010283 	streq	r0, [r1, #-643]	; 0xfffffd7d
    3398:	2e051602 	cfmadd32cs	mvax0, mvfx1, mvfx5, mvfx2
    339c:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    33a0:	012f0624 			; <UNDEFINED> instruction: 0x012f0624
    33a4:	01011301 	tsteq	r1, r1, lsl #6
    33a8:	06010514 			; <UNDEFINED> instruction: 0x06010514
    33ac:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    33b0:	01000202 	tsteq	r0, r2, lsl #4
    33b4:	003a0501 	eorseq	r0, sl, r1, lsl #10
    33b8:	1de80205 	sfmne	f0, 2, [r8, #20]!
    33bc:	a7030000 	strge	r0, [r3, -r0]
    33c0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    33c4:	3a052406 	bcc	14c3e4 <__ccfg+0x12c43c>
    33c8:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    33cc:	3a050124 	bcc	143864 <__ccfg+0x1238bc>
				if (c == 'd' || c == 'u') {
    33d0:	02051c06 	andeq	r1, r5, #1536	; 0x600
    33d4:	4a200624 	bmi	804c6c <__ccfg+0x7e4cc4>
					if (c == 'd' &&
    33d8:	06050513 			; <UNDEFINED> instruction: 0x06050513
					val = va_arg (ap, lword);
    33dc:	06030501 	streq	r0, [r3], -r1, lsl #10
					fm++;
    33e0:	2f02053d 	svccs	0x0002053d
					if (c == 'd' &&
    33e4:	01060605 	tsteq	r6, r5, lsl #12
    33e8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
						outc ('-');
    33ec:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    33f0:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
						val = (~val) + 1;
    33f4:	03052114 	movweq	r2, #20756	; 0x5114
				enci (10000);
    33f8:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
					enci (1000000000UL);
    33fc:	11050106 	tstne	r5, r6, lsl #2
    3400:	06030520 	streq	r0, [r3], -r0, lsr #10
    3404:	060b0521 	streq	r0, [fp], -r1, lsr #10
    3408:	06020501 	streq	r0, [r2], -r1, lsl #10
    340c:	06190528 	ldreq	r0, [r9], -r8, lsr #10
    3410:	4b010501 	blmi	4481c <__ccfg+0x24874>
    3414:	03060305 	movweq	r0, #25349	; 0x6305
    3418:	1405207a 	strne	r2, [r5], #-122	; 0xffffff86
    341c:	03050106 	movweq	r0, #20742	; 0x5106
    3420:	17052106 	strne	r2, [r5, -r6, lsl #2]
    3424:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    3428:	06030520 	streq	r0, [r3], -r0, lsr #10
    342c:	06110521 	ldreq	r0, [r1], -r1, lsr #10
    3430:	06030501 	streq	r0, [r3], -r1, lsl #10
    3434:	060b0521 	streq	r0, [fp], -r1, lsr #10
    3438:	00050201 	andeq	r0, r5, r1, lsl #4
    343c:	3a050101 	bcc	143848 <__ccfg+0x1238a0>
				} else if (c == 'x') {
    3440:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
					for (i = 28; ; i -= 4) {
    3444:	0300001e 	movweq	r0, #30
					val = va_arg (ap, lword);
    3448:	060101df 			; <UNDEFINED> instruction: 0x060101df
							[ (val >> i) & 0xf ]);
    344c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3450:	30200903 	eorcc	r0, r0, r3, lsl #18
						outc (__pi_hex_enc_table
    3454:	05840405 	streq	r0, [r4, #1029]	; 0x405
    3458:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    345c:	014c0604 	cmpeq	ip, r4, lsl #12
						if (i == 0)
    3460:	4a065806 	bmi	199480 <__ccfg+0x1794d8>
    3464:	03062706 	movweq	r2, #26374	; 0x6706
					for (i = 28; ; i -= 4) {
    3468:	05133c79 	ldreq	r3, [r3, #-3193]	; 0xfffff387
					outc ('%');
    346c:	12030601 	andne	r0, r3, #1048576	; 0x100000
    3470:	03040520 	movweq	r0, #17696	; 0x4520
    3474:	2b062e75 	blcs	18ee50 <__ccfg+0x16eea8>
					outc ('l');
    3478:	01061b05 	tsteq	r6, r5, lsl #22
    347c:	4c060405 	cfstrsmi	mvf0, [r6], {5}
				val = (word) va_arg (ap, aword);
    3480:	132e9001 			; <UNDEFINED> instruction: 0x132e9001
				outc (val);
    3484:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    3488:	0304051a 	movweq	r0, #17690	; 0x451a
				while (*st != '\0') {
    348c:	01052e78 	tsteq	r5, r8, ror lr
    3490:	000c0236 	andeq	r0, ip, r6, lsr r2
    3494:	31050101 	tstcc	r5, r1, lsl #2
    3498:	c0020500 	andgt	r0, r2, r0, lsl #10
					outc (*st);
    349c:	0300001e 	movweq	r0, #30
    34a0:	050102ba 	streq	r0, [r1, #-698]	; 0xfffffd46
					st++;
    34a4:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
		c = *fm++;
    34a8:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
    34ac:	03060501 	movweq	r0, #25857	; 0x6501
    34b0:	04052009 	streq	r2, [r5], #-9
char *vform (char *res, const char *fm, va_list aq) {
    34b4:	0602052d 	streq	r0, [r2], -sp, lsr #10
    34b8:	0605052f 	streq	r0, [r5], -pc, lsr #10
	if (res != NULL) {
    34bc:	06030501 	streq	r0, [r3], -r1, lsl #10
		__pi_vfparse (res, MAX_WORD, fm, aq);
    34c0:	6606012f 	strvs	r0, [r6], -pc, lsr #2
    34c4:	21064a06 	tstcs	r6, r6, lsl #20
    34c8:	01133b06 	tsteq	r3, r6, lsl #22
}
    34cc:	064a6606 	strbeq	r6, [sl], -r6, lsl #12
    34d0:	05132e2e 	ldreq	r2, [r3, #-3630]	; 0xfffff1d2
	fml = strlen (fm) + 17;
    34d4:	09030601 	stmdbeq	r3, {r0, r9, sl}
    34d8:	0303053c 	movweq	r0, #13628	; 0x353c
    34dc:	36062e77 			; <UNDEFINED> instruction: 0x36062e77
	if ((res = (char*) umalloc (fml)) == NULL)
    34e0:	21060105 	tstcs	r6, r5, lsl #2
    34e4:	022d0305 	eoreq	r0, sp, #335544320	; 0x14000000
    34e8:	0101000b 	tsteq	r1, fp
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    34ec:	05004a05 	streq	r4, [r0, #-2565]	; 0xfffff5fb
    34f0:	001f3002 	andseq	r3, pc, r2
    34f4:	03f50300 	mvnseq	r0, #0, 6
    34f8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		ufree (res);
    34fc:	13141313 	tstne	r4, #1275068416	; 0x4c000000
		goto Again;
    3500:	03064a05 	movweq	r4, #27141	; 0x6a05
	if (buf == NULL || fmt == NULL)
    3504:	053c0179 	ldreq	r0, [ip, #-377]!	; 0xfffffe87
int vscan (const char *buf, const char *fmt, va_list ap) {
    3508:	3c0b0305 	stccc	3, cr0, [fp], {5}
	if (buf == NULL || fmt == NULL)
    350c:	75034a05 	strvc	r4, [r3, #-2565]	; 0xfffff5fb
    3510:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    3514:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
		    	    case 'u': scanu (lword); break;
    3518:	30050106 	andcc	r0, r5, r6, lsl #2
			while (isspace (*buf)) buf++;
    351c:	20250520 	eorcs	r0, r5, r0, lsr #10
    3520:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
	while (*fmt != '\0') {
    3524:	25053c30 	strcs	r3, [r5, #-3120]	; 0xfffff3d0
		if (*fmt++ != '%')
    3528:	06040520 	streq	r0, [r4], -r0, lsr #10
		switch (*fmt++) {
    352c:	0603054b 	streq	r0, [r3], -fp, asr #10
    3530:	052e1503 	streq	r1, [lr, #-1283]!	; 0xfffffafd
    3534:	6e030602 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx2
    3538:	1713132e 	ldrne	r1, [r3, -lr, lsr #6]
    353c:	01061205 	tsteq	r6, r5, lsl #4
    3540:	76060205 	strvc	r0, [r6], -r5, lsl #4
    3544:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
}
    3548:	0520060a 	streq	r0, [r0, #-1546]!	; 0xfffff9f6
		switch (*fmt++) {
    354c:	052f0603 	streq	r0, [pc, #-1539]!	; 2f51 <phys_cc1350+0x8d>
    3550:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3554:	22052e06 	andcs	r2, r5, #6, 28	; 0x60
    3558:	24051f06 	strcs	r1, [r5], #-3846	; 0xfffff0fa
			while (isspace (*buf)) buf++;
    355c:	0f050106 	svceq	0x00050106
    3560:	02052006 	andeq	r2, r5, #6
    3564:	0a050106 	beq	143984 <__ccfg+0x1239dc>
    3568:	03010533 	movweq	r0, #5427	; 0x1533
    356c:	02052e13 	andeq	r2, r5, #304	; 0x130
    3570:	66730306 	ldrbtvs	r0, [r3], -r6, lsl #6
			if (*buf == '\0')
    3574:	15061a05 	strne	r1, [r6, #-2565]	; 0xfffff5fb
			if (*buf != ',') {
    3578:	05391305 	ldreq	r1, [r9, #-773]!	; 0xfffffcfb
			sap = va_arg (ap, char*);
    357c:	052f0602 	streq	r0, [pc, #-1538]!	; 2f82 <phys_cc1350+0xbe>
			nc++;
    3580:	0514061a 	ldreq	r0, [r4, #-1562]	; 0xfffff9e6
			if (*buf != ',') {
    3584:	2f061e02 	svccs	0x00061e02
				while (!isspace (*buf) && *buf != ',' &&
    3588:	4a011413 	bmi	485dc <__ccfg+0x28634>
    358c:	0605143c 			; <UNDEFINED> instruction: 0x0605143c
    3590:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3594:	0602054a 	streq	r0, [r2], -sl, asr #10
    3598:	06130532 			; <UNDEFINED> instruction: 0x06130532
    359c:	06020501 	streq	r0, [r2], -r1, lsl #10
    35a0:	0609052f 	streq	r0, [r9], -pc, lsr #10
			while (isspace (*buf)) buf++;
    35a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    35a8:	15206d03 	strne	r6, [r0, #-3331]!	; 0xfffff2fd
    35ac:	01061305 	tsteq	r6, r5, lsl #6
    35b0:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    35b4:	01060505 	tsteq	r6, r5, lsl #10
			if (*buf == ',') buf++;
    35b8:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    35bc:	01001002 	tsteq	r0, r2
			*sap = '\0';
    35c0:	003a0501 	eorseq	r0, sl, r1, lsl #10
			break;
    35c4:	00000205 	andeq	r0, r0, r5, lsl #4
		    case 'd': scani (word); break;
    35c8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    35cc:	02050104 	andeq	r0, r5, #4, 2
    35d0:	01141314 	tsteq	r4, r4, lsl r3
    35d4:	1b063a05 	blne	191df0 <__ccfg+0x171e48>
    35d8:	25020520 	strcs	r0, [r2, #-1312]	; 0xfffffae0
    35dc:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    35e0:	79030627 	stmdbvc	r3, {r0, r1, r2, r5, r9, sl}
    35e4:	1514143c 	ldrne	r1, [r4, #-1084]	; 0xfffffbc4
    35e8:	4a580601 	bmi	1604df4 <__ccfg+0x15e4e4c>
    35ec:	142e2e06 	strtne	r2, [lr], #-3590	; 0xfffff1fa
    35f0:	01060605 	tsteq	r6, r5, lsl #12
    35f4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    35f8:	0305300a 	movweq	r3, #20490	; 0x500a
    35fc:	05134106 	ldreq	r4, [r3, #-262]	; 0xfffffefa
    3600:	0a052b08 	beq	14e228 <__ccfg+0x12e280>
    3604:	08050106 	stmdaeq	r5, {r1, r2, r8}
    3608:	06020520 	streq	r0, [r2], -r0, lsr #10
    360c:	13053d33 	movwne	r3, #23859	; 0x5d33
    3610:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3614:	01053d06 	tsteq	r5, r6, lsl #26
    3618:	0b021306 	bleq	88238 <__ccfg+0x68290>
    361c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3620:	02050043 	andeq	r0, r5, #67	; 0x43
    3624:	00001ff0 	strdeq	r1, [r0], -r0
    3628:	0104c903 	tsteq	r4, r3, lsl #18
    362c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3630:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3634:	26052f0f 	strcs	r2, [r5], -pc, lsl #30
		    case 'u': scanu (word); break;
    3638:	211d053b 	tstcs	sp, fp, lsr r5
    363c:	31060205 	tstcc	r6, r5, lsl #4
    3640:	01061005 	tsteq	r6, r5
    3644:	2f060205 	svccs	0x00060205
    3648:	01060905 	tsteq	r6, r5, lsl #18
    364c:	052b0a05 	streq	r0, [fp, #-2565]!	; 0xfffff5fb
    3650:	04023201 	streq	r3, [r2], #-513	; 0xfffffdff
    3654:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3658:	0205003c 	andeq	r0, r5, #60	; 0x3c
    365c:	00002014 	andeq	r2, r0, r4, lsl r0
    3660:	0104d503 	tsteq	r4, r3, lsl #10
    3664:	13190205 	tstne	r9, #1342177280	; 0x50000000
    3668:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    366c:	7503063c 	strvc	r0, [r3, #-1596]	; 0xfffff9c4
    3670:	02052020 	andeq	r2, r5, #32
    3674:	20200b03 	eorcs	r0, r0, r3, lsl #22
    3678:	03064a06 	movweq	r4, #27142	; 0x6a06
    367c:	03062013 	movweq	r2, #24595	; 0x6013
		    case 'x': scanx (word); break;
    3680:	13143c6d 	tstne	r4, #27904	; 0x6d00
    3684:	01060405 	tsteq	r6, r5, lsl #8
    3688:	21060205 	tstcs	r6, r5, lsl #4
    368c:	01060505 	tsteq	r6, r5, lsl #10
    3690:	30060305 	andcc	r0, r6, r5, lsl #6
    3694:	01060605 	tsteq	r6, r5, lsl #12
    3698:	4b060405 	blmi	1846b4 <__ccfg+0x16470c>
    369c:	3302053d 	movwcc	r0, #9533	; 0x253d
    36a0:	1501013d 	strne	r0, [r1, #-317]	; 0xfffffec3
    36a4:	04051406 	streq	r1, [r5], #-1030	; 0xfffffbfa
    36a8:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    36ac:	4a060130 	bmi	183b74 <__ccfg+0x163bcc>
    36b0:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    36b4:	22053e13 	andcs	r3, r5, #304	; 0x130
    36b8:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    36bc:	06020557 			; <UNDEFINED> instruction: 0x06020557
    36c0:	06010523 	streq	r0, [r1], -r3, lsr #10
    36c4:	030a0513 	movweq	r0, #42259	; 0xa513
    36c8:	0b022e70 	bleq	8f090 <__ccfg+0x6f0e8>
    36cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36d0:	02050038 	andeq	r0, r5, #56	; 0x38
    36d4:	00000000 	andeq	r0, r0, r0
    36d8:	0104fc03 	tsteq	r4, r3, lsl #24	; <UNPREDICTABLE>
    36dc:	13160205 	tstne	r6, #1342177280	; 0x50000000
    36e0:	01141313 	tsteq	r4, r3, lsl r3
    36e4:	03063805 	movweq	r3, #26629	; 0x6805
    36e8:	02052077 	andeq	r2, r5, #119	; 0x77
    36ec:	20200903 	eorcs	r0, r0, r3, lsl #18
    36f0:	03054a06 	movweq	r4, #23046	; 0x5a06
    36f4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
			switch (*fmt++) {
    36f8:	03060205 	movweq	r0, #25093	; 0x6205
    36fc:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    3700:	01061a05 	tsteq	r6, r5, lsl #20
    3704:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3708:	052f0603 	streq	r0, [pc, #-1539]!	; 310d <__outserial+0x35>
    370c:	05131902 	ldreq	r1, [r3, #-2306]	; 0xfffff6fe
		    	    case 'd': scani (lword); break;
    3710:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3714:	03052005 	movweq	r2, #20485	; 0x5005
    3718:	200a0306 	andcs	r0, sl, r6, lsl #6
    371c:	03060505 	movweq	r0, #25861	; 0x6505
    3720:	0a050175 	beq	143cfc <__ccfg+0x123d54>
    3724:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    3728:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    372c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    3730:	052f0604 	streq	r0, [pc, #-1540]!	; 3134 <__outserial+0x5c>
    3734:	0511062c 	ldreq	r0, [r1, #-1580]	; 0xfffff9d4
    3738:	2a052106 	bcs	14bb58 <__ccfg+0x12bbb0>
    373c:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    3740:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
    3744:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    3748:	0305200c 	movweq	r2, #20492	; 0x500c
    374c:	20052f06 	andcs	r2, r5, r6, lsl #30
    3750:	06050106 	streq	r0, [r5], -r6, lsl #2
    3754:	20200520 	eorcs	r0, r0, r0, lsr #10
    3758:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    375c:	13330602 	teqne	r3, #2097152	; 0x200000
    3760:	01060505 	tsteq	r6, r5, lsl #10
    3764:	2a060305 	bcs	184380 <__ccfg+0x1643d8>
    3768:	06050542 	streq	r0, [r5], -r2, asr #10
		    	    case 'x': scanx (lword); break;
    376c:	230a050f 	movwcs	r0, #42255	; 0xa50f
    3770:	20061a05 	andcs	r1, r6, r5, lsl #20
    3774:	01060305 	tsteq	r6, r5, lsl #6
    3778:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    377c:	0604052e 	streq	r0, [r4], -lr, lsr #10
    3780:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    3784:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    3788:	05052007 	streq	r2, [r5, #-7]
    378c:	2c052f06 	stccs	15, cr2, [r5], {6}
    3790:	07051006 	streq	r1, [r5, -r6]
    3794:	062a0522 	strteq	r0, [sl], -r2, lsr #10
    3798:	000a021e 	andeq	r0, sl, lr, lsl r2
    379c:	38050101 	stmdacc	r5, {r0, r8}
    37a0:	00020500 	andeq	r0, r2, r0, lsl #10
    37a4:	03000000 	movweq	r0, #0
    37a8:	050105a3 	streq	r0, [r1, #-1443]	; 0xfffffa5d
    37ac:	13131602 	tstne	r3, #2097152	; 0x200000
    37b0:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    37b4:	77030638 	smladxvc	r3, r8, r6, r0
    37b8:	03020520 	movweq	r0, #9504	; 0x2520
    37bc:	06202009 	strteq	r2, [r0], -r9
    37c0:	0603054a 	streq	r0, [r3], -sl, asr #10
    37c4:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    37c8:	77030602 	strvc	r0, [r3, -r2, lsl #12]
    37cc:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
    37d0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    37d4:	03052005 	movweq	r2, #20485	; 0x5005
    37d8:	02052f06 	andeq	r2, r5, #6, 30
		    	    case 'd': scani (lword); break;
    37dc:	06050519 			; <UNDEFINED> instruction: 0x06050519
    37e0:	201b0501 	andscs	r0, fp, r1, lsl #10
    37e4:	6b033805 	blvs	d1800 <__ccfg+0xb1858>
    37e8:	06030520 	streq	r0, [r3], -r0, lsr #10
    37ec:	207cb303 	rsbscs	fp, ip, r3, lsl #6
    37f0:	01060505 	tsteq	r6, r5, lsl #10
    37f4:	21060305 	tstcs	r6, r5, lsl #6
		    	    case 'u': scanu (lword); break;
    37f8:	01060605 	tsteq	r6, r5, lsl #12
    37fc:	31060305 	tstcc	r6, r5, lsl #6
    3800:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    3804:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3808:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    380c:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    3810:	dc030609 	stcle	6, cr0, [r3], {9}
    3814:	21052003 	tstcs	r5, r3
    3818:	0c050106 	stfeqs	f0, [r5], {6}
    381c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3820:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    3824:	20060501 	andcs	r0, r6, r1, lsl #10
    3828:	05202005 	streq	r2, [r0, #-5]!
    382c:	02052006 	andeq	r2, r5, #6
    3830:	1b053306 	blne	150450 <__ccfg+0x1304a8>
    3834:	03050106 	movweq	r0, #20742	; 0x5106
    3838:	01052b06 	tsteq	r5, r6, lsl #22
    383c:	3c0a0306 	stccc	3, cr0, [sl], {6}
		    	    case 'x': scanx (lword); break;
    3840:	21060205 	tstcs	r6, r5, lsl #4
    3844:	01060905 	tsteq	r6, r5, lsl #18
			if ((c = *buf++) == '\0')
    3848:	20061905 	andcs	r1, r6, r5, lsl #18
    384c:	01060205 	tsteq	r6, r5, lsl #4
			sap = va_arg (ap, char*);
    3850:	0a030105 	beq	c3c6c <__ccfg+0xa3cc4>
			nc++;
    3854:	0603052e 	streq	r0, [r3], -lr, lsr #10
			break;
    3858:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
			while (isspace (*buf)) buf++;
    385c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    3860:	04052006 	streq	r2, [r5], #-6
    3864:	052f3006 	streq	r3, [pc, #-6]!	; 3866 <vscan+0x362>
						*sap++ = *buf++;
    3868:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    386c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
			while (isspace (*buf)) buf++;
    3870:	2b051b29 	blcs	14a51c <__ccfg+0x12a574>
    3874:	0a020106 	beq	83c94 <__ccfg+0x63cec>
    3878:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		return 0;
    387c:	02050016 	andeq	r0, r5, #22
    3880:	00002094 	muleq	r0, r4, r0
		    case 'x': scanx (word); break;
    3884:	0105cd03 	tsteq	r5, r3, lsl #26
    3888:	13130205 	tstne	r3, #1342177280	; 0x50000000
		    	    case 'x': scanx (lword); break;
    388c:	01141313 	tsteq	r4, r3, lsl r3
    3890:	03061605 	movweq	r1, #26117	; 0x6605
    3894:	0520207a 	streq	r2, [r0, #-122]!	; 0xffffff86
    3898:	06204202 	strteq	r4, [r0], -r2, lsl #4
    389c:	0624064a 	strteq	r0, [r4], -sl, asr #12
    38a0:	01141438 	tsteq	r4, r8, lsr r4
    38a4:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
    38a8:	05162e2e 	ldreq	r2, [r6, #-3630]	; 0xfffff1d2
    38ac:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    38b0:	052f0602 	streq	r0, [pc, #-1538]!	; 32b6 <__pi_vfparse+0x32>
    38b4:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    38b8:	02051e0e 	andeq	r1, r5, #14, 28	; 0xe0
    38bc:	0d053006 	stceq	0, cr3, [r5, #-24]	; 0xffffffe8
    38c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    38c4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    38c8:	06060522 	streq	r0, [r6], -r2, lsr #10
    38cc:	4e0a0501 	cfsh32mi	mvfx0, mvfx10, #1
    38d0:	21030105 	tstcs	r3, r5, lsl #2
    38d4:	06040520 	streq	r0, [r4], -r0, lsr #10
    38d8:	3d2e5c03 	stccc	12, cr5, [lr, #-12]!
    38dc:	05011703 	streq	r1, [r1, #-1795]	; 0xfffff8fd
    38e0:	2e6e0302 	cdpcs	3, 6, cr0, cr14, cr2, {0}
    38e4:	032e3c01 			; <UNDEFINED> instruction: 0x032e3c01
    38e8:	0b05010b 	bleq	143d1c <__ccfg+0x123d74>
    38ec:	17050106 	strne	r0, [r5, -r6, lsl #2]
    38f0:	200b054a 	andcs	r0, fp, sl, asr #10
    38f4:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    38f8:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    38fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3900:	054e0604 	strbeq	r0, [lr, #-1540]	; 0xfffff9fc
    3904:	10055002 	andne	r5, r5, r2
    3908:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    390c:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    3910:	03050106 	movweq	r0, #20742	; 0x5106
    3914:	1a052106 	bne	14bd34 <__ccfg+0x12bd8c>
    3918:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    391c:	1b054b06 	blne	15653c <__ccfg+0x136594>
    3920:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    3924:	02051f2f 	andeq	r1, r5, #47, 30	; 0xbc
    3928:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    392c:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    3930:	0101000c 	tsteq	r1, ip
    3934:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3938:	00215002 	eoreq	r5, r1, r2
    393c:	06870300 	streq	r0, [r7], r0, lsl #6
    3940:	16020501 	strne	r0, [r2], -r1, lsl #10
    3944:	0e064405 	cdpeq	4, 0, cr4, cr6, cr5, {0}
    3948:	06020520 	streq	r0, [r2], -r0, lsr #10
    394c:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    3950:	03440501 	movteq	r0, #17665	; 0x4501
    3954:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    3958:	4a090306 	bmi	244578 <__ccfg+0x2245d0>
    395c:	01060505 	tsteq	r6, r5, lsl #10
    3960:	2f060305 	svccs	0x00060305
    3964:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3968:	06030501 	streq	r0, [r3], -r1, lsl #10
    396c:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3970:	06020501 	streq	r0, [r2], -r1, lsl #10
    3974:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    3978:	00020213 	andeq	r0, r2, r3, lsl r2
    397c:	4b050101 	blmi	143d88 <__ccfg+0x123de0>
    3980:	00020500 	andeq	r0, r2, r0, lsl #10
    3984:	03000000 	movweq	r0, #0
    3988:	05010699 	streq	r0, [r1, #-1689]	; 0xfffff967
    398c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3990:	7a03064b 	bvc	c52c4 <__ccfg+0xa531c>
    3994:	261a0501 	ldrcs	r0, [sl], -r1, lsl #10
    3998:	7a034b05 	bvc	d65b4 <__ccfg+0xb660c>
    399c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    39a0:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    39a4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    39a8:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
    39ac:	01061605 	tsteq	r6, r5, lsl #12
    39b0:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    39b4:	01061605 	tsteq	r6, r5, lsl #12
    39b8:	5a060205 	bpl	1841d4 <__ccfg+0x16422c>
    39bc:	13060105 	movwne	r0, #24837	; 0x6105
    39c0:	01000202 	tsteq	r0, r2, lsl #4
    39c4:	00310501 	eorseq	r0, r1, r1, lsl #10
    39c8:	00000205 	andeq	r0, r0, r5, lsl #4
    39cc:	aa030000 	bge	c39d4 <__ccfg+0xa3a2c>
    39d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    39d4:	06050516 			; <UNDEFINED> instruction: 0x06050516
    39d8:	06030501 	streq	r0, [r3], -r1, lsl #10
    39dc:	06010521 	streq	r0, [r1], -r1, lsr #10
    39e0:	0001023d 	andeq	r0, r1, sp, lsr r2
    39e4:	48050101 	stmdami	r5, {r0, r8}
    39e8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    39ec:	03000021 	movweq	r0, #33	; 0x21
    39f0:	050106d1 	streq	r0, [r1, #-1745]	; 0xfffff92f
    39f4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    39f8:	02051c48 	andeq	r1, r5, #72, 24	; 0x4800
    39fc:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    3a00:	200e0648 	andcs	r0, lr, r8, asr #12
    3a04:	20240205 	eorcs	r0, r4, r5, lsl #4
    3a08:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3a0c:	13060105 	movwne	r0, #24837	; 0x6105
    3a10:	022d1305 	eoreq	r1, sp, #335544320	; 0x14000000
    3a14:	01010006 	tsteq	r1, r6
    3a18:	05004605 	streq	r4, [r0, #-1541]	; 0xfffff9fb
    3a1c:	0021b802 	eoreq	fp, r1, r2, lsl #16
    3a20:	06b20300 	ldrteq	r0, [r2], r0, lsl #6
    3a24:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3a28:	0d064605 	stceq	6, cr4, [r6, #-20]	; 0xffffffec
    3a2c:	05250505 	streq	r0, [r5, #-1285]!	; 0xfffffafb
    3a30:	052f0603 	streq	r0, [pc, #-1539]!	; 3435 <__pi_vfparse+0x1b1>
    3a34:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3a38:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3a3c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3a40:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    3a44:	01060705 	tsteq	r6, r5, lsl #14
    3a48:	30060405 	andcc	r0, r6, r5, lsl #8
    3a4c:	01060b05 	tsteq	r6, r5, lsl #22
    3a50:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    3a54:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    3a58:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3a5c:	20090301 	andcs	r0, r9, r1, lsl #6
    3a60:	03060305 	movweq	r0, #25349	; 0x6305
    3a64:	0605207a 			; <UNDEFINED> instruction: 0x0605207a
    3a68:	03050106 	movweq	r0, #20742	; 0x5106
    3a6c:	13053006 	movwne	r3, #20486	; 0x5006
    3a70:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3a74:	06014c06 	streq	r4, [r1], -r6, lsl #24
    3a78:	4a4a062e 	bmi	1285338 <__ccfg+0x1265390>
    3a7c:	06370513 			; <UNDEFINED> instruction: 0x06370513
    3a80:	21010501 	tstcs	r1, r1, lsl #10
    3a84:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    3a88:	3c71030b 	ldclcc	3, cr0, [r1], #-44	; 0xffffffd4
    3a8c:	01000b02 	tsteq	r0, r2, lsl #22
    3a90:	003d0501 	eorseq	r0, sp, r1, lsl #10
    3a94:	00000205 	andeq	r0, r0, r5, lsl #4
    3a98:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    3a9c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3aa0:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    3aa4:	02051c06 	andeq	r1, r5, #1536	; 0x600
    3aa8:	4a062024 	bmi	18bb40 <__ccfg+0x16bb98>
    3aac:	2505134a 	strcs	r1, [r5, #-842]	; 0xfffffcb6
    3ab0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3ab4:	43056706 	movwmi	r6, #22278	; 0x5706
    3ab8:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
    3abc:	2e43052e 	cdpcs	5, 4, cr0, cr3, cr14, {1}
    3ac0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    3ac4:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
    3ac8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3acc:	0205003d 	andeq	r0, r5, #61	; 0x3d
    3ad0:	00000000 	andeq	r0, r0, r0
    3ad4:	0106e203 	tsteq	r6, r3, lsl #4
    3ad8:	01160205 	tsteq	r6, r5, lsl #4
    3adc:	1c063d05 	stcne	13, cr3, [r6], {5}
    3ae0:	20240205 	eorcs	r0, r4, r5, lsl #4
    3ae4:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3ae8:	01062205 	tsteq	r6, r5, lsl #4
    3aec:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
    3af0:	01010005 	tsteq	r1, r5
    3af4:	05004005 	streq	r4, [r0, #-5]
    3af8:	00000002 	andeq	r0, r0, r2
    3afc:	06ea0300 	strbteq	r0, [sl], r0, lsl #6
    3b00:	16020501 	strne	r0, [r2], -r1, lsl #10
    3b04:	06400514 			; <UNDEFINED> instruction: 0x06400514
    3b08:	20017a03 	andcs	r7, r1, r3, lsl #20
    3b0c:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    3b10:	2e7a0340 	cdpcs	3, 7, cr0, cr10, cr0, {2}
    3b14:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    3b18:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3b1c:	05843306 	streq	r3, [r4, #774]	; 0x306
    3b20:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3b24:	11053102 	tstne	r5, r2, lsl #2
    3b28:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    3b2c:	1a051321 	bne	1487b8 <__ccfg+0x128810>
    3b30:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    3b34:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    3b38:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3b3c:	02022101 	andeq	r2, r2, #1073741824	; 0x40000000
    3b40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3b44:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	0106fe03 	tsteq	r6, r3, lsl #28	; <UNPREDICTABLE>
    3b50:	02160205 	andseq	r0, r6, #1342177280	; 0x50000000
    3b54:	01010003 	tsteq	r1, r3
    3b58:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    3b5c:	00221802 	eoreq	r1, r2, r2, lsl #16
    3b60:	07850300 	streq	r0, [r5, r0, lsl #6]
    3b64:	16020501 	strne	r0, [r2], -r1, lsl #10
    3b68:	06450514 			; <UNDEFINED> instruction: 0x06450514
    3b6c:	2e017a03 	vmlacs.f32	s14, s2, s6
    3b70:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3b74:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3b78:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3b7c:	052f0604 	streq	r0, [pc, #-1540]!	; 3580 <vscan+0x7c>
    3b80:	062f0603 	strteq	r0, [pc], -r3, lsl #12
    3b84:	2e06012e 	adfcssp	f0, f6, #0.5
    3b88:	033c4a06 	teqeq	ip, #24576	; 0x6000
    3b8c:	0c05011d 	stfeqs	f0, [r5], {29}
    3b90:	06050106 	streq	r0, [r5], -r6, lsl #2
    3b94:	350a052e 	strcc	r0, [sl, #-1326]	; 0xfffffad2
    3b98:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    3b9c:	73030604 	movwvc	r0, #13828	; 0x3604
    3ba0:	06200520 	strteq	r0, [r0], -r0, lsr #10
    3ba4:	31040501 	tstcc	r4, r1, lsl #10
    3ba8:	051d1205 	ldreq	r1, [sp, #-517]	; 0xfffffdfb
    3bac:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3bb0:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    3bb4:	2f3d0604 	svccs	0x003d0604
    3bb8:	01060b05 	tsteq	r6, r5, lsl #22
    3bbc:	41060205 	tstmi	r6, r5, lsl #4
    3bc0:	01060b05 	tsteq	r6, r5, lsl #22
    3bc4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3bc8:	052f0603 	streq	r0, [pc, #-1539]!	; 35cd <vscan+0xc9>
    3bcc:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    3bd0:	01010009 	tsteq	r1, r9
    3bd4:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    3bd8:	00228002 	eoreq	r8, r2, r2
    3bdc:	09860300 	stmibeq	r6, {r8, r9}
    3be0:	18020501 	stmdane	r2, {r0, r8, sl}
    3be4:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3be8:	03480501 	movteq	r0, #34049	; 0x8501
    3bec:	05202078 	streq	r2, [r0, #-120]!	; 0xffffff88
    3bf0:	31052805 	tstcc	r5, r5, lsl #16
    3bf4:	20250520 	eorcs	r0, r5, r0, lsr #10
    3bf8:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    3bfc:	02053506 	andeq	r3, r5, #25165824	; 0x1800000
    3c00:	11052906 	tstne	r5, r6, lsl #18
    3c04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3c08:	11052f06 	tstne	r5, r6, lsl #30
    3c0c:	21050106 	tstcs	r5, r6, lsl #2
    3c10:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
    3c14:	30060205 	andcc	r0, r6, r5, lsl #4
    3c18:	01062105 	tsteq	r6, r5, lsl #2
    3c1c:	052e1005 	streq	r1, [lr, #-5]!
    3c20:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3c24:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3c28:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3c2c:	05343d02 	ldreq	r3, [r4, #-3330]!	; 0xfffff2fe
    3c30:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3c34:	0101000b 	tsteq	r1, fp
    3c38:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3c3c:	0022d002 	eoreq	sp, r2, r2
    3c40:	09a00300 	stmibeq	r0!, {r8, r9}
    3c44:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3c48:	01141313 	tsteq	r4, r3, lsl r3
    3c4c:	03064405 	movweq	r4, #25605	; 0x6405
    3c50:	02050177 	andeq	r0, r5, #-1073741795	; 0xc000001d
    3c54:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    3c58:	20770344 	rsbscs	r0, r7, r4, asr #6
    3c5c:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3c60:	4a06204a 	bmi	18bd90 <__ccfg+0x16bde8>
    3c64:	03060305 	movweq	r0, #25349	; 0x6305
    3c68:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    3c6c:	0603054b 	streq	r0, [r3], -fp, asr #10
    3c70:	060f0547 	streq	r0, [pc], -r7, asr #10
    3c74:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    3c78:	03062805 	movweq	r2, #26629	; 0x6805
    3c7c:	1e052078 	mcrne	0, 0, r2, cr5, cr8, {3}
    3c80:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c84:	030a0501 	movweq	r0, #42241	; 0xa501
    3c88:	01052e16 	tsteq	r5, r6, lsl lr
    3c8c:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3c90:	67030603 	strvs	r0, [r3, -r3, lsl #12]
    3c94:	2e58013c 	mrccs	1, 2, r0, cr8, cr12, {1}
    3c98:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3c9c:	74060501 	strvc	r0, [r6], #-1281	; 0xfffffaff
    3ca0:	42060205 	andmi	r0, r6, #1342177280	; 0x50000000
    3ca4:	01060505 	tsteq	r6, r5, lsl #10
    3ca8:	36060205 	strcc	r0, [r6], -r5, lsl #4
    3cac:	01060c05 	tsteq	r6, r5, lsl #24
    3cb0:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3cb4:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    3cb8:	06020520 	streq	r0, [r2], -r0, lsr #10
    3cbc:	060b0523 	streq	r0, [fp], -r3, lsr #10
    3cc0:	4a050501 	bmi	1450cc <__ccfg+0x125124>
    3cc4:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    3cc8:	06090568 	streq	r0, [r9], -r8, ror #10
    3ccc:	000a0201 	andeq	r0, sl, r1, lsl #4
    3cd0:	3e050101 	adfccs	f0, f5, f1
    3cd4:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    3cd8:	03000023 	movweq	r0, #35	; 0x23
    3cdc:	050109d1 	streq	r0, [r1, #-2513]	; 0xfffff62f
    3ce0:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    3ce4:	063e0501 	ldrteq	r0, [lr], -r1, lsl #10
    3ce8:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3cec:	06202802 	strteq	r2, [r0], -r2, lsl #16
    3cf0:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3cf4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3cf8:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3cfc:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3d00:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3d04:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3d08:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3d0c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    3d10:	2f2f0602 	svccs	0x002f0602
    3d14:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    3d18:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3d1c:	0a052101 	beq	14c128 <__ccfg+0x12c180>
    3d20:	02207903 	eoreq	r7, r0, #49152	; 0xc000
    3d24:	01010009 	tsteq	r1, r9
    3d28:	05003405 	streq	r3, [r0, #-1029]	; 0xfffffbfb
    3d2c:	0023ac02 	eoreq	sl, r3, r2, lsl #24
    3d30:	09e80300 	stmibeq	r8!, {r8, r9}^
    3d34:	16020501 	strne	r0, [r2], -r1, lsl #10
    3d38:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3d3c:	79030634 	stmdbvc	r3, {r2, r4, r5, r9, sl}
    3d40:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    3d44:	4a4a0620 	bmi	12855cc <__ccfg+0x1265624>
    3d48:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3d4c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d50:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3d54:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d58:	06050521 	streq	r0, [r5], -r1, lsr #10
    3d5c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d60:	060a0523 	streq	r0, [sl], -r3, lsr #10
    3d64:	30090510 	andcc	r0, r9, r0, lsl r5
    3d68:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3d6c:	01010007 	tsteq	r1, r7
    3d70:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    3d74:	0023e002 	eoreq	lr, r3, r2
    3d78:	09f90300 	ldmibeq	r9!, {r8, r9}^
    3d7c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3d80:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    3d84:	05260205 	streq	r0, [r6, #-517]!	; 0xfffffdfb
    3d88:	02052c0c 	andeq	r2, r5, #12, 24	; 0xc00
    3d8c:	06013006 	streq	r3, [r1], -r6
    3d90:	2e064a4a 	vmlscs.f32	s8, s12, s20
    3d94:	0105134a 	tsteq	r5, sl, asr #6
    3d98:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    3d9c:	0006022c 	andeq	r0, r6, ip, lsr #4
    3da0:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
    3da4:	00020500 	andeq	r0, r2, r0, lsl #10
    3da8:	03000000 	movweq	r0, #0
    3dac:	05010a84 	streq	r0, [r1, #-2692]	; 0xfffff57c
    3db0:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3db4:	051c0632 	ldreq	r0, [ip, #-1586]	; 0xfffff9ce
    3db8:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3dbc:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3dc0:	cc03060a 	stcgt	6, cr0, [r3], {10}
    3dc4:	09050177 	stmdbeq	r5, {r0, r1, r2, r4, r5, r6, r8}
    3dc8:	2008b403 	andcs	fp, r8, r3, lsl #8
    3dcc:	03060205 	movweq	r0, #25093	; 0x6205
    3dd0:	133c77c9 	teqne	ip, #52690944	; 0x3240000
    3dd4:	13030514 	movwne	r0, #13588	; 0x3514
    3dd8:	01060505 	tsteq	r6, r5, lsl #10
    3ddc:	21060305 	tstcs	r6, r5, lsl #6
    3de0:	01060605 	tsteq	r6, r5, lsl #12
    3de4:	31060305 	tstcc	r6, r5, lsl #6
    3de8:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    3dec:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3df0:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3df4:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    3df8:	08b40301 	ldmeq	r4!, {r0, r8, r9}
    3dfc:	00080220 	andeq	r0, r8, r0, lsr #4
    3e00:	28050101 	stmdacs	r5, {r0, r8}
    3e04:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    3e08:	03000024 	movweq	r0, #36	; 0x24
    3e0c:	05010a8c 	streq	r0, [r1, #-2700]	; 0xfffff574
    3e10:	011a0301 	tsteq	sl, r1, lsl #6
    3e14:	01000102 	tsteq	r0, r2, lsl #2
    3e18:	00012401 	andeq	r2, r1, r1, lsl #8
    3e1c:	8a000300 	bhi	4a24 <__aeabi_lmul+0xc4>
    3e20:	02000000 	andeq	r0, r0, #0
    3e24:	0d0efb01 	vstreq	d15, [lr, #-4]
    3e28:	01010100 	mrseq	r0, (UNDEF: 17)
    3e2c:	00000001 	andeq	r0, r0, r1
    3e30:	01000001 	tsteq	r0, r1
    3e34:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3d80 <TrimAfterColdResetWakeupFromShutDown>
    3e38:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    3e3c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    3e40:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3e44:	6f746b73 	svcvs	0x00746b73
    3e48:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3e4c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3e50:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3e54:	2f534f43 	svccs	0x00534f43
    3e58:	4f636950 	svcmi	0x00636950
    3e5c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3e60:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3e64:	73752f00 	cmnvc	r5, #0, 30
    3e68:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3e6c:	63672f62 	cmnvs	r7, #392	; 0x188
    3e70:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3e74:	6f6e2d6d 	svcvs	0x006e2d6d
    3e78:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3e7c:	2f696261 	svccs	0x00696261
    3e80:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3e84:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3e88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3e8c:	73000065 	movwvc	r0, #101	; 0x65
    3e90:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    3e94:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    3e98:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    3e9c:	00000100 	andeq	r0, r0, r0, lsl #2
    3ea0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3ea4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3ea8:	00000200 	andeq	r0, r0, r0, lsl #4
    3eac:	00010500 	andeq	r0, r1, r0, lsl #10
    3eb0:	241e0205 	ldrcs	r0, [lr], #-517	; 0xfffffdfb
    3eb4:	84030000 	strhi	r0, [r3], #-0
    3eb8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    3ebc:	0a051416 	beq	148f1c <__ccfg+0x128f74>
    3ec0:	00010210 	andeq	r0, r1, r0, lsl r2
    3ec4:	01050101 	tsteq	r5, r1, lsl #2
    3ec8:	20020500 	andcs	r0, r2, r0, lsl #10
    3ecc:	03000024 	movweq	r0, #36	; 0x24
    3ed0:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    3ed4:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3ed8:	0102100a 	tsteq	r2, sl
    3edc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3ee0:	02050001 	andeq	r0, r5, #1
    3ee4:	00002422 	andeq	r2, r0, r2, lsr #8
    3ee8:	0102a803 	tsteq	r2, r3, lsl #16
    3eec:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3ef0:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3ef4:	01010001 	tsteq	r1, r1
    3ef8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3efc:	00242402 	eoreq	r2, r4, r2, lsl #8
    3f00:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3f04:	13050501 	movwne	r0, #21761	; 0x5501
    3f08:	06010517 			; <UNDEFINED> instruction: 0x06010517
    3f0c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    3f10:	33062605 	movwcc	r2, #26117	; 0x6605
    3f14:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3f18:	2105051f 	tstcs	r5, pc, lsl r5
    3f1c:	20061d05 	andcs	r1, r6, r5, lsl #26
    3f20:	01060505 	tsteq	r6, r5, lsl #10
    3f24:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3f28:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    3f2c:	01053305 	tsteq	r5, r5, lsl #6
    3f30:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3f34:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3f38:	01061605 	tsteq	r6, r5, lsl #12
    3f3c:	01001002 	tsteq	r0, r2
    3f40:	00018901 	andeq	r8, r1, r1, lsl #18
    3f44:	83000300 	movwhi	r0, #768	; 0x300
    3f48:	02000001 	andeq	r0, r0, #1
    3f4c:	0d0efb01 	vstreq	d15, [lr, #-4]
    3f50:	01010100 	mrseq	r0, (UNDEF: 17)
    3f54:	00000001 	andeq	r0, r0, r1
    3f58:	01000001 	tsteq	r0, r1
    3f5c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3f60:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3f64:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3f68:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3f6c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3f70:	61652d65 	cmnvs	r5, r5, ror #26
    3f74:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3f78:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3f7c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3f80:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3f84:	6f682f00 	svcvs	0x00682f00
    3f88:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3f8c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3f90:	442f6e65 	strtmi	r6, [pc], #-3685	; 3f98 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x24>
    3f94:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3f98:	4f2f706f 	svcmi	0x002f706f
    3f9c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3fa0:	502f5445 	eorpl	r5, pc, r5, asr #8
    3fa4:	534f4349 	movtpl	r4, #62281	; 0xf349
    3fa8:	6369502f 	cmnvs	r9, #47	; 0x2f
    3fac:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3fb0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3fb4:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3fb8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3fbc:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3fc0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3fc4:	6f682f00 	svcvs	0x00682f00
    3fc8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3fcc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3fd0:	442f6e65 	strtmi	r6, [pc], #-3685	; 3fd8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x64>
    3fd4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3fd8:	4f2f706f 	svcmi	0x002f706f
    3fdc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3fe0:	502f5445 	eorpl	r5, pc, r5, asr #8
    3fe4:	534f4349 	movtpl	r4, #62281	; 0xf349
    3fe8:	6369502f 	cmnvs	r9, #47	; 0x2f
    3fec:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3ff0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3ff4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3ff8:	2f656d6f 	svccs	0x00656d6f
    3ffc:	70657473 	rsbvc	r7, r5, r3, ror r4
    4000:	2f6e6568 	svccs	0x006e6568
    4004:	6b736544 	blvs	1cdd51c <__ccfg+0x1cbd574>
    4008:	2f706f74 	svccs	0x00706f74
    400c:	4f534c4f 	svcmi	0x00534c4f
    4010:	2f54454e 	svccs	0x0054454e
    4014:	4f434950 	svcmi	0x00434950
    4018:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    401c:	00534f63 	subseq	r4, r3, r3, ror #30
    4020:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f6c <NOROM_SetupSetVddrLevel+0x74>
    4024:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4028:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    402c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4030:	6f746b73 	svcvs	0x00746b73
    4034:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4038:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    403c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4040:	2f534f43 	svccs	0x00534f43
    4044:	4f636950 	svcmi	0x00636950
    4048:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    404c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4050:	74730000 	ldrbtvc	r0, [r3], #-0
    4054:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4058:	0100682e 	tsteq	r0, lr, lsr #16
    405c:	77680000 	strbvc	r0, [r8, -r0]!
    4060:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    4064:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    4068:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    406c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4070:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    4074:	00020068 	andeq	r0, r2, r8, rrx
    4078:	63726100 	cmnvs	r2, #0, 2
    407c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4080:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4084:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4088:	00030068 	andeq	r0, r3, r8, rrx
    408c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4090:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4094:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4098:	62000003 	andvs	r0, r0, #3
    409c:	6f747475 	svcvs	0x00747475
    40a0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    40a4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    40a8:	00000300 	andeq	r0, r0, r0, lsl #6
    40ac:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    40b0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    40b4:	6b000004 	blvs	40cc <NOROM_SetupGetTrimForAmpcompCtrl+0x14>
    40b8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    40bc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    40c0:	63000005 	movwvs	r0, #5
    40c4:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    40c8:	00030063 	andeq	r0, r3, r3, rrx
    40cc:	029e0000 	addseq	r0, lr, #0
    40d0:	00030000 	andeq	r0, r3, r0
    40d4:	000001c5 	andeq	r0, r0, r5, asr #3
    40d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    40dc:	0101000d 	tsteq	r1, sp
    40e0:	00000101 	andeq	r0, r0, r1, lsl #2
    40e4:	00000100 	andeq	r0, r0, r0, lsl #2
    40e8:	6f682f01 	svcvs	0x00682f01
    40ec:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    40f0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    40f4:	442f6e65 	strtmi	r6, [pc], #-3685	; 40fc <NOROM_SetupGetTrimForAmpcompCtrl+0x44>
    40f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    40fc:	4f2f706f 	svcmi	0x002f706f
    4100:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4104:	502f5445 	eorpl	r5, pc, r5, asr #8
    4108:	534f4349 	movtpl	r4, #62281	; 0xf349
    410c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4110:	502f534f 	eorpl	r5, pc, pc, asr #6
    4114:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4118:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    411c:	73726f73 	cmnvc	r2, #460	; 0x1cc
    4120:	6f682f00 	svcvs	0x00682f00
    4124:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4128:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    412c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4134 <NOROM_SetupGetTrimForAdcShModeEn+0x4>
    4130:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4134:	4f2f706f 	svcmi	0x002f706f
    4138:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    413c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4140:	534f4349 	movtpl	r4, #62281	; 0xf349
    4144:	6369502f 	cmnvs	r9, #47	; 0x2f
    4148:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    414c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4150:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4154:	2f656d6f 	svccs	0x00656d6f
    4158:	70657473 	rsbvc	r7, r5, r3, ror r4
    415c:	2f6e6568 	svccs	0x006e6568
    4160:	6b736544 	blvs	1cdd678 <__ccfg+0x1cbd6d0>
    4164:	2f706f74 	svccs	0x00706f74
    4168:	4f534c4f 	svcmi	0x00534c4f
    416c:	2f54454e 	svccs	0x0054454e
    4170:	4f434950 	svcmi	0x00434950
    4174:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4178:	2f534f63 	svccs	0x00534f63
    417c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4180:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4188:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    418c:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    4190:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4194:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4198:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    419c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    41a0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    41a4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    41a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    41ac:	61652d65 	cmnvs	r5, r5, ror #26
    41b0:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    41b4:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    41b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    41bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    41c0:	6f682f00 	svcvs	0x00682f00
    41c4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    41c8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    41cc:	442f6e65 	strtmi	r6, [pc], #-3685	; 41d4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x4>
    41d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    41d4:	4f2f706f 	svcmi	0x002f706f
    41d8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    41dc:	502f5445 	eorpl	r5, pc, r5, asr #8
    41e0:	534f4349 	movtpl	r4, #62281	; 0xf349
    41e4:	6369502f 	cmnvs	r9, #47	; 0x2f
    41e8:	2f00534f 	svccs	0x0000534f
    41ec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    41f0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    41f4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    41f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    41fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4200:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4204:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4208:	4349502f 	movtmi	r5, #36911	; 0x902f
    420c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4210:	534f6369 	movtpl	r6, #62313	; 0xf369
    4214:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4218:	006c656e 	rsbeq	r6, ip, lr, ror #10
    421c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4220:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    4224:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    4228:	00010063 	andeq	r0, r1, r3, rrx
    422c:	736d6300 	cmnvc	sp, #0, 6
    4230:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    4234:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    4238:	00000200 	andeq	r0, r0, r0, lsl #4
    423c:	6f697067 	svcvs	0x00697067
    4240:	0300682e 	movweq	r6, #2094	; 0x82e
    4244:	74730000 	ldrbtvc	r0, [r3], #-0
    4248:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    424c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4250:	72610000 	rsbvc	r0, r1, #0
    4254:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4258:	00000200 	andeq	r0, r0, r0, lsl #4
    425c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4260:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4264:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4268:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    426c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4270:	00000200 	andeq	r0, r0, r0, lsl #4
    4274:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4278:	5f736e6f 	svcpl	0x00736e6f
    427c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4280:	00020068 	andeq	r0, r2, r8, rrx
    4284:	73797300 	cmnvc	r9, #0, 6
    4288:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    428c:	00000500 	andeq	r0, r0, r0, lsl #10
    4290:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4294:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4298:	00000600 	andeq	r0, r0, r0, lsl #12
    429c:	00190500 	andseq	r0, r9, r0, lsl #10
    42a0:	00000205 	andeq	r0, r0, r5, lsl #4
    42a4:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    42a8:	011b0501 	tsteq	fp, r1, lsl #10
    42ac:	01050101 	tsteq	r5, r1, lsl #2
    42b0:	01020106 	tsteq	r2, r6, lsl #2
    42b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    42b8:	0205003f 	andeq	r0, r5, #63	; 0x3f
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	05011003 	streq	r1, [r1, #-3]
    42c4:	13131402 	tstne	r3, #33554432	; 0x2000000
    42c8:	063f0514 			; <UNDEFINED> instruction: 0x063f0514
    42cc:	20017a03 	andcs	r7, r1, r3, lsl #20
    42d0:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    42d4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    42d8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    42dc:	044d0603 	strbeq	r0, [sp], #-1539	; 0xfffff9fd
    42e0:	00c10302 	sbceq	r0, r1, r2, lsl #6
    42e4:	03010401 	movweq	r0, #5121	; 0x1401
    42e8:	4b3d2040 	blmi	f4c3f0 <__ccfg+0xf2c448>
    42ec:	33030204 	movwcc	r0, #12804	; 0x3204
    42f0:	03010401 	movweq	r0, #5121	; 0x1401
    42f4:	0205204e 	andeq	r2, r5, #78	; 0x4e
    42f8:	06070531 			; <UNDEFINED> instruction: 0x06070531
    42fc:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4300:	018b030f 	orreq	r0, fp, pc, lsl #6
    4304:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4308:	7ef50307 	cdpvc	3, 15, cr0, cr5, cr7, {0}
    430c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4310:	130b0521 	movwne	r0, #46369	; 0xb521
    4314:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    4318:	03290503 			; <UNDEFINED> instruction: 0x03290503
    431c:	05010183 	streq	r0, [r1, #-387]	; 0xfffffe7d
    4320:	01041705 	tsteq	r4, r5, lsl #14
    4324:	03060b05 	movweq	r0, #27397	; 0x6b05
    4328:	04017ef8 	streq	r7, [r1], #-3832	; 0xfffff108
    432c:	030f0503 	movweq	r0, #62723	; 0xf503
    4330:	04200188 	strteq	r0, [r0], #-392	; 0xfffffe78
    4334:	030b0501 	movweq	r0, #46337	; 0xb501
    4338:	04207ef8 	strteq	r7, [r0], #-3832	; 0xfffff108
    433c:	03330503 	teqeq	r3, #12582912	; 0xc00000
    4340:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    4344:	01042042 	tsteq	r4, r2, asr #32
    4348:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    434c:	08052e7e 	stmdaeq	r5, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    4350:	201f052e 	andscs	r0, pc, lr, lsr #10
    4354:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    4358:	08051e02 	stmdaeq	r5, {r1, r9, sl, fp, ip}
    435c:	063a0522 	ldrteq	r0, [sl], -r2, lsr #10
    4360:	010b051f 	tsteq	fp, pc, lsl r5
    4364:	11060205 	tstne	r6, r5, lsl #4
    4368:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    436c:	01010006 	tsteq	r1, r6
    4370:	00000341 	andeq	r0, r0, r1, asr #6
    4374:	01ae0003 			; <UNDEFINED> instruction: 0x01ae0003
    4378:	01020000 	mrseq	r0, (UNDEF: 2)
    437c:	000d0efb 	strdeq	r0, [sp], -fp
    4380:	01010101 	tsteq	r1, r1, lsl #2
    4384:	01000000 	mrseq	r0, (UNDEF: 0)
    4388:	2f010000 	svccs	0x00010000
    438c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4390:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4394:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4398:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    439c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    43a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    43a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    43a8:	4349502f 	movtmi	r5, #36911	; 0x902f
    43ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    43b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    43b4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    43b8:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    43bc:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
    43c0:	2f656d6f 	svccs	0x00656d6f
    43c4:	70657473 	rsbvc	r7, r5, r3, ror r4
    43c8:	2f6e6568 	svccs	0x006e6568
    43cc:	6b736544 	blvs	1cdd8e4 <__ccfg+0x1cbd93c>
    43d0:	2f706f74 	svccs	0x00706f74
    43d4:	4f534c4f 	svcmi	0x00534c4f
    43d8:	2f54454e 	svccs	0x0054454e
    43dc:	4f434950 	svcmi	0x00434950
    43e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    43e4:	2f534f63 	svccs	0x00534f63
    43e8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    43ec:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    43f0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    43f4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    43f8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    43fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4400:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4404:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4408:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    440c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4410:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4414:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4418:	61652d65 	cmnvs	r5, r5, ror #26
    441c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4420:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4424:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4428:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    442c:	6f682f00 	svcvs	0x00682f00
    4430:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4434:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4438:	442f6e65 	strtmi	r6, [pc], #-3685	; 4440 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc0>
    443c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4440:	4f2f706f 	svcmi	0x002f706f
    4444:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4448:	502f5445 	eorpl	r5, pc, r5, asr #8
    444c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4450:	6369502f 	cmnvs	r9, #47	; 0x2f
    4454:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4458:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    445c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4460:	2f656d6f 	svccs	0x00656d6f
    4464:	70657473 	rsbvc	r7, r5, r3, ror r4
    4468:	2f6e6568 	svccs	0x006e6568
    446c:	6b736544 	blvs	1cdd984 <__ccfg+0x1cbd9dc>
    4470:	2f706f74 	svccs	0x00706f74
    4474:	4f534c4f 	svcmi	0x00534c4f
    4478:	2f54454e 	svccs	0x0054454e
    447c:	4f434950 	svcmi	0x00434950
    4480:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4484:	00534f63 	subseq	r4, r3, r3, ror #30
    4488:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 43d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x54>
    448c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4490:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4494:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4498:	6f746b73 	svcvs	0x00746b73
    449c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    44a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    44a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    44a8:	2f534f43 	svccs	0x00534f43
    44ac:	4f636950 	svcmi	0x00636950
    44b0:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    44b4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    44b8:	75620000 	strbvc	r0, [r2, #-0]!
    44bc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    44c0:	00632e73 	rsbeq	r2, r3, r3, ror lr
    44c4:	67000001 	strvs	r0, [r0, -r1]
    44c8:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    44cc:	00020068 	andeq	r0, r2, r8, rrx
    44d0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    44d4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    44d8:	00030068 	andeq	r0, r3, r8, rrx
    44dc:	63726100 	cmnvs	r2, #0, 2
    44e0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    44e4:	6d000004 	stcvs	0, cr0, [r0, #-16]
    44e8:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    44ec:	00040068 	andeq	r0, r4, r8, rrx
    44f0:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    44f4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    44f8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    44fc:	62000004 	andvs	r0, r0, #4
    4500:	6f747475 	svcvs	0x00747475
    4504:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4508:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    450c:	00000400 	andeq	r0, r0, r0, lsl #8
    4510:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4514:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4518:	6b000005 	blvs	4534 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x64>
    451c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4520:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    4524:	00000006 	andeq	r0, r0, r6
    4528:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    452c:	00000002 	andeq	r0, r0, r2
    4530:	011b0300 	tsteq	fp, r0, lsl #6
    4534:	052e0601 	streq	r0, [lr, #-1537]!	; 0xfffff9ff
    4538:	056a0602 	strbeq	r0, [sl, #-1538]!	; 0xfffff9fe
    453c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4540:	03052005 	movweq	r2, #20485	; 0x5005
    4544:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    4548:	060f0540 	streq	r0, [pc], -r0, asr #10
    454c:	03020401 	movweq	r0, #9217	; 0x2401
    4550:	042e0187 	strteq	r0, [lr], #-391	; 0xfffffe79
    4554:	03070501 	movweq	r0, #29953	; 0x7501
    4558:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    455c:	14051c0f 	strne	r1, [r5], #-3087	; 0xfffff3f1
    4560:	1c052006 	stcne	0, cr2, [r5], {6}
    4564:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4568:	11030620 	tstne	r3, r0, lsr #12
    456c:	053d4b2e 	ldreq	r4, [sp, #-2862]!	; 0xfffff4d2
    4570:	2e710303 	cdpcs	3, 7, cr0, cr1, cr3, {0}
    4574:	29050204 	stmdbcs	r5, {r2, r9}
    4578:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    457c:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4580:	06070501 	streq	r0, [r7], -r1, lsl #10
    4584:	017efd03 	cmneq	lr, r3, lsl #26	; <UNPREDICTABLE>
    4588:	0f050204 	svceq	0x00050204
    458c:	2e018303 	cdpcs	3, 0, cr8, cr1, cr3, {0}
    4590:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4594:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    4598:	33050204 	movwcc	r0, #20996	; 0x5204
    459c:	20018303 	andcs	r8, r1, r3, lsl #6
    45a0:	06050104 	streq	r0, [r5], -r4, lsl #2
    45a4:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    45a8:	30060405 	andcc	r0, r6, r5, lsl #8
    45ac:	01060505 	tsteq	r6, r5, lsl #10
    45b0:	40060405 	andmi	r0, r6, r5, lsl #8
    45b4:	03060305 	movweq	r0, #25349	; 0x6305
    45b8:	2f062e12 	svccs	0x00062e12
    45bc:	64030605 	strvs	r0, [r3], #-1541	; 0xfffff9fb
    45c0:	060d0520 	streq	r0, [sp], -r0, lsr #10
    45c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    45c8:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    45cc:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    45d0:	06290502 	strteq	r0, [r9], -r2, lsl #10
    45d4:	5800eb03 	stmdapl	r0, {r0, r1, r8, r9, fp, sp, lr, pc}
    45d8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45dc:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    45e0:	03070501 	movweq	r0, #29953	; 0x7501
    45e4:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
    45e8:	030f0502 	movweq	r0, #62722	; 0xf502
    45ec:	052000f0 	streq	r0, [r0, #-240]!	; 0xffffff10
    45f0:	01042033 	tsteq	r4, r3, lsr r0
    45f4:	90030505 	andls	r0, r3, r5, lsl #10
    45f8:	0205207f 	andeq	r2, r5, #127	; 0x7f
    45fc:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    4600:	03050106 	movweq	r0, #20742	; 0x5106
    4604:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    4608:	06070551 			; <UNDEFINED> instruction: 0x06070551
    460c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4610:	df030629 	svcle	0x00030629
    4614:	05053c00 	streq	r3, [r5, #-3072]	; 0xfffff400
    4618:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    461c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4620:	7f9c0307 	svcvc	0x009c0307
    4624:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4628:	00e4030f 	rsceq	r0, r4, pc, lsl #6
    462c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4630:	7f9c0307 	svcvc	0x009c0307
    4634:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4638:	00e40333 	rsceq	r0, r4, r3, lsr r3
    463c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4640:	7f9c0305 	svcvc	0x009c0305
    4644:	06020520 	streq	r0, [r2], -r0, lsr #10
    4648:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    464c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4650:	31060205 	tstcc	r6, r5, lsl #4
    4654:	01060305 	tsteq	r6, r5, lsl #6
    4658:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    465c:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    4660:	052c0205 	streq	r0, [ip, #-517]!	; 0xfffffdfb
    4664:	024c0601 	subeq	r0, ip, #1048576	; 0x100000
    4668:	0101000c 	tsteq	r1, ip
    466c:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    4670:	00000002 	andeq	r0, r0, r2
    4674:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    4678:	16020501 	strne	r0, [r2], -r1, lsl #10
    467c:	01060f05 	tsteq	r6, r5, lsl #30
    4680:	051c2905 	ldreq	r2, [ip, #-2309]	; 0xfffff6fb
    4684:	0505240f 	streq	r2, [r5, #-1039]	; 0xfffffbf1
    4688:	06030520 	streq	r0, [r3], -r0, lsr #10
    468c:	06010521 	streq	r0, [r1], -r1, lsr #10
    4690:	0303051a 	movweq	r0, #13594	; 0x351a
    4694:	02052e78 	andeq	r2, r5, #120, 28	; 0x780
    4698:	07054006 	streq	r4, [r5, -r6]
    469c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    46a0:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    46a4:	01052f2f 	tsteq	r5, pc, lsr #30
    46a8:	03052206 	movweq	r2, #20998	; 0x5206
    46ac:	3e01052c 	cfsh32cc	mvfx0, mvfx1, #28
    46b0:	01000602 	tsteq	r0, r2, lsl #12
    46b4:	00093601 	andeq	r3, r9, r1, lsl #12
    46b8:	d1000300 	mrsle	r0, LR_irq
    46bc:	02000001 	andeq	r0, r0, #1
    46c0:	0d0efb01 	vstreq	d15, [lr, #-4]
    46c4:	01010100 	mrseq	r0, (UNDEF: 17)
    46c8:	00000001 	andeq	r0, r0, r1
    46cc:	01000001 	tsteq	r0, r1
    46d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 461c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x14c>
    46d4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    46d8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    46dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    46e0:	6f746b73 	svcvs	0x00746b73
    46e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    46e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    46ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    46f0:	2f534f43 	svccs	0x00534f43
    46f4:	4f636950 	svcmi	0x00636950
    46f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    46fc:	2f736269 	svccs	0x00736269
    4700:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    4704:	00656761 	rsbeq	r6, r5, r1, ror #14
    4708:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4654 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x184>
    470c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4710:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4714:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4718:	6f746b73 	svcvs	0x00746b73
    471c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4720:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4724:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4728:	2f534f43 	svccs	0x00534f43
    472c:	4f636950 	svcmi	0x00636950
    4730:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4734:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4738:	3143432f 	cmpcc	r3, pc, lsr #6
    473c:	57585833 	smmlarpl	r8, r3, r8, r5
    4740:	2f455241 	svccs	0x00455241
    4744:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    4748:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    474c:	752f0062 	strvc	r0, [pc, #-98]!	; 46f2 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x2>
    4750:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 458c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xbc>
    4754:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4758:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    475c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4760:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4764:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4768:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    476c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4770:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4774:	2f006564 	svccs	0x00006564
    4778:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    477c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4780:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4784:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4788:	706f746b 	rsbvc	r7, pc, fp, ror #8
    478c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4790:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4794:	4349502f 	movtmi	r5, #36911	; 0x902f
    4798:	502f534f 	eorpl	r5, pc, pc, asr #6
    479c:	534f6369 	movtpl	r6, #62313	; 0xf369
    47a0:	3143432f 	cmpcc	r3, pc, lsr #6
    47a4:	00585833 	subseq	r5, r8, r3, lsr r8
    47a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 46f4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4>
    47ac:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    47b0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    47b4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    47b8:	6f746b73 	svcvs	0x00746b73
    47bc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    47c0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    47c4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    47c8:	2f534f43 	svccs	0x00534f43
    47cc:	4f636950 	svcmi	0x00636950
    47d0:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    47d4:	2f656d6f 	svccs	0x00656d6f
    47d8:	70657473 	rsbvc	r7, r5, r3, ror r4
    47dc:	2f6e6568 	svccs	0x006e6568
    47e0:	6b736544 	blvs	1cddcf8 <__ccfg+0x1cbdd50>
    47e4:	2f706f74 	svccs	0x00706f74
    47e8:	4f534c4f 	svcmi	0x00534c4f
    47ec:	2f54454e 	svccs	0x0054454e
    47f0:	4f434950 	svcmi	0x00434950
    47f4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    47f8:	2f534f63 	svccs	0x00534f63
    47fc:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4800:	00006c65 	andeq	r6, r0, r5, ror #24
    4804:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    4808:	5f656761 	svcpl	0x00656761
    480c:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    4810:	33303872 	teqcc	r0, #7471104	; 0x720000
    4814:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    4818:	67000001 	strvs	r0, [r0, -r1]
    481c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    4820:	00020068 	andeq	r0, r2, r8, rrx
    4824:	6f747300 	svcvs	0x00747300
    4828:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    482c:	7065655f 	rsbvc	r6, r5, pc, asr r5
    4830:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    4834:	00010068 	andeq	r0, r1, r8, rrx
    4838:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    483c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4840:	00030068 	andeq	r0, r3, r8, rrx
    4844:	63726100 	cmnvs	r2, #0, 2
    4848:	00682e68 	rsbeq	r2, r8, r8, ror #28
    484c:	6d000004 	stcvs	0, cr0, [r0, #-16]
    4850:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4854:	00040068 	andeq	r0, r4, r8, rrx
    4858:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    485c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4860:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4864:	62000004 	andvs	r0, r0, #4
    4868:	6f747475 	svcvs	0x00747475
    486c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4870:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4874:	00000400 	andeq	r0, r0, r0, lsl #8
    4878:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    487c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4880:	6b000005 	blvs	489c <memcpy+0x34>
    4884:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4888:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    488c:	00000006 	andeq	r0, r0, r6
    4890:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    4894:	00247002 	eoreq	r7, r4, r2
    4898:	01180300 	tsteq	r8, r0, lsl #6
    489c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    48a0:	01150514 	tsteq	r5, r4, lsl r5
    48a4:	0d061905 	vstreq.16	s2, [r6, #-10]	; <UNPREDICTABLE>
    48a8:	04250905 	strteq	r0, [r5], #-2309	; 0xfffff6fb
    48ac:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    48b0:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    48b4:	03190501 	tsteq	r9, #4194304	; 0x400000
    48b8:	042e7df1 	strteq	r7, [lr], #-3569	; 0xfffff20f
    48bc:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    48c0:	052002c5 	streq	r0, [r0, #-709]!	; 0xfffffd3b
    48c4:	7ed0030f 	cdpvc	3, 13, cr0, cr0, cr15, {0}
    48c8:	032d0520 			; <UNDEFINED> instruction: 0x032d0520
    48cc:	042000fa 	strteq	r0, [r0], #-250	; 0xffffff06
    48d0:	06030501 	streq	r0, [r3], -r1, lsl #10
    48d4:	207df703 	rsbscs	pc, sp, r3, lsl #14
    48d8:	0f050204 	svceq	0x00050204
    48dc:	018f0306 	orreq	r0, pc, r6, lsl #6
    48e0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    48e4:	7ef10305 	cdpvc	3, 15, cr0, cr1, cr5, {0}
    48e8:	21060520 	tstcs	r6, r0, lsr #10
    48ec:	051f0505 	ldreq	r0, [pc, #-1285]	; 43ef <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x6f>
    48f0:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    48f4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    48f8:	05010189 	streq	r0, [r1, #-393]	; 0xfffffe77
    48fc:	01041705 	tsteq	r4, r5, lsl #14
    4900:	f3030405 	vshl.u8	d0, d5, d3
    4904:	0605017e 			; <UNDEFINED> instruction: 0x0605017e
    4908:	03050106 	movweq	r0, #20742	; 0x5106
    490c:	02043d06 	andeq	r3, r4, #384	; 0x180
    4910:	81032905 	tsthi	r3, r5, lsl #18
    4914:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4918:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    491c:	f6030602 			; <UNDEFINED> instruction: 0xf6030602
    4920:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    4924:	8a032d05 	bhi	cfd40 <__ccfg+0xafd98>
    4928:	01042002 	tsteq	r4, r2
    492c:	03060305 	movweq	r0, #25349	; 0x6305
    4930:	04207dfb 	strteq	r7, [r0], #-3579	; 0xfffff205
    4934:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4938:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
    493c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4940:	01040106 	tsteq	r4, r6, lsl #2
    4944:	03061c05 	movweq	r1, #27653	; 0x6c05
    4948:	05207dc0 	streq	r7, [r0, #-3520]!	; 0xfffff240
    494c:	02050115 	andeq	r0, r5, #1073741829	; 0x40000005
    4950:	01050106 	tsteq	r5, r6, lsl #2
    4954:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    4958:	01010007 	tsteq	r1, r7
    495c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    4960:	0024a402 	eoreq	sl, r4, r2, lsl #8
    4964:	01280300 			; <UNDEFINED> instruction: 0x01280300
    4968:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    496c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    4970:	200e061f 	andcs	r0, lr, pc, lsl r6
    4974:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4978:	3c01ff03 	stccc	15, cr15, [r1], {3}
    497c:	03050104 	movweq	r0, #20740	; 0x5104
    4980:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
    4984:	0606054a 	streq	r0, [r6], -sl, asr #10
    4988:	06040501 	streq	r0, [r4], -r1, lsl #10
    498c:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4990:	01f40329 	mvnseq	r0, r9, lsr #6
    4994:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4998:	01062d05 	tsteq	r6, r5, lsl #26
    499c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    49a0:	7e890306 	cdpvc	3, 8, cr0, cr9, cr6, {0}
    49a4:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    49a8:	02a80329 	adceq	r0, r8, #-1543503872	; 0xa4000000
    49ac:	17050501 	strne	r0, [r5, -r1, lsl #10]
    49b0:	01062d05 	tsteq	r6, r5, lsl #26
    49b4:	03050104 	movweq	r0, #20740	; 0x5104
    49b8:	7dd40306 	ldclvc	3, cr0, [r4, #24]
    49bc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    49c0:	01f10329 	mvnseq	r0, r9, lsr #6
    49c4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    49c8:	03060104 	movweq	r0, #24836	; 0x6104
    49cc:	05017e8c 	streq	r7, [r1, #-3724]	; 0xfffff174
    49d0:	20790302 	rsbscs	r0, r9, r2, lsl #6
    49d4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    49d8:	2001fb03 	andcs	pc, r1, r3, lsl #22
    49dc:	03050104 	movweq	r0, #20740	; 0x5104
    49e0:	7e8b0306 	cdpvc	3, 8, cr0, cr11, cr6, {0}
    49e4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    49e8:	02a60329 	adceq	r0, r6, #-1543503872	; 0xa4000000
    49ec:	17050501 	strne	r0, [r5, -r1, lsl #10]
    49f0:	03060104 	movweq	r0, #24836	; 0x6104
    49f4:	04017dd6 	streq	r7, [r1], #-3542	; 0xfffff22a
    49f8:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    49fc:	042002aa 	strteq	r0, [r0], #-682	; 0xfffffd56
    4a00:	06030501 	streq	r0, [r3], -r1, lsl #10
    4a04:	207dd603 	rsbscs	sp, sp, r3, lsl #12
    4a08:	79031505 	stmdbvc	r3, {r0, r2, r8, sl, ip}
    4a0c:	010e0501 	tsteq	lr, r1, lsl #10
    4a10:	01060205 	tsteq	r6, r5, lsl #4
    4a14:	09030105 	stmdbeq	r3, {r0, r2, r8}
    4a18:	00050220 	andeq	r0, r5, r0, lsr #4
    4a1c:	1e050101 	adfnes	f0, f5, f1
    4a20:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    4a24:	03000024 	movweq	r0, #36	; 0x24
    4a28:	02050139 	andeq	r0, r5, #1073741838	; 0x4000000e
    4a2c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4a30:	03cf0329 	biceq	r0, pc, #-1543503872	; 0xa4000000
    4a34:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4a38:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4a3c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4a40:	031e0501 	tsteq	lr, #4194304	; 0x400000
    4a44:	04207ca8 	strteq	r7, [r0], #-3240	; 0xfffff358
    4a48:	03380502 	teqeq	r8, #8388608	; 0x800000
    4a4c:	042003d8 	strteq	r0, [r0], #-984	; 0xfffffc28
    4a50:	06020501 	streq	r0, [r2], -r1, lsl #10
    4a54:	2e7cab03 	vaddcs.f64	d26, d12, d3
    4a58:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4a5c:	03cd0329 	biceq	r0, sp, #-1543503872	; 0xa4000000
    4a60:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4a64:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4a68:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4a6c:	03010501 	movweq	r0, #5377	; 0x1501
    4a70:	022e7cad 	eoreq	r7, lr, #44288	; 0xad00
    4a74:	01010004 	tsteq	r1, r4
    4a78:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    4a7c:	0024ec02 	eoreq	lr, r4, r2, lsl #24
    4a80:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    4a84:	16020501 	strne	r0, [r2], -r1, lsl #10
    4a88:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    4a8c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4a90:	03ba0338 			; <UNDEFINED> instruction: 0x03ba0338
    4a94:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4a98:	7cca0309 	stclvc	3, cr0, [sl], {9}
    4a9c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4aa0:	03b60338 			; <UNDEFINED> instruction: 0x03b60338
    4aa4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4aa8:	ca030608 	bgt	c62d0 <__ccfg+0xa6328>
    4aac:	0205207c 	andeq	r2, r5, #124	; 0x7c
    4ab0:	143c7303 	ldrtne	r7, [ip], #-771	; 0xfffffcfd
    4ab4:	29050204 	stmdbcs	r5, {r2, r9}
    4ab8:	0103ba03 	tsteq	r3, r3, lsl #20
    4abc:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4ac0:	01041705 	tsteq	r4, r5, lsl #14
    4ac4:	03060205 	movweq	r0, #25093	; 0x6205
    4ac8:	04017cc0 	streq	r7, [r1], #-3264	; 0xfffff340
    4acc:	03380502 	teqeq	r8, #8388608	; 0x800000
    4ad0:	042003c0 	strteq	r0, [r0], #-960	; 0xfffffc40
    4ad4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4ad8:	207cc003 	rsbscs	ip, ip, r3
    4adc:	0606052f 	streq	r0, [r6], -pc, lsr #10
    4ae0:	06020501 	streq	r0, [r2], -r1, lsl #10
    4ae4:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4ae8:	03b70329 			; <UNDEFINED> instruction: 0x03b70329
    4aec:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4af0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4af4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4af8:	06020501 	streq	r0, [r2], -r1, lsl #10
    4afc:	2e7cc303 	cdpcs	3, 7, cr12, cr12, cr3, {0}
    4b00:	19060f05 	stmdbne	r6, {r0, r2, r8, r9, sl, fp}
    4b04:	05360105 	ldreq	r0, [r6, #-261]!	; 0xfffffefb
    4b08:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    4b0c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    4b10:	06040501 	streq	r0, [r4], -r1, lsl #10
    4b14:	024b4c4b 	subeq	r4, fp, #19200	; 0x4b00
    4b18:	01010007 	tsteq	r1, r7
    4b1c:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    4b20:	00254002 	eoreq	r4, r5, r2
    4b24:	01810300 	orreq	r0, r1, r0, lsl #6
    4b28:	16020501 	strne	r0, [r2], -r1, lsl #10
    4b2c:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    4b30:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    4b34:	03052005 	movweq	r2, #20485	; 0x5005
    4b38:	02053006 	andeq	r3, r5, #6
    4b3c:	0608055e 			; <UNDEFINED> instruction: 0x0608055e
    4b40:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
    4b44:	1b060305 	blne	185760 <__ccfg+0x1657b8>
    4b48:	66030205 	strvs	r0, [r3], -r5, lsl #4
    4b4c:	14010101 	strne	r0, [r1], #-257	; 0xfffffeff
    4b50:	29050204 	stmdbcs	r5, {r2, r9}
    4b54:	01039903 	tsteq	r3, r3, lsl #18
    4b58:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4b5c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4b60:	01040106 	tsteq	r4, r6, lsl #2
    4b64:	e1030205 	tst	r3, r5, lsl #4
    4b68:	02042e7c 	andeq	r2, r4, #124, 28	; 0x7c0
    4b6c:	9f033805 	svcls	0x00033805
    4b70:	01042003 	tsteq	r4, r3
    4b74:	03060205 	movweq	r0, #25093	; 0x6205
    4b78:	2f207ce1 	svccs	0x00207ce1
    4b7c:	29050204 	stmdbcs	r5, {r2, r9}
    4b80:	01039703 	tsteq	r3, r3, lsl #14
    4b84:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4b88:	01041705 	tsteq	r4, r5, lsl #14
    4b8c:	03060205 	movweq	r0, #25093	; 0x6205
    4b90:	04017ce3 	streq	r7, [r1], #-3299	; 0xfffff31d
    4b94:	03380502 	teqeq	r8, #8388608	; 0x800000
    4b98:	0420039d 	strteq	r0, [r0], #-925	; 0xfffffc63
    4b9c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4ba0:	207ce303 	rsbscs	lr, ip, r3, lsl #6
    4ba4:	16030305 	strne	r0, [r3], -r5, lsl #6
    4ba8:	0609052e 	streq	r0, [r9], -lr, lsr #10
    4bac:	00090201 	andeq	r0, r9, r1, lsl #4
    4bb0:	17050101 	strne	r0, [r5, -r1, lsl #2]
    4bb4:	80020500 	andhi	r0, r2, r0, lsl #10
    4bb8:	03000025 	movweq	r0, #37	; 0x25
    4bbc:	050100f7 	streq	r0, [r1, #-247]	; 0xffffff09
    4bc0:	17051402 	strne	r1, [r5, -r2, lsl #8]
    4bc4:	0c051006 	stceq	0, cr1, [r5], {6}
    4bc8:	20050522 	andcs	r0, r5, r2, lsr #10
    4bcc:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4bd0:	03020559 	movweq	r0, #9561	; 0x2559
    4bd4:	0305016e 	movweq	r0, #20846	; 0x516e
    4bd8:	053c1303 	ldreq	r1, [ip, #-771]!	; 0xfffffcfd
    4bdc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4be0:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    4be4:	06010501 	streq	r0, [r1], -r1, lsl #10
    4be8:	00030214 	andeq	r0, r3, r4, lsl r2
    4bec:	11050101 	tstne	r5, r1, lsl #2
    4bf0:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    4bf4:	03000025 	movweq	r0, #37	; 0x25
    4bf8:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    4bfc:	11051602 	tstne	r5, r2, lsl #12
    4c00:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    4c04:	052f0624 	streq	r0, [pc, #-1572]!	; 45e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x118>
    4c08:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4c0c:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
    4c10:	72030805 	andvc	r0, r3, #327680	; 0x50000
    4c14:	06020520 	streq	r0, [r2], -r0, lsr #10
    4c18:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    4c1c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4c20:	01010003 	tsteq	r1, r3
    4c24:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4c28:	0025b802 	eoreq	fp, r5, r2, lsl #16
    4c2c:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    4c30:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4c34:	01060605 	tsteq	r6, r5, lsl #12
    4c38:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4c3c:	052f0603 	streq	r0, [pc, #-1539]!	; 4641 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x171>
    4c40:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4c44:	052f0603 	streq	r0, [pc, #-1539]!	; 4649 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x179>
    4c48:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    4c4c:	01010003 	tsteq	r1, r3
    4c50:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    4c54:	00000002 	andeq	r0, r0, r2
    4c58:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    4c5c:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4c60:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4c64:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4c68:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    4c6c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4c70:	12053c18 	andne	r3, r5, #24, 24	; 0x1800
    4c74:	06020520 	streq	r0, [r2], -r0, lsr #10
    4c78:	0204303f 	andeq	r3, r4, #63	; 0x3f
    4c7c:	d1032905 	tstle	r3, r5, lsl #18
    4c80:	3d050102 	stfccs	f0, [r5, #-8]
    4c84:	17050514 	smladne	r5, r4, r5, r0
    4c88:	01063805 	tsteq	r6, r5, lsl #16
    4c8c:	02050104 	andeq	r0, r5, #4, 2
    4c90:	2e7daa03 	vaddcs.f32	s21, s26, s6
    4c94:	38050204 	stmdacc	r5, {r2, r9}
    4c98:	2002d603 	andcs	sp, r2, r3, lsl #12
    4c9c:	02050104 	andeq	r0, r5, #4, 2
    4ca0:	7daa0306 	stcvc	3, cr0, [sl, #24]!
    4ca4:	4b4b2f20 	blmi	12d092c <__ccfg+0x12b0984>
    4ca8:	2008053e 	andcs	r0, r8, lr, lsr r5
    4cac:	04310205 	ldrteq	r0, [r1], #-517	; 0xfffffdfb
    4cb0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4cb4:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    4cb8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4cbc:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4cc0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4cc4:	b4030602 	strlt	r0, [r3], #-1538	; 0xfffff9fe
    4cc8:	05302e7d 	ldreq	r2, [r0, #-3709]!	; 0xfffff183
    4ccc:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4cd0:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    4cd4:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4cd8:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    4cdc:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    4ce0:	0005023c 	andeq	r0, r5, ip, lsr r2
    4ce4:	31050101 	tstcc	r5, r1, lsl #2
    4ce8:	00020500 	andeq	r0, r2, r0, lsl #10
    4cec:	03000000 	movweq	r0, #0
    4cf0:	050101ca 	streq	r0, [r1, #-458]	; 0xfffffe36
    4cf4:	31051402 	tstcc	r5, r2, lsl #8
    4cf8:	0c051006 	stceq	0, cr1, [r5], {6}
    4cfc:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    4d00:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    4d04:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    4d08:	06030530 			; <UNDEFINED> instruction: 0x06030530
    4d0c:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4d10:	20170501 	andscs	r0, r7, r1, lsl #10
    4d14:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4d18:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4d1c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4d20:	03053c17 	movweq	r3, #23575	; 0x5c17
    4d24:	05303206 	ldreq	r3, [r0, #-518]!	; 0xfffffdfa
    4d28:	010a0304 	tsteq	sl, r4, lsl #6
    4d2c:	01061005 	tsteq	r6, r5
    4d30:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    4d34:	09052010 	stmdbeq	r5, {r4, sp}
    4d38:	06040520 	streq	r0, [r4], -r0, lsr #10
    4d3c:	06110522 	ldreq	r0, [r1], -r2, lsr #10
    4d40:	20090501 	andcs	r0, r9, r1, lsl #10
    4d44:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    4d48:	04052e09 	streq	r2, [r5], #-3593	; 0xfffff1f7
    4d4c:	0d052406 	cfstrseq	mvf2, [r5, #-24]	; 0xffffffe8
    4d50:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4d54:	0605054a 	streq	r0, [r5], -sl, asr #10
    4d58:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4d5c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4d60:	0c052f2f 	stceq	15, cr2, [r5], {47}	; 0x2f
    4d64:	01050106 	tsteq	r5, r6, lsl #2
    4d68:	05203103 	streq	r3, [r0, #-259]!	; 0xfffffefd
    4d6c:	52030604 	andpl	r0, r3, #4, 12	; 0x400000
    4d70:	060e0520 	streq	r0, [lr], -r0, lsr #10
    4d74:	20070501 	andcs	r0, r7, r1, lsl #10
    4d78:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    4d7c:	0505201d 	streq	r2, [r5, #-29]	; 0xffffffe3
    4d80:	0b053e06 	bleq	1545a0 <__ccfg+0x1345f8>
    4d84:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4d88:	1e0b0528 	cfsh32ne	mvfx0, mvfx11, #24
    4d8c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4d90:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4d94:	96030638 			; <UNDEFINED> instruction: 0x96030638
    4d98:	01040102 	tsteq	r4, r2, lsl #2
    4d9c:	ea030405 	b	c5db8 <__ccfg+0xa5e10>
    4da0:	02052e7d 	andeq	r2, r5, #2000	; 0x7d0
    4da4:	7ec70306 	cdpvc	3, 12, cr0, cr7, cr6, {0}
    4da8:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4dac:	03c80329 	biceq	r0, r8, #-1543503872	; 0xa4000000
    4db0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4db4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4db8:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4dbc:	06020501 	streq	r0, [r2], -r1, lsl #10
    4dc0:	207cb203 	rsbscs	fp, ip, r3, lsl #4
    4dc4:	3d4b4b2f 	vstrcc	d20, [fp, #-188]	; 0xffffff44
    4dc8:	29050204 	stmdbcs	r5, {r2, r9}
    4dcc:	0103c303 	tsteq	r3, r3, lsl #6
    4dd0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4dd4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4dd8:	01040106 	tsteq	r4, r6, lsl #2
    4ddc:	03060205 	movweq	r0, #25093	; 0x6205
    4de0:	052e7dee 	streq	r7, [lr, #-3566]!	; 0xfffff212
    4de4:	5503060b 	strpl	r0, [r3, #-1547]	; 0xfffff9f5
    4de8:	06090582 	streq	r0, [r9], -r2, lsl #11
    4dec:	052e1f03 	streq	r1, [lr, #-3843]!	; 0xfffff0fd
    4df0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4df4:	2a052e0c 	bcs	15062c <__ccfg+0x130684>
    4df8:	20220520 	eorcs	r0, r2, r0, lsr #10
    4dfc:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4e00:	01060b05 	tsteq	r6, r5, lsl #22
    4e04:	31060505 	tstcc	r6, r5, lsl #10
    4e08:	01060b05 	tsteq	r6, r5, lsl #22
    4e0c:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
    4e10:	0a030604 	beq	c6628 <__ccfg+0xa6680>
    4e14:	0905592e 	stmdbeq	r5, {r1, r2, r3, r5, r8, fp, ip, lr}
    4e18:	0e030106 	adfeqs	f0, f3, f6
    4e1c:	0604054a 	streq	r0, [r4], -sl, asr #10
    4e20:	206b0321 	rsbcs	r0, fp, r1, lsr #6
    4e24:	200b0359 	andcs	r0, fp, r9, asr r3
    4e28:	0609054b 	streq	r0, [r9], -fp, asr #10
    4e2c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4e30:	09054b5e 	stmdbeq	r5, {r1, r2, r3, r4, r6, r8, r9, fp, lr}
    4e34:	03050106 	movweq	r0, #20742	; 0x5106
    4e38:	7fba0306 	svcvc	0x00ba0306
    4e3c:	06060558 			; <UNDEFINED> instruction: 0x06060558
    4e40:	3b090501 	blcc	24624c <__ccfg+0x2262a4>
    4e44:	01010008 	tsteq	r1, r8
    4e48:	05003b05 	streq	r3, [r0, #-2821]	; 0xfffff4fb
    4e4c:	00000002 	andeq	r0, r0, r2
    4e50:	02a00300 	adceq	r0, r0, #0, 6
    4e54:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4e58:	063b0514 			; <UNDEFINED> instruction: 0x063b0514
    4e5c:	320c050e 	andcc	r0, ip, #58720256	; 0x3800000
    4e60:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    4e64:	3b052405 	blcc	14de80 <__ccfg+0x12ded8>
    4e68:	3205051c 	andcc	r0, r5, #28, 10	; 0x7000000
    4e6c:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4e70:	01060605 	tsteq	r6, r5, lsl #12
    4e74:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
    4e78:	03052e14 	movweq	r2, #24084	; 0x5e14
    4e7c:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    4e80:	03050106 	movweq	r0, #20742	; 0x5106
    4e84:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4e88:	03050106 	movweq	r0, #20742	; 0x5106
    4e8c:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4e90:	03050106 	movweq	r0, #20742	; 0x5106
    4e94:	052f3006 	streq	r3, [pc, #-6]!	; 4e96 <__aeabi_lmul+0x536>
    4e98:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4e9c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4ea0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4ea4:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4ea8:	0a052206 	beq	14d6c8 <__ccfg+0x12d720>
    4eac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4eb0:	052f2106 	streq	r2, [pc, #-262]!	; 4db2 <__aeabi_lmul+0x452>
    4eb4:	22030601 	andcs	r0, r3, #1048576	; 0x100000
    4eb8:	06030501 	streq	r0, [r3], -r1, lsl #10
    4ebc:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    4ec0:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4ec4:	03052006 	movweq	r2, #20486	; 0x5006
    4ec8:	24063e06 	strcs	r3, [r6], #-3590	; 0xfffff1fa
    4ecc:	04304a06 	ldrteq	r4, [r0], #-2566	; 0xfffff5fa
    4ed0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4ed4:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
    4ed8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4edc:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4ee0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4ee4:	7eb30303 	cdpvc	3, 11, cr0, cr3, cr3, {0}
    4ee8:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    4eec:	01cd0338 	biceq	r0, sp, r8, lsr r3
    4ef0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4ef4:	b3030603 	movwlt	r0, #13827	; 0x3603
    4ef8:	052f2e7e 	streq	r2, [pc, #-3710]!	; 4082 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x6>
    4efc:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    4f00:	4b062e03 	blmi	190714 <__ccfg+0x17076c>
    4f04:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4f08:	0c053106 	stfeqs	f3, [r5], {6}
    4f0c:	2e09052b 	cfsh32cs	mvfx0, mvfx9, #27
    4f10:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
    4f14:	051d0609 	ldreq	r0, [sp, #-1545]	; 0xfffff9f7
    4f18:	02042603 	andeq	r2, r4, #3145728	; 0x300000
    4f1c:	bb032905 	bllt	cf338 <__ccfg+0xaf390>
    4f20:	3d050101 	stfccs	f0, [r5, #-4]
    4f24:	17050514 	smladne	r5, r4, r5, r0
    4f28:	01063805 	tsteq	r6, r5, lsl #16
    4f2c:	02050104 	andeq	r0, r5, #4, 2
    4f30:	7ec10306 	cdpvc	3, 12, cr0, cr1, cr6, {0}
    4f34:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    4f38:	06020501 	streq	r0, [r2], -r1, lsl #10
    4f3c:	04054b40 	streq	r4, [r5], #-2880	; 0xfffff4c0
    4f40:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    4f44:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4f48:	3d063c04 	stccc	12, cr3, [r6, #-16]
    4f4c:	01060805 	tsteq	r6, r5, lsl #16
    4f50:	59060405 	stmdbpl	r6, {r0, r2, sl}
    4f54:	01060805 	tsteq	r6, r5, lsl #16
    4f58:	5d030b05 	vstrpl	d0, [r3, #-20]	; 0xffffffec
    4f5c:	000d024a 	andeq	r0, sp, sl, asr #4
    4f60:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    4f64:	00020500 	andeq	r0, r2, r0, lsl #10
    4f68:	03000000 	movweq	r0, #0
    4f6c:	050102da 	streq	r0, [r1, #-730]	; 0xfffffd26
    4f70:	01021501 	tsteq	r2, r1, lsl #10
    4f74:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4f78:	02050018 	andeq	r0, r5, #24
    4f7c:	00000000 	andeq	r0, r0, r0
    4f80:	0102df03 	tsteq	r2, r3, lsl #30
    4f84:	05150205 	ldreq	r0, [r5, #-517]	; 0xfffffdfb
    4f88:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4f8c:	01010002 	tsteq	r1, r2
    4f90:	29050304 	stmdbcs	r5, {r2, r8, r9}
    4f94:	00020500 	andeq	r0, r2, r0, lsl #10
    4f98:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4f9c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4fa0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4fa4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4fa8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4fac:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4fb0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4fb4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4fb8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4fbc:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    4fc0:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4fc4:	01010003 	tsteq	r1, r3
    4fc8:	17050304 	strne	r0, [r5, -r4, lsl #6]
    4fcc:	00020500 	andeq	r0, r2, r0, lsl #10
    4fd0:	03000000 	movweq	r0, #0
    4fd4:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    4fd8:	06170514 			; <UNDEFINED> instruction: 0x06170514
    4fdc:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
    4fe0:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    4fe4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4fe8:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    4fec:	b0010100 	andlt	r0, r1, r0, lsl #2
    4ff0:	03000001 	movweq	r0, #1
    4ff4:	00012500 	andeq	r2, r1, r0, lsl #10
    4ff8:	fb010200 	blx	45802 <__ccfg+0x2585a>
    4ffc:	01000d0e 	tsteq	r0, lr, lsl #26
    5000:	00010101 	andeq	r0, r1, r1, lsl #2
    5004:	00010000 	andeq	r0, r1, r0
    5008:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    500c:	2f656d6f 	svccs	0x00656d6f
    5010:	70657473 	rsbvc	r7, r5, r3, ror r4
    5014:	2f6e6568 	svccs	0x006e6568
    5018:	6b736544 	blvs	1cde530 <__ccfg+0x1cbe588>
    501c:	2f706f74 	svccs	0x00706f74
    5020:	4f534c4f 	svcmi	0x00534c4f
    5024:	2f54454e 	svccs	0x0054454e
    5028:	4f434950 	svcmi	0x00434950
    502c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5030:	2f534f63 	svccs	0x00534f63
    5034:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5038:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    503c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5040:	73752f00 	cmnvc	r5, #0, 30
    5044:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5048:	63672f62 	cmnvs	r7, #392	; 0x188
    504c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5050:	6f6e2d6d 	svcvs	0x006e2d6d
    5054:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5058:	2f696261 	svccs	0x00696261
    505c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5060:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5064:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5068:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    506c:	2f656d6f 	svccs	0x00656d6f
    5070:	70657473 	rsbvc	r7, r5, r3, ror r4
    5074:	2f6e6568 	svccs	0x006e6568
    5078:	6b736544 	blvs	1cde590 <__ccfg+0x1cbe5e8>
    507c:	2f706f74 	svccs	0x00706f74
    5080:	4f534c4f 	svcmi	0x00534c4f
    5084:	2f54454e 	svccs	0x0054454e
    5088:	4f434950 	svcmi	0x00434950
    508c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5090:	2f534f63 	svccs	0x00534f63
    5094:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5098:	2f005858 	svccs	0x00005858
    509c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    50a0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    50a4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    50a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    50ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    50b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    50b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    50b8:	4349502f 	movtmi	r5, #36911	; 0x902f
    50bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    50c0:	534f6369 	movtpl	r6, #62313	; 0xf369
    50c4:	65730000 	ldrbvs	r0, [r3, #-0]!
    50c8:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 415e <NOROM_SetupGetTrimForXoscHfCtl+0x6>
    50cc:	00632e74 	rsbeq	r2, r3, r4, ror lr
    50d0:	73000001 	movwvc	r0, #1
    50d4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    50d8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    50dc:	61000002 	tstvs	r0, r2
    50e0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    50e4:	00030068 	andeq	r0, r3, r8, rrx
    50e8:	63616d00 	cmnvs	r1, #0, 26
    50ec:	00682e68 	rsbeq	r2, r8, r8, ror #28
    50f0:	70000003 	andvc	r0, r0, r3
    50f4:	5f736e69 	svcpl	0x00736e69
    50f8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    50fc:	00030068 	andeq	r0, r3, r8, rrx
    5100:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5104:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5108:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    510c:	0300682e 	movweq	r6, #2094	; 0x82e
    5110:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5114:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5118:	00040068 	andeq	r0, r4, r8, rrx
    511c:	26050000 	strcs	r0, [r5], -r0
    5120:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    5124:	03000025 	movweq	r0, #37	; 0x25
    5128:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    512c:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    5130:	200d0626 	andcs	r0, sp, r6, lsr #12
    5134:	05250e05 	streq	r0, [r5, #-3589]!	; 0xfffff1fb
    5138:	0e051b26 	vmlaeq.f64	d1, d5, d22
    513c:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    5140:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    5144:	010d033d 	tsteq	sp, sp, lsr r3
    5148:	76030205 	strvc	r0, [r3], -r5, lsl #4
    514c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    5150:	06030501 	streq	r0, [r3], -r1, lsl #10
    5154:	060a052f 	streq	r0, [sl], -pc, lsr #10
    5158:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
    515c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5160:	01061505 	tsteq	r6, r5, lsl #10
    5164:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    5168:	03320603 	teqeq	r2, #3145728	; 0x300000
    516c:	0d054a7a 	vstreq	s8, [r5, #-488]	; 0xfffffe18
    5170:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5174:	06020520 	streq	r0, [r2], -r0, lsr #10
    5178:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    517c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5180:	052f0603 	streq	r0, [pc, #-1539]!	; 4b85 <__aeabi_lmul+0x225>
    5184:	06054002 	streq	r4, [r5], -r2
    5188:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    518c:	0603054a 	streq	r0, [r3], -sl, asr #10
    5190:	7a033e22 	bvc	d4a20 <__ccfg+0xb4a78>
    5194:	03020520 	movweq	r0, #9504	; 0x2520
    5198:	0105580a 	tsteq	r5, sl, lsl #16
    519c:	05021306 	streq	r1, [r2, #-774]	; 0xfffffcfa
    51a0:	c4010100 	strgt	r0, [r1], #-256	; 0xffffff00
    51a4:	03000001 	movweq	r0, #1
    51a8:	00012400 	andeq	r2, r1, r0, lsl #8
    51ac:	fb010200 	blx	459b6 <__ccfg+0x25a0e>
    51b0:	01000d0e 	tsteq	r0, lr, lsl #26
    51b4:	00010101 	andeq	r0, r1, r1, lsl #2
    51b8:	00010000 	andeq	r0, r1, r0
    51bc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    51c0:	2f656d6f 	svccs	0x00656d6f
    51c4:	70657473 	rsbvc	r7, r5, r3, ror r4
    51c8:	2f6e6568 	svccs	0x006e6568
    51cc:	6b736544 	blvs	1cde6e4 <__ccfg+0x1cbe73c>
    51d0:	2f706f74 	svccs	0x00706f74
    51d4:	4f534c4f 	svcmi	0x00534c4f
    51d8:	2f54454e 	svccs	0x0054454e
    51dc:	4f434950 	svcmi	0x00434950
    51e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    51e4:	2f534f63 	svccs	0x00534f63
    51e8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    51ec:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    51f0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    51f4:	73752f00 	cmnvc	r5, #0, 30
    51f8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    51fc:	63672f62 	cmnvs	r7, #392	; 0x188
    5200:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5204:	6f6e2d6d 	svcvs	0x006e2d6d
    5208:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    520c:	2f696261 	svccs	0x00696261
    5210:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5214:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5218:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    521c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5220:	2f656d6f 	svccs	0x00656d6f
    5224:	70657473 	rsbvc	r7, r5, r3, ror r4
    5228:	2f6e6568 	svccs	0x006e6568
    522c:	6b736544 	blvs	1cde744 <__ccfg+0x1cbe79c>
    5230:	2f706f74 	svccs	0x00706f74
    5234:	4f534c4f 	svcmi	0x00534c4f
    5238:	2f54454e 	svccs	0x0054454e
    523c:	4f434950 	svcmi	0x00434950
    5240:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5244:	2f534f63 	svccs	0x00534f63
    5248:	33314343 	teqcc	r1, #201326593	; 0xc000001
    524c:	2f005858 	svccs	0x00005858
    5250:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5254:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5258:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    525c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5260:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5264:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5268:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    526c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5270:	502f534f 	eorpl	r5, pc, pc, asr #6
    5274:	534f6369 	movtpl	r6, #62313	; 0xf369
    5278:	65730000 	ldrbvs	r0, [r3, #-0]!
    527c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    5280:	0100632e 	tsteq	r0, lr, lsr #6
    5284:	74730000 	ldrbtvc	r0, [r3], #-0
    5288:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    528c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5290:	72610000 	rsbvc	r0, r1, #0
    5294:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5298:	00000300 	andeq	r0, r0, r0, lsl #6
    529c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    52a0:	0300682e 	movweq	r6, #2094	; 0x82e
    52a4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    52a8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    52ac:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    52b0:	00000300 	andeq	r0, r0, r0, lsl #6
    52b4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    52b8:	5f736e6f 	svcpl	0x00736e6f
    52bc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    52c0:	00030068 	andeq	r0, r3, r8, rrx
    52c4:	73797300 	cmnvc	r9, #0, 6
    52c8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    52cc:	00000400 	andeq	r0, r0, r0, lsl #8
    52d0:	002a0500 	eoreq	r0, sl, r0, lsl #10
    52d4:	26380205 	ldrtcs	r0, [r8], -r5, lsl #4
    52d8:	0c030000 	stceq	0, cr0, [r3], {-0}
    52dc:	16020501 	strne	r0, [r2], -r1, lsl #10
    52e0:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    52e4:	20017a03 	andcs	r7, r1, r3, lsl #20
    52e8:	05340505 	ldreq	r0, [r4, #-1285]!	; 0xfffffafb
    52ec:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    52f0:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    52f4:	03052e05 	movweq	r2, #24069	; 0x5e05
    52f8:	0f052106 	svceq	0x00052106
    52fc:	06050106 	streq	r0, [r5], -r6, lsl #2
    5300:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    5304:	060b0521 	streq	r0, [fp], -r1, lsr #10
    5308:	06040501 	streq	r0, [r4], -r1, lsl #10
    530c:	0607054b 	streq	r0, [r7], -fp, asr #10
    5310:	06050501 	streq	r0, [r5], -r1, lsl #10
    5314:	03053d21 	movweq	r3, #23841	; 0x5d21
    5318:	02052d16 	andeq	r2, r5, #1408	; 0x580
    531c:	0605054f 	streq	r0, [r5], -pc, asr #10
    5320:	06030501 	streq	r0, [r3], -r1, lsl #10
    5324:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    5328:	20080501 	andcs	r0, r8, r1, lsl #10
    532c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5330:	01060505 	tsteq	r6, r5, lsl #10
    5334:	21060305 	tstcs	r6, r5, lsl #6
    5338:	01060805 	tsteq	r6, r5, lsl #16
    533c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    5340:	0c053d59 	stceq	13, cr3, [r5], {89}	; 0x59
    5344:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5348:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    534c:	03050106 	movweq	r0, #20742	; 0x5106
    5350:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    5354:	01050106 	tsteq	r5, r6, lsl #2
    5358:	06030522 	streq	r0, [r3], -r2, lsr #10
    535c:	052e7503 	streq	r7, [lr, #-1283]!	; 0xfffffafd
    5360:	0301060a 	movweq	r0, #5642	; 0x160a
    5364:	07024a6e 	streq	r4, [r2, -lr, ror #20]
    5368:	a1010100 	mrsge	r0, (UNDEF: 17)
    536c:	03000001 	movweq	r0, #1
    5370:	00014000 	andeq	r4, r1, r0
    5374:	fb010200 	blx	45b7e <__ccfg+0x25bd6>
    5378:	01000d0e 	tsteq	r0, lr, lsl #26
    537c:	00010101 	andeq	r0, r1, r1, lsl #2
    5380:	00010000 	andeq	r0, r1, r0
    5384:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5388:	2f656d6f 	svccs	0x00656d6f
    538c:	70657473 	rsbvc	r7, r5, r3, ror r4
    5390:	2f6e6568 	svccs	0x006e6568
    5394:	6b736544 	blvs	1cde8ac <__ccfg+0x1cbe904>
    5398:	2f706f74 	svccs	0x00706f74
    539c:	4f534c4f 	svcmi	0x00534c4f
    53a0:	2f54454e 	svccs	0x0054454e
    53a4:	4f434950 	svcmi	0x00434950
    53a8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    53ac:	2f534f63 	svccs	0x00534f63
    53b0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    53b4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    53b8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    53bc:	73752f00 	cmnvc	r5, #0, 30
    53c0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    53c4:	63672f62 	cmnvs	r7, #392	; 0x188
    53c8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    53cc:	6f6e2d6d 	svcvs	0x006e2d6d
    53d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    53d4:	2f696261 	svccs	0x00696261
    53d8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    53dc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    53e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    53e4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    53e8:	2f656d6f 	svccs	0x00656d6f
    53ec:	70657473 	rsbvc	r7, r5, r3, ror r4
    53f0:	2f6e6568 	svccs	0x006e6568
    53f4:	6b736544 	blvs	1cde90c <__ccfg+0x1cbe964>
    53f8:	2f706f74 	svccs	0x00706f74
    53fc:	4f534c4f 	svcmi	0x00534c4f
    5400:	2f54454e 	svccs	0x0054454e
    5404:	4f434950 	svcmi	0x00434950
    5408:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    540c:	2f534f63 	svccs	0x00534f63
    5410:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5414:	2f005858 	svccs	0x00005858
    5418:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    541c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5420:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5424:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5428:	706f746b 	rsbvc	r7, pc, fp, ror #8
    542c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5430:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5434:	4349502f 	movtmi	r5, #36911	; 0x902f
    5438:	502f534f 	eorpl	r5, pc, pc, asr #6
    543c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5440:	65730000 	ldrbvs	r0, [r3, #-0]!
    5444:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 44da <NOROM_SysCtrlSetRechargeBeforePowerDown+0xa>
    5448:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    544c:	00000100 	andeq	r0, r0, r0, lsl #2
    5450:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5454:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5458:	00000200 	andeq	r0, r0, r0, lsl #4
    545c:	61647473 	smcvs	18243	; 0x4743
    5460:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5464:	00000200 	andeq	r0, r0, r0, lsl #4
    5468:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    546c:	0300682e 	movweq	r6, #2094	; 0x82e
    5470:	616d0000 	cmnvs	sp, r0
    5474:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5478:	00000300 	andeq	r0, r0, r0, lsl #6
    547c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5480:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5484:	0300682e 	movweq	r6, #2094	; 0x82e
    5488:	75620000 	strbvc	r0, [r2, #-0]!
    548c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    5490:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5494:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5498:	73000003 	movwvc	r0, #3
    549c:	6f697379 	svcvs	0x00697379
    54a0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    54a4:	623c0000 	eorsvs	r0, ip, #0
    54a8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    54ac:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    54b0:	00000000 	andeq	r0, r0, r0
    54b4:	002c0500 	eoreq	r0, ip, r0, lsl #10
    54b8:	26b00205 	ldrtcs	r0, [r0], r5, lsl #4
    54bc:	0b030000 	bleq	c54c4 <__ccfg+0xa551c>
    54c0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    54c4:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    54c8:	7a03062c 	bvc	c6d80 <__ccfg+0xa6dd8>
    54cc:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    54d0:	3c050526 	cfstr32cc	mvfx0, [r5], {38}	; 0x26
    54d4:	30060305 	andcc	r0, r6, r5, lsl #6
    54d8:	010a033d 	tsteq	sl, sp, lsr r3
    54dc:	79030205 	stmdbvc	r3, {r0, r2, r9}
    54e0:	060d052e 	streq	r0, [sp], -lr, lsr #10
    54e4:	1e020522 	cfsh32ne	mvfx0, mvfx2, #18
    54e8:	0d052206 	sfmeq	f2, 4, [r5, #-24]	; 0xffffffe8
    54ec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    54f0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    54f4:	4e020532 	mcrmi	5, 0, r0, cr2, cr2, {1}
    54f8:	01060605 	tsteq	r6, r5, lsl #12
    54fc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    5500:	3d210603 	stccc	6, cr0, [r1, #-12]!
    5504:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    5508:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    550c:	01010009 	tsteq	r1, r9
    5510:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    5514:	013f0003 	teqeq	pc, r3
    5518:	01020000 	mrseq	r0, (UNDEF: 2)
    551c:	000d0efb 	strdeq	r0, [sp], -fp
    5520:	01010101 	tsteq	r1, r1, lsl #2
    5524:	01000000 	mrseq	r0, (UNDEF: 0)
    5528:	2f010000 	svccs	0x00010000
    552c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5530:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5534:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5538:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    553c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5540:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5544:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5548:	4349502f 	movtmi	r5, #36911	; 0x902f
    554c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5550:	534f6369 	movtpl	r6, #62313	; 0xf369
    5554:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5558:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    555c:	61697265 	cmnvs	r9, r5, ror #4
    5560:	752f006c 	strvc	r0, [pc, #-108]!	; 54fc <patchGenfskRfe+0x3a4>
    5564:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 53a0 <patchGenfskRfe+0x248>
    5568:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    556c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5570:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5574:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5578:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    557c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5580:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5584:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5588:	2f006564 	svccs	0x00006564
    558c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5590:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5594:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5598:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    559c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    55a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    55a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    55a8:	4349502f 	movtmi	r5, #36911	; 0x902f
    55ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    55b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    55b4:	3143432f 	cmpcc	r3, pc, lsr #6
    55b8:	00585833 	subseq	r5, r8, r3, lsr r8
    55bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5508 <patchGenfskRfe+0x3b0>
    55c0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    55c4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    55c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    55cc:	6f746b73 	svcvs	0x00746b73
    55d0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    55d4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    55d8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    55dc:	2f534f43 	svccs	0x00534f43
    55e0:	4f636950 	svcmi	0x00636950
    55e4:	73000053 	movwvc	r0, #83	; 0x53
    55e8:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    55ec:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    55f0:	00000100 	andeq	r0, r0, r0, lsl #2
    55f4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    55f8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    55fc:	00000200 	andeq	r0, r0, r0, lsl #4
    5600:	61647473 	smcvs	18243	; 0x4743
    5604:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5608:	00000200 	andeq	r0, r0, r0, lsl #4
    560c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5610:	0300682e 	movweq	r6, #2094	; 0x82e
    5614:	616d0000 	cmnvs	sp, r0
    5618:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    561c:	00000300 	andeq	r0, r0, r0, lsl #6
    5620:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5624:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5628:	0300682e 	movweq	r6, #2094	; 0x82e
    562c:	75620000 	strbvc	r0, [r2, #-0]!
    5630:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    5634:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5638:	00682e73 	rsbeq	r2, r8, r3, ror lr
    563c:	73000003 	movwvc	r0, #3
    5640:	6f697379 	svcvs	0x00697379
    5644:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5648:	623c0000 	eorsvs	r0, ip, #0
    564c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    5650:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    5654:	00000000 	andeq	r0, r0, r0
    5658:	002d0500 	eoreq	r0, sp, r0, lsl #10
    565c:	27040205 	strcs	r0, [r4, -r5, lsl #4]
    5660:	0d030000 	stceq	0, cr0, [r3, #-0]
    5664:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5668:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    566c:	01780306 	cmneq	r8, r6, lsl #6
    5670:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    5674:	23060205 	movwcs	r0, #25093	; 0x6205
    5678:	01061005 	tsteq	r6, r5
    567c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5680:	052f0603 	streq	r0, [pc, #-1539]!	; 5085 <__pi_hex_enc_table+0x58>
    5684:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5688:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    568c:	0b052106 	bleq	14daac <__ccfg+0x12db04>
    5690:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5694:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    5698:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    569c:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    56a0:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    56a4:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    56a8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    56ac:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    56b0:	01060c05 	tsteq	r6, r5, lsl #24
    56b4:	30060205 	andcc	r0, r6, r5, lsl #4
    56b8:	13060105 	movwne	r0, #24837	; 0x6105
    56bc:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    56c0:	00060266 	andeq	r0, r6, r6, ror #4
    56c4:	0cae0101 	stfeqs	f0, [lr], #4
    56c8:	00030000 	andeq	r0, r3, r0
    56cc:	0000029e 	muleq	r0, lr, r2
    56d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    56d4:	0101000d 	tsteq	r1, sp
    56d8:	00000101 	andeq	r0, r0, r1, lsl #2
    56dc:	00000100 	andeq	r0, r0, r0, lsl #2
    56e0:	6f682f01 	svcvs	0x00682f01
    56e4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    56e8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    56ec:	442f6e65 	strtmi	r6, [pc], #-3685	; 56f4 <patchGenfskRfe+0x59c>
    56f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    56f4:	4f2f706f 	svcmi	0x002f706f
    56f8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    56fc:	502f5445 	eorpl	r5, pc, r5, asr #8
    5700:	534f4349 	movtpl	r4, #62281	; 0xf349
    5704:	6369502f 	cmnvs	r9, #47	; 0x2f
    5708:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    570c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5710:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5714:	2f656d6f 	svccs	0x00656d6f
    5718:	70657473 	rsbvc	r7, r5, r3, ror r4
    571c:	2f6e6568 	svccs	0x006e6568
    5720:	6b736544 	blvs	1cdec38 <__ccfg+0x1cbec90>
    5724:	2f706f74 	svccs	0x00706f74
    5728:	4f534c4f 	svcmi	0x00534c4f
    572c:	2f54454e 	svccs	0x0054454e
    5730:	4f434950 	svcmi	0x00434950
    5734:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5738:	2f534f63 	svccs	0x00534f63
    573c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5740:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    5744:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5748:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    574c:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    5750:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5754:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5758:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 56a4 <patchGenfskRfe+0x54c>
    575c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5760:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5764:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5768:	6f746b73 	svcvs	0x00746b73
    576c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5770:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5774:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5778:	2f534f43 	svccs	0x00534f43
    577c:	4f636950 	svcmi	0x00636950
    5780:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5784:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5788:	3143432f 	cmpcc	r3, pc, lsr #6
    578c:	57585833 	smmlarpl	r8, r3, r8, r5
    5790:	2f455241 	svccs	0x00455241
    5794:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    5798:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    579c:	2f007365 	svccs	0x00007365
    57a0:	2f727375 	svccs	0x00727375
    57a4:	2f62696c 	svccs	0x0062696c
    57a8:	2f636367 	svccs	0x00636367
    57ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    57b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    57b8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    57bc:	2f312e32 	svccs	0x00312e32
    57c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    57c4:	00656475 	rsbeq	r6, r5, r5, ror r4
    57c8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    57cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    57d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    57d4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    57d8:	2f62696c 	svccs	0x0062696c
    57dc:	00737973 	rsbseq	r7, r3, r3, ror r9
    57e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 572c <patchGenfskRfe+0x5d4>
    57e4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    57e8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    57ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    57f0:	6f746b73 	svcvs	0x00746b73
    57f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    57f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    57fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5800:	2f534f43 	svccs	0x00534f43
    5804:	4f636950 	svcmi	0x00636950
    5808:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    580c:	2f656d6f 	svccs	0x00656d6f
    5810:	70657473 	rsbvc	r7, r5, r3, ror r4
    5814:	2f6e6568 	svccs	0x006e6568
    5818:	6b736544 	blvs	1cded30 <__ccfg+0x1cbed88>
    581c:	2f706f74 	svccs	0x00706f74
    5820:	4f534c4f 	svcmi	0x00534c4f
    5824:	2f54454e 	svccs	0x0054454e
    5828:	4f434950 	svcmi	0x00434950
    582c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5830:	2f534f63 	svccs	0x00534f63
    5834:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    5838:	00006c65 	andeq	r6, r0, r5, ror #24
    583c:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    5840:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
    5844:	00000100 	andeq	r0, r0, r0, lsl #2
    5848:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    584c:	00020068 	andeq	r0, r2, r8, rrx
    5850:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    5854:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5858:	72000002 	andvc	r0, r0, #2
    585c:	61705f66 	cmnvs	r0, r6, ror #30
    5860:	5f686374 	svcpl	0x00686374
    5864:	5f657063 	svcpl	0x00657063
    5868:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    586c:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    5870:	00000300 	andeq	r0, r0, r0, lsl #6
    5874:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    5878:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    587c:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    5880:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    5884:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    5888:	00030068 	andeq	r0, r3, r8, rrx
    588c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5890:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5894:	00040068 	andeq	r0, r4, r8, rrx
    5898:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    589c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    58a0:	00040068 	andeq	r0, r4, r8, rrx
    58a4:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    58a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    58ac:	00050068 	andeq	r0, r5, r8, rrx
    58b0:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    58b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    58b8:	00000500 	andeq	r0, r0, r0, lsl #10
    58bc:	6b636f6c 	blvs	18e1674 <__ccfg+0x18c16cc>
    58c0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    58c4:	66720000 	ldrbtvs	r0, [r2], -r0
    58c8:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    58cc:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    58d0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    58d4:	66720000 	ldrbtvs	r0, [r2], -r0
    58d8:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 5764 <patchGenfskRfe+0x60c>
    58dc:	5f6e6f6d 	svcpl	0x006e6f6d
    58e0:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    58e4:	00020068 	andeq	r0, r2, r8, rrx
    58e8:	5f667200 	svcpl	0x00667200
    58ec:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    58f0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    58f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    58f8:	66720000 	ldrbtvs	r0, [r2], -r0
    58fc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    5900:	6e655f61 	cdpvs	15, 6, cr5, cr5, cr1, {3}
    5904:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
    5908:	00020068 	andeq	r0, r2, r8, rrx
    590c:	63726100 	cmnvs	r2, #0, 2
    5910:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5914:	6d000001 	stcvs	0, cr0, [r0, #-4]
    5918:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    591c:	00010068 	andeq	r0, r1, r8, rrx
    5920:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5924:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5928:	00682e73 	rsbeq	r2, r8, r3, ror lr
    592c:	62000001 	andvs	r0, r0, #1
    5930:	6f747475 	svcvs	0x00747475
    5934:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5938:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    593c:	00000100 	andeq	r0, r0, r0, lsl #2
    5940:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5944:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5948:	6b000006 	blvs	5968 <patchImageGenfsk+0x15c>
    594c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    5950:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    5954:	73000007 	movwvc	r0, #7
    5958:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    595c:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    5960:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    5964:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    5968:	00010068 	andeq	r0, r1, r8, rrx
    596c:	17050000 	strne	r0, [r5, -r0]
    5970:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    5974:	03000027 	movweq	r0, #39	; 0x27
    5978:	0501039f 	streq	r0, [r1, #-927]	; 0xfffffc61
    597c:	38051602 	stmdacc	r5, {r1, r9, sl, ip}
    5980:	26051406 	strcs	r1, [r5], -r6, lsl #8
    5984:	20380520 	eorscs	r0, r8, r0, lsr #10
    5988:	053c2605 	ldreq	r2, [ip, #-1541]!	; 0xfffff9fb
    598c:	01051e15 	tsteq	r5, r5, lsl lr
    5990:	00080231 	andeq	r0, r8, r1, lsr r2
    5994:	2a050101 	bcs	145da0 <__ccfg+0x125df8>
    5998:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    599c:	03000027 	movweq	r0, #39	; 0x27
    59a0:	050106c9 	streq	r0, [r1, #-1737]	; 0xfffff937
    59a4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    59a8:	200e062a 	andcs	r0, lr, sl, lsr #12
    59ac:	08060405 	stmdaeq	r6, {r0, r2, sl}
    59b0:	06170544 	ldreq	r0, [r7], -r4, asr #10
    59b4:	200c0501 	andcs	r0, ip, r1, lsl #10
    59b8:	20030805 	andcs	r0, r3, r5, lsl #16
    59bc:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    59c0:	20640321 	rsbcs	r0, r4, r1, lsr #6
    59c4:	03060605 	movweq	r0, #26117	; 0x6605
    59c8:	04055875 	streq	r5, [r5], #-2165	; 0xfffff78b
    59cc:	200d0306 	andcs	r0, sp, r6, lsl #6
    59d0:	2e9e0101 	fmlcse	f0, f6, f1
    59d4:	01054a58 	tsteq	r5, r8, asr sl
    59d8:	00fa0306 	rscseq	r0, sl, r6, lsl #6
    59dc:	06040501 	streq	r0, [r4], -r1, lsl #10
    59e0:	207f9003 	rsbscs	r9, pc, r3
    59e4:	060b055d 			; <UNDEFINED> instruction: 0x060b055d
    59e8:	05202001 	streq	r2, [r0, #-1]!
    59ec:	052f0604 	streq	r0, [pc, #-1540]!	; 53f0 <patchGenfskRfe+0x298>
    59f0:	63030606 	movwvs	r0, #13830	; 0x3606
    59f4:	06040501 	streq	r0, [r4], -r1, lsl #10
    59f8:	052e2103 	streq	r2, [lr, #-259]!	; 0xfffffefd
    59fc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5a00:	04052008 	streq	r2, [r5], #-8
    5a04:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    5a08:	0100e203 	tsteq	r0, r3, lsl #4
    5a0c:	01060505 	tsteq	r6, r5, lsl #10
    5a10:	2f060305 	svccs	0x00060305
    5a14:	050f0205 	streq	r0, [pc, #-517]	; 5817 <patchImageGenfsk+0xb>
    5a18:	05150608 	ldreq	r0, [r5, #-1544]	; 0xfffff9f8
    5a1c:	04051d09 	streq	r1, [r5], #-3337	; 0xfffff2f7
    5a20:	7fa40306 	svcvc	0x00a40306
    5a24:	06110520 	ldreq	r0, [r1], -r0, lsr #10
    5a28:	06040501 	streq	r0, [r4], -r1, lsl #10
    5a2c:	06050541 	streq	r0, [r5], -r1, asr #10
    5a30:	1f070513 	svcne	0x00070513
    5a34:	21060505 	tstcs	r6, r5, lsl #10
    5a38:	5204055b 	andpl	r0, r4, #381681664	; 0x16c00000
    5a3c:	01060705 	tsteq	r6, r5, lsl #14
    5a40:	22060505 	andcs	r0, r6, #20971520	; 0x1400000
    5a44:	5a060101 	bpl	185e50 <__ccfg+0x165ea8>
    5a48:	0d054a06 	vstreq	s8, [r5, #-24]	; 0xffffffe8
    5a4c:	20053506 	andcs	r3, r5, r6, lsl #10
    5a50:	06050521 	streq	r0, [r5], -r1, lsr #10
    5a54:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    5a58:	2d080513 	cfstr32cs	mvfx0, [r8, #-76]	; 0xffffffb4
    5a5c:	2d061b05 	vstrcs	d1, [r6, #-20]	; 0xffffffec
    5a60:	01061e05 	tsteq	r6, r5, lsl #28
    5a64:	20061205 	andcs	r1, r6, r5, lsl #4
    5a68:	01060405 	tsteq	r6, r5, lsl #8
    5a6c:	3c100306 	ldccc	3, cr0, [r0], {6}
    5a70:	01062e05 	tsteq	r6, r5, lsl #28
    5a74:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    5a78:	04051f2e 	streq	r1, [r5], #-3886	; 0xfffff0d2
    5a7c:	2e053e06 	cdpcs	14, 0, cr3, cr5, cr6, {0}
    5a80:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
    5a84:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a88:	0524594b 	streq	r5, [r4, #-2379]!	; 0xfffff6b5
    5a8c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5a90:	200e0308 	andcs	r0, lr, r8, lsl #6
    5a94:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    5a98:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    5a9c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5aa0:	0c052114 	stfeqs	f2, [r5], {20}
    5aa4:	04052049 	streq	r2, [r5], #-73	; 0xffffffb7
    5aa8:	11033006 	tstne	r3, r6
    5aac:	75032f01 	strvc	r2, [r3, #-3841]	; 0xfffff0ff
    5ab0:	060a0558 			; <UNDEFINED> instruction: 0x060a0558
    5ab4:	06040501 	streq	r0, [r4], -r1, lsl #10
    5ab8:	060a0536 			; <UNDEFINED> instruction: 0x060a0536
    5abc:	21060501 	tstcs	r6, r1, lsl #10
    5ac0:	2e1f0a05 	vnmlscs.f32	s0, s30, s10
    5ac4:	053c2020 	ldreq	r2, [ip, #-32]!	; 0xffffffe0
    5ac8:	09030604 	stmdbeq	r3, {r2, r9, sl}
    5acc:	060d0566 	streq	r0, [sp], -r6, ror #10
    5ad0:	05202001 	streq	r2, [r0, #-1]!
    5ad4:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5ad8:	051e060d 	ldreq	r0, [lr, #-1549]	; 0xfffff9f3
    5adc:	02420604 	subeq	r0, r2, #4, 12	; 0x400000
    5ae0:	0101001f 	tsteq	r1, pc, lsl r0
    5ae4:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    5ae8:	00291402 	eoreq	r1, r9, r2, lsl #8
    5aec:	01c40300 	biceq	r0, r4, r0, lsl #6
    5af0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5af4:	06230515 			; <UNDEFINED> instruction: 0x06230515
    5af8:	20017803 	andcs	r7, r1, r3, lsl #16
    5afc:	03060205 	movweq	r0, #25093	; 0x6205
    5b00:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    5b04:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    5b08:	3c0c0501 	cfstr32cc	mvfx0, [ip], {1}
    5b0c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5b10:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    5b14:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5b18:	06300604 	ldrteq	r0, [r0], -r4, lsl #12
    5b1c:	06030526 	streq	r0, [r3], -r6, lsr #10
    5b20:	0606053a 			; <UNDEFINED> instruction: 0x0606053a
    5b24:	06040501 	streq	r0, [r4], -r1, lsl #10
    5b28:	03054b2f 	movweq	r4, #23343	; 0x5b2f
    5b2c:	03080531 	movweq	r0, #34097	; 0x8531
    5b30:	06053c71 			; <UNDEFINED> instruction: 0x06053c71
    5b34:	01051306 	tsteq	r5, r6, lsl #6
    5b38:	02201003 	eoreq	r1, r0, #3
    5b3c:	01010009 	tsteq	r1, r9
    5b40:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    5b44:	00295c02 	eoreq	r5, r9, r2, lsl #24
    5b48:	03940300 	orrseq	r0, r4, #0, 6
    5b4c:	16020501 	strne	r0, [r2], -r1, lsl #10
    5b50:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    5b54:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    5b58:	02052005 	andeq	r2, r5, #5
    5b5c:	053d3f06 	ldreq	r3, [sp, #-3846]!	; 0xfffff0fa
    5b60:	024b0601 	subeq	r0, fp, #1048576	; 0x100000
    5b64:	01010006 	tsteq	r1, r6
    5b68:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    5b6c:	00298002 	eoreq	r8, r9, r2
    5b70:	02e00300 	rsceq	r0, r0, #0, 6
    5b74:	16020501 	strne	r0, [r2], -r1, lsl #10
    5b78:	0e061705 	cdpeq	7, 0, cr1, cr6, cr5, {0}
    5b7c:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    5b80:	02052005 	andeq	r2, r5, #5
    5b84:	02043f06 	andeq	r3, r4, #6, 30
    5b88:	03063505 	movweq	r3, #25861	; 0x6505
    5b8c:	04017eb9 	streq	r7, [r1], #-3769	; 0xfffff147
    5b90:	03020501 	movweq	r0, #9473	; 0x2501
    5b94:	062001c7 	strteq	r0, [r0], -r7, asr #3
    5b98:	04303f5a 	ldrteq	r3, [r0], #-3930	; 0xfffff0a6
    5b9c:	03050502 	movweq	r0, #21762	; 0x5502
    5ba0:	05017eb2 	streq	r7, [r1, #-3762]	; 0xfffff14e
    5ba4:	04010635 	streq	r0, [r1], #-1589	; 0xfffff9cb
    5ba8:	03020501 	movweq	r0, #9473	; 0x2501
    5bac:	042001d0 	strteq	r0, [r0], #-464	; 0xfffffe30
    5bb0:	03350502 	teqeq	r5, #8388608	; 0x800000
    5bb4:	04207eb0 	strteq	r7, [r0], #-3760	; 0xfffff150
    5bb8:	06020501 	streq	r0, [r2], -r1, lsl #10
    5bbc:	2001d003 	andcs	sp, r1, r3
    5bc0:	06480531 			; <UNDEFINED> instruction: 0x06480531
    5bc4:	06020501 	streq	r0, [r2], -r1, lsl #10
    5bc8:	04013131 	streq	r3, [r1], #-305	; 0xfffffecf
    5bcc:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5bd0:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    5bd4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5bd8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5bdc:	1c030602 	stcne	6, cr0, [r3], {2}
    5be0:	0503044a 	streq	r0, [r3, #-1098]	; 0xfffffbb6
    5be4:	015f0329 	cmpeq	pc, r9, lsr #6
    5be8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    5bec:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    5bf0:	06020501 	streq	r0, [r2], -r1, lsl #10
    5bf4:	142e1c03 	strtne	r1, [lr], #-3075	; 0xfffff3fd
    5bf8:	0101014b 	tsteq	r1, fp, asr #2
    5bfc:	01050101 	tsteq	r5, r1, lsl #2
    5c00:	0b021306 	bleq	8a820 <__ccfg+0x6a878>
    5c04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5c08:	0205000d 	andeq	r0, r5, #13
    5c0c:	000029dc 	ldrdeq	r2, [r0], -ip
    5c10:	0101e103 	tsteq	r1, r3, lsl #2
    5c14:	02052006 	andeq	r2, r5, #6
    5c18:	03054f06 	movweq	r4, #24326	; 0x5f06
    5c1c:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5c20:	20060501 	andcs	r0, r6, r1, lsl #10
    5c24:	31060305 	tstcc	r6, r5, lsl #6
    5c28:	01060605 	tsteq	r6, r5, lsl #12
    5c2c:	30060405 	andcc	r0, r6, r5, lsl #8
    5c30:	4c03055b 	cfstr32mi	mvfx0, [r3], {91}	; 0x5b
    5c34:	75030805 	strvc	r0, [r3, #-2053]	; 0xfffff7fb
    5c38:	0606053c 			; <UNDEFINED> instruction: 0x0606053c
    5c3c:	03010513 	movweq	r0, #5395	; 0x1513
    5c40:	0502200c 	streq	r2, [r2, #-12]
    5c44:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5c48:	0205000d 	andeq	r0, r5, #13
    5c4c:	00002a14 	andeq	r2, r0, r4, lsl sl
    5c50:	0101fe03 	tsteq	r1, r3, lsl #28	; <UNPREDICTABLE>
    5c54:	09030205 	stmdbeq	r3, {r0, r2, r9}
    5c58:	03040101 	movweq	r0, #16641	; 0x4101
    5c5c:	1b032905 	blne	d0078 <__ccfg+0xb00d0>
    5c60:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5c64:	01062d05 	tsteq	r6, r5, lsl #26
    5c68:	0d050104 	stfeqs	f0, [r5, #-16]
    5c6c:	043c5703 	ldrteq	r5, [ip], #-1795	; 0xfffff8fd
    5c70:	032d0503 			; <UNDEFINED> instruction: 0x032d0503
    5c74:	01042e29 	tsteq	r4, r9, lsr #28
    5c78:	03060205 	movweq	r0, #25093	; 0x6205
    5c7c:	03042060 	movweq	r2, #16480	; 0x4060
    5c80:	1b032905 	blne	d009c <__ccfg+0xb00f4>
    5c84:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5c88:	01062d05 	tsteq	r6, r5, lsl #26
    5c8c:	02050104 	andeq	r0, r5, #4, 2
    5c90:	2e600306 	cdpcs	3, 6, cr0, cr0, cr6, {0}
    5c94:	07052f19 	smladeq	r5, r9, pc, r2	; <UNPREDICTABLE>
    5c98:	3c1c0501 	cfldr32cc	mvfx0, [ip], {1}
    5c9c:	01061e05 	tsteq	r6, r5, lsl #28
    5ca0:	062e0205 	strteq	r0, [lr], -r5, lsl #4
    5ca4:	06480531 			; <UNDEFINED> instruction: 0x06480531
    5ca8:	32020501 	andcc	r0, r2, #4194304	; 0x400000
    5cac:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    5cb0:	31240602 			; <UNDEFINED> instruction: 0x31240602
    5cb4:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5cb8:	017ee403 	cmneq	lr, r3, lsl #8
    5cbc:	01063505 	tsteq	r6, r5, lsl #10
    5cc0:	02050104 	andeq	r0, r5, #4, 2
    5cc4:	3c019f03 	stccc	15, cr9, [r1], {3}
    5cc8:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5ccc:	207ee103 	rsbscs	lr, lr, r3, lsl #2
    5cd0:	02050104 	andeq	r0, r5, #4, 2
    5cd4:	019f0306 	orrseq	r0, pc, r6, lsl #6
    5cd8:	04043220 	streq	r3, [r4], #-544	; 0xfffffde0
    5cdc:	10030405 	andne	r0, r3, r5, lsl #8
    5ce0:	01730301 	cmneq	r3, r1, lsl #6
    5ce4:	6b030105 	blvs	c6100 <__ccfg+0xa6158>
    5ce8:	03040501 	movweq	r0, #17665	; 0x4501
    5cec:	61030116 	tstvs	r3, r6, lsl r1
    5cf0:	1d031501 	cfstr32ne	mvfx1, [r3, #-4]
    5cf4:	016d0366 	cmneq	sp, r6, ror #6
    5cf8:	12051513 	andne	r1, r5, #79691776	; 0x4c00000
    5cfc:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    5d00:	f1030405 			; <UNDEFINED> instruction: 0xf1030405
    5d04:	04042e01 	streq	r2, [r4], #-3585	; 0xfffff1ff
    5d08:	8f031205 	svchi	0x00031205
    5d0c:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    5d10:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    5d14:	053d1306 	ldreq	r1, [sp, #-774]!	; 0xfffffcfa
    5d18:	052f3d13 	streq	r3, [pc, #-3347]!	; 500d <port_confs+0x4d>
    5d1c:	11052f12 	tstne	r5, r2, lsl pc
    5d20:	0312053e 	tsteq	r2, #260046848	; 0xf800000
    5d24:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    5d28:	13132f06 	tstne	r3, #6, 30
    5d2c:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    5d30:	04010611 	streq	r0, [r1], #-1553	; 0xfffff9ef
    5d34:	031c0505 	tsteq	ip, #20971520	; 0x1400000
    5d38:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
    5d3c:	04051f14 	streq	r1, [r5], #-3860	; 0xfffff0ec
    5d40:	07052506 	streq	r2, [r5, -r6, lsl #10]
    5d44:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5d48:	07051b18 	smladeq	r5, r8, fp, r1
    5d4c:	0a052f06 	beq	15196c <__ccfg+0x1319c4>
    5d50:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5d54:	0a052f06 	beq	151974 <__ccfg+0x1319cc>
    5d58:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5d5c:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    5d60:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5d64:	2f2f210d 	svccs	0x002f210d
    5d68:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    5d6c:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
    5d70:	78030607 	stmdavc	r3, {r0, r1, r2, r9, sl}
    5d74:	1313133c 	tstne	r3, #60, 6	; 0xf0000000
    5d78:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5d7c:	2e060d05 	cdpcs	13, 0, cr0, cr6, cr5, {0}
    5d80:	21060c05 	tstcs	r6, r5, lsl #24
    5d84:	01060405 	tsteq	r6, r5, lsl #8
    5d88:	13132206 	tstne	r3, #1610612736	; 0x60000000
    5d8c:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    5d90:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    5d94:	03090501 	movweq	r0, #38145	; 0x9501
    5d98:	04207e95 	strteq	r7, [r0], #-3733	; 0xfffff16b
    5d9c:	030a0505 	movweq	r0, #42245	; 0xa505
    5da0:	052001eb 	streq	r0, [r0, #-491]!	; 0xfffffe15
    5da4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5da8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5dac:	052f0604 	streq	r0, [pc, #-1540]!	; 57b0 <patchGenfskRfe+0x658>
    5db0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5db4:	052f0604 	streq	r0, [pc, #-1540]!	; 57b8 <patchGenfskRfe+0x660>
    5db8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5dbc:	052f0604 	streq	r0, [pc, #-1540]!	; 57c0 <patchGenfskRfe+0x668>
    5dc0:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    5dc4:	06090501 	streq	r0, [r9], -r1, lsl #10
    5dc8:	2e7e9103 	expcse	f1, f3
    5dcc:	05360205 	ldreq	r0, [r6, #-517]!	; 0xfffffdfb
    5dd0:	02053f09 	andeq	r3, r5, #9, 30	; 0x24
    5dd4:	3e3c1203 	cdpcc	2, 3, cr1, cr12, cr3, {0}
    5dd8:	5a3d435c 	bpl	f56b50 <__ccfg+0xf36ba8>
    5ddc:	1b250613 	blne	947630 <__ccfg+0x927688>
    5de0:	30056906 	andcc	r6, r5, r6, lsl #18
    5de4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5de8:	2d053d06 	stccs	13, cr3, [r5, #-24]	; 0xffffffe8
    5dec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5df0:	2d052f06 	stccs	15, cr2, [r5, #-24]	; 0xffffffe8
    5df4:	02051f06 	andeq	r1, r5, #6, 30
    5df8:	28010521 	stmdacs	r1, {r0, r5, r8, sl}
    5dfc:	78030205 	stmdavc	r3, {r0, r2, r9}
    5e00:	0033022e 	eorseq	r0, r3, lr, lsr #4
    5e04:	1e050101 	adfnes	f0, f5, f1
    5e08:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    5e0c:	0300002b 	movweq	r0, #43	; 0x2b
    5e10:	050103b4 	streq	r0, [r1, #-948]	; 0xfffffc4c
    5e14:	03131402 	tsteq	r3, #33554432	; 0x2000000
    5e18:	02040109 	andeq	r0, r4, #1073741826	; 0x40000002
    5e1c:	ee030305 	cdp	3, 0, cr0, cr3, cr5, {0}
    5e20:	0104017d 	tsteq	r4, sp, ror r1
    5e24:	03061e05 	movweq	r1, #28165	; 0x6e05
    5e28:	04010286 	streq	r0, [r1], #-646	; 0xfffffd7a
    5e2c:	03300502 	teqeq	r0, #8388608	; 0x800000
    5e30:	052e7dfa 	streq	r7, [lr, #-3578]!	; 0xfffff206
    5e34:	03057b32 	movweq	r7, #23346	; 0x5b32
    5e38:	05052906 	streq	r2, [r5, #-2310]	; 0xfffff6fa
    5e3c:	06320517 			; <UNDEFINED> instruction: 0x06320517
    5e40:	06090501 	streq	r0, [r9], -r1, lsl #10
    5e44:	060a0521 	streq	r0, [sl], -r1, lsr #10
    5e48:	20030501 	andcs	r0, r3, r1, lsl #10
    5e4c:	01043306 	tsteq	r4, r6, lsl #6
    5e50:	03060a05 	movweq	r0, #27141	; 0x6a05
    5e54:	0401028b 	streq	r0, [r1], #-651	; 0xfffffd75
    5e58:	03300502 	teqeq	r0, #8388608	; 0x800000
    5e5c:	04207df5 	strteq	r7, [r0], #-3573	; 0xfffff20b
    5e60:	03050501 	movweq	r0, #21761	; 0x5501
    5e64:	0420029e 	strteq	r0, [r0], #-670	; 0xfffffd62
    5e68:	03300502 	teqeq	r0, #8388608	; 0x800000
    5e6c:	04207de2 	strteq	r7, [r0], #-3554	; 0xfffff21e
    5e70:	032d0501 			; <UNDEFINED> instruction: 0x032d0501
    5e74:	04200291 	strteq	r0, [r0], #-657	; 0xfffffd6f
    5e78:	03300502 	teqeq	r0, #8388608	; 0x800000
    5e7c:	042e7def 	strteq	r7, [lr], #-3567	; 0xfffff211
    5e80:	06020501 	streq	r0, [r2], -r1, lsl #10
    5e84:	58028b03 	stmdapl	r2, {r0, r1, r8, r9, fp, pc}
    5e88:	01062705 	tsteq	r6, r5, lsl #14
    5e8c:	0f030505 	svceq	0x00030505
    5e90:	030a0520 	movweq	r0, #42272	; 0xa520
    5e94:	06052e71 			; <UNDEFINED> instruction: 0x06052e71
    5e98:	03052f06 	movweq	r2, #24326	; 0x5f06
    5e9c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    5ea0:	06040501 	streq	r0, [r4], -r1, lsl #10
    5ea4:	1301013d 	movwne	r0, #4413	; 0x113d
    5ea8:	14061905 	strne	r1, [r6], #-2309	; 0xfffff6fb
    5eac:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
    5eb0:	0705201d 	smladeq	r5, sp, r0, r2
    5eb4:	1e060520 	cfsh32ne	mvfx0, mvfx6, #16
    5eb8:	30060405 	andcc	r0, r6, r5, lsl #8
    5ebc:	01060705 	tsteq	r6, r5, lsl #14
    5ec0:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    5ec4:	05054a37 	streq	r4, [r5, #-2615]	; 0xfffff5c9
    5ec8:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    5ecc:	08051606 	stmdaeq	r5, {r1, r2, r9, sl, ip}
    5ed0:	0605052a 	streq	r0, [r5], -sl, lsr #10
    5ed4:	061f0524 	ldreq	r0, [pc], -r4, lsr #10
    5ed8:	20130501 	andscs	r0, r3, r1, lsl #10
    5edc:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    5ee0:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
    5ee4:	0f052106 	svceq	0x00052106
    5ee8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5eec:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
    5ef0:	060f056e 	streq	r0, [pc], -lr, ror #10
    5ef4:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    5ef8:	052e6a03 	streq	r6, [lr, #-2563]!	; 0xfffff5fd
    5efc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5f00:	1b051106 	blne	14a320 <__ccfg+0x12a378>
    5f04:	0605052f 	streq	r0, [r5], -pc, lsr #10
    5f08:	053c1203 	ldreq	r1, [ip, #-515]!	; 0xfffffdfd
    5f0c:	4a0a0302 	bmi	286b1c <__ccfg+0x266b74>
    5f10:	01060505 	tsteq	r6, r5, lsl #10
    5f14:	21060305 	tstcs	r6, r5, lsl #6
    5f18:	01140101 	tsteq	r4, r1, lsl #2
    5f1c:	06010501 	streq	r0, [r1], -r1, lsl #10
    5f20:	2b030531 	blcs	c73ec <__ccfg+0xa7444>
    5f24:	02690105 	rsbeq	r0, r9, #1073741825	; 0x40000001
    5f28:	01010013 	tsteq	r1, r3, lsl r0
    5f2c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5f30:	002c6402 	eoreq	r6, ip, r2, lsl #8
    5f34:	048c0300 	streq	r0, [ip], #768	; 0x300
    5f38:	2e060101 	adfcss	f0, f6, f1
    5f3c:	03060305 	movweq	r0, #25349	; 0x6305
    5f40:	0705820a 	streq	r8, [r5, -sl, lsl #4]
    5f44:	06050106 	streq	r0, [r5], -r6, lsl #2
    5f48:	06040520 	streq	r0, [r4], -r0, lsr #10
    5f4c:	0305304c 	movweq	r3, #20556	; 0x504c
    5f50:	060e054f 	streq	r0, [lr], -pc, asr #10
    5f54:	20060501 	andcs	r0, r6, r1, lsl #10
    5f58:	4b060405 	blmi	186f74 <__ccfg+0x166fcc>
    5f5c:	01060705 	tsteq	r6, r5, lsl #14
    5f60:	21060505 	tstcs	r6, r5, lsl #10
    5f64:	05360305 	ldreq	r0, [r6, #-773]!	; 0xfffffcfb
    5f68:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5f6c:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    5f70:	24053d06 	strcs	r3, [r5], #-3334	; 0xfffff2fa
    5f74:	1b050106 	blne	146394 <__ccfg+0x1263ec>
    5f78:	20070558 	andcs	r0, r7, r8, asr r5
    5f7c:	33060505 	movwcc	r0, #25861	; 0x6505
    5f80:	0c051306 	stceq	3, cr1, [r5], {6}
    5f84:	2105051f 	tstcs	r5, pc, lsl r5
    5f88:	051f0c05 	ldreq	r0, [pc, #-3077]	; 538b <patchGenfskRfe+0x233>
    5f8c:	0c052105 	stfeqs	f2, [r5], {5}
    5f90:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    5f94:	20060121 	andcs	r0, r6, r1, lsr #2
    5f98:	052e062e 	streq	r0, [lr, #-1582]!	; 0xfffff9d2
    5f9c:	4a72030a 	bmi	1c86bcc <__ccfg+0x1c66c24>
    5fa0:	01060d05 	tsteq	r6, r5, lsl #26
    5fa4:	30060405 	andcc	r0, r6, r5, lsl #8
    5fa8:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    5fac:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    5fb0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5fb4:	01880306 	orreq	r0, r8, r6, lsl #6
    5fb8:	0627052e 	strteq	r0, [r7], -lr, lsr #10
    5fbc:	200a0501 	andcs	r0, sl, r1, lsl #10
    5fc0:	2f060605 	svccs	0x00060605
    5fc4:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5fc8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5fcc:	052d0613 	streq	r0, [sp, #-1555]!	; 0xfffff9ed
    5fd0:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    5fd4:	05200606 	streq	r0, [r0, #-1542]!	; 0xfffff9fa
    5fd8:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    5fdc:	13050106 	movwne	r0, #20742	; 0x5106
    5fe0:	06051f06 	streq	r1, [r5], -r6, lsl #30
    5fe4:	16020501 	strne	r0, [r2], -r1, lsl #10
    5fe8:	74470330 	strbvc	r0, [r7], #-816	; 0xfffffcd0
    5fec:	04050101 	streq	r0, [r5], #-257	; 0xfffffeff
    5ff0:	0101cd03 	tsteq	r1, r3, lsl #26
    5ff4:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    5ff8:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    5ffc:	01060505 	tsteq	r6, r5, lsl #10
    6000:	01aa0306 			; <UNDEFINED> instruction: 0x01aa0306
    6004:	0101154a 	tsteq	r1, sl, asr #10
    6008:	06080514 			; <UNDEFINED> instruction: 0x06080514
    600c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    6010:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    6014:	05220606 	streq	r0, [r2, #-1542]!	; 0xfffff9fa
    6018:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    601c:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    6020:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    6024:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    6028:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    602c:	4b300604 	blmi	c07844 <__ccfg+0xbe789c>
    6030:	01060f05 	tsteq	r6, r5, lsl #30
    6034:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    6038:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    603c:	0b053504 	bleq	153454 <__ccfg+0x1334ac>
    6040:	060e052a 	streq	r0, [lr], -sl, lsr #10
    6044:	06050501 	streq	r0, [r5], -r1, lsl #10
    6048:	6b030530 	blvs	c7510 <__ccfg+0xa7568>
    604c:	01060705 	tsteq	r6, r5, lsl #14
    6050:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    6054:	59330604 	ldmdbpl	r3!, {r2, r9, sl}
    6058:	0607054b 	streq	r0, [r7], -fp, asr #10
    605c:	06030501 	streq	r0, [r3], -r1, lsl #10
    6060:	054a1003 	strbeq	r1, [sl, #-3]
    6064:	7d9e0302 	ldcvc	3, cr0, [lr, #8]
    6068:	06050501 	streq	r0, [r5], -r1, lsl #10
    606c:	06020501 	streq	r0, [r2], -r1, lsl #10
    6070:	5800d603 	stmdapl	r0, {r0, r1, r9, sl, ip, lr, pc}
    6074:	03050101 	movweq	r0, #20737	; 0x5101
    6078:	01028d03 	tsteq	r2, r3, lsl #26
    607c:	052e1e03 	streq	r1, [lr, #-3587]!	; 0xfffff1fd
    6080:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    6084:	19052131 	stmdbne	r5, {r0, r4, r5, r8, sp}
    6088:	0603052d 	streq	r0, [r3], -sp, lsr #10
    608c:	06310521 	ldrteq	r0, [r1], -r1, lsr #10
    6090:	22030501 	andcs	r0, r3, #4194304	; 0x400000
    6094:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    6098:	32220603 	eorcc	r0, r2, #3145728	; 0x300000
    609c:	01060705 	tsteq	r6, r5, lsl #14
    60a0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    60a4:	055b0603 	ldrbeq	r0, [fp, #-1539]	; 0xfffff9fd
    60a8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    60ac:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    60b0:	03053106 	movweq	r3, #20742	; 0x5106
    60b4:	06130541 	ldreq	r0, [r3], -r1, asr #10
    60b8:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    60bc:	4b060405 	blmi	1870d8 <__ccfg+0x167130>
    60c0:	01060705 	tsteq	r6, r5, lsl #14
    60c4:	41060505 	tstmi	r6, r5, lsl #10
    60c8:	01061b05 	tsteq	r6, r5, lsl #22
    60cc:	2f060505 	svccs	0x00060505
    60d0:	01063305 	tsteq	r6, r5, lsl #6
    60d4:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    60d8:	3f04052f 	svccc	0x0004052f
    60dc:	01060b05 	tsteq	r6, r5, lsl #22
    60e0:	03060405 	movweq	r0, #25605	; 0x6405
    60e4:	01013c09 	tsteq	r1, r9, lsl #24
    60e8:	03060305 	movweq	r0, #25349	; 0x6305
    60ec:	065800c3 	ldrbeq	r0, [r8], -r3, asr #1
    60f0:	206d0342 	rsbcs	r0, sp, r2, asr #6
    60f4:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
    60f8:	03030501 	movweq	r0, #13569	; 0x3501
    60fc:	0a052e0c 	beq	151934 <__ccfg+0x13198c>
    6100:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    6104:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    6108:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    610c:	01220603 			; <UNDEFINED> instruction: 0x01220603
    6110:	0b031501 	bleq	cb51c <__ccfg+0xab574>
    6114:	06070520 	streq	r0, [r7], -r0, lsr #10
    6118:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    611c:	05581f05 	ldrbeq	r1, [r8, #-3845]	; 0xfffff0fb
    6120:	3e053d07 	cdpcc	13, 0, cr3, cr5, cr7, {0}
    6124:	06040549 	streq	r0, [r4], -r9, asr #10
    6128:	3f01053e 	svccc	0x0001053e
    612c:	00200201 	eoreq	r0, r0, r1, lsl #4
    6130:	1f050101 	svcne	0x00050101
    6134:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    6138:	0300002e 	movweq	r0, #46	; 0x2e
    613c:	050103eb 	streq	r0, [r1, #-1003]	; 0xfffffc15
    6140:	1f051702 	svcne	0x00051702
    6144:	06050d06 	streq	r0, [r5], -r6, lsl #26
    6148:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    614c:	23060305 	movwcs	r0, #25349	; 0x6305
    6150:	30050204 	andcc	r0, r5, r4, lsl #4
    6154:	7eb00306 	cdpvc	3, 11, cr0, cr0, cr6, {0}
    6158:	06030566 	streq	r0, [r3], -r6, ror #10
    615c:	1705051b 	smladne	r5, fp, r5, r0
    6160:	01063005 	tsteq	r6, r5
    6164:	21060a05 	tstcs	r6, r5, lsl #20
    6168:	01060b05 	tsteq	r6, r5, lsl #22
    616c:	04200305 	strteq	r0, [r0], #-773	; 0xfffffcfb
    6170:	06020501 	streq	r0, [r2], -r1, lsl #10
    6174:	2e01d603 	cfmadd32cs	mvax0, mvfx13, mvfx1, mvfx3
    6178:	03050204 	movweq	r0, #20996	; 0x5204
    617c:	017e8103 	cmneq	lr, r3, lsl #2
    6180:	01063205 	tsteq	r6, r5, lsl #4
    6184:	02050104 	andeq	r0, r5, #4, 2
    6188:	20028203 	andcs	r8, r2, r3, lsl #4
    618c:	32050204 	andcc	r0, r5, #4, 4	; 0x40000000
    6190:	207dfe03 	rsbscs	pc, sp, r3, lsl #28
    6194:	02050104 	andeq	r0, r5, #4, 2
    6198:	2e028203 	cdpcs	2, 0, cr8, cr2, cr3, {0}
    619c:	582e8206 	stmdapl	lr!, {r1, r2, r9, pc}
    61a0:	0114014a 	tsteq	r4, sl, asr #2
    61a4:	06010558 			; <UNDEFINED> instruction: 0x06010558
    61a8:	000d0213 	andeq	r0, sp, r3, lsl r2
    61ac:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    61b0:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    61b4:	0300002e 	movweq	r0, #46	; 0x2e
    61b8:	050107d6 	streq	r0, [r1, #-2006]	; 0xfffff82a
    61bc:	01090302 	tsteq	r9, r2, lsl #6
    61c0:	03062505 	movweq	r2, #25861	; 0x6505
    61c4:	0d050177 	stfeqs	f0, [r5, #-476]	; 0xfffffe24
    61c8:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    61cc:	20770325 	rsbscs	r0, r7, r5, lsr #6
    61d0:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
    61d4:	06030520 	streq	r0, [r3], -r0, lsr #10
    61d8:	05360630 	ldreq	r0, [r6, #-1584]!	; 0xfffff9d0
    61dc:	7a030602 	bvc	c79ec <__ccfg+0xa7a44>
    61e0:	0605052e 	streq	r0, [r5], -lr, lsr #10
    61e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    61e8:	060e0524 	streq	r0, [lr], -r4, lsr #10
    61ec:	20050501 	andcs	r0, r5, r1, lsl #10
    61f0:	30060305 	andcc	r0, r6, r5, lsl #6
    61f4:	37060705 	strcc	r0, [r6, -r5, lsl #14]
    61f8:	28060205 	stmdacs	r6, {r0, r2, r9}
    61fc:	03060405 	movweq	r0, #25605	; 0x6405
    6200:	05017ea1 	streq	r7, [r1, #-3745]	; 0xfffff15f
    6204:	01df0309 	bicseq	r0, pc, r9, lsl #6
    6208:	030e0520 	movweq	r0, #58656	; 0xe520
    620c:	052e7eac 	streq	r7, [lr, #-3756]!	; 0xfffff154
    6210:	0b052813 	bleq	150264 <__ccfg+0x1302bc>
    6214:	2e01cc03 	cdpcs	12, 0, cr12, cr1, cr3, {0}
    6218:	23060205 	movwcs	r0, #25093	; 0x6205
    621c:	017e9b03 	cmneq	lr, r3, lsl #22
    6220:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    6224:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    6228:	03051306 	movweq	r1, #21254	; 0x5306
    622c:	06055d06 	streq	r5, [r5], -r6, lsl #26
    6230:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6234:	03052f06 	movweq	r2, #24326	; 0x5f06
    6238:	060e055a 			; <UNDEFINED> instruction: 0x060e055a
    623c:	06030501 	streq	r0, [r3], -r1, lsl #10
    6240:	06060530 			; <UNDEFINED> instruction: 0x06060530
    6244:	06040501 	streq	r0, [r4], -r1, lsl #10
    6248:	06130530 			; <UNDEFINED> instruction: 0x06130530
    624c:	06030501 	streq	r0, [r3], -r1, lsl #10
    6250:	05131332 	ldreq	r1, [r3, #-818]	; 0xfffffcce
    6254:	05140606 	ldreq	r0, [r4, #-1542]	; 0xfffff9fa
    6258:	06051f17 			; <UNDEFINED> instruction: 0x06051f17
    625c:	1f170521 	svcne	0x00170521
    6260:	052b1305 	streq	r1, [fp, #-773]!	; 0xfffffcfb
    6264:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    6268:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    626c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6270:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6274:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    6278:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    627c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    6280:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    6284:	02053c09 	andeq	r3, r5, #2304	; 0x900
    6288:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    628c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6290:	15053106 	strne	r3, [r5, #-262]	; 0xfffffefa
    6294:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6298:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
    629c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    62a0:	030b0520 	movweq	r0, #46368	; 0xb520
    62a4:	052001c0 	streq	r0, [r0, #-448]!	; 0xfffffe40
    62a8:	7ec00315 	mcrvc	3, 6, r0, cr0, cr5, {0}
    62ac:	06020520 	streq	r0, [r2], -r0, lsr #10
    62b0:	06190523 	ldreq	r0, [r9], -r3, lsr #10
    62b4:	030b0501 	movweq	r0, #46337	; 0xb501
    62b8:	052001bd 	streq	r0, [r0, #-445]!	; 0xfffffe43
    62bc:	7ec30319 	mcrvc	3, 6, r0, cr3, cr9, {0}
    62c0:	06020520 	streq	r0, [r2], -r0, lsr #10
    62c4:	13151323 	tstne	r5, #-1946157056	; 0x8c000000
    62c8:	06250516 			; <UNDEFINED> instruction: 0x06250516
    62cc:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    62d0:	0c030602 	stceq	6, cr0, [r3], {2}
    62d4:	06090566 	streq	r0, [r9], -r6, ror #10
    62d8:	030b0501 	movweq	r0, #46337	; 0xb501
    62dc:	052001ae 	streq	r0, [r0, #-430]!	; 0xfffffe52
    62e0:	7ed20309 	cdpvc	3, 13, cr0, cr2, cr9, {0}
    62e4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    62e8:	2e01ab03 	vmlacs.f64	d10, d1, d3
    62ec:	01060905 	tsteq	r6, r5, lsl #18
    62f0:	31060205 	tstcc	r6, r5, lsl #4
    62f4:	01060b05 	tsteq	r6, r5, lsl #22
    62f8:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    62fc:	09052702 	stmdbeq	r5, {r1, r8, r9, sl, sp}
    6300:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    6304:	01220602 			; <UNDEFINED> instruction: 0x01220602
    6308:	01011301 	tsteq	r1, r1, lsl #6
    630c:	15010113 	strne	r0, [r1, #-275]	; 0xfffffeed
    6310:	0c053f4f 	stceq	15, cr3, [r5], {79}	; 0x4f
    6314:	0a050106 	beq	146734 <__ccfg+0x12678c>
    6318:	0602054a 	streq	r0, [r2], -sl, asr #10
    631c:	06050531 			; <UNDEFINED> instruction: 0x06050531
    6320:	06030501 	streq	r0, [r3], -r1, lsl #10
    6324:	60020521 	andvs	r0, r2, r1, lsr #10
    6328:	01062205 	tsteq	r6, r5, lsl #4
    632c:	a0034405 	andge	r4, r3, r5, lsl #8
    6330:	22053c7b 	andcs	r3, r5, #31488	; 0x7b00
    6334:	2004e003 	andcs	lr, r4, r3
    6338:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    633c:	017b9b03 	cmneq	fp, r3, lsl #22
    6340:	01063f05 	tsteq	r6, r5, lsl #30
    6344:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    6348:	01064405 	tsteq	r6, r5, lsl #8
    634c:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
    6350:	e7030602 	str	r0, [r3, -r2, lsl #12]
    6354:	32200804 	eorcc	r0, r0, #4, 16	; 0x40000
    6358:	01062805 	tsteq	r6, r5, lsl #16
    635c:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    6360:	02051d28 	andeq	r1, r5, #40, 26	; 0xa00
    6364:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    6368:	4e02052f 	cfsh32mi	mvfx0, mvfx2, #31
    636c:	01063005 	tsteq	r6, r5
    6370:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    6374:	01010027 	tsteq	r1, r7, lsr #32
    6378:	000002ab 	andeq	r0, r0, fp, lsr #5
    637c:	014f0003 	cmpeq	pc, r3
    6380:	01020000 	mrseq	r0, (UNDEF: 2)
    6384:	000d0efb 	strdeq	r0, [sp], -fp
    6388:	01010101 	tsteq	r1, r1, lsl #2
    638c:	01000000 	mrseq	r0, (UNDEF: 0)
    6390:	2f010000 	svccs	0x00010000
    6394:	2f727375 	svccs	0x00727375
    6398:	2f62696c 	svccs	0x0062696c
    639c:	2f636367 	svccs	0x00636367
    63a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    63a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    63a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    63ac:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    63b0:	2f312e32 	svccs	0x00312e32
    63b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    63b8:	00656475 	rsbeq	r6, r5, r5, ror r4
    63bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6308 <__exidx_end+0x82c>
    63c0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    63c4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    63c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    63cc:	6f746b73 	svcvs	0x00746b73
    63d0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    63d4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    63d8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    63dc:	2f534f43 	svccs	0x00534f43
    63e0:	4f636950 	svcmi	0x00636950
    63e4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    63e8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    63ec:	6f682f00 	svcvs	0x00682f00
    63f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    63f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    63f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 6400 <__exidx_end+0x924>
    63fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6400:	4f2f706f 	svcmi	0x002f706f
    6404:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6408:	502f5445 	eorpl	r5, pc, r5, asr #8
    640c:	534f4349 	movtpl	r4, #62281	; 0xf349
    6410:	6369502f 	cmnvs	r9, #47	; 0x2f
    6414:	2f00534f 	svccs	0x0000534f
    6418:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    641c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6420:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6424:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6428:	706f746b 	rsbvc	r7, pc, fp, ror #8
    642c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6430:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6434:	4349502f 	movtmi	r5, #36911	; 0x902f
    6438:	502f534f 	eorpl	r5, pc, pc, asr #6
    643c:	534f6369 	movtpl	r6, #62313	; 0xf369
    6440:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6444:	562f7362 	strtpl	r7, [pc], -r2, ror #6
    6448:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
    644c:	6c700000 	ldclvs	0, cr0, [r0], #-0
    6450:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
    6454:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
    6458:	00006363 	andeq	r6, r0, r3, ror #6
    645c:	74730000 	ldrbtvc	r0, [r3], #-0
    6460:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6464:	0100682e 	tsteq	r0, lr, lsr #16
    6468:	74730000 	ldrbtvc	r0, [r3], #-0
    646c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    6470:	0100682e 	tsteq	r0, lr, lsr #16
    6474:	72610000 	rsbvc	r0, r1, #0
    6478:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    647c:	00000200 	andeq	r0, r0, r0, lsl #4
    6480:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6484:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6488:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    648c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6490:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6494:	00000200 	andeq	r0, r0, r0, lsl #4
    6498:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    649c:	5f736e6f 	svcpl	0x00736e6f
    64a0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    64a4:	00020068 	andeq	r0, r2, r8, rrx
    64a8:	73797300 	cmnvc	r9, #0, 6
    64ac:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    64b0:	00000300 	andeq	r0, r0, r0, lsl #6
    64b4:	5f766374 	svcpl	0x00766374
    64b8:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    64bc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    64c0:	623c0000 	eorsvs	r0, ip, #0
    64c4:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    64c8:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    64cc:	00000000 	andeq	r0, r0, r0
    64d0:	002b0500 	eoreq	r0, fp, r0, lsl #10
    64d4:	30380205 	eorscc	r0, r8, r5, lsl #4
    64d8:	36030000 	strcc	r0, [r3], -r0
    64dc:	16020501 	strne	r0, [r2], -r1, lsl #10
    64e0:	0e062b05 	vmlaeq.f64	d2, d6, d5
    64e4:	05241005 	streq	r1, [r4, #-5]!
    64e8:	10051c2b 	andne	r1, r5, fp, lsr #24
    64ec:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
    64f0:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    64f4:	053f0602 	ldreq	r0, [pc, #-1538]!	; 5efa <__exidx_end+0x41e>
    64f8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    64fc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6500:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6504:	04022101 	streq	r2, [r2], #-257	; 0xfffffeff
    6508:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    650c:	0205001f 	andeq	r0, r5, #31
    6510:	0000305c 	andeq	r3, r0, ip, asr r0
    6514:	0100c203 	tsteq	r0, r3, lsl #4
    6518:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    651c:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    6520:	10051e1f 	andne	r1, r5, pc, lsl lr
    6524:	20050522 	andcs	r0, r5, r2, lsr #10
    6528:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
    652c:	1e052d2a 	cdpne	13, 0, cr2, cr5, cr10, {1}
    6530:	2015052e 	andscs	r0, r5, lr, lsr #10
    6534:	31060205 	tstcc	r6, r5, lsl #4
    6538:	01061e05 	tsteq	r6, r5, lsl #28
    653c:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
    6540:	0f051e1e 	svceq	0x00051e1e
    6544:	06020520 	streq	r0, [r2], -r0, lsr #10
    6548:	06010522 	streq	r0, [r1], -r2, lsr #10
    654c:	00030213 	andeq	r0, r3, r3, lsl r2
    6550:	37050101 	strcc	r0, [r5, -r1, lsl #2]
    6554:	80020500 	andhi	r0, r2, r0, lsl #10
    6558:	03000030 	movweq	r0, #48	; 0x30
    655c:	050100cc 	streq	r0, [r1, #-204]	; 0xffffff34
    6560:	25051402 	strcs	r1, [r5, #-1026]	; 0xfffffbfe
    6564:	16050106 	strne	r0, [r5], -r6, lsl #2
    6568:	2101052e 	tstcs	r1, lr, lsr #10
    656c:	01000102 	tsteq	r0, r2, lsl #2
    6570:	00250501 	eoreq	r0, r5, r1, lsl #10
    6574:	30880205 	addcc	r0, r8, r5, lsl #4
    6578:	d1030000 	mrsle	r0, (UNDEF: 3)
    657c:	02050100 	andeq	r0, r5, #0, 2
    6580:	06010514 			; <UNDEFINED> instruction: 0x06010514
    6584:	00020214 	andeq	r0, r2, r4, lsl r2
    6588:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    658c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    6590:	03000030 	movweq	r0, #48	; 0x30
    6594:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    6598:	01051402 	tsteq	r5, r2, lsl #8
    659c:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    65a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    65a4:	02050039 	andeq	r0, r5, #57	; 0x39
    65a8:	00003090 	muleq	r0, r0, r0
    65ac:	05012003 	streq	r2, [r1, #-3]
    65b0:	05260610 	streq	r0, [r6, #-1552]!	; 0xfffff9f0
    65b4:	207a0339 	rsbscs	r0, sl, r9, lsr r3
    65b8:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    65bc:	06050514 			; <UNDEFINED> instruction: 0x06050514
    65c0:	03390501 	teqeq	r9, #4194304	; 0x400000
    65c4:	0505207a 	streq	r2, [r5, #-122]	; 0xffffff86
    65c8:	06030526 	streq	r0, [r3], -r6, lsr #10
    65cc:	06200521 	strteq	r0, [r0], -r1, lsr #10
    65d0:	3c0d0501 	cfstr32cc	mvfx0, [sp], {1}
    65d4:	21060305 	tstcs	r6, r5, lsl #6
    65d8:	01060605 	tsteq	r6, r5, lsl #12
    65dc:	22060f05 	andcs	r0, r6, #5, 30
    65e0:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
    65e4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    65e8:	05490616 	strbeq	r0, [r9, #-1558]	; 0xfffff9ea
    65ec:	0405010f 	streq	r0, [r5], #-271	; 0xfffffef1
    65f0:	06120513 			; <UNDEFINED> instruction: 0x06120513
    65f4:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    65f8:	010f051f 	tsteq	pc, pc, lsl r5	; <UNPREDICTABLE>
    65fc:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    6600:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    6604:	02052005 	andeq	r2, r5, #5
    6608:	12053f06 	andne	r3, r5, #6, 30
    660c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6610:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    6614:	0a050106 	beq	146a34 <__ccfg+0x126a8c>
    6618:	3201051d 	andcc	r0, r1, #121634816	; 0x7400000
    661c:	03060405 	movweq	r0, #25605	; 0x6405
    6620:	09022075 	stmdbeq	r2, {r0, r2, r4, r5, r6, sp}
    6624:	a4010100 	strge	r0, [r1], #-256	; 0xffffff00
    6628:	03000001 	movweq	r0, #1
    662c:	00012900 	andeq	r2, r1, r0, lsl #18
    6630:	fb010200 	blx	46e3a <__ccfg+0x26e92>
    6634:	01000d0e 	tsteq	r0, lr, lsl #26
    6638:	00010101 	andeq	r0, r1, r1, lsl #2
    663c:	00010000 	andeq	r0, r1, r0
    6640:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    6644:	2f656d6f 	svccs	0x00656d6f
    6648:	70657473 	rsbvc	r7, r5, r3, ror r4
    664c:	2f6e6568 	svccs	0x006e6568
    6650:	6b736544 	blvs	1cdfb68 <__ccfg+0x1cbfbc0>
    6654:	2f706f74 	svccs	0x00706f74
    6658:	4f534c4f 	svcmi	0x00534c4f
    665c:	2f54454e 	svccs	0x0054454e
    6660:	4f434950 	svcmi	0x00434950
    6664:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6668:	2f534f63 	svccs	0x00534f63
    666c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    6670:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    6674:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    6678:	73752f00 	cmnvc	r5, #0, 30
    667c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6680:	63672f62 	cmnvs	r7, #392	; 0x188
    6684:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6688:	6f6e2d6d 	svcvs	0x006e2d6d
    668c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6690:	2f696261 	svccs	0x00696261
    6694:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    6698:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    669c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    66a0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    66a4:	2f656d6f 	svccs	0x00656d6f
    66a8:	70657473 	rsbvc	r7, r5, r3, ror r4
    66ac:	2f6e6568 	svccs	0x006e6568
    66b0:	6b736544 	blvs	1cdfbc8 <__ccfg+0x1cbfc20>
    66b4:	2f706f74 	svccs	0x00706f74
    66b8:	4f534c4f 	svcmi	0x00534c4f
    66bc:	2f54454e 	svccs	0x0054454e
    66c0:	4f434950 	svcmi	0x00434950
    66c4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    66c8:	2f534f63 	svccs	0x00534f63
    66cc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    66d0:	2f005858 	svccs	0x00005858
    66d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    66d8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    66dc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    66e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    66e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    66e8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    66ec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    66f0:	4349502f 	movtmi	r5, #36911	; 0x902f
    66f4:	502f534f 	eorpl	r5, pc, pc, asr #6
    66f8:	534f6369 	movtpl	r6, #62313	; 0xf369
    66fc:	5f5f0000 	svcpl	0x005f0000
    6700:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    6704:	61697265 	cmnvs	r9, r5, ror #4
    6708:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    670c:	73000001 	movwvc	r0, #1
    6710:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6714:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6718:	61000002 	tstvs	r0, r2
    671c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6720:	00030068 	andeq	r0, r3, r8, rrx
    6724:	63616d00 	cmnvs	r1, #0, 26
    6728:	00682e68 	rsbeq	r2, r8, r8, ror #28
    672c:	70000003 	andvc	r0, r0, r3
    6730:	5f736e69 	svcpl	0x00736e69
    6734:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6738:	00030068 	andeq	r0, r3, r8, rrx
    673c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6740:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6744:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6748:	0300682e 	movweq	r6, #2094	; 0x82e
    674c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6750:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6754:	00040068 	andeq	r0, r4, r8, rrx
    6758:	01050000 	mrseq	r0, (UNDEF: 5)
    675c:	d8020500 	stmdale	r2, {r8, sl}
    6760:	03000030 	movweq	r0, #48	; 0x30
    6764:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    6768:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    676c:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    6770:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    6774:	01151313 	tsteq	r5, r3, lsl r3
    6778:	06051301 	streq	r1, [r5], -r1, lsl #6
    677c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6780:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    6784:	03050106 	movweq	r0, #20742	; 0x5106
    6788:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    678c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    6790:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    6794:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    6798:	01060a05 	tsteq	r6, r5, lsl #20
    679c:	83060205 	movwhi	r0, #25093	; 0x6205
    67a0:	01060605 	tsteq	r6, r5, lsl #12
    67a4:	1f211f21 	svcne	0x00211f21
    67a8:	21060205 	tstcs	r6, r5, lsl #4
    67ac:	01060605 	tsteq	r6, r5, lsl #12
    67b0:	21060205 	tstcs	r6, r5, lsl #4
    67b4:	01060505 	tsteq	r6, r5, lsl #10
    67b8:	30060305 	andcc	r0, r6, r5, lsl #6
    67bc:	4a74033d 	bmi	1d074b8 <__ccfg+0x1ce7510>
    67c0:	01060d05 	tsteq	r6, r5, lsl #26
    67c4:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    67c8:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    67cc:	4e010100 	adfmis	f0, f1, f0
    67d0:	03000002 	movweq	r0, #2
    67d4:	00012800 	andeq	r2, r1, r0, lsl #16
    67d8:	fb010200 	blx	46fe2 <__ccfg+0x2703a>
    67dc:	01000d0e 	tsteq	r0, lr, lsl #26
    67e0:	00010101 	andeq	r0, r1, r1, lsl #2
    67e4:	00010000 	andeq	r0, r1, r0
    67e8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    67ec:	2f656d6f 	svccs	0x00656d6f
    67f0:	70657473 	rsbvc	r7, r5, r3, ror r4
    67f4:	2f6e6568 	svccs	0x006e6568
    67f8:	6b736544 	blvs	1cdfd10 <__ccfg+0x1cbfd68>
    67fc:	2f706f74 	svccs	0x00706f74
    6800:	4f534c4f 	svcmi	0x00534c4f
    6804:	2f54454e 	svccs	0x0054454e
    6808:	4f434950 	svcmi	0x00434950
    680c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6810:	2f534f63 	svccs	0x00534f63
    6814:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    6818:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    681c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    6820:	73752f00 	cmnvc	r5, #0, 30
    6824:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6828:	63672f62 	cmnvs	r7, #392	; 0x188
    682c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6830:	6f6e2d6d 	svcvs	0x006e2d6d
    6834:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6838:	2f696261 	svccs	0x00696261
    683c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    6840:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6844:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6848:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    684c:	2f656d6f 	svccs	0x00656d6f
    6850:	70657473 	rsbvc	r7, r5, r3, ror r4
    6854:	2f6e6568 	svccs	0x006e6568
    6858:	6b736544 	blvs	1cdfd70 <__ccfg+0x1cbfdc8>
    685c:	2f706f74 	svccs	0x00706f74
    6860:	4f534c4f 	svcmi	0x00534c4f
    6864:	2f54454e 	svccs	0x0054454e
    6868:	4f434950 	svcmi	0x00434950
    686c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6870:	2f534f63 	svccs	0x00534f63
    6874:	33314343 	teqcc	r1, #201326593	; 0xc000001
    6878:	2f005858 	svccs	0x00005858
    687c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6880:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6884:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6888:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    688c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6890:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6894:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6898:	4349502f 	movtmi	r5, #36911	; 0x902f
    689c:	502f534f 	eorpl	r5, pc, pc, asr #6
    68a0:	534f6369 	movtpl	r6, #62313	; 0xf369
    68a4:	5f5f0000 	svcpl	0x005f0000
    68a8:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    68ac:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    68b0:	0100632e 	tsteq	r0, lr, lsr #6
    68b4:	74730000 	ldrbtvc	r0, [r3], #-0
    68b8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    68bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    68c0:	72610000 	rsbvc	r0, r1, #0
    68c4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    68c8:	00000300 	andeq	r0, r0, r0, lsl #6
    68cc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    68d0:	0300682e 	movweq	r6, #2094	; 0x82e
    68d4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    68d8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    68dc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    68e0:	00000300 	andeq	r0, r0, r0, lsl #6
    68e4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    68e8:	5f736e6f 	svcpl	0x00736e6f
    68ec:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    68f0:	00030068 	andeq	r0, r3, r8, rrx
    68f4:	73797300 	cmnvc	r9, #0, 6
    68f8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    68fc:	00000400 	andeq	r0, r0, r0, lsl #8
    6900:	00010500 	andeq	r0, r1, r0, lsl #10
    6904:	31480205 	cmpcc	r8, r5, lsl #4
    6908:	22030000 	andcs	r0, r3, #0
    690c:	20060101 	andcs	r0, r6, r1, lsl #2
    6910:	02053c06 	andeq	r3, r5, #1536	; 0x600
    6914:	1613136b 	ldrne	r1, [r3], -fp, ror #6
    6918:	01061005 	tsteq	r6, r5
    691c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6920:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6924:	1d053f02 	stcne	15, cr3, [r5, #-8]
    6928:	0b050106 	bleq	146d48 <__ccfg+0x126da0>
    692c:	201d053c 	andscs	r0, sp, ip, lsr r5
    6930:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    6934:	03052005 	movweq	r2, #20485	; 0x5005
    6938:	052f2406 	streq	r2, [pc, #-1030]!	; 653a <__exidx_end+0xa5e>
    693c:	06053002 	streq	r3, [r5], -r2
    6940:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    6944:	052f061f 	streq	r0, [pc, #-1567]!	; 632d <__exidx_end+0x851>
    6948:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    694c:	01300602 	teqeq	r0, r2, lsl #12
    6950:	05831601 	streq	r1, [r3, #1537]	; 0x601
    6954:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6958:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    695c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6960:	052f0604 	streq	r0, [pc, #-1540]!	; 6364 <__exidx_end+0x888>
    6964:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6968:	07052104 	streq	r2, [r5, -r4, lsl #2]
    696c:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
    6970:	31030521 	tstcc	r3, r1, lsr #10
    6974:	01060705 	tsteq	r6, r5, lsl #14
    6978:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    697c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6980:	06053e02 	streq	r3, [r5], -r2, lsl #28
    6984:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6988:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    698c:	2f060305 	svccs	0x00060305
    6990:	01060805 	tsteq	r6, r5, lsl #16
    6994:	2f060305 	svccs	0x00060305
    6998:	01060d05 	tsteq	r6, r5, lsl #26
    699c:	2f060305 	svccs	0x00060305
    69a0:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    69a4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    69a8:	03052e05 	movweq	r2, #24069	; 0x5e05
    69ac:	06052106 	streq	r2, [r5], -r6, lsl #2
    69b0:	1f210106 	svcne	0x00210106
    69b4:	2f060305 	svccs	0x00060305
    69b8:	01060605 	tsteq	r6, r5, lsl #12
    69bc:	23060205 	movwcs	r0, #25093	; 0x6205
    69c0:	06059140 	streq	r9, [r5], -r0, asr #2
    69c4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    69c8:	0c053d06 	stceq	13, cr3, [r5], {6}
    69cc:	11050106 	tstne	r5, r6, lsl #2
    69d0:	2107053c 	tstcs	r7, ip, lsr r5
    69d4:	4b060205 	blmi	1871f0 <__ccfg+0x167248>
    69d8:	01060505 	tsteq	r6, r5, lsl #10
    69dc:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    69e0:	01060a05 	tsteq	r6, r5, lsl #20
    69e4:	059f0605 	ldreq	r0, [pc, #1541]	; 6ff1 <__exidx_end+0x1515>
    69e8:	02051f0a 	andeq	r1, r5, #10, 30	; 0x28
    69ec:	06052106 	streq	r2, [r5], -r6, lsl #2
    69f0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    69f4:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    69f8:	03050106 	movweq	r0, #20742	; 0x5106
    69fc:	0d052106 	stfeqs	f2, [r5, #-24]	; 0xffffffe8
    6a00:	03050106 	movweq	r0, #20742	; 0x5106
    6a04:	02052f06 	andeq	r2, r5, #6, 30
    6a08:	06060530 			; <UNDEFINED> instruction: 0x06060530
    6a0c:	06020501 	streq	r0, [r2], -r1, lsl #10
    6a10:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    6a14:	3a020522 	bcc	87ea4 <__ccfg+0x67efc>
    6a18:	30060105 	andcc	r0, r6, r5, lsl #2
    6a1c:	01000d02 	tsteq	r0, r2, lsl #26
    6a20:	0003c001 	andeq	ip, r3, r1
    6a24:	3d000300 	stccc	3, cr0, [r0, #-0]
    6a28:	02000001 	andeq	r0, r0, #1
    6a2c:	0d0efb01 	vstreq	d15, [lr, #-4]
    6a30:	01010100 	mrseq	r0, (UNDEF: 17)
    6a34:	00000001 	andeq	r0, r0, r1
    6a38:	01000001 	tsteq	r0, r1
    6a3c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6988 <__exidx_end+0xeac>
    6a40:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6a44:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6a48:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6a4c:	6f746b73 	svcvs	0x00746b73
    6a50:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6a54:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6a58:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6a5c:	2f534f43 	svccs	0x00534f43
    6a60:	4f636950 	svcmi	0x00636950
    6a64:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6a68:	2f736269 	svccs	0x00736269
    6a6c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    6a70:	2f006c61 	svccs	0x00006c61
    6a74:	2f727375 	svccs	0x00727375
    6a78:	2f62696c 	svccs	0x0062696c
    6a7c:	2f636367 	svccs	0x00636367
    6a80:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6a84:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6a88:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6a8c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    6a90:	2f312e32 	svccs	0x00312e32
    6a94:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6a98:	00656475 	rsbeq	r6, r5, r5, ror r4
    6a9c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 69e8 <__exidx_end+0xf0c>
    6aa0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6aa4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6aa8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6aac:	6f746b73 	svcvs	0x00746b73
    6ab0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6ab4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6ab8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6abc:	2f534f43 	svccs	0x00534f43
    6ac0:	4f636950 	svcmi	0x00636950
    6ac4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6ac8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6acc:	6f682f00 	svcvs	0x00682f00
    6ad0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6ad4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6ad8:	442f6e65 	strtmi	r6, [pc], #-3685	; 6ae0 <__exidx_end+0x1004>
    6adc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6ae0:	4f2f706f 	svcmi	0x002f706f
    6ae4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6ae8:	502f5445 	eorpl	r5, pc, r5, asr #8
    6aec:	534f4349 	movtpl	r4, #62281	; 0xf349
    6af0:	6369502f 	cmnvs	r9, #47	; 0x2f
    6af4:	0000534f 	andeq	r5, r0, pc, asr #6
    6af8:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    6afc:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    6b00:	73000001 	movwvc	r0, #1
    6b04:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6b08:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6b0c:	73000002 	movwvc	r0, #2
    6b10:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6b14:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6b18:	61000002 	tstvs	r0, r2
    6b1c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6b20:	00030068 	andeq	r0, r3, r8, rrx
    6b24:	63616d00 	cmnvs	r1, #0, 26
    6b28:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6b2c:	70000003 	andvc	r0, r0, r3
    6b30:	5f736e69 	svcpl	0x00736e69
    6b34:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6b38:	00030068 	andeq	r0, r3, r8, rrx
    6b3c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6b40:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6b44:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6b48:	0300682e 	movweq	r6, #2094	; 0x82e
    6b4c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6b50:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6b54:	00040068 	andeq	r0, r4, r8, rrx
    6b58:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    6b5c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    6b60:	003e6e69 	eorseq	r6, lr, r9, ror #28
    6b64:	00000000 	andeq	r0, r0, r0
    6b68:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
    6b6c:	00326402 	eorseq	r6, r2, r2, lsl #8
    6b70:	010c0300 	mrseq	r0, LR_mon
    6b74:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    6b78:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6b7c:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
    6b80:	0e053e06 	cdpeq	14, 0, cr3, cr5, cr6, {0}
    6b84:	03050106 	movweq	r0, #20742	; 0x5106
    6b88:	04053006 	streq	r3, [r5], #-6
    6b8c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6b90:	00010259 	andeq	r0, r1, r9, asr r2
    6b94:	43050101 	movwmi	r0, #20737	; 0x5101
    6b98:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    6b9c:	19000032 	stmdbne	r0, {r1, r4, r5}
    6ba0:	06052e06 	streq	r2, [r5], -r6, lsl #28
    6ba4:	03040520 	movweq	r0, #17696	; 0x4520
    6ba8:	05052e1d 	streq	r2, [r5, #-3613]	; 0xfffff1e3
    6bac:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    6bb0:	20710307 	rsbscs	r0, r1, r7, lsl #6
    6bb4:	4a030605 	bmi	c83d0 <__ccfg+0xa8428>
    6bb8:	06020520 	streq	r0, [r2], -r0, lsr #10
    6bbc:	0514133e 	ldreq	r1, [r4, #-830]	; 0xfffffcc2
    6bc0:	02051803 	andeq	r1, r5, #196608	; 0x30000
    6bc4:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    6bc8:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6bcc:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    6bd0:	05051403 	streq	r1, [r5, #-1027]	; 0xfffffbfd
    6bd4:	03050106 	movweq	r0, #20742	; 0x5106
    6bd8:	06053006 	streq	r3, [r5], -r6
    6bdc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6be0:	0b053e06 	bleq	156400 <__ccfg+0x136458>
    6be4:	10050106 	andne	r0, r5, r6, lsl #2
    6be8:	2105052e 	tstcs	r5, lr, lsr #10
    6bec:	052d0705 	streq	r0, [sp, #-1797]!	; 0xfffff8fb
    6bf0:	3d3d0605 	ldccc	6, cr0, [sp, #-20]!	; 0xffffffec
    6bf4:	da030405 	ble	c7c10 <__ccfg+0xa7c68>
    6bf8:	05590100 	ldrbeq	r0, [r9, #-256]	; 0xffffff00
    6bfc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6c00:	a7030604 	strge	r0, [r3, -r4, lsl #12]
    6c04:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    6c08:	00c20306 	sbceq	r0, r2, r6, lsl #6
    6c0c:	052f0620 	streq	r0, [pc, #-1568]!	; 65f4 <__exidx_end+0xb18>
    6c10:	05100612 	ldreq	r0, [r0, #-1554]	; 0xfffff9ee
    6c14:	43030603 	movwmi	r0, #13827	; 0x3603
    6c18:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6c1c:	06040501 	streq	r0, [r4], -r1, lsl #10
    6c20:	0606054c 	streq	r0, [r6], -ip, asr #10
    6c24:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    6c28:	21060405 	tstcs	r6, r5, lsl #8
    6c2c:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    6c30:	5959e400 	ldmdbpl	r9, {sl, sp, lr, pc}^
    6c34:	01060805 	tsteq	r6, r5, lsl #16
    6c38:	03060505 	movweq	r0, #25861	; 0x6505
    6c3c:	0c053c09 	stceq	12, cr3, [r5], {9}
    6c40:	01050106 	tsteq	r5, r6, lsl #2
    6c44:	03040531 	movweq	r0, #17713	; 0x4531
    6c48:	053c7fa9 	ldreq	r7, [ip, #-4009]!	; 0xfffff057
    6c4c:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    6c50:	0505010f 	streq	r0, [r5, #-271]	; 0xfffffef1
    6c54:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
    6c58:	2d120513 	cfldr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    6c5c:	2f060505 	svccs	0x00060505
    6c60:	14060e05 	strne	r0, [r6], #-3589	; 0xfffff1fb
    6c64:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    6c68:	13060e05 	movwne	r0, #28165	; 0x6e05
    6c6c:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    6c70:	5a062d06 	bpl	192090 <__ccfg+0x1720e8>
    6c74:	01060905 	tsteq	r6, r5, lsl #18
    6c78:	39061405 	stmdbcc	r6, {r0, r2, sl, ip}
    6c7c:	01061605 	tsteq	r6, r5, lsl #12
    6c80:	2e061205 	cdpcs	2, 0, cr1, cr6, cr5, {0}
    6c84:	13060605 	movwne	r0, #26117	; 0x6605
    6c88:	03060505 	movweq	r0, #25861	; 0x6505
    6c8c:	05132009 	ldreq	r2, [r3, #-9]
    6c90:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6c94:	09052f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, sp}
    6c98:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6c9c:	0608052f 	streq	r0, [r8], -pc, lsr #10
    6ca0:	20120501 	andscs	r0, r2, r1, lsl #10
    6ca4:	30060605 	andcc	r0, r6, r5, lsl #12
    6ca8:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    6cac:	06050501 	streq	r0, [r5], -r1, lsl #10
    6cb0:	060c054c 	streq	r0, [ip], -ip, asr #10
    6cb4:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    6cb8:	20110305 	andscs	r0, r1, r5, lsl #6
    6cbc:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6cc0:	4a063c06 	bmi	195ce0 <__ccfg+0x175d38>
    6cc4:	20827401 	addcs	r7, r2, r1, lsl #8
    6cc8:	2e204a20 	vmulcs.f32	s8, s0, s1
    6ccc:	06070525 	streq	r0, [r7], -r5, lsr #10
    6cd0:	06050501 	streq	r0, [r5], -r1, lsl #10
    6cd4:	06080521 	streq	r0, [r8], -r1, lsr #10
    6cd8:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    6cdc:	30060605 	andcc	r0, r6, r5, lsl #12
    6ce0:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6ce4:	1f0a0514 	svcne	0x000a0514
    6ce8:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6cec:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6cf0:	01060905 	tsteq	r6, r5, lsl #18
    6cf4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    6cf8:	593f0607 	ldmdbpl	pc!, {r0, r1, r2, r9, sl}	; <UNPREDICTABLE>
    6cfc:	01060b05 	tsteq	r6, r5, lsl #22
    6d00:	30060605 	andcc	r0, r6, r5, lsl #12
    6d04:	03060505 	movweq	r0, #25861	; 0x6505
    6d08:	0605016f 	streq	r0, [r5], -pc, ror #2
    6d0c:	06201103 	strteq	r1, [r0], -r3, lsl #2
    6d10:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    6d14:	014a063c 	cmpeq	sl, ip, lsr r6
    6d18:	2e016666 	cfmadd32cs	mvax3, mvfx6, mvfx1, mvfx6
    6d1c:	052e2058 	streq	r2, [lr, #-88]!	; 0xffffffa8
    6d20:	0f05210c 	svceq	0x0005210c
    6d24:	06050106 	streq	r0, [r5], -r6, lsl #2
    6d28:	13132f06 	tstne	r3, #6, 30
    6d2c:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    6d30:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    6d34:	06052d08 	streq	r2, [r5], -r8, lsl #26
    6d38:	07052106 	streq	r2, [r5, -r6, lsl #2]
    6d3c:	060f0514 			; <UNDEFINED> instruction: 0x060f0514
    6d40:	2e150513 	mrccs	5, 0, r0, cr5, cr3, {0}
    6d44:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    6d48:	060a055a 			; <UNDEFINED> instruction: 0x060a055a
    6d4c:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    6d50:	06170547 	ldreq	r0, [r7], -r7, asr #10
    6d54:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    6d58:	0607052e 	streq	r0, [r7], -lr, lsr #10
    6d5c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    6d60:	05055926 	streq	r5, [r5, #-2342]	; 0xfffff6da
    6d64:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6d68:	05110609 	ldreq	r0, [r1, #-1545]	; 0xfffff9f7
    6d6c:	4f062f05 	svcmi	0x00062f05
    6d70:	0b051313 	bleq	14b9c4 <__ccfg+0x12ba1c>
    6d74:	060c054a 	streq	r0, [ip], -sl, asr #10
    6d78:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    6d7c:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
    6d80:	060a054b 	streq	r0, [sl], -fp, asr #10
    6d84:	207fad03 	rsbscs	sl, pc, r3, lsl #26
    6d88:	01000702 	tsteq	r0, r2, lsl #14
    6d8c:	00350501 	eorseq	r0, r5, r1, lsl #10
    6d90:	34b40205 	ldrtcc	r0, [r4], #517	; 0x205
    6d94:	90030000 	andls	r0, r3, r0
    6d98:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    6d9c:	35051414 	strcc	r1, [r5, #-1044]	; 0xfffffbec
    6da0:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
    6da4:	03053205 	movweq	r3, #20997	; 0x5205
    6da8:	05673006 	strbeq	r3, [r7, #-6]!
    6dac:	12030601 	andne	r0, r3, #1048576	; 0x100000
    6db0:	06020501 	streq	r0, [r2], -r1, lsl #10
    6db4:	053c7203 	ldreq	r7, [ip, #-515]!	; 0xfffffdfd
    6db8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6dbc:	02053c06 	andeq	r3, r5, #1536	; 0x600
    6dc0:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    6dc4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6dc8:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    6dcc:	060b0540 	streq	r0, [fp], -r0, asr #10
    6dd0:	58050501 	stmdapl	r5, {r0, r8, sl}
    6dd4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    6dd8:	03052005 	movweq	r2, #20485	; 0x5005
    6ddc:	133d2206 	teqne	sp, #1610612736	; 0x60000000
    6de0:	01000202 	tsteq	r0, r2, lsl #4
    6de4:	0002c901 	andeq	ip, r2, r1, lsl #18
    6de8:	3d000300 	stccc	3, cr0, [r0, #-0]
    6dec:	02000001 	andeq	r0, r0, #1
    6df0:	0d0efb01 	vstreq	d15, [lr, #-4]
    6df4:	01010100 	mrseq	r0, (UNDEF: 17)
    6df8:	00000001 	andeq	r0, r0, r1
    6dfc:	01000001 	tsteq	r0, r1
    6e00:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6d4c <__exidx_end+0x1270>
    6e04:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6e08:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6e0c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6e10:	6f746b73 	svcvs	0x00746b73
    6e14:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6e18:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6e1c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6e20:	2f534f43 	svccs	0x00534f43
    6e24:	4f636950 	svcmi	0x00636950
    6e28:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6e2c:	2f736269 	svccs	0x00736269
    6e30:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    6e34:	2f006c61 	svccs	0x00006c61
    6e38:	2f727375 	svccs	0x00727375
    6e3c:	2f62696c 	svccs	0x0062696c
    6e40:	2f636367 	svccs	0x00636367
    6e44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6e48:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6e4c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6e50:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    6e54:	2f312e32 	svccs	0x00312e32
    6e58:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6e5c:	00656475 	rsbeq	r6, r5, r5, ror r4
    6e60:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6dac <__exidx_end+0x12d0>
    6e64:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6e68:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6e6c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6e70:	6f746b73 	svcvs	0x00746b73
    6e74:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6e78:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6e7c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6e80:	2f534f43 	svccs	0x00534f43
    6e84:	4f636950 	svcmi	0x00636950
    6e88:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6e8c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6e90:	6f682f00 	svcvs	0x00682f00
    6e94:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6e98:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6e9c:	442f6e65 	strtmi	r6, [pc], #-3685	; 6ea4 <__exidx_end+0x13c8>
    6ea0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6ea4:	4f2f706f 	svcmi	0x002f706f
    6ea8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6eac:	502f5445 	eorpl	r5, pc, r5, asr #8
    6eb0:	534f4349 	movtpl	r4, #62281	; 0xf349
    6eb4:	6369502f 	cmnvs	r9, #47	; 0x2f
    6eb8:	0000534f 	andeq	r5, r0, pc, asr #6
    6ebc:	61637376 	smcvs	14134	; 0x3736
    6ec0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    6ec4:	73000001 	movwvc	r0, #1
    6ec8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6ecc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6ed0:	73000002 	movwvc	r0, #2
    6ed4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6ed8:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6edc:	61000002 	tstvs	r0, r2
    6ee0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6ee4:	00030068 	andeq	r0, r3, r8, rrx
    6ee8:	63616d00 	cmnvs	r1, #0, 26
    6eec:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6ef0:	70000003 	andvc	r0, r0, r3
    6ef4:	5f736e69 	svcpl	0x00736e69
    6ef8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6efc:	00030068 	andeq	r0, r3, r8, rrx
    6f00:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6f04:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6f08:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6f0c:	0300682e 	movweq	r6, #2094	; 0x82e
    6f10:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6f14:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6f18:	00040068 	andeq	r0, r4, r8, rrx
    6f1c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    6f20:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    6f24:	003e6e69 	eorseq	r6, lr, r9, ror #28
    6f28:	00000000 	andeq	r0, r0, r0
    6f2c:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    6f30:	00350402 	eorseq	r0, r5, r2, lsl #8
    6f34:	02051900 	andeq	r1, r5, #0, 18
    6f38:	013a0314 	teqeq	sl, r4, lsl r3
    6f3c:	01060505 	tsteq	r6, r5, lsl #10
    6f40:	44033a05 	strmi	r3, [r3], #-2565	; 0xfffff5fb
    6f44:	03050520 	movweq	r0, #21792	; 0x5520
    6f48:	12052e3c 	andne	r2, r5, #60, 28	; 0x3c0
    6f4c:	4005053c 	andmi	r0, r5, ip, lsr r5
    6f50:	0e031605 	cfmadd32eq	mvax0, mvfx1, mvfx3, mvfx5
    6f54:	030b0520 	movweq	r0, #46368	; 0xb520
    6f58:	08052e11 	stmdaeq	r5, {r0, r4, r9, sl, fp, sp}
    6f5c:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    6f60:	01060905 	tsteq	r6, r5, lsl #18
    6f64:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    6f68:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6f6c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6f70:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6f74:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6f78:	0305200f 	movweq	r2, #20495	; 0x500f
    6f7c:	03010520 	movweq	r0, #5408	; 0x1520
    6f80:	0305ac2e 	movweq	sl, #23598	; 0x5c2e
    6f84:	053c5203 	ldreq	r5, [ip, #-515]!	; 0xfffffdfd
    6f88:	741b030b 	ldrvc	r0, [fp], #-779	; 0xfffffcf5
    6f8c:	2e060a05 	vmlacs.f32	s0, s12, s10
    6f90:	01060b05 	tsteq	r6, r5, lsl #22
    6f94:	ad060405 	cfstrsge	mvf0, [r6, #-20]	; 0xffffffec
    6f98:	01060705 	tsteq	r6, r5, lsl #14
    6f9c:	30060405 	andcc	r0, r6, r5, lsl #8
    6fa0:	15060705 	strne	r0, [r6, #-1797]	; 0xfffff8fb
    6fa4:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    6fa8:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    6fac:	05142f06 	ldreq	r2, [r4, #-3846]	; 0xfffff0fa
    6fb0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6fb4:	052f060b 	streq	r0, [pc, #-1547]!	; 69b1 <__exidx_end+0xed5>
    6fb8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    6fbc:	1c05660c 	stcne	6, cr6, [r5], {12}
    6fc0:	2e2b052e 	cfsh64cs	mvdx0, mvdx11, #30
    6fc4:	054e0b05 	strbeq	r0, [lr, #-2821]	; 0xfffff4fb
    6fc8:	053c060a 	ldreq	r0, [ip, #-1546]!	; 0xfffff9f6
    6fcc:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6fd0:	05830604 	streq	r0, [r3, #1540]	; 0x604
    6fd4:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    6fd8:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    6fdc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6fe0:	052f0604 	streq	r0, [pc, #-1540]!	; 69e4 <__exidx_end+0xf08>
    6fe4:	20590311 	subscs	r0, r9, r1, lsl r3
    6fe8:	2e66063c 	mcrcs	6, 3, r0, cr6, cr12, {1}
    6fec:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    6ff0:	3c66063c 	stclcc	6, cr0, [r6], #-240	; 0xffffff10
    6ff4:	01062001 	tsteq	r6, r1
    6ff8:	3c743c06 	ldclcc	12, cr3, [r4], #-24	; 0xffffffe8
    6ffc:	3c064a06 			; <UNDEFINED> instruction: 0x3c064a06
    7000:	902e2174 	eorls	r2, lr, r4, ror r1
    7004:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    7008:	822e0601 	eorhi	r0, lr, #1048576	; 0x100000
    700c:	064a2190 			; <UNDEFINED> instruction: 0x064a2190
    7010:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    7014:	06012e01 	streq	r2, [r1], -r1, lsl #28
    7018:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    701c:	3c066682 	stccc	6, cr6, [r6], {130}	; 0x82
    7020:	053c3c3c 	ldreq	r3, [ip, #-3132]!	; 0xfffff3c4
    7024:	0c057704 	stceq	7, cr7, [r5], {4}
    7028:	10050106 	andne	r0, r5, r6, lsl #2
    702c:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    7030:	2e6606ae 	cdpcs	6, 6, cr0, cr6, cr14, {5}
    7034:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    7038:	3c3c063c 	ldccc	6, cr0, [ip], #-240	; 0xffffff10
    703c:	01062e01 	tsteq	r6, r1, lsl #28
    7040:	3c823c06 	stccc	12, cr3, [r2], {6}
    7044:	06900692 			; <UNDEFINED> instruction: 0x06900692
    7048:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    704c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    7050:	6674063c 			; <UNDEFINED> instruction: 0x6674063c
    7054:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    7058:	3c06723c 	sfmcc	f7, 4, [r6], {60}	; 0x3c
    705c:	21742e06 	cmncs	r4, r6, lsl #28
    7060:	013c903c 	teqeq	ip, ip, lsr r0
    7064:	0601062e 	streq	r0, [r1], -lr, lsr #12
    7068:	2174902e 	cmncs	r4, lr, lsr #32
    706c:	144f0405 	strbne	r0, [pc], #-1029	; 7074 <__exidx_end+0x1598>
    7070:	01060b05 	tsteq	r6, r5, lsl #22
    7074:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    7078:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    707c:	05130608 	ldreq	r0, [r3, #-1544]	; 0xfffff9f8
    7080:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    7084:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    7088:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    708c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    7090:	0524060b 	streq	r0, [r4, #-1547]!	; 0xfffff9f5
    7094:	09030607 	stmdbeq	r3, {r0, r1, r2, r9, sl}
    7098:	060e0574 			; <UNDEFINED> instruction: 0x060e0574
    709c:	3e0b0501 	cfsh32cc	mvfx0, mvfx11, #1
    70a0:	54030a05 	strpl	r0, [r3], #-2565	; 0xfffff5fb
    70a4:	03110566 	tsteq	r1, #427819008	; 0x19800000
    70a8:	16054a0a 	strne	r4, [r5], -sl, lsl #20
    70ac:	00050251 	andeq	r0, r5, r1, asr r2
    70b0:	028e0101 	addeq	r0, lr, #1073741824	; 0x40000000
    70b4:	00030000 	andeq	r0, r3, r0
    70b8:	00000288 	andeq	r0, r0, r8, lsl #5
    70bc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    70c0:	0101000d 	tsteq	r1, sp
    70c4:	00000101 	andeq	r0, r0, r1, lsl #2
    70c8:	00000100 	andeq	r0, r0, r0, lsl #2
    70cc:	73752f01 	cmnvc	r5, #1, 30
    70d0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    70d4:	63672f62 	cmnvs	r7, #392	; 0x188
    70d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    70dc:	6f6e2d6d 	svcvs	0x006e2d6d
    70e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    70e4:	2f696261 	svccs	0x00696261
    70e8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    70ec:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    70f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    70f4:	752f0065 	strvc	r0, [pc, #-101]!	; 7097 <__exidx_end+0x15bb>
    70f8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    70fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7100:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    7104:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7108:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    710c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    7110:	2f656d6f 	svccs	0x00656d6f
    7114:	70657473 	rsbvc	r7, r5, r3, ror r4
    7118:	2f6e6568 	svccs	0x006e6568
    711c:	6b736544 	blvs	1ce0634 <__ccfg+0x1cc068c>
    7120:	2f706f74 	svccs	0x00706f74
    7124:	4f534c4f 	svcmi	0x00534c4f
    7128:	2f54454e 	svccs	0x0054454e
    712c:	4f434950 	svcmi	0x00434950
    7130:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    7134:	2f534f63 	svccs	0x00534f63
    7138:	33314343 	teqcc	r1, #201326593	; 0xc000001
    713c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    7140:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    7144:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    7148:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    714c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7150:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7154:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 70a0 <__exidx_end+0x15c4>
    7158:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    715c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7160:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    7164:	6f746b73 	svcvs	0x00746b73
    7168:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    716c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7170:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    7174:	2f534f43 	svccs	0x00534f43
    7178:	4f636950 	svcmi	0x00636950
    717c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    7180:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    7184:	3143432f 	cmpcc	r3, pc, lsr #6
    7188:	57585833 	smmlarpl	r8, r3, r8, r5
    718c:	2f455241 	svccs	0x00455241
    7190:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7194:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    7198:	2f007365 	svccs	0x00007365
    719c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    71a0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    71a4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    71a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    71ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    71b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    71b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    71b8:	4349502f 	movtmi	r5, #36911	; 0x902f
    71bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    71c0:	534f6369 	movtpl	r6, #62313	; 0xf369
    71c4:	3143432f 	cmpcc	r3, pc, lsr #6
    71c8:	00585833 	subseq	r5, r8, r3, lsr r8
    71cc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7118 <__exidx_end+0x163c>
    71d0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    71d4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    71d8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    71dc:	6f746b73 	svcvs	0x00746b73
    71e0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    71e4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    71e8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    71ec:	2f534f43 	svccs	0x00534f43
    71f0:	4f636950 	svcmi	0x00636950
    71f4:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    71f8:	2f656d6f 	svccs	0x00656d6f
    71fc:	70657473 	rsbvc	r7, r5, r3, ror r4
    7200:	2f6e6568 	svccs	0x006e6568
    7204:	6b736544 	blvs	1ce071c <__ccfg+0x1cc0774>
    7208:	2f706f74 	svccs	0x00706f74
    720c:	4f534c4f 	svcmi	0x00534c4f
    7210:	2f54454e 	svccs	0x0054454e
    7214:	4f434950 	svcmi	0x00434950
    7218:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    721c:	2f534f63 	svccs	0x00534f63
    7220:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    7224:	00006c65 	andeq	r6, r0, r5, ror #24
    7228:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    722c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7230:	00000100 	andeq	r0, r0, r0, lsl #2
    7234:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    7238:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    723c:	00000100 	andeq	r0, r0, r0, lsl #2
    7240:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7244:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7248:	00000200 	andeq	r0, r0, r0, lsl #4
    724c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    7250:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7254:	6c000002 	stcvs	0, cr0, [r0], {2}
    7258:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    725c:	00020068 	andeq	r0, r2, r8, rrx
    7260:	5f667200 	svcpl	0x00667200
    7264:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    7268:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    726c:	00030068 	andeq	r0, r3, r8, rrx
    7270:	5f667200 	svcpl	0x00667200
    7274:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    7278:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    727c:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7280:	00000300 	andeq	r0, r0, r0, lsl #6
    7284:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7288:	5f706f72 	svcpl	0x00706f72
    728c:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7290:	00030068 	andeq	r0, r3, r8, rrx
    7294:	5f667200 	svcpl	0x00667200
    7298:	63746170 	cmnvs	r4, #112, 2
    729c:	70635f68 	rsbvc	r5, r3, r8, ror #30
    72a0:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    72a4:	6b73666e 	blvs	1ce0c64 <__ccfg+0x1cc0cbc>
    72a8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    72ac:	66720000 	ldrbtvs	r0, [r2], -r0
    72b0:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    72b4:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    72b8:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    72bc:	73666e65 	cmnvc	r6, #1616	; 0x650
    72c0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    72c4:	61000004 	tstvs	r0, r4
    72c8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    72cc:	00050068 	andeq	r0, r5, r8, rrx
    72d0:	63616d00 	cmnvs	r1, #0, 26
    72d4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    72d8:	70000005 	andvc	r0, r0, r5
    72dc:	5f736e69 	svcpl	0x00736e69
    72e0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    72e4:	00050068 	andeq	r0, r5, r8, rrx
    72e8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    72ec:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    72f0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    72f4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    72f8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    72fc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    7300:	00060068 	andeq	r0, r6, r8, rrx
    7304:	72656b00 	rsbvc	r6, r5, #0, 22
    7308:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    730c:	00070068 	andeq	r0, r7, r8, rrx
    7310:	616d7300 	cmnvs	sp, r0, lsl #6
    7314:	66727472 			; <UNDEFINED> instruction: 0x66727472
    7318:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    731c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    7320:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7324:	73000005 	movwvc	r0, #5
    7328:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    732c:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    7330:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    7334:	5f73676e 	svcpl	0x0073676e
    7338:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    733c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    7340:	00000005 	andeq	r0, r0, r5
    7344:	0000019c 	muleq	r0, ip, r1
    7348:	015f0002 	cmpeq	pc, r2
    734c:	01020000 	mrseq	r0, (UNDEF: 2)
    7350:	000d0efb 	strdeq	r0, [sp], -fp
    7354:	01010101 	tsteq	r1, r1, lsl #2
    7358:	01000000 	mrseq	r0, (UNDEF: 0)
    735c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7360:	2f2e2e2f 	svccs	0x002e2e2f
    7364:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7368:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    736c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7370:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7374:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7378:	63635c69 	cmnvs	r3, #26880	; 0x6900
    737c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7380:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7384:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7388:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    738c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7390:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7394:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7398:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    739c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    73a0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7238 <__exidx_end+0x175c>
    73a4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    73a8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    73ac:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    73b0:	6f6e2d6d 	svcvs	0x006e2d6d
    73b4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    73b8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    73bc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    73c0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    73c4:	615c3371 	cmpvs	ip, r1, ror r3
    73c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    73cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    73d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    73d4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    73d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    73dc:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    73e0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    73e4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    73e8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    73ec:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    73f0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    73f4:	31303030 	teqcc	r0, r0, lsr r0
    73f8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    73fc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7400:	61746562 	cmnvs	r4, r2, ror #10
    7404:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7408:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    740c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7244 <__exidx_end+0x1768>
    7410:	6f635c73 	svcvs	0x00635c73
    7414:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7418:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    741c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7420:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7424:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7428:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    742c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7430:	3130322d 	teqcc	r0, sp, lsr #4
    7434:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7438:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    743c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7440:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7444:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7448:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    744c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7450:	2f2e0073 	svccs	0x002e0073
    7454:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7458:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    745c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7460:	64610000 	strbtvs	r0, [r1], #-0
    7464:	00632e69 	rsbeq	r2, r3, r9, ror #28
    7468:	5f000001 	svcpl	0x00000001
    746c:	61666564 	cmnvs	r6, r4, ror #10
    7470:	5f746c75 	svcpl	0x00746c75
    7474:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7478:	00682e73 	rsbeq	r2, r8, r3, ror lr
    747c:	5f000002 	svcpl	0x00000002
    7480:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7484:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7488:	00000300 	andeq	r0, r0, r0, lsl #6
    748c:	745f7768 	ldrbvc	r7, [pc], #-1896	; 7494 <__exidx_end+0x19b8>
    7490:	73657079 	cmnvc	r5, #121	; 0x79
    7494:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    7498:	6f720000 	svcvs	0x00720000
    749c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    74a0:	63000001 	movwvs	r0, #1
    74a4:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    74a8:	00000100 	andeq	r0, r0, r0, lsl #2
    74ac:	02050000 	andeq	r0, r5, #0
    74b0:	00003894 	muleq	r0, r4, r8
    74b4:	20013503 	andcs	r3, r1, r3, lsl #10
    74b8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    74bc:	214b3d01 	cmpcs	fp, r1, lsl #26
    74c0:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    74c4:	01010005 	tsteq	r1, r5
    74c8:	00020500 	andeq	r0, r2, r0, lsl #10
    74cc:	03000000 	movweq	r0, #0
    74d0:	200100c0 	andcs	r0, r1, r0, asr #1
    74d4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    74d8:	2f4b3d01 	svccs	0x004b3d01
    74dc:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    74e0:	01010005 	tsteq	r1, r5
    74e4:	00000167 	andeq	r0, r0, r7, ror #2
    74e8:	01470002 	cmpeq	r7, r2
    74ec:	01020000 	mrseq	r0, (UNDEF: 2)
    74f0:	000d0efb 	strdeq	r0, [sp], -fp
    74f4:	01010101 	tsteq	r1, r1, lsl #2
    74f8:	01000000 	mrseq	r0, (UNDEF: 0)
    74fc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7500:	2f2e2e2f 	svccs	0x002e2e2f
    7504:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7508:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    750c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7510:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7514:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7518:	63635c69 	cmnvs	r3, #26880	; 0x6900
    751c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7520:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7524:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7528:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    752c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7530:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7534:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7538:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    753c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7540:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 73d8 <__exidx_end+0x18fc>
    7544:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7548:	63675c72 	cmnvs	r7, #29184	; 0x7200
    754c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7550:	6f6e2d6d 	svcvs	0x006e2d6d
    7554:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7558:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    755c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7560:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7564:	615c3371 	cmpvs	ip, r1, ror r3
    7568:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    756c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7570:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7574:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7578:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    757c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7580:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7584:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7588:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    758c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7590:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7594:	31303030 	teqcc	r0, r0, lsr r0
    7598:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    759c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    75a0:	61746562 	cmnvs	r4, r2, ror #10
    75a4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    75a8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    75ac:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 73e4 <__exidx_end+0x1908>
    75b0:	6f635c73 	svcvs	0x00635c73
    75b4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    75b8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    75bc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    75c0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    75c4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    75c8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    75cc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    75d0:	3130322d 	teqcc	r0, sp, lsr #4
    75d4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    75d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    75dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    75e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    75e4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    75e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    75ec:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    75f0:	61000073 	tstvs	r0, r3, ror r0
    75f4:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    75f8:	6f6d7461 	svcvs	0x006d7461
    75fc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    7600:	5f000001 	svcpl	0x00000001
    7604:	61666564 	cmnvs	r6, r4, ror #10
    7608:	5f746c75 	svcpl	0x00746c75
    760c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7610:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7614:	5f000002 	svcpl	0x00000002
    7618:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    761c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7620:	00000300 	andeq	r0, r0, r0, lsl #6
    7624:	5f6e6f61 	svcpl	0x006e6f61
    7628:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    762c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    7630:	00000100 	andeq	r0, r0, r0, lsl #2
    7634:	02050000 	andeq	r0, r5, #0
    7638:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    763c:	1a013c03 	bne	56650 <__ccfg+0x366a8>
    7640:	77032f36 	smladxvc	r3, r6, pc, r2	; <UNPREDICTABLE>
    7644:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    7648:	09023d4c 	stmdbeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    764c:	a9010100 	stmdbge	r1, {r8}
    7650:	02000001 	andeq	r0, r0, #1
    7654:	00014100 	andeq	r4, r1, r0, lsl #2
    7658:	fb010200 	blx	47e62 <__ccfg+0x27eba>
    765c:	01000d0e 	tsteq	r0, lr, lsl #26
    7660:	00010101 	andeq	r0, r1, r1, lsl #2
    7664:	00010000 	andeq	r0, r1, r0
    7668:	2f2e0100 	svccs	0x002e0100
    766c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7670:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7674:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7678:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    767c:	63006269 	movwvs	r6, #617	; 0x269
    7680:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7684:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7688:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    768c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7690:	5f393130 	svcpl	0x00393130
    7694:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7698:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    769c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    76a0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    76a4:	6f745c36 	svcvs	0x00745c36
    76a8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    76ac:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    76b0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    76b4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    76b8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    76bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    76c0:	61652d65 	cmnvs	r5, r5, ror #26
    76c4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    76c8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    76cc:	71353130 	teqvc	r5, r0, lsr r1
    76d0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    76d4:	6f6e2d6d 	svcvs	0x006e2d6d
    76d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    76dc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    76e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    76e4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    76e8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    76ec:	00656e69 	rsbeq	r6, r5, r9, ror #28
    76f0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    76f4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    76f8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    76fc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7700:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7704:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7708:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    770c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7710:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7714:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7718:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    771c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 75b4 <__exidx_end+0x1ad8>
    7720:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7724:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7728:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    772c:	6f6e2d6d 	svcvs	0x006e2d6d
    7730:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7734:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7738:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    773c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7740:	615c3371 	cmpvs	ip, r1, ror r3
    7744:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7748:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    774c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7750:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7754:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7758:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    775c:	6f610000 	svcvs	0x00610000
    7760:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    7764:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7768:	5f000001 	svcpl	0x00000001
    776c:	61666564 	cmnvs	r6, r4, ror #10
    7770:	5f746c75 	svcpl	0x00746c75
    7774:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7778:	00682e73 	rsbeq	r2, r8, r3, ror lr
    777c:	5f000002 	svcpl	0x00000002
    7780:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7784:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7788:	00000300 	andeq	r0, r0, r0, lsl #6
    778c:	5f6e6f61 	svcpl	0x006e6f61
    7790:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    7794:	00010068 	andeq	r0, r1, r8, rrx
    7798:	05000000 	streq	r0, [r0, #-0]
    779c:	0038ec02 	eorseq	lr, r8, r2, lsl #24
    77a0:	013e0300 	teqeq	lr, r0, lsl #6
    77a4:	01040200 	mrseq	r0, R12_usr
    77a8:	00010a03 	andeq	r0, r1, r3, lsl #20
    77ac:	21010402 	tstcs	r1, r2, lsl #8
    77b0:	01040200 	mrseq	r0, R12_usr
    77b4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    77b8:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    77bc:	00210104 	eoreq	r0, r1, r4, lsl #2
    77c0:	21010402 	tstcs	r1, r2, lsl #8
    77c4:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    77c8:	00010100 	andeq	r0, r1, r0, lsl #2
    77cc:	390c0205 	stmdbcc	ip, {r0, r2, r9}
    77d0:	d7030000 	strle	r0, [r3, -r0]
    77d4:	02000100 	andeq	r0, r0, #0, 2
    77d8:	0c030104 	stfeqs	f0, [r3], {4}
    77dc:	04020001 	streq	r0, [r2], #-1
    77e0:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    77e4:	001f0104 	andseq	r0, pc, r4, lsl #2
    77e8:	21010402 	tstcs	r1, r2, lsl #8
    77ec:	01040200 	mrseq	r0, R12_usr
    77f0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    77f4:	02312101 	eorseq	r2, r1, #1073741824	; 0x40000000
    77f8:	01010005 	tsteq	r1, r5
    77fc:	0000019c 	muleq	r0, ip, r1
    7800:	01390002 	teqeq	r9, r2
    7804:	01020000 	mrseq	r0, (UNDEF: 2)
    7808:	000d0efb 	strdeq	r0, [sp], -fp
    780c:	01010101 	tsteq	r1, r1, lsl #2
    7810:	01000000 	mrseq	r0, (UNDEF: 0)
    7814:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7818:	2f2e2e2f 	svccs	0x002e2e2f
    781c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7820:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7824:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7828:	0062696c 	rsbeq	r6, r2, ip, ror #18
    782c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7830:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7834:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7838:	302e302e 	eorcc	r3, lr, lr, lsr #32
    783c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7840:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7844:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7848:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    784c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7850:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7854:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7858:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 76f0 <__exidx_end+0x1c14>
    785c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7860:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7864:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7868:	6f6e2d6d 	svcvs	0x006e2d6d
    786c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7870:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7874:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7878:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    787c:	615c3371 	cmpvs	ip, r1, ror r3
    7880:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7884:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7888:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    788c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7890:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7894:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7898:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    789c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    78a0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    78a4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    78a8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    78ac:	31303030 	teqcc	r0, r0, lsr r0
    78b0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    78b4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    78b8:	61746562 	cmnvs	r4, r2, ror #10
    78bc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    78c0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    78c4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 76fc <__exidx_end+0x1c20>
    78c8:	6f635c73 	svcvs	0x00635c73
    78cc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    78d0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    78d4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    78d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    78dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    78e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    78e4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    78e8:	3130322d 	teqcc	r0, sp, lsr #4
    78ec:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    78f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    78f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    78f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    78fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7900:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7904:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7908:	63000073 	movwvs	r0, #115	; 0x73
    790c:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
    7910:	00000100 	andeq	r0, r0, r0, lsl #2
    7914:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7918:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    791c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7920:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7924:	00000200 	andeq	r0, r0, r0, lsl #4
    7928:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    792c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7930:	00030068 	andeq	r0, r3, r8, rrx
    7934:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    7938:	0100682e 	tsteq	r0, lr, lsr #16
    793c:	00000000 	andeq	r0, r0, r0
    7940:	39240205 	stmdbcc	r4!, {r0, r2, r9}
    7944:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    7948:	12030100 	andne	r0, r3, #0, 2
    794c:	00040201 	andeq	r0, r4, r1, lsl #4
    7950:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7954:	00000002 	andeq	r0, r0, r2
    7958:	01c00300 	biceq	r0, r0, r0, lsl #6
    795c:	01110301 	tsteq	r1, r1, lsl #6
    7960:	01000302 	tsteq	r0, r2, lsl #6
    7964:	02050001 	andeq	r0, r5, #1
    7968:	0000392c 	andeq	r3, r0, ip, lsr #18
    796c:	01028d03 	tsteq	r2, r3, lsl #26
    7970:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    7974:	01010004 	tsteq	r1, r4
    7978:	00020500 	andeq	r0, r2, r0, lsl #10
    797c:	03000000 	movweq	r0, #0
    7980:	030102d8 	movweq	r0, #4824	; 0x12d8
    7984:	03020111 	movweq	r0, #8465	; 0x2111
    7988:	00010100 	andeq	r0, r1, r0, lsl #2
    798c:	00000205 	andeq	r0, r0, r5, lsl #4
    7990:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    7994:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    7998:	01010004 	tsteq	r1, r4
    799c:	000002d6 	ldrdeq	r0, [r0], -r6
    79a0:	017c0002 	cmneq	ip, r2
    79a4:	01020000 	mrseq	r0, (UNDEF: 2)
    79a8:	000d0efb 	strdeq	r0, [sp], -fp
    79ac:	01010101 	tsteq	r1, r1, lsl #2
    79b0:	01000000 	mrseq	r0, (UNDEF: 0)
    79b4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    79b8:	2f2e2e2f 	svccs	0x002e2e2f
    79bc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    79c0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    79c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    79c8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    79cc:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    79d0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    79d4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    79d8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    79dc:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    79e0:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    79e4:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    79e8:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    79ec:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    79f0:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    79f4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    79f8:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7890 <__exidx_end+0x1db4>
    79fc:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7a00:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7a04:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7a08:	6f6e2d6d 	svcvs	0x006e2d6d
    7a0c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7a10:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7a14:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7a18:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7a1c:	615c3371 	cmpvs	ip, r1, ror r3
    7a20:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7a24:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7a28:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7a2c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7a30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7a34:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7a38:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7a3c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7a40:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7a44:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7a48:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7a4c:	31303030 	teqcc	r0, r0, lsr r0
    7a50:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7a54:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7a58:	61746562 	cmnvs	r4, r2, ror #10
    7a5c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7a60:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7a64:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 789c <__exidx_end+0x1dc0>
    7a68:	6f635c73 	svcvs	0x00635c73
    7a6c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7a70:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7a74:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7a78:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7a7c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7a80:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7a84:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7a88:	3130322d 	teqcc	r0, sp, lsr #4
    7a8c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7a90:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7a94:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7a98:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7a9c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7aa0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7aa4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7aa8:	2f2e0073 	svccs	0x002e0073
    7aac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7ab0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7ab4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7ab8:	736f0000 	cmnvc	pc, #0
    7abc:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7ac0:	6f000001 	svcvs	0x00000001
    7ac4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    7ac8:	00000100 	andeq	r0, r0, r0, lsl #2
    7acc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7ad0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7ad4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7ad8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7adc:	00000200 	andeq	r0, r0, r0, lsl #4
    7ae0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7ae4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7ae8:	00030068 	andeq	r0, r3, r8, rrx
    7aec:	5f776800 	svcpl	0x00776800
    7af0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7af4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7af8:	72000004 	andvc	r0, r0, #4
    7afc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7b00:	00000100 	andeq	r0, r0, r0, lsl #2
    7b04:	5f6e6f61 	svcpl	0x006e6f61
    7b08:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    7b0c:	00010068 	andeq	r0, r1, r8, rrx
    7b10:	6e6f6100 	powvse	f6, f7, f0
    7b14:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    7b18:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    7b1c:	00010068 	andeq	r0, r1, r8, rrx
    7b20:	05000000 	streq	r0, [r0, #-0]
    7b24:	00393402 	eorseq	r3, r9, r2, lsl #8
    7b28:	00e50300 	rsceq	r0, r5, r0, lsl #6
    7b2c:	0f032001 	svceq	0x00032001
    7b30:	20710320 	rsbscs	r0, r1, r0, lsr #6
    7b34:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    7b38:	309e0903 	addscc	r0, lr, r3, lsl #18
    7b3c:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    7b40:	000702a3 	andeq	r0, r7, r3, lsr #5
    7b44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b48:	00399002 	eorseq	r9, r9, r2
    7b4c:	01a00300 	lsleq	r0, r0, #6
    7b50:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    7b54:	7a038822 	bvc	e9be4 <__ccfg+0xc9c3c>
    7b58:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    7b5c:	01010006 	tsteq	r1, r6
    7b60:	00020500 	andeq	r0, r2, r0, lsl #10
    7b64:	03000000 	movweq	r0, #0
    7b68:	200101c2 	andcs	r0, r1, r2, asr #3
    7b6c:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    7b70:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    7b74:	00262e7a 	eoreq	r2, r6, sl, ror lr
    7b78:	03010402 	movweq	r0, #5122	; 0x1402
    7b7c:	0200207a 	andeq	r2, r0, #122	; 0x7a
    7b80:	30500104 	subscc	r0, r0, r4, lsl #2
    7b84:	241f302d 	ldrcs	r3, [pc], #-45	; 7b8c <__exidx_end+0x20b0>
    7b88:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 7b90 <__exidx_end+0x20b4>
    7b8c:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    7b90:	1003666d 	andne	r6, r3, sp, ror #12
    7b94:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    7b98:	00010100 	andeq	r0, r1, r0, lsl #2
    7b9c:	39bc0205 	ldmibcc	ip!, {r0, r2, r9}
    7ba0:	f3030000 	vhadd.u8	d0, d3, d0
    7ba4:	4b210101 	blmi	847fb0 <__ccfg+0x828008>
    7ba8:	01000702 	tsteq	r0, r2, lsl #14
    7bac:	02050001 	andeq	r0, r5, #1
    7bb0:	000039d4 	ldrdeq	r3, [r0], -r4
    7bb4:	01028003 	tsteq	r2, r3
    7bb8:	03020424 	movweq	r0, #9252	; 0x2424
    7bbc:	01045822 	tsteq	r4, r2, lsr #16
    7bc0:	04826203 	streq	r6, [r2], #515	; 0x203
    7bc4:	203c0302 	eorscs	r0, ip, r2, lsl #6
    7bc8:	4a030104 	bmi	c7fe0 <__ccfg+0xa8038>
    7bcc:	211f3d4a 	tstcs	pc, sl, asr #26
    7bd0:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    7bd4:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    7bd8:	01000c02 	tsteq	r0, r2, lsl #24
    7bdc:	02050001 	andeq	r0, r5, #1
    7be0:	00003a34 	andeq	r3, r0, r4, lsr sl
    7be4:	0102a303 	tsteq	r2, r3, lsl #6
    7be8:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    7bec:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    7bf0:	4a6d0301 	bmi	1b487fc <__ccfg+0x1b28854>
    7bf4:	0009024b 	andeq	r0, r9, fp, asr #4
    7bf8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7bfc:	00000002 	andeq	r0, r0, r2
    7c00:	02bc0300 	adcseq	r0, ip, #0, 6
    7c04:	17032201 	strne	r2, [r3, -r1, lsl #4]
    7c08:	20690320 	rsbcs	r0, r9, r0, lsr #6
    7c0c:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    7c10:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    7c14:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    7c18:	20130358 	andscs	r0, r3, r8, asr r3
    7c1c:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    7c20:	023f2011 	eorseq	r2, pc, #17
    7c24:	01010006 	tsteq	r1, r6
    7c28:	00020500 	andeq	r0, r2, r0, lsl #10
    7c2c:	03000000 	movweq	r0, #0
    7c30:	030102e3 	movweq	r0, #4835	; 0x12e3
    7c34:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    7c38:	01010002 	tsteq	r1, r2
    7c3c:	00020500 	andeq	r0, r2, r0, lsl #10
    7c40:	03000000 	movweq	r0, #0
    7c44:	03010390 	movweq	r0, #5008	; 0x1390
    7c48:	1f212010 	svcne	0x00212010
    7c4c:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    7c50:	003e0104 	eorseq	r0, lr, r4, lsl #2
    7c54:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7c58:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    7c5c:	01000702 	tsteq	r0, r2, lsl #14
    7c60:	02050001 	andeq	r0, r5, #1
    7c64:	00000000 	andeq	r0, r0, r0
    7c68:	0103b503 	tsteq	r3, r3, lsl #10
    7c6c:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    7c70:	0005023d 	andeq	r0, r5, sp, lsr r2
    7c74:	03a70101 			; <UNDEFINED> instruction: 0x03a70101
    7c78:	00020000 	andeq	r0, r2, r0
    7c7c:	00000265 	andeq	r0, r0, r5, ror #4
    7c80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7c84:	0101000d 	tsteq	r1, sp
    7c88:	00000101 	andeq	r0, r0, r1, lsl #2
    7c8c:	00000100 	andeq	r0, r0, r0, lsl #2
    7c90:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7c94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7c98:	2f2e2e2f 	svccs	0x002e2e2f
    7c9c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7ca0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7ca4:	3a630062 	bcc	18c7e34 <__ccfg+0x18a7e8c>
    7ca8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7cac:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7cb0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7cb4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7cb8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7cbc:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7cc0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7cc4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7cc8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7ccc:	6f6f745c 	svcvs	0x006f745c
    7cd0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7cd4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7cd8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7cdc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7ce0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7ce4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7ce8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7cec:	5f342d69 	svcpl	0x00342d69
    7cf0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7cf4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7cf8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7cfc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7d00:	61652d65 	cmnvs	r5, r5, ror #26
    7d04:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7d08:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7d0c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7d10:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7d14:	6300656e 	movwvs	r6, #1390	; 0x56e
    7d18:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7d1c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7d20:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7d24:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7d28:	5f393130 	svcpl	0x00393130
    7d2c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7d30:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7d34:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7d38:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7d3c:	6f745c36 	svcvs	0x00745c36
    7d40:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7d44:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7d48:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7d4c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7d50:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7d54:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7d58:	61652d65 	cmnvs	r5, r5, ror #26
    7d5c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7d60:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7d64:	71353130 	teqvc	r5, r0, lsr r1
    7d68:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7d6c:	6f6e2d6d 	svcvs	0x006e2d6d
    7d70:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d74:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7d78:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7d7c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7d80:	00737973 	rsbseq	r7, r3, r3, ror r9
    7d84:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7d88:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7d8c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7d90:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7d94:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7d98:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7d9c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7da0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7da4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7da8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7dac:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7db0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7c48 <__exidx_end+0x216c>
    7db4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7db8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7dbc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7dc0:	6f6e2d6d 	svcvs	0x006e2d6d
    7dc4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7dc8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7dcc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7dd0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7dd4:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    7dd8:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    7ddc:	615c6363 	cmpvs	ip, r3, ror #6
    7de0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7de4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7de8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7dec:	392e345c 	stmdbcc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    7df0:	695c332e 	ldmdbvs	ip, {r1, r2, r3, r5, r8, r9, ip, sp}^
    7df4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7df8:	63006564 	movwvs	r6, #1380	; 0x564
    7dfc:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7e00:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7e04:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7e08:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7e0c:	5f393130 	svcpl	0x00393130
    7e10:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7e14:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7e18:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7e1c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7e20:	6f745c36 	svcvs	0x00745c36
    7e24:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7e28:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7e2c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7e30:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7e34:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7e38:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7e3c:	61652d65 	cmnvs	r5, r5, ror #26
    7e40:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7e44:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7e48:	71353130 	teqvc	r5, r0, lsr r1
    7e4c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7e50:	6f6e2d6d 	svcvs	0x006e2d6d
    7e54:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7e58:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7e5c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7e60:	00656475 	rsbeq	r6, r5, r5, ror r4
    7e64:	63667200 	cmnvs	r6, #0, 4
    7e68:	0100632e 	tsteq	r0, lr, lsr #6
    7e6c:	66720000 	ldrbtvs	r0, [r2], -r0
    7e70:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7e74:	5f000001 	svcpl	0x00000001
    7e78:	61666564 	cmnvs	r6, r4, ror #10
    7e7c:	5f746c75 	svcpl	0x00746c75
    7e80:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7e84:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7e88:	5f000002 	svcpl	0x00000002
    7e8c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7e90:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7e94:	00000300 	andeq	r0, r0, r0, lsl #6
    7e98:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    7e9c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    7ea0:	00000400 	andeq	r0, r0, r0, lsl #8
    7ea4:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 7ce4 <__exidx_end+0x2208>
    7ea8:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    7eac:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    7eb0:	00000100 	andeq	r0, r0, r0, lsl #2
    7eb4:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    7eb8:	6f6d6d6f 	svcvs	0x006d6d6f
    7ebc:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    7ec0:	00682e64 	rsbeq	r2, r8, r4, ror #28
    7ec4:	72000001 	andvc	r0, r0, #1
    7ec8:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    7ecc:	635f706f 	cmpvs	pc, #111	; 0x6f
    7ed0:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7ed4:	00000100 	andeq	r0, r0, r0, lsl #2
    7ed8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7edc:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    7ee0:	00000500 	andeq	r0, r0, r0, lsl #10
    7ee4:	02050000 	andeq	r0, r5, #0
    7ee8:	00000000 	andeq	r0, r0, r0
    7eec:	0100e803 	tsteq	r0, r3, lsl #16
    7ef0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    7ef4:	02003101 	andeq	r3, r0, #1073741824	; 0x40000000
    7ef8:	3f2f0104 	svccc	0x002f0104
    7efc:	01000302 	tsteq	r0, r2, lsl #6
    7f00:	02050001 	andeq	r0, r5, #1
    7f04:	00003a68 	andeq	r3, r0, r8, ror #20
    7f08:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    7f0c:	01040200 	mrseq	r0, R12_usr
    7f10:	03020413 	movweq	r0, #9235	; 0x2413
    7f14:	044a01c7 	strbeq	r0, [sl], #-455	; 0xfffffe39
    7f18:	7ebd0301 	cdpvc	3, 11, cr0, cr13, cr1, {0}
    7f1c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7f20:	02042201 	andeq	r2, r4, #268435456	; 0x10000000
    7f24:	3c01c103 	stfccd	f4, [r1], {3}
    7f28:	c2030104 	andgt	r0, r3, #4, 2
    7f2c:	022f3c7e 	eoreq	r3, pc, #32256	; 0x7e00
    7f30:	01010005 	tsteq	r1, r5
    7f34:	90020500 	andls	r0, r2, r0, lsl #10
    7f38:	0300003a 	movweq	r0, #58	; 0x3a
    7f3c:	1401018f 	strne	r0, [r1], #-399	; 0xfffffe71
    7f40:	1b251d23 	blne	94f3d4 <__ccfg+0x92f42c>
    7f44:	1f2f3d76 	svcne	0x002f3d76
    7f48:	2d222f21 	stccs	15, cr2, [r2, #-132]!	; 0xffffff7c
    7f4c:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    7f50:	0101000c 	tsteq	r1, ip
    7f54:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    7f58:	0300003a 	movweq	r0, #58	; 0x3a
    7f5c:	150101a4 	strne	r0, [r1, #-420]	; 0xfffffe5c
    7f60:	211c2f96 			; <UNDEFINED> instruction: 0x211c2f96
    7f64:	1f212525 	svcne	0x00212525
    7f68:	660a032f 	strvs	r0, [sl], -pc, lsr #6
    7f6c:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    7f70:	18035873 	stmdane	r3, {r0, r1, r4, r5, r6, fp, ip, lr}
    7f74:	2f3d3d66 	svccs	0x003d3d66
    7f78:	3d586803 	ldclcc	8, cr6, [r8, #-12]
    7f7c:	0b032f3d 	bleq	d3c78 <__ccfg+0xb3cd0>
    7f80:	2f3d3d58 	svccs	0x003d3d58
    7f84:	3d580b03 	vldrcc	d16, [r8, #-12]
    7f88:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    7f8c:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    7f90:	02492f3e 	subeq	r2, r9, #62, 30	; 0xf8
    7f94:	0101002f 	tsteq	r1, pc, lsr #32
    7f98:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    7f9c:	0300003c 	movweq	r0, #60	; 0x3c
    7fa0:	030101f3 	movweq	r0, #4595	; 0x11f3
    7fa4:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    7fa8:	2009032e 	andcs	r0, r9, lr, lsr #6
    7fac:	232121af 			; <UNDEFINED> instruction: 0x232121af
    7fb0:	2f22221f 	svccs	0x0022221f
    7fb4:	4a0b0326 	bmi	2c8c54 <__ccfg+0x2a8cac>
    7fb8:	335a2f2d 	cmpcc	sl, #45, 30	; 0xb4
    7fbc:	02040200 	andeq	r0, r4, #0, 4
    7fc0:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    7fc4:	14033c11 	strne	r3, [r3], #-3089	; 0xfffff3ef
    7fc8:	2e6f03f2 	mcrcs	3, 3, r0, cr15, cr2, {7}
    7fcc:	034a2303 	movteq	r2, #41731	; 0xa303
    7fd0:	224c3c62 	subcs	r3, ip, #25088	; 0x6200
    7fd4:	4c323632 	ldcmi	6, cr3, [r2], #-200	; 0xffffff38
    7fd8:	09035022 	stmdbeq	r3, {r1, r5, ip, lr}
    7fdc:	26595eac 	ldrbcs	r5, [r9], -ip, lsr #29
    7fe0:	66620336 			; <UNDEFINED> instruction: 0x66620336
    7fe4:	01001602 	tsteq	r0, r2, lsl #12
    7fe8:	02050001 	andeq	r0, r5, #1
    7fec:	00003d44 	andeq	r3, r0, r4, asr #26
    7ff0:	0102f703 	tsteq	r2, r3, lsl #14	; <UNPREDICTABLE>
    7ff4:	0302ad2f 	movweq	sl, #11567	; 0x2d2f
    7ff8:	00010100 	andeq	r0, r1, r0, lsl #2
    7ffc:	00000205 	andeq	r0, r0, r5, lsl #4
    8000:	82030000 	andhi	r0, r3, #0
    8004:	5d240103 	stfpls	f0, [r4, #-12]!
    8008:	01002a02 	tsteq	r0, r2, lsl #20
    800c:	02050001 	andeq	r0, r5, #1
    8010:	00003d64 	andeq	r3, r0, r4, ror #26
    8014:	01039603 	tsteq	r3, r3, lsl #12
    8018:	413e2321 	teqmi	lr, r1, lsr #6
    801c:	01000602 	tsteq	r0, r2, lsl #12
    8020:	0001e901 	andeq	lr, r1, r1, lsl #18
    8024:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    8028:	02000001 	andeq	r0, r0, #1
    802c:	0d0efb01 	vstreq	d15, [lr, #-4]
    8030:	01010100 	mrseq	r0, (UNDEF: 17)
    8034:	00000001 	andeq	r0, r0, r1
    8038:	01000001 	tsteq	r0, r1
    803c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8040:	2f2e2e2f 	svccs	0x002e2e2f
    8044:	642f2e2e 	strtvs	r2, [pc], #-3630	; 804c <__exidx_end+0x2570>
    8048:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    804c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    8050:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8054:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8058:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    805c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    8060:	31303030 	teqcc	r0, r0, lsr r0
    8064:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8068:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    806c:	61746562 	cmnvs	r4, r2, ror #10
    8070:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8074:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8078:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7eb0 <__exidx_end+0x23d4>
    807c:	6f635c73 	svcvs	0x00635c73
    8080:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8084:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8088:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    808c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8090:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8094:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8098:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    809c:	3130322d 	teqcc	r0, sp, lsr #4
    80a0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    80a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    80a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    80ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    80b0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    80b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    80b8:	616d5c65 	cmnvs	sp, r5, ror #24
    80bc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    80c0:	3a630065 	bcc	18c825c <__ccfg+0x18a82b4>
    80c4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    80c8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    80cc:	302e322e 	eorcc	r3, lr, lr, lsr #4
    80d0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    80d4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    80d8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    80dc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    80e0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    80e4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    80e8:	6f6f745c 	svcvs	0x006f745c
    80ec:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    80f0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    80f4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    80f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    80fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8100:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8104:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8108:	5f342d69 	svcpl	0x00342d69
    810c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8110:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8114:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8118:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    811c:	61652d65 	cmnvs	r5, r5, ror #26
    8120:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8124:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8128:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    812c:	00007379 	andeq	r7, r0, r9, ror r3
    8130:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    8134:	00632e70 	rsbeq	r2, r3, r0, ror lr
    8138:	61000001 	tstvs	r0, r1
    813c:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    8140:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    8144:	00000100 	andeq	r0, r0, r0, lsl #2
    8148:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    814c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    8150:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8154:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8158:	00000200 	andeq	r0, r0, r0, lsl #4
    815c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    8160:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    8164:	00030068 	andeq	r0, r3, r8, rrx
    8168:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    816c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    8170:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    8174:	00000100 	andeq	r0, r0, r0, lsl #2
    8178:	70696863 	rsbvc	r6, r9, r3, ror #16
    817c:	6f666e69 	svcvs	0x00666e69
    8180:	0100682e 	tsteq	r0, lr, lsr #16
    8184:	65730000 	ldrbvs	r0, [r3, #-0]!
    8188:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    818c:	00010068 	andeq	r0, r1, r8, rrx
    8190:	05000000 	streq	r0, [r0, #-0]
    8194:	003d8002 	eorseq	r8, sp, r2
    8198:	028d0300 	addeq	r0, sp, #0, 6
    819c:	0a032001 	beq	d01a8 <__ccfg+0xb0200>
    81a0:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    81a4:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    81a8:	1f212d43 	svcne	0x00212d43
    81ac:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    81b0:	01046604 	tsteq	r4, r4, lsl #12
    81b4:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    81b8:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    81bc:	2f3d2d4a 	svccs	0x003d2d4a
    81c0:	2f2f1f2f 	svccs	0x002f1f2f
    81c4:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    81c8:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    81cc:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    81d0:	0101001e 	tsteq	r1, lr, lsl r0
    81d4:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    81d8:	0300003e 	movweq	r0, #62	; 0x3e
    81dc:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    81e0:	41334330 	teqmi	r3, r0, lsr r3
    81e4:	333c0903 	teqcc	ip, #49152	; 0xc000
    81e8:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    81ec:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    81f0:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    81f4:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    81f8:	03496742 	movteq	r6, #38722	; 0x9742
    81fc:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    8200:	004b6924 	subeq	r6, fp, r4, lsr #18
    8204:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    8208:	0013024d 	andseq	r0, r3, sp, asr #4
    820c:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    8210:	00020000 	andeq	r0, r2, r0
    8214:	00000165 	andeq	r0, r0, r5, ror #2
    8218:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    821c:	0101000d 	tsteq	r1, sp
    8220:	00000101 	andeq	r0, r0, r1, lsl #2
    8224:	00000100 	andeq	r0, r0, r0, lsl #2
    8228:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    822c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8230:	2f2e2e2f 	svccs	0x002e2e2f
    8234:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8238:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    823c:	3a630062 	bcc	18c83cc <__ccfg+0x18a8424>
    8240:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8244:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8248:	302e322e 	eorcc	r3, lr, lr, lsr #4
    824c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8250:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8254:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8258:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    825c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8260:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8264:	6f6f745c 	svcvs	0x006f745c
    8268:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    826c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8270:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8274:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8278:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    827c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8280:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8284:	5f342d69 	svcpl	0x00342d69
    8288:	30322d39 	eorscc	r2, r2, r9, lsr sp
    828c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8290:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8294:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8298:	61652d65 	cmnvs	r5, r5, ror #26
    829c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    82a0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    82a4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    82a8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    82ac:	6300656e 	movwvs	r6, #1390	; 0x56e
    82b0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    82b4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    82b8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    82bc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    82c0:	5f393130 	svcpl	0x00393130
    82c4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    82c8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    82cc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    82d0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    82d4:	6f745c36 	svcvs	0x00745c36
    82d8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    82dc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    82e0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    82e4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    82e8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    82ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    82f0:	61652d65 	cmnvs	r5, r5, ror #26
    82f4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    82f8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    82fc:	71353130 	teqvc	r5, r0, lsr r1
    8300:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8304:	6f6e2d6d 	svcvs	0x006e2d6d
    8308:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    830c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8310:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8314:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8318:	00737973 	rsbseq	r7, r3, r3, ror r9
    831c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8320:	725f7075 	subsvc	r7, pc, #117	; 0x75
    8324:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    8328:	00000100 	andeq	r0, r0, r0, lsl #2
    832c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    8330:	6f725f70 	svcvs	0x00725f70
    8334:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    8338:	73000001 	movwvc	r0, #1
    833c:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    8340:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    8344:	00010068 	andeq	r0, r1, r8, rrx
    8348:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    834c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8350:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8354:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8358:	00020068 	andeq	r0, r2, r8, rrx
    835c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8360:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8364:	0300682e 	movweq	r6, #2094	; 0x82e
    8368:	64640000 	strbtvs	r0, [r4], #-0
    836c:	00682e69 	rsbeq	r2, r8, r9, ror #28
    8370:	6f000001 	svcvs	0x00000001
    8374:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    8378:	00000100 	andeq	r0, r0, r0, lsl #2
    837c:	02050000 	andeq	r0, r5, #0
    8380:	00003ef8 	strdeq	r3, [r0], -r8
    8384:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    8388:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    838c:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    8390:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    8394:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    8398:	01042000 	mrseq	r2, (UNDEF: 4)
    839c:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    83a0:	d9030204 	stmdble	r3, {r2, r9}
    83a4:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    83a8:	ac030104 	stfges	f0, [r3], {4}
    83ac:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    83b0:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    83b4:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    83b8:	03587803 	cmpeq	r8, #196608	; 0x30000
    83bc:	7303200d 	movwvc	r2, #12301	; 0x300d
    83c0:	2010033c 	andscs	r0, r0, ip, lsr r3
    83c4:	21212121 			; <UNDEFINED> instruction: 0x21212121
    83c8:	01000d02 	tsteq	r0, r2, lsl #26
    83cc:	02050001 	andeq	r0, r5, #1
    83d0:	00003f74 	andeq	r3, r0, r4, ror pc
    83d4:	0101bf03 	tsteq	r1, r3, lsl #30
    83d8:	4a78031a 	bmi	1e09048 <__ccfg+0x1de90a0>
    83dc:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    83e0:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    83e4:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    83e8:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    83ec:	3002042d 	andcc	r0, r2, sp, lsr #8
    83f0:	03010421 	movweq	r0, #5153	; 0x1421
    83f4:	2f3d2e0b 	svccs	0x003d2e0b
    83f8:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    83fc:	302c4d66 	eorcc	r4, ip, r6, ror #26
    8400:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    8404:	01001502 	tsteq	r0, r2, lsl #10
    8408:	02050001 	andeq	r0, r5, #1
    840c:	00004020 	andeq	r4, r0, r0, lsr #32
    8410:	01049f03 	tsteq	r4, r3, lsl #30
    8414:	03010c03 	movweq	r0, #7171	; 0x1c03
    8418:	77032009 	strvc	r2, [r3, -r9]
    841c:	33312120 	teqcc	r1, #32, 2
    8420:	31303027 	teqcc	r0, r7, lsr #32
    8424:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    8428:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    842c:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    8430:	03207603 			; <UNDEFINED> instruction: 0x03207603
    8434:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    8438:	00010100 	andeq	r0, r1, r0, lsl #2
    843c:	407c0205 	rsbsmi	r0, ip, r5, lsl #4
    8440:	e5030000 	str	r0, [r3, #-0]
    8444:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    8448:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    844c:	00050233 	andeq	r0, r5, r3, lsr r2
    8450:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8454:	00000002 	andeq	r0, r0, r2
    8458:	05810300 	streq	r0, [r1, #768]	; 0x300
    845c:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    8460:	01010006 	tsteq	r1, r6
    8464:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    8468:	03000040 	movweq	r0, #64	; 0x40
    846c:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    8470:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    8474:	01010006 	tsteq	r1, r6
    8478:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    847c:	03000040 	movweq	r0, #64	; 0x40
    8480:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    8484:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    8488:	01010008 	tsteq	r1, r8
    848c:	b8020500 	stmdalt	r2, {r8, sl}
    8490:	03000040 	movweq	r0, #64	; 0x40
    8494:	030105db 	movweq	r0, #5595	; 0x15db
    8498:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    849c:	20770320 	rsbscs	r0, r7, r0, lsr #6
    84a0:	03200903 			; <UNDEFINED> instruction: 0x03200903
    84a4:	2a352079 	bcs	d50690 <__ccfg+0xd306e8>
    84a8:	30312232 	eorscc	r2, r1, r2, lsr r2
    84ac:	30274732 	eorcc	r4, r7, r2, lsr r7
    84b0:	17034732 	smladxne	r3, r2, r7, r4
    84b4:	3a36372e 	bcc	d96174 <__ccfg+0xd761cc>
    84b8:	00080227 	andeq	r0, r8, r7, lsr #4
    84bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84c0:	00411c02 	subeq	r1, r1, r2, lsl #24
    84c4:	06a90300 	strteq	r0, [r9], r0, lsl #6
    84c8:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    84cc:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    84d0:	01010003 	tsteq	r1, r3
    84d4:	30020500 	andcc	r0, r2, r0, lsl #10
    84d8:	03000041 	movweq	r0, #65	; 0x41
    84dc:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    84e0:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    84e4:	00030220 	andeq	r0, r3, r0, lsr #4
    84e8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84ec:	00414402 	subeq	r4, r1, r2, lsl #8
    84f0:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    84f4:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    84f8:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    84fc:	01010003 	tsteq	r1, r3
    8500:	58020500 	stmdapl	r2, {r8, sl}
    8504:	03000041 	movweq	r0, #65	; 0x41
    8508:	160106e2 	strne	r0, [r1], -r2, ror #13
    850c:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    8510:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    8514:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    8518:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    851c:	01010003 	tsteq	r1, r3
    8520:	80020500 	andhi	r0, r2, r0, lsl #10
    8524:	03000041 	movweq	r0, #65	; 0x41
    8528:	16010782 	strne	r0, [r1], -r2, lsl #15
    852c:	00060233 	andeq	r0, r6, r3, lsr r2
    8530:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8534:	00419002 	subeq	r9, r1, r2
    8538:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    853c:	43211601 			; <UNDEFINED> instruction: 0x43211601
    8540:	03333429 	teqeq	r3, #687865856	; 0x29000000
    8544:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    8548:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    854c:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    8550:	00010100 	andeq	r0, r1, r0, lsl #2
    8554:	41bc0205 			; <UNDEFINED> instruction: 0x41bc0205
    8558:	b4030000 	strlt	r0, [r3], #-0
    855c:	21150107 	tstcs	r5, r7, lsl #2
    8560:	20090355 	andcs	r0, r9, r5, asr r3
    8564:	01000302 	tsteq	r0, r2, lsl #6
    8568:	02050001 	andeq	r0, r5, #1
    856c:	000041d0 	ldrdeq	r4, [r0], -r0
    8570:	0107c803 	tsteq	r7, r3, lsl #16
    8574:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    8578:	0302200a 	movweq	r2, #8202	; 0x200a
    857c:	00010100 	andeq	r0, r1, r0, lsl #2
    8580:	41e40205 	mvnmi	r0, r5, lsl #4
    8584:	a7030000 	strge	r0, [r3, -r0]
    8588:	03200102 			; <UNDEFINED> instruction: 0x03200102
    858c:	1f3d2009 	svcne	0x003d2009
    8590:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    8594:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    8598:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    859c:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    85a0:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    85a4:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    85a8:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    85ac:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    85b0:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    85b4:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    85b8:	033d3c09 	teqeq	sp, #2304	; 0x900
    85bc:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    85c0:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    85c4:	40211f3d 	eormi	r1, r1, sp, lsr pc
    85c8:	0012024b 	andseq	r0, r2, fp, asr #4
    85cc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    85d0:	0042f402 	subeq	pc, r2, r2, lsl #8
    85d4:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    85d8:	04020001 	streq	r0, [r2], #-1
    85dc:	200e0301 	andcs	r0, lr, r1, lsl #6
    85e0:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    85e4:	4b684d1d 	blmi	1a1ba60 <__ccfg+0x19fbab8>
    85e8:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    85ec:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    85f0:	315b3d01 	cmpcc	fp, r1, lsl #26
    85f4:	01000b02 	tsteq	r0, r2, lsl #22
    85f8:	02050001 	andeq	r0, r5, #1
    85fc:	00004358 	andeq	r4, r0, r8, asr r3
    8600:	01089303 	tsteq	r8, r3, lsl #6
    8604:	2f010903 	svccs	0x00010903
    8608:	0022212d 	eoreq	r2, r2, sp, lsr #2
    860c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    8610:	0007024b 	andeq	r0, r7, fp, asr #4
    8614:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8618:	00438002 	subeq	r8, r3, r2
    861c:	039b0300 	orrseq	r0, fp, #0, 6
    8620:	01090301 	tsteq	r9, r1, lsl #6
    8624:	203c7703 	eorscs	r7, ip, r3, lsl #14
    8628:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    862c:	0a033130 	beq	d4af4 <__ccfg+0xb4b4c>
    8630:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    8634:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 851c <__exidx_end+0x2a40>
    8638:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    863c:	5226501c 	eorpl	r5, r6, #28
    8640:	2f4d4f3d 	svccs	0x004d4f3d
    8644:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    8648:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    864c:	5b4b0104 	blpl	12c8a64 <__ccfg+0x12a8abc>
    8650:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    8654:	4a09033f 	bmi	249358 <__ccfg+0x2293b0>
    8658:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    865c:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    8660:	4a7db903 	bmi	1f76a74 <__ccfg+0x1f56acc>
    8664:	01001f02 	tsteq	r0, r2, lsl #30
    8668:	00036501 	andeq	r6, r3, r1, lsl #10
    866c:	a8000200 	stmdage	r0, {r9}
    8670:	02000001 	andeq	r0, r0, #1
    8674:	0d0efb01 	vstreq	d15, [lr, #-4]
    8678:	01010100 	mrseq	r0, (UNDEF: 17)
    867c:	00000001 	andeq	r0, r0, r1
    8680:	01000001 	tsteq	r0, r1
    8684:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8688:	2f2e2e2f 	svccs	0x002e2e2f
    868c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 8694 <__exidx_end+0x2bb8>
    8690:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    8694:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    8698:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    869c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    86a0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    86a4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    86a8:	31303030 	teqcc	r0, r0, lsr r0
    86ac:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    86b0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    86b4:	61746562 	cmnvs	r4, r2, ror #10
    86b8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    86bc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    86c0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 84f8 <__exidx_end+0x2a1c>
    86c4:	6f635c73 	svcvs	0x00635c73
    86c8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    86cc:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    86d0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    86d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    86d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    86dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    86e0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    86e4:	3130322d 	teqcc	r0, sp, lsr #4
    86e8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    86ec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    86f0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    86f4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    86f8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    86fc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8700:	616d5c65 	cmnvs	sp, r5, ror #24
    8704:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8708:	3a630065 	bcc	18c88a4 <__ccfg+0x18a88fc>
    870c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8710:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8714:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8718:	3030302e 	eorscc	r3, r0, lr, lsr #32
    871c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8720:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8724:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8728:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    872c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8730:	6f6f745c 	svcvs	0x006f745c
    8734:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8738:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    873c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8740:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8744:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8748:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    874c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8750:	5f342d69 	svcpl	0x00342d69
    8754:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8758:	33713531 	cmncc	r1, #205520896	; 0xc400000
    875c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8760:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8764:	61652d65 	cmnvs	r5, r5, ror #26
    8768:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    876c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8770:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    8774:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    8778:	2f2e2e2f 	svccs	0x002e2e2f
    877c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8780:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    8784:	73000063 	movwvc	r0, #99	; 0x63
    8788:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    878c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    8790:	00010063 	andeq	r0, r1, r3, rrx
    8794:	6e6f6100 	powvse	f6, f7, f0
    8798:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    879c:	0100682e 	tsteq	r0, lr, lsr #16
    87a0:	736f0000 	cmnvc	pc, #0
    87a4:	00682e63 	rsbeq	r2, r8, r3, ror #28
    87a8:	70000001 	andvc	r0, r0, r1
    87ac:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    87b0:	00010068 	andeq	r0, r1, r8, rrx
    87b4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    87b8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    87bc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    87c0:	00000100 	andeq	r0, r0, r0, lsl #2
    87c4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    87c8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    87cc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    87d0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    87d4:	00000200 	andeq	r0, r0, r0, lsl #4
    87d8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    87dc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    87e0:	00030068 	andeq	r0, r3, r8, rrx
    87e4:	5f776800 	svcpl	0x00776800
    87e8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    87ec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    87f0:	72000004 	andvc	r0, r0, #4
    87f4:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    87f8:	00000100 	andeq	r0, r0, r0, lsl #2
    87fc:	5f737973 	svcpl	0x00737973
    8800:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    8804:	0100682e 	tsteq	r0, lr, lsr #16
    8808:	6f610000 	svcvs	0x00610000
    880c:	61625f6e 	cmnvs	r2, lr, ror #30
    8810:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    8814:	0100682e 	tsteq	r0, lr, lsr #16
    8818:	00000000 	andeq	r0, r0, r0
    881c:	00000205 	andeq	r0, r0, r5, lsl #4
    8820:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    8824:	02040100 	andeq	r0, r4, #0, 2
    8828:	0102e903 	tsteq	r2, r3, lsl #18
    882c:	97030104 	strls	r0, [r3, -r4, lsl #2]
    8830:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    8834:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    8838:	01040200 	mrseq	r0, R12_usr
    883c:	2000ce03 	andcs	ip, r0, r3, lsl #28
    8840:	02000104 	andeq	r0, r0, #4, 2
    8844:	d1030104 	tstle	r3, r4, lsl #2
    8848:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    884c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    8850:	4b896701 	blmi	fe26245c <_estack+0xde25d45c>
    8854:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    8858:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    885c:	03010458 	movweq	r0, #5208	; 0x1458
    8860:	004a7ee4 	subeq	r7, sl, r4, ror #29
    8864:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    8868:	81030404 	tsthi	r3, r4, lsl #8
    886c:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    8870:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    8874:	0001043c 	andeq	r0, r1, ip, lsr r4
    8878:	03010402 	movweq	r0, #5122	; 0x1402
    887c:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    8880:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    8884:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    8888:	00204203 	eoreq	r4, r0, r3, lsl #4
    888c:	03010402 	movweq	r0, #5122	; 0x1402
    8890:	01042e14 	tsteq	r4, r4, lsl lr
    8894:	01040200 	mrseq	r0, R12_usr
    8898:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    889c:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    88a0:	4b83281b 	blmi	fe0d2914 <_estack+0xde0cd914>
    88a4:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    88a8:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    88ac:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    88b0:	3c140301 	ldccc	3, cr0, [r4], {1}
    88b4:	02000104 	andeq	r0, r0, #4, 2
    88b8:	8d030104 	stfhis	f0, [r3, #-16]
    88bc:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    88c0:	01010017 	tsteq	r1, r7, lsl r0
    88c4:	d0020500 	andle	r0, r2, r0, lsl #10
    88c8:	03000044 	movweq	r0, #68	; 0x44
    88cc:	030101da 	movweq	r0, #4570	; 0x11da
    88d0:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    88d4:	201d0320 	andscs	r0, sp, r0, lsr #6
    88d8:	32412f59 	subcc	r2, r1, #356	; 0x164
    88dc:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    88e0:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    88e4:	0305041b 	movweq	r0, #21531	; 0x541b
    88e8:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    88ec:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    88f0:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    88f4:	50030504 	andpl	r0, r3, r4, lsl #10
    88f8:	01042120 	tsteq	r4, r0, lsr #2
    88fc:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    8900:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    8904:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    8908:	03050420 	movweq	r0, #21536	; 0x5420
    890c:	0104204d 	tsteq	r4, sp, asr #32
    8910:	2f2e3403 	svccs	0x002e3403
    8914:	2f692365 	svccs	0x00692365
    8918:	213e214d 	teqcs	lr, sp, asr #2
    891c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    8920:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    8924:	ca4a0f03 	bgt	128c538 <__ccfg+0x126c590>
    8928:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    892c:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    8930:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    8934:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    8938:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    893c:	31312026 	teqcc	r1, r6, lsr #32
    8940:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    8944:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    8948:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    894c:	03200903 			; <UNDEFINED> instruction: 0x03200903
    8950:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    8954:	7103213c 	tstvc	r3, ip, lsr r1
    8958:	3c0f0320 	stccc	3, cr0, [pc], {32}
    895c:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    8960:	23212265 			; <UNDEFINED> instruction: 0x23212265
    8964:	20780328 	rsbscs	r0, r8, r8, lsr #6
    8968:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    896c:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    8970:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    8974:	01010021 	tsteq	r1, r1, lsr #32
    8978:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    897c:	03000046 	movweq	r0, #70	; 0x46
    8980:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    8984:	a22f2240 	eorge	r2, pc, #64, 4
    8988:	2a404e24 	bcs	101c220 <__ccfg+0xffc278>
    898c:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    8990:	00010100 	andeq	r0, r1, r0, lsl #2
    8994:	00000205 	andeq	r0, r0, r5, lsl #4
    8998:	e5030000 	str	r0, [r3, #-0]
    899c:	0c030103 	stfeqs	f0, [r3], {3}
    89a0:	30282f20 	eorcc	r2, r8, r0, lsr #30
    89a4:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    89a8:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    89ac:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    89b0:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    89b4:	1e224b2f 	vmulne.f64	d4, d2, d31
    89b8:	000c023e 	andeq	r0, ip, lr, lsr r2
    89bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    89c0:	00475002 	subeq	r5, r7, r2
    89c4:	04a60300 	strteq	r0, [r6], #768	; 0x300
    89c8:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    89cc:	00040226 	andeq	r0, r4, r6, lsr #4
    89d0:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    89d4:	00020000 	andeq	r0, r2, r0
    89d8:	00000143 	andeq	r0, r0, r3, asr #2
    89dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    89e0:	0101000d 	tsteq	r1, sp
    89e4:	00000101 	andeq	r0, r0, r1, lsl #2
    89e8:	00000100 	andeq	r0, r0, r0, lsl #2
    89ec:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    89f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89f4:	2f2e2e2f 	svccs	0x002e2e2f
    89f8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    89fc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8a00:	3a630062 	bcc	18c8b90 <__ccfg+0x18a8be8>
    8a04:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8a08:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8a0c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8a10:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8a14:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8a18:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8a1c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8a20:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8a24:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8a28:	6f6f745c 	svcvs	0x006f745c
    8a2c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8a30:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8a34:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8a38:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8a3c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8a40:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8a44:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8a48:	5f342d69 	svcpl	0x00342d69
    8a4c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8a50:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8a54:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8a58:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8a5c:	61652d65 	cmnvs	r5, r5, ror #26
    8a60:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8a64:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8a68:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8a6c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8a70:	6300656e 	movwvs	r6, #1390	; 0x56e
    8a74:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8a78:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8a7c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8a80:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8a84:	5f393130 	svcpl	0x00393130
    8a88:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8a8c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8a90:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8a94:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8a98:	6f745c36 	svcvs	0x00745c36
    8a9c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8aa0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8aa4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8aa8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8aac:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8ab0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8ab4:	61652d65 	cmnvs	r5, r5, ror #26
    8ab8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8abc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8ac0:	71353130 	teqvc	r5, r0, lsr r1
    8ac4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8ac8:	6f6e2d6d 	svcvs	0x006e2d6d
    8acc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8ad0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8ad4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8ad8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8adc:	00737973 	rsbseq	r7, r3, r3, ror r9
    8ae0:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8ae4:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8ae8:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    8aec:	63000001 	movwvs	r0, #1
    8af0:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    8af4:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    8af8:	00010068 	andeq	r0, r1, r8, rrx
    8afc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8b00:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8b04:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8b08:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8b0c:	00020068 	andeq	r0, r2, r8, rrx
    8b10:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8b14:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8b18:	0300682e 	movweq	r6, #2094	; 0x82e
    8b1c:	00000000 	andeq	r0, r0, r0
    8b20:	00000205 	andeq	r0, r0, r5, lsl #4
    8b24:	c4030000 	strgt	r0, [r3], #-0
    8b28:	2f130100 	svccs	0x00130100
    8b2c:	01000602 	tsteq	r0, r2, lsl #12
    8b30:	02050001 	andeq	r0, r5, #1
    8b34:	00000000 	andeq	r0, r0, r0
    8b38:	0100d003 	tsteq	r0, r3
    8b3c:	0a032f14 	beq	d4794 <__ccfg+0xb47ec>
    8b40:	0008022e 	andeq	r0, r8, lr, lsr #4
    8b44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8b48:	00476802 	subeq	r6, r7, r2, lsl #16
    8b4c:	00e60300 	rsceq	r0, r6, r0, lsl #6
    8b50:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    8b54:	9b030204 	blls	c936c <__ccfg+0xa93c4>
    8b58:	01042e01 	tsteq	r4, r1, lsl #28
    8b5c:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    8b60:	4b4b4c23 	blmi	12dbbf4 <__ccfg+0x12bbc4c>
    8b64:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    8b68:	01010005 	tsteq	r1, r5
    8b6c:	00020500 	andeq	r0, r2, r0, lsl #10
    8b70:	03000000 	movweq	r0, #0
    8b74:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    8b78:	01b00302 	lslseq	r0, r2, #6
    8b7c:	03010420 	movweq	r0, #5152	; 0x1420
    8b80:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    8b84:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    8b88:	4a0a033c 	bmi	289880 <__ccfg+0x2698d8>
    8b8c:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    8b90:	01000502 	tsteq	r0, r2, lsl #10
    8b94:	02050001 	andeq	r0, r5, #1
    8b98:	000047b4 			; <UNDEFINED> instruction: 0x000047b4
    8b9c:	0101a603 	tsteq	r1, r3, lsl #12
    8ba0:	e3030204 	movw	r0, #12804	; 0x3204
    8ba4:	11032000 	mrsne	r2, (UNDEF: 3)
    8ba8:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 8af8 <__exidx_end+0x301c>
    8bac:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    8bb0:	8c030104 	stfhis	f0, [r3], {4}
    8bb4:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    8bb8:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    8bbc:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    8bc0:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    8bc4:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    8bc8:	30032064 	andcc	r2, r3, r4, rrx
    8bcc:	00040220 	andeq	r0, r4, r0, lsr #4
    8bd0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8bd4:	00482002 	subeq	r2, r8, r2
    8bd8:	01e00300 	mvneq	r0, r0, lsl #6
    8bdc:	03020401 	movweq	r0, #9217	; 0x2401
    8be0:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    8be4:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    8be8:	0302042e 	movweq	r0, #9262	; 0x242e
    8bec:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    8bf0:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    8bf4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    8bf8:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    8bfc:	01000202 	tsteq	r0, r2, lsl #4
    8c00:	00021e01 	andeq	r1, r2, r1, lsl #28
    8c04:	42000200 	andmi	r0, r0, #0, 4
    8c08:	02000001 	andeq	r0, r0, #1
    8c0c:	0d0efb01 	vstreq	d15, [lr, #-4]
    8c10:	01010100 	mrseq	r0, (UNDEF: 17)
    8c14:	00000001 	andeq	r0, r0, r1
    8c18:	01000001 	tsteq	r0, r1
    8c1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c20:	2f2e2e2f 	svccs	0x002e2e2f
    8c24:	642f2e2e 	strtvs	r2, [pc], #-3630	; 8c2c <__exidx_end+0x3150>
    8c28:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    8c2c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    8c30:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8c34:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8c38:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8c3c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    8c40:	31303030 	teqcc	r0, r0, lsr r0
    8c44:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8c48:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8c4c:	61746562 	cmnvs	r4, r2, ror #10
    8c50:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8c54:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8c58:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8a90 <__exidx_end+0x2fb4>
    8c5c:	6f635c73 	svcvs	0x00635c73
    8c60:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8c64:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8c68:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    8c6c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8c70:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8c74:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8c78:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    8c7c:	3130322d 	teqcc	r0, sp, lsr #4
    8c80:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    8c84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8c88:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8c8c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8c90:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    8c94:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8c98:	616d5c65 	cmnvs	sp, r5, ror #24
    8c9c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8ca0:	3a630065 	bcc	18c8e3c <__ccfg+0x18a8e94>
    8ca4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8ca8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8cac:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8cb0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8cb4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8cb8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8cbc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8cc0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8cc4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8cc8:	6f6f745c 	svcvs	0x006f745c
    8ccc:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8cd0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8cd4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8cd8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8cdc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8ce0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8ce4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8ce8:	5f342d69 	svcpl	0x00342d69
    8cec:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8cf0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8cf4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8cf8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8cfc:	61652d65 	cmnvs	r5, r5, ror #26
    8d00:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8d04:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8d08:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    8d0c:	00007379 	andeq	r7, r0, r9, ror r3
    8d10:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    8d14:	00010068 	andeq	r0, r1, r8, rrx
    8d18:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8d1c:	0100632e 	tsteq	r0, lr, lsr #6
    8d20:	645f0000 	ldrbvs	r0, [pc], #-0	; 8d28 <__exidx_end+0x324c>
    8d24:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8d28:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8d30 <__exidx_end+0x3254>
    8d2c:	73657079 	cmnvc	r5, #121	; 0x79
    8d30:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8d34:	735f0000 	cmpvc	pc, #0
    8d38:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8d3c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8d40:	63000003 	movwvs	r0, #3
    8d44:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    8d48:	00000100 	andeq	r0, r0, r0, lsl #2
    8d4c:	02050000 	andeq	r0, r5, #0
    8d50:	00004838 	andeq	r4, r0, r8, lsr r8
    8d54:	01018803 	tsteq	r1, r3, lsl #16
    8d58:	50303120 	eorspl	r3, r0, r0, lsr #2
    8d5c:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    8d60:	0005022c 	andeq	r0, r5, ip, lsr #4
    8d64:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8d68:	60020500 	andvs	r0, r2, r0, lsl #10
    8d6c:	03000048 	movweq	r0, #72	; 0x48
    8d70:	030100c3 	movweq	r0, #4291	; 0x10c3
    8d74:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    8d78:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8d7c:	02050002 	andeq	r0, r5, #2
    8d80:	00000000 	andeq	r0, r0, r0
    8d84:	0100d803 	tsteq	r0, r3, lsl #16
    8d88:	33010e03 	movwcc	r0, #7683	; 0x1e03
    8d8c:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    8d90:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    8d94:	01010004 	tsteq	r1, r4
    8d98:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8d9c:	00000002 	andeq	r0, r0, r2
    8da0:	01850300 	orreq	r0, r5, r0, lsl #6
    8da4:	20110301 	andscs	r0, r1, r1, lsl #6
    8da8:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    8dac:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    8db0:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    8db4:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    8db8:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    8dbc:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    8dc0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8dc4:	02050002 	andeq	r0, r5, #2
    8dc8:	00000000 	andeq	r0, r0, r0
    8dcc:	0101af03 	tsteq	r1, r3, lsl #30
    8dd0:	1b201103 	blne	80d1e4 <__ccfg+0x7ed23c>
    8dd4:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    8dd8:	042f2013 	strteq	r2, [pc], #-19	; 8de0 <__exidx_end+0x3304>
    8ddc:	20690301 	rsbcs	r0, r9, r1, lsl #6
    8de0:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8de4:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8de8:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    8dec:	01000502 	tsteq	r0, r2, lsl #10
    8df0:	00020401 	andeq	r0, r2, r1, lsl #8
    8df4:	00000205 	andeq	r0, r0, r5, lsl #4
    8df8:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    8dfc:	11030101 	tstne	r3, r1, lsl #2
    8e00:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    8e04:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    8e08:	0104302d 	tsteq	r4, sp, lsr #32
    8e0c:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    8e10:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8e14:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8e18:	00c80302 	sbceq	r0, r8, r2, lsl #6
    8e1c:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    8e20:	43010100 	movwmi	r0, #4352	; 0x1100
    8e24:	03000002 	movweq	r0, #2
    8e28:	00019500 	andeq	r9, r1, r0, lsl #10
    8e2c:	fb010200 	blx	49636 <__ccfg+0x2968e>
    8e30:	01000d0e 	tsteq	r0, lr, lsl #26
    8e34:	00010101 	andeq	r0, r1, r1, lsl #2
    8e38:	00010000 	andeq	r0, r1, r0
    8e3c:	2e2e0100 	sufcse	f0, f6, f0
    8e40:	2f2e2e2f 	svccs	0x002e2e2f
    8e44:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8e48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8e4c:	2f2e2e2f 	svccs	0x002e2e2f
    8e50:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8e54:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8e58:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8e5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8e60:	616d2f63 	cmnvs	sp, r3, ror #30
    8e64:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8e68:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    8e6c:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    8e70:	2f2e2e2f 	svccs	0x002e2e2f
    8e74:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8e78:	2f00676e 	svccs	0x0000676e
    8e7c:	2f727375 	svccs	0x00727375
    8e80:	2f62696c 	svccs	0x0062696c
    8e84:	2f636367 	svccs	0x00636367
    8e88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8e8c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8e90:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8e94:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    8e98:	2f312e33 	svccs	0x00312e33
    8e9c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8ea0:	00656475 	rsbeq	r6, r5, r5, ror r4
    8ea4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8ea8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8eac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8eb0:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8eb4:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8eb8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ebc:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8ec0:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8ec4:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8ec8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ecc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8ed0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8ed4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8ed8:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    8edc:	622f0073 	eorvs	r0, pc, #115	; 0x73
    8ee0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8ee4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ee8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8eec:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8ef0:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8ef4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8ef8:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8efc:	2f302e33 	svccs	0x00302e33
    8f00:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f04:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8d68 <__exidx_end+0x328c>
    8f08:	2f636269 	svccs	0x00636269
    8f0c:	61636f6c 	cmnvs	r3, ip, ror #30
    8f10:	2f00656c 	svccs	0x0000656c
    8f14:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8f18:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8f1c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f20:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8f24:	2f787945 	svccs	0x00787945
    8f28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f2c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8f30:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8f34:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f38:	2f62696c 	svccs	0x0062696c
    8f3c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8f40:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8f44:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8f48:	656d0000 	strbvs	r0, [sp, #-0]!
    8f4c:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    8f50:	0100632e 	tsteq	r0, lr, lsr #6
    8f54:	74730000 	ldrbtvc	r0, [r3], #-0
    8f58:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    8f5c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8f60:	745f0000 	ldrbvc	r0, [pc], #-0	; 8f68 <__exidx_end+0x348c>
    8f64:	73657079 	cmnvc	r5, #121	; 0x79
    8f68:	0300682e 	movweq	r6, #2094	; 0x82e
    8f6c:	65720000 	ldrbvs	r0, [r2, #-0]!
    8f70:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8f74:	00030068 	andeq	r0, r3, r8, rrx
    8f78:	636f6c00 	cmnvs	pc, #0, 24
    8f7c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    8f80:	73000003 	movwvc	r0, #3
    8f84:	6f6c7465 	svcvs	0x006c7465
    8f88:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    8f8c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8f90:	74730000 	ldrbtvc	r0, [r3], #-0
    8f94:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    8f98:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f9c:	63770000 	cmnvs	r7, #0
    8fa0:	2e726168 	rpwcssz	f6, f2, #0.0
    8fa4:	00050068 	andeq	r0, r5, r8, rrx
    8fa8:	636f6c00 	cmnvs	pc, #0, 24
    8fac:	2e656c61 	cdpcs	12, 6, cr6, cr5, cr1, {3}
    8fb0:	00050068 	andeq	r0, r5, r8, rrx
    8fb4:	72747300 	rsbsvc	r7, r4, #0, 6
    8fb8:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    8fbc:	00050068 	andeq	r0, r5, r8, rrx
    8fc0:	01050000 	mrseq	r0, (UNDEF: 5)
    8fc4:	68020500 	stmdavs	r2, {r8, sl}
    8fc8:	03000048 	movweq	r0, #72	; 0x48
    8fcc:	03050133 	movweq	r0, #20787	; 0x5133
    8fd0:	13010e03 	movwne	r0, #7683	; 0x1e03
    8fd4:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    8fd8:	6b030601 	blvs	ca7e4 <__ccfg+0xaa83c>
    8fdc:	03060501 	movweq	r0, #25857	; 0x6501
    8fe0:	1c053c15 	stcne	12, cr3, [r5], {21}
    8fe4:	01040200 	mrseq	r0, R12_usr
    8fe8:	0018052e 	andseq	r0, r8, lr, lsr #10
    8fec:	66010402 	strvs	r0, [r1], -r2, lsl #8
    8ff0:	01040200 	mrseq	r0, R12_usr
    8ff4:	060b059e 			; <UNDEFINED> instruction: 0x060b059e
    8ff8:	061a0528 	ldreq	r0, [sl], -r8, lsr #10
    8ffc:	05393013 	ldreq	r3, [r9, #-19]!	; 0xffffffed
    9000:	132f060b 			; <UNDEFINED> instruction: 0x132f060b
    9004:	01061a05 	tsteq	r6, r5, lsl #20
    9008:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
    900c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    9010:	207a030d 	rsbscs	r0, sl, sp, lsl #6
    9014:	204a0a03 	subcs	r0, sl, r3, lsl #20
    9018:	0520203c 	streq	r2, [r0, #-60]!	; 0xffffffc4
    901c:	0530060b 	ldreq	r0, [r0, #-1547]!	; 0xfffff9f5
    9020:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    9024:	062f060b 	strteq	r0, [pc], -fp, lsl #12
    9028:	1d0d0501 	cfstr32ne	mvfx0, [sp, #-4]
    902c:	05204a58 	streq	r4, [r0, #-2648]!	; 0xfffff5a8
    9030:	200b030e 	andcs	r0, fp, lr, lsl #6
    9034:	03200905 			; <UNDEFINED> instruction: 0x03200905
    9038:	052e2e5e 	streq	r2, [lr, #-3678]!	; 0xfffff1a2
    903c:	23030605 	movwcs	r0, #13829	; 0x3605
    9040:	060c0520 	streq	r0, [ip], -r0, lsr #10
    9044:	3b090501 	blcc	24a450 <__ccfg+0x22a4a8>
    9048:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    904c:	58590309 	ldmdapl	r9, {r0, r3, r8, r9}^
    9050:	22030e05 	andcs	r0, r3, #5, 28	; 0x50
    9054:	20090520 	andcs	r0, r9, r0, lsr #10
    9058:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
    905c:	205e0309 	subscs	r0, lr, r9, lsl #6
    9060:	17030d05 	strne	r0, [r3, -r5, lsl #26]
    9064:	0002022e 	andeq	r0, r2, lr, lsr #4
    9068:	01710101 	cmneq	r1, r1, lsl #2
    906c:	00030000 	andeq	r0, r3, r0
    9070:	00000117 	andeq	r0, r0, r7, lsl r1
    9074:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    9078:	0101000d 	tsteq	r1, sp
    907c:	00000101 	andeq	r0, r0, r1, lsl #2
    9080:	00000100 	andeq	r0, r0, r0, lsl #2
    9084:	2f2e2e01 	svccs	0x002e2e01
    9088:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    908c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9090:	2f2e2e2f 	svccs	0x002e2e2f
    9094:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9098:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    909c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    90a0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    90a4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    90a8:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    90ac:	73752f00 	cmnvc	r5, #0, 30
    90b0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    90b4:	63672f62 	cmnvs	r7, #392	; 0x188
    90b8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    90bc:	6f6e2d6d 	svcvs	0x006e2d6d
    90c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    90c4:	2f696261 	svccs	0x00696261
    90c8:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    90cc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    90d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    90d4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    90d8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    90dc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    90e0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    90e4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    90e8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    90ec:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    90f0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    90f4:	2f302e33 	svccs	0x00302e33
    90f8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    90fc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8f60 <__exidx_end+0x3484>
    9100:	2f636269 	svccs	0x00636269
    9104:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9108:	2f656475 	svccs	0x00656475
    910c:	00737973 	rsbseq	r7, r3, r3, ror r9
    9110:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9114:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    9118:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    911c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    9120:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    9124:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9128:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    912c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    9130:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    9134:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9138:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    913c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9140:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9144:	72000065 	andvc	r0, r0, #101	; 0x65
    9148:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    914c:	00010063 	andeq	r0, r1, r3, rrx
    9150:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    9154:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    9158:	00020068 	andeq	r0, r2, r8, rrx
    915c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    9160:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    9164:	00030068 	andeq	r0, r3, r8, rrx
    9168:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    916c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9170:	00000300 	andeq	r0, r0, r0, lsl #6
    9174:	6b636f6c 	blvs	18e4f2c <__ccfg+0x18c4f84>
    9178:	0300682e 	movweq	r6, #2094	; 0x82e
    917c:	74730000 	ldrbtvc	r0, [r3], #-0
    9180:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    9184:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    9188:	05000000 	streq	r0, [r0, #-0]
    918c:	02050001 	andeq	r0, r5, #1
    9190:	00004914 	andeq	r4, r0, r4, lsl r9
    9194:	05013e03 	streq	r3, [r1, #-3587]	; 0xfffff1fd
    9198:	1d051303 	stcne	3, cr1, [r5, #-12]
    919c:	13030514 	movwne	r0, #13588	; 0x3514
    91a0:	01061b05 	tsteq	r6, r5, lsl #22
    91a4:	0520202e 	streq	r2, [r0, #-46]!	; 0xffffffd2
    91a8:	4e062f01 	cdpmi	15, 0, cr2, cr6, cr1, {0}
    91ac:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    91b0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    91b4:	12051f01 	andne	r1, r5, #1, 30
    91b8:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    91bc:	13030525 	movwne	r0, #13605	; 0x3525
    91c0:	13060605 	movwne	r0, #26117	; 0x6605
    91c4:	4a201e05 	bmi	8109e0 <__ccfg+0x7f0a38>
    91c8:	052e4405 	streq	r4, [lr, #-1029]!	; 0xfffffbfb
    91cc:	0305491b 	movweq	r4, #22811	; 0x591b
    91d0:	0a053006 	beq	1551f0 <__ccfg+0x135248>
    91d4:	01050106 	tsteq	r5, r6, lsl #2
    91d8:	0a02012f 	beq	8969c <__ccfg+0x696f4>
    91dc:	dc010100 	stfles	f0, [r1], {-0}
    91e0:	03000000 	movweq	r0, #0
    91e4:	0000d600 	andeq	sp, r0, r0, lsl #12
    91e8:	fb010200 	blx	499f2 <__ccfg+0x29a4a>
    91ec:	01000d0e 	tsteq	r0, lr, lsl #26
    91f0:	00010101 	andeq	r0, r1, r1, lsl #2
    91f4:	00010000 	andeq	r0, r1, r0
    91f8:	752f0100 	strvc	r0, [pc, #-256]!	; 9100 <__exidx_end+0x3624>
    91fc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 9038 <__exidx_end+0x355c>
    9200:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    9204:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    9208:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    920c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    9210:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    9214:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    9218:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    921c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    9220:	2f006564 	svccs	0x00006564
    9224:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9228:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    922c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9230:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    9234:	2f787945 	svccs	0x00787945
    9238:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    923c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    9240:	302e332e 	eorcc	r3, lr, lr, lsr #6
    9244:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9248:	2f62696c 	svccs	0x0062696c
    924c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9250:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    9254:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    9258:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    925c:	2f2e2e00 	svccs	0x002e2e00
    9260:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9264:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9268:	2f2e2e2f 	svccs	0x002e2e2f
    926c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9270:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    9274:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9278:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    927c:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    9280:	00746e65 	rsbseq	r6, r4, r5, ror #28
    9284:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    9288:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    928c:	00010068 	andeq	r0, r1, r8, rrx
    9290:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    9294:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    9298:	00020068 	andeq	r0, r2, r8, rrx
    929c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    92a0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    92a4:	00000200 	andeq	r0, r0, r0, lsl #4
    92a8:	6b636f6c 	blvs	18e5060 <__ccfg+0x18c50b8>
    92ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    92b0:	6d690000 	stclvs	0, cr0, [r9, #-0]
    92b4:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    92b8:	0300632e 	movweq	r6, #814	; 0x32e
    92bc:	9b000000 	blls	92c4 <__exidx_end+0x37e8>
    92c0:	03000001 	movweq	r0, #1
    92c4:	0000e200 	andeq	lr, r0, r0, lsl #4
    92c8:	fb010200 	blx	49ad2 <__ccfg+0x29b2a>
    92cc:	01000d0e 	tsteq	r0, lr, lsl #26
    92d0:	00010101 	andeq	r0, r1, r1, lsl #2
    92d4:	00010000 	andeq	r0, r1, r0
    92d8:	2e2e0100 	sufcse	f0, f6, f0
    92dc:	2f2e2e2f 	svccs	0x002e2e2f
    92e0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92e8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    92ec:	00636367 	rsbeq	r6, r3, r7, ror #6
    92f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92f8:	2f2e2e2f 	svccs	0x002e2e2f
    92fc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 924c <__exidx_end+0x3770>
    9300:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    9304:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    9308:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    930c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    9310:	2f2e2e00 	svccs	0x002e2e00
    9314:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9318:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    931c:	672f2e2f 	strvs	r2, [pc, -pc, lsr #28]!
    9320:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    9324:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9328:	2f2e2e2f 	svccs	0x002e2e2f
    932c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9330:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    9334:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    9338:	2f2e2e2f 	svccs	0x002e2e2f
    933c:	2f636367 	svccs	0x00636367
    9340:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    9344:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    9348:	00006d72 	andeq	r6, r0, r2, ror sp
    934c:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    9350:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    9354:	00010063 	andeq	r0, r1, r3, rrx
    9358:	73616800 	cmnvc	r1, #0, 16
    935c:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    9360:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9364:	72610000 	rsbvc	r0, r1, #0
    9368:	73692d6d 	cmnvc	r9, #6976	; 0x1b40
    936c:	00682e61 	rsbeq	r2, r8, r1, ror #28
    9370:	61000003 	tstvs	r0, r3
    9374:	632d6d72 			; <UNDEFINED> instruction: 0x632d6d72
    9378:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    937c:	00000300 	andeq	r0, r0, r0, lsl #6
    9380:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    9384:	6e6f632d 	cdpvs	3, 6, cr6, cr15, cr13, {1}
    9388:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
    938c:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    9390:	00000300 	andeq	r0, r0, r0, lsl #6
    9394:	2e6d7261 	cdpcs	2, 6, cr7, cr13, cr1, {3}
    9398:	00040068 	andeq	r0, r4, r8, rrx
    939c:	62696c00 	rsbvs	r6, r9, #0, 24
    93a0:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    93a4:	0100682e 	tsteq	r0, lr, lsr #16
    93a8:	05000000 	streq	r0, [r0, #-0]
    93ac:	02050001 	andeq	r0, r5, #1
    93b0:	00004960 	andeq	r4, r0, r0, ror #18
    93b4:	0104a403 	tsteq	r4, r3, lsl #8
    93b8:	13130305 	tstne	r3, #335544320	; 0x14000000
    93bc:	01160513 	tsteq	r6, r3, lsl r5
    93c0:	01010101 	tsteq	r1, r1, lsl #2
    93c4:	0f060105 	svceq	0x00060105
    93c8:	05311605 	ldreq	r1, [r1, #-1541]!	; 0xfffff9fb
    93cc:	16051d01 	strne	r1, [r5], -r1, lsl #26
    93d0:	2e062e31 	mcrcs	14, 0, r2, cr6, cr1, {1}
    93d4:	2e012020 	cdpcs	0, 0, cr2, cr1, cr0, {1}
    93d8:	20062001 	andcs	r2, r6, r1
    93dc:	06202006 	strteq	r2, [r0], -r6
    93e0:	05200620 	streq	r0, [r0, #-1568]!	; 0xfffff9e0
    93e4:	050f0601 	streq	r0, [pc, #-1537]	; 8deb <__exidx_end+0x330f>
    93e8:	02002316 	andeq	r2, r0, #1476395008	; 0x58000000
    93ec:	2e060104 	adfcss	f0, f6, f4
    93f0:	03040200 	movweq	r0, #16896	; 0x4200
    93f4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    93f8:	00200603 	eoreq	r0, r0, r3, lsl #12
    93fc:	06030402 	streq	r0, [r3], -r2, lsl #8
    9400:	00220520 	eoreq	r0, r2, r0, lsr #10
    9404:	06030402 	streq	r0, [r3], -r2, lsl #8
    9408:	001e0514 	andseq	r0, lr, r4, lsl r5
    940c:	2f030402 	svccs	0x00030402
    9410:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    9414:	051d0304 	ldreq	r0, [sp, #-772]	; 0xfffffcfc
    9418:	0402000c 	streq	r0, [r2], #-12
    941c:	16052203 	strne	r2, [r5], -r3, lsl #4
    9420:	03040200 	movweq	r0, #16896	; 0x4200
    9424:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    9428:	02002003 	andeq	r2, r0, #3
    942c:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
    9430:	03040200 	movweq	r0, #16896	; 0x4200
    9434:	00030501 	andeq	r0, r3, r1, lsl #10
    9438:	14030402 	strne	r0, [r3], #-1026	; 0xfffffbfe
    943c:	02000c05 	andeq	r0, r0, #1280	; 0x500
    9440:	01060304 	tsteq	r6, r4, lsl #6
    9444:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    9448:	23060304 	movwcs	r0, #25348	; 0x6304
    944c:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    9450:	13060304 	movwne	r0, #25348	; 0x6304
    9454:	03040200 	movweq	r0, #16896	; 0x4200
    9458:	00050201 	andeq	r0, r5, r1, lsl #4
    945c:	Address 0x000000000000945c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      24:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
      28:	7000735f 	andvc	r7, r0, pc, asr r3
      2c:	646f6d64 	strbtvs	r6, [pc], #-3428	; 34 <g_pfnVectors+0x34>
      30:	6f5f0065 	svcvs	0x005f0065
      34:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
      38:	615f7469 	cmpvs	pc, r9, ror #8
      3c:	00736772 	rsbseq	r6, r3, r2, ror r7
			i = k;
      40:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
				j->Next = k;
      44:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      48:	5f007961 	svcpl	0x00007961
}
      4c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      50:	615f6261 	cmpvs	pc, r1, ror #4
      54:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
		release;
      58:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
      5c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
			nq++;
      60:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00786564 	rsbseq	r6, r8, r4, ror #10
      68:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
      6c:	5f626d6f 	svcpl	0x00626d6f
      70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
      74:	725f0065 	subsvc	r0, pc, #101	; 0x65
      78:	72003834 	andvc	r3, r0, #52, 16	; 0x340000
      7c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      80:	00726576 	rsbseq	r6, r2, r6, ror r5
      84:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      88:	5f62616c 	svcpl	0x0062616c
      8c:	5f746567 	svcpl	0x00746567
	if (!button_still_pressed (__button_list [pbutton]))
      90:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
      94:	72006563 	andvc	r6, r0, #415236096	; 0x18c00000
      98:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	if (baction == NULL)
      9c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      a0:	47007961 	strmi	r7, [r0, -r1, ror #18]
	(*baction) (pbutton);
      a4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
endthread
      a8:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      b0:	31303220 	teqcc	r0, r0, lsr #4
endthread
      b4:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
      b8:	72282035 	eorvc	r2, r8, #53	; 0x35
      bc:	61656c65 	cmnvs	r5, r5, ror #24
      c0:	20296573 	eorcs	r6, r9, r3, ror r5
      c4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
fsm sender(struct ResponseMessage *message) {
      c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      cc:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
      d0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
}
      d4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
      d8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
      e0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
      e4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
      e8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
		packet[0] = 0;
      ec:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
		*p = message->tpe;p++;
      f4:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
      f8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
		*p = message->sender_id;p++;
     100:	6f6c666d 	svcvs	0x006c666d
		*p = message->receiver_id;p++;
     104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
		switch(message->tpe) {
     108:	733d6962 	teqvc	sp, #1605632	; 0x188000
     10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
     110:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
		tcv_endp(packet);
     114:	613d6863 	teqvs	sp, r3, ror #16
     118:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     120:	672d2067 	strvs	r2, [sp, -r7, rrx]!
}
     124:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
		finish;
     128:	20332d66 	eorscs	r2, r3, r6, ror #26
     12c:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
				*p = message->status;p++;
     130:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     134:	6177642d 	cmnvs	r7, sp, lsr #8
				strncpy(p, message->record, sizeof(message->record));
     138:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
				*p = message->padding;p++;
     13c:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
				strncpy(p, message->record, sizeof(message->record));
     140:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
				strncpy(p, message->record, sizeof(message->record));
     144:	20393963 	eorscs	r3, r9, r3, ror #18
     148:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
				strncpy(p, message->record, sizeof(message->record));
     14c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
				*p = message->record_index;p++;
     150:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
				*p = message->padding;
     154:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
				break;
     158:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     15c:	6164662d 	cmnvs	r4, sp, lsr #12
     160:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     164:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     168:	20736e6f 	rsbscs	r6, r3, pc, ror #28
		node->nnodes[i] = 0;
     16c:	6f6e662d 	svcvs	0x006e662d
     170:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     174:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     178:	61696c61 	cmnvs	r9, r1, ror #24
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
bool init_node(struct Node* node){
     180:	61662d20 	cmnvs	r6, r0, lsr #26
    node->id  = 0;                  // default id value 0
     184:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
    node->index = 0;                // default entry count 0
     188:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
    node->data_base.item_count = 0; // default no items in array
     18c:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
	reset_array(node);
     190:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
    DEBUG_PRINT("Error initializing node...\n");
     194:	5f003031 	svcpl	0x00003031
     198:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
};
     19c:	6174735f 	cmnvs	r4, pc, asr r3
     1a0:	5f5f7472 	svcpl	0x005f7472
uint8_t generate_request_num(void){
     1a4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    return (uint8_t) (rand() % 255);
     1a8:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
     1ac:	6f6f7200 	svcvs	0x006f7200
     1b0:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
}
     1b4:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
            node->nnodes[i] = 0; // set to null byte
     1b8:	5f00657a 	svcpl	0x0000657a
     1bc:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     1c0:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	5f006461 	svcpl	0x00006461
};
     1c8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	735f6261 	cmpvc	pc, #268435462	; 0x10000006
     1d0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     1d8:	5f657465 	svcpl	0x00657465
     1dc:	746f7270 	strbtvc	r7, [pc], #-624	; 1e4 <delete_record+0x18>
        node->data_base.item_count -= 1;
     1e0:	5f5f006f 	svcpl	0x005f006f
};
     1e4:	616c7473 	smcvs	51011	; 0xc743
fsm receiver(struct Node* node_db) {
     1e8:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xfffff09e
     1ec:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     1f0:	5f70756f 	svcpl	0x0070756f
     1f4:	5f006469 	svcpl	0x00006469
     1f8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1fc:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
     200:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     204:	6f665f64 	svcvs	0x00665f64
     208:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xfffff08e
     20c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	73657200 	cmnvc	r5, #0, 4
     214:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     218:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     21c:	67617373 			; <UNDEFINED> instruction: 0x67617373
		payload = (struct ResponseMessage*)(incoming_packet+1);
     220:	00305f65 	eorseq	r5, r0, r5, ror #30
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	70736572 	rsbsvc	r6, r3, r2, ror r5
     228:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     22c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     230:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	7200315f 	andvc	r3, r0, #-1073741801	; 0xc0000017
     238:	6f707365 	svcvs	0x00707365
     23c:	5f65736e 	svcpl	0x0065736e
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     244:	5f656761 	svcpl	0x00656761
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	4c5f0032 	mrrcmi	0, 3, r0, pc, cr2	; <UNPREDICTABLE>
     24c:	5f4b434f 	svcpl	0x004b434f
     250:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	56495352 			; <UNDEFINED> instruction: 0x56495352
     258:	00545f45 	subseq	r5, r4, r5, asr #30
		switch (tpe){
     25c:	70736572 	rsbsvc	r6, r3, r2, ror r5
     260:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     264:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     268:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     26c:	7200345f 	andvc	r3, r0, #1593835520	; 0x5f000000
     270:	6f707365 	svcvs	0x00707365
     274:	5f65736e 	svcpl	0x0065736e
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     27c:	5f656761 	svcpl	0x00656761
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	73750035 	cmnvc	r5, #53	; 0x35
     284:	705f7265 	subsvc	r7, pc, r5, ror #4
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     28c:	5f646564 	svcpl	0x00646564
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     294:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	0064695f 	rsbeq	r6, r4, pc, asr r9
     29c:	646f6e6e 	strbtvs	r6, [pc], #-3694	; 2a4 <receiver+0xbc>
				if (discovery_request_message->gid == node_db->gid){
     2a0:	5f007365 	svcpl	0x00007365
     2a4:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
					response_message_0->gid = discovery_request_message->gid;
     2a8:	735f6e65 	cmpvc	pc, #1616	; 0x650
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	73694400 	cmnvc	r9, #0, 8
					response_message_0->sender_id = node_db->id;
     2b4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0xfffff68e
					call sender(response_message_0, done_case);
     2bc:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     2c0:	654d6573 	strbvs	r6, [sp, #-1395]	; 0xfffffa8d
     2c4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     2c8:	5f5f0065 	svcpl	0x005f0065
     2cc:	616c7473 	smcvs	51011	; 0xc743
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xfffff09e
     2d4:	6f6e5f77 	svcvs	0x006e5f77
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2d8:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     2dc:	73660064 	cmnvc	r6, #100	; 0x64
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	6b6c6274 	blvs	1b18cb8 <__ccfg+0x1af8d10>
     2e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	6c6f5f69 	stclvs	15, cr5, [pc], #-420	; 14c <_Min_Stack_Size+0x4c>
     2ec:	735f0064 	cmpvc	pc, #100	; 0x64
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	756f6474 	strbvc	r6, [pc, #-1140]!	; fffffe84 <_estack+0xdfffae84>
     2f4:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	5f736f70 	svcpl	0x00736f70
     2fc:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     300:	5f00736e 	svcpl	0x0000736e
     304:	6b6f6f63 	blvs	1bdc098 <__ccfg+0x1bbc0f0>
     308:	74006569 	strvc	r6, [r0], #-1385	; 0xfffffa97
     30c:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     310:	006f666e 	rsbeq	r6, pc, lr, ror #12
     314:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	745f7461 	ldrbvc	r7, [pc], #-1121	; 320 <receiver+0x138>
     31c:	625f5f00 	subsvs	r5, pc, #0, 30
					node_db->index+=1;
     320:	655f7373 	ldrbvs	r7, [pc, #-883]	; ffffffb5 <_estack+0xdfffafb5>
		tcv_endp(incoming_packet);
     324:	5f5f646e 	svcpl	0x005f646e
     328:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
		proceed receiving;
     32c:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
     330:	48544f00 	ldmdami	r4, {r8, r9, sl, fp, lr}^
		ser_out(response_1_create, "\r\nData Saved");
     334:	455f5245 	ldrbmi	r5, [pc, #-581]	; f7 <sender+0x2f>
     338:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
		proceed receiving;
     33c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 344 <receiver+0x15c>
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
     344:	62007961 	andvs	r7, r0, #1589248	; 0x184000
		proceed receiving;
     348:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     34c:	6165725f 	cmnvs	r5, pc, asr r2
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     350:	725f0064 	subsvc	r0, pc, #100	; 0x64
     354:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     358:	5f5f0074 	svcpl	0x005f0074
     35c:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		proceed receiving;
     360:	0072756f 	rsbseq	r7, r2, pc, ror #10
     364:	5f57454e 	svcpl	0x0057454e
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     368:	45444f4e 	strbmi	r4, [r4, #-3918]	; 0xfffff0b2
     36c:	0044495f 	subeq	r4, r4, pc, asr r9
     370:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
		proceed receiving;
     374:	0079706f 	rsbseq	r7, r9, pc, rrx
     378:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     37c:	5f62616c 	svcpl	0x0062616c
     380:	5f746567 	svcpl	0x00746567
     384:	5f77656e 	svcpl	0x0077656e
		proceed receiving;
     388:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     38c:	0064695f 	rsbeq	r6, r4, pc, asr r9
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     390:	6f635f5f 	svcvs	0x00635f5f
     394:	00746e75 	rsbseq	r6, r4, r5, ror lr
     398:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
		proceed receiving;
     39c:	0064695f 	rsbeq	r6, r4, pc, asr r9
     3a0:	6b636170 	blvs	18d8968 <__ccfg+0x18b89c0>
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a4:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
		proceed receiving;
     3a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
     3ac:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
}
     3b0:	5f747570 	svcpl	0x00747570
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
     3b8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 3c0 <receiver+0x1d8>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     3c0:	6e5f006e 	cdpvs	0, 5, cr0, cr15, cr14, {3}
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
     3c8:	73657200 	cmnvc	r5, #0, 4
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     3d0:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     3d8:	00335f65 	eorseq	r5, r3, r5, ror #30
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
     3e0:	00383464 	eorseq	r3, r8, r4, ror #8
     3e4:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e8:	725f7472 	subsvc	r7, pc, #1912602624	; 0x72000000
     3ec:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     3f0:	5f5f0064 	svcpl	0x005f0064
		strncpy(response_message->record, rec, 20);
     3f4:	616c7473 	smcvs	51011	; 0xc743
     3f8:	72635f62 	rsbvc	r5, r3, #392	; 0x188
     3fc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
					call sender(response_message_4, done_case);
     400:	6f72705f 	svcvs	0x0072705f
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     404:	735f6f74 	cmpvc	pc, #116, 30	; 0x1d0
     408:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     40c:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     410:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	5f006b5f 	svcpl	0x00006b5f
     418:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
     420:	6c006675 	stcvs	6, cr6, [r0], {117}	; 0x75
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     424:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     428:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     42c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     430:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     434:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     438:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43c:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     440:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
    return node->data_base.item_array[index];
     444:	6e006675 	mcrvs	6, 0, r6, cr0, cr5, {3}
     448:	5f65646f 	svcpl	0x0065646f
     44c:	5f006264 	svcpl	0x00006264
     450:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     454:	5f00454c 	svcpl	0x0000454c
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	00736477 	rsbseq	r6, r3, r7, ror r4
    return node->data_base.item_array[index];
     45c:	73616572 	cmnvc	r1, #478150656	; 0x1c800000
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     464:	0065646f 	rsbeq	r6, r5, pc, ror #8
     468:	465f4244 	ldrbmi	r4, [pc], -r4, asr #4
		strncpy(response_message->record, rec, 20);
     46c:	004c4c55 	subeq	r4, ip, r5, asr ip
     470:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     474:	7300454c 	movwvc	r4, #1356	; 0x54c
     478:	6e5f7465 	cdpvs	4, 5, cr7, cr15, cr5, {3}
     47c:	5f65646f 	svcpl	0x0065646f
     480:	5f006469 	svcpl	0x00006469
     484:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     488:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     48c:	5f726573 	svcpl	0x00726573
     490:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     494:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
     498:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     49c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     4a0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     4a4:	5f62616c 	svcpl	0x0062616c
     4a8:	70736964 	rsbsvc	r6, r3, r4, ror #18
     4ac:	5f79616c 	svcpl	0x0079616c
     4b0:	74006264 	strvc	r6, [r0], #-612	; 0xfffffd9c
     4b4:	6f5f7663 	svcvs	0x005f7663
     4b8:	75006570 	strvc	r6, [r0, #-1392]	; 0xfffffa90
     4bc:	5f726573 	svcpl	0x00726573
     4c0:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     4c4:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
     4c8:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     4cc:	5f007865 	svcpl	0x00007865
     4d0:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
     4d4:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
     4d8:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
     4dc:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     4e0:	0064695f 	rsbeq	r6, r4, pc, asr r9
     4e4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	5f62616c 	svcpl	0x0062616c
     4ec:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     4f0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	6f72705f 	svcvs	0x0072705f
     4f8:	5f006f74 	svcpl	0x00006f74
     4fc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     500:	635f6261 	cmpvs	pc, #268435462	; 0x10000006
				if(!response_flag){
     504:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     508:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
					response_flag=1;
     50c:	6f626867 	svcvs	0x00626867
					trigger(&response_flag);
     510:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
				switch(response_message_5->status){
     514:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     518:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
     51c:	5f63756e 	svcpl	0x0063756e
     520:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
     524:	00747369 	rsbseq	r7, r4, r9, ror #6
						if (response_checker[0] == response_message_5->request_number){
     528:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     52c:	756f635f 	strbvc	r6, [pc, #-863]!	; 1d5 <delete_record+0x9>
     530:	5f00746e 	svcpl	0x0000746e
							switch(response_checker[1]){
     534:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     538:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
     53c:	6f707365 	svcvs	0x00707365
     540:	5f65736e 	svcpl	0x0065736e
						proceed response_2;
     544:	65645f31 	strbvs	r5, [r4, #-3889]!	; 0xfffff0cf
						break;
     548:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
									proceed response_1_delete;
     54c:	79617000 	stmdbvc	r1!, {ip, sp, lr}^
									proceed response_1_retrieve;
     550:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
						proceed response_2;
     554:	735f5f00 	cmpvc	pc, #0, 30
						proceed response_3;
     558:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
						proceed response_4;
     55c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	5f64695f 	svcpl	0x0064695f
				break;
     564:	5f726f66 	svcpl	0x00726f66
}
     568:	61657263 	cmnvs	r5, r3, ror #4
     56c:	5f006574 	svcpl	0x00006574
     570:	5f6d745f 	svcpl	0x006d745f
     574:	00636573 	rsbeq	r6, r3, r3, ror r5
     578:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
bool delete_all(struct Node *node){
     57c:	6164795f 	cmnvs	r4, pc, asr r9
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	695f0079 	ldmdbvs	pc, {r0, r3, r4, r5, r6}^	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	5f00636e 	svcpl	0x0000636e
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	00646e69 	rsbeq	r6, r4, r9, ror #28
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
            node->data_base.item_array[i].timestamp = 0;
     590:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	7165725f 	cmnvc	r5, pc, asr r2
    node->data_base.item_count = 0;
     598:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
}
     59c:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
        return true;
     5a0:	735f5f00 	cmpvc	pc, #0, 30
fsm root {
     5a4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     5a8:	6174735f 	cmnvs	r4, pc, asr r3
     5ac:	725f7472 	subsvc	r7, pc, #1912602624	; 0x72000000
     5b0:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5b4:	5f657665 	svcpl	0x00657665
     5b8:	746f7270 	strbtvc	r7, [pc], #-624	; 5c0 <root+0x1c>
     5bc:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 408 <receiver+0x220>
     5c0:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
     5c4:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
     5c8:	6174735f 	cmnvs	r4, pc, asr r3
     5cc:	65006574 	strvs	r6, [r0, #-1396]	; 0xfffffa8c
     5d0:	00656764 	rsbeq	r6, r5, r4, ror #14
     5d4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     5d8:	5f62616c 	svcpl	0x0062616c
     5dc:	74006b6f 	strvc	r6, [r0], #-2927	; 0xfffff491
     5e0:	73656d69 	cmnvc	r5, #6720	; 0x1a40
     5e4:	706d6174 	rsbvc	r6, sp, r4, ror r1
     5e8:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     5ec:	6e5f7261 	cdpvs	2, 5, cr7, cr15, cr1, {3}
     5f0:	5f65646f 	svcpl	0x0065646f
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f4:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     5f8:	756f6268 	strbvc	r6, [pc, #-616]!	; 398 <receiver+0x1b0>
     5fc:	72615f72 	rsbvc	r5, r1, #456	; 0x1c8
		init_node(node_db);
     600:	00796172 	rsbseq	r6, r9, r2, ror r1
		phys_cc1350(0, MAX_PKT_LEN);
     604:	61765f5f 	cmnvs	r6, pc, asr pc
     608:	0065756c 	rsbeq	r7, r5, ip, ror #10
		tcv_plug (0, &plug_null);
     60c:	7335705f 	teqvc	r5, #95	; 0x5f
     610:	625f5f00 	subsvs	r5, pc, #0, 30
		sfd = tcv_open (WNONE, 0, 0);
     614:	6f747475 	svcvs	0x00747475
     618:	696c5f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     61c:	4d007473 	cfstrsmi	mvf7, [r0, #-460]	; 0xfffffe34
     620:	61737365 	cmnvs	r3, r5, ror #6
     624:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
			diag("Cannot open tcv interface");
     628:	5f006570 	svcpl	0x00006570
     62c:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
			halt();
     630:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
		tcv_control(sfd, PHYSOPT_ON, NULL);
     634:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     638:	00657461 	rsbeq	r7, r5, r1, ror #8
		runfsm receiver(node_db);
     63c:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
     640:	735f6e65 	cmpvc	pc, #1616	; 0x650
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     648:	6f776100 	svcvs	0x00776100
     64c:	65006472 	strvs	r6, [r0, #-1138]	; 0xfffffb8e
     650:	70746e76 	rsbsvc	r6, r4, r6, ror lr
     654:	5553006e 	ldrbpl	r0, [r3, #-110]	; 0xffffff92
     658:	53454343 	movtpl	r4, #21315	; 0x5343
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	656c0053 	strbvs	r0, [ip, #-83]!	; 0xffffffad
     660:	636c6264 	cmnvs	ip, #100, 4	; 0x40000006
     664:	735f5f00 	cmpvc	pc, #0, 30
		switch(CHOICE) {
     668:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     66c:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     670:	69766965 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     674:	5f00676e 	svcpl	0x0000676e
     678:	5f6d745f 	svcpl	0x006d745f
     67c:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     680:	735f5f00 	cmpvc	pc, #0, 30
     684:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     688:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     68c:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     690:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     694:	00797265 	rsbseq	r7, r9, r5, ror #4
				proceed menu;
     698:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     69c:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	6d5f0063 	ldclvs	0, cr0, [pc, #-396]	; 51c <receiver+0x334>
     6a4:	6f747262 	svcvs	0x00747262
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     6ac:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     6b0:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
		DEBUG_PRINT("setting node group ID");
     6b4:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	656c0030 	strbvs	r0, [ip, #-48]!	; 0xffffffd0
    node->gid = gid; 
     6bc:	6b6c6264 	blvs	1b19054 <__ccfg+0x1af90ac>
		proceed menu;
     6c0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     6c4:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6cc:	735f5f00 	cmpvc	pc, #0, 30
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     6d8:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	5f315f65 	svcpl	0x00315f65
     6e0:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     6e8:	73657200 	cmnvc	r5, #0, 4
     6ec:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
			strncpy(reason, "Out of Range", 50);
     6f0:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     6f4:	656b6365 	strbvs	r6, [fp, #-869]!	; 0xfffffc9b
			proceed invalid_node_id;
     6f8:	69440072 	stmdbvs	r4, {r1, r4, r5, r6}^
     6fc:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
				strncpy(reason, "ID is already in use", 50);
     700:	52797265 	rsbspl	r7, r9, #1342177286	; 0x50000006
		for(int i = 0; i < node_db->index; i++){
     704:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     708:	654d7473 	strbvs	r7, [sp, #-1139]	; 0xfffffb8d
     70c:	67617373 			; <UNDEFINED> instruction: 0x67617373
		proceed menu;
     710:	5f5f0065 	svcpl	0x005f0065
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 63c <root+0x98>	; <UNPREDICTABLE>
     718:	6b746e69 	blvs	1d1c0c4 <__ccfg+0x1cfc11c>
     71c:	735f5f00 	cmpvc	pc, #0, 30
     720:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		proceed get_new_node_id;
     724:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     728:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
		if (!clear_node_neighbour_array(node_db)){
     72c:	6c665f00 	stclvs	15, cr5, [r6], #-0
     730:	5f6b636f 	svcpl	0x006b636f
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	5f5f0074 	svcpl	0x005f0074
     738:	616c7473 	smcvs	51011	; 0xc743
     73c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
			proceed error;
     740:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     744:	325f6573 	subscc	r6, pc, #482344960	; 0x1cc00000
     748:	735f5f00 	cmpvc	pc, #0, 30
		request_packet->gid = node_db->gid;
     74c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     750:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
		request_packet->request_number = generate_request_num();
     758:	00335f65 	eorseq	r5, r3, r5, ror #30
     75c:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		call sender(request_packet, wait_discovery);
     760:	5f62616c 	svcpl	0x0062616c
     764:	70736572 	rsbsvc	r6, r3, r2, ror r5
		request_packet->receiver_id=0;
     768:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
		call sender(request_packet, wait_discovery);
     76c:	5f00345f 	svcpl	0x0000345f
     770:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     774:	6f695f00 	svcvs	0x00695f00
			release;
     778:	73007362 	movwvc	r7, #866	; 0x362
				proceed get_new_node_id;
     77c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
				proceed clear_neighbour_array;
     780:	61640073 	smcvs	16387	; 0x4003
				proceed create_proto_start;
     784:	655f6174 	ldrbvs	r6, [pc, #-372]	; 618 <root+0x74>
				proceed start_delete_proto;
     788:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
				proceed retrieve_proto;
     78c:	735f5f00 	cmpvc	pc, #0, 30
				proceed display_db;
     790:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
				proceed del_local;
     794:	0074696e 	rsbseq	r6, r4, lr, ror #18
			if(node_db->id == node_db->nnodes[i]){
     798:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     79c:	5f62616c 	svcpl	0x0062616c
     7a0:	61766e69 	cmnvs	r6, r9, ror #28
				strncpy(reason, "ID is already in use", 50);
     7a4:	5f64696c 	svcpl	0x0064696c
     7a8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
				proceed invalid_node_id;
     7ac:	0064695f 	rsbeq	r6, r4, pc, asr r9
     7b0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		for(int i = 0; i < node_db->index; i++){
     7b4:	5f62616c 	svcpl	0x0062616c
		if (discovery_wait_flag == 0){
     7b8:	5f746567 	svcpl	0x00746567
			discovery_wait_flag=1;
     7bc:	6f636572 	svcvs	0x00636572
     7c0:	745f6472 	ldrbvc	r6, [pc], #-1138	; 7c8 <root+0x224>
			delay(3000, find_proto_start);
     7c4:	72635f6f 	rsbvc	r5, r3, #444	; 0x1bc
     7c8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
		if (discovery_wait_flag == 1){
     7cc:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
			discovery_wait_flag=0;
     7d0:	76696572 			; <UNDEFINED> instruction: 0x76696572
     7d4:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
			delay(3000, display_neighbour_nodes);
     7d8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     7dc:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     7e0:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     7e4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     7e8:	006e6964 	rsbeq	r6, lr, r4, ror #18
     7ec:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
     7f0:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
     7f4:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
     7f8:	6c006d61 	stcvs	13, cr6, [r0], {97}	; 0x61
     7fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     800:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     804:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     808:	735f5f00 	cmpvc	pc, #0, 30
     80c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     810:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     814:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     818:	6f72675f 	svcvs	0x0072675f
     81c:	695f7075 	ldmdbvs	pc, {r0, r2, r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     820:	665f0064 	ldrbvs	r0, [pc], -r4, rrx
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
     828:	00747369 	rsbseq	r7, r4, r9, ror #6
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	00676e69 	rsbeq	r6, r7, r9, ror #28
			if (node_db->nnodes[i] == 0) break;
     834:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
     838:	544b0074 	strbpl	r0, [fp], #-116	; 0xffffff8c
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	612f504d 			; <UNDEFINED> instruction: 0x612f504d
     840:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     844:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff94c <_estack+0xdfffa94c>
     848:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	63775f00 	cmnvs	r7, #0, 30
		ser_out(display_neighbour_nodes, "\r\n");
     850:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 690 <root+0xec>
     854:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
		proceed menu;
     858:	00657461 	rsbeq	r7, r5, r1, ror #8
     85c:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     864:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	665f6573 			; <UNDEFINED> instruction: 0x665f6573
     86c:	0067616c 	rsbeq	r6, r7, ip, ror #2
     870:	70615f5f 	rsbvc	r5, r1, pc, asr pc
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	735f5f00 	cmpvc	pc, #0, 30
     878:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			strncpy(reason, "Error: improper ID", 50);
     87c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     880:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
			proceed error;
     884:	5f006c61 	svcpl	0x00006c61
     888:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     890:	735f5f00 	cmpvc	pc, #0, 30
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     898:	6f6f6c5f 	svcvs	0x006f6c5f
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	68745f70 	ldmdavs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a0:	67756f72 			; <UNDEFINED> instruction: 0x67756f72
     8a4:	61645f68 	cmnvs	r4, r8, ror #30
		create_message->gid = node_db->gid;
     8a8:	44006174 	strmi	r6, [r0], #-372	; 0xfffffe8c
		create_message->tpe = 2;
     8ac:	54454c45 	strbpl	r4, [r5], #-3141	; 0xfffff3bb
		create_message->request_number = generate_request_num();
     8b0:	52455f45 	subpl	r5, r5, #276	; 0x114
     8b4:	00524f52 	subseq	r4, r2, r2, asr pc
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     8bc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	6e00745f 	cfmvsrvs	mvf0, r7
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	6568635f 	strbvs	r6, [r8, #-863]!	; 0xfffffca1
		response_checker[0] = create_message->request_number;
     8d0:	73006b63 	movwvc	r6, #2915	; 0xb63
     8d4:	6e5f7465 	cdpvs	4, 5, cr7, cr15, cr5, {3}
		call sender(create_message, wait);
     8d8:	5f65646f 	svcpl	0x0065646f
     8dc:	00646967 	rsbeq	r6, r4, r7, ror #18
     8e0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     8e4:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffffb87 <_estack+0xdfffab87>
     8e8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	756f635f 	strbvc	r6, [pc, #-863]!	; 595 <delete_all+0x19>
     8f0:	5f00746e 	svcpl	0x0000746e
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	5f6d745f 	svcpl	0x006d745f
     8f8:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     8fc:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	6d647071 	stclvs	0, cr7, [r4, #-452]!	; 0xfffffe3c
     904:	5f685f00 	svcpl	0x00685f00
			strncpy(reason, "Error: improper node ID", 50);
     908:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
     90c:	6374006f 	cmnvs	r4, #111	; 0x6f
     910:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
			proceed error;
     914:	6e6f006f 	cdpvs	0, 6, cr0, cr15, cr15, {3}
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	736e6d64 	cmnvc	lr, #100, 26	; 0x1900
     91c:	756e7000 	strbvc	r7, [lr, #-0]!
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	5f5f006d 	svcpl	0x005f006d
     924:	616c7473 	smcvs	51011	; 0xc743
     928:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xfffff09e
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	7200756e 	andvc	r7, r0, #461373440	; 0x1b800000
     930:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
			strncpy(reason, "Error: invalid index", 50);
     934:	64657665 	strbtvs	r7, [r5], #-1637	; 0xfffff99b
     938:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
			proceed error;
     93c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     940:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     944:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
		delete_record->tpe = DELETE_RECORD;
     948:	4f410074 	svcmi	0x00410074
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
		delete_record->gid = node_db->gid;
     950:	47636553 			; <UNDEFINED> instruction: 0x47636553
		delete_record->tpe = DELETE_RECORD;
     954:	5f007465 	svcpl	0x00007465
		delete_record->request_number = generate_request_num();
     958:	5f6d745f 	svcpl	0x006d745f
     95c:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
		delete_record->sender_id = node_db->id;
     960:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     964:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     968:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
		call sender(&delete_record, wait);
     96c:	735f5f00 	cmpvc	pc, #0, 30
		delete_record->receiver_id = user_provided_receiver_id;
     970:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		delete_record->record_index = user_provided_index;
     974:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
		response_checker[0] = delete_record->request_number;
     978:	72705f64 	rsbsvc	r5, r0, #100, 30	; 0x190
		response_checker[1] = delete_record->tpe;
     97c:	5f6f746f 	svcpl	0x006f746f
     980:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
		call sender(&delete_record, wait);
     984:	45520074 	ldrbmi	r0, [r2, #-116]	; 0xffffff8c
     988:	45495254 	strbmi	r5, [r9, #-596]	; 0xfffffdac
     98c:	525f4556 	subspl	r4, pc, #360710144	; 0x15800000
     990:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     994:	69640044 	stmdbvs	r4!, {r2, r6}^
     998:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	5f797265 	svcpl	0x00797265
     9a0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     9a4:	616c665f 	cmnvs	ip, pc, asr r6
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	5f5f0067 	svcpl	0x005f0067
     9ac:	616c7473 	smcvs	51011	; 0xc743
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     9b4:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
			proceed error;
     9b8:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     9bc:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c0:	76656972 			; <UNDEFINED> instruction: 0x76656972
     9c4:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
     9cc:	5f595245 	svcpl	0x00595245
     9d0:	50534552 	subspl	r4, r3, r2, asr r5
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	45534e4f 	ldrbmi	r4, [r3, #-3663]	; 0xfffff1b1
			strncpy(reason, "Error: invalid index", 50);
     9d8:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     9dc:	76656972 			; <UNDEFINED> instruction: 0x76656972
     9e0:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
			proceed error;
     9e4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     9ec:	65685f69 	strbvs	r5, [r8, #-3945]!	; 0xfffff097
		retrieve_record->gid = node_db->gid;
     9f0:	6e655f78 	mcrvs	15, 3, r5, cr5, cr8, {3}
     9f4:	61745f63 	cmnvs	r4, r3, ror #30
     9f8:	00656c62 	rsbeq	r6, r5, r2, ror #24
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		retrieve_record->request_number = generate_request_num();
     a00:	5f62616c 	svcpl	0x0062616c
     a04:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
		retrieve_record->sender_id = node_db->id;
     a08:	00676e69 	rsbeq	r6, r7, r9, ror #28
		response_checker[0] = retrieve_record->request_number;
     a0c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
     a14:	745f746e 	ldrbvc	r7, [pc], #-1134	; a1c <root+0x478>
		retrieve_record->record_index = user_provided_index;
     a18:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     a1c:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
		response_checker[0] = retrieve_record->request_number;
     a20:	626d5f00 	rsbvs	r5, sp, #0, 30
		call sender(&retrieve_record, wait);
     a24:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     a28:	5f5f0065 	svcpl	0x005f0065
     a2c:	616c7473 	smcvs	51011	; 0xc743
     a30:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     a34:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	5f786564 	svcpl	0x00786564
     a3c:	5f726f66 	svcpl	0x00726f66
		if(node_db->data_base.item_count != 0){
     a40:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     a44:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     a48:	735f5f00 	cmpvc	pc, #0, 30
		ser_out(loop_through_data, "\r\n");
     a4c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a50:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
		proceed menu;
     a54:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
		delete_all(node_db);
     a58:	665f7865 	ldrbvs	r7, [pc], -r5, ror #16
     a5c:	645f726f 	ldrbvs	r7, [pc], #-623	; a64 <root+0x4c0>
		proceed menu;
     a60:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     a64:	63740065 	cmnvs	r4, #101	; 0x65
		delay(3000, timeout);
     a68:	6d785f76 	ldclvs	15, cr5, [r8, #-472]!	; 0xfffffe28
     a6c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
		when(&response_flag, menu);
     a70:	2074726f 	rsbscs	r7, r4, pc, ror #4
     a74:	00746e69 	rsbseq	r6, r4, r9, ror #28
		release;
     a78:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	5f62616c 	svcpl	0x0062616c
     a80:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     a84:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     a88:	5f657461 	svcpl	0x00657461
     a8c:	6f636572 	svcvs	0x00636572
     a90:	6d5f6472 	cfldrdvs	mvd6, [pc, #-456]	; 8d0 <root+0x32c>
     a94:	61737365 	cmnvs	r3, r5, ror #6
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	73006567 	movwvc	r6, #1383	; 0x567
     a9c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     aa0:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
     aa4:	73747364 	cmnvc	r4, #100, 6	; 0x90000001
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa8:	735f5f00 	cmpvc	pc, #0, 30
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	69700066 	ldmdbvs	r0!, {r1, r2, r5, r6}^
     ab0:	646f696e 	strbtvs	r6, [pc], #-2414	; ab8 <root+0x514>
		proceed menu;
     ab4:	5f00745f 	svcpl	0x0000745f
     ab8:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	675f0062 	ldrbvs	r0, [pc, -r2, rrx]
     ac0:	61626f6c 	cmnvs	r2, ip, ror #30
		proceed menu;
     ac4:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
     ac8:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
}
     acc:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
     ad0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ad8 <root+0x534>
     ad4:	65795f6d 	ldrbvs	r5, [r9, #-3949]!	; 0xfffff093
     ad8:	61007261 	tstvs	r0, r1, ror #4
     adc:	6d657373 	stclvs	3, cr7, [r5, #-460]!	; 0xfffffe34
     ae0:	5f656c62 	svcpl	0x00656c62
     ae4:	70736572 	rsbsvc	r6, r3, r2, ror r5
     ae8:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     aec:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     af0:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     af4:	735f5f00 	cmpvc	pc, #0, 30
     af8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     afc:	6b73615f 	blvs	1cd9080 <__ccfg+0x1cb90d8>
     b00:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     b04:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     b08:	5f64726f 	svcpl	0x0064726f
     b0c:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     b10:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     b14:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     b18:	52007865 	andpl	r7, r0, #6619136	; 0x650000
     b1c:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
     b20:	5f455645 	svcpl	0x00455645
     b24:	4f525245 	svcmi	0x00525245
     b28:	5f5f0052 	svcpl	0x005f0052
static void devinit_uart (int devnum) {
     b2c:	616c7473 	smcvs	51011	; 0xc743
	adddevfunc (ioreq_uart_a, devnum);
     b30:	72655f62 	rsbvc	r5, r5, #392	; 0x188
     b34:	00726f72 	rsbseq	r6, r2, r2, ror pc
void udelay (volatile word n) {
     b38:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
     b3c:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
	while (n) {
     b40:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
     b44:	6c5f0044 	mrrcvs	0, 4, r0, pc, cr4	; <UNPREDICTABLE>
}
     b48:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
	while (n--);
     b4c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     b50:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     b54:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
		n--;
     b58:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     b5c:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     b60:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
void mdelay (volatile word n) {
     b64:	616d5f00 	cmnvs	sp, r0, lsl #30
     b68:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
	while (n) {
     b6c:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     b70:	625f6134 	subsvs	r6, pc, #52, 2
}
     b74:	5f006675 	svcpl	0x00006675
		udelay (999);
     b78:	736b6c62 	cmnvc	fp, #25088	; 0x6200
     b7c:	00657a69 	rsbeq	r7, r5, r9, ror #20
		n--;
     b80:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     b84:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     b88:	5f657465 	svcpl	0x00657465
     b8c:	6f636572 	svcvs	0x00636572
void __pi_ondomain (lword d) {
     b90:	5f006472 	svcpl	0x00006472
     b94:	5f61765f 	svcpl	0x0061765f
		if (__pi_systat.effpdm > 1)
     b98:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     b9c:	6f6c5f00 	svcvs	0x006c5f00
			__pi_systat.effpdm = 1;
     ba0:	43006b63 	movwmi	r6, #2915	; 0xb63
	PRCMPowerDomainOn (d);
     ba4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     ba8:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     bac:	4d64726f 	sfmmi	f7, 2, [r4, #-444]!	; 0xfffffe44
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb0:	61737365 	cmnvs	r3, r5, ror #6
     bb4:	61006567 	tstvs	r0, r7, ror #10
     bb8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
	__pi_systat.ondmns |= d;
     bbc:	5f007373 	svcpl	0x00007373
     bc0:	5f69705f 	svcpl	0x0069705f
}
     bc4:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     bc8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
void __pi_offdomain (lword d) {
     bcc:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
     bd0:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
	PRCMPowerDomainOff (d);
     bd4:	0073626f 	rsbseq	r6, r3, pc, ror #4
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
     bdc:	5f00745f 	svcpl	0x0000745f
     be0:	5f69705f 	svcpl	0x0069705f
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	5f626370 	svcpl	0x00626370
     be8:	69540074 	ldmdbvs	r4, {r2, r4, r5, r6}^
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	0072656d 	rsbseq	r6, r2, sp, ror #10
     bf0:	43534944 	cmpmi	r3, #68, 18	; 0x110000
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf4:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     bf8:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
	__pi_systat.ondmns &= ~d;
     bfc:	53455551 	movtpl	r5, #21841	; 0x5551
     c00:	5f5f0054 	svcpl	0x005f0054
}
     c04:	616c7473 	smcvs	51011	; 0xc743
     c08:	4f435f62 	svcmi	0x00435f62
void __pi_syserror (word ec, const char *m) {
     c0c:	5249464e 	subpl	r4, r9, #81788928	; 0x4e00000
	diag ("SYSERR: %x, %s", ec, m);
     c10:	656d5f4d 	strbvs	r5, [sp, #-3917]!	; 0xfffff0b3
     c14:	67617373 			; <UNDEFINED> instruction: 0x67617373
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	645f0065 	ldrbvs	r0, [pc], #-101	; c20 <__pi_syserror+0x14>
     c1c:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     c20:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     c24:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
		all_leds_blink;
     c28:	696d6f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
     c2c:	705f676e 	subsvc	r6, pc, lr, ror #14
     c30:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
     c34:	5f5f0074 	svcpl	0x005f0074
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     c3c:	5f5f0074 	svcpl	0x005f0074
     c40:	616c7473 	smcvs	51011	; 0xc743
     c44:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     c48:	61697469 	cmnvs	r9, r9, ror #8
     c4c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
	while (1) {
     c50:	646f6e5f 	strbtvs	r6, [pc], #-3679	; c58 <__pi_syserror+0x4c>
     c54:	635f0065 	cmpvs	pc, #101	; 0x65
     c58:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
     c5c:	6e750066 	cdpvs	0, 7, cr0, cr5, cr6, {3}
void tci_run_delay_timer () {
     c60:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	setdel = __pi_mintk - __pi_old;
     c64:	63206465 			; <UNDEFINED> instruction: 0x63206465
     c68:	00726168 	rsbseq	r6, r2, r8, ror #2
     c6c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c70:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c74:	6d736600 	ldclvs	6, cr6, [r3, #-0]
     c78:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     c7c:	57454e00 	strbpl	r4, [r5, -r0, lsl #28]
     c80:	444f4e5f 	strbmi	r4, [pc], #-3679	; c88 <tci_run_delay_timer+0x28>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	49475f45 	stmdbmi	r7, {r0, r2, r6, r8, r9, sl, fp, ip, lr}^
	sti_tim;
     c88:	5f5f0044 	svcpl	0x005f0044
}
     c8c:	00424350 	subeq	r4, r2, r0, asr r3
     c90:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     c94:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     c98:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     c9c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	cli_aux;
     ca0:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
     ca4:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	425f006c 	subsmi	r0, pc, #108	; 0x6c
     cac:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     cb0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     cb4:	646f6e5f 	strbtvs	r6, [pc], #-3679	; cbc <tci_run_auxiliary_timer+0x1c>
	sti_aux;
     cb8:	5f5f0065 	svcpl	0x005f0065
}
     cbc:	66756273 			; <UNDEFINED> instruction: 0x66756273
     cc0:	72617500 	rsbvc	r7, r1, #0, 10
     cc4:	00745f74 	rsbseq	r5, r4, r4, ror pc
void AONRTCIntHandler () {
     cc8:	61746164 	cmnvs	r4, r4, ror #2
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     ccc:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
     cd0:	675f0065 	ldrbvs	r0, [pc, -r5, rrx]
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	0065756c 	rsbeq	r7, r5, ip, ror #10
		if (__pi_utims [0] == 0)
     cd8:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
     cdc:	0065756c 	rsbeq	r7, r5, ip, ror #10
		if (*(__pi_utims [0])) {
     ce0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     ce4:	5f6b6f74 	svcpl	0x006b6f74
			(*(__pi_utims [0]))--;
     ce8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
		if (__pi_utims [1] == 0)
     cec:	626d5f00 	rsbvs	r5, sp, #0, 30
		if (*(__pi_utims [1])) {
     cf0:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
			aux_timer_inactive = 0;
     cf4:	6174735f 	cmnvs	r4, pc, asr r3
			(*(__pi_utims [1]))--;
     cf8:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
		if (__pi_utims [2] == 0)
     cfc:	6f637369 	svcvs	0x00637369
		if (*(__pi_utims [2])) {
     d00:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
			(*(__pi_utims [2]))--;
     d04:	7165725f 	cmnvc	r5, pc, asr r2
		if (__pi_utims [3] != 0) {
     d08:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
			if (*(__pi_utims [3])) {
     d0c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
				aux_timer_inactive = 0;
     d10:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
				(*(__pi_utims [3]))--;
     d14:	735f5f00 	cmpvc	pc, #0, 30
	if (__pi_systat.ledsts) {
     d18:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     d1c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		if (__pi_systat.ledblc++ == 0) {
     d20:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     d24:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
			if (__pi_systat.ledblk) {
     d28:	63740073 	cmnvs	r4, #115	; 0x73
     d2c:	756c7076 	strbvc	r7, [ip, #-118]!	; 0xffffff8a
     d30:	00745f67 	rsbseq	r5, r4, r7, ror #30
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     d38:	5f62616c 	svcpl	0x0062616c
				if (__pi_systat.ledsts & 0x2)
     d3c:	70736964 	rsbsvc	r6, r3, r4, ror #18
     d40:	5f79616c 	svcpl	0x0079616c
     d44:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
				if (__pi_systat.ledsts & 0x4)
     d48:	756f6268 	strbvc	r6, [pc, #-616]!	; ae8 <root+0x544>
				__pi_systat.ledblk = 0;
     d4c:	6f6e5f72 	svcvs	0x006e5f72
     d50:	00736564 	rsbseq	r6, r3, r4, ror #10
			if (__pi_systat.fstblk)
     d54:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
     d58:	7300746e 	movwvc	r7, #1134	; 0x46e
				__pi_systat.ledblc = 200;
     d5c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
		cli_tim;
     d64:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
		__pi_new += setdel;
     d68:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d6c:	63740074 	cmnvs	r4, #116	; 0x74
		setdel = 0;
     d70:	70646176 	rsbvc	r6, r4, r6, ror r1
		RISE_N_SHINE;
     d74:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
		__pi_new += setdel;
     d78:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
		RISE_N_SHINE;
     d7c:	6e5f7473 	mrcvs	4, 2, r7, cr15, cr3, {3}
     d80:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
		aux_timer_inactive = 1;
     d84:	5f5f0072 	svcpl	0x005f0072
     d88:	616c7473 	smcvs	51011	; 0xc743
				if (__pi_systat.ledsts & 0x1)
     d8c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	645f7469 	ldrbvs	r7, [pc], #-1129	; d98 <AONRTCIntHandler+0xd0>
     d94:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
				if (__pi_systat.ledsts & 0x2)
     d98:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     d9c:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     da0:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
				if (__pi_systat.ledsts & 0x8)
     da4:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
				__pi_systat.ledblk = 1;
     da8:	735f5f00 	cmpvc	pc, #0, 30
     dac:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		if (aux_timer_inactive) {
     db0:	6e6f645f 	mcrvs	4, 3, r6, cr15, cr15, {2}
			cli_aux;
     db4:	61635f65 	cmnvs	r3, r5, ror #30
     db8:	5f006573 	svcpl	0x00006573
     dbc:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
     dc0:	00736570 	rsbseq	r6, r3, r0, ror r5
     dc4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     dc8:	5f62616c 	svcpl	0x0062616c
     dcc:	70736572 	rsbsvc	r6, r3, r2, ror r5
     dd0:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     dd4:	635f315f 	cmpvs	pc, #-1073741801	; 0xc0000017
     dd8:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
word tci_update_delay_ticks (Boolean force) {
     ddc:	5f5f0065 	svcpl	0x005f0065
	cli_tim;
     de0:	616c7473 	smcvs	51011	; 0xc743
     de4:	73615f62 	cmnvc	r1, #392	; 0x188
	if (setdel) {
     de8:	6f665f6b 	svcvs	0x00665f6b
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     df4:	5f6f745f 	svcpl	0x006f745f
     df8:	61657263 	cmnvs	r5, r3, ror #4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfc:	2f006574 	svccs	0x00006574
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	return NO;
     e04:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			setdel = 0;
     e08:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     e10:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
}
     e14:	472f7374 			; <UNDEFINED> instruction: 0x472f7374
		sti_tim;
     e18:	75487469 	strbvc	r7, [r8, #-1129]	; 0xfffffb97
		return YES;
     e1c:	69442f62 	stmdbvs	r4, {r1, r5, r6, r8, r9, sl, fp, sp}^
     e20:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     e24:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
     e28:	61442d64 	cmpvs	r4, r4, ror #26
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	532d6174 			; <UNDEFINED> instruction: 0x532d6174
	UARTDisable (UART0_BASE);
     e30:	616f7274 	smcvs	63268	; 0xf724
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	532d6567 			; <UNDEFINED> instruction: 0x532d6567
	UARTDisable (UART0_BASE);
     e38:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	6f5f006d 	svcvs	0x005f006d
     e40:	745f6666 	ldrbvc	r6, [pc], #-1638	; e48 <__pi_uart_setrate+0x1c>
     e44:	6c654400 	cfstrdvs	mvd4, [r5], #-0
     e48:	52657465 	rsbpl	r7, r5, #1694498816	; 0x65000000
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     e50:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
     e54:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	626e5f00 	rsbvs	r5, lr, #0, 30
     e5c:	5f006675 	svcpl	0x00006675
     e60:	73756e75 	cmnvc	r5, #1872	; 0x750
	urates [0] = rate;
     e64:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
}
     e68:	00646e61 	rsbeq	r6, r4, r1, ror #28
     e6c:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
     e70:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
     e74:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
     e78:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     e7c:	5f656c61 	svcpl	0x00656c61
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	6f666e69 	svcvs	0x00666e69
     e84:	4f484300 	svcmi	0x00484300
     e88:	00454349 	subeq	r4, r5, r9, asr #6
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	616c665f 	cmnvs	ip, pc, asr r6
     e90:	00327367 	eorseq	r7, r2, r7, ror #6
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	5f746573 	svcpl	0x00746573
     e98:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
	__pi_uart_setrate (urates [0], __pi_uart);
     e9c:	5f62645f 	svcpl	0x0062645f
     ea0:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     ea4:	6f635f79 	svcvs	0x00635f79
     ea8:	00746e75 	rsbseq	r6, r4, r5, ror lr
     eac:	5f73695f 	svcpl	0x0073695f
     eb0:	00617863 	rsbeq	r7, r1, r3, ror #16
     eb4:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
	switch (operation) {
     eb8:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	5f007478 	svcpl	0x00007478
     ec0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     ec4:	5f656c61 	svcpl	0x00656c61
     ec8:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     ecc:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
				*buf++ = uart_a_read;
     ed0:	61705f74 	cmnvs	r0, r4, ror pc
     ed4:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
			while (len && uart_a_char_available) {
     ed8:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
     edc:	52006b65 	andpl	r6, r0, #103424	; 0x19400
     ee0:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
			if (len != operation) {
     ee4:	52657665 	rsbpl	r7, r5, #105906176	; 0x6500000
}
     ee8:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     eec:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
			uart_a_disable_int;
     ef0:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
			if (uart_a_char_available) {
     ef4:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
				*buf++ = uart_a_read;
     ef8:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
			uart_a_disable_int;
     efc:	5f007972 	svcpl	0x00007972
     f00:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
			if (uart_a_char_available) {
     f04:	5f007272 	svcpl	0x00007272
     f08:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
				uart_a_enable_int;
     f0c:	00636f6c 	rsbeq	r6, r3, ip, ror #30
     f10:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
				goto Redo_rx;
     f14:	52430066 	subpl	r0, r3, #102	; 0x66
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	45544145 	ldrbmi	r4, [r4, #-325]	; 0xfffffebb
     f1c:	4345525f 	movtmi	r5, #21087	; 0x525f
			return -2;
     f20:	0044524f 	subeq	r5, r4, pc, asr #4
     f24:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
				uart_a_write (*buf);
     f28:	615f6574 	cmpvs	pc, r4, ror r5	; <UNPREDICTABLE>
     f2c:	65006c6c 	strvs	r6, [r0, #-3180]	; 0xfffff394
			while (len && uart_a_room_in_tx) {
     f30:	64706666 	ldrbtvs	r6, [r0], #-1638	; 0xfffff99a
     f34:	776f006d 	strbvc	r0, [pc, -sp, rrx]!
     f38:	5f72656e 	svcpl	0x0072656e
			if (len != operation) {
     f3c:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
			uart_a_disable_int;
     f40:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     f44:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
			if (uart_a_room_in_tx) {
     f48:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
     f4c:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
				uart_a_enable_int;
     f50:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     f54:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
				*buf++ = uart_a_read;
     f58:	6f694465 	svcvs	0x00694465
			if (uart_a_room_in_tx) {
     f5c:	4e4f4100 	dvfmie	f4, f7, f0
				uart_a_write (*buf);
     f60:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
     f64:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     f6c:	33697500 	cmncc	r9, #0, 10
			uart_a_enable_int;
     f70:	646f4d32 	strbtvs	r4, [pc], #-3378	; f78 <ioreq_uart_a+0xc0>
     f74:	5f5f0065 	svcpl	0x005f0065
     f78:	6f5f6970 	svcvs	0x005f6970
			return 0;
     f7c:	6f646666 	svcvs	0x00646666
			if (len == UART_CNTRL_SETRATE) {
     f80:	6e69616d 	powvsez	f6, f1, #5.0
				if (__pi_uart_setrate (*((word*)buf),
     f84:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
     f88:	00766174 	rsbseq	r6, r6, r4, ror r1
     f8c:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
				syserror (EREQPAR, "uar");
     f90:	5f007365 	svcpl	0x00007365
			syserror (ENOOPER, "uai");
     f94:	616e655f 	cmnvs	lr, pc, asr r5
			if (len == UART_CNTRL_GETRATE) {
     f98:	5f656c62 	svcpl	0x00656c62
				return 1;
     f9c:	00717269 	rsbseq	r7, r1, r9, ror #4
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     fa0:	72656877 	rsbvc	r6, r5, #7798784	; 0x770000
			syserror (ENOOPER, "uai");
     fa4:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
     fa8:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     fac:	6e756674 	mrcvs	6, 3, r6, cr5, cr4, {3}
     fb0:	4100745f 	tstmi	r0, pc, asr r4
     fb4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     fb8:	78754143 	ldmdavc	r5!, {r0, r1, r6, r8, lr}^
     fbc:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     fc0:	76457075 			; <UNDEFINED> instruction: 0x76457075
     fc4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
void UART0IntHandler () {
     fcc:	6f504355 	svcvs	0x00504355
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	53726577 	cmnpl	r2, #499122176	; 0x1dc00000
     fd4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     fd8:	74654773 	strbtvc	r4, [r5], #-1907	; 0xfffff88d
     fdc:	52415500 	subpl	r5, r1, #0, 10
     fe0:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	61656c43 	cmnvs	r5, r3, asr #24
     fe8:	79730072 	ldmdbvc	r3!, {r1, r4, r5, r6}^
		RISE_N_SHINE;
     fec:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     ff0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
		i_trigger (devevent (UART_A, READ));
     ff4:	4f410074 	svcmi	0x00410074
     ff8:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     ffc:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    1000:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1004:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1008:	7300656c 	movwvc	r6, #1388	; 0x56c
    100c:	65647465 	strbvs	r7, [r4, #-1125]!	; 0xfffffb9b
    1010:	5250006c 	subspl	r0, r0, #108	; 0x6c
    1014:	634d4d43 	movtvs	r4, #56643	; 0xdd43
    1018:	776f5075 			; <UNDEFINED> instruction: 0x776f5075
    101c:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    1020:	5f5f0066 	svcpl	0x005f0066
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	5f746573 	svcpl	0x00746573
    1028:	0050534d 	subseq	r5, r0, sp, asr #6
    102c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
		i_trigger (devevent (UART_A, WRITE));
    1030:	5f74696e 	svcpl	0x0074696e
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	5f5f0074 	svcpl	0x005f0074
    1038:	6f5f6970 	svcvs	0x005f6970
		RISE_N_SHINE;
    103c:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; e8c <reinit_uart+0xc>
    1040:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1044:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
		i_trigger (devevent (UART_A, WRITE));
    1048:	6c467748 	mcrrvs	7, 4, r7, r6, cr8
    104c:	6f43776f 	svcvs	0x0043776f
    1050:	6f72746e 	svcvs	0x0072746e
    1054:	7369446c 	cmnvc	r9, #108, 8	; 0x6c000000
    1058:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    105c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1060:	61755f69 	cmnvs	r5, r9, ror #30
    1064:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
    1068:	61727465 	cmnvs	r2, r5, ror #8
    106c:	41006574 	tstmi	r0, r4, ror r5
    1070:	4f494e4f 	svcmi	0x00494e4f
}
    1074:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
    1078:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
    107c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1080:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
    1084:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
void __buttons_setirq (int val) {
    1088:	76654c78 			; <UNDEFINED> instruction: 0x76654c78
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	52006c65 	andpl	r6, r0, #25856	; 0x6500
    1090:	5f6f6465 	svcpl	0x006f6465
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	75007872 	strvc	r7, [r0, #-2162]	; 0xfffff78e
    1098:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    109c:	76654c78 			; <UNDEFINED> instruction: 0x76654c78
		bn = BUTTON_GPIO (__button_list [i]);
    10a0:	53006c65 	movwpl	r6, #3173	; 0xc65
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10a4:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    10a8:	6c436c72 	mcrrvs	12, 7, r6, r3, cr2
    10ac:	476b636f 	strbmi	r6, [fp, -pc, ror #6]!
    10b0:	50007465 	andpl	r7, r0, r5, ror #8
    10b4:	434d4352 	movtmi	r4, #54098	; 0xd352
    10b8:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
}
    10bc:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
    10c0:	6f69746e 	svcvs	0x0069746e
    10c4:	616e456e 	cmnvs	lr, lr, ror #10
    10c8:	00656c62 	rsbeq	r6, r5, r2, ror #24
void __pinlist_setirq (int val) {
    10cc:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	00746553 	rsbseq	r6, r4, r3, asr r5
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10e0:	6500656c 	strvs	r6, [r0, #-1388]	; 0xfffffa94
    10e4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e8:	61755f65 	cmnvs	r5, r5, ror #30
    10ec:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    10f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
}
    10f8:	41550073 	cmpmi	r5, r3, ror r0
    10fc:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
    1100:	6e454f46 	cdpvs	15, 4, cr4, cr5, cr6, {2}
    1104:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
void GPIOIntHandler () {
    1108:	33697500 	cmncc	r9, #0, 10
if (buttons_int) {
    110c:	746e4932 	strbtvc	r4, [lr], #-2354	; 0xfffff6ce
    1110:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
	buttons_disable ();
    1114:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    1118:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!	; 0xfffffe44
	i_trigger ((aword)&__button_list);
    111c:	00726562 	rsbseq	r6, r2, r2, ror #10
    1120:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1124:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    1128:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    112c:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
    1130:	6f500065 	svcvs	0x00500065
    1134:	43726577 	cmnmi	r2, #499122176	; 0x1dc00000
    1138:	496c7274 	stmdbmi	ip!, {r2, r4, r5, r6, r9, ip, sp, lr}^
    113c:	6572464f 	ldrbvs	r4, [r2, #-1615]!	; 0xfffff9b1
    1140:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
    1144:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	RISE_N_SHINE;
    1148:	5000656c 	andpl	r6, r0, ip, ror #10
    114c:	434d4352 	movtmi	r4, #54098	; 0xd352
    1150:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
if (pin_sensor_int) {
    1154:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
    1158:	6f69746e 	svcvs	0x0069746e
	i_trigger ((aword)(&__input_pins));
    115c:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
    1160:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1164:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1168:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
    116c:	646f6d72 	strbtvs	r6, [pc], #-3442	; 1174 <GPIOIntHandler+0x6c>
    1170:	706f0065 	rsbvc	r0, pc, r5, rrx
    1174:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    1178:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    117c:	5f787561 	svcpl	0x00787561
    1180:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1184:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
	__pinsen_disable_and_clear;
    1188:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
	RISE_N_SHINE;
    118c:	70006576 	andvc	r6, r0, r6, ror r5
    1190:	5f74726f 	svcpl	0x0074726f
    1194:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
}
    1198:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
    119c:	745f6f64 	ldrbvc	r6, [pc], #-3940	; 11a4 <GPIOIntHandler+0x9c>
    11a0:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
    11a4:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
    11a8:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
void system_init () {
    11ac:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	42323369 	eorsmi	r3, r2, #-1543503871	; 0xa4000001
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	00657361 	rsbeq	r7, r5, r1, ror #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	6f645f5f 	svcvs	0x00645f5f
    11bc:	6966775f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    11c0:	5f73615f 	svcpl	0x0073615f
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
    11c8:	41006465 	tstmi	r0, r5, ror #8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    11d0:	636e4943 	cmnvs	lr, #1097728	; 0x10c000
    11d4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	32684365 	rsbcc	r4, r8, #-1811939327	; 0x94000001
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11dc:	00746553 	rsbseq	r6, r4, r3, asr r5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11e0:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e4:	5f74696e 	svcpl	0x0074696e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ec:	4e4f4100 	dvfmie	f4, f7, f0
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	6148746e 	cmpvs	r8, lr, ror #8
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	61700072 	cmnvs	r0, r2, ror r0
    1200:	006d6172 	rsbeq	r6, sp, r2, ror r1
    1204:	5f696374 	svcpl	0x00696374
    1208:	5f6e7572 	svcpl	0x006e7572
		if (port_confs [i] & 0x80)
    120c:	616c6564 	cmnvs	ip, r4, ror #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1214:	0072656d 	rsbseq	r6, r2, sp, ror #10
		if (port_confs [i] & 0x40)
    1218:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; 0xfffffe84
    1220:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1228:	7270006f 	rsbsvc	r0, r0, #111	; 0x6f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122c:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
	all_leds_blink;
    1230:	61755f74 	cmnvs	r5, r4, ror pc
    1234:	66007472 			; <UNDEFINED> instruction: 0x66007472
    1238:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    123c:	52415500 	subpl	r5, r1, #0, 10
    1240:	616e4554 	cmnvs	lr, r4, asr r5
    1244:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1248:	4f495047 	svcmi	0x00495047
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1250:	76457261 	strbvc	r7, [r5], -r1, ror #4
    1254:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
    1258:	5f006f69 	svcpl	0x00006f69
    125c:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1264:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1268:	00717269 	rsbseq	r7, r1, r9, ror #4
	IntEnable (INT_AON_RTC_COMB);
    126c:	6c65646d 	cfstrdvs	mvd6, [r5], #-436	; 0xfffffe4c
    1270:	5f007961 	svcpl	0x00007961
    1274:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
	__pi_malloc_init ();
    1278:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	7172695f 	cmnvc	r2, pc, asr r9
    1280:	6f682f00 	svcvs	0x00682f00
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1284:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    128c:	442f6e65 	strtmi	r6, [pc], #-3685	; 1294 <system_init+0xe8>
    1290:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	4f2f706f 	svcmi	0x002f706f
    1298:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	502f5445 	eorpl	r5, pc, r5, asr #8
    12a0:	534f4349 	movtpl	r4, #62281	; 0xf349
    12a4:	6369502f 	cmnvs	r9, #47	; 0x2f
	urates [0] = UART_RATE / 100;
    12a8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    12ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	reinit_uart ();
    12b0:	616d2f58 	cmnvs	sp, r8, asr pc
	EXTRA_INITIALIZERS;
    12b4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    12b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
    12c0:	44726165 	ldrbtmi	r6, [r2], #-357	; 0xfffffe9b
    12c4:	53006f69 	movwpl	r6, #3945	; 0xf69
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    12cc:	6f416c72 	svcvs	0x00416c72
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
    12d4:	5f5f0063 	svcpl	0x005f0063
			devinit [i] . init (devinit [i] . param);
    12d8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	6b636174 	blvs	18d98b4 <__ccfg+0x18b990c>
    12e0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    12e4:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
	IntEnable (INT_UART0_COMB);
    12e8:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
    12ec:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
}
    12f0:	61696c69 	cmnvs	r9, r9, ror #24
	tci_run_auxiliary_timer ();
    12f4:	745f7972 	ldrbvc	r7, [pc], #-2418	; 12fc <system_init+0x150>
		diag ("");
    12f8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    12fc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1300:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
		diag ("Leftover RAM: %d bytes",
    1308:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
    130c:	50470071 	subpl	r0, r7, r1, ror r0
    1310:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
    1314:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    1318:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    131c:	6f6f4200 	svcvs	0x006f4200
    1320:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    1324:	52415500 	subpl	r5, r1, #0, 10
    1328:	46494654 			; <UNDEFINED> instruction: 0x46494654
    132c:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
    1330:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
    1334:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
    1338:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    133c:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
    1340:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
    1344:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1348:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    134c:	00766174 	rsbseq	r6, r6, r4, ror r1
    1350:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    1354:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
    1358:	616c6564 	cmnvs	ip, r4, ror #10
    135c:	4f410079 	svcmi	0x00410079
    1360:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
    1368:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    136c:	5f00656c 	svcpl	0x0000656c
    1370:	5f69705f 	svcpl	0x0069705f
    1374:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    1378:	41006e6f 	tstmi	r0, pc, ror #28
    137c:	4f494e4f 	svcmi	0x00494e4f
    1380:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
}
    1384:	45657a65 	strbmi	r7, [r5, #-2661]!	; 0xfffff59b
__attribute__ ((noreturn)) void __pi_release () {
    1388:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    138c:	4f410065 	svcmi	0x00410065
    1390:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1394:	426e6f4d 	rsbmi	r6, lr, #308	; 0x134
	check_stack_overflow;
    1398:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
    139c:	6f567972 	svcvs	0x00567972
    13a0:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
	update_n_wake (MAX_WORD, NO);
    13a4:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    13a8:	726f6900 	rsbvc	r6, pc, #0, 18
    13ac:	755f7165 	ldrbvc	r7, [pc, #-357]	; 124f <system_init+0xa3>
	for_all_tasks (__pi_curr) {
    13b0:	5f747261 	svcpl	0x00747261
    13b4:	5f5f0061 	svcpl	0x005f0061
    13b8:	755f6970 	ldrbvc	r6, [pc, #-2416]	; a50 <root+0x4ac>
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	736d6974 	cmnvc	sp, #116, 18	; 0x1d0000
	__SLEEP;
    13c0:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
    13c4:	50470074 	subpl	r0, r7, r4, ror r0
    13c8:	735f4f49 	cmpvc	pc, #292	; 0x124
    13cc:	69447465 	stmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
	system_event_count ++;
    13d0:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
    13d4:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
	switch (__pi_systat.effpdm) {
    13d8:	5f5f0074 	svcpl	0x005f0074
    13dc:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    13e0:	72657379 	rsbvc	r7, r5, #-469762047	; 0xe4000001
    13e4:	00726f72 	rsbseq	r6, r2, r2, ror pc
			__WFI ();
    13e8:	6e766564 	cdpvs	5, 7, cr6, cr6, cr4, {3}
    13ec:	75006d75 	strvc	r6, [r0, #-3445]	; 0xfffff28b
    13f0:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	check_stack_overflow;
    13f4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    13f8:	6142746e 	cmpvs	r2, lr, ror #8
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    1400:	41550079 	cmpmi	r5, r9, ror r0
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
			goto Redo;
    1408:	616e4574 	smcvs	58452	; 0xe454
	for_all_tasks (__pi_curr) {
    140c:	00656c62 	rsbeq	r6, r5, r2, ror #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
    1418:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1420:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
    1424:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
    142c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    1434:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
			__WFI ();
    1438:	00746c61 	rsbseq	r6, r4, r1, ror #24
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	4f706f74 	svcmi	0x00706f74
    1440:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
}
    1444:	6174536e 	cmnvs	r4, lr, ror #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1448:	5f006b63 	svcpl	0x00006b63
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144c:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1450:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
    1454:	30545241 	subscc	r5, r4, r1, asr #4
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1458:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    145c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1460:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1464:	53706565 	cmnpl	r0, #423624704	; 0x19400000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1468:	7065656c 	rsbvc	r6, r5, ip, ror #10
    146c:	726f7000 	rsbvc	r7, pc, #0
    1470:	6f635f74 	svcvs	0x00635f74
    1474:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
    147c:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	5f657461 	svcpl	0x00657461
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1484:	616c6564 	cmnvs	ip, r4, ror #10
    1488:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    148c:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1490:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
    1494:	00657275 	rsbeq	r7, r5, r5, ror r2
			SysCtrlSetRechargeBeforePowerDown
    1498:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    149c:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14a0:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    14a4:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	5f007665 	svcpl	0x00007665
    14ac:	5f69705f 	svcpl	0x0069705f
    14b0:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b4:	5f007970 	svcpl	0x00007970
    14b8:	5f69705f 	svcpl	0x0069705f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
    14c4:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    14c8:	66710074 			; <UNDEFINED> instruction: 0x66710074
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14cc:	00656572 	rsbeq	r6, r5, r2, ror r5
			while (!(AONWUCPowerStatusGet () &
    14d0:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	5f5f0071 	svcpl	0x005f0071
    14d8:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
    14dc:	006b726f 	rsbeq	r7, fp, pc, ror #4
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14e0:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
    14e4:	6f706d00 	svcvs	0x00706d00
    14e8:	00736c6f 	rsbseq	r6, r3, pc, ror #24
    14ec:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	615f7265 	cmpvs	pc, r5, ror #4
    14f4:	55006464 	strpl	r6, [r0, #-1124]	; 0xfffffb9c
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    14f8:	42545241 	subsmi	r5, r4, #268435460	; 0x10000004
    14fc:	00797375 	rsbseq	r7, r9, r5, ror r3
			SysCtrlAdjustRechargeAfterPowerDown ();
    1500:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			reinit_uart ();
    1504:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
    1508:	5f636f6c 	svcpl	0x00636f6c
    150c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
}
    1510:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1514:	72745f69 	rsbsvc	r5, r4, #420	; 0x1a4
    1518:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	5f5f0072 	svcpl	0x005f0072
    1520:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    1524:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	5f5f006e 	svcpl	0x005f006e
    152c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 1454 <__pi_release+0xcc>	; <UNPREDICTABLE>
    1530:	72667861 	rsbvc	r7, r6, #6356992	; 0x610000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1534:	63006565 	movwvs	r6, #1381	; 0x565
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	00676e69 	rsbeq	r6, r7, r9, ror #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	6b68636e 	blvs	1a1a300 <__ccfg+0x19fa358>
    1544:	666e6d00 	strbtvs	r6, [lr], -r0, lsl #26
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1548:	00656572 	rsbeq	r6, r5, r2, ror r5
    154c:	636f7270 	cmnvs	pc, #112, 4
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1550:	00646565 	rsbeq	r6, r4, r5, ror #10
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1554:	6e656c6d 	cdpvs	12, 6, cr6, cr5, cr13, {3}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1558:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    155c:	74705f69 	ldrbtvc	r5, [r0], #-3945	; 0xfffff097
			PRCMPowerDomainOff (
    1560:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1564:	61007265 	tstvs	r0, r5, ror #4
	__SLEEP;
    1568:	65646464 	strbvs	r6, [r4, #-1124]!	; 0xfffffb9c
    156c:	6e756676 	mrcvs	6, 3, r6, cr5, cr6, {3}
  __ASM volatile ("cpsie i" : : : "memory");
    1570:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
	goto Redo;
    1574:	72657664 	rsbvc	r7, r5, #100, 12	; 0x6400000
    1578:	61696400 	cmnvs	r9, r0, lsl #8
    157c:	5f5f0067 	svcpl	0x005f0067
    1580:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    1584:	61637274 	smcvs	14116	; 0x3724
    1588:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
    158c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1590:	6d00745f 	cfstrsvs	mvf7, [r0, #-380]	; 0xfffffe84
    1594:	65726663 	ldrbvs	r6, [r2, #-1635]!	; 0xfffff99d
    1598:	61770065 	cmnvs	r7, r5, rrx
    159c:	00657473 	rsbeq	r7, r5, r3, ror r4
    15a0:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
    15a4:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
    15a8:	6d007473 	cfstrsvs	mvf7, [r0, #-460]	; 0xfffffe34
    15ac:	00737365 	rsbseq	r7, r3, r5, ror #6
    15b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14fc <__pi_release+0x174>
    15b4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    15b8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    15bc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    15c0:	6f746b73 	svcvs	0x00746b73
    15c4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    15c8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    15cc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    15d0:	2f534f43 	svccs	0x00534f43
    15d4:	4f636950 	svcmi	0x00636950
    15d8:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    15dc:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	cli_tim;
    15e0:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    15e4:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    15e8:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
	diag ("PicOS halted");
    15ec:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
	mdelay (500);
    15f0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    15f4:	61625f69 	cmnvs	r2, r9, ror #30
	setpowermode (2);
    15f8:	61747364 	cmnvs	r4, r4, ror #6
	__PCB = NULL;
    15fc:	5f006574 	svcpl	0x00006574
	release;
    1600:	5f69705f 	svcpl	0x0069705f
    1604:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    1608:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    160c:	61775f69 	cmnvs	r7, r9, ror #30
int main (void) {
    1610:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
    1618:	5f00646e 	svcpl	0x0000646e
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	5f69705f 	svcpl	0x0069705f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
	system_init ();
    1624:	00656572 	rsbeq	r6, r5, r2, ror r5
	tcv_init ();
    1628:	6e756863 	cdpvs	8, 7, cr6, cr5, cr3, {3}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    162c:	7075006b 	rsbsvc	r0, r5, fp, rrx
    1630:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	775f6e5f 			; <UNDEFINED> instruction: 0x775f6e5f
    1638:	00656b61 	rsbeq	r6, r5, r1, ror #22
    163c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1640:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    1644:	65670064 	strbvs	r0, [r7, #-100]!	; 0xffffff9c
	delay (16, 0);
    1648:	646f6374 	strbtvs	r6, [pc], #-884	; 1650 <main+0x40>
    164c:	6c640065 	stclvs	0, cr0, [r4], #-404	; 0xfffffe6c
    1650:	00746665 	rsbseq	r6, r4, r5, ror #12
	__pi_release ();
    1654:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1658:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    165c:	00797063 	rsbseq	r7, r9, r3, rrx
    1660:	756f6764 	strbvc	r6, [pc, #-1892]!	; f04 <ioreq_uart_a+0x4c>
    1664:	5f5f0074 	svcpl	0x005f0074
    1668:	755f6970 	ldrbvc	r6, [pc, #-2416]	; d00 <AONRTCIntHandler+0x38>
    166c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
static void killev (__pi_pcb_t *pid) {
    1670:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
	wfun = (aword)(pid->code);
    1674:	66770074 			; <UNDEFINED> instruction: 0x66770074
	for_all_tasks (i) {
    1678:	6e006e75 	mcrvs	14, 0, r6, cr0, cr5, {3}
		for (j = 0; j < nevents (i); j++) {
    167c:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
    1680:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1684:	72665f69 	rsbvc	r5, r6, #420	; 0x1a4
			    || i->Events [j] . Event == wfun
    1688:	44006565 	strmi	r6, [r0], #-1381	; 0xfffffa9b
		for (j = 0; j < nevents (i); j++) {
    168c:	49535f49 	ldmdbmi	r3, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
			if (i->Events [j] . Event == (aword)pid
    1690:	5f5f0047 	svcpl	0x005f0047
    1694:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 15bc <__pi_release+0x234>	; <UNPREDICTABLE>
    1698:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
				wakeupev (i, j);
    169c:	696b0074 	stmdbvs	fp!, {r2, r4, r5, r6}^
    16a0:	6c616c6c 	stclvs	12, cr6, [r1], #-432	; 0xfffffe50
	for_all_tasks (i) {
    16a4:	5f5f006c 	svcpl	0x005f006c
}
    16a8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16ac:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
static void qfree (aword *ch) {
    16b0:	5f007970 	svcpl	0x00007970
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b4:	5f69705f 	svcpl	0x0069705f
	cc = (aword*)(mpools + MA_NP);
    16b8:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
	m_setnextp (ch, chunk);
    16bc:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
	m_setnextp (cc, ch);
    16c0:	5f72656d 	svcpl	0x0072656d
}
    16c4:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16c8:	5f006574 	svcpl	0x00006574
    16cc:	5f69705f 	svcpl	0x0069705f
    16d0:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
			m_setnextp (cc, m_nextp (chunk));
    16d4:	00746163 	rsbseq	r6, r4, r3, ror #2
			m_size (chunk) += m_hdrlen + m_size (ch);
    16d8:	5f766374 	svcpl	0x00766374
    16dc:	7a697371 	bvc	1a5e4a8 <__ccfg+0x1a3e500>
    16e0:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    16e4:	5f007665 	svcpl	0x00007665
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16e8:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    16f0:	745f7274 	ldrbvc	r7, [pc], #-628	; 16f8 <qfree+0x4c>
    16f4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			m_setnextp (cc, m_nextp (chunk));
    16f8:	5f796870 	svcpl	0x00796870
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	00706f74 	rsbseq	r6, r0, r4, ror pc
    1700:	5f766374 	svcpl	0x00766374
    1704:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1708:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    170c:	5f766374 	svcpl	0x00766374
    1710:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
			if (m_size (chunk) >= m_size (ch))
    1714:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1718:	69645f70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    171c:	736f7073 	cmnvc	pc, #115	; 0x73
		chunk = m_nextp (chunk))
    1720:	63740065 	cmnvs	r4, #101	; 0x65
    1724:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    1728:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	72746300 	rsbsvc	r6, r4, #0, 6
	diag_wait (a);
    1730:	6e75666c 	cdpvs	6, 7, cr6, cr5, cr12, {3}
	diag_wchar (c, a);
    1734:	2f00745f 	svccs	0x0000745f
    1738:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    173c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1740:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	syserror (ESTATE, "state");
    1744:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1748:	706f746b 	rsbvc	r7, pc, fp, ror #8
    174c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1750:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	4349502f 	movtmi	r5, #36911	; 0x902f
void utimer_add (address ut) {
    1758:	502f534f 	eorpl	r5, pc, pc, asr #6
    175c:	534f6369 	movtpl	r6, #62313	; 0xf369
		if (__pi_utims [i] == NULL)
    1760:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	562f7362 	strtpl	r7, [pc], -r2, ror #6
    1768:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
		syserror (ERESOURCE, "ut a");
    176c:	7663742f 	strbtvc	r7, [r3], -pc, lsr #8
	__pi_utims [i] = ut;
    1770:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
}
    1774:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    1778:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
    177c:	63740074 	cmnvs	r4, #116	; 0x74
	*t = v;
    1780:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
	TCI_RUN_AUXILIARY_TIMER;
    1784:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
void update_n_wake (word min, Boolean force) {
    1788:	645f7663 	ldrbvs	r7, [pc], #-1635	; 1790 <update_n_wake+0x8>
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	00706f72 	rsbseq	r6, r0, r2, ror pc
    1790:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    1794:	6f666e69 	svcvs	0x00666e69
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1798:	706d6500 	rsbvc	r6, sp, r0, lsl #10
    179c:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
    17a0:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    17a4:	72655f79 	rsbvc	r5, r5, #484	; 0x1e4
    17a8:	00657361 	rsbeq	r7, r5, r1, ror #6
    17ac:	70766374 	rsbsvc	r6, r6, r4, ror r3
    17b0:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    17b4:	00686361 	rsbeq	r6, r8, r1, ror #6
    17b8:	6575716f 	ldrbvs	r7, [r5, #-367]!	; 0xfffffe91
    17bc:	00736575 	rsbseq	r6, r3, r5, ror r5
    17c0:	63745f5f 	cmnvs	r4, #380	; 0x17c
    17c4:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    17c8:	5f6d6574 	svcpl	0x006d6574
		for_all_tasks (i) {
    17cc:	5f5f0073 	svcpl	0x005f0073
	__pi_mintk = znew + min;
    17d0:	5f766374 	svcpl	0x00766374
    17d4:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
			if (!twaiting (i))
    17d8:	00745f6d 	rsbseq	r5, r4, sp, ror #30
    17dc:	63745f5f 	cmnvs	r4, #380	; 0x17c
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17e0:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
    17e4:	6b636f6c 	blvs	18dd59c <__ccfg+0x18bd5f4>
    17e8:	6100745f 	tstvs	r0, pc, asr r4
    17ec:	00707474 	rsbseq	r7, r0, r4, ror r4
    17f0:	65677275 	strbvs	r7, [r7, #-629]!	; 0xfffffd8b
    17f4:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
    17f8:	74725f72 	ldrbtvc	r5, [r2], #-3954	; 0xfffff08e
    17fc:	73656400 	cmnvc	r5, #0, 8
    1800:	70697263 	rsbvc	r7, r9, r3, ror #4
    1804:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    1808:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    180c:	6172655f 	cmnvs	r2, pc, asr r5
				wakeuptm (i);
    1810:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
    1814:	655f7663 	ldrbvs	r7, [pc, #-1635]	; 11b9 <system_init+0xd>
		for_all_tasks (i) {
    1818:	0070646e 	rsbseq	r6, r0, lr, ror #8
				d = i->Timer - znew;
    181c:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1820:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
    1824:	75717200 	ldrbvc	r7, [r1, #-512]!	; 0xfffffe00
		if ((word)(__pi_mintk - znew) < min) 
    1828:	00657565 	rsbeq	r7, r5, r5, ror #10
    182c:	73727470 	cmnvc	r2, #112, 8	; 0x70000000
    1830:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
	__pi_old = znew;
    1834:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
}
    1838:	63740073 	cmnvs	r4, #115	; 0x73
	TCI_RUN_DELAY_TIMER;
    183c:	6e775f76 	mrcvs	15, 3, r5, cr7, cr6, {3}
}
    1840:	74007370 	strvc	r7, [r0], #-880	; 0xfffffc90
    1844:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    1848:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    184c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1850:	6f6c635f 	svcvs	0x006c635f
void proceed (word state) {
    1854:	5f006573 	svcpl	0x00006573
	prcdstate (__pi_curr, state);
    1858:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    185c:	7365735f 	cmnvc	r5, #2080374785	; 0x7c000001
	release;
    1860:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    1864:	7000745f 	andvc	r7, r0, pc, asr r4
void __pi_wait (aword event, word state) {
    1868:	00737968 	rsbseq	r7, r3, r8, ror #18
	sint j = nevents (__pi_curr);
    186c:	73796870 	cmnvc	r9, #112, 16	; 0x700000
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
    1874:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
    1878:	00646575 	rsbeq	r6, r4, r5, ror r5
		syserror (ENEVENTS, "sw");
    187c:	5f766374 	svcpl	0x00766374
    1880:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	setestate (__pi_curr->Events [j], state, event);
    1884:	73657300 	cmnvc	r5, #0, 6
	incwait (__pi_curr);
    1888:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
	setestate (__pi_curr->Events [j], state, event);
    188c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
}
    1890:	6c635f70 	stclvs	15, cr5, [r3], #-448	; 0xfffffe40
    1894:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1898:	70766374 	rsbsvc	r6, r6, r4, ror r3
void __pi_trigger (aword event) {
    189c:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
	for_all_tasks (i) {
    18a0:	006e6769 	rsbeq	r6, lr, r9, ror #14
		for (j = 0; j < nevents (i); j++) {
    18a4:	64696c70 	strbtvs	r6, [r9], #-3184	; 0xfffff390
    18a8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    18ac:	5f796870 	svcpl	0x00796870
    18b0:	00646e65 	rsbeq	r6, r4, r5, ror #28
			if (i->Events [j] . Event == event) {
    18b4:	70747461 	rsbsvc	r7, r4, r1, ror #8
    18b8:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
    18bc:	74006e72 	strvc	r6, [r0], #-3698	; 0xfffff18e
				wakeupev (i, j);
    18c0:	705f7663 	subsvc	r7, pc, r3, ror #12
    18c4:	0067756c 	rsbeq	r7, r7, ip, ror #10
	for_all_tasks (i) {
    18c8:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
}
    18cc:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
aword __pi_join (aword pid, word st) {
    18d0:	5f007365 	svcpl	0x00007365
	for_all_tasks (i) {
    18d4:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    18d8:	6568715f 	strbvs	r7, [r8, #-351]!	; 0xfffffea1
	return 0;
    18dc:	745f6461 	ldrbvc	r6, [pc], #-1121	; 18e4 <__pi_join+0x14>
		if ((aword)i == pid) {
    18e0:	756c7000 	strbvc	r7, [ip, #-0]!
			__pi_wait (pid, st);
    18e4:	006e6967 	rsbeq	r6, lr, r7, ror #18
}
    18e8:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
	for_all_tasks (i) {
    18ec:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
    18f0:	00707369 	rsbseq	r7, r0, r9, ror #6
void delay (word d, word state) {
    18f4:	5f766374 	svcpl	0x00766374
	settstate (__pi_curr, state);
    18f8:	00706e72 	rsbseq	r6, r0, r2, ror lr
    18fc:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1900:	725f7968 	subsvc	r7, pc, #104, 18	; 0x1a0000
    1904:	62007663 	andvs	r7, r0, #103809024	; 0x6300000
	update_n_wake (d, YES);
    1908:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    190c:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
	__pi_curr->Timer = __pi_old + d;
    1910:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
    1914:	5f5f0073 	svcpl	0x005f0073
	inctimer (__pi_curr);
    1918:	5f766374 	svcpl	0x00766374
    191c:	6f6c6268 	svcvs	0x006c6268
    1920:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
}
    1924:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
    1928:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
	if (fun == NULL)
    192c:	63740067 	cmnvs	r4, #103	; 0x67
		return (int) __pi_curr;
    1930:	635f7076 	cmpvs	pc, #118	; 0x76
    1934:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
	for_all_tasks (i)
    1938:	5f006c6f 	svcpl	0x00006c6f
}
    193c:	61747365 	cmnvs	r4, r5, ror #6
		if (i->code == fun)
    1940:	70006b63 	andvc	r6, r0, r3, ror #22
	for_all_tasks (i)
    1944:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1948:	00637253 	rsbeq	r7, r3, r3, asr r2
    194c:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
int __pi_strlen (const char *s) {
    1950:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
	for (i = 0; *(s+i) != '\0'; i++);
    1954:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
}
    1958:	0072656c 	rsbseq	r6, r2, ip, ror #10
	for (i = 0; *(s+i) != '\0'; i++);
    195c:	53696d4e 	cmnpl	r9, #4992	; 0x1380
	while ((Boolean)(*d++ = *s++));
    1960:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
    1964:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1968:	74655f00 	strbtvc	r5, [r5], #-3840	; 0xfffff100
}
    196c:	00747865 	rsbseq	r7, r4, r5, ror #16
	while (n-- && (*s != '\0'))
    1970:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
    1974:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
	*d = '\0';
    1978:	2f656d6f 	svccs	0x00656d6f
	while (n-- && (*s != '\0'))
    197c:	70657473 	rsbvc	r7, r5, r3, ror r4
    1980:	2f6e6568 	svccs	0x006e6568
		*d++ = *s++;
    1984:	6b736544 	blvs	1cdae9c <__ccfg+0x1cbaef4>
    1988:	2f706f74 	svccs	0x00706f74
	while (n--)
    198c:	4f534c4f 	svcmi	0x00534c4f
    1990:	2f54454e 	svccs	0x0054454e
		*dest++ = *src++;
    1994:	4f434950 	svcmi	0x00434950
    1998:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    199c:	2f534f63 	svccs	0x00534f63
	while (n--)
    19a0:	33314343 	teqcc	r1, #201326593	; 0xc000001
}
    19a4:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
		*dest++ = c;
    19a8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
void adddevfunc (devreqfun_t rf, int loc) {
    19ac:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
		syserror (EREQPAR, "addv");
    19b0:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
		syserror (ERESOURCE, "addv");
    19b4:	73625f00 	cmnvc	r2, #0, 30
	if (ioreq [loc] != NULL)
    19b8:	655f0073 	ldrbvs	r0, [pc, #-115]	; 194d <running+0x21>
    19bc:	61746164 	cmnvs	r4, r4, ror #2
		syserror (ERESOURCE, "addv");
    19c0:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
	ioreq [loc] = rf;
    19c4:	61666544 	cmnvs	r6, r4, asr #10
}
    19c8:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    19cc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
sint io (word retry, word dev, word operation, char *buf, word len) {
    19d0:	67007265 	strvs	r7, [r0, -r5, ror #4]
    19d4:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    19d8:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    19dc:	0073726f 	rsbseq	r7, r3, pc, ror #4
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    19e0:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    19e4:	73654432 	cmnvc	r5, #838860800	; 0x32000000
    19e8:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
		syserror (ENODEVICE, "io");
    19ec:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    19f0:	43005253 	movwmi	r5, #595	; 0x253
	if (len == 0)
    19f4:	5f474643 	svcpl	0x00474643
	ret = (ioreq [dev]) (operation, buf, len);
    19f8:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
    19fc:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
	if (ret >= 0)
    1a00:	00305f44 	eorseq	r5, r0, r4, asr #30
	if (ret == -1) {
    1a04:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a08:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
		if (retry == WNONE)
    1a0c:	4f4c5f54 	svcmi	0x004c5f54
		iowait (dev, operation, retry);
    1a10:	315f4441 	cmpcc	pc, r1, asr #8
    1a14:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1a18:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
			release;
    1a1c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	if (ret == -2) {
    1a20:	00474946 	subeq	r4, r7, r6, asr #18
		if (retry != WNONE) {
    1a24:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a28:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
			iowait (dev, operation, retry);
    1a2c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
    1a30:	00544553 	subseq	r4, r4, r3, asr r5
			(ioreq [dev]) (NONE, buf, len);
    1a34:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a38:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1a40 <io+0x70>
    1a3c:	4f435f45 	svcmi	0x00435f45
		(ioreq [dev]) (NONE, buf, len);
    1a40:	5f00464e 	svcpl	0x0000464e
    1a44:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    1a48:	43430067 	movtmi	r0, #12391	; 0x3067
}
    1a4c:	535f4746 	cmppl	pc, #18350080	; 0x1180000
	if (retry != WNONE) {
    1a50:	5f455a49 	svcpl	0x00455a49
		delay (-ret - 2, retry);
    1a54:	5f444e41 	svcpl	0x00444e41
    1a58:	5f534944 	svcpl	0x00534944
    1a5c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1a60:	43430053 	movtmi	r0, #12371	; 0x3053
		release;
    1a64:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1a68:	5f454545 	svcpl	0x00454545
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1a6c:	5f43414d 	svcpl	0x0043414d
    1a70:	43430030 	movtmi	r0, #12336	; 0x3030
    1a74:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1a78:	5f454545 	svcpl	0x00454545
    1a7c:	5f43414d 	svcpl	0x0043414d
		syserror (ERESOURCE, "mal1");
    1a80:	682f0031 	stmdavs	pc!, {r0, r4, r5}	; <UNPREDICTABLE>
    1a84:	2f656d6f 	svccs	0x00656d6f
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1a88:	70657473 	rsbvc	r7, r5, r3, ror r4
    1a8c:	2f6e6568 	svccs	0x006e6568
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a90:	6b736544 	blvs	1cdafa8 <__ccfg+0x1cbb000>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1a94:	2f706f74 	svccs	0x00706f74
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1a98:	4f534c4f 	svcmi	0x00534c4f
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1a9c:	2f54454e 	svccs	0x0054454e
    1aa0:	4f434950 	svcmi	0x00434950
}
    1aa4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1aa8:	2f534f63 	svccs	0x00534f63
    1aac:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1ab0:	632f5858 			; <UNDEFINED> instruction: 0x632f5858
    1ab4:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    1ab8:	43430063 	movtmi	r0, #12387	; 0x3063
void __pi_free (aword *ch) {
    1abc:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 19ac <adddevfunc>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1ac0:	5f45444f 	svcpl	0x0045444f
    1ac4:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
		syserror (EMALLOC, "malg");
    1ac8:	4300315f 	movwmi	r3, #351	; 0x15f
    1acc:	5f474643 	svcpl	0x00474643
	mcfree [MA_NP] += m_size (ch);
    1ad0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		m_size (ch) ^= MALLOC_UMASK;
    1ad4:	5041545f 	subpl	r5, r1, pc, asr r4
    1ad8:	5041445f 	subpl	r4, r1, pc, asr r4
	mcfree [MA_NP] += m_size (ch);
    1adc:	4300305f 	movwmi	r3, #95	; 0x5f
	QFREE;
    1ae0:	5f474643 	svcpl	0x00474643
	if (mevent [MA_NP] . nwait) {
    1ae4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1ae8:	5041545f 	subpl	r5, r1, pc, asr r4
		trigger ((aword)(&(mevent [MA_NP])));
    1aec:	5041445f 	subpl	r4, r1, pc, asr r4
		mevent [MA_NP] . nwait --;
    1af0:	6300315f 	movwvs	r3, #351	; 0x15f
}
    1af4:	5f676663 	svcpl	0x00676663
    1af8:	43430074 	movtmi	r0, #12404	; 0x3074
    1afc:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1b00:	5f474643 	svcpl	0x00474643
void kill (aword pid) {
    1b04:	544f5250 	strbpl	r5, [pc], #-592	; 1b0c <kill+0x8>
		pid = (aword) __pi_curr;
    1b08:	3732315f 			; <UNDEFINED> instruction: 0x3732315f
	j = NULL;
    1b0c:	0036395f 	eorseq	r3, r6, pc, asr r9
	for_all_tasks (i) {
    1b10:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	syserror (EREQPAR, "kpi");
    1b14:	4152455f 	cmpmi	r2, pc, asr r5
    1b18:	435f4553 	cmpmi	pc, #348127232	; 0x14c00000
		if ((aword)i == pid) {
    1b1c:	00464e4f 	subeq	r4, r6, pc, asr #28
    1b20:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				__PCB = i->Next;
    1b24:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
			killev (i);
    1b28:	52505f47 	subspl	r5, r0, #284	; 0x11c
			ufree (i);
    1b2c:	335f544f 	cmpcc	pc, #1325400064	; 0x4f000000
			if (i == __pi_curr)
    1b30:	00305f31 	eorseq	r5, r0, r1, lsr pc
    1b34:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				release;
    1b38:	414d495f 	cmpmi	sp, pc, asr r9
				j->Next = i->Next;
    1b3c:	565f4547 	ldrbpl	r4, [pc], -r7, asr #10
    1b40:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    1b44:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
}
    1b48:	43430046 	movtmi	r0, #12358	; 0x3046
    1b4c:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
    1b50:	5f514552 	svcpl	0x00514552
	if (size < 8)
    1b54:	5346464f 	movtpl	r4, #26191	; 0x664f
		_size = 2;
    1b58:	43005445 	movwmi	r5, #1093	; 0x445
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1b5c:	5f474643 	svcpl	0x00474643
		_size = (((aword)size) + 3) >> 2;
    1b60:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b64:	4f52505f 	svcmi	0x0052505f
		_size = (((aword)size) + 3) >> 2;
    1b68:	33365f54 	teqcc	r6, #84, 30	; 0x150
		if (mevent [MA_NP] . nfail != 255)
    1b6c:	0032335f 	eorseq	r3, r2, pc, asr r3
    1b70:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			mevent [MA_NP] . nfail ++;
    1b74:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
		mnfree [MA_NP] = 0;
    1b78:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
    1b7c:	00305f45 	eorseq	r5, r0, r5, asr #30
		if (m_magic (chunk) != MALLOC_MAGIC)
    1b80:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b84:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
			syserror (EMALLOC, "malc");
    1b88:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
    1b8c:	00315f45 	eorseq	r5, r1, r5, asr #30
		if (m_size (chunk) >= _size)
    1b90:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b94:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
		chunk = m_nextp (chunk)) {
    1b98:	52505f47 	subspl	r5, r0, #284	; 0x11c
		m_setnextp (cc, m_nextp (chunk));
    1b9c:	395f544f 	ldmdbcc	pc, {r0, r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ba0:	34365f35 	ldrtcc	r5, [r6], #-3893	; 0xfffff0cb
    1ba4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
			m_size (chunk) = _size;
    1ba8:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
			cc = chunk + _size + m_hdrlen;
    1bac:	464c5f54 			; <UNDEFINED> instruction: 0x464c5f54
    1bb0:	4b4c435f 	blmi	1312934 <__ccfg+0x12f298c>
			m_size (cc) = waste - m_hdrlen;
    1bb4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
			QFREE;
    1bb8:	43435f47 	movtmi	r5, #16199	; 0x3f47
		mevent [MA_NP] . nfail = 0;
    1bbc:	545f4746 	ldrbpl	r4, [pc], #-1862	; 1bc4 <__pi_malloc+0x70>
		mcfree [MA_NP] -= m_size (chunk);
    1bc0:	504f5f49 	subpl	r5, pc, r9, asr #30
    1bc4:	4e4f4954 			; <UNDEFINED> instruction: 0x4e4f4954
    1bc8:	50470053 	subpl	r0, r7, r3, asr r0
    1bcc:	725f4f49 	subsvc	r4, pc, #292	; 0x124
		m_size (chunk) |= MALLOC_UMASK;
    1bd0:	44646165 	strbtmi	r6, [r4], #-357	; 0xfffffe9b
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1bd4:	2f006f69 	svccs	0x00006f69
		m_size (chunk) |= MALLOC_UMASK;
    1bd8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			mnfree [MA_NP] = mcfree [MA_NP];
    1bdc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
}
    1be0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1be4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1be8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1bec:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1bf0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1bf4:	4349502f 	movtmi	r5, #36911	; 0x902f
    1bf8:	502f534f 	eorpl	r5, pc, pc, asr #6
aword __pi_fork (fsmcode func, aword data) {
    1bfc:	534f6369 	movtpl	r6, #62313	; 0xf369
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c00:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1c04:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1c08:	6f736e65 	svcvs	0x00736e65
		if ((j = __PCB) == NULL)
    1c0c:	702f7372 	eorvc	r7, pc, r2, ror r3	; <UNPREDICTABLE>
	i->Next = NULL;
    1c10:	735f6e69 	cmpvc	pc, #1680	; 0x690
	i->data = data;
    1c14:	6f736e65 	svcvs	0x00736e65
		if ((j = __PCB) == NULL)
    1c18:	00632e72 	rsbeq	r2, r3, r2, ror lr
}
    1c1c:	6b6e756a 	blvs	1b9f1cc <__ccfg+0x1b7f224>
			for (; j->Next != NULL; j = j->Next);
    1c20:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1c24:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
	return (aword) i;
    1c28:	5f726f73 	svcpl	0x00726f73
    1c2c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
	if (mevent [MA_NP] . nwait != 255)
    1c30:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1c34:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    1c38:	5f726f73 	svcpl	0x00726f73
		mevent [MA_NP] . nwait ++;
    1c3c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	wait ((aword)(&(mevent [MA_NP])), state);
    1c40:	72655400 	rsbvc	r5, r5, #0, 8
    1c44:	6162006d 	cmnvs	r2, sp, rrx
void diag (const char *mess, ...) {
    1c48:	6f697463 	svcvs	0x00697463
    1c4c:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
    1c50:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
	diag_disable_int (a, is);
    1c54:	70006563 	andvc	r6, r0, r3, ror #10
    1c58:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    1c5c:	5f006e6f 	svcpl	0x00006e6f
				d = (bc == 16) ? 10000 : 1000000000;
    1c60:	5f69705f 	svcpl	0x0069705f
	diag_disable_int (a, is);
    1c64:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
	while (*mess != '\0') {
    1c68:	00736e6f 	rsbseq	r6, r3, pc, ror #28
	dgout ('\r');
    1c6c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
	dgout ('\n');
    1c70:	5f736e6f 	svcpl	0x00736e6f
    1c74:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1c78:	2f006e6f 	svccs	0x00006e6f
	diag_wait (a);
    1c7c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	diag_enable_int (a, is);
    1c80:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1c84:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
}
    1c88:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1c8c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1c90:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if (*mess == '%') {
    1c94:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1c98:	4349502f 	movtmi	r5, #36911	; 0x902f
			if (*mess == 'l') {
    1c9c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ca0:	534f6369 	movtpl	r6, #62313	; 0xf369
				mess++;
    1ca4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
				val = va_arg (ap, lword);
    1ca8:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
				bc = 32;
    1cac:	75622f4f 	strbvc	r2, [r2, #-3919]!	; 0xfffff0b1
				bc = 16;
    1cb0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			switch (*mess) {
    1cb4:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1cb8:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1cbc:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
				dgout ('%');
    1cc0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1cc4:	72655f74 	rsbvc	r5, r5, #116, 30	; 0x1d0
				dgout (*mess);
    1cc8:	00657361 	rsbeq	r7, r5, r1, ror #6
    1ccc:	6f747075 	svcvs	0x00747075
			switch (*mess) {
    1cd0:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
					v = __pi_hex_enc_table [
    1cd4:	6500305f 	strvs	r3, [r0, #-95]	; 0xffffffa1
					i += 4;
    1cd8:	6c635f65 	stclvs	15, cr5, [r3], #-404	; 0xfffffe6c
					(val >> (bc - i)) & 0xf];
    1cdc:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1ce0:	655f6565 	ldrbvs	r6, [pc, #-1381]	; 1783 <__pi_utimer_set+0x3>
					dgout (v);
    1ce4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    1ce8:	5f656500 	svcpl	0x00656500
				while (i < bc) {
    1cec:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
			mess++;
    1cf0:	6f640065 	svcvs	0x00640065
					d /= 10;
    1cf4:	006e6570 	rsbeq	r6, lr, r0, ror r5
				if ((val >> (bc - 1)) & 1) {
    1cf8:	6f5f6565 	svcvs	0x005f6565
    1cfc:	006e6570 	rsbeq	r6, lr, r0, ror r5
					dgout ('-');
    1d00:	6e6f4357 	mcrvs	3, 3, r4, cr15, cr7, {2}
    1d04:	6d630074 	stclvs	0, cr0, [r3, #-464]!	; 0xfffffe30
						val |= 0xffff0000;
    1d08:	00335f64 	eorseq	r5, r3, r4, ror #30
    1d0c:	705f6565 	subsvc	r6, pc, r5, ror #10
    1d10:	63696e61 	cmnvs	r9, #1552	; 0x610
				d = (bc == 16) ? 10000 : 1000000000;
    1d14:	5f656500 	svcpl	0x00656500
    1d18:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    1d1c:	6f726600 	svcvs	0x00726600
					v = (word) (val / d);
    1d20:	6565006d 	strbvs	r0, [r5, #-109]!	; 0xffffff93
					if (v || d == 1) break;
    1d24:	6165725f 	cmnvs	r5, pc, asr r2
    1d28:	64720064 	ldrbtvs	r0, [r2], #-100	; 0xffffff9c
					d /= 10;
    1d2c:	63007273 	movwvs	r7, #627	; 0x273
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	736f6c63 	cmnvc	pc, #25344	; 0x6300
					dgout (v + '0');
    1d34:	73640065 	cmnvc	r4, #101	; 0x65
    1d38:	00746174 	rsbseq	r6, r4, r4, ror r1
    1d3c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1c88 <diag+0x40>
					d /= 10;
    1d40:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
					val = val - (v * d);
    1d44:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
					if (d == 0) break;
    1d48:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
					v = (word) (val / d);
    1d4c:	6f746b73 	svcvs	0x00746b73
    1d50:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				if (bc == 16)
    1d54:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				d = (bc == 16) ? 10000 : 1000000000;
    1d58:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
					val &= 0xffff;
    1d5c:	2f534f43 	svccs	0x00534f43
					dgout (*s);
    1d60:	4f636950 	svcmi	0x00636950
					s++;
    1d64:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
				while (*s != '\0') {
    1d68:	2f736269 	svccs	0x00736269
    1d6c:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
			dgout (*mess++);
    1d70:	2f656761 	svccs	0x00656761
    1d74:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    1d78:	5f656761 	svcpl	0x00656761
    1d7c:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    1d80:	33303872 	teqcc	r0, #7471104	; 0x720000
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1d84:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    1d88:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
    1d8c:	7063006e 	rsbvc	r0, r3, lr, rrx
    1d90:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
	^ entropy
    1d94:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
}
    1d98:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
    1d9c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1da0:	6f444500 	svcvs	0x00444500
    1da4:	7000656e 	andvc	r6, r0, lr, ror #10
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1da8:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
	word cs = size + hblenb;
    1dac:	61777700 	cmnvs	r7, r0, lsl #14
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1db0:	67007469 	strvs	r7, [r0, -r9, ror #8]
    1db4:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
	p -> length = size;
    1db8:	00657479 	rsbeq	r7, r5, r9, ror r4
}
    1dbc:	5f747570 	svcpl	0x00747570
	if (p->attributes.b.queued) {
    1dc0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1dc4:	6f682f00 	svcvs	0x00682f00
    1dc8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1dcc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		p->attributes.b.queued = 0;
    1dd0:	442f6e65 	strtmi	r6, [pc], #-3685	; 1dd8 <rlp>
    1dd4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1dd8:	4f2f706f 	svcmi	0x002f706f
	deq (p);	// Remove from queue
    1ddc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
}
    1de0:	502f5445 	eorpl	r5, pc, r5, asr #8
	tfree ((address)p);
    1de4:	534f4349 	movtpl	r4, #62281	; 0xf349
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1de8:	6369502f 	cmnvs	r9, #47	; 0x2f
    1dec:	502f534f 	eorpl	r5, pc, pc, asr #6
    1df0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1df4:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    1df8:	2f6c6169 	svccs	0x006c6169
	if (q_empty (q))
    1dfc:	5f726573 	svcpl	0x00726573
    1e00:	2e74756f 	cdpcs	5, 7, cr7, cr4, cr15, {3}
		trigger (q);
    1e04:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
	if (p->attributes.b.urgent) {
    1e08:	756f5f72 	strbvc	r5, [pc, #-3954]!	; e9e <reinit_uart+0x1e>
		p->u.bqueue.next = q->next;
    1e0c:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
		p->u.bqueue.prev = q;
    1e10:	2f656d6f 	svccs	0x00656d6f
		q->next->prev = (qitem_t*) p;
    1e14:	70657473 	rsbvc	r7, r5, r3, ror r4
	p->attributes.b.queued = 1;
    1e18:	2f6e6568 	svccs	0x006e6568
    1e1c:	6b736544 	blvs	1cdb334 <__ccfg+0x1cbb38c>
}
    1e20:	2f706f74 	svccs	0x00706f74
		p->u.bqueue.prev = q->prev;
    1e24:	4f534c4f 	svcmi	0x00534c4f
		q->prev->next = (qitem_t*) p;
    1e28:	2f54454e 	svccs	0x0054454e
		q->prev = (qitem_t*) p;
    1e2c:	4f434950 	svcmi	0x00434950
    1e30:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1e34:	2f534f63 	svccs	0x00534f63
	deq (p);	// Soft dequeue, timer and hook left intact
    1e38:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	switch (dv) {
    1e3c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1e40:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1e44:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1e48:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
			p->attributes.b.urgent = 1;
    1e4c:	5f5f0063 	svcpl	0x005f0063
    1e50:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
			verify_ses (p, "dispose ses");
    1e54:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1e58:	5f726573 	svcpl	0x00726573
    1e5c:	73006e69 	movwvc	r6, #3689	; 0xe69
    1e60:	6f5f7265 	svcvs	0x005f7265
    1e64:	00667475 	rsbeq	r7, r6, r5, ror r4
			verify_phy (p, "dispose phy");
    1e68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1db4 <apb+0xc>
    1e6c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
}
    1e70:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
			enq (oqueues [p->attributes.b.phys], p);
    1e74:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			p->attributes.b.urgent = 1;
    1e78:	6f746b73 	svcvs	0x00746b73
    1e7c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			verify_phy (p, "dispose phy");
    1e80:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1e84:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1e88:	2f534f43 	svccs	0x00534f43
    1e8c:	4f636950 	svcmi	0x00636950
    1e90:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1e94:	2f736269 	svccs	0x00736269
			enq (oqueues [p->attributes.b.phys], p);
    1e98:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1e9c:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
}
    1ea0:	6f5f7265 	svcvs	0x005f7265
			rlp (p);
    1ea4:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
}
    1ea8:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    1eac:	2f656d6f 	svccs	0x00656d6f
    1eb0:	70657473 	rsbvc	r7, r5, r3, ror r4
    1eb4:	2f6e6568 	svccs	0x006e6568
    1eb8:	6b736544 	blvs	1cdb3d0 <__ccfg+0x1cbb428>
    1ebc:	2f706f74 	svccs	0x00706f74
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1ec0:	4f534c4f 	svcmi	0x00534c4f
	if (b->attributes.b.outgoing) {
    1ec4:	2f54454e 	svccs	0x0054454e
	b = header (p);
    1ec8:	4f434950 	svcmi	0x00434950
	if (b->attributes.b.outgoing) {
    1ecc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		verify_ses (b, "tcv02");
    1ed0:	2f534f63 	svccs	0x00534f63
    1ed4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1ed8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1edc:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1ee0:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
		verify_plg (b, tcv_out, "tcv03");
    1ee4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    1ee8:	7300632e 	movwvc	r6, #814	; 0x32e
    1eec:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1ef0:	6900666e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r9, sl, sp, lr}
    1ef4:	65757373 	ldrbvs	r7, [r5, #-883]!	; 0xfffffc8d
    1ef8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    1efc:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1f04 <tcv_endp+0x44>
    1f00:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    1f04:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f08:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
}
    1f0c:	4e646e61 	cdpmi	14, 6, cr6, cr4, cr1, {3}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1f10:	4162006f 	cmnmi	r2, pc, rrx
		rlp (b);
    1f14:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
}
    1f18:	61745364 	cmnvs	r4, r4, ror #6
		rlp (b);
    1f1c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1f20:	6f5f6672 	svcvs	0x005f6672
    1f24:	6672006e 	ldrbtvs	r0, [r2], -lr, rrx
    1f28:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1f2c:	61566200 	cmpvs	r6, r0, lsl #4
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1f30:	6e654c72 	mcrvs	12, 3, r4, cr5, cr2, {3}
    1f34:	6b507000 	blvs	141df3c <__ccfg+0x13fdf94>
    1f38:	65630074 	strbvs	r0, [r3, #-116]!	; 0xffffff8c
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	va_start (ap, plid);
    1f40:	71657246 	cmnvc	r5, r6, asr #4
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1f44:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1f48:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1f4c:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
    1f50:	6b73666e 	blvs	1cdb910 <__ccfg+0x1cbb968>
    1f54:	63746150 	cmnvs	r4, #80, 2
    1f58:	68770068 	ldmdavs	r7!, {r3, r5, r6}^
			syserror (ENODEVICE, "tcv04");
    1f5c:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
		syserror (EMALLOC, "tcv05");
    1f60:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	attp.b.outgoing = 1;
    1f64:	63667200 	cmnvs	r6, #0, 4
    1f68:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1f6c:	4f52505f 	svcmi	0x0052505f
    1f70:	53435f50 	movtpl	r5, #16208	; 0x3f50
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f74:	7000735f 	andvc	r7, r0, pc, asr r3
		if (descriptors [fd] == NULL)
    1f78:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
    1f7c:	00676972 	rsbeq	r6, r7, r2, ror r9
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1f80:	72546672 	subsvc	r6, r4, #119537664	; 0x7200000
		return ERROR;
    1f84:	745f6d69 	ldrbvc	r6, [pc], #-3433	; 1f8c <tcv_open+0x5c>
}
    1f88:	75627200 	strbvc	r7, [r2, #-512]!	; 0xfffffe00
    1f8c:	006c6666 	rsbeq	r6, ip, r6, ror #12
    1f90:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	; 0x44
	s->attpattern.b.session = fd;
    1f94:	5f504f4f 	svcpl	0x00504f4f
    1f98:	4f70005f 	svcmi	0x0070005f
	descriptors [fd] = s;
    1f9c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
	q_init (&(s->rqueue));
    1fa0:	52620074 	rsbpl	r0, r2, #116	; 0x74
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1fa4:	61657065 	cmnvs	r5, r5, rrx
    1fa8:	006b4f74 	rsbeq	r4, fp, r4, ror pc
    1fac:	4978526e 	ldmdbmi	r8!, {r1, r2, r3, r5, r6, r9, ip, lr}^
    1fb0:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1fb4:	66006465 	strvs	r6, [r0], -r5, ror #8
    1fb8:	6f4d6365 	svcvs	0x004d6365
    1fbc:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
	descriptors [fd] = s;
    1fc0:	6f4e7852 	svcvs	0x004e7852
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1fc4:	666f006b 	strbtvs	r0, [pc], -fp, rrx
    1fc8:	6c656466 	cfstrdvs	mvd6, [r5], #-408	; 0xfffffe68
	if (s == NULL)
    1fcc:	70007961 	andvc	r7, r0, r1, ror #18
		syserror (EMALLOC, "tcv05");
    1fd0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1fd4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1fd8:	75437000 	strbvc	r7, [r3, #-0]
    1fdc:	6e457272 	mcrvs	2, 2, r7, cr5, cr2, {3}
    1fe0:	00797274 	rsbseq	r7, r9, r4, ror r2
    1fe4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1fe8:	6d617453 	cfstrdvs	mvd7, [r1, #-332]!	; 0xfffffeb4
    1fec:	72690070 	rsbvc	r0, r9, #112	; 0x70
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ff0:	746e4971 	strbtvc	r4, [lr], #-2417	; 0xfffff68f
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ff4:	61770076 	cmnvs	r7, r6, ror r0
    1ff8:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    1ffc:	6600646d 	strvs	r6, [r0], -sp, ror #8
	plugins [ord] = pl;
    2000:	616d726f 	cmnvs	sp, pc, ror #4
	return 0;
    2004:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
		return ERROR;
    2008:	74730066 	ldrbtvc	r0, [r3], #-102	; 0xffffff9a
}
    200c:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    2010:	00656d69 	rsbeq	r6, r5, r9, ror #26
	verify_fds (fd, "tcv10");
    2014:	70704162 	rsbsvc	r4, r0, r2, ror #2
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2018:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
	verify_fds (fd, "tcv10");
    201c:	73656d69 	cmnvc	r5, #6720	; 0x1a40
    2020:	706d6174 	rsbvc	r6, sp, r4, ror r1
    2024:	654e7000 	strbvs	r7, [lr, #-0]
	verify_plg (b, tcv_frm, "tcv11");
    2028:	6e457478 	mcrvs	4, 2, r7, cr5, cr8, {3}
	b = q_first (rq);
    202c:	00797274 	rsbseq	r7, r9, r4, ror r2
	if (q_end (b, rq)) {
    2030:	635f4652 	cmpvs	pc, #85983232	; 0x5200000
		if (state != WNONE) {
    2034:	7250646d 	subsvc	r6, r0, #1828716544	; 0x6d000000
    2038:	6152706f 	cmpvs	r2, pc, rrx
			when (rq, state);
    203c:	446f6964 	strbtmi	r6, [pc], #-2404	; 2044 <tcv_rnp+0x30>
			release;
    2040:	65537669 	ldrbvs	r7, [r3, #-1641]	; 0xfffff997
	deq (b);	// Dequeue the packet ...
    2044:	00707574 	rsbseq	r7, r0, r4, ror r5
    2048:	65766571 	ldrbvs	r6, [r6, #-1393]!	; 0xfffffa8f
	p = ((address)(b + 1));
    204c:	7000746e 	andvc	r7, r0, lr, ror #8
	verify_plg (b, tcv_frm, "tcv11");
    2050:	6f43746b 	svcvs	0x0043746b
    2054:	7000666e 	andvc	r6, r0, lr, ror #12
    2058:	5f737968 	svcpl	0x00737968
    205c:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    2060:	63003035 	movwvs	r3, #53	; 0x35
    2064:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2068:	72645f30 	rsbvc	r5, r4, #48, 30	; 0xc0
    206c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2070:	63667200 	cmnvs	r6, #0, 4
    2074:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	b->u.pointers.tail =
    2078:	5f53465f 	svcpl	0x0053465f
}
    207c:	66720073 			; <UNDEFINED> instruction: 0x66720073
		return NULL;
    2080:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2084:	53465f44 	movtpl	r5, #28484	; 0x6f44
    2088:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    208c:	776f5078 			; <UNDEFINED> instruction: 0x776f5078
    2090:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
	verify_fds (fd, "tcv16");
    2094:	00774278 	rsbseq	r4, r7, r8, ror r2
								Boolean urg) {
    2098:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
    209c:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
	verify_fds (fd, "tcv16");
    20a0:	506b7366 	rsbpl	r7, fp, r6, ror #6
    20a4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    20a8:	61686300 	cmnvs	r8, r0, lsl #6
	verify_pld (s, tcv_frm, "tcv17");
    20ac:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    20b0:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
    20b4:	6f436874 	svcvs	0x00436874
    20b8:	6200666e 	andvs	r6, r0, #115343360	; 0x6e00000
    20bc:	52616e45 	rsbpl	r6, r1, #1104	; 0x450
    20c0:	00697373 	rsbeq	r7, r9, r3, ror r3
    20c4:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
    20c8:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
	ptrs.head = (word) fd;
    20cc:	72436873 	subvc	r6, r3, #7536640	; 0x730000
	ptrs.tail = (word) urg;
    20d0:	72724563 	rsbsvc	r4, r2, #415236096	; 0x18c00000
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    20d4:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    20d8:	52676966 	rsbpl	r6, r7, #1671168	; 0x198000
		if (state != WNONE) {
    20dc:	6f724666 	svcvs	0x00724666
    20e0:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
}
    20e4:	54620064 	strbtpl	r0, [r2], #-100	; 0xffffff9c
			when (eid, state);
    20e8:	646f4d78 	strbtvs	r4, [pc], #-3448	; 20f0 <tcv_wnps+0x5c>
    20ec:	6e610065 	cdpvs	0, 6, cr0, cr1, cr5, {3}
			release;
    20f0:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    20f4:	4d676643 	stclmi	6, cr6, [r7, #-268]!	; 0xfffffef4
    20f8:	0065646f 	rsbeq	r6, r5, pc, ror #8
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    20fc:	616e4562 	cmnvs	lr, r2, ror #10
    2100:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2104:	436d756e 	cmnmi	sp, #461373440	; 0x1b800000
    2108:	4972726f 	ldmdbmi	r2!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    210c:	7000766e 	andvc	r7, r0, lr, ror #12
    2110:	50717249 	rsbspl	r7, r1, r9, asr #4
		if (state != WNONE) {
    2114:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2118:	61507000 	cmpvs	r0, r0
			tmwait (state);
    211c:	56686374 			; <UNDEFINED> instruction: 0x56686374
    2120:	52006365 	andpl	r6, r0, #-1811939327	; 0x94000001
	b->attributes = s->attpattern;
    2124:	70434346 	subvc	r4, r3, r6, asr #6
		b->attributes.b.urgent = 1;
    2128:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    212c:	61736944 	cmnvs	r3, r4, asr #18
	b->u.pointers.head = ptrs.head;
    2130:	00656c62 	rsbeq	r6, r5, r2, ror #24
	b->u.pointers.tail = length;
    2134:	5078616d 	rsbspl	r6, r8, sp, ror #2
	return (address) (b + 1);
    2138:	654c746b 	strbvs	r7, [ip, #-1131]	; 0xfffffb95
    213c:	6f63006e 	svcvs	0x0063006e
    2140:	6f437272 	svcvs	0x00437272
    2144:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2148:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
    214c:	69620030 	stmdbvs	r2!, {r4, r5}^
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2150:	6f4d7361 	svcvs	0x004d7361
	if (len >= b->u.pointers.tail)
    2154:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2158:	70434346 	subvc	r4, r3, r6, asr #6
    215c:	6e493065 	cdpvs	0, 4, cr3, cr9, cr5, {3}
	if (len > 0) {
    2160:	616e4574 	smcvs	58452	; 0xe454
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2164:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2168:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    216c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		b->u.pointers.tail -= len;
    2170:	00637243 	rsbeq	r7, r3, r3, asr #4
    2174:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    2178:	66496769 	strbvs	r6, [r9], -r9, ror #14
		b->u.pointers.head += len;
    217c:	00636441 	rsbeq	r6, r3, r1, asr #8
    2180:	5f636672 	svcpl	0x00636672
    2184:	5f444d43 	svcpl	0x00444d43
}
    2188:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    218c:	5f58525f 	svcpl	0x0058525f
    2190:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
    2194:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
	verify_fph (phy, "tcv23");
    2198:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    219c:	63667200 	cmnvs	r6, #0, 4
    21a0:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    21a4:	4f52505f 	svcmi	0x0052505f
}
    21a8:	53435f50 	movtpl	r5, #16208	; 0x3f50
	return (physical [phy]) (opt, arg);
    21ac:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
    21b0:	746e6f72 	strbtvc	r6, [lr], #-3954	; 0xfffff08e
    21b4:	4d646e45 	stclmi	14, cr6, [r4, #-276]!	; 0xfffffeec
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    21b8:	0065646f 	rsbeq	r6, r5, pc, ror #8
	if (opt < 0) {
    21bc:	67697274 			; <UNDEFINED> instruction: 0x67697274
		if (fd < 0)
    21c0:	4e726567 	cdpmi	5, 7, cr6, cr2, cr7, {3}
		if (opt == PHYSOPT_PLUGINFO) {
    21c4:	5170006f 	cmnpl	r0, pc, rrx
			if (fd >= TCV_MAX_PLUGS)
    21c8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
			if ((p = plugins [fd]) == NULL)
    21cc:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    21d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
}
    21d4:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
		if (fd >= TCV_MAX_PHYS)
    21d8:	0073635f 	rsbseq	r6, r3, pc, asr r3
		return physinfo [fd];
    21dc:	69737372 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    21e0:	00726854 	rsbseq	r6, r2, r4, asr r8
	verify_fds (fd, "tcv22");
    21e4:	436d756e 	cmnmi	sp, #461373440	; 0x1b800000
    21e8:	4272726f 	rsbsmi	r7, r2, #-268435450	; 0xf0000006
    21ec:	00797375 	rsbseq	r7, r9, r5, ror r3
    21f0:	6c615652 	stclvs	6, cr5, [r1], #-328	; 0xfffffeb8
    21f4:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
}
    21f8:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    21fc:	62006e6f 	andvs	r6, r0, #1776	; 0x6f0
    2200:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
			return 0;
    2204:	48656475 	stmdami	r5!, {r0, r2, r4, r5, r6, sl, sp, lr}^
    2208:	6c007264 	sfmvs	f7, 4, [r0], {100}	; 0x64
    220c:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
    2210:	00697373 	rsbeq	r7, r9, r3, ror r3
    2214:	54646f6d 	strbtpl	r6, [r4], #-3949	; 0xfffff093
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2218:	00657079 	rsbeq	r7, r5, r9, ror r0
    221c:	73614c70 	cmnvc	r1, #112, 24	; 0x7000
	if (dsp != TCV_DSP_PASS) {
    2220:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
		if (ses == NONE)
    2224:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
			syserror (EREQPAR, "tcv26");
    2228:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
		verify_fds (ses, "tcv27");
    222c:	6c754666 	ldclvs	6, cr4, [r5], #-408	; 0xfffffe68
    2230:	7872006c 	ldmdavc	r2!, {r2, r3, r5, r6}^
    2234:	0063615f 	rsbeq	r6, r3, pc, asr r1
    2238:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    223c:	6b73614d 	blvs	1cda778 <__ccfg+0x1cba7d0>
		if ((p = apb (size)) != NULL) {
    2240:	45736300 	ldrbmi	r6, [r3, #-768]!	; 0xfffffd00
    2244:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
		return NULL;
    2248:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
			p->attributes = descriptors [ses] -> attpattern;
    224c:	42620072 	rsbmi	r0, r2, #114	; 0x72
			dispose (p, dsp);
    2250:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
			p->attributes = descriptors [ses] -> attpattern;
    2254:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
			p->attributes.b.outgoing = 0;
    2258:	5f006c61 	svcpl	0x00006c61
			dispose (p, dsp);
    225c:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
			return (address)(p + 1);
    2260:	0030796d 	eorseq	r7, r0, sp, ror #18
    2264:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
	if ((p = apb (size)) != NULL)
    2268:	61526c6f 	cmpvs	r2, pc, ror #24
    226c:	69006574 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
		return (address)(p + 1);
    2270:	5f74696e 	svcpl	0x0074696e
    2274:	66756272 			; <UNDEFINED> instruction: 0x66756272
    2278:	70007366 	andvc	r7, r0, r6, ror #6
    227c:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2280:	6900704f 	stmdbvs	r0, {r0, r1, r2, r3, r6, ip, sp, lr}
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2284:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2288:	62007165 	andvs	r7, r0, #1073741849	; 0x40000019
    228c:	6f747541 	svcvs	0x00747541
		syserror (EREQPAR, "tcv28");
    2290:	73756c46 	cmnvc	r5, #17920	; 0x4600
		syserror (EMALLOC, "tcv29");
    2294:	6e674968 	vnmulvs.f16	s9, s14, s17	; <UNPREDICTABLE>
	physical [phy] = ps;
    2298:	6465726f 	strbtvs	r7, [r5], #-623	; 0xfffffd91
	physinfo [phy] = info;
    229c:	63667200 	cmnvs	r6, #0, 4
    22a0:	6461725f 	strbtvs	r7, [r1], #-607	; 0xfffffda1
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22a4:	704f6f69 	subvc	r6, pc, r9, ror #30
    22a8:	7300745f 	movwvc	r7, #1119	; 0x45f
    22ac:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
		syserror (EMALLOC, "tcv29");
    22b0:	67697254 			; <UNDEFINED> instruction: 0x67697254
    22b4:	00726567 	rsbseq	r6, r2, r7, ror #10
	q_init (q);
    22b8:	63746170 	cmnvs	r4, #112, 2
}
    22bc:	616d4968 	cmnvs	sp, r8, ror #18
    22c0:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
    22c4:	6b73666e 	blvs	1cdbc84 <__ccfg+0x1cbbcdc>
    22c8:	5f667200 	svcpl	0x00667200
    22cc:	0066666f 	rsbeq	r6, r6, pc, ror #12
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 221c <tcvp_new+0x4>
	verify_fph (phy, "tcv30");
    22d4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    22d8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    22dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	verify_fph (phy, "tcv30");
    22e0:	6f746b73 	svcvs	0x00746b73
    22e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    22e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    22ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    22f0:	2f534f43 	svccs	0x00534f43
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    22f4:	4f636950 	svcmi	0x00636950
    22f8:	43432f53 	movtmi	r2, #16211	; 0x3f53
		if (plugins [plg] == NULL)
    22fc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2300:	7066722f 	rsbvc	r7, r6, pc, lsr #4
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2304:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
}
    2308:	45620063 	strbmi	r0, [r2, #-99]!	; 0xffffff9d
    230c:	6f43616e 	svcvs	0x0043616e
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2310:	62007272 	andvs	r7, r0, #536870919	; 0x20000007
    2314:	664f7346 	strbvs	r7, [pc], -r6, asr #6
    2318:	6c644966 			; <UNDEFINED> instruction: 0x6c644966
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    231c:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    2320:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    2324:	70007346 	andvc	r7, r0, r6, asr #6
    2328:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    232c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2330:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
	len -= (ap.head + ap.tail);
    2334:	726f5763 	rsbvc	r5, pc, #25952256	; 0x18c0000
    2338:	706f0064 	rsbvc	r0, pc, r4, rrx
    233c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2340:	74617000 	strbtvc	r7, [r1], #-0
    2344:	65476863 	strbvs	r6, [r7, #-2147]	; 0xfffff79d
    2348:	6b73666e 	blvs	1cdbd08 <__ccfg+0x1cbbd60>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    234c:	00656652 	rsbeq	r6, r5, r2, asr r6
    2350:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
    2354:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
	return 1;
    2358:	61720065 	cmnvs	r2, r5, rrx
    235c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2360:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2364:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
    2368:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
	verify_fph (phy, "tcv32");
    236c:	7000646f 	andvc	r6, r0, pc, ror #8
    2370:	7267756c 	rsbvc	r7, r7, #108, 10	; 0x1b000000
    2374:	46520074 			; <UNDEFINED> instruction: 0x46520074
    2378:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    237c:	43746e49 	cmnmi	r4, #1168	; 0x490
    2380:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
	oq = oqueues [phy];
    2384:	756c7000 	strbvc	r7, [ip, #-0]!
	b = q_first (oq);
    2388:	00686367 	rsbeq	r6, r8, r7, ror #6
	if (q_end (b, oq)) {
    238c:	61746172 	cmnvs	r4, r2, ror r1
	*len = b->length;
    2390:	00656c62 	rsbeq	r6, r5, r2, ror #24
	deq (b);	// Dequeue the packet ...
    2394:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
}
    2398:	5274756f 	rsbspl	r7, r4, #465567744	; 0x1bc00000
		return NULL;
    239c:	66007365 	strvs	r7, [r0], -r5, ror #6
    23a0:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
    23a4:	71657246 	cmnvc	r5, r6, asr #4
    23a8:	65727000 	ldrbvs	r7, [r2, #-0]!
	verify_fph (phy, "tcv33");
    23ac:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
    23b0:	536e0065 	cmnpl	lr, #101	; 0x65
    23b4:	74694277 	strbtvc	r4, [r9], #-631	; 0xfffffd89
    23b8:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
    23bc:	704f7973 	subvc	r7, pc, r3, ror r9	; <UNPREDICTABLE>
    23c0:	446f6c00 	strbtmi	r6, [pc], #-3072	; 23c8 <tcvphy_top+0x1c>
	oq = oqueues [phy];
    23c4:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
	b = q_first (oq);
    23c8:	73007265 	movwvc	r7, #613	; 0x265
		return NULL;
    23cc:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
	return (address)(b + 1);
    23d0:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
}
    23d4:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    23d8:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    23dc:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    23e0:	73666e65 	cmnvc	r6, #1616	; 0x650
	verify_plg (b, tcv_xmt, "tcv34");
    23e4:	7872006b 	ldmdavc	r2!, {r0, r1, r3, r5, r6}^
	hblock_t *b = header (pkt);
    23e8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	verify_plg (b, tcv_xmt, "tcv34");
    23ec:	6f4e6200 	svcvs	0x004e6200
    23f0:	6f507346 	svcvs	0x00507346
    23f4:	55726577 	ldrbpl	r6, [r2, #-1399]!	; 0xfffffa89
    23f8:	524f0070 	subpl	r0, pc, #112	; 0x70
    23fc:	746e7645 	strbtvc	r7, [lr], #-1605	; 0xfffff9bb
    2400:	73466200 	movtvc	r6, #25088	; 0x6200
    2404:	4266664f 	rsbmi	r6, r6, #82837504	; 0x4f00000
	dispose (b, plugins [b->attributes.b.plugin] ->
    2408:	00797375 	rsbseq	r7, r9, r5, ror r3
}
    240c:	74617276 	strbtvc	r7, [r1], #-630	; 0xfffffd8a
	dispose (b, plugins [b->attributes.b.plugin] ->
    2410:	78740065 	ldmdavc	r4!, {r0, r2, r5, r6}^
    2414:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
    2418:	4d620073 	stclmi	0, cr0, [r2, #-460]!	; 0xfffffe34
}
    241c:	69466273 	stmdbvs	r6, {r0, r1, r4, r5, r6, r9, sp, lr}^
    while(1)
    2420:	00747372 	rsbseq	r7, r4, r2, ror r3
{
    2424:	645f7872 	ldrbvs	r7, [pc], #-2162	; 242c <ResetISR+0x8>
    SetupTrimDevice();
    2428:	78720065 	ldmdavc	r2!, {r0, r2, r5, r6}^
    pui32Src = &_etext;
    242c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2430:	616e655f 	cmnvs	lr, pc, asr r5
    __asm("    ldr     r0, =_bss\n"
    2434:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2438:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    243c:	30737365 	rsbscc	r7, r3, r5, ror #6
    2440:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2444:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
   main();
    2448:	66720031 			; <UNDEFINED> instruction: 0x66720031
    FaultISR();
    244c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
        *pui32Dest++ = *pui32Src++;
    2450:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2454:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2458:	4f494441 	svcmi	0x00494441
    245c:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
    2460:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2464:	735f5055 	cmpvc	pc, #85	; 0x55
    2468:	63667200 	cmnvs	r6, #0, 4
    246c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
static byte get_byte () {
    2470:	4f52505f 	svcmi	0x0052505f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2474:	41525f50 	cmpmi	r2, r0, asr pc
    2478:	5f4f4944 	svcpl	0x004f4944
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    247c:	5f564944 	svcpl	0x00564944
    2480:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
		if (ee_inp)
    2484:	00745f50 	rsbseq	r5, r4, r0, asr pc
			b |= 1;
    2488:	5f636672 	svcpl	0x00636672
    248c:	5f444d43 	svcpl	0x00444d43
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2490:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
	for (b = 0, i = 0; i < 8; i++) {
    2494:	5f58525f 	svcpl	0x0058525f
}
    2498:	61700074 	cmnvs	r0, r4, ror r0
    249c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    24a0:	526e0065 	rsbpl	r0, lr, #101	; 0x65
static void put_byte (byte b) {
    24a4:	6f745378 	svcvs	0x00745378
    24a8:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
    24ac:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    24b0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
		if (b & 0x80)
    24b4:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    24b8:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24bc:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
	for (i = 0; i < 8; i++) {
    24c0:	78720064 	ldmdavc	r2!, {r2, r5, r6}^
		b <<= 1;
    24c4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	for (i = 0; i < 8; i++) {
    24c8:	65527000 	ldrbvs	r7, [r2, #-0]
}
    24cc:	65764f67 	ldrbvs	r4, [r6, #-3943]!	; 0xfffff099
    24d0:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    24d4:	61720065 	cmnvs	r2, r5, rrx
    24d8:	5f726d74 	svcpl	0x00726d74
	put_byte (cmd);
    24dc:	41620074 	smcmi	8196	; 0x2004
    24e0:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
}
    24e4:	73735264 	cmnvc	r3, #100, 4	; 0x40000006
    24e8:	66720069 	ldrbtvs	r0, [r2], -r9, rrx
static void wwait (word st, word del) {
    24ec:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
    24f0:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    24f4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
	while (dopen && (rdsr () & 1)) {
    24f8:	735f7475 	cmpvc	pc, #1962934272	; 0x75000000
    24fc:	63667200 	cmnvs	r6, #0, 4
    2500:	6f72705f 	svcvs	0x0072705f
    2504:	4f785270 	svcmi	0x00785270
	put_byte (CMD_RDSR);
    2508:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
	r = get_byte ();
    250c:	00745f74 	rsbseq	r5, r4, r4, ror pc
    2510:	43434652 	movtmi	r4, #13906	; 0x3652
	while (dopen && (rdsr () & 1)) {
    2514:	6b636f6c 	blvs	18de2cc <__ccfg+0x18be324>
}
    2518:	61736944 	cmnvs	r3, r4, asr #18
		if (st == WNONE)
    251c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2520:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
			mdelay (1);
    2524:	79536769 	ldmdbvc	r3, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    2528:	0068746e 	rsbeq	r7, r8, lr, ror #8
			delay (del, st);
    252c:	6f637874 	svcvs	0x00637874
    2530:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
			release;
    2534:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
    2538:	007a536e 	rsbseq	r5, sl, lr, ror #6
    253c:	5f636672 	svcpl	0x00636672
static void ready () {
    2540:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
	if (dopen) {
    2544:	5f704f6f 	svcpl	0x00704f6f
		wwait (WNONE, 1);
    2548:	52620073 	rsbpl	r0, r2, #115	; 0x73
    254c:	61657065 	cmnvs	r5, r5, rrx
    2550:	6b6f4e74 	blvs	1bd5f28 <__ccfg+0x1bb5f80>
	dstat = 0;
    2554:	6c696600 	stclvs	6, cr6, [r9], #-0
}
    2558:	4f726574 	svcmi	0x00726574
    255c:	66720070 			; <UNDEFINED> instruction: 0x66720070
    2560:	61645f63 	cmnvs	r4, r3, ror #30
	udelay (1);
    2564:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
    2568:	47797274 			; <UNDEFINED> instruction: 0x47797274
	udelay (1);
    256c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
		dopen = DOPEN_TEMP;
    2570:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2574:	63667200 	cmnvs	r6, #0, 4
    2578:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    257c:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
static void cclose () {
    2580:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
	if (dopen == DOPEN_TEMP) {
    2584:	6172656e 	cmnvs	r2, lr, ror #10
    2588:	00745f6c 	rsbseq	r5, r4, ip, ror #30
		wwait (WNONE, 1);
    258c:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    2590:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
	cmd_0 (CMD_DP);
    2594:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    2598:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
		dopen = 0;
    259c:	006b7366 	rsbeq	r7, fp, r6, ror #6
}
    25a0:	4f78526e 	svcmi	0x0078526e
word ee_open () {
    25a4:	5252006b 	subspl	r0, r2, #107	; 0x6b
	ready ();
    25a8:	5f007465 	svcpl	0x00007465
	dopen = DOPEN_PERM;
    25ac:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    25b0:	0031796d 	eorseq	r7, r1, sp, ror #18
}
    25b4:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
	if (dopen) {
    25b8:	32796d6d 	rsbscc	r6, r9, #6976	; 0x1b40
    25bc:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 25c4 <ee_close+0xc>
		dopen = DOPEN_TEMP;
    25c0:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
		cclose ();
    25c4:	496e0033 	stmdbmi	lr!, {r0, r1, r4, r5}^
}
    25c8:	61726574 	cmnvs	r2, r4, ror r5
int ser_out (word st, const char *m) {
    25cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if ((prcs = running (__outserial)) != 0) {
    25d0:	6b700073 	blvs	1c027a4 <__ccfg+0x1be27fc>
    25d4:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    25d8:	6c757200 	lfmvs	f7, 2, [r5], #-0
		join (prcs, st);
    25dc:	46520065 	ldrbmi	r0, [r2], -r5, rrx
		release;
    25e0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
	if (*m)
    25e4:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
		prcs = strlen (m) +1;
    25e8:	52007852 	andpl	r7, r0, #5373952	; 0x520000
    25ec:	50434346 	subpl	r4, r3, r6, asr #6
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    25f0:	6e493045 	cdpvs	0, 4, cr3, cr9, cr5, {2}
    25f4:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    25f8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
		umwait (st);
    25fc:	76726400 	ldrbtvc	r6, [r2], -r0, lsl #8
    2600:	73637270 	cmnvc	r3, #112, 4
		prcs =  m [1] + 3;
    2604:	72506e00 	subsvc	r6, r0, #0, 28
	if (*m)
    2608:	426d6165 	rsbmi	r6, sp, #1073741849	; 0x40000019
		strcpy (buf, m);
    260c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    2610:	6b636200 	blvs	18dae18 <__ccfg+0x18bae70>
	if (runstrand (__outserial, buf) == 0) {
    2614:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    2618:	0072656d 	rsbseq	r6, r2, sp, ror #10
		ufree (buf);
    261c:	5f636672 	svcpl	0x00636672
    2620:	5f444d43 	svcpl	0x00444d43
		memcpy (buf, m, prcs);
    2624:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    2628:	5f58545f 	svcpl	0x0058545f
    262c:	66720074 			; <UNDEFINED> instruction: 0x66720074
}
    2630:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2634:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
int ser_in (word st, char *buf, int len) {
    2638:	545f504f 	ldrbpl	r5, [pc], #-79	; 2640 <ser_in+0x8>
    263c:	00735f58 	rsbseq	r5, r3, r8, asr pc
	if (len == 0)
    2640:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0xfffffb97
	if (__inpline == NULL) {
    2644:	6600704f 	strvs	r7, [r0], -pc, asr #32
		if ((prcs = running (__inserial)) == 0) {
    2648:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    264c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
			prcs = runthread (__inserial);
    2650:	61507000 	cmpvs	r0, r0
    2654:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
			if (prcs == 0) {
    2658:	63006261 	movwvs	r6, #609	; 0x261
				npwait (st);
    265c:	43734673 	cmnmi	r3, #120586240	; 0x7300000
		release;
    2660:	00666e6f 	rsbeq	r6, r6, pc, ror #28
		join (prcs, st);
    2664:	5f646d63 	svcpl	0x00646d63
    2668:	00747273 	rsbseq	r7, r4, r3, ror r2
	if (*__inpline == NULL) // bin cmd
    266c:	4f734662 	svcmi	0x00734662
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2670:	63006666 	movwvs	r6, #1638	; 0x666
	if (prcs >= len)
    2674:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
		prcs = len-1;
    2678:	73694d67 	cmnvc	r9, #6592	; 0x19c0
	memcpy (buf, __inpline, prcs);
    267c:	63644163 	cmnvs	r4, #-1073741800	; 0xc0000018
    2680:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    2684:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	ufree (__inpline);
    2688:	68436200 	stmdavs	r3, {r9, sp, lr}^
	__inpline = NULL;
    268c:	6464416b 	strbtvs	r4, [r4], #-363	; 0xfffffe95
	if (*buf) // if it's NULL, it's a bin cmd
    2690:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
		buf [prcs] = '\0';
    2694:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
}
    2698:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
		prcs = strlen (__inpline);
    269c:	6b73666e 	blvs	1cdc05c <__ccfg+0x1cbc0b4>
    26a0:	50657043 	rsbpl	r7, r5, r3, asr #32
		return 0;
    26a4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    26a8:	63667200 	cmnvs	r6, #0, 4
    26ac:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
int ser_outf (word st, const char *m, ...) {
    26b0:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    26b4:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
	if ((prcs = running (__outserial)) != 0) {
    26b8:	5f545241 	svcpl	0x00545241
    26bc:	5f544152 	svcpl	0x00544152
		join (prcs, st);
    26c0:	66720073 			; <UNDEFINED> instruction: 0x66720073
    26c4:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
		release;
    26c8:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
	if ((buf = vform (NULL, m, ap)) == NULL) {
    26cc:	535f434e 	cmppl	pc, #939524097	; 0x38000001
    26d0:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
    26d4:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
		umwait (st);
    26d8:	7000745f 	andvc	r7, r0, pc, asr r4
    26dc:	656c7961 	strbvs	r7, [ip, #-2401]!	; 0xfffff69f
	if (runstrand (__outserial, buf) == 0) {
    26e0:	756e006e 	strbvc	r0, [lr, #-110]!	; 0xffffff92
    26e4:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
    26e8:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
		ufree (buf);
    26ec:	73740079 	cmnvc	r4, #121	; 0x79
		npwait (st);
    26f0:	00746174 	rsbseq	r6, r4, r4, ror r1
}
    26f4:	65735562 	ldrbvs	r5, [r3, #-1378]!	; 0xfffffa9e
    26f8:	00637243 	rsbeq	r7, r3, r3, asr #4
    26fc:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    2700:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
int ser_inf (word st, const char *fmt, ...) {
    2704:	536b7366 	cmnpl	fp, #-1744830463	; 0x98000001
    2708:	61507379 	cmpvs	r0, r9, ror r3
	if (fmt == NULL)
    270c:	00686374 	rsbeq	r6, r8, r4, ror r3
	if (__inpline == NULL) {
    2710:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
		if ((prcs = running (__inserial)) == 0) {
    2714:	6f697461 	svcvs	0x00697461
    2718:	7363006e 	cmnvc	r3, #110	; 0x6e
			prcs = runthread (__inserial);
    271c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2720:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
			if (prcs == 0) {
    2724:	65755161 	ldrbvs	r5, [r5, #-353]!	; 0xfffffe9f
				npwait (st);
    2728:	745f6575 	ldrbvc	r6, [pc], #-1397	; 2730 <ser_inf+0x2c>
		release;
    272c:	6b536e00 	blvs	14ddf34 <__ccfg+0x14bdf8c>
		join (prcs, st);
    2730:	70007069 	andvc	r7, r0, r9, rrx
    2734:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
	va_start (ap, fmt);
    2738:	46520064 	ldrbmi	r0, [r2], -r4, rrx
	prcs = vscan (__inpline, fmt, ap);
    273c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    2740:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
	ufree (__inpline);
    2744:	72007854 	andvc	r7, r0, #84, 16	; 0x540000
	__inpline = NULL;
    2748:	72466665 	subvc	r6, r6, #105906176	; 0x6500000
}
    274c:	52007165 	andpl	r7, r0, #1073741849	; 0x40000019
    2750:	6c434346 	mcrrvs	3, 4, r4, r3, cr6
    2754:	456b636f 	strbmi	r6, [fp, #-879]!	; 0xfffffc91
		return 0;
    2758:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    275c:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    2760:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2764:	70795472 	rsbsvc	r5, r9, r2, ror r4
    2768:	544b0065 	strbpl	r0, [fp], #-101	; 0xffffff9b
    276c:	702f504d 	eorvc	r5, pc, sp, asr #32
	RF_cmdFs.frequency = 
    2770:	5f67756c 	svcpl	0x0067756c
}
    2774:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2778:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    277c:	6f5f7663 	svcvs	0x005f7663
    2780:	6e5f7475 	mrcvs	4, 2, r7, cr15, cr5, {3}
static int option (int opt, address val) {
    2784:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    2788:	5f766374 	svcpl	0x00766374
    278c:	5f766372 	svcpl	0x00766372
    2790:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2794:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2798:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
    279c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    27a0:	6374006c 	cmnvs	r4, #108	; 0x6c
    27a4:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
    27a8:	756e5f6d 	strbvc	r5, [lr, #-3949]!	; 0xfffff093
    27ac:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    27b0:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
    27b4:	6e5f6f6c 	cdpvs	15, 5, cr6, cr15, cr12, {3}
			goto RVal;
    27b8:	006c6c75 	rsbeq	r6, ip, r5, ror ip
			_BIS (dstate, DSTATE_RXON);
    27bc:	5f766374 	svcpl	0x00766374
    27c0:	5f746d78 	svcpl	0x00746d78
	int ret = 0;
    27c4:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
			p_trigger (drvprcs, qevent);
    27c8:	756f6200 	strbvc	r6, [pc, #-512]!	; 25d0 <ser_out+0x4>
    27cc:	0073646e 	rsbseq	r6, r3, lr, ror #8
    27d0:	6373646e 	cmnvs	r3, #1845493760	; 0x6e000000
    27d4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    27d8:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
    27dc:	00746e61 	rsbseq	r6, r4, r1, ror #28
    27e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 272c <ser_inf+0x28>
    27e4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    27e8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    27ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
}
    27f0:	6f746b73 	svcvs	0x00746b73
			_BIC (dstate, DSTATE_RXON);
    27f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    27f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			statid = (val == NULL) ? 0 : *val;
    27fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2800:	2f534f43 	svccs	0x00534f43
	int ret = 0;
    2804:	4f636950 	svcmi	0x00636950
			ret = (int) statid;
    2808:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	if (val != NULL)
    280c:	2f736269 	svccs	0x00736269
		*val = ret;
    2810:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			ret = rbuffl + 2;
    2814:	5f2f6c61 	svcpl	0x002f6c61
    2818:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
			if (val != NULL) {
    281c:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
				memcpy (val, &rxstat,
    2820:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    2824:	6f5f5f00 	svcvs	0x005f5f00
				memset (&rxstat, 0, 
    2828:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    282c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
			if (val == NULL)
    2830:	4f5f5f00 	svcmi	0x005f5f00
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2834:	52575f4d 	subspl	r5, r7, #308	; 0x134
    2838:	00455449 	subeq	r5, r5, r9, asr #8
				utimer_set (bckf_timer, *val);
    283c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2840:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2844:	2f006c61 	svccs	0x00006c61
			for (ret = 0; ret < 8; ret++)
    2848:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				if (RF_cmdPropRadioDivSetup.txPower
    284c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
					== patable [ret])
    2850:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
				if (RF_cmdPropRadioDivSetup.txPower
    2854:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			for (ret = 0; ret < 8; ret++)
    2858:	706f746b 	rsbvc	r7, pc, fp, ror #8
    285c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2860:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2864:	4349502f 	movtmi	r5, #36911	; 0x902f
    2868:	502f534f 	eorpl	r5, pc, pc, asr #6
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    286c:	534f6369 	movtpl	r6, #62313	; 0xf369
    2870:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
			_BIS (dstate, DSTATE_IRST);
    2874:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    2878:	61697265 	cmnvs	r9, r5, ror #4
    287c:	5f5f2f6c 	svcpl	0x005f2f6c
			ret = (int) channel;
    2880:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
			goto RVal;
    2884:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
				(*val > 7) ? 7 : *val;
    2888:	2f00632e 	svccs	0x0000632e
    288c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2890:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    2894:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
			plugch ();
    2898:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			_BIS (dstate, DSTATE_IRST);
    289c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    28a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			ret = (int) vrate;
    28a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    28a8:	4349502f 	movtmi	r5, #36911	; 0x902f
    28ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    28b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    28b4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    28b8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    28bc:	61697265 	cmnvs	r9, r5, ror #4
    28c0:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    28c4:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    28c8:	67410063 	strbvs	r0, [r1, -r3, rrx]
    28cc:	006e6961 	rsbeq	r6, lr, r1, ror #18
    28d0:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
    28d4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			syserror (EREQPAR, "cc13 op");
    28d8:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    28dc:	73726170 	cmnvc	r2, #112, 2
    28e0:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
    28e4:	006d726f 	rsbeq	r7, sp, pc, ror #4
    28e8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
    28ec:	5f645f79 	svcpl	0x00645f79
    28f0:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    28f4:	6f682f00 	svcvs	0x00682f00
    28f8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    28fc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2900:	442f6e65 	strtmi	r6, [pc], #-3685	; 2908 <option+0x184>
    2904:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2908:	4f2f706f 	svcmi	0x002f706f
    290c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2910:	502f5445 	eorpl	r5, pc, r5, asr #8
static void issue_cmd (lword cmd) {
    2914:	534f4349 	movtpl	r4, #62281	; 0xf349
    2918:	6369502f 	cmnvs	r9, #47	; 0x2f
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    291c:	502f534f 	eorpl	r5, pc, pc, asr #6
    2920:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    2924:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
		if (res != 0x86)
    2928:	2f6c6169 	svccs	0x006c6169
			syserror (EHARDWARE, "hang ic0");
    292c:	61637376 	smcvs	14134	; 0x3736
    2930:	00632e6e 	rsbeq	r2, r3, lr, ror #28
		if (cnt-- == 0) {
    2934:	61637376 	smcvs	14134	; 0x3736
			diag ("HUP %lx %lx", cmd, res);
    2938:	6552006e 	ldrbvs	r0, [r2, #-110]	; 0xffffff92
    293c:	5f797274 	svcpl	0x00797274
			syserror (EHARDWARE, "hang ic0");
    2940:	776c5f64 	strbvc	r5, [ip, -r4, ror #30]!
		udelay (1);
    2944:	0064726f 	rsbeq	r7, r4, pc, ror #4
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2948:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2894 <option+0x110>
}
    294c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    2950:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    2954:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2958:	6f746b73 	svcvs	0x00746b73
static void rx_de () {
    295c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	if ((dstate & DSTATE_RXAC) == 0)
    2960:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2964:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2968:	2f534f43 	svccs	0x00534f43
	_BIC (dstate, DSTATE_RXAC);
    296c:	4f636950 	svcmi	0x00636950
    2970:	43432f53 	movtmi	r2, #16211	; 0x3f53
}
    2974:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2978:	616d732f 	cmnvs	sp, pc, lsr #6
    297c:	66727472 			; <UNDEFINED> instruction: 0x66727472
static void rf_off () {
    2980:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	if ((dstate & DSTATE_RFON) == 0)
    2984:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    2988:	706c5f73 	rsbvc	r5, ip, r3, ror pc
	IntDisable (INT_RFC_CPE_0);
    298c:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
    2990:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    2994:	7470746e 	ldrbtvc	r7, [r0], #-1134	; 0xfffffb92
	RFCAdi3VcoLdoVoltageMode (false);
    2998:	00745f72 	rsbseq	r5, r4, r2, ror pc
	RFCSynthPowerDown ();
    299c:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    29a0:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    29a4:	5f007365 	svcpl	0x00007365
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    29a8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    29ac:	5f323374 	svcpl	0x00323374
	OSCHF_SwitchToRcOscTurnOffXosc ();
    29b0:	49620074 	stmdbmi	r2!, {r2, r4, r5, r6}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    29b4:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    29b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    29bc:	61530064 	cmpvs	r3, r4, rrx
	_BIC (dstate, DSTATE_RFON);
    29c0:	61486566 	cmpvs	r8, r6, ror #10
    29c4:	75416970 	strbvc	r6, [r1, #-2416]	; 0xfffff690
}
    29c8:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    29cc:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    29d0:	46007463 	strmi	r7, [r0], -r3, ror #8
    29d4:	5f525450 	svcpl	0x00525450
    29d8:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    29dc:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    29e0:	00545f44 	subseq	r5, r4, r4, asr #30
    29e4:	4f524f4e 	svcmi	0x00524f4e
		if (cmd->status == tstat)
    29e8:	50435f4d 	subpl	r5, r3, sp, asr #30
		if (timeout-- == 0) {
    29ec:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    29f0:	4e006469 	cdpmi	4, 0, cr6, cr0, cr9, {3}
    29f4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 28c0 <option+0x13c>
    29f8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
			syserror (EHARDWARE, "rt2");
    29fc:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    2a00:	61530065 	cmpvs	r3, r5, rrx
		udelay (1);
    2a04:	61486566 	cmpvs	r8, r6, ror #10
		if (cmd->status == tstat)
    2a08:	6f566970 	svcvs	0x00566970
}
    2a0c:	5f006469 	svcpl	0x00006469
    2a10:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a14:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2a1c <rf_on.part.0+0x8>
    2a18:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
static void rf_on () {
    2a1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a20:	2f2e2e2f 	svccs	0x002e2e2f
	OSCHF_TurnOnXosc();
    2a24:	76697264 	strbtvc	r7, [r9], -r4, ror #4
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a28:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2a2c:	64612f62 	strbtvs	r2, [r1], #-3938	; 0xfffff09e
    2a30:	00632e69 	rsbeq	r2, r3, r9, ror #28
    2a34:	20554e47 	subscs	r4, r5, r7, asr #28
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a38:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
    2a3c:	20332e39 	eorscs	r2, r3, r9, lsr lr
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a40:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2a44:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	issue_cmd (
    2a48:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    2a4c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2a50:	5b202965 	blpl	80cfec <__ccfg+0x7ed044>
    2a54:	2f4d5241 	svccs	0x004d5241
    2a58:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
   pPatchTab[80] = 0;
    2a5c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
   } while (--nIterations);
    2a60:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
   pPatchTab[53] = 2;
    2a64:	6172622d 	cmnvs	r2, sp, lsr #4
    2a68:	2068636e 	rsbcs	r6, r8, lr, ror #6
   pPatchTab[55] = 3;
    2a6c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
   pPatchTab[110] = 4;
    2a70:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
   pPatchTab[107] = 5;
    2a74:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
   pPatchTab[65] = 6;
    2a78:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
    2a7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
   pPatchTab[57] = 1;
    2a80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
   pIrqPatch[1] = _IRQ_PATCH_0;
    2a84:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
   const uint32_t *pS = patchGenfskRfe;
    2a88:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
      t2 = *pS++;
    2a8c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
      t4 = *pS++;
    2a90:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
      t6 = *pS++;
    2a94:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      t8 = *pS++;
    2a98:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
      *pD++ = t1;
    2a9c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
      *pD++ = t2;
    2aa0:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
      *pD++ = t3;
    2aa4:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
      *pD++ = t5;
    2aa8:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
      *pD++ = t7;
    2aac:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
   } while (--nIterations);
    2ab0:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
    2ab4:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
      *pD++ = t8;
    2ab8:	662d2067 	strtvs	r2, [sp], -r7, rrx
   } while (--nIterations);
    2abc:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2ac0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
   *pD++ = t2;
    2ac4:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
   *pD++ = t3;
    2ac8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
   *pD++ = t4;
    2acc:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
   *pD++ = t5;
    2ad0:	61746164 	cmnvs	r4, r4, ror #2
    2ad4:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
	RFCAdi3VcoLdoVoltageMode (true);
    2ad8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2adc:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
       	RFCRfTrimSet (&rfTrim);
    2ae0:	006d7361 	rsbeq	r7, sp, r1, ror #6
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2ae4:	72745066 	rsbsvc	r5, r4, #102	; 0x66
    2ae8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2aec:	4f565f52 	svcmi	0x00565f52
    2af0:	555f4449 	ldrbpl	r4, [pc, #-1097]	; 26af <ser_in+0x77>
	issue_cmd ((lword)&cmd_srt);
    2af4:	38544e49 	ldmdacc	r4, {r0, r3, r6, r9, sl, fp, lr}^
    2af8:	4300545f 	movwmi	r5, #1119	; 0x45f
	issue_cmd ((lword)&RF_cmdFs);
    2afc:	654a5c3a 	strbvs	r5, [sl, #-3130]	; 0xfffff3c6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b00:	6e696b6e 	vnmulvs.f64	d22, d9, d30
    2b04:	6f6a5c73 	svcvs	0x006a5c73
    2b08:	465c7362 	ldrbmi	r7, [ip], -r2, ror #6
	IntEnable (INT_RFC_CPE_0);
    2b0c:	6f724757 	svcvs	0x00724757
	_BIC (dstate, DSTATE_IRST);
    2b10:	442d7075 	strtmi	r7, [sp], #-117	; 0xffffff8b
    2b14:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2b18:	62694c72 	rsbvs	r4, r9, #29184	; 0x7200
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b1c:	726f775c 	rsbvc	r7, pc, #92, 14	; 0x1700000
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b20:	6170736b 	cmnvs	r0, fp, ror #6
	IntEnable (INT_RFC_CPE_0);
    2b24:	6d5c6563 	cfldr64vs	mvdx6, [ip, #-396]	; 0xfffffe74
    2b28:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
}
    2b2c:	6f5c7365 	svcvs	0x005c7365
	IntEnable (INT_RFC_CPE_0);
    2b30:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2b34:	63635c74 	cmnvs	r3, #116, 24	; 0x7400
    2b38:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2b3c:	6168635f 	cmnvs	r8, pc, asr r3
    2b40:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    2b44:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0xfffffaa1
    2b48:	6972645c 	ldmdbvs	r2!, {r2, r3, r4, r6, sl, sp, lr}^
    2b4c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2b50:	625c6269 	subsvs	r6, ip, #-1879048186	; 0x90000006
    2b54:	675c6e69 	ldrbvs	r6, [ip, -r9, ror #28]
    2b58:	75006363 	strvc	r6, [r0, #-867]	; 0xfffffc9d
    2b5c:	69533874 	ldmdbvs	r3, {r2, r4, r5, r6, fp, ip, sp}^
    2b60:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    2b64:	524f4e00 	subpl	r4, pc, #0, 28
    2b68:	415f4d4f 	cmpmi	pc, pc, asr #26
    2b6c:	61424e4f 	cmpvs	r2, pc, asr #28
    2b70:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
    2b74:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2b78:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2b7c:	47657275 			; <UNDEFINED> instruction: 0x47657275
    2b80:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    2b84:	76004367 	strvc	r4, [r0], -r7, ror #6
    2b88:	61746c6f 	cmnvs	r4, pc, ror #24
    2b8c:	6c536567 	cfldr64vs	mvdx6, [r3], {103}	; 0x67
    2b90:	0065706f 	rsbeq	r7, r5, pc, rrx
static void rx_int_enable () {
    2b94:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2b98:	5f323374 	svcpl	0x00323374
    2b9c:	5f5f0074 	svcpl	0x005f0074
    2ba0:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    2ba4:	2e00745f 	cfmvsrcs	mvf0, r7
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2ba8:	2f2e2e2f 	svccs	0x002e2e2f
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2bac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2bb0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2bb4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2bb8:	2f62696c 	svccs	0x0062696c
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bbc:	5f6e6f61 	svcpl	0x006e6f61
    2bc0:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    2bc4:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bc8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2bcc:	726f4370 	rsbvc	r4, pc, #112, 6	; 0xc0000001
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2bd0:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
		if (db->status == DATA_ENTRY_FINISHED) {
    2bd4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2bd8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    2bdc:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
			nr++;
    2be0:	7200706d 	andvc	r7, r0, #109	; 0x6d
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2be4:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    2be8:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2bec:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
    2bf0:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
				__dp [pl + 1] = __dp [pl] - 128;
    2bf4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
				pl = __dp [1] + 2;
    2bf8:	6553746e 	ldrbvs	r7, [r3, #-1134]	; 0xfffffb92
				__dp [pl + 1] = __dp [pl] - 128;
    2bfc:	4f4e0063 	svcmi	0x004e0063
    2c00:	5f4d4f52 	svcpl	0x004d4f52
				__dp [pl] = 0;
    2c04:	524e4f41 	subpl	r4, lr, #260	; 0x104
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c08:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
    2c0c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2c10:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2a48 <rf_on.part.0+0x34>
			db->status = DATA_ENTRY_PENDING;
    2c14:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c18:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c1c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
				diag ("BAD RX");
    2c20:	33697500 	cmncc	r9, #0, 10
    2c24:	63655332 	cmnvs	r5, #-939524096	; 0xc8000000
	if (nr) {
    2c28:	53646e6f 	cmnpl	r4, #1776	; 0x6f0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c2c:	65526365 	ldrbvs	r6, [r2, #-869]	; 0xfffffc9b
}
    2c30:	5f006461 	svcpl	0x00006461
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c34:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    2c38:	5f343674 	svcpl	0x00343674
    2c3c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
}
    2c40:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2c44:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2c48:	62755374 	rsbsvs	r5, r5, #116, 6	; 0xd0000001
    2c4c:	00636553 	rsbeq	r6, r3, r3, asr r5
    2c50:	4f524f4e 	svcmi	0x00524f4e
    2c54:	4f415f4d 	svcmi	0x00415f4d
    2c58:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    2c5c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2c60:	36746e65 	ldrbtcc	r6, [r4], -r5, ror #28
thread (cc1350_driver)
    2c64:	74694234 	strbtvc	r4, [r9], #-564	; 0xfffffdcc
    2c68:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2c6c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    2c70:	72756300 	rsbsvc	r6, r5, #0, 6
    2c74:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
		if (dstate & DSTATE_IRST) {
    2c78:	00637452 	rsbeq	r7, r3, r2, asr r4
    2c7c:	41636573 	smcmi	13907	; 0x3653
    2c80:	7553646e 	ldrbvc	r6, [r3, #-1134]	; 0xfffffb92
			rf_off ();
    2c84:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
			_BIC (dstate,
    2c88:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2c8c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		if (dstate & DSTATE_RXAC) {
    2c90:	2f2e2e2f 	svccs	0x002e2e2f
    2c94:	76697264 	strbtvc	r7, [r9], -r4, ror #4
			if ((dstate & DSTATE_RXON) == 0)
    2c98:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
				rx_de ();
    2c9c:	6f612f62 	svcvs	0x00612f62
		if (paylen == 0) {
    2ca0:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    2ca4:	00632e63 	rsbeq	r2, r3, r3, ror #28
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2ca8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    2cac:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    2cb0:	524f4e00 	subpl	r4, pc, #0, 28
    2cb4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2cb8:	61625550 	cmnvs	r2, r0, asr r5
    2cbc:	72706573 	rsbsvc	r6, r0, #482344960	; 0x1cc00000
    2cc0:	74654769 	strbtvc	r4, [r5], #-1897	; 0xfffff897
    2cc4:	524f4e00 	subpl	r4, pc, #0, 28
    2cc8:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2ccc:	65645550 	strbvs	r5, [r4, #-1360]!	; 0xfffffab0
    2cd0:	0079616c 	rsbseq	r6, r9, ip, ror #2
    2cd4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		} else if (dstate & DSTATE_RXON) {
    2cd8:	00746552 	rsbseq	r6, r4, r2, asr r5
	if (dstate & DSTATE_RFON)
    2cdc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2ce0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
		re->status = DATA_ENTRY_PENDING;
    2ce4:	2f2e0074 	svccs	0x002e0074
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2ce8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	issue_cmd ((lword)&RF_cmdPropRx);
    2cec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	_BIS (dstate, DSTATE_RXAC);
    2cf0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2cf4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2cf8:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    2cfc:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
	if (dstate & DSTATE_RXAC)
    2d00:	524f4e00 	subpl	r4, pc, #0, 28
    2d04:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
				if (statid != 0xffff)
    2d08:	72705550 	rsbsvc	r5, r0, #80, 10	; 0x14000000
    2d0c:	73616d69 	cmnvc	r1, #6720	; 0x1a40
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d10:	4f4e006b 	svcmi	0x004e006b
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d14:	5f4d4f52 	svcpl	0x004d4f52
		if (paylen == 0) {
    2d18:	4343534f 	movtmi	r5, #13135	; 0x334f
			wait (qevent, DR_LOOP);
    2d1c:	6b636f6c 	blvs	18dead4 <__ccfg+0x18beb2c>
    2d20:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
			if (dstate & DSTATE_RXAC) {
    2d24:	65536563 	ldrbvs	r6, [r3, #-1379]	; 0xfffffa9d
    2d28:	50460074 	subpl	r0, r6, r4, ror r0
				rx_int_enable ();
    2d2c:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
			release;
    2d30:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
			} else if (dstate & DSTATE_RFON) {
    2d34:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
				delay (offdelay, DR_GOOF);
    2d38:	00545f32 	subseq	r5, r4, r2, lsr pc
    2d3c:	52545046 	subspl	r5, r4, #70	; 0x46
    2d40:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
		if (bckf_timer) {
    2d44:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
			wait (qevent, DR_LOOP);
    2d48:	4e00545f 	cfmvsrmi	mvf0, r5
    2d4c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2c18 <rx_int_enable+0x84>
    2d50:	43534f5f 	cmpmi	r3, #380	; 0x17c
			delay (bckf_timer, DR_LOOP);
    2d54:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d58:	756f536b 	strbvc	r5, [pc, #-875]!	; 29f5 <wait_cmd.constprop.0+0x19>
			if (dstate & DSTATE_RXAC)
    2d5c:	47656372 			; <UNDEFINED> instruction: 0x47656372
    2d60:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
	if (dstate & DSTATE_RFON)
    2d64:	4f323369 	svcmi	0x00323369
    2d68:	53006373 	movwpl	r6, #883	; 0x373
		rx_de ();
    2d6c:	63656c65 	cmnvs	r5, #25856	; 0x6500
		RF_cmdPropTx . status = 0;
    2d70:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2ba8 <rx_int_enable+0x14>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2d74:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    2d78:	50460066 	subpl	r0, r6, r6, rrx
    2d7c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
		issue_cmd ((lword)&cmd_cs);
    2d80:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
		if (dstate & DSTATE_IRST)
    2d84:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    2d88:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    2d8c:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d90:	4f63736f 	svcmi	0x0063736f
    2d94:	56435f6e 	strbpl	r5, [r3], -lr, ror #30
			delay (1, DR_XMIT);
    2d98:	524f4e00 	subpl	r4, pc, #0, 28
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2d9c:	4f5f4d4f 	svcmi	0x005f4d4f
    2da0:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2da4:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0xfffffea1
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2da8:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    2dac:	77536f54 			; <UNDEFINED> instruction: 0x77536f54
				RF_cmdPropTx . status = 0;
    2db0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2db4:	6f586f54 	svcvs	0x00586f54
				issue_cmd ((lword)&RF_cmdPropTx);
    2db8:	48006373 	stmdami	r0, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
				proceed (DR_XMIT);
    2dbc:	756f5346 	strbvc	r5, [pc, #-838]!	; 2a7e <rf_on.part.0+0x6a>
    2dc0:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
			txtries++;
    2dc4:	53656661 	cmnpl	r5, #101711872	; 0x6100000
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2dc8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2dcc:	65740068 	ldrbvs	r0, [r4, #-104]!	; 0xffffff98
    2dd0:	6f58706d 	svcvs	0x0058706d
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2dd4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
		goto DR_LOOP__;
    2dd8:	656e0066 	strbvs	r0, [lr, #-102]!	; 0xffffff9a
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ddc:	61745377 	cmnvs	r4, r7, ror r3
		paylen = 0;
    2de0:	70757472 	rsbsvc	r7, r5, r2, ror r4
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2de4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
		txtries = 0;
    2de8:	73556e49 	cmpvc	r5, #1168	; 0x490
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2dec:	72617000 	rsbvc	r7, r1, #0
    2df0:	31506d61 	cmpcc	r0, r1, ror #26
    2df4:	72617000 	rsbvc	r7, r1, #0
    2df8:	32506d61 	subscc	r6, r0, #6208	; 0x1840
    2dfc:	72617000 	rsbvc	r7, r1, #0
		    tcvphy_top (physid) == NULL)
    2e00:	33506d61 	cmpcc	r0, #6208	; 0x1840
    2e04:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 1f0c <tcv_endp+0x4c>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e08:	31746e69 	cmncc	r4, r9, ror #28
    2e0c:	00745f36 	rsbseq	r5, r4, r6, lsr pc
			rf_off ();
    2e10:	52545046 	subspl	r5, r4, #70	; 0x46
endthread
    2e14:	5345525f 	movtpl	r5, #21087	; 0x525f
    2e18:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2e1c:	545f3344 	ldrbpl	r3, [pc], #-836	; 2e24 <cc1350_driver+0x1c0>
    2e20:	65727000 	ldrbvs	r7, [r2, #-0]!
    2e24:	756f6976 	strbvc	r6, [pc, #-2422]!	; 24b6 <put_byte+0x12>
    2e28:	61745373 	cmnvs	r4, r3, ror r3
    2e2c:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2e30:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2e34:	73556e49 	cmpvc	r5, #1168	; 0x490
    2e38:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2e3c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e40:	2f2e2e2f 	svccs	0x002e2e2f
    2e44:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2e48:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2e4c:	736f2f62 	cmnvc	pc, #392	; 0x188
    2e50:	00632e63 	rsbeq	r2, r3, r3, ror #28
void RFCCPE0IntHandler (void) {
    2e54:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e58:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		_BIS (dstate, DSTATE_IRST);
    2e5c:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2e60:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
    2e64:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2e68:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2e6c:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2e70:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
	p_trigger (drvprcs, qevent);
    2e74:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2e78:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2e7c:	73655200 	cmnvc	r5, #0, 4
    2e80:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    2e84:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2e88:	524f4e00 	subpl	r4, pc, #0, 28
    2e8c:	4f5f4d4f 	svcmi	0x005f4d4f
    2e90:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2e94:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
    2e98:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
    2e9c:	0063736f 	rsbeq	r7, r3, pc, ror #6
	RISE_N_SHINE;
    2ea0:	52545046 	subspl	r5, r4, #70	; 0x46
    2ea4:	5345525f 	movtpl	r5, #21087	; 0x525f
    2ea8:	45445445 	strbmi	r5, [r4, #-1093]	; 0xfffffbbb
}
    2eac:	00545f56 	subseq	r5, r4, r6, asr pc
    2eb0:	52545046 	subspl	r5, r4, #70	; 0x46
    2eb4:	5345525f 	movtpl	r5, #21087	; 0x525f
    2eb8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2ebc:	545f3244 	ldrbpl	r3, [pc], #-580	; 2ec4 <phys_cc1350>
    2ec0:	73655200 	cmnvc	r5, #0, 4
void phys_cc1350 (int phy, int mbs) {
    2ec4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
	if (rbuffl != 0)
    2ec8:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2ecc:	6f697461 	svcvs	0x00697461
		syserror (ETOOMANY, "cc13");
    2ed0:	6100336e 	tstvs	r0, lr, ror #6
		syserror (EREQPAR, "cc13 mb");
    2ed4:	6156706d 	cmpvs	r6, sp, rrx
	if (mbs == 0)
    2ed8:	0065756c 	rsbeq	r7, r5, ip, ror #10
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2edc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
		syserror (EREQPAR, "cc13 mb");
    2ee0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2ee4:	61636f4c 	cmnvs	r3, ip, asr #30
	i = 0;
    2ee8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	rbuffl = (byte) mbs;
    2eec:	4f4e0034 	svcmi	0x004e0034
		db->config.type = 0;	// General (data in structure)
    2ef0:	5f4d4f52 	svcpl	0x004d4f52
	rbuffl = (byte) mbs;
    2ef4:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2ef8:	77535f46 	ldrbvc	r5, [r3, -r6, asr #30]
    2efc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
		if (db == NULL)
    2f00:	63526f54 	cmpvs	r2, #84, 30	; 0x150
			syserror (EMALLOC, "cc13");
    2f04:	5463734f 	strbtpl	r7, [r3], #-847	; 0xfffffcb1
    2f08:	4f6e7275 	svcmi	0x006e7275
    2f0c:	6f586666 	svcvs	0x00586666
		db->status = DATA_ENTRY_PENDING;
    2f10:	46006373 			; <UNDEFINED> instruction: 0x46006373
		if (i)
    2f14:	5f525450 	svcpl	0x00525450
			da->pNextEntry = (byte*) db;
    2f18:	5658414d 	ldrbpl	r4, [r8], -sp, asr #2
		db->length = rbuffl + 2;
    2f1c:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2f24 <phys_cc1350+0x60>
    2f20:	6c655300 	stclvs	3, cr5, [r5], #-0
		db->config.type = 0;	// General (data in structure)
    2f24:	41746365 	cmnmi	r4, r5, ror #6
		db->length = rbuffl + 2;
    2f28:	6f434344 	svcvs	0x00434344
	db->pNextEntry = (byte*) re;
    2f2c:	4942706d 	stmdbmi	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f30:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2f34:	6c656400 	cfstrdvs	mvd6, [r5], #-0
	if (rbuffs == NULL)
    2f38:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
	rbuffs->pCurrEntry = (byte*) re;
    2f3c:	4d00656d 	cfstr32mi	mvfx6, [r0, #-436]	; 0xfffffe4c
	rbuffs->pLastEntry = NULL;
    2f40:	61567861 	cmpvs	r6, r1, ror #16
    2f44:	0065756c 	rsbeq	r7, r5, ip, ror #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f48:	4f524f4e 	svcmi	0x00524f4e
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2f4c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2f50:	50485f43 	subpl	r5, r8, r3, asr #30
    2f54:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
	rbuffl -= 2;
    2f58:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f5c:	46657669 	strbtmi	r7, [r5], -r9, ror #12
	rbuffl -= 2;
    2f60:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
	physid = phy;
    2f64:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f68:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f6c:	65477465 	strbvs	r7, [r7, #-1125]	; 0xfffffb9b
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2f70:	4f4e0074 	svcmi	0x004e0074
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2f74:	5f4d4f52 	svcpl	0x004d4f52
    2f78:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	utimer_add (&bckf_timer);
    2f7c:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
	drvprcs = runthread (cc1350_driver);
    2f80:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    2f84:	72437465 	subvc	r7, r3, #1694498816	; 0x65000000
    2f88:	61747379 	cmnvs	r4, r9, ror r3
	if (drvprcs == 0)
    2f8c:	706d416c 	rsbvc	r4, sp, ip, ror #2
		syserror (ERESOURCE, "cc13");
    2f90:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
    2f94:	4d006564 	cfstr32mi	mvfx6, [r0, #-400]	; 0xfffffe70
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2f98:	566e6165 	strbtpl	r6, [lr], -r5, ror #2
    2f9c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2fa0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fa4:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2fa8:	56524553 			; <UNDEFINED> instruction: 0x56524553
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2fac:	5f314445 	svcpl	0x00314445
    2fb0:	72430054 	subvc	r0, r3, #84	; 0x54
    2fb4:	00323363 	eorseq	r3, r2, r3, ror #6
    2fb8:	74656c46 	strbtvc	r6, [r5], #-3142	; 0xfffff3ba
    2fbc:	72656863 	rsbvc	r6, r5, #6488064	; 0x630000
    2fc0:	47003233 	smladxmi	r0, r3, r2, r3
    2fc4:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2fc8:	64497069 	strbvs	r7, [r9], #-105	; 0xffffff97
    2fcc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	plugch ();
    2fd0:	454d5f52 	strbmi	r5, [sp, #-3922]	; 0xfffff0ae
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2fd4:	41564e41 	cmpmi	r6, r1, asr #28
    2fd8:	00545f4c 	subseq	r5, r4, ip, asr #30
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2fdc:	52545046 	subspl	r5, r4, #70	; 0x46
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2fe0:	4344415f 	movtmi	r4, #16735	; 0x415f
    2fe4:	504d4f43 	subpl	r4, sp, r3, asr #30
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2fe8:	5f4e4942 	svcpl	0x004e4942
}
    2fec:	50460054 	subpl	r0, r6, r4, asr r0
    2ff0:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2ff4:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
    2ff8:	5f464552 	svcpl	0x00464552
    2ffc:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
    3000:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    3004:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    3008:	706e4941 	rsbvc	r4, lr, r1, asr #18
    300c:	46007475 			; <UNDEFINED> instruction: 0x46007475
    3010:	5f525450 	svcpl	0x00525450
    3014:	504d4f43 	subpl	r4, sp, r3, asr #30
    3018:	5f4e4941 	svcpl	0x004e4941
    301c:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
    3020:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    3024:	5861746c 	stmdapl	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
    3028:	736f0032 	cmnvc	pc, #50	; 0x32
    302c:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
    3030:	61626f6c 	cmnvs	r2, ip, ror #30
    3034:	4800736c 	stmdami	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    3038:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    303c:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    3040:	71657246 	cmnvc	r5, r6, asr #4
    3044:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    3048:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    304c:	61746c65 	cmnvs	r4, r5, ror #24
    3050:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    3054:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    3058:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    305c:	496e4f63 	stmdbmi	lr!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    3060:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    3064:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3068:	6d655461 	cfstrdvs	mvd5, [r5, #-388]!	; 0xfffffe7c
    306c:	6e695370 	mcrvs	3, 3, r5, cr9, cr0, {3}
    3070:	6f586563 	svcvs	0x00586563
    3074:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    3078:	74696600 	strbtvc	r6, [r9], #-1536	; 0xfffffa00
    307c:	61726150 	cmnvs	r2, r0, asr r1
    3080:	7300736d 	movwvc	r7, #877	; 0x36d
    3084:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    3088:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    308c:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    3090:	74007355 	strvc	r7, [r0], #-853	; 0xfffffcab
    3094:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    3098:	4f63736f 	svcmi	0x0063736f
    309c:	435f6666 	cmpmi	pc, #106954752	; 0x6600000
    30a0:	534f0056 	movtpl	r0, #61526	; 0xf056
    30a4:	53664843 	cmnpl	r6, #4390912	; 0x430000
    30a8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    30ac:	61655265 	cmnvs	r5, r5, ror #4
    30b0:	61007964 	tstvs	r0, r4, ror #18
    30b4:	6f43706d 	svcvs	0x0043706d
    30b8:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    30bc:	734f0031 	movtvc	r0, #61489	; 0xf031
    30c0:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
    30c4:	61626f6c 	cmnvs	r2, ip, ror #30
    30c8:	745f736c 	ldrbvc	r7, [pc], #-876	; 30d0 <tcv_ope_null+0x40>
    30cc:	52414800 	subpl	r4, r1, #0, 16
    30d0:	50415f44 	subpl	r5, r1, r4, asr #30
    30d4:	00545f49 	subseq	r5, r4, r9, asr #30
strand (__outserial, const char*)
    30d8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    30dc:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    30e0:	6b61576c 	blvs	1858e98 <__ccfg+0x1838ef0>
    30e4:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
endstrand
    30e8:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    30ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	ptr = data;
    30f0:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    30f4:	4f006b6c 	svcmi	0x00006b6c
	if (*ptr)
    30f8:	66484353 			; <UNDEFINED> instruction: 0x66484353
		len = strlen (ptr);
    30fc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3100:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3104:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3108:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    310c:	52435f52 	subpl	r5, r3, #328	; 0x148
    3110:	5f323343 	svcpl	0x00323343
    3114:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
	len -= quant;
    3118:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    311c:	46004367 	strmi	r4, [r0], -r7, ror #6
    3120:	5f525450 	svcpl	0x00525450
	if (len == 0) {
    3124:	564e494d 	strbpl	r4, [lr], -sp, asr #18
		ufree (data);
    3128:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 3130 <__outserial+0x58>
		finish;
    312c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    3130:	46485f52 			; <UNDEFINED> instruction: 0x46485f52
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3134:	52554f53 	subspl	r4, r5, #332	; 0x14c
    3138:	41534543 	cmpmi	r3, r3, asr #10
    313c:	57534546 	ldrbpl	r4, [r3, -r6, asr #10]
    3140:	48435449 	stmdami	r3, {r0, r3, r6, sl, ip, lr}^
    3144:	4d00545f 	cfstrsmi	mvf5, [r0, #-380]	; 0xfffffe84
strand (__inserial, address)
    3148:	61566e69 	cmpvs	r6, r9, ror #28
    314c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3150:	76657270 			; <UNDEFINED> instruction: 0x76657270
    3154:	6d6d694c 			; <UNDEFINED> instruction: 0x6d6d694c
    3158:	35327469 	ldrcc	r7, [r2, #-1129]!	; 0xfffffb97
	if (__inpline != NULL)
    315c:	73556e49 	cmpvc	r5, #1168	; 0x490
    3160:	524f4e00 	subpl	r4, pc, #0, 28
		finish;
    3164:	4f5f4d4f 	svcmi	0x005f4d4f
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3168:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    316c:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    3170:	616c6552 	cmnvs	ip, r2, asr r5
    3174:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
		umwait (IM_INIT);
    3178:	71657246 	cmnvc	r5, r6, asr #4
		release;
    317c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
	savedata (data);
    3180:	66664f79 	uqsub16vs	r4, r6, r9
	len = MAX_LINE_LENGTH;
    3184:	54746573 	ldrbtpl	r6, [r4], #-1395	; 0xfffffa8d
	io (IM_READ, __cport, READ, ptr, 1);
    3188:	4346526f 	movtmi	r5, #25199	; 0x626f
    318c:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    3190:	616d726f 	cmnvs	sp, pc, ror #4
    3194:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
	if (ptr == (char*) data) { // new line
    3198:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0xfffffa8a
    319c:	6c655300 	stclvs	3, cr5, [r5], #-0
		if (*ptr == '\0') { // bin cmd
    31a0:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
			proceed (IM_BIN);
    31a4:	41706d6f 	cmnmi	r0, pc, ror #26
    31a8:	00666552 	rsbeq	r6, r6, r2, asr r5
		if (*ptr < 0x20)
    31ac:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    31b0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
			proceed (IM_READ);
    31b4:	756f536b 	strbvc	r5, [pc, #-875]!	; 2e51 <cc1350_driver+0x1ed>
    31b8:	00656372 	rsbeq	r6, r5, r2, ror r3
	if (*ptr == '\n' || *ptr == '\r') {
    31bc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    31c0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    31c4:	61636f4c 	cmnvs	r3, ip, asr #30
		*ptr = '\0';
    31c8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
		__inpline = (char*)data;
    31cc:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
		finish;
    31d0:	76726573 			; <UNDEFINED> instruction: 0x76726573
	if (len) {
    31d4:	6f4c6465 	svcvs	0x004c6465
		ptr++;
    31d8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    31dc:	00326e6f 	eorseq	r6, r2, pc, ror #28
		len--;
    31e0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
	proceed (IM_READ);
    31e4:	5f363174 	svcpl	0x00363174
	io (IM_BIN, __cport, READ, ptr, 1);
    31e8:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
    31ec:	76726573 			; <UNDEFINED> instruction: 0x76726573
    31f0:	6f4c6465 	svcvs	0x004c6465
    31f4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    31f8:	00356e6f 	eorseq	r6, r5, pc, ror #28
	len -= 2;
    31fc:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
	if (len > *ptr + 1) // 1 for 0x04
    3200:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    3204:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
		len = *ptr + 1;
    3208:	61566e6f 	cmpvs	r6, pc, ror #28
    320c:	0065756c 	rsbeq	r7, r5, ip, ror #10
	ptr++;
    3210:	6f436672 	svcvs	0x00436672
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3214:	72466572 	subvc	r6, r6, #478150656	; 0x1c800000
    3218:	664f7165 	strbvs	r7, [pc], -r5, ror #2
    321c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3220:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
    3224:	72685468 	rsbvc	r5, r8, #104, 8	; 0x68000000
    3228:	6f687365 	svcvs	0x00687365
	len -= quant;
    322c:	4e00646c 	cdpmi	4, 0, cr6, cr0, cr12, {3}
		__inpline = (char*)data;
    3230:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 30fc <__outserial+0x24>
		finish;
    3234:	43534f5f 	cmpmi	r3, #380	; 0x17c
	ptr += quant;
    3238:	445f4648 	ldrbmi	r4, [pc], #-1608	; 3240 <__inserial+0xf8>
    323c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
endstrand
    3240:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    3244:	63657078 	cmnvs	r5, #120	; 0x78
	proceed (IM_BINL);
    3248:	41646574 	smcmi	18004	; 0x4654
endstrand
    324c:	61726576 	cmnvs	r2, r6, ror r5
    3250:	72436567 	subvc	r6, r3, #432013312	; 0x19c00000
    3254:	61747379 	cmnvs	r4, r9, ror r3
    3258:	706d416c 	rsbvc	r4, sp, ip, ror #2
    325c:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
    3260:	6f006564 	svcvs	0x00006564
		if (res && (d < n))
    3264:	66436373 			; <UNDEFINED> instruction: 0x66436373
    3268:	67655267 	strbvs	r5, [r5, -r7, ror #4]!
    326c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    3270:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
			res [d] = (char) c;
    3274:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
		d++;
    3278:	534c4654 	movtpl	r4, #50772	; 0xc654
    327c:	5f455a49 	svcpl	0x00455a49
    3280:	4f4e0054 	svcmi	0x004e0054
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3284:	5f4d4f52 	svcpl	0x004d4f52
    3288:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    328c:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
				enci (10000);
    3290:	61745374 	cmnvs	r4, r4, ror r3
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3294:	70757472 	rsbsvc	r7, r5, r2, ror r4
    3298:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	d = 0;
    329c:	616c4600 	cmnvs	ip, r0, lsl #12
		c = *fm++;
    32a0:	65476873 	strbvs	r6, [r7, #-2163]	; 0xfffff78d
		if (c == '\\') {
    32a4:	7a695374 	bvc	1a5807c <__ccfg+0x1a380d4>
			if ((c = *fm++) == '\0') {
    32a8:	50460065 	subpl	r0, r6, r5, rrx
    32ac:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
				outc ('\\');
    32b0:	41504d4f 	cmpmi	r0, pc, asr #26
			if ((c = *fm++) == '\0') {
    32b4:	5f464552 	svcpl	0x00464552
				outc ('\\');
    32b8:	50460054 	subpl	r0, r6, r4, asr r0
    32bc:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
			outc (c);
    32c0:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    32c4:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
			if (c == '\0')
    32c8:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    32cc:	5f525450 	svcpl	0x00525450
			outc (c);
    32d0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
				outc (val);
    32d4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
				val = (word) va_arg (ap, aword);
    32d8:	00545f35 	subseq	r5, r4, r5, lsr pc
		if (c == '%') {
    32dc:	61726170 	cmnvs	r2, r0, ror r1
    32e0:	0030506d 	eorseq	r5, r0, sp, rrx
			c = *fm++;
    32e4:	4f524f4e 	svcmi	0x00524f4e
			switch (c) {
    32e8:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    32ec:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    32f0:	47746e49 	ldrbmi	r6, [r4, -r9, asr #28]!
    32f4:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
    32f8:	656c4364 	strbvs	r4, [ip, #-868]!	; 0xfffffc9c
    32fc:	70007261 	andvc	r7, r0, r1, ror #4
    3300:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    3304:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
				outc ('%');
    3308:	7a697300 	bvc	1a5ff10 <__ccfg+0x1a3ff68>
    330c:	00745f65 	rsbseq	r5, r4, r5, ror #30
				outc (c);
    3310:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3314:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3318:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
				if (c == '\0')
    331c:	4e007865 	cdpmi	8, 0, cr7, cr0, cr5, {3}
				return d;
    3320:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 31ec <__inserial+0xa4>
}
    3324:	4346525f 	movtmi	r5, #25183	; 0x625f
    3328:	33696441 	cmncc	r9, #1090519040	; 0x41000000
			switch (c) {
    332c:	4c6f6356 	stclmi	3, cr6, [pc], #-344	; 31dc <__inserial+0x94>
    3330:	6f566f64 	svcvs	0x00566f64
    3334:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
				for (i = 12; ; i -= 4) {
    3338:	646f4d65 	strbtvs	r4, [pc], #-3429	; 3340 <__pi_vfparse+0xbc>
				val = (word) va_arg (ap, aword);
    333c:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
						[ (val >> i) & 0xf ]);
    3340:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    3344:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    3348:	525f504f 	subspl	r5, pc, #79	; 0x4f
					outc (__pi_hex_enc_table
    334c:	4f494441 	svcmi	0x00494441
    3350:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
					if (i == 0)
    3354:	745f5055 	ldrbvc	r5, [pc], #-85	; 335c <__pi_vfparse+0xd8>
    3358:	524f4e00 	subpl	r4, pc, #0, 28
				for (i = 12; ; i -= 4) {
    335c:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
				val = (word) va_arg (ap, aword);
    3360:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
				if (c == 'd' && (val & 0x8000) != 0) {
    3364:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				val = (word) va_arg (ap, aword);
    3368:	00746553 	rsbseq	r6, r4, r3, asr r5
				if (c == 'd' && (val & 0x8000) != 0) {
    336c:	4f524f4e 	svcmi	0x00524f4e
    3370:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
					outc ('-');
    3374:	6e795343 	cdpvs	3, 7, cr5, cr9, cr3, {2}
    3378:	6f506874 	svcvs	0x00506874
					val = (~val) + 1;
    337c:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    3380:	006e776f 	rsbeq	r7, lr, pc, ror #14
				for (i = 12; ; i -= 4) {
    3384:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
				enci (10000);
    3388:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    338c:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
    3390:	70006d69 	andvc	r6, r0, r9, ror #26
    3394:	6553704f 	ldrbvs	r7, [r3, #-79]	; 0xffffffb1
    3398:	00707574 	rsbseq	r7, r0, r4, ror r5
    339c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    33a0:	00676649 	rsbeq	r6, r7, r9, asr #12
    33a4:	5f636672 	svcpl	0x00636672
    33a8:	61666564 	cmnvs	r6, r4, ror #10
    33ac:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    33b0:	64417172 	strbvs	r7, [r1], #-370	; 0xfffffe8e
    33b4:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    33b8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3284 <__pi_vfparse>
    33bc:	4346525f 	movtmi	r5, #25183	; 0x625f
    33c0:	50455043 	subpl	r5, r5, r3, asr #32
    33c4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    33c8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    33cc:	66720074 			; <UNDEFINED> instruction: 0x66720074
				if (c == 'd' || c == 'u') {
    33d0:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    33d4:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
					if (c == 'd' &&
    33d8:	525f504f 	subspl	r5, pc, #79	; 0x4f
					val = va_arg (ap, lword);
    33dc:	4f494441 	svcmi	0x00494441
					fm++;
    33e0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
					if (c == 'd' &&
    33e4:	735f5055 	cmpvc	pc, #85	; 0x55
    33e8:	66527000 	ldrbvs	r7, [r2], -r0
						outc ('-');
    33ec:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    33f0:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
						val = (~val) + 1;
    33f4:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
				enci (10000);
    33f8:	61765f65 	cmnvs	r6, r5, ror #30
					enci (1000000000UL);
    33fc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3400:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3404:	2f2e2e2f 	svccs	0x002e2e2f
    3408:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3410 <__pi_vfparse+0x18c>
    340c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3410:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3414:	6366722f 	cmnvs	r6, #-268435454	; 0xf0000002
    3418:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    341c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    3420:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
    3424:	4f494441 	svcmi	0x00494441
    3428:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    342c:	735f5055 	cmpvc	pc, #85	; 0x55
    3430:	63667200 	cmnvs	r6, #0, 4
    3434:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    3438:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    343c:	535f4f49 	cmppl	pc, #292	; 0x124
				} else if (c == 'x') {
    3440:	50555445 	subspl	r5, r5, r5, asr #8
					for (i = 28; ; i -= 4) {
    3444:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
					val = va_arg (ap, lword);
    3448:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
							[ (val >> i) & 0xf ]);
    344c:	6600656c 	strvs	r6, [r0], -ip, ror #10
    3450:	31676663 	cmncc	r7, r3, ror #12
						outc (__pi_hex_enc_table
    3454:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
    3458:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    345c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3328 <__pi_vfparse+0xa4>
						if (i == 0)
    3460:	4346525f 	movtmi	r5, #25183	; 0x625f
    3464:	69725452 	ldmdbvs	r2!, {r1, r4, r6, sl, ip, lr}^
					for (i = 28; ; i -= 4) {
    3468:	4f4e006d 	svcmi	0x004e006d
					outc ('%');
    346c:	5f4d4f52 	svcpl	0x004d4f52
    3470:	44434652 	strbmi	r4, [r3], #-1618	; 0xfffff9ae
    3474:	62726f6f 	rsbsvs	r6, r2, #444	; 0x1bc
					outc ('l');
    3478:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    347c:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
				val = (word) va_arg (ap, aword);
    3480:	4652006f 	ldrbmi	r0, [r2], -pc, rrx
				outc (val);
    3484:	6b634143 	blvs	18d3998 <__ccfg+0x18b39f0>
    3488:	43746e49 	cmnmi	r4, #1168	; 0x490
				while (*st != '\0') {
    348c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3490:	76696400 	strbtvc	r6, [r9], -r0, lsl #8
    3494:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    3498:	524f4e00 	subpl	r4, pc, #0, 28
					outc (*st);
    349c:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    34a0:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
					st++;
    34a4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		c = *fm++;
    34a8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    34ac:	31706d00 	cmncc	r0, r0, lsl #26
    34b0:	00766572 	rsbseq	r6, r6, r2, ror r5
char *vform (char *res, const char *fm, va_list aq) {
    34b4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    34b8:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
	if (res != NULL) {
    34bc:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 32fc <__pi_vfparse+0x78>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    34c0:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    34c4:	61577465 	cmpvs	r7, r5, ror #8
    34c8:	7075656b 	rsbsvc	r6, r5, fp, ror #10
}
    34cc:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 33bc <__pi_vfparse+0x138>
    34d0:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
	fml = strlen (fm) + 17;
    34d4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    34d8:	524f4e00 	subpl	r4, pc, #0, 28
    34dc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
	if ((res = (char*) umalloc (fml)) == NULL)
    34e0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    34e4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    34e8:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3328 <__pi_vfparse+0xa4>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    34ec:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    34f0:	61577465 	cmpvs	r7, r5, ror #8
    34f4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    34f8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 33e8 <__pi_vfparse+0x164>
		ufree (res);
    34fc:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
		goto Again;
    3500:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
	if (buf == NULL || fmt == NULL)
    3504:	31676643 	cmncc	r7, r3, asr #12
int vscan (const char *buf, const char *fmt, va_list ap) {
    3508:	524f4e00 	subpl	r4, pc, #0, 28
	if (buf == NULL || fmt == NULL)
    350c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3510:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3514:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
		    	    case 'u': scanu (lword); break;
    3518:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3358 <__pi_vfparse+0xd4>
			while (isspace (*buf)) buf++;
    351c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    3520:	61577465 	cmpvs	r7, r5, ror #8
	while (*fmt != '\0') {
    3524:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		if (*fmt++ != '%')
    3528:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3418 <__pi_vfparse+0x194>
		switch (*fmt++) {
    352c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    3530:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3534:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    3538:	524f4e00 	subpl	r4, pc, #0, 28
    353c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3540:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3544:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
}
    3548:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3388 <__pi_vfparse+0x104>
		switch (*fmt++) {
    354c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    3550:	61577465 	cmpvs	r7, r5, ror #8
    3554:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    3558:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3448 <__pi_vfparse+0x1c4>
			while (isspace (*buf)) buf++;
    355c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    3560:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3564:	33676643 	cmncc	r7, #70254592	; 0x4300000
    3568:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    356c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3570:	2f2e2e2f 	svccs	0x002e2e2f
			if (*buf == '\0')
    3574:	76697264 	strbtvc	r7, [r9], -r4, ror #4
			if (*buf != ',') {
    3578:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			sap = va_arg (ap, char*);
    357c:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
			nc++;
    3580:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
			if (*buf != ',') {
    3584:	4f4e0063 	svcmi	0x004e0063
				while (!isspace (*buf) && *buf != ',' &&
    3588:	5f4d4f52 	svcpl	0x004d4f52
    358c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3590:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    3594:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    3598:	646f4d65 	strbtvs	r4, [pc], #-3429	; 35a0 <vscan+0x9c>
    359c:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    35a0:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
			while (isspace (*buf)) buf++;
    35a4:	6f54676e 	svcvs	0x0054676e
    35a8:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    35ac:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    35b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    35b4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			if (*buf == ',') buf++;
    35b8:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    35bc:	76655231 			; <UNDEFINED> instruction: 0x76655231
			*sap = '\0';
    35c0:	6f697369 	svcvs	0x00697369
			break;
    35c4:	4f41006e 	svcmi	0x0041006e
		    case 'd': scani (word); break;
    35c8:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    35cc:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
    35d0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    35d4:	66664f72 	uqsub16vs	r4, r6, r2
    35d8:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    35dc:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    35e0:	6f437265 	svcvs	0x00437265
    35e4:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    35e8:	00746573 	rsbseq	r6, r4, r3, ror r5
    35ec:	4f524f4e 	svcmi	0x00524f4e
    35f0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    35f4:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    35f8:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
    35fc:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3600:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
    3604:	5f6d6972 	svcpl	0x006d6972
    3608:	67696475 			; <UNDEFINED> instruction: 0x67696475
    360c:	33697500 	cmncc	r9, #0, 10
    3610:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
    3614:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    3618:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    361c:	006c7463 	rsbeq	r7, ip, r3, ror #8
    3620:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    3624:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 362c <vscan+0x128>
    3628:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    362c:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    3630:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    3634:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
		    case 'u': scanu (word); break;
    3638:	6f437265 	svcvs	0x00437265
    363c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3640:	57746573 			; <UNDEFINED> instruction: 0x57746573
    3644:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3648:	6f724670 	svcvs	0x00724670
    364c:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3650:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    3654:	6b61576e 	blvs	1859414 <__ccfg+0x183946c>
    3658:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    365c:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    3660:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3664:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3668:	524f4e00 	subpl	r4, pc, #0, 28
    366c:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 3674 <vscan+0x170>
    3670:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
    3674:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    3678:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    367c:	6f46746c 	svcvs	0x0046746c
		    case 'x': scanx (word); break;
    3680:	31434372 	hvccc	13362	; 0x3432
    3684:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
    3688:	76655277 			; <UNDEFINED> instruction: 0x76655277
    368c:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    3690:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
    3694:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3698:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    369c:	6f695666 	svcvs	0x00695666
    36a0:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    36a4:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
    36a8:	5f6d6972 	svcpl	0x006d6972
    36ac:	00646f62 	rsbeq	r6, r4, r2, ror #30
    36b0:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    36b4:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    36b8:	6b6c4366 	blvs	1b14458 <__ccfg+0x1af44b0>
    36bc:	72756300 	rsbsvc	r6, r5, #0, 6
    36c0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    36c4:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
    36c8:	006b636f 	rsbeq	r6, fp, pc, ror #6
    36cc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    36d0:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    36d4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    36d8:	006c6156 	rsbeq	r6, ip, r6, asr r1
    36dc:	4f524f4e 	svcmi	0x00524f4e
    36e0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    36e4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    36e8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    36ec:	6f466d69 	svcvs	0x00466d69
    36f0:	616e4172 	smcvs	58386	; 0xe412
    36f4:	61707962 	cmnvs	r0, r2, ror #18
			switch (*fmt++) {
    36f8:	61567373 	cmpvs	r6, r3, ror r3
    36fc:	3165756c 	cmncc	r5, ip, ror #10
    3700:	524f4e00 	subpl	r4, pc, #0, 28
    3704:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3708:	70757465 	rsbsvc	r7, r5, r5, ror #8
    370c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
		    	    case 'd': scani (lword); break;
    3710:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3714:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
    3718:	6f4c726c 	svcvs	0x004c726c
    371c:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3720:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    3724:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3728:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 3560 <vscan+0x5c>
    372c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3730:	72756300 	rsbsvc	r6, r5, #0, 6
    3734:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    3738:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    373c:	6d697600 	stclvs	6, cr7, [r9, #-0]
    3740:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    3744:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3748:	62690030 	rsbvs	r0, r9, #48	; 0x30
    374c:	4f736169 	svcmi	0x00736169
    3750:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    3754:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    3758:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    375c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3760:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3764:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    3768:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
		    	    case 'x': scanx (lword); break;
    376c:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    3770:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 363c <vscan+0x138>
    3774:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3778:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    377c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3780:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3784:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3788:	61466648 	cmpvs	r6, r8, asr #12
    378c:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    3790:	00747261 	rsbseq	r7, r4, r1, ror #4
    3794:	4f524f4e 	svcmi	0x00524f4e
    3798:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    379c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    37a0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    37a4:	6f466d69 	svcvs	0x00466d69
    37a8:	4f635272 	svcmi	0x00635272
    37ac:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    37b0:	61694249 	cmnvs	r9, r9, asr #4
    37b4:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    37b8:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    37bc:	4161746c 	cmnmi	r1, ip, ror #8
    37c0:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    37c4:	4f4e0074 	svcmi	0x004e0074
    37c8:	5f4d4f52 	svcpl	0x004d4f52
    37cc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    37d0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    37d4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    37d8:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
		    	    case 'd': scani (lword); break;
    37dc:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    37e0:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    37e4:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    37e8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    37ec:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    37f0:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    37f4:	66437478 			; <UNDEFINED> instruction: 0x66437478
		    	    case 'u': scanu (lword); break;
    37f8:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    37fc:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
    3800:	61746c65 	cmnvs	r4, r5, ror #24
    3804:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3808:	33697500 	cmncc	r9, #0, 10
    380c:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3810:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    3814:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    3818:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    381c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3820:	4f4e0065 	svcmi	0x004e0065
    3824:	5f4d4f52 	svcpl	0x004d4f52
    3828:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    382c:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3830:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3834:	41726f46 	cmnmi	r2, r6, asr #30
    3838:	6f63706d 	svcvs	0x0063706d
    383c:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
		    	    case 'x': scanx (lword); break;
    3840:	4f4e0031 	svcmi	0x004e0031
    3844:	5f4d4f52 	svcpl	0x004d4f52
			if ((c = *buf++) == '\0')
    3848:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    384c:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
			sap = va_arg (ap, char*);
    3850:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			nc++;
    3854:	41726f46 	cmnmi	r2, r6, asr #30
			break;
    3858:	6f63706d 	svcvs	0x0063706d
			while (isspace (*buf)) buf++;
    385c:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    3860:	4f4e0032 	svcmi	0x004e0032
    3864:	5f4d4f52 	svcpl	0x004d4f52
						*sap++ = *buf++;
    3868:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    386c:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
			while (isspace (*buf)) buf++;
    3870:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3874:	41726f46 	cmnmi	r2, r6, asr #30
    3878:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
		return 0;
    387c:	66756256 			; <UNDEFINED> instruction: 0x66756256
    3880:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
		    case 'x': scanx (word); break;
    3884:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3750 <vscan+0x24c>
    3888:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
		    	    case 'x': scanx (lword); break;
    388c:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3890:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    3894:	66006574 			; <UNDEFINED> instruction: 0x66006574
    3898:	31676663 	cmncc	r7, r3, ror #12
    389c:	61746144 	cmnvs	r4, r4, asr #2
    38a0:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    38a4:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    38a8:	734f6352 	movtvc	r6, #62290	; 0xf352
    38ac:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    38b0:	73616942 	cmnvc	r1, #1081344	; 0x108000
    38b4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    38b8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    38bc:	61740065 	cmnvs	r4, r5, rrx
    38c0:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    38c4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    38c8:	524f4e00 	subpl	r4, pc, #0, 28
    38cc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    38d0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    38d4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    38d8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    38dc:	6152726f 	cmpvs	r2, pc, ror #4
    38e0:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    38e4:	67664374 			; <UNDEFINED> instruction: 0x67664374
    38e8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    38ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38f0:	2f2e2e2f 	svccs	0x002e2e2f
    38f4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    38f8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    38fc:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    3900:	5f707574 	svcpl	0x00707574
    3904:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    3908:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    390c:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    3910:	00636e49 	rsbeq	r6, r3, r9, asr #28
    3914:	4f524f4e 	svcmi	0x00524f4e
    3918:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    391c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3920:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3924:	6f466d69 	svcvs	0x00466d69
    3928:	4f635272 	svcmi	0x00635272
    392c:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3930:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    3934:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    3938:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    393c:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    3940:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 380c <vscan+0x308>
    3944:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3948:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    394c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3950:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3954:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3958:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    395c:	616c7567 	cmnvs	ip, r7, ror #10
    3960:	41726f74 	cmnmi	r2, r4, ror pc
    3964:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    3968:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    396c:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    3970:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    3974:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    3978:	006d6972 	rsbeq	r6, sp, r2, ror r9
    397c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3980:	67695370 			; <UNDEFINED> instruction: 0x67695370
    3984:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    3988:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    398c:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3990:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    3994:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3998:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    399c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    39a0:	41726f46 	cmnmi	r2, r6, asr #30
    39a4:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    39a8:	66756256 			; <UNDEFINED> instruction: 0x66756256
    39ac:	61566e45 	cmpvs	r6, r5, asr #28
    39b0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    39b4:	4f524f4e 	svcmi	0x00524f4e
    39b8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    39bc:	47707574 			; <UNDEFINED> instruction: 0x47707574
    39c0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    39c4:	6f466d69 	svcvs	0x00466d69
    39c8:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    39cc:	6f4d6853 	svcvs	0x004d6853
    39d0:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    39d4:	32336900 	eorscc	r6, r3, #0, 18
    39d8:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    39dc:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    39e0:	61567264 	cmpvs	r6, r4, ror #4
    39e4:	6f6d006c 	svcvs	0x006d006c
    39e8:	6f436564 	svcvs	0x00436564
    39ec:	0031666e 	eorseq	r6, r1, lr, ror #12
    39f0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    39f4:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    39f8:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    39fc:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    3a00:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 38cc <NOROM_AONBatMonTemperatureGetDegC+0x10>
    3a04:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3a08:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3a0c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3a10:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a14:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3a18:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    3a1c:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    3a20:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    3a24:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3a28:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3a2c:	41726f46 	cmnmi	r2, r6, asr #30
    3a30:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3a34:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3a38:	61566e45 	cmpvs	r6, r5, asr #28
    3a3c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3a40:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    3a44:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3a48:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3a4c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3a50:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3a54:	734f3167 	movtvc	r3, #61799	; 0xf167
    3a58:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    3a5c:	62640066 	rsbvs	r0, r4, #102	; 0x66
    3a60:	6f4c726c 	svcvs	0x004c726c
    3a64:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3a68:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    3a6c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3a70:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 38a8 <SafeHapiVoid+0x14>
    3a74:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3a78:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3a7c:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    3a80:	6f466d69 	svcvs	0x00466d69
    3a84:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3a88:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    3a8c:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    3a90:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    3a94:	43646e41 	cmnmi	r4, #1040	; 0x410
    3a98:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    3a9c:	61527277 	cmpvs	r2, r7, ror r2
    3aa0:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    3aa4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3aa8:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    3aac:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    3ab0:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    3ab4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3980 <NOROM_OSCClockSourceSet+0x4c>
    3ab8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3abc:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3ac0:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    3ac4:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    3ac8:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    3acc:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    3ad0:	524f4e00 	subpl	r4, pc, #0, 28
    3ad4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3ad8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3adc:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3ae0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3ae4:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3ae8:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 3930 <NOROM_CPUcpsie+0x4>
    3aec:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    3af0:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    3af4:	6f583233 	svcvs	0x00583233
    3af8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3afc:	00776f52 	rsbseq	r6, r7, r2, asr pc
    3b00:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3b04:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3b08:	6f436648 	svcvs	0x00436648
    3b0c:	4f4e006c 	svcmi	0x004e006c
    3b10:	5f4d4f52 	svcpl	0x004d4f52
    3b14:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3b18:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    3b1c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3b20:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    3b24:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    3b28:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    3b2c:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    3b30:	33697500 	cmncc	r9, #0, 10
    3b34:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    3b38:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    3b3c:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3b40:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    3b44:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 3980 <NOROM_OSCClockSourceSet+0x4c>
    3b48:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    3b4c:	4161746c 	cmnmi	r1, ip, ror #8
    3b50:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    3b54:	33690074 	cmncc	r9, #116	; 0x74
    3b58:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    3b5c:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    3b60:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    3b64:	0061746c 	rsbeq	r7, r1, ip, ror #8
    3b68:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3b6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3b70:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    3b74:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3b78:	6d655472 	cfstrdvs	mvd5, [r5, #-456]!	; 0xfffffe38
    3b7c:	69640070 	stmdbvs	r4!, {r4, r5, r6}^
    3b80:	64566666 	ldrbvs	r6, [r6], #-1638	; 0xfffff99a
    3b84:	63417264 	movtvs	r7, #4708	; 0x1264
    3b88:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    3b8c:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3b90:	72700070 	rsbsvc	r0, r0, #112	; 0x70
    3b94:	61526d63 	cmpvs	r2, r3, ror #26
    3b98:	7465526d 	strbtvc	r5, [r5], #-621	; 0xfffffd93
    3b9c:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3ba0:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
    3ba4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3a70 <NOROM_RFCDoorbellSendTo+0x8>
    3ba8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3bac:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3bb0:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    3bb4:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    3bb8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3bbc:	66416567 	strbvs	r6, [r1], -r7, ror #10
    3bc0:	50726574 	rsbspl	r6, r2, r4, ror r5
    3bc4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3bc8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3bcc:	524f4e00 	subpl	r4, pc, #0, 28
    3bd0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3bd4:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3bd8:	65536c72 	ldrbvs	r6, [r3, #-3186]	; 0xfffff38e
    3bdc:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    3be0:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3be4:	66654265 	strbtvs	r4, [r5], -r5, ror #4
    3be8:	5065726f 	rsbpl	r7, r5, pc, ror #4
    3bec:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3bf0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3bf4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3bf8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3bfc:	2f2e2e2f 	svccs	0x002e2e2f
    3c00:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3c04:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3c08:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3c0c:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    3c10:	632e6c72 			; <UNDEFINED> instruction: 0x632e6c72
    3c14:	524f4e00 	subpl	r4, pc, #0, 28
    3c18:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3c1c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3c20:	65526c72 	ldrbvs	r6, [r2, #-3186]	; 0xfffff38e
    3c24:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
    3c28:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3c2c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    3c30:	33697500 	cmncc	r9, #0, 10
    3c34:	6d6f4432 	cfstrdvs	mvd4, [pc, #-200]!	; 3b74 <NOROM_RFCRfTrimRead+0x98>
    3c38:	736e6961 	cmnvc	lr, #1589248	; 0x184000
    3c3c:	72657000 	rsbvc	r7, r5, #0
    3c40:	64700045 	ldrbtvs	r0, [r0], #-69	; 0xffffffbb
    3c44:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3c48:	33697500 	cmncc	r9, #0, 10
    3c4c:	78754132 	ldmdavc	r5!, {r1, r4, r5, r8, lr}^
    3c50:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3c54:	5000736b 	andpl	r7, r0, fp, ror #6
    3c58:	444d4352 	strbmi	r4, [sp], #-850	; 0xfffffcae
    3c5c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3c60:	616e456e 	cmnvs	lr, lr, ror #10
    3c64:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3c68:	4d726570 	cfldr64mi	mvdx6, [r2, #-448]!	; 0xfffffe40
    3c6c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    3c70:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3c74:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3c78:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3c7c:	7600646f 	strvc	r6, [r0], -pc, ror #8
    3c80:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    3c84:	75007061 	strvc	r7, [r0, #-97]	; 0xffffff9f
    3c88:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3c8c:	70007864 	andvc	r7, r0, r4, ror #16
    3c90:	61745364 	cmnvs	r4, r4, ror #6
    3c94:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
    3c98:	65676e6f 	strbvs	r6, [r7, #-3695]!	; 0xfffff191
    3c9c:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    3ca0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3ca4:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3ca8:	646f6972 	strbtvs	r6, [pc], #-2418	; 3cb0 <NOROM_RFCRTrim+0x84>
    3cac:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    3cb0:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    3cb4:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3cb8:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    3cbc:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3cc0:	54746162 	ldrbtpl	r6, [r4], #-354	; 0xfffffe9e
    3cc4:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    3cc8:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    3ccc:	736f7800 	cmnvc	pc, #0, 16
    3cd0:	776f5063 	strbvc	r5, [pc, -r3, rrx]!
    3cd4:	6f4d7265 	svcvs	0x004d7265
    3cd8:	50006564 	andpl	r6, r0, r4, ror #10
    3cdc:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    3ce0:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    3ce4:	73007465 	movwvc	r7, #1125	; 0x465
    3ce8:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    3cec:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    3cf0:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    3cf4:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    3cf8:	67006174 	smlsdxvs	r0, r4, r1, r6
    3cfc:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    3d00:	6f4d3233 	svcvs	0x004d3233
    3d04:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    3d08:	63004743 	movwvs	r4, #1859	; 0x743
    3d0c:	74537275 	ldrbvc	r7, [r3], #-629	; 0xfffffd8b
    3d10:	00657461 	rsbeq	r7, r5, r1, ror #8
    3d14:	536e6f61 	cmnpl	lr, #388	; 0x184
    3d18:	74637379 	strbtvc	r7, [r3], #-889	; 0xfffffc87
    3d1c:	7277506c 	rsbsvc	r5, r7, #108	; 0x6c
    3d20:	006c7463 	rsbeq	r7, ip, r3, ror #8
    3d24:	69546470 	ldmdbvs	r4, {r4, r5, r6, sl, sp, lr}^
    3d28:	4e00656d 	cfsh32mi	mvfx6, mvfx0, #61
    3d2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3bf8 <NOROM_RFCRfTrimRead+0x11c>
    3d30:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d34:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3d38:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3d3c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    3d40:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3d44:	00676e69 	rsbeq	r6, r7, r9, ror #28
    3d48:	6f6f4c70 	svcvs	0x006f4c70
    3d4c:	5470756b 	ldrbtpl	r7, [r0], #-1387	; 0xfffffa95
    3d50:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3d54:	52647000 	rsbpl	r7, r4, #0
    3d58:	61686365 	cmnvs	r8, r5, ror #6
    3d5c:	50656772 	rsbpl	r6, r5, r2, ror r7
    3d60:	6f697265 	svcvs	0x00697265
    3d64:	6f610064 	svcvs	0x00610064
    3d68:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3d6c:	426e6f6d 	rsbmi	r6, lr, #436	; 0x1b4
    3d70:	76007461 	strvc	r7, [r0], -r1, ror #8
    3d74:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3d78:	536d6972 	cmnpl	sp, #1867776	; 0x1c8000
    3d7c:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3d80:	776f5000 	strbvc	r5, [pc, -r0]!
    3d84:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    3d88:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    3d8c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    3d90:	00745f73 	rsbseq	r5, r4, r3, ror pc
    3d94:	4f524f4e 	svcmi	0x00524f4e
    3d98:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3d9c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3da0:	43445f6c 	movtmi	r5, #20332	; 0x4f6c
    3da4:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    3da8:	61746c6f 	cmnvs	r4, pc, ror #24
    3dac:	6f436567 	svcvs	0x00436567
    3db0:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    3db4:	616e6f69 	cmnvs	lr, r9, ror #30
    3db8:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    3dbc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 3bf4 <NOROM_RFCRfTrimRead+0x118>
    3dc0:	776f7000 	strbvc	r7, [pc, -r0]!
    3dc4:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    3dc8:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    3dcc:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    3dd0:	52500073 	subspl	r0, r0, #115	; 0x73
    3dd4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3dd8:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    3ddc:	72505f54 	subsvc	r5, r0, #84, 30	; 0x150
    3de0:	6972706f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3de4:	72617465 	rsbvc	r7, r1, #1694498816	; 0x65000000
    3de8:	41500079 	cmpmi	r0, r9, ror r0
    3dec:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3df0:	78345f45 	ldmdavc	r4!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3df4:	48430034 	stmdami	r3, {r2, r4, r5}^
    3df8:	545f5049 	ldrbpl	r5, [pc], #-73	; 3e00 <TrimAfterColdResetWakeupFromShutDown+0x80>
    3dfc:	5f455059 	svcpl	0x00455059
    3e00:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3e04:	77003034 	smladxvc	r0, r4, r0, r3
    3e08:	72656661 	rsbvc	r6, r5, #101711872	; 0x6100000
    3e0c:	46006449 	strmi	r6, [r0], -r9, asr #8
    3e10:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3e14:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3e18:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3e1c:	7a694c5f 	bvc	1a56fa0 <__ccfg+0x1a36ff8>
    3e20:	524f4e00 	subpl	r4, pc, #0, 28
    3e24:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3e28:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3e2c:	5f6f666e 	svcpl	0x006f666e
    3e30:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3e34:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3e38:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3e3c:	4f4e0079 	svcmi	0x004e0079
    3e40:	5f4d4f52 	svcpl	0x004d4f52
    3e44:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e48:	6f666e49 	svcvs	0x00666e49
    3e4c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e50:	6b636150 	blvs	18dc398 <__ccfg+0x18bc3f0>
    3e54:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    3e58:	00657079 	rsbeq	r7, r5, r9, ror r0
    3e5c:	4f524f4e 	svcmi	0x00524f4e
    3e60:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e64:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3e68:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3e6c:	77487465 	strbvc	r7, [r8, -r5, ror #8]
    3e70:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3e74:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3e78:	63617000 	cmnvs	r1, #0
    3e7c:	7079546b 	rsbsvc	r5, r9, fp, ror #8
    3e80:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    3e84:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    3e88:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3e90 <NOROM_SetupTrimDevice+0x3c>
    3e8c:	52774800 	rsbspl	r4, r7, #0, 16
    3e90:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3e94:	5f6e6f69 	svcpl	0x006e6f69
    3e98:	48430074 	stmdami	r3, {r2, r4, r5, r6}^
    3e9c:	545f5049 	ldrbpl	r5, [pc], #-73	; 3ea4 <NOROM_SetupTrimDevice+0x50>
    3ea0:	5f455059 	svcpl	0x00455059
    3ea4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3ea8:	43003031 	movwmi	r3, #49	; 0x31
    3eac:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3eb0:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3eb4:	00745f79 	rsbseq	r5, r4, r9, ror pc
    3eb8:	65527768 	ldrbvs	r7, [r2, #-1896]	; 0xfffff898
    3ebc:	48430076 	stmdami	r3, {r1, r2, r4, r5, r6}^
    3ec0:	545f5049 	ldrbpl	r5, [pc], #-73	; 3ec8 <NOROM_SetupTrimDevice+0x74>
    3ec4:	5f455059 	svcpl	0x00455059
    3ec8:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3ecc:	50003035 	andpl	r3, r0, r5, lsr r0
    3ed0:	414b4341 	cmpmi	fp, r1, asr #6
    3ed4:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    3ed8:	00505343 	subseq	r5, r0, r3, asr #6
    3edc:	6f6e696d 	svcvs	0x006e696d
    3ee0:	76655272 			; <UNDEFINED> instruction: 0x76655272
    3ee4:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3ee8:	5f594c49 	svcpl	0x00594c49
    3eec:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3ef0:	525f7878 	subspl	r7, pc, #120, 16	; 0x780000
    3ef4:	48430032 	stmdami	r3, {r1, r4, r5}^
    3ef8:	545f5049 	ldrbpl	r5, [pc], #-73	; 3f00 <NOROM_SetupSetVddrLevel+0x8>
    3efc:	5f455059 	svcpl	0x00455059
    3f00:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f04:	43003035 	movwmi	r3, #53	; 0x35
    3f08:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3f0c:	5f6f666e 	svcpl	0x006f666e
    3f10:	70696843 	rsbvc	r6, r9, r3, asr #16
    3f14:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3f18:	7349796c 	movtvc	r7, #39276	; 0x996c
    3f1c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f20:	46007878 			; <UNDEFINED> instruction: 0x46007878
    3f24:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3f28:	6e555f59 	mrcvs	15, 2, r5, cr5, cr9, {2}
    3f2c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3f30:	4843006e 	stmdami	r3, {r1, r2, r3, r5, r6}^
    3f34:	545f5049 	ldrbpl	r5, [pc], #-73	; 3f3c <NOROM_SetupSetVddrLevel+0x44>
    3f38:	5f455059 	svcpl	0x00455059
    3f3c:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3f40:	66003032 			; <UNDEFINED> instruction: 0x66003032
    3f44:	31676663 	cmncc	r7, r3, ror #12
    3f48:	00766552 	rsbseq	r6, r6, r2, asr r5
    3f4c:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3f50:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3f54:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    3f58:	68630078 	stmdavs	r3!, {r3, r4, r5, r6}^
    3f5c:	61467069 	cmpvs	r6, r9, rrx
    3f60:	5748006d 	strbpl	r0, [r8, -sp, rrx]
    3f64:	5f564552 	svcpl	0x00564552
    3f68:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3f6c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3f70:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3f74:	6f725031 	svcvs	0x00725031
    3f78:	6f636f74 	svcvs	0x00636f74
    3f7c:	7250006c 	subsvc	r0, r0, #108	; 0x6c
    3f80:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3f84:	69426c6f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    3f88:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    3f8c:	5f726f74 	svcpl	0x00726f74
    3f90:	52500074 	subspl	r0, r0, #116	; 0x74
    3f94:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3f98:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    3f9c:	45495f54 	strbmi	r5, [r9, #-3924]	; 0xfffff0ac
    3fa0:	385f4545 	ldmdacc	pc, {r0, r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    3fa4:	315f3230 	cmpcc	pc, r0, lsr r2	; <UNPREDICTABLE>
    3fa8:	00345f35 	eorseq	r5, r4, r5, lsr pc
    3fac:	50494843 	subpl	r4, r9, r3, asr #16
    3fb0:	5059545f 	subspl	r5, r9, pc, asr r4
    3fb4:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    3fb8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3fbc:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    3fc0:	5f564552 	svcpl	0x00564552
    3fc4:	00325f32 	eorseq	r5, r2, r2, lsr pc
    3fc8:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3fcc:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3fd0:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    3fd4:	41500078 	cmpmi	r0, r8, ror r0
    3fd8:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3fdc:	78375f45 	ldmdavc	r7!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3fe0:	52500037 	subspl	r0, r0, #55	; 0x37
    3fe4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3fe8:	555f4c4f 	ldrbpl	r4, [pc, #-3151]	; 33a1 <__pi_vfparse+0x11d>
    3fec:	6f6e6b6e 	svcvs	0x006e6b6e
    3ff0:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    3ff4:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3ff8:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    3ffc:	524f4e00 	subpl	r4, pc, #0, 28
    4000:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    4004:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4008:	5f6f666e 	svcpl	0x006f666e
    400c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    4010:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    4014:	00657079 	rsbeq	r7, r5, r9, ror r0
    4018:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    401c:	5f325f56 	svcpl	0x00325f56
    4020:	52500031 	subspl	r0, r0, #49	; 0x31
    4024:	434f544f 	movtmi	r5, #62543	; 0xf44f
    4028:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    402c:	4c425f54 	mcrrmi	15, 5, r5, r2, cr4
    4030:	41460045 	cmpmi	r6, r5, asr #32
    4034:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    4038:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    403c:	5f787836 	svcpl	0x00787836
    4040:	00616741 	rsbeq	r6, r1, r1, asr #14
    4044:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    4048:	5f325f56 	svcpl	0x00325f56
    404c:	68630033 	stmdavs	r3!, {r0, r1, r4, r5}^
    4050:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    4054:	43006570 	movwmi	r6, #1392	; 0x570
    4058:	5f504948 	svcpl	0x00504948
    405c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4060:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    4064:	5f4d4f54 	svcpl	0x004d4f54
    4068:	48430030 	stmdami	r3, {r4, r5}^
    406c:	545f5049 	ldrbpl	r5, [pc], #-73	; 4074 <NOROM_SetupGetTrimForAnabypassValue1+0x54>
    4070:	5f455059 	svcpl	0x00455059
    4074:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    4078:	315f4d4f 	cmpcc	pc, pc, asr #26
    407c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    4080:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    4084:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    4088:	33363243 	teqcc	r6, #805306372	; 0x30000004
    408c:	57480030 	smlaldxpl	r0, r8, r0, r0
    4090:	5f564552 	svcpl	0x00564552
    4094:	00305f31 	eorseq	r5, r0, r1, lsr pc
    4098:	4b434150 	blmi	10d45e0 <__ccfg+0x10b4638>
    409c:	5f454741 	svcpl	0x00454741
    40a0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    40a4:	006e776f 	rsbeq	r7, lr, pc, ror #14
    40a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40ac:	2f2e2e2f 	svccs	0x002e2e2f
    40b0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 40b8 <NOROM_SetupGetTrimForAmpcompCtrl>
    40b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    40b8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    40bc:	6968632f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r8, r9, sp, lr}^
    40c0:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    40c4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    40c8:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    40cc:	65735531 	ldrbvs	r5, [r3, #-1329]!	; 0xfffffacf
    40d0:	00644972 	rsbeq	r4, r4, r2, ror r9
    40d4:	70696843 	rsbvc	r6, r9, r3, asr #16
    40d8:	6f666e49 	svcvs	0x00666e49
    40dc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    40e0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    40e4:	64496563 	strbvs	r6, [r9], #-1379	; 0xfffffa9d
    40e8:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    40ec:	646f4376 	strbtvs	r4, [pc], #-886	; 40f4 <NOROM_SetupGetTrimForAmpcompCtrl+0x3c>
    40f0:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    40f4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    40f8:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    40fc:	694d7465 	stmdbvs	sp, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4100:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4104:	76655277 			; <UNDEFINED> instruction: 0x76655277
    4108:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    410c:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    4110:	00766552 	rsbseq	r6, r6, r2, asr r5
    4114:	4f524f4e 	svcmi	0x00524f4e
    4118:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    411c:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4120:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    4124:	75537465 	ldrbvc	r7, [r3, #-1125]	; 0xfffffb9b
    4128:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    412c:	50646574 	rsbpl	r6, r4, r4, ror r5
    4130:	6f746f72 	svcvs	0x00746f72
    4134:	5f6c6f63 	svcpl	0x006c6f63
    4138:	50005642 	andpl	r5, r0, r2, asr #12
    413c:	414b4341 	cmpmi	fp, r1, asr #6
    4140:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    4144:	52454641 	subpl	r4, r5, #68157440	; 0x4100000
    4148:	43415000 	movtmi	r5, #4096	; 0x1000
    414c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    4150:	3578355f 	ldrbcc	r3, [r8, #-1375]!	; 0xfffffaa1
    4154:	63615000 	cmnvs	r1, #0
    4158:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    415c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4160:	4300745f 	movwmi	r7, #1119	; 0x45f
    4164:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4168:	5f6f666e 	svcpl	0x006f666e
    416c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4170:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4174:	73496e6f 	movtvc	r6, #40559	; 0x9e6f
    4178:	4554475f 	ldrbmi	r4, [r4, #-1887]	; 0xfffff8a1
    417c:	5f325f51 	svcpl	0x00325f51
    4180:	68430030 	stmdavs	r3, {r4, r5}^
    4184:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4188:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    418c:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
    4190:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    4194:	33697500 	cmncc	r9, #0, 10
    4198:	67655232 			; <UNDEFINED> instruction: 0x67655232
    419c:	524f4e00 	subpl	r4, pc, #0, 28
    41a0:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 41a8 <NOROM_SetupGetTrimForRadcExtCfg+0x18>
    41a4:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    41a8:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    41ac:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    41b0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    41b4:	64416e00 	strbvs	r6, [r1], #-3584	; 0xfffff200
    41b8:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    41bc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 4088 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0xc>
    41c0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    41c4:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    41c8:	61655274 	smcvs	21796	; 0x5524
    41cc:	526e0064 	rsbpl	r0, lr, #100	; 0x64
    41d0:	41007465 	tstmi	r0, r5, ror #8
    41d4:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    41d8:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    41dc:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    41e0:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    41e4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    41e8:	61443631 	cmpvs	r4, r1, lsr r6
    41ec:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    41f0:	57323369 	ldrpl	r3, [r2, -r9, ror #6]!
    41f4:	74614472 	strbtvc	r4, [r1], #-1138	; 0xfffffb8e
    41f8:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    41fc:	61443233 	cmpvs	r4, r3, lsr r2
    4200:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    4204:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    4208:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    420c:	524f4e00 	subpl	r4, pc, #0, 28
    4210:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 4218 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x34>
    4214:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    4218:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    421c:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    4220:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4224:	446e0065 	strbtmi	r0, [lr], #-101	; 0xffffff9b
    4228:	00617461 	rsbeq	r7, r1, r1, ror #8
    422c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    4230:	006c6156 	rsbeq	r6, ip, r6, asr r1
    4234:	41787541 	cmnmi	r8, r1, asr #10
    4238:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    423c:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    4240:	61655265 	cmnvs	r5, r5, ror #4
    4244:	4f4e0064 	svcmi	0x004e0064
    4248:	5f4d4f52 	svcpl	0x004d4f52
    424c:	31494444 	cmpcc	r9, r4, asr #8
    4250:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    4254:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4258:	2f2e0065 	svccs	0x002e0065
    425c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4260:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4264:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4268:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    426c:	642f6269 	strtvs	r6, [pc], #-617	; 4274 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x90>
    4270:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    4274:	33697500 	cmncc	r9, #0, 10
    4278:	67655232 			; <UNDEFINED> instruction: 0x67655232
    427c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4280:	69536e00 	ldmdbvs	r3, {r9, sl, fp, sp, lr}^
    4284:	5f00657a 	svcpl	0x0000657a
    4288:	756e5f43 	strbvc	r5, [lr, #-3907]!	; 0xfffff0bd
    428c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    4290:	6f6c5f63 	svcvs	0x006c5f63
    4294:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    4298:	72756300 	rsbsvc	r6, r5, #0, 6
    429c:	636e6572 	cmnvs	lr, #478150656	; 0x1c800000
    42a0:	79735f79 	ldmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42a4:	6c6f626d 	sfmvs	f6, 2, [pc], #-436	; 40f8 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    42a8:	79746300 	ldmdbvc	r4!, {r8, r9, sp, lr}^
    42ac:	705f6570 	subsvc	r6, pc, r0, ror r5	; <UNPREDICTABLE>
    42b0:	64007274 	strvs	r7, [r0], #-628	; 0xfffffd8c
    42b4:	00307473 	eorseq	r7, r0, r3, ror r4
    42b8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    42bc:	5f64656e 	svcpl	0x0064656e
    42c0:	00747364 	rsbseq	r7, r4, r4, ror #6
    42c4:	5f746e69 	svcpl	0x00746e69
    42c8:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    42cc:	79625f70 	stmdbvc	r2!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42d0:	6170735f 	cmnvs	r0, pc, asr r3
    42d4:	6c006563 	cfstr32vs	mvfx6, [r0], {99}	; 0x63
    42d8:	766e6f63 	strbtvc	r6, [lr], -r3, ror #30
    42dc:	6b6a6300 	blvs	1a9cee4 <__ccfg+0x1a7cf3c>
    42e0:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    42e4:	636c0067 	cmnvs	ip, #103	; 0x67
    42e8:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    42ec:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    42f0:	5f00545f 	svcpl	0x0000545f
    42f4:	69745f43 	ldmdbvs	r4!, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    42f8:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    42fc:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4300:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4304:	75635f74 	strbvc	r5, [r3, #-3956]!	; 0xfffff08c
    4308:	735f7272 	cmpvc	pc, #536870919	; 0x20000007
    430c:	6f626d79 	svcvs	0x00626d79
    4310:	636c006c 	cmnvs	ip, #108	; 0x6c
    4314:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    4318:	00545f65 	subseq	r5, r4, r5, ror #30
    431c:	5f746c61 	svcpl	0x00746c61
    4320:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    4324:	5f007374 	svcpl	0x00007374
    4328:	74635f43 	strbtvc	r5, [r3], #-3907	; 0xfffff0bd
    432c:	5f657079 	svcpl	0x00657079
    4330:	61636f6c 	cmnvs	r3, ip, ror #30
    4334:	6100656c 	tstvs	r0, ip, ror #10
    4338:	6d705f6d 	ldclvs	15, cr5, [r0, #-436]!	; 0xfffffe4c
    433c:	61726500 	cmnvs	r2, r0, lsl #10
    4340:	745f645f 	ldrbvc	r6, [pc], #-1119	; 4348 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>
    4344:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4348:	736f6e00 	cmnvc	pc, #0, 28
    434c:	6c007274 	sfmvs	f7, 4, [r0], {116}	; 0x74
    4350:	6f6d5f63 	svcvs	0x006d5f63
    4354:	6174656e 	cmnvs	r4, lr, ror #10
    4358:	545f7972 	ldrbpl	r7, [pc], #-2418	; 4360 <NOROM_SetupSetAonRtcSubSecInc+0x8>
    435c:	73656d00 	cmnvc	r5, #0, 26
    4360:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4364:	646f635f 	strbtvs	r6, [pc], #-863	; 436c <NOROM_SetupSetAonRtcSubSecInc+0x14>
    4368:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    436c:	74626d00 	strbtvc	r6, [r2], #-3328	; 0xfffff300
    4370:	0063776f 	rsbeq	r7, r3, pc, ror #14
    4374:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 4200 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x1c>
    4378:	61737365 	cmnvs	r3, r5, ror #6
    437c:	5f736567 	svcpl	0x00736567
    4380:	61636f6c 	cmnvs	r3, ip, ror #30
    4384:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    4388:	705f746e 	subsvc	r7, pc, lr, ror #8
    438c:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    4390:	6f705f6e 	svcvs	0x00705f6e
    4394:	6d006e73 	stcvs	14, cr6, [r0, #-460]	; 0xfffffe34
    4398:	675f6e6f 	ldrbvs	r6, [pc, -pc, ror #28]
    439c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    43a0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    43a4:	6d665f58 	stclvs	15, cr5, [r6, #-352]!	; 0xfffffea0
    43a8:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    43ac:	5f705f74 	svcpl	0x00705f74
    43b0:	705f7363 	subsvc	r7, pc, r3, ror #6
    43b4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    43b8:	00736564 	rsbseq	r6, r3, r4, ror #10
    43bc:	5f6e6f6d 	svcpl	0x006e6f6d
    43c0:	69636564 	stmdbvs	r3!, {r2, r5, r6, r8, sl, sp, lr}^
    43c4:	5f6c616d 	svcpl	0x006c616d
    43c8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    43cc:	5f630074 	svcpl	0x00630074
    43d0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    43d4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    43d8:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    43dc:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
    43e0:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    43e4:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    43e8:	6d006e67 	stcvs	14, cr6, [r0, #-412]	; 0xfffffe64
    43ec:	75635f62 	strbvc	r5, [r3, #-3938]!	; 0xfffff09e
    43f0:	616d5f72 	smcvs	54770	; 0xd5f2
    43f4:	63770078 	cmnvs	r7, #120	; 0x78
    43f8:	5f726168 	svcpl	0x00726168
    43fc:	6f700074 	svcvs	0x00700074
    4400:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4404:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    4408:	006e6769 	rsbeq	r6, lr, r9, ror #14
    440c:	70797463 	rsbsvc	r7, r9, r3, ror #8
    4410:	6f635f65 	svcvs	0x00635f65
    4414:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    4418:	6f6c0074 	svcvs	0x006c0074
    441c:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
    4420:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    4424:	6f6e0065 	svcvs	0x006e0065
    4428:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    442c:	665f7800 	ldrbvs	r7, [pc], -r0, lsl #16
    4430:	7300746d 	movwvc	r7, #1133	; 0x46d
    4434:	706f6275 	rsbvc	r6, pc, r5, ror r2	; <UNPREDICTABLE>
    4438:	67726174 			; <UNDEFINED> instruction: 0x67726174
    443c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4440:	735f705f 	cmpvc	pc, #95	; 0x5f
    4444:	625f7065 	subsvs	r7, pc, #101	; 0x65
    4448:	70735f79 	rsbsvc	r5, r3, r9, ror pc
    444c:	00656361 	rsbeq	r6, r5, r1, ror #6
    4450:	5f746e69 	svcpl	0x00746e69
    4454:	73635f6e 	cmnvc	r3, #440	; 0x1b8
    4458:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    445c:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    4460:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    4464:	2f2e2e2f 	svccs	0x002e2e2f
    4468:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    446c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4470:	2f2e2e2f 	svccs	0x002e2e2f
    4474:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4478:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    447c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4480:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4484:	616d2f63 	cmnvs	sp, r3, ror #30
    4488:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    448c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    4490:	656d2f6d 	strbvs	r2, [sp, #-3949]!	; 0xfffff093
    4494:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    4498:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    449c:	00632e62 	rsbeq	r2, r3, r2, ror #28
    44a0:	6f5f646d 	svcvs	0x005f646d
    44a4:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
    44a8:	73657900 	cmnvc	r5, #0, 18
    44ac:	00727473 	rsbseq	r7, r2, r3, ror r4
    44b0:	65736579 	ldrbvs	r6, [r3, #-1401]!	; 0xfffffa87
    44b4:	00727078 	rsbseq	r7, r2, r8, ror r0
    44b8:	5f617265 	svcpl	0x00617265
    44bc:	6d665f64 	stclvs	15, cr5, [r6, #-400]!	; 0xfffffe70
    44c0:	636c0074 	cmnvs	ip, #116	; 0x74
    44c4:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    44c8:	545f6570 	ldrbpl	r6, [pc], #-1392	; 44d0 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    44cc:	61726500 	cmnvs	r2, r0, lsl #10
    44d0:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    44d4:	7700746d 	strvc	r7, [r0, -sp, ror #8]
    44d8:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 4354 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>
    44dc:	6f6d0062 	svcvs	0x006d0062
    44e0:	68745f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    44e4:	6173756f 	cmnvs	r3, pc, ror #10
    44e8:	5f73646e 	svcpl	0x0073646e
    44ec:	00706573 	rsbseq	r6, r0, r3, ror r5
    44f0:	6d706d61 	ldclvs	13, cr6, [r0, #-388]!	; 0xfffffe7c
    44f4:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    44f8:	5f636c00 	svcpl	0x00636c00
    44fc:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    4500:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    4504:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
    4508:	646b6565 	strbtvs	r6, [fp], #-1381	; 0xfffffa9b
    450c:	5f007961 	svcpl	0x00007961
    4510:	6f6d5f43 	svcvs	0x006d5f43
    4514:	6174656e 	cmnvs	r4, lr, ror #10
    4518:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    451c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4520:	61630065 	cmnvs	r3, r5, rrx
    4524:	6f676574 	svcvs	0x00676574
    4528:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    452c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4530:	735f6e5f 	cmpvc	pc, #1520	; 0x5f0
    4534:	5f6e6769 	svcpl	0x006e6769
    4538:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    453c:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    4540:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    4544:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
    4548:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    454c:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    4550:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
    4554:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    4558:	30393130 	eorscc	r3, r9, r0, lsr r1
    455c:	20333037 	eorscs	r3, r3, r7, lsr r0
    4560:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    4564:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4568:	675b2029 	ldrbvs	r2, [fp, -r9, lsr #32]
    456c:	382d6363 	stmdacc	sp!, {r0, r1, r5, r6, r8, r9, sp, lr}
    4570:	6172622d 	cmnvs	r2, sp, lsr #4
    4574:	2068636e 	rsbcs	r6, r8, lr, ror #6
    4578:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    457c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    4580:	33373220 	teqcc	r7, #32, 4
    4584:	5d373230 	lfmpl	f3, 4, [r7, #-192]!	; 0xffffff40
    4588:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
    458c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    4590:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
    4594:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
    4598:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
    459c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    45a0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    45a4:	616f6c66 	cmnvs	pc, r6, ror #24
    45a8:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    45ac:	6f733d69 	svcvs	0x00733d69
    45b0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    45b4:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    45b8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    45bc:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    45c0:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    45c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    45c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    45cc:	20743476 	rsbscs	r3, r4, r6, ror r4
    45d0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    45d4:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    45d8:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 4448 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc8>
    45dc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    45e0:	006e6974 	rsbeq	r6, lr, r4, ror r9
    45e4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    45e8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    45ec:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    45f0:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    45f4:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    45f8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    45fc:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4600:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    4604:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    4608:	2f646c69 	svccs	0x00646c69
    460c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4610:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4614:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4618:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    461c:	2f626d75 	svccs	0x00626d75
    4620:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    4624:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4628:	2f62696c 	svccs	0x0062696c
    462c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4630:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    4634:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    4638:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    463c:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    4640:	6e690030 	mcrvs	0, 3, r0, cr9, cr0, {1}
    4644:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
    4648:	645f6361 	ldrbvs	r6, [pc], #-865	; 4650 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x180>
    464c:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    4650:	72730073 	rsbsvc	r0, r3, #115	; 0x73
    4654:	61003063 	tstvs	r0, r3, rrx
    4658:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 44b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>
    465c:	68746e6f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4660:	2f2e2e00 	svccs	0x002e2e00
    4664:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4668:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    466c:	2f2e2e2f 	svccs	0x002e2e2f
    4670:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4674:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4678:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    467c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4680:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4684:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    4688:	6e61722f 	cdpvs	2, 6, cr7, cr1, cr15, {1}
    468c:	00632e64 	rsbeq	r2, r3, r4, ror #28
    4690:	6e617273 	mcrvs	2, 3, r7, cr1, cr3, {3}
    4694:	622f0064 	eorvs	r0, pc, #100	; 0x64
    4698:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    469c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46a0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46a4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    46a8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    46ac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46b0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    46b4:	2f302e33 	svccs	0x00302e33
    46b8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    46bc:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    46c0:	6f6e2d6d 	svcvs	0x006e2d6d
    46c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    46c8:	2f696261 	svccs	0x00696261
    46cc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    46d0:	6f6e2f62 	svcvs	0x006e2f62
    46d4:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    46d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46dc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    46e0:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    46e4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    46e8:	622f0062 	eorvs	r0, pc, #98	; 0x62
    46ec:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    46f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46f4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46f8:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    46fc:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    4700:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4704:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4708:	2f302e33 	svccs	0x00302e33
    470c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4710:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    4714:	6f6e2d6d 	svcvs	0x006e2d6d
    4718:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    471c:	2f696261 	svccs	0x00696261
    4720:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4724:	6f6e2f62 	svcvs	0x006e2f62
    4728:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    472c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4730:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4734:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    4738:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    473c:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    4740:	5f657275 	svcpl	0x00657275
    4744:	61746164 	cmnvs	r4, r4, ror #2
    4748:	2f2e2e00 	svccs	0x002e2e00
    474c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4750:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4754:	2f2e2e2f 	svccs	0x002e2e2f
    4758:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    475c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4760:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4764:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4768:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    476c:	2f746e65 	svccs	0x00746e65
    4770:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    4774:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
    4778:	52415400 	subpl	r5, r1, #0, 8
    477c:	5f544547 	svcpl	0x00544547
    4780:	5f555043 	svcpl	0x00555043
    4784:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4788:	31617865 	cmncc	r1, r5, ror #16
    478c:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    4790:	61786574 	cmnvs	r8, r4, ror r5
    4794:	73690037 	cmnvc	r9, #55	; 0x37
    4798:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    479c:	70665f74 	rsbvc	r5, r6, r4, ror pc
    47a0:	6c62645f 	cfstrdvs	mvd6, [r2], #-380	; 0xfffffe84
    47a4:	6d726100 	ldfvse	f6, [r2, #-0]
    47a8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    47ac:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    47b0:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    47b4:	52415400 	subpl	r5, r1, #0, 8
    47b8:	5f544547 	svcpl	0x00544547
    47bc:	5f555043 	svcpl	0x00555043
    47c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    47c4:	326d7865 	rsbcc	r7, sp, #6619136	; 0x650000
    47c8:	52410033 	subpl	r0, r1, #51	; 0x33
    47cc:	51455f4d 	cmppl	r5, sp, asr #30
    47d0:	52415400 	subpl	r5, r1, #0, 8
    47d4:	5f544547 	svcpl	0x00544547
    47d8:	5f555043 	svcpl	0x00555043
    47dc:	316d7261 	cmncc	sp, r1, ror #4
    47e0:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    47e4:	00736632 	rsbseq	r6, r3, r2, lsr r6
    47e8:	5f617369 	svcpl	0x00617369
    47ec:	5f746962 	svcpl	0x00746962
    47f0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    47f4:	41540062 	cmpmi	r4, r2, rrx
    47f8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    47fc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4800:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4804:	61786574 	cmnvs	r8, r4, ror r5
    4808:	6f633735 	svcvs	0x00633735
    480c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4810:	00333561 	eorseq	r3, r3, r1, ror #10
    4814:	756d5f5f 	strbvc	r5, [sp, #-3935]!	; 0xfffff0a1
    4818:	3369646c 	cmncc	r9, #108, 8	; 0x6c000000
    481c:	53414200 	movtpl	r4, #4608	; 0x1200
    4820:	52415f45 	subpl	r5, r1, #276	; 0x114
    4824:	385f4843 	ldmdacc	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
    4828:	41425f4d 	cmpmi	r2, sp, asr #30
    482c:	54004553 	strpl	r4, [r0], #-1363	; 0xfffffaad
    4830:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4834:	50435f54 	subpl	r5, r3, r4, asr pc
    4838:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    483c:	3031386d 	eorscc	r3, r1, sp, ror #16
    4840:	52415400 	subpl	r5, r1, #0, 8
    4844:	5f544547 	svcpl	0x00544547
    4848:	5f555043 	svcpl	0x00555043
    484c:	6e656778 	mcrvs	7, 3, r6, cr5, cr8, {3}
    4850:	41003165 	tstmi	r0, r5, ror #2
    4854:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4858:	415f5343 	cmpmi	pc, r3, asr #6
    485c:	53435041 	movtpl	r5, #12353	; 0x3041
    4860:	4d57495f 	vldrmi.16	s9, [r7, #-190]	; 0xffffff42	; <UNPREDICTABLE>
    4864:	0054584d 	subseq	r5, r4, sp, asr #16
    4868:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    486c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4870:	00305f48 	eorseq	r5, r0, r8, asr #30
    4874:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4878:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    487c:	00325f48 	eorseq	r5, r2, r8, asr #30
    4880:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4884:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4888:	00335f48 	eorseq	r5, r3, r8, asr #30
    488c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4890:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4894:	00345f48 	eorseq	r5, r4, r8, asr #30
    4898:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    489c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48a0:	00365f48 	eorseq	r5, r6, r8, asr #30
    48a4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48a8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48ac:	00375f48 	eorseq	r5, r7, r8, asr #30
    48b0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    48b4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    48b8:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    48bc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    48c0:	69680065 	stmdbvs	r8!, {r0, r2, r5, r6}^
    48c4:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    48c8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    48cc:	705f7469 	subsvc	r7, pc, r9, ror #8
    48d0:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    48d4:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    48d8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    48dc:	50435f54 	subpl	r5, r3, r4, asr pc
    48e0:	6f635f55 	svcvs	0x00635f55
    48e4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    48e8:	0033336d 	eorseq	r3, r3, sp, ror #6
    48ec:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    48f0:	00657079 	rsbeq	r7, r5, r9, ror r0
    48f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48fc:	2f2e2e2f 	svccs	0x002e2e2f
    4900:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4850 <AuxAdiDdiSafeWrite.constprop.1+0x18>
    4904:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    4908:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    490c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4910:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    4914:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4918:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    491c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4920:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4924:	00696d64 	rsbeq	r6, r9, r4, ror #26
    4928:	5f617369 	svcpl	0x00617369
    492c:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4930:	41540074 	cmpmi	r4, r4, ror r0
    4934:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4938:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    493c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4940:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4944:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    4948:	61736900 	cmnvs	r3, r0, lsl #18
    494c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4950:	7066765f 	rsbvc	r7, r6, pc, asr r6
    4954:	41003276 	tstmi	r0, r6, ror r2
    4958:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    495c:	555f5343 	ldrbpl	r5, [pc, #-835]	; 4621 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x151>
    4960:	4f4e4b4e 	svcmi	0x004e4b4e
    4964:	54004e57 	strpl	r4, [r0], #-3671	; 0xfffff1a9
    4968:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    496c:	50435f54 	subpl	r5, r3, r4, asr pc
    4970:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4974:	0065396d 	rsbeq	r3, r5, sp, ror #18
    4978:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    497c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4980:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4984:	61004a45 	tstvs	r0, r5, asr #20
    4988:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    498c:	6d736663 	ldclvs	6, cr6, [r3, #-396]!	; 0xfffffe74
    4990:	6174735f 	cmnvs	r4, pc, asr r3
    4994:	61006574 	tstvs	r0, r4, ror r5
    4998:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    499c:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    49a0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    49a4:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    49a8:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    49ac:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    49b0:	73690073 	cmnvc	r9, #115	; 0x73
    49b4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    49b8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    49bc:	5f5f0063 	svcpl	0x005f0063
    49c0:	5f7a6c63 	svcpl	0x007a6c63
    49c4:	00626174 	rsbeq	r6, r2, r4, ror r1
    49c8:	5f4d5241 	svcpl	0x004d5241
    49cc:	61004356 	tstvs	r0, r6, asr r3
    49d0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    49d4:	5f686372 	svcpl	0x00686372
    49d8:	61637378 	smcvs	14136	; 0x3738
    49dc:	4100656c 	tstmi	r0, ip, ror #10
    49e0:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    49e4:	57440045 	strbpl	r0, [r4, -r5, asr #32]
    49e8:	6f696e75 	svcvs	0x00696e75
    49ec:	5241006e 	subpl	r0, r1, #110	; 0x6e
    49f0:	53565f4d 	cmppl	r6, #308	; 0x134
    49f4:	4d524100 	ldfmie	f4, [r2, #-0]
    49f8:	0045475f 	subeq	r4, r5, pc, asr r7
    49fc:	5f6d7261 	svcpl	0x006d7261
    4a00:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4a04:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4a08:	61676e6f 	cmnvs	r7, pc, ror #28
    4a0c:	63006d72 	movwvs	r6, #3442	; 0xd72
    4a10:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    4a14:	66207865 	strtvs	r7, [r0], -r5, ror #16
    4a18:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    4a1c:	52415400 	subpl	r5, r1, #0, 8
    4a20:	5f544547 	svcpl	0x00544547
    4a24:	5f555043 	svcpl	0x00555043
    4a28:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a2c:	31617865 	cmncc	r1, r5, ror #16
    4a30:	41540035 	cmpmi	r4, r5, lsr r0
    4a34:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a38:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a3c:	3761665f 			; <UNDEFINED> instruction: 0x3761665f
    4a40:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4a44:	52415400 	subpl	r5, r1, #0, 8
    4a48:	5f544547 	svcpl	0x00544547
    4a4c:	5f555043 	svcpl	0x00555043
    4a50:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a54:	31617865 	cmncc	r1, r5, ror #16
    4a58:	52410037 	subpl	r0, r1, #55	; 0x37
    4a5c:	54475f4d 	strbpl	r5, [r7], #-3917	; 0xfffff0b3
    4a60:	52415400 	subpl	r5, r1, #0, 8
    4a64:	5f544547 	svcpl	0x00544547
    4a68:	5f555043 	svcpl	0x00555043
    4a6c:	766f656e 	strbtvc	r6, [pc], -lr, ror #10
    4a70:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
    4a74:	5400316e 	strpl	r3, [r0], #-366	; 0xfffffe92
    4a78:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a7c:	50435f54 	subpl	r5, r3, r4, asr pc
    4a80:	6f635f55 	svcvs	0x00635f55
    4a84:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a88:	00663472 	rsbeq	r3, r6, r2, ror r4
    4a8c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4a90:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4a94:	45375f48 	ldrmi	r5, [r7, #-3912]!	; 0xfffff0b8
    4a98:	4e47004d 	cdpmi	0, 4, cr0, cr7, cr13, {2}
    4a9c:	31432055 	qdaddcc	r2, r5, r3
    4aa0:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
    4aa4:	20312e32 	eorscs	r2, r1, r2, lsr lr
    4aa8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    4aac:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
    4ab0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    4ab4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4ab8:	5b202965 	blpl	80f054 <__ccfg+0x7ef0ac>
    4abc:	2f4d5241 	svccs	0x004d5241
    4ac0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4ac4:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    4ac8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    4acc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    4ad0:	6f697369 	svcvs	0x00697369
    4ad4:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4ad8:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    4adc:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4ae0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4ae4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    4ae8:	616f6c66 	cmnvs	pc, r6, ror #24
    4aec:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4af0:	6f733d69 	svcvs	0x00733d69
    4af4:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    4af8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    4afc:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4b00:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4b04:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    4b08:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4b0c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4b10:	20743476 	rsbscs	r3, r4, r6, ror r4
    4b14:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b18:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    4b1c:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b20:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b24:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b28:	62662d20 	rsbvs	r2, r6, #32, 26	; 0x800
    4b2c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4b30:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
    4b34:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4b38:	2d206363 	stccs	3, cr6, [r0, #-396]!	; 0xfffffe74
    4b3c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 49ac <__aeabi_lmul+0x4c>
    4b40:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    4b44:	72702d6b 	rsbsvc	r2, r0, #6848	; 0x1ac0
    4b48:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    4b4c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    4b50:	6f6e662d 	svcvs	0x006e662d
    4b54:	6c6e692d 			; <UNDEFINED> instruction: 0x6c6e692d
    4b58:	20656e69 	rsbcs	r6, r5, r9, ror #28
    4b5c:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    4b60:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4b64:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4b68:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
    4b6c:	006e6564 	rsbeq	r6, lr, r4, ror #10
    4b70:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4b74:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4b78:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4b7c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4b80:	32316178 	eorscc	r6, r1, #120, 2
    4b84:	73616800 	cmnvc	r1, #0, 16
    4b88:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    4b8c:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    4b90:	5f455341 	svcpl	0x00455341
    4b94:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4b98:	5a4b365f 	bpl	12d251c <__ccfg+0x12b2574>
    4b9c:	61736900 	cmnvs	r3, r0, lsl #18
    4ba0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ba4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4ba8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4bac:	615f6863 	cmpvs	pc, r3, ror #16
    4bb0:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4bb4:	76696477 			; <UNDEFINED> instruction: 0x76696477
    4bb8:	6d726100 	ldfvse	f6, [r2, #-0]
    4bbc:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4bc0:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    4bc4:	73690063 	cmnvc	r9, #99	; 0x63
    4bc8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bcc:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4bd0:	41003631 	tstmi	r0, r1, lsr r6
    4bd4:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    4bd8:	73690049 	cmnvc	r9, #73	; 0x49
    4bdc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4be0:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    4be4:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    4be8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4bec:	50435f54 	subpl	r5, r3, r4, asr pc
    4bf0:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4bf4:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    4bf8:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    4bfc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c00:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c04:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c08:	00386d72 	eorseq	r6, r8, r2, ror sp
    4c0c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c10:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c14:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c18:	00396d72 	eorseq	r6, r9, r2, ror sp
    4c1c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c20:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c24:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4c28:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    4c2c:	6d726100 	ldfvse	f6, [r2, #-0]
    4c30:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4c34:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    4c38:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    4c3c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c40:	50435f54 	subpl	r5, r3, r4, asr pc
    4c44:	6f635f55 	svcvs	0x00635f55
    4c48:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c4c:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    4c50:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c54:	50435f54 	subpl	r5, r3, r4, asr pc
    4c58:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4c5c:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    4c60:	52415400 	subpl	r5, r1, #0, 8
    4c64:	5f544547 	svcpl	0x00544547
    4c68:	5f555043 	svcpl	0x00555043
    4c6c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c70:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    4c74:	6d726100 	ldfvse	f6, [r2, #-0]
    4c78:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    4c7c:	6f635f64 	svcvs	0x00635f64
    4c80:	41006564 	tstmi	r0, r4, ror #10
    4c84:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4c88:	415f5343 	cmpmi	pc, r3, asr #6
    4c8c:	53435041 	movtpl	r5, #12353	; 0x3041
    4c90:	61736900 	cmnvs	r3, r0, lsl #18
    4c94:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4c98:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c9c:	325f3876 	subscc	r3, pc, #7733248	; 0x760000
    4ca0:	53414200 	movtpl	r4, #4608	; 0x1200
    4ca4:	52415f45 	subpl	r5, r1, #276	; 0x114
    4ca8:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    4cac:	4154004d 	cmpmi	r4, sp, asr #32
    4cb0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4cb4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4cb8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4cbc:	74303137 	ldrtvc	r3, [r0], #-311	; 0xfffffec9
    4cc0:	6d726100 	ldfvse	f6, [r2, #-0]
    4cc4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4cc8:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    4ccc:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    4cd0:	73690032 	cmnvc	r9, #50	; 0x32
    4cd4:	756e5f61 	strbvc	r5, [lr, #-3937]!	; 0xfffff09f
    4cd8:	69625f6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4cdc:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    4ce0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4ce4:	50435f54 	subpl	r5, r3, r4, asr pc
    4ce8:	6f635f55 	svcvs	0x00635f55
    4cec:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4cf0:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    4cf4:	6d737375 	ldclvs	3, cr7, [r3, #-468]!	; 0xfffffe2c
    4cf8:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4cfc:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4d00:	00796c70 	rsbseq	r6, r9, r0, ror ip
    4d04:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d08:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d0c:	655f5550 	ldrbvs	r5, [pc, #-1360]	; 47c4 <NOROM_ChipInfo_GetHwRevision+0x10>
    4d10:	6f6e7978 	svcvs	0x006e7978
    4d14:	00316d73 	eorseq	r6, r1, r3, ror sp
    4d18:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d1c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d20:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d24:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d28:	32357278 	eorscc	r7, r5, #120, 4	; 0x80000007
    4d2c:	61736900 	cmnvs	r3, r0, lsl #18
    4d30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d34:	6964745f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    4d38:	72700076 	rsbsvc	r0, r0, #118	; 0x76
    4d3c:	72656665 	rsbvc	r6, r5, #105906176	; 0x6500000
    4d40:	6f656e5f 	svcvs	0x00656e5f
    4d44:	6f665f6e 	svcvs	0x00665f6e
    4d48:	34365f72 	ldrtcc	r5, [r6], #-3954	; 0xfffff08e
    4d4c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4d50:	61736900 	cmnvs	r3, r0, lsl #18
    4d54:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d58:	3170665f 	cmncc	r0, pc, asr r6
    4d5c:	6c6d6636 	stclvs	6, cr6, [sp], #-216	; 0xffffff28
    4d60:	52415400 	subpl	r5, r1, #0, 8
    4d64:	5f544547 	svcpl	0x00544547
    4d68:	5f555043 	svcpl	0x00555043
    4d6c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4d70:	33617865 	cmncc	r1, #6619136	; 0x650000
    4d74:	41540032 	cmpmi	r4, r2, lsr r0
    4d78:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d7c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d80:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d84:	61786574 	cmnvs	r8, r4, ror r5
    4d88:	69003533 	stmdbvs	r0, {r0, r1, r4, r5, r8, sl, ip, sp}
    4d8c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d90:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4d94:	63363170 	teqvs	r6, #112, 2
    4d98:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    4d9c:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    4da0:	5f766365 	svcpl	0x00766365
    4da4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4da8:	0073676e 	rsbseq	r6, r3, lr, ror #14
    4dac:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4db0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4db4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4db8:	31316d72 	teqcc	r1, r2, ror sp
    4dbc:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    4dc0:	41540073 	cmpmi	r4, r3, ror r0
    4dc4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dc8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4dcc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4dd0:	61786574 	cmnvs	r8, r4, ror r5
    4dd4:	6f633537 	svcvs	0x00633537
    4dd8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4ddc:	00353561 	eorseq	r3, r5, r1, ror #10
    4de0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4de4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4de8:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4dec:	36303661 	ldrtcc	r3, [r0], -r1, ror #12
    4df0:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4df4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4df8:	50435f54 	subpl	r5, r3, r4, asr pc
    4dfc:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4e00:	3632396d 	ldrtcc	r3, [r2], -sp, ror #18
    4e04:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4e08:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e0c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e10:	54345f48 	ldrtpl	r5, [r4], #-3912	; 0xfffff0b8
    4e14:	61736900 	cmnvs	r3, r0, lsl #18
    4e18:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e1c:	7972635f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    4e20:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    4e24:	5f6d7261 	svcpl	0x006d7261
    4e28:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    4e2c:	5f6e695f 	svcpl	0x006e695f
    4e30:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0xfffffa8d
    4e34:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4e38:	61736900 	cmnvs	r3, r0, lsl #18
    4e3c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e40:	0062735f 	rsbeq	r7, r2, pc, asr r3
    4e44:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e48:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e4c:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4e50:	73690045 	cmnvc	r9, #69	; 0x45
    4e54:	65665f61 	strbvs	r5, [r6, #-3937]!	; 0xfffff09f
    4e58:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    4e5c:	73690065 	cmnvc	r9, #101	; 0x65
    4e60:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e64:	6d735f74 	ldclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    4e68:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4e6c:	61006c75 	tstvs	r0, r5, ror ip
    4e70:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    4e74:	5f676e61 	svcpl	0x00676e61
    4e78:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    4e7c:	6f5f7475 	svcvs	0x005f7475
    4e80:	63656a62 	cmnvs	r5, #401408	; 0x62000
    4e84:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
    4e88:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    4e8c:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
    4e90:	6f6f685f 	svcvs	0x006f685f
    4e94:	7369006b 	cmnvc	r9, #107	; 0x6b
    4e98:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e9c:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4ea0:	3233645f 	eorscc	r6, r3, #1593835520	; 0x5f000000
    4ea4:	4d524100 	ldfmie	f4, [r2, #-0]
    4ea8:	00454e5f 	subeq	r4, r5, pc, asr lr
    4eac:	5f617369 	svcpl	0x00617369
    4eb0:	5f746962 	svcpl	0x00746962
    4eb4:	00386562 	eorseq	r6, r8, r2, ror #10
    4eb8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ebc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ec0:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4ec4:	31316d72 	teqcc	r1, r2, ror sp
    4ec8:	7a6a3637 	bvc	1a927ac <__ccfg+0x1a72804>
    4ecc:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    4ed0:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    4ed4:	5f726f73 	svcpl	0x00726f73
    4ed8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4edc:	6c6c6100 	stfvse	f6, [ip], #-0
    4ee0:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4ee4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4ee8:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    4eec:	41420073 	hvcmi	8195	; 0x2003
    4ef0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4ef4:	5f484352 	svcpl	0x00484352
    4ef8:	61005435 	tstvs	r0, r5, lsr r4
    4efc:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4f00:	34686372 	strbtcc	r6, [r8], #-882	; 0xfffffc8e
    4f04:	41540074 	cmpmi	r4, r4, ror r0
    4f08:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4f0c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4f10:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4f14:	61786574 	cmnvs	r8, r4, ror r5
    4f18:	6f633637 	svcvs	0x00633637
    4f1c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f20:	00353561 	eorseq	r3, r5, r1, ror #10
    4f24:	5f6d7261 	svcpl	0x006d7261
    4f28:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4f2c:	7562775f 	strbvc	r7, [r2, #-1887]!	; 0xfffff8a1
    4f30:	74680066 	strbtvc	r0, [r8], #-102	; 0xffffff9a
    4f34:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4f38:	00687361 	rsbeq	r7, r8, r1, ror #6
    4f3c:	5f617369 	svcpl	0x00617369
    4f40:	5f746962 	svcpl	0x00746962
    4f44:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    4f48:	6f6e5f6b 	svcvs	0x006e5f6b
    4f4c:	6c6f765f 	stclvs	6, cr7, [pc], #-380	; 4dd8 <__aeabi_lmul+0x478>
    4f50:	6c697461 	cfstrdvs	mvd7, [r9], #-388	; 0xfffffe7c
    4f54:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    4f58:	52415400 	subpl	r5, r1, #0, 8
    4f5c:	5f544547 	svcpl	0x00544547
    4f60:	5f555043 	svcpl	0x00555043
    4f64:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f68:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4f6c:	52415400 	subpl	r5, r1, #0, 8
    4f70:	5f544547 	svcpl	0x00544547
    4f74:	5f555043 	svcpl	0x00555043
    4f78:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f7c:	316d7865 	cmncc	sp, r5, ror #16
    4f80:	52415400 	subpl	r5, r1, #0, 8
    4f84:	5f544547 	svcpl	0x00544547
    4f88:	5f555043 	svcpl	0x00555043
    4f8c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f90:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4f94:	61736900 	cmnvs	r3, r0, lsl #18
    4f98:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4f9c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fa0:	315f3876 	cmpcc	pc, r6, ror r8	; <UNPREDICTABLE>
    4fa4:	6d726100 	ldfvse	f6, [r2, #-0]
    4fa8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4fac:	616e5f68 	cmnvs	lr, r8, ror #30
    4fb0:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    4fb4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fb8:	615f7469 	cmpvs	pc, r9, ror #8
    4fbc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fc0:	6900335f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
    4fc4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fc8:	615f7469 	cmpvs	pc, r9, ror #8
    4fcc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fd0:	6900345f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
    4fd4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fd8:	615f7469 	cmpvs	pc, r9, ror #8
    4fdc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fe0:	5400355f 	strpl	r3, [r0], #-1375	; 0xfffffaa1
    4fe4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4fe8:	50435f54 	subpl	r5, r3, r4, asr pc
    4fec:	6f635f55 	svcvs	0x00635f55
    4ff0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4ff4:	00333561 	eorseq	r3, r3, r1, ror #10
    4ff8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ffc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5000:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5004:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5008:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    500c:	52415400 	subpl	r5, r1, #0, 8
    5010:	5f544547 	svcpl	0x00544547
    5014:	5f555043 	svcpl	0x00555043
    5018:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    501c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5020:	41540037 	cmpmi	r4, r7, lsr r0
    5024:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5028:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    502c:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    5030:	0065726f 	rsbeq	r7, r5, pc, ror #4
    5034:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5038:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    503c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5040:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    5044:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5048:	5f6d7261 	svcpl	0x006d7261
    504c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5050:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 5058 <__pi_hex_enc_table+0x2b>
    5054:	4154006d 	cmpmi	r4, sp, rrx
    5058:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    505c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5060:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5064:	36323031 			; <UNDEFINED> instruction: 0x36323031
    5068:	00736a65 	rsbseq	r6, r3, r5, ror #20
    506c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5070:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5074:	4a365f48 	bmi	d9cd9c <__ccfg+0xd7cdf4>
    5078:	53414200 	movtpl	r4, #4608	; 0x1200
    507c:	52415f45 	subpl	r5, r1, #276	; 0x114
    5080:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    5084:	4142004b 	cmpmi	r2, fp, asr #32
    5088:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    508c:	5f484352 	svcpl	0x00484352
    5090:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    5094:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5098:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    509c:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    50a0:	41540074 	cmpmi	r4, r4, ror r0
    50a4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    50a8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    50ac:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    50b0:	36333131 			; <UNDEFINED> instruction: 0x36333131
    50b4:	0073666a 	rsbseq	r6, r3, sl, ror #12
    50b8:	5f4d5241 	svcpl	0x004d5241
    50bc:	4100534c 	tstmi	r0, ip, asr #6
    50c0:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    50c4:	41420054 	qdaddmi	r0, r4, r2
    50c8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    50cc:	5f484352 	svcpl	0x00484352
    50d0:	41005a36 	tstmi	r0, r6, lsr sl
    50d4:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    50d8:	415f5343 	cmpmi	pc, r3, asr #6
    50dc:	53435041 	movtpl	r5, #12353	; 0x3041
    50e0:	5046565f 	subpl	r5, r6, pc, asr r6
    50e4:	52415400 	subpl	r5, r1, #0, 8
    50e8:	5f544547 	svcpl	0x00544547
    50ec:	5f555043 	svcpl	0x00555043
    50f0:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    50f4:	00327478 	eorseq	r7, r2, r8, ror r4
    50f8:	5f617369 	svcpl	0x00617369
    50fc:	5f746962 	svcpl	0x00746962
    5100:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    5104:	6d726100 	ldfvse	f6, [r2, #-0]
    5108:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    510c:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    5110:	73690072 	cmnvc	r9, #114	; 0x72
    5114:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5118:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    511c:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    5120:	4154006d 	cmpmi	r4, sp, rrx
    5124:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5128:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    512c:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    5130:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    5134:	52415400 	subpl	r5, r1, #0, 8
    5138:	5f544547 	svcpl	0x00544547
    513c:	5f555043 	svcpl	0x00555043
    5140:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    5144:	5f6c6c65 	svcpl	0x006c6c65
    5148:	00346a70 	eorseq	r6, r4, r0, ror sl
    514c:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    5150:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    5154:	6f705f68 	svcvs	0x00705f68
    5158:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    515c:	72610072 	rsbvc	r0, r1, #114	; 0x72
    5160:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    5164:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    5168:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    516c:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5170:	61736900 	cmnvs	r3, r0, lsl #18
    5174:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5178:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    517c:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    5180:	52415400 	subpl	r5, r1, #0, 8
    5184:	5f544547 	svcpl	0x00544547
    5188:	5f555043 	svcpl	0x00555043
    518c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5190:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    5194:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    5198:	61786574 	cmnvs	r8, r4, ror r5
    519c:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    51a0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    51a4:	745f7469 	ldrbvc	r7, [pc], #-1129	; 51ac <patchGenfskRfe+0x54>
    51a8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    51ac:	41420032 	cmpmi	r2, r2, lsr r0
    51b0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    51b4:	5f484352 	svcpl	0x00484352
    51b8:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    51bc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    51c0:	645f7469 	ldrbvs	r7, [pc], #-1129	; 51c8 <patchGenfskRfe+0x70>
    51c4:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    51c8:	6100646f 	tstvs	r0, pc, ror #8
    51cc:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    51d0:	5f363170 	svcpl	0x00363170
    51d4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    51d8:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 51e0 <patchGenfskRfe+0x88>
    51dc:	52410065 	subpl	r0, r1, #101	; 0x65
    51e0:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    51e4:	6d726100 	ldfvse	f6, [r2, #-0]
    51e8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    51ec:	006b3668 	rsbeq	r3, fp, r8, ror #12
    51f0:	5f6d7261 	svcpl	0x006d7261
    51f4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    51f8:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    51fc:	5f455341 	svcpl	0x00455341
    5200:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5204:	0052375f 	subseq	r3, r2, pc, asr r7
    5208:	6f705f5f 	svcvs	0x00705f5f
    520c:	756f6370 	strbvc	r6, [pc, #-880]!	; 4ea4 <__aeabi_lmul+0x544>
    5210:	745f746e 	ldrbvc	r7, [pc], #-1134	; 5218 <patchGenfskRfe+0xc0>
    5214:	2f006261 	svccs	0x00006261
    5218:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    521c:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    5220:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5224:	6f6e2d6d 	svcvs	0x006e2d6d
    5228:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    522c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5230:	6b396c47 	blvs	e60354 <__ccfg+0xe403ac>
    5234:	672f3954 			; <UNDEFINED> instruction: 0x672f3954
    5238:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    523c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5240:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5244:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5248:	322d392d 	eorcc	r3, sp, #737280	; 0xb4000
    524c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    5250:	622f3471 	eorvs	r3, pc, #1895825408	; 0x71000000
    5254:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5258:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    525c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5260:	61652d65 	cmnvs	r5, r5, ror #26
    5264:	742f6962 	strtvc	r6, [pc], #-2402	; 526c <patchGenfskRfe+0x114>
    5268:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    526c:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    5270:	696c2f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    5274:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    5278:	61736900 	cmnvs	r3, r0, lsl #18
    527c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5280:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    5284:	41540065 	cmpmi	r4, r5, rrx
    5288:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    528c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5290:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5294:	61786574 	cmnvs	r8, r4, ror r5
    5298:	54003337 	strpl	r3, [r0], #-823	; 0xfffffcc9
    529c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    52a0:	50435f54 	subpl	r5, r3, r4, asr pc
    52a4:	65675f55 	strbvs	r5, [r7, #-3925]!	; 0xfffff0ab
    52a8:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    52ac:	61377663 	teqvs	r7, r3, ror #12
    52b0:	52415400 	subpl	r5, r1, #0, 8
    52b4:	5f544547 	svcpl	0x00544547
    52b8:	5f555043 	svcpl	0x00555043
    52bc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    52c0:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    52c4:	72610036 	rsbvc	r0, r1, #54	; 0x36
    52c8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    52cc:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    52d0:	6f765f6f 	svcvs	0x00765f6f
    52d4:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    52d8:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    52dc:	41420065 	cmpmi	r2, r5, rrx
    52e0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    52e4:	5f484352 	svcpl	0x00484352
    52e8:	69004138 	stmdbvs	r0, {r3, r4, r5, r8, lr}
    52ec:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    52f0:	615f7469 	cmpvs	pc, r9, ror #8
    52f4:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    52f8:	41420074 	hvcmi	8196	; 0x2004
    52fc:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5300:	5f484352 	svcpl	0x00484352
    5304:	54005238 	strpl	r5, [r0], #-568	; 0xfffffdc8
    5308:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    530c:	50435f54 	subpl	r5, r3, r4, asr pc
    5310:	6f635f55 	svcvs	0x00635f55
    5314:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5318:	63333761 	teqvs	r3, #25427968	; 0x1840000
    531c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5320:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    5324:	4d524100 	ldfmie	f4, [r2, #-0]
    5328:	00564e5f 	subseq	r4, r6, pc, asr lr
    532c:	5f6d7261 	svcpl	0x006d7261
    5330:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5334:	72610034 	rsbvc	r0, r1, #52	; 0x34
    5338:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    533c:	00366863 	eorseq	r6, r6, r3, ror #16
    5340:	5f6d7261 	svcpl	0x006d7261
    5344:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5348:	72610037 	rsbvc	r0, r1, #55	; 0x37
    534c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5350:	00386863 	eorseq	r6, r8, r3, ror #16
    5354:	79744944 	ldmdbvc	r4!, {r2, r6, r8, fp, lr}^
    5358:	61006570 	tstvs	r0, r0, ror r5
    535c:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5364 <patchGenfskRfe+0x20c>
    5360:	5f656e75 	svcpl	0x00656e75
    5364:	61637378 	smcvs	14136	; 0x3738
    5368:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
    536c:	72747357 	rsbsvc	r7, r4, #1543503873	; 0x5c000001
    5370:	00746375 	rsbseq	r6, r4, r5, ror r3
    5374:	696b616d 	stmdbvs	fp!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5378:	635f676e 	cmpvs	pc, #28835840	; 0x1b80000
    537c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    5380:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    5384:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    5388:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    538c:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
    5390:	69765f6c 	ldmdbvs	r6!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    5394:	616c5f61 	cmnvs	ip, r1, ror #30
    5398:	006c6562 	rsbeq	r6, ip, r2, ror #10
    539c:	5f617369 	svcpl	0x00617369
    53a0:	5f746962 	svcpl	0x00746962
    53a4:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
    53a8:	61736900 	cmnvs	r3, r0, lsl #18
    53ac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    53b0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    53b4:	006b3676 	rsbeq	r3, fp, r6, ror r6
    53b8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53bc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53c0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53c4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53c8:	00376178 	eorseq	r6, r7, r8, ror r1
    53cc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53d0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53d4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53d8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53dc:	00386178 	eorseq	r6, r8, r8, ror r1
    53e0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53e4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53e8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53ec:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53f0:	00396178 	eorseq	r6, r9, r8, ror r1
    53f4:	5f4d5241 	svcpl	0x004d5241
    53f8:	5f534350 	svcpl	0x00534350
    53fc:	53435041 	movtpl	r5, #12353	; 0x3041
    5400:	4d524100 	ldfmie	f4, [r2, #-0]
    5404:	5343505f 	movtpl	r5, #12383	; 0x305f
    5408:	5054415f 	subspl	r4, r4, pc, asr r1
    540c:	63005343 	movwvs	r5, #835	; 0x343
    5410:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5414:	64207865 	strtvs	r7, [r0], #-2149	; 0xfffff79b
    5418:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    541c:	41540065 	cmpmi	r4, r5, rrx
    5420:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5424:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5428:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    542c:	61786574 	cmnvs	r8, r4, ror r5
    5430:	6f633337 	svcvs	0x00633337
    5434:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5438:	00333561 	eorseq	r3, r3, r1, ror #10
    543c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5440:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5444:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5448:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    544c:	70306d78 	eorsvc	r6, r0, r8, ror sp
    5450:	0073756c 	rsbseq	r7, r3, ip, ror #10
    5454:	5f6d7261 	svcpl	0x006d7261
    5458:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    545c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5460:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5464:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    5468:	645f0065 	ldrbvs	r0, [pc], #-101	; 5470 <patchGenfskRfe+0x318>
    546c:	5f746e6f 	svcpl	0x00746e6f
    5470:	5f657375 	svcpl	0x00657375
    5474:	65657274 	strbvs	r7, [r5, #-628]!	; 0xfffffd8c
    5478:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    547c:	54005f65 	strpl	r5, [r0], #-3941	; 0xfffff09b
    5480:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5484:	50435f54 	subpl	r5, r3, r4, asr pc
    5488:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    548c:	7430316d 	ldrtvc	r3, [r0], #-365	; 0xfffffe93
    5490:	00696d64 	rsbeq	r6, r9, r4, ror #26
    5494:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5498:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    549c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    54a0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    54a4:	00356178 	eorseq	r6, r5, r8, ror r1
    54a8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    54ac:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    54b0:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    54b4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    54b8:	72610065 	rsbvc	r0, r1, #101	; 0x65
    54bc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    54c0:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    54c4:	54006372 	strpl	r6, [r0], #-882	; 0xfffffc8e
    54c8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    54cc:	50435f54 	subpl	r5, r3, r4, asr pc
    54d0:	6f635f55 	svcvs	0x00635f55
    54d4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    54d8:	6d73316d 	ldfvse	f3, [r3, #-436]!	; 0xfffffe4c
    54dc:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    54e0:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    54e4:	00796c70 	rsbseq	r6, r9, r0, ror ip
    54e8:	5f6d7261 	svcpl	0x006d7261
    54ec:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    54f0:	5f746e65 	svcpl	0x00746e65
    54f4:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    54f8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    54fc:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5500:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    5504:	4d524100 	ldfmie	f4, [r2, #-0]
    5508:	004c505f 	subeq	r5, ip, pc, asr r0
    550c:	5f617369 	svcpl	0x00617369
    5510:	5f746962 	svcpl	0x00746962
    5514:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5518:	73690033 	cmnvc	r9, #51	; 0x33
    551c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5520:	66765f74 	uhsub16vs	r5, r6, r4
    5524:	00347670 	eorseq	r7, r4, r0, ror r6
    5528:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    552c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5530:	54365f48 	ldrtpl	r5, [r6], #-3912	; 0xfffff0b8
    5534:	41420032 	cmpmi	r2, r2, lsr r0
    5538:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    553c:	5f484352 	svcpl	0x00484352
    5540:	4d5f4d38 	ldclmi	13, cr4, [pc, #-224]	; 5468 <patchGenfskRfe+0x310>
    5544:	004e4941 	subeq	r4, lr, r1, asr #18
    5548:	47524154 			; <UNDEFINED> instruction: 0x47524154
    554c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5550:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5554:	74396d72 	ldrtvc	r6, [r9], #-3442	; 0xfffff28e
    5558:	00696d64 	rsbeq	r6, r9, r4, ror #26
    555c:	5f4d5241 	svcpl	0x004d5241
    5560:	42004c41 	andmi	r4, r0, #16640	; 0x4100
    5564:	5f455341 	svcpl	0x00455341
    5568:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    556c:	004d375f 	subeq	r3, sp, pc, asr r7
    5570:	5f6d7261 	svcpl	0x006d7261
    5574:	67726174 			; <UNDEFINED> instruction: 0x67726174
    5578:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    557c:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    5580:	6d726100 	ldfvse	f6, [r2, #-0]
    5584:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    5588:	5f746567 	svcpl	0x00746567
    558c:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    5590:	52415400 	subpl	r5, r1, #0, 8
    5594:	5f544547 	svcpl	0x00544547
    5598:	5f555043 	svcpl	0x00555043
    559c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55a0:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    55a4:	52415400 	subpl	r5, r1, #0, 8
    55a8:	5f544547 	svcpl	0x00544547
    55ac:	5f555043 	svcpl	0x00555043
    55b0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55b4:	37727865 	ldrbcc	r7, [r2, -r5, ror #16]!
    55b8:	52415400 	subpl	r5, r1, #0, 8
    55bc:	5f544547 	svcpl	0x00544547
    55c0:	5f555043 	svcpl	0x00555043
    55c4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55c8:	38727865 	ldmdacc	r2!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    55cc:	61736900 	cmnvs	r3, r0, lsl #18
    55d0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    55d4:	61706c5f 	cmnvs	r0, pc, asr ip
    55d8:	73690065 	cmnvc	r9, #101	; 0x65
    55dc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    55e0:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    55e4:	5f6b7269 	svcpl	0x006b7269
    55e8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    55ec:	007a6b36 	rsbseq	r6, sl, r6, lsr fp
    55f0:	5f617369 	svcpl	0x00617369
    55f4:	5f746962 	svcpl	0x00746962
    55f8:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    55fc:	61736900 	cmnvs	r3, r0, lsl #18
    5600:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5604:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5608:	69003476 	stmdbvs	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
    560c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5610:	615f7469 	cmpvs	pc, r9, ror #8
    5614:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    5618:	61736900 	cmnvs	r3, r0, lsl #18
    561c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5620:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5624:	69003776 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp}
    5628:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    562c:	615f7469 	cmpvs	pc, r9, ror #8
    5630:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    5634:	6f645f00 	svcvs	0x00645f00
    5638:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 51d2 <patchGenfskRfe+0x7a>
    563c:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    5640:	685f7874 	ldmdavs	pc, {r2, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5644:	5f657265 	svcpl	0x00657265
    5648:	49515500 	ldmdbmi	r1, {r8, sl, ip, lr}^
    564c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5650:	61736900 	cmnvs	r3, r0, lsl #18
    5654:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5658:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    565c:	65743576 	ldrbvs	r3, [r4, #-1398]!	; 0xfffffa8a
    5660:	6d726100 	ldfvse	f6, [r2, #-0]
    5664:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    5668:	72610065 	rsbvc	r0, r1, #101	; 0x65
    566c:	70635f6d 	rsbvc	r5, r3, sp, ror #30
    5670:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
    5674:	77726574 			; <UNDEFINED> instruction: 0x77726574
    5678:	006b726f 	rsbeq	r7, fp, pc, ror #4
    567c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5680:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5684:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5688:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    568c:	5f007430 	svcpl	0x00007430
    5690:	0068755f 	rsbeq	r7, r8, pc, asr r5
    5694:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    5698:	0071655f 	rsbseq	r6, r1, pc, asr r5
    569c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    56a0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    56a4:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    56a8:	36323561 	ldrtcc	r3, [r2], -r1, ror #10
    56ac:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 47b4 <NOROM_ChipInfo_GetHwRevision>
    56b0:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    56b4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    56b8:	745f6863 	ldrbvc	r6, [pc], #-2147	; 56c0 <patchGenfskRfe+0x568>
    56bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    56c0:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    56c4:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    56c8:	5f626174 	svcpl	0x00626174
    56cc:	705f7165 	subsvc	r7, pc, r5, ror #2
    56d0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    56d4:	61007265 	tstvs	r0, r5, ror #4
    56d8:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    56dc:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    56e0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    56e4:	00726574 	rsbseq	r6, r2, r4, ror r5
    56e8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    56ec:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    56f0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    56f4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    56f8:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    56fc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5700:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    5704:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    5708:	52415400 	subpl	r5, r1, #0, 8
    570c:	5f544547 	svcpl	0x00544547
    5710:	5f555043 	svcpl	0x00555043
    5714:	6f63706d 	svcvs	0x0063706d
    5718:	6f6e6572 	svcvs	0x006e6572
    571c:	00706676 	rsbseq	r6, r0, r6, ror r6
    5720:	5f617369 	svcpl	0x00617369
    5724:	5f746962 	svcpl	0x00746962
    5728:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    572c:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    5730:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    5734:	41006472 	tstmi	r0, r2, ror r4
    5738:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    573c:	72610043 	rsbvc	r0, r1, #67	; 0x43
    5740:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5744:	5f386863 	svcpl	0x00386863
    5748:	72610032 	rsbvc	r0, r1, #50	; 0x32
    574c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5750:	5f386863 	svcpl	0x00386863
    5754:	72610033 	rsbvc	r0, r1, #51	; 0x33
    5758:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    575c:	5f386863 	svcpl	0x00386863
    5760:	41540034 	cmpmi	r4, r4, lsr r0
    5764:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5768:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    576c:	706d665f 	rsbvc	r6, sp, pc, asr r6
    5770:	00363236 	eorseq	r3, r6, r6, lsr r2
    5774:	5f4d5241 	svcpl	0x004d5241
    5778:	61005343 	tstvs	r0, r3, asr #6
    577c:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    5780:	5f363170 	svcpl	0x00363170
    5784:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    5788:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    578c:	72610068 	rsbvc	r0, r1, #104	; 0x68
    5790:	61625f6d 	cmnvs	r2, sp, ror #30
    5794:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    5798:	00686372 	rsbeq	r6, r8, r2, ror r3
    579c:	6c765f5f 	ldclvs	15, cr5, [r6], #-380	; 0xfffffe84
    57a0:	52415400 	subpl	r5, r1, #0, 8
    57a4:	5f544547 	svcpl	0x00544547
    57a8:	5f555043 	svcpl	0x00555043
    57ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    57b0:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    57b4:	52415400 	subpl	r5, r1, #0, 8
    57b8:	5f544547 	svcpl	0x00544547
    57bc:	5f555043 	svcpl	0x00555043
    57c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    57c4:	31617865 	cmncc	r1, r5, ror #16
    57c8:	726f6335 	rsbvc	r6, pc, #-738197504	; 0xd4000000
    57cc:	61786574 	cmnvs	r8, r4, ror r5
    57d0:	72610037 	rsbvc	r0, r1, #55	; 0x37
    57d4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    57d8:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    57dc:	4154006d 	cmpmi	r4, sp, rrx
    57e0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    57e4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    57e8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    57ec:	61786574 	cmnvs	r8, r4, ror r5
    57f0:	61003237 	tstvs	r0, r7, lsr r2
    57f4:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    57f8:	645f7363 	ldrbvs	r7, [pc], #-867	; 5800 <patchGenfskRfe+0x6a8>
    57fc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5800:	4100746c 	tstmi	r0, ip, ror #8
    5804:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5808:	415f5343 	cmpmi	pc, r3, asr #6
    580c:	53435041 	movtpl	r5, #12353	; 0x3041
    5810:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    5814:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    5818:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    581c:	50435f54 	subpl	r5, r3, r4, asr pc
    5820:	6f635f55 	svcvs	0x00635f55
    5824:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5828:	00353761 	eorseq	r3, r5, r1, ror #14
    582c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5830:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5834:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    5838:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    583c:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    5840:	6d726100 	ldfvse	f6, [r2, #-0]
    5844:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5848:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    584c:	31626d75 	smccc	9941	; 0x26d5
    5850:	6d726100 	ldfvse	f6, [r2, #-0]
    5854:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5858:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    585c:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    5860:	52415400 	subpl	r5, r1, #0, 8
    5864:	5f544547 	svcpl	0x00544547
    5868:	5f555043 	svcpl	0x00555043
    586c:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    5870:	61007478 	tstvs	r0, r8, ror r4
    5874:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5878:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    587c:	5f5f0074 	svcpl	0x005f0074
    5880:	5f003078 	svcpl	0x00003078
    5884:	0031785f 	eorseq	r7, r1, pc, asr r8
    5888:	32785f5f 	rsbscc	r5, r8, #380	; 0x17c
    588c:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5890:	73690033 	cmnvc	r9, #51	; 0x33
    5894:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5898:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    589c:	6d726100 	ldfvse	f6, [r2, #-0]
    58a0:	5f646c5f 	svcpl	0x00646c5f
    58a4:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    58a8:	72610064 	rsbvc	r0, r1, #100	; 0x64
    58ac:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    58b0:	5f386863 	svcpl	0x00386863
    58b4:	Address 0x00000000000058b4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
		packet[0] = 0;
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  f0:	61656c65 	cmnvs	r5, r5, ror #24
		*p = message->tpe;p++;
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		*p = message->sender_id;p++;
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
		*p = message->receiver_id;p++;
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		switch(message->tpe) {
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		tcv_endp(packet);
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	0000002c 	andeq	r0, r0, ip, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000a4 	andeq	r0, r0, r4, lsr #1
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      2c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
      30:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
      34:	ce0a660b 	cfmadd32gt	mvax0, mvfx6, mvfx10, mvfx11
      38:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      3c:	000b4300 	andeq	r4, fp, r0, lsl #6
			i = k;
      40:	0000000c 	andeq	r0, r0, ip
	...
}
      4c:	00000006 	andeq	r0, r0, r6
      50:	0000000c 	andeq	r0, r0, ip
	...
      5c:	00000006 	andeq	r0, r0, r6
			nq++;
      60:	0000000c 	andeq	r0, r0, ip
	...
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      6c:	00000008 	andeq	r0, r0, r8
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	0000016c 	andeq	r0, r0, ip, ror #2
      7c:	00000014 	andeq	r0, r0, r4, lsl r0
      80:	00000014 	andeq	r0, r0, r4, lsl r0
      84:	00000000 	andeq	r0, r0, r0
      88:	00000180 	andeq	r0, r0, r0, lsl #3
      8c:	00000024 	andeq	r0, r0, r4, lsr #32
	if (!button_still_pressed (__button_list [pbutton]))
      90:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      94:	00018e02 	andeq	r8, r1, r2, lsl #28
      98:	00000014 	andeq	r0, r0, r4, lsl r0
	if (baction == NULL)
      9c:	00000000 	andeq	r0, r0, r0
      a0:	000001a4 	andeq	r0, r0, r4, lsr #3
	(*baction) (pbutton);
      a4:	00000012 	andeq	r0, r0, r2, lsl r0
endthread
      a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00018e02 	andeq	r8, r1, r2, lsl #28
      b0:	0000000c 	andeq	r0, r0, ip
	...
endthread
      bc:	0000000c 	andeq	r0, r0, ip
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	00000000 	andeq	r0, r0, r0
fsm sender(struct ResponseMessage *message) {
      c8:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
      cc:	00000016 	andeq	r0, r0, r6, lsl r0
      d0:	0000000c 	andeq	r0, r0, ip
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	000001cc 	andeq	r0, r0, ip, asr #3
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0000001c 	andeq	r0, r0, ip, lsl r0
      e0:	00000024 	andeq	r0, r0, r4, lsr #32
      e4:	00000000 	andeq	r0, r0, r0
      e8:	000001e8 	andeq	r0, r0, r8, ror #3
		packet[0] = 0;
      ec:	00000394 	muleq	r0, r4, r3
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		*p = message->tpe;p++;
      f4:	86038504 	strhi	r8, [r3], -r4, lsl #10
      f8:	42018e02 	andmi	r8, r1, #2, 28
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	e102500e 	tst	r2, lr
		*p = message->sender_id;p++;
     100:	41100e0a 	tstmi	r0, sl, lsl #28
		*p = message->receiver_id;p++;
     104:	0000000b 	andeq	r0, r0, fp
		switch(message->tpe) {
     108:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		tcv_endp(packet);
     114:	0000001e 	andeq	r0, r0, lr, lsl r0
     118:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     120:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     124:	00000014 	andeq	r0, r0, r4, lsl r0
		finish;
     128:	00000000 	andeq	r0, r0, r0
     12c:	0000057c 	andeq	r0, r0, ip, ror r5
				*p = message->status;p++;
     130:	00000026 	andeq	r0, r0, r6, lsr #32
     134:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				strncpy(p, message->record, sizeof(message->record));
     138:	00018e02 	andeq	r8, r1, r2, lsl #28
				*p = message->padding;p++;
     13c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
				strncpy(p, message->record, sizeof(message->record));
     148:	00000012 	andeq	r0, r0, r2, lsl r0
				strncpy(p, message->record, sizeof(message->record));
     14c:	83080e41 	movwhi	r0, #36417	; 0x8e41
				*p = message->record_index;p++;
     150:	00018e02 	andeq	r8, r1, r2, lsl #28
				*p = message->padding;
     154:	00000024 	andeq	r0, r0, r4, lsr #32
				break;
     158:	00000000 	andeq	r0, r0, r0
     15c:	000005a4 	andeq	r0, r0, r4, lsr #11
     160:	00000588 	andeq	r0, r0, r8, lsl #11
     164:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     168:	86048505 	strhi	r8, [r4], -r5, lsl #10
		node->nnodes[i] = 0;
     16c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     170:	280e4101 	stmdacs	lr, {r0, r8, lr}
     174:	0e029203 	cdpeq	2, 0, cr9, cr2, cr3, {0}
     178:	00000014 	andeq	r0, r0, r4, lsl r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     17c:	0000000c 	andeq	r0, r0, ip
bool init_node(struct Node* node){
     180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    node->id  = 0;                  // default id value 0
     184:	7c020001 	stcvc	0, cr0, [r2], {1}
    node->index = 0;                // default entry count 0
     188:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    node->data_base.item_count = 0; // default no items in array
     18c:	0000000c 	andeq	r0, r0, ip
	reset_array(node);
     190:	0000017c 	andeq	r0, r0, ip, ror r1
    DEBUG_PRINT("Error initializing node...\n");
     194:	00000b2c 	andeq	r0, r0, ip, lsr #22
     198:	0000000c 	andeq	r0, r0, ip
};
     19c:	00000018 	andeq	r0, r0, r8, lsl r0
     1a0:	0000017c 	andeq	r0, r0, ip, ror r1
uint8_t generate_request_num(void){
     1a4:	00000b38 	andeq	r0, r0, r8, lsr fp
    return (uint8_t) (rand() % 255);
     1a8:	0000002c 	andeq	r0, r0, ip, lsr #32
     1ac:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     1b0:	41000e0a 	tstmi	r0, sl, lsl #28
}
     1b4:	0000000b 	andeq	r0, r0, fp
            node->nnodes[i] = 0; // set to null byte
     1b8:	00000018 	andeq	r0, r0, r8, lsl r0
     1bc:	0000017c 	andeq	r0, r0, ip, ror r1
     1c0:	00000b64 	andeq	r0, r0, r4, ror #22
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
};
     1c8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1cc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     1d0:	000b4204 	andeq	r4, fp, r4, lsl #4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1d4:	00000018 	andeq	r0, r0, r8, lsl r0
     1d8:	0000017c 	andeq	r0, r0, ip, ror r1
     1dc:	00000b90 	muleq	r0, r0, fp
        node->data_base.item_count -= 1;
     1e0:	0000003c 	andeq	r0, r0, ip, lsr r0
};
     1e4:	83100e41 	tsthi	r0, #1040	; 0x410
fsm receiver(struct Node* node_db) {
     1e8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     1ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     1f0:	00000018 	andeq	r0, r0, r8, lsl r0
     1f4:	0000017c 	andeq	r0, r0, ip, ror r1
     1f8:	00000bcc 	andeq	r0, r0, ip, asr #23
     1fc:	00000040 	andeq	r0, r0, r0, asr #32
     200:	83100e41 	tsthi	r0, #1040	; 0x410
     204:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     208:	00018e02 	andeq	r8, r1, r2, lsl #28
     20c:	00000014 	andeq	r0, r0, r4, lsl r0
		incoming_packet = tcv_rnp(receiving, sfd);
     210:	0000017c 	andeq	r0, r0, ip, ror r1
     214:	00000000 	andeq	r0, r0, r0
     218:	00000020 	andeq	r0, r0, r0, lsr #32
     21c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		payload = (struct ResponseMessage*)(incoming_packet+1);
     220:	00018e02 	andeq	r8, r1, r2, lsl #28
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     224:	00000014 	andeq	r0, r0, r4, lsl r0
     228:	0000017c 	andeq	r0, r0, ip, ror r1
     22c:	00000c0c 	andeq	r0, r0, ip, lsl #24
     230:	00000054 	andeq	r0, r0, r4, asr r0
		DEBUG_PRINT("\r\nRECEIVED TYPE: %d", payload->tpe);
     234:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
     23c:	00000014 	andeq	r0, r0, r4, lsl r0
		DEBUG_PRINT("\r\nRECEIVED group id: %d", payload->gid);
     240:	0000017c 	andeq	r0, r0, ip, ror r1
     244:	00000c60 	andeq	r0, r0, r0, ror #24
		DEBUG_PRINT("\r\nRECEIVED sender id: %d", payload->sender_id);
     248:	00000040 	andeq	r0, r0, r0, asr #32
     24c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
		DEBUG_PRINT("\r\nRECEIVED rec id: %d", payload->receiver_id);
     254:	00000014 	andeq	r0, r0, r4, lsl r0
     258:	0000017c 	andeq	r0, r0, ip, ror r1
		switch (tpe){
     25c:	00000ca0 	andeq	r0, r0, r0, lsr #25
     260:	00000028 	andeq	r0, r0, r8, lsr #32
     264:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	0000017c 	andeq	r0, r0, ip, ror r1
     274:	00000cc8 	andeq	r0, r0, r8, asr #25
				DEBUG_PRINT("\r\nRECEIVED GID: %u", discovery_request_message->gid);
     278:	00000114 	andeq	r0, r0, r4, lsl r1
     27c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				DEBUG_PRINT("\rRECEIVED TYPE: %u", discovery_request_message->tpe);
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
     284:	0000001c 	andeq	r0, r0, ip, lsl r0
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
     288:	0000017c 	andeq	r0, r0, ip, ror r1
     28c:	00000ddc 	ldrdeq	r0, [r0], -ip
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
     290:	00000050 	andeq	r0, r0, r0, asr r0
     294:	83180e41 	tsthi	r8, #1040	; 0x410
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
     298:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     29c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				if (discovery_request_message->gid == node_db->gid){
     2a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     2a4:	00000018 	andeq	r0, r0, r8, lsl r0
					response_message_0->gid = discovery_request_message->gid;
     2a8:	0000017c 	andeq	r0, r0, ip, ror r1
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2ac:	00000e2c 	andeq	r0, r0, ip, lsr #28
					response_message_0->request_number = discovery_request_message->request_number;
     2b0:	00000054 	andeq	r0, r0, r4, asr r0
					response_message_0->sender_id = node_db->id;
     2b4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2b8:	86038504 	strhi	r8, [r3], -r4, lsl #10
					call sender(response_message_0, done_case);
     2bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     2c0:	0000000c 	andeq	r0, r0, ip
     2c4:	0000017c 	andeq	r0, r0, ip, ror r1
     2c8:	00000e80 	andeq	r0, r0, r0, lsl #29
     2cc:	00000038 	andeq	r0, r0, r8, lsr r0
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     2d0:	00000020 	andeq	r0, r0, r0, lsr #32
     2d4:	0000017c 	andeq	r0, r0, ip, ror r1
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     2d8:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     2dc:	00000110 	andeq	r0, r0, r0, lsl r1
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     2e0:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     2e4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     2e8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     2ec:	89038804 	stmdbhi	r3, {r2, fp, pc}
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     2f4:	0000000c 	andeq	r0, r0, ip
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2f8:	0000017c 	andeq	r0, r0, ip, ror r1
     2fc:	00000000 	andeq	r0, r0, r0
     300:	0000000c 	andeq	r0, r0, ip
     304:	00000018 	andeq	r0, r0, r8, lsl r0
     308:	0000017c 	andeq	r0, r0, ip, ror r1
     30c:	00000fc8 	andeq	r0, r0, r8, asr #31
     310:	000000c0 	andeq	r0, r0, r0, asr #1
     314:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     318:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     31c:	00000001 	andeq	r0, r0, r1
					node_db->index+=1;
     320:	00000018 	andeq	r0, r0, r8, lsl r0
		tcv_endp(incoming_packet);
     324:	0000017c 	andeq	r0, r0, ip, ror r1
     328:	00001088 	andeq	r1, r0, r8, lsl #1
		proceed receiving;
     32c:	00000044 	andeq	r0, r0, r4, asr #32
     330:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_out(response_1_create, "\r\nData Saved");
     334:	86038504 	strhi	r8, [r3], -r4, lsl #10
     338:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed receiving;
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_out(response_1_delete, "\r\nRecord Deleted");
     340:	0000017c 	andeq	r0, r0, ip, ror r1
     344:	000010cc 	andeq	r1, r0, ip, asr #1
		proceed receiving;
     348:	0000003c 	andeq	r0, r0, ip, lsr r0
     34c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     350:	86048505 	strhi	r8, [r4], -r5, lsl #10
     354:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     358:	00000001 	andeq	r0, r0, r1
     35c:	00000018 	andeq	r0, r0, r8, lsl r0
		proceed receiving;
     360:	0000017c 	andeq	r0, r0, ip, ror r1
     364:	00001108 	andeq	r1, r0, r8, lsl #2
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     368:	000000a4 	andeq	r0, r0, r4, lsr #1
     36c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     370:	86038504 	strhi	r8, [r3], -r4, lsl #10
		proceed receiving;
     374:	00018e02 	andeq	r8, r1, r2, lsl #28
     378:	00000030 	andeq	r0, r0, r0, lsr r0
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     37c:	0000017c 	andeq	r0, r0, ip, ror r1
     380:	000011ac 	andeq	r1, r0, ip, lsr #3
     384:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
		proceed receiving;
     388:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     38c:	86078508 	strhi	r8, [r7], -r8, lsl #10
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     390:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     394:	8a038904 	bhi	e27ac <__ccfg+0xc2804>
     398:	02018e02 	andeq	r8, r1, #2, 28
		proceed receiving;
     39c:	cace0aa2 	bgt	ff382e2c <_estack+0xdf37de2c>
     3a0:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3a4:	000ec4c5 	andeq	ip, lr, r5, asr #9
		proceed receiving;
     3a8:	00000b42 	andeq	r0, r0, r2, asr #22
     3ac:	0000000c 	andeq	r0, r0, ip
}
     3b0:	0000017c 	andeq	r0, r0, ip, ror r1
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     3b4:	00001364 	andeq	r1, r0, r4, ror #6
     3b8:	00000024 	andeq	r0, r0, r4, lsr #32
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     3bc:	0000000c 	andeq	r0, r0, ip
     3c0:	0000017c 	andeq	r0, r0, ip, ror r1
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	00000028 	andeq	r0, r0, r8, lsr #32
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	0000017c 	andeq	r0, r0, ip, ror r1
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     3d4:	00001388 	andeq	r1, r0, r8, lsl #7
     3d8:	00000258 	andeq	r0, r0, r8, asr r2
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     3dc:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     3e0:	8e028b03 	vmlahi.f64	d8, d2, d3
     3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     3e8:	00070d42 	andeq	r0, r7, r2, asr #26
     3ec:	00000014 	andeq	r0, r0, r4, lsl r0
     3f0:	0000017c 	andeq	r0, r0, ip, ror r1
		strncpy(response_message->record, rec, 20);
     3f4:	000015e0 	andeq	r1, r0, r0, ror #11
     3f8:	00000030 	andeq	r0, r0, r0, lsr r0
     3fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
					call sender(response_message_4, done_case);
     400:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     404:	00000018 	andeq	r0, r0, r8, lsl r0
     408:	0000017c 	andeq	r0, r0, ip, ror r1
     40c:	00000000 	andeq	r0, r0, r0
     410:	0000005c 	andeq	r0, r0, ip, asr r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     414:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     418:	86038504 	strhi	r8, [r3], -r4, lsl #10
					if (delete_record(node_db, delete_record_message->record_index)){
     41c:	00018e02 	andeq	r8, r1, r2, lsl #28
     420:	00000014 	andeq	r0, r0, r4, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     424:	0000017c 	andeq	r0, r0, ip, ror r1
     428:	00001610 	andeq	r1, r0, r0, lsl r6
     42c:	00000060 	andeq	r0, r0, r0, rrx
     430:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     434:	00018e02 	andeq	r8, r1, r2, lsl #28
     438:	0000000c 	andeq	r0, r0, ip
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     43c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     440:	7c020001 	stcvc	0, cr0, [r2], {1}
    return node->data_base.item_array[index];
     444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     448:	00000018 	andeq	r0, r0, r8, lsl r0
     44c:	00000438 	andeq	r0, r0, r8, lsr r4
     450:	00001670 	andeq	r1, r0, r0, ror r6
     454:	0000003c 	andeq	r0, r0, ip, lsr r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     458:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    return node->data_base.item_array[index];
     45c:	86038504 	strhi	r8, [r3], -r4, lsl #10
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     460:	00018e02 	andeq	r8, r1, r2, lsl #28
     464:	00000018 	andeq	r0, r0, r8, lsl r0
     468:	00000438 	andeq	r0, r0, r8, lsr r4
		strncpy(response_message->record, rec, 20);
     46c:	000016ac 	andeq	r1, r0, ip, lsr #13
     470:	00000080 	andeq	r0, r0, r0, lsl #1
     474:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     478:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     47c:	00000001 	andeq	r0, r0, r1
     480:	0000000c 	andeq	r0, r0, ip
     484:	00000438 	andeq	r0, r0, r8, lsr r4
     488:	0000172c 	andeq	r1, r0, ip, lsr #14
     48c:	00000018 	andeq	r0, r0, r8, lsl r0
     490:	00000014 	andeq	r0, r0, r4, lsl r0
     494:	00000438 	andeq	r0, r0, r8, lsr r4
     498:	00000000 	andeq	r0, r0, r0
     49c:	00000024 	andeq	r0, r0, r4, lsr #32
     4a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ac:	00000438 	andeq	r0, r0, r8, lsr r4
     4b0:	00001744 	andeq	r1, r0, r4, asr #14
     4b4:	00000010 	andeq	r0, r0, r0, lsl r0
     4b8:	83080e42 	movwhi	r0, #36418	; 0x8e42
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	00000438 	andeq	r0, r0, r8, lsr r4
     4c8:	00001754 	andeq	r1, r0, r4, asr r7
     4cc:	0000002c 	andeq	r0, r0, ip, lsr #32
     4d0:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
     4dc:	00000438 	andeq	r0, r0, r8, lsr r4
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	0000004c 	andeq	r0, r0, ip, asr #32
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     4e8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f0:	0000000c 	andeq	r0, r0, ip
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     4f4:	00000438 	andeq	r0, r0, r8, lsr r4
     4f8:	00001780 	andeq	r1, r0, r0, lsl #15
     4fc:	00000006 	andeq	r0, r0, r6
     500:	00000028 	andeq	r0, r0, r8, lsr #32
				if(!response_flag){
     504:	00000438 	andeq	r0, r0, r8, lsr r4
     508:	00001788 	andeq	r1, r0, r8, lsl #15
					response_flag=1;
     50c:	000000cc 	andeq	r0, r0, ip, asr #1
					trigger(&response_flag);
     510:	83180e41 	tsthi	r8, #1040	; 0x410
				switch(response_message_5->status){
     514:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     518:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     51c:	02018e02 	andeq	r8, r1, #2, 28
     520:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     524:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
						if (response_checker[0] == response_message_5->request_number){
     528:	0b42000e 	bleq	1080568 <__ccfg+0x10605c0>
     52c:	00000014 	andeq	r0, r0, r4, lsl r0
     530:	00000438 	andeq	r0, r0, r8, lsr r4
							switch(response_checker[1]){
     534:	00001854 	andeq	r1, r0, r4, asr r8
     538:	00000014 	andeq	r0, r0, r4, lsl r0
     53c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     540:	00018e02 	andeq	r8, r1, r2, lsl #28
						proceed response_2;
     544:	00000014 	andeq	r0, r0, r4, lsl r0
						break;
     548:	00000438 	andeq	r0, r0, r8, lsr r4
									proceed response_1_delete;
     54c:	00001868 	andeq	r1, r0, r8, ror #16
									proceed response_1_retrieve;
     550:	00000034 	andeq	r0, r0, r4, lsr r0
						proceed response_2;
     554:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
						proceed response_3;
     558:	00018e02 	andeq	r8, r1, r2, lsl #28
						proceed response_4;
     55c:	00000018 	andeq	r0, r0, r8, lsl r0
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     560:	00000438 	andeq	r0, r0, r8, lsr r4
				break;
     564:	0000189c 	muleq	r0, ip, r8
}
     568:	00000034 	andeq	r0, r0, r4, lsr r0
     56c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     570:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     574:	00000001 	andeq	r0, r0, r1
     578:	00000018 	andeq	r0, r0, r8, lsl r0
bool delete_all(struct Node *node){
     57c:	00000438 	andeq	r0, r0, r8, lsr r4
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     580:	00000000 	andeq	r0, r0, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
     584:	0000002c 	andeq	r0, r0, ip, lsr #32
            node->data_base.item_array[i].data_entry[0] = '\0';
     588:	83100e41 	tsthi	r0, #1040	; 0x410
        for(int i = 0; i <= node->data_base.item_count; i++){
     58c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
            node->data_base.item_array[i].timestamp = 0;
     590:	00018e02 	andeq	r8, r1, r2, lsl #28
        for(int i = 0; i <= node->data_base.item_count; i++){
     594:	00000014 	andeq	r0, r0, r4, lsl r0
    node->data_base.item_count = 0;
     598:	00000438 	andeq	r0, r0, r8, lsr r4
}
     59c:	000018d0 	ldrdeq	r1, [r0], -r0
        return true;
     5a0:	00000024 	andeq	r0, r0, r4, lsr #32
fsm root {
     5a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5ac:	00000018 	andeq	r0, r0, r8, lsl r0
     5b0:	00000438 	andeq	r0, r0, r8, lsr r4
     5b4:	000018f4 	strdeq	r1, [r0], -r4
     5b8:	00000038 	andeq	r0, r0, r8, lsr r0
     5bc:	83100e41 	tsthi	r0, #1040	; 0x410
     5c0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c8:	0000000c 	andeq	r0, r0, ip
     5cc:	00000438 	andeq	r0, r0, r8, lsr r4
     5d0:	00000000 	andeq	r0, r0, r0
     5d4:	00000014 	andeq	r0, r0, r4, lsl r0
     5d8:	00000014 	andeq	r0, r0, r4, lsl r0
     5dc:	00000438 	andeq	r0, r0, r8, lsr r4
     5e0:	00000000 	andeq	r0, r0, r0
     5e4:	00000040 	andeq	r0, r0, r0, asr #32
     5e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f0:	00000014 	andeq	r0, r0, r4, lsl r0
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     5f4:	00000438 	andeq	r0, r0, r8, lsr r4
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000018 	andeq	r0, r0, r8, lsl r0
		init_node(node_db);
     600:	83080e41 	movwhi	r0, #36417	; 0x8e41
		phys_cc1350(0, MAX_PKT_LEN);
     604:	00018e02 	andeq	r8, r1, r2, lsl #28
     608:	0000000c 	andeq	r0, r0, ip
		tcv_plug (0, &plug_null);
     60c:	00000438 	andeq	r0, r0, r8, lsr r4
     610:	0000192c 	andeq	r1, r0, ip, lsr #18
		sfd = tcv_open (WNONE, 0, 0);
     614:	00000024 	andeq	r0, r0, r4, lsr #32
     618:	0000000c 	andeq	r0, r0, ip
     61c:	00000438 	andeq	r0, r0, r8, lsr r4
     620:	00000000 	andeq	r0, r0, r0
     624:	00000020 	andeq	r0, r0, r0, lsr #32
			diag("Cannot open tcv interface");
     628:	0000000c 	andeq	r0, r0, ip
     62c:	00000438 	andeq	r0, r0, r8, lsr r4
			halt();
     630:	00001950 	andeq	r1, r0, r0, asr r9
		tcv_control(sfd, PHYSOPT_ON, NULL);
     634:	0000000e 	andeq	r0, r0, lr
     638:	0000000c 	andeq	r0, r0, ip
		runfsm receiver(node_db);
     63c:	00000438 	andeq	r0, r0, r8, lsr r4
     640:	0000195e 	andeq	r1, r0, lr, asr r9
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     644:	00000010 	andeq	r0, r0, r0, lsl r0
     648:	0000000c 	andeq	r0, r0, ip
     64c:	00000438 	andeq	r0, r0, r8, lsr r4
     650:	0000196e 	andeq	r1, r0, lr, ror #18
     654:	0000001c 	andeq	r0, r0, ip, lsl r0
     658:	0000000c 	andeq	r0, r0, ip
		ser_inf(get_choice, "%c", &CHOICE);
     65c:	00000438 	andeq	r0, r0, r8, lsr r4
     660:	00000000 	andeq	r0, r0, r0
     664:	00000010 	andeq	r0, r0, r0, lsl r0
		switch(CHOICE) {
     668:	0000000c 	andeq	r0, r0, ip
     66c:	00000438 	andeq	r0, r0, r8, lsr r4
     670:	00000000 	andeq	r0, r0, r0
     674:	00000006 	andeq	r0, r0, r6
     678:	0000000c 	andeq	r0, r0, ip
     67c:	00000438 	andeq	r0, r0, r8, lsr r4
     680:	0000198a 	andeq	r1, r0, sl, lsl #19
     684:	00000014 	andeq	r0, r0, r4, lsl r0
     688:	0000000c 	andeq	r0, r0, ip
     68c:	00000438 	andeq	r0, r0, r8, lsr r4
     690:	0000199e 	muleq	r0, lr, r9
     694:	0000000e 	andeq	r0, r0, lr
				proceed menu;
     698:	00000014 	andeq	r0, r0, r4, lsl r0
     69c:	00000438 	andeq	r0, r0, r8, lsr r4
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     6a0:	000019ac 	andeq	r1, r0, ip, lsr #19
     6a4:	00000024 	andeq	r0, r0, r4, lsr #32
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     6a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     6b0:	00000020 	andeq	r0, r0, r0, lsr #32
		DEBUG_PRINT("setting node group ID");
     6b4:	00000438 	andeq	r0, r0, r8, lsr r4
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     6b8:	000019d0 	ldrdeq	r1, [r0], -r0
    node->gid = gid; 
     6bc:	0000009c 	muleq	r0, ip, r0
		proceed menu;
     6c0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     6c4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     6c8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     6cc:	89038804 	stmdbhi	r3, {r2, fp, pc}
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6d0:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     6d4:	00000014 	andeq	r0, r0, r4, lsl r0
     6d8:	00000438 	andeq	r0, r0, r8, lsr r4
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6dc:	00001a6c 	andeq	r1, r0, ip, ror #20
     6e0:	00000050 	andeq	r0, r0, r0, asr r0
		if((node_db->id < 1) || (node_db->id > 25)){
     6e4:	83080e42 	movwhi	r0, #36418	; 0x8e42
     6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ec:	00000014 	andeq	r0, r0, r4, lsl r0
			strncpy(reason, "Out of Range", 50);
     6f0:	00000438 	andeq	r0, r0, r8, lsr r4
     6f4:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
			proceed invalid_node_id;
     6f8:	00000048 	andeq	r0, r0, r8, asr #32
     6fc:	83080e41 	movwhi	r0, #36417	; 0x8e41
				strncpy(reason, "ID is already in use", 50);
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
		for(int i = 0; i < node_db->index; i++){
     704:	00000014 	andeq	r0, r0, r4, lsl r0
     708:	00000438 	andeq	r0, r0, r8, lsr r4
     70c:	00001b04 	andeq	r1, r0, r4, lsl #22
		proceed menu;
     710:	00000050 	andeq	r0, r0, r0, asr r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
     71c:	00000020 	andeq	r0, r0, r0, lsr #32
     720:	00000438 	andeq	r0, r0, r8, lsr r4
		proceed get_new_node_id;
     724:	00000000 	andeq	r0, r0, r0
     728:	00000058 	andeq	r0, r0, r8, asr r0
		if (!clear_node_neighbour_array(node_db)){
     72c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     730:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
			strncpy(reason, "Error Clearing Node Array", 50);
     734:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     738:	89038804 	stmdbhi	r3, {r2, fp, pc}
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
			proceed error;
     740:	00000018 	andeq	r0, r0, r8, lsl r0
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     744:	00000438 	andeq	r0, r0, r8, lsr r4
     748:	00001b54 	andeq	r1, r0, r4, asr fp
		request_packet->gid = node_db->gid;
     74c:	000000a8 	andeq	r0, r0, r8, lsr #1
     750:	83100e44 	tsthi	r0, #68, 28	; 0x440
		request_packet->tpe = DISCOVERY_REQUEST;
     754:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		request_packet->request_number = generate_request_num();
     758:	00018e02 	andeq	r8, r1, r2, lsl #28
     75c:	00000018 	andeq	r0, r0, r8, lsl r0
		call sender(request_packet, wait_discovery);
     760:	00000438 	andeq	r0, r0, r8, lsr r4
     764:	00001bfc 	strdeq	r1, [r0], -ip
		request_packet->receiver_id=0;
     768:	00000034 	andeq	r0, r0, r4, lsr r0
		call sender(request_packet, wait_discovery);
     76c:	83100e41 	tsthi	r0, #1040	; 0x410
     770:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     774:	00018e02 	andeq	r8, r1, r2, lsl #28
			release;
     778:	0000000c 	andeq	r0, r0, ip
				proceed get_new_node_id;
     77c:	00000438 	andeq	r0, r0, r8, lsr r4
				proceed clear_neighbour_array;
     780:	00001c30 	andeq	r1, r0, r0, lsr ip
				proceed create_proto_start;
     784:	00000018 	andeq	r0, r0, r8, lsl r0
				proceed start_delete_proto;
     788:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed retrieve_proto;
     78c:	00000438 	andeq	r0, r0, r8, lsr r4
				proceed display_db;
     790:	00000000 	andeq	r0, r0, r0
				proceed del_local;
     794:	00000030 	andeq	r0, r0, r0, lsr r0
			if(node_db->id == node_db->nnodes[i]){
     798:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     79c:	00018e02 	andeq	r8, r1, r2, lsl #28
     7a0:	00000014 	andeq	r0, r0, r4, lsl r0
				strncpy(reason, "ID is already in use", 50);
     7a4:	00000438 	andeq	r0, r0, r8, lsr r4
     7a8:	00000000 	andeq	r0, r0, r0
				proceed invalid_node_id;
     7ac:	00000038 	andeq	r0, r0, r8, lsr r0
     7b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		for(int i = 0; i < node_db->index; i++){
     7b4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (discovery_wait_flag == 0){
     7b8:	00000040 	andeq	r0, r0, r0, asr #32
			discovery_wait_flag=1;
     7bc:	00000438 	andeq	r0, r0, r8, lsr r4
     7c0:	00001c48 	andeq	r1, r0, r8, asr #24
			delay(3000, find_proto_start);
     7c4:	0000013c 	andeq	r0, r0, ip, lsr r1
     7c8:	80100e41 	andshi	r0, r0, r1, asr #28
		if (discovery_wait_flag == 1){
     7cc:	82038104 	andhi	r8, r3, #4, 2
			discovery_wait_flag=0;
     7d0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7d4:	0b84380e 	bleq	fe10e814 <_estack+0xde109814>
			delay(3000, display_neighbour_nodes);
     7d8:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     7dc:	07880887 	streq	r0, [r8, r7, lsl #17]
     7e0:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     7e4:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     7e8:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     7ec:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     7f0:	c341100e 	movtgt	r1, #4110	; 0x100e
     7f4:	0ec0c1c2 	acseqdm	f4, f2
     7f8:	000b4100 	andeq	r4, fp, r0, lsl #2
     7fc:	0000000c 	andeq	r0, r0, ip
     800:	00000438 	andeq	r0, r0, r8, lsr r4
     804:	00001d84 	andeq	r1, r0, r4, lsl #27
     808:	00000024 	andeq	r0, r0, r4, lsr #32
     80c:	0000000c 	andeq	r0, r0, ip
     810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     814:	7c020001 	stcvc	0, cr0, [r2], {1}
     818:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     81c:	00000014 	andeq	r0, r0, r4, lsl r0
     820:	0000080c 	andeq	r0, r0, ip, lsl #16
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     824:	00001da8 	andeq	r1, r0, r8, lsr #27
     828:	00000016 	andeq	r0, r0, r6, lsl r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     82c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     830:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (node_db->nnodes[i] == 0) break;
     834:	0000000c 	andeq	r0, r0, ip
     838:	0000080c 	andeq	r0, r0, ip, lsl #16
			ser_outf(display_neighbour_nodes, "%u, ", &node_db->nnodes[i]);
     83c:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
     840:	0000001a 	andeq	r0, r0, sl, lsl r0
     844:	00000018 	andeq	r0, r0, r8, lsl r0
     848:	0000080c 	andeq	r0, r0, ip, lsl #16
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     84c:	00001dd8 	ldrdeq	r1, [r0], -r8
		ser_out(display_neighbour_nodes, "\r\n");
     850:	0000000e 	andeq	r0, r0, lr
     854:	83080e41 	movwhi	r0, #36417	; 0x8e41
		proceed menu;
     858:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     85c:	000ec3ce 	andeq	ip, lr, lr, asr #7
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     860:	00000018 	andeq	r0, r0, r8, lsl r0
     864:	0000080c 	andeq	r0, r0, ip, lsl #16
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     868:	00001de8 	andeq	r1, r0, r8, ror #27
     86c:	0000004c 	andeq	r0, r0, ip, asr #32
     870:	83100e41 	tsthi	r0, #1040	; 0x410
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     874:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     878:	00018e02 	andeq	r8, r1, r2, lsl #28
			strncpy(reason, "Error: improper ID", 50);
     87c:	00000020 	andeq	r0, r0, r0, lsr #32
     880:	0000080c 	andeq	r0, r0, ip, lsl #16
			proceed error;
     884:	00001e34 	andeq	r1, r0, r4, lsr lr
     888:	0000008c 	andeq	r0, r0, ip, lsl #1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     88c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     890:	5f018e02 	svcpl	0x00018e02
		ser_in(get_record_to_create, user_provided_record, 20);
     894:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     898:	560b4200 	strpl	r4, [fp], -r0, lsl #4
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     89c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8a0:	00000020 	andeq	r0, r0, r0, lsr #32
     8a4:	0000080c 	andeq	r0, r0, ip, lsl #16
		create_message->gid = node_db->gid;
     8a8:	00001ec0 	andeq	r1, r0, r0, asr #29
		create_message->tpe = 2;
     8ac:	00000070 	andeq	r0, r0, r0, ror r0
		create_message->request_number = generate_request_num();
     8b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8b4:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		strncpy(create_message->record, user_provided_record, 20);
     8b8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8bc:	430b4200 	movwmi	r4, #45568	; 0xb200
		create_message->receiver_id = user_provided_receiver_id;
     8c0:	000ec4ce 	andeq	ip, lr, lr, asr #9
		strncpy(create_message->record, user_provided_record, 20);
     8c4:	0000003c 	andeq	r0, r0, ip, lsr r0
		create_message->receiver_id = user_provided_receiver_id;
     8c8:	0000080c 	andeq	r0, r0, ip, lsl #16
		strncpy(create_message->record, user_provided_record, 20);
     8cc:	00001f30 	andeq	r1, r0, r0, lsr pc
		response_checker[0] = create_message->request_number;
     8d0:	000000c0 	andeq	r0, r0, r0, asr #1
     8d4:	82080e41 	andhi	r0, r8, #1040	; 0x410
		call sender(create_message, wait);
     8d8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     8dc:	0a84300e 	beq	fe10c91c <_estack+0xde10791c>
     8e0:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
     8e4:	06880787 	streq	r0, [r8], r7, lsl #15
     8e8:	048a0589 	streq	r0, [sl], #1417	; 0x589
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     8ec:	0a6b038e 	beq	1ac172c <__ccfg+0x1aa1784>
     8f0:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     8f4:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     8f8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     8fc:	c2c34108 	sbcgt	r4, r3, #8, 2
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     900:	0b41000e 	bleq	1040940 <__ccfg+0x1020998>
     904:	0000001c 	andeq	r0, r0, ip, lsl r0
			strncpy(reason, "Error: improper node ID", 50);
     908:	0000080c 	andeq	r0, r0, ip, lsl #16
     90c:	00000000 	andeq	r0, r0, r0
     910:	0000006c 	andeq	r0, r0, ip, rrx
			proceed error;
     914:	83180e42 	tsthi	r8, #1056	; 0x420
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     918:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     91c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		ser_inf(get_index_for_delete, "%d", &user_provided_index);
     920:	00018e02 	andeq	r8, r1, r2, lsl #28
     924:	0000000c 	andeq	r0, r0, ip
     928:	0000080c 	andeq	r0, r0, ip, lsl #16
		if (user_provided_index < 0 || user_provided_index > 40){
     92c:	00001ff0 	strdeq	r1, [r0], -r0
     930:	00000024 	andeq	r0, r0, r4, lsr #32
			strncpy(reason, "Error: invalid index", 50);
     934:	00000018 	andeq	r0, r0, r8, lsl r0
     938:	0000080c 	andeq	r0, r0, ip, lsl #16
			proceed error;
     93c:	00002014 	andeq	r2, r0, r4, lsl r0
     940:	00000080 	andeq	r0, r0, r0, lsl #1
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     944:	83100e42 	tsthi	r0, #1056	; 0x420
		delete_record->tpe = DELETE_RECORD;
     948:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
		delete_record->gid = node_db->gid;
     950:	00000014 	andeq	r0, r0, r4, lsl r0
		delete_record->tpe = DELETE_RECORD;
     954:	0000080c 	andeq	r0, r0, ip, lsl #16
		delete_record->request_number = generate_request_num();
     958:	00000000 	andeq	r0, r0, r0
     95c:	00000070 	andeq	r0, r0, r0, ror r0
		delete_record->sender_id = node_db->id;
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
     968:	00000018 	andeq	r0, r0, r8, lsl r0
		call sender(&delete_record, wait);
     96c:	0000080c 	andeq	r0, r0, ip, lsl #16
		delete_record->receiver_id = user_provided_receiver_id;
     970:	00000000 	andeq	r0, r0, r0
		delete_record->record_index = user_provided_index;
     974:	00000078 	andeq	r0, r0, r8, ror r0
		response_checker[0] = delete_record->request_number;
     978:	83100e42 	tsthi	r0, #1056	; 0x420
		response_checker[1] = delete_record->tpe;
     97c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     980:	00018e02 	andeq	r8, r1, r2, lsl #28
		call sender(&delete_record, wait);
     984:	00000020 	andeq	r0, r0, r0, lsr #32
     988:	0000080c 	andeq	r0, r0, ip, lsl #16
     98c:	00002094 	muleq	r0, r4, r0
     990:	000000bc 	strheq	r0, [r0], -ip
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     994:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     998:	86048505 	strhi	r8, [r4], -r5, lsl #10
		ser_inf(get_id_for_retrieve, "%d", &user_provided_receiver_id);
     99c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     9a0:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     9a4:	000b4114 	andeq	r4, fp, r4, lsl r1
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     9a8:	00000018 	andeq	r0, r0, r8, lsl r0
     9ac:	0000080c 	andeq	r0, r0, ip, lsl #16
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	00002150 	andeq	r2, r0, r0, asr r1
     9b4:	0000003a 	andeq	r0, r0, sl, lsr r0
			proceed error;
     9b8:	83100e41 	tsthi	r0, #1040	; 0x410
     9bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     9c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9c4:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(get_index_for_retrieve, "%d", &user_provided_index);
     9c8:	0000080c 	andeq	r0, r0, ip, lsl #16
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	00000038 	andeq	r0, r0, r8, lsr r0
		if (user_provided_index < 0 || user_provided_index > 40){
     9d4:	83100e41 	tsthi	r0, #1040	; 0x410
			strncpy(reason, "Error: invalid index", 50);
     9d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     9dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9e0:	0000000c 	andeq	r0, r0, ip
			proceed error;
     9e4:	0000080c 	andeq	r0, r0, ip, lsl #16
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	00000000 	andeq	r0, r0, r0
     9ec:	0000000a 	andeq	r0, r0, sl
		retrieve_record->gid = node_db->gid;
     9f0:	00000018 	andeq	r0, r0, r8, lsl r0
     9f4:	0000080c 	andeq	r0, r0, ip, lsl #16
     9f8:	0000218c 	andeq	r2, r0, ip, lsl #3
		retrieve_record->tpe = RETRIEVE_RECORD;
     9fc:	0000002c 	andeq	r0, r0, ip, lsr #32
		retrieve_record->request_number = generate_request_num();
     a00:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     a04:	4c018e02 	stcmi	14, cr8, [r1], {2}
		retrieve_record->sender_id = node_db->id;
     a08:	000ec4ce 	andeq	ip, lr, lr, asr #9
		response_checker[0] = retrieve_record->request_number;
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
		retrieve_record->receiver_id = user_provided_receiver_id;
     a10:	0000080c 	andeq	r0, r0, ip, lsl #16
     a14:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
		retrieve_record->record_index = user_provided_index;
     a18:	00000060 	andeq	r0, r0, r0, rrx
     a1c:	83080e41 	movwhi	r0, #36417	; 0x8e41
		response_checker[0] = retrieve_record->request_number;
     a20:	61018e02 	tstvs	r1, r2, lsl #28
		call sender(&retrieve_record, wait);
     a24:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     a28:	000b4300 	andeq	r4, fp, r0, lsl #6
     a2c:	00000014 	andeq	r0, r0, r4, lsl r0
     a30:	0000080c 	andeq	r0, r0, ip, lsl #16
     a34:	00000000 	andeq	r0, r0, r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     a38:	00000040 	andeq	r0, r0, r0, asr #32
     a3c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		if(node_db->data_base.item_count != 0){
     a40:	00018e02 	andeq	r8, r1, r2, lsl #28
     a44:	00000014 	andeq	r0, r0, r4, lsl r0
     a48:	0000080c 	andeq	r0, r0, ip, lsl #16
		ser_out(loop_through_data, "\r\n");
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	0000002c 	andeq	r0, r0, ip, lsr #32
		proceed menu;
     a54:	83080e42 	movwhi	r0, #36418	; 0x8e42
		delete_all(node_db);
     a58:	00018e02 	andeq	r8, r1, r2, lsl #28
     a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
		proceed menu;
     a60:	0000080c 	andeq	r0, r0, ip, lsl #16
     a64:	00000000 	andeq	r0, r0, r0
		delay(3000, timeout);
     a68:	0000003c 	andeq	r0, r0, ip, lsr r0
     a6c:	83180e41 	tsthi	r8, #1040	; 0x410
		when(&response_flag, menu);
     a70:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     a74:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		release;
     a78:	00018e02 	andeq	r8, r1, r2, lsl #28
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     a7c:	0000000c 	andeq	r0, r0, ip
     a80:	0000080c 	andeq	r0, r0, ip, lsl #16
     a84:	00000000 	andeq	r0, r0, r0
     a88:	00000006 	andeq	r0, r0, r6
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	0000080c 	andeq	r0, r0, ip, lsl #16
     a94:	00002218 	andeq	r2, r0, r8, lsl r2
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     a98:	00000068 	andeq	r0, r0, r8, rrx
     a9c:	83180e41 	tsthi	r8, #1040	; 0x410
     aa0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     aa4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     aa8:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_out(timeout, "\r\nFailed to reach the destination");
     aac:	00000014 	andeq	r0, r0, r4, lsl r0
     ab0:	0000080c 	andeq	r0, r0, ip, lsl #16
		proceed menu;
     ab4:	00002280 	andeq	r2, r0, r0, lsl #5
     ab8:	00000050 	andeq	r0, r0, r0, asr r0
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     abc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed menu;
     ac4:	0000002c 	andeq	r0, r0, ip, lsr #32
     ac8:	0000080c 	andeq	r0, r0, ip, lsl #16
}
     acc:	000022d0 	ldrdeq	r2, [r0], -r0
     ad0:	0000009c 	muleq	r0, ip, r0
     ad4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     ad8:	86088509 	strhi	r8, [r8], -r9, lsl #10
     adc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     ae0:	8a048905 	bhi	122efc <__ccfg+0x102f54>
     ae4:	8e028b03 	vmlahi.f64	d8, d2, d3
     ae8:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     aec:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     af0:	00000b42 	andeq	r0, r0, r2, asr #22
     af4:	00000014 	andeq	r0, r0, r4, lsl r0
     af8:	0000080c 	andeq	r0, r0, ip, lsl #16
     afc:	0000236c 	andeq	r2, r0, ip, ror #6
     b00:	00000040 	andeq	r0, r0, r0, asr #32
     b04:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b08:	00018e02 	andeq	r8, r1, r2, lsl #28
     b0c:	00000014 	andeq	r0, r0, r4, lsl r0
     b10:	0000080c 	andeq	r0, r0, ip, lsl #16
     b14:	000023ac 	andeq	r2, r0, ip, lsr #7
     b18:	00000034 	andeq	r0, r0, r4, lsr r0
     b1c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
     b24:	00000018 	andeq	r0, r0, r8, lsl r0
     b28:	0000080c 	andeq	r0, r0, ip, lsl #16
static void devinit_uart (int devnum) {
     b2c:	000023e0 	andeq	r2, r0, r0, ror #7
	adddevfunc (ioreq_uart_a, devnum);
     b30:	0000003c 	andeq	r0, r0, ip, lsr r0
     b34:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
void udelay (volatile word n) {
     b38:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     b3c:	000ec4ce 	andeq	ip, lr, lr, asr #9
	while (n) {
     b40:	00000018 	andeq	r0, r0, r8, lsl r0
     b44:	0000080c 	andeq	r0, r0, ip, lsl #16
}
     b48:	00000000 	andeq	r0, r0, r0
	while (n--);
     b4c:	0000003c 	andeq	r0, r0, ip, lsr r0
     b50:	83100e42 	tsthi	r0, #1056	; 0x420
     b54:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		n--;
     b58:	00018e02 	andeq	r8, r1, r2, lsl #28
     b5c:	0000000c 	andeq	r0, r0, ip
     b60:	0000080c 	andeq	r0, r0, ip, lsl #16
void mdelay (volatile word n) {
     b64:	0000241c 	andeq	r2, r0, ip, lsl r4
     b68:	00000002 	andeq	r0, r0, r2
	while (n) {
     b6c:	0000000c 	andeq	r0, r0, ip
     b70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
     b74:	7c020001 	stcvc	0, cr0, [r2], {1}
		udelay (999);
     b78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b7c:	0000000c 	andeq	r0, r0, ip
		n--;
     b80:	00000b6c 	andeq	r0, r0, ip, ror #22
     b84:	0000241e 	andeq	r2, r0, lr, lsl r4
     b88:	00000002 	andeq	r0, r0, r2
     b8c:	0000000c 	andeq	r0, r0, ip
void __pi_ondomain (lword d) {
     b90:	00000b6c 	andeq	r0, r0, ip, ror #22
     b94:	00002420 	andeq	r2, r0, r0, lsr #8
		if (__pi_systat.effpdm > 1)
     b98:	00000002 	andeq	r0, r0, r2
     b9c:	0000000c 	andeq	r0, r0, ip
			__pi_systat.effpdm = 1;
     ba0:	00000b6c 	andeq	r0, r0, ip, ror #22
	PRCMPowerDomainOn (d);
     ba4:	00002422 	andeq	r2, r0, r2, lsr #8
     ba8:	00000002 	andeq	r0, r0, r2
     bac:	00000014 	andeq	r0, r0, r4, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     bb0:	00000b6c 	andeq	r0, r0, ip, ror #22
     bb4:	00002424 	andeq	r2, r0, r4, lsr #8
     bb8:	00000044 	andeq	r0, r0, r4, asr #32
	__pi_systat.ondmns |= d;
     bbc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bc0:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     bc4:	0000000c 	andeq	r0, r0, ip
     bc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void __pi_offdomain (lword d) {
     bcc:	7c020001 	stcvc	0, cr0, [r2], {1}
     bd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	PRCMPowerDomainOff (d);
     bd4:	0000000c 	andeq	r0, r0, ip
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     bd8:	00000bc4 	andeq	r0, r0, r4, asr #23
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	00000002 	andeq	r0, r0, r2
	if (d & PRCM_DOMAIN_RFCORE) {
     be4:	00000018 	andeq	r0, r0, r8, lsl r0
     be8:	00000bc4 	andeq	r0, r0, r4, asr #23
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	00000058 	andeq	r0, r0, r8, asr r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     bf4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     bf8:	86038504 	strhi	r8, [r3], -r4, lsl #10
	__pi_systat.ondmns &= ~d;
     bfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     c00:	0000000c 	andeq	r0, r0, ip
}
     c04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c08:	7c020001 	stcvc	0, cr0, [r2], {1}
void __pi_syserror (word ec, const char *m) {
     c0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	diag ("SYSERR: %x, %s", ec, m);
     c10:	0000002c 	andeq	r0, r0, ip, lsr #32
     c14:	00000c00 	andeq	r0, r0, r0, lsl #24
  __ASM volatile ("cpsid i" : : : "memory");
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	000000cc 	andeq	r0, r0, ip, asr #1
     c20:	83100e42 	tsthi	r0, #1056	; 0x420
     c24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		all_leds_blink;
     c28:	02018e02 	andeq	r8, r1, #2, 28
     c2c:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
     c30:	000ec3c4 	andeq	ip, lr, r4, asr #7
     c34:	ce420b44 	vmlsgt.f64	d16, d2, d4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c38:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	00000024 	andeq	r0, r0, r4, lsr #32
     c44:	00000c00 	andeq	r0, r0, r0, lsl #24
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	00000038 	andeq	r0, r0, r8, lsr r0
	while (1) {
     c50:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     c54:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     c58:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     c5c:	4a0b4300 	bmi	2d1864 <__ccfg+0x2b18bc>
void tci_run_delay_timer () {
     c60:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	setdel = __pi_mintk - __pi_old;
     c64:	000b4300 	andeq	r4, fp, r0, lsl #6
     c68:	0000000c 	andeq	r0, r0, ip
     c6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c70:	7c020001 	stcvc	0, cr0, [r2], {1}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     c74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c78:	00000018 	andeq	r0, r0, r8, lsl r0
     c7c:	00000c68 	andeq	r0, r0, r8, ror #24
     c80:	00002470 	andeq	r2, r0, r0, ror r4
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     c84:	00000034 	andeq	r0, r0, r4, lsr r0
	sti_tim;
     c88:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
}
     c8c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c90:	00018e02 	andeq	r8, r1, r2, lsl #28
     c94:	00000018 	andeq	r0, r0, r8, lsl r0
     c98:	00000c68 	andeq	r0, r0, r8, ror #24
     c9c:	000024a4 	andeq	r2, r0, r4, lsr #9
	cli_aux;
     ca0:	00000030 	andeq	r0, r0, r0, lsr r0
     ca4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     ca8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     cac:	00000001 	andeq	r0, r0, r1
     cb0:	00000014 	andeq	r0, r0, r4, lsl r0
     cb4:	00000c68 	andeq	r0, r0, r8, ror #24
	sti_aux;
     cb8:	000024d4 	ldrdeq	r2, [r0], -r4
}
     cbc:	00000018 	andeq	r0, r0, r8, lsl r0
     cc0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     cc4:	00018e02 	andeq	r8, r1, r2, lsl #28
void AONRTCIntHandler () {
     cc8:	0000001c 	andeq	r0, r0, ip, lsl r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     ccc:	00000c68 	andeq	r0, r0, r8, ror #24
     cd0:	000024ec 	andeq	r2, r0, ip, ror #9
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     cd4:	00000054 	andeq	r0, r0, r4, asr r0
		if (__pi_utims [0] == 0)
     cd8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     cdc:	86058506 	strhi	r8, [r5], -r6, lsl #10
		if (*(__pi_utims [0])) {
     ce0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ce4:	00018e02 	andeq	r8, r1, r2, lsl #28
			(*(__pi_utims [0]))--;
     ce8:	0000001c 	andeq	r0, r0, ip, lsl r0
		if (__pi_utims [1] == 0)
     cec:	00000c68 	andeq	r0, r0, r8, ror #24
		if (*(__pi_utims [1])) {
     cf0:	00002540 	andeq	r2, r0, r0, asr #10
			aux_timer_inactive = 0;
     cf4:	00000040 	andeq	r0, r0, r0, asr #32
			(*(__pi_utims [1]))--;
     cf8:	83180e41 	tsthi	r8, #1040	; 0x410
		if (__pi_utims [2] == 0)
     cfc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (*(__pi_utims [2])) {
     d00:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			(*(__pi_utims [2]))--;
     d04:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [3] != 0) {
     d08:	00000014 	andeq	r0, r0, r4, lsl r0
			if (*(__pi_utims [3])) {
     d0c:	00000c68 	andeq	r0, r0, r8, ror #24
				aux_timer_inactive = 0;
     d10:	00002580 	andeq	r2, r0, r0, lsl #11
				(*(__pi_utims [3]))--;
     d14:	00000024 	andeq	r0, r0, r4, lsr #32
	if (__pi_systat.ledsts) {
     d18:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d1c:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_systat.ledblc++ == 0) {
     d20:	00000014 	andeq	r0, r0, r4, lsl r0
     d24:	00000c68 	andeq	r0, r0, r8, ror #24
			if (__pi_systat.ledblk) {
     d28:	000025a4 	andeq	r2, r0, r4, lsr #11
     d2c:	00000014 	andeq	r0, r0, r4, lsl r0
     d30:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	0000000c 	andeq	r0, r0, ip
				if (__pi_systat.ledsts & 0x2)
     d3c:	00000c68 	andeq	r0, r0, r8, ror #24
     d40:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
     d44:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x4)
     d48:	0000001c 	andeq	r0, r0, ip, lsl r0
				__pi_systat.ledblk = 0;
     d4c:	00000c68 	andeq	r0, r0, r8, ror #24
     d50:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.fstblk)
     d54:	00000064 	andeq	r0, r0, r4, rrx
     d58:	83180e41 	tsthi	r8, #1040	; 0x410
				__pi_systat.ledblc = 200;
     d5c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	if (events & AON_RTC_EVFLAGS_CH0) {
     d60:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		cli_tim;
     d64:	00018e02 	andeq	r8, r1, r2, lsl #28
		__pi_new += setdel;
     d68:	0000001c 	andeq	r0, r0, ip, lsl r0
     d6c:	00000c68 	andeq	r0, r0, r8, ror #24
		setdel = 0;
     d70:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     d74:	00000128 	andeq	r0, r0, r8, lsr #2
		__pi_new += setdel;
     d78:	83180e41 	tsthi	r8, #1040	; 0x410
		RISE_N_SHINE;
     d7c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d80:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		aux_timer_inactive = 1;
     d84:	00018e02 	andeq	r8, r1, r2, lsl #28
     d88:	00000024 	andeq	r0, r0, r4, lsr #32
				if (__pi_systat.ledsts & 0x1)
     d8c:	00000c68 	andeq	r0, r0, r8, ror #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d90:	00000000 	andeq	r0, r0, r0
     d94:	000000ec 	andeq	r0, r0, ip, ror #1
				if (__pi_systat.ledsts & 0x2)
     d98:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     d9c:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     da0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
				if (__pi_systat.ledsts & 0x8)
     da4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
				__pi_systat.ledblk = 1;
     da8:	8b038a04 	blhi	e35c0 <__ccfg+0xc3618>
     dac:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (aux_timer_inactive) {
     db0:	0000000c 	andeq	r0, r0, ip
			cli_aux;
     db4:	00000c68 	andeq	r0, r0, r8, ror #24
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	00000002 	andeq	r0, r0, r2
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	00000c68 	andeq	r0, r0, r8, ror #24
     dc8:	00000000 	andeq	r0, r0, r0
     dcc:	00000004 	andeq	r0, r0, r4
     dd0:	0000000c 	andeq	r0, r0, ip
     dd4:	00000c68 	andeq	r0, r0, r8, ror #24
     dd8:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
     ddc:	00000014 	andeq	r0, r0, r4, lsl r0
	cli_tim;
     de0:	00000018 	andeq	r0, r0, r8, lsl r0
     de4:	00000c68 	andeq	r0, r0, r8, ror #24
	if (setdel) {
     de8:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dec:	0000001a 	andeq	r0, r0, sl, lsl r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     df0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     df4:	4a018e02 	bmi	64604 <__ccfg+0x4465c>
     df8:	000ec3ce 	andeq	ip, lr, lr, asr #7
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     dfc:	0000000c 	andeq	r0, r0, ip
				AON_RTC_O_CH0CMP)) - gettav ());
     e00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	return NO;
     e04:	7c020001 	stcvc	0, cr0, [r2], {1}
			setdel = 0;
     e08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e10:	00000dfc 	strdeq	r0, [r0], -ip
}
     e14:	000025cc 	andeq	r2, r0, ip, asr #11
		sti_tim;
     e18:	0000006c 	andeq	r0, r0, ip, rrx
		return YES;
     e1c:	83180e41 	tsthi	r8, #1040	; 0x410
     e20:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e24:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e28:	00018e02 	andeq	r8, r1, r2, lsl #28
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e2c:	0000000c 	andeq	r0, r0, ip
	UARTDisable (UART0_BASE);
     e30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     e34:	7c020001 	stcvc	0, cr0, [r2], {1}
	UARTDisable (UART0_BASE);
     e38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	UARTConfigSetExpClk (UART0_BASE,
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e40:	00000e2c 	andeq	r0, r0, ip, lsr #28
     e44:	00002638 	andeq	r2, r0, r8, lsr r6
     e48:	00000078 	andeq	r0, r0, r8, ror r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e4c:	83180e41 	tsthi	r8, #1040	; 0x410
     e50:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e54:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     e58:	00018e02 	andeq	r8, r1, r2, lsl #28
     e5c:	0000000c 	andeq	r0, r0, ip
     e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	urates [0] = rate;
     e64:	7c020001 	stcvc	0, cr0, [r2], {1}
}
     e68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e6c:	00000030 	andeq	r0, r0, r0, lsr r0
     e70:	00000e5c 	andeq	r0, r0, ip, asr lr
     e74:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
     e78:	00000054 	andeq	r0, r0, r4, asr r0
     e7c:	810c0e41 	tsthi	ip, r1, asr #28
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     e80:	83028203 	movwhi	r8, #8707	; 0x2203
     e84:	280e4101 	stmdacs	lr, {r0, r8, lr}
     e88:	06850784 	streq	r0, [r5], r4, lsl #15
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     e8c:	048e0586 	streq	r0, [lr], #1414	; 0x586
     e90:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     e94:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     e98:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
	__pi_uart_setrate (urates [0], __pi_uart);
     e9c:	000ec1c2 	andeq	ip, lr, r2, asr #3
     ea0:	0000000c 	andeq	r0, r0, ip
     ea4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ea8:	7c020001 	stcvc	0, cr0, [r2], {1}
     eac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     eb0:	00000030 	andeq	r0, r0, r0, lsr r0
     eb4:	00000ea0 	andeq	r0, r0, r0, lsr #29
	switch (operation) {
     eb8:	00002704 	andeq	r2, r0, r4, lsl #14
static int ioreq_uart_a (int operation, char *buf, int len) {
     ebc:	00000060 	andeq	r0, r0, r0, rrx
     ec0:	810c0e41 	tsthi	ip, r1, asr #28
     ec4:	83028203 	movwhi	r8, #8707	; 0x2203
     ec8:	200e4101 	andcs	r4, lr, r1, lsl #2
     ecc:	05850684 	streq	r0, [r5, #1668]	; 0x684
				*buf++ = uart_a_read;
     ed0:	0a64048e 	beq	1902110 <__ccfg+0x18e2168>
     ed4:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
			while (len && uart_a_char_available) {
     ed8:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     edc:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     ee0:	0b41000e 	bleq	1040f20 <__ccfg+0x1020f78>
			if (len != operation) {
     ee4:	0000000c 	andeq	r0, r0, ip
}
     ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eec:	7c020001 	stcvc	0, cr0, [r2], {1}
			uart_a_disable_int;
     ef0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			if (uart_a_char_available) {
     ef4:	0000000c 	andeq	r0, r0, ip
				*buf++ = uart_a_read;
     ef8:	00000ee4 	andeq	r0, r0, r4, ror #29
			uart_a_disable_int;
     efc:	00002764 	andeq	r2, r0, r4, ror #14
     f00:	00000020 	andeq	r0, r0, r0, lsr #32
			if (uart_a_char_available) {
     f04:	00000018 	andeq	r0, r0, r8, lsl r0
     f08:	00000ee4 	andeq	r0, r0, r4, ror #29
				uart_a_enable_int;
     f0c:	00002784 	andeq	r2, r0, r4, lsl #15
     f10:	00000190 	muleq	r0, r0, r1
				goto Redo_rx;
     f14:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     f18:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f1c:	00018e02 	andeq	r8, r1, r2, lsl #28
			return -2;
     f20:	00000018 	andeq	r0, r0, r8, lsl r0
     f24:	00000ee4 	andeq	r0, r0, r4, ror #29
				uart_a_write (*buf);
     f28:	00002914 	andeq	r2, r0, r4, lsl r9
     f2c:	00000048 	andeq	r0, r0, r8, asr #32
			while (len && uart_a_room_in_tx) {
     f30:	83100e41 	tsthi	r0, #1040	; 0x410
     f34:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f38:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (len != operation) {
     f3c:	00000014 	andeq	r0, r0, r4, lsl r0
			uart_a_disable_int;
     f40:	00000ee4 	andeq	r0, r0, r4, ror #29
     f44:	0000295c 	andeq	r2, r0, ip, asr r9
			if (uart_a_room_in_tx) {
     f48:	00000024 	andeq	r0, r0, r4, lsr #32
     f4c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				uart_a_enable_int;
     f50:	00018e02 	andeq	r8, r1, r2, lsl #28
     f54:	00000018 	andeq	r0, r0, r8, lsl r0
				*buf++ = uart_a_read;
     f58:	00000ee4 	andeq	r0, r0, r4, ror #29
			if (uart_a_room_in_tx) {
     f5c:	00002980 	andeq	r2, r0, r0, lsl #19
				uart_a_write (*buf);
     f60:	0000005c 	andeq	r0, r0, ip, asr r0
     f64:	83100e41 	tsthi	r0, #1040	; 0x410
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     f68:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f6c:	00018e02 	andeq	r8, r1, r2, lsl #28
			uart_a_enable_int;
     f70:	00000018 	andeq	r0, r0, r8, lsl r0
     f74:	00000ee4 	andeq	r0, r0, r4, ror #29
     f78:	000029dc 	ldrdeq	r2, [r0], -ip
			return 0;
     f7c:	00000038 	andeq	r0, r0, r8, lsr r0
			if (len == UART_CNTRL_SETRATE) {
     f80:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				if (__pi_uart_setrate (*((word*)buf),
     f84:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f88:	00018e02 	andeq	r8, r1, r2, lsl #28
     f8c:	00000028 	andeq	r0, r0, r8, lsr #32
				syserror (EREQPAR, "uar");
     f90:	00000ee4 	andeq	r0, r0, r4, ror #29
			syserror (ENOOPER, "uai");
     f94:	00002a14 	andeq	r2, r0, r4, lsl sl
			if (len == UART_CNTRL_GETRATE) {
     f98:	00000180 	andeq	r0, r0, r0, lsl #3
				return 1;
     f9c:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     fa0:	86058506 	strhi	r8, [r5], -r6, lsl #10
			syserror (ENOOPER, "uai");
     fa4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     fa8:	02018e02 	andeq	r8, r1, #2, 28
     fac:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     fb0:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	00000030 	andeq	r0, r0, r0, lsr r0
     fbc:	00000ee4 	andeq	r0, r0, r4, ror #29
     fc0:	00002b94 	muleq	r0, r4, fp
     fc4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     fc8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
void UART0IntHandler () {
     fcc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     fd0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     fd4:	89038804 	stmdbhi	r3, {r2, fp, pc}
     fd8:	02018e02 	andeq	r8, r1, #2, 28
     fdc:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
     fe0:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     fe4:	000ec3c4 	andeq	ip, lr, r4, asr #7
     fe8:	00000b46 	andeq	r0, r0, r6, asr #22
		RISE_N_SHINE;
     fec:	00000020 	andeq	r0, r0, r0, lsr #32
     ff0:	00000ee4 	andeq	r0, r0, r4, ror #29
		i_trigger (devevent (UART_A, READ));
     ff4:	00002c64 	andeq	r2, r0, r4, ror #24
     ff8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ffc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1000:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1004:	02018e02 	andeq	r8, r1, #2, 28
    1008:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    100c:	00000ec4 	andeq	r0, r0, r4, asr #29
    1010:	00000018 	andeq	r0, r0, r8, lsl r0
    1014:	00000ee4 	andeq	r0, r0, r4, ror #29
    1018:	00002e54 	andeq	r2, r0, r4, asr lr
    101c:	00000070 	andeq	r0, r0, r0, ror r0
    1020:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    1024:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1028:	00000001 	andeq	r0, r0, r1
    102c:	00000024 	andeq	r0, r0, r4, lsr #32
		i_trigger (devevent (UART_A, WRITE));
    1030:	00000ee4 	andeq	r0, r0, r4, ror #29
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1034:	00002ec4 	andeq	r2, r0, r4, asr #29
    1038:	00000174 	andeq	r0, r0, r4, ror r1
		RISE_N_SHINE;
    103c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    1040:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    1044:	87078608 	strhi	r8, [r7, -r8, lsl #12]
		i_trigger (devevent (UART_A, WRITE));
    1048:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    104c:	8b038a04 	blhi	e3864 <__ccfg+0xc38bc>
    1050:	00018e02 	andeq	r8, r1, r2, lsl #28
    1054:	0000000c 	andeq	r0, r0, ip
    1058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    105c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1060:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1064:	00000014 	andeq	r0, r0, r4, lsl r0
    1068:	00001054 	andeq	r1, r0, r4, asr r0
    106c:	00003038 	andeq	r3, r0, r8, lsr r0
    1070:	00000024 	andeq	r0, r0, r4, lsr #32
}
    1074:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1078:	00018e02 	andeq	r8, r1, r2, lsl #28
    107c:	0000000c 	andeq	r0, r0, ip
    1080:	00001054 	andeq	r1, r0, r4, asr r0
    1084:	0000305c 	andeq	r3, r0, ip, asr r0
void __buttons_setirq (int val) {
    1088:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	00001054 	andeq	r1, r0, r4, asr r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1094:	00003080 	andeq	r3, r0, r0, lsl #1
    1098:	00000008 	andeq	r0, r0, r8
    109c:	0000000c 	andeq	r0, r0, ip
		bn = BUTTON_GPIO (__button_list [i]);
    10a0:	00001054 	andeq	r1, r0, r4, asr r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10a4:	00003088 	andeq	r3, r0, r8, lsl #1
    10a8:	00000004 	andeq	r0, r0, r4
    10ac:	0000000c 	andeq	r0, r0, ip
    10b0:	00001054 	andeq	r1, r0, r4, asr r0
    10b4:	0000308c 	andeq	r3, r0, ip, lsl #1
    10b8:	00000004 	andeq	r0, r0, r4
}
    10bc:	00000018 	andeq	r0, r0, r8, lsl r0
    10c0:	00001054 	andeq	r1, r0, r4, asr r0
    10c4:	00003090 	muleq	r0, r0, r0
    10c8:	00000048 	andeq	r0, r0, r8, asr #32
void __pinlist_setirq (int val) {
    10cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	for (i = 0; i < N_PINLIST; i++) {
    10d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10d4:	00018e02 	andeq	r8, r1, r2, lsl #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10d8:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < N_PINLIST; i++) {
    10dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    10e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    10e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    10e8:	00000028 	andeq	r0, r0, r8, lsr #32
    10ec:	000010d8 	ldrdeq	r1, [r0], -r8
    10f0:	000030d8 	ldrdeq	r3, [r0], -r8
	for (i = 0; i < N_PINLIST; i++) {
    10f4:	00000070 	andeq	r0, r0, r0, ror r0
}
    10f8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    10fc:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1104:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
void GPIOIntHandler () {
    1108:	c7ce4214 	bfigt	r4, r4, #4, #11
if (buttons_int) {
    110c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1110:	000b4200 	andeq	r4, fp, r0, lsl #4
	buttons_disable ();
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	i_trigger ((aword)&__button_list);
    111c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1120:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1124:	00000028 	andeq	r0, r0, r8, lsr #32
    1128:	00001114 	andeq	r1, r0, r4, lsl r1
    112c:	00003148 	andeq	r3, r0, r8, asr #2
    1130:	0000011c 	andeq	r0, r0, ip, lsl r1
    1134:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1138:	86048505 	strhi	r8, [r4], -r5, lsl #10
    113c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1140:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    1144:	c7ce4214 	bfigt	r4, r4, #4, #11
	RISE_N_SHINE;
    1148:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    114c:	00000000 	andeq	r0, r0, r0
    1150:	0000000c 	andeq	r0, r0, ip
if (pin_sensor_int) {
    1154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1158:	7c020001 	stcvc	0, cr0, [r2], {1}
	i_trigger ((aword)(&__input_pins));
    115c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	00001150 	andeq	r1, r0, r0, asr r1
    1168:	00003264 	andeq	r3, r0, r4, ror #4
    116c:	00000020 	andeq	r0, r0, r0, lsr #32
    1170:	00000028 	andeq	r0, r0, r8, lsr #32
    1174:	00001150 	andeq	r1, r0, r0, asr r1
    1178:	00003284 	andeq	r3, r0, r4, lsl #5
    117c:	00000230 	andeq	r0, r0, r0, lsr r2
    1180:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    1184:	86078508 	strhi	r8, [r7], -r8, lsl #10
	__pinsen_disable_and_clear;
    1188:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
	RISE_N_SHINE;
    118c:	8a038904 	bhi	e35a4 <__ccfg+0xc35fc>
    1190:	02018e02 	andeq	r8, r1, #2, 28
    1194:	200e0a4f 	andcs	r0, lr, pc, asr #20
}
    1198:	00000b42 	andeq	r0, r0, r2, asr #22
    119c:	0000001c 	andeq	r0, r0, ip, lsl r0
    11a0:	00001150 	andeq	r1, r0, r0, asr r1
    11a4:	000034b4 			; <UNDEFINED> instruction: 0x000034b4
    11a8:	00000050 	andeq	r0, r0, r0, asr r0
void system_init () {
    11ac:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b0:	86058506 	strhi	r8, [r5], -r6, lsl #10
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    11b4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    11b8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11bc:	0000000c 	andeq	r0, r0, ip
    11c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    11c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    11cc:	00000020 	andeq	r0, r0, r0, lsr #32
    11d0:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    11d4:	00003504 	andeq	r3, r0, r4, lsl #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11d8:	00000390 	muleq	r0, r0, r3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    11dc:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11e0:	86068507 	strhi	r8, [r6], -r7, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    11e4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    11e8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    11ec:	00000001 	andeq	r0, r0, r1
		pin = (port_confs [i] >> 19) & 0x1f;
    11f0:	0000000c 	andeq	r0, r0, ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    11f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		pin = (port_confs [i] >> 19) & 0x1f;
    11f8:	7c020001 	stcvc	0, cr0, [r2], {1}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    11fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1200:	00000024 	andeq	r0, r0, r4, lsr #32
    1204:	000011f0 	strdeq	r1, [r0], -r0
    1208:	00003894 	muleq	r0, r4, r8
		if (port_confs [i] & 0x80)
    120c:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1210:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1214:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (port_confs [i] & 0x40)
    1218:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    121c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1220:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1224:	0000000b 	andeq	r0, r0, fp
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1228:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    122c:	000011f0 	strdeq	r1, [r0], -r0
	all_leds_blink;
    1230:	00000000 	andeq	r0, r0, r0
    1234:	0000002c 	andeq	r0, r0, ip, lsr #32
    1238:	83180e41 	tsthi	r8, #1040	; 0x410
    123c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1240:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1244:	50018e02 	andpl	r8, r1, r2, lsl #28
    1248:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    124c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1250:	000b4200 	andeq	r4, fp, r0, lsl #4
    1254:	0000000c 	andeq	r0, r0, ip
    1258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    125c:	7c020001 	stcvc	0, cr0, [r2], {1}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1260:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1264:	0000000c 	andeq	r0, r0, ip
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1268:	00001254 	andeq	r1, r0, r4, asr r2
	IntEnable (INT_AON_RTC_COMB);
    126c:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    1270:	00000030 	andeq	r0, r0, r0, lsr r0
    1274:	0000000c 	andeq	r0, r0, ip
	__pi_malloc_init ();
    1278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	IntEnable (INT_AON_GPIO_EDGE);
    127c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1284:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1288:	00001274 	andeq	r1, r0, r4, ror r2
    128c:	000038ec 	andeq	r3, r0, ip, ror #17
    1290:	00000020 	andeq	r0, r0, r0, lsr #32
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1294:	0000000c 	andeq	r0, r0, ip
    1298:	00001274 	andeq	r1, r0, r4, ror r2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    129c:	0000390c 	andeq	r3, r0, ip, lsl #18
    12a0:	00000018 	andeq	r0, r0, r8, lsl r0
    12a4:	0000000c 	andeq	r0, r0, ip
	urates [0] = UART_RATE / 100;
    12a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12ac:	7c020001 	stcvc	0, cr0, [r2], {1}
	reinit_uart ();
    12b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b4:	0000000c 	andeq	r0, r0, ip
	EXTRA_INITIALIZERS;
    12b8:	000012a4 	andeq	r1, r0, r4, lsr #5
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    12bc:	00003924 	andeq	r3, r0, r4, lsr #18
    12c0:	00000008 	andeq	r0, r0, r8
    12c4:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    12c8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12cc:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12d0:	00000006 	andeq	r0, r0, r6
    12d4:	0000000c 	andeq	r0, r0, ip
			devinit [i] . init (devinit [i] . param);
    12d8:	000012a4 	andeq	r1, r0, r4, lsr #5
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    12dc:	0000392c 	andeq	r3, r0, ip, lsr #18
    12e0:	00000008 	andeq	r0, r0, r8
    12e4:	0000000c 	andeq	r0, r0, ip
	IntEnable (INT_UART0_COMB);
    12e8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12ec:	00000000 	andeq	r0, r0, r0
}
    12f0:	00000006 	andeq	r0, r0, r6
	tci_run_auxiliary_timer ();
    12f4:	0000000c 	andeq	r0, r0, ip
		diag ("");
    12f8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12fc:	00000000 	andeq	r0, r0, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1300:	00000008 	andeq	r0, r0, r8
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1304:	0000000c 	andeq	r0, r0, ip
		diag ("Leftover RAM: %d bytes",
    1308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    130c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1314:	0000001c 	andeq	r0, r0, ip, lsl r0
    1318:	00001304 	andeq	r1, r0, r4, lsl #6
    131c:	00003934 	andeq	r3, r0, r4, lsr r9
    1320:	0000005c 	andeq	r0, r0, ip, asr r0
    1324:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1328:	86038504 	strhi	r8, [r3], -r4, lsl #10
    132c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1330:	0000100e 	andeq	r1, r0, lr
    1334:	00000014 	andeq	r0, r0, r4, lsl r0
    1338:	00001304 	andeq	r1, r0, r4, lsl #6
    133c:	00003990 	muleq	r0, r0, r9
    1340:	0000002c 	andeq	r0, r0, ip, lsr #32
    1344:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1348:	00018e02 	andeq	r8, r1, r2, lsl #28
    134c:	00000018 	andeq	r0, r0, r8, lsl r0
    1350:	00001304 	andeq	r1, r0, r4, lsl #6
    1354:	00000000 	andeq	r0, r0, r0
    1358:	00000090 	muleq	r0, r0, r0
    135c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1360:	86038504 	strhi	r8, [r3], -r4, lsl #10
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1364:	00018e02 	andeq	r8, r1, r2, lsl #28
    1368:	00000014 	andeq	r0, r0, r4, lsl r0
    136c:	00001304 	andeq	r1, r0, r4, lsl #6
    1370:	000039bc 			; <UNDEFINED> instruction: 0x000039bc
    1374:	00000018 	andeq	r0, r0, r8, lsl r0
    1378:	83080e41 	movwhi	r0, #36417	; 0x8e41
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
}
    1384:	00001304 	andeq	r1, r0, r4, lsl #6
__attribute__ ((noreturn)) void __pi_release () {
    1388:	000039d4 	ldrdeq	r3, [r0], -r4
    138c:	00000060 	andeq	r0, r0, r0, rrx
    1390:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
	check_stack_overflow;
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
    139c:	00001304 	andeq	r1, r0, r4, lsl #6
    13a0:	00003a34 	andeq	r3, r0, r4, lsr sl
	update_n_wake (MAX_WORD, NO);
    13a4:	00000034 	andeq	r0, r0, r4, lsr r0
    13a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (__pi_curr) {
    13b0:	00000018 	andeq	r0, r0, r8, lsl r0
    13b4:	00001304 	andeq	r1, r0, r4, lsl #6
    13b8:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
    13bc:	00000038 	andeq	r0, r0, r8, lsr r0
	__SLEEP;
    13c0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13c4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13c8:	00000001 	andeq	r0, r0, r1
    13cc:	0000000c 	andeq	r0, r0, ip
	system_event_count ++;
    13d0:	00001304 	andeq	r1, r0, r4, lsl #6
    13d4:	00000000 	andeq	r0, r0, r0
	switch (__pi_systat.effpdm) {
    13d8:	0000000c 	andeq	r0, r0, ip
    13dc:	00000018 	andeq	r0, r0, r8, lsl r0
    13e0:	00001304 	andeq	r1, r0, r4, lsl #6
    13e4:	00000000 	andeq	r0, r0, r0
			__WFI ();
    13e8:	00000034 	andeq	r0, r0, r4, lsr r0
    13ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    13f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
	check_stack_overflow;
    13f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13f8:	0000000c 	andeq	r0, r0, ip
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    13fc:	00001304 	andeq	r1, r0, r4, lsl #6
    1400:	00000000 	andeq	r0, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
    1404:	0000001c 	andeq	r0, r0, ip, lsl r0
			goto Redo;
    1408:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (__pi_curr) {
    140c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1410:	7c020001 	stcvc	0, cr0, [r2], {1}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1414:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1418:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    141c:	00001408 	andeq	r1, r0, r8, lsl #8
    1420:	00000000 	andeq	r0, r0, r0
    1424:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1428:	0000000c 	andeq	r0, r0, ip
    142c:	00001408 	andeq	r1, r0, r8, lsl #8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1430:	00003a68 	andeq	r3, r0, r8, ror #20
    1434:	00000028 	andeq	r0, r0, r8, lsr #32
			__WFI ();
    1438:	0000000c 	andeq	r0, r0, ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    143c:	00001408 	andeq	r1, r0, r8, lsl #8
    1440:	00003a90 	muleq	r0, r0, sl
}
    1444:	0000004c 	andeq	r0, r0, ip, asr #32
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1448:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    144c:	00001408 	andeq	r1, r0, r8, lsl #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1450:	00003adc 	ldrdeq	r3, [r0], -ip
    1454:	00000150 	andeq	r0, r0, r0, asr r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1458:	00000018 	andeq	r0, r0, r8, lsl r0
    145c:	00001408 	andeq	r1, r0, r8, lsl #8
    1460:	00003c2c 	andeq	r3, r0, ip, lsr #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1464:	00000118 	andeq	r0, r0, r8, lsl r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1468:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    146c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1470:	00018e02 	andeq	r8, r1, r2, lsl #28
    1474:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1478:	00001408 	andeq	r1, r0, r8, lsl #8
    147c:	00003d44 	andeq	r3, r0, r4, asr #26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1480:	00000020 	andeq	r0, r0, r0, lsr #32
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1484:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1488:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    148c:	00000001 	andeq	r0, r0, r1
    1490:	00000014 	andeq	r0, r0, r4, lsl r0
    1494:	00001408 	andeq	r1, r0, r8, lsl #8
			SysCtrlSetRechargeBeforePowerDown
    1498:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    149c:	00000060 	andeq	r0, r0, r0, rrx
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14a4:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14a8:	0000000c 	andeq	r0, r0, ip
    14ac:	00001408 	andeq	r1, r0, r8, lsl #8
    14b0:	00003d64 	andeq	r3, r0, r4, ror #26
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    14b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14b8:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    14c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    14c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14c8:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14cc:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
			while (!(AONWUCPowerStatusGet () &
    14d0:	00003d80 	andeq	r3, r0, r0, lsl #27
			PRCMPowerDomainOn (__pi_systat.ondmns);
    14d4:	000000d4 	ldrdeq	r0, [r0], -r4
    14d8:	83100e41 	tsthi	r0, #1040	; 0x410
    14dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    14e0:	00018e02 	andeq	r8, r1, r2, lsl #28
    14e4:	00000014 	andeq	r0, r0, r4, lsl r0
    14e8:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
    14ec:	00003e54 	andeq	r3, r0, r4, asr lr
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    14f0:	000000a4 	andeq	r0, r0, r4, lsr #1
    14f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    14f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    14fc:	0000000c 	andeq	r0, r0, ip
			SysCtrlAdjustRechargeAfterPowerDown ();
    1500:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			reinit_uart ();
    1504:	7c020001 	stcvc	0, cr0, [r2], {1}
    1508:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    150c:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1510:	000014fc 	strdeq	r1, [r0], -ip
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1514:	00003ef8 	strdeq	r3, [r0], -r8
    1518:	0000007c 	andeq	r0, r0, ip, ror r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    151c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1520:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1524:	00000001 	andeq	r0, r0, r1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1528:	00000014 	andeq	r0, r0, r4, lsl r0
    152c:	000014fc 	strdeq	r1, [r0], -ip
    1530:	00003f74 	andeq	r3, r0, r4, ror pc
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1534:	000000ac 	andeq	r0, r0, ip, lsr #1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1538:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    153c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1540:	0000000c 	andeq	r0, r0, ip
    1544:	000014fc 	strdeq	r1, [r0], -ip
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1548:	00004020 	andeq	r4, r0, r0, lsr #32
    154c:	0000005c 	andeq	r0, r0, ip, asr r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1550:	0000000c 	andeq	r0, r0, ip
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1554:	000014fc 	strdeq	r1, [r0], -ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1558:	0000407c 	andeq	r4, r0, ip, ror r0
    155c:	00000018 	andeq	r0, r0, r8, lsl r0
			PRCMPowerDomainOff (
    1560:	0000000c 	andeq	r0, r0, ip
    1564:	000014fc 	strdeq	r1, [r0], -ip
	__SLEEP;
    1568:	00000000 	andeq	r0, r0, r0
    156c:	00000010 	andeq	r0, r0, r0, lsl r0
  __ASM volatile ("cpsie i" : : : "memory");
    1570:	0000000c 	andeq	r0, r0, ip
	goto Redo;
    1574:	000014fc 	strdeq	r1, [r0], -ip
    1578:	00004094 	muleq	r0, r4, r0
    157c:	00000010 	andeq	r0, r0, r0, lsl r0
    1580:	0000000c 	andeq	r0, r0, ip
    1584:	000014fc 	strdeq	r1, [r0], -ip
    1588:	000040a4 	andeq	r4, r0, r4, lsr #1
    158c:	00000014 	andeq	r0, r0, r4, lsl r0
    1590:	00000018 	andeq	r0, r0, r8, lsl r0
    1594:	000014fc 	strdeq	r1, [r0], -ip
    1598:	000040b8 	strheq	r4, [r0], -r8
    159c:	00000064 	andeq	r0, r0, r4, rrx
    15a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    15a4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15a8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15ac:	0000000c 	andeq	r0, r0, ip
    15b0:	000014fc 	strdeq	r1, [r0], -ip
    15b4:	0000411c 	andeq	r4, r0, ip, lsl r1
    15b8:	00000014 	andeq	r0, r0, r4, lsl r0
    15bc:	0000000c 	andeq	r0, r0, ip
    15c0:	000014fc 	strdeq	r1, [r0], -ip
    15c4:	00004130 	andeq	r4, r0, r0, lsr r1
    15c8:	00000014 	andeq	r0, r0, r4, lsl r0
    15cc:	0000000c 	andeq	r0, r0, ip
    15d0:	000014fc 	strdeq	r1, [r0], -ip
    15d4:	00004144 	andeq	r4, r0, r4, asr #2
    15d8:	00000014 	andeq	r0, r0, r4, lsl r0
    15dc:	0000000c 	andeq	r0, r0, ip
	cli_tim;
    15e0:	000014fc 	strdeq	r1, [r0], -ip
    15e4:	00004158 	andeq	r4, r0, r8, asr r1
    15e8:	00000028 	andeq	r0, r0, r8, lsr #32
	diag ("PicOS halted");
    15ec:	0000000c 	andeq	r0, r0, ip
	mdelay (500);
    15f0:	000014fc 	strdeq	r1, [r0], -ip
    15f4:	00004180 	andeq	r4, r0, r0, lsl #3
	setpowermode (2);
    15f8:	00000010 	andeq	r0, r0, r0, lsl r0
	__PCB = NULL;
    15fc:	0000000c 	andeq	r0, r0, ip
	release;
    1600:	000014fc 	strdeq	r1, [r0], -ip
    1604:	00004190 	muleq	r0, r0, r1
    1608:	0000002c 	andeq	r0, r0, ip, lsr #32
    160c:	0000000c 	andeq	r0, r0, ip
int main (void) {
    1610:	000014fc 	strdeq	r1, [r0], -ip
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1614:	000041bc 			; <UNDEFINED> instruction: 0x000041bc
    1618:	00000014 	andeq	r0, r0, r4, lsl r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    161c:	0000000c 	andeq	r0, r0, ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1620:	000014fc 	strdeq	r1, [r0], -ip
	system_init ();
    1624:	000041d0 	ldrdeq	r4, [r0], -r0
	tcv_init ();
    1628:	00000014 	andeq	r0, r0, r4, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    162c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1630:	000014fc 	strdeq	r1, [r0], -ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1634:	000041e4 	andeq	r4, r0, r4, ror #3
    1638:	00000110 	andeq	r0, r0, r0, lsl r1
    163c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1640:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1644:	02018e02 	andeq	r8, r1, #2, 28
	delay (16, 0);
    1648:	00100e76 	andseq	r0, r0, r6, ror lr
    164c:	00000018 	andeq	r0, r0, r8, lsl r0
    1650:	000014fc 	strdeq	r1, [r0], -ip
	__pi_release ();
    1654:	000042f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1658:	00000064 	andeq	r0, r0, r4, rrx
    165c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1660:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1664:	00000001 	andeq	r0, r0, r1
    1668:	0000000c 	andeq	r0, r0, ip
    166c:	000014fc 	strdeq	r1, [r0], -ip
static void killev (__pi_pcb_t *pid) {
    1670:	00004358 	andeq	r4, r0, r8, asr r3
	wfun = (aword)(pid->code);
    1674:	00000028 	andeq	r0, r0, r8, lsr #32
	for_all_tasks (i) {
    1678:	00000014 	andeq	r0, r0, r4, lsl r0
		for (j = 0; j < nevents (i); j++) {
    167c:	000014fc 	strdeq	r1, [r0], -ip
    1680:	00004380 	andeq	r4, r0, r0, lsl #7
    1684:	00000150 	andeq	r0, r0, r0, asr r1
			    || i->Events [j] . Event == wfun
    1688:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		for (j = 0; j < nevents (i); j++) {
    168c:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (i->Events [j] . Event == (aword)pid
    1690:	0000000c 	andeq	r0, r0, ip
    1694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1698:	7c020001 	stcvc	0, cr0, [r2], {1}
				wakeupev (i, j);
    169c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a0:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i) {
    16a4:	00001690 	muleq	r0, r0, r6
}
    16a8:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16ac:	000000f4 	strdeq	r0, [r0], -r4
static void qfree (aword *ch) {
    16b0:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16b4:	86058506 	strhi	r8, [r5], -r6, lsl #10
	cc = (aword*)(mpools + MA_NP);
    16b8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	m_setnextp (ch, chunk);
    16bc:	00018e02 	andeq	r8, r1, r2, lsl #28
	m_setnextp (cc, ch);
    16c0:	00000028 	andeq	r0, r0, r8, lsr #32
}
    16c4:	00001690 	muleq	r0, r0, r6
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    16c8:	000044d0 	ldrdeq	r4, [r0], -r0
    16cc:	00000220 	andeq	r0, r0, r0, lsr #4
    16d0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
			m_setnextp (cc, m_nextp (chunk));
    16d4:	86088509 	strhi	r8, [r8], -r9, lsl #10
			m_size (chunk) += m_hdrlen + m_size (ch);
    16d8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    16dc:	8a048905 	bhi	123af8 <__ccfg+0x103b50>
    16e0:	8e028b03 	vmlahi.f64	d8, d2, d3
    16e4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    16e8:	00000024 	andeq	r0, r0, r4, lsr #32
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    16ec:	00000014 	andeq	r0, r0, r4, lsl r0
    16f0:	00001690 	muleq	r0, r0, r6
    16f4:	000046f0 	strdeq	r4, [r0], -r0
			m_setnextp (cc, m_nextp (chunk));
    16f8:	00000060 	andeq	r0, r0, r0, rrx
			m_size (ch) += m_hdrlen + m_size (chunk);
    16fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1700:	00018e02 	andeq	r8, r1, r2, lsl #28
    1704:	00000014 	andeq	r0, r0, r4, lsl r0
    1708:	00001690 	muleq	r0, r0, r6
    170c:	00000000 	andeq	r0, r0, r0
    1710:	00000078 	andeq	r0, r0, r8, ror r0
			if (m_size (chunk) >= m_size (ch))
    1714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1718:	00018e02 	andeq	r8, r1, r2, lsl #28
    171c:	0000000c 	andeq	r0, r0, ip
		chunk = m_nextp (chunk))
    1720:	00001690 	muleq	r0, r0, r6
    1724:	00004750 	andeq	r4, r0, r0, asr r7
    1728:	00000018 	andeq	r0, r0, r8, lsl r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    172c:	0000000c 	andeq	r0, r0, ip
	diag_wait (a);
    1730:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	diag_wchar (c, a);
    1734:	7c020001 	stcvc	0, cr0, [r2], {1}
    1738:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    173c:	0000000c 	andeq	r0, r0, ip
}
    1740:	0000172c 	andeq	r1, r0, ip, lsr #14
	syserror (ESTATE, "state");
    1744:	00000000 	andeq	r0, r0, r0
    1748:	00000010 	andeq	r0, r0, r0, lsl r0
    174c:	0000000c 	andeq	r0, r0, ip
    1750:	0000172c 	andeq	r1, r0, ip, lsr #14
	for (i = 0; i < MAX_UTIMERS; i++)
    1754:	00000000 	andeq	r0, r0, r0
void utimer_add (address ut) {
    1758:	00000018 	andeq	r0, r0, r8, lsl r0
    175c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [i] == NULL)
    1760:	0000172c 	andeq	r1, r0, ip, lsr #14
	for (i = 0; i < MAX_UTIMERS; i++)
    1764:	00004768 	andeq	r4, r0, r8, ror #14
    1768:	0000004c 	andeq	r0, r0, ip, asr #32
		syserror (ERESOURCE, "ut a");
    176c:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_utims [i] = ut;
    1770:	0000172c 	andeq	r1, r0, ip, lsr #14
}
    1774:	00000000 	andeq	r0, r0, r0
    1778:	00000030 	andeq	r0, r0, r0, lsr r0
    177c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	*t = v;
    1780:	00018e02 	andeq	r8, r1, r2, lsl #28
	TCI_RUN_AUXILIARY_TIMER;
    1784:	00000018 	andeq	r0, r0, r8, lsl r0
void update_n_wake (word min, Boolean force) {
    1788:	0000172c 	andeq	r1, r0, ip, lsr #14
	if (TCI_UPDATE_DELAY_TICKS (force))
    178c:	000047b4 			; <UNDEFINED> instruction: 0x000047b4
    1790:	0000006c 	andeq	r0, r0, ip, rrx
    1794:	83100e41 	tsthi	r0, #1040	; 0x410
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1798:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    179c:	00018e02 	andeq	r8, r1, r2, lsl #28
    17a0:	00000014 	andeq	r0, r0, r4, lsl r0
    17a4:	0000172c 	andeq	r1, r0, ip, lsr #14
    17a8:	00004820 	andeq	r4, r0, r0, lsr #16
    17ac:	00000016 	andeq	r0, r0, r6, lsl r0
    17b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    17b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b8:	0000000c 	andeq	r0, r0, ip
    17bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17c8:	00000024 	andeq	r0, r0, r4, lsr #32
		for_all_tasks (i) {
    17cc:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
	__pi_mintk = znew + min;
    17d0:	00004838 	andeq	r4, r0, r8, lsr r8
    17d4:	00000028 	andeq	r0, r0, r8, lsr #32
			if (!twaiting (i))
    17d8:	83100e41 	tsthi	r0, #1040	; 0x410
    17dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (twakecnd (__pi_old, znew, i->Timer)) {
    17e0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    17e4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    17e8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    17ec:	0000000b 	andeq	r0, r0, fp
    17f0:	0000000c 	andeq	r0, r0, ip
    17f4:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    17f8:	00004860 	andeq	r4, r0, r0, ror #16
    17fc:	00000008 	andeq	r0, r0, r8
    1800:	0000000c 	andeq	r0, r0, ip
    1804:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    1808:	00000000 	andeq	r0, r0, r0
    180c:	00000022 	andeq	r0, r0, r2, lsr #32
				wakeuptm (i);
    1810:	00000018 	andeq	r0, r0, r8, lsl r0
    1814:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
		for_all_tasks (i) {
    1818:	00000000 	andeq	r0, r0, r0
				d = i->Timer - znew;
    181c:	0000002e 	andeq	r0, r0, lr, lsr #32
    1820:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1824:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
		if ((word)(__pi_mintk - znew) < min) 
    1828:	000ec4ce 	andeq	ip, lr, lr, asr #9
    182c:	00000018 	andeq	r0, r0, r8, lsl r0
    1830:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
	__pi_old = znew;
    1834:	00000000 	andeq	r0, r0, r0
}
    1838:	00000034 	andeq	r0, r0, r4, lsr r0
	TCI_RUN_DELAY_TIMER;
    183c:	83100e41 	tsthi	r0, #1040	; 0x410
}
    1840:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1844:	00018e02 	andeq	r8, r1, r2, lsl #28
    1848:	00000018 	andeq	r0, r0, r8, lsl r0
    184c:	000017b8 			; <UNDEFINED> instruction: 0x000017b8
    1850:	00000000 	andeq	r0, r0, r0
void proceed (word state) {
    1854:	00000040 	andeq	r0, r0, r0, asr #32
	prcdstate (__pi_curr, state);
    1858:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    185c:	86038504 	strhi	r8, [r3], -r4, lsl #10
	release;
    1860:	00018e02 	andeq	r8, r1, r2, lsl #28
    1864:	0000000c 	andeq	r0, r0, ip
void __pi_wait (aword event, word state) {
    1868:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	sint j = nevents (__pi_curr);
    186c:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (j >= MAX_EVENTS_PER_TASK)
    1870:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1874:	00000020 	andeq	r0, r0, r0, lsr #32
    1878:	00001864 	andeq	r1, r0, r4, ror #16
		syserror (ENEVENTS, "sw");
    187c:	00004868 	andeq	r4, r0, r8, ror #16
    1880:	000000aa 	andeq	r0, r0, sl, lsr #1
	setestate (__pi_curr->Events [j], state, event);
    1884:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	incwait (__pi_curr);
    1888:	86048505 	strhi	r8, [r4], -r5, lsl #10
	setestate (__pi_curr->Events [j], state, event);
    188c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
}
    1890:	180e4201 	stmdane	lr, {r0, r9, lr}
    1894:	00000688 	andeq	r0, r0, r8, lsl #13
    1898:	0000000c 	andeq	r0, r0, ip
void __pi_trigger (aword event) {
    189c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for_all_tasks (i) {
    18a0:	7c020001 	stcvc	0, cr0, [r2], {1}
		for (j = 0; j < nevents (i); j++) {
    18a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18a8:	0000000c 	andeq	r0, r0, ip
    18ac:	00001898 	muleq	r0, r8, r8
    18b0:	00004914 	andeq	r4, r0, r4, lsl r9
			if (i->Events [j] . Event == event) {
    18b4:	00000014 	andeq	r0, r0, r4, lsl r0
    18b8:	00000014 	andeq	r0, r0, r4, lsl r0
    18bc:	00001898 	muleq	r0, r8, r8
				wakeupev (i, j);
    18c0:	00004928 	andeq	r4, r0, r8, lsr #18
    18c4:	00000038 	andeq	r0, r0, r8, lsr r0
	for_all_tasks (i) {
    18c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
}
    18cc:	00018e02 	andeq	r8, r1, r2, lsl #28
aword __pi_join (aword pid, word st) {
    18d0:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    18d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18d8:	7c020001 	stcvc	0, cr0, [r2], {1}
	return 0;
    18dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		if ((aword)i == pid) {
    18e0:	00000020 	andeq	r0, r0, r0, lsr #32
			__pi_wait (pid, st);
    18e4:	000018d0 	ldrdeq	r1, [r0], -r0
}
    18e8:	00004960 	andeq	r4, r0, r0, ror #18
	for_all_tasks (i) {
    18ec:	00000054 	andeq	r0, r0, r4, asr r0
    18f0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
void delay (word d, word state) {
    18f4:	86048505 	strhi	r8, [r4], -r5, lsl #10
	settstate (__pi_curr, state);
    18f8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18fc:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
    1900:	00000688 	andeq	r0, r0, r8, lsl #13
