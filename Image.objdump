
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00002329 	andeq	r2, r0, r9, lsr #6
		// Called to issue a wait request
		if (st == WNONE)
       8:	00002323 	andeq	r2, r0, r3, lsr #6
       c:	00002325 	andeq	r2, r0, r5, lsr #6
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00002327 	andeq	r2, r0, r7, lsr #6
      14:	00002327 	andeq	r2, r0, r7, lsr #6
		when (&__input_pins, st);
      18:	00002327 	andeq	r2, r0, r7, lsr #6
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00002327 	andeq	r2, r0, r7, lsr #6
      30:	00002327 	andeq	r2, r0, r7, lsr #6
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00002327 	andeq	r2, r0, r7, lsr #6
      3c:	00002327 	andeq	r2, r0, r7, lsr #6
      40:	0000100d 	andeq	r1, r0, sp
      44:	00002327 	andeq	r2, r0, r7, lsr #6
      48:	00002327 	andeq	r2, r0, r7, lsr #6
}
      4c:	00002327 	andeq	r2, r0, r7, lsr #6
      50:	00000bcd 	andeq	r0, r0, sp, asr #23
      54:	00000ecd 	andeq	r0, r0, sp, asr #29
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00002327 	andeq	r2, r0, r7, lsr #6
	    pbutton++) {
      5c:	00002327 	andeq	r2, r0, r7, lsr #6
      60:	00002327 	andeq	r2, r0, r7, lsr #6
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002d59 	andeq	r2, r0, r9, asr sp
      68:	00002327 	andeq	r2, r0, r7, lsr #6
      6c:	00002327 	andeq	r2, r0, r7, lsr #6
      70:	00002327 	andeq	r2, r0, r7, lsr #6
      74:	00002327 	andeq	r2, r0, r7, lsr #6
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00002327 	andeq	r2, r0, r7, lsr #6
      7c:	00002327 	andeq	r2, r0, r7, lsr #6
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00002327 	andeq	r2, r0, r7, lsr #6
      84:	00002327 	andeq	r2, r0, r7, lsr #6
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00002327 	andeq	r2, r0, r7, lsr #6
      8c:	00002327 	andeq	r2, r0, r7, lsr #6
      90:	00002327 	andeq	r2, r0, r7, lsr #6
      94:	00002327 	andeq	r2, r0, r7, lsr #6
      98:	00002327 	andeq	r2, r0, r7, lsr #6
		goto Done;

	if (baction == NULL)
      9c:	00002327 	andeq	r2, r0, r7, lsr #6
      a0:	00002327 	andeq	r2, r0, r7, lsr #6
		goto Term;

	(*baction) (pbutton);
      a4:	00002327 	andeq	r2, r0, r7, lsr #6

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00002327 	andeq	r2, r0, r7, lsr #6
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00002327 	andeq	r2, r0, r7, lsr #6
      b0:	00002327 	andeq	r2, r0, r7, lsr #6
endthread
      b4:	00002327 	andeq	r2, r0, r7, lsr #6
      b8:	00002327 	andeq	r2, r0, r7, lsr #6
      bc:	00002327 	andeq	r2, r0, r7, lsr #6
      c0:	00002327 	andeq	r2, r0, r7, lsr #6
      c4:	00002327 	andeq	r2, r0, r7, lsr #6

000000c8 <sender>:
	}
	return packet_size;
}

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b538      	push	{r3, r4, r5, lr}
      ca:	4605      	mov	r5, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d023      	beq.n	11a <_Min_Stack_Size+0x1a>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d6:	f001 bab7 	b.w	1648 <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b20      	ldr	r3, [pc, #128]	; (15c <_Min_Stack_Size+0x5c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4920      	ldr	r1, [pc, #128]	; (160 <_Min_Stack_Size+0x60>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689c      	ldr	r4, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f001 ff56 	bl	1f98 <tcv_wnps>
		packet[0] = NETWORK_ID;
      ec:	8005      	strh	r5, [r0, #0]
		*p = message->gid;p++;
      ee:	8822      	ldrh	r2, [r4, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	4b1c      	ldr	r3, [pc, #112]	; (164 <_Min_Stack_Size+0x64>)
		*p = message->gid;p++;
      f2:	7082      	strb	r2, [r0, #2]
		*p = message->tpe;p++;
      f4:	78a2      	ldrb	r2, [r4, #2]
      f6:	461d      	mov	r5, r3
      f8:	70c2      	strb	r2, [r0, #3]
		*p = message->request_number;p++;
      fa:	78e2      	ldrb	r2, [r4, #3]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	6018      	str	r0, [r3, #0]
		*p = message->request_number;p++;
      fe:	7102      	strb	r2, [r0, #4]
		*p = message->sender_id;p++;
     100:	7922      	ldrb	r2, [r4, #4]
     102:	7142      	strb	r2, [r0, #5]
		*p = message->receiver_id;p++;
     104:	7962      	ldrb	r2, [r4, #5]
     106:	7182      	strb	r2, [r0, #6]
		switch(message->tpe) {
     108:	78a2      	ldrb	r2, [r4, #2]
     10a:	2a04      	cmp	r2, #4
     10c:	d80e      	bhi.n	12c <_Min_Stack_Size+0x2c>
     10e:	2a02      	cmp	r2, #2
     110:	d81e      	bhi.n	150 <_Min_Stack_Size+0x50>
     112:	d016      	beq.n	142 <_Min_Stack_Size+0x42>
		tcv_endp(packet);
     114:	6828      	ldr	r0, [r5, #0]
     116:	f001 fe55 	bl	1dc4 <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     11a:	2001      	movs	r0, #1
     11c:	4912      	ldr	r1, [pc, #72]	; (168 <_Min_Stack_Size+0x68>)
     11e:	f002 f9d7 	bl	24d0 <ser_out>
}
     122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		finish;
     126:	2000      	movs	r0, #0
     128:	f001 bc6e 	b.w	1a08 <kill>
     12c:	2a05      	cmp	r2, #5
     12e:	d1f1      	bne.n	114 <_Min_Stack_Size+0x14>
				*p = message->status;p++;
     130:	79a3      	ldrb	r3, [r4, #6]
				strncpy(p, message->record, sizeof(message->record));
     132:	2214      	movs	r2, #20
				*p = message->status;p++;
     134:	71c3      	strb	r3, [r0, #7]
				*p = message->padding;p++;
     136:	79e3      	ldrb	r3, [r4, #7]
				strncpy(p, message->record, sizeof(message->record));
     138:	f104 0108 	add.w	r1, r4, #8
				*p = message->padding;p++;
     13c:	7203      	strb	r3, [r0, #8]
				strncpy(p, message->record, sizeof(message->record));
     13e:	3009      	adds	r0, #9
     140:	e003      	b.n	14a <_Min_Stack_Size+0x4a>
				strncpy(p, message->record, sizeof(message->record));
     142:	2214      	movs	r2, #20
     144:	f104 0108 	add.w	r1, r4, #8
     148:	3007      	adds	r0, #7
				strncpy(p, message->record, sizeof(message->record));
     14a:	f001 fb92 	bl	1872 <__pi_strncpy>
				break;
     14e:	e7e1      	b.n	114 <_Min_Stack_Size+0x14>
				*p = message->record_index;p++;
     150:	7f23      	ldrb	r3, [r4, #28]
     152:	71c3      	strb	r3, [r0, #7]
				*p = message->padding;
     154:	79e3      	ldrb	r3, [r4, #7]
     156:	7203      	strb	r3, [r0, #8]
				break;
     158:	e7dc      	b.n	114 <_Min_Stack_Size+0x14>
     15a:	bf00      	nop
     15c:	200006cc 	andcs	r0, r0, ip, asr #13
     160:	20000000 	andcs	r0, r0, r0
     164:	2000055c 	andcs	r0, r0, ip, asr r5
     168:	000048b8 			; <UNDEFINED> instruction: 0x000048b8

0000016c <init_node>:
bool init_node(struct Node* node){
     16c:	b510      	push	{r4, lr}
    node->id  = 0;                  // default id value 0
     16e:	2400      	movs	r4, #0
     170:	7004      	strb	r4, [r0, #0]
    node->gid = 0;                  // default gid value 0
     172:	8044      	strh	r4, [r0, #2]
    node->index = 0;                // default entry count 0
     174:	f880 4481 	strb.w	r4, [r0, #1153]	; 0x481
    node->data_base.item_count = 0; // default no items in array
     178:	f880 4464 	strb.w	r4, [r0, #1124]	; 0x464
    DEBUG_PRINT("Error initializing node...\n");
     17c:	4802      	ldr	r0, [pc, #8]	; (188 <init_node+0x1c>)
     17e:	f001 fce5 	bl	1b4c <diag>
};
     182:	4620      	mov	r0, r4
     184:	bd10      	pop	{r4, pc}
     186:	bf00      	nop
     188:	000048c7 	andeq	r4, r0, r7, asr #17

0000018c <generate_request_num>:
uint8_t generate_request_num(void){
     18c:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     18e:	f004 fb4d 	bl	482c <rand>
     192:	23ff      	movs	r3, #255	; 0xff
     194:	fb90 f3f3 	sdiv	r3, r0, r3
     198:	4418      	add	r0, r3
}
     19a:	b2c0      	uxtb	r0, r0
     19c:	bd08      	pop	{r3, pc}

0000019e <clear_node_neighbour_array>:
            node->nnodes[i] = '\0'; // set to null byte
     19e:	2200      	movs	r2, #0
     1a0:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     1a4:	f200 4081 	addw	r0, r0, #1153	; 0x481
     1a8:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	4283      	cmp	r3, r0
     1ae:	d1fb      	bne.n	1a8 <clear_node_neighbour_array+0xa>
};
     1b0:	2001      	movs	r0, #1
     1b2:	4770      	bx	lr

000001b4 <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     1b8:	b143      	cbz	r3, 1cc <delete_record+0x18>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ba:	221c      	movs	r2, #28
     1bc:	fb02 0101 	mla	r1, r2, r1, r0
     1c0:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     1c2:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1c4:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     1c6:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     1c8:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     1cc:	2000      	movs	r0, #0
     1ce:	4770      	bx	lr

000001d0 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     1d0:	b570      	push	{r4, r5, r6, lr}
     1d2:	4ba2      	ldr	r3, [pc, #648]	; (45c <receiver+0x28c>)
     1d4:	b090      	sub	sp, #64	; 0x40
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	689c      	ldr	r4, [r3, #8]
     1da:	2809      	cmp	r0, #9
     1dc:	f200 8186 	bhi.w	4ec <receiver+0x31c>
     1e0:	e8df f000 	tbb	[pc, r0]
     1e4:	7c780c05 	ldclvc	12, cr0, [r8], #-20	; 0xffffffec
     1e8:	a0968a83 	addsge	r8, r6, r3, lsl #21
     1ec:	4b9cb4aa 	blmi	fe72d49c <_estack+0xde72849c>
	address incoming_packet;
	char array[20];

	state receiving:
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	2000      	movs	r0, #0
     1f2:	6819      	ldr	r1, [r3, #0]
     1f4:	f001 fe90 	bl	1f18 <tcv_rnp>
     1f8:	4b9a      	ldr	r3, [pc, #616]	; (464 <receiver+0x294>)
     1fa:	6018      	str	r0, [r3, #0]
	state ok:
		
		uint8_t tpe;
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	4d99      	ldr	r5, [pc, #612]	; (464 <receiver+0x294>)
     1fe:	f10d 0107 	add.w	r1, sp, #7
     202:	6828      	ldr	r0, [r5, #0]
     204:	2201      	movs	r2, #1
     206:	3006      	adds	r0, #6
     208:	f001 ff24 	bl	2054 <tcv_read>

		if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (tpe){
     20c:	f89d 1007 	ldrb.w	r1, [sp, #7]
     210:	2905      	cmp	r1, #5
     212:	f200 8167 	bhi.w	4e4 <receiver+0x314>
     216:	e8df f011 	tbh	[pc, r1, lsl #1]
     21a:	00320006 	eorseq	r0, r2, r6
     21e:	00c900a1 	sbceq	r0, r9, r1, lsr #1
     222:	010100d9 	ldrdeq	r0, [r1, -r9]
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct DiscoveryResponseMessage *response_message_0;
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     226:	682d      	ldr	r5, [r5, #0]

				/*DEBUGGING*/
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	488f      	ldr	r0, [pc, #572]	; (468 <receiver+0x298>)
     22a:	8869      	ldrh	r1, [r5, #2]
     22c:	f001 fc8e 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	7929      	ldrb	r1, [r5, #4]
     232:	488e      	ldr	r0, [pc, #568]	; (46c <receiver+0x29c>)
     234:	f001 fc8a 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	7969      	ldrb	r1, [r5, #5]
     23a:	488d      	ldr	r0, [pc, #564]	; (470 <receiver+0x2a0>)
     23c:	f001 fc86 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	79a9      	ldrb	r1, [r5, #6]
     242:	488c      	ldr	r0, [pc, #560]	; (474 <receiver+0x2a4>)
     244:	f001 fc82 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	79e9      	ldrb	r1, [r5, #7]
     24a:	488b      	ldr	r0, [pc, #556]	; (478 <receiver+0x2a8>)
     24c:	f001 fc7e 	bl	1b4c <diag>

				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     250:	886a      	ldrh	r2, [r5, #2]
     252:	8863      	ldrh	r3, [r4, #2]
     254:	4293      	cmp	r3, r2
     256:	d13d      	bne.n	2d4 <receiver+0x104>
					response_message_0->gid = discovery_request_message->gid;
     258:	2100      	movs	r1, #0
     25a:	800b      	strh	r3, [r1, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	2301      	movs	r3, #1
     25e:	708b      	strb	r3, [r1, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     260:	796b      	ldrb	r3, [r5, #5]
     262:	70cb      	strb	r3, [r1, #3]
					response_message_0->sender_id = node_db->id;
     264:	7823      	ldrb	r3, [r4, #0]
     266:	710b      	strb	r3, [r1, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	79ab      	ldrb	r3, [r5, #6]
     26a:	714b      	strb	r3, [r1, #5]
					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					call sender(response_message_0, done_case);
     26c:	4883      	ldr	r0, [pc, #524]	; (47c <receiver+0x2ac>)
     26e:	f001 fc47 	bl	1b00 <__pi_fork>
     272:	2102      	movs	r1, #2
     274:	f001 faae 	bl	17d4 <__pi_join>
     278:	b360      	cbz	r0, 2d4 <receiver+0x104>
     27a:	f001 f807 	bl	128c <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     27e:	682d      	ldr	r5, [r5, #0]

				/*DEBUGGING*/
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     280:	4879      	ldr	r0, [pc, #484]	; (468 <receiver+0x298>)
     282:	8869      	ldrh	r1, [r5, #2]
     284:	f001 fc62 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	7929      	ldrb	r1, [r5, #4]
     28a:	4878      	ldr	r0, [pc, #480]	; (46c <receiver+0x29c>)
     28c:	f001 fc5e 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	7969      	ldrb	r1, [r5, #5]
     292:	4877      	ldr	r0, [pc, #476]	; (470 <receiver+0x2a0>)
     294:	f001 fc5a 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     298:	79a9      	ldrb	r1, [r5, #6]
     29a:	4876      	ldr	r0, [pc, #472]	; (474 <receiver+0x2a4>)
     29c:	f001 fc56 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	79e9      	ldrb	r1, [r5, #7]
     2a2:	4875      	ldr	r0, [pc, #468]	; (478 <receiver+0x2a8>)
     2a4:	f001 fc52 	bl	1b4c <diag>

				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	886b      	ldrh	r3, [r5, #2]
     2aa:	8862      	ldrh	r2, [r4, #2]
     2ac:	429a      	cmp	r2, r3
     2ae:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     2b2:	d103      	bne.n	2bc <receiver+0xec>
     2b4:	79aa      	ldrb	r2, [r5, #6]
     2b6:	1e51      	subs	r1, r2, #1
     2b8:	2917      	cmp	r1, #23
     2ba:	d902      	bls.n	2c2 <receiver+0xf2>
     2bc:	18e2      	adds	r2, r4, r3
     2be:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     2c2:	18e1      	adds	r1, r4, r3
     2c4:	f881 2468 	strb.w	r2, [r1, #1128]	; 0x468
				
				//node_db->index = node_db->nnodes[node_db->index] == discovery_response_message->sender_id ? node_db->index+1 : node_db->index;
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	79a9      	ldrb	r1, [r5, #6]
     2ca:	4291      	cmp	r1, r2
     2cc:	d102      	bne.n	2d4 <receiver+0x104>
					node_db->index+=1;
     2ce:	3301      	adds	r3, #1
     2d0:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				break;

		};
	state done_case:

		tcv_endp(incoming_packet);
     2d4:	4b63      	ldr	r3, [pc, #396]	; (464 <receiver+0x294>)
     2d6:	6818      	ldr	r0, [r3, #0]
     2d8:	f001 fd74 	bl	1dc4 <tcv_endp>

	//proceed receiving;
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	2003      	movs	r0, #3
     2de:	4968      	ldr	r1, [pc, #416]	; (480 <receiver+0x2b0>)
     2e0:	f002 f8f6 	bl	24d0 <ser_out>
		proceed receiving;
     2e4:	2000      	movs	r0, #0
     2e6:	f001 fa37 	bl	1758 <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ea:	2004      	movs	r0, #4
     2ec:	4965      	ldr	r1, [pc, #404]	; (484 <receiver+0x2b4>)
     2ee:	f002 f8ef 	bl	24d0 <ser_out>
		proceed receiving;
     2f2:	2000      	movs	r0, #0
     2f4:	f001 fa30 	bl	1758 <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	4b63      	ldr	r3, [pc, #396]	; (488 <receiver+0x2b8>)
     2fa:	2005      	movs	r0, #5
     2fc:	681a      	ldr	r2, [r3, #0]
     2fe:	4963      	ldr	r1, [pc, #396]	; (48c <receiver+0x2bc>)
     300:	f102 0308 	add.w	r3, r2, #8
     304:	7912      	ldrb	r2, [r2, #4]
     306:	f002 f955 	bl	25b4 <ser_outf>
		proceed receiving;
     30a:	2000      	movs	r0, #0
     30c:	f001 fa24 	bl	1758 <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	4b5d      	ldr	r3, [pc, #372]	; (488 <receiver+0x2b8>)
     312:	2006      	movs	r0, #6
     314:	681b      	ldr	r3, [r3, #0]
     316:	495e      	ldr	r1, [pc, #376]	; (490 <receiver+0x2c0>)
     318:	791a      	ldrb	r2, [r3, #4]
     31a:	f002 f94b 	bl	25b4 <ser_outf>
		proceed receiving;
     31e:	2000      	movs	r0, #0
     320:	f001 fa1a 	bl	1758 <proceed>
	state response_3:
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	4b58      	ldr	r3, [pc, #352]	; (488 <receiver+0x2b8>)
     326:	2007      	movs	r0, #7
     328:	681b      	ldr	r3, [r3, #0]
     32a:	495a      	ldr	r1, [pc, #360]	; (494 <receiver+0x2c4>)
     32c:	791a      	ldrb	r2, [r3, #4]
     32e:	f002 f941 	bl	25b4 <ser_outf>
		proceed receiving;
     332:	2000      	movs	r0, #0
     334:	f001 fa10 	bl	1758 <proceed>
	state response_4:
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	4b53      	ldr	r3, [pc, #332]	; (488 <receiver+0x2b8>)
     33a:	2008      	movs	r0, #8
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	4956      	ldr	r1, [pc, #344]	; (498 <receiver+0x2c8>)
     340:	791a      	ldrb	r2, [r3, #4]
     342:	f002 f937 	bl	25b4 <ser_outf>
		proceed receiving;
     346:	2000      	movs	r0, #0
     348:	f001 fa06 	bl	1758 <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	4853      	ldr	r0, [pc, #332]	; (49c <receiver+0x2cc>)
     34e:	f001 fbfd 	bl	1b4c <diag>
		// handle error
		// retry?
		proceed receiving;
     352:	2000      	movs	r0, #0
     354:	f001 fa00 	bl	1758 <proceed>
		
}
     358:	b010      	add	sp, #64	; 0x40
     35a:	bd70      	pop	{r4, r5, r6, pc}
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     35e:	4842      	ldr	r0, [pc, #264]	; (468 <receiver+0x298>)
     360:	8869      	ldrh	r1, [r5, #2]
     362:	f001 fbf3 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     366:	7929      	ldrb	r1, [r5, #4]
     368:	4840      	ldr	r0, [pc, #256]	; (46c <receiver+0x29c>)
     36a:	f001 fbef 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     36e:	7969      	ldrb	r1, [r5, #5]
     370:	483f      	ldr	r0, [pc, #252]	; (470 <receiver+0x2a0>)
     372:	f001 fbeb 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     376:	79a9      	ldrb	r1, [r5, #6]
     378:	483e      	ldr	r0, [pc, #248]	; (474 <receiver+0x2a4>)
     37a:	f001 fbe7 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     37e:	79e9      	ldrb	r1, [r5, #7]
     380:	483d      	ldr	r0, [pc, #244]	; (478 <receiver+0x2a8>)
     382:	f001 fbe3 	bl	1b4c <diag>
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     386:	4846      	ldr	r0, [pc, #280]	; (4a0 <receiver+0x2d0>)
     388:	f105 0108 	add.w	r1, r5, #8
     38c:	f001 fbde 	bl	1b4c <diag>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	7822      	ldrb	r2, [r4, #0]
     392:	79eb      	ldrb	r3, [r5, #7]
     394:	4293      	cmp	r3, r2
     396:	d19d      	bne.n	2d4 <receiver+0x104>
     398:	886a      	ldrh	r2, [r5, #2]
     39a:	429a      	cmp	r2, r3
     39c:	d19a      	bne.n	2d4 <receiver+0x104>
		strncpy(response_message->record, rec, 20);
     39e:	2214      	movs	r2, #20
     3a0:	4940      	ldr	r1, [pc, #256]	; (4a4 <receiver+0x2d4>)
     3a2:	2008      	movs	r0, #8
     3a4:	f001 fa65 	bl	1872 <__pi_strncpy>
					call sender(response_message_4, done_case);
     3a8:	2100      	movs	r1, #0
     3aa:	e75f      	b.n	26c <receiver+0x9c>
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	682b      	ldr	r3, [r5, #0]
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3ae:	8862      	ldrh	r2, [r4, #2]
     3b0:	8859      	ldrh	r1, [r3, #2]
     3b2:	4291      	cmp	r1, r2
     3b4:	d18e      	bne.n	2d4 <receiver+0x104>
     3b6:	79d9      	ldrb	r1, [r3, #7]
     3b8:	7822      	ldrb	r2, [r4, #0]
     3ba:	4291      	cmp	r1, r2
     3bc:	d18a      	bne.n	2d4 <receiver+0x104>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3be:	7a19      	ldrb	r1, [r3, #8]
     3c0:	2928      	cmp	r1, #40	; 0x28
     3c2:	d887      	bhi.n	2d4 <receiver+0x104>
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	4620      	mov	r0, r4
     3c6:	f7ff fef5 	bl	1b4 <delete_record>
     3ca:	e7e8      	b.n	39e <receiver+0x1ce>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	2200      	movs	r2, #0
     3ce:	8811      	ldrh	r1, [r2, #0]
     3d0:	8862      	ldrh	r2, [r4, #2]
     3d2:	4291      	cmp	r1, r2
     3d4:	f47f af7e 	bne.w	2d4 <receiver+0x104>
     3d8:	2200      	movs	r2, #0
     3da:	7951      	ldrb	r1, [r2, #5]
     3dc:	7822      	ldrb	r2, [r4, #0]
     3de:	4291      	cmp	r1, r2
     3e0:	f47f af78 	bne.w	2d4 <receiver+0x104>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	682b      	ldr	r3, [r5, #0]
     3e6:	7a1b      	ldrb	r3, [r3, #8]
     3e8:	2b28      	cmp	r3, #40	; 0x28
     3ea:	f63f af73 	bhi.w	2d4 <receiver+0x104>
    return node->data_base.item_array[index];
     3ee:	221c      	movs	r2, #28
     3f0:	fb02 4403 	mla	r4, r2, r3, r4
     3f4:	ad09      	add	r5, sp, #36	; 0x24
     3f6:	3404      	adds	r4, #4
     3f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     3fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     3fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	ae09      	add	r6, sp, #36	; 0x24
     402:	ac02      	add	r4, sp, #8
    return node->data_base.item_array[index];
     404:	e885 0007 	stmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     40a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     40c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		strncpy(response_message->record, rec, 20);
     414:	2214      	movs	r2, #20
     416:	f10d 0109 	add.w	r1, sp, #9
     41a:	e7c2      	b.n	3a2 <receiver+0x1d2>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	682a      	ldr	r2, [r5, #0]
     41e:	4d1a      	ldr	r5, [pc, #104]	; (488 <receiver+0x2b8>)
     420:	1c91      	adds	r1, r2, #2
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     422:	8850      	ldrh	r0, [r2, #2]
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     424:	6029      	str	r1, [r5, #0]
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     426:	8861      	ldrh	r1, [r4, #2]
     428:	4288      	cmp	r0, r1
     42a:	f47f af53 	bne.w	2d4 <receiver+0x104>
     42e:	79d2      	ldrb	r2, [r2, #7]
     430:	7823      	ldrb	r3, [r4, #0]
     432:	429a      	cmp	r2, r3
     434:	f47f af4e 	bne.w	2d4 <receiver+0x104>
				if(!response_flag){
     438:	481b      	ldr	r0, [pc, #108]	; (4a8 <receiver+0x2d8>)
     43a:	8803      	ldrh	r3, [r0, #0]
     43c:	b91b      	cbnz	r3, 446 <receiver+0x276>
					response_flag=1;
     43e:	2301      	movs	r3, #1
     440:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     442:	f001 f9ad 	bl	17a0 <__pi_trigger>
				switch(response_message_5->status){
     446:	682a      	ldr	r2, [r5, #0]
     448:	7993      	ldrb	r3, [r2, #6]
     44a:	3b01      	subs	r3, #1
     44c:	2b03      	cmp	r3, #3
     44e:	f63f af41 	bhi.w	2d4 <receiver+0x104>
     452:	e8df f003 	tbb	[pc, r3]
     456:	4543412b 	strbmi	r4, [r3, #-299]	; 0xfffffed5
     45a:	bf00      	nop
     45c:	200006cc 	andcs	r0, r0, ip, asr #13
     460:	20000000 	andcs	r0, r0, r0
     464:	20000558 	andcs	r0, r0, r8, asr r5
     468:	000048e3 	andeq	r4, r0, r3, ror #17
     46c:	000048f5 	strdeq	r4, [r0], -r5
     470:	00004908 	andeq	r4, r0, r8, lsl #18
     474:	0000491e 	andeq	r4, r0, lr, lsl r9
     478:	00004930 	andeq	r4, r0, r0, lsr r9
     47c:	000000c9 	andeq	r0, r0, r9, asr #1
     480:	0000498a 	andeq	r4, r0, sl, lsl #19
     484:	00004998 	muleq	r0, r8, r9
     488:	20000564 	andcs	r0, r0, r4, ror #10
     48c:	000049aa 	andeq	r4, r0, sl, lsr #19
     490:	000049c9 	andeq	r4, r0, r9, asr #19
     494:	000049f1 	strdeq	r4, [r0], -r1
     498:	00004a1a 	andeq	r4, r0, sl, lsl sl
     49c:	00004a42 	andeq	r4, r0, r2, asr #20
     4a0:	00004942 	andeq	r4, r0, r2, asr #18
     4a4:	20000540 	andcs	r0, r0, r0, asr #10
     4a8:	20000560 	andcs	r0, r0, r0, ror #10
						if (response_checker[0] == response_message_5->request_number){
     4ac:	4b11      	ldr	r3, [pc, #68]	; (4f4 <receiver+0x324>)
     4ae:	78d2      	ldrb	r2, [r2, #3]
     4b0:	6819      	ldr	r1, [r3, #0]
     4b2:	4291      	cmp	r1, r2
     4b4:	f47f af0e 	bne.w	2d4 <receiver+0x104>
							switch(response_checker[1]){
     4b8:	685b      	ldr	r3, [r3, #4]
     4ba:	2b03      	cmp	r3, #3
     4bc:	d008      	beq.n	4d0 <receiver+0x300>
     4be:	2b04      	cmp	r3, #4
     4c0:	d008      	beq.n	4d4 <receiver+0x304>
     4c2:	2b02      	cmp	r3, #2
     4c4:	f47f af06 	bne.w	2d4 <receiver+0x104>
									proceed response_1_create;
     4c8:	2003      	movs	r0, #3
						proceed response_2;
     4ca:	f001 f945 	bl	1758 <proceed>
						break;
     4ce:	e701      	b.n	2d4 <receiver+0x104>
									proceed response_1_delete;
     4d0:	2004      	movs	r0, #4
     4d2:	e7fa      	b.n	4ca <receiver+0x2fa>
									proceed response_1_retrieve;
     4d4:	2005      	movs	r0, #5
     4d6:	e7f8      	b.n	4ca <receiver+0x2fa>
						proceed response_2;
     4d8:	2006      	movs	r0, #6
     4da:	e7f6      	b.n	4ca <receiver+0x2fa>
						proceed response_3;
     4dc:	2007      	movs	r0, #7
     4de:	e7f4      	b.n	4ca <receiver+0x2fa>
						proceed response_4;
     4e0:	2008      	movs	r0, #8
     4e2:	e7f2      	b.n	4ca <receiver+0x2fa>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	4804      	ldr	r0, [pc, #16]	; (4f8 <receiver+0x328>)
     4e6:	f001 fb31 	bl	1b4c <diag>
				break;
     4ea:	e6f3      	b.n	2d4 <receiver+0x104>
}
     4ec:	f001 f8ac 	bl	1648 <__pi_badstate>
     4f0:	e732      	b.n	358 <receiver+0x188>
     4f2:	bf00      	nop
     4f4:	2000065c 	andcs	r0, r0, ip, asr r6
     4f8:	00004957 	andeq	r4, r0, r7, asr r9

000004fc <delete_all>:
bool delete_all(struct Node *node){
     4fc:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     4fe:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     502:	b164      	cbz	r4, 51e <delete_all+0x22>
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	2300      	movs	r3, #0
     506:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     50a:	3301      	adds	r3, #1
     50c:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     50e:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     510:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	daf9      	bge.n	50a <delete_all+0xe>
    node->data_base.item_count = 0;
     516:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    	return false;
     51a:	2000      	movs	r0, #0
}
     51c:	bd10      	pop	{r4, pc}
        return true;
     51e:	2001      	movs	r0, #1
     520:	e7fc      	b.n	51c <delete_all+0x20>
	...

00000524 <root>:

fsm root {
     524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     528:	2600      	movs	r6, #0
     52a:	b086      	sub	sp, #24
     52c:	2820      	cmp	r0, #32
     52e:	f200 8258 	bhi.w	9e2 <root+0x4be>
     532:	e8df f010 	tbh	[pc, r0, lsl #1]
     536:	00480021 	subeq	r0, r8, r1, lsr #32
     53a:	00770055 	rsbseq	r0, r7, r5, asr r0
     53e:	0089007b 	addeq	r0, r9, fp, ror r0
     542:	00bb008d 	adcseq	r0, fp, sp, lsl #1
     546:	00d300c6 	sbcseq	r0, r3, r6, asr #1
     54a:	013500fc 	ldrsheq	r0, [r5, -ip]!
     54e:	014a0146 	cmpeq	sl, r6, asr #2
     552:	015b0157 	cmpeq	fp, r7, asr r1
     556:	018a0160 	orreq	r0, sl, r0, ror #2
     55a:	019b018e 	orrseq	r0, fp, lr, lsl #3
     55e:	01a4019f 			; <UNDEFINED> instruction: 0x01a4019f
     562:	01cd01c9 	biceq	r0, sp, r9, asr #3
     566:	01de01da 	ldrsbeq	r0, [lr, #26]
     56a:	020801e3 	andeq	r0, r8, #-1073741768	; 0xc0000038
     56e:	0214020c 	andseq	r0, r4, #12, 4	; 0xc0000000
     572:	0244021b 	subeq	r0, r4, #-1342177279	; 0xb0000001
     576:	f240024b 	vhsub.s8	q8, q0, <illegal reg q5.5>

	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     57a:	4084      	lsls	r4, r0
     57c:	f001 fa6c 	bl	1a58 <__pi_malloc>
     580:	4c73      	ldr	r4, [pc, #460]	; (750 <root+0x22c>)
     582:	6020      	str	r0, [r4, #0]

		// Bool condition, check for failure
		init_node(node_db);
     584:	f7ff fdf2 	bl	16c <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     588:	21fa      	movs	r1, #250	; 0xfa
     58a:	2000      	movs	r0, #0
     58c:	f002 fc1c 	bl	2dc8 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     590:	4970      	ldr	r1, [pc, #448]	; (754 <root+0x230>)
     592:	2000      	movs	r0, #0
     594:	f001 fcae 	bl	1ef4 <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     598:	2200      	movs	r2, #0
     59a:	f64f 70ff 	movw	r0, #65535	; 0xffff
     59e:	4611      	mov	r1, r2
     5a0:	f001 fc48 	bl	1e34 <tcv_open>
     5a4:	4a6c      	ldr	r2, [pc, #432]	; (758 <root+0x234>)

		if (sfd < 0) {
     5a6:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     5a8:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     5aa:	da04      	bge.n	5b6 <root+0x92>
			diag("Cannot open tcv interface");
     5ac:	486b      	ldr	r0, [pc, #428]	; (75c <root+0x238>)
     5ae:	f001 facd 	bl	1b4c <diag>
			halt();
     5b2:	f000 ff97 	bl	14e4 <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b6:	2104      	movs	r1, #4
     5b8:	2200      	movs	r2, #0
     5ba:	f001 fd7f 	bl	20bc <tcv_control>

		runfsm receiver(node_db);
     5be:	6821      	ldr	r1, [r4, #0]
     5c0:	4867      	ldr	r0, [pc, #412]	; (760 <root+0x23c>)
     5c2:	f001 fa9d 	bl	1b00 <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c6:	2028      	movs	r0, #40	; 0x28
     5c8:	4b61      	ldr	r3, [pc, #388]	; (750 <root+0x22c>)
     5ca:	6819      	ldr	r1, [r3, #0]
     5cc:	780b      	ldrb	r3, [r1, #0]
     5ce:	884a      	ldrh	r2, [r1, #2]
     5d0:	9001      	str	r0, [sp, #4]
     5d2:	f891 1481 	ldrb.w	r1, [r1, #1153]	; 0x481
     5d6:	2001      	movs	r0, #1
     5d8:	9100      	str	r1, [sp, #0]
     5da:	4962      	ldr	r1, [pc, #392]	; (764 <root+0x240>)
     5dc:	f001 ffea 	bl	25b4 <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	4c61      	ldr	r4, [pc, #388]	; (768 <root+0x244>)
     5e2:	2002      	movs	r0, #2
     5e4:	4622      	mov	r2, r4
     5e6:	4961      	ldr	r1, [pc, #388]	; (76c <root+0x248>)
     5e8:	f002 f80e 	bl	2608 <ser_inf>
		switch(CHOICE) {
     5ec:	7823      	ldrb	r3, [r4, #0]
     5ee:	2b53      	cmp	r3, #83	; 0x53
     5f0:	d80f      	bhi.n	612 <root+0xee>
     5f2:	2b42      	cmp	r3, #66	; 0x42
     5f4:	d911      	bls.n	61a <root+0xf6>
     5f6:	3b43      	subs	r3, #67	; 0x43
     5f8:	2b10      	cmp	r3, #16
     5fa:	d80e      	bhi.n	61a <root+0xf6>
     5fc:	e8df f003 	tbb	[pc, r3]
     600:	8b958f8d 	blhi	fe56443c <_estack+0xde55f43c>
     604:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     608:	890d0d0d 	stmdbhi	sp, {r0, r2, r3, r8, sl, fp}
     60c:	910d0d0d 	tstls	sp, sp, lsl #26
     610:	3b630093 	blcc	18c0864 <__ccfg+0x18a08bc>
     614:	b2da      	uxtb	r2, r3
     616:	2a10      	cmp	r2, #16
     618:	d9ee      	bls.n	5f8 <root+0xd4>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     61a:	2001      	movs	r0, #1
     61c:	e000      	b.n	620 <root+0xfc>
				proceed get_new_group_id;
     61e:	2003      	movs	r0, #3
				proceed menu;
     620:	f001 f89a 	bl	1758 <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	2003      	movs	r0, #3
     626:	4952      	ldr	r1, [pc, #328]	; (770 <root+0x24c>)
     628:	f001 ff52 	bl	24d0 <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		word NEW_NODE_GID;
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	2200      	movs	r2, #0
     62e:	4951      	ldr	r1, [pc, #324]	; (774 <root+0x250>)
     630:	2004      	movs	r0, #4
     632:	f001 ffe9 	bl	2608 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     636:	4850      	ldr	r0, [pc, #320]	; (778 <root+0x254>)
     638:	f001 fa88 	bl	1b4c <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	4b44      	ldr	r3, [pc, #272]	; (750 <root+0x22c>)
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     63e:	2001      	movs	r0, #1
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     640:	681b      	ldr	r3, [r3, #0]
    node->gid = gid; 
     642:	805e      	strh	r6, [r3, #2]
		proceed menu;
     644:	f001 f888 	bl	1758 <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	2005      	movs	r0, #5
     64a:	494c      	ldr	r1, [pc, #304]	; (77c <root+0x258>)
     64c:	f001 ff40 	bl	24d0 <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
		
		// Check to see if the number given is within range.
		if(node_db->id < 1 || node_db->id > 25){
     650:	4c3f      	ldr	r4, [pc, #252]	; (750 <root+0x22c>)
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     652:	2200      	movs	r2, #0
     654:	2006      	movs	r0, #6
     656:	494a      	ldr	r1, [pc, #296]	; (780 <root+0x25c>)
     658:	f001 ffd6 	bl	2608 <ser_inf>
		if(node_db->id < 1 || node_db->id > 25){
     65c:	6823      	ldr	r3, [r4, #0]
     65e:	781b      	ldrb	r3, [r3, #0]
     660:	3b01      	subs	r3, #1
     662:	2b18      	cmp	r3, #24
     664:	d907      	bls.n	676 <root+0x152>
			strncpy(reason, "Out of Range", 50);
     666:	4847      	ldr	r0, [pc, #284]	; (784 <root+0x260>)
     668:	2232      	movs	r2, #50	; 0x32
     66a:	4947      	ldr	r1, [pc, #284]	; (788 <root+0x264>)
     66c:	f001 f901 	bl	1872 <__pi_strncpy>
			proceed invalid_node_id;
     670:	2007      	movs	r0, #7
     672:	f001 f871 	bl	1758 <proceed>
fsm root {
     676:	2500      	movs	r5, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < 25; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     678:	4f44      	ldr	r7, [pc, #272]	; (78c <root+0x268>)
     67a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 784 <root+0x260>
			if(node_db->id == node_db->nnodes[i]){
     67e:	6823      	ldr	r3, [r4, #0]
     680:	1959      	adds	r1, r3, r5
     682:	781a      	ldrb	r2, [r3, #0]
     684:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     688:	429a      	cmp	r2, r3
     68a:	d107      	bne.n	69c <root+0x178>
				strncpy(reason, "ID is already in use", 50);
     68c:	4640      	mov	r0, r8
     68e:	2232      	movs	r2, #50	; 0x32
     690:	4639      	mov	r1, r7
     692:	f001 f8ee 	bl	1872 <__pi_strncpy>
				proceed invalid_node_id;
     696:	2007      	movs	r0, #7
     698:	f001 f85e 	bl	1758 <proceed>
		for(int i = 0; i < 25; i++){
     69c:	3501      	adds	r5, #1
     69e:	2d19      	cmp	r5, #25
     6a0:	d1ed      	bne.n	67e <root+0x15a>
			};
		};

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     6a2:	6823      	ldr	r3, [r4, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		proceed menu;
     6a4:	2001      	movs	r0, #1
    node->id = id; 
     6a6:	701e      	strb	r6, [r3, #0]
		proceed menu;
     6a8:	f001 f856 	bl	1758 <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	4b28      	ldr	r3, [pc, #160]	; (750 <root+0x22c>)
     6ae:	2007      	movs	r0, #7
     6b0:	681a      	ldr	r2, [r3, #0]
     6b2:	4937      	ldr	r1, [pc, #220]	; (790 <root+0x26c>)
     6b4:	4b33      	ldr	r3, [pc, #204]	; (784 <root+0x260>)
     6b6:	7812      	ldrb	r2, [r2, #0]
     6b8:	f001 ff7c 	bl	25b4 <ser_outf>
		proceed get_new_node_id;
     6bc:	2005      	movs	r0, #5
     6be:	f001 f84b 	bl	1758 <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     6c2:	4b23      	ldr	r3, [pc, #140]	; (750 <root+0x22c>)
     6c4:	6818      	ldr	r0, [r3, #0]
     6c6:	f7ff fd6a 	bl	19e <clear_node_neighbour_array>
     6ca:	b938      	cbnz	r0, 6dc <root+0x1b8>
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	482d      	ldr	r0, [pc, #180]	; (784 <root+0x260>)
     6ce:	2232      	movs	r2, #50	; 0x32
     6d0:	4930      	ldr	r1, [pc, #192]	; (794 <root+0x270>)
     6d2:	f001 f8ce 	bl	1872 <__pi_strncpy>
			proceed error;
     6d6:	2020      	movs	r0, #32
     6d8:	f001 f83e 	bl	1758 <proceed>
		};

	state find_proto_start:

		struct DiscoveryRequestMessage *request_packet;
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	2006      	movs	r0, #6
     6de:	f001 f9bb 	bl	1a58 <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     6e2:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     6e4:	4e1a      	ldr	r6, [pc, #104]	; (750 <root+0x22c>)
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6e6:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     6e8:	6833      	ldr	r3, [r6, #0]
     6ea:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     6ee:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     6f0:	f7ff fd4c 	bl	18c <generate_request_num>
     6f4:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     6f6:	6833      	ldr	r3, [r6, #0]

		// call sender?
		// delay() ?
		// what should the trigger listen for?
		//trigger(&fin);
		call sender(request_packet, wait_discovery);
     6f8:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     6fa:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     6fc:	4826      	ldr	r0, [pc, #152]	; (798 <root+0x274>)
		request_packet->sender_id = node_db->id;
     6fe:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     700:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     702:	f001 f9fd 	bl	1b00 <__pi_fork>
     706:	210a      	movs	r1, #10
     708:	f001 f864 	bl	17d4 <__pi_join>
     70c:	b178      	cbz	r0, 72e <root+0x20a>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     70e:	f000 fdbd 	bl	128c <__pi_release>
				proceed get_new_node_id;
     712:	2005      	movs	r0, #5
     714:	e784      	b.n	620 <root+0xfc>
				proceed clear_neighbour_array;
     716:	2008      	movs	r0, #8
     718:	e782      	b.n	620 <root+0xfc>
				proceed create_proto_start;
     71a:	200c      	movs	r0, #12
     71c:	e780      	b.n	620 <root+0xfc>
				proceed start_delete_proto;
     71e:	2011      	movs	r0, #17
     720:	e77e      	b.n	620 <root+0xfc>
				proceed retrieve_proto;
     722:	201a      	movs	r0, #26
     724:	e77c      	b.n	620 <root+0xfc>
				proceed display_db;
     726:	201b      	movs	r0, #27
     728:	e77a      	b.n	620 <root+0xfc>
				proceed del_local;
     72a:	201d      	movs	r0, #29
     72c:	e778      	b.n	620 <root+0xfc>
		if (discovery_wait_flag == 0){
     72e:	4b1b      	ldr	r3, [pc, #108]	; (79c <root+0x278>)
     730:	681a      	ldr	r2, [r3, #0]
     732:	b93a      	cbnz	r2, 744 <root+0x220>
			discovery_wait_flag=1;
     734:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     736:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     738:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     73a:	f640 30b8 	movw	r0, #3000	; 0xbb8
     73e:	f001 f85b 	bl	17f8 <delay>
     742:	e7e4      	b.n	70e <root+0x1ea>
		}
		if (discovery_wait_flag == 1){
     744:	2a01      	cmp	r2, #1
     746:	d12b      	bne.n	7a0 <root+0x27c>
			discovery_wait_flag=0;
     748:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     74a:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     74c:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     74e:	e7f4      	b.n	73a <root+0x216>
     750:	20000698 	mulcs	r0, r8, r6
     754:	000058f8 	strdeq	r5, [r0], -r8
     758:	20000000 	andcs	r0, r0, r0
     75c:	00004a77 	andeq	r4, r0, r7, ror sl
     760:	000001d1 	ldrdeq	r0, [r0], -r1
     764:	00004a91 	muleq	r0, r1, sl
     768:	20000696 	mulcs	r0, r6, r6
     76c:	00004b7d 	andeq	r4, r0, sp, ror fp
     770:	00004b80 	andeq	r4, r0, r0, lsl #23
     774:	00004d3f 	andeq	r4, r0, pc, lsr sp
     778:	00004ba1 	andeq	r4, r0, r1, lsr #23
     77c:	00004bb7 			; <UNDEFINED> instruction: 0x00004bb7
     780:	00004bea 	andeq	r4, r0, sl, ror #23
     784:	20000664 	andcs	r0, r0, r4, ror #12
     788:	00004bed 	andeq	r4, r0, sp, ror #23
     78c:	00004bfa 	strdeq	r4, [r0], -sl
     790:	00004c0f 	andeq	r4, r0, pc, lsl #24
     794:	00004c3c 	andeq	r4, r0, ip, lsr ip
     798:	000000c9 	andeq	r0, r0, r9, asr #1
     79c:	20000554 	andcs	r0, r0, r4, asr r5
			release;
		}
	
	state display_neighbour_nodes:
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	200b      	movs	r0, #11
     7a2:	4991      	ldr	r1, [pc, #580]	; (9e8 <root+0x4c4>)
     7a4:	f001 fe94 	bl	24d0 <ser_out>
		//ser_outf(display_neighbour_nodes, "\r\n Neighbors: %s", node_db->nnodes);
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     7a8:	2400      	movs	r4, #0
			if (node_db->nnodes[i]=='\0') break;
     7aa:	4d90      	ldr	r5, [pc, #576]	; (9ec <root+0x4c8>)
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     7ac:	4e90      	ldr	r6, [pc, #576]	; (9f0 <root+0x4cc>)
			if (node_db->nnodes[i]=='\0') break;
     7ae:	682b      	ldr	r3, [r5, #0]
     7b0:	4423      	add	r3, r4
     7b2:	f893 2468 	ldrb.w	r2, [r3, #1128]	; 0x468
     7b6:	2a00      	cmp	r2, #0
     7b8:	f040 80e2 	bne.w	980 <root+0x45c>
		}
		proceed menu;
     7bc:	2001      	movs	r0, #1
     7be:	f000 ffcb 	bl	1758 <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c2:	200c      	movs	r0, #12
     7c4:	498b      	ldr	r1, [pc, #556]	; (9f4 <root+0x4d0>)
     7c6:	f001 fe83 	bl	24d0 <ser_out>

	state get_id_for_create:
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7ca:	2200      	movs	r2, #0
     7cc:	498a      	ldr	r1, [pc, #552]	; (9f8 <root+0x4d4>)
     7ce:	200d      	movs	r0, #13
     7d0:	f001 feb4 	bl	253c <ser_in>

		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
			strncpy(reason, "Error: improper ID", 50);
     7d4:	4889      	ldr	r0, [pc, #548]	; (9fc <root+0x4d8>)
     7d6:	2232      	movs	r2, #50	; 0x32
     7d8:	4989      	ldr	r1, [pc, #548]	; (a00 <root+0x4dc>)
     7da:	f001 f84a 	bl	1872 <__pi_strncpy>
			proceed error;
     7de:	2020      	movs	r0, #32
     7e0:	f000 ffba 	bl	1758 <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	200e      	movs	r0, #14
     7e6:	4987      	ldr	r1, [pc, #540]	; (a04 <root+0x4e0>)
     7e8:	f001 fe72 	bl	24d0 <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	2214      	movs	r2, #20
     7ee:	200f      	movs	r0, #15
     7f0:	4985      	ldr	r1, [pc, #532]	; (a08 <root+0x4e4>)
     7f2:	f001 fea3 	bl	253c <ser_in>
		// NOTE: im not sure if we need to add checks here, this should stop them from entering anymore than 20 characters?

	state init_create_record_message:

		struct CreateRecordMessage *create_message;
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f6:	201a      	movs	r0, #26
     7f8:	f001 f92e 	bl	1a58 <__pi_malloc>
		create_message->gid = node_db->gid;
		create_message->tpe = CREATE_RECORD;
     7fc:	2202      	movs	r2, #2
		create_message->gid = node_db->gid;
     7fe:	4c7b      	ldr	r4, [pc, #492]	; (9ec <root+0x4c8>)
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	9003      	str	r0, [sp, #12]
		create_message->gid = node_db->gid;
     802:	6823      	ldr	r3, [r4, #0]
     804:	885b      	ldrh	r3, [r3, #2]
     806:	8003      	strh	r3, [r0, #0]
		create_message->tpe = CREATE_RECORD;
     808:	9b03      	ldr	r3, [sp, #12]
     80a:	709a      	strb	r2, [r3, #2]
		create_message->request_number = generate_request_num();
     80c:	9d03      	ldr	r5, [sp, #12]
     80e:	f7ff fcbd 	bl	18c <generate_request_num>
     812:	70e8      	strb	r0, [r5, #3]
		create_message->sender_id = node_db->id;
     814:	6823      	ldr	r3, [r4, #0]
     816:	9803      	ldr	r0, [sp, #12]
     818:	781b      	ldrb	r3, [r3, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     81a:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     81c:	7103      	strb	r3, [r0, #4]
		create_message->receiver_id = user_provided_receiver_id;
     81e:	2300      	movs	r3, #0
		strncpy(create_message->record, user_provided_record, 20);
     820:	4979      	ldr	r1, [pc, #484]	; (a08 <root+0x4e4>)
		create_message->receiver_id = user_provided_receiver_id;
     822:	7143      	strb	r3, [r0, #5]
		strncpy(create_message->record, user_provided_record, 20);
     824:	3006      	adds	r0, #6
     826:	f001 f824 	bl	1872 <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     82a:	9a03      	ldr	r2, [sp, #12]
     82c:	4b77      	ldr	r3, [pc, #476]	; (a0c <root+0x4e8>)
     82e:	78d1      	ldrb	r1, [r2, #3]
		response_checker[1] = create_message->tpe;

		call sender(&create_message, wait);
     830:	4877      	ldr	r0, [pc, #476]	; (a10 <root+0x4ec>)
		response_checker[0] = create_message->request_number;
     832:	6019      	str	r1, [r3, #0]
		response_checker[1] = create_message->tpe;
     834:	7892      	ldrb	r2, [r2, #2]
		call sender(&create_message, wait);
     836:	a903      	add	r1, sp, #12
		response_checker[1] = create_message->tpe;
     838:	605a      	str	r2, [r3, #4]
		call sender(&create_message, wait);
     83a:	f001 f961 	bl	1b00 <__pi_fork>
     83e:	211e      	movs	r1, #30
     840:	f000 ffc8 	bl	17d4 <__pi_join>
     844:	2800      	cmp	r0, #0
     846:	f47f af62 	bne.w	70e <root+0x1ea>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84a:	2011      	movs	r0, #17
     84c:	4969      	ldr	r1, [pc, #420]	; (9f4 <root+0x4d0>)
     84e:	f001 fe3f 	bl	24d0 <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     852:	2200      	movs	r2, #0
     854:	4968      	ldr	r1, [pc, #416]	; (9f8 <root+0x4d4>)
     856:	2012      	movs	r0, #18
     858:	f001 fed6 	bl	2608 <ser_inf>

		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
			strncpy(reason, "Error: improper node ID", 50);
     85c:	4867      	ldr	r0, [pc, #412]	; (9fc <root+0x4d8>)
     85e:	2232      	movs	r2, #50	; 0x32
     860:	496c      	ldr	r1, [pc, #432]	; (a14 <root+0x4f0>)
     862:	f001 f806 	bl	1872 <__pi_strncpy>
			proceed error;
     866:	2020      	movs	r0, #32
     868:	f000 ff76 	bl	1758 <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	2013      	movs	r0, #19
     86e:	496a      	ldr	r1, [pc, #424]	; (a18 <root+0x4f4>)
     870:	f001 fe2e 	bl	24d0 <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	2200      	movs	r2, #0
     876:	2014      	movs	r0, #20
     878:	495f      	ldr	r1, [pc, #380]	; (9f8 <root+0x4d4>)
     87a:	f001 fec5 	bl	2608 <ser_inf>
		};

	state init_delete_record_message:

		struct DeleteRecordMessage *delete_record;
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     87e:	2008      	movs	r0, #8
     880:	f001 f8ea 	bl	1a58 <__pi_malloc>
		delete_record->gid = node_db->gid;
		delete_record->tpe = DELETE_RECORD;
     884:	2203      	movs	r2, #3
		delete_record->gid = node_db->gid;
     886:	4c59      	ldr	r4, [pc, #356]	; (9ec <root+0x4c8>)
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	9004      	str	r0, [sp, #16]
		delete_record->gid = node_db->gid;
     88a:	6823      	ldr	r3, [r4, #0]
     88c:	885b      	ldrh	r3, [r3, #2]
     88e:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     890:	9b04      	ldr	r3, [sp, #16]
     892:	709a      	strb	r2, [r3, #2]
		delete_record->request_number = generate_request_num();
     894:	9d04      	ldr	r5, [sp, #16]
     896:	f7ff fc79 	bl	18c <generate_request_num>
     89a:	70e8      	strb	r0, [r5, #3]
		delete_record->sender_id = node_db->id;
     89c:	6822      	ldr	r2, [r4, #0]
     89e:	9b04      	ldr	r3, [sp, #16]
     8a0:	7812      	ldrb	r2, [r2, #0]
		delete_record->receiver_id = user_provided_receiver_id;
		delete_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
     8a2:	78d9      	ldrb	r1, [r3, #3]
		delete_record->sender_id = node_db->id;
     8a4:	711a      	strb	r2, [r3, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     8a6:	2200      	movs	r2, #0
     8a8:	715a      	strb	r2, [r3, #5]
		delete_record->record_index = user_provided_index;
     8aa:	719a      	strb	r2, [r3, #6]
		response_checker[0] = delete_record->request_number;
     8ac:	4a57      	ldr	r2, [pc, #348]	; (a0c <root+0x4e8>)
		response_checker[1] = delete_record->tpe;

		call sender(&delete_record, wait);
     8ae:	4858      	ldr	r0, [pc, #352]	; (a10 <root+0x4ec>)
		response_checker[0] = delete_record->request_number;
     8b0:	6011      	str	r1, [r2, #0]
		response_checker[1] = delete_record->tpe;
     8b2:	789b      	ldrb	r3, [r3, #2]
		call sender(&delete_record, wait);
     8b4:	a904      	add	r1, sp, #16
		response_checker[1] = delete_record->tpe;
     8b6:	6053      	str	r3, [r2, #4]
		call sender(&delete_record, wait);
     8b8:	f001 f922 	bl	1b00 <__pi_fork>
     8bc:	211e      	movs	r1, #30
     8be:	f000 ff89 	bl	17d4 <__pi_join>
     8c2:	2800      	cmp	r0, #0
     8c4:	f47f af23 	bne.w	70e <root+0x1ea>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	2016      	movs	r0, #22
     8ca:	494a      	ldr	r1, [pc, #296]	; (9f4 <root+0x4d0>)
     8cc:	f001 fe00 	bl	24d0 <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	2200      	movs	r2, #0
     8d2:	4949      	ldr	r1, [pc, #292]	; (9f8 <root+0x4d4>)
     8d4:	2017      	movs	r0, #23
     8d6:	f001 fe97 	bl	2608 <ser_inf>

		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
			strncpy(reason, "Error: improper node ID", 50);
     8da:	4848      	ldr	r0, [pc, #288]	; (9fc <root+0x4d8>)
     8dc:	2232      	movs	r2, #50	; 0x32
     8de:	494d      	ldr	r1, [pc, #308]	; (a14 <root+0x4f0>)
     8e0:	f000 ffc7 	bl	1872 <__pi_strncpy>
			proceed error;
     8e4:	2020      	movs	r0, #32
     8e6:	f000 ff37 	bl	1758 <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ea:	2018      	movs	r0, #24
     8ec:	494a      	ldr	r1, [pc, #296]	; (a18 <root+0x4f4>)
     8ee:	f001 fdef 	bl	24d0 <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f2:	2200      	movs	r2, #0
     8f4:	2019      	movs	r0, #25
     8f6:	4940      	ldr	r1, [pc, #256]	; (9f8 <root+0x4d4>)
     8f8:	f001 fe86 	bl	2608 <ser_inf>
		};

	state retrieve_proto:

		struct RetrieveRecordMessage *retrieve_record;
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	2008      	movs	r0, #8
     8fe:	f001 f8ab 	bl	1a58 <__pi_malloc>
		retrieve_record->gid = node_db->gid;
		retrieve_record->tpe = RETRIEVE_RECORD;
     902:	2204      	movs	r2, #4
		retrieve_record->gid = node_db->gid;
     904:	4c39      	ldr	r4, [pc, #228]	; (9ec <root+0x4c8>)
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     906:	9005      	str	r0, [sp, #20]
		retrieve_record->gid = node_db->gid;
     908:	6823      	ldr	r3, [r4, #0]
     90a:	885b      	ldrh	r3, [r3, #2]
     90c:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     90e:	9b05      	ldr	r3, [sp, #20]
     910:	709a      	strb	r2, [r3, #2]
		retrieve_record->request_number = generate_request_num();
     912:	9d05      	ldr	r5, [sp, #20]
     914:	f7ff fc3a 	bl	18c <generate_request_num>
     918:	70e8      	strb	r0, [r5, #3]
		retrieve_record->sender_id = node_db->id;
     91a:	6822      	ldr	r2, [r4, #0]
     91c:	9b05      	ldr	r3, [sp, #20]
     91e:	7812      	ldrb	r2, [r2, #0]
		retrieve_record->receiver_id = user_provided_receiver_id;
		retrieve_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     920:	78d9      	ldrb	r1, [r3, #3]
		retrieve_record->sender_id = node_db->id;
     922:	711a      	strb	r2, [r3, #4]
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	2200      	movs	r2, #0
     926:	715a      	strb	r2, [r3, #5]
		retrieve_record->record_index = user_provided_index;
     928:	719a      	strb	r2, [r3, #6]
		response_checker[0] = retrieve_record->request_number;
     92a:	4a38      	ldr	r2, [pc, #224]	; (a0c <root+0x4e8>)
		response_checker[1] = retrieve_record->tpe;
		
		call sender(&retrieve_record, wait);
     92c:	4838      	ldr	r0, [pc, #224]	; (a10 <root+0x4ec>)
		response_checker[0] = retrieve_record->request_number;
     92e:	6011      	str	r1, [r2, #0]
		response_checker[1] = retrieve_record->tpe;
     930:	789b      	ldrb	r3, [r3, #2]
		call sender(&retrieve_record, wait);
     932:	a905      	add	r1, sp, #20
		response_checker[1] = retrieve_record->tpe;
     934:	6053      	str	r3, [r2, #4]
		call sender(&retrieve_record, wait);
     936:	f001 f8e3 	bl	1b00 <__pi_fork>
     93a:	211e      	movs	r1, #30
     93c:	f000 ff4a 	bl	17d4 <__pi_join>
     940:	2800      	cmp	r0, #0
     942:	f47f aee4 	bne.w	70e <root+0x1ea>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     946:	201b      	movs	r0, #27
     948:	4934      	ldr	r1, [pc, #208]	; (a1c <root+0x4f8>)
     94a:	f001 fdc1 	bl	24d0 <ser_out>
		
	state loop_through_data:
		if(node_db->data_base.item_count != 0){
     94e:	4d27      	ldr	r5, [pc, #156]	; (9ec <root+0x4c8>)
     950:	682a      	ldr	r2, [r5, #0]
     952:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
     956:	bb72      	cbnz	r2, 9b6 <root+0x492>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
			}
		}
		proceed menu;
     958:	2001      	movs	r0, #1
     95a:	f000 fefd 	bl	1758 <proceed>

	state del_local:
		delete_all(node_db);
     95e:	4b23      	ldr	r3, [pc, #140]	; (9ec <root+0x4c8>)
     960:	6818      	ldr	r0, [r3, #0]
     962:	f7ff fdcb 	bl	4fc <delete_all>
		proceed menu;
     966:	2001      	movs	r0, #1
     968:	f000 fef6 	bl	1758 <proceed>

	state wait:
		delay(3000, timeout);
     96c:	211f      	movs	r1, #31
     96e:	f640 30b8 	movw	r0, #3000	; 0xbb8
     972:	f000 ff41 	bl	17f8 <delay>
		when(&response_flag, menu);
     976:	2101      	movs	r1, #1
     978:	4829      	ldr	r0, [pc, #164]	; (a20 <root+0x4fc>)
     97a:	f000 fef7 	bl	176c <__pi_wait>
		release;
     97e:	e6c6      	b.n	70e <root+0x1ea>
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	4631      	mov	r1, r6
     982:	200b      	movs	r0, #11
     984:	f001 fe16 	bl	25b4 <ser_outf>
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	3401      	adds	r4, #1
     98a:	e710      	b.n	7ae <root+0x28a>
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	fb06 f204 	mul.w	r2, r6, r4
     990:	1898      	adds	r0, r3, r2
     992:	3205      	adds	r2, #5
     994:	4413      	add	r3, r2
     996:	9301      	str	r3, [sp, #4]
     998:	7903      	ldrb	r3, [r0, #4]
     99a:	4622      	mov	r2, r4
     99c:	9300      	str	r3, [sp, #0]
     99e:	69c3      	ldr	r3, [r0, #28]
     9a0:	4639      	mov	r1, r7
     9a2:	201c      	movs	r0, #28
     9a4:	f001 fe06 	bl	25b4 <ser_outf>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	3401      	adds	r4, #1
     9aa:	682b      	ldr	r3, [r5, #0]
     9ac:	f893 2464 	ldrb.w	r2, [r3, #1124]	; 0x464
     9b0:	42a2      	cmp	r2, r4
     9b2:	daeb      	bge.n	98c <root+0x468>
     9b4:	e7d0      	b.n	958 <root+0x434>
     9b6:	2400      	movs	r4, #0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	261c      	movs	r6, #28
     9ba:	4f1a      	ldr	r7, [pc, #104]	; (a24 <root+0x500>)
     9bc:	e7f5      	b.n	9aa <root+0x486>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     9be:	201f      	movs	r0, #31
     9c0:	4919      	ldr	r1, [pc, #100]	; (a28 <root+0x504>)
     9c2:	f001 fd85 	bl	24d0 <ser_out>
		proceed menu;
     9c6:	2001      	movs	r0, #1
     9c8:	f000 fec6 	bl	1758 <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	2007      	movs	r0, #7
     9ce:	4a0b      	ldr	r2, [pc, #44]	; (9fc <root+0x4d8>)
     9d0:	4916      	ldr	r1, [pc, #88]	; (a2c <root+0x508>)
     9d2:	f001 fdef 	bl	25b4 <ser_outf>
		proceed menu;
     9d6:	2001      	movs	r0, #1
     9d8:	f000 febe 	bl	1758 <proceed>
}
     9dc:	b006      	add	sp, #24
     9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9e2:	f000 fe31 	bl	1648 <__pi_badstate>
     9e6:	e7f9      	b.n	9dc <root+0x4b8>
     9e8:	00004c56 	andeq	r4, r0, r6, asr ip
     9ec:	20000698 	mulcs	r0, r8, r6
     9f0:	00004c65 	andeq	r4, r0, r5, ror #24
     9f4:	00004c6a 	andeq	r4, r0, sl, ror #24
     9f8:	00004f7f 	andeq	r4, r0, pc, ror pc
     9fc:	20000664 	andcs	r0, r0, r4, ror #12
     a00:	00004c8c 	andeq	r4, r0, ip, lsl #25
     a04:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     a08:	20000568 	andcs	r0, r0, r8, ror #10
     a0c:	2000065c 	andcs	r0, r0, ip, asr r6
     a10:	000000c9 	andeq	r0, r0, r9, asr #1
     a14:	00004cc8 	andeq	r4, r0, r8, asr #25
     a18:	00004ce0 	andeq	r4, r0, r0, ror #25
     a1c:	00004d09 	andeq	r4, r0, r9, lsl #26
     a20:	20000560 	andcs	r0, r0, r0, ror #10
     a24:	00004d32 	andeq	r4, r0, r2, lsr sp
     a28:	00004d42 	andeq	r4, r0, r2, asr #26
     a2c:	00004d64 	andeq	r4, r0, r4, ror #26

00000a30 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     a30:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     a32:	4801      	ldr	r0, [pc, #4]	; (a38 <devinit_uart+0x8>)
     a34:	f000 bf3c 	b.w	18b0 <adddevfunc>
     a38:	00000dbd 			; <UNDEFINED> instruction: 0x00000dbd

00000a3c <udelay>:
void udelay (volatile word n) {
     a3c:	b082      	sub	sp, #8
     a3e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     a42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a46:	b29b      	uxth	r3, r3
     a48:	b90b      	cbnz	r3, a4e <udelay+0x12>
}
     a4a:	b002      	add	sp, #8
     a4c:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     a4e:	2304      	movs	r3, #4
	while (n--);
     a50:	461a      	mov	r2, r3
     a52:	3b01      	subs	r3, #1
     a54:	b29b      	uxth	r3, r3
     a56:	2a00      	cmp	r2, #0
     a58:	d1fa      	bne.n	a50 <udelay+0x14>
		n--;
     a5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a5e:	3b01      	subs	r3, #1
     a60:	b29b      	uxth	r3, r3
     a62:	f8ad 3006 	strh.w	r3, [sp, #6]
     a66:	e7ec      	b.n	a42 <udelay+0x6>

00000a68 <mdelay>:
void mdelay (volatile word n) {
     a68:	b507      	push	{r0, r1, r2, lr}
     a6a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     a6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a72:	b29b      	uxth	r3, r3
     a74:	b913      	cbnz	r3, a7c <mdelay+0x14>
}
     a76:	b003      	add	sp, #12
     a78:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     a7c:	f240 30e7 	movw	r0, #999	; 0x3e7
     a80:	f7ff ffdc 	bl	a3c <udelay>
		n--;
     a84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     a88:	3b01      	subs	r3, #1
     a8a:	b29b      	uxth	r3, r3
     a8c:	f8ad 3006 	strh.w	r3, [sp, #6]
     a90:	e7ed      	b.n	a6e <mdelay+0x6>
	...

00000a94 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     a94:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     a96:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     a98:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     a9a:	d505      	bpl.n	aa8 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     a9c:	4b0a      	ldr	r3, [pc, #40]	; (ac8 <__pi_ondomain+0x34>)
     a9e:	78da      	ldrb	r2, [r3, #3]
     aa0:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     aa2:	bf84      	itt	hi
     aa4:	2201      	movhi	r2, #1
     aa6:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     aa8:	4d08      	ldr	r5, [pc, #32]	; (acc <__pi_ondomain+0x38>)
     aaa:	4620      	mov	r0, r4
     aac:	682b      	ldr	r3, [r5, #0]
     aae:	695b      	ldr	r3, [r3, #20]
     ab0:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab2:	682b      	ldr	r3, [r5, #0]
     ab4:	4620      	mov	r0, r4
     ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ab8:	4798      	blx	r3
     aba:	2801      	cmp	r0, #1
     abc:	d1f9      	bne.n	ab2 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     abe:	4b02      	ldr	r3, [pc, #8]	; (ac8 <__pi_ondomain+0x34>)
     ac0:	6858      	ldr	r0, [r3, #4]
     ac2:	4304      	orrs	r4, r0
     ac4:	605c      	str	r4, [r3, #4]
}
     ac6:	bd38      	pop	{r3, r4, r5, pc}
     ac8:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     acc:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000ad0 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     ad0:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     ad2:	4d0d      	ldr	r5, [pc, #52]	; (b08 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     ad4:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     ad6:	682b      	ldr	r3, [r5, #0]
     ad8:	699b      	ldr	r3, [r3, #24]
     ada:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	682b      	ldr	r3, [r5, #0]
     ade:	4620      	mov	r0, r4
     ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ae2:	4798      	blx	r3
     ae4:	2802      	cmp	r0, #2
     ae6:	d1f9      	bne.n	adc <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	f014 0f01 	tst.w	r4, #1
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <__pi_offdomain+0x3c>)
     aee:	d006      	beq.n	afe <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	7899      	ldrb	r1, [r3, #2]
     af2:	78da      	ldrb	r2, [r3, #3]
     af4:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af6:	bf82      	ittt	hi
     af8:	789a      	ldrbhi	r2, [r3, #2]
     afa:	b2d2      	uxtbhi	r2, r2
     afc:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     afe:	6858      	ldr	r0, [r3, #4]
     b00:	ea20 0404 	bic.w	r4, r0, r4
     b04:	605c      	str	r4, [r3, #4]
}
     b06:	bd38      	pop	{r3, r4, r5, pc}
     b08:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     b0c:	200006b0 			; <UNDEFINED> instruction: 0x200006b0

00000b10 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     b10:	460a      	mov	r2, r1
     b12:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     b14:	4601      	mov	r1, r0
     b16:	480f      	ldr	r0, [pc, #60]	; (b54 <__pi_syserror+0x44>)
     b18:	f001 f818 	bl	1b4c <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b1e:	2540      	movs	r5, #64	; 0x40
     b20:	462f      	mov	r7, r5
     b22:	4e0d      	ldr	r6, [pc, #52]	; (b58 <__pi_syserror+0x48>)
     b24:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     b26:	490d      	ldr	r1, [pc, #52]	; (b5c <__pi_syserror+0x4c>)
     b28:	6037      	str	r7, [r6, #0]
     b2a:	6034      	str	r4, [r6, #0]
     b2c:	780b      	ldrb	r3, [r1, #0]
     b2e:	780b      	ldrb	r3, [r1, #0]
     b30:	20c8      	movs	r0, #200	; 0xc8
     b32:	f36f 1307 	bfc	r3, #4, #4
     b36:	700b      	strb	r3, [r1, #0]
     b38:	f7ff ff96 	bl	a68 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	4b08      	ldr	r3, [pc, #32]	; (b60 <__pi_syserror+0x50>)
     b3e:	20c8      	movs	r0, #200	; 0xc8
     b40:	601d      	str	r5, [r3, #0]
     b42:	601c      	str	r4, [r3, #0]
     b44:	780b      	ldrb	r3, [r1, #0]
     b46:	780b      	ldrb	r3, [r1, #0]
     b48:	f36f 1307 	bfc	r3, #4, #4
     b4c:	700b      	strb	r3, [r1, #0]
     b4e:	f7ff ff8b 	bl	a68 <mdelay>
	while (1) {
     b52:	e7e7      	b.n	b24 <__pi_syserror+0x14>
     b54:	00004d70 	andeq	r4, r0, r0, ror sp
     b58:	40022090 	mulmi	r2, r0, r0
     b5c:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     b60:	400220a0 	andmi	r2, r2, r0, lsr #1

00000b64 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     b64:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     b66:	4b0a      	ldr	r3, [pc, #40]	; (b90 <tci_run_delay_timer+0x2c>)
     b68:	881c      	ldrh	r4, [r3, #0]
     b6a:	4b0a      	ldr	r3, [pc, #40]	; (b94 <tci_run_delay_timer+0x30>)
     b6c:	8818      	ldrh	r0, [r3, #0]
     b6e:	4b0a      	ldr	r3, [pc, #40]	; (b98 <tci_run_delay_timer+0x34>)
     b70:	1b00      	subs	r0, r0, r4
     b72:	b284      	uxth	r4, r0
     b74:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b76:	f002 fe4b 	bl	3810 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     b7a:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b7c:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b7e:	4b07      	ldr	r3, [pc, #28]	; (b9c <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b80:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     b84:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	6018      	str	r0, [r3, #0]
	sti_tim;
     b8a:	4b05      	ldr	r3, [pc, #20]	; (ba0 <tci_run_delay_timer+0x3c>)
     b8c:	601a      	str	r2, [r3, #0]
}
     b8e:	bd10      	pop	{r4, pc}
     b90:	200006ae 	andcs	r0, r0, lr, lsr #13
     b94:	200006ac 	andcs	r0, r0, ip, lsr #13
     b98:	2000057c 	andcs	r0, r0, ip, ror r5
     b9c:	40092018 	andmi	r2, r9, r8, lsl r0
     ba0:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000ba4 <tci_run_auxiliary_timer>:
	cli_aux;
     ba4:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     ba6:	b510      	push	{r4, lr}
	cli_aux;
     ba8:	4c06      	ldr	r4, [pc, #24]	; (bc4 <tci_run_auxiliary_timer+0x20>)
     baa:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	f002 fe30 	bl	3810 <NOROM_AONRTCCurrent64BitValueGet>
     bb0:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     bb2:	4b05      	ldr	r3, [pc, #20]	; (bc8 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     bb8:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     bba:	6018      	str	r0, [r3, #0]
	sti_aux;
     bbc:	2301      	movs	r3, #1
     bbe:	6023      	str	r3, [r4, #0]
}
     bc0:	bd10      	pop	{r4, pc}
     bc2:	bf00      	nop
     bc4:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     bc8:	40092020 	andmi	r2, r9, r0, lsr #32

00000bcc <AONRTCIntHandler>:
void AONRTCIntHandler () {
     bcc:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bce:	4b3b      	ldr	r3, [pc, #236]	; (cbc <AONRTCIntHandler+0xf0>)
     bd0:	6818      	ldr	r0, [r3, #0]
     bd2:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     bd6:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     bda:	d542      	bpl.n	c62 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     bdc:	4b38      	ldr	r3, [pc, #224]	; (cc0 <AONRTCIntHandler+0xf4>)
     bde:	6819      	ldr	r1, [r3, #0]
     be0:	2900      	cmp	r1, #0
     be2:	d053      	beq.n	c8c <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     be4:	880a      	ldrh	r2, [r1, #0]
     be6:	2a00      	cmp	r2, #0
     be8:	d04e      	beq.n	c88 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     bea:	3a01      	subs	r2, #1
     bec:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     bee:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     bf0:	685c      	ldr	r4, [r3, #4]
     bf2:	b194      	cbz	r4, c1a <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     bf4:	8821      	ldrh	r1, [r4, #0]
     bf6:	b111      	cbz	r1, bfe <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     bf8:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     bfa:	3901      	subs	r1, #1
     bfc:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     bfe:	689c      	ldr	r4, [r3, #8]
     c00:	b15c      	cbz	r4, c1a <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     c02:	8821      	ldrh	r1, [r4, #0]
     c04:	b111      	cbz	r1, c0c <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     c06:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     c08:	3901      	subs	r1, #1
     c0a:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     c0c:	68d9      	ldr	r1, [r3, #12]
     c0e:	b121      	cbz	r1, c1a <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     c10:	880b      	ldrh	r3, [r1, #0]
     c12:	b113      	cbz	r3, c1a <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     c14:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     c16:	3b01      	subs	r3, #1
     c18:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     c1a:	4b2a      	ldr	r3, [pc, #168]	; (cc4 <AONRTCIntHandler+0xf8>)
     c1c:	7819      	ldrb	r1, [r3, #0]
     c1e:	0909      	lsrs	r1, r1, #4
     c20:	d047      	beq.n	cb2 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     c22:	7859      	ldrb	r1, [r3, #1]
     c24:	1c4a      	adds	r2, r1, #1
     c26:	b2d2      	uxtb	r2, r2
     c28:	705a      	strb	r2, [r3, #1]
     c2a:	b9d1      	cbnz	r1, c62 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     c2c:	781a      	ldrb	r2, [r3, #0]
     c2e:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     c32:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     c34:	d02c      	beq.n	c90 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     c36:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	bf42      	ittt	mi
     c3a:	2140      	movmi	r1, #64	; 0x40
     c3c:	4a22      	ldrmi	r2, [pc, #136]	; (cc8 <AONRTCIntHandler+0xfc>)
     c3e:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     c40:	781a      	ldrb	r2, [r3, #0]
     c42:	0692      	lsls	r2, r2, #26
     c44:	bf42      	ittt	mi
     c46:	2180      	movmi	r1, #128	; 0x80
     c48:	4a1f      	ldrmi	r2, [pc, #124]	; (cc8 <AONRTCIntHandler+0xfc>)
     c4a:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     c4c:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     c4e:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     c50:	781a      	ldrb	r2, [r3, #0]
     c52:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     c56:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     c58:	781a      	ldrb	r2, [r3, #0]
     c5a:	0752      	lsls	r2, r2, #29
     c5c:	d501      	bpl.n	c62 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     c5e:	22c8      	movs	r2, #200	; 0xc8
     c60:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     c62:	07c3      	lsls	r3, r0, #31
     c64:	d50f      	bpl.n	c86 <AONRTCIntHandler+0xba>
		cli_tim;
     c66:	2100      	movs	r1, #0
     c68:	4b18      	ldr	r3, [pc, #96]	; (ccc <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     c6a:	4a19      	ldr	r2, [pc, #100]	; (cd0 <AONRTCIntHandler+0x104>)
     c6c:	4819      	ldr	r0, [pc, #100]	; (cd4 <AONRTCIntHandler+0x108>)
		cli_tim;
     c6e:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     c70:	8803      	ldrh	r3, [r0, #0]
     c72:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     c74:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     c76:	4423      	add	r3, r4
		RISE_N_SHINE;
     c78:	4a12      	ldr	r2, [pc, #72]	; (cc4 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     c7a:	b29b      	uxth	r3, r3
     c7c:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     c7e:	7813      	ldrb	r3, [r2, #0]
     c80:	f043 0302 	orr.w	r3, r3, #2
     c84:	7013      	strb	r3, [r2, #0]
}
     c86:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     c88:	2201      	movs	r2, #1
     c8a:	e7b1      	b.n	bf0 <AONRTCIntHandler+0x24>
     c8c:	2201      	movs	r2, #1
     c8e:	e7c4      	b.n	c1a <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     c90:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c92:	bf42      	ittt	mi
     c94:	2140      	movmi	r1, #64	; 0x40
     c96:	4a10      	ldrmi	r2, [pc, #64]	; (cd8 <AONRTCIntHandler+0x10c>)
     c98:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     c9a:	781a      	ldrb	r2, [r3, #0]
     c9c:	0691      	lsls	r1, r2, #26
     c9e:	bf42      	ittt	mi
     ca0:	2180      	movmi	r1, #128	; 0x80
     ca2:	4a0d      	ldrmi	r2, [pc, #52]	; (cd8 <AONRTCIntHandler+0x10c>)
     ca4:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     ca6:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     ca8:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	f042 0208 	orr.w	r2, r2, #8
     cb0:	e7d1      	b.n	c56 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     cb2:	2a00      	cmp	r2, #0
     cb4:	d0d5      	beq.n	c62 <AONRTCIntHandler+0x96>
			cli_aux;
     cb6:	4b09      	ldr	r3, [pc, #36]	; (cdc <AONRTCIntHandler+0x110>)
     cb8:	6019      	str	r1, [r3, #0]
     cba:	e7d2      	b.n	c62 <AONRTCIntHandler+0x96>
     cbc:	40092004 	andmi	r2, r9, r4
     cc0:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
     cc4:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     cc8:	40022090 	mulmi	r2, r0, r0
     ccc:	43240280 			; <UNDEFINED> instruction: 0x43240280
     cd0:	2000057c 	andcs	r0, r0, ip, ror r5
     cd4:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     cd8:	400220a0 	andmi	r2, r2, r0, lsr #1
     cdc:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000ce0 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     ce2:	2600      	movs	r6, #0
     ce4:	4b0e      	ldr	r3, [pc, #56]	; (d20 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     ce6:	4f0f      	ldr	r7, [pc, #60]	; (d24 <tci_update_delay_ticks+0x44>)
	cli_tim;
     ce8:	601e      	str	r6, [r3, #0]
	if (setdel) {
     cea:	883d      	ldrh	r5, [r7, #0]
     cec:	b19d      	cbz	r5, d16 <tci_update_delay_ticks+0x36>
		if (force) {
     cee:	b1a0      	cbz	r0, d1a <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	4b0d      	ldr	r3, [pc, #52]	; (d28 <tci_update_delay_ticks+0x48>)
     cf2:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	f002 fd8c 	bl	3810 <NOROM_AONRTCCurrent64BitValueGet>
     cf8:	0d80      	lsrs	r0, r0, #22
     cfa:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cfe:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     d02:	b280      	uxth	r0, r0
     d04:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d06:	1b2c      	subs	r4, r5, r4
	return NO;
     d08:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d0a:	4b08      	ldr	r3, [pc, #32]	; (d2c <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     d0c:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d0e:	881a      	ldrh	r2, [r3, #0]
     d10:	4414      	add	r4, r2
     d12:	b2a4      	uxth	r4, r4
     d14:	801c      	strh	r4, [r3, #0]
}
     d16:	4628      	mov	r0, r5
     d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     d1a:	2501      	movs	r5, #1
     d1c:	601d      	str	r5, [r3, #0]
		return YES;
     d1e:	e7fa      	b.n	d16 <tci_update_delay_ticks+0x36>
     d20:	43240280 			; <UNDEFINED> instruction: 0x43240280
     d24:	2000057c 	andcs	r0, r0, ip, ror r5
     d28:	40092018 	andmi	r2, r9, r8, lsl r0
     d2c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00000d30 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     d32:	4e0f      	ldr	r6, [pc, #60]	; (d70 <__pi_uart_setrate+0x40>)
     d34:	4d0f      	ldr	r5, [pc, #60]	; (d74 <__pi_uart_setrate+0x44>)
     d36:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     d3a:	68db      	ldr	r3, [r3, #12]
     d3c:	4628      	mov	r0, r5
     d3e:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     d40:	2264      	movs	r2, #100	; 0x64
     d42:	6833      	ldr	r3, [r6, #0]
     d44:	4628      	mov	r0, r5
     d46:	4362      	muls	r2, r4
     d48:	685e      	ldr	r6, [r3, #4]
     d4a:	490b      	ldr	r1, [pc, #44]	; (d78 <__pi_uart_setrate+0x48>)
     d4c:	2360      	movs	r3, #96	; 0x60
     d4e:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	4a0a      	ldr	r2, [pc, #40]	; (d7c <__pi_uart_setrate+0x4c>)
}
     d52:	2001      	movs	r0, #1
     d54:	6813      	ldr	r3, [r2, #0]
     d56:	f043 0310 	orr.w	r3, r3, #16
     d5a:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	6853      	ldr	r3, [r2, #4]
     d5e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     d62:	f043 0301 	orr.w	r3, r3, #1
     d66:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <__pi_uart_setrate+0x50>)
     d6a:	801c      	strh	r4, [r3, #0]
}
     d6c:	bd70      	pop	{r4, r5, r6, pc}
     d6e:	bf00      	nop
     d70:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     d74:	40001000 	andmi	r1, r0, r0
     d78:	02dc6c00 	sbcseq	r6, ip, #0, 24
     d7c:	4000102c 	andmi	r1, r0, ip, lsr #32
     d80:	2000057e 	andcs	r0, r0, lr, ror r5

00000d84 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	4a08      	ldr	r2, [pc, #32]	; (da8 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     d86:	4909      	ldr	r1, [pc, #36]	; (dac <reinit_uart+0x28>)
     d88:	6813      	ldr	r3, [r2, #0]
     d8a:	f043 0310 	orr.w	r3, r3, #16
     d8e:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	2212      	movs	r2, #18
     d92:	4b07      	ldr	r3, [pc, #28]	; (db0 <reinit_uart+0x2c>)
     d94:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d96:	4a07      	ldr	r2, [pc, #28]	; (db4 <reinit_uart+0x30>)
     d98:	6813      	ldr	r3, [r2, #0]
     d9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     d9e:	6013      	str	r3, [r2, #0]
     da0:	4b05      	ldr	r3, [pc, #20]	; (db8 <reinit_uart+0x34>)
     da2:	8818      	ldrh	r0, [r3, #0]
     da4:	f7ff bfc4 	b.w	d30 <__pi_uart_setrate>
     da8:	4000102c 	andmi	r1, r0, ip, lsr #32
     dac:	2000069c 	mulcs	r0, ip, r6
     db0:	40001034 	andmi	r1, r0, r4, lsr r0
     db4:	40001030 	andmi	r1, r0, r0, lsr r0
     db8:	2000057e 	andcs	r0, r0, lr, ror r5

00000dbc <ioreq_uart_a>:
	switch (operation) {
     dbc:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     dbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     dc2:	460d      	mov	r5, r1
     dc4:	4614      	mov	r4, r2
     dc6:	2803      	cmp	r0, #3
     dc8:	d86e      	bhi.n	ea8 <ioreq_uart_a+0xec>
     dca:	e8df f000 	tbb	[pc, r0]
     dce:	5a471253 	bpl	11c5722 <__ccfg+0x11a577a>
				*buf++ = uart_a_read;
     dd2:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     dd6:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     dd8:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     ddc:	b11e      	cbz	r6, de6 <ioreq_uart_a+0x2a>
     dde:	f8d8 3000 	ldr.w	r3, [r8]
     de2:	06d8      	lsls	r0, r3, #27
     de4:	d5f5      	bpl.n	dd2 <ioreq_uart_a+0x16>
			if (len != operation) {
     de6:	42a6      	cmp	r6, r4
     de8:	d00a      	beq.n	e00 <ioreq_uart_a+0x44>
				return operation - len;
     dea:	1ba4      	subs	r4, r4, r6
}
     dec:	4620      	mov	r0, r4
     dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     df2:	4616      	mov	r6, r2
			uart_a_disable_int;
     df4:	4f2e      	ldr	r7, [pc, #184]	; (eb0 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     df6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; ec4 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     dfa:	f8df 90cc 	ldr.w	r9, [pc, #204]	; ec8 <ioreq_uart_a+0x10c>
     dfe:	e7ed      	b.n	ddc <ioreq_uart_a+0x20>
			uart_a_disable_int;
     e00:	683b      	ldr	r3, [r7, #0]
     e02:	2015      	movs	r0, #21
     e04:	695b      	ldr	r3, [r3, #20]
     e06:	4798      	blx	r3
			if (uart_a_char_available) {
     e08:	f8d8 3000 	ldr.w	r3, [r8]
     e0c:	06d9      	lsls	r1, r3, #27
     e0e:	d404      	bmi.n	e1a <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     e10:	683b      	ldr	r3, [r7, #0]
     e12:	2015      	movs	r0, #21
     e14:	691b      	ldr	r3, [r3, #16]
     e16:	4798      	blx	r3
				goto Redo_rx;
     e18:	e7e0      	b.n	ddc <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1a:	4a26      	ldr	r2, [pc, #152]	; (eb4 <ioreq_uart_a+0xf8>)
     e1c:	7993      	ldrb	r3, [r2, #6]
     e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     e22:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e26:	7193      	strb	r3, [r2, #6]
			return -2;
     e28:	e7e0      	b.n	dec <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     e2a:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     e2e:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     e30:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     e34:	b11e      	cbz	r6, e3e <ioreq_uart_a+0x82>
     e36:	f8d8 3000 	ldr.w	r3, [r8]
     e3a:	069a      	lsls	r2, r3, #26
     e3c:	d5f5      	bpl.n	e2a <ioreq_uart_a+0x6e>
			if (len != operation) {
     e3e:	42a6      	cmp	r6, r4
     e40:	d1d3      	bne.n	dea <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     e42:	683b      	ldr	r3, [r7, #0]
     e44:	2015      	movs	r0, #21
     e46:	695b      	ldr	r3, [r3, #20]
     e48:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     e4a:	f8d8 3000 	ldr.w	r3, [r8]
     e4e:	069b      	lsls	r3, r3, #26
     e50:	d40b      	bmi.n	e6a <ioreq_uart_a+0xae>
				uart_a_enable_int;
     e52:	683b      	ldr	r3, [r7, #0]
     e54:	2015      	movs	r0, #21
     e56:	691b      	ldr	r3, [r3, #16]
     e58:	4798      	blx	r3
				goto Redo_tx;
     e5a:	e7eb      	b.n	e34 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     e5c:	4616      	mov	r6, r2
			uart_a_disable_int;
     e5e:	4f14      	ldr	r7, [pc, #80]	; (eb0 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     e60:	f8df 8060 	ldr.w	r8, [pc, #96]	; ec4 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     e64:	f8df 9060 	ldr.w	r9, [pc, #96]	; ec8 <ioreq_uart_a+0x10c>
     e68:	e7e4      	b.n	e34 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6a:	4a12      	ldr	r2, [pc, #72]	; (eb4 <ioreq_uart_a+0xf8>)
     e6c:	7993      	ldrb	r3, [r2, #6]
     e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     e72:	e7d6      	b.n	e22 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     e74:	4b0e      	ldr	r3, [pc, #56]	; (eb0 <ioreq_uart_a+0xf4>)
     e76:	2015      	movs	r0, #21
     e78:	681b      	ldr	r3, [r3, #0]
			return 0;
     e7a:	2400      	movs	r4, #0
			uart_a_enable_int;
     e7c:	691b      	ldr	r3, [r3, #16]
     e7e:	4798      	blx	r3
			return 0;
     e80:	e7b4      	b.n	dec <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     e82:	2a01      	cmp	r2, #1
     e84:	d109      	bne.n	e9a <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     e86:	490b      	ldr	r1, [pc, #44]	; (eb4 <ioreq_uart_a+0xf8>)
     e88:	8828      	ldrh	r0, [r5, #0]
     e8a:	f7ff ff51 	bl	d30 <__pi_uart_setrate>
     e8e:	2800      	cmp	r0, #0
     e90:	d1ac      	bne.n	dec <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     e92:	2003      	movs	r0, #3
     e94:	4908      	ldr	r1, [pc, #32]	; (eb8 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     e96:	f7ff fe3b 	bl	b10 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     e9a:	2a02      	cmp	r2, #2
     e9c:	d104      	bne.n	ea8 <ioreq_uart_a+0xec>
	return urates [0];
     e9e:	4b07      	ldr	r3, [pc, #28]	; (ebc <ioreq_uart_a+0x100>)
				return 1;
     ea0:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea2:	881b      	ldrh	r3, [r3, #0]
     ea4:	800b      	strh	r3, [r1, #0]
				return 1;
     ea6:	e7a1      	b.n	dec <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     ea8:	2002      	movs	r0, #2
     eaa:	4905      	ldr	r1, [pc, #20]	; (ec0 <ioreq_uart_a+0x104>)
     eac:	e7f3      	b.n	e96 <ioreq_uart_a+0xda>
     eae:	bf00      	nop
     eb0:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     eb4:	2000069c 	mulcs	r0, ip, r6
     eb8:	00004d7f 	andeq	r4, r0, pc, ror sp
     ebc:	2000057e 	andcs	r0, r0, lr, ror r5
     ec0:	00004d83 	andeq	r4, r0, r3, lsl #27
     ec4:	40001018 	andmi	r1, r0, r8, lsl r0
     ec8:	40001000 	andmi	r1, r0, r0

00000ecc <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     ed0:	b530      	push	{r4, r5, lr}
     ed2:	4b29      	ldr	r3, [pc, #164]	; (f78 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	4c29      	ldr	r4, [pc, #164]	; (f7c <UART0IntHandler+0xb0>)
     ed6:	601a      	str	r2, [r3, #0]
     ed8:	6822      	ldr	r2, [r4, #0]
     eda:	06d5      	lsls	r5, r2, #27
     edc:	d423      	bmi.n	f26 <UART0IntHandler+0x5a>
     ede:	4b28      	ldr	r3, [pc, #160]	; (f80 <UART0IntHandler+0xb4>)
     ee0:	799a      	ldrb	r2, [r3, #6]
     ee2:	0610      	lsls	r0, r2, #24
     ee4:	d51f      	bpl.n	f26 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee6:	799a      	ldrb	r2, [r3, #6]
     ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     eec:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     eee:	4a25      	ldr	r2, [pc, #148]	; (f84 <UART0IntHandler+0xb8>)
     ef0:	7813      	ldrb	r3, [r2, #0]
     ef2:	f043 0302 	orr.w	r3, r3, #2
     ef6:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     ef8:	4b23      	ldr	r3, [pc, #140]	; (f88 <UART0IntHandler+0xbc>)
     efa:	681a      	ldr	r2, [r3, #0]
     efc:	b19a      	cbz	r2, f26 <UART0IntHandler+0x5a>
     efe:	4610      	mov	r0, r2
     f00:	2300      	movs	r3, #0
     f02:	f830 1b10 	ldrh.w	r1, [r0], #16
     f06:	f001 0107 	and.w	r1, r1, #7
     f0a:	4299      	cmp	r1, r3
     f0c:	dd09      	ble.n	f22 <UART0IntHandler+0x56>
     f0e:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     f12:	3301      	adds	r3, #1
     f14:	f515 7f81 	cmn.w	r5, #258	; 0x102
     f18:	d1f7      	bne.n	f0a <UART0IntHandler+0x3e>
     f1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f1e:	889b      	ldrh	r3, [r3, #4]
     f20:	8013      	strh	r3, [r2, #0]
     f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f24:	e7ea      	b.n	efc <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f26:	6823      	ldr	r3, [r4, #0]
     f28:	0699      	lsls	r1, r3, #26
     f2a:	d424      	bmi.n	f76 <UART0IntHandler+0xaa>
     f2c:	4b14      	ldr	r3, [pc, #80]	; (f80 <UART0IntHandler+0xb4>)
     f2e:	799a      	ldrb	r2, [r3, #6]
     f30:	0652      	lsls	r2, r2, #25
     f32:	d520      	bpl.n	f76 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     f34:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	799a      	ldrb	r2, [r3, #6]
     f3a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     f3e:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     f40:	4a10      	ldr	r2, [pc, #64]	; (f84 <UART0IntHandler+0xb8>)
     f42:	7813      	ldrb	r3, [r2, #0]
     f44:	f043 0302 	orr.w	r3, r3, #2
     f48:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     f4a:	4b0f      	ldr	r3, [pc, #60]	; (f88 <UART0IntHandler+0xbc>)
     f4c:	681a      	ldr	r2, [r3, #0]
     f4e:	b192      	cbz	r2, f76 <UART0IntHandler+0xaa>
     f50:	4610      	mov	r0, r2
     f52:	2300      	movs	r3, #0
     f54:	f830 1b10 	ldrh.w	r1, [r0], #16
     f58:	f001 0107 	and.w	r1, r1, #7
     f5c:	4299      	cmp	r1, r3
     f5e:	dd08      	ble.n	f72 <UART0IntHandler+0xa6>
     f60:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     f64:	3301      	adds	r3, #1
     f66:	42a5      	cmp	r5, r4
     f68:	d1f8      	bne.n	f5c <UART0IntHandler+0x90>
     f6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f6e:	889b      	ldrh	r3, [r3, #4]
     f70:	8013      	strh	r3, [r2, #0]
     f72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f74:	e7eb      	b.n	f4e <UART0IntHandler+0x82>
	}

	RTNI;
}
     f76:	bd30      	pop	{r4, r5, pc}
     f78:	40001044 	andmi	r1, r0, r4, asr #32
     f7c:	40001018 	andmi	r1, r0, r8, lsl r0
     f80:	2000069c 	mulcs	r0, ip, r6
     f84:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     f88:	20000580 	andcs	r0, r0, r0, lsl #11

00000f8c <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     f8c:	b570      	push	{r4, r5, r6, lr}
     f8e:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     f92:	4e0c      	ldr	r6, [pc, #48]	; (fc4 <__buttons_setirq+0x38>)
     f94:	4d0c      	ldr	r5, [pc, #48]	; (fc8 <__buttons_setirq+0x3c>)
     f96:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     f98:	4c0c      	ldr	r4, [pc, #48]	; (fcc <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     f9a:	0a1b      	lsrs	r3, r3, #8
     f9c:	fa01 f203 	lsl.w	r2, r1, r3
     fa0:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa2:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa6:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     faa:	0a1b      	lsrs	r3, r3, #8
     fac:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fae:	01db      	lsls	r3, r3, #7
     fb0:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     fb4:	4322      	orrs	r2, r4
     fb6:	4323      	orrs	r3, r4
     fb8:	6010      	str	r0, [r2, #0]
     fba:	6029      	str	r1, [r5, #0]
     fbc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     fbe:	b662      	cpsie	i
			val;
	}
	sti;
}
     fc0:	bd70      	pop	{r4, r5, r6, pc}
     fc2:	bf00      	nop
     fc4:	00004f1a 	andeq	r4, r0, sl, lsl pc
     fc8:	400220e0 	andmi	r2, r2, r0, ror #1
     fcc:	42000048 	andmi	r0, r0, #72	; 0x48

00000fd0 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     fd2:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	2200      	movs	r2, #0
     fd6:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	4f09      	ldr	r7, [pc, #36]	; (1000 <__pinlist_setirq+0x30>)
     fda:	4c0a      	ldr	r4, [pc, #40]	; (1004 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	490a      	ldr	r1, [pc, #40]	; (1008 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fde:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     fe6:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fea:	01db      	lsls	r3, r3, #7
     fec:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     ff0:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     ff2:	2a04      	cmp	r2, #4
     ff4:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     ff6:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	d1f1      	bne.n	fde <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     ffa:	b662      	cpsie	i
			val;
	}
	sti;
}
     ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ffe:	bf00      	nop
    1000:	00004f15 	andeq	r4, r0, r5, lsl pc
    1004:	400220e0 	andmi	r2, r2, r0, ror #1
    1008:	42000048 	andmi	r0, r0, #72	; 0x48

0000100c <GPIOIntHandler>:
void GPIOIntHandler () {
    100c:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    100e:	4c23      	ldr	r4, [pc, #140]	; (109c <GPIOIntHandler+0x90>)
    1010:	6822      	ldr	r2, [r4, #0]
    1012:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    1016:	d01e      	beq.n	1056 <GPIOIntHandler+0x4a>
	buttons_disable ();
    1018:	2000      	movs	r0, #0
    101a:	f7ff ffb7 	bl	f8c <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    101e:	4b20      	ldr	r3, [pc, #128]	; (10a0 <GPIOIntHandler+0x94>)
    1020:	4d20      	ldr	r5, [pc, #128]	; (10a4 <GPIOIntHandler+0x98>)
    1022:	681a      	ldr	r2, [r3, #0]
    1024:	b192      	cbz	r2, 104c <GPIOIntHandler+0x40>
    1026:	4610      	mov	r0, r2
    1028:	2300      	movs	r3, #0
    102a:	f830 1b10 	ldrh.w	r1, [r0], #16
    102e:	f001 0107 	and.w	r1, r1, #7
    1032:	4299      	cmp	r1, r3
    1034:	dd08      	ble.n	1048 <GPIOIntHandler+0x3c>
    1036:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    103a:	3301      	adds	r3, #1
    103c:	42ae      	cmp	r6, r5
    103e:	d1f8      	bne.n	1032 <GPIOIntHandler+0x26>
    1040:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1044:	889b      	ldrh	r3, [r3, #4]
    1046:	8013      	strh	r3, [r2, #0]
    1048:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    104a:	e7eb      	b.n	1024 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    104c:	4a16      	ldr	r2, [pc, #88]	; (10a8 <GPIOIntHandler+0x9c>)
    104e:	7813      	ldrb	r3, [r2, #0]
    1050:	f043 0302 	orr.w	r3, r3, #2
    1054:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    1056:	6823      	ldr	r3, [r4, #0]
    1058:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    105c:	d01d      	beq.n	109a <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    105e:	4b10      	ldr	r3, [pc, #64]	; (10a0 <GPIOIntHandler+0x94>)
    1060:	4c12      	ldr	r4, [pc, #72]	; (10ac <GPIOIntHandler+0xa0>)
    1062:	6818      	ldr	r0, [r3, #0]
    1064:	b190      	cbz	r0, 108c <GPIOIntHandler+0x80>
    1066:	4601      	mov	r1, r0
    1068:	2300      	movs	r3, #0
    106a:	f831 2b10 	ldrh.w	r2, [r1], #16
    106e:	f002 0207 	and.w	r2, r2, #7
    1072:	429a      	cmp	r2, r3
    1074:	dd08      	ble.n	1088 <GPIOIntHandler+0x7c>
    1076:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    107a:	3301      	adds	r3, #1
    107c:	42a5      	cmp	r5, r4
    107e:	d1f8      	bne.n	1072 <GPIOIntHandler+0x66>
    1080:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1084:	889b      	ldrh	r3, [r3, #4]
    1086:	8003      	strh	r3, [r0, #0]
    1088:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    108a:	e7eb      	b.n	1064 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    108c:	f7ff ffa0 	bl	fd0 <__pinlist_setirq>
	RISE_N_SHINE;
    1090:	4a05      	ldr	r2, [pc, #20]	; (10a8 <GPIOIntHandler+0x9c>)
    1092:	7813      	ldrb	r3, [r2, #0]
    1094:	f043 0302 	orr.w	r3, r3, #2
    1098:	7013      	strb	r3, [r2, #0]
}
    109a:	bd70      	pop	{r4, r5, r6, pc}
    109c:	400220e0 	andmi	r2, r2, r0, ror #1
    10a0:	20000580 	andcs	r0, r0, r0, lsl #11
    10a4:	00004f1a 	andeq	r4, r0, sl, lsl pc
    10a8:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    10ac:	00004f15 	andeq	r4, r0, r5, lsl pc

000010b0 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    10b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	4c58      	ldr	r4, [pc, #352]	; (1218 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b6:	2004      	movs	r0, #4
    10b8:	f7ff fcec 	bl	a94 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	6823      	ldr	r3, [r4, #0]
    10be:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    10c2:	69db      	ldr	r3, [r3, #28]
    10c4:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c6:	6823      	ldr	r3, [r4, #0]
    10c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    10cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    10ce:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	6823      	ldr	r3, [r4, #0]
    10d2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    10d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    10d8:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10da:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	2600      	movs	r6, #0
    10de:	4c4f      	ldr	r4, [pc, #316]	; (121c <system_init+0x16c>)
    10e0:	4f4f      	ldr	r7, [pc, #316]	; (1220 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e2:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1260 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e6:	f8df e17c 	ldr.w	lr, [pc, #380]	; 1264 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ea:	f8df 8140 	ldr.w	r8, [pc, #320]	; 122c <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10ee:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1224 <system_init+0x174>
    10f2:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    10fa:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10fe:	0091      	lsls	r1, r2, #2
    1100:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    1104:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    1108:	ea05 0a0c 	and.w	sl, r5, ip
    110c:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    1110:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1112:	bf44      	itt	mi
    1114:	ea41 010e 	orrmi.w	r1, r1, lr
    1118:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    111a:	fa03 f202 	lsl.w	r2, r3, r2
    111e:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	bf4c      	ite	mi
    1122:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1126:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112a:	2e11      	cmp	r6, #17
    112c:	d1e2      	bne.n	10f4 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    112e:	2540      	movs	r5, #64	; 0x40
    1130:	2680      	movs	r6, #128	; 0x80
    1132:	4b3c      	ldr	r3, [pc, #240]	; (1224 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    1134:	493c      	ldr	r1, [pc, #240]	; (1228 <system_init+0x178>)
    1136:	601d      	str	r5, [r3, #0]
    1138:	601e      	str	r6, [r3, #0]
    113a:	780b      	ldrb	r3, [r1, #0]
    113c:	780b      	ldrb	r3, [r1, #0]
    113e:	20c8      	movs	r0, #200	; 0xc8
    1140:	f36f 1307 	bfc	r3, #4, #4
    1144:	700b      	strb	r3, [r1, #0]
    1146:	f7ff fc8f 	bl	a68 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    114a:	4b38      	ldr	r3, [pc, #224]	; (122c <system_init+0x17c>)
    114c:	20c8      	movs	r0, #200	; 0xc8
    114e:	601d      	str	r5, [r3, #0]
    1150:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1152:	2601      	movs	r6, #1
	all_leds_blink;
    1154:	780b      	ldrb	r3, [r1, #0]
    1156:	780b      	ldrb	r3, [r1, #0]
    1158:	f36f 1307 	bfc	r3, #4, #4
    115c:	700b      	strb	r3, [r1, #0]
    115e:	f7ff fc83 	bl	a68 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    1162:	4b33      	ldr	r3, [pc, #204]	; (1230 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	4a33      	ldr	r2, [pc, #204]	; (1234 <system_init+0x184>)
    1166:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	4b33      	ldr	r3, [pc, #204]	; (1238 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    116a:	4d34      	ldr	r5, [pc, #208]	; (123c <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    116c:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    116e:	4b34      	ldr	r3, [pc, #208]	; (1240 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    1170:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1172:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    1174:	682b      	ldr	r3, [r5, #0]
    1176:	691b      	ldr	r3, [r3, #16]
    1178:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    117a:	f000 fbf9 	bl	1970 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    117e:	682b      	ldr	r3, [r5, #0]
    1180:	2010      	movs	r0, #16
    1182:	691b      	ldr	r3, [r3, #16]
    1184:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1186:	2002      	movs	r0, #2
    1188:	f7ff fc84 	bl	a94 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	68ab      	ldr	r3, [r5, #8]
    118e:	f44f 7000 	mov.w	r0, #512	; 0x200
    1192:	69db      	ldr	r3, [r3, #28]
    1194:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1196:	68ab      	ldr	r3, [r5, #8]
    1198:	f44f 7000 	mov.w	r0, #512	; 0x200
    119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    119e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	68ab      	ldr	r3, [r5, #8]
    11a2:	f44f 7000 	mov.w	r0, #512	; 0x200
    11a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11a8:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    11aa:	2260      	movs	r2, #96	; 0x60
    11ac:	4b25      	ldr	r3, [pc, #148]	; (1244 <system_init+0x194>)
    11ae:	6026      	str	r6, [r4, #0]
    11b0:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    11b2:	f7ff fde7 	bl	d84 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    11b6:	f001 f977 	bl	24a8 <ee_open>
    11ba:	f001 f97f 	bl	24bc <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11be:	f003 fa49 	bl	4654 <NOROM_SysCtrlResetSourceGet>
    11c2:	2808      	cmp	r0, #8
    11c4:	d11a      	bne.n	11fc <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    11c6:	4b20      	ldr	r3, [pc, #128]	; (1248 <system_init+0x198>)
    11c8:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    11ce:	3b04      	subs	r3, #4
    11d0:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    11d6:	3324      	adds	r3, #36	; 0x24
    11d8:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    11da:	2000      	movs	r0, #0
    11dc:	f7ff fc28 	bl	a30 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	4a1a      	ldr	r2, [pc, #104]	; (124c <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    11e2:	2015      	movs	r0, #21
    11e4:	6813      	ldr	r3, [r2, #0]
    11e6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    11ea:	6013      	str	r3, [r2, #0]
    11ec:	4b13      	ldr	r3, [pc, #76]	; (123c <system_init+0x18c>)
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	691b      	ldr	r3, [r3, #16]
    11f2:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    11f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    11f8:	f7ff bcd4 	b.w	ba4 <tci_run_auxiliary_timer>
		diag ("");
    11fc:	4814      	ldr	r0, [pc, #80]	; (1250 <system_init+0x1a0>)
    11fe:	f000 fca5 	bl	1b4c <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1202:	4814      	ldr	r0, [pc, #80]	; (1254 <system_init+0x1a4>)
    1204:	f000 fca2 	bl	1b4c <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	4913      	ldr	r1, [pc, #76]	; (1258 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    120a:	4814      	ldr	r0, [pc, #80]	; (125c <system_init+0x1ac>)
    120c:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    1210:	b289      	uxth	r1, r1
    1212:	f000 fc9b 	bl	1b4c <diag>
    1216:	e7e0      	b.n	11da <system_init+0x12a>
    1218:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    121c:	60082028 	andvs	r2, r8, r8, lsr #32
    1220:	00004dfc 	strdeq	r4, [r0], -ip
    1224:	40022090 	mulmi	r2, r0, r0
    1228:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    122c:	400220a0 	andmi	r2, r2, r0, lsr #1
    1230:	40092024 	andmi	r2, r9, r4, lsr #32
    1234:	00050003 	andeq	r0, r5, r3
    1238:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    123c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1240:	40092000 	andmi	r2, r9, r0
    1244:	2000057e 	andcs	r0, r0, lr, ror r5
    1248:	4009400c 	andmi	r4, r9, ip
    124c:	40001038 	andmi	r1, r0, r8, lsr r0
    1250:	000048c6 	andeq	r4, r0, r6, asr #17
    1254:	00004d87 	andeq	r4, r0, r7, lsl #27
    1258:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    125c:	00004dd3 	ldrdeq	r4, [r0], -r3
    1260:	7f077f3f 	svcvc	0x00077f3f
    1264:	42441a00 	submi	r1, r4, #0, 20

00001268 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	2803      	cmp	r0, #3
    126a:	4603      	mov	r3, r0
    126c:	bf28      	it	cs
    126e:	2303      	movcs	r3, #3
    1270:	4a05      	ldr	r2, [pc, #20]	; (1288 <setpowermode+0x20>)
    1272:	b2db      	uxtb	r3, r3
    1274:	2801      	cmp	r0, #1
    1276:	7093      	strb	r3, [r2, #2]
    1278:	d904      	bls.n	1284 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    127a:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    127c:	f011 0f01 	tst.w	r1, #1
    1280:	bf18      	it	ne
    1282:	2301      	movne	r3, #1
    1284:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    1286:	4770      	bx	lr
    1288:	200006b0 			; <UNDEFINED> instruction: 0x200006b0

0000128c <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    128c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    1290:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1292:	4b79      	ldr	r3, [pc, #484]	; (1478 <__pi_release+0x1ec>)
    1294:	af00      	add	r7, sp, #0
    1296:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    129a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    129e:	681a      	ldr	r2, [r3, #0]
    12a0:	4b76      	ldr	r3, [pc, #472]	; (147c <__pi_release+0x1f0>)
    12a2:	429a      	cmp	r2, r3
    12a4:	d127      	bne.n	12f6 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    12a6:	4e76      	ldr	r6, [pc, #472]	; (1480 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    12a8:	2100      	movs	r1, #0
    12aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    12ae:	f000 f9ed 	bl	168c <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    12b2:	4a74      	ldr	r2, [pc, #464]	; (1484 <__pi_release+0x1f8>)
    12b4:	4b74      	ldr	r3, [pc, #464]	; (1488 <__pi_release+0x1fc>)
    12b6:	6812      	ldr	r2, [r2, #0]
    12b8:	601a      	str	r2, [r3, #0]
    12ba:	681a      	ldr	r2, [r3, #0]
    12bc:	b9fa      	cbnz	r2, 12fe <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    12be:	4c73      	ldr	r4, [pc, #460]	; (148c <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    12c2:	4d73      	ldr	r5, [pc, #460]	; (1490 <__pi_release+0x204>)
    12c4:	782b      	ldrb	r3, [r5, #0]
    12c6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    12ca:	0798      	lsls	r0, r3, #30
    12cc:	607a      	str	r2, [r7, #4]
    12ce:	f100 80cd 	bmi.w	146c <__pi_release+0x1e0>
	system_event_count ++;
    12d2:	4a70      	ldr	r2, [pc, #448]	; (1494 <__pi_release+0x208>)
    12d4:	6813      	ldr	r3, [r2, #0]
    12d6:	3301      	adds	r3, #1
    12d8:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    12da:	78ea      	ldrb	r2, [r5, #3]
    12dc:	2a01      	cmp	r2, #1
    12de:	b2d3      	uxtb	r3, r2
    12e0:	d017      	beq.n	1312 <__pi_release+0x86>
    12e2:	2b02      	cmp	r3, #2
    12e4:	d031      	beq.n	134a <__pi_release+0xbe>
    12e6:	2b00      	cmp	r3, #0
    12e8:	f040 8095 	bne.w	1416 <__pi_release+0x18a>
			__WFI ();
    12ec:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    12ee:	b662      	cpsie	i
    12f0:	bf00      	nop
    12f2:	bf00      	nop
    12f4:	e7e4      	b.n	12c0 <__pi_release+0x34>
	check_stack_overflow;
    12f6:	200b      	movs	r0, #11
    12f8:	4967      	ldr	r1, [pc, #412]	; (1498 <__pi_release+0x20c>)
    12fa:	f7ff fc09 	bl	b10 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    12fe:	6851      	ldr	r1, [r2, #4]
    1300:	b129      	cbz	r1, 130e <__pi_release+0x82>
    1302:	8810      	ldrh	r0, [r2, #0]
    1304:	0704      	lsls	r4, r0, #28
    1306:	d102      	bne.n	130e <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	0900      	lsrs	r0, r0, #4
    130a:	4788      	blx	r1
			goto Redo;
    130c:	e7cc      	b.n	12a8 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    130e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1310:	e7d2      	b.n	12b8 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1312:	4a62      	ldr	r2, [pc, #392]	; (149c <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1316:	6813      	ldr	r3, [r2, #0]
    1318:	f043 0301 	orr.w	r3, r3, #1
    131c:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    131e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1322:	f043 0303 	orr.w	r3, r3, #3
    1326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    132a:	4b5d      	ldr	r3, [pc, #372]	; (14a0 <__pi_release+0x214>)
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	699b      	ldr	r3, [r3, #24]
    1330:	4798      	blx	r3
    1332:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	6823      	ldr	r3, [r4, #0]
    1336:	f043 0304 	orr.w	r3, r3, #4
    133a:	6023      	str	r3, [r4, #0]
			__WFI ();
    133c:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    133e:	6823      	ldr	r3, [r4, #0]
    1340:	f023 0304 	bic.w	r3, r3, #4
    1344:	6023      	str	r3, [r4, #0]
    1346:	6833      	ldr	r3, [r6, #0]
}
    1348:	e7d1      	b.n	12ee <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134a:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    134e:	687a      	ldr	r2, [r7, #4]
    1350:	4b54      	ldr	r3, [pc, #336]	; (14a4 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1352:	f8df b188 	ldr.w	fp, [pc, #392]	; 14dc <__pi_release+0x250>
    1356:	601a      	str	r2, [r3, #0]
    1358:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135a:	f8df a144 	ldr.w	sl, [pc, #324]	; 14a0 <__pi_release+0x214>
    135e:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1362:	6833      	ldr	r3, [r6, #0]
    1364:	4b50      	ldr	r3, [pc, #320]	; (14a8 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1366:	f8df 9178 	ldr.w	r9, [pc, #376]	; 14e0 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136a:	f8c3 8000 	str.w	r8, [r3]
    136e:	6868      	ldr	r0, [r5, #4]
    1370:	f8da 3000 	ldr.w	r3, [sl]
    1374:	f040 0020 	orr.w	r0, r0, #32
    1378:	699b      	ldr	r3, [r3, #24]
    137a:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	4b4b      	ldr	r3, [pc, #300]	; (14ac <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    137e:	2103      	movs	r1, #3
    1380:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	f8d9 3000 	ldr.w	r3, [r9]
    1388:	4849      	ldr	r0, [pc, #292]	; (14b0 <__pi_release+0x224>)
    138a:	f023 0303 	bic.w	r3, r3, #3
    138e:	f8c9 3000 	str.w	r3, [r9]
    1392:	4b48      	ldr	r3, [pc, #288]	; (14b4 <__pi_release+0x228>)
    1394:	681a      	ldr	r2, [r3, #0]
    1396:	6852      	ldr	r2, [r2, #4]
    1398:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    139a:	6878      	ldr	r0, [r7, #4]
    139c:	f003 f81a 	bl	43d4 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    13a0:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a2:	6822      	ldr	r2, [r4, #0]
    13a4:	f042 0204 	orr.w	r2, r2, #4
    13a8:	6022      	str	r2, [r4, #0]
			__WFI ();
    13aa:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13ae:	4b41      	ldr	r3, [pc, #260]	; (14b4 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13b0:	f022 0204 	bic.w	r2, r2, #4
    13b4:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	4641      	mov	r1, r8
    13ba:	685b      	ldr	r3, [r3, #4]
    13bc:	483c      	ldr	r0, [pc, #240]	; (14b0 <__pi_release+0x224>)
    13be:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	4a3c      	ldr	r2, [pc, #240]	; (14b8 <__pi_release+0x22c>)
    13c6:	f043 0303 	orr.w	r3, r3, #3
    13ca:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13ce:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13d2:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    13d4:	0699      	lsls	r1, r3, #26
    13d6:	d5fc      	bpl.n	13d2 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	f8da 3000 	ldr.w	r3, [sl]
    13dc:	6868      	ldr	r0, [r5, #4]
    13de:	695b      	ldr	r3, [r3, #20]
    13e0:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e2:	4d2f      	ldr	r5, [pc, #188]	; (14a0 <__pi_release+0x214>)
    13e4:	4b2a      	ldr	r3, [pc, #168]	; (1490 <__pi_release+0x204>)
    13e6:	6858      	ldr	r0, [r3, #4]
    13e8:	682b      	ldr	r3, [r5, #0]
    13ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    13ec:	4798      	blx	r3
    13ee:	2801      	cmp	r0, #1
    13f0:	d1f8      	bne.n	13e4 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13f2:	4b2d      	ldr	r3, [pc, #180]	; (14a8 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	4a2d      	ldr	r2, [pc, #180]	; (14ac <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    13f6:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f8:	2300      	movs	r3, #0
    13fa:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	4b29      	ldr	r3, [pc, #164]	; (14a4 <__pi_release+0x218>)
    13fe:	6018      	str	r0, [r3, #0]
    1400:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    1402:	f003 f8f7 	bl	45f4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    1406:	f7ff fcbd 	bl	d84 <reinit_uart>
    140a:	4a2c      	ldr	r2, [pc, #176]	; (14bc <__pi_release+0x230>)
    140c:	6813      	ldr	r3, [r2, #0]
    140e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    1412:	6013      	str	r3, [r2, #0]
}
    1414:	e76b      	b.n	12ee <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1416:	4b2a      	ldr	r3, [pc, #168]	; (14c0 <__pi_release+0x234>)
    1418:	2001      	movs	r0, #1
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	68db      	ldr	r3, [r3, #12]
    141e:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	4a28      	ldr	r2, [pc, #160]	; (14c4 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1422:	4929      	ldr	r1, [pc, #164]	; (14c8 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1424:	6813      	ldr	r3, [r2, #0]
    1426:	f023 0301 	bic.w	r3, r3, #1
    142a:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	4b27      	ldr	r3, [pc, #156]	; (14cc <__pi_release+0x240>)
    142e:	681a      	ldr	r2, [r3, #0]
    1430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1434:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1436:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    143a:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	604a      	str	r2, [r1, #4]
    143e:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	687a      	ldr	r2, [r7, #4]
    1442:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	687a      	ldr	r2, [r7, #4]
    1446:	4b22      	ldr	r3, [pc, #136]	; (14d0 <__pi_release+0x244>)
    1448:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    144a:	2201      	movs	r2, #1
    144c:	4b21      	ldr	r3, [pc, #132]	; (14d4 <__pi_release+0x248>)
    144e:	601a      	str	r2, [r3, #0]
    1450:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1452:	4a19      	ldr	r2, [pc, #100]	; (14b8 <__pi_release+0x22c>)
    1454:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1456:	069b      	lsls	r3, r3, #26
    1458:	d4fc      	bmi.n	1454 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145a:	2201      	movs	r2, #1
    145c:	4b1e      	ldr	r3, [pc, #120]	; (14d8 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    145e:	2037      	movs	r0, #55	; 0x37
    1460:	601a      	str	r2, [r3, #0]
    1462:	4b0f      	ldr	r3, [pc, #60]	; (14a0 <__pi_release+0x214>)
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	699b      	ldr	r3, [r3, #24]
    1468:	4798      	blx	r3
			goto DeepSleep;
    146a:	e763      	b.n	1334 <__pi_release+0xa8>
	__SLEEP;
    146c:	782b      	ldrb	r3, [r5, #0]
    146e:	f36f 0341 	bfc	r3, #1, #1
    1472:	702b      	strb	r3, [r5, #0]
    1474:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    1476:	e717      	b.n	12a8 <__pi_release+0x1c>
    1478:	20005000 	andcs	r5, r0, r0
    147c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1480:	4009202c 	andmi	r2, r9, ip, lsr #32
    1484:	20000580 	andcs	r0, r0, r0, lsl #11
    1488:	200006cc 	andcs	r0, r0, ip, asr #13
    148c:	e000ed10 	and	lr, r0, r0, lsl sp
    1490:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    1494:	200006a4 	andcs	r0, r0, r4, lsr #13
    1498:	00004dea 	andeq	r4, r0, sl, ror #27
    149c:	4008218c 	andmi	r2, r8, ip, lsl #3
    14a0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    14a4:	4009400c 	andmi	r4, r9, ip
    14a8:	60082028 	andvs	r2, r8, r8, lsr #32
    14ac:	43040180 	movwmi	r0, #16768	; 0x4180
    14b0:	40034000 	andmi	r4, r3, r0
    14b4:	100001d8 	ldrdne	r0, [r0], -r8
    14b8:	40091014 	andmi	r1, r9, r4, lsl r0
    14bc:	40001038 	andmi	r1, r0, r8, lsr r0
    14c0:	100001a0 	andne	r0, r0, r0, lsr #3
    14c4:	40091010 	andmi	r1, r9, r0, lsl r0
    14c8:	40093000 	andmi	r3, r9, r0
    14cc:	40091040 	andmi	r1, r9, r0, asr #32
    14d0:	43220420 			; <UNDEFINED> instruction: 0x43220420
    14d4:	40091018 	andmi	r1, r9, r8, lsl r0
    14d8:	43040188 	movwmi	r0, #16776	; 0x4188
    14dc:	43220200 			; <UNDEFINED> instruction: 0x43220200
    14e0:	40082224 	andmi	r2, r8, r4, lsr #4

000014e4 <halt>:
	cli_tim;
    14e4:	2400      	movs	r4, #0
void halt (void) {
    14e6:	b508      	push	{r3, lr}
	cli_tim;
    14e8:	4b07      	ldr	r3, [pc, #28]	; (1508 <halt+0x24>)
	diag ("PicOS halted");
    14ea:	4808      	ldr	r0, [pc, #32]	; (150c <halt+0x28>)
	cli_tim;
    14ec:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    14ee:	f000 fb2d 	bl	1b4c <diag>
	mdelay (500);
    14f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    14f6:	f7ff fab7 	bl	a68 <mdelay>
	setpowermode (2);
    14fa:	2002      	movs	r0, #2
    14fc:	f7ff feb4 	bl	1268 <setpowermode>
	__PCB = NULL;
    1500:	4b03      	ldr	r3, [pc, #12]	; (1510 <halt+0x2c>)
    1502:	601c      	str	r4, [r3, #0]
	release;
    1504:	f7ff fec2 	bl	128c <__pi_release>
    1508:	43240280 			; <UNDEFINED> instruction: 0x43240280
    150c:	00004ded 	andeq	r4, r0, sp, ror #27
    1510:	20000580 	andcs	r0, r0, r0, lsl #11

00001514 <main>:

#include "scheduler.h"

}

int main (void) {
    1514:	b510      	push	{r4, lr}
    1516:	4b11      	ldr	r3, [pc, #68]	; (155c <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	4911      	ldr	r1, [pc, #68]	; (1560 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    151a:	4a12      	ldr	r2, [pc, #72]	; (1564 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    151c:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	4293      	cmp	r3, r2
    1522:	d1fb      	bne.n	151c <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	4c10      	ldr	r4, [pc, #64]	; (1568 <main+0x54>)
	system_init ();
    1526:	f7ff fdc3 	bl	10b0 <system_init>
	tcv_init ();
    152a:	f000 fef9 	bl	2320 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    152e:	6823      	ldr	r3, [r4, #0]
    1530:	2129      	movs	r1, #41	; 0x29
    1532:	2000      	movs	r0, #0
    1534:	681b      	ldr	r3, [r3, #0]
    1536:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	6823      	ldr	r3, [r4, #0]
    153a:	2120      	movs	r1, #32
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	2001      	movs	r0, #1
    1540:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1542:	2100      	movs	r1, #0
    1544:	4809      	ldr	r0, [pc, #36]	; (156c <main+0x58>)
    1546:	f000 fadb 	bl	1b00 <__pi_fork>
    154a:	4b09      	ldr	r3, [pc, #36]	; (1570 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    154c:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    154e:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    1550:	2010      	movs	r0, #16
    1552:	f000 f951 	bl	17f8 <delay>
    1556:	b662      	cpsie	i

	sti;

	__pi_release ();
    1558:	f7ff fe98 	bl	128c <__pi_release>
    155c:	20004bfc 	strdcs	r4, [r0], -ip
    1560:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1564:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    1568:	10000184 	andne	r0, r0, r4, lsl #3
    156c:	00000525 	andeq	r0, r0, r5, lsr #10
    1570:	200006cc 	andcs	r0, r0, ip, asr #13

00001574 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    1574:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    1576:	4b0d      	ldr	r3, [pc, #52]	; (15ac <killev+0x38>)
	wfun = (aword)(pid->code);
    1578:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    157a:	681a      	ldr	r2, [r3, #0]
    157c:	b1aa      	cbz	r2, 15aa <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    157e:	4614      	mov	r4, r2
    1580:	f834 1b10 	ldrh.w	r1, [r4], #16
    1584:	2300      	movs	r3, #0
    1586:	f001 0107 	and.w	r1, r1, #7
    158a:	e001      	b.n	1590 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    158c:	42b5      	cmp	r5, r6
    158e:	d006      	beq.n	159e <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    1590:	4299      	cmp	r1, r3
    1592:	dd08      	ble.n	15a6 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    1594:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1598:	3301      	adds	r3, #1
    159a:	42a8      	cmp	r0, r5
    159c:	d1f6      	bne.n	158c <killev+0x18>
			    ) {
				wakeupev (i, j);
    159e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    15a2:	889b      	ldrh	r3, [r3, #4]
    15a4:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    15a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    15a8:	e7e8      	b.n	157c <killev+0x8>
				break;
			}
		}
	}
}
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	20000580 	andcs	r0, r0, r0, lsl #11

000015b0 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	4a1d      	ldr	r2, [pc, #116]	; (1628 <qfree+0x78>)
static void qfree (aword *ch) {
    15b2:	b530      	push	{r4, r5, lr}
    15b4:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b6:	6813      	ldr	r3, [r2, #0]
    15b8:	b93b      	cbnz	r3, 15ca <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    15ba:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    15bc:	4a1a      	ldr	r2, [pc, #104]	; (1628 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    15be:	bb53      	cbnz	r3, 1616 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    15c0:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    15c2:	4b1a      	ldr	r3, [pc, #104]	; (162c <qfree+0x7c>)
	m_setnextp (cc, ch);
    15c4:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    15c6:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    15c8:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15ca:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    15ce:	3101      	adds	r1, #1
    15d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    15d4:	4288      	cmp	r0, r1
    15d6:	d10b      	bne.n	15f0 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    15d8:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    15da:	f850 0c04 	ldr.w	r0, [r0, #-4]
    15de:	f853 1c04 	ldr.w	r1, [r3, #-4]
    15e2:	4401      	add	r1, r0
    15e4:	4618      	mov	r0, r3
    15e6:	3101      	adds	r1, #1
    15e8:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15ec:	681b      	ldr	r3, [r3, #0]
    15ee:	e7e3      	b.n	15b8 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f0:	f850 1c04 	ldr.w	r1, [r0, #-4]
    15f4:	3101      	adds	r1, #1
    15f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    15fa:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    15fc:	bf03      	ittte	eq
    15fe:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    1600:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    1604:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    1608:	461a      	movne	r2, r3
    160a:	bf02      	ittt	eq
    160c:	1949      	addeq	r1, r1, r5
    160e:	3101      	addeq	r1, #1
    1610:	f840 1c04 	streq.w	r1, [r0, #-4]
    1614:	e7ea      	b.n	15ec <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    1616:	f853 4c04 	ldr.w	r4, [r3, #-4]
    161a:	f850 1c04 	ldr.w	r1, [r0, #-4]
    161e:	428c      	cmp	r4, r1
    1620:	d2ce      	bcs.n	15c0 <qfree+0x10>
		chunk = m_nextp (chunk))
    1622:	461a      	mov	r2, r3
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	e7ca      	b.n	15be <qfree+0xe>
    1628:	20000594 	mulcs	r0, r4, r5
    162c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00001630 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1630:	4a03      	ldr	r2, [pc, #12]	; (1640 <dgout+0x10>)
    1632:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1634:	071b      	lsls	r3, r3, #28
    1636:	d4fc      	bmi.n	1632 <dgout+0x2>
	diag_wchar (c, a);
    1638:	4b02      	ldr	r3, [pc, #8]	; (1644 <dgout+0x14>)
    163a:	b2c0      	uxtb	r0, r0
    163c:	6018      	str	r0, [r3, #0]
}
    163e:	4770      	bx	lr
    1640:	40001018 	andmi	r1, r0, r8, lsl r0
    1644:	40001000 	andmi	r1, r0, r0

00001648 <__pi_badstate>:
	syserror (ESTATE, "state");
    1648:	2007      	movs	r0, #7
void __pi_badstate (void) {
    164a:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    164c:	4901      	ldr	r1, [pc, #4]	; (1654 <__pi_badstate+0xc>)
    164e:	f7ff fa5f 	bl	b10 <__pi_syserror>
    1652:	bf00      	nop
    1654:	00004e40 	andeq	r4, r0, r0, asr #28

00001658 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	4a08      	ldr	r2, [pc, #32]	; (167c <utimer_add+0x24>)
void utimer_add (address ut) {
    165a:	4603      	mov	r3, r0
    165c:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    165e:	2000      	movs	r0, #0
void utimer_add (address ut) {
    1660:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    1662:	f852 4b04 	ldr.w	r4, [r2], #4
    1666:	b12c      	cbz	r4, 1674 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1668:	3001      	adds	r0, #1
    166a:	2804      	cmp	r0, #4
    166c:	d1f9      	bne.n	1662 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    166e:	4904      	ldr	r1, [pc, #16]	; (1680 <utimer_add+0x28>)
    1670:	f7ff fa4e 	bl	b10 <__pi_syserror>
	__pi_utims [i] = ut;
    1674:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    1678:	bd10      	pop	{r4, pc}
    167a:	bf00      	nop
    167c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    1680:	00004e46 	andeq	r4, r0, r6, asr #28

00001684 <__pi_utimer_set>:
	*t = v;
    1684:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    1686:	f7ff ba8d 	b.w	ba4 <tci_run_auxiliary_timer>
	...

0000168c <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    168e:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1690:	4608      	mov	r0, r1
    1692:	f7ff fb25 	bl	ce0 <tci_update_delay_ticks>
    1696:	2800      	cmp	r0, #0
    1698:	d154      	bne.n	1744 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169a:	4b2b      	ldr	r3, [pc, #172]	; (1748 <update_n_wake+0xbc>)
    169c:	4d2b      	ldr	r5, [pc, #172]	; (174c <update_n_wake+0xc0>)
    169e:	8819      	ldrh	r1, [r3, #0]
    16a0:	882a      	ldrh	r2, [r5, #0]
    16a2:	b289      	uxth	r1, r1
    16a4:	428a      	cmp	r2, r1
    16a6:	492a      	ldr	r1, [pc, #168]	; (1750 <update_n_wake+0xc4>)
    16a8:	d803      	bhi.n	16b2 <update_n_wake+0x26>
    16aa:	8808      	ldrh	r0, [r1, #0]
    16ac:	b280      	uxth	r0, r0
    16ae:	4282      	cmp	r2, r0
    16b0:	d20d      	bcs.n	16ce <update_n_wake+0x42>
    16b2:	881e      	ldrh	r6, [r3, #0]
    16b4:	8808      	ldrh	r0, [r1, #0]
    16b6:	b2b6      	uxth	r6, r6
    16b8:	b280      	uxth	r0, r0
    16ba:	4286      	cmp	r6, r0
    16bc:	d236      	bcs.n	172c <update_n_wake+0xa0>
    16be:	8818      	ldrh	r0, [r3, #0]
    16c0:	b280      	uxth	r0, r0
    16c2:	4282      	cmp	r2, r0
    16c4:	d903      	bls.n	16ce <update_n_wake+0x42>
    16c6:	8808      	ldrh	r0, [r1, #0]
    16c8:	b280      	uxth	r0, r0
    16ca:	4282      	cmp	r2, r0
    16cc:	d32e      	bcc.n	172c <update_n_wake+0xa0>
		for_all_tasks (i) {
    16ce:	4a21      	ldr	r2, [pc, #132]	; (1754 <update_n_wake+0xc8>)
    16d0:	6810      	ldr	r0, [r2, #0]
    16d2:	b918      	cbnz	r0, 16dc <update_n_wake+0x50>
	__pi_mintk = znew + min;
    16d4:	8818      	ldrh	r0, [r3, #0]
    16d6:	4404      	add	r4, r0
    16d8:	802c      	strh	r4, [r5, #0]
    16da:	e02c      	b.n	1736 <update_n_wake+0xaa>
			if (!twaiting (i))
    16dc:	8806      	ldrh	r6, [r0, #0]
    16de:	0732      	lsls	r2, r6, #28
    16e0:	d51b      	bpl.n	171a <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e2:	881f      	ldrh	r7, [r3, #0]
    16e4:	8842      	ldrh	r2, [r0, #2]
    16e6:	b2bf      	uxth	r7, r7
    16e8:	42ba      	cmp	r2, r7
    16ea:	d803      	bhi.n	16f4 <update_n_wake+0x68>
    16ec:	880f      	ldrh	r7, [r1, #0]
    16ee:	b2bf      	uxth	r7, r7
    16f0:	42ba      	cmp	r2, r7
    16f2:	d20f      	bcs.n	1714 <update_n_wake+0x88>
    16f4:	f8b3 c000 	ldrh.w	ip, [r3]
    16f8:	880f      	ldrh	r7, [r1, #0]
    16fa:	fa1f fc8c 	uxth.w	ip, ip
    16fe:	b2bf      	uxth	r7, r7
    1700:	45bc      	cmp	ip, r7
    1702:	d20c      	bcs.n	171e <update_n_wake+0x92>
    1704:	881f      	ldrh	r7, [r3, #0]
    1706:	b2bf      	uxth	r7, r7
    1708:	42ba      	cmp	r2, r7
    170a:	d903      	bls.n	1714 <update_n_wake+0x88>
    170c:	880f      	ldrh	r7, [r1, #0]
    170e:	b2bf      	uxth	r7, r7
    1710:	42ba      	cmp	r2, r7
    1712:	d304      	bcc.n	171e <update_n_wake+0x92>
				wakeuptm (i);
    1714:	f026 060f 	bic.w	r6, r6, #15
    1718:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    171a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    171c:	e7d9      	b.n	16d2 <update_n_wake+0x46>
				d = i->Timer - znew;
    171e:	881e      	ldrh	r6, [r3, #0]
    1720:	1b92      	subs	r2, r2, r6
    1722:	b292      	uxth	r2, r2
    1724:	4294      	cmp	r4, r2
    1726:	bf28      	it	cs
    1728:	4614      	movcs	r4, r2
    172a:	e7f6      	b.n	171a <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    172c:	8818      	ldrh	r0, [r3, #0]
    172e:	1a12      	subs	r2, r2, r0
    1730:	b292      	uxth	r2, r2
    1732:	4294      	cmp	r4, r2
    1734:	d9ce      	bls.n	16d4 <update_n_wake+0x48>
	__pi_old = znew;
    1736:	881b      	ldrh	r3, [r3, #0]
    1738:	b29b      	uxth	r3, r3
    173a:	800b      	strh	r3, [r1, #0]
}
    173c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1740:	f7ff ba10 	b.w	b64 <tci_run_delay_timer>
}
    1744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1746:	bf00      	nop
    1748:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    174c:	200006ac 	andcs	r0, r0, ip, lsr #13
    1750:	200006ae 	andcs	r0, r0, lr, lsr #13
    1754:	20000580 	andcs	r0, r0, r0, lsl #11

00001758 <proceed>:
void proceed (word state) {
    1758:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    175a:	4b03      	ldr	r3, [pc, #12]	; (1768 <proceed+0x10>)
    175c:	0100      	lsls	r0, r0, #4
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	8018      	strh	r0, [r3, #0]
	release;
    1762:	f7ff fd93 	bl	128c <__pi_release>
    1766:	bf00      	nop
    1768:	200006cc 	andcs	r0, r0, ip, asr #13

0000176c <__pi_wait>:
void __pi_wait (aword event, word state) {
    176c:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    176e:	4b0a      	ldr	r3, [pc, #40]	; (1798 <__pi_wait+0x2c>)
    1770:	681c      	ldr	r4, [r3, #0]
    1772:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	f013 0f04 	tst.w	r3, #4
    1778:	f003 0207 	and.w	r2, r3, #7
    177c:	d003      	beq.n	1786 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    177e:	2005      	movs	r0, #5
    1780:	4906      	ldr	r1, [pc, #24]	; (179c <__pi_wait+0x30>)
    1782:	f7ff f9c5 	bl	b10 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1786:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    178a:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    178c:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    178e:	8191      	strh	r1, [r2, #12]
    1790:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    1792:	8023      	strh	r3, [r4, #0]
}
    1794:	bd10      	pop	{r4, pc}
    1796:	bf00      	nop
    1798:	200006cc 	andcs	r0, r0, ip, asr #13
    179c:	00004e4b 	andeq	r4, r0, fp, asr #28

000017a0 <__pi_trigger>:
void __pi_trigger (aword event) {
    17a0:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    17a2:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <__pi_trigger+0x30>)
    17a4:	681a      	ldr	r2, [r3, #0]
    17a6:	b192      	cbz	r2, 17ce <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    17a8:	4614      	mov	r4, r2
    17aa:	2300      	movs	r3, #0
    17ac:	f834 1b10 	ldrh.w	r1, [r4], #16
    17b0:	f001 0107 	and.w	r1, r1, #7
    17b4:	4299      	cmp	r1, r3
    17b6:	dd08      	ble.n	17ca <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    17b8:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    17bc:	3301      	adds	r3, #1
    17be:	4285      	cmp	r5, r0
    17c0:	d1f8      	bne.n	17b4 <__pi_trigger+0x14>
				wakeupev (i, j);
    17c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    17c6:	889b      	ldrh	r3, [r3, #4]
    17c8:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    17ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    17cc:	e7eb      	b.n	17a6 <__pi_trigger+0x6>
}
    17ce:	bd30      	pop	{r4, r5, pc}
    17d0:	20000580 	andcs	r0, r0, r0, lsl #11

000017d4 <__pi_join>:
aword __pi_join (aword pid, word st) {
    17d4:	b510      	push	{r4, lr}
    17d6:	4604      	mov	r4, r0
	for_all_tasks (i) {
    17d8:	4b06      	ldr	r3, [pc, #24]	; (17f4 <__pi_join+0x20>)
    17da:	681b      	ldr	r3, [r3, #0]
    17dc:	b90b      	cbnz	r3, 17e2 <__pi_join+0xe>
	return 0;
    17de:	461c      	mov	r4, r3
    17e0:	e004      	b.n	17ec <__pi_join+0x18>
		if ((aword)i == pid) {
    17e2:	42a3      	cmp	r3, r4
    17e4:	d104      	bne.n	17f0 <__pi_join+0x1c>
			__pi_wait (pid, st);
    17e6:	4620      	mov	r0, r4
    17e8:	f7ff ffc0 	bl	176c <__pi_wait>
}
    17ec:	4620      	mov	r0, r4
    17ee:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    17f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17f2:	e7f3      	b.n	17dc <__pi_join+0x8>
    17f4:	20000580 	andcs	r0, r0, r0, lsl #11

000017f8 <delay>:
void delay (word d, word state) {
    17f8:	b538      	push	{r3, r4, r5, lr}
    17fa:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    17fc:	4d0a      	ldr	r5, [pc, #40]	; (1828 <delay+0x30>)
    17fe:	682a      	ldr	r2, [r5, #0]
    1800:	8813      	ldrh	r3, [r2, #0]
    1802:	f003 0307 	and.w	r3, r3, #7
    1806:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    180a:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    180c:	2101      	movs	r1, #1
    180e:	f7ff ff3d 	bl	168c <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1812:	4b06      	ldr	r3, [pc, #24]	; (182c <delay+0x34>)
    1814:	8818      	ldrh	r0, [r3, #0]
    1816:	682b      	ldr	r3, [r5, #0]
    1818:	4404      	add	r4, r0
    181a:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    181c:	682a      	ldr	r2, [r5, #0]
    181e:	8813      	ldrh	r3, [r2, #0]
    1820:	f043 0308 	orr.w	r3, r3, #8
    1824:	8013      	strh	r3, [r2, #0]
}
    1826:	bd38      	pop	{r3, r4, r5, pc}
    1828:	200006cc 	andcs	r0, r0, ip, asr #13
    182c:	200006ae 	andcs	r0, r0, lr, lsr #13

00001830 <running>:
	if (fun == NULL)
    1830:	4603      	mov	r3, r0
    1832:	b910      	cbnz	r0, 183a <running+0xa>
		return (int) __pi_curr;
    1834:	4b05      	ldr	r3, [pc, #20]	; (184c <running+0x1c>)
    1836:	6818      	ldr	r0, [r3, #0]
    1838:	4770      	bx	lr
	for_all_tasks (i)
    183a:	4a05      	ldr	r2, [pc, #20]	; (1850 <running+0x20>)
    183c:	6810      	ldr	r0, [r2, #0]
    183e:	b900      	cbnz	r0, 1842 <running+0x12>
}
    1840:	4770      	bx	lr
		if (i->code == fun)
    1842:	6842      	ldr	r2, [r0, #4]
    1844:	429a      	cmp	r2, r3
    1846:	d0fb      	beq.n	1840 <running+0x10>
	for_all_tasks (i)
    1848:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    184a:	e7f8      	b.n	183e <running+0xe>
    184c:	200006cc 	andcs	r0, r0, ip, asr #13
    1850:	20000580 	andcs	r0, r0, r0, lsl #11

00001854 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1854:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1856:	2000      	movs	r0, #0
    1858:	5c1a      	ldrb	r2, [r3, r0]
    185a:	b902      	cbnz	r2, 185e <__pi_strlen+0xa>
}
    185c:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    185e:	3001      	adds	r0, #1
    1860:	e7fa      	b.n	1858 <__pi_strlen+0x4>

00001862 <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    1862:	3801      	subs	r0, #1
    1864:	f811 3b01 	ldrb.w	r3, [r1], #1
    1868:	f800 3f01 	strb.w	r3, [r0, #1]!
    186c:	2b00      	cmp	r3, #0
    186e:	d1f9      	bne.n	1864 <__pi_strcpy+0x2>
}
    1870:	4770      	bx	lr

00001872 <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    1872:	3901      	subs	r1, #1
    1874:	4402      	add	r2, r0
    1876:	4290      	cmp	r0, r2
    1878:	d102      	bne.n	1880 <__pi_strncpy+0xe>
	*d = '\0';
    187a:	2300      	movs	r3, #0
    187c:	7003      	strb	r3, [r0, #0]
}
    187e:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    1880:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1884:	2b00      	cmp	r3, #0
    1886:	d0f8      	beq.n	187a <__pi_strncpy+0x8>
		*d++ = *s++;
    1888:	f800 3b01 	strb.w	r3, [r0], #1
    188c:	e7f3      	b.n	1876 <__pi_strncpy+0x4>

0000188e <__pi_memcpy>:
	while (n--)
    188e:	3801      	subs	r0, #1
    1890:	440a      	add	r2, r1
    1892:	4291      	cmp	r1, r2
    1894:	d100      	bne.n	1898 <__pi_memcpy+0xa>
}
    1896:	4770      	bx	lr
		*dest++ = *src++;
    1898:	f811 3b01 	ldrb.w	r3, [r1], #1
    189c:	f800 3f01 	strb.w	r3, [r0, #1]!
    18a0:	e7f7      	b.n	1892 <__pi_memcpy+0x4>

000018a2 <__pi_memset>:
	while (n--)
    18a2:	4402      	add	r2, r0
    18a4:	4290      	cmp	r0, r2
    18a6:	d100      	bne.n	18aa <__pi_memset+0x8>
}
    18a8:	4770      	bx	lr
		*dest++ = c;
    18aa:	f800 1b01 	strb.w	r1, [r0], #1
    18ae:	e7f9      	b.n	18a4 <__pi_memset+0x2>

000018b0 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    18b2:	b119      	cbz	r1, 18bc <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    18b4:	2003      	movs	r0, #3
    18b6:	4905      	ldr	r1, [pc, #20]	; (18cc <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    18b8:	f7ff f92a 	bl	b10 <__pi_syserror>
	if (ioreq [loc] != NULL)
    18bc:	4b04      	ldr	r3, [pc, #16]	; (18d0 <adddevfunc+0x20>)
    18be:	681a      	ldr	r2, [r3, #0]
    18c0:	b112      	cbz	r2, 18c8 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    18c2:	2004      	movs	r0, #4
    18c4:	4901      	ldr	r1, [pc, #4]	; (18cc <adddevfunc+0x1c>)
    18c6:	e7f7      	b.n	18b8 <adddevfunc+0x8>
	ioreq [loc] = rf;
    18c8:	6018      	str	r0, [r3, #0]
}
    18ca:	bd08      	pop	{r3, pc}
    18cc:	00004e4e 	andeq	r4, r0, lr, asr #28
    18d0:	20000584 	andcs	r0, r0, r4, lsl #11

000018d4 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    18d8:	4604      	mov	r4, r0
    18da:	4616      	mov	r6, r2
    18dc:	461d      	mov	r5, r3
    18de:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e2:	b921      	cbnz	r1, 18ee <io+0x1a>
    18e4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 196c <io+0x98>
    18e8:	f8d9 3000 	ldr.w	r3, [r9]
    18ec:	b91b      	cbnz	r3, 18f6 <io+0x22>
		syserror (ENODEVICE, "io");
    18ee:	2001      	movs	r0, #1
    18f0:	491d      	ldr	r1, [pc, #116]	; (1968 <io+0x94>)
    18f2:	f7ff f90d 	bl	b10 <__pi_syserror>
	if (len == 0)
    18f6:	f1b8 0f00 	cmp.w	r8, #0
    18fa:	d028      	beq.n	194e <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	4642      	mov	r2, r8
    18fe:	4629      	mov	r1, r5
    1900:	4630      	mov	r0, r6
    1902:	4798      	blx	r3
	if (ret >= 0)
    1904:	2800      	cmp	r0, #0
    1906:	da23      	bge.n	1950 <io+0x7c>
	if (ret == -1) {
    1908:	1c41      	adds	r1, r0, #1
    190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    190e:	d108      	bne.n	1922 <io+0x4e>
		if (retry == WNONE)
    1910:	429c      	cmp	r4, r3
    1912:	d01c      	beq.n	194e <io+0x7a>
		iowait (dev, operation, retry);
    1914:	4621      	mov	r1, r4
    1916:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    191a:	f7ff ff27 	bl	176c <__pi_wait>
			release;
    191e:	f7ff fcb5 	bl	128c <__pi_release>
	if (ret == -2) {
    1922:	1c82      	adds	r2, r0, #2
    1924:	d116      	bne.n	1954 <io+0x80>
		if (retry != WNONE) {
    1926:	429c      	cmp	r4, r3
    1928:	f8d9 9000 	ldr.w	r9, [r9]
    192c:	d00a      	beq.n	1944 <io+0x70>
			iowait (dev, operation, retry);
    192e:	4621      	mov	r1, r4
    1930:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1934:	f7ff ff1a 	bl	176c <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1938:	4642      	mov	r2, r8
    193a:	4629      	mov	r1, r5
    193c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1940:	47c8      	blx	r9
    1942:	e7ec      	b.n	191e <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1944:	4642      	mov	r2, r8
    1946:	4629      	mov	r1, r5
    1948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    194c:	47c8      	blx	r9
		return 0;
    194e:	2000      	movs	r0, #0
}
    1950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1954:	429c      	cmp	r4, r3
    1956:	d0fa      	beq.n	194e <io+0x7a>
		delay (-ret - 2, retry);
    1958:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    195c:	30fe      	adds	r0, #254	; 0xfe
    195e:	4621      	mov	r1, r4
    1960:	b280      	uxth	r0, r0
    1962:	f7ff ff49 	bl	17f8 <delay>
		release;
    1966:	e7da      	b.n	191e <io+0x4a>
    1968:	00004e53 	andeq	r4, r0, r3, asr lr
    196c:	20000584 	andcs	r0, r0, r4, lsl #11

00001970 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1970:	4a0d      	ldr	r2, [pc, #52]	; (19a8 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1972:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1974:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1978:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    197c:	089b      	lsrs	r3, r3, #2
    197e:	1e59      	subs	r1, r3, #1
    1980:	29ff      	cmp	r1, #255	; 0xff
    1982:	d803      	bhi.n	198c <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1984:	2004      	movs	r0, #4
    1986:	4909      	ldr	r1, [pc, #36]	; (19ac <__pi_malloc_init+0x3c>)
    1988:	f7ff f8c2 	bl	b10 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    198c:	4908      	ldr	r1, [pc, #32]	; (19b0 <__pi_malloc_init+0x40>)
    198e:	1d10      	adds	r0, r2, #4
    1990:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1992:	2000      	movs	r0, #0
    1994:	4907      	ldr	r1, [pc, #28]	; (19b4 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1996:	3b02      	subs	r3, #2
    1998:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    199a:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    199e:	4a06      	ldr	r2, [pc, #24]	; (19b8 <__pi_malloc_init+0x48>)
    19a0:	6013      	str	r3, [r2, #0]
    19a2:	4a06      	ldr	r2, [pc, #24]	; (19bc <__pi_malloc_init+0x4c>)
    19a4:	6013      	str	r3, [r2, #0]
}
    19a6:	bd08      	pop	{r3, pc}
    19a8:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    19ac:	00004e56 	andeq	r4, r0, r6, asr lr
    19b0:	20000594 	mulcs	r0, r4, r5
    19b4:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    19b8:	20000588 	andcs	r0, r0, r8, lsl #11
    19bc:	20000590 	mulcs	r0, r0, r5

000019c0 <__pi_free>:
void __pi_free (aword *ch) {
    19c0:	b508      	push	{r3, lr}
	if (ch == NULL)
    19c2:	b1c8      	cbz	r0, 19f8 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    19c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
    19c8:	2b00      	cmp	r3, #0
    19ca:	db03      	blt.n	19d4 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    19cc:	2006      	movs	r0, #6
    19ce:	490b      	ldr	r1, [pc, #44]	; (19fc <__pi_free+0x3c>)
    19d0:	f7ff f89e 	bl	b10 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    19d4:	490a      	ldr	r1, [pc, #40]	; (1a00 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    19d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    19da:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    19dc:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    19e0:	4413      	add	r3, r2
    19e2:	600b      	str	r3, [r1, #0]
	QFREE;
    19e4:	f7ff fde4 	bl	15b0 <qfree>
	if (mevent [MA_NP] . nwait) {
    19e8:	4806      	ldr	r0, [pc, #24]	; (1a04 <__pi_free+0x44>)
    19ea:	7803      	ldrb	r3, [r0, #0]
    19ec:	b123      	cbz	r3, 19f8 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    19ee:	f7ff fed7 	bl	17a0 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    19f2:	7803      	ldrb	r3, [r0, #0]
    19f4:	3b01      	subs	r3, #1
    19f6:	7003      	strb	r3, [r0, #0]
}
    19f8:	bd08      	pop	{r3, pc}
    19fa:	bf00      	nop
    19fc:	00004e5b 	andeq	r4, r0, fp, asr lr
    1a00:	20000588 	andcs	r0, r0, r8, lsl #11
    1a04:	2000058c 	andcs	r0, r0, ip, lsl #11

00001a08 <kill>:
void kill (aword pid) {
    1a08:	b510      	push	{r4, lr}
	if (pid == 0)
    1a0a:	b908      	cbnz	r0, 1a10 <kill+0x8>
		pid = (aword) __pi_curr;
    1a0c:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <kill+0x44>)
    1a0e:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1a10:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1a12:	4b0f      	ldr	r3, [pc, #60]	; (1a50 <kill+0x48>)
    1a14:	681c      	ldr	r4, [r3, #0]
    1a16:	b91c      	cbnz	r4, 1a20 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1a18:	2003      	movs	r0, #3
    1a1a:	490e      	ldr	r1, [pc, #56]	; (1a54 <kill+0x4c>)
    1a1c:	f7ff f878 	bl	b10 <__pi_syserror>
		if ((aword)i == pid) {
    1a20:	4284      	cmp	r4, r0
    1a22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a24:	d10e      	bne.n	1a44 <kill+0x3c>
			if (j == NULL)
    1a26:	b95a      	cbnz	r2, 1a40 <kill+0x38>
				__PCB = i->Next;
    1a28:	6019      	str	r1, [r3, #0]
			killev (i);
    1a2a:	4620      	mov	r0, r4
    1a2c:	f7ff fda2 	bl	1574 <killev>
			ufree (i);
    1a30:	f7ff ffc6 	bl	19c0 <__pi_free>
			if (i == __pi_curr)
    1a34:	4b05      	ldr	r3, [pc, #20]	; (1a4c <kill+0x44>)
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	42a3      	cmp	r3, r4
    1a3a:	d106      	bne.n	1a4a <kill+0x42>
				release;
    1a3c:	f7ff fc26 	bl	128c <__pi_release>
				j->Next = i->Next;
    1a40:	62d1      	str	r1, [r2, #44]	; 0x2c
    1a42:	e7f2      	b.n	1a2a <kill+0x22>
    1a44:	4622      	mov	r2, r4
    1a46:	460c      	mov	r4, r1
    1a48:	e7e5      	b.n	1a16 <kill+0xe>
}
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	200006cc 	andcs	r0, r0, ip, asr #13
    1a50:	20000580 	andcs	r0, r0, r0, lsl #11
    1a54:	00004e60 	andeq	r4, r0, r0, ror #28

00001a58 <__pi_malloc>:
	if (size < 8)
    1a58:	2807      	cmp	r0, #7
		_size = 2;
    1a5a:	bf98      	it	ls
    1a5c:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1a5e:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a60:	4b21      	ldr	r3, [pc, #132]	; (1ae8 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1a62:	bf88      	it	hi
    1a64:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a66:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a68:	4920      	ldr	r1, [pc, #128]	; (1aec <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1a6a:	bf88      	it	hi
    1a6c:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a6e:	b94c      	cbnz	r4, 1a84 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1a70:	4a1f      	ldr	r2, [pc, #124]	; (1af0 <__pi_malloc+0x98>)
    1a72:	7853      	ldrb	r3, [r2, #1]
    1a74:	2bff      	cmp	r3, #255	; 0xff
    1a76:	d001      	beq.n	1a7c <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1a78:	3301      	adds	r3, #1
    1a7a:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1a7c:	2200      	movs	r2, #0
    1a7e:	4b1d      	ldr	r3, [pc, #116]	; (1af4 <__pi_malloc+0x9c>)
    1a80:	601a      	str	r2, [r3, #0]
	return chunk;
    1a82:	e02f      	b.n	1ae4 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a84:	6862      	ldr	r2, [r4, #4]
    1a86:	428a      	cmp	r2, r1
    1a88:	d003      	beq.n	1a92 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1a8a:	2006      	movs	r0, #6
    1a8c:	491a      	ldr	r1, [pc, #104]	; (1af8 <__pi_malloc+0xa0>)
    1a8e:	f7ff f83f 	bl	b10 <__pi_syserror>
		if (m_size (chunk) >= _size)
    1a92:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1a96:	4285      	cmp	r5, r0
    1a98:	d202      	bcs.n	1aa0 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1a9a:	4623      	mov	r3, r4
    1a9c:	4614      	mov	r4, r2
    1a9e:	e7e6      	b.n	1a6e <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1aa0:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1aa2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1aa6:	1a1b      	subs	r3, r3, r0
    1aa8:	2b08      	cmp	r3, #8
    1aaa:	d909      	bls.n	1ac0 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1aac:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1ab0:	3001      	adds	r0, #1
    1ab2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1ab6:	3b01      	subs	r3, #1
    1ab8:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1abc:	f7ff fd78 	bl	15b0 <qfree>
		mevent [MA_NP] . nfail = 0;
    1ac0:	2200      	movs	r2, #0
    1ac2:	4b0b      	ldr	r3, [pc, #44]	; (1af0 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1ac4:	490d      	ldr	r1, [pc, #52]	; (1afc <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1ac6:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1ac8:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1acc:	680b      	ldr	r3, [r1, #0]
    1ace:	1a9b      	subs	r3, r3, r2
    1ad0:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad2:	4908      	ldr	r1, [pc, #32]	; (1af4 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1ad4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad8:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1ada:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ade:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1ae0:	bf38      	it	cc
    1ae2:	600b      	strcc	r3, [r1, #0]
}
    1ae4:	4620      	mov	r0, r4
    1ae6:	bd38      	pop	{r3, r4, r5, pc}
    1ae8:	20000594 	mulcs	r0, r4, r5
    1aec:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1af0:	2000058c 	andcs	r0, r0, ip, lsl #11
    1af4:	20000590 	mulcs	r0, r0, r5
    1af8:	00004e64 	andeq	r4, r0, r4, ror #28
    1afc:	20000588 	andcs	r0, r0, r8, lsl #11

00001b00 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1b00:	b538      	push	{r3, r4, r5, lr}
    1b02:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b04:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1b06:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b08:	f7ff ffa6 	bl	1a58 <__pi_malloc>
    1b0c:	2300      	movs	r3, #0
    1b0e:	b138      	cbz	r0, 1b20 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1b10:	4a07      	ldr	r2, [pc, #28]	; (1b30 <__pi_fork+0x30>)
	i->Status = 0;
    1b12:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1b14:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1b16:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1b18:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1b1c:	b90b      	cbnz	r3, 1b22 <__pi_fork+0x22>
			__PCB = i;
    1b1e:	6010      	str	r0, [r2, #0]
}
    1b20:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1b22:	461a      	mov	r2, r3
    1b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b26:	2b00      	cmp	r3, #0
    1b28:	d1fb      	bne.n	1b22 <__pi_fork+0x22>
			j->Next = i;
    1b2a:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1b2c:	e7f8      	b.n	1b20 <__pi_fork+0x20>
    1b2e:	bf00      	nop
    1b30:	20000580 	andcs	r0, r0, r0, lsl #11

00001b34 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1b34:	4a04      	ldr	r2, [pc, #16]	; (1b48 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1b36:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1b38:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1b3a:	4803      	ldr	r0, [pc, #12]	; (1b48 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1b3c:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1b3e:	bf1c      	itt	ne
    1b40:	3301      	addne	r3, #1
    1b42:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1b44:	f7ff be12 	b.w	176c <__pi_wait>
    1b48:	2000058c 	andcs	r0, r0, ip, lsl #11

00001b4c <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1b4c:	b40f      	push	{r0, r1, r2, r3}
    1b4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1b52:	ab0a      	add	r3, sp, #40	; 0x28
    1b54:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1b58:	2015      	movs	r0, #21
	va_start (ap, mess);
    1b5a:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1b5c:	4b46      	ldr	r3, [pc, #280]	; (1c78 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1b5e:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1b60:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1b62:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1c80 <diag+0x134>
	diag_disable_int (a, is);
    1b66:	695b      	ldr	r3, [r3, #20]
    1b68:	4798      	blx	r3
	while (*mess != '\0') {
    1b6a:	7820      	ldrb	r0, [r4, #0]
    1b6c:	b998      	cbnz	r0, 1b96 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1b6e:	200d      	movs	r0, #13
    1b70:	f7ff fd5e 	bl	1630 <dgout>
	dgout ('\n');
    1b74:	200a      	movs	r0, #10
    1b76:	f7ff fd5b 	bl	1630 <dgout>
    1b7a:	4a40      	ldr	r2, [pc, #256]	; (1c7c <diag+0x130>)
    1b7c:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1b7e:	071b      	lsls	r3, r3, #28
    1b80:	d4fc      	bmi.n	1b7c <diag+0x30>
	diag_enable_int (a, is);
    1b82:	4b3d      	ldr	r3, [pc, #244]	; (1c78 <diag+0x12c>)
    1b84:	2015      	movs	r0, #21
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	691b      	ldr	r3, [r3, #16]
    1b8a:	4798      	blx	r3
}
    1b8c:	b003      	add	sp, #12
    1b8e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b92:	b004      	add	sp, #16
    1b94:	4770      	bx	lr
		if (*mess == '%') {
    1b96:	2825      	cmp	r0, #37	; 0x25
    1b98:	f104 0601 	add.w	r6, r4, #1
    1b9c:	d169      	bne.n	1c72 <diag+0x126>
			if (*mess == 'l') {
    1b9e:	9b01      	ldr	r3, [sp, #4]
    1ba0:	7862      	ldrb	r2, [r4, #1]
    1ba2:	f853 1b04 	ldr.w	r1, [r3], #4
    1ba6:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1ba8:	bf08      	it	eq
    1baa:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1bac:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1bae:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1bb0:	bf0c      	ite	eq
    1bb2:	2520      	moveq	r5, #32
				bc = 16;
    1bb4:	2510      	movne	r5, #16
			switch (*mess) {
    1bb6:	2b75      	cmp	r3, #117	; 0x75
    1bb8:	d04e      	beq.n	1c58 <diag+0x10c>
    1bba:	d80a      	bhi.n	1bd2 <diag+0x86>
    1bbc:	2b64      	cmp	r3, #100	; 0x64
    1bbe:	d01c      	beq.n	1bfa <diag+0xae>
    1bc0:	2b73      	cmp	r3, #115	; 0x73
    1bc2:	d052      	beq.n	1c6a <diag+0x11e>
				dgout ('%');
    1bc4:	2025      	movs	r0, #37	; 0x25
    1bc6:	f7ff fd33 	bl	1630 <dgout>
				dgout (*mess);
    1bca:	7830      	ldrb	r0, [r6, #0]
    1bcc:	f7ff fd30 	bl	1630 <dgout>
    1bd0:	e010      	b.n	1bf4 <diag+0xa8>
			switch (*mess) {
    1bd2:	2b78      	cmp	r3, #120	; 0x78
    1bd4:	d1f6      	bne.n	1bc4 <diag+0x78>
    1bd6:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1bd8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1c84 <diag+0x138>
					i += 4;
    1bdc:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1bde:	1b2b      	subs	r3, r5, r4
    1be0:	fa21 f303 	lsr.w	r3, r1, r3
    1be4:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1be8:	f819 0003 	ldrb.w	r0, [r9, r3]
    1bec:	f7ff fd20 	bl	1630 <dgout>
				while (i < bc) {
    1bf0:	42a5      	cmp	r5, r4
    1bf2:	dcf3      	bgt.n	1bdc <diag+0x90>
			mess++;
    1bf4:	3601      	adds	r6, #1
					d /= 10;
    1bf6:	4634      	mov	r4, r6
    1bf8:	e7b7      	b.n	1b6a <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1bfa:	1e6b      	subs	r3, r5, #1
    1bfc:	fa21 f303 	lsr.w	r3, r1, r3
    1c00:	07da      	lsls	r2, r3, #31
    1c02:	d509      	bpl.n	1c18 <diag+0xcc>
					dgout ('-');
    1c04:	202d      	movs	r0, #45	; 0x2d
    1c06:	f7ff fd13 	bl	1630 <dgout>
					if (bc == 16)
    1c0a:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1c0c:	bf04      	itt	eq
    1c0e:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1c12:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1c16:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1c18:	f242 7410 	movw	r4, #10000	; 0x2710
    1c1c:	2d10      	cmp	r5, #16
    1c1e:	bf18      	it	ne
    1c20:	4644      	movne	r4, r8
					v = (word) (val / d);
    1c22:	fbb1 f5f4 	udiv	r5, r1, r4
    1c26:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1c28:	b935      	cbnz	r5, 1c38 <diag+0xec>
    1c2a:	2c01      	cmp	r4, #1
    1c2c:	d004      	beq.n	1c38 <diag+0xec>
					d /= 10;
    1c2e:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1c32:	e7f6      	b.n	1c22 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1c34:	4c12      	ldr	r4, [pc, #72]	; (1c80 <diag+0x134>)
    1c36:	e7f4      	b.n	1c22 <diag+0xd6>
					dgout (v + '0');
    1c38:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1c3c:	b280      	uxth	r0, r0
    1c3e:	f7ff fcf7 	bl	1630 <dgout>
					if (d == 0) break;
    1c42:	2c09      	cmp	r4, #9
					d /= 10;
    1c44:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1c48:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1c4c:	d9d2      	bls.n	1bf4 <diag+0xa8>
					v = (word) (val / d);
    1c4e:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1c52:	461c      	mov	r4, r3
					v = (word) (val / d);
    1c54:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1c56:	e7ef      	b.n	1c38 <diag+0xec>
				if (bc == 16)
    1c58:	2d10      	cmp	r5, #16
    1c5a:	d1eb      	bne.n	1c34 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1c5c:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1c60:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1c62:	e7de      	b.n	1c22 <diag+0xd6>
					dgout (*s);
    1c64:	f7ff fce4 	bl	1630 <dgout>
					s++;
    1c68:	3101      	adds	r1, #1
				while (*s != '\0') {
    1c6a:	7808      	ldrb	r0, [r1, #0]
    1c6c:	2800      	cmp	r0, #0
    1c6e:	d1f9      	bne.n	1c64 <diag+0x118>
    1c70:	e7c0      	b.n	1bf4 <diag+0xa8>
			dgout (*mess++);
    1c72:	f7ff fcdd 	bl	1630 <dgout>
    1c76:	e7be      	b.n	1bf6 <diag+0xaa>
    1c78:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1c7c:	40001018 	andmi	r1, r0, r8, lsl r0
    1c80:	3b9aca00 	blcc	fe6b4488 <_estack+0xde6af488>
    1c84:	00004e69 	andeq	r4, r0, r9, ror #28

00001c88 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1c88:	f243 0039 	movw	r0, #12345	; 0x3039
    1c8c:	4a04      	ldr	r2, [pc, #16]	; (1ca0 <lrnd+0x18>)
    1c8e:	4905      	ldr	r1, [pc, #20]	; (1ca4 <lrnd+0x1c>)
    1c90:	6813      	ldr	r3, [r2, #0]
    1c92:	fb01 0303 	mla	r3, r1, r3, r0
    1c96:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1c98:	4a03      	ldr	r2, [pc, #12]	; (1ca8 <lrnd+0x20>)
    1c9a:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1c9c:	4058      	eors	r0, r3
    1c9e:	4770      	bx	lr
    1ca0:	20000004 	andcs	r0, r0, r4
    1ca4:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1ca8:	200006a8 	andcs	r0, r0, r8, lsr #13

00001cac <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1cac:	b510      	push	{r4, lr}
    1cae:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1cb0:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1cb2:	b280      	uxth	r0, r0
    1cb4:	f7ff fed0 	bl	1a58 <__pi_malloc>
    1cb8:	b110      	cbz	r0, 1cc0 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1cba:	2300      	movs	r3, #0
	p -> length = size;
    1cbc:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1cbe:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1cc0:	bd10      	pop	{r4, pc}

00001cc2 <deq>:
	if (p->attributes.b.queued) {
    1cc2:	7a83      	ldrb	r3, [r0, #10]
    1cc4:	07db      	lsls	r3, r3, #31
    1cc6:	d508      	bpl.n	1cda <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1cc8:	e9d0 2300 	ldrd	r2, r3, [r0]
    1ccc:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1cce:	6802      	ldr	r2, [r0, #0]
    1cd0:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1cd2:	7a83      	ldrb	r3, [r0, #10]
    1cd4:	f36f 0300 	bfc	r3, #0, #1
    1cd8:	7283      	strb	r3, [r0, #10]
}
    1cda:	4770      	bx	lr

00001cdc <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1cdc:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1cde:	f7ff fff0 	bl	1cc2 <deq>
}
    1ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1ce6:	f7ff be6b 	b.w	19c0 <__pi_free>
	...

00001cec <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cec:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cee:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cf0:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf2:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cf4:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf6:	d503      	bpl.n	1d00 <enq+0x14>
    1cf8:	200a      	movs	r0, #10
    1cfa:	490e      	ldr	r1, [pc, #56]	; (1d34 <enq+0x48>)
    1cfc:	f7fe ff08 	bl	b10 <__pi_syserror>
	if (q_empty (q))
    1d00:	6803      	ldr	r3, [r0, #0]
    1d02:	4283      	cmp	r3, r0
    1d04:	d101      	bne.n	1d0a <enq+0x1e>
		trigger (q);
    1d06:	f7ff fd4b 	bl	17a0 <__pi_trigger>
	if (p->attributes.b.urgent) {
    1d0a:	7aa3      	ldrb	r3, [r4, #10]
    1d0c:	075b      	lsls	r3, r3, #29
    1d0e:	d50a      	bpl.n	1d26 <enq+0x3a>
		p->u.bqueue.next = q->next;
    1d10:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1d12:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1d16:	682b      	ldr	r3, [r5, #0]
    1d18:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1d1a:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1d1c:	7aa3      	ldrb	r3, [r4, #10]
    1d1e:	f043 0301 	orr.w	r3, r3, #1
    1d22:	72a3      	strb	r3, [r4, #10]
}
    1d24:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1d26:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1d28:	686b      	ldr	r3, [r5, #4]
    1d2a:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1d2c:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1d2e:	606c      	str	r4, [r5, #4]
    1d30:	e7f4      	b.n	1d1c <enq+0x30>
    1d32:	bf00      	nop
    1d34:	00004e79 	andeq	r4, r0, r9, ror lr

00001d38 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1d38:	b510      	push	{r4, lr}
    1d3a:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1d3c:	f7ff ffc1 	bl	1cc2 <deq>
	switch (dv) {
    1d40:	3901      	subs	r1, #1
    1d42:	2904      	cmp	r1, #4
    1d44:	d832      	bhi.n	1dac <dispose+0x74>
    1d46:	e8df f001 	tbb	[pc, r1]
    1d4a:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1d4e:	7a830019 	bvc	fe0c1dba <_estack+0xde0bcdba>
			p->attributes.b.urgent = 1;
    1d52:	f043 0304 	orr.w	r3, r3, #4
    1d56:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1d58:	8963      	ldrh	r3, [r4, #10]
    1d5a:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1d5e:	2b07      	cmp	r3, #7
    1d60:	d803      	bhi.n	1d6a <dispose+0x32>
    1d62:	4a13      	ldr	r2, [pc, #76]	; (1db0 <dispose+0x78>)
    1d64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1d68:	b918      	cbnz	r0, 1d72 <dispose+0x3a>
    1d6a:	4912      	ldr	r1, [pc, #72]	; (1db4 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1d6c:	200a      	movs	r0, #10
    1d6e:	f7fe fecf 	bl	b10 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1d72:	4621      	mov	r1, r4
}
    1d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1d78:	f7ff bfb8 	b.w	1cec <enq>
			p->attributes.b.urgent = 1;
    1d7c:	7a83      	ldrb	r3, [r0, #10]
    1d7e:	f043 0304 	orr.w	r3, r3, #4
    1d82:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1d84:	7ae2      	ldrb	r2, [r4, #11]
    1d86:	2a5f      	cmp	r2, #95	; 0x5f
    1d88:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1d8c:	d803      	bhi.n	1d96 <dispose+0x5e>
    1d8e:	4a0a      	ldr	r2, [pc, #40]	; (1db8 <dispose+0x80>)
    1d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d94:	b90a      	cbnz	r2, 1d9a <dispose+0x62>
    1d96:	4909      	ldr	r1, [pc, #36]	; (1dbc <dispose+0x84>)
    1d98:	e7e8      	b.n	1d6c <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1d9a:	4a09      	ldr	r2, [pc, #36]	; (1dc0 <dispose+0x88>)
    1d9c:	4621      	mov	r1, r4
    1d9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1da2:	e7e7      	b.n	1d74 <dispose+0x3c>
}
    1da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1da8:	f7ff bf98 	b.w	1cdc <rlp>
}
    1dac:	bd10      	pop	{r4, pc}
    1dae:	bf00      	nop
    1db0:	20000598 	mulcs	r0, r8, r5
    1db4:	00004e7f 	andeq	r4, r0, pc, ror lr
    1db8:	200005c4 	andcs	r0, r0, r4, asr #11
    1dbc:	00004e8b 	andeq	r4, r0, fp, lsl #29
    1dc0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00001dc4 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1dc4:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1dc6:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1dca:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1dce:	0792      	lsls	r2, r2, #30
    1dd0:	d522      	bpl.n	1e18 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1dd2:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1dd6:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1dda:	2a07      	cmp	r2, #7
    1ddc:	d803      	bhi.n	1de6 <tcv_endp+0x22>
    1dde:	4911      	ldr	r1, [pc, #68]	; (1e24 <tcv_endp+0x60>)
    1de0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1de4:	b91a      	cbnz	r2, 1dee <tcv_endp+0x2a>
    1de6:	4910      	ldr	r1, [pc, #64]	; (1e28 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1de8:	200a      	movs	r0, #10
    1dea:	f7fe fe91 	bl	b10 <__pi_syserror>
    1dee:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1df2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1df6:	2b02      	cmp	r3, #2
    1df8:	d805      	bhi.n	1e06 <tcv_endp+0x42>
    1dfa:	4a0c      	ldr	r2, [pc, #48]	; (1e2c <tcv_endp+0x68>)
    1dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e00:	b10b      	cbz	r3, 1e06 <tcv_endp+0x42>
    1e02:	691b      	ldr	r3, [r3, #16]
    1e04:	b90b      	cbnz	r3, 1e0a <tcv_endp+0x46>
    1e06:	490a      	ldr	r1, [pc, #40]	; (1e30 <tcv_endp+0x6c>)
    1e08:	e7ee      	b.n	1de8 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e0a:	4798      	blx	r3
    1e0c:	4601      	mov	r1, r0
    1e0e:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e14:	f7ff bf90 	b.w	1d38 <dispose>
		rlp (b);
    1e18:	4620      	mov	r0, r4
}
    1e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1e1e:	f7ff bf5d 	b.w	1cdc <rlp>
    1e22:	bf00      	nop
    1e24:	20000598 	mulcs	r0, r8, r5
    1e28:	00004e97 	muleq	r0, r7, lr
    1e2c:	200005dc 	ldrdcs	r0, [r0], -ip
    1e30:	00004e9d 	muleq	r0, sp, lr

00001e34 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e34:	b40c      	push	{r2, r3}
    1e36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1e3a:	ab0a      	add	r3, sp, #40	; 0x28
    1e3c:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e40:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e42:	460f      	mov	r7, r1
	va_start (ap, plid);
    1e44:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e46:	d80b      	bhi.n	1e60 <tcv_open+0x2c>
    1e48:	4b24      	ldr	r3, [pc, #144]	; (1edc <tcv_open+0xa8>)
    1e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1e4e:	b13b      	cbz	r3, 1e60 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1e50:	f1b8 0f02 	cmp.w	r8, #2
    1e54:	d804      	bhi.n	1e60 <tcv_open+0x2c>
    1e56:	4b22      	ldr	r3, [pc, #136]	; (1ee0 <tcv_open+0xac>)
    1e58:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1e5c:	4699      	mov	r9, r3
    1e5e:	b91a      	cbnz	r2, 1e68 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1e60:	2001      	movs	r0, #1
    1e62:	4920      	ldr	r1, [pc, #128]	; (1ee4 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1e64:	f7fe fe54 	bl	b10 <__pi_syserror>
	attp.b.outgoing = 1;
    1e68:	f008 0307 	and.w	r3, r8, #7
    1e6c:	029b      	lsls	r3, r3, #10
    1e6e:	f043 0302 	orr.w	r3, r3, #2
    1e72:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e76:	4b1c      	ldr	r3, [pc, #112]	; (1ee8 <tcv_open+0xb4>)
    1e78:	2600      	movs	r6, #0
    1e7a:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    1e7c:	f853 2b04 	ldr.w	r2, [r3], #4
    1e80:	b312      	cbz	r2, 1ec8 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e82:	3601      	adds	r6, #1
    1e84:	2e08      	cmp	r6, #8
    1e86:	d1f9      	bne.n	1e7c <tcv_open+0x48>
		return ERROR;
    1e88:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    1e8c:	4630      	mov	r0, r6
    1e8e:	b002      	add	sp, #8
    1e90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e94:	b002      	add	sp, #8
    1e96:	4770      	bx	lr
	s->attpattern.b.session = fd;
    1e98:	462b      	mov	r3, r5
    1e9a:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    1e9e:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    1ea2:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    1ea4:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1ea8:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	b913      	cbnz	r3, 1eb6 <tcv_open+0x82>
    1eb0:	200a      	movs	r0, #10
    1eb2:	490e      	ldr	r1, [pc, #56]	; (1eec <tcv_open+0xb8>)
    1eb4:	e7d6      	b.n	1e64 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1eb6:	4631      	mov	r1, r6
    1eb8:	4638      	mov	r0, r7
    1eba:	9a01      	ldr	r2, [sp, #4]
    1ebc:	4798      	blx	r3
    1ebe:	2800      	cmp	r0, #0
    1ec0:	d1e2      	bne.n	1e88 <tcv_open+0x54>
	descriptors [fd] = s;
    1ec2:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    1ec6:	e7e1      	b.n	1e8c <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1ec8:	200c      	movs	r0, #12
    1eca:	f7ff fdc5 	bl	1a58 <__pi_malloc>
	if (s == NULL)
    1ece:	4604      	mov	r4, r0
    1ed0:	2800      	cmp	r0, #0
    1ed2:	d1e1      	bne.n	1e98 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    1ed4:	2006      	movs	r0, #6
    1ed6:	4906      	ldr	r1, [pc, #24]	; (1ef0 <tcv_open+0xbc>)
    1ed8:	e7c4      	b.n	1e64 <tcv_open+0x30>
    1eda:	bf00      	nop
    1edc:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    1ee0:	200005dc 	ldrdcs	r0, [r0], -ip
    1ee4:	00004ea3 	andeq	r4, r0, r3, lsr #29
    1ee8:	20000598 	mulcs	r0, r8, r5
    1eec:	00004eaf 	andeq	r4, r0, pc, lsr #29
    1ef0:	00004ea9 	andeq	r4, r0, r9, lsr #29

00001ef4 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ef4:	2802      	cmp	r0, #2
    1ef6:	d809      	bhi.n	1f0c <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ef8:	4b06      	ldr	r3, [pc, #24]	; (1f14 <tcv_plug+0x20>)
    1efa:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1efe:	b10a      	cbz	r2, 1f04 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1f00:	428a      	cmp	r2, r1
    1f02:	d103      	bne.n	1f0c <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    1f04:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    1f08:	2000      	movs	r0, #0
    1f0a:	4770      	bx	lr
		return ERROR;
    1f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop
    1f14:	200005dc 	ldrdcs	r0, [r0], -ip

00001f18 <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    1f18:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1f1a:	b538      	push	{r3, r4, r5, lr}
    1f1c:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    1f1e:	d803      	bhi.n	1f28 <tcv_rnp+0x10>
    1f20:	4a19      	ldr	r2, [pc, #100]	; (1f88 <tcv_rnp+0x70>)
    1f22:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    1f26:	b918      	cbnz	r0, 1f30 <tcv_rnp+0x18>
    1f28:	4918      	ldr	r1, [pc, #96]	; (1f8c <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    1f2a:	200a      	movs	r0, #10
    1f2c:	f7fe fdf0 	bl	b10 <__pi_syserror>
	b = q_first (rq);
    1f30:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    1f32:	42a0      	cmp	r0, r4
    1f34:	d108      	bne.n	1f48 <tcv_rnp+0x30>
		if (state != WNONE) {
    1f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1f3a:	4293      	cmp	r3, r2
    1f3c:	d021      	beq.n	1f82 <tcv_rnp+0x6a>
			when (rq, state);
    1f3e:	4619      	mov	r1, r3
    1f40:	f7ff fc14 	bl	176c <__pi_wait>
			release;
    1f44:	f7ff f9a2 	bl	128c <__pi_release>
	deq (b);	// Dequeue the packet ...
    1f48:	4620      	mov	r0, r4
    1f4a:	f7ff feba 	bl	1cc2 <deq>
	verify_plg (b, tcv_frm, "tcv11");
    1f4e:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    1f50:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    1f54:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1f58:	2b02      	cmp	r3, #2
    1f5a:	d805      	bhi.n	1f68 <tcv_rnp+0x50>
    1f5c:	4a0c      	ldr	r2, [pc, #48]	; (1f90 <tcv_rnp+0x78>)
    1f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f62:	b10b      	cbz	r3, 1f68 <tcv_rnp+0x50>
    1f64:	68db      	ldr	r3, [r3, #12]
    1f66:	b90b      	cbnz	r3, 1f6c <tcv_rnp+0x54>
    1f68:	490a      	ldr	r1, [pc, #40]	; (1f94 <tcv_rnp+0x7c>)
    1f6a:	e7de      	b.n	1f2a <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1f6c:	4621      	mov	r1, r4
    1f6e:	4628      	mov	r0, r5
    1f70:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1f72:	8823      	ldrh	r3, [r4, #0]
    1f74:	8862      	ldrh	r2, [r4, #2]
    1f76:	441a      	add	r2, r3
    1f78:	8923      	ldrh	r3, [r4, #8]
    1f7a:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    1f7c:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    1f7e:	4628      	mov	r0, r5
    1f80:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    1f82:	2500      	movs	r5, #0
    1f84:	e7fb      	b.n	1f7e <tcv_rnp+0x66>
    1f86:	bf00      	nop
    1f88:	20000598 	mulcs	r0, r8, r5
    1f8c:	00004eb5 			; <UNDEFINED> instruction: 0x00004eb5
    1f90:	200005dc 	ldrdcs	r0, [r0], -ip
    1f94:	00004ebb 			; <UNDEFINED> instruction: 0x00004ebb

00001f98 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    1f98:	2908      	cmp	r1, #8
								Boolean urg) {
    1f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f9c:	4605      	mov	r5, r0
    1f9e:	4614      	mov	r4, r2
    1fa0:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    1fa2:	d803      	bhi.n	1fac <tcv_wnps+0x14>
    1fa4:	4b26      	ldr	r3, [pc, #152]	; (2040 <tcv_wnps+0xa8>)
    1fa6:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    1faa:	b91f      	cbnz	r7, 1fb4 <tcv_wnps+0x1c>
    1fac:	4925      	ldr	r1, [pc, #148]	; (2044 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    1fae:	200a      	movs	r0, #10
    1fb0:	f7fe fdae 	bl	b10 <__pi_syserror>
    1fb4:	7a7b      	ldrb	r3, [r7, #9]
    1fb6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1fba:	2b02      	cmp	r3, #2
    1fbc:	d805      	bhi.n	1fca <tcv_wnps+0x32>
    1fbe:	4a22      	ldr	r2, [pc, #136]	; (2048 <tcv_wnps+0xb0>)
    1fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fc4:	b10b      	cbz	r3, 1fca <tcv_wnps+0x32>
    1fc6:	68db      	ldr	r3, [r3, #12]
    1fc8:	b90b      	cbnz	r3, 1fce <tcv_wnps+0x36>
    1fca:	4920      	ldr	r1, [pc, #128]	; (204c <tcv_wnps+0xb4>)
    1fcc:	e7ef      	b.n	1fae <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    1fce:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd2:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    1fd4:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd8:	a901      	add	r1, sp, #4
    1fda:	4798      	blx	r3
    1fdc:	b158      	cbz	r0, 1ff6 <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    1fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1fe2:	429d      	cmp	r5, r3
    1fe4:	d102      	bne.n	1fec <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    1fe6:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    1fe8:	b003      	add	sp, #12
    1fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    1fec:	4629      	mov	r1, r5
    1fee:	f7ff fbbd 	bl	176c <__pi_wait>
			release;
    1ff2:	f7ff f94b 	bl	128c <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1ff6:	7a3b      	ldrb	r3, [r7, #8]
    1ff8:	07db      	lsls	r3, r3, #31
    1ffa:	d501      	bpl.n	2000 <tcv_wnps+0x68>
    1ffc:	4914      	ldr	r1, [pc, #80]	; (2050 <tcv_wnps+0xb8>)
    1ffe:	e7d6      	b.n	1fae <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2000:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2004:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2008:	b2a4      	uxth	r4, r4
    200a:	4418      	add	r0, r3
    200c:	4420      	add	r0, r4
    200e:	b280      	uxth	r0, r0
    2010:	f7ff fe4c 	bl	1cac <apb>
    2014:	b938      	cbnz	r0, 2026 <tcv_wnps+0x8e>
		if (state != WNONE) {
    2016:	f64f 73ff 	movw	r3, #65535	; 0xffff
    201a:	429d      	cmp	r5, r3
    201c:	d0e3      	beq.n	1fe6 <tcv_wnps+0x4e>
			tmwait (state);
    201e:	4628      	mov	r0, r5
    2020:	f7ff fd88 	bl	1b34 <__pi_waitmem>
    2024:	e7e5      	b.n	1ff2 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    2026:	893b      	ldrh	r3, [r7, #8]
    2028:	8143      	strh	r3, [r0, #10]
	if (urg)
    202a:	b11e      	cbz	r6, 2034 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    202c:	7a83      	ldrb	r3, [r0, #10]
    202e:	f043 0304 	orr.w	r3, r3, #4
    2032:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    2034:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    2038:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    203a:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    203c:	300c      	adds	r0, #12
    203e:	e7d3      	b.n	1fe8 <tcv_wnps+0x50>
    2040:	20000598 	mulcs	r0, r8, r5
    2044:	00004ec1 	andeq	r4, r0, r1, asr #29
    2048:	200005dc 	ldrdcs	r0, [r0], -ip
    204c:	00004ec7 	andeq	r4, r0, r7, asr #29
    2050:	00004ecd 	andeq	r4, r0, sp, asr #29

00002054 <tcv_read>:

__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2054:	b538      	push	{r3, r4, r5, lr}
    2056:	4604      	mov	r4, r0
/*
 * Extracts (up to) len bytes from the packet
 */
	hblock_t *b = header (p);

	if (len >= b->u.pointers.tail)
    2058:	f834 5c0a 	ldrh.w	r5, [r4, #-10]
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    205c:	4608      	mov	r0, r1
    205e:	4295      	cmp	r5, r2
    2060:	bfa8      	it	ge
    2062:	4615      	movge	r5, r2
		len = b->u.pointers.tail;

	if (len > 0) {
    2064:	2d00      	cmp	r5, #0
    2066:	dd10      	ble.n	208a <tcv_read+0x36>
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2068:	f834 1c0c 	ldrh.w	r1, [r4, #-12]
    206c:	462a      	mov	r2, r5
    206e:	4421      	add	r1, r4
    2070:	f7ff fc0d 	bl	188e <__pi_memcpy>
		b->u.pointers.tail -= len;
    2074:	f834 2c0a 	ldrh.w	r2, [r4, #-10]
    2078:	b2ab      	uxth	r3, r5
    207a:	1ad2      	subs	r2, r2, r3
    207c:	f824 2c0a 	strh.w	r2, [r4, #-10]
		b->u.pointers.head += len;
    2080:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    2084:	4413      	add	r3, r2
    2086:	f824 3c0c 	strh.w	r3, [r4, #-12]
	}

	return len;
}
    208a:	4628      	mov	r0, r5
    208c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002090 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2090:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    2092:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2094:	4608      	mov	r0, r1
    2096:	b510      	push	{r4, lr}
    2098:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    209a:	d803      	bhi.n	20a4 <tcvp_control+0x14>
    209c:	4a05      	ldr	r2, [pc, #20]	; (20b4 <tcvp_control+0x24>)
    209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    20a2:	b91b      	cbnz	r3, 20ac <tcvp_control+0x1c>
    20a4:	200a      	movs	r0, #10
    20a6:	4904      	ldr	r1, [pc, #16]	; (20b8 <tcvp_control+0x28>)
    20a8:	f7fe fd32 	bl	b10 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    20ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    20b0:	4718      	bx	r3
    20b2:	bf00      	nop
    20b4:	200005c4 	andcs	r0, r0, r4, asr #11
    20b8:	00004ed3 	ldrdeq	r4, [r0], -r3

000020bc <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    20bc:	b508      	push	{r3, lr}
	if (opt < 0) {
    20be:	1e0b      	subs	r3, r1, #0
    20c0:	da11      	bge.n	20e6 <tcv_control+0x2a>
		if (fd < 0)
    20c2:	2800      	cmp	r0, #0
    20c4:	db1f      	blt.n	2106 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    20c6:	3301      	adds	r3, #1
    20c8:	d107      	bne.n	20da <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    20ca:	2802      	cmp	r0, #2
    20cc:	dc1b      	bgt.n	2106 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    20ce:	4b0f      	ldr	r3, [pc, #60]	; (210c <tcv_control+0x50>)
    20d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    20d4:	b100      	cbz	r0, 20d8 <tcv_control+0x1c>
			return p->tcv_info;
    20d6:	69c0      	ldr	r0, [r0, #28]
}
    20d8:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    20da:	2802      	cmp	r0, #2
    20dc:	dc13      	bgt.n	2106 <tcv_control+0x4a>
		return physinfo [fd];
    20de:	4b0c      	ldr	r3, [pc, #48]	; (2110 <tcv_control+0x54>)
    20e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    20e4:	e7f8      	b.n	20d8 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    20e6:	2808      	cmp	r0, #8
    20e8:	d803      	bhi.n	20f2 <tcv_control+0x36>
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <tcv_control+0x58>)
    20ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    20f0:	b91b      	cbnz	r3, 20fa <tcv_control+0x3e>
    20f2:	200a      	movs	r0, #10
    20f4:	4908      	ldr	r1, [pc, #32]	; (2118 <tcv_control+0x5c>)
    20f6:	f7fe fd0b 	bl	b10 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    20fa:	7a58      	ldrb	r0, [r3, #9]
}
    20fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2100:	0940      	lsrs	r0, r0, #5
    2102:	f7ff bfc5 	b.w	2090 <tcvp_control>
			return 0;
    2106:	2000      	movs	r0, #0
    2108:	e7e6      	b.n	20d8 <tcv_control+0x1c>
    210a:	bf00      	nop
    210c:	200005dc 	ldrdcs	r0, [r0], -ip
    2110:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2114:	20000598 	mulcs	r0, r8, r5
    2118:	00004ed9 	ldrdeq	r4, [r0], -r9

0000211c <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211e:	b280      	uxth	r0, r0
    2120:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    2122:	460e      	mov	r6, r1
    2124:	b309      	cbz	r1, 216a <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    2126:	1c53      	adds	r3, r2, #1
    2128:	d103      	bne.n	2132 <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    212a:	2003      	movs	r0, #3
    212c:	4912      	ldr	r1, [pc, #72]	; (2178 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    212e:	f7fe fcef 	bl	b10 <__pi_syserror>
    2132:	2a08      	cmp	r2, #8
    2134:	d803      	bhi.n	213e <tcvp_new+0x22>
    2136:	4f11      	ldr	r7, [pc, #68]	; (217c <tcvp_new+0x60>)
    2138:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    213c:	b913      	cbnz	r3, 2144 <tcvp_new+0x28>
    213e:	200a      	movs	r0, #10
    2140:	490f      	ldr	r1, [pc, #60]	; (2180 <tcvp_new+0x64>)
    2142:	e7f4      	b.n	212e <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    2144:	f7ff fdb2 	bl	1cac <apb>
    2148:	4604      	mov	r4, r0
    214a:	b908      	cbnz	r0, 2150 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    214c:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    2150:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    2154:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    2156:	891b      	ldrh	r3, [r3, #8]
    2158:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    215a:	f36f 0341 	bfc	r3, #1, #1
    215e:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    2160:	f7ff fdea 	bl	1d38 <dispose>
			return (address)(p + 1);
    2164:	f104 000c 	add.w	r0, r4, #12
    2168:	e7f1      	b.n	214e <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    216a:	f7ff fd9f 	bl	1cac <apb>
    216e:	2800      	cmp	r0, #0
    2170:	d0ec      	beq.n	214c <tcvp_new+0x30>
		return (address)(p + 1);
    2172:	300c      	adds	r0, #12
    2174:	e7eb      	b.n	214e <tcvp_new+0x32>
    2176:	bf00      	nop
    2178:	00004edf 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    217c:	20000598 	mulcs	r0, r8, r5
    2180:	00004ee5 	andeq	r4, r0, r5, ror #29

00002184 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2184:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2186:	b510      	push	{r4, lr}
    2188:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    218a:	d803      	bhi.n	2194 <tcvphy_reg+0x10>
    218c:	4b0c      	ldr	r3, [pc, #48]	; (21c0 <tcvphy_reg+0x3c>)
    218e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2192:	b118      	cbz	r0, 219c <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    2194:	2003      	movs	r0, #3
    2196:	490b      	ldr	r1, [pc, #44]	; (21c4 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    2198:	f7fe fcba 	bl	b10 <__pi_syserror>
	physical [phy] = ps;
    219c:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    21a0:	4b09      	ldr	r3, [pc, #36]	; (21c8 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a2:	2008      	movs	r0, #8
	physinfo [phy] = info;
    21a4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a8:	f7ff fc56 	bl	1a58 <__pi_malloc>
    21ac:	4a07      	ldr	r2, [pc, #28]	; (21cc <tcvphy_reg+0x48>)
    21ae:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    21b2:	b910      	cbnz	r0, 21ba <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    21b4:	2006      	movs	r0, #6
    21b6:	4906      	ldr	r1, [pc, #24]	; (21d0 <tcvphy_reg+0x4c>)
    21b8:	e7ee      	b.n	2198 <tcvphy_reg+0x14>
	q_init (q);
    21ba:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    21be:	bd10      	pop	{r4, pc}
    21c0:	200005c4 	andcs	r0, r0, r4, asr #11
    21c4:	00004eeb 	andeq	r4, r0, fp, ror #29
    21c8:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    21cc:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    21d0:	00004ef1 	strdeq	r4, [r0], -r1

000021d4 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    21d8:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21da:	4605      	mov	r5, r0
    21dc:	460f      	mov	r7, r1
    21de:	4614      	mov	r4, r2
    21e0:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    21e2:	d803      	bhi.n	21ec <tcvphy_rcv+0x18>
    21e4:	4b1e      	ldr	r3, [pc, #120]	; (2260 <tcvphy_rcv+0x8c>)
    21e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    21ea:	b91b      	cbnz	r3, 21f4 <tcvphy_rcv+0x20>
    21ec:	491d      	ldr	r1, [pc, #116]	; (2264 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    21ee:	200a      	movs	r0, #10
    21f0:	f7fe fc8e 	bl	b10 <__pi_syserror>
    21f4:	4e1c      	ldr	r6, [pc, #112]	; (2268 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    21f6:	f10d 080c 	add.w	r8, sp, #12
    21fa:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    21fe:	6833      	ldr	r3, [r6, #0]
    2200:	46b1      	mov	r9, r6
    2202:	3e04      	subs	r6, #4
    2204:	b92b      	cbnz	r3, 2212 <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2206:	45ca      	cmp	sl, r9
    2208:	d1f9      	bne.n	21fe <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    220a:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    220c:	b005      	add	sp, #20
    220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2212:	f8d3 b008 	ldr.w	fp, [r3, #8]
    2216:	f1bb 0f00 	cmp.w	fp, #0
    221a:	d101      	bne.n	2220 <tcvphy_rcv+0x4c>
    221c:	4913      	ldr	r1, [pc, #76]	; (226c <tcvphy_rcv+0x98>)
    221e:	e7e6      	b.n	21ee <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2220:	4639      	mov	r1, r7
    2222:	4622      	mov	r2, r4
    2224:	4628      	mov	r0, r5
    2226:	f8cd 8000 	str.w	r8, [sp]
    222a:	ab02      	add	r3, sp, #8
    222c:	47d8      	blx	fp
    222e:	4601      	mov	r1, r0
    2230:	2800      	cmp	r0, #0
    2232:	d0e8      	beq.n	2206 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2234:	2801      	cmp	r0, #1
    2236:	d0e8      	beq.n	220a <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    2238:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    223c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2240:	441a      	add	r2, r3
    2242:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2244:	4620      	mov	r0, r4
    2246:	9a02      	ldr	r2, [sp, #8]
    2248:	f7ff ff68 	bl	211c <tcvp_new>
    224c:	2800      	cmp	r0, #0
    224e:	d0dc      	beq.n	220a <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2250:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    2254:	4622      	mov	r2, r4
    2256:	4439      	add	r1, r7
    2258:	f7ff fb19 	bl	188e <__pi_memcpy>
	return 1;
    225c:	2001      	movs	r0, #1
    225e:	e7d5      	b.n	220c <tcvphy_rcv+0x38>
    2260:	200005c4 	andcs	r0, r0, r4, asr #11
    2264:	00004ef7 	strdeq	r4, [r0], -r7
    2268:	200005e4 	andcs	r0, r0, r4, ror #11
    226c:	00004efd 	strdeq	r4, [r0], -sp

00002270 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    2270:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    2272:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    2274:	d803      	bhi.n	227e <tcvphy_get+0xe>
    2276:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <tcvphy_get+0x34>)
    2278:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    227c:	b91b      	cbnz	r3, 2286 <tcvphy_get+0x16>
    227e:	200a      	movs	r0, #10
    2280:	4909      	ldr	r1, [pc, #36]	; (22a8 <tcvphy_get+0x38>)
    2282:	f7fe fc45 	bl	b10 <__pi_syserror>

	oq = oqueues [phy];
    2286:	4b09      	ldr	r3, [pc, #36]	; (22ac <tcvphy_get+0x3c>)
    2288:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    228c:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    228e:	4283      	cmp	r3, r0
    2290:	d005      	beq.n	229e <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    2292:	8903      	ldrh	r3, [r0, #8]
    2294:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    2296:	f7ff fd14 	bl	1cc2 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    229a:	300c      	adds	r0, #12
}
    229c:	bd08      	pop	{r3, pc}
		return NULL;
    229e:	2000      	movs	r0, #0
    22a0:	e7fc      	b.n	229c <tcvphy_get+0x2c>
    22a2:	bf00      	nop
    22a4:	200005c4 	andcs	r0, r0, r4, asr #11
    22a8:	00004f03 	andeq	r4, r0, r3, lsl #30
    22ac:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

000022b0 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    22b0:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    22b2:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    22b4:	d803      	bhi.n	22be <tcvphy_top+0xe>
    22b6:	4b08      	ldr	r3, [pc, #32]	; (22d8 <tcvphy_top+0x28>)
    22b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    22bc:	b91b      	cbnz	r3, 22c6 <tcvphy_top+0x16>
    22be:	200a      	movs	r0, #10
    22c0:	4906      	ldr	r1, [pc, #24]	; (22dc <tcvphy_top+0x2c>)
    22c2:	f7fe fc25 	bl	b10 <__pi_syserror>

	oq = oqueues [phy];
    22c6:	4b06      	ldr	r3, [pc, #24]	; (22e0 <tcvphy_top+0x30>)
    22c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    22cc:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    22ce:	4283      	cmp	r3, r0
		return NULL;
    22d0:	bf0c      	ite	eq
    22d2:	2000      	moveq	r0, #0

	return (address)(b + 1);
    22d4:	300c      	addne	r0, #12
}
    22d6:	bd08      	pop	{r3, pc}
    22d8:	200005c4 	andcs	r0, r0, r4, asr #11
    22dc:	00004f09 	andeq	r4, r0, r9, lsl #30
    22e0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

000022e4 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    22e4:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    22e6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    22ea:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    22ee:	f3c3 0382 	ubfx	r3, r3, #2, #3
    22f2:	2b02      	cmp	r3, #2
    22f4:	d805      	bhi.n	2302 <tcvphy_end+0x1e>
    22f6:	4a08      	ldr	r2, [pc, #32]	; (2318 <tcvphy_end+0x34>)
    22f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22fc:	b10b      	cbz	r3, 2302 <tcvphy_end+0x1e>
    22fe:	695b      	ldr	r3, [r3, #20]
    2300:	b91b      	cbnz	r3, 230a <tcvphy_end+0x26>
    2302:	200a      	movs	r0, #10
    2304:	4905      	ldr	r1, [pc, #20]	; (231c <tcvphy_end+0x38>)
    2306:	f7fe fc03 	bl	b10 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    230a:	4798      	blx	r3
    230c:	4601      	mov	r1, r0
    230e:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    2310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    2314:	f7ff bd10 	b.w	1d38 <dispose>
    2318:	200005dc 	ldrdcs	r0, [r0], -ip
    231c:	00004f0f 	andeq	r4, r0, pc, lsl #30

00002320 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    2320:	4770      	bx	lr

00002322 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    2322:	e7fe      	b.n	2322 <NmiSR>

00002324 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    2324:	e7fe      	b.n	2324 <FaultISR>

00002326 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    2326:	e7fe      	b.n	2326 <AONIntHandler>

00002328 <ResetISR>:
{
    2328:	b508      	push	{r3, lr}
    SetupTrimDevice();
    232a:	f001 fd15 	bl	3d58 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    232e:	4b0c      	ldr	r3, [pc, #48]	; (2360 <zero_loop+0x20>)
    pui32Src = &_etext;
    2330:	4a0c      	ldr	r2, [pc, #48]	; (2364 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2332:	490d      	ldr	r1, [pc, #52]	; (2368 <zero_loop+0x28>)
    2334:	428b      	cmp	r3, r1
    2336:	d30d      	bcc.n	2354 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    2338:	480c      	ldr	r0, [pc, #48]	; (236c <zero_loop+0x2c>)
    233a:	490d      	ldr	r1, [pc, #52]	; (2370 <zero_loop+0x30>)
    233c:	f04f 0200 	mov.w	r2, #0

00002340 <zero_loop>:
    2340:	4288      	cmp	r0, r1
    2342:	bfb8      	it	lt
    2344:	f840 2b04 	strlt.w	r2, [r0], #4
    2348:	dbfa      	blt.n	2340 <zero_loop>
   main();
    234a:	f7ff f8e3 	bl	1514 <main>
    FaultISR();
    234e:	f7ff ffe9 	bl	2324 <FaultISR>
}
    2352:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    2354:	f852 0b04 	ldr.w	r0, [r2], #4
    2358:	f843 0b04 	str.w	r0, [r3], #4
    235c:	e7ea      	b.n	2334 <ResetISR+0xc>
    235e:	bf00      	nop
    2360:	20000000 	andcs	r0, r0, r0
    2364:	00005918 	andeq	r5, r0, r8, lsl r9
    2368:	20000540 	andcs	r0, r0, r0, asr #10
    236c:	20000540 	andcs	r0, r0, r0, asr #10
    2370:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

00002374 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    2374:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    2376:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2378:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    237c:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    237e:	4907      	ldr	r1, [pc, #28]	; (239c <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2380:	4d07      	ldr	r5, [pc, #28]	; (23a0 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2382:	4c08      	ldr	r4, [pc, #32]	; (23a4 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2384:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    2386:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    2388:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    238a:	b2c0      	uxtb	r0, r0
			b |= 1;
    238c:	bf48      	it	mi
    238e:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    2392:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2394:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2396:	600a      	str	r2, [r1, #0]
    2398:	d1f4      	bne.n	2384 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    239a:	bd70      	pop	{r4, r5, r6, pc}
    239c:	400220a0 	andmi	r2, r2, r0, lsr #1
    23a0:	400220c0 	andmi	r2, r2, r0, asr #1
    23a4:	40022090 	mulmi	r2, r0, r0

000023a8 <put_byte>:

static void put_byte (byte b) {
    23a8:	b530      	push	{r4, r5, lr}
    23aa:	2308      	movs	r3, #8
    23ac:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    23b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    23b4:	4c06      	ldr	r4, [pc, #24]	; (23d0 <put_byte+0x28>)
    23b6:	4a07      	ldr	r2, [pc, #28]	; (23d4 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    23b8:	f010 0f80 	tst.w	r0, #128	; 0x80
    23bc:	bf14      	ite	ne
    23be:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23c0:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    23c2:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    23c4:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    23c6:	6021      	str	r1, [r4, #0]
		b <<= 1;
    23c8:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23ca:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    23cc:	d1f4      	bne.n	23b8 <put_byte+0x10>
	}
}
    23ce:	bd30      	pop	{r4, r5, pc}
    23d0:	40022090 	mulmi	r2, r0, r0
    23d4:	400220a0 	andmi	r2, r2, r0, lsr #1

000023d8 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    23d8:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    23da:	b510      	push	{r4, lr}
    23dc:	4c03      	ldr	r4, [pc, #12]	; (23ec <cmd_0+0x14>)
    23de:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    23e0:	f7ff ffe2 	bl	23a8 <put_byte>
    23e4:	2300      	movs	r3, #0
    23e6:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    23e8:	bd10      	pop	{r4, pc}
    23ea:	bf00      	nop
    23ec:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000023f0 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    23f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23f4:	4604      	mov	r4, r0
    23f6:	460d      	mov	r5, r1
    23f8:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    23fa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2440 <wwait+0x50>
    23fe:	4e0f      	ldr	r6, [pc, #60]	; (243c <wwait+0x4c>)
    2400:	f898 3000 	ldrb.w	r3, [r8]
    2404:	b14b      	cbz	r3, 241a <wwait+0x2a>
	put_byte (CMD_RDSR);
    2406:	2005      	movs	r0, #5
    2408:	6037      	str	r7, [r6, #0]
    240a:	f7ff ffcd 	bl	23a8 <put_byte>
	r = get_byte ();
    240e:	f7ff ffb1 	bl	2374 <get_byte>
    2412:	2300      	movs	r3, #0
    2414:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    2416:	07c3      	lsls	r3, r0, #31
    2418:	d401      	bmi.n	241e <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2422:	429c      	cmp	r4, r3
    2424:	d103      	bne.n	242e <wwait+0x3e>
			mdelay (1);
    2426:	2001      	movs	r0, #1
    2428:	f7fe fb1e 	bl	a68 <mdelay>
    242c:	e7e8      	b.n	2400 <wwait+0x10>
			delay (del, st);
    242e:	4621      	mov	r1, r4
    2430:	4628      	mov	r0, r5
    2432:	f7ff f9e1 	bl	17f8 <delay>
			release;
    2436:	f7fe ff29 	bl	128c <__pi_release>
    243a:	bf00      	nop
    243c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    2440:	200005e8 	andcs	r0, r0, r8, ror #11

00002444 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    2444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    2446:	4d0c      	ldr	r5, [pc, #48]	; (2478 <ready+0x34>)
    2448:	782f      	ldrb	r7, [r5, #0]
    244a:	b147      	cbz	r7, 245e <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    244c:	2101      	movs	r1, #1
    244e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2452:	f7ff ffcd 	bl	23f0 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    2456:	2200      	movs	r2, #0
    2458:	4b08      	ldr	r3, [pc, #32]	; (247c <ready+0x38>)
    245a:	701a      	strb	r2, [r3, #0]
}
    245c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    245e:	2401      	movs	r4, #1
    2460:	4e07      	ldr	r6, [pc, #28]	; (2480 <ready+0x3c>)
	udelay (1);
    2462:	4620      	mov	r0, r4
    2464:	6034      	str	r4, [r6, #0]
    2466:	f7fe fae9 	bl	a3c <udelay>
	udelay (1);
    246a:	4620      	mov	r0, r4
    246c:	6037      	str	r7, [r6, #0]
    246e:	f7fe fae5 	bl	a3c <udelay>
		dopen = DOPEN_TEMP;
    2472:	2302      	movs	r3, #2
    2474:	702b      	strb	r3, [r5, #0]
    2476:	e7ee      	b.n	2456 <ready+0x12>
    2478:	200005e8 	andcs	r0, r0, r8, ror #11
    247c:	200005e9 	andcs	r0, r0, r9, ror #11
    2480:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002484 <cclose>:
static void cclose () {
    2484:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    2486:	4c07      	ldr	r4, [pc, #28]	; (24a4 <cclose+0x20>)
    2488:	7823      	ldrb	r3, [r4, #0]
    248a:	2b02      	cmp	r3, #2
    248c:	d109      	bne.n	24a2 <cclose+0x1e>
		wwait (WNONE, 1);
    248e:	2101      	movs	r1, #1
    2490:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2494:	f7ff ffac 	bl	23f0 <wwait>
	cmd_0 (CMD_DP);
    2498:	20b9      	movs	r0, #185	; 0xb9
    249a:	f7ff ff9d 	bl	23d8 <cmd_0>
		dopen = 0;
    249e:	2300      	movs	r3, #0
    24a0:	7023      	strb	r3, [r4, #0]
}
    24a2:	bd10      	pop	{r4, pc}
    24a4:	200005e8 	andcs	r0, r0, r8, ror #11

000024a8 <ee_open>:

// ============================================================================

word ee_open () {
    24a8:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    24aa:	f7ff ffcb 	bl	2444 <ready>
	dopen = DOPEN_PERM;
    24ae:	2201      	movs	r2, #1
    24b0:	4b01      	ldr	r3, [pc, #4]	; (24b8 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    24b2:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    24b4:	701a      	strb	r2, [r3, #0]
}
    24b6:	bd08      	pop	{r3, pc}
    24b8:	200005e8 	andcs	r0, r0, r8, ror #11

000024bc <ee_close>:

void ee_close () {

	if (dopen) {
    24bc:	4b03      	ldr	r3, [pc, #12]	; (24cc <ee_close+0x10>)
    24be:	781a      	ldrb	r2, [r3, #0]
    24c0:	b11a      	cbz	r2, 24ca <ee_close+0xe>
		dopen = DOPEN_TEMP;
    24c2:	2202      	movs	r2, #2
    24c4:	701a      	strb	r2, [r3, #0]
		cclose ();
    24c6:	f7ff bfdd 	b.w	2484 <cclose>
	}
}
    24ca:	4770      	bx	lr
    24cc:	200005e8 	andcs	r0, r0, r8, ror #11

000024d0 <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    24d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24d2:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    24d4:	4818      	ldr	r0, [pc, #96]	; (2538 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    24d6:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    24d8:	f7ff f9aa 	bl	1830 <running>
    24dc:	b120      	cbz	r0, 24e8 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    24de:	4631      	mov	r1, r6
    24e0:	f7ff f978 	bl	17d4 <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    24e4:	f7fe fed2 	bl	128c <__pi_release>
	if (*m)
    24e8:	7823      	ldrb	r3, [r4, #0]
    24ea:	b163      	cbz	r3, 2506 <ser_out+0x36>
		prcs = strlen (m) +1;
    24ec:	4620      	mov	r0, r4
    24ee:	f7ff f9b1 	bl	1854 <__pi_strlen>
    24f2:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    24f4:	b2a8      	uxth	r0, r5
    24f6:	f7ff faaf 	bl	1a58 <__pi_malloc>
    24fa:	4607      	mov	r7, r0
    24fc:	b930      	cbnz	r0, 250c <ser_out+0x3c>
		umwait (st);
    24fe:	4630      	mov	r0, r6
    2500:	f7ff fb18 	bl	1b34 <__pi_waitmem>
    2504:	e7ee      	b.n	24e4 <ser_out+0x14>
		prcs =  m [1] + 3;
    2506:	7865      	ldrb	r5, [r4, #1]
    2508:	3503      	adds	r5, #3
    250a:	e7f3      	b.n	24f4 <ser_out+0x24>
	}

	if (*m)
    250c:	7823      	ldrb	r3, [r4, #0]
    250e:	b15b      	cbz	r3, 2528 <ser_out+0x58>
		strcpy (buf, m);
    2510:	4621      	mov	r1, r4
    2512:	f7ff f9a6 	bl	1862 <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    2516:	4639      	mov	r1, r7
    2518:	4807      	ldr	r0, [pc, #28]	; (2538 <ser_out+0x68>)
    251a:	f7ff faf1 	bl	1b00 <__pi_fork>
    251e:	b940      	cbnz	r0, 2532 <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    2520:	4638      	mov	r0, r7
    2522:	f7ff fa4d 	bl	19c0 <__pi_free>
		// and wait for a process slot
		npwait (st);
    2526:	e7ea      	b.n	24fe <ser_out+0x2e>
		memcpy (buf, m, prcs);
    2528:	462a      	mov	r2, r5
    252a:	4621      	mov	r1, r4
    252c:	f7ff f9af 	bl	188e <__pi_memcpy>
    2530:	e7f1      	b.n	2516 <ser_out+0x46>
		release;
	}

	return 0;
}
    2532:	2000      	movs	r0, #0
    2534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2536:	bf00      	nop
    2538:	00002fdd 	ldrdeq	r2, [r0], -sp

0000253c <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    253e:	4604      	mov	r4, r0
    2540:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    2542:	4615      	mov	r5, r2
    2544:	b37a      	cbz	r2, 25a6 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    2546:	4e19      	ldr	r6, [pc, #100]	; (25ac <ser_in+0x70>)
    2548:	6830      	ldr	r0, [r6, #0]
    254a:	b988      	cbnz	r0, 2570 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    254c:	4818      	ldr	r0, [pc, #96]	; (25b0 <ser_in+0x74>)
    254e:	f7ff f96f 	bl	1830 <running>
    2552:	b948      	cbnz	r0, 2568 <ser_in+0x2c>
			prcs = runthread (__inserial);
    2554:	4601      	mov	r1, r0
    2556:	4816      	ldr	r0, [pc, #88]	; (25b0 <ser_in+0x74>)
    2558:	f7ff fad2 	bl	1b00 <__pi_fork>
			if (prcs == 0) {
    255c:	b920      	cbnz	r0, 2568 <ser_in+0x2c>
				npwait (st);
    255e:	4620      	mov	r0, r4
    2560:	f7ff fae8 	bl	1b34 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    2564:	f7fe fe92 	bl	128c <__pi_release>
		join (prcs, st);
    2568:	4621      	mov	r1, r4
    256a:	f7ff f933 	bl	17d4 <__pi_join>
    256e:	e7f9      	b.n	2564 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    2570:	7803      	ldrb	r3, [r0, #0]
    2572:	b9a3      	cbnz	r3, 259e <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2574:	7844      	ldrb	r4, [r0, #1]
    2576:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    2578:	42ac      	cmp	r4, r5
		prcs = len-1;
    257a:	bfa8      	it	ge
    257c:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    2580:	4622      	mov	r2, r4
    2582:	4638      	mov	r0, r7
    2584:	6831      	ldr	r1, [r6, #0]
    2586:	f7ff f982 	bl	188e <__pi_memcpy>
	ufree (__inpline);
    258a:	6830      	ldr	r0, [r6, #0]
    258c:	f7ff fa18 	bl	19c0 <__pi_free>
	__inpline = NULL;
    2590:	2300      	movs	r3, #0
    2592:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    2594:	783a      	ldrb	r2, [r7, #0]
    2596:	b102      	cbz	r2, 259a <ser_in+0x5e>
		buf [prcs] = '\0';
    2598:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    259a:	4620      	mov	r0, r4
    259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    259e:	f7ff f959 	bl	1854 <__pi_strlen>
    25a2:	4604      	mov	r4, r0
    25a4:	e7e8      	b.n	2578 <ser_in+0x3c>
		return 0;
    25a6:	4614      	mov	r4, r2
    25a8:	e7f7      	b.n	259a <ser_in+0x5e>
    25aa:	bf00      	nop
    25ac:	20000634 	andcs	r0, r0, r4, lsr r6
    25b0:	0000304d 	andeq	r3, r0, sp, asr #32

000025b4 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    25b4:	b40e      	push	{r1, r2, r3}
    25b6:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    25b8:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    25ba:	4812      	ldr	r0, [pc, #72]	; (2604 <ser_outf+0x50>)
    25bc:	f7ff f938 	bl	1830 <running>
    25c0:	4606      	mov	r6, r0
    25c2:	b120      	cbz	r0, 25ce <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    25c4:	4621      	mov	r1, r4
    25c6:	f7ff f905 	bl	17d4 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    25ca:	f7fe fe5f 	bl	128c <__pi_release>
	va_start (ap, m);
    25ce:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d0:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    25d2:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d4:	f000 fef0 	bl	33b8 <vform>
    25d8:	4605      	mov	r5, r0
    25da:	b918      	cbnz	r0, 25e4 <ser_outf+0x30>
		umwait (st);
    25dc:	4620      	mov	r0, r4
    25de:	f7ff faa9 	bl	1b34 <__pi_waitmem>
    25e2:	e7f2      	b.n	25ca <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    25e4:	4601      	mov	r1, r0
    25e6:	4807      	ldr	r0, [pc, #28]	; (2604 <ser_outf+0x50>)
    25e8:	f7ff fa8a 	bl	1b00 <__pi_fork>
    25ec:	b918      	cbnz	r0, 25f6 <ser_outf+0x42>
		ufree (buf);
    25ee:	4628      	mov	r0, r5
    25f0:	f7ff f9e6 	bl	19c0 <__pi_free>
		npwait (st);
    25f4:	e7f2      	b.n	25dc <ser_outf+0x28>
		release;
	}

	return 0;
}
    25f6:	4630      	mov	r0, r6
    25f8:	b003      	add	sp, #12
    25fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25fe:	b003      	add	sp, #12
    2600:	4770      	bx	lr
    2602:	bf00      	nop
    2604:	00002fdd 	ldrdeq	r2, [r0], -sp

00002608 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    2608:	b40e      	push	{r1, r2, r3}
    260a:	b533      	push	{r0, r1, r4, r5, lr}
    260c:	9905      	ldr	r1, [sp, #20]
    260e:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    2610:	b321      	cbz	r1, 265c <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    2612:	4d13      	ldr	r5, [pc, #76]	; (2660 <ser_inf+0x58>)
    2614:	6828      	ldr	r0, [r5, #0]
    2616:	b988      	cbnz	r0, 263c <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2618:	4812      	ldr	r0, [pc, #72]	; (2664 <ser_inf+0x5c>)
    261a:	f7ff f909 	bl	1830 <running>
    261e:	b948      	cbnz	r0, 2634 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    2620:	4601      	mov	r1, r0
    2622:	4810      	ldr	r0, [pc, #64]	; (2664 <ser_inf+0x5c>)
    2624:	f7ff fa6c 	bl	1b00 <__pi_fork>
			if (prcs == 0) {
    2628:	b920      	cbnz	r0, 2634 <ser_inf+0x2c>
				npwait (st);
    262a:	4620      	mov	r0, r4
    262c:	f7ff fa82 	bl	1b34 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    2630:	f7fe fe2c 	bl	128c <__pi_release>
		join (prcs, st);
    2634:	4621      	mov	r1, r4
    2636:	f7ff f8cd 	bl	17d4 <__pi_join>
    263a:	e7f9      	b.n	2630 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    263c:	aa06      	add	r2, sp, #24
    263e:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    2640:	f000 fee2 	bl	3408 <vscan>
    2644:	4604      	mov	r4, r0

	ufree (__inpline);
    2646:	6828      	ldr	r0, [r5, #0]
    2648:	f7ff f9ba 	bl	19c0 <__pi_free>
	__inpline = NULL;
    264c:	2300      	movs	r3, #0
    264e:	602b      	str	r3, [r5, #0]

	return prcs;
}
    2650:	4620      	mov	r0, r4
    2652:	b002      	add	sp, #8
    2654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2658:	b003      	add	sp, #12
    265a:	4770      	bx	lr
		return 0;
    265c:	460c      	mov	r4, r1
    265e:	e7f7      	b.n	2650 <ser_inf+0x48>
    2660:	20000634 	andcs	r0, r0, r4, lsr r6
    2664:	0000304d 	andeq	r3, r0, sp, asr #32

00002668 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <plugch+0x14>)
    266a:	4a05      	ldr	r2, [pc, #20]	; (2680 <plugch+0x18>)
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	f503 7359 	add.w	r3, r3, #868	; 0x364
    2672:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    2674:	4a03      	ldr	r2, [pc, #12]	; (2684 <plugch+0x1c>)
    2676:	81d3      	strh	r3, [r2, #14]
}
    2678:	4770      	bx	lr
    267a:	bf00      	nop
    267c:	200005ec 	andcs	r0, r0, ip, ror #11
    2680:	20000054 	andcs	r0, r0, r4, asr r0
    2684:	2000003c 	andcs	r0, r0, ip, lsr r0

00002688 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2688:	b570      	push	{r4, r5, r6, lr}
    268a:	460c      	mov	r4, r1
    268c:	281a      	cmp	r0, #26
    268e:	f200 80a4 	bhi.w	27da <option+0x152>
    2692:	e8df f000 	tbb	[pc, r0]
    2696:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    269a:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    269e:	3b35445b 	blcc	d53812 <__ccfg+0xd3386a>
    26a2:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    26a6:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    26aa:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    26ae:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    26b2:	4b4c      	ldr	r3, [pc, #304]	; (27e4 <option+0x15c>)
    26b4:	7818      	ldrb	r0, [r3, #0]
    26b6:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    26ba:	3002      	adds	r0, #2
			goto RVal;
    26bc:	e028      	b.n	2710 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    26be:	4a49      	ldr	r2, [pc, #292]	; (27e4 <option+0x15c>)
    26c0:	7813      	ldrb	r3, [r2, #0]
    26c2:	f043 0301 	orr.w	r3, r3, #1
    26c6:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    26c8:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    26ca:	4b47      	ldr	r3, [pc, #284]	; (27e8 <option+0x160>)
    26cc:	6819      	ldr	r1, [r3, #0]
    26ce:	4b47      	ldr	r3, [pc, #284]	; (27ec <option+0x164>)
    26d0:	460c      	mov	r4, r1
    26d2:	681d      	ldr	r5, [r3, #0]
    26d4:	2300      	movs	r3, #0
    26d6:	f834 2b10 	ldrh.w	r2, [r4], #16
    26da:	f002 0207 	and.w	r2, r2, #7
    26de:	429a      	cmp	r2, r3
    26e0:	dd08      	ble.n	26f4 <option+0x6c>
    26e2:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    26e6:	3301      	adds	r3, #1
    26e8:	42ae      	cmp	r6, r5
    26ea:	d1f8      	bne.n	26de <option+0x56>
    26ec:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    26f0:	889b      	ldrh	r3, [r3, #4]
    26f2:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    26f4:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    26f6:	4a3b      	ldr	r2, [pc, #236]	; (27e4 <option+0x15c>)
    26f8:	7813      	ldrb	r3, [r2, #0]
    26fa:	f023 0301 	bic.w	r3, r3, #1
    26fe:	e7e2      	b.n	26c6 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    2700:	b101      	cbz	r1, 2704 <option+0x7c>
    2702:	880c      	ldrh	r4, [r1, #0]
    2704:	4b3a      	ldr	r3, [pc, #232]	; (27f0 <option+0x168>)
    2706:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    2708:	2000      	movs	r0, #0
    270a:	e7f3      	b.n	26f4 <option+0x6c>
			ret = (int) statid;
    270c:	4b38      	ldr	r3, [pc, #224]	; (27f0 <option+0x168>)
    270e:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    2710:	2c00      	cmp	r4, #0
    2712:	d0ef      	beq.n	26f4 <option+0x6c>
		*val = ret;
    2714:	8020      	strh	r0, [r4, #0]
	return ret;
    2716:	e7ed      	b.n	26f4 <option+0x6c>
			ret = rbuffl + 2;
    2718:	4b36      	ldr	r3, [pc, #216]	; (27f4 <option+0x16c>)
    271a:	7818      	ldrb	r0, [r3, #0]
    271c:	e7cd      	b.n	26ba <option+0x32>
				memcpy (val, &rxstat,
    271e:	220c      	movs	r2, #12
			if (val != NULL) {
    2720:	b121      	cbz	r1, 272c <option+0xa4>
				memcpy (val, &rxstat,
    2722:	4620      	mov	r0, r4
    2724:	4934      	ldr	r1, [pc, #208]	; (27f8 <option+0x170>)
    2726:	f7ff f8b2 	bl	188e <__pi_memcpy>
    272a:	e7ed      	b.n	2708 <option+0x80>
				memset (&rxstat, 0, 
    272c:	4832      	ldr	r0, [pc, #200]	; (27f8 <option+0x170>)
    272e:	f7ff f8b8 	bl	18a2 <__pi_memset>
    2732:	e7e9      	b.n	2708 <option+0x80>
			if (val == NULL)
    2734:	b941      	cbnz	r1, 2748 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2736:	f7ff faa7 	bl	1c88 <lrnd>
    273a:	f3c0 4105 	ubfx	r1, r0, #16, #6
    273e:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    2740:	482e      	ldr	r0, [pc, #184]	; (27fc <option+0x174>)
    2742:	f7fe ff9f 	bl	1684 <__pi_utimer_set>
    2746:	e7bf      	b.n	26c8 <option+0x40>
    2748:	8809      	ldrh	r1, [r1, #0]
    274a:	e7f9      	b.n	2740 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    274c:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    274e:	4b2c      	ldr	r3, [pc, #176]	; (2800 <option+0x178>)
    2750:	8b5a      	ldrh	r2, [r3, #26]
    2752:	4b2c      	ldr	r3, [pc, #176]	; (2804 <option+0x17c>)
					== patable [ret])
    2754:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    2758:	428a      	cmp	r2, r1
    275a:	d0d9      	beq.n	2710 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    275c:	3001      	adds	r0, #1
    275e:	2808      	cmp	r0, #8
    2760:	d1f8      	bne.n	2754 <option+0xcc>
    2762:	e7d5      	b.n	2710 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2764:	b119      	cbz	r1, 276e <option+0xe6>
				(*val > 7) ? 7 : *val;
    2766:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2768:	2807      	cmp	r0, #7
    276a:	bf28      	it	cs
    276c:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    276e:	4b25      	ldr	r3, [pc, #148]	; (2804 <option+0x17c>)
    2770:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2774:	4b22      	ldr	r3, [pc, #136]	; (2800 <option+0x178>)
    2776:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2778:	4a1a      	ldr	r2, [pc, #104]	; (27e4 <option+0x15c>)
    277a:	7813      	ldrb	r3, [r2, #0]
    277c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2780:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    2782:	e7a2      	b.n	26ca <option+0x42>
			ret = (int) channel;
    2784:	4b20      	ldr	r3, [pc, #128]	; (2808 <option+0x180>)
			ret = (int) vrate;
    2786:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2788:	e7c2      	b.n	2710 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    278a:	b121      	cbz	r1, 2796 <option+0x10e>
				(*val > 7) ? 7 : *val;
    278c:	880c      	ldrh	r4, [r1, #0]
    278e:	2c07      	cmp	r4, #7
    2790:	bf28      	it	cs
    2792:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2794:	b2e4      	uxtb	r4, r4
    2796:	4b1c      	ldr	r3, [pc, #112]	; (2808 <option+0x180>)
    2798:	701c      	strb	r4, [r3, #0]
			plugch ();
    279a:	f7ff ff65 	bl	2668 <plugch>
			_BIS (dstate, DSTATE_IRST);
    279e:	4a11      	ldr	r2, [pc, #68]	; (27e4 <option+0x15c>)
    27a0:	7813      	ldrb	r3, [r2, #0]
    27a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    27a6:	e78e      	b.n	26c6 <option+0x3e>
			ret = (int) vrate;
    27a8:	4b18      	ldr	r3, [pc, #96]	; (280c <option+0x184>)
    27aa:	e7ec      	b.n	2786 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27ac:	b139      	cbz	r1, 27be <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    27ae:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27b0:	2b03      	cmp	r3, #3
    27b2:	d806      	bhi.n	27c2 <option+0x13a>
    27b4:	b13b      	cbz	r3, 27c6 <option+0x13e>
    27b6:	b2db      	uxtb	r3, r3
    27b8:	4a14      	ldr	r2, [pc, #80]	; (280c <option+0x184>)
    27ba:	7013      	strb	r3, [r2, #0]
    27bc:	e7ed      	b.n	279a <option+0x112>
    27be:	2302      	movs	r3, #2
    27c0:	e7fa      	b.n	27b8 <option+0x130>
    27c2:	2303      	movs	r3, #3
    27c4:	e7f8      	b.n	27b8 <option+0x130>
    27c6:	2301      	movs	r3, #1
    27c8:	e7f6      	b.n	27b8 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27ca:	b119      	cbz	r1, 27d4 <option+0x14c>
    27cc:	880b      	ldrh	r3, [r1, #0]
    27ce:	4a10      	ldr	r2, [pc, #64]	; (2810 <option+0x188>)
    27d0:	8013      	strh	r3, [r2, #0]
			goto RRet;
    27d2:	e799      	b.n	2708 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    27d8:	e7f9      	b.n	27ce <option+0x146>
			syserror (EREQPAR, "cc13 op");
    27da:	2003      	movs	r0, #3
    27dc:	490d      	ldr	r1, [pc, #52]	; (2814 <option+0x18c>)
    27de:	f7fe f997 	bl	b10 <__pi_syserror>
    27e2:	bf00      	nop
    27e4:	200005f4 	strdcs	r0, [r0], -r4
    27e8:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    27ec:	20000600 	andcs	r0, r0, r0, lsl #12
    27f0:	20000624 	andcs	r0, r0, r4, lsr #12
    27f4:	20000604 	andcs	r0, r0, r4, lsl #12
    27f8:	20000618 	andcs	r0, r0, r8, lsl r6
    27fc:	200005ea 	andcs	r0, r0, sl, ror #11
    2800:	20000054 	andcs	r0, r0, r4, asr r0
    2804:	00004f82 	andeq	r4, r0, r2, lsl #31
    2808:	200005ec 	andcs	r0, r0, ip, ror #11
    280c:	2000003a 	andcs	r0, r0, sl, lsr r0
    2810:	20000038 	andcs	r0, r0, r8, lsr r0
    2814:	00004f1e 	andeq	r4, r0, lr, lsl pc

00002818 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2818:	b538      	push	{r3, r4, r5, lr}
    281a:	4604      	mov	r4, r0
    281c:	4d0c      	ldr	r5, [pc, #48]	; (2850 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    281e:	4620      	mov	r0, r4
    2820:	f001 f8a4 	bl	396c <NOROM_RFCDoorbellSendTo>
    2824:	b2c2      	uxtb	r2, r0
    2826:	2a01      	cmp	r2, #1
    2828:	d011      	beq.n	284e <issue_cmd+0x36>
		if (res != 0x86)
    282a:	2a86      	cmp	r2, #134	; 0x86
    282c:	d003      	beq.n	2836 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    282e:	4909      	ldr	r1, [pc, #36]	; (2854 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    2830:	2008      	movs	r0, #8
    2832:	f7fe f96d 	bl	b10 <__pi_syserror>
		if (cnt-- == 0) {
    2836:	3d01      	subs	r5, #1
    2838:	d105      	bne.n	2846 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    283a:	4621      	mov	r1, r4
    283c:	4806      	ldr	r0, [pc, #24]	; (2858 <issue_cmd+0x40>)
    283e:	f7ff f985 	bl	1b4c <diag>
			syserror (EHARDWARE, "hang ic0");
    2842:	4906      	ldr	r1, [pc, #24]	; (285c <issue_cmd+0x44>)
    2844:	e7f4      	b.n	2830 <issue_cmd+0x18>
		udelay (1);
    2846:	2001      	movs	r0, #1
    2848:	f7fe f8f8 	bl	a3c <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    284c:	e7e7      	b.n	281e <issue_cmd+0x6>
}
    284e:	bd38      	pop	{r3, r4, r5, pc}
    2850:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    2854:	00004f26 	andeq	r4, r0, r6, lsr #30
    2858:	00004f2a 	andeq	r4, r0, sl, lsr #30
    285c:	00004f36 	andeq	r4, r0, r6, lsr pc

00002860 <rx_de>:
static void rx_de () {
    2860:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    2862:	4c06      	ldr	r4, [pc, #24]	; (287c <rx_de+0x1c>)
    2864:	7823      	ldrb	r3, [r4, #0]
    2866:	079b      	lsls	r3, r3, #30
    2868:	d506      	bpl.n	2878 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    286a:	4805      	ldr	r0, [pc, #20]	; (2880 <rx_de+0x20>)
    286c:	f7ff ffd4 	bl	2818 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    2870:	7823      	ldrb	r3, [r4, #0]
    2872:	f023 0302 	bic.w	r3, r3, #2
    2876:	7023      	strb	r3, [r4, #0]
}
    2878:	bd10      	pop	{r4, pc}
    287a:	bf00      	nop
    287c:	200005f4 	strdcs	r0, [r0], -r4
    2880:	04010001 	streq	r0, [r1], #-1

00002884 <rf_off>:
static void rf_off () {
    2884:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2886:	4c11      	ldr	r4, [pc, #68]	; (28cc <rf_off+0x48>)
    2888:	7823      	ldrb	r3, [r4, #0]
    288a:	06db      	lsls	r3, r3, #27
    288c:	d51d      	bpl.n	28ca <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    288e:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2890:	4b0f      	ldr	r3, [pc, #60]	; (28d0 <rf_off+0x4c>)
    2892:	2019      	movs	r0, #25
    2894:	681b      	ldr	r3, [r3, #0]
    2896:	695b      	ldr	r3, [r3, #20]
    2898:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    289a:	2000      	movs	r0, #0
    289c:	f001 f9e4 	bl	3c68 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    28a0:	f001 f878 	bl	3994 <NOROM_RFCSynthPowerDown>
    28a4:	4b0b      	ldr	r3, [pc, #44]	; (28d4 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    28a6:	2001      	movs	r0, #1
    28a8:	601d      	str	r5, [r3, #0]
    28aa:	f7fe f911 	bl	ad0 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    28ae:	4b0a      	ldr	r3, [pc, #40]	; (28d8 <rf_off+0x54>)
    28b0:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    28b2:	f001 f841 	bl	3938 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    28b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28ba:	4b08      	ldr	r3, [pc, #32]	; (28dc <rf_off+0x58>)
    28bc:	601a      	str	r2, [r3, #0]
    28be:	2202      	movs	r2, #2
    28c0:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    28c2:	7823      	ldrb	r3, [r4, #0]
    28c4:	f023 0310 	bic.w	r3, r3, #16
    28c8:	7023      	strb	r3, [r4, #0]
}
    28ca:	bd38      	pop	{r3, r4, r5, pc}
    28cc:	200005f4 	strdcs	r0, [r0], -r4
    28d0:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    28d4:	60040000 	andvs	r0, r4, r0
    28d8:	43240004 			; <UNDEFINED> instruction: 0x43240004
    28dc:	400220a0 	andmi	r2, r2, r0, lsr #1

000028e0 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	4604      	mov	r4, r0
    28e4:	460d      	mov	r5, r1
    28e6:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    28ea:	8862      	ldrh	r2, [r4, #2]
    28ec:	42aa      	cmp	r2, r5
    28ee:	d00e      	beq.n	290e <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    28f0:	3e01      	subs	r6, #1
    28f2:	d108      	bne.n	2906 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    28f4:	8821      	ldrh	r1, [r4, #0]
    28f6:	4806      	ldr	r0, [pc, #24]	; (2910 <wait_cmd.constprop.0+0x30>)
    28f8:	462b      	mov	r3, r5
    28fa:	f7ff f927 	bl	1b4c <diag>
			syserror (EHARDWARE, "rt2");
    28fe:	2008      	movs	r0, #8
    2900:	4904      	ldr	r1, [pc, #16]	; (2914 <wait_cmd.constprop.0+0x34>)
    2902:	f7fe f905 	bl	b10 <__pi_syserror>
		udelay (1);
    2906:	2001      	movs	r0, #1
    2908:	f7fe f898 	bl	a3c <udelay>
		if (cmd->status == tstat)
    290c:	e7ed      	b.n	28ea <wait_cmd.constprop.0+0xa>
}
    290e:	bd70      	pop	{r4, r5, r6, pc}
    2910:	00004f3f 	andeq	r4, r0, pc, lsr pc
    2914:	00004f4f 	andeq	r4, r0, pc, asr #30

00002918 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    291c:	4b46      	ldr	r3, [pc, #280]	; (2a38 <rf_on.part.0+0x120>)
static void rf_on () {
    291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2922:	601a      	str	r2, [r3, #0]
    2924:	2202      	movs	r2, #2
    2926:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2928:	f000 ffca 	bl	38c0 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    292c:	200a      	movs	r0, #10
    292e:	f7fe f885 	bl	a3c <udelay>
    2932:	f000 ffd1 	bl	38d8 <NOROM_OSCHF_AttemptToSwitchToXosc>
    2936:	2800      	cmp	r0, #0
    2938:	d0f8      	beq.n	292c <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    293a:	2401      	movs	r4, #1
    293c:	4b3f      	ldr	r3, [pc, #252]	; (2a3c <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    293e:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2940:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2942:	f7fe f8a7 	bl	a94 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2946:	f240 72ff 	movw	r2, #2047	; 0x7ff
    294a:	4b3d      	ldr	r3, [pc, #244]	; (2a40 <rf_on.part.0+0x128>)
	issue_cmd (
    294c:	483d      	ldr	r0, [pc, #244]	; (2a44 <rf_on.part.0+0x12c>)
    294e:	601a      	str	r2, [r3, #0]
    2950:	f7ff ff62 	bl	2818 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2954:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2958:	493b      	ldr	r1, [pc, #236]	; (2a48 <rf_on.part.0+0x130>)
    295a:	483c      	ldr	r0, [pc, #240]	; (2a4c <rf_on.part.0+0x134>)
    295c:	f001 ff06 	bl	476c <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2960:	2200      	movs	r2, #0
    2962:	4b3b      	ldr	r3, [pc, #236]	; (2a50 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2964:	493b      	ldr	r1, [pc, #236]	; (2a54 <rf_on.part.0+0x13c>)
    2966:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2968:	2202      	movs	r2, #2
    296a:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    296e:	2203      	movs	r2, #3
    2970:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2974:	2204      	movs	r2, #4
    2976:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2978:	2205      	movs	r2, #5
    297a:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    297c:	2206      	movs	r2, #6
    297e:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2982:	4a35      	ldr	r2, [pc, #212]	; (2a58 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2984:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2988:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    298a:	4b34      	ldr	r3, [pc, #208]	; (2a5c <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    298c:	4a34      	ldr	r2, [pc, #208]	; (2a60 <rf_on.part.0+0x148>)
      t7 = *pS++;
    298e:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2990:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2994:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2998:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    299c:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    299e:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    29a2:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    29a6:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    29aa:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    29ac:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    29ae:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    29b0:	6198      	str	r0, [r3, #24]
    29b2:	4618      	mov	r0, r3
   } while (--nIterations);
    29b4:	4288      	cmp	r0, r1
    29b6:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    29ba:	f103 0320 	add.w	r3, r3, #32
    29be:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    29c0:	d1e5      	bne.n	298e <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    29c2:	4b28      	ldr	r3, [pc, #160]	; (2a64 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    29c4:	4828      	ldr	r0, [pc, #160]	; (2a68 <rf_on.part.0+0x150>)
    29c6:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    29c8:	4b28      	ldr	r3, [pc, #160]	; (2a6c <rf_on.part.0+0x154>)
    29ca:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    29cc:	4b28      	ldr	r3, [pc, #160]	; (2a70 <rf_on.part.0+0x158>)
    29ce:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    29d0:	4b28      	ldr	r3, [pc, #160]	; (2a74 <rf_on.part.0+0x15c>)
    29d2:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    29d4:	4b28      	ldr	r3, [pc, #160]	; (2a78 <rf_on.part.0+0x160>)
    29d6:	630b      	str	r3, [r1, #48]	; 0x30
    29d8:	f7ff ff1e 	bl	2818 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    29dc:	2001      	movs	r0, #1
    29de:	f001 f943 	bl	3c68 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    29e2:	4826      	ldr	r0, [pc, #152]	; (2a7c <rf_on.part.0+0x164>)
    29e4:	f001 f930 	bl	3c48 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    29e8:	4825      	ldr	r0, [pc, #148]	; (2a80 <rf_on.part.0+0x168>)
    29ea:	f7ff ff15 	bl	2818 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    29ee:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    29f2:	4823      	ldr	r0, [pc, #140]	; (2a80 <rf_on.part.0+0x168>)
    29f4:	f7ff ff74 	bl	28e0 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    29f8:	4822      	ldr	r0, [pc, #136]	; (2a84 <rf_on.part.0+0x16c>)
    29fa:	f7ff ff0d 	bl	2818 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    29fe:	4822      	ldr	r0, [pc, #136]	; (2a88 <rf_on.part.0+0x170>)
    2a00:	f7ff ff0a 	bl	2818 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2a04:	4820      	ldr	r0, [pc, #128]	; (2a88 <rf_on.part.0+0x170>)
    2a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2a0a:	f7ff ff69 	bl	28e0 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2a0e:	4a1f      	ldr	r2, [pc, #124]	; (2a8c <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2a10:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2a12:	7813      	ldrb	r3, [r2, #0]
    2a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2a18:	f043 0310 	orr.w	r3, r3, #16
    2a1c:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2a1e:	2300      	movs	r3, #0
    2a20:	4a1b      	ldr	r2, [pc, #108]	; (2a90 <rf_on.part.0+0x178>)
    2a22:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a24:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2a28:	4b1a      	ldr	r3, [pc, #104]	; (2a94 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a2a:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2a2c:	681b      	ldr	r3, [r3, #0]
}
    2a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2a32:	691b      	ldr	r3, [r3, #16]
    2a34:	4718      	bx	r3
    2a36:	bf00      	nop
    2a38:	40022090 	mulmi	r2, r0, r0
    2a3c:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2a40:	60040000 	andvs	r0, r4, r0
    2a44:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2a48:	00005648 	andeq	r5, r0, r8, asr #12
    2a4c:	2100041c 	tstcs	r0, ip, lsl r4
    2a50:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2a54:	2100c680 	smlabbcs	r0, r0, r6, ip
    2a58:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2a5c:	2100c000 	mrscs	ip, (UNDEF: 0)
    2a60:	00004f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    2a64:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2a68:	06070001 	streq	r0, [r7], -r1
    2a6c:	1a101020 	bne	406af4 <__ccfg+0x3e6b4c>
    2a70:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2a74:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2a78:	70006b54 	andvc	r6, r0, r4, asr fp
    2a7c:	20000608 	andcs	r0, r0, r8, lsl #12
    2a80:	20000054 	andcs	r0, r0, r4, asr r0
    2a84:	20000024 	andcs	r0, r0, r4, lsr #32
    2a88:	2000003c 	andcs	r0, r0, ip, lsr r0
    2a8c:	200005f4 	strdcs	r0, [r0], -r4
    2a90:	40041014 	andmi	r1, r4, r4, lsl r0
    2a94:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002a98 <rx_int_enable>:
static void rx_int_enable () {
    2a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2a9c:	4a2a      	ldr	r2, [pc, #168]	; (2b48 <rx_int_enable+0xb0>)
    2a9e:	6813      	ldr	r3, [r2, #0]
    2aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2aa8:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2aaa:	2200      	movs	r2, #0
    2aac:	4b27      	ldr	r3, [pc, #156]	; (2b4c <rx_int_enable+0xb4>)
    2aae:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2ab0:	681d      	ldr	r5, [r3, #0]
    2ab2:	2d00      	cmp	r5, #0
    2ab4:	d1fb      	bne.n	2aae <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ab6:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2ab8:	4a25      	ldr	r2, [pc, #148]	; (2b50 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2aba:	4f26      	ldr	r7, [pc, #152]	; (2b54 <rx_int_enable+0xbc>)
    2abc:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2abe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2b60 <rx_int_enable+0xc8>
    2ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2aca:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2acc:	4b22      	ldr	r3, [pc, #136]	; (2b58 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2ace:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2b64 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ad2:	69db      	ldr	r3, [r3, #28]
    2ad4:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2ad6:	7923      	ldrb	r3, [r4, #4]
    2ad8:	2b03      	cmp	r3, #3
    2ada:	d11e      	bne.n	2b1a <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2adc:	7a63      	ldrb	r3, [r4, #9]
    2ade:	7a21      	ldrb	r1, [r4, #8]
    2ae0:	1cda      	adds	r2, r3, #3
    2ae2:	4291      	cmp	r1, r2
			nr++;
    2ae4:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ae8:	d11c      	bne.n	2b24 <rx_int_enable+0x8c>
    2aea:	f898 2000 	ldrb.w	r2, [r8]
    2aee:	429a      	cmp	r2, r3
    2af0:	d318      	bcc.n	2b24 <rx_int_enable+0x8c>
    2af2:	f013 0c01 	ands.w	ip, r3, #1
    2af6:	d115      	bne.n	2b24 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2af8:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2afc:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2afe:	5c88      	ldrb	r0, [r1, r2]
    2b00:	440b      	add	r3, r1
    2b02:	3880      	subs	r0, #128	; 0x80
    2b04:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2b06:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b0a:	f8b9 0000 	ldrh.w	r0, [r9]
    2b0e:	f104 010a 	add.w	r1, r4, #10
    2b12:	f7ff fb5f 	bl	21d4 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2b16:	2300      	movs	r3, #0
    2b18:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b1a:	2e01      	cmp	r6, #1
    2b1c:	d006      	beq.n	2b2c <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2b1e:	2601      	movs	r6, #1
    2b20:	6824      	ldr	r4, [r4, #0]
    2b22:	e7d8      	b.n	2ad6 <rx_int_enable+0x3e>
				diag ("BAD RX");
    2b24:	4638      	mov	r0, r7
    2b26:	f7ff f811 	bl	1b4c <diag>
    2b2a:	e7f4      	b.n	2b16 <rx_int_enable+0x7e>
	if (nr) {
    2b2c:	b14d      	cbz	r5, 2b42 <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b2e:	f7ff f8ab 	bl	1c88 <lrnd>
}
    2b32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b36:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2b3a:	3102      	adds	r1, #2
    2b3c:	4807      	ldr	r0, [pc, #28]	; (2b5c <rx_int_enable+0xc4>)
    2b3e:	f7fe bda1 	b.w	1684 <__pi_utimer_set>
}
    2b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2b46:	bf00      	nop
    2b48:	40041018 	andmi	r1, r4, r8, lsl r0
    2b4c:	40041010 	andmi	r1, r4, r0, lsl r0
    2b50:	40041014 	andmi	r1, r4, r4, lsl r0
    2b54:	00004f53 	andeq	r4, r0, r3, asr pc
    2b58:	2000007c 	andcs	r0, r0, ip, ror r0
    2b5c:	200005ea 	andcs	r0, r0, sl, ror #11
    2b60:	20000604 	andcs	r0, r0, r4, lsl #12
    2b64:	200005fc 	strdcs	r0, [r0], -ip

00002b68 <cc1350_driver>:
thread (cc1350_driver)
    2b68:	2801      	cmp	r0, #1
    2b6a:	b570      	push	{r4, r5, r6, lr}
    2b6c:	f000 808b 	beq.w	2c86 <cc1350_driver+0x11e>
    2b70:	2802      	cmp	r0, #2
    2b72:	f000 80bd 	beq.w	2cf0 <cc1350_driver+0x188>
    2b76:	2800      	cmp	r0, #0
    2b78:	f040 80ce 	bne.w	2d18 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2b7c:	4c68      	ldr	r4, [pc, #416]	; (2d20 <cc1350_driver+0x1b8>)
    2b7e:	f994 3000 	ldrsb.w	r3, [r4]
    2b82:	2b00      	cmp	r3, #0
    2b84:	da05      	bge.n	2b92 <cc1350_driver+0x2a>
			rf_off ();
    2b86:	f7ff fe7d 	bl	2884 <rf_off>
			_BIC (dstate,
    2b8a:	7823      	ldrb	r3, [r4, #0]
    2b8c:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2b90:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2b92:	7823      	ldrb	r3, [r4, #0]
    2b94:	0798      	lsls	r0, r3, #30
    2b96:	f003 0201 	and.w	r2, r3, #1
    2b9a:	d51e      	bpl.n	2bda <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2b9c:	b90a      	cbnz	r2, 2ba2 <cc1350_driver+0x3a>
				rx_de ();
    2b9e:	f7ff fe5f 	bl	2860 <rx_de>
		if (paylen == 0) {
    2ba2:	4d60      	ldr	r5, [pc, #384]	; (2d24 <cc1350_driver+0x1bc>)
    2ba4:	4e60      	ldr	r6, [pc, #384]	; (2d28 <cc1350_driver+0x1c0>)
    2ba6:	682b      	ldr	r3, [r5, #0]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d14c      	bne.n	2c46 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2bac:	4b5f      	ldr	r3, [pc, #380]	; (2d2c <cc1350_driver+0x1c4>)
    2bae:	4629      	mov	r1, r5
    2bb0:	8818      	ldrh	r0, [r3, #0]
    2bb2:	f7ff fb5d 	bl	2270 <tcvphy_get>
    2bb6:	6170      	str	r0, [r6, #20]
    2bb8:	2800      	cmp	r0, #0
    2bba:	d02f      	beq.n	2c1c <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bbc:	4a5c      	ldr	r2, [pc, #368]	; (2d30 <cc1350_driver+0x1c8>)
				paylen -= 2;
    2bbe:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bc0:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2bc2:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bc4:	4293      	cmp	r3, r2
				paylen -= 2;
    2bc6:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bc8:	dc03      	bgt.n	2bd2 <cc1350_driver+0x6a>
    2bca:	2b00      	cmp	r3, #0
    2bcc:	dd01      	ble.n	2bd2 <cc1350_driver+0x6a>
    2bce:	07db      	lsls	r3, r3, #31
    2bd0:	d51b      	bpl.n	2c0a <cc1350_driver+0xa2>
    2bd2:	200a      	movs	r0, #10
    2bd4:	4957      	ldr	r1, [pc, #348]	; (2d34 <cc1350_driver+0x1cc>)
    2bd6:	f7fd ff9b 	bl	b10 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2bda:	2a00      	cmp	r2, #0
    2bdc:	d0e1      	beq.n	2ba2 <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2bde:	06d9      	lsls	r1, r3, #27
    2be0:	d50d      	bpl.n	2bfe <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2be2:	4855      	ldr	r0, [pc, #340]	; (2d38 <cc1350_driver+0x1d0>)
    2be4:	69c3      	ldr	r3, [r0, #28]
    2be6:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2be8:	2300      	movs	r3, #0
    2bea:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2bec:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2bee:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2bf0:	f7ff fe12 	bl	2818 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2bf4:	7823      	ldrb	r3, [r4, #0]
    2bf6:	f043 0302 	orr.w	r3, r3, #2
    2bfa:	7023      	strb	r3, [r4, #0]
    2bfc:	e7d1      	b.n	2ba2 <cc1350_driver+0x3a>
    2bfe:	f7ff fe8b 	bl	2918 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2c02:	7823      	ldrb	r3, [r4, #0]
    2c04:	079a      	lsls	r2, r3, #30
    2c06:	d5ec      	bpl.n	2be2 <cc1350_driver+0x7a>
    2c08:	e7cb      	b.n	2ba2 <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2c0e:	4b4b      	ldr	r3, [pc, #300]	; (2d3c <cc1350_driver+0x1d4>)
    2c10:	881b      	ldrh	r3, [r3, #0]
    2c12:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2c14:	bf18      	it	ne
    2c16:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2c18:	682b      	ldr	r3, [r5, #0]
    2c1a:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2c1c:	6829      	ldr	r1, [r5, #0]
    2c1e:	b991      	cbnz	r1, 2c46 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2c20:	4b47      	ldr	r3, [pc, #284]	; (2d40 <cc1350_driver+0x1d8>)
    2c22:	6818      	ldr	r0, [r3, #0]
    2c24:	f7fe fda2 	bl	176c <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2c28:	7823      	ldrb	r3, [r4, #0]
    2c2a:	079d      	lsls	r5, r3, #30
    2c2c:	d503      	bpl.n	2c36 <cc1350_driver+0xce>
				rx_int_enable ();
    2c2e:	f7ff ff33 	bl	2a98 <rx_int_enable>
			release;
    2c32:	f7fe fb2b 	bl	128c <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2c36:	06dc      	lsls	r4, r3, #27
    2c38:	d5fb      	bpl.n	2c32 <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2c3a:	2102      	movs	r1, #2
    2c3c:	4b41      	ldr	r3, [pc, #260]	; (2d44 <cc1350_driver+0x1dc>)
    2c3e:	8818      	ldrh	r0, [r3, #0]
    2c40:	f7fe fdda 	bl	17f8 <delay>
    2c44:	e7f5      	b.n	2c32 <cc1350_driver+0xca>
		if (bckf_timer) {
    2c46:	4d40      	ldr	r5, [pc, #256]	; (2d48 <cc1350_driver+0x1e0>)
    2c48:	882b      	ldrh	r3, [r5, #0]
    2c4a:	b163      	cbz	r3, 2c66 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2c4c:	4b3c      	ldr	r3, [pc, #240]	; (2d40 <cc1350_driver+0x1d8>)
    2c4e:	2100      	movs	r1, #0
    2c50:	6818      	ldr	r0, [r3, #0]
    2c52:	f7fe fd8b 	bl	176c <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2c56:	8828      	ldrh	r0, [r5, #0]
    2c58:	2100      	movs	r1, #0
    2c5a:	f7fe fdcd 	bl	17f8 <delay>
			if (dstate & DSTATE_RXAC)
    2c5e:	7823      	ldrb	r3, [r4, #0]
    2c60:	0798      	lsls	r0, r3, #30
    2c62:	d5e6      	bpl.n	2c32 <cc1350_driver+0xca>
    2c64:	e7e3      	b.n	2c2e <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2c66:	7823      	ldrb	r3, [r4, #0]
    2c68:	06d9      	lsls	r1, r3, #27
    2c6a:	d401      	bmi.n	2c70 <cc1350_driver+0x108>
    2c6c:	f7ff fe54 	bl	2918 <rf_on.part.0>
		rx_de ();
    2c70:	f7ff fdf6 	bl	2860 <rx_de>
		RF_cmdPropTx . status = 0;
    2c74:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c76:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2c7a:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c7c:	4b33      	ldr	r3, [pc, #204]	; (2d4c <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2c7e:	4834      	ldr	r0, [pc, #208]	; (2d50 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c80:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2c82:	f7ff fdc9 	bl	2818 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2c86:	4b26      	ldr	r3, [pc, #152]	; (2d20 <cc1350_driver+0x1b8>)
    2c88:	f993 3000 	ldrsb.w	r3, [r3]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	f6ff af75 	blt.w	2b7c <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2c92:	4b2e      	ldr	r3, [pc, #184]	; (2d4c <cc1350_driver+0x1e4>)
    2c94:	681a      	ldr	r2, [r3, #0]
    2c96:	0792      	lsls	r2, r2, #30
    2c98:	d402      	bmi.n	2ca0 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2c9a:	2101      	movs	r1, #1
    2c9c:	4608      	mov	r0, r1
    2c9e:	e7cf      	b.n	2c40 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2ca0:	4821      	ldr	r0, [pc, #132]	; (2d28 <cc1350_driver+0x1c0>)
    2ca2:	4c2c      	ldr	r4, [pc, #176]	; (2d54 <cc1350_driver+0x1ec>)
    2ca4:	8842      	ldrh	r2, [r0, #2]
    2ca6:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2caa:	d018      	beq.n	2cde <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2cac:	7822      	ldrb	r2, [r4, #0]
    2cae:	2a0f      	cmp	r2, #15
    2cb0:	d909      	bls.n	2cc6 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2cb2:	2200      	movs	r2, #0
    2cb4:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2cb6:	f06f 0202 	mvn.w	r2, #2
    2cba:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2cbc:	f7ff fdac 	bl	2818 <issue_cmd>
				proceed (DR_XMIT);
    2cc0:	2001      	movs	r0, #1
    2cc2:	f7fe fd49 	bl	1758 <proceed>
			txtries++;
    2cc6:	7823      	ldrb	r3, [r4, #0]
    2cc8:	3301      	adds	r3, #1
    2cca:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2ccc:	f7fe ffdc 	bl	1c88 <lrnd>
    2cd0:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2cd4:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cd6:	481c      	ldr	r0, [pc, #112]	; (2d48 <cc1350_driver+0x1e0>)
    2cd8:	f7fe fcd4 	bl	1684 <__pi_utimer_set>
		goto DR_LOOP__;
    2cdc:	e74e      	b.n	2b7c <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2cde:	6940      	ldr	r0, [r0, #20]
    2ce0:	f7ff fb00 	bl	22e4 <tcvphy_end>
		paylen = 0;
    2ce4:	2300      	movs	r3, #0
    2ce6:	4a0f      	ldr	r2, [pc, #60]	; (2d24 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ce8:	2102      	movs	r1, #2
		paylen = 0;
    2cea:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2cec:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cee:	e7f2      	b.n	2cd6 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2cf0:	4b0b      	ldr	r3, [pc, #44]	; (2d20 <cc1350_driver+0x1b8>)
    2cf2:	781a      	ldrb	r2, [r3, #0]
    2cf4:	f993 3000 	ldrsb.w	r3, [r3]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	f6ff af3f 	blt.w	2b7c <cc1350_driver+0x14>
    2cfe:	07d3      	lsls	r3, r2, #31
    2d00:	f53f af3c 	bmi.w	2b7c <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2d04:	4b09      	ldr	r3, [pc, #36]	; (2d2c <cc1350_driver+0x1c4>)
    2d06:	8818      	ldrh	r0, [r3, #0]
    2d08:	f7ff fad2 	bl	22b0 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d0c:	2800      	cmp	r0, #0
    2d0e:	f47f af35 	bne.w	2b7c <cc1350_driver+0x14>
			rf_off ();
    2d12:	f7ff fdb7 	bl	2884 <rf_off>
    2d16:	e731      	b.n	2b7c <cc1350_driver+0x14>
endthread
    2d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2d1c:	f7fe bc94 	b.w	1648 <__pi_badstate>
    2d20:	200005f4 	strdcs	r0, [r0], -r4
    2d24:	200005f8 	strdcs	r0, [r0], -r8
    2d28:	200000a0 	andcs	r0, r0, r0, lsr #1
    2d2c:	200005fc 	strdcs	r0, [r0], -ip
    2d30:	20000604 	andcs	r0, r0, r4, lsl #12
    2d34:	00004f5a 	andeq	r4, r0, sl, asr pc
    2d38:	2000007c 	andcs	r0, r0, ip, ror r0
    2d3c:	20000624 	andcs	r0, r0, r4, lsr #12
    2d40:	20000600 	andcs	r0, r0, r0, lsl #12
    2d44:	20000038 	andcs	r0, r0, r8, lsr r0
    2d48:	200005ea 	andcs	r0, r0, sl, ror #11
    2d4c:	40041010 	andmi	r1, r4, r0, lsl r0
    2d50:	20000008 	andcs	r0, r0, r8
    2d54:	20000626 	andcs	r0, r0, r6, lsr #12

00002d58 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2d58:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d5a:	4a15      	ldr	r2, [pc, #84]	; (2db0 <RFCCPE0IntHandler+0x58>)
    2d5c:	6813      	ldr	r3, [r2, #0]
    2d5e:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2d60:	bfbf      	itttt	lt
    2d62:	4914      	ldrlt	r1, [pc, #80]	; (2db4 <RFCCPE0IntHandler+0x5c>)
    2d64:	780b      	ldrblt	r3, [r1, #0]
    2d66:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2d6a:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2d6c:	2100      	movs	r1, #0
    2d6e:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2d70:	6813      	ldr	r3, [r2, #0]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d1fb      	bne.n	2d6e <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2d76:	4a10      	ldr	r2, [pc, #64]	; (2db8 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2d78:	4c10      	ldr	r4, [pc, #64]	; (2dbc <RFCCPE0IntHandler+0x64>)
    2d7a:	6811      	ldr	r1, [r2, #0]
    2d7c:	6013      	str	r3, [r2, #0]
    2d7e:	4a10      	ldr	r2, [pc, #64]	; (2dc0 <RFCCPE0IntHandler+0x68>)
    2d80:	6824      	ldr	r4, [r4, #0]
    2d82:	6811      	ldr	r1, [r2, #0]
    2d84:	4608      	mov	r0, r1
    2d86:	f830 2b10 	ldrh.w	r2, [r0], #16
    2d8a:	f002 0207 	and.w	r2, r2, #7
    2d8e:	429a      	cmp	r2, r3
    2d90:	dd08      	ble.n	2da4 <RFCCPE0IntHandler+0x4c>
    2d92:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2d96:	3301      	adds	r3, #1
    2d98:	42a5      	cmp	r5, r4
    2d9a:	d1f8      	bne.n	2d8e <RFCCPE0IntHandler+0x36>
    2d9c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2da0:	889b      	ldrh	r3, [r3, #4]
    2da2:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2da4:	4a07      	ldr	r2, [pc, #28]	; (2dc4 <RFCCPE0IntHandler+0x6c>)
    2da6:	7813      	ldrb	r3, [r2, #0]
    2da8:	f043 0302 	orr.w	r3, r3, #2
    2dac:	7013      	strb	r3, [r2, #0]
}
    2dae:	bd30      	pop	{r4, r5, pc}
    2db0:	40041010 	andmi	r1, r4, r0, lsl r0
    2db4:	200005f4 	strdcs	r0, [r0], -r4
    2db8:	40041014 	andmi	r1, r4, r4, lsl r0
    2dbc:	20000600 	andcs	r0, r0, r0, lsl #12
    2dc0:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2dc4:	200006b0 			; <UNDEFINED> instruction: 0x200006b0

00002dc8 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2dcc:	4c49      	ldr	r4, [pc, #292]	; (2ef4 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2dce:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2dd0:	7822      	ldrb	r2, [r4, #0]
    2dd2:	b11a      	cbz	r2, 2ddc <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2dd4:	2009      	movs	r0, #9
    2dd6:	4948      	ldr	r1, [pc, #288]	; (2ef8 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2dd8:	f7fd fe9a 	bl	b10 <__pi_syserror>
	if (mbs == 0)
    2ddc:	b129      	cbz	r1, 2dea <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2dde:	1f8a      	subs	r2, r1, #6
    2de0:	2af4      	cmp	r2, #244	; 0xf4
    2de2:	d903      	bls.n	2dec <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2de4:	2003      	movs	r0, #3
    2de6:	4945      	ldr	r1, [pc, #276]	; (2efc <phys_cc1350+0x134>)
    2de8:	e7f6      	b.n	2dd8 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2dea:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2dec:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2dee:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2df2:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2df4:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2df8:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2dfa:	7820      	ldrb	r0, [r4, #0]
    2dfc:	469b      	mov	fp, r3
    2dfe:	300d      	adds	r0, #13
    2e00:	f7fe fe2a 	bl	1a58 <__pi_malloc>
		if (db == NULL)
    2e04:	4603      	mov	r3, r0
    2e06:	b920      	cbnz	r0, 2e12 <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2e08:	2006      	movs	r0, #6
    2e0a:	493b      	ldr	r1, [pc, #236]	; (2ef8 <phys_cc1350+0x130>)
    2e0c:	e7e4      	b.n	2dd8 <phys_cc1350+0x10>
    2e0e:	46b8      	mov	r8, r7
    2e10:	e7f3      	b.n	2dfa <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2e12:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2e16:	2f00      	cmp	r7, #0
    2e18:	d03e      	beq.n	2e98 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2e1a:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2e1e:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2e20:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    2e22:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    2e24:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2e28:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2e2c:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2e2e:	d1ee      	bne.n	2e0e <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2e30:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2e32:	2008      	movs	r0, #8
    2e34:	f7fe fe10 	bl	1a58 <__pi_malloc>
    2e38:	4b31      	ldr	r3, [pc, #196]	; (2f00 <phys_cc1350+0x138>)
    2e3a:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d0e3      	beq.n	2e08 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    2e40:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    2e42:	2500      	movs	r5, #0
    2e44:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e46:	492f      	ldr	r1, [pc, #188]	; (2f04 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    2e48:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2e4a:	4a2f      	ldr	r2, [pc, #188]	; (2f08 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e4c:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2e4e:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2e50:	89da      	ldrh	r2, [r3, #14]
    2e52:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    2e56:	f042 0206 	orr.w	r2, r2, #6
    2e5a:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    2e5c:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e5e:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    2e62:	3b02      	subs	r3, #2
    2e64:	7023      	strb	r3, [r4, #0]
	physid = phy;
    2e66:	4b29      	ldr	r3, [pc, #164]	; (2f0c <phys_cc1350+0x144>)
    2e68:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e6a:	f7ff f98b 	bl	2184 <tcvphy_reg>
    2e6e:	4b28      	ldr	r3, [pc, #160]	; (2f10 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e70:	2207      	movs	r2, #7
    2e72:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e74:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e76:	462b      	mov	r3, r5
    2e78:	4826      	ldr	r0, [pc, #152]	; (2f14 <phys_cc1350+0x14c>)
    2e7a:	f7fe fe67 	bl	1b4c <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    2e7e:	4826      	ldr	r0, [pc, #152]	; (2f18 <phys_cc1350+0x150>)
    2e80:	f7fe fbea 	bl	1658 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2e84:	4629      	mov	r1, r5
    2e86:	4825      	ldr	r0, [pc, #148]	; (2f1c <phys_cc1350+0x154>)
    2e88:	f7fe fe3a 	bl	1b00 <__pi_fork>
    2e8c:	4b24      	ldr	r3, [pc, #144]	; (2f20 <phys_cc1350+0x158>)
    2e8e:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2e90:	b920      	cbnz	r0, 2e9c <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    2e92:	2004      	movs	r0, #4
    2e94:	4918      	ldr	r1, [pc, #96]	; (2ef8 <phys_cc1350+0x130>)
    2e96:	e79f      	b.n	2dd8 <phys_cc1350+0x10>
    2e98:	4605      	mov	r5, r0
    2e9a:	e7c0      	b.n	2e1e <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2e9c:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2ea0:	4c20      	ldr	r4, [pc, #128]	; (2f24 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2ea2:	4921      	ldr	r1, [pc, #132]	; (2f28 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ea4:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2ea6:	4b21      	ldr	r3, [pc, #132]	; (2f2c <phys_cc1350+0x164>)
    2ea8:	781a      	ldrb	r2, [r3, #0]
    2eaa:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2eac:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2eb0:	8858      	ldrh	r0, [r3, #2]
    2eb2:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    2eb6:	6922      	ldr	r2, [r4, #16]
    2eb8:	f003 030f 	and.w	r3, r3, #15
    2ebc:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    2ec0:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2ec4:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2ec8:	f022 020f 	bic.w	r2, r2, #15
    2ecc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    2ed0:	4313      	orrs	r3, r2
    2ed2:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2ed4:	f7ff fbc8 	bl	2668 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2ed8:	4b15      	ldr	r3, [pc, #84]	; (2f30 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2eda:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2edc:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2ede:	f000 fe27 	bl	3b30 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2ee2:	4620      	mov	r0, r4
    2ee4:	4913      	ldr	r1, [pc, #76]	; (2f34 <phys_cc1350+0x16c>)
    2ee6:	f000 fd7b 	bl	39e0 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2eea:	4b13      	ldr	r3, [pc, #76]	; (2f38 <phys_cc1350+0x170>)
    2eec:	601d      	str	r5, [r3, #0]
}
    2eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ef2:	bf00      	nop
    2ef4:	20000604 	andcs	r0, r0, r4, lsl #12
    2ef8:	00004f62 	andeq	r4, r0, r2, ror #30
    2efc:	00004f67 	andeq	r4, r0, r7, ror #30
    2f00:	2000007c 	andcs	r0, r0, ip, ror r0
    2f04:	00002689 	andeq	r2, r0, r9, lsl #13
    2f08:	20000618 	andcs	r0, r0, r8, lsl r6
    2f0c:	200005fc 	strdcs	r0, [r0], -ip
    2f10:	20000600 	andcs	r0, r0, r0, lsl #12
    2f14:	00004f6f 	andeq	r4, r0, pc, ror #30
    2f18:	200005ea 	andcs	r0, r0, sl, ror #11
    2f1c:	00002b69 	andeq	r2, r0, r9, ror #22
    2f20:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2f24:	20000054 	andcs	r0, r0, r4, asr r0
    2f28:	000058d4 	ldrdeq	r5, [r0], -r4
    2f2c:	2000003a 	andcs	r0, r0, sl, lsr r0
    2f30:	400821d0 	ldrdmi	r2, [r8], -r0
    2f34:	20000608 	andcs	r0, r0, r8, lsl #12
    2f38:	40041018 	andmi	r1, r4, r8, lsl r0

00002f3c <tcv_clo_null>:
    2f3c:	b510      	push	{r4, lr}
    2f3e:	4a07      	ldr	r2, [pc, #28]	; (2f5c <tcv_clo_null+0x20>)
    2f40:	4603      	mov	r3, r0
    2f42:	6812      	ldr	r2, [r2, #0]
    2f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f48:	b132      	cbz	r2, 2f58 <tcv_clo_null+0x1c>
    2f4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2f4e:	428c      	cmp	r4, r1
    2f50:	bf04      	itt	eq
    2f52:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    2f56:	2000      	moveq	r0, #0
    2f58:	bd10      	pop	{r4, pc}
    2f5a:	bf00      	nop
    2f5c:	20000628 	andcs	r0, r0, r8, lsr #12

00002f60 <tcv_rcv_null>:
    2f60:	4907      	ldr	r1, [pc, #28]	; (2f80 <tcv_rcv_null+0x20>)
    2f62:	9a00      	ldr	r2, [sp, #0]
    2f64:	6809      	ldr	r1, [r1, #0]
    2f66:	b909      	cbnz	r1, 2f6c <tcv_rcv_null+0xc>
    2f68:	2000      	movs	r0, #0
    2f6a:	4770      	bx	lr
    2f6c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    2f70:	6019      	str	r1, [r3, #0]
    2f72:	3101      	adds	r1, #1
    2f74:	d0f8      	beq.n	2f68 <tcv_rcv_null+0x8>
    2f76:	2300      	movs	r3, #0
    2f78:	2002      	movs	r0, #2
    2f7a:	8053      	strh	r3, [r2, #2]
    2f7c:	8013      	strh	r3, [r2, #0]
    2f7e:	4770      	bx	lr
    2f80:	20000628 	andcs	r0, r0, r8, lsr #12

00002f84 <tcv_frm_null>:
    2f84:	2000      	movs	r0, #0
    2f86:	8048      	strh	r0, [r1, #2]
    2f88:	8008      	strh	r0, [r1, #0]
    2f8a:	4770      	bx	lr

00002f8c <tcv_out_null>:
    2f8c:	2004      	movs	r0, #4
    2f8e:	4770      	bx	lr

00002f90 <tcv_xmt_null>:
    2f90:	2001      	movs	r0, #1
    2f92:	4770      	bx	lr

00002f94 <tcv_ope_null>:
    2f94:	b570      	push	{r4, r5, r6, lr}
    2f96:	4c0f      	ldr	r4, [pc, #60]	; (2fd4 <tcv_ope_null+0x40>)
    2f98:	4605      	mov	r5, r0
    2f9a:	6823      	ldr	r3, [r4, #0]
    2f9c:	460e      	mov	r6, r1
    2f9e:	b94b      	cbnz	r3, 2fb4 <tcv_ope_null+0x20>
    2fa0:	200c      	movs	r0, #12
    2fa2:	f7fe fd59 	bl	1a58 <__pi_malloc>
    2fa6:	6020      	str	r0, [r4, #0]
    2fa8:	b178      	cbz	r0, 2fca <tcv_ope_null+0x36>
    2faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fae:	e9c0 3300 	strd	r3, r3, [r0]
    2fb2:	6083      	str	r3, [r0, #8]
    2fb4:	6823      	ldr	r3, [r4, #0]
    2fb6:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    2fba:	3201      	adds	r2, #1
    2fbc:	bf06      	itte	eq
    2fbe:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    2fc2:	2000      	moveq	r0, #0
    2fc4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2fc8:	bd70      	pop	{r4, r5, r6, pc}
    2fca:	2006      	movs	r0, #6
    2fcc:	4902      	ldr	r1, [pc, #8]	; (2fd8 <tcv_ope_null+0x44>)
    2fce:	f7fd fd9f 	bl	b10 <__pi_syserror>
    2fd2:	bf00      	nop
    2fd4:	20000628 	andcs	r0, r0, r8, lsr #12
    2fd8:	000058e0 	andeq	r5, r0, r0, ror #17

00002fdc <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    2fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2fde:	4b18      	ldr	r3, [pc, #96]	; (3040 <__outserial+0x64>)
    2fe0:	681b      	ldr	r3, [r3, #0]
    2fe2:	689d      	ldr	r5, [r3, #8]
    2fe4:	b130      	cbz	r0, 2ff4 <__outserial+0x18>
    2fe6:	280a      	cmp	r0, #10
    2fe8:	d00d      	beq.n	3006 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    2fea:	b003      	add	sp, #12
    2fec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2ff0:	f7fe bb2a 	b.w	1648 <__pi_badstate>
	ptr = data;
    2ff4:	4b13      	ldr	r3, [pc, #76]	; (3044 <__outserial+0x68>)
    2ff6:	4c14      	ldr	r4, [pc, #80]	; (3048 <__outserial+0x6c>)
    2ff8:	601d      	str	r5, [r3, #0]
	if (*ptr)
    2ffa:	782b      	ldrb	r3, [r5, #0]
    2ffc:	b1e3      	cbz	r3, 3038 <__outserial+0x5c>
		len = strlen (ptr);
    2ffe:	4628      	mov	r0, r5
    3000:	f7fe fc28 	bl	1854 <__pi_strlen>
    3004:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3006:	4e0f      	ldr	r6, [pc, #60]	; (3044 <__outserial+0x68>)
    3008:	4f0f      	ldr	r7, [pc, #60]	; (3048 <__outserial+0x6c>)
    300a:	883b      	ldrh	r3, [r7, #0]
    300c:	2201      	movs	r2, #1
    300e:	9300      	str	r3, [sp, #0]
    3010:	2100      	movs	r1, #0
    3012:	6833      	ldr	r3, [r6, #0]
    3014:	200a      	movs	r0, #10
    3016:	f7fe fc5d 	bl	18d4 <io>
	ptr += quant;
    301a:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    301c:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    301e:	4403      	add	r3, r0
	len -= quant;
    3020:	1a24      	subs	r4, r4, r0
	ptr += quant;
    3022:	6033      	str	r3, [r6, #0]
	len -= quant;
    3024:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    3026:	2c00      	cmp	r4, #0
    3028:	d1ef      	bne.n	300a <__outserial+0x2e>
		ufree (data);
    302a:	4628      	mov	r0, r5
    302c:	f7fe fcc8 	bl	19c0 <__pi_free>
		finish;
    3030:	4620      	mov	r0, r4
    3032:	f7fe fce9 	bl	1a08 <kill>
    3036:	e7e8      	b.n	300a <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3038:	786b      	ldrb	r3, [r5, #1]
    303a:	3303      	adds	r3, #3
    303c:	6023      	str	r3, [r4, #0]
    303e:	e7e2      	b.n	3006 <__outserial+0x2a>
    3040:	200006cc 	andcs	r0, r0, ip, asr #13
    3044:	20000630 	andcs	r0, r0, r0, lsr r6
    3048:	2000062c 	andcs	r0, r0, ip, lsr #12

0000304c <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    304c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    304e:	4d42      	ldr	r5, [pc, #264]	; (3158 <__inserial+0x10c>)
    3050:	682a      	ldr	r2, [r5, #0]
    3052:	6894      	ldr	r4, [r2, #8]
    3054:	2803      	cmp	r0, #3
    3056:	d87a      	bhi.n	314e <__inserial+0x102>
    3058:	e8df f000 	tbb	[pc, r0]
    305c:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    3060:	4b3e      	ldr	r3, [pc, #248]	; (315c <__inserial+0x110>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	b113      	cbz	r3, 306c <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    3066:	2000      	movs	r0, #0
    3068:	f7fe fcce 	bl	1a08 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    306c:	2040      	movs	r0, #64	; 0x40
    306e:	f7fe fcf3 	bl	1a58 <__pi_malloc>
    3072:	4b3b      	ldr	r3, [pc, #236]	; (3160 <__inserial+0x114>)
    3074:	4604      	mov	r4, r0
    3076:	6018      	str	r0, [r3, #0]
    3078:	b918      	cbnz	r0, 3082 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    307a:	f7fe fd5b 	bl	1b34 <__pi_waitmem>
		release;
    307e:	f7fe f905 	bl	128c <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    3082:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    3084:	682b      	ldr	r3, [r5, #0]
    3086:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    3088:	4b36      	ldr	r3, [pc, #216]	; (3164 <__inserial+0x118>)
    308a:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    308c:	2001      	movs	r0, #1
    308e:	2200      	movs	r2, #0
    3090:	4d33      	ldr	r5, [pc, #204]	; (3160 <__inserial+0x114>)
    3092:	9000      	str	r0, [sp, #0]
    3094:	682b      	ldr	r3, [r5, #0]
    3096:	4611      	mov	r1, r2
    3098:	f7fe fc1c 	bl	18d4 <io>
	if (ptr == (char*) data) { // new line
    309c:	682b      	ldr	r3, [r5, #0]
    309e:	42a3      	cmp	r3, r4
    30a0:	d10d      	bne.n	30be <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    30a2:	7823      	ldrb	r3, [r4, #0]
    30a4:	b923      	cbnz	r3, 30b0 <__inserial+0x64>
			ptr++;
    30a6:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    30a8:	2002      	movs	r0, #2
			ptr++;
    30aa:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    30ac:	f7fe fb54 	bl	1758 <proceed>
		}

		if (*ptr < 0x20)
    30b0:	682b      	ldr	r3, [r5, #0]
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	2b1f      	cmp	r3, #31
    30b6:	d802      	bhi.n	30be <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    30b8:	2001      	movs	r0, #1
    30ba:	f7fe fb4d 	bl	1758 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    30be:	682b      	ldr	r3, [r5, #0]
    30c0:	781a      	ldrb	r2, [r3, #0]
    30c2:	2a0a      	cmp	r2, #10
    30c4:	d001      	beq.n	30ca <__inserial+0x7e>
    30c6:	2a0d      	cmp	r2, #13
    30c8:	d105      	bne.n	30d6 <__inserial+0x8a>
		*ptr = '\0';
    30ca:	2000      	movs	r0, #0
    30cc:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    30ce:	4b23      	ldr	r3, [pc, #140]	; (315c <__inserial+0x110>)
    30d0:	601c      	str	r4, [r3, #0]
		finish;
    30d2:	f7fe fc99 	bl	1a08 <kill>
	}

	if (len) {
    30d6:	4923      	ldr	r1, [pc, #140]	; (3164 <__inserial+0x118>)
    30d8:	680b      	ldr	r3, [r1, #0]
    30da:	b123      	cbz	r3, 30e6 <__inserial+0x9a>
		ptr++;
    30dc:	682a      	ldr	r2, [r5, #0]
		len--;
    30de:	3b01      	subs	r3, #1
		ptr++;
    30e0:	3201      	adds	r2, #1
    30e2:	602a      	str	r2, [r5, #0]
		len--;
    30e4:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    30e6:	2001      	movs	r0, #1
    30e8:	f7fe fb36 	bl	1758 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    30ec:	2301      	movs	r3, #1
    30ee:	2200      	movs	r2, #0
    30f0:	4d1b      	ldr	r5, [pc, #108]	; (3160 <__inserial+0x114>)
    30f2:	9300      	str	r3, [sp, #0]
    30f4:	4611      	mov	r1, r2
    30f6:	682b      	ldr	r3, [r5, #0]
    30f8:	2002      	movs	r0, #2
    30fa:	f7fe fbeb 	bl	18d4 <io>
	len -= 2;
    30fe:	4819      	ldr	r0, [pc, #100]	; (3164 <__inserial+0x118>)
    3100:	6803      	ldr	r3, [r0, #0]
    3102:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    3104:	682b      	ldr	r3, [r5, #0]
    3106:	f813 1b01 	ldrb.w	r1, [r3], #1
    310a:	3101      	adds	r1, #1
		len = *ptr + 1;
    310c:	4291      	cmp	r1, r2
    310e:	bfd4      	ite	le
    3110:	6001      	strle	r1, [r0, #0]
    3112:	6002      	strgt	r2, [r0, #0]
	ptr++;
    3114:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    3116:	2200      	movs	r2, #0
    3118:	4f12      	ldr	r7, [pc, #72]	; (3164 <__inserial+0x118>)
    311a:	4d11      	ldr	r5, [pc, #68]	; (3160 <__inserial+0x114>)
    311c:	883b      	ldrh	r3, [r7, #0]
    311e:	4611      	mov	r1, r2
    3120:	9300      	str	r3, [sp, #0]
    3122:	682b      	ldr	r3, [r5, #0]
    3124:	2003      	movs	r0, #3
    3126:	f7fe fbd5 	bl	18d4 <io>
	len -= quant;
    312a:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    312c:	4606      	mov	r6, r0
	len -= quant;
    312e:	1a18      	subs	r0, r3, r0
    3130:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    3132:	b918      	cbnz	r0, 313c <__inserial+0xf0>
		__inpline = (char*)data;
    3134:	4b09      	ldr	r3, [pc, #36]	; (315c <__inserial+0x110>)
    3136:	601c      	str	r4, [r3, #0]
		finish;
    3138:	f7fe fc66 	bl	1a08 <kill>
	}
	ptr += quant;
    313c:	6828      	ldr	r0, [r5, #0]
    313e:	4430      	add	r0, r6
    3140:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    3142:	2003      	movs	r0, #3

endstrand
    3144:	b003      	add	sp, #12
    3146:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    314a:	f7fe bb05 	b.w	1758 <proceed>
endstrand
    314e:	b003      	add	sp, #12
    3150:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3154:	f7fe ba78 	b.w	1648 <__pi_badstate>
    3158:	200006cc 	andcs	r0, r0, ip, asr #13
    315c:	20000634 	andcs	r0, r0, r4, lsr r6
    3160:	2000063c 	andcs	r0, r0, ip, lsr r6
    3164:	20000638 	andcs	r0, r0, r8, lsr r6

00003168 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    3168:	f8dc 2000 	ldr.w	r2, [ip]
    316c:	b132      	cbz	r2, 317c <outc.5724+0x14>
    316e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3172:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    3176:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    3178:	bf88      	it	hi
    317a:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    317c:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3180:	3301      	adds	r3, #1
    3182:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    3186:	4770      	bx	lr

00003188 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    318c:	461c      	mov	r4, r3
    318e:	ab0c      	add	r3, sp, #48	; 0x30
    3190:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    3192:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    3194:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    3196:	4f86      	ldr	r7, [pc, #536]	; (33b0 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3198:	9001      	str	r0, [sp, #4]
    319a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    319e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    31a2:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    31a6:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    31aa:	d118      	bne.n	31de <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    31ac:	f892 9001 	ldrb.w	r9, [r2, #1]
    31b0:	1c95      	adds	r5, r2, #2
				outc ('\\');
    31b2:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    31b6:	f1b9 0f00 	cmp.w	r9, #0
    31ba:	d10b      	bne.n	31d4 <__pi_vfparse+0x4c>
				outc ('\\');
    31bc:	205c      	movs	r0, #92	; 0x5c
    31be:	f7ff ffd3 	bl	3168 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    31c2:	4648      	mov	r0, r9
    31c4:	f10d 0c04 	add.w	ip, sp, #4
    31c8:	f7ff ffce 	bl	3168 <outc.5724>
			if (c == '\0')
    31cc:	f1b9 0f00 	cmp.w	r9, #0
    31d0:	d103      	bne.n	31da <__pi_vfparse+0x52>
    31d2:	e027      	b.n	3224 <__pi_vfparse+0x9c>
			outc (c);
    31d4:	4648      	mov	r0, r9
				outc (val);
    31d6:	f7ff ffc7 	bl	3168 <outc.5724>
				val = (word) va_arg (ap, aword);
    31da:	462a      	mov	r2, r5
    31dc:	e7e1      	b.n	31a2 <__pi_vfparse+0x1a>
		if (c == '%') {
    31de:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    31e2:	f040 80e2 	bne.w	33aa <__pi_vfparse+0x222>
			c = *fm++;
    31e6:	f892 8001 	ldrb.w	r8, [r2, #1]
    31ea:	1c95      	adds	r5, r2, #2
			switch (c) {
    31ec:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    31f0:	f000 80cd 	beq.w	338e <__pi_vfparse+0x206>
    31f4:	d81b      	bhi.n	322e <__pi_vfparse+0xa6>
    31f6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    31fa:	d033      	beq.n	3264 <__pi_vfparse+0xdc>
    31fc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3200:	d067      	beq.n	32d2 <__pi_vfparse+0x14a>
    3202:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    3206:	f000 80bc 	beq.w	3382 <__pi_vfparse+0x1fa>
				outc ('%');
    320a:	2025      	movs	r0, #37	; 0x25
    320c:	f10d 0c04 	add.w	ip, sp, #4
    3210:	f7ff ffaa 	bl	3168 <outc.5724>
				outc (c);
    3214:	4640      	mov	r0, r8
    3216:	f10d 0c04 	add.w	ip, sp, #4
    321a:	f7ff ffa5 	bl	3168 <outc.5724>
				if (c == '\0')
    321e:	f1b8 0f00 	cmp.w	r8, #0
    3222:	d1da      	bne.n	31da <__pi_vfparse+0x52>
Ret:
				return d;
    3224:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    3228:	b004      	add	sp, #16
    322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    322e:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    3232:	d017      	beq.n	3264 <__pi_vfparse+0xdc>
    3234:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    3238:	d1e7      	bne.n	320a <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    323a:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    323e:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    3242:	fa1f f983 	uxth.w	r9, r3
    3246:	fa49 f308 	asr.w	r3, r9, r8
    324a:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    324e:	5cf8      	ldrb	r0, [r7, r3]
    3250:	f10d 0c04 	add.w	ip, sp, #4
    3254:	f7ff ff88 	bl	3168 <outc.5724>
					if (i == 0)
    3258:	f1b8 0f00 	cmp.w	r8, #0
    325c:	d0bd      	beq.n	31da <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    325e:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    3262:	e7f0      	b.n	3246 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    3264:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    3268:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    326c:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    3270:	d10a      	bne.n	3288 <__pi_vfparse+0x100>
    3272:	041b      	lsls	r3, r3, #16
    3274:	d508      	bpl.n	3288 <__pi_vfparse+0x100>
					outc ('-');
    3276:	202d      	movs	r0, #45	; 0x2d
    3278:	f10d 0c04 	add.w	ip, sp, #4
    327c:	f7ff ff74 	bl	3168 <outc.5724>
					val = (~val) + 1;
    3280:	f1c9 0900 	rsb	r9, r9, #0
    3284:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    3288:	2305      	movs	r3, #5
				enci (10000);
    328a:	f242 7810 	movw	r8, #10000	; 0x2710
    328e:	fbb9 f0f8 	udiv	r0, r9, r8
    3292:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    3296:	d103      	bne.n	32a0 <__pi_vfparse+0x118>
    3298:	3b01      	subs	r3, #1
    329a:	d117      	bne.n	32cc <__pi_vfparse+0x144>
    329c:	f04f 0801 	mov.w	r8, #1
    32a0:	fa1f fa80 	uxth.w	sl, r0
    32a4:	f10d 0c04 	add.w	ip, sp, #4
    32a8:	3030      	adds	r0, #48	; 0x30
    32aa:	f7ff ff5d 	bl	3168 <outc.5724>
    32ae:	fbb8 f3f6 	udiv	r3, r8, r6
    32b2:	fb08 991a 	mls	r9, r8, sl, r9
    32b6:	f1b8 0f09 	cmp.w	r8, #9
    32ba:	fa1f f989 	uxth.w	r9, r9
    32be:	b29b      	uxth	r3, r3
    32c0:	d98b      	bls.n	31da <__pi_vfparse+0x52>
    32c2:	fbb9 f0f3 	udiv	r0, r9, r3
    32c6:	4698      	mov	r8, r3
    32c8:	b2c0      	uxtb	r0, r0
    32ca:	e7e9      	b.n	32a0 <__pi_vfparse+0x118>
    32cc:	fbb8 f8f6 	udiv	r8, r8, r6
    32d0:	e7dd      	b.n	328e <__pi_vfparse+0x106>
				c = *fm;
    32d2:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    32d4:	2b64      	cmp	r3, #100	; 0x64
    32d6:	d001      	beq.n	32dc <__pi_vfparse+0x154>
    32d8:	2b75      	cmp	r3, #117	; 0x75
    32da:	d132      	bne.n	3342 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    32dc:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    32de:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    32e2:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    32e6:	d109      	bne.n	32fc <__pi_vfparse+0x174>
    32e8:	f1ba 0f00 	cmp.w	sl, #0
    32ec:	da06      	bge.n	32fc <__pi_vfparse+0x174>
						outc ('-');
    32ee:	202d      	movs	r0, #45	; 0x2d
    32f0:	f10d 0c04 	add.w	ip, sp, #4
    32f4:	f7ff ff38 	bl	3168 <outc.5724>
						val = (~val) + 1;
    32f8:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    32fc:	230a      	movs	r3, #10
					enci (1000000000UL);
    32fe:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 33b4 <__pi_vfparse+0x22c>
    3302:	fbba f9f8 	udiv	r9, sl, r8
    3306:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    330a:	d103      	bne.n	3314 <__pi_vfparse+0x18c>
    330c:	3b01      	subs	r3, #1
    330e:	d115      	bne.n	333c <__pi_vfparse+0x1b4>
    3310:	f04f 0801 	mov.w	r8, #1
    3314:	f10d 0c04 	add.w	ip, sp, #4
    3318:	f109 0030 	add.w	r0, r9, #48	; 0x30
    331c:	f7ff ff24 	bl	3168 <outc.5724>
    3320:	f1b8 0f09 	cmp.w	r8, #9
    3324:	fbb8 f3f6 	udiv	r3, r8, r6
    3328:	fb08 aa19 	mls	sl, r8, r9, sl
    332c:	f67f af55 	bls.w	31da <__pi_vfparse+0x52>
    3330:	fbba f9f3 	udiv	r9, sl, r3
    3334:	4698      	mov	r8, r3
    3336:	fa5f f989 	uxtb.w	r9, r9
    333a:	e7eb      	b.n	3314 <__pi_vfparse+0x18c>
    333c:	fbb8 f8f6 	udiv	r8, r8, r6
    3340:	e7df      	b.n	3302 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    3342:	2b78      	cmp	r3, #120	; 0x78
    3344:	d114      	bne.n	3370 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    3346:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    334a:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    334e:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    3350:	fa29 f308 	lsr.w	r3, r9, r8
    3354:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    3358:	5cf8      	ldrb	r0, [r7, r3]
    335a:	f10d 0c04 	add.w	ip, sp, #4
    335e:	f7ff ff03 	bl	3168 <outc.5724>
						if (i == 0)
    3362:	f1b8 0f00 	cmp.w	r8, #0
    3366:	f43f af38 	beq.w	31da <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    336a:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    336e:	e7ef      	b.n	3350 <__pi_vfparse+0x1c8>
					outc ('%');
    3370:	4648      	mov	r0, r9
    3372:	f10d 0c04 	add.w	ip, sp, #4
    3376:	f7ff fef7 	bl	3168 <outc.5724>
					outc ('l');
    337a:	4640      	mov	r0, r8
    337c:	f10d 0c04 	add.w	ip, sp, #4
    3380:	e729      	b.n	31d6 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    3382:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    3386:	f10d 0c04 	add.w	ip, sp, #4
    338a:	b280      	uxth	r0, r0
    338c:	e723      	b.n	31d6 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    338e:	f854 3b04 	ldr.w	r3, [r4], #4
    3392:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3396:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    339a:	2800      	cmp	r0, #0
    339c:	f43f af1d 	beq.w	31da <__pi_vfparse+0x52>
					outc (*st);
    33a0:	f10d 0c04 	add.w	ip, sp, #4
    33a4:	f7ff fee0 	bl	3168 <outc.5724>
					st++;
    33a8:	e7f5      	b.n	3396 <__pi_vfparse+0x20e>
		c = *fm++;
    33aa:	1c55      	adds	r5, r2, #1
    33ac:	e709      	b.n	31c2 <__pi_vfparse+0x3a>
    33ae:	bf00      	nop
    33b0:	00004e69 	andeq	r4, r0, r9, ror #28
    33b4:	3b9aca00 	blcc	fe6b5bbc <_estack+0xde6b0bbc>

000033b8 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    33b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33bc:	460e      	mov	r6, r1
    33be:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    33c0:	4604      	mov	r4, r0
    33c2:	b140      	cbz	r0, 33d6 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    33c4:	4613      	mov	r3, r2
    33c6:	460a      	mov	r2, r1
    33c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    33cc:	f7ff fedc 	bl	3188 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    33d0:	4620      	mov	r0, r4
    33d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    33d6:	4608      	mov	r0, r1
    33d8:	f7fe fa3c 	bl	1854 <__pi_strlen>
    33dc:	f100 0511 	add.w	r5, r0, #17
    33e0:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    33e2:	4628      	mov	r0, r5
    33e4:	f7fe fb38 	bl	1a58 <__pi_malloc>
    33e8:	4604      	mov	r4, r0
    33ea:	2800      	cmp	r0, #0
    33ec:	d0f0      	beq.n	33d0 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    33ee:	463b      	mov	r3, r7
    33f0:	4632      	mov	r2, r6
    33f2:	4629      	mov	r1, r5
    33f4:	f7ff fec8 	bl	3188 <__pi_vfparse>
    33f8:	4285      	cmp	r5, r0
    33fa:	4680      	mov	r8, r0
    33fc:	d2e8      	bcs.n	33d0 <vform+0x18>
		ufree (res);
    33fe:	4620      	mov	r0, r4
    3400:	f7fe fade 	bl	19c0 <__pi_free>
		goto Again;
    3404:	4645      	mov	r5, r8
    3406:	e7ec      	b.n	33e2 <vform+0x2a>

00003408 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    3408:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    340a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    340e:	2800      	cmp	r0, #0
    3410:	f000 81b5 	beq.w	377e <vscan+0x376>
    3414:	2900      	cmp	r1, #0
    3416:	f000 81b4 	beq.w	3782 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    341a:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    341c:	270a      	movs	r7, #10
    341e:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    3420:	f8df c370 	ldr.w	ip, [pc, #880]	; 3794 <vscan+0x38c>
    3424:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    3426:	f811 0b01 	ldrb.w	r0, [r1], #1
    342a:	b170      	cbz	r0, 344a <vscan+0x42>
		if (*fmt++ != '%')
    342c:	2825      	cmp	r0, #37	; 0x25
    342e:	d1f9      	bne.n	3424 <vscan+0x1c>
		switch (*fmt++) {
    3430:	7870      	ldrb	r0, [r6, #1]
    3432:	1cb1      	adds	r1, r6, #2
    3434:	286c      	cmp	r0, #108	; 0x6c
    3436:	f000 80e1 	beq.w	35fc <vscan+0x1f4>
    343a:	d809      	bhi.n	3450 <vscan+0x48>
    343c:	2863      	cmp	r0, #99	; 0x63
    343e:	f000 8184 	beq.w	374a <vscan+0x342>
    3442:	2864      	cmp	r0, #100	; 0x64
    3444:	d043      	beq.n	34ce <vscan+0xc6>
    3446:	2800      	cmp	r0, #0
    3448:	d1ec      	bne.n	3424 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    344a:	4620      	mov	r0, r4
    344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    3450:	2875      	cmp	r0, #117	; 0x75
    3452:	d074      	beq.n	353e <vscan+0x136>
    3454:	2878      	cmp	r0, #120	; 0x78
    3456:	f000 8098 	beq.w	358a <vscan+0x182>
    345a:	2873      	cmp	r0, #115	; 0x73
    345c:	d1e2      	bne.n	3424 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    345e:	7818      	ldrb	r0, [r3, #0]
    3460:	461e      	mov	r6, r3
    3462:	f1a0 0e09 	sub.w	lr, r0, #9
    3466:	fa5f fe8e 	uxtb.w	lr, lr
    346a:	f1be 0f17 	cmp.w	lr, #23
    346e:	4698      	mov	r8, r3
    3470:	f103 0301 	add.w	r3, r3, #1
    3474:	f240 8173 	bls.w	375e <vscan+0x356>
			if (*buf == '\0')
    3478:	2800      	cmp	r0, #0
    347a:	d0e6      	beq.n	344a <vscan+0x42>
			if (*buf != ',') {
    347c:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    347e:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    3482:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    3486:	d00e      	beq.n	34a6 <vscan+0x9e>
    3488:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    348a:	f818 3b01 	ldrb.w	r3, [r8], #1
    348e:	f1a3 0009 	sub.w	r0, r3, #9
    3492:	2801      	cmp	r0, #1
    3494:	d907      	bls.n	34a6 <vscan+0x9e>
    3496:	2b0d      	cmp	r3, #13
    3498:	d005      	beq.n	34a6 <vscan+0x9e>
    349a:	2b2c      	cmp	r3, #44	; 0x2c
    349c:	d003      	beq.n	34a6 <vscan+0x9e>
    349e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    34a2:	f040 8163 	bne.w	376c <vscan+0x364>
			while (isspace (*buf)) buf++;
    34a6:	f896 8000 	ldrb.w	r8, [r6]
    34aa:	4633      	mov	r3, r6
    34ac:	f1a8 0009 	sub.w	r0, r8, #9
    34b0:	b2c0      	uxtb	r0, r0
    34b2:	2817      	cmp	r0, #23
    34b4:	f106 0601 	add.w	r6, r6, #1
    34b8:	f240 815b 	bls.w	3772 <vscan+0x36a>
			if (*buf == ',') buf++;
    34bc:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    34c0:	bf08      	it	eq
    34c2:	4633      	moveq	r3, r6
			*sap = '\0';
    34c4:	f88e 5000 	strb.w	r5, [lr]
			break;
    34c8:	e7ac      	b.n	3424 <vscan+0x1c>
		    case 'd': scani (word); break;
    34ca:	2e00      	cmp	r6, #0
    34cc:	d0bd      	beq.n	344a <vscan+0x42>
    34ce:	469e      	mov	lr, r3
    34d0:	f813 6b01 	ldrb.w	r6, [r3], #1
    34d4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    34d8:	2809      	cmp	r0, #9
    34da:	d923      	bls.n	3524 <vscan+0x11c>
    34dc:	2e2d      	cmp	r6, #45	; 0x2d
    34de:	d001      	beq.n	34e4 <vscan+0xdc>
    34e0:	2e2b      	cmp	r6, #43	; 0x2b
    34e2:	d1f2      	bne.n	34ca <vscan+0xc2>
    34e4:	7818      	ldrb	r0, [r3, #0]
    34e6:	469e      	mov	lr, r3
    34e8:	3830      	subs	r0, #48	; 0x30
    34ea:	2809      	cmp	r0, #9
    34ec:	d8ef      	bhi.n	34ce <vscan+0xc6>
    34ee:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    34f2:	f1d9 0800 	rsbs	r8, r9, #0
    34f6:	eb48 0809 	adc.w	r8, r8, r9
    34fa:	f852 6b04 	ldr.w	r6, [r2], #4
    34fe:	3401      	adds	r4, #1
    3500:	8035      	strh	r5, [r6, #0]
    3502:	f89e 0000 	ldrb.w	r0, [lr]
    3506:	4673      	mov	r3, lr
    3508:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    350c:	f1b9 0f09 	cmp.w	r9, #9
    3510:	f10e 0e01 	add.w	lr, lr, #1
    3514:	d909      	bls.n	352a <vscan+0x122>
    3516:	f1b8 0f00 	cmp.w	r8, #0
    351a:	d183      	bne.n	3424 <vscan+0x1c>
    351c:	8830      	ldrh	r0, [r6, #0]
    351e:	4240      	negs	r0, r0
    3520:	8030      	strh	r0, [r6, #0]
    3522:	e77f      	b.n	3424 <vscan+0x1c>
    3524:	f04f 0800 	mov.w	r8, #0
    3528:	e7e7      	b.n	34fa <vscan+0xf2>
    352a:	8833      	ldrh	r3, [r6, #0]
    352c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3530:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    3534:	3030      	adds	r0, #48	; 0x30
    3536:	8030      	strh	r0, [r6, #0]
    3538:	e7e3      	b.n	3502 <vscan+0xfa>
		    case 'u': scanu (word); break;
    353a:	2800      	cmp	r0, #0
    353c:	d085      	beq.n	344a <vscan+0x42>
    353e:	7818      	ldrb	r0, [r3, #0]
    3540:	461e      	mov	r6, r3
    3542:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3546:	f1be 0f09 	cmp.w	lr, #9
    354a:	f103 0301 	add.w	r3, r3, #1
    354e:	d8f4      	bhi.n	353a <vscan+0x132>
    3550:	f852 eb04 	ldr.w	lr, [r2], #4
    3554:	3401      	adds	r4, #1
    3556:	f8ae 5000 	strh.w	r5, [lr]
    355a:	7830      	ldrb	r0, [r6, #0]
    355c:	4633      	mov	r3, r6
    355e:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    3562:	f1b8 0f09 	cmp.w	r8, #9
    3566:	f106 0601 	add.w	r6, r6, #1
    356a:	f63f af5b 	bhi.w	3424 <vscan+0x1c>
    356e:	f8be 3000 	ldrh.w	r3, [lr]
    3572:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3576:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    357a:	3830      	subs	r0, #48	; 0x30
    357c:	f8ae 0000 	strh.w	r0, [lr]
    3580:	e7eb      	b.n	355a <vscan+0x152>
		    case 'x': scanx (word); break;
    3582:	f1be 0f00 	cmp.w	lr, #0
    3586:	f43f af60 	beq.w	344a <vscan+0x42>
    358a:	f893 e000 	ldrb.w	lr, [r3]
    358e:	461e      	mov	r6, r3
    3590:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3594:	2809      	cmp	r0, #9
    3596:	f103 0301 	add.w	r3, r3, #1
    359a:	d904      	bls.n	35a6 <vscan+0x19e>
    359c:	f02e 0020 	bic.w	r0, lr, #32
    35a0:	3841      	subs	r0, #65	; 0x41
    35a2:	2805      	cmp	r0, #5
    35a4:	d8ed      	bhi.n	3582 <vscan+0x17a>
    35a6:	f852 eb04 	ldr.w	lr, [r2], #4
    35aa:	3401      	adds	r4, #1
    35ac:	f8ae 5000 	strh.w	r5, [lr]
    35b0:	f106 0805 	add.w	r8, r6, #5
    35b4:	f896 9000 	ldrb.w	r9, [r6]
    35b8:	4633      	mov	r3, r6
    35ba:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    35be:	b2c0      	uxtb	r0, r0
    35c0:	2809      	cmp	r0, #9
    35c2:	f106 0601 	add.w	r6, r6, #1
    35c6:	f240 80de 	bls.w	3786 <vscan+0x37e>
    35ca:	f029 0020 	bic.w	r0, r9, #32
    35ce:	3841      	subs	r0, #65	; 0x41
    35d0:	2805      	cmp	r0, #5
    35d2:	f63f af27 	bhi.w	3424 <vscan+0x1c>
    35d6:	4546      	cmp	r6, r8
    35d8:	f43f af24 	beq.w	3424 <vscan+0x1c>
    35dc:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    35e0:	2b05      	cmp	r3, #5
    35e2:	bf94      	ite	ls
    35e4:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    35e8:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    35ec:	b2c0      	uxtb	r0, r0
    35ee:	f8be 3000 	ldrh.w	r3, [lr]
    35f2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    35f6:	f8ae 0000 	strh.w	r0, [lr]
    35fa:	e7db      	b.n	35b4 <vscan+0x1ac>
			switch (*fmt++) {
    35fc:	78b0      	ldrb	r0, [r6, #2]
    35fe:	1cf1      	adds	r1, r6, #3
    3600:	2875      	cmp	r0, #117	; 0x75
    3602:	d07d      	beq.n	3700 <vscan+0x2f8>
    3604:	d831      	bhi.n	366a <vscan+0x262>
    3606:	2800      	cmp	r0, #0
    3608:	f43f af1f 	beq.w	344a <vscan+0x42>
    360c:	2864      	cmp	r0, #100	; 0x64
    360e:	f47f af09 	bne.w	3424 <vscan+0x1c>
    3612:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    3614:	f813 6b01 	ldrb.w	r6, [r3], #1
    3618:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    361c:	2809      	cmp	r0, #9
    361e:	d962      	bls.n	36e6 <vscan+0x2de>
    3620:	2e2d      	cmp	r6, #45	; 0x2d
    3622:	d001      	beq.n	3628 <vscan+0x220>
    3624:	2e2b      	cmp	r6, #43	; 0x2b
    3626:	d15b      	bne.n	36e0 <vscan+0x2d8>
    3628:	7818      	ldrb	r0, [r3, #0]
    362a:	4698      	mov	r8, r3
    362c:	3830      	subs	r0, #48	; 0x30
    362e:	2809      	cmp	r0, #9
    3630:	d8ef      	bhi.n	3612 <vscan+0x20a>
    3632:	3e2d      	subs	r6, #45	; 0x2d
    3634:	4270      	negs	r0, r6
    3636:	4170      	adcs	r0, r6
    3638:	f852 eb04 	ldr.w	lr, [r2], #4
    363c:	3401      	adds	r4, #1
    363e:	f8ce 5000 	str.w	r5, [lr]
    3642:	f898 6000 	ldrb.w	r6, [r8]
    3646:	4643      	mov	r3, r8
    3648:	3e30      	subs	r6, #48	; 0x30
    364a:	fa5f f986 	uxtb.w	r9, r6
    364e:	f1b9 0f09 	cmp.w	r9, #9
    3652:	f108 0801 	add.w	r8, r8, #1
    3656:	d948      	bls.n	36ea <vscan+0x2e2>
    3658:	2800      	cmp	r0, #0
    365a:	f47f aee3 	bne.w	3424 <vscan+0x1c>
    365e:	f8de 0000 	ldr.w	r0, [lr]
    3662:	4240      	negs	r0, r0
    3664:	f8ce 0000 	str.w	r0, [lr]
    3668:	e6dc      	b.n	3424 <vscan+0x1c>
    366a:	2878      	cmp	r0, #120	; 0x78
    366c:	f47f aeda 	bne.w	3424 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3670:	f893 e000 	ldrb.w	lr, [r3]
    3674:	461e      	mov	r6, r3
    3676:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    367a:	2809      	cmp	r0, #9
    367c:	f103 0301 	add.w	r3, r3, #1
    3680:	d904      	bls.n	368c <vscan+0x284>
    3682:	f02e 0020 	bic.w	r0, lr, #32
    3686:	3841      	subs	r0, #65	; 0x41
    3688:	2805      	cmp	r0, #5
    368a:	d85a      	bhi.n	3742 <vscan+0x33a>
    368c:	f852 eb04 	ldr.w	lr, [r2], #4
    3690:	3401      	adds	r4, #1
    3692:	f8ce 5000 	str.w	r5, [lr]
    3696:	f106 0809 	add.w	r8, r6, #9
    369a:	f896 9000 	ldrb.w	r9, [r6]
    369e:	4633      	mov	r3, r6
    36a0:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    36a4:	b2c0      	uxtb	r0, r0
    36a6:	2809      	cmp	r0, #9
    36a8:	f106 0601 	add.w	r6, r6, #1
    36ac:	d96f      	bls.n	378e <vscan+0x386>
    36ae:	f029 0020 	bic.w	r0, r9, #32
    36b2:	3841      	subs	r0, #65	; 0x41
    36b4:	2805      	cmp	r0, #5
    36b6:	f63f aeb5 	bhi.w	3424 <vscan+0x1c>
    36ba:	4546      	cmp	r6, r8
    36bc:	f43f aeb2 	beq.w	3424 <vscan+0x1c>
    36c0:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    36c4:	2b05      	cmp	r3, #5
    36c6:	bf94      	ite	ls
    36c8:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    36cc:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    36d0:	b2c0      	uxtb	r0, r0
    36d2:	f8de 3000 	ldr.w	r3, [lr]
    36d6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    36da:	f8ce 0000 	str.w	r0, [lr]
    36de:	e7dc      	b.n	369a <vscan+0x292>
		    	    case 'd': scani (lword); break;
    36e0:	2e00      	cmp	r6, #0
    36e2:	d196      	bne.n	3612 <vscan+0x20a>
    36e4:	e6b1      	b.n	344a <vscan+0x42>
    36e6:	2000      	movs	r0, #0
    36e8:	e7a6      	b.n	3638 <vscan+0x230>
    36ea:	f8de 3000 	ldr.w	r3, [lr]
    36ee:	b2b6      	uxth	r6, r6
    36f0:	437b      	muls	r3, r7
    36f2:	1b9e      	subs	r6, r3, r6
    36f4:	f8ce 6000 	str.w	r6, [lr]
    36f8:	e7a3      	b.n	3642 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    36fa:	2800      	cmp	r0, #0
    36fc:	f43f aea5 	beq.w	344a <vscan+0x42>
    3700:	7818      	ldrb	r0, [r3, #0]
    3702:	461e      	mov	r6, r3
    3704:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3708:	f1be 0f09 	cmp.w	lr, #9
    370c:	f103 0301 	add.w	r3, r3, #1
    3710:	d8f3      	bhi.n	36fa <vscan+0x2f2>
    3712:	f852 eb04 	ldr.w	lr, [r2], #4
    3716:	3401      	adds	r4, #1
    3718:	f8ce 5000 	str.w	r5, [lr]
    371c:	7830      	ldrb	r0, [r6, #0]
    371e:	4633      	mov	r3, r6
    3720:	3830      	subs	r0, #48	; 0x30
    3722:	fa5f f880 	uxtb.w	r8, r0
    3726:	f1b8 0f09 	cmp.w	r8, #9
    372a:	f106 0601 	add.w	r6, r6, #1
    372e:	f63f ae79 	bhi.w	3424 <vscan+0x1c>
    3732:	f8de 3000 	ldr.w	r3, [lr]
    3736:	b280      	uxth	r0, r0
    3738:	fb07 0003 	mla	r0, r7, r3, r0
    373c:	f8ce 0000 	str.w	r0, [lr]
    3740:	e7ec      	b.n	371c <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    3742:	f1be 0f00 	cmp.w	lr, #0
    3746:	d193      	bne.n	3670 <vscan+0x268>
    3748:	e67f      	b.n	344a <vscan+0x42>
			if ((c = *buf++) == '\0')
    374a:	f813 0b01 	ldrb.w	r0, [r3], #1
    374e:	2800      	cmp	r0, #0
    3750:	f43f ae7b 	beq.w	344a <vscan+0x42>
			sap = va_arg (ap, char*);
    3754:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    3758:	3401      	adds	r4, #1
			*sap = c;
    375a:	7030      	strb	r0, [r6, #0]
			break;
    375c:	e662      	b.n	3424 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    375e:	fa2c fe0e 	lsr.w	lr, ip, lr
    3762:	f01e 0f01 	tst.w	lr, #1
    3766:	f47f ae7a 	bne.w	345e <vscan+0x56>
    376a:	e687      	b.n	347c <vscan+0x74>
						*sap++ = *buf++;
    376c:	f80e 3b01 	strb.w	r3, [lr], #1
    3770:	e68a      	b.n	3488 <vscan+0x80>
			while (isspace (*buf)) buf++;
    3772:	fa2c f000 	lsr.w	r0, ip, r0
    3776:	07c0      	lsls	r0, r0, #31
    3778:	f53f ae95 	bmi.w	34a6 <vscan+0x9e>
    377c:	e6a2      	b.n	34c4 <vscan+0xbc>
		return 0;
    377e:	4604      	mov	r4, r0
    3780:	e663      	b.n	344a <vscan+0x42>
    3782:	460c      	mov	r4, r1
    3784:	e661      	b.n	344a <vscan+0x42>
		    case 'x': scanx (word); break;
    3786:	4546      	cmp	r6, r8
    3788:	f47f af31 	bne.w	35ee <vscan+0x1e6>
    378c:	e64a      	b.n	3424 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    378e:	4546      	cmp	r6, r8
    3790:	d19f      	bne.n	36d2 <vscan+0x2ca>
    3792:	e647      	b.n	3424 <vscan+0x1c>
    3794:	00800013 	addeq	r0, r0, r3, lsl r0

00003798 <SafeHapiVoid>:
    3798:	b570      	push	{r4, r5, r6, lr}
    379a:	4606      	mov	r6, r0
    379c:	f000 f844 	bl	3828 <NOROM_CPUcpsid>
    37a0:	4605      	mov	r5, r0
    37a2:	4c06      	ldr	r4, [pc, #24]	; (37bc <SafeHapiVoid+0x24>)
    37a4:	6823      	ldr	r3, [r4, #0]
    37a6:	2b00      	cmp	r3, #0
    37a8:	d0fb      	beq.n	37a2 <SafeHapiVoid+0xa>
    37aa:	47b0      	blx	r6
    37ac:	2301      	movs	r3, #1
    37ae:	6023      	str	r3, [r4, #0]
    37b0:	b91d      	cbnz	r5, 37ba <SafeHapiVoid+0x22>
    37b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    37b6:	f000 b83b 	b.w	3830 <NOROM_CPUcpsie>
    37ba:	bd70      	pop	{r4, r5, r6, pc}
    37bc:	400c8000 	andmi	r8, ip, r0

000037c0 <NOROM_AONBatMonTemperatureGetDegC>:
    37c0:	4b08      	ldr	r3, [pc, #32]	; (37e4 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    37c2:	6818      	ldr	r0, [r3, #0]
    37c4:	4b08      	ldr	r3, [pc, #32]	; (37e8 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    37c6:	7819      	ldrb	r1, [r3, #0]
    37c8:	4b08      	ldr	r3, [pc, #32]	; (37ec <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    37ca:	681a      	ldr	r2, [r3, #0]
    37cc:	f340 0310 	sbfx	r3, r0, #0, #17
    37d0:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    37d4:	b248      	sxtb	r0, r1
    37d6:	4350      	muls	r0, r2
    37d8:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    37dc:	3080      	adds	r0, #128	; 0x80
    37de:	1200      	asrs	r0, r0, #8
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	40095030 	andmi	r5, r9, r0, lsr r0
    37e8:	5000130c 	andpl	r1, r0, ip, lsl #6
    37ec:	40095028 	andmi	r5, r9, r8, lsr #32

000037f0 <NOROM_AONRTCCurrentCompareValueGet>:
    37f0:	4a05      	ldr	r2, [pc, #20]	; (3808 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    37f2:	4906      	ldr	r1, [pc, #24]	; (380c <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    37f4:	6813      	ldr	r3, [r2, #0]
    37f6:	6808      	ldr	r0, [r1, #0]
    37f8:	6812      	ldr	r2, [r2, #0]
    37fa:	4293      	cmp	r3, r2
    37fc:	d1f8      	bne.n	37f0 <NOROM_AONRTCCurrentCompareValueGet>
    37fe:	041b      	lsls	r3, r3, #16
    3800:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3804:	4770      	bx	lr
    3806:	bf00      	nop
    3808:	40092008 	andmi	r2, r9, r8
    380c:	4009200c 	andmi	r2, r9, ip

00003810 <NOROM_AONRTCCurrent64BitValueGet>:
    3810:	4b03      	ldr	r3, [pc, #12]	; (3820 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    3812:	4904      	ldr	r1, [pc, #16]	; (3824 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3814:	681a      	ldr	r2, [r3, #0]
    3816:	6808      	ldr	r0, [r1, #0]
    3818:	6819      	ldr	r1, [r3, #0]
    381a:	4291      	cmp	r1, r2
    381c:	d1f8      	bne.n	3810 <NOROM_AONRTCCurrent64BitValueGet>
    381e:	4770      	bx	lr
    3820:	40092008 	andmi	r2, r9, r8
    3824:	4009200c 	andmi	r2, r9, ip

00003828 <NOROM_CPUcpsid>:
    3828:	f3ef 8010 	mrs	r0, PRIMASK
    382c:	b672      	cpsid	i
    382e:	4770      	bx	lr

00003830 <NOROM_CPUcpsie>:
    3830:	f3ef 8010 	mrs	r0, PRIMASK
    3834:	b662      	cpsie	i
    3836:	4770      	bx	lr

00003838 <NOROM_OSCClockSourceSet>:
    3838:	b573      	push	{r0, r1, r4, r5, r6, lr}
    383a:	460c      	mov	r4, r1
    383c:	07c1      	lsls	r1, r0, #31
    383e:	4605      	mov	r5, r0
    3840:	d509      	bpl.n	3856 <NOROM_OSCClockSourceSet+0x1e>
    3842:	4b12      	ldr	r3, [pc, #72]	; (388c <NOROM_OSCClockSourceSet+0x54>)
    3844:	b2a2      	uxth	r2, r4
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	2100      	movs	r1, #0
    384a:	9200      	str	r2, [sp, #0]
    384c:	685e      	ldr	r6, [r3, #4]
    384e:	4810      	ldr	r0, [pc, #64]	; (3890 <NOROM_OSCClockSourceSet+0x58>)
    3850:	2201      	movs	r2, #1
    3852:	460b      	mov	r3, r1
    3854:	47b0      	blx	r6
    3856:	07aa      	lsls	r2, r5, #30
    3858:	d509      	bpl.n	386e <NOROM_OSCClockSourceSet+0x36>
    385a:	4b0c      	ldr	r3, [pc, #48]	; (388c <NOROM_OSCClockSourceSet+0x54>)
    385c:	b2a2      	uxth	r2, r4
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	9200      	str	r2, [sp, #0]
    3862:	685e      	ldr	r6, [r3, #4]
    3864:	480a      	ldr	r0, [pc, #40]	; (3890 <NOROM_OSCClockSourceSet+0x58>)
    3866:	2100      	movs	r1, #0
    3868:	2202      	movs	r2, #2
    386a:	2301      	movs	r3, #1
    386c:	47b0      	blx	r6
    386e:	076b      	lsls	r3, r5, #29
    3870:	d509      	bpl.n	3886 <NOROM_OSCClockSourceSet+0x4e>
    3872:	4b06      	ldr	r3, [pc, #24]	; (388c <NOROM_OSCClockSourceSet+0x54>)
    3874:	b2a4      	uxth	r4, r4
    3876:	681b      	ldr	r3, [r3, #0]
    3878:	9400      	str	r4, [sp, #0]
    387a:	685c      	ldr	r4, [r3, #4]
    387c:	4804      	ldr	r0, [pc, #16]	; (3890 <NOROM_OSCClockSourceSet+0x58>)
    387e:	2100      	movs	r1, #0
    3880:	220c      	movs	r2, #12
    3882:	2302      	movs	r3, #2
    3884:	47a0      	blx	r4
    3886:	b002      	add	sp, #8
    3888:	bd70      	pop	{r4, r5, r6, pc}
    388a:	bf00      	nop
    388c:	100001a4 	andne	r0, r0, r4, lsr #3
    3890:	400ca000 	andmi	sl, ip, r0

00003894 <NOROM_OSCClockSourceGet>:
    3894:	b510      	push	{r4, lr}
    3896:	4b08      	ldr	r3, [pc, #32]	; (38b8 <NOROM_OSCClockSourceGet+0x24>)
    3898:	2804      	cmp	r0, #4
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	f04f 0134 	mov.w	r1, #52	; 0x34
    38a0:	68dc      	ldr	r4, [r3, #12]
    38a2:	bf07      	ittee	eq
    38a4:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    38a8:	231d      	moveq	r3, #29
    38aa:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    38ae:	231c      	movne	r3, #28
    38b0:	4802      	ldr	r0, [pc, #8]	; (38bc <NOROM_OSCClockSourceGet+0x28>)
    38b2:	47a0      	blx	r4
    38b4:	bd10      	pop	{r4, pc}
    38b6:	bf00      	nop
    38b8:	100001a4 	andne	r0, r0, r4, lsr #3
    38bc:	400ca000 	andmi	sl, ip, r0

000038c0 <NOROM_OSCHF_TurnOnXosc>:
    38c0:	b508      	push	{r3, lr}
    38c2:	2003      	movs	r0, #3
    38c4:	2101      	movs	r1, #1
    38c6:	f7ff ffb7 	bl	3838 <NOROM_OSCClockSourceSet>
    38ca:	f7ff ff91 	bl	37f0 <NOROM_AONRTCCurrentCompareValueGet>
    38ce:	4b01      	ldr	r3, [pc, #4]	; (38d4 <NOROM_OSCHF_TurnOnXosc+0x14>)
    38d0:	6098      	str	r0, [r3, #8]
    38d2:	bd08      	pop	{r3, pc}
    38d4:	20000640 	andcs	r0, r0, r0, asr #12

000038d8 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    38d8:	b510      	push	{r4, lr}
    38da:	2001      	movs	r0, #1
    38dc:	f7ff ffda 	bl	3894 <NOROM_OSCClockSourceGet>
    38e0:	2801      	cmp	r0, #1
    38e2:	d01c      	beq.n	391e <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    38e4:	4b0f      	ldr	r3, [pc, #60]	; (3924 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    38e6:	4810      	ldr	r0, [pc, #64]	; (3928 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	2134      	movs	r1, #52	; 0x34
    38ec:	68dc      	ldr	r4, [r3, #12]
    38ee:	2201      	movs	r2, #1
    38f0:	2300      	movs	r3, #0
    38f2:	47a0      	blx	r4
    38f4:	b1a0      	cbz	r0, 3920 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    38f6:	4b0d      	ldr	r3, [pc, #52]	; (392c <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    38f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    38fa:	f7ff ff4d 	bl	3798 <SafeHapiVoid>
    38fe:	f7ff ff77 	bl	37f0 <NOROM_AONRTCCurrentCompareValueGet>
    3902:	4a0b      	ldr	r2, [pc, #44]	; (3930 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3904:	6893      	ldr	r3, [r2, #8]
    3906:	60d0      	str	r0, [r2, #12]
    3908:	1ac0      	subs	r0, r0, r3
    390a:	4b0a      	ldr	r3, [pc, #40]	; (3934 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    390c:	4358      	muls	r0, r3
    390e:	6813      	ldr	r3, [r2, #0]
    3910:	0c00      	lsrs	r0, r0, #16
    3912:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3916:	4283      	cmp	r3, r0
    3918:	bf94      	ite	ls
    391a:	6010      	strls	r0, [r2, #0]
    391c:	6013      	strhi	r3, [r2, #0]
    391e:	2001      	movs	r0, #1
    3920:	bd10      	pop	{r4, pc}
    3922:	bf00      	nop
    3924:	100001a4 	andne	r0, r0, r4, lsr #3
    3928:	400ca000 	andmi	sl, ip, r0
    392c:	10000048 	andne	r0, r0, r8, asr #32
    3930:	20000640 	andcs	r0, r0, r0, asr #12
    3934:	000f4240 	andeq	r4, pc, r0, asr #4

00003938 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3938:	b510      	push	{r4, lr}
    393a:	2003      	movs	r0, #3
    393c:	2100      	movs	r1, #0
    393e:	f7ff ff7b 	bl	3838 <NOROM_OSCClockSourceSet>
    3942:	2001      	movs	r0, #1
    3944:	f7ff ffa6 	bl	3894 <NOROM_OSCClockSourceGet>
    3948:	b118      	cbz	r0, 3952 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    394a:	4b06      	ldr	r3, [pc, #24]	; (3964 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    394c:	6b98      	ldr	r0, [r3, #56]	; 0x38
    394e:	f7ff ff23 	bl	3798 <SafeHapiVoid>
    3952:	f7ff ff4d 	bl	37f0 <NOROM_AONRTCCurrentCompareValueGet>
    3956:	4c04      	ldr	r4, [pc, #16]	; (3968 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3958:	6060      	str	r0, [r4, #4]
    395a:	f7ff ff31 	bl	37c0 <NOROM_AONBatMonTemperatureGetDegC>
    395e:	6120      	str	r0, [r4, #16]
    3960:	bd10      	pop	{r4, pc}
    3962:	bf00      	nop
    3964:	10000048 	andne	r0, r0, r8, asr #32
    3968:	20000640 	andcs	r0, r0, r0, asr #12

0000396c <NOROM_RFCDoorbellSendTo>:
    396c:	4a07      	ldr	r2, [pc, #28]	; (398c <NOROM_RFCDoorbellSendTo+0x20>)
    396e:	6811      	ldr	r1, [r2, #0]
    3970:	2900      	cmp	r1, #0
    3972:	d1fb      	bne.n	396c <NOROM_RFCDoorbellSendTo>
    3974:	4b06      	ldr	r3, [pc, #24]	; (3990 <NOROM_RFCDoorbellSendTo+0x24>)
    3976:	6019      	str	r1, [r3, #0]
    3978:	6010      	str	r0, [r2, #0]
    397a:	681a      	ldr	r2, [r3, #0]
    397c:	2a00      	cmp	r2, #0
    397e:	d0fc      	beq.n	397a <NOROM_RFCDoorbellSendTo+0xe>
    3980:	4b03      	ldr	r3, [pc, #12]	; (3990 <NOROM_RFCDoorbellSendTo+0x24>)
    3982:	2200      	movs	r2, #0
    3984:	601a      	str	r2, [r3, #0]
    3986:	f853 0c18 	ldr.w	r0, [r3, #-24]
    398a:	4770      	bx	lr
    398c:	40041000 	andmi	r1, r4, r0
    3990:	4004101c 	andmi	r1, r4, ip, lsl r0

00003994 <NOROM_RFCSynthPowerDown>:
    3994:	4a0e      	ldr	r2, [pc, #56]	; (39d0 <NOROM_RFCSynthPowerDown+0x3c>)
    3996:	490f      	ldr	r1, [pc, #60]	; (39d4 <NOROM_RFCSynthPowerDown+0x40>)
    3998:	6813      	ldr	r3, [r2, #0]
    399a:	2050      	movs	r0, #80	; 0x50
    399c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    39a0:	f023 0302 	bic.w	r3, r3, #2
    39a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    39a8:	6013      	str	r3, [r2, #0]
    39aa:	4b0b      	ldr	r3, [pc, #44]	; (39d8 <NOROM_RFCSynthPowerDown+0x44>)
    39ac:	2203      	movs	r2, #3
    39ae:	601a      	str	r2, [r3, #0]
    39b0:	f241 0330 	movw	r3, #4144	; 0x1030
    39b4:	4a09      	ldr	r2, [pc, #36]	; (39dc <NOROM_RFCSynthPowerDown+0x48>)
    39b6:	600b      	str	r3, [r1, #0]
    39b8:	2301      	movs	r3, #1
    39ba:	6013      	str	r3, [r2, #0]
    39bc:	6008      	str	r0, [r1, #0]
    39be:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    39c2:	6013      	str	r3, [r2, #0]
    39c4:	6008      	str	r0, [r1, #0]
    39c6:	6013      	str	r3, [r2, #0]
    39c8:	f842 3c0c 	str.w	r3, [r2, #-12]
    39cc:	4770      	bx	lr
    39ce:	bf00      	nop
    39d0:	60040000 	andvs	r0, r4, r0
    39d4:	40044114 	andmi	r4, r4, r4, lsl r1
    39d8:	40044108 	andmi	r4, r4, r8, lsl #2
    39dc:	4004410c 	andmi	r4, r4, ip, lsl #2

000039e0 <NOROM_RFCRfTrimRead>:
    39e0:	f640 0202 	movw	r2, #2050	; 0x802
    39e4:	8803      	ldrh	r3, [r0, #0]
    39e6:	4293      	cmp	r3, r2
    39e8:	d006      	beq.n	39f8 <NOROM_RFCRfTrimRead+0x18>
    39ea:	f643 0207 	movw	r2, #14343	; 0x3807
    39ee:	4293      	cmp	r3, r2
    39f0:	d104      	bne.n	39fc <NOROM_RFCRfTrimRead+0x1c>
    39f2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    39f6:	e002      	b.n	39fe <NOROM_RFCRfTrimRead+0x1e>
    39f8:	7bc3      	ldrb	r3, [r0, #15]
    39fa:	e000      	b.n	39fe <NOROM_RFCRfTrimRead+0x1e>
    39fc:	2300      	movs	r3, #0
    39fe:	4a36      	ldr	r2, [pc, #216]	; (3ad8 <NOROM_RFCRfTrimRead+0xf8>)
    3a00:	2b0a      	cmp	r3, #10
    3a02:	6812      	ldr	r2, [r2, #0]
    3a04:	600a      	str	r2, [r1, #0]
    3a06:	d031      	beq.n	3a6c <NOROM_RFCRfTrimRead+0x8c>
    3a08:	dc10      	bgt.n	3a2c <NOROM_RFCRfTrimRead+0x4c>
    3a0a:	2b05      	cmp	r3, #5
    3a0c:	d021      	beq.n	3a52 <NOROM_RFCRfTrimRead+0x72>
    3a0e:	2b06      	cmp	r3, #6
    3a10:	d153      	bne.n	3aba <NOROM_RFCRfTrimRead+0xda>
    3a12:	4b32      	ldr	r3, [pc, #200]	; (3adc <NOROM_RFCRfTrimRead+0xfc>)
    3a14:	681b      	ldr	r3, [r3, #0]
    3a16:	604b      	str	r3, [r1, #4]
    3a18:	4b31      	ldr	r3, [pc, #196]	; (3ae0 <NOROM_RFCRfTrimRead+0x100>)
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	608b      	str	r3, [r1, #8]
    3a1e:	4b31      	ldr	r3, [pc, #196]	; (3ae4 <NOROM_RFCRfTrimRead+0x104>)
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3a26:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3a2a:	e052      	b.n	3ad2 <NOROM_RFCRfTrimRead+0xf2>
    3a2c:	2b0f      	cmp	r3, #15
    3a2e:	d02a      	beq.n	3a86 <NOROM_RFCRfTrimRead+0xa6>
    3a30:	2b1e      	cmp	r3, #30
    3a32:	d035      	beq.n	3aa0 <NOROM_RFCRfTrimRead+0xc0>
    3a34:	2b0c      	cmp	r3, #12
    3a36:	d140      	bne.n	3aba <NOROM_RFCRfTrimRead+0xda>
    3a38:	4b2b      	ldr	r3, [pc, #172]	; (3ae8 <NOROM_RFCRfTrimRead+0x108>)
    3a3a:	681b      	ldr	r3, [r3, #0]
    3a3c:	604b      	str	r3, [r1, #4]
    3a3e:	4b2b      	ldr	r3, [pc, #172]	; (3aec <NOROM_RFCRfTrimRead+0x10c>)
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	608b      	str	r3, [r1, #8]
    3a44:	4b2a      	ldr	r3, [pc, #168]	; (3af0 <NOROM_RFCRfTrimRead+0x110>)
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3a4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3a50:	e03f      	b.n	3ad2 <NOROM_RFCRfTrimRead+0xf2>
    3a52:	4b28      	ldr	r3, [pc, #160]	; (3af4 <NOROM_RFCRfTrimRead+0x114>)
    3a54:	681b      	ldr	r3, [r3, #0]
    3a56:	604b      	str	r3, [r1, #4]
    3a58:	4b27      	ldr	r3, [pc, #156]	; (3af8 <NOROM_RFCRfTrimRead+0x118>)
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	608b      	str	r3, [r1, #8]
    3a5e:	4b27      	ldr	r3, [pc, #156]	; (3afc <NOROM_RFCRfTrimRead+0x11c>)
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3a66:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3a6a:	e032      	b.n	3ad2 <NOROM_RFCRfTrimRead+0xf2>
    3a6c:	4b24      	ldr	r3, [pc, #144]	; (3b00 <NOROM_RFCRfTrimRead+0x120>)
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	604b      	str	r3, [r1, #4]
    3a72:	4b24      	ldr	r3, [pc, #144]	; (3b04 <NOROM_RFCRfTrimRead+0x124>)
    3a74:	681b      	ldr	r3, [r3, #0]
    3a76:	608b      	str	r3, [r1, #8]
    3a78:	4b23      	ldr	r3, [pc, #140]	; (3b08 <NOROM_RFCRfTrimRead+0x128>)
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3a80:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3a84:	e025      	b.n	3ad2 <NOROM_RFCRfTrimRead+0xf2>
    3a86:	4b21      	ldr	r3, [pc, #132]	; (3b0c <NOROM_RFCRfTrimRead+0x12c>)
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	604b      	str	r3, [r1, #4]
    3a8c:	4b20      	ldr	r3, [pc, #128]	; (3b10 <NOROM_RFCRfTrimRead+0x130>)
    3a8e:	681b      	ldr	r3, [r3, #0]
    3a90:	608b      	str	r3, [r1, #8]
    3a92:	4b20      	ldr	r3, [pc, #128]	; (3b14 <NOROM_RFCRfTrimRead+0x134>)
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3a9a:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3a9e:	e018      	b.n	3ad2 <NOROM_RFCRfTrimRead+0xf2>
    3aa0:	4b1d      	ldr	r3, [pc, #116]	; (3b18 <NOROM_RFCRfTrimRead+0x138>)
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	604b      	str	r3, [r1, #4]
    3aa6:	4b1d      	ldr	r3, [pc, #116]	; (3b1c <NOROM_RFCRfTrimRead+0x13c>)
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	608b      	str	r3, [r1, #8]
    3aac:	4b1c      	ldr	r3, [pc, #112]	; (3b20 <NOROM_RFCRfTrimRead+0x140>)
    3aae:	681b      	ldr	r3, [r3, #0]
    3ab0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3ab4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3ab8:	e00b      	b.n	3ad2 <NOROM_RFCRfTrimRead+0xf2>
    3aba:	4b1a      	ldr	r3, [pc, #104]	; (3b24 <NOROM_RFCRfTrimRead+0x144>)
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	604b      	str	r3, [r1, #4]
    3ac0:	4b19      	ldr	r3, [pc, #100]	; (3b28 <NOROM_RFCRfTrimRead+0x148>)
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	608b      	str	r3, [r1, #8]
    3ac6:	4b19      	ldr	r3, [pc, #100]	; (3b2c <NOROM_RFCRfTrimRead+0x14c>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3ad2:	60cb      	str	r3, [r1, #12]
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	5000134c 	andpl	r1, r0, ip, asr #6
    3adc:	500010c8 	andpl	r1, r0, r8, asr #1
    3ae0:	500010e0 	andpl	r1, r0, r0, ror #1
    3ae4:	500010f8 	strdpl	r1, [r0], -r8
    3ae8:	500010d0 	ldrdpl	r1, [r0], -r0
    3aec:	500010e8 	andpl	r1, r0, r8, ror #1
    3af0:	50001100 	andpl	r1, r0, r0, lsl #2
    3af4:	500010c4 	andpl	r1, r0, r4, asr #1
    3af8:	500010dc 	ldrdpl	r1, [r0], -ip
    3afc:	500010f4 	strdpl	r1, [r0], -r4
    3b00:	500010cc 	andpl	r1, r0, ip, asr #1
    3b04:	500010e4 	andpl	r1, r0, r4, ror #1
    3b08:	500010fc 	strdpl	r1, [r0], -ip
    3b0c:	500010d4 	ldrdpl	r1, [r0], -r4
    3b10:	500010ec 	andpl	r1, r0, ip, ror #1
    3b14:	50001104 	andpl	r1, r0, r4, lsl #2
    3b18:	500010d8 	ldrdpl	r1, [r0], -r8
    3b1c:	500010f0 	strdpl	r1, [r0], -r0
    3b20:	50001108 	andpl	r1, r0, r8, lsl #2
    3b24:	50001354 	andpl	r1, r0, r4, asr r3
    3b28:	50001358 	andpl	r1, r0, r8, asr r3
    3b2c:	50001380 	andpl	r1, r0, r0, lsl #7

00003b30 <NOROM_RFCRTrim>:
    3b30:	f643 0206 	movw	r2, #14342	; 0x3806
    3b34:	b570      	push	{r4, r5, r6, lr}
    3b36:	8803      	ldrh	r3, [r0, #0]
    3b38:	4293      	cmp	r3, r2
    3b3a:	d00a      	beq.n	3b52 <NOROM_RFCRTrim+0x22>
    3b3c:	f643 0207 	movw	r2, #14343	; 0x3807
    3b40:	4293      	cmp	r3, r2
    3b42:	d009      	beq.n	3b58 <NOROM_RFCRTrim+0x28>
    3b44:	f640 0202 	movw	r2, #2050	; 0x802
    3b48:	4293      	cmp	r3, r2
    3b4a:	d16b      	bne.n	3c24 <NOROM_RFCRTrim+0xf4>
    3b4c:	7bc1      	ldrb	r1, [r0, #15]
    3b4e:	6943      	ldr	r3, [r0, #20]
    3b50:	e005      	b.n	3b5e <NOROM_RFCRTrim+0x2e>
    3b52:	69c3      	ldr	r3, [r0, #28]
    3b54:	2102      	movs	r1, #2
    3b56:	e002      	b.n	3b5e <NOROM_RFCRTrim+0x2e>
    3b58:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3b5c:	69c3      	ldr	r3, [r0, #28]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d060      	beq.n	3c24 <NOROM_RFCRTrim+0xf4>
    3b62:	f103 0414 	add.w	r4, r3, #20
    3b66:	f244 0538 	movw	r5, #16440	; 0x4038
    3b6a:	681a      	ldr	r2, [r3, #0]
    3b6c:	4618      	mov	r0, r3
    3b6e:	b296      	uxth	r6, r2
    3b70:	42ae      	cmp	r6, r5
    3b72:	f103 0304 	add.w	r3, r3, #4
    3b76:	d103      	bne.n	3b80 <NOROM_RFCRTrim+0x50>
    3b78:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3b7c:	b91c      	cbnz	r4, 3b86 <NOROM_RFCRTrim+0x56>
    3b7e:	bd70      	pop	{r4, r5, r6, pc}
    3b80:	42a3      	cmp	r3, r4
    3b82:	d1f0      	bne.n	3b66 <NOROM_RFCRTrim+0x36>
    3b84:	bd70      	pop	{r4, r5, r6, pc}
    3b86:	290a      	cmp	r1, #10
    3b88:	d01d      	beq.n	3bc6 <NOROM_RFCRTrim+0x96>
    3b8a:	dc06      	bgt.n	3b9a <NOROM_RFCRTrim+0x6a>
    3b8c:	2905      	cmp	r1, #5
    3b8e:	d013      	beq.n	3bb8 <NOROM_RFCRTrim+0x88>
    3b90:	2906      	cmp	r1, #6
    3b92:	d016      	beq.n	3bc2 <NOROM_RFCRTrim+0x92>
    3b94:	2902      	cmp	r1, #2
    3b96:	d11f      	bne.n	3bd8 <NOROM_RFCRTrim+0xa8>
    3b98:	e007      	b.n	3baa <NOROM_RFCRTrim+0x7a>
    3b9a:	290f      	cmp	r1, #15
    3b9c:	d015      	beq.n	3bca <NOROM_RFCRTrim+0x9a>
    3b9e:	291e      	cmp	r1, #30
    3ba0:	d015      	beq.n	3bce <NOROM_RFCRTrim+0x9e>
    3ba2:	290c      	cmp	r1, #12
    3ba4:	d118      	bne.n	3bd8 <NOROM_RFCRTrim+0xa8>
    3ba6:	4b20      	ldr	r3, [pc, #128]	; (3c28 <NOROM_RFCRTrim+0xf8>)
    3ba8:	e012      	b.n	3bd0 <NOROM_RFCRTrim+0xa0>
    3baa:	4b20      	ldr	r3, [pc, #128]	; (3c2c <NOROM_RFCRTrim+0xfc>)
    3bac:	681b      	ldr	r3, [r3, #0]
    3bae:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3bb2:	2b0f      	cmp	r3, #15
    3bb4:	d12a      	bne.n	3c0c <NOROM_RFCRTrim+0xdc>
    3bb6:	e023      	b.n	3c00 <NOROM_RFCRTrim+0xd0>
    3bb8:	4b1d      	ldr	r3, [pc, #116]	; (3c30 <NOROM_RFCRTrim+0x100>)
    3bba:	681b      	ldr	r3, [r3, #0]
    3bbc:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3bc0:	e02c      	b.n	3c1c <NOROM_RFCRTrim+0xec>
    3bc2:	4b1c      	ldr	r3, [pc, #112]	; (3c34 <NOROM_RFCRTrim+0x104>)
    3bc4:	e004      	b.n	3bd0 <NOROM_RFCRTrim+0xa0>
    3bc6:	4b1c      	ldr	r3, [pc, #112]	; (3c38 <NOROM_RFCRTrim+0x108>)
    3bc8:	e002      	b.n	3bd0 <NOROM_RFCRTrim+0xa0>
    3bca:	4b1c      	ldr	r3, [pc, #112]	; (3c3c <NOROM_RFCRTrim+0x10c>)
    3bcc:	e000      	b.n	3bd0 <NOROM_RFCRTrim+0xa0>
    3bce:	4b1c      	ldr	r3, [pc, #112]	; (3c40 <NOROM_RFCRTrim+0x110>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3bd6:	e021      	b.n	3c1c <NOROM_RFCRTrim+0xec>
    3bd8:	4b14      	ldr	r3, [pc, #80]	; (3c2c <NOROM_RFCRTrim+0xfc>)
    3bda:	681b      	ldr	r3, [r3, #0]
    3bdc:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3be0:	2b0f      	cmp	r3, #15
    3be2:	d113      	bne.n	3c0c <NOROM_RFCRTrim+0xdc>
    3be4:	3905      	subs	r1, #5
    3be6:	2919      	cmp	r1, #25
    3be8:	d80a      	bhi.n	3c00 <NOROM_RFCRTrim+0xd0>
    3bea:	2301      	movs	r3, #1
    3bec:	fa03 f101 	lsl.w	r1, r3, r1
    3bf0:	4b14      	ldr	r3, [pc, #80]	; (3c44 <NOROM_RFCRTrim+0x114>)
    3bf2:	400b      	ands	r3, r1
    3bf4:	b123      	cbz	r3, 3c00 <NOROM_RFCRTrim+0xd0>
    3bf6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3bfa:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3bfe:	e003      	b.n	3c08 <NOROM_RFCRTrim+0xd8>
    3c00:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3c04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3c08:	6002      	str	r2, [r0, #0]
    3c0a:	bd70      	pop	{r4, r5, r6, pc}
    3c0c:	429c      	cmp	r4, r3
    3c0e:	d209      	bcs.n	3c24 <NOROM_RFCRTrim+0xf4>
    3c10:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3c14:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3c18:	6003      	str	r3, [r0, #0]
    3c1a:	bd70      	pop	{r4, r5, r6, pc}
    3c1c:	2b0f      	cmp	r3, #15
    3c1e:	d1f5      	bne.n	3c0c <NOROM_RFCRTrim+0xdc>
    3c20:	3905      	subs	r1, #5
    3c22:	e7e2      	b.n	3bea <NOROM_RFCRTrim+0xba>
    3c24:	bd70      	pop	{r4, r5, r6, pc}
    3c26:	bf00      	nop
    3c28:	50001100 	andpl	r1, r0, r0, lsl #2
    3c2c:	50001380 	andpl	r1, r0, r0, lsl #7
    3c30:	50001320 	andpl	r1, r0, r0, lsr #6
    3c34:	500010f8 	strdpl	r1, [r0], -r8
    3c38:	500010fc 	strdpl	r1, [r0], -ip
    3c3c:	50001104 	andpl	r1, r0, r4, lsl #2
    3c40:	50001108 	andpl	r1, r0, r8, lsl #2
    3c44:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003c48 <NOROM_RFCRfTrimSet>:
    3c48:	4603      	mov	r3, r0
    3c4a:	b530      	push	{r4, r5, lr}
    3c4c:	4c05      	ldr	r4, [pc, #20]	; (3c64 <NOROM_RFCRfTrimSet+0x1c>)
    3c4e:	f100 0510 	add.w	r5, r0, #16
    3c52:	4622      	mov	r2, r4
    3c54:	6818      	ldr	r0, [r3, #0]
    3c56:	6859      	ldr	r1, [r3, #4]
    3c58:	3308      	adds	r3, #8
    3c5a:	c203      	stmia	r2!, {r0, r1}
    3c5c:	42ab      	cmp	r3, r5
    3c5e:	4614      	mov	r4, r2
    3c60:	d1f7      	bne.n	3c52 <NOROM_RFCRfTrimSet+0xa>
    3c62:	bd30      	pop	{r4, r5, pc}
    3c64:	21000018 	tstcs	r0, r8, lsl r0

00003c68 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3c68:	4b04      	ldr	r3, [pc, #16]	; (3c7c <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3c6a:	b128      	cbz	r0, 3c78 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3c6c:	4a04      	ldr	r2, [pc, #16]	; (3c80 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3c6e:	2100      	movs	r1, #0
    3c70:	7011      	strb	r1, [r2, #0]
    3c72:	2220      	movs	r2, #32
    3c74:	701a      	strb	r2, [r3, #0]
    3c76:	4770      	bx	lr
    3c78:	7018      	strb	r0, [r3, #0]
    3c7a:	4770      	bx	lr
    3c7c:	40086202 	andmi	r6, r8, r2, lsl #4
    3c80:	40086200 	andmi	r6, r8, r0, lsl #4

00003c84 <TrimAfterColdResetWakeupFromShutDown>:
    3c84:	b538      	push	{r3, r4, r5, lr}
    3c86:	4605      	mov	r5, r0
    3c88:	4b26      	ldr	r3, [pc, #152]	; (3d24 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3c8a:	2201      	movs	r2, #1
    3c8c:	601a      	str	r2, [r3, #0]
    3c8e:	4b26      	ldr	r3, [pc, #152]	; (3d28 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	2b00      	cmp	r3, #0
    3c94:	d0fb      	beq.n	3c8e <TrimAfterColdResetWakeupFromShutDown+0xa>
    3c96:	4b25      	ldr	r3, [pc, #148]	; (3d2c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3c98:	22c0      	movs	r2, #192	; 0xc0
    3c9a:	601a      	str	r2, [r3, #0]
    3c9c:	4b24      	ldr	r3, [pc, #144]	; (3d30 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3c9e:	681b      	ldr	r3, [r3, #0]
    3ca0:	079b      	lsls	r3, r3, #30
    3ca2:	bf5f      	itttt	pl
    3ca4:	4b23      	ldrpl	r3, [pc, #140]	; (3d34 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3ca6:	4a24      	ldrpl	r2, [pc, #144]	; (3d38 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3ca8:	681b      	ldrpl	r3, [r3, #0]
    3caa:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3cae:	bf5c      	itt	pl
    3cb0:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3cb4:	7013      	strbpl	r3, [r2, #0]
    3cb6:	4b21      	ldr	r3, [pc, #132]	; (3d3c <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3cb8:	2200      	movs	r2, #0
    3cba:	601a      	str	r2, [r3, #0]
    3cbc:	4b20      	ldr	r3, [pc, #128]	; (3d40 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3cbe:	681c      	ldr	r4, [r3, #0]
    3cc0:	4620      	mov	r0, r4
    3cc2:	f000 f8d9 	bl	3e78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3cc6:	4628      	mov	r0, r5
    3cc8:	4621      	mov	r1, r4
    3cca:	f000 fa0d 	bl	40e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3cce:	f240 221d 	movw	r2, #541	; 0x21d
    3cd2:	4b1c      	ldr	r3, [pc, #112]	; (3d44 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3cd4:	681b      	ldr	r3, [r3, #0]
    3cd6:	b29b      	uxth	r3, r3
    3cd8:	4293      	cmp	r3, r2
    3cda:	d814      	bhi.n	3d06 <TrimAfterColdResetWakeupFromShutDown+0x82>
    3cdc:	4a1a      	ldr	r2, [pc, #104]	; (3d48 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3cde:	6813      	ldr	r3, [r2, #0]
    3ce0:	6812      	ldr	r2, [r2, #0]
    3ce2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3ce6:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3cea:	b103      	cbz	r3, 3cee <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3cec:	3b01      	subs	r3, #1
    3cee:	1f91      	subs	r1, r2, #6
    3cf0:	2901      	cmp	r1, #1
    3cf2:	bf86      	itte	hi
    3cf4:	3202      	addhi	r2, #2
    3cf6:	f002 020f 	andhi.w	r2, r2, #15
    3cfa:	2207      	movls	r2, #7
    3cfc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3d00:	4a12      	ldr	r2, [pc, #72]	; (3d4c <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3d02:	b2db      	uxtb	r3, r3
    3d04:	7013      	strb	r3, [r2, #0]
    3d06:	4620      	mov	r0, r4
    3d08:	f000 fabc 	bl	4284 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3d0c:	4b10      	ldr	r3, [pc, #64]	; (3d50 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3d0e:	2002      	movs	r0, #2
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	68db      	ldr	r3, [r3, #12]
    3d14:	4798      	blx	r3
    3d16:	4b05      	ldr	r3, [pc, #20]	; (3d2c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3d18:	2240      	movs	r2, #64	; 0x40
    3d1a:	601a      	str	r2, [r3, #0]
    3d1c:	4b0d      	ldr	r3, [pc, #52]	; (3d54 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3d1e:	2201      	movs	r2, #1
    3d20:	601a      	str	r2, [r3, #0]
    3d22:	bd38      	pop	{r3, r4, r5, pc}
    3d24:	40091010 	andmi	r1, r9, r0, lsl r0
    3d28:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3d2c:	400c6000 	andmi	r6, ip, r0
    3d30:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3d34:	50003fac 	andpl	r3, r0, ip, lsr #31
    3d38:	40086256 	andmi	r6, r8, r6, asr r2
    3d3c:	40091040 	andmi	r1, r9, r0, asr #32
    3d40:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3d44:	50001314 	andpl	r1, r0, r4, lsl r3
    3d48:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3d4c:	40086002 	andmi	r6, r8, r2
    3d50:	100001a0 	andne	r0, r0, r0, lsr #3
    3d54:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003d58 <NOROM_SetupTrimDevice>:
    3d58:	b510      	push	{r4, lr}
    3d5a:	4b1f      	ldr	r3, [pc, #124]	; (3dd8 <NOROM_SetupTrimDevice+0x80>)
    3d5c:	681c      	ldr	r4, [r3, #0]
    3d5e:	1c63      	adds	r3, r4, #1
    3d60:	bf08      	it	eq
    3d62:	2400      	moveq	r4, #0
    3d64:	f000 fcde 	bl	4724 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3d68:	4b1c      	ldr	r3, [pc, #112]	; (3ddc <NOROM_SetupTrimDevice+0x84>)
    3d6a:	2200      	movs	r2, #0
    3d6c:	601a      	str	r2, [r3, #0]
    3d6e:	4a1c      	ldr	r2, [pc, #112]	; (3de0 <NOROM_SetupTrimDevice+0x88>)
    3d70:	2301      	movs	r3, #1
    3d72:	6013      	str	r3, [r2, #0]
    3d74:	4a1b      	ldr	r2, [pc, #108]	; (3de4 <NOROM_SetupTrimDevice+0x8c>)
    3d76:	6013      	str	r3, [r2, #0]
    3d78:	f000 fa3e 	bl	41f8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3d7c:	4b1a      	ldr	r3, [pc, #104]	; (3de8 <NOROM_SetupTrimDevice+0x90>)
    3d7e:	681b      	ldr	r3, [r3, #0]
    3d80:	b123      	cbz	r3, 3d8c <NOROM_SetupTrimDevice+0x34>
    3d82:	4b1a      	ldr	r3, [pc, #104]	; (3dec <NOROM_SetupTrimDevice+0x94>)
    3d84:	4620      	mov	r0, r4
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	f7ff ff7c 	bl	3c84 <TrimAfterColdResetWakeupFromShutDown>
    3d8c:	4b18      	ldr	r3, [pc, #96]	; (3df0 <NOROM_SetupTrimDevice+0x98>)
    3d8e:	2200      	movs	r2, #0
    3d90:	601a      	str	r2, [r3, #0]
    3d92:	4a18      	ldr	r2, [pc, #96]	; (3df4 <NOROM_SetupTrimDevice+0x9c>)
    3d94:	6813      	ldr	r3, [r2, #0]
    3d96:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3d9a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3d9e:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3da6:	6013      	str	r3, [r2, #0]
    3da8:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3dac:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3db0:	6813      	ldr	r3, [r2, #0]
    3db2:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3db6:	2b01      	cmp	r3, #1
    3db8:	bf01      	itttt	eq
    3dba:	6813      	ldreq	r3, [r2, #0]
    3dbc:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3dc0:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3dc4:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3dc8:	bf04      	itt	eq
    3dca:	6011      	streq	r1, [r2, #0]
    3dcc:	6013      	streq	r3, [r2, #0]
    3dce:	4b0a      	ldr	r3, [pc, #40]	; (3df8 <NOROM_SetupTrimDevice+0xa0>)
    3dd0:	681b      	ldr	r3, [r3, #0]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d1fb      	bne.n	3dce <NOROM_SetupTrimDevice+0x76>
    3dd6:	bd10      	pop	{r4, pc}
    3dd8:	5000131c 	andpl	r1, r0, ip, lsl r3
    3ddc:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3de0:	400c605c 	andmi	r6, ip, ip, asr r0
    3de4:	43042208 	movwmi	r2, #16904	; 0x4208
    3de8:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3dec:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3df0:	4008218c 	andmi	r2, r8, ip, lsl #3
    3df4:	40032048 	andmi	r2, r3, r8, asr #32
    3df8:	4268000c 	rsbmi	r0, r8, #12

00003dfc <NOROM_SetupSetVddrLevel>:
    3dfc:	b530      	push	{r4, r5, lr}
    3dfe:	4b19      	ldr	r3, [pc, #100]	; (3e64 <NOROM_SetupSetVddrLevel+0x68>)
    3e00:	681a      	ldr	r2, [r3, #0]
    3e02:	4b19      	ldr	r3, [pc, #100]	; (3e68 <NOROM_SetupSetVddrLevel+0x6c>)
    3e04:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3e08:	781b      	ldrb	r3, [r3, #0]
    3e0a:	2a15      	cmp	r2, #21
    3e0c:	f003 031f 	and.w	r3, r3, #31
    3e10:	bf88      	it	hi
    3e12:	3a20      	subhi	r2, #32
    3e14:	2b15      	cmp	r3, #21
    3e16:	bf88      	it	hi
    3e18:	3b20      	subhi	r3, #32
    3e1a:	4293      	cmp	r3, r2
    3e1c:	d020      	beq.n	3e60 <NOROM_SetupSetVddrLevel+0x64>
    3e1e:	4913      	ldr	r1, [pc, #76]	; (3e6c <NOROM_SetupSetVddrLevel+0x70>)
    3e20:	2000      	movs	r0, #0
    3e22:	6008      	str	r0, [r1, #0]
    3e24:	4608      	mov	r0, r1
    3e26:	1ad1      	subs	r1, r2, r3
    3e28:	2902      	cmp	r1, #2
    3e2a:	dc05      	bgt.n	3e38 <NOROM_SetupSetVddrLevel+0x3c>
    3e2c:	f06f 0401 	mvn.w	r4, #1
    3e30:	42a1      	cmp	r1, r4
    3e32:	bfb8      	it	lt
    3e34:	4621      	movlt	r1, r4
    3e36:	e000      	b.n	3e3a <NOROM_SetupSetVddrLevel+0x3e>
    3e38:	2102      	movs	r1, #2
    3e3a:	440b      	add	r3, r1
    3e3c:	490c      	ldr	r1, [pc, #48]	; (3e70 <NOROM_SetupSetVddrLevel+0x74>)
    3e3e:	4d0d      	ldr	r5, [pc, #52]	; (3e74 <NOROM_SetupSetVddrLevel+0x78>)
    3e40:	680c      	ldr	r4, [r1, #0]
    3e42:	f003 041f 	and.w	r4, r3, #31
    3e46:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    3e4a:	802c      	strh	r4, [r5, #0]
    3e4c:	4293      	cmp	r3, r2
    3e4e:	f04f 0401 	mov.w	r4, #1
    3e52:	600c      	str	r4, [r1, #0]
    3e54:	d1e7      	bne.n	3e26 <NOROM_SetupSetVddrLevel+0x2a>
    3e56:	680b      	ldr	r3, [r1, #0]
    3e58:	600c      	str	r4, [r1, #0]
    3e5a:	680b      	ldr	r3, [r1, #0]
    3e5c:	6004      	str	r4, [r0, #0]
    3e5e:	680b      	ldr	r3, [r1, #0]
    3e60:	bd30      	pop	{r4, r5, pc}
    3e62:	bf00      	nop
    3e64:	50001388 	andpl	r1, r0, r8, lsl #7
    3e68:	40086206 	andmi	r6, r8, r6, lsl #4
    3e6c:	43200098 			; <UNDEFINED> instruction: 0x43200098
    3e70:	4009202c 	andmi	r2, r9, ip, lsr #32
    3e74:	4008626c 	andmi	r6, r8, ip, ror #4

00003e78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    3e78:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3e80:	b510      	push	{r4, lr}
    3e82:	4604      	mov	r4, r0
    3e84:	d10f      	bne.n	3ea6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    3e86:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    3e8a:	4a1e      	ldr	r2, [pc, #120]	; (3f04 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3e8c:	2380      	movs	r3, #128	; 0x80
    3e8e:	7013      	strb	r3, [r2, #0]
    3e90:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3e94:	f802 3c10 	strb.w	r3, [r2, #-16]
    3e98:	f7ff ffb0 	bl	3dfc <NOROM_SetupSetVddrLevel>
    3e9c:	4b1a      	ldr	r3, [pc, #104]	; (3f08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3e9e:	681b      	ldr	r3, [r3, #0]
    3ea0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3ea4:	e003      	b.n	3eae <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    3ea6:	4b19      	ldr	r3, [pc, #100]	; (3f0c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3eae:	2b15      	cmp	r3, #21
    3eb0:	bf88      	it	hi
    3eb2:	3b20      	subhi	r3, #32
    3eb4:	eb03 7324 	add.w	r3, r3, r4, asr #28
    3eb8:	3301      	adds	r3, #1
    3eba:	2b15      	cmp	r3, #21
    3ebc:	dc05      	bgt.n	3eca <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    3ebe:	f06f 0209 	mvn.w	r2, #9
    3ec2:	4293      	cmp	r3, r2
    3ec4:	bfb8      	it	lt
    3ec6:	4613      	movlt	r3, r2
    3ec8:	e000      	b.n	3ecc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    3eca:	2315      	movs	r3, #21
    3ecc:	4a10      	ldr	r2, [pc, #64]	; (3f10 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    3ece:	f003 031f 	and.w	r3, r3, #31
    3ed2:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    3ed6:	8013      	strh	r3, [r2, #0]
    3ed8:	4b0e      	ldr	r3, [pc, #56]	; (3f14 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    3eda:	681b      	ldr	r3, [r3, #0]
    3edc:	f013 0302 	ands.w	r3, r3, #2
    3ee0:	bf0a      	itet	eq
    3ee2:	4a0d      	ldreq	r2, [pc, #52]	; (3f18 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3ee4:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    3ee8:	6013      	streq	r3, [r2, #0]
    3eea:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    3eee:	4a0b      	ldr	r2, [pc, #44]	; (3f1c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    3ef0:	f083 0301 	eor.w	r3, r3, #1
    3ef4:	6013      	str	r3, [r2, #0]
    3ef6:	f3c4 6480 	ubfx	r4, r4, #26, #1
    3efa:	4b09      	ldr	r3, [pc, #36]	; (3f20 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    3efc:	f084 0401 	eor.w	r4, r4, #1
    3f00:	601c      	str	r4, [r3, #0]
    3f02:	bd10      	pop	{r4, pc}
    3f04:	40086225 	andmi	r6, r8, r5, lsr #4
    3f08:	50001388 	andpl	r1, r0, r8, lsl #7
    3f0c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3f10:	4008626e 	andmi	r6, r8, lr, ror #4
    3f14:	40090000 	andmi	r0, r9, r0
    3f18:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    3f1c:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    3f20:	43200008 			; <UNDEFINED> instruction: 0x43200008

00003f24 <NOROM_SetupGetTrimForAnabypassValue1>:
    3f24:	4b15      	ldr	r3, [pc, #84]	; (3f7c <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    3f26:	0381      	lsls	r1, r0, #14
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	f3c3 6283 	ubfx	r2, r3, #26, #4
    3f2e:	f3c3 238f 	ubfx	r3, r3, #10, #16
    3f32:	d41f      	bmi.n	3f74 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    3f34:	f340 2007 	sbfx	r0, r0, #8, #8
    3f38:	2800      	cmp	r0, #0
    3f3a:	da19      	bge.n	3f70 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    3f3c:	085b      	lsrs	r3, r3, #1
    3f3e:	d105      	bne.n	3f4c <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    3f40:	0852      	lsrs	r2, r2, #1
    3f42:	bf06      	itte	eq
    3f44:	2301      	moveq	r3, #1
    3f46:	461a      	moveq	r2, r3
    3f48:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    3f4c:	3001      	adds	r0, #1
    3f4e:	e7f3      	b.n	3f38 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    3f50:	005b      	lsls	r3, r3, #1
    3f52:	f043 0301 	orr.w	r3, r3, #1
    3f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3f5a:	d308      	bcc.n	3f6e <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    3f5c:	0052      	lsls	r2, r2, #1
    3f5e:	f042 0201 	orr.w	r2, r2, #1
    3f62:	2a0f      	cmp	r2, #15
    3f64:	bf86      	itte	hi
    3f66:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    3f6a:	220f      	movhi	r2, #15
    3f6c:	2301      	movls	r3, #1
    3f6e:	3801      	subs	r0, #1
    3f70:	2800      	cmp	r0, #0
    3f72:	d1ed      	bne.n	3f50 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    3f74:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    3f78:	4770      	bx	lr
    3f7a:	bf00      	nop
    3f7c:	50001350 	andpl	r1, r0, r0, asr r3

00003f80 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    3f80:	4a04      	ldr	r2, [pc, #16]	; (3f94 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    3f82:	6813      	ldr	r3, [r2, #0]
    3f84:	6810      	ldr	r0, [r2, #0]
    3f86:	f3c3 0387 	ubfx	r3, r3, #2, #8
    3f8a:	f000 0003 	and.w	r0, r0, #3
    3f8e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3f92:	4770      	bx	lr
    3f94:	50001350 	andpl	r1, r0, r0, asr r3

00003f98 <NOROM_SetupGetTrimForAmpcompTh2>:
    3f98:	4b02      	ldr	r3, [pc, #8]	; (3fa4 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    3f9a:	6818      	ldr	r0, [r3, #0]
    3f9c:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    3fa0:	4770      	bx	lr
    3fa2:	bf00      	nop
    3fa4:	50001374 	andpl	r1, r0, r4, ror r3

00003fa8 <NOROM_SetupGetTrimForAmpcompTh1>:
    3fa8:	4b03      	ldr	r3, [pc, #12]	; (3fb8 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    3faa:	6818      	ldr	r0, [r3, #0]
    3fac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3fb0:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop
    3fb8:	50001370 	andpl	r1, r0, r0, ror r3

00003fbc <NOROM_SetupGetTrimForAmpcompCtrl>:
    3fbc:	b570      	push	{r4, r5, r6, lr}
    3fbe:	4b15      	ldr	r3, [pc, #84]	; (4014 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    3fc0:	4915      	ldr	r1, [pc, #84]	; (4018 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    3fc2:	681c      	ldr	r4, [r3, #0]
    3fc4:	6809      	ldr	r1, [r1, #0]
    3fc6:	f3c4 5203 	ubfx	r2, r4, #20, #4
    3fca:	f011 0501 	ands.w	r5, r1, #1
    3fce:	f3c4 4303 	ubfx	r3, r4, #16, #4
    3fd2:	d113      	bne.n	3ffc <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3fd4:	4911      	ldr	r1, [pc, #68]	; (401c <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    3fd6:	6809      	ldr	r1, [r1, #0]
    3fd8:	f341 2603 	sbfx	r6, r1, #8, #4
    3fdc:	18b2      	adds	r2, r6, r2
    3fde:	d403      	bmi.n	3fe8 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    3fe0:	2a0f      	cmp	r2, #15
    3fe2:	bfa8      	it	ge
    3fe4:	220f      	movge	r2, #15
    3fe6:	e000      	b.n	3fea <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    3fe8:	462a      	mov	r2, r5
    3fea:	f341 3103 	sbfx	r1, r1, #12, #4
    3fee:	18cb      	adds	r3, r1, r3
    3ff0:	d403      	bmi.n	3ffa <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    3ff2:	2b0f      	cmp	r3, #15
    3ff4:	bfa8      	it	ge
    3ff6:	230f      	movge	r3, #15
    3ff8:	e000      	b.n	3ffc <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3ffa:	2300      	movs	r3, #0
    3ffc:	b2a1      	uxth	r1, r4
    3ffe:	2821      	cmp	r0, #33	; 0x21
    4000:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    4004:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    4008:	bf84      	itt	hi
    400a:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    400e:	4323      	orrhi	r3, r4
    4010:	4618      	mov	r0, r3
    4012:	bd70      	pop	{r4, r5, r6, pc}
    4014:	50001378 	andpl	r1, r0, r8, ror r3
    4018:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    401c:	50003fac 	andpl	r3, r0, ip, lsr #31

00004020 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    4020:	281f      	cmp	r0, #31
    4022:	bf83      	ittte	hi
    4024:	4b02      	ldrhi	r3, [pc, #8]	; (4030 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    4026:	6818      	ldrhi	r0, [r3, #0]
    4028:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    402c:	2000      	movls	r0, #0
    402e:	4770      	bx	lr
    4030:	50001398 	mulpl	r0, r8, r3

00004034 <NOROM_SetupGetTrimForAdcShModeEn>:
    4034:	2821      	cmp	r0, #33	; 0x21
    4036:	bf83      	ittte	hi
    4038:	4b02      	ldrhi	r3, [pc, #8]	; (4044 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    403a:	6818      	ldrhi	r0, [r3, #0]
    403c:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    4040:	2001      	movls	r0, #1
    4042:	4770      	bx	lr
    4044:	5000138c 	andpl	r1, r0, ip, lsl #7

00004048 <NOROM_SetupGetTrimForAdcShVbufEn>:
    4048:	2821      	cmp	r0, #33	; 0x21
    404a:	bf83      	ittte	hi
    404c:	4b02      	ldrhi	r3, [pc, #8]	; (4058 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    404e:	6818      	ldrhi	r0, [r3, #0]
    4050:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    4054:	2001      	movls	r0, #1
    4056:	4770      	bx	lr
    4058:	5000138c 	andpl	r1, r0, ip, lsl #7

0000405c <NOROM_SetupGetTrimForXoscHfCtl>:
    405c:	281f      	cmp	r0, #31
    405e:	bf81      	itttt	hi
    4060:	4b07      	ldrhi	r3, [pc, #28]	; (4080 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    4062:	681b      	ldrhi	r3, [r3, #0]
    4064:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    4068:	0080      	lslhi	r0, r0, #2
    406a:	bf81      	itttt	hi
    406c:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    4070:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    4074:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    4078:	4318      	orrhi	r0, r3
    407a:	bf98      	it	ls
    407c:	2000      	movls	r0, #0
    407e:	4770      	bx	lr
    4080:	50001398 	mulpl	r0, r8, r3

00004084 <NOROM_SetupGetTrimForXoscHfFastStart>:
    4084:	4b02      	ldr	r3, [pc, #8]	; (4090 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    4086:	6818      	ldr	r0, [r3, #0]
    4088:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    408c:	4770      	bx	lr
    408e:	bf00      	nop
    4090:	5000138c 	andpl	r1, r0, ip, lsl #7

00004094 <NOROM_SetupGetTrimForRadcExtCfg>:
    4094:	281f      	cmp	r0, #31
    4096:	bf81      	itttt	hi
    4098:	4b07      	ldrhi	r3, [pc, #28]	; (40b8 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    409a:	681b      	ldrhi	r3, [r3, #0]
    409c:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    40a0:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    40a4:	bf81      	itttt	hi
    40a6:	0400      	lslhi	r0, r0, #16
    40a8:	031b      	lslhi	r3, r3, #12
    40aa:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    40ae:	b29b      	uxthhi	r3, r3
    40b0:	bf8c      	ite	hi
    40b2:	4318      	orrhi	r0, r3
    40b4:	4801      	ldrls	r0, [pc, #4]	; (40bc <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    40b6:	4770      	bx	lr
    40b8:	50001398 	mulpl	r0, r8, r3
    40bc:	403f8000 	eorsmi	r8, pc, r0

000040c0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    40c0:	2821      	cmp	r0, #33	; 0x21
    40c2:	bf83      	ittte	hi
    40c4:	4b02      	ldrhi	r3, [pc, #8]	; (40d0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    40c6:	6818      	ldrhi	r0, [r3, #0]
    40c8:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    40cc:	2000      	movls	r0, #0
    40ce:	4770      	bx	lr
    40d0:	5000138c 	andpl	r1, r0, ip, lsl #7

000040d4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    40d4:	2821      	cmp	r0, #33	; 0x21
    40d6:	bf83      	ittte	hi
    40d8:	4b02      	ldrhi	r3, [pc, #8]	; (40e4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    40da:	6818      	ldrhi	r0, [r3, #0]
    40dc:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    40e0:	2000      	movls	r0, #0
    40e2:	4770      	bx	lr
    40e4:	5000138c 	andpl	r1, r0, ip, lsl #7

000040e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    40e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    40ea:	4605      	mov	r5, r0
    40ec:	4608      	mov	r0, r1
    40ee:	f7ff ff19 	bl	3f24 <NOROM_SetupGetTrimForAnabypassValue1>
    40f2:	4c39      	ldr	r4, [pc, #228]	; (41d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    40f4:	4602      	mov	r2, r0
    40f6:	2118      	movs	r1, #24
    40f8:	4620      	mov	r0, r4
    40fa:	f000 fb33 	bl	4764 <NOROM_DDI32RegWrite>
    40fe:	f7ff ff3f 	bl	3f80 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    4102:	4b36      	ldr	r3, [pc, #216]	; (41dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    4104:	b280      	uxth	r0, r0
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	9000      	str	r0, [sp, #0]
    410a:	685e      	ldr	r6, [r3, #4]
    410c:	4620      	mov	r0, r4
    410e:	212c      	movs	r1, #44	; 0x2c
    4110:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4114:	2300      	movs	r3, #0
    4116:	47b0      	blx	r6
    4118:	4b31      	ldr	r3, [pc, #196]	; (41e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    411a:	4620      	mov	r0, r4
    411c:	681a      	ldr	r2, [r3, #0]
    411e:	211c      	movs	r1, #28
    4120:	f3c2 020d 	ubfx	r2, r2, #0, #14
    4124:	f000 fb1e 	bl	4764 <NOROM_DDI32RegWrite>
    4128:	f7ff ff36 	bl	3f98 <NOROM_SetupGetTrimForAmpcompTh2>
    412c:	2114      	movs	r1, #20
    412e:	4602      	mov	r2, r0
    4130:	4620      	mov	r0, r4
    4132:	f000 fb17 	bl	4764 <NOROM_DDI32RegWrite>
    4136:	f7ff ff37 	bl	3fa8 <NOROM_SetupGetTrimForAmpcompTh1>
    413a:	2110      	movs	r1, #16
    413c:	4602      	mov	r2, r0
    413e:	4620      	mov	r0, r4
    4140:	f000 fb10 	bl	4764 <NOROM_DDI32RegWrite>
    4144:	4628      	mov	r0, r5
    4146:	f7ff ff39 	bl	3fbc <NOROM_SetupGetTrimForAmpcompCtrl>
    414a:	210c      	movs	r1, #12
    414c:	4602      	mov	r2, r0
    414e:	4620      	mov	r0, r4
    4150:	f000 fb08 	bl	4764 <NOROM_DDI32RegWrite>
    4154:	4628      	mov	r0, r5
    4156:	f7ff ff6d 	bl	4034 <NOROM_SetupGetTrimForAdcShModeEn>
    415a:	0040      	lsls	r0, r0, #1
    415c:	4e21      	ldr	r6, [pc, #132]	; (41e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    415e:	f040 0020 	orr.w	r0, r0, #32
    4162:	b2c0      	uxtb	r0, r0
    4164:	7030      	strb	r0, [r6, #0]
    4166:	4628      	mov	r0, r5
    4168:	f7ff ff6e 	bl	4048 <NOROM_SetupGetTrimForAdcShVbufEn>
    416c:	f040 0010 	orr.w	r0, r0, #16
    4170:	b2c0      	uxtb	r0, r0
    4172:	7030      	strb	r0, [r6, #0]
    4174:	4628      	mov	r0, r5
    4176:	f7ff ff71 	bl	405c <NOROM_SetupGetTrimForXoscHfCtl>
    417a:	2128      	movs	r1, #40	; 0x28
    417c:	4602      	mov	r2, r0
    417e:	4620      	mov	r0, r4
    4180:	f000 faf0 	bl	4764 <NOROM_DDI32RegWrite>
    4184:	4628      	mov	r0, r5
    4186:	f7ff ff4b 	bl	4020 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    418a:	0040      	lsls	r0, r0, #1
    418c:	4b16      	ldr	r3, [pc, #88]	; (41e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    418e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    4192:	b2c0      	uxtb	r0, r0
    4194:	7018      	strb	r0, [r3, #0]
    4196:	4628      	mov	r0, r5
    4198:	f7ff ff92 	bl	40c0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    419c:	00c0      	lsls	r0, r0, #3
    419e:	4b13      	ldr	r3, [pc, #76]	; (41ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    41a0:	f060 007f 	orn	r0, r0, #127	; 0x7f
    41a4:	b2c0      	uxtb	r0, r0
    41a6:	7018      	strb	r0, [r3, #0]
    41a8:	4628      	mov	r0, r5
    41aa:	f7ff ff93 	bl	40d4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    41ae:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    41b2:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    41b6:	4b0e      	ldr	r3, [pc, #56]	; (41f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    41b8:	b280      	uxth	r0, r0
    41ba:	8018      	strh	r0, [r3, #0]
    41bc:	4628      	mov	r0, r5
    41be:	f7ff ff69 	bl	4094 <NOROM_SetupGetTrimForRadcExtCfg>
    41c2:	2108      	movs	r1, #8
    41c4:	4602      	mov	r2, r0
    41c6:	4620      	mov	r0, r4
    41c8:	f000 facc 	bl	4764 <NOROM_DDI32RegWrite>
    41cc:	4b09      	ldr	r3, [pc, #36]	; (41f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    41ce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    41d2:	601a      	str	r2, [r3, #0]
    41d4:	b002      	add	sp, #8
    41d6:	bd70      	pop	{r4, r5, r6, pc}
    41d8:	400ca000 	andmi	sl, ip, r0
    41dc:	100001a4 	andne	r0, r0, r4, lsr #3
    41e0:	5000137c 	andpl	r1, r0, ip, ror r3
    41e4:	400ca149 	andmi	sl, ip, r9, asr #2
    41e8:	400ca14c 	andmi	sl, ip, ip, asr #2
    41ec:	400ca141 	andmi	sl, ip, r1, asr #2
    41f0:	400ca1dc 	ldrdmi	sl, [ip], -ip
    41f4:	400ca040 	andmi	sl, ip, r0, asr #32

000041f8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    41f8:	b530      	push	{r4, r5, lr}
    41fa:	4b14      	ldr	r3, [pc, #80]	; (424c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    41fc:	681b      	ldr	r3, [r3, #0]
    41fe:	2b00      	cmp	r3, #0
    4200:	d1fb      	bne.n	41fa <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    4202:	4a13      	ldr	r2, [pc, #76]	; (4250 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    4204:	4913      	ldr	r1, [pc, #76]	; (4254 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    4206:	6813      	ldr	r3, [r2, #0]
    4208:	6809      	ldr	r1, [r1, #0]
    420a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    420e:	f023 0307 	bic.w	r3, r3, #7
    4212:	f011 0f04 	tst.w	r1, #4
    4216:	4614      	mov	r4, r2
    4218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    421c:	d003      	beq.n	4226 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    421e:	f043 0305 	orr.w	r3, r3, #5
    4222:	6013      	str	r3, [r2, #0]
    4224:	bd30      	pop	{r4, r5, pc}
    4226:	490c      	ldr	r1, [pc, #48]	; (4258 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    4228:	f043 0004 	orr.w	r0, r3, #4
    422c:	680d      	ldr	r5, [r1, #0]
    422e:	07ad      	lsls	r5, r5, #30
    4230:	d009      	beq.n	4246 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    4232:	f043 0307 	orr.w	r3, r3, #7
    4236:	6013      	str	r3, [r2, #0]
    4238:	680b      	ldr	r3, [r1, #0]
    423a:	f003 0303 	and.w	r3, r3, #3
    423e:	2b03      	cmp	r3, #3
    4240:	d1fa      	bne.n	4238 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    4242:	6020      	str	r0, [r4, #0]
    4244:	bd30      	pop	{r4, r5, pc}
    4246:	6010      	str	r0, [r2, #0]
    4248:	bd30      	pop	{r4, r5, pc}
    424a:	bf00      	nop
    424c:	4268000c 	rsbmi	r0, r8, #12
    4250:	40034004 	andmi	r4, r3, r4
    4254:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4258:	40034000 	andmi	r4, r3, r0

0000425c <NOROM_SetupSetAonRtcSubSecInc>:
    425c:	4b07      	ldr	r3, [pc, #28]	; (427c <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    425e:	b282      	uxth	r2, r0
    4260:	f3c0 4007 	ubfx	r0, r0, #16, #8
    4264:	601a      	str	r2, [r3, #0]
    4266:	6058      	str	r0, [r3, #4]
    4268:	2201      	movs	r2, #1
    426a:	3308      	adds	r3, #8
    426c:	601a      	str	r2, [r3, #0]
    426e:	4a04      	ldr	r2, [pc, #16]	; (4280 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    4270:	6812      	ldr	r2, [r2, #0]
    4272:	2a00      	cmp	r2, #0
    4274:	d0fb      	beq.n	426e <NOROM_SetupSetAonRtcSubSecInc+0x12>
    4276:	2200      	movs	r2, #0
    4278:	601a      	str	r2, [r3, #0]
    427a:	4770      	bx	lr
    427c:	400c603c 	andmi	r6, ip, ip, lsr r0
    4280:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00004284 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    4284:	f3c0 4381 	ubfx	r3, r0, #18, #2
    4288:	2b01      	cmp	r3, #1
    428a:	b510      	push	{r4, lr}
    428c:	4604      	mov	r4, r0
    428e:	d002      	beq.n	4296 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    4290:	2b02      	cmp	r3, #2
    4292:	d02f      	beq.n	42f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    4294:	e02a      	b.n	42ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    4296:	4b42      	ldr	r3, [pc, #264]	; (43a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    4298:	681b      	ldr	r3, [r3, #0]
    429a:	039a      	lsls	r2, r3, #14
    429c:	d426      	bmi.n	42ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    429e:	4a41      	ldr	r2, [pc, #260]	; (43a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    42a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    42a4:	6011      	str	r1, [r2, #0]
    42a6:	4940      	ldr	r1, [pc, #256]	; (43a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    42a8:	f3c3 3003 	ubfx	r0, r3, #12, #4
    42ac:	680a      	ldr	r2, [r1, #0]
    42ae:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    42b2:	4302      	orrs	r2, r0
    42b4:	f3c3 4000 	ubfx	r0, r3, #16, #1
    42b8:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    42bc:	600a      	str	r2, [r1, #0]
    42be:	f851 2c01 	ldr.w	r2, [r1, #-1]
    42c2:	f3c3 2003 	ubfx	r0, r3, #8, #4
    42c6:	f022 020f 	bic.w	r2, r2, #15
    42ca:	4302      	orrs	r2, r0
    42cc:	f851 0c01 	ldr.w	r0, [r1, #-1]
    42d0:	f841 2c01 	str.w	r2, [r1, #-1]
    42d4:	f851 2c02 	ldr.w	r2, [r1, #-2]
    42d8:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    42dc:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    42e0:	4313      	orrs	r3, r2
    42e2:	f851 2c02 	ldr.w	r2, [r1, #-2]
    42e6:	f841 3c02 	str.w	r3, [r1, #-2]
    42ea:	e003      	b.n	42f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    42ec:	4b2d      	ldr	r3, [pc, #180]	; (43a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    42ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    42f2:	601a      	str	r2, [r3, #0]
    42f4:	4b2d      	ldr	r3, [pc, #180]	; (43ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	071b      	lsls	r3, r3, #28
    42fa:	bf5e      	ittt	pl
    42fc:	4b2c      	ldrpl	r3, [pc, #176]	; (43b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    42fe:	2240      	movpl	r2, #64	; 0x40
    4300:	601a      	strpl	r2, [r3, #0]
    4302:	4b2c      	ldr	r3, [pc, #176]	; (43b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    4304:	f44f 7200 	mov.w	r2, #512	; 0x200
    4308:	601a      	str	r2, [r3, #0]
    430a:	f7ff febb 	bl	4084 <NOROM_SetupGetTrimForXoscHfFastStart>
    430e:	4b2a      	ldr	r3, [pc, #168]	; (43b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    4310:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    4314:	b2c0      	uxtb	r0, r0
    4316:	7018      	strb	r0, [r3, #0]
    4318:	f3c4 5081 	ubfx	r0, r4, #22, #2
    431c:	2801      	cmp	r0, #1
    431e:	d00b      	beq.n	4338 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    4320:	d302      	bcc.n	4328 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    4322:	2802      	cmp	r0, #2
    4324:	d026      	beq.n	4374 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    4326:	e028      	b.n	437a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    4328:	2004      	movs	r0, #4
    432a:	2101      	movs	r1, #1
    432c:	f7ff fa84 	bl	3838 <NOROM_OSCClockSourceSet>
    4330:	4822      	ldr	r0, [pc, #136]	; (43bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    4332:	f7ff ff93 	bl	425c <NOROM_SetupSetAonRtcSubSecInc>
    4336:	e024      	b.n	4382 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    4338:	f7ff faac 	bl	3894 <NOROM_OSCClockSourceGet>
    433c:	4604      	mov	r4, r0
    433e:	2004      	movs	r0, #4
    4340:	4621      	mov	r1, r4
    4342:	f7ff fa79 	bl	3838 <NOROM_OSCClockSourceSet>
    4346:	2004      	movs	r0, #4
    4348:	f7ff faa4 	bl	3894 <NOROM_OSCClockSourceGet>
    434c:	42a0      	cmp	r0, r4
    434e:	d1fa      	bne.n	4346 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    4350:	4b1b      	ldr	r3, [pc, #108]	; (43c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    4352:	681c      	ldr	r4, [r3, #0]
    4354:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4358:	f7ff ff80 	bl	425c <NOROM_SetupSetAonRtcSubSecInc>
    435c:	4b19      	ldr	r3, [pc, #100]	; (43c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    435e:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	0e20      	lsrs	r0, r4, #24
    4366:	681b      	ldr	r3, [r3, #0]
    4368:	2107      	movs	r1, #7
    436a:	4798      	blx	r3
    436c:	4b0d      	ldr	r3, [pc, #52]	; (43a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    436e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4372:	601a      	str	r2, [r3, #0]
    4374:	2004      	movs	r0, #4
    4376:	2103      	movs	r1, #3
    4378:	e001      	b.n	437e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    437a:	2004      	movs	r0, #4
    437c:	2102      	movs	r1, #2
    437e:	f7ff fa5b 	bl	3838 <NOROM_OSCClockSourceSet>
    4382:	4b11      	ldr	r3, [pc, #68]	; (43c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    4384:	4a11      	ldr	r2, [pc, #68]	; (43cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    4386:	681b      	ldr	r3, [r3, #0]
    4388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    438c:	7013      	strb	r3, [r2, #0]
    438e:	f647 0218 	movw	r2, #30744	; 0x7818
    4392:	4b0f      	ldr	r3, [pc, #60]	; (43d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    4394:	801a      	strh	r2, [r3, #0]
    4396:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    439a:	3b44      	subs	r3, #68	; 0x44
    439c:	681b      	ldr	r3, [r3, #0]
    439e:	bd10      	pop	{r4, pc}
    43a0:	5000138c 	andpl	r1, r0, ip, lsl #7
    43a4:	400ca040 	andmi	sl, ip, r0, asr #32
    43a8:	4008600c 	andmi	r6, r8, ip
    43ac:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    43b0:	400ca068 	andmi	sl, ip, r8, rrx
    43b4:	400ca080 	andmi	sl, ip, r0, lsl #1
    43b8:	400ca108 	andmi	sl, ip, r8, lsl #2
    43bc:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    43c0:	50003fa8 	andpl	r3, r0, r8, lsr #31
    43c4:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    43c8:	5000136c 	andpl	r1, r0, ip, ror #6
    43cc:	400cb00b 	andmi	fp, ip, fp
    43d0:	400cb070 	andmi	fp, ip, r0, ror r0

000043d4 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    43d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43d8:	4b77      	ldr	r3, [pc, #476]	; (45b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    43da:	4607      	mov	r7, r0
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	4e77      	ldr	r6, [pc, #476]	; (45bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    43e0:	f013 0f02 	tst.w	r3, #2
    43e4:	d004      	beq.n	43f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    43e6:	2308      	movs	r3, #8
    43e8:	71b3      	strb	r3, [r6, #6]
    43ea:	4a75      	ldr	r2, [pc, #468]	; (45c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    43ec:	4b75      	ldr	r3, [pc, #468]	; (45c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    43ee:	e0df      	b.n	45b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    43f0:	f7ff f9e6 	bl	37c0 <NOROM_AONBatMonTemperatureGetDegC>
    43f4:	4b74      	ldr	r3, [pc, #464]	; (45c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    43f6:	681d      	ldr	r5, [r3, #0]
    43f8:	172a      	asrs	r2, r5, #28
    43fa:	02ac      	lsls	r4, r5, #10
    43fc:	f102 0101 	add.w	r1, r2, #1
    4400:	d408      	bmi.n	4414 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    4402:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    4406:	10db      	asrs	r3, r3, #3
    4408:	2b08      	cmp	r3, #8
    440a:	bfa8      	it	ge
    440c:	2308      	movge	r3, #8
    440e:	4299      	cmp	r1, r3
    4410:	bfb8      	it	lt
    4412:	4619      	movlt	r1, r3
    4414:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    4418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    441c:	d10a      	bne.n	4434 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    441e:	4b6b      	ldr	r3, [pc, #428]	; (45cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    4420:	681a      	ldr	r2, [r3, #0]
    4422:	681b      	ldr	r3, [r3, #0]
    4424:	f3c2 2204 	ubfx	r2, r2, #8, #5
    4428:	2a15      	cmp	r2, #21
    442a:	bf88      	it	hi
    442c:	3a20      	subhi	r2, #32
    442e:	f3c3 6304 	ubfx	r3, r3, #24, #5
    4432:	e00a      	b.n	444a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    4434:	4b66      	ldr	r3, [pc, #408]	; (45d0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    4436:	681a      	ldr	r2, [r3, #0]
    4438:	4b66      	ldr	r3, [pc, #408]	; (45d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    443a:	f3c2 6204 	ubfx	r2, r2, #24, #5
    443e:	681b      	ldr	r3, [r3, #0]
    4440:	2a15      	cmp	r2, #21
    4442:	bf88      	it	hi
    4444:	3a20      	subhi	r2, #32
    4446:	f3c3 4304 	ubfx	r3, r3, #16, #5
    444a:	2b15      	cmp	r3, #21
    444c:	440a      	add	r2, r1
    444e:	bf88      	it	hi
    4450:	3b20      	subhi	r3, #32
    4452:	2a15      	cmp	r2, #21
    4454:	dc05      	bgt.n	4462 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    4456:	f06f 0109 	mvn.w	r1, #9
    445a:	428a      	cmp	r2, r1
    445c:	bfb8      	it	lt
    445e:	460a      	movlt	r2, r1
    4460:	e000      	b.n	4464 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    4462:	2215      	movs	r2, #21
    4464:	4c5c      	ldr	r4, [pc, #368]	; (45d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    4466:	f002 011f 	and.w	r1, r2, #31
    446a:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    446e:	8021      	strh	r1, [r4, #0]
    4470:	495a      	ldr	r1, [pc, #360]	; (45dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    4472:	6809      	ldr	r1, [r1, #0]
    4474:	f011 0403 	ands.w	r4, r1, #3
    4478:	bf18      	it	ne
    447a:	2401      	movne	r4, #1
    447c:	0749      	lsls	r1, r1, #29
    447e:	bf48      	it	mi
    4480:	f044 0402 	orrmi.w	r4, r4, #2
    4484:	b10f      	cbz	r7, 448a <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    4486:	f044 0404 	orr.w	r4, r4, #4
    448a:	f996 1007 	ldrsb.w	r1, [r6, #7]
    448e:	1a41      	subs	r1, r0, r1
    4490:	2904      	cmp	r1, #4
    4492:	dc03      	bgt.n	449c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    4494:	4949      	ldr	r1, [pc, #292]	; (45bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4496:	7989      	ldrb	r1, [r1, #6]
    4498:	428c      	cmp	r4, r1
    449a:	d06f      	beq.n	457c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    449c:	f1b0 010f 	subs.w	r1, r0, #15
    44a0:	9101      	str	r1, [sp, #4]
    44a2:	f004 0101 	and.w	r1, r4, #1
    44a6:	f8df a144 	ldr.w	sl, [pc, #324]	; 45ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    44aa:	f004 0904 	and.w	r9, r4, #4
    44ae:	f004 0802 	and.w	r8, r4, #2
    44b2:	460f      	mov	r7, r1
    44b4:	d42a      	bmi.n	450c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    44b6:	9901      	ldr	r1, [sp, #4]
    44b8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    44bc:	ea4f 2e21 	mov.w	lr, r1, asr #8
    44c0:	f1be 0f07 	cmp.w	lr, #7
    44c4:	9101      	str	r1, [sp, #4]
    44c6:	d801      	bhi.n	44cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    44c8:	d104      	bne.n	44d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    44ca:	e001      	b.n	44d0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    44cc:	f04f 0e07 	mov.w	lr, #7
    44d0:	2106      	movs	r1, #6
    44d2:	e000      	b.n	44d6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    44d4:	4671      	mov	r1, lr
    44d6:	f8df b118 	ldr.w	fp, [pc, #280]	; 45f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    44da:	3101      	adds	r1, #1
    44dc:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    44e0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    44e4:	ebc1 0c0c 	rsb	ip, r1, ip
    44e8:	fa5f f18c 	uxtb.w	r1, ip
    44ec:	f1b9 0f00 	cmp.w	r9, #0
    44f0:	d002      	beq.n	44f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    44f2:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    44f6:	4459      	add	r1, fp
    44f8:	f1b8 0f00 	cmp.w	r8, #0
    44fc:	d002      	beq.n	4504 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    44fe:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    4502:	4459      	add	r1, fp
    4504:	b12f      	cbz	r7, 4512 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4506:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    450a:	e002      	b.n	4512 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    450c:	f04f 0e00 	mov.w	lr, #0
    4510:	4671      	mov	r1, lr
    4512:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    4516:	fa5f fc8a 	uxtb.w	ip, sl
    451a:	f1b9 0f00 	cmp.w	r9, #0
    451e:	d002      	beq.n	4526 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    4520:	f3ca 2907 	ubfx	r9, sl, #8, #8
    4524:	44cc      	add	ip, r9
    4526:	f1b8 0f00 	cmp.w	r8, #0
    452a:	d002      	beq.n	4532 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    452c:	f3ca 4807 	ubfx	r8, sl, #16, #8
    4530:	44c4      	add	ip, r8
    4532:	b10f      	cbz	r7, 4538 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    4534:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    4538:	1a9b      	subs	r3, r3, r2
    453a:	2b01      	cmp	r3, #1
    453c:	bfb8      	it	lt
    453e:	2301      	movlt	r3, #1
    4540:	9f01      	ldr	r7, [sp, #4]
    4542:	2234      	movs	r2, #52	; 0x34
    4544:	4353      	muls	r3, r2
    4546:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    454a:	4379      	muls	r1, r7
    454c:	b2ed      	uxtb	r5, r5
    454e:	436b      	muls	r3, r5
    4550:	3180      	adds	r1, #128	; 0x80
    4552:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    4556:	fbb3 f1f1 	udiv	r1, r3, r1
    455a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    455e:	4561      	cmp	r1, ip
    4560:	bf28      	it	cs
    4562:	4661      	movcs	r1, ip
    4564:	287f      	cmp	r0, #127	; 0x7f
    4566:	80b1      	strh	r1, [r6, #4]
    4568:	dc05      	bgt.n	4576 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    456a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    456e:	4298      	cmp	r0, r3
    4570:	bfb8      	it	lt
    4572:	4618      	movlt	r0, r3
    4574:	e000      	b.n	4578 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    4576:	207f      	movs	r0, #127	; 0x7f
    4578:	71f0      	strb	r0, [r6, #7]
    457a:	71b4      	strb	r4, [r6, #6]
    457c:	4b18      	ldr	r3, [pc, #96]	; (45e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    457e:	2100      	movs	r1, #0
    4580:	681b      	ldr	r3, [r3, #0]
    4582:	6033      	str	r3, [r6, #0]
    4584:	88b3      	ldrh	r3, [r6, #4]
    4586:	2b1e      	cmp	r3, #30
    4588:	bf9e      	ittt	ls
    458a:	4a0c      	ldrls	r2, [pc, #48]	; (45bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    458c:	231f      	movls	r3, #31
    458e:	8093      	strhls	r3, [r2, #4]
    4590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4594:	d302      	bcc.n	459c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    4596:	085b      	lsrs	r3, r3, #1
    4598:	3101      	adds	r1, #1
    459a:	e7f9      	b.n	4590 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    459c:	4a11      	ldr	r2, [pc, #68]	; (45e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    459e:	3b0f      	subs	r3, #15
    45a0:	430a      	orrs	r2, r1
    45a2:	091b      	lsrs	r3, r3, #4
    45a4:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    45a8:	4a06      	ldr	r2, [pc, #24]	; (45c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    45aa:	6013      	str	r3, [r2, #0]
    45ac:	4b0e      	ldr	r3, [pc, #56]	; (45e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    45ae:	2200      	movs	r2, #0
    45b0:	601a      	str	r2, [r3, #0]
    45b2:	b003      	add	sp, #12
    45b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45b8:	40090000 	andmi	r0, r9, r0
    45bc:	20000654 	andcs	r0, r0, r4, asr r6
    45c0:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    45c4:	40091030 	andmi	r1, r9, r0, lsr r0
    45c8:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    45cc:	50001388 	andpl	r1, r0, r8, lsl #7
    45d0:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    45d4:	5000113c 	andpl	r1, r0, ip, lsr r1
    45d8:	4008626e 	andmi	r6, r8, lr, ror #4
    45dc:	40082224 	andmi	r2, r8, r4, lsr #4
    45e0:	40092008 	andmi	r2, r9, r8
    45e4:	80a4e700 	adchi	lr, r4, r0, lsl #14
    45e8:	40091034 	andmi	r1, r9, r4, lsr r0
    45ec:	5000139c 	mulpl	r0, ip, r3
    45f0:	50001398 	mulpl	r0, r8, r3

000045f4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    45f4:	b510      	push	{r4, lr}
    45f6:	4b14      	ldr	r3, [pc, #80]	; (4648 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    45f8:	681c      	ldr	r4, [r3, #0]
    45fa:	b2a4      	uxth	r4, r4
    45fc:	b314      	cbz	r4, 4644 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    45fe:	f7ff f8df 	bl	37c0 <NOROM_AONBatMonTemperatureGetDegC>
    4602:	4b12      	ldr	r3, [pc, #72]	; (464c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4604:	f993 2007 	ldrsb.w	r2, [r3, #7]
    4608:	4290      	cmp	r0, r2
    460a:	da05      	bge.n	4618 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    460c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    4610:	4290      	cmp	r0, r2
    4612:	bfb8      	it	lt
    4614:	4610      	movlt	r0, r2
    4616:	71d8      	strb	r0, [r3, #7]
    4618:	889a      	ldrh	r2, [r3, #4]
    461a:	490c      	ldr	r1, [pc, #48]	; (464c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    461c:	4294      	cmp	r4, r2
    461e:	d310      	bcc.n	4642 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    4620:	4b0b      	ldr	r3, [pc, #44]	; (4650 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    4622:	6808      	ldr	r0, [r1, #0]
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	1aa4      	subs	r4, r4, r2
    4628:	3302      	adds	r3, #2
    462a:	1a1b      	subs	r3, r3, r0
    462c:	2b1f      	cmp	r3, #31
    462e:	bf28      	it	cs
    4630:	231f      	movcs	r3, #31
    4632:	085b      	lsrs	r3, r3, #1
    4634:	40dc      	lsrs	r4, r3
    4636:	4414      	add	r4, r2
    4638:	f64f 72ff 	movw	r2, #65535	; 0xffff
    463c:	4294      	cmp	r4, r2
    463e:	bf28      	it	cs
    4640:	4614      	movcs	r4, r2
    4642:	808c      	strh	r4, [r1, #4]
    4644:	bd10      	pop	{r4, pc}
    4646:	bf00      	nop
    4648:	40091034 	andmi	r1, r9, r4, lsr r0
    464c:	20000654 	andcs	r0, r0, r4, asr r6
    4650:	40092008 	andmi	r2, r9, r8

00004654 <NOROM_SysCtrlResetSourceGet>:
    4654:	4b04      	ldr	r3, [pc, #16]	; (4668 <NOROM_SysCtrlResetSourceGet+0x14>)
    4656:	681a      	ldr	r2, [r3, #0]
    4658:	0412      	lsls	r2, r2, #16
    465a:	bf5a      	itte	pl
    465c:	6818      	ldrpl	r0, [r3, #0]
    465e:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    4662:	2008      	movmi	r0, #8
    4664:	4770      	bx	lr
    4666:	bf00      	nop
    4668:	40090004 	andmi	r0, r9, r4

0000466c <NOROM_ChipInfo_GetChipFamily>:
    466c:	f64b 129a 	movw	r2, #47514	; 0xb99a
    4670:	4b10      	ldr	r3, [pc, #64]	; (46b4 <NOROM_ChipInfo_GetChipFamily+0x48>)
    4672:	6818      	ldr	r0, [r3, #0]
    4674:	f3c0 300f 	ubfx	r0, r0, #12, #16
    4678:	4290      	cmp	r0, r2
    467a:	d106      	bne.n	468a <NOROM_ChipInfo_GetChipFamily+0x1e>
    467c:	681b      	ldr	r3, [r3, #0]
    467e:	0f1b      	lsrs	r3, r3, #28
    4680:	2b0b      	cmp	r3, #11
    4682:	bf0c      	ite	eq
    4684:	2004      	moveq	r0, #4
    4686:	2000      	movne	r0, #0
    4688:	e011      	b.n	46ae <NOROM_ChipInfo_GetChipFamily+0x42>
    468a:	f64b 13be 	movw	r3, #47550	; 0xb9be
    468e:	4298      	cmp	r0, r3
    4690:	d00a      	beq.n	46a8 <NOROM_ChipInfo_GetChipFamily+0x3c>
    4692:	f64b 3341 	movw	r3, #47937	; 0xbb41
    4696:	4298      	cmp	r0, r3
    4698:	d008      	beq.n	46ac <NOROM_ChipInfo_GetChipFamily+0x40>
    469a:	f64b 3320 	movw	r3, #47904	; 0xbb20
    469e:	4298      	cmp	r0, r3
    46a0:	bf14      	ite	ne
    46a2:	20ff      	movne	r0, #255	; 0xff
    46a4:	2002      	moveq	r0, #2
    46a6:	e002      	b.n	46ae <NOROM_ChipInfo_GetChipFamily+0x42>
    46a8:	2001      	movs	r0, #1
    46aa:	e000      	b.n	46ae <NOROM_ChipInfo_GetChipFamily+0x42>
    46ac:	2003      	movs	r0, #3
    46ae:	b240      	sxtb	r0, r0
    46b0:	4770      	bx	lr
    46b2:	bf00      	nop
    46b4:	50001318 	andpl	r1, r0, r8, lsl r3

000046b8 <NOROM_ChipInfo_GetHwRevision>:
    46b8:	b538      	push	{r3, r4, r5, lr}
    46ba:	4b19      	ldr	r3, [pc, #100]	; (4720 <NOROM_ChipInfo_GetHwRevision+0x68>)
    46bc:	681d      	ldr	r5, [r3, #0]
    46be:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    46c2:	6818      	ldr	r0, [r3, #0]
    46c4:	0f2d      	lsrs	r5, r5, #28
    46c6:	b2c4      	uxtb	r4, r0
    46c8:	2c80      	cmp	r4, #128	; 0x80
    46ca:	bf28      	it	cs
    46cc:	2400      	movcs	r4, #0
    46ce:	f7ff ffcd 	bl	466c <NOROM_ChipInfo_GetChipFamily>
    46d2:	2804      	cmp	r0, #4
    46d4:	d821      	bhi.n	471a <NOROM_ChipInfo_GetHwRevision+0x62>
    46d6:	e8df f000 	tbb	[pc, r0]
    46da:	1b1b1303 	blne	6c92ee <__ccfg+0x6a9346>
    46de:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    46e2:	2d07      	cmp	r5, #7
    46e4:	d819      	bhi.n	471a <NOROM_ChipInfo_GetHwRevision+0x62>
    46e6:	e8df f005 	tbb	[pc, r5]
    46ea:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    46ee:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    46f2:	2014      	movs	r0, #20
    46f4:	e012      	b.n	471c <NOROM_ChipInfo_GetHwRevision+0x64>
    46f6:	2015      	movs	r0, #21
    46f8:	e010      	b.n	471c <NOROM_ChipInfo_GetHwRevision+0x64>
    46fa:	f104 0016 	add.w	r0, r4, #22
    46fe:	e00a      	b.n	4716 <NOROM_ChipInfo_GetHwRevision+0x5e>
    4700:	b125      	cbz	r5, 470c <NOROM_ChipInfo_GetHwRevision+0x54>
    4702:	2d02      	cmp	r5, #2
    4704:	d109      	bne.n	471a <NOROM_ChipInfo_GetHwRevision+0x62>
    4706:	f104 0014 	add.w	r0, r4, #20
    470a:	e004      	b.n	4716 <NOROM_ChipInfo_GetHwRevision+0x5e>
    470c:	200a      	movs	r0, #10
    470e:	e005      	b.n	471c <NOROM_ChipInfo_GetHwRevision+0x64>
    4710:	b91d      	cbnz	r5, 471a <NOROM_ChipInfo_GetHwRevision+0x62>
    4712:	f104 000a 	add.w	r0, r4, #10
    4716:	b2c0      	uxtb	r0, r0
    4718:	e000      	b.n	471c <NOROM_ChipInfo_GetHwRevision+0x64>
    471a:	20ff      	movs	r0, #255	; 0xff
    471c:	b240      	sxtb	r0, r0
    471e:	bd38      	pop	{r3, r4, r5, pc}
    4720:	50001318 	andpl	r1, r0, r8, lsl r3

00004724 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    4724:	b508      	push	{r3, lr}
    4726:	f7ff ffa1 	bl	466c <NOROM_ChipInfo_GetChipFamily>
    472a:	2801      	cmp	r0, #1
    472c:	d103      	bne.n	4736 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    472e:	f7ff ffc3 	bl	46b8 <NOROM_ChipInfo_GetHwRevision>
    4732:	2813      	cmp	r0, #19
    4734:	dc00      	bgt.n	4738 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    4736:	e7fe      	b.n	4736 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    4738:	bd08      	pop	{r3, pc}
	...

0000473c <AuxAdiDdiSafeWrite.constprop.1>:
    473c:	b538      	push	{r3, r4, r5, lr}
    473e:	4604      	mov	r4, r0
    4740:	460d      	mov	r5, r1
    4742:	f7ff f871 	bl	3828 <NOROM_CPUcpsid>
    4746:	4b06      	ldr	r3, [pc, #24]	; (4760 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    4748:	681a      	ldr	r2, [r3, #0]
    474a:	2a00      	cmp	r2, #0
    474c:	d0fb      	beq.n	4746 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    474e:	2201      	movs	r2, #1
    4750:	6025      	str	r5, [r4, #0]
    4752:	601a      	str	r2, [r3, #0]
    4754:	b918      	cbnz	r0, 475e <AuxAdiDdiSafeWrite.constprop.1+0x22>
    4756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    475a:	f7ff b869 	b.w	3830 <NOROM_CPUcpsie>
    475e:	bd38      	pop	{r3, r4, r5, pc}
    4760:	400c8000 	andmi	r8, ip, r0

00004764 <NOROM_DDI32RegWrite>:
    4764:	4408      	add	r0, r1
    4766:	4611      	mov	r1, r2
    4768:	f7ff bfe8 	b.w	473c <AuxAdiDdiSafeWrite.constprop.1>

0000476c <memcpy>:
    476c:	b5f0      	push	{r4, r5, r6, r7, lr}
    476e:	46c6      	mov	lr, r8
    4770:	b500      	push	{lr}
    4772:	2a0f      	cmp	r2, #15
    4774:	d945      	bls.n	4802 <memcpy+0x96>
    4776:	000b      	movs	r3, r1
    4778:	2603      	movs	r6, #3
    477a:	4303      	orrs	r3, r0
    477c:	401e      	ands	r6, r3
    477e:	000c      	movs	r4, r1
    4780:	0003      	movs	r3, r0
    4782:	2e00      	cmp	r6, #0
    4784:	d142      	bne.n	480c <memcpy+0xa0>
    4786:	0015      	movs	r5, r2
    4788:	3d10      	subs	r5, #16
    478a:	092d      	lsrs	r5, r5, #4
    478c:	46ac      	mov	ip, r5
    478e:	012d      	lsls	r5, r5, #4
    4790:	46a8      	mov	r8, r5
    4792:	4480      	add	r8, r0
    4794:	e000      	b.n	4798 <memcpy+0x2c>
    4796:	003b      	movs	r3, r7
    4798:	6867      	ldr	r7, [r4, #4]
    479a:	605f      	str	r7, [r3, #4]
    479c:	68e7      	ldr	r7, [r4, #12]
    479e:	60df      	str	r7, [r3, #12]
    47a0:	001f      	movs	r7, r3
    47a2:	6825      	ldr	r5, [r4, #0]
    47a4:	601d      	str	r5, [r3, #0]
    47a6:	68a5      	ldr	r5, [r4, #8]
    47a8:	3710      	adds	r7, #16
    47aa:	609d      	str	r5, [r3, #8]
    47ac:	3410      	adds	r4, #16
    47ae:	4543      	cmp	r3, r8
    47b0:	d1f1      	bne.n	4796 <memcpy+0x2a>
    47b2:	4665      	mov	r5, ip
    47b4:	230f      	movs	r3, #15
    47b6:	240c      	movs	r4, #12
    47b8:	3501      	adds	r5, #1
    47ba:	012d      	lsls	r5, r5, #4
    47bc:	1949      	adds	r1, r1, r5
    47be:	4013      	ands	r3, r2
    47c0:	1945      	adds	r5, r0, r5
    47c2:	4214      	tst	r4, r2
    47c4:	d025      	beq.n	4812 <memcpy+0xa6>
    47c6:	598c      	ldr	r4, [r1, r6]
    47c8:	51ac      	str	r4, [r5, r6]
    47ca:	3604      	adds	r6, #4
    47cc:	1b9c      	subs	r4, r3, r6
    47ce:	2c03      	cmp	r4, #3
    47d0:	d8f9      	bhi.n	47c6 <memcpy+0x5a>
    47d2:	2403      	movs	r4, #3
    47d4:	3b04      	subs	r3, #4
    47d6:	089b      	lsrs	r3, r3, #2
    47d8:	3301      	adds	r3, #1
    47da:	009b      	lsls	r3, r3, #2
    47dc:	4022      	ands	r2, r4
    47de:	18ed      	adds	r5, r5, r3
    47e0:	18c9      	adds	r1, r1, r3
    47e2:	1e56      	subs	r6, r2, #1
    47e4:	2a00      	cmp	r2, #0
    47e6:	d007      	beq.n	47f8 <memcpy+0x8c>
    47e8:	2300      	movs	r3, #0
    47ea:	e000      	b.n	47ee <memcpy+0x82>
    47ec:	0023      	movs	r3, r4
    47ee:	5cca      	ldrb	r2, [r1, r3]
    47f0:	1c5c      	adds	r4, r3, #1
    47f2:	54ea      	strb	r2, [r5, r3]
    47f4:	429e      	cmp	r6, r3
    47f6:	d1f9      	bne.n	47ec <memcpy+0x80>
    47f8:	bc04      	pop	{r2}
    47fa:	4690      	mov	r8, r2
    47fc:	bcf0      	pop	{r4, r5, r6, r7}
    47fe:	bc02      	pop	{r1}
    4800:	4708      	bx	r1
    4802:	0005      	movs	r5, r0
    4804:	1e56      	subs	r6, r2, #1
    4806:	2a00      	cmp	r2, #0
    4808:	d1ee      	bne.n	47e8 <memcpy+0x7c>
    480a:	e7f5      	b.n	47f8 <memcpy+0x8c>
    480c:	1e56      	subs	r6, r2, #1
    480e:	0005      	movs	r5, r0
    4810:	e7ea      	b.n	47e8 <memcpy+0x7c>
    4812:	001a      	movs	r2, r3
    4814:	e7f6      	b.n	4804 <memcpy+0x98>
    4816:	46c0      	nop			; (mov r8, r8)

00004818 <srand>:
    4818:	2200      	movs	r2, #0
    481a:	4b03      	ldr	r3, [pc, #12]	; (4828 <srand+0x10>)
    481c:	681b      	ldr	r3, [r3, #0]
    481e:	33a8      	adds	r3, #168	; 0xa8
    4820:	6018      	str	r0, [r3, #0]
    4822:	605a      	str	r2, [r3, #4]
    4824:	4770      	bx	lr
    4826:	46c0      	nop			; (mov r8, r8)
    4828:	20000110 	andcs	r0, r0, r0, lsl r1

0000482c <rand>:
    482c:	4b0a      	ldr	r3, [pc, #40]	; (4858 <rand+0x2c>)
    482e:	b510      	push	{r4, lr}
    4830:	681c      	ldr	r4, [r3, #0]
    4832:	34a8      	adds	r4, #168	; 0xa8
    4834:	6820      	ldr	r0, [r4, #0]
    4836:	6861      	ldr	r1, [r4, #4]
    4838:	4a08      	ldr	r2, [pc, #32]	; (485c <rand+0x30>)
    483a:	4b09      	ldr	r3, [pc, #36]	; (4860 <rand+0x34>)
    483c:	f000 f812 	bl	4864 <__aeabi_lmul>
    4840:	2201      	movs	r2, #1
    4842:	2300      	movs	r3, #0
    4844:	1880      	adds	r0, r0, r2
    4846:	4159      	adcs	r1, r3
    4848:	6020      	str	r0, [r4, #0]
    484a:	6061      	str	r1, [r4, #4]
    484c:	0048      	lsls	r0, r1, #1
    484e:	0840      	lsrs	r0, r0, #1
    4850:	bc10      	pop	{r4}
    4852:	bc02      	pop	{r1}
    4854:	4708      	bx	r1
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	20000110 	andcs	r0, r0, r0, lsl r1
    485c:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    4860:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

00004864 <__aeabi_lmul>:
    4864:	b5f0      	push	{r4, r5, r6, r7, lr}
    4866:	000f      	movs	r7, r1
    4868:	0001      	movs	r1, r0
    486a:	46c6      	mov	lr, r8
    486c:	4684      	mov	ip, r0
    486e:	0415      	lsls	r5, r2, #16
    4870:	0400      	lsls	r0, r0, #16
    4872:	0c14      	lsrs	r4, r2, #16
    4874:	0c00      	lsrs	r0, r0, #16
    4876:	0c09      	lsrs	r1, r1, #16
    4878:	0c2d      	lsrs	r5, r5, #16
    487a:	002e      	movs	r6, r5
    487c:	4346      	muls	r6, r0
    487e:	434d      	muls	r5, r1
    4880:	4360      	muls	r0, r4
    4882:	4361      	muls	r1, r4
    4884:	1940      	adds	r0, r0, r5
    4886:	0c34      	lsrs	r4, r6, #16
    4888:	1824      	adds	r4, r4, r0
    488a:	b500      	push	{lr}
    488c:	42a5      	cmp	r5, r4
    488e:	d903      	bls.n	4898 <__aeabi_lmul+0x34>
    4890:	2080      	movs	r0, #128	; 0x80
    4892:	0240      	lsls	r0, r0, #9
    4894:	4680      	mov	r8, r0
    4896:	4441      	add	r1, r8
    4898:	0c25      	lsrs	r5, r4, #16
    489a:	186d      	adds	r5, r5, r1
    489c:	4661      	mov	r1, ip
    489e:	4359      	muls	r1, r3
    48a0:	437a      	muls	r2, r7
    48a2:	0430      	lsls	r0, r6, #16
    48a4:	1949      	adds	r1, r1, r5
    48a6:	0424      	lsls	r4, r4, #16
    48a8:	0c00      	lsrs	r0, r0, #16
    48aa:	1820      	adds	r0, r4, r0
    48ac:	1889      	adds	r1, r1, r2
    48ae:	bc04      	pop	{r2}
    48b0:	4690      	mov	r8, r2
    48b2:	bcf0      	pop	{r4, r5, r6, r7}
    48b4:	bc04      	pop	{r2}
    48b6:	4710      	bx	r2
    48b8:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    48bc:	20656761 	rsbcs	r6, r5, r1, ror #14
    48c0:	746e6573 	strbtvc	r6, [lr], #-1395	; 0xfffffa8d
    48c4:	45000a0d 	strmi	r0, [r0, #-2573]	; 0xfffff5f3
    48c8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    48cc:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
    48d0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    48d4:	6e697a69 	vnmulvs.f32	s15, s18, s19
    48d8:	6f6e2067 	svcvs	0x006e2067
    48dc:	2e2e6564 	cfsh64cs	mvdx6, mvdx14, #52
    48e0:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
    48e4:	49454345 	stmdbmi	r5, {r0, r2, r6, r8, r9, lr}^
    48e8:	20444556 	subcs	r4, r4, r6, asr r5
    48ec:	3a444947 	bcc	1116e10 <__ccfg+0x10f6e68>
    48f0:	0a642520 	beq	190dd78 <__ccfg+0x18eddd0>
    48f4:	43455200 	movtmi	r5, #20992	; 0x5200
    48f8:	45564945 	ldrbmi	r4, [r6, #-2373]	; 0xfffff6bb
    48fc:	59542044 	ldmdbpl	r4, {r2, r6, sp}^
    4900:	203a4550 	eorscs	r4, sl, r0, asr r5
    4904:	000a6425 	andeq	r6, sl, r5, lsr #8
    4908:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    490c:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4910:	51455220 	cmppl	r5, r0, lsr #4
    4914:	4d554e20 	ldclmi	14, cr4, [r5, #-128]	; 0xffffff80
    4918:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    491c:	4552000a 	ldrbmi	r0, [r2, #-10]
    4920:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4924:	53204445 			; <UNDEFINED> instruction: 0x53204445
    4928:	203a4449 	eorscs	r4, sl, r9, asr #8
    492c:	000a6425 	andeq	r6, sl, r5, lsr #8
    4930:	45434552 	strbmi	r4, [r3, #-1362]	; 0xfffffaae
    4934:	44455649 	strbmi	r5, [r5], #-1609	; 0xfffff9b7
    4938:	44495220 	strbmi	r5, [r9], #-544	; 0xfffffde0
    493c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    4940:	4552000a 	ldrbmi	r0, [r2, #-10]
    4944:	56494543 	strbpl	r4, [r9], -r3, asr #10
    4948:	52204445 	eorpl	r4, r0, #1157627904	; 0x45000000
    494c:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
    4950:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    4954:	45000a73 	strmi	r0, [r0, #-2675]	; 0xfffff58d
    4958:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    495c:	6572203a 	ldrbvs	r2, [r2, #-58]!	; 0xffffffc6
    4960:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4964:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
    4968:	20657079 	rsbcs	r7, r5, r9, ror r0
    496c:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
    4970:	20736920 	rsbscs	r6, r3, r0, lsr #18
    4974:	20746f6e 	rsbscs	r6, r4, lr, ror #30
    4978:	6167656c 	cmnvs	r7, ip, ror #10
    497c:	6170206c 	cmnvs	r0, ip, rrx
    4980:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    4984:	70797420 	rsbsvc	r7, r9, r0, lsr #8
    4988:	0a0d0065 	beq	344b24 <__ccfg+0x324b7c>
    498c:	74614420 	strbtvc	r4, [r1], #-1056	; 0xfffffbe0
    4990:	61532061 	cmpvs	r3, r1, rrx
    4994:	00646576 	rsbeq	r6, r4, r6, ror r5
    4998:	52200a0d 	eorpl	r0, r0, #53248	; 0xd000
    499c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    49a0:	65442064 	strbvs	r2, [r4, #-100]	; 0xffffff9c
    49a4:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    49a8:	0a0d0064 	beq	344b40 <__ccfg+0x324b98>
    49ac:	63655220 	cmnvs	r5, #32, 4
    49b0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    49b4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    49b8:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    49bc:	6f726620 	svcvs	0x00726620
    49c0:	6425206d 	strtvs	r2, [r5], #-109	; 0xffffff93
    49c4:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    49c8:	200a0d00 	andcs	r0, sl, r0, lsl #26
    49cc:	20656854 	rsbcs	r6, r5, r4, asr r8
    49d0:	6f636572 	svcvs	0x00636572
    49d4:	63206472 			; <UNDEFINED> instruction: 0x63206472
    49d8:	74276e61 	strtvc	r6, [r7], #-3681	; 0xfffff19f
    49dc:	20656220 	rsbcs	r6, r5, r0, lsr #4
    49e0:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0xfffffe8d
    49e4:	6e6f2064 	cdpvs	0, 6, cr2, cr15, cr4, {3}
    49e8:	646f6e20 	strbtvs	r6, [pc], #-3616	; 49f0 <__aeabi_lmul+0x18c>
    49ec:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
    49f0:	200a0d00 	andcs	r0, sl, r0, lsl #26
    49f4:	20656854 	rsbcs	r6, r5, r4, asr r8
    49f8:	6f636572 	svcvs	0x00636572
    49fc:	64206472 	strtvs	r6, [r0], #-1138	; 0xfffffb8e
    4a00:	2073656f 	rsbscs	r6, r3, pc, ror #10
    4a04:	20746f6e 	rsbscs	r6, r4, lr, ror #30
    4a08:	73697865 	cmnvc	r9, #6619136	; 0x650000
    4a0c:	6f207374 	svcvs	0x00207374
    4a10:	6f6e206e 	svcvs	0x006e206e
    4a14:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4a18:	0a0d0064 	beq	344bb0 <__ccfg+0x324c08>
    4a1c:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
    4a20:	63657220 	cmnvs	r5, #32, 4
    4a24:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4a28:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4a2c:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4a34 <__aeabi_lmul+0x1d0>
    4a30:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4a34:	6f207473 	svcvs	0x00207473
    4a38:	6f6e206e 	svcvs	0x006e206e
    4a3c:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4a40:	52450064 	subpl	r0, r5, #100	; 0x64
    4a44:	3a524f52 	bcc	1498794 <__ccfg+0x14787ec>
    4a48:	6d6f7320 	stclvs	3, cr7, [pc, #-128]!	; 49d0 <__aeabi_lmul+0x16c>
    4a4c:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
    4a50:	65772067 	ldrbvs	r2, [r7, #-103]!	; 0xffffff99
    4a54:	7720746e 	strvc	r7, [r0, -lr, ror #8]!
    4a58:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    4a5c:	65687720 	strbvs	r7, [r8, #-1824]!	; 0xfffff8e0
    4a60:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0xffffff92
    4a64:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4a68:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4a6c:	20656874 	rsbcs	r6, r5, r4, ror r8
    4a70:	6b636170 	blvs	18dd038 <__ccfg+0x18bd090>
    4a74:	43007465 	movwmi	r7, #1125	; 0x465
    4a78:	6f6e6e61 	svcvs	0x006e6e61
    4a7c:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    4a80:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    4a84:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    4a88:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4a8c:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    4a90:	470a0d00 	strmi	r0, [sl, -r0, lsl #26]
    4a94:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4a98:	20642520 	rsbcs	r2, r4, r0, lsr #10
    4a9c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4aa0:	23206563 			; <UNDEFINED> instruction: 0x23206563
    4aa4:	28206425 	stmdacs	r0!, {r0, r2, r5, sl, sp, lr}
    4aa8:	252f6425 	strcs	r6, [pc, #-1061]!	; 468b <NOROM_ChipInfo_GetChipFamily+0x1f>
    4aac:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    4ab0:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4ab4:	0a0d2973 	beq	34f088 <__ccfg+0x32f0e0>
    4ab8:	72294728 	eorvc	r4, r9, #40, 14	; 0xa00000
    4abc:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4ac0:	0a0d4449 	beq	355bec <__ccfg+0x335c44>
    4ac4:	65294e28 	strvs	r4, [r9, #-3624]!	; 0xfffff1d8
    4ac8:	65642077 	strbvs	r2, [r4, #-119]!	; 0xffffff89
    4acc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4ad0:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4ad4:	2946280a 	stmdbcs	r6, {r1, r3, fp, sp}^
    4ad8:	20646e69 	rsbcs	r6, r4, r9, ror #28
    4adc:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4ae0:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4ae4:	280a0d73 	stmdacs	sl, {r0, r1, r4, r5, r6, r8, sl, fp}
    4ae8:	65722943 	ldrbvs	r2, [r2, #-2371]!	; 0xfffff6bd
    4aec:	20657461 	rsbcs	r7, r5, r1, ror #8
    4af0:	6f636572 	svcvs	0x00636572
    4af4:	6f206472 	svcvs	0x00206472
    4af8:	656e206e 	strbvs	r2, [lr, #-110]!	; 0xffffff92
    4afc:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4b00:	0a0d726f 	beq	3614c4 <__ccfg+0x34151c>
    4b04:	65294428 	strvs	r4, [r9, #-1064]!	; 0xfffffbd8
    4b08:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4b0c:	63657220 	cmnvs	r5, #32, 4
    4b10:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4b14:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4b18:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4b1c:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4b20:	2952280a 	ldmdbcs	r2, {r1, r3, fp, sp}^
    4b24:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4b28:	20657665 	rsbcs	r7, r5, r5, ror #12
    4b2c:	6f636572 	svcvs	0x00636572
    4b30:	66206472 			; <UNDEFINED> instruction: 0x66206472
    4b34:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    4b38:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4b3c:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4b40:	53280a0d 			; <UNDEFINED> instruction: 0x53280a0d
    4b44:	776f6829 	strbvc	r6, [pc, -r9, lsr #16]!
    4b48:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    4b4c:	72206c61 	eorvc	r6, r0, #24832	; 0x6100
    4b50:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4b54:	0a0d7364 	beq	3618ec <__ccfg+0x341944>
    4b58:	29652852 	stmdbcs	r5!, {r1, r4, r6, fp, sp}^
    4b5c:	20746573 	rsbscs	r6, r4, r3, ror r5
    4b60:	61636f6c 	cmnvs	r3, ip, ror #30
    4b64:	7473206c 	ldrbtvc	r2, [r3], #-108	; 0xffffff94
    4b68:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4b6c:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
    4b70:	6c65530a 	stclvs	3, cr5, [r5], #-40	; 0xffffffd8
    4b74:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4b78:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4b7c:	00632500 	rsbeq	r2, r3, r0, lsl #10
    4b80:	61656c50 	cmnvs	r5, r0, asr ip
    4b84:	70206573 	eorvc	r6, r0, r3, ror r5
    4b88:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4b8c:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4b90:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4b94:	6f726720 	svcvs	0x00726720
    4b98:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4b9c:	203a2344 	eorscs	r2, sl, r4, asr #6
    4ba0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    4ba4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4ba8:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4bb0 <__aeabi_lmul+0x34c>
    4bac:	72672065 	rsbvc	r2, r7, #101	; 0x65
    4bb0:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4bb4:	0d004449 	cfstrseq	mvf4, [r0, #-292]	; 0xfffffedc
    4bb8:	656c500a 	strbvs	r5, [ip, #-10]!
    4bbc:	20657361 	rsbcs	r7, r5, r1, ror #6
    4bc0:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4bc4:	20656469 	rsbcs	r6, r5, r9, ror #8
    4bc8:	656e2061 	strbvs	r2, [lr, #-97]!	; 0xffffff9f
    4bcc:	6f6e2077 	svcvs	0x006e2077
    4bd0:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4bd4:	28202344 	stmdacs	r0!, {r2, r6, r8, r9, sp}
    4bd8:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    4bdc:	636e6920 	cmnvs	lr, #32, 18	; 0x80000
    4be0:	6973756c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    4be4:	3a296576 	bcc	a5e1c4 <__ccfg+0xa3e21c>
    4be8:	75250020 	strvc	r0, [r5, #-32]!	; 0xffffffe0
    4bec:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xfffff100
    4bf0:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    4bf4:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    4bf8:	44490065 	strbmi	r0, [r9], #-101	; 0xffffff9b
    4bfc:	20736920 	rsbscs	r6, r3, r0, lsr #18
    4c00:	65726c61 	ldrbvs	r6, [r2, #-3169]!	; 0xfffff39f
    4c04:	20796461 	rsbscs	r6, r9, r1, ror #8
    4c08:	75206e69 	strvc	r6, [r0, #-3689]!	; 0xfffff197
    4c0c:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4c10:	2344490a 	movtcs	r4, #18698	; 0x490a
    4c14:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
    4c18:	7369202c 	cmnvc	r9, #44	; 0x2c
    4c1c:	206e6120 	rsbcs	r6, lr, r0, lsr #2
    4c20:	61766e69 	cmnvs	r6, r9, ror #28
    4c24:	2064696c 	rsbcs	r6, r4, ip, ror #18
    4c28:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    4c2c:	202e6563 	eorcs	r6, lr, r3, ror #10
    4c30:	73616552 	cmnvc	r1, #343932928	; 0x14800000
    4c34:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4c38:	002e7325 	eoreq	r7, lr, r5, lsr #6
    4c3c:	6f727245 	svcvs	0x00727245
    4c40:	6c432072 	mcrrvs	0, 7, r2, r3, cr2
    4c44:	69726165 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4c48:	4e20676e 	cdpmi	7, 2, cr6, cr0, cr14, {3}
    4c4c:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4c50:	61727241 	cmnvs	r2, r1, asr #4
    4c54:	0a0d0079 	beq	344e40 <__ccfg+0x324e98>
    4c58:	69654e20 	stmdbvs	r5!, {r5, r9, sl, fp, lr}^
    4c5c:	6f626867 	svcvs	0x00626867
    4c60:	203a7372 	eorscs	r7, sl, r2, ror r3
    4c64:	2c752500 	cfldr64cs	mvdx2, [r5], #-0
    4c68:	6c500020 	mrrcvs	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
    4c6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4c70:	6f727020 	svcvs	0x00727020
    4c74:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    4c78:	6e206120 	sufvssp	f6, f0, f0
    4c7c:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4c80:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    4c84:	35322d30 	ldrcc	r2, [r2, #-3376]!	; 0xfffff2d0
    4c88:	00203a29 	eoreq	r3, r0, r9, lsr #20
    4c8c:	6f727245 	svcvs	0x00727245
    4c90:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    4c94:	6f72706d 	svcvs	0x0072706d
    4c98:	20726570 	rsbscs	r6, r2, r0, ror r5
    4c9c:	50004449 	andpl	r4, r0, r9, asr #8
    4ca0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4ca4:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4ca8:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4cac:	20612065 	rsbcs	r2, r1, r5, rrx
    4cb0:	6f636572 	svcvs	0x00636572
    4cb4:	28206472 	stmdacs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4cb8:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    4cbc:	3c206874 	stccc	8, cr6, [r0], #-464	; 0xfffffe30
    4cc0:	3032203d 	eorscc	r2, r2, sp, lsr r0
    4cc4:	00203a29 	eoreq	r3, r0, r9, lsr #20
    4cc8:	6f727245 	svcvs	0x00727245
    4ccc:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    4cd0:	6f72706d 	svcvs	0x0072706d
    4cd4:	20726570 	rsbscs	r6, r2, r0, ror r5
    4cd8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4cdc:	00444920 	subeq	r4, r4, r0, lsr #18
    4ce0:	61656c50 	cmnvs	r5, r0, asr ip
    4ce4:	70206573 	eorvc	r6, r0, r3, ror r5
    4ce8:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4cec:	74206564 	strtvc	r6, [r0], #-1380	; 0xfffffa9c
    4cf0:	72206568 	eorvc	r6, r0, #104, 10	; 0x1a000000
    4cf4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4cf8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    4cfc:	20786564 	rsbscs	r6, r8, r4, ror #10
    4d00:	342d3028 	strtcc	r3, [sp], #-40	; 0xffffffd8
    4d04:	203a2930 	eorscs	r2, sl, r0, lsr r9
    4d08:	490a0d00 	stmdbmi	sl, {r8, sl, fp}
    4d0c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    4d10:	6d695409 	cfstrdvs	mvd5, [r9, #-36]!	; 0xffffffdc
    4d14:	74532065 	ldrbvc	r2, [r3], #-101	; 0xffffff9b
    4d18:	09706d61 	ldmdbeq	r0!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    4d1c:	6e774f09 	cdpvs	15, 7, cr4, cr7, cr9, {0}
    4d20:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4d24:	65520944 	ldrbvs	r0, [r2, #-2372]	; 0xfffff6bc
    4d28:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4d2c:	74614420 	strbtvc	r4, [r1], #-1056	; 0xfffffbe0
    4d30:	0a0d0061 	beq	344ebc <__ccfg+0x324f14>
    4d34:	25096425 	strcs	r6, [r9, #-1061]	; 0xfffffbdb
    4d38:	09090964 	stmdbeq	r9, {r2, r5, r6, r8, fp}
    4d3c:	25096425 	strcs	r6, [r9, #-1061]	; 0xfffffbdb
    4d40:	0a0d0073 	beq	344f14 <__ccfg+0x324f6c>
    4d44:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
    4d48:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
    4d4c:	6572206f 	ldrbvs	r2, [r2, #-111]!	; 0xffffff91
    4d50:	20686361 	rsbcs	r6, r8, r1, ror #6
    4d54:	20656874 	rsbcs	r6, r5, r4, ror r8
    4d58:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    4d5c:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
    4d60:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    4d64:	72450a0d 	subvc	r0, r5, #53248	; 0xd000
    4d68:	3a726f72 	bcc	1ca0b38 <__ccfg+0x1c80b90>
    4d6c:	00732520 	rsbseq	r2, r3, r0, lsr #10
    4d70:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    4d74:	203a5252 	eorscs	r5, sl, r2, asr r2
    4d78:	202c7825 	eorcs	r7, ip, r5, lsr #16
    4d7c:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    4d80:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    4d84:	50006961 	andpl	r6, r0, r1, ror #18
    4d88:	534f6369 	movtpl	r6, #62313	; 0xf369
    4d8c:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    4d90:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    4d94:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    4d98:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    4d9c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4da0:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    4da4:	434e5541 	movtmi	r5, #58689	; 0xe541
    4da8:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    4dac:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    4db0:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    4db4:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    4db8:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 4d40 <__aeabi_lmul+0x4dc>
    4dbc:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    4dc0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    4dc4:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    4dc8:	30303220 	eorscc	r3, r0, r0, lsr #4
    4dcc:	30322d32 	eorscc	r2, r2, r2, lsr sp
    4dd0:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    4dd4:	6f746665 	svcvs	0x00746665
    4dd8:	20726576 	rsbscs	r6, r2, r6, ror r5
    4ddc:	3a4d4152 	bcc	135532c <__ccfg+0x1335384>
    4de0:	20642520 	rsbcs	r2, r4, r0, lsr #10
    4de4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    4de8:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    4dec:	63695000 	cmnvs	r9, #0
    4df0:	6820534f 	stmdavs	r0!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
    4df4:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    4df8:	00000064 	andeq	r0, r0, r4, rrx

00004dfc <port_confs>:
    4dfc:	00306080 	eorseq	r6, r0, r0, lsl #1
    4e00:	00386080 	eorseq	r6, r8, r0, lsl #1
    4e04:	00186010 	andseq	r6, r8, r0, lsl r0
    4e08:	2010400f 	andscs	r4, r0, pc
    4e0c:	30694000 	rsbcc	r4, r9, r0
    4e10:	30714000 	rsbscc	r4, r1, r0
    4e14:	00b86008 	adcseq	r6, r8, r8
    4e18:	60c94000 	sbcvs	r4, r9, r0
    4e1c:	60d14000 	sbcsvs	r4, r1, r0
    4e20:	60d94000 	sbcsvs	r4, r9, r0
    4e24:	60e14000 	rscvs	r4, r1, r0
    4e28:	00096380 	andeq	r6, r9, r0, lsl #7
    4e2c:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    4e30:	20402000 	subcs	r2, r0, r0
    4e34:	00486080 	subeq	r6, r8, r0, lsl #1
    4e38:	00506080 	subseq	r6, r0, r0, lsl #1
    4e3c:	00a06000 	adceq	r6, r0, r0
    4e40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4e44:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    4e48:	73006120 	movwvc	r6, #288	; 0x120
    4e4c:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    4e50:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    4e54:	616d006f 	cmnvs	sp, pc, rrx
    4e58:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    4e5c:	00676c61 	rsbeq	r6, r7, r1, ror #24
    4e60:	0069706b 	rsbeq	r7, r9, fp, rrx
    4e64:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00004e69 <__pi_hex_enc_table>:
    4e69:	33323130 	teqcc	r2, #48, 2
    4e6d:	37363534 			; <UNDEFINED> instruction: 0x37363534
    4e71:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    4e75:	46454443 	strbmi	r4, [r5], -r3, asr #8
    4e79:	30766374 	rsbscc	r6, r6, r4, ror r3
    4e7d:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    4e81:	736f7073 	cmnvc	pc, #115	; 0x73
    4e85:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    4e89:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    4e8d:	736f7073 	cmnvc	pc, #115	; 0x73
    4e91:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    4e95:	63740079 	cmnvs	r4, #121	; 0x79
    4e99:	00323076 	eorseq	r3, r2, r6, ror r0
    4e9d:	30766374 	rsbscc	r6, r6, r4, ror r3
    4ea1:	63740033 	cmnvs	r4, #51	; 0x33
    4ea5:	00343076 	eorseq	r3, r4, r6, ror r0
    4ea9:	30766374 	rsbscc	r6, r6, r4, ror r3
    4ead:	63740035 	cmnvs	r4, #53	; 0x35
    4eb1:	00363076 	eorseq	r3, r6, r6, ror r0
    4eb5:	31766374 	cmncc	r6, r4, ror r3
    4eb9:	63740030 	cmnvs	r4, #48	; 0x30
    4ebd:	00313176 	eorseq	r3, r1, r6, ror r1
    4ec1:	31766374 	cmncc	r6, r4, ror r3
    4ec5:	63740036 	cmnvs	r4, #54	; 0x36
    4ec9:	00373176 	eorseq	r3, r7, r6, ror r1
    4ecd:	31766374 	cmncc	r6, r4, ror r3
    4ed1:	63740038 	cmnvs	r4, #56	; 0x38
    4ed5:	00333276 	eorseq	r3, r3, r6, ror r2
    4ed9:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4edd:	63740032 	cmnvs	r4, #50	; 0x32
    4ee1:	00363276 	eorseq	r3, r6, r6, ror r2
    4ee5:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4ee9:	63740037 	cmnvs	r4, #55	; 0x37
    4eed:	00383276 	eorseq	r3, r8, r6, ror r2
    4ef1:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4ef5:	63740039 	cmnvs	r4, #57	; 0x39
    4ef9:	00303376 	eorseq	r3, r0, r6, ror r3
    4efd:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4f01:	63740031 	cmnvs	r4, #49	; 0x31
    4f05:	00323376 	eorseq	r3, r2, r6, ror r3
    4f09:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4f0d:	63740033 	cmnvs	r4, #51	; 0x33
    4f11:	00343376 	eorseq	r3, r4, r6, ror r3

00004f15 <__input_pins>:
    4f15:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00004f1a <__button_list>:
    4f1a:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    4f1e:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4f22:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    4f26:	00317472 	eorseq	r7, r1, r2, ror r4
    4f2a:	20505548 	subscs	r5, r0, r8, asr #10
    4f2e:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    4f32:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    4f36:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    4f3a:	30636920 	rsbcc	r6, r3, r0, lsr #18
    4f3e:	50554800 	subspl	r4, r5, r0, lsl #16
    4f42:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4f46:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4f4a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4f4e:	32747200 	rsbscc	r7, r4, #0, 4
    4f52:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    4f56:	00585220 	subseq	r5, r8, r0, lsr #4
    4f5a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4f5e:	00797020 	rsbseq	r7, r9, r0, lsr #32
    4f62:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4f66:	31636300 	cmncc	r3, r0, lsl #6
    4f6a:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    4f6e:	31434300 	mrscc	r4, (UNDEF: 115)
    4f72:	3a303533 	bcc	c12446 <__ccfg+0xbf249e>
    4f76:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    4f7a:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    4f7e:	00642520 	rsbeq	r2, r4, r0, lsr #10

00004f82 <patable>:
    4f82:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    4f86:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    4f8a:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    4f8e:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

00004f94 <patchGenfskRfe>:
    4f94:	000061a3 	andeq	r6, r0, r3, lsr #3
    4f98:	1307147f 	movwne	r1, #29823	; 0x747f
    4f9c:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    4fa0:	3f131f2e 	svccc	0x00131f2e
    4fa4:	003f0ab0 	ldrhteq	r0, [pc], -r0
    4fa8:	0000ff07 	andeq	pc, r0, r7, lsl #30
    4fac:	40004030 	andmi	r4, r0, r0, lsr r0
    4fb0:	40034001 	andmi	r4, r3, r1
    4fb4:	400f4007 	andmi	r4, pc, r7
    4fb8:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    4fbc:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    4fc0:	4fcf47cf 	svcmi	0x00cf47cf
    4fc4:	2fcf3fcf 	svccs	0x00cf3fcf
    4fc8:	0fcf1fcf 	svceq	0x00cf1fcf
    4fcc:	00000000 	andeq	r0, r0, r0
    4fd0:	0008000f 	andeq	r0, r8, pc
    4fd4:	003f0000 	eorseq	r0, pc, r0
    4fd8:	00400000 	subeq	r0, r0, r0
    4fdc:	0000003f 	andeq	r0, r0, pc, lsr r0
    4fe0:	00680004 	rsbeq	r0, r8, r4
    4fe4:	00dc000e 	sbcseq	r0, ip, lr
    4fe8:	00430006 	subeq	r0, r3, r6
    4fec:	0005001a 	andeq	r0, r5, sl, lsl r0
    4ff0:	00000000 	andeq	r0, r0, r0
    4ff4:	00000002 	andeq	r0, r0, r2
    4ff8:	0000003f 	andeq	r0, r0, pc, lsr r0
    4ffc:	00040000 	andeq	r0, r4, r0
    5000:	000000c0 	andeq	r0, r0, r0, asr #1
    5004:	00c00004 	sbceq	r0, r0, r4
    5008:	00070000 	andeq	r0, r7, r0
    500c:	9100c050 	qaddls	ip, r0, r0
    5010:	c0707000 	rsbsgt	r7, r0, r0
    5014:	70009100 	andvc	r9, r0, r0, lsl #2
    5018:	00213182 	eoreq	r3, r1, r2, lsl #3
    501c:	b1109131 	tstlt	r0, r1, lsr r1
    5020:	81017000 	mrshi	r7, (UNDEF: 1)
    5024:	a100b101 	tstge	r0, r1, lsl #2
    5028:	91323182 	teqls	r2, r2, lsl #3
    502c:	9101b110 	tstls	r1, r0, lsl r1
    5030:	81411011 	cmphi	r1, r1, lsl r0
    5034:	404f2241 	submi	r2, pc, r1, asr #4
    5038:	700006f1 	strdvc	r0, [r0], -r1
    503c:	9101c051 	qaddls	ip, r1, r1
    5040:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    5044:	d0083183 	andle	r3, r8, r3, lsl #3
    5048:	6f413118 	svcvs	0x00413118
    504c:	91310031 	teqls	r1, r1, lsr r0
    5050:	1483b110 	strne	fp, [r3], #272	; 0x110
    5054:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    5058:	10257000 	eorne	r7, r5, r0
    505c:	9100c050 	qaddls	ip, r0, r0
    5060:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    5064:	6f031420 	svcvs	0x00031420
    5068:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    506c:	3182c022 	orrcc	ip, r2, r2, lsr #32
    5070:	91310021 	teqls	r1, r1, lsr #32
    5074:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5078:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    507c:	3182c082 	orrcc	ip, r2, r2, lsl #1
    5080:	91310021 	teqls	r1, r1, lsr #32
    5084:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5088:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    508c:	00213182 	eoreq	r3, r1, r2, lsl #3
    5090:	b1109131 	tstlt	r0, r1, lsr r1
    5094:	31151050 	tstcc	r5, r0, asr r0
    5098:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    509c:	643f7000 	ldrtvs	r7, [pc], #-0	; 50a4 <patchGenfskRfe+0x110>
    50a0:	1031c052 	eorsne	ip, r1, r2, asr r0
    50a4:	31610631 	cmncc	r1, r1, lsr r6
    50a8:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    50ac:	1031c112 	eorsne	ip, r1, r2, lsl r1
    50b0:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    50b4:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    50b8:	70006442 	andvc	r6, r0, r2, asr #8
    50bc:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    50c0:	8220c088 	eorhi	ip, r0, #136	; 0x88
    50c4:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    50c8:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    50cc:	3001c041 	andcc	ip, r1, r1, asr #32
    50d0:	1a181418 	bne	60a138 <__ccfg+0x5ea190>
    50d4:	8230c089 	eorshi	ip, r0, #137	; 0x89
    50d8:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    50dc:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    50e0:	3001c041 	andcc	ip, r1, r1, asr #32
    50e4:	1a191419 	bne	64a150 <__ccfg+0x62a1a8>
    50e8:	9136643c 	teqls	r6, ip, lsr r4
    50ec:	9134b110 	teqls	r4, r0, lsl r1
    50f0:	b054b110 	subslt	fp, r4, r0, lsl r1
    50f4:	a0547100 	subsge	r7, r4, r0, lsl #2
    50f8:	80f0b064 	rscshi	fp, r0, r4, rrx
    50fc:	40af2200 	adcmi	r2, pc, r0, lsl #4
    5100:	90b01240 	adcsls	r1, r0, r0, asr #4
    5104:	8253b032 	subshi	fp, r3, #50	; 0x32
    5108:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    510c:	643f6485 	ldrtvs	r6, [pc], #-1157	; 5114 <patchGenfskRfe+0x180>
    5110:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    5114:	c1706442 	cmngt	r0, r2, asr #8
    5118:	c11168c2 	tstgt	r1, r2, asr #17
    511c:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    5120:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    5124:	9100c050 	qaddls	ip, r0, r0
    5128:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    512c:	16141615 			; <UNDEFINED> instruction: 0x16141615
    5130:	10531042 	subsne	r1, r3, r2, asr #32
    5134:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5138:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    513c:	31313981 	teqcc	r1, r1, lsl #19
    5140:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5144:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    5148:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    514c:	10731062 	rsbsne	r1, r3, r2, rrx
    5150:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    5154:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    5158:	101b3981 	andsne	r3, fp, r1, lsl #19
    515c:	c0e26572 	rscgt	r6, r2, r2, ror r5
    5160:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    5164:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    5168:	b0610002 	rsblt	r0, r1, r2
    516c:	91327100 	teqls	r2, r0, lsl #2
    5170:	a051b110 	subsge	fp, r1, r0, lsl r1
    5174:	7227b061 	eorvc	fp, r7, #97	; 0x61
    5178:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    517c:	12800000 	addne	r0, r0, #0
    5180:	b03290b0 	ldrhtlt	r9, [r2], -r0
    5184:	c0507000 	subsgt	r7, r0, r0
    5188:	72279100 	eorvc	r9, r7, #0, 2
    518c:	10629299 	mlsne	r2, r9, r2, r9
    5190:	c3f01073 	mvnsgt	r1, #115	; 0x73
    5194:	31218231 			; <UNDEFINED> instruction: 0x31218231
    5198:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    519c:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    51a0:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    51a4:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    51a8:	10531042 	subsne	r1, r3, r2, asr #32
    51ac:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    51b0:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    51b4:	31313981 	teqcc	r1, r1, lsl #19
    51b8:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    51bc:	b061a051 	rsblt	sl, r1, r1, asr r0
    51c0:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    51c4:	643f6918 	ldrtvs	r6, [pc], #-2328	; 51cc <patchGenfskRfe+0x238>
    51c8:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    51cc:	c1016442 	tstgt	r1, r2, asr #8
    51d0:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    51d4:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    51d8:	b1109135 	tstlt	r0, r5, lsr r1
    51dc:	64858253 	strvs	r8, [r5], #595	; 0x253
    51e0:	90b012c0 	adcsls	r1, r0, r0, asr #5
    51e4:	7000b032 	andvc	fp, r0, r2, lsr r0
    51e8:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    51ec:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    51f0:	c111c122 	tstgt	r1, r2, lsr #2
    51f4:	c0026442 	andgt	r6, r2, r2, asr #8
    51f8:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    51fc:	c331c062 	teqgt	r1, #98	; 0x62
    5200:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5204:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5208:	c111c302 	tstgt	r1, r2, lsl #6
    520c:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    5210:	64853953 	strvs	r3, [r5], #2387	; 0x953
    5214:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    5218:	41402211 	cmpmi	r0, r1, lsl r2
    521c:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    5220:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    5224:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5228:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    522c:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    5230:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    5234:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    5238:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    523c:	70006954 	andvc	r6, r0, r4, asr r9
    5240:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    5244:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    5248:	c011c252 	andsgt	ip, r1, r2, asr r2
    524c:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    5250:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    5254:	c101c002 	tstgt	r1, r2
    5258:	c0626442 	rsbgt	r6, r2, r2, asr #8
    525c:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    5260:	c101c122 	tstgt	r1, r2, lsr #2
    5264:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5268:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    526c:	c101c302 	tstgt	r1, r2, lsl #6
    5270:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    5274:	70006485 	andvc	r6, r0, r5, lsl #9
    5278:	7100b061 	tstvc	r0, r1, rrx
    527c:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    5280:	91334d7a 	teqls	r3, sl, ror sp
    5284:	7000b110 	andvc	fp, r0, r0, lsl r1
    5288:	b1109132 	tstlt	r0, r2, lsr r1
    528c:	70006972 	andvc	r6, r0, r2, ror r9
    5290:	7100b061 	tstvc	r0, r1, rrx
    5294:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    5298:	91324986 	teqls	r2, r6, lsl #19
    529c:	7000b110 	andvc	fp, r0, r0, lsl r1
    52a0:	b1109133 	tstlt	r0, r3, lsr r1
    52a4:	7000697e 	andvc	r6, r0, lr, ror r9
    52a8:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    52ac:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    52b0:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    52b4:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    52b8:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    52bc:	10541405 	subsne	r1, r4, r5, lsl #8
    52c0:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    52c4:	c0e67000 	rscgt	r7, r6, r0
    52c8:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    52cc:	10671416 	rsbne	r1, r7, r6, lsl r4
    52d0:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    52d4:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    52d8:	73067000 	movwvc	r7, #24576	; 0x6000
    52dc:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    52e0:	b050720e 	subslt	r7, r0, lr, lsl #4
    52e4:	80817100 	addhi	r7, r1, r0, lsl #2
    52e8:	a050b060 	subsge	fp, r0, r0, rrx
    52ec:	22418092 	subcs	r8, r1, #146	; 0x92
    52f0:	808045c3 	addhi	r4, r0, r3, asr #11
    52f4:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    52f8:	11011630 	tstne	r1, r0, lsr r6
    52fc:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    5300:	61d761d6 	ldrsbvs	r6, [r7, #22]
    5304:	61d961d8 	ldrsbvs	r6, [r9, #24]
    5308:	61db61da 	ldrsbvs	r6, [fp, #26]
    530c:	61de61dc 	ldrsbvs	r6, [lr, #28]
    5310:	61e261e0 	mvnvs	r6, r0, ror #3
    5314:	633661e4 	teqvs	r6, #228, 2	; 0x39
    5318:	80916339 	addshi	r6, r1, r9, lsr r3
    531c:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    5320:	80823121 	addhi	r3, r2, r1, lsr #2
    5324:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    5328:	11011632 	tstne	r1, r2, lsr r6
    532c:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    5330:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    5334:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5338:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    533c:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5340:	61e661e6 	mvnvs	r6, r6, ror #3
    5344:	61e661e6 	mvnvs	r6, r6, ror #3
    5348:	61e661e6 	mvnvs	r6, r6, ror #3
    534c:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    5350:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    5354:	61e6652a 	mvnvs	r6, sl, lsr #10
    5358:	61e66556 	mvnvs	r6, r6, asr r5
    535c:	61e66746 	mvnvs	r6, r6, asr #14
    5360:	90b01210 	adcsls	r1, r0, r0, lsl r2
    5364:	7306720e 	movwvc	r7, #25102	; 0x620e
    5368:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    536c:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    5370:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    5374:	c003c1d4 	ldrdgt	ip, [r3], -r4
    5378:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    537c:	91507840 	cmpls	r0, r0, asr #16
    5380:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    5384:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    5388:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    538c:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    5390:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    5394:	91907830 	orrsls	r7, r0, r0, lsr r8
    5398:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    539c:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    53a0:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    53a4:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    53a8:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    53ac:	a054a0e2 	subsge	sl, r4, r2, ror #1
    53b0:	225080f0 	subscs	r8, r0, #240	; 0xf0
    53b4:	80404615 	subhi	r4, r0, r5, lsl r6
    53b8:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    53bc:	a040620d 	subge	r6, r0, sp, lsl #4
    53c0:	318d822d 	orrcc	r8, sp, sp, lsr #4
    53c4:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    53c8:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    53cc:	821a1009 	andshi	r1, sl, #9
    53d0:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    53d4:	39808210 	stmibcc	r0, {r4, r9, pc}
    53d8:	100e0410 	andne	r0, lr, r0, lsl r4
    53dc:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    53e0:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    53e4:	cfe07229 	svcgt	0x00e07229
    53e8:	b013673c 	andslt	r6, r3, ip, lsr r7
    53ec:	66c8b003 	strbvs	fp, [r8], r3
    53f0:	b050b053 	subslt	fp, r0, r3, asr r0
    53f4:	b064b054 	rsblt	fp, r4, r4, asr r0
    53f8:	66a5b013 	ssatvs	fp, #6, r3
    53fc:	22e08210 	rsccs	r8, r0, #16, 4
    5400:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    5404:	80417100 	subhi	r7, r1, r0, lsl #2
    5408:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    540c:	221080f0 	andscs	r8, r0, #240	; 0xf0
    5410:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    5414:	b0644718 	rsblt	r4, r4, r8, lsl r7
    5418:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    541c:	66ceb063 	strbvs	fp, [lr], r3, rrx
    5420:	22e08210 	rsccs	r8, r0, #16, 4
    5424:	66704638 			; <UNDEFINED> instruction: 0x66704638
    5428:	b0646238 	rsblt	r6, r4, r8, lsr r2
    542c:	318f816f 	orrcc	r8, pc, pc, ror #2
    5430:	dfd03d8f 	svcle	0x00d03d8f
    5434:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    5438:	80417100 	subhi	r7, r1, r0, lsl #2
    543c:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5440:	80f0b064 	rscshi	fp, r0, r4, rrx
    5444:	42652250 	rsbmi	r2, r5, #80, 4
    5448:	8211b063 	andshi	fp, r1, #99	; 0x63
    544c:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    5450:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    5454:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    5458:	66704652 			; <UNDEFINED> instruction: 0x66704652
    545c:	81616252 	cmnhi	r1, r2, asr r2
    5460:	31818172 	orrcc	r8, r1, r2, ror r1
    5464:	31823d81 	orrcc	r3, r2, r1, lsl #27
    5468:	efc03d82 	svc	0x00c03d82
    546c:	930292f1 	movwls	r9, #8945	; 0x22f1
    5470:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    5474:	91c081b0 	strhls	r8, [r0, #16]
    5478:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    547c:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    5480:	0bf34e7f 	bleq	ffcd8e84 <_estack+0xdfcd3e84>
    5484:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    5488:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    548c:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    5490:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    5494:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    5498:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    549c:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    54a0:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    54a4:	1a1ba290 	bne	6edeec <__ccfg+0x6cdf44>
    54a8:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    54ac:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    54b0:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    54b4:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    54b8:	4aa21c9b 	bmi	fe88c72c <_estack+0xde88772c>
    54bc:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    54c0:	821010b2 	andshi	r1, r0, #178	; 0xb2
    54c4:	429d22d0 	addsmi	r2, sp, #208, 4
    54c8:	221080f0 	andscs	r8, r0, #240	; 0xf0
    54cc:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    54d0:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    54d4:	629410ab 	addsvs	r1, r4, #171	; 0xab
    54d8:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    54dc:	82307000 	eorshi	r7, r0, #0
    54e0:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    54e4:	7100b063 	tstvc	r0, r3, rrx
    54e8:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    54ec:	7000b0e0 	andvc	fp, r0, r0, ror #1
    54f0:	91c281b2 	strhls	r8, [r2, #18]
    54f4:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    54f8:	81511812 	cmphi	r1, r2, lsl r8
    54fc:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    5500:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5504:	4abf1c12 	bmi	fefcc554 <_estack+0xdefc7554>
    5508:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    550c:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    5510:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    5514:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    5518:	9162c812 	cmnls	r2, r2, lsl r8
    551c:	b0319172 	eorslt	r9, r1, r2, ror r1
    5520:	7000b0e1 	andvc	fp, r0, r1, ror #1
    5524:	c006c008 	andgt	ip, r6, r8
    5528:	9160c800 	cmnls	r0, r0, lsl #16
    552c:	70009170 	andvc	r9, r0, r0, ror r1
    5530:	81b08201 	lslshi	r8, r1, #4
    5534:	81d091c0 	bicshi	r9, r0, r0, asr #3
    5538:	81511810 	cmphi	r1, r0, lsl r8
    553c:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    5540:	824280e1 	subhi	r8, r2, #225	; 0xe1
    5544:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    5548:	4ae41c20 	bmi	ff90c5d0 <_estack+0xdf9075d0>
    554c:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    5550:	b03246e8 	eorslt	r4, r2, r8, ror #13
    5554:	dfa01005 	svcle	0x00a01005
    5558:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    555c:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    5560:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    5564:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    5568:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    556c:	42f61e01 	rscsmi	r1, r6, #1, 28
    5570:	c0101618 	andsgt	r1, r0, r8, lsl r6
    5574:	1c083010 	stcne	0, cr3, [r8], {16}
    5578:	10604704 	rsbne	r4, r0, r4, lsl #14
    557c:	10063c10 	andne	r3, r6, r0, lsl ip
    5580:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    5584:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    5588:	81719166 	cmnhi	r1, r6, ror #2
    558c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5590:	4b011c16 	blmi	4c5f0 <__ccfg+0x2c648>
    5594:	b0319176 	eorslt	r9, r1, r6, ror r1
    5598:	c008c006 	andgt	ip, r8, r6
    559c:	81617000 	cmnhi	r1, r0
    55a0:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    55a4:	39808240 	stmibcc	r0, {r6, r9, pc}
    55a8:	1cf11801 	ldclne	8, cr1, [r1], #4
    55ac:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    55b0:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    55b4:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    55b8:	ef90b033 	svc	0x0090b033
    55bc:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    55c0:	7000673c 	andvc	r6, r0, ip, lsr r7
    55c4:	b063a003 	rsblt	sl, r3, r3
    55c8:	b0efb064 	rsclt	fp, pc, r4, rrx
    55cc:	71006556 	tstvc	r0, r6, asr r5
    55d0:	22008040 	andcs	r8, r0, #64	; 0x40
    55d4:	b064472b 	rsblt	r4, r4, fp, lsr #14
    55d8:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    55dc:	80407100 	subhi	r7, r0, r0, lsl #2
    55e0:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    55e4:	b003b064 	andlt	fp, r3, r4, rrx
    55e8:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    55ec:	31828162 	orrcc	r8, r2, r2, ror #2
    55f0:	ef803d82 	svc	0x00803d82
    55f4:	930292f1 	movwls	r9, #8945	; 0x22f1
    55f8:	a003673c 	andge	r6, r3, ip, lsr r7
    55fc:	61e66556 	mvnvs	r6, r6, asr r5
    5600:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    5604:	b05061e6 	subslt	r6, r0, r6, ror #3
    5608:	61e67100 	mvnvs	r7, r0, lsl #2
    560c:	82d092e0 	sbcshi	r9, r0, #224, 4
    5610:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    5614:	7000b2c0 	andvc	fp, r0, r0, asr #5
    5618:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    561c:	b0304359 	eorslt	r4, r0, r9, asr r3
    5620:	3162c102 	cmncc	r2, r2, lsl #2
    5624:	80a0c001 	adchi	ip, r0, r1
    5628:	43521e00 	cmpmi	r2, #0, 28
    562c:	435322f0 	cmpmi	r3, #240, 4
    5630:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    5634:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    5638:	1a101020 	bne	4096c0 <__ccfg+0x3e9718>
    563c:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    5640:	16121611 			; <UNDEFINED> instruction: 0x16121611
    5644:	70006b54 	andvc	r6, r0, r4, asr fp

00005648 <patchImageGenfsk>:
    5648:	210004ad 	smlatbcs	r0, sp, r4, r0
    564c:	21000449 	tstcs	r0, r9, asr #8
    5650:	2100047d 	tstcs	r0, sp, ror r4
    5654:	21000481 	smlabbcs	r0, r1, r4, r0
    5658:	21000511 	tstcs	r0, r1, lsl r5
    565c:	21000591 			; <UNDEFINED> instruction: 0x21000591
    5660:	21000641 	tstcs	r0, r1, asr #12
    5664:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    5668:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    566c:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    5670:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    5674:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    5678:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    567c:	d00b079b 	mulle	fp, fp, r7
    5680:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    5684:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    5688:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    568c:	240f490e 	strcs	r4, [pc], #-2318	; 5694 <patchImageGenfsk+0x4c>
    5690:	43200224 			; <UNDEFINED> instruction: 0x43200224
    5694:	82c83160 	sbchi	r3, r8, #96, 2
    5698:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    569c:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    56a0:	2100026b 	tstcs	r0, fp, ror #4
    56a4:	00004ce5 	andeq	r4, r0, r5, ror #25
    56a8:	e0014809 	and	r4, r1, r9, lsl #16
    56ac:	0c004808 	stceq	8, cr4, [r0], {8}
    56b0:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    56b4:	2aff7822 	bcs	fffe3744 <_estack+0xdffde744>
    56b8:	7acad101 	bvc	ff2b9ac4 <_estack+0xdf2b4ac4>
    56bc:	31607022 	cmncc	r0, r2, lsr #32
    56c0:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    56c4:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    56c8:	40086200 	andmi	r6, r8, r0, lsl #4
    56cc:	210006a4 	smlatbcs	r0, r4, r6, r0
    56d0:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    56d4:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    56d8:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    56dc:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    56e0:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    56e4:	4a11d006 	bmi	479704 <__ccfg+0x45975c>
    56e8:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    56ec:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    56f0:	e000480f 	and	r4, r0, pc, lsl #16
    56f4:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    56f8:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    56fc:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    5700:	dcf92c00 	ldclle	12, cr2, [r9]
    5704:	200140e3 	andcs	r4, r1, r3, ror #1
    5708:	18180340 	ldmdane	r8, {r6, r8, r9}
    570c:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    5710:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    5714:	31802300 	orrcc	r2, r0, r0, lsl #6
    5718:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    571c:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    5720:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    5724:	316c4b04 	cmncc	ip, r4, lsl #22
    5728:	0000e7f6 	strdeq	lr, [r0], -r6
    572c:	00005c83 	andeq	r5, r0, r3, lsl #25
    5730:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    5734:	230d8300 	movwcs	r8, #54016	; 0xd300
    5738:	21000674 	tstcs	r0, r4, ror r6
    573c:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    5740:	6b714605 	blvs	1c56f5c <__ccfg+0x1c36fb4>
    5744:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    5748:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    574c:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    5750:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5754:	7b00d00f 	blvc	39798 <__ccfg+0x197f0>
    5758:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    575c:	4f152001 	svcmi	0x00152001
    5760:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5764:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    5768:	09c18800 	stmibeq	r1, {fp, pc}^
    576c:	d00407c9 	andle	r0, r4, r9, asr #15
    5770:	7ac0e016 	bvc	ff03d7d0 <_estack+0xdf0387d0>
    5774:	7b40e7f0 	blvc	103f73c <__ccfg+0x101f794>
    5778:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    577c:	61cc6374 	bicvs	r6, ip, r4, ror r3
    5780:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5784:	2001d00c 	andcs	sp, r1, ip
    5788:	6b310380 	blvs	c46590 <__ccfg+0xc265e8>
    578c:	d0012d00 	andle	r2, r1, r0, lsl #26
    5790:	e0004301 	and	r4, r0, r1, lsl #6
    5794:	46084381 	strmi	r4, [r8], -r1, lsl #7
    5798:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    579c:	63483940 	movtvs	r3, #35136	; 0x8940
    57a0:	47b82000 	ldrmi	r2, [r8, r0]!
    57a4:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    57a8:	21000280 	smlabbcs	r0, r0, r2, r0
    57ac:	21000088 	smlabbcs	r0, r8, r0, r0
    57b0:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    57b4:	00003f7b 	andeq	r3, r0, fp, ror pc
    57b8:	40044040 	andmi	r4, r4, r0, asr #32
    57bc:	4a22b510 	bmi	8b2c04 <__ccfg+0x892c5c>
    57c0:	61512100 	cmpvs	r1, r0, lsl #2
    57c4:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    57c8:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    57cc:	4b204921 	blmi	817c58 <__ccfg+0x7f7cb0>
    57d0:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    57d4:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    57d8:	e0004313 	and	r4, r0, r3, lsl r3
    57dc:	634b4393 	movtvs	r4, #45971	; 0xb393
    57e0:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    57e4:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    57e8:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    57ec:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    57f0:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    57f4:	09c08800 	stmibeq	r0, {fp, pc}^
    57f8:	d12207c0 	smlawtle	r2, r0, r7, r0
    57fc:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    5800:	d11e2800 	tstle	lr, r0, lsl #16
    5804:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    5808:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    580c:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    5810:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    5814:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    5818:	2008d213 	andcs	sp, r8, r3, lsl r2
    581c:	6a686160 	bvs	1a1dda4 <__ccfg+0x19fddfc>
    5820:	01400940 	cmpeq	r0, r0, asr #18
    5824:	4a0e6020 	bmi	39d8ac <__ccfg+0x37d904>
    5828:	62d12100 	sbcsvs	r2, r1, #0, 2
    582c:	21024a0d 	tstcs	r2, sp, lsl #20
    5830:	21016011 	tstcs	r1, r1, lsl r0
    5834:	60204308 	eorvs	r4, r0, r8, lsl #6
    5838:	43082103 	movwmi	r2, #33027	; 0x8103
    583c:	60206268 	eorvs	r6, r0, r8, ror #4
    5840:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5844:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5848:	40044000 	andmi	r4, r4, r0
    584c:	21000018 	tstcs	r0, r8, lsl r0
    5850:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5854:	21000280 	smlabbcs	r0, r0, r2, r0
    5858:	000068cf 	andeq	r6, r0, pc, asr #17
    585c:	21000068 	tstcs	r0, r8, rrx
    5860:	40041100 	andmi	r1, r4, r0, lsl #2
    5864:	e000e280 	and	lr, r0, r0, lsl #5
    5868:	00003bc3 	andeq	r3, r0, r3, asr #23
    586c:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5870:	2004d000 	andcs	sp, r4, r0
    5874:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5878:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    587c:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5880:	2080e000 	addcs	lr, r0, r0
    5884:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5888:	00004770 	andeq	r4, r0, r0, ror r7
    588c:	2100026b 	tstcs	r0, fp, ror #4
    5890:	40046058 	andmi	r6, r4, r8, asr r0
    5894:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5898:	bd019001 	stclt	0, cr9, [r1, #-4]
    589c:	00006fa5 	andeq	r6, r0, r5, lsr #31
    58a0:	00000000 	andeq	r0, r0, r0
    58a4:	00030001 	andeq	r0, r3, r1
    58a8:	001f000a 	andseq	r0, pc, sl
    58ac:	00eb0059 	rsceq	r0, fp, r9, asr r0
    58b0:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    58b4:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    58b8:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    58bc:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    58c0:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    58c4:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    58c8:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    58cc:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    58d0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

000058d4 <ratable>:
    58d4:	12c5000b 	sbcne	r0, r5, #11
    58d8:	2de00007 	stclcs	0, cr0, [r0, #28]!
    58dc:	8000000f 	andhi	r0, r0, pc
    58e0:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    58e4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    58e8:	6374206c 	cmnvs	r4, #108	; 0x6c
    58ec:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    58f0:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    58f4:	00006c6c 	andeq	r6, r0, ip, ror #24

000058f8 <plug_null>:
    58f8:	00002f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    58fc:	00002f3d 	andeq	r2, r0, sp, lsr pc
    5900:	00002f61 	andeq	r2, r0, r1, ror #30
    5904:	00002f85 	andeq	r2, r0, r5, lsl #31
    5908:	00002f8d 	andeq	r2, r0, sp, lsl #31
    590c:	00002f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    5910:	00000000 	andeq	r0, r0, r0
    5914:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <array.6534>:
	...

20000554 <discovery_wait_flag.6594>:
20000554:	00000000 	andeq	r0, r0, r0

20000558 <incoming_packet.6533>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <packet.6513>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <response_flag>:
word response_flag=0;
20000560:	00000000 	andeq	r0, r0, r0

20000564 <response_message_5.6532>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <user_provided_record.6595>:
	...

2000057c <setdel>:
	...

2000057e <urates>:
	...

20000580 <__PCB>:
20000580:	00000000 	andeq	r0, r0, r0

20000584 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000584:	00000000 	andeq	r0, r0, r0

20000588 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000588:	00000000 	andeq	r0, r0, r0

2000058c <mevent>:
2000058c:	00000000 	andeq	r0, r0, r0

20000590 <mnfree>:
20000590:	00000000 	andeq	r0, r0, r0

20000594 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000594:	00000000 	andeq	r0, r0, r0

20000598 <descriptors>:
	...

200005b8 <oqueues>:
	...

200005c4 <physical>:
	...

200005d0 <physinfo>:
	...

200005dc <plugins>:
	...

200005e8 <dopen>:
	...

200005e9 <dstat>:
	...

200005ea <bckf_timer>:
	...

200005ec <channel>:
200005ec:	00000000 	andeq	r0, r0, r0

200005f0 <drvprcs>:
static aword drvprcs, qevent;
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <dstate>:
200005f4:	00000000 	andeq	r0, r0, r0

200005f8 <paylen>:
static	int paylen = 0;			// Current TX payload length
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <physid>:
static word	physid,
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <qevent>:
static aword drvprcs, qevent;
20000600:	00000000 	andeq	r0, r0, r0

20000604 <rbuffl>:
20000604:	00000000 	andeq	r0, r0, r0

20000608 <rfTrim>:
	...

20000618 <rxstat>:
	...

20000624 <statid>:
	...

20000626 <txtries>:
	...

20000628 <ndsc_null>:
20000628:	00000000 	andeq	r0, r0, r0

2000062c <len.5699>:
2000062c:	00000000 	andeq	r0, r0, r0

20000630 <ptr.5698>:
20000630:	00000000 	andeq	r0, r0, r0

20000634 <__inpline>:
char *__inpline = NULL;
20000634:	00000000 	andeq	r0, r0, r0

20000638 <len.5700>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <ptr.5699>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <oscHfGlobals>:
	...

20000654 <powerQualGlobals>:
	...

2000065c <response_checker>:
	...

20000664 <reason>:
	...

20000696 <CHOICE>:
	...

20000698 <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
20000698:	00000000 	andeq	r0, r0, r0

2000069c <__pi_uart>:
	...

200006a4 <system_event_count>:
200006a4:	00000000 	andeq	r0, r0, r0

200006a8 <entropy>:
200006a8:	00000000 	andeq	r0, r0, r0

200006ac <__pi_mintk>:
	...

200006ae <__pi_old>:
	...

200006b0 <__pi_systat>:
	...

200006b8 <__pi_new>:
200006b8:	00000000 	andeq	r0, r0, r0

200006bc <__pi_utims>:
	...

200006cc <__pi_curr>:
200006cc:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006d0 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001cda 	ldrdeq	r1, [r0], -sl
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000a3 	andeq	r0, r0, r3, lsr #1
    return node->data_base.item_array[index];
      10:	0008430c 	andeq	r4, r8, ip, lsl #6
      14:	000e0800 	andeq	r0, lr, r0, lsl #16
      18:	00016000 	andeq	r6, r1, r0
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000043e 	andeq	r0, r0, lr, lsr r4
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000be1 	andeq	r0, r0, r1, ror #23
      38:	16015e02 	strne	r5, [r1], -r2, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	69060102 	stmdbvs	r6, {r1, r8}
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c670801 	stcleq	8, cr0, [r7], #-4
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a7705 	andeq	r7, sl, r5, lsl #14
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d64 	andeq	r0, r0, r4, ror #26
      5c:	09050402 	stmdbeq	r5, {r1, sl}
			nq++;
      60:	02000008 	andeq	r0, r0, #8
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	00080405 	andeq	r0, r8, r5, lsl #8
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000434 	andeq	r0, r0, r4, lsr r4
      78:	000e4705 	andeq	r4, lr, r5, lsl #14
      7c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	00030705 	andeq	r0, r3, r5, lsl #14
      88:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	07780700 	ldrbeq	r0, [r8, -r0, lsl #14]!
	if (baction == NULL)
      9c:	a7030000 	strge	r0, [r3, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0ac00700 	beq	ff001cac <_estack+0xdeffccac>
endthread
      a8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a203 	str	sl, [r9], -r3, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	000003a1 	andeq	r0, r0, r1, lsr #7
      d0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	00060d0b 	andeq	r0, r6, fp, lsl #26
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
      e0:	00000090 	muleq	r0, r0, r0
      e4:	c1050004 	tstgt	r5, r4
      e8:	03000008 	movweq	r0, #8
		packet[0] = NETWORK_ID;
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	040c0000 	streq	r0, [ip], #-0
		*p = message->tpe;p++;
      f4:	000b9c0d 	andeq	r9, fp, sp, lsl #24
      f8:	00110400 	andseq	r0, r1, r0, lsl #8
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		*p = message->sender_id;p++;
     100:	0008790e 	andeq	r7, r8, lr, lsl #18
		*p = message->receiver_id;p++;
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		switch(message->tpe) {
     108:	00010000 	andeq	r0, r1, r0
     10c:	00084e05 	andeq	r4, r8, r5, lsl #28
     110:	17160400 	ldrne	r0, [r6, -r0, lsl #8]
		tcv_endp(packet);
     114:	00000063 	andeq	r0, r0, r3, rrx
     118:	00025b05 	andeq	r5, r2, r5, lsl #22
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
}
     124:	00073605 	andeq	r3, r7, r5, lsl #12
		finish;
     128:	1b230400 	blne	8c1130 <__ccfg+0x8a1188>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
				*p = message->status;p++;
     130:	00033a0f 	andeq	r3, r3, pc, lsl #20
     134:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
				strncpy(p, message->record, sizeof(message->record));
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
				*p = message->padding;p++;
     13c:	0ec20b00 	vdiveq.f64	d16, d2, d0
				strncpy(p, message->record, sizeof(message->record));
     140:	36040000 	strcc	r0, [r4], -r0
				strncpy(p, message->record, sizeof(message->record));
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
     148:	5f100000 	svcpl	0x00100000
				strncpy(p, message->record, sizeof(message->record));
     14c:	3704006b 	strcc	r0, [r4, -fp, rrx]
				*p = message->record_index;p++;
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				*p = message->padding;
     154:	6e0b0400 	cfcpysvs	mvf0, mvf11
				break;
     158:	0400000b 	streq	r0, [r0], #-11
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
     164:	000043f3 	strdeq	r4, [r0], -r3
     168:	2c143704 	ldccs	7, cr3, [r4], {4}
bool init_node(struct Node* node){
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
    node->id  = 0;                  // default id value 0
     170:	0004680b 	andeq	r6, r4, fp, lsl #16
    node->index = 0;                // default entry count 0
     174:	1b370400 	blne	dc117c <__ccfg+0xda11d4>
    node->data_base.item_count = 0; // default no items in array
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
    DEBUG_PRINT("Error initializing node...\n");
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
     180:	0b380400 	bleq	e01188 <__ccfg+0xde11e0>
};
     184:	00000190 	muleq	r0, r0, r1
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
uint8_t generate_request_num(void){
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
    return (uint8_t) (rand() % 255);
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
     194:	0001a000 	andeq	sl, r1, r0
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
}
     19c:	00000000 	andeq	r0, r0, r0
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	000b890f 	andeq	r8, fp, pc, lsl #18
     1a4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	05780b00 	ldrbeq	r0, [r8, #-2816]!	; 0xfffff500
};
     1b0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
     1b8:	ca0b0000 	bgt	2c01c0 <__ccfg+0x2a0218>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	04000003 	streq	r0, [r0], #-3
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
        node->data_base.item_count -= 1;
     1c8:	0000036b 	andeq	r0, r0, fp, ror #6
};
     1cc:	2c074004 	stccs	0, cr4, [r7], {4}
fsm receiver(struct Node* node_db) {
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     1d4:	0006800b 	andeq	r8, r6, fp
     1d8:	07410400 	strbeq	r0, [r1, -r0, lsl #8]
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
     1e0:	09600b0c 	stmdbeq	r0!, {r2, r3, r8, r9, fp}^
     1e4:	42040000 	andmi	r0, r4, #0
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
     1ec:	da0b1000 	ble	2c41f4 <__ccfg+0x2a424c>
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	0400000a 	streq	r0, [r0], #-10
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	0000034e 	andeq	r0, r0, lr, asr #6
     200:	2c074404 	cfstrscs	mvf4, [r7], {4}
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     208:	0005810b 	andeq	r8, r5, fp, lsl #2
		switch (tpe){
     20c:	07450400 	strbeq	r0, [r5, -r0, lsl #8]
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
     214:	08fc0b1c 	ldmeq	ip!, {r2, r3, r4, r8, r9, fp}^
     218:	46040000 	strmi	r0, [r4], -r0
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
     220:	12002000 	andne	r2, r0, #0
     224:	00000032 	andeq	r0, r0, r2, lsr r0
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	4f040108 	svcmi	0x00040108
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	0d2b0b00 	vstmdbeq	fp!, {d0-d-1}
     234:	50040000 	andpl	r0, r4, r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	00026809 	andeq	r6, r2, r9, lsl #16
     23c:	230b0000 	movwcs	r0, #45056	; 0xb000
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	0400000c 	streq	r0, [r0], #-12
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	13800000 	orrne	r0, r0, #0
     24c:	00000dc4 	andeq	r0, r0, r4, asr #27
				if (discovery_request_message->gid == node_db->gid){
     250:	0c0a5304 	stceq	3, cr5, [sl], {4}
     254:	00000001 	andeq	r0, r0, r1
					response_message_0->gid = discovery_request_message->gid;
     258:	0eb51301 	cdpeq	3, 11, cr1, cr5, cr1, {0}
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	56040000 	strpl	r0, [r4], -r0
					response_message_0->request_number = discovery_request_message->request_number;
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
					response_message_0->sender_id = node_db->id;
     264:	00010400 	andeq	r0, r1, r0, lsl #8
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
					call sender(response_message_0, done_case);
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
     274:	001f0000 	andseq	r0, pc, r0
     278:	000a2212 	andeq	r2, sl, r2, lsl r2
     27c:	04019000 	streq	r9, [r1], #-0
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
     284:	c20b0000 	andgt	r0, fp, #0
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	0400000e 	streq	r0, [r0], #-14
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	0b000000 	bleq	298 <receiver+0xc8>
     294:	00000590 	muleq	r0, r0, r5
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     298:	2c066404 	cfstrscs	mvf6, [r6], {4}
     29c:	04000000 	streq	r0, [r0], #-0
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	00030f0b 	andeq	r0, r3, fp, lsl #30
     2a4:	09660400 	stmdbeq	r6!, {sl}^
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
     2ac:	00320b08 	eorseq	r0, r2, r8, lsl #22
     2b0:	67040000 	strvs	r0, [r4, -r0]
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
     2b8:	11008800 	tstne	r0, r0, lsl #16
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
     2c4:	02d10000 	sbcseq	r0, r1, #0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	25090000 	strcs	r0, [r9, #-0]
     2cc:	1f000000 	svcne	0x00000000
					node_db->index+=1;
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
		tcv_endp(incoming_packet);
     2d4:	14000002 	strne	r0, [r0], #-2
     2d8:	0cc30f01 	stcleq	15, cr0, [r3], {1}
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	04080000 	streq	r0, [r8], #-0
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
		proceed receiving;
     2e4:	d50b0000 	strle	r0, [fp, #-0]
     2e8:	0400000c 	streq	r0, [r0], #-12
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
     2f0:	0b000000 	bleq	2f8 <receiver+0x128>
		proceed receiving;
     2f4:	00001d9e 	muleq	r0, lr, sp
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	2c067c04 	stccs	12, cr7, [r6], {4}
     2fc:	04000000 	streq	r0, [r0], #-0
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
     304:	0f000000 	svceq	0x00000000
     308:	00000460 	andeq	r0, r0, r0, ror #8
		proceed receiving;
     30c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	0000044a 	andeq	r0, r0, sl, asr #8
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
     318:	0112bb04 	tsteq	r2, r4, lsl #22
     31c:	00000003 	andeq	r0, r0, r3
		proceed receiving;
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	2c07bc04 	stccs	12, cr11, [r7], {4}
     328:	04000000 	streq	r0, [r0], #-0
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
     330:	2c07bd04 	stccs	13, cr11, [r7], {4}
		proceed receiving;
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	0001bb0b 	andeq	fp, r1, fp, lsl #22
     33c:	09be0400 	ldmibeq	lr!, {sl}
     340:	0000004e 	andeq	r0, r0, lr, asr #32
     344:	08650b0c 	stmdaeq	r5!, {r2, r3, r8, r9, fp}^
		proceed receiving;
     348:	bf040000 	svclt	0x00040000
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
     350:	5f100e00 	svcpl	0x00100e00
		proceed receiving;
     354:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
}
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     364:	2c07c104 	stfcsd	f4, [r7], {4}
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     36c:	0003140b 	andeq	r1, r3, fp, lsl #8
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     370:	0ac80400 	beq	ff201378 <_estack+0xdf1fc378>
     374:	000000f2 	strdeq	r0, [r0], -r2
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     378:	1d2d0b1c 	vpushne	{d0-d13}
     37c:	ca040000 	bgt	100384 <__ccfg+0xe03dc>
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
     384:	f40b2000 	vst4.8	{d2-d5}, [fp], r0
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
     394:	00000ee2 	andeq	r0, r0, r2, ror #29
     398:	1f0dcf04 	svcne	0x000dcf04
     39c:	28000006 	stmdacs	r0, {r1, r2}
		strncpy(response_message->record, rec, 20);
     3a0:	001ce20b 	andseq	lr, ip, fp, lsl #4
     3a4:	09d00400 	ldmibeq	r0, {sl}^
					call sender(response_message_4, done_case);
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x1b8>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b0:	d3040062 	movwle	r0, #16482	; 0x4062
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
     3bc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	10380000 	eorsne	r0, r8, r0
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
     3d4:	000f190b 	andeq	r1, pc, fp, lsl #18
     3d8:	11d80400 	bicsne	r0, r8, r0, lsl #8
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
     3e0:	0e620b40 	vnmuleq.f64	d16, d2, d0
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
     3ec:	5f104300 	svcpl	0x00104300
    return node->data_base.item_array[index];
     3f0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
     3fc:	00000b80 	andeq	r0, r0, r0, lsl #23
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	2c07df04 	stccs	15, cr13, [r7], {4}
    return node->data_base.item_array[index];
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	0004940b 	andeq	r9, r4, fp, lsl #8
     40c:	0ae00400 	beq	ff801414 <_estack+0xdf7fc414>
     410:	00000078 	andeq	r0, r0, r8, ror r0
		strncpy(response_message->record, rec, 20);
     414:	47510b50 			; <UNDEFINED> instruction: 0x47510b50
     418:	e3040000 	movw	r0, #16384	; 0x4000
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
     420:	a60b5400 	strge	r5, [fp], -r0, lsl #8
     424:	0400000b 	streq	r0, [r0], #-11
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
     430:	00000a2a 	andeq	r0, r0, sl, lsr #20
     434:	e60ee904 	str	lr, [lr], -r4, lsl #18
				if(!response_flag){
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
     43c:	000e950b 	andeq	r9, lr, fp, lsl #10
					response_flag=1;
     440:	07ea0400 	strbeq	r0, [sl, r0, lsl #8]!
					trigger(&response_flag);
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
				switch(response_message_5->status){
     448:	01150064 	tsteq	r5, r4, rrx
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
     450:	00000469 	andeq	r0, r0, r9, ror #8
     454:	00046916 	andeq	r6, r4, r6, lsl r9
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
     460:	16000005 	strne	r0, [r0], -r5
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
     46c:	17000004 	strne	r0, [r0, -r4]
     470:	00000469 	andeq	r0, r0, r9, ror #8
     474:	000d5d18 	andeq	r5, sp, r8, lsl sp
     478:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
     480:	19000005 	stmdbne	r0, {r0, r2}
     484:	00000910 	andeq	r0, r0, r0, lsl r9
     488:	07026704 	streq	r6, [r2, -r4, lsl #14]
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
     490:	07ee1900 	strbeq	r1, [lr, r0, lsl #18]!
     494:	6c040000 	stcvs	0, cr0, [r4], {-0}
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     4a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
						if (response_checker[0] == response_message_5->request_number){
     4ac:	0f081908 	svceq	0x00081908
     4b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
							switch(response_checker[1]){
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4bc:	0000058b 	andeq	r0, r0, fp, lsl #11
     4c0:	07026e04 	streq	r6, [r2, -r4, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
									proceed response_1_create;
     4c8:	04e01910 	strbteq	r1, [r0], #2320	; 0x910
						proceed response_2;
     4cc:	6f040000 	svcvs	0x00040000
									proceed response_1_delete;
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
									proceed response_1_retrieve;
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
						proceed response_2;
     4d8:	00000e75 	andeq	r0, r0, r5, ror lr
						proceed response_3;
     4dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
						proceed response_4;
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	429f1930 	addsmi	r1, pc, #48, 18	; 0xc0000
     4e8:	73040000 	movwvc	r0, #16384	; 0x4000
}
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     4f4:	00000796 	muleq	r0, r6, r7
     4f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
bool delete_all(struct Node *node){
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	08901938 	ldmeq	r0, {r3, r4, r5, r8, fp, ip}
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	77040000 	strvc	r0, [r4, -r0]
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
            node->data_base.item_array[i].timestamp = 0;
     510:	00000363 	andeq	r0, r0, r3, ror #6
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	13027a04 	movwne	r7, #10756	; 0x2a04
    node->data_base.item_count = 0;
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
}
     51c:	041e1940 	ldreq	r1, [lr], #-2368	; 0xfffff6c0
        return true;
     520:	7b040000 	blvc	100528 <__ccfg+0xe0580>
fsm root {
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     52c:	00000615 	andeq	r0, r0, r5, lsl r6
     530:	13027c04 	movwne	r7, #11268	; 0x2c04
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
     538:	082b1948 	stmdaeq	fp!, {r3, r6, r8, fp, ip}
     53c:	7d040000 	stcvc	0, cr0, [r4, #-0]
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
     548:	00000b66 	andeq	r0, r0, r6, ror #22
     54c:	07028004 	streq	r8, [r2, -r4]
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
     554:	0c5f1950 	mrrceq	9, 5, r1, pc, cr0	; <UNPREDICTABLE>
     558:	81040000 	mrshi	r0, (UNDEF: 4)
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     564:	00000c79 	andeq	r0, r0, r9, ror ip
     568:	0702a404 	streq	sl, [r2, -r4, lsl #8]
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a221a58 	beq	886ed8 <__ccfg+0x866f30>
     574:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
     580:	0006ba1a 	andeq	fp, r6, sl, lsl sl
		init_node(node_db);
     584:	02a90400 	adceq	r0, r9, #0, 8
		phys_cc1350(0, MAX_PKT_LEN);
     588:	00027812 	andeq	r7, r2, r2, lsl r8
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
		tcv_plug (0, &plug_null);
     590:	000006a1 	andeq	r0, r0, r1, lsr #13
     594:	0c02ad04 	stceq	13, cr10, [r2], {4}
		sfd = tcv_open (WNONE, 0, 0);
     598:	000008ec 	andeq	r0, r0, ip, ror #17
     59c:	e11a02dc 			; <UNDEFINED> instruction: 0xe11a02dc
     5a0:	0400000c 	streq	r0, [r0], #-12
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
     5a8:	e0000006 	and	r0, r0, r6
			diag("Cannot open tcv interface");
     5ac:	0ab21a02 	beq	fec86dbc <_estack+0xdec81dbc>
     5b0:	b4040000 	strlt	r0, [r4], #-0
			halt();
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b8:	02ec0000 	rsceq	r0, ip, #0
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
		runfsm receiver(node_db);
     5c0:	02000005 	andeq	r0, r0, #5
     5c4:	0c700801 	ldcleq	8, cr0, [r0], #-4
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	c3170000 	tstgt	r7, #0
     5cc:	11000005 	tstne	r0, r5
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
		switch(CHOICE) {
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
     600:	00840115 	addeq	r0, r4, r5, lsl r1
     604:	061f0000 	ldreq	r0, [pc], -r0
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     60c:	16000004 	strne	r0, [r0], -r4
     610:	000000f2 	strdeq	r0, [r0], -r2
     614:	00008416 	andeq	r8, r0, r6, lsl r4
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
				proceed menu;
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
     620:	00060004 	andeq	r0, r6, r4
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     628:	3a000000 	bcc	630 <root+0x10c>
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	16000006 	strne	r0, [r0], -r6
     630:	00000469 	andeq	r0, r0, r9, ror #8
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
		DEBUG_PRINT("setting node group ID");
     638:	04110000 	ldreq	r0, [r1], #-0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
     640:	00004708 	andeq	r4, r0, r8, lsl #14
		proceed menu;
     644:	00065000 	andeq	r5, r6, r0
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
     64c:	00020000 	andeq	r0, r2, r0
		if(node_db->id < 1 || node_db->id > 25){
     650:	00004708 	andeq	r4, r0, r8, lsl #14
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	00066000 	andeq	r6, r6, r0
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
		if(node_db->id < 1 || node_db->id > 25){
     65c:	00000000 	andeq	r0, r0, r0
     660:	00048104 	andeq	r8, r4, r4, lsl #2
     664:	01240400 			; <UNDEFINED> instruction: 0x01240400
			strncpy(reason, "Out of Range", 50);
     668:	00030718 	andeq	r0, r3, r8, lsl r7
     66c:	0cdb1b00 	vldmiaeq	fp, {d17-d16}
			proceed invalid_node_id;
     670:	040c0000 	streq	r0, [ip], #-0
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
				strncpy(reason, "ID is already in use", 50);
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000ec2 	andeq	r0, r0, r2, asr #29
			if(node_db->id == node_db->nnodes[i]){
     680:	11012a04 	tstne	r1, r4, lsl #20
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
     688:	0bda1900 	bleq	ff686a90 <_estack+0xdf681a90>
				strncpy(reason, "ID is already in use", 50);
     68c:	2b040000 	blcs	100694 <__ccfg+0xe06ec>
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
				proceed invalid_node_id;
     698:	0000077e 	andeq	r0, r0, lr, ror r7
		for(int i = 0; i < 25; i++){
     69c:	0b012c04 	bleq	4b6b4 <__ccfg+0x2b70c>
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
		proceed menu;
     6a4:	04110008 	ldreq	r0, [r1], #-8
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
     6b0:	ed1b0000 	ldc	0, cr0, [fp, #-0]
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     6b8:	08014404 	stmdaeq	r1, {r2, sl, lr}
		proceed get_new_node_id;
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
     6c0:	00164919 	andseq	r4, r6, r9, lsl r9
		if (!clear_node_neighbour_array(node_db)){
     6c4:	01450400 	cmpeq	r5, r0, lsl #8
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	3d190000 	ldccc	0, cr0, [r9, #-0]
     6d0:	04000008 	streq	r0, [r0], #-8
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
			proceed error;
     6d8:	06000006 	streq	r0, [r0], -r6
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	0014fb19 	andseq	pc, r4, r9, lsl fp	; <UNPREDICTABLE>
     6e0:	01470400 	cmpeq	r7, r0, lsl #8
		request_packet->gid = node_db->gid;
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
		request_packet->request_number = generate_request_num();
     6f0:	000006fb 	strdeq	r0, [r0], -fp
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
		call sender(request_packet, wait_discovery);
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
     6fc:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
		request_packet->receiver_id=0;
     700:	00081007 	andeq	r1, r8, r7
		call sender(request_packet, wait_discovery);
     704:	0e681900 	vmuleq.f16	s3, s16, s0	; <UNPREDICTABLE>
     708:	87040000 	strhi	r0, [r4, -r0]
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
			release;
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
				proceed get_new_node_id;
     714:	00000ce9 	andeq	r0, r0, r9, ror #25
				proceed clear_neighbour_array;
     718:	12028804 	andne	r8, r2, #4, 16	; 0x40000
				proceed create_proto_start;
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
				proceed start_delete_proto;
     720:	044b1904 	strbeq	r1, [fp], #-2308	; 0xfffff6fc
				proceed retrieve_proto;
     724:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
				proceed display_db;
     728:	08101002 	ldmdaeq	r0, {r1, ip}
				proceed del_local;
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
		if (discovery_wait_flag == 0){
     730:	00000b4f 	andeq	r0, r0, pc, asr #22
			discovery_wait_flag=1;
     734:	17028a04 	strne	r8, [r2, -r4, lsl #20]
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
			delay(3000, find_proto_start);
     73c:	07f51924 	ldrbeq	r1, [r5, r4, lsr #18]!
     740:	8b040000 	blhi	100748 <__ccfg+0xe07a0>
		if (discovery_wait_flag == 1){
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
			discovery_wait_flag=0;
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     74c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
			delay(3000, display_neighbour_nodes);
     750:	2c028c04 	stccs	12, cr8, [r2], {4}
     754:	00000071 	andeq	r0, r0, r1, ror r0
     758:	00761950 	rsbseq	r1, r6, r0, asr r9
     75c:	8d040000 	stchi	0, cr0, [r4, #-0]
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     768:	00000645 	andeq	r0, r0, r5, asr #12
     76c:	16028e04 	strne	r8, [r2], -r4, lsl #28
     770:	000000e6 	andeq	r0, r0, r6, ror #1
     774:	0cf61968 			; <UNDEFINED> instruction: 0x0cf61968
     778:	8f040000 	svchi	0x00040000
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     784:	00000068 	andeq	r0, r0, r8, rrx
     788:	16029004 	strne	r9, [r2], -r4
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
     790:	0b761978 	bleq	1d86d78 <__ccfg+0x1d66dd0>
     794:	91040000 	mrsls	r0, (UNDEF: 4)
     798:	08201002 	stmdaeq	r0!, {r1, ip}
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	00000428 	andeq	r0, r0, r8, lsr #8
     7a4:	10029204 	andne	r9, r2, r4, lsl #4
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     7ac:	0c991988 			; <UNDEFINED> instruction: 0x0c991988
			if (node_db->nnodes[i]=='\0') break;
     7b0:	93040000 	movwls	r0, #16384	; 0x4000
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
		proceed menu;
     7bc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     7c0:	16029404 	strne	r9, [r2], -r4, lsl #8
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
     7c8:	06ab19a4 	strteq	r1, [fp], r4, lsr #19
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	95040000 	strls	r0, [r4, #-0]
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
			strncpy(reason, "Error: improper ID", 50);
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     7d8:	000005c7 	andeq	r0, r0, r7, asr #11
     7dc:	16029604 	strne	r9, [r2], -r4, lsl #12
			proceed error;
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	085619b4 	ldmdaeq	r6, {r2, r4, r5, r7, r8, fp, ip}^
     7e8:	97040000 	strls	r0, [r4, -r0]
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     7f4:	00000634 	andeq	r0, r0, r4, lsr r6
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	16029804 	strne	r9, [r2], -r4, lsl #16
		create_message->tpe = CREATE_RECORD;
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	090e19c4 	stmdbeq	lr, {r2, r6, r7, r8, fp, ip}
		create_message->gid = node_db->gid;
     804:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
		create_message->tpe = CREATE_RECORD;
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
		create_message->request_number = generate_request_num();
     80c:	00cc0000 	sbceq	r0, ip, r0
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
		create_message->sender_id = node_db->id;
     814:	00082000 	andeq	r2, r8, r0
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
     81c:	00190000 	andseq	r0, r9, r0
		strncpy(create_message->record, user_provided_record, 20);
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
     824:	00083000 	andeq	r3, r8, r0
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
		response_checker[0] = create_message->request_number;
     82c:	00070000 	andeq	r0, r7, r0
		call sender(&create_message, wait);
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
		response_checker[1] = create_message->tpe;
     834:	00084000 	andeq	r4, r8, r0
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
		call sender(&create_message, wait);
     83c:	00170000 	andseq	r0, r7, r0
     840:	9e04f01c 	mcrls	0, 0, pc, cr4, cr12, {0}	; <UNPREDICTABLE>
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
     848:	d3190000 	tstle	r9, #0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	04000003 	streq	r0, [r0], #-3
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	00000008 	andeq	r0, r0, r8
     858:	000f1019 	andeq	r1, pc, r9, lsl r0	; <UNPREDICTABLE>
			strncpy(reason, "Error: improper node ID", 50);
     85c:	02a20400 	adceq	r0, r2, #0, 8
     860:	00087718 	andeq	r7, r8, r8, lsl r7
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
			proceed error;
     868:	00000301 	andeq	r0, r0, r1, lsl #6
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	00000877 	andeq	r0, r0, r7, ror r8
     870:	00002509 	andeq	r2, r0, r9, lsl #10
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     878:	00000025 	andeq	r0, r0, r5, lsr #32
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	00002509 	andeq	r2, r0, r9, lsl #10
		delete_record->tpe = DELETE_RECORD;
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
		delete_record->gid = node_db->gid;
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
		delete_record->tpe = DELETE_RECORD;
     890:	0d5d1e00 	ldcleq	14, cr1, [sp, #-0]
		delete_record->request_number = generate_request_num();
     894:	9a040000 	bls	10089c <__ccfg+0xe08f4>
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
		delete_record->sender_id = node_db->id;
     89c:	5e1e0000 	cdppl	0, 1, cr0, cr14, cr0, {0}
     8a0:	0400000b 	streq	r0, [r0], #-11
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	00000008 	andeq	r0, r0, r8
		response_checker[0] = delete_record->request_number;
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
		call sender(&delete_record, wait);
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
     8b8:	00180000 	andseq	r0, r8, r0
     8bc:	000ec81f 	andeq	ip, lr, pc, lsl r8
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	00000004 	andeq	r0, r0, r4
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
     8d8:	04110000 	ldreq	r0, [r1], #-0
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
			proceed error;
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
     8e8:	00000000 	andeq	r0, r0, r0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
     8f0:	04110000 	ldreq	r0, [r1], #-0
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
     8f8:	00066008 	andeq	r6, r6, r8
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
		retrieve_record->gid = node_db->gid;
     904:	00020000 	andeq	r0, r2, r0
     908:	000ace21 	andeq	ip, sl, r1, lsr #28
     90c:	03330400 	teqeq	r3, #0, 8
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	00046917 	andeq	r6, r4, r7, lsl r9
		retrieve_record->request_number = generate_request_num();
     914:	21010100 	mrscs	r0, (UNDEF: 17)
     918:	00000ac7 	andeq	r0, r0, r7, asr #21
		retrieve_record->sender_id = node_db->id;
     91c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
		response_checker[0] = retrieve_record->request_number;
     920:	0000046f 	andeq	r0, r0, pc, ror #8
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	1a050101 	bne	140d30 <__ccfg+0x120d88>
		retrieve_record->record_index = user_provided_index;
     928:	0600002a 	streq	r0, [r0], -sl, lsr #32
		call sender(&retrieve_record, wait);
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
		response_checker[1] = retrieve_record->tpe;
     930:	10050000 	andne	r0, r5, r0
     934:	0600002e 	streq	r0, [r0], -lr, lsr #32
		call sender(&retrieve_record, wait);
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
     93c:	b2050000 	andlt	r0, r5, #0
     940:	06000029 	streq	r0, [r0], -r9, lsr #32
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	2a050000 	bcs	140950 <__ccfg+0x1209a8>
     94c:	07000005 	streq	r0, [r0, -r5]
		if(node_db->data_base.item_count != 0){
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
     954:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
		proceed menu;
     958:	0700000b 	streq	r0, [r0, -fp]
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
		delete_all(node_db);
     960:	f9050000 			; <UNDEFINED> instruction: 0xf9050000
     964:	08000028 	stmdaeq	r0, {r3, r5}
		proceed menu;
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
		delay(3000, timeout);
     96c:	62170000 	andsvs	r0, r7, #0
     970:	22000009 	andcs	r0, r0, #9
     974:	00000962 	andeq	r0, r0, r2, ror #18
		when(&response_flag, menu);
     978:	001dc005 	andseq	ip, sp, r5
     97c:	112b0800 			; <UNDEFINED> instruction: 0x112b0800
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	00000926 	andeq	r0, r0, r6, lsr #18
     984:	00097822 	andeq	r7, r9, r2, lsr #16
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	294b0500 	stmdbcs	fp, {r8, sl}^
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	2c080000 	stccs	0, cr0, [r8], {-0}
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
     998:	52050000 	andpl	r0, r5, #0
     99c:	08000006 	stmdaeq	r0, {r1, r2}
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
     9a4:	c0050000 	andgt	r0, r5, r0
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
     9b0:	04110000 	ldreq	r0, [r1], #-0
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	3208080a 	andcc	r0, r8, #655360	; 0xa0000
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	002b2300 	eoreq	r2, fp, r0, lsl #6
     9c4:	34080000 	strcc	r0, [r8], #-0
		proceed menu;
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
     9d0:	06582300 	ldrbeq	r2, [r8], -r0, lsl #6
     9d4:	35080000 	strcc	r0, [r8, #-0]
		proceed menu;
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
}
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
     9e0:	02ef2300 	rsceq	r2, pc, #0, 6
     9e4:	36080000 	strcc	r0, [r8], -r0
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     9f0:	06c32300 	strbeq	r2, [r3], r0, lsl #6
     9f4:	37080000 	strcc	r0, [r8, -r0]
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     a00:	0aab2300 	beq	feac9608 <_estack+0xdeac4608>
     a04:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
     a10:	06670b00 	strbteq	r0, [r7], -r0, lsl #22
     a14:	3a080000 	bcc	200a1c <__ccfg+0x1e0a74>
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
     a1c:	070b0100 	streq	r0, [fp, -r0, lsl #2]
     a20:	08000009 	stmdaeq	r0, {r0, r3}
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
     a2c:	00000f38 	andeq	r0, r0, r8, lsr pc
static void devinit_uart (int devnum) {
     a30:	78033d08 	stmdavc	r3, {r3, r8, sl, fp, ip, sp}
	adddevfunc (ioreq_uart_a, devnum);
     a34:	03000009 	movweq	r0, #9
     a38:	00091f0b 	andeq	r1, r9, fp, lsl #30
void udelay (volatile word n) {
     a3c:	083f0800 	ldmdaeq	pc!, {fp}	; <UNPREDICTABLE>
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
	while (n) {
     a44:	25050004 	strcs	r0, [r5, #-4]
     a48:	08000003 	stmdaeq	r0, {r0, r1}
}
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
	while (n--);
     a50:	46220000 	strtmi	r0, [r2], -r0
     a54:	2400000a 	strcs	r0, [r0], #-10
     a58:	000006ca 	andeq	r0, r0, sl, asr #13
		n--;
     a5c:	521a4308 	andspl	r4, sl, #8, 6	; 0x20000000
     a60:	0100000a 	tsteq	r0, sl
     a64:	01972401 	orrseq	r2, r7, r1, lsl #8
void mdelay (volatile word n) {
     a68:	45080000 	strmi	r0, [r8, #-0]
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
	while (n) {
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
     a74:	0000032e 	andeq	r0, r0, lr, lsr #6
}
     a78:	bd1e4508 	cfldr32lt	mvfx4, [lr, #-32]	; 0xffffffe0
		udelay (999);
     a7c:	01000005 	tsteq	r0, r5
     a80:	09080a01 	stmdbeq	r8, {r0, r9, fp}
		n--;
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
     a88:	d60b0000 	strle	r0, [fp], -r0
     a8c:	0900000c 	stmdbeq	r0, {r2, r3}
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
void __pi_ondomain (lword d) {
     a94:	0b000000 	bleq	a9c <__pi_ondomain+0x8>
     a98:	00001073 	andeq	r1, r0, r3, ror r0
		if (__pi_systat.effpdm > 1)
     a9c:	62079109 	andvs	r9, r7, #1073741826	; 0x40000002
     aa0:	04000009 	streq	r0, [r0], #-9
			__pi_systat.effpdm = 1;
     aa4:	0001bc0b 	andeq	fp, r1, fp, lsl #24
	PRCMPowerDomainOn (d);
     aa8:	10920900 	addsne	r0, r2, r0, lsl #18
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
     ab0:	ca050006 	bgt	140ad0 <__ccfg+0x120b28>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	0900000c 	stmdbeq	r0, {r2, r3}
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
     abc:	b2080000 	andlt	r0, r8, #0
	__pi_systat.ondmns |= d;
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
     ac4:	2500000a 	strcs	r0, [r0, #-10]
}
     ac8:	09492400 	stmdbeq	r9, {sl, sp}^
     acc:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
void __pi_offdomain (lword d) {
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
	PRCMPowerDomainOff (d);
     ad8:	09910a01 	ldmibeq	r1, {r0, r9, fp}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
     ae0:	00092623 	andeq	r2, r9, r3, lsr #12
     ae4:	07930a00 	ldreq	r0, [r3, r0, lsl #20]
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	0005d823 	andeq	sp, r5, r3, lsr #16
     af4:	03940a00 	orrseq	r0, r4, #0, 20
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	00000978 	andeq	r0, r0, r8, ror r9
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
	__pi_systat.ondmns &= ~d;
     b00:	0ab70500 	beq	fedc1f08 <_estack+0xdedbcf08>
     b04:	960a0000 	strls	r0, [sl], -r0
}
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
void __pi_syserror (word ec, const char *m) {
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
	diag ("SYSERR: %x, %s", ec, m);
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     b18:	2500000b 	strcs	r0, [r0, #-11]
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
     b20:	bd240000 	stclt	0, cr0, [r4, #-0]
     b24:	0a000003 	beq	b38 <__pi_syserror+0x28>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
		all_leds_blink;
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
     b40:	00061a24 	andeq	r1, r6, r4, lsr #20
     b44:	13060b00 	movwne	r0, #27392	; 0x6b00
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
     b4c:	e9240101 	stmdb	r4!, {r0, r8}
     b50:	09000008 	stmdbeq	r0, {r3}
	while (1) {
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
     b5c:	000c7e04 	andeq	r7, ip, r4, lsl #28
     b60:	016e0c00 	cmneq	lr, r0, lsl #24
void tci_run_delay_timer () {
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
	setdel = __pi_mintk - __pi_old;
     b68:	6f041100 	svcvs	0x00041100
     b6c:	2000000b 	andcs	r0, r0, fp
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	2100000b 	tstcs	r0, fp
	sti_tim;
     b8c:	000009f2 	strdeq	r0, [r0], -r2
}
     b90:	13017f0c 	movwne	r7, #7948	; 0x1f0c
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
     b98:	a9210101 	stmdbge	r1!, {r0, r8}
     b9c:	0c000003 	stceq	0, cr0, [r0], {3}
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
	cli_aux;
     ba4:	01000009 	tsteq	r0, r9
     ba8:	0d040a01 	vstreq	s0, [r4, #-4]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
     bb0:	c20b0000 	andgt	r0, fp, #0
     bb4:	0d000001 	stceq	0, cr0, [r0, #-4]
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
	sti_aux;
     bbc:	0b000000 	bleq	bc4 <tci_run_auxiliary_timer+0x20>
}
     bc0:	00000cae 	andeq	r0, r0, lr, lsr #25
     bc4:	6203100d 	andvs	r1, r3, #13
     bc8:	02000009 	andeq	r0, r0, #9
void AONRTCIntHandler () {
     bcc:	0d770500 	cfldr64eq	mvdx0, [r7, #-0]
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	110d0000 	mrsne	r0, (UNDEF: 13)
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	0d200a00 	vstmdbeq	r0!, {s0-s-1}
		if (__pi_utims [0] == 0)
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
     be0:	c40b0000 	strgt	r0, [fp], #-0
		if (*(__pi_utims [0])) {
     be4:	0d000004 	stceq	0, cr0, [r0, #-16]
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
			(*(__pi_utims [0]))--;
     bec:	0b000000 	bleq	bf4 <AONRTCIntHandler+0x28>
		if (__pi_utims [1] == 0)
     bf0:	00000917 	andeq	r0, r0, r7, lsl r9
		if (*(__pi_utims [1])) {
     bf4:	8008180d 	andhi	r1, r8, sp, lsl #16
			aux_timer_inactive = 0;
     bf8:	0400000c 	streq	r0, [r0], #-12
			(*(__pi_utims [1]))--;
     bfc:	000bd20b 	andeq	sp, fp, fp, lsl #4
		if (__pi_utims [2] == 0)
     c00:	08190d00 	ldmdaeq	r9, {r8, sl, fp}
		if (*(__pi_utims [2])) {
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
			(*(__pi_utims [2]))--;
     c08:	0ca60b08 	vstmiaeq	r6!, {d0-d3}
		if (__pi_utims [3] != 0) {
     c0c:	1a0d0000 	bne	340c14 <__ccfg+0x320c6c>
			if (*(__pi_utims [3])) {
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
				aux_timer_inactive = 0;
     c14:	6e0b0c00 	cdpvs	12, 0, cr0, cr11, cr0, {0}
				(*(__pi_utims [3]))--;
     c18:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
	if (__pi_systat.ledsts) {
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
		if (__pi_systat.ledblc++ == 0) {
     c24:	00000a6f 	andeq	r0, r0, pc, ror #20
     c28:	e7081c0d 	str	r1, [r8, -sp, lsl #24]
			if (__pi_systat.ledblk) {
     c2c:	1400000c 	strne	r0, [r0], #-12
     c30:	0001a50b 	andeq	sl, r1, fp, lsl #10
     c34:	081d0d00 	ldmdaeq	sp, {r8, sl, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
     c3c:	031c0b18 	tsteq	ip, #24, 22	; 0x6000
				if (__pi_systat.ledsts & 0x2)
     c40:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
				if (__pi_systat.ledsts & 0x4)
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
				__pi_systat.ledblk = 0;
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
			if (__pi_systat.fstblk)
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c5c:	16000000 	strne	r0, [r0], -r0
				__pi_systat.ledblc = 200;
     c60:	00000956 	andeq	r0, r0, r6, asr r9
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
		cli_tim;
     c68:	1500000c 	strne	r0, [r0, #-12]
		__pi_new += setdel;
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c70:	000c8000 	andeq	r8, ip, r0
		setdel = 0;
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
		RISE_N_SHINE;
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
		__pi_new += setdel;
     c7c:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
     c84:	01150000 	tsteq	r5, r0
		aux_timer_inactive = 1;
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
				if (__pi_systat.ledsts & 0x1)
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
				if (__pi_systat.ledsts & 0x2)
     c9c:	16000000 	strne	r0, [r0], -r0
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
				if (__pi_systat.ledsts & 0x8)
     ca8:	04110000 	ldreq	r0, [r1], #-0
				__pi_systat.ledblk = 1;
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
		if (aux_timer_inactive) {
     cb4:	04110000 	ldreq	r0, [r1], #-0
			cli_aux;
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
     cc4:	a6160000 	ldrge	r0, [r6], -r0
     cc8:	16000009 	strne	r0, [r0], -r9
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
     cd4:	1500000c 	strne	r0, [r0, #-12]
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
word tci_update_delay_ticks (Boolean force) {
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
	cli_tim;
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
	if (setdel) {
     cec:	0d330500 	cfldr32eq	mvfx0, [r3, #-0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	1f0d0000 	svcne	0x000d0000
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
     cfc:	81210000 			; <UNDEFINED> instruction: 0x81210000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	0c000003 	stceq	0, cr0, [r0], {3}
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
	return NO;
     d08:	01000009 	tsteq	r0, r9
			setdel = 0;
     d0c:	0c081c01 	stceq	12, cr1, [r8], {1}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
}
     d18:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
		sti_tim;
     d1c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
		return YES;
     d20:	00000962 	andeq	r0, r0, r2, ror #18
     d24:	0fcb1900 	svceq	0x00cb1900
     d28:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	00040000 	andeq	r0, r4, r0
	UARTDisable (UART0_BASE);
     d34:	000a1504 	andeq	r1, sl, r4, lsl #10
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	03090c00 	movweq	r0, #39936	; 0x9c00
	UARTDisable (UART0_BASE);
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
	UARTConfigSetExpClk (UART0_BASE,
     d40:	00201b00 	eoreq	r1, r0, r0, lsl #22
     d44:	0c300000 	ldceq	0, cr0, [r0], #-0
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	00001f22 	andeq	r1, r0, r2, lsr #30
     d54:	0703140c 	streq	r1, [r3, -ip, lsl #8]
     d58:	00000962 	andeq	r0, r0, r2, ror #18
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	0bf31900 	bleq	ffcc7164 <_estack+0xdfcc2164>
     d60:	150c0000 	strne	r0, [ip, #-0]
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
	urates [0] = rate;
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
}
     d6c:	00004c8c 	andeq	r4, r0, ip, lsl #25
     d70:	0a03160c 	beq	c65a8 <__ccfg+0xa6600>
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
     d78:	47521904 	ldrbmi	r1, [r2, -r4, lsl #18]
     d7c:	170c0000 	strne	r0, [ip, -r0]
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     d88:	0000000f 	andeq	r0, r0, pc
     d8c:	0f03180c 	svceq	0x0003180c
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
     d94:	0969190c 	stmdbeq	r9!, {r2, r3, r8, fp, ip}^
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d98:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	002c0000 	eoreq	r0, ip, r0
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
     db0:	00030000 	andeq	r0, r3, r0
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
     db8:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
	switch (operation) {
     dbc:	0c00000b 	stceq	0, cr0, [r0], {11}
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
     dc4:	2100000d 	tstcs	r0, sp
     dc8:	00000bc8 	andeq	r0, r0, r8, asr #23
     dcc:	14031e0c 	strne	r1, [r3], #-3596	; 0xfffff1f4
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
				*buf++ = uart_a_read;
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
			while (len && uart_a_char_available) {
     ddc:	00071b24 	andeq	r1, r7, r4, lsr #22
     de0:	0d1d0e00 	ldceq	14, cr0, [sp, #-0]
     de4:	00000962 	andeq	r0, r0, r2, ror #18
			if (len != operation) {
     de8:	f6240101 			; <UNDEFINED> instruction: 0xf6240101
}
     dec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
			uart_a_disable_int;
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
			if (uart_a_char_available) {
     df8:	000c7524 	andeq	r7, ip, r4, lsr #10
				*buf++ = uart_a_read;
     dfc:	201e0e00 	andscs	r0, lr, r0, lsl #28
			uart_a_disable_int;
     e00:	00000973 	andeq	r0, r0, r3, ror r9
     e04:	93240101 			; <UNDEFINED> instruction: 0x93240101
			if (uart_a_char_available) {
     e08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
				uart_a_enable_int;
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
				goto Redo_rx;
     e18:	180c0f00 	stmdane	ip, {r8, r9, sl, fp}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
     e20:	28260101 	stmdacs	r6!, {r0, r8}
			return -2;
     e24:	01000006 	tsteq	r0, r6
     e28:	00000047 	andeq	r0, r0, r7, asr #32
				uart_a_write (*buf);
     e2c:	58061910 	stmdapl	r6, {r4, r8, fp, ip}
     e30:	2700000e 	strcs	r0, [r0, -lr]
			while (len && uart_a_room_in_tx) {
     e34:	00000bf9 	strdeq	r0, [r0], -r9
     e38:	09cf2700 	stmibeq	pc, {r8, r9, sl, sp}^	; <UNPREDICTABLE>
     e3c:	27010000 	strcs	r0, [r1, -r0]
			if (len != operation) {
     e40:	00000f1f 	andeq	r0, r0, pc, lsl pc
			uart_a_disable_int;
     e44:	0b412702 	bleq	104aa54 <__ccfg+0x102aaac>
     e48:	27030000 	strcs	r0, [r3, -r0]
			if (uart_a_room_in_tx) {
     e4c:	0000098f 	andeq	r0, r0, pc, lsl #19
     e50:	09d92704 	ldmibeq	r9, {r2, r8, r9, sl, sp}^
				uart_a_enable_int;
     e54:	00050000 	andeq	r0, r5, r0
     e58:	001f2226 	andseq	r2, pc, r6, lsr #4
				*buf++ = uart_a_read;
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
			if (uart_a_room_in_tx) {
     e60:	22100000 	andscs	r0, r0, #0
				uart_a_write (*buf);
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
     e68:	03422700 	movteq	r2, #9984	; 0x2700
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6c:	27000000 	strcs	r0, [r0, -r0]
     e70:	0000065f 	andeq	r0, r0, pc, asr r6
			uart_a_enable_int;
     e74:	04792701 	ldrbteq	r2, [r9], #-1793	; 0xfffff8ff
     e78:	27020000 	strcs	r0, [r2, -r0]
     e7c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
			return 0;
     e80:	0b242703 	bleq	90aa94 <__ccfg+0x8eaaec>
			if (len == UART_CNTRL_SETRATE) {
     e84:	00040000 	andeq	r0, r4, r0
				if (__pi_uart_setrate (*((word*)buf),
     e88:	0004aa0f 	andeq	sl, r4, pc, lsl #20
     e8c:	2c101c00 	ldccs	12, cr1, [r0], {-0}
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
				syserror (EREQPAR, "uar");
     e94:	0f3f0b00 	svceq	0x003f0b00
			syserror (ENOOPER, "uai");
     e98:	2d100000 	ldccs	0, cr0, [r0, #-0]
			if (len == UART_CNTRL_GETRATE) {
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
				return 1;
     ea0:	8b0b0000 	blhi	2c0ea8 <__ccfg+0x2a0f00>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea4:	10000007 	andne	r0, r0, r7
			syserror (ENOOPER, "uai");
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
     eb0:	000005e8 	andeq	r0, r0, r8, ror #11
     eb4:	63102f10 	tstvs	r0, #16, 30	; 0x40
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
     ec4:	25090000 	strcs	r0, [r9, #-0]
     ec8:	13000000 	movwne	r0, #0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	47521200 	ldrbmi	r1, [r2, -r0, lsl #4]
void UART0IntHandler () {
     ed0:	04640000 	strbteq	r0, [r4], #-0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	f7083310 			; <UNDEFINED> instruction: 0xf7083310
     ed8:	0b00000e 	bleq	f18 <UART0IntHandler+0x4c>
     edc:	00000040 	andeq	r0, r0, r0, asr #32
     ee0:	f7103410 			; <UNDEFINED> instruction: 0xf7103410
     ee4:	0000000e 	andeq	r0, r0, lr
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	00053913 	andeq	r3, r5, r3, lsl r9
     eec:	0a351000 	beq	d44ef4 <__ccfg+0xd24f4c>
		RISE_N_SHINE;
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
		i_trigger (devevent (UART_A, READ));
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
     f04:	12002700 	andne	r2, r0, #0, 14
     f08:	00000474 	andeq	r0, r0, r4, ror r4
     f0c:	3c100484 	cfldrscc	mvf0, [r0], {132}	; 0x84
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
     f14:	64691000 	strbtvs	r1, [r9], #-0
     f18:	0a3d1000 	beq	f44f20 <__ccfg+0xf24f78>
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
     f20:	69671000 	stmdbvs	r7!, {ip}^
     f24:	3e100064 	cdpcc	0, 1, cr0, cr0, cr4, {3}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
     f2c:	d10b0200 	mrsle	r0, R11_fiq
     f30:	1000000c 	andne	r0, r0, ip
		i_trigger (devevent (UART_A, WRITE));
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	13040000 	movwne	r0, #16384	; 0x4000
     f3c:	000002ad 	andeq	r0, r0, sp, lsr #5
		RISE_N_SHINE;
     f40:	580a4010 	stmdapl	sl, {r4, lr}
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
     f48:	04da1304 	ldrbeq	r1, [sl], #772	; 0x304
		i_trigger (devevent (UART_A, WRITE));
     f4c:	41100000 	tstmi	r0, r0
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
     f64:	00180000 	andseq	r0, r8, r0
     f68:	0007030f 	andeq	r0, r7, pc, lsl #6
     f6c:	44100600 	ldrmi	r0, [r0], #-1536	; 0xfffffa00
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
     f74:	69671000 	stmdbvs	r7!, {ip}^
}
     f78:	45100064 	ldrmi	r0, [r0, #-100]	; 0xffffff9c
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
     f80:	74100000 	ldrvc	r0, [r0], #-0
     f84:	10006570 	andne	r6, r0, r0, ror r5
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
void __buttons_setirq (int val) {
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	00000d80 	andeq	r0, r0, r0, lsl #27
     f94:	260a4710 			; <UNDEFINED> instruction: 0x260a4710
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     f98:	03000009 	movweq	r0, #9
     f9c:	0004eb0b 	andeq	lr, r4, fp, lsl #22
     fa0:	0a481000 	beq	1204fa8 <__ccfg+0x11e5000>
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	02a10b04 	adceq	r0, r1, #4, 22	; 0x1000
     fac:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
     fb4:	0f000500 	svceq	0x00000500
     fb8:	000002c2 	andeq	r0, r0, r2, asr #5
     fbc:	084c1006 	stmdaeq	ip, {r1, r2, ip}^
}
     fc0:	00001006 	andeq	r1, r0, r6
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
     fc8:	0b4d1000 	bleq	1344fd0 <__ccfg+0x1325028>
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
void __pinlist_setirq (int val) {
     fd0:	70741000 	rsbsvc	r1, r4, r0
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	4e100065 	cdpmi	0, 1, cr0, cr0, cr5, {3}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	800b0200 	andhi	r0, fp, r0, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	1000000d 	andne	r0, r0, sp
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	000004eb 	andeq	r0, r0, fp, ror #9
     ff0:	260a5010 			; <UNDEFINED> instruction: 0x260a5010
     ff4:	04000009 	streq	r0, [r0], #-9
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	0002a10b 	andeq	sl, r2, fp, lsl #2
}
     ffc:	0a511000 	beq	1445004 <__ccfg+0x142505c>
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
    1004:	ac0f0005 	stcge	0, cr0, [pc], {5}
    1008:	1a00000b 	bne	103c <GPIOIntHandler+0x30>
void GPIOIntHandler () {
    100c:	62085410 	andvs	r5, r8, #16, 8	; 0x10000000
if (buttons_int) {
    1010:	10000010 	andne	r0, r0, r0, lsl r0
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
	buttons_disable ();
    1018:	320b5510 	andcc	r5, fp, #16, 10	; 0x4000000
    101c:	00000009 	andeq	r0, r0, r9
	i_trigger ((aword)&__button_list);
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1024:	0a561000 	beq	158502c <__ccfg+0x1565084>
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
    102c:	0d800b02 	vstreq	d0, [r0, #8]
    1030:	57100000 	ldrpl	r0, [r0, -r0]
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
    1038:	eb0b0300 	bl	2c1c40 <__ccfg+0x2a1c98>
    103c:	10000004 	andne	r0, r0, r4
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
    1048:	000002a1 	andeq	r0, r0, r1, lsr #5
	RISE_N_SHINE;
    104c:	260a5910 			; <UNDEFINED> instruction: 0x260a5910
    1050:	05000009 	streq	r0, [r0, #-9]
    1054:	0004aa0b 	andeq	sl, r4, fp, lsl #20
if (pin_sensor_int) {
    1058:	075a1000 	ldrbeq	r1, [sl, -r0]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
	i_trigger ((aword)(&__input_pins));
    1060:	4e0f0006 	cdpmi	0, 0, cr0, cr15, cr6, {0}
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1068:	cb085d10 	blgt	2184b0 <__ccfg+0x1f8508>
    106c:	10000010 	andne	r0, r0, r0, lsl r0
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
    1074:	320b5e10 	andcc	r5, fp, #16, 28	; 0x100
    1078:	00000009 	andeq	r0, r0, r9
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1080:	0a5f1000 	beq	17c5088 <__ccfg+0x17a50e0>
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
    1088:	0d800b02 	vstreq	d0, [r0, #8]
	__pinsen_disable_and_clear;
    108c:	60100000 	andsvs	r0, r0, r0
	RISE_N_SHINE;
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
    1094:	eb0b0300 	bl	2c1c9c <__ccfg+0x2a1cf4>
    1098:	10000004 	andne	r0, r0, r4
}
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
    10a4:	000002a1 	andeq	r0, r0, r1, lsr #5
    10a8:	260a6210 			; <UNDEFINED> instruction: 0x260a6210
    10ac:	05000009 	streq	r0, [r0, #-9]
void system_init () {
    10b0:	00005b0b 	andeq	r5, r0, fp, lsl #22
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	0a631000 	beq	18c50bc <__ccfg+0x18a5114>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	08350b06 	ldmdaeq	r5!, {r1, r2, r8, r9, fp}
    10c0:	64100000 	ldrvs	r0, [r0], #-0
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c8:	0f000700 	svceq	0x00000700
    10cc:	00000ee8 	andeq	r0, r0, r8, ror #29
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	08681008 	stmdaeq	r8!, {r3, ip}^
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	0b691000 	bleq	1a450e4 <__ccfg+0x1a2513c>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	70741000 	rsbsvc	r1, r4, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e8:	6a100065 	bvs	401284 <__ccfg+0x3e12dc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	800b0200 	andhi	r0, fp, r0, lsl #4
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	1000000d 	andne	r0, r0, sp
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
		pin = (port_confs [i] >> 19) & 0x1f;
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	000004eb 	andeq	r0, r0, fp, ror #9
    1104:	260a6c10 			; <UNDEFINED> instruction: 0x260a6c10
    1108:	04000009 	streq	r0, [r0], #-9
    110c:	0002a10b 	andeq	sl, r2, fp, lsl #2
		if (port_confs [i] & 0x80)
    1110:	0a6d1000 	beq	1b45118 <__ccfg+0x1b25170>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
    1118:	005b0b05 	subseq	r0, fp, r5, lsl #22
		if (port_confs [i] & 0x40)
    111c:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
    1124:	350b0600 	strcc	r0, [fp, #-1536]	; 0xfffffa00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	10000008 	andne	r0, r0, r8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1130:	00070000 	andeq	r0, r7, r0
	all_leds_blink;
    1134:	0002cb0f 	andeq	ip, r2, pc, lsl #22
    1138:	76101e00 	ldrvc	r1, [r0], -r0, lsl #28
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
    1140:	69671000 	stmdbvs	r7!, {ip}^
    1144:	77100064 	ldrvc	r0, [r0, -r4, rrx]
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
    114c:	74100000 	ldrvc	r0, [r0], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1150:	10006570 	andne	r6, r0, r0, ror r5
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
    115c:	00000d80 	andeq	r0, r0, r0, lsl #27
    1160:	260a7910 			; <UNDEFINED> instruction: 0x260a7910
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	03000009 	movweq	r0, #9
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	0004eb0b 	andeq	lr, r4, fp, lsl #22
    116c:	0a7a1000 	beq	1e85174 <__ccfg+0x1e651cc>
	IntEnable (INT_AON_RTC_COMB);
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
    1174:	02a10b04 	adceq	r0, r1, #4, 22	; 0x1000
    1178:	7b100000 	blvc	401180 <__ccfg+0x3e11d8>
	__pi_malloc_init ();
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
	IntEnable (INT_AON_GPIO_EDGE);
    1180:	840b0500 	strhi	r0, [fp], #-1280	; 0xfffffb00
    1184:	10000007 	andne	r0, r0, r7
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
    1190:	00000835 	andeq	r0, r0, r5, lsr r8
    1194:	260a7d10 			; <UNDEFINED> instruction: 0x260a7d10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	07000009 	streq	r0, [r0, -r9]
    119c:	0004aa0b 	andeq	sl, r4, fp, lsl #20
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	077e1000 	ldrbeq	r1, [lr, -r0]!
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    11a8:	005b0b08 	subseq	r0, fp, r8, lsl #22
	urates [0] = UART_RATE / 100;
    11ac:	7f100000 	svcvc	0x00100000
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
	reinit_uart ();
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
	EXTRA_INITIALIZERS;
    11b8:	00000e8e 	andeq	r0, r0, lr, lsl #29
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11c0:	01000005 	tsteq	r0, r5
    11c4:	06960305 	ldreq	r0, [r6], r5, lsl #6
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	da000005 	ble	11e8 <system_init+0x138>
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
    11d8:	6d280031 	stcvs	0, cr0, [r8, #-196]!	; 0xffffff3c
			devinit [i] . init (devinit [i] . param);
    11dc:	01000004 	tsteq	r0, r4
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
    11e4:	05010000 	streq	r0, [r1, #-0]
    11e8:	00066403 	andeq	r6, r6, r3, lsl #8
	IntEnable (INT_UART0_COMB);
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
}
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
	tci_run_auxiliary_timer ();
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
		diag ("");
    11fc:	20000000 	andcs	r0, r0, r0
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	00121000 	andseq	r1, r2, r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
		diag ("Leftover RAM: %d bytes",
    120c:	00010000 	andeq	r0, r1, r0
    1210:	0006f228 	andeq	pc, r6, r8, lsr #4
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
    121c:	5c030501 	cfstr32pl	mvfx0, [r3], {1}
    1220:	28200006 	stmdacs	r0!, {r1, r2}
    1224:	0000086b 	andeq	r0, r0, fp, ror #16
    1228:	62060a01 	andvs	r0, r6, #4096	; 0x1000
    122c:	01000009 	tsteq	r0, r9
    1230:	05600305 	strbeq	r0, [r0, #-773]!	; 0xfffffcfb
    1234:	58282000 	stmdapl	r8!, {sp}
    1238:	01000004 	tsteq	r0, r4
    123c:	12490e0c 	subne	r0, r9, #12, 28	; 0xc0
    1240:	05010000 	streq	r0, [r1, #-0]
    1244:	00069803 	andeq	r9, r6, r3, lsl #16
    1248:	07041120 	streq	r1, [r4, -r0, lsr #2]
    124c:	2a00000f 	bcs	1290 <__pi_release+0x4>
    1250:	0001ad01 	andeq	sl, r1, r1, lsl #26
    1254:	021f0100 	andseq	r0, pc, #0, 2
    1258:	05240106 	streq	r0, [r4, #-262]!	; 0xfffffefa
    125c:	0a300000 	beq	c01264 <__ccfg+0xbe12bc>
    1260:	9c010000 	stcls	0, cr0, [r1], {-0}
    1264:	000015a5 	andeq	r1, r0, r5, lsr #11
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	000c3f2b 	andeq	r3, ip, fp, lsr #30
    126c:	021f0100 	andseq	r0, pc, #0, 2
    1270:	00096211 	andeq	r6, r9, r1, lsl r2
    1274:	00000000 	andeq	r0, r0, r0
    1278:	0c472c00 	mcrreq	12, 0, r2, r7, cr0
    127c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1280:	05781902 	ldrbeq	r1, [r8, #-2306]!	; 0xfffff6fe
    1284:	2b2c0000 	blcs	b0128c <__ccfg+0xae12e4>
}
    1288:	01000009 	tsteq	r0, r9
__attribute__ ((noreturn)) void __pi_release () {
    128c:	c6100265 	ldrgt	r0, [r0], -r5, ror #4
    1290:	2c000005 	stccs	0, cr0, [r0], {5}
    1294:	00000084 	andeq	r0, r0, r4, lsl #1
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	16026801 	strne	r6, [r2], -r1, lsl #16
	check_stack_overflow;
    129c:	000005e0 	andeq	r0, r0, r0, ror #11
    12a0:	0008122c 	andeq	r1, r8, ip, lsr #4
    12a4:	02910100 	addseq	r0, r1, #0, 2
	update_n_wake (MAX_WORD, NO);
    12a8:	0006241c 	andeq	r2, r6, ip, lsl r4
    12ac:	01f32c00 	mvnseq	r2, r0, lsl #24
    12b0:	95010000 	strls	r0, [r1, #-0]
	for_all_tasks (__pi_curr) {
    12b4:	062c1802 	strteq	r1, [ip], -r2, lsl #16
    12b8:	892c0000 	stmdbhi	ip!, {}	; <UNPREDICTABLE>
    12bc:	01000003 	tsteq	r0, r3
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	481b02a3 	ldmdami	fp, {r0, r1, r5, r7, r9}
	__SLEEP;
    12c4:	2c000006 	stccs	0, cr0, [r0], {6}
    12c8:	000002db 	ldrdeq	r0, [r0], -fp
    12cc:	1702a601 	strne	sl, [r2, -r1, lsl #12]
    12d0:	00000650 	andeq	r0, r0, r0, asr r6
	system_event_count ++;
    12d4:	0007a12c 	andeq	sl, r7, ip, lsr #2
    12d8:	02c10100 	sbceq	r0, r1, #0, 2
	switch (__pi_systat.effpdm) {
    12dc:	0006ac1b 	andeq	sl, r6, fp, lsl ip
    12e0:	050c2c00 	streq	r2, [ip, #-3072]	; 0xfffff400
    12e4:	d1010000 	mrsle	r0, (UNDEF: 1)
    12e8:	06c22102 	strbeq	r2, [r2], r2, lsl #2
			__WFI ();
    12ec:	762c0000 	strtvc	r0, [ip], -r0
    12f0:	01000009 	tsteq	r0, r9
    12f4:	dc1c02d7 	lfmle	f0, 4, [ip], {215}	; 0xd7
	check_stack_overflow;
    12f8:	2c000006 	stccs	0, cr0, [r0], {6}
    12fc:	0000068a 	andeq	r0, r0, sl, lsl #13
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	1a02e801 	bne	bb30c <__ccfg+0x9b364>
    1304:	0000072e 	andeq	r0, r0, lr, lsr #14
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	000d3d2c 	andeq	r3, sp, ip, lsr #26
			goto Redo;
    130c:	02f40100 	rscseq	r0, r4, #0, 2
	for_all_tasks (__pi_curr) {
    1310:	0007a023 	andeq	sl, r7, r3, lsr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	04032c00 	streq	r2, [r3], #-3072	; 0xfffff400
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	07010000 	streq	r0, [r1, -r0]
    131c:	07c21e03 	strbeq	r1, [r2, r3, lsl #28]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	5e2c0000 	cdppl	0, 2, cr0, cr12, cr0, {0}
    1324:	01000005 	tsteq	r0, r5
    1328:	ca1d030a 	bgt	741f58 <__ccfg+0x721fb0>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    132c:	2c000007 	stccs	0, cr0, [r0], {7}
    1330:	00000de7 	andeq	r0, r0, r7, ror #27
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	24031201 	strcs	r1, [r3], #-513	; 0xfffffdff
    1338:	000007e4 	andeq	r0, r0, r4, ror #15
			__WFI ();
    133c:	0007b92c 	andeq	fp, r7, ip, lsr #18
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1340:	03150100 	tsteq	r5, #0, 2
    1344:	0007ec20 	andeq	lr, r7, r0, lsr #24
}
    1348:	0a812c00 	beq	fe04c350 <_estack+0xde047350>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	07f62603 	ldrbeq	r2, [r6, r3, lsl #12]!
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	d82c0000 	stmdale	ip!, {}	; <UNPREDICTABLE>
    1358:	01000001 	tsteq	r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135c:	4a1e0333 	bmi	782030 <__ccfg+0x762088>
    1360:	2c000008 	stccs	0, cr0, [r0], {8}
    1364:	00000208 	andeq	r0, r0, r8, lsl #4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	1d033601 	stcne	6, cr3, [r3, #-4]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	00000852 	andeq	r0, r0, r2, asr r8
    1370:	00004b2c 	andeq	r4, r0, ip, lsr #22
    1374:	033e0100 	teqeq	lr, #0, 2
    1378:	00086c20 	andeq	r6, r8, r0, lsr #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	0a522c00 	beq	148c384 <__ccfg+0x146c3dc>
    1380:	41010000 	mrsmi	r0, (UNDEF: 1)
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	08742003 	ldmdaeq	r4!, {r0, r1, sp}^
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1388:	8f2c0000 	svchi	0x002c0000
    138c:	0100000d 	tsteq	r0, sp
    1390:	7e260349 	cdpvc	3, 2, cr0, cr6, cr9, {2}
    1394:	2c000008 	stccs	0, cr0, [r0], {8}
    1398:	000005aa 	andeq	r0, r0, sl, lsr #11
			SysCtrlSetRechargeBeforePowerDown
    139c:	20036401 	andcs	r6, r3, r1, lsl #8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	000008c8 	andeq	r0, r0, r8, asr #17
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a4:	0009b32c 	andeq	fp, r9, ip, lsr #6
    13a8:	03670100 	cmneq	r7, #0, 2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	0008d01f 	andeq	sp, r8, pc, lsl r0
    13b0:	0afe2c00 	beq	fff8c3b8 <_estack+0xdff873b8>
    13b4:	6f010000 	svcvs	0x00010000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	08ea2903 	stmiaeq	sl!, {r0, r1, r8, fp, sp}^
    13bc:	332c0000 			; <UNDEFINED> instruction: 0x332c0000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	0100000a 	tsteq	r0, sl
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	f2220372 	vcge.s32	q0, q1, q9
    13c8:	2c000008 	stccs	0, cr0, [r0], {8}
    13cc:	000004f5 	strdeq	r0, [r0], -r5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	1a037a01 	bne	dfbdc <__ccfg+0xbfc34>
			while (!(AONWUCPowerStatusGet () &
    13d4:	000008fc 	strdeq	r0, [r0], -ip
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	0004b12c 	andeq	fp, r4, ip, lsr #2
    13dc:	038c0100 	orreq	r0, ip, #0, 2
    13e0:	00094616 	andeq	r4, r9, r6, lsl r6
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	089a2c00 	ldmeq	sl, {sl, fp, sp}
    13e8:	8f010000 	svchi	0x00010000
    13ec:	094e1d03 	stmdbeq	lr, {r0, r1, r8, sl, fp, ip}^
    13f0:	7e2c0000 	cdpvc	0, 2, cr0, cr12, cr0, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	01000008 	tsteq	r0, r8
    13f8:	5e150397 	mrcpl	3, 0, r0, cr5, cr7, {4}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	2c000009 	stccs	0, cr0, [r0], {9}
    1400:	00000d1e 	andeq	r0, r0, lr, lsl sp
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	10039b01 	andne	r9, r3, r1, lsl #22
			reinit_uart ();
    1408:	0000096c 	andeq	r0, r0, ip, ror #18
    140c:	0007262c 	andeq	r2, r7, ip, lsr #12
    1410:	03a00100 	moveq	r0, #0, 2
}
    1414:	0009be13 	andeq	fp, r9, r3, lsl lr
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1418:	0b332c00 	bleq	ccc420 <__ccfg+0xcac478>
    141c:	a5010000 	strge	r0, [r1, #-0]
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	09cc1103 	stmibeq	ip, {r0, r1, r8, ip}^
    1424:	e02d0000 	eor	r0, sp, r0
    1428:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    1430:	0d022501 	cfstr32eq	mvfx2, [r2, #-4]
    1434:	0000002c 	andeq	r0, r0, ip, lsr #32
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	9c2e2000 	stcls	0, cr2, [lr], #-0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	01000004 	tsteq	r0, r4
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	bd0e0226 	sfmlt	f0, 4, [lr, #-152]	; 0xffffff68
    1448:	0500000e 	streq	r0, [r0, #-14]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    144c:	00056803 	andeq	r6, r5, r3, lsl #16
    1450:	04cc2f20 	strbeq	r2, [ip], #3872	; 0xf20
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1454:	27010000 	strcs	r0, [r1, -r0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1458:	09261102 	stmdbeq	r6!, {r1, r8, ip}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145c:	932f0000 			; <UNDEFINED> instruction: 0x932f0000
    1460:	01000002 	tsteq	r0, r2
			PRCMPowerDomainOff (
    1464:	26110228 	ldrcs	r0, [r1], -r8, lsr #4
    1468:	30000009 	andcc	r0, r0, r9
	__SLEEP;
    146c:	0000062c 	andeq	r0, r0, ip, lsr #12
    1470:	00000648 	andeq	r0, r0, r8, asr #12
  __ASM volatile ("cpsie i" : : : "memory");
    1474:	000014a8 	andeq	r1, r0, r8, lsr #9
	goto Redo;
    1478:	000c862e 	andeq	r8, ip, lr, lsr #12
    147c:	02960100 	addseq	r0, r6, #0, 2
    1480:	00096208 	andeq	r6, r9, r8, lsl #4
    1484:	31560100 	cmpcc	r6, r0, lsl #2
    1488:	00001b5b 	andeq	r1, r0, fp, asr fp
    148c:	00000642 	andeq	r0, r0, r2, asr #12
    1490:	00000644 	andeq	r0, r0, r4, asr #12
    1494:	08029b01 	stmdaeq	r2, {r0, r8, r9, fp, ip, pc}
    1498:	001b7a32 	andseq	r7, fp, r2, lsr sl
    149c:	1b6e3300 	blne	1b8e0a4 <__ccfg+0x1b6e0fc>
    14a0:	00290000 	eoreq	r0, r9, r0
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	00010034 	andeq	r0, r1, r4, lsr r0
    14ac:	0014fc00 	andseq	pc, r4, r0, lsl #24
    14b0:	03752f00 	cmneq	r5, #0, 30
    14b4:	a7010000 	strge	r0, [r1, -r0]
    14b8:	09260b02 	stmdbeq	r6!, {r1, r8, r9, fp}
    14bc:	78300000 	ldmdavc	r0!, {}	; <UNPREDICTABLE>
    14c0:	a2000006 	andge	r0, r0, #6
    14c4:	db000006 	blle	14e4 <halt>
    14c8:	35000014 	strcc	r0, [r0, #-20]	; 0xffffffec
    14cc:	b1010069 	tstlt	r1, r9, rrx
    14d0:	002c0b02 	eoreq	r0, ip, r2, lsl #22
    14d4:	003c0000 	eorseq	r0, ip, r0
    14d8:	36000000 	strcc	r0, [r0], -r0
    14dc:	00001b87 	andeq	r1, r0, r7, lsl #23
    14e0:	000006a4 	andeq	r0, r0, r4, lsr #13
	cli_tim;
    14e4:	00000118 	andeq	r0, r0, r8, lsl r1
    14e8:	0802b901 	stmdaeq	r2, {r0, r8, fp, ip, sp, pc}
    14ec:	001ba632 	andseq	sl, fp, r2, lsr r6
	diag ("PicOS halted");
    14f0:	1b9a3300 	blne	fe68e0f8 <_estack+0xde6890f8>
	mdelay (500);
    14f4:	004f0000 	subeq	r0, pc, r0
    14f8:	00000000 	andeq	r0, r0, r0
	setpowermode (2);
    14fc:	00013034 	andeq	r3, r1, r4, lsr r0
	__PCB = NULL;
    1500:	00151700 	andseq	r1, r5, r0, lsl #14
	release;
    1504:	0ed33700 	cdpeq	7, 13, cr3, cr3, cr0, {0}
    1508:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    150c:	15a52302 	strne	r2, [r5, #770]!	; 0x302
    1510:	00620000 	rsbeq	r0, r2, r0
int main (void) {
    1514:	34000000 	strcc	r0, [r0], #-0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	00000148 	andeq	r0, r0, r8, asr #2
    151c:	00001530 	andeq	r1, r0, r0, lsr r5
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	01006935 	tsteq	r0, r5, lsr r9
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	2c0c02f7 	sfmcs	f0, 4, [ip], {247}	; 0xf7
	system_init ();
    1528:	80000000 	andhi	r0, r0, r0
	tcv_init ();
    152c:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1530:	0007f630 	andeq	pc, r7, r0, lsr r6	; <UNPREDICTABLE>
    1534:	00084a00 	andeq	r4, r8, r0, lsl #20
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	00154e00 	andseq	r4, r5, r0, lsl #28
    153c:	00002e00 	andeq	r2, r0, r0, lsl #28
    1540:	1b010000 	blne	41548 <__ccfg+0x215a0>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1544:	15ab1f03 	strne	r1, [fp, #3843]!	; 0xf03
    1548:	91020000 	mrsls	r0, (UNDEF: 2)
	delay (16, 0);
    154c:	7e30005c 	mrcvc	0, 1, r0, cr0, cr12, {2}
    1550:	c8000008 	stmdagt	r0, {r3}
    1554:	6c000008 	stcvs	0, cr0, [r0], {8}
	__pi_release ();
    1558:	2e000015 	mcrcs	0, 0, r0, cr0, cr5, {0}
    155c:	00000b8e 	andeq	r0, r0, lr, lsl #23
    1560:	1f034b01 	svcne	0x00034b01
    1564:	000015b1 			; <UNDEFINED> instruction: 0x000015b1
    1568:	00609102 	rsbeq	r9, r0, r2, lsl #2
    156c:	0008fc30 	andeq	pc, r8, r0, lsr ip	; <UNPREDICTABLE>
    1570:	00094600 	andeq	r4, r9, r0, lsl #12
static void killev (__pi_pcb_t *pid) {
    1574:	00158a00 	andseq	r8, r5, r0, lsl #20
	wfun = (aword)(pid->code);
    1578:	09e22e00 	stmibeq	r2!, {r9, sl, fp, sp}^
	for_all_tasks (i) {
    157c:	7c010000 	stcvc	0, cr0, [r1], {-0}
		for (j = 0; j < nevents (i); j++) {
    1580:	15b72103 	ldrne	r2, [r7, #259]!	; 0x103
    1584:	91020000 	mrsls	r0, (UNDEF: 2)
    1588:	8c380064 	ldchi	0, cr0, [r8], #-400	; 0xfffffe70
			    || i->Events [j] . Event == wfun
    158c:	be000009 	cdplt	0, 0, cr0, cr0, cr9, {0}
		for (j = 0; j < nevents (i); j++) {
    1590:	35000009 	strcc	r0, [r0, #-9]
			if (i->Events [j] . Event == (aword)pid
    1594:	91010069 	tstls	r1, r9, rrx
    1598:	002c0c03 	eoreq	r0, ip, r3, lsl #24
    159c:	009e0000 	addseq	r0, lr, r0
				wakeupev (i, j);
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	68041100 	stmdavs	r4, {r8, ip}
	for_all_tasks (i) {
    15a8:	1100000f 	tstne	r0, pc
}
    15ac:	00100604 	andseq	r0, r0, r4, lsl #12
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	62041100 	andvs	r1, r4, #0, 2
static void qfree (aword *ch) {
    15b4:	11000010 	tstne	r0, r0, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b8:	0010cb04 	andseq	ip, r0, r4, lsl #22
	cc = (aword*)(mpools + MA_NP);
    15bc:	7b012a00 	blvc	4bdc4 <__ccfg+0x2be1c>
	m_setnextp (ch, chunk);
    15c0:	01000000 	mrseq	r0, (UNDEF: 0)
	m_setnextp (cc, ch);
    15c4:	0106010f 	tsteq	r6, pc, lsl #2
}
    15c8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15cc:	000004fc 	strdeq	r0, [r0], -ip
    15d0:	18409c01 	stmdane	r0, {r0, sl, fp, ip, pc}^
    15d4:	3f2b0000 	svccc	0x002b0000
			m_setnextp (cc, m_nextp (chunk));
    15d8:	0100000c 	tsteq	r0, ip
			m_size (chunk) += m_hdrlen + m_size (ch);
    15dc:	6215010f 	andsvs	r0, r5, #-1073741821	; 0xc0000003
    15e0:	b1000009 	tstlt	r0, r9
    15e4:	37000000 	strcc	r0, [r0, -r0]
    15e8:	00000458 	andeq	r0, r0, r8, asr r4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15ec:	2e010f01 	cdpcs	15, 0, cr0, cr1, cr1, {0}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f0:	00001249 	andeq	r1, r0, r9, asr #4
    15f4:	000000cf 	andeq	r0, r0, pc, asr #1
    15f8:	00066e2c 	andeq	r6, r6, ip, lsr #28
			m_setnextp (cc, m_nextp (chunk));
    15fc:	01150100 	tsteq	r5, r0, lsl #2
			m_size (ch) += m_hdrlen + m_size (chunk);
    1600:	0001ee13 	andeq	lr, r1, r3, lsl lr
    1604:	05dd2c00 	ldrbeq	r2, [sp, #3072]	; 0xc00
    1608:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    160c:	01fc0e01 	mvnseq	r0, r1, lsl #28
    1610:	b22c0000 	eorlt	r0, ip, #0
    1614:	0100000d 	tsteq	r0, sp
			if (m_size (chunk) >= m_size (ch))
    1618:	d41501fa 	ldrle	r0, [r5], #-506	; 0xfffffe06
    161c:	2c000002 	stccs	0, cr0, [r0], {2}
    1620:	00000dcd 	andeq	r0, r0, sp, asr #27
		chunk = m_nextp (chunk))
    1624:	1d020101 	stfnes	f0, [r2, #-4]
    1628:	000002dc 	ldrdeq	r0, [r0], -ip
    162c:	0005442c 	andeq	r4, r5, ip, lsr #8
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1630:	02040100 	andeq	r0, r4, #0, 2
	diag_wait (a);
    1634:	0002ea1d 	andeq	lr, r2, sp, lsl sl
	diag_wchar (c, a);
    1638:	06d62c00 	ldrbeq	r2, [r6], r0, lsl #24
    163c:	07010000 	streq	r0, [r1, -r0]
}
    1640:	02f81f02 	rscseq	r1, r8, #2, 30
    1644:	3f2c0000 	svccc	0x002c0000
	syserror (ESTATE, "state");
    1648:	01000007 	tsteq	r0, r7
    164c:	1016020c 	andsne	r0, r6, ip, lsl #4
    1650:	2c000003 	stccs	0, cr0, [r0], {3}
    1654:	00000752 	andeq	r0, r0, r2, asr r7
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	16020f01 	strne	r0, [r2], -r1, lsl #30
void utimer_add (address ut) {
    165c:	00000324 	andeq	r0, r0, r4, lsr #6
    1660:	0007652c 	andeq	r6, r7, ip, lsr #10
		if (__pi_utims [i] == NULL)
    1664:	02120100 	andseq	r0, r2, #0, 2
	for (i = 0; i < MAX_UTIMERS; i++)
    1668:	00033816 	andeq	r3, r3, r6, lsl r8
    166c:	0b332c00 	bleq	ccc674 <__ccfg+0xcac6cc>
		syserror (ERESOURCE, "ut a");
    1670:	17010000 	strne	r0, [r1, -r0]
	__pi_utims [i] = ut;
    1674:	034c1102 	movteq	r1, #49410	; 0xc102
}
    1678:	602d0000 	eorvs	r0, sp, r0
    167c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1680:	00000280 	andeq	r0, r0, r0, lsl #5
	*t = v;
    1684:	21011001 	tstcs	r1, r1
	TCI_RUN_AUXILIARY_TIMER;
    1688:	00001840 	andeq	r1, r0, r0, asr #16
void update_n_wake (word min, Boolean force) {
    168c:	05640305 	strbeq	r0, [r4, #-773]!	; 0xfffffcfb
	if (TCI_UPDATE_DELAY_TICKS (force))
    1690:	2f2e2000 	svccs	0x002e2000
    1694:	0100000c 	tsteq	r0, ip
    1698:	a6110112 			; <UNDEFINED> instruction: 0xa6110112
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169c:	05000009 	streq	r0, [r0, #-9]
    16a0:	00055803 	andeq	r5, r5, r3, lsl #16
    16a4:	00452e20 	subeq	r2, r5, r0, lsr #28
    16a8:	13010000 	movwne	r0, #4096	; 0x1000
    16ac:	0ebd0e01 	cdpeq	14, 11, cr0, cr13, cr1, {0}
    16b0:	03050000 	movweq	r0, #20480	; 0x5000
    16b4:	20000540 	andcs	r0, r0, r0, asr #10
    16b8:	0000782d 	andeq	r7, r0, sp, lsr #16
    16bc:	70743900 	rsbsvc	r3, r4, r0, lsl #18
    16c0:	1a010065 	bne	4185c <__ccfg+0x218b4>
    16c4:	09260b01 	stmdbeq	r6!, {r0, r8, r9, fp}
    16c8:	91030000 	mrsls	r0, (UNDEF: 3)
    16cc:	582f7fb7 	stmdapl	pc!, {r0, r1, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
		for_all_tasks (i) {
    16d0:	01000003 	tsteq	r0, r3
	__pi_mintk = znew + min;
    16d4:	260b011b 			; <UNDEFINED> instruction: 0x260b011b
    16d8:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
			if (!twaiting (i))
    16dc:	00000090 	muleq	r0, r0, r0
    16e0:	0002222e 	andeq	r2, r2, lr, lsr #4
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e4:	01310100 	teqeq	r1, r0, lsl #2
    16e8:	00184626 	andseq	r4, r8, r6, lsr #12
    16ec:	2f510100 	svccs	0x00510100
    16f0:	00000d04 	andeq	r0, r0, r4, lsl #26
    16f4:	25013301 	strcs	r3, [r1, #-769]	; 0xfffffcff
    16f8:	000015a5 	andeq	r1, r0, r5, lsr #11
    16fc:	0002352f 	andeq	r3, r2, pc, lsr #10
    1700:	01530100 	cmpeq	r3, r0, lsl #2
    1704:	00184626 	andseq	r4, r8, r6, lsr #12
    1708:	02482f00 	subeq	r2, r8, #0, 30
    170c:	6a010000 	bvs	41714 <__ccfg+0x2176c>
    1710:	18401d01 	stmdane	r0, {r0, r8, sl, fp, ip}^
				wakeuptm (i);
    1714:	8e2f0000 	cdphi	0, 2, cr0, cr15, cr0, {0}
    1718:	0100000a 	tsteq	r0, sl
		for_all_tasks (i) {
    171c:	ab21016b 	blge	841cd0 <__ccfg+0x821d28>
				d = i->Timer - znew;
    1720:	2f000015 	svccs	0x00000015
    1724:	000008cc 	andeq	r0, r0, ip, asr #17
    1728:	09016c01 	stmdbeq	r1, {r0, sl, fp, sp, lr}
		if ((word)(__pi_mintk - znew) < min) 
    172c:	0000184c 	andeq	r1, r0, ip, asr #16
    1730:	0007842f 	andeq	r8, r7, pc, lsr #8
    1734:	016d0100 	cmneq	sp, r0, lsl #2
	__pi_old = znew;
    1738:	0009260d 	andeq	r2, r9, sp, lsl #12
}
    173c:	03da2f00 	bicseq	r2, sl, #0, 30
	TCI_RUN_DELAY_TIMER;
    1740:	8d010000 	stchi	0, cr0, [r1, #-0]
}
    1744:	18401d01 	stmdane	r0, {r0, r8, sl, fp, ip}^
    1748:	9c2f0000 	stcls	0, cr0, [pc], #-0	; 1750 <update_n_wake+0xc4>
    174c:	0100000d 	tsteq	r0, sp
    1750:	b121018e 	smlawblt	r1, lr, r1, r0
    1754:	2f000015 	svccs	0x00000015
void proceed (word state) {
    1758:	0000026d 	andeq	r0, r0, sp, ror #4
	prcdstate (__pi_curr, state);
    175c:	1d01a801 	stcne	8, cr10, [r1, #-4]
    1760:	00001840 	andeq	r1, r0, r0, asr #16
	release;
    1764:	0007d62f 	andeq	sp, r7, pc, lsr #12
    1768:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
void __pi_wait (aword event, word state) {
    176c:	0015b723 	andseq	fp, r5, r3, lsr #14
	sint j = nevents (__pi_curr);
    1770:	09382e00 	ldmdbeq	r8!, {r9, sl, fp, sp}
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	aa010000 	bge	4177c <__ccfg+0x217d4>
    1778:	0e881301 	cdpeq	3, 8, cr1, cr8, cr1, {0}
    177c:	91030000 	mrsls	r0, (UNDEF: 3)
		syserror (ENEVENTS, "sw");
    1780:	183a7fb8 	ldmdane	sl!, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    1784:	9e000019 	mcrls	0, 0, r0, cr0, cr9, {0}
	setestate (__pi_curr->Events [j], state, event);
    1788:	a2000003 	andge	r0, r0, #3
	incwait (__pi_curr);
    178c:	01000003 	tsteq	r0, r3
	setestate (__pi_curr->Events [j], state, event);
    1790:	c81b019f 	ldmdagt	fp, {r0, r1, r2, r3, r4, r7, r8}
}
    1794:	32000017 	andcc	r0, r0, #23
    1798:	00001973 	andeq	r1, r0, r3, ror r9
    179c:	00196732 	andseq	r6, r9, r2, lsr r7
void __pi_trigger (aword event) {
    17a0:	195b3200 	ldmdbne	fp, {r9, ip, sp}^
	for_all_tasks (i) {
    17a4:	4f320000 	svcmi	0x00320000
		for (j = 0; j < nevents (i); j++) {
    17a8:	33000019 	movwcc	r0, #25
    17ac:	00001943 	andeq	r1, r0, r3, asr #18
    17b0:	0000010e 	andeq	r0, r0, lr, lsl #2
    17b4:	00193732 	andseq	r3, r9, r2, lsr r7
			if (i->Events [j] . Event == event) {
    17b8:	192b3300 	stmdbne	fp!, {r8, r9, ip, sp}
    17bc:	01220000 			; <UNDEFINED> instruction: 0x01220000
    17c0:	7f3b0000 	svcvc	0x003b0000
				wakeupev (i, j);
    17c4:	00000019 	andeq	r0, r0, r9, lsl r0
    17c8:	0019183c 	andseq	r1, r9, ip, lsr r8
	for_all_tasks (i) {
    17cc:	0003a200 	andeq	sl, r3, r0, lsl #4
}
    17d0:	0000b000 	andeq	fp, r0, r0
aword __pi_join (aword pid, word st) {
    17d4:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
	for_all_tasks (i) {
    17d8:	0018181c 	andseq	r1, r8, ip, lsl r8
    17dc:	19733300 	ldmdbne	r3!, {r8, r9, ip, sp}^
	return 0;
    17e0:	01360000 	teqeq	r6, r0
		if ((aword)i == pid) {
    17e4:	67320000 	ldrvs	r0, [r2, -r0]!
			__pi_wait (pid, st);
    17e8:	32000019 	andcc	r0, r0, #25
}
    17ec:	0000195b 	andeq	r1, r0, fp, asr r9
	for_all_tasks (i) {
    17f0:	00194f33 	andseq	r4, r9, r3, lsr pc
    17f4:	00014900 	andeq	r4, r1, r0, lsl #18
void delay (word d, word state) {
    17f8:	19433200 	stmdbne	r3, {r9, ip, sp}^
	settstate (__pi_curr, state);
    17fc:	37330000 	ldrcc	r0, [r3, -r0]!
    1800:	63000019 	movwvs	r0, #25
    1804:	32000001 	andcc	r0, r0, #1
    1808:	0000192b 	andeq	r1, r0, fp, lsr #18
	update_n_wake (d, YES);
    180c:	0000b02d 	andeq	fp, r0, sp, lsr #32
    1810:	197f3b00 	ldmdbne	pc!, {r8, r9, fp, ip, sp}^	; <UNPREDICTABLE>
	__pi_curr->Timer = __pi_old + d;
    1814:	00000000 	andeq	r0, r0, r0
    1818:	0019d136 	andseq	sp, r9, r6, lsr r1
	inctimer (__pi_curr);
    181c:	0003ee00 	andeq	lr, r3, r0, lsl #28
    1820:	0000c800 	andeq	ip, r0, r0, lsl #16
    1824:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
}
    1828:	19f03319 	ldmibne	r0!, {r0, r3, r4, r8, r9, ip, sp}^
    182c:	017d0000 	cmneq	sp, r0
	if (fun == NULL)
    1830:	e4330000 	ldrt	r0, [r3], #-0
		return (int) __pi_curr;
    1834:	a2000019 	andge	r0, r0, #25
    1838:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
    183c:	00000000 	andeq	r0, r0, r0
}
    1840:	11340411 	teqne	r4, r1, lsl r4
		if (i->code == fun)
    1844:	04110000 	ldreq	r0, [r1], #-0
	for_all_tasks (i)
    1848:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
    184c:	b3020102 	movwlt	r0, #8450	; 0x2102
    1850:	3d00000c 	stccc	0, cr0, [r0, #-48]	; 0xffffffd0
int __pi_strlen (const char *s) {
    1854:	000aa401 	andeq	sl, sl, r1, lsl #8
	for (i = 0; *(s+i) != '\0'; i++);
    1858:	06d60100 	ldrbeq	r0, [r6], r0, lsl #2
}
    185c:	0000c801 	andeq	ip, r0, r1, lsl #16
	for (i = 0; *(s+i) != '\0'; i++);
    1860:	00016c00 	andeq	r6, r1, r0, lsl #24
	while ((Boolean)(*d++ = *s++));
    1864:	de9c0100 	fmllee	f0, f4, f0
    1868:	3e000018 	mcrcc	0, 0, r0, cr0, cr8, {0}
    186c:	00000c3f 	andeq	r0, r0, pc, lsr ip
}
    1870:	6213d601 	andsvs	sp, r3, #1048576	; 0x100000
	while (n-- && (*s != '\0'))
    1874:	b5000009 	strlt	r0, [r0, #-9]
    1878:	3f000001 	svccc	0x00000001
	*d = '\0';
    187c:	00000c1b 	andeq	r0, r0, fp, lsl ip
	while (n-- && (*s != '\0'))
    1880:	4037d601 	eorsmi	sp, r7, r1, lsl #12
    1884:	d3000018 	movwle	r0, #24
		*d++ = *s++;
    1888:	40000001 	andmi	r0, r0, r1
    188c:	00000a05 	andeq	r0, r0, r5, lsl #20
	while (n--)
    1890:	da11db01 	ble	47849c <__ccfg+0x4584f4>
    1894:	2c000000 	stccs	0, cr0, [r0], {-0}
		*dest++ = *src++;
    1898:	00000c0b 	andeq	r0, r0, fp, lsl #24
    189c:	1b010701 	blne	434a8 <__ccfg+0x23500>
    18a0:	0000011a 	andeq	r0, r0, sl, lsl r1
	while (n--)
    18a4:	0000002d 	andeq	r0, r0, sp, lsr #32
}
    18a8:	0c384100 	ldfeqs	f4, [r8], #-0
		*dest++ = c;
    18ac:	d7010000 	strle	r0, [r1, -r0]
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	0009a611 	andeq	sl, r9, r1, lsl r6
		syserror (EREQPAR, "addv");
    18b4:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
		syserror (ERESOURCE, "addv");
    18b8:	42200005 	eormi	r0, r0, #5
	if (ioreq [loc] != NULL)
    18bc:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    18c0:	2c0dd901 			; <UNDEFINED> instruction: 0x2c0dd901
		syserror (ERESOURCE, "addv");
    18c4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
	ioreq [loc] = rf;
    18c8:	0000382d 	andeq	r3, r0, sp, lsr #16
}
    18cc:	00704300 	rsbseq	r4, r0, r0, lsl #6
    18d0:	bd0ade01 	stclt	14, cr13, [sl, #-4]
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	ea000005 	b	18f0 <io+0x1c>
    18d8:	00000001 	andeq	r0, r0, r1
    18dc:	01440000 	mrseq	r0, (UNDEF: 68)
    18e0:	000001c7 	andeq	r0, r0, r7, asr #3
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e4:	0105b401 	tsteq	r5, r1, lsl #8
    18e8:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		syserror (ENODEVICE, "io");
    18f4:	19189c01 	ldmdbne	r8, {r0, sl, fp, ip, pc}
	if (len == 0)
    18f8:	1b3e0000 	blne	f81900 <__ccfg+0xf61958>
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	0100000c 	tsteq	r0, ip
    1900:	18402eb4 	stmdane	r0, {r2, r4, r5, r7, r9, sl, fp, sp}^
	if (ret >= 0)
    1904:	01fd0000 	mvnseq	r0, r0
	if (ret == -1) {
    1908:	b1420000 	mrslt	r0, (UNDEF: 66)
    190c:	01000003 	tsteq	r0, r3
		if (retry == WNONE)
    1910:	002c06b5 	strhteq	r0, [ip], -r5
		iowait (dev, operation, retry);
    1914:	00000000 	andeq	r0, r0, r0
    1918:	0ae40145 	beq	ff901e34 <_estack+0xdf8fce34>
    191c:	9f010000 	svcls	0x00010000
			release;
    1920:	18400119 	stmdane	r0, {r0, r3, r4, r8}^
	if (ret == -2) {
    1924:	8c010000 	stchi	0, cr0, [r1], {-0}
		if (retry != WNONE) {
    1928:	46000019 			; <UNDEFINED> instruction: 0x46000019
    192c:	00646967 	rsbeq	r6, r4, r7, ror #18
			iowait (dev, operation, retry);
    1930:	323c9f01 	eorscc	r9, ip, #1, 30
    1934:	47000009 	strmi	r0, [r0, -r9]
			(ioreq [dev]) (NONE, buf, len);
    1938:	00000d80 	andeq	r0, r0, r0, lsl #27
    193c:	26499f01 	strbcs	r9, [r9], -r1, lsl #30
    1940:	47000009 	strmi	r0, [r0, -r9]
		(ioreq [dev]) (NONE, buf, len);
    1944:	000004eb 	andeq	r0, r0, fp, ror #9
    1948:	26619f01 	strbtcs	r9, [r1], -r1, lsl #30
    194c:	47000009 	strmi	r0, [r0, -r9]
}
    1950:	000002a1 	andeq	r0, r0, r1, lsr #5
	if (retry != WNONE) {
    1954:	26749f01 	ldrbtcs	r9, [r4], -r1, lsl #30
		delay (-ret - 2, retry);
    1958:	47000009 	strmi	r0, [r0, -r9]
    195c:	00000784 	andeq	r0, r0, r4, lsl #15
    1960:	26899f01 	strcs	r9, [r9], r1, lsl #30
    1964:	47000009 	strmi	r0, [r0, -r9]
		release;
    1968:	00000835 	andeq	r0, r0, r5, lsr r8
    196c:	26999f01 	ldrcs	r9, [r9], r1, lsl #30
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1970:	46000009 	strmi	r0, [r0], -r9
    1974:	00636572 	rsbeq	r6, r3, r2, ror r5
    1978:	bda79f01 	stclt	15, cr9, [r7, #4]!
    197c:	48000005 	stmdami	r0, {r0, r2}
    1980:	00000aed 	andeq	r0, r0, sp, ror #21
		syserror (ERESOURCE, "mal1");
    1984:	401aa001 	andsmi	sl, sl, r1
    1988:	00000018 	andeq	r0, r0, r8, lsl r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    198c:	0f2d0144 	svceq	0x002d0144
    1990:	8c010000 	stchi	0, cr0, [r1], {-0}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1994:	184c0105 	stmdane	ip, {r0, r2, r8}^
	m_size (mpools [0]) = mlen - m_hdrlen;
    1998:	04fc0000 	ldrbteq	r0, [ip], #0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    199c:	05220000 	streq	r0, [r2, #-0]!
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    19a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a4:	000019d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
}
    19a8:	0051e73e 	subseq	lr, r1, lr, lsr r7
    19ac:	1d8c0100 	stfnes	f0, [ip]
    19b0:	00001249 	andeq	r1, r0, r9, asr #4
    19b4:	00000210 	andeq	r0, r0, r0, lsl r2
    19b8:	00050438 	andeq	r0, r5, r8, lsr r4
    19bc:	00051600 	andeq	r1, r5, r0, lsl #12
void __pi_free (aword *ch) {
    19c0:	00694300 	rsbeq	r4, r9, r0, lsl #6
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    19c4:	2c119201 	lfmcs	f1, 1, [r1], {1}
    19c8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
		syserror (EMALLOC, "malg");
    19cc:	00000002 	andeq	r0, r0, r2
    19d0:	e2014500 	and	r4, r1, #0, 10
	mcfree [MA_NP] += m_size (ch);
    19d4:	01000009 	tsteq	r0, r9
		m_size (ch) ^= MALLOC_UMASK;
    19d8:	88010f84 	stmdahi	r1, {r2, r7, r8, r9, sl, fp}
    19dc:	0100000e 	tsteq	r0, lr
	mcfree [MA_NP] += m_size (ch);
    19e0:	000019fd 	strdeq	r1, [r0], -sp
	QFREE;
    19e4:	0051e747 	subseq	lr, r1, r7, asr #14
	if (mevent [MA_NP] . nwait) {
    19e8:	2c840100 	stfcss	f0, [r4], {0}
    19ec:	00001249 	andeq	r1, r0, r9, asr #4
		trigger ((aword)(&(mevent [MA_NP])));
    19f0:	0004da47 	andeq	sp, r4, r7, asr #20
		mevent [MA_NP] . nwait --;
    19f4:	3a840100 	bcc	fe101dfc <_estack+0xde0fcdfc>
}
    19f8:	00000926 	andeq	r0, r0, r6, lsr #18
    19fc:	8e014400 	cfcpyshi	mvf4, mvf1
    1a00:	0100000b 	tsteq	r0, fp
    1a04:	4c010570 	cfstr32mi	mvfx0, [r1], {112}	; 0x70
void kill (aword pid) {
    1a08:	b4000018 	strlt	r0, [r0], #-24	; 0xffffffe8
		pid = (aword) __pi_curr;
    1a0c:	d0000001 	andle	r0, r0, r1
	j = NULL;
    1a10:	01000001 	tsteq	r0, r1
	for_all_tasks (i) {
    1a14:	001a3a9c 	mulseq	sl, ip, sl
	syserror (EREQPAR, "kpi");
    1a18:	51e73e00 	mvnpl	r3, r0, lsl #28
    1a1c:	70010000 	andvc	r0, r1, r0
		if ((aword)i == pid) {
    1a20:	00124920 	andseq	r4, r2, r0, lsr #18
    1a24:	00024c00 	andeq	r4, r2, r0, lsl #24
				__PCB = i->Next;
    1a28:	04da3e00 	ldrbeq	r3, [sl], #3584	; 0xe00
			killev (i);
    1a2c:	70010000 	andvc	r0, r1, r0
			ufree (i);
    1a30:	0009262e 	andeq	r2, r9, lr, lsr #12
			if (i == __pi_curr)
    1a34:	00025f00 	andeq	r5, r2, r0, lsl #30
    1a38:	01440000 	mrseq	r0, (UNDEF: 68)
				release;
    1a3c:	000005f2 	strdeq	r0, [r0], -r2
				j->Next = i->Next;
    1a40:	01056001 	tsteq	r5, r1
    1a44:	0000184c 	andeq	r1, r0, ip, asr #16
    1a48:	0000019e 	muleq	r0, lr, r1
}
    1a4c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1a50:	1a7b9c01 	bne	1ee8a5c <__ccfg+0x1ec8ab4>
    1a54:	e73e0000 	ldr	r0, [lr, -r0]!
	if (size < 8)
    1a58:	01000051 	qaddeq	r0, r1, r0
		_size = 2;
    1a5c:	12492d60 	subne	r2, r9, #96, 26	; 0x1800
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a60:	02720000 	rsbseq	r0, r2, #0
		_size = (((aword)size) + 3) >> 2;
    1a64:	9e380000 	cdpls	0, 3, cr0, cr8, cr0, {0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a68:	b0000001 	andlt	r0, r0, r1
		_size = (((aword)size) + 3) >> 2;
    1a6c:	49000001 	stmdbmi	r0, {r0}
		if (mevent [MA_NP] . nfail != 255)
    1a70:	65010069 	strvs	r0, [r1, #-105]	; 0xffffff97
    1a74:	00002c12 	andeq	r2, r0, r2, lsl ip
			mevent [MA_NP] . nfail ++;
    1a78:	45000000 	strmi	r0, [r0, #-0]
		mnfree [MA_NP] = 0;
    1a7c:	0003f501 	andeq	pc, r3, r1, lsl #10
    1a80:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a84:	00184c01 	andseq	r4, r8, r1, lsl #24
    1a88:	1acb0100 	bne	ff2c1e90 <_estack+0xdf2bce90>
			syserror (EMALLOC, "malc");
    1a8c:	e7470000 	strb	r0, [r7, -r0]
    1a90:	01000051 	qaddeq	r0, r1, r0
		if (m_size (chunk) >= _size)
    1a94:	12492040 	subne	r2, r9, #64	; 0x40
    1a98:	fe470000 	cdp2	0, 4, cr0, cr7, cr0, {0}
		chunk = m_nextp (chunk)) {
    1a9c:	0100000e 	tsteq	r0, lr
		m_setnextp (cc, m_nextp (chunk));
    1aa0:	05bd2c40 	ldreq	r2, [sp, #3136]!	; 0xc40
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1aa4:	3f470000 	svccc	0x00470000
    1aa8:	0100000f 	tsteq	r0, pc
			m_size (chunk) = _size;
    1aac:	09263f40 	stmdbeq	r6!, {r6, r8, r9, sl, fp, ip, sp}
			cc = chunk + _size + m_hdrlen;
    1ab0:	6e490000 	cdpvs	0, 4, cr0, cr9, cr0, {0}
    1ab4:	01006d75 	tsteq	r0, r5, ror sp
			m_size (cc) = waste - m_hdrlen;
    1ab8:	002c0943 	eoreq	r0, ip, r3, asr #18
			QFREE;
    1abc:	494a0000 	stmdbmi	sl, {}^	; <UNPREDICTABLE>
		mevent [MA_NP] . nfail = 0;
    1ac0:	4b010069 	blmi	41c6c <__ccfg+0x21cc4>
		mcfree [MA_NP] -= m_size (chunk);
    1ac4:	00002c12 	andeq	r2, r0, r2, lsl ip
    1ac8:	4b000000 	blmi	1ad0 <__pi_malloc+0x78>
    1acc:	00059501 	andeq	r9, r5, r1, lsl #10
    1ad0:	093b0100 	ldmdbeq	fp!, {r8}
		m_size (chunk) |= MALLOC_UMASK;
    1ad4:	00092601 	andeq	r2, r9, r1, lsl #12
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad8:	00018c00 	andeq	r8, r1, r0, lsl #24
		m_size (chunk) |= MALLOC_UMASK;
    1adc:	00019e00 	andeq	r9, r1, r0, lsl #28
			mnfree [MA_NP] = mcfree [MA_NP];
    1ae0:	3d9c0100 	ldfccs	f0, [ip]
}
    1ae4:	00009701 	andeq	r9, r0, r1, lsl #14
    1ae8:	06340100 	ldrteq	r0, [r4], -r0, lsl #2
    1aec:	00000001 	andeq	r0, r0, r1
    1af0:	00000000 	andeq	r0, r0, r0
    1af4:	209c0100 	addscs	r0, ip, r0, lsl #2
    1af8:	3e00001b 	mcrcc	0, 0, r0, cr0, cr11, {0}
    1afc:	000051e7 	andeq	r5, r0, r7, ror #3
aword __pi_fork (fsmcode func, aword data) {
    1b00:	491f3401 	ldmdbmi	pc, {r0, sl, ip, sp}	; <UNPREDICTABLE>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b04:	85000012 	strhi	r0, [r0, #-18]	; 0xffffffee
    1b08:	38000002 	stmdacc	r0, {r1}
	...
	i->Next = NULL;
    1b14:	01006949 	tsteq	r0, r9, asr #18
	i->data = data;
    1b18:	002c0b35 	eoreq	r0, ip, r5, lsr fp
		if ((j = __PCB) == NULL)
    1b1c:	00000000 	andeq	r0, r0, r0
}
    1b20:	0e9d0144 	fmleqem	f0, f5, f4
			for (; j->Next != NULL; j = j->Next);
    1b24:	2d010000 	stccs	0, cr0, [r1, #-0]
    1b28:	184c0105 	stmdane	ip, {r0, r2, r8}^
	...
	if (mevent [MA_NP] . nwait != 255)
    1b34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b38:	00001b5b 	andeq	r1, r0, fp, asr fp
    1b3c:	0051e73e 	subseq	lr, r1, lr, lsr r7
		mevent [MA_NP] . nwait ++;
    1b40:	2a2d0100 	bcs	b41f48 <__ccfg+0xb21fa0>
	wait ((aword)(&(mevent [MA_NP])), state);
    1b44:	00001249 	andeq	r1, r0, r9, asr #4
    1b48:	00000298 	muleq	r0, r8, r2
void diag (const char *mess, ...) {
    1b4c:	0003a34c 	andeq	sl, r3, ip, asr #6
    1b50:	382d0100 	stmdacc	sp!, {r8}
    1b54:	00000926 	andeq	r0, r0, r6, lsr #18
	diag_disable_int (a, is);
    1b58:	45005101 	strmi	r5, [r0, #-257]	; 0xfffffeff
    1b5c:	0008dc01 	andeq	sp, r8, r1, lsl #24
    1b60:	05270100 	streq	r0, [r7, #-256]!	; 0xffffff00
				d = (bc == 16) ? 10000 : 1000000000;
    1b64:	00184c01 	andseq	r4, r8, r1, lsl #24
	diag_disable_int (a, is);
    1b68:	1b870100 	blne	fe1c1f70 <_estack+0xde1bcf70>
	while (*mess != '\0') {
    1b6c:	e7470000 	strb	r0, [r7, -r0]
	dgout ('\r');
    1b70:	01000051 	qaddeq	r0, r1, r0
	dgout ('\n');
    1b74:	12491f27 	subne	r1, r9, #39, 30	; 0x9c
    1b78:	67460000 	strbvs	r0, [r6, -r0]
    1b7c:	01006469 	tsteq	r0, r9, ror #8
	diag_wait (a);
    1b80:	09322e27 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, sl, fp, sp}
	diag_enable_int (a, is);
    1b84:	45000000 	strmi	r0, [r0, #-0]
    1b88:	00048801 	andeq	r8, r4, r1, lsl #16
}
    1b8c:	05220100 	streq	r0, [r2, #-256]!	; 0xffffff00
    1b90:	00184c01 	andseq	r4, r8, r1, lsl #24
    1b94:	1bb20100 	blne	fec81f9c <_estack+0xdec7cf9c>
		if (*mess == '%') {
    1b98:	e7470000 	strb	r0, [r7, -r0]
    1b9c:	01000051 	qaddeq	r0, r1, r0
			if (*mess == 'l') {
    1ba0:	12491e22 	subne	r1, r9, #544	; 0x220
    1ba4:	69460000 	stmdbvs	r6, {}^	; <UNPREDICTABLE>
				mess++;
    1ba8:	22010064 	andcs	r0, r1, #100	; 0x64
				val = va_arg (ap, lword);
    1bac:	0009262c 	andeq	r2, r9, ip, lsr #12
				bc = 32;
    1bb0:	01440000 	mrseq	r0, (UNDEF: 68)
				bc = 16;
    1bb4:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
			switch (*mess) {
    1bb8:	01051101 	tsteq	r5, r1, lsl #2
    1bbc:	0000184c 	andeq	r1, r0, ip, asr #16
    1bc0:	0000016c 	andeq	r0, r0, ip, ror #2
				dgout ('%');
    1bc4:	0000018c 	andeq	r0, r0, ip, lsl #3
    1bc8:	1bdf9c01 	blne	ff7e8bd4 <_estack+0xdf7e3bd4>
				dgout (*mess);
    1bcc:	e73e0000 	ldr	r0, [lr, -r0]!
    1bd0:	01000051 	qaddeq	r0, r1, r0
			switch (*mess) {
    1bd4:	12491c11 	subne	r1, r9, #4352	; 0x1100
					v = __pi_hex_enc_table [
    1bd8:	02ab0000 	adceq	r0, fp, #0
					i += 4;
    1bdc:	4d000000 	stcmi	0, cr0, [r0, #-0]
					(val >> (bc - i)) & 0xf];
    1be0:	00000953 	andeq	r0, r0, r3, asr r9
    1be4:	0101d312 	tsteq	r1, r2, lsl r3
					dgout (v);
    1be8:	00093e01 	andeq	r3, r9, r1, lsl #28
    1bec:	874e0300 	strbhi	r0, [lr, -r0, lsl #6]
				while (i < bc) {
    1bf0:	0000001b 	andeq	r0, r0, fp, lsl r0
			mess++;
    1bf4:	00000000 	andeq	r0, r0, r0
					d /= 10;
    1bf8:	01000000 	mrseq	r0, (UNDEF: 0)
				if ((val >> (bc - 1)) & 1) {
    1bfc:	001c129c 	mulseq	ip, ip, r2
    1c00:	1b9a3300 	blne	fe68e808 <_estack+0xde689808>
					dgout ('-');
    1c04:	02be0000 	adcseq	r0, lr, #0
    1c08:	a64f0000 	strbge	r0, [pc], -r0
						val |= 0xffff0000;
    1c0c:	0100001b 	tsteq	r0, fp, lsl r0
    1c10:	5b4e0051 	blpl	1381d5c <__ccfg+0x1361db4>
    1c14:	0000001b 	andeq	r0, r0, fp, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1c18:	00000000 	andeq	r0, r0, r0
    1c1c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c20:	001c369c 	mulseq	ip, ip, r6
					v = (word) (val / d);
    1c24:	1b6e3300 	blne	1b8e82c <__ccfg+0x1b6e884>
					if (v || d == 1) break;
    1c28:	02d10000 	sbcseq	r0, r1, #0
    1c2c:	7a4f0000 	bvc	13c1c34 <__ccfg+0x13a1c8c>
					d /= 10;
    1c30:	0100001b 	tsteq	r0, fp, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1c34:	7b4e0051 	blvc	1381d80 <__ccfg+0x1361dd8>
					dgout (v + '0');
    1c38:	0000001a 	andeq	r0, r0, sl, lsl r0
    1c3c:	00000000 	andeq	r0, r0, r0
    1c40:	01000000 	mrseq	r0, (UNDEF: 0)
					d /= 10;
    1c44:	001c669c 	mulseq	ip, ip, r6
					val = val - (v * d);
    1c48:	1a8e3300 	bne	fe38e850 <_estack+0xde389850>
					if (d == 0) break;
    1c4c:	02e40000 	rsceq	r0, r4, #0
					v = (word) (val / d);
    1c50:	9a4f0000 	bls	13c1c58 <__ccfg+0x13a1cb0>
    1c54:	0100001a 	tsteq	r0, sl, lsl r0
				if (bc == 16)
    1c58:	1aa64f51 	bne	fe9959a4 <_estack+0xde9909a4>
				d = (bc == 16) ? 10000 : 1000000000;
    1c5c:	52010000 	andpl	r0, r1, #0
					val &= 0xffff;
    1c60:	001ab23b 	andseq	fp, sl, fp, lsr r2
					dgout (*s);
    1c64:	d14e0000 	mrsle	r0, (UNDEF: 78)
					s++;
    1c68:	00000019 	andeq	r0, r0, r9, lsl r0
				while (*s != '\0') {
    1c6c:	00000000 	andeq	r0, r0, r0
    1c70:	01000000 	mrseq	r0, (UNDEF: 0)
			dgout (*mess++);
    1c74:	001c8c9c 	mulseq	ip, ip, ip
    1c78:	19e43300 	stmibne	r4!, {r8, r9, ip, sp}^
    1c7c:	02f70000 	rscseq	r0, r7, #0
    1c80:	f0330000 			; <UNDEFINED> instruction: 0xf0330000
    1c84:	0a000019 	beq	1cf0 <enq+0x4>
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1c88:	00000003 	andeq	r0, r0, r3
    1c8c:	00191850 	andseq	r1, r9, r0, asr r8
	...
	^ entropy
    1c98:	339c0100 	orrscc	r0, ip, #0, 2
}
    1c9c:	0000192b 	andeq	r1, r0, fp, lsr #18
    1ca0:	0000031d 	andeq	r0, r0, sp, lsl r3
    1ca4:	00193733 	andseq	r3, r9, r3, lsr r7
    1ca8:	00033000 	andeq	r3, r3, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1cac:	19433300 	stmdbne	r3, {r8, r9, ip, sp}^
	word cs = size + hblenb;
    1cb0:	03430000 	movteq	r0, #12288	; 0x3000
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1cb4:	4f330000 	svcmi	0x00330000
    1cb8:	56000019 			; <UNDEFINED> instruction: 0x56000019
	p -> length = size;
    1cbc:	4f000003 	svcmi	0x00000003
}
    1cc0:	0000195b 	andeq	r1, r0, fp, asr r9
	if (p->attributes.b.queued) {
    1cc4:	4f009102 	svcmi	0x00009102
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1cc8:	00001967 	andeq	r1, r0, r7, ror #18
    1ccc:	4f049102 	svcmi	0x00049102
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1cd0:	00001973 	andeq	r1, r0, r3, ror r9
		p->attributes.b.queued = 0;
    1cd4:	3b089102 	blcc	2260e4 <__ccfg+0x20613c>
    1cd8:	0000197f 	andeq	r1, r0, pc, ror r9
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1cdc:	148c0000 	strne	r0, [ip], #0
	deq (p);	// Remove from queue
    1ce0:	00030000 	andeq	r0, r3, r0
}
    1ce4:	00000497 	muleq	r0, r7, r4
	tfree ((address)p);
    1ce8:	00a30104 	adceq	r0, r3, r4, lsl #2
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cec:	8a0c0000 	bhi	301cf4 <__ccfg+0x2e1d4c>
    1cf0:	08000012 	stmdaeq	r0, {r1, r4}
    1cf4:	5000000e 	andpl	r0, r0, lr
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf8:	00000006 	andeq	r0, r0, r6
    1cfc:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
	if (q_empty (q))
    1d00:	0200000c 	andeq	r0, r0, #12
    1d04:	0c690601 	stcleq	6, cr0, [r9], #-4
		trigger (q);
    1d08:	02020000 	andeq	r0, r2, #0
	if (p->attributes.b.urgent) {
    1d0c:	000a7705 	andeq	r7, sl, r5, lsl #14
		p->u.bqueue.next = q->next;
    1d10:	2b9f0300 	blcs	fe7c2918 <_estack+0xde7bd918>
		p->u.bqueue.prev = q;
    1d14:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
		q->next->prev = (qitem_t*) p;
    1d18:	00003f18 	andeq	r3, r0, r8, lsl pc
	p->attributes.b.queued = 1;
    1d1c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1d20:	00000809 	andeq	r0, r0, r9, lsl #16
}
    1d24:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
		p->u.bqueue.prev = q->prev;
    1d28:	03000008 	movweq	r0, #8
		q->prev->next = (qitem_t*) p;
    1d2c:	00002a1a 	andeq	r2, r0, sl, lsl sl
		q->prev = (qitem_t*) p;
    1d30:	59182e10 	ldmdbpl	r8, {r4, r9, sl, fp, sp}
    1d34:	02000000 	andeq	r0, r0, #0
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1d38:	0c670801 	stcleq	8, cr0, [r7], #-4
	deq (p);	// Soft dequeue, timer and hook left intact
    1d3c:	10030000 	andne	r0, r3, r0
	switch (dv) {
    1d40:	1000002e 	andne	r0, r0, lr, lsr #32
    1d44:	006c1931 	rsbeq	r1, ip, r1, lsr r9
    1d48:	02020000 	andeq	r0, r2, #0
    1d4c:	000d6407 	andeq	r6, sp, r7, lsl #8
			p->attributes.b.urgent = 1;
    1d50:	29b20300 	ldmibcs	r2!, {r8, r9}
    1d54:	34100000 	ldrcc	r0, [r0], #-0
			verify_ses (p, "dispose ses");
    1d58:	00007f19 	andeq	r7, r0, r9, lsl pc
    1d5c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1d60:	00000439 	andeq	r0, r0, r9, lsr r4
    1d64:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    1d68:	04000004 	streq	r0, [r0], #-4
			verify_phy (p, "dispose phy");
    1d6c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1d70:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
}
    1d74:	00043e07 	andeq	r3, r4, r7, lsl #28
			enq (oqueues [p->attributes.b.phys], p);
    1d78:	13260300 			; <UNDEFINED> instruction: 0x13260300
			p->attributes.b.urgent = 1;
    1d7c:	26110000 	ldrcs	r0, [r1], -r0
    1d80:	00004d12 	andeq	r4, r0, r2, lsl sp
			verify_phy (p, "dispose phy");
    1d84:	28f90300 	ldmcs	r9!, {r8, r9}^
    1d88:	27110000 	ldrcs	r0, [r1, -r0]
    1d8c:	00006012 	andeq	r6, r0, r2, lsl r0
    1d90:	00a70500 	adceq	r0, r7, r0, lsl #10
    1d94:	a7060000 	strge	r0, [r6, -r0]
    1d98:	03000000 	movweq	r0, #0
			enq (oqueues [p->attributes.b.phys], p);
    1d9c:	000013ca 	andeq	r1, r0, sl, asr #7
    1da0:	33122811 	tstcc	r2, #1114112	; 0x110000
}
    1da4:	03000000 	movweq	r0, #0
			rlp (p);
    1da8:	00001dc0 	andeq	r1, r0, r0, asr #27
}
    1dac:	4d122b11 	vldrmi	d2, [r2, #-68]	; 0xffffffbc
    1db0:	06000000 	streq	r0, [r0], -r0
    1db4:	000000c9 	andeq	r0, r0, r9, asr #1
    1db8:	0000c905 	andeq	ip, r0, r5, lsl #18
    1dbc:	294b0300 	stmdbcs	fp, {r8, r9}^
    1dc0:	2c110000 	ldccs	0, cr0, [r1], {-0}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1dc4:	00007312 	andeq	r7, r0, r2, lsl r3
	if (b->attributes.b.outgoing) {
    1dc8:	00df0500 	sbcseq	r0, pc, r0, lsl #10
	b = header (p);
    1dcc:	52030000 	andpl	r0, r3, #0
	if (b->attributes.b.outgoing) {
    1dd0:	11000006 	tstne	r0, r6
		verify_ses (b, "tcv02");
    1dd4:	0073122d 	rsbseq	r1, r3, sp, lsr #4
    1dd8:	c0030000 	andgt	r0, r3, r0
    1ddc:	1100000b 	tstne	r0, fp
    1de0:	0108102e 	tsteq	r8, lr, lsr #32
    1de4:	04070000 	streq	r0, [r7], #-0
		verify_plg (b, tcv_out, "tcv03");
    1de8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1dec:	32110808 	andscc	r0, r1, #8, 16	; 0x80000
    1df0:	00019c09 	andeq	r9, r1, r9, lsl #24
    1df4:	002b0900 	eoreq	r0, fp, r0, lsl #18
    1df8:	34110000 	ldrcc	r0, [r1], #-0
    1dfc:	0000c907 	andeq	ip, r0, r7, lsl #18
    1e00:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1e04:	06580900 	ldrbeq	r0, [r8], -r0, lsl #18
    1e08:	35110000 	ldrcc	r0, [r1, #-0]
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e0c:	0000c903 	andeq	ip, r0, r3, lsl #18
}
    1e10:	06010100 	streq	r0, [r1], -r0, lsl #2
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e14:	02ef0900 	rsceq	r0, pc, #0, 18
		rlp (b);
    1e18:	36110000 	ldrcc	r0, [r1], -r0
}
    1e1c:	0000c903 	andeq	ip, r0, r3, lsl #18
		rlp (b);
    1e20:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e24:	06c30900 	strbeq	r0, [r3], r0, lsl #18
    1e28:	37110000 	ldrcc	r0, [r1, -r0]
    1e2c:	0000c903 	andeq	ip, r0, r3, lsl #18
    1e30:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e34:	0aab0900 	beq	feac423c <_estack+0xdeabf23c>
    1e38:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    1e3c:	0000c903 	andeq	ip, r0, r3, lsl #18
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e40:	00040100 	andeq	r0, r4, r0, lsl #2
	va_start (ap, plid);
    1e44:	06670a00 	strbteq	r0, [r7], -r0, lsl #20
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e48:	3a110000 	bcc	441e50 <__ccfg+0x421ea8>
    1e4c:	0000c907 	andeq	ip, r0, r7, lsl #18
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1e50:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    1e54:	11000009 	tstne	r0, r9
    1e58:	00c9033c 	sbceq	r0, r9, ip, lsr r3
    1e5c:	0a020000 	beq	81e64 <__ccfg+0x61ebc>
			syserror (ENODEVICE, "tcv04");
    1e60:	00000f38 	andeq	r0, r0, r8, lsr pc
		syserror (EMALLOC, "tcv05");
    1e64:	c9033d11 	stmdbgt	r3, {r0, r4, r8, sl, fp, ip, sp}
	attp.b.outgoing = 1;
    1e68:	03000000 	movweq	r0, #0
    1e6c:	00091f0a 	andeq	r1, r9, sl, lsl #30
    1e70:	083f1100 	ldmdaeq	pc!, {r8, ip}	; <UNPREDICTABLE>
    1e74:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e78:	25030004 	strcs	r0, [r3, #-4]
		if (descriptors [fd] == NULL)
    1e7c:	11000003 	tstne	r0, r3
    1e80:	010e0341 	tsteq	lr, r1, asr #6
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e84:	9c060000 	stcls	0, cr0, [r6], {-0}
		return ERROR;
    1e88:	0b000001 	bleq	1e94 <tcv_open+0x60>
}
    1e8c:	000006ca 	andeq	r0, r0, sl, asr #13
    1e90:	a81a4311 	ldmdage	sl, {r0, r4, r8, r9, lr}
    1e94:	01000001 	tsteq	r0, r1
	s->attpattern.b.session = fd;
    1e98:	01970b01 	orrseq	r0, r7, r1, lsl #22
    1e9c:	45110000 	ldrmi	r0, [r1, #-0]
	descriptors [fd] = s;
    1ea0:	0001c90e 	andeq	ip, r1, lr, lsl #18
	q_init (&(s->rqueue));
    1ea4:	07010100 	streq	r0, [r1, -r0, lsl #2]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1ea8:	0001cf04 	andeq	ip, r1, r4, lsl #30
    1eac:	08010200 	stmdaeq	r1, {r9}
    1eb0:	00000c70 	andeq	r0, r0, r0, ror ip
    1eb4:	0001cf05 	andeq	ip, r1, r5, lsl #30
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1eb8:	032e0b00 			; <UNDEFINED> instruction: 0x032e0b00
    1ebc:	45110000 	ldrmi	r0, [r1, #-0]
    1ec0:	0001c91e 	andeq	ip, r1, lr, lsl r9
	descriptors [fd] = s;
    1ec4:	08010100 	stmdaeq	r1, {r8}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1ec8:	098f1208 	stmibeq	pc, {r3, r9, ip}	; <UNPREDICTABLE>
    1ecc:	0000021a 	andeq	r0, r0, sl, lsl r2
	if (s == NULL)
    1ed0:	000cd60a 	andeq	sp, ip, sl, lsl #12
		syserror (EMALLOC, "tcv05");
    1ed4:	0b901200 	bleq	fe4066dc <_estack+0xde4016dc>
    1ed8:	00000073 	andeq	r0, r0, r3, ror r0
    1edc:	10730a00 	rsbsne	r0, r3, r0, lsl #20
    1ee0:	91120000 	tstls	r2, r0
    1ee4:	0000a708 	andeq	sl, r0, r8, lsl #14
    1ee8:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
    1eec:	12000001 	andne	r0, r0, #1
    1ef0:	00d51092 	smullseq	r1, r5, r2, r0
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ef4:	00060000 	andeq	r0, r6, r0
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ef8:	000cca03 	andeq	ip, ip, r3, lsl #20
    1efc:	03931200 	orrseq	r1, r3, #0, 4
    1f00:	000001e9 	andeq	r0, r0, r9, ror #3
	plugins [ord] = pl;
    1f04:	00021a05 	andeq	r1, r2, r5, lsl #20
	return 0;
    1f08:	021a0c00 	andseq	r0, sl, #0, 24
		return ERROR;
    1f0c:	02360000 	eorseq	r0, r6, #0
}
    1f10:	000d0000 	andeq	r0, sp, r0
    1f14:	0009490b 	andeq	r4, r9, fp, lsl #18
	verify_fds (fd, "tcv10");
    1f18:	0f991200 	svceq	0x00991200
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1f1c:	0000022b 	andeq	r0, r0, fp, lsr #4
	verify_fds (fd, "tcv10");
    1f20:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    1f24:	000000da 	ldrdeq	r0, [r0], -sl
    1f28:	91130108 	tstls	r3, r8, lsl #2
	verify_plg (b, tcv_frm, "tcv11");
    1f2c:	00027409 	andeq	r7, r2, r9, lsl #8
	b = q_first (rq);
    1f30:	09260900 	stmdbeq	r6!, {r8, fp}
	if (q_end (b, rq)) {
    1f34:	93130000 	tstls	r3, #0
		if (state != WNONE) {
    1f38:	0000c907 	andeq	ip, r0, r7, lsl #18
    1f3c:	01070100 	mrseq	r0, (UNDEF: 23)
			when (rq, state);
    1f40:	05d80900 	ldrbeq	r0, [r8, #2304]	; 0x900
			release;
    1f44:	94130000 	ldrls	r0, [r3], #-0
	deq (b);	// Dequeue the packet ...
    1f48:	0000c903 	andeq	ip, r0, r3, lsl #18
    1f4c:	00010100 	andeq	r0, r1, r0, lsl #2
	p = ((address)(b + 1));
    1f50:	b7030000 	strlt	r0, [r3, -r0]
	verify_plg (b, tcv_frm, "tcv11");
    1f54:	1300000a 	movwne	r0, #10
    1f58:	024a0396 	subeq	r0, sl, #1476395010	; 0x58000002
    1f5c:	74050000 	strvc	r0, [r5], #-0
    1f60:	0c000002 	stceq	0, cr0, [r0], {2}
    1f64:	00000280 	andeq	r0, r0, r0, lsl #5
    1f68:	00000290 	muleq	r0, r0, r2
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1f6c:	8505000d 	strhi	r0, [r5, #-13]
    1f70:	0b000002 	bleq	1f80 <tcv_rnp+0x68>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1f74:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    1f78:	90179c13 	andsls	r9, r7, r3, lsl ip
	b->u.pointers.tail =
    1f7c:	01000002 	tsteq	r0, r2
}
    1f80:	00b30c01 	adcseq	r0, r3, r1, lsl #24
		return NULL;
    1f84:	02ae0000 	adceq	r0, lr, #0
    1f88:	000d0000 	andeq	r0, sp, r0
    1f8c:	0002a305 	andeq	sl, r2, r5, lsl #6
    1f90:	061a0b00 	ldreq	r0, [sl], -r0, lsl #22
    1f94:	06140000 	ldreq	r0, [r4], -r0
	verify_fds (fd, "tcv16");
    1f98:	0002ae13 	andeq	sl, r2, r3, lsl lr
								Boolean urg) {
    1f9c:	0b010100 	bleq	423a4 <__ccfg+0x223fc>
    1fa0:	000008e9 	andeq	r0, r0, r9, ror #17
	verify_fds (fd, "tcv16");
    1fa4:	df0ec312 	svcle	0x000ec312
    1fa8:	01000000 	mrseq	r0, (UNDEF: 0)
    1fac:	0c7e0e01 	ldcleq	14, cr0, [lr], #-4
	verify_pld (s, tcv_frm, "tcv17");
    1fb0:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
    1fb4:	02dc1001 	sbcseq	r1, ip, #1
    1fb8:	04070000 	streq	r0, [r7], #-0
    1fbc:	000002e2 	andeq	r0, r0, r2, ror #5
    1fc0:	02ee010f 	rsceq	r0, lr, #-1073741821	; 0xc0000003
    1fc4:	a7100000 	ldrge	r0, [r0, -r0]
    1fc8:	00000000 	andeq	r0, r0, r0
    1fcc:	0001d60c 	andeq	sp, r1, ip, lsl #12
	ptrs.head = (word) fd;
    1fd0:	0002f900 	andeq	pc, r2, r0, lsl #18
	ptrs.tail = (word) urg;
    1fd4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd8:	000002ee 	andeq	r0, r0, lr, ror #5
    1fdc:	0009f211 	andeq	pc, r9, r1, lsl r2	; <UNPREDICTABLE>
		if (state != WNONE) {
    1fe0:	017f1500 	cmneq	pc, r0, lsl #10
    1fe4:	0002f916 	andeq	pc, r2, r6, lsl r9	; <UNPREDICTABLE>
}
    1fe8:	11010100 	mrsne	r0, (UNDEF: 17)
			when (eid, state);
    1fec:	000003a9 	andeq	r0, r0, r9, lsr #7
    1ff0:	14018215 	strne	r8, [r1], #-533	; 0xfffffdeb
			release;
    1ff4:	000000eb 	andeq	r0, r0, fp, ror #1
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1ff8:	81110101 	tsthi	r1, r1, lsl #2
    1ffc:	15000003 	strne	r0, [r0, #-3]
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2000:	df0e02d8 	svcle	0x000e02d8
    2004:	01000000 	mrseq	r0, (UNDEF: 0)
    2008:	15081201 	strne	r1, [r8, #-513]	; 0xfffffdff
    200c:	52090303 	andpl	r0, r9, #201326592	; 0xc000000
    2010:	13000003 	movwne	r0, #3
    2014:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
		if (state != WNONE) {
    2018:	07030715 	smladeq	r3, r5, r7, r0
    201c:	000000a7 	andeq	r0, r0, r7, lsr #1
			tmwait (state);
    2020:	0fcb1300 	svceq	0x00cb1300
    2024:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
	b->attributes = s->attpattern;
    2028:	00f00803 	rscseq	r0, r0, r3, lsl #16
		b->attributes.b.urgent = 1;
    202c:	00040000 	andeq	r0, r4, r0
    2030:	000a150e 	andeq	r1, sl, lr, lsl #10
	b->u.pointers.head = ptrs.head;
    2034:	03091500 	movweq	r1, #38144	; 0x9500
	b->u.pointers.tail = length;
    2038:	00032b03 	andeq	r2, r3, r3, lsl #22
	return (address) (b + 1);
    203c:	00201400 	eoreq	r1, r0, r0, lsl #8
    2040:	15300000 	ldrne	r0, [r0, #-0]!
    2044:	c208030b 	andgt	r0, r8, #738197504	; 0x2c000000
    2048:	13000003 	movwne	r0, #3
    204c:	00001f22 	andeq	r1, r0, r2, lsr #30
    2050:	08031415 	stmdaeq	r3, {r0, r2, r4, sl, ip}
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2054:	000000a7 	andeq	r0, r0, r7, lsr #1
	if (len >= b->u.pointers.tail)
    2058:	0bf31300 	bleq	ffcc6c60 <_estack+0xdfcc1c60>
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    205c:	15150000 	ldrne	r0, [r5, #-0]
    2060:	00a70803 	adceq	r0, r7, r3, lsl #16
	if (len > 0) {
    2064:	13020000 	movwne	r0, #8192	; 0x2000
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2068:	00004c8c 	andeq	r4, r0, ip, lsl #25
    206c:	0b031615 	bleq	c78c8 <__ccfg+0xa7920>
    2070:	000002cf 	andeq	r0, r0, pc, asr #5
		b->u.pointers.tail -= len;
    2074:	47521304 	ldrbmi	r1, [r2, -r4, lsl #6]
    2078:	17150000 	ldrne	r0, [r5, -r0]
    207c:	00f00903 	rscseq	r0, r0, r3, lsl #18
		b->u.pointers.head += len;
    2080:	13080000 	movwne	r0, #32768	; 0x8000
    2084:	0000000f 	andeq	r0, r0, pc
    2088:	0f031815 	svceq	0x00031815
}
    208c:	000003c2 	andeq	r0, r0, r2, asr #7
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2090:	0969130c 	stmdbeq	r9!, {r2, r3, r8, r9, ip}^
    2094:	19150000 	ldmdbne	r5, {}	; <UNPREDICTABLE>
    2098:	03d21503 	bicseq	r1, r2, #12582912	; 0xc00000
	verify_fph (phy, "tcv23");
    209c:	002c0000 	eoreq	r0, ip, r0
    20a0:	0003520c 	andeq	r5, r3, ip, lsl #4
    20a4:	0003d200 	andeq	sp, r3, r0, lsl #4
    20a8:	00941500 	addseq	r1, r4, r0, lsl #10
}
    20ac:	00030000 	andeq	r0, r3, r0
	return (physical [phy]) (opt, arg);
    20b0:	035f0407 	cmpeq	pc, #117440512	; 0x7000000
    20b4:	e80e0000 	stmda	lr, {}	; <UNPREDICTABLE>
    20b8:	1500000b 	strne	r0, [r0, #-11]
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    20bc:	5f1b031c 	svcpl	0x001b031c
	if (opt < 0) {
    20c0:	11000003 	tstne	r0, r3
		if (fd < 0)
    20c4:	00000bc8 	andeq	r0, r0, r8, asr #23
		if (opt == PHYSOPT_PLUGINFO) {
    20c8:	14031e15 	strne	r1, [r3], #-3605	; 0xfffff1eb
			if (fd >= TCV_MAX_PLUGS)
    20cc:	000003f4 	strdeq	r0, [r0], -r4
			if ((p = plugins [fd]) == NULL)
    20d0:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    20d4:	000003d8 	ldrdeq	r0, [r0], -r8
}
    20d8:	00071b0b 	andeq	r1, r7, fp, lsl #22
		if (fd >= TCV_MAX_PHYS)
    20dc:	131d1600 	tstne	sp, #0, 12
		return physinfo [fd];
    20e0:	000000a7 	andeq	r0, r0, r7, lsr #1
    20e4:	f60b0101 			; <UNDEFINED> instruction: 0xf60b0101
	verify_fds (fd, "tcv22");
    20e8:	16000002 	strne	r0, [r0], -r2
    20ec:	00b81a1e 	adcseq	r1, r8, lr, lsl sl
    20f0:	01010000 	mrseq	r0, (UNDEF: 1)
    20f4:	000c750b 	andeq	r7, ip, fp, lsl #10
    20f8:	241e1600 	ldrcs	r1, [lr], #-1536	; 0xfffffa00
}
    20fc:	000000b8 	strheq	r0, [r0], -r8
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2100:	930b0101 	movwls	r0, #45313	; 0xb101
    2104:	1600000c 	strne	r0, [r0], -ip
			return 0;
    2108:	03f41422 	mvnseq	r1, #570425344	; 0x22000000
    210c:	01010000 	mrseq	r0, (UNDEF: 1)
    2110:	000faf03 	andeq	sl, pc, r3, lsl #30
    2114:	10431600 	subne	r1, r3, r0, lsl #12
    2118:	0000043e 	andeq	r0, r0, lr, lsr r4
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    211c:	04440407 	strbeq	r0, [r4], #-1031	; 0xfffffbf9
    2120:	010f0000 	mrseq	r0, CPSR
	if (dsp != TCV_DSP_PASS) {
    2124:	00000450 	andeq	r0, r0, r0, asr r4
		if (ses == NONE)
    2128:	00008d10 	andeq	r8, r0, r0, lsl sp
			syserror (EREQPAR, "tcv26");
    212c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
		verify_fds (ses, "tcv27");
    2130:	74094616 	strvc	r4, [r9], #-1558	; 0xfffff9ea
    2134:	0a000004 	beq	214c <tcvp_new+0x30>
    2138:	00001515 	andeq	r1, r0, r5, lsl r5
    213c:	320f4a16 	andcc	r4, pc, #90112	; 0x16000
    2140:	00000004 	andeq	r0, r0, r4
		if ((p = apb (size)) != NULL) {
    2144:	0012070a 	andseq	r0, r2, sl, lsl #14
    2148:	074b1600 	strbeq	r1, [fp, -r0, lsl #12]
		return NULL;
    214c:	0000008d 	andeq	r0, r0, sp, lsl #1
			p->attributes = descriptors [ses] -> attpattern;
    2150:	35030004 	strcc	r0, [r3, #-4]
			dispose (p, dsp);
    2154:	16000010 			; <UNDEFINED> instruction: 0x16000010
			p->attributes = descriptors [ses] -> attpattern;
    2158:	0450034c 	ldrbeq	r0, [r0], #-844	; 0xfffffcb4
			p->attributes.b.outgoing = 0;
    215c:	74050000 	strvc	r0, [r5], #-0
			dispose (p, dsp);
    2160:	0c000004 	stceq	0, cr0, [r0], {4}
			return (address)(p + 1);
    2164:	000000fc 	strdeq	r0, [r0], -ip
    2168:	00000495 	muleq	r0, r5, r4
	if ((p = apb (size)) != NULL)
    216c:	00009415 	andeq	r9, r0, r5, lsl r4
    2170:	0b000300 	bleq	2d78 <RFCCPE0IntHandler+0x20>
		return (address)(p + 1);
    2174:	000013bf 			; <UNDEFINED> instruction: 0x000013bf
    2178:	85120d01 	ldrhi	r0, [r2, #-3329]	; 0xfffff2ff
    217c:	01000004 	tsteq	r0, r4
    2180:	04800c01 	streq	r0, [r0], #3073	; 0xc01
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2184:	04b30000 	ldrteq	r0, [r3], #0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2188:	94150000 	ldrls	r0, [r5], #-0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    218c:	01000000 	mrseq	r0, (UNDEF: 0)
    2190:	04a30500 	strteq	r0, [r3], #1280	; 0x500
		syserror (EREQPAR, "tcv28");
    2194:	db160000 	blle	58219c <__ccfg+0x5621f4>
		syserror (EMALLOC, "tcv29");
    2198:	01000013 	tsteq	r0, r3, lsl r0
	physical [phy] = ps;
    219c:	04b318cf 	ldrteq	r1, [r3], #2255	; 0x8cf
	physinfo [phy] = info;
    21a0:	eb0c0000 	bl	3021a8 <__ccfg+0x2e2200>
    21a4:	d4000000 	strle	r0, [r0], #-0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a8:	15000004 	strne	r0, [r0, #-4]
    21ac:	00000094 	muleq	r0, r4, r0
    21b0:	c4050010 	strgt	r0, [r5], #-16
		syserror (EMALLOC, "tcv29");
    21b4:	17000004 	strne	r0, [r0, -r4]
    21b8:	00001198 	muleq	r0, r8, r1
	q_init (q);
    21bc:	d40dec01 	strle	lr, [sp], #-3073	; 0xfffff3ff
}
    21c0:	01000004 	tsteq	r0, r4
    21c4:	4dfc0305 	ldclmi	3, cr0, [ip, #20]!
    21c8:	14180000 	ldrne	r0, [r8], #-0
    21cc:	01000010 	tsteq	r0, r0, lsl r0
    21d0:	a70d010c 	strge	r0, [sp, -ip, lsl #2]
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21d4:	05000000 	streq	r0, [r0, #-0]
	verify_fph (phy, "tcv30");
    21d8:	00057c03 	andeq	r7, r5, r3, lsl #24
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21dc:	02361920 	eorseq	r1, r6, #32, 18	; 0x80000
    21e0:	d0010000 	andle	r0, r1, r0
	verify_fph (phy, "tcv30");
    21e4:	03050802 	movweq	r0, #22530	; 0x5802
    21e8:	2000069c 	mulcs	r0, ip, r6
    21ec:	0000a70c 	andeq	sl, r0, ip, lsl #14
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    21f0:	00051e00 	andeq	r1, r5, r0, lsl #28
    21f4:	00941500 	addseq	r1, r4, r0, lsl #10
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    21f8:	00000000 	andeq	r0, r0, r0
    21fc:	000f9518 	andeq	r9, pc, r8, lsl r5	; <UNPREDICTABLE>
		if (plugins [plg] == NULL)
    2200:	02d20100 	sbcseq	r0, r2, #0, 2
    2204:	00050e0d 	andeq	r0, r5, sp, lsl #28
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2208:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
}
    220c:	19200005 	stmdbne	r0!, {r0, r2}
    2210:	000002c1 	andeq	r0, r0, r1, asr #5
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2214:	07048c01 	streq	r8, [r4, -r1, lsl #24]
    2218:	06a40305 	strteq	r0, [r4], r5, lsl #6
    221c:	011a2000 	tsteq	sl, r0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2220:	00000f89 	andeq	r0, r0, r9, lsl #31
    2224:	05057201 	streq	r7, [r5, #-513]	; 0xfffffdff
    2228:	00008d01 	andeq	r8, r0, r1, lsl #26
    222c:	00151400 	andseq	r1, r5, r0, lsl #8
    2230:	00157400 	andseq	r7, r5, r0, lsl #8
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2234:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
	len -= (ap.head + ap.tail);
    2238:	1b000005 	blne	2254 <tcvphy_rcv+0x80>
    223c:	00000638 	andeq	r0, r0, r8, lsr r6
    2240:	00000572 	andeq	r0, r0, r2, ror r5
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2244:	0100691c 	tsteq	r0, ip, lsl r9
    2248:	bd110576 	cfldr32lt	mvfx0, [r1, #-472]	; 0xfffffe28
    224c:	00000000 	andeq	r0, r0, r0
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2250:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
    2254:	00155600 	andseq	r5, r5, r0, lsl #12
    2258:	00155800 	andseq	r5, r5, r0, lsl #16
	return 1;
    225c:	058d0100 	streq	r0, [sp, #256]	; 0x100
    2260:	011e0002 	tsteq	lr, r2
    2264:	00001221 	andeq	r1, r0, r1, lsr #4
    2268:	21056801 	tstcs	r5, r1, lsl #16
    226c:	0000128c 	andeq	r1, r0, ip, lsl #5
	verify_fph (phy, "tcv32");
    2270:	000014e4 	andeq	r1, r0, r4, ror #9
    2274:	07e49c01 	strbeq	r9, [r4, r1, lsl #24]!
    2278:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    227c:	0d000012 	stceq	0, cr0, [r0, #-72]	; 0xffffffb8
    2280:	d0200108 	eorle	r0, r0, r8, lsl #2
    2284:	8c000011 	stchi	0, cr0, [r0], {17}
	oq = oqueues [phy];
    2288:	98000012 	stmdals	r0, {r1, r4}
	b = q_first (oq);
    228c:	01000004 	tsteq	r0, r4
	if (q_end (b, oq)) {
    2290:	bf02056a 	svclt	0x0002056a
	*len = b->length;
    2294:	21000005 	tstcs	r0, r5
	deq (b);	// Dequeue the packet ...
    2298:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
}
    229c:	08122200 	ldmdaeq	r2, {r9, sp}
		return NULL;
    22a0:	12a60000 	adcne	r0, r6, #0
    22a4:	04b80000 	ldrteq	r0, [r8], #0
    22a8:	270d0000 	strcs	r0, [sp, -r0]
    22ac:	0007b302 	andeq	fp, r7, r2, lsl #6
	verify_fph (phy, "tcv33");
    22b0:	04b82300 	ldrteq	r2, [r8], #768	; 0x300
    22b4:	20240000 	eorcs	r0, r4, r0
    22b8:	34000008 	strcc	r0, [r0], #-8
    22bc:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    22c0:	0000125c 	andeq	r1, r0, ip, asr r2
    22c4:	000012a6 	andeq	r1, r0, r6, lsr #5
	oq = oqueues [phy];
    22c8:	000004e0 	andeq	r0, r0, r0, ror #9
	b = q_first (oq);
    22cc:	0404b301 	streq	fp, [r4], #-769	; 0xfffffcff
		return NULL;
    22d0:	0014381d 	andseq	r3, r4, sp, lsl r8
	return (address)(b + 1);
    22d4:	00131e00 	andseq	r1, r3, r0, lsl #28
}
    22d8:	00132a00 	andseq	r2, r3, r0, lsl #20
    22dc:	04a40100 	strteq	r0, [r4], #256	; 0x100
    22e0:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    22e4:	13320000 	teqne	r2, #0
	verify_plg (b, tcv_xmt, "tcv34");
    22e8:	13340000 	teqne	r4, #0
	hblock_t *b = header (pkt);
    22ec:	aa010000 	bge	422f4 <__ccfg+0x2234c>
	verify_plg (b, tcv_xmt, "tcv34");
    22f0:	c0250404 	eorgt	r0, r5, r4, lsl #8
    22f4:	4a000012 	bmi	2344 <zero_loop+0x4>
    22f8:	f8000013 			; <UNDEFINED> instruction: 0xf8000013
    22fc:	01000004 	tsteq	r0, r4
    2300:	250404bb 	strcs	r0, [r4, #-1211]	; 0xfffffb45
    2304:	00001443 	andeq	r1, r0, r3, asr #8
    2308:	0000134a 	andeq	r1, r0, sl, asr #6
	dispose (b, plugins [b->attributes.b.plugin] ->
    230c:	00000518 	andeq	r0, r0, r8, lsl r5
}
    2310:	0404c501 	streq	ip, [r4], #-1281	; 0xfffffaff
	dispose (b, plugins [b->attributes.b.plugin] ->
    2314:	00128e20 	andseq	r8, r2, r0, lsr #28
    2318:	00135200 	andseq	r5, r3, r0, lsl #4
    231c:	00053800 	andeq	r3, r5, r0, lsl #16
}
    2320:	04c00100 	strbeq	r0, [r0], #256	; 0x100
    while(1)
    2324:	00065104 	andeq	r5, r6, r4, lsl #2
{
    2328:	129d2100 	addsne	r2, sp, #0, 2
    SetupTrimDevice();
    232c:	1d000000 	stcne	0, cr0, [r0, #-0]
    pui32Src = &_etext;
    2330:	0000125c 	andeq	r1, r0, ip, asr r2
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2334:	00001362 	andeq	r1, r0, r2, ror #6
    __asm("    ldr     r0, =_bss\n"
    2338:	00001364 	andeq	r1, r0, r4, ror #6
    233c:	0404c301 	streq	ip, [r4], #-769	; 0xfffffcff
    2340:	00142d25 	andseq	r2, r4, r5, lsr #26
    2344:	00136600 	andseq	r6, r3, r0, lsl #12
    2348:	00055800 	andeq	r5, r5, r0, lsl #16
   main();
    234c:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
    FaultISR();
    2350:	144e2004 	strbne	r2, [lr], #-4
        *pui32Dest++ = *pui32Src++;
    2354:	137c0000 	cmnne	ip, #0
    2358:	05780000 	ldrbeq	r0, [r8, #-0]!
    235c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2360:	068e0404 	streq	r0, [lr], r4, lsl #8
    2364:	5d210000 	stcpl	0, cr0, [r1, #-0]
    2368:	00000014 	andeq	r0, r0, r4, lsl r0
    236c:	00125c1d 	andseq	r5, r2, sp, lsl ip
    2370:	0013a000 	andseq	sl, r3, r0
static byte get_byte () {
    2374:	0013a200 	andseq	sl, r3, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2378:	04df0100 	ldrbeq	r0, [pc], #256	; 2380 <get_byte+0xc>
    237c:	14382504 	ldrtne	r2, [r8], #-1284	; 0xfffffafc
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2380:	13c00000 	bicne	r0, r0, #0
    2384:	05900000 	ldreq	r0, [r0]
		if (ee_inp)
    2388:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
			b |= 1;
    238c:	7f250404 	svcvc	0x00250404
    2390:	c4000012 	strgt	r0, [r0], #-18	; 0xffffffee
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2394:	a8000013 	stmdage	r0, {r0, r1, r4}
	for (b = 0, i = 0; i < 8; i++) {
    2398:	01000005 	tsteq	r0, r5
}
    239c:	260d04ee 	strcs	r0, [sp], -lr, ror #9
    23a0:	0000128e 	andeq	r1, r0, lr, lsl #5
    23a4:	000013ce 	andeq	r1, r0, lr, asr #7
static void put_byte (byte b) {
    23a8:	000013d2 	ldrdeq	r1, [r0], -r2
    23ac:	0404ed01 	streq	lr, [r4], #-3329	; 0xfffff2ff
    23b0:	000006dc 	ldrdeq	r0, [r0], -ip
    23b4:	00129d21 	andseq	r9, r2, r1, lsr #26
		if (b & 0x80)
    23b8:	43250000 			; <UNDEFINED> instruction: 0x43250000
    23bc:	f2000014 	vqadd.s8	d0, d0, d4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23c0:	c0000013 	andgt	r0, r0, r3, lsl r0
	for (i = 0; i < 8; i++) {
    23c4:	01000005 	tsteq	r0, r5
		b <<= 1;
    23c8:	200404f7 	strdcs	r0, [r4], -r7
	for (i = 0; i < 8; i++) {
    23cc:	0000144e 	andeq	r1, r0, lr, asr #8
}
    23d0:	000013f4 	strdeq	r1, [r0], -r4
    23d4:	000005d8 	ldrdeq	r0, [r0], -r8
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    23d8:	0404fa01 	streq	pc, [r4], #-2561	; 0xfffff5ff
    23dc:	00000708 	andeq	r0, r0, r8, lsl #14
	put_byte (cmd);
    23e0:	00145d21 	andseq	r5, r4, r1, lsr #26
    23e4:	b61d0000 	ldrlt	r0, [sp], -r0
}
    23e8:	fc000012 	stc2	0, cr0, [r0], {18}
    23ec:	00000013 	andeq	r0, r0, r3, lsl r0
static void wwait (word st, word del) {
    23f0:	01000014 	tsteq	r0, r4, lsl r0
    23f4:	1d0404fd 	cfstrsne	mvf0, [r4, #-1012]	; 0xfffffc0c
    23f8:	0000125c 	andeq	r1, r0, ip, asr r2
	while (dopen && (rdsr () & 1)) {
    23fc:	00001400 	andeq	r1, r0, r0, lsl #8
    2400:	00001402 	andeq	r1, r0, r2, lsl #8
    2404:	04050001 	streq	r0, [r5], #-1
    2408:	000b9526 	andeq	r9, fp, r6, lsr #10
	put_byte (CMD_RDSR);
    240c:	00140a00 	andseq	r0, r4, r0, lsl #20
	r = get_byte ();
    2410:	00141600 	andseq	r1, r4, r0, lsl #12
    2414:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
	while (dopen && (rdsr () & 1)) {
    2418:	00075c04 	andeq	r5, r7, r4, lsl #24
}
    241c:	13112700 	tstne	r1, #0, 14
		if (st == WNONE)
    2420:	140a0000 	strne	r0, [sl], #-0
    2424:	14140000 	ldrne	r0, [r4], #-0
			mdelay (1);
    2428:	bd010000 	stclt	0, cr0, [r1, #-0]
    242c:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
			delay (del, st);
    2430:	21000013 	tstcs	r0, r3, lsl r0
    2434:	00001320 	andeq	r1, r0, r0, lsr #6
			release;
    2438:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
    243c:	3e000012 	mcrcc	0, 0, r0, cr0, cr2, {0}
    2440:	40000014 	andmi	r0, r0, r4, lsl r0
static void ready () {
    2444:	01000014 	tsteq	r0, r4, lsl r0
	if (dopen) {
    2448:	1d04053e 	cfstr32ne	mvfx0, [r4, #-248]	; 0xffffff08
		wwait (WNONE, 1);
    244c:	00001274 	andeq	r1, r0, r4, ror r2
    2450:	00001440 	andeq	r1, r0, r0, asr #8
    2454:	00001450 	andeq	r1, r0, r0, asr r4
	dstat = 0;
    2458:	04054101 	streq	r4, [r5], #-257	; 0xfffffeff
}
    245c:	00125c1d 	andseq	r5, r2, sp, lsl ip
    2460:	00145000 	andseq	r5, r4, r0
    2464:	00145200 	andseq	r5, r4, r0, lsl #4
	udelay (1);
    2468:	05440100 	strbeq	r0, [r4, #-256]	; 0xffffff00
    246c:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
	udelay (1);
    2470:	14520000 	ldrbne	r0, [r2], #-0
		dopen = DOPEN_TEMP;
    2474:	05f00000 	ldrbeq	r0, [r0, #0]!
    2478:	47010000 	strmi	r0, [r1, -r0]
    247c:	6b250b05 	blvs	945098 <__ccfg+0x9250f0>
    2480:	5a000014 	bpl	24d8 <ser_out+0x8>
static void cclose () {
    2484:	08000014 	stmdaeq	r0, {r2, r4}
	if (dopen == DOPEN_TEMP) {
    2488:	01000006 	tsteq	r0, r6
    248c:	0004054b 	andeq	r0, r4, fp, asr #10
		wwait (WNONE, 1);
    2490:	11ed2800 	mvnne	r2, r0, lsl #16
    2494:	12c00000 	sbcne	r0, r0, #0
	cmd_0 (CMD_DP);
    2498:	12c20000 	sbcne	r0, r2, #0
    249c:	270d0000 	strcs	r0, [sp, -r0]
		dopen = 0;
    24a0:	11f72802 	mvnsne	r2, r2, lsl #16
}
    24a4:	12ee0000 	rscne	r0, lr, #0
word ee_open () {
    24a8:	12f00000 	rscsne	r0, r0, #0
	ready ();
    24ac:	270d0000 	strcs	r0, [sp, -r0]
	dopen = DOPEN_PERM;
    24b0:	11f72802 	mvnsne	r2, r2, lsl #16
    24b4:	14740000 	ldrbtne	r0, [r4], #-0
}
    24b8:	14760000 	ldrbtne	r0, [r6], #-0
	if (dopen) {
    24bc:	270d0000 	strcs	r0, [sp, -r0]
    24c0:	011a0002 	tsteq	sl, r2
		dopen = DOPEN_TEMP;
    24c4:	000012df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
		cclose ();
    24c8:	06055c01 	streq	r5, [r5], -r1, lsl #24
}
    24cc:	0000a701 	andeq	sl, r0, r1, lsl #14
	...
	if ((prcs = running (__outserial)) != 0) {
    24d8:	129c0100 	addsne	r0, ip, #0, 2
    24dc:	29000008 	stmdbcs	r0, {r3}
		join (prcs, st);
    24e0:	01006373 	tsteq	r0, r3, ror r3
		release;
    24e4:	a707055e 	smlsdge	r7, lr, r5, r0
	if (*m)
    24e8:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
		prcs = strlen (m) +1;
    24ec:	00000003 	andeq	r0, r0, r3
    24f0:	0011c12a 	andseq	ip, r1, sl, lsr #2
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    24f4:	048e0100 	streq	r0, [lr], #256	; 0x100
    24f8:	082a0314 	stmdaeq	sl!, {r2, r4, r8, r9}
    24fc:	6c2b0000 	stcvs	0, cr0, [fp], #-0
		umwait (st);
    2500:	01000014 	tsteq	r0, r4, lsl r0
    2504:	000104ad 	andeq	r0, r1, sp, lsr #9
		prcs =  m [1] + 3;
    2508:	116e012c 	cmnne	lr, ip, lsr #2
	if (*m)
    250c:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
		strcpy (buf, m);
    2510:	68010604 	stmdavs	r1, {r2, r9, sl}
    2514:	8c000012 	stchi	0, cr0, [r0], {18}
	if (runstrand (__outserial, buf) == 0) {
    2518:	01000012 	tsteq	r0, r2, lsl r0
    251c:	0008559c 	muleq	r8, ip, r5
		ufree (buf);
    2520:	002d2d00 	eoreq	r2, sp, r0, lsl #26
    2524:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
		memcpy (buf, m, prcs);
    2528:	00a71904 	adceq	r1, r7, r4, lsl #18
    252c:	037c0000 	cmneq	ip, #0
    2530:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
}
    2534:	000ff301 	andeq	pc, pc, r1, lsl #6
    2538:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
int ser_in (word st, char *buf, int len) {
    253c:	0010b006 	andseq	fp, r0, r6
    2540:	00126800 	andseq	r6, r2, r0, lsl #16
	if (len == 0)
    2544:	1e9c0100 	fmlnee	f0, f4, f0
	if (__inpline == NULL) {
    2548:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
		if ((prcs = running (__inserial)) == 0) {
    254c:	000011da 	ldrdeq	r1, [r0], -sl
    2550:	000011e0 	andeq	r1, r0, r0, ror #3
			prcs = runthread (__inserial);
    2554:	00000886 	andeq	r0, r0, r6, lsl #17
    2558:	0100691c 	tsteq	r0, ip, lsl r9
			if (prcs == 0) {
    255c:	8d0b046b 	cfstrshi	mvf0, [fp, #-428]	; 0xfffffe54
				npwait (st);
    2560:	00000000 	andeq	r0, r0, r0
		release;
    2564:	00144325 	andseq	r4, r4, r5, lsr #6
		join (prcs, st);
    2568:	0010da00 	andseq	sp, r0, r0, lsl #20
    256c:	00037800 	andeq	r7, r3, r0, lsl #16
	if (*__inpline == NULL) // bin cmd
    2570:	04080100 	streq	r0, [r8], #-256	; 0xffffff00
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2574:	0f542002 	svceq	0x00542002
	if (prcs >= len)
    2578:	10dc0000 	sbcsne	r0, ip, r0
		prcs = len-1;
    257c:	03980000 	orrseq	r0, r8, #0
	memcpy (buf, __inpline, prcs);
    2580:	0b010000 	bleq	42588 <__ccfg+0x225e0>
    2584:	091a0204 	ldmdbeq	sl, {r2, r9}
    2588:	98230000 	stmdals	r3!, {}	; <UNPREDICTABLE>
	ufree (__inpline);
    258c:	2f000003 	svccs	0x00000003
	__inpline = NULL;
    2590:	00000f61 	andeq	r0, r0, r1, ror #30
	if (*buf) // if it's NULL, it's a bin cmd
    2594:	000f6d30 	andeq	r6, pc, r0, lsr sp	; <UNPREDICTABLE>
		buf [prcs] = '\0';
    2598:	00039800 	andeq	r9, r3, r0, lsl #16
}
    259c:	0f6e3100 	svceq	0x006e3100
		prcs = strlen (__inpline);
    25a0:	038f0000 	orreq	r0, pc, #0
    25a4:	c9220000 	stmdbgt	r2!, {}	; <UNPREDICTABLE>
		return 0;
    25a8:	e6000013 			; <UNDEFINED> instruction: 0xe6000013
    25ac:	b8000010 	stmdalt	r0, {r4}
    25b0:	01000003 	tsteq	r0, r3
int ser_outf (word st, const char *m, ...) {
    25b4:	08e704fa 	stmiaeq	r7!, {r1, r3, r4, r5, r6, r7, sl}^
    25b8:	e5210000 	str	r0, [r1, #-0]!
	if ((prcs = running (__outserial)) != 0) {
    25bc:	21000013 	tstcs	r0, r3, lsl r0
    25c0:	000013d8 	ldrdeq	r1, [r0], -r8
		join (prcs, st);
    25c4:	13f32200 	mvnsne	r2, #0, 4
    25c8:	10ea0000 	rscne	r0, sl, r0
		release;
    25cc:	03d00000 	bicseq	r0, r0, #0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d0:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    25d4:	00090104 	andeq	r0, r9, r4, lsl #2
    25d8:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
		umwait (st);
    25dc:	32000000 	andcc	r0, r0, #0
    25e0:	00001410 	andeq	r1, r0, r0, lsl r4
	if (runstrand (__outserial, buf) == 0) {
    25e4:	000010ee 	andeq	r1, r0, lr, ror #1
    25e8:	000003e8 	andeq	r0, r0, r8, ror #7
    25ec:	2104fc01 	tstcs	r4, r1, lsl #24	; <UNPREDICTABLE>
		ufree (buf);
    25f0:	0000141f 	andeq	r1, r0, pc, lsl r4
		npwait (st);
    25f4:	00000000 	andeq	r0, r0, r0
}
    25f8:	00141020 	andseq	r1, r4, r0, lsr #32
    25fc:	00112e00 	andseq	r2, r1, r0, lsl #28
    2600:	00040000 	andeq	r0, r4, r0
    2604:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
int ser_inf (word st, const char *fmt, ...) {
    2608:	00093502 	andeq	r3, r9, r2, lsl #10
    260c:	141f2100 	ldrne	r2, [pc], #-256	; 2614 <ser_inf+0xc>
	if (fmt == NULL)
    2610:	20000000 	andcs	r0, r0, r0
	if (__inpline == NULL) {
    2614:	00001410 	andeq	r1, r0, r0, lsl r4
		if ((prcs = running (__inserial)) == 0) {
    2618:	00001130 	andeq	r1, r0, r0, lsr r1
    261c:	00000420 	andeq	r0, r0, r0, lsr #8
			prcs = runthread (__inserial);
    2620:	02040e01 	andeq	r0, r4, #1, 28
    2624:	00000950 	andeq	r0, r0, r0, asr r9
			if (prcs == 0) {
    2628:	00141f21 	andseq	r1, r4, r1, lsr #30
				npwait (st);
    262c:	f3200000 	vhadd.u32	d0, d0, d0
		release;
    2630:	4a000013 	bmi	2684 <plugch+0x1c>
		join (prcs, st);
    2634:	38000011 	stmdacc	r0, {r0, r4}
    2638:	01000004 	tsteq	r0, r4
	va_start (ap, fmt);
    263c:	6b02040e 	blvs	8367c <__ccfg+0x636d4>
	prcs = vscan (__inpline, fmt, ap);
    2640:	21000009 	tstcs	r0, r9
    2644:	00001402 	andeq	r1, r0, r2, lsl #8
	ufree (__inpline);
    2648:	13f32600 	mvnsne	r2, #0, 12
	__inpline = NULL;
    264c:	11500000 	cmpne	r0, r0
}
    2650:	11520000 	cmpne	r2, r0
    2654:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2658:	09860204 	stmibeq	r6, {r2, r9}
		return 0;
    265c:	02210000 	eoreq	r0, r1, #0
    2660:	00000014 	andeq	r0, r0, r4, lsl r0
    2664:	00123420 	andseq	r3, r2, r0, lsr #8
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2668:	00116200 	andseq	r6, r1, r0, lsl #4
    266c:	00045000 	andeq	r5, r4, r0
    2670:	041b0100 	ldreq	r0, [fp], #-256	; 0xffffff00
	RF_cmdFs.frequency = 
    2674:	0009a102 	andeq	sl, r9, r2, lsl #2
}
    2678:	12432100 	subne	r2, r3, #0, 2
    267c:	26000000 	strcs	r0, [r0], -r0
    2680:	00000ccb 	andeq	r0, r0, fp, asr #25
    2684:	0000118c 	andeq	r1, r0, ip, lsl #3
static int option (int opt, address val) {
    2688:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
    268c:	02043e01 	andeq	r3, r4, #1, 28
    2690:	000009c8 	andeq	r0, r0, r8, asr #19
    2694:	00144325 	andseq	r4, r4, r5, lsr #6
    2698:	0011aa00 	andseq	sl, r1, r0, lsl #20
    269c:	00046800 	andeq	r6, r4, r0, lsl #16
    26a0:	03010100 	movweq	r0, #4352	; 0x1100
    26a4:	ab260002 	blge	9826b4 <__ccfg+0x96270c>
    26a8:	c6000012 			; <UNDEFINED> instruction: 0xc6000012
    26ac:	da000011 	ble	26f8 <option+0x70>
    26b0:	01000011 	tsteq	r0, r1, lsl r0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    26b4:	ef030451 	svc	0x00030451
    26b8:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
			goto RVal;
    26bc:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
			_BIS (dstate, DSTATE_RXON);
    26c0:	000011c6 	andeq	r1, r0, r6, asr #3
    26c4:	000011ca 	andeq	r1, r0, sl, asr #3
	int ret = 0;
    26c8:	0501140b 	streq	r1, [r1, #-1035]	; 0xfffffbf5
			p_trigger (drvprcs, qevent);
    26cc:	0b953300 	bleq	fe54f2d4 <_estack+0xde54a2d4>
    26d0:	11e00000 	mvnne	r0, r0
    26d4:	04800000 	streq	r0, [r0], #0
    26d8:	72010000 	andvc	r0, r1, #0
    26dc:	11330204 	teqne	r3, r4, lsl #4
    26e0:	e0000013 	and	r0, r0, r3, lsl r0
    26e4:	80000011 	andhi	r0, r0, r1, lsl r0
    26e8:	01000004 	tsteq	r0, r4
    26ec:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
    26f0:	0000132d 	andeq	r1, r0, sp, lsr #6
}
    26f4:	00132021 	andseq	r2, r3, r1, lsr #32
			_BIC (dstate, DSTATE_RXON);
    26f8:	00000000 	andeq	r0, r0, r0
    26fc:	1306012c 	movwne	r0, #24876	; 0x612c
			statid = (val == NULL) ? 0 : *val;
    2700:	ed010000 	stc	0, cr0, [r1, #-0]
    2704:	d0010603 	andle	r0, r1, r3, lsl #12
	int ret = 0;
    2708:	0c00000f 	stceq	0, cr0, [r0], {15}
			ret = (int) statid;
    270c:	01000010 	tsteq	r0, r0, lsl r0
	if (val != NULL)
    2710:	000aa79c 	muleq	sl, ip, r7
		*val = ret;
    2714:	61763400 	cmnvs	r6, r0, lsl #8
			ret = rbuffl + 2;
    2718:	ed01006c 	stc	0, cr0, [r1, #-432]	; 0xfffffe50
    271c:	008d1c03 	addeq	r1, sp, r3, lsl #24
			if (val != NULL) {
    2720:	50010000 	andpl	r0, r1, r0
				memcpy (val, &rxstat,
    2724:	01006929 	tsteq	r0, r9, lsr #18
    2728:	8d0603ef 	stchi	3, cr0, [r6, #-956]	; 0xfffffc44
				memset (&rxstat, 0, 
    272c:	ad000000 	stcge	0, cr0, [r0, #-0]
    2730:	29000003 	stmdbcs	r0, {r0, r1}
			if (val == NULL)
    2734:	01006e62 	tsteq	r0, r2, ror #28
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2738:	df0803f0 	svcle	0x000803f0
    273c:	cb000000 	blgt	2744 <option+0xbc>
				utimer_set (bckf_timer, *val);
    2740:	25000003 	strcs	r0, [r0, #-3]
    2744:	000011ed 	andeq	r1, r0, sp, ror #3
    2748:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			for (ret = 0; ret < 8; ret++)
    274c:	00000338 	andeq	r0, r0, r8, lsr r3
				if (RF_cmdPropRadioDivSetup.txPower
    2750:	0203f201 	andeq	pc, r3, #268435456	; 0x10000000
					== patable [ret])
    2754:	0013ac20 	andseq	sl, r3, r0, lsr #24
				if (RF_cmdPropRadioDivSetup.txPower
    2758:	000fd600 	andeq	sp, pc, r0, lsl #12
			for (ret = 0; ret < 8; ret++)
    275c:	00035000 	andeq	r5, r3, r0
    2760:	03f50100 	mvnseq	r0, #0, 2
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2764:	000a9503 	andeq	r9, sl, r3, lsl #10
    2768:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    276c:	03cb0000 	biceq	r0, fp, #0
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2770:	1d000000 	stcne	0, cr0, [r0, #-0]
    2774:	000011f7 	strdeq	r1, [r0], -r7
			_BIS (dstate, DSTATE_IRST);
    2778:	00000ffa 	strdeq	r0, [r0], -sl
    277c:	00000ffc 	strdeq	r0, [r0], -ip
    2780:	0203f901 	andeq	pc, r3, #16384	; 0x4000
			ret = (int) channel;
    2784:	64012c00 	strvs	r2, [r1], #-3072	; 0xfffff400
			goto RVal;
    2788:	01000012 	tsteq	r0, r2, lsl r0
				(*val > 7) ? 7 : *val;
    278c:	010603da 	ldrdeq	r0, [r6, -sl]
    2790:	00000f8c 	andeq	r0, r0, ip, lsl #31
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2794:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2798:	0b2c9c01 	bleq	b297a4 <__ccfg+0xb097fc>
			plugch ();
    279c:	76340000 	ldrtvc	r0, [r4], -r0
			_BIS (dstate, DSTATE_IRST);
    27a0:	01006c61 	tsteq	r0, r1, ror #24
    27a4:	8d1c03da 	ldchi	3, cr0, [ip, #-872]	; 0xfffffc98
			ret = (int) vrate;
    27a8:	01000000 	mrseq	r0, (UNDEF: 0)
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27ac:	00691c50 	rsbeq	r1, r9, r0, asr ip
    27b0:	0603dc01 	streq	sp, [r3], -r1, lsl #24
    27b4:	0000008d 	andeq	r0, r0, sp, lsl #1
    27b8:	006e6229 	rsbeq	r6, lr, r9, lsr #4
    27bc:	0803dd01 	stmdaeq	r3, {r0, r8, sl, fp, ip, lr, pc}
    27c0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    27c4:	000003de 	ldrdeq	r0, [r0], -lr
    27c8:	0011ed25 	andseq	lr, r1, r5, lsr #26
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27cc:	000f8c00 	andeq	r8, pc, r0, lsl #24
    27d0:	0002f000 	andeq	pc, r2, r0
    27d4:	03df0100 	bicseq	r0, pc, #0, 2
    27d8:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
			syserror (EREQPAR, "cc13 op");
    27dc:	0f900000 	svceq	0x00900000
    27e0:	03080000 	movweq	r0, #32768	; 0x8000
    27e4:	e2010000 	and	r0, r1, #0
    27e8:	0b1a0303 	bleq	6833fc <__ccfg+0x663454>
    27ec:	bb350000 	bllt	d427f4 <__ccfg+0xd2284c>
    27f0:	f1000013 	cps	#19
    27f4:	00000003 	andeq	r0, r0, r3
    27f8:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
    27fc:	000fbe00 	andeq	fp, pc, r0, lsl #28
    2800:	000fc000 	andeq	ip, pc, r0
    2804:	03e60100 	mvneq	r0, #0, 2
    2808:	011e0002 	tsteq	lr, r2
    280c:	00001317 	andeq	r1, r0, r7, lsl r3
    2810:	0603c601 	streq	ip, [r3], -r1, lsl #12
    2814:	0000100c 	andeq	r1, r0, ip
static void issue_cmd (lword cmd) {
    2818:	000010b0 	strheq	r1, [r0], -r0
    281c:	0b959c01 	bleq	fe569828 <_estack+0xde564828>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2820:	1e2e0000 	cdpne	0, 2, cr0, cr14, cr0, {0}
    2824:	4c000010 	stcmi	0, cr0, [r0], {16}
    2828:	6e000010 	mcrvs	0, 0, r0, cr0, cr0, {0}
		if (res != 0x86)
    282c:	3600000b 	strcc	r0, [r0], -fp
			syserror (EHARDWARE, "hang ic0");
    2830:	0307006a 	movweq	r0, #28778	; 0x706a
    2834:	00008d02 	andeq	r8, r0, r2, lsl #26
		if (cnt-- == 0) {
    2838:	00040400 	andeq	r0, r4, r0, lsl #8
			diag ("HUP %lx %lx", cmd, res);
    283c:	00693600 	rsbeq	r3, r9, r0, lsl #12
    2840:	f4020307 	vst2.8	{d0-d3}, [r2], r7
			syserror (EHARDWARE, "hang ic0");
    2844:	17000003 	strne	r0, [r0, -r3]
		udelay (1);
    2848:	00000004 	andeq	r0, r0, r4
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    284c:	00105e37 	andseq	r5, r0, r7, lsr lr
}
    2850:	00108c00 	andseq	r8, r0, r0, lsl #24
    2854:	006a3600 	rsbeq	r3, sl, r0, lsl #12
    2858:	8d020208 	sfmhi	f0, 4, [r2, #-32]	; 0xffffffe0
    285c:	2a000000 	bcs	2864 <rx_de+0x4>
static void rx_de () {
    2860:	36000004 	strcc	r0, [r0], -r4
	if ((dstate & DSTATE_RXAC) == 0)
    2864:	02080069 	andeq	r0, r8, #105	; 0x69
    2868:	0003f402 	andeq	pc, r3, r2, lsl #8
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    286c:	00043d00 	andeq	r3, r4, r0, lsl #26
	_BIC (dstate, DSTATE_RXAC);
    2870:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2874:	000010ec 	andeq	r1, r0, ip, ror #1
}
    2878:	1403bb01 	strne	fp, [r3], #-2817	; 0xfffff4ff
    287c:	5c011e03 	stcpl	14, cr1, [r1], {3}
    2880:	01000014 	tsteq	r0, r4, lsl r0
static void rf_off () {
    2884:	cc060382 	stcgt	3, cr0, [r6], {130}	; 0x82
	if ((dstate & DSTATE_RFON) == 0)
    2888:	8c00000e 	stchi	0, cr0, [r0], {14}
    288c:	0100000f 	tsteq	r0, pc
	IntDisable (INT_RFC_CPE_0);
    2890:	000c289c 	muleq	ip, ip, r8
    2894:	0ef82e00 	cdpeq	14, 15, cr2, cr8, cr0, {0}
    2898:	0f260000 	svceq	0x00260000
	RFCAdi3VcoLdoVoltageMode (false);
    289c:	0be30000 	bleq	ff8c28a4 <_estack+0xdf8bd8a4>
	RFCSynthPowerDown ();
    28a0:	6a290000 	bvs	a428a8 <__ccfg+0xa22900>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    28a4:	03890100 	orreq	r0, r9, #0, 2
    28a8:	00008d03 	andeq	r8, r0, r3, lsl #26
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    28ac:	00045000 	andeq	r5, r4, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    28b0:	00692900 	rsbeq	r2, r9, r0, lsl #18
	OSCHF_SwitchToRcOscTurnOffXosc ();
    28b4:	03038901 	movweq	r8, #14593	; 0x3901
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    28b8:	000003f4 	strdeq	r0, [r0], -r4
    28bc:	00000463 	andeq	r0, r0, r3, ror #8
    28c0:	02d81b00 	sbcseq	r1, r8, #0, 22
	_BIC (dstate, DSTATE_RFON);
    28c4:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    28c8:	6a290000 	bvs	a428d0 <__ccfg+0xa22928>
}
    28cc:	038f0100 	orreq	r0, pc, #0, 2
    28d0:	00008d03 	andeq	r8, r0, r3, lsl #26
    28d4:	00047600 	andeq	r7, r4, r0, lsl #12
    28d8:	00692900 	rsbeq	r2, r9, r0, lsl #18
    28dc:	03038f01 	movweq	r8, #16129	; 0x3f01
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    28e0:	000003f4 	strdeq	r0, [r0], -r4
    28e4:	00000489 	andeq	r0, r0, r9, lsl #9
    28e8:	12e73300 	rscne	r3, r7, #0, 6
		if (cmd->status == tstat)
    28ec:	0ecc0000 	cdpeq	0, 12, cr0, cr12, cr0, {0}
		if (timeout-- == 0) {
    28f0:	02b80000 	adcseq	r0, r8, #0
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    28f4:	84010000 	strhi	r0, [r1], #-0
    28f8:	03210203 			; <UNDEFINED> instruction: 0x03210203
    28fc:	21000013 	tstcs	r0, r3, lsl r0
			syserror (EHARDWARE, "rt2");
    2900:	000012f6 	strdeq	r1, [r0], -r6
    2904:	e9390000 	ldmdb	r9!, {}	; <UNPREDICTABLE>
		udelay (1);
    2908:	01000011 	tsteq	r0, r1, lsl r0
		if (cmd->status == tstat)
    290c:	010d037d 	tsteq	sp, sp, ror r3
}
    2910:	00000a30 	andeq	r0, r0, r0, lsr sl
    2914:	00000a3c 	andeq	r0, r0, ip, lsr sl
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2918:	0c529c01 	mrrceq	12, 0, r9, r2, cr1
    291c:	f12d0000 			; <UNDEFINED> instruction: 0xf12d0000
static void rf_on () {
    2920:	01000013 	tsteq	r0, r3, lsl r0
    2924:	8d1f037d 	ldchi	3, cr0, [pc, #-500]	; 2738 <option+0xb0>
	OSCHF_TurnOnXosc();
    2928:	9c000000 	stcls	0, cr0, [r0], {-0}
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    292c:	00000004 	andeq	r0, r0, r4
    2930:	0013b23a 	andseq	fp, r3, sl, lsr r2
    2934:	03100100 	tsteq	r0, #0, 2
    2938:	008d010c 	addeq	r0, sp, ip, lsl #2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    293c:	0dbc0000 	ldceq	0, cr0, [ip]
    2940:	0ecc0000 	cdpeq	0, 12, cr0, cr12, cr0, {0}
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2944:	9c010000 	stcls	0, cr0, [r1], {-0}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2948:	00000ccb 	andeq	r0, r0, fp, asr #25
	issue_cmd (
    294c:	00117b2d 	andseq	r7, r1, sp, lsr #22
    2950:	03100100 	tsteq	r0, #0, 2
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2954:	00008d1e 	andeq	r8, r0, lr, lsl sp
    2958:	0004ba00 	andeq	fp, r4, r0, lsl #20
    295c:	75623b00 	strbvc	r3, [r2, #-2816]!	; 0xfffff500
   pPatchTab[80] = 0;
    2960:	10010066 	andne	r0, r1, r6, rrx
   } while (--nIterations);
    2964:	01c92f03 	biceq	r2, r9, r3, lsl #30
   pPatchTab[53] = 2;
    2968:	04cd0000 	strbeq	r0, [sp], #0
    296c:	6c3b0000 	ldcvs	0, cr0, [fp], #-0
   pPatchTab[55] = 3;
    2970:	01006e65 	tsteq	r0, r5, ror #28
   pPatchTab[110] = 4;
    2974:	8d380310 	ldchi	3, cr0, [r8, #-64]!	; 0xffffffc0
   pPatchTab[107] = 5;
    2978:	6f000000 	svcvs	0x00000000
   pPatchTab[65] = 6;
    297c:	2b000005 	blcs	2998 <rf_on.part.0+0x80>
    2980:	00001098 	muleq	r0, r8, r0
   pPatchTab[57] = 1;
    2984:	01031801 	tsteq	r3, r1, lsl #16
   pIrqPatch[1] = _IRQ_PATCH_0;
    2988:	0011a32b 	andseq	sl, r1, fp, lsr #6
   const uint32_t *pS = patchGenfskRfe;
    298c:	033d0100 	teqeq	sp, #0, 2
      t2 = *pS++;
    2990:	0d442701 	stcleq	7, cr2, [r4, #-4]
      t4 = *pS++;
    2994:	0e9e0000 	cdpeq	0, 9, cr0, cr14, cr0, {0}
      t6 = *pS++;
    2998:	0ea00000 	cdpeq	0, 10, cr0, cr0, cr0, {0}
      t8 = *pS++;
    299c:	65010000 	strvs	r0, [r1, #-0]
      *pD++ = t1;
    29a0:	58211503 	stmdapl	r1!, {r0, r1, r8, sl, ip}
      *pD++ = t2;
    29a4:	0000000d 	andeq	r0, r0, sp
      *pD++ = t3;
    29a8:	12333800 	eorsne	r3, r3, #0, 16
      *pD++ = t5;
    29ac:	fc010000 	stc2	0, cr0, [r1], {-0}
      *pD++ = t7;
    29b0:	3c010d02 	stccc	13, cr0, [r1], {2}
   } while (--nIterations);
    29b4:	00001234 	andeq	r1, r0, r4, lsr r2
    29b8:	0d02f001 	stceq	0, cr15, [r2, #-4]
      *pD++ = t8;
    29bc:	00000d84 	andeq	r0, r0, r4, lsl #27
   } while (--nIterations);
    29c0:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    29c4:	0d449c01 	stcleq	12, cr9, [r4, #-4]
   *pD++ = t2;
    29c8:	3b200000 	blcc	8029d0 <__ccfg+0x7e2a28>
   *pD++ = t3;
    29cc:	84000013 	strhi	r0, [r0], #-19	; 0xffffffed
   *pD++ = t4;
    29d0:	a000000d 	andge	r0, r0, sp
   *pD++ = t5;
    29d4:	01000002 	tsteq	r0, r2
    29d8:	070202f5 			; <UNDEFINED> instruction: 0x070202f5
	RFCAdi3VcoLdoVoltageMode (true);
    29dc:	2100000d 	tstcs	r0, sp
    29e0:	0000134a 	andeq	r1, r0, sl, asr #6
       	RFCRfTrimSet (&rfTrim);
    29e4:	13752600 	cmnne	r5, #0, 12
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    29e8:	0d900000 	ldceq	0, cr0, [r0]
    29ec:	0d960000 	ldceq	0, cr0, [r6]
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    29f0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    29f4:	0d2c0202 	sfmeq	f0, 4, [ip, #-8]!
	issue_cmd ((lword)&cmd_srt);
    29f8:	9e210000 	cdpls	0, 2, cr0, cr1, cr0, {0}
    29fc:	21000013 	tstcs	r0, r3, lsl r0
	issue_cmd ((lword)&RF_cmdFs);
    2a00:	00001391 	muleq	r0, r1, r3
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2a04:	00138421 	andseq	r8, r3, r1, lsr #8
    2a08:	ca270000 	bgt	9c2a10 <__ccfg+0x9a2a68>
    2a0c:	96000012 			; <UNDEFINED> instruction: 0x96000012
	IntEnable (INT_RFC_CPE_0);
    2a10:	a000000d 	andge	r0, r0, sp
	_BIC (dstate, DSTATE_IRST);
    2a14:	0100000d 	tsteq	r0, sp
    2a18:	210202f7 	strdcs	r0, [r2, -r7]
    2a1c:	000012d9 	ldrdeq	r1, [r0], -r9
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2a20:	013d0000 	teqeq	sp, r0
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a24:	00001066 	andeq	r1, r0, r6, rrx
	IntEnable (INT_RFC_CPE_0);
    2a28:	0602eb01 	streq	lr, [r2], -r1, lsl #22
    2a2c:	0000a701 	andeq	sl, r0, r1, lsl #14
}
    2a30:	0d650100 	stfeqe	f0, [r5, #-0]
	IntEnable (INT_RFC_CPE_0);
    2a34:	753e0000 	ldrvc	r0, [lr, #-0]!
    2a38:	eb010061 	bl	42bc4 <__ccfg+0x22c1c>
    2a3c:	0d652702 	stcleq	7, cr2, [r5, #-8]!
    2a40:	07000000 	streq	r0, [r0, -r0]
    2a44:	00022604 	andeq	r2, r2, r4, lsl #12
    2a48:	29011a00 	stmdbcs	r1, {r9, fp, ip}
    2a4c:	01000011 	tsteq	r0, r1, lsl r0
    2a50:	010902d4 	ldrdeq	r0, [r9, -r4]
    2a54:	0000009b 	muleq	r0, fp, r0
    2a58:	00000d30 	andeq	r0, r0, r0, lsr sp
    2a5c:	00000d84 	andeq	r0, r0, r4, lsl #27
    2a60:	0dc19c01 	stcleq	12, cr9, [r1, #4]
    2a64:	732d0000 			; <UNDEFINED> instruction: 0x732d0000
    2a68:	01000010 	tsteq	r0, r0, lsl r0
    2a6c:	a72102d4 			; <UNDEFINED> instruction: 0xa72102d4
    2a70:	fb000000 	blx	2a7a <rf_on.part.0+0x162>
    2a74:	3b000005 	blcc	2a90 <rf_on.part.0+0x178>
    2a78:	01006175 	tsteq	r0, r5, ror r1
    2a7c:	c12f02d4 	ldrdgt	r0, [pc, -r4]!
    2a80:	0e00000d 	cdpeq	0, 0, cr0, cr0, cr13, {0}
    2a84:	33000006 	movwcc	r0, #6
    2a88:	00001358 	andeq	r1, r0, r8, asr r3
    2a8c:	00000d50 	andeq	r0, r0, r0, asr sp
    2a90:	00000288 	andeq	r0, r0, r8, lsl #5
    2a94:	0202e601 	andeq	lr, r2, #1048576	; 0x100000
static void rx_int_enable () {
    2a98:	00136721 	andseq	r6, r3, r1, lsr #14
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2a9c:	07000000 	streq	r0, [r0, -r0]
    2aa0:	00021a04 	andeq	r1, r2, r4, lsl #20
    2aa4:	82011a00 	andhi	r1, r1, #0, 20
    2aa8:	01000014 	tsteq	r0, r4, lsl r0
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2aac:	0106018a 	smlabbeq	r6, sl, r1, r0
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2ab0:	000000a7 	andeq	r0, r0, r7, lsr #1
    2ab4:	00000ce0 	andeq	r0, r0, r0, ror #25
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2ab8:	00000d30 	andeq	r0, r0, r0, lsr sp
    2abc:	0e0f9c01 	cdpeq	12, 0, cr9, cr15, cr1, {0}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ac0:	402d0000 	eormi	r0, sp, r0
    2ac4:	01000012 	tsteq	r0, r2, lsl r0
    2ac8:	9b26018a 	blls	9830f8 <__ccfg+0x963150>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2acc:	21000000 	mrscs	r0, (UNDEF: 0)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2ad0:	3f000006 	svccc	0x00000006
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ad4:	01005845 	tsteq	r0, r5, asr #16
		if (db->status == DATA_ENTRY_FINISHED) {
    2ad8:	1d0101a4 	stfnes	f0, [r1, #-656]	; 0xfffffd70
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2adc:	00000f46 	andeq	r0, r0, r6, asr #30
    2ae0:	00000cf4 	strdeq	r0, [r0], -r4
			nr++;
    2ae4:	00000cfe 	strdeq	r0, [r0], -lr
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ae8:	1a019c01 	bne	69af4 <__ccfg+0x49b4c>
    2aec:	f6011e00 			; <UNDEFINED> instruction: 0xf6011e00
    2af0:	01000011 	tsteq	r0, r1, lsl r0
    2af4:	cc060138 	stfgts	f0, [r6], {56}	; 0x38
				__dp [pl + 1] = __dp [pl] - 128;
    2af8:	e000000b 	and	r0, r0, fp
				pl = __dp [1] + 2;
    2afc:	0100000c 	tsteq	r0, ip
				__dp [pl + 1] = __dp [pl] - 128;
    2b00:	000ec19c 	muleq	lr, ip, r1
    2b04:	13594000 	cmpne	r9, #0
				__dp [pl] = 0;
    2b08:	3a010000 	bcc	42b10 <__ccfg+0x22b68>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b0c:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    2b10:	063f0000 	ldrteq	r0, [pc], -r0
    2b14:	45410000 	strbmi	r0, [r1, #-0]
			db->status = DATA_ENTRY_PENDING;
    2b18:	01005455 	tsteq	r0, r5, asr r4
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b1c:	1a010168 	bne	430c4 <__ccfg+0x2311c>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2b20:	2300000c 	movwcs	r0, #12
				diag ("BAD RX");
    2b24:	00000270 	andeq	r0, r0, r0, ror r2
    2b28:	00118540 	andseq	r8, r1, r0, asr #10
	if (nr) {
    2b2c:	01470100 	mrseq	r0, (UNDEF: 87)
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b30:	00009b0b 	andeq	r9, r0, fp, lsl #22
}
    2b34:	00068a00 	andeq	r8, r6, r0, lsl #20
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b38:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
    2b3c:	0c380000 	ldceq	0, cr0, [r8], #-0
    2b40:	0c400000 	mareq	acc0, r0, r0
}
    2b44:	0d050000 	stceq	0, cr0, [r5, #-0]
    2b48:	000e7506 	andeq	r7, lr, r6, lsl #10
    2b4c:	141f2100 	ldrne	r2, [pc], #-256	; 2b54 <rx_int_enable+0xbc>
    2b50:	42000000 	andmi	r0, r0, #0
    2b54:	00001410 	andeq	r1, r0, r0, lsl r4
    2b58:	00000c44 	andeq	r0, r0, r4, asr #24
    2b5c:	00000c4c 	andeq	r0, r0, ip, asr #24
    2b60:	8f060f05 	svchi	0x00060f05
    2b64:	2100000e 	tstcs	r0, lr
thread (cc1350_driver)
    2b68:	0000141f 	andeq	r1, r0, pc, lsl r4
    2b6c:	13f34200 	mvnsne	r4, #0, 4
    2b70:	0c920000 	ldceq	0, cr0, [r2], {0}
    2b74:	0c9a0000 	ldceq	0, cr0, [sl], {0}
    2b78:	17050000 	strne	r0, [r5, -r0]
		if (dstate & DSTATE_IRST) {
    2b7c:	000ea906 	andeq	sl, lr, r6, lsl #18
    2b80:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    2b84:	43000000 	movwmi	r0, #0
			rf_off ();
    2b88:	000013f3 	strdeq	r1, [r0], -r3
			_BIC (dstate,
    2b8c:	00000c9e 	muleq	r0, lr, ip
    2b90:	00000ca6 	andeq	r0, r0, r6, lsr #25
		if (dstate & DSTATE_RXAC) {
    2b94:	21061905 	tstcs	r6, r5, lsl #18
    2b98:	00001402 	andeq	r1, r0, r2, lsl #8
			if ((dstate & DSTATE_RXON) == 0)
    2b9c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
				rx_de ();
    2ba0:	0012ee01 	andseq	lr, r2, r1, lsl #28
		if (paylen == 0) {
    2ba4:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
    2ba8:	000ba406 	andeq	sl, fp, r6, lsl #8
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2bac:	000bcc00 	andeq	ip, fp, r0, lsl #24
    2bb0:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    2bb4:	3300000e 	movwcc	r0, #14
    2bb8:	00000f25 	andeq	r0, r0, r5, lsr #30
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bbc:	00000bac 	andeq	r0, r0, ip, lsr #23
    2bc0:	00000258 	andeq	r0, r0, r8, asr r2
    2bc4:	2c013201 	sfmcs	f3, 4, [r1], {1}
    2bc8:	000f3821 	andeq	r3, pc, r1, lsr #16
    2bcc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2bd0:	00120d01 	andseq	r0, r2, r1, lsl #26
    2bd4:	011e0100 	tsteq	lr, r0, lsl #2
    2bd8:	000b6406 	andeq	r6, fp, r6, lsl #8
		} else if (dstate & DSTATE_RXON) {
    2bdc:	000ba400 	andeq	sl, fp, r0, lsl #8
	if (dstate & DSTATE_RFON)
    2be0:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2be4:	3300000f 	movwcc	r0, #15
		re->status = DATA_ENTRY_PENDING;
    2be8:	00000f25 	andeq	r0, r0, r5, lsr #30
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2bec:	00000b76 	andeq	r0, r0, r6, ror fp
	issue_cmd ((lword)&RF_cmdPropRx);
    2bf0:	00000238 	andeq	r0, r0, r8, lsr r2
	_BIS (dstate, DSTATE_RXAC);
    2bf4:	2c012501 	cfstr32cs	mvfx2, [r1], {1}
    2bf8:	000f3835 	andeq	r3, pc, r5, lsr r8	; <UNPREDICTABLE>
    2bfc:	0006c900 	andeq	ip, r6, r0, lsl #18
    2c00:	44000000 	strmi	r0, [r0], #-0
	if (dstate & DSTATE_RXAC)
    2c04:	00001352 	andeq	r1, r0, r2, asr r3
    2c08:	15011701 	strne	r1, [r1, #-1793]	; 0xfffff8ff
				if (statid != 0xffff)
    2c0c:	0000df01 	andeq	sp, r0, r1, lsl #30
    2c10:	0f460300 	svceq	0x00460300
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2c14:	643e0000 	ldrtvs	r0, [lr], #-0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2c18:	01006c65 	tsteq	r0, r5, ror #24
		if (paylen == 0) {
    2c1c:	a7220117 			; <UNDEFINED> instruction: 0xa7220117
			wait (qevent, DR_LOOP);
    2c20:	00000000 	andeq	r0, r0, r0
    2c24:	000f8e45 	andeq	r8, pc, r5, asr #28
			if (dstate & DSTATE_RXAC) {
    2c28:	010e0100 	mrseq	r0, (UNDEF: 30)
    2c2c:	0000a714 	andeq	sl, r0, r4, lsl r7
				rx_int_enable ();
    2c30:	76460300 	strbvc	r0, [r6], -r0, lsl #6
			release;
    2c34:	01000014 	tsteq	r0, r4, lsl r0
			} else if (dstate & DSTATE_RFON) {
    2c38:	7a0314ee 	bvc	c7ff8 <__ccfg+0xa8050>
				delay (offdelay, DR_GOOF);
    2c3c:	4700000f 	strmi	r0, [r0, -pc]
    2c40:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2c44:	8d06f201 	sfmhi	f7, 1, [r6, #-4]
		if (bckf_timer) {
    2c48:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
			wait (qevent, DR_LOOP);
    2c4c:	01006947 	tsteq	r0, r7, asr #18
    2c50:	008d0bf4 	strdeq	r0, [sp], r4
    2c54:	00000000 	andeq	r0, r0, r0
			delay (bckf_timer, DR_LOOP);
    2c58:	13e30149 	mvnne	r0, #1073741842	; 0x40000012
    2c5c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
			if (dstate & DSTATE_RXAC)
    2c60:	0b100106 	bleq	403080 <__ccfg+0x3e30d8>
    2c64:	0b640000 	bleq	1902c6c <__ccfg+0x18e2cc4>
	if (dstate & DSTATE_RFON)
    2c68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c6c:	00001024 	andeq	r1, r0, r4, lsr #32
		rx_de ();
    2c70:	0063654a 	rsbeq	r6, r3, sl, asr #10
		RF_cmdPropTx . status = 0;
    2c74:	a71a9801 	ldrge	r9, [sl, -r1, lsl #16]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c78:	dc000000 	stcle	0, cr0, [r0], {-0}
    2c7c:	4a000006 	bmi	2c9c <cc1350_driver+0x134>
    2c80:	9801006d 	stmdals	r1, {r0, r2, r3, r5, r6}
		issue_cmd ((lword)&cmd_cs);
    2c84:	0010242a 	andseq	r2, r0, sl, lsr #8
		if (dstate & DSTATE_IRST)
    2c88:	0006ef00 	andeq	lr, r6, r0, lsl #30
    2c8c:	11ed2800 	mvnne	r2, r0, lsl #16
    2c90:	0b1c0000 	bleq	702c98 <__ccfg+0x6e2cf0>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2c94:	0b1e0000 	bleq	782c9c <__ccfg+0x762cf4>
    2c98:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
			delay (1, DR_XMIT);
    2c9c:	14102202 	ldrne	r2, [r0], #-514	; 0xfffffdfe
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2ca0:	0b1e0000 	bleq	782ca8 <__ccfg+0x762d00>
    2ca4:	01e80000 	mvneq	r0, r0
    2ca8:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2cac:	000fd903 	andeq	sp, pc, r3, lsl #18
    2cb0:	141f2100 	ldrne	r2, [pc], #-256	; 2cb8 <cc1350_driver+0x150>
				RF_cmdPropTx . status = 0;
    2cb4:	22000000 	andcs	r0, r0, #0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2cb8:	00001410 	andeq	r1, r0, r0, lsl r4
				issue_cmd ((lword)&RF_cmdPropTx);
    2cbc:	00000b24 	andeq	r0, r0, r4, lsr #22
				proceed (DR_XMIT);
    2cc0:	00000208 	andeq	r0, r0, r8, lsl #4
    2cc4:	f303b801 	vsub.i8	d11, d3, d1
			txtries++;
    2cc8:	2100000f 	tstcs	r0, pc
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2ccc:	0000141f 	andeq	r1, r0, pc, lsl r4
    2cd0:	13f32200 	mvnsne	r2, #0, 4
    2cd4:	0b3c0000 	bleq	f02cdc <__ccfg+0xee2d34>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cd8:	02200000 	eoreq	r0, r0, #0
		goto DR_LOOP__;
    2cdc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ce0:	00100d03 	andseq	r0, r0, r3, lsl #26
		paylen = 0;
    2ce4:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ce8:	43000000 	movwmi	r0, #0
		txtries = 0;
    2cec:	000013f3 	strdeq	r1, [r0], -r3
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2cf0:	00000b42 	andeq	r0, r0, r2, asr #22
    2cf4:	00000b44 	andeq	r0, r0, r4, asr #22
    2cf8:	2103b801 	tstcs	r3, r1, lsl #16
    2cfc:	00001402 	andeq	r1, r0, r2, lsl #8
    2d00:	04070000 	streq	r0, [r7], #-0
		    tcvphy_top (physid) == NULL)
    2d04:	000001d6 	ldrdeq	r0, [r0], -r6
    2d08:	13780149 	cmnne	r8, #1073741842	; 0x40000012
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d0c:	72010000 	andvc	r0, r1, #0
    2d10:	00000106 	andeq	r0, r0, r6, lsl #2
			rf_off ();
    2d14:	00000000 	andeq	r0, r0, r0
endthread
    2d18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d1c:	000010ca 	andeq	r1, r0, sl, asr #1
    2d20:	0074734a 	rsbseq	r7, r4, sl, asr #6
    2d24:	a7187201 	ldrge	r7, [r8, -r1, lsl #4]
    2d28:	0d000000 	stceq	0, cr0, [r0, #-0]
    2d2c:	4a000007 	bmi	2d50 <cc1350_driver+0x1e8>
    2d30:	006e6573 	rsbeq	r6, lr, r3, ror r5
    2d34:	44287201 	strtmi	r7, [r8], #-513	; 0xfffffdff
    2d38:	20000002 	andcs	r0, r0, r2
    2d3c:	4a000007 	bmi	2d60 <RFCCPE0IntHandler+0x8>
    2d40:	006c6176 	rsbeq	r6, ip, r6, ror r1
    2d44:	fc357201 	ldc2	2, cr7, [r5], #-4
    2d48:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    2d4c:	4b000007 	blmi	2d70 <RFCCPE0IntHandler+0x18>
    2d50:	00000fa9 	andeq	r0, r0, r9, lsr #31
    2d54:	c90e7401 	stmdbgt	lr, {r0, sl, ip, sp, lr}
void RFCCPE0IntHandler (void) {
    2d58:	05000000 	streq	r0, [r0, #-0]
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d5c:	00000003 	andeq	r0, r0, r3
		_BIS (dstate, DSTATE_IRST);
    2d60:	14994c00 	ldrne	r4, [r9], #3072	; 0xc00
    2d64:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2d68:	00000001 	andeq	r0, r0, r1
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2d6c:	12204d00 	eorne	r4, r0, #0, 26
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2d70:	00000000 	andeq	r0, r0, r0
    2d74:	06200000 	strteq	r0, [r0], -r0
	p_trigger (drvprcs, qevent);
    2d78:	81010000 	mrshi	r0, (UNDEF: 1)
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2d7c:	12014203 	andne	r4, r1, #805306368	; 0x30000000
	...
    2d88:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2d8c:	0010b912 	andseq	fp, r0, r2, lsl r9
    2d90:	12132f00 	andsne	r2, r3, #0, 30
    2d94:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2d98:	0000122a 	andeq	r1, r0, sl, lsr #4
	...
	RISE_N_SHINE;
    2da4:	00038401 	andeq	r8, r3, r1, lsl #8
    2da8:	1440014e 	strbne	r0, [r0], #-334	; 0xfffffeb2
    2dac:	62010000 	andvs	r0, r1, #0
}
    2db0:	14e40106 	strbtne	r0, [r4], #262	; 0x106
    2db4:	15140000 	ldrne	r0, [r4, #-0]
    2db8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dbc:	0f480149 	svceq	0x00480149
    2dc0:	4f010000 	svcmi	0x00010000
    2dc4:	00000106 	andeq	r0, r0, r6, lsl #2
void phys_cc1350 (int phy, int mbs) {
    2dc8:	00000000 	andeq	r0, r0, r0
	if (rbuffl != 0)
    2dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dd0:	00001107 	andeq	r1, r0, r7, lsl #2
		syserror (ETOOMANY, "cc13");
    2dd4:	00125128 	andseq	r5, r2, r8, lsr #2
	...
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2de0:	035f0100 	cmpeq	pc, #0, 2
		syserror (EREQPAR, "cc13 mb");
    2de4:	7f014900 	svcvc	0x00014900
    2de8:	0100000f 	tsteq	r0, pc
	i = 0;
    2dec:	d001063b 	andle	r0, r1, fp, lsr r6
	rbuffl = (byte) mbs;
    2df0:	1000000a 	andne	r0, r0, sl
		db->config.type = 0;	// General (data in structure)
    2df4:	0100000b 	tsteq	r0, fp
	rbuffl = (byte) mbs;
    2df8:	00112e9c 	mulseq	r1, ip, lr
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2dfc:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    2e00:	df1c3b01 	svcle	0x001c3b01
		if (db == NULL)
    2e04:	5c000000 	stcpl	0, cr0, [r0], {-0}
			syserror (EMALLOC, "cc13");
    2e08:	00000007 	andeq	r0, r0, r7
    2e0c:	103f0149 	eorsne	r0, pc, r9, asr #2
    2e10:	2b010000 	blcs	42e18 <__ccfg+0x22e70>
		db->status = DATA_ENTRY_PENDING;
    2e14:	0a940106 	beq	fe503234 <_estack+0xde4fe234>
		if (i)
    2e18:	0ad00000 	beq	ff402e20 <_estack+0xdf3fde20>
			da->pNextEntry = (byte*) db;
    2e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
		db->length = rbuffl + 2;
    2e20:	00001155 	andeq	r1, r0, r5, asr r1
    2e24:	0100644a 	tsteq	r0, sl, asr #8
		db->config.type = 0;	// General (data in structure)
    2e28:	00df1b2b 	sbcseq	r1, pc, fp, lsr #22
		db->length = rbuffl + 2;
    2e2c:	077a0000 	ldrbeq	r0, [sl, -r0]!
	db->pNextEntry = (byte*) re;
    2e30:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2e34:	00127501 	andseq	r7, r2, r1, lsl #10
    2e38:	06200100 	strteq	r0, [r0], -r0, lsl #2
	if (rbuffs == NULL)
    2e3c:	000a6801 	andeq	r6, sl, r1, lsl #16
	rbuffs->pCurrEntry = (byte*) re;
    2e40:	000a9200 	andeq	r9, sl, r0, lsl #4
	rbuffs->pLastEntry = NULL;
    2e44:	7c9c0100 	ldfvcs	f0, [ip], {0}
    2e48:	4a000011 	bmi	2e94 <phys_cc1350+0xcc>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e4c:	2001006e 	andcs	r0, r1, lr, rrx
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2e50:	0000b81c 	andeq	fp, r0, ip, lsl r8
    2e54:	00079800 	andeq	r9, r7, r0, lsl #16
    2e58:	01490000 	mrseq	r0, (UNDEF: 73)
	rbuffl -= 2;
    2e5c:	00001360 	andeq	r1, r0, r0, ror #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e60:	01061901 	tsteq	r6, r1, lsl #18
	rbuffl -= 2;
    2e64:	00000a3c 	andeq	r0, r0, ip, lsr sl
	physid = phy;
    2e68:	00000a68 	andeq	r0, r0, r8, ror #20
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e6c:	11b79c01 			; <UNDEFINED> instruction: 0x11b79c01
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e70:	6e4f0000 	cdpvs	0, 4, cr0, cr15, cr0, {0}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e74:	1c190100 	ldfnes	f0, [r9], {-0}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e78:	000000b8 	strheq	r0, [r0], -r8
    2e7c:	b7435001 	strblt	r5, [r3, -r1]
	utimer_add (&bckf_timer);
    2e80:	50000011 	andpl	r0, r0, r1, lsl r0
	drvprcs = runthread (cc1350_driver);
    2e84:	5a00000a 	bpl	2eb4 <phys_cc1350+0xec>
    2e88:	0100000a 	tsteq	r0, sl
    2e8c:	c521031b 	strgt	r0, [r1, #-795]!	; 0xfffffce5
	if (drvprcs == 0)
    2e90:	00000011 	andeq	r0, r0, r1, lsl r0
		syserror (ERESOURCE, "cc13");
    2e94:	14545000 	ldrbne	r5, [r4], #-0
    2e98:	15010000 	strne	r0, [r1, #-0]
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2e9c:	d0030114 	andle	r0, r3, r4, lsl r1
    2ea0:	51000011 	tstpl	r0, r1, lsl r0
    2ea4:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2ea8:	0000b82b 	andeq	fp, r0, fp, lsr #16
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2eac:	2b520000 	blcs	1482eb4 <__ccfg+0x1462f0c>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2eb0:	03000010 	movweq	r0, #16
    2eb4:	0135011a 	teqeq	r5, sl, lsl r1
    2eb8:	0011ed03 	andseq	lr, r1, r3, lsl #26
    2ebc:	14455300 	strbne	r5, [r5], #-768	; 0xfffffd00
    2ec0:	1a030000 	bne	c2ec8 <__ccfg+0xa2f20>
    2ec4:	00734801 	rsbseq	r4, r3, r1, lsl #16
    2ec8:	54000000 	strpl	r0, [r0], #-0
    2ecc:	0000127c 	andeq	r1, r0, ip, ror r2
    2ed0:	01355b03 	teqeq	r5, r3, lsl #22
	plugch ();
    2ed4:	0f9c5403 	svceq	0x009c5403
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2ed8:	50030000 	andpl	r0, r3, r0
    2edc:	55030135 	strpl	r0, [r3, #-309]	; 0xfffffecb
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2ee0:	00001397 	muleq	r0, r7, r3
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2ee4:	0101bf0f 	tsteq	r1, pc, lsl #30
    2ee8:	00000073 	andeq	r0, r0, r3, ror r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2eec:	00122003 	andseq	r2, r2, r3
}
    2ef0:	13f81600 	mvnsne	r1, #0, 12
    2ef4:	c10f0000 	mrsgt	r0, CPSR
    2ef8:	0000730e 	andeq	r7, r0, lr, lsl #6
    2efc:	67540000 	ldrbvs	r0, [r4, -r0]
    2f00:	0f000013 	svceq	0x00000013
    2f04:	03010190 	movweq	r0, #4496	; 0x1190
    2f08:	000f6654 	andeq	r6, pc, r4, asr r6	; <UNPREDICTABLE>
    2f0c:	017b0f00 	cmneq	fp, r0, lsl #30
    2f10:	d4520301 	ldrble	r0, [r2], #-769	; 0xfffffcff
    2f14:	0a000011 	beq	2f60 <tcv_rcv_null>
    2f18:	01010366 	tsteq	r1, r6, ror #6
    2f1c:	00125103 	andseq	r5, r2, r3, lsl #2
    2f20:	11ab5300 			; <UNDEFINED> instruction: 0x11ab5300
    2f24:	660a0000 	strvs	r0, [sl], -r0
    2f28:	00731f03 	rsbseq	r1, r3, r3, lsl #30
    2f2c:	56000000 	strpl	r0, [r0], -r0
    2f30:	0000133f 	andeq	r1, r0, pc, lsr r3
    2f34:	01014c02 	tsteq	r1, r2, lsl #24
    2f38:	d0540301 	subsle	r0, r4, r1, lsl #6
    2f3c:	02000012 	andeq	r0, r0, #18
    2f40:	030101c4 	movweq	r0, #4548	; 0x11c4
    2f44:	0010ac57 	andseq	sl, r0, r7, asr ip
    2f48:	01ad0200 			; <UNDEFINED> instruction: 0x01ad0200
    2f4c:	00007301 	andeq	r7, r0, r1, lsl #6
    2f50:	ff560300 			; <UNDEFINED> instruction: 0xff560300
    2f54:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    2f58:	01010245 	tsteq	r1, r5, asr #4
    2f5c:	0fd15803 	svceq	0x00d15803
    2f60:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    2f64:	73010102 	movwvc	r0, #4354	; 0x1102
    2f68:	03000000 	movweq	r0, #0
    2f6c:	000fbc52 	andeq	fp, pc, r2, asr ip	; <UNPREDICTABLE>
    2f70:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
    2f74:	ab030101 	blge	c3380 <__ccfg+0xa33d8>
    2f78:	53000012 	movwpl	r0, #18
    2f7c:	00000f76 	andeq	r0, r0, r6, ror pc
    2f80:	1f01dc0e 	svcne	0x0001dc0e
    2f84:	00000073 	andeq	r0, r0, r3, ror r0
    2f88:	113b5600 	teqne	fp, r0, lsl #12
    2f8c:	0f0b0000 	svceq	0x000b0000
    2f90:	03010101 	movweq	r0, #4353	; 0x1101
    2f94:	00107854 	andseq	r7, r0, r4, asr r8
    2f98:	01ed0c00 	mvneq	r0, r0, lsl #24
    2f9c:	84540301 	ldrbhi	r0, [r4], #-769	; 0xfffffcff
    2fa0:	0c000013 	stceq	0, cr0, [r0], {19}
    2fa4:	030101d6 	movweq	r0, #4566	; 0x11d6
    2fa8:	00104d52 	andseq	r4, r0, r2, asr sp
    2fac:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
    2fb0:	e7030101 	str	r0, [r3, -r1, lsl #2]
    2fb4:	53000012 	movwpl	r0, #18
    2fb8:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    2fbc:	24044006 	strcs	r4, [r4], #-6
    2fc0:	00000073 	andeq	r0, r0, r3, ror r0
    2fc4:	0fe65200 	svceq	0x00e65200
    2fc8:	91060000 	mrsls	r0, (UNDEF: 6)
    2fcc:	03010103 	movweq	r0, #4355	; 0x1103
    2fd0:	00001311 	andeq	r1, r0, r1, lsl r3
    2fd4:	0011b853 	andseq	fp, r1, r3, asr r8
    2fd8:	03910600 	orrseq	r0, r1, #0, 12
strand (__outserial, const char*)
    2fdc:	00007317 	andeq	r7, r0, r7, lsl r3
    2fe0:	11125300 	tstne	r2, r0, lsl #6
    2fe4:	91060000 	mrsls	r0, (UNDEF: 6)
    2fe8:	00732a03 	rsbseq	r2, r3, r3, lsl #20
endstrand
    2fec:	52000000 	andpl	r0, r0, #0
    2ff0:	0000140b 	andeq	r1, r0, fp, lsl #8
	ptr = data;
    2ff4:	01030c06 	tsteq	r3, r6, lsl #24
    2ff8:	133b0301 	teqne	fp, #67108864	; 0x4000000
	if (*ptr)
    2ffc:	b8530000 	ldmdalt	r3, {}^	; <UNPREDICTABLE>
		len = strlen (ptr);
    3000:	06000011 			; <UNDEFINED> instruction: 0x06000011
    3004:	7318030c 	tstvc	r8, #12, 6	; 0x30000000
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3008:	53000000 	movwpl	r0, #0
    300c:	00001112 	andeq	r1, r0, r2, lsl r1
    3010:	2b030c06 	blcs	c6030 <__ccfg+0xa6088>
    3014:	00000073 	andeq	r0, r0, r3, ror r0
    3018:	11035200 	mrsne	r5, R11_usr
	len -= quant;
    301c:	e7060000 	str	r0, [r6, -r0]
    3020:	03010101 	movweq	r0, #4353	; 0x1101
    3024:	00001358 	andeq	r1, r0, r8, asr r3
	if (len == 0) {
    3028:	0011b853 	andseq	fp, r1, r3, asr r8
		ufree (data);
    302c:	01e70600 	mvneq	r0, r0, lsl #12
		finish;
    3030:	00007319 	andeq	r7, r0, r9, lsl r3
    3034:	46520000 	ldrbmi	r0, [r2], -r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3038:	06000012 			; <UNDEFINED> instruction: 0x06000012
    303c:	010101ba 			; <UNDEFINED> instruction: 0x010101ba
    3040:	00137503 	andseq	r7, r3, r3, lsl #10
    3044:	11b85300 			; <UNDEFINED> instruction: 0x11b85300
    3048:	ba060000 	blt	183050 <__ccfg+0x1630a8>
strand (__inserial, address)
    304c:	00731501 	rsbseq	r1, r3, r1, lsl #10
    3050:	52000000 	andpl	r0, r0, #0
    3054:	0000132e 	andeq	r1, r0, lr, lsr #6
    3058:	01013906 	tsteq	r1, r6, lsl #18
    305c:	13ac0301 			; <UNDEFINED> instruction: 0x13ac0301
	if (__inpline != NULL)
    3060:	b8530000 	ldmdalt	r3, {}^	; <UNPREDICTABLE>
    3064:	06000011 			; <UNDEFINED> instruction: 0x06000011
		finish;
    3068:	731b0139 	tstvc	fp, #1073741838	; 0x4000000e
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    306c:	53000000 	movwpl	r0, #0
    3070:	000010a0 	andeq	r1, r0, r0, lsr #1
    3074:	2e013906 	vmlacs.f16	s6, s2, s12	; <UNPREDICTABLE>
    3078:	00000073 	andeq	r0, r0, r3, ror r0
		umwait (IM_INIT);
    307c:	00108c53 	andseq	r8, r0, r3, asr ip
		release;
    3080:	013a0600 	teqeq	sl, r0, lsl #12
	savedata (data);
    3084:	0000731b 	andeq	r7, r0, fp, lsl r3
	len = MAX_LINE_LENGTH;
    3088:	51520000 	cmppl	r2, r0
	io (IM_READ, __cport, READ, ptr, 1);
    308c:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    3090:	01010284 	smlabbeq	r1, r4, r2, r0
    3094:	0013c903 	andseq	ip, r3, r3, lsl #18
    3098:	111f5300 	tstne	pc, r0, lsl #6
	if (ptr == (char*) data) { // new line
    309c:	84040000 	strhi	r0, [r4], #-0
    30a0:	00731e02 	rsbseq	r1, r3, r2, lsl #28
		if (*ptr == '\0') { // bin cmd
    30a4:	52000000 	andpl	r0, r0, #0
			proceed (IM_BIN);
    30a8:	00000f4e 	andeq	r0, r0, lr, asr #30
    30ac:	01020604 	tsteq	r2, r4, lsl #12
		if (*ptr < 0x20)
    30b0:	13f30301 	mvnsne	r0, #67108864	; 0x4000000
    30b4:	1f530000 	svcne	0x00530000
			proceed (IM_READ);
    30b8:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    30bc:	73230206 			; <UNDEFINED> instruction: 0x73230206
	if (*ptr == '\n' || *ptr == '\r') {
    30c0:	53000000 	movwpl	r0, #0
    30c4:	0000142e 	andeq	r1, r0, lr, lsr #8
    30c8:	37020604 	strcc	r0, [r2, -r4, lsl #12]
		*ptr = '\0';
    30cc:	00000073 	andeq	r0, r0, r3, ror r0
		__inpline = (char*)data;
    30d0:	12c25200 	sbcne	r5, r2, #0, 4
		finish;
    30d4:	54040000 	strpl	r0, [r4], #-0
	if (len) {
    30d8:	03010101 	movweq	r0, #4353	; 0x1101
		ptr++;
    30dc:	00001410 	andeq	r1, r0, r0, lsl r4
    30e0:	00111f53 	andseq	r1, r1, r3, asr pc
		len--;
    30e4:	01540400 	cmpeq	r4, r0, lsl #8
	proceed (IM_READ);
    30e8:	00007319 	andeq	r7, r0, r9, lsl r3
	io (IM_BIN, __cport, READ, ptr, 1);
    30ec:	cf520000 	svcgt	0x00520000
    30f0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    30f4:	0101011e 	tsteq	r1, lr, lsl r1
    30f8:	00142d03 	andseq	r2, r4, r3, lsl #26
    30fc:	111f5300 	tstne	pc, r0, lsl #6
	len -= 2;
    3100:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
	if (len > *ptr + 1) // 1 for 0x04
    3104:	00731701 	rsbseq	r1, r3, r1, lsl #14
    3108:	56000000 	strpl	r0, [r0], -r0
		len = *ptr + 1;
    310c:	00001154 	andeq	r1, r0, r4, asr r1
    3110:	01046309 	tsteq	r4, r9, lsl #6
	ptr++;
    3114:	bc560301 	mrrclt	3, 0, r0, r6, cr1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3118:	09000010 	stmdbeq	r0, {r4}
    311c:	01010454 	tsteq	r1, r4, asr r4
    3120:	10d55603 	sbcsne	r5, r5, r3, lsl #12
    3124:	2a090000 	bcs	24312c <__ccfg+0x223184>
    3128:	03010102 	movweq	r0, #4354	; 0x1102
    312c:	00141952 	andseq	r1, r4, r2, asr r9
	len -= quant;
    3130:	01680900 	cmneq	r8, r0, lsl #18
		__inpline = (char*)data;
    3134:	6b030101 	blvs	c3540 <__ccfg+0xa3598>
		finish;
    3138:	53000014 	movwpl	r0, #20
	ptr += quant;
    313c:	000010e1 	andeq	r1, r0, r1, ror #1
    3140:	1f016809 	svcne	0x00016809
endstrand
    3144:	00000073 	andeq	r0, r0, r3, ror r0
    3148:	101b5600 	andsne	r5, fp, r0, lsl #12
	proceed (IM_BINL);
    314c:	32090000 	andcc	r0, r9, #0
endstrand
    3150:	03010101 	movweq	r0, #4353	; 0x1101
    3154:	000d4459 	andeq	r4, sp, r9, asr r4
	...
    3160:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    3164:	00000d58 	andeq	r0, r0, r8, asr sp
		if (res && (d < n))
    3168:	000007ab 	andeq	r0, r0, fp, lsr #15
    316c:	121f0000 	andsne	r0, pc, #0
    3170:	00030000 	andeq	r0, r3, r0
    3174:	00000a03 	andeq	r0, r0, r3, lsl #20
			res [d] = (char) c;
    3178:	00a30104 	adceq	r0, r3, r4, lsl #2
		d++;
    317c:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
    3180:	08000015 	stmdaeq	r0, {r0, r2, r4}
    3184:	c800000e 	stmdagt	r0, {r1, r2, r3}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3188:	00000007 	andeq	r0, r0, r7
    318c:	1f000000 	svcne	0x00000000
    3190:	02000022 	andeq	r0, r0, #34	; 0x22
				enci (10000);
    3194:	0c690601 	stcleq	6, cr0, [r9], #-4
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3198:	02020000 	andeq	r0, r2, #0
    319c:	000a7705 	andeq	r7, sl, r5, lsl #14
	d = 0;
    31a0:	2b9f0300 	blcs	fe7c3da8 <_estack+0xde7beda8>
		c = *fm++;
    31a4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
		if (c == '\\') {
    31a8:	00003f18 	andeq	r3, r0, r8, lsl pc
			if ((c = *fm++) == '\0') {
    31ac:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    31b0:	00000809 	andeq	r0, r0, r9, lsl #16
				outc ('\\');
    31b4:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
			if ((c = *fm++) == '\0') {
    31b8:	03000008 	movweq	r0, #8
				outc ('\\');
    31bc:	00002a1a 	andeq	r2, r0, sl, lsl sl
    31c0:	59182e03 	ldmdbpl	r8, {r0, r1, r9, sl, fp, sp}
			outc (c);
    31c4:	02000000 	andeq	r0, r0, #0
    31c8:	0c670801 	stcleq	8, cr0, [r7], #-4
			if (c == '\0')
    31cc:	10030000 	andne	r0, r3, r0
    31d0:	0300002e 	movweq	r0, #46	; 0x2e
			outc (c);
    31d4:	006c1931 	rsbeq	r1, ip, r1, lsr r9
				outc (val);
    31d8:	02020000 	andeq	r0, r2, #0
				val = (word) va_arg (ap, aword);
    31dc:	000d6407 	andeq	r6, sp, r7, lsl #8
		if (c == '%') {
    31e0:	29b20300 	ldmibcs	r2!, {r8, r9}
    31e4:	34030000 	strcc	r0, [r3], #-0
			c = *fm++;
    31e8:	00007f19 	andeq	r7, r0, r9, lsl pc
			switch (c) {
    31ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    31f0:	00000439 	andeq	r0, r0, r9, lsr r4
    31f4:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    31f8:	04000004 	streq	r0, [r0], #-4
    31fc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3200:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3204:	00043e07 	andeq	r3, r4, r7, lsl #28
    3208:	052a0300 	streq	r0, [sl, #-768]!	; 0xfffffd00
				outc ('%');
    320c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    3210:	0000a71b 	andeq	sl, r0, fp, lsl r7
				outc (c);
    3214:	0b9c0500 	bleq	fe70461c <_estack+0xde6ff61c>
    3218:	0b040000 	bleq	103220 <__ccfg+0xe3278>
    321c:	0000bf00 	andeq	fp, r0, r0, lsl #30
				if (c == '\0')
    3220:	08790600 	ldmdaeq	r9!, {r9, sl}^
				return d;
    3224:	00bf0000 	adcseq	r0, pc, r0
}
    3228:	01000000 	mrseq	r0, (UNDEF: 0)
    322c:	03040700 	movweq	r0, #18176	; 0x4700
			switch (c) {
    3230:	00000b9e 	muleq	r0, lr, fp
    3234:	9b186304 	blls	61be4c <__ccfg+0x5fbea4>
    3238:	03000000 	movweq	r0, #0
				for (i = 12; ; i -= 4) {
    323c:	00001326 	andeq	r1, r0, r6, lsr #6
				val = (word) va_arg (ap, aword);
    3240:	4d122605 	ldcmi	6, cr2, [r2, #-20]	; 0xffffffec
						[ (val >> i) & 0xf ]);
    3244:	03000000 	movweq	r0, #0
    3248:	000028f9 	strdeq	r2, [r0], -r9
    324c:	60122705 	andsvs	r2, r2, r5, lsl #14
					outc (__pi_hex_enc_table
    3250:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3254:	000000d9 	ldrdeq	r0, [r0], -r9
					if (i == 0)
    3258:	0000d909 	andeq	sp, r0, r9, lsl #18
    325c:	13ca0300 	bicne	r0, sl, #0, 6
				for (i = 12; ; i -= 4) {
    3260:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    3264:	00003312 	andeq	r3, r0, r2, lsl r3
				if (c == 'd' && (val & 0x8000) != 0) {
    3268:	1dc00300 	stclne	3, cr0, [r0]
				val = (word) va_arg (ap, aword);
    326c:	2b050000 	blcs	143274 <__ccfg+0x1232cc>
				if (c == 'd' && (val & 0x8000) != 0) {
    3270:	00004d12 	andeq	r4, r0, r2, lsl sp
    3274:	00fb0900 	rscseq	r0, fp, r0, lsl #18
					outc ('-');
    3278:	4b030000 	blmi	c3280 <__ccfg+0xa32d8>
    327c:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
					val = (~val) + 1;
    3280:	0073122c 	rsbseq	r1, r3, ip, lsr #4
    3284:	0c080000 	stceq	0, cr0, [r8], {-0}
				for (i = 12; ; i -= 4) {
    3288:	03000001 	movweq	r0, #1
				enci (10000);
    328c:	00000652 	andeq	r0, r0, r2, asr r6
    3290:	73122d05 	tstvc	r2, #320	; 0x140
    3294:	03000000 	movweq	r0, #0
    3298:	00000bc0 	andeq	r0, r0, r0, asr #23
    329c:	35102e05 	ldrcc	r2, [r0, #-3589]	; 0xfffff1fb
    32a0:	0a000001 	beq	32ac <__pi_vfparse+0x124>
    32a4:	0000d904 	andeq	sp, r0, r4, lsl #18
    32a8:	05080b00 	streq	r0, [r8, #-2816]	; 0xfffff500
    32ac:	01c90932 	biceq	r0, r9, r2, lsr r9
    32b0:	2b0c0000 	blcs	3032b8 <__ccfg+0x2e3310>
    32b4:	05000000 	streq	r0, [r0, #-0]
    32b8:	00fb0734 	rscseq	r0, fp, r4, lsr r7
    32bc:	01010000 	mrseq	r0, (UNDEF: 1)
    32c0:	580c0007 	stmdapl	ip, {r0, r1, r2}
    32c4:	05000006 	streq	r0, [r0, #-6]
    32c8:	00fb0335 	rscseq	r0, fp, r5, lsr r3
    32cc:	01010000 	mrseq	r0, (UNDEF: 1)
    32d0:	ef0c0006 	svc	0x000c0006
				if (c == 'd' || c == 'u') {
    32d4:	05000002 	streq	r0, [r0, #-2]
    32d8:	00fb0336 	rscseq	r0, fp, r6, lsr r3
					if (c == 'd' &&
    32dc:	01010000 	mrseq	r0, (UNDEF: 1)
					val = va_arg (ap, lword);
    32e0:	c30c0005 	movwgt	r0, #49157	; 0xc005
					fm++;
    32e4:	05000006 	streq	r0, [r0, #-6]
					if (c == 'd' &&
    32e8:	00fb0337 	rscseq	r0, fp, r7, lsr r3
    32ec:	01010000 	mrseq	r0, (UNDEF: 1)
						outc ('-');
    32f0:	ab0c0004 	blge	303308 <__ccfg+0x2e3360>
    32f4:	0500000a 	streq	r0, [r0, #-10]
						val = (~val) + 1;
    32f8:	00fb0338 	rscseq	r0, fp, r8, lsr r3
				enci (10000);
    32fc:	04010000 	streq	r0, [r1], #-0
					enci (1000000000UL);
    3300:	670d0000 	strvs	r0, [sp, -r0]
    3304:	05000006 	streq	r0, [r0, #-6]
    3308:	00fb073a 	rscseq	r0, fp, sl, lsr r7
    330c:	0d010000 	stceq	0, cr0, [r1, #-0]
    3310:	00000907 	andeq	r0, r0, r7, lsl #18
    3314:	fb033c05 	blx	d2332 <__ccfg+0xb238a>
    3318:	02000000 	andeq	r0, r0, #0
    331c:	000f380d 	andeq	r3, pc, sp, lsl #16
    3320:	033d0500 	teqeq	sp, #0, 10
    3324:	000000fb 	strdeq	r0, [r0], -fp
    3328:	091f0d03 	ldmdbeq	pc, {r0, r1, r8, sl, fp}	; <UNPREDICTABLE>
    332c:	3f050000 	svccc	0x00050000
    3330:	00010c08 	andeq	r0, r1, r8, lsl #24
    3334:	03000400 	movweq	r0, #1024	; 0x400
    3338:	00000325 	andeq	r0, r0, r5, lsr #6
    333c:	3b034105 	blcc	d3758 <__ccfg+0xb37b0>
    3340:	09000001 	stmdbeq	r0, {r0}
				} else if (c == 'x') {
    3344:	000001c9 	andeq	r0, r0, r9, asr #3
					for (i = 28; ; i -= 4) {
    3348:	0006ca0e 	andeq	ip, r6, lr, lsl #20
					val = va_arg (ap, lword);
    334c:	1a430500 	bne	10c4754 <__ccfg+0x10a47ac>
							[ (val >> i) & 0xf ]);
    3350:	000001d5 	ldrdeq	r0, [r0], -r5
    3354:	970e0101 	strls	r0, [lr, -r1, lsl #2]
						outc (__pi_hex_enc_table
    3358:	05000001 	streq	r0, [r0, #-1]
    335c:	01f60e45 	mvnseq	r0, r5, asr #28
    3360:	01010000 	mrseq	r0, (UNDEF: 1)
						if (i == 0)
    3364:	01fc040a 	mvnseq	r0, sl, lsl #8
    3368:	01020000 	mrseq	r0, (UNDEF: 2)
					for (i = 28; ; i -= 4) {
    336c:	000c7008 	andeq	r7, ip, r8
					outc ('%');
    3370:	01fc0800 	mvnseq	r0, r0, lsl #16
    3374:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    3378:	05000003 	streq	r0, [r0, #-3]
					outc ('l');
    337c:	01f61e45 	mvnseq	r1, r5, asr #28
    3380:	01010000 	mrseq	r0, (UNDEF: 1)
				val = (word) va_arg (ap, aword);
    3384:	8f06080b 	svchi	0x0006080b
				outc (val);
    3388:	00024709 	andeq	r4, r2, r9, lsl #14
    338c:	0cd60d00 	ldcleq	13, cr0, [r6], {0}
				while (*st != '\0') {
    3390:	90060000 	andls	r0, r6, r0
    3394:	0000730b 	andeq	r7, r0, fp, lsl #6
    3398:	730d0000 	movwvc	r0, #53248	; 0xd000
    339c:	06000010 			; <UNDEFINED> instruction: 0x06000010
					outc (*st);
    33a0:	00d90891 	smullseq	r0, r9, r1, r8
    33a4:	0d040000 	stceq	0, cr0, [r4, #-0]
					st++;
    33a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
		c = *fm++;
    33ac:	07109206 	ldreq	r9, [r0, -r6, lsl #4]
    33b0:	06000001 	streq	r0, [r0], -r1
    33b4:	0cca0300 	stcleq	3, cr0, [sl], {0}
char *vform (char *res, const char *fm, va_list aq) {
    33b8:	93060000 	movwls	r0, #24576	; 0x6000
    33bc:	00021603 	andeq	r1, r2, r3, lsl #12
	if (res != NULL) {
    33c0:	02470f00 	subeq	r0, r7, #0, 30
		__pi_vfparse (res, MAX_WORD, fm, aq);
    33c4:	025e0000 	subseq	r0, lr, #0
    33c8:	00100000 	andseq	r0, r0, r0
    33cc:	0009490e 	andeq	r4, r9, lr, lsl #18
}
    33d0:	0f990600 	svceq	0x00990600
    33d4:	00000253 	andeq	r0, r0, r3, asr r2
	fml = strlen (fm) + 17;
    33d8:	010b0101 	tsteq	fp, r1, lsl #2
    33dc:	96099107 	strls	r9, [r9], -r7, lsl #2
    33e0:	0c000002 	stceq	0, cr0, [r0], {2}
	if ((res = (char*) umalloc (fml)) == NULL)
    33e4:	00000926 	andeq	r0, r0, r6, lsr #18
    33e8:	fb079307 	blx	1e800e <__ccfg+0x1c8066>
    33ec:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    33f0:	0c000107 	stfeqs	f0, [r0], {7}
    33f4:	000005d8 	ldrdeq	r0, [r0], -r8
    33f8:	fb039407 	blx	e841e <__ccfg+0xc8476>
    33fc:	01000000 	mrseq	r0, (UNDEF: 0)
		ufree (res);
    3400:	00000001 	andeq	r0, r0, r1
		goto Again;
    3404:	000ab703 	andeq	fp, sl, r3, lsl #14
	if (buf == NULL || fmt == NULL)
    3408:	03960700 	orrseq	r0, r6, #0, 14
int vscan (const char *buf, const char *fmt, va_list ap) {
    340c:	0000026c 	andeq	r0, r0, ip, ror #4
	if (buf == NULL || fmt == NULL)
    3410:	00029608 	andeq	r9, r2, r8, lsl #12
    3414:	02a20f00 	adceq	r0, r2, #0, 30
    3418:	02b20000 	adcseq	r0, r2, #0
		    	    case 'u': scanu (lword); break;
    341c:	00100000 	andseq	r0, r0, r0
			while (isspace (*buf)) buf++;
    3420:	0002a708 	andeq	sl, r2, r8, lsl #14
    3424:	03bd0e00 			; <UNDEFINED> instruction: 0x03bd0e00
	while (*fmt != '\0') {
    3428:	9c070000 	stcls	0, cr0, [r7], {-0}
		if (*fmt++ != '%')
    342c:	0002b217 	andeq	fp, r2, r7, lsl r2
		switch (*fmt++) {
    3430:	0f010100 	svceq	0x00010100
    3434:	000000e5 	andeq	r0, r0, r5, ror #1
    3438:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    343c:	c5080010 	strgt	r0, [r8, #-16]
    3440:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3444:	0000061a 	andeq	r0, r0, sl, lsl r6
    3448:	d0130608 	andsle	r0, r3, r8, lsl #12
}
    344c:	01000002 	tsteq	r0, r2
		switch (*fmt++) {
    3450:	08e90e01 	stmiaeq	r9!, {r0, r9, sl, fp}^
    3454:	c3060000 	movwgt	r0, #24576	; 0x6000
    3458:	00010c0e 	andeq	r0, r1, lr, lsl #24
    345c:	11010100 	mrsne	r0, (UNDEF: 17)
			while (isspace (*buf)) buf++;
    3460:	00000c7e 	andeq	r0, r0, lr, ror ip
    3464:	10016e09 	andne	r6, r1, r9, lsl #28
    3468:	000002fe 	strdeq	r0, [r0], -lr
    346c:	0304040a 	movweq	r0, #17418	; 0x440a
    3470:	01120000 	tsteq	r2, r0
    3474:	00000310 	andeq	r0, r0, r0, lsl r3
			if (*buf == '\0')
    3478:	0000d913 	andeq	sp, r0, r3, lsl r9
			if (*buf != ',') {
    347c:	030f0000 	movweq	r0, #61440	; 0xf000
			sap = va_arg (ap, char*);
    3480:	1b000002 	blne	3490 <vscan+0x88>
			nc++;
    3484:	10000003 	andne	r0, r0, r3
			if (*buf != ',') {
    3488:	03100800 	tsteq	r0, #0, 16
				while (!isspace (*buf) && *buf != ',' &&
    348c:	f2140000 	vhadd.s16	d0, d4, d0
    3490:	09000009 	stmdbeq	r0, {r0, r3}
    3494:	1b16017f 	blne	583a98 <__ccfg+0x563af0>
    3498:	01000003 	tsteq	r0, r3
    349c:	03a91401 			; <UNDEFINED> instruction: 0x03a91401
    34a0:	82090000 	andhi	r0, r9, #0
    34a4:	01181401 	tsteq	r8, r1, lsl #8
			while (isspace (*buf)) buf++;
    34a8:	01010000 	mrseq	r0, (UNDEF: 1)
    34ac:	00038114 	andeq	r8, r3, r4, lsl r1
    34b0:	02d80900 	sbcseq	r0, r8, #0, 18
    34b4:	00010c0e 	andeq	r0, r1, lr, lsl #24
    34b8:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
			if (*buf == ',') buf++;
    34bc:	03030908 	movweq	r0, #14600	; 0x3908
    34c0:	00037409 	andeq	r7, r3, r9, lsl #8
			*sap = '\0';
    34c4:	3c9f1600 	ldccc	6, cr1, [pc], {0}
			break;
    34c8:	07090000 	streq	r0, [r9, -r0]
		    case 'd': scani (word); break;
    34cc:	00d90703 	sbcseq	r0, r9, r3, lsl #14
    34d0:	16000000 	strne	r0, [r0], -r0
    34d4:	00000fcb 	andeq	r0, r0, fp, asr #31
    34d8:	08030809 	stmdaeq	r3, {r0, r3, fp}
    34dc:	0000011d 	andeq	r0, r0, sp, lsl r1
    34e0:	15110004 	ldrne	r0, [r1, #-4]
    34e4:	0900000a 	stmdbeq	r0, {r1, r3}
    34e8:	4d030309 	stcmi	3, cr0, [r3, #-36]	; 0xffffffdc
    34ec:	17000003 	strne	r0, [r0, -r3]
    34f0:	00000020 	andeq	r0, r0, r0, lsr #32
    34f4:	030b0930 	movweq	r0, #47408	; 0xb930
    34f8:	0003e408 	andeq	lr, r3, r8, lsl #8
    34fc:	1f221600 	svcne	0x00221600
    3500:	14090000 	strne	r0, [r9], #-0
    3504:	00d90803 	sbcseq	r0, r9, r3, lsl #16
    3508:	16000000 	strne	r0, [r0], -r0
    350c:	00000bf3 	strdeq	r0, [r0], -r3
    3510:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    3514:	000000d9 	ldrdeq	r0, [r0], -r9
    3518:	4c8c1602 	stcmi	6, cr1, [ip], {2}
    351c:	16090000 	strne	r0, [r9], -r0
    3520:	02f10b03 	rscseq	r0, r1, #3072	; 0xc00
    3524:	16040000 	strne	r0, [r4], -r0
    3528:	00004752 	andeq	r4, r0, r2, asr r7
    352c:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    3530:	0000011d 	andeq	r0, r0, sp, lsl r1
    3534:	000f1608 	andeq	r1, pc, r8, lsl #12
    3538:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
		    case 'u': scanu (word); break;
    353c:	03e40f03 	mvneq	r0, #3, 30
    3540:	160c0000 	strne	r0, [ip], -r0
    3544:	00000969 	andeq	r0, r0, r9, ror #18
    3548:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    354c:	000003f4 	strdeq	r0, [r0], -r4
    3550:	740f002c 	strvc	r0, [pc], #-44	; 3558 <vscan+0x150>
    3554:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    3558:	18000003 	stmdane	r0, {r0, r1}
    355c:	00000094 	muleq	r0, r4, r0
    3560:	040a0003 	streq	r0, [sl], #-3
    3564:	00000381 	andeq	r0, r0, r1, lsl #7
    3568:	000be811 	andeq	lr, fp, r1, lsl r8
    356c:	031c0900 	tsteq	ip, #0, 18
    3570:	0003811b 	andeq	r8, r3, fp, lsl r1
    3574:	0bc81400 	bleq	ff20857c <_estack+0xdf20357c>
    3578:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    357c:	04161403 	ldreq	r1, [r6], #-1027	; 0xfffffbfd
    3580:	01010000 	mrseq	r0, (UNDEF: 1)
		    case 'x': scanx (word); break;
    3584:	03fa040a 	mvnseq	r0, #167772160	; 0xa000000
    3588:	1b0e0000 	blne	383590 <__ccfg+0x3635e8>
    358c:	0a000007 	beq	35b0 <vscan+0x1a8>
    3590:	00d9131d 	sbcseq	r1, r9, sp, lsl r3
    3594:	01010000 	mrseq	r0, (UNDEF: 1)
    3598:	0002f60e 	andeq	pc, r2, lr, lsl #12
    359c:	1a1e0a00 	bne	785da4 <__ccfg+0x765dfc>
    35a0:	000000ea 	andeq	r0, r0, sl, ror #1
    35a4:	750e0101 	strvc	r0, [lr, #-257]	; 0xfffffeff
    35a8:	0a00000c 	beq	35e0 <vscan+0x1d8>
    35ac:	00ea241e 	rsceq	r2, sl, lr, lsl r4
    35b0:	01010000 	mrseq	r0, (UNDEF: 1)
    35b4:	000c930e 	andeq	r9, ip, lr, lsl #6
    35b8:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    35bc:	00000416 	andeq	r0, r0, r6, lsl r4
    35c0:	a1030101 	tstge	r3, r1, lsl #2
    35c4:	0a000014 	beq	361c <vscan+0x214>
    35c8:	04600f44 	strbteq	r0, [r0], #-3908	; 0xfffff0bc
    35cc:	040a0000 	streq	r0, [sl], #-0
    35d0:	00000466 	andeq	r0, r0, r6, ror #8
    35d4:	008d0119 	addeq	r0, sp, r9, lsl r1
    35d8:	04800000 	streq	r0, [r0], #0
    35dc:	8d130000 	ldchi	0, cr0, [r3, #-0]
    35e0:	13000000 	movwne	r0, #0
    35e4:	000001f6 	strdeq	r0, [r0], -r6
    35e8:	00008d13 	andeq	r8, r0, r3, lsl sp
    35ec:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
    35f0:	01000003 	tsteq	r0, r3
    35f4:	0305070c 	movweq	r0, #22284	; 0x570c
    35f8:	200006a8 	andcs	r0, r0, r8, lsr #13
			switch (*fmt++) {
    35fc:	0016451b 	andseq	r4, r6, fp, lsl r5
    3600:	07100100 	ldreq	r0, [r0, -r0, lsl #2]
    3604:	0000010c 	andeq	r0, r0, ip, lsl #2
    3608:	04030501 	streq	r0, [r3], #-1281	; 0xfffffaff
    360c:	1a200000 	bne	803614 <__ccfg+0x7e366c>
    3610:	00000446 	andeq	r0, r0, r6, asr #8
		    	    case 'd': scani (lword); break;
    3614:	050d1a01 	streq	r1, [sp, #-2561]	; 0xfffff5ff
    3618:	00058003 	andeq	r8, r5, r3
    361c:	04540f20 	ldrbeq	r0, [r4], #-3872	; 0xfffff0e0
    3620:	04bf0000 	ldrteq	r0, [pc], #0	; 3628 <vscan+0x220>
    3624:	94180000 	ldrls	r0, [r8], #-0
    3628:	00000000 	andeq	r0, r0, r0
    362c:	14d91c00 	ldrbne	r1, [r9], #3072	; 0xc00
    3630:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3634:	0004af14 	andeq	sl, r4, r4, lsl pc
    3638:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    363c:	1a200005 	bne	803658 <__ccfg+0x7e36b0>
    3640:	000001da 	ldrdeq	r0, [r0], -sl
    3644:	05132201 	ldreq	r2, [r3, #-513]	; 0xfffffdff
    3648:	0006b003 	andeq	fp, r6, r3
    364c:	04071a20 	streq	r1, [r7], #-2592	; 0xfffff5e0
    3650:	27010000 	strcs	r0, [r1, -r0]
    3654:	cc03050d 	cfstr32gt	mvfx0, [r3], {13}
    3658:	1a200006 	bne	803678 <__ccfg+0x7e36d0>
    365c:	0000041c 	andeq	r0, r0, ip, lsl r4
    3660:	05073001 	streq	r3, [r7, #-1]
    3664:	0006ac03 	andeq	sl, r6, r3, lsl #24
    3668:	042a1a20 	strteq	r1, [sl], #-2592	; 0xfffff5e0
    366c:	31010000 	mrscc	r0, (UNDEF: 1)
		    	    case 'x': scanx (lword); break;
    3670:	ae03050f 	cfsh32ge	mvfx0, mvfx3, #15
    3674:	1a200006 	bne	803694 <__ccfg+0x7e36ec>
    3678:	00000438 	andeq	r0, r0, r8, lsr r4
    367c:	05193101 	ldreq	r3, [r9, #-257]	; 0xfffffeff
    3680:	0006b803 	andeq	fp, r6, r3, lsl #16
    3684:	01290f20 			; <UNDEFINED> instruction: 0x01290f20
    3688:	05270000 	streq	r0, [r7, #-0]!
    368c:	94180000 	ldrls	r0, [r8], #-0
    3690:	03000000 	movweq	r0, #0
    3694:	13bf1b00 			; <UNDEFINED> instruction: 0x13bf1b00
    3698:	36010000 	strcc	r0, [r1], -r0
    369c:	0005170a 	andeq	r1, r5, sl, lsl #14
    36a0:	03050100 	movweq	r0, #20736	; 0x5100
    36a4:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    36a8:	0003201a 	andeq	r2, r3, sl, lsl r0
    36ac:	0c3f0100 	ldfeqs	f0, [pc], #-0	; 36b4 <vscan+0x2ac>
    36b0:	4e690305 	cdpmi	3, 6, cr0, cr9, cr5, {0}
    36b4:	2f1a0000 	svccs	0x001a0000
    36b8:	01000003 	tsteq	r0, r3
    36bc:	03050d45 	movweq	r0, #23877	; 0x5d45
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	4901020b 	stmdbmi	r1, {r0, r1, r3, r9}
    36c8:	00057a09 	andeq	r7, r5, r9, lsl #20
    36cc:	14cd0d00 	strbne	r0, [sp], #3328	; 0xd00
    36d0:	4a010000 	bmi	436d8 <__ccfg+0x23730>
    36d4:	0000fb07 	andeq	pc, r0, r7, lsl #22
    36d8:	840d0000 	strhi	r0, [sp], #-0
    36dc:	01000016 	tsteq	r0, r6, lsl r0
		    	    case 'd': scani (lword); break;
    36e0:	00fb074b 	rscseq	r0, fp, fp, asr #14
    36e4:	00010000 	andeq	r0, r1, r0
    36e8:	00159303 	andseq	r9, r5, r3, lsl #6
    36ec:	034c0100 	movteq	r0, #49408	; 0xc100
    36f0:	00000556 	andeq	r0, r0, r6, asr r5
    36f4:	00057a0f 	andeq	r7, r5, pc, lsl #20
    36f8:	00059600 	andeq	r9, r5, r0, lsl #12
		    	    case 'u': scanu (lword); break;
    36fc:	00941800 	addseq	r1, r4, r0, lsl #16
    3700:	00000000 	andeq	r0, r0, r0
    3704:	0015f31c 	andseq	pc, r5, ip, lsl r3	; <UNPREDICTABLE>
    3708:	114e0100 	mrsne	r0, (UNDEF: 94)
    370c:	00000586 	andeq	r0, r0, r6, lsl #11
    3710:	058c0305 	streq	r0, [ip, #773]	; 0x305
    3714:	b80f2000 	stmdalt	pc, {sp}	; <UNPREDICTABLE>
    3718:	b8000005 	stmdalt	r0, {r0, r2}
    371c:	18000005 	stmdane	r0, {r0, r2}
    3720:	00000094 	muleq	r0, r4, r0
    3724:	040a0000 	streq	r0, [sl], #-0
    3728:	0000011d 	andeq	r0, r0, sp, lsl r1
    372c:	0014ee1d 	andseq	lr, r4, sp, lsl lr
    3730:	02bd0100 	adcseq	r0, sp, #0, 2
    3734:	0005a80f 	andeq	sl, r5, pc, lsl #16
    3738:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    373c:	0f200005 	svceq	0x00200005
    3740:	0000011d 	andeq	r0, r0, sp, lsl r1
		    	    case 'x': scanx (lword); break;
    3744:	000005e1 	andeq	r0, r0, r1, ror #11
    3748:	00009418 	andeq	r9, r0, r8, lsl r4
			if ((c = *buf++) == '\0')
    374c:	1d000000 	stcne	0, cr0, [r0, #-0]
    3750:	0000154e 	andeq	r1, r0, lr, asr #10
			sap = va_arg (ap, char*);
    3754:	0e02c201 	cdpeq	2, 0, cr12, cr2, cr1, {0}
			nc++;
    3758:	000005d1 	ldrdeq	r0, [r0], -r1
			break;
    375c:	05900305 	ldreq	r0, [r0, #773]	; 0x305
			while (isspace (*buf)) buf++;
    3760:	9c1d2000 	ldcls	0, cr2, [sp], {-0}
    3764:	01000015 	tsteq	r0, r5, lsl r0
    3768:	d12602c2 	smlawtle	r6, r2, r2, r0
						*sap++ = *buf++;
    376c:	05000005 	streq	r0, [r0, #-5]
    3770:	00058803 	andeq	r8, r5, r3, lsl #16
			while (isspace (*buf)) buf++;
    3774:	1f011e20 	svcne	0x00011e20
    3778:	01000016 	tsteq	r0, r6, lsl r0
    377c:	0107052f 	tsteq	r7, pc, lsr #10
		return 0;
    3780:	0000010c 	andeq	r0, r0, ip, lsl #2
    3784:	00001c88 	andeq	r1, r0, r8, lsl #25
		    case 'x': scanx (word); break;
    3788:	00001cac 	andeq	r1, r0, ip, lsr #25
    378c:	011f9c01 	tsteq	pc, r1, lsl #24
		    	    case 'x': scanx (lword); break;
    3790:	00001582 	andeq	r1, r0, r2, lsl #11
    3794:	06048201 	streq	r8, [r4], -r1, lsl #4
    3798:	001b4c01 	andseq	r4, fp, r1, lsl #24
    379c:	001c8800 	andseq	r8, ip, r0, lsl #16
    37a0:	0e9c0100 	fmleqe	f0, f4, f0
    37a4:	20000007 	andcs	r0, r0, r7
    37a8:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
    37ac:	18048201 	stmdane	r4, {r0, r9, pc}
    37b0:	0000070e 	andeq	r0, r0, lr, lsl #14
    37b4:	000007be 			; <UNDEFINED> instruction: 0x000007be
    37b8:	61762221 	cmnvs	r6, r1, lsr #4
    37bc:	8701006c 	strhi	r0, [r1, -ip, rrx]
    37c0:	010c0804 	tsteq	ip, r4, lsl #16
    37c4:	07fe0000 	ldrbeq	r0, [lr, r0]!
    37c8:	61230000 			; <UNDEFINED> instruction: 0x61230000
    37cc:	88010070 	stmdahi	r1, {r4, r5, r6}
    37d0:	00c10a04 	sbceq	r0, r1, r4, lsl #20
    37d4:	91020000 	mrsls	r0, (UNDEF: 2)
    37d8:	6362224c 	cmnvs	r2, #76, 4	; 0xc0000004
    37dc:	04890100 	streq	r0, [r9], #256	; 0x100
    37e0:	0000ef07 	andeq	lr, r0, r7, lsl #30
    37e4:	00083d00 	andeq	r3, r8, r0, lsl #26
    37e8:	00762200 	rsbseq	r2, r6, r0, lsl #4
    37ec:	07048a01 	streq	r8, [r4, -r1, lsl #20]
    37f0:	000000d9 	ldrdeq	r0, [r0], -r9
    37f4:	00000871 	andeq	r0, r0, r1, ror r8
    37f8:	00736924 	rsbseq	r6, r3, r4, lsr #18
    37fc:	07048b01 	streq	r8, [r4, -r1, lsl #22]
    3800:	000000fb 	strdeq	r0, [r0], -fp
    3804:	00169425 	andseq	r9, r6, r5, lsr #8
    3808:	04b00100 	ldrteq	r0, [r0], #256	; 0x100
    380c:	001c1801 	andseq	r1, ip, r1, lsl #16
    3810:	1bd82600 	blne	ff60d018 <_estack+0xdf608018>
    3814:	1bf40000 	blne	ffd0381c <_estack+0xdfcfe81c>
    3818:	06c00000 	strbeq	r0, [r0], r0
    381c:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3820:	049f0100 	ldreq	r0, [pc], #256	; 3828 <NOROM_CPUcpsid>
    3824:	0000ef0a 	andeq	lr, r0, sl, lsl #30
    3828:	00089a00 	andeq	r9, r8, r0, lsl #20
    382c:	80270000 	eorhi	r0, r7, r0
    3830:	d9000007 	stmdble	r0, {r0, r1, r2}
    3834:	22000006 	andcs	r0, r0, #6
    3838:	a9010064 	stmdbge	r1, {r2, r5, r6}
    383c:	010c0b04 	tsteq	ip, r4, lsl #22
    3840:	08ad0000 	stmiaeq	sp!, {}	; <UNPREDICTABLE>
    3844:	26000000 	strcs	r0, [r0], -r0
    3848:	00001c64 	andeq	r1, r0, r4, ror #24
    384c:	00001c72 	andeq	r1, r0, r2, ror ip
    3850:	000006f6 	strdeq	r0, [r0], -r6
    3854:	01007322 	tsteq	r0, r2, lsr #6
    3858:	f60b04c6 			; <UNDEFINED> instruction: 0xf60b04c6
    385c:	d6000001 	strle	r0, [r0], -r1
    3860:	00000008 	andeq	r0, r0, r8
    3864:	0010c128 	andseq	ip, r0, r8, lsr #2
    3868:	001b7a00 	andseq	r7, fp, r0, lsl #20
    386c:	0007b000 	andeq	fp, r7, r0
    3870:	04d90100 	ldrbeq	r0, [r9], #256	; 0x100
    3874:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    3878:	00000000 	andeq	r0, r0, r0
    387c:	0203040a 	andeq	r0, r3, #167772160	; 0xa000000
    3880:	692a0000 	stmdbvs	sl!, {}	; <UNPREDICTABLE>
    3884:	01000016 	tsteq	r0, r6, lsl r0
    3888:	010d0447 	tsteq	sp, r7, asr #8
    388c:	00001630 	andeq	r1, r0, r0, lsr r6
    3890:	00001648 	andeq	r1, r0, r8, asr #12
    3894:	07539c01 	ldrbeq	r9, [r3, -r1, lsl #24]
    3898:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    389c:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    38a0:	0000d919 	andeq	sp, r0, r9, lsl r9
    38a4:	0008e900 	andeq	lr, r8, r0, lsl #18
    38a8:	10c12800 	sbcne	r2, r1, r0, lsl #16
    38ac:	16300000 	ldrtne	r0, [r0], -r0
    38b0:	07280000 	streq	r0, [r8, -r0]!
    38b4:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    38b8:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    38bc:	00000010 	andeq	r0, r0, r0, lsl r0
    38c0:	33012c00 	movwcc	r2, #7168	; 0x1c00
    38c4:	01000015 	tsteq	r0, r5, lsl r0
    38c8:	01060428 	tsteq	r6, r8, lsr #8
    38cc:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    38d8:	07b49c01 	ldreq	r9, [r4, r1, lsl #24]!
    38dc:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    38e0:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
    38e4:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    38e8:	08fc0000 	ldmeq	ip!, {}^	; <UNPREDICTABLE>
    38ec:	312d0000 			; <UNDEFINED> instruction: 0x312d0000
    38f0:	01000016 	tsteq	r0, r6, lsl r0
    38f4:	b8090431 	stmdalt	r9, {r0, r4, r5, sl}
    38f8:	1a000005 	bne	3914 <NOROM_OSCHF_AttemptToSwitchToXosc+0x3c>
    38fc:	22000009 	andcs	r0, r0, #9
    3900:	0078616d 	rsbseq	r6, r8, sp, ror #2
    3904:	08043201 	stmdaeq	r4, {r0, r9, ip, sp}
    3908:	0000011d 	andeq	r0, r0, sp, lsl r1
    390c:	00000938 	andeq	r0, r0, r8, lsr r9
    3910:	0015492d 	andseq	r4, r5, sp, lsr #18
    3914:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    3918:	00011d0d 	andeq	r1, r1, sp, lsl #26
    391c:	00095600 	andeq	r5, r9, r0, lsl #12
    3920:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3924:	00001624 	andeq	r1, r0, r4, lsr #12
    3928:	06041501 	streq	r1, [r4], -r1, lsl #10
    392c:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3938:	e39c0100 	orrs	r0, ip, #0, 2
    393c:	2b000007 	blcs	3960 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x28>
    3940:	006e696d 	rsbeq	r6, lr, sp, ror #18
    3944:	1c041501 	cfstr32ne	mvfx1, [r4], {1}
    3948:	00000129 	andeq	r0, r0, r9, lsr #2
    394c:	0000097f 	andeq	r0, r0, pc, ror r9
    3950:	12011f00 	andne	r1, r1, #0, 30
    3954:	01000016 	tsteq	r0, r6, lsl r0
    3958:	01060402 	tsteq	r6, r2, lsl #8
    395c:	00001b34 	andeq	r1, r0, r4, lsr fp
    3960:	00001b4c 	andeq	r1, r0, ip, asr #22
    3964:	080e9c01 	stmdaeq	lr, {r0, sl, fp, ip, pc}
    3968:	70200000 	eorvc	r0, r0, r0
    396c:	01000000 	mrseq	r0, (UNDEF: 0)
    3970:	d9190402 	ldmdble	r9, {r1, sl}
    3974:	92000000 	andls	r0, r0, #0
    3978:	00000009 	andeq	r0, r0, r9
    397c:	14c0012c 	strbne	r0, [r0], #300	; 0x12c
    3980:	a3010000 	movwge	r0, #4096	; 0x1000
    3984:	b8010803 	stmdalt	r1, {r0, r1, fp}
    3988:	58000005 	stmdapl	r0, {r0, r2}
    398c:	0000001a 	andeq	r0, r0, sl, lsl r0
    3990:	0100001b 	tsteq	r0, fp, lsl r0
    3994:	0008809c 	muleq	r8, ip, r0
    3998:	1d9f2000 	ldcne	0, cr2, [pc]	; 39a0 <NOROM_RFCSynthPowerDown+0xc>
    399c:	a3010000 	movwge	r0, #4096	; 0x1000
    39a0:	00d91a03 	sbcseq	r1, r9, r3, lsl #20
    39a4:	09a50000 	stmibeq	r5!, {}	; <UNPREDICTABLE>
    39a8:	312d0000 			; <UNDEFINED> instruction: 0x312d0000
    39ac:	01000016 	tsteq	r0, r6, lsl r0
    39b0:	b80903ab 	stmdalt	r9, {r0, r1, r3, r5, r7, r8, r9}
    39b4:	b8000005 	stmdalt	r0, {r0, r2}
    39b8:	22000009 	andcs	r0, r0, #9
    39bc:	01006363 	tsteq	r0, r3, ror #6
    39c0:	b81103ab 	ldmdalt	r1, {r0, r1, r3, r5, r7, r8, r9}
    39c4:	ec000005 	stc	0, cr0, [r0], {5}
    39c8:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    39cc:	000015a3 	andeq	r1, r0, r3, lsr #11
    39d0:	1503ab01 	strne	sl, [r3, #-2817]	; 0xfffff4ff
    39d4:	0000011d 	andeq	r0, r0, sp, lsl r1
    39d8:	00000a15 	andeq	r0, r0, r5, lsl sl
    39dc:	001d9e2d 	andseq	r9, sp, sp, lsr #28
    39e0:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    39e4:	00011d08 	andeq	r1, r1, r8, lsl #26
    39e8:	000a2800 	andeq	r2, sl, r0, lsl #16
    39ec:	012e0000 			; <UNDEFINED> instruction: 0x012e0000
    39f0:	0000168a 	andeq	r1, r0, sl, lsl #13
    39f4:	06037c01 	streq	r7, [r3], -r1, lsl #24
    39f8:	089d0101 	ldmeq	sp, {r0, r8}
    39fc:	632f0000 			; <UNDEFINED> instruction: 0x632f0000
    3a00:	7c010068 	stcvc	0, cr0, [r1], {104}	; 0x68
    3a04:	05b81803 	ldreq	r1, [r8, #2051]!	; 0x803
    3a08:	2a000000 	bcs	3a10 <NOROM_RFCRfTrimRead+0x30>
    3a0c:	000014d3 	ldrdeq	r1, [r0], -r3
    3a10:	0d034a01 	vstreq	s8, [r3, #-4]
    3a14:	0015b001 	andseq	fp, r5, r1
    3a18:	00163000 	andseq	r3, r6, r0
    3a1c:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    3a20:	2b000008 	blcs	3a48 <NOROM_RFCRfTrimRead+0x68>
    3a24:	01006863 	tsteq	r0, r3, ror #16
    3a28:	b81b034a 	ldmdalt	fp, {r1, r3, r6, r8, r9}
    3a2c:	52000005 	andpl	r0, r0, #5
    3a30:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    3a34:	00001631 	andeq	r1, r0, r1, lsr r6
    3a38:	09035701 	stmdbeq	r3, {r0, r8, r9, sl, ip, lr}
    3a3c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3a40:	00000a70 	andeq	r0, r0, r0, ror sl
    3a44:	00636322 	rsbeq	r6, r3, r2, lsr #6
    3a48:	11035701 	tstne	r3, r1, lsl #14
    3a4c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3a50:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    3a54:	09013000 	stmdbeq	r1, {ip, sp}
    3a58:	01000015 	tsteq	r0, r5, lsl r0
    3a5c:	700602f0 	strdvc	r0, [r6], -r0	; <UNPREDICTABLE>
    3a60:	c0000019 	andgt	r0, r0, r9, lsl r0
    3a64:	01000019 	tsteq	r0, r9, lsl r0
    3a68:	0009119c 	muleq	r9, ip, r1
    3a6c:	155d2d00 	ldrbne	r2, [sp, #-3328]	; 0xfffff300
    3a70:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3a74:	011d0802 	tsteq	sp, r2, lsl #16
    3a78:	0ae50000 	beq	ff943a80 <_estack+0xdf93ea80>
    3a7c:	31000000 	mrscc	r0, (UNDEF: 0)
    3a80:	006f6901 	rsbeq	r6, pc, r1, lsl #18
    3a84:	06027901 	streq	r7, [r2], -r1, lsl #18
    3a88:	0000ef01 	andeq	lr, r0, r1, lsl #30
    3a8c:	0018d400 	andseq	sp, r8, r0, lsl #8
    3a90:	00197000 	andseq	r7, r9, r0
    3a94:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    3a98:	20000009 	andcs	r0, r0, r9
    3a9c:	000015a9 	andeq	r1, r0, r9, lsr #11
    3aa0:	0f027901 	svceq	0x00027901
    3aa4:	000000d9 	ldrdeq	r0, [r0], -r9
    3aa8:	00000b03 	andeq	r0, r0, r3, lsl #22
    3aac:	7665642b 	strbtvc	r6, [r5], -fp, lsr #8
    3ab0:	02790100 	rsbseq	r0, r9, #0, 2
    3ab4:	0000d91b 	andeq	sp, r0, fp, lsl r9
    3ab8:	000b2100 	andeq	r2, fp, r0, lsl #2
    3abc:	117b2000 	cmnne	fp, r0
    3ac0:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3ac4:	00d92502 	sbcseq	r2, r9, r2, lsl #10
    3ac8:	0b3f0000 	bleq	fc3ad0 <__ccfg+0xfa3b28>
    3acc:	622b0000 	eorvs	r0, fp, #0
    3ad0:	01006675 	tsteq	r0, r5, ror r6
    3ad4:	f6360279 			; <UNDEFINED> instruction: 0xf6360279
    3ad8:	5d000001 	stcpl	0, cr0, [r0, #-4]
    3adc:	2b00000b 	blcs	3b10 <NOROM_RFCRfTrimRead+0x130>
    3ae0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3ae4:	40027901 	andmi	r7, r2, r1, lsl #18
    3ae8:	000000d9 	ldrdeq	r0, [r0], -r9
    3aec:	00000b7b 	andeq	r0, r0, fp, ror fp
    3af0:	74657222 	strbtvc	r7, [r5], #-546	; 0xfffffdde
    3af4:	027b0100 	rsbseq	r0, fp, #0, 2
    3af8:	0000ef07 	andeq	lr, r0, r7, lsl #30
    3afc:	000b9b00 	andeq	r9, fp, r0, lsl #22
    3b00:	011f0000 	tsteq	pc, r0
    3b04:	00001570 	andeq	r1, r0, r0, ror r5
    3b08:	06026901 	streq	r6, [r2], -r1, lsl #18
    3b0c:	0018b001 	andseq	fp, r8, r1
    3b10:	0018d400 	andseq	sp, r8, r0, lsl #8
    3b14:	cf9c0100 	svcgt	0x009c0100
    3b18:	2b000009 	blcs	3b44 <NOROM_RFCRTrim+0x14>
    3b1c:	01006672 	tsteq	r0, r2, ror r6
    3b20:	541e0269 	ldrpl	r0, [lr], #-617	; 0xfffffd97
    3b24:	cf000004 	svcgt	0x00000004
    3b28:	2b00000b 	blcs	3b5c <NOROM_RFCRTrim+0x2c>
    3b2c:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    3b30:	26026901 	strcs	r6, [r2], -r1, lsl #18
    3b34:	0000008d 	andeq	r0, r0, sp, lsl #1
    3b38:	00000bf8 	strdeq	r0, [r0], -r8
    3b3c:	9b011f00 	blls	4b744 <__ccfg+0x2b79c>
    3b40:	01000016 	tsteq	r0, r6, lsl r0
    3b44:	0106025f 	tsteq	r6, pc, asr r2
    3b48:	000018a2 	andeq	r1, r0, r2, lsr #17
    3b4c:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    3b50:	0a169c01 	beq	5aab5c <__ccfg+0x58abb4>
    3b54:	af200000 	svcge	0x00200000
    3b58:	01000015 	tsteq	r0, r5, lsl r0
    3b5c:	f619025f 			; <UNDEFINED> instruction: 0xf619025f
    3b60:	21000001 	tstcs	r0, r1
    3b64:	3200000c 	andcc	r0, r0, #12
    3b68:	5f010063 	svcpl	0x00010063
    3b6c:	01fc2402 	mvnseq	r2, r2, lsl #8
    3b70:	51010000 	mrspl	r0, (UNDEF: 1)
    3b74:	01006e2b 	tsteq	r0, fp, lsr #28
    3b78:	8d2b025f 	sfmhi	f0, 4, [fp, #-380]!	; 0xfffffe84
    3b7c:	3f000000 	svccc	0x00000000
    3b80:	0000000c 	andeq	r0, r0, ip
    3b84:	165d011f 			; <UNDEFINED> instruction: 0x165d011f
    3b88:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3b8c:	8e010602 	cfmadd32hi	mvax0, mvfx0, mvfx1, mvfx2
    3b90:	a2000018 	andge	r0, r0, #24
    3b94:	01000018 	tsteq	r0, r8, lsl r0
    3b98:	000a619c 	muleq	sl, ip, r1
    3b9c:	15af2000 	strne	r2, [pc, #0]!	; 3ba4 <NOROM_RFCRTrim+0x74>
    3ba0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3ba4:	01f61902 	mvnseq	r1, r2, lsl #18
    3ba8:	0c520000 	mraeq	r0, r2, acc0
    3bac:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3bb0:	01006372 	tsteq	r0, r2, ror r3
    3bb4:	0e2b0259 	mcreq	2, 1, r0, cr11, cr9, {2}
    3bb8:	65000007 	strvs	r0, [r0, #-7]
    3bbc:	2b00000c 	blcs	3bf4 <NOROM_RFCRTrim+0xc4>
    3bc0:	5901006e 	stmdbpl	r1, {r1, r2, r3, r5, r6}
    3bc4:	008d3402 	addeq	r3, sp, r2, lsl #8
    3bc8:	0c830000 	stceq	0, cr0, [r3], {0}
    3bcc:	1f000000 	svcne	0x00000000
    3bd0:	0016d401 	andseq	sp, r6, r1, lsl #8
    3bd4:	02540100 	subseq	r0, r4, #0, 2
    3bd8:	00000106 	andeq	r0, r0, r6, lsl #2
    3bdc:	00000000 	andeq	r0, r0, r0
    3be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3be4:	00000aa6 	andeq	r0, r0, r6, lsr #21
    3be8:	0100642b 	tsteq	r0, fp, lsr #8
    3bec:	f61a0254 			; <UNDEFINED> instruction: 0xf61a0254
    3bf0:	96000001 	strls	r0, [r0], -r1
    3bf4:	2b00000c 	blcs	3c2c <NOROM_RFCRTrim+0xfc>
    3bf8:	54010073 	strpl	r0, [r1], #-115	; 0xffffff8d
    3bfc:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    3c00:	0ca90000 	stceq	0, cr0, [r9]
    3c04:	6e320000 	cdpvs	0, 3, cr0, cr2, cr0, {0}
    3c08:	02540100 	subseq	r0, r4, #0, 2
    3c0c:	00008d30 	andeq	r8, r0, r0, lsr sp
    3c10:	00520100 	subseq	r0, r2, r0, lsl #2
    3c14:	1587011f 	strne	r0, [r7, #287]	; 0x11f
    3c18:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3c1c:	00010602 	andeq	r0, r1, r2, lsl #12
    3c20:	00000000 	andeq	r0, r0, r0
    3c24:	01000000 	mrseq	r0, (UNDEF: 0)
    3c28:	000ade9c 	muleq	sl, ip, lr
    3c2c:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3c30:	19024e01 	stmdbne	r2, {r0, r9, sl, fp, lr}
    3c34:	000001f6 	strdeq	r0, [r0], -r6
    3c38:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    3c3c:	0100732b 	tsteq	r0, fp, lsr #6
    3c40:	0e28024e 	cdpeq	2, 2, cr0, cr8, cr14, {2}
    3c44:	da000007 	ble	3c68 <NOROM_RFCAdi3VcoLdoVoltageMode>
    3c48:	0000000c 	andeq	r0, r0, ip
    3c4c:	16af011f 	ssatne	r0, #16, pc, lsl #2	; <UNPREDICTABLE>
    3c50:	47010000 	strmi	r0, [r1, -r0]
    3c54:	72010602 	andvc	r0, r1, #2097152	; 0x200000
    3c58:	8e000018 	mcrhi	0, 0, r0, cr0, cr8, {0}
    3c5c:	01000018 	tsteq	r0, r8, lsl r0
    3c60:	000b259c 	muleq	fp, ip, r5
    3c64:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3c68:	1a024701 	bne	95874 <__ccfg+0x758cc>
    3c6c:	000001f6 	strdeq	r0, [r0], -r6
    3c70:	00000ced 	andeq	r0, r0, sp, ror #25
    3c74:	0100732b 	tsteq	r0, fp, lsr #6
    3c78:	0e290247 	cdpeq	2, 2, cr0, cr9, cr7, {2}
    3c7c:	0b000007 	bleq	3ca0 <TrimAfterColdResetWakeupFromShutDown+0x1c>
    3c80:	2b00000d 	blcs	3cbc <TrimAfterColdResetWakeupFromShutDown+0x38>
    3c84:	4701006e 	strmi	r0, [r1, -lr, rrx]
    3c88:	008d3002 	addeq	r3, sp, r2
    3c8c:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
    3c90:	1f000000 	svcne	0x00000000
    3c94:	0014b401 	andseq	fp, r4, r1, lsl #8
    3c98:	02420100 	subeq	r0, r2, #0, 2
    3c9c:	18620106 	stmdane	r2!, {r1, r2, r8}^
    3ca0:	18720000 	ldmdane	r2!, {}^	; <UNPREDICTABLE>
    3ca4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ca8:	00000b5d 	andeq	r0, r0, sp, asr fp
    3cac:	0100642b 	tsteq	r0, fp, lsr #8
    3cb0:	f6190242 			; <UNDEFINED> instruction: 0xf6190242
    3cb4:	31000001 	tstcc	r0, r1
    3cb8:	2b00000d 	blcs	3cf4 <TrimAfterColdResetWakeupFromShutDown+0x70>
    3cbc:	42010073 	andmi	r0, r1, #115	; 0x73
    3cc0:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    3cc4:	0d440000 	stcleq	0, cr0, [r4, #-0]
    3cc8:	2c000000 	stccs	0, cr0, [r0], {-0}
    3ccc:	00152701 	andseq	r2, r5, r1, lsl #14
    3cd0:	02390100 	eorseq	r0, r9, #0, 2
    3cd4:	008d0105 	addeq	r0, sp, r5, lsl #2
    3cd8:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    3cdc:	18620000 	stmdane	r2!, {}^	; <UNPREDICTABLE>
    3ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ce4:	00000b99 	muleq	r0, r9, fp
    3ce8:	0100732b 	tsteq	r0, fp, lsr #6
    3cec:	0e1e0239 	mrceq	2, 0, r0, cr14, cr9, {1}
    3cf0:	62000007 	andvs	r0, r0, #7
    3cf4:	2200000d 	andcs	r0, r0, #13
    3cf8:	3b010069 	blcc	43ea4 <__ccfg+0x23efc>
    3cfc:	008d0602 	addeq	r0, sp, r2, lsl #12
    3d00:	0d800000 	stceq	0, cr0, [r0]
    3d04:	2c000000 	stccs	0, cr0, [r0], {-0}
    3d08:	00154001 	andseq	r4, r5, r1
    3d0c:	022d0100 	eoreq	r0, sp, #0, 2
    3d10:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d20:	00000be6 	andeq	r0, r0, r6, ror #23
    3d24:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    3d28:	022d0100 	eoreq	r0, sp, #0, 2
    3d2c:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    3d30:	000d9300 	andeq	r9, sp, r0, lsl #6
    3d34:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3d38:	0e022f01 	cdpeq	15, 0, cr2, cr2, cr1, {0}
    3d3c:	00000416 	andeq	r0, r0, r6, lsl r4
    3d40:	00000db1 			; <UNDEFINED> instruction: 0x00000db1
    3d44:	01006322 	tsteq	r0, r2, lsr #6
    3d48:	d9070230 	stmdble	r7, {r4, r5, r9}
    3d4c:	cf000000 	svcgt	0x00000000
    3d50:	0000000d 	andeq	r0, r0, sp
    3d54:	1541012c 	strbne	r0, [r1, #-300]	; 0xfffffed4
    3d58:	1f010000 	svcne	0x00010000
    3d5c:	1d010702 	stcne	7, cr0, [r1, #-8]
    3d60:	30000001 	andcc	r0, r0, r1
    3d64:	54000018 	strpl	r0, [r0], #-24	; 0xffffffe8
    3d68:	01000018 	tsteq	r0, r8, lsl r0
    3d6c:	000c229c 	muleq	ip, ip, r2
    3d70:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3d74:	1f01006e 	svcne	0x0001006e
    3d78:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    3d7c:	0de20000 	stcleq	0, cr0, [r2]
    3d80:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3d84:	02210100 	eoreq	r0, r1, #0, 2
    3d88:	0004160e 	andeq	r1, r4, lr, lsl #12
    3d8c:	00500100 	subseq	r0, r0, r0, lsl #2
    3d90:	164f012c 	strbne	r0, [pc], -ip, lsr #2
    3d94:	13010000 	movwne	r0, #4096	; 0x1000
    3d98:	f1010902 			; <UNDEFINED> instruction: 0xf1010902
    3d9c:	00000002 	andeq	r0, r0, r2
    3da0:	00000000 	andeq	r0, r0, r0
    3da4:	01000000 	mrseq	r0, (UNDEF: 0)
    3da8:	000c609c 	muleq	ip, ip, r0
    3dac:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3db0:	13010064 	movwne	r0, #4196	; 0x1064
    3db4:	011d1802 	tsteq	sp, r2, lsl #16
    3db8:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    3dbc:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3dc0:	02150100 	andseq	r0, r5, #0, 2
    3dc4:	0004160e 	andeq	r1, r4, lr, lsl #12
    3dc8:	000e2900 	andeq	r2, lr, r0, lsl #18
    3dcc:	011f0000 	tsteq	pc, r0
    3dd0:	000016a7 	andeq	r1, r0, r7, lsr #13
    3dd4:	0601f501 	streq	pc, [r1], -r1, lsl #10
    3dd8:	00000001 	andeq	r0, r0, r1
    3ddc:	00000000 	andeq	r0, r0, r0
    3de0:	c99c0100 	ldmibgt	ip, {r8}
    3de4:	2b00000c 	blcs	3e1c <NOROM_SetupSetVddrLevel+0x20>
    3de8:	006e7566 	rsbeq	r7, lr, r6, ror #10
    3dec:	1701f501 	strne	pc, [r1, -r1, lsl #10]
    3df0:	000002f1 	strdeq	r0, [r0], -r1
    3df4:	00000e47 	andeq	r0, r0, r7, asr #28
    3df8:	6c657222 	sfmvs	f7, 2, [r5], #-136	; 0xffffff78
    3dfc:	01f90100 	mvnseq	r0, r0, lsl #2
    3e00:	0000cd0a 	andeq	ip, r0, sl, lsl #26
    3e04:	000e6500 	andeq	r6, lr, r0, lsl #10
    3e08:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3e0c:	0e01fa01 	vmlaeq.f32	s30, s2, s2
    3e10:	00000416 	andeq	r0, r0, r6, lsl r4
    3e14:	00000e78 	andeq	r0, r0, r8, ror lr
    3e18:	01006a22 	tsteq	r0, r2, lsr #20
    3e1c:	161201fa 			; <UNDEFINED> instruction: 0x161201fa
    3e20:	ac000004 	stcge	0, cr0, [r0], {4}
    3e24:	2200000e 	andcs	r0, r0, #14
    3e28:	fa01006b 	blx	43fdc <__ccfg+0x24034>
    3e2c:	04161601 	ldreq	r1, [r6], #-1537	; 0xfffff9ff
    3e30:	0eca0000 	cdpeq	0, 12, cr0, cr10, cr0, {0}
    3e34:	1f000000 	svcne	0x00000000
    3e38:	0014e901 	andseq	lr, r4, r1, lsl #18
    3e3c:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3e40:	1a080106 	bne	204260 <__ccfg+0x1e42b8>
    3e44:	1a580000 	bne	1603e4c <__ccfg+0x15e3ea4>
    3e48:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e4c:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3e50:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3e54:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3e58:	00011d12 	andeq	r1, r1, r2, lsl sp
    3e5c:	000ee800 	andeq	lr, lr, r0, lsl #16
    3e60:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3e64:	0e01dd01 	cdpeq	13, 0, cr13, cr1, cr1, {0}
    3e68:	00000416 	andeq	r0, r0, r6, lsl r4
    3e6c:	00000f1c 	andeq	r0, r0, ip, lsl pc
    3e70:	01006a24 	tsteq	r0, r4, lsr #20
    3e74:	161201dd 			; <UNDEFINED> instruction: 0x161201dd
    3e78:	00000004 	andeq	r0, r0, r4
    3e7c:	0014ad2a 	andseq	sl, r4, sl, lsr #26
    3e80:	01c40100 	biceq	r0, r4, r0, lsl #2
    3e84:	1574010d 	ldrbne	r0, [r4, #-269]!	; 0xfffffef3
    3e88:	15b00000 	ldrne	r0, [r0, #0]!
    3e8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e90:	00000d63 	andeq	r0, r0, r3, ror #26
    3e94:	64697032 	strbtvs	r7, [r9], #-50	; 0xffffffce
    3e98:	01c40100 	biceq	r0, r4, r0, lsl #2
    3e9c:	00041621 	andeq	r1, r4, r1, lsr #12
    3ea0:	2d500100 	ldfcse	f0, [r0, #-0]
    3ea4:	0000167f 	andeq	r1, r0, pc, ror r6
    3ea8:	0801c801 	stmdaeq	r1, {r0, fp, lr, pc}
    3eac:	0000011d 	andeq	r0, r0, sp, lsl r1
    3eb0:	00000f45 	andeq	r0, r0, r5, asr #30
    3eb4:	01006a22 	tsteq	r0, r2, lsr #20
    3eb8:	8d0601c9 	stfhis	f0, [r6, #-804]	; 0xfffffcdc
    3ebc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    3ec0:	2300000f 	movwcs	r0, #15
    3ec4:	ca010069 	bgt	44070 <__ccfg+0x240c8>
    3ec8:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3ecc:	52010000 	andpl	r0, r1, #0
    3ed0:	57012c00 	strpl	r2, [r1, -r0, lsl #24]
    3ed4:	01000016 	tsteq	r0, r6, lsl r0
    3ed8:	010601b3 			; <UNDEFINED> instruction: 0x010601b3
    3edc:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3ee8:	0da19c01 	stceq	12, cr9, [r1, #4]!
    3eec:	702b0000 	eorvc	r0, fp, r0
    3ef0:	01006469 	tsteq	r0, r9, ror #8
    3ef4:	1d1301b3 	ldfnes	f0, [r3, #-716]	; 0xfffffd34
    3ef8:	6b000001 	blvs	3f04 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>
    3efc:	2200000f 	andcs	r0, r0, #15
    3f00:	b5010069 	strlt	r0, [r1, #-105]	; 0xffffff97
    3f04:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3f08:	0f890000 	svceq	0x00890000
    3f0c:	33000000 	movwcc	r0, #0
    3f10:	0014cc01 	andseq	ip, r4, r1, lsl #24
    3f14:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    3f18:	00000106 	andeq	r0, r0, r6, lsl #2
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f24:	2cd7011f 	ldfcse	f0, [r7], {31}
    3f28:	9a010000 	bls	43f30 <__ccfg+0x23f88>
    3f2c:	f8010601 			; <UNDEFINED> instruction: 0xf8010601
    3f30:	30000017 	andcc	r0, r0, r7, lsl r0
    3f34:	01000018 	tsteq	r0, r8, lsl r0
    3f38:	000df09c 	muleq	sp, ip, r0
    3f3c:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3f40:	12019a01 	andne	r9, r1, #4096	; 0x1000
    3f44:	000000d9 	ldrdeq	r0, [r0], -r9
    3f48:	00000fa7 	andeq	r0, r0, r7, lsr #31
    3f4c:	00007020 	andeq	r7, r0, r0, lsr #32
    3f50:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3f54:	0000d91a 	andeq	sp, r0, sl, lsl r9
    3f58:	000fba00 	andeq	fp, pc, r0, lsl #20
    3f5c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3f60:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
    3f64:	07018801 	streq	r8, [r1, -r1, lsl #16]
    3f68:	00011d01 	andeq	r1, r1, r1, lsl #26
    3f6c:	0017d400 	andseq	sp, r7, r0, lsl #8
    3f70:	0017f800 	andseq	pc, r7, r0, lsl #16
    3f74:	3e9c0100 	fmlcce	f0, f4, f0
    3f78:	2b00000e 	blcs	3fb8 <NOROM_SetupGetTrimForAmpcompTh1+0x10>
    3f7c:	00646970 	rsbeq	r6, r4, r0, ror r9
    3f80:	18018801 	stmdane	r1, {r0, fp, pc}
    3f84:	0000011d 	andeq	r0, r0, sp, lsl r1
    3f88:	00000fcd 	andeq	r0, r0, sp, asr #31
    3f8c:	0074732b 	rsbseq	r7, r4, fp, lsr #6
    3f90:	22018801 	andcs	r8, r1, #65536	; 0x10000
    3f94:	000000d9 	ldrdeq	r0, [r0], -r9
    3f98:	00000ff6 	strdeq	r0, [r0], -r6
    3f9c:	01006922 	tsteq	r0, r2, lsr #18
    3fa0:	160e018a 	strne	r0, [lr], -sl, lsl #3
    3fa4:	14000004 	strne	r0, [r0], #-4
    3fa8:	00000010 	andeq	r0, r0, r0, lsl r0
    3fac:	1562011f 	strbne	r0, [r2, #-287]!	; 0xfffffee1
    3fb0:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3fb4:	00010601 	andeq	r0, r1, r1, lsl #12
    3fb8:	00000000 	andeq	r0, r0, r0
    3fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    3fc0:	000e969c 	muleq	lr, ip, r6
    3fc4:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3fc8:	78010064 	stmdavc	r1, {r2, r5, r6}
    3fcc:	011d1b01 	tsteq	sp, r1, lsl #22
    3fd0:	10320000 	eorsne	r0, r2, r0
    3fd4:	f4200000 	vld4.8	{d0-d3}, [r0], r0
    3fd8:	01000015 	tsteq	r0, r5, lsl r0
    3fdc:	1d260178 	stfnes	f0, [r6, #-480]!	; 0xfffffe20
    3fe0:	45000001 	strmi	r0, [r0, #-1]
    3fe4:	23000010 	movwcs	r0, #16
    3fe8:	7c010069 	stcvc	0, cr0, [r1], {105}	; 0x69
    3fec:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3ff0:	50010000 	andpl	r0, r1, r0
    3ff4:	01006a22 	tsteq	r0, r2, lsr #20
    3ff8:	8d07017d 	stfhis	f0, [r7, #-500]	; 0xfffffe0c
    3ffc:	63000000 	movwvs	r0, #0
    4000:	00000010 	andeq	r0, r0, r0, lsl r0
    4004:	151a011f 	ldrne	r0, [sl, #-287]	; 0xfffffee1
    4008:	66010000 	strvs	r0, [r1], -r0
    400c:	a0010601 	andge	r0, r1, r1, lsl #12
    4010:	d4000017 	strle	r0, [r0], #-23	; 0xffffffe9
    4014:	01000017 	tsteq	r0, r7, lsl r0
    4018:	000edb9c 	muleq	lr, ip, fp
    401c:	15f43400 	ldrbne	r3, [r4, #1024]!	; 0x400
    4020:	66010000 	strvs	r0, [r1], -r0
    4024:	011d1a01 	tsteq	sp, r1, lsl #20
    4028:	50010000 	andpl	r0, r1, r0
    402c:	01006a22 	tsteq	r0, r2, lsr #20
    4030:	8d06016a 	stfhis	f0, [r6, #-424]	; 0xfffffe58
    4034:	81000000 	mrshi	r0, (UNDEF: 0)
    4038:	23000010 	movwcs	r0, #16
    403c:	6b010069 	blvs	441e8 <__ccfg+0x24240>
    4040:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    4044:	52010000 	andpl	r0, r1, #0
    4048:	08012e00 	stmdaeq	r1, {r9, sl, fp, sp}
    404c:	01000016 	tsteq	r0, r6, lsl r0
    4050:	01060159 	tsteq	r6, r9, asr r1
    4054:	000f1101 	andeq	r1, pc, r1, lsl #2
    4058:	15f43500 	ldrbne	r3, [r4, #1280]!	; 0x500
    405c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    4060:	011d1701 	tsteq	sp, r1, lsl #14
    4064:	70350000 	eorsvc	r0, r5, r0
    4068:	01000000 	mrseq	r0, (UNDEF: 0)
    406c:	d9230159 	stmdble	r3!, {r0, r3, r4, r6, r8}
    4070:	24000000 	strcs	r0, [r0], #-0
    4074:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    4078:	00ef0701 	rsceq	r0, pc, r1, lsl #14
    407c:	1f000000 	svcne	0x00000000
    4080:	00155501 	andseq	r5, r5, r1, lsl #10
    4084:	01530100 	cmpeq	r3, r0, lsl #2
    4088:	17580106 	ldrbne	r0, [r8, -r6, lsl #2]
    408c:	176c0000 	strbne	r0, [ip, -r0]!
    4090:	9c010000 	stcls	0, cr0, [r1], {-0}
    4094:	00000f3c 	andeq	r0, r0, ip, lsr pc
    4098:	00007020 	andeq	r7, r0, r0, lsr #32
    409c:	01530100 	cmpeq	r3, r0, lsl #2
    40a0:	0000d914 	andeq	sp, r0, r4, lsl r9
    40a4:	00109400 	andseq	r9, r0, r0, lsl #8
    40a8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    40ac:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    40b0:	07012c01 	streq	r2, [r1, -r1, lsl #24]
    40b4:	00011d01 	andeq	r1, r1, r1, lsl #26
    40b8:	001b0000 	andseq	r0, fp, r0
    40bc:	001b3400 	andseq	r3, fp, r0, lsl #8
    40c0:	9e9c0100 	fmllse	f0, f4, f0
    40c4:	2000000f 	andcs	r0, r0, pc
    40c8:	000006a6 	andeq	r0, r0, r6, lsr #13
    40cc:	1a012c01 	bne	4f0d8 <__ccfg+0x2f130>
    40d0:	000002f1 	strdeq	r0, [r0], -r1
    40d4:	000010a7 	andeq	r1, r0, r7, lsr #1
    40d8:	00475220 	subeq	r5, r7, r0, lsr #4
    40dc:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    40e0:	00011d26 	andeq	r1, r1, r6, lsr #26
    40e4:	0010c500 	andseq	ip, r0, r0, lsl #10
    40e8:	00692300 	rsbeq	r2, r9, r0, lsl #6
    40ec:	0e012e01 	cdpeq	14, 0, cr2, cr1, cr1, {0}
    40f0:	00000416 	andeq	r0, r0, r6, lsl r4
    40f4:	58365001 	ldmdapl	r6!, {r0, ip, lr}
    40f8:	22000007 	andcs	r0, r0, #7
    40fc:	3d01006a 	stccc	0, cr0, [r1, #-424]	; 0xfffffe58
    4100:	04160f01 	ldreq	r0, [r6], #-3841	; 0xfffff0ff
    4104:	10e30000 	rscne	r0, r3, r0
    4108:	00000000 	andeq	r0, r0, r0
    410c:	16370137 			; <UNDEFINED> instruction: 0x16370137
    4110:	af010000 	svcge	0x00010000
    4114:	e3010106 	movw	r0, #4358	; 0x1106
    4118:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    411c:	006e696d 	rsbeq	r6, lr, sp, ror #18
    4120:	d91aaf01 	ldmdble	sl, {r0, r8, r9, sl, fp, sp, pc}
    4124:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    4128:	00001240 	andeq	r1, r0, r0, asr #4
    412c:	cd27af01 	stcgt	15, cr10, [r7, #-4]!
    4130:	3a000000 	bcc	4138 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x50>
    4134:	bd010069 	stclt	0, cr0, [r1, #-420]	; 0xfffffe5c
    4138:	0004160e 	andeq	r1, r4, lr, lsl #12
    413c:	00643a00 	rsbeq	r3, r4, r0, lsl #20
    4140:	d907be01 	stmdble	r7, {r0, r9, sl, fp, ip, sp, pc}
    4144:	3b000000 	blcc	414c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x64>
    4148:	004b4f4d 	subeq	r4, fp, sp, asr #30
    414c:	01010901 	tsteq	r1, r1, lsl #18
    4150:	6f013c00 	svcvs	0x00013c00
    4154:	01000016 	tsteq	r0, r6, lsl r0
    4158:	840106a7 	strhi	r0, [r1], #-1703	; 0xfffff959
    415c:	8a000016 	bhi	41bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xd4>
    4160:	01000016 	tsteq	r0, r6, lsl r0
    4164:	0010189c 	mulseq	r0, ip, r8
    4168:	00743d00 	rsbseq	r3, r4, r0, lsl #26
    416c:	291fa701 	ldmdbcs	pc, {r0, r8, r9, sl, sp, pc}	; <UNPREDICTABLE>
    4170:	0c000001 	stceq	0, cr0, [r0], {1}
    4174:	3d000011 	stccc	0, cr0, [r0, #-68]	; 0xffffffbc
    4178:	a7010076 	smlsdxge	r1, r6, r0, r0
    417c:	0000d927 	andeq	sp, r0, r7, lsr #18
    4180:	00111f00 	andseq	r1, r1, r0, lsl #30
    4184:	013c0000 	teqeq	ip, r0
    4188:	000016c6 	andeq	r1, r0, r6, asr #13
    418c:	01068f01 	tsteq	r6, r1, lsl #30
	...
    4198:	104e9c01 	subne	r9, lr, r1, lsl #24
    419c:	753d0000 	ldrvc	r0, [sp, #-0]!
    41a0:	8f010074 	svchi	0x00010074
    41a4:	0001291d 	andeq	r2, r1, sp, lsl r9
    41a8:	00113200 	andseq	r3, r1, r0, lsl #4
    41ac:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    41b0:	8d069301 	stchi	3, cr9, [r6, #-4]
    41b4:	50000000 	andpl	r0, r0, r0
    41b8:	00000011 	andeq	r0, r0, r1, lsl r0
    41bc:	14f5013c 	ldrbtne	r0, [r5], #316	; 0x13c
    41c0:	7f010000 	svcvc	0x00010000
    41c4:	16580106 	ldrbne	r0, [r8], -r6, lsl #2
    41c8:	16840000 	strne	r0, [r4], r0
    41cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    41d0:	00001084 	andeq	r1, r0, r4, lsl #1
    41d4:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    41d8:	291a7f01 	ldmdbcs	sl, {r0, r8, r9, sl, fp, ip, sp, lr}
    41dc:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
    41e0:	3e000011 	mcrcc	0, 0, r0, cr0, cr1, {0}
    41e4:	83010069 	movwhi	r0, #4201	; 0x1069
    41e8:	00008d06 	andeq	r8, r0, r6, lsl #26
    41ec:	00119700 	andseq	r9, r1, r0, lsl #14
    41f0:	013f0000 	teqeq	pc, r0
    41f4:	000015fa 	strdeq	r1, [r0], -sl
    41f8:	01067b01 	tsteq	r6, r1, lsl #22
    41fc:	00001648 	andeq	r1, r0, r8, asr #12
    4200:	00001658 	andeq	r1, r0, r8, asr r6
    4204:	7b409c01 	blvc	102b210 <__ccfg+0x100b268>
    4208:	01000015 	tsteq	r0, r5, lsl r0
    420c:	1601145f 			; <UNDEFINED> instruction: 0x1601145f
    4210:	01000004 	tsteq	r0, r4
    4214:	000010c1 	andeq	r1, r0, r1, asr #1
    4218:	64697038 	strbtvs	r7, [r9], #-56	; 0xffffffc8
    421c:	225f0100 	subscs	r0, pc, #0, 2
    4220:	0000011d 	andeq	r0, r0, sp, lsl r1
    4224:	0100693a 	tsteq	r0, sl, lsr r9
    4228:	04161761 	ldreq	r1, [r6], #-1889	; 0xfffff89f
    422c:	41000000 	mrsmi	r0, (UNDEF: 0)
    4230:	00001500 	andeq	r1, r0, r0, lsl #10
    4234:	01029e02 	tsteq	r2, r2, lsl #28
    4238:	0010e201 	andseq	lr, r0, r1, lsl #4
    423c:	10e20300 	rscne	r0, r2, r0, lsl #6
    4240:	b8350000 	ldmdalt	r5!, {}	; <UNPREDICTABLE>
    4244:	02000011 	andeq	r0, r0, #17
    4248:	7313029e 	tstvc	r3, #-536870903	; 0xe0000009
    424c:	00000000 	andeq	r0, r0, r0
    4250:	b3020102 	movwlt	r0, #8450	; 0x2102
    4254:	4200000c 	andmi	r0, r0, #12
    4258:	00001098 	muleq	r0, r8, r0
	...
    4264:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    4268:	aa430000 	bge	10c4270 <__ccfg+0x10a42c8>
    426c:	b5000010 	strlt	r0, [r0, #-16]
    4270:	44000011 	strmi	r0, [r0], #-17	; 0xffffffef
    4274:	000010b6 	strheq	r1, [r0], -r6
    4278:	000011de 	ldrdeq	r1, [r0], -lr
    427c:	00109845 	andseq	r9, r0, r5, asr #16
	...
    4288:	145f0100 	ldrbne	r0, [pc], #-256	; 4290 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc>
    428c:	0010aa43 	andseq	sl, r0, r3, asr #20
    4290:	0011fc00 	andseq	pc, r1, r0, lsl #24
    4294:	10b64600 	adcsne	r4, r6, r0, lsl #12
    4298:	00000000 	andeq	r0, r0, r0
    429c:	000f9e42 	andeq	r9, pc, r2, asr #28
    42a0:	00168c00 	andseq	r8, r6, r0, lsl #24
    42a4:	00175800 	andseq	r5, r7, r0, lsl #16
    42a8:	9a9c0100 	bls	fe7046b0 <_estack+0xde6ff6b0>
    42ac:	43000011 	movwmi	r0, #17
    42b0:	00000fad 	andeq	r0, r0, sp, lsr #31
    42b4:	0000120f 	andeq	r1, r0, pc, lsl #4
    42b8:	000fb943 	andeq	fp, pc, r3, asr #18
    42bc:	00122200 	andseq	r2, r2, r0, lsl #4
    42c0:	0fc54600 	svceq	0x00c54600
    42c4:	cf460000 	svcgt	0x00460000
    42c8:	4700000f 	strmi	r0, [r0, -pc]
    42cc:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    42d0:	0000169a 	muleq	r0, sl, r6
    42d4:	00000740 	andeq	r0, r0, r0, asr #14
    42d8:	2906af01 	stmdbcs	r6, {r0, r8, r9, sl, fp, sp, pc}
    42dc:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    42e0:	000fad43 	andeq	sl, pc, r3, asr #26
    42e4:	00123500 	andseq	r3, r2, r0, lsl #10
    42e8:	07403600 	strbeq	r3, [r0, -r0, lsl #12]
    42ec:	c5440000 	strbgt	r0, [r4, #-0]
    42f0:	5e00000f 	cdppl	0, 0, cr0, cr0, cr15, {0}
    42f4:	46000012 			; <UNDEFINED> instruction: 0x46000012
    42f8:	00000fcf 	andeq	r0, r0, pc, asr #31
    42fc:	000fd948 	andeq	sp, pc, r8, asr #18
    4300:	00173600 	andseq	r3, r7, r0, lsl #12
    4304:	00000000 	andeq	r0, r0, r0
    4308:	000edb42 	andeq	sp, lr, r2, asr #22
    430c:	00176c00 	andseq	r6, r7, r0, lsl #24
    4310:	0017a000 	andseq	sl, r7, r0
    4314:	ee9c0100 	fmle	f0, f4, f0
    4318:	43000011 	movwmi	r0, #17
    431c:	00000eeb 	andeq	r0, r0, fp, ror #29
    4320:	0000127c 	andeq	r1, r0, ip, ror r2
    4324:	000ef843 	andeq	pc, lr, r3, asr #16
    4328:	00129a00 	andseq	r9, r2, r0, lsl #20
    432c:	0f054600 	svceq	0x00054600
    4330:	db490000 	blle	1244338 <__ccfg+0x1224390>
    4334:	7e00000e 	cdpvc	0, 0, cr0, cr0, cr14, {0}
    4338:	86000017 			; <UNDEFINED> instruction: 0x86000017
    433c:	01000017 	tsteq	r0, r7, lsl r0
    4340:	43060159 	movwmi	r0, #24921	; 0x6159
    4344:	00000eeb 	andeq	r0, r0, fp, ror #29
    4348:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
    434c:	000ef843 	andeq	pc, lr, r3, asr #16
    4350:	0012cb00 	andseq	ip, r2, r0, lsl #22
    4354:	0f054600 	svceq	0x00054600
    4358:	00000000 	andeq	r0, r0, r0
    435c:	0008804a 	andeq	r8, r8, sl, asr #32
    4360:	0019c000 	andseq	ip, r9, r0
    4364:	001a0800 	andseq	r0, sl, r0, lsl #16
    4368:	439c0100 	orrsmi	r0, ip, #0, 2
    436c:	00000890 	muleq	r0, r0, r8
    4370:	000012de 	ldrdeq	r1, [r0], -lr
    4374:	00088049 	andeq	r8, r8, r9, asr #32
    4378:	0019cc00 	andseq	ip, r9, r0, lsl #24
    437c:	0019d400 	andseq	sp, r9, r0, lsl #8
    4380:	037c0100 	cmneq	ip, #0, 2
    4384:	08904306 	ldmeq	r0, {r1, r2, r8, r9, lr}
    4388:	12fc0000 	rscsne	r0, ip, #0
    438c:	00000000 	andeq	r0, r0, r0
    4390:	00133300 	andseq	r3, r3, r0, lsl #6
    4394:	72000300 	andvc	r0, r0, #0, 6
    4398:	0400000e 	streq	r0, [r0], #-14
    439c:	0000a301 	andeq	sl, r0, r1, lsl #6
    43a0:	17400c00 	strbne	r0, [r0, -r0, lsl #24]
    43a4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    43a8:	09480000 	stmdbeq	r8, {}^	; <UNPREDICTABLE>
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	31070000 	mrscc	r0, (UNDEF: 7)
    43b4:	01020000 	mrseq	r0, (UNDEF: 2)
    43b8:	000c6906 	andeq	r6, ip, r6, lsl #18
    43bc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    43c0:	00000a77 	andeq	r0, r0, r7, ror sl
    43c4:	09050402 	stmdbeq	r5, {r1, sl}
    43c8:	02000008 	andeq	r0, r0, #8
    43cc:	08040508 	stmdaeq	r4, {r3, r8, sl}
    43d0:	1a030000 	bne	c43d8 <__ccfg+0xa4430>
    43d4:	0200002a 	andeq	r0, r0, #42	; 0x2a
    43d8:	004d182e 	subeq	r1, sp, lr, lsr #16
    43dc:	01020000 	mrseq	r0, (UNDEF: 2)
    43e0:	000c6708 	andeq	r6, ip, r8, lsl #14
    43e4:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
    43e8:	31020000 	mrscc	r0, (UNDEF: 2)
    43ec:	00006019 	andeq	r6, r0, r9, lsl r0
    43f0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    43f4:	00000d64 	andeq	r0, r0, r4, ror #26
    43f8:	0029b203 	eoreq	fp, r9, r3, lsl #4
    43fc:	19340200 	ldmdbne	r4!, {r9}
    4400:	00000073 	andeq	r0, r0, r3, ror r0
    4404:	39070402 	stmdbcc	r7, {r1, sl}
    4408:	02000004 	andeq	r0, r0, #4
    440c:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
    4410:	04040000 	streq	r0, [r4], #-0
    4414:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4418:	07040200 	streq	r0, [r4, -r0, lsl #4]
    441c:	0000043e 	andeq	r0, r0, lr, lsr r4
    4420:	00052a03 	andeq	r2, r5, r3, lsl #20
    4424:	1b280300 	blne	a0502c <__ccfg+0x9e5084>
    4428:	0000009b 	muleq	r0, fp, r0
    442c:	000b9c05 	andeq	r9, fp, r5, lsl #24
    4430:	000d0400 	andeq	r0, sp, r0, lsl #8
    4434:	000000b3 	strheq	r0, [r0], -r3
    4438:	00087906 	andeq	r7, r8, r6, lsl #18
    443c:	0000b300 	andeq	fp, r0, r0, lsl #6
    4440:	00010000 	andeq	r0, r1, r0
    4444:	9e030407 	cdpls	4, 0, cr0, cr3, cr7, {0}
    4448:	0300000b 	movweq	r0, #11
    444c:	008f1863 	addeq	r1, pc, r3, ror #16
    4450:	26030000 	strcs	r0, [r3], -r0
    4454:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4458:	00411226 	subeq	r1, r1, r6, lsr #4
    445c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    4460:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    4464:	00541227 	subseq	r1, r4, r7, lsr #4
    4468:	cd080000 	stcgt	0, cr0, [r8, #-0]
    446c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4470:	000000cd 	andeq	r0, r0, sp, asr #1
    4474:	001dc003 	andseq	ip, sp, r3
    4478:	122b0400 	eorne	r0, fp, #0, 8
    447c:	00000041 	andeq	r0, r0, r1, asr #32
    4480:	0000e309 	andeq	lr, r0, r9, lsl #6
    4484:	00e30800 	rsceq	r0, r3, r0, lsl #16
    4488:	4b030000 	blmi	c4490 <__ccfg+0xa44e8>
    448c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    4490:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    4494:	f9080000 			; <UNDEFINED> instruction: 0xf9080000
    4498:	03000000 	movweq	r0, #0
    449c:	00000652 	andeq	r0, r0, r2, asr r6
    44a0:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    44a4:	03000000 	movweq	r0, #0
    44a8:	00000bc0 	andeq	r0, r0, r0, asr #23
    44ac:	22102e04 	andscs	r2, r0, #4, 28	; 0x40
    44b0:	0a000001 	beq	44bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe8>
    44b4:	0000cd04 	andeq	ip, r0, r4, lsl #26
    44b8:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    44bc:	01b60932 			; <UNDEFINED> instruction: 0x01b60932
    44c0:	2b0c0000 	blcs	3044c8 <__ccfg+0x2e4520>
    44c4:	04000000 	streq	r0, [r0], #-0
    44c8:	00e30734 	rsceq	r0, r3, r4, lsr r7
    44cc:	01010000 	mrseq	r0, (UNDEF: 1)
    44d0:	580c0007 	stmdapl	ip, {r0, r1, r2}
    44d4:	04000006 	streq	r0, [r0], #-6
    44d8:	00e30335 	rsceq	r0, r3, r5, lsr r3
    44dc:	01010000 	mrseq	r0, (UNDEF: 1)
    44e0:	ef0c0006 	svc	0x000c0006
    44e4:	04000002 	streq	r0, [r0], #-2
    44e8:	00e30336 	rsceq	r0, r3, r6, lsr r3
    44ec:	01010000 	mrseq	r0, (UNDEF: 1)
    44f0:	c30c0005 	movwgt	r0, #49157	; 0xc005
    44f4:	04000006 	streq	r0, [r0], #-6
    44f8:	00e30337 	rsceq	r0, r3, r7, lsr r3
    44fc:	01010000 	mrseq	r0, (UNDEF: 1)
    4500:	ab0c0004 	blge	304518 <__ccfg+0x2e4570>
    4504:	0400000a 	streq	r0, [r0], #-10
    4508:	00e30338 	rsceq	r0, r3, r8, lsr r3
    450c:	04010000 	streq	r0, [r1], #-0
    4510:	670d0000 	strvs	r0, [sp, -r0]
    4514:	04000006 	streq	r0, [r0], #-6
    4518:	00e3073a 	rsceq	r0, r3, sl, lsr r7
    451c:	0d010000 	stceq	0, cr0, [r1, #-0]
    4520:	00000907 	andeq	r0, r0, r7, lsl #18
    4524:	e3033c04 	movw	r3, #15364	; 0x3c04
    4528:	02000000 	andeq	r0, r0, #0
    452c:	000f380d 	andeq	r3, pc, sp, lsl #16
    4530:	033d0400 	teqeq	sp, #0, 8
    4534:	000000e3 	andeq	r0, r0, r3, ror #1
    4538:	091f0d03 	ldmdbeq	pc, {r0, r1, r8, sl, fp}	; <UNPREDICTABLE>
    453c:	3f040000 	svccc	0x00040000
    4540:	0000f908 	andeq	pc, r0, r8, lsl #18
    4544:	03000400 	movweq	r0, #1024	; 0x400
    4548:	00000325 	andeq	r0, r0, r5, lsr #6
    454c:	28034104 	stmdacs	r3, {r2, r8, lr}
    4550:	09000001 	stmdbeq	r0, {r0}
    4554:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    4558:	0006ca0e 	andeq	ip, r6, lr, lsl #20
    455c:	1a430400 	bne	10c5564 <__ccfg+0x10a55bc>
    4560:	000001c2 	andeq	r0, r0, r2, asr #3
    4564:	970e0101 	strls	r0, [lr, -r1, lsl #2]
    4568:	04000001 	streq	r0, [r0], #-1
    456c:	01e30e45 	mvneq	r0, r5, asr #28
    4570:	01010000 	mrseq	r0, (UNDEF: 1)
    4574:	01e9040a 	mvneq	r0, sl, lsl #8
    4578:	01020000 	mrseq	r0, (UNDEF: 2)
    457c:	000c7008 	andeq	r7, ip, r8
    4580:	01e90800 	mvneq	r0, r0, lsl #16
    4584:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    4588:	04000003 	streq	r0, [r0], #-3
    458c:	01e31e45 	mvneq	r1, r5, asr #28
    4590:	01010000 	mrseq	r0, (UNDEF: 1)
    4594:	8f05080b 	svchi	0x0005080b
    4598:	00023409 	andeq	r3, r2, r9, lsl #8
    459c:	0cd60d00 	ldcleq	13, cr0, [r6], {0}
    45a0:	90050000 	andls	r0, r5, r0
    45a4:	0000670b 	andeq	r6, r0, fp, lsl #14
    45a8:	730d0000 	movwvc	r0, #53248	; 0xd000
    45ac:	05000010 	streq	r0, [r0, #-16]
    45b0:	00cd0891 	smulleq	r0, sp, r1, r8
    45b4:	0d040000 	stceq	0, cr0, [r4, #-0]
    45b8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    45bc:	ef109205 	svc	0x00109205
    45c0:	06000000 	streq	r0, [r0], -r0
    45c4:	0cca0300 	stcleq	3, cr0, [sl], {0}
    45c8:	93050000 	movwls	r0, #20480	; 0x5000
    45cc:	00020303 	andeq	r0, r2, r3, lsl #6
    45d0:	02340f00 	eorseq	r0, r4, #0, 30
    45d4:	024b0000 	subeq	r0, fp, #0
    45d8:	00100000 	andseq	r0, r0, r0
    45dc:	0009490e 	andeq	r4, r9, lr, lsl #18
    45e0:	0f990500 	svceq	0x00990500
    45e4:	00000240 	andeq	r0, r0, r0, asr #4
    45e8:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    45ec:	000000f4 	strdeq	r0, [r0], -r4
    45f0:	9106010b 	tstls	r6, fp, lsl #2
    45f4:	00028909 	andeq	r8, r2, r9, lsl #18
    45f8:	09260c00 	stmdbeq	r6!, {sl, fp}
    45fc:	93060000 	movwls	r0, #24576	; 0x6000
    4600:	0000e307 	andeq	lr, r0, r7, lsl #6
    4604:	01070100 	mrseq	r0, (UNDEF: 23)
    4608:	05d80c00 	ldrbeq	r0, [r8, #3072]	; 0xc00
    460c:	94060000 	strls	r0, [r6], #-0
    4610:	0000e303 	andeq	lr, r0, r3, lsl #6
    4614:	00010100 	andeq	r0, r1, r0, lsl #2
    4618:	b7030000 	strlt	r0, [r3, -r0]
    461c:	0600000a 	streq	r0, [r0], -sl
    4620:	025f0396 	subseq	r0, pc, #1476395010	; 0x58000002
    4624:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    4628:	0f000002 	svceq	0x00000002
    462c:	00000295 	muleq	r0, r5, r2
    4630:	000002a5 	andeq	r0, r0, r5, lsr #5
    4634:	9a080010 	bls	20467c <__ccfg+0x1e46d4>
    4638:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    463c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    4640:	a5179c06 	ldrge	r9, [r7, #-3078]	; 0xfffff3fa
    4644:	01000002 	tsteq	r0, r2
    4648:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    464c:	02c30000 	sbceq	r0, r3, #0
    4650:	00100000 	andseq	r0, r0, r0
    4654:	0002b808 	andeq	fp, r2, r8, lsl #16
    4658:	061a0e00 	ldreq	r0, [sl], -r0, lsl #28
    465c:	06070000 	streq	r0, [r7], -r0
    4660:	0002c313 	andeq	ip, r2, r3, lsl r3
    4664:	0e010100 	adfeqs	f0, f1, f0
    4668:	000008e9 	andeq	r0, r0, r9, ror #17
    466c:	f90ec305 			; <UNDEFINED> instruction: 0xf90ec305
    4670:	01000000 	mrseq	r0, (UNDEF: 0)
    4674:	0c7e1101 	ldfeqe	f1, [lr], #-4
    4678:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    467c:	02f11001 	rscseq	r1, r1, #1
    4680:	040a0000 	streq	r0, [sl], #-0
    4684:	000002f7 	strdeq	r0, [r0], -r7
    4688:	03030112 	movweq	r0, #12562	; 0x3112
    468c:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    4690:	00000000 	andeq	r0, r0, r0
    4694:	0001f00f 	andeq	pc, r1, pc
    4698:	00030e00 	andeq	r0, r3, r0, lsl #28
    469c:	08001000 	stmdaeq	r0, {ip}
    46a0:	00000303 	andeq	r0, r0, r3, lsl #6
    46a4:	0009f214 	andeq	pc, r9, r4, lsl r2	; <UNPREDICTABLE>
    46a8:	017f0800 	cmneq	pc, r0, lsl #16
    46ac:	00030e16 	andeq	r0, r3, r6, lsl lr
    46b0:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    46b4:	000003a9 	andeq	r0, r0, r9, lsr #7
    46b8:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    46bc:	00000105 	andeq	r0, r0, r5, lsl #2
    46c0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    46c4:	55090809 	strpl	r0, [r9, #-2057]	; 0xfffff7f7
    46c8:	0d000003 	stceq	0, cr0, [r0, #-12]
    46cc:	000001c2 	andeq	r0, r0, r2, asr #3
    46d0:	cd070f09 	stcgt	15, cr0, [r7, #-36]	; 0xffffffdc
    46d4:	00000000 	andeq	r0, r0, r0
    46d8:	000cae0d 	andeq	sl, ip, sp, lsl #28
    46dc:	03100900 	tsteq	r0, #0, 18
    46e0:	000000cd 	andeq	r0, r0, sp, asr #1
    46e4:	77030002 	strvc	r0, [r3, -r2]
    46e8:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    46ec:	03310311 	teqeq	r1, #1140850688	; 0x44000000
    46f0:	200b0000 	andcs	r0, fp, r0
    46f4:	d3091609 	movwle	r1, #38409	; 0x9609
    46f8:	0d000003 	stceq	0, cr0, [r0, #-12]
    46fc:	000004c4 	andeq	r0, r0, r4, asr #9
    4700:	ed081709 	stc	7, cr1, [r8, #-36]	; 0xffffffdc
    4704:	00000003 	andeq	r0, r0, r3
    4708:	0009170d 	andeq	r1, r9, sp, lsl #14
    470c:	08180900 	ldmdaeq	r8, {r8, fp}
    4710:	00000408 	andeq	r0, r0, r8, lsl #8
    4714:	0bd20d04 	bleq	ff487b2c <_estack+0xdf482b2c>
    4718:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    471c:	00043e08 	andeq	r3, r4, r8, lsl #28
    4720:	a60d0800 	strge	r0, [sp], -r0, lsl #16
    4724:	0900000c 	stmdbeq	r0, {r2, r3}
    4728:	0459081a 	ldrbeq	r0, [r9], #-2074	; 0xfffff7e6
    472c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4730:	0000096e 	andeq	r0, r0, lr, ror #18
    4734:	6f081b09 	svcvs	0x00081b09
    4738:	10000004 	andne	r0, r0, r4
    473c:	000a6f0d 	andeq	r6, sl, sp, lsl #30
    4740:	081c0900 	ldmdaeq	ip, {r8, fp}
    4744:	0000046f 	andeq	r0, r0, pc, ror #8
    4748:	01a50d14 			; <UNDEFINED> instruction: 0x01a50d14
    474c:	1d090000 	stcne	0, cr0, [r9, #-0]
    4750:	00046f08 	andeq	r6, r4, r8, lsl #30
    4754:	1c0d1800 	stcne	8, cr1, [sp], {-0}
    4758:	09000003 	stmdbeq	r0, {r0, r1}
    475c:	0081061e 	addeq	r0, r1, lr, lsl r6
    4760:	001c0000 	andseq	r0, ip, r0
    4764:	00810115 	addeq	r0, r1, r5, lsl r1
    4768:	03ed0000 	mvneq	r0, #0
    476c:	81130000 	tsthi	r3, r0
    4770:	13000000 	movwne	r0, #0
    4774:	00000081 	andeq	r0, r0, r1, lsl #1
    4778:	0000b513 	andeq	fp, r0, r3, lsl r5
    477c:	040a0000 	streq	r0, [sl], #-0
    4780:	000003d3 	ldrdeq	r0, [r0], -r3
    4784:	00810115 	addeq	r0, r1, r5, lsl r1
    4788:	04080000 	streq	r0, [r8], #-0
    478c:	81130000 	tsthi	r3, r0
    4790:	13000000 	movwne	r0, #0
    4794:	00000081 	andeq	r0, r0, r1, lsl #1
    4798:	f3040a00 	vpmax.u8	d0, d4, d0
    479c:	15000003 	strne	r0, [r0, #-3]
    47a0:	00008101 	andeq	r8, r0, r1, lsl #2
    47a4:	00043200 	andeq	r3, r4, r0, lsl #4
    47a8:	00811300 	addeq	r1, r1, r0, lsl #6
    47ac:	16130000 	ldrne	r0, [r3], -r0
    47b0:	13000001 	movwne	r0, #1
    47b4:	00000081 	andeq	r0, r0, r1, lsl #1
    47b8:	00043213 	andeq	r3, r4, r3, lsl r2
    47bc:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    47c0:	0a000000 	beq	47c8 <memcpy+0x5c>
    47c4:	00008104 	andeq	r8, r0, r4, lsl #2
    47c8:	55040a00 	strpl	r0, [r4, #-2560]	; 0xfffff600
    47cc:	0a000003 	beq	47e0 <memcpy+0x74>
    47d0:	00040e04 	andeq	r0, r4, r4, lsl #28
    47d4:	81011500 	tsthi	r1, r0, lsl #10
    47d8:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    47dc:	13000004 	movwne	r0, #4
    47e0:	00000116 	andeq	r0, r0, r6, lsl r1
    47e4:	00043813 	andeq	r3, r4, r3, lsl r8
    47e8:	040a0000 	streq	r0, [sl], #-0
    47ec:	00000444 	andeq	r0, r0, r4, asr #8
    47f0:	00810115 	addeq	r0, r1, r5, lsl r1
    47f4:	046f0000 	strbteq	r0, [pc], #-0	; 47fc <memcpy+0x90>
    47f8:	16130000 	ldrne	r0, [r3], -r0
    47fc:	00000001 	andeq	r0, r0, r1
    4800:	045f040a 	ldrbeq	r0, [pc], #-1034	; 4808 <memcpy+0x9c>
    4804:	33030000 	movwcc	r0, #12288	; 0x3000
    4808:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    480c:	0361031f 	cmneq	r1, #2080374784	; 0x7c000000
    4810:	75080000 	strvc	r0, [r8, #-0]
    4814:	16000004 	strne	r0, [r0], -r4
    4818:	000017c9 	andeq	r1, r0, r9, asr #15
    481c:	08240908 	stmdaeq	r4!, {r3, r8, fp}
    4820:	000004ae 	andeq	r0, r0, lr, lsr #9
    4824:	000ec30d 	andeq	ip, lr, sp, lsl #6
    4828:	18250900 	stmdane	r5!, {r8, fp}
    482c:	000004ae 	andeq	r0, r0, lr, lsr #9
    4830:	16eb0d00 	strbtne	r0, [fp], r0, lsl #26
    4834:	26090000 	strcs	r0, [r9], -r0
    4838:	0004ae06 	andeq	sl, r4, r6, lsl #28
    483c:	0a000400 	beq	5844 <patchImageGenfsk+0x1fc>
    4840:	00048604 	andeq	r8, r4, r4, lsl #12
    4844:	17d70300 	ldrbne	r0, [r7, r0, lsl #6]
    4848:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
    484c:	0004861e 	andeq	r8, r4, lr, lsl r6
    4850:	18dc0300 	ldmne	ip, {r8, r9}^
    4854:	2a090000 	bcs	24485c <__ccfg+0x2248b4>
    4858:	0004861e 	andeq	r8, r4, lr, lsl r6
    485c:	09020b00 	stmdbeq	r2, {r8, r9, fp}
    4860:	0536023f 	ldreq	r0, [r6, #-575]!	; 0xfffffdc1
    4864:	7e0c0000 	cdpvc	0, 0, cr0, cr12, cr0, {0}
    4868:	09000018 	stmdbeq	r0, {r3, r4}
    486c:	00cd0940 	sbceq	r0, sp, r0, asr #18
    4870:	01020000 	mrseq	r0, (UNDEF: 2)
    4874:	2e0c000f 	cdpcs	0, 0, cr0, cr12, cr15, {0}
    4878:	09000019 	stmdbeq	r0, {r0, r3, r4}
    487c:	00cd0441 	sbceq	r0, sp, r1, asr #8
    4880:	01020000 	mrseq	r0, (UNDEF: 2)
    4884:	f90c000e 			; <UNDEFINED> instruction: 0xf90c000e
    4888:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    488c:	00cd0442 	sbceq	r0, sp, r2, asr #8
    4890:	01020000 	mrseq	r0, (UNDEF: 2)
    4894:	8e0c000d 	cdphi	0, 0, cr0, cr12, cr13, {0}
    4898:	09000018 	stmdbeq	r0, {r3, r4}
    489c:	00cd0443 	sbceq	r0, sp, r3, asr #8
    48a0:	07020000 	streq	r0, [r2, -r0]
    48a4:	ea0c0006 	b	3048c4 <__ccfg+0x2e491c>
    48a8:	09000018 	stmdbeq	r0, {r3, r4}
    48ac:	00cd0444 	sbceq	r0, sp, r4, asr #8
    48b0:	03020000 	movweq	r0, #8192	; 0x2000
    48b4:	700c0003 	andvc	r0, ip, r3
    48b8:	09000018 	stmdbeq	r0, {r3, r4}
    48bc:	00cd0445 	sbceq	r0, sp, r5, asr #8
    48c0:	03020000 	movweq	r0, #8192	; 0x2000
    48c4:	17000000 	strne	r0, [r0, -r0]
    48c8:	093d0902 	ldmdbeq	sp!, {r1, r8, fp}
    48cc:	00000556 	andeq	r0, r0, r6, asr r5
    48d0:	00060f18 	andeq	r0, r6, r8, lsl pc
    48d4:	073e0900 	ldreq	r0, [lr, -r0, lsl #18]!
    48d8:	000000cd 	andeq	r0, r0, sp, asr #1
    48dc:	09006219 	stmdbeq	r0, {r0, r3, r4, r9, sp, lr}
    48e0:	04cc0446 	strbeq	r0, [ip], #1094	; 0x446
    48e4:	03000000 	movweq	r0, #0
    48e8:	000016f0 	strdeq	r1, [r0], -r0
    48ec:	36034709 	strcc	r4, [r3], -r9, lsl #14
    48f0:	17000005 	strne	r0, [r0, -r5]
    48f4:	05500908 	ldrbeq	r0, [r0, #-2312]	; 0xfffff6f8
    48f8:	00000584 	andeq	r0, r0, r4, lsl #11
    48fc:	00191018 	andseq	r1, r9, r8, lsl r0
    4900:	10510900 	subsne	r0, r1, r0, lsl #18
    4904:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    4908:	00183a18 	andseq	r3, r8, r8, lsl sl
    490c:	0b520900 	bleq	1486d14 <__ccfg+0x1466d6c>
    4910:	00000355 	andeq	r0, r0, r5, asr r3
    4914:	191f1600 	ldmdbne	pc, {r9, sl, ip}	; <UNPREDICTABLE>
    4918:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    491c:	05b7084c 	ldreq	r0, [r7, #2124]!	; 0x84c
    4920:	751a0000 	ldrvc	r0, [sl, #-0]
    4924:	07580900 	ldrbeq	r0, [r8, -r0, lsl #18]
    4928:	00000562 	andeq	r0, r0, r2, ror #10
    492c:	18f10d00 	ldmne	r1!, {r8, sl, fp}^
    4930:	63090000 	movwvs	r0, #36864	; 0x9000
    4934:	0000cd07 	andeq	ip, r0, r7, lsl #26
    4938:	d10d0800 	tstle	sp, r0, lsl #16
    493c:	09000018 	stmdbeq	r0, {r3, r4}
    4940:	05561068 	ldrbeq	r1, [r6, #-104]	; 0xffffff98
    4944:	000a0000 	andeq	r0, sl, r0
    4948:	0017e503 	andseq	lr, r7, r3, lsl #10
    494c:	1f790900 	svcne	0x00790900
    4950:	00000584 	andeq	r0, r0, r4, lsl #11
    4954:	7b090c0b 	blvc	247988 <__ccfg+0x2279e0>
    4958:	0005e709 	andeq	lr, r5, r9, lsl #14
    495c:	182e0d00 	stmdane	lr!, {r8, sl, fp}
    4960:	7f090000 	svcvc	0x00090000
    4964:	0004c011 	andeq	ip, r4, r1, lsl r0
    4968:	bd0d0000 	stclt	0, cr0, [sp, #-0]
    496c:	09000018 	stmdbeq	r0, {r3, r4}
    4970:	05561183 	ldrbeq	r1, [r6, #-387]	; 0xfffffe7d
    4974:	00080000 	andeq	r0, r8, r0
    4978:	00186003 	andseq	r6, r8, r3
    497c:	03920900 	orrseq	r0, r2, #0, 18
    4980:	000005c3 	andeq	r0, r0, r3, asr #11
    4984:	00038114 	andeq	r8, r3, r4, lsl r1
    4988:	02d80800 	sbcseq	r0, r8, #0, 16
    498c:	0000f90e 	andeq	pc, r0, lr, lsl #18
    4990:	1b010100 	blne	44d98 <__ccfg+0x24df0>
    4994:	03030808 	movweq	r0, #14344	; 0x3808
    4998:	00062909 	andeq	r2, r6, r9, lsl #18
    499c:	3c9f1c00 	ldccc	12, cr1, [pc], {0}
    49a0:	07080000 	streq	r0, [r8, -r0]
    49a4:	00cd0703 	sbceq	r0, sp, r3, lsl #14
    49a8:	1c000000 	stcne	0, cr0, [r0], {-0}
    49ac:	00000fcb 	andeq	r0, r0, fp, asr #31
    49b0:	08030808 	stmdaeq	r3, {r3, fp}
    49b4:	0000010a 	andeq	r0, r0, sl, lsl #2
    49b8:	15110004 	ldrne	r0, [r1, #-4]
    49bc:	0800000a 	stmdaeq	r0, {r1, r3}
    49c0:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    49c4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    49c8:	00000020 	andeq	r0, r0, r0, lsr #32
    49cc:	030b0830 	movweq	r0, #47152	; 0xb830
    49d0:	00069908 	andeq	r9, r6, r8, lsl #18
    49d4:	1f221c00 	svcne	0x00221c00
    49d8:	14080000 	strne	r0, [r8], #-0
    49dc:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    49e0:	1c000000 	stcne	0, cr0, [r0], {-0}
    49e4:	00000bf3 	strdeq	r0, [r0], -r3
    49e8:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    49ec:	000000cd 	andeq	r0, r0, sp, asr #1
    49f0:	4c8c1c02 	stcmi	12, cr1, [ip], {2}
    49f4:	16080000 	strne	r0, [r8], -r0
    49f8:	02e40b03 	rsceq	r0, r4, #3072	; 0xc00
    49fc:	1c040000 	stcne	0, cr0, [r4], {-0}
    4a00:	00004752 	andeq	r4, r0, r2, asr r7
    4a04:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    4a08:	0000010a 	andeq	r0, r0, sl, lsl #2
    4a0c:	000f1c08 	andeq	r1, pc, r8, lsl #24
    4a10:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    4a14:	06990f03 	ldreq	r0, [r9], r3, lsl #30
    4a18:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    4a1c:	00000969 	andeq	r0, r0, r9, ror #18
    4a20:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    4a24:	000006a9 	andeq	r0, r0, r9, lsr #13
    4a28:	290f002c 	stmdbcs	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    4a2c:	a9000006 	stmdbge	r0, {r1, r2}
    4a30:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    4a34:	00000088 	andeq	r0, r0, r8, lsl #1
    4a38:	040a0003 	streq	r0, [sl], #-3
    4a3c:	00000636 	andeq	r0, r0, r6, lsr r6
    4a40:	000be811 	andeq	lr, fp, r1, lsl r8
    4a44:	031c0800 	tsteq	ip, #0, 16
    4a48:	0006361b 	andeq	r3, r6, fp, lsl r6
    4a4c:	0bc81400 	bleq	ff209a54 <_estack+0xdf204a54>
    4a50:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    4a54:	06cb1403 	strbeq	r1, [fp], r3, lsl #8
    4a58:	01010000 	mrseq	r0, (UNDEF: 1)
    4a5c:	06af040a 	strteq	r0, [pc], sl, lsl #8
    4a60:	1b0e0000 	blne	384a68 <__ccfg+0x364ac0>
    4a64:	0a000007 	beq	4a88 <__aeabi_lmul+0x224>
    4a68:	00cd131d 	sbceq	r1, sp, sp, lsl r3
    4a6c:	01010000 	mrseq	r0, (UNDEF: 1)
    4a70:	0002f60e 	andeq	pc, r2, lr, lsl #12
    4a74:	1a1e0a00 	bne	78727c <__ccfg+0x7672d4>
    4a78:	000000de 	ldrdeq	r0, [r0], -lr
    4a7c:	750e0101 	strvc	r0, [lr, #-257]	; 0xfffffeff
    4a80:	0a00000c 	beq	4ab8 <__aeabi_lmul+0x254>
    4a84:	00de241e 	sbcseq	r2, lr, lr, lsl r4
    4a88:	01010000 	mrseq	r0, (UNDEF: 1)
    4a8c:	000c930e 	andeq	r9, ip, lr, lsl #6
    4a90:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    4a94:	000006cb 	andeq	r0, r0, fp, asr #13
    4a98:	36030101 	strcc	r0, [r3], -r1, lsl #2
    4a9c:	0b000017 	bleq	4b00 <__aeabi_lmul+0x29c>
    4aa0:	07150f0e 	ldreq	r0, [r5, -lr, lsl #30]
    4aa4:	040a0000 	streq	r0, [sl], #-0
    4aa8:	0000071b 	andeq	r0, r0, fp, lsl r7
    4aac:	00810115 	addeq	r0, r1, r5, lsl r1
    4ab0:	07300000 	ldreq	r0, [r0, -r0]!
    4ab4:	81130000 	tsthi	r3, r0
    4ab8:	13000000 	movwne	r0, #0
    4abc:	00000116 	andeq	r0, r0, r6, lsl r1
    4ac0:	07400f00 	strbeq	r0, [r0, -r0, lsl #30]
    4ac4:	07400000 	strbeq	r0, [r0, -r0]
    4ac8:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4acc:	07000000 	streq	r0, [r0, -r0]
    4ad0:	e7040a00 	str	r0, [r4, -r0, lsl #20]
    4ad4:	1f000005 	svcne	0x00000005
    4ad8:	00001806 	andeq	r1, r0, r6, lsl #16
    4adc:	30150d0c 	andscc	r0, r5, ip, lsl #26
    4ae0:	05000007 	streq	r0, [r0, #-7]
    4ae4:	00059803 	andeq	r9, r5, r3, lsl #16
    4ae8:	07090f20 	streq	r0, [r9, -r0, lsr #30]
    4aec:	07680000 	strbeq	r0, [r8, -r0]!
    4af0:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4af4:	02000000 	andeq	r0, r0, #0
    4af8:	18751f00 	ldmdane	r5!, {r8, r9, sl, fp, ip}^
    4afc:	130c0000 	movwne	r0, #49152	; 0xc000
    4b00:	00075814 	andeq	r5, r7, r4, lsl r8
    4b04:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    4b08:	0f200005 	svceq	0x00200005
    4b0c:	0000078a 	andeq	r0, r0, sl, lsl #15
    4b10:	0000078a 	andeq	r0, r0, sl, lsl #15
    4b14:	0000881e 	andeq	r8, r0, lr, lsl r8
    4b18:	0a000200 	beq	5320 <patchGenfskRfe+0x38c>
    4b1c:	0004c004 	andeq	ip, r4, r4
    4b20:	17c11f00 	strbne	r1, [r1, r0, lsl #30]
    4b24:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    4b28:	00077a13 	andeq	r7, r7, r3, lsl sl
    4b2c:	b8030500 	stmdalt	r3, {r8, sl}
    4b30:	0f200005 	svceq	0x00200005
    4b34:	00000081 	andeq	r0, r0, r1, lsl #1
    4b38:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
    4b3c:	0000881e 	andeq	r8, r0, lr, lsl r8
    4b40:	1f000200 	svcne	0x00000200
    4b44:	00001799 	muleq	r0, r9, r7
    4b48:	a20f1e0c 	andge	r1, pc, #12, 28	; 0xc0
    4b4c:	05000007 	streq	r0, [r0, #-7]
    4b50:	0005d003 	andeq	sp, r5, r3
    4b54:	07d40f20 	ldrbeq	r0, [r4, r0, lsr #30]
    4b58:	07d40000 	ldrbeq	r0, [r4, r0]
    4b5c:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4b60:	02000000 	andeq	r0, r0, #0
    4b64:	81040a00 	tsthi	r4, r0, lsl #20
    4b68:	1f000004 	svcne	0x00000004
    4b6c:	00001917 	andeq	r1, r0, r7, lsl r9
    4b70:	c41b230c 	ldrgt	r2, [fp], #-780	; 0xfffffcf4
    4b74:	05000007 	streq	r0, [r0, #-7]
    4b78:	0005dc03 	andeq	sp, r5, r3, lsl #24
    4b7c:	85012020 	strhi	r2, [r1, #-32]	; 0xffffffe0
    4b80:	01000018 	tsteq	r0, r8, lsl r0
    4b84:	0101050d 	tsteq	r1, sp, lsl #10
    4b88:	00002320 	andeq	r2, r0, r0, lsr #6
    4b8c:	00002322 	andeq	r2, r0, r2, lsr #6
    4b90:	01219c01 			; <UNDEFINED> instruction: 0x01219c01
    4b94:	000017a8 	andeq	r1, r0, r8, lsr #15
    4b98:	01050501 	tsteq	r5, r1, lsl #10
    4b9c:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4ba8:	639c0100 	orrsvs	r0, ip, #0, 2
    4bac:	22000008 	andcs	r0, r0, #8
    4bb0:	00796870 	rsbseq	r6, r9, r0, ror r8
    4bb4:	2d050501 	cfstr32cs	mvfx0, [r5, #-4]
    4bb8:	00000081 	andeq	r0, r0, r1, lsl #1
    4bbc:	0000130f 	andeq	r1, r0, pc, lsl #6
    4bc0:	00114e23 	andseq	r4, r1, r3, lsr #28
    4bc4:	00000000 	andeq	r0, r0, r0
    4bc8:	00093000 	andeq	r3, r9, r0
    4bcc:	050a0100 	streq	r0, [sl, #-256]	; 0xffffff00
    4bd0:	11602409 	cmnne	r0, r9, lsl #8
    4bd4:	132d0000 			; <UNDEFINED> instruction: 0x132d0000
    4bd8:	30250000 	eorcc	r0, r5, r0
    4bdc:	26000009 	strcs	r0, [r0], -r9
    4be0:	0000116b 	andeq	r1, r0, fp, ror #2
    4be4:	00001340 	andeq	r1, r0, r0, asr #6
    4be8:	00117626 	andseq	r7, r1, r6, lsr #12
    4bec:	00135e00 	andseq	r5, r3, r0, lsl #28
    4bf0:	00000000 	andeq	r0, r0, r0
    4bf4:	18b20127 	ldmne	r2!, {r0, r1, r2, r5, r8}
    4bf8:	fa010000 	blx	44c00 <__ccfg+0x24c58>
    4bfc:	e4010104 	str	r0, [r1], #-260	; 0xfffffefc
    4c00:	20000022 	andcs	r0, r0, r2, lsr #32
    4c04:	01000023 	tsteq	r0, r3, lsr #32
    4c08:	00089d9c 	muleq	r8, ip, sp
    4c0c:	6b702200 	blvs	1c0d414 <__ccfg+0x1bed46c>
    4c10:	fa010074 	blx	44de8 <__ccfg+0x24e40>
    4c14:	01163004 	tsteq	r6, r4
    4c18:	13880000 	orrne	r0, r8, #0
    4c1c:	62280000 	eorvs	r0, r8, #0
    4c20:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    4c24:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4c28:	0013a600 	andseq	sl, r3, r0, lsl #12
    4c2c:	040a0000 	streq	r0, [sl], #-0
    4c30:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    4c34:	16fe0121 	ldrbtne	r0, [lr], r1, lsr #2
    4c38:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    4c3c:	16010104 	strne	r0, [r1], -r4, lsl #2
    4c40:	b0000001 	andlt	r0, r0, r1
    4c44:	e4000022 	str	r0, [r0], #-34	; 0xffffffde
    4c48:	01000022 	tsteq	r0, r2, lsr #32
    4c4c:	0008f19c 	muleq	r8, ip, r1
    4c50:	68702200 	ldmdavs	r0!, {r9, sp}^
    4c54:	e9010079 	stmdb	r1, {r0, r3, r4, r5, r6}
    4c58:	00812f04 	addeq	r2, r1, r4, lsl #30
    4c5c:	13c40000 	bicne	r0, r4, #0
    4c60:	6f280000 	svcvs	0x00280000
    4c64:	ed010071 	stc	0, cr0, [r1, #-452]	; 0xfffffe3c
    4c68:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4c6c:	13e20000 	mvnne	r0, #0
    4c70:	62280000 	eorvs	r0, r8, #0
    4c74:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    4c78:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4c7c:	0013f500 	andseq	pc, r3, r0, lsl #10
    4c80:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4c84:	0000177c 	andeq	r1, r0, ip, ror r7
    4c88:	0104d201 	tsteq	r4, r1, lsl #4
    4c8c:	00011601 	andeq	r1, r1, r1, lsl #12
    4c90:	00227000 	eoreq	r7, r2, r0
    4c94:	0022b000 	eoreq	fp, r2, r0
    4c98:	509c0100 	addspl	r0, ip, r0, lsl #2
    4c9c:	22000009 	andcs	r0, r0, #9
    4ca0:	00796870 	rsbseq	r6, r9, r0, ror r8
    4ca4:	2f04d201 	svccs	0x0004d201
    4ca8:	00000081 	andeq	r0, r0, r1, lsl #1
    4cac:	00001414 	andeq	r1, r0, r4, lsl r4
    4cb0:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4cb4:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    4cb8:	00043239 	andeq	r3, r4, r9, lsr r2
    4cbc:	00143200 	andseq	r3, r4, r0, lsl #4
    4cc0:	716f2800 	cmnvc	pc, r0, lsl #16
    4cc4:	04d70100 	ldrbeq	r0, [r7], #256	; 0x100
    4cc8:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4ccc:	00145000 	andseq	r5, r4, r0
    4cd0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4cd4:	0c04d801 	stceq	8, cr13, [r4], {1}
    4cd8:	0000089d 	muleq	r0, sp, r8
    4cdc:	0000146e 	andeq	r1, r0, lr, ror #8
    4ce0:	05012100 	streq	r2, [r1, #-256]	; 0xffffff00
    4ce4:	01000019 	tsteq	r0, r9, lsl r0
    4ce8:	010104a1 	smlatbeq	r1, r1, r4, r0
    4cec:	00000081 	andeq	r0, r0, r1, lsl #1
    4cf0:	000021d4 	ldrdeq	r2, [r0], -r4
    4cf4:	00002270 	andeq	r2, r0, r0, ror r2
    4cf8:	09eb9c01 	stmibeq	fp!, {r0, sl, fp, ip, pc}^
    4cfc:	70220000 	eorvc	r0, r2, r0
    4d00:	01007968 	tsteq	r0, r8, ror #18
    4d04:	812b04a1 	smulwbhi	fp, r1, r4
    4d08:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4d0c:	22000014 	andcs	r0, r0, #20
    4d10:	a1010070 	tstge	r1, r0, ror r0
    4d14:	01163804 	tsteq	r6, r4, lsl #16
    4d18:	14cc0000 	strbne	r0, [ip], #0
    4d1c:	6c220000 	stcvs	0, cr0, [r2], #-0
    4d20:	01006e65 	tsteq	r0, r5, ror #28
    4d24:	813f04a1 	teqhi	pc, r1, lsr #9
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	29000015 	stmdbcs	r0, {r0, r2, r4}
    4d30:	00676c70 	rsbeq	r6, r7, r0, ror ip
    4d34:	0604a601 	streq	sl, [r4], -r1, lsl #12
    4d38:	00000081 	andeq	r0, r0, r1, lsl #1
    4d3c:	70736428 	rsbsvc	r6, r3, r8, lsr #8
    4d40:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4d44:	0000810b 	andeq	r8, r0, fp, lsl #2
    4d48:	00153400 	andseq	r3, r5, r0, lsl #8
    4d4c:	65732a00 	ldrbvs	r2, [r3, #-2560]!	; 0xfffff600
    4d50:	a6010073 			; <UNDEFINED> instruction: 0xa6010073
    4d54:	00811004 	addeq	r1, r1, r4
    4d58:	91020000 	mrsls	r0, (UNDEF: 2)
    4d5c:	70612a50 	rsbvc	r2, r1, r0, asr sl
    4d60:	04a70100 	strteq	r0, [r7], #256	; 0x100
    4d64:	0003550b 	andeq	r5, r3, fp, lsl #10
    4d68:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4d6c:	01006328 	tsteq	r0, r8, lsr #6
    4d70:	160a04a8 	strne	r0, [sl], -r8, lsr #9
    4d74:	52000001 	andpl	r0, r0, #1
    4d78:	00000015 	andeq	r0, r0, r5, lsl r0
    4d7c:	172b0121 	strne	r0, [fp, -r1, lsr #2]!
    4d80:	87010000 	strhi	r0, [r1, -r0]
    4d84:	81010104 	tsthi	r1, r4, lsl #2
    4d88:	84000000 	strhi	r0, [r0], #-0
    4d8c:	d4000021 	strle	r0, [r0], #-33	; 0xffffffdf
    4d90:	01000021 	tsteq	r0, r1, lsr #32
    4d94:	000a4a9c 	muleq	sl, ip, sl
    4d98:	68702200 	ldmdavs	r0!, {r9, sp}^
    4d9c:	87010079 	smlsdxhi	r1, r9, r0, r0
    4da0:	00812b04 	addeq	r2, r1, r4, lsl #22
    4da4:	15650000 	strbne	r0, [r5, #-0]!
    4da8:	70220000 	eorvc	r0, r2, r0
    4dac:	87010073 	smlsdxhi	r1, r3, r0, r0
    4db0:	07093a04 	streq	r3, [r9, -r4, lsl #20]
    4db4:	15830000 	strne	r0, [r3]
    4db8:	892b0000 	stmdbhi	fp!, {}	; <UNPREDICTABLE>
    4dbc:	0100000e 	tsteq	r0, lr
    4dc0:	81420487 	smlalbbhi	r0, r2, r7, r4
    4dc4:	a1000000 	mrsge	r0, (UNDEF: 0)
    4dc8:	28000015 	stmdacs	r0, {r0, r2, r4}
    4dcc:	8d010071 	stchi	0, cr0, [r1, #-452]	; 0xfffffe3c
    4dd0:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4dd4:	15bf0000 	ldrne	r0, [pc, #0]!	; 4ddc <__aeabi_lmul+0x578>
    4dd8:	2c000000 	stccs	0, cr0, [r0], {-0}
    4ddc:	00182501 	andseq	r2, r8, r1, lsl #10
    4de0:	03860100 	orreq	r0, r6, #0, 2
    4de4:	01160101 	tsteq	r6, r1, lsl #2
    4de8:	91010000 	mrsls	r0, (UNDEF: 1)
    4dec:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    4df0:	00001d9f 	muleq	r0, pc, sp	; <UNPREDICTABLE>
    4df4:	2d038601 	stccs	6, cr8, [r3, #-4]
    4df8:	00000081 	andeq	r0, r0, r1, lsl #1
    4dfc:	7073642e 	rsbsvc	r6, r3, lr, lsr #8
    4e00:	03860100 	orreq	r0, r6, #0, 2
    4e04:	00008137 	andeq	r8, r0, r7, lsr r1
    4e08:	65732e00 	ldrbvs	r2, [r3, #-3584]!	; 0xfffff200
    4e0c:	86010073 			; <UNDEFINED> instruction: 0x86010073
    4e10:	00814003 	addeq	r4, r1, r3
    4e14:	70290000 	eorvc	r0, r9, r0
    4e18:	038a0100 	orreq	r0, sl, #0, 2
    4e1c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4e20:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4e24:	0000171e 	andeq	r1, r0, lr, lsl r7
    4e28:	01037f01 	tsteq	r3, r1, lsl #30
    4e2c:	00000001 	andeq	r0, r0, r1
    4e30:	00000000 	andeq	r0, r0, r0
    4e34:	cb9c0100 	blgt	fe70523c <_estack+0xde70023c>
    4e38:	2200000a 	andcs	r0, r0, #10
    4e3c:	7f010070 	svcvc	0x00010070
    4e40:	01163203 	tsteq	r6, r3, lsl #4
    4e44:	15ee0000 	strbne	r0, [lr, #0]!
    4e48:	64220000 	strtvs	r0, [r2], #-0
    4e4c:	01007073 	tsteq	r0, r3, ror r0
    4e50:	8139037f 	teqhi	r9, pc, ror r3
    4e54:	01000000 	mrseq	r0, (UNDEF: 0)
    4e58:	00000016 	andeq	r0, r0, r6, lsl r0
    4e5c:	18960121 	ldmne	r6, {r0, r5, r8}
    4e60:	6b010000 	blvs	44e68 <__ccfg+0x24ec0>
    4e64:	16010103 	strne	r0, [r1], -r3, lsl #2
    4e68:	00000001 	andeq	r0, r0, r1
    4e6c:	00000000 	andeq	r0, r0, r0
    4e70:	01000000 	mrseq	r0, (UNDEF: 0)
    4e74:	000b259c 	muleq	fp, ip, r5
    4e78:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4e7c:	33036b01 	movwcc	r6, #15105	; 0x3b01
    4e80:	00000116 	andeq	r0, r0, r6, lsl r1
    4e84:	00001614 	andeq	r1, r0, r4, lsl r6
    4e88:	0018f82b 	andseq	pc, r8, fp, lsr #16
    4e8c:	036b0100 	cmneq	fp, #0, 2
    4e90:	0000813a 	andeq	r8, r0, sl, lsr r1
    4e94:	00163200 	andseq	r3, r6, r0, lsl #4
    4e98:	63702800 	cmnvs	r0, #0, 16
    4e9c:	036f0100 	cmneq	pc, #0, 2
    4ea0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4ea4:	00165000 	andseq	r5, r6, r0
    4ea8:	70702900 	rsbsvc	r2, r0, r0, lsl #18
    4eac:	036f0100 	cmneq	pc, #0, 2
    4eb0:	00089d11 	andeq	r9, r8, r1, lsl sp
    4eb4:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4eb8:	000017b5 			; <UNDEFINED> instruction: 0x000017b5
    4ebc:	01036301 	tsteq	r3, r1, lsl #6
    4ec0:	00000001 	andeq	r0, r0, r1
    4ec4:	00000000 	andeq	r0, r0, r0
    4ec8:	5f9c0100 	svcpl	0x009c0100
    4ecc:	2200000b 	andcs	r0, r0, #11
    4ed0:	63010070 	movwvs	r0, #4208	; 0x1070
    4ed4:	01163103 	tsteq	r6, r3, lsl #2
    4ed8:	166e0000 	strbtne	r0, [lr], -r0
    4edc:	70220000 	eorvc	r0, r2, r0
    4ee0:	01007968 	tsteq	r0, r8, ror #18
    4ee4:	81380363 	teqhi	r8, r3, ror #6
    4ee8:	8c000000 	stchi	0, cr0, [r0], {-0}
    4eec:	00000016 	andeq	r0, r0, r6, lsl r0
    4ef0:	18a10127 	stmiane	r1!, {r0, r1, r2, r5, r8}
    4ef4:	5a010000 	bpl	44efc <__ccfg+0x24f54>
    4ef8:	00010103 	andeq	r0, r1, r3, lsl #2
    4efc:	00000000 	andeq	r0, r0, r0
    4f00:	01000000 	mrseq	r0, (UNDEF: 0)
    4f04:	000b999c 	muleq	fp, ip, r9
    4f08:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4f0c:	31035a01 	tstcc	r3, r1, lsl #20
    4f10:	00000116 	andeq	r0, r0, r6, lsl r1
    4f14:	000016aa 	andeq	r1, r0, sl, lsr #13
    4f18:	73657322 	cmnvc	r5, #-2013265920	; 0x88000000
    4f1c:	035a0100 	cmpeq	sl, #0, 2
    4f20:	00008138 	andeq	r8, r0, r8, lsr r1
    4f24:	0016c800 	andseq	ip, r6, r0, lsl #16
    4f28:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    4f2c:	00001937 	andeq	r1, r0, r7, lsr r9
    4f30:	01035201 	tsteq	r3, r1, lsl #4
    4f34:	00008101 	andeq	r8, r0, r1, lsl #2
    4f38:	0bd50100 	bleq	ff545340 <_estack+0xdf540340>
    4f3c:	702e0000 	eorvc	r0, lr, r0
    4f40:	01007968 	tsteq	r0, r8, ror #18
    4f44:	812d0352 			; <UNDEFINED> instruction: 0x812d0352
    4f48:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4f4c:	0074706f 	rsbseq	r7, r4, pc, rrx
    4f50:	36035201 	strcc	r5, [r3], -r1, lsl #4
    4f54:	00000081 	andeq	r0, r0, r1, lsl #1
    4f58:	6772612e 	ldrbvs	r6, [r2, -lr, lsr #2]!
    4f5c:	03520100 	cmpeq	r2, #0, 2
    4f60:	00011643 	andeq	r1, r1, r3, asr #12
    4f64:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4f68:	00001709 	andeq	r1, r0, r9, lsl #14
    4f6c:	01033301 	tsteq	r3, r1, lsl #6
    4f70:	00008101 	andeq	r8, r0, r1, lsl #2
    4f74:	0020bc00 	eoreq	fp, r0, r0, lsl #24
    4f78:	00211c00 	eoreq	r1, r1, r0, lsl #24
    4f7c:	3e9c0100 	fmlcce	f0, f4, f0
    4f80:	2200000c 	andcs	r0, r0, #12
    4f84:	01006466 	tsteq	r0, r6, ror #8
    4f88:	812c0333 			; <UNDEFINED> instruction: 0x812c0333
    4f8c:	e6000000 	str	r0, [r0], -r0
    4f90:	22000016 	andcs	r0, r0, #22
    4f94:	0074706f 	rsbseq	r7, r4, pc, rrx
    4f98:	34033301 	strcc	r3, [r3], #-769	; 0xfffffcff
    4f9c:	00000081 	andeq	r0, r0, r1, lsl #1
    4fa0:	00001725 	andeq	r1, r0, r5, lsr #14
    4fa4:	67726122 	ldrbvs	r6, [r2, -r2, lsr #2]!
    4fa8:	03330100 	teqeq	r3, #0, 2
    4fac:	00011641 	andeq	r1, r1, r1, asr #12
    4fb0:	00174e00 	andseq	r4, r7, r0, lsl #28
    4fb4:	20ca2f00 	sbccs	r2, sl, r0, lsl #30
    4fb8:	20d80000 	sbcscs	r0, r8, r0
    4fbc:	70280000 	eorvc	r0, r8, r0
    4fc0:	033c0100 	teqeq	ip, #0, 2
    4fc4:	0007d415 	andeq	sp, r7, r5, lsl r4
    4fc8:	00177700 	andseq	r7, r7, r0, lsl #14
    4fcc:	27000000 	strcs	r0, [r0, -r0]
    4fd0:	00179001 	andseq	r9, r7, r1
    4fd4:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4fd8:	00000101 	andeq	r0, r0, r1, lsl #2
    4fdc:	00000000 	andeq	r0, r0, r0
    4fe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fe4:	00000c67 	andeq	r0, r0, r7, ror #24
    4fe8:	01007022 	tsteq	r0, r2, lsr #32
    4fec:	162e032b 	strtne	r0, [lr], -fp, lsr #6
    4ff0:	8a000001 	bhi	4ffc <patchGenfskRfe+0x68>
    4ff4:	00000017 	andeq	r0, r0, r7, lsl r0
    4ff8:	184c0121 	stmdane	ip, {r0, r5, r8}^
    4ffc:	1a010000 	bne	45004 <__ccfg+0x2505c>
    5000:	81010103 	tsthi	r1, r3, lsl #2
	...
    500c:	01000000 	mrseq	r0, (UNDEF: 0)
    5010:	000cc19c 	muleq	ip, ip, r1
    5014:	00702200 	rsbseq	r2, r0, r0, lsl #4
    5018:	2e031a01 	vmlacs.f32	s2, s6, s2
    501c:	00000116 	andeq	r0, r0, r6, lsl r1
    5020:	000017a8 	andeq	r1, r0, r8, lsr #15
    5024:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    5028:	031a0100 	tsteq	sl, #0, 2
    502c:	0002593d 	andeq	r5, r2, sp, lsr r9
    5030:	0017c600 	andseq	ip, r7, r0, lsl #12
    5034:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    5038:	1a01006e 	bne	451f8 <__ccfg+0x25250>
    503c:	00814603 	addeq	r4, r1, r3, lsl #12
    5040:	17d90000 	ldrbne	r0, [r9, r0]
    5044:	62290000 	eorvs	r0, r9, #0
    5048:	031e0100 	tsteq	lr, #0, 2
    504c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5050:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5054:	00001715 	andeq	r1, r0, r5, lsl r7
    5058:	01030801 	tsteq	r3, r1, lsl #16
    505c:	00008101 	andeq	r8, r0, r1, lsl #2
    5060:	00205400 	eoreq	r5, r0, r0, lsl #8
    5064:	00208e00 	eoreq	r8, r0, r0, lsl #28
    5068:	1b9c0100 	blne	fe705470 <_estack+0xde700470>
    506c:	2200000d 	andcs	r0, r0, #13
    5070:	08010070 	stmdaeq	r1, {r4, r5, r6}
    5074:	01162d03 	tsteq	r6, r3, lsl #26
    5078:	17f70000 	ldrbne	r0, [r7, r0]!
    507c:	62220000 	eorvs	r0, r2, #0
    5080:	01006675 	tsteq	r0, r5, ror r6
    5084:	1b360308 	blne	d85cac <__ccfg+0xd65d04>
    5088:	1500000d 	strne	r0, [r0, #-13]
    508c:	22000018 	andcs	r0, r0, #24
    5090:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5094:	3f030801 	svccc	0x00030801
    5098:	00000081 	andeq	r0, r0, r1, lsl #1
    509c:	00001833 	andeq	r1, r0, r3, lsr r8
    50a0:	01006229 	tsteq	r0, r9, lsr #4
    50a4:	9d0c030c 	stcls	3, cr0, [ip, #-48]	; 0xffffffd0
    50a8:	00000008 	andeq	r0, r0, r8
    50ac:	00e3040a 	rsceq	r0, r3, sl, lsl #8
    50b0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    50b4:	00001843 	andeq	r1, r0, r3, asr #16
    50b8:	0102cd01 	tsteq	r2, r1, lsl #26
    50bc:	00011601 	andeq	r1, r1, r1, lsl #12
    50c0:	001f9800 	andseq	r9, pc, r0, lsl #16
    50c4:	00205400 	eoreq	r5, r0, r0, lsl #8
    50c8:	bf9c0100 	svclt	0x009c0100
    50cc:	2b00000d 	blcs	5108 <patchGenfskRfe+0x174>
    50d0:	00000070 	andeq	r0, r0, r0, ror r0
    50d4:	2e02cd01 	cdpcs	13, 0, cr12, cr2, cr1, {0}
    50d8:	000000cd 	andeq	r0, r0, sp, asr #1
    50dc:	00001851 	andeq	r1, r0, r1, asr r8
    50e0:	00646622 	rsbeq	r6, r4, r2, lsr #12
    50e4:	3902cd01 	stmdbcc	r2, {r0, r8, sl, fp, lr, pc}
    50e8:	00000081 	andeq	r0, r0, r1, lsl #1
    50ec:	0000186f 	andeq	r1, r0, pc, ror #16
    50f0:	0018f12b 	andseq	pc, r8, fp, lsr #2
    50f4:	02cd0100 	sbceq	r0, sp, #0, 2
    50f8:	00008141 	andeq	r8, r0, r1, asr #2
    50fc:	00189800 	andseq	r9, r8, r0, lsl #16
    5100:	72752200 	rsbsvc	r2, r5, #0, 4
    5104:	ce010067 	cdpgt	0, 0, cr0, cr1, cr7, {3}
    5108:	00c11102 	sbceq	r1, r1, r2, lsl #2
    510c:	18e20000 	stmiane	r2!, {}^	; <UNPREDICTABLE>
    5110:	62280000 	eorvs	r0, r8, #0
    5114:	02cf0100 	sbceq	r0, pc, #0, 2
    5118:	00089d0c 	andeq	r9, r8, ip, lsl #26
    511c:	0018f500 	andseq	pc, r8, r0, lsl #10
    5120:	18353000 	ldmdane	r5!, {ip, sp}
    5124:	d0010000 	andle	r0, r1, r0
    5128:	03550b02 	cmpeq	r5, #2048	; 0x800
    512c:	91020000 	mrsls	r0, (UNDEF: 2)
    5130:	00732a64 	rsbseq	r2, r3, r4, ror #20
    5134:	0d02d101 	stfeqd	f5, [r2, #-4]
    5138:	00000740 	andeq	r0, r0, r0, asr #14
    513c:	65285701 	strvs	r5, [r8, #-1793]!	; 0xfffff8ff
    5140:	01006469 	tsteq	r0, r9, ror #8
    5144:	810602d2 	ldrdhi	r0, [r6, -r2]
    5148:	13000000 	movwne	r0, #0
    514c:	00000019 	andeq	r0, r0, r9, lsl r0
    5150:	18120121 	ldmdane	r2, {r0, r5, r8}
    5154:	a4010000 	strge	r0, [r1], #-0
    5158:	81010102 	tsthi	r1, r2, lsl #2
	...
    5164:	01000000 	mrseq	r0, (UNDEF: 0)
    5168:	000e729c 	muleq	lr, ip, r2
    516c:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    5170:	02a40100 	adceq	r0, r4, #0, 2
    5174:	0000812a 	andeq	r8, r0, sl, lsr #2
    5178:	00193c00 	andseq	r3, r9, r0, lsl #24
    517c:	18f82b00 	ldmne	r8!, {r8, r9, fp, sp}^
    5180:	a4010000 	strge	r0, [r1], #-0
    5184:	00813202 	addeq	r3, r1, r2, lsl #4
    5188:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
    518c:	73280000 			; <UNDEFINED> instruction: 0x73280000
    5190:	02a80100 	adceq	r0, r8, #0, 2
    5194:	0007400d 	andeq	r4, r7, sp
    5198:	0019a400 	andseq	sl, r9, r0, lsl #8
    519c:	716e2800 	cmnvc	lr, r0, lsl #16
    51a0:	02a90100 	adceq	r0, r9, #0, 2
    51a4:	00008106 	andeq	r8, r0, r6, lsl #2
    51a8:	001a0900 	andseq	r0, sl, r0, lsl #18
    51ac:	71722800 	cmnvc	r2, r0, lsl #16
    51b0:	02aa0100 	adceq	r0, sl, #0, 2
    51b4:	00078a0b 	andeq	r8, r7, fp, lsl #20
    51b8:	001a2700 	andseq	r2, sl, r0, lsl #14
    51bc:	00622800 	rsbeq	r2, r2, r0, lsl #16
    51c0:	0c02ab01 			; <UNDEFINED> instruction: 0x0c02ab01
    51c4:	0000089d 	muleq	r0, sp, r8
    51c8:	00001a45 	andeq	r1, r0, r5, asr #20
    51cc:	00180031 	andseq	r0, r8, r1, lsr r0
    51d0:	02c00100 	sbceq	r0, r0, #0, 2
    51d4:	00000001 	andeq	r0, r0, r1
    51d8:	114e3200 	mrsne	r3, SPSR_fiq
	...
    51e4:	bb010000 	bllt	451ec <__ccfg+0x25244>
    51e8:	60330a02 	eorsvs	r0, r3, r2, lsl #20
    51ec:	26000011 			; <UNDEFINED> instruction: 0x26000011
    51f0:	0000116b 	andeq	r1, r0, fp, ror #2
    51f4:	00001a6e 	andeq	r1, r0, lr, ror #20
    51f8:	00117626 	andseq	r7, r1, r6, lsr #12
    51fc:	001a8100 	andseq	r8, sl, r0, lsl #2
    5200:	21000000 	mrscs	r0, (UNDEF: 0)
    5204:	0016e101 	andseq	lr, r6, r1, lsl #2
    5208:	027d0100 	rsbseq	r0, sp, #0, 2
    520c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    5218:	9c010000 	stcls	0, cr0, [r1], {-0}
    521c:	00000eef 	andeq	r0, r0, pc, ror #29
    5220:	00646622 	rsbeq	r6, r4, r2, lsr #12
    5224:	2a027d01 	bcs	a4630 <__ccfg+0x84688>
    5228:	00000081 	andeq	r0, r0, r1, lsl #1
    522c:	00001a94 	muleq	r0, r4, sl
    5230:	0018f82b 	andseq	pc, r8, fp, lsr #16
    5234:	027d0100 	rsbseq	r0, sp, #0, 2
    5238:	00008132 	andeq	r8, r0, r2, lsr r1
    523c:	001ac800 	andseq	ip, sl, r0, lsl #16
    5240:	00732800 	rsbseq	r2, r3, r0, lsl #16
    5244:	0d028101 	stfeqd	f0, [r2, #-4]
    5248:	00000740 	andeq	r0, r0, r0, asr #14
    524c:	00001af1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    5250:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    5254:	06028201 	streq	r8, [r2], -r1, lsl #4
    5258:	00000081 	andeq	r0, r0, r1, lsl #1
    525c:	00001b56 	andeq	r1, r0, r6, asr fp
    5260:	00717228 	rsbseq	r7, r1, r8, lsr #4
    5264:	0b028301 	bleq	a5e70 <__ccfg+0x85ec8>
    5268:	0000078a 	andeq	r0, r0, sl, lsl #15
    526c:	00001b74 	andeq	r1, r0, r4, ror fp
    5270:	01006228 	tsteq	r0, r8, lsr #4
    5274:	9d0c0284 	sfmls	f0, 4, [ip, #-528]	; 0xfffffdf0
    5278:	9d000008 	stcls	0, cr0, [r0, #-32]	; 0xffffffe0
    527c:	0000001b 	andeq	r0, r0, fp, lsl r0
    5280:	18fd0121 	ldmne	sp!, {r0, r5, r8}^
    5284:	56010000 	strpl	r0, [r1], -r0
    5288:	16010102 	strne	r0, [r1], -r2, lsl #2
    528c:	18000001 	stmdane	r0, {r0}
    5290:	9800001f 	stmdals	r0, {r0, r1, r2, r3, r4}
    5294:	0100001f 	tsteq	r0, pc, lsl r0
    5298:	000f5c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    529c:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    52a0:	56010000 	strpl	r0, [r1], -r0
    52a4:	00cd2d02 	sbceq	r2, sp, r2, lsl #26
    52a8:	1bd10000 	blne	ff4452b0 <_estack+0xdf4402b0>
    52ac:	66220000 	strtvs	r0, [r2], -r0
    52b0:	56010064 	strpl	r0, [r1], -r4, rrx
    52b4:	00813802 	addeq	r3, r1, r2, lsl #16
    52b8:	1be40000 	blne	ff9052c0 <_estack+0xdf9002c0>
    52bc:	70280000 	eorvc	r0, r8, r0
    52c0:	025d0100 	subseq	r0, sp, #0, 2
    52c4:	0001160a 	andeq	r1, r1, sl, lsl #12
    52c8:	001c2300 	andseq	r2, ip, r0, lsl #6
    52cc:	00622800 	rsbeq	r2, r2, r0, lsl #16
    52d0:	0c025e01 	stceq	14, cr5, [r2], {1}
    52d4:	0000089d 	muleq	r0, sp, r8
    52d8:	00001c36 	andeq	r1, r0, r6, lsr ip
    52dc:	00717228 	rsbseq	r7, r1, r8, lsr #4
    52e0:	0b025f01 	bleq	9ceec <__ccfg+0x7cf44>
    52e4:	0000078a 	andeq	r0, r0, sl, lsl #15
    52e8:	00001c5f 	andeq	r1, r0, pc, asr ip
    52ec:	c8012100 	stmdagt	r1, {r8, sp}
    52f0:	01000018 	tsteq	r0, r8, lsl r0
    52f4:	0101024a 	tsteq	r1, sl, asr #4
    52f8:	00000081 	andeq	r0, r0, r1, lsl #1
    52fc:	00001ef4 	strdeq	r1, [r0], -r4
    5300:	00001f18 	andeq	r1, r0, r8, lsl pc
    5304:	0f999c01 	svceq	0x00999c01
    5308:	6f220000 	svcvs	0x00220000
    530c:	01006472 	tsteq	r0, r2, ror r4
    5310:	8129024a 			; <UNDEFINED> instruction: 0x8129024a
    5314:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    5318:	3400001c 	strcc	r0, [r0], #-28	; 0xffffffe4
    531c:	01006c70 	tsteq	r0, r0, ror ip
    5320:	d43f024a 	ldrtle	r0, [pc], #-586	; 5328 <patchGenfskRfe+0x394>
    5324:	01000007 	tsteq	r0, r7
    5328:	01210051 	qsubeq	r0, r1, r1
    532c:	00001856 	andeq	r1, r0, r6, asr r8
    5330:	01022901 	tsteq	r2, r1, lsl #18
    5334:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    5340:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5344:	2b00000f 	blcs	5388 <patchGenfskRfe+0x3f4>
    5348:	00000070 	andeq	r0, r0, r0, ror r0
    534c:	2b022901 	blcs	8f758 <__ccfg+0x6f7b0>
    5350:	000000cd 	andeq	r0, r0, sp, asr #1
    5354:	00001cb7 			; <UNDEFINED> instruction: 0x00001cb7
    5358:	00646622 	rsbeq	r6, r4, r2, lsr #12
    535c:	36022901 	strcc	r2, [r2], -r1, lsl #18
    5360:	00000081 	andeq	r0, r0, r1, lsl #1
    5364:	00001cd5 	ldrdeq	r1, [r0], -r5
    5368:	01007328 	tsteq	r0, r8, lsr #6
    536c:	400d022b 	andmi	r0, sp, fp, lsr #4
    5370:	1f000007 	svcne	0x00000007
    5374:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    5378:	2c010062 	stccs	0, cr0, [r1], {98}	; 0x62
    537c:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    5380:	1d320000 	ldcne	0, cr0, [r2, #-0]
    5384:	21000000 	mrscs	r0, (UNDEF: 0)
    5388:	00178701 	andseq	r8, r7, r1, lsl #14
    538c:	01f60100 	mvnseq	r0, r0, lsl #2
    5390:	00810101 	addeq	r0, r1, r1, lsl #2
    5394:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    5398:	1ef40000 	cdpne	0, 15, cr0, cr4, cr0, {0}
    539c:	9c010000 	stcls	0, cr0, [r1], {-0}
    53a0:	00001083 	andeq	r1, r0, r3, lsl #1
    53a4:	0000702b 	andeq	r7, r0, fp, lsr #32
    53a8:	01f60100 	mvnseq	r0, r0, lsl #2
    53ac:	0000cd2a 	andeq	ip, r0, sl, lsr #26
    53b0:	001d4500 	andseq	r4, sp, r0, lsl #10
    53b4:	68702200 	ldmdavs	r0!, {r9, sp}^
    53b8:	f6010079 			; <UNDEFINED> instruction: 0xf6010079
    53bc:	00813501 	addeq	r3, r1, r1, lsl #10
    53c0:	1d6e0000 	stclne	0, cr0, [lr, #-0]
    53c4:	ad2b0000 	stcge	0, cr0, [fp, #-0]
    53c8:	01000018 	tsteq	r0, r8, lsl r0
    53cc:	813e01f6 	teqhi	lr, r6	; <illegal shifter operand>
    53d0:	c3000000 	movwgt	r0, #0
    53d4:	3500001d 	strcc	r0, [r0, #-29]	; 0xffffffe3
    53d8:	00646628 	rsbeq	r6, r4, r8, lsr #12
    53dc:	0601f801 	streq	pc, [r1], -r1, lsl #16
    53e0:	00000081 	andeq	r0, r0, r1, lsl #1
    53e4:	00001dfb 	strdeq	r1, [r0], -fp
    53e8:	0017f436 	andseq	pc, r7, r6, lsr r4	; <UNPREDICTABLE>
    53ec:	01f90100 	mvnseq	r0, r0, lsl #2
    53f0:	0005560a 	andeq	r5, r5, sl, lsl #12
    53f4:	00732800 	rsbseq	r2, r3, r0, lsl #16
    53f8:	0d01fa01 	vstreq	s30, [r1, #-4]
    53fc:	00000740 	andeq	r0, r0, r0, asr #14
    5400:	00001e19 	andeq	r1, r0, r9, lsl lr
    5404:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    5408:	0b01fc01 	bleq	84414 <__ccfg+0x6446c>
    540c:	000000b5 	strheq	r0, [r0], -r5
    5410:	00549102 	subseq	r9, r4, r2, lsl #2
    5414:	181c0127 	ldmdane	ip, {r0, r1, r2, r5, r8}
    5418:	3b010000 	blcc	45420 <__ccfg+0x25478>
    541c:	c4010101 	strgt	r0, [r1], #-257	; 0xfffffeff
    5420:	3400001d 	strcc	r0, [r0], #-29	; 0xffffffe3
    5424:	0100001e 	tsteq	r0, lr, lsl r0
    5428:	0010bb9c 	mulseq	r0, ip, fp
    542c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    5430:	2e013b01 	vmlacs.f64	d3, d1, d1
    5434:	00000116 	andeq	r0, r0, r6, lsl r1
    5438:	00001e63 	andeq	r1, r0, r3, ror #28
    543c:	01006228 	tsteq	r0, r8, lsr #4
    5440:	9d0c0141 	stflss	f0, [ip, #-260]	; 0xfffffefc
    5444:	8c000008 	stchi	0, cr0, [r0], {8}
    5448:	0000001e 	andeq	r0, r0, lr, lsl r0
    544c:	62706137 	rsbsvs	r6, r0, #-1073741811	; 0xc000000d
    5450:	01140100 	tsteq	r4, r0, lsl #2
    5454:	089d0101 	ldmeq	sp, {r0, r8}
    5458:	1cac0000 	stcne	0, cr0, [ip]
    545c:	1cc20000 	stclne	0, cr0, [r2], {0}
    5460:	9c010000 	stcls	0, cr0, [r1], {-0}
    5464:	00001102 	andeq	r1, r0, r2, lsl #2
    5468:	001d9f2b 	andseq	r9, sp, fp, lsr #30
    546c:	01140100 	tsteq	r4, r0, lsl #2
    5470:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    5474:	001ec000 	andseq	ip, lr, r0
    5478:	00702a00 	rsbseq	r2, r0, r0, lsl #20
    547c:	0c011901 			; <UNDEFINED> instruction: 0x0c011901
    5480:	0000089d 	muleq	r0, sp, r8
    5484:	63295001 			; <UNDEFINED> instruction: 0x63295001
    5488:	1a010073 	bne	4565c <__ccfg+0x256b4>
    548c:	00cd0701 	sbceq	r0, sp, r1, lsl #14
    5490:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5494:	00706c72 	rsbseq	r6, r0, r2, ror ip
    5498:	01010401 	tsteq	r1, r1, lsl #8
    549c:	001cdc01 	andseq	sp, ip, r1, lsl #24
    54a0:	001cea00 	andseq	lr, ip, r0, lsl #20
    54a4:	2a9c0100 	bcs	fe7058ac <_estack+0xde7008ac>
    54a8:	22000011 	andcs	r0, r0, #17
    54ac:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    54b0:	089d2b01 	ldmeq	sp, {r0, r8, r9, fp, sp}
    54b4:	1ed30000 	cdpne	0, 13, cr0, cr3, cr0, {0}
    54b8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    54bc:	00001723 	andeq	r1, r0, r3, lsr #14
    54c0:	0101e001 	tsteq	r1, r1
    54c4:	00114e01 	andseq	r4, r1, r1, lsl #28
    54c8:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    54cc:	9d2fe001 	stcls	0, cr14, [pc, #-4]!	; 54d0 <patchGenfskRfe+0x53c>
    54d0:	3a000008 	bcc	54f8 <patchGenfskRfe+0x564>
    54d4:	01007664 	tsteq	r0, r4, ror #12
    54d8:	008136e0 	addeq	r3, r1, r0, ror #13
    54dc:	3b000000 	blcc	54e4 <patchGenfskRfe+0x550>
    54e0:	000017a2 	andeq	r1, r0, r2, lsr #15
    54e4:	0101cf01 	tsteq	r1, r1, lsl #30
    54e8:	00000081 	andeq	r0, r0, r1, lsl #1
    54ec:	00118101 	andseq	r8, r1, r1, lsl #2
    54f0:	716f3a00 	cmnvc	pc, r0, lsl #20
    54f4:	2bcf0100 	blcs	ff3c58fc <_estack+0xdf3c08fc>
    54f8:	0000078a 	andeq	r0, r0, sl, lsl #15
    54fc:	00716e3c 	rsbseq	r6, r1, ip, lsr lr
    5500:	8106d301 	tsthi	r6, r1, lsl #6
    5504:	3c000000 	stccc	0, cr0, [r0], {-0}
    5508:	d4010062 	strle	r0, [r1], #-98	; 0xffffff9e
    550c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5510:	653d0000 	ldrvs	r0, [sp, #-0]!
    5514:	0100716e 	tsteq	r0, lr, ror #2
    5518:	010101a8 	smlatbeq	r1, r8, r1, r0
    551c:	000011a4 	andeq	r1, r0, r4, lsr #3
    5520:	0100713a 	tsteq	r0, sl, lsr r1
    5524:	078a2aa8 	streq	r2, [sl, r8, lsr #21]
    5528:	703a0000 	eorsvc	r0, sl, r0
    552c:	37a80100 	strcc	r0, [r8, r0, lsl #2]!
    5530:	0000089d 	muleq	r0, sp, r8
    5534:	65643d00 	strbvs	r3, [r4, #-3328]!	; 0xfffff300
    5538:	7f010071 	svcvc	0x00010071
    553c:	bd010101 	stflts	f0, [r1, #-4]
    5540:	3a000011 	bcc	558c <patchGenfskRfe+0x5f8>
    5544:	7f010070 	svcvc	0x00010070
    5548:	00089d2b 	andeq	r9, r8, fp, lsr #26
    554c:	a43e0000 	ldrtge	r0, [lr], #-0
    5550:	c2000011 	andgt	r0, r0, #17
    5554:	dc00001c 	stcle	0, cr0, [r0], {28}
    5558:	0100001c 	tsteq	r0, ip, lsl r0
    555c:	0011f29c 	mulseq	r1, ip, r2
    5560:	11b23f00 			; <UNDEFINED> instruction: 0x11b23f00
    5564:	50010000 	andpl	r0, r1, r0
    5568:	0011a440 	andseq	sl, r1, r0, asr #8
    556c:	001cc800 	andseq	ip, ip, r0, lsl #16
    5570:	001cda00 	andseq	sp, ip, r0, lsl #20
    5574:	017f0100 	cmneq	pc, r0, lsl #2
    5578:	0011b224 	andseq	fp, r1, r4, lsr #4
    557c:	001ee600 	andseq	lr, lr, r0, lsl #12
    5580:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5584:	00001181 	andeq	r1, r0, r1, lsl #3
    5588:	00001cec 	andeq	r1, r0, ip, ror #25
    558c:	00001d38 	andeq	r1, r0, r8, lsr sp
    5590:	123b9c01 	eorsne	r9, fp, #256	; 0x100
    5594:	8f240000 	svchi	0x00240000
    5598:	f9000011 			; <UNDEFINED> instruction: 0xf9000011
    559c:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    55a0:	00001199 	muleq	r0, r9, r1
    55a4:	00001f2d 	andeq	r1, r0, sp, lsr #30
    55a8:	00118140 	andseq	r8, r1, r0, asr #2
    55ac:	001cf800 	andseq	pc, ip, r0, lsl #16
    55b0:	001d0000 	andseq	r0, sp, r0
    55b4:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    55b8:	00118f24 	andseq	r8, r1, r4, lsr #30
    55bc:	001f6100 	andseq	r6, pc, r0, lsl #2
    55c0:	11992400 	orrsne	r2, r9, r0, lsl #8
    55c4:	1f7f0000 	svcne	0x007f0000
    55c8:	00000000 	andeq	r0, r0, r0
    55cc:	00112a3e 	andseq	r2, r1, lr, lsr sl
    55d0:	001d3800 	andseq	r3, sp, r0, lsl #16
    55d4:	001dc400 	andseq	ip, sp, r0, lsl #8
    55d8:	809c0100 	addshi	r0, ip, r0, lsl #2
    55dc:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    55e0:	00001138 	andeq	r1, r0, r8, lsr r1
    55e4:	00001f9d 	muleq	r0, sp, pc	; <UNPREDICTABLE>
    55e8:	00114224 	andseq	r4, r1, r4, lsr #4
    55ec:	001ff200 	andseq	pc, pc, r0, lsl #4
    55f0:	112a4100 			; <UNDEFINED> instruction: 0x112a4100
    55f4:	1d6c0000 	stclne	0, cr0, [ip, #-0]
    55f8:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    55fc:	e0010000 	and	r0, r1, r0
    5600:	11423301 	cmpne	r2, r1, lsl #6
    5604:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    5608:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    560c:	00000020 	andeq	r0, r0, r0, lsr #32
    5610:	0b993e00 	bleq	fe654e18 <_estack+0xde64fe18>
    5614:	20900000 	addscs	r0, r0, r0
    5618:	20bc0000 	adcscs	r0, ip, r0
    561c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5620:	000012d8 	ldrdeq	r1, [r0], -r8
    5624:	000bad24 	andeq	sl, fp, r4, lsr #26
    5628:	00202300 	eoreq	r2, r0, r0, lsl #6
    562c:	0bba2400 	bleq	fee8e634 <_estack+0xdee89634>
    5630:	20410000 	subcs	r0, r1, r0
    5634:	c7240000 	strgt	r0, [r4, -r0]!
    5638:	6a00000b 	bvs	566c <patchImageGenfsk+0x24>
    563c:	32000020 	andcc	r0, r0, #32
    5640:	00000b99 	muleq	r0, r9, fp
    5644:	000020a4 	andeq	r2, r0, r4, lsr #1
    5648:	000020ac 	andeq	r2, r0, ip, lsr #1
    564c:	01035201 	tsteq	r3, r1, lsl #4
    5650:	000bad33 	andeq	sl, fp, r3, lsr sp
    5654:	0bba2400 	bleq	fee8e65c <_estack+0xdee8965c>
    5658:	20930000 	addscs	r0, r3, r0
    565c:	c7240000 	strgt	r0, [r4, -r0]!
    5660:	a600000b 	strge	r0, [r0], -fp
    5664:	00000020 	andeq	r0, r0, r0, lsr #32
    5668:	0a4a4200 	beq	1295e70 <__ccfg+0x1275ec8>
    566c:	211c0000 	tstcs	ip, r0
    5670:	21840000 	orrcs	r0, r4, r0
    5674:	9c010000 	stcls	0, cr0, [r1], {-0}
    5678:	000a5e24 	andeq	r5, sl, r4, lsr #28
    567c:	0020b900 	eoreq	fp, r0, r0, lsl #18
    5680:	0a6b2400 	beq	1ace688 <__ccfg+0x1aae6e0>
    5684:	20cc0000 	sbccs	r0, ip, r0
    5688:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    568c:	2c00000a 	stccs	0, cr0, [r0], {10}
    5690:	26000021 	strcs	r0, [r0], -r1, lsr #32
    5694:	00000a85 	andeq	r0, r0, r5, lsl #21
    5698:	00002176 	andeq	r2, r0, r6, ror r1
    569c:	000a4a32 	andeq	r4, sl, r2, lsr sl
    56a0:	00212a00 	eoreq	r2, r1, r0, lsl #20
    56a4:	00212e00 	eoreq	r2, r1, r0, lsl #28
    56a8:	03860100 	orreq	r0, r6, #0, 2
    56ac:	0a5e3301 	beq	17922b8 <__ccfg+0x1772310>
    56b0:	6b240000 	blvs	9056b8 <__ccfg+0x8e5710>
    56b4:	aa00000a 	bge	56e4 <patchImageGenfsk+0x9c>
    56b8:	33000021 	movwcc	r0, #33	; 0x21
    56bc:	00000a78 	andeq	r0, r0, r8, ror sl
    56c0:	000a8543 	andeq	r8, sl, r3, asr #10
    56c4:	00000000 	andeq	r0, r0, r0
    56c8:	00000174 	andeq	r0, r0, r4, ror r1
    56cc:	124e0003 	subne	r0, lr, #3
    56d0:	01040000 	mrseq	r0, (UNDEF: 4)
    56d4:	000000a3 	andeq	r0, r0, r3, lsr #1
    56d8:	00197f0c 	andseq	r7, r9, ip, lsl #30
    56dc:	000e0800 	andeq	r0, lr, r0, lsl #16
    56e0:	000a4000 	andeq	r4, sl, r0
    56e4:	00000000 	andeq	r0, r0, r0
    56e8:	003dc600 	eorseq	ip, sp, r0, lsl #12
    56ec:	06010200 	streq	r0, [r1], -r0, lsl #4
    56f0:	00000c69 	andeq	r0, r0, r9, ror #24
    56f4:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    56f8:	0200000a 	andeq	r0, r0, #10
    56fc:	08090504 	stmdaeq	r9, {r2, r8, sl}
    5700:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5704:	00080405 	andeq	r0, r8, r5, lsl #8
    5708:	08010200 	stmdaeq	r1, {r9}
    570c:	00000c67 	andeq	r0, r0, r7, ror #24
    5710:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    5714:	0300000d 	movweq	r0, #13
    5718:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    571c:	5b193402 	blpl	65272c <__ccfg+0x632784>
    5720:	02000000 	andeq	r0, r0, #0
    5724:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    5728:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    572c:	00043407 	andeq	r3, r4, r7, lsl #8
    5730:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5734:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5738:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    573c:	05000004 	streq	r0, [r0, #-4]
    5740:	00008204 	andeq	r8, r0, r4, lsl #4
    5744:	00770600 	rsbseq	r0, r7, r0, lsl #12
    5748:	01070000 	mrseq	r0, (UNDEF: 7)
    574c:	004f0405 	subeq	r0, pc, r5, lsl #8
    5750:	72080000 	andvc	r0, r8, #0
    5754:	01000019 	tsteq	r0, r9, lsl r0
    5758:	004f117f 	subeq	r1, pc, pc, ror r1	; <UNPREDICTABLE>
    575c:	01010000 	mrseq	r0, (UNDEF: 1)
    5760:	00475108 	subeq	r5, r7, r8, lsl #2
    5764:	11800100 	orrne	r0, r0, r0, lsl #2
    5768:	0000004f 	andeq	r0, r0, pc, asr #32
    576c:	c3080101 	movwgt	r0, #33025	; 0x8101
    5770:	01000019 	tsteq	r0, r9, lsl r0
    5774:	004f1181 	subeq	r1, pc, r1, lsl #3
    5778:	01010000 	mrseq	r0, (UNDEF: 1)
    577c:	0019be08 	andseq	fp, r9, r8, lsl #28
    5780:	11820100 	orrne	r0, r2, r0, lsl #2
    5784:	0000004f 	andeq	r0, r0, pc, asr #32
    5788:	79080101 	stmdbvc	r8, {r0, r8}
    578c:	01000019 	tsteq	r0, r9, lsl r0
    5790:	004f1183 	subeq	r1, pc, r3, lsl #3
    5794:	01010000 	mrseq	r0, (UNDEF: 1)
    5798:	00194408 	andseq	r4, r9, r8, lsl #8
    579c:	11840100 	orrne	r0, r4, r0, lsl #2
    57a0:	0000004f 	andeq	r0, r0, pc, asr #32
    57a4:	7d090101 	stfvcs	f0, [r9, #-4]
    57a8:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    57ac:	0a000000 	beq	57b4 <patchImageGenfsk+0x16c>
    57b0:	00000070 	andeq	r0, r0, r0, ror r0
    57b4:	de060031 	mcrle	0, 0, r0, cr6, cr1, {1}
    57b8:	0b000000 	bleq	57c0 <patchImageGenfsk+0x178>
    57bc:	000019dc 	ldrdeq	r1, [r0], -ip
    57c0:	ee0f8e01 	cdp	14, 0, cr8, cr15, cr1, {0}
    57c4:	01000000 	mrseq	r0, (UNDEF: 0)
    57c8:	00000305 	andeq	r0, r0, r5, lsl #6
    57cc:	ca0c0000 	bgt	3057d4 <__ccfg+0x2e582c>
    57d0:	01000019 	tsteq	r0, r9, lsl r0
    57d4:	01010128 	tsteq	r1, r8, lsr #2
    57d8:	00002326 	andeq	r2, r0, r6, lsr #6
    57dc:	00002328 	andeq	r2, r0, r8, lsr #6
    57e0:	550c9c01 	strpl	r9, [ip, #-3073]	; 0xfffff3ff
    57e4:	01000019 	tsteq	r0, r9, lsl r0
    57e8:	01010116 	tsteq	r1, r6, lsl r1
    57ec:	00002324 	andeq	r2, r0, r4, lsr #6
    57f0:	00002326 	andeq	r2, r0, r6, lsr #6
    57f4:	650c9c01 	strvs	r9, [ip, #-3073]	; 0xfffff3ff
    57f8:	01000019 	tsteq	r0, r9, lsl r0
    57fc:	01010104 	tsteq	r1, r4, lsl #2
    5800:	00002322 	andeq	r2, r0, r2, lsr #6
    5804:	00002324 	andeq	r2, r0, r4, lsr #6
    5808:	010d9c01 	tsteq	sp, r1, lsl #24
    580c:	000019f3 	strdeq	r1, [r0], -r3
    5810:	0101d201 	tsteq	r1, r1, lsl #4
    5814:	00002328 	andeq	r2, r0, r8, lsr #6
    5818:	0000236c 	andeq	r2, r0, ip, ror #6
    581c:	4c0e9c01 	stcmi	12, cr9, [lr], {1}
    5820:	01000019 	tsteq	r0, r9, lsl r0
    5824:	00840fd4 	ldrdeq	r0, [r4], r4
    5828:	21bd0000 			; <UNDEFINED> instruction: 0x21bd0000
    582c:	e90e0000 	stmdb	lr, {}	; <UNPREDICTABLE>
    5830:	01000019 	tsteq	r0, r9, lsl r0
    5834:	00841ad4 	ldrdeq	r1, [r4], r4
    5838:	21db0000 	bicscs	r0, fp, r0
    583c:	00000000 	andeq	r0, r0, r0
    5840:	00000537 	andeq	r0, r0, r7, lsr r5
    5844:	13130003 	tstne	r3, #3
    5848:	01040000 	mrseq	r0, (UNDEF: 4)
    584c:	000000a3 	andeq	r0, r0, r3, lsr #1
    5850:	001a8b0c 	andseq	r8, sl, ip, lsl #22
    5854:	000e0800 	andeq	r0, lr, r0, lsl #16
    5858:	003eee00 	eorseq	lr, lr, r0, lsl #28
    585c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5860:	00000c69 	andeq	r0, r0, r9, ror #24
    5864:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    5868:	0200000a 	andeq	r0, r0, #10
    586c:	08090504 	stmdaeq	r9, {r2, r8, sl}
    5870:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5874:	00080405 	andeq	r0, r8, r5, lsl #8
    5878:	2a1a0300 	bcs	686480 <__ccfg+0x6664d8>
    587c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5880:	00004518 	andeq	r4, r0, r8, lsl r5
    5884:	08010200 	stmdaeq	r1, {r9}
    5888:	00000c67 	andeq	r0, r0, r7, ror #24
    588c:	002e1003 	eoreq	r1, lr, r3
    5890:	19310100 	ldmdbne	r1!, {r8}
    5894:	00000058 	andeq	r0, r0, r8, asr r0
    5898:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    589c:	0300000d 	movweq	r0, #13
    58a0:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    58a4:	6b193401 	blvs	6528b0 <__ccfg+0x632908>
    58a8:	02000000 	andeq	r0, r0, #0
    58ac:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    58b0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    58b4:	00043407 	andeq	r3, r4, r7, lsl #8
    58b8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    58bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    58c0:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    58c4:	05000004 	streq	r0, [r0, #-4]
    58c8:	092f0258 	stmdbeq	pc!, {r3, r4, r6, r9}	; <UNPREDICTABLE>
    58cc:	000001af 	andeq	r0, r0, pc, lsr #3
    58d0:	001bae06 	andseq	sl, fp, r6, lsl #28
    58d4:	10310200 	eorsne	r0, r1, r0, lsl #4
    58d8:	0000005f 	andeq	r0, r0, pc, asr r0
    58dc:	1ac30600 	bne	ff0c70e4 <_estack+0xdf0c20e4>
    58e0:	32020000 	andcc	r0, r2, #0
    58e4:	00005f10 	andeq	r5, r0, r0, lsl pc
    58e8:	53060400 	movwpl	r0, #25600	; 0x6400
    58ec:	0200001a 	andeq	r0, r0, #26
    58f0:	005f1033 	subseq	r1, pc, r3, lsr r0	; <UNPREDICTABLE>
    58f4:	06080000 	streq	r0, [r8], -r0
    58f8:	00001a3d 	andeq	r1, r0, sp, lsr sl
    58fc:	5f103402 	svcpl	0x00103402
    5900:	0c000000 	stceq	0, cr0, [r0], {-0}
    5904:	0019fc06 	andseq	pc, r9, r6, lsl #24
    5908:	10350200 	eorsne	r0, r5, r0, lsl #4
    590c:	0000005f 	andeq	r0, r0, pc, asr r0
    5910:	1a0d0610 	bne	347158 <__ccfg+0x3271b0>
    5914:	36020000 	strcc	r0, [r2], -r0
    5918:	00005f10 	andeq	r5, r0, r0, lsl pc
    591c:	2d061400 	cfstrscs	mvf1, [r6, #-0]
    5920:	0200001a 	andeq	r0, r0, #26
    5924:	005f1037 	subseq	r1, pc, r7, lsr r0	; <UNPREDICTABLE>
    5928:	06180000 	ldreq	r0, [r8], -r0
    592c:	00001b53 	andeq	r1, r0, r3, asr fp
    5930:	5f103802 	svcpl	0x00103802
    5934:	1c000000 	stcne	0, cr0, [r0], {-0}
    5938:	001a6b06 	andseq	r6, sl, r6, lsl #22
    593c:	10390200 	eorsne	r0, r9, r0, lsl #4
    5940:	0000005f 	andeq	r0, r0, pc, asr r0
    5944:	1a7b0620 	bne	1ec71cc <__ccfg+0x1ea7224>
    5948:	3a020000 	bcc	85950 <__ccfg+0x659a8>
    594c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5950:	79062400 	stmdbvc	r6, {sl, sp}
    5954:	0200001b 	andeq	r0, r0, #27
    5958:	005f103b 	subseq	r1, pc, fp, lsr r0	; <UNPREDICTABLE>
    595c:	06280000 	strteq	r0, [r8], -r0
    5960:	00001b89 	andeq	r1, r0, r9, lsl #23
    5964:	5f103c02 	svcpl	0x00103c02
    5968:	2c000000 	stccs	0, cr0, [r0], {-0}
    596c:	001a1e06 	andseq	r1, sl, r6, lsl #28
    5970:	103d0200 	eorsne	r0, sp, r0, lsl #4
    5974:	0000005f 	andeq	r0, r0, pc, asr r0
    5978:	1b190630 	blne	647240 <__ccfg+0x627298>
    597c:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    5980:	00005f10 	andeq	r5, r0, r0, lsl pc
    5984:	be063400 	cfcpyslt	mvf3, mvf6
    5988:	0200001b 	andeq	r0, r0, #27
    598c:	005f103f 	subseq	r1, pc, pc, lsr r0	; <UNPREDICTABLE>
    5990:	06380000 	ldrteq	r0, [r8], -r0
    5994:	00001ad4 	ldrdeq	r1, [r0], -r4
    5998:	5f104002 	svcpl	0x00104002
    599c:	3c000000 	stccc	0, cr0, [r0], {-0}
    59a0:	001ae806 	andseq	lr, sl, r6, lsl #16
    59a4:	10410200 	subne	r0, r1, r0, lsl #4
    59a8:	0000005f 	andeq	r0, r0, pc, asr r0
    59ac:	1b3d0640 	blne	f472b4 <__ccfg+0xf2730c>
    59b0:	42020000 	andmi	r0, r2, #0
    59b4:	00005f10 	andeq	r5, r0, r0, lsl pc
    59b8:	29064400 	stmdbcs	r6, {sl, lr}
    59bc:	0200001b 	andeq	r0, r0, #27
    59c0:	005f1043 	subseq	r1, pc, r3, asr #32
    59c4:	06480000 	strbeq	r0, [r8], -r0
    59c8:	00001b64 	andeq	r1, r0, r4, ror #22
    59cc:	5f104402 	svcpl	0x00104402
    59d0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    59d4:	001b9906 	andseq	r9, fp, r6, lsl #18
    59d8:	10450200 	subne	r0, r5, r0, lsl #4
    59dc:	0000005f 	andeq	r0, r0, pc, asr r0
    59e0:	1b030650 	blne	c7328 <__ccfg+0xa7380>
    59e4:	46020000 	strmi	r0, [r2], -r0
    59e8:	00005f10 	andeq	r5, r0, r0, lsl pc
    59ec:	03005400 	movweq	r5, #1024	; 0x400
    59f0:	00001afc 	strdeq	r1, [r0], -ip
    59f4:	87034702 	strhi	r4, [r3, -r2, lsl #14]
    59f8:	07000000 	streq	r0, [r0, -r0]
    59fc:	000001af 	andeq	r0, r0, pc, lsr #3
    5a00:	001a4c08 	andseq	r4, sl, r8, lsl #24
    5a04:	154e0200 	strbne	r0, [lr, #-512]	; 0xfffffe00
    5a08:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    5a0c:	f9030101 			; <UNDEFINED> instruction: 0xf9030101
    5a10:	03000028 	movweq	r0, #40	; 0x28
    5a14:	004c1227 	subeq	r1, ip, r7, lsr #4
    5a18:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    5a1c:	09000001 	stmdbeq	r0, {r0}
    5a20:	000001ce 	andeq	r0, r0, lr, asr #3
    5a24:	001dc003 	andseq	ip, sp, r3
    5a28:	122b0300 	eorne	r0, fp, #0, 6
    5a2c:	00000039 	andeq	r0, r0, r9, lsr r0
    5a30:	0001e409 	andeq	lr, r1, r9, lsl #8
    5a34:	294b0300 	stmdbcs	fp, {r8, r9}^
    5a38:	2c030000 	stccs	0, cr0, [r3], {-0}
    5a3c:	00005f12 	andeq	r5, r0, r2, lsl pc
    5a40:	01f50700 	mvnseq	r0, r0, lsl #14
    5a44:	52030000 	andpl	r0, r3, #0
    5a48:	03000006 	movweq	r0, #6
    5a4c:	005f122d 	subseq	r1, pc, sp, lsr #4
    5a50:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    5a54:	a0093203 	andge	r3, r9, r3, lsl #4
    5a58:	0a000002 	beq	5a68 <__exidx_end+0x150>
    5a5c:	0000002b 	andeq	r0, r0, fp, lsr #32
    5a60:	e4073403 	str	r3, [r7], #-1027	; 0xfffffbfd
    5a64:	01000001 	tsteq	r0, r1
    5a68:	0a000701 	beq	7674 <__exidx_end+0x1d5c>
    5a6c:	00000658 	andeq	r0, r0, r8, asr r6
    5a70:	e4033503 	str	r3, [r3], #-1283	; 0xfffffafd
    5a74:	01000001 	tsteq	r0, r1
    5a78:	0a000601 	beq	7284 <__exidx_end+0x196c>
    5a7c:	000002ef 	andeq	r0, r0, pc, ror #5
    5a80:	e4033603 	str	r3, [r3], #-1539	; 0xfffff9fd
    5a84:	01000001 	tsteq	r0, r1
    5a88:	0a000501 	beq	6e94 <__exidx_end+0x157c>
    5a8c:	000006c3 	andeq	r0, r0, r3, asr #13
    5a90:	e4033703 	str	r3, [r3], #-1795	; 0xfffff8fd
    5a94:	01000001 	tsteq	r0, r1
    5a98:	0a000401 	beq	6aa4 <__exidx_end+0x118c>
    5a9c:	00000aab 	andeq	r0, r0, fp, lsr #21
    5aa0:	e4033803 	str	r3, [r3], #-2051	; 0xfffff7fd
    5aa4:	01000001 	tsteq	r0, r1
    5aa8:	06000004 	streq	r0, [r0], -r4
    5aac:	00000667 	andeq	r0, r0, r7, ror #12
    5ab0:	e4073a03 	str	r3, [r7], #-2563	; 0xfffff5fd
    5ab4:	01000001 	tsteq	r0, r1
    5ab8:	00090706 	andeq	r0, r9, r6, lsl #14
    5abc:	033c0300 	teqeq	ip, #0, 6
    5ac0:	000001e4 	andeq	r0, r0, r4, ror #3
    5ac4:	0f380602 	svceq	0x00380602
    5ac8:	3d030000 	stccc	0, cr0, [r3, #-0]
    5acc:	0001e403 	andeq	lr, r1, r3, lsl #8
    5ad0:	1f060300 	svcne	0x00060300
    5ad4:	03000009 	movweq	r0, #9
    5ad8:	01f5083f 	mvnseq	r0, pc, lsr r8
    5adc:	00040000 	andeq	r0, r4, r0
    5ae0:	00032503 	andeq	r2, r3, r3, lsl #10
    5ae4:	03410300 	movteq	r0, #4864	; 0x1300
    5ae8:	00000212 	andeq	r0, r0, r2, lsl r2
    5aec:	0002a009 	andeq	sl, r2, r9
    5af0:	06ca0800 	strbeq	r0, [sl], r0, lsl #16
    5af4:	43030000 	movwmi	r0, #12288	; 0x3000
    5af8:	0002ac1a 	andeq	sl, r2, sl, lsl ip
    5afc:	08010100 	stmdaeq	r1, {r8}
    5b00:	00000197 	muleq	r0, r7, r1
    5b04:	cd0e4503 	cfstr32gt	mvfx4, [lr, #-12]
    5b08:	01000002 	tsteq	r0, r2
    5b0c:	d3040b01 	movwle	r0, #19201	; 0x4b01
    5b10:	02000002 	andeq	r0, r0, #2
    5b14:	0c700801 	ldcleq	8, cr0, [r0], #-4
    5b18:	d3070000 	movwle	r0, #28672	; 0x7000
    5b1c:	08000002 	stmdaeq	r0, {r1}
    5b20:	0000032e 	andeq	r0, r0, lr, lsr #6
    5b24:	cd1e4503 	cfldr32gt	mvfx4, [lr, #-12]
    5b28:	01000002 	tsteq	r0, r2
    5b2c:	04080501 	streq	r0, [r8], #-1281	; 0xfffffaff
    5b30:	031e098f 	tsteq	lr, #2342912	; 0x23c000
    5b34:	d6060000 	strle	r0, [r6], -r0
    5b38:	0400000c 	streq	r0, [r0], #-12
    5b3c:	005f0b90 			; <UNDEFINED> instruction: 0x005f0b90
    5b40:	06000000 	streq	r0, [r0], -r0
    5b44:	00001073 	andeq	r1, r0, r3, ror r0
    5b48:	ce089104 	mvfgte	f1, f4
    5b4c:	04000001 	streq	r0, [r0], #-1
    5b50:	0001bc06 	andeq	fp, r1, r6, lsl #24
    5b54:	10920400 	addsne	r0, r2, r0, lsl #8
    5b58:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5b5c:	ca030006 	bgt	c5b7c <__ccfg+0xa5bd4>
    5b60:	0400000c 	streq	r0, [r0], #-12
    5b64:	02ed0393 	rsceq	r0, sp, #1275068418	; 0x4c000002
    5b68:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    5b6c:	35000003 	strcc	r0, [r0, #-3]
    5b70:	0d000003 	stceq	0, cr0, [r0, #-12]
    5b74:	09490800 	stmdbeq	r9, {fp}^
    5b78:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    5b7c:	00032a0f 	andeq	r2, r3, pc, lsl #20
    5b80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5b84:	09910501 	ldmibeq	r1, {r0, r8, sl}
    5b88:	0000036d 	andeq	r0, r0, sp, ror #6
    5b8c:	0009260a 	andeq	r2, r9, sl, lsl #12
    5b90:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    5b94:	000001e4 	andeq	r0, r0, r4, ror #3
    5b98:	00010701 	andeq	r0, r1, r1, lsl #14
    5b9c:	0005d80a 	andeq	sp, r5, sl, lsl #16
    5ba0:	03940500 	orrseq	r0, r4, #0, 10
    5ba4:	000001e4 	andeq	r0, r0, r4, ror #3
    5ba8:	00000101 	andeq	r0, r0, r1, lsl #2
    5bac:	0ab70300 	beq	fedc67b4 <_estack+0xdedc17b4>
    5bb0:	96050000 	strls	r0, [r5], -r0
    5bb4:	00034303 	andeq	r4, r3, r3, lsl #6
    5bb8:	036d0700 	cmneq	sp, #0, 14
    5bbc:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    5bc0:	89000003 	stmdbhi	r0, {r0, r1}
    5bc4:	0d000003 	stceq	0, cr0, [r0, #-12]
    5bc8:	037e0700 	cmneq	lr, #0, 14
    5bcc:	bd080000 	stclt	0, cr0, [r8, #-0]
    5bd0:	05000003 	streq	r0, [r0, #-3]
    5bd4:	0389179c 	orreq	r1, r9, #156, 14	; 0x2700000
    5bd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5bdc:	0001da0c 	andeq	sp, r1, ip, lsl #20
    5be0:	0003a700 	andeq	sl, r3, r0, lsl #14
    5be4:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5be8:	0000039c 	muleq	r0, ip, r3
    5bec:	00061a08 	andeq	r1, r6, r8, lsl #20
    5bf0:	13060600 	movwne	r0, #26112	; 0x6600
    5bf4:	000003a7 	andeq	r0, r0, r7, lsr #7
    5bf8:	e9080101 	stmdb	r8, {r0, r8}
    5bfc:	04000008 	streq	r0, [r0], #-8
    5c00:	01f50ec3 	mvnseq	r0, r3, asr #29
    5c04:	01010000 	mrseq	r0, (UNDEF: 1)
    5c08:	000c7e0e 	andeq	r7, ip, lr, lsl #28
    5c0c:	016e0700 	cmneq	lr, r0, lsl #14
    5c10:	0003d510 	andeq	sp, r3, r0, lsl r5
    5c14:	db040b00 	blle	10881c <__ccfg+0xe8874>
    5c18:	0f000003 	svceq	0x00000003
    5c1c:	0003e701 	andeq	lr, r3, r1, lsl #14
    5c20:	01ce1000 	biceq	r1, lr, r0
    5c24:	0c000000 	stceq	0, cr0, [r0], {-0}
    5c28:	000002da 	ldrdeq	r0, [r0], -sl
    5c2c:	000003f2 	strdeq	r0, [r0], -r2
    5c30:	e707000d 	str	r0, [r7, -sp]
    5c34:	11000003 	tstne	r0, r3
    5c38:	000009f2 	strdeq	r0, [r0], -r2
    5c3c:	16017f07 	strne	r7, [r1], -r7, lsl #30
    5c40:	000003f2 	strdeq	r0, [r0], -r2
    5c44:	a9110101 	ldmdbge	r1, {r0, r8}
    5c48:	07000003 	streq	r0, [r0, -r3]
    5c4c:	01140182 	tsteq	r4, r2, lsl #3
    5c50:	01000002 	tsteq	r0, r2
    5c54:	03811101 	orreq	r1, r1, #1073741824	; 0x40000000
    5c58:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    5c5c:	01f50e02 	mvnseq	r0, r2, lsl #28
    5c60:	01010000 	mrseq	r0, (UNDEF: 1)
    5c64:	03070812 	movweq	r0, #30738	; 0x7812
    5c68:	044b0903 	strbeq	r0, [fp], #-2307	; 0xfffff6fd
    5c6c:	9f130000 	svcls	0x00130000
    5c70:	0700003c 	smladxeq	r0, ip, r0, r0
    5c74:	ce070307 	cdpgt	3, 0, cr0, cr7, cr7, {0}
    5c78:	00000001 	andeq	r0, r0, r1
    5c7c:	000fcb13 	andeq	ip, pc, r3, lsl fp	; <UNPREDICTABLE>
    5c80:	03080700 	movweq	r0, #34560	; 0x8700
    5c84:	00020608 	andeq	r0, r2, r8, lsl #12
    5c88:	0e000400 	cfcpyseq	mvf0, mvf0
    5c8c:	00000a15 	andeq	r0, r0, r5, lsl sl
    5c90:	03030907 	movweq	r0, #14599	; 0x3907
    5c94:	00000424 	andeq	r0, r0, r4, lsr #8
    5c98:	00002014 	andeq	r2, r0, r4, lsl r0
    5c9c:	0b073000 	bleq	1d1ca4 <__ccfg+0x1b1cfc>
    5ca0:	04bb0803 	ldrteq	r0, [fp], #2051	; 0x803
    5ca4:	22130000 	andscs	r0, r3, #0
    5ca8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    5cac:	ce080314 	mcrgt	3, 0, r0, cr8, cr4, {0}
    5cb0:	00000001 	andeq	r0, r0, r1
    5cb4:	000bf313 	andeq	pc, fp, r3, lsl r3	; <UNPREDICTABLE>
    5cb8:	03150700 	tsteq	r5, #0, 14
    5cbc:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5cc0:	8c130200 	lfmhi	f0, 4, [r3], {-0}
    5cc4:	0700004c 	streq	r0, [r0, -ip, asr #32]
    5cc8:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    5ccc:	04000003 	streq	r0, [r0], #-3
    5cd0:	00475213 	subeq	r5, r7, r3, lsl r2
    5cd4:	03170700 	tsteq	r7, #0, 14
    5cd8:	00020609 	andeq	r0, r2, r9, lsl #12
    5cdc:	0f130800 	svceq	0x00130800
    5ce0:	07000000 	streq	r0, [r0, -r0]
    5ce4:	bb0f0318 	bllt	3c694c <__ccfg+0x3a69a4>
    5ce8:	0c000004 	stceq	0, cr0, [r0], {4}
    5cec:	00096913 	andeq	r6, r9, r3, lsl r9
    5cf0:	03190700 	tsteq	r9, #0, 14
    5cf4:	0004cb15 	andeq	ip, r4, r5, lsl fp
    5cf8:	0c002c00 	stceq	12, cr2, [r0], {-0}
    5cfc:	0000044b 	andeq	r0, r0, fp, asr #8
    5d00:	000004cb 	andeq	r0, r0, fp, asr #9
    5d04:	00008015 	andeq	r8, r0, r5, lsl r0
    5d08:	0b000300 	bleq	6910 <__exidx_end+0xff8>
    5d0c:	00045804 	andeq	r5, r4, r4, lsl #16
    5d10:	0be80e00 	bleq	ffa09518 <_estack+0xdfa04518>
    5d14:	1c070000 	stcne	0, cr0, [r7], {-0}
    5d18:	04581b03 	ldrbeq	r1, [r8], #-2819	; 0xfffff4fd
    5d1c:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    5d20:	0700000b 	streq	r0, [r0, -fp]
    5d24:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    5d28:	01000004 	tsteq	r0, r4
    5d2c:	d1040b01 	tstle	r4, r1, lsl #22
    5d30:	08000004 	stmdaeq	r0, {r2}
    5d34:	0000071b 	andeq	r0, r0, fp, lsl r7
    5d38:	ce131d08 	cdpgt	13, 1, cr1, cr3, cr8, {0}
    5d3c:	01000001 	tsteq	r0, r1
    5d40:	02f60801 	rscseq	r0, r6, #65536	; 0x10000
    5d44:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    5d48:	0001df1a 	andeq	sp, r1, sl, lsl pc
    5d4c:	08010100 	stmdaeq	r1, {r8}
    5d50:	00000c75 	andeq	r0, r0, r5, ror ip
    5d54:	df241e08 	svcle	0x00241e08
    5d58:	01000001 	tsteq	r0, r1
    5d5c:	0c930801 	ldceq	8, cr0, [r3], {1}
    5d60:	22080000 	andcs	r0, r8, #0
    5d64:	0004ed14 	andeq	lr, r4, r4, lsl sp
    5d68:	16010100 	strne	r0, [r1], -r0, lsl #2
    5d6c:	000001c0 	andeq	r0, r0, r0, asr #3
    5d70:	0e021709 	cdpeq	7, 0, cr1, cr2, cr9, {0}
    5d74:	ffa80305 			; <UNDEFINED> instruction: 0xffa80305
    5d78:	00000001 	andeq	r0, r0, r1
    5d7c:	03000005 	movweq	r0, #5
    5d80:	00143200 	andseq	r3, r4, r0, lsl #4
    5d84:	a3010400 	movwge	r0, #5120	; 0x1400
    5d88:	0c000000 	stceq	0, cr0, [r0], {-0}
    5d8c:	00001be0 	andeq	r1, r0, r0, ror #23
    5d90:	00000e08 	andeq	r0, r0, r8, lsl #28
    5d94:	00000a90 	muleq	r0, r0, sl
    5d98:	00000000 	andeq	r0, r0, r0
    5d9c:	0000407b 	andeq	r4, r0, fp, ror r0
    5da0:	69060102 	stmdbvs	r6, {r1, r8}
    5da4:	0200000c 	andeq	r0, r0, #12
    5da8:	0a770502 	beq	1dc71b8 <__ccfg+0x1da7210>
    5dac:	04020000 	streq	r0, [r2], #-0
    5db0:	00080905 	andeq	r0, r8, r5, lsl #18
    5db4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5db8:	00000804 	andeq	r0, r0, r4, lsl #16
    5dbc:	002a1a03 	eoreq	r1, sl, r3, lsl #20
    5dc0:	182e0400 	stmdane	lr!, {sl}
    5dc4:	0000004d 	andeq	r0, r0, sp, asr #32
    5dc8:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    5dcc:	0300000c 	movweq	r0, #12
    5dd0:	00002e10 	andeq	r2, r0, r0, lsl lr
    5dd4:	60193104 	andsvs	r3, r9, r4, lsl #2
    5dd8:	02000000 	andeq	r0, r0, #0
    5ddc:	0d640702 	stcleq	7, cr0, [r4, #-8]!
    5de0:	b2030000 	andlt	r0, r3, #0
    5de4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    5de8:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5dec:	04020000 	streq	r0, [r2], #-0
    5df0:	00043907 	andeq	r3, r4, r7, lsl #18
    5df4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5df8:	00000434 	andeq	r0, r0, r4, lsr r4
    5dfc:	69050404 	stmdbvs	r5, {r2, sl}
    5e00:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5e04:	043e0704 	ldrteq	r0, [lr], #-1796	; 0xfffff8fc
    5e08:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    5e0c:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    5e10:	00541227 	subseq	r1, r4, r7, lsr #4
    5e14:	8f050000 	svchi	0x00050000
    5e18:	06000000 	streq	r0, [r0], -r0
    5e1c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5e20:	001dc003 	andseq	ip, sp, r3
    5e24:	122b0500 	eorne	r0, fp, #0, 10
    5e28:	00000041 	andeq	r0, r0, r1, asr #32
    5e2c:	0000a506 	andeq	sl, r0, r6, lsl #10
    5e30:	00a50500 	adceq	r0, r5, r0, lsl #10
    5e34:	4b030000 	blmi	c5e3c <__ccfg+0xa5e94>
    5e38:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    5e3c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5e40:	bb050000 	bllt	145e48 <__ccfg+0x125ea0>
    5e44:	03000000 	movweq	r0, #0
    5e48:	00000652 	andeq	r0, r0, r2, asr r6
    5e4c:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5e50:	03000000 	movweq	r0, #0
    5e54:	00000bc0 	andeq	r0, r0, r0, asr #23
    5e58:	e4102e05 	ldr	r2, [r0], #-3589	; 0xfffff1fb
    5e5c:	07000000 	streq	r0, [r0, -r0]
    5e60:	00008f04 	andeq	r8, r0, r4, lsl #30
    5e64:	05080800 	streq	r0, [r8, #-2048]	; 0xfffff800
    5e68:	01780932 	cmneq	r8, r2, lsr r9
    5e6c:	2b090000 	blcs	245e74 <__ccfg+0x225ecc>
    5e70:	05000000 	streq	r0, [r0, #-0]
    5e74:	00a50734 	adceq	r0, r5, r4, lsr r7
    5e78:	01010000 	mrseq	r0, (UNDEF: 1)
    5e7c:	58090007 	stmdapl	r9, {r0, r1, r2}
    5e80:	05000006 	streq	r0, [r0, #-6]
    5e84:	00a50335 	adceq	r0, r5, r5, lsr r3
    5e88:	01010000 	mrseq	r0, (UNDEF: 1)
    5e8c:	ef090006 	svc	0x00090006
    5e90:	05000002 	streq	r0, [r0, #-2]
    5e94:	00a50336 	adceq	r0, r5, r6, lsr r3
    5e98:	01010000 	mrseq	r0, (UNDEF: 1)
    5e9c:	c3090005 	movwgt	r0, #36869	; 0x9005
    5ea0:	05000006 	streq	r0, [r0, #-6]
    5ea4:	00a50337 	adceq	r0, r5, r7, lsr r3
    5ea8:	01010000 	mrseq	r0, (UNDEF: 1)
    5eac:	ab090004 	blge	245ec4 <__ccfg+0x225f1c>
    5eb0:	0500000a 	streq	r0, [r0, #-10]
    5eb4:	00a50338 	adceq	r0, r5, r8, lsr r3
    5eb8:	04010000 	streq	r0, [r1], #-0
    5ebc:	670a0000 	strvs	r0, [sl, -r0]
    5ec0:	05000006 	streq	r0, [r0, #-6]
    5ec4:	00a5073a 	adceq	r0, r5, sl, lsr r7
    5ec8:	0a010000 	beq	45ed0 <__ccfg+0x25f28>
    5ecc:	00000907 	andeq	r0, r0, r7, lsl #18
    5ed0:	a5033c05 	strge	r3, [r3, #-3077]	; 0xfffff3fb
    5ed4:	02000000 	andeq	r0, r0, #0
    5ed8:	000f380a 	andeq	r3, pc, sl, lsl #16
    5edc:	033d0500 	teqeq	sp, #0, 10
    5ee0:	000000a5 	andeq	r0, r0, r5, lsr #1
    5ee4:	091f0a03 	ldmdbeq	pc, {r0, r1, r9, fp}	; <UNPREDICTABLE>
    5ee8:	3f050000 	svccc	0x00050000
    5eec:	0000bb08 	andeq	fp, r0, r8, lsl #22
    5ef0:	03000400 	movweq	r0, #1024	; 0x400
    5ef4:	00000325 	andeq	r0, r0, r5, lsr #6
    5ef8:	ea034105 	b	d6314 <__ccfg+0xb636c>
    5efc:	06000000 	streq	r0, [r0], -r0
    5f00:	00000178 	andeq	r0, r0, r8, ror r1
    5f04:	0006ca0b 	andeq	ip, r6, fp, lsl #20
    5f08:	1a430500 	bne	10c7310 <__ccfg+0x10a7368>
    5f0c:	00000184 	andeq	r0, r0, r4, lsl #3
    5f10:	970b0101 	strls	r0, [fp, -r1, lsl #2]
    5f14:	05000001 	streq	r0, [r0, #-1]
    5f18:	01a50e45 			; <UNDEFINED> instruction: 0x01a50e45
    5f1c:	01010000 	mrseq	r0, (UNDEF: 1)
    5f20:	01ab0407 			; <UNDEFINED> instruction: 0x01ab0407
    5f24:	01020000 	mrseq	r0, (UNDEF: 2)
    5f28:	000c7008 	andeq	r7, ip, r8
    5f2c:	01ab0500 			; <UNDEFINED> instruction: 0x01ab0500
    5f30:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    5f34:	05000003 	streq	r0, [r0, #-3]
    5f38:	01a51e45 			; <UNDEFINED> instruction: 0x01a51e45
    5f3c:	01010000 	mrseq	r0, (UNDEF: 1)
    5f40:	8f060808 	svchi	0x00060808
    5f44:	0001f609 	andeq	pc, r1, r9, lsl #12
    5f48:	0cd60a00 	vldmiaeq	r6, {s1-s0}
    5f4c:	90060000 	andls	r0, r6, r0
    5f50:	0000670b 	andeq	r6, r0, fp, lsl #14
    5f54:	730a0000 	movwvc	r0, #40960	; 0xa000
    5f58:	06000010 			; <UNDEFINED> instruction: 0x06000010
    5f5c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    5f60:	0a040000 	beq	105f68 <__ccfg+0xe5fc0>
    5f64:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    5f68:	b1109206 	tstlt	r0, r6, lsl #4
    5f6c:	06000000 	streq	r0, [r0], -r0
    5f70:	0cca0300 	stcleq	3, cr0, [sl], {0}
    5f74:	93060000 	movwls	r0, #24576	; 0x6000
    5f78:	0001c503 	andeq	ip, r1, r3, lsl #10
    5f7c:	01f60c00 	mvnseq	r0, r0, lsl #24
    5f80:	020d0000 	andeq	r0, sp, #0
    5f84:	000d0000 	andeq	r0, sp, r0
    5f88:	0009490b 	andeq	r4, r9, fp, lsl #18
    5f8c:	0f990600 	svceq	0x00990600
    5f90:	00000202 	andeq	r0, r0, r2, lsl #4
    5f94:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5f98:	000000b6 	strheq	r0, [r0], -r6
    5f9c:	91070108 	tstls	r7, r8, lsl #2
    5fa0:	00024b09 	andeq	r4, r2, r9, lsl #22
    5fa4:	09260900 	stmdbeq	r6!, {r8, fp}
    5fa8:	93070000 	movwls	r0, #28672	; 0x7000
    5fac:	0000a507 	andeq	sl, r0, r7, lsl #10
    5fb0:	01070100 	mrseq	r0, (UNDEF: 23)
    5fb4:	05d80900 	ldrbeq	r0, [r8, #2304]	; 0x900
    5fb8:	94070000 	strls	r0, [r7], #-0
    5fbc:	0000a503 	andeq	sl, r0, r3, lsl #10
    5fc0:	00010100 	andeq	r0, r1, r0, lsl #2
    5fc4:	b7030000 	strlt	r0, [r3, -r0]
    5fc8:	0700000a 	streq	r0, [r0, -sl]
    5fcc:	02210396 	eoreq	r0, r1, #1476395010	; 0x58000002
    5fd0:	4b050000 	blmi	145fd8 <__ccfg+0x126030>
    5fd4:	0c000002 	stceq	0, cr0, [r0], {2}
    5fd8:	00000257 	andeq	r0, r0, r7, asr r2
    5fdc:	00000267 	andeq	r0, r0, r7, ror #4
    5fe0:	5c05000d 	stcpl	0, cr0, [r5], {13}
    5fe4:	0b000002 	bleq	5ff4 <__exidx_end+0x6dc>
    5fe8:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    5fec:	67179c07 	ldrvs	r9, [r7, -r7, lsl #24]
    5ff0:	01000002 	tsteq	r0, r2
    5ff4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5ff8:	02850000 	addeq	r0, r5, #0
    5ffc:	000d0000 	andeq	r0, sp, r0
    6000:	00027a05 	andeq	r7, r2, r5, lsl #20
    6004:	061a0b00 	ldreq	r0, [sl], -r0, lsl #22
    6008:	06080000 	streq	r0, [r8], -r0
    600c:	00028513 	andeq	r8, r2, r3, lsl r5
    6010:	0b010100 	bleq	46418 <__ccfg+0x26470>
    6014:	000008e9 	andeq	r0, r0, r9, ror #17
    6018:	bb0ec306 	bllt	3b6c38 <__ccfg+0x396c90>
    601c:	01000000 	mrseq	r0, (UNDEF: 0)
    6020:	0c7e0e01 	ldcleq	14, cr0, [lr], #-4
    6024:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    6028:	02b31001 	adcseq	r1, r3, #1
    602c:	04070000 	streq	r0, [r7], #-0
    6030:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    6034:	02c5010f 	sbceq	r0, r5, #-1073741821	; 0xc0000003
    6038:	8f100000 	svchi	0x00100000
    603c:	00000000 	andeq	r0, r0, r0
    6040:	0001b20c 	andeq	fp, r1, ip, lsl #4
    6044:	0002d000 	andeq	sp, r2, r0
    6048:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    604c:	000002c5 	andeq	r0, r0, r5, asr #5
    6050:	0009f211 	andeq	pc, r9, r1, lsl r2	; <UNPREDICTABLE>
    6054:	017f0900 	cmneq	pc, r0, lsl #18
    6058:	0002d016 	andeq	sp, r2, r6, lsl r0
    605c:	11010100 	mrsne	r0, (UNDEF: 17)
    6060:	000003a9 	andeq	r0, r0, r9, lsr #7
    6064:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    6068:	000000c7 	andeq	r0, r0, r7, asr #1
    606c:	81110101 	tsthi	r1, r1, lsl #2
    6070:	09000003 	stmdbeq	r0, {r0, r1}
    6074:	bb0e02d8 	bllt	386bdc <__ccfg+0x366c34>
    6078:	01000000 	mrseq	r0, (UNDEF: 0)
    607c:	09081201 	stmdbeq	r8, {r0, r9, ip}
    6080:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    6084:	13000003 	movwne	r0, #3
    6088:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    608c:	07030709 	streq	r0, [r3, -r9, lsl #14]
    6090:	0000008f 	andeq	r0, r0, pc, lsl #1
    6094:	0fcb1300 	svceq	0x00cb1300
    6098:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    609c:	00cc0803 	sbceq	r0, ip, r3, lsl #16
    60a0:	00040000 	andeq	r0, r4, r0
    60a4:	000a150e 	andeq	r1, sl, lr, lsl #10
    60a8:	03090900 	movweq	r0, #39168	; 0x9900
    60ac:	00030203 	andeq	r0, r3, r3, lsl #4
    60b0:	00201400 	eoreq	r1, r0, r0, lsl #8
    60b4:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    60b8:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    60bc:	13000003 	movwne	r0, #3
    60c0:	00001f22 	andeq	r1, r0, r2, lsr #30
    60c4:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    60c8:	0000008f 	andeq	r0, r0, pc, lsl #1
    60cc:	0bf31300 	bleq	ffccacd4 <_estack+0xdfcc5cd4>
    60d0:	15090000 	strne	r0, [r9, #-0]
    60d4:	008f0803 	addeq	r0, pc, r3, lsl #16
    60d8:	13020000 	movwne	r0, #8192	; 0x2000
    60dc:	00004c8c 	andeq	r4, r0, ip, lsl #25
    60e0:	0b031609 	bleq	cb90c <__ccfg+0xab964>
    60e4:	000002a6 	andeq	r0, r0, r6, lsr #5
    60e8:	47521304 	ldrbmi	r1, [r2, -r4, lsl #6]
    60ec:	17090000 	strne	r0, [r9, -r0]
    60f0:	00cc0903 	sbceq	r0, ip, r3, lsl #18
    60f4:	13080000 	movwne	r0, #32768	; 0x8000
    60f8:	0000000f 	andeq	r0, r0, pc
    60fc:	0f031809 	svceq	0x00031809
    6100:	00000399 	muleq	r0, r9, r3
    6104:	0969130c 	stmdbeq	r9!, {r2, r3, r8, r9, ip}^
    6108:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    610c:	03a91503 			; <UNDEFINED> instruction: 0x03a91503
    6110:	002c0000 	eoreq	r0, ip, r0
    6114:	0003290c 	andeq	r2, r3, ip, lsl #18
    6118:	0003a900 	andeq	sl, r3, r0, lsl #18
    611c:	00881500 	addeq	r1, r8, r0, lsl #10
    6120:	00030000 	andeq	r0, r3, r0
    6124:	03360407 	teqeq	r6, #117440512	; 0x7000000
    6128:	e80e0000 	stmda	lr, {}	; <UNPREDICTABLE>
    612c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6130:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    6134:	11000003 	tstne	r0, r3
    6138:	00000bc8 	andeq	r0, r0, r8, asr #23
    613c:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    6140:	000003cb 	andeq	r0, r0, fp, asr #7
    6144:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    6148:	000003af 	andeq	r0, r0, pc, lsr #7
    614c:	00071b0b 	andeq	r1, r7, fp, lsl #22
    6150:	131d0a00 	tstne	sp, #0, 20
    6154:	0000008f 	andeq	r0, r0, pc, lsl #1
    6158:	f60b0101 			; <UNDEFINED> instruction: 0xf60b0101
    615c:	0a000002 	beq	616c <__exidx_end+0x854>
    6160:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    6164:	01010000 	mrseq	r0, (UNDEF: 1)
    6168:	000c750b 	andeq	r7, ip, fp, lsl #10
    616c:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    6170:	000000a0 	andeq	r0, r0, r0, lsr #1
    6174:	930b0101 	movwls	r0, #45313	; 0xb101
    6178:	0a00000c 	beq	61b0 <__exidx_end+0x898>
    617c:	03cb1422 	biceq	r1, fp, #570425344	; 0x22000000
    6180:	01010000 	mrseq	r0, (UNDEF: 1)
    6184:	00026c16 	andeq	r6, r2, r6, lsl ip
    6188:	100d0100 	andne	r0, sp, r0, lsl #2
    618c:	4f150305 	svcmi	0x00150305
    6190:	01170000 	tsteq	r7, r0
    6194:	00001c2a 	andeq	r1, r0, sl, lsr #24
    6198:	01061101 	tsteq	r6, r1, lsl #2
	...
    61a4:	04bb9c01 	ldrteq	r9, [fp], #3073	; 0xc01
    61a8:	73180000 	tstvc	r8, #0
    61ac:	11010074 	tstne	r1, r4, ror r0
    61b0:	00008f1c 	andeq	r8, r0, ip, lsl pc
    61b4:	0021f900 	eoreq	pc, r1, r0, lsl #18
    61b8:	1c251900 			; <UNDEFINED> instruction: 0x1c251900
    61bc:	11010000 	mrsne	r0, (UNDEF: 1)
    61c0:	00021b2c 	andeq	r1, r2, ip, lsr #22
    61c4:	00221700 	eoreq	r1, r2, r0, lsl #14
    61c8:	61761800 	cmnvs	r6, r0, lsl #16
    61cc:	1101006c 	tstne	r1, ip, rrx
    61d0:	0000d83a 	andeq	sp, r0, sl, lsr r8
    61d4:	00223500 	eoreq	r3, r2, r0, lsl #10
    61d8:	00701a00 	rsbseq	r1, r0, r0, lsl #20
    61dc:	bb121301 	bllt	48ade8 <__ccfg+0x46ae40>
    61e0:	1b000004 	blne	61f8 <__exidx_end+0x8e0>
    61e4:	14010069 	strne	r0, [r1], #-105	; 0xffffff97
    61e8:	00008f07 	andeq	r8, r0, r7, lsl #30
    61ec:	00225300 	eoreq	r5, r2, r0, lsl #6
    61f0:	00761a00 	rsbseq	r1, r6, r0, lsl #20
    61f4:	a5071501 	strge	r1, [r7, #-1281]	; 0xfffffaff
    61f8:	1c000000 	stcne	0, cr0, [r0], {-0}
    61fc:	000004d4 	ldrdeq	r0, [r0], -r4
	...
    6208:	1c031c01 	stcne	12, cr1, [r3], {1}
    620c:	000004de 	ldrdeq	r0, [r0], -lr
	...
    6218:	1d031f01 	stcne	15, cr1, [r3, #-4]
    621c:	000004e8 	andeq	r0, r0, r8, ror #9
    6220:	00000000 	andeq	r0, r0, r0
    6224:	00000a68 	andeq	r0, r0, r8, ror #20
    6228:	1e0b2601 	cfmadd32ne	mvax0, mvfx2, mvfx11, mvfx1
    622c:	000004f6 	strdeq	r0, [r0], -r6
    6230:	00002266 	andeq	r2, r0, r6, ror #4
    6234:	04070000 	streq	r0, [r7], #-0
    6238:	00000257 	andeq	r0, r0, r7, asr r2
    623c:	1c3a011f 	ldfnes	f0, [sl], #-124	; 0xffffff84
    6240:	0f010000 	svceq	0x00010000
    6244:	00000006 	andeq	r0, r0, r6
    6248:	00000000 	andeq	r0, r0, r0
    624c:	209c0100 	addscs	r0, ip, r0, lsl #2
    6250:	0000127c 	andeq	r1, r0, ip, ror r2
    6254:	01355b02 	teqeq	r5, r2, lsl #22
    6258:	0f9c2003 	svceq	0x009c2003
    625c:	50020000 	andpl	r0, r2, r0
    6260:	21030135 	tstcs	r3, r5, lsr r1
    6264:	00001bd3 	ldrdeq	r1, [r0], -r3
    6268:	0101a403 	tsteq	r1, r3, lsl #8
    626c:	00000067 	andeq	r0, r0, r7, rrx
    6270:	111f2203 	tstne	pc, r3, lsl #4
    6274:	a4030000 	strge	r0, [r3], #-0
    6278:	00006718 	andeq	r6, r0, r8, lsl r7
    627c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    6280:	03000004 	movweq	r0, #4
    6284:	00162300 	andseq	r2, r6, r0, lsl #6
    6288:	a3010400 	movwge	r0, #5120	; 0x1400
    628c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6290:	00001c84 	andeq	r1, r0, r4, lsl #25
    6294:	00000e08 	andeq	r0, r0, r8, lsl #28
    6298:	00000b08 	andeq	r0, r0, r8, lsl #22
    629c:	00000000 	andeq	r0, r0, r0
    62a0:	0000431d 	andeq	r4, r0, sp, lsl r3
    62a4:	69060102 	stmdbvs	r6, {r1, r8}
    62a8:	0200000c 	andeq	r0, r0, #12
    62ac:	0a770502 	beq	1dc76bc <__ccfg+0x1da7714>
    62b0:	04020000 	streq	r0, [r2], #-0
    62b4:	00080905 	andeq	r0, r8, r5, lsl #18
    62b8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    62bc:	00000804 	andeq	r0, r0, r4, lsl #16
    62c0:	002a1a03 	eoreq	r1, sl, r3, lsl #20
    62c4:	182e0300 	stmdane	lr!, {r8, r9}
    62c8:	0000004d 	andeq	r0, r0, sp, asr #32
    62cc:	67080102 	strvs	r0, [r8, -r2, lsl #2]
    62d0:	0300000c 	movweq	r0, #12
    62d4:	00002e10 	andeq	r2, r0, r0, lsl lr
    62d8:	60193103 	andsvs	r3, r9, r3, lsl #2
    62dc:	02000000 	andeq	r0, r0, #0
    62e0:	0d640702 	stcleq	7, cr0, [r4, #-8]!
    62e4:	b2030000 	andlt	r0, r3, #0
    62e8:	03000029 	movweq	r0, #41	; 0x29
    62ec:	00731934 	rsbseq	r1, r3, r4, lsr r9
    62f0:	04020000 	streq	r0, [r2], #-0
    62f4:	00043907 	andeq	r3, r4, r7, lsl #18
    62f8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    62fc:	00000434 	andeq	r0, r0, r4, lsr r4
    6300:	69050404 	stmdbvs	r5, {r2, sl}
    6304:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6308:	043e0704 	ldrteq	r0, [lr], #-1796	; 0xfffff8fc
    630c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    6310:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    6314:	00541227 	subseq	r1, r4, r7, lsr #4
    6318:	8f050000 	svchi	0x00050000
    631c:	06000000 	streq	r0, [r0], -r0
    6320:	0000008f 	andeq	r0, r0, pc, lsl #1
    6324:	001dc003 	andseq	ip, sp, r3
    6328:	122b0400 	eorne	r0, fp, #0, 8
    632c:	00000041 	andeq	r0, r0, r1, asr #32
    6330:	0000a506 	andeq	sl, r0, r6, lsl #10
    6334:	294b0300 	stmdbcs	fp, {r8, r9}^
    6338:	2c040000 	stccs	0, cr0, [r4], {-0}
    633c:	00006712 	andeq	r6, r0, r2, lsl r7
    6340:	00b60500 	adcseq	r0, r6, r0, lsl #10
    6344:	52030000 	andpl	r0, r3, #0
    6348:	04000006 	streq	r0, [r0], #-6
    634c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6350:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6354:	61093204 	tstvs	r9, r4, lsl #4
    6358:	08000001 	stmdaeq	r0, {r0}
    635c:	0000002b 	andeq	r0, r0, fp, lsr #32
    6360:	a5073404 	strge	r3, [r7, #-1028]	; 0xfffffbfc
    6364:	01000000 	mrseq	r0, (UNDEF: 0)
    6368:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    636c:	00000658 	andeq	r0, r0, r8, asr r6
    6370:	a5033504 	strge	r3, [r3, #-1284]	; 0xfffffafc
    6374:	01000000 	mrseq	r0, (UNDEF: 0)
    6378:	08000601 	stmdaeq	r0, {r0, r9, sl}
    637c:	000002ef 	andeq	r0, r0, pc, ror #5
    6380:	a5033604 	strge	r3, [r3, #-1540]	; 0xfffff9fc
    6384:	01000000 	mrseq	r0, (UNDEF: 0)
    6388:	08000501 	stmdaeq	r0, {r0, r8, sl}
    638c:	000006c3 	andeq	r0, r0, r3, asr #13
    6390:	a5033704 	strge	r3, [r3, #-1796]	; 0xfffff8fc
    6394:	01000000 	mrseq	r0, (UNDEF: 0)
    6398:	08000401 	stmdaeq	r0, {r0, sl}
    639c:	00000aab 	andeq	r0, r0, fp, lsr #21
    63a0:	a5033804 	strge	r3, [r3, #-2052]	; 0xfffff7fc
    63a4:	01000000 	mrseq	r0, (UNDEF: 0)
    63a8:	09000004 	stmdbeq	r0, {r2}
    63ac:	00000667 	andeq	r0, r0, r7, ror #12
    63b0:	a5073a04 	strge	r3, [r7, #-2564]	; 0xfffff5fc
    63b4:	01000000 	mrseq	r0, (UNDEF: 0)
    63b8:	00090709 	andeq	r0, r9, r9, lsl #14
    63bc:	033c0400 	teqeq	ip, #0, 8
    63c0:	000000a5 	andeq	r0, r0, r5, lsr #1
    63c4:	0f380902 	svceq	0x00380902
    63c8:	3d040000 	stccc	0, cr0, [r4, #-0]
    63cc:	0000a503 	andeq	sl, r0, r3, lsl #10
    63d0:	1f090300 	svcne	0x00090300
    63d4:	04000009 	streq	r0, [r0], #-9
    63d8:	00b6083f 	adcseq	r0, r6, pc, lsr r8
    63dc:	00040000 	andeq	r0, r4, r0
    63e0:	00032503 	andeq	r2, r3, r3, lsl #10
    63e4:	03410400 	movteq	r0, #5120	; 0x1400
    63e8:	000000d3 	ldrdeq	r0, [r0], -r3
    63ec:	00016106 	andeq	r6, r1, r6, lsl #2
    63f0:	06ca0a00 	strbeq	r0, [sl], r0, lsl #20
    63f4:	43040000 	movwmi	r0, #16384	; 0x4000
    63f8:	00016d1a 	andeq	r6, r1, sl, lsl sp
    63fc:	0a010100 	beq	46804 <__ccfg+0x2685c>
    6400:	00000197 	muleq	r0, r7, r1
    6404:	8e0e4504 	cfsh32hi	mvfx4, mvfx14, #4
    6408:	01000001 	tsteq	r0, r1
    640c:	94040b01 	strls	r0, [r4], #-2817	; 0xfffff4ff
    6410:	02000001 	andeq	r0, r0, #1
    6414:	0c700801 	ldcleq	8, cr0, [r0], #-4
    6418:	94050000 	strls	r0, [r5], #-0
    641c:	0a000001 	beq	6428 <__exidx_end+0xb10>
    6420:	0000032e 	andeq	r0, r0, lr, lsr #6
    6424:	8e1e4504 	cfmul32hi	mvfx4, mvfx14, mvfx4
    6428:	01000001 	tsteq	r0, r1
    642c:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
    6430:	01df098f 	bicseq	r0, pc, pc, lsl #19
    6434:	d6090000 	strle	r0, [r9], -r0
    6438:	0500000c 	streq	r0, [r0, #-12]
    643c:	00670b90 	mlseq	r7, r0, fp, r0
    6440:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6444:	00001073 	andeq	r1, r0, r3, ror r0
    6448:	8f089105 	svchi	0x00089105
    644c:	04000000 	streq	r0, [r0], #-0
    6450:	0001bc09 	andeq	fp, r1, r9, lsl #24
    6454:	10920500 	addsne	r0, r2, r0, lsl #10
    6458:	000000b1 	strheq	r0, [r0], -r1
    645c:	ca030006 	bgt	c647c <__ccfg+0xa64d4>
    6460:	0500000c 	streq	r0, [r0, #-12]
    6464:	01ae0393 			; <UNDEFINED> instruction: 0x01ae0393
    6468:	df0c0000 	svcle	0x000c0000
    646c:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    6470:	0d000001 	stceq	0, cr0, [r0, #-4]
    6474:	09490a00 	stmdbeq	r9, {r9, fp}^
    6478:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    647c:	0001eb0f 	andeq	lr, r1, pc, lsl #22
    6480:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6484:	09910601 	ldmibeq	r1, {r0, r9, sl}
    6488:	0000022e 	andeq	r0, r0, lr, lsr #4
    648c:	00092608 	andeq	r2, r9, r8, lsl #12
    6490:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    6494:	000000a5 	andeq	r0, r0, r5, lsr #1
    6498:	00010701 	andeq	r0, r1, r1, lsl #14
    649c:	0005d808 	andeq	sp, r5, r8, lsl #16
    64a0:	03940600 	orrseq	r0, r4, #0, 12
    64a4:	000000a5 	andeq	r0, r0, r5, lsr #1
    64a8:	00000101 	andeq	r0, r0, r1, lsl #2
    64ac:	0ab70300 	beq	fedc70b4 <_estack+0xdedc20b4>
    64b0:	96060000 	strls	r0, [r6], -r0
    64b4:	00020403 	andeq	r0, r2, r3, lsl #8
    64b8:	022e0500 	eoreq	r0, lr, #0, 10
    64bc:	3a0c0000 	bcc	3064c4 <__ccfg+0x2e651c>
    64c0:	4a000002 	bmi	64d0 <__exidx_end+0xbb8>
    64c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    64c8:	023f0500 	eorseq	r0, pc, #0, 10
    64cc:	bd0a0000 	stclt	0, cr0, [sl, #-0]
    64d0:	06000003 	streq	r0, [r0], -r3
    64d4:	024a179c 	subeq	r1, sl, #156, 14	; 0x2700000
    64d8:	01010000 	mrseq	r0, (UNDEF: 1)
    64dc:	00009b0c 	andeq	r9, r0, ip, lsl #22
    64e0:	00026800 	andeq	r6, r2, r0, lsl #16
    64e4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    64e8:	0000025d 	andeq	r0, r0, sp, asr r2
    64ec:	00061a0a 	andeq	r1, r6, sl, lsl #20
    64f0:	13060700 	movwne	r0, #26368	; 0x6700
    64f4:	00000268 	andeq	r0, r0, r8, ror #4
    64f8:	e90a0101 	stmdb	sl, {r0, r8}
    64fc:	05000008 	streq	r0, [r0, #-8]
    6500:	00b60ec3 	adcseq	r0, r6, r3, asr #29
    6504:	01010000 	mrseq	r0, (UNDEF: 1)
    6508:	000c7e0e 	andeq	r7, ip, lr, lsl #28
    650c:	016e0800 	cmneq	lr, r0, lsl #16
    6510:	00029610 	andeq	r9, r2, r0, lsl r6
    6514:	9c040b00 			; <UNDEFINED> instruction: 0x9c040b00
    6518:	0f000002 	svceq	0x00000002
    651c:	0002a801 	andeq	sl, r2, r1, lsl #16
    6520:	008f1000 	addeq	r1, pc, r0
    6524:	0c000000 	stceq	0, cr0, [r0], {-0}
    6528:	0000019b 	muleq	r0, fp, r1
    652c:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6530:	a805000d 	stmdage	r5, {r0, r2, r3}
    6534:	11000002 	tstne	r0, r2
    6538:	000009f2 	strdeq	r0, [r0], -r2
    653c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    6540:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6544:	a9110101 	ldmdbge	r1, {r0, r8}
    6548:	08000003 	stmdaeq	r0, {r0, r1}
    654c:	c2140182 	andsgt	r0, r4, #-2147483616	; 0x80000020
    6550:	01000000 	mrseq	r0, (UNDEF: 0)
    6554:	03811101 	orreq	r1, r1, #1073741824	; 0x40000000
    6558:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    655c:	00b60e02 	adcseq	r0, r6, r2, lsl #28
    6560:	01010000 	mrseq	r0, (UNDEF: 1)
    6564:	03080812 	movweq	r0, #34834	; 0x8812
    6568:	030c0903 	movweq	r0, #51459	; 0xc903
    656c:	9f130000 	svcls	0x00130000
    6570:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    6574:	8f070307 	svchi	0x00070307
    6578:	00000000 	andeq	r0, r0, r0
    657c:	000fcb13 	andeq	ip, pc, r3, lsl fp	; <UNPREDICTABLE>
    6580:	03080800 	movweq	r0, #34816	; 0x8800
    6584:	0000c708 	andeq	ip, r0, r8, lsl #14
    6588:	0e000400 	cfcpyseq	mvf0, mvf0
    658c:	00000a15 	andeq	r0, r0, r5, lsl sl
    6590:	03030908 	movweq	r0, #14600	; 0x3908
    6594:	000002e5 	andeq	r0, r0, r5, ror #5
    6598:	00002014 	andeq	r2, r0, r4, lsl r0
    659c:	0b083000 	bleq	2125a4 <__ccfg+0x1f25fc>
    65a0:	037c0803 	cmneq	ip, #196608	; 0x30000
    65a4:	22130000 	andscs	r0, r3, #0
    65a8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    65ac:	8f080314 	svchi	0x00080314
    65b0:	00000000 	andeq	r0, r0, r0
    65b4:	000bf313 	andeq	pc, fp, r3, lsl r3	; <UNPREDICTABLE>
    65b8:	03150800 	tsteq	r5, #0, 16
    65bc:	00008f08 	andeq	r8, r0, r8, lsl #30
    65c0:	8c130200 	lfmhi	f0, 4, [r3], {-0}
    65c4:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    65c8:	890b0316 	stmdbhi	fp, {r1, r2, r4, r8, r9}
    65cc:	04000002 	streq	r0, [r0], #-2
    65d0:	00475213 	subeq	r5, r7, r3, lsl r2
    65d4:	03170800 	tsteq	r7, #0, 16
    65d8:	0000c709 	andeq	ip, r0, r9, lsl #14
    65dc:	0f130800 	svceq	0x00130800
    65e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    65e4:	7c0f0318 	stcvc	3, cr0, [pc], {24}
    65e8:	0c000003 	stceq	0, cr0, [r0], {3}
    65ec:	00096913 	andeq	r6, r9, r3, lsl r9
    65f0:	03190800 	tsteq	r9, #0, 16
    65f4:	00038c15 	andeq	r8, r3, r5, lsl ip
    65f8:	0c002c00 	stceq	12, cr2, [r0], {-0}
    65fc:	0000030c 	andeq	r0, r0, ip, lsl #6
    6600:	0000038c 	andeq	r0, r0, ip, lsl #7
    6604:	00008815 	andeq	r8, r0, r5, lsl r8
    6608:	0b000300 	bleq	7210 <__exidx_end+0x18f8>
    660c:	00031904 	andeq	r1, r3, r4, lsl #18
    6610:	0be80e00 	bleq	ffa09e18 <_estack+0xdfa04e18>
    6614:	1c080000 	stcne	0, cr0, [r8], {-0}
    6618:	03191b03 	tsteq	r9, #3072	; 0xc00
    661c:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    6620:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6624:	ae14031e 	mrcge	3, 0, r0, cr4, cr14, {0}
    6628:	01000003 	tsteq	r0, r3
    662c:	92040b01 	andls	r0, r4, #1024	; 0x400
    6630:	0a000003 	beq	6644 <__exidx_end+0xd2c>
    6634:	0000071b 	andeq	r0, r0, fp, lsl r7
    6638:	8f131d09 	svchi	0x00131d09
    663c:	01000000 	mrseq	r0, (UNDEF: 0)
    6640:	02f60a01 	rscseq	r0, r6, #4096	; 0x1000
    6644:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    6648:	0000a01a 	andeq	sl, r0, sl, lsl r0
    664c:	0a010100 	beq	46a54 <__ccfg+0x26aac>
    6650:	00000c75 	andeq	r0, r0, r5, ror ip
    6654:	a0241e09 	eorge	r1, r4, r9, lsl #28
    6658:	01000000 	mrseq	r0, (UNDEF: 0)
    665c:	0c930a01 	vldmiaeq	r3, {s0}
    6660:	22090000 	andcs	r0, r9, #0
    6664:	0003ae14 	andeq	sl, r3, r4, lsl lr
    6668:	16010100 	strne	r0, [r1], -r0, lsl #2
    666c:	00001c4f 	andeq	r1, r0, pc, asr #24
    6670:	960f0801 	strls	r0, [pc], -r1, lsl #16
    6674:	05000002 	streq	r0, [r0, #-2]
    6678:	00000003 	andeq	r0, r0, r3
    667c:	1c601600 	stclne	6, cr1, [r0], #-0
    6680:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6684:	00008f0d 	andeq	r8, r0, sp, lsl #30
    6688:	00030500 	andeq	r0, r3, r0, lsl #10
    668c:	17000000 	strne	r0, [r0, -r0]
    6690:	0000026d 	andeq	r0, r0, sp, ror #4
    6694:	050c0a01 	streq	r0, [ip, #-2561]	; 0xfffff5ff
    6698:	004f1a03 	subeq	r1, pc, r3, lsl #20
    669c:	75011800 	strvc	r1, [r1, #-2048]	; 0xfffff800
    66a0:	0100001c 	tsteq	r0, ip, lsl r0
    66a4:	00010658 	andeq	r0, r1, r8, asr r6
    66a8:	00000000 	andeq	r0, r0, r0
    66ac:	01000000 	mrseq	r0, (UNDEF: 0)
    66b0:	0004479c 	muleq	r4, ip, r7
    66b4:	63611900 	cmnvs	r1, #0, 18
    66b8:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    66bc:	0002961d 	andeq	r9, r2, sp, lsl r6
    66c0:	00227900 	eoreq	r7, r2, r0, lsl #18
    66c4:	01180000 	tsteq	r8, r0
    66c8:	00001c68 	andeq	r1, r0, r8, ror #24
    66cc:	01011c01 	tsteq	r1, r1, lsl #24
	...
    66d8:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
    66dc:	3f1a0000 	svccc	0x001a0000
    66e0:	0100000c 	tsteq	r0, ip
    66e4:	008f011c 	addeq	r0, pc, ip, lsl r1	; <UNPREDICTABLE>
    66e8:	22b50000 	adcscs	r0, r5, #0
    66ec:	4a1b0000 	bmi	6c66f4 <__ccfg+0x6a674c>
    66f0:	0100001c 	tsteq	r0, ip, lsl r0
    66f4:	00000121 	andeq	r0, r0, r1, lsr #2
    66f8:	571b0000 	ldrpl	r0, [fp, -r0]
    66fc:	0100001c 	tsteq	r0, ip, lsl r0
    6700:	00000130 	andeq	r0, r0, r0, lsr r1
    6704:	ab1b0000 	blge	6c670c <__ccfg+0x6a6764>
    6708:	0100001d 	tsteq	r0, sp, lsl r0
    670c:	00000137 	andeq	r0, r0, r7, lsr r1
    6710:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    6714:	00000004 	andeq	r0, r0, r4
    6718:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    671c:	0100000a 	tsteq	r0, sl
    6720:	04ad072b 	strteq	r0, [sp], #1835	; 0x72b
    6724:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    6728:	00000004 	andeq	r0, r0, r4
    672c:	0004de1c 	andeq	sp, r4, ip, lsl lr
    6730:	00000000 	andeq	r0, r0, r0
    6734:	000ad000 	andeq	sp, sl, r0
    6738:	073e0100 	ldreq	r0, [lr, -r0, lsl #2]!
    673c:	000004c7 	andeq	r0, r0, r7, asr #9
    6740:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    6744:	de1e0000 	cdple	0, 1, cr0, cr14, cr0, {0}
    6748:	00000004 	andeq	r0, r0, r4
    674c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    6750:	0100000a 	tsteq	r0, sl
    6754:	ec1d074a 	ldc	7, cr0, [sp], {74}	; 0x4a
    6758:	00000004 	andeq	r0, r0, r4
    675c:	1bd31f00 	blne	ff4ce364 <_estack+0xdf4c9364>
    6760:	a4020000 	strge	r0, [r2], #-0
    6764:	00670101 	rsbeq	r0, r7, r1, lsl #2
    6768:	20030000 	andcs	r0, r3, r0
    676c:	0000111f 	andeq	r1, r0, pc, lsl r1
    6770:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    6774:	00000000 	andeq	r0, r0, r0
    6778:	000aa700 	andeq	sl, sl, r0, lsl #14
    677c:	ee000300 	cdp	3, 0, cr0, cr0, cr0, {0}
    6780:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    6784:	0000a301 	andeq	sl, r0, r1, lsl #6
    6788:	1d450c00 	stclne	12, cr0, [r5, #-0]
    678c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    6790:	0ca80000 	stceq	0, cr0, [r8]
    6794:	00000000 	andeq	r0, r0, r0
    6798:	46620000 	strbtmi	r0, [r2], -r0
    679c:	01020000 	mrseq	r0, (UNDEF: 2)
    67a0:	000c6906 	andeq	r6, ip, r6, lsl #18
    67a4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    67a8:	00000a77 	andeq	r0, r0, r7, ror sl
    67ac:	09050402 	stmdbeq	r5, {r1, sl}
    67b0:	02000008 	andeq	r0, r0, #8
    67b4:	08040508 	stmdaeq	r4, {r3, r8, sl}
    67b8:	1a030000 	bne	c67c0 <__ccfg+0xa6818>
    67bc:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    67c0:	004d182e 	subeq	r1, sp, lr, lsr #16
    67c4:	01020000 	mrseq	r0, (UNDEF: 2)
    67c8:	000c6708 	andeq	r6, ip, r8, lsl #14
    67cc:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
    67d0:	31040000 	mrscc	r0, (UNDEF: 4)
    67d4:	00006019 	andeq	r6, r0, r9, lsl r0
    67d8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    67dc:	00000d64 	andeq	r0, r0, r4, ror #26
    67e0:	0029b203 	eoreq	fp, r9, r3, lsl #4
    67e4:	19340400 	ldmdbne	r4!, {sl}
    67e8:	00000073 	andeq	r0, r0, r3, ror r0
    67ec:	39070402 	stmdbcc	r7, {r1, sl}
    67f0:	02000004 	andeq	r0, r0, #4
    67f4:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
    67f8:	04040000 	streq	r0, [r4], #-0
    67fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6800:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6804:	0000043e 	andeq	r0, r0, lr, lsr r4
    6808:	00132603 	andseq	r2, r3, r3, lsl #12
    680c:	12260500 	eorne	r0, r6, #0, 10
    6810:	00000041 	andeq	r0, r0, r1, asr #32
    6814:	0028f903 	eoreq	pc, r8, r3, lsl #18
    6818:	12270500 	eorne	r0, r7, #0, 10
    681c:	00000054 	andeq	r0, r0, r4, asr r0
    6820:	00009b05 	andeq	r9, r0, r5, lsl #22
    6824:	009b0600 	addseq	r0, fp, r0, lsl #12
    6828:	c0030000 	andgt	r0, r3, r0
    682c:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    6830:	0041122b 	subeq	r1, r1, fp, lsr #4
    6834:	b1060000 	mrslt	r0, (UNDEF: 6)
    6838:	05000000 	streq	r0, [r0, #-0]
    683c:	000000b1 	strheq	r0, [r0], -r1
    6840:	00294b03 	eoreq	r4, r9, r3, lsl #22
    6844:	122c0500 	eorne	r0, ip, #0, 10
    6848:	00000067 	andeq	r0, r0, r7, rrx
    684c:	0000c705 	andeq	ip, r0, r5, lsl #14
    6850:	06520300 	ldrbeq	r0, [r2], -r0, lsl #6
    6854:	2d050000 	stccs	0, cr0, [r5, #-0]
    6858:	00006712 	andeq	r6, r0, r2, lsl r7
    685c:	05080700 	streq	r0, [r8, #-1792]	; 0xfffff900
    6860:	01720932 	cmneq	r2, r2, lsr r9
    6864:	2b080000 	blcs	20686c <__ccfg+0x1e68c4>
    6868:	05000000 	streq	r0, [r0, #-0]
    686c:	00b10734 	adcseq	r0, r1, r4, lsr r7
    6870:	01010000 	mrseq	r0, (UNDEF: 1)
    6874:	58080007 	stmdapl	r8, {r0, r1, r2}
    6878:	05000006 	streq	r0, [r0, #-6]
    687c:	00b10335 	adcseq	r0, r1, r5, lsr r3
    6880:	01010000 	mrseq	r0, (UNDEF: 1)
    6884:	ef080006 	svc	0x00080006
    6888:	05000002 	streq	r0, [r0, #-2]
    688c:	00b10336 	adcseq	r0, r1, r6, lsr r3
    6890:	01010000 	mrseq	r0, (UNDEF: 1)
    6894:	c3080005 	movwgt	r0, #32773	; 0x8005
    6898:	05000006 	streq	r0, [r0, #-6]
    689c:	00b10337 	adcseq	r0, r1, r7, lsr r3
    68a0:	01010000 	mrseq	r0, (UNDEF: 1)
    68a4:	ab080004 	blge	2068bc <__ccfg+0x1e6914>
    68a8:	0500000a 	streq	r0, [r0, #-10]
    68ac:	00b10338 	adcseq	r0, r1, r8, lsr r3
    68b0:	04010000 	streq	r0, [r1], #-0
    68b4:	67090000 	strvs	r0, [r9, -r0]
    68b8:	05000006 	streq	r0, [r0, #-6]
    68bc:	00b1073a 	adcseq	r0, r1, sl, lsr r7
    68c0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    68c4:	00000907 	andeq	r0, r0, r7, lsl #18
    68c8:	b1033c05 	tstlt	r3, r5, lsl #24
    68cc:	02000000 	andeq	r0, r0, #0
    68d0:	000f3809 	andeq	r3, pc, r9, lsl #16
    68d4:	033d0500 	teqeq	sp, #0, 10
    68d8:	000000b1 	strheq	r0, [r0], -r1
    68dc:	091f0903 	ldmdbeq	pc, {r0, r1, r8, fp}	; <UNPREDICTABLE>
    68e0:	3f050000 	svccc	0x00050000
    68e4:	0000c708 	andeq	ip, r0, r8, lsl #14
    68e8:	03000400 	movweq	r0, #1024	; 0x400
    68ec:	00000325 	andeq	r0, r0, r5, lsr #6
    68f0:	e4034105 	str	r4, [r3], #-261	; 0xfffffefb
    68f4:	06000000 	streq	r0, [r0], -r0
    68f8:	00000172 	andeq	r0, r0, r2, ror r1
    68fc:	0006ca0a 	andeq	ip, r6, sl, lsl #20
    6900:	1a430500 	bne	10c7d08 <__ccfg+0x10a7d60>
    6904:	0000017e 	andeq	r0, r0, lr, ror r1
    6908:	970a0101 	strls	r0, [sl, -r1, lsl #2]
    690c:	05000001 	streq	r0, [r0, #-1]
    6910:	019f0e45 	orrseq	r0, pc, r5, asr #28
    6914:	01010000 	mrseq	r0, (UNDEF: 1)
    6918:	01a5040b 			; <UNDEFINED> instruction: 0x01a5040b
    691c:	01020000 	mrseq	r0, (UNDEF: 2)
    6920:	000c7008 	andeq	r7, ip, r8
    6924:	01a50500 			; <UNDEFINED> instruction: 0x01a50500
    6928:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    692c:	05000003 	streq	r0, [r0, #-3]
    6930:	019f1e45 	orrseq	r1, pc, r5, asr #28
    6934:	01010000 	mrseq	r0, (UNDEF: 1)
    6938:	8f060807 	svchi	0x00060807
    693c:	0001f009 	andeq	pc, r1, r9
    6940:	0cd60900 			; <UNDEFINED> instruction: 0x0cd60900
    6944:	90060000 	andls	r0, r6, r0
    6948:	0000670b 	andeq	r6, r0, fp, lsl #14
    694c:	73090000 	movwvc	r0, #36864	; 0x9000
    6950:	06000010 			; <UNDEFINED> instruction: 0x06000010
    6954:	009b0891 	umullseq	r0, fp, r1, r8
    6958:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    695c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    6960:	bd109206 	lfmlt	f1, 1, [r0, #-24]	; 0xffffffe8
    6964:	06000000 	streq	r0, [r0], -r0
    6968:	0cca0300 	stcleq	3, cr0, [sl], {0}
    696c:	93060000 	movwls	r0, #24576	; 0x6000
    6970:	0001bf03 	andeq	fp, r1, r3, lsl #30
    6974:	01f00c00 	mvnseq	r0, r0, lsl #24
    6978:	02070000 	andeq	r0, r7, #0
    697c:	000d0000 	andeq	r0, sp, r0
    6980:	0009490a 	andeq	r4, r9, sl, lsl #18
    6984:	0f990600 	svceq	0x00990600
    6988:	000001fc 	strdeq	r0, [r0], -ip
    698c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6990:	000000c2 	andeq	r0, r0, r2, asr #1
    6994:	91070107 	tstls	r7, r7, lsl #2
    6998:	00024509 	andeq	r4, r2, r9, lsl #10
    699c:	09260800 	stmdbeq	r6!, {fp}
    69a0:	93070000 	movwls	r0, #28672	; 0x7000
    69a4:	0000b107 	andeq	fp, r0, r7, lsl #2
    69a8:	01070100 	mrseq	r0, (UNDEF: 23)
    69ac:	05d80800 	ldrbeq	r0, [r8, #2048]	; 0x800
    69b0:	94070000 	strls	r0, [r7], #-0
    69b4:	0000b103 	andeq	fp, r0, r3, lsl #2
    69b8:	00010100 	andeq	r0, r1, r0, lsl #2
    69bc:	b7030000 	strlt	r0, [r3, -r0]
    69c0:	0700000a 	streq	r0, [r0, -sl]
    69c4:	021b0396 	andseq	r0, fp, #1476395010	; 0x58000002
    69c8:	45050000 	strmi	r0, [r5, #-0]
    69cc:	0c000002 	stceq	0, cr0, [r0], {2}
    69d0:	00000251 	andeq	r0, r0, r1, asr r2
    69d4:	00000261 	andeq	r0, r0, r1, ror #4
    69d8:	5605000d 	strpl	r0, [r5], -sp
    69dc:	0a000002 	beq	69ec <__exidx_end+0x10d4>
    69e0:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    69e4:	61179c07 	tstvs	r7, r7, lsl #24
    69e8:	01000002 	tsteq	r0, r2
    69ec:	00a70c01 	adceq	r0, r7, r1, lsl #24
    69f0:	027f0000 	rsbseq	r0, pc, #0
    69f4:	000d0000 	andeq	r0, sp, r0
    69f8:	00027405 	andeq	r7, r2, r5, lsl #8
    69fc:	061a0a00 	ldreq	r0, [sl], -r0, lsl #20
    6a00:	06080000 	streq	r0, [r8], -r0
    6a04:	00027f13 	andeq	r7, r2, r3, lsl pc
    6a08:	0a010100 	beq	46e10 <__ccfg+0x26e68>
    6a0c:	000008e9 	andeq	r0, r0, r9, ror #17
    6a10:	c70ec306 	strgt	ip, [lr, -r6, lsl #6]
    6a14:	01000000 	mrseq	r0, (UNDEF: 0)
    6a18:	0c7e0e01 	ldcleq	14, cr0, [lr], #-4
    6a1c:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    6a20:	02ad1001 	adceq	r1, sp, #1
    6a24:	040b0000 	streq	r0, [fp], #-0
    6a28:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6a2c:	02bf010f 	adcseq	r0, pc, #-1073741821	; 0xc0000003
    6a30:	9b100000 	blls	406a38 <__ccfg+0x3e6a90>
    6a34:	00000000 	andeq	r0, r0, r0
    6a38:	0001ac0c 	andeq	sl, r1, ip, lsl #24
    6a3c:	0002ca00 	andeq	ip, r2, r0, lsl #20
    6a40:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6a44:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    6a48:	0009f211 	andeq	pc, r9, r1, lsl r2	; <UNPREDICTABLE>
    6a4c:	017f0900 	cmneq	pc, r0, lsl #18
    6a50:	0002ca16 	andeq	ip, r2, r6, lsl sl
    6a54:	11010100 	mrsne	r0, (UNDEF: 17)
    6a58:	000003a9 	andeq	r0, r0, r9, lsr #7
    6a5c:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    6a60:	000000d3 	ldrdeq	r0, [r0], -r3
    6a64:	81110101 	tsthi	r1, r1, lsl #2
    6a68:	09000003 	stmdbeq	r0, {r0, r1}
    6a6c:	c70e02d8 			; <UNDEFINED> instruction: 0xc70e02d8
    6a70:	01000000 	mrseq	r0, (UNDEF: 0)
    6a74:	09081201 	stmdbeq	r8, {r0, r9, ip}
    6a78:	23090303 	movwcs	r0, #37635	; 0x9303
    6a7c:	13000003 	movwne	r0, #3
    6a80:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    6a84:	07030709 	streq	r0, [r3, -r9, lsl #14]
    6a88:	0000009b 	muleq	r0, fp, r0
    6a8c:	0fcb1300 	svceq	0x00cb1300
    6a90:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    6a94:	00d80803 	sbcseq	r0, r8, r3, lsl #16
    6a98:	00040000 	andeq	r0, r4, r0
    6a9c:	000a150e 	andeq	r1, sl, lr, lsl #10
    6aa0:	03090900 	movweq	r0, #39168	; 0x9900
    6aa4:	0002fc03 	andeq	pc, r2, r3, lsl #24
    6aa8:	00201400 	eoreq	r1, r0, r0, lsl #8
    6aac:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    6ab0:	9308030b 	movwls	r0, #33547	; 0x830b
    6ab4:	13000003 	movwne	r0, #3
    6ab8:	00001f22 	andeq	r1, r0, r2, lsr #30
    6abc:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    6ac0:	0000009b 	muleq	r0, fp, r0
    6ac4:	0bf31300 	bleq	ffccb6cc <_estack+0xdfcc66cc>
    6ac8:	15090000 	strne	r0, [r9, #-0]
    6acc:	009b0803 	addseq	r0, fp, r3, lsl #16
    6ad0:	13020000 	movwne	r0, #8192	; 0x2000
    6ad4:	00004c8c 	andeq	r4, r0, ip, lsl #25
    6ad8:	0b031609 	bleq	cc304 <__ccfg+0xac35c>
    6adc:	000002a0 	andeq	r0, r0, r0, lsr #5
    6ae0:	47521304 	ldrbmi	r1, [r2, -r4, lsl #6]
    6ae4:	17090000 	strne	r0, [r9, -r0]
    6ae8:	00d80903 	sbcseq	r0, r8, r3, lsl #18
    6aec:	13080000 	movwne	r0, #32768	; 0x8000
    6af0:	0000000f 	andeq	r0, r0, pc
    6af4:	0f031809 	svceq	0x00031809
    6af8:	00000393 	muleq	r0, r3, r3
    6afc:	0969130c 	stmdbeq	r9!, {r2, r3, r8, r9, ip}^
    6b00:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    6b04:	03a31503 			; <UNDEFINED> instruction: 0x03a31503
    6b08:	002c0000 	eoreq	r0, ip, r0
    6b0c:	0003230c 	andeq	r2, r3, ip, lsl #6
    6b10:	0003a300 	andeq	sl, r3, r0, lsl #6
    6b14:	00881500 	addeq	r1, r8, r0, lsl #10
    6b18:	00030000 	andeq	r0, r3, r0
    6b1c:	0330040b 	teqeq	r0, #184549376	; 0xb000000
    6b20:	e80e0000 	stmda	lr, {}	; <UNPREDICTABLE>
    6b24:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6b28:	301b031c 	andscc	r0, fp, ip, lsl r3
    6b2c:	11000003 	tstne	r0, r3
    6b30:	00000bc8 	andeq	r0, r0, r8, asr #23
    6b34:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    6b38:	000003c5 	andeq	r0, r0, r5, asr #7
    6b3c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6b40:	000003a9 	andeq	r0, r0, r9, lsr #7
    6b44:	00071b0a 	andeq	r1, r7, sl, lsl #22
    6b48:	131d0a00 	tstne	sp, #0, 20
    6b4c:	0000009b 	muleq	r0, fp, r0
    6b50:	f60a0101 			; <UNDEFINED> instruction: 0xf60a0101
    6b54:	0a000002 	beq	6b64 <__exidx_end+0x124c>
    6b58:	00ac1a1e 	adceq	r1, ip, lr, lsl sl
    6b5c:	01010000 	mrseq	r0, (UNDEF: 1)
    6b60:	000c750a 	andeq	r7, ip, sl, lsl #10
    6b64:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    6b68:	000000ac 	andeq	r0, r0, ip, lsr #1
    6b6c:	930a0101 	movwls	r0, #41217	; 0xa101
    6b70:	0a00000c 	beq	6ba8 <__exidx_end+0x1290>
    6b74:	03c51422 	biceq	r1, r5, #570425344	; 0x22000000
    6b78:	01010000 	mrseq	r0, (UNDEF: 1)
    6b7c:	000bcd16 	andeq	ip, fp, r6, lsl sp
    6b80:	0f0f0100 	svceq	0x000f0100
    6b84:	000000c7 	andeq	r0, r0, r7, asr #1
    6b88:	00000305 	andeq	r0, r0, r5, lsl #6
    6b8c:	f1160000 			; <UNDEFINED> instruction: 0xf1160000
    6b90:	0100000c 	tsteq	r0, ip
    6b94:	00c7150f 	sbceq	r1, r7, pc, lsl #10
    6b98:	03050000 	movweq	r0, #20480	; 0x5000
    6b9c:	00000000 	andeq	r0, r0, r0
    6ba0:	001d9716 	andseq	r9, sp, r6, lsl r7
    6ba4:	14100100 	ldrne	r0, [r0], #-256	; 0xffffff00
    6ba8:	00000215 	andeq	r0, r0, r5, lsl r2
    6bac:	00000305 	andeq	r0, r0, r5, lsl #6
    6bb0:	fb160000 	blx	586bba <__ccfg+0x566c12>
    6bb4:	0100001c 	tsteq	r0, ip, lsl r0
    6bb8:	00b10d12 	adcseq	r0, r1, r2, lsl sp
    6bbc:	03050000 	movweq	r0, #20480	; 0x5000
    6bc0:	200005e8 	andcs	r0, r0, r8, ror #11
    6bc4:	001d3f16 	andseq	r3, sp, r6, lsl pc
    6bc8:	03130100 	tsteq	r3, #0, 2
    6bcc:	000000b1 	strheq	r0, [r0], -r1
    6bd0:	05e90305 	strbeq	r0, [r9, #773]!	; 0x305
    6bd4:	58162000 	ldmdapl	r6, {sp}
    6bd8:	01000016 	tsteq	r0, r6, lsl r0
    6bdc:	009b0d15 	addseq	r0, fp, r5, lsl sp
    6be0:	03050000 	movweq	r0, #20480	; 0x5000
    6be4:	00000000 	andeq	r0, r0, r0
    6be8:	1cc70117 	stfnee	f0, [r7], {23}
    6bec:	13030000 	movwne	r0, #12288	; 0x3000
    6bf0:	00000006 	andeq	r0, r0, r6
    6bf4:	00000000 	andeq	r0, r0, r0
    6bf8:	189c0100 	ldmne	ip, {r8}
    6bfc:	001d9c01 	andseq	r9, sp, r1, lsl #24
    6c00:	07080300 	streq	r0, [r8, -r0, lsl #6]
    6c04:	0000c701 	andeq	ip, r0, r1, lsl #14
	...
    6c10:	bc9c0100 	ldflts	f0, [ip], {0}
    6c14:	19000004 	stmdbne	r0, {r2}
    6c18:	03007265 	movweq	r7, #613	; 0x265
    6c1c:	04bc1908 	ldrteq	r1, [ip], #2312	; 0x908
    6c20:	22e90000 	rsccs	r0, r9, #0
    6c24:	651a0000 	ldrvs	r0, [sl, #-0]
    6c28:	03007572 	movweq	r7, #1394	; 0x572
    6c2c:	04c22408 	strbeq	r2, [r2], #1032	; 0x408
    6c30:	51010000 	mrspl	r0, (UNDEF: 1)
    6c34:	8f040b00 	svchi	0x00040b00
    6c38:	0b000000 	bleq	6c40 <__exidx_end+0x1328>
    6c3c:	0000c704 	andeq	ip, r0, r4, lsl #14
    6c40:	1e011b00 	vmlane.f64	d1, d1, d0
    6c44:	0100001d 	tsteq	r0, sp, lsl r0
    6c48:	01060160 	tsteq	r6, r0, ror #2
    6c4c:	0000009b 	muleq	r0, fp, r0
	...
    6c58:	04f69c01 	ldrbteq	r9, [r6], #3073	; 0xc01
    6c5c:	731c0000 	tstvc	ip, #0
    6c60:	60010074 	andvs	r0, r1, r4, ror r0
    6c64:	009b1401 	addseq	r1, fp, r1, lsl #8
    6c68:	22fc0000 	rscscs	r0, ip, #0
    6c6c:	1d000000 	stcne	0, cr0, [r0, #-0]
    6c70:	001d1501 	andseq	r1, sp, r1, lsl #10
    6c74:	015b0100 	cmpeq	fp, r0, lsl #2
    6c78:	00000006 	andeq	r0, r0, r6
    6c7c:	00000000 	andeq	r0, r0, r0
    6c80:	1b9c0100 	blne	fe707088 <_estack+0xde702088>
    6c84:	001cf201 	andseq	pc, ip, r1, lsl #4
    6c88:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c8c:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6c98:	9c010000 	stcls	0, cr0, [r1], {-0}
    6c9c:	000005c0 	andeq	r0, r0, r0, asr #11
    6ca0:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    6ca4:	15012101 	strne	r2, [r1, #-257]	; 0xfffffeff
    6ca8:	0000009b 	muleq	r0, fp, r0
    6cac:	0000230f 	andeq	r2, r0, pc, lsl #6
    6cb0:	0100611c 	tsteq	r0, ip, lsl r1
    6cb4:	c71f0121 	ldrgt	r0, [pc, -r1, lsr #2]
    6cb8:	22000000 	andcs	r0, r0, #0
    6cbc:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    6cc0:	21010073 	tstcs	r1, r3, ror r0
    6cc4:	02152e01 	andseq	r2, r5, #1, 28
    6cc8:	23400000 	movtcs	r0, #0
    6ccc:	6c1c0000 	ldcvs	0, cr0, [ip], {-0}
    6cd0:	01006e65 	tsteq	r0, r5, ror #28
    6cd4:	9b360121 	blls	d87160 <__ccfg+0xd671b8>
    6cd8:	53000000 	movwpl	r0, #0
    6cdc:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    6ce0:	01006c62 	tsteq	r0, r2, ror #24
    6ce4:	9b070123 	blls	1c7178 <__ccfg+0x1a71d0>
    6ce8:	66000000 	strvs	r0, [r0], -r0
    6cec:	1f000023 	svcne	0x00000023
    6cf0:	00001d09 	andeq	r1, r0, r9, lsl #26
    6cf4:	01013201 	tsteq	r1, r1, lsl #4
    6cf8:	00000000 	andeq	r0, r0, r0
    6cfc:	0009f620 	andeq	pc, r9, r0, lsr #12
    6d00:	00000000 	andeq	r0, r0, r0
    6d04:	000c9000 	andeq	r9, ip, r0
    6d08:	01430100 	mrseq	r0, (UNDEF: 83)
    6d0c:	0005a303 	andeq	sl, r5, r3, lsl #6
    6d10:	0a122100 	beq	48f118 <__ccfg+0x46f170>
    6d14:	05210000 	streq	r0, [r1, #-0]!
    6d18:	0000000a 	andeq	r0, r0, sl
    6d1c:	0009f622 	andeq	pc, r9, r2, lsr #12
	...
    6d28:	01500100 	cmpeq	r0, r0, lsl #2
    6d2c:	0a122103 	beq	48f140 <__ccfg+0x46f198>
    6d30:	05210000 	streq	r0, [r1, #-0]!
    6d34:	0000000a 	andeq	r0, r0, sl
    6d38:	e9011800 	stmdb	r1, {fp, ip}
    6d3c:	0100001c 	tsteq	r0, ip, lsl r0
    6d40:	9b0106cb 	blls	48874 <__ccfg+0x288cc>
	...
    6d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d50:	0006819c 	muleq	r6, ip, r1
    6d54:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    6d58:	15cb0100 	strbne	r0, [fp, #256]	; 0x100
    6d5c:	0000009b 	muleq	r0, fp, r0
    6d60:	0000238f 	andeq	r2, r0, pc, lsl #7
    6d64:	001d2623 	andseq	r2, sp, r3, lsr #12
    6d68:	1fcb0100 	svcne	0x00cb0100
    6d6c:	000000c7 	andeq	r0, r0, r7, asr #1
    6d70:	000023ad 	andeq	r2, r0, sp, lsr #7
    6d74:	001cd523 	andseq	sp, ip, r3, lsr #10
    6d78:	2bcb0100 	blcs	ff2c7180 <_estack+0xdf2c2180>
    6d7c:	000000c7 	andeq	r0, r0, r7, asr #1
    6d80:	000023d6 	ldrdeq	r2, [r0], -r6
    6d84:	001cc124 	andseq	ip, ip, r4, lsr #2
    6d88:	01e60100 	mvneq	r0, r0, lsl #2
    6d8c:	00000000 	andeq	r0, r0, r0
    6d90:	001daa24 	andseq	sl, sp, r4, lsr #20
    6d94:	01ea0100 	mvneq	r0, r0, lsl #2
    6d98:	00000000 	andeq	r0, r0, r0
    6d9c:	00085e25 	andeq	r5, r8, r5, lsr #28
    6da0:	00000000 	andeq	r0, r0, r0
    6da4:	000c6000 	andeq	r6, ip, r0
    6da8:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    6dac:	00087826 	andeq	r7, r8, r6, lsr #16
    6db0:	0023f400 	eoreq	pc, r3, r0, lsl #8
    6db4:	086c2600 	stmdaeq	ip!, {r9, sl, sp}^
    6db8:	24070000 	strcs	r0, [r7], #-0
    6dbc:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6dc0:	00000009 	andeq	r0, r0, r9
    6dc4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    6dc8:	0100000c 	tsteq	r0, ip
    6dcc:	06640243 	strbteq	r0, [r4], -r3, asr #4
    6dd0:	12210000 	eorne	r0, r1, #0
    6dd4:	2100000a 	tstcs	r0, sl
    6dd8:	00000a05 	andeq	r0, r0, r5, lsl #20
    6ddc:	09f62800 	ldmibeq	r6!, {fp, sp}^
	...
    6de8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    6dec:	0a122102 	beq	48f1fc <__ccfg+0x46f254>
    6df0:	05210000 	streq	r0, [r1, #-0]!
    6df4:	0000000a 	andeq	r0, r0, sl
    6df8:	01180000 	tsteq	r8, r0
    6dfc:	00001d2b 	andeq	r1, r0, fp, lsr #26
    6e00:	0106b001 	tsteq	r6, r1
    6e04:	0000009b 	muleq	r0, fp, r0
	...
    6e10:	07049c01 	streq	r9, [r4, -r1, lsl #24]
    6e14:	61190000 	tstvs	r9, r0
    6e18:	15b00100 	ldrne	r0, [r0, #256]!	; 0x100
    6e1c:	000000c7 	andeq	r0, r0, r7, asr #1
    6e20:	0000241a 	andeq	r2, r0, sl, lsl r4
    6e24:	01007319 	tsteq	r0, r9, lsl r3
    6e28:	07041eb0 			; <UNDEFINED> instruction: 0x07041eb0
    6e2c:	24430000 	strbcs	r0, [r3], #-0
    6e30:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    6e34:	01006e65 	tsteq	r0, r5, ror #28
    6e38:	009b26b0 			; <UNDEFINED> instruction: 0x009b26b0
    6e3c:	24770000 	ldrbtcs	r0, [r7], #-0
    6e40:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6e44:	00000009 	andeq	r0, r0, r9
    6e48:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6e4c:	0100000c 	tsteq	r0, ip
    6e50:	06e802ba 			; <UNDEFINED> instruction: 0x06e802ba
    6e54:	12210000 	eorne	r0, r1, #0
    6e58:	2100000a 	tstcs	r0, sl
    6e5c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6e60:	09f62800 	ldmibeq	r6!, {fp, sp}^
	...
    6e6c:	c4010000 	strgt	r0, [r1], #-0
    6e70:	0a122102 	beq	48f280 <__ccfg+0x46f2d8>
    6e74:	05210000 	streq	r0, [r1, #-0]!
    6e78:	0000000a 	andeq	r0, r0, sl
    6e7c:	b1040b00 	tstlt	r4, r0, lsl #22
    6e80:	17000000 	strne	r0, [r0, -r0]
    6e84:	001ce001 	andseq	lr, ip, r1
    6e88:	06a80100 	strteq	r0, [r8], r0, lsl #2
    6e8c:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    6e90:	000024d0 	ldrdeq	r2, [r0], -r0
    6e94:	01299c01 			; <UNDEFINED> instruction: 0x01299c01
    6e98:	00001d01 	andeq	r1, r0, r1, lsl #26
    6e9c:	9b069301 	blls	1abaa8 <__ccfg+0x18bb00>
    6ea0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    6ea4:	bc000024 	stclt	0, cr0, [r0], {36}	; 0x24
    6ea8:	01000024 	tsteq	r0, r4, lsr #32
    6eac:	1da42a9c 			; <UNDEFINED> instruction: 0x1da42a9c
    6eb0:	82010000 	andhi	r0, r1, #0
    6eb4:	0024440d 	eoreq	r4, r4, sp, lsl #8
    6eb8:	00248400 	eoreq	r8, r4, r0, lsl #8
    6ebc:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    6ec0:	28000007 	stmdacs	r0, {r0, r1, r2}
    6ec4:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    6ec8:	0000245e 	andeq	r2, r0, lr, asr r4
    6ecc:	00002472 	andeq	r2, r0, r2, ror r4
    6ed0:	27038a01 	strcs	r8, [r3, -r1, lsl #20]
    6ed4:	000009f6 	strdeq	r0, [r0], -r6
    6ed8:	0000245e 	andeq	r2, r0, lr, asr r4
    6edc:	00000c18 	andeq	r0, r0, r8, lsl ip
    6ee0:	79027201 	stmdbvc	r2, {r0, r9, ip, sp, lr}
    6ee4:	21000007 	tstcs	r0, r7
    6ee8:	00000a12 	andeq	r0, r0, r2, lsl sl
    6eec:	000a0521 	andeq	r0, sl, r1, lsr #10
    6ef0:	f6250000 			; <UNDEFINED> instruction: 0xf6250000
    6ef4:	6a000009 	bvs	6f20 <__exidx_end+0x1608>
    6ef8:	30000024 	andcc	r0, r0, r4, lsr #32
    6efc:	0100000c 	tsteq	r0, ip
    6f00:	12210274 	eorne	r0, r1, #116, 4	; 0x40000007
    6f04:	2100000a 	tstcs	r0, sl
    6f08:	00000a05 	andeq	r0, r0, r5, lsl #20
    6f0c:	2b000000 	blcs	6f14 <__exidx_end+0x15fc>
    6f10:	00001d38 	andeq	r1, r0, r8, lsr sp
    6f14:	010d7801 	tsteq	sp, r1, lsl #16
    6f18:	001d912b 	andseq	r9, sp, fp, lsr #2
    6f1c:	0d6d0100 	stfeqe	f0, [sp, #-0]
    6f20:	1db02b01 			; <UNDEFINED> instruction: 0x1db02b01
    6f24:	66010000 	strvs	r0, [r1], -r0
    6f28:	b62c010d 	strtlt	r0, [ip], -sp, lsl #2
    6f2c:	0100001d 	tsteq	r0, sp, lsl r0
    6f30:	f0010d58 			; <UNDEFINED> instruction: 0xf0010d58
    6f34:	44000023 	strmi	r0, [r0], #-35	; 0xffffffdd
    6f38:	01000024 	tsteq	r0, r4, lsr #32
    6f3c:	0008429c 	muleq	r8, ip, r2
    6f40:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    6f44:	19580100 	ldmdbne	r8, {r8}^
    6f48:	0000009b 	muleq	r0, fp, r0
    6f4c:	00002495 	muleq	r0, r5, r4
    6f50:	6c656419 	cfstrdvs	mvd6, [r5], #-100	; 0xffffff9c
    6f54:	22580100 	subscs	r0, r8, #0, 2
    6f58:	0000009b 	muleq	r0, fp, r0
    6f5c:	000024a8 	andeq	r2, r0, r8, lsr #9
    6f60:	00084225 	andeq	r4, r8, r5, lsr #4
    6f64:	0023f800 	eoreq	pc, r3, r0, lsl #16
    6f68:	000bd000 	andeq	sp, fp, r0
    6f6c:	135c0100 	cmpne	ip, #0, 2
    6f70:	000bd02d 	andeq	sp, fp, sp, lsr #32
    6f74:	08532e00 	ldmdaeq	r3, {r9, sl, fp, sp}^
    6f78:	24bb0000 	ldrtcs	r0, [fp], #0
    6f7c:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6f80:	f8000009 			; <UNDEFINED> instruction: 0xf8000009
    6f84:	f0000023 			; <UNDEFINED> instruction: 0xf0000023
    6f88:	0100000b 	tsteq	r0, fp
    6f8c:	08240251 	stmdaeq	r4!, {r0, r4, r6, r9}
    6f90:	12210000 	eorne	r0, r1, #0
    6f94:	2100000a 	tstcs	r0, sl
    6f98:	00000a05 	andeq	r0, r0, r5, lsl #20
    6f9c:	09f62800 	ldmibeq	r6!, {fp, sp}^
    6fa0:	24120000 	ldrcs	r0, [r2], #-0
    6fa4:	24160000 	ldrcs	r0, [r6], #-0
    6fa8:	54010000 	strpl	r0, [r1], #-0
    6fac:	0a122102 	beq	48f3bc <__ccfg+0x46f414>
    6fb0:	05210000 	streq	r0, [r1, #-0]!
    6fb4:	0000000a 	andeq	r0, r0, sl
    6fb8:	2f000000 	svccs	0x00000000
    6fbc:	00001d33 	andeq	r1, r0, r3, lsr sp
    6fc0:	b10d4b01 	tstlt	sp, r1, lsl #22
    6fc4:	01000000 	mrseq	r0, (UNDEF: 0)
    6fc8:	0000085e 	andeq	r0, r0, lr, asr r8
    6fcc:	01007230 	tsteq	r0, r0, lsr r2
    6fd0:	00b1074f 	adcseq	r0, r1, pc, asr #14
    6fd4:	31000000 	mrscc	r0, (UNDEF: 0)
    6fd8:	00001d0f 	andeq	r1, r0, pc, lsl #26
    6fdc:	010d4101 	tsteq	sp, r1, lsl #2
    6fe0:	00088301 	andeq	r8, r8, r1, lsl #6
    6fe4:	6d633200 	sfmvs	f3, 2, [r3, #-0]
    6fe8:	41010064 	tstmi	r1, r4, rrx
    6fec:	0000b119 	andeq	fp, r0, r9, lsl r1
    6ff0:	00613200 	rsbeq	r3, r1, r0, lsl #4
    6ff4:	c7244101 	strgt	r4, [r4, -r1, lsl #2]!
    6ff8:	00000000 	andeq	r0, r0, r0
    6ffc:	001cda2c 	andseq	sp, ip, ip, lsr #20
    7000:	0d3a0100 	ldfeqs	f0, [sl, #-0]
    7004:	0023d801 	eoreq	sp, r3, r1, lsl #16
    7008:	0023f000 	eoreq	pc, r3, r0
    700c:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    7010:	19000008 	stmdbne	r0, {r3}
    7014:	00646d63 	rsbeq	r6, r4, r3, ror #26
    7018:	b1193a01 	tstlt	r9, r1, lsl #20
    701c:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    7020:	27000024 	strcs	r0, [r0, -r4, lsr #32]
    7024:	000009f6 	strdeq	r0, [r0], -r6
    7028:	000023d8 	ldrdeq	r2, [r0], -r8
    702c:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    7030:	c9023c01 	stmdbgt	r2, {r0, sl, fp, ip, sp}
    7034:	21000008 	tstcs	r0, r8
    7038:	00000a12 	andeq	r0, r0, r2, lsl sl
    703c:	000a0521 	andeq	r0, sl, r1, lsr #10
    7040:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    7044:	e4000009 	str	r0, [r0], #-9
    7048:	e8000023 	stmda	r0, {r0, r1, r5}
    704c:	01000023 	tsteq	r0, r3, lsr #32
    7050:	1221023e 	eorne	r0, r1, #-536870909	; 0xe0000003
    7054:	2100000a 	tstcs	r0, sl
    7058:	00000a05 	andeq	r0, r0, r5, lsl #20
    705c:	c52c0000 	strgt	r0, [ip, #-0]!
    7060:	0100001d 	tsteq	r0, sp, lsl r0
    7064:	a8010d29 	stmdage	r1, {r0, r3, r5, r8, sl, fp}
    7068:	d8000023 	stmdale	r0, {r0, r1, r5}
    706c:	01000023 	tsteq	r0, r3, lsr #32
    7070:	0009799c 	muleq	r9, ip, r9
    7074:	00621900 	rsbeq	r1, r2, r0, lsl #18
    7078:	b11c2901 	tstlt	ip, r1, lsl #18
    707c:	e1000000 	mrs	r0, (UNDEF: 0)
    7080:	30000024 	andcc	r0, r0, r4, lsr #32
    7084:	2b010069 	blcs	47230 <__ccfg+0x27288>
    7088:	00008106 	andeq	r8, r0, r6, lsl #2
    708c:	0a3d2700 	beq	f50c94 <__ccfg+0xf30cec>
    7090:	23b00000 	movscs	r0, #0
    7094:	0b800000 	bleq	fe00709c <_estack+0xde00209c>
    7098:	32010000 	andcc	r0, r1, #0
    709c:	00092e03 	andeq	r2, r9, r3, lsl #28
    70a0:	0a4c2100 	beq	130f4a8 <__ccfg+0x12ef500>
    70a4:	33000000 	movwcc	r0, #0
    70a8:	00000a3d 	andeq	r0, r0, sp, lsr sl
    70ac:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
    70b0:	000023c0 	andeq	r2, r0, r0, asr #7
    70b4:	48042f01 	stmdami	r4, {r0, r8, r9, sl, fp, sp}
    70b8:	21000009 	tstcs	r0, r9
    70bc:	00000a4c 	andeq	r0, r0, ip, asr #20
    70c0:	0a203300 	beq	813cc8 <__ccfg+0x7f3d20>
    70c4:	23c00000 	biccs	r0, r0, #0
    70c8:	23c20000 	biccs	r0, r2, #0
    70cc:	31010000 	mrscc	r0, (UNDEF: 1)
    70d0:	00096204 	andeq	r6, r9, r4, lsl #4
    70d4:	0a2f2100 	beq	bcf4dc <__ccfg+0xbaf534>
    70d8:	25000000 	strcs	r0, [r0, #-0]
    70dc:	00000a20 	andeq	r0, r0, r0, lsr #20
    70e0:	000023c8 	andeq	r2, r0, r8, asr #7
    70e4:	00000ba0 	andeq	r0, r0, r0, lsr #23
    70e8:	21033301 	tstcs	r3, r1, lsl #6
    70ec:	00000a2f 	andeq	r0, r0, pc, lsr #20
    70f0:	bc340000 	ldclt	0, cr0, [r4], #-0
    70f4:	0100001d 	tsteq	r0, sp, lsl r0
    70f8:	00b10d19 	adcseq	r0, r1, r9, lsl sp
    70fc:	23740000 	cmncs	r4, #0
    7100:	23a80000 			; <UNDEFINED> instruction: 0x23a80000
    7104:	9c010000 	stcls	0, cr0, [r1], {-0}
    7108:	000009f6 	strdeq	r0, [r0], -r6
    710c:	01006930 	tsteq	r0, r0, lsr r9
    7110:	0081061b 	addeq	r0, r1, fp, lsl r6
    7114:	62350000 	eorsvs	r0, r5, #0
    7118:	071c0100 	ldreq	r0, [ip, -r0, lsl #2]
    711c:	000000b1 	strheq	r0, [r0], -r1
    7120:	000024ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    7124:	000a3d27 	andeq	r3, sl, r7, lsr #26
    7128:	00237800 	eoreq	r7, r3, r0, lsl #16
    712c:	000b2000 	andeq	r2, fp, r0
    7130:	03220100 			; <UNDEFINED> instruction: 0x03220100
    7134:	000009c5 	andeq	r0, r0, r5, asr #19
    7138:	000a4c21 	andeq	r4, sl, r1, lsr #24
    713c:	20270000 	eorcs	r0, r7, r0
    7140:	7e00000a 	cdpvc	0, 0, cr0, cr0, cr10, {0}
    7144:	48000023 	stmdami	r0, {r0, r1, r5}
    7148:	0100000b 	tsteq	r0, fp
    714c:	09df0323 	ldmibeq	pc, {r0, r1, r5, r8, r9}^	; <UNPREDICTABLE>
    7150:	2f210000 	svccs	0x00210000
    7154:	0000000a 	andeq	r0, r0, sl
    7158:	000a5a25 	andeq	r5, sl, r5, lsr #20
    715c:	00238000 	eoreq	r8, r3, r0
    7160:	000b6000 	andeq	r6, fp, r0
    7164:	07200100 	streq	r0, [r0, -r0, lsl #2]!
    7168:	000a6c21 	andeq	r6, sl, r1, lsr #24
    716c:	36000000 	strcc	r0, [r0], -r0
    7170:	00000f4e 	andeq	r0, r0, lr, asr #30
    7174:	01020602 	tsteq	r2, r2, lsl #12
    7178:	0a200301 	beq	807d84 <__ccfg+0x7e7ddc>
    717c:	1f370000 	svcne	0x00370000
    7180:	02000011 	andeq	r0, r0, #17
    7184:	67230206 	strvs	r0, [r3, -r6, lsl #4]!
    7188:	37000000 	strcc	r0, [r0, -r0]
    718c:	0000142e 	andeq	r1, r0, lr, lsr #8
    7190:	37020602 	strcc	r0, [r2, -r2, lsl #12]
    7194:	00000067 	andeq	r0, r0, r7, rrx
    7198:	12c23600 	sbcne	r3, r2, #0, 12
    719c:	54020000 	strpl	r0, [r2], #-0
    71a0:	03010101 	movweq	r0, #4353	; 0x1101
    71a4:	00000a3d 	andeq	r0, r0, sp, lsr sl
    71a8:	00111f37 	andseq	r1, r1, r7, lsr pc
    71ac:	01540200 	cmpeq	r4, r0, lsl #4
    71b0:	00006719 	andeq	r6, r0, r9, lsl r7
    71b4:	cf360000 	svcgt	0x00360000
    71b8:	02000013 	andeq	r0, r0, #19
    71bc:	0101011e 	tsteq	r1, lr, lsl r1
    71c0:	000a5a03 	andeq	r5, sl, r3, lsl #20
    71c4:	111f3700 	tstne	pc, r0, lsl #14
    71c8:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    71cc:	00671701 	rsbeq	r1, r7, r1, lsl #14
    71d0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    71d4:	00001bd3 	ldrdeq	r1, [r0], -r3
    71d8:	0101a402 	tsteq	r1, r2, lsl #8
    71dc:	00000067 	andeq	r0, r0, r7, rrx
    71e0:	000a7903 	andeq	r7, sl, r3, lsl #18
    71e4:	111f3900 	tstne	pc, r0, lsl #18
    71e8:	a4020000 	strge	r0, [r2], #-0
    71ec:	00006718 	andeq	r6, r0, r8, lsl r7
    71f0:	963a0000 	ldrtls	r0, [sl], -r0
    71f4:	84000007 	strhi	r0, [r0], #-7
    71f8:	a8000024 	stmdage	r0, {r2, r5}
    71fc:	01000024 	tsteq	r0, r4, lsr #32
    7200:	0796289c 			; <UNDEFINED> instruction: 0x0796289c
    7204:	248e0000 	strcs	r0, [lr], #0
    7208:	24a20000 	strtcs	r0, [r2], #0
    720c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    7210:	07a83b0d 	streq	r3, [r8, sp, lsl #22]!
    7214:	24980000 	ldrcs	r0, [r8], #0
    7218:	249e0000 	ldrcs	r0, [lr], #0
    721c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    7220:	00000003 	andeq	r0, r0, r3
    7224:	0000041e 	andeq	r0, r0, lr, lsl r4
    7228:	1b940003 	blne	fe50723c <_estack+0xde50223c>
    722c:	01040000 	mrseq	r0, (UNDEF: 4)
    7230:	000000a3 	andeq	r0, r0, r3, lsr #1
    7234:	001dce0c 	andseq	ip, sp, ip, lsl #28
    7238:	000e0800 	andeq	r0, lr, r0, lsl #16
    723c:	000d2800 	andeq	r2, sp, r0, lsl #16
    7240:	00000000 	andeq	r0, r0, r0
    7244:	004f9c00 	subeq	r9, pc, r0, lsl #24
    7248:	06010200 	streq	r0, [r1], -r0, lsl #4
    724c:	00000c69 	andeq	r0, r0, r9, ror #24
    7250:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    7254:	0200000a 	andeq	r0, r0, #10
    7258:	08090504 	stmdaeq	r9, {r2, r8, sl}
    725c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7260:	00080405 	andeq	r0, r8, r5, lsl #8
    7264:	2a1a0300 	bcs	687e6c <__ccfg+0x667ec4>
    7268:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    726c:	00004d18 	andeq	r4, r0, r8, lsl sp
    7270:	08010200 	stmdaeq	r1, {r9}
    7274:	00000c67 	andeq	r0, r0, r7, ror #24
    7278:	002e1003 	eoreq	r1, lr, r3
    727c:	19310200 	ldmdbne	r1!, {r9}
    7280:	00000060 	andeq	r0, r0, r0, rrx
    7284:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    7288:	0300000d 	movweq	r0, #13
    728c:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    7290:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7294:	02000000 	andeq	r0, r0, #0
    7298:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    729c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    72a0:	00043407 	andeq	r3, r4, r7, lsl #8
    72a4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    72a8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    72ac:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    72b0:	03000004 	movweq	r0, #4
    72b4:	000028f9 	strdeq	r2, [r0], -r9
    72b8:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    72bc:	05000000 	streq	r0, [r0, #-0]
    72c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    72c4:	001dc003 	andseq	ip, sp, r3
    72c8:	122b0300 	eorne	r0, fp, #0, 6
    72cc:	00000041 	andeq	r0, r0, r1, asr #32
    72d0:	0000a006 	andeq	sl, r0, r6
    72d4:	294b0300 	stmdbcs	fp, {r8, r9}^
    72d8:	2c030000 	stccs	0, cr0, [r3], {-0}
    72dc:	00006712 	andeq	r6, r0, r2, lsl r7
    72e0:	00b10500 	adcseq	r0, r1, r0, lsl #10
    72e4:	52030000 	andpl	r0, r3, #0
    72e8:	03000006 	movweq	r0, #6
    72ec:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    72f0:	c0030000 	andgt	r0, r3, r0
    72f4:	0300000b 	movweq	r0, #11
    72f8:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    72fc:	04070000 	streq	r0, [r7], #-0
    7300:	0000008f 	andeq	r0, r0, pc, lsl #1
    7304:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    7308:	00016e09 	andeq	r6, r1, r9, lsl #28
    730c:	002b0900 	eoreq	r0, fp, r0, lsl #18
    7310:	34030000 	strcc	r0, [r3], #-0
    7314:	0000a007 	andeq	sl, r0, r7
    7318:	07010100 	streq	r0, [r1, -r0, lsl #2]
    731c:	06580900 	ldrbeq	r0, [r8], -r0, lsl #18
    7320:	35030000 	strcc	r0, [r3, #-0]
    7324:	0000a003 	andeq	sl, r0, r3
    7328:	06010100 	streq	r0, [r1], -r0, lsl #2
    732c:	02ef0900 	rsceq	r0, pc, #0, 18
    7330:	36030000 	strcc	r0, [r3], -r0
    7334:	0000a003 	andeq	sl, r0, r3
    7338:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    733c:	06c30900 	strbeq	r0, [r3], r0, lsl #18
    7340:	37030000 	strcc	r0, [r3, -r0]
    7344:	0000a003 	andeq	sl, r0, r3
    7348:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    734c:	0aab0900 	beq	feac9754 <_estack+0xdeac4754>
    7350:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7354:	0000a003 	andeq	sl, r0, r3
    7358:	00040100 	andeq	r0, r4, r0, lsl #2
    735c:	06670a00 	strbteq	r0, [r7], -r0, lsl #20
    7360:	3a030000 	bcc	c7368 <__ccfg+0xa73c0>
    7364:	0000a007 	andeq	sl, r0, r7
    7368:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    736c:	03000009 	movweq	r0, #9
    7370:	00a0033c 	adceq	r0, r0, ip, lsr r3
    7374:	0a020000 	beq	8737c <__ccfg+0x673d4>
    7378:	00000f38 	andeq	r0, r0, r8, lsr pc
    737c:	a0033d03 	andge	r3, r3, r3, lsl #26
    7380:	03000000 	movweq	r0, #0
    7384:	00091f0a 	andeq	r1, r9, sl, lsl #30
    7388:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    738c:	000000b1 	strheq	r0, [r0], -r1
    7390:	25030004 	strcs	r0, [r3, #-4]
    7394:	03000003 	movweq	r0, #3
    7398:	00e00341 	rsceq	r0, r0, r1, asr #6
    739c:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    73a0:	0b000001 	bleq	73ac <__exidx_end+0x1a94>
    73a4:	000006ca 	andeq	r0, r0, sl, asr #13
    73a8:	7a1a4303 	bvc	697fbc <__ccfg+0x678014>
    73ac:	01000001 	tsteq	r0, r1
    73b0:	01970b01 	orrseq	r0, r7, r1, lsl #22
    73b4:	45030000 	strmi	r0, [r3, #-0]
    73b8:	00019b0e 	andeq	r9, r1, lr, lsl #22
    73bc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    73c0:	0001a104 	andeq	sl, r1, r4, lsl #2
    73c4:	08010200 	stmdaeq	r1, {r9}
    73c8:	00000c70 	andeq	r0, r0, r0, ror ip
    73cc:	0001a105 	andeq	sl, r1, r5, lsl #2
    73d0:	032e0b00 			; <UNDEFINED> instruction: 0x032e0b00
    73d4:	45030000 	strmi	r0, [r3, #-0]
    73d8:	00019b1e 	andeq	r9, r1, lr, lsl fp
    73dc:	08010100 	stmdaeq	r1, {r8}
    73e0:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    73e4:	000001ec 	andeq	r0, r0, ip, ror #3
    73e8:	000cd60a 	andeq	sp, ip, sl, lsl #12
    73ec:	0b900400 	bleq	fe4083f4 <_estack+0xde4033f4>
    73f0:	00000067 	andeq	r0, r0, r7, rrx
    73f4:	10730a00 	rsbsne	r0, r3, r0, lsl #20
    73f8:	91040000 	mrsls	r0, (UNDEF: 4)
    73fc:	00008f08 	andeq	r8, r0, r8, lsl #30
    7400:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
    7404:	04000001 	streq	r0, [r0], #-1
    7408:	00ac1092 	umlaleq	r1, ip, r2, r0
    740c:	00060000 	andeq	r0, r6, r0
    7410:	000cca03 	andeq	ip, ip, r3, lsl #20
    7414:	03930400 	orrseq	r0, r3, #0, 8
    7418:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    741c:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    7420:	00020300 	andeq	r0, r2, r0, lsl #6
    7424:	0b000d00 	bleq	a82c <__exidx_end+0x4f14>
    7428:	00000949 	andeq	r0, r0, r9, asr #18
    742c:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    7430:	01000001 	tsteq	r0, r1
    7434:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    7438:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    743c:	26090000 	strcs	r0, [r9], -r0
    7440:	05000009 	streq	r0, [r0, #-9]
    7444:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    7448:	07010000 	streq	r0, [r1, -r0]
    744c:	d8090001 	stmdale	r9, {r0}
    7450:	05000005 	streq	r0, [r0, #-5]
    7454:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    7458:	01010000 	mrseq	r0, (UNDEF: 1)
    745c:	03000000 	movweq	r0, #0
    7460:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
    7464:	11039605 	tstne	r3, r5, lsl #12
    7468:	05000002 	streq	r0, [r0, #-2]
    746c:	0000023b 	andeq	r0, r0, fp, lsr r2
    7470:	0002470c 	andeq	r4, r2, ip, lsl #14
    7474:	00025700 	andeq	r5, r2, r0, lsl #14
    7478:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    747c:	0000024c 	andeq	r0, r0, ip, asr #4
    7480:	0003bd0b 	andeq	fp, r3, fp, lsl #26
    7484:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    7488:	00000257 	andeq	r0, r0, r7, asr r2
    748c:	9b0c0101 	blls	307898 <__ccfg+0x2e78f0>
    7490:	75000000 	strvc	r0, [r0, #-0]
    7494:	0d000002 	stceq	0, cr0, [r0, #-8]
    7498:	026a0500 	rsbeq	r0, sl, #0, 10
    749c:	1a0b0000 	bne	2c74a4 <__ccfg+0x2a74fc>
    74a0:	06000006 	streq	r0, [r0], -r6
    74a4:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    74a8:	01010000 	mrseq	r0, (UNDEF: 1)
    74ac:	0008e90b 	andeq	lr, r8, fp, lsl #18
    74b0:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    74b4:	000000b1 	strheq	r0, [r0], -r1
    74b8:	7e0e0101 	adfvce	f0, f6, f1
    74bc:	0700000c 	streq	r0, [r0, -ip]
    74c0:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    74c4:	07000002 	streq	r0, [r0, -r2]
    74c8:	0002a904 	andeq	sl, r2, r4, lsl #18
    74cc:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    74d0:	10000002 	andne	r0, r0, r2
    74d4:	0000008f 	andeq	r0, r0, pc, lsl #1
    74d8:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    74dc:	02c00000 	sbceq	r0, r0, #0
    74e0:	000d0000 	andeq	r0, sp, r0
    74e4:	0002b505 	andeq	fp, r2, r5, lsl #10
    74e8:	09f21100 	ldmibeq	r2!, {r8, ip}^
    74ec:	7f070000 	svcvc	0x00070000
    74f0:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    74f4:	01010000 	mrseq	r0, (UNDEF: 1)
    74f8:	0003a911 	andeq	sl, r3, r1, lsl r9
    74fc:	01820700 	orreq	r0, r2, r0, lsl #14
    7500:	0000bd14 	andeq	fp, r0, r4, lsl sp
    7504:	11010100 	mrsne	r0, (UNDEF: 17)
    7508:	00000381 	andeq	r0, r0, r1, lsl #7
    750c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    7510:	000000b1 	strheq	r0, [r0], -r1
    7514:	08120101 	ldmdaeq	r2, {r0, r8}
    7518:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    751c:	00000319 	andeq	r0, r0, r9, lsl r3
    7520:	003c9f13 	eorseq	r9, ip, r3, lsl pc
    7524:	03070700 	movweq	r0, #30464	; 0x7700
    7528:	00008f07 	andeq	r8, r0, r7, lsl #30
    752c:	cb130000 	blgt	4c7534 <__ccfg+0x4a758c>
    7530:	0700000f 	streq	r0, [r0, -pc]
    7534:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    7538:	04000000 	streq	r0, [r0], #-0
    753c:	0a150e00 	beq	54ad44 <__ccfg+0x52ad9c>
    7540:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7544:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    7548:	20140000 	andscs	r0, r4, r0
    754c:	30000000 	andcc	r0, r0, r0
    7550:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7554:	00000389 	andeq	r0, r0, r9, lsl #7
    7558:	001f2213 	andseq	r2, pc, r3, lsl r2	; <UNPREDICTABLE>
    755c:	03140700 	tsteq	r4, #0, 14
    7560:	00008f08 	andeq	r8, r0, r8, lsl #30
    7564:	f3130000 	vhadd.u16	d0, d3, d0
    7568:	0700000b 	streq	r0, [r0, -fp]
    756c:	8f080315 	svchi	0x00080315
    7570:	02000000 	andeq	r0, r0, #0
    7574:	004c8c13 	subeq	r8, ip, r3, lsl ip
    7578:	03160700 	tsteq	r6, #0, 14
    757c:	0002960b 	andeq	r9, r2, fp, lsl #12
    7580:	52130400 	andspl	r0, r3, #0, 8
    7584:	07000047 	streq	r0, [r0, -r7, asr #32]
    7588:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    758c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7590:	00000f13 	andeq	r0, r0, r3, lsl pc
    7594:	03180700 	tsteq	r8, #0, 14
    7598:	0003890f 	andeq	r8, r3, pc, lsl #18
    759c:	69130c00 	ldmdbvs	r3, {sl, fp}
    75a0:	07000009 	streq	r0, [r0, -r9]
    75a4:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    75a8:	2c000003 	stccs	0, cr0, [r0], {3}
    75ac:	03190c00 	tsteq	r9, #0, 24
    75b0:	03990000 	orrseq	r0, r9, #0
    75b4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    75b8:	03000000 	movweq	r0, #0
    75bc:	26040700 	strcs	r0, [r4], -r0, lsl #14
    75c0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    75c4:	00000be8 	andeq	r0, r0, r8, ror #23
    75c8:	1b031c07 	blne	ce5ec <__ccfg+0xae644>
    75cc:	00000326 	andeq	r0, r0, r6, lsr #6
    75d0:	000bc811 	andeq	ip, fp, r1, lsl r8
    75d4:	031e0700 	tsteq	lr, #0, 14
    75d8:	0003bb14 	andeq	fp, r3, r4, lsl fp
    75dc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    75e0:	00039f04 	andeq	r9, r3, r4, lsl #30
    75e4:	0f011600 	svceq	0x00011600
    75e8:	0100001e 	tsteq	r0, lr, lsl r0
    75ec:	8101050b 	tsthi	r1, fp, lsl #10
    75f0:	d0000000 	andle	r0, r0, r0
    75f4:	3c000024 	stccc	0, cr0, [r0], {36}	; 0x24
    75f8:	01000025 	tsteq	r0, r5, lsr #32
    75fc:	00041b9c 	muleq	r4, ip, fp
    7600:	74731700 	ldrbtvc	r1, [r3], #-1792	; 0xfffff900
    7604:	130b0100 	movwne	r0, #45312	; 0xb100
    7608:	0000008f 	andeq	r0, r0, pc, lsl #1
    760c:	0000251d 	andeq	r2, r0, sp, lsl r5
    7610:	01006d17 	tsteq	r0, r7, lsl sp
    7614:	041b230b 	ldreq	r2, [fp], #-779	; 0xfffffcf5
    7618:	25300000 	ldrcs	r0, [r0, #-0]!
    761c:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    7620:	01000026 	tsteq	r0, r6, lsr #32
    7624:	0081060d 	addeq	r0, r1, sp, lsl #12
    7628:	254e0000 	strbcs	r0, [lr, #-0]
    762c:	62190000 	andsvs	r0, r9, #0
    7630:	01006675 	tsteq	r0, r5, ror r6
    7634:	019b080e 	orrseq	r0, fp, lr, lsl #16
    7638:	258d0000 	strcs	r0, [sp]
    763c:	07000000 	streq	r0, [r0, -r0]
    7640:	0001a804 	andeq	sl, r1, r4, lsl #16
    7644:	04120000 	ldreq	r0, [r2], #-0
    7648:	00030000 	andeq	r0, r3, r0
    764c:	00001cf6 	strdeq	r1, [r0], -r6
    7650:	00a30104 	adceq	r0, r3, r4, lsl #2
    7654:	170c0000 	strne	r0, [ip, -r0]
    7658:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    765c:	3800000e 	stmdacc	r0, {r1, r2, r3}
    7660:	0000000d 	andeq	r0, r0, sp
    7664:	50000000 	andpl	r0, r0, r0
    7668:	02000051 	andeq	r0, r0, #81	; 0x51
    766c:	0c690601 	stcleq	6, cr0, [r9], #-4
    7670:	02020000 	andeq	r0, r2, #0
    7674:	000a7705 	andeq	r7, sl, r5, lsl #14
    7678:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    767c:	00000809 	andeq	r0, r0, r9, lsl #16
    7680:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    7684:	03000008 	movweq	r0, #8
    7688:	00002a1a 	andeq	r2, r0, sl, lsl sl
    768c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7690:	02000000 	andeq	r0, r0, #0
    7694:	0c670801 	stcleq	8, cr0, [r7], #-4
    7698:	10030000 	andne	r0, r3, r0
    769c:	0200002e 	andeq	r0, r0, #46	; 0x2e
    76a0:	00601931 	rsbeq	r1, r0, r1, lsr r9
    76a4:	02020000 	andeq	r0, r2, #0
    76a8:	000d6407 	andeq	r6, sp, r7, lsl #8
    76ac:	29b20300 	ldmibcs	r2!, {r8, r9}
    76b0:	34020000 	strcc	r0, [r2], #-0
    76b4:	00007319 	andeq	r7, r0, r9, lsl r3
    76b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    76bc:	00000439 	andeq	r0, r0, r9, lsr r4
    76c0:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    76c4:	04000004 	streq	r0, [r0], #-4
    76c8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    76cc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    76d0:	00043e07 	andeq	r3, r4, r7, lsl #28
    76d4:	28f90300 	ldmcs	r9!, {r8, r9}^
    76d8:	27030000 	strcs	r0, [r3, -r0]
    76dc:	00005412 	andeq	r5, r0, r2, lsl r4
    76e0:	008f0500 	addeq	r0, pc, r0, lsl #10
    76e4:	c0030000 	andgt	r0, r3, r0
    76e8:	0300001d 	movweq	r0, #29
    76ec:	0041122b 	subeq	r1, r1, fp, lsr #4
    76f0:	a0060000 	andge	r0, r6, r0
    76f4:	03000000 	movweq	r0, #0
    76f8:	0000294b 	andeq	r2, r0, fp, asr #18
    76fc:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    7700:	05000000 	streq	r0, [r0, #-0]
    7704:	000000b1 	strheq	r0, [r0], -r1
    7708:	00065203 	andeq	r5, r6, r3, lsl #4
    770c:	122d0300 	eorne	r0, sp, #0, 6
    7710:	00000067 	andeq	r0, r0, r7, rrx
    7714:	32030807 	andcc	r0, r3, #458752	; 0x70000
    7718:	00015c09 	andeq	r5, r1, r9, lsl #24
    771c:	002b0800 	eoreq	r0, fp, r0, lsl #16
    7720:	34030000 	strcc	r0, [r3], #-0
    7724:	0000a007 	andeq	sl, r0, r7
    7728:	07010100 	streq	r0, [r1, -r0, lsl #2]
    772c:	06580800 	ldrbeq	r0, [r8], -r0, lsl #16
    7730:	35030000 	strcc	r0, [r3, #-0]
    7734:	0000a003 	andeq	sl, r0, r3
    7738:	06010100 	streq	r0, [r1], -r0, lsl #2
    773c:	02ef0800 	rsceq	r0, pc, #0, 16
    7740:	36030000 	strcc	r0, [r3], -r0
    7744:	0000a003 	andeq	sl, r0, r3
    7748:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    774c:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    7750:	37030000 	strcc	r0, [r3, -r0]
    7754:	0000a003 	andeq	sl, r0, r3
    7758:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    775c:	0aab0800 	beq	feac9764 <_estack+0xdeac4764>
    7760:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7764:	0000a003 	andeq	sl, r0, r3
    7768:	00040100 	andeq	r0, r4, r0, lsl #2
    776c:	06670900 	strbteq	r0, [r7], -r0, lsl #18
    7770:	3a030000 	bcc	c7778 <__ccfg+0xa77d0>
    7774:	0000a007 	andeq	sl, r0, r7
    7778:	07090100 	streq	r0, [r9, -r0, lsl #2]
    777c:	03000009 	movweq	r0, #9
    7780:	00a0033c 	adceq	r0, r0, ip, lsr r3
    7784:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    7788:	00000f38 	andeq	r0, r0, r8, lsr pc
    778c:	a0033d03 	andge	r3, r3, r3, lsl #26
    7790:	03000000 	movweq	r0, #0
    7794:	00091f09 	andeq	r1, r9, r9, lsl #30
    7798:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    779c:	000000b1 	strheq	r0, [r0], -r1
    77a0:	25030004 	strcs	r0, [r3, #-4]
    77a4:	03000003 	movweq	r0, #3
    77a8:	00ce0341 	sbceq	r0, lr, r1, asr #6
    77ac:	5c060000 	stcpl	0, cr0, [r6], {-0}
    77b0:	0a000001 	beq	77bc <__exidx_end+0x1ea4>
    77b4:	000006ca 	andeq	r0, r0, sl, asr #13
    77b8:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    77bc:	01000001 	tsteq	r0, r1
    77c0:	01970a01 	orrseq	r0, r7, r1, lsl #20
    77c4:	45030000 	strmi	r0, [r3, #-0]
    77c8:	0001890e 	andeq	r8, r1, lr, lsl #18
    77cc:	0b010100 	bleq	47bd4 <__ccfg+0x27c2c>
    77d0:	00018f04 	andeq	r8, r1, r4, lsl #30
    77d4:	08010200 	stmdaeq	r1, {r9}
    77d8:	00000c70 	andeq	r0, r0, r0, ror ip
    77dc:	00018f05 	andeq	r8, r1, r5, lsl #30
    77e0:	032e0a00 			; <UNDEFINED> instruction: 0x032e0a00
    77e4:	45030000 	strmi	r0, [r3, #-0]
    77e8:	0001891e 	andeq	r8, r1, lr, lsl r9
    77ec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    77f0:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    77f4:	000001da 	ldrdeq	r0, [r0], -sl
    77f8:	000cd609 	andeq	sp, ip, r9, lsl #12
    77fc:	0b900400 	bleq	fe408804 <_estack+0xde403804>
    7800:	00000067 	andeq	r0, r0, r7, rrx
    7804:	10730900 	rsbsne	r0, r3, r0, lsl #18
    7808:	91040000 	mrsls	r0, (UNDEF: 4)
    780c:	00008f08 	andeq	r8, r0, r8, lsl #30
    7810:	bc090400 	cfstrslt	mvf0, [r9], {-0}
    7814:	04000001 	streq	r0, [r0], #-1
    7818:	00ac1092 	umlaleq	r1, ip, r2, r0
    781c:	00060000 	andeq	r0, r6, r0
    7820:	000cca03 	andeq	ip, ip, r3, lsl #20
    7824:	03930400 	orrseq	r0, r3, #0, 8
    7828:	000001a9 	andeq	r0, r0, r9, lsr #3
    782c:	0001da0c 	andeq	sp, r1, ip, lsl #20
    7830:	0001f100 	andeq	pc, r1, r0, lsl #2
    7834:	0a000d00 	beq	ac3c <__exidx_end+0x5324>
    7838:	00000949 	andeq	r0, r0, r9, asr #18
    783c:	e60f9904 	str	r9, [pc], -r4, lsl #18
    7840:	01000001 	tsteq	r0, r1
    7844:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    7848:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    784c:	26080000 	strcs	r0, [r8], -r0
    7850:	05000009 	streq	r0, [r0, #-9]
    7854:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    7858:	07010000 	streq	r0, [r1, -r0]
    785c:	d8080001 	stmdale	r8, {r0}
    7860:	05000005 	streq	r0, [r0, #-5]
    7864:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    7868:	01010000 	mrseq	r0, (UNDEF: 1)
    786c:	03000000 	movweq	r0, #0
    7870:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
    7874:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    7878:	05000001 	streq	r0, [r0, #-1]
    787c:	00000229 	andeq	r0, r0, r9, lsr #4
    7880:	0002350c 	andeq	r3, r2, ip, lsl #10
    7884:	00024500 	andeq	r4, r2, r0, lsl #10
    7888:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    788c:	0000023a 	andeq	r0, r0, sl, lsr r2
    7890:	0003bd0a 	andeq	fp, r3, sl, lsl #26
    7894:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    7898:	00000245 	andeq	r0, r0, r5, asr #4
    789c:	9b0c0101 	blls	307ca8 <__ccfg+0x2e7d00>
    78a0:	63000000 	movwvs	r0, #0
    78a4:	0d000002 	stceq	0, cr0, [r0, #-8]
    78a8:	02580500 	subseq	r0, r8, #0, 10
    78ac:	1a0a0000 	bne	2878b4 <__ccfg+0x26790c>
    78b0:	06000006 	streq	r0, [r0], -r6
    78b4:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    78b8:	01010000 	mrseq	r0, (UNDEF: 1)
    78bc:	0008e90a 	andeq	lr, r8, sl, lsl #18
    78c0:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    78c4:	000000b1 	strheq	r0, [r0], -r1
    78c8:	7e0e0101 	adfvce	f0, f6, f1
    78cc:	0700000c 	streq	r0, [r0, -ip]
    78d0:	9110016e 	tstls	r0, lr, ror #2
    78d4:	0b000002 	bleq	78e4 <__exidx_end+0x1fcc>
    78d8:	00029704 	andeq	r9, r2, r4, lsl #14
    78dc:	a3010f00 	movwge	r0, #7936	; 0x1f00
    78e0:	10000002 	andne	r0, r0, r2
    78e4:	0000008f 	andeq	r0, r0, pc, lsl #1
    78e8:	01960c00 	orrseq	r0, r6, r0, lsl #24
    78ec:	02ae0000 	adceq	r0, lr, #0
    78f0:	000d0000 	andeq	r0, sp, r0
    78f4:	0002a305 	andeq	sl, r2, r5, lsl #6
    78f8:	09f21100 	ldmibeq	r2!, {r8, ip}^
    78fc:	7f070000 	svcvc	0x00070000
    7900:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    7904:	01010000 	mrseq	r0, (UNDEF: 1)
    7908:	0003a911 	andeq	sl, r3, r1, lsl r9
    790c:	01820700 	orreq	r0, r2, r0, lsl #14
    7910:	0000bd14 	andeq	fp, r0, r4, lsl sp
    7914:	11010100 	mrsne	r0, (UNDEF: 17)
    7918:	00000381 	andeq	r0, r0, r1, lsl #7
    791c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    7920:	000000b1 	strheq	r0, [r0], -r1
    7924:	08120101 	ldmdaeq	r2, {r0, r8}
    7928:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    792c:	00000307 	andeq	r0, r0, r7, lsl #6
    7930:	003c9f13 	eorseq	r9, ip, r3, lsl pc
    7934:	03070700 	movweq	r0, #30464	; 0x7700
    7938:	00008f07 	andeq	r8, r0, r7, lsl #30
    793c:	cb130000 	blgt	4c7944 <__ccfg+0x4a799c>
    7940:	0700000f 	streq	r0, [r0, -pc]
    7944:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    7948:	04000000 	streq	r0, [r0], #-0
    794c:	0a150e00 	beq	54b154 <__ccfg+0x52b1ac>
    7950:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7954:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    7958:	20140000 	andscs	r0, r4, r0
    795c:	30000000 	andcc	r0, r0, r0
    7960:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7964:	00000377 	andeq	r0, r0, r7, ror r3
    7968:	001f2213 	andseq	r2, pc, r3, lsl r2	; <UNPREDICTABLE>
    796c:	03140700 	tsteq	r4, #0, 14
    7970:	00008f08 	andeq	r8, r0, r8, lsl #30
    7974:	f3130000 	vhadd.u16	d0, d3, d0
    7978:	0700000b 	streq	r0, [r0, -fp]
    797c:	8f080315 	svchi	0x00080315
    7980:	02000000 	andeq	r0, r0, #0
    7984:	004c8c13 	subeq	r8, ip, r3, lsl ip
    7988:	03160700 	tsteq	r6, #0, 14
    798c:	0002840b 	andeq	r8, r2, fp, lsl #8
    7990:	52130400 	andspl	r0, r3, #0, 8
    7994:	07000047 	streq	r0, [r0, -r7, asr #32]
    7998:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    799c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    79a0:	00000f13 	andeq	r0, r0, r3, lsl pc
    79a4:	03180700 	tsteq	r8, #0, 14
    79a8:	0003770f 	andeq	r7, r3, pc, lsl #14
    79ac:	69130c00 	ldmdbvs	r3, {sl, fp}
    79b0:	07000009 	streq	r0, [r0, -r9]
    79b4:	87150319 			; <UNDEFINED> instruction: 0x87150319
    79b8:	2c000003 	stccs	0, cr0, [r0], {3}
    79bc:	03070c00 	movweq	r0, #31744	; 0x7c00
    79c0:	03870000 	orreq	r0, r7, #0
    79c4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    79c8:	03000000 	movweq	r0, #0
    79cc:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    79d0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    79d4:	00000be8 	andeq	r0, r0, r8, ror #23
    79d8:	1b031c07 	blne	ce9fc <__ccfg+0xaea54>
    79dc:	00000314 	andeq	r0, r0, r4, lsl r3
    79e0:	000bc811 	andeq	ip, fp, r1, lsl r8
    79e4:	031e0700 	tsteq	lr, #0, 14
    79e8:	0003a914 	andeq	sl, r3, r4, lsl r9
    79ec:	0b010100 	bleq	47df4 <__ccfg+0x27e4c>
    79f0:	00038d04 	andeq	r8, r3, r4, lsl #26
    79f4:	1e570a00 	vnmlsne.f32	s1, s14, s0
    79f8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    79fc:	0001890e 	andeq	r8, r1, lr, lsl #18
    7a00:	16010100 	strne	r0, [r1], -r0, lsl #2
    7a04:	001e6101 	andseq	r6, lr, r1, lsl #2
    7a08:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    7a0c:	00008101 	andeq	r8, r0, r1, lsl #2
    7a10:	00253c00 	eoreq	r3, r5, r0, lsl #24
    7a14:	0025b400 	eoreq	fp, r5, r0, lsl #8
    7a18:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    7a1c:	01007473 	tsteq	r0, r3, ror r4
    7a20:	008f120d 	addeq	r1, pc, sp, lsl #4
    7a24:	25d70000 	ldrbcs	r0, [r7]
    7a28:	62170000 	andsvs	r0, r7, #0
    7a2c:	01006675 	tsteq	r0, r5, ror r6
    7a30:	01891c0d 	orreq	r1, r9, sp, lsl #24
    7a34:	25f50000 	ldrbcs	r0, [r5, #0]!
    7a38:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    7a3c:	01006e65 	tsteq	r0, r5, ror #28
    7a40:	0081250d 	addeq	r2, r1, sp, lsl #10
    7a44:	264a0000 	strbcs	r0, [sl], -r0
    7a48:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    7a4c:	01000026 	tsteq	r0, r6, lsr #32
    7a50:	00810611 	addeq	r0, r1, r1, lsl r6
    7a54:	269f0000 	ldrcs	r0, [pc], r0
    7a58:	00000000 	andeq	r0, r0, r0
    7a5c:	0000044c 	andeq	r0, r0, ip, asr #8
    7a60:	1e450003 	cdpne	0, 4, cr0, cr5, cr3, {0}
    7a64:	01040000 	mrseq	r0, (UNDEF: 4)
    7a68:	000000a3 	andeq	r0, r0, r3, lsr #1
    7a6c:	001e710c 	andseq	r7, lr, ip, lsl #2
    7a70:	000e0800 	andeq	r0, lr, r0, lsl #16
    7a74:	000d4800 	andeq	r4, sp, r0, lsl #16
    7a78:	00000000 	andeq	r0, r0, r0
    7a7c:	00531800 	subseq	r1, r3, r0, lsl #16
    7a80:	06010200 	streq	r0, [r1], -r0, lsl #4
    7a84:	00000c69 	andeq	r0, r0, r9, ror #24
    7a88:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    7a8c:	0200000a 	andeq	r0, r0, #10
    7a90:	08090504 	stmdaeq	r9, {r2, r8, sl}
    7a94:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7a98:	00080405 	andeq	r0, r8, r5, lsl #8
    7a9c:	2a1a0300 	bcs	6886a4 <__ccfg+0x6686fc>
    7aa0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7aa4:	00004d18 	andeq	r4, r0, r8, lsl sp
    7aa8:	08010200 	stmdaeq	r1, {r9}
    7aac:	00000c67 	andeq	r0, r0, r7, ror #24
    7ab0:	002e1003 	eoreq	r1, lr, r3
    7ab4:	19310200 	ldmdbne	r1!, {r9}
    7ab8:	00000060 	andeq	r0, r0, r0, rrx
    7abc:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    7ac0:	0300000d 	movweq	r0, #13
    7ac4:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    7ac8:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7acc:	02000000 	andeq	r0, r0, #0
    7ad0:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    7ad4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ad8:	00043407 	andeq	r3, r4, r7, lsl #8
    7adc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7ae0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7ae4:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    7ae8:	03000004 	movweq	r0, #4
    7aec:	0000052a 	andeq	r0, r0, sl, lsr #10
    7af0:	9b1b2803 	blls	6d1b04 <__ccfg+0x6b1b5c>
    7af4:	05000000 	streq	r0, [r0, #-0]
    7af8:	00000b9c 	muleq	r0, ip, fp
    7afc:	b3000904 	movwlt	r0, #2308	; 0x904
    7b00:	06000000 	streq	r0, [r0], -r0
    7b04:	00000879 	andeq	r0, r0, r9, ror r8
    7b08:	000000b3 	strheq	r0, [r0], -r3
    7b0c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7b10:	0b9e0304 	bleq	fe788728 <_estack+0xde783728>
    7b14:	63030000 	movwvs	r0, #12288	; 0x3000
    7b18:	00008f18 	andeq	r8, r0, r8, lsl pc
    7b1c:	28f90300 	ldmcs	r9!, {r8, r9}^
    7b20:	27040000 	strcs	r0, [r4, -r0]
    7b24:	00005412 	andeq	r5, r0, r2, lsl r4
    7b28:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7b2c:	c0030000 	andgt	r0, r3, r0
    7b30:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    7b34:	0041122b 	subeq	r1, r1, fp, lsr #4
    7b38:	d2090000 	andle	r0, r9, #0
    7b3c:	03000000 	movweq	r0, #0
    7b40:	0000294b 	andeq	r2, r0, fp, asr #18
    7b44:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7b48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7b4c:	000000e3 	andeq	r0, r0, r3, ror #1
    7b50:	00065203 	andeq	r5, r6, r3, lsl #4
    7b54:	122d0400 	eorne	r0, sp, #0, 8
    7b58:	00000067 	andeq	r0, r0, r7, rrx
    7b5c:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    7b60:	00018e09 	andeq	r8, r1, r9, lsl #28
    7b64:	002b0b00 	eoreq	r0, fp, r0, lsl #22
    7b68:	34040000 	strcc	r0, [r4], #-0
    7b6c:	0000d207 	andeq	sp, r0, r7, lsl #4
    7b70:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7b74:	06580b00 	ldrbeq	r0, [r8], -r0, lsl #22
    7b78:	35040000 	strcc	r0, [r4, #-0]
    7b7c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b80:	06010100 	streq	r0, [r1], -r0, lsl #2
    7b84:	02ef0b00 	rsceq	r0, pc, #0, 22
    7b88:	36040000 	strcc	r0, [r4], -r0
    7b8c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7b94:	06c30b00 	strbeq	r0, [r3], r0, lsl #22
    7b98:	37040000 	strcc	r0, [r4, -r0]
    7b9c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7ba0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7ba4:	0aab0b00 	beq	feaca7ac <_estack+0xdeac57ac>
    7ba8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7bac:	0000d203 	andeq	sp, r0, r3, lsl #4
    7bb0:	00040100 	andeq	r0, r4, r0, lsl #2
    7bb4:	06670c00 	strbteq	r0, [r7], -r0, lsl #24
    7bb8:	3a040000 	bcc	107bc0 <__ccfg+0xe7c18>
    7bbc:	0000d207 	andeq	sp, r0, r7, lsl #4
    7bc0:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    7bc4:	04000009 	streq	r0, [r0], #-9
    7bc8:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7bcc:	0c020000 	stceq	0, cr0, [r2], {-0}
    7bd0:	00000f38 	andeq	r0, r0, r8, lsr pc
    7bd4:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7bd8:	03000000 	movweq	r0, #0
    7bdc:	00091f0c 	andeq	r1, r9, ip, lsl #30
    7be0:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7be4:	000000e3 	andeq	r0, r0, r3, ror #1
    7be8:	25030004 	strcs	r0, [r3, #-4]
    7bec:	04000003 	streq	r0, [r0], #-3
    7bf0:	01000341 	tsteq	r0, r1, asr #6
    7bf4:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7bf8:	0d000001 	stceq	0, cr0, [r0, #-4]
    7bfc:	000006ca 	andeq	r0, r0, sl, asr #13
    7c00:	9a1a4304 	bls	698818 <__ccfg+0x678870>
    7c04:	01000001 	tsteq	r0, r1
    7c08:	01970d01 	orrseq	r0, r7, r1, lsl #26
    7c0c:	45040000 	strmi	r0, [r4, #-0]
    7c10:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    7c14:	0e010100 	adfeqs	f0, f1, f0
    7c18:	0001c104 	andeq	ip, r1, r4, lsl #2
    7c1c:	08010200 	stmdaeq	r1, {r9}
    7c20:	00000c70 	andeq	r0, r0, r0, ror ip
    7c24:	0001c108 	andeq	ip, r1, r8, lsl #2
    7c28:	032e0d00 			; <UNDEFINED> instruction: 0x032e0d00
    7c2c:	45040000 	strmi	r0, [r4, #-0]
    7c30:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    7c34:	0a010100 	beq	4803c <__ccfg+0x28094>
    7c38:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    7c3c:	0000020c 	andeq	r0, r0, ip, lsl #4
    7c40:	000cd60c 	andeq	sp, ip, ip, lsl #12
    7c44:	0b900500 	bleq	fe40904c <_estack+0xde40404c>
    7c48:	00000067 	andeq	r0, r0, r7, rrx
    7c4c:	10730c00 	rsbsne	r0, r3, r0, lsl #24
    7c50:	91050000 	mrsls	r0, (UNDEF: 5)
    7c54:	0000c108 	andeq	ip, r0, r8, lsl #2
    7c58:	bc0c0400 	cfstrslt	mvf0, [ip], {-0}
    7c5c:	05000001 	streq	r0, [r0, #-1]
    7c60:	00de1092 	smullseq	r1, lr, r2, r0
    7c64:	00060000 	andeq	r0, r6, r0
    7c68:	000cca03 	andeq	ip, ip, r3, lsl #20
    7c6c:	03930500 	orrseq	r0, r3, #0, 10
    7c70:	000001db 	ldrdeq	r0, [r0], -fp
    7c74:	00020c0f 	andeq	r0, r2, pc, lsl #24
    7c78:	00022300 	andeq	r2, r2, r0, lsl #6
    7c7c:	0d001000 	stceq	0, cr1, [r0, #-0]
    7c80:	00000949 	andeq	r0, r0, r9, asr #18
    7c84:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    7c88:	01000002 	tsteq	r0, r2
    7c8c:	06010a01 	streq	r0, [r1], -r1, lsl #20
    7c90:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    7c94:	260b0000 	strcs	r0, [fp], -r0
    7c98:	06000009 	streq	r0, [r0], -r9
    7c9c:	00d20793 	smullseq	r0, r2, r3, r7
    7ca0:	07010000 	streq	r0, [r1, -r0]
    7ca4:	d80b0001 	stmdale	fp, {r0}
    7ca8:	06000005 	streq	r0, [r0], -r5
    7cac:	00d20394 	smullseq	r0, r2, r4, r3
    7cb0:	01010000 	mrseq	r0, (UNDEF: 1)
    7cb4:	03000000 	movweq	r0, #0
    7cb8:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
    7cbc:	31039606 	tstcc	r3, r6, lsl #12
    7cc0:	08000002 	stmdaeq	r0, {r1}
    7cc4:	0000025b 	andeq	r0, r0, fp, asr r2
    7cc8:	0002670f 	andeq	r6, r2, pc, lsl #14
    7ccc:	00027700 	andeq	r7, r2, r0, lsl #14
    7cd0:	08001000 	stmdaeq	r0, {ip}
    7cd4:	0000026c 	andeq	r0, r0, ip, ror #4
    7cd8:	0003bd0d 	andeq	fp, r3, sp, lsl #26
    7cdc:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7ce0:	00000277 	andeq	r0, r0, r7, ror r2
    7ce4:	cd0f0101 	stfgts	f0, [pc, #-4]	; 7ce8 <__exidx_end+0x23d0>
    7ce8:	95000000 	strls	r0, [r0, #-0]
    7cec:	10000002 	andne	r0, r0, r2
    7cf0:	028a0800 	addeq	r0, sl, #0, 16
    7cf4:	1a0d0000 	bne	347cfc <__ccfg+0x327d54>
    7cf8:	07000006 	streq	r0, [r0, -r6]
    7cfc:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    7d00:	01010000 	mrseq	r0, (UNDEF: 1)
    7d04:	0008e90d 	andeq	lr, r8, sp, lsl #18
    7d08:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7d0c:	000000e3 	andeq	r0, r0, r3, ror #1
    7d10:	7e110101 	mufvcs	f0, f1, f1
    7d14:	0800000c 	stmdaeq	r0, {r2, r3}
    7d18:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    7d1c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7d20:	0002c904 	andeq	ip, r2, r4, lsl #18
    7d24:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    7d28:	13000002 	movwne	r0, #2
    7d2c:	000000c1 	andeq	r0, r0, r1, asr #1
    7d30:	01c80f00 	biceq	r0, r8, r0, lsl #30
    7d34:	02e00000 	rsceq	r0, r0, #0
    7d38:	00100000 	andseq	r0, r0, r0
    7d3c:	0002d508 	andeq	sp, r2, r8, lsl #10
    7d40:	09f21400 	ldmibeq	r2!, {sl, ip}^
    7d44:	7f080000 	svcvc	0x00080000
    7d48:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    7d4c:	01010000 	mrseq	r0, (UNDEF: 1)
    7d50:	0003a914 	andeq	sl, r3, r4, lsl r9
    7d54:	01820800 	orreq	r0, r2, r0, lsl #16
    7d58:	0000ef14 	andeq	lr, r0, r4, lsl pc
    7d5c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7d60:	00000381 	andeq	r0, r0, r1, lsl #7
    7d64:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7d68:	000000e3 	andeq	r0, r0, r3, ror #1
    7d6c:	08150101 	ldmdaeq	r5, {r0, r8}
    7d70:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7d74:	00000339 	andeq	r0, r0, r9, lsr r3
    7d78:	003c9f16 	eorseq	r9, ip, r6, lsl pc
    7d7c:	03070800 	movweq	r0, #30720	; 0x7800
    7d80:	0000c107 	andeq	ip, r0, r7, lsl #2
    7d84:	cb160000 	blgt	587d8c <__ccfg+0x567de4>
    7d88:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7d8c:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7d90:	04000000 	streq	r0, [r0], #-0
    7d94:	0a151100 	beq	54c19c <__ccfg+0x52c1f4>
    7d98:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7d9c:	03120303 	tsteq	r2, #201326592	; 0xc000000
    7da0:	20170000 	andscs	r0, r7, r0
    7da4:	30000000 	andcc	r0, r0, r0
    7da8:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7dac:	000003a9 	andeq	r0, r0, r9, lsr #7
    7db0:	001f2216 	andseq	r2, pc, r6, lsl r2	; <UNPREDICTABLE>
    7db4:	03140800 	tsteq	r4, #0, 16
    7db8:	0000c108 	andeq	ip, r0, r8, lsl #2
    7dbc:	f3160000 	vhadd.u16	d0, d6, d0
    7dc0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7dc4:	c1080315 	tstgt	r8, r5, lsl r3
    7dc8:	02000000 	andeq	r0, r0, #0
    7dcc:	004c8c16 	subeq	r8, ip, r6, lsl ip
    7dd0:	03160800 	tsteq	r6, #0, 16
    7dd4:	0002b60b 	andeq	fp, r2, fp, lsl #12
    7dd8:	52160400 	andspl	r0, r6, #0, 8
    7ddc:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    7de0:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7de4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7de8:	00000f16 	andeq	r0, r0, r6, lsl pc
    7dec:	03180800 	tsteq	r8, #0, 16
    7df0:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7df4:	69160c00 	ldmdbvs	r6, {sl, fp}
    7df8:	08000009 	stmdaeq	r0, {r0, r3}
    7dfc:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7e00:	2c000003 	stccs	0, cr0, [r0], {3}
    7e04:	03390f00 	teqeq	r9, #0, 30
    7e08:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    7e0c:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7e10:	03000000 	movweq	r0, #0
    7e14:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    7e18:	11000003 	tstne	r0, r3
    7e1c:	00000be8 	andeq	r0, r0, r8, ror #23
    7e20:	1b031c08 	blne	cee48 <__ccfg+0xaeea0>
    7e24:	00000346 	andeq	r0, r0, r6, asr #6
    7e28:	000bc814 	andeq	ip, fp, r4, lsl r8
    7e2c:	031e0800 	tsteq	lr, #0, 16
    7e30:	0003db14 	andeq	sp, r3, r4, lsl fp
    7e34:	0e010100 	adfeqs	f0, f1, f0
    7e38:	0003bf04 	andeq	fp, r3, r4, lsl #30
    7e3c:	68011900 	stmdavs	r1, {r8, fp, ip}
    7e40:	0100001e 	tsteq	r0, lr, lsl r0
    7e44:	8101050c 	tsthi	r1, ip, lsl #10
    7e48:	b4000000 	strlt	r0, [r0], #-0
    7e4c:	08000025 	stmdaeq	r0, {r0, r2, r5}
    7e50:	01000026 	tsteq	r0, r6, lsr #32
    7e54:	0004499c 	muleq	r4, ip, r9
    7e58:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    7e5c:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    7e60:	000000c1 	andeq	r0, r0, r1, asr #1
    7e64:	000026e9 	andeq	r2, r0, r9, ror #13
    7e68:	01006d1b 	tsteq	r0, fp, lsl sp
    7e6c:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    7e70:	91020000 	mrsls	r0, (UNDEF: 2)
    7e74:	091d1c74 	ldmdbeq	sp, {r2, r4, r5, r6, sl, fp, ip}
    7e78:	01000026 	tsteq	r0, r6, lsr #32
    7e7c:	0081060e 	addeq	r0, r1, lr, lsl #12
    7e80:	26fc0000 	ldrbtcs	r0, [ip], r0
    7e84:	621e0000 	andsvs	r0, lr, #0
    7e88:	01006675 	tsteq	r0, r5, ror r6
    7e8c:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    7e90:	273b0000 	ldrcs	r0, [fp, -r0]!
    7e94:	611f0000 	tstvs	pc, r0
    7e98:	10010070 	andne	r0, r1, r0, ror r0
    7e9c:	0000b50a 	andeq	fp, r0, sl, lsl #10
    7ea0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    7ea4:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    7ea8:	00000001 	andeq	r0, r0, r1
    7eac:	0000044c 	andeq	r0, r0, ip, asr #8
    7eb0:	1ff10003 	svcne	0x00f10003
    7eb4:	01040000 	mrseq	r0, (UNDEF: 4)
    7eb8:	000000a3 	andeq	r0, r0, r3, lsr #1
    7ebc:	001eb30c 	andseq	fp, lr, ip, lsl #6
    7ec0:	000e0800 	andeq	r0, lr, r0, lsl #16
    7ec4:	000d5800 	andeq	r5, sp, r0, lsl #16
    7ec8:	00000000 	andeq	r0, r0, r0
    7ecc:	0054bd00 	subseq	fp, r4, r0, lsl #26
    7ed0:	06010200 	streq	r0, [r1], -r0, lsl #4
    7ed4:	00000c69 	andeq	r0, r0, r9, ror #24
    7ed8:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    7edc:	0200000a 	andeq	r0, r0, #10
    7ee0:	08090504 	stmdaeq	r9, {r2, r8, sl}
    7ee4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ee8:	00080405 	andeq	r0, r8, r5, lsl #8
    7eec:	2a1a0300 	bcs	688af4 <__ccfg+0x668b4c>
    7ef0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7ef4:	00004d18 	andeq	r4, r0, r8, lsl sp
    7ef8:	08010200 	stmdaeq	r1, {r9}
    7efc:	00000c67 	andeq	r0, r0, r7, ror #24
    7f00:	002e1003 	eoreq	r1, lr, r3
    7f04:	19310200 	ldmdbne	r1!, {r9}
    7f08:	00000060 	andeq	r0, r0, r0, rrx
    7f0c:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    7f10:	0300000d 	movweq	r0, #13
    7f14:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    7f18:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7f1c:	02000000 	andeq	r0, r0, #0
    7f20:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    7f24:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7f28:	00043407 	andeq	r3, r4, r7, lsl #8
    7f2c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7f30:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7f34:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    7f38:	03000004 	movweq	r0, #4
    7f3c:	0000052a 	andeq	r0, r0, sl, lsr #10
    7f40:	9b1b2803 	blls	6d1f54 <__ccfg+0x6b1fac>
    7f44:	05000000 	streq	r0, [r0, #-0]
    7f48:	00000b9c 	muleq	r0, ip, fp
    7f4c:	b3000904 	movwlt	r0, #2308	; 0x904
    7f50:	06000000 	streq	r0, [r0], -r0
    7f54:	00000879 	andeq	r0, r0, r9, ror r8
    7f58:	000000b3 	strheq	r0, [r0], -r3
    7f5c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7f60:	0b9e0304 	bleq	fe788b78 <_estack+0xde783b78>
    7f64:	63030000 	movwvs	r0, #12288	; 0x3000
    7f68:	00008f18 	andeq	r8, r0, r8, lsl pc
    7f6c:	28f90300 	ldmcs	r9!, {r8, r9}^
    7f70:	27040000 	strcs	r0, [r4, -r0]
    7f74:	00005412 	andeq	r5, r0, r2, lsl r4
    7f78:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7f7c:	c0030000 	andgt	r0, r3, r0
    7f80:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    7f84:	0041122b 	subeq	r1, r1, fp, lsr #4
    7f88:	d2090000 	andle	r0, r9, #0
    7f8c:	03000000 	movweq	r0, #0
    7f90:	0000294b 	andeq	r2, r0, fp, asr #18
    7f94:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7f98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7f9c:	000000e3 	andeq	r0, r0, r3, ror #1
    7fa0:	00065203 	andeq	r5, r6, r3, lsl #4
    7fa4:	122d0400 	eorne	r0, sp, #0, 8
    7fa8:	00000067 	andeq	r0, r0, r7, rrx
    7fac:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    7fb0:	00018e09 	andeq	r8, r1, r9, lsl #28
    7fb4:	002b0b00 	eoreq	r0, fp, r0, lsl #22
    7fb8:	34040000 	strcc	r0, [r4], #-0
    7fbc:	0000d207 	andeq	sp, r0, r7, lsl #4
    7fc0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7fc4:	06580b00 	ldrbeq	r0, [r8], -r0, lsl #22
    7fc8:	35040000 	strcc	r0, [r4, #-0]
    7fcc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7fd0:	06010100 	streq	r0, [r1], -r0, lsl #2
    7fd4:	02ef0b00 	rsceq	r0, pc, #0, 22
    7fd8:	36040000 	strcc	r0, [r4], -r0
    7fdc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7fe0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7fe4:	06c30b00 	strbeq	r0, [r3], r0, lsl #22
    7fe8:	37040000 	strcc	r0, [r4, -r0]
    7fec:	0000d203 	andeq	sp, r0, r3, lsl #4
    7ff0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7ff4:	0aab0b00 	beq	feacabfc <_estack+0xdeac5bfc>
    7ff8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7ffc:	0000d203 	andeq	sp, r0, r3, lsl #4
    8000:	00040100 	andeq	r0, r4, r0, lsl #2
    8004:	06670c00 	strbteq	r0, [r7], -r0, lsl #24
    8008:	3a040000 	bcc	108010 <__ccfg+0xe8068>
    800c:	0000d207 	andeq	sp, r0, r7, lsl #4
    8010:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    8014:	04000009 	streq	r0, [r0], #-9
    8018:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    801c:	0c020000 	stceq	0, cr0, [r2], {-0}
    8020:	00000f38 	andeq	r0, r0, r8, lsr pc
    8024:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    8028:	03000000 	movweq	r0, #0
    802c:	00091f0c 	andeq	r1, r9, ip, lsl #30
    8030:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    8034:	000000e3 	andeq	r0, r0, r3, ror #1
    8038:	25030004 	strcs	r0, [r3, #-4]
    803c:	04000003 	streq	r0, [r0], #-3
    8040:	01000341 	tsteq	r0, r1, asr #6
    8044:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    8048:	0d000001 	stceq	0, cr0, [r0, #-4]
    804c:	000006ca 	andeq	r0, r0, sl, asr #13
    8050:	9a1a4304 	bls	698c68 <__ccfg+0x678cc0>
    8054:	01000001 	tsteq	r0, r1
    8058:	01970d01 	orrseq	r0, r7, r1, lsl #26
    805c:	45040000 	strmi	r0, [r4, #-0]
    8060:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    8064:	0e010100 	adfeqs	f0, f1, f0
    8068:	0001c104 	andeq	ip, r1, r4, lsl #2
    806c:	08010200 	stmdaeq	r1, {r9}
    8070:	00000c70 	andeq	r0, r0, r0, ror ip
    8074:	0001c108 	andeq	ip, r1, r8, lsl #2
    8078:	032e0d00 			; <UNDEFINED> instruction: 0x032e0d00
    807c:	45040000 	strmi	r0, [r4, #-0]
    8080:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    8084:	0a010100 	beq	4848c <__ccfg+0x284e4>
    8088:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    808c:	0000020c 	andeq	r0, r0, ip, lsl #4
    8090:	000cd60c 	andeq	sp, ip, ip, lsl #12
    8094:	0b900500 	bleq	fe40949c <_estack+0xde40449c>
    8098:	00000067 	andeq	r0, r0, r7, rrx
    809c:	10730c00 	rsbsne	r0, r3, r0, lsl #24
    80a0:	91050000 	mrsls	r0, (UNDEF: 5)
    80a4:	0000c108 	andeq	ip, r0, r8, lsl #2
    80a8:	bc0c0400 	cfstrslt	mvf0, [ip], {-0}
    80ac:	05000001 	streq	r0, [r0, #-1]
    80b0:	00de1092 	smullseq	r1, lr, r2, r0
    80b4:	00060000 	andeq	r0, r6, r0
    80b8:	000cca03 	andeq	ip, ip, r3, lsl #20
    80bc:	03930500 	orrseq	r0, r3, #0, 10
    80c0:	000001db 	ldrdeq	r0, [r0], -fp
    80c4:	00020c0f 	andeq	r0, r2, pc, lsl #24
    80c8:	00022300 	andeq	r2, r2, r0, lsl #6
    80cc:	0d001000 	stceq	0, cr1, [r0, #-0]
    80d0:	00000949 	andeq	r0, r0, r9, asr #18
    80d4:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    80d8:	01000002 	tsteq	r0, r2
    80dc:	06010a01 	streq	r0, [r1], -r1, lsl #20
    80e0:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    80e4:	260b0000 	strcs	r0, [fp], -r0
    80e8:	06000009 	streq	r0, [r0], -r9
    80ec:	00d20793 	smullseq	r0, r2, r3, r7
    80f0:	07010000 	streq	r0, [r1, -r0]
    80f4:	d80b0001 	stmdale	fp, {r0}
    80f8:	06000005 	streq	r0, [r0], -r5
    80fc:	00d20394 	smullseq	r0, r2, r4, r3
    8100:	01010000 	mrseq	r0, (UNDEF: 1)
    8104:	03000000 	movweq	r0, #0
    8108:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
    810c:	31039606 	tstcc	r3, r6, lsl #12
    8110:	08000002 	stmdaeq	r0, {r1}
    8114:	0000025b 	andeq	r0, r0, fp, asr r2
    8118:	0002670f 	andeq	r6, r2, pc, lsl #14
    811c:	00027700 	andeq	r7, r2, r0, lsl #14
    8120:	08001000 	stmdaeq	r0, {ip}
    8124:	0000026c 	andeq	r0, r0, ip, ror #4
    8128:	0003bd0d 	andeq	fp, r3, sp, lsl #26
    812c:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    8130:	00000277 	andeq	r0, r0, r7, ror r2
    8134:	cd0f0101 	stfgts	f0, [pc, #-4]	; 8138 <__exidx_end+0x2820>
    8138:	95000000 	strls	r0, [r0, #-0]
    813c:	10000002 	andne	r0, r0, r2
    8140:	028a0800 	addeq	r0, sl, #0, 16
    8144:	1a0d0000 	bne	34814c <__ccfg+0x3281a4>
    8148:	07000006 	streq	r0, [r0, -r6]
    814c:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    8150:	01010000 	mrseq	r0, (UNDEF: 1)
    8154:	0008e90d 	andeq	lr, r8, sp, lsl #18
    8158:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    815c:	000000e3 	andeq	r0, r0, r3, ror #1
    8160:	7e110101 	mufvcs	f0, f1, f1
    8164:	0800000c 	stmdaeq	r0, {r2, r3}
    8168:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    816c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    8170:	0002c904 	andeq	ip, r2, r4, lsl #18
    8174:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    8178:	13000002 	movwne	r0, #2
    817c:	000000c1 	andeq	r0, r0, r1, asr #1
    8180:	01c80f00 	biceq	r0, r8, r0, lsl #30
    8184:	02e00000 	rsceq	r0, r0, #0
    8188:	00100000 	andseq	r0, r0, r0
    818c:	0002d508 	andeq	sp, r2, r8, lsl #10
    8190:	09f21400 	ldmibeq	r2!, {sl, ip}^
    8194:	7f080000 	svcvc	0x00080000
    8198:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    819c:	01010000 	mrseq	r0, (UNDEF: 1)
    81a0:	0003a914 	andeq	sl, r3, r4, lsl r9
    81a4:	01820800 	orreq	r0, r2, r0, lsl #16
    81a8:	0000ef14 	andeq	lr, r0, r4, lsl pc
    81ac:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    81b0:	00000381 	andeq	r0, r0, r1, lsl #7
    81b4:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    81b8:	000000e3 	andeq	r0, r0, r3, ror #1
    81bc:	08150101 	ldmdaeq	r5, {r0, r8}
    81c0:	09030308 	stmdbeq	r3, {r3, r8, r9}
    81c4:	00000339 	andeq	r0, r0, r9, lsr r3
    81c8:	003c9f16 	eorseq	r9, ip, r6, lsl pc
    81cc:	03070800 	movweq	r0, #30720	; 0x7800
    81d0:	0000c107 	andeq	ip, r0, r7, lsl #2
    81d4:	cb160000 	blgt	5881dc <__ccfg+0x568234>
    81d8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    81dc:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    81e0:	04000000 	streq	r0, [r0], #-0
    81e4:	0a151100 	beq	54c5ec <__ccfg+0x52c644>
    81e8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    81ec:	03120303 	tsteq	r2, #201326592	; 0xc000000
    81f0:	20170000 	andscs	r0, r7, r0
    81f4:	30000000 	andcc	r0, r0, r0
    81f8:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    81fc:	000003a9 	andeq	r0, r0, r9, lsr #7
    8200:	001f2216 	andseq	r2, pc, r6, lsl r2	; <UNPREDICTABLE>
    8204:	03140800 	tsteq	r4, #0, 16
    8208:	0000c108 	andeq	ip, r0, r8, lsl #2
    820c:	f3160000 	vhadd.u16	d0, d6, d0
    8210:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8214:	c1080315 	tstgt	r8, r5, lsl r3
    8218:	02000000 	andeq	r0, r0, #0
    821c:	004c8c16 	subeq	r8, ip, r6, lsl ip
    8220:	03160800 	tsteq	r6, #0, 16
    8224:	0002b60b 	andeq	fp, r2, fp, lsl #12
    8228:	52160400 	andspl	r0, r6, #0, 8
    822c:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    8230:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    8234:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8238:	00000f16 	andeq	r0, r0, r6, lsl pc
    823c:	03180800 	tsteq	r8, #0, 16
    8240:	0003a90f 	andeq	sl, r3, pc, lsl #18
    8244:	69160c00 	ldmdbvs	r6, {sl, fp}
    8248:	08000009 	stmdaeq	r0, {r0, r3}
    824c:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    8250:	2c000003 	stccs	0, cr0, [r0], {3}
    8254:	03390f00 	teqeq	r9, #0, 30
    8258:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    825c:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    8260:	03000000 	movweq	r0, #0
    8264:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    8268:	11000003 	tstne	r0, r3
    826c:	00000be8 	andeq	r0, r0, r8, ror #23
    8270:	1b031c08 	blne	cf298 <__ccfg+0xaf2f0>
    8274:	00000346 	andeq	r0, r0, r6, asr #6
    8278:	000bc814 	andeq	ip, fp, r4, lsl r8
    827c:	031e0800 	tsteq	lr, #0, 16
    8280:	0003db14 	andeq	sp, r3, r4, lsl fp
    8284:	0e010100 	adfeqs	f0, f1, f0
    8288:	0003bf04 	andeq	fp, r3, r4, lsl #30
    828c:	1e570d00 	cdpne	13, 5, cr0, cr7, cr0, {0}
    8290:	0a010000 	beq	48298 <__ccfg+0x282f0>
    8294:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    8298:	19010100 	stmdbne	r1, {r8}
    829c:	001ef401 	andseq	pc, lr, r1, lsl #8
    82a0:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    82a4:	00008101 	andeq	r8, r0, r1, lsl #2
    82a8:	00260800 	eoreq	r0, r6, r0, lsl #16
    82ac:	00266800 	eoreq	r6, r6, r0, lsl #16
    82b0:	499c0100 	ldmibmi	ip, {r8}
    82b4:	1a000004 	bne	82cc <__exidx_end+0x29b4>
    82b8:	01007473 	tsteq	r0, r3, ror r4
    82bc:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    82c0:	276f0000 	strbcs	r0, [pc, -r0]!
    82c4:	661b0000 	ldrvs	r0, [fp], -r0
    82c8:	0100746d 	tsteq	r0, sp, ror #8
    82cc:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    82d0:	91020000 	mrsls	r0, (UNDEF: 2)
    82d4:	091d1c74 	ldmdbeq	sp, {r2, r4, r5, r6, sl, fp, ip}
    82d8:	01000026 	tsteq	r0, r6, lsr #32
    82dc:	00810613 	addeq	r0, r1, r3, lsl r6
    82e0:	278d0000 	strcs	r0, [sp, r0]
    82e4:	611e0000 	tstvs	lr, r0
    82e8:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    82ec:	0000b50a 	andeq	fp, r0, sl, lsl #10
    82f0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    82f4:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    82f8:	00000001 	andeq	r0, r0, r1
    82fc:	00002474 	andeq	r2, r0, r4, ror r4
    8300:	218c0003 	orrcs	r0, ip, r3
    8304:	01040000 	mrseq	r0, (UNDEF: 4)
    8308:	000000a3 	andeq	r0, r0, r3, lsr #1
    830c:	0022d90c 	eoreq	sp, r2, ip, lsl #18
    8310:	000e0800 	andeq	r0, lr, r0, lsl #16
    8314:	000ee000 	andeq	lr, lr, r0
    8318:	00000000 	andeq	r0, r0, r0
    831c:	00567300 	subseq	r7, r6, r0, lsl #6
    8320:	2ba90200 	blcs	fea48b28 <_estack+0xdea43b28>
    8324:	22060000 	andcs	r0, r6, #0
    8328:	00003117 	andeq	r3, r0, r7, lsl r1
    832c:	06010300 	streq	r0, [r1], -r0, lsl #6
    8330:	00000c69 	andeq	r0, r0, r9, ror #24
    8334:	0031eb02 	eorseq	lr, r1, r2, lsl #22
    8338:	18250600 	stmdane	r5!, {r9, sl}
    833c:	00000044 	andeq	r0, r0, r4, asr #32
    8340:	77050203 	strvc	r0, [r5, -r3, lsl #4]
    8344:	0300000a 	movweq	r0, #10
    8348:	08090504 	stmdaeq	r9, {r2, r8, sl}
    834c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8350:	00080405 	andeq	r0, r8, r5, lsl #8
    8354:	2a1a0200 	bcs	688b5c <__ccfg+0x668bb4>
    8358:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    835c:	00006518 	andeq	r6, r0, r8, lsl r5
    8360:	08010300 	stmdaeq	r1, {r8, r9}
    8364:	00000c67 	andeq	r0, r0, r7, ror #24
    8368:	002e1002 	eoreq	r1, lr, r2
    836c:	19310600 	ldmdbne	r1!, {r9, sl}
    8370:	00000078 	andeq	r0, r0, r8, ror r0
    8374:	64070203 	strvs	r0, [r7], #-515	; 0xfffffdfd
    8378:	0200000d 	andeq	r0, r0, #13
    837c:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    8380:	90193406 	andsls	r3, r9, r6, lsl #8
    8384:	04000000 	streq	r0, [r0], #-0
    8388:	0000007f 	andeq	r0, r0, pc, ror r0
    838c:	39070403 	stmdbcc	r7, {r0, r1, sl}
    8390:	05000004 	streq	r0, [r0, #-4]
    8394:	00000090 	muleq	r0, r0, r0
    8398:	34070803 	strcc	r0, [r7], #-2051	; 0xfffff7fd
    839c:	06000004 	streq	r0, [r0], -r4
    83a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    83a4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    83a8:	00043e07 	andeq	r3, r4, r7, lsl #28
    83ac:	0be10700 	bleq	ff849fb4 <_estack+0xdf844fb4>
    83b0:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    83b4:	00aa1701 	adceq	r1, sl, r1, lsl #14
    83b8:	47020000 	strmi	r0, [r2, -r0]
    83bc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    83c0:	004b0e2e 	subeq	r0, fp, lr, lsr #28
    83c4:	07020000 	streq	r0, [r2, -r0]
    83c8:	08000003 	stmdaeq	r0, {r0, r1}
    83cc:	004b0e74 	subeq	r0, fp, r4, ror lr
    83d0:	04080000 	streq	r0, [r8], #-0
    83d4:	f803a508 			; <UNDEFINED> instruction: 0xf803a508
    83d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    83dc:	00000778 	andeq	r0, r0, r8, ror r7
    83e0:	b10ca708 	tstlt	ip, r8, lsl #14
    83e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    83e8:	00000ac0 	andeq	r0, r0, r0, asr #21
    83ec:	f813a808 			; <UNDEFINED> instruction: 0xf813a808
    83f0:	00000000 	andeq	r0, r0, r0
    83f4:	0000650a 	andeq	r6, r0, sl, lsl #10
    83f8:	00010800 	andeq	r0, r1, r0, lsl #16
    83fc:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8400:	00030000 	andeq	r0, r3, r0
    8404:	a208080c 	andge	r0, r8, #12, 16	; 0xc0000
    8408:	00012c09 	andeq	r2, r1, r9, lsl #24
    840c:	03a10d00 			; <UNDEFINED> instruction: 0x03a10d00
    8410:	a4080000 	strge	r0, [r8], #-0
    8414:	0000a307 	andeq	sl, r0, r7, lsl #6
    8418:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    841c:	08000006 	stmdaeq	r0, {r1, r2}
    8420:	00d605a9 	sbcseq	r0, r6, r9, lsr #11
    8424:	00040000 	andeq	r0, r4, r0
    8428:	0008c102 	andeq	ip, r8, r2, lsl #2
    842c:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    8430:	00000108 	andeq	r0, r0, r8, lsl #2
    8434:	4e02040e 	cdpmi	4, 0, cr0, cr2, cr14, {0}
    8438:	09000008 	stmdbeq	r0, {r3}
    843c:	00901916 	addseq	r1, r0, r6, lsl r9
    8440:	5b020000 	blpl	88448 <__ccfg+0x684a0>
    8444:	0a000002 	beq	8454 <__exidx_end+0x2b3c>
    8448:	00a30d0c 	adceq	r0, r3, ip, lsl #26
    844c:	36020000 	strcc	r0, [r2], -r0
    8450:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8454:	01461b23 	cmpeq	r6, r3, lsr #22
    8458:	3a0f0000 	bcc	3c8460 <__ccfg+0x3a84b8>
    845c:	18000003 	stmdane	r0, {r0, r1}
    8460:	b8083409 	stmdalt	r8, {r0, r3, sl, ip, sp}
    8464:	0d000001 	stceq	0, cr0, [r0, #-4]
    8468:	00000ec2 	andeq	r0, r0, r2, asr #29
    846c:	b8133609 	ldmdalt	r3, {r0, r3, r9, sl, ip, sp}
    8470:	00000001 	andeq	r0, r0, r1
    8474:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    8478:	a3073709 	movwge	r3, #30473	; 0x7709
    847c:	04000000 	streq	r0, [r0], #-0
    8480:	000b6e0d 	andeq	r6, fp, sp, lsl #28
    8484:	0b370900 	bleq	dca88c <__ccfg+0xdaa8e4>
    8488:	000000a3 	andeq	r0, r0, r3, lsr #1
    848c:	43f30d08 	mvnsmi	r0, #8, 26	; 0x200
    8490:	37090000 	strcc	r0, [r9, -r0]
    8494:	0000a314 	andeq	sl, r0, r4, lsl r3
    8498:	680d0c00 	stmdavs	sp, {sl, fp}
    849c:	09000004 	stmdbeq	r0, {r2}
    84a0:	00a31b37 	adceq	r1, r3, r7, lsr fp
    84a4:	10100000 	andsne	r0, r0, r0
    84a8:	0900785f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    84ac:	01be0b38 			; <UNDEFINED> instruction: 0x01be0b38
    84b0:	00140000 	andseq	r0, r4, r0
    84b4:	015e0411 	cmpeq	lr, r1, lsl r4
    84b8:	3a0a0000 	bcc	2884c0 <__ccfg+0x268518>
    84bc:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    84c0:	0b000001 	bleq	84cc <__exidx_end+0x2bb4>
    84c4:	000000aa 	andeq	r0, r0, sl, lsr #1
    84c8:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
    84cc:	2400000b 	strcs	r0, [r0], #-11
    84d0:	51083c09 	tstpl	r8, r9, lsl #24
    84d4:	0d000002 	stceq	0, cr0, [r0, #-8]
    84d8:	00000578 	andeq	r0, r0, r8, ror r5
    84dc:	a3093e09 	movwge	r3, #40457	; 0x9e09
    84e0:	00000000 	andeq	r0, r0, r0
    84e4:	0003ca0d 	andeq	ip, r3, sp, lsl #20
    84e8:	093f0900 	ldmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    84ec:	000000a3 	andeq	r0, r0, r3, lsr #1
    84f0:	036b0d04 	cmneq	fp, #4, 26	; 0x100
    84f4:	40090000 	andmi	r0, r9, r0
    84f8:	0000a309 	andeq	sl, r0, r9, lsl #6
    84fc:	800d0800 	andhi	r0, sp, r0, lsl #16
    8500:	09000006 	stmdbeq	r0, {r1, r2}
    8504:	00a30941 	adceq	r0, r3, r1, asr #18
    8508:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    850c:	00000960 	andeq	r0, r0, r0, ror #18
    8510:	a3094209 	movwge	r4, #37385	; 0x9209
    8514:	10000000 	andne	r0, r0, r0
    8518:	000ada0d 	andeq	sp, sl, sp, lsl #20
    851c:	09430900 	stmdbeq	r3, {r8, fp}^
    8520:	000000a3 	andeq	r0, r0, r3, lsr #1
    8524:	034e0d14 	movteq	r0, #60692	; 0xed14
    8528:	44090000 	strmi	r0, [r9], #-0
    852c:	0000a309 	andeq	sl, r0, r9, lsl #6
    8530:	810d1800 	tsthi	sp, r0, lsl #16
    8534:	09000005 	stmdbeq	r0, {r0, r2}
    8538:	00a30945 	adceq	r0, r3, r5, asr #18
    853c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8540:	000008fc 	strdeq	r0, [r0], -ip
    8544:	a3094609 	movwge	r4, #38409	; 0x9609
    8548:	20000000 	andcs	r0, r0, r0
    854c:	00321200 	eorseq	r1, r2, r0, lsl #4
    8550:	01080000 	mrseq	r0, (UNDEF: 8)
    8554:	96084f09 	strls	r4, [r8], -r9, lsl #30
    8558:	0d000002 	stceq	0, cr0, [r0, #-8]
    855c:	00000d2b 	andeq	r0, r0, fp, lsr #26
    8560:	960a5009 	strls	r5, [sl], -r9
    8564:	00000002 	andeq	r0, r0, r2
    8568:	000c230d 	andeq	r2, ip, sp, lsl #6
    856c:	09510900 	ldmdbeq	r1, {r8, fp}^
    8570:	00000296 	muleq	r0, r6, r2
    8574:	0dc41380 	stcleq	3, cr1, [r4, #512]	; 0x200
    8578:	53090000 	movwpl	r0, #36864	; 0x9000
    857c:	00013a0a 	andeq	r3, r1, sl, lsl #20
    8580:	13010000 	movwne	r0, #4096	; 0x1000
    8584:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    8588:	3a0a5609 	bcc	29ddb4 <__ccfg+0x27de0c>
    858c:	04000001 	streq	r0, [r0], #-1
    8590:	380a0001 	stmdacc	sl, {r0}
    8594:	a6000001 	strge	r0, [r0], -r1
    8598:	0b000002 	bleq	85a8 <__exidx_end+0x2c90>
    859c:	000000aa 	andeq	r0, r0, sl, lsr #1
    85a0:	2212001f 	andscs	r0, r2, #31
    85a4:	9000000a 	andls	r0, r0, sl
    85a8:	08620901 	stmdaeq	r2!, {r0, r8, fp}^
    85ac:	000002e9 	andeq	r0, r0, r9, ror #5
    85b0:	000ec20d 	andeq	ip, lr, sp, lsl #4
    85b4:	12630900 	rsbne	r0, r3, #0, 18
    85b8:	000002e9 	andeq	r0, r0, r9, ror #5
    85bc:	05900d00 	ldreq	r0, [r0, #3328]	; 0xd00
    85c0:	64090000 	strvs	r0, [r9], #-0
    85c4:	0000a306 	andeq	sl, r0, r6, lsl #6
    85c8:	0f0d0400 	svceq	0x000d0400
    85cc:	09000003 	stmdbeq	r0, {r0, r1}
    85d0:	02ef0966 	rsceq	r0, pc, #1671168	; 0x198000
    85d4:	0d080000 	stceq	0, cr0, [r8, #-0]
    85d8:	00000032 	andeq	r0, r0, r2, lsr r0
    85dc:	511e6709 	tstpl	lr, r9, lsl #14
    85e0:	88000002 	stmdahi	r0, {r1}
    85e4:	a6041100 	strge	r1, [r4], -r0, lsl #2
    85e8:	0a000002 	beq	85f8 <__exidx_end+0x2ce0>
    85ec:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    85f0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    85f4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    85f8:	11001f00 	tstne	r0, r0, lsl #30
    85fc:	00030504 	andeq	r0, r3, r4, lsl #10
    8600:	0f011400 	svceq	0x00011400
    8604:	00000cc3 	andeq	r0, r0, r3, asr #25
    8608:	087a0908 	ldmdaeq	sl!, {r3, r8, fp}^
    860c:	0000032f 	andeq	r0, r0, pc, lsr #6
    8610:	000cd50d 	andeq	sp, ip, sp, lsl #10
    8614:	117b0900 	cmnne	fp, r0, lsl #18
    8618:	0000032f 	andeq	r0, r0, pc, lsr #6
    861c:	1d9e0d00 	ldcne	13, cr0, [lr]
    8620:	7c090000 	stcvc	0, cr0, [r9], {-0}
    8624:	0000a306 	andeq	sl, r0, r6, lsl #6
    8628:	11000400 	tstne	r0, r0, lsl #8
    862c:	00006504 	andeq	r6, r0, r4, lsl #10
    8630:	04600f00 	strbteq	r0, [r0], #-3840	; 0xfffff100
    8634:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    8638:	047808ba 	ldrbteq	r0, [r8], #-2234	; 0xfffff746
    863c:	5f100000 	svcpl	0x00100000
    8640:	bb090070 	bllt	248808 <__ccfg+0x228860>
    8644:	00032f12 	andeq	r2, r3, r2, lsl pc
    8648:	5f100000 	svcpl	0x00100000
    864c:	bc090072 	stclt	0, cr0, [r9], {114}	; 0x72
    8650:	0000a307 	andeq	sl, r0, r7, lsl #6
    8654:	5f100400 	svcpl	0x00100400
    8658:	bd090077 	stclt	0, cr0, [r9, #-476]	; 0xfffffe24
    865c:	0000a307 	andeq	sl, r0, r7, lsl #6
    8660:	bb0d0800 	bllt	34a668 <__ccfg+0x32a6c0>
    8664:	09000001 	stmdbeq	r0, {r0}
    8668:	004409be 	strheq	r0, [r4], #-158	; 0xffffff62
    866c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    8670:	00000865 	andeq	r0, r0, r5, ror #16
    8674:	4409bf09 	strmi	fp, [r9], #-3849	; 0xfffff0f7
    8678:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    867c:	66625f10 	uqadd16vs	r5, r2, r0
    8680:	11c00900 	bicne	r0, r0, r0, lsl #18
    8684:	00000307 	andeq	r0, r0, r7, lsl #6
    8688:	01b20d10 			; <UNDEFINED> instruction: 0x01b20d10
    868c:	c1090000 	mrsgt	r0, (UNDEF: 9)
    8690:	0000a307 	andeq	sl, r0, r7, lsl #6
    8694:	140d1800 	strne	r1, [sp], #-2048	; 0xfffff800
    8698:	09000003 	stmdbeq	r0, {r0, r1}
    869c:	01380ac8 	teqeq	r8, r8, asr #21
    86a0:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    86a4:	00001d2d 	andeq	r1, r0, sp, lsr #26
    86a8:	fd1dca09 	ldc2	10, cr12, [sp, #-36]	; 0xffffffdc	; <UNPREDICTABLE>
    86ac:	20000005 	andcs	r0, r0, r5
    86b0:	001cf40d 	andseq	pc, ip, sp, lsl #8
    86b4:	1dcc0900 	vstrne.16	s1, [ip]	; <UNPREDICTABLE>
    86b8:	00000628 	andeq	r0, r0, r8, lsr #12
    86bc:	0ee20d24 	cdpeq	13, 14, cr0, cr2, cr4, {1}
    86c0:	cf090000 	svcgt	0x00090000
    86c4:	00064d0d 	andeq	r4, r6, sp, lsl #26
    86c8:	e20d2800 	and	r2, sp, #0, 16
    86cc:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    86d0:	066809d0 			; <UNDEFINED> instruction: 0x066809d0
    86d4:	102c0000 	eorne	r0, ip, r0
    86d8:	0062755f 	rsbeq	r7, r2, pc, asr r5
    86dc:	0711d309 	ldreq	sp, [r1, -r9, lsl #6]
    86e0:	30000003 	andcc	r0, r0, r3
    86e4:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    86e8:	12d40900 	sbcsne	r0, r4, #0, 18
    86ec:	0000032f 	andeq	r0, r0, pc, lsr #6
    86f0:	755f1038 	ldrbvc	r1, [pc, #-56]	; 86c0 <__exidx_end+0x2da8>
    86f4:	d5090072 	strle	r0, [r9, #-114]	; 0xffffff8e
    86f8:	0000a307 	andeq	sl, r0, r7, lsl #6
    86fc:	190d3c00 	stmdbne	sp, {sl, fp, ip, sp}
    8700:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    8704:	066e11d8 			; <UNDEFINED> instruction: 0x066e11d8
    8708:	0d400000 	stcleq	0, cr0, [r0, #-0]
    870c:	00000e62 	andeq	r0, r0, r2, ror #28
    8710:	7e11d909 	vnmlsvc.f16	s26, s2, s18	; <UNPREDICTABLE>
    8714:	43000006 	movwmi	r0, #6
    8718:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    871c:	11dc0900 	bicsne	r0, ip, r0, lsl #18
    8720:	00000307 	andeq	r0, r0, r7, lsl #6
    8724:	0b800d44 	bleq	fe00bc3c <_estack+0xde006c3c>
    8728:	df090000 	svcle	0x00090000
    872c:	0000a307 	andeq	sl, r0, r7, lsl #6
    8730:	940d4c00 	strls	r4, [sp], #-3072	; 0xfffff400
    8734:	09000004 	stmdbeq	r0, {r2}
    8738:	00be0ae0 	adcseq	r0, lr, r0, ror #21
    873c:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    8740:	00004751 	andeq	r4, r0, r1, asr r7
    8744:	9712e309 	ldrls	lr, [r2, -r9, lsl #6]
    8748:	54000004 	strpl	r0, [r0], #-4
    874c:	000ba60d 	andeq	sl, fp, sp, lsl #12
    8750:	0ce70900 			; <UNDEFINED> instruction: 0x0ce70900
    8754:	00000152 	andeq	r0, r0, r2, asr r1
    8758:	0a2a0d58 	beq	a8bcc0 <__ccfg+0xa6bd18>
    875c:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    8760:	00012c0e 	andeq	r2, r1, lr, lsl #24
    8764:	950d5c00 	strls	r5, [sp, #-3072]	; 0xfffff400
    8768:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    876c:	00a309ea 	adceq	r0, r3, sl, ror #19
    8770:	00640000 	rsbeq	r0, r4, r0
    8774:	00a30115 	adceq	r0, r3, r5, lsl r1
    8778:	04970000 	ldreq	r0, [r7], #0
    877c:	97160000 	ldrls	r0, [r6, -r0]
    8780:	16000004 	strne	r0, [r0], -r4
    8784:	00000138 	andeq	r0, r0, r8, lsr r1
    8788:	0005eb16 	andeq	lr, r5, r6, lsl fp
    878c:	00a31600 	adceq	r1, r3, r0, lsl #12
    8790:	11000000 	mrsne	r0, (UNDEF: 0)
    8794:	0004a204 	andeq	sl, r4, r4, lsl #4
    8798:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    879c:	5d170000 	ldcpl	0, cr0, [r7, #-0]
    87a0:	2800000d 	stmdacs	r0, {r0, r2, r3}
    87a4:	02650904 	rsbeq	r0, r5, #4, 18	; 0x10000
    87a8:	0005eb08 	andeq	lr, r5, r8, lsl #22
    87ac:	09101800 	ldmdbeq	r0, {fp, ip}
    87b0:	67090000 	strvs	r0, [r9, -r0]
    87b4:	00a30702 	adceq	r0, r3, r2, lsl #14
    87b8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    87bc:	000007ee 	andeq	r0, r0, lr, ror #15
    87c0:	0b026c09 	bleq	a37ec <__ccfg+0x83844>
    87c4:	000006da 	ldrdeq	r0, [r0], -sl
    87c8:	02ff1804 	rscseq	r1, pc, #4, 16	; 0x40000
    87cc:	6c090000 	stcvs	0, cr0, [r9], {-0}
    87d0:	06da1402 	ldrbeq	r1, [sl], r2, lsl #8
    87d4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    87d8:	00000f08 	andeq	r0, r0, r8, lsl #30
    87dc:	1e026c09 	cdpne	12, 0, cr6, cr2, cr9, {0}
    87e0:	000006da 	ldrdeq	r0, [r0], -sl
    87e4:	058b180c 	streq	r1, [fp, #2060]	; 0x80c
    87e8:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    87ec:	00a30802 	adceq	r0, r3, r2, lsl #16
    87f0:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    87f4:	000004e0 	andeq	r0, r0, r0, ror #9
    87f8:	08026f09 	stmdaeq	r2, {r0, r3, r8, r9, sl, fp, sp, lr}
    87fc:	000008da 	ldrdeq	r0, [r0], -sl
    8800:	0e751814 	mrceq	8, 3, r1, cr5, cr4, {0}
    8804:	72090000 	andvc	r0, r9, #0
    8808:	00a30702 	adceq	r0, r3, r2, lsl #14
    880c:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    8810:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    8814:	16027309 	strne	r7, [r2], -r9, lsl #6
    8818:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    881c:	07961834 			; <UNDEFINED> instruction: 0x07961834
    8820:	75090000 	strvc	r0, [r9, #-0]
    8824:	00a30702 	adceq	r0, r3, r2, lsl #14
    8828:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    882c:	00000890 	muleq	r0, r0, r8
    8830:	0a027709 	beq	a645c <__ccfg+0x864b4>
    8834:	00000902 	andeq	r0, r0, r2, lsl #18
    8838:	0363183c 	cmneq	r3, #60, 16	; 0x3c0000
    883c:	7a090000 	bvc	248844 <__ccfg+0x22889c>
    8840:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    8844:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    8848:	0000041e 	andeq	r0, r0, lr, lsl r4
    884c:	07027b09 	streq	r7, [r2, -r9, lsl #22]
    8850:	000000a3 	andeq	r0, r0, r3, lsr #1
    8854:	06151844 	ldreq	r1, [r5], -r4, asr #16
    8858:	7c090000 	stcvc	0, cr0, [r9], {-0}
    885c:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    8860:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    8864:	0000082b 	andeq	r0, r0, fp, lsr #16
    8868:	14027d09 	strne	r7, [r2], #-3337	; 0xfffff2f7
    886c:	00000908 	andeq	r0, r0, r8, lsl #18
    8870:	0b66184c 	bleq	198e9a8 <__ccfg+0x196ea00>
    8874:	80090000 	andhi	r0, r9, r0
    8878:	00a30702 	adceq	r0, r3, r2, lsl #14
    887c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    8880:	00000c5f 	andeq	r0, r0, pc, asr ip
    8884:	09028109 	stmdbeq	r2, {r0, r3, r8, pc}
    8888:	000005eb 	andeq	r0, r0, fp, ror #11
    888c:	0c791854 	ldcleq	8, cr1, [r9], #-336	; 0xfffffeb0
    8890:	a4090000 	strge	r0, [r9], #-0
    8894:	08b50702 	ldmeq	r5!, {r1, r8, r9, sl}
    8898:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    889c:	00000a22 	andeq	r0, r0, r2, lsr #20
    88a0:	1302a809 	movwne	sl, #10249	; 0x2809
    88a4:	000002e9 	andeq	r0, r0, r9, ror #5
    88a8:	ba190148 	blt	648dd0 <__ccfg+0x628e28>
    88ac:	09000006 	stmdbeq	r0, {r1, r2}
    88b0:	a61202a9 	ldrge	r0, [r2], -r9, lsr #5
    88b4:	4c000002 	stcmi	0, cr0, [r0], {2}
    88b8:	06a11901 	strteq	r1, [r1], r1, lsl #18
    88bc:	ad090000 	stcge	0, cr0, [r9, #-0]
    88c0:	091a0c02 	ldmdbeq	sl, {r1, sl, fp}
    88c4:	02dc0000 	sbcseq	r0, ip, #0
    88c8:	000ce119 	andeq	lr, ip, r9, lsl r1
    88cc:	02b20900 	adcseq	r0, r2, #0, 18
    88d0:	00069b10 	andeq	r9, r6, r0, lsl fp
    88d4:	1902e000 	stmdbne	r2, {sp, lr, pc}
    88d8:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    88dc:	0a02b409 	beq	b5908 <__ccfg+0x95960>
    88e0:	00000926 	andeq	r0, r0, r6, lsr #18
    88e4:	110002ec 	smlattne	r0, ip, r2, r0
    88e8:	0005f104 	andeq	pc, r5, r4, lsl #2
    88ec:	08010300 	stmdaeq	r1, {r8, r9}
    88f0:	00000c70 	andeq	r0, r0, r0, ror ip
    88f4:	0005f104 	andeq	pc, r5, r4, lsl #2
    88f8:	78041100 	stmdavc	r4, {r8, ip}
    88fc:	15000004 	strne	r0, [r0, #-4]
    8900:	0000a301 	andeq	sl, r0, r1, lsl #6
    8904:	00062200 	andeq	r2, r6, r0, lsl #4
    8908:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    890c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    8910:	16000001 	strne	r0, [r0], -r1
    8914:	00000622 	andeq	r0, r0, r2, lsr #12
    8918:	0000a316 	andeq	sl, r0, r6, lsl r3
    891c:	04110000 	ldreq	r0, [r1], #-0
    8920:	000005f8 	strdeq	r0, [r0], -r8
    8924:	06030411 			; <UNDEFINED> instruction: 0x06030411
    8928:	01150000 	tsteq	r5, r0
    892c:	000000ca 	andeq	r0, r0, sl, asr #1
    8930:	0000064d 	andeq	r0, r0, sp, asr #12
    8934:	00049716 	andeq	r9, r4, r6, lsl r7
    8938:	01381600 	teqeq	r8, r0, lsl #12
    893c:	ca160000 	bgt	588944 <__ccfg+0x56899c>
    8940:	16000000 	strne	r0, [r0], -r0
    8944:	000000a3 	andeq	r0, r0, r3, lsr #1
    8948:	2e041100 	adfcss	f1, f4, f0
    894c:	15000006 	strne	r0, [r0, #-6]
    8950:	0000a301 	andeq	sl, r0, r1, lsl #6
    8954:	00066800 	andeq	r6, r6, r0, lsl #16
    8958:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    895c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    8960:	00000001 	andeq	r0, r0, r1
    8964:	06530411 			; <UNDEFINED> instruction: 0x06530411
    8968:	650a0000 	strvs	r0, [sl, #-0]
    896c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    8970:	0b000006 	bleq	8990 <__exidx_end+0x3078>
    8974:	000000aa 	andeq	r0, r0, sl, lsr #1
    8978:	650a0002 	strvs	r0, [sl, #-2]
    897c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    8980:	0b000006 	bleq	89a0 <__exidx_end+0x3088>
    8984:	000000aa 	andeq	r0, r0, sl, lsr #1
    8988:	81070000 	mrshi	r0, (UNDEF: 7)
    898c:	09000004 	stmdbeq	r0, {r2}
    8990:	351a0124 	ldrcc	r0, [sl, #-292]	; 0xfffffedc
    8994:	1a000003 	bne	89a8 <__exidx_end+0x3090>
    8998:	00000cdb 	ldrdeq	r0, [r0], -fp
    899c:	0128090c 			; <UNDEFINED> instruction: 0x0128090c
    89a0:	0006d408 	andeq	sp, r6, r8, lsl #8
    89a4:	0ec21800 	cdpeq	8, 12, cr1, cr2, cr0, {0}
    89a8:	2a090000 	bcs	2489b0 <__ccfg+0x228a08>
    89ac:	06d41101 	ldrbeq	r1, [r4], r1, lsl #2
    89b0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    89b4:	00000bda 	ldrdeq	r0, [r0], -sl
    89b8:	07012b09 	streq	r2, [r1, -r9, lsl #22]
    89bc:	000000a3 	andeq	r0, r0, r3, lsr #1
    89c0:	077e1804 	ldrbeq	r1, [lr, -r4, lsl #16]!
    89c4:	2c090000 	stccs	0, cr0, [r9], {-0}
    89c8:	06da0b01 	ldrbeq	r0, [sl], r1, lsl #22
    89cc:	00080000 	andeq	r0, r8, r0
    89d0:	069b0411 			; <UNDEFINED> instruction: 0x069b0411
    89d4:	04110000 	ldreq	r0, [r1], #-0
    89d8:	0000068e 	andeq	r0, r0, lr, lsl #13
    89dc:	0003ed1a 	andeq	lr, r3, sl, lsl sp
    89e0:	44090e00 	strmi	r0, [r9], #-3584	; 0xfffff200
    89e4:	07190801 	ldreq	r0, [r9, -r1, lsl #16]
    89e8:	49180000 	ldmdbmi	r8, {}	; <UNPREDICTABLE>
    89ec:	09000016 	stmdbeq	r0, {r1, r2, r4}
    89f0:	19120145 	ldmdbne	r2, {r0, r2, r6, r8}
    89f4:	00000007 	andeq	r0, r0, r7
    89f8:	00083d18 	andeq	r3, r8, r8, lsl sp
    89fc:	01460900 	cmpeq	r6, r0, lsl #18
    8a00:	00071912 	andeq	r1, r7, r2, lsl r9
    8a04:	fb180600 	blx	60a20e <__ccfg+0x5ea266>
    8a08:	09000014 	stmdbeq	r0, {r2, r4}
    8a0c:	78120147 	ldmdavc	r2, {r0, r1, r2, r6, r8}
    8a10:	0c000000 	stceq	0, cr0, [r0], {-0}
    8a14:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    8a18:	07290000 	streq	r0, [r9, -r0]!
    8a1c:	aa0b0000 	bge	2c8a24 <__ccfg+0x2a8a7c>
    8a20:	02000000 	andeq	r0, r0, #0
    8a24:	09d01b00 	ldmibeq	r0, {r8, r9, fp, ip}^
    8a28:	3e070285 	cdpcc	2, 0, cr0, cr7, cr5, {4}
    8a2c:	18000008 	stmdane	r0, {r3}
    8a30:	00000e68 	andeq	r0, r0, r8, ror #28
    8a34:	18028709 	stmdane	r2, {r0, r3, r8, r9, sl, pc}
    8a38:	000000aa 	andeq	r0, r0, sl, lsr #1
    8a3c:	0ce91800 	stcleq	8, cr1, [r9]
    8a40:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8a44:	05eb1202 	strbeq	r1, [fp, #514]!	; 0x202
    8a48:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8a4c:	0000044b 	andeq	r0, r0, fp, asr #8
    8a50:	10028909 	andne	r8, r2, r9, lsl #18
    8a54:	0000083e 	andeq	r0, r0, lr, lsr r8
    8a58:	0b4f1808 	bleq	13cea80 <__ccfg+0x13aead8>
    8a5c:	8a090000 	bhi	248a64 <__ccfg+0x228abc>
    8a60:	01ce1702 	biceq	r1, lr, r2, lsl #14
    8a64:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    8a68:	000007f5 	strdeq	r0, [r0], -r5
    8a6c:	0f028b09 	svceq	0x00028b09
    8a70:	000000a3 	andeq	r0, r0, r3, lsr #1
    8a74:	0ebd1848 	cdpeq	8, 11, cr1, cr13, cr8, {2}
    8a78:	8c090000 	stchi	0, cr0, [r9], {-0}
    8a7c:	009c2c02 	addseq	r2, ip, r2, lsl #24
    8a80:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    8a84:	00000076 	andeq	r0, r0, r6, ror r0
    8a88:	1a028d09 	bne	abeb4 <__ccfg+0x8bf0c>
    8a8c:	000006e0 	andeq	r0, r0, r0, ror #13
    8a90:	06451858 			; <UNDEFINED> instruction: 0x06451858
    8a94:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    8a98:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a9c:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    8aa0:	00000cf6 	strdeq	r0, [r0], -r6
    8aa4:	16028f09 	strne	r8, [r2], -r9, lsl #30
    8aa8:	0000012c 	andeq	r0, r0, ip, lsr #2
    8aac:	00681870 	rsbeq	r1, r8, r0, ror r8
    8ab0:	90090000 	andls	r0, r9, r0
    8ab4:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8ab8:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    8abc:	00000b76 	andeq	r0, r0, r6, ror fp
    8ac0:	10029109 	andne	r9, r2, r9, lsl #2
    8ac4:	0000084e 	andeq	r0, r0, lr, asr #16
    8ac8:	04281880 	strteq	r1, [r8], #-2176	; 0xfffff780
    8acc:	92090000 	andls	r0, r9, #0
    8ad0:	085e1002 	ldmdaeq	lr, {r1, ip}^
    8ad4:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    8ad8:	00000c99 	muleq	r0, r9, ip
    8adc:	0f029309 	svceq	0x00029309
    8ae0:	000000a3 	andeq	r0, r0, r3, lsr #1
    8ae4:	02b418a0 	adcseq	r1, r4, #160, 16	; 0xa00000
    8ae8:	94090000 	strls	r0, [r9], #-0
    8aec:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8af0:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    8af4:	000006ab 	andeq	r0, r0, fp, lsr #13
    8af8:	16029509 	strne	r9, [r2], -r9, lsl #10
    8afc:	0000012c 	andeq	r0, r0, ip, lsr #2
    8b00:	05c718ac 	strbeq	r1, [r7, #2220]	; 0x8ac
    8b04:	96090000 	strls	r0, [r9], -r0
    8b08:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8b0c:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    8b10:	00000856 	andeq	r0, r0, r6, asr r8
    8b14:	16029709 	strne	r9, [r2], -r9, lsl #14
    8b18:	0000012c 	andeq	r0, r0, ip, lsr #2
    8b1c:	063418bc 			; <UNDEFINED> instruction: 0x063418bc
    8b20:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    8b24:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8b28:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    8b2c:	0000090e 	andeq	r0, r0, lr, lsl #18
    8b30:	08029909 	stmdaeq	r2, {r0, r3, r8, fp, ip, pc}
    8b34:	000000a3 	andeq	r0, r0, r3, lsr #1
    8b38:	f10a00cc 	cpsie	if,#12
    8b3c:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    8b40:	0b000008 	bleq	8b68 <__exidx_end+0x3250>
    8b44:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b48:	f10a0019 	cpsie	,#25
    8b4c:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    8b50:	0b000008 	bleq	8b78 <__exidx_end+0x3260>
    8b54:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b58:	f10a0007 	cpsie	,#7
    8b5c:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    8b60:	0b000008 	bleq	8b88 <__exidx_end+0x3270>
    8b64:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b68:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    8b6c:	07029e09 	streq	r9, [r2, -r9, lsl #28]
    8b70:	00000895 	muleq	r0, r5, r8
    8b74:	0003d318 	andeq	sp, r3, r8, lsl r3
    8b78:	02a10900 	adceq	r0, r1, #0, 18
    8b7c:	0008951b 	andeq	r9, r8, fp, lsl r5
    8b80:	10180000 	andsne	r0, r8, r0
    8b84:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    8b88:	a51802a2 	ldrge	r0, [r8, #-674]	; 0xfffffd5e
    8b8c:	78000008 	stmdavc	r0, {r3}
    8b90:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    8b94:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    8b98:	aa0b0000 	bge	2c8ba0 <__ccfg+0x2a8bf8>
    8b9c:	1d000000 	stcne	0, cr0, [r0, #-0]
    8ba0:	00aa0a00 	adceq	r0, sl, r0, lsl #20
    8ba4:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    8ba8:	aa0b0000 	bge	2c8bb0 <__ccfg+0x2a8c08>
    8bac:	1d000000 	stcne	0, cr0, [r0, #-0]
    8bb0:	09f01c00 	ldmibeq	r0!, {sl, fp, ip}^
    8bb4:	da030283 	ble	c95c8 <__ccfg+0xa9620>
    8bb8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    8bbc:	00000d5d 	andeq	r0, r0, sp, asr sp
    8bc0:	0b029a09 	bleq	af3ec <__ccfg+0x8f444>
    8bc4:	00000729 	andeq	r0, r0, r9, lsr #14
    8bc8:	000b5e1d 	andeq	r5, fp, sp, lsl lr
    8bcc:	02a30900 	adceq	r0, r3, #0, 18
    8bd0:	00086e0b 	andeq	r6, r8, fp, lsl #28
    8bd4:	f10a0000 	cpsie	,#0
    8bd8:	ea000005 	b	8bf4 <__exidx_end+0x32dc>
    8bdc:	0b000008 	bleq	8c04 <__exidx_end+0x32ec>
    8be0:	000000aa 	andeq	r0, r0, sl, lsr #1
    8be4:	c81e0018 	ldmdagt	lr, {r3, r4}
    8be8:	0100000e 	tsteq	r0, lr
    8bec:	08ea0411 	stmiaeq	sl!, {r0, r4, sl}^
    8bf0:	011f0000 	tsteq	pc, r0
    8bf4:	00000902 	andeq	r0, r0, r2, lsl #18
    8bf8:	00049716 	andeq	r9, r4, r6, lsl r7
    8bfc:	04110000 	ldreq	r0, [r1], #-0
    8c00:	000008f6 	strdeq	r0, [r0], -r6
    8c04:	01b80411 			; <UNDEFINED> instruction: 0x01b80411
    8c08:	011f0000 	tsteq	pc, r0
    8c0c:	0000091a 	andeq	r0, r0, sl, lsl r9
    8c10:	0000a316 	andeq	sl, r0, r6, lsl r3
    8c14:	04110000 	ldreq	r0, [r1], #-0
    8c18:	00000920 	andeq	r0, r0, r0, lsr #18
    8c1c:	090e0411 	stmdbeq	lr, {r0, r4, sl}
    8c20:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    8c24:	36000006 	strcc	r0, [r0], -r6
    8c28:	0b000009 	bleq	8c54 <__exidx_end+0x333c>
    8c2c:	000000aa 	andeq	r0, r0, sl, lsr #1
    8c30:	ce200002 	cdpgt	0, 2, cr0, cr0, cr2, {0}
    8c34:	0900000a 	stmdbeq	r0, {r1, r3}
    8c38:	97170333 			; <UNDEFINED> instruction: 0x97170333
    8c3c:	01000004 	tsteq	r0, r4
    8c40:	0ac72001 	beq	ff1d0c4c <_estack+0xdf1cbc4c>
    8c44:	34090000 	strcc	r0, [r9], #-0
    8c48:	049d1d03 	ldreq	r1, [sp], #3331	; 0xd03
    8c4c:	01010000 	mrseq	r0, (UNDEF: 1)
    8c50:	0024df02 	eoreq	sp, r4, r2, lsl #30
    8c54:	123b0b00 	eorsne	r0, fp, #0, 22
    8c58:	0000007f 	andeq	r0, r0, pc, ror r0
    8c5c:	400b080c 	andmi	r0, fp, ip, lsl #16
    8c60:	00098409 	andeq	r8, r9, r9, lsl #8
    8c64:	1fe20d00 	svcne	0x00e20d00
    8c68:	410b0000 	mrsmi	r0, (UNDEF: 11)
    8c6c:	0009840d 	andeq	r8, r9, sp, lsl #8
    8c70:	250d0000 	strcs	r0, [sp, #-0]
    8c74:	0b000022 	bleq	8d04 <__exidx_end+0x33ec>
    8c78:	09840d42 	stmibeq	r4, {r1, r6, r8, sl, fp}
    8c7c:	00040000 	andeq	r0, r4, r0
    8c80:	00590411 	subseq	r0, r9, r1, lsl r4
    8c84:	2a020000 	bcs	88c8c <__ccfg+0x68ce4>
    8c88:	0b000027 	bleq	8d2c <__exidx_end+0x3414>
    8c8c:	09600343 	stmdbeq	r0!, {r0, r1, r6, r8, r9}^
    8c90:	a6020000 	strge	r0, [r2], -r0
    8c94:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8c98:	09a22b3c 	stmibeq	r2!, {r2, r3, r4, r5, r8, r9, fp, sp}
    8c9c:	450f0000 	strmi	r0, [pc, #-0]	; 8ca4 <__exidx_end+0x338c>
    8ca0:	10000025 	andne	r0, r0, r5, lsr #32
    8ca4:	fe156f0c 	cdp2	15, 1, cr6, cr5, cr12, {0}
    8ca8:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    8cac:	00001f11 	andeq	r1, r0, r1, lsl pc
    8cb0:	6c0d700c 	stcvs	0, cr7, [sp], {12}
    8cb4:	00000000 	andeq	r0, r0, r0
    8cb8:	0007840d 	andeq	r8, r7, sp, lsl #8
    8cbc:	0d710c00 	ldcleq	12, cr0, [r1, #-0]
    8cc0:	0000006c 	andeq	r0, r0, ip, rrx
    8cc4:	22840d02 	addcs	r0, r4, #2, 26	; 0x80
    8cc8:	740c0000 	strvc	r0, [ip], #-0
    8ccc:	000bc013 	andeq	ip, fp, r3, lsl r0
    8cd0:	130d0400 	movwne	r0, #54272	; 0xd400
    8cd4:	0c000020 	stceq	0, cr0, [r0], {32}
    8cd8:	09540c75 	ldmdbeq	r4, {r0, r2, r4, r5, r6, sl, fp}^
    8cdc:	0d080000 	stceq	0, cr0, [r8, #-0]
    8ce0:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    8ce4:	4c067d0c 	stcmi	13, cr7, [r6], {12}
    8ce8:	0c00000b 	stceq	0, cr0, [r0], {11}
    8cec:	0021fe0d 	eoreq	pc, r1, sp, lsl #28
    8cf0:	06810c00 	streq	r0, [r1], r0, lsl #24
    8cf4:	00000b96 	muleq	r0, r6, fp
    8cf8:	8702000d 	strhi	r0, [r2, -sp]
    8cfc:	0c000020 	stceq	0, cr0, [r0], {32}
    8d00:	0a0a2a3f 	beq	293604 <__ccfg+0x27365c>
    8d04:	7a0f0000 	bvc	3c8d0c <__ccfg+0x3a8d64>
    8d08:	18000020 	stmdane	r0, {r5}
    8d0c:	c115e00c 	tstgt	r5, ip
    8d10:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    8d14:	00001f11 	andeq	r1, r0, r1, lsl pc
    8d18:	6c0de10c 	stfvsd	f6, [sp], {12}
    8d1c:	00000000 	andeq	r0, r0, r0
    8d20:	0007840d 	andeq	r8, r7, sp, lsl #8
    8d24:	0de20c00 	stcleq	12, cr0, [r2]
    8d28:	0000006c 	andeq	r0, r0, ip, rrx
    8d2c:	22840d02 	addcs	r0, r4, #2, 26	; 0x80
    8d30:	e50c0000 	str	r0, [ip, #-0]
    8d34:	000bc013 	andeq	ip, fp, r3, lsl r0
    8d38:	130d0400 	movwne	r0, #54272	; 0xd400
    8d3c:	0c000020 	stceq	0, cr0, [r0], {32}
    8d40:	09540ce6 	ldmdbeq	r4, {r1, r2, r5, r6, r7, sl, fp}^
    8d44:	0d080000 	stceq	0, cr0, [r8, #-0]
    8d48:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    8d4c:	cc06ee0c 	stcgt	14, cr14, [r6], {12}
    8d50:	0c00000b 	stceq	0, cr0, [r0], {11}
    8d54:	0021fe0d 	eoreq	pc, r1, sp, lsl #28
    8d58:	06f20c00 	ldrbteq	r0, [r2], r0, lsl #24
    8d5c:	00000c16 	andeq	r0, r0, r6, lsl ip
    8d60:	26500d0d 	ldrbcs	r0, [r0], -sp, lsl #26
    8d64:	f30c0000 	vhadd.u8	d0, d12, d0
    8d68:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d6c:	a80d0e00 	stmdage	sp, {r9, sl, fp}
    8d70:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    8d74:	006c0df4 	strdeq	r0, [ip], #-212	; 0xffffff2c	; <UNPREDICTABLE>
    8d78:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8d7c:	000020ba 	strheq	r2, [r0], -sl
    8d80:	4006fa0c 	andmi	pc, r6, ip, lsl #20
    8d84:	1200000c 	andne	r0, r0, #12
    8d88:	0022640d 	eoreq	r6, r2, sp, lsl #8
    8d8c:	0cfb0c00 	ldcleq	12, cr0, [fp]
    8d90:	00000059 	andeq	r0, r0, r9, asr r0
    8d94:	25b40d13 	ldrcs	r0, [r4, #3347]!	; 0xd13
    8d98:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    8d9c:	0000590c 	andeq	r5, r0, ip, lsl #18
    8da0:	bd0d1400 	cfstrslt	mvf1, [sp, #-0]
    8da4:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8da8:	00590cfd 	ldrsheq	r0, [r9], #-205	; 0xffffff33
    8dac:	0d150000 	ldceq	0, cr0, [r5, #-0]
    8db0:	000025c6 	andeq	r2, r0, r6, asr #11
    8db4:	6c0dfe0c 	stcvs	14, cr15, [sp], {12}
    8db8:	16000000 	strne	r0, [r0], -r0
    8dbc:	26cb0200 	strbcs	r0, [fp], r0, lsl #4
    8dc0:	440c0000 	strmi	r0, [ip], #-0
    8dc4:	000acd36 	andeq	ip, sl, r6, lsr sp
    8dc8:	26b21a00 	ldrtcs	r1, [r2], r0, lsl #20
    8dcc:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8dd0:	4c15019f 	ldfmis	f0, [r5], {159}	; 0x9f
    8dd4:	1800000b 	stmdane	r0, {r0, r1, r3}
    8dd8:	00001f11 	andeq	r1, r0, r1, lsl pc
    8ddc:	0d01a00c 	stceq	0, cr10, [r1, #-48]	; 0xffffffd0
    8de0:	0000006c 	andeq	r0, r0, ip, rrx
    8de4:	07841800 	streq	r1, [r4, r0, lsl #16]
    8de8:	a10c0000 	mrsge	r0, (UNDEF: 12)
    8dec:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8df0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    8df4:	00002284 	andeq	r2, r0, r4, lsl #5
    8df8:	1301a40c 	movwne	sl, #5132	; 0x140c
    8dfc:	00000bc0 	andeq	r0, r0, r0, asr #23
    8e00:	20131804 	andscs	r1, r3, r4, lsl #16
    8e04:	a50c0000 	strge	r0, [ip, #-0]
    8e08:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8e0c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8e10:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    8e14:	0601ad0c 	streq	sl, [r1], -ip, lsl #26
    8e18:	00000c6a 	andeq	r0, r0, sl, ror #24
    8e1c:	21fe180c 	mvnscs	r1, ip, lsl #16
    8e20:	b10c0000 	mrslt	r0, (UNDEF: 12)
    8e24:	0cb90601 	ldceq	6, cr0, [r9], #4
    8e28:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    8e2c:	00002264 	andeq	r2, r0, r4, ror #4
    8e30:	0d01b20c 	sfmeq	f3, 1, [r1, #-48]	; 0xffffffd0
    8e34:	0000006c 	andeq	r0, r0, ip, rrx
    8e38:	2152180e 	cmpcs	r2, lr, lsl #16
    8e3c:	b30c0000 	movwlt	r0, #49152	; 0xc000
    8e40:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8e44:	00100000 	andseq	r0, r0, r0
    8e48:	760c010c 	strvc	r0, [ip], -ip, lsl #2
    8e4c:	000b9604 	andeq	r9, fp, r4, lsl #12
    8e50:	27672100 	strbcs	r2, [r7, -r0, lsl #2]!
    8e54:	770c0000 	strvc	r0, [ip, -r0]
    8e58:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e5c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8e60:	21052100 	mrscs	r2, (UNDEF: 21)
    8e64:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    8e68:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e6c:	03010100 	movweq	r0, #4352	; 0x1100
    8e70:	21c52100 	biccs	r2, r5, r0, lsl #2
    8e74:	7a0c0000 	bvc	308e7c <__ccfg+0x2e8ed4>
    8e78:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e7c:	01020100 	mrseq	r0, (UNDEF: 18)
    8e80:	1f802100 	svcne	0x00802100
    8e84:	7b0c0000 	blvc	308e8c <__ccfg+0x2e8ee4>
    8e88:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e8c:	00010100 	andeq	r0, r1, r0, lsl #2
    8e90:	010c0000 	mrseq	r0, (UNDEF: 12)
    8e94:	c0047e0c 	andgt	r7, r4, ip, lsl #28
    8e98:	2100000b 	tstcs	r0, fp
    8e9c:	000025e2 	andeq	r2, r0, r2, ror #11
    8ea0:	590f7f0c 	stmdbpl	pc, {r2, r3, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    8ea8:	21000404 	tstcs	r0, r4, lsl #8
    8eac:	00002736 	andeq	r2, r0, r6, lsr r7
    8eb0:	590f800c 	stmdbpl	pc, {r2, r3, pc}	; <UNPREDICTABLE>
    8eb4:	01000000 	mrseq	r0, (UNDEF: 0)
    8eb8:	00000004 	andeq	r0, r0, r4
    8ebc:	09960411 	ldmibeq	r6, {r0, r4, sl}
    8ec0:	04110000 	ldreq	r0, [r1], #-0
    8ec4:	0000007f 	andeq	r0, r0, pc, ror r0
    8ec8:	e70c010c 	str	r0, [ip, -ip, lsl #2]
    8ecc:	000c1604 	andeq	r1, ip, r4, lsl #12
    8ed0:	27672100 	strbcs	r2, [r7, -r0, lsl #2]!
    8ed4:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    8ed8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8edc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8ee0:	21052100 	mrscs	r2, (UNDEF: 21)
    8ee4:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    8ee8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8eec:	03010100 	movweq	r0, #4352	; 0x1100
    8ef0:	21c52100 	biccs	r2, r5, r0, lsl #2
    8ef4:	eb0c0000 	bl	308efc <__ccfg+0x2e8f54>
    8ef8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8efc:	01020100 	mrseq	r0, (UNDEF: 18)
    8f00:	1f802100 	svcne	0x00802100
    8f04:	ec0c0000 	stc	0, cr0, [ip], {-0}
    8f08:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f0c:	00010100 	andeq	r0, r1, r0, lsl #2
    8f10:	010c0000 	mrseq	r0, (UNDEF: 12)
    8f14:	4004ef0c 	andmi	lr, r4, ip, lsl #30
    8f18:	2100000c 	tstcs	r0, ip
    8f1c:	000025e2 	andeq	r2, r0, r2, ror #11
    8f20:	590ff00c 	stmdbpl	pc, {r2, r3, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8f24:	01000000 	mrseq	r0, (UNDEF: 0)
    8f28:	21000404 	tstcs	r0, r4, lsl #8
    8f2c:	00002736 	andeq	r2, r0, r6, lsr r7
    8f30:	590ff10c 	stmdbpl	pc, {r2, r3, r8, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8f34:	01000000 	mrseq	r0, (UNDEF: 0)
    8f38:	00000004 	andeq	r0, r0, r4
    8f3c:	f50c010c 			; <UNDEFINED> instruction: 0xf50c010c
    8f40:	000c6a04 	andeq	r6, ip, r4, lsl #20
    8f44:	20ef2100 	rsccs	r2, pc, r0, lsl #2
    8f48:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    8f4c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f50:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8f54:	27502100 	ldrbcs	r2, [r0, -r0, lsl #2]
    8f58:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    8f5c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f60:	01060100 	mrseq	r0, (UNDEF: 22)
    8f64:	011b0000 	tsteq	fp, r0
    8f68:	0401a60c 	streq	sl, [r1], #-1548	; 0xfffff9f4
    8f6c:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    8f70:	00276722 	eoreq	r6, r7, r2, lsr #14
    8f74:	01a70c00 			; <UNDEFINED> instruction: 0x01a70c00
    8f78:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f7c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8f80:	21052200 	mrscs	r2, SP_usr
    8f84:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    8f88:	00590f01 	subseq	r0, r9, r1, lsl #30
    8f8c:	01010000 	mrseq	r0, (UNDEF: 1)
    8f90:	c5220003 	strgt	r0, [r2, #-3]!
    8f94:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8f98:	590f01aa 	stmdbpl	pc, {r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    8f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    8fa0:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    8fa4:	00001f80 	andeq	r1, r0, r0, lsl #31
    8fa8:	0f01ab0c 	svceq	0x0001ab0c
    8fac:	00000059 	andeq	r0, r0, r9, asr r0
    8fb0:	00000101 	andeq	r0, r0, r1, lsl #2
    8fb4:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    8fb8:	e60401ae 	str	r0, [r4], -lr, lsr #3
    8fbc:	2200000c 	andcs	r0, r0, #12
    8fc0:	000025e2 	andeq	r2, r0, r2, ror #11
    8fc4:	0f01af0c 	svceq	0x0001af0c
    8fc8:	00000059 	andeq	r0, r0, r9, asr r0
    8fcc:	00040401 	andeq	r0, r4, r1, lsl #8
    8fd0:	00273622 	eoreq	r3, r7, r2, lsr #12
    8fd4:	01b00c00 	lslseq	r0, r0, #24
    8fd8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8fdc:	00040100 	andeq	r0, r4, r0, lsl #2
    8fe0:	04110000 	ldreq	r0, [r1], #-0
    8fe4:	0000098a 	andeq	r0, r0, sl, lsl #19
    8fe8:	00262502 	eoreq	r2, r6, r2, lsl #10
    8fec:	2f3d0d00 	svccs	0x003d0d00
    8ff0:	00000cf8 	strdeq	r0, [r0], -r8
    8ff4:	0026370f 	eoreq	r3, r6, pc, lsl #14
    8ff8:	780d1800 	stmdavc	sp, {fp, ip}
    8ffc:	000d8815 	andeq	r8, sp, r5, lsl r8
    9000:	1f110d00 	svcne	0x00110d00
    9004:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    9008:	00006c0d 	andeq	r6, r0, sp, lsl #24
    900c:	840d0000 	strhi	r0, [sp], #-0
    9010:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    9014:	006c0d7a 	rsbeq	r0, ip, sl, ror sp
    9018:	0d020000 	stceq	0, cr0, [r2, #-0]
    901c:	00002284 	andeq	r2, r0, r4, lsl #5
    9020:	c0137d0d 	andsgt	r7, r3, sp, lsl #26
    9024:	0400000b 	streq	r0, [r0], #-11
    9028:	0020130d 	eoreq	r1, r0, sp, lsl #6
    902c:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
    9030:	00000954 	andeq	r0, r0, r4, asr r9
    9034:	22b40d08 	adcscs	r0, r4, #8, 26	; 0x200
    9038:	860d0000 	strhi	r0, [sp], -r0
    903c:	0010f306 	andseq	pc, r0, r6, lsl #6
    9040:	fe0d0c00 	cdp2	12, 0, cr0, cr13, cr0, {0}
    9044:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9048:	113d068a 	teqne	sp, sl, lsl #13
    904c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    9050:	00002058 	andeq	r2, r0, r8, asr r0
    9054:	6706930d 	strvs	r9, [r6, -sp, lsl #6]
    9058:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    905c:	0025db0d 	eoreq	sp, r5, sp, lsl #22
    9060:	0c940d00 	ldceq	13, cr0, [r4], {0}
    9064:	00000059 	andeq	r0, r0, r9, asr r0
    9068:	233a0d0f 	teqcs	sl, #960	; 0x3c0
    906c:	950d0000 	strls	r0, [sp, #-0]
    9070:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9074:	3e0d1000 	cdpcc	0, 0, cr1, cr13, cr0, {0}
    9078:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    907c:	09840d96 	stmibeq	r4, {r1, r2, r4, r7, r8, sl, fp}
    9080:	00140000 	andseq	r0, r4, r0
    9084:	00249102 	eoreq	r9, r4, r2, lsl #2
    9088:	2f3e0d00 	svccs	0x003e0d00
    908c:	00000d94 	muleq	r0, r4, sp
    9090:	0021890f 	eoreq	r8, r1, pc, lsl #18
    9094:	9f0d2400 	svcls	0x000d2400
    9098:	000e7215 	andeq	r7, lr, r5, lsl r2
    909c:	1f110d00 	svcne	0x00110d00
    90a0:	a00d0000 	andge	r0, sp, r0
    90a4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    90a8:	840d0000 	strhi	r0, [sp], #-0
    90ac:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    90b0:	006c0da1 	rsbeq	r0, ip, r1, lsr #27
    90b4:	0d020000 	stceq	0, cr0, [r2, #-0]
    90b8:	00002284 	andeq	r2, r0, r4, lsl #5
    90bc:	c013a40d 	andsgt	sl, r3, sp, lsl #8
    90c0:	0400000b 	streq	r0, [r0], #-11
    90c4:	0020130d 	eoreq	r1, r0, sp, lsl #6
    90c8:	0ca50d00 	stceq	13, cr0, [r5]
    90cc:	00000954 	andeq	r0, r0, r4, asr r9
    90d0:	22b40d08 	adcscs	r0, r4, #8, 26	; 0x200
    90d4:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    90d8:	0011a106 	andseq	sl, r1, r6, lsl #2
    90dc:	fe0d0c00 	cdp2	12, 0, cr0, cr13, cr0, {0}
    90e0:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    90e4:	11eb06b1 	strhne	r0, [fp, #97]!	; 0x61
    90e8:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    90ec:	00002058 	andeq	r2, r0, r8, asr r0
    90f0:	1506c30d 	strne	ip, [r6, #-781]	; 0xfffffcf3
    90f4:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    90f8:	0023ef0d 	eoreq	lr, r3, sp, lsl #30
    90fc:	06cd0d00 	strbeq	r0, [sp], r0, lsl #26
    9100:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    9104:	233a0d0f 	teqcs	sl, #960	; 0x3c0
    9108:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
    910c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9110:	3d0d1000 	stccc	0, cr1, [sp, #-0]
    9114:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9118:	00590ccf 	subseq	r0, r9, pc, asr #25
    911c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    9120:	00002441 	andeq	r2, r0, r1, asr #8
    9124:	590cd10d 	stmdbpl	ip, {r0, r2, r3, r8, ip, lr, pc}
    9128:	15000000 	strne	r0, [r0, #-0]
    912c:	00244a0d 	eoreq	r4, r4, sp, lsl #20
    9130:	0cd20d00 	ldcleq	13, cr0, [r2], {0}
    9134:	00000059 	andeq	r0, r0, r9, asr r0
    9138:	219b0d16 	orrscs	r0, fp, r6, lsl sp
    913c:	db0d0000 	blle	349144 <__ccfg+0x32919c>
    9140:	00131906 	andseq	r1, r3, r6, lsl #18
    9144:	8a0d1700 	bhi	34ed4c <__ccfg+0x32eda4>
    9148:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    914c:	09540cdc 	ldmdbeq	r4, {r2, r3, r4, r6, r7, sl, fp}^
    9150:	0d180000 	ldceq	0, cr0, [r8, #-0]
    9154:	000021cf 	andeq	r2, r0, pc, asr #3
    9158:	e611dd0d 	ldr	sp, [r1], -sp, lsl #26
    915c:	1c00000c 	stcne	0, cr0, [r0], {12}
    9160:	001fa30d 	andseq	sl, pc, sp, lsl #6
    9164:	0dde0d00 	ldcleq	13, cr0, [lr]
    9168:	00000984 	andeq	r0, r0, r4, lsl #19
    916c:	a6020020 	strge	r0, [r2], -r0, lsr #32
    9170:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9174:	0e7e2f41 	cdpeq	15, 7, cr2, cr14, cr1, {2}
    9178:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    917c:	1c00001f 	stcne	0, cr0, [r0], {31}
    9180:	15017d0d 	strne	r7, [r1, #-3341]	; 0xfffff2f3
    9184:	00000f6d 	andeq	r0, r0, sp, ror #30
    9188:	001f1118 	andseq	r1, pc, r8, lsl r1	; <UNPREDICTABLE>
    918c:	017e0d00 	cmneq	lr, r0, lsl #26
    9190:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9194:	84180000 	ldrhi	r0, [r8], #-0
    9198:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    919c:	6c0d017f 	stfvss	f0, [sp], {127}	; 0x7f
    91a0:	02000000 	andeq	r0, r0, #0
    91a4:	00228418 	eoreq	r8, r2, r8, lsl r4
    91a8:	01820d00 	orreq	r0, r2, r0, lsl #26
    91ac:	000bc013 	andeq	ip, fp, r3, lsl r0
    91b0:	13180400 	tstne	r8, #0, 8
    91b4:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    91b8:	540c0183 	strpl	r0, [ip], #-387	; 0xfffffe7d
    91bc:	08000009 	stmdaeq	r0, {r0, r3}
    91c0:	0022b418 	eoreq	fp, r2, r8, lsl r4
    91c4:	018b0d00 	orreq	r0, fp, r0, lsl #26
    91c8:	00136306 	andseq	r6, r3, r6, lsl #6
    91cc:	fe180c00 	cdp2	12, 1, cr0, cr8, cr0, {0}
    91d0:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    91d4:	b206018f 	andlt	r0, r6, #-1073741789	; 0xc0000023
    91d8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    91dc:	00266418 	eoreq	r6, r6, r8, lsl r4
    91e0:	01950d00 	orrseq	r0, r5, r0, lsl #26
    91e4:	0013df06 	andseq	sp, r3, r6, lsl #30
    91e8:	64180e00 	ldrvs	r0, [r8], #-3584	; 0xfffff200
    91ec:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    91f0:	590c0196 	stmdbpl	ip, {r1, r2, r4, r7, r8}
    91f4:	0f000000 	svceq	0x00000000
    91f8:	00272318 	eoreq	r2, r7, r8, lsl r3
    91fc:	01a30d00 			; <UNDEFINED> instruction: 0x01a30d00
    9200:	00140c06 	andseq	r0, r4, r6, lsl #24
    9204:	e5181000 	ldr	r1, [r8, #-0]
    9208:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    920c:	250b01a4 	strcs	r0, [fp, #-420]	; 0xfffffe5c
    9210:	11000000 	mrsne	r0, (UNDEF: 0)
    9214:	0024b618 	eoreq	fp, r4, r8, lsl r6
    9218:	01a50d00 			; <UNDEFINED> instruction: 0x01a50d00
    921c:	0000590c 	andeq	r5, r0, ip, lsl #18
    9220:	eb181200 	bl	60da28 <__ccfg+0x5eda80>
    9224:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9228:	590c01a7 	stmdbpl	ip, {r0, r1, r2, r5, r7, r8}
    922c:	13000000 	movwne	r0, #0
    9230:	00236d18 	eoreq	r6, r3, r8, lsl sp
    9234:	01a90d00 			; <UNDEFINED> instruction: 0x01a90d00
    9238:	00006c0d 	andeq	r6, r0, sp, lsl #24
    923c:	47181400 	ldrmi	r1, [r8, -r0, lsl #8]
    9240:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9244:	7d0601af 	stfvcs	f0, [r6, #-700]	; 0xfffffd44
    9248:	16000014 			; <UNDEFINED> instruction: 0x16000014
    924c:	00224a18 	eoreq	r4, r2, r8, lsl sl
    9250:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
    9254:	0014aa06 	andseq	sl, r4, r6, lsl #20
    9258:	59181700 	ldmdbpl	r8, {r8, r9, sl, ip}
    925c:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9260:	540c01b8 	strpl	r0, [ip], #-440	; 0xfffffe48
    9264:	18000009 	stmdane	r0, {r0, r3}
    9268:	24720200 	ldrbtcs	r0, [r2], #-512	; 0xfffffe00
    926c:	430d0000 	movwmi	r0, #53248	; 0xd000
    9270:	000f793c 	andeq	r7, pc, ip, lsr r9	; <UNPREDICTABLE>
    9274:	24531a00 	ldrbcs	r1, [r3], #-2560	; 0xfffff600
    9278:	0d280000 	stceq	0, cr0, [r8, #-0]
    927c:	7615021a 			; <UNDEFINED> instruction: 0x7615021a
    9280:	18000010 	stmdane	r0, {r4}
    9284:	00001f11 	andeq	r1, r0, r1, lsl pc
    9288:	0d021b0d 	vstreq	d1, [r2, #-52]	; 0xffffffcc
    928c:	0000006c 	andeq	r0, r0, ip, rrx
    9290:	07841800 	streq	r1, [r4, r0, lsl #16]
    9294:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    9298:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    929c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    92a0:	00002284 	andeq	r2, r0, r4, lsl #5
    92a4:	1302200d 	movwne	r2, #8205	; 0x200d
    92a8:	00000bc0 	andeq	r0, r0, r0, asr #23
    92ac:	20131804 	andscs	r1, r3, r4, lsl #16
    92b0:	210d0000 	mrscs	r0, (UNDEF: 13)
    92b4:	09540c02 	ldmdbeq	r4, {r1, sl, fp}^
    92b8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    92bc:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    92c0:	0602290d 	streq	r2, [r2], -sp, lsl #18
    92c4:	000014f9 	strdeq	r1, [r0], -r9
    92c8:	21fe180c 	mvnscs	r1, ip, lsl #16
    92cc:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    92d0:	15480602 	strbne	r0, [r8, #-1538]	; 0xfffff9fe
    92d4:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    92d8:	00001f06 	andeq	r1, r0, r6, lsl #30
    92dc:	0602330d 	streq	r3, [r2], -sp, lsl #6
    92e0:	00001575 	andeq	r1, r0, r5, ror r5
    92e4:	226d180e 	rsbcs	r1, sp, #917504	; 0xe0000
    92e8:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    92ec:	15a20602 	strne	r0, [r2, #1538]!	; 0x602
    92f0:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    92f4:	0000209c 	muleq	r0, ip, r0
    92f8:	0c02390d 			; <UNDEFINED> instruction: 0x0c02390d
    92fc:	00000059 	andeq	r0, r0, r9, asr r0
    9300:	23301814 	teqcs	r0, #20, 16	; 0x140000
    9304:	410d0000 	mrsmi	r0, (UNDEF: 13)
    9308:	15cf0602 	strbne	r0, [pc, #1538]	; 9912 <__exidx_end+0x3ffa>
    930c:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    9310:	00002008 	andeq	r2, r0, r8
    9314:	0602550d 	streq	r5, [r2], -sp, lsl #10
    9318:	000015fc 	strdeq	r1, [r0], -ip
    931c:	147b1816 	ldrbtne	r1, [fp], #-2070	; 0xfffff7ea
    9320:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    9324:	165c0602 	ldrbne	r0, [ip], -r2, lsl #12
    9328:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    932c:	00002094 	muleq	r0, r4, r0
    9330:	0d02690d 	vstreq.16	s12, [r2, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    9334:	0000006c 	andeq	r0, r0, ip, rrx
    9338:	24d2181a 	ldrbcs	r1, [r2], #2074	; 0x81a
    933c:	6a0d0000 	bvs	349344 <__ccfg+0x32939c>
    9340:	0bc60e02 	bleq	ff18cb50 <_estack+0xdf187b50>
    9344:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    9348:	00001f43 	andeq	r1, r0, r3, asr #30
    934c:	0d026c0d 	stceq	12, cr6, [r2, #-52]	; 0xffffffcc
    9350:	0000006c 	andeq	r0, r0, ip, rrx
    9354:	228c1820 	addcs	r1, ip, #32, 16	; 0x200000
    9358:	700d0000 	andvc	r0, sp, r0
    935c:	00380c02 	eorseq	r0, r8, r2, lsl #24
    9360:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    9364:	000023ca 	andeq	r2, r0, sl, asr #7
    9368:	0c02730d 	stceq	3, cr7, [r2], {13}
    936c:	00000059 	andeq	r0, r0, r9, asr r0
    9370:	06020024 	streq	r0, [r2], -r4, lsr #32
    9374:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9378:	10823048 	addne	r3, r2, r8, asr #32
    937c:	f31a0000 	vhadd.u16	d0, d10, d0
    9380:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    9384:	1503750d 	strne	r7, [r3, #-1293]	; 0xfffffaf3
    9388:	000010f3 	strdeq	r1, [r0], -r3
    938c:	0025a918 	eoreq	sl, r5, r8, lsl r9
    9390:	03760d00 	cmneq	r6, #0, 26
    9394:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9398:	c8180000 	ldmdagt	r8, {}	; <UNPREDICTABLE>
    939c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    93a0:	6c0d0377 	stcvs	3, cr0, [sp], {119}	; 0x77
    93a4:	02000000 	andeq	r0, r0, #0
    93a8:	001fb518 	andseq	fp, pc, r8, lsl r5	; <UNPREDICTABLE>
    93ac:	03780d00 	cmneq	r8, #0, 26
    93b0:	0000590c 	andeq	r5, r0, ip, lsl #18
    93b4:	ab180400 	blge	60a3bc <__ccfg+0x5ea414>
    93b8:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    93bc:	590c0379 	stmdbpl	ip, {r0, r3, r4, r5, r6, r8, r9}
    93c0:	05000000 	streq	r0, [r0, #-0]
    93c4:	00223018 	eoreq	r3, r2, r8, lsl r0
    93c8:	037a0d00 	cmneq	sl, #0, 26
    93cc:	0000590c 	andeq	r5, r0, ip, lsl #18
    93d0:	14180600 	ldrne	r0, [r8], #-1536	; 0xfffffa00
    93d4:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    93d8:	250b037b 	strcs	r0, [fp, #-891]	; 0xfffffc85
    93dc:	07000000 	streq	r0, [r0, -r0]
    93e0:	001fed18 	andseq	lr, pc, r8, lsl sp	; <UNPREDICTABLE>
    93e4:	037c0d00 	cmneq	ip, #0, 26
    93e8:	0009540c 	andeq	r5, r9, ip, lsl #8
    93ec:	0c000800 	stceq	8, cr0, [r0], {-0}
    93f0:	047f0d01 	ldrbteq	r0, [pc], #-3329	; 93f8 <__exidx_end+0x3ae0>
    93f4:	0000113d 	andeq	r1, r0, sp, lsr r1
    93f8:	00276721 	eoreq	r6, r7, r1, lsr #14
    93fc:	0f800d00 	svceq	0x00800d00
    9400:	00000059 	andeq	r0, r0, r9, asr r0
    9404:	00040401 	andeq	r0, r4, r1, lsl #8
    9408:	00210521 	eoreq	r0, r1, r1, lsr #10
    940c:	0f810d00 	svceq	0x00810d00
    9410:	00000059 	andeq	r0, r0, r9, asr r0
    9414:	00030101 	andeq	r0, r3, r1, lsl #2
    9418:	0021c521 	eoreq	ip, r1, r1, lsr #10
    941c:	0f830d00 	svceq	0x00830d00
    9420:	00000059 	andeq	r0, r0, r9, asr r0
    9424:	00010201 	andeq	r0, r1, r1, lsl #4
    9428:	001f8021 	andseq	r8, pc, r1, lsr #32
    942c:	0f840d00 	svceq	0x00840d00
    9430:	00000059 	andeq	r0, r0, r9, asr r0
    9434:	00000101 	andeq	r0, r0, r1, lsl #2
    9438:	0d010c00 	stceq	12, cr0, [r1, #-0]
    943c:	11670487 	smulbbne	r7, r7, r4
    9440:	e2210000 	eor	r0, r1, #0
    9444:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9448:	00590f88 	subseq	r0, r9, r8, lsl #31
    944c:	04010000 	streq	r0, [r1], #-0
    9450:	36210004 	strtcc	r0, [r1], -r4
    9454:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9458:	00590f89 	subseq	r0, r9, r9, lsl #31
    945c:	04010000 	streq	r0, [r1], #-0
    9460:	0c000000 	stceq	0, cr0, [r0], {-0}
    9464:	048b0d01 	streq	r0, [fp], #3329	; 0xd01
    9468:	000011a1 	andeq	r1, r0, r1, lsr #3
    946c:	00267521 	eoreq	r7, r6, r1, lsr #10
    9470:	0f8c0d00 	svceq	0x008c0d00
    9474:	00000059 	andeq	r0, r0, r9, asr r0
    9478:	00070101 	andeq	r0, r7, r1, lsl #2
    947c:	0026fd21 	eoreq	pc, r6, r1, lsr #26
    9480:	0f8f0d00 	svceq	0x008f0d00
    9484:	00000059 	andeq	r0, r0, r9, asr r0
    9488:	00040101 	andeq	r0, r4, r1, lsl #2
    948c:	001f3621 	andseq	r3, pc, r1, lsr #12
    9490:	0f910d00 	svceq	0x00910d00
    9494:	00000059 	andeq	r0, r0, r9, asr r0
    9498:	00030101 	andeq	r0, r3, r1, lsl #2
    949c:	0d010c00 	stceq	12, cr0, [r1, #-0]
    94a0:	11eb04a6 	mvnne	r0, r6, lsr #9
    94a4:	67210000 	strvs	r0, [r1, -r0]!
    94a8:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    94ac:	00590fa7 	subseq	r0, r9, r7, lsr #31
    94b0:	04010000 	streq	r0, [r1], #-0
    94b4:	05210004 	streq	r0, [r1, #-4]!
    94b8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    94bc:	00590fa8 	subseq	r0, r9, r8, lsr #31
    94c0:	01010000 	mrseq	r0, (UNDEF: 1)
    94c4:	c5210003 	strgt	r0, [r1, #-3]!
    94c8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    94cc:	00590faa 	subseq	r0, r9, sl, lsr #31
    94d0:	02010000 	andeq	r0, r1, #0
    94d4:	80210001 	eorhi	r0, r1, r1
    94d8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    94dc:	00590fab 	subseq	r0, r9, fp, lsr #31
    94e0:	01010000 	mrseq	r0, (UNDEF: 1)
    94e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    94e8:	04ae0d01 	strteq	r0, [lr], #3329	; 0xd01
    94ec:	00001215 	andeq	r1, r0, r5, lsl r2
    94f0:	0025e221 	eoreq	lr, r5, r1, lsr #4
    94f4:	0faf0d00 	svceq	0x00af0d00
    94f8:	00000059 	andeq	r0, r0, r9, asr r0
    94fc:	00040401 	andeq	r0, r4, r1, lsl #8
    9500:	00273621 	eoreq	r3, r7, r1, lsr #12
    9504:	0fb00d00 	svceq	0x00b00d00
    9508:	00000059 	andeq	r0, r0, r9, asr r0
    950c:	00000401 	andeq	r0, r0, r1, lsl #8
    9510:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9514:	129f04b2 	addsne	r0, pc, #-1308622848	; 0xb2000000
    9518:	75210000 	strvc	r0, [r1, #-0]!
    951c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9520:	00590fb3 	ldrheq	r0, [r9], #-243	; 0xffffff0d
    9524:	01010000 	mrseq	r0, (UNDEF: 1)
    9528:	ab210007 	blge	84954c <__ccfg+0x8295a4>
    952c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9530:	00590fb5 	ldrheq	r0, [r9], #-245	; 0xffffff0b
    9534:	01010000 	mrseq	r0, (UNDEF: 1)
    9538:	53210006 			; <UNDEFINED> instruction: 0x53210006
    953c:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9540:	00590fb7 	ldrheq	r0, [r9], #-247	; 0xffffff09
    9544:	01010000 	mrseq	r0, (UNDEF: 1)
    9548:	fd210005 	stc2	0, cr0, [r1, #-20]!	; 0xffffffec
    954c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9550:	00590fb9 	ldrheq	r0, [r9], #-249	; 0xffffff07
    9554:	01010000 	mrseq	r0, (UNDEF: 1)
    9558:	36210004 	strtcc	r0, [r1], -r4
    955c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9560:	00590fbb 	ldrheq	r0, [r9], #-251	; 0xffffff05
    9564:	01010000 	mrseq	r0, (UNDEF: 1)
    9568:	92210003 	eorls	r0, r1, #3
    956c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9570:	00590fbd 	ldrheq	r0, [r9], #-253	; 0xffffff03
    9574:	01010000 	mrseq	r0, (UNDEF: 1)
    9578:	d6210002 	strtle	r0, [r1], -r2
    957c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9580:	00590fbf 	ldrheq	r0, [r9], #-255	; 0xffffff01
    9584:	01010000 	mrseq	r0, (UNDEF: 1)
    9588:	5e210001 	cdppl	0, 2, cr0, cr1, cr1, {0}
    958c:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9590:	00590fc1 	subseq	r0, r9, r1, asr #31
    9594:	01010000 	mrseq	r0, (UNDEF: 1)
    9598:	0c000000 	stceq	0, cr0, [r0], {-0}
    959c:	04c40d01 	strbeq	r0, [r4], #3329	; 0xd01
    95a0:	00001319 	andeq	r1, r0, r9, lsl r3
    95a4:	00229421 	eoreq	r9, r2, r1, lsr #8
    95a8:	0fc50d00 	svceq	0x00c50d00
    95ac:	00000059 	andeq	r0, r0, r9, asr r0
    95b0:	00070101 	andeq	r0, r7, r1, lsl #2
    95b4:	0020cd21 	eoreq	ip, r0, r1, lsr #26
    95b8:	0fc60d00 	svceq	0x00c60d00
    95bc:	00000059 	andeq	r0, r0, r9, asr r0
    95c0:	00060101 	andeq	r0, r6, r1, lsl #2
    95c4:	00220821 	eoreq	r0, r2, r1, lsr #16
    95c8:	0fc80d00 	svceq	0x00c80d00
    95cc:	00000059 	andeq	r0, r0, r9, asr r0
    95d0:	00040101 	andeq	r0, r4, r1, lsl #2
    95d4:	00217121 	eoreq	r7, r1, r1, lsr #2
    95d8:	0fc90d00 	svceq	0x00c90d00
    95dc:	00000059 	andeq	r0, r0, r9, asr r0
    95e0:	00030101 	andeq	r0, r3, r1, lsl #2
    95e4:	0024e721 	eoreq	lr, r4, r1, lsr #14
    95e8:	0fca0d00 	svceq	0x00ca0d00
    95ec:	00000059 	andeq	r0, r0, r9, asr r0
    95f0:	00020101 	andeq	r0, r2, r1, lsl #2
    95f4:	00201d21 	eoreq	r1, r0, r1, lsr #26
    95f8:	0fcb0d00 	svceq	0x00cb0d00
    95fc:	00000059 	andeq	r0, r0, r9, asr r0
    9600:	00010101 	andeq	r0, r1, r1, lsl #2
    9604:	001f1b21 	andseq	r1, pc, r1, lsr #22
    9608:	0fcc0d00 	svceq	0x00cc0d00
    960c:	00000059 	andeq	r0, r0, r9, asr r0
    9610:	00000101 	andeq	r0, r0, r1, lsl #2
    9614:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9618:	136304d4 	cmnne	r3, #212, 8	; 0xd4000000
    961c:	67210000 	strvs	r0, [r1, -r0]!
    9620:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9624:	00590fd5 	ldrsbeq	r0, [r9], #-245	; 0xffffff0b
    9628:	04010000 	streq	r0, [r1], #-0
    962c:	05210004 	streq	r0, [r1, #-4]!
    9630:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9634:	00590fd6 	ldrsbeq	r0, [r9], #-246	; 0xffffff0a
    9638:	01010000 	mrseq	r0, (UNDEF: 1)
    963c:	c5210003 	strgt	r0, [r1, #-3]!
    9640:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9644:	00590fd8 	ldrsbeq	r0, [r9], #-248	; 0xffffff08
    9648:	02010000 	andeq	r0, r1, #0
    964c:	80210001 	eorhi	r0, r1, r1
    9650:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9654:	00590fd9 	ldrsbeq	r0, [r9], #-249	; 0xffffff07
    9658:	01010000 	mrseq	r0, (UNDEF: 1)
    965c:	1b000000 	blne	9664 <__exidx_end+0x3d4c>
    9660:	01840d01 	orreq	r0, r4, r1, lsl #26
    9664:	0013b204 	andseq	fp, r3, r4, lsl #4
    9668:	27672200 	strbcs	r2, [r7, -r0, lsl #4]!
    966c:	850d0000 	strhi	r0, [sp, #-0]
    9670:	00590f01 	subseq	r0, r9, r1, lsl #30
    9674:	04010000 	streq	r0, [r1], #-0
    9678:	05220004 	streq	r0, [r2, #-4]!
    967c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9680:	590f0186 	stmdbpl	pc, {r1, r2, r7, r8}	; <UNPREDICTABLE>
    9684:	01000000 	mrseq	r0, (UNDEF: 0)
    9688:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    968c:	000021c5 	andeq	r2, r0, r5, asr #3
    9690:	0f01880d 	svceq	0x0001880d
    9694:	00000059 	andeq	r0, r0, r9, asr r0
    9698:	00010201 	andeq	r0, r1, r1, lsl #4
    969c:	001f8022 	andseq	r8, pc, r2, lsr #32
    96a0:	01890d00 	orreq	r0, r9, r0, lsl #26
    96a4:	0000590f 	andeq	r5, r0, pc, lsl #18
    96a8:	00010100 	andeq	r0, r1, r0, lsl #2
    96ac:	011b0000 	tsteq	fp, r0
    96b0:	04018c0d 	streq	r8, [r1], #-3085	; 0xfffff3f3
    96b4:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    96b8:	0025e222 	eoreq	lr, r5, r2, lsr #4
    96bc:	018d0d00 	orreq	r0, sp, r0, lsl #26
    96c0:	0000590f 	andeq	r5, r0, pc, lsl #18
    96c4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    96c8:	27362200 	ldrcs	r2, [r6, -r0, lsl #4]!
    96cc:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    96d0:	00590f01 	subseq	r0, r9, r1, lsl #30
    96d4:	04010000 	streq	r0, [r1], #-0
    96d8:	1b000000 	blne	96e0 <__exidx_end+0x3dc8>
    96dc:	01900d01 	orrseq	r0, r0, r1, lsl #26
    96e0:	00140c04 	andseq	r0, r4, r4, lsl #24
    96e4:	231c2200 	tstcs	ip, #0, 4
    96e8:	910d0000 	mrsls	r0, (UNDEF: 13)
    96ec:	00590f01 	subseq	r0, r9, r1, lsl #30
    96f0:	01010000 	mrseq	r0, (UNDEF: 1)
    96f4:	0a220007 	beq	889718 <__ccfg+0x869770>
    96f8:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    96fc:	590f0193 	stmdbpl	pc, {r0, r1, r4, r7, r8}	; <UNPREDICTABLE>
    9700:	01000000 	mrseq	r0, (UNDEF: 0)
    9704:	00000601 	andeq	r0, r0, r1, lsl #12
    9708:	970d011b 	smladls	sp, fp, r1, r0
    970c:	147d0401 	ldrbtne	r0, [sp], #-1025	; 0xfffffbff
    9710:	c4220000 	strtgt	r0, [r2], #-0
    9714:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9718:	590f0198 	stmdbpl	pc, {r3, r4, r7, r8}	; <UNPREDICTABLE>
    971c:	01000000 	mrseq	r0, (UNDEF: 0)
    9720:	22000701 	andcs	r0, r0, #262144	; 0x40000
    9724:	00002313 	andeq	r2, r0, r3, lsl r3
    9728:	0f01990d 	svceq	0x0001990d
    972c:	00000059 	andeq	r0, r0, r9, asr r0
    9730:	00060101 	andeq	r0, r6, r1, lsl #2
    9734:	00117b22 	andseq	r7, r1, r2, lsr #22
    9738:	019a0d00 	orrseq	r0, sl, r0, lsl #26
    973c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9740:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    9744:	23c32200 	biccs	r2, r3, #0, 4
    9748:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    974c:	00590f01 	subseq	r0, r9, r1, lsl #30
    9750:	01010000 	mrseq	r0, (UNDEF: 1)
    9754:	49220004 	stmdbmi	r2!, {r2}
    9758:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    975c:	590f019f 	stmdbpl	pc, {r0, r1, r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    9760:	01000000 	mrseq	r0, (UNDEF: 0)
    9764:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    9768:	0000239d 	muleq	r0, sp, r3
    976c:	0f01a10d 	svceq	0x0001a10d
    9770:	00000059 	andeq	r0, r0, r9, asr r0
    9774:	00020101 	andeq	r0, r2, r1, lsl #2
    9778:	0d011b00 	vstreq	d1, [r1, #-0]
    977c:	aa0401aa 	bge	109e2c <__ccfg+0xe9e84>
    9780:	22000014 	andcs	r0, r0, #20
    9784:	0000210d 	andeq	r2, r0, sp, lsl #2
    9788:	0f01ab0d 	svceq	0x0001ab0d
    978c:	00000059 	andeq	r0, r0, r9, asr r0
    9790:	00040401 	andeq	r0, r4, r1, lsl #8
    9794:	0021ed22 	eoreq	lr, r1, r2, lsr #26
    9798:	01ad0d00 			; <UNDEFINED> instruction: 0x01ad0d00
    979c:	0000590f 	andeq	r5, r0, pc, lsl #18
    97a0:	00040100 	andeq	r0, r4, r0, lsl #2
    97a4:	011b0000 	tsteq	fp, r0
    97a8:	0401b00d 	streq	fp, [r1], #-13
    97ac:	000014f9 	strdeq	r1, [r0], -r9
    97b0:	00276722 	eoreq	r6, r7, r2, lsr #14
    97b4:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
    97b8:	0000590f 	andeq	r5, r0, pc, lsl #18
    97bc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    97c0:	21052200 	mrscs	r2, SP_usr
    97c4:	b20d0000 	andlt	r0, sp, #0
    97c8:	00590f01 	subseq	r0, r9, r1, lsl #30
    97cc:	01010000 	mrseq	r0, (UNDEF: 1)
    97d0:	c5220003 	strgt	r0, [r2, #-3]!
    97d4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    97d8:	590f01b4 	stmdbpl	pc, {r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    97dc:	01000000 	mrseq	r0, (UNDEF: 0)
    97e0:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    97e4:	00001f80 	andeq	r1, r0, r0, lsl #31
    97e8:	0f01b50d 	svceq	0x0001b50d
    97ec:	00000059 	andeq	r0, r0, r9, asr r0
    97f0:	00000101 	andeq	r0, r0, r1, lsl #2
    97f4:	0d011b00 	vstreq	d1, [r1, #-0]
    97f8:	48040222 	stmdami	r4, {r1, r5, r9}
    97fc:	22000015 	andcs	r0, r0, #21
    9800:	00002767 	andeq	r2, r0, r7, ror #14
    9804:	0f02230d 	svceq	0x0002230d
    9808:	00000059 	andeq	r0, r0, r9, asr r0
    980c:	00040401 	andeq	r0, r4, r1, lsl #8
    9810:	00210522 	eoreq	r0, r1, r2, lsr #10
    9814:	02240d00 	eoreq	r0, r4, #0, 26
    9818:	0000590f 	andeq	r5, r0, pc, lsl #18
    981c:	03010100 	movweq	r0, #4352	; 0x1100
    9820:	21c52200 	biccs	r2, r5, r0, lsl #4
    9824:	260d0000 	strcs	r0, [sp], -r0
    9828:	00590f02 	subseq	r0, r9, r2, lsl #30
    982c:	02010000 	andeq	r0, r1, #0
    9830:	80220001 	eorhi	r0, r2, r1
    9834:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9838:	590f0227 	stmdbpl	pc, {r0, r1, r2, r5, r9}	; <UNPREDICTABLE>
    983c:	01000000 	mrseq	r0, (UNDEF: 0)
    9840:	00000001 	andeq	r0, r0, r1
    9844:	2a0d011b 	bcs	349cb8 <__ccfg+0x329d10>
    9848:	15750402 	ldrbne	r0, [r5, #-1026]!	; 0xfffffbfe
    984c:	e2220000 	eor	r0, r2, #0
    9850:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9854:	590f022b 	stmdbpl	pc, {r0, r1, r3, r5, r9}	; <UNPREDICTABLE>
    9858:	01000000 	mrseq	r0, (UNDEF: 0)
    985c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    9860:	00002736 	andeq	r2, r0, r6, lsr r7
    9864:	0f022c0d 	svceq	0x00022c0d
    9868:	00000059 	andeq	r0, r0, r9, asr r0
    986c:	00000401 	andeq	r0, r0, r1, lsl #8
    9870:	0d021b00 	vstreq	d1, [r2, #-0]
    9874:	a204022e 	andge	r0, r4, #-536870910	; 0xe0000002
    9878:	22000015 	andcs	r0, r0, #21
    987c:	0000221d 	andeq	r2, r0, sp, lsl r2
    9880:	10022f0d 	andne	r2, r2, sp, lsl #30
    9884:	0000006c 	andeq	r0, r0, ip, rrx
    9888:	000d0302 	andeq	r0, sp, r2, lsl #6
    988c:	00271922 	eoreq	r1, r7, r2, lsr #18
    9890:	02320d00 	eorseq	r0, r2, #0, 26
    9894:	00006c10 	andeq	r6, r0, r0, lsl ip
    9898:	000d0200 	andeq	r0, sp, r0, lsl #4
    989c:	041b0000 	ldreq	r0, [fp], #-0
    98a0:	0402340d 	streq	r3, [r2], #-1037	; 0xfffffbf3
    98a4:	000015cf 	andeq	r1, r0, pc, asr #11
    98a8:	0023b222 	eoreq	fp, r3, r2, lsr #4
    98ac:	02350d00 	eorseq	r0, r5, #0, 26
    98b0:	00007f10 	andeq	r7, r0, r0, lsl pc
    98b4:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    98b8:	24c22200 	strbcs	r2, [r2], #512	; 0x200
    98bc:	370d0000 	strcc	r0, [sp, -r0]
    98c0:	007f1002 	rsbseq	r1, pc, r2
    98c4:	15040000 	strne	r0, [r4, #-0]
    98c8:	1b000003 	blne	98dc <__exidx_end+0x3fc4>
    98cc:	023a0d01 	eorseq	r0, sl, #1, 26	; 0x40
    98d0:	0015fc04 	andseq	pc, r5, r4, lsl #24
    98d4:	260e2200 	strcs	r2, [lr], -r0, lsl #4
    98d8:	3b0d0000 	blcc	3498e0 <__ccfg+0x329938>
    98dc:	00590f02 	subseq	r0, r9, r2, lsl #30
    98e0:	06010000 	streq	r0, [r1], -r0
    98e4:	d8220002 	stmdale	r2!, {r1}
    98e8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    98ec:	590f023d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r9}	; <UNPREDICTABLE>
    98f0:	01000000 	mrseq	r0, (UNDEF: 0)
    98f4:	00000002 	andeq	r0, r0, r2
    98f8:	420d021b 	andmi	r0, sp, #-1342177279	; 0xb0000001
    98fc:	165c0402 	ldrbne	r0, [ip], -r2, lsl #8
    9900:	bb220000 	bllt	889908 <__ccfg+0x869960>
    9904:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9908:	6c100243 	lfmvs	f0, 4, [r0], {67}	; 0x43
    990c:	02000000 	andeq	r0, r0, #0
    9910:	22000a06 	andcs	r0, r0, #24576	; 0x6000
    9914:	00002257 	andeq	r2, r0, r7, asr r2
    9918:	1002440d 	andne	r4, r2, sp, lsl #8
    991c:	0000006c 	andeq	r0, r0, ip, rrx
    9920:	00090102 	andeq	r0, r9, r2, lsl #2
    9924:	00242322 	eoreq	r2, r4, r2, lsr #6
    9928:	02460d00 	subeq	r0, r6, #0, 26
    992c:	00006c10 	andeq	r6, r0, r0, lsl ip
    9930:	08010200 	stmdaeq	r1, {r9}
    9934:	1fc02200 	svcne	0x00c02200
    9938:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    993c:	006c1002 	rsbeq	r1, ip, r2
    9940:	04020000 	streq	r0, [r2], #-0
    9944:	63220004 			; <UNDEFINED> instruction: 0x63220004
    9948:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    994c:	6c10024d 	lfmvs	f0, 4, [r0], {77}	; 0x4d
    9950:	02000000 	andeq	r0, r0, #0
    9954:	00000003 	andeq	r0, r0, r3
    9958:	560d021b 			; <UNDEFINED> instruction: 0x560d021b
    995c:	16ab0402 	strtne	r0, [fp], r2, lsl #8
    9960:	b8220000 	stmdalt	r2!, {}	; <UNPREDICTABLE>
    9964:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9968:	6c100257 	lfmvs	f0, 4, [r0], {87}	; 0x57
    996c:	02000000 	andeq	r0, r0, #0
    9970:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    9974:	00002157 	andeq	r2, r0, r7, asr r1
    9978:	10025d0d 	andne	r5, r2, sp, lsl #26
    997c:	0000006c 	andeq	r0, r0, ip, rrx
    9980:	000c0102 	andeq	r0, ip, r2, lsl #2
    9984:	0020f722 	eoreq	pc, r0, r2, lsr #14
    9988:	025f0d00 	subseq	r0, pc, #0, 26
    998c:	00006c10 	andeq	r6, r0, r0, lsl ip
    9990:	06060200 	streq	r0, [r6], -r0, lsl #4
    9994:	23f62200 	mvnscs	r2, #0, 4
    9998:	660d0000 	strvs	r0, [sp], -r0
    999c:	006c1002 	rsbeq	r1, ip, r2
    99a0:	01020000 	mrseq	r0, (UNDEF: 2)
    99a4:	02000005 	andeq	r0, r0, #5
    99a8:	0000257e 	andeq	r2, r0, lr, ror r5
    99ac:	b7343c0e 	ldrlt	r3, [r4, -lr, lsl #24]!
    99b0:	0f000016 	svceq	0x00000016
    99b4:	00002567 	andeq	r2, r0, r7, ror #10
    99b8:	155e0e0c 	ldrbne	r0, [lr, #-3596]	; 0xfffff1f4
    99bc:	00001706 	andeq	r1, r0, r6, lsl #14
    99c0:	00202e0d 	eoreq	r2, r0, sp, lsl #28
    99c4:	0d5f0e00 	ldcleq	14, cr0, [pc, #-0]	; 99cc <__exidx_end+0x40b4>
    99c8:	00000984 	andeq	r0, r0, r4, lsl #19
    99cc:	07840d00 	streq	r0, [r4, r0, lsl #26]
    99d0:	600e0000 	andvs	r0, lr, r0
    99d4:	0000590c 	andeq	r5, r0, ip, lsl #18
    99d8:	7b0d0400 	blvc	34a9e0 <__ccfg+0x32aa38>
    99dc:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    99e0:	1706066e 	strne	r0, [r6, -lr, ror #12]
    99e4:	0d050000 	stceq	0, cr0, [r5, #-0]
    99e8:	000018f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    99ec:	6c0d6f0e 	stcvs	15, cr6, [sp], {14}
    99f0:	06000000 	streq	r0, [r0], -r0
    99f4:	0047520d 	subeq	r5, r7, sp, lsl #4
    99f8:	0c710e00 	ldcleq	14, cr0, [r1], #-0
    99fc:	00000059 	andeq	r0, r0, r9, asr r0
    9a00:	010c0008 	tsteq	ip, r8
    9a04:	4004610e 	andmi	r6, r4, lr, lsl #2
    9a08:	21000017 	tstcs	r0, r7, lsl r0
    9a0c:	00005364 	andeq	r5, r0, r4, ror #6
    9a10:	590f620e 	stmdbpl	pc, {r1, r2, r3, r9, sp, lr}	; <UNPREDICTABLE>
    9a14:	01000000 	mrseq	r0, (UNDEF: 0)
    9a18:	21000602 	tstcs	r0, r2, lsl #12
    9a1c:	0000253f 	andeq	r2, r0, pc, lsr r5
    9a20:	590f670e 	stmdbpl	pc, {r1, r2, r3, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    9a24:	01000000 	mrseq	r0, (UNDEF: 0)
    9a28:	21000402 	tstcs	r0, r2, lsl #8
    9a2c:	00001ff7 	strdeq	r1, [r0], -r7
    9a30:	590f6c0e 	stmdbpl	pc, {r1, r2, r3, sl, fp, sp, lr}	; <UNPREDICTABLE>
    9a34:	01000000 	mrseq	r0, (UNDEF: 0)
    9a38:	00000004 	andeq	r0, r0, r4
    9a3c:	4802100c 	stmdami	r2, {r2, r3, ip}
    9a40:	00177e09 	andseq	r7, r7, r9, lsl #28
    9a44:	217d0d00 	cmncs	sp, r0, lsl #26
    9a48:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    9a4c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9a50:	de0d0000 	cdple	0, 0, cr0, cr13, cr0, {0}
    9a54:	02000020 	andeq	r0, r0, #32
    9a58:	007f0d4a 	rsbseq	r0, pc, sl, asr #26
    9a5c:	0d040000 	stceq	0, cr0, [r4, #-0]
    9a60:	00002529 	andeq	r2, r0, r9, lsr #10
    9a64:	7f0d4b02 	svcvc	0x000d4b02
    9a68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9a6c:	00267c0d 	eoreq	r7, r6, sp, lsl #24
    9a70:	0d4c0200 	sfmeq	f0, 2, [ip, #-0]
    9a74:	0000007f 	andeq	r0, r0, pc, ror r0
    9a78:	8902000c 	stmdbhi	r2, {r2, r3}
    9a7c:	0200001f 	andeq	r0, r0, #31
    9a80:	1740034d 	strbne	r0, [r0, -sp, asr #6]
    9a84:	8b0a0000 	blhi	289a8c <__ccfg+0x269ae4>
    9a88:	9a000000 	bls	9a90 <__exidx_end+0x4178>
    9a8c:	0b000017 	bleq	9af0 <__exidx_end+0x41d8>
    9a90:	000000aa 	andeq	r0, r0, sl, lsr #1
    9a94:	8a0400a2 	bhi	109d24 <__ccfg+0xe9d7c>
    9a98:	23000017 	movwcs	r0, #23
    9a9c:	000022c1 	andeq	r2, r0, r1, asr #5
    9aa0:	9a104904 	bls	41beb8 <__ccfg+0x3fbf10>
    9aa4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9aa8:	00564803 	subseq	r4, r6, r3, lsl #16
    9aac:	008b0a00 	addeq	r0, fp, r0, lsl #20
    9ab0:	17c20000 	strbne	r0, [r2, r0]
    9ab4:	aa240000 	bge	909abc <__ccfg+0x8e9b14>
    9ab8:	ac000000 	stcge	0, cr0, [r0], {-0}
    9abc:	b1040001 	tstlt	r4, r1
    9ac0:	23000017 	movwcs	r0, #23
    9ac4:	0000234a 	andeq	r2, r0, sl, asr #6
    9ac8:	c2103a05 	andsgt	r3, r0, #20480	; 0x5000
    9acc:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9ad0:	004f9403 	subeq	r9, pc, r3, lsl #8
    9ad4:	28f90200 	ldmcs	r9!, {r9}^
    9ad8:	270f0000 	strcs	r0, [pc, -r0]
    9adc:	00006c12 	andeq	r6, r0, r2, lsl ip
    9ae0:	17d90400 	ldrbne	r0, [r9, r0, lsl #8]
    9ae4:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    9ae8:	02000017 	andeq	r0, r0, #23
    9aec:	00001dc0 	andeq	r1, r0, r0, asr #27
    9af0:	59122b0f 	ldmdbpl	r2, {r0, r1, r2, r3, r8, r9, fp, sp}
    9af4:	05000000 	streq	r0, [r0, #-0]
    9af8:	000017ef 	andeq	r1, r0, pc, ror #15
    9afc:	00294b02 	eoreq	r4, r9, r2, lsl #22
    9b00:	122c0f00 	eorne	r0, ip, #0, 30
    9b04:	0000007f 	andeq	r0, r0, pc, ror r0
    9b08:	00180004 	andseq	r0, r8, r4
    9b0c:	06520200 	ldrbeq	r0, [r2], -r0, lsl #4
    9b10:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 9b18 <__exidx_end+0x4200>
    9b14:	00007f12 	andeq	r7, r0, r2, lsl pc
    9b18:	0bc00200 	bleq	ff00a320 <_estack+0xdf005320>
    9b1c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    9b20:	00182910 	andseq	r2, r8, r0, lsl r9
    9b24:	d9041100 	stmdble	r4, {r8, ip}
    9b28:	0c000017 	stceq	0, cr0, [r0], {23}
    9b2c:	09320f08 	ldmdbeq	r2!, {r3, r8, r9, sl, fp}
    9b30:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    9b34:	00002b21 	andeq	r2, r0, r1, lsr #22
    9b38:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    9b3c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b40:	00070101 	andeq	r0, r7, r1, lsl #2
    9b44:	00065821 	andeq	r5, r6, r1, lsr #16
    9b48:	03350f00 	teqeq	r5, #0, 30
    9b4c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b50:	00060101 	andeq	r0, r6, r1, lsl #2
    9b54:	0002ef21 	andeq	lr, r2, r1, lsr #30
    9b58:	03360f00 	teqeq	r6, #0, 30
    9b5c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b60:	00050101 	andeq	r0, r5, r1, lsl #2
    9b64:	0006c321 	andeq	ip, r6, r1, lsr #6
    9b68:	03370f00 	teqeq	r7, #0, 30
    9b6c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b70:	00040101 	andeq	r0, r4, r1, lsl #2
    9b74:	000aab21 	andeq	sl, sl, r1, lsr #22
    9b78:	03380f00 	teqeq	r8, #0, 30
    9b7c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b80:	00000401 	andeq	r0, r0, r1, lsl #8
    9b84:	0006670d 	andeq	r6, r6, sp, lsl #14
    9b88:	073a0f00 	ldreq	r0, [sl, -r0, lsl #30]!
    9b8c:	000017ef 	andeq	r1, r0, pc, ror #15
    9b90:	09070d01 	stmdbeq	r7, {r0, r8, sl, fp}
    9b94:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    9b98:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9b9c:	380d0200 	stmdacc	sp, {r9}
    9ba0:	0f00000f 	svceq	0x0000000f
    9ba4:	17ef033d 			; <UNDEFINED> instruction: 0x17ef033d
    9ba8:	0d030000 	stceq	0, cr0, [r3, #-0]
    9bac:	0000091f 	andeq	r0, r0, pc, lsl r9
    9bb0:	00083f0f 	andeq	r3, r8, pc, lsl #30
    9bb4:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    9bb8:	03250200 			; <UNDEFINED> instruction: 0x03250200
    9bbc:	410f0000 	mrsmi	r0, CPSR
    9bc0:	00182f03 	andseq	r2, r8, r3, lsl #30
    9bc4:	18bd0500 	popne	{r8, sl}
    9bc8:	ca250000 	bgt	949bd0 <__ccfg+0x929c28>
    9bcc:	0f000006 	svceq	0x00000006
    9bd0:	18c91a43 	stmiane	r9, {r0, r1, r6, r9, fp, ip}^
    9bd4:	01010000 	mrseq	r0, (UNDEF: 1)
    9bd8:	00019725 	andeq	r9, r1, r5, lsr #14
    9bdc:	0e450f00 	cdpeq	15, 4, cr0, cr5, cr0, {0}
    9be0:	000005eb 	andeq	r0, r0, fp, ror #11
    9be4:	2e250101 	sufcss	f0, f5, f1
    9be8:	0f000003 	svceq	0x00000003
    9bec:	05eb1e45 	strbeq	r1, [fp, #3653]!	; 0xe45
    9bf0:	01010000 	mrseq	r0, (UNDEF: 1)
    9bf4:	8f10080c 	svchi	0x0010080c
    9bf8:	00192909 	andseq	r2, r9, r9, lsl #18
    9bfc:	0cd60d00 	ldcleq	13, cr0, [r6], {0}
    9c00:	90100000 	andsls	r0, r0, r0
    9c04:	00007f0b 	andeq	r7, r0, fp, lsl #30
    9c08:	730d0000 	movwvc	r0, #53248	; 0xd000
    9c0c:	10000010 	andne	r0, r0, r0, lsl r0
    9c10:	17d90891 	bfine	r0, r1, #17, #9
    9c14:	0d040000 	stceq	0, cr0, [r4, #-0]
    9c18:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    9c1c:	fb109210 	blx	42e466 <__ccfg+0x40e4be>
    9c20:	06000017 			; <UNDEFINED> instruction: 0x06000017
    9c24:	0cca0200 	sfmeq	f0, 2, [sl], {0}
    9c28:	93100000 	tstls	r0, #0
    9c2c:	0018f803 	andseq	pc, r8, r3, lsl #16
    9c30:	19290a00 	stmdbne	r9!, {r9, fp}
    9c34:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    9c38:	00260000 	eoreq	r0, r6, r0
    9c3c:	00094925 	andeq	r4, r9, r5, lsr #18
    9c40:	0f991000 	svceq	0x00991000
    9c44:	00001935 	andeq	r1, r0, r5, lsr r9
    9c48:	010c0101 	tsteq	ip, r1, lsl #2
    9c4c:	78099111 	stmdavc	r9, {r0, r4, r8, ip, pc}
    9c50:	21000019 	tstcs	r0, r9, lsl r0
    9c54:	00000926 	andeq	r0, r0, r6, lsr #18
    9c58:	ef079311 	svc	0x00079311
    9c5c:	01000017 	tsteq	r0, r7, lsl r0
    9c60:	21000107 	tstcs	r0, r7, lsl #2
    9c64:	000005d8 	ldrdeq	r0, [r0], -r8
    9c68:	ef039411 	svc	0x00039411
    9c6c:	01000017 	tsteq	r0, r7, lsl r0
    9c70:	00000001 	andeq	r0, r0, r1
    9c74:	000ab702 	andeq	fp, sl, r2, lsl #14
    9c78:	03961100 	orrseq	r1, r6, #0, 2
    9c7c:	0000194e 	andeq	r1, r0, lr, asr #18
    9c80:	00197804 	andseq	r7, r9, r4, lsl #16
    9c84:	19840a00 	stmibne	r4, {r9, fp}
    9c88:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    9c8c:	00260000 	eoreq	r0, r6, r0
    9c90:	00198904 	andseq	r8, r9, r4, lsl #18
    9c94:	03bd2500 			; <UNDEFINED> instruction: 0x03bd2500
    9c98:	9c110000 	ldcls	0, cr0, [r1], {-0}
    9c9c:	00199417 	andseq	r9, r9, r7, lsl r4
    9ca0:	0a010100 	beq	4a0a8 <__ccfg+0x2a100>
    9ca4:	000017e5 	andeq	r1, r0, r5, ror #15
    9ca8:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    9cac:	a7040026 	strge	r0, [r4, -r6, lsr #32]
    9cb0:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    9cb4:	0000061a 	andeq	r0, r0, sl, lsl r6
    9cb8:	b2130612 	andslt	r0, r3, #18874368	; 0x1200000
    9cbc:	01000019 	tsteq	r0, r9, lsl r0
    9cc0:	08e92501 	stmiaeq	r9!, {r0, r8, sl, sp}^
    9cc4:	c3100000 	tstgt	r0, #0
    9cc8:	0018000e 	andseq	r0, r8, lr
    9ccc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9cd0:	00000c7e 	andeq	r0, r0, lr, ror ip
    9cd4:	10016e13 	andne	r6, r1, r3, lsl lr
    9cd8:	000019e0 	andeq	r1, r0, r0, ror #19
    9cdc:	19e60411 	stmibne	r6!, {r0, r4, sl}^
    9ce0:	011f0000 	tsteq	pc, r0
    9ce4:	000019f2 	strdeq	r1, [r0], -r2
    9ce8:	0017d916 	andseq	sp, r7, r6, lsl r9
    9cec:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    9cf0:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    9cf4:	26000019 			; <UNDEFINED> instruction: 0x26000019
    9cf8:	19f20400 	ldmibne	r2!, {sl}^
    9cfc:	f2200000 	vhadd.s32	d0, d0, d0
    9d00:	13000009 	movwne	r0, #9
    9d04:	fd16017f 	ldc2	1, cr0, [r6, #-508]	; 0xfffffe04
    9d08:	01000019 	tsteq	r0, r9, lsl r0
    9d0c:	03a92001 			; <UNDEFINED> instruction: 0x03a92001
    9d10:	82130000 	andshi	r0, r3, #0
    9d14:	180c1401 	stmdane	ip, {r0, sl, ip}
    9d18:	01010000 	mrseq	r0, (UNDEF: 1)
    9d1c:	00038120 	andeq	r8, r3, r0, lsr #2
    9d20:	02d81300 	sbcseq	r1, r8, #0, 6
    9d24:	0018000e 	andseq	r0, r8, lr
    9d28:	1b010100 	blne	4a130 <__ccfg+0x2a188>
    9d2c:	03031308 	movweq	r1, #13064	; 0x3308
    9d30:	001a5609 	andseq	r5, sl, r9, lsl #12
    9d34:	3c9f1800 	ldccc	8, cr1, [pc], {0}
    9d38:	07130000 	ldreq	r0, [r3, -r0]
    9d3c:	17d90703 	ldrbne	r0, [r9, r3, lsl #14]
    9d40:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9d44:	00000fcb 	andeq	r0, r0, fp, asr #31
    9d48:	08030813 	stmdaeq	r3, {r0, r1, r4, fp}
    9d4c:	00001811 	andeq	r1, r0, r1, lsl r8
    9d50:	15070004 	strne	r0, [r7, #-4]
    9d54:	1300000a 	movwne	r0, #10
    9d58:	2f030309 	svccs	0x00030309
    9d5c:	1a00001a 	bne	9dcc <__exidx_end+0x44b4>
    9d60:	00000020 	andeq	r0, r0, r0, lsr #32
    9d64:	030b1330 	movweq	r1, #45872	; 0xb330
    9d68:	001ac608 	andseq	ip, sl, r8, lsl #12
    9d6c:	1f221800 	svcne	0x00221800
    9d70:	14130000 	ldrne	r0, [r3], #-0
    9d74:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    9d78:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9d7c:	00000bf3 	strdeq	r0, [r0], -r3
    9d80:	08031513 	stmdaeq	r3, {r0, r1, r4, r8, sl, ip}
    9d84:	000017d9 	ldrdeq	r1, [r0], -r9
    9d88:	4c8c1802 	stcmi	8, cr1, [ip], {2}
    9d8c:	16130000 	ldrne	r0, [r3], -r0
    9d90:	19d30b03 	ldmibne	r3, {r0, r1, r8, r9, fp}^
    9d94:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    9d98:	00004752 	andeq	r4, r0, r2, asr r7
    9d9c:	09031713 	stmdbeq	r3, {r0, r1, r4, r8, r9, sl, ip}
    9da0:	00001811 	andeq	r1, r0, r1, lsl r8
    9da4:	000f1808 	andeq	r1, pc, r8, lsl #16
    9da8:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    9dac:	1ac60f03 	bne	ff18d9c0 <_estack+0xdf1889c0>
    9db0:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    9db4:	00000969 	andeq	r0, r0, r9, ror #18
    9db8:	15031913 	strne	r1, [r3, #-2323]	; 0xfffff6ed
    9dbc:	00001ad6 	ldrdeq	r1, [r0], -r6
    9dc0:	560a002c 	strpl	r0, [sl], -ip, lsr #32
    9dc4:	d600001a 			; <UNDEFINED> instruction: 0xd600001a
    9dc8:	0b00001a 	bleq	9e38 <__exidx_end+0x4520>
    9dcc:	000000aa 	andeq	r0, r0, sl, lsr #1
    9dd0:	04110003 	ldreq	r0, [r1], #-3
    9dd4:	00001a63 	andeq	r1, r0, r3, ror #20
    9dd8:	000be807 	andeq	lr, fp, r7, lsl #16
    9ddc:	031c1300 	tsteq	ip, #0, 6
    9de0:	001a631b 	andseq	r6, sl, fp, lsl r3
    9de4:	0bc82000 	bleq	ff211dec <_estack+0xdf20cdec>
    9de8:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    9dec:	1af81403 	bne	ffe0ee00 <_estack+0xdfe09e00>
    9df0:	01010000 	mrseq	r0, (UNDEF: 1)
    9df4:	1adc0411 	bne	ff70ae40 <_estack+0xdf705e40>
    9df8:	1b250000 	blne	949e00 <__ccfg+0x929e58>
    9dfc:	14000007 	strne	r0, [r0], #-7
    9e00:	17d9131d 	bfine	r1, sp, #6, #20
    9e04:	01010000 	mrseq	r0, (UNDEF: 1)
    9e08:	0002f625 	andeq	pc, r2, r5, lsr #12
    9e0c:	1a1e1400 	bne	78ee14 <__ccfg+0x76ee6c>
    9e10:	000017ea 	andeq	r1, r0, sl, ror #15
    9e14:	75250101 	strvc	r0, [r5, #-257]!	; 0xfffffeff
    9e18:	1400000c 	strne	r0, [r0], #-12
    9e1c:	17ea241e 			; <UNDEFINED> instruction: 0x17ea241e
    9e20:	01010000 	mrseq	r0, (UNDEF: 1)
    9e24:	000c9325 	andeq	r9, ip, r5, lsr #6
    9e28:	14221400 	strtne	r1, [r2], #-1024	; 0xfffffc00
    9e2c:	00001af8 	strdeq	r1, [r0], -r8
    9e30:	39250101 	stmdbcc	r5!, {r0, r8}
    9e34:	15000020 	strne	r0, [r0, #-32]	; 0xffffffe0
    9e38:	0f6d2739 	svceq	0x006d2739
    9e3c:	01010000 	mrseq	r0, (UNDEF: 1)
    9e40:	00232725 	eoreq	r2, r3, r5, lsr #14
    9e44:	153a1500 	ldrne	r1, [sl, #-1280]!	; 0xfffffb00
    9e48:	000009fe 	strdeq	r0, [r0], -lr
    9e4c:	43250101 			; <UNDEFINED> instruction: 0x43250101
    9e50:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    9e54:	0cec1a3b 	vstmiaeq	ip!, {s3-s61}
    9e58:	01010000 	mrseq	r0, (UNDEF: 1)
    9e5c:	0025e725 	eoreq	lr, r5, r5, lsr #14
    9e60:	1a3c1500 	bne	f0f268 <__ccfg+0xeef2c0>
    9e64:	00000d88 	andeq	r0, r0, r8, lsl #27
    9e68:	e4230101 	strt	r0, [r3], #-257	; 0xfffffeff
    9e6c:	01000026 	tsteq	r0, r6, lsr #32
    9e70:	00a30c24 	adceq	r0, r3, r4, lsr #24
    9e74:	03050000 	movweq	r0, #20480	; 0x5000
    9e78:	200005f8 	strdcs	r0, [r0], -r8
    9e7c:	001f9223 	andseq	r9, pc, r3, lsr #4
    9e80:	0d260100 	stfeqs	f0, [r6, #-0]
    9e84:	000017ef 	andeq	r1, r0, pc, ror #15
    9e88:	06040305 	streq	r0, [r4], -r5, lsl #6
    9e8c:	01232000 			; <UNDEFINED> instruction: 0x01232000
    9e90:	01000016 	tsteq	r0, r6, lsl r0
    9e94:	17ef0327 	strbne	r0, [pc, r7, lsr #6]!
    9e98:	03050000 	movweq	r0, #20480	; 0x5000
    9e9c:	200005f4 	strdcs	r0, [r0], -r4
    9ea0:	00241b23 	eoreq	r1, r4, r3, lsr #22
    9ea4:	0d2a0100 	stfeqs	f0, [sl, #-0]
    9ea8:	000017ef 	andeq	r1, r0, pc, ror #15
    9eac:	06260305 	strteq	r0, [r6], -r5, lsl #6
    9eb0:	15232000 	strne	r2, [r3, #-0]!
    9eb4:	01000024 	tsteq	r0, r4, lsr #32
    9eb8:	17ef0d43 	strbne	r0, [pc, r3, asr #26]!
    9ebc:	03050000 	movweq	r0, #20480	; 0x5000
    9ec0:	2000003a 	andcs	r0, r0, sl, lsr r0
    9ec4:	0020b223 	eoreq	fp, r0, r3, lsr #4
    9ec8:	0d470100 	stfeqe	f0, [r7, #-0]
    9ecc:	000017ef 	andeq	r1, r0, pc, ror #15
    9ed0:	05ec0305 	strbeq	r0, [ip, #773]!	; 0x305
    9ed4:	e50a2000 	str	r2, [sl, #-0]
    9ed8:	ea000017 	b	9f3c <__exidx_end+0x4624>
    9edc:	0b00001b 	bleq	9f50 <__exidx_end+0x4638>
    9ee0:	000000aa 	andeq	r0, r0, sl, lsr #1
    9ee4:	da040007 	ble	109f08 <__ccfg+0xe9f60>
    9ee8:	2300001b 	movwcs	r0, #27
    9eec:	000024a3 	andeq	r2, r0, r3, lsr #9
    9ef0:	ea134e01 	b	4dd6fc <__ccfg+0x4bd754>
    9ef4:	0500001b 	streq	r0, [r0, #-27]	; 0xffffffe5
    9ef8:	004f8203 	subeq	r8, pc, r3, lsl #4
    9efc:	273c2300 	ldrcs	r2, [ip, -r0, lsl #6]!
    9f00:	52010000 	andpl	r0, r1, #0
    9f04:	0017d90d 	andseq	sp, r7, sp, lsl #18
    9f08:	fc030500 	stc2	5, cr0, [r3], {-0}
    9f0c:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9f10:	000023d4 	ldrdeq	r2, [r0], -r4
    9f14:	d9035301 	stmdble	r3, {r0, r8, r9, ip, lr}
    9f18:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9f1c:	00062403 	andeq	r2, r6, r3, lsl #8
    9f20:	261a2320 	ldrcs	r2, [sl], -r0, lsr #6
    9f24:	54010000 	strpl	r0, [r1], #-0
    9f28:	0017d903 	andseq	sp, r7, r3, lsl #18
    9f2c:	ea030500 	b	cb334 <__ccfg+0xab38c>
    9f30:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9f34:	00001fcf 	andeq	r1, r0, pc, asr #31
    9f38:	d9035501 	stmdble	r3, {r0, r8, sl, ip, lr}
    9f3c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9f40:	00003803 	andeq	r3, r0, r3, lsl #16
    9f44:	01040c20 	tsteq	r4, r0, lsr #24
    9f48:	1c6b0959 			; <UNDEFINED> instruction: 0x1c6b0959
    9f4c:	70100000 	andsvc	r0, r0, r0
    9f50:	5a010073 	bpl	4a124 <__ccfg+0x2a17c>
    9f54:	0017d908 	andseq	sp, r7, r8, lsl #18
    9f58:	72100000 	andsvc	r0, r0, #0
    9f5c:	5b010077 	blpl	4a140 <__ccfg+0x2a198>
    9f60:	0017d904 	andseq	sp, r7, r4, lsl #18
    9f64:	02000200 	andeq	r0, r0, #0, 4
    9f68:	00002363 	andeq	r2, r0, r3, ror #6
    9f6c:	49035c01 	stmdbmi	r3, {r0, sl, fp, ip, lr}
    9f70:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    9f74:	00001c6b 	andeq	r1, r0, fp, ror #24
    9f78:	001c770a 	andseq	r7, ip, sl, lsl #14
    9f7c:	001c8c00 	andseq	r8, ip, r0, lsl #24
    9f80:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9f84:	00020000 	andeq	r0, r2, r0
    9f88:	001c7c04 	andseq	r7, ip, r4, lsl #24
    9f8c:	23952300 	orrscs	r2, r5, #0, 6
    9f90:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    9f94:	001c8c18 	andseq	r8, ip, r8, lsl ip
    9f98:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    9f9c:	23000058 	movwcs	r0, #88	; 0x58
    9fa0:	000024cb 	andeq	r2, r0, fp, asr #9
    9fa4:	761b6601 	ldrvc	r6, [fp], -r1, lsl #12
    9fa8:	05000010 	streq	r0, [r0, #-16]
    9fac:	00061803 	andeq	r1, r6, r3, lsl #16
    9fb0:	26062320 	strcs	r2, [r6], -r0, lsr #6
    9fb4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    9fb8:	0018110e 	andseq	r1, r8, lr, lsl #2
    9fbc:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    9fc0:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9fc4:	00002051 	andeq	r2, r0, r1, asr r0
    9fc8:	11176901 	tstne	r7, r1, lsl #18
    9fcc:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9fd0:	00060003 	andeq	r0, r6, r3
    9fd4:	266d2320 	strbtcs	r2, [sp], -r0, lsr #6
    9fd8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9fdc:	000ac121 	andeq	ip, sl, r1, lsr #2
    9fe0:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    9fe4:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9fe8:	000021de 	ldrdeq	r2, [r0], -lr
    9fec:	721a8301 	andsvc	r8, sl, #67108864	; 0x4000000
    9ff0:	0500000e 	streq	r0, [r0, #-14]
    9ff4:	00000803 	andeq	r0, r0, r3, lsl #16
    9ff8:	1f2f2320 	svcne	0x002f2320
    9ffc:	c1010000 	mrsgt	r0, (UNDEF: 1)
    a000:	00177e11 	andseq	r7, r7, r1, lsl lr
    a004:	08030500 	stmdaeq	r3, {r8, sl}
    a008:	27200006 	strcs	r0, [r0, -r6]!
    a00c:	00002535 	andeq	r2, r0, r5, lsr r5
    a010:	0c020a01 			; <UNDEFINED> instruction: 0x0c020a01
    a014:	000000a3 	andeq	r0, r0, r3, lsr #1
    a018:	20600128 	rsbcs	r0, r0, r8, lsr #2
    a01c:	d7010000 	strle	r0, [r1, -r0]
    a020:	c8010603 	stmdagt	r1, {r0, r1, r9, sl}
    a024:	3c00002d 	stccc	0, cr0, [r0], {45}	; 0x2d
    a028:	0100002f 	tsteq	r0, pc, lsr #32
    a02c:	001da59c 	mulseq	sp, ip, r5
    a030:	68702900 	ldmdavs	r0!, {r8, fp, sp}^
    a034:	d7010079 	smlsdxle	r1, r9, r0, r0
    a038:	00a31703 	adceq	r1, r3, r3, lsl #14
    a03c:	27d70000 	ldrbcs	r0, [r7, r0]
    a040:	6d290000 	stcvs	0, cr0, [r9, #-0]
    a044:	01007362 	tsteq	r0, r2, ror #6
    a048:	a32003d7 			; <UNDEFINED> instruction: 0xa32003d7
    a04c:	21000000 	mrscs	r0, (UNDEF: 0)
    a050:	2a000028 	bcs	a0f8 <__exidx_end+0x47e0>
    a054:	00001e35 	andeq	r1, r0, r5, lsr lr
    a058:	00002dec 	andeq	r2, r0, ip, ror #27
    a05c:	00000e88 	andeq	r0, r0, r8, lsl #29
    a060:	0203f001 	andeq	pc, r3, #1
    a064:	00001d93 	muleq	r0, r3, sp
    a068:	000e882b 	andeq	r8, lr, fp, lsr #16
    a06c:	1e432c00 	cdpne	12, 4, cr2, cr3, cr0, {0}
    a070:	4e2d0000 	cdpmi	0, 2, cr0, cr13, cr0, {0}
    a074:	4a00001e 	bmi	a0f4 <__exidx_end+0x47dc>
    a078:	2d000028 	stccs	0, cr0, [r0, #-160]	; 0xffffff60
    a07c:	00001e5a 	andeq	r1, r0, sl, asr lr
    a080:	00002869 	andeq	r2, r0, r9, ror #16
    a084:	001e662d 	andseq	r6, lr, sp, lsr #12
    a088:	00289200 	eoreq	r9, r8, r0, lsl #4
    a08c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    a090:	00001fcc 	andeq	r1, r0, ip, asr #31
    a094:	00002ea2 	andeq	r2, r0, r2, lsr #29
    a098:	00000ec8 	andeq	r0, r0, r8, asr #29
    a09c:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    a0a0:	23432f00 	movtcs	r2, #16128	; 0x3f00
    a0a4:	4a010000 	bmi	4a0ac <__ccfg+0x2a104>
    a0a8:	a3010c03 	movwge	r0, #7171	; 0x1c03
    a0ac:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    a0b0:	18000026 	stmdane	r0, {r1, r2, r5}
    a0b4:	01000028 	tsteq	r0, r8, lsr #32
    a0b8:	001e359c 	mulseq	lr, ip, r5
    a0bc:	706f2900 	rsbvc	r2, pc, r0, lsl #18
    a0c0:	4a010074 	bmi	4a298 <__ccfg+0x2a2f0>
    a0c4:	00a31803 	adceq	r1, r3, r3, lsl #16
    a0c8:	28c60000 	stmiacs	r6, {}^	; <UNPREDICTABLE>
    a0cc:	76290000 	strtvc	r0, [r9], -r0
    a0d0:	01006c61 	tsteq	r0, r1, ror #24
    a0d4:	1d25034a 	stcne	3, cr0, [r5, #-296]!	; 0xfffffed8
    a0d8:	52000018 	andpl	r0, r0, #24
    a0dc:	30000029 	andcc	r0, r0, r9, lsr #32
    a0e0:	00746572 	rsbseq	r6, r4, r2, ror r5
    a0e4:	06034c01 	streq	r4, [r3], -r1, lsl #24
    a0e8:	000000a3 	andeq	r0, r0, r3, lsr #1
    a0ec:	00002a0a 	andeq	r2, r0, sl, lsl #20
    a0f0:	0021f931 	eoreq	pc, r1, r1, lsr r9	; <UNPREDICTABLE>
    a0f4:	03cf0100 	biceq	r0, pc, #0, 2
    a0f8:	00271001 	eoreq	r1, r7, r1
    a0fc:	24033100 	strcs	r3, [r3], #-256	; 0xffffff00
    a100:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a104:	26ca0103 	strbcs	r0, [sl], r3, lsl #2
    a108:	af310000 	svcge	0x00310000
    a10c:	01000025 	tsteq	r0, r5, lsr #32
    a110:	140103cd 	strne	r0, [r1], #-973	; 0xfffffc33
    a114:	32000027 	andcc	r0, r0, #39	; 0x27
    a118:	000026ca 	andeq	r2, r0, sl, asr #13
    a11c:	000026f4 	strdeq	r2, [r0], -r4
    a120:	01006a30 	tsteq	r0, r0, lsr sl
    a124:	a3040359 	movwge	r0, #17241	; 0x4359
    a128:	54000000 	strpl	r0, [r0], #-0
    a12c:	0000002a 	andeq	r0, r0, sl, lsr #32
    a130:	22783300 	rsbscs	r3, r8, #0, 6
    a134:	07010000 	streq	r0, [r1, -r0]
    a138:	73010d03 	movwvc	r0, #7427	; 0x1d03
    a13c:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a140:	0b010069 	bleq	4a2ec <__ccfg+0x2a344>
    a144:	00a30603 	adceq	r0, r3, r3, lsl #12
    a148:	72340000 	eorsvc	r0, r4, #0
    a14c:	0c010065 	stceq	0, cr0, [r1], {101}	; 0x65
    a150:	1e731a03 	vaddne.f32	s3, s6, s6
    a154:	64340000 	ldrtvs	r0, [r4], #-0
    a158:	0c010061 	stceq	0, cr0, [r1], {97}	; 0x61
    a15c:	1e731f03 	cdpne	15, 7, cr1, cr3, cr3, {0}
    a160:	64340000 	ldrtvs	r0, [r4], #-0
    a164:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    a168:	1e732403 	cdpne	4, 7, cr2, cr3, cr3, {0}
    a16c:	11000000 	mrsne	r0, (UNDEF: 0)
    a170:	0016ab04 	andseq	sl, r6, r4, lsl #22
    a174:	6c012800 	stcvs	8, cr2, [r1], {-0}
    a178:	01000020 	tsteq	r0, r0, lsr #32
    a17c:	0101020d 	tsteq	r1, sp, lsl #4
    a180:	00002b68 	andeq	r2, r0, r8, ror #22
    a184:	00002d58 	andeq	r2, r0, r8, asr sp
    a188:	1efd9c01 	cdpne	12, 15, cr9, cr13, cr1, {0}
    a18c:	3f350000 	svccc	0x00350000
    a190:	0100000c 	tsteq	r0, ip
    a194:	d901020d 	stmdble	r1, {r0, r2, r3, r9}
    a198:	67000017 	smladvs	r0, r7, r0, r0
    a19c:	3100002a 	tstcc	r0, sl, lsr #32
    a1a0:	00001f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    a1a4:	01021601 	tsteq	r2, r1, lsl #12
    a1a8:	00002b7c 	andeq	r2, r0, ip, ror fp
    a1ac:	0020232e 	eoreq	r2, r0, lr, lsr #6
    a1b0:	002bde00 	eoreq	sp, fp, r0, lsl #28
    a1b4:	000e2800 	andeq	r2, lr, r0, lsl #16
    a1b8:	02250100 	eoreq	r0, r5, #0, 2
    a1bc:	1ff32a04 	svcne	0x00f32a04
    a1c0:	2be20000 	blcs	ff88a1c8 <_estack+0xdf8851c8>
    a1c4:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    a1c8:	26010000 	strcs	r0, [r1], -r0
    a1cc:	1eeb0402 	cdpne	4, 14, cr0, cr11, cr2, {0}
    a1d0:	402b0000 	eormi	r0, fp, r0
    a1d4:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    a1d8:	00002001 	andeq	r2, r0, r1
    a1dc:	00002a90 	muleq	r0, r0, sl
    a1e0:	00200d2c 	eoreq	r0, r0, ip, lsr #26
    a1e4:	36000000 	strcc	r0, [r0], -r0
    a1e8:	00002023 	andeq	r2, r0, r3, lsr #32
    a1ec:	00002c66 	andeq	r2, r0, r6, ror #24
    a1f0:	00002c70 	andeq	r2, r0, r0, ror ip
    a1f4:	03026501 	movweq	r6, #9473	; 0x2501
    a1f8:	f4012800 	vst2.8	{d2-d3}, [r1], r0
    a1fc:	01000025 	tsteq	r0, r5, lsr #32
    a200:	010601ec 	smlatteq	r6, ip, r1, r0
    a204:	00002d58 	andeq	r2, r0, r8, asr sp
    a208:	00002dc8 	andeq	r2, r0, r8, asr #27
    a20c:	1f629c01 	svcne	0x00629c01
    a210:	70370000 	eorsvc	r0, r7, r0
    a214:	2f00000e 	svccs	0x0000000e
    a218:	3000001f 	andcc	r0, r0, pc, lsl r0
    a21c:	fe01006a 	cdp2	0, 0, cr0, cr1, cr10, {3}
    a220:	00a30201 	adceq	r0, r3, r1, lsl #4
    a224:	2aaf0000 	bcs	febca22c <_estack+0xdebc522c>
    a228:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a22c:	000021d5 	ldrdeq	r2, [r0], -r5
    a230:	00002d6c 	andeq	r2, r0, ip, ror #26
    a234:	00002d76 	andeq	r2, r0, r6, ror sp
    a238:	0201f801 	andeq	pc, r1, #65536	; 0x10000
    a23c:	00001f4a 	andeq	r1, r0, sl, asr #30
    a240:	0021e439 	eoreq	lr, r1, r9, lsr r4
    a244:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    a248:	76000021 	strvc	r0, [r0], -r1, lsr #32
    a24c:	5800002d 	stmdapl	r0, {r0, r2, r3, r5}
    a250:	0100000e 	tsteq	r0, lr
    a254:	390201fb 	stmdbcc	r2, {r0, r1, r3, r4, r5, r6, r7, r8}
    a258:	00002200 	andeq	r2, r0, r0, lsl #4
    a25c:	333b0000 	teqcc	fp, #0
    a260:	01000024 	tsteq	r0, r4, lsr #32
    a264:	980d01b5 	stmdals	sp, {r0, r2, r4, r5, r7, r8}
    a268:	6800002a 	stmdavs	r0, {r1, r3, r5}
    a26c:	0100002b 	tsteq	r0, fp, lsr #32
    a270:	001fcc9c 	mulseq	pc, ip, ip	; <UNPREDICTABLE>
    a274:	62643000 	rsbvs	r3, r4, #0
    a278:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    a27c:	001e731a 	andseq	r7, lr, sl, lsl r3
    a280:	002ac200 	eoreq	ip, sl, r0, lsl #4
    a284:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a288:	0601b801 	streq	fp, [r1], -r1, lsl #16
    a28c:	000000a3 	andeq	r0, r0, r3, lsr #1
    a290:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    a294:	0901b801 	stmdbeq	r1, {r0, fp, ip, sp, pc}
    a298:	000000a3 	andeq	r0, r0, r3, lsr #1
    a29c:	00002b04 	andeq	r2, r0, r4, lsl #22
    a2a0:	00726e30 	rsbseq	r6, r2, r0, lsr lr
    a2a4:	0d01b801 	stceq	8, cr11, [r1, #-4]
    a2a8:	000000a3 	andeq	r0, r0, r3, lsr #1
    a2ac:	00002b17 	andeq	r2, r0, r7, lsl fp
    a2b0:	00220d3a 	eoreq	r0, r2, sl, lsr sp
    a2b4:	002a9800 	eoreq	r9, sl, r0, lsl #16
    a2b8:	000df800 	andeq	pc, sp, r0, lsl #16
    a2bc:	01c10100 	biceq	r0, r1, r0, lsl #2
    a2c0:	221b3902 	andscs	r3, fp, #32768	; 0x8000
    a2c4:	00000000 	andeq	r0, r0, r0
    a2c8:	0023783c 	eoreq	r7, r3, ip, lsr r8
    a2cc:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    a2d0:	8e3d010d 	rsfhie	f0, f5, #5.0
    a2d4:	01000023 	tsteq	r0, r3, lsr #32
    a2d8:	680d01a0 	stmdavs	sp, {r5, r7, r8}
    a2dc:	88000026 	stmdahi	r0, {r1, r2, r5}
    a2e0:	01000026 	tsteq	r0, r6, lsr #32
    a2e4:	242d3c9c 	strtcs	r3, [sp], #-3228	; 0xfffff364
    a2e8:	95010000 	strls	r0, [r1, #-0]
    a2ec:	33010d01 	movwcc	r0, #7425	; 0x1d01
    a2f0:	0000223b 	andeq	r2, r0, fp, lsr r2
    a2f4:	0d018001 	stceq	0, cr8, [r1, #-4]
    a2f8:	00201901 	eoreq	r1, r0, r1, lsl #18
    a2fc:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    a300:	01840100 	orreq	r0, r4, r0, lsl #2
    a304:	001e731a 	andseq	r7, lr, sl, lsl r3
    a308:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a30c:	06018501 	streq	r8, [r1], -r1, lsl #10
    a310:	000000a3 	andeq	r0, r0, r3, lsr #1
    a314:	22d23c00 	sbcscs	r3, r2, #0, 24
    a318:	61010000 	mrsvs	r0, (UNDEF: 1)
    a31c:	3e010d01 	cdpcc	13, 0, cr0, cr1, cr1, {0}
    a320:	00001f29 	andeq	r1, r0, r9, lsr #30
    a324:	010dff01 	tsteq	sp, r1, lsl #30	; <UNPREDICTABLE>
    a328:	001fff3f 	andseq	pc, pc, pc, lsr pc	; <UNPREDICTABLE>
    a32c:	0de20100 	stfeqe	f0, [r2]
    a330:	205f0101 	subscs	r0, pc, r1, lsl #2
    a334:	63400000 	movtvs	r0, #0
    a338:	0100646d 	tsteq	r0, sp, ror #8
    a33c:	0bc026e2 	bleq	ff013ecc <_estack+0xdf00eecc>
    a340:	f7410000 			; <UNDEFINED> instruction: 0xf7410000
    a344:	01000026 	tsteq	r0, r6, lsr #32
    a348:	180031e2 	stmdane	r0, {r1, r5, r6, r7, r8, ip, sp}
    a34c:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
    a350:	01000007 	tsteq	r0, r7
    a354:	18003ee2 	stmdane	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    a358:	3f000000 	svccc	0x00000000
    a35c:	00001efc 	strdeq	r1, [r0], -ip
    a360:	010dc501 	tsteq	sp, r1, lsl #10
    a364:	00209201 	eoreq	r9, r0, r1, lsl #4
    a368:	6d634000 	stclvs	0, cr4, [r3, #-0]
    a36c:	c5010064 	strgt	r0, [r1, #-100]	; 0xffffff9c
    a370:	0018001e 	andseq	r0, r8, lr, lsl r0
    a374:	65724200 	ldrbvs	r4, [r2, #-512]!	; 0xfffffe00
    a378:	ca010073 	bgt	4a54c <__ccfg+0x2a5a4>
    a37c:	0000a306 	andeq	sl, r0, r6, lsl #6
    a380:	6e634200 	cdpvs	2, 6, cr4, cr3, cr0, {0}
    a384:	cd010074 	stcgt	0, cr0, [r1, #-464]	; 0xfffffe30
    a388:	0000a306 	andeq	sl, r0, r6, lsl #6
    a38c:	c2430000 	subgt	r0, r3, #0
    a390:	03000012 	movweq	r0, #18
    a394:	01010154 	tsteq	r1, r4, asr r1
    a398:	0020af03 	eoreq	sl, r0, r3, lsl #30
    a39c:	111f4400 	tstne	pc, r0, lsl #8
    a3a0:	54030000 	strpl	r0, [r3], #-0
    a3a4:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    a3a8:	43000000 	movwmi	r0, #0
    a3ac:	000013cf 	andeq	r1, r0, pc, asr #7
    a3b0:	01011e03 	tsteq	r1, r3, lsl #28
    a3b4:	20cc0301 	sbccs	r0, ip, r1, lsl #6
    a3b8:	1f440000 	svcne	0x00440000
    a3bc:	03000011 	movweq	r0, #17
    a3c0:	7f17011e 	svcvc	0x0017011e
    a3c4:	00000000 	andeq	r0, r0, r0
    a3c8:	00259543 	eoreq	r9, r5, r3, asr #10
    a3cc:	01ea0500 	mvneq	r0, r0, lsl #10
    a3d0:	61030115 	tstvs	r3, r5, lsl r1
    a3d4:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a3d8:	05005370 	streq	r5, [r0, #-880]	; 0xfffffc90
    a3dc:	611401f2 			; <UNDEFINED> instruction: 0x611401f2
    a3e0:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a3e4:	05004470 	streq	r4, [r0, #-1136]	; 0xfffffb90
    a3e8:	671c01f3 			; <UNDEFINED> instruction: 0x671c01f3
    a3ec:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a3f0:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
    a3f4:	7f0d01f4 	svcvc	0x000d01f4
    a3f8:	34000000 	strcc	r0, [r0], #-0
    a3fc:	05003274 	streq	r3, [r0, #-628]	; 0xfffffd8c
    a400:	7f1101f4 	svcvc	0x001101f4
    a404:	34000000 	strcc	r0, [r0], #-0
    a408:	05003374 	streq	r3, [r0, #-884]	; 0xfffffc8c
    a40c:	7f1501f4 	svcvc	0x001501f4
    a410:	34000000 	strcc	r0, [r0], #-0
    a414:	05003474 	streq	r3, [r0, #-1140]	; 0xfffffb8c
    a418:	7f1901f4 	svcvc	0x001901f4
    a41c:	34000000 	strcc	r0, [r0], #-0
    a420:	05003574 	streq	r3, [r0, #-1396]	; 0xfffffa8c
    a424:	7f1d01f4 	svcvc	0x001d01f4
    a428:	34000000 	strcc	r0, [r0], #-0
    a42c:	05003674 	streq	r3, [r0, #-1652]	; 0xfffff98c
    a430:	7f2101f4 	svcvc	0x002101f4
    a434:	34000000 	strcc	r0, [r0], #-0
    a438:	05003774 	streq	r3, [r0, #-1908]	; 0xfffff88c
    a43c:	7f2501f4 	svcvc	0x002501f4
    a440:	34000000 	strcc	r0, [r0], #-0
    a444:	05003874 	streq	r3, [r0, #-2164]	; 0xfffff78c
    a448:	7f2901f4 	svcvc	0x002901f4
    a44c:	27000000 	strcs	r0, [r0, -r0]
    a450:	000025cf 	andeq	r2, r0, pc, asr #11
    a454:	0d01f505 	cfstr32eq	mvfx15, [r1, #-20]	; 0xffffffec
    a458:	0000007f 	andeq	r0, r0, pc, ror r0
    a45c:	8b041100 	blhi	10e864 <__ccfg+0xee8bc>
    a460:	11000000 	mrsne	r0, (UNDEF: 0)
    a464:	00009704 	andeq	r9, r0, r4, lsl #14
    a468:	23db4500 	bicscs	r4, fp, #0, 10
    a46c:	2f040000 	svccs	0x00040000
    a470:	03011501 	movweq	r1, #5377	; 0x1501
    a474:	0020a145 	eoreq	sl, r0, r5, asr #2
    a478:	01220400 			; <UNDEFINED> instruction: 0x01220400
    a47c:	43030115 	movwmi	r0, #12565	; 0x3115
    a480:	00001f4e 	andeq	r1, r0, lr, asr #30
    a484:	15011104 	strne	r1, [r1, #-260]	; 0xfffffefc
    a488:	21ad0301 			; <UNDEFINED> instruction: 0x21ad0301
    a48c:	5a270000 	bpl	9ca494 <__ccfg+0x9aa4ec>
    a490:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    a494:	840d0113 	strhi	r0, [sp], #-275	; 0xfffffeed
    a498:	27000009 	strcs	r0, [r0, -r9]
    a49c:	00002118 	andeq	r2, r0, r8, lsl r1
    a4a0:	0e011404 	cdpeq	4, 0, cr1, cr1, cr4, {0}
    a4a4:	00000bc6 	andeq	r0, r0, r6, asr #23
    a4a8:	27054500 	strcs	r4, [r5, -r0, lsl #10]
    a4ac:	0d040000 	stceq	0, cr0, [r4, #-0]
    a4b0:	03011501 	movweq	r1, #5377	; 0x1501
    a4b4:	00269e43 	eoreq	r9, r6, r3, asr #28
    a4b8:	01040400 	tsteq	r4, r0, lsl #8
    a4bc:	d5030115 	strle	r0, [r3, #-277]	; 0xfffffeeb
    a4c0:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    a4c4:	00002122 	andeq	r2, r0, r2, lsr #2
    a4c8:	0e010604 	cfmadd32eq	mvax0, mvfx0, mvfx1, mvfx4
    a4cc:	00000bc6 	andeq	r0, r0, r6, asr #23
    a4d0:	237f4300 	cmncs	pc, #0, 6
    a4d4:	1d020000 	stcne	0, cr0, [r2, #-0]
    a4d8:	03010101 	movweq	r0, #4353	; 0x1101
    a4dc:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a4e0:	00224144 	eoreq	r4, r2, r4, asr #2
    a4e4:	011d0200 	tsteq	sp, r0, lsl #4
    a4e8:	00007f19 	andeq	r7, r0, r9, lsl pc
    a4ec:	2c3f0000 	ldccs	0, cr0, [pc], #-0	; a4f4 <__exidx_end+0x4bdc>
    a4f0:	02000021 	andeq	r0, r0, #33	; 0x21
    a4f4:	030101f7 	movweq	r0, #4599	; 0x11f7
    a4f8:	0000220d 	andeq	r2, r0, sp, lsl #4
    a4fc:	00224141 	eoreq	r4, r2, r1, asr #2
    a500:	1bf70200 	blne	ffdcad08 <_estack+0xdfdc5d08>
    a504:	0000007f 	andeq	r0, r0, pc, ror r0
    a508:	21603f00 	cmncs	r0, r0, lsl #30
    a50c:	aa020000 	bge	8a514 <__ccfg+0x6a56c>
    a510:	28030101 	stmdacs	r3, {r0, r8}
    a514:	41000022 	tstmi	r0, r2, lsr #32
    a518:	00002241 	andeq	r2, r0, r1, asr #4
    a51c:	7f1baa02 	svcvc	0x001baa02
    a520:	00000000 	andeq	r0, r0, r0
    a524:	00251946 	eoreq	r1, r5, r6, asr #18
    a528:	019c0200 	orrseq	r0, ip, r0, lsl #4
    a52c:	58460301 	stmdapl	r6, {r0, r8, r9}^
    a530:	02000027 	andeq	r0, r0, #39	; 0x27
    a534:	03010179 	movweq	r0, #4473	; 0x1179
    a538:	00205f47 	eoreq	r5, r0, r7, asr #30
    a53c:	00281800 	eoreq	r1, r8, r0, lsl #16
    a540:	00286000 	eoreq	r6, r8, r0
    a544:	8b9c0100 	blhi	fe70a94c <_estack+0xde70594c>
    a548:	48000022 	stmdami	r0, {r1, r5}
    a54c:	0000206d 	andeq	r2, r0, sp, rrx
    a550:	00002b35 	andeq	r2, r0, r5, lsr fp
    a554:	0020792d 	eoreq	r7, r0, sp, lsr #18
    a558:	002b5300 	eoreq	r5, fp, r0, lsl #6
    a55c:	20852c00 	addcs	r2, r5, r0, lsl #24
    a560:	5f490000 	svcpl	0x00490000
    a564:	2e000020 	cdpcs	0, 0, cr0, cr0, cr0, {1}
    a568:	30000028 	andcc	r0, r0, r8, lsr #32
    a56c:	01000028 	tsteq	r0, r8, lsr #32
    a570:	6d480dc5 	stclvs	13, cr0, [r8, #-788]	; 0xfffffcec
    a574:	87000020 	strhi	r0, [r0, -r0, lsr #32]
    a578:	2c00002b 	stccs	0, cr0, [r0], {43}	; 0x2b
    a57c:	00002079 	andeq	r2, r0, r9, ror r0
    a580:	0020852c 	eoreq	r8, r0, ip, lsr #10
    a584:	47000000 	strmi	r0, [r0, -r0]
    a588:	00001fe9 	andeq	r1, r0, r9, ror #31
    a58c:	00002860 	andeq	r2, r0, r0, ror #16
    a590:	00002884 	andeq	r2, r0, r4, lsl #17
    a594:	22b09c01 	adcscs	r9, r0, #256	; 0x100
    a598:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    a59c:	6a00001f 	bvs	a620 <__exidx_end+0x4d08>
    a5a0:	78000028 	stmdavc	r0, {r3, r5}
    a5a4:	01000028 	tsteq	r0, r8, lsr #32
    a5a8:	000d0195 	muleq	sp, r5, r1
    a5ac:	00201947 	eoreq	r1, r0, r7, asr #18
    a5b0:	00288400 	eoreq	r8, r8, r0, lsl #8
    a5b4:	0028e000 	eoreq	lr, r8, r0
    a5b8:	199c0100 	ldmibne	ip, {r8}
    a5bc:	4a000023 	bmi	a650 <__exidx_end+0x4d38>
    a5c0:	00002019 	andeq	r2, r0, r9, lsl r0
    a5c4:	0000288e 	andeq	r2, r0, lr, lsl #17
    a5c8:	000028ca 	andeq	r2, r0, sl, asr #17
    a5cc:	0d016101 	stfeqs	f6, [r1, #-4]
    a5d0:	0022282e 	eoreq	r2, r2, lr, lsr #16
    a5d4:	00288e00 	eoreq	r8, r8, r0, lsl #28
    a5d8:	000d6800 	andeq	r6, sp, r0, lsl #16
    a5dc:	016f0100 	cmneq	pc, r0, lsl #2
    a5e0:	20923802 	addscs	r3, r2, r2, lsl #16
    a5e4:	28b60000 	ldmcs	r6!, {}	; <UNPREDICTABLE>
    a5e8:	28be0000 	ldmcs	lr!, {}	; <UNPREDICTABLE>
    a5ec:	7a010000 	bvc	4a5f4 <__ccfg+0x2a64c>
    a5f0:	23000201 	movwcs	r0, #513	; 0x201
    a5f4:	a1390000 	teqge	r9, r0
    a5f8:	00000020 	andeq	r0, r0, r0, lsr #32
    a5fc:	0020924a 	eoreq	r9, r0, sl, asr #4
    a600:	0028be00 	eoreq	fp, r8, r0, lsl #28
    a604:	0028c200 	eoreq	ip, r8, r0, lsl #4
    a608:	017a0100 	cmneq	sl, r0, lsl #2
    a60c:	20a13902 	adccs	r3, r1, r2, lsl #18
    a610:	00000000 	andeq	r0, r0, r0
    a614:	202c4700 	eorcs	r4, ip, r0, lsl #14
    a618:	28e00000 	stmiacs	r0!, {}^	; <UNPREDICTABLE>
    a61c:	29180000 	ldmdbcs	r8, {}	; <UNPREDICTABLE>
    a620:	9c010000 	stcls	0, cr0, [r1], {-0}
    a624:	00002344 	andeq	r2, r0, r4, asr #6
    a628:	00203a48 	eoreq	r3, r0, r8, asr #20
    a62c:	002b9a00 	eoreq	r9, fp, r0, lsl #20
    a630:	20464800 	subcs	r4, r6, r0, lsl #16
    a634:	2bb80000 	blcs	fee0a63c <_estack+0xdee0563c>
    a638:	52390000 	eorspl	r0, r9, #0
    a63c:	00000020 	andeq	r0, r0, r0, lsr #32
    a640:	0020234b 	eoreq	r2, r0, fp, asr #6
    a644:	00291800 	eoreq	r1, r9, r0, lsl #16
    a648:	002a9800 	eoreq	r9, sl, r0, lsl #16
    a64c:	2a9c0100 	bcs	fe70aa54 <_estack+0xde705a54>
    a650:	000020af 	andeq	r2, r0, pc, lsr #1
    a654:	00002918 	andeq	r2, r0, r8, lsl r9
    a658:	00000d88 	andeq	r0, r0, r8, lsl #27
    a65c:	02010801 	andeq	r0, r1, #65536	; 0x10000
    a660:	0000236e 	andeq	r2, r0, lr, ror #6
    a664:	0020be39 	eoreq	fp, r0, r9, lsr lr
    a668:	af380000 	svcge	0x00380000
    a66c:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
    a670:	28000029 	stmdacs	r0, {r0, r3, r5}
    a674:	01000029 	tsteq	r0, r9, lsr #32
    a678:	89020108 	stmdbhi	r2, {r3, r8}
    a67c:	39000023 	stmdbcc	r0, {r0, r1, r5}
    a680:	000020be 	strheq	r2, [r0], -lr
    a684:	22322e00 	eorscs	r2, r2, #0, 28
    a688:	29460000 	stmdbcs	r6, {}^	; <UNPREDICTABLE>
    a68c:	0da00000 	stceq	0, cr0, [r0]
    a690:	1a010000 	bne	4a698 <__ccfg+0x2a6f0>
    a694:	6d2a0201 	sfmvs	f0, 4, [sl, #-4]!
    a698:	54000021 	strpl	r0, [r0], #-33	; 0xffffffdf
    a69c:	b8000029 	stmdalt	r0, {r0, r3, r5}
    a6a0:	0100000d 	tsteq	r0, sp
    a6a4:	0b020121 	bleq	8ab30 <__ccfg+0x6ab88>
    a6a8:	3a000024 	bcc	a740 <__exidx_end+0x4e28>
    a6ac:	00002178 	andeq	r2, r0, r8, ror r1
    a6b0:	00002954 	andeq	r2, r0, r4, asr r9
    a6b4:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    a6b8:	04013104 	streq	r3, [r1], #-260	; 0xfffffefc
    a6bc:	0021b838 	eoreq	fp, r1, r8, lsr r8
    a6c0:	00295400 	eoreq	r5, r9, r0, lsl #8
    a6c4:	00296000 	eoreq	r6, r9, r0
    a6c8:	01250400 			; <UNDEFINED> instruction: 0x01250400
    a6cc:	0023df04 	eoreq	sp, r3, r4, lsl #30
    a6d0:	21c74c00 	biccs	r4, r7, r0, lsl #24
    a6d4:	041c0000 	ldreq	r0, [ip], #-0
    a6d8:	3a002100 	bcc	12ae0 <__exidx_end+0xd1c8>
    a6dc:	00002183 	andeq	r2, r0, r3, lsl #3
    a6e0:	00002960 	andeq	r2, r0, r0, ror #18
    a6e4:	00000dc0 	andeq	r0, r0, r0, asr #27
    a6e8:	04012604 	streq	r2, [r1], #-1540	; 0xfffff9fc
    a6ec:	000dc02b 	andeq	ip, sp, fp, lsr #32
    a6f0:	21924c00 	orrscs	r4, r2, r0, lsl #24
    a6f4:	03400000 	movteq	r0, #0
    a6f8:	9f4c2100 	svcls	0x004c2100
    a6fc:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    a700:	00210003 	eoreq	r0, r1, r3
    a704:	3a000000 	bcc	a70c <__exidx_end+0x4df4>
    a708:	000020cc 	andeq	r2, r0, ip, asr #1
    a70c:	00002964 	andeq	r2, r0, r4, ror #18
    a710:	00000dd8 	ldrdeq	r0, [r0], -r8
    a714:	02012201 	andeq	r2, r1, #268435456	; 0x10000000
    a718:	000dd82b 	andeq	sp, sp, fp, lsr #16
    a71c:	20db2d00 	sbcscs	r2, fp, r0, lsl #26
    a720:	2bd60000 	blcs	ff58a728 <_estack+0xdf585728>
    a724:	e72d0000 	str	r0, [sp, -r0]!
    a728:	e9000020 	stmdb	r0, {r5}
    a72c:	2c00002b 	stccs	0, cr0, [r0], {43}	; 0x2b
    a730:	000020f3 	strdeq	r2, [r0], -r3
    a734:	0020ff2d 	eoreq	pc, r0, sp, lsr #30
    a738:	002c0700 	eoreq	r0, ip, r0, lsl #14
    a73c:	210b2c00 	tstcs	fp, r0, lsl #24
    a740:	172d0000 	strne	r0, [sp, -r0]!
    a744:	1a000021 	bne	a7d0 <__exidx_end+0x4eb8>
    a748:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a74c:	00002123 	andeq	r2, r0, r3, lsr #2
    a750:	00212f2d 	eoreq	r2, r1, sp, lsr #30
    a754:	002c2d00 	eoreq	r2, ip, r0, lsl #26
    a758:	213b2d00 	teqcs	fp, r0, lsl #26
    a75c:	2c400000 	marcs	acc0, r0, r0
    a760:	472d0000 	strmi	r0, [sp, -r0]!
    a764:	6b000021 	blvs	a7f0 <__exidx_end+0x4ed8>
    a768:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a76c:	00002153 	andeq	r2, r0, r3, asr r1
    a770:	00000000 	andeq	r0, r0, r0
    a774:	00000731 	andeq	r0, r0, r1, lsr r7
    a778:	25db0003 	ldrbcs	r0, [fp, #3]
    a77c:	01040000 	mrseq	r0, (UNDEF: 4)
    a780:	000000a3 	andeq	r0, r0, r3, lsr #1
    a784:	0027730c 	eoreq	r7, r7, ip, lsl #6
    a788:	000e0800 	andeq	r0, lr, r0, lsl #16
    a78c:	000f4000 	andeq	r4, pc, r0
    a790:	00000000 	andeq	r0, r0, r0
    a794:	00632500 	rsbeq	r2, r3, r0, lsl #10
    a798:	06010200 	streq	r0, [r1], -r0, lsl #4
    a79c:	00000c69 	andeq	r0, r0, r9, ror #24
    a7a0:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    a7a4:	0200000a 	andeq	r0, r0, #10
    a7a8:	08090504 	stmdaeq	r9, {r2, r8, sl}
    a7ac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a7b0:	00080405 	andeq	r0, r8, r5, lsl #8
    a7b4:	2a1a0300 	bcs	68b3bc <__ccfg+0x66b414>
    a7b8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    a7bc:	00004d17 	andeq	r4, r0, r7, lsl sp
    a7c0:	08010200 	stmdaeq	r1, {r9}
    a7c4:	00000c67 	andeq	r0, r0, r7, ror #24
    a7c8:	002e1003 	eoreq	r1, lr, r3
    a7cc:	1c310200 	lfmne	f0, 4, [r1], #-0
    a7d0:	00000060 	andeq	r0, r0, r0, rrx
    a7d4:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    a7d8:	0300000d 	movweq	r0, #13
    a7dc:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    a7e0:	731b3402 	tstvc	fp, #33554432	; 0x2000000
    a7e4:	02000000 	andeq	r0, r0, #0
    a7e8:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    a7ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a7f0:	00043407 	andeq	r3, r4, r7, lsl #8
    a7f4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a7f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a7fc:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    a800:	03000004 	movweq	r0, #4
    a804:	0000052a 	andeq	r0, r0, sl, lsr #10
    a808:	9b1b2803 	blls	6d481c <__ccfg+0x6b4874>
    a80c:	05000000 	streq	r0, [r0, #-0]
    a810:	00000b9c 	muleq	r0, ip, fp
    a814:	b3000a04 	movwlt	r0, #2564	; 0xa04
    a818:	06000000 	streq	r0, [r0], -r0
    a81c:	00000879 	andeq	r0, r0, r9, ror r8
    a820:	000000b3 	strheq	r0, [r0], -r3
    a824:	07000100 	streq	r0, [r0, -r0, lsl #2]
    a828:	0b9e0304 	bleq	fe78b440 <_estack+0xde786440>
    a82c:	63030000 	movwvs	r0, #12288	; 0x3000
    a830:	00008f18 	andeq	r8, r0, r8, lsl pc
    a834:	28f90300 	ldmcs	r9!, {r8, r9}^
    a838:	27040000 	strcs	r0, [r4, -r0]
    a83c:	00005412 	andeq	r5, r0, r2, lsl r4
    a840:	00c10800 	sbceq	r0, r1, r0, lsl #16
    a844:	c0030000 	andgt	r0, r3, r0
    a848:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    a84c:	0041112b 	subeq	r1, r1, fp, lsr #2
    a850:	d2090000 	andle	r0, r9, #0
    a854:	03000000 	movweq	r0, #0
    a858:	0000294b 	andeq	r2, r0, fp, asr #18
    a85c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    a860:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a864:	000000e3 	andeq	r0, r0, r3, ror #1
    a868:	00065203 	andeq	r5, r6, r3, lsl #4
    a86c:	122d0400 	eorne	r0, sp, #0, 8
    a870:	00000067 	andeq	r0, r0, r7, rrx
    a874:	000bc003 	andeq	ip, fp, r3
    a878:	0f2e0400 	svceq	0x002e0400
    a87c:	0000010c 	andeq	r0, r0, ip, lsl #2
    a880:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    a884:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    a888:	a0093204 	andge	r3, r9, r4, lsl #4
    a88c:	0c000001 	stceq	0, cr0, [r0], {1}
    a890:	0000002b 	andeq	r0, r0, fp, lsr #32
    a894:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    a898:	01000000 	mrseq	r0, (UNDEF: 0)
    a89c:	0c000701 	stceq	7, cr0, [r0], {1}
    a8a0:	00000658 	andeq	r0, r0, r8, asr r6
    a8a4:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    a8a8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8ac:	0c000601 	stceq	6, cr0, [r0], {1}
    a8b0:	000002ef 	andeq	r0, r0, pc, ror #5
    a8b4:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    a8b8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8bc:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    a8c0:	000006c3 	andeq	r0, r0, r3, asr #13
    a8c4:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    a8c8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8cc:	0c000401 	cfstrseq	mvf0, [r0], {1}
    a8d0:	00000aab 	andeq	r0, r0, fp, lsr #21
    a8d4:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    a8d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8dc:	0d000004 	stceq	0, cr0, [r0, #-16]
    a8e0:	00000667 	andeq	r0, r0, r7, ror #12
    a8e4:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    a8e8:	01000000 	mrseq	r0, (UNDEF: 0)
    a8ec:	0009070d 	andeq	r0, r9, sp, lsl #14
    a8f0:	033c0400 	teqeq	ip, #0, 8
    a8f4:	000000d2 	ldrdeq	r0, [r0], -r2
    a8f8:	0f380d02 	svceq	0x00380d02
    a8fc:	3d040000 	stccc	0, cr0, [r4, #-0]
    a900:	0000d203 	andeq	sp, r0, r3, lsl #4
    a904:	1f0d0300 	svcne	0x000d0300
    a908:	04000009 	streq	r0, [r0], #-9
    a90c:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    a910:	00040000 	andeq	r0, r4, r0
    a914:	00032503 	andeq	r2, r3, r3, lsl #10
    a918:	03410400 	movteq	r0, #5120	; 0x1400
    a91c:	00000112 	andeq	r0, r0, r2, lsl r1
    a920:	0001a009 	andeq	sl, r1, r9
    a924:	06ca0e00 	strbeq	r0, [sl], r0, lsl #28
    a928:	43040000 	movwmi	r0, #16384	; 0x4000
    a92c:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    a930:	0e010100 	adfeqs	f0, f1, f0
    a934:	00000197 	muleq	r0, r7, r1
    a938:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    a93c:	01000001 	tsteq	r0, r1
    a940:	d3040a01 	movwle	r0, #18945	; 0x4a01
    a944:	02000001 	andeq	r0, r0, #1
    a948:	0c700801 	ldcleq	8, cr0, [r0], #-4
    a94c:	d3080000 	movwle	r0, #32768	; 0x8000
    a950:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a954:	0000032e 	andeq	r0, r0, lr, lsr #6
    a958:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    a95c:	01000001 	tsteq	r0, r1
    a960:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    a964:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    a968:	d60d0000 	strle	r0, [sp], -r0
    a96c:	0500000c 	streq	r0, [r0, #-12]
    a970:	00670b90 	mlseq	r7, r0, fp, r0
    a974:	0d000000 	stceq	0, cr0, [r0, #-0]
    a978:	00001073 	andeq	r1, r0, r3, ror r0
    a97c:	c1079105 	tstgt	r7, r5, lsl #2
    a980:	04000000 	streq	r0, [r0], #-0
    a984:	0001bc0d 	andeq	fp, r1, sp, lsl #24
    a988:	10920500 	addsne	r0, r2, r0, lsl #10
    a98c:	000000de 	ldrdeq	r0, [r0], -lr
    a990:	ca030006 	bgt	ca9b0 <__ccfg+0xaaa08>
    a994:	0500000c 	streq	r0, [r0, #-12]
    a998:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    a99c:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    a9a0:	35000002 	strcc	r0, [r0, #-2]
    a9a4:	10000002 	andne	r0, r0, r2
    a9a8:	09490e00 	stmdbeq	r9, {r9, sl, fp}^
    a9ac:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    a9b0:	00022a0f 	andeq	r2, r2, pc, lsl #20
    a9b4:	0b010100 	bleq	4adbc <__ccfg+0x2ae14>
    a9b8:	09910601 	ldmibeq	r1, {r0, r9, sl}
    a9bc:	0000026d 	andeq	r0, r0, sp, ror #4
    a9c0:	0009260c 	andeq	r2, r9, ip, lsl #12
    a9c4:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    a9c8:	000000d2 	ldrdeq	r0, [r0], -r2
    a9cc:	00010701 	andeq	r0, r1, r1, lsl #14
    a9d0:	0005d80c 	andeq	sp, r5, ip, lsl #16
    a9d4:	03940600 	orrseq	r0, r4, #0, 12
    a9d8:	000000d2 	ldrdeq	r0, [r0], -r2
    a9dc:	00000101 	andeq	r0, r0, r1, lsl #2
    a9e0:	0ab70300 	beq	fedcb5e8 <_estack+0xdedc65e8>
    a9e4:	96060000 	strls	r0, [r6], -r0
    a9e8:	00024303 	andeq	r4, r2, r3, lsl #6
    a9ec:	026d0800 	rsbeq	r0, sp, #0, 16
    a9f0:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    a9f4:	89000002 	stmdbhi	r0, {r1}
    a9f8:	10000002 	andne	r0, r0, r2
    a9fc:	027e0800 	rsbseq	r0, lr, #0, 16
    aa00:	bd0e0000 	stclt	0, cr0, [lr, #-0]
    aa04:	06000003 	streq	r0, [r0], -r3
    aa08:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    aa0c:	01010000 	mrseq	r0, (UNDEF: 1)
    aa10:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    aa14:	0002a700 	andeq	sl, r2, r0, lsl #14
    aa18:	08001000 	stmdaeq	r0, {ip}
    aa1c:	0000029c 	muleq	r0, ip, r2
    aa20:	00061a0e 	andeq	r1, r6, lr, lsl #20
    aa24:	13060700 	movwne	r0, #26368	; 0x6700
    aa28:	000002a7 	andeq	r0, r0, r7, lsr #5
    aa2c:	e90e0101 	stmdb	lr, {r0, r8}
    aa30:	05000008 	streq	r0, [r0, #-8]
    aa34:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    aa38:	01010000 	mrseq	r0, (UNDEF: 1)
    aa3c:	000c7e11 	andeq	r7, ip, r1, lsl lr
    aa40:	016e0800 	cmneq	lr, r0, lsl #16
    aa44:	0002d510 	andeq	sp, r2, r0, lsl r5
    aa48:	db040a00 	blle	10d250 <__ccfg+0xed2a8>
    aa4c:	12000002 	andne	r0, r0, #2
    aa50:	0002e701 	andeq	lr, r2, r1, lsl #14
    aa54:	00c11300 	sbceq	r1, r1, r0, lsl #6
    aa58:	0f000000 	svceq	0x00000000
    aa5c:	000001da 	ldrdeq	r0, [r0], -sl
    aa60:	000002f2 	strdeq	r0, [r0], -r2
    aa64:	e7080010 	smlad	r8, r0, r0, r0
    aa68:	14000002 	strne	r0, [r0], #-2
    aa6c:	000009f2 	strdeq	r0, [r0], -r2
    aa70:	13017f08 	movwne	r7, #7944	; 0x1f08
    aa74:	000002f2 	strdeq	r0, [r0], -r2
    aa78:	a9140101 	ldmdbge	r4, {r0, r8}
    aa7c:	08000003 	stmdaeq	r0, {r0, r1}
    aa80:	ef140182 	svc	0x00140182
    aa84:	01000000 	mrseq	r0, (UNDEF: 0)
    aa88:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    aa8c:	03390908 	teqeq	r9, #8, 18	; 0x20000
    aa90:	c20d0000 	andgt	r0, sp, #0
    aa94:	09000001 	stmdbeq	r0, {r0}
    aa98:	00c1070f 	sbceq	r0, r1, pc, lsl #14
    aa9c:	0d000000 	stceq	0, cr0, [r0, #-0]
    aaa0:	00000cae 	andeq	r0, r0, lr, lsr #25
    aaa4:	c1031009 	tstgt	r3, r9
    aaa8:	02000000 	andeq	r0, r0, #0
    aaac:	0d770300 	ldcleq	3, cr0, [r7, #-0]
    aab0:	11090000 	mrsne	r0, (UNDEF: 9)
    aab4:	00031503 	andeq	r1, r3, r3, lsl #10
    aab8:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    aabc:	03b70916 			; <UNDEFINED> instruction: 0x03b70916
    aac0:	c40d0000 	strgt	r0, [sp], #-0
    aac4:	09000004 	stmdbeq	r0, {r2}
    aac8:	03d10817 	bicseq	r0, r1, #1507328	; 0x170000
    aacc:	0d000000 	stceq	0, cr0, [r0, #-0]
    aad0:	00000917 	andeq	r0, r0, r7, lsl r9
    aad4:	ec081809 	stc	8, cr1, [r8], {9}
    aad8:	04000003 	streq	r0, [r0], #-3
    aadc:	000bd20d 	andeq	sp, fp, sp, lsl #4
    aae0:	08190900 	ldmdaeq	r9, {r8, fp}
    aae4:	00000422 	andeq	r0, r0, r2, lsr #8
    aae8:	0ca60d08 	stceq	13, cr0, [r6], #32
    aaec:	1a090000 	bne	24aaf4 <__ccfg+0x22ab4c>
    aaf0:	00043d08 	andeq	r3, r4, r8, lsl #26
    aaf4:	6e0d0c00 	cdpvs	12, 0, cr0, cr13, cr0, {0}
    aaf8:	09000009 	stmdbeq	r0, {r0, r3}
    aafc:	0453081b 	ldrbeq	r0, [r3], #-2075	; 0xfffff7e5
    ab00:	0d100000 	ldceq	0, cr0, [r0, #-0]
    ab04:	00000a6f 	andeq	r0, r0, pc, ror #20
    ab08:	53081c09 	movwpl	r1, #35849	; 0x8c09
    ab0c:	14000004 	strne	r0, [r0], #-4
    ab10:	0001a50d 	andeq	sl, r1, sp, lsl #10
    ab14:	081d0900 	ldmdaeq	sp, {r8, fp}
    ab18:	00000453 	andeq	r0, r0, r3, asr r4
    ab1c:	031c0d18 	tsteq	ip, #24, 26	; 0x600
    ab20:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    ab24:	00008106 	andeq	r8, r0, r6, lsl #2
    ab28:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    ab2c:	00008101 	andeq	r8, r0, r1, lsl #2
    ab30:	0003d100 	andeq	sp, r3, r0, lsl #2
    ab34:	00811300 	addeq	r1, r1, r0, lsl #6
    ab38:	81130000 	tsthi	r3, r0
    ab3c:	13000000 	movwne	r0, #0
    ab40:	000000b5 	strheq	r0, [r0], -r5
    ab44:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    ab48:	15000003 	strne	r0, [r0, #-3]
    ab4c:	00008101 	andeq	r8, r0, r1, lsl #2
    ab50:	0003ec00 	andeq	lr, r3, r0, lsl #24
    ab54:	00811300 	addeq	r1, r1, r0, lsl #6
    ab58:	81130000 	tsthi	r3, r0
    ab5c:	00000000 	andeq	r0, r0, r0
    ab60:	03d7040a 	bicseq	r0, r7, #167772160	; 0xa000000
    ab64:	01150000 	tsteq	r5, r0
    ab68:	00000081 	andeq	r0, r0, r1, lsl #1
    ab6c:	00000416 	andeq	r0, r0, r6, lsl r4
    ab70:	00008113 	andeq	r8, r0, r3, lsl r1
    ab74:	01001300 	mrseq	r1, LR_irq
    ab78:	81130000 	tsthi	r3, r0
    ab7c:	13000000 	movwne	r0, #0
    ab80:	00000416 	andeq	r0, r0, r6, lsl r4
    ab84:	00041c13 	andeq	r1, r4, r3, lsl ip
    ab88:	040a0000 	streq	r0, [sl], #-0
    ab8c:	00000081 	andeq	r0, r0, r1, lsl #1
    ab90:	0339040a 	teqeq	r9, #167772160	; 0xa000000
    ab94:	040a0000 	streq	r0, [sl], #-0
    ab98:	000003f2 	strdeq	r0, [r0], -r2
    ab9c:	00810115 	addeq	r0, r1, r5, lsl r1
    aba0:	043d0000 	ldrteq	r0, [sp], #-0
    aba4:	00130000 	andseq	r0, r3, r0
    aba8:	13000001 	movwne	r0, #1
    abac:	0000041c 	andeq	r0, r0, ip, lsl r4
    abb0:	28040a00 	stmdacs	r4, {r9, fp}
    abb4:	15000004 	strne	r0, [r0, #-4]
    abb8:	00008101 	andeq	r8, r0, r1, lsl #2
    abbc:	00045300 	andeq	r5, r4, r0, lsl #6
    abc0:	01001300 	mrseq	r1, LR_irq
    abc4:	0a000000 	beq	abcc <__exidx_end+0x52b4>
    abc8:	00044304 	andeq	r4, r4, r4, lsl #6
    abcc:	0d330300 	ldceq	3, cr0, [r3, #-0]
    abd0:	1f090000 	svcne	0x00090000
    abd4:	00034503 	andeq	r4, r3, r3, lsl #10
    abd8:	04590800 	ldrbeq	r0, [r9], #-2048	; 0xfffff800
    abdc:	81140000 	tsthi	r4, r0
    abe0:	08000003 	stmdaeq	r0, {r0, r1}
    abe4:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    abe8:	01000000 	mrseq	r0, (UNDEF: 0)
    abec:	08081601 	stmdaeq	r8, {r0, r9, sl, ip}
    abf0:	a0090303 	andge	r0, r9, r3, lsl #6
    abf4:	17000004 	strne	r0, [r0, -r4]
    abf8:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    abfc:	07030708 	streq	r0, [r3, -r8, lsl #14]
    ac00:	000000c1 	andeq	r0, r0, r1, asr #1
    ac04:	0fcb1700 	svceq	0x00cb1700
    ac08:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    ac0c:	00f40803 	rscseq	r0, r4, r3, lsl #16
    ac10:	00040000 	andeq	r0, r4, r0
    ac14:	000a1511 	andeq	r1, sl, r1, lsl r5
    ac18:	03090800 	movweq	r0, #38912	; 0x9800
    ac1c:	00047903 	andeq	r7, r4, r3, lsl #18
    ac20:	00201800 	eoreq	r1, r0, r0, lsl #16
    ac24:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    ac28:	1008030b 	andne	r0, r8, fp, lsl #6
    ac2c:	17000005 	strne	r0, [r0, -r5]
    ac30:	00001f22 	andeq	r1, r0, r2, lsr #30
    ac34:	07031408 	streq	r1, [r3, -r8, lsl #8]
    ac38:	000000c1 	andeq	r0, r0, r1, asr #1
    ac3c:	0bf31700 	bleq	ffcd0844 <_estack+0xdfccb844>
    ac40:	15080000 	strne	r0, [r8, #-0]
    ac44:	00c10703 	sbceq	r0, r1, r3, lsl #14
    ac48:	17020000 	strne	r0, [r2, -r0]
    ac4c:	00004c8c 	andeq	r4, r0, ip, lsl #25
    ac50:	0a031608 	beq	d0478 <__ccfg+0xb04d0>
    ac54:	000002c8 	andeq	r0, r0, r8, asr #5
    ac58:	47521704 	ldrbmi	r1, [r2, -r4, lsl #14]
    ac5c:	17080000 	strne	r0, [r8, -r0]
    ac60:	00f40803 	rscseq	r0, r4, r3, lsl #16
    ac64:	17080000 	strne	r0, [r8, -r0]
    ac68:	0000000f 	andeq	r0, r0, pc
    ac6c:	0f031808 	svceq	0x00031808
    ac70:	00000510 	andeq	r0, r0, r0, lsl r5
    ac74:	0969170c 	stmdbeq	r9!, {r2, r3, r8, r9, sl, ip}^
    ac78:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    ac7c:	05201503 	streq	r1, [r0, #-1283]!	; 0xfffffafd
    ac80:	002c0000 	eoreq	r0, ip, r0
    ac84:	0004a00f 	andeq	sl, r4, pc
    ac88:	00052000 	andeq	r2, r5, r0
    ac8c:	00881900 	addeq	r1, r8, r0, lsl #18
    ac90:	00030000 	andeq	r0, r3, r0
    ac94:	04ad040a 	strteq	r0, [sp], #1034	; 0x40a
    ac98:	e8110000 	ldmda	r1, {}	; <UNPREDICTABLE>
    ac9c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    aca0:	ad1b031c 	ldcge	3, cr0, [fp, #-112]	; 0xffffff90
    aca4:	14000004 	strne	r0, [r0], #-4
    aca8:	00000bc8 	andeq	r0, r0, r8, asr #23
    acac:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    acb0:	00000542 	andeq	r0, r0, r2, asr #10
    acb4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    acb8:	00000526 	andeq	r0, r0, r6, lsr #10
    acbc:	0000161a 	andeq	r1, r0, sl, lsl r6
    acc0:	111a0100 	tstne	sl, r0, lsl #2
    acc4:	00000465 	andeq	r0, r0, r5, ror #8
    acc8:	f8030501 			; <UNDEFINED> instruction: 0xf8030501
    accc:	1b000058 	blne	ae34 <__exidx_end+0x551c>
    acd0:	000027d9 	ldrdeq	r2, [r0], -r9
    acd4:	160d1f01 	strne	r1, [sp], -r1, lsl #30
    acd8:	05000004 	streq	r0, [r0, #-4]
    acdc:	00062803 	andeq	r2, r6, r3, lsl #16
    ace0:	27c51c20 	strbcs	r1, [r5, r0, lsr #24]
    ace4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    ace8:	0081010c 	addeq	r0, r1, ip, lsl #2
    acec:	2f900000 	svccs	0x00900000
    acf0:	2f940000 	svccs	0x00940000
    acf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    acf8:	00000597 	muleq	r0, r7, r5
    acfc:	0100701d 	tsteq	r0, sp, lsl r0
    ad00:	01002258 	tsteq	r0, r8, asr r2
    ad04:	2c7e0000 	ldclcs	0, cr0, [lr], #-0
    ad08:	1c000000 	stcne	0, cr0, [r0], {-0}
    ad0c:	00002784 	andeq	r2, r0, r4, lsl #15
    ad10:	010c5201 	tsteq	ip, r1, lsl #4
    ad14:	00000081 	andeq	r0, r0, r1, lsl #1
    ad18:	00002f8c 	andeq	r2, r0, ip, lsl #31
    ad1c:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    ad20:	05c19c01 	strbeq	r9, [r1, #3073]	; 0xc01
    ad24:	701d0000 	andsvc	r0, sp, r0
    ad28:	22520100 	subscs	r0, r2, #0, 2
    ad2c:	00000100 	andeq	r0, r0, r0, lsl #2
    ad30:	00002c91 	muleq	r0, r1, ip
    ad34:	27ab1c00 	strcs	r1, [fp, r0, lsl #24]!
    ad38:	4d010000 	stcmi	0, cr0, [r1, #-0]
    ad3c:	0081010c 	addeq	r0, r1, ip, lsl #2
    ad40:	2f840000 	svccs	0x00840000
    ad44:	2f8c0000 	svccs	0x008c0000
    ad48:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad4c:	000005f9 	strdeq	r0, [r0], -r9
    ad50:	0100701d 	tsteq	r0, sp, lsl r0
    ad54:	0100224d 	tsteq	r0, sp, asr #4
    ad58:	2ca40000 	stccs	0, cr0, [r4]
    ad5c:	d21e0000 	andsle	r0, lr, #0
    ad60:	01000027 	tsteq	r0, r7, lsr #32
    ad64:	041c2f4d 	ldreq	r2, [ip], #-3917	; 0xfffff0b3
    ad68:	51010000 	mrspl	r0, (UNDEF: 1)
    ad6c:	27911c00 	ldrcs	r1, [r1, r0, lsl #24]
    ad70:	42010000 	andmi	r0, r1, #0
    ad74:	0081010c 	addeq	r0, r1, ip, lsl #2
    ad78:	2f600000 	svccs	0x00600000
    ad7c:	2f840000 	svccs	0x00840000
    ad80:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad84:	00000662 	andeq	r0, r0, r2, ror #12
    ad88:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    ad8c:	1e420100 	dvfnes	f0, f2, f0
    ad90:	00000081 	andeq	r0, r0, r1, lsl #1
    ad94:	00002cb7 			; <UNDEFINED> instruction: 0x00002cb7
    ad98:	0100701d 	tsteq	r0, sp, lsl r0
    ad9c:	01002b42 	tsteq	r0, r2, asr #22
    ada0:	2cd50000 	ldclcs	0, cr0, [r5], {0}
    ada4:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    ada8:	01006e65 	tsteq	r0, r5, ror #28
    adac:	00813242 	addeq	r3, r1, r2, asr #4
    adb0:	2ce80000 	stclcs	0, cr0, [r8]
    adb4:	731d0000 	tstvc	sp, #0
    adb8:	01007365 	tsteq	r0, r5, ror #6
    adbc:	04163c42 	ldreq	r3, [r6], #-3138	; 0xfffff3be
    adc0:	2cfb0000 	ldclcs	0, cr0, [fp]
    adc4:	d21e0000 	andsle	r0, lr, #0
    adc8:	01000027 	tsteq	r0, r7, lsr #32
    adcc:	041c1743 	ldreq	r1, [ip], #-1859	; 0xfffff8bd
    add0:	91020000 	mrsls	r0, (UNDEF: 2)
    add4:	b81c0000 	ldmdalt	ip, {}	; <UNPREDICTABLE>
    add8:	01000027 	tsteq	r0, r7, lsr #32
    addc:	81010c37 	tsthi	r1, r7, lsr ip
    ade0:	3c000000 	stccc	0, cr0, [r0], {-0}
    ade4:	6000002f 	andvs	r0, r0, pc, lsr #32
    ade8:	0100002f 	tsteq	r0, pc, lsr #32
    adec:	00069b9c 	muleq	r6, ip, fp
    adf0:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    adf4:	37010079 	smlsdxcc	r1, r9, r0, r0
    adf8:	0000811e 	andeq	r8, r0, lr, lsl r1
    adfc:	002d0e00 	eoreq	r0, sp, r0, lsl #28
    ae00:	64661f00 	strbtvs	r1, [r6], #-3840	; 0xfffff100
    ae04:	27370100 	ldrcs	r0, [r7, -r0, lsl #2]!
    ae08:	00000081 	andeq	r0, r0, r1, lsl #1
    ae0c:	20005101 	andcs	r5, r0, r1, lsl #2
    ae10:	0000279e 	muleq	r0, lr, r7
    ae14:	010c2101 	tsteq	ip, r1, lsl #2
    ae18:	00000081 	andeq	r0, r0, r1, lsl #1
    ae1c:	0006db01 	andeq	sp, r6, r1, lsl #22
    ae20:	68702100 	ldmdavs	r0!, {r8, sp}^
    ae24:	21010079 	tstcs	r1, r9, ror r0
    ae28:	0000811e 	andeq	r8, r0, lr, lsl r1
    ae2c:	64662100 	strbtvs	r2, [r6], #-256	; 0xffffff00
    ae30:	27210100 	strcs	r0, [r1, -r0, lsl #2]!
    ae34:	00000081 	andeq	r0, r0, r1, lsl #1
    ae38:	0018ad22 	andseq	sl, r8, r2, lsr #26
    ae3c:	33210100 			; <UNDEFINED> instruction: 0x33210100
    ae40:	000000b5 	strheq	r0, [r0], -r5
    ae44:	01006923 	tsteq	r0, r3, lsr #18
    ae48:	00810625 	addeq	r0, r1, r5, lsr #12
    ae4c:	24000000 	strcs	r0, [r0], #-0
    ae50:	0000069b 	muleq	r0, fp, r6
    ae54:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    ae58:	00002fdc 	ldrdeq	r2, [r0], -ip
    ae5c:	ad259c01 	stcge	12, cr9, [r5, #-4]!
    ae60:	2c000006 	stccs	0, cr0, [r0], {6}
    ae64:	2500002d 	strcs	r0, [r0, #-45]	; 0xffffffd3
    ae68:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    ae6c:	00002d4a 	andeq	r2, r0, sl, asr #26
    ae70:	0006c425 	andeq	ip, r6, r5, lsr #8
    ae74:	002d6800 	eoreq	r6, sp, r0, lsl #16
    ae78:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    ae7c:	9b270000 	blls	9cae84 <__ccfg+0x9aaedc>
    ae80:	ca000006 	bgt	aea0 <__exidx_end+0x5588>
    ae84:	dc00002f 	stcle	0, cr0, [r0], {47}	; 0x2f
    ae88:	0100002f 	tsteq	r0, pc, lsr #32
    ae8c:	ad280c21 	stcge	12, cr0, [r8, #-132]!	; 0xffffff7c
    ae90:	01000006 	tsteq	r0, r6
    ae94:	06b92855 	ssateq	r2, #26, r5, asr #16
    ae98:	56010000 	strpl	r0, [r1], -r0
    ae9c:	0006c429 	andeq	ip, r6, r9, lsr #8
    aea0:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    aea4:	00000000 	andeq	r0, r0, r0
    aea8:	00042d00 	andeq	r2, r4, r0, lsl #26
    aeac:	0d000300 	stceq	3, cr0, [r0, #-0]
    aeb0:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    aeb4:	0000a301 	andeq	sl, r0, r1, lsl #6
    aeb8:	27e90c00 	strbcs	r0, [r9, r0, lsl #24]!
    aebc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    aec0:	0f900000 	svceq	0x00900000
    aec4:	00000000 	andeq	r0, r0, r0
    aec8:	65d40000 	ldrbvs	r0, [r4]
    aecc:	01020000 	mrseq	r0, (UNDEF: 2)
    aed0:	000c6906 	andeq	r6, ip, r6, lsl #18
    aed4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    aed8:	00000a77 	andeq	r0, r0, r7, ror sl
    aedc:	09050402 	stmdbeq	r5, {r1, sl}
    aee0:	02000008 	andeq	r0, r0, #8
    aee4:	08040508 	stmdaeq	r4, {r3, r8, sl}
    aee8:	1a030000 	bne	caef0 <__ccfg+0xaaf48>
    aeec:	0200002a 	andeq	r0, r0, #42	; 0x2a
    aef0:	004d182e 	subeq	r1, sp, lr, lsr #16
    aef4:	01020000 	mrseq	r0, (UNDEF: 2)
    aef8:	000c6708 	andeq	r6, ip, r8, lsl #14
    aefc:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
    af00:	31020000 	mrscc	r0, (UNDEF: 2)
    af04:	00006019 	andeq	r6, r0, r9, lsl r0
    af08:	07020200 	streq	r0, [r2, -r0, lsl #4]
    af0c:	00000d64 	andeq	r0, r0, r4, ror #26
    af10:	0029b203 	eoreq	fp, r9, r3, lsl #4
    af14:	19340200 	ldmdbne	r4!, {r9}
    af18:	00000073 	andeq	r0, r0, r3, ror r0
    af1c:	39070402 	stmdbcc	r7, {r1, sl}
    af20:	02000004 	andeq	r0, r0, #4
    af24:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
    af28:	04040000 	streq	r0, [r4], #-0
    af2c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    af30:	07040200 	streq	r0, [r4, -r0, lsl #4]
    af34:	0000043e 	andeq	r0, r0, lr, lsr r4
    af38:	0028f903 	eoreq	pc, r8, r3, lsl #18
    af3c:	12270300 	eorne	r0, r7, #0, 6
    af40:	00000054 	andeq	r0, r0, r4, asr r0
    af44:	00008f05 	andeq	r8, r0, r5, lsl #30
    af48:	1dc00300 	stclne	3, cr0, [r0]
    af4c:	2b030000 	blcs	caf54 <__ccfg+0xaafac>
    af50:	00004112 	andeq	r4, r0, r2, lsl r1
    af54:	00a00600 	adceq	r0, r0, r0, lsl #12
    af58:	4b030000 	blmi	caf60 <__ccfg+0xaafb8>
    af5c:	03000029 	movweq	r0, #41	; 0x29
    af60:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    af64:	b1050000 	mrslt	r0, (UNDEF: 5)
    af68:	03000000 	movweq	r0, #0
    af6c:	00000652 	andeq	r0, r0, r2, asr r6
    af70:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    af74:	07000000 	streq	r0, [r0, -r0]
    af78:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    af7c:	0000015c 	andeq	r0, r0, ip, asr r1
    af80:	00002b08 	andeq	r2, r0, r8, lsl #22
    af84:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    af88:	000000a0 	andeq	r0, r0, r0, lsr #1
    af8c:	00070101 	andeq	r0, r7, r1, lsl #2
    af90:	00065808 	andeq	r5, r6, r8, lsl #16
    af94:	03350300 	teqeq	r5, #0, 6
    af98:	000000a0 	andeq	r0, r0, r0, lsr #1
    af9c:	00060101 	andeq	r0, r6, r1, lsl #2
    afa0:	0002ef08 	andeq	lr, r2, r8, lsl #30
    afa4:	03360300 	teqeq	r6, #0, 6
    afa8:	000000a0 	andeq	r0, r0, r0, lsr #1
    afac:	00050101 	andeq	r0, r5, r1, lsl #2
    afb0:	0006c308 	andeq	ip, r6, r8, lsl #6
    afb4:	03370300 	teqeq	r7, #0, 6
    afb8:	000000a0 	andeq	r0, r0, r0, lsr #1
    afbc:	00040101 	andeq	r0, r4, r1, lsl #2
    afc0:	000aab08 	andeq	sl, sl, r8, lsl #22
    afc4:	03380300 	teqeq	r8, #0, 6
    afc8:	000000a0 	andeq	r0, r0, r0, lsr #1
    afcc:	00000401 	andeq	r0, r0, r1, lsl #8
    afd0:	00066709 	andeq	r6, r6, r9, lsl #14
    afd4:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    afd8:	000000a0 	andeq	r0, r0, r0, lsr #1
    afdc:	09070901 	stmdbeq	r7, {r0, r8, fp}
    afe0:	3c030000 	stccc	0, cr0, [r3], {-0}
    afe4:	0000a003 	andeq	sl, r0, r3
    afe8:	38090200 	stmdacc	r9, {r9}
    afec:	0300000f 	movweq	r0, #15
    aff0:	00a0033d 	adceq	r0, r0, sp, lsr r3
    aff4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    aff8:	0000091f 	andeq	r0, r0, pc, lsl r9
    affc:	b1083f03 	tstlt	r8, r3, lsl #30
    b000:	04000000 	streq	r0, [r0], #-0
    b004:	03250300 			; <UNDEFINED> instruction: 0x03250300
    b008:	41030000 	mrsmi	r0, (UNDEF: 3)
    b00c:	0000ce03 	andeq	ip, r0, r3, lsl #28
    b010:	015c0600 	cmpeq	ip, r0, lsl #12
    b014:	ca0a0000 	bgt	28b01c <__ccfg+0x26b074>
    b018:	03000006 	movweq	r0, #6
    b01c:	01681a43 	cmneq	r8, r3, asr #20
    b020:	01010000 	mrseq	r0, (UNDEF: 1)
    b024:	0001970a 	andeq	r9, r1, sl, lsl #14
    b028:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    b02c:	00000189 	andeq	r0, r0, r9, lsl #3
    b030:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    b034:	0000018f 	andeq	r0, r0, pc, lsl #3
    b038:	70080102 	andvc	r0, r8, r2, lsl #2
    b03c:	0500000c 	streq	r0, [r0, #-12]
    b040:	0000018f 	andeq	r0, r0, pc, lsl #3
    b044:	00032e0a 	andeq	r2, r3, sl, lsl #28
    b048:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    b04c:	00000189 	andeq	r0, r0, r9, lsl #3
    b050:	08070101 	stmdaeq	r7, {r0, r8}
    b054:	da098f04 	ble	26ec6c <__ccfg+0x24ecc4>
    b058:	09000001 	stmdbeq	r0, {r0}
    b05c:	00000cd6 	ldrdeq	r0, [r0], -r6
    b060:	670b9004 	strvs	r9, [fp, -r4]
    b064:	00000000 	andeq	r0, r0, r0
    b068:	00107309 	andseq	r7, r0, r9, lsl #6
    b06c:	08910400 	ldmeq	r1, {sl}
    b070:	0000008f 	andeq	r0, r0, pc, lsl #1
    b074:	01bc0904 			; <UNDEFINED> instruction: 0x01bc0904
    b078:	92040000 	andls	r0, r4, #0
    b07c:	0000ac10 	andeq	sl, r0, r0, lsl ip
    b080:	03000600 	movweq	r0, #1536	; 0x600
    b084:	00000cca 	andeq	r0, r0, sl, asr #25
    b088:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    b08c:	0c000001 	stceq	0, cr0, [r0], {1}
    b090:	000001da 	ldrdeq	r0, [r0], -sl
    b094:	000001f1 	strdeq	r0, [r0], -r1
    b098:	490a000d 	stmdbmi	sl, {r0, r2, r3}
    b09c:	04000009 	streq	r0, [r0], #-9
    b0a0:	01e60f99 	strexheq	r0, r9, [r6]
    b0a4:	01010000 	mrseq	r0, (UNDEF: 1)
    b0a8:	91050107 	tstls	r5, r7, lsl #2
    b0ac:	00022909 	andeq	r2, r2, r9, lsl #18
    b0b0:	09260800 	stmdbeq	r6!, {fp}
    b0b4:	93050000 	movwls	r0, #20480	; 0x5000
    b0b8:	0000a007 	andeq	sl, r0, r7
    b0bc:	01070100 	mrseq	r0, (UNDEF: 23)
    b0c0:	05d80800 	ldrbeq	r0, [r8, #2048]	; 0x800
    b0c4:	94050000 	strls	r0, [r5], #-0
    b0c8:	0000a003 	andeq	sl, r0, r3
    b0cc:	00010100 	andeq	r0, r1, r0, lsl #2
    b0d0:	b7030000 	strlt	r0, [r3, -r0]
    b0d4:	0500000a 	streq	r0, [r0, #-10]
    b0d8:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    b0dc:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    b0e0:	0c000002 	stceq	0, cr0, [r0], {2}
    b0e4:	00000235 	andeq	r0, r0, r5, lsr r2
    b0e8:	00000245 	andeq	r0, r0, r5, asr #4
    b0ec:	3a05000d 	bcc	14b128 <__ccfg+0x12b180>
    b0f0:	0a000002 	beq	b100 <__exidx_end+0x57e8>
    b0f4:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    b0f8:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    b0fc:	01000002 	tsteq	r0, r2
    b100:	009b0c01 	addseq	r0, fp, r1, lsl #24
    b104:	02630000 	rsbeq	r0, r3, #0
    b108:	000d0000 	andeq	r0, sp, r0
    b10c:	00025805 	andeq	r5, r2, r5, lsl #16
    b110:	061a0a00 	ldreq	r0, [sl], -r0, lsl #20
    b114:	06060000 	streq	r0, [r6], -r0
    b118:	00026313 	andeq	r6, r2, r3, lsl r3
    b11c:	0a010100 	beq	4b524 <__ccfg+0x2b57c>
    b120:	000008e9 	andeq	r0, r0, r9, ror #17
    b124:	b10ec304 	tstlt	lr, r4, lsl #6
    b128:	01000000 	mrseq	r0, (UNDEF: 0)
    b12c:	0c7e0e01 	ldcleq	14, cr0, [lr], #-4
    b130:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    b134:	02911001 	addseq	r1, r1, #1
    b138:	040b0000 	streq	r0, [fp], #-0
    b13c:	00000297 	muleq	r0, r7, r2
    b140:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    b144:	8f100000 	svchi	0x00100000
    b148:	00000000 	andeq	r0, r0, r0
    b14c:	0001960c 	andeq	r9, r1, ip, lsl #12
    b150:	0002ae00 	andeq	sl, r2, r0, lsl #28
    b154:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b158:	000002a3 	andeq	r0, r0, r3, lsr #5
    b15c:	0009f211 	andeq	pc, r9, r1, lsl r2	; <UNPREDICTABLE>
    b160:	017f0700 	cmneq	pc, r0, lsl #14
    b164:	0002ae16 	andeq	sl, r2, r6, lsl lr
    b168:	11010100 	mrsne	r0, (UNDEF: 17)
    b16c:	000003a9 	andeq	r0, r0, r9, lsr #7
    b170:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    b174:	000000bd 	strheq	r0, [r0], -sp
    b178:	81110101 	tsthi	r1, r1, lsl #2
    b17c:	07000003 	streq	r0, [r0, -r3]
    b180:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    b184:	01000000 	mrseq	r0, (UNDEF: 0)
    b188:	07081201 	streq	r1, [r8, -r1, lsl #4]
    b18c:	07090303 	streq	r0, [r9, -r3, lsl #6]
    b190:	13000003 	movwne	r0, #3
    b194:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    b198:	07030707 	streq	r0, [r3, -r7, lsl #14]
    b19c:	0000008f 	andeq	r0, r0, pc, lsl #1
    b1a0:	0fcb1300 	svceq	0x00cb1300
    b1a4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    b1a8:	00c20803 	sbceq	r0, r2, r3, lsl #16
    b1ac:	00040000 	andeq	r0, r4, r0
    b1b0:	000a150e 	andeq	r1, sl, lr, lsl #10
    b1b4:	03090700 	movweq	r0, #38656	; 0x9700
    b1b8:	0002e003 	andeq	lr, r2, r3
    b1bc:	00201400 	eoreq	r1, r0, r0, lsl #8
    b1c0:	07300000 	ldreq	r0, [r0, -r0]!
    b1c4:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    b1c8:	13000003 	movwne	r0, #3
    b1cc:	00001f22 	andeq	r1, r0, r2, lsr #30
    b1d0:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    b1d4:	0000008f 	andeq	r0, r0, pc, lsl #1
    b1d8:	0bf31300 	bleq	ffccfde0 <_estack+0xdfccade0>
    b1dc:	15070000 	strne	r0, [r7, #-0]
    b1e0:	008f0803 	addeq	r0, pc, r3, lsl #16
    b1e4:	13020000 	movwne	r0, #8192	; 0x2000
    b1e8:	00004c8c 	andeq	r4, r0, ip, lsl #25
    b1ec:	0b031607 	bleq	d0a10 <__ccfg+0xb0a68>
    b1f0:	00000284 	andeq	r0, r0, r4, lsl #5
    b1f4:	47521304 	ldrbmi	r1, [r2, -r4, lsl #6]
    b1f8:	17070000 	strne	r0, [r7, -r0]
    b1fc:	00c20903 	sbceq	r0, r2, r3, lsl #18
    b200:	13080000 	movwne	r0, #32768	; 0x8000
    b204:	0000000f 	andeq	r0, r0, pc
    b208:	0f031807 	svceq	0x00031807
    b20c:	00000377 	andeq	r0, r0, r7, ror r3
    b210:	0969130c 	stmdbeq	r9!, {r2, r3, r8, r9, ip}^
    b214:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    b218:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    b21c:	002c0000 	eoreq	r0, ip, r0
    b220:	0003070c 	andeq	r0, r3, ip, lsl #14
    b224:	00038700 	andeq	r8, r3, r0, lsl #14
    b228:	00881500 	addeq	r1, r8, r0, lsl #10
    b22c:	00030000 	andeq	r0, r3, r0
    b230:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    b234:	e80e0000 	stmda	lr, {}	; <UNPREDICTABLE>
    b238:	0700000b 	streq	r0, [r0, -fp]
    b23c:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    b240:	11000003 	tstne	r0, r3
    b244:	00000bc8 	andeq	r0, r0, r8, asr #23
    b248:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    b24c:	000003a9 	andeq	r0, r0, r9, lsr #7
    b250:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    b254:	0000038d 	andeq	r0, r0, sp, lsl #7
    b258:	282e0116 	stmdacs	lr!, {r1, r2, r4, r8}
    b25c:	1d010000 	stcne	0, cr0, [r1, #-0]
    b260:	2fdc0101 	svccs	0x00dc0101
    b264:	304c0000 	subcc	r0, ip, r0
    b268:	9c010000 	stcls	0, cr0, [r1], {-0}
    b26c:	0000042a 	andeq	r0, r0, sl, lsr #8
    b270:	000c3f17 	andeq	r3, ip, r7, lsl pc
    b274:	011d0100 	tsteq	sp, r0, lsl #2
    b278:	0000008f 	andeq	r0, r0, pc, lsl #1
    b27c:	00002d86 	andeq	r2, r0, r6, lsl #27
    b280:	00475218 	subeq	r5, r7, r8, lsl r2
    b284:	011d0100 	tsteq	sp, r0, lsl #2
    b288:	0000042a 	andeq	r0, r0, sl, lsr #8
    b28c:	00002daf 	andeq	r2, r0, pc, lsr #27
    b290:	00283a19 	eoreq	r3, r8, r9, lsl sl
    b294:	01300100 	teqeq	r0, r0, lsl #2
    b298:	000f781a 	andeq	r7, pc, sl, lsl r8	; <UNPREDICTABLE>
    b29c:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    b2a0:	22010072 	andcs	r0, r1, #114	; 0x72
    b2a4:	00042a15 	andeq	r2, r4, r5, lsl sl
    b2a8:	30030500 	andcc	r0, r3, r0, lsl #10
    b2ac:	1b200006 	blne	80b2cc <__ccfg+0x7eb324>
    b2b0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    b2b4:	810d2301 	tsthi	sp, r1, lsl #6
    b2b8:	05000000 	streq	r0, [r0, #-0]
    b2bc:	00062c03 	andeq	r2, r6, r3, lsl #24
    b2c0:	27e31820 	strbcs	r1, [r3, r0, lsr #16]!
    b2c4:	24010000 	strcs	r0, [r1], #-0
    b2c8:	00008106 	andeq	r8, r0, r6, lsl #2
    b2cc:	002dd900 	eoreq	sp, sp, r0, lsl #18
    b2d0:	0b000000 	bleq	b2d8 <__exidx_end+0x59c0>
    b2d4:	00019604 	andeq	r9, r1, r4, lsl #12
    b2d8:	04400000 	strbeq	r0, [r0], #-0
    b2dc:	00030000 	andeq	r0, r3, r0
    b2e0:	00002981 	andeq	r2, r0, r1, lsl #19
    b2e4:	00a30104 	adceq	r0, r3, r4, lsl #2
    b2e8:	500c0000 	andpl	r0, ip, r0
    b2ec:	08000028 	stmdaeq	r0, {r3, r5}
    b2f0:	c000000e 	andgt	r0, r0, lr
    b2f4:	0000000f 	andeq	r0, r0, pc
    b2f8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    b2fc:	02000067 	andeq	r0, r0, #103	; 0x67
    b300:	0c690601 	stcleq	6, cr0, [r9], #-4
    b304:	02020000 	andeq	r0, r2, #0
    b308:	000a7705 	andeq	r7, sl, r5, lsl #14
    b30c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b310:	00000809 	andeq	r0, r0, r9, lsl #16
    b314:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    b318:	03000008 	movweq	r0, #8
    b31c:	00002a1a 	andeq	r2, r0, sl, lsl sl
    b320:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b324:	02000000 	andeq	r0, r0, #0
    b328:	0c670801 	stcleq	8, cr0, [r7], #-4
    b32c:	10030000 	andne	r0, r3, r0
    b330:	0200002e 	andeq	r0, r0, #46	; 0x2e
    b334:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b338:	02020000 	andeq	r0, r2, #0
    b33c:	000d6407 	andeq	r6, sp, r7, lsl #8
    b340:	29b20300 	ldmibcs	r2!, {r8, r9}
    b344:	34020000 	strcc	r0, [r2], #-0
    b348:	00007319 	andeq	r7, r0, r9, lsl r3
    b34c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b350:	00000439 	andeq	r0, r0, r9, lsr r4
    b354:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    b358:	04000004 	streq	r0, [r0], #-4
    b35c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b360:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b364:	00043e07 	andeq	r3, r4, r7, lsl #28
    b368:	28f90300 	ldmcs	r9!, {r8, r9}^
    b36c:	27030000 	strcs	r0, [r3, -r0]
    b370:	00005412 	andeq	r5, r0, r2, lsl r4
    b374:	008f0500 	addeq	r0, pc, r0, lsl #10
    b378:	c0030000 	andgt	r0, r3, r0
    b37c:	0300001d 	movweq	r0, #29
    b380:	0041122b 	subeq	r1, r1, fp, lsr #4
    b384:	a0060000 	andge	r0, r6, r0
    b388:	03000000 	movweq	r0, #0
    b38c:	0000294b 	andeq	r2, r0, fp, asr #18
    b390:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    b394:	05000000 	streq	r0, [r0, #-0]
    b398:	000000b1 	strheq	r0, [r0], -r1
    b39c:	00065203 	andeq	r5, r6, r3, lsl #4
    b3a0:	122d0300 	eorne	r0, sp, #0, 6
    b3a4:	00000067 	andeq	r0, r0, r7, rrx
    b3a8:	000bc003 	andeq	ip, fp, r3
    b3ac:	102e0300 	eorne	r0, lr, r0, lsl #6
    b3b0:	000000da 	ldrdeq	r0, [r0], -sl
    b3b4:	008f0407 	addeq	r0, pc, r7, lsl #8
    b3b8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    b3bc:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    b3c0:	09000001 	stmdbeq	r0, {r0}
    b3c4:	0000002b 	andeq	r0, r0, fp, lsr #32
    b3c8:	a0073403 	andge	r3, r7, r3, lsl #8
    b3cc:	01000000 	mrseq	r0, (UNDEF: 0)
    b3d0:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    b3d4:	00000658 	andeq	r0, r0, r8, asr r6
    b3d8:	a0033503 	andge	r3, r3, r3, lsl #10
    b3dc:	01000000 	mrseq	r0, (UNDEF: 0)
    b3e0:	09000601 	stmdbeq	r0, {r0, r9, sl}
    b3e4:	000002ef 	andeq	r0, r0, pc, ror #5
    b3e8:	a0033603 	andge	r3, r3, r3, lsl #12
    b3ec:	01000000 	mrseq	r0, (UNDEF: 0)
    b3f0:	09000501 	stmdbeq	r0, {r0, r8, sl}
    b3f4:	000006c3 	andeq	r0, r0, r3, asr #13
    b3f8:	a0033703 	andge	r3, r3, r3, lsl #14
    b3fc:	01000000 	mrseq	r0, (UNDEF: 0)
    b400:	09000401 	stmdbeq	r0, {r0, sl}
    b404:	00000aab 	andeq	r0, r0, fp, lsr #21
    b408:	a0033803 	andge	r3, r3, r3, lsl #16
    b40c:	01000000 	mrseq	r0, (UNDEF: 0)
    b410:	0a000004 	beq	b428 <__exidx_end+0x5b10>
    b414:	00000667 	andeq	r0, r0, r7, ror #12
    b418:	a0073a03 	andge	r3, r7, r3, lsl #20
    b41c:	01000000 	mrseq	r0, (UNDEF: 0)
    b420:	0009070a 	andeq	r0, r9, sl, lsl #14
    b424:	033c0300 	teqeq	ip, #0, 6
    b428:	000000a0 	andeq	r0, r0, r0, lsr #1
    b42c:	0f380a02 	svceq	0x00380a02
    b430:	3d030000 	stccc	0, cr0, [r3, #-0]
    b434:	0000a003 	andeq	sl, r0, r3
    b438:	1f0a0300 	svcne	0x000a0300
    b43c:	03000009 	movweq	r0, #9
    b440:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    b444:	00040000 	andeq	r0, r4, r0
    b448:	00032503 	andeq	r2, r3, r3, lsl #10
    b44c:	03410300 	movteq	r0, #4864	; 0x1300
    b450:	000000e0 	andeq	r0, r0, r0, ror #1
    b454:	00016e06 	andeq	r6, r1, r6, lsl #28
    b458:	06ca0b00 	strbeq	r0, [sl], r0, lsl #22
    b45c:	43030000 	movwmi	r0, #12288	; 0x3000
    b460:	00017a1a 	andeq	r7, r1, sl, lsl sl
    b464:	0b010100 	bleq	4b86c <__ccfg+0x2b8c4>
    b468:	00000197 	muleq	r0, r7, r1
    b46c:	9b0e4503 	blls	39c880 <__ccfg+0x37c8d8>
    b470:	01000001 	tsteq	r0, r1
    b474:	a1040701 	tstge	r4, r1, lsl #14
    b478:	02000001 	andeq	r0, r0, #1
    b47c:	0c700801 	ldcleq	8, cr0, [r0], #-4
    b480:	a1050000 	mrsge	r0, (UNDEF: 5)
    b484:	0b000001 	bleq	b490 <__exidx_end+0x5b78>
    b488:	0000032e 	andeq	r0, r0, lr, lsr #6
    b48c:	9b1e4503 	blls	79c8a0 <__ccfg+0x77c8f8>
    b490:	01000001 	tsteq	r0, r1
    b494:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    b498:	01ec098f 	mvneq	r0, pc, lsl #19
    b49c:	d60a0000 	strle	r0, [sl], -r0
    b4a0:	0400000c 	streq	r0, [r0], #-12
    b4a4:	00670b90 	mlseq	r7, r0, fp, r0
    b4a8:	0a000000 	beq	b4b0 <__exidx_end+0x5b98>
    b4ac:	00001073 	andeq	r1, r0, r3, ror r0
    b4b0:	8f089104 	svchi	0x00089104
    b4b4:	04000000 	streq	r0, [r0], #-0
    b4b8:	0001bc0a 	andeq	fp, r1, sl, lsl #24
    b4bc:	10920400 	addsne	r0, r2, r0, lsl #8
    b4c0:	000000ac 	andeq	r0, r0, ip, lsr #1
    b4c4:	ca030006 	bgt	cb4e4 <__ccfg+0xab53c>
    b4c8:	0400000c 	streq	r0, [r0], #-12
    b4cc:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    b4d0:	ec0c0000 	stc	0, cr0, [ip], {-0}
    b4d4:	03000001 	movweq	r0, #1
    b4d8:	0d000002 	stceq	0, cr0, [r0, #-8]
    b4dc:	09490b00 	stmdbeq	r9, {r8, r9, fp}^
    b4e0:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    b4e4:	0001f80f 	andeq	pc, r1, pc, lsl #16
    b4e8:	08010100 	stmdaeq	r1, {r8}
    b4ec:	09910501 	ldmibeq	r1, {r0, r8, sl}
    b4f0:	0000023b 	andeq	r0, r0, fp, lsr r2
    b4f4:	00092609 	andeq	r2, r9, r9, lsl #12
    b4f8:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    b4fc:	000000a0 	andeq	r0, r0, r0, lsr #1
    b500:	00010701 	andeq	r0, r1, r1, lsl #14
    b504:	0005d809 	andeq	sp, r5, r9, lsl #16
    b508:	03940500 	orrseq	r0, r4, #0, 10
    b50c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b510:	00000101 	andeq	r0, r0, r1, lsl #2
    b514:	0ab70300 	beq	fedcc11c <_estack+0xdedc711c>
    b518:	96050000 	strls	r0, [r5], -r0
    b51c:	00021103 	andeq	r1, r2, r3, lsl #2
    b520:	023b0500 	eorseq	r0, fp, #0, 10
    b524:	470c0000 	strmi	r0, [ip, -r0]
    b528:	57000002 	strpl	r0, [r0, -r2]
    b52c:	0d000002 	stceq	0, cr0, [r0, #-8]
    b530:	024c0500 	subeq	r0, ip, #0, 10
    b534:	bd0b0000 	stclt	0, cr0, [fp, #-0]
    b538:	05000003 	streq	r0, [r0, #-3]
    b53c:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    b540:	01010000 	mrseq	r0, (UNDEF: 1)
    b544:	00009b0c 	andeq	r9, r0, ip, lsl #22
    b548:	00027500 	andeq	r7, r2, r0, lsl #10
    b54c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b550:	0000026a 	andeq	r0, r0, sl, ror #4
    b554:	00061a0b 	andeq	r1, r6, fp, lsl #20
    b558:	13060600 	movwne	r0, #26112	; 0x6600
    b55c:	00000275 	andeq	r0, r0, r5, ror r2
    b560:	e90b0101 	stmdb	fp, {r0, r8}
    b564:	04000008 	streq	r0, [r0], #-8
    b568:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    b56c:	01010000 	mrseq	r0, (UNDEF: 1)
    b570:	000c7e0e 	andeq	r7, ip, lr, lsl #28
    b574:	016e0700 	cmneq	lr, r0, lsl #14
    b578:	0002a310 	andeq	sl, r2, r0, lsl r3
    b57c:	a9040700 	stmdbge	r4, {r8, r9, sl}
    b580:	0f000002 	svceq	0x00000002
    b584:	0002b501 	andeq	fp, r2, r1, lsl #10
    b588:	008f1000 	addeq	r1, pc, r0
    b58c:	0c000000 	stceq	0, cr0, [r0], {-0}
    b590:	000001a8 	andeq	r0, r0, r8, lsr #3
    b594:	000002c0 	andeq	r0, r0, r0, asr #5
    b598:	b505000d 	strlt	r0, [r5, #-13]
    b59c:	11000002 	tstne	r0, r2
    b5a0:	000009f2 	strdeq	r0, [r0], -r2
    b5a4:	16017f07 	strne	r7, [r1], -r7, lsl #30
    b5a8:	000002c0 	andeq	r0, r0, r0, asr #5
    b5ac:	a9110101 	ldmdbge	r1, {r0, r8}
    b5b0:	07000003 	streq	r0, [r0, -r3]
    b5b4:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    b5b8:	01000000 	mrseq	r0, (UNDEF: 0)
    b5bc:	03811101 	orreq	r1, r1, #1073741824	; 0x40000000
    b5c0:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    b5c4:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    b5c8:	01010000 	mrseq	r0, (UNDEF: 1)
    b5cc:	03070812 	movweq	r0, #30738	; 0x7812
    b5d0:	03190903 	tsteq	r9, #49152	; 0xc000
    b5d4:	9f130000 	svcls	0x00130000
    b5d8:	0700003c 	smladxeq	r0, ip, r0, r0
    b5dc:	8f070307 	svchi	0x00070307
    b5e0:	00000000 	andeq	r0, r0, r0
    b5e4:	000fcb13 	andeq	ip, pc, r3, lsl fp	; <UNPREDICTABLE>
    b5e8:	03080700 	movweq	r0, #34560	; 0x8700
    b5ec:	0000c208 	andeq	ip, r0, r8, lsl #4
    b5f0:	0e000400 	cfcpyseq	mvf0, mvf0
    b5f4:	00000a15 	andeq	r0, r0, r5, lsl sl
    b5f8:	03030907 	movweq	r0, #14599	; 0x3907
    b5fc:	000002f2 	strdeq	r0, [r0], -r2
    b600:	00002014 	andeq	r2, r0, r4, lsl r0
    b604:	0b073000 	bleq	1d760c <__ccfg+0x1b7664>
    b608:	03890803 	orreq	r0, r9, #196608	; 0x30000
    b60c:	22130000 	andscs	r0, r3, #0
    b610:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    b614:	8f080314 	svchi	0x00080314
    b618:	00000000 	andeq	r0, r0, r0
    b61c:	000bf313 	andeq	pc, fp, r3, lsl r3	; <UNPREDICTABLE>
    b620:	03150700 	tsteq	r5, #0, 14
    b624:	00008f08 	andeq	r8, r0, r8, lsl #30
    b628:	8c130200 	lfmhi	f0, 4, [r3], {-0}
    b62c:	0700004c 	streq	r0, [r0, -ip, asr #32]
    b630:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    b634:	04000002 	streq	r0, [r0], #-2
    b638:	00475213 	subeq	r5, r7, r3, lsl r2
    b63c:	03170700 	tsteq	r7, #0, 14
    b640:	0000c209 	andeq	ip, r0, r9, lsl #4
    b644:	0f130800 	svceq	0x00130800
    b648:	07000000 	streq	r0, [r0, -r0]
    b64c:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    b650:	0c000003 	stceq	0, cr0, [r0], {3}
    b654:	00096913 	andeq	r6, r9, r3, lsl r9
    b658:	03190700 	tsteq	r9, #0, 14
    b65c:	00039915 	andeq	r9, r3, r5, lsl r9
    b660:	0c002c00 	stceq	12, cr2, [r0], {-0}
    b664:	00000319 	andeq	r0, r0, r9, lsl r3
    b668:	00000399 	muleq	r0, r9, r3
    b66c:	00008815 	andeq	r8, r0, r5, lsl r8
    b670:	07000300 	streq	r0, [r0, -r0, lsl #6]
    b674:	00032604 	andeq	r2, r3, r4, lsl #12
    b678:	0be80e00 	bleq	ffa0ee80 <_estack+0xdfa09e80>
    b67c:	1c070000 	stcne	0, cr0, [r7], {-0}
    b680:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    b684:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    b688:	0700000b 	streq	r0, [r0, -fp]
    b68c:	bb14031e 	bllt	50c30c <__ccfg+0x4ec364>
    b690:	01000003 	tsteq	r0, r3
    b694:	9f040701 	svcls	0x00040701
    b698:	16000003 	strne	r0, [r0], -r3
    b69c:	00001e57 	andeq	r1, r0, r7, asr lr
    b6a0:	9b070d01 	blls	1ceaac <__ccfg+0x1aeb04>
    b6a4:	01000001 	tsteq	r0, r1
    b6a8:	06340305 	ldrteq	r0, [r4], -r5, lsl #6
    b6ac:	01172000 	tsteq	r7, r0
    b6b0:	00002845 	andeq	r2, r0, r5, asr #16
    b6b4:	01012301 	tsteq	r1, r1, lsl #6
    b6b8:	0000304c 	andeq	r3, r0, ip, asr #32
    b6bc:	00003168 	andeq	r3, r0, r8, ror #2
    b6c0:	3f189c01 	svccc	0x00189c01
    b6c4:	0100000c 	tsteq	r0, ip
    b6c8:	008f0123 	addeq	r0, pc, r3, lsr #2
    b6cc:	2dec0000 	stclcs	0, cr0, [ip]
    b6d0:	52190000 	andspl	r0, r9, #0
    b6d4:	01000047 	tsteq	r0, r7, asr #32
    b6d8:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    b6dc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    b6e0:	a01a0000 	andsge	r0, sl, r0
    b6e4:	1b00000f 	blne	b728 <__exidx_end+0x5e10>
    b6e8:	00727470 	rsbseq	r7, r2, r0, ror r4
    b6ec:	9b0f2801 	blls	3d56f8 <__ccfg+0x3b5750>
    b6f0:	05000001 	streq	r0, [r0, #-1]
    b6f4:	00063c03 	andeq	r3, r6, r3, lsl #24
    b6f8:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    b6fc:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    b700:	0000810d 	andeq	r8, r0, sp, lsl #2
    b704:	38030500 	stmdacc	r3, {r8, sl}
    b708:	19200006 	stmdbne	r0!, {r1, r2}
    b70c:	000027e3 	andeq	r2, r0, r3, ror #15
    b710:	81062a01 	tsthi	r6, r1, lsl #20
    b714:	60000000 	andvs	r0, r0, r0
    b718:	0000002e 	andeq	r0, r0, lr, lsr #32
    b71c:	05f00000 	ldrbeq	r0, [r0, #0]!
    b720:	00030000 	andeq	r0, r3, r0
    b724:	00002af9 	strdeq	r2, [r0], -r9
    b728:	00a30104 	adceq	r0, r3, r4, lsl #2
    b72c:	940c0000 	strls	r0, [ip], #-0
    b730:	08000028 	stmdaeq	r0, {r3, r5}
    b734:	4800000e 	stmdami	r0, {r1, r2, r3}
    b738:	00000010 	andeq	r0, r0, r0, lsl r0
    b73c:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    b740:	02000069 	andeq	r0, r0, #105	; 0x69
    b744:	0c690601 	stcleq	6, cr0, [r9], #-4
    b748:	02020000 	andeq	r0, r2, #0
    b74c:	000a7705 	andeq	r7, sl, r5, lsl #14
    b750:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b754:	00000809 	andeq	r0, r0, r9, lsl #16
    b758:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    b75c:	03000008 	movweq	r0, #8
    b760:	00002a1a 	andeq	r2, r0, sl, lsl sl
    b764:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b768:	02000000 	andeq	r0, r0, #0
    b76c:	0c670801 	stcleq	8, cr0, [r7], #-4
    b770:	10030000 	andne	r0, r3, r0
    b774:	0200002e 	andeq	r0, r0, #46	; 0x2e
    b778:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b77c:	02020000 	andeq	r0, r2, #0
    b780:	000d6407 	andeq	r6, sp, r7, lsl #8
    b784:	29b20300 	ldmibcs	r2!, {r8, r9}
    b788:	34020000 	strcc	r0, [r2], #-0
    b78c:	00007319 	andeq	r7, r0, r9, lsl r3
    b790:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b794:	00000439 	andeq	r0, r0, r9, lsr r4
    b798:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    b79c:	04000004 	streq	r0, [r0], #-4
    b7a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b7a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b7a8:	00043e07 	andeq	r3, r4, r7, lsl #28
    b7ac:	052a0300 	streq	r0, [sl, #-768]!	; 0xfffffd00
    b7b0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    b7b4:	00009b1b 	andeq	r9, r0, fp, lsl fp
    b7b8:	0b9c0500 	bleq	fe70cbc0 <_estack+0xde707bc0>
    b7bc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    b7c0:	0000b300 	andeq	fp, r0, r0, lsl #6
    b7c4:	08790600 	ldmdaeq	r9!, {r9, sl}^
    b7c8:	00b30000 	adcseq	r0, r3, r0
    b7cc:	01000000 	mrseq	r0, (UNDEF: 0)
    b7d0:	03040700 	movweq	r0, #18176	; 0x4700
    b7d4:	00000b9e 	muleq	r0, lr, fp
    b7d8:	8f186303 	svchi	0x00186303
    b7dc:	03000000 	movweq	r0, #0
    b7e0:	000028f9 	strdeq	r2, [r0], -r9
    b7e4:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    b7e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b7ec:	000000c1 	andeq	r0, r0, r1, asr #1
    b7f0:	001dc003 	andseq	ip, sp, r3
    b7f4:	122b0400 	eorne	r0, fp, #0, 8
    b7f8:	00000041 	andeq	r0, r0, r1, asr #32
    b7fc:	0000d209 	andeq	sp, r0, r9, lsl #4
    b800:	294b0300 	stmdbcs	fp, {r8, r9}^
    b804:	2c040000 	stccs	0, cr0, [r4], {-0}
    b808:	00006712 	andeq	r6, r0, r2, lsl r7
    b80c:	00e30800 	rsceq	r0, r3, r0, lsl #16
    b810:	52030000 	andpl	r0, r3, #0
    b814:	04000006 	streq	r0, [r0], #-6
    b818:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b81c:	c0030000 	andgt	r0, r3, r0
    b820:	0400000b 	streq	r0, [r0], #-11
    b824:	010c102e 	tsteq	ip, lr, lsr #32
    b828:	040a0000 	streq	r0, [sl], #-0
    b82c:	000000c1 	andeq	r0, r0, r1, asr #1
    b830:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    b834:	0001a009 	andeq	sl, r1, r9
    b838:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    b83c:	34040000 	strcc	r0, [r4], #-0
    b840:	0000d207 	andeq	sp, r0, r7, lsl #4
    b844:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b848:	06580c00 	ldrbeq	r0, [r8], -r0, lsl #24
    b84c:	35040000 	strcc	r0, [r4, #-0]
    b850:	0000d203 	andeq	sp, r0, r3, lsl #4
    b854:	06010100 	streq	r0, [r1], -r0, lsl #2
    b858:	02ef0c00 	rsceq	r0, pc, #0, 24
    b85c:	36040000 	strcc	r0, [r4], -r0
    b860:	0000d203 	andeq	sp, r0, r3, lsl #4
    b864:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b868:	06c30c00 	strbeq	r0, [r3], r0, lsl #24
    b86c:	37040000 	strcc	r0, [r4, -r0]
    b870:	0000d203 	andeq	sp, r0, r3, lsl #4
    b874:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b878:	0aab0c00 	beq	feace880 <_estack+0xdeac9880>
    b87c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    b880:	0000d203 	andeq	sp, r0, r3, lsl #4
    b884:	00040100 	andeq	r0, r4, r0, lsl #2
    b888:	06670d00 	strbteq	r0, [r7], -r0, lsl #26
    b88c:	3a040000 	bcc	10b894 <__ccfg+0xeb8ec>
    b890:	0000d207 	andeq	sp, r0, r7, lsl #4
    b894:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    b898:	04000009 	streq	r0, [r0], #-9
    b89c:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    b8a0:	0d020000 	stceq	0, cr0, [r2, #-0]
    b8a4:	00000f38 	andeq	r0, r0, r8, lsr pc
    b8a8:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    b8ac:	03000000 	movweq	r0, #0
    b8b0:	00091f0d 	andeq	r1, r9, sp, lsl #30
    b8b4:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    b8b8:	000000e3 	andeq	r0, r0, r3, ror #1
    b8bc:	25030004 	strcs	r0, [r3, #-4]
    b8c0:	04000003 	streq	r0, [r0], #-3
    b8c4:	01120341 	tsteq	r2, r1, asr #6
    b8c8:	a0090000 	andge	r0, r9, r0
    b8cc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b8d0:	000006ca 	andeq	r0, r0, sl, asr #13
    b8d4:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    b8d8:	01000001 	tsteq	r0, r1
    b8dc:	01970e01 	orrseq	r0, r7, r1, lsl #28
    b8e0:	45040000 	strmi	r0, [r4, #-0]
    b8e4:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    b8e8:	0a010100 	beq	4bcf0 <__ccfg+0x2bd48>
    b8ec:	0001d304 	andeq	sp, r1, r4, lsl #6
    b8f0:	08010200 	stmdaeq	r1, {r9}
    b8f4:	00000c70 	andeq	r0, r0, r0, ror ip
    b8f8:	0001d308 	andeq	sp, r1, r8, lsl #6
    b8fc:	032e0e00 			; <UNDEFINED> instruction: 0x032e0e00
    b900:	45040000 	strmi	r0, [r4, #-0]
    b904:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    b908:	0b010100 	bleq	4bd10 <__ccfg+0x2bd68>
    b90c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    b910:	0000021e 	andeq	r0, r0, lr, lsl r2
    b914:	000cd60d 	andeq	sp, ip, sp, lsl #12
    b918:	0b900500 	bleq	fe40cd20 <_estack+0xde407d20>
    b91c:	00000067 	andeq	r0, r0, r7, rrx
    b920:	10730d00 	rsbsne	r0, r3, r0, lsl #26
    b924:	91050000 	mrsls	r0, (UNDEF: 5)
    b928:	0000c108 	andeq	ip, r0, r8, lsl #2
    b92c:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    b930:	05000001 	streq	r0, [r0, #-1]
    b934:	00de1092 	smullseq	r1, lr, r2, r0
    b938:	00060000 	andeq	r0, r6, r0
    b93c:	000cca03 	andeq	ip, ip, r3, lsl #20
    b940:	03930500 	orrseq	r0, r3, #0, 10
    b944:	000001ed 	andeq	r0, r0, sp, ror #3
    b948:	00021e0f 	andeq	r1, r2, pc, lsl #28
    b94c:	00023500 	andeq	r3, r2, r0, lsl #10
    b950:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    b954:	00000949 	andeq	r0, r0, r9, asr #18
    b958:	2a0f9905 	bcs	3f1d74 <__ccfg+0x3d1dcc>
    b95c:	01000002 	tsteq	r0, r2
    b960:	06010b01 	streq	r0, [r1], -r1, lsl #22
    b964:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    b968:	260c0000 	strcs	r0, [ip], -r0
    b96c:	06000009 	streq	r0, [r0], -r9
    b970:	00d20793 	smullseq	r0, r2, r3, r7
    b974:	07010000 	streq	r0, [r1, -r0]
    b978:	d80c0001 	stmdale	ip, {r0}
    b97c:	06000005 	streq	r0, [r0], -r5
    b980:	00d20394 	smullseq	r0, r2, r4, r3
    b984:	01010000 	mrseq	r0, (UNDEF: 1)
    b988:	03000000 	movweq	r0, #0
    b98c:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
    b990:	43039606 	movwmi	r9, #13830	; 0x3606
    b994:	08000002 	stmdaeq	r0, {r1}
    b998:	0000026d 	andeq	r0, r0, sp, ror #4
    b99c:	0002790f 	andeq	r7, r2, pc, lsl #18
    b9a0:	00028900 	andeq	r8, r2, r0, lsl #18
    b9a4:	08001000 	stmdaeq	r0, {ip}
    b9a8:	0000027e 	andeq	r0, r0, lr, ror r2
    b9ac:	0003bd0e 	andeq	fp, r3, lr, lsl #26
    b9b0:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    b9b4:	00000289 	andeq	r0, r0, r9, lsl #5
    b9b8:	cd0f0101 	stfgts	f0, [pc, #-4]	; b9bc <__exidx_end+0x60a4>
    b9bc:	a7000000 	strge	r0, [r0, -r0]
    b9c0:	10000002 	andne	r0, r0, r2
    b9c4:	029c0800 	addseq	r0, ip, #0, 16
    b9c8:	1a0e0000 	bne	38b9d0 <__ccfg+0x36ba28>
    b9cc:	07000006 	streq	r0, [r0, -r6]
    b9d0:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    b9d4:	01010000 	mrseq	r0, (UNDEF: 1)
    b9d8:	0008e90e 	andeq	lr, r8, lr, lsl #18
    b9dc:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    b9e0:	000000e3 	andeq	r0, r0, r3, ror #1
    b9e4:	7e110101 	mufvcs	f0, f1, f1
    b9e8:	0800000c 	stmdaeq	r0, {r2, r3}
    b9ec:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    b9f0:	0a000002 	beq	ba00 <__exidx_end+0x60e8>
    b9f4:	0002db04 	andeq	sp, r2, r4, lsl #22
    b9f8:	e7011200 	str	r1, [r1, -r0, lsl #4]
    b9fc:	13000002 	movwne	r0, #2
    ba00:	000000c1 	andeq	r0, r0, r1, asr #1
    ba04:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    ba08:	02f20000 	rscseq	r0, r2, #0
    ba0c:	00100000 	andseq	r0, r0, r0
    ba10:	0002e708 	andeq	lr, r2, r8, lsl #14
    ba14:	09f21400 	ldmibeq	r2!, {sl, ip}^
    ba18:	7f080000 	svcvc	0x00080000
    ba1c:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    ba20:	01010000 	mrseq	r0, (UNDEF: 1)
    ba24:	0003a914 	andeq	sl, r3, r4, lsl r9
    ba28:	01820800 	orreq	r0, r2, r0, lsl #16
    ba2c:	0000ef14 	andeq	lr, r0, r4, lsl pc
    ba30:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    ba34:	00000381 	andeq	r0, r0, r1, lsl #7
    ba38:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    ba3c:	000000e3 	andeq	r0, r0, r3, ror #1
    ba40:	08150101 	ldmdaeq	r5, {r0, r8}
    ba44:	09030308 	stmdbeq	r3, {r3, r8, r9}
    ba48:	0000034b 	andeq	r0, r0, fp, asr #6
    ba4c:	003c9f16 	eorseq	r9, ip, r6, lsl pc
    ba50:	03070800 	movweq	r0, #30720	; 0x7800
    ba54:	0000c107 	andeq	ip, r0, r7, lsl #2
    ba58:	cb160000 	blgt	58ba60 <__ccfg+0x56bab8>
    ba5c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    ba60:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    ba64:	04000000 	streq	r0, [r0], #-0
    ba68:	0a151100 	beq	54fe70 <__ccfg+0x52fec8>
    ba6c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ba70:	03240303 			; <UNDEFINED> instruction: 0x03240303
    ba74:	20170000 	andscs	r0, r7, r0
    ba78:	30000000 	andcc	r0, r0, r0
    ba7c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    ba80:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    ba84:	001f2216 	andseq	r2, pc, r6, lsl r2	; <UNPREDICTABLE>
    ba88:	03140800 	tsteq	r4, #0, 16
    ba8c:	0000c108 	andeq	ip, r0, r8, lsl #2
    ba90:	f3160000 	vhadd.u16	d0, d6, d0
    ba94:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ba98:	c1080315 	tstgt	r8, r5, lsl r3
    ba9c:	02000000 	andeq	r0, r0, #0
    baa0:	004c8c16 	subeq	r8, ip, r6, lsl ip
    baa4:	03160800 	tsteq	r6, #0, 16
    baa8:	0002c80b 	andeq	ip, r2, fp, lsl #16
    baac:	52160400 	andspl	r0, r6, #0, 8
    bab0:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    bab4:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    bab8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    babc:	00000f16 	andeq	r0, r0, r6, lsl pc
    bac0:	03180800 	tsteq	r8, #0, 16
    bac4:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    bac8:	69160c00 	ldmdbvs	r6, {sl, fp}
    bacc:	08000009 	stmdaeq	r0, {r0, r3}
    bad0:	cb150319 	blgt	54c73c <__ccfg+0x52c794>
    bad4:	2c000003 	stccs	0, cr0, [r0], {3}
    bad8:	034b0f00 	movteq	r0, #48896	; 0xbf00
    badc:	03cb0000 	biceq	r0, fp, #0
    bae0:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    bae4:	03000000 	movweq	r0, #0
    bae8:	58040a00 	stmdapl	r4, {r9, fp}
    baec:	11000003 	tstne	r0, r3
    baf0:	00000be8 	andeq	r0, r0, r8, ror #23
    baf4:	1b031c08 	blne	d2b1c <__ccfg+0xb2b74>
    baf8:	00000358 	andeq	r0, r0, r8, asr r3
    bafc:	000bc814 	andeq	ip, fp, r4, lsl r8
    bb00:	031e0800 	tsteq	lr, #0, 16
    bb04:	0003ed14 	andeq	lr, r3, r4, lsl sp
    bb08:	0a010100 	beq	4bf10 <__ccfg+0x2bf68>
    bb0c:	0003d104 	andeq	sp, r3, r4, lsl #2
    bb10:	eb011900 	bl	51f18 <__ccfg+0x31f70>
    bb14:	01000028 	tsteq	r0, r8, lsr #32
    bb18:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    bb1c:	b8000001 	stmdalt	r0, {r0}
    bb20:	08000033 	stmdaeq	r0, {r0, r1, r4, r5}
    bb24:	01000034 	tsteq	r0, r4, lsr r0
    bb28:	0004689c 	muleq	r4, ip, r8
    bb2c:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    bb30:	91010073 	tstls	r1, r3, ror r0
    bb34:	0001cd14 	andeq	ip, r1, r4, lsl sp
    bb38:	002e7e00 	eoreq	r7, lr, r0, lsl #28
    bb3c:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    bb40:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    bb44:	00000468 	andeq	r0, r0, r8, ror #8
    bb48:	00002ec8 	andeq	r2, r0, r8, asr #29
    bb4c:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    bb50:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    bb54:	07000000 	streq	r0, [r0, -r0]
    bb58:	1b00002f 	blne	bc1c <__exidx_end+0x6304>
    bb5c:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    bb60:	c1079301 	tstgt	r7, r1, lsl #6
    bb64:	3b000000 	blcc	bb6c <__exidx_end+0x6254>
    bb68:	1b00002f 	blne	bc2c <__exidx_end+0x6314>
    bb6c:	93010064 	movwls	r0, #4196	; 0x1064
    bb70:	0000c10c 	andeq	ip, r0, ip, lsl #2
    bb74:	002f5900 	eoreq	r5, pc, r0, lsl #18
    bb78:	28d31c00 	ldmcs	r3, {sl, fp, ip}^
    bb7c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    bb80:	0033e201 	eorseq	lr, r3, r1, lsl #4
    bb84:	040a0000 	streq	r0, [sl], #-0
    bb88:	000001da 	ldrdeq	r0, [r0], -sl
    bb8c:	28de011d 	ldmcs	lr, {r0, r2, r3, r4, r8}^
    bb90:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    bb94:	00c10106 	sbceq	r0, r1, r6, lsl #2
    bb98:	31880000 	orrcc	r0, r8, r0
    bb9c:	33b80000 			; <UNDEFINED> instruction: 0x33b80000
    bba0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bba4:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    bba8:	1a080100 	bne	20bfb0 <__ccfg+0x1ec008>
    bbac:	000001cd 	andeq	r0, r0, sp, asr #3
    bbb0:	00002f6c 	andeq	r2, r0, ip, ror #30
    bbb4:	01006e1a 	tsteq	r0, sl, lsl lr
    bbb8:	00c12408 	sbceq	r2, r1, r8, lsl #8
    bbbc:	2f7f0000 	svccs	0x007f0000
    bbc0:	661a0000 	ldrvs	r0, [sl], -r0
    bbc4:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    bbc8:	00046833 	andeq	r6, r4, r3, lsr r8
    bbcc:	002f9200 	eoreq	r9, pc, r0, lsl #4
    bbd0:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    bbd4:	3f080100 	svccc	0x00080100
    bbd8:	000000b5 	strheq	r0, [r0], -r5
    bbdc:	00002fbb 			; <UNDEFINED> instruction: 0x00002fbb
    bbe0:	0100631b 	tsteq	r0, fp, lsl r3
    bbe4:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    bbe8:	305d0000 	subscc	r0, sp, r0
    bbec:	641e0000 	ldrvs	r0, [lr], #-0
    bbf0:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    bbf4:	000000c1 	andeq	r0, r0, r1, asr #1
    bbf8:	23549104 	cmpcs	r4, #4, 2
    bbfc:	28d91f06 	ldmcs	r9, {r1, r2, r8, r9, sl, fp, ip}^
    bc00:	0d010000 	stceq	0, cr0, [r1, #-0]
    bc04:	31680107 	cmncc	r8, r7, lsl #2
    bc08:	31880000 	orrcc	r0, r8, r0
    bc0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bc10:	23007c05 	movwcs	r7, #3077	; 0xc05
    bc14:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    bc18:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    bc1c:	120d0100 	andne	r0, sp, #0, 2
    bc20:	000000c1 	andeq	r0, r0, r1, asr #1
    bc24:	21005001 	tstcs	r0, r1
    bc28:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    bc2c:	c2018801 	andgt	r8, r1, #65536	; 0x10000
    bc30:	21000031 	tstcs	r0, r1, lsr r0
    bc34:	00746552 	rsbseq	r6, r4, r2, asr r5
    bc38:	24018b01 	strcs	r8, [r1], #-2817	; 0xfffff4ff
    bc3c:	22000032 	andcs	r0, r0, #50	; 0x32
    bc40:	00000ff8 	strdeq	r0, [r0], -r8
    bc44:	00000545 	andeq	r0, r0, r5, asr #10
    bc48:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    bc4c:	0a3a0100 	beq	e8c054 <__ccfg+0xe6c0ac>
    bc50:	000000c1 	andeq	r0, r0, r1, asr #1
    bc54:	0100691b 	tsteq	r0, fp, lsl r9
    bc58:	0081133a 	addeq	r1, r1, sl, lsr r3
    bc5c:	31430000 	mrscc	r0, (UNDEF: 67)
    bc60:	22000000 	andcs	r0, r0, #0
    bc64:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    bc68:	0000056d 	andeq	r0, r0, sp, ror #10
    bc6c:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bc70:	0a460100 	beq	118c078 <__ccfg+0x116c0d0>
    bc74:	000000c1 	andeq	r0, r0, r1, asr #1
    bc78:	00003156 	andeq	r3, r0, r6, asr r1
    bc7c:	0100691b 	tsteq	r0, fp, lsl r9
    bc80:	00c10f46 	sbceq	r0, r1, r6, asr #30
    bc84:	317f0000 	cmncc	pc, r0
    bc88:	22000000 	andcs	r0, r0, #0
    bc8c:	00001030 	andeq	r1, r0, r0, lsr r0
    bc90:	00000595 	muleq	r0, r5, r5
    bc94:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bc98:	0c550100 	ldfeqe	f0, [r5], {-0}
    bc9c:	000000e3 	andeq	r0, r0, r3, ror #1
    bca0:	000031a8 	andeq	r3, r0, r8, lsr #3
    bca4:	0100691b 	tsteq	r0, fp, lsl r9
    bca8:	00e31155 	rsceq	r1, r3, r5, asr r1
    bcac:	31bb0000 			; <UNDEFINED> instruction: 0x31bb0000
    bcb0:	24000000 	strcs	r0, [r0], #-0
    bcb4:	00003346 	andeq	r3, r0, r6, asr #6
    bcb8:	00003370 	andeq	r3, r0, r0, ror r3
    bcbc:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    bcc0:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    bcc4:	0c600100 	stfeqe	f0, [r0], #-0
    bcc8:	000000e3 	andeq	r0, r0, r3, ror #1
    bccc:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    bcd0:	0a610100 	beq	184c0d8 <__ccfg+0x182c130>
    bcd4:	00000081 	andeq	r0, r0, r1, lsl #1
    bcd8:	000031e4 	andeq	r3, r0, r4, ror #3
    bcdc:	10182200 	andsne	r2, r8, r0, lsl #4
    bce0:	05d90000 	ldrbeq	r0, [r9]
    bce4:	761b0000 	ldrvc	r0, [fp], -r0
    bce8:	01006c61 	tsteq	r0, r1, ror #24
    bcec:	00c10a71 	sbceq	r0, r1, r1, ror sl
    bcf0:	31f70000 	mvnscc	r0, r0
    bcf4:	25000000 	strcs	r0, [r0, #-0]
    bcf8:	0000338e 	andeq	r3, r0, lr, lsl #7
    bcfc:	000033aa 	andeq	r3, r0, sl, lsr #7
    bd00:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    bd04:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    bd08:	17000001 	strne	r0, [r0, -r1]
    bd0c:	00000032 	andeq	r0, r0, r2, lsr r0
    bd10:	058f0000 	streq	r0, [pc]	; bd18 <__exidx_end+0x6400>
    bd14:	00030000 	andeq	r0, r3, r0
    bd18:	00002d0b 	andeq	r2, r0, fp, lsl #26
    bd1c:	00a30104 	adceq	r0, r3, r4, lsl #2
    bd20:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
    bd24:	08000028 	stmdaeq	r0, {r3, r5}
    bd28:	f000000e 			; <UNDEFINED> instruction: 0xf000000e
    bd2c:	00000010 	andeq	r0, r0, r0, lsl r0
    bd30:	92000000 	andls	r0, r0, #0
    bd34:	0200006d 	andeq	r0, r0, #109	; 0x6d
    bd38:	0c690601 	stcleq	6, cr0, [r9], #-4
    bd3c:	02020000 	andeq	r0, r2, #0
    bd40:	000a7705 	andeq	r7, sl, r5, lsl #14
    bd44:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    bd48:	00000809 	andeq	r0, r0, r9, lsl #16
    bd4c:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    bd50:	03000008 	movweq	r0, #8
    bd54:	00002a1a 	andeq	r2, r0, sl, lsl sl
    bd58:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    bd5c:	02000000 	andeq	r0, r0, #0
    bd60:	0c670801 	stcleq	8, cr0, [r7], #-4
    bd64:	10030000 	andne	r0, r3, r0
    bd68:	0200002e 	andeq	r0, r0, #46	; 0x2e
    bd6c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    bd70:	02020000 	andeq	r0, r2, #0
    bd74:	000d6407 	andeq	r6, sp, r7, lsl #8
    bd78:	29b20300 	ldmibcs	r2!, {r8, r9}
    bd7c:	34020000 	strcc	r0, [r2], #-0
    bd80:	00007319 	andeq	r7, r0, r9, lsl r3
    bd84:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bd88:	00000439 	andeq	r0, r0, r9, lsr r4
    bd8c:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    bd90:	04000004 	streq	r0, [r0], #-4
    bd94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    bd98:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    bd9c:	00043e07 	andeq	r3, r4, r7, lsl #28
    bda0:	052a0300 	streq	r0, [sl, #-768]!	; 0xfffffd00
    bda4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    bda8:	00009b1b 	andeq	r9, r0, fp, lsl fp
    bdac:	0b9c0500 	bleq	fe70d1b4 <_estack+0xde7081b4>
    bdb0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    bdb4:	0000b300 	andeq	fp, r0, r0, lsl #6
    bdb8:	08790600 	ldmdaeq	r9!, {r9, sl}^
    bdbc:	00b30000 	adcseq	r0, r3, r0
    bdc0:	01000000 	mrseq	r0, (UNDEF: 0)
    bdc4:	03040700 	movweq	r0, #18176	; 0x4700
    bdc8:	00000b9e 	muleq	r0, lr, fp
    bdcc:	8f186303 	svchi	0x00186303
    bdd0:	03000000 	movweq	r0, #0
    bdd4:	00001326 	andeq	r1, r0, r6, lsr #6
    bdd8:	41122604 	tstmi	r2, r4, lsl #12
    bddc:	03000000 	movweq	r0, #0
    bde0:	000028f9 	strdeq	r2, [r0], -r9
    bde4:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    bde8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bdec:	000000cd 	andeq	r0, r0, sp, asr #1
    bdf0:	001dc003 	andseq	ip, sp, r3
    bdf4:	122b0400 	eorne	r0, fp, #0, 8
    bdf8:	00000041 	andeq	r0, r0, r1, asr #32
    bdfc:	0000de09 	andeq	sp, r0, r9, lsl #28
    be00:	294b0300 	stmdbcs	fp, {r8, r9}^
    be04:	2c040000 	stccs	0, cr0, [r4], {-0}
    be08:	00006712 	andeq	r6, r0, r2, lsl r7
    be0c:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    be10:	52030000 	andpl	r0, r3, #0
    be14:	04000006 	streq	r0, [r0], #-6
    be18:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    be1c:	040a0000 	streq	r0, [sl], #-0
    be20:	000000cd 	andeq	r0, r0, sp, asr #1
    be24:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    be28:	0001a009 	andeq	sl, r1, r9
    be2c:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    be30:	34040000 	strcc	r0, [r4], #-0
    be34:	0000de07 	andeq	sp, r0, r7, lsl #28
    be38:	07010100 	streq	r0, [r1, -r0, lsl #2]
    be3c:	06580c00 	ldrbeq	r0, [r8], -r0, lsl #24
    be40:	35040000 	strcc	r0, [r4, #-0]
    be44:	0000de03 	andeq	sp, r0, r3, lsl #28
    be48:	06010100 	streq	r0, [r1], -r0, lsl #2
    be4c:	02ef0c00 	rsceq	r0, pc, #0, 24
    be50:	36040000 	strcc	r0, [r4], -r0
    be54:	0000de03 	andeq	sp, r0, r3, lsl #28
    be58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    be5c:	06c30c00 	strbeq	r0, [r3], r0, lsl #24
    be60:	37040000 	strcc	r0, [r4, -r0]
    be64:	0000de03 	andeq	sp, r0, r3, lsl #28
    be68:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    be6c:	0aab0c00 	beq	feacee74 <_estack+0xdeac9e74>
    be70:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    be74:	0000de03 	andeq	sp, r0, r3, lsl #28
    be78:	00040100 	andeq	r0, r4, r0, lsl #2
    be7c:	06670d00 	strbteq	r0, [r7], -r0, lsl #26
    be80:	3a040000 	bcc	10be88 <__ccfg+0xebee0>
    be84:	0000de07 	andeq	sp, r0, r7, lsl #28
    be88:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    be8c:	04000009 	streq	r0, [r0], #-9
    be90:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    be94:	0d020000 	stceq	0, cr0, [r2, #-0]
    be98:	00000f38 	andeq	r0, r0, r8, lsr pc
    be9c:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    bea0:	03000000 	movweq	r0, #0
    bea4:	00091f0d 	andeq	r1, r9, sp, lsl #30
    bea8:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    beac:	000000ef 	andeq	r0, r0, pc, ror #1
    beb0:	25030004 	strcs	r0, [r3, #-4]
    beb4:	04000003 	streq	r0, [r0], #-3
    beb8:	01120341 	tsteq	r2, r1, asr #6
    bebc:	a0090000 	andge	r0, r9, r0
    bec0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    bec4:	000006ca 	andeq	r0, r0, sl, asr #13
    bec8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    becc:	01000001 	tsteq	r0, r1
    bed0:	01970e01 	orrseq	r0, r7, r1, lsl #28
    bed4:	45040000 	strmi	r0, [r4, #-0]
    bed8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    bedc:	0a010100 	beq	4c2e4 <__ccfg+0x2c33c>
    bee0:	0001d304 	andeq	sp, r1, r4, lsl #6
    bee4:	08010200 	stmdaeq	r1, {r9}
    bee8:	00000c70 	andeq	r0, r0, r0, ror ip
    beec:	0001d308 	andeq	sp, r1, r8, lsl #6
    bef0:	032e0e00 			; <UNDEFINED> instruction: 0x032e0e00
    bef4:	45040000 	strmi	r0, [r4, #-0]
    bef8:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    befc:	0b010100 	bleq	4c304 <__ccfg+0x2c35c>
    bf00:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    bf04:	0000021e 	andeq	r0, r0, lr, lsl r2
    bf08:	000cd60d 	andeq	sp, ip, sp, lsl #12
    bf0c:	0b900500 	bleq	fe40d314 <_estack+0xde408314>
    bf10:	00000067 	andeq	r0, r0, r7, rrx
    bf14:	10730d00 	rsbsne	r0, r3, r0, lsl #26
    bf18:	91050000 	mrsls	r0, (UNDEF: 5)
    bf1c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    bf20:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    bf24:	05000001 	streq	r0, [r0, #-1]
    bf28:	00ea1092 	smlaleq	r1, sl, r2, r0
    bf2c:	00060000 	andeq	r0, r6, r0
    bf30:	000cca03 	andeq	ip, ip, r3, lsl #20
    bf34:	03930500 	orrseq	r0, r3, #0, 10
    bf38:	000001ed 	andeq	r0, r0, sp, ror #3
    bf3c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    bf40:	00023500 	andeq	r3, r2, r0, lsl #10
    bf44:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    bf48:	00000949 	andeq	r0, r0, r9, asr #18
    bf4c:	2a0f9905 	bcs	3f2368 <__ccfg+0x3d23c0>
    bf50:	01000002 	tsteq	r0, r2
    bf54:	06010b01 	streq	r0, [r1], -r1, lsl #22
    bf58:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    bf5c:	260c0000 	strcs	r0, [ip], -r0
    bf60:	06000009 	streq	r0, [r0], -r9
    bf64:	00de0793 	smullseq	r0, lr, r3, r7
    bf68:	07010000 	streq	r0, [r1, -r0]
    bf6c:	d80c0001 	stmdale	ip, {r0}
    bf70:	06000005 	streq	r0, [r0], -r5
    bf74:	00de0394 	smullseq	r0, lr, r4, r3
    bf78:	01010000 	mrseq	r0, (UNDEF: 1)
    bf7c:	03000000 	movweq	r0, #0
    bf80:	00000ab7 			; <UNDEFINED> instruction: 0x00000ab7
    bf84:	43039606 	movwmi	r9, #13830	; 0x3606
    bf88:	08000002 	stmdaeq	r0, {r1}
    bf8c:	0000026d 	andeq	r0, r0, sp, ror #4
    bf90:	0002790f 	andeq	r7, r2, pc, lsl #18
    bf94:	00028900 	andeq	r8, r2, r0, lsl #18
    bf98:	08001000 	stmdaeq	r0, {ip}
    bf9c:	0000027e 	andeq	r0, r0, lr, ror r2
    bfa0:	0003bd0e 	andeq	fp, r3, lr, lsl #26
    bfa4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    bfa8:	00000289 	andeq	r0, r0, r9, lsl #5
    bfac:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    bfb0:	a7000000 	strge	r0, [r0, -r0]
    bfb4:	10000002 	andne	r0, r0, r2
    bfb8:	029c0800 	addseq	r0, ip, #0, 16
    bfbc:	1a0e0000 	bne	38bfc4 <__ccfg+0x36c01c>
    bfc0:	07000006 	streq	r0, [r0, -r6]
    bfc4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    bfc8:	01010000 	mrseq	r0, (UNDEF: 1)
    bfcc:	0008e90e 	andeq	lr, r8, lr, lsl #18
    bfd0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    bfd4:	000000ef 	andeq	r0, r0, pc, ror #1
    bfd8:	7e110101 	mufvcs	f0, f1, f1
    bfdc:	0800000c 	stmdaeq	r0, {r2, r3}
    bfe0:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    bfe4:	0a000002 	beq	bff4 <__exidx_end+0x66dc>
    bfe8:	0002db04 	andeq	sp, r2, r4, lsl #22
    bfec:	e7011200 	str	r1, [r1, -r0, lsl #4]
    bff0:	13000002 	movwne	r0, #2
    bff4:	000000cd 	andeq	r0, r0, sp, asr #1
    bff8:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    bffc:	02f20000 	rscseq	r0, r2, #0
    c000:	00100000 	andseq	r0, r0, r0
    c004:	0002e708 	andeq	lr, r2, r8, lsl #14
    c008:	09f21400 	ldmibeq	r2!, {sl, ip}^
    c00c:	7f080000 	svcvc	0x00080000
    c010:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    c014:	01010000 	mrseq	r0, (UNDEF: 1)
    c018:	0003a914 	andeq	sl, r3, r4, lsl r9
    c01c:	01820800 	orreq	r0, r2, r0, lsl #16
    c020:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    c024:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    c028:	00000381 	andeq	r0, r0, r1, lsl #7
    c02c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    c030:	000000ef 	andeq	r0, r0, pc, ror #1
    c034:	08150101 	ldmdaeq	r5, {r0, r8}
    c038:	09030308 	stmdbeq	r3, {r3, r8, r9}
    c03c:	0000034b 	andeq	r0, r0, fp, asr #6
    c040:	003c9f16 	eorseq	r9, ip, r6, lsl pc
    c044:	03070800 	movweq	r0, #30720	; 0x7800
    c048:	0000cd07 	andeq	ip, r0, r7, lsl #26
    c04c:	cb160000 	blgt	58c054 <__ccfg+0x56c0ac>
    c050:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    c054:	00080308 	andeq	r0, r8, r8, lsl #6
    c058:	04000001 	streq	r0, [r0], #-1
    c05c:	0a151100 	beq	550464 <__ccfg+0x5304bc>
    c060:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    c064:	03240303 			; <UNDEFINED> instruction: 0x03240303
    c068:	20170000 	andscs	r0, r7, r0
    c06c:	30000000 	andcc	r0, r0, r0
    c070:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    c074:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    c078:	001f2216 	andseq	r2, pc, r6, lsl r2	; <UNPREDICTABLE>
    c07c:	03140800 	tsteq	r4, #0, 16
    c080:	0000cd08 	andeq	ip, r0, r8, lsl #26
    c084:	f3160000 	vhadd.u16	d0, d6, d0
    c088:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    c08c:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    c090:	02000000 	andeq	r0, r0, #0
    c094:	004c8c16 	subeq	r8, ip, r6, lsl ip
    c098:	03160800 	tsteq	r6, #0, 16
    c09c:	0002c80b 	andeq	ip, r2, fp, lsl #16
    c0a0:	52160400 	andspl	r0, r6, #0, 8
    c0a4:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    c0a8:	00090317 	andeq	r0, r9, r7, lsl r3
    c0ac:	08000001 	stmdaeq	r0, {r0}
    c0b0:	00000f16 	andeq	r0, r0, r6, lsl pc
    c0b4:	03180800 	tsteq	r8, #0, 16
    c0b8:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    c0bc:	69160c00 	ldmdbvs	r6, {sl, fp}
    c0c0:	08000009 	stmdaeq	r0, {r0, r3}
    c0c4:	cb150319 	blgt	54cd30 <__ccfg+0x52cd88>
    c0c8:	2c000003 	stccs	0, cr0, [r0], {3}
    c0cc:	034b0f00 	movteq	r0, #48896	; 0xbf00
    c0d0:	03cb0000 	biceq	r0, fp, #0
    c0d4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    c0d8:	03000000 	movweq	r0, #0
    c0dc:	58040a00 	stmdapl	r4, {r9, fp}
    c0e0:	11000003 	tstne	r0, r3
    c0e4:	00000be8 	andeq	r0, r0, r8, ror #23
    c0e8:	1b031c08 	blne	d3110 <__ccfg+0xb3168>
    c0ec:	00000358 	andeq	r0, r0, r8, asr r3
    c0f0:	000bc814 	andeq	ip, fp, r4, lsl r8
    c0f4:	031e0800 	tsteq	lr, #0, 16
    c0f8:	0003ed14 	andeq	lr, r3, r4, lsl sp
    c0fc:	0a010100 	beq	4c504 <__ccfg+0x2c55c>
    c100:	0003d104 	andeq	sp, r3, r4, lsl #2
    c104:	3d011900 	vstrcc.16	s2, [r1, #-0]	; <UNPREDICTABLE>
    c108:	01000029 	tsteq	r0, r9, lsr #32
    c10c:	81010508 	tsthi	r1, r8, lsl #10
    c110:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c114:	98000034 	stmdals	r0, {r2, r4, r5}
    c118:	01000037 	tsteq	r0, r7, lsr r0
    c11c:	0005869c 	muleq	r5, ip, r6
    c120:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    c124:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    c128:	00058618 	andeq	r8, r5, r8, lsl r6
    c12c:	00322a00 	eorseq	r2, r2, r0, lsl #20
    c130:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    c134:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    c138:	00058629 	andeq	r8, r5, r9, lsr #12
    c13c:	00342100 	eorseq	r2, r4, r0, lsl #2
    c140:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    c144:	36080100 	strcc	r0, [r8], -r0, lsl #2
    c148:	000000b5 	strheq	r0, [r0], -r5
    c14c:	00003455 	andeq	r3, r0, r5, asr r4
    c150:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    c154:	81060a01 	tsthi	r6, r1, lsl #20
    c158:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    c15c:	1c000034 	stcne	0, cr0, [r0], {52}	; 0x34
    c160:	000028f1 	strdeq	r2, [r0], -r1
    c164:	1c114e01 	ldcne	14, cr4, [r1], {1}
    c168:	00002943 	andeq	r2, r0, r3, asr #18
    c16c:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    c170:	000034ca 	andeq	r3, r0, sl, asr #9
    c174:	0000353a 	andeq	r3, r0, sl, lsr r5
    c178:	00000488 	andeq	r0, r0, r8, lsl #9
    c17c:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c180:	114e0100 	mrsne	r0, (UNDEF: 94)
    c184:	0000010c 	andeq	r0, r0, ip, lsl #2
    c188:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    c18c:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    c190:	0000c111 	andeq	ip, r0, r1, lsl r1
    c194:	00356f00 	eorseq	r6, r5, r0, lsl #30
    c198:	3a1d0000 	bcc	74c1a0 <__ccfg+0x72c1f8>
    c19c:	82000035 	andhi	r0, r0, #53	; 0x35
    c1a0:	a4000035 	strge	r0, [r0], #-53	; 0xffffffcb
    c1a4:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c1a8:	00706176 	rsbseq	r6, r0, r6, ror r1
    c1ac:	0c114f01 	ldceq	15, cr4, [r1], {1}
    c1b0:	01000001 	tsteq	r0, r1
    c1b4:	a01f005e 	andsge	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    c1b8:	d5000010 	strle	r0, [r0, #-16]
    c1bc:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c1c0:	00706176 	rsbseq	r6, r0, r6, ror r1
    c1c4:	0c115001 	ldceq	0, cr5, [r1], {1}
    c1c8:	01000001 	tsteq	r0, r1
    c1cc:	6364205e 	cmnvs	r4, #94	; 0x5e
    c1d0:	11500100 	cmpne	r0, r0, lsl #2
    c1d4:	00000081 	andeq	r0, r0, r1, lsl #1
    c1d8:	0100631b 	tsteq	r0, fp, lsl r3
    c1dc:	01d31150 	bicseq	r1, r3, r0, asr r1
    c1e0:	358d0000 	strcc	r0, [sp]
    c1e4:	1f000000 	svcne	0x00000000
    c1e8:	000010b8 	strheq	r1, [r0], -r8
    c1ec:	000004fc 	strdeq	r0, [r0], -ip
    c1f0:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c1f4:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    c1f8:	0000058c 	andeq	r0, r0, ip, lsl #11
    c1fc:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    c200:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    c204:	0000c116 	andeq	ip, r0, r6, lsl r1
    c208:	0035ab00 	eorseq	sl, r5, r0, lsl #22
    c20c:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    c210:	14000010 	strne	r0, [r0], #-16
    c214:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    c218:	00706176 	rsbseq	r6, r0, r6, ror r1
    c21c:	8c165601 	ldchi	6, cr5, [r6], {1}
    c220:	01000005 	tsteq	r0, r5
    c224:	d01f005e 	andsle	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    c228:	45000010 	strmi	r0, [r0, #-16]
    c22c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    c230:	00706176 	rsbseq	r6, r0, r6, ror r1
    c234:	8c165701 	ldchi	7, cr5, [r6], {1}
    c238:	01000005 	tsteq	r0, r5
    c23c:	6364205e 	cmnvs	r4, #94	; 0x5e
    c240:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    c244:	00000081 	andeq	r0, r0, r1, lsl #1
    c248:	0100631b 	tsteq	r0, fp, lsl r3
    c24c:	01d31657 	bicseq	r1, r3, r7, asr r6
    c250:	35c90000 	strbcc	r0, [r9]
    c254:	1d000000 	stcne	0, cr0, [r0, #-0]
    c258:	0000374a 	andeq	r3, r0, sl, asr #14
    c25c:	0000375e 	andeq	r3, r0, lr, asr r7
    c260:	0000056f 	andeq	r0, r0, pc, ror #10
    c264:	0100631b 	tsteq	r0, fp, lsl r3
    c268:	01d3095c 	bicseq	r0, r3, ip, asr r9
    c26c:	35e70000 	strbcc	r0, [r7, #0]!
    c270:	731e0000 	tstvc	lr, #0
    c274:	01007061 	tsteq	r0, r1, rrx
    c278:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    c27c:	56010000 	strpl	r0, [r1], -r0
    c280:	10802100 	addne	r2, r0, r0, lsl #2
    c284:	731b0000 	tstvc	fp, #0
    c288:	01007061 	tsteq	r0, r1, rrx
    c28c:	01cd0a66 	biceq	r0, sp, r6, ror #20
    c290:	35fa0000 	ldrbcc	r0, [sl, #0]!
    c294:	00000000 	andeq	r0, r0, r0
    c298:	01da040a 	bicseq	r0, sl, sl, lsl #8
    c29c:	040a0000 	streq	r0, [sl], #-0
    c2a0:	000000ef 	andeq	r0, r0, pc, ror #1
    c2a4:	001fea00 	andseq	lr, pc, r0, lsl #20
    c2a8:	c7000300 	strgt	r0, [r0, -r0, lsl #6]
    c2ac:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    c2b0:	0000a301 	andeq	sl, r0, r1, lsl #6
    c2b4:	29510c00 	ldmdbcs	r1, {sl, fp}^
    c2b8:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    c2bc:	705f0000 	subsvc	r0, pc, r0
    c2c0:	01020000 	mrseq	r0, (UNDEF: 2)
    c2c4:	000c6906 	andeq	r6, ip, r6, lsl #18
    c2c8:	31eb0300 	mvncc	r0, r0, lsl #6
    c2cc:	25010000 	strcs	r0, [r1, #-0]
    c2d0:	00003018 	andeq	r3, r0, r8, lsl r0
    c2d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    c2d8:	00000a77 	andeq	r0, r0, r7, ror sl
    c2dc:	09050402 	stmdbeq	r5, {r1, sl}
    c2e0:	02000008 	andeq	r0, r0, #8
    c2e4:	08040508 	stmdaeq	r4, {r3, r8, sl}
    c2e8:	1a030000 	bne	cc2f0 <__ccfg+0xac348>
    c2ec:	0100002a 	tsteq	r0, sl, lsr #32
    c2f0:	0051182e 	subseq	r1, r1, lr, lsr #16
    c2f4:	01020000 	mrseq	r0, (UNDEF: 2)
    c2f8:	000c6708 	andeq	r6, ip, r8, lsl #14
    c2fc:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
    c300:	31010000 	mrscc	r0, (UNDEF: 1)
    c304:	00006419 	andeq	r6, r0, r9, lsl r4
    c308:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c30c:	00000d64 	andeq	r0, r0, r4, ror #26
    c310:	0029b203 	eoreq	fp, r9, r3, lsl #4
    c314:	19340100 	ldmdbne	r4!, {r8}
    c318:	0000007c 	andeq	r0, r0, ip, ror r0
    c31c:	00006b04 	andeq	r6, r0, r4, lsl #22
    c320:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c324:	00000439 	andeq	r0, r0, r9, lsr r4
    c328:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    c32c:	05000004 	streq	r0, [r0, #-4]
    c330:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c334:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    c338:	00043e07 	andeq	r3, r4, r7, lsl #28
    c33c:	299b0300 	ldmibcs	fp, {r8, r9}
    c340:	56010000 	strpl	r0, [r1], -r0
    c344:	0000911a 	andeq	r9, r0, sl, lsl r1
    c348:	0be10600 	bleq	ff84db50 <_estack+0xdf848b50>
    c34c:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    c350:	00911701 	addseq	r1, r1, r1, lsl #14
    c354:	47030000 	strmi	r0, [r3, -r0]
    c358:	0300000e 	movweq	r0, #14
    c35c:	00370e2e 	eorseq	r0, r7, lr, lsr #28
    c360:	07030000 	streq	r0, [r3, -r0]
    c364:	03000003 	movweq	r0, #3
    c368:	00370e74 	eorseq	r0, r7, r4, ror lr
    c36c:	04070000 	streq	r0, [r7], #-0
    c370:	eb03a503 	bl	f5784 <__ccfg+0xd57dc>
    c374:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c378:	00000778 	andeq	r0, r0, r8, ror r7
    c37c:	a40ca703 	strge	sl, [ip], #-1795	; 0xfffff8fd
    c380:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c384:	00000ac0 	andeq	r0, r0, r0, asr #21
    c388:	eb13a803 	bl	4f639c <__ccfg+0x4d63f4>
    c38c:	00000000 	andeq	r0, r0, r0
    c390:	00005109 	andeq	r5, r0, r9, lsl #2
    c394:	0000fb00 	andeq	pc, r0, r0, lsl #22
    c398:	00910a00 	addseq	r0, r1, r0, lsl #20
    c39c:	00030000 	andeq	r0, r3, r0
    c3a0:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    c3a4:	00011f09 	andeq	r1, r1, r9, lsl #30
    c3a8:	03a10c00 			; <UNDEFINED> instruction: 0x03a10c00
    c3ac:	a4030000 	strge	r0, [r3], #-0
    c3b0:	00008a07 	andeq	r8, r0, r7, lsl #20
    c3b4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    c3b8:	03000006 	movweq	r0, #6
    c3bc:	00c905a9 	sbceq	r0, r9, r9, lsr #11
    c3c0:	00040000 	andeq	r0, r4, r0
    c3c4:	0008c103 	andeq	ip, r8, r3, lsl #2
    c3c8:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    c3cc:	000000fb 	strdeq	r0, [r0], -fp
    c3d0:	4e03040d 	cdpmi	4, 0, cr0, cr3, cr13, {0}
    c3d4:	04000008 	streq	r0, [r0], #-8
    c3d8:	007c1916 	rsbseq	r1, ip, r6, lsl r9
    c3dc:	5b030000 	blpl	cc3e4 <__ccfg+0xac43c>
    c3e0:	05000002 	streq	r0, [r0, #-2]
    c3e4:	008a0d0c 	addeq	r0, sl, ip, lsl #26
    c3e8:	36030000 	strcc	r0, [r3], -r0
    c3ec:	04000007 	streq	r0, [r0], #-7
    c3f0:	01391b23 	teqeq	r9, r3, lsr #22
    c3f4:	3a0e0000 	bcc	38c3fc <__ccfg+0x36c454>
    c3f8:	18000003 	stmdane	r0, {r0, r1}
    c3fc:	ab083404 	blge	219414 <__ccfg+0x1f946c>
    c400:	0c000001 	stceq	0, cr0, [r0], {1}
    c404:	00000ec2 	andeq	r0, r0, r2, asr #29
    c408:	ab133604 	blge	4d9c20 <__ccfg+0x4b9c78>
    c40c:	00000001 	andeq	r0, r0, r1
    c410:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    c414:	8a073704 	bhi	1da02c <__ccfg+0x1ba084>
    c418:	04000000 	streq	r0, [r0], #-0
    c41c:	000b6e0c 	andeq	r6, fp, ip, lsl #28
    c420:	0b370400 	bleq	dcd428 <__ccfg+0xdad480>
    c424:	0000008a 	andeq	r0, r0, sl, lsl #1
    c428:	43f30c08 	mvnsmi	r0, #8, 24	; 0x800
    c42c:	37040000 	strcc	r0, [r4, -r0]
    c430:	00008a14 	andeq	r8, r0, r4, lsl sl
    c434:	680c0c00 	stmdavs	ip, {sl, fp}
    c438:	04000004 	streq	r0, [r0], #-4
    c43c:	008a1b37 	addeq	r1, sl, r7, lsr fp
    c440:	0f100000 	svceq	0x00100000
    c444:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    c448:	01b10b38 			; <UNDEFINED> instruction: 0x01b10b38
    c44c:	00140000 	andseq	r0, r4, r0
    c450:	01510410 	cmpeq	r1, r0, lsl r4
    c454:	2d090000 	stccs	0, cr0, [r9, #-0]
    c458:	c1000001 	tstgt	r0, r1
    c45c:	0a000001 	beq	c468 <__exidx_end+0x6b50>
    c460:	00000091 	muleq	r0, r1, r0
    c464:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    c468:	2400000b 	strcs	r0, [r0], #-11
    c46c:	44083c04 	strmi	r3, [r8], #-3076	; 0xfffff3fc
    c470:	0c000002 	stceq	0, cr0, [r0], {2}
    c474:	00000578 	andeq	r0, r0, r8, ror r5
    c478:	8a093e04 	bhi	25bc90 <__ccfg+0x23bce8>
    c47c:	00000000 	andeq	r0, r0, r0
    c480:	0003ca0c 	andeq	ip, r3, ip, lsl #20
    c484:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    c488:	0000008a 	andeq	r0, r0, sl, lsl #1
    c48c:	036b0c04 	cmneq	fp, #4, 24	; 0x400
    c490:	40040000 	andmi	r0, r4, r0
    c494:	00008a09 	andeq	r8, r0, r9, lsl #20
    c498:	800c0800 	andhi	r0, ip, r0, lsl #16
    c49c:	04000006 	streq	r0, [r0], #-6
    c4a0:	008a0941 	addeq	r0, sl, r1, asr #18
    c4a4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c4a8:	00000960 	andeq	r0, r0, r0, ror #18
    c4ac:	8a094204 	bhi	25ccc4 <__ccfg+0x23cd1c>
    c4b0:	10000000 	andne	r0, r0, r0
    c4b4:	000ada0c 	andeq	sp, sl, ip, lsl #20
    c4b8:	09430400 	stmdbeq	r3, {sl}^
    c4bc:	0000008a 	andeq	r0, r0, sl, lsl #1
    c4c0:	034e0c14 	movteq	r0, #60436	; 0xec14
    c4c4:	44040000 	strmi	r0, [r4], #-0
    c4c8:	00008a09 	andeq	r8, r0, r9, lsl #20
    c4cc:	810c1800 	tsthi	ip, r0, lsl #16
    c4d0:	04000005 	streq	r0, [r0], #-5
    c4d4:	008a0945 	addeq	r0, sl, r5, asr #18
    c4d8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c4dc:	000008fc 	strdeq	r0, [r0], -ip
    c4e0:	8a094604 	bhi	25dcf8 <__ccfg+0x23dd50>
    c4e4:	20000000 	andcs	r0, r0, r0
    c4e8:	00321100 	eorseq	r1, r2, r0, lsl #2
    c4ec:	01080000 	mrseq	r0, (UNDEF: 8)
    c4f0:	89084f04 	stmdbhi	r8, {r2, r8, r9, sl, fp, lr}
    c4f4:	0c000002 	stceq	0, cr0, [r0], {2}
    c4f8:	00000d2b 	andeq	r0, r0, fp, lsr #26
    c4fc:	890a5004 	stmdbhi	sl, {r2, ip, lr}
    c500:	00000002 	andeq	r0, r0, r2
    c504:	000c230c 	andeq	r2, ip, ip, lsl #6
    c508:	09510400 	ldmdbeq	r1, {sl}^
    c50c:	00000289 	andeq	r0, r0, r9, lsl #5
    c510:	0dc41280 	sfmeq	f1, 2, [r4, #512]	; 0x200
    c514:	53040000 	movwpl	r0, #16384	; 0x4000
    c518:	00012d0a 	andeq	r2, r1, sl, lsl #26
    c51c:	12010000 	andne	r0, r1, #0
    c520:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    c524:	2d0a5604 	stccs	6, cr5, [sl, #-16]
    c528:	04000001 	streq	r0, [r0], #-1
    c52c:	2b090001 	blcs	24c538 <__ccfg+0x22c590>
    c530:	99000001 	stmdbls	r0, {r0}
    c534:	0a000002 	beq	c544 <__exidx_end+0x6c2c>
    c538:	00000091 	muleq	r0, r1, r0
    c53c:	2211001f 	andscs	r0, r1, #31
    c540:	9000000a 	andls	r0, r0, sl
    c544:	08620401 	stmdaeq	r2!, {r0, sl}^
    c548:	000002dc 	ldrdeq	r0, [r0], -ip
    c54c:	000ec20c 	andeq	ip, lr, ip, lsl #4
    c550:	12630400 	rsbne	r0, r3, #0, 8
    c554:	000002dc 	ldrdeq	r0, [r0], -ip
    c558:	05900c00 	ldreq	r0, [r0, #3072]	; 0xc00
    c55c:	64040000 	strvs	r0, [r4], #-0
    c560:	00008a06 	andeq	r8, r0, r6, lsl #20
    c564:	0f0c0400 	svceq	0x000c0400
    c568:	04000003 	streq	r0, [r0], #-3
    c56c:	02e20966 	rsceq	r0, r2, #1671168	; 0x198000
    c570:	0c080000 	stceq	0, cr0, [r8], {-0}
    c574:	00000032 	andeq	r0, r0, r2, lsr r0
    c578:	441e6704 	ldrmi	r6, [lr], #-1796	; 0xfffff8fc
    c57c:	88000002 	stmdahi	r0, {r1}
    c580:	99041000 	stmdbls	r4, {ip}
    c584:	09000002 	stmdbeq	r0, {r1}
    c588:	000002f2 	strdeq	r0, [r0], -r2
    c58c:	000002f2 	strdeq	r0, [r0], -r2
    c590:	0000910a 	andeq	r9, r0, sl, lsl #2
    c594:	10001f00 	andne	r1, r0, r0, lsl #30
    c598:	0002f804 	andeq	pc, r2, r4, lsl #16
    c59c:	0e011300 	cdpeq	3, 0, cr1, cr1, cr0, {0}
    c5a0:	00000cc3 	andeq	r0, r0, r3, asr #25
    c5a4:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    c5a8:	00000322 	andeq	r0, r0, r2, lsr #6
    c5ac:	000cd50c 	andeq	sp, ip, ip, lsl #10
    c5b0:	117b0400 	cmnne	fp, r0, lsl #8
    c5b4:	00000322 	andeq	r0, r0, r2, lsr #6
    c5b8:	1d9e0c00 	ldcne	12, cr0, [lr]
    c5bc:	7c040000 	stcvc	0, cr0, [r4], {-0}
    c5c0:	00008a06 	andeq	r8, r0, r6, lsl #20
    c5c4:	10000400 	andne	r0, r0, r0, lsl #8
    c5c8:	00005104 	andeq	r5, r0, r4, lsl #2
    c5cc:	04600e00 	strbteq	r0, [r0], #-3584	; 0xfffff200
    c5d0:	04680000 	strbteq	r0, [r8], #-0
    c5d4:	046b08ba 	strbteq	r0, [fp], #-2234	; 0xfffff746
    c5d8:	5f0f0000 	svcpl	0x000f0000
    c5dc:	bb040070 	bllt	10c7a4 <__ccfg+0xec7fc>
    c5e0:	00032212 	andeq	r2, r3, r2, lsl r2
    c5e4:	5f0f0000 	svcpl	0x000f0000
    c5e8:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    c5ec:	00008a07 	andeq	r8, r0, r7, lsl #20
    c5f0:	5f0f0400 	svcpl	0x000f0400
    c5f4:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    c5f8:	00008a07 	andeq	r8, r0, r7, lsl #20
    c5fc:	bb0c0800 	bllt	30e604 <__ccfg+0x2ee65c>
    c600:	04000001 	streq	r0, [r0], #-1
    c604:	003009be 	ldrhteq	r0, [r0], -lr
    c608:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c60c:	00000865 	andeq	r0, r0, r5, ror #16
    c610:	3009bf04 	andcc	fp, r9, r4, lsl #30
    c614:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c618:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    c61c:	11c00400 	bicne	r0, r0, r0, lsl #8
    c620:	000002fa 	strdeq	r0, [r0], -sl
    c624:	01b20c10 			; <UNDEFINED> instruction: 0x01b20c10
    c628:	c1040000 	mrsgt	r0, (UNDEF: 4)
    c62c:	00008a07 	andeq	r8, r0, r7, lsl #20
    c630:	140c1800 	strne	r1, [ip], #-2048	; 0xfffff800
    c634:	04000003 	streq	r0, [r0], #-3
    c638:	012b0ac8 	smlawteq	fp, r8, sl, r0
    c63c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c640:	00001d2d 	andeq	r1, r0, sp, lsr #26
    c644:	f01dca04 			; <UNDEFINED> instruction: 0xf01dca04
    c648:	20000005 	andcs	r0, r0, r5
    c64c:	001cf40c 	andseq	pc, ip, ip, lsl #8
    c650:	1dcc0400 	cfstrdne	mvd0, [ip]
    c654:	0000061b 	andeq	r0, r0, fp, lsl r6
    c658:	0ee20c24 	cdpeq	12, 14, cr0, cr2, cr4, {1}
    c65c:	cf040000 	svcgt	0x00040000
    c660:	0006400d 	andeq	r4, r6, sp
    c664:	e20c2800 	and	r2, ip, #0, 16
    c668:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    c66c:	065b09d0 			; <UNDEFINED> instruction: 0x065b09d0
    c670:	0f2c0000 	svceq	0x002c0000
    c674:	0062755f 	rsbeq	r7, r2, pc, asr r5
    c678:	fa11d304 	blx	481290 <__ccfg+0x4612e8>
    c67c:	30000002 	andcc	r0, r0, r2
    c680:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    c684:	12d40400 	sbcsne	r0, r4, #0, 8
    c688:	00000322 	andeq	r0, r0, r2, lsr #6
    c68c:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; b75c <__exidx_end+0x5e44>
    c690:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    c694:	00008a07 	andeq	r8, r0, r7, lsl #20
    c698:	190c3c00 	stmdbne	ip, {sl, fp, ip, sp}
    c69c:	0400000f 	streq	r0, [r0], #-15
    c6a0:	066111d8 			; <UNDEFINED> instruction: 0x066111d8
    c6a4:	0c400000 	mareq	acc0, r0, r0
    c6a8:	00000e62 	andeq	r0, r0, r2, ror #28
    c6ac:	7111d904 	tstvc	r1, r4, lsl #18
    c6b0:	43000006 	movwmi	r0, #6
    c6b4:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    c6b8:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    c6bc:	000002fa 	strdeq	r0, [r0], -sl
    c6c0:	0b800c44 	bleq	fe00f7d8 <_estack+0xde00a7d8>
    c6c4:	df040000 	svcle	0x00040000
    c6c8:	00008a07 	andeq	r8, r0, r7, lsl #20
    c6cc:	940c4c00 	strls	r4, [ip], #-3072	; 0xfffff400
    c6d0:	04000004 	streq	r0, [r0], #-4
    c6d4:	00b10ae0 	adcseq	r0, r1, r0, ror #21
    c6d8:	0c500000 	mraeq	r0, r0, acc0
    c6dc:	00004751 	andeq	r4, r0, r1, asr r7
    c6e0:	8a12e304 	bhi	4c52f8 <__ccfg+0x4a5350>
    c6e4:	54000004 	strpl	r0, [r0], #-4
    c6e8:	000ba60c 	andeq	sl, fp, ip, lsl #12
    c6ec:	0ce70400 	cfstrdeq	mvd0, [r7]
    c6f0:	00000145 	andeq	r0, r0, r5, asr #2
    c6f4:	0a2a0c58 	beq	a8f85c <__ccfg+0xa6f8b4>
    c6f8:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    c6fc:	00011f0e 	andeq	r1, r1, lr, lsl #30
    c700:	950c5c00 	strls	r5, [ip, #-3072]	; 0xfffff400
    c704:	0400000e 	streq	r0, [r0], #-14
    c708:	008a09ea 	addeq	r0, sl, sl, ror #19
    c70c:	00640000 	rsbeq	r0, r4, r0
    c710:	008a0114 	addeq	r0, sl, r4, lsl r1
    c714:	048a0000 	streq	r0, [sl], #0
    c718:	8a150000 	bhi	54c720 <__ccfg+0x52c778>
    c71c:	15000004 	strne	r0, [r0, #-4]
    c720:	0000012b 	andeq	r0, r0, fp, lsr #2
    c724:	0005de15 	andeq	sp, r5, r5, lsl lr
    c728:	008a1500 	addeq	r1, sl, r0, lsl #10
    c72c:	10000000 	andne	r0, r0, r0
    c730:	00049504 	andeq	r9, r4, r4, lsl #10
    c734:	048a0400 	streq	r0, [sl], #1024	; 0x400
    c738:	5d160000 	ldcpl	0, cr0, [r6, #-0]
    c73c:	2800000d 	stmdacs	r0, {r0, r2, r3}
    c740:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    c744:	0005de08 	andeq	sp, r5, r8, lsl #28
    c748:	09101700 	ldmdbeq	r0, {r8, r9, sl, ip}
    c74c:	67040000 	strvs	r0, [r4, -r0]
    c750:	008a0702 	addeq	r0, sl, r2, lsl #14
    c754:	17000000 	strne	r0, [r0, -r0]
    c758:	000007ee 	andeq	r0, r0, lr, ror #15
    c75c:	0b026c04 	bleq	a7774 <__ccfg+0x877cc>
    c760:	000006cd 	andeq	r0, r0, sp, asr #13
    c764:	02ff1704 	rscseq	r1, pc, #4, 14	; 0x100000
    c768:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c76c:	06cd1402 	strbeq	r1, [sp], r2, lsl #8
    c770:	17080000 	strne	r0, [r8, -r0]
    c774:	00000f08 	andeq	r0, r0, r8, lsl #30
    c778:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    c77c:	000006cd 	andeq	r0, r0, sp, asr #13
    c780:	058b170c 	streq	r1, [fp, #1804]	; 0x70c
    c784:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    c788:	008a0802 	addeq	r0, sl, r2, lsl #16
    c78c:	17100000 	ldrne	r0, [r0, -r0]
    c790:	000004e0 	andeq	r0, r0, r0, ror #9
    c794:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    c798:	000008cd 	andeq	r0, r0, sp, asr #17
    c79c:	0e751714 	mrceq	7, 3, r1, cr5, cr4, {0}
    c7a0:	72040000 	andvc	r0, r4, #0
    c7a4:	008a0702 	addeq	r0, sl, r2, lsl #14
    c7a8:	17300000 	ldrne	r0, [r0, -r0]!
    c7ac:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    c7b0:	16027304 	strne	r7, [r2], -r4, lsl #6
    c7b4:	000008e3 	andeq	r0, r0, r3, ror #17
    c7b8:	07961734 			; <UNDEFINED> instruction: 0x07961734
    c7bc:	75040000 	strvc	r0, [r4, #-0]
    c7c0:	008a0702 	addeq	r0, sl, r2, lsl #14
    c7c4:	17380000 	ldrne	r0, [r8, -r0]!
    c7c8:	00000890 	muleq	r0, r0, r8
    c7cc:	0a027704 	beq	aa3e4 <__ccfg+0x8a43c>
    c7d0:	000008f5 	strdeq	r0, [r0], -r5
    c7d4:	0363173c 	cmneq	r3, #60, 14	; 0xf00000
    c7d8:	7a040000 	bvc	10c7e0 <__ccfg+0xec838>
    c7dc:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    c7e0:	17400000 	strbne	r0, [r0, -r0]
    c7e4:	0000041e 	andeq	r0, r0, lr, lsl r4
    c7e8:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    c7ec:	0000008a 	andeq	r0, r0, sl, lsl #1
    c7f0:	06151744 	ldreq	r1, [r5], -r4, asr #14
    c7f4:	7c040000 	stcvc	0, cr0, [r4], {-0}
    c7f8:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    c7fc:	17480000 	strbne	r0, [r8, -r0]
    c800:	0000082b 	andeq	r0, r0, fp, lsr #16
    c804:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    c808:	000008fb 	strdeq	r0, [r0], -fp
    c80c:	0b66174c 	bleq	1992544 <__ccfg+0x197259c>
    c810:	80040000 	andhi	r0, r4, r0
    c814:	008a0702 	addeq	r0, sl, r2, lsl #14
    c818:	17500000 	ldrbne	r0, [r0, -r0]
    c81c:	00000c5f 	andeq	r0, r0, pc, asr ip
    c820:	09028104 	stmdbeq	r2, {r2, r8, pc}
    c824:	000005de 	ldrdeq	r0, [r0], -lr
    c828:	0c791754 	ldcleq	7, cr1, [r9], #-336	; 0xfffffeb0
    c82c:	a4040000 	strge	r0, [r4], #-0
    c830:	08a80702 	stmiaeq	r8!, {r1, r8, r9, sl}
    c834:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    c838:	00000a22 	andeq	r0, r0, r2, lsr #20
    c83c:	1302a804 	movwne	sl, #10244	; 0x2804
    c840:	000002dc 	ldrdeq	r0, [r0], -ip
    c844:	ba180148 	blt	60cd6c <__ccfg+0x5ecdc4>
    c848:	04000006 	streq	r0, [r0], #-6
    c84c:	991202a9 	ldmdbls	r2, {r0, r3, r5, r7, r9}
    c850:	4c000002 	stcmi	0, cr0, [r0], {2}
    c854:	06a11801 	strteq	r1, [r1], r1, lsl #16
    c858:	ad040000 	stcge	0, cr0, [r4, #-0]
    c85c:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    c860:	02dc0000 	sbcseq	r0, ip, #0
    c864:	000ce118 	andeq	lr, ip, r8, lsl r1
    c868:	02b20400 	adcseq	r0, r2, #0, 8
    c86c:	00068e10 	andeq	r8, r6, r0, lsl lr
    c870:	1802e000 	stmdane	r2, {sp, lr, pc}
    c874:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    c878:	0a02b404 	beq	b9890 <__ccfg+0x998e8>
    c87c:	00000919 	andeq	r0, r0, r9, lsl r9
    c880:	100002ec 	andne	r0, r0, ip, ror #5
    c884:	0005e404 	andeq	lr, r5, r4, lsl #8
    c888:	08010200 	stmdaeq	r1, {r9}
    c88c:	00000c70 	andeq	r0, r0, r0, ror ip
    c890:	0005e404 	andeq	lr, r5, r4, lsl #8
    c894:	6b041000 	blvs	11089c <__ccfg+0xf08f4>
    c898:	14000004 	strne	r0, [r0], #-4
    c89c:	00008a01 	andeq	r8, r0, r1, lsl #20
    c8a0:	00061500 	andeq	r1, r6, r0, lsl #10
    c8a4:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c8a8:	2b150000 	blcs	54c8b0 <__ccfg+0x52c908>
    c8ac:	15000001 	strne	r0, [r0, #-1]
    c8b0:	00000615 	andeq	r0, r0, r5, lsl r6
    c8b4:	00008a15 	andeq	r8, r0, r5, lsl sl
    c8b8:	04100000 	ldreq	r0, [r0], #-0
    c8bc:	000005eb 	andeq	r0, r0, fp, ror #11
    c8c0:	05f60410 	ldrbeq	r0, [r6, #1040]!	; 0x410
    c8c4:	01140000 	tsteq	r4, r0
    c8c8:	000000bd 	strheq	r0, [r0], -sp
    c8cc:	00000640 	andeq	r0, r0, r0, asr #12
    c8d0:	00048a15 	andeq	r8, r4, r5, lsl sl
    c8d4:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c8d8:	bd150000 	ldclt	0, cr0, [r5, #-0]
    c8dc:	15000000 	strne	r0, [r0, #-0]
    c8e0:	0000008a 	andeq	r0, r0, sl, lsl #1
    c8e4:	21041000 	mrscs	r1, (UNDEF: 4)
    c8e8:	14000006 	strne	r0, [r0], #-6
    c8ec:	00008a01 	andeq	r8, r0, r1, lsl #20
    c8f0:	00065b00 	andeq	r5, r6, r0, lsl #22
    c8f4:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c8f8:	2b150000 	blcs	54c900 <__ccfg+0x52c958>
    c8fc:	00000001 	andeq	r0, r0, r1
    c900:	06460410 			; <UNDEFINED> instruction: 0x06460410
    c904:	51090000 	mrspl	r0, (UNDEF: 9)
    c908:	71000000 	mrsvc	r0, (UNDEF: 0)
    c90c:	0a000006 	beq	c92c <__exidx_end+0x7014>
    c910:	00000091 	muleq	r0, r1, r0
    c914:	51090002 	tstpl	r9, r2
    c918:	81000000 	mrshi	r0, (UNDEF: 0)
    c91c:	0a000006 	beq	c93c <__exidx_end+0x7024>
    c920:	00000091 	muleq	r0, r1, r0
    c924:	81060000 	mrshi	r0, (UNDEF: 6)
    c928:	04000004 	streq	r0, [r0], #-4
    c92c:	281a0124 	ldmdacs	sl, {r2, r5, r8}
    c930:	19000003 	stmdbne	r0, {r0, r1}
    c934:	00000cdb 	ldrdeq	r0, [r0], -fp
    c938:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    c93c:	0006c708 	andeq	ip, r6, r8, lsl #14
    c940:	0ec21700 	cdpeq	7, 12, cr1, cr2, cr0, {0}
    c944:	2a040000 	bcs	10c94c <__ccfg+0xec9a4>
    c948:	06c71101 	strbeq	r1, [r7], r1, lsl #2
    c94c:	17000000 	strne	r0, [r0, -r0]
    c950:	00000bda 	ldrdeq	r0, [r0], -sl
    c954:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    c958:	0000008a 	andeq	r0, r0, sl, lsl #1
    c95c:	077e1704 	ldrbeq	r1, [lr, -r4, lsl #14]!
    c960:	2c040000 	stccs	0, cr0, [r4], {-0}
    c964:	06cd0b01 	strbeq	r0, [sp], r1, lsl #22
    c968:	00080000 	andeq	r0, r8, r0
    c96c:	068e0410 	pkhbteq	r0, lr, r0, lsl #8
    c970:	04100000 	ldreq	r0, [r0], #-0
    c974:	00000681 	andeq	r0, r0, r1, lsl #13
    c978:	0003ed19 	andeq	lr, r3, r9, lsl sp
    c97c:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    c980:	070c0801 	streq	r0, [ip, -r1, lsl #16]
    c984:	49170000 	ldmdbmi	r7, {}	; <UNPREDICTABLE>
    c988:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    c98c:	0c120145 	ldfeqs	f0, [r2], {69}	; 0x45
    c990:	00000007 	andeq	r0, r0, r7
    c994:	00083d17 	andeq	r3, r8, r7, lsl sp
    c998:	01460400 	cmpeq	r6, r0, lsl #8
    c99c:	00070c12 	andeq	r0, r7, r2, lsl ip
    c9a0:	fb170600 	blx	5ce1aa <__ccfg+0x5ae202>
    c9a4:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    c9a8:	64120147 	ldrvs	r0, [r2], #-327	; 0xfffffeb9
    c9ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    c9b0:	00640900 	rsbeq	r0, r4, r0, lsl #18
    c9b4:	071c0000 	ldreq	r0, [ip, -r0]
    c9b8:	910a0000 	mrsls	r0, (UNDEF: 10)
    c9bc:	02000000 	andeq	r0, r0, #0
    c9c0:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    c9c4:	31070285 	smlabbcc	r7, r5, r2, r0
    c9c8:	17000008 	strne	r0, [r0, -r8]
    c9cc:	00000e68 	andeq	r0, r0, r8, ror #28
    c9d0:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    c9d4:	00000091 	muleq	r0, r1, r0
    c9d8:	0ce91700 	stcleq	7, cr1, [r9]
    c9dc:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    c9e0:	05de1202 	ldrbeq	r1, [lr, #514]	; 0x202
    c9e4:	17040000 	strne	r0, [r4, -r0]
    c9e8:	0000044b 	andeq	r0, r0, fp, asr #8
    c9ec:	10028904 	andne	r8, r2, r4, lsl #18
    c9f0:	00000831 	andeq	r0, r0, r1, lsr r8
    c9f4:	0b4f1708 	bleq	13d261c <__ccfg+0x13b2674>
    c9f8:	8a040000 	bhi	10ca00 <__ccfg+0xeca58>
    c9fc:	01c11702 	biceq	r1, r1, r2, lsl #14
    ca00:	17240000 	strne	r0, [r4, -r0]!
    ca04:	000007f5 	strdeq	r0, [r0], -r5
    ca08:	0f028b04 	svceq	0x00028b04
    ca0c:	0000008a 	andeq	r0, r0, sl, lsl #1
    ca10:	0ebd1748 	cdpeq	7, 11, cr1, cr13, cr8, {2}
    ca14:	8c040000 	stchi	0, cr0, [r4], {-0}
    ca18:	00832c02 	addeq	r2, r3, r2, lsl #24
    ca1c:	17500000 	ldrbne	r0, [r0, -r0]
    ca20:	00000076 	andeq	r0, r0, r6, ror r0
    ca24:	1a028d04 	bne	afe3c <__ccfg+0x8fe94>
    ca28:	000006d3 	ldrdeq	r0, [r0], -r3
    ca2c:	06451758 			; <UNDEFINED> instruction: 0x06451758
    ca30:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    ca34:	011f1602 	tsteq	pc, r2, lsl #12
    ca38:	17680000 	strbne	r0, [r8, -r0]!
    ca3c:	00000cf6 	strdeq	r0, [r0], -r6
    ca40:	16028f04 	strne	r8, [r2], -r4, lsl #30
    ca44:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca48:	00681770 	rsbeq	r1, r8, r0, ror r7
    ca4c:	90040000 	andls	r0, r4, r0
    ca50:	011f1602 	tsteq	pc, r2, lsl #12
    ca54:	17780000 	ldrbne	r0, [r8, -r0]!
    ca58:	00000b76 	andeq	r0, r0, r6, ror fp
    ca5c:	10029104 	andne	r9, r2, r4, lsl #2
    ca60:	00000841 	andeq	r0, r0, r1, asr #16
    ca64:	04281780 	strteq	r1, [r8], #-1920	; 0xfffff880
    ca68:	92040000 	andls	r0, r4, #0
    ca6c:	08511002 	ldmdaeq	r1, {r1, ip}^
    ca70:	17880000 	strne	r0, [r8, r0]
    ca74:	00000c99 	muleq	r0, r9, ip
    ca78:	0f029304 	svceq	0x00029304
    ca7c:	0000008a 	andeq	r0, r0, sl, lsl #1
    ca80:	02b417a0 	adcseq	r1, r4, #160, 14	; 0x2800000
    ca84:	94040000 	strls	r0, [r4], #-0
    ca88:	011f1602 	tsteq	pc, r2, lsl #12
    ca8c:	17a40000 	strne	r0, [r4, r0]!
    ca90:	000006ab 	andeq	r0, r0, fp, lsr #13
    ca94:	16029504 	strne	r9, [r2], -r4, lsl #10
    ca98:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca9c:	05c717ac 	strbeq	r1, [r7, #1964]	; 0x7ac
    caa0:	96040000 	strls	r0, [r4], -r0
    caa4:	011f1602 	tsteq	pc, r2, lsl #12
    caa8:	17b40000 	ldrne	r0, [r4, r0]!
    caac:	00000856 	andeq	r0, r0, r6, asr r8
    cab0:	16029704 	strne	r9, [r2], -r4, lsl #14
    cab4:	0000011f 	andeq	r0, r0, pc, lsl r1
    cab8:	063417bc 			; <UNDEFINED> instruction: 0x063417bc
    cabc:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    cac0:	011f1602 	tsteq	pc, r2, lsl #12
    cac4:	17c40000 	strbne	r0, [r4, r0]
    cac8:	0000090e 	andeq	r0, r0, lr, lsl #18
    cacc:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    cad0:	0000008a 	andeq	r0, r0, sl, lsl #1
    cad4:	e40900cc 	str	r0, [r9], #-204	; 0xffffff34
    cad8:	41000005 	tstmi	r0, r5
    cadc:	0a000008 	beq	cb04 <__exidx_end+0x71ec>
    cae0:	00000091 	muleq	r0, r1, r0
    cae4:	e4090019 	str	r0, [r9], #-25	; 0xffffffe7
    cae8:	51000005 	tstpl	r0, r5
    caec:	0a000008 	beq	cb14 <__exidx_end+0x71fc>
    caf0:	00000091 	muleq	r0, r1, r0
    caf4:	e4090007 	str	r0, [r9], #-7
    caf8:	61000005 	tstvs	r0, r5
    cafc:	0a000008 	beq	cb24 <__exidx_end+0x720c>
    cb00:	00000091 	muleq	r0, r1, r0
    cb04:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    cb08:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    cb0c:	00000888 	andeq	r0, r0, r8, lsl #17
    cb10:	0003d317 	andeq	sp, r3, r7, lsl r3
    cb14:	02a10400 	adceq	r0, r1, #0, 8
    cb18:	0008881b 	andeq	r8, r8, fp, lsl r8
    cb1c:	10170000 	andsne	r0, r7, r0
    cb20:	0400000f 	streq	r0, [r0], #-15
    cb24:	981802a2 	ldmdals	r8, {r1, r5, r7, r9}
    cb28:	78000008 	stmdavc	r0, {r3}
    cb2c:	03220900 			; <UNDEFINED> instruction: 0x03220900
    cb30:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    cb34:	910a0000 	mrsls	r0, (UNDEF: 10)
    cb38:	1d000000 	stcne	0, cr0, [r0, #-0]
    cb3c:	00910900 	addseq	r0, r1, r0, lsl #18
    cb40:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    cb44:	910a0000 	mrsls	r0, (UNDEF: 10)
    cb48:	1d000000 	stcne	0, cr0, [r0, #-0]
    cb4c:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    cb50:	cd030283 	sfmgt	f0, 4, [r3, #-524]	; 0xfffffdf4
    cb54:	1c000008 	stcne	0, cr0, [r0], {8}
    cb58:	00000d5d 	andeq	r0, r0, sp, asr sp
    cb5c:	0b029a04 	bleq	b3374 <__ccfg+0x933cc>
    cb60:	0000071c 	andeq	r0, r0, ip, lsl r7
    cb64:	000b5e1c 	andeq	r5, fp, ip, lsl lr
    cb68:	02a30400 	adceq	r0, r3, #0, 8
    cb6c:	0008610b 	andeq	r6, r8, fp, lsl #2
    cb70:	e4090000 	str	r0, [r9], #-0
    cb74:	dd000005 	stcle	0, cr0, [r0, #-20]	; 0xffffffec
    cb78:	0a000008 	beq	cba0 <__exidx_end+0x7288>
    cb7c:	00000091 	muleq	r0, r1, r0
    cb80:	c81d0018 	ldmdagt	sp, {r3, r4}
    cb84:	0100000e 	tsteq	r0, lr
    cb88:	08dd0410 	ldmeq	sp, {r4, sl}^
    cb8c:	011e0000 	tsteq	lr, r0
    cb90:	000008f5 	strdeq	r0, [r0], -r5
    cb94:	00048a15 	andeq	r8, r4, r5, lsl sl
    cb98:	04100000 	ldreq	r0, [r0], #-0
    cb9c:	000008e9 	andeq	r0, r0, r9, ror #17
    cba0:	01ab0410 			; <UNDEFINED> instruction: 0x01ab0410
    cba4:	011e0000 	tsteq	lr, r0
    cba8:	0000090d 	andeq	r0, r0, sp, lsl #18
    cbac:	00008a15 	andeq	r8, r0, r5, lsl sl
    cbb0:	04100000 	ldreq	r0, [r0], #-0
    cbb4:	00000913 	andeq	r0, r0, r3, lsl r9
    cbb8:	09010410 	stmdbeq	r1, {r4, sl}
    cbbc:	81090000 	mrshi	r0, (UNDEF: 9)
    cbc0:	29000006 	stmdbcs	r0, {r1, r2}
    cbc4:	0a000009 	beq	cbf0 <__exidx_end+0x72d8>
    cbc8:	00000091 	muleq	r0, r1, r0
    cbcc:	ce1f0002 	cdpgt	0, 1, cr0, cr15, cr2, {0}
    cbd0:	0400000a 	streq	r0, [r0], #-10
    cbd4:	8a170333 	bhi	5cd8a8 <__ccfg+0x5ad900>
    cbd8:	01000004 	tsteq	r0, r4
    cbdc:	0ac71f01 	beq	ff1d47e8 <_estack+0xdf1cf7e8>
    cbe0:	34040000 	strcc	r0, [r4], #-0
    cbe4:	04901d03 	ldreq	r1, [r0], #3331	; 0xd03
    cbe8:	01010000 	mrseq	r0, (UNDEF: 1)
    cbec:	0024df03 	eoreq	sp, r4, r3, lsl #30
    cbf0:	123b0600 	eorsne	r0, fp, #0, 12
    cbf4:	0000006b 	andeq	r0, r0, fp, rrx
    cbf8:	4006080b 	andmi	r0, r6, fp, lsl #16
    cbfc:	00097709 	andeq	r7, r9, r9, lsl #14
    cc00:	1fe20c00 	svcne	0x00e20c00
    cc04:	41060000 	mrsmi	r0, (UNDEF: 6)
    cc08:	0009770d 	andeq	r7, r9, sp, lsl #14
    cc0c:	250c0000 	strcs	r0, [ip, #-0]
    cc10:	06000022 	streq	r0, [r0], -r2, lsr #32
    cc14:	09770d42 	ldmdbeq	r7!, {r1, r6, r8, sl, fp}^
    cc18:	00040000 	andeq	r0, r4, r0
    cc1c:	00450410 	subeq	r0, r5, r0, lsl r4
    cc20:	2a030000 	bcs	ccc28 <__ccfg+0xacc80>
    cc24:	06000027 	streq	r0, [r0], -r7, lsr #32
    cc28:	09530343 	ldmdbeq	r3, {r0, r1, r6, r8, r9}^
    cc2c:	a6030000 	strge	r0, [r3], -r0
    cc30:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cc34:	09952b3c 	ldmibeq	r5, {r2, r3, r4, r5, r8, r9, fp, sp}
    cc38:	450e0000 	strmi	r0, [lr, #-0]
    cc3c:	10000025 	andne	r0, r0, r5, lsr #32
    cc40:	f1156f07 			; <UNDEFINED> instruction: 0xf1156f07
    cc44:	0c000009 	stceq	0, cr0, [r0], {9}
    cc48:	00001f11 	andeq	r1, r0, r1, lsl pc
    cc4c:	580d7007 	stmdapl	sp, {r0, r1, r2, ip, sp, lr}
    cc50:	00000000 	andeq	r0, r0, r0
    cc54:	0007840c 	andeq	r8, r7, ip, lsl #8
    cc58:	0d710700 	ldcleq	7, cr0, [r1, #-0]
    cc5c:	00000058 	andeq	r0, r0, r8, asr r0
    cc60:	22840c02 	addcs	r0, r4, #512	; 0x200
    cc64:	74070000 	strvc	r0, [r7], #-0
    cc68:	000b2813 	andeq	r2, fp, r3, lsl r8
    cc6c:	130c0400 	movwne	r0, #50176	; 0xc400
    cc70:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cc74:	09470c75 	stmdbeq	r7, {r0, r2, r4, r5, r6, sl, fp}^
    cc78:	0c080000 	stceq	0, cr0, [r8], {-0}
    cc7c:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    cc80:	b4067d07 	strlt	r7, [r6], #-3335	; 0xfffff2f9
    cc84:	0c00000a 	stceq	0, cr0, [r0], {10}
    cc88:	0021fe0c 	eoreq	pc, r1, ip, lsl #28
    cc8c:	06810700 	streq	r0, [r1], r0, lsl #14
    cc90:	00000afe 	strdeq	r0, [r0], -lr
    cc94:	8703000d 	strhi	r0, [r3, -sp]
    cc98:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cc9c:	09fd2a3f 	ldmibeq	sp!, {r0, r1, r2, r3, r4, r5, r9, fp, sp}^
    cca0:	7a0e0000 	bvc	38cca8 <__ccfg+0x36cd00>
    cca4:	18000020 	stmdane	r0, {r5}
    cca8:	b415e007 	ldrlt	lr, [r5], #-7
    ccac:	0c00000a 	stceq	0, cr0, [r0], {10}
    ccb0:	00001f11 	andeq	r1, r0, r1, lsl pc
    ccb4:	580de107 	stmdapl	sp, {r0, r1, r2, r8, sp, lr, pc}
    ccb8:	00000000 	andeq	r0, r0, r0
    ccbc:	0007840c 	andeq	r8, r7, ip, lsl #8
    ccc0:	0de20700 	stcleq	7, cr0, [r2]
    ccc4:	00000058 	andeq	r0, r0, r8, asr r0
    ccc8:	22840c02 	addcs	r0, r4, #512	; 0x200
    cccc:	e5070000 	str	r0, [r7, #-0]
    ccd0:	000b2813 	andeq	r2, fp, r3, lsl r8
    ccd4:	130c0400 	movwne	r0, #50176	; 0xc400
    ccd8:	07000020 	streq	r0, [r0, -r0, lsr #32]
    ccdc:	09470ce6 	stmdbeq	r7, {r1, r2, r5, r6, r7, sl, fp}^
    cce0:	0c080000 	stceq	0, cr0, [r8], {-0}
    cce4:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    cce8:	3406ee07 	strcc	lr, [r6], #-3591	; 0xfffff1f9
    ccec:	0c00000b 	stceq	0, cr0, [r0], {11}
    ccf0:	0021fe0c 	eoreq	pc, r1, ip, lsl #28
    ccf4:	06f20700 	ldrbteq	r0, [r2], r0, lsl #14
    ccf8:	00000b7e 	andeq	r0, r0, lr, ror fp
    ccfc:	26500c0d 	ldrbcs	r0, [r0], -sp, lsl #24
    cd00:	f3070000 	vhadd.u8	d0, d7, d0
    cd04:	0000580d 	andeq	r5, r0, sp, lsl #16
    cd08:	a80c0e00 	stmdage	ip, {r9, sl, fp}
    cd0c:	07000023 	streq	r0, [r0, -r3, lsr #32]
    cd10:	00580df4 	ldrsheq	r0, [r8], #-212	; 0xffffff2c
    cd14:	0c100000 	ldceq	0, cr0, [r0], {-0}
    cd18:	000020ba 	strheq	r2, [r0], -sl
    cd1c:	a806fa07 	stmdage	r6, {r0, r1, r2, r9, fp, ip, sp, lr, pc}
    cd20:	1200000b 	andne	r0, r0, #11
    cd24:	0022640c 	eoreq	r6, r2, ip, lsl #8
    cd28:	0cfb0700 	ldcleq	7, cr0, [fp]
    cd2c:	00000045 	andeq	r0, r0, r5, asr #32
    cd30:	25b40c13 	ldrcs	r0, [r4, #3091]!	; 0xc13
    cd34:	fc070000 	stc2	0, cr0, [r7], {-0}
    cd38:	0000450c 	andeq	r4, r0, ip, lsl #10
    cd3c:	bd0c1400 	cfstrslt	mvf1, [ip, #-0]
    cd40:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cd44:	00450cfd 	strdeq	r0, [r5], #-205	; 0xffffff33
    cd48:	0c150000 	ldceq	0, cr0, [r5], {-0}
    cd4c:	000025c6 	andeq	r2, r0, r6, asr #11
    cd50:	580dfe07 	stmdapl	sp, {r0, r1, r2, r9, sl, fp, ip, sp, lr, pc}
    cd54:	16000000 	strne	r0, [r0], -r0
    cd58:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd5c:	0afe0476 	beq	fff8df3c <_estack+0xdff88f3c>
    cd60:	67200000 	strvs	r0, [r0, -r0]!
    cd64:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cd68:	00450f77 	subeq	r0, r5, r7, ror pc
    cd6c:	04010000 	streq	r0, [r1], #-0
    cd70:	05200004 	streq	r0, [r0, #-4]!
    cd74:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cd78:	00450f78 	subeq	r0, r5, r8, ror pc
    cd7c:	01010000 	mrseq	r0, (UNDEF: 1)
    cd80:	c5200003 	strgt	r0, [r0, #-3]!
    cd84:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cd88:	00450f7a 	subeq	r0, r5, sl, ror pc
    cd8c:	02010000 	andeq	r0, r1, #0
    cd90:	80200001 	eorhi	r0, r0, r1
    cd94:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cd98:	00450f7b 	subeq	r0, r5, fp, ror pc
    cd9c:	01010000 	mrseq	r0, (UNDEF: 1)
    cda0:	0b000000 	bleq	cda8 <__exidx_end+0x7490>
    cda4:	047e0701 	ldrbteq	r0, [lr], #-1793	; 0xfffff8ff
    cda8:	00000b28 	andeq	r0, r0, r8, lsr #22
    cdac:	0025e220 	eoreq	lr, r5, r0, lsr #4
    cdb0:	0f7f0700 	svceq	0x007f0700
    cdb4:	00000045 	andeq	r0, r0, r5, asr #32
    cdb8:	00040401 	andeq	r0, r4, r1, lsl #8
    cdbc:	00273620 	eoreq	r3, r7, r0, lsr #12
    cdc0:	0f800700 	svceq	0x00800700
    cdc4:	00000045 	andeq	r0, r0, r5, asr #32
    cdc8:	00000401 	andeq	r0, r0, r1, lsl #8
    cdcc:	89041000 	stmdbhi	r4, {ip}
    cdd0:	10000009 	andne	r0, r0, r9
    cdd4:	00006b04 	andeq	r6, r0, r4, lsl #22
    cdd8:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cddc:	0b7e04e7 	bleq	1f8e180 <__ccfg+0x1f6e1d8>
    cde0:	67200000 	strvs	r0, [r0, -r0]!
    cde4:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cde8:	00450fe8 	subeq	r0, r5, r8, ror #31
    cdec:	04010000 	streq	r0, [r1], #-0
    cdf0:	05200004 	streq	r0, [r0, #-4]!
    cdf4:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cdf8:	00450fe9 	subeq	r0, r5, r9, ror #31
    cdfc:	01010000 	mrseq	r0, (UNDEF: 1)
    ce00:	c5200003 	strgt	r0, [r0, #-3]!
    ce04:	07000021 	streq	r0, [r0, -r1, lsr #32]
    ce08:	00450feb 	subeq	r0, r5, fp, ror #31
    ce0c:	02010000 	andeq	r0, r1, #0
    ce10:	80200001 	eorhi	r0, r0, r1
    ce14:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    ce18:	00450fec 	subeq	r0, r5, ip, ror #31
    ce1c:	01010000 	mrseq	r0, (UNDEF: 1)
    ce20:	0b000000 	bleq	ce28 <__exidx_end+0x7510>
    ce24:	04ef0701 	strbteq	r0, [pc], #1793	; ce2c <__exidx_end+0x7514>
    ce28:	00000ba8 	andeq	r0, r0, r8, lsr #23
    ce2c:	0025e220 	eoreq	lr, r5, r0, lsr #4
    ce30:	0ff00700 	svceq	0x00f00700
    ce34:	00000045 	andeq	r0, r0, r5, asr #32
    ce38:	00040401 	andeq	r0, r4, r1, lsl #8
    ce3c:	00273620 	eoreq	r3, r7, r0, lsr #12
    ce40:	0ff10700 	svceq	0x00f10700
    ce44:	00000045 	andeq	r0, r0, r5, asr #32
    ce48:	00000401 	andeq	r0, r0, r1, lsl #8
    ce4c:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    ce50:	0bd204f5 	bleq	ff48e22c <_estack+0xdf48922c>
    ce54:	ef200000 	svc	0x00200000
    ce58:	07000020 	streq	r0, [r0, -r0, lsr #32]
    ce5c:	00450ff6 	strdeq	r0, [r5], #-246	; 0xffffff0a
    ce60:	01010000 	mrseq	r0, (UNDEF: 1)
    ce64:	50200007 	eorpl	r0, r0, r7
    ce68:	07000027 	streq	r0, [r0, -r7, lsr #32]
    ce6c:	00450ff8 	strdeq	r0, [r5], #-248	; 0xffffff08
    ce70:	06010000 	streq	r0, [r1], -r0
    ce74:	10000001 	andne	r0, r0, r1
    ce78:	00097d04 	andeq	r7, r9, r4, lsl #26
    ce7c:	26250300 	strtcs	r0, [r5], -r0, lsl #6
    ce80:	3d080000 	stccc	0, cr0, [r8, #-0]
    ce84:	000be42f 	andeq	lr, fp, pc, lsr #8
    ce88:	26370e00 	ldrtcs	r0, [r7], -r0, lsl #28
    ce8c:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    ce90:	0c741578 	cfldr64eq	mvdx1, [r4], #-480	; 0xfffffe20
    ce94:	110c0000 	mrsne	r0, (UNDEF: 12)
    ce98:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    ce9c:	00580d79 	subseq	r0, r8, r9, ror sp
    cea0:	0c000000 	stceq	0, cr0, [r0], {-0}
    cea4:	00000784 	andeq	r0, r0, r4, lsl #15
    cea8:	580d7a08 	stmdapl	sp, {r3, r9, fp, ip, sp, lr}
    ceac:	02000000 	andeq	r0, r0, #0
    ceb0:	0022840c 	eoreq	r8, r2, ip, lsl #8
    ceb4:	137d0800 	cmnne	sp, #0, 16
    ceb8:	00000b28 	andeq	r0, r0, r8, lsr #22
    cebc:	20130c04 	andscs	r0, r3, r4, lsl #24
    cec0:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    cec4:	0009470c 	andeq	r4, r9, ip, lsl #14
    cec8:	b40c0800 	strlt	r0, [ip], #-2048	; 0xfffff800
    cecc:	08000022 	stmdaeq	r0, {r1, r5}
    ced0:	0e670686 	cdpeq	6, 6, cr0, cr7, cr6, {4}
    ced4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ced8:	000021fe 	strdeq	r2, [r0], -lr
    cedc:	b1068a08 	tstlt	r6, r8, lsl #20
    cee0:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    cee4:	0020580c 	eoreq	r5, r0, ip, lsl #16
    cee8:	06930800 	ldreq	r0, [r3], r0, lsl #16
    ceec:	00000edb 	ldrdeq	r0, [r0], -fp
    cef0:	25db0c0e 	ldrbcs	r0, [fp, #3086]	; 0xc0e
    cef4:	94080000 	strls	r0, [r8], #-0
    cef8:	0000450c 	andeq	r4, r0, ip, lsl #10
    cefc:	3a0c0f00 	bcc	310b04 <__ccfg+0x2f0b5c>
    cf00:	08000023 	stmdaeq	r0, {r0, r1, r5}
    cf04:	006b0d95 	mlseq	fp, r5, sp, r0
    cf08:	0c100000 	ldceq	0, cr0, [r0], {-0}
    cf0c:	00001f3e 	andeq	r1, r0, lr, lsr pc
    cf10:	770d9608 	strvc	r9, [sp, -r8, lsl #12]
    cf14:	14000009 	strne	r0, [r0], #-9
    cf18:	24910300 	ldrcs	r0, [r1], #768	; 0x300
    cf1c:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    cf20:	000c802f 	andeq	r8, ip, pc, lsr #32
    cf24:	21890e00 	orrcs	r0, r9, r0, lsl #28
    cf28:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    cf2c:	0d5e159f 	cfldr64eq	mvdx1, [lr, #-636]	; 0xfffffd84
    cf30:	110c0000 	mrsne	r0, (UNDEF: 12)
    cf34:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    cf38:	00580da0 	subseq	r0, r8, r0, lsr #27
    cf3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    cf40:	00000784 	andeq	r0, r0, r4, lsl #15
    cf44:	580da108 	stmdapl	sp, {r3, r8, sp, pc}
    cf48:	02000000 	andeq	r0, r0, #0
    cf4c:	0022840c 	eoreq	r8, r2, ip, lsl #8
    cf50:	13a40800 			; <UNDEFINED> instruction: 0x13a40800
    cf54:	00000b28 	andeq	r0, r0, r8, lsr #22
    cf58:	20130c04 	andscs	r0, r3, r4, lsl #24
    cf5c:	a5080000 	strge	r0, [r8, #-0]
    cf60:	0009470c 	andeq	r4, r9, ip, lsl #14
    cf64:	b40c0800 	strlt	r0, [ip], #-2048	; 0xfffff800
    cf68:	08000022 	stmdaeq	r0, {r1, r5}
    cf6c:	0f1506ad 	svceq	0x001506ad
    cf70:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    cf74:	000021fe 	strdeq	r2, [r0], -lr
    cf78:	5f06b108 	svcpl	0x0006b108
    cf7c:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    cf80:	0020580c 	eoreq	r5, r0, ip, lsl #16
    cf84:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    cf88:	00000f89 	andeq	r0, r0, r9, lsl #31
    cf8c:	23ef0c0e 	mvncs	r0, #3584	; 0xe00
    cf90:	cd080000 	stcgt	0, cr0, [r8, #-0]
    cf94:	00101306 	andseq	r1, r0, r6, lsl #6
    cf98:	3a0c0f00 	bcc	310ba0 <__ccfg+0x2f0bf8>
    cf9c:	08000023 	stmdaeq	r0, {r0, r1, r5}
    cfa0:	006b0dce 	rsbeq	r0, fp, lr, asr #27
    cfa4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    cfa8:	0000213d 	andeq	r2, r0, sp, lsr r1
    cfac:	450ccf08 	strmi	ip, [ip, #-3848]	; 0xfffff0f8
    cfb0:	14000000 	strne	r0, [r0], #-0
    cfb4:	0024410c 	eoreq	r4, r4, ip, lsl #2
    cfb8:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    cfbc:	00000045 	andeq	r0, r0, r5, asr #32
    cfc0:	244a0c15 	strbcs	r0, [sl], #-3093	; 0xfffff3eb
    cfc4:	d2080000 	andle	r0, r8, #0
    cfc8:	0000450c 	andeq	r4, r0, ip, lsl #10
    cfcc:	9b0c1600 	blls	3127d4 <__ccfg+0x2f282c>
    cfd0:	08000021 	stmdaeq	r0, {r0, r5}
    cfd4:	108d06db 	ldrdne	r0, [sp], fp
    cfd8:	0c170000 	ldceq	0, cr0, [r7], {-0}
    cfdc:	0000268a 	andeq	r2, r0, sl, lsl #13
    cfe0:	470cdc08 	strmi	sp, [ip, -r8, lsl #24]
    cfe4:	18000009 	stmdane	r0, {r0, r3}
    cfe8:	0021cf0c 	eoreq	ip, r1, ip, lsl #30
    cfec:	11dd0800 	bicsne	r0, sp, r0, lsl #16
    cff0:	00000bd2 	ldrdeq	r0, [r0], -r2
    cff4:	1fa30c1c 	svcne	0x00a30c1c
    cff8:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    cffc:	0009770d 	andeq	r7, r9, sp, lsl #14
    d000:	03002000 	movweq	r2, #0
    d004:	00002472 	andeq	r2, r0, r2, ror r4
    d008:	6a3c4308 	bvs	f1dc30 <__ccfg+0xefdc88>
    d00c:	1900000d 	stmdbne	r0, {r0, r2, r3}
    d010:	00002453 	andeq	r2, r0, r3, asr r4
    d014:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    d018:	000e6715 	andeq	r6, lr, r5, lsl r7
    d01c:	1f111700 	svcne	0x00111700
    d020:	1b080000 	blne	20d028 <__ccfg+0x1ed080>
    d024:	00580d02 	subseq	r0, r8, r2, lsl #26
    d028:	17000000 	strne	r0, [r0, -r0]
    d02c:	00000784 	andeq	r0, r0, r4, lsl #15
    d030:	0d021d08 	stceq	13, cr1, [r2, #-32]	; 0xffffffe0
    d034:	00000058 	andeq	r0, r0, r8, asr r0
    d038:	22841702 	addcs	r1, r4, #524288	; 0x80000
    d03c:	20080000 	andcs	r0, r8, r0
    d040:	0b281302 	bleq	a11c50 <__ccfg+0x9f1ca8>
    d044:	17040000 	strne	r0, [r4, -r0]
    d048:	00002013 	andeq	r2, r0, r3, lsl r0
    d04c:	0c022108 	stfeqs	f2, [r2], {8}
    d050:	00000947 	andeq	r0, r0, r7, asr #18
    d054:	22b41708 	adcscs	r1, r4, #8, 14	; 0x200000
    d058:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    d05c:	10d70602 	sbcsne	r0, r7, r2, lsl #12
    d060:	170c0000 	strne	r0, [ip, -r0]
    d064:	000021fe 	strdeq	r2, [r0], -lr
    d068:	06022d08 	streq	r2, [r2], -r8, lsl #26
    d06c:	00001126 	andeq	r1, r0, r6, lsr #2
    d070:	1f06170d 	svcne	0x0006170d
    d074:	33080000 	movwcc	r0, #32768	; 0x8000
    d078:	11530602 	cmpne	r3, r2, lsl #12
    d07c:	170e0000 	strne	r0, [lr, -r0]
    d080:	0000226d 	andeq	r2, r0, sp, ror #4
    d084:	06023808 	streq	r3, [r2], -r8, lsl #16
    d088:	00001180 	andeq	r1, r0, r0, lsl #3
    d08c:	209c1710 	addscs	r1, ip, r0, lsl r7
    d090:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    d094:	00450c02 	subeq	r0, r5, r2, lsl #24
    d098:	17140000 	ldrne	r0, [r4, -r0]
    d09c:	00002330 	andeq	r2, r0, r0, lsr r3
    d0a0:	06024108 	streq	r4, [r2], -r8, lsl #2
    d0a4:	000011ad 	andeq	r1, r0, sp, lsr #3
    d0a8:	20081715 	andcs	r1, r8, r5, lsl r7
    d0ac:	55080000 	strpl	r0, [r8, #-0]
    d0b0:	11da0602 	bicsne	r0, sl, r2, lsl #12
    d0b4:	17160000 	ldrne	r0, [r6, -r0]
    d0b8:	0000147b 	andeq	r1, r0, fp, ror r4
    d0bc:	06026808 	streq	r6, [r2], -r8, lsl #16
    d0c0:	0000123a 	andeq	r1, r0, sl, lsr r2
    d0c4:	20941718 	addscs	r1, r4, r8, lsl r7
    d0c8:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    d0cc:	00580d02 	subseq	r0, r8, r2, lsl #26
    d0d0:	171a0000 	ldrne	r0, [sl, -r0]
    d0d4:	000024d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    d0d8:	0e026a08 	vmlaeq.f32	s12, s4, s16
    d0dc:	00000b2e 	andeq	r0, r0, lr, lsr #22
    d0e0:	1f43171c 	svcne	0x0043171c
    d0e4:	6c080000 	stcvs	0, cr0, [r8], {-0}
    d0e8:	00580d02 	subseq	r0, r8, r2, lsl #26
    d0ec:	17200000 	strne	r0, [r0, -r0]!
    d0f0:	0000228c 	andeq	r2, r0, ip, lsl #5
    d0f4:	0c027008 	stceq	0, cr7, [r2], {8}
    d0f8:	00000024 	andeq	r0, r0, r4, lsr #32
    d0fc:	23ca1722 	biccs	r1, sl, #8912896	; 0x880000
    d100:	73080000 	movwvc	r0, #32768	; 0x8000
    d104:	00450c02 	subeq	r0, r5, r2, lsl #24
    d108:	00240000 	eoreq	r0, r4, r0
    d10c:	7f08010b 	svcvc	0x0008010b
    d110:	000eb104 	andeq	fp, lr, r4, lsl #2
    d114:	27672000 	strbcs	r2, [r7, -r0]!
    d118:	80080000 	andhi	r0, r8, r0
    d11c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d120:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d124:	21052000 	mrscs	r2, (UNDEF: 5)
    d128:	81080000 	mrshi	r0, (UNDEF: 8)
    d12c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d130:	03010100 	movweq	r0, #4352	; 0x1100
    d134:	21c52000 	biccs	r2, r5, r0
    d138:	83080000 	movwhi	r0, #32768	; 0x8000
    d13c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d140:	01020100 	mrseq	r0, (UNDEF: 18)
    d144:	1f802000 	svcne	0x00802000
    d148:	84080000 	strhi	r0, [r8], #-0
    d14c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d150:	00010100 	andeq	r0, r1, r0, lsl #2
    d154:	010b0000 	mrseq	r0, (UNDEF: 11)
    d158:	db048708 	blle	12ed80 <__ccfg+0x10edd8>
    d15c:	2000000e 	andcs	r0, r0, lr
    d160:	000025e2 	andeq	r2, r0, r2, ror #11
    d164:	450f8808 	strmi	r8, [pc, #-2056]	; c964 <__exidx_end+0x704c>
    d168:	01000000 	mrseq	r0, (UNDEF: 0)
    d16c:	20000404 	andcs	r0, r0, r4, lsl #8
    d170:	00002736 	andeq	r2, r0, r6, lsr r7
    d174:	450f8908 	strmi	r8, [pc, #-2312]	; c874 <__exidx_end+0x6f5c>
    d178:	01000000 	mrseq	r0, (UNDEF: 0)
    d17c:	00000004 	andeq	r0, r0, r4
    d180:	8b08010b 	blhi	20d5b4 <__ccfg+0x1ed60c>
    d184:	000f1504 	andeq	r1, pc, r4, lsl #10
    d188:	26752000 	ldrbtcs	r2, [r5], -r0
    d18c:	8c080000 	stchi	0, cr0, [r8], {-0}
    d190:	0000450f 	andeq	r4, r0, pc, lsl #10
    d194:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d198:	26fd2000 	ldrbtcs	r2, [sp], r0
    d19c:	8f080000 	svchi	0x00080000
    d1a0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1a4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d1a8:	1f362000 	svcne	0x00362000
    d1ac:	91080000 	mrsls	r0, (UNDEF: 8)
    d1b0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1b4:	03010100 	movweq	r0, #4352	; 0x1100
    d1b8:	010b0000 	mrseq	r0, (UNDEF: 11)
    d1bc:	5f04a608 	svcpl	0x0004a608
    d1c0:	2000000f 	andcs	r0, r0, pc
    d1c4:	00002767 	andeq	r2, r0, r7, ror #14
    d1c8:	450fa708 	strmi	sl, [pc, #-1800]	; cac8 <__exidx_end+0x71b0>
    d1cc:	01000000 	mrseq	r0, (UNDEF: 0)
    d1d0:	20000404 	andcs	r0, r0, r4, lsl #8
    d1d4:	00002105 	andeq	r2, r0, r5, lsl #2
    d1d8:	450fa808 	strmi	sl, [pc, #-2056]	; c9d8 <__exidx_end+0x70c0>
    d1dc:	01000000 	mrseq	r0, (UNDEF: 0)
    d1e0:	20000301 	andcs	r0, r0, r1, lsl #6
    d1e4:	000021c5 	andeq	r2, r0, r5, asr #3
    d1e8:	450faa08 	strmi	sl, [pc, #-2568]	; c7e8 <__exidx_end+0x6ed0>
    d1ec:	01000000 	mrseq	r0, (UNDEF: 0)
    d1f0:	20000102 	andcs	r0, r0, r2, lsl #2
    d1f4:	00001f80 	andeq	r1, r0, r0, lsl #31
    d1f8:	450fab08 	strmi	sl, [pc, #-2824]	; c6f8 <__exidx_end+0x6de0>
    d1fc:	01000000 	mrseq	r0, (UNDEF: 0)
    d200:	00000001 	andeq	r0, r0, r1
    d204:	ae08010b 	adfgee	f0, f0, #3.0
    d208:	000f8904 	andeq	r8, pc, r4, lsl #18
    d20c:	25e22000 	strbcs	r2, [r2, #0]!
    d210:	af080000 	svcge	0x00080000
    d214:	0000450f 	andeq	r4, r0, pc, lsl #10
    d218:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d21c:	27362000 	ldrcs	r2, [r6, -r0]!
    d220:	b0080000 	andlt	r0, r8, r0
    d224:	0000450f 	andeq	r4, r0, pc, lsl #10
    d228:	00040100 	andeq	r0, r4, r0, lsl #2
    d22c:	010b0000 	mrseq	r0, (UNDEF: 11)
    d230:	1304b208 	movwne	fp, #16904	; 0x4208
    d234:	20000010 	andcs	r0, r0, r0, lsl r0
    d238:	00002675 	andeq	r2, r0, r5, ror r6
    d23c:	450fb308 	strmi	fp, [pc, #-776]	; cf3c <__exidx_end+0x7624>
    d240:	01000000 	mrseq	r0, (UNDEF: 0)
    d244:	20000701 	andcs	r0, r0, r1, lsl #14
    d248:	00001fab 	andeq	r1, r0, fp, lsr #31
    d24c:	450fb508 	strmi	fp, [pc, #-1288]	; cd4c <__exidx_end+0x7434>
    d250:	01000000 	mrseq	r0, (UNDEF: 0)
    d254:	20000601 	andcs	r0, r0, r1, lsl #12
    d258:	00002553 	andeq	r2, r0, r3, asr r5
    d25c:	450fb708 	strmi	fp, [pc, #-1800]	; cb5c <__exidx_end+0x7244>
    d260:	01000000 	mrseq	r0, (UNDEF: 0)
    d264:	20000501 	andcs	r0, r0, r1, lsl #10
    d268:	000026fd 	strdeq	r2, [r0], -sp
    d26c:	450fb908 	strmi	fp, [pc, #-2312]	; c96c <__exidx_end+0x7054>
    d270:	01000000 	mrseq	r0, (UNDEF: 0)
    d274:	20000401 	andcs	r0, r0, r1, lsl #8
    d278:	00001f36 	andeq	r1, r0, r6, lsr pc
    d27c:	450fbb08 	strmi	fp, [pc, #-2824]	; c77c <__exidx_end+0x6e64>
    d280:	01000000 	mrseq	r0, (UNDEF: 0)
    d284:	20000301 	andcs	r0, r0, r1, lsl #6
    d288:	00002692 	muleq	r0, r2, r6
    d28c:	450fbd08 	strmi	fp, [pc, #-3336]	; c58c <__exidx_end+0x6c74>
    d290:	01000000 	mrseq	r0, (UNDEF: 0)
    d294:	20000201 	andcs	r0, r0, r1, lsl #4
    d298:	000021d6 	ldrdeq	r2, [r0], -r6
    d29c:	450fbf08 	strmi	fp, [pc, #-3848]	; c39c <__exidx_end+0x6a84>
    d2a0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2a4:	20000101 	andcs	r0, r0, r1, lsl #2
    d2a8:	0000255e 	andeq	r2, r0, lr, asr r5
    d2ac:	450fc108 	strmi	ip, [pc, #-264]	; d1ac <__exidx_end+0x7894>
    d2b0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2b4:	00000001 	andeq	r0, r0, r1
    d2b8:	c408010b 	strgt	r0, [r8], #-267	; 0xfffffef5
    d2bc:	00108d04 	andseq	r8, r0, r4, lsl #26
    d2c0:	22942000 	addscs	r2, r4, #0
    d2c4:	c5080000 	strgt	r0, [r8, #-0]
    d2c8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d2d0:	20cd2000 	sbccs	r2, sp, r0
    d2d4:	c6080000 	strgt	r0, [r8], -r0
    d2d8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2dc:	06010100 	streq	r0, [r1], -r0, lsl #2
    d2e0:	22082000 	andcs	r2, r8, #0
    d2e4:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    d2e8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2ec:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d2f0:	21712000 	cmncs	r1, r0
    d2f4:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    d2f8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2fc:	03010100 	movweq	r0, #4352	; 0x1100
    d300:	24e72000 	strbtcs	r2, [r7], #0
    d304:	ca080000 	bgt	20d30c <__ccfg+0x1ed364>
    d308:	0000450f 	andeq	r4, r0, pc, lsl #10
    d30c:	02010100 	andeq	r0, r1, #0, 2
    d310:	201d2000 	andscs	r2, sp, r0
    d314:	cb080000 	blgt	20d31c <__ccfg+0x1ed374>
    d318:	0000450f 	andeq	r4, r0, pc, lsl #10
    d31c:	01010100 	mrseq	r0, (UNDEF: 17)
    d320:	1f1b2000 	svcne	0x001b2000
    d324:	cc080000 	stcgt	0, cr0, [r8], {-0}
    d328:	0000450f 	andeq	r4, r0, pc, lsl #10
    d32c:	00010100 	andeq	r0, r1, r0, lsl #2
    d330:	010b0000 	mrseq	r0, (UNDEF: 11)
    d334:	d704d408 	strle	sp, [r4, -r8, lsl #8]
    d338:	20000010 	andcs	r0, r0, r0, lsl r0
    d33c:	00002767 	andeq	r2, r0, r7, ror #14
    d340:	450fd508 	strmi	sp, [pc, #-1288]	; ce40 <__exidx_end+0x7528>
    d344:	01000000 	mrseq	r0, (UNDEF: 0)
    d348:	20000404 	andcs	r0, r0, r4, lsl #8
    d34c:	00002105 	andeq	r2, r0, r5, lsl #2
    d350:	450fd608 	strmi	sp, [pc, #-1544]	; cd50 <__exidx_end+0x7438>
    d354:	01000000 	mrseq	r0, (UNDEF: 0)
    d358:	20000301 	andcs	r0, r0, r1, lsl #6
    d35c:	000021c5 	andeq	r2, r0, r5, asr #3
    d360:	450fd808 	strmi	sp, [pc, #-2056]	; cb60 <__exidx_end+0x7248>
    d364:	01000000 	mrseq	r0, (UNDEF: 0)
    d368:	20000102 	andcs	r0, r0, r2, lsl #2
    d36c:	00001f80 	andeq	r1, r0, r0, lsl #31
    d370:	450fd908 	strmi	sp, [pc, #-2312]	; ca70 <__exidx_end+0x7158>
    d374:	01000000 	mrseq	r0, (UNDEF: 0)
    d378:	00000001 	andeq	r0, r0, r1
    d37c:	2208011a 	andcs	r0, r8, #-2147483642	; 0x80000006
    d380:	11260402 			; <UNDEFINED> instruction: 0x11260402
    d384:	67210000 	strvs	r0, [r1, -r0]!
    d388:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d38c:	450f0223 	strmi	r0, [pc, #-547]	; d171 <__exidx_end+0x7859>
    d390:	01000000 	mrseq	r0, (UNDEF: 0)
    d394:	21000404 	tstcs	r0, r4, lsl #8
    d398:	00002105 	andeq	r2, r0, r5, lsl #2
    d39c:	0f022408 	svceq	0x00022408
    d3a0:	00000045 	andeq	r0, r0, r5, asr #32
    d3a4:	00030101 	andeq	r0, r3, r1, lsl #2
    d3a8:	0021c521 	eoreq	ip, r1, r1, lsr #10
    d3ac:	02260800 	eoreq	r0, r6, #0, 16
    d3b0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d3b4:	01020100 	mrseq	r0, (UNDEF: 18)
    d3b8:	1f802100 	svcne	0x00802100
    d3bc:	27080000 	strcs	r0, [r8, -r0]
    d3c0:	00450f02 	subeq	r0, r5, r2, lsl #30
    d3c4:	01010000 	mrseq	r0, (UNDEF: 1)
    d3c8:	1a000000 	bne	d3d0 <__exidx_end+0x7ab8>
    d3cc:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    d3d0:	00115304 	andseq	r5, r1, r4, lsl #6
    d3d4:	25e22100 	strbcs	r2, [r2, #256]!	; 0x100
    d3d8:	2b080000 	blcs	20d3e0 <__ccfg+0x1ed438>
    d3dc:	00450f02 	subeq	r0, r5, r2, lsl #30
    d3e0:	04010000 	streq	r0, [r1], #-0
    d3e4:	36210004 	strtcc	r0, [r1], -r4
    d3e8:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d3ec:	450f022c 	strmi	r0, [pc, #-556]	; d1c8 <__exidx_end+0x78b0>
    d3f0:	01000000 	mrseq	r0, (UNDEF: 0)
    d3f4:	00000004 	andeq	r0, r0, r4
    d3f8:	2e08021a 	mcrcs	2, 0, r0, cr8, cr10, {0}
    d3fc:	11800402 	orrne	r0, r0, r2, lsl #8
    d400:	1d210000 	stcne	0, cr0, [r1, #-0]
    d404:	08000022 	stmdaeq	r0, {r1, r5}
    d408:	5810022f 	ldmdapl	r0, {r0, r1, r2, r3, r5, r9}
    d40c:	02000000 	andeq	r0, r0, #0
    d410:	21000d03 	tstcs	r0, r3, lsl #26
    d414:	00002719 	andeq	r2, r0, r9, lsl r7
    d418:	10023208 	andne	r3, r2, r8, lsl #4
    d41c:	00000058 	andeq	r0, r0, r8, asr r0
    d420:	00000d02 	andeq	r0, r0, r2, lsl #26
    d424:	08041a00 	stmdaeq	r4, {r9, fp, ip}
    d428:	ad040234 	sfmge	f0, 4, [r4, #-208]	; 0xffffff30
    d42c:	21000011 	tstcs	r0, r1, lsl r0
    d430:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    d434:	10023508 	andne	r3, r2, r8, lsl #10
    d438:	0000006b 	andeq	r0, r0, fp, rrx
    d43c:	001c0404 	andseq	r0, ip, r4, lsl #8
    d440:	0024c221 	eoreq	ip, r4, r1, lsr #4
    d444:	02370800 	eorseq	r0, r7, #0, 16
    d448:	00006b10 	andeq	r6, r0, r0, lsl fp
    d44c:	03150400 	tsteq	r5, #0, 8
    d450:	011a0000 	tsteq	sl, r0
    d454:	04023a08 	streq	r3, [r2], #-2568	; 0xfffff5f8
    d458:	000011da 	ldrdeq	r1, [r0], -sl
    d45c:	00260e21 	eoreq	r0, r6, r1, lsr #28
    d460:	023b0800 	eorseq	r0, fp, #0, 16
    d464:	0000450f 	andeq	r4, r0, pc, lsl #10
    d468:	02060100 	andeq	r0, r6, #0, 2
    d46c:	1fd82100 	svcne	0x00d82100
    d470:	3d080000 	stccc	0, cr0, [r8, #-0]
    d474:	00450f02 	subeq	r0, r5, r2, lsl #30
    d478:	02010000 	andeq	r0, r1, #0
    d47c:	1a000000 	bne	d484 <__exidx_end+0x7b6c>
    d480:	02420802 	subeq	r0, r2, #131072	; 0x20000
    d484:	00123a04 	andseq	r3, r2, r4, lsl #20
    d488:	23bb2100 			; <UNDEFINED> instruction: 0x23bb2100
    d48c:	43080000 	movwmi	r0, #32768	; 0x8000
    d490:	00581002 	subseq	r1, r8, r2
    d494:	06020000 	streq	r0, [r2], -r0
    d498:	5721000a 	strpl	r0, [r1, -sl]!
    d49c:	08000022 	stmdaeq	r0, {r1, r5}
    d4a0:	58100244 	ldmdapl	r0, {r2, r6, r9}
    d4a4:	02000000 	andeq	r0, r0, #0
    d4a8:	21000901 	tstcs	r0, r1, lsl #18
    d4ac:	00002423 	andeq	r2, r0, r3, lsr #8
    d4b0:	10024608 	andne	r4, r2, r8, lsl #12
    d4b4:	00000058 	andeq	r0, r0, r8, asr r0
    d4b8:	00080102 	andeq	r0, r8, r2, lsl #2
    d4bc:	001fc021 	andseq	ip, pc, r1, lsr #32
    d4c0:	02480800 	subeq	r0, r8, #0, 16
    d4c4:	00005810 	andeq	r5, r0, r0, lsl r8
    d4c8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    d4cc:	1f632100 	svcne	0x00632100
    d4d0:	4d080000 	stcmi	0, cr0, [r8, #-0]
    d4d4:	00581002 	subseq	r1, r8, r2
    d4d8:	03020000 	movweq	r0, #8192	; 0x2000
    d4dc:	1a000000 	bne	d4e4 <__exidx_end+0x7bcc>
    d4e0:	02560802 	subseq	r0, r6, #131072	; 0x20000
    d4e4:	00128904 	andseq	r8, r2, r4, lsl #18
    d4e8:	21b82100 			; <UNDEFINED> instruction: 0x21b82100
    d4ec:	57080000 	strpl	r0, [r8, -r0]
    d4f0:	00581002 	subseq	r1, r8, r2
    d4f4:	03020000 	movweq	r0, #8192	; 0x2000
    d4f8:	5721000d 	strpl	r0, [r1, -sp]!
    d4fc:	08000021 	stmdaeq	r0, {r0, r5}
    d500:	5810025d 	ldmdapl	r0, {r0, r2, r3, r4, r6, r9}
    d504:	02000000 	andeq	r0, r0, #0
    d508:	21000c01 	tstcs	r0, r1, lsl #24
    d50c:	000020f7 	strdeq	r2, [r0], -r7
    d510:	10025f08 	andne	r5, r2, r8, lsl #30
    d514:	00000058 	andeq	r0, r0, r8, asr r0
    d518:	00060602 	andeq	r0, r6, r2, lsl #12
    d51c:	0023f621 	eoreq	pc, r3, r1, lsr #12
    d520:	02660800 	rsbeq	r0, r6, #0, 16
    d524:	00005810 	andeq	r5, r0, r0, lsl r8
    d528:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    d52c:	77090000 	strvc	r0, [r9, -r0]
    d530:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    d534:	0a000012 	beq	d584 <__exidx_end+0x7c6c>
    d538:	00000091 	muleq	r0, r1, r0
    d53c:	890400a2 	stmdbhi	r4, {r1, r5, r7}
    d540:	22000012 	andcs	r0, r0, #18
    d544:	000022c1 	andeq	r2, r0, r1, asr #5
    d548:	99104909 	ldmdbls	r0, {r0, r3, r8, fp, lr}
    d54c:	8c000012 	stchi	0, cr0, [r0], {18}
    d550:	0004ad02 	andeq	sl, r4, r2, lsl #26
    d554:	00044921 	andeq	r4, r4, r1, lsr #18
    d558:	00047d21 	andeq	r7, r4, r1, lsr #26
    d55c:	00048121 	andeq	r8, r4, r1, lsr #2
    d560:	00051121 	andeq	r1, r5, r1, lsr #2
    d564:	00059121 	andeq	r9, r5, r1, lsr #2
    d568:	00064121 	andeq	r4, r6, r1, lsr #2
    d56c:	10b5f821 	adcsne	pc, r5, r1, lsr #16
    d570:	0eb5f847 	cdpeq	8, 11, cr15, cr5, cr7, {2}
    d574:	01210046 			; <UNDEFINED> instruction: 0x01210046
    d578:	3004ad25 	andcc	sl, r4, r5, lsr #26
    d57c:	03480a47 	movteq	r0, #35399	; 0x8a47
    d580:	0ff00078 	svceq	0x00f00078
    d584:	0b079bf8 	bleq	1f456c <__ccfg+0x1d45c4>
    d588:	204c12d0 	ldrdcs	r1, [ip], #-32	; 0xffffffe0
    d58c:	0728ff78 			; <UNDEFINED> instruction: 0x0728ff78
    d590:	2121ffd0 	ldrdcs	pc, [r1, -r0]!
    d594:	0f490e70 	svceq	0x00490e70
    d598:	20022424 	andcs	r2, r2, r4, lsr #8
    d59c:	c8316043 	ldmdagt	r1!, {r0, r1, r6, sp, lr}
    d5a0:	f8bdf882 			; <UNDEFINED> instruction: 0xf8bdf882
    d5a4:	004801b5 	strheq	r0, [r8], #-21	; 0xffffffeb
    d5a8:	00026b47 	andeq	r6, r2, r7, asr #22
    d5ac:	004ce521 	subeq	lr, ip, r1, lsr #10
    d5b0:	01480900 	cmpeq	r8, r0, lsl #18
    d5b4:	004808e0 	subeq	r0, r8, r0, ror #17
    d5b8:	054c060c 	strbeq	r0, [ip, #-1548]	; 0xfffff9f4
    d5bc:	ff782249 			; <UNDEFINED> instruction: 0xff782249
    d5c0:	cad1012a 	bgt	ff44da70 <_estack+0xdf448a70>
    d5c4:	6070227a 	rsbsvs	r2, r0, sl, ror r2
    d5c8:	7082c831 	addvc	ip, r2, r1, lsr r8
    d5cc:	001c8046 	andseq	r8, ip, r6, asr #32
    d5d0:	08620047 	stmdaeq	r2!, {r0, r1, r2, r6}^
    d5d4:	0006a440 	andeq	sl, r6, r0, asr #8
    d5d8:	080f0721 	stmdaeq	pc, {r0, r5, r8, r9, sl}	; <UNPREDICTABLE>
    d5dc:	08b4f008 	ldmeq	r4!, {r3, ip, sp, lr, pc}
    d5e0:	03b57047 			; <UNDEFINED> instruction: 0x03b57047
    d5e4:	01461546 	cmpeq	r6, r6, asr #10
    d5e8:	00d00629 	sbcseq	r0, r0, r9, lsr #12
    d5ec:	11d00629 	bicsne	r0, r0, r9, lsr #12
    d5f0:	ff46284a 			; <UNDEFINED> instruction: 0xff46284a
    d5f4:	70ffbbf7 	ldrshtvc	fp, [pc], #183
    d5f8:	00480fbd 	strheq	r0, [r8], #-253	; 0xffffff03
    d5fc:	05480fe0 	strbeq	r0, [r8, #-4064]	; 0xfffff020
    d600:	03428324 	movteq	r8, #8996	; 0x2324
    d604:	640840d8 	strvs	r4, [r8], #-216	; 0xffffff28
    d608:	f92c001e 			; <UNDEFINED> instruction: 0xf92c001e
    d60c:	0140e3dc 	ldrdeq	lr, [r0, #-60]	; 0xffffffc4
    d610:	18034020 	stmdane	r3, {r5, lr}
    d614:	010b8218 	tsteq	fp, r8, lsl r2
    d618:	06d00729 	ldrbeq	r0, [r0], r9, lsr #14
    d61c:	80230049 	eorhi	r0, r3, r9, asr #32
    d620:	ff462831 			; <UNDEFINED> instruction: 0xff462831
    d624:	e0ffa5f7 	ldrsht	sl, [pc], #87
    d628:	02bd70b2 	adcseq	r7, sp, #178	; 0xb2
    d62c:	6c4b0449 	cfstrdvs	mvd0, [fp], {73}	; 0x49
    d630:	00e7f631 	rsceq	pc, r7, r1, lsr r6	; <UNPREDICTABLE>
    d634:	005c8300 	subseq	r8, ip, r0, lsl #6
    d638:	86bca000 	ldrthi	sl, [ip], r0
    d63c:	0d830023 	stceq	0, cr0, [r3, #140]	; 0x8c
    d640:	00067423 	andeq	r7, r6, r3, lsr #8
    d644:	1ab5f821 	bne	fed8b6d0 <_estack+0xded866d0>
    d648:	7146054e 	cmpvc	r6, lr, asr #10
    d64c:	cc48196b 	mcrrgt	9, 6, r1, r8, cr11	; <UNPREDICTABLE>
    d650:	0001e409 	andeq	lr, r1, r9, lsl #8
    d654:	18d0112d 	ldmne	r0, {r0, r2, r3, r5, r8, ip}^
    d658:	02780949 	rsbseq	r0, r8, #1196032	; 0x124000
    d65c:	00d00f29 	sbcseq	r0, r0, r9, lsr #30
    d660:	7243047b 	subvc	r0, r3, #2063597568	; 0x7b000000
    d664:	152001b6 	strne	r0, [r0, #-438]!	; 0xfffffe4a
    d668:	b802404f 	stmdalt	r2, {r0, r1, r2, r3, r6, lr}
    d66c:	20481147 	subcs	r1, r8, r7, asr #2
    d670:	c1880038 	orrgt	r0, r8, r8, lsr r0
    d674:	0407c909 	streq	ip, [r7], #-2313	; 0xfffff6f7
    d678:	c0e016d0 	ldrdgt	r1, [r0], #96	; 0x60	; <UNPREDICTABLE>
    d67c:	40e7f07a 	rscmi	pc, r7, sl, ror r0	; <UNPREDICTABLE>
    d680:	0fe7ee7b 	svceq	0x00e7ee7b
    d684:	cc637449 	cfstrdgt	mvd7, [r3], #-292	; 0xfffffedc
    d688:	c00a4061 	andgt	r4, sl, r1, rrx
    d68c:	01d00c07 	bicseq	r0, r0, r7, lsl #24
    d690:	31038020 	tstcc	r3, r0, lsr #32
    d694:	012d006b 			; <UNDEFINED> instruction: 0x012d006b
    d698:	004301d0 	ldrdeq	r0, [r3], #-16
    d69c:	084381e0 	stmdaeq	r3, {r5, r6, r7, r8, pc}^
    d6a0:	07633146 	strbeq	r3, [r3, -r6, asr #2]!
    d6a4:	48394049 	ldmdami	r9!, {r0, r3, r6, lr}
    d6a8:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    d6ac:	f8b66247 			; <UNDEFINED> instruction: 0xf8b66247
    d6b0:	000280bd 	strheq	r8, [r2], -sp
    d6b4:	00008821 	andeq	r8, r0, r1, lsr #16
    d6b8:	00029b21 	andeq	r9, r2, r1, lsr #22
    d6bc:	003f7b21 	eorseq	r7, pc, r1, lsr #22
    d6c0:	04404000 	strbeq	r4, [r0], #-0
    d6c4:	22b51040 	adcscs	r1, r5, #64	; 0x40
    d6c8:	5121004a 			; <UNDEFINED> instruction: 0x5121004a
    d6cc:	89492161 	stmdbhi	r9, {r0, r5, r6, r8, sp}^
    d6d0:	0900c968 	stmdbeq	r0, {r3, r5, r6, r8, fp, lr, pc}
    d6d4:	204921d4 	ldrdcs	r2, [r9], #-20	; 0xffffffec
    d6d8:	9805ca4b 	stmdals	r5, {r0, r1, r3, r6, r9, fp, lr, pc}
    d6dc:	016b4b42 	cmneq	fp, r2, asr #22
    d6e0:	004313d8 	ldrdeq	r1, [r3], #-56	; 0xffffffc8
    d6e4:	4b4393e0 	blmi	10f266c <__ccfg+0x10d26c4>
    d6e8:	ff491d63 			; <UNDEFINED> instruction: 0xff491d63
    d6ec:	10ff77f7 	ldrshtne	r7, [pc], #119
    d6f0:	1ab538bd 	bne	fed5b9ec <_estack+0xded569ec>
    d6f4:	007f284d 	rsbseq	r2, pc, sp, asr #16
    d6f8:	1ad12728 	bne	ff4573a0 <_estack+0xdf4523a0>
    d6fc:	c0880048 	addgt	r0, r8, r8, asr #32
    d700:	2207c009 	andcs	ip, r7, #9
    d704:	604c12d1 	ldrdvs	r1, [ip], #-33	; 0xffffffdf
    d708:	1e280069 	cdpne	0, 2, cr0, cr8, cr9, {3}
    d70c:	004668d1 	ldrdeq	r6, [r6], #-129	; 0xffffff7f
    d710:	68f845f0 	ldmvs	r8!, {r4, r5, r6, r7, r8, sl, lr}^
    d714:	01780046 	cmneq	r8, r6, asr #32
    d718:	68d11728 	ldmvs	r1, {r3, r5, r8, r9, sl, ip}^
    d71c:	10784046 	rsbsne	r4, r8, r6, asr #32
    d720:	08d21328 	ldmeq	r2, {r3, r5, r8, r9, ip}^
    d724:	68616020 	stmdavs	r1!, {r5, sp, lr}^
    d728:	4009406a 	andmi	r4, r9, sl, rrx
    d72c:	0e602001 	cdpeq	0, 6, cr2, cr0, cr1, {0}
    d730:	d121004a 			; <UNDEFINED> instruction: 0xd121004a
    d734:	024a0d62 	subeq	r0, sl, #6272	; 0x1880
    d738:	01601121 	cmneq	r0, r1, lsr #2
    d73c:	20430821 	subcs	r0, r3, r1, lsr #16
    d740:	08210360 	stmdaeq	r1!, {r5, r6, r8, r9}
    d744:	20626843 	rsbcs	r6, r2, r3, asr #16
    d748:	09bd3860 	ldmibeq	sp!, {r5, r6, fp, ip, sp}
    d74c:	38478048 	stmdacc	r7, {r3, r6, pc}^
    d750:	044000bd 	strbeq	r0, [r0], #-189	; 0xffffff43
    d754:	00001840 	andeq	r1, r0, r0, asr #16
    d758:	93000021 	movwls	r0, #33	; 0x21
    d75c:	00028008 	andeq	r8, r2, r8
    d760:	0068cf21 	rsbeq	ip, r8, r1, lsr #30
    d764:	00006800 	andeq	r6, r0, r0, lsl #16
    d768:	04110021 	ldreq	r0, [r1], #-33	; 0xffffffdf
    d76c:	00e28040 	rsceq	r8, r2, r0, asr #32
    d770:	003bc3e0 	eorseq	ip, fp, r0, ror #7
    d774:	00490700 	subeq	r0, r9, r0, lsl #14
    d778:	04d00028 	ldrbeq	r0, [r0], #40	; 0x28
    d77c:	724a0620 	subvc	r0, sl, #32, 12	; 0x2000000
    d780:	c97809b6 	ldmdbgt	r8!, {r1, r2, r4, r5, r7, r8, fp}^
    d784:	10d00107 	sbcsne	r0, r0, r7, lsl #2
    d788:	80e00058 	rschi	r0, r0, r8, asr r0
    d78c:	40b66220 	adcsmi	r6, r6, r0, lsr #4
    d790:	004770b2 	strheq	r7, [r7], #-2
    d794:	00026b00 	andeq	r6, r2, r0, lsl #22
    d798:	04605821 	strbteq	r5, [r0], #-2081	; 0xfffff7df
    d79c:	01b40340 			; <UNDEFINED> instruction: 0x01b40340
    d7a0:	01900148 	orrseq	r0, r0, r8, asr #2
    d7a4:	006fa5bd 	strhteq	sl, [pc], #-93
    d7a8:	00000000 	andeq	r0, r0, r0
    d7ac:	03000100 	movweq	r0, #256	; 0x100
    d7b0:	1f000a00 	svcne	0x00000a00
    d7b4:	eb005900 	bl	23bbc <__ccfg+0x3c14>
    d7b8:	ea023900 	b	9bbc0 <__ccfg+0x7bc18>
    d7bc:	9709f904 	strls	pc, [r9, -r4, lsl #18]
    d7c0:	a11feb12 	tstge	pc, r2, lsl fp	; <UNPREDICTABLE>
    d7c4:	0a4a7832 	beq	12ab894 <__ccfg+0x128b8ec>
    d7c8:	8c82fa66 	vstmiahi	r2, {s30-s131}
    d7cc:	17b6639e 			; <UNDEFINED> instruction: 0x17b6639e
    d7d0:	edd664c9 	cfldrd	mvd6, [r6, #804]	; 0x324
    d7d4:	e0e3c1de 	ldrd	ip, [r3], #30	; <UNPREDICTABLE>
    d7d8:	0000ffe5 	andeq	pc, r0, r5, ror #31
    d7dc:	00770900 	rsbseq	r0, r7, r0, lsl #18
    d7e0:	15490000 	strbne	r0, [r9, #-0]
    d7e4:	91230000 			; <UNDEFINED> instruction: 0x91230000
    d7e8:	ac000000 	stcge	0, cr0, [r0], {-0}
    d7ec:	38040001 	stmdacc	r4, {r0}
    d7f0:	22000015 	andcs	r0, r0, #21
    d7f4:	0000234a 	andeq	r2, r0, sl, asr #6
    d7f8:	49103a0a 	ldmdbmi	r0, {r1, r3, r9, fp, ip, sp}
    d7fc:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    d800:	0061a306 	rsbeq	sl, r1, r6, lsl #6
    d804:	07147f00 	ldreq	r7, [r4, -r0, lsl #30]
    d808:	f1004d13 			; <UNDEFINED> instruction: 0xf1004d13
    d80c:	131f2e24 	tstne	pc, #36, 28	; 0x240
    d810:	3f0ab03f 	svccc	0x000ab03f
    d814:	00ff0700 	rscseq	r0, pc, r0, lsl #14
    d818:	00403000 	subeq	r3, r0, r0
    d81c:	03400140 	movteq	r0, #320	; 0x140
    d820:	0f400740 	svceq	0x00400740
    d824:	cf404f40 	svcgt	0x00404f40
    d828:	cf41cf40 	svcgt	0x0041cf40
    d82c:	cf47cf43 	svcgt	0x0047cf43
    d830:	cf3fcf4f 	svcgt	0x003fcf4f
    d834:	cf1fcf2f 	svcgt	0x001fcf2f
    d838:	0000000f 	andeq	r0, r0, pc
    d83c:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    d840:	3f000000 	svccc	0x00000000
    d844:	40000000 	andmi	r0, r0, r0
    d848:	00003f00 	andeq	r3, r0, r0, lsl #30
    d84c:	68000400 	stmdavs	r0, {sl}
    d850:	dc000e00 	stcle	14, cr0, [r0], {-0}
    d854:	43000600 	movwmi	r0, #1536	; 0x600
    d858:	05001a00 	streq	r1, [r0, #-2560]	; 0xfffff600
    d85c:	00000000 	andeq	r0, r0, r0
    d860:	00000200 	andeq	r0, r0, r0, lsl #4
    d864:	00003f00 	andeq	r3, r0, r0, lsl #30
    d868:	04000000 	streq	r0, [r0], #-0
    d86c:	0000c000 	andeq	ip, r0, r0
    d870:	c0000400 	andgt	r0, r0, r0, lsl #8
    d874:	07000000 	streq	r0, [r0, -r0]
    d878:	00c05000 	sbceq	r5, r0, r0
    d87c:	70700091 			; <UNDEFINED> instruction: 0x70700091
    d880:	009100c0 	addseq	r0, r1, r0, asr #1
    d884:	21318270 	teqcs	r1, r0, ror r2
    d888:	10913100 	addsne	r3, r1, r0, lsl #2
    d88c:	017000b1 	ldrheq	r0, [r0, #-1]!
    d890:	00b10181 	adcseq	r0, r1, r1, lsl #3
    d894:	323182a1 	eorscc	r8, r1, #268435466	; 0x1000000a
    d898:	01b11091 			; <UNDEFINED> instruction: 0x01b11091
    d89c:	41101191 			; <UNDEFINED> instruction: 0x41101191
    d8a0:	4f224181 	svcmi	0x00224181
    d8a4:	0006f140 	andeq	pc, r6, r0, asr #2
    d8a8:	01c05170 	biceq	r5, r0, r0, ror r1
    d8ac:	10183091 	mulsne	r8, r1, r0
    d8b0:	08318339 	ldmdaeq	r1!, {r0, r3, r4, r5, r8, r9, pc}
    d8b4:	413118d0 	teqmi	r1, r0	; <illegal shifter operand>
    d8b8:	3100316f 	tstcc	r0, pc, ror #2
    d8bc:	83b11091 			; <UNDEFINED> instruction: 0x83b11091
    d8c0:	5b161414 	blpl	592918 <__ccfg+0x572970>
    d8c4:	25700068 	ldrbcs	r0, [r0, #-104]!	; 0xffffff98
    d8c8:	00c05010 	sbceq	r5, r0, r0, lsl r0
    d8cc:	c0c3f491 	smullgt	pc, r3, r1, r4	; <UNPREDICTABLE>
    d8d0:	031420c0 	tsteq	r4, #192	; 0xc0
    d8d4:	4110316f 	tstmi	r0, pc, ror #2
    d8d8:	82c02204 	sbchi	r2, r0, #4, 4	; 0x40000000
    d8dc:	31002131 	tstcc	r0, r1, lsr r1
    d8e0:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    d8e4:	41103139 	tstmi	r0, r9, lsr r1
    d8e8:	82c08204 	sbchi	r8, r0, #4, 4	; 0x40000000
    d8ec:	31002131 	tstcc	r0, r1, lsr r1
    d8f0:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    d8f4:	a2103139 	andsge	r3, r0, #1073741838	; 0x4000000e
    d8f8:	213182c0 	teqcs	r1, r0, asr #5
    d8fc:	10913100 	addsne	r3, r1, r0, lsl #2
    d900:	151050b1 	ldrne	r5, [r0, #-177]	; 0xffffff4f
    d904:	05140531 	ldreq	r0, [r4, #-1329]	; 0xfffffacf
    d908:	3f700092 	svccc	0x00700092
    d90c:	31c05264 	biccc	r5, r0, r4, ror #4
    d910:	61063110 	tstvs	r6, r0, lsl r1
    d914:	4202c131 	andmi	ip, r2, #1073741836	; 0x4000000c
    d918:	31c11264 	biccc	r1, r1, r4, ror #4
    d91c:	71392110 	teqvc	r9, r0, lsl r1
    d920:	e1315106 	teq	r1, r6, lsl #2
    d924:	00644202 	rsbeq	r4, r4, r2, lsl #4
    d928:	99658a70 	stmdbls	r5!, {r4, r5, r6, r9, fp, pc}^
    d92c:	20c08865 	sbccs	r8, r0, r5, ror #16
    d930:	80395082 	eorshi	r5, r9, r2, lsl #1
    d934:	9f1e0039 	svcls	0x001e0039
    d938:	01c04140 	biceq	r4, r0, r0, asr #2
    d93c:	18141830 	ldmdane	r4, {r4, r5, fp, ip}
    d940:	30c0891a 	sbccc	r8, r0, sl, lsl r9
    d944:	80396082 	eorshi	r6, r9, r2, lsl #1
    d948:	a91e0039 	ldmdbge	lr, {r0, r3, r4, r5}
    d94c:	01c04140 	biceq	r4, r0, r0, asr #2
    d950:	19141930 	ldmdbne	r4, {r4, r5, r8, fp, ip}
    d954:	36643c1a 			; <UNDEFINED> instruction: 0x36643c1a
    d958:	34b11091 	ldrtcc	r1, [r1], #145	; 0x91
    d95c:	54b11091 	ldrtpl	r1, [r1], #145	; 0x91
    d960:	547100b0 	ldrbtpl	r0, [r1], #-176	; 0xffffff50
    d964:	f0b064a0 			; <UNDEFINED> instruction: 0xf0b064a0
    d968:	af220080 	svcge	0x00220080
    d96c:	b0124040 	andslt	r4, r2, r0, asr #32
    d970:	53b03290 	movspl	r3, #144, 4
    d974:	53395382 	teqpl	r9, #134217730	; 0x8000002
    d978:	3f648539 	svccc	0x00648539
    d97c:	22c11164 	sbccs	r1, r1, #100, 2
    d980:	706442c1 	rsbvc	r4, r4, r1, asr #5
    d984:	1168c2c1 	cmnne	r8, r1, asr #5
    d988:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    d98c:	c7c17064 	strbgt	r7, [r1, r4, rrx]
    d990:	00c05068 	sbceq	r5, r0, r8, rrx
    d994:	98722791 	ldmdals	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    d998:	14161592 	ldrne	r1, [r6], #-1426	; 0xfffffa6e
    d99c:	53104216 	tstpl	r0, #1610612737	; 0x60000001
    d9a0:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    d9a4:	31313182 	teqcc	r1, r2, lsl #3
    d9a8:	31398139 	teqcc	r9, r9, lsr r1
    d9ac:	70b05131 	adcsvc	r5, r0, r1, lsr r1
    d9b0:	276572b2 			; <UNDEFINED> instruction: 0x276572b2
    d9b4:	70929972 	addsvc	r9, r2, r2, ror r9
    d9b8:	731062b2 	tstvc	r0, #536870923	; 0x2000000b
    d9bc:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    d9c0:	21312182 	teqcs	r1, r2, lsl #3
    d9c4:	1b398139 	blne	e6deb0 <__ccfg+0xe4df08>
    d9c8:	e2657210 	rsb	r7, r5, #16, 4
    d9cc:	603182c0 	eorsvs	r8, r1, r0, asr #5
    d9d0:	80318082 	eorshi	r8, r1, r2, lsl #1
    d9d4:	61000239 	tstvs	r0, r9, lsr r2
    d9d8:	327100b0 	rsbscc	r0, r1, #176	; 0xb0
    d9dc:	51b11091 			; <UNDEFINED> instruction: 0x51b11091
    d9e0:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    d9e4:	f3c23072 	vmvn.i32	<illegal reg q9.5>, #162	; 0x000000a2
    d9e8:	80000068 	andhi	r0, r0, r8, rrx
    d9ec:	3290b012 	addscc	fp, r0, #18
    d9f0:	507000b0 	ldrhtpl	r0, [r0], #-0
    d9f4:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    d9f8:	62929972 	addsvs	r9, r2, #1867776	; 0x1c8000
    d9fc:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    da00:	218231c3 	orrcs	r3, r2, r3, asr #3
    da04:	81392131 	teqhi	r9, r1, lsr r1
    da08:	70b05139 	adcsvc	r5, r0, r9, lsr r1
    da0c:	27657eb2 			; <UNDEFINED> instruction: 0x27657eb2
    da10:	70929872 	addsvc	r9, r2, r2, ror r8
    da14:	531042b2 	tstpl	r0, #536870923	; 0x2000000b
    da18:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    da1c:	31313182 	teqcc	r1, r2, lsl #3
    da20:	31398139 	teqcc	r9, r9, lsr r1
    da24:	7e101a31 			; <UNDEFINED> instruction: 0x7e101a31
    da28:	61a05165 	rorvs	r5, r5, #2
    da2c:	b07227b0 	ldrhtlt	r2, [r2], #-112	; 0xffffff90
    da30:	3f6918c0 	svccc	0x006918c0
    da34:	22c10164 	sbccs	r0, r1, #100, 2
    da38:	016442c1 	cmneq	r4, r1, asr #5
    da3c:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    da40:	3c1a1564 	cfldr32cc	mvfx1, [sl], {100}	; 0x64
    da44:	10913564 	addsne	r3, r1, r4, ror #10
    da48:	858253b1 	strhi	r5, [r2, #945]	; 0x3b1
    da4c:	b012c064 	andslt	ip, r2, r4, rrx
    da50:	00b03290 	umlalseq	r3, r0, r0, r2
    da54:	72643f70 	rsbvc	r3, r4, #112, 30	; 0x1c0
    da58:	42c081c2 	sbcmi	r8, r0, #-2147483600	; 0x80000030
    da5c:	11c12264 	bicne	r2, r1, r4, ror #4
    da60:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    da64:	42c111c0 	sbcmi	r1, r1, #192, 2	; 0x30
    da68:	31c06264 	biccc	r6, r0, r4, ror #4
    da6c:	626442c3 	rsbvs	r4, r4, #805306380	; 0x3000000c
    da70:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    da74:	11c30264 	bicne	r0, r3, r4, ror #4
    da78:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    da7c:	85395382 	ldrhi	r5, [r9, #-898]!	; 0xfffffc7e
    da80:	47c3e264 	strbmi	lr, [r3, r4, ror #4]
    da84:	40221164 	eormi	r1, r2, r4, ror #2
    da88:	81c24241 	bichi	r4, r2, r1, asr #4
    da8c:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    da90:	42c111c2 	sbcmi	r1, r1, #-2147483600	; 0x80000030
    da94:	e1c27264 	bic	r7, r2, r4, ror #4
    da98:	026442ce 	rsbeq	r4, r4, #-536870900	; 0xe000000c
    da9c:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    daa0:	01c20264 	biceq	r0, r2, r4, ror #4
    daa4:	b06442c8 	rsblt	r4, r4, r8, asr #5
    daa8:	006954c0 	rsbeq	r5, r9, r0, asr #9
    daac:	42643f70 	rsbmi	r3, r4, #112, 30	; 0x1c0
    dab0:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    dab4:	11c25264 	bicne	r5, r2, r4, ror #4
    dab8:	726442c0 	rsbvc	r4, r4, #192, 4
    dabc:	42c0e1c2 	sbcmi	lr, r0, #-2147483600	; 0x80000030
    dac0:	01c00264 	biceq	r0, r0, r4, ror #4
    dac4:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    dac8:	42c301c0 	sbcmi	r0, r3, #192, 2	; 0x30
    dacc:	01c12264 	biceq	r2, r1, r4, ror #4
    dad0:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    dad4:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    dad8:	01c30264 	biceq	r0, r3, r4, ror #4
    dadc:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    dae0:	00648582 	rsbeq	r8, r4, r2, lsl #11
    dae4:	00b06170 	adcseq	r6, r0, r0, ror r1
    dae8:	23141271 	tstcs	r4, #268435463	; 0x10000007
    daec:	334d7a1c 	movtcc	r7, #55836	; 0xda1c
    daf0:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    daf4:	10913270 	addsne	r3, r1, r0, ror r2
    daf8:	006972b1 	strhteq	r7, [r9], #-33	; 0xffffffdf
    dafc:	00b06170 	adcseq	r6, r0, r0, ror r1
    db00:	32181371 	andscc	r1, r8, #-1006632959	; 0xc4000001
    db04:	3249861c 	subcc	r8, r9, #28, 12	; 0x1c00000
    db08:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    db0c:	10913370 	addsne	r3, r1, r0, ror r3
    db10:	00697eb1 	strhteq	r7, [r9], #-225	; 0xffffff1f
    db14:	47c0c270 			; <UNDEFINED> instruction: 0x47c0c270
    db18:	c2101564 	andsgt	r1, r0, #100, 10	; 0x19000000
    db1c:	471612c0 	ldrmi	r1, [r6, -r0, asr #5]
    db20:	15314164 	ldrne	r4, [r1, #-356]!	; 0xfffffe9c
    db24:	80c0c014 	sbchi	ip, r0, r4, lsl r0
    db28:	54140531 	ldrpl	r0, [r4], #-1329	; 0xfffffacf
    db2c:	0478a010 	ldrbteq	sl, [r8], #-16
    db30:	e6700004 	ldrbt	r0, [r0], -r4
    db34:	013186c0 	teqeq	r1, r0, asr #13
    db38:	671416cc 	ldrvs	r1, [r4, -ip, asr #13]
    db3c:	f0826110 			; <UNDEFINED> instruction: 0xf0826110
    db40:	170401c3 	strne	r0, [r4, -r3, asr #3]
    db44:	06700014 			; <UNDEFINED> instruction: 0x06700014
    db48:	0b720573 	bleq	1c8f11c <__ccfg+0x1c6f174>
    db4c:	50720e72 	rsbspl	r0, r2, r2, ror lr
    db50:	817100b0 	ldrhhi	r0, [r1, #-0]!
    db54:	50b06080 	adcspl	r6, r0, r0, lsl #1
    db58:	418092a0 	orrmi	r9, r0, r0, lsr #5
    db5c:	8045c322 	subhi	ip, r5, r2, lsr #6
    db60:	10c1f180 	sbcne	pc, r1, r0, lsl #3
    db64:	01163004 	tsteq	r6, r4
    db68:	01140111 	tsteq	r4, r1, lsl r1
    db6c:	d761d66c 	strble	sp, [r1, -ip, ror #12]!
    db70:	d961d861 	stmdble	r1!, {r0, r5, r6, fp, ip, lr, pc}^
    db74:	db61da61 	blle	1884500 <__ccfg+0x1864558>
    db78:	de61dc61 	cdple	12, 6, cr13, cr1, cr1, {3}
    db7c:	e261e061 	rsb	lr, r1, #97	; 0x61
    db80:	3661e461 	strbtcc	lr, [r1], -r1, ror #8
    db84:	91633963 	cmnls	r3, r3, ror #18
    db88:	21c0f280 	biccs	pc, r0, r0, lsl #5
    db8c:	82312104 	eorshi	r2, r1, #4, 2
    db90:	122a4280 	eorne	r4, sl, #128, 4
    db94:	01163214 	tsteq	r6, r4, lsl r2
    db98:	01142111 	tsteq	r4, r1, lsl r1
    db9c:	0b61ee6c 	bleq	1889554 <__ccfg+0x18695ac>
    dba0:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    dba4:	0b61ee63 	bleq	1889538 <__ccfg+0x1869590>
    dba8:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    dbac:	e661e663 	strbt	lr, [r1], -r3, ror #12
    dbb0:	e661e661 	strbt	lr, [r1], -r1, ror #12
    dbb4:	e661e661 	strbt	lr, [r1], -r1, ror #12
    dbb8:	e6649461 	strbt	r9, [r4], -r1, ror #8
    dbbc:	e664f961 	strbt	pc, [r4], -r1, ror #18	; <UNPREDICTABLE>
    dbc0:	e6652a61 	strbt	r2, [r5], -r1, ror #20
    dbc4:	e6655661 	strbt	r5, [r5], -r1, ror #12
    dbc8:	e6674661 	strbt	r4, [r7], -r1, ror #12
    dbcc:	b0121061 	andslt	r1, r2, r1, rrx
    dbd0:	06720e90 			; <UNDEFINED> instruction: 0x06720e90
    dbd4:	10720573 	rsbsne	r0, r2, r3, ror r5
    dbd8:	a7903012 			; <UNDEFINED> instruction: 0xa7903012
    dbdc:	3ccff061 	stclcc	0, cr15, [pc], {97}	; 0x61
    dbe0:	03c1d467 	biceq	sp, r1, #1728053248	; 0x67000000
    dbe4:	54c3c0c0 	strbpl	ip, [r3], #192	; 0xc0
    dbe8:	50784064 	rsbspl	r4, r8, r4, rrx
    dbec:	10785091 			; <UNDEFINED> instruction: 0x10785091
    dbf0:	20786092 			; <UNDEFINED> instruction: 0x20786092
    dbf4:	30787092 			; <UNDEFINED> instruction: 0x30787092
    dbf8:	40788092 			; <UNDEFINED> instruction: 0x40788092
    dbfc:	60789092 			; <UNDEFINED> instruction: 0x60789092
    dc00:	90783092 			; <UNDEFINED> instruction: 0x90783092
    dc04:	40821091 	umullmi	r1, r2, r1, r0
    dc08:	0106f039 	tsteq	r6, r9, lsr r0	; <UNPREDICTABLE>
    dc0c:	10311010 	eorsne	r1, r1, r0, lsl r0
    dc10:	42920014 	addsmi	r0, r2, #20
    dc14:	bc61e667 	stcllt	6, cr14, [r1], #-412	; 0xfffffe64
    dc18:	54a0e2a0 	strtpl	lr, [r0], #672	; 0x2a0
    dc1c:	5080f0a0 	addpl	pc, r0, r0, lsr #1
    dc20:	40461522 	submi	r1, r6, r2, lsr #10
    dc24:	2b220080 	blcs	88de2c <__ccfg+0x86de84>
    dc28:	40620d47 	rsbmi	r0, r2, r7, asr #26
    dc2c:	8d822da0 	stchi	13, cr2, [r2, #640]	; 0x280
    dc30:	10398d31 	eorsne	r8, r9, r1, lsr sp
    dc34:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    dc38:	1a100904 	bne	410050 <__ccfg+0x3f00a8>
    dc3c:	1a394a82 	bne	e6064c <__ccfg+0xe406a4>
    dc40:	80821004 	addhi	r1, r2, r4
    dc44:	0e041039 	mcreq	0, 0, r1, cr4, cr9, {1}
    dc48:	bc10ab10 			; <UNDEFINED> instruction: 0xbc10ab10
    dc4c:	6310c210 	tstvs	r0, #16, 4
    dc50:	e0722964 	rsbs	r2, r2, r4, ror #18
    dc54:	13673ccf 	cmnne	r7, #52992	; 0xcf00
    dc58:	c8b003b0 	ldmgt	r0!, {r4, r5, r7, r8, r9}
    dc5c:	50b05366 	adcspl	r5, r0, r6, ror #6
    dc60:	64b054b0 	ldrtvs	r5, [r0], #1200	; 0x4b0
    dc64:	a5b013b0 	ldrge	r1, [r0, #944]!	; 0x3b0
    dc68:	e0821066 	add	r1, r2, r6, rrx
    dc6c:	ae463822 	cdpge	8, 4, cr3, cr6, cr2, {1}
    dc70:	41710066 	cmnmi	r1, r6, rrx
    dc74:	2b220180 	blcs	88e27c <__ccfg+0x86e2d4>
    dc78:	1080f047 	addne	pc, r0, r7, asr #32
    dc7c:	f0464b22 			; <UNDEFINED> instruction: 0xf0464b22
    dc80:	64471822 	strbvs	r1, [r7], #-2082	; 0xfffff7de
    dc84:	382231b0 	stmdacc	r2!, {r4, r5, r7, r8, ip, sp}
    dc88:	ceb06342 	cdpgt	3, 11, cr6, cr0, cr2, {2}
    dc8c:	e0821066 	add	r1, r2, r6, rrx
    dc90:	70463822 	subvc	r3, r6, r2, lsr #16
    dc94:	64623866 	strbtvs	r3, [r2], #-2150	; 0xfffff79a
    dc98:	8f816fb0 	svchi	0x00816fb0
    dc9c:	d03d8f31 	eorsle	r8, sp, r1, lsr pc
    dca0:	3c92ffdf 	ldccc	15, cr15, [r2], {223}	; 0xdf
    dca4:	41710067 	cmnmi	r1, r7, rrx
    dca8:	2b220180 	blcs	88e2b0 <__ccfg+0x86e308>
    dcac:	f0b06447 			; <UNDEFINED> instruction: 0xf0b06447
    dcb0:	65225080 	strvs	r5, [r2, #-128]!	; 0xffffff80
    dcb4:	11b06342 	asrsne	r6, r2, #6
    dcb8:	6022c182 	eorvs	ip, r2, r2, lsl #3
    dcbc:	0566ce46 	strbeq	ip, [r6, #-3654]!	; 0xfffff1ba
    dcc0:	d1821167 	orrle	r1, r2, r7, ror #2
    dcc4:	70465222 	subvc	r5, r6, r2, lsr #4
    dcc8:	61625266 	cmnvs	r2, r6, ror #4
    dccc:	81817281 	orrhi	r7, r1, r1, lsl #5
    dcd0:	823d8131 	eorshi	r8, sp, #1073741836	; 0x4000000c
    dcd4:	c03d8231 	eorsgt	r8, sp, r1, lsr r2
    dcd8:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    dcdc:	0b673c93 	bleq	19dcf30 <__ccfg+0x19bcf88>
    dce0:	c081b062 	addgt	fp, r1, r2, rrx
    dce4:	9781d391 			; <UNDEFINED> instruction: 0x9781d391
    dce8:	d3a29082 			; <UNDEFINED> instruction: 0xd3a29082
    dcec:	f34e7f18 	vmaxnm.f32	d23, d14, d8
    dcf0:	e316130b 	tst	r6, #738197504	; 0x2c000000
    dcf4:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    dcf8:	3b81e391 	blcc	fe086b44 <_estack+0xde081b44>
    dcfc:	ba629014 	blt	18b1d54 <__ccfg+0x1891dac>
    dd00:	23468b1c 	movtcs	r8, #27420	; 0x6b1c
    dd04:	e34a8b1e 	movt	r8, #43806	; 0xab1e
    dd08:	904e8b1c 	subls	r8, lr, ip, lsl fp
    dd0c:	8b2207b2 	blhi	88fbdc <__ccfg+0x86fc34>
    dd10:	1ba29042 	blne	fe8b1e20 <_estack+0xde8ace20>
    dd14:	e362961a 	cmn	r2, #27262976	; 0x1a00000
    dd18:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    dd1c:	3b81e391 	blcc	fe086b68 <_estack+0xde081b68>
    dd20:	a01cab18 	andsge	sl, ip, r8, lsl fp
    dd24:	a21c9b4e 	andsge	r9, ip, #79872	; 0x13800
    dd28:	a41cbc4a 	ldrge	fp, [ip], #-3146	; 0xfffff3b6
    dd2c:	1010b242 	andsne	fp, r0, r2, asr #4
    dd30:	9d22d082 	stcls	0, cr13, [r2, #-520]!	; 0xfffffdf8
    dd34:	1080f042 	addne	pc, r0, r2, asr #32
    dd38:	6346a422 	movtvs	sl, #25634	; 0x6422
    dd3c:	a466a564 	strbtge	sl, [r6], #-1380	; 0xfffffa9c
    dd40:	9410ab62 	ldrls	sl, [r0], #-2914	; 0xfffff49e
    dd44:	94109b62 	ldrls	r9, [r0], #-2914	; 0xfffff49e
    dd48:	30700062 	rsbscc	r0, r0, r2, rrx
    dd4c:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    dd50:	00b06304 	adcseq	r6, r0, r4, lsl #6
    dd54:	bc6aa871 	stcllt	8, cr10, [sl], #-452	; 0xfffffe3c
    dd58:	00b0e010 	adcseq	lr, r0, r0, lsl r0
    dd5c:	c281b270 	addgt	fp, r1, #112, 4
    dd60:	0181d291 			; <UNDEFINED> instruction: 0x0181d291
    dd64:	51181282 	tstpl	r8, r2, lsl #5
    dd68:	41181281 	tstmi	r8, r1, lsl #5
    dd6c:	81318182 	teqhi	r1, r2, lsl #3
    dd70:	bf1c123d 	svclt	0x001c123d
    dd74:	32b0e24a 	adcscc	lr, r0, #-1610612732	; 0xa0000004
    dd78:	f2dfb0b0 	vshr.s64	d27, d16, #33
    dd7c:	f1673c92 			; <UNDEFINED> instruction: 0xf1673c92
    dd80:	c31421c7 	tstgt	r4, #-1073741775	; 0xc0000031
    dd84:	62c8124e 	sbcvs	r1, r8, #-536870908	; 0xe0000004
    dd88:	31917291 			; <UNDEFINED> instruction: 0x31917291
    dd8c:	00b0e1b0 	ldrhteq	lr, [r0], r0
    dd90:	06c00870 	uxtab16eq	r0, r0, r0, ror #16
    dd94:	60c800c0 	sbcvs	r0, r8, r0, asr #1
    dd98:	00917091 	umullseq	r7, r1, r1, r0
    dd9c:	b0820170 	addlt	r0, r2, r0, ror r1
    dda0:	d091c081 	addsle	ip, r1, r1, lsl #1
    dda4:	51181081 	tstpl	r8, r1, lsl #1
    dda8:	06181081 	ldreq	r1, [r8], -r1, lsl #1
    ddac:	4280e114 	addmi	lr, r0, #20, 2
    ddb0:	82318282 	eorshi	r8, r1, #536870920	; 0x20000008
    ddb4:	e41c203d 	ldr	r2, [ip], #-61	; 0xffffffc3
    ddb8:	21b0e24a 	asrscs	lr, sl, #4
    ddbc:	3246e822 	subcc	lr, r6, #2228224	; 0x220000
    ddc0:	a01005b0 			; <UNDEFINED> instruction: 0xa01005b0
    ddc4:	3c92f5df 	cfldr32cc	mvfx15, [r2], {223}	; 0xdf
    ddc8:	e8222167 	stmda	r2!, {r0, r1, r2, r5, r6, r8, sp}
    ddcc:	32a0e242 	adccc	lr, r0, #536870916	; 0x20000004
    ddd0:	418231b0 			; <UNDEFINED> instruction: 0x418231b0
    ddd4:	01c0f039 	biceq	pc, r0, r9, lsr r0	; <UNPREDICTABLE>
    ddd8:	f61e0104 			; <UNDEFINED> instruction: 0xf61e0104
    dddc:	10161842 	andsne	r1, r6, r2, asr #16
    dde0:	083010c0 	ldmdaeq	r0!, {r6, r7, ip}
    dde4:	6047041c 	subvs	r0, r7, ip, lsl r4
    dde8:	063c1010 			; <UNDEFINED> instruction: 0x063c1010
    ddec:	61c7f110 	bicvs	pc, r7, r0, lsl r1	; <UNPREDICTABLE>
    ddf0:	164efa14 			; <UNDEFINED> instruction: 0x164efa14
    ddf4:	719166c8 	orrsvc	r6, r1, r8, asr #13
    ddf8:	81318181 	teqhi	r1, r1, lsl #3
    ddfc:	011c163d 	tsteq	ip, sp, lsr r6
    de00:	3191764b 	orrscc	r7, r1, fp, asr #12
    de04:	08c006b0 	stmiaeq	r0, {r4, r5, r7, r9, sl}^
    de08:	617000c0 	cmnvs	r0, r0, asr #1
    de0c:	81318181 	teqhi	r1, r1, lsl #3
    de10:	8082403d 	addhi	r4, r2, sp, lsr r0
    de14:	f1180139 			; <UNDEFINED> instruction: 0xf1180139
    de18:	014b171c 	cmpeq	fp, ip, lsl r7
    de1c:	c080b014 	addgt	fp, r0, r4, lsl r0
    de20:	bc471722 	mcrrlt	7, 2, r1, r7, cr2
    de24:	90b033b0 	ldrhtls	r3, [r0], r0
    de28:	0f92f1ef 	svceq	0x0092f1ef
    de2c:	00673c93 	mlseq	r7, r3, ip, r3
    de30:	63a00370 	movvs	r0, #112, 6	; 0xc0000001
    de34:	efb064b0 	svc	0x00b064b0
    de38:	006556b0 	strhteq	r5, [r5], #-96	; 0xffffffa0
    de3c:	00804071 	addeq	r4, r0, r1, ror r0
    de40:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    de44:	ef652ab0 	svc	0x00652ab0
    de48:	407100a0 	rsbsmi	r0, r1, r0, lsr #1
    de4c:	2b220080 	blcs	88e054 <__ccfg+0x86e0ac>
    de50:	03b06447 	movseq	r6, #1191182336	; 0x47000000
    de54:	016238b0 	strheq	r3, [r2, #-128]!	; 0xffffff80
    de58:	82816282 	addhi	r6, r1, #536870920	; 0x20000008
    de5c:	803d8231 	eorshi	r8, sp, r1, lsr r2
    de60:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    de64:	03673c93 	cmneq	r7, #37632	; 0x9300
    de68:	e66556a0 	strbt	r5, [r5], -r0, lsr #13
    de6c:	6380a261 	orrvs	sl, r0, #268435462	; 0x10000006
    de70:	5061e664 	rsbpl	lr, r1, r4, ror #12
    de74:	e67100b0 			; <UNDEFINED> instruction: 0xe67100b0
    de78:	d092e061 	addsle	lr, r2, r1, rrx
    de7c:	3d220082 	stccc	0, cr0, [r2, #-520]!	; 0xfffffdf8
    de80:	00b2c047 	adcseq	ip, r2, r7, asr #32
    de84:	f080a070 			; <UNDEFINED> instruction: 0xf080a070
    de88:	30435922 	subcc	r5, r3, r2, lsr #18
    de8c:	62c102b0 	sbcvs	r0, r1, #176, 4
    de90:	a0c00131 	sbcge	r0, r0, r1, lsr r1
    de94:	521e0080 	andspl	r0, lr, #128	; 0x80
    de98:	5322f043 	msrpl	CPSR_x, #67	; 0x43
    de9c:	60f5a043 	rscsvs	sl, r5, r3, asr #32
    dea0:	53396031 	teqpl	r9, #49	; 0x31
    dea4:	10102063 	andsne	r2, r0, r3, rrx
    dea8:	236f131a 	cmncs	pc, #1744830464	; 0x68000000
    deac:	1216116e 	andsne	r1, r6, #-2147483621	; 0x8000001b
    deb0:	006b5416 	rsbeq	r5, fp, r6, lsl r4
    deb4:	28f90370 	ldmcs	r9!, {r4, r5, r6, r8, r9}^
    deb8:	270b0000 	strcs	r0, [fp, -r0]
    debc:	00005812 	andeq	r5, r0, r2, lsl r8
    dec0:	1c100400 	cfldrsne	mvf0, [r0], {-0}
    dec4:	10240000 	eorne	r0, r4, r0
    dec8:	0300001c 	movweq	r0, #28
    decc:	00001dc0 	andeq	r1, r0, r0, asr #27
    ded0:	45122b0b 	ldrmi	r2, [r2, #-2827]	; 0xfffff4f5
    ded4:	24000000 	strcs	r0, [r0], #-0
    ded8:	00001c26 	andeq	r1, r0, r6, lsr #24
    dedc:	00294b03 	eoreq	r4, r9, r3, lsl #22
    dee0:	122c0b00 	eorne	r0, ip, #0, 22
    dee4:	0000006b 	andeq	r0, r0, fp, rrx
    dee8:	001c3704 	andseq	r3, ip, r4, lsl #14
    deec:	06520300 	ldrbeq	r0, [r2], -r0, lsl #6
    def0:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    def4:	00006b12 	andeq	r6, r0, r2, lsl fp
    def8:	0b080b00 	bleq	210b00 <__ccfg+0x1f0b58>
    defc:	1ce20932 			; <UNDEFINED> instruction: 0x1ce20932
    df00:	2b200000 	blcs	80df08 <__ccfg+0x7edf60>
    df04:	0b000000 	bleq	df0c <__exidx_end+0x85f4>
    df08:	1c260734 	stcne	7, cr0, [r6], #-208	; 0xffffff30
    df0c:	01010000 	mrseq	r0, (UNDEF: 1)
    df10:	58200007 	stmdapl	r0!, {r0, r1, r2}
    df14:	0b000006 	bleq	df34 <__exidx_end+0x861c>
    df18:	1c260335 	stcne	3, cr0, [r6], #-212	; 0xffffff2c
    df1c:	01010000 	mrseq	r0, (UNDEF: 1)
    df20:	ef200006 	svc	0x00200006
    df24:	0b000002 	bleq	df34 <__exidx_end+0x861c>
    df28:	1c260336 	stcne	3, cr0, [r6], #-216	; 0xffffff28
    df2c:	01010000 	mrseq	r0, (UNDEF: 1)
    df30:	c3200005 			; <UNDEFINED> instruction: 0xc3200005
    df34:	0b000006 	bleq	df54 <__exidx_end+0x863c>
    df38:	1c260337 	stcne	3, cr0, [r6], #-220	; 0xffffff24
    df3c:	01010000 	mrseq	r0, (UNDEF: 1)
    df40:	ab200004 	blge	80df58 <__ccfg+0x7edfb0>
    df44:	0b00000a 	bleq	df74 <__exidx_end+0x865c>
    df48:	1c260338 	stcne	3, cr0, [r6], #-224	; 0xffffff20
    df4c:	04010000 	streq	r0, [r1], #-0
    df50:	670c0000 	strvs	r0, [ip, -r0]
    df54:	0b000006 	bleq	df74 <__exidx_end+0x865c>
    df58:	1c26073a 	stcne	7, cr0, [r6], #-232	; 0xffffff18
    df5c:	0c010000 	stceq	0, cr0, [r1], {-0}
    df60:	00000907 	andeq	r0, r0, r7, lsl #18
    df64:	26033c0b 	strcs	r3, [r3], -fp, lsl #24
    df68:	0200001c 	andeq	r0, r0, #28
    df6c:	000f380c 	andeq	r3, pc, ip, lsl #16
    df70:	033d0b00 	teqeq	sp, #0, 22
    df74:	00001c26 	andeq	r1, r0, r6, lsr #24
    df78:	091f0c03 	ldmdbeq	pc, {r0, r1, sl, fp}	; <UNPREDICTABLE>
    df7c:	3f0b0000 	svccc	0x000b0000
    df80:	001c3708 	andseq	r3, ip, r8, lsl #14
    df84:	03000400 	movweq	r0, #1024	; 0x400
    df88:	00000325 	andeq	r0, r0, r5, lsr #6
    df8c:	5403410b 	strpl	r4, [r3], #-267	; 0xfffffef5
    df90:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    df94:	00001ce2 	andeq	r1, r0, r2, ror #25
    df98:	0006ca25 	andeq	ip, r6, r5, lsr #20
    df9c:	1a430b00 	bne	10d0ba4 <__ccfg+0x10b0bfc>
    dfa0:	00001cee 	andeq	r1, r0, lr, ror #25
    dfa4:	97250101 	strls	r0, [r5, -r1, lsl #2]!
    dfa8:	0b000001 	bleq	dfb4 <__exidx_end+0x869c>
    dfac:	05de0e45 	ldrbeq	r0, [lr, #3653]	; 0xe45
    dfb0:	01010000 	mrseq	r0, (UNDEF: 1)
    dfb4:	00032e25 	andeq	r2, r3, r5, lsr #28
    dfb8:	1e450b00 	vmlane.f64	d16, d5, d0
    dfbc:	000005de 	ldrdeq	r0, [r0], -lr
    dfc0:	080b0101 	stmdaeq	fp, {r0, r8}
    dfc4:	4e098f0c 	cdpmi	15, 0, cr8, cr9, cr12, {0}
    dfc8:	0c00001d 	stceq	0, cr0, [r0], {29}
    dfcc:	00000cd6 	ldrdeq	r0, [r0], -r6
    dfd0:	6b0b900c 	blvs	2f2008 <__ccfg+0x2d2060>
    dfd4:	00000000 	andeq	r0, r0, r0
    dfd8:	0010730c 	andseq	r7, r0, ip, lsl #6
    dfdc:	08910c00 	ldmeq	r1, {sl, fp}
    dfe0:	00001c10 	andeq	r1, r0, r0, lsl ip
    dfe4:	01bc0c04 			; <UNDEFINED> instruction: 0x01bc0c04
    dfe8:	920c0000 	andls	r0, ip, #0
    dfec:	001c3210 	andseq	r3, ip, r0, lsl r2
    dff0:	03000600 	movweq	r0, #1536	; 0x600
    dff4:	00000cca 	andeq	r0, r0, sl, asr #25
    dff8:	1d03930c 	stcne	3, cr9, [r3, #-48]	; 0xffffffd0
    dffc:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    e000:	00001d4e 	andeq	r1, r0, lr, asr #26
    e004:	00001d65 	andeq	r1, r0, r5, ror #26
    e008:	49250026 	stmdbmi	r5!, {r1, r2, r5}
    e00c:	0c000009 	stceq	0, cr0, [r0], {9}
    e010:	1d5a0f99 	ldclne	15, cr0, [sl, #-612]	; 0xfffffd9c
    e014:	01010000 	mrseq	r0, (UNDEF: 1)
    e018:	910d010b 	tstls	sp, fp, lsl #2
    e01c:	001d9d09 	andseq	r9, sp, r9, lsl #26
    e020:	09262000 	stmdbeq	r6!, {sp}
    e024:	930d0000 	movwls	r0, #53248	; 0xd000
    e028:	001c2607 	andseq	r2, ip, r7, lsl #12
    e02c:	01070100 	mrseq	r0, (UNDEF: 23)
    e030:	05d82000 	ldrbeq	r2, [r8]
    e034:	940d0000 	strls	r0, [sp], #-0
    e038:	001c2603 	andseq	r2, ip, r3, lsl #12
    e03c:	00010100 	andeq	r0, r1, r0, lsl #2
    e040:	b7030000 	strlt	r0, [r3, -r0]
    e044:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    e048:	1d730396 	ldclne	3, cr0, [r3, #-600]!	; 0xfffffda8
    e04c:	9d040000 	stcls	0, cr0, [r4, #-0]
    e050:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    e054:	00001da9 	andeq	r1, r0, r9, lsr #27
    e058:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    e05c:	ae040026 	cdpge	0, 0, cr0, cr4, cr6, {1}
    e060:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    e064:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    e068:	b9179c0d 	ldmdblt	r7, {r0, r2, r3, sl, fp, ip, pc}
    e06c:	0100001d 	tsteq	r0, sp, lsl r0
    e070:	1c1c0901 			; <UNDEFINED> instruction: 0x1c1c0901
    e074:	1dd70000 	ldclne	0, cr0, [r7]
    e078:	00260000 	eoreq	r0, r6, r0
    e07c:	001dcc04 	andseq	ip, sp, r4, lsl #24
    e080:	061a2500 	ldreq	r2, [sl], -r0, lsl #10
    e084:	060e0000 	streq	r0, [lr], -r0
    e088:	001dd713 	andseq	sp, sp, r3, lsl r7
    e08c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e090:	000008e9 	andeq	r0, r0, r9, ror #17
    e094:	370ec30c 	strcc	ip, [lr, -ip, lsl #6]
    e098:	0100001c 	tsteq	r0, ip, lsl r0
    e09c:	0c7e0601 	ldcleq	6, cr0, [lr], #-4
    e0a0:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    e0a4:	1e051001 	cdpne	0, 0, cr1, cr5, cr1, {0}
    e0a8:	04100000 	ldreq	r0, [r0], #-0
    e0ac:	00001e0b 	andeq	r1, r0, fp, lsl #28
    e0b0:	1e17011e 	mrcne	1, 0, r0, cr7, cr14, {0}
    e0b4:	10150000 	andsne	r0, r5, r0
    e0b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    e0bc:	0005eb09 	andeq	lr, r5, r9, lsl #22
    e0c0:	001e2200 	andseq	r2, lr, r0, lsl #4
    e0c4:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    e0c8:	00001e17 	andeq	r1, r0, r7, lsl lr
    e0cc:	0009f21f 	andeq	pc, r9, pc, lsl r2	; <UNPREDICTABLE>
    e0d0:	017f0f00 	cmneq	pc, r0, lsl #30
    e0d4:	001e2216 	andseq	r2, lr, r6, lsl r2
    e0d8:	1f010100 	svcne	0x00010100
    e0dc:	000003a9 	andeq	r0, r0, r9, lsr #7
    e0e0:	1401820f 	strne	r8, [r1], #-527	; 0xfffffdf1
    e0e4:	00001c43 	andeq	r1, r0, r3, asr #24
    e0e8:	811f0101 	tsthi	pc, r1, lsl #2
    e0ec:	0f000003 	svceq	0x00000003
    e0f0:	370e02d8 			; <UNDEFINED> instruction: 0x370e02d8
    e0f4:	0100001c 	tsteq	r0, ip, lsl r0
    e0f8:	0f081a01 	svceq	0x00081a01
    e0fc:	7b090303 	blvc	24ed10 <__ccfg+0x22ed68>
    e100:	1700001e 	smladne	r0, lr, r0, r0
    e104:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    e108:	0703070f 	streq	r0, [r3, -pc, lsl #14]
    e10c:	00001c10 	andeq	r1, r0, r0, lsl ip
    e110:	0fcb1700 	svceq	0x00cb1700
    e114:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    e118:	1c480803 	mcrrne	8, 0, r0, r8, cr3
    e11c:	00040000 	andeq	r0, r4, r0
    e120:	000a1506 	andeq	r1, sl, r6, lsl #10
    e124:	03090f00 	movweq	r0, #40704	; 0x9f00
    e128:	001e5403 	andseq	r5, lr, r3, lsl #8
    e12c:	00201900 	eoreq	r1, r0, r0, lsl #18
    e130:	0f300000 	svceq	0x00300000
    e134:	eb08030b 	bl	20ed68 <__ccfg+0x1eedc0>
    e138:	1700001e 	smladne	r0, lr, r0, r0
    e13c:	00001f22 	andeq	r1, r0, r2, lsr #30
    e140:	0803140f 	stmdaeq	r3, {r0, r1, r2, r3, sl, ip}
    e144:	00001c10 	andeq	r1, r0, r0, lsl ip
    e148:	0bf31700 	bleq	ffcd3d50 <_estack+0xdfcced50>
    e14c:	150f0000 	strne	r0, [pc, #-0]	; e154 <__exidx_end+0x883c>
    e150:	1c100803 	ldcne	8, cr0, [r0], {3}
    e154:	17020000 	strne	r0, [r2, -r0]
    e158:	00004c8c 	andeq	r4, r0, ip, lsl #25
    e15c:	0b03160f 	bleq	d39a0 <__ccfg+0xb39f8>
    e160:	00001df8 	strdeq	r1, [r0], -r8
    e164:	47521704 	ldrbmi	r1, [r2, -r4, lsl #14]
    e168:	170f0000 	strne	r0, [pc, -r0]
    e16c:	1c480903 	mcrrne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    e170:	17080000 	strne	r0, [r8, -r0]
    e174:	0000000f 	andeq	r0, r0, pc
    e178:	0f03180f 	svceq	0x0003180f
    e17c:	00001eeb 	andeq	r1, r0, fp, ror #29
    e180:	0969170c 	stmdbeq	r9!, {r2, r3, r8, r9, sl, ip}^
    e184:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    e188:	1efb1503 	cdpne	5, 15, cr1, cr11, cr3, {0}
    e18c:	002c0000 	eoreq	r0, ip, r0
    e190:	001e7b09 	andseq	r7, lr, r9, lsl #22
    e194:	001efb00 	andseq	pc, lr, r0, lsl #22
    e198:	00910a00 	addseq	r0, r1, r0, lsl #20
    e19c:	00030000 	andeq	r0, r3, r0
    e1a0:	1e880410 	mcrne	4, 4, r0, cr8, cr0, {0}
    e1a4:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
    e1a8:	0f00000b 	svceq	0x0000000b
    e1ac:	881b031c 	ldmdahi	fp, {r2, r3, r4, r8, r9}
    e1b0:	1f00001e 	svcne	0x0000001e
    e1b4:	00000bc8 	andeq	r0, r0, r8, asr #23
    e1b8:	14031e0f 	strne	r1, [r3], #-3599	; 0xfffff1f1
    e1bc:	00001f1d 	andeq	r1, r0, sp, lsl pc
    e1c0:	04100101 	ldreq	r0, [r0], #-257	; 0xfffffeff
    e1c4:	00001f01 	andeq	r1, r0, r1, lsl #30
    e1c8:	00071b25 	andeq	r1, r7, r5, lsr #22
    e1cc:	131d1000 	tstne	sp, #0
    e1d0:	00001c10 	andeq	r1, r0, r0, lsl ip
    e1d4:	f6250101 			; <UNDEFINED> instruction: 0xf6250101
    e1d8:	10000002 	andne	r0, r0, r2
    e1dc:	1c211a1e 			; <UNDEFINED> instruction: 0x1c211a1e
    e1e0:	01010000 	mrseq	r0, (UNDEF: 1)
    e1e4:	000c7525 	andeq	r7, ip, r5, lsr #10
    e1e8:	241e1000 	ldrcs	r1, [lr], #-0
    e1ec:	00001c21 	andeq	r1, r0, r1, lsr #24
    e1f0:	93250101 			; <UNDEFINED> instruction: 0x93250101
    e1f4:	1000000c 	andne	r0, r0, ip
    e1f8:	1f1d1422 	svcne	0x001d1422
    e1fc:	01010000 	mrseq	r0, (UNDEF: 1)
    e200:	00203925 	eoreq	r3, r0, r5, lsr #18
    e204:	27391100 	ldrcs	r1, [r9, -r0, lsl #2]!
    e208:	00000d5e 	andeq	r0, r0, lr, asr sp
    e20c:	27250101 	strcs	r0, [r5, -r1, lsl #2]!
    e210:	11000023 	tstne	r0, r3, lsr #32
    e214:	09f1153a 	ldmibeq	r1!, {r1, r3, r4, r5, r8, sl, ip}^
    e218:	01010000 	mrseq	r0, (UNDEF: 1)
    e21c:	00274325 	eoreq	r4, r7, r5, lsr #6
    e220:	1a3b1100 	bne	ed2628 <__ccfg+0xeb2680>
    e224:	00000bd8 	ldrdeq	r0, [r0], -r8
    e228:	e7250101 	str	r0, [r5, -r1, lsl #2]!
    e22c:	11000025 	tstne	r0, r5, lsr #32
    e230:	0c741a3c 			; <UNDEFINED> instruction: 0x0c741a3c
    e234:	01010000 	mrseq	r0, (UNDEF: 1)
    e238:	00006b09 	andeq	r6, r0, r9, lsl #22
    e23c:	001fa300 	andseq	sl, pc, r0, lsl #6
    e240:	00910a00 	addseq	r0, r1, r0, lsl #20
    e244:	00140000 	andseq	r0, r4, r0
    e248:	0029a527 	eoreq	sl, r9, r7, lsr #10
    e24c:	113d1200 	teqne	sp, r0, lsl #4
    e250:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    e254:	00b80305 	adcseq	r0, r8, r5, lsl #6
    e258:	5b282000 	blpl	a16260 <__ccfg+0x9f62b8>
    e25c:	1200001f 	andne	r0, r0, #31
    e260:	03052072 	movweq	r2, #20594	; 0x5072
    e264:	20000054 	andcs	r0, r0, r4, asr r0
    e268:	001f6928 	andseq	r6, pc, r8, lsr #18
    e26c:	0e961200 	cdpeq	2, 9, cr1, cr6, cr0, {0}
    e270:	003c0305 	eorseq	r0, ip, r5, lsl #6
    e274:	77282000 	strvc	r2, [r8, -r0]!
    e278:	1200001f 	andne	r0, r0, #31
    e27c:	030513ad 	movweq	r1, #21421	; 0x53ad
    e280:	200000a0 	andcs	r0, r0, r0, lsr #1
    e284:	001f8528 	andseq	r8, pc, r8, lsr #10
    e288:	13c21200 	bicne	r1, r2, #0, 4
    e28c:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    e290:	8a002000 	bhi	16298 <__exidx_end+0x10980>
    e294:	04000001 	streq	r0, [r0], #-1
    e298:	0030ec00 	eorseq	lr, r0, r0, lsl #24
    e29c:	3d010400 	cfstrscc	mvf0, [r1, #-0]
    e2a0:	0100002a 	tsteq	r0, sl, lsr #32
    e2a4:	00002a22 	andeq	r2, r0, r2, lsr #20
    e2a8:	00002b04 	andeq	r2, r0, r4, lsl #22
    e2ac:	00001100 	andeq	r1, r0, r0, lsl #2
    e2b0:	00000000 	andeq	r0, r0, r0
    e2b4:	000072f1 	strdeq	r7, [r0], -r1
    e2b8:	69060102 	stmdbvs	r6, {r1, r8}
    e2bc:	0300000c 	movweq	r0, #12
    e2c0:	00002a18 	andeq	r2, r0, r8, lsl sl
    e2c4:	00371d02 	eorseq	r1, r7, r2, lsl #26
    e2c8:	01020000 	mrseq	r0, (UNDEF: 2)
    e2cc:	000c6708 	andeq	r6, ip, r8, lsl #14
    e2d0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e2d4:	00000a77 	andeq	r0, r0, r7, ror sl
    e2d8:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    e2dc:	0200000d 	andeq	r0, r0, #13
    e2e0:	08090504 	stmdaeq	r9, {r2, r8, sl}
    e2e4:	b0030000 	andlt	r0, r3, r0
    e2e8:	02000029 	andeq	r0, r0, #41	; 0x29
    e2ec:	00005e41 	andeq	r5, r0, r1, asr #28
    e2f0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e2f4:	00000439 	andeq	r0, r0, r9, lsr r4
    e2f8:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    e2fc:	02000008 	andeq	r0, r0, #8
    e300:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
    e304:	04040000 	streq	r0, [r4], #-0
    e308:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e30c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e310:	0000043e 	andeq	r0, r0, lr, lsr r4
    e314:	002a1a03 	eoreq	r1, sl, r3, lsl #20
    e318:	2c140300 	ldccs	3, cr0, [r4], {-0}
    e31c:	03000000 	movweq	r0, #0
    e320:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    e324:	00532003 	subseq	r2, r3, r3
    e328:	dc030000 	stcle	0, cr0, [r3], {-0}
    e32c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e330:	0000a233 	andeq	sl, r0, r3, lsr r2
    e334:	a8040500 	stmdage	r4, {r8, sl}
    e338:	06000000 	streq	r0, [r0], -r0
    e33c:	002af203 	eoreq	pc, sl, r3, lsl #4
    e340:	b4340400 	ldrtlt	r0, [r4], #-1024	; 0xfffffc00
    e344:	05000000 	streq	r0, [r0, #-0]
    e348:	0000ba04 	andeq	fp, r0, r4, lsl #20
    e34c:	00c50700 	sbceq	r0, r5, r0, lsl #14
    e350:	81080000 	mrshi	r0, (UNDEF: 8)
    e354:	00000000 	andeq	r0, r0, r0
    e358:	002a0b09 	eoreq	r0, sl, r9, lsl #22
    e35c:	98990500 	ldmls	r9, {r8, sl}
    e360:	28000037 	stmdacs	r0, {r0, r1, r2, r4, r5}
    e364:	01000000 	mrseq	r0, (UNDEF: 0)
    e368:	00010b9c 	muleq	r1, ip, fp
    e36c:	2aed0a00 	bcs	ffb50b74 <_estack+0xdfb4bb74>
    e370:	35010000 	strcc	r0, [r1, #-0]
    e374:	00000097 	muleq	r0, r7, r0
    e378:	00003618 	andeq	r3, r0, r8, lsl r6
    e37c:	0029bb0b 	eoreq	fp, r9, fp, lsl #22
    e380:	0b370100 	bleq	dce788 <__ccfg+0xdae7e0>
    e384:	5d000001 	stcpl	0, cr0, [r0, #-4]
    e388:	0c000036 	stceq	0, cr0, [r0], {54}	; 0x36
    e38c:	000037a0 	andeq	r3, r0, r0, lsr #15
    e390:	00000177 	andeq	r0, r0, r7, ror r1
    e394:	0037ba0d 	eorseq	fp, r7, sp, lsl #20
    e398:	00018200 	andeq	r8, r1, r0, lsl #4
    e39c:	01020000 	mrseq	r0, (UNDEF: 2)
    e3a0:	000cb302 	andeq	fp, ip, r2, lsl #6
    e3a4:	29c70e00 	stmibcs	r7, {r9, sl, fp}^
    e3a8:	9a050000 	bls	14e3b0 <__ccfg+0x12e408>
    e3ac:	00000000 	andeq	r0, r0, r0
    e3b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    e3b4:	01779c01 	cmneq	r7, r1, lsl #24
    e3b8:	ed0a0000 	stc	0, cr0, [sl, #-0]
    e3bc:	0100002a 	tsteq	r0, sl, lsr #32
    e3c0:	0000a940 	andeq	sl, r0, r0, asr #18
    e3c4:	00369200 	eorseq	r9, r6, r0, lsl #4
    e3c8:	2b640a00 	blcs	1910bd0 <__ccfg+0x18f0c28>
    e3cc:	40010000 	andmi	r0, r1, r0
    e3d0:	00000081 	andeq	r0, r0, r1, lsl #1
    e3d4:	000036d7 	ldrdeq	r3, [r0], -r7
    e3d8:	0029bb0b 	eoreq	fp, r9, fp, lsl #22
    e3dc:	0b420100 	bleq	108e7e4 <__ccfg+0x106e83c>
    e3e0:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    e3e4:	0c000036 	stceq	0, cr0, [r0], {54}	; 0x36
    e3e8:	00000000 	andeq	r0, r0, r0
    e3ec:	00000177 	andeq	r0, r0, r7, ror r1
    e3f0:	0000000f 	andeq	r0, r0, pc
    e3f4:	00016d00 	andeq	r6, r1, r0, lsl #26
    e3f8:	50011000 	andpl	r1, r1, r0
    e3fc:	00007702 	andeq	r7, r0, r2, lsl #14
    e400:	0000000d 	andeq	r0, r0, sp
    e404:	00018200 	andeq	r8, r1, r0, lsl #4
    e408:	ed110000 	ldc	0, cr0, [r1, #-0]
    e40c:	06000029 	streq	r0, [r0], -r9, lsr #32
    e410:	00008c6a 	andeq	r8, r0, sl, ror #24
    e414:	29fc1100 	ldmibcs	ip!, {r8, ip}^
    e418:	84060000 	strhi	r0, [r6], #-0
    e41c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e420:	0000d500 	andeq	sp, r0, r0, lsl #10
    e424:	d8000400 	stmdale	r0, {sl}
    e428:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    e42c:	002a3d01 	eoreq	r3, sl, r1, lsl #26
    e430:	2bb00100 	blcs	fec0e838 <_estack+0xdec09838>
    e434:	2b040000 	blcs	10e43c <__ccfg+0xee494>
    e438:	11180000 	tstne	r8, r0
    e43c:	00000000 	andeq	r0, r0, r0
    e440:	74910000 	ldrvc	r0, [r1], #0
    e444:	a7020000 	strge	r0, [r2, -r0]
    e448:	0200002b 	andeq	r0, r0, #43	; 0x2b
    e44c:	0000301b 	andeq	r3, r0, fp, lsl r0
    e450:	06010300 	streq	r0, [r1], -r0, lsl #6
    e454:	00000c69 	andeq	r0, r0, r9, ror #24
    e458:	67080103 	strvs	r0, [r8, -r3, lsl #2]
    e45c:	0300000c 	movweq	r0, #12
    e460:	0a770502 	beq	1dcf870 <__ccfg+0x1daf8c8>
    e464:	02030000 	andeq	r0, r3, #0
    e468:	000d6407 	andeq	r6, sp, r7, lsl #8
    e46c:	2b9d0200 	blcs	fe74ec74 <_estack+0xde749c74>
    e470:	3f020000 	svccc	0x00020000
    e474:	00000057 	andeq	r0, r0, r7, asr r0
    e478:	09050403 	stmdbeq	r5, {r0, r1, sl}
    e47c:	03000008 	movweq	r0, #8
    e480:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    e484:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e488:	00080405 	andeq	r0, r8, r5, lsl #8
    e48c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    e490:	00000434 	andeq	r0, r0, r4, lsr r4
    e494:	69050404 	stmdbvs	r5, {r2, sl}
    e498:	0300746e 	movweq	r7, #1134	; 0x46e
    e49c:	043e0704 	ldrteq	r0, [lr], #-1796	; 0xfffff8fc
    e4a0:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
    e4a4:	0300002b 	movweq	r0, #43	; 0x2b
    e4a8:	00002513 	andeq	r2, r0, r3, lsl r5
    e4ac:	2b9f0200 	blcs	fe7cecb4 <_estack+0xde7c9cb4>
    e4b0:	1f030000 	svcne	0x00030000
    e4b4:	0000004c 	andeq	r0, r0, ip, asr #32
    e4b8:	002b6e05 	eoreq	r6, fp, r5, lsl #28
    e4bc:	8caa0400 	cfstrshi	mvf0, [sl]
    e4c0:	c0000000 	andgt	r0, r0, r0
    e4c4:	30000037 	andcc	r0, r0, r7, lsr r0
    e4c8:	01000000 	mrseq	r0, (UNDEF: 0)
    e4cc:	2be1069c 	blcs	ff84ff44 <_estack+0xdf84af44>
    e4d0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    e4d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    e4d8:	0000372d 	andeq	r3, r0, sp, lsr #14
    e4dc:	002bd206 	eoreq	sp, fp, r6, lsl #4
    e4e0:	8c3f0100 	ldfhis	f0, [pc], #-0	; e4e8 <__exidx_end+0x8bd0>
    e4e4:	46000000 	strmi	r0, [r0], -r0
    e4e8:	07000037 	smladxeq	r0, r7, r0, r0
    e4ec:	00002b90 	muleq	r0, r0, fp
    e4f0:	00814001 	addeq	r4, r1, r1
    e4f4:	51010000 	mrspl	r0, (UNDEF: 1)
    e4f8:	01430000 	mrseq	r0, (UNDEF: 67)
    e4fc:	00040000 	andeq	r0, r4, r0
    e500:	00003247 	andeq	r3, r0, r7, asr #4
    e504:	2a3d0104 	bcs	f4e91c <__ccfg+0xf2e974>
    e508:	92010000 	andls	r0, r1, #0
    e50c:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e510:	2800002b 	stmdacs	r0, {r0, r1, r3, r5}
    e514:	00000011 	andeq	r0, r0, r1, lsl r0
    e518:	fc000000 	stc2	0, cr0, [r0], {-0}
    e51c:	02000075 	andeq	r0, r0, #117	; 0x75
    e520:	0c690601 	stcleq	6, cr0, [r9], #-4
    e524:	01020000 	mrseq	r0, (UNDEF: 2)
    e528:	000c6708 	andeq	r6, ip, r8, lsl #14
    e52c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e530:	00000a77 	andeq	r0, r0, r7, ror sl
    e534:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    e538:	0200000d 	andeq	r0, r0, #13
    e53c:	08090504 	stmdaeq	r9, {r2, r8, sl}
    e540:	b0030000 	andlt	r0, r3, r0
    e544:	02000029 	andeq	r0, r0, #41	; 0x29
    e548:	00005341 	andeq	r5, r0, r1, asr #6
    e54c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e550:	00000439 	andeq	r0, r0, r9, lsr r4
    e554:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    e558:	03000008 	movweq	r0, #8
    e55c:	00002c3c 	andeq	r2, r0, ip, lsr ip
    e560:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    e564:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e568:	00043407 	andeq	r3, r4, r7, lsl #8
    e56c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e570:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e574:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    e578:	03000004 	movweq	r0, #4
    e57c:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    e580:	00482003 	subeq	r2, r8, r3
    e584:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    e588:	0300002c 	movweq	r0, #44	; 0x2c
    e58c:	00006126 	andeq	r6, r0, r6, lsr #2
    e590:	2c070500 	cfstr32cs	mvfx0, [r7], {-0}
    e594:	45040000 	strmi	r0, [r4, #-0]
    e598:	00008103 	andeq	r8, r0, r3, lsl #2
    e59c:	0037f000 	eorseq	pc, r7, r0
    e5a0:	00002000 	andeq	r2, r0, r0
    e5a4:	dd9c0100 	ldfles	f0, [ip]
    e5a8:	06000000 	streq	r0, [r0], -r0
    e5ac:	00002bf8 	strdeq	r2, [r0], -r8
    e5b0:	00814001 	addeq	r4, r1, r1
    e5b4:	377b0000 	ldrbcc	r0, [fp, -r0]!
    e5b8:	47060000 	strmi	r0, [r6, -r0]
    e5bc:	0100002c 	tsteq	r0, ip, lsr #32
    e5c0:	00008141 	andeq	r8, r0, r1, asr #2
    e5c4:	00378e00 	eorseq	r8, r7, r0, lsl #28
    e5c8:	2c2a0700 	stccs	7, cr0, [sl], #-0
    e5cc:	42010000 	andmi	r0, r1, #0
    e5d0:	00000081 	andeq	r0, r0, r1, lsl #1
    e5d4:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    e5d8:	00002c59 	andeq	r2, r0, r9, asr ip
    e5dc:	8c035304 	stchi	3, cr5, [r3], {4}
    e5e0:	10000000 	andne	r0, r0, r0
    e5e4:	18000038 	stmdane	r0, {r3, r4, r5}
    e5e8:	01000000 	mrseq	r0, (UNDEF: 0)
    e5ec:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    e5f0:	01080800 	tsteq	r8, r0, lsl #16
    e5f4:	00011659 	andeq	r1, r1, r9, asr r6
    e5f8:	2bec0900 	blcs	ffb10a00 <_estack+0xdfb0ba00>
    e5fc:	5a010000 	bpl	4e604 <__ccfg+0x2e65c>
    e600:	0000008c 	andeq	r0, r0, ip, lsl #1
    e604:	002c8509 	eoreq	r8, ip, r9, lsl #10
    e608:	2f5b0100 	svccs	0x005b0100
    e60c:	00000001 	andeq	r0, r0, r1
    e610:	002c7a0a 	eoreq	r7, ip, sl, lsl #20
    e614:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    e618:	07000000 	streq	r0, [r0, -r0]
    e61c:	00002c2a 	andeq	r2, r0, sl, lsr #24
    e620:	00815d01 	addeq	r5, r1, r1, lsl #26
    e624:	51010000 	mrspl	r0, (UNDEF: 1)
    e628:	00810b00 	addeq	r0, r1, r0, lsl #22
    e62c:	013f0000 	teqeq	pc, r0
    e630:	3f0c0000 	svccc	0x000c0000
    e634:	01000001 	tsteq	r0, r1
    e638:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e63c:	00002cb1 			; <UNDEFINED> instruction: 0x00002cb1
    e640:	00013600 	andeq	r3, r1, r0, lsl #12
    e644:	f1000400 			; <UNDEFINED> instruction: 0xf1000400
    e648:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    e64c:	002a3d01 	eoreq	r3, sl, r1, lsl #26
    e650:	2cef0100 	stfcse	f0, [pc]	; e658 <__exidx_end+0x8d40>
    e654:	2b040000 	blcs	10e65c <__ccfg+0xee6b4>
    e658:	11400000 	mrsne	r0, (UNDEF: 64)
    e65c:	00000000 	andeq	r0, r0, r0
    e660:	77a90000 	strvc	r0, [r9, r0]!
    e664:	01020000 	mrseq	r0, (UNDEF: 2)
    e668:	000c6906 	andeq	r6, ip, r6, lsl #18
    e66c:	08010200 	stmdaeq	r1, {r9}
    e670:	00000c67 	andeq	r0, r0, r7, ror #24
    e674:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    e678:	0200000a 	andeq	r0, r0, #10
    e67c:	0d640702 	stcleq	7, cr0, [r4, #-8]!
    e680:	04020000 	streq	r0, [r2], #-0
    e684:	00080905 	andeq	r0, r8, r5, lsl #18
    e688:	29b00300 	ldmibcs	r0!, {r8, r9}
    e68c:	41020000 	mrsmi	r0, (UNDEF: 2)
    e690:	00000053 	andeq	r0, r0, r3, asr r0
    e694:	39070402 	stmdbcc	r7, {r1, sl}
    e698:	02000004 	andeq	r0, r0, #4
    e69c:	08040508 	stmdaeq	r4, {r3, r8, sl}
    e6a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e6a4:	00043407 	andeq	r3, r4, r7, lsl #8
    e6a8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e6ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e6b0:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
    e6b4:	03000004 	movweq	r0, #4
    e6b8:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    e6bc:	00482003 	subeq	r2, r8, r3
    e6c0:	ed050000 	stc	0, cr0, [r5, #-0]
    e6c4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e6c8:	0000766a 	andeq	r7, r0, sl, ror #12
    e6cc:	00382800 	eorseq	r2, r8, r0, lsl #16
    e6d0:	00000800 	andeq	r0, r0, r0, lsl #16
    e6d4:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    e6d8:	06000000 	streq	r0, [r0], -r0
    e6dc:	00002cdd 	ldrdeq	r2, [r0], -sp
    e6e0:	00767701 	rsbseq	r7, r6, r1, lsl #14
    e6e4:	05000000 	streq	r0, [r0, #-0]
    e6e8:	00002d0a 	andeq	r2, r0, sl, lsl #26
    e6ec:	00767804 	rsbseq	r7, r6, r4, lsl #16
    e6f0:	00000000 	andeq	r0, r0, r0
    e6f4:	00060000 	andeq	r0, r6, r0
    e6f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    e6fc:	000000cb 	andeq	r0, r0, fp, asr #1
    e700:	002cdd06 	eoreq	sp, ip, r6, lsl #26
    e704:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    e708:	00000000 	andeq	r0, r0, r0
    e70c:	0029fc05 	eoreq	pc, r9, r5, lsl #24
    e710:	76840400 	strvc	r0, [r4], r0, lsl #8
    e714:	30000000 	andcc	r0, r0, r0
    e718:	08000038 	stmdaeq	r0, {r3, r4, r5}
    e71c:	01000000 	mrseq	r0, (UNDEF: 0)
    e720:	0000f19c 	muleq	r0, ip, r1
    e724:	2cdd0700 	ldclcs	7, cr0, [sp], {0}
    e728:	0f010000 	svceq	0x00010000
    e72c:	00007601 	andeq	r7, r0, r1, lsl #12
    e730:	ba080000 	blt	20e738 <__ccfg+0x1ee790>
    e734:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e738:	0076015b 	rsbseq	r0, r6, fp, asr r1
    e73c:	00000000 	andeq	r0, r0, r0
    e740:	00060000 	andeq	r0, r6, r0
    e744:	9c010000 	stcls	0, cr0, [r1], {-0}
    e748:	00000118 	andeq	r0, r0, r8, lsl r1
    e74c:	002cdd07 	eoreq	sp, ip, r7, lsl #26
    e750:	015a0100 	cmpeq	sl, r0, lsl #2
    e754:	00000076 	andeq	r0, r0, r6, ror r0
    e758:	2cce0900 			; <UNDEFINED> instruction: 0x2cce0900
    e75c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    e760:	00000001 	andeq	r0, r0, r1
    e764:	00000800 	andeq	r0, r0, r0, lsl #16
    e768:	0a9c0100 	beq	fe70eb70 <_estack+0xde709b70>
    e76c:	00002ce5 	andeq	r2, r0, r5, ror #25
    e770:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    e774:	01000000 	mrseq	r0, (UNDEF: 0)
    e778:	bf000050 	svclt	0x00000050
    e77c:	04000008 	streq	r0, [r0], #-8
    e780:	0033a100 	eorseq	sl, r3, r0, lsl #2
    e784:	3d010400 	cfstrscc	mvf0, [r1, #-0]
    e788:	0100002a 	tsteq	r0, sl, lsr #32
    e78c:	00002e42 	andeq	r2, r0, r2, asr #28
    e790:	00002b04 	andeq	r2, r0, r4, lsl #22
    e794:	00001188 	andeq	r1, r0, r8, lsl #3
    e798:	00000000 	andeq	r0, r0, r0
    e79c:	00007949 	andeq	r7, r0, r9, asr #18
    e7a0:	69060102 	stmdbvs	r6, {r1, r8}
    e7a4:	0300000c 	movweq	r0, #12
    e7a8:	00002a18 	andeq	r2, r0, r8, lsl sl
    e7ac:	00371d03 	eorseq	r1, r7, r3, lsl #26
    e7b0:	01020000 	mrseq	r0, (UNDEF: 2)
    e7b4:	000c6708 	andeq	r6, ip, r8, lsl #14
    e7b8:	31e90300 	mvncc	r0, r0, lsl #6
    e7bc:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    e7c0:	00000049 	andeq	r0, r0, r9, asr #32
    e7c4:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    e7c8:	0300000a 	movweq	r0, #10
    e7cc:	00002e0e 	andeq	r2, r0, lr, lsl #28
    e7d0:	005b2b03 	subseq	r2, fp, r3, lsl #22
    e7d4:	02020000 	andeq	r0, r2, #0
    e7d8:	000d6407 	andeq	r6, sp, r7, lsl #8
    e7dc:	2b9d0300 	blcs	fe74f3e4 <_estack+0xde74a3e4>
    e7e0:	3f030000 	svccc	0x00030000
    e7e4:	0000006d 	andeq	r0, r0, sp, rrx
    e7e8:	09050402 	stmdbeq	r5, {r1, sl}
    e7ec:	03000008 	movweq	r0, #8
    e7f0:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
    e7f4:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    e7f8:	04020000 	streq	r0, [r2], #-0
    e7fc:	00043907 	andeq	r3, r4, r7, lsl #18
    e800:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e804:	00000804 	andeq	r0, r0, r4, lsl #16
    e808:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
    e80c:	04000004 	streq	r0, [r0], #-4
    e810:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e814:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e818:	00043e07 	andeq	r3, r4, r7, lsl #28
    e81c:	2a1a0300 	bcs	68f424 <__ccfg+0x66f47c>
    e820:	14040000 	strne	r0, [r4], #-0
    e824:	0000002c 	andeq	r0, r0, ip, lsr #32
    e828:	0031eb03 	eorseq	lr, r1, r3, lsl #22
    e82c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    e830:	03000000 	movweq	r0, #0
    e834:	00002e10 	andeq	r2, r0, r0, lsl lr
    e838:	00501a04 	subseq	r1, r0, r4, lsl #20
    e83c:	9f030000 	svcls	0x00030000
    e840:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    e844:	0000621f 	andeq	r6, r0, pc, lsl r2
    e848:	29b20300 	ldmibcs	r2!, {r8, r9}
    e84c:	20040000 	andcs	r0, r4, r0
    e850:	00000074 	andeq	r0, r0, r4, ror r0
    e854:	0029dc03 	eoreq	sp, r9, r3, lsl #24
    e858:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    e85c:	05000000 	streq	r0, [r0, #-0]
    e860:	0000ea04 	andeq	lr, r0, r4, lsl #20
    e864:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    e868:	000000f1 	strdeq	r0, [r0], -r1
    e86c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    e870:	00a20800 	adceq	r0, r2, r0, lsl #16
    e874:	03000000 	movweq	r0, #0
    e878:	00003112 	andeq	r3, r0, r2, lsl r1
    e87c:	01074206 	tsteq	r7, r6, lsl #4
    e880:	04050000 	streq	r0, [r5], #-0
    e884:	0000010d 	andeq	r0, r0, sp, lsl #2
    e888:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e88c:	00012600 	andeq	r2, r1, r0, lsl #12
    e890:	01260800 			; <UNDEFINED> instruction: 0x01260800
    e894:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e898:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e89c:	000000ce 	andeq	r0, r0, lr, asr #1
    e8a0:	a2040500 	andge	r0, r4, #0, 10
    e8a4:	03000000 	movweq	r0, #0
    e8a8:	0000327a 	andeq	r3, r0, sl, ror r2
    e8ac:	01374606 	teqeq	r7, r6, lsl #12
    e8b0:	04050000 	streq	r0, [r5], #-0
    e8b4:	0000013d 	andeq	r0, r0, sp, lsr r1
    e8b8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    e8bc:	32c30300 	sbccc	r0, r3, #0, 6
    e8c0:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    e8c4:	00000137 	andeq	r0, r0, r7, lsr r1
    e8c8:	002faa03 	eoreq	sl, pc, r3, lsl #20
    e8cc:	584a0600 	stmdapl	sl, {r9, sl}^
    e8d0:	05000001 	streq	r0, [r0, #-1]
    e8d4:	00015e04 	andeq	r5, r1, r4, lsl #28
    e8d8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    e8dc:	016d0000 	cmneq	sp, r0
    e8e0:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e8e4:	00000000 	andeq	r0, r0, r0
    e8e8:	002eb903 	eoreq	fp, lr, r3, lsl #18
    e8ec:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    e8f0:	03000001 	movweq	r0, #1
    e8f4:	00002e19 	andeq	r2, r0, r9, lsl lr
    e8f8:	01074e06 	tsteq	r7, r6, lsl #28
    e8fc:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    e900:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e904:	0000e451 	andeq	lr, r0, r1, asr r4
    e908:	2d330300 	ldccs	3, cr0, [r3, #-0]
    e90c:	53060000 	movwpl	r0, #24576	; 0x6000
    e910:	00000199 	muleq	r0, r9, r1
    e914:	019f0405 	orrseq	r0, pc, r5, lsl #8
    e918:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e91c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    e920:	08000001 	stmdaeq	r0, {r0}
    e924:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    e928:	0000b808 	andeq	fp, r0, r8, lsl #16
    e92c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    e930:	05000000 	streq	r0, [r0, #-0]
    e934:	0000b804 	andeq	fp, r0, r4, lsl #16
    e938:	31280300 			; <UNDEFINED> instruction: 0x31280300
    e93c:	57060000 	strpl	r0, [r6, -r0]
    e940:	000001c9 	andeq	r0, r0, r9, asr #3
    e944:	01cf0405 	biceq	r0, pc, r5, lsl #8
    e948:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e94c:	e3000000 	movw	r0, #0
    e950:	08000001 	stmdaeq	r0, {r0}
    e954:	000001e3 	andeq	r0, r0, r3, ror #3
    e958:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e95c:	04050000 	streq	r0, [r5], #-0
    e960:	000000ce 	andeq	r0, r0, lr, asr #1
    e964:	002f1c03 	eoreq	r1, pc, r3, lsl #24
    e968:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    e96c:	03000001 	movweq	r0, #1
    e970:	00002fd6 	ldrdeq	r2, [r0], -r6
    e974:	01c95d06 	biceq	r5, r9, r6, lsl #26
    e978:	45030000 	strmi	r0, [r3, #-0]
    e97c:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e980:	0001c960 	andeq	ip, r1, r0, ror #18
    e984:	31360300 	teqcc	r6, r0, lsl #6
    e988:	63060000 	movwvs	r0, #24576	; 0x6000
    e98c:	000000e4 	andeq	r0, r0, r4, ror #1
    e990:	002d8303 	eoreq	r8, sp, r3, lsl #6
    e994:	20650600 	rsbcs	r0, r5, r0, lsl #12
    e998:	05000002 	streq	r0, [r0, #-2]
    e99c:	00022604 	andeq	r2, r2, r4, lsl #12
    e9a0:	02310700 	eorseq	r0, r1, #0, 14
    e9a4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e9a8:	00000000 	andeq	r0, r0, r0
    e9ac:	0032d403 	eorseq	sp, r2, r3, lsl #8
    e9b0:	20670600 	rsbcs	r0, r7, r0, lsl #12
    e9b4:	03000002 	movweq	r0, #2
    e9b8:	00003018 	andeq	r3, r0, r8, lsl r0
    e9bc:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    e9c0:	b3030000 	movwlt	r0, #12288	; 0x3000
    e9c4:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e9c8:	0000eb6b 	andeq	lr, r0, fp, ror #22
    e9cc:	2fe50300 	svccs	0x00e50300
    e9d0:	6d060000 	stcvs	0, cr0, [r6, #-0]
    e9d4:	000000eb 	andeq	r0, r0, fp, ror #1
    e9d8:	002ff703 	eoreq	pc, pc, r3, lsl #14
    e9dc:	eb6f0600 	bl	1bd01e4 <__ccfg+0x1bb023c>
    e9e0:	0b000000 	bleq	e9e8 <__exidx_end+0x90d0>
    e9e4:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    e9e8:	0c000003 	stceq	0, cr0, [r0], {3}
    e9ec:	00002fbb 			; <UNDEFINED> instruction: 0x00002fbb
    e9f0:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    e9f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    e9f8:	000032a6 	andeq	r3, r0, r6, lsr #5
    e9fc:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    ea00:	0c040000 	stceq	0, cr0, [r4], {-0}
    ea04:	00002fcc 	andeq	r2, r0, ip, asr #31
    ea08:	01427e06 	cmpeq	r2, r6, lsl #28
    ea0c:	0c080000 	stceq	0, cr0, [r8], {-0}
    ea10:	000031c5 	andeq	r3, r0, r5, asr #3
    ea14:	014d7f06 	cmpeq	sp, r6, lsl #30
    ea18:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ea1c:	000031d7 	ldrdeq	r3, [r0], -r7
    ea20:	016d8006 	cmneq	sp, r6
    ea24:	0c100000 	ldceq	0, cr0, [r0], {-0}
    ea28:	00002eca 	andeq	r2, r0, sl, asr #29
    ea2c:	01788106 	cmneq	r8, r6, lsl #2
    ea30:	0c140000 	ldceq	0, cr0, [r4], {-0}
    ea34:	00002e86 	andeq	r2, r0, r6, lsl #29
    ea38:	01838206 	orreq	r8, r3, r6, lsl #4
    ea3c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    ea40:	00002fc1 	andeq	r2, r0, r1, asr #31
    ea44:	018e8306 	orreq	r8, lr, r6, lsl #6
    ea48:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    ea4c:	00003150 	andeq	r3, r0, r0, asr r1
    ea50:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    ea54:	0c200000 	stceq	0, cr0, [r0], #-0
    ea58:	00002f48 	andeq	r2, r0, r8, asr #30
    ea5c:	01e98506 	mvneq	r8, r6, lsl #10
    ea60:	0c240000 	stceq	0, cr0, [r4], #-0
    ea64:	00002fa0 	andeq	r2, r0, r0, lsr #31
    ea68:	01f48606 	mvnseq	r8, r6, lsl #12
    ea6c:	0c280000 	stceq	0, cr0, [r8], #-0
    ea70:	00003205 	andeq	r3, r0, r5, lsl #4
    ea74:	01ff8706 	mvnseq	r8, r6, lsl #14
    ea78:	0c2c0000 	stceq	0, cr0, [ip], #-0
    ea7c:	00002ee5 	andeq	r2, r0, r5, ror #29
    ea80:	02158806 	andseq	r8, r5, #393216	; 0x60000
    ea84:	0c300000 	ldceq	0, cr0, [r0], #-0
    ea88:	000031f3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    ea8c:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    ea90:	0c340000 	ldceq	0, cr0, [r4], #-0
    ea94:	00002dc4 	andeq	r2, r0, r4, asr #27
    ea98:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    ea9c:	0c380000 	ldceq	0, cr0, [r8], #-0
    eaa0:	00003007 	andeq	r3, r0, r7
    eaa4:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    eaa8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    eaac:	000031a6 	andeq	r3, r0, r6, lsr #3
    eab0:	02478c06 	subeq	r8, r7, #1536	; 0x600
    eab4:	0c400000 	mareq	acc0, r0, r0
    eab8:	00002f2a 	andeq	r2, r0, sl, lsr #30
    eabc:	02528d06 	subseq	r8, r2, #384	; 0x180
    eac0:	0c440000 	mareq	acc0, r0, r4
    eac4:	00002d74 	andeq	r2, r0, r4, ror sp
    eac8:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    eacc:	00480000 	subeq	r0, r8, r0
    ead0:	0030d603 	eorseq	sp, r0, r3, lsl #12
    ead4:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    ead8:	0b000002 	bleq	eae8 <__exidx_end+0x91d0>
    eadc:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    eae0:	0c000003 	stceq	0, cr0, [r0], {3}
    eae4:	00002e2a 	andeq	r2, r0, sl, lsr #28
    eae8:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    eaec:	0c000000 	stceq	0, cr0, [r0], {-0}
    eaf0:	0000309c 	muleq	r0, ip, r0
    eaf4:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    eaf8:	0c040000 	stceq	0, cr0, [r4], {-0}
    eafc:	00002d94 	muleq	r0, r4, sp
    eb00:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    eb04:	0c080000 	stceq	0, cr0, [r8], {-0}
    eb08:	00002e5d 	andeq	r2, r0, sp, asr lr
    eb0c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    eb10:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    eb14:	00002dd7 	ldrdeq	r2, [r0], -r7
    eb18:	00c35901 	sbceq	r5, r3, r1, lsl #18
    eb1c:	00100000 	andseq	r0, r0, r0
    eb20:	0030c703 	eorseq	ip, r0, r3, lsl #14
    eb24:	605a0100 	subsvs	r0, sl, r0, lsl #2
    eb28:	0d000003 	stceq	0, cr0, [r0, #-12]
    eb2c:	00002d1b 	andeq	r2, r0, fp, lsl sp
    eb30:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    eb34:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    eb38:	000030f5 	strdeq	r3, [r0], -r5
    eb3c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    eb40:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    eb44:	0100002d 	tsteq	r0, sp, lsr #32
    eb48:	0000ce65 	andeq	ip, r0, r5, ror #28
    eb4c:	540f0000 	strpl	r0, [pc], #-0	; eb54 <__exidx_end+0x923c>
    eb50:	0200002d 	andeq	r0, r0, #45	; 0x2d
    eb54:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    eb58:	fb010000 	blx	4eb62 <__ccfg+0x2ebba>
    eb5c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    eb60:	000030f5 	strdeq	r3, [r0], -r5
    eb64:	00cea001 	sbceq	sl, lr, r1
    eb68:	b5100000 	ldrlt	r0, [r0, #-0]
    eb6c:	01000031 	tsteq	r0, r1, lsr r0
    eb70:	0000cea2 	andeq	ip, r0, r2, lsr #29
    eb74:	b0110000 	andslt	r0, r1, r0
    eb78:	38000003 	stmdacc	r0, {r0, r1}
    eb7c:	5c000038 	stcpl	0, cr0, [r0], {56}	; 0x38
    eb80:	01000000 	mrseq	r0, (UNDEF: 0)
    eb84:	0004b69c 	muleq	r4, ip, r6
    eb88:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    eb8c:	37a10000 	strcc	r0, [r1, r0]!
    eb90:	c7120000 	ldrgt	r0, [r2, -r0]
    eb94:	cd000003 	stcgt	0, cr0, [r0, #-12]
    eb98:	13000037 	movwne	r0, #55	; 0x37
    eb9c:	00003872 	andeq	r3, r0, r2, ror r8
    eba0:	00000014 	andeq	r0, r0, r4, lsl r0
    eba4:	00000461 	andeq	r0, r0, r1, ror #8
    eba8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    ebac:	0037f900 	eorseq	pc, r7, r0, lsl #18
    ebb0:	03c71200 	biceq	r1, r7, #0, 4
    ebb4:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
    ebb8:	86140000 	ldrhi	r0, [r4], -r0
    ebbc:	02000038 	andeq	r0, r0, #56	; 0x38
    ebc0:	01150074 	tsteq	r5, r4, ror r0
    ebc4:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    ebc8:	3c015201 	sfmcc	f5, 4, [r1], {1}
    ebcc:	01510115 	cmpeq	r1, r5, lsl r1
    ebd0:	50011530 	andpl	r1, r1, r0, lsr r5
    ebd4:	a0000c05 	andge	r0, r0, r5, lsl #24
    ebd8:	0000400c 	andeq	r4, r0, ip
    ebdc:	00385616 	eorseq	r5, r8, r6, lsl r6
    ebe0:	00760200 	rsbseq	r0, r6, r0, lsl #4
    ebe4:	0000048d 	andeq	r0, r0, sp, lsl #9
    ebe8:	01530115 	cmpeq	r3, r5, lsl r1
    ebec:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    ebf0:	01153101 	tsteq	r5, r1, lsl #2
    ebf4:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ebf8:	0c055001 	stceq	0, cr5, [r5], {1}
    ebfc:	400ca000 	andmi	sl, ip, r0
    ec00:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    ec04:	00007402 	andeq	r7, r0, r2, lsl #8
    ec08:	00386e14 	eorseq	r6, r8, r4, lsl lr
    ec0c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    ec10:	01530115 	cmpeq	r3, r5, lsl r1
    ec14:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    ec18:	01153201 	tsteq	r5, r1, lsl #4
    ec1c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ec20:	0c055001 	stceq	0, cr5, [r5], {1}
    ec24:	400ca000 	andmi	sl, ip, r0
    ec28:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    ec2c:	00007402 	andeq	r7, r0, r2, lsl #8
    ec30:	03d31100 	bicseq	r1, r3, #0, 2
    ec34:	38940000 	ldmcc	r4, {}	; <UNPREDICTABLE>
    ec38:	002c0000 	eoreq	r0, ip, r0
    ec3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec40:	0000050d 	andeq	r0, r0, sp, lsl #10
    ec44:	0003e412 	andeq	lr, r3, r2, lsl r4
    ec48:	00382d00 	eorseq	r2, r8, r0, lsl #26
    ec4c:	03ef1700 	mvneq	r1, #0, 14
    ec50:	50010000 	andpl	r0, r1, r0
    ec54:	00117018 	andseq	r7, r1, r8, lsl r0
    ec58:	0004f400 	andeq	pc, r4, r0, lsl #8
    ec5c:	03e41900 	mvneq	r1, #0, 18
    ec60:	1a040000 	bne	10ec68 <__ccfg+0xeecc0>
    ec64:	00001170 	andeq	r1, r0, r0, ror r1
    ec68:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    ec6c:	14000000 	strne	r0, [r0], #-0
    ec70:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
    ec74:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    ec78:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ec7c:	50011534 	andpl	r1, r1, r4, lsr r5
    ec80:	a0000c05 	andge	r0, r0, r5, lsl #24
    ec84:	0000400c 	andeq	r4, r0, ip
    ec88:	00328b1c 	eorseq	r8, r2, ip, lsl fp
    ec8c:	01840200 	orreq	r0, r4, r0, lsl #4
    ec90:	000000ce 	andeq	r0, r0, lr, asr #1
    ec94:	00000000 	andeq	r0, r0, r0
    ec98:	00000090 	muleq	r0, r0, r0
    ec9c:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    eca0:	e11d0000 	tst	sp, r0
    eca4:	01000030 	tsteq	r0, r0, lsr r0
    eca8:	0000cec2 	andeq	ip, r0, r2, asr #29
    ecac:	00384e00 	eorseq	r4, r8, r0, lsl #28
    ecb0:	30541e00 	subscc	r1, r4, r0, lsl #28
    ecb4:	c4010000 	strgt	r0, [r1], #-0
    ecb8:	000000ce 	andeq	r0, r0, lr, asr #1
    ecbc:	0000387a 	andeq	r3, r0, sl, ror r8
    ecc0:	00306d1e 	eorseq	r6, r0, lr, lsl sp
    ecc4:	c3c50100 	bicgt	r0, r5, #0, 2
    ecc8:	8d000000 	stchi	0, cr0, [r0, #-0]
    eccc:	1e000038 	mcrne	0, 0, r0, cr0, cr8, {1}
    ecd0:	00002de3 	andeq	r2, r0, r3, ror #27
    ecd4:	00cec601 	sbceq	ip, lr, r1, lsl #12
    ecd8:	38b40000 	ldmcc	r4!, {}	; <UNPREDICTABLE>
    ecdc:	001f0000 	andseq	r0, pc, r0
    ece0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    ece4:	1f000008 	svcne	0x00000008
    ece8:	00000000 	andeq	r0, r0, r0
    ecec:	000008aa 	andeq	r0, r0, sl, lsr #17
    ecf0:	2e922000 	cdpcs	0, 9, cr2, cr2, cr0, {0}
    ecf4:	91020000 	mrsls	r0, (UNDEF: 2)
    ecf8:	0038c001 	eorseq	ip, r8, r1
    ecfc:	00001800 	andeq	r1, r0, r0, lsl #16
    ed00:	ae9c0100 	fmlgee	f0, f4, f0
    ed04:	21000005 	tstcs	r0, r5
    ed08:	000038ca 	andeq	r3, r0, sl, asr #17
    ed0c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    ed10:	000005a4 	andeq	r0, r0, r4, lsr #11
    ed14:	01510115 	cmpeq	r1, r5, lsl r1
    ed18:	50011531 	andpl	r1, r1, r1, lsr r5
    ed1c:	1f003301 	svcne	0x00003301
    ed20:	000038ce 	andeq	r3, r0, lr, asr #17
    ed24:	0000089e 	muleq	r0, lr, r8
    ed28:	30ab2200 	adccc	r2, fp, r0, lsl #4
    ed2c:	22020000 	andcs	r0, r2, #0
    ed30:	0005bb01 	andeq	fp, r5, r1, lsl #22
    ed34:	01020300 	mrseq	r0, LR_svc
    ed38:	000cb302 	andeq	fp, ip, r2, lsl #6
    ed3c:	31002300 	mrscc	r2, LR_irq
    ed40:	40020000 	andmi	r0, r2, r0
    ed44:	a21c0301 	andsge	r0, ip, #67108864	; 0x4000000
    ed48:	0200002d 	andeq	r0, r0, #45	; 0x2d
    ed4c:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    ed50:	38d80000 	ldmcc	r8, {}^	; <UNPREDICTABLE>
    ed54:	00600000 	rsbeq	r0, r0, r0
    ed58:	9c010000 	stcls	0, cr0, [r1], {-0}
    ed5c:	00000677 	andeq	r0, r0, r7, ror r6
    ed60:	00308c24 	eorseq	r8, r0, r4, lsr #24
    ed64:	01020100 	mrseq	r0, (UNDEF: 18)
    ed68:	000000ce 	andeq	r0, r0, lr, asr #1
    ed6c:	00003908 	andeq	r3, r0, r8, lsl #18
    ed70:	00315924 	eorseq	r5, r1, r4, lsr #18
    ed74:	01030100 	mrseq	r0, (UNDEF: 19)
    ed78:	000000ce 	andeq	r0, r0, lr, asr #1
    ed7c:	0000391b 	andeq	r3, r0, fp, lsl r9
    ed80:	0005ae25 	andeq	sl, r5, r5, lsr #28
    ed84:	0038e400 	eorseq	lr, r8, r0, lsl #8
    ed88:	00001000 	andeq	r1, r0, r0
    ed8c:	01090100 	mrseq	r0, (UNDEF: 25)
    ed90:	0000063c 	andeq	r0, r0, ip, lsr r6
    ed94:	0038f414 	eorseq	pc, r8, r4, lsl r4	; <UNPREDICTABLE>
    ed98:	00740200 	rsbseq	r0, r4, r0, lsl #4
    ed9c:	01530115 	cmpeq	r3, r5, lsl r1
    eda0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    eda4:	01153101 	tsteq	r5, r1, lsl #2
    eda8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    edac:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    edb0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    edb4:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    edb8:	000005c2 	andeq	r0, r0, r2, asr #11
    edbc:	000038f6 	strdeq	r3, [r0], -r6
    edc0:	00000008 	andeq	r0, r0, r8
    edc4:	5a010a01 	bpl	515d0 <__ccfg+0x31628>
    edc8:	1f000006 	svcne	0x00000006
    edcc:	000038fe 	strdeq	r3, [r0], -lr
    edd0:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    edd4:	38e02100 	stmiacc	r0!, {r8, sp}^
    edd8:	03d30000 	bicseq	r0, r3, #0
    eddc:	066d0000 	strbteq	r0, [sp], -r0
    ede0:	01150000 	tsteq	r5, r0
    ede4:	00310150 	eorseq	r0, r1, r0, asr r1
    ede8:	0039021f 	eorseq	r0, r9, pc, lsl r2
    edec:	00089e00 	andeq	r9, r8, r0, lsl #28
    edf0:	f7200000 			; <UNDEFINED> instruction: 0xf7200000
    edf4:	0200002e 	andeq	r0, r0, #46	; 0x2e
    edf8:	393801ae 	ldmdbcc	r8!, {r1, r2, r3, r5, r7, r8}
    edfc:	00340000 	eorseq	r0, r4, r0
    ee00:	9c010000 	stcls	0, cr0, [r1], {-0}
    ee04:	000006e9 	andeq	r0, r0, r9, ror #13
    ee08:	0005c225 	andeq	ip, r5, r5, lsr #4
    ee0c:	00394a00 	eorseq	r4, r9, r0, lsl #20
    ee10:	00000800 	andeq	r0, r0, r0, lsl #16
    ee14:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    ee18:	000006ab 	andeq	r0, r0, fp, lsr #13
    ee1c:	0039521f 	eorseq	r5, r9, pc, lsl r2
    ee20:	0008b500 	andeq	fp, r8, r0, lsl #10
    ee24:	42210000 	eormi	r0, r1, #0
    ee28:	b0000039 	andlt	r0, r0, r9, lsr r0
    ee2c:	c3000003 	movwgt	r0, #3
    ee30:	15000006 	strne	r0, [r0, #-6]
    ee34:	30015101 	andcc	r5, r1, r1, lsl #2
    ee38:	01500115 	cmpeq	r0, r5, lsl r1
    ee3c:	48210033 	stmdami	r1!, {r0, r1, r4, r5}
    ee40:	d3000039 	movwle	r0, #57	; 0x39
    ee44:	d6000003 	strle	r0, [r0], -r3
    ee48:	15000006 	strne	r0, [r0, #-6]
    ee4c:	31015001 	tstcc	r1, r1
    ee50:	39561f00 	ldmdbcc	r6, {r8, r9, sl, fp, ip}^
    ee54:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ee58:	5e1f0000 	cdppl	0, 1, cr0, cr15, cr0, {0}
    ee5c:	aa000039 	bge	ef48 <__exidx_end+0x9630>
    ee60:	00000008 	andeq	r0, r0, r8
    ee64:	002f511c 	eoreq	r5, pc, ip, lsl r1	; <UNPREDICTABLE>
    ee68:	01f20200 	mvnseq	r0, r0, lsl #4
    ee6c:	000000c3 	andeq	r0, r0, r3, asr #1
    ee70:	00000000 	andeq	r0, r0, r0
    ee74:	00000038 	andeq	r0, r0, r8, lsr r0
    ee78:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    ee7c:	1f260000 	svcne	0x00260000
    ee80:	01000031 	tsteq	r0, r1, lsr r0
    ee84:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    ee88:	392e0000 	stmdbcc	lr!, {}	; <UNPREDICTABLE>
    ee8c:	82270000 	eorhi	r0, r7, #0
    ee90:	01000030 	tsteq	r0, r0, lsr r0
    ee94:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    ee98:	51010000 	mrspl	r0, (UNDEF: 1)
    ee9c:	0032e527 	eorseq	lr, r2, r7, lsr #10
    eea0:	01410100 	mrseq	r0, (UNDEF: 81)
    eea4:	000000c3 	andeq	r0, r0, r3, asr #1
    eea8:	40007105 	andmi	r7, r0, r5, lsl #2
    eeac:	f6279f26 			; <UNDEFINED> instruction: 0xf6279f26
    eeb0:	0100002d 	tsteq	r0, sp, lsr #32
    eeb4:	00c30143 	sbceq	r0, r3, r3, asr #2
    eeb8:	71070000 	mrsvc	r0, (UNDEF: 7)
    eebc:	48244000 	stmdami	r4!, {lr}
    eec0:	fe279f26 	cdp2	15, 2, cr9, cr7, cr6, {1}
    eec4:	0100002d 	tsteq	r0, sp, lsr #32
    eec8:	00c30145 	sbceq	r0, r3, r5, asr #2
    eecc:	71070000 	mrsvc	r0, (UNDEF: 7)
    eed0:	48244800 	stmdami	r4!, {fp, lr}
    eed4:	06249f26 	strteq	r9, [r4], -r6, lsr #30
    eed8:	0100002e 	tsteq	r0, lr, lsr #32
    eedc:	00c30147 	sbceq	r0, r3, r7, asr #2
    eee0:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    eee4:	6f240000 	svcvs	0x00240000
    eee8:	0100002e 	tsteq	r0, lr, lsr #32
    eeec:	00c30156 	sbceq	r0, r3, r6, asr r1
    eef0:	39750000 	ldmdbcc	r5!, {}^	; <UNPREDICTABLE>
    eef4:	27240000 	strcs	r0, [r4, -r0]!
    eef8:	01000030 	tsteq	r0, r0, lsr r0
    eefc:	00c30157 	sbceq	r0, r3, r7, asr r1
    ef00:	39980000 	ldmibcc	r8, {}	; <UNPREDICTABLE>
    ef04:	64280000 	strtvs	r0, [r8], #-0
    ef08:	01580100 	cmpeq	r8, r0, lsl #2
    ef0c:	000000c3 	andeq	r0, r0, r3, asr #1
    ef10:	000039c1 	andeq	r3, r0, r1, asr #19
    ef14:	316a1c00 	cmncc	sl, r0, lsl #24
    ef18:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    ef1c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    ef20:	00000000 	andeq	r0, r0, r0
    ef24:	00000c00 	andeq	r0, r0, r0, lsl #24
    ef28:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    ef2c:	26000007 	strcs	r0, [r0], -r7
    ef30:	00003040 	andeq	r3, r0, r0, asr #32
    ef34:	c3016301 	movwgt	r6, #4865	; 0x1301
    ef38:	3b000000 	blcc	ef40 <__exidx_end+0x9628>
    ef3c:	2400003a 	strcs	r0, [r0], #-58	; 0xffffffc6
    ef40:	00003219 	andeq	r3, r0, r9, lsl r2
    ef44:	c3018501 	movwgt	r8, #5377	; 0x1501
    ef48:	5c000000 	stcpl	0, cr0, [r0], {-0}
    ef4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    ef50:	002f7b1c 	eoreq	r7, pc, ip, lsl fp	; <UNPREDICTABLE>
    ef54:	01c20200 	biceq	r0, r2, r0, lsl #4
    ef58:	000000ce 	andeq	r0, r0, lr, asr #1
    ef5c:	00000000 	andeq	r0, r0, r0
    ef60:	00000034 	andeq	r0, r0, r4, lsr r0
    ef64:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    ef68:	6c240000 	stcvs	0, cr0, [r4], #-0
    ef6c:	01000032 	tsteq	r0, r2, lsr r0
    ef70:	00ce0192 	smulleq	r0, lr, r2, r1
    ef74:	3a9c0000 	bcc	fe70ef7c <_estack+0xde709f7c>
    ef78:	13240000 			; <UNDEFINED> instruction: 0x13240000
    ef7c:	01000020 	tsteq	r0, r0, lsr #32
    ef80:	00ce0193 	smulleq	r0, lr, r3, r1
    ef84:	3abe0000 	bcc	fef8ef8c <_estack+0xdef89f8c>
    ef88:	3e240000 	cdpcc	0, 2, cr0, cr4, cr0, {0}
    ef8c:	0100002f 	tsteq	r0, pc, lsr #32
    ef90:	00ce0194 	smulleq	r0, lr, r4, r1
    ef94:	3ad10000 	bcc	ff44ef9c <_estack+0xdf449f9c>
    ef98:	dc240000 	stcle	0, cr0, [r4], #-0
    ef9c:	0100002e 	tsteq	r0, lr, lsr #32
    efa0:	00ce0195 	smulleq	r0, lr, r5, r1
    efa4:	3af40000 	bcc	ffd0efac <_estack+0xdfd09fac>
    efa8:	001f0000 	andseq	r0, pc, r0
    efac:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    efb0:	1f000008 	svcne	0x00000008
    efb4:	00000000 	andeq	r0, r0, r0
    efb8:	0000089e 	muleq	r0, lr, r8
    efbc:	32381c00 	eorscc	r1, r8, #0, 24
    efc0:	d3020000 	movwle	r0, #8192	; 0x2000
    efc4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    efc8:	00000000 	andeq	r0, r0, r0
    efcc:	00001c00 	andeq	r1, r0, r0, lsl #24
    efd0:	8d9c0100 	ldfhis	f0, [ip]
    efd4:	24000008 	strcs	r0, [r0], #-8
    efd8:	000030bc 	strheq	r3, [r0], -ip
    efdc:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    efe0:	10000000 	andne	r0, r0, r0
    efe4:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    efe8:	0000322a 	andeq	r3, r0, sl, lsr #4
    efec:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    eff0:	23000000 	movwcs	r0, #0
    eff4:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    eff8:	00002e79 	andeq	r2, r0, r9, ror lr
    effc:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    f000:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    f004:	0000003b 	andeq	r0, r0, fp, lsr r0
    f008:	00303329 	eorseq	r3, r0, r9, lsr #6
    f00c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    f010:	05000003 	streq	r0, [r0, #-3]
    f014:	00064003 	andeq	r4, r6, r3
    f018:	2c072a20 			; <UNDEFINED> instruction: 0x2c072a20
    f01c:	45070000 	strmi	r0, [r7, #-0]
    f020:	0000ce03 	andeq	ip, r0, r3, lsl #28
    f024:	2b6e2b00 	blcs	1b99c2c <__ccfg+0x1b79c84>
    f028:	aa080000 	bge	20f030 <__ccfg+0x1ef088>
    f02c:	000000c3 	andeq	r0, r0, r3, asr #1
    f030:	002a0b2c 	eoreq	r0, sl, ip, lsr #22
    f034:	08990600 	ldmeq	r9, {r9, sl}
    f038:	000000d9 	ldrdeq	r0, [r0], -r9
    f03c:	0ab40000 	beq	fed0f044 <_estack+0xded0a044>
    f040:	00040000 	andeq	r0, r4, r0
    f044:	000035fe 	strdeq	r3, [r0], -lr
    f048:	2a3d0104 	bcs	f4f460 <__ccfg+0xf2f4b8>
    f04c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    f050:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
    f054:	e000002b 	and	r0, r0, fp, lsr #32
    f058:	00000011 	andeq	r0, r0, r1, lsl r0
    f05c:	23000000 	movwcs	r0, #0
    f060:	0200007c 	andeq	r0, r0, #124	; 0x7c
    f064:	0c690601 	stcleq	6, cr0, [r9], #-4
    f068:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    f06c:	0300002a 	movweq	r0, #42	; 0x2a
    f070:	0000371d 	andeq	r3, r0, sp, lsl r7
    f074:	08010200 	stmdaeq	r1, {r9}
    f078:	00000c67 	andeq	r0, r0, r7, ror #24
    f07c:	0031e903 	eorseq	lr, r1, r3, lsl #18
    f080:	49290300 	stmdbmi	r9!, {r8, r9}
    f084:	02000000 	andeq	r0, r0, #0
    f088:	0a770502 	beq	1dd0498 <__ccfg+0x1db04f0>
    f08c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    f090:	0300002e 	movweq	r0, #46	; 0x2e
    f094:	00005b2b 	andeq	r5, r0, fp, lsr #22
    f098:	07020200 	streq	r0, [r2, -r0, lsl #4]
    f09c:	00000d64 	andeq	r0, r0, r4, ror #26
    f0a0:	002b9d03 	eoreq	r9, fp, r3, lsl #26
    f0a4:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; f0ac <__exidx_end+0x9794>
    f0a8:	02000000 	andeq	r0, r0, #0
    f0ac:	08090504 	stmdaeq	r9, {r2, r8, sl}
    f0b0:	b0030000 	andlt	r0, r3, r0
    f0b4:	03000029 	movweq	r0, #41	; 0x29
    f0b8:	00007f41 	andeq	r7, r0, r1, asr #30
    f0bc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f0c0:	00000439 	andeq	r0, r0, r9, lsr r4
    f0c4:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    f0c8:	02000008 	andeq	r0, r0, #8
    f0cc:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
    f0d0:	04040000 	streq	r0, [r4], #-0
    f0d4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    f0d8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f0dc:	0000043e 	andeq	r0, r0, lr, lsr r4
    f0e0:	002a1a03 	eoreq	r1, sl, r3, lsl #20
    f0e4:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    f0e8:	03000000 	movweq	r0, #0
    f0ec:	000031eb 	andeq	r3, r0, fp, ror #3
    f0f0:	003e1904 	eorseq	r1, lr, r4, lsl #18
    f0f4:	10030000 	andne	r0, r3, r0
    f0f8:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    f0fc:	0000501a 	andeq	r5, r0, sl, lsl r0
    f100:	2b9f0300 	blcs	fe7cfd08 <_estack+0xde7cad08>
    f104:	1f040000 	svcne	0x00040000
    f108:	00000062 	andeq	r0, r0, r2, rrx
    f10c:	0029b203 	eoreq	fp, r9, r3, lsl #4
    f110:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    f114:	03000000 	movweq	r0, #0
    f118:	00003312 	andeq	r3, r0, r2, lsl r3
    f11c:	009bd405 	addseq	sp, fp, r5, lsl #8
    f120:	04020000 	streq	r0, [r2], #-0
    f124:	002cb107 	eoreq	fp, ip, r7, lsl #2
    f128:	02040500 	andeq	r0, r4, #0, 10
    f12c:	0c700801 	ldcleq	8, cr0, [r0], #-4
    f130:	df030000 	svcle	0x00030000
    f134:	06000024 	streq	r0, [r0], -r4, lsr #32
    f138:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    f13c:	a2040600 	andge	r0, r4, #0, 12
    f140:	03000000 	movweq	r0, #0
    f144:	000022a6 	andeq	r2, r0, r6, lsr #5
    f148:	01103c07 	tsteq	r0, r7, lsl #24
    f14c:	45070000 	strmi	r0, [r7, #-0]
    f150:	10000025 	andne	r0, r0, r5, lsr #32
    f154:	01656f07 	cmneq	r5, r7, lsl #30
    f158:	11080000 	mrsne	r0, (UNDEF: 8)
    f15c:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f160:	0000b870 	andeq	fp, r0, r0, ror r8
    f164:	84080000 	strhi	r0, [r8], #-0
    f168:	07000007 	streq	r0, [r0, -r7]
    f16c:	0000b871 	andeq	fp, r0, r1, ror r8
    f170:	84080200 	strhi	r0, [r8], #-512	; 0xfffffe00
    f174:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f178:	00026d74 	andeq	r6, r2, r4, ror sp
    f17c:	13080400 	movwne	r0, #33792	; 0x8400
    f180:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f184:	0000f475 	andeq	pc, r0, r5, ror r4	; <UNPREDICTABLE>
    f188:	b4080800 	strlt	r0, [r8], #-2048	; 0xfffff800
    f18c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f190:	0002017d 	andeq	r0, r2, sp, ror r1
    f194:	fe080c00 	cdp2	12, 0, cr0, cr8, cr0, {0}
    f198:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f19c:	00024681 	andeq	r4, r2, r1, lsl #13
    f1a0:	03000d00 	movweq	r0, #3328	; 0xd00
    f1a4:	0000343a 	andeq	r3, r0, sl, lsr r4
    f1a8:	01703e07 	cmneq	r0, r7, lsl #28
    f1ac:	24070000 	strcs	r0, [r7], #-0
    f1b0:	18000034 	stmdane	r0, {r2, r4, r5}
    f1b4:	0201a507 	andeq	sl, r1, #29360128	; 0x1c00000
    f1b8:	11080000 	mrsne	r0, (UNDEF: 8)
    f1bc:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f1c0:	0000b8a6 	andeq	fp, r0, r6, lsr #17
    f1c4:	84080000 	strhi	r0, [r8], #-0
    f1c8:	07000007 	streq	r0, [r0, -r7]
    f1cc:	0000b8a7 	andeq	fp, r0, r7, lsr #17
    f1d0:	84080200 	strhi	r0, [r8], #-512	; 0xfffffe00
    f1d4:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f1d8:	00026daa 	andeq	r6, r2, sl, lsr #27
    f1dc:	13080400 	movwne	r0, #33792	; 0x8400
    f1e0:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f1e4:	0000f4ab 	andeq	pc, r0, fp, lsr #9
    f1e8:	b4080800 	strlt	r0, [r8], #-2048	; 0xfffff800
    f1ec:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f1f0:	000273b3 			; <UNDEFINED> instruction: 0x000273b3
    f1f4:	fe080c00 	cdp2	12, 0, cr0, cr8, cr0, {0}
    f1f8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f1fc:	0002b8b7 			; <UNDEFINED> instruction: 0x0002b8b7
    f200:	2d080d00 	stccs	13, cr0, [r8, #-0]
    f204:	07000000 	streq	r0, [r0, -r0]
    f208:	0000a2b8 			; <UNDEFINED> instruction: 0x0000a2b8
    f20c:	ca080e00 	bgt	212a14 <__ccfg+0x1f2a6c>
    f210:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f214:	0000a2bf 			; <UNDEFINED> instruction: 0x0000a2bf
    f218:	7b080f00 	blvc	212e20 <__ccfg+0x1f2e78>
    f21c:	07000014 	smladeq	r0, r4, r0, r0
    f220:	0002dfd4 	ldrdeq	sp, [r2], -r4
    f224:	94081000 	strls	r1, [r8], #-0
    f228:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f22c:	0000b8d5 	ldrdeq	fp, [r0], -r5
    f230:	d2081200 	andle	r1, r8, #0, 4
    f234:	07000024 	streq	r0, [r0, -r4, lsr #32]
    f238:	000324d6 	ldrdeq	r2, [r3], -r6
    f23c:	09001400 	stmdbeq	r0, {sl, ip}
    f240:	46760701 	ldrbtmi	r0, [r6], -r1, lsl #14
    f244:	0a000002 	beq	f254 <__exidx_end+0x993c>
    f248:	00002767 	andeq	r2, r0, r7, ror #14
    f24c:	00a27707 	adceq	r7, r2, r7, lsl #14
    f250:	04010000 	streq	r0, [r1], #-0
    f254:	050a0004 	streq	r0, [sl, #-4]
    f258:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f25c:	0000a278 	andeq	sl, r0, r8, ror r2
    f260:	03010100 	movweq	r0, #4352	; 0x1100
    f264:	21c50a00 	biccs	r0, r5, r0, lsl #20
    f268:	7a070000 	bvc	1cf270 <__ccfg+0x1af2c8>
    f26c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f270:	00010201 	andeq	r0, r1, r1, lsl #4
    f274:	001f800a 	andseq	r8, pc, sl
    f278:	a27b0700 	rsbsge	r0, fp, #0, 14
    f27c:	01000000 	mrseq	r0, (UNDEF: 0)
    f280:	00000001 	andeq	r0, r0, r1
    f284:	7e070109 	adfvcs	f0, f7, #1.0
    f288:	0000026d 	andeq	r0, r0, sp, ror #4
    f28c:	0025e20a 	eoreq	lr, r5, sl, lsl #4
    f290:	a27f0700 	rsbsge	r0, pc, #0, 14
    f294:	01000000 	mrseq	r0, (UNDEF: 0)
    f298:	0a000404 	beq	102b0 <__exidx_end+0xa998>
    f29c:	00002736 	andeq	r2, r0, r6, lsr r7
    f2a0:	00a28007 	adceq	r8, r2, r7
    f2a4:	04010000 	streq	r0, [r1], #-0
    f2a8:	06000000 	streq	r0, [r0], -r0
    f2ac:	00010504 	andeq	r0, r1, r4, lsl #10
    f2b0:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f2b4:	0002b8ac 	andeq	fp, r2, ip, lsr #17
    f2b8:	27670a00 	strbcs	r0, [r7, -r0, lsl #20]!
    f2bc:	ad070000 	stcge	0, cr0, [r7, #-0]
    f2c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    f2c4:	00040401 	andeq	r0, r4, r1, lsl #8
    f2c8:	0021050a 	eoreq	r0, r1, sl, lsl #10
    f2cc:	a2ae0700 	adcge	r0, lr, #0, 14
    f2d0:	01000000 	mrseq	r0, (UNDEF: 0)
    f2d4:	0a000301 	beq	fee0 <__exidx_end+0xa5c8>
    f2d8:	000021c5 	andeq	r2, r0, r5, asr #3
    f2dc:	00a2b007 	adceq	fp, r2, r7
    f2e0:	02010000 	andeq	r0, r1, #0
    f2e4:	800a0001 	andhi	r0, sl, r1
    f2e8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f2ec:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    f2f0:	00010100 	andeq	r0, r1, r0, lsl #2
    f2f4:	01090000 	mrseq	r0, (UNDEF: 9)
    f2f8:	02dfb407 	sbcseq	fp, pc, #117440512	; 0x7000000
    f2fc:	e20a0000 	and	r0, sl, #0
    f300:	07000025 	streq	r0, [r0, -r5, lsr #32]
    f304:	0000a2b5 			; <UNDEFINED> instruction: 0x0000a2b5
    f308:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f30c:	27360a00 	ldrcs	r0, [r6, -r0, lsl #20]!
    f310:	b6070000 	strlt	r0, [r7], -r0
    f314:	000000a2 	andeq	r0, r0, r2, lsr #1
    f318:	00000401 	andeq	r0, r0, r1, lsl #8
    f31c:	07020900 	streq	r0, [r2, -r0, lsl #18]
    f320:	000324c2 	andeq	r2, r3, r2, asr #9
    f324:	21b80a00 			; <UNDEFINED> instruction: 0x21b80a00
    f328:	c3070000 	movwgt	r0, #28672	; 0x7000
    f32c:	000000b8 	strheq	r0, [r0], -r8
    f330:	000d0302 	andeq	r0, sp, r2, lsl #6
    f334:	0021570a 	eoreq	r5, r1, sl, lsl #14
    f338:	b8c90700 	stmialt	r9, {r8, r9, sl}^
    f33c:	02000000 	andeq	r0, r0, #0
    f340:	0a000c01 	beq	1234c <__exidx_end+0xca34>
    f344:	000020f7 	strdeq	r2, [r0], -r7
    f348:	00b8cb07 	adcseq	ip, r8, r7, lsl #22
    f34c:	06020000 	streq	r0, [r2], -r0
    f350:	f60a0006 			; <UNDEFINED> instruction: 0xf60a0006
    f354:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f358:	0000b8d2 	ldrdeq	fp, [r0], -r2
    f35c:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    f360:	04060000 	streq	r0, [r6], #-0
    f364:	000000ce 	andeq	r0, r0, lr, asr #1
    f368:	00334703 	eorseq	r4, r3, r3, lsl #14
    f36c:	35420800 	strbcc	r0, [r2, #-2048]	; 0xfffff800
    f370:	0b000003 	bleq	f384 <__exidx_end+0x9a6c>
    f374:	000033d7 	ldrdeq	r3, [r0], -r7
    f378:	01c10820 	biceq	r0, r1, r0, lsr #16
    f37c:	000003f9 	strdeq	r0, [r0], -r9
    f380:	001f110c 	andseq	r1, pc, ip, lsl #2
    f384:	01c20800 	biceq	r0, r2, r0, lsl #16
    f388:	000000b8 	strheq	r0, [r0], -r8
    f38c:	07840c00 	streq	r0, [r4, r0, lsl #24]
    f390:	c3080000 	movwgt	r0, #32768	; 0x8000
    f394:	0000b801 	andeq	fp, r0, r1, lsl #16
    f398:	840c0200 	strhi	r0, [ip], #-512	; 0xfffffe00
    f39c:	08000022 	stmdaeq	r0, {r1, r5}
    f3a0:	026d01c6 	rsbeq	r0, sp, #-2147483599	; 0x80000031
    f3a4:	0c040000 	stceq	0, cr0, [r4], {-0}
    f3a8:	00002013 	andeq	r2, r0, r3, lsl r0
    f3ac:	f401c708 	vst1.8	{d12}, [r1], r8
    f3b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f3b4:	0022b40c 	eoreq	fp, r2, ip, lsl #8
    f3b8:	01cf0800 	biceq	r0, pc, r0, lsl #16
    f3bc:	000004ef 	andeq	r0, r0, pc, ror #9
    f3c0:	21fe0c0c 	mvnscs	r0, ip, lsl #24
    f3c4:	d3080000 	movwle	r0, #32768	; 0x8000
    f3c8:	00053901 	andeq	r3, r5, r1, lsl #18
    f3cc:	060c0d00 	streq	r0, [ip], -r0, lsl #26
    f3d0:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f3d4:	056301d9 	strbeq	r0, [r3, #-473]!	; 0xfffffe27
    f3d8:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    f3dc:	0000226d 	andeq	r2, r0, sp, ror #4
    f3e0:	8d01de08 	stchi	14, cr13, [r1, #-32]	; 0xffffffe0
    f3e4:	10000005 	andne	r0, r0, r5
    f3e8:	00209c0c 	eoreq	r9, r0, ip, lsl #24
    f3ec:	01df0800 	bicseq	r0, pc, r0, lsl #16
    f3f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    f3f4:	23300c14 	teqcs	r0, #20, 24	; 0x1400
    f3f8:	e7080000 	str	r0, [r8, -r0]
    f3fc:	0005b701 	andeq	fp, r5, r1, lsl #14
    f400:	080c1500 	stmdaeq	ip, {r8, sl, ip}
    f404:	08000020 	stmdaeq	r0, {r5}
    f408:	05e101fb 	strbeq	r0, [r1, #507]!	; 0x1fb
    f40c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    f410:	0000147b 	andeq	r1, r0, fp, ror r4
    f414:	3b020e08 	blcc	92c3c <__ccfg+0x72c94>
    f418:	18000006 	stmdane	r0, {r1, r2}
    f41c:	0020940c 	eoreq	r9, r0, ip, lsl #8
    f420:	020f0800 	andeq	r0, pc, #0, 16
    f424:	000000b8 	strheq	r0, [r0], -r8
    f428:	24d20c1a 	ldrbcs	r0, [r2], #3098	; 0xc1a
    f42c:	10080000 	andne	r0, r8, r0
    f430:	00032402 	andeq	r2, r3, r2, lsl #8
    f434:	03001c00 	movweq	r1, #3072	; 0xc00
    f438:	00002472 	andeq	r2, r0, r2, ror r4
    f43c:	04044308 	streq	r4, [r4], #-776	; 0xfffffcf8
    f440:	530b0000 	movwpl	r0, #45056	; 0xb000
    f444:	28000024 	stmdacs	r0, {r2, r5}
    f448:	ef021a08 	svc	0x00021a08
    f44c:	0c000004 	stceq	0, cr0, [r0], {4}
    f450:	00001f11 	andeq	r1, r0, r1, lsl pc
    f454:	b8021b08 	stmdalt	r2, {r3, r8, r9, fp, ip}
    f458:	00000000 	andeq	r0, r0, r0
    f45c:	0007840c 	andeq	r8, r7, ip, lsl #8
    f460:	021d0800 	andseq	r0, sp, #0, 16
    f464:	000000b8 	strheq	r0, [r0], -r8
    f468:	22840c02 	addcs	r0, r4, #512	; 0x200
    f46c:	20080000 	andcs	r0, r8, r0
    f470:	00026d02 	andeq	r6, r2, r2, lsl #26
    f474:	130c0400 	movwne	r0, #50176	; 0xc400
    f478:	08000020 	stmdaeq	r0, {r5}
    f47c:	00f40221 	rscseq	r0, r4, r1, lsr #4
    f480:	0c080000 	stceq	0, cr0, [r8], {-0}
    f484:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    f488:	85022908 	strhi	r2, [r2, #-2312]	; 0xfffff6f8
    f48c:	0c000006 	stceq	0, cr0, [r0], {6}
    f490:	0021fe0c 	eoreq	pc, r1, ip, lsl #28
    f494:	022d0800 	eoreq	r0, sp, #0, 16
    f498:	000006cf 	andeq	r0, r0, pc, asr #13
    f49c:	1f060c0d 	svcne	0x00060c0d
    f4a0:	33080000 	movwcc	r0, #32768	; 0x8000
    f4a4:	0006f902 	andeq	pc, r6, r2, lsl #18
    f4a8:	6d0c0e00 	stcvs	14, cr0, [ip, #-0]
    f4ac:	08000022 	stmdaeq	r0, {r1, r5}
    f4b0:	07230238 			; <UNDEFINED> instruction: 0x07230238
    f4b4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    f4b8:	0000209c 	muleq	r0, ip, r0
    f4bc:	a2023908 	andge	r3, r2, #8, 18	; 0x20000
    f4c0:	14000000 	strne	r0, [r0], #-0
    f4c4:	0023300c 	eoreq	r3, r3, ip
    f4c8:	02410800 	subeq	r0, r1, #0, 16
    f4cc:	0000074d 	andeq	r0, r0, sp, asr #14
    f4d0:	20080c15 	andcs	r0, r8, r5, lsl ip
    f4d4:	55080000 	strpl	r0, [r8, #-0]
    f4d8:	00077702 	andeq	r7, r7, r2, lsl #14
    f4dc:	7b0c1600 	blvc	314ce4 <__ccfg+0x2f4d3c>
    f4e0:	08000014 	stmdaeq	r0, {r2, r4}
    f4e4:	07d10268 	ldrbeq	r0, [r1, r8, ror #4]
    f4e8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    f4ec:	00002094 	muleq	r0, r4, r0
    f4f0:	b8026908 	stmdalt	r2, {r3, r8, fp, sp, lr}
    f4f4:	1a000000 	bne	f4fc <__exidx_end+0x9be4>
    f4f8:	0024d20c 	eoreq	sp, r4, ip, lsl #4
    f4fc:	026a0800 	rsbeq	r0, sl, #0, 16
    f500:	00000324 	andeq	r0, r0, r4, lsr #6
    f504:	1f430c1c 	svcne	0x00430c1c
    f508:	6c080000 	stcvs	0, cr0, [r8], {-0}
    f50c:	0000b802 	andeq	fp, r0, r2, lsl #16
    f510:	8c0c2000 	stchi	0, cr2, [ip], {-0}
    f514:	08000022 	stmdaeq	r0, {r1, r5}
    f518:	00ad0270 	adceq	r0, sp, r0, ror r2
    f51c:	0c220000 	stceq	0, cr0, [r2], #-0
    f520:	000023ca 	andeq	r2, r0, sl, asr #7
    f524:	a2027308 	andge	r7, r2, #8, 6	; 0x20000000
    f528:	24000000 	strcs	r0, [r0], #-0
    f52c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f530:	053901c8 	ldreq	r0, [r9, #-456]!	; 0xfffffe38
    f534:	670e0000 	strvs	r0, [lr, -r0]
    f538:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f53c:	00a201c9 	adceq	r0, r2, r9, asr #3
    f540:	04010000 	streq	r0, [r1], #-0
    f544:	050e0004 	streq	r0, [lr, #-4]
    f548:	08000021 	stmdaeq	r0, {r0, r5}
    f54c:	00a201ca 	adceq	r0, r2, sl, asr #3
    f550:	01010000 	mrseq	r0, (UNDEF: 1)
    f554:	c50e0003 	strgt	r0, [lr, #-3]
    f558:	08000021 	stmdaeq	r0, {r0, r5}
    f55c:	00a201cc 	adceq	r0, r2, ip, asr #3
    f560:	02010000 	andeq	r0, r1, #0
    f564:	800e0001 	andhi	r0, lr, r1
    f568:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f56c:	00a201cd 	adceq	r0, r2, sp, asr #3
    f570:	01010000 	mrseq	r0, (UNDEF: 1)
    f574:	0d000000 	stceq	0, cr0, [r0, #-0]
    f578:	01d00801 	bicseq	r0, r0, r1, lsl #16
    f57c:	00000563 	andeq	r0, r0, r3, ror #10
    f580:	0025e20e 	eoreq	lr, r5, lr, lsl #4
    f584:	01d10800 	bicseq	r0, r1, r0, lsl #16
    f588:	000000a2 	andeq	r0, r0, r2, lsr #1
    f58c:	00040401 	andeq	r0, r4, r1, lsl #8
    f590:	0027360e 	eoreq	r3, r7, lr, lsl #12
    f594:	01d20800 	bicseq	r0, r2, r0, lsl #16
    f598:	000000a2 	andeq	r0, r0, r2, lsr #1
    f59c:	00000401 	andeq	r0, r0, r1, lsl #8
    f5a0:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f5a4:	058d01d4 	streq	r0, [sp, #468]	; 0x1d4
    f5a8:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    f5ac:	08000022 	stmdaeq	r0, {r1, r5}
    f5b0:	00b801d5 	ldrsbteq	r0, [r8], r5
    f5b4:	03020000 	movweq	r0, #8192	; 0x2000
    f5b8:	190e000d 	stmdbne	lr, {r0, r2, r3}
    f5bc:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f5c0:	00b801d8 	ldrsbteq	r0, [r8], r8
    f5c4:	0d020000 	stceq	0, cr0, [r2, #-0]
    f5c8:	0d000000 	stceq	0, cr0, [r0, #-0]
    f5cc:	01da0804 	bicseq	r0, sl, r4, lsl #16
    f5d0:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    f5d4:	0023b20e 	eoreq	fp, r3, lr, lsl #4
    f5d8:	01db0800 	bicseq	r0, fp, r0, lsl #16
    f5dc:	000000ce 	andeq	r0, r0, lr, asr #1
    f5e0:	001c0404 	andseq	r0, ip, r4, lsl #8
    f5e4:	0024c20e 	eoreq	ip, r4, lr, lsl #4
    f5e8:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    f5ec:	000000ce 	andeq	r0, r0, lr, asr #1
    f5f0:	00031504 	andeq	r1, r3, r4, lsl #10
    f5f4:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f5f8:	05e101e0 	strbeq	r0, [r1, #480]!	; 0x1e0
    f5fc:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    f600:	08000026 	stmdaeq	r0, {r1, r2, r5}
    f604:	00a201e1 	adceq	r0, r2, r1, ror #3
    f608:	06010000 	streq	r0, [r1], -r0
    f60c:	d80e0002 	stmdale	lr, {r1}
    f610:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f614:	00a201e3 	adceq	r0, r2, r3, ror #3
    f618:	02010000 	andeq	r0, r1, #0
    f61c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f620:	01e80802 	mvneq	r0, r2, lsl #16
    f624:	0000063b 	andeq	r0, r0, fp, lsr r6
    f628:	0023bb0e 	eoreq	fp, r3, lr, lsl #22
    f62c:	01e90800 	mvneq	r0, r0, lsl #16
    f630:	000000b8 	strheq	r0, [r0], -r8
    f634:	000a0602 	andeq	r0, sl, r2, lsl #12
    f638:	0022570e 	eoreq	r5, r2, lr, lsl #14
    f63c:	01ea0800 	mvneq	r0, r0, lsl #16
    f640:	000000b8 	strheq	r0, [r0], -r8
    f644:	00090102 	andeq	r0, r9, r2, lsl #2
    f648:	0024230e 	eoreq	r2, r4, lr, lsl #6
    f64c:	01ec0800 	mvneq	r0, r0, lsl #16
    f650:	000000b8 	strheq	r0, [r0], -r8
    f654:	00080102 	andeq	r0, r8, r2, lsl #2
    f658:	001fc00e 	andseq	ip, pc, lr
    f65c:	01ee0800 	mvneq	r0, r0, lsl #16
    f660:	000000b8 	strheq	r0, [r0], -r8
    f664:	00040402 	andeq	r0, r4, r2, lsl #8
    f668:	001f630e 	andseq	r6, pc, lr, lsl #6
    f66c:	01f30800 	mvnseq	r0, r0, lsl #16
    f670:	000000b8 	strheq	r0, [r0], -r8
    f674:	00000302 	andeq	r0, r0, r2, lsl #6
    f678:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f67c:	068501fc 			; <UNDEFINED> instruction: 0x068501fc
    f680:	b80e0000 	stmdalt	lr, {}	; <UNPREDICTABLE>
    f684:	08000021 	stmdaeq	r0, {r0, r5}
    f688:	00b801fd 	ldrshteq	r0, [r8], sp
    f68c:	03020000 	movweq	r0, #8192	; 0x2000
    f690:	570e000d 	strpl	r0, [lr, -sp]
    f694:	08000021 	stmdaeq	r0, {r0, r5}
    f698:	00b80203 	adcseq	r0, r8, r3, lsl #4
    f69c:	01020000 	mrseq	r0, (UNDEF: 2)
    f6a0:	f70e000c 			; <UNDEFINED> instruction: 0xf70e000c
    f6a4:	08000020 	stmdaeq	r0, {r5}
    f6a8:	00b80205 	adcseq	r0, r8, r5, lsl #4
    f6ac:	06020000 	streq	r0, [r2], -r0
    f6b0:	f60e0006 			; <UNDEFINED> instruction: 0xf60e0006
    f6b4:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f6b8:	00b8020c 	adcseq	r0, r8, ip, lsl #4
    f6bc:	01020000 	mrseq	r0, (UNDEF: 2)
    f6c0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    f6c4:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    f6c8:	000006cf 	andeq	r0, r0, pc, asr #13
    f6cc:	0027670e 	eoreq	r6, r7, lr, lsl #14
    f6d0:	02230800 	eoreq	r0, r3, #0, 16
    f6d4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6d8:	00040401 	andeq	r0, r4, r1, lsl #8
    f6dc:	0021050e 	eoreq	r0, r1, lr, lsl #10
    f6e0:	02240800 	eoreq	r0, r4, #0, 16
    f6e4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6e8:	00030101 	andeq	r0, r3, r1, lsl #2
    f6ec:	0021c50e 	eoreq	ip, r1, lr, lsl #10
    f6f0:	02260800 	eoreq	r0, r6, #0, 16
    f6f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6f8:	00010201 	andeq	r0, r1, r1, lsl #4
    f6fc:	001f800e 	andseq	r8, pc, lr
    f700:	02270800 	eoreq	r0, r7, #0, 16
    f704:	000000a2 	andeq	r0, r0, r2, lsr #1
    f708:	00000101 	andeq	r0, r0, r1, lsl #2
    f70c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f710:	06f9022a 	ldrbteq	r0, [r9], sl, lsr #4
    f714:	e20e0000 	and	r0, lr, #0
    f718:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f71c:	00a2022b 	adceq	r0, r2, fp, lsr #4
    f720:	04010000 	streq	r0, [r1], #-0
    f724:	360e0004 	strcc	r0, [lr], -r4
    f728:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f72c:	00a2022c 	adceq	r0, r2, ip, lsr #4
    f730:	04010000 	streq	r0, [r1], #-0
    f734:	0d000000 	stceq	0, cr0, [r0, #-0]
    f738:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    f73c:	00000723 	andeq	r0, r0, r3, lsr #14
    f740:	00221d0e 	eoreq	r1, r2, lr, lsl #26
    f744:	022f0800 	eoreq	r0, pc, #0, 16
    f748:	000000b8 	strheq	r0, [r0], -r8
    f74c:	000d0302 	andeq	r0, sp, r2, lsl #6
    f750:	0027190e 	eoreq	r1, r7, lr, lsl #18
    f754:	02320800 	eorseq	r0, r2, #0, 16
    f758:	000000b8 	strheq	r0, [r0], -r8
    f75c:	00000d02 	andeq	r0, r0, r2, lsl #26
    f760:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    f764:	074d0234 	smlaldxeq	r0, sp, r4, r2
    f768:	b20e0000 	andlt	r0, lr, #0
    f76c:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f770:	00ce0235 	sbceq	r0, lr, r5, lsr r2
    f774:	04040000 	streq	r0, [r4], #-0
    f778:	c20e001c 	andgt	r0, lr, #28
    f77c:	08000024 	stmdaeq	r0, {r2, r5}
    f780:	00ce0237 	sbceq	r0, lr, r7, lsr r2
    f784:	15040000 	strne	r0, [r4, #-0]
    f788:	0d000003 	stceq	0, cr0, [r0, #-12]
    f78c:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    f790:	00000777 	andeq	r0, r0, r7, ror r7
    f794:	00260e0e 	eoreq	r0, r6, lr, lsl #28
    f798:	023b0800 	eorseq	r0, fp, #0, 16
    f79c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f7a0:	00020601 	andeq	r0, r2, r1, lsl #12
    f7a4:	001fd80e 	andseq	sp, pc, lr, lsl #16
    f7a8:	023d0800 	eorseq	r0, sp, #0, 16
    f7ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    f7b0:	00000201 	andeq	r0, r0, r1, lsl #4
    f7b4:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f7b8:	07d10242 	ldrbeq	r0, [r1, r2, asr #4]
    f7bc:	bb0e0000 	bllt	38f7c4 <__ccfg+0x36f81c>
    f7c0:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f7c4:	00b80243 	adcseq	r0, r8, r3, asr #4
    f7c8:	06020000 	streq	r0, [r2], -r0
    f7cc:	570e000a 	strpl	r0, [lr, -sl]
    f7d0:	08000022 	stmdaeq	r0, {r1, r5}
    f7d4:	00b80244 	adcseq	r0, r8, r4, asr #4
    f7d8:	01020000 	mrseq	r0, (UNDEF: 2)
    f7dc:	230e0009 	movwcs	r0, #57353	; 0xe009
    f7e0:	08000024 	stmdaeq	r0, {r2, r5}
    f7e4:	00b80246 	adcseq	r0, r8, r6, asr #4
    f7e8:	01020000 	mrseq	r0, (UNDEF: 2)
    f7ec:	c00e0008 	andgt	r0, lr, r8
    f7f0:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f7f4:	00b80248 	adcseq	r0, r8, r8, asr #4
    f7f8:	04020000 	streq	r0, [r2], #-0
    f7fc:	630e0004 	movwvs	r0, #57348	; 0xe004
    f800:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f804:	00b8024d 	adcseq	r0, r8, sp, asr #4
    f808:	03020000 	movweq	r0, #8192	; 0x2000
    f80c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f810:	02560802 	subseq	r0, r6, #131072	; 0x20000
    f814:	0000081b 	andeq	r0, r0, fp, lsl r8
    f818:	0021b80e 	eoreq	fp, r1, lr, lsl #16
    f81c:	02570800 	subseq	r0, r7, #0, 16
    f820:	000000b8 	strheq	r0, [r0], -r8
    f824:	000d0302 	andeq	r0, sp, r2, lsl #6
    f828:	0021570e 	eoreq	r5, r1, lr, lsl #14
    f82c:	025d0800 	subseq	r0, sp, #0, 16
    f830:	000000b8 	strheq	r0, [r0], -r8
    f834:	000c0102 	andeq	r0, ip, r2, lsl #2
    f838:	0020f70e 	eoreq	pc, r0, lr, lsl #14
    f83c:	025f0800 	subseq	r0, pc, #0, 16
    f840:	000000b8 	strheq	r0, [r0], -r8
    f844:	00060602 	andeq	r0, r6, r2, lsl #12
    f848:	0023f60e 	eoreq	pc, r3, lr, lsl #12
    f84c:	02660800 	rsbeq	r0, r6, #0, 16
    f850:	000000b8 	strheq	r0, [r0], -r8
    f854:	00050102 	andeq	r0, r5, r2, lsl #2
    f858:	02100900 	andseq	r0, r0, #0, 18
    f85c:	00085448 	andeq	r5, r8, r8, asr #8
    f860:	217d0800 	cmncs	sp, r0, lsl #16
    f864:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    f868:	000000ce 	andeq	r0, r0, lr, asr #1
    f86c:	20de0800 	sbcscs	r0, lr, r0, lsl #16
    f870:	4a020000 	bmi	8f878 <__ccfg+0x6f8d0>
    f874:	000000ce 	andeq	r0, r0, lr, asr #1
    f878:	25290804 	strcs	r0, [r9, #-2052]!	; 0xfffff7fc
    f87c:	4b020000 	blmi	8f884 <__ccfg+0x6f8dc>
    f880:	000000ce 	andeq	r0, r0, lr, asr #1
    f884:	267c0808 	ldrbtcs	r0, [ip], -r8, lsl #16
    f888:	4c020000 	stcmi	0, cr0, [r2], {-0}
    f88c:	000000ce 	andeq	r0, r0, lr, asr #1
    f890:	8903000c 	stmdbhi	r3, {r2, r3}
    f894:	0200001f 	andeq	r0, r0, #31
    f898:	00081b4d 	andeq	r1, r8, sp, asr #22
    f89c:	348b0f00 	strcc	r0, [fp], #3840	; 0xf00
    f8a0:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    f8a4:	ed100301 	ldc	3, cr0, [r0, #-4]
    f8a8:	02000032 	andeq	r0, r0, #50	; 0x32
    f8ac:	00ce0114 	sbceq	r0, lr, r4, lsl r1
    f8b0:	00000000 	andeq	r0, r0, r0
    f8b4:	00140000 	andseq	r0, r4, r0
    f8b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8bc:	00000890 	muleq	r0, r0, r8
    f8c0:	0033a511 	eorseq	sl, r3, r1, lsl r5
    f8c4:	ce6a0100 	powgte	f0, f2, f0
    f8c8:	01000000 	mrseq	r0, (UNDEF: 0)
    f8cc:	73100050 	tstvc	r0, #80	; 0x50
    f8d0:	02000034 	andeq	r0, r0, #52	; 0x34
    f8d4:	00ce014c 	sbceq	r0, lr, ip, asr #2
    f8d8:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    f8dc:	00280000 	eoreq	r0, r8, r0
    f8e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8e4:	000008d8 	ldrdeq	r0, [r0], -r8
    f8e8:	704f7012 	subvc	r7, pc, r2, lsl r0	; <UNPREDICTABLE>
    f8ec:	ce7a0100 	rpwgte	f0, f2, f0
    f8f0:	5a000000 	bpl	f8f8 <__exidx_end+0x9fe0>
    f8f4:	1300003b 	movwne	r0, #59	; 0x3b
    f8f8:	0000085f 	andeq	r0, r0, pc, asr r8
    f8fc:	00003974 	andeq	r3, r0, r4, ror r9
    f900:	00000004 	andeq	r0, r0, r4
    f904:	5f137e01 	svcpl	0x00137e01
    f908:	80000008 	andhi	r0, r0, r8
    f90c:	06000039 			; <UNDEFINED> instruction: 0x06000039
    f910:	01000000 	mrseq	r0, (UNDEF: 0)
    f914:	75140083 	ldrvc	r0, [r4, #-131]	; 0xffffff7d
    f918:	02000033 	andeq	r0, r0, #51	; 0x33
    f91c:	39940154 	ldmibcc	r4, {r2, r4, r6, r8}
    f920:	004c0000 	subeq	r0, ip, r0
    f924:	9c010000 	stcls	0, cr0, [r1], {-0}
    f928:	0034a215 	eorseq	sl, r4, r5, lsl r2
    f92c:	015c0200 	cmpeq	ip, r0, lsl #4
    f930:	000039e0 	andeq	r3, r0, r0, ror #19
    f934:	00000150 	andeq	r0, r0, r0, asr r1
    f938:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    f93c:	9c160000 	ldcls	0, cr0, [r6], {-0}
    f940:	01000033 	tsteq	r0, r3, lsr r0
    f944:	00026da4 	andeq	r6, r2, r4, lsr #27
    f948:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    f94c:	000033f2 	strdeq	r3, [r0], -r2
    f950:	092aa401 	stmdbeq	sl!, {r0, sl, sp, pc}
    f954:	51010000 	mrspl	r0, (UNDEF: 1)
    f958:	00349a17 	eorseq	r9, r4, r7, lsl sl
    f95c:	94a60100 	strtls	r0, [r6], #256	; 0x100
    f960:	7b000000 	blvc	f968 <__exidx_end+0xa050>
    f964:	0000003b 	andeq	r0, r0, fp, lsr r0
    f968:	08540406 	ldmdaeq	r4, {r1, r2, sl}^
    f96c:	64150000 	ldrvs	r0, [r5], #-0
    f970:	02000034 	andeq	r0, r0, #52	; 0x34
    f974:	3b30016c 	blcc	c0ff2c <__ccfg+0xbeff84>
    f978:	01180000 	tsteq	r8, r0
    f97c:	9c010000 	stcls	0, cr0, [r1], {-0}
    f980:	000009ac 	andeq	r0, r0, ip, lsr #19
    f984:	00339c18 	eorseq	r9, r3, r8, lsl ip
    f988:	6df30100 	ldfvse	f0, [r3]
    f98c:	99000002 	stmdbls	r0, {r1}
    f990:	1700003b 	smladxne	r0, fp, r0, r0
    f994:	0000349a 	muleq	r0, sl, r4
    f998:	00c3f501 	sbceq	pc, r3, r1, lsl #10
    f99c:	3bba0000 	blcc	fee8f9a4 <_estack+0xdee8a9a4>
    f9a0:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    f9a4:	01000034 	tsteq	r0, r4, lsr r0
    f9a8:	0000cef6 	strdeq	ip, [r0], -r6
    f9ac:	003c0900 	eorseq	r0, ip, r0, lsl #18
    f9b0:	33081700 	movwcc	r1, #34560	; 0x8700
    f9b4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    f9b8:	00000324 	andeq	r0, r0, r4, lsr #6
    f9bc:	00003c53 	andeq	r3, r0, r3, asr ip
    f9c0:	00331919 	eorseq	r1, r3, r9, lsl r9
    f9c4:	c3f80100 	mvnsgt	r0, #0, 2
    f9c8:	17000000 	strne	r0, [r0, -r0]
    f9cc:	000033fa 	strdeq	r3, [r0], -sl
    f9d0:	00cef901 	sbceq	pc, lr, r1, lsl #18
    f9d4:	3c960000 	ldccc	0, cr0, [r6], {0}
    f9d8:	8d170000 	ldchi	0, cr0, [r7, #-0]
    f9dc:	01000033 	tsteq	r0, r3, lsr r0
    f9e0:	0000cefa 	strdeq	ip, [r0], -sl
    f9e4:	003cee00 	eorseq	lr, ip, r0, lsl #28
    f9e8:	62150000 	andsvs	r0, r5, #0
    f9ec:	02000033 	andeq	r0, r0, #51	; 0x33
    f9f0:	3c480164 	stfcce	f0, [r8], {100}	; 0x64
    f9f4:	00200000 	eoreq	r0, r0, r0
    f9f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    f9fc:	000009d3 	ldrdeq	r0, [r0], -r3
    fa00:	0033f21a 	eorseq	pc, r3, sl, lsl r2	; <UNPREDICTABLE>
    fa04:	01770100 	cmneq	r7, r0, lsl #2
    fa08:	0000092a 	andeq	r0, r0, sl, lsr #18
    fa0c:	00003d24 	andeq	r3, r0, r4, lsr #26
    fa10:	33c01500 	biccc	r1, r0, #0, 10
    fa14:	74020000 	strvc	r0, [r2], #-0
    fa18:	00000001 	andeq	r0, r0, r1
    fa1c:	00006000 	andeq	r6, r0, r0
    fa20:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    fa24:	1b00000a 	blne	fa54 <__exidx_end+0xa13c>
    fa28:	0000265a 	andeq	r2, r0, sl, asr r6
    fa2c:	ff018401 			; <UNDEFINED> instruction: 0xff018401
    fa30:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    fa34:	1b210003 	blne	84fa48 <__ccfg+0x82faa0>
    fa38:	00002118 	andeq	r2, r0, r8, lsl r1
    fa3c:	24018501 	strcs	r8, [r1], #-1281	; 0xfffffaff
    fa40:	bc000003 	stclt	0, cr0, [r0], {3}
    fa44:	1c210003 	stcne	0, cr0, [r1], #-12
    fa48:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    fa4c:	00009401 	andeq	r9, r0, r1, lsl #8
    fa50:	003d5200 	eorseq	r5, sp, r0, lsl #4
    fa54:	00001d00 	andeq	r1, r0, r0, lsl #26
    fa58:	0a9c0000 	beq	fe70fa60 <_estack+0xde70aa60>
    fa5c:	011e0000 	tsteq	lr, r0
    fa60:	84080252 	strhi	r0, [r8], #-594	; 0xfffffdae
    fa64:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    fa68:	011eff08 	tsteq	lr, r8, lsl #30	; <UNPREDICTABLE>
    fa6c:	380c0550 	stmdacc	ip, {r4, r6, r8, sl}
    fa70:	00210003 	eoreq	r0, r1, r3
    fa74:	33281500 			; <UNDEFINED> instruction: 0x33281500
    fa78:	7c020000 	stcvc	0, cr0, [r2], {-0}
    fa7c:	003c6801 	eorseq	r6, ip, r1, lsl #16
    fa80:	00001c00 	andeq	r1, r0, r0, lsl #24
    fa84:	5c9c0100 	ldfpls	f0, [ip], {0}
    fa88:	1f00000a 	svcne	0x0000000a
    fa8c:	00003450 	andeq	r3, r0, r0, asr r4
    fa90:	5c019601 	stcpl	6, cr9, [r1], {1}
    fa94:	0100000a 	tsteq	r0, sl
    fa98:	01020050 	qaddeq	r0, r0, r2
    fa9c:	000cb302 	andeq	fp, ip, r2, lsl #6
    faa0:	00b82000 	adcseq	r2, r8, r0
    faa4:	0a730000 	beq	1ccfaac <__ccfg+0x1cafb04>
    faa8:	e4210000 	strt	r0, [r1], #-0
    faac:	0b000000 	bleq	fab4 <__exidx_end+0xa19c>
    fab0:	33ad2200 			; <UNDEFINED> instruction: 0x33ad2200
    fab4:	52010000 	andpl	r0, r1, #0
    fab8:	00000a97 	muleq	r0, r7, sl
    fabc:	3d3bc318 	ldccc	3, cr12, [fp, #-96]!	; 0xffffffa0
    fac0:	713a5d3a 	teqvc	sl, sl, lsr sp
    fac4:	8f0aa13a 	svchi	0x000aa13a
    fac8:	b33b0f3a 	teqlt	fp, #58, 30	; 0xe8
    facc:	855e4909 	ldrbhi	r4, [lr, #-2313]	; 0xfffff6f7
    fad0:	853b2f0a 	ldrhi	r2, [fp, #-3850]!	; 0xfffff0f6
    fad4:	0a63233b 	beq	18d87c8 <__ccfg+0x18b8820>
    fad8:	a0240000 	eorge	r0, r4, r0
    fadc:	09000016 	stmdbeq	r0, {r1, r2, r4}
    fae0:	0000eb19 	andeq	lr, r0, r9, lsl fp
    fae4:	00eb2500 	rsceq	r2, fp, r0, lsl #10
    fae8:	94250000 	strtls	r0, [r5], #-0
    faec:	25000000 	strcs	r0, [r0, #-0]
    faf0:	000000d9 	ldrdeq	r0, [r0], -r9
    faf4:	02070000 	andeq	r0, r7, #0
    faf8:	00040000 	andeq	r0, r4, r0
    fafc:	0000381e 	andeq	r3, r0, lr, lsl r8
    fb00:	2a3d0104 	bcs	f4ff18 <__ccfg+0xf2ff70>
    fb04:	72010000 	andvc	r0, r1, #0
    fb08:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    fb0c:	2800002b 	stmdacs	r0, {r0, r1, r3, r5}
    fb10:	00000012 	andeq	r0, r0, r2, lsl r0
    fb14:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    fb18:	0200007f 	andeq	r0, r0, #127	; 0x7f
    fb1c:	0c690601 	stcleq	6, cr0, [r9], #-4
    fb20:	01020000 	mrseq	r0, (UNDEF: 2)
    fb24:	000c6708 	andeq	r6, ip, r8, lsl #14
    fb28:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    fb2c:	00000a77 	andeq	r0, r0, r7, ror sl
    fb30:	64070202 	strvs	r0, [r7], #-514	; 0xfffffdfe
    fb34:	0200000d 	andeq	r0, r0, #13
    fb38:	08090504 	stmdaeq	r9, {r2, r8, sl}
    fb3c:	b0030000 	andlt	r0, r3, r0
    fb40:	03000029 	movweq	r0, #41	; 0x29
    fb44:	00005341 	andeq	r5, r0, r1, asr #6
    fb48:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fb4c:	00000439 	andeq	r0, r0, r9, lsr r4
    fb50:	04050802 	streq	r0, [r5], #-2050	; 0xfffff7fe
    fb54:	02000008 	andeq	r0, r0, #8
    fb58:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
    fb5c:	04040000 	streq	r0, [r4], #-0
    fb60:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fb64:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fb68:	0000043e 	andeq	r0, r0, lr, lsr r4
    fb6c:	0029b203 	eoreq	fp, r9, r3, lsl #4
    fb70:	48200400 	stmdami	r0!, {sl}
    fb74:	05000000 	streq	r0, [r0, #-0]
    fb78:	000035cf 	andeq	r3, r0, pc, asr #11
    fb7c:	03033002 	movweq	r3, #12290	; 0x3002
    fb80:	00363a06 	eorseq	r3, r6, r6, lsl #20
    fb84:	01fd0100 	mvnseq	r0, r0, lsl #2
    fb88:	0035e205 	eorseq	lr, r5, r5, lsl #4
    fb8c:	01820100 	orreq	r0, r2, r0, lsl #2
    fb90:	34bd0701 	ldrtcc	r0, [sp], #1793	; 0x701
    fb94:	0d010000 	stceq	0, cr0, [r1, #-0]
    fb98:	003c8401 	eorseq	r8, ip, r1, lsl #8
    fb9c:	0000d400 	andeq	sp, r0, r0, lsl #8
    fba0:	6d9c0100 	ldfvss	f0, [ip]
    fba4:	08000001 	stmdaeq	r0, {r0}
    fba8:	000035bd 			; <UNDEFINED> instruction: 0x000035bd
    fbac:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    fbb0:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    fbb4:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
    fbb8:	00003629 	andeq	r3, r0, r9, lsr #12
    fbbc:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    fbc0:	22000000 	andcs	r0, r0, #0
    fbc4:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    fbc8:	000034b6 			; <UNDEFINED> instruction: 0x000034b6
    fbcc:	76011001 	strvc	r1, [r1], -r1
    fbd0:	35000000 	strcc	r0, [r0, #-0]
    fbd4:	0a00003e 	beq	fcd4 <__exidx_end+0xa3bc>
    fbd8:	00000081 	andeq	r0, r0, r1, lsl #1
    fbdc:	00003cb6 			; <UNDEFINED> instruction: 0x00003cb6
    fbe0:	00000006 	andeq	r0, r0, r6
    fbe4:	0b013601 	bleq	5d3f0 <__ccfg+0x3d448>
    fbe8:	00003cdc 	ldrdeq	r3, [r0], -ip
    fbec:	0000002a 	andeq	r0, r0, sl, lsr #32
    fbf0:	0000011f 	andeq	r0, r0, pc, lsl r1
    fbf4:	0036af09 	eorseq	sl, r6, r9, lsl #30
    fbf8:	01530100 	cmpeq	r3, r0, lsl #2
    fbfc:	00000076 	andeq	r0, r0, r6, ror r0
    fc00:	00003e4e 	andeq	r3, r0, lr, asr #28
    fc04:	00360b09 	eorseq	r0, r6, r9, lsl #22
    fc08:	01540100 	cmpeq	r4, r0, lsl #2
    fc0c:	00000076 	andeq	r0, r0, r6, ror r0
    fc10:	00003e61 	andeq	r3, r0, r1, ror #28
    fc14:	3cc60c00 	stclcc	12, cr0, [r6], {0}
    fc18:	01c30000 	biceq	r0, r3, r0
    fc1c:	01330000 	teqeq	r3, r0
    fc20:	010d0000 	mrseq	r0, (UNDEF: 13)
    fc24:	00740250 	rsbseq	r0, r4, r0, asr r2
    fc28:	3cce0c00 	stclcc	12, cr0, [lr], {0}
    fc2c:	01d40000 	bicseq	r0, r4, r0
    fc30:	014d0000 	mrseq	r0, (UNDEF: 77)
    fc34:	010d0000 	mrseq	r0, (UNDEF: 13)
    fc38:	00740251 	rsbseq	r0, r4, r1, asr r2
    fc3c:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fc40:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    fc44:	00003d0c 	andeq	r3, r0, ip, lsl #26
    fc48:	000001ea 	andeq	r0, r0, sl, ror #3
    fc4c:	00000161 	andeq	r0, r0, r1, ror #2
    fc50:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fc54:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    fc58:	00003d16 	andeq	r3, r0, r6, lsl sp
    fc5c:	0150010d 	cmpeq	r0, sp, lsl #2
    fc60:	0f000032 	svceq	0x00000032
    fc64:	000035f5 	strdeq	r3, [r0], -r5
    fc68:	3d585f07 	ldclcc	15, cr5, [r8, #-28]	; 0xffffffe4
    fc6c:	00a40000 	adceq	r0, r4, r0
    fc70:	9c010000 	stcls	0, cr0, [r1], {-0}
    fc74:	000001c3 	andeq	r0, r0, r3, asr #3
    fc78:	0035bd10 	eorseq	fp, r5, r0, lsl sp
    fc7c:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    fc80:	8c000000 	stchi	0, cr0, [r0], {-0}
    fc84:	1000003e 	andne	r0, r0, lr, lsr r0
    fc88:	00003616 	andeq	r3, r0, r6, lsl r6
    fc8c:	00767301 	rsbseq	r7, r6, r1, lsl #6
    fc90:	3e9f0000 	cdpcc	0, 9, cr0, cr15, cr0, {0}
    fc94:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
    fc98:	fb00003d 	blx	fd96 <__exidx_end+0xa47e>
    fc9c:	11000001 	tstne	r0, r1
    fca0:	00003d7c 	andeq	r3, r0, ip, ror sp
    fca4:	00000203 	andeq	r0, r0, r3, lsl #4
    fca8:	003d8c12 	eorseq	r8, sp, r2, lsl ip
    fcac:	00009b00 	andeq	r9, r0, r0, lsl #22
    fcb0:	50010d00 	andpl	r0, r1, r0, lsl #26
    fcb4:	00007402 	andeq	r7, r0, r2, lsl #8
    fcb8:	34e21300 	strbtcc	r1, [r2], #768	; 0x300
    fcbc:	6c050000 	stcvs	0, cr0, [r5], {-0}
    fcc0:	000001d4 	ldrdeq	r0, [r0], -r4
    fcc4:	00007614 	andeq	r7, r0, r4, lsl r6
    fcc8:	12130000 	andsne	r0, r3, #0
    fccc:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    fcd0:	0001ea73 	andeq	lr, r1, r3, ror sl
    fcd4:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fcd8:	76140000 	ldrvc	r0, [r4], -r0
    fcdc:	00000000 	andeq	r0, r0, r0
    fce0:	00354213 	eorseq	r4, r5, r3, lsl r2
    fce4:	fb7a0500 	blx	1e910ee <__ccfg+0x1e71146>
    fce8:	14000001 	strne	r0, [r0], #-1
    fcec:	00000076 	andeq	r0, r0, r6, ror r0
    fcf0:	36721500 	ldrbtcc	r1, [r2], -r0, lsl #10
    fcf4:	43060000 	movwmi	r0, #24576	; 0x6000
    fcf8:	358f1602 	strcc	r1, [pc, #1538]	; 10302 <__exidx_end+0xa9ea>
    fcfc:	fd050000 	stc2	0, cr0, [r5, #-0]
    fd00:	000b1700 	andeq	r1, fp, r0, lsl #14
    fd04:	60000400 	andvs	r0, r0, r0, lsl #8
    fd08:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    fd0c:	002a3d01 	eoreq	r3, sl, r1, lsl #26
    fd10:	38f20100 	ldmcc	r2!, {r8}^
    fd14:	2b040000 	blcs	10fd1c <__ccfg+0xefd74>
    fd18:	12700000 	rsbsne	r0, r0, #0
    fd1c:	00000000 	andeq	r0, r0, r0
    fd20:	81bb0000 			; <UNDEFINED> instruction: 0x81bb0000
    fd24:	01020000 	mrseq	r0, (UNDEF: 2)
    fd28:	000c6906 	andeq	r6, ip, r6, lsl #18
    fd2c:	08010200 	stmdaeq	r1, {r9}
    fd30:	00000c67 	andeq	r0, r0, r7, ror #24
    fd34:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    fd38:	0200000a 	andeq	r0, r0, #10
    fd3c:	0d640702 	stcleq	7, cr0, [r4, #-8]!
    fd40:	9d030000 	stcls	0, cr0, [r3, #-0]
    fd44:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    fd48:	00004c3f 	andeq	r4, r0, pc, lsr ip
    fd4c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    fd50:	00000809 	andeq	r0, r0, r9, lsl #16
    fd54:	0029b003 	eoreq	fp, r9, r3
    fd58:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    fd5c:	02000000 	andeq	r0, r0, #0
    fd60:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
    fd64:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fd68:	00080405 	andeq	r0, r8, r5, lsl #8
    fd6c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    fd70:	00000434 	andeq	r0, r0, r4, lsr r4
    fd74:	69050404 	stmdbvs	r5, {r2, sl}
    fd78:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    fd7c:	043e0704 	ldrteq	r0, [lr], #-1796	; 0xfffff8fc
    fd80:	9f030000 	svcls	0x00030000
    fd84:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    fd88:	0000411f 	andeq	r4, r0, pc, lsl r1
    fd8c:	29b20300 	ldmibcs	r2!, {r8, r9}
    fd90:	20050000 	andcs	r0, r5, r0
    fd94:	00000053 	andeq	r0, r0, r3, asr r0
    fd98:	00398505 	eorseq	r8, r9, r5, lsl #10
    fd9c:	81e90200 	mvnhi	r0, r0, lsl #4
    fda0:	03000000 	movweq	r0, #0
    fda4:	000000be 	strheq	r0, [r0], -lr
    fda8:	0036d506 	eorseq	sp, r6, r6, lsl #10
    fdac:	8ce90200 	sfmhi	f0, 2, [r9]
    fdb0:	07000000 	streq	r0, [r0, -r0]
    fdb4:	000039de 	ldrdeq	r3, [r0], -lr
    fdb8:	0081ef02 	addeq	lr, r1, r2, lsl #30
    fdbc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fdc0:	0000370a 	andeq	r3, r0, sl, lsl #14
    fdc4:	008cab02 	addeq	sl, ip, r2, lsl #22
    fdc8:	e7010000 	str	r0, [r1, -r0]
    fdcc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    fdd0:	000035bd 			; <UNDEFINED> instruction: 0x000035bd
    fdd4:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    fdd8:	0a000000 	beq	fde0 <__exidx_end+0xa4c8>
    fddc:	00003a67 	andeq	r3, r0, r7, ror #20
    fde0:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    fde4:	00000000 	andeq	r0, r0, r0
    fde8:	0039bd08 	eorseq	fp, r9, r8, lsl #26
    fdec:	8c810200 	sfmhi	f0, 4, [r1], {0}
    fdf0:	01000000 	mrseq	r0, (UNDEF: 0)
    fdf4:	00000110 	andeq	r0, r0, r0, lsl r1
    fdf8:	0035bd09 	eorseq	fp, r5, r9, lsl #26
    fdfc:	033c0100 	teqeq	ip, #0, 2
    fe00:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe04:	003a2e0a 	eorseq	r2, sl, sl, lsl #28
    fe08:	033e0100 	teqeq	lr, #0, 2
    fe0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe10:	386b0800 	stmdacc	fp!, {fp}^
    fe14:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    fe18:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe1c:	00013901 	andeq	r3, r1, r1, lsl #18
    fe20:	35bd0900 	ldrcc	r0, [sp, #2304]!	; 0x900
    fe24:	4f010000 	svcmi	0x00010000
    fe28:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe2c:	39a20a00 	stmibcc	r2!, {r9, fp}
    fe30:	51010000 	mrspl	r0, (UNDEF: 1)
    fe34:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe38:	cf080000 	svcgt	0x00080000
    fe3c:	02000037 	andeq	r0, r0, #55	; 0x37
    fe40:	00008cc8 	andeq	r8, r0, r8, asr #25
    fe44:	016e0100 	cmneq	lr, r0, lsl #2
    fe48:	bd090000 	stclt	0, cr0, [r9, #-0]
    fe4c:	01000035 	tsteq	r0, r5, lsr r0
    fe50:	008c0362 	addeq	r0, ip, r2, ror #6
    fe54:	5f0a0000 	svcpl	0x000a0000
    fe58:	01000037 	tsteq	r0, r7, lsr r0
    fe5c:	008c0364 	addeq	r0, ip, r4, ror #6
    fe60:	a00a0000 	andge	r0, sl, r0
    fe64:	01000038 	tsteq	r0, r8, lsr r0
    fe68:	008c0365 	addeq	r0, ip, r5, ror #6
    fe6c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fe70:	000038d2 	ldrdeq	r3, [r0], -r2
    fe74:	008cb202 	addeq	fp, ip, r2, lsl #4
    fe78:	a3010000 	movwge	r0, #4096	; 0x1000
    fe7c:	09000001 	stmdbeq	r0, {r0}
    fe80:	000035bd 			; <UNDEFINED> instruction: 0x000035bd
    fe84:	8c039401 	cfstrshi	mvf9, [r3], {1}
    fe88:	0a000000 	beq	fe90 <__exidx_end+0xa578>
    fe8c:	000037ee 	andeq	r3, r0, lr, ror #15
    fe90:	8c039601 	stchi	6, cr9, [r3], {1}
    fe94:	0a000000 	beq	fe9c <__exidx_end+0xa584>
    fe98:	000038a0 	andeq	r3, r0, r0, lsr #17
    fe9c:	8c039701 	stchi	7, cr9, [r3], {1}
    fea0:	00000000 	andeq	r0, r0, r0
    fea4:	00379d08 	eorseq	r9, r7, r8, lsl #26
    fea8:	8cb90200 	lfmhi	f0, 4, [r9]
    feac:	01000000 	mrseq	r0, (UNDEF: 0)
    feb0:	000001cc 	andeq	r0, r0, ip, asr #3
    feb4:	0035bd09 	eorseq	fp, r5, r9, lsl #26
    feb8:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    febc:	0000008c 	andeq	r0, r0, ip, lsl #1
    fec0:	0038aa0a 	eorseq	sl, r8, sl, lsl #20
    fec4:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    fec8:	0000008c 	andeq	r0, r0, ip, lsl #1
    fecc:	39480800 	stmdbcc	r8, {fp}^
    fed0:	df020000 	svcle	0x00020000
    fed4:	0000008c 	andeq	r0, r0, ip, lsl #1
    fed8:	0001f501 	andeq	pc, r1, r1, lsl #10
    fedc:	35bd0900 	ldrcc	r0, [sp, #2304]!	; 0x900
    fee0:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    fee4:	00008c03 	andeq	r8, r0, r3, lsl #24
    fee8:	3a870a00 	bcc	fe1d26f0 <_estack+0xde1cd6f0>
    feec:	ca010000 	bgt	4fef4 <__ccfg+0x2ff4c>
    fef0:	00008c03 	andeq	r8, r0, r3, lsl #24
    fef4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    fef8:	0200003a 	andeq	r0, r0, #58	; 0x3a
    fefc:	00008cd7 	ldrdeq	r8, [r0], -r7
    ff00:	02120100 	andseq	r0, r2, #0, 2
    ff04:	3a0a0000 	bcc	28ff0c <__ccfg+0x26ff64>
    ff08:	0100003b 	tsteq	r0, fp, lsr r0
    ff0c:	008c0283 	addeq	r0, ip, r3, lsl #5
    ff10:	0b000000 	bleq	ff18 <__exidx_end+0xa600>
    ff14:	000012d0 	ldrdeq	r1, [r0], -r0
    ff18:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    ff1c:	00003b17 	andeq	r3, r0, r7, lsl fp
    ff20:	fc010f02 	stc2	15, cr0, [r1], {2}
    ff24:	7c00003d 	stcvc	0, cr0, [r0], {61}	; 0x3d
    ff28:	01000000 	mrseq	r0, (UNDEF: 0)
    ff2c:	0002c49c 	muleq	r2, ip, r4
    ff30:	36290d00 	strtcc	r0, [r9], -r0, lsl #26
    ff34:	7f010000 	svcvc	0x00010000
    ff38:	0000008c 	andeq	r0, r0, ip, lsl #1
    ff3c:	00003eb2 			; <UNDEFINED> instruction: 0x00003eb2
    ff40:	003b2f07 	eorseq	r2, fp, r7, lsl #30
    ff44:	8c810100 	stfhis	f0, [r1], {0}
    ff48:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ff4c:	000038c7 	andeq	r3, r0, r7, asr #17
    ff50:	00818201 	addeq	r8, r1, r1, lsl #4
    ff54:	52010000 	andpl	r0, r1, #0
    ff58:	00373a0f 	eorseq	r3, r7, pc, lsl #20
    ff5c:	81830100 	orrhi	r0, r3, r0, lsl #2
    ff60:	d3000000 	movwle	r0, #0
    ff64:	0f00003e 	svceq	0x0000003e
    ff68:	00003808 	andeq	r3, r0, r8, lsl #16
    ff6c:	00818401 	addeq	r8, r1, r1, lsl #8
    ff70:	3ee60000 	cdpcc	0, 14, cr0, cr6, cr0, {0}
    ff74:	97100000 	ldrls	r0, [r0, -r0]
    ff78:	0a000000 	beq	ff80 <__exidx_end+0xa668>
    ff7c:	4000003e 	andmi	r0, r0, lr, lsr r0
    ff80:	01000012 	tsteq	r0, r2, lsl r0
    ff84:	00029b97 	muleq	r2, r7, fp
    ff88:	00a71100 	adceq	r1, r7, r0, lsl #2
    ff8c:	40120000 	andsmi	r0, r2, r0
    ff90:	13000012 	movwne	r0, #18
    ff94:	000000b2 	strheq	r0, [r0], -r2
    ff98:	00005201 	andeq	r5, r0, r1, lsl #4
    ff9c:	00009714 	andeq	r9, r0, r4, lsl r7
    ffa0:	003e1400 	eorseq	r1, lr, r0, lsl #8
    ffa4:	00000600 	andeq	r0, r0, r0, lsl #12
    ffa8:	11980100 	orrsne	r0, r8, r0, lsl #2
    ffac:	000000a7 	andeq	r0, r0, r7, lsr #1
    ffb0:	003e1415 	eorseq	r1, lr, r5, lsl r4
    ffb4:	00000600 	andeq	r0, r0, r0, lsl #12
    ffb8:	00b21600 	adcseq	r1, r2, r0, lsl #12
    ffbc:	3f140000 	svccc	0x00140000
    ffc0:	00000000 	andeq	r0, r0, r0
    ffc4:	34e21700 	strbtcc	r1, [r2], #1792	; 0x700
    ffc8:	6c020000 	stcvs	0, cr0, [r2], {-0}
    ffcc:	00003e78 	andeq	r3, r0, r8, ror lr
    ffd0:	000000ac 	andeq	r0, r0, ip, lsr #1
    ffd4:	03439c01 	movteq	r9, #15361	; 0x3c01
    ffd8:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
    ffdc:	01000036 	tsteq	r0, r6, lsr r0
    ffe0:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    ffe4:	003f2700 	eorseq	r2, pc, r0, lsl #14
    ffe8:	3a490f00 	bcc	1253bf0 <__ccfg+0x1233c48>
    ffec:	c1010000 	mrsgt	r0, (UNDEF: 1)
    fff0:	00000081 	andeq	r0, r0, r1, lsl #1
    fff4:	00003f5b 	andeq	r3, r0, fp, asr pc
    fff8:	003b5f0f 	eorseq	r5, fp, pc, lsl #30
    fffc:	81c20100 	bichi	r0, r2, r0, lsl #2
   10000:	84000000 	strhi	r0, [r0], #-0
   10004:	1800003f 	stmdane	r0, {r0, r1, r2, r3, r4, r5}
   10008:	00000097 	muleq	r0, r7, r0
   1000c:	00003eae 	andeq	r3, r0, lr, lsr #29
   10010:	00000006 	andeq	r0, r0, r6
   10014:	0332ee01 	teqeq	r2, #1, 28
   10018:	a7110000 	ldrge	r0, [r1, -r0]
   1001c:	15000000 	strne	r0, [r0, #-0]
   10020:	00003eae 	andeq	r3, r0, lr, lsr #29
   10024:	00000006 	andeq	r0, r0, r6
   10028:	0000b216 	andeq	fp, r0, r6, lsl r2
   1002c:	003fab00 	eorseq	sl, pc, r0, lsl #22
   10030:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   10034:	00003e9c 	muleq	r0, ip, lr
   10038:	0000021a 	andeq	r0, r0, sl, lsl r2
   1003c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10040:	00000074 	andeq	r0, r0, r4, ror r0
   10044:	0036e51b 	eorseq	lr, r6, fp, lsl r5
   10048:	8ca40200 	sfmhi	f0, 4, [r4]
   1004c:	24000000 	strcs	r0, [r0], #-0
   10050:	5c00003f 	stcpl	0, cr0, [r0], {63}	; 0x3f
   10054:	01000000 	mrseq	r0, (UNDEF: 0)
   10058:	0003bd9c 	muleq	r3, ip, sp
   1005c:	36291c00 	strtcc	r1, [r9], -r0, lsl #24
   10060:	1f010000 	svcne	0x00010000
   10064:	00008c02 	andeq	r8, r0, r2, lsl #24
   10068:	003fbe00 	eorseq	fp, pc, r0, lsl #28
   1006c:	39f91d00 	ldmibcc	r9!, {r8, sl, fp, ip}^
   10070:	21010000 	mrscs	r0, (UNDEF: 1)
   10074:	00008c02 	andeq	r8, r0, r2, lsl #24
   10078:	003fdf00 	eorseq	sp, pc, r0, lsl #30
   1007c:	3afb1d00 	bcc	ffed7484 <_estack+0xdfed2484>
   10080:	22010000 	andcs	r0, r1, #0
   10084:	00008c02 	andeq	r8, r0, r2, lsl #24
   10088:	003ff200 	eorseq	pc, pc, r0, lsl #4
   1008c:	3b091d00 	blcc	257494 <__ccfg+0x2374ec>
   10090:	23010000 	movwcs	r0, #4096	; 0x1000
   10094:	00008c02 	andeq	r8, r0, r2, lsl #24
   10098:	00404000 	subeq	r4, r0, r0
   1009c:	3b481d00 	blcc	12174a4 <__ccfg+0x11f74fc>
   100a0:	24010000 	strcs	r0, [r1], #-0
   100a4:	00008102 	andeq	r8, r0, r2, lsl #2
   100a8:	0040a800 	subeq	sl, r0, r0, lsl #16
   100ac:	3b3a1d00 	blcc	e974b4 <__ccfg+0xe7750c>
   100b0:	25010000 	strcs	r0, [r1, #-0]
   100b4:	00008c02 	andeq	r8, r0, r2, lsl #24
   100b8:	0040c700 	subeq	ip, r0, r0, lsl #14
   100bc:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
   100c0:	02000039 	andeq	r0, r0, #57	; 0x39
   100c4:	00008cc1 	andeq	r8, r0, r1, asr #25
   100c8:	003f8000 	eorseq	r8, pc, r0
   100cc:	00001800 	andeq	r1, r0, r0, lsl #16
   100d0:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
   100d4:	1d000003 	stcne	0, cr0, [r0, #-12]
   100d8:	00003b3a 	andeq	r3, r0, sl, lsr fp
   100dc:	8c026701 	stchi	7, cr6, [r2], {1}
   100e0:	ec000000 	stc	0, cr0, [r0], {-0}
   100e4:	00000040 	andeq	r0, r0, r0, asr #32
   100e8:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
   100ec:	00000000 	andeq	r0, r0, r0
   100f0:	00001000 	andeq	r1, r0, r0
   100f4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
   100f8:	16000004 	strne	r0, [r0], -r4
   100fc:	00000205 	andeq	r0, r0, r5, lsl #4
   10100:	00004113 	andeq	r4, r0, r3, lsl r1
   10104:	384b1b00 	stmdacc	fp, {r8, r9, fp, ip}^
   10108:	9d020000 	stcls	0, cr0, [r2, #-0]
   1010c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10110:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
   10114:	00000010 	andeq	r0, r0, r0, lsl r0
   10118:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
   1011c:	3a1d0000 	bcc	750124 <__ccfg+0x73017c>
   10120:	0100003b 	tsteq	r0, fp, lsr r0
   10124:	008c0297 	umulleq	r0, ip, r7, r2
   10128:	412c0000 			; <UNDEFINED> instruction: 0x412c0000
   1012c:	f91d0000 			; <UNDEFINED> instruction: 0xf91d0000
   10130:	01000039 	tsteq	r0, r9, lsr r0
   10134:	008c0298 	umulleq	r0, ip, r8, r2
   10138:	414d0000 	mrsmi	r0, (UNDEF: 77)
   1013c:	1b000000 	blne	10144 <__exidx_end+0xa82c>
   10140:	0000382b 	andeq	r3, r0, fp, lsr #16
   10144:	008c9602 	addeq	r9, ip, r2, lsl #12
   10148:	3fa80000 	svccc	0x00a80000
   1014c:	00140000 	andseq	r0, r4, r0
   10150:	9c010000 	stcls	0, cr0, [r1], {-0}
   10154:	00000478 	andeq	r0, r0, r8, ror r4
   10158:	003b3a1d 	eorseq	r3, fp, sp, lsl sl
   1015c:	02ba0100 	adcseq	r0, sl, #0, 2
   10160:	0000008c 	andeq	r0, r0, ip, lsl #1
   10164:	00004160 	andeq	r4, r0, r0, ror #2
   10168:	0039f91d 	eorseq	pc, r9, sp, lsl r9	; <UNPREDICTABLE>
   1016c:	02bb0100 	adcseq	r0, fp, #0, 2
   10170:	0000008c 	andeq	r0, r0, ip, lsl #1
   10174:	00004181 	andeq	r4, r0, r1, lsl #3
   10178:	3ada1b00 	bcc	ff696d80 <_estack+0xdf691d80>
   1017c:	8f020000 	svchi	0x00020000
   10180:	0000008c 	andeq	r0, r0, ip, lsl #1
   10184:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
   10188:	00000064 	andeq	r0, r0, r4, rrx
   1018c:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
   10190:	bd1c0000 	ldclt	0, cr0, [ip, #-0]
   10194:	01000035 	tsteq	r0, r5, lsr r0
   10198:	008c02db 	ldrdeq	r0, [ip], fp
   1019c:	41940000 	orrsmi	r0, r4, r0
   101a0:	3a1d0000 	bcc	7501a8 <__ccfg+0x730200>
   101a4:	0100003b 	tsteq	r0, fp, lsr r0
   101a8:	008c02dd 	ldrdeq	r0, [ip], sp
   101ac:	41b50000 			; <UNDEFINED> instruction: 0x41b50000
   101b0:	f91d0000 			; <UNDEFINED> instruction: 0xf91d0000
   101b4:	01000039 	tsteq	r0, r9, lsr r0
   101b8:	008c02de 	ldrdeq	r0, [ip], lr
   101bc:	41e90000 	mvnmi	r0, r0
   101c0:	531d0000 	tstpl	sp, #0
   101c4:	01000037 	tsteq	r0, r7, lsr r0
   101c8:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
   101cc:	41fc0000 	mvnsmi	r0, r0
   101d0:	b21d0000 	andslt	r0, sp, #0
   101d4:	0100003a 	tsteq	r0, sl, lsr r0
   101d8:	008c02e0 	addeq	r0, ip, r0, ror #5
   101dc:	422a0000 	eormi	r0, sl, #0
   101e0:	ef0a0000 	svc	0x000a0000
   101e4:	01000039 	tsteq	r0, r9, lsr r0
   101e8:	008c02e1 	addeq	r0, ip, r1, ror #5
   101ec:	c31d0000 	tstgt	sp, #0
   101f0:	01000037 	tsteq	r0, r7, lsr r0
   101f4:	008102e2 	addeq	r0, r1, r2, ror #5
   101f8:	42580000 	subsmi	r0, r8, #0
   101fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10200:	000000be 	strheq	r0, [r0], -lr
   10204:	00004020 	andeq	r4, r0, r0, lsr #32
   10208:	00000014 	andeq	r0, r0, r4, lsl r0
   1020c:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
   10210:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
   10214:	d3000000 	movwle	r0, #0
   10218:	16000042 	strne	r0, [r0], -r2, asr #32
   1021c:	000000da 	ldrdeq	r0, [r0], -sl
   10220:	000042f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10224:	00402215 	subeq	r2, r0, r5, lsl r2
   10228:	00000a00 	andeq	r0, r0, r0, lsl #20
   1022c:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
   10230:	43130000 	tstmi	r3, #0
   10234:	22150000 	andscs	r0, r5, #0
   10238:	0a000040 	beq	10340 <__exidx_end+0xaa28>
   1023c:	16000000 	strne	r0, [r0], -r0
   10240:	000000da 	ldrdeq	r0, [r0], -sl
   10244:	00004334 	andeq	r4, r0, r4, lsr r3
   10248:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   1024c:	000000e7 	andeq	r0, r0, r7, ror #1
   10250:	00004034 	andeq	r4, r0, r4, lsr r0
   10254:	00000014 	andeq	r0, r0, r4, lsl r0
   10258:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
   1025c:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
   10260:	47000000 	strmi	r0, [r0, -r0]
   10264:	16000043 	strne	r0, [r0], -r3, asr #32
   10268:	00000103 	andeq	r0, r0, r3, lsl #2
   1026c:	00004368 	andeq	r4, r0, r8, ror #6
   10270:	00403615 	subeq	r3, r0, r5, lsl r6
   10274:	00000a00 	andeq	r0, r0, r0, lsl #20
   10278:	00f71f00 	rscseq	r1, r7, r0, lsl #30
   1027c:	43870000 	orrmi	r0, r7, #0
   10280:	36150000 	ldrcc	r0, [r5], -r0
   10284:	0a000040 	beq	1038c <__exidx_end+0xaa74>
   10288:	16000000 	strne	r0, [r0], -r0
   1028c:	00000103 	andeq	r0, r0, r3, lsl #2
   10290:	000043a8 	andeq	r4, r0, r8, lsr #7
   10294:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10298:	00000110 	andeq	r0, r0, r0, lsl r1
   1029c:	00004048 	andeq	r4, r0, r8, asr #32
   102a0:	00000014 	andeq	r0, r0, r4, lsl r0
   102a4:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
   102a8:	201f0000 	andscs	r0, pc, r0
   102ac:	bb000001 	bllt	102b8 <__exidx_end+0xa9a0>
   102b0:	16000043 	strne	r0, [r0], -r3, asr #32
   102b4:	0000012c 	andeq	r0, r0, ip, lsr #2
   102b8:	000043dc 	ldrdeq	r4, [r0], -ip
   102bc:	00404a15 	subeq	r4, r0, r5, lsl sl
   102c0:	00000a00 	andeq	r0, r0, r0, lsl #20
   102c4:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
   102c8:	43fb0000 	mvnsmi	r0, #0
   102cc:	4a150000 	bmi	5502d4 <__ccfg+0x53032c>
   102d0:	0a000040 	beq	103d8 <__exidx_end+0xaac0>
   102d4:	16000000 	strne	r0, [r0], -r0
   102d8:	0000012c 	andeq	r0, r0, ip, lsr #2
   102dc:	0000441c 	andeq	r4, r0, ip, lsl r4
   102e0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   102e4:	00000139 	andeq	r0, r0, r9, lsr r1
   102e8:	0000405c 	andeq	r4, r0, ip, asr r0
   102ec:	00000028 	andeq	r0, r0, r8, lsr #32
   102f0:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
   102f4:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
   102f8:	2f000001 	svccs	0x00000001
   102fc:	16000044 	strne	r0, [r0], -r4, asr #32
   10300:	00000155 	andeq	r0, r0, r5, asr r1
   10304:	00004450 	andeq	r4, r0, r0, asr r4
   10308:	00016120 	andeq	r6, r1, r0, lsr #2
   1030c:	405e1500 	subsmi	r1, lr, r0, lsl #10
   10310:	001c0000 	andseq	r0, ip, r0
   10314:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
   10318:	6f000001 	svcvs	0x00000001
   1031c:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   10320:	0000405e 	andeq	r4, r0, lr, asr r0
   10324:	0000001c 	andeq	r0, r0, ip, lsl r0
   10328:	00015516 	andeq	r5, r1, r6, lsl r5
   1032c:	00449000 	subeq	r9, r4, r0
   10330:	01611600 	cmneq	r1, r0, lsl #12
   10334:	44bd0000 	ldrtmi	r0, [sp], #0
   10338:	00000000 	andeq	r0, r0, r0
   1033c:	37781b00 	ldrbcc	r1, [r8, -r0, lsl #22]!
   10340:	cf020000 	svcgt	0x00020000
   10344:	0000008c 	andeq	r0, r0, ip, lsl #1
   10348:	00004084 	andeq	r4, r0, r4, lsl #1
   1034c:	00000010 	andeq	r0, r0, r0, lsl r0
   10350:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
   10354:	121d0000 	andsne	r0, sp, #0
   10358:	01000038 	tsteq	r0, r8, lsr r0
   1035c:	008c0384 	addeq	r0, ip, r4, lsl #7
   10360:	44d00000 	ldrbmi	r0, [r0], #0
   10364:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10368:	0000016e 	andeq	r0, r0, lr, ror #2
   1036c:	00004094 	muleq	r0, r4, r0
   10370:	0000002c 	andeq	r0, r0, ip, lsr #32
   10374:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
   10378:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
   1037c:	eb000001 	bl	10388 <__exidx_end+0xaa70>
   10380:	16000044 	strne	r0, [r0], -r4, asr #32
   10384:	0000018a 	andeq	r0, r0, sl, lsl #3
   10388:	0000450c 	andeq	r4, r0, ip, lsl #10
   1038c:	00019620 	andeq	r9, r1, r0, lsr #12
   10390:	40961500 	addsmi	r1, r6, r0, lsl #10
   10394:	001e0000 	andseq	r0, lr, r0
   10398:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
   1039c:	2f000001 	svccs	0x00000001
   103a0:	15000045 	strne	r0, [r0, #-69]	; 0xffffffbb
   103a4:	00004096 	muleq	r0, r6, r0
   103a8:	0000001e 	andeq	r0, r0, lr, lsl r0
   103ac:	00018a16 	andeq	r8, r1, r6, lsl sl
   103b0:	00455000 	subeq	r5, r5, r0
   103b4:	01961600 	orrseq	r1, r6, r0, lsl #12
   103b8:	457d0000 	ldrbmi	r0, [sp, #-0]!
   103bc:	00000000 	andeq	r0, r0, r0
   103c0:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
   103c4:	40c00000 	sbcmi	r0, r0, r0
   103c8:	00140000 	andseq	r0, r4, r0
   103cc:	9c010000 	stcls	0, cr0, [r1], {-0}
   103d0:	0000070c 	andeq	r0, r0, ip, lsl #14
   103d4:	0001b31f 	andeq	fp, r1, pc, lsl r3
   103d8:	00459000 	subeq	r9, r5, r0
   103dc:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
   103e0:	45b10000 	ldrmi	r0, [r1, #0]!
   103e4:	c2150000 	andsgt	r0, r5, #0
   103e8:	0a000040 	beq	104f0 <__exidx_end+0xabd8>
   103ec:	1f000000 	svcne	0x00000000
   103f0:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
   103f4:	000045d0 	ldrdeq	r4, [r0], -r0
   103f8:	0040c215 	subeq	ip, r0, r5, lsl r2
   103fc:	00000a00 	andeq	r0, r0, r0, lsl #20
   10400:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
   10404:	45f10000 	ldrbmi	r0, [r1, #0]!
   10408:	00000000 	andeq	r0, r0, r0
   1040c:	01cc1e00 	biceq	r1, ip, r0, lsl #28
   10410:	40d40000 	sbcsmi	r0, r4, r0
   10414:	00140000 	andseq	r0, r4, r0
   10418:	9c010000 	stcls	0, cr0, [r1], {-0}
   1041c:	00000758 	andeq	r0, r0, r8, asr r7
   10420:	0001dc1f 	andeq	sp, r1, pc, lsl ip
   10424:	00460400 	subeq	r0, r6, r0, lsl #8
   10428:	01e81600 	mvneq	r1, r0, lsl #12
   1042c:	46250000 	strtmi	r0, [r5], -r0
   10430:	d6150000 	ldrle	r0, [r5], -r0
   10434:	0a000040 	beq	1053c <__exidx_end+0xac24>
   10438:	1f000000 	svcne	0x00000000
   1043c:	000001dc 	ldrdeq	r0, [r0], -ip
   10440:	00004644 	andeq	r4, r0, r4, asr #12
   10444:	0040d615 	subeq	sp, r0, r5, lsl r6
   10448:	00000a00 	andeq	r0, r0, r0, lsl #20
   1044c:	01e81600 	mvneq	r1, r0, lsl #12
   10450:	46650000 	strbtmi	r0, [r5], -r0
   10454:	00000000 	andeq	r0, r0, r0
   10458:	35121700 	ldrcc	r1, [r2, #-1792]	; 0xfffff900
   1045c:	73020000 	movwvc	r0, #8192	; 0x2000
   10460:	000040e8 	andeq	r4, r0, r8, ror #1
   10464:	00000110 	andeq	r0, r0, r0, lsl r1
   10468:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
   1046c:	bd1c0000 	ldclt	0, cr0, [ip, #-0]
   10470:	01000035 	tsteq	r0, r5, lsr r0
   10474:	008c0127 	addeq	r0, ip, r7, lsr #2
   10478:	46780000 	ldrbtmi	r0, [r8], -r0
   1047c:	291c0000 	ldmdbcs	ip, {}	; <UNPREDICTABLE>
   10480:	01000036 	tsteq	r0, r6, lsr r0
   10484:	008c0127 	addeq	r0, ip, r7, lsr #2
   10488:	46a40000 	strtmi	r0, [r4], r0
   1048c:	7c1d0000 	ldcvc	0, cr0, [sp], {-0}
   10490:	01000039 	tsteq	r0, r9, lsr r0
   10494:	008c0129 	addeq	r0, ip, r9, lsr #2
   10498:	46c50000 	strbmi	r0, [r5], r0
   1049c:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
   104a0:	18000001 	stmdane	r0, {r0}
   104a4:	58000041 	stmdapl	r0, {r0, r6}
   104a8:	01000012 	tsteq	r0, r2, lsl r0
   104ac:	07c10140 	strbeq	r0, [r1, r0, asr #2]
   104b0:	58120000 	ldmdapl	r2, {}	; <UNPREDICTABLE>
   104b4:	16000012 			; <UNDEFINED> instruction: 0x16000012
   104b8:	00000205 	andeq	r0, r0, r5, lsl #4
   104bc:	00004793 	muleq	r0, r3, r7
   104c0:	f2220000 	vhadd.s32	d0, d2, d0
   104c4:	43000040 	movwmi	r0, #64	; 0x40
   104c8:	d6000003 	strle	r0, [r0], -r3
   104cc:	1a000007 	bne	104f0 <__exidx_end+0xabd8>
   104d0:	f3035001 	vhadd.u8	d5, d3, d1
   104d4:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
   104d8:	000040fe 	strdeq	r4, [r0], -lr
   104dc:	00000ad6 	ldrdeq	r0, [r0], -r6
   104e0:	000007ef 	andeq	r0, r0, pc, ror #15
   104e4:	0151011a 	cmpeq	r1, sl, lsl r1
   104e8:	50011a48 	andpl	r1, r1, r8, asr #20
   104ec:	00007402 	andeq	r7, r0, r2, lsl #8
   104f0:	00410223 	subeq	r0, r1, r3, lsr #4
   104f4:	0003bd00 	andeq	fp, r3, r0, lsl #26
   104f8:	41182400 	tstmi	r8, r0, lsl #8
   104fc:	76020000 	strvc	r0, [r2], -r0
   10500:	00081d00 	andeq	r1, r8, r0, lsl #26
   10504:	53011a00 	movwpl	r1, #6656	; 0x1a00
   10508:	011a3001 	tsteq	sl, r1
   1050c:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
   10510:	51011a03 	tstpl	r1, r3, lsl #20
   10514:	1a2c0802 	bne	b12524 <__ccfg+0xaf257c>
   10518:	74025001 	strvc	r5, [r2], #-1
   1051c:	28220000 	stmdacs	r2!, {}	; <UNPREDICTABLE>
   10520:	d6000041 	strle	r0, [r0], -r1, asr #32
   10524:	3600000a 	strcc	r0, [r0], -sl
   10528:	1a000008 	bne	10550 <__exidx_end+0xac38>
   1052c:	4c015101 	stfmis	f5, [r1], {1}
   10530:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10534:	23000074 	movwcs	r0, #116	; 0x74
   10538:	0000412c 	andeq	r4, r0, ip, lsr #2
   1053c:	00000404 	andeq	r0, r0, r4, lsl #8
   10540:	00413622 	subeq	r3, r1, r2, lsr #12
   10544:	000ad600 	andeq	sp, sl, r0, lsl #12
   10548:	00085800 	andeq	r5, r8, r0, lsl #16
   1054c:	51011a00 	tstpl	r1, r0, lsl #20
   10550:	011a4401 	tsteq	sl, r1, lsl #8
   10554:	00740250 	rsbseq	r0, r4, r0, asr r2
   10558:	413a2300 	teqmi	sl, r0, lsl #6
   1055c:	043e0000 	ldrteq	r0, [lr], #-0
   10560:	44220000 	strtmi	r0, [r2], #-0
   10564:	d6000041 	strle	r0, [r0], -r1, asr #32
   10568:	7a00000a 	bvc	10598 <__exidx_end+0xac80>
   1056c:	1a000008 	bne	10594 <__exidx_end+0xac7c>
   10570:	40015101 	andmi	r5, r1, r1, lsl #2
   10574:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10578:	22000074 	andcs	r0, r0, #116	; 0x74
   1057c:	0000414a 	andeq	r4, r0, sl, asr #2
   10580:	00000478 	andeq	r0, r0, r8, ror r4
   10584:	0000088e 	andeq	r0, r0, lr, lsl #17
   10588:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1058c:	22000075 	andcs	r0, r0, #117	; 0x75
   10590:	00004154 	andeq	r4, r0, r4, asr r1
   10594:	00000ad6 	ldrdeq	r0, [r0], -r6
   10598:	000008a7 	andeq	r0, r0, r7, lsr #17
   1059c:	0151011a 	cmpeq	r1, sl, lsl r1
   105a0:	50011a3c 	andpl	r1, r1, ip, lsr sl
   105a4:	00007402 	andeq	r7, r0, r2, lsl #8
   105a8:	00415a22 	subeq	r5, r1, r2, lsr #20
   105ac:	0000e700 	andeq	lr, r0, r0, lsl #14
   105b0:	0008bb00 	andeq	fp, r8, r0, lsl #22
   105b4:	50011a00 	andpl	r1, r1, r0, lsl #20
   105b8:	00007502 	andeq	r7, r0, r2, lsl #10
   105bc:	00416c22 	subeq	r6, r1, r2, lsr #24
   105c0:	00011000 	andeq	r1, r1, r0
   105c4:	0008cf00 	andeq	ip, r8, r0, lsl #30
   105c8:	50011a00 	andpl	r1, r1, r0, lsl #20
   105cc:	00007502 	andeq	r7, r0, r2, lsl #10
   105d0:	00417a22 	subeq	r7, r1, r2, lsr #20
   105d4:	00013900 	andeq	r3, r1, r0, lsl #18
   105d8:	0008e300 	andeq	lr, r8, r0, lsl #6
   105dc:	50011a00 	andpl	r1, r1, r0, lsl #20
   105e0:	00007502 	andeq	r7, r0, r2, lsl #10
   105e4:	00418422 	subeq	r8, r1, r2, lsr #8
   105e8:	000ad600 	andeq	sp, sl, r0, lsl #12
   105ec:	0008fd00 	andeq	pc, r8, r0, lsl #26
   105f0:	51011a00 	tstpl	r1, r0, lsl #20
   105f4:	1a280802 	bne	a12604 <__ccfg+0x9f265c>
   105f8:	74025001 	strvc	r5, [r2], #-1
   105fc:	8a220000 	bhi	890604 <__ccfg+0x87065c>
   10600:	be000041 	cdplt	0, 0, cr0, cr0, cr1, {2}
   10604:	11000000 	mrsne	r0, (UNDEF: 0)
   10608:	1a000009 	bne	10634 <__exidx_end+0xad1c>
   1060c:	75025001 	strvc	r5, [r2, #-1]
   10610:	9c220000 	stcls	0, cr0, [r2], #-0
   10614:	a3000041 	movwge	r0, #65	; 0x41
   10618:	25000001 	strcs	r0, [r0, #-1]
   1061c:	1a000009 	bne	10648 <__exidx_end+0xad30>
   10620:	75025001 	strvc	r5, [r2, #-1]
   10624:	ae220000 	cdpge	0, 2, cr0, cr2, cr0, {0}
   10628:	cc000041 	stcgt	0, cr0, [r0], {65}	; 0x41
   1062c:	39000001 	stmdbcc	r0, {r0}
   10630:	1a000009 	bne	1065c <__exidx_end+0xad44>
   10634:	75025001 	strvc	r5, [r2, #-1]
   10638:	c2220000 	eorgt	r0, r2, #0
   1063c:	6e000041 	cdpvs	0, 0, cr0, cr0, cr1, {2}
   10640:	4d000001 	stcmi	0, cr0, [r0, #-4]
   10644:	1a000009 	bne	10670 <__exidx_end+0xad58>
   10648:	75025001 	strvc	r5, [r2, #-1]
   1064c:	cc190000 	ldcgt	0, cr0, [r9], {-0}
   10650:	d6000041 	strle	r0, [r0], -r1, asr #32
   10654:	1a00000a 	bne	10684 <__exidx_end+0xad6c>
   10658:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
   1065c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10660:	00000074 	andeq	r0, r0, r4, ror r0
   10664:	00358f17 	eorseq	r8, r5, r7, lsl pc
   10668:	f8fd0200 			; <UNDEFINED> instruction: 0xf8fd0200
   1066c:	64000041 	strvs	r0, [r0], #-65	; 0xffffffbf
   10670:	01000000 	mrseq	r0, (UNDEF: 0)
   10674:	0009899c 	muleq	r9, ip, r9
   10678:	37461d00 	strbcc	r1, [r6, -r0, lsl #26]
   1067c:	eb010000 	bl	50684 <__ccfg+0x306dc>
   10680:	00008c03 	andeq	r8, r0, r3, lsl #24
   10684:	0047ac00 	subeq	sl, r7, r0, lsl #24
   10688:	bc0c0000 	stclt	0, cr0, [ip], {-0}
   1068c:	0200003a 	andeq	r0, r0, #58	; 0x3a
   10690:	425c0106 	subsmi	r0, ip, #-2147483647	; 0x80000001
   10694:	00280000 	eoreq	r0, r8, r0
   10698:	9c010000 	stcls	0, cr0, [r1], {-0}
   1069c:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
   106a0:	0039131c 	eorseq	r1, r9, ip, lsl r3
   106a4:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
   106a8:	0000008c 	andeq	r0, r0, ip, lsl #1
   106ac:	000047c7 	andeq	r4, r0, r7, asr #15
   106b0:	35421700 	strbcc	r1, [r2, #-1792]	; 0xfffff900
   106b4:	7a020000 	bvc	906bc <__ccfg+0x70714>
   106b8:	00004284 	andeq	r4, r0, r4, lsl #5
   106bc:	00000150 	andeq	r0, r0, r0, asr r1
   106c0:	0ad69c01 	beq	ff5b76cc <_estack+0xdf5b26cc>
   106c4:	291c0000 	ldmdbcs	ip, {}	; <UNPREDICTABLE>
   106c8:	01000036 	tsteq	r0, r6, lsr r0
   106cc:	008c019b 	umulleq	r0, ip, fp, r1
   106d0:	47e80000 	strbmi	r0, [r8, r0]!
   106d4:	5a1d0000 	bpl	7506dc <__ccfg+0x730734>
   106d8:	0100003a 	tsteq	r0, sl, lsr r0
   106dc:	008c019d 	umulleq	r0, ip, sp, r1
   106e0:	48430000 	stmdami	r3, {}^	; <UNPREDICTABLE>
   106e4:	7c1d0000 	ldcvc	0, cr0, [sp], {-0}
   106e8:	01000039 	tsteq	r0, r9, lsr r0
   106ec:	008c019e 	umulleq	r0, ip, lr, r1
   106f0:	48560000 	ldmdami	r6, {}^	; <UNPREDICTABLE>
   106f4:	c61d0000 	ldrgt	r0, [sp], -r0
   106f8:	01000036 	tsteq	r0, r6, lsr r0
   106fc:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
   10700:	48690000 	stmdami	r9!, {}^	; <UNPREDICTABLE>
   10704:	b91d0000 	ldmdblt	sp, {}	; <UNPREDICTABLE>
   10708:	01000036 	tsteq	r0, r6, lsr r0
   1070c:	008c01a0 	addeq	r0, ip, r0, lsr #3
   10710:	48870000 	stmmi	r7, {}	; <UNPREDICTABLE>
   10714:	12250000 	eorne	r0, r5, #0
   10718:	96000002 	strls	r0, [r0], -r2
   1071c:	3e000043 	cdpcc	0, 0, cr0, cr0, cr3, {2}
   10720:	01000000 	mrseq	r0, (UNDEF: 0)
   10724:	0e230216 	mcreq	2, 1, r0, cr3, cr6, {0}
   10728:	3c000043 	stccc	0, cr0, [r0], {67}	; 0x43
   1072c:	22000006 	andcs	r0, r0, #6
   10730:	00004330 	andeq	r4, r0, r0, lsr r3
   10734:	00000af2 	strdeq	r0, [r0], -r2
   10738:	00000a46 	andeq	r0, r0, r6, asr #20
   1073c:	0151011a 	cmpeq	r1, sl, lsl r1
   10740:	50011a31 	andpl	r1, r1, r1, lsr sl
   10744:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   10748:	00004336 	andeq	r4, r0, r6, lsr r3
   1074c:	00000989 	andeq	r0, r0, r9, lsl #19
   10750:	00000a5d 	andeq	r0, r0, sp, asr sl
   10754:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
   10758:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
   1075c:	3c230000 	stccc	0, cr0, [r3], #-0
   10760:	08000043 	stmdaeq	r0, {r0, r1, r6}
   10764:	2200000b 	andcs	r0, r0, #11
   10768:	00004346 	andeq	r4, r0, r6, asr #6
   1076c:	00000af2 	strdeq	r0, [r0], -r2
   10770:	00000a7f 	andeq	r0, r0, pc, ror sl
   10774:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
   10778:	011a0074 	tsteq	sl, r4, ror r0
   1077c:	00340150 	eorseq	r0, r4, r0, asr r1
   10780:	00434c22 	subeq	r4, r3, r2, lsr #24
   10784:	000b0800 	andeq	r0, fp, r0, lsl #16
   10788:	000a9200 	andeq	r9, sl, r0, lsl #4
   1078c:	50011a00 	andpl	r1, r1, r0, lsl #20
   10790:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   10794:	0000435c 	andeq	r4, r0, ip, asr r3
   10798:	00000989 	andeq	r0, r0, r9, lsl #19
   1079c:	00000aac 	andeq	r0, r0, ip, lsr #21
   107a0:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
   107a4:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
   107a8:	1a00ffff 	bne	507ac <__ccfg+0x30804>
   107ac:	436c2600 	cmnmi	ip, #0, 12
   107b0:	0acc0000 	beq	ff3107b8 <_estack+0xdf30b7b8>
   107b4:	011a0000 	tsteq	sl, r0
   107b8:	000c0552 	andeq	r0, ip, r2, asr r5
   107bc:	1a600060 	bne	1810944 <__ccfg+0x17f099c>
   107c0:	37015101 	strcc	r5, [r1, -r1, lsl #2]
   107c4:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
   107c8:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
   107cc:	43822300 	orrmi	r2, r2, #0, 6
   107d0:	0af20000 	beq	ffc907d8 <_estack+0xdfc8b7d8>
   107d4:	27000000 	strcs	r0, [r0, -r0]
   107d8:	0000388c 	andeq	r3, r0, ip, lsl #17
   107dc:	f201ca06 	vpmax.s8	d12, d1, d6
   107e0:	2800000a 	stmdacs	r0, {r1, r3}
   107e4:	0000008c 	andeq	r0, r0, ip, lsl #1
   107e8:	00008c28 	andeq	r8, r0, r8, lsr #24
   107ec:	008c2800 	addeq	r2, ip, r0, lsl #16
   107f0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
   107f4:	00002d1b 	andeq	r2, r0, fp, lsl sp
   107f8:	0b08f907 	bleq	24ec1c <__ccfg+0x22ec74>
   107fc:	8c280000 	stchi	0, cr0, [r8], #-0
   10800:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   10804:	0000008c 	andeq	r0, r0, ip, lsl #1
   10808:	2d542a00 	vldrcs	s5, [r4, #-0]
   1080c:	10070000 	andne	r0, r7, r0
   10810:	00008c01 	andeq	r8, r0, r1, lsl #24
   10814:	008c2800 	addeq	r2, ip, r0, lsl #16
   10818:	00000000 	andeq	r0, r0, r0
   1081c:	00000923 	andeq	r0, r0, r3, lsr #18
   10820:	3bc10004 	blcc	ff050838 <_estack+0xdf04b838>
   10824:	01040000 	mrseq	r0, (UNDEF: 4)
   10828:	00002a3d 	andeq	r2, r0, sp, lsr sl
   1082c:	003c0301 	eorseq	r0, ip, r1, lsl #6
   10830:	002b0400 	eoreq	r0, fp, r0, lsl #8
   10834:	00134800 	andseq	r4, r3, r0, lsl #16
   10838:	00000000 	andeq	r0, r0, r0
   1083c:	00861600 	addeq	r1, r6, r0, lsl #12
   10840:	2ba70200 	blcs	fe9d1048 <_estack+0xde9cc048>
   10844:	1b060000 	blne	19084c <__ccfg+0x1708a4>
   10848:	00000030 	andeq	r0, r0, r0, lsr r0
   1084c:	69060103 	stmdbvs	r6, {r0, r1, r8}
   10850:	0200000c 	andeq	r0, r0, #12
   10854:	00002a18 	andeq	r2, r0, r8, lsl sl
   10858:	00421d06 	subeq	r1, r2, r6, lsl #26
   1085c:	01030000 	mrseq	r0, (UNDEF: 3)
   10860:	000c6708 	andeq	r6, ip, r8, lsl #14
   10864:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   10868:	00000a77 	andeq	r0, r0, r7, ror sl
   1086c:	002e0e02 	eoreq	r0, lr, r2, lsl #28
   10870:	5b2b0600 	blpl	ad2078 <__ccfg+0xab20d0>
   10874:	03000000 	movweq	r0, #0
   10878:	0d640702 	stcleq	7, cr0, [r4, #-8]!
   1087c:	9d020000 	stcls	0, cr0, [r2, #-0]
   10880:	0600002b 	streq	r0, [r0], -fp, lsr #32
   10884:	00006d3f 	andeq	r6, r0, pc, lsr sp
   10888:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   1088c:	00000809 	andeq	r0, r0, r9, lsl #16
   10890:	0029b002 	eoreq	fp, r9, r2
   10894:	7f410600 	svcvc	0x00410600
   10898:	03000000 	movweq	r0, #0
   1089c:	04390704 	ldrteq	r0, [r9], #-1796	; 0xfffff8fc
   108a0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   108a4:	00080405 	andeq	r0, r8, r5, lsl #8
   108a8:	07080300 	streq	r0, [r8, -r0, lsl #6]
   108ac:	00000434 	andeq	r0, r0, r4, lsr r4
   108b0:	69050404 	stmdbvs	r5, {r2, sl}
   108b4:	0300746e 	movweq	r7, #1134	; 0x46e
   108b8:	043e0704 	ldrteq	r0, [lr], #-1796	; 0xfffff8fc
   108bc:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
   108c0:	0700002b 	streq	r0, [r0, -fp, lsr #32]
   108c4:	00002513 	andeq	r2, r0, r3, lsl r5
   108c8:	2a1a0200 	bcs	6910d0 <__ccfg+0x671128>
   108cc:	14070000 	strne	r0, [r7], #-0
   108d0:	00000037 	andeq	r0, r0, r7, lsr r0
   108d4:	002e1002 	eoreq	r1, lr, r2
   108d8:	501a0700 	andspl	r0, sl, r0, lsl #14
   108dc:	02000000 	andeq	r0, r0, #0
   108e0:	00002b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
   108e4:	00621f07 	rsbeq	r1, r2, r7, lsl #30
   108e8:	b2020000 	andlt	r0, r2, #0
   108ec:	07000029 	streq	r0, [r0, -r9, lsr #32]
   108f0:	00007420 	andeq	r7, r0, r0, lsr #8
   108f4:	29dc0200 	ldmibcs	ip, {r9}^
   108f8:	33080000 	movwcc	r0, #32768	; 0x8000
   108fc:	000000e4 	andeq	r0, r0, r4, ror #1
   10900:	00ea0405 	rsceq	r0, sl, r5, lsl #8
   10904:	05060000 	streq	r0, [r6, #-0]
   10908:	0000f104 	andeq	pc, r0, r4, lsl #2
   1090c:	00fc0700 	rscseq	r0, ip, r0, lsl #14
   10910:	ad080000 	stcge	0, cr0, [r8, #-0]
   10914:	00000000 	andeq	r0, r0, r0
   10918:	00311202 	eorseq	r1, r1, r2, lsl #4
   1091c:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
   10920:	05000001 	streq	r0, [r0, #-1]
   10924:	00010d04 	andeq	r0, r1, r4, lsl #26
   10928:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   1092c:	01260000 			; <UNDEFINED> instruction: 0x01260000
   10930:	26080000 	strcs	r0, [r8], -r0
   10934:	08000001 	stmdaeq	r0, {r0}
   10938:	000000ce 	andeq	r0, r0, lr, asr #1
   1093c:	0000ce08 	andeq	ip, r0, r8, lsl #28
   10940:	04050000 	streq	r0, [r5], #-0
   10944:	000000ad 	andeq	r0, r0, sp, lsr #1
   10948:	00327a02 	eorseq	r7, r2, r2, lsl #20
   1094c:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
   10950:	05000001 	streq	r0, [r0, #-1]
   10954:	00013d04 	andeq	r3, r1, r4, lsl #26
   10958:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
   1095c:	c3020000 	movwgt	r0, #8192	; 0x2000
   10960:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10964:	00013748 	andeq	r3, r1, r8, asr #14
   10968:	2faa0200 	svccs	0x00aa0200
   1096c:	4a090000 	bmi	250974 <__ccfg+0x2309cc>
   10970:	00000158 	andeq	r0, r0, r8, asr r1
   10974:	015e0405 	cmpeq	lr, r5, lsl #8
   10978:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   1097c:	6d000000 	stcvs	0, cr0, [r0, #-0]
   10980:	08000001 	stmdaeq	r0, {r0}
   10984:	000000ce 	andeq	r0, r0, lr, asr #1
   10988:	2eb90200 	cdpcs	2, 11, cr0, cr9, cr0, {0}
   1098c:	4c090000 	stcmi	0, cr0, [r9], {-0}
   10990:	00000137 	andeq	r0, r0, r7, lsr r1
   10994:	002e1902 	eoreq	r1, lr, r2, lsl #18
   10998:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
   1099c:	02000001 	andeq	r0, r0, #1
   109a0:	00002ea9 	andeq	r2, r0, r9, lsr #29
   109a4:	00e45109 	rsceq	r5, r4, r9, lsl #2
   109a8:	33020000 	movwcc	r0, #8192	; 0x2000
   109ac:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   109b0:	00019953 	andeq	r9, r1, r3, asr r9
   109b4:	9f040500 	svcls	0x00040500
   109b8:	09000001 	stmdbeq	r0, {r0}
   109bc:	000000ce 	andeq	r0, r0, lr, asr #1
   109c0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   109c4:	0001b808 	andeq	fp, r1, r8, lsl #16
   109c8:	00b80800 	adcseq	r0, r8, r0, lsl #16
   109cc:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   109d0:	00000000 	andeq	r0, r0, r0
   109d4:	00b80405 	adcseq	r0, r8, r5, lsl #8
   109d8:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
   109dc:	09000031 	stmdbeq	r0, {r0, r4, r5}
   109e0:	0001c957 	andeq	ip, r1, r7, asr r9
   109e4:	cf040500 	svcgt	0x00040500
   109e8:	09000001 	stmdbeq	r0, {r0}
   109ec:	000000ce 	andeq	r0, r0, lr, asr #1
   109f0:	000001e3 	andeq	r0, r0, r3, ror #3
   109f4:	0001e308 	andeq	lr, r1, r8, lsl #6
   109f8:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   109fc:	05000000 	streq	r0, [r0, #-0]
   10a00:	0000ce04 	andeq	ip, r0, r4, lsl #28
   10a04:	2f1c0200 	svccs	0x001c0200
   10a08:	5a090000 	bpl	250a10 <__ccfg+0x230a68>
   10a0c:	000001c9 	andeq	r0, r0, r9, asr #3
   10a10:	002fd602 	eoreq	sp, pc, r2, lsl #12
   10a14:	c95d0900 	ldmdbgt	sp, {r8, fp}^
   10a18:	02000001 	andeq	r0, r0, #1
   10a1c:	00002d45 	andeq	r2, r0, r5, asr #26
   10a20:	01c96009 	biceq	r6, r9, r9
   10a24:	36020000 	strcc	r0, [r2], -r0
   10a28:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a2c:	0000e463 	andeq	lr, r0, r3, ror #8
   10a30:	2d830200 	sfmcs	f0, 4, [r3]
   10a34:	65090000 	strvs	r0, [r9, #-0]
   10a38:	00000220 	andeq	r0, r0, r0, lsr #4
   10a3c:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
   10a40:	31070000 	mrscc	r0, (UNDEF: 7)
   10a44:	08000002 	stmdaeq	r0, {r1}
   10a48:	000000ce 	andeq	r0, r0, lr, asr #1
   10a4c:	32d40200 	sbcscc	r0, r4, #0, 4
   10a50:	67090000 	strvs	r0, [r9, -r0]
   10a54:	00000220 	andeq	r0, r0, r0, lsr #4
   10a58:	00301802 	eorseq	r1, r0, r2, lsl #16
   10a5c:	eb690900 	bl	1a52e64 <__ccfg+0x1a32ebc>
   10a60:	02000000 	andeq	r0, r0, #0
   10a64:	000032b3 			; <UNDEFINED> instruction: 0x000032b3
   10a68:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
   10a6c:	e5020000 	str	r0, [r2, #-0]
   10a70:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a74:	0000eb6d 	andeq	lr, r0, sp, ror #22
   10a78:	2ff70200 	svccs	0x00f70200
   10a7c:	6f090000 	svcvs	0x00090000
   10a80:	000000eb 	andeq	r0, r0, fp, ror #1
   10a84:	7a094c0b 	bvc	263ab8 <__ccfg+0x243b10>
   10a88:	00000355 	andeq	r0, r0, r5, asr r3
   10a8c:	002fbb0c 	eoreq	fp, pc, ip, lsl #22
   10a90:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
   10a94:	00000000 	andeq	r0, r0, r0
   10a98:	0032a60c 	eorseq	sl, r2, ip, lsl #12
   10a9c:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
   10aa0:	04000001 	streq	r0, [r0], #-1
   10aa4:	002fcc0c 	eoreq	ip, pc, ip, lsl #24
   10aa8:	427e0900 	rsbsmi	r0, lr, #0, 18
   10aac:	08000001 	stmdaeq	r0, {r0}
   10ab0:	0031c50c 	eorseq	ip, r1, ip, lsl #10
   10ab4:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
   10ab8:	0c000001 	stceq	0, cr0, [r0], {1}
   10abc:	0031d70c 	eorseq	sp, r1, ip, lsl #14
   10ac0:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
   10ac4:	10000001 	andne	r0, r0, r1
   10ac8:	002eca0c 	eoreq	ip, lr, ip, lsl #20
   10acc:	78810900 	stmvc	r1, {r8, fp}
   10ad0:	14000001 	strne	r0, [r0], #-1
   10ad4:	002e860c 	eoreq	r8, lr, ip, lsl #12
   10ad8:	83820900 	orrhi	r0, r2, #0, 18
   10adc:	18000001 	stmdane	r0, {r0}
   10ae0:	002fc10c 	eoreq	ip, pc, ip, lsl #2
   10ae4:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
   10ae8:	1c000001 	stcne	0, cr0, [r0], {1}
   10aec:	0031500c 	eorseq	r5, r1, ip
   10af0:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
   10af4:	20000001 	andcs	r0, r0, r1
   10af8:	002f480c 	eoreq	r4, pc, ip, lsl #16
   10afc:	e9850900 	stmib	r5, {r8, fp}
   10b00:	24000001 	strcs	r0, [r0], #-1
   10b04:	002fa00c 	eoreq	sl, pc, ip
   10b08:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
   10b0c:	28000001 	stmdacs	r0, {r0}
   10b10:	0032050c 	eorseq	r0, r2, ip, lsl #10
   10b14:	ff870900 			; <UNDEFINED> instruction: 0xff870900
   10b18:	2c000001 	stccs	0, cr0, [r0], {1}
   10b1c:	002ee50c 	eoreq	lr, lr, ip, lsl #10
   10b20:	15880900 	strne	r0, [r8, #2304]	; 0x900
   10b24:	30000002 	andcc	r0, r0, r2
   10b28:	0031f30c 	eorseq	pc, r1, ip, lsl #6
   10b2c:	31890900 	orrcc	r0, r9, r0, lsl #18
   10b30:	34000002 	strcc	r0, [r0], #-2
   10b34:	002dc40c 	eoreq	ip, sp, ip, lsl #8
   10b38:	0a8a0900 	beq	fe292f40 <_estack+0xde28df40>
   10b3c:	38000002 	stmdacc	r0, {r1}
   10b40:	0030070c 	eorseq	r0, r0, ip, lsl #14
   10b44:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
   10b48:	3c000002 	stccc	0, cr0, [r0], {2}
   10b4c:	0031a60c 	eorseq	sl, r1, ip, lsl #12
   10b50:	478c0900 	strmi	r0, [ip, r0, lsl #18]
   10b54:	40000002 	andmi	r0, r0, r2
   10b58:	002f2a0c 	eoreq	r2, pc, ip, lsl #20
   10b5c:	528d0900 	addpl	r0, sp, #0, 18
   10b60:	44000002 	strmi	r0, [r0], #-2
   10b64:	002d740c 	eoreq	r7, sp, ip, lsl #8
   10b68:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
   10b6c:	48000002 	stmdami	r0, {r1}
   10b70:	30d60200 	sbcscc	r0, r6, r0, lsl #4
   10b74:	8f090000 	svchi	0x00090000
   10b78:	00000268 	andeq	r0, r0, r8, ror #4
   10b7c:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
   10b80:	00000399 	muleq	r0, r9, r3
   10b84:	003d320c 	eorseq	r3, sp, ip, lsl #4
   10b88:	ce4f0100 	dvfgte	f0, f7, f0
   10b8c:	00000000 	andeq	r0, r0, r0
   10b90:	003d630c 	eorseq	r6, sp, ip, lsl #6
   10b94:	b8500100 	ldmdalt	r0, {r8}^
   10b98:	04000000 	streq	r0, [r0], #-0
   10b9c:	003c9d0c 	eorseq	r9, ip, ip, lsl #26
   10ba0:	ad510100 	ldfgee	f0, [r1, #-0]
   10ba4:	06000000 	streq	r0, [r0], -r0
   10ba8:	003c500c 	eorseq	r5, ip, ip
   10bac:	a2520100 	subsge	r0, r2, #0, 2
   10bb0:	07000000 	streq	r0, [r0, -r0]
   10bb4:	3d8f0200 	sfmcc	f0, 4, [pc]	; 10bbc <__exidx_end+0xb2a4>
   10bb8:	53010000 	movwpl	r0, #4096	; 0x1000
   10bbc:	00000360 	andeq	r0, r0, r0, ror #6
   10bc0:	000fbc0d 	andeq	fp, pc, sp, lsl #24
   10bc4:	01dc0200 	bicseq	r0, ip, r0, lsl #4
   10bc8:	0003be03 	andeq	fp, r3, r3, lsl #28
   10bcc:	0f760e00 	svceq	0x00760e00
   10bd0:	dc020000 	stcle	0, cr0, [r2], {-0}
   10bd4:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10bd8:	d10f0000 	mrsle	r0, CPSR
   10bdc:	0200000f 	andeq	r0, r0, #15
   10be0:	00ce022c 	sbceq	r0, lr, ip, lsr #4
   10be4:	10030000 	andne	r0, r3, r0
   10be8:	000010d5 	ldrdeq	r1, [r0], -r5
   10bec:	03022a04 	movweq	r2, #10756	; 0x2a04
   10bf0:	00398511 	eorseq	r8, r9, r1, lsl r5
   10bf4:	c3e90500 	mvngt	r0, #0, 10
   10bf8:	03000000 	movweq	r0, #0
   10bfc:	000003fb 	strdeq	r0, [r0], -fp
   10c00:	0036d512 	eorseq	sp, r6, r2, lsl r5
   10c04:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
   10c08:	13000000 	movwne	r0, #0
   10c0c:	000039de 	ldrdeq	r3, [r0], -lr
   10c10:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
   10c14:	0d000000 	stceq	0, cr0, [r0, #-0]
   10c18:	00003c65 	andeq	r3, r0, r5, ror #24
   10c1c:	03025c04 	movweq	r5, #11268	; 0x2c04
   10c20:	00000415 	andeq	r0, r0, r5, lsl r4
   10c24:	003c3f0e 	eorseq	r3, ip, lr, lsl #30
   10c28:	025c0400 	subseq	r0, ip, #0, 8
   10c2c:	000000ce 	andeq	r0, r0, lr, asr #1
   10c30:	31001000 	mrscc	r1, (UNDEF: 0)
   10c34:	40030000 	andmi	r0, r3, r0
   10c38:	e90f0301 	stmdb	pc, {r0, r8, r9}	; <UNPREDICTABLE>
   10c3c:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
   10c40:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
   10c44:	03030000 	movweq	r0, #12288	; 0x3000
   10c48:	0cb30201 	lfmeq	f0, 4, [r3], #4
   10c4c:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
   10c50:	0a00003d 	beq	10d4c <__exidx_end+0xb434>
   10c54:	0000009e 	muleq	r0, lr, r0
   10c58:	0000f400 	andeq	pc, r0, r0, lsl #8
   10c5c:	cd9c0100 	ldfgts	f0, [ip]
   10c60:	15000005 	strne	r0, [r0, #-5]
   10c64:	00003c95 	muleq	r0, r5, ip
   10c68:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
   10c6c:	489a0000 	ldmmi	sl, {}	; <UNPREDICTABLE>
   10c70:	57160000 	ldrpl	r0, [r6, -r0]
   10c74:	0100003c 	tsteq	r0, ip, lsr r0
   10c78:	0000ce7c 	andeq	ip, r0, ip, ror lr
   10c7c:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
   10c80:	000003a4 	andeq	r0, r0, r4, lsr #7
   10c84:	00000000 	andeq	r0, r0, r0
   10c88:	00001318 	andeq	r1, r0, r8, lsl r3
   10c8c:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
   10c90:	b1180000 	tstlt	r8, r0
   10c94:	01000003 	tsteq	r0, r3
   10c98:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
   10c9c:	00000000 	andeq	r0, r0, r0
   10ca0:	00040000 	andeq	r0, r4, r0
   10ca4:	82010000 	andhi	r0, r1, #0
   10ca8:	0004151a 	andeq	r1, r4, sl, lsl r5
   10cac:	00000000 	andeq	r0, r0, r0
   10cb0:	00000800 	andeq	r0, r0, r0, lsl #16
   10cb4:	a9a10100 	stmibge	r1!, {r8}
   10cb8:	1b000004 	blne	10cd0 <__exidx_end+0xb3b8>
   10cbc:	00000000 	andeq	r0, r0, r0
   10cc0:	000008de 	ldrdeq	r0, [r0], -lr
   10cc4:	03cb1900 	biceq	r1, fp, #0, 18
   10cc8:	00000000 	andeq	r0, r0, r0
   10ccc:	00060000 	andeq	r0, r6, r0
   10cd0:	b1010000 	mrslt	r0, (UNDEF: 1)
   10cd4:	00041e19 	andeq	r1, r4, r9, lsl lr
   10cd8:	00000000 	andeq	r0, r0, r0
   10cdc:	00000400 	andeq	r0, r0, r0, lsl #8
   10ce0:	1ab20100 	bne	fec910e8 <_estack+0xdec8c0e8>
   10ce4:	000003fb 	strdeq	r0, [r0], -fp
   10ce8:	00000000 	andeq	r0, r0, r0
   10cec:	0000000a 	andeq	r0, r0, sl
   10cf0:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
   10cf4:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
   10cf8:	11000004 	tstne	r0, r4
   10cfc:	03cb1900 	biceq	r1, fp, #0, 18
   10d00:	00000000 	andeq	r0, r0, r0
   10d04:	00040000 	andeq	r0, r4, r0
   10d08:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10d0c:	00041e19 	andeq	r1, r4, r9, lsl lr
   10d10:	00000000 	andeq	r0, r0, r0
   10d14:	00000200 	andeq	r0, r0, r0, lsl #4
   10d18:	19ba0100 	ldmibne	sl!, {r8}
   10d1c:	000003cb 	andeq	r0, r0, fp, asr #7
   10d20:	00000000 	andeq	r0, r0, r0
   10d24:	00000006 	andeq	r0, r0, r6
   10d28:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
   10d2c:	00000004 	andeq	r0, r0, r4
   10d30:	02000000 	andeq	r0, r0, #0
   10d34:	01000000 	mrseq	r0, (UNDEF: 0)
   10d38:	00001cd0 	ldrdeq	r1, [r0], -r0
   10d3c:	052e0000 	streq	r0, [lr, #-0]!
   10d40:	011d0000 	tsteq	sp, r0
   10d44:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
   10d48:	001c0007 	andseq	r0, ip, r7
   10d4c:	3f000000 	svccc	0x00000000
   10d50:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10d54:	0a035001 	beq	e4d60 <__ccfg+0xc4db8>
   10d58:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
   10d5c:	00000000 	andeq	r0, r0, r0
   10d60:	000008ef 	andeq	r0, r0, pc, ror #17
   10d64:	00000557 	andeq	r0, r0, r7, asr r5
   10d68:	0151011d 	cmpeq	r1, sp, lsl r1
   10d6c:	50011d31 	andpl	r1, r1, r1, lsr sp
   10d70:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
   10d74:	00000000 	andeq	r0, r0, r0
   10d78:	000008ef 	andeq	r0, r0, pc, ror #17
   10d7c:	0000056f 	andeq	r0, r0, pc, ror #10
   10d80:	0151011d 	cmpeq	r1, sp, lsl r1
   10d84:	50011d33 	andpl	r1, r1, r3, lsr sp
   10d88:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
   10d8c:	00000000 	andeq	r0, r0, r0
   10d90:	00000905 	andeq	r0, r0, r5, lsl #18
   10d94:	00000582 	andeq	r0, r0, r2, lsl #11
   10d98:	0150011d 	cmpeq	r0, sp, lsl r1
   10d9c:	001c0031 	andseq	r0, ip, r1, lsr r0
   10da0:	91000000 	mrsls	r0, (UNDEF: 0)
   10da4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10da8:	37015001 	strcc	r5, [r1, -r1]
   10dac:	00001c00 	andeq	r1, r0, r0, lsl #24
   10db0:	05a00000 	streq	r0, [r0, #0]!
   10db4:	011d0000 	tsteq	sp, r0
   10db8:	00370150 	eorseq	r0, r7, r0, asr r1
   10dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
   10dc0:	0005b000 	andeq	fp, r5, r0
   10dc4:	50011d00 	andpl	r1, r1, r0, lsl #26
   10dc8:	00007602 	andeq	r7, r0, r2, lsl #12
   10dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
   10dd0:	0005c000 	andeq	ip, r5, r0
   10dd4:	50011d00 	andpl	r1, r1, r0, lsl #26
   10dd8:	00007602 	andeq	r7, r0, r2, lsl #12
   10ddc:	0000001f 	andeq	r0, r0, pc, lsl r0
   10de0:	50011d00 	andpl	r1, r1, r0, lsl #26
   10de4:	00007602 	andeq	r7, r0, r2, lsl #12
   10de8:	3bdb2000 	blcc	ff6d8df0 <_estack+0xdf6d3df0>
   10dec:	010a0000 	mrseq	r0, (UNDEF: 10)
   10df0:	0043d401 	subeq	sp, r3, r1, lsl #8
   10df4:	00022000 	andeq	r2, r2, r0
   10df8:	c89c0100 	ldmgt	ip, {r8}
   10dfc:	21000007 	tstcs	r0, r7
   10e00:	00003cdb 	ldrdeq	r3, [r0], -fp
   10e04:	00ceda01 	sbceq	sp, lr, r1, lsl #20
   10e08:	48c50000 	stmiami	r5, {}^	; <UNPREDICTABLE>
   10e0c:	7f150000 	svcvc	0x00150000
   10e10:	0100003b 	tsteq	r0, fp, lsr r0
   10e14:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   10e18:	0048f100 	subeq	pc, r8, r0, lsl #2
   10e1c:	3cf51500 	cfldr64cc	mvdx1, [r5]
   10e20:	dd010000 	stcle	0, cr0, [r1, #-0]
   10e24:	000000c3 	andeq	r0, r0, r3, asr #1
   10e28:	0000490f 	andeq	r4, r0, pc, lsl #18
   10e2c:	003cbb15 	eorseq	fp, ip, r5, lsl fp
   10e30:	c3de0100 	bicsgt	r0, lr, #0, 2
   10e34:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
   10e38:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10e3c:	00003d81 	andeq	r3, r0, r1, lsl #27
   10e40:	00c3df01 	sbceq	sp, r3, r1, lsl #30
   10e44:	49870000 	stmibmi	r7, {}	; <UNPREDICTABLE>
   10e48:	71150000 	tstvc	r5, r0
   10e4c:	0100003b 	tsteq	r0, fp, lsr r0
   10e50:	0000c3e0 	andeq	ip, r0, r0, ror #7
   10e54:	0049a500 	subeq	sl, r9, r0, lsl #10
   10e58:	3b872200 	blcc	fe1d9660 <_estack+0xde1d4660>
   10e5c:	e1010000 	mrs	r0, (UNDEF: 1)
   10e60:	000000c3 	andeq	r0, r0, r3, asr #1
   10e64:	29155301 	ldmdbcs	r5, {r0, r8, r9, ip, lr}
   10e68:	01000036 	tsteq	r0, r6, lsr r0
   10e6c:	0000cee2 	andeq	ip, r0, r2, ror #29
   10e70:	0049b800 	subeq	fp, r9, r0, lsl #16
   10e74:	3d191500 	cfldr32cc	mvfx1, [r9, #-0]
   10e78:	e3010000 	movw	r0, #4096	; 0x1000
   10e7c:	000000ce 	andeq	r0, r0, lr, asr #1
   10e80:	000049cb 	andeq	r4, r0, fp, asr #19
   10e84:	003b9b15 	eorseq	r9, fp, r5, lsl fp
   10e88:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
   10e8c:	ea000000 	b	10e94 <__exidx_end+0xb57c>
   10e90:	23000049 	movwcs	r0, #73	; 0x49
   10e94:	01006964 	tsteq	r0, r4, ror #18
   10e98:	0000cee5 	andeq	ip, r0, r5, ror #29
   10e9c:	0049fd00 	subeq	pc, r9, r0, lsl #26
   10ea0:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   10ea4:	e6010069 	str	r0, [r1], -r9, rrx
   10ea8:	000000ce 	andeq	r0, r0, lr, asr #1
   10eac:	00004a33 	andeq	r4, r0, r3, lsr sl
   10eb0:	00697423 	rsbeq	r7, r9, r3, lsr #8
   10eb4:	00cee701 	sbceq	lr, lr, r1, lsl #14
   10eb8:	4a690000 	bmi	1a50ec0 <__ccfg+0x1a30f18>
   10ebc:	63230000 			; <UNDEFINED> instruction: 0x63230000
   10ec0:	e8010064 	stmda	r1, {r2, r5, r6}
   10ec4:	000000ce 	andeq	r0, r0, lr, asr #1
   10ec8:	00004ad9 	ldrdeq	r4, [r0], -r9
   10ecc:	006c6323 	rsbeq	r6, ip, r3, lsr #6
   10ed0:	00cee901 	sbceq	lr, lr, r1, lsl #18
   10ed4:	4aec0000 	bmi	ffb10edc <_estack+0xdfb0bedc>
   10ed8:	ac150000 	ldcge	0, cr0, [r5], {-0}
   10edc:	0100003b 	tsteq	r0, fp, lsr r0
   10ee0:	0000ceea 	andeq	ip, r0, sl, ror #29
   10ee4:	004aff00 	subeq	pc, sl, r0, lsl #30
   10ee8:	006b2400 	rsbeq	r2, fp, r0, lsl #8
   10eec:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
   10ef0:	8d130000 	ldchi	0, cr0, [r3, #-0]
   10ef4:	0100003c 	tsteq	r0, ip, lsr r0
   10ef8:	0000ceec 	andeq	ip, r0, ip, ror #29
   10efc:	3c7b1500 	cfldr64cc	mvdx1, [fp], #-0
   10f00:	ed010000 	stc	0, cr0, [r1, #-0]
   10f04:	000000ce 	andeq	r0, r0, lr, asr #1
   10f08:	00004b1d 	andeq	r4, r0, sp, lsl fp
   10f0c:	003c4b15 	eorseq	r4, ip, r5, lsl fp
   10f10:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
   10f14:	46000000 	strmi	r0, [r0], -r0
   10f18:	1500004b 	strne	r0, [r0, #-75]	; 0xffffffb5
   10f1c:	00003c76 	andeq	r3, r0, r6, ror ip
   10f20:	00ceef01 	sbceq	lr, lr, r1, lsl #30
   10f24:	4b650000 	blmi	1950f2c <__ccfg+0x1930f84>
   10f28:	56150000 	ldrpl	r0, [r5], -r0
   10f2c:	0100003d 	tsteq	r0, sp, lsr r0
   10f30:	0007c8f0 	strdeq	ip, [r7], -r0
   10f34:	004ba900 	subeq	sl, fp, r0, lsl #18
   10f38:	44022500 	strmi	r2, [r2], #-1280	; 0xfffffb00
   10f3c:	00120000 	andseq	r0, r2, r0
   10f40:	073b0000 	ldreq	r0, [fp, -r0]!
   10f44:	01260000 			; <UNDEFINED> instruction: 0x01260000
   10f48:	0100003d 	tsteq	r0, sp, lsr r0
   10f4c:	00c3010a 	sbceq	r0, r3, sl, lsl #2
   10f50:	4bc10000 	blmi	ff050f58 <_estack+0xdf04bf58>
   10f54:	27000000 	strcs	r0, [r0, -r0]
   10f58:	000003d4 	ldrdeq	r0, [r0], -r4
   10f5c:	00004428 	andeq	r4, r0, r8, lsr #8
   10f60:	00000006 	andeq	r0, r0, r6
   10f64:	68011101 	stmdavs	r1, {r0, r8, ip}
   10f68:	28000007 	stmdacs	r0, {r0, r1, r2}
   10f6c:	000003e4 	andeq	r0, r0, r4, ror #7
   10f70:	00442829 	subeq	r2, r4, r9, lsr #16
   10f74:	00000600 	andeq	r0, r0, r0, lsl #12
   10f78:	03ef2a00 	mvneq	r2, #0, 20
   10f7c:	4bd40000 	blmi	ff510f84 <_estack+0xdf50bf84>
   10f80:	00000000 	andeq	r0, r0, r0
   10f84:	0003d427 	andeq	sp, r3, r7, lsr #8
   10f88:	00444000 	subeq	r4, r4, r0
   10f8c:	00000600 	andeq	r0, r0, r0, lsl #12
   10f90:	011b0100 	tsteq	fp, r0, lsl #2
   10f94:	00000795 	muleq	r0, r5, r7
   10f98:	0003e428 	andeq	lr, r3, r8, lsr #8
   10f9c:	44402900 	strbmi	r2, [r0], #-2304	; 0xfffff700
   10fa0:	00060000 	andeq	r0, r6, r0
   10fa4:	ef2a0000 	svc	0x002a0000
   10fa8:	e7000003 	str	r0, [r0, -r3]
   10fac:	0000004b 	andeq	r0, r0, fp, asr #32
   10fb0:	03d42b00 	bicseq	r2, r4, #0, 22
   10fb4:	444a0000 	strbmi	r0, [sl], #-0
   10fb8:	13300000 	teqne	r0, #0
   10fbc:	1f010000 	svcne	0x00010000
   10fc0:	0007be01 	andeq	fp, r7, r1, lsl #28
   10fc4:	03e42800 	mvneq	r2, #0, 16
   10fc8:	302c0000 	eorcc	r0, ip, r0
   10fcc:	2a000013 	bcs	11020 <__exidx_end+0xb708>
   10fd0:	000003ef 	andeq	r0, r0, pc, ror #7
   10fd4:	00004bfa 	strdeq	r4, [r0], -sl
   10fd8:	f41b0000 			; <UNDEFINED> instruction: 0xf41b0000
   10fdc:	1b000043 	blne	110f0 <__exidx_end+0xb7d8>
   10fe0:	00000009 	andeq	r0, r0, r9
   10fe4:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
   10fe8:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
   10fec:	20000000 	andcs	r0, r0, r0
   10ff0:	00003bb1 			; <UNDEFINED> instruction: 0x00003bb1
   10ff4:	f401170a 	vst1.8	{d1}, [r1], sl
   10ff8:	60000045 	andvs	r0, r0, r5, asr #32
   10ffc:	01000000 	mrseq	r0, (UNDEF: 0)
   11000:	0008339c 	muleq	r8, ip, r3
   11004:	3b7f2600 	blcc	1fda80c <__ccfg+0x1fba864>
   11008:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   1100c:	0000c301 	andeq	ip, r0, r1, lsl #6
   11010:	004c0d00 	subeq	r0, ip, r0, lsl #26
   11014:	3ca52600 	stccc	6, cr2, [r5]
   11018:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   1101c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11020:	004c3800 	subeq	r3, ip, r0, lsl #16
   11024:	2f3e2600 	svccs	0x003e2600
   11028:	ba010000 	blt	51030 <__ccfg+0x31088>
   1102c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11030:	004c4b00 	subeq	r4, ip, r0, lsl #22
   11034:	3c7b2600 	ldclcc	6, cr2, [fp], #-0
   11038:	bb010000 	bllt	51040 <__ccfg+0x31098>
   1103c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11040:	004c7200 	subeq	r7, ip, r0, lsl #4
   11044:	46021b00 	strmi	r1, [r2], -r0, lsl #22
   11048:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   1104c:	20000000 	andcs	r0, r0, r0
   11050:	00003da2 	andeq	r3, r0, r2, lsr #27
   11054:	0001290a 	andeq	r2, r1, sl, lsl #18
   11058:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   1105c:	01000000 	mrseq	r0, (UNDEF: 0)
   11060:	00088a9c 	muleq	r8, ip, sl
   11064:	3cce2600 	stclcc	6, cr2, [lr], {0}
   11068:	e7010000 	str	r0, [r1, -r0]
   1106c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11070:	004c9b00 	subeq	r9, ip, r0, lsl #22
   11074:	3d742600 	ldclcc	6, cr2, [r4, #-0]
   11078:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
   1107c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11080:	004cae00 	subeq	sl, ip, r0, lsl #28
   11084:	36292600 	strtcc	r2, [r9], -r0, lsl #12
   11088:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
   1108c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11090:	004cc100 	subeq	ip, ip, r0, lsl #2
   11094:	3d222600 	stccc	6, cr2, [r2, #-0]
   11098:	ea010000 	b	510a0 <__ccfg+0x310f8>
   1109c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   110a0:	004cd400 	subeq	sp, ip, r0, lsl #8
   110a4:	232e0000 			; <UNDEFINED> instruction: 0x232e0000
   110a8:	0a00003c 	beq	111a0 <__exidx_end+0xb888>
   110ac:	00ce0142 	sbceq	r0, lr, r2, asr #2
   110b0:	46540000 	ldrbmi	r0, [r4], -r0
   110b4:	00180000 	andseq	r0, r8, r0
   110b8:	9c010000 	stcls	0, cr0, [r1], {-0}
   110bc:	003dcf22 	eorseq	ip, sp, r2, lsr #30
   110c0:	99550100 	ldmdbls	r5, {r8}^
   110c4:	05000003 	streq	r0, [r0, #-3]
   110c8:	00065403 	andeq	r5, r6, r3, lsl #8
   110cc:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
   110d0:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
   110d4:	c1300000 	teqgt	r0, r0
   110d8:	0c000008 	stceq	0, cr0, [r0], {8}
   110dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
   110e0:	00002cb1 			; <UNDEFINED> instruction: 0x00002cb1
   110e4:	003d0922 	eorseq	r0, sp, r2, lsr #18
   110e8:	d9610100 	stmdble	r1!, {r8}^
   110ec:	05000008 	streq	r0, [r0, #-8]
   110f0:	00000003 	andeq	r0, r0, r3
   110f4:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
   110f8:	0b310000 	bleq	c51100 <__ccfg+0xc31158>
   110fc:	0900002a 	stmdbeq	r0, {r1, r3, r5}
   11100:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
   11104:	00d90800 	sbcseq	r0, r9, r0, lsl #16
   11108:	31000000 	mrscc	r0, (UNDEF: 0)
   1110c:	00002d1b 	andeq	r2, r0, fp, lsl sp
   11110:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
   11114:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   11118:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1111c:	000000ce 	andeq	r0, r0, lr, asr #1
   11120:	2d543200 	lfmcs	f3, 2, [r4, #-0]
   11124:	10030000 	andne	r0, r3, r0
   11128:	0000ce01 	andeq	ip, r0, r1, lsl #28
   1112c:	00091b00 	andeq	r1, r9, r0, lsl #22
   11130:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   11134:	33000000 	movwcc	r0, #0
   11138:	00002b6e 	andeq	r2, r0, lr, ror #22
   1113c:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
   11140:	cc000000 	stcgt	0, cr0, [r0], {-0}
   11144:	04000003 	streq	r0, [r0], #-3
   11148:	003e7b00 	eorseq	r7, lr, r0, lsl #22
   1114c:	3d010400 	cfstrscc	mvf0, [r1, #-0]
   11150:	0100002a 	tsteq	r0, sl, lsr #32
   11154:	000040b6 	strheq	r4, [r0], -r6
   11158:	00002b04 	andeq	r2, r0, r4, lsl #22
   1115c:	000013a8 	andeq	r1, r0, r8, lsr #7
   11160:	00000000 	andeq	r0, r0, r0
   11164:	0000897f 	andeq	r8, r0, pc, ror r9
   11168:	69060102 	stmdbvs	r6, {r1, r8}
   1116c:	0200000c 	andeq	r0, r0, #12
   11170:	0c670801 	stcleq	8, cr0, [r7], #-4
   11174:	02020000 	andeq	r0, r2, #0
   11178:	000a7705 	andeq	r7, sl, r5, lsl #14
   1117c:	07020200 	streq	r0, [r2, -r0, lsl #4]
   11180:	00000d64 	andeq	r0, r0, r4, ror #26
   11184:	09050402 	stmdbeq	r5, {r1, sl}
   11188:	03000008 	movweq	r0, #8
   1118c:	000029b0 			; <UNDEFINED> instruction: 0x000029b0
   11190:	00534103 	subseq	r4, r3, r3, lsl #2
   11194:	04020000 	streq	r0, [r2], #-0
   11198:	00043907 	andeq	r3, r4, r7, lsl #18
   1119c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   111a0:	00000804 	andeq	r0, r0, r4, lsl #16
   111a4:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
   111a8:	04000004 	streq	r0, [r0], #-4
   111ac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   111b0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   111b4:	00043e07 	andeq	r3, r4, r7, lsl #28
   111b8:	29b20300 	ldmibcs	r2!, {r8, r9}
   111bc:	20040000 	andcs	r0, r4, r0
   111c0:	00000048 	andeq	r0, r0, r8, asr #32
   111c4:	63020105 	movwvs	r0, #8453	; 0x2105
   111c8:	000000a2 	andeq	r0, r0, r2, lsr #1
   111cc:	003ff006 	eorseq	pc, pc, r6
   111d0:	30060000 	andcc	r0, r6, r0
   111d4:	02000040 	andeq	r0, r0, #64	; 0x40
   111d8:	003fa006 	eorseq	sl, pc, r6
   111dc:	e0060400 	and	r0, r6, r0, lsl #8
   111e0:	0800003d 	stmdaeq	r0, {r0, r2, r3, r4, r5}
   111e4:	3f8c0300 	svccc	0x008c0300
   111e8:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
   111ec:	00000081 	andeq	r0, r0, r1, lsl #1
   111f0:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
   111f4:	000000da 	ldrdeq	r0, [r0], -sl
   111f8:	0040a606 	subeq	sl, r0, r6, lsl #12
   111fc:	f8067f00 			; <UNDEFINED> instruction: 0xf8067f00
   11200:	0000003d 	andeq	r0, r0, sp, lsr r0
   11204:	00415706 	subeq	r5, r1, r6, lsl #14
   11208:	e4060100 	str	r0, [r6], #-256	; 0xffffff00
   1120c:	0200003f 	andeq	r0, r0, #63	; 0x3f
   11210:	00414906 	subeq	r4, r1, r6, lsl #18
   11214:	dd060300 	stcle	3, cr0, [r6, #-0]
   11218:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   1121c:	41630300 	cmnmi	r3, r0, lsl #6
   11220:	ac020000 	stcge	0, cr0, [r2], {-0}
   11224:	000000ad 	andeq	r0, r0, sp, lsr #1
   11228:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
   1122c:	00012501 	andeq	r2, r1, r1, lsl #10
   11230:	3fba0600 	svccc	0x00ba0600
   11234:	067f0000 	ldrbteq	r0, [pc], -r0
   11238:	00003ea8 	andeq	r3, r0, r8, lsr #29
   1123c:	3f040600 	svccc	0x00040600
   11240:	06010000 	streq	r0, [r1], -r0
   11244:	00003f40 	andeq	r3, r0, r0, asr #30
   11248:	408b0602 	addmi	r0, fp, r2, lsl #12
   1124c:	06030000 	streq	r0, [r3], -r0
   11250:	00003e04 	andeq	r3, r0, r4, lsl #28
   11254:	3ecc0604 	cdpcc	6, 12, cr0, cr12, cr4, {0}
   11258:	06050000 	streq	r0, [r5], -r0
   1125c:	00004065 	andeq	r4, r0, r5, rrx
   11260:	40780606 	rsbsmi	r0, r8, r6, lsl #12
   11264:	00070000 	andeq	r0, r7, r0
   11268:	003e9008 	eorseq	r9, lr, r8
   1126c:	01470200 	mrseq	r0, (UNDEF: 103)
   11270:	000000e5 	andeq	r0, r0, r5, ror #1
   11274:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
   11278:	00015f01 	andeq	r5, r1, r1, lsl #30
   1127c:	3f310600 	svccc	0x00310600
   11280:	067f0000 	ldrbteq	r0, [pc], -r0
   11284:	00003f5a 	andeq	r3, r0, sl, asr pc
   11288:	3fd60600 	svccc	0x00d60600
   1128c:	06010000 	streq	r0, [r1], -r0
   11290:	00003e1d 	andeq	r3, r0, sp, lsl lr
   11294:	40400602 	submi	r0, r0, r2, lsl #12
   11298:	06030000 	streq	r0, [r3], -r0
   1129c:	00003ef3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   112a0:	b9080004 	stmdblt	r8, {r2}
   112a4:	0200003e 	andeq	r0, r0, #62	; 0x3e
   112a8:	01310160 	teqeq	r1, r0, ror #2
   112ac:	01070000 	mrseq	r0, (UNDEF: 7)
   112b0:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
   112b4:	06000001 	streq	r0, [r0], -r1
   112b8:	00003f70 	andeq	r3, r0, r0, ror pc
   112bc:	409c067f 	addsmi	r0, ip, pc, ror r6
   112c0:	060a0000 	streq	r0, [sl], -r0
   112c4:	00004001 	andeq	r4, r0, r1
   112c8:	40260614 	eormi	r0, r6, r4, lsl r6
   112cc:	06150000 	ldreq	r0, [r5], -r0
   112d0:	00003fcc 	andeq	r3, r0, ip, asr #31
   112d4:	40520616 	subsmi	r0, r2, r6, lsl r6
   112d8:	00170000 	andseq	r0, r7, r0
   112dc:	003e9b08 	eorseq	r9, lr, r8, lsl #22
   112e0:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
   112e4:	0000016b 	andeq	r0, r0, fp, ror #2
   112e8:	0040e209 	subeq	lr, r0, r9, lsl #4
   112ec:	01070200 	mrseq	r0, (UNDEF: 39)
   112f0:	00000076 	andeq	r0, r0, r6, ror r0
   112f4:	3e2f0a03 	vmulcc.f32	s0, s30, s6
   112f8:	6a020000 	bvs	91300 <__ccfg+0x71358>
   112fc:	00015f01 	andeq	r5, r1, r1, lsl #30
   11300:	01da0100 	bicseq	r0, sl, r0, lsl #2
   11304:	680b0000 	stmdavs	fp, {}	; <UNPREDICTABLE>
   11308:	0100003f 	tsteq	r0, pc, lsr r0
   1130c:	00015f68 	andeq	r5, r1, r8, ror #30
   11310:	3e150b00 	vnmlscc.f64	d0, d5, d0
   11314:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
   11318:	00000076 	andeq	r0, r0, r6, ror r0
   1131c:	41900900 	orrsmi	r0, r0, r0, lsl #18
   11320:	32020000 	andcc	r0, r2, #0
   11324:	00007601 	andeq	r7, r0, r1, lsl #12
   11328:	220c0300 	andcs	r0, ip, #0, 6
   1132c:	02000041 	andeq	r0, r0, #65	; 0x41
   11330:	0000a272 	andeq	sl, r0, r2, ror r2
   11334:	00000000 	andeq	r0, r0, r0
   11338:	00001000 	andeq	r1, r0, r0
   1133c:	0d9c0100 	ldfeqs	f0, [ip]
   11340:	00003e4c 	andeq	r3, r0, ip, asr #28
   11344:	00dab602 	sbcseq	fp, sl, r2, lsl #12
   11348:	00000000 	andeq	r0, r0, r0
   1134c:	00180000 	andseq	r0, r8, r0
   11350:	9c010000 	stcls	0, cr0, [r1], {-0}
   11354:	00000225 	andeq	r0, r0, r5, lsr #4
   11358:	003e870e 	eorseq	r8, lr, lr, lsl #14
   1135c:	da520100 	ble	1491764 <__ccfg+0x14717bc>
   11360:	e7000000 	str	r0, [r0, -r0]
   11364:	0000004c 	andeq	r0, r0, ip, asr #32
   11368:	0001b20f 	andeq	fp, r1, pc, lsl #4
   1136c:	00466c00 	subeq	r6, r6, r0, lsl #24
   11370:	00004c00 	andeq	r4, r0, r0, lsl #24
   11374:	6e9c0100 	fmlvse	f0, f4, f0
   11378:	10000002 	andne	r0, r0, r2
   1137c:	000001c3 	andeq	r0, r0, r3, asr #3
   11380:	00004d0f 	andeq	r4, r0, pc, lsl #26
   11384:	0001ce10 	andeq	ip, r1, r0, lsl lr
   11388:	004d2f00 	subeq	r2, sp, r0, lsl #30
   1138c:	467c1100 	ldrbtmi	r1, [ip], -r0, lsl #2
   11390:	000e0000 	andeq	r0, lr, r0
   11394:	c3120000 	tstgt	r2, #0
   11398:	12000001 	andne	r0, r0, #1
   1139c:	000001ce 	andeq	r0, r0, lr, asr #3
   113a0:	0001a513 	andeq	sl, r1, r3, lsl r5
   113a4:	00467c00 	subeq	r7, r6, r0, lsl #24
   113a8:	00000400 	andeq	r0, r0, r0, lsl #8
   113ac:	00700100 	rsbseq	r0, r0, r0, lsl #2
   113b0:	400b1400 	andmi	r1, fp, r0, lsl #8
   113b4:	51020000 	mrspl	r0, (UNDEF: 2)
   113b8:	00012501 	andeq	r2, r1, r1, lsl #10
   113bc:	00000000 	andeq	r0, r0, r0
   113c0:	00003000 	andeq	r3, r0, r0
   113c4:	ca9c0100 	bgt	fe7117cc <_estack+0xde70c7cc>
   113c8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   113cc:	0000405c 	andeq	r4, r0, ip, asr r0
   113d0:	01258501 			; <UNDEFINED> instruction: 0x01258501
   113d4:	4d630000 	stclmi	0, cr0, [r3, #-0]
   113d8:	d60b0000 	strle	r0, [fp], -r0
   113dc:	01000040 	tsteq	r0, r0, asr #32
   113e0:	00007686 	andeq	r7, r0, r6, lsl #13
   113e4:	3f7e0e00 	svccc	0x007e0e00
   113e8:	87010000 	strhi	r0, [r1, -r0]
   113ec:	00000076 	andeq	r0, r0, r6, ror r0
   113f0:	00004d83 	andeq	r4, r0, r3, lsl #27
   113f4:	0001da13 	andeq	sp, r1, r3, lsl sl
   113f8:	00000000 	andeq	r0, r0, r0
   113fc:	00000400 	andeq	r0, r0, r0, lsl #8
   11400:	15860100 	strne	r0, [r6, #256]	; 0x100
   11404:	00000000 	andeq	r0, r0, r0
   11408:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   1140c:	41001600 	tstmi	r0, r0, lsl #12
   11410:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
   11414:	00007601 	andeq	r7, r0, r1, lsl #12
   11418:	02e80300 	rsceq	r0, r8, #0, 6
   1141c:	ea170000 	b	5d1424 <__ccfg+0x5b147c>
   11420:	0200003e 	andeq	r0, r0, #62	; 0x3e
   11424:	0076011b 	rsbseq	r0, r6, fp, lsl r1
   11428:	14000000 	strne	r0, [r0], #-0
   1142c:	00003e6a 	andeq	r3, r0, sl, ror #28
   11430:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
   11434:	b8000001 	stmdalt	r0, {r0}
   11438:	6c000046 	stcvs	0, cr0, [r0], {70}	; 0x46
   1143c:	01000000 	mrseq	r0, (UNDEF: 0)
   11440:	0003659c 	muleq	r3, ip, r5
   11444:	3ec60e00 	cdpcc	14, 12, cr0, cr6, cr0, {0}
   11448:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
   1144c:	00000199 	muleq	r0, r9, r1
   11450:	00004d96 	muleq	r0, r6, sp
   11454:	003f510b 	eorseq	r5, pc, fp, lsl #2
   11458:	76a90100 	strtvc	r0, [r9], r0, lsl #2
   1145c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11460:	00004117 	andeq	r4, r0, r7, lsl r1
   11464:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
   11468:	54010000 	strpl	r0, [r1], #-0
   1146c:	0001a519 	andeq	sl, r1, r9, lsl r5
   11470:	0046ba00 	subeq	fp, r6, r0, lsl #20
   11474:	00137800 	andseq	r7, r3, r0, lsl #16
   11478:	1aa90100 	bne	fea51880 <_estack+0xdea4c880>
   1147c:	000002ca 	andeq	r0, r0, sl, asr #5
   11480:	000046be 			; <UNDEFINED> instruction: 0x000046be
   11484:	00001390 	muleq	r0, r0, r3
   11488:	035baa01 	cmpeq	fp, #4096	; 0x1000
   1148c:	901b0000 	andsls	r0, fp, r0
   11490:	10000013 	andne	r0, r0, r3, lsl r0
   11494:	000002db 	ldrdeq	r0, [r0], -fp
   11498:	00004df3 	strdeq	r4, [r0], -r3
   1149c:	d2150000 	andsle	r0, r5, #0
   114a0:	b2000046 	andlt	r0, r0, #70	; 0x46
   114a4:	00000001 	andeq	r0, r0, r1
   114a8:	003f1509 	eorseq	r1, pc, r9, lsl #10
   114ac:	01830200 	orreq	r0, r3, r0, lsl #4
   114b0:	00000372 	andeq	r0, r0, r2, ror r3
   114b4:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
   114b8:	00000cb3 			; <UNDEFINED> instruction: 0x00000cb3
   114bc:	00417109 	subeq	r7, r1, r9, lsl #2
   114c0:	01f00200 	mvnseq	r0, r0, lsl #4
   114c4:	00000372 	andeq	r0, r0, r2, ror r3
   114c8:	36721c03 	ldrbtcc	r1, [r2], -r3, lsl #24
   114cc:	43020000 	movwmi	r0, #8192	; 0x2000
   114d0:	00472402 	subeq	r2, r7, r2, lsl #8
   114d4:	00001600 	andeq	r1, r0, r0, lsl #12
   114d8:	1d9c0100 	ldfnes	f0, [ip]
   114dc:	00000365 	andeq	r0, r0, r5, ror #6
   114e0:	00004726 	andeq	r4, r0, r6, lsr #14
   114e4:	00000004 	andeq	r0, r0, r4
   114e8:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
   114ec:	2a150000 	bcs	5514f4 <__ccfg+0x53154c>
   114f0:	b2000047 	andlt	r0, r0, #71	; 0x47
   114f4:	00000001 	andeq	r0, r0, r1
   114f8:	0003791e 	andeq	r7, r3, lr, lsl r9
   114fc:	00472e00 	subeq	r2, r7, r0, lsl #28
   11500:	00000400 	andeq	r0, r0, r0, lsl #8
   11504:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
   11508:	00004732 	andeq	r4, r0, r2, lsr r7
   1150c:	000002e8 	andeq	r0, r0, r8, ror #5
   11510:	a7000000 	strge	r0, [r0, -r0]
   11514:	04000005 	streq	r0, [r0], #-5
   11518:	00404900 	subeq	r4, r0, r0, lsl #18
   1151c:	3d010400 	cfstrscc	mvf0, [r1, #-0]
   11520:	0100002a 	tsteq	r0, sl, lsr #32
   11524:	00004268 	andeq	r4, r0, r8, ror #4
   11528:	00002b04 	andeq	r2, r0, r4, lsl #22
   1152c:	000013e0 	andeq	r1, r0, r0, ror #7
   11530:	00000000 	andeq	r0, r0, r0
   11534:	00008bae 	andeq	r8, r0, lr, lsr #23
   11538:	69060102 	stmdbvs	r6, {r1, r8}
   1153c:	0300000c 	movweq	r0, #12
   11540:	00002a18 	andeq	r2, r0, r8, lsl sl
   11544:	00371d03 	eorseq	r1, r7, r3, lsl #26
   11548:	01020000 	mrseq	r0, (UNDEF: 2)
   1154c:	000c6708 	andeq	r6, ip, r8, lsl #14
   11550:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   11554:	00000a77 	andeq	r0, r0, r7, ror sl
   11558:	002e0e03 	eoreq	r0, lr, r3, lsl #28
   1155c:	502b0300 	eorpl	r0, fp, r0, lsl #6
   11560:	02000000 	andeq	r0, r0, #0
   11564:	0d640702 	stcleq	7, cr0, [r4, #-8]!
   11568:	04020000 	streq	r0, [r2], #-0
   1156c:	00080905 	andeq	r0, r8, r5, lsl #18
   11570:	29b00300 	ldmibcs	r0!, {r8, r9}
   11574:	41030000 	mrsmi	r0, (UNDEF: 3)
   11578:	00000069 	andeq	r0, r0, r9, rrx
   1157c:	39070402 	stmdbcc	r7, {r1, sl}
   11580:	02000004 	andeq	r0, r0, #4
   11584:	08040508 	stmdaeq	r4, {r3, r8, sl}
   11588:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   1158c:	00043407 	andeq	r3, r4, r7, lsl #8
   11590:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11594:	00746e69 	rsbseq	r6, r4, r9, ror #28
   11598:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
   1159c:	03000004 	movweq	r0, #4
   115a0:	00002a1a 	andeq	r2, r0, sl, lsl sl
   115a4:	002c1404 	eoreq	r1, ip, r4, lsl #8
   115a8:	10030000 	andne	r0, r3, r0
   115ac:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
   115b0:	0000451a 	andeq	r4, r0, sl, lsl r5
   115b4:	29b20300 	ldmibcs	r2!, {r8, r9}
   115b8:	20040000 	andcs	r0, r4, r0
   115bc:	0000005e 	andeq	r0, r0, lr, asr r0
   115c0:	0041e105 	subeq	lr, r1, r5, lsl #2
   115c4:	03890100 	orreq	r0, r9, #0, 2
   115c8:	000000e6 	andeq	r0, r0, r6, ror #1
   115cc:	0041c306 	subeq	ip, r1, r6, lsl #6
   115d0:	a2890100 	addge	r0, r9, #0, 2
   115d4:	06000000 	streq	r0, [r0], -r0
   115d8:	00004234 	andeq	r4, r0, r4, lsr r2
   115dc:	00a28901 	adceq	r8, r2, r1, lsl #18
   115e0:	8f060000 	svchi	0x00060000
   115e4:	01000042 	tsteq	r0, r2, asr #32
   115e8:	0000a289 	andeq	sl, r0, r9, lsl #5
   115ec:	29bb0700 	ldmibcs	fp!, {r8, r9, sl}
   115f0:	8c010000 	stchi	0, cr0, [r1], {-0}
   115f4:	000000e6 	andeq	r0, r0, r6, ror #1
   115f8:	02010200 	andeq	r0, r1, #0, 4
   115fc:	00000cb3 			; <UNDEFINED> instruction: 0x00000cb3
   11600:	00424208 	subeq	r4, r2, r8, lsl #4
   11604:	a2a90100 	adcge	r0, r9, #0, 2
   11608:	03000000 	movweq	r0, #0
   1160c:	0000012a 	andeq	r0, r0, sl, lsr #2
   11610:	0041c306 	subeq	ip, r1, r6, lsl #6
   11614:	a2a90100 	adcge	r0, r9, #0, 2
   11618:	06000000 	streq	r0, [r0], -r0
   1161c:	0000428f 	andeq	r4, r0, pc, lsl #5
   11620:	00a2a901 	adceq	sl, r2, r1, lsl #18
   11624:	dc070000 	stcle	0, cr0, [r7], {-0}
   11628:	01000041 	tsteq	r0, r1, asr #32
   1162c:	0000a2ab 	andeq	sl, r0, fp, lsr #5
   11630:	29bb0700 	ldmibcs	fp!, {r8, r9, sl}
   11634:	ad010000 	stcge	0, cr0, [r1, #-0]
   11638:	000000e6 	andeq	r0, r0, r6, ror #1
   1163c:	00ad0900 	adceq	r0, sp, r0, lsl #18
   11640:	473c0000 	ldrmi	r0, [ip, -r0]!
   11644:	00280000 	eoreq	r0, r8, r0
   11648:	9c010000 	stcls	0, cr0, [r1], {-0}
   1164c:	00000171 	andeq	r0, r0, r1, ror r1
   11650:	0000b90a 	andeq	fp, r0, sl, lsl #18
   11654:	004e0600 	subeq	r0, lr, r0, lsl #12
   11658:	00c40a00 	sbceq	r0, r4, r0, lsl #20
   1165c:	4e4b0000 	cdpmi	0, 4, cr0, cr11, cr0, {0}
   11660:	da0b0000 	ble	2d1668 <__ccfg+0x2b16c0>
   11664:	90000000 	andls	r0, r0, r0
   11668:	0c00004e 	stceq	0, cr0, [r0], {78}	; 0x4e
   1166c:	000000cf 	andeq	r0, r0, pc, asr #1
   11670:	47460d04 	strbmi	r0, [r6, -r4, lsl #26]
   11674:	05940000 	ldreq	r0, [r4]
   11678:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
   1167c:	9f000047 	svcls	0x00000047
   11680:	00000005 	andeq	r0, r0, r5
   11684:	00388c0f 	eorseq	r8, r8, pc, lsl #24
   11688:	01ca0100 	biceq	r0, sl, r0, lsl #2
   1168c:	00004764 	andeq	r4, r0, r4, ror #14
   11690:	00000008 	andeq	r0, r0, r8
   11694:	01d19c01 	bicseq	r9, r1, r1, lsl #24
   11698:	b8100000 	ldmdalt	r0, {}	; <UNPREDICTABLE>
   1169c:	02000011 	andeq	r0, r0, #17
   116a0:	0000a242 	andeq	sl, r0, r2, asr #4
   116a4:	004eb600 	subeq	fp, lr, r0, lsl #12
   116a8:	41a31000 			; <UNDEFINED> instruction: 0x41a31000
   116ac:	42020000 	andmi	r0, r2, #0
   116b0:	000000a2 	andeq	r0, r0, r2, lsr #1
   116b4:	00004ed7 	ldrdeq	r4, [r0], -r7
   116b8:	00423a10 	subeq	r3, r2, r0, lsl sl
   116bc:	a2430200 	subge	r0, r3, #0, 4
   116c0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
   116c4:	1100004e 	tstne	r0, lr, asr #32
   116c8:	0000476c 	andeq	r4, r0, ip, ror #14
   116cc:	0000012a 	andeq	r0, r0, sl, lsr #2
   116d0:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
   116d4:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
   116d8:	f3075001 	vhadd.u8	d5, d7, d1
   116dc:	01f35001 	mvnseq	r5, r1
   116e0:	00002251 	andeq	r2, r0, r1, asr r2
   116e4:	0042540f 	subeq	r5, r2, pc, lsl #8
   116e8:	01df0100 	bicseq	r0, pc, r0, lsl #2
   116ec:	00000000 	andeq	r0, r0, r0
   116f0:	00000022 	andeq	r0, r0, r2, lsr #32
   116f4:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
   116f8:	b8100000 	ldmdalt	r0, {}	; <UNPREDICTABLE>
   116fc:	02000011 	andeq	r0, r0, #17
   11700:	0000a257 	andeq	sl, r0, r7, asr r2
   11704:	004f1900 	subeq	r1, pc, r0, lsl #18
   11708:	41a31000 			; <UNDEFINED> instruction: 0x41a31000
   1170c:	57020000 	strpl	r0, [r2, -r0]
   11710:	000000a2 	andeq	r0, r0, r2, lsr #1
   11714:	00004f3a 	andeq	r4, r0, sl, lsr pc
   11718:	00224110 	eoreq	r4, r2, r0, lsl r1
   1171c:	a2580200 	subsge	r0, r8, #0, 4
   11720:	5b000000 	blpl	11728 <__exidx_end+0xbe10>
   11724:	1000004f 	andne	r0, r0, pc, asr #32
   11728:	000041fd 	strdeq	r4, [r0], -sp
   1172c:	00a25802 	adceq	r5, r2, r2, lsl #16
   11730:	4fa60000 	svcmi	0x00a60000
   11734:	83130000 	tsthi	r3, #0
   11738:	02000042 	andeq	r0, r0, #66	; 0x42
   1173c:	0000a25a 	andeq	sl, r0, sl, asr r2
   11740:	004fc700 	subeq	ip, pc, r0, lsl #14
   11744:	42081300 	andmi	r1, r8, #0, 6
   11748:	5b020000 	blpl	91750 <__ccfg+0x717a8>
   1174c:	000000a2 	andeq	r0, r0, r2, lsr #1
   11750:	0000505b 	andeq	r5, r0, fp, asr r0
   11754:	00000011 	andeq	r0, r0, r1, lsl r0
   11758:	00012a00 	andeq	r2, r1, r0, lsl #20
   1175c:	51011200 	mrspl	r1, R9_usr
   11760:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
   11764:	01f32540 	mvnseq	r2, r0, asr #10
   11768:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
   1176c:	2e302540 	cfneg32cs	mvfx2, mvfx0
   11770:	16000128 	strne	r0, [r0], -r8, lsr #2
   11774:	30244013 	eorcc	r4, r4, r3, lsl r0
   11778:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   1177c:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   11780:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11784:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   11788:	13160001 	tstne	r6, #1
   1178c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11790:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
   11794:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   11798:	f3131600 	vmax.u16	d1, d3, d0
   1179c:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
   117a0:	16000128 	strne	r0, [r0], -r8, lsr #2
   117a4:	01122113 	tsteq	r2, r3, lsl r1
   117a8:	01f35150 	mvnseq	r5, r0, asr r1
   117ac:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   117b0:	23225001 			; <UNDEFINED> instruction: 0x23225001
   117b4:	01f30480 	mvnseq	r0, r0, lsl #9
   117b8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   117bc:	f3225001 	vhadd.u32	d5, d2, d1
   117c0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   117c4:	01282930 			; <UNDEFINED> instruction: 0x01282930
   117c8:	23131600 	tstcs	r3, #0, 12
   117cc:	01f30484 	mvnseq	r0, r4, lsl #9
   117d0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   117d4:	23225001 			; <UNDEFINED> instruction: 0x23225001
   117d8:	01f30480 	mvnseq	r0, r0, lsl #9
   117dc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   117e0:	f3225001 	vhadd.u32	d5, d2, d1
   117e4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   117e8:	01282930 			; <UNDEFINED> instruction: 0x01282930
   117ec:	f3131600 	vmax.u16	d1, d3, d0
   117f0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   117f4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   117f8:	00131600 	andseq	r1, r3, r0, lsl #12
   117fc:	421b0f00 	andsmi	r0, fp, #0, 30
   11800:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
   11804:	00000001 	andeq	r0, r0, r1
   11808:	00002e00 	andeq	r2, r0, r0, lsl #28
   1180c:	1f9c0100 	svcne	0x009c0100
   11810:	10000004 	andne	r0, r0, r4
   11814:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
   11818:	00a28302 	adceq	r8, r2, r2, lsl #6
   1181c:	50a70000 	adcpl	r0, r7, r0
   11820:	a3100000 	tstge	r0, #0
   11824:	02000041 	andeq	r0, r0, #65	; 0x41
   11828:	0000a283 	andeq	sl, r0, r3, lsl #5
   1182c:	0050c800 	subseq	ip, r0, r0, lsl #16
   11830:	22411000 	subcs	r1, r1, #0
   11834:	84020000 	strhi	r0, [r2], #-0
   11838:	000000a2 	andeq	r0, r0, r2, lsr #1
   1183c:	000050e9 	andeq	r5, r0, r9, ror #1
   11840:	00421110 	subeq	r1, r2, r0, lsl r1
   11844:	a2840200 	addge	r0, r4, #0, 4
   11848:	3a000000 	bcc	11850 <__exidx_end+0xbf38>
   1184c:	10000051 	andne	r0, r0, r1, asr r0
   11850:	00004208 	andeq	r4, r0, r8, lsl #4
   11854:	00978502 	addseq	r8, r7, r2, lsl #10
   11858:	518b0000 	orrpl	r0, fp, r0
   1185c:	83130000 	tsthi	r3, #0
   11860:	02000042 	andeq	r0, r0, #66	; 0x42
   11864:	0000a287 	andeq	sl, r0, r7, lsl #5
   11868:	0051ab00 	subseq	sl, r1, r0, lsl #22
   1186c:	41fd1300 	mvnsmi	r1, r0, lsl #6
   11870:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   11874:	000000a2 	andeq	r0, r0, r2, lsr #1
   11878:	00005251 	andeq	r5, r0, r1, asr r2
   1187c:	00000011 	andeq	r0, r0, r1, lsl r0
   11880:	00012a00 	andeq	r2, r1, r0, lsl #20
   11884:	51011200 	mrspl	r1, R9_usr
   11888:	5201f340 	andpl	pc, r1, #64, 6
   1188c:	01f32540 	mvnseq	r2, r0, asr #10
   11890:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
   11894:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   11898:	00000f0c 	andeq	r0, r0, ip, lsl #30
   1189c:	01282b80 	smlawbeq	r8, r0, fp, r2
   118a0:	40131600 	andsmi	r1, r3, r0, lsl #12
   118a4:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
   118a8:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
   118ac:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
   118b0:	01f31c40 	mvnseq	r1, r0, asr #24
   118b4:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
   118b8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   118bc:	00000f0c 	andeq	r0, r0, ip, lsl #30
   118c0:	01282b80 	smlawbeq	r8, r0, fp, r2
   118c4:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
   118c8:	50011221 	andpl	r1, r1, r1, lsr #4
   118cc:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
   118d0:	01f32431 	mvnseq	r2, r1, lsr r4
   118d4:	80232250 	eorhi	r2, r3, r0, asr r2
   118d8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   118dc:	01f32431 	mvnseq	r2, r1, lsr r4
   118e0:	01f32250 	mvnseq	r2, r0, asr r2
   118e4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   118e8:	000f0c22 	andeq	r0, pc, r2, lsr #24
   118ec:	282c8000 	stmdacs	ip!, {pc}
   118f0:	13160001 	tstne	r6, #1
   118f4:	f3048423 	vshl.u8	d8, d19, d4
   118f8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   118fc:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11900:	f3048023 	vhadd.u8	d8, d4, d19
   11904:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   11908:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   1190c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11910:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   11914:	8000000f 	andhi	r0, r0, pc
   11918:	0001282c 	andeq	r2, r1, ip, lsr #16
   1191c:	01f31316 	mvnseq	r1, r6, lsl r3
   11920:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   11924:	000f0c22 	andeq	r0, pc, r2, lsr #24
   11928:	282b8000 	stmdacs	fp!, {pc}
   1192c:	13160001 	tstne	r6, #1
   11930:	c9140000 	ldmdbgt	r4, {}	; <UNPREDICTABLE>
   11934:	01000041 	tsteq	r0, r1, asr #32
   11938:	00970208 	addseq	r0, r7, r8, lsl #4
   1193c:	00000000 	andeq	r0, r0, r0
   11940:	00340000 	eorseq	r0, r4, r0
   11944:	9c010000 	stcls	0, cr0, [r1], {-0}
   11948:	000004d2 	ldrdeq	r0, [r0], -r2
   1194c:	0011b810 	andseq	fp, r1, r0, lsl r8
   11950:	a2af0200 	adcge	r0, pc, #0, 4
   11954:	b1000000 	mrslt	r0, (UNDEF: 0)
   11958:	10000052 	andne	r0, r0, r2, asr r0
   1195c:	000041a3 	andeq	r4, r0, r3, lsr #3
   11960:	00a2af02 	adceq	sl, r2, r2, lsl #30
   11964:	52d20000 	sbcspl	r0, r2, #0
   11968:	41100000 	tstmi	r0, r0
   1196c:	02000022 	andeq	r0, r0, #34	; 0x22
   11970:	0000a2af 	andeq	sl, r0, pc, lsr #5
   11974:	0052f300 	subseq	pc, r2, r0, lsl #6
   11978:	42831300 	addmi	r1, r3, #0, 6
   1197c:	b1020000 	mrslt	r0, (UNDEF: 2)
   11980:	000000a2 	andeq	r0, r0, r2, lsr #1
   11984:	00005330 	andeq	r5, r0, r0, lsr r3
   11988:	0041f413 	subeq	pc, r1, r3, lsl r4	; <UNPREDICTABLE>
   1198c:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
   11990:	6a000000 	bvs	11998 <__exidx_end+0xc080>
   11994:	15000053 	strne	r0, [r0, #-83]	; 0xffffffad
   11998:	000000ed 	andeq	r0, r0, sp, ror #1
   1199c:	00000000 	andeq	r0, r0, r0
   119a0:	0000001a 	andeq	r0, r0, sl, lsl r0
   119a4:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
   119a8:	02000001 	andeq	r0, r0, #1
   119ac:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   119b0:	00538200 	subseq	r8, r3, r0, lsl #4
   119b4:	00001600 	andeq	r1, r0, r0, lsl #12
   119b8:	001a0000 	andseq	r0, sl, r0
   119bc:	130b0000 	movwne	r0, #45056	; 0xb000
   119c0:	bc000001 	stclt	0, cr0, [r0], {1}
   119c4:	0b000053 	bleq	11b18 <__exidx_end+0xc200>
   119c8:	0000011e 	andeq	r0, r0, lr, lsl r1
   119cc:	000053d5 	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   119d0:	0000000d 	andeq	r0, r0, sp
   119d4:	00059400 	andeq	r9, r5, r0, lsl #8
   119d8:	00000d00 	andeq	r0, r0, r0, lsl #26
   119dc:	059f0000 	ldreq	r0, [pc]	; 119e4 <__exidx_end+0xc0cc>
   119e0:	00000000 	andeq	r0, r0, r0
   119e4:	41ab1400 			; <UNDEFINED> instruction: 0x41ab1400
   119e8:	1d010000 	stcne	0, cr0, [r1, #-0]
   119ec:	00009702 	andeq	r9, r0, r2, lsl #14
   119f0:	00000000 	andeq	r0, r0, r0
   119f4:	00004000 	andeq	r4, r0, r0
   119f8:	949c0100 	ldrls	r0, [ip], #256	; 0x100
   119fc:	10000005 	andne	r0, r0, r5
   11a00:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
   11a04:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   11a08:	53ec0000 	mvnpl	r0, #0
   11a0c:	a3100000 	tstge	r0, #0
   11a10:	02000041 	andeq	r0, r0, #65	; 0x41
   11a14:	0000a2dd 	ldrdeq	sl, [r0], -sp
   11a18:	00540d00 	subseq	r0, r4, r0, lsl #26
   11a1c:	22411000 	subcs	r1, r1, #0
   11a20:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   11a24:	000000a2 	andeq	r0, r0, r2, lsr #1
   11a28:	0000542e 	andeq	r5, r0, lr, lsr #8
   11a2c:	00421110 	subeq	r1, r2, r0, lsl r1
   11a30:	a2de0200 	sbcsge	r0, lr, #0, 4
   11a34:	71000000 	mrsvc	r0, (UNDEF: 0)
   11a38:	13000054 	movwne	r0, #84	; 0x54
   11a3c:	00004283 	andeq	r4, r0, r3, lsl #5
   11a40:	00a2e002 	adceq	lr, r2, r2
   11a44:	54b40000 	ldrtpl	r0, [r4], #0
   11a48:	f4130000 			; <UNDEFINED> instruction: 0xf4130000
   11a4c:	02000041 	andeq	r0, r0, #65	; 0x41
   11a50:	000097e1 	andeq	r9, r0, r1, ror #15
   11a54:	00550f00 	subseq	r0, r5, r0, lsl #30
   11a58:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   11a5c:	00000000 	andeq	r0, r0, r0
   11a60:	001a0000 	andseq	r0, sl, r0
   11a64:	fa020000 	blx	91a6c <__ccfg+0x71ac4>
   11a68:	0001080c 	andeq	r0, r1, ip, lsl #16
   11a6c:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   11a70:	32000000 	andcc	r0, r0, #0
   11a74:	16000055 			; <UNDEFINED> instruction: 0x16000055
   11a78:	00000000 	andeq	r0, r0, r0
   11a7c:	0000001a 	andeq	r0, r0, sl, lsl r0
   11a80:	0001130b 	andeq	r1, r1, fp, lsl #6
   11a84:	00557200 	subseq	r7, r5, r0, lsl #4
   11a88:	011e0b00 	tsteq	lr, r0, lsl #22
   11a8c:	558b0000 	strpl	r0, [fp]
   11a90:	000d0000 	andeq	r0, sp, r0
   11a94:	94000000 	strls	r0, [r0], #-0
   11a98:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   11a9c:	00000000 	andeq	r0, r0, r0
   11aa0:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   11aa4:	17000000 	strne	r0, [r0, -r0]
   11aa8:	000029ed 	andeq	r2, r0, sp, ror #19
   11aac:	00a26a05 	adceq	r6, r2, r5, lsl #20
   11ab0:	fc170000 	ldc2	0, cr0, [r7], {-0}
   11ab4:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
   11ab8:	0000a284 	andeq	sl, r0, r4, lsl #5
   11abc:	0f310000 	svceq	0x00310000
   11ac0:	00040000 	andeq	r0, r4, r0
   11ac4:	0000419d 	muleq	r0, sp, r1
   11ac8:	45570104 	ldrbmi	r0, [r7, #-260]	; 0xfffffefc
   11acc:	700c0000 	andvc	r0, ip, r0
   11ad0:	f2000044 	vhadd.s8	q0, q0, q2
   11ad4:	6c000045 	stcvs	0, cr0, [r0], {69}	; 0x45
   11ad8:	aa000047 	bge	11bfc <__exidx_end+0xc2e4>
   11adc:	d0000000 	andle	r0, r0, r0
   11ae0:	0200008d 	andeq	r0, r0, #141	; 0x8d
   11ae4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11ae8:	12030074 	andne	r0, r3, #116	; 0x74
   11aec:	02000033 	andeq	r0, r0, #51	; 0x33
   11af0:	003817d8 	ldrsbteq	r1, [r8], -r8
   11af4:	04040000 	streq	r0, [r4], #-0
   11af8:	00043e07 	andeq	r3, r4, r7, lsl #28
   11afc:	44040500 	strmi	r0, [r4], #-1280	; 0xfffffb00
   11b00:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
   11b04:	00381801 	eorseq	r1, r8, r1, lsl #16
   11b08:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11b0c:	00080405 	andeq	r0, r8, r5, lsl #8
   11b10:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   11b14:	00004428 	andeq	r4, r0, r8, lsr #8
   11b18:	000be105 	andeq	lr, fp, r5, lsl #2
   11b1c:	01650200 	cmneq	r5, r0, lsl #4
   11b20:	00003817 	andeq	r3, r0, r7, lsl r8
   11b24:	06010400 	streq	r0, [r1], -r0, lsl #8
   11b28:	00000c69 	andeq	r0, r0, r9, ror #24
   11b2c:	67080104 	strvs	r0, [r8, -r4, lsl #2]
   11b30:	0400000c 	streq	r0, [r0], #-12
   11b34:	0a770502 	beq	1dd2f44 <__ccfg+0x1db2f9c>
   11b38:	02040000 	andeq	r0, r4, #0
   11b3c:	000d6407 	andeq	r6, sp, r7, lsl #8
   11b40:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11b44:	00000809 	andeq	r0, r0, r9, lsl #16
   11b48:	00008306 	andeq	r8, r0, r6, lsl #6
   11b4c:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11b50:	00000439 	andeq	r0, r0, r9, lsr r4
   11b54:	34070804 	strcc	r0, [r7], #-2052	; 0xfffff7fc
   11b58:	03000004 	movweq	r0, #4
   11b5c:	00000e47 	andeq	r0, r0, r7, asr #28
   11b60:	830e2e03 	movwhi	r2, #60931	; 0xee03
   11b64:	03000000 	movweq	r0, #0
   11b68:	00000307 	andeq	r0, r0, r7, lsl #6
   11b6c:	830e7403 	movwhi	r7, #58371	; 0xe403
   11b70:	07000000 	streq	r0, [r0, -r0]
   11b74:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   11b78:	000000d7 	ldrdeq	r0, [r0], -r7
   11b7c:	00077808 	andeq	r7, r7, r8, lsl #16
   11b80:	0ca70300 	stceq	3, cr0, [r7]
   11b84:	0000005a 	andeq	r0, r0, sl, asr r0
   11b88:	000ac008 	andeq	ip, sl, r8
   11b8c:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   11b90:	000000d7 	ldrdeq	r0, [r0], -r7
   11b94:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   11b98:	00e70000 	rsceq	r0, r7, r0
   11b9c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11ba0:	03000000 	movweq	r0, #0
   11ba4:	03080b00 	movweq	r0, #35584	; 0x8b00
   11ba8:	010b09a2 	smlatbeq	fp, r2, r9, r0
   11bac:	a10c0000 	mrsge	r0, (UNDEF: 12)
   11bb0:	03000003 	movweq	r0, #3
   11bb4:	002507a4 	eoreq	r0, r5, r4, lsr #15
   11bb8:	0c000000 	stceq	0, cr0, [r0], {-0}
   11bbc:	0000060d 	andeq	r0, r0, sp, lsl #12
   11bc0:	b505a903 	strlt	sl, [r5, #-2307]	; 0xfffff6fd
   11bc4:	04000000 	streq	r0, [r0], #-0
   11bc8:	08c10300 	stmiaeq	r1, {r8, r9}^
   11bcc:	aa030000 	bge	d1bd4 <__ccfg+0xb1c2c>
   11bd0:	0000e703 	andeq	lr, r0, r3, lsl #14
   11bd4:	0e040d00 	cdpeq	13, 0, cr0, cr4, cr0, {0}
   11bd8:	00000117 	andeq	r0, r0, r7, lsl r1
   11bdc:	00084e03 	andeq	r4, r8, r3, lsl #28
   11be0:	19160400 	ldmdbne	r6, {sl}
   11be4:	0000008f 	andeq	r0, r0, pc, lsl #1
   11be8:	00025b03 	andeq	r5, r2, r3, lsl #22
   11bec:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   11bf0:	00000025 	andeq	r0, r0, r5, lsr #32
   11bf4:	00073603 	andeq	r3, r7, r3, lsl #12
   11bf8:	1b230400 	blne	8d2c00 <__ccfg+0x8b2c58>
   11bfc:	0000012a 	andeq	r0, r0, sl, lsr #2
   11c00:	00033a0f 	andeq	r3, r3, pc, lsl #20
   11c04:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   11c08:	00019c08 	andeq	r9, r1, r8, lsl #24
   11c0c:	0ec20c00 	cdpeq	12, 12, cr0, cr2, cr0, {0}
   11c10:	36040000 	strcc	r0, [r4], -r0
   11c14:	00019c13 	andeq	r9, r1, r3, lsl ip
   11c18:	5f100000 	svcpl	0x00100000
   11c1c:	3704006b 	strcc	r0, [r4, -fp, rrx]
   11c20:	00002507 	andeq	r2, r0, r7, lsl #10
   11c24:	6e0c0400 	cfcpysvs	mvf0, mvf12
   11c28:	0400000b 	streq	r0, [r0], #-11
   11c2c:	00250b37 	eoreq	r0, r5, r7, lsr fp
   11c30:	0c080000 	stceq	0, cr0, [r8], {-0}
   11c34:	000043f3 	strdeq	r4, [r0], -r3
   11c38:	25143704 	ldrcs	r3, [r4, #-1796]	; 0xfffff8fc
   11c3c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11c40:	0004680c 	andeq	r6, r4, ip, lsl #16
   11c44:	1b370400 	blne	dd2c4c <__ccfg+0xdb2ca4>
   11c48:	00000025 	andeq	r0, r0, r5, lsr #32
   11c4c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   11c50:	0b380400 	bleq	e12c58 <__ccfg+0xdf2cb0>
   11c54:	000001a2 	andeq	r0, r0, r2, lsr #3
   11c58:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
   11c5c:	00000142 	andeq	r0, r0, r2, asr #2
   11c60:	00011e09 	andeq	r1, r1, r9, lsl #28
   11c64:	0001b200 	andeq	fp, r1, r0, lsl #4
   11c68:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11c6c:	00000000 	andeq	r0, r0, r0
   11c70:	000b890f 	andeq	r8, fp, pc, lsl #18
   11c74:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   11c78:	00023508 	andeq	r3, r2, r8, lsl #10
   11c7c:	05780c00 	ldrbeq	r0, [r8, #-3072]!	; 0xfffff400
   11c80:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   11c84:	00002509 	andeq	r2, r0, r9, lsl #10
   11c88:	ca0c0000 	bgt	311c90 <__ccfg+0x2f1ce8>
   11c8c:	04000003 	streq	r0, [r0], #-3
   11c90:	0025093f 	eoreq	r0, r5, pc, lsr r9
   11c94:	0c040000 	stceq	0, cr0, [r4], {-0}
   11c98:	0000036b 	andeq	r0, r0, fp, ror #6
   11c9c:	25094004 	strcs	r4, [r9, #-4]
   11ca0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11ca4:	0006800c 	andeq	r8, r6, ip
   11ca8:	09410400 	stmdbeq	r1, {sl}^
   11cac:	00000025 	andeq	r0, r0, r5, lsr #32
   11cb0:	09600c0c 	stmdbeq	r0!, {r2, r3, sl, fp}^
   11cb4:	42040000 	andmi	r0, r4, #0
   11cb8:	00002509 	andeq	r2, r0, r9, lsl #10
   11cbc:	da0c1000 	ble	315cc4 <__ccfg+0x2f5d1c>
   11cc0:	0400000a 	streq	r0, [r0], #-10
   11cc4:	00250943 	eoreq	r0, r5, r3, asr #18
   11cc8:	0c140000 	ldceq	0, cr0, [r4], {-0}
   11ccc:	0000034e 	andeq	r0, r0, lr, asr #6
   11cd0:	25094404 	strcs	r4, [r9, #-1028]	; 0xfffffbfc
   11cd4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11cd8:	0005810c 	andeq	r8, r5, ip, lsl #2
   11cdc:	09450400 	stmdbeq	r5, {sl}^
   11ce0:	00000025 	andeq	r0, r0, r5, lsr #32
   11ce4:	08fc0c1c 	ldmeq	ip!, {r2, r3, r4, sl, fp}^
   11ce8:	46040000 	strmi	r0, [r4], -r0
   11cec:	00002509 	andeq	r2, r0, r9, lsl #10
   11cf0:	12002000 	andne	r2, r0, #0
   11cf4:	00000032 	andeq	r0, r0, r2, lsr r0
   11cf8:	4f040108 	svcmi	0x00040108
   11cfc:	00027a08 	andeq	r7, r2, r8, lsl #20
   11d00:	0d2b0c00 	stceq	12, cr0, [fp, #-0]
   11d04:	50040000 	andpl	r0, r4, r0
   11d08:	00027a0a 	andeq	r7, r2, sl, lsl #20
   11d0c:	230c0000 	movwcs	r0, #49152	; 0xc000
   11d10:	0400000c 	streq	r0, [r0], #-12
   11d14:	027a0951 	rsbseq	r0, sl, #1327104	; 0x144000
   11d18:	13800000 	orrne	r0, r0, #0
   11d1c:	00000dc4 	andeq	r0, r0, r4, asr #27
   11d20:	1e0a5304 	cdpne	3, 0, cr5, cr10, cr4, {0}
   11d24:	00000001 	andeq	r0, r0, r1
   11d28:	0eb51301 	cdpeq	3, 11, cr1, cr5, cr1, {0}
   11d2c:	56040000 	strpl	r0, [r4], -r0
   11d30:	00011e0a 	andeq	r1, r1, sl, lsl #28
   11d34:	00010400 	andeq	r0, r1, r0, lsl #8
   11d38:	00011709 	andeq	r1, r1, r9, lsl #14
   11d3c:	00028a00 	andeq	r8, r2, r0, lsl #20
   11d40:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11d44:	001f0000 	andseq	r0, pc, r0
   11d48:	000a2212 	andeq	r2, sl, r2, lsl r2
   11d4c:	04019000 	streq	r9, [r1], #-0
   11d50:	02cd0862 	sbceq	r0, sp, #6422528	; 0x620000
   11d54:	c20c0000 	andgt	r0, ip, #0
   11d58:	0400000e 	streq	r0, [r0], #-14
   11d5c:	02cd1263 	sbceq	r1, sp, #805306374	; 0x30000006
   11d60:	0c000000 	stceq	0, cr0, [r0], {-0}
   11d64:	00000590 	muleq	r0, r0, r5
   11d68:	25066404 	strcs	r6, [r6, #-1028]	; 0xfffffbfc
   11d6c:	04000000 	streq	r0, [r0], #-0
   11d70:	00030f0c 	andeq	r0, r3, ip, lsl #30
   11d74:	09660400 	stmdbeq	r6!, {sl}^
   11d78:	000002d3 	ldrdeq	r0, [r0], -r3
   11d7c:	00320c08 	eorseq	r0, r2, r8, lsl #24
   11d80:	67040000 	strvs	r0, [r4, -r0]
   11d84:	0002351e 	andeq	r3, r2, lr, lsl r5
   11d88:	11008800 	tstne	r0, r0, lsl #16
   11d8c:	00028a04 	andeq	r8, r2, r4, lsl #20
   11d90:	02e30900 	rsceq	r0, r3, #0, 18
   11d94:	02e30000 	rsceq	r0, r3, #0
   11d98:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11d9c:	1f000000 	svcne	0x00000000
   11da0:	e9041100 	stmdb	r4, {r8, ip}
   11da4:	14000002 	strne	r0, [r0], #-2
   11da8:	000cc30f 	andeq	ip, ip, pc, lsl #6
   11dac:	7a040800 	bvc	113db4 <__ccfg+0xf3e0c>
   11db0:	00031208 	andeq	r1, r3, r8, lsl #4
   11db4:	0cd50c00 	ldcleq	12, cr0, [r5], {0}
   11db8:	7b040000 	blvc	111dc0 <__ccfg+0xf1e18>
   11dbc:	00031211 	andeq	r1, r3, r1, lsl r2
   11dc0:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
   11dc4:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   11dc8:	0025067c 	eoreq	r0, r5, ip, ror r6
   11dcc:	00040000 	andeq	r0, r4, r0
   11dd0:	006e0411 	rsbeq	r0, lr, r1, lsl r4
   11dd4:	600f0000 	andvs	r0, pc, r0
   11dd8:	68000004 	stmdavs	r0, {r2}
   11ddc:	5b08ba04 	blpl	2405f4 <__ccfg+0x22064c>
   11de0:	10000004 	andne	r0, r0, r4
   11de4:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   11de8:	031212bb 	tsteq	r2, #-1342177269	; 0xb000000b
   11dec:	10000000 	andne	r0, r0, r0
   11df0:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   11df4:	002507bc 	strhteq	r0, [r5], -ip
   11df8:	10040000 	andne	r0, r4, r0
   11dfc:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   11e00:	002507bd 	strhteq	r0, [r5], -sp
   11e04:	0c080000 	stceq	0, cr0, [r8], {-0}
   11e08:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   11e0c:	7509be04 	strvc	fp, [r9, #-3588]	; 0xfffff1fc
   11e10:	0c000000 	stceq	0, cr0, [r0], {-0}
   11e14:	0008650c 	andeq	r6, r8, ip, lsl #10
   11e18:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   11e1c:	00000075 	andeq	r0, r0, r5, ror r0
   11e20:	625f100e 	subsvs	r1, pc, #14
   11e24:	c0040066 	andgt	r0, r4, r6, rrx
   11e28:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11e2c:	b20c1000 	andlt	r1, ip, #0
   11e30:	04000001 	streq	r0, [r0], #-1
   11e34:	002507c1 	eoreq	r0, r5, r1, asr #15
   11e38:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11e3c:	00000314 	andeq	r0, r0, r4, lsl r3
   11e40:	170ac804 	strne	ip, [sl, -r4, lsl #16]
   11e44:	1c000001 	stcne	0, cr0, [r0], {1}
   11e48:	001d2d0c 	andseq	r2, sp, ip, lsl #26
   11e4c:	1dca0400 	cfstrdne	mvd0, [sl]
   11e50:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11e54:	1cf40c20 	ldclne	12, cr0, [r4], #128	; 0x80
   11e58:	cc040000 	stcgt	0, cr0, [r4], {-0}
   11e5c:	0006091d 	andeq	r0, r6, sp, lsl r9
   11e60:	e20c2400 	and	r2, ip, #0, 8
   11e64:	0400000e 	streq	r0, [r0], #-14
   11e68:	062d0dcf 	strteq	r0, [sp], -pc, asr #27
   11e6c:	0c280000 	stceq	0, cr0, [r8], #-0
   11e70:	00001ce2 	andeq	r1, r0, r2, ror #25
   11e74:	4709d004 	strmi	sp, [r9, -r4]
   11e78:	2c000006 	stccs	0, cr0, [r0], {6}
   11e7c:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   11e80:	11d30400 	bicsne	r0, r3, r0, lsl #8
   11e84:	000002ea 	andeq	r0, r0, sl, ror #5
   11e88:	755f1030 	ldrbvc	r1, [pc, #-48]	; 11e60 <__exidx_end+0xc548>
   11e8c:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   11e90:	00031212 	andeq	r1, r3, r2, lsl r2
   11e94:	5f103800 	svcpl	0x00103800
   11e98:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   11e9c:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   11ea0:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   11ea4:	00000f19 	andeq	r0, r0, r9, lsl pc
   11ea8:	4d11d804 	ldcmi	8, cr13, [r1, #-16]
   11eac:	40000006 	andmi	r0, r0, r6
   11eb0:	000e620c 	andeq	r6, lr, ip, lsl #4
   11eb4:	11d90400 	bicsne	r0, r9, r0, lsl #8
   11eb8:	0000065d 	andeq	r0, r0, sp, asr r6
   11ebc:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   11ec0:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   11ec4:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11ec8:	800c4400 	andhi	r4, ip, r0, lsl #8
   11ecc:	0400000b 	streq	r0, [r0], #-11
   11ed0:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   11ed4:	0c4c0000 	mareq	acc0, r0, ip
   11ed8:	00000494 	muleq	r0, r4, r4
   11edc:	9d0ae004 	stcls	0, cr14, [sl, #-16]
   11ee0:	50000000 	andpl	r0, r0, r0
   11ee4:	0047510c 	subeq	r5, r7, ip, lsl #2
   11ee8:	12e30400 	rscne	r0, r3, #0, 8
   11eec:	00000479 	andeq	r0, r0, r9, ror r4
   11ef0:	0ba60c54 	bleq	fe995048 <_estack+0xde990048>
   11ef4:	e7040000 	str	r0, [r4, -r0]
   11ef8:	0001360c 	andeq	r3, r1, ip, lsl #12
   11efc:	2a0c5800 	bcs	327f04 <__ccfg+0x307f5c>
   11f00:	0400000a 	streq	r0, [r0], #-10
   11f04:	010b0ee9 	smlatteq	fp, r9, lr, r0
   11f08:	0c5c0000 	mraeq	r0, ip, acc0
   11f0c:	00000e95 	muleq	r0, r5, lr
   11f10:	2509ea04 	strcs	lr, [r9, #-2564]	; 0xfffff5fc
   11f14:	64000000 	strvs	r0, [r0], #-0
   11f18:	00251500 	eoreq	r1, r5, r0, lsl #10
   11f1c:	04790000 	ldrbteq	r0, [r9], #-0
   11f20:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11f24:	16000004 	strne	r0, [r0], -r4
   11f28:	00000117 	andeq	r0, r0, r7, lsl r1
   11f2c:	0005cd16 	andeq	ip, r5, r6, lsl sp
   11f30:	00251600 	eoreq	r1, r5, r0, lsl #12
   11f34:	11000000 	mrsne	r0, (UNDEF: 0)
   11f38:	00048404 	andeq	r8, r4, r4, lsl #8
   11f3c:	04790600 	ldrbteq	r0, [r9], #-1536	; 0xfffffa00
   11f40:	5d170000 	ldcpl	0, cr0, [r7, #-0]
   11f44:	2800000d 	stmdacs	r0, {r0, r2, r3}
   11f48:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   11f4c:	0005cd08 	andeq	ip, r5, r8, lsl #26
   11f50:	09101800 	ldmdbeq	r0, {fp, ip}
   11f54:	67040000 	strvs	r0, [r4, -r0]
   11f58:	00250702 	eoreq	r0, r5, r2, lsl #14
   11f5c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11f60:	000007ee 	andeq	r0, r0, lr, ror #15
   11f64:	0b026c04 	bleq	acf7c <__ccfg+0x8cfd4>
   11f68:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11f6c:	02ff1804 	rscseq	r1, pc, #4, 16	; 0x40000
   11f70:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11f74:	06b91402 	ldrteq	r1, [r9], r2, lsl #8
   11f78:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   11f7c:	00000f08 	andeq	r0, r0, r8, lsl #30
   11f80:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   11f84:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11f88:	058b180c 	streq	r1, [fp, #2060]	; 0x80c
   11f8c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   11f90:	00250802 	eoreq	r0, r5, r2, lsl #16
   11f94:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
   11f98:	000004e0 	andeq	r0, r0, r0, ror #9
   11f9c:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   11fa0:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   11fa4:	0e751814 	mrceq	8, 3, r1, cr5, cr4, {0}
   11fa8:	72040000 	andvc	r0, r4, #0
   11fac:	00250702 	eoreq	r0, r5, r2, lsl #14
   11fb0:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
   11fb4:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
   11fb8:	16027304 	strne	r7, [r2], -r4, lsl #6
   11fbc:	00000950 	andeq	r0, r0, r0, asr r9
   11fc0:	07961834 			; <UNDEFINED> instruction: 0x07961834
   11fc4:	75040000 	strvc	r0, [r4, #-0]
   11fc8:	00250702 	eoreq	r0, r5, r2, lsl #14
   11fcc:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
   11fd0:	00000890 	muleq	r0, r0, r8
   11fd4:	0a027704 	beq	afbec <__ccfg+0x8fc44>
   11fd8:	00000961 	andeq	r0, r0, r1, ror #18
   11fdc:	0363183c 	cmneq	r3, #60, 16	; 0x3c0000
   11fe0:	7a040000 	bvc	111fe8 <__ccfg+0xf2040>
   11fe4:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11fe8:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
   11fec:	0000041e 	andeq	r0, r0, lr, lsl r4
   11ff0:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   11ff4:	00000025 	andeq	r0, r0, r5, lsr #32
   11ff8:	06151844 	ldreq	r1, [r5], -r4, asr #16
   11ffc:	7c040000 	stcvc	0, cr0, [r4], {-0}
   12000:	019c1302 	orrseq	r1, ip, r2, lsl #6
   12004:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   12008:	0000082b 	andeq	r0, r0, fp, lsr #16
   1200c:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   12010:	00000967 	andeq	r0, r0, r7, ror #18
   12014:	0b66184c 	bleq	199814c <__ccfg+0x19781a4>
   12018:	80040000 	andhi	r0, r4, r0
   1201c:	00250702 	eoreq	r0, r5, r2, lsl #14
   12020:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   12024:	00000c5f 	andeq	r0, r0, pc, asr ip
   12028:	09028104 	stmdbeq	r2, {r2, r8, pc}
   1202c:	000005cd 	andeq	r0, r0, sp, asr #11
   12030:	0c791854 	ldcleq	8, cr1, [r9], #-336	; 0xfffffeb0
   12034:	a4040000 	strge	r0, [r4], #-0
   12038:	08940702 	ldmeq	r4, {r1, r8, r9, sl}
   1203c:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
   12040:	00000a22 	andeq	r0, r0, r2, lsr #20
   12044:	1302a804 	movwne	sl, #10244	; 0x2804
   12048:	000002cd 	andeq	r0, r0, sp, asr #5
   1204c:	ba190148 	blt	652574 <__ccfg+0x6325cc>
   12050:	04000006 	streq	r0, [r0], #-6
   12054:	8a1202a9 	bhi	492b00 <__ccfg+0x472b58>
   12058:	4c000002 	stcmi	0, cr0, [r0], {2}
   1205c:	06a11901 	strteq	r1, [r1], r1, lsl #18
   12060:	ad040000 	stcge	0, cr0, [r4, #-0]
   12064:	09780c02 	ldmdbeq	r8!, {r1, sl, fp}^
   12068:	02dc0000 	sbcseq	r0, ip, #0
   1206c:	000ce119 	andeq	lr, ip, r9, lsl r1
   12070:	02b20400 	adcseq	r0, r2, #0, 8
   12074:	00067a10 	andeq	r7, r6, r0, lsl sl
   12078:	1902e000 	stmdbne	r2, {sp, lr, pc}
   1207c:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
   12080:	0a02b404 	beq	bf098 <__ccfg+0x9f0f0>
   12084:	00000984 	andeq	r0, r0, r4, lsl #19
   12088:	110002ec 	smlattne	r0, ip, r2, r0
   1208c:	0005d304 	andeq	sp, r5, r4, lsl #6
   12090:	08010400 	stmdaeq	r1, {sl}
   12094:	00000c70 	andeq	r0, r0, r0, ror ip
   12098:	0005d306 	andeq	sp, r5, r6, lsl #6
   1209c:	5b041100 	blpl	1164a4 <__ccfg+0xf64fc>
   120a0:	15000004 	strne	r0, [r0, #-4]
   120a4:	00000025 	andeq	r0, r0, r5, lsr #32
   120a8:	00000603 	andeq	r0, r0, r3, lsl #12
   120ac:	00047916 	andeq	r7, r4, r6, lsl r9
   120b0:	01171600 	tsteq	r7, r0, lsl #12
   120b4:	03160000 	tsteq	r6, #0
   120b8:	16000006 	strne	r0, [r0], -r6
   120bc:	00000025 	andeq	r0, r0, r5, lsr #32
   120c0:	da041100 	ble	1164c8 <__ccfg+0xf6520>
   120c4:	11000005 	tstne	r0, r5
   120c8:	0005e504 	andeq	lr, r5, r4, lsl #10
   120cc:	00a91500 	adceq	r1, r9, r0, lsl #10
   120d0:	062d0000 	strteq	r0, [sp], -r0
   120d4:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   120d8:	16000004 	strne	r0, [r0], -r4
   120dc:	00000117 	andeq	r0, r0, r7, lsl r1
   120e0:	0000a916 	andeq	sl, r0, r6, lsl r9
   120e4:	00251600 	eoreq	r1, r5, r0, lsl #12
   120e8:	11000000 	mrsne	r0, (UNDEF: 0)
   120ec:	00060f04 	andeq	r0, r6, r4, lsl #30
   120f0:	00251500 	eoreq	r1, r5, r0, lsl #10
   120f4:	06470000 	strbeq	r0, [r7], -r0
   120f8:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   120fc:	16000004 	strne	r0, [r0], -r4
   12100:	00000117 	andeq	r0, r0, r7, lsl r1
   12104:	33041100 	movwcc	r1, #16640	; 0x4100
   12108:	09000006 	stmdbeq	r0, {r1, r2}
   1210c:	0000006e 	andeq	r0, r0, lr, rrx
   12110:	0000065d 	andeq	r0, r0, sp, asr r6
   12114:	0000380a 	andeq	r3, r0, sl, lsl #16
   12118:	09000200 	stmdbeq	r0, {r9}
   1211c:	0000006e 	andeq	r0, r0, lr, rrx
   12120:	0000066d 	andeq	r0, r0, sp, ror #12
   12124:	0000380a 	andeq	r3, r0, sl, lsl #16
   12128:	05000000 	streq	r0, [r0, #-0]
   1212c:	00000481 	andeq	r0, r0, r1, lsl #9
   12130:	1a012404 	bne	5b148 <__ccfg+0x3b1a0>
   12134:	00000318 	andeq	r0, r0, r8, lsl r3
   12138:	000cdb1a 	andeq	sp, ip, sl, lsl fp
   1213c:	28040c00 	stmdacs	r4, {sl, fp}
   12140:	06b30801 	ldrteq	r0, [r3], r1, lsl #16
   12144:	c2180000 	andsgt	r0, r8, #0
   12148:	0400000e 	streq	r0, [r0], #-14
   1214c:	b311012a 	tstlt	r1, #-2147483638	; 0x8000000a
   12150:	00000006 	andeq	r0, r0, r6
   12154:	000bda18 	andeq	sp, fp, r8, lsl sl
   12158:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   1215c:	00002507 	andeq	r2, r0, r7, lsl #10
   12160:	7e180400 	cfmulsvc	mvf0, mvf8, mvf0
   12164:	04000007 	streq	r0, [r0], #-7
   12168:	b90b012c 	stmdblt	fp, {r2, r3, r5, r8}
   1216c:	08000006 	stmdaeq	r0, {r1, r2}
   12170:	7a041100 	bvc	116578 <__ccfg+0xf65d0>
   12174:	11000006 	tstne	r0, r6
   12178:	00066d04 	andeq	r6, r6, r4, lsl #26
   1217c:	03ed1a00 	mvneq	r1, #0, 20
   12180:	040e0000 	streq	r0, [lr], #-0
   12184:	f8080144 			; <UNDEFINED> instruction: 0xf8080144
   12188:	18000006 	stmdane	r0, {r1, r2}
   1218c:	00001649 	andeq	r1, r0, r9, asr #12
   12190:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   12194:	000006f8 	strdeq	r0, [r0], -r8
   12198:	083d1800 	ldmdaeq	sp!, {fp, ip}
   1219c:	46040000 	strmi	r0, [r4], -r0
   121a0:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   121a4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
   121a8:	000014fb 	strdeq	r1, [r0], -fp
   121ac:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   121b0:	0000007c 	andeq	r0, r0, ip, ror r0
   121b4:	7c09000c 	stcvc	0, cr0, [r9], {12}
   121b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   121bc:	0a000007 	beq	121e0 <__exidx_end+0xc8c8>
   121c0:	00000038 	andeq	r0, r0, r8, lsr r0
   121c4:	d01b0002 	andsle	r0, fp, r2
   121c8:	07028504 	streq	r8, [r2, -r4, lsl #10]
   121cc:	0000081d 	andeq	r0, r0, sp, lsl r8
   121d0:	000e6818 	andeq	r6, lr, r8, lsl r8
   121d4:	02870400 	addeq	r0, r7, #0, 8
   121d8:	00003818 	andeq	r3, r0, r8, lsl r8
   121dc:	e9180000 	ldmdb	r8, {}	; <UNPREDICTABLE>
   121e0:	0400000c 	streq	r0, [r0], #-12
   121e4:	cd120288 	lfmgt	f0, 4, [r2, #-544]	; 0xfffffde0
   121e8:	04000005 	streq	r0, [r0], #-5
   121ec:	00044b18 	andeq	r4, r4, r8, lsl fp
   121f0:	02890400 	addeq	r0, r9, #0, 8
   121f4:	00081d10 	andeq	r1, r8, r0, lsl sp
   121f8:	4f180800 	svcmi	0x00180800
   121fc:	0400000b 	streq	r0, [r0], #-11
   12200:	b217028a 	andslt	r0, r7, #-1610612728	; 0xa0000008
   12204:	24000001 	strcs	r0, [r0], #-1
   12208:	0007f518 	andeq	pc, r7, r8, lsl r5	; <UNPREDICTABLE>
   1220c:	028b0400 	addeq	r0, fp, #0, 8
   12210:	0000250f 	andeq	r2, r0, pc, lsl #10
   12214:	bd184800 	ldclt	8, cr4, [r8, #-0]
   12218:	0400000e 	streq	r0, [r0], #-14
   1221c:	962c028c 	strtls	r0, [ip], -ip, lsl #5
   12220:	50000000 	andpl	r0, r0, r0
   12224:	00007618 	andeq	r7, r0, r8, lsl r6
   12228:	028d0400 	addeq	r0, sp, #0, 8
   1222c:	0006bf1a 	andeq	fp, r6, sl, lsl pc
   12230:	45185800 	ldrmi	r5, [r8, #-2048]	; 0xfffff800
   12234:	04000006 	streq	r0, [r0], #-6
   12238:	0b16028e 	bleq	592c78 <__ccfg+0x572cd0>
   1223c:	68000001 	stmdavs	r0, {r0}
   12240:	000cf618 	andeq	pc, ip, r8, lsl r6	; <UNPREDICTABLE>
   12244:	028f0400 	addeq	r0, pc, #0, 8
   12248:	00010b16 	andeq	r0, r1, r6, lsl fp
   1224c:	68187000 	ldmdavs	r8, {ip, sp, lr}
   12250:	04000000 	streq	r0, [r0], #-0
   12254:	0b160290 	bleq	592c9c <__ccfg+0x572cf4>
   12258:	78000001 	stmdavc	r0, {r0}
   1225c:	000b7618 	andeq	r7, fp, r8, lsl r6
   12260:	02910400 	addseq	r0, r1, #0, 8
   12264:	00082d10 	andeq	r2, r8, r0, lsl sp
   12268:	28188000 	ldmdacs	r8, {pc}
   1226c:	04000004 	streq	r0, [r0], #-4
   12270:	3d100292 	lfmcc	f0, 4, [r0, #-584]	; 0xfffffdb8
   12274:	88000008 	stmdahi	r0, {r3}
   12278:	000c9918 	andeq	r9, ip, r8, lsl r9
   1227c:	02930400 	addseq	r0, r3, #0, 8
   12280:	0000250f 	andeq	r2, r0, pc, lsl #10
   12284:	b418a000 	ldrlt	sl, [r8], #-0
   12288:	04000002 	streq	r0, [r0], #-2
   1228c:	0b160294 	bleq	592ce4 <__ccfg+0x572d3c>
   12290:	a4000001 	strge	r0, [r0], #-1
   12294:	0006ab18 	andeq	sl, r6, r8, lsl fp
   12298:	02950400 	addseq	r0, r5, #0, 8
   1229c:	00010b16 	andeq	r0, r1, r6, lsl fp
   122a0:	c718ac00 	ldrgt	sl, [r8, -r0, lsl #24]
   122a4:	04000005 	streq	r0, [r0], #-5
   122a8:	0b160296 	bleq	592d08 <__ccfg+0x572d60>
   122ac:	b4000001 	strlt	r0, [r0], #-1
   122b0:	00085618 	andeq	r5, r8, r8, lsl r6
   122b4:	02970400 	addseq	r0, r7, #0, 8
   122b8:	00010b16 	andeq	r0, r1, r6, lsl fp
   122bc:	3418bc00 	ldrcc	fp, [r8], #-3072	; 0xfffff400
   122c0:	04000006 	streq	r0, [r0], #-6
   122c4:	0b160298 	bleq	592d2c <__ccfg+0x572d84>
   122c8:	c4000001 	strgt	r0, [r0], #-1
   122cc:	00090e18 	andeq	r0, r9, r8, lsl lr
   122d0:	02990400 	addseq	r0, r9, #0, 8
   122d4:	00002508 	andeq	r2, r0, r8, lsl #10
   122d8:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
   122dc:	000005d3 	ldrdeq	r0, [r0], -r3
   122e0:	0000082d 	andeq	r0, r0, sp, lsr #16
   122e4:	0000380a 	andeq	r3, r0, sl, lsl #16
   122e8:	09001900 	stmdbeq	r0, {r8, fp, ip}
   122ec:	000005d3 	ldrdeq	r0, [r0], -r3
   122f0:	0000083d 	andeq	r0, r0, sp, lsr r8
   122f4:	0000380a 	andeq	r3, r0, sl, lsl #16
   122f8:	09000700 	stmdbeq	r0, {r8, r9, sl}
   122fc:	000005d3 	ldrdeq	r0, [r0], -r3
   12300:	0000084d 	andeq	r0, r0, sp, asr #16
   12304:	0000380a 	andeq	r3, r0, sl, lsl #16
   12308:	1b001700 	blne	17f10 <__exidx_end+0x125f8>
   1230c:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   12310:	00087407 	andeq	r7, r8, r7, lsl #8
   12314:	03d31800 	bicseq	r1, r3, #0, 16
   12318:	a1040000 	mrsge	r0, (UNDEF: 4)
   1231c:	08741b02 	ldmdaeq	r4!, {r1, r8, r9, fp, ip}^
   12320:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12324:	00000f10 	andeq	r0, r0, r0, lsl pc
   12328:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   1232c:	00000884 	andeq	r0, r0, r4, lsl #17
   12330:	12090078 	andne	r0, r9, #120	; 0x78
   12334:	84000003 	strhi	r0, [r0], #-3
   12338:	0a000008 	beq	12360 <__exidx_end+0xca48>
   1233c:	00000038 	andeq	r0, r0, r8, lsr r0
   12340:	3809001d 	stmdacc	r9, {r0, r2, r3, r4}
   12344:	94000000 	strls	r0, [r0], #-0
   12348:	0a000008 	beq	12370 <__exidx_end+0xca58>
   1234c:	00000038 	andeq	r0, r0, r8, lsr r0
   12350:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
   12354:	03028304 	movweq	r8, #8964	; 0x2304
   12358:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   1235c:	000d5d1d 	andeq	r5, sp, sp, lsl sp
   12360:	029a0400 	addseq	r0, sl, #0, 8
   12364:	0007080b 	andeq	r0, r7, fp, lsl #16
   12368:	0b5e1d00 	bleq	1799770 <__ccfg+0x17797c8>
   1236c:	a3040000 	movwge	r0, #16384	; 0x4000
   12370:	084d0b02 	stmdaeq	sp, {r1, r8, r9, fp}^
   12374:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   12378:	000005d3 	ldrdeq	r0, [r0], -r3
   1237c:	000008c9 	andeq	r0, r0, r9, asr #17
   12380:	0000380a 	andeq	r3, r0, sl, lsl #16
   12384:	12001800 	andne	r1, r0, #0, 16
   12388:	00000ec8 	andeq	r0, r0, r8, asr #29
   1238c:	b206016c 	andlt	r0, r6, #108, 2
   12390:	00095008 	andeq	r5, r9, r8
   12394:	45300c00 	ldrmi	r0, [r0, #-3072]!	; 0xfffff400
   12398:	b4060000 	strlt	r0, [r6], #-0
   1239c:	000df80b 	andeq	pc, sp, fp, lsl #16
   123a0:	e50c0000 	str	r0, [ip, #-0]
   123a4:	06000044 	streq	r0, [r0], -r4, asr #32
   123a8:	0e320bb5 	vmoveq.s16	r0, d18[2]
   123ac:	0ce00000 	stcleq	0, cr0, [r0]
   123b0:	0000437b 	andeq	r4, r0, fp, ror r3
   123b4:	610bb706 	tstvs	fp, r6, lsl #14
   123b8:	e400000e 	str	r0, [r0], #-14
   123bc:	0042eb0c 	subeq	lr, r2, ip, lsl #22
   123c0:	0ab90600 	beq	fee53bc8 <_estack+0xdee4ebc8>
   123c4:	00000025 	andeq	r0, r0, r5, lsr #32
   123c8:	42b70ce8 	adcsmi	r0, r7, #232, 24	; 0xe800
   123cc:	ba060000 	blt	1923d4 <__ccfg+0x17242c>
   123d0:	0005cd0b 	andeq	ip, r5, fp, lsl #26
   123d4:	e50cec00 	str	lr, [ip, #-3072]	; 0xfffff400
   123d8:	06000042 	streq	r0, [r0], -r2, asr #32
   123dc:	09d212bb 	ldmibeq	r2, {r0, r1, r3, r4, r5, r7, r9, ip}^
   123e0:	13f00000 	mvnsne	r0, #0
   123e4:	000043f9 	strdeq	r4, [r0], -r9
   123e8:	670bbd06 	strvs	fp, [fp, -r6, lsl #26]
   123ec:	2800000e 	stmdacs	r0, {r1, r2, r3}
   123f0:	441a1301 	ldrmi	r1, [sl], #-769	; 0xfffffcff
   123f4:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
   123f8:	000e770b 	andeq	r7, lr, fp, lsl #14
   123fc:	13012a00 	movwne	r2, #6656	; 0x1a00
   12400:	0000436b 	andeq	r4, r0, fp, ror #6
   12404:	770bbf06 	strvc	fp, [fp, -r6, lsl #30]
   12408:	4a00000e 	bmi	12448 <__exidx_end+0xcb30>
   1240c:	04110001 	ldreq	r0, [r1], #-1
   12410:	000008c9 	andeq	r0, r0, r9, asr #17
   12414:	0009611e 	andeq	r6, r9, lr, lsl r1
   12418:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   1241c:	11000000 	mrsne	r0, (UNDEF: 0)
   12420:	00095604 	andeq	r5, r9, r4, lsl #12
   12424:	9c041100 	stflss	f1, [r4], {-0}
   12428:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   1242c:	00000978 	andeq	r0, r0, r8, ror r9
   12430:	00002516 	andeq	r2, r0, r6, lsl r5
   12434:	04110000 	ldreq	r0, [r1], #-0
   12438:	0000097e 	andeq	r0, r0, lr, ror r9
   1243c:	096d0411 	stmdbeq	sp!, {r0, r4, sl}^
   12440:	6d090000 	stcvs	0, cr0, [r9, #-0]
   12444:	94000006 	strls	r0, [r0], #-6
   12448:	0a000009 	beq	12474 <__exidx_end+0xcb5c>
   1244c:	00000038 	andeq	r0, r0, r8, lsr r0
   12450:	ce1f0002 	cdpgt	0, 1, cr0, cr15, cr2, {0}
   12454:	0400000a 	streq	r0, [r0], #-10
   12458:	79170333 	ldmdbvc	r7, {r0, r1, r4, r5, r8, r9}
   1245c:	1f000004 	svcne	0x00000004
   12460:	00000ac7 	andeq	r0, r0, r7, asr #21
   12464:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   12468:	0000047f 	andeq	r0, r0, pc, ror r4
   1246c:	09b90411 	ldmibeq	r9!, {r0, r4, sl}
   12470:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
   12474:	20000009 	andcs	r0, r0, r9
   12478:	00444121 	subeq	r4, r4, r1, lsr #2
   1247c:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
   12480:	000005cd 	andeq	r0, r0, sp, asr #11
   12484:	0008c203 	andeq	ip, r8, r3, lsl #4
   12488:	14560800 	ldrbne	r0, [r6], #-2048	; 0xfffff800
   1248c:	0000010b 	andeq	r0, r0, fp, lsl #2
   12490:	0042e50f 	subeq	lr, r2, pc, lsl #10
   12494:	2a093800 	bcs	26049c <__ccfg+0x2404f4>
   12498:	000b1808 	andeq	r1, fp, r8, lsl #16
   1249c:	43ce0c00 	bicmi	r0, lr, #0, 24
   124a0:	2c090000 	stccs	0, cr0, [r9], {-0}
   124a4:	0005cd09 	andeq	ip, r5, r9, lsl #26
   124a8:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
   124ac:	09000044 	stmdbeq	r0, {r2, r6}
   124b0:	05cd092d 	strbeq	r0, [sp, #2349]	; 0x92d
   124b4:	0c040000 	stceq	0, cr0, [r4], {-0}
   124b8:	000043a9 	andeq	r4, r0, r9, lsr #7
   124bc:	cd092e09 	stcgt	14, cr2, [r9, #-36]	; 0xffffffdc
   124c0:	08000005 	stmdaeq	r0, {r0, r2}
   124c4:	0043100c 	subeq	r1, r3, ip
   124c8:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   124cc:	000005cd 	andeq	r0, r0, sp, asr #11
   124d0:	42a70c0c 	adcmi	r0, r7, #12, 24	; 0xc00
   124d4:	30090000 	andcc	r0, r9, r0
   124d8:	0005cd09 	andeq	ip, r5, r9, lsl #26
   124dc:	ca0c1000 	bgt	3164e4 <__ccfg+0x2f653c>
   124e0:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124e4:	05cd0931 	strbeq	r0, [sp, #2353]	; 0x931
   124e8:	0c140000 	ldceq	0, cr0, [r4], {-0}
   124ec:	000044ec 	andeq	r4, r0, ip, ror #9
   124f0:	cd093209 	sfmgt	f3, 4, [r9, #-36]	; 0xffffffdc
   124f4:	18000005 	stmdane	r0, {r0, r2}
   124f8:	0043a50c 	subeq	sl, r3, ip, lsl #10
   124fc:	09330900 	ldmdbeq	r3!, {r8, fp}
   12500:	000005cd 	andeq	r0, r0, sp, asr #11
   12504:	440c0c1c 	strmi	r0, [ip], #-3100	; 0xfffff3e4
   12508:	34090000 	strcc	r0, [r9], #-0
   1250c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12510:	eb0c2000 	bl	31a518 <__ccfg+0x2fa570>
   12514:	09000043 	stmdbeq	r0, {r0, r1, r6}
   12518:	05cd0935 	strbeq	r0, [sp, #2357]	; 0x935
   1251c:	0c240000 	stceq	0, cr0, [r4], #-0
   12520:	00004650 	andeq	r4, r0, r0, asr r6
   12524:	d3083609 	movwle	r3, #34313	; 0x8609
   12528:	28000005 	stmdacs	r0, {r0, r2}
   1252c:	0046540c 	subeq	r5, r6, ip, lsl #8
   12530:	08370900 	ldmdaeq	r7!, {r8, fp}
   12534:	000005d3 	ldrdeq	r0, [r0], -r3
   12538:	43bc0c29 			; <UNDEFINED> instruction: 0x43bc0c29
   1253c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
   12540:	0005d308 	andeq	sp, r5, r8, lsl #6
   12544:	4f0c2a00 	svcmi	0x000c2a00
   12548:	09000044 	stmdbeq	r0, {r2, r6}
   1254c:	05d30839 	ldrbeq	r0, [r3, #2105]	; 0x839
   12550:	0c2b0000 	stceq	0, cr0, [fp], #-0
   12554:	00004462 	andeq	r4, r0, r2, ror #8
   12558:	d3083a09 	movwle	r3, #35337	; 0x8a09
   1255c:	2c000005 	stccs	0, cr0, [r0], {5}
   12560:	0042d60c 	subeq	sp, r2, ip, lsl #12
   12564:	083b0900 	ldmdaeq	fp!, {r8, fp}
   12568:	000005d3 	ldrdeq	r0, [r0], -r3
   1256c:	43990c2d 	orrsmi	r0, r9, #11520	; 0x2d00
   12570:	3c090000 	stccc	0, cr0, [r9], {-0}
   12574:	0005d308 	andeq	sp, r5, r8, lsl #6
   12578:	3f0c2e00 	svccc	0x000c2e00
   1257c:	09000045 	stmdbeq	r0, {r0, r2, r6}
   12580:	05d3083d 	ldrbeq	r0, [r3, #2109]	; 0x83d
   12584:	0c2f0000 	stceq	0, cr0, [pc], #-0	; 1258c <__exidx_end+0xcc74>
   12588:	0000445e 	andeq	r4, r0, lr, asr r4
   1258c:	d3083e09 	movwle	r3, #36361	; 0x8e09
   12590:	30000005 	andcc	r0, r0, r5
   12594:	0042d20c 	subeq	sp, r2, ip, lsl #4
   12598:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   1259c:	000005d3 	ldrdeq	r0, [r0], -r3
   125a0:	453b0c31 	ldrmi	r0, [fp, #-3121]!	; 0xfffff3cf
   125a4:	40090000 	andmi	r0, r9, r0
   125a8:	0005d308 	andeq	sp, r5, r8, lsl #6
   125ac:	b80c3200 	stmdalt	ip, {r9, ip, sp}
   125b0:	09000043 	stmdbeq	r0, {r0, r1, r6}
   125b4:	05d30841 	ldrbeq	r0, [r3, #2113]	; 0x841
   125b8:	0c330000 	ldceq	0, cr0, [r3], #-0
   125bc:	0000444b 	andeq	r4, r0, fp, asr #8
   125c0:	d3084209 	movwle	r4, #33289	; 0x8209
   125c4:	34000005 	strcc	r0, [r0], #-5
   125c8:	0043950c 	subeq	r9, r3, ip, lsl #10
   125cc:	08430900 	stmdaeq	r3, {r8, fp}^
   125d0:	000005d3 	ldrdeq	r0, [r0], -r3
   125d4:	d00f0035 	andle	r0, pc, r5, lsr r0	; <UNPREDICTABLE>
   125d8:	08000044 	stmdaeq	r0, {r2, r6}
   125dc:	40083906 	andmi	r3, r8, r6, lsl #18
   125e0:	0c00000b 	stceq	0, cr0, [r0], {11}
   125e4:	00004373 	andeq	r4, r0, r3, ror r3
   125e8:	030f3b06 	movweq	r3, #64262	; 0xfb06
   125ec:	00000006 	andeq	r0, r0, r6
   125f0:	0043f90c 	subeq	pc, r3, ip, lsl #18
   125f4:	0f3c0600 	svceq	0x003c0600
   125f8:	00000603 	andeq	r0, r0, r3, lsl #12
   125fc:	18060004 	stmdane	r6, {r2}
   12600:	2100000b 	tstcs	r0, fp
   12604:	00004335 	andeq	r4, r0, r5, lsr r3
   12608:	40204206 	eormi	r4, r0, r6, lsl #4
   1260c:	0f00000b 	svceq	0x0000000b
   12610:	0000435d 	andeq	r4, r0, sp, asr r3
   12614:	0844063c 	stmdaeq	r4, {r2, r3, r4, r5, r9, sl}^
   12618:	00000c22 	andeq	r0, r0, r2, lsr #24
   1261c:	0043100c 	subeq	r1, r3, ip
   12620:	0f460600 	svceq	0x00460600
   12624:	00000603 	andeq	r0, r0, r3, lsl #12
   12628:	42a70c00 	adcmi	r0, r7, #0, 24
   1262c:	47060000 	strmi	r0, [r6, -r0]
   12630:	0006030f 	andeq	r0, r6, pc, lsl #6
   12634:	ca0c0400 	bgt	31363c <__ccfg+0x2f3694>
   12638:	06000043 	streq	r0, [r0], -r3, asr #32
   1263c:	06030f48 	streq	r0, [r3], -r8, asr #30
   12640:	0c080000 	stceq	0, cr0, [r8], {-0}
   12644:	000044ec 	andeq	r4, r0, ip, ror #9
   12648:	030f4906 	movweq	r4, #63750	; 0xf906
   1264c:	0c000006 	stceq	0, cr0, [r0], {6}
   12650:	0043a50c 	subeq	sl, r3, ip, lsl #10
   12654:	0f4a0600 	svceq	0x004a0600
   12658:	00000603 	andeq	r0, r0, r3, lsl #12
   1265c:	440c0c10 	strmi	r0, [ip], #-3088	; 0xfffff3f0
   12660:	4b060000 	blmi	192668 <__ccfg+0x1726c0>
   12664:	0006030f 	andeq	r0, r6, pc, lsl #6
   12668:	eb0c1400 	bl	317670 <__ccfg+0x2f76c8>
   1266c:	06000043 	streq	r0, [r0], -r3, asr #32
   12670:	06030f4c 	streq	r0, [r3], -ip, asr #30
   12674:	0c180000 	ldceq	0, cr0, [r8], {-0}
   12678:	00004650 	andeq	r4, r0, r0, asr r6
   1267c:	030f4d06 	movweq	r4, #64774	; 0xfd06
   12680:	1c000006 	stcne	0, cr0, [r0], {6}
   12684:	0046540c 	subeq	r5, r6, ip, lsl #8
   12688:	0f4e0600 	svceq	0x004e0600
   1268c:	00000603 	andeq	r0, r0, r3, lsl #12
   12690:	43bc0c20 			; <UNDEFINED> instruction: 0x43bc0c20
   12694:	4f060000 	svcmi	0x00060000
   12698:	0006030f 	andeq	r0, r6, pc, lsl #6
   1269c:	4f0c2400 	svcmi	0x000c2400
   126a0:	06000044 	streq	r0, [r0], -r4, asr #32
   126a4:	06030f50 			; <UNDEFINED> instruction: 0x06030f50
   126a8:	0c280000 	stceq	0, cr0, [r8], #-0
   126ac:	00004462 	andeq	r4, r0, r2, ror #8
   126b0:	030f5106 	movweq	r5, #61702	; 0xf106
   126b4:	2c000006 	stccs	0, cr0, [r0], {6}
   126b8:	0042d60c 	subeq	sp, r2, ip, lsl #12
   126bc:	0f520600 	svceq	0x00520600
   126c0:	00000603 	andeq	r0, r0, r3, lsl #12
   126c4:	43990c30 	orrsmi	r0, r9, #48, 24	; 0x3000
   126c8:	53060000 	movwpl	r0, #24576	; 0x6000
   126cc:	0006030f 	andeq	r0, r6, pc, lsl #6
   126d0:	3f0c3400 	svccc	0x000c3400
   126d4:	06000045 	streq	r0, [r0], -r5, asr #32
   126d8:	06030f54 			; <UNDEFINED> instruction: 0x06030f54
   126dc:	00380000 	eorseq	r0, r8, r0
   126e0:	000b5106 	andeq	r5, fp, r6, lsl #2
   126e4:	451d2100 	ldrmi	r2, [sp, #-256]	; 0xffffff00
   126e8:	65060000 	strvs	r0, [r6, #-0]
   126ec:	000c2223 	andeq	r2, ip, r3, lsr #4
   126f0:	42f40f00 	rscsmi	r0, r4, #0, 30
   126f4:	060c0000 	streq	r0, [ip], -r0
   126f8:	0c680867 	stcleq	8, cr0, [r8], #-412	; 0xfffffe64
   126fc:	ce0c0000 	cdpgt	0, 0, cr0, cr12, cr0, {0}
   12700:	06000043 	streq	r0, [r0], -r3, asr #32
   12704:	06030f69 	streq	r0, [r3], -r9, ror #30
   12708:	0c000000 	stceq	0, cr0, [r0], {-0}
   1270c:	000044f0 	strdeq	r4, [r0], -r0
   12710:	030f6a06 	movweq	r6, #64006	; 0xfa06
   12714:	04000006 	streq	r0, [r0], #-6
   12718:	0043a90c 	subeq	sl, r3, ip, lsl #18
   1271c:	0f6b0600 	svceq	0x006b0600
   12720:	00000603 	andeq	r0, r0, r3, lsl #12
   12724:	33060008 	movwcc	r0, #24584	; 0x6008
   12728:	2100000c 	tstcs	r0, ip
   1272c:	00004295 	muleq	r0, r5, r2
   12730:	68227206 	stmdavs	r2!, {r1, r2, r9, ip, sp, lr}
   12734:	0f00000c 	svceq	0x0000000c
   12738:	00004320 	andeq	r4, r0, r0, lsr #6
   1273c:	087406fc 	ldmdaeq	r4!, {r2, r3, r4, r5, r6, r7, r9, sl}^
   12740:	00000d64 	andeq	r0, r0, r4, ror #26
   12744:	6e6f6d10 	mcrvs	13, 3, r6, cr15, cr0, {0}
   12748:	0f760600 	svceq	0x00760600
   1274c:	00000d69 	andeq	r0, r0, r9, ror #26
   12750:	46690c00 	strbtmi	r0, [r9], -r0, lsl #24
   12754:	77060000 	strvc	r0, [r6, -r0]
   12758:	000d690f 	andeq	r6, sp, pc, lsl #18
   1275c:	530c3000 	movwpl	r3, #49152	; 0xc000
   12760:	06000003 	streq	r0, [r0], -r3
   12764:	0d790f78 	ldcleq	15, cr0, [r9, #-480]!	; 0xfffffe20
   12768:	0c600000 	stcleq	0, cr0, [r0], #-0
   1276c:	00004515 	andeq	r4, r0, r5, lsl r5
   12770:	790f7906 	stmdbvc	pc, {r1, r2, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
   12774:	7c00000d 	stcvc	0, cr0, [r0], {13}
   12778:	0043b20c 	subeq	fp, r3, ip, lsl #4
   1277c:	0f7a0600 	svceq	0x007a0600
   12780:	00000603 	andeq	r0, r0, r3, lsl #12
   12784:	443b0c98 	ldrtmi	r0, [fp], #-3224	; 0xfffff368
   12788:	7b060000 	blvc	192790 <__ccfg+0x1727e8>
   1278c:	0006030f 	andeq	r0, r6, pc, lsl #6
   12790:	dc0c9c00 	stcle	12, cr9, [ip], {-0}
   12794:	06000043 	streq	r0, [r0], -r3, asr #32
   12798:	06030f7c 			; <UNDEFINED> instruction: 0x06030f7c
   1279c:	0ca00000 	stceq	0, cr0, [r0]
   127a0:	00004345 	andeq	r4, r0, r5, asr #6
   127a4:	890f7d06 	stmdbhi	pc, {r1, r2, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   127a8:	a400000d 	strge	r0, [r0], #-13
   127ac:	0043e20c 	subeq	lr, r3, ip, lsl #4
   127b0:	0f7e0600 	svceq	0x007e0600
   127b4:	00000603 	andeq	r0, r0, r3, lsl #12
   127b8:	46650cac 	strbtmi	r0, [r5], -ip, lsr #25
   127bc:	7f060000 	svcvc	0x00060000
   127c0:	000d690f 	andeq	r6, sp, pc, lsl #18
   127c4:	ae0cb000 	cdpge	0, 0, cr11, cr12, cr0, {0}
   127c8:	06000044 	streq	r0, [r0], -r4, asr #32
   127cc:	06030f80 	streq	r0, [r3], -r0, lsl #31
   127d0:	0ce00000 	stcleq	0, cr0, [r0]
   127d4:	000044fe 	strdeq	r4, [r0], -lr
   127d8:	030f8106 	movweq	r8, #61702	; 0xf106
   127dc:	e4000006 	str	r0, [r0], #-6
   127e0:	61726510 	cmnvs	r2, r0, lsl r5
   127e4:	0f820600 	svceq	0x00820600
   127e8:	00000603 	andeq	r0, r0, r3, lsl #12
   127ec:	44c60ce8 	strbmi	r0, [r6], #3304	; 0xce8
   127f0:	83060000 	movwhi	r0, #24576	; 0x6000
   127f4:	0006030f 	andeq	r0, r6, pc, lsl #6
   127f8:	4b0cec00 	blmi	34d800 <__ccfg+0x32d858>
   127fc:	06000043 	streq	r0, [r0], -r3, asr #32
   12800:	06030f84 	streq	r0, [r3], -r4, lsl #31
   12804:	0cf00000 	ldcleq	0, cr0, [r0]
   12808:	000044db 	ldrdeq	r4, [r0], -fp
   1280c:	030f8506 	movweq	r8, #62726	; 0xf506
   12810:	f4000006 	vst4.8	{d0-d3}, [r0], r6
   12814:	00432a0c 	subeq	r2, r3, ip, lsl #20
   12818:	0f860600 	svceq	0x00860600
   1281c:	00000603 	andeq	r0, r0, r3, lsl #12
   12820:	790600f8 	stmdbvc	r6, {r3, r4, r5, r6, r7}
   12824:	0900000c 	stmdbeq	r0, {r2, r3}
   12828:	00000603 	andeq	r0, r0, r3, lsl #12
   1282c:	00000d79 	andeq	r0, r0, r9, ror sp
   12830:	0000380a 	andeq	r3, r0, sl, lsl #16
   12834:	09000b00 	stmdbeq	r0, {r8, r9, fp}
   12838:	00000603 	andeq	r0, r0, r3, lsl #12
   1283c:	00000d89 	andeq	r0, r0, r9, lsl #27
   12840:	0000380a 	andeq	r3, r0, sl, lsl #16
   12844:	09000600 	stmdbeq	r0, {r9, sl}
   12848:	00000603 	andeq	r0, r0, r3, lsl #12
   1284c:	00000d99 	muleq	r0, r9, sp
   12850:	0000380a 	andeq	r3, r0, sl, lsl #16
   12854:	21000100 	mrscs	r0, (UNDEF: 16)
   12858:	00004301 	andeq	r4, r0, r1, lsl #6
   1285c:	641f9a06 	ldrvs	r9, [pc], #-2566	; 12864 <__exidx_end+0xcf4c>
   12860:	0f00000d 	svceq	0x0000000d
   12864:	00004507 	andeq	r4, r0, r7, lsl #10
   12868:	089c0610 	ldmeq	ip, {r4, r9, sl}
   1286c:	00000de7 	andeq	r0, r0, r7, ror #27
   12870:	0044be0c 	subeq	fp, r4, ip, lsl #28
   12874:	0f9e0600 	svceq	0x009e0600
   12878:	00000603 	andeq	r0, r0, r3, lsl #12
   1287c:	44340c00 	ldrtmi	r0, [r4], #-3072	; 0xfffff400
   12880:	9f060000 	svcls	0x00060000
   12884:	0006030f 	andeq	r0, r6, pc, lsl #6
   12888:	b70c0400 	strlt	r0, [ip, -r0, lsl #8]
   1288c:	06000044 	streq	r0, [r0], -r4, asr #32
   12890:	06030fa0 	streq	r0, [r3], -r0, lsr #31
   12894:	0c080000 	stceq	0, cr0, [r8], {-0}
   12898:	00004357 	andeq	r4, r0, r7, asr r3
   1289c:	030fa106 	movweq	sl, #61702	; 0xf106
   128a0:	0c000006 	stceq	0, cr0, [r0], {6}
   128a4:	0da50600 	stceq	6, cr0, [r5]
   128a8:	82210000 	eorhi	r0, r1, #0
   128ac:	06000043 	streq	r0, [r0], -r3, asr #32
   128b0:	0de723aa 	stcleq	3, cr2, [r7, #680]!	; 0x2a8
   128b4:	d3090000 	movwle	r0, #36864	; 0x9000
   128b8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   128bc:	0a00000e 	beq	128fc <__exidx_end+0xcfe4>
   128c0:	00000038 	andeq	r0, r0, r8, lsr r0
   128c4:	00380a06 	eorseq	r0, r8, r6, lsl #20
   128c8:	001f0000 	andseq	r0, pc, r0
   128cc:	00002515 	andeq	r2, r0, r5, lsl r5
   128d0:	000e2c00 	andeq	r2, lr, r0, lsl #24
   128d4:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   128d8:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   128dc:	16000005 	strne	r0, [r0], -r5
   128e0:	0000003f 	andeq	r0, r0, pc, lsr r0
   128e4:	000e2c16 	andeq	r2, lr, r6, lsl ip
   128e8:	04110000 	ldreq	r0, [r1], #-0
   128ec:	000009c6 	andeq	r0, r0, r6, asr #19
   128f0:	0e0e0411 	cfmvdlreq	mvd14, r0
   128f4:	25150000 	ldrcs	r0, [r5, #-0]
   128f8:	5b000000 	blpl	12900 <__exidx_end+0xcfe8>
   128fc:	1600000e 	strne	r0, [r0], -lr
   12900:	00000479 	andeq	r0, r0, r9, ror r4
   12904:	000e5b16 	andeq	r5, lr, r6, lsl fp
   12908:	06031600 	streq	r1, [r3], -r0, lsl #12
   1290c:	2c160000 	ldccs	0, cr0, [r6], {-0}
   12910:	16000000 	strne	r0, [r0], -r0
   12914:	00000e2c 	andeq	r0, r0, ip, lsr #28
   12918:	3f041100 	svccc	0x00041100
   1291c:	11000000 	mrsne	r0, (UNDEF: 0)
   12920:	000e3804 	andeq	r3, lr, r4, lsl #16
   12924:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   12928:	0e770000 	cdpeq	0, 7, cr0, cr7, cr0, {0}
   1292c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12930:	01000000 	mrseq	r0, (UNDEF: 0)
   12934:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   12938:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
   1293c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12940:	1f000000 	svcne	0x00000000
   12944:	16622200 	strbtne	r2, [r2], -r0, lsl #4
   12948:	1f0a0000 	svcne	0x000a0000
   1294c:	00011709 	andeq	r1, r1, r9, lsl #14
   12950:	00476c00 	subeq	r6, r7, r0, lsl #24
   12954:	0000aa00 	andeq	sl, r0, r0, lsl #20
   12958:	289c0100 	ldmcs	ip, {r8}
   1295c:	2300000f 	movwcs	r0, #15
   12960:	000042c1 	andeq	r4, r0, r1, asr #5
   12964:	191a3101 	ldmdbne	sl, {r0, r8, ip, sp}
   12968:	01000001 	tsteq	r0, r1
   1296c:	46602450 			; <UNDEFINED> instruction: 0x46602450
   12970:	32010000 	andcc	r0, r1, #0
   12974:	0009b419 	andeq	fp, r9, r9, lsl r4
   12978:	0055ae00 	subseq	sl, r5, r0, lsl #28
   1297c:	0055a200 	subseq	sl, r5, r0, lsl #4
   12980:	464b2400 	strbmi	r2, [fp], -r0, lsl #8
   12984:	33010000 	movwcc	r0, #4096	; 0x1000
   12988:	00002c09 	andeq	r2, r0, r9, lsl #24
   1298c:	00562900 	subseq	r2, r6, r0, lsl #18
   12990:	00560100 	subseq	r0, r6, r0, lsl #2
   12994:	73642500 	cmnvc	r4, #0, 10
   12998:	42010074 	andmi	r0, r1, #116	; 0x74
   1299c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   129a0:	00576800 	subseq	r6, r7, r0, lsl #16
   129a4:	00575800 	subseq	r5, r7, r0, lsl #16
   129a8:	72732500 	rsbsvc	r2, r3, #0, 10
   129ac:	43010063 	movwmi	r0, #4195	; 0x1063
   129b0:	0006030f 	andeq	r0, r6, pc, lsl #6
   129b4:	0057eb00 	subseq	lr, r7, r0, lsl #22
   129b8:	0057db00 	subseq	sp, r7, r0, lsl #22
   129bc:	42c62600 	sbcmi	r2, r6, #0, 12
   129c0:	44010000 	strmi	r0, [r1], #-0
   129c4:	000f2809 	andeq	r2, pc, r9, lsl #16
   129c8:	00587c00 	subseq	r7, r8, r0, lsl #24
   129cc:	00586400 	subseq	r6, r8, r0, lsl #8
   129d0:	454b2600 	strbmi	r2, [fp, #-1536]	; 0xfffffa00
   129d4:	45010000 	strmi	r0, [r1, #-0]
   129d8:	000f2e0f 	andeq	r2, pc, pc, lsl #28
   129dc:	00597300 	subseq	r7, r9, r0, lsl #6
   129e0:	00595b00 	subseq	r5, r9, r0, lsl #22
   129e4:	04110000 	ldreq	r0, [r1], #-0
   129e8:	00000083 	andeq	r0, r0, r3, lsl #1
   129ec:	008a0411 	addeq	r0, sl, r1, lsl r4
   129f0:	76000000 	strvc	r0, [r0], -r0
   129f4:	04000009 	streq	r0, [r0], #-9
   129f8:	0043c000 	subeq	ip, r3, r0
   129fc:	57010400 	strpl	r0, [r1, -r0, lsl #8]
   12a00:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   12a04:	0000466f 	andeq	r4, r0, pc, ror #12
   12a08:	000046a4 	andeq	r4, r0, r4, lsr #13
   12a0c:	00004818 	andeq	r4, r0, r8, lsl r8
   12a10:	0000004c 	andeq	r0, r0, ip, asr #32
   12a14:	00009017 	andeq	r9, r0, r7, lsl r0
   12a18:	3e070402 	cdpcc	4, 0, cr0, cr7, cr2, {0}
   12a1c:	03000004 	movweq	r0, #4
   12a20:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   12a24:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
   12a28:	00080405 	andeq	r0, r8, r5, lsl #8
   12a2c:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   12a30:	00004428 	andeq	r4, r0, r8, lsr #8
   12a34:	000be104 	andeq	lr, fp, r4, lsl #2
   12a38:	01650200 	cmneq	r5, r0, lsl #4
   12a3c:	00002517 	andeq	r2, r0, r7, lsl r5
   12a40:	06010200 	streq	r0, [r1], -r0, lsl #4
   12a44:	00000c69 	andeq	r0, r0, r9, ror #24
   12a48:	67080102 	strvs	r0, [r8, -r2, lsl #2]
   12a4c:	0200000c 	andeq	r0, r0, #12
   12a50:	0a770502 	beq	1dd3e60 <__ccfg+0x1db3eb8>
   12a54:	02020000 	andeq	r0, r2, #0
   12a58:	000d6407 	andeq	r6, sp, r7, lsl #8
   12a5c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   12a60:	00000809 	andeq	r0, r0, r9, lsl #16
   12a64:	39070402 	stmdbcc	r7, {r1, sl}
   12a68:	02000004 	andeq	r0, r0, #4
   12a6c:	04340708 	ldrteq	r0, [r4], #-1800	; 0xfffff8f8
   12a70:	47050000 	strmi	r0, [r5, -r0]
   12a74:	0300000e 	movweq	r0, #14
   12a78:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
   12a7c:	07050000 	streq	r0, [r5, -r0]
   12a80:	03000003 	movweq	r0, #3
   12a84:	006a0e74 	rsbeq	r0, sl, r4, ror lr
   12a88:	04060000 	streq	r0, [r6], #-0
   12a8c:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
   12a90:	07000000 	streq	r0, [r0, -r0]
   12a94:	00000778 	andeq	r0, r0, r8, ror r7
   12a98:	410ca703 	tstmi	ip, r3, lsl #14
   12a9c:	07000000 	streq	r0, [r0, -r0]
   12aa0:	00000ac0 	andeq	r0, r0, r0, asr #21
   12aa4:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
   12aa8:	00000000 	andeq	r0, r0, r0
   12aac:	00005508 	andeq	r5, r0, r8, lsl #10
   12ab0:	0000c900 	andeq	ip, r0, r0, lsl #18
   12ab4:	00250900 	eoreq	r0, r5, r0, lsl #18
   12ab8:	00030000 	andeq	r0, r3, r0
   12abc:	a203080a 	andge	r0, r3, #655360	; 0xa0000
   12ac0:	0000ed09 	andeq	lr, r0, r9, lsl #26
   12ac4:	03a10b00 			; <UNDEFINED> instruction: 0x03a10b00
   12ac8:	a4030000 	strge	r0, [r3], #-0
   12acc:	00002c07 	andeq	r2, r0, r7, lsl #24
   12ad0:	0d0b0000 	stceq	0, cr0, [fp, #-0]
   12ad4:	03000006 	movweq	r0, #6
   12ad8:	009705a9 	addseq	r0, r7, r9, lsr #11
   12adc:	00040000 	andeq	r0, r4, r0
   12ae0:	0008c105 	andeq	ip, r8, r5, lsl #2
   12ae4:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   12ae8:	000000c9 	andeq	r0, r0, r9, asr #1
   12aec:	4e05040c 	cdpmi	4, 0, cr0, cr5, cr12, {0}
   12af0:	04000008 	streq	r0, [r0], #-8
   12af4:	00711916 	rsbseq	r1, r1, r6, lsl r9
   12af8:	5b050000 	blpl	152b00 <__ccfg+0x132b58>
   12afc:	05000002 	streq	r0, [r0, #-2]
   12b00:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
   12b04:	36050000 	strcc	r0, [r5], -r0
   12b08:	04000007 	streq	r0, [r0], #-7
   12b0c:	01071b23 	tsteq	r7, r3, lsr #22
   12b10:	3a0d0000 	bcc	352b18 <__ccfg+0x332b70>
   12b14:	18000003 	stmdane	r0, {r0, r1}
   12b18:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
   12b1c:	0b000001 	bleq	12b28 <__exidx_end+0xd210>
   12b20:	00000ec2 	andeq	r0, r0, r2, asr #29
   12b24:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
   12b28:	00000001 	andeq	r0, r0, r1
   12b2c:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   12b30:	2c073704 	stccs	7, cr3, [r7], {4}
   12b34:	04000000 	streq	r0, [r0], #-0
   12b38:	000b6e0b 	andeq	r6, fp, fp, lsl #28
   12b3c:	0b370400 	bleq	dd3b44 <__ccfg+0xdb3b9c>
   12b40:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b44:	43f30b08 	mvnsmi	r0, #8, 22	; 0x2000
   12b48:	37040000 	strcc	r0, [r4, -r0]
   12b4c:	00002c14 	andeq	r2, r0, r4, lsl ip
   12b50:	680b0c00 	stmdavs	fp, {sl, fp}
   12b54:	04000004 	streq	r0, [r0], #-4
   12b58:	002c1b37 	eoreq	r1, ip, r7, lsr fp
   12b5c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   12b60:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   12b64:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
   12b68:	00140000 	andseq	r0, r4, r0
   12b6c:	011f040f 	tsteq	pc, pc, lsl #8
   12b70:	fb080000 	blx	212b7a <__ccfg+0x1f2bd2>
   12b74:	8f000000 	svchi	0x00000000
   12b78:	09000001 	stmdbeq	r0, {r0}
   12b7c:	00000025 	andeq	r0, r0, r5, lsr #32
   12b80:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
   12b84:	2400000b 	strcs	r0, [r0], #-11
   12b88:	12083c04 	andne	r3, r8, #4, 24	; 0x400
   12b8c:	0b000002 	bleq	12b9c <__exidx_end+0xd284>
   12b90:	00000578 	andeq	r0, r0, r8, ror r5
   12b94:	2c093e04 	stccs	14, cr3, [r9], {4}
   12b98:	00000000 	andeq	r0, r0, r0
   12b9c:	0003ca0b 	andeq	ip, r3, fp, lsl #20
   12ba0:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   12ba4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ba8:	036b0b04 	cmneq	fp, #4, 22	; 0x1000
   12bac:	40040000 	andmi	r0, r4, r0
   12bb0:	00002c09 	andeq	r2, r0, r9, lsl #24
   12bb4:	800b0800 	andhi	r0, fp, r0, lsl #16
   12bb8:	04000006 	streq	r0, [r0], #-6
   12bbc:	002c0941 	eoreq	r0, ip, r1, asr #18
   12bc0:	0b0c0000 	bleq	312bc8 <__ccfg+0x2f2c20>
   12bc4:	00000960 	andeq	r0, r0, r0, ror #18
   12bc8:	2c094204 	sfmcs	f4, 4, [r9], {4}
   12bcc:	10000000 	andne	r0, r0, r0
   12bd0:	000ada0b 	andeq	sp, sl, fp, lsl #20
   12bd4:	09430400 	stmdbeq	r3, {sl}^
   12bd8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12bdc:	034e0b14 	movteq	r0, #60180	; 0xeb14
   12be0:	44040000 	strmi	r0, [r4], #-0
   12be4:	00002c09 	andeq	r2, r0, r9, lsl #24
   12be8:	810b1800 	tsthi	fp, r0, lsl #16
   12bec:	04000005 	streq	r0, [r0], #-5
   12bf0:	002c0945 	eoreq	r0, ip, r5, asr #18
   12bf4:	0b1c0000 	bleq	712bfc <__ccfg+0x6f2c54>
   12bf8:	000008fc 	strdeq	r0, [r0], -ip
   12bfc:	2c094604 	stccs	6, cr4, [r9], {4}
   12c00:	20000000 	andcs	r0, r0, r0
   12c04:	00321000 	eorseq	r1, r2, r0
   12c08:	01080000 	mrseq	r0, (UNDEF: 8)
   12c0c:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
   12c10:	0b000002 	bleq	12c20 <__exidx_end+0xd308>
   12c14:	00000d2b 	andeq	r0, r0, fp, lsr #26
   12c18:	570a5004 	strpl	r5, [sl, -r4]
   12c1c:	00000002 	andeq	r0, r0, r2
   12c20:	000c230b 	andeq	r2, ip, fp, lsl #6
   12c24:	09510400 	ldmdbeq	r1, {sl}^
   12c28:	00000257 	andeq	r0, r0, r7, asr r2
   12c2c:	0dc41180 	stfeqe	f1, [r4, #512]	; 0x200
   12c30:	53040000 	movwpl	r0, #16384	; 0x4000
   12c34:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   12c38:	11010000 	mrsne	r0, (UNDEF: 1)
   12c3c:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
   12c40:	fb0a5604 	blx	2a845a <__ccfg+0x2884b2>
   12c44:	04000000 	streq	r0, [r0], #-0
   12c48:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
   12c4c:	67000000 	strvs	r0, [r0, -r0]
   12c50:	09000002 	stmdbeq	r0, {r1}
   12c54:	00000025 	andeq	r0, r0, r5, lsr #32
   12c58:	2210001f 	andscs	r0, r0, #31
   12c5c:	9000000a 	andls	r0, r0, sl
   12c60:	08620401 	stmdaeq	r2!, {r0, sl}^
   12c64:	000002aa 	andeq	r0, r0, sl, lsr #5
   12c68:	000ec20b 	andeq	ip, lr, fp, lsl #4
   12c6c:	12630400 	rsbne	r0, r3, #0, 8
   12c70:	000002aa 	andeq	r0, r0, sl, lsr #5
   12c74:	05900b00 	ldreq	r0, [r0, #2816]	; 0xb00
   12c78:	64040000 	strvs	r0, [r4], #-0
   12c7c:	00002c06 	andeq	r2, r0, r6, lsl #24
   12c80:	0f0b0400 	svceq	0x000b0400
   12c84:	04000003 	streq	r0, [r0], #-3
   12c88:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
   12c8c:	0b080000 	bleq	212c94 <__ccfg+0x1f2cec>
   12c90:	00000032 	andeq	r0, r0, r2, lsr r0
   12c94:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
   12c98:	88000002 	stmdahi	r0, {r1}
   12c9c:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
   12ca0:	08000002 	stmdaeq	r0, {r1}
   12ca4:	000002c0 	andeq	r0, r0, r0, asr #5
   12ca8:	000002c0 	andeq	r0, r0, r0, asr #5
   12cac:	00002509 	andeq	r2, r0, r9, lsl #10
   12cb0:	0f001f00 	svceq	0x00001f00
   12cb4:	0002c604 	andeq	ip, r2, r4, lsl #12
   12cb8:	c30d1200 	movwgt	r1, #53760	; 0xd200
   12cbc:	0800000c 	stmdaeq	r0, {r2, r3}
   12cc0:	ef087a04 	svc	0x00087a04
   12cc4:	0b000002 	bleq	12cd4 <__exidx_end+0xd3bc>
   12cc8:	00000cd5 	ldrdeq	r0, [r0], -r5
   12ccc:	ef117b04 	svc	0x00117b04
   12cd0:	00000002 	andeq	r0, r0, r2
   12cd4:	001d9e0b 	andseq	r9, sp, fp, lsl #28
   12cd8:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   12cdc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ce0:	040f0004 	streq	r0, [pc], #-4	; 12ce8 <__exidx_end+0xd3d0>
   12ce4:	00000055 	andeq	r0, r0, r5, asr r0
   12ce8:	0004600d 	andeq	r6, r4, sp
   12cec:	ba046800 	blt	12ccf4 <__ccfg+0x10cd4c>
   12cf0:	00043808 	andeq	r3, r4, r8, lsl #16
   12cf4:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   12cf8:	12bb0400 	adcsne	r0, fp, #0, 8
   12cfc:	000002ef 	andeq	r0, r0, pc, ror #5
   12d00:	725f0e00 	subsvc	r0, pc, #0, 28
   12d04:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   12d08:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d0c:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   12d10:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   12d14:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d18:	01bb0b08 			; <UNDEFINED> instruction: 0x01bb0b08
   12d1c:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   12d20:	00005c09 	andeq	r5, r0, r9, lsl #24
   12d24:	650b0c00 	strvs	r0, [fp, #-3072]	; 0xfffff400
   12d28:	04000008 	streq	r0, [r0], #-8
   12d2c:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
   12d30:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   12d34:	0066625f 	rsbeq	r6, r6, pc, asr r2
   12d38:	c711c004 	ldrgt	ip, [r1, -r4]
   12d3c:	10000002 	andne	r0, r0, r2
   12d40:	0001b20b 	andeq	fp, r1, fp, lsl #4
   12d44:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   12d48:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d4c:	03140b18 	tsteq	r4, #24, 22	; 0x6000
   12d50:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   12d54:	0000f90a 	andeq	pc, r0, sl, lsl #18
   12d58:	2d0b1c00 	stccs	12, cr1, [fp, #-0]
   12d5c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   12d60:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
   12d64:	0b200000 	bleq	812d6c <__ccfg+0x7f2dc4>
   12d68:	00001cf4 	strdeq	r1, [r0], -r4
   12d6c:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
   12d70:	24000005 	strcs	r0, [r0], #-5
   12d74:	000ee20b 	andeq	lr, lr, fp, lsl #4
   12d78:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 12d80 <__exidx_end+0xd468>
   12d7c:	0000060a 	andeq	r0, r0, sl, lsl #12
   12d80:	1ce20b28 	vstmiane	r2!, {d16-<overflow reg d35>}
   12d84:	d0040000 	andle	r0, r4, r0
   12d88:	00062409 	andeq	r2, r6, r9, lsl #8
   12d8c:	5f0e2c00 	svcpl	0x000e2c00
   12d90:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   12d94:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
   12d98:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   12d9c:	0070755f 	rsbseq	r7, r0, pc, asr r5
   12da0:	ef12d404 	svc	0x0012d404
   12da4:	38000002 	stmdacc	r0, {r1}
   12da8:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   12dac:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   12db0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12db4:	0f190b3c 	svceq	0x00190b3c
   12db8:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   12dbc:	00062a11 	andeq	r2, r6, r1, lsl sl
   12dc0:	620b4000 	andvs	r4, fp, #0
   12dc4:	0400000e 	streq	r0, [r0], #-14
   12dc8:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
   12dcc:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   12dd0:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   12dd4:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
   12dd8:	44000002 	strmi	r0, [r0], #-2
   12ddc:	000b800b 	andeq	r8, fp, fp
   12de0:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   12de4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12de8:	04940b4c 	ldreq	r0, [r4], #2892	; 0xb4c
   12dec:	e0040000 	and	r0, r4, r0
   12df0:	00007f0a 	andeq	r7, r0, sl, lsl #30
   12df4:	510b5000 	mrspl	r5, (UNDEF: 11)
   12df8:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   12dfc:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
   12e00:	0b540000 	bleq	1512e08 <__ccfg+0x14f2e60>
   12e04:	00000ba6 	andeq	r0, r0, r6, lsr #23
   12e08:	130ce704 	movwne	lr, #50948	; 0xc704
   12e0c:	58000001 	stmdapl	r0, {r0}
   12e10:	000a2a0b 	andeq	r2, sl, fp, lsl #20
   12e14:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   12e18:	000000ed 	andeq	r0, r0, sp, ror #1
   12e1c:	0e950b5c 			; <UNDEFINED> instruction: 0x0e950b5c
   12e20:	ea040000 	b	112e28 <__ccfg+0xf2e80>
   12e24:	00002c09 	andeq	r2, r0, r9, lsl #24
   12e28:	13006400 	movwne	r6, #1024	; 0x400
   12e2c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e30:	00000456 	andeq	r0, r0, r6, asr r4
   12e34:	00045614 	andeq	r5, r4, r4, lsl r6
   12e38:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12e3c:	aa140000 	bge	512e44 <__ccfg+0x4f2e9c>
   12e40:	14000005 	strne	r0, [r0], #-5
   12e44:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e48:	61040f00 	tstvs	r4, r0, lsl #30
   12e4c:	15000004 	strne	r0, [r0, #-4]
   12e50:	00000456 	andeq	r0, r0, r6, asr r4
   12e54:	000d5d16 	andeq	r5, sp, r6, lsl sp
   12e58:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   12e5c:	aa080265 	bge	2137f8 <__ccfg+0x1f3850>
   12e60:	17000005 	strne	r0, [r0, -r5]
   12e64:	00000910 	andeq	r0, r0, r0, lsl r9
   12e68:	07026704 	streq	r6, [r2, -r4, lsl #14]
   12e6c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e70:	07ee1700 	strbeq	r1, [lr, r0, lsl #14]!
   12e74:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12e78:	06960b02 	ldreq	r0, [r6], r2, lsl #22
   12e7c:	17040000 	strne	r0, [r4, -r0]
   12e80:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12e84:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   12e88:	00000696 	muleq	r0, r6, r6
   12e8c:	0f081708 	svceq	0x00081708
   12e90:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12e94:	06961e02 	ldreq	r1, [r6], r2, lsl #28
   12e98:	170c0000 	strne	r0, [ip, -r0]
   12e9c:	0000058b 	andeq	r0, r0, fp, lsl #11
   12ea0:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   12ea4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ea8:	04e01710 	strbteq	r1, [r0], #1808	; 0x710
   12eac:	6f040000 	svcvs	0x00040000
   12eb0:	08960802 	ldmeq	r6, {r1, fp}
   12eb4:	17140000 	ldrne	r0, [r4, -r0]
   12eb8:	00000e75 	andeq	r0, r0, r5, ror lr
   12ebc:	07027204 	streq	r7, [r2, -r4, lsl #4]
   12ec0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ec4:	429f1730 	addsmi	r1, pc, #48, 14	; 0xc00000
   12ec8:	73040000 	movwvc	r0, #16384	; 0x4000
   12ecc:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
   12ed0:	17340000 	ldrne	r0, [r4, -r0]!
   12ed4:	00000796 	muleq	r0, r6, r7
   12ed8:	07027504 	streq	r7, [r2, -r4, lsl #10]
   12edc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ee0:	08901738 	ldmeq	r0, {r3, r4, r5, r8, r9, sl, ip}
   12ee4:	77040000 	strvc	r0, [r4, -r0]
   12ee8:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
   12eec:	173c0000 	ldrne	r0, [ip, -r0]!
   12ef0:	00000363 	andeq	r0, r0, r3, ror #6
   12ef4:	13027a04 	movwne	r7, #10756	; 0x2a04
   12ef8:	00000179 	andeq	r0, r0, r9, ror r1
   12efc:	041e1740 	ldreq	r1, [lr], #-1856	; 0xfffff8c0
   12f00:	7b040000 	blvc	112f08 <__ccfg+0xf2f60>
   12f04:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12f08:	17440000 	strbne	r0, [r4, -r0]
   12f0c:	00000615 	andeq	r0, r0, r5, lsl r6
   12f10:	13027c04 	movwne	r7, #11268	; 0x2c04
   12f14:	00000179 	andeq	r0, r0, r9, ror r1
   12f18:	082b1748 	stmdaeq	fp!, {r3, r6, r8, r9, sl, ip}
   12f1c:	7d040000 	stcvc	0, cr0, [r4, #-0]
   12f20:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
   12f24:	174c0000 	strbne	r0, [ip, -r0]
   12f28:	00000b66 	andeq	r0, r0, r6, ror #22
   12f2c:	07028004 	streq	r8, [r2, -r4]
   12f30:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f34:	0c5f1750 	mrrceq	7, 5, r1, pc, cr0	; <UNPREDICTABLE>
   12f38:	81040000 	mrshi	r0, (UNDEF: 4)
   12f3c:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
   12f40:	17540000 	ldrbne	r0, [r4, -r0]
   12f44:	00000c79 	andeq	r0, r0, r9, ror ip
   12f48:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   12f4c:	00000871 	andeq	r0, r0, r1, ror r8
   12f50:	0a221858 	beq	8990b8 <__ccfg+0x879110>
   12f54:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   12f58:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
   12f5c:	01480000 	mrseq	r0, (UNDEF: 72)
   12f60:	0006ba18 	andeq	fp, r6, r8, lsl sl
   12f64:	02a90400 	adceq	r0, r9, #0, 8
   12f68:	00026712 	andeq	r6, r2, r2, lsl r7
   12f6c:	18014c00 	stmdane	r1, {sl, fp, lr}
   12f70:	000006a1 	andeq	r0, r0, r1, lsr #13
   12f74:	0c02ad04 	stceq	13, cr10, [r2], {4}
   12f78:	000008d3 	ldrdeq	r0, [r0], -r3
   12f7c:	e11802dc 			; <UNDEFINED> instruction: 0xe11802dc
   12f80:	0400000c 	streq	r0, [r0], #-12
   12f84:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
   12f88:	e0000006 	and	r0, r0, r6
   12f8c:	0ab21802 	beq	fec98f9c <_estack+0xdec93f9c>
   12f90:	b4040000 	strlt	r0, [r4], #-0
   12f94:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
   12f98:	02ec0000 	rsceq	r0, ip, #0
   12f9c:	b0040f00 	andlt	r0, r4, r0, lsl #30
   12fa0:	02000005 	andeq	r0, r0, #5
   12fa4:	0c700801 	ldcleq	8, cr0, [r0], #-4
   12fa8:	b0150000 	andslt	r0, r5, r0
   12fac:	0f000005 	svceq	0x00000005
   12fb0:	00043804 	andeq	r3, r4, r4, lsl #16
   12fb4:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12fb8:	05e00000 	strbeq	r0, [r0, #0]!
   12fbc:	56140000 	ldrpl	r0, [r4], -r0
   12fc0:	14000004 	strne	r0, [r0], #-4
   12fc4:	000000f9 	strdeq	r0, [r0], -r9
   12fc8:	0005e014 	andeq	lr, r5, r4, lsl r0
   12fcc:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12fd0:	0f000000 	svceq	0x00000000
   12fd4:	0005b704 	andeq	fp, r5, r4, lsl #14
   12fd8:	c2040f00 	andgt	r0, r4, #0, 30
   12fdc:	13000005 	movwne	r0, #5
   12fe0:	0000008b 	andeq	r0, r0, fp, lsl #1
   12fe4:	0000060a 	andeq	r0, r0, sl, lsl #12
   12fe8:	00045614 	andeq	r5, r4, r4, lsl r6
   12fec:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12ff0:	8b140000 	blhi	512ff8 <__ccfg+0x4f3050>
   12ff4:	14000000 	strne	r0, [r0], #-0
   12ff8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ffc:	ec040f00 	stc	15, cr0, [r4], {-0}
   13000:	13000005 	movwne	r0, #5
   13004:	0000002c 	andeq	r0, r0, ip, lsr #32
   13008:	00000624 	andeq	r0, r0, r4, lsr #12
   1300c:	00045614 	andeq	r5, r4, r4, lsl r6
   13010:	00f91400 	rscseq	r1, r9, r0, lsl #8
   13014:	0f000000 	svceq	0x00000000
   13018:	00061004 	andeq	r1, r6, r4
   1301c:	00550800 	subseq	r0, r5, r0, lsl #16
   13020:	063a0000 	ldrteq	r0, [sl], -r0
   13024:	25090000 	strcs	r0, [r9, #-0]
   13028:	02000000 	andeq	r0, r0, #0
   1302c:	00550800 	subseq	r0, r5, r0, lsl #16
   13030:	064a0000 	strbeq	r0, [sl], -r0
   13034:	25090000 	strcs	r0, [r9, #-0]
   13038:	00000000 	andeq	r0, r0, r0
   1303c:	04810400 	streq	r0, [r1], #1024	; 0x400
   13040:	24040000 	strcs	r0, [r4], #-0
   13044:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
   13048:	db190000 	blle	653050 <__ccfg+0x6330a8>
   1304c:	0c00000c 	stceq	0, cr0, [r0], {12}
   13050:	08012804 	stmdaeq	r1, {r2, fp, sp}
   13054:	00000690 	muleq	r0, r0, r6
   13058:	000ec217 	andeq	ip, lr, r7, lsl r2
   1305c:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   13060:	00069011 	andeq	r9, r6, r1, lsl r0
   13064:	da170000 	ble	5d306c <__ccfg+0x5b30c4>
   13068:	0400000b 	streq	r0, [r0], #-11
   1306c:	2c07012b 	stfcss	f0, [r7], {43}	; 0x2b
   13070:	04000000 	streq	r0, [r0], #-0
   13074:	00077e17 	andeq	r7, r7, r7, lsl lr
   13078:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   1307c:	0006960b 	andeq	r9, r6, fp, lsl #12
   13080:	0f000800 	svceq	0x00000800
   13084:	00065704 	andeq	r5, r6, r4, lsl #14
   13088:	4a040f00 	bmi	116c90 <__ccfg+0xf6ce8>
   1308c:	19000006 	stmdbne	r0, {r1, r2}
   13090:	000003ed 	andeq	r0, r0, sp, ror #7
   13094:	0144040e 	cmpeq	r4, lr, lsl #8
   13098:	0006d508 	andeq	sp, r6, r8, lsl #10
   1309c:	16491700 	strbne	r1, [r9], -r0, lsl #14
   130a0:	45040000 	strmi	r0, [r4, #-0]
   130a4:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   130a8:	17000000 	strne	r0, [r0, -r0]
   130ac:	0000083d 	andeq	r0, r0, sp, lsr r8
   130b0:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   130b4:	000006d5 	ldrdeq	r0, [r0], -r5
   130b8:	14fb1706 	ldrbtne	r1, [fp], #1798	; 0x706
   130bc:	47040000 	strmi	r0, [r4, -r0]
   130c0:	00631201 	rsbeq	r1, r3, r1, lsl #4
   130c4:	000c0000 	andeq	r0, ip, r0
   130c8:	00006308 	andeq	r6, r0, r8, lsl #6
   130cc:	0006e500 	andeq	lr, r6, r0, lsl #10
   130d0:	00250900 	eoreq	r0, r5, r0, lsl #18
   130d4:	00020000 	andeq	r0, r2, r0
   130d8:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
   130dc:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
   130e0:	68170000 	ldmdavs	r7, {}	; <UNPREDICTABLE>
   130e4:	0400000e 	streq	r0, [r0], #-14
   130e8:	25180287 	ldrcs	r0, [r8, #-647]	; 0xfffffd79
   130ec:	00000000 	andeq	r0, r0, r0
   130f0:	000ce917 	andeq	lr, ip, r7, lsl r9
   130f4:	02880400 	addeq	r0, r8, #0, 8
   130f8:	0005aa12 	andeq	sl, r5, r2, lsl sl
   130fc:	4b170400 	blmi	5d4104 <__ccfg+0x5b415c>
   13100:	04000004 	streq	r0, [r0], #-4
   13104:	fa100289 	blx	413b30 <__ccfg+0x3f3b88>
   13108:	08000007 	stmdaeq	r0, {r0, r1, r2}
   1310c:	000b4f17 	andeq	r4, fp, r7, lsl pc
   13110:	028a0400 	addeq	r0, sl, #0, 8
   13114:	00018f17 	andeq	r8, r1, r7, lsl pc
   13118:	f5172400 			; <UNDEFINED> instruction: 0xf5172400
   1311c:	04000007 	streq	r0, [r0], #-7
   13120:	2c0f028b 	sfmcs	f0, 4, [pc], {139}	; 0x8b
   13124:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   13128:	000ebd17 	andeq	fp, lr, r7, lsl sp
   1312c:	028c0400 	addeq	r0, ip, #0, 8
   13130:	0000782c 	andeq	r7, r0, ip, lsr #16
   13134:	76175000 	ldrvc	r5, [r7], -r0
   13138:	04000000 	streq	r0, [r0], #-0
   1313c:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
   13140:	58000006 	stmdapl	r0, {r1, r2}
   13144:	00064517 	andeq	r4, r6, r7, lsl r5
   13148:	028e0400 	addeq	r0, lr, #0, 8
   1314c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13150:	f6176800 			; <UNDEFINED> instruction: 0xf6176800
   13154:	0400000c 	streq	r0, [r0], #-12
   13158:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
   1315c:	70000000 	andvc	r0, r0, r0
   13160:	00006817 	andeq	r6, r0, r7, lsl r8
   13164:	02900400 	addseq	r0, r0, #0, 8
   13168:	0000ed16 	andeq	lr, r0, r6, lsl sp
   1316c:	76177800 	ldrvc	r7, [r7], -r0, lsl #16
   13170:	0400000b 	streq	r0, [r0], #-11
   13174:	0a100291 	beq	413bc0 <__ccfg+0x3f3c18>
   13178:	80000008 	andhi	r0, r0, r8
   1317c:	00042817 	andeq	r2, r4, r7, lsl r8
   13180:	02920400 	addseq	r0, r2, #0, 8
   13184:	00081a10 	andeq	r1, r8, r0, lsl sl
   13188:	99178800 	ldmdbls	r7, {fp, pc}
   1318c:	0400000c 	streq	r0, [r0], #-12
   13190:	2c0f0293 	sfmcs	f0, 4, [pc], {147}	; 0x93
   13194:	a0000000 	andge	r0, r0, r0
   13198:	0002b417 	andeq	fp, r2, r7, lsl r4
   1319c:	02940400 	addseq	r0, r4, #0, 8
   131a0:	0000ed16 	andeq	lr, r0, r6, lsl sp
   131a4:	ab17a400 	blge	5fc1ac <__ccfg+0x5dc204>
   131a8:	04000006 	streq	r0, [r0], #-6
   131ac:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
   131b0:	ac000000 	stcge	0, cr0, [r0], {-0}
   131b4:	0005c717 	andeq	ip, r5, r7, lsl r7
   131b8:	02960400 	addseq	r0, r6, #0, 8
   131bc:	0000ed16 	andeq	lr, r0, r6, lsl sp
   131c0:	5617b400 	ldrpl	fp, [r7], -r0, lsl #8
   131c4:	04000008 	streq	r0, [r0], #-8
   131c8:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
   131cc:	bc000000 	stclt	0, cr0, [r0], {-0}
   131d0:	00063417 	andeq	r3, r6, r7, lsl r4
   131d4:	02980400 	addseq	r0, r8, #0, 8
   131d8:	0000ed16 	andeq	lr, r0, r6, lsl sp
   131dc:	0e17c400 	cfmulseq	mvf12, mvf7, mvf0
   131e0:	04000009 	streq	r0, [r0], #-9
   131e4:	2c080299 	sfmcs	f0, 4, [r8], {153}	; 0x99
   131e8:	cc000000 	stcgt	0, cr0, [r0], {-0}
   131ec:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   131f0:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   131f4:	25090000 	strcs	r0, [r9, #-0]
   131f8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   131fc:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   13200:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   13204:	25090000 	strcs	r0, [r9, #-0]
   13208:	07000000 	streq	r0, [r0, -r0]
   1320c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   13210:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
   13214:	25090000 	strcs	r0, [r9, #-0]
   13218:	17000000 	strne	r0, [r0, -r0]
   1321c:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
   13220:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
   13224:	17000008 	strne	r0, [r0, -r8]
   13228:	000003d3 	ldrdeq	r0, [r0], -r3
   1322c:	1b02a104 	blne	bb644 <__ccfg+0x9b69c>
   13230:	00000851 	andeq	r0, r0, r1, asr r8
   13234:	0f101700 	svceq	0x00101700
   13238:	a2040000 	andge	r0, r4, #0
   1323c:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
   13240:	00780000 	rsbseq	r0, r8, r0
   13244:	0002ef08 	andeq	lr, r2, r8, lsl #30
   13248:	00086100 	andeq	r6, r8, r0, lsl #2
   1324c:	00250900 	eoreq	r0, r5, r0, lsl #18
   13250:	001d0000 	andseq	r0, sp, r0
   13254:	00002508 	andeq	r2, r0, r8, lsl #10
   13258:	00087100 	andeq	r7, r8, r0, lsl #2
   1325c:	00250900 	eoreq	r0, r5, r0, lsl #18
   13260:	001d0000 	andseq	r0, sp, r0
   13264:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
   13268:	08960302 	ldmeq	r6, {r1, r8, r9}
   1326c:	5d1c0000 	ldcpl	0, cr0, [ip, #-0]
   13270:	0400000d 	streq	r0, [r0], #-13
   13274:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
   13278:	1c000006 	stcne	0, cr0, [r0], {6}
   1327c:	00000b5e 	andeq	r0, r0, lr, asr fp
   13280:	0b02a304 	bleq	bbe98 <__ccfg+0x9bef0>
   13284:	0000082a 	andeq	r0, r0, sl, lsr #16
   13288:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   1328c:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
   13290:	25090000 	strcs	r0, [r9, #-0]
   13294:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13298:	0ec81d00 	cdpeq	13, 12, cr1, cr8, cr0, {0}
   1329c:	040f0000 	streq	r0, [pc], #-0	; 132a4 <__exidx_end+0xd98c>
   132a0:	000008a6 	andeq	r0, r0, r6, lsr #17
   132a4:	0008bc1e 	andeq	fp, r8, lr, lsl ip
   132a8:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   132ac:	0f000000 	svceq	0x00000000
   132b0:	0008b104 	andeq	fp, r8, r4, lsl #2
   132b4:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
   132b8:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   132bc:	000008d3 	ldrdeq	r0, [r0], -r3
   132c0:	00002c14 	andeq	r2, r0, r4, lsl ip
   132c4:	040f0000 	streq	r0, [pc], #-0	; 132cc <__exidx_end+0xd9b4>
   132c8:	000008d9 	ldrdeq	r0, [r0], -r9
   132cc:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
   132d0:	4a080000 	bmi	2132d8 <__ccfg+0x1f3330>
   132d4:	ef000006 	svc	0x00000006
   132d8:	09000008 	stmdbeq	r0, {r3}
   132dc:	00000025 	andeq	r0, r0, r5, lsr #32
   132e0:	ce1f0002 	cdpgt	0, 1, cr0, cr15, cr2, {0}
   132e4:	0400000a 	streq	r0, [r0], #-10
   132e8:	56170333 			; <UNDEFINED> instruction: 0x56170333
   132ec:	1f000004 	svcne	0x00000004
   132f0:	00000ac7 	andeq	r0, r0, r7, asr #21
   132f4:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   132f8:	0000045c 	andeq	r0, r0, ip, asr r4
   132fc:	00444120 	subeq	r4, r4, r0, lsr #2
   13300:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
   13304:	000005aa 	andeq	r0, r0, sl, lsr #11
   13308:	000e7021 	andeq	r7, lr, r1, lsr #32
   1330c:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
   13310:	0000002c 	andeq	r0, r0, ip, lsr #32
   13314:	0000482c 	andeq	r4, r0, ip, lsr #16
   13318:	00000038 	andeq	r0, r0, r8, lsr r0
   1331c:	09449c01 	stmdbeq	r4, {r0, sl, fp, ip, pc}^
   13320:	45220000 	strmi	r0, [r2, #-0]!
   13324:	01000047 	tsteq	r0, r7, asr #32
   13328:	04561249 	ldrbeq	r1, [r6], #-585	; 0xfffffdb7
   1332c:	5a290000 	bpl	a53334 <__ccfg+0xa3338c>
   13330:	5a230000 	bpl	8d3338 <__ccfg+0x8b3390>
   13334:	23000000 	movwcs	r0, #0
   13338:	0000469e 	muleq	r0, lr, r6
   1333c:	18069f06 	stmdane	r6, {r1, r2, r8, r9, sl, fp, ip, pc}
   13340:	14000048 	strne	r0, [r0], #-72	; 0xffffffb8
   13344:	01000000 	mrseq	r0, (UNDEF: 0)
   13348:	164a249c 			; <UNDEFINED> instruction: 0x164a249c
   1334c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
   13350:	00002515 	andeq	r2, r0, r5, lsl r5
   13354:	22500100 	subscs	r0, r0, #0, 2
   13358:	00004745 	andeq	r4, r0, r5, asr #14
   1335c:	56124001 	ldrpl	r4, [r2], -r1
   13360:	5a000004 	bpl	13378 <__exidx_end+0xda60>
   13364:	5600005a 			; <UNDEFINED> instruction: 0x5600005a
   13368:	0000005a 	andeq	r0, r0, sl, asr r0
   1336c:	00092600 	andeq	r2, r9, r0, lsl #12
   13370:	d2000400 	andle	r0, r0, #0, 8
   13374:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
   13378:	00455701 	subeq	r5, r5, r1, lsl #14
   1337c:	47570c00 	ldrbmi	r0, [r7, -r0, lsl #24]
   13380:	46f80000 	ldrbtmi	r0, [r8], r0
   13384:	918c0000 	orrls	r0, ip, r0
   13388:	04020000 	streq	r0, [r2], #-0
   1338c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   13390:	07040300 	streq	r0, [r4, -r0, lsl #6]
   13394:	0000043e 	andeq	r0, r0, lr, lsr r4
   13398:	04050803 	streq	r0, [r5], #-2051	; 0xfffff7fd
   1339c:	03000008 	movweq	r0, #8
   133a0:	44280408 	strtmi	r0, [r8], #-1032	; 0xfffffbf8
   133a4:	e1040000 	mrs	r0, (UNDEF: 4)
   133a8:	0100000b 	tsteq	r0, fp
   133ac:	24170165 	ldrcs	r0, [r7], #-357	; 0xfffffe9b
   133b0:	03000000 	movweq	r0, #0
   133b4:	0c690601 	stcleq	6, cr0, [r9], #-4
   133b8:	01030000 	mrseq	r0, (UNDEF: 3)
   133bc:	000c6708 	andeq	r6, ip, r8, lsl #14
   133c0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   133c4:	00000a77 	andeq	r0, r0, r7, ror sl
   133c8:	64070203 	strvs	r0, [r7], #-515	; 0xfffffdfd
   133cc:	0300000d 	movweq	r0, #13
   133d0:	08090504 	stmdaeq	r9, {r2, r8, sl}
   133d4:	04030000 	streq	r0, [r3], #-0
   133d8:	00043907 	andeq	r3, r4, r7, lsl #18
   133dc:	07080300 	streq	r0, [r8, -r0, lsl #6]
   133e0:	00000434 	andeq	r0, r0, r4, lsr r4
   133e4:	000e4705 	andeq	r4, lr, r5, lsl #14
   133e8:	0e2e0200 	cdpeq	2, 2, cr0, cr14, cr0, {0}
   133ec:	00000062 	andeq	r0, r0, r2, rrx
   133f0:	00030705 	andeq	r0, r3, r5, lsl #14
   133f4:	0e740200 	cdpeq	2, 7, cr0, cr4, cr0, {0}
   133f8:	00000062 	andeq	r0, r0, r2, rrx
   133fc:	a5020406 	strge	r0, [r2, #-1030]	; 0xfffffbfa
   13400:	0000b103 	andeq	fp, r0, r3, lsl #2
   13404:	07780700 	ldrbeq	r0, [r8, -r0, lsl #14]!
   13408:	a7020000 	strge	r0, [r2, -r0]
   1340c:	0000390c 	andeq	r3, r0, ip, lsl #18
   13410:	0ac00700 	beq	ff015018 <_estack+0xdf010018>
   13414:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
   13418:	0000b113 	andeq	fp, r0, r3, lsl r1
   1341c:	4d080000 	stcmi	0, cr0, [r8, #-0]
   13420:	c1000000 	mrsgt	r0, (UNDEF: 0)
   13424:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   13428:	00000024 	andeq	r0, r0, r4, lsr #32
   1342c:	080a0003 	stmdaeq	sl, {r0, r1}
   13430:	e509a202 	str	sl, [r9, #-514]	; 0xfffffdfe
   13434:	0b000000 	bleq	1343c <__exidx_end+0xdb24>
   13438:	000003a1 	andeq	r0, r0, r1, lsr #7
   1343c:	1d07a402 	cfstrsne	mvf10, [r7, #-8]
   13440:	00000000 	andeq	r0, r0, r0
   13444:	00060d0b 	andeq	r0, r6, fp, lsl #26
   13448:	05a90200 	streq	r0, [r9, #512]!	; 0x200
   1344c:	0000008f 	andeq	r0, r0, pc, lsl #1
   13450:	c1050004 	tstgt	r5, r4
   13454:	02000008 	andeq	r0, r0, #8
   13458:	00c103aa 	sbceq	r0, r1, sl, lsr #7
   1345c:	040c0000 	streq	r0, [ip], #-0
   13460:	00084e05 	andeq	r4, r8, r5, lsl #28
   13464:	19160300 	ldmdbne	r6, {r8, r9}
   13468:	00000069 	andeq	r0, r0, r9, rrx
   1346c:	00025b05 	andeq	r5, r2, r5, lsl #22
   13470:	0d0c0400 	cfstrseq	mvf0, [ip, #-0]
   13474:	0000001d 	andeq	r0, r0, sp, lsl r0
   13478:	00073605 	andeq	r3, r7, r5, lsl #12
   1347c:	1b230300 	blne	8d4084 <__ccfg+0x8b40dc>
   13480:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13484:	00033a0d 	andeq	r3, r3, sp, lsl #20
   13488:	34031800 	strcc	r1, [r3], #-2048	; 0xfffff800
   1348c:	00017108 	andeq	r7, r1, r8, lsl #2
   13490:	0ec20b00 	vdiveq.f64	d16, d2, d0
   13494:	36030000 	strcc	r0, [r3], -r0
   13498:	00017113 	andeq	r7, r1, r3, lsl r1
   1349c:	5f0e0000 	svcpl	0x000e0000
   134a0:	3703006b 	strcc	r0, [r3, -fp, rrx]
   134a4:	00001d07 	andeq	r1, r0, r7, lsl #26
   134a8:	6e0b0400 	cfcpysvs	mvf0, mvf11
   134ac:	0300000b 	movweq	r0, #11
   134b0:	001d0b37 	andseq	r0, sp, r7, lsr fp
   134b4:	0b080000 	bleq	2134bc <__ccfg+0x1f3514>
   134b8:	000043f3 	strdeq	r4, [r0], -r3
   134bc:	1d143703 	ldcne	7, cr3, [r4, #-12]
   134c0:	0c000000 	stceq	0, cr0, [r0], {-0}
   134c4:	0004680b 	andeq	r6, r4, fp, lsl #16
   134c8:	1b370300 	blne	dd40d0 <__ccfg+0xdb4128>
   134cc:	0000001d 	andeq	r0, r0, sp, lsl r0
   134d0:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   134d4:	0b380300 	bleq	e140dc <__ccfg+0xdf4134>
   134d8:	00000177 	andeq	r0, r0, r7, ror r1
   134dc:	040f0014 	streq	r0, [pc], #-20	; 134e4 <__exidx_end+0xdbcc>
   134e0:	00000117 	andeq	r0, r0, r7, lsl r1
   134e4:	0000f308 	andeq	pc, r0, r8, lsl #6
   134e8:	00018700 	andeq	r8, r1, r0, lsl #14
   134ec:	00240900 	eoreq	r0, r4, r0, lsl #18
   134f0:	00000000 	andeq	r0, r0, r0
   134f4:	000b890d 	andeq	r8, fp, sp, lsl #18
   134f8:	3c032400 	cfstrscc	mvf2, [r3], {-0}
   134fc:	00020a08 	andeq	r0, r2, r8, lsl #20
   13500:	05780b00 	ldrbeq	r0, [r8, #-2816]!	; 0xfffff500
   13504:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
   13508:	00001d09 	andeq	r1, r0, r9, lsl #26
   1350c:	ca0b0000 	bgt	2d3514 <__ccfg+0x2b356c>
   13510:	03000003 	movweq	r0, #3
   13514:	001d093f 	andseq	r0, sp, pc, lsr r9
   13518:	0b040000 	bleq	113520 <__ccfg+0xf3578>
   1351c:	0000036b 	andeq	r0, r0, fp, ror #6
   13520:	1d094003 	stcne	0, cr4, [r9, #-12]
   13524:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13528:	0006800b 	andeq	r8, r6, fp
   1352c:	09410300 	stmdbeq	r1, {r8, r9}^
   13530:	0000001d 	andeq	r0, r0, sp, lsl r0
   13534:	09600b0c 	stmdbeq	r0!, {r2, r3, r8, r9, fp}^
   13538:	42030000 	andmi	r0, r3, #0
   1353c:	00001d09 	andeq	r1, r0, r9, lsl #26
   13540:	da0b1000 	ble	2d7548 <__ccfg+0x2b75a0>
   13544:	0300000a 	movweq	r0, #10
   13548:	001d0943 	andseq	r0, sp, r3, asr #18
   1354c:	0b140000 	bleq	513554 <__ccfg+0x4f35ac>
   13550:	0000034e 	andeq	r0, r0, lr, asr #6
   13554:	1d094403 	cfstrsne	mvf4, [r9, #-12]
   13558:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1355c:	0005810b 	andeq	r8, r5, fp, lsl #2
   13560:	09450300 	stmdbeq	r5, {r8, r9}^
   13564:	0000001d 	andeq	r0, r0, sp, lsl r0
   13568:	08fc0b1c 	ldmeq	ip!, {r2, r3, r4, r8, r9, fp}^
   1356c:	46030000 	strmi	r0, [r3], -r0
   13570:	00001d09 	andeq	r1, r0, r9, lsl #26
   13574:	10002000 	andne	r2, r0, r0
   13578:	00000032 	andeq	r0, r0, r2, lsr r0
   1357c:	4f030108 	svcmi	0x00030108
   13580:	00024f08 	andeq	r4, r2, r8, lsl #30
   13584:	0d2b0b00 	vstmdbeq	fp!, {d0-d-1}
   13588:	50030000 	andpl	r0, r3, r0
   1358c:	00024f0a 	andeq	r4, r2, sl, lsl #30
   13590:	230b0000 	movwcs	r0, #45056	; 0xb000
   13594:	0300000c 	movweq	r0, #12
   13598:	024f0951 	subeq	r0, pc, #1327104	; 0x144000
   1359c:	11800000 	orrne	r0, r0, r0
   135a0:	00000dc4 	andeq	r0, r0, r4, asr #27
   135a4:	f30a5303 	vcgt.u8	d5, d10, d3
   135a8:	00000000 	andeq	r0, r0, r0
   135ac:	0eb51101 	frdeqs	f1, f5, f1
   135b0:	56030000 	strpl	r0, [r3], -r0
   135b4:	0000f30a 	andeq	pc, r0, sl, lsl #6
   135b8:	00010400 	andeq	r0, r1, r0, lsl #8
   135bc:	0000f108 	andeq	pc, r0, r8, lsl #2
   135c0:	00025f00 	andeq	r5, r2, r0, lsl #30
   135c4:	00240900 	eoreq	r0, r4, r0, lsl #18
   135c8:	001f0000 	andseq	r0, pc, r0
   135cc:	000a2210 	andeq	r2, sl, r0, lsl r2
   135d0:	03019000 	movweq	r9, #4096	; 0x1000
   135d4:	02a20862 	adceq	r0, r2, #6422528	; 0x620000
   135d8:	c20b0000 	andgt	r0, fp, #0
   135dc:	0300000e 	movweq	r0, #14
   135e0:	02a21263 	adceq	r1, r2, #805306374	; 0x30000006
   135e4:	0b000000 	bleq	135ec <__exidx_end+0xdcd4>
   135e8:	00000590 	muleq	r0, r0, r5
   135ec:	1d066403 	cfstrsne	mvf6, [r6, #-12]
   135f0:	04000000 	streq	r0, [r0], #-0
   135f4:	00030f0b 	andeq	r0, r3, fp, lsl #30
   135f8:	09660300 	stmdbeq	r6!, {r8, r9}^
   135fc:	000002a8 	andeq	r0, r0, r8, lsr #5
   13600:	00320b08 	eorseq	r0, r2, r8, lsl #22
   13604:	67030000 	strvs	r0, [r3, -r0]
   13608:	00020a1e 	andeq	r0, r2, lr, lsl sl
   1360c:	0f008800 	svceq	0x00008800
   13610:	00025f04 	andeq	r5, r2, r4, lsl #30
   13614:	02b80800 	adcseq	r0, r8, #0, 16
   13618:	02b80000 	adcseq	r0, r8, #0
   1361c:	24090000 	strcs	r0, [r9], #-0
   13620:	1f000000 	svcne	0x00000000
   13624:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   13628:	12000002 	andne	r0, r0, #2
   1362c:	000cc30d 	andeq	ip, ip, sp, lsl #6
   13630:	7a030800 	bvc	d5638 <__ccfg+0xb5690>
   13634:	0002e708 	andeq	lr, r2, r8, lsl #14
   13638:	0cd50b00 	vldmiaeq	r5, {d16-d15}
   1363c:	7b030000 	blvc	d3644 <__ccfg+0xb369c>
   13640:	0002e711 	andeq	lr, r2, r1, lsl r7
   13644:	9e0b0000 	cdpls	0, 0, cr0, cr11, cr0, {0}
   13648:	0300001d 	movweq	r0, #29
   1364c:	001d067c 	andseq	r0, sp, ip, ror r6
   13650:	00040000 	andeq	r0, r4, r0
   13654:	004d040f 	subeq	r0, sp, pc, lsl #8
   13658:	600d0000 	andvs	r0, sp, r0
   1365c:	68000004 	stmdavs	r0, {r2}
   13660:	3008ba03 	andcc	fp, r8, r3, lsl #20
   13664:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   13668:	0300705f 	movweq	r7, #95	; 0x5f
   1366c:	02e712bb 	rsceq	r1, r7, #-1342177269	; 0xb000000b
   13670:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13674:	0300725f 	movweq	r7, #607	; 0x25f
   13678:	001d07bc 			; <UNDEFINED> instruction: 0x001d07bc
   1367c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   13680:	0300775f 	movweq	r7, #1887	; 0x75f
   13684:	001d07bd 			; <UNDEFINED> instruction: 0x001d07bd
   13688:	0b080000 	bleq	213690 <__ccfg+0x1f36e8>
   1368c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   13690:	5409be03 	strpl	fp, [r9], #-3587	; 0xfffff1fd
   13694:	0c000000 	stceq	0, cr0, [r0], {-0}
   13698:	0008650b 	andeq	r6, r8, fp, lsl #10
   1369c:	09bf0300 	ldmibeq	pc!, {r8, r9}	; <UNPREDICTABLE>
   136a0:	00000054 	andeq	r0, r0, r4, asr r0
   136a4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   136a8:	c0030066 	andgt	r0, r3, r6, rrx
   136ac:	0002bf11 	andeq	fp, r2, r1, lsl pc
   136b0:	b20b1000 	andlt	r1, fp, #0
   136b4:	03000001 	movweq	r0, #1
   136b8:	001d07c1 	andseq	r0, sp, r1, asr #15
   136bc:	0b180000 	bleq	6136c4 <__ccfg+0x5f371c>
   136c0:	00000314 	andeq	r0, r0, r4, lsl r3
   136c4:	f10ac803 			; <UNDEFINED> instruction: 0xf10ac803
   136c8:	1c000000 	stcne	0, cr0, [r0], {-0}
   136cc:	001d2d0b 	andseq	r2, sp, fp, lsl #26
   136d0:	1dca0300 	stclne	3, cr0, [sl]
   136d4:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
   136d8:	1cf40b20 	vldmiane	r4!, {d16-d31}
   136dc:	cc030000 	stcgt	0, cr0, [r3], {-0}
   136e0:	0005de1d 	andeq	sp, r5, sp, lsl lr
   136e4:	e20b2400 	and	r2, fp, #0, 8
   136e8:	0300000e 	movweq	r0, #14
   136ec:	06020dcf 	streq	r0, [r2], -pc, asr #27
   136f0:	0b280000 	bleq	a136f8 <__ccfg+0x9f3750>
   136f4:	00001ce2 	andeq	r1, r0, r2, ror #25
   136f8:	1c09d003 	stcne	0, cr13, [r9], {3}
   136fc:	2c000006 	stccs	0, cr0, [r0], {6}
   13700:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   13704:	11d30300 	bicsne	r0, r3, r0, lsl #6
   13708:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
   1370c:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 128e4 <__exidx_end+0xcfcc>
   13710:	d4030070 	strle	r0, [r3], #-112	; 0xffffff90
   13714:	0002e712 	andeq	lr, r2, r2, lsl r7
   13718:	5f0e3800 	svcpl	0x000e3800
   1371c:	03007275 	movweq	r7, #629	; 0x275
   13720:	001d07d5 			; <UNDEFINED> instruction: 0x001d07d5
   13724:	0b3c0000 	bleq	f1372c <__ccfg+0xef3784>
   13728:	00000f19 	andeq	r0, r0, r9, lsl pc
   1372c:	2211d803 	andscs	sp, r1, #196608	; 0x30000
   13730:	40000006 	andmi	r0, r0, r6
   13734:	000e620b 	andeq	r6, lr, fp, lsl #4
   13738:	11d90300 	bicsne	r0, r9, r0, lsl #6
   1373c:	00000632 	andeq	r0, r0, r2, lsr r6
   13740:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   13744:	dc030062 	stcle	0, cr0, [r3], {98}	; 0x62
   13748:	0002bf11 	andeq	fp, r2, r1, lsl pc
   1374c:	800b4400 	andhi	r4, fp, r0, lsl #8
   13750:	0300000b 	movweq	r0, #11
   13754:	001d07df 			; <UNDEFINED> instruction: 0x001d07df
   13758:	0b4c0000 	bleq	1313760 <__ccfg+0x12f37b8>
   1375c:	00000494 	muleq	r0, r4, r4
   13760:	770ae003 	strvc	lr, [sl, -r3]
   13764:	50000000 	andpl	r0, r0, r0
   13768:	0047510b 	subeq	r5, r7, fp, lsl #2
   1376c:	12e30300 	rscne	r0, r3, #0, 6
   13770:	0000044e 	andeq	r0, r0, lr, asr #8
   13774:	0ba60b54 	bleq	fe9964cc <_estack+0xde9914cc>
   13778:	e7030000 	str	r0, [r3, -r0]
   1377c:	00010b0c 	andeq	r0, r1, ip, lsl #22
   13780:	2a0b5800 	bcs	2e9788 <__ccfg+0x2c97e0>
   13784:	0300000a 	movweq	r0, #10
   13788:	00e50ee9 	rsceq	r0, r5, r9, ror #29
   1378c:	0b5c0000 	bleq	1713794 <__ccfg+0x16f37ec>
   13790:	00000e95 	muleq	r0, r5, lr
   13794:	1d09ea03 	vstrne	s28, [r9, #-12]
   13798:	64000000 	strvs	r0, [r0], #-0
   1379c:	001d1300 	andseq	r1, sp, r0, lsl #6
   137a0:	044e0000 	strbeq	r0, [lr], #-0
   137a4:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   137a8:	14000004 	strne	r0, [r0], #-4
   137ac:	000000f1 	strdeq	r0, [r0], -r1
   137b0:	0005a214 	andeq	sl, r5, r4, lsl r2
   137b4:	001d1400 	andseq	r1, sp, r0, lsl #8
   137b8:	0f000000 	svceq	0x00000000
   137bc:	00045904 	andeq	r5, r4, r4, lsl #18
   137c0:	044e1500 	strbeq	r1, [lr], #-1280	; 0xfffffb00
   137c4:	5d160000 	ldcpl	0, cr0, [r6, #-0]
   137c8:	2800000d 	stmdacs	r0, {r0, r2, r3}
   137cc:	02650304 	rsbeq	r0, r5, #4, 6	; 0x10000000
   137d0:	0005a208 	andeq	sl, r5, r8, lsl #4
   137d4:	09101700 	ldmdbeq	r0, {r8, r9, sl, ip}
   137d8:	67030000 	strvs	r0, [r3, -r0]
   137dc:	001d0702 	andseq	r0, sp, r2, lsl #14
   137e0:	17000000 	strne	r0, [r0, -r0]
   137e4:	000007ee 	andeq	r0, r0, lr, ror #15
   137e8:	0b026c03 	bleq	ae7fc <__ccfg+0x8e854>
   137ec:	0000068e 	andeq	r0, r0, lr, lsl #13
   137f0:	02ff1704 	rscseq	r1, pc, #4, 14	; 0x100000
   137f4:	6c030000 	stcvs	0, cr0, [r3], {-0}
   137f8:	068e1402 	streq	r1, [lr], r2, lsl #8
   137fc:	17080000 	strne	r0, [r8, -r0]
   13800:	00000f08 	andeq	r0, r0, r8, lsl #30
   13804:	1e026c03 	cdpne	12, 0, cr6, cr2, cr3, {0}
   13808:	0000068e 	andeq	r0, r0, lr, lsl #13
   1380c:	058b170c 	streq	r1, [fp, #1804]	; 0x70c
   13810:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
   13814:	001d0802 	andseq	r0, sp, r2, lsl #16
   13818:	17100000 	ldrne	r0, [r0, -r0]
   1381c:	000004e0 	andeq	r0, r0, r0, ror #9
   13820:	08026f03 	stmdaeq	r2, {r0, r1, r8, r9, sl, fp, sp, lr}
   13824:	0000088e 	andeq	r0, r0, lr, lsl #17
   13828:	0e751714 	mrceq	7, 3, r1, cr5, cr4, {0}
   1382c:	72030000 	andvc	r0, r3, #0
   13830:	001d0702 	andseq	r0, sp, r2, lsl #14
   13834:	17300000 	ldrne	r0, [r0, -r0]!
   13838:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
   1383c:	16027303 	strne	r7, [r2], -r3, lsl #6
   13840:	000008a3 	andeq	r0, r0, r3, lsr #17
   13844:	07961734 			; <UNDEFINED> instruction: 0x07961734
   13848:	75030000 	strvc	r0, [r3, #-0]
   1384c:	001d0702 	andseq	r0, sp, r2, lsl #14
   13850:	17380000 	ldrne	r0, [r8, -r0]!
   13854:	00000890 	muleq	r0, r0, r8
   13858:	0a027703 	beq	b146c <__ccfg+0x914c4>
   1385c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   13860:	0363173c 	cmneq	r3, #60, 14	; 0xf00000
   13864:	7a030000 	bvc	d386c <__ccfg+0xb38c4>
   13868:	01711302 	cmneq	r1, r2, lsl #6
   1386c:	17400000 	strbne	r0, [r0, -r0]
   13870:	0000041e 	andeq	r0, r0, lr, lsl r4
   13874:	07027b03 	streq	r7, [r2, -r3, lsl #22]
   13878:	0000001d 	andeq	r0, r0, sp, lsl r0
   1387c:	06151744 	ldreq	r1, [r5], -r4, asr #14
   13880:	7c030000 	stcvc	0, cr0, [r3], {-0}
   13884:	01711302 	cmneq	r1, r2, lsl #6
   13888:	17480000 	strbne	r0, [r8, -r0]
   1388c:	0000082b 	andeq	r0, r0, fp, lsr #16
   13890:	14027d03 	strne	r7, [r2], #-3331	; 0xfffff2fd
   13894:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
   13898:	0b66174c 	bleq	19995d0 <__ccfg+0x1979628>
   1389c:	80030000 	andhi	r0, r3, r0
   138a0:	001d0702 	andseq	r0, sp, r2, lsl #14
   138a4:	17500000 	ldrbne	r0, [r0, -r0]
   138a8:	00000c5f 	andeq	r0, r0, pc, asr ip
   138ac:	09028103 	stmdbeq	r2, {r0, r1, r8, pc}
   138b0:	000005a2 	andeq	r0, r0, r2, lsr #11
   138b4:	0c791754 	ldcleq	7, cr1, [r9], #-336	; 0xfffffeb0
   138b8:	a4030000 	strge	r0, [r3], #-0
   138bc:	08690702 	stmdaeq	r9!, {r1, r8, r9, sl}^
   138c0:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   138c4:	00000a22 	andeq	r0, r0, r2, lsr #20
   138c8:	1302a803 	movwne	sl, #10243	; 0x2803
   138cc:	000002a2 	andeq	r0, r0, r2, lsr #5
   138d0:	ba180148 	blt	613df8 <__ccfg+0x5f3e50>
   138d4:	03000006 	movweq	r0, #6
   138d8:	5f1202a9 	svcpl	0x001202a9
   138dc:	4c000002 	stcmi	0, cr0, [r0], {2}
   138e0:	06a11801 	strteq	r1, [r1], r1, lsl #16
   138e4:	ad030000 	stcge	0, cr0, [r3, #-0]
   138e8:	08cb0c02 	stmiaeq	fp, {r1, sl, fp}^
   138ec:	02dc0000 	sbcseq	r0, ip, #0
   138f0:	000ce118 	andeq	lr, ip, r8, lsl r1
   138f4:	02b20300 	adcseq	r0, r2, #0, 6
   138f8:	00064f10 	andeq	r4, r6, r0, lsl pc
   138fc:	1802e000 	stmdane	r2, {sp, lr, pc}
   13900:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
   13904:	0a02b403 	beq	c0918 <__ccfg+0xa0970>
   13908:	000008d7 	ldrdeq	r0, [r0], -r7
   1390c:	0f0002ec 	svceq	0x000002ec
   13910:	0005a804 	andeq	sl, r5, r4, lsl #16
   13914:	08010300 	stmdaeq	r1, {r8, r9}
   13918:	00000c70 	andeq	r0, r0, r0, ror ip
   1391c:	0005a815 	andeq	sl, r5, r5, lsl r8
   13920:	30040f00 	andcc	r0, r4, r0, lsl #30
   13924:	13000004 	movwne	r0, #4
   13928:	0000001d 	andeq	r0, r0, sp, lsl r0
   1392c:	000005d8 	ldrdeq	r0, [r0], -r8
   13930:	00044e14 	andeq	r4, r4, r4, lsl lr
   13934:	00f11400 	rscseq	r1, r1, r0, lsl #8
   13938:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
   1393c:	14000005 	strne	r0, [r0], #-5
   13940:	0000001d 	andeq	r0, r0, sp, lsl r0
   13944:	af040f00 	svcge	0x00040f00
   13948:	0f000005 	svceq	0x00000005
   1394c:	0005ba04 	andeq	fp, r5, r4, lsl #20
   13950:	00831300 	addeq	r1, r3, r0, lsl #6
   13954:	06020000 	streq	r0, [r2], -r0
   13958:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   1395c:	14000004 	strne	r0, [r0], #-4
   13960:	000000f1 	strdeq	r0, [r0], -r1
   13964:	00008314 	andeq	r8, r0, r4, lsl r3
   13968:	001d1400 	andseq	r1, sp, r0, lsl #8
   1396c:	0f000000 	svceq	0x00000000
   13970:	0005e404 	andeq	lr, r5, r4, lsl #8
   13974:	001d1300 	andseq	r1, sp, r0, lsl #6
   13978:	061c0000 	ldreq	r0, [ip], -r0
   1397c:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13980:	14000004 	strne	r0, [r0], #-4
   13984:	000000f1 	strdeq	r0, [r0], -r1
   13988:	08040f00 	stmdaeq	r4, {r8, r9, sl, fp}
   1398c:	08000006 	stmdaeq	r0, {r1, r2}
   13990:	0000004d 	andeq	r0, r0, sp, asr #32
   13994:	00000632 	andeq	r0, r0, r2, lsr r6
   13998:	00002409 	andeq	r2, r0, r9, lsl #8
   1399c:	08000200 	stmdaeq	r0, {r9}
   139a0:	0000004d 	andeq	r0, r0, sp, asr #32
   139a4:	00000642 	andeq	r0, r0, r2, asr #12
   139a8:	00002409 	andeq	r2, r0, r9, lsl #8
   139ac:	04000000 	streq	r0, [r0], #-0
   139b0:	00000481 	andeq	r0, r0, r1, lsl #9
   139b4:	1a012403 	bne	5c9c8 <__ccfg+0x3ca20>
   139b8:	000002ed 	andeq	r0, r0, sp, ror #5
   139bc:	000cdb19 	andeq	sp, ip, r9, lsl fp
   139c0:	28030c00 	stmdacs	r3, {sl, fp}
   139c4:	06880801 	streq	r0, [r8], r1, lsl #16
   139c8:	c2170000 	andsgt	r0, r7, #0
   139cc:	0300000e 	movweq	r0, #14
   139d0:	8811012a 	ldmdahi	r1, {r1, r3, r5, r8}
   139d4:	00000006 	andeq	r0, r0, r6
   139d8:	000bda17 	andeq	sp, fp, r7, lsl sl
   139dc:	012b0300 			; <UNDEFINED> instruction: 0x012b0300
   139e0:	00001d07 	andeq	r1, r0, r7, lsl #26
   139e4:	7e170400 	cfmulsvc	mvf0, mvf7, mvf0
   139e8:	03000007 	movweq	r0, #7
   139ec:	8e0b012c 	adfhiep	f0, f3, #4.0
   139f0:	08000006 	stmdaeq	r0, {r1, r2}
   139f4:	4f040f00 	svcmi	0x00040f00
   139f8:	0f000006 	svceq	0x00000006
   139fc:	00064204 	andeq	r4, r6, r4, lsl #4
   13a00:	03ed1900 	mvneq	r1, #0, 18
   13a04:	030e0000 	movweq	r0, #57344	; 0xe000
   13a08:	cd080144 	stfgts	f0, [r8, #-272]	; 0xfffffef0
   13a0c:	17000006 	strne	r0, [r0, -r6]
   13a10:	00001649 	andeq	r1, r0, r9, asr #12
   13a14:	12014503 	andne	r4, r1, #12582912	; 0xc00000
   13a18:	000006cd 	andeq	r0, r0, sp, asr #13
   13a1c:	083d1700 	ldmdaeq	sp!, {r8, r9, sl, ip}
   13a20:	46030000 	strmi	r0, [r3], -r0
   13a24:	06cd1201 	strbeq	r1, [sp], r1, lsl #4
   13a28:	17060000 	strne	r0, [r6, -r0]
   13a2c:	000014fb 	strdeq	r1, [r0], -fp
   13a30:	12014703 	andne	r4, r1, #786432	; 0xc0000
   13a34:	0000005b 	andeq	r0, r0, fp, asr r0
   13a38:	5b08000c 	blpl	213a70 <__ccfg+0x1f3ac8>
   13a3c:	dd000000 	stcle	0, cr0, [r0, #-0]
   13a40:	09000006 	stmdbeq	r0, {r1, r2}
   13a44:	00000024 	andeq	r0, r0, r4, lsr #32
   13a48:	d01a0002 	andsle	r0, sl, r2
   13a4c:	07028503 	streq	r8, [r2, -r3, lsl #10]
   13a50:	000007f2 	strdeq	r0, [r0], -r2
   13a54:	000e6817 	andeq	r6, lr, r7, lsl r8
   13a58:	02870300 	addeq	r0, r7, #0, 6
   13a5c:	00002418 	andeq	r2, r0, r8, lsl r4
   13a60:	e9170000 	ldmdb	r7, {}	; <UNPREDICTABLE>
   13a64:	0300000c 	movweq	r0, #12
   13a68:	a2120288 	andsge	r0, r2, #136, 4	; 0x80000008
   13a6c:	04000005 	streq	r0, [r0], #-5
   13a70:	00044b17 	andeq	r4, r4, r7, lsl fp
   13a74:	02890300 	addeq	r0, r9, #0, 6
   13a78:	0007f210 	andeq	pc, r7, r0, lsl r2	; <UNPREDICTABLE>
   13a7c:	4f170800 	svcmi	0x00170800
   13a80:	0300000b 	movweq	r0, #11
   13a84:	8717028a 	ldrhi	r0, [r7, -sl, lsl #5]
   13a88:	24000001 	strcs	r0, [r0], #-1
   13a8c:	0007f517 	andeq	pc, r7, r7, lsl r5	; <UNPREDICTABLE>
   13a90:	028b0300 	addeq	r0, fp, #0, 6
   13a94:	00001d0f 	andeq	r1, r0, pc, lsl #26
   13a98:	bd174800 	ldclt	8, cr4, [r7, #-0]
   13a9c:	0300000e 	movweq	r0, #14
   13aa0:	702c028c 	eorvc	r0, ip, ip, lsl #5
   13aa4:	50000000 	andpl	r0, r0, r0
   13aa8:	00007617 	andeq	r7, r0, r7, lsl r6
   13aac:	028d0300 	addeq	r0, sp, #0, 6
   13ab0:	0006941a 	andeq	r9, r6, sl, lsl r4
   13ab4:	45175800 	ldrmi	r5, [r7, #-2048]	; 0xfffff800
   13ab8:	03000006 	movweq	r0, #6
   13abc:	e516028e 	ldr	r0, [r6, #-654]	; 0xfffffd72
   13ac0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   13ac4:	000cf617 	andeq	pc, ip, r7, lsl r6	; <UNPREDICTABLE>
   13ac8:	028f0300 	addeq	r0, pc, #0, 6
   13acc:	0000e516 	andeq	lr, r0, r6, lsl r5
   13ad0:	68177000 	ldmdavs	r7, {ip, sp, lr}
   13ad4:	03000000 	movweq	r0, #0
   13ad8:	e5160290 	ldr	r0, [r6, #-656]	; 0xfffffd70
   13adc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   13ae0:	000b7617 	andeq	r7, fp, r7, lsl r6
   13ae4:	02910300 	addseq	r0, r1, #0, 6
   13ae8:	00080210 	andeq	r0, r8, r0, lsl r2
   13aec:	28178000 	ldmdacs	r7, {pc}
   13af0:	03000004 	movweq	r0, #4
   13af4:	12100292 	andsne	r0, r0, #536870921	; 0x20000009
   13af8:	88000008 	stmdahi	r0, {r3}
   13afc:	000c9917 	andeq	r9, ip, r7, lsl r9
   13b00:	02930300 	addseq	r0, r3, #0, 6
   13b04:	00001d0f 	andeq	r1, r0, pc, lsl #26
   13b08:	b417a000 	ldrlt	sl, [r7], #-0
   13b0c:	03000002 	movweq	r0, #2
   13b10:	e5160294 	ldr	r0, [r6, #-660]	; 0xfffffd6c
   13b14:	a4000000 	strge	r0, [r0], #-0
   13b18:	0006ab17 	andeq	sl, r6, r7, lsl fp
   13b1c:	02950300 	addseq	r0, r5, #0, 6
   13b20:	0000e516 	andeq	lr, r0, r6, lsl r5
   13b24:	c717ac00 	ldrgt	sl, [r7, -r0, lsl #24]
   13b28:	03000005 	movweq	r0, #5
   13b2c:	e5160296 	ldr	r0, [r6, #-662]	; 0xfffffd6a
   13b30:	b4000000 	strlt	r0, [r0], #-0
   13b34:	00085617 	andeq	r5, r8, r7, lsl r6
   13b38:	02970300 	addseq	r0, r7, #0, 6
   13b3c:	0000e516 	andeq	lr, r0, r6, lsl r5
   13b40:	3417bc00 	ldrcc	fp, [r7], #-3072	; 0xfffff400
   13b44:	03000006 	movweq	r0, #6
   13b48:	e5160298 	ldr	r0, [r6, #-664]	; 0xfffffd68
   13b4c:	c4000000 	strgt	r0, [r0], #-0
   13b50:	00090e17 	andeq	r0, r9, r7, lsl lr
   13b54:	02990300 	addseq	r0, r9, #0, 6
   13b58:	00001d08 	andeq	r1, r0, r8, lsl #26
   13b5c:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   13b60:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b64:	00000802 	andeq	r0, r0, r2, lsl #16
   13b68:	00002409 	andeq	r2, r0, r9, lsl #8
   13b6c:	08001900 	stmdaeq	r0, {r8, fp, ip}
   13b70:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b74:	00000812 	andeq	r0, r0, r2, lsl r8
   13b78:	00002409 	andeq	r2, r0, r9, lsl #8
   13b7c:	08000700 	stmdaeq	r0, {r8, r9, sl}
   13b80:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b84:	00000822 	andeq	r0, r0, r2, lsr #16
   13b88:	00002409 	andeq	r2, r0, r9, lsl #8
   13b8c:	1a001700 	bne	19794 <__exidx_end+0x13e7c>
   13b90:	029e03f0 	addseq	r0, lr, #240, 6	; 0xc0000003
   13b94:	00084907 	andeq	r4, r8, r7, lsl #18
   13b98:	03d31700 	bicseq	r1, r3, #0, 14
   13b9c:	a1030000 	mrsge	r0, (UNDEF: 3)
   13ba0:	08491b02 	stmdaeq	r9, {r1, r8, r9, fp, ip}^
   13ba4:	17000000 	strne	r0, [r0, -r0]
   13ba8:	00000f10 	andeq	r0, r0, r0, lsl pc
   13bac:	1802a203 	stmdane	r2, {r0, r1, r9, sp, pc}
   13bb0:	00000859 	andeq	r0, r0, r9, asr r8
   13bb4:	e7080078 	smlsdx	r8, r8, r0, r0
   13bb8:	59000002 	stmdbpl	r0, {r1}
   13bbc:	09000008 	stmdbeq	r0, {r3}
   13bc0:	00000024 	andeq	r0, r0, r4, lsr #32
   13bc4:	2408001d 	strcs	r0, [r8], #-29	; 0xffffffe3
   13bc8:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
   13bcc:	09000008 	stmdbeq	r0, {r3}
   13bd0:	00000024 	andeq	r0, r0, r4, lsr #32
   13bd4:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   13bd8:	03028303 	movweq	r8, #8963	; 0x2303
   13bdc:	0000088e 	andeq	r0, r0, lr, lsl #17
   13be0:	000d5d1c 	andeq	r5, sp, ip, lsl sp
   13be4:	029a0300 	addseq	r0, sl, #0, 6
   13be8:	0006dd0b 	andeq	sp, r6, fp, lsl #26
   13bec:	0b5e1c00 	bleq	179abf4 <__ccfg+0x177ac4c>
   13bf0:	a3030000 	movwge	r0, #12288	; 0x3000
   13bf4:	08220b02 	stmdaeq	r2!, {r1, r8, r9, fp}
   13bf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13bfc:	000005a8 	andeq	r0, r0, r8, lsr #11
   13c00:	0000089e 	muleq	r0, lr, r8
   13c04:	00002409 	andeq	r2, r0, r9, lsl #8
   13c08:	1d001800 	stcne	8, cr1, [r0, #-0]
   13c0c:	00000ec8 	andeq	r0, r0, r8, asr #29
   13c10:	089e040f 	ldmeq	lr, {r0, r1, r2, r3, sl}
   13c14:	b41e0000 	ldrlt	r0, [lr], #-0
   13c18:	14000008 	strne	r0, [r0], #-8
   13c1c:	0000044e 	andeq	r0, r0, lr, asr #8
   13c20:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
   13c24:	0f000008 	svceq	0x00000008
   13c28:	00017104 	andeq	r7, r1, r4, lsl #2
   13c2c:	08cb1e00 	stmiaeq	fp, {r9, sl, fp, ip}^
   13c30:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13c34:	00000000 	andeq	r0, r0, r0
   13c38:	08d1040f 	ldmeq	r1, {r0, r1, r2, r3, sl}^
   13c3c:	040f0000 	streq	r0, [pc], #-0	; 13c44 <__exidx_end+0xe32c>
   13c40:	000008c0 	andeq	r0, r0, r0, asr #17
   13c44:	00064208 	andeq	r4, r6, r8, lsl #4
   13c48:	0008e700 	andeq	lr, r8, r0, lsl #14
   13c4c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13c50:	00020000 	andeq	r0, r2, r0
   13c54:	000ace1f 	andeq	ip, sl, pc, lsl lr
   13c58:	03330300 	teqeq	r3, #0, 6
   13c5c:	00044e17 	andeq	r4, r4, r7, lsl lr
   13c60:	0ac71f00 	beq	ff1db868 <_estack+0xdf1d6868>
   13c64:	34030000 	strcc	r0, [r3], #-0
   13c68:	04541d03 	ldrbeq	r1, [r4], #-3331	; 0xfffff2fd
   13c6c:	4b200000 	blmi	813c74 <__ccfg+0x7f3ccc>
   13c70:	05000047 	streq	r0, [r0, #-71]	; 0xffffffb9
   13c74:	04593017 	ldrbeq	r3, [r9], #-23	; 0xffffffe9
   13c78:	03050000 	movweq	r0, #20480	; 0x5000
   13c7c:	20000118 	andcs	r0, r0, r8, lsl r1
   13c80:	0008e721 	andeq	lr, r8, r1, lsr #14
   13c84:	10030500 	andne	r0, r3, r0, lsl #10
   13c88:	21200001 			; <UNDEFINED> instruction: 0x21200001
   13c8c:	000008f4 	strdeq	r0, [r0], -r4
   13c90:	00000305 	andeq	r0, r0, r5, lsl #6
   13c94:	92000000 	andls	r0, r0, #0
   13c98:	0400000a 	streq	r0, [r0], #-10
   13c9c:	00478a00 	subeq	r8, r7, r0, lsl #20
   13ca0:	a8010400 	stmdage	r1, {sl}
   13ca4:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
   13ca8:	00004902 	andeq	r4, r0, r2, lsl #18
   13cac:	00005225 	andeq	r5, r0, r5, lsr #4
   13cb0:	00004864 	andeq	r4, r0, r4, ror #16
   13cb4:	00000054 	andeq	r0, r0, r4, asr r0
   13cb8:	0000926c 	andeq	r9, r0, ip, ror #4
   13cbc:	34070802 	strcc	r0, [r7], #-2050	; 0xfffff7fe
   13cc0:	03000004 	movweq	r0, #4
   13cc4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   13cc8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   13ccc:	00043e07 	andeq	r3, r4, r7, lsl #28
   13cd0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   13cd4:	00000804 	andeq	r0, r0, r4, lsl #16
   13cd8:	28040802 	stmdacs	r4, {r1, fp}
   13cdc:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   13ce0:	00004b93 	muleq	r0, r3, fp
   13ce4:	33162a02 	tstcc	r6, #8192	; 0x2000
   13ce8:	04000000 	streq	r0, [r0], #-0
   13cec:	00004f40 	andeq	r4, r0, r0, asr #30
   13cf0:	60152f02 	andsvs	r2, r5, r2, lsl #30
   13cf4:	05000000 	streq	r0, [r0, #-0]
   13cf8:	00006604 	andeq	r6, r0, r4, lsl #12
   13cfc:	00480600 	subeq	r0, r8, r0, lsl #12
   13d00:	00750000 	rsbseq	r0, r5, r0
   13d04:	75070000 	strvc	r0, [r7, #-0]
   13d08:	00000000 	andeq	r0, r0, r0
   13d0c:	007b0405 	rsbseq	r0, fp, r5, lsl #8
   13d10:	04080000 	streq	r0, [r8], #-0
   13d14:	000056a2 	andeq	r5, r0, r2, lsr #13
   13d18:	880f3602 	stmdahi	pc, {r1, r9, sl, ip, sp}	; <UNPREDICTABLE>
   13d1c:	05000000 	streq	r0, [r0, #-0]
   13d20:	00008e04 	andeq	r8, r0, r4, lsl #28
   13d24:	002c0600 	eoreq	r0, ip, r0, lsl #12
   13d28:	00a20000 	adceq	r0, r2, r0
   13d2c:	75070000 	strvc	r0, [r7, #-0]
   13d30:	07000000 	streq	r0, [r0, -r0]
   13d34:	00000075 	andeq	r0, r0, r5, ror r0
   13d38:	08010200 	stmdaeq	r1, {r9}
   13d3c:	00000c67 	andeq	r0, r0, r7, ror #24
   13d40:	00515a09 	subseq	r5, r1, r9, lsl #20
   13d44:	12bb0200 	adcsne	r0, fp, #0, 4
   13d48:	00000054 	andeq	r0, r0, r4, asr r0
   13d4c:	0056d509 	subseq	sp, r6, r9, lsl #10
   13d50:	10be0200 	adcsne	r0, lr, r0, lsl #4
   13d54:	0000007c 	andeq	r0, r0, ip, ror r0
   13d58:	69060102 	stmdbvs	r6, {r1, r8}
   13d5c:	0a00000c 	beq	13d94 <__exidx_end+0xe47c>
   13d60:	00004e60 	andeq	r4, r0, r0, ror #28
   13d64:	00a20107 	adceq	r0, r2, r7, lsl #2
   13d68:	17030000 	strne	r0, [r3, -r0]
   13d6c:	0001f506 	andeq	pc, r1, r6, lsl #10
   13d70:	49360b00 	ldmdbmi	r6!, {r8, r9, fp}
   13d74:	0b000000 	bleq	13d7c <__exidx_end+0xe464>
   13d78:	00004d5f 	andeq	r4, r0, pc, asr sp
   13d7c:	52870b01 	addpl	r0, r7, #1024	; 0x400
   13d80:	0b020000 	bleq	93d88 <__ccfg+0x73de0>
   13d84:	000055e8 	andeq	r5, r0, r8, ror #11
   13d88:	51c90b03 	bicpl	r0, r9, r3, lsl #22
   13d8c:	0b040000 	bleq	113d94 <__ccfg+0xf3dec>
   13d90:	00005505 	andeq	r5, r0, r5, lsl #10
   13d94:	54690b05 	strbtpl	r0, [r9], #-2821	; 0xfffff4fb
   13d98:	0b060000 	bleq	193da0 <__ccfg+0x173df8>
   13d9c:	00004957 	andeq	r4, r0, r7, asr r9
   13da0:	551a0b07 	ldrpl	r0, [sl, #-2823]	; 0xfffff4f9
   13da4:	0b080000 	bleq	213dac <__ccfg+0x1f3e04>
   13da8:	00005528 	andeq	r5, r0, r8, lsr #10
   13dac:	55db0b09 	ldrbpl	r0, [fp, #2825]	; 0xb09
   13db0:	0b0a0000 	bleq	293db8 <__ccfg+0x273e10>
   13db4:	00005120 	andeq	r5, r0, r0, lsr #2
   13db8:	4bd40b0b 	blmi	ff5169ec <_estack+0xdf5119ec>
   13dbc:	0b0c0000 	bleq	313dc4 <__ccfg+0x2f3e1c>
   13dc0:	00004be8 	andeq	r4, r0, r8, ror #23
   13dc4:	4ea40b0d 	vfmami.f64	d0, d4, d13
   13dc8:	0b0e0000 	bleq	393dd0 <__ccfg+0x373e28>
   13dcc:	00004eba 			; <UNDEFINED> instruction: 0x00004eba
   13dd0:	4d990b0f 	vldrmi	d0, [r9, #60]	; 0x3c
   13dd4:	0b100000 	bleq	413ddc <__ccfg+0x3f3e34>
   13dd8:	000051ad 	andeq	r5, r0, sp, lsr #3
   13ddc:	4e230b11 	vmovmi.32	d3[1], r0
   13de0:	0b120000 	bleq	493de8 <__ccfg+0x473e40>
   13de4:	000058a0 	andeq	r5, r0, r0, lsr #17
   13de8:	49c00b13 	stmibmi	r0, {r0, r1, r4, r8, r9, fp}^
   13dec:	0b140000 	bleq	513df4 <__ccfg+0x4f3e4c>
   13df0:	00004e47 	andeq	r4, r0, r7, asr #28
   13df4:	48d50b15 	ldmmi	r5, {r0, r2, r4, r8, r9, fp}^
   13df8:	0b160000 	bleq	593e00 <__ccfg+0x573e58>
   13dfc:	0000560b 	andeq	r5, r0, fp, lsl #12
   13e00:	572e0b17 			; <UNDEFINED> instruction: 0x572e0b17
   13e04:	0b180000 	bleq	613e0c <__ccfg+0x5f3e64>
   13e08:	00004e6c 	andeq	r4, r0, ip, ror #28
   13e0c:	52f90b19 	rscspl	r0, r9, #25600	; 0x6400
   13e10:	0b1a0000 	bleq	693e18 <__ccfg+0x673e70>
   13e14:	00005619 	andeq	r5, r0, r9, lsl r6
   13e18:	47f60b1b 			; <UNDEFINED> instruction: 0x47f60b1b
   13e1c:	0b1c0000 	bleq	713e24 <__ccfg+0x6f3e7c>
   13e20:	00005627 	andeq	r5, r0, r7, lsr #12
   13e24:	56350b1d 			; <UNDEFINED> instruction: 0x56350b1d
   13e28:	0b1e0000 	bleq	793e30 <__ccfg+0x773e88>
   13e2c:	000047a4 	andeq	r4, r0, r4, lsr #15
   13e30:	565f0b1f 			; <UNDEFINED> instruction: 0x565f0b1f
   13e34:	0b200000 	bleq	813e3c <__ccfg+0x7f3e94>
   13e38:	000053aa 	andeq	r5, r0, sl, lsr #7
   13e3c:	517f0b21 	cmnpl	pc, r1, lsr #22
   13e40:	0b220000 	bleq	893e48 <__ccfg+0x873ea0>
   13e44:	000055fe 	strdeq	r5, [r0], -lr
   13e48:	50a10b23 	adcpl	r0, r1, r3, lsr #22
   13e4c:	0b240000 	bleq	913e54 <__ccfg+0x8f3eac>
   13e50:	00004fa3 	andeq	r4, r0, r3, lsr #31
   13e54:	4c9f0b25 	fldmiaxmi	pc, {d0-d17}	;@ Deprecated
   13e58:	0b260000 	bleq	993e60 <__ccfg+0x973eb8>
   13e5c:	00004fc1 	andeq	r4, r0, r1, asr #31
   13e60:	4d3b0b27 	fldmdbxmi	fp!, {d0-d18}	;@ Deprecated
   13e64:	0b280000 	bleq	a13e6c <__ccfg+0x9f3ec4>
   13e68:	00004fd1 	ldrdeq	r4, [r0], -r1
   13e6c:	4fe10b29 	svcmi	0x00e10b29
   13e70:	0b2a0000 	bleq	a93e78 <__ccfg+0xa73ed0>
   13e74:	00005106 	andeq	r5, r0, r6, lsl #2
   13e78:	4f4a0b2b 	svcmi	0x004a0b2b
   13e7c:	0b2c0000 	bleq	b13e84 <__ccfg+0xaf3edc>
   13e80:	000053b7 			; <UNDEFINED> instruction: 0x000053b7
   13e84:	4ce00b2d 	fstmiaxmi	r0!, {d16-d37}	;@ Deprecated
   13e88:	002e0000 	eoreq	r0, lr, r0
   13e8c:	004edc0a 	subeq	sp, lr, sl, lsl #24
   13e90:	a2010700 	andge	r0, r1, #0, 14
   13e94:	04000000 	streq	r0, [r0], #-0
   13e98:	03d60617 	bicseq	r0, r6, #24117248	; 0x1700000
   13e9c:	0a0b0000 	beq	2d3ea4 <__ccfg+0x2b3efc>
   13ea0:	0000004c 	andeq	r0, r0, ip, asr #32
   13ea4:	00483d0b 	subeq	r3, r8, fp, lsl #26
   13ea8:	3a0b0100 	bcc	2d42b0 <__ccfg+0x2b4308>
   13eac:	02000058 	andeq	r0, r0, #88	; 0x58
   13eb0:	0056aa0b 	subseq	sl, r6, fp, lsl #20
   13eb4:	2a0b0300 	bcs	2d4abc <__ccfg+0x2b4b14>
   13eb8:	0400004c 	streq	r0, [r0], #-76	; 0xffffffb4
   13ebc:	0049220b 	subeq	r2, r9, fp, lsl #4
   13ec0:	bc0b0500 	cfstr32lt	mvfx0, [fp], {-0}
   13ec4:	0600004c 	streq	r0, [r0], -ip, asr #32
   13ec8:	004c1a0b 	subeq	r1, ip, fp, lsl #20
   13ecc:	560b0700 	strpl	r0, [fp], -r0, lsl #14
   13ed0:	08000055 	stmdaeq	r0, {r0, r2, r4, r6}
   13ed4:	00568a0b 	subseq	r8, r6, fp, lsl #20
   13ed8:	8d0b0900 	vstrhi.16	s0, [fp, #-0]	; <UNPREDICTABLE>
   13edc:	0a000054 	beq	14034 <__exidx_end+0xe71c>
   13ee0:	0049750b 	subeq	r7, r9, fp, lsl #10
   13ee4:	5d0b0b00 	vstrpl	d0, [fp, #-0]
   13ee8:	0c00004c 	stceq	0, cr0, [r0], {76}	; 0x4c
   13eec:	0048be0b 	subeq	fp, r8, fp, lsl #28
   13ef0:	6f0b0d00 	svcvs	0x000b0d00
   13ef4:	0e000058 	mcreq	0, 0, r0, cr0, cr8, {2}
   13ef8:	0050f30b 	subseq	pc, r0, fp, lsl #6
   13efc:	ee0b0f00 	cdp	15, 0, cr0, cr11, cr0, {0}
   13f00:	1000004d 	andne	r0, r0, sp, asr #32
   13f04:	0051300b 	subseq	r3, r1, fp
   13f08:	700b1100 	andvc	r1, fp, r0, lsl #2
   13f0c:	12000057 	andne	r0, r0, #87	; 0x57
   13f10:	004a400b 	subeq	r4, sl, fp
   13f14:	010b1300 	mrseq	r1, (UNDEF: 59)
   13f18:	1400004e 	strne	r0, [r0], #-78	; 0xffffffb2
   13f1c:	0050640b 	subseq	r6, r0, fp, lsl #8
   13f20:	f50b1500 			; <UNDEFINED> instruction: 0xf50b1500
   13f24:	1600004b 	strne	r0, [r0], -fp, asr #32
   13f28:	0050b00b 	subseq	fp, r0, fp
   13f2c:	c60b1700 	strgt	r1, [fp], -r0, lsl #14
   13f30:	1800004e 	stmdane	r0, {r1, r2, r3, r6}
   13f34:	0049400b 	subeq	r4, r9, fp
   13f38:	170b1900 	strne	r1, [fp, -r0, lsl #18]
   13f3c:	1a000057 	bne	140a0 <__exidx_end+0xe788>
   13f40:	0050300b 	subseq	r3, r0, fp
   13f44:	ba0b1b00 	blt	2dab4c <__ccfg+0x2baba4>
   13f48:	1c00004d 	stcne	0, cr0, [r0], {77}	; 0x4d
   13f4c:	0047df0b 	subeq	sp, r7, fp, lsl #30
   13f50:	7b0b1d00 	blvc	2db358 <__ccfg+0x2bb3b0>
   13f54:	1e00004f 	cdpne	0, 0, cr0, cr0, cr15, {2}
   13f58:	004f670b 	subeq	r6, pc, fp, lsl #14
   13f5c:	4a0b1f00 	bmi	2dbb64 <__ccfg+0x2bbbbc>
   13f60:	20000054 	andcs	r0, r0, r4, asr r0
   13f64:	0054d50b 	subseq	sp, r4, fp, lsl #10
   13f68:	f60b2100 			; <UNDEFINED> instruction: 0xf60b2100
   13f6c:	22000056 	andcs	r0, r0, #86	; 0x56
   13f70:	004ced0b 	subeq	lr, ip, fp, lsl #26
   13f74:	a90b2300 	stmdbge	fp, {r8, r9, sp}
   13f78:	24000052 	strcs	r0, [r0], #-82	; 0xffffffae
   13f7c:	0054a20b 	subseq	sl, r4, fp, lsl #4
   13f80:	c60b2500 	strgt	r2, [fp], -r0, lsl #10
   13f84:	26000053 			; <UNDEFINED> instruction: 0x26000053
   13f88:	0053da0b 	subseq	sp, r3, fp, lsl #20
   13f8c:	ee0b2700 	cdp	7, 0, cr2, cr11, cr0, {0}
   13f90:	28000053 	stmdacs	r0, {r0, r1, r4, r6}
   13f94:	004b7e0b 	subeq	r7, fp, fp, lsl #28
   13f98:	2b0b2900 	blcs	2de3a0 <__ccfg+0x2be3f8>
   13f9c:	2a00004a 	bcs	140cc <__exidx_end+0xe7b4>
   13fa0:	004a530b 	subeq	r5, sl, fp, lsl #6
   13fa4:	af0b2b00 	svcge	0x000b2b00
   13fa8:	2c000057 	stccs	0, cr0, [r0], {87}	; 0x57
   13fac:	004a850b 	subeq	r8, sl, fp, lsl #10
   13fb0:	9f0b2d00 	svcls	0x000b2d00
   13fb4:	2e000055 	mcrcs	0, 0, r0, cr0, cr5, {2}
   13fb8:	0055b30b 	subseq	fp, r5, fp, lsl #6
   13fbc:	c70b2f00 	strgt	r2, [fp, -r0, lsl #30]
   13fc0:	30000055 	andcc	r0, r0, r5, asr r0
   13fc4:	004c6f0b 	subeq	r6, ip, fp, lsl #30
   13fc8:	490b3100 	stmdbmi	fp, {r8, ip, sp}
   13fcc:	3200004c 	andcc	r0, r0, #76	; 0x4c
   13fd0:	004f8f0b 	subeq	r8, pc, fp, lsl #30
   13fd4:	430b3300 	movwmi	r3, #45824	; 0xb300
   13fd8:	34000051 	strcc	r0, [r0], #-81	; 0xffffffaf
   13fdc:	0057c30b 	subseq	ip, r7, fp, lsl #6
   13fe0:	870b3500 	strhi	r3, [fp, -r0, lsl #10]
   13fe4:	36000047 	strcc	r0, [r0], -r7, asr #32
   13fe8:	004d6f0b 	subeq	r6, sp, fp, lsl #30
   13fec:	840b3700 	strhi	r3, [fp], #-1792	; 0xfffff900
   13ff0:	3800004d 	stmdacc	r0, {r0, r2, r3, r6}
   13ff4:	004ff10b 	subeq	pc, pc, fp, lsl #2
   13ff8:	1b0b3900 	blne	2e2400 <__ccfg+0x2c2458>
   13ffc:	3a000050 	bcc	14144 <__exidx_end+0xe82c>
   14000:	0057ec0b 	subseq	lr, r7, fp, lsl #24
   14004:	940b3b00 	strls	r3, [fp], #-2816	; 0xfffff500
   14008:	3c000052 	stccc	0, cr0, [r0], {82}	; 0x52
   1400c:	004d120b 	subeq	r1, sp, fp, lsl #4
   14010:	4f0b3d00 	svcmi	0x000b3d00
   14014:	3e000048 	cdpcc	0, 0, cr0, cr0, cr8, {2}
   14018:	0048040b 	subeq	r0, r8, fp, lsl #8
   1401c:	8f0b3f00 	svchi	0x000b3f00
   14020:	40000051 	andmi	r0, r0, r1, asr r0
   14024:	0053150b 	subseq	r1, r3, fp, lsl #10
   14028:	2c0b4100 	stfcss	f4, [fp], {-0}
   1402c:	42000054 	andmi	r0, r0, #84	; 0x54
   14030:	0050060b 	subseq	r0, r0, fp, lsl #12
   14034:	250b4300 	strcs	r4, [fp, #-768]	; 0xfffffd00
   14038:	44000058 	strmi	r0, [r0], #-88	; 0xffffffa8
   1403c:	0052bf0b 	subseq	fp, r2, fp, lsl #30
   14040:	6f0b4500 	svcvs	0x000b4500
   14044:	4600004a 	strmi	r0, [r0], -sl, asr #32
   14048:	004dd00b 	subeq	sp, sp, fp
   1404c:	140b4700 	strne	r4, [fp], #-1792	; 0xfffff900
   14050:	4800004f 	stmdami	r0, {r0, r1, r2, r3, r6}
   14054:	0047c30b 	subeq	ip, r7, fp, lsl #6
   14058:	e50b4900 	str	r4, [fp, #-2304]	; 0xfffff700
   1405c:	4a000048 	bmi	14184 <__exidx_end+0xe86c>
   14060:	004d260b 	subeq	r2, sp, fp, lsl #12
   14064:	420b4b00 	andmi	r4, fp, #0, 22
   14068:	4c000050 	stcmi	0, cr0, [r0], {80}	; 0x50
   1406c:	07020200 	streq	r0, [r2, -r0, lsl #4]
   14070:	00000d64 	andeq	r0, r0, r4, ror #26
   14074:	0003f30c 	andeq	pc, r3, ip, lsl #6
   14078:	0003e800 	andeq	lr, r3, r0, lsl #16
   1407c:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
   14080:	000003dd 	ldrdeq	r0, [r0], -sp
   14084:	03ff0405 	mvnseq	r0, #83886080	; 0x5000000
   14088:	ed0e0000 	stc	0, cr0, [lr, #-0]
   1408c:	02000003 	andeq	r0, r0, #3
   14090:	0c700801 	ldcleq	8, cr0, [r0], #-4
   14094:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
   14098:	0f000003 	svceq	0x00000003
   1409c:	000049b1 			; <UNDEFINED> instruction: 0x000049b1
   140a0:	1a014c05 	bne	670bc <__ccfg+0x47114>
   140a4:	000003e8 	andeq	r0, r0, r8, ror #7
   140a8:	004daa0f 	subeq	sl, sp, pc, lsl #20
   140ac:	01820500 	orreq	r0, r2, r0, lsl #10
   140b0:	0003e81a 	andeq	lr, r3, sl, lsl r8
   140b4:	03f80c00 	mvnseq	r0, #0, 24
   140b8:	04290000 	strteq	r0, [r9], #-0
   140bc:	000d0000 	andeq	r0, sp, r0
   140c0:	004fb309 	subeq	fp, pc, r9, lsl #6
   140c4:	0d2d0600 	stceq	6, cr0, [sp, #-0]
   140c8:	0000041e 	andeq	r0, r0, lr, lsl r4
   140cc:	00566f09 	subseq	r6, r6, r9, lsl #30
   140d0:	1c380600 	ldcne	6, cr0, [r8], #-0
   140d4:	000001f5 	strdeq	r0, [r0], -r5
   140d8:	004c830a 	subeq	r8, ip, sl, lsl #6
   140dc:	a2010700 	andge	r0, r1, #0, 14
   140e0:	06000000 	streq	r0, [r0], -r0
   140e4:	04b40e3a 	ldrteq	r0, [r4], #3642	; 0xe3a
   140e8:	d80b0000 	stmdale	fp, {}	; <UNPREDICTABLE>
   140ec:	00000047 	andeq	r0, r0, r7, asr #32
   140f0:	004eb30b 	subeq	fp, lr, fp, lsl #6
   140f4:	820b0100 	andhi	r0, fp, #0, 2
   140f8:	02000057 	andeq	r0, r0, #87	; 0x57
   140fc:	0057450b 	subseq	r4, r7, fp, lsl #10
   14100:	ec0b0300 	stc	3, cr0, [fp], {-0}
   14104:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   14108:	0055130b 	subseq	r1, r5, fp, lsl #6
   1410c:	fc0b0500 	stc2	5, cr0, [fp], {-0}
   14110:	06000049 	streq	r0, [r0], -r9, asr #32
   14114:	0049d60b 	subeq	sp, r9, fp, lsl #12
   14118:	e10b0700 	tst	fp, r0, lsl #14
   1411c:	0800004b 	stmdaeq	r0, {r0, r1, r3, r6}
   14120:	0050c60b 	subseq	ip, r0, fp, lsl #12
   14124:	030b0900 	movweq	r0, #47360	; 0xb900
   14128:	0a00004a 	beq	14258 <__exidx_end+0xe940>
   1412c:	0050cd0b 	subseq	ip, r0, fp, lsl #26
   14130:	680b0b00 	stmdavs	fp, {r8, r9, fp}
   14134:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
   14138:	0049ed0b 	subeq	lr, r9, fp, lsl #26
   1413c:	6a0b0d00 	bvs	2d7544 <__ccfg+0x2b759c>
   14140:	0e000055 	mcreq	0, 0, r0, cr0, cr5, {2}
   14144:	0053330b 	subseq	r3, r3, fp, lsl #6
   14148:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
   1414c:	00005462 	andeq	r5, r0, r2, ror #8
   14150:	41013f06 	tstmi	r1, r6, lsl #30
   14154:	09000004 	stmdbeq	r0, {r2}
   14158:	000054f6 	strdeq	r5, [r0], -r6
   1415c:	b40f4106 	strlt	r4, [pc], #-262	; 14164 <__exidx_end+0xe84c>
   14160:	09000004 	stmdbeq	r0, {r2}
   14164:	0000557e 	andeq	r5, r0, lr, ror r5
   14168:	2c0c4a06 			; <UNDEFINED> instruction: 0x2c0c4a06
   1416c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   14170:	00004995 	muleq	r0, r5, r9
   14174:	2c0c4b06 			; <UNDEFINED> instruction: 0x2c0c4b06
   14178:	10000000 	andne	r0, r0, r0
   1417c:	00005643 	andeq	r5, r0, r3, asr #12
   14180:	00558f09 	subseq	r8, r5, r9, lsl #30
   14184:	144c0600 	strbne	r0, [ip], #-1536	; 0xfffffa00
   14188:	000004f5 	strdeq	r0, [r0], -r5
   1418c:	04e40405 	strbteq	r0, [r4], #1029	; 0x405
   14190:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
   14194:	00004e7d 	andeq	r4, r0, sp, ror lr
   14198:	080f4e06 	stmdaeq	pc, {r1, r2, r9, sl, fp, lr}	; <UNPREDICTABLE>
   1419c:	05000005 	streq	r0, [r0, #-5]
   141a0:	0004fb04 	andeq	pc, r4, r4, lsl #22
   141a4:	54781200 	ldrbtpl	r1, [r8], #-512	; 0xfffffe00
   141a8:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
   141ac:	06000051 			; <UNDEFINED> instruction: 0x06000051
   141b0:	051f0d52 	ldreq	r0, [pc, #-3410]	; 13466 <__exidx_end+0xdb4e>
   141b4:	04050000 	streq	r0, [r5], #-0
   141b8:	0000050e 	andeq	r0, r0, lr, lsl #10
   141bc:	004bc713 	subeq	ip, fp, r3, lsl r7
   141c0:	67063400 	strvs	r3, [r6, -r0, lsl #8]
   141c4:	05501501 	ldrbeq	r1, [r0, #-1281]	; 0xfffffaff
   141c8:	bc140000 	ldclt	0, cr0, [r4], {-0}
   141cc:	0600004f 	streq	r0, [r0], -pc, asr #32
   141d0:	ed0f0169 	stfs	f0, [pc, #-420]	; 14034 <__exidx_end+0xe71c>
   141d4:	00000003 	andeq	r0, r0, r3
   141d8:	004bab14 	subeq	sl, fp, r4, lsl fp
   141dc:	016a0600 	cmneq	sl, r0, lsl #12
   141e0:	00055514 	andeq	r5, r5, r4, lsl r5
   141e4:	0e000400 	cfcpyseq	mvf0, mvf0
   141e8:	00000525 	andeq	r0, r0, r5, lsr #10
   141ec:	0000c80c 	andeq	ip, r0, ip, lsl #16
   141f0:	00056500 	andeq	r6, r5, r0, lsl #10
   141f4:	00331500 	eorseq	r1, r3, r0, lsl #10
   141f8:	002d0000 	eoreq	r0, sp, r0
   141fc:	0005500c 	andeq	r5, r5, ip
   14200:	00057000 	andeq	r7, r5, r0
   14204:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
   14208:	00000565 	andeq	r0, r0, r5, ror #10
   1420c:	004eeb0f 	subeq	lr, lr, pc, lsl #22
   14210:	016b0600 	cmneq	fp, r0, lsl #12
   14214:	00057003 	andeq	r7, r5, r3
   14218:	51130f00 	tstpl	r3, r0, lsl #30
   1421c:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
   14220:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14224:	b6160000 	ldrlt	r0, [r6], -r0
   14228:	07000054 	smlsdeq	r0, r4, r0, r0
   1422c:	0000a201 	andeq	sl, r0, r1, lsl #4
   14230:	01810600 	orreq	r0, r1, r0, lsl #12
   14234:	00063906 	andeq	r3, r6, r6, lsl #18
   14238:	48760b00 	ldmdami	r6!, {r8, r9, fp}^
   1423c:	0b000000 	bleq	14244 <__exidx_end+0xe92c>
   14240:	00004882 	andeq	r4, r0, r2, lsl #17
   14244:	488e0b02 	stmmi	lr, {r1, r8, r9, fp}
   14248:	0b030000 	bleq	d4250 <__ccfg+0xb42a8>
   1424c:	00004caf 	andeq	r4, r0, pc, lsr #25
   14250:	489a0b03 	ldmmi	sl, {r0, r1, r8, r9, fp}
   14254:	0b040000 	bleq	11425c <__ccfg+0xf42b4>
   14258:	00004e16 	andeq	r4, r0, r6, lsl lr
   1425c:	4efc0b04 	vmovmi.f64	d16, #196	; 0xbe200000 -0.1562500
   14260:	0b050000 	bleq	154268 <__ccfg+0x1342c0>
   14264:	00004e52 	andeq	r4, r0, r2, asr lr
   14268:	49860b05 	stmibmi	r6, {r0, r2, r8, r9, fp}
   1426c:	0b050000 	bleq	154274 <__ccfg+0x1342cc>
   14270:	000048a6 	andeq	r4, r0, r6, lsr #17
   14274:	507a0b06 	rsbspl	r0, sl, r6, lsl #22
   14278:	0b060000 	bleq	194280 <__ccfg+0x1742d8>
   1427c:	00004b9d 	muleq	r0, sp, fp
   14280:	50870b06 	addpl	r0, r7, r6, lsl #22
   14284:	0b060000 	bleq	19428c <__ccfg+0x1742e4>
   14288:	00005536 	andeq	r5, r0, r6, lsr r5
   1428c:	50940b06 	addspl	r0, r4, r6, lsl #22
   14290:	0b060000 	bleq	194298 <__ccfg+0x1742f0>
   14294:	000050d4 	ldrdeq	r5, [r0], -r4
   14298:	48b20b06 	ldmmi	r2!, {r1, r2, r8, r9, fp}
   1429c:	0b070000 	bleq	1d42a4 <__ccfg+0x1b42fc>
   142a0:	000051bc 			; <UNDEFINED> instruction: 0x000051bc
   142a4:	52090b07 	andpl	r0, r9, #7168	; 0x1c00
   142a8:	0b070000 	bleq	1d42b0 <__ccfg+0x1b4308>
   142ac:	00005571 	andeq	r5, r0, r1, ror r5
   142b0:	4a9a0b07 	bmi	fe696ed4 <_estack+0xde691ed4>
   142b4:	0b070000 	bleq	1d42bc <__ccfg+0x1b4314>
   142b8:	000052ec 	andeq	r5, r0, ip, ror #5
   142bc:	482b0b08 	stmdami	fp!, {r3, r8, r9, fp}
   142c0:	0b080000 	bleq	2142c8 <__ccfg+0x1f4320>
   142c4:	00005544 	andeq	r5, r0, r4, asr #10
   142c8:	53080b08 	movwpl	r0, #35592	; 0x8b08
   142cc:	00080000 	andeq	r0, r8, r0
   142d0:	00579c0f 	subseq	r9, r7, pc, lsl #24
   142d4:	019f0600 	orrseq	r0, pc, r0, lsl #12
   142d8:	00058f1f 	andeq	r8, r5, pc, lsl pc
   142dc:	533a0f00 	teqpl	sl, #0, 30
   142e0:	a2060000 	andge	r0, r6, #0
   142e4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142e8:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
   142ec:	0600004f 	streq	r0, [r0], -pc, asr #32
   142f0:	2c0c01a5 	stfcss	f0, [ip], {165}	; 0xa5
   142f4:	0f000000 	svceq	0x00000000
   142f8:	00005881 	andeq	r5, r0, r1, lsl #17
   142fc:	0c01a806 	stceq	8, cr10, [r1], {6}
   14300:	0000002c 	andeq	r0, r0, ip, lsr #32
   14304:	0049a50f 	subeq	sl, r9, pc, lsl #10
   14308:	01ab0600 			; <UNDEFINED> instruction: 0x01ab0600
   1430c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14310:	53440f00 	movtpl	r0, #20224	; 0x4f00
   14314:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   14318:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1431c:	f30f0000 	vhadd.u8	d0, d15, d0
   14320:	06000051 			; <UNDEFINED> instruction: 0x06000051
   14324:	2c0c01b1 	stfcss	f0, [ip], {177}	; 0xb1
   14328:	0f000000 	svceq	0x00000000
   1432c:	000051fe 	strdeq	r5, [r0], -lr
   14330:	0c01b406 	cfstrseq	mvf11, [r1], {6}
   14334:	0000002c 	andeq	r0, r0, ip, lsr #32
   14338:	00534e0f 	subseq	r4, r3, pc, lsl #28
   1433c:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
   14340:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14344:	50560f00 	subspl	r0, r6, r0, lsl #30
   14348:	ba060000 	blt	194350 <__ccfg+0x1743a8>
   1434c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14350:	e00f0000 	and	r0, pc, r0
   14354:	06000057 			; <UNDEFINED> instruction: 0x06000057
   14358:	2c0c01bd 	stfcss	f0, [ip], {189}	; 0xbd
   1435c:	0f000000 	svceq	0x00000000
   14360:	00005358 	andeq	r5, r0, r8, asr r3
   14364:	0c01c006 	stceq	0, cr12, [r1], {6}
   14368:	0000002c 	andeq	r0, r0, ip, lsr #32
   1436c:	0058b80f 	subseq	fp, r8, pc, lsl #16
   14370:	01c30600 	biceq	r0, r3, r0, lsl #12
   14374:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14378:	574c0f00 	strbpl	r0, [ip, -r0, lsl #30]
   1437c:	c6060000 	strgt	r0, [r6], -r0
   14380:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14384:	580f0000 	stmdapl	pc, {}	; <UNPREDICTABLE>
   14388:	06000057 			; <UNDEFINED> instruction: 0x06000057
   1438c:	2c0c01c9 	stfcss	f0, [ip], {201}	; 0xc9
   14390:	0f000000 	svceq	0x00000000
   14394:	00005764 	andeq	r5, r0, r4, ror #14
   14398:	0c01cc06 	stceq	12, cr12, [r1], {6}
   1439c:	0000002c 	andeq	r0, r0, ip, lsr #32
   143a0:	0057890f 	subseq	r8, r7, pc, lsl #18
   143a4:	01d00600 	bicseq	r0, r0, r0, lsl #12
   143a8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143ac:	58ab0f00 	stmiapl	fp!, {r8, r9, sl, fp}
   143b0:	d3060000 	movwle	r0, #24576	; 0x6000
   143b4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143b8:	0a0f0000 	beq	3d43c0 <__ccfg+0x3b4418>
   143bc:	0600004a 	streq	r0, [r0], -sl, asr #32
   143c0:	2c0c01d6 	stfcss	f0, [ip], {214}	; 0xd6
   143c4:	0f000000 	svceq	0x00000000
   143c8:	000047b3 			; <UNDEFINED> instruction: 0x000047b3
   143cc:	0c01d906 			; <UNDEFINED> instruction: 0x0c01d906
   143d0:	0000002c 	andeq	r0, r0, ip, lsr #32
   143d4:	004ccf0f 	subeq	ip, ip, pc, lsl #30
   143d8:	01dc0600 	bicseq	r0, ip, r0, lsl #12
   143dc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143e0:	49dd0f00 	ldmibmi	sp, {r8, r9, sl, fp}^
   143e4:	df060000 	svcle	0x00060000
   143e8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143ec:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
   143f0:	06000053 			; <UNDEFINED> instruction: 0x06000053
   143f4:	2c0c01e2 	stfcss	f0, [ip], {226}	; 0xe2
   143f8:	0f000000 	svceq	0x00000000
   143fc:	00004f32 	andeq	r4, r0, r2, lsr pc
   14400:	0c01e506 	cfstr32eq	mvfx14, [r1], {6}
   14404:	0000002c 	andeq	r0, r0, ip, lsr #32
   14408:	00516c0f 	subseq	r6, r1, pc, lsl #24
   1440c:	01e80600 	mvneq	r0, r0, lsl #12
   14410:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14414:	56780f00 	ldrbtpl	r0, [r8], -r0, lsl #30
   14418:	ef060000 	svc	0x00060000
   1441c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14420:	4f0f0000 	svcmi	0x000f0000
   14424:	06000058 			; <UNDEFINED> instruction: 0x06000058
   14428:	2c0c01f2 	stfcss	f0, [ip], {242}	; 0xf2
   1442c:	0f000000 	svceq	0x00000000
   14430:	0000585f 	andeq	r5, r0, pc, asr r8
   14434:	0c01f506 	cfstr32eq	mvfx15, [r1], {6}
   14438:	0000002c 	andeq	r0, r0, ip, lsr #32
   1443c:	004bb40f 	subeq	fp, fp, pc, lsl #8
   14440:	01f80600 	mvnseq	r0, r0, lsl #12
   14444:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14448:	56c00f00 	strbpl	r0, [r0], r0, lsl #30
   1444c:	fb060000 	blx	194456 <__ccfg+0x1744ae>
   14450:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14454:	d40f0000 	strle	r0, [pc], #-0	; 1445c <__exidx_end+0xeb44>
   14458:	06000052 			; <UNDEFINED> instruction: 0x06000052
   1445c:	2c0c01fe 	stfcss	f0, [ip], {254}	; 0xfe
   14460:	0f000000 	svceq	0x00000000
   14464:	00004d48 	andeq	r4, r0, r8, asr #26
   14468:	0c020206 	sfmeq	f0, 4, [r2], {6}
   1446c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14470:	0054c80f 	subseq	ip, r4, pc, lsl #16
   14474:	020a0600 	andeq	r0, sl, #0, 12
   14478:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1447c:	4c3b0f00 	ldcmi	15, cr0, [fp], #-0
   14480:	0d060000 	stceq	0, cr0, [r6, #-0]
   14484:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   14488:	2c0c0000 	stccs	0, cr0, [ip], {-0}
   1448c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
   14490:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
   14494:	4e320f00 	cdpmi	15, 3, cr0, cr2, cr0, {0}
   14498:	fb060000 	blx	1944a2 <__ccfg+0x1744fa>
   1449c:	07f30c03 	ldrbeq	r0, [r3, r3, lsl #24]!
   144a0:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
   144a4:	1b000004 	blne	144bc <__exidx_end+0xeba4>
   144a8:	15000008 	strne	r0, [r0, #-8]
   144ac:	00000033 	andeq	r0, r0, r3, lsr r0
   144b0:	950f000d 	strls	r0, [pc, #-13]	; 144ab <__exidx_end+0xeb93>
   144b4:	06000053 			; <UNDEFINED> instruction: 0x06000053
   144b8:	0b140584 	bleq	515ad0 <__ccfg+0x4f5b28>
   144bc:	16000008 	strne	r0, [r0], -r8
   144c0:	00004ef4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   144c4:	00a20107 	adceq	r0, r2, r7, lsl #2
   144c8:	8b060000 	blhi	1944d0 <__ccfg+0x174528>
   144cc:	08660605 	stmdaeq	r6!, {r0, r2, r9, sl}^
   144d0:	910b0000 	mrsls	r0, (UNDEF: 11)
   144d4:	0000004c 	andeq	r0, r0, ip, asr #32
   144d8:	0050e10b 	subseq	lr, r0, fp, lsl #2
   144dc:	610b0100 	mrsvs	r0, (UNDEF: 27)
   144e0:	02000048 	andeq	r0, r0, #72	; 0x48
   144e4:	0058110b 	subseq	r1, r8, fp, lsl #2
   144e8:	0f0b0300 	svceq	0x000b0300
   144ec:	04000054 	streq	r0, [r0], #-84	; 0xffffffac
   144f0:	0054020b 	subseq	r0, r4, fp, lsl #4
   144f4:	650b0500 	strvs	r0, [fp, #-1280]	; 0xfffffb00
   144f8:	06000049 	streq	r0, [r0], -r9, asr #32
   144fc:	58010f00 	stmdapl	r1, {r8, r9, sl, fp}
   14500:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
   14504:	08281505 	stmdaeq	r8!, {r0, r2, r8, sl, ip}
   14508:	e50f0000 	str	r0, [pc, #-0]	; 14510 <__exidx_end+0xebf8>
   1450c:	06000056 			; <UNDEFINED> instruction: 0x06000056
   14510:	33110799 	tstcc	r1, #40108032	; 0x2640000
   14514:	0f000000 	svceq	0x00000000
   14518:	00005382 	andeq	r5, r0, r2, lsl #7
   1451c:	0c07ae06 	stceq	14, cr10, [r7], {6}
   14520:	0000002c 	andeq	r0, r0, ip, lsr #32
   14524:	00565704 	subseq	r5, r6, r4, lsl #14
   14528:	167b0700 	ldrbtne	r0, [fp], -r0, lsl #14
   1452c:	000000a2 	andeq	r0, r0, r2, lsr #1
   14530:	00088d0e 	andeq	r8, r8, lr, lsl #26
   14534:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   14538:	00000a77 	andeq	r0, r0, r7, ror sl
   1453c:	0048fb04 	subeq	pc, r8, r4, lsl #22
   14540:	0f800700 	svceq	0x00800700
   14544:	0000002c 	andeq	r0, r0, ip, lsr #32
   14548:	0048fa04 	subeq	pc, r8, r4, lsl #20
   1454c:	16810700 	strne	r0, [r1], r0, lsl #14
   14550:	00000033 	andeq	r0, r0, r3, lsr r0
   14554:	00536204 	subseq	r6, r3, r4, lsl #4
   14558:	0f840700 	svceq	0x00840700
   1455c:	0000003a 	andeq	r0, r0, sl, lsr r0
   14560:	25040402 	strcs	r0, [r4, #-1026]	; 0xfffffbfe
   14564:	0200004a 	andeq	r0, r0, #74	; 0x4a
   14568:	4a1d0308 	bmi	755190 <__ccfg+0x7351e8>
   1456c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   14570:	00442d04 	subeq	r2, r4, r4, lsl #26
   14574:	03100200 	tsteq	r0, #0, 4
   14578:	0000541d 	andeq	r5, r0, sp, lsl r4
   1457c:	00537913 	subseq	r7, r3, r3, lsl r9
   14580:	ed070800 	stc	8, cr0, [r7, #-0]
   14584:	09100a01 	ldmdbeq	r0, {r0, r9, fp}
   14588:	6c170000 	ldcvs	0, cr0, [r7], {-0}
   1458c:	0700776f 	streq	r7, [r0, -pc, ror #14]
   14590:	a51a01ed 	ldrge	r0, [sl, #-493]	; 0xfffffe13
   14594:	00000008 	andeq	r0, r0, r8
   14598:	0048d014 	subeq	sp, r8, r4, lsl r0
   1459c:	01ed0700 	mvneq	r0, r0, lsl #14
   145a0:	0008a51f 	andeq	sl, r8, pc, lsl r5
   145a4:	18000400 	stmdane	r0, {sl}
   145a8:	01f40708 	mvnseq	r0, r8, lsl #14
   145ac:	00093209 	andeq	r3, r9, r9, lsl #4
   145b0:	00731900 	rsbseq	r1, r3, r0, lsl #18
   145b4:	1301f607 	movwne	pc, #5639	; 0x1607	; <UNPREDICTABLE>
   145b8:	000008e5 	andeq	r0, r0, r5, ror #17
   145bc:	006c6c19 	rsbeq	r6, ip, r9, lsl ip
   145c0:	0a01f707 	beq	921e4 <__ccfg+0x7223c>
   145c4:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   145c8:	49f41a00 	ldmibmi	r4!, {r9, fp, ip}^
   145cc:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
   145d0:	09100301 	ldmdbeq	r0, {r0, r8, r9}
   145d4:	320e0000 	andcc	r0, lr, #0
   145d8:	0c000009 	stceq	0, cr0, [r0], {9}
   145dc:	00000899 	muleq	r0, r9, r8
   145e0:	00000954 	andeq	r0, r0, r4, asr r9
   145e4:	00003315 	andeq	r3, r0, r5, lsl r3
   145e8:	0e00ff00 	cdpeq	15, 0, cr15, cr0, cr0, {0}
   145ec:	00000944 	andeq	r0, r0, r4, asr #18
   145f0:	0052160f 	subseq	r1, r2, pc, lsl #12
   145f4:	01fc0700 	mvnseq	r0, r0, lsl #14
   145f8:	00095416 	andeq	r5, r9, r6, lsl r4
   145fc:	49cc0f00 	stmibmi	ip, {r8, r9, sl, fp}^
   14600:	02070000 	andeq	r0, r7, #0
   14604:	09541602 	ldmdbeq	r4, {r1, r9, sl, ip}^
   14608:	221b0000 	andscs	r0, fp, #0
   1460c:	01000048 	tsteq	r0, r8, asr #32
   14610:	bd010224 	sfmlt	f0, 4, [r1, #-144]	; 0xffffff70
   14614:	64000008 	strvs	r0, [r0], #-8
   14618:	54000048 	strpl	r0, [r0], #-72	; 0xffffffb8
   1461c:	01000000 	mrseq	r0, (UNDEF: 0)
   14620:	00751c9c 			; <UNDEFINED> instruction: 0x00751c9c
   14624:	12022401 	andne	r2, r2, #16777216	; 0x1000000
   14628:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   1462c:	00005a7d 	andeq	r5, r0, sp, ror sl
   14630:	00005a79 	andeq	r5, r0, r9, ror sl
   14634:	0100761c 	tsteq	r0, ip, lsl r6
   14638:	bd1c0224 	lfmlt	f0, 4, [ip, #-144]	; 0xffffff70
   1463c:	a9000008 	stmdbge	r0, {r3}
   14640:	a500005a 	strge	r0, [r0, #-90]	; 0xffffffa6
   14644:	1d00005a 	stcne	0, cr0, [r0, #-360]	; 0xfffffe98
   14648:	01007575 	tsteq	r0, r5, ror r5
   1464c:	3f110226 	svccc	0x00110226
   14650:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   14654:	01007676 	tsteq	r0, r6, ror r6
   14658:	3f110227 	svccc	0x00110227
   1465c:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   14660:	28010077 	stmdacs	r1, {r0, r1, r2, r4, r5, r6}
   14664:	09320b02 	ldmdbeq	r2!, {r1, r8, r9, fp}
   14668:	181e0000 	ldmdane	lr, {}	; <UNPREDICTABLE>
   1466c:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
   14670:	00775f5f 	rsbseq	r5, r7, pc, asr pc
   14674:	16022801 	strne	r2, [r2], -r1, lsl #16
   14678:	00000932 	andeq	r0, r0, r2, lsr r9
   1467c:	0014181e 	andseq	r1, r4, lr, lsl r8
   14680:	588c1f00 	stmpl	ip, {r8, r9, sl, fp, ip}
   14684:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   14688:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   1468c:	5ad30000 	bpl	ff4d4694 <_estack+0xdf4cf694>
   14690:	5ad10000 	bpl	ff454698 <_estack+0xdf44f698>
   14694:	911f0000 	tstls	pc, r0
   14698:	01000058 	qaddeq	r0, r8, r0
   1469c:	b1160228 	tstlt	r6, r8, lsr #4
   146a0:	ec000008 	stc	0, cr0, [r0], {8}
   146a4:	e600005a 			; <UNDEFINED> instruction: 0xe600005a
   146a8:	1f00005a 	svcne	0x0000005a
   146ac:	00005896 	muleq	r0, r6, r8
   146b0:	16022801 	strne	r2, [r2], -r1, lsl #16
   146b4:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   146b8:	00005b1e 	andeq	r5, r0, lr, lsl fp
   146bc:	00005b1a 	andeq	r5, r0, sl, lsl fp
   146c0:	00589b1f 	subseq	r9, r8, pc, lsl fp
   146c4:	02280100 	eoreq	r0, r8, #0, 2
   146c8:	0008b116 	andeq	fp, r8, r6, lsl r1
   146cc:	005b4900 	subseq	r4, fp, r0, lsl #18
   146d0:	005b4700 	subseq	r4, fp, r0, lsl #14
   146d4:	56bb1f00 	ldrtpl	r1, [fp], r0, lsl #30
   146d8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   146dc:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   146e0:	5b600000 	blpl	18146e8 <__ccfg+0x17f4740>
   146e4:	5b5c0000 	blpl	17146ec <__ccfg+0x16f4744>
   146e8:	aa1f0000 	bge	7d46f0 <__ccfg+0x7b4748>
   146ec:	01000057 	qaddeq	r0, r7, r0
   146f0:	b1160228 	tstlt	r6, r8, lsr #4
   146f4:	88000008 	stmdahi	r0, {r3}
   146f8:	8400005b 	strhi	r0, [r0], #-91	; 0xffffffa5
   146fc:	1f00005b 	svcne	0x0000005b
   14700:	0000569d 	muleq	r0, sp, r6
   14704:	16022801 	strne	r2, [r2], -r1, lsl #16
   14708:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   1470c:	00005bb0 			; <UNDEFINED> instruction: 0x00005bb0
   14710:	00005bac 	andeq	r5, r0, ip, lsr #23
   14714:	0057971f 	subseq	r9, r7, pc, lsl r7
   14718:	02280100 	eoreq	r0, r8, #0, 2
   1471c:	0008b116 	andeq	fp, r8, r6, lsl r1
   14720:	005bd600 	subseq	sp, fp, r0, lsl #12
   14724:	005bd200 	subseq	sp, fp, r0, lsl #4
   14728:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <TrimAfterColdResetWakeupFromShutDown+0xa4>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
		packet[0] = NETWORK_ID;
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
		*p = message->tpe;p++;
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		*p = message->sender_id;p++;
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		*p = message->receiver_id;p++;
     104:	14000005 	strne	r0, [r0], #-5
		switch(message->tpe) {
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
     10c:	15150000 	ldrne	r0, [r5, #-0]
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		tcv_endp(packet);
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
}
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		finish;
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
				*p = message->status;p++;
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
     134:	00001301 	andeq	r1, r0, r1, lsl #6
				strncpy(p, message->record, sizeof(message->record));
     138:	03000d19 	movweq	r0, #3353	; 0xd19
				*p = message->padding;p++;
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				strncpy(p, message->record, sizeof(message->record));
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
				strncpy(p, message->record, sizeof(message->record));
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
				*p = message->record_index;p++;
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				*p = message->padding;
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
				break;
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
     164:	010b3905 	tsteq	fp, r5, lsl #18
     168:	1c000013 	stcne	0, cr0, [r0], {19}
bool init_node(struct Node* node){
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
    node->id  = 0;                  // default id value 0
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    node->index = 0;                // default entry count 0
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
    node->data_base.item_count = 0; // default no items in array
     178:	171d0000 	ldrne	r0, [sp, -r0]
    DEBUG_PRINT("Error initializing node...\n");
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
};
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
uint8_t generate_request_num(void){
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
    return (uint8_t) (rand() % 255);
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
     194:	00001349 	andeq	r1, r0, r9, asr #6
     198:	0300131f 	movweq	r1, #799	; 0x31f
}
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	01152000 	tsteq	r5, r0
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
     1a8:	34210000 	strtcc	r0, [r1], #-0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
};
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	3f13490b 	svccc	0x0013490b
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
        node->data_base.item_count -= 1;
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
};
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
fsm receiver(struct Node* node_db) {
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
		switch (tpe){
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
     220:	34290000 	strtcc	r0, [r9], #-0
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	3f13490b 	svccc	0x0013490b
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     244:	01120111 	tsteq	r2, r1, lsl r1
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
     24c:	052b0000 	streq	r0, [fp, #-0]!
				if (discovery_request_message->gid == node_db->gid){
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					response_message_0->gid = discovery_request_message->gid;
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
					response_message_0->request_number = discovery_request_message->request_number;
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
					response_message_0->sender_id = node_db->id;
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	01110b39 	tsteq	r1, r9, lsr fp
					call sender(response_message_0, done_case);
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
     270:	00065501 	andeq	r5, r6, r1, lsl #10
     274:	00342e00 	eorseq	r2, r4, r0, lsl #28
     278:	0b3a0e03 	bleq	e83a8c <__ccfg+0xe63ae4>
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     280:	0a021349 	beq	84fac <__ccfg+0x65004>
     284:	342f0000 	strtcc	r0, [pc], #-0	; 28c <receiver+0xbc>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	3a0e0300 	bcc	380e90 <__ccfg+0x360ee8>
     28c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	0013490b 	andseq	r4, r3, fp, lsl #18
     294:	010b3000 	mrseq	r3, (UNDEF: 11)
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     298:	01120111 	tsteq	r2, r1, lsl r1
     29c:	00001301 	andeq	r1, r0, r1, lsl #6
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	31011d31 	tstcc	r1, r1, lsr sp
     2a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     2ac:	000b5705 	andeq	r5, fp, r5, lsl #14
     2b0:	00053200 	andeq	r3, r5, r0, lsl #4
     2b4:	00001331 	andeq	r1, r0, r1, lsr r3
     2b8:	31000533 	tstcc	r0, r3, lsr r5
     2bc:	00060213 	andeq	r0, r6, r3, lsl r2
     2c0:	010b3400 	tsteq	fp, r0, lsl #8
     2c4:	13010655 	movwne	r0, #5717	; 0x1655
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	34350000 	ldrtcc	r0, [r5], #-0
     2cc:	3a080300 	bcc	200ed4 <__ccfg+0x1e0f2c>
					node_db->index+=1;
     2d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		tcv_endp(incoming_packet);
     2d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2d8:	36000006 	strcc	r0, [r0], -r6
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     2e0:	06550152 			; <UNDEFINED> instruction: 0x06550152
		proceed receiving;
     2e4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     2e8:	00000b57 	andeq	r0, r0, r7, asr fp
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ec:	03003437 	movweq	r3, #1079	; 0x437
     2f0:	3b0b3a0e 	blcc	2ceb30 <__ccfg+0x2aeb88>
		proceed receiving;
     2f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	00060213 	andeq	r0, r6, r3, lsl r2
     2fc:	010b3800 	tsteq	fp, r0, lsl #16
     300:	01120111 	tsteq	r2, r1, lsl r1
     304:	34390000 	ldrtcc	r0, [r9], #-0
     308:	3a080300 	bcc	200f10 <__ccfg+0x1e0f68>
		proceed receiving;
     30c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     314:	3a00000a 	bcc	344 <receiver+0x174>
     318:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     31c:	01120111 	tsteq	r2, r1, lsl r1
		proceed receiving;
     320:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	13010b57 	movwne	r0, #6999	; 0x1b57
     328:	343b0000 	ldrtcc	r0, [fp], #-0
     32c:	00133100 	andseq	r3, r3, r0, lsl #2
     330:	011d3c00 	tsteq	sp, r0, lsl #24
		proceed receiving;
     334:	01521331 	cmpeq	r2, r1, lsr r3
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	0b580655 	bleq	1601c94 <__ccfg+0x15e1cec>
     33c:	0b570559 	bleq	15c18a8 <__ccfg+0x15a1900>
     340:	00001301 	andeq	r1, r0, r1, lsl #6
     344:	3f012e3d 	svccc	0x00012e3d
		proceed receiving;
     348:	3a0e030c 	bcc	380f80 <__ccfg+0x360fd8>
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     350:	110c270b 	tstne	ip, fp, lsl #14
		proceed receiving;
     354:	40011201 	andmi	r1, r1, r1, lsl #4
}
     358:	0013010a 	andseq	r0, r3, sl, lsl #2
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	00053e00 	andeq	r3, r5, r0, lsl #28
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	0b3a0e03 	bleq	e83b74 <__ccfg+0xe63bcc>
     364:	0b390b3b 	bleq	e43058 <__ccfg+0xe230b0>
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     368:	06021349 	streq	r1, [r2], -r9, asr #6
     36c:	343f0000 	ldrtcc	r0, [pc], #-0	; 374 <receiver+0x1a4>
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     370:	3a0e0300 	bcc	380f78 <__ccfg+0x360fd0>
     374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     37c:	40000006 	andmi	r0, r0, r6
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     384:	0b3b0b3a 	bleq	ec3074 <__ccfg+0xea30cc>
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	01110b39 	tsteq	r1, r9, lsr fp
     38c:	34410000 	strbcc	r0, [r1], #-0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	3a0e0300 	bcc	380f98 <__ccfg+0x360ff0>
     394:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     398:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     39c:	4200000a 	andmi	r0, r0, #10
		strncpy(response_message->record, rec, 20);
     3a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3a4:	0b3b0b3a 	bleq	ec3094 <__ccfg+0xea30ec>
					call sender(response_message_4, done_case);
     3a8:	13490b39 	movtne	r0, #39737	; 0x9b39
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	00000b1c 	andeq	r0, r0, ip, lsl fp
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b0:	03003443 	movweq	r3, #1091	; 0x443
     3b4:	3b0b3a08 	blcc	2cebdc <__ccfg+0x2aec34>
     3b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3bc:	00060213 	andeq	r0, r6, r3, lsl r2
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3c8:	0b3b0b3a 	bleq	ec30b8 <__ccfg+0xea3110>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     3d0:	01111349 	tsteq	r1, r9, asr #6
     3d4:	0a400112 	beq	1000824 <__ccfg+0xfe087c>
     3d8:	00001301 	andeq	r1, r0, r1, lsl #6
     3dc:	3f012e45 	svccc	0x00012e45
     3e0:	3a0e030c 	bcc	381018 <__ccfg+0x361070>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3e8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     3ec:	010b2013 	tsteq	fp, r3, lsl r0
    return node->data_base.item_array[index];
     3f0:	46000013 			; <UNDEFINED> instruction: 0x46000013
     3f4:	08030005 	stmdaeq	r3, {r0, r2}
     3f8:	0b3b0b3a 	bleq	ec30e8 <__ccfg+0xea3140>
     3fc:	13490b39 	movtne	r0, #39737	; 0x9b39
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	05470000 	strbeq	r0, [r7, #-0]
    return node->data_base.item_array[index];
     404:	3a0e0300 	bcc	38100c <__ccfg+0x361064>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     40c:	0013490b 	andseq	r4, r3, fp, lsl #18
     410:	00344800 	eorseq	r4, r4, r0, lsl #16
		strncpy(response_message->record, rec, 20);
     414:	0b3a0e03 	bleq	e83c28 <__ccfg+0xe63c80>
     418:	0b390b3b 	bleq	e4310c <__ccfg+0xe23164>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	00001349 	andeq	r1, r0, r9, asr #6
     420:	03003449 	movweq	r3, #1097	; 0x449
     424:	3b0b3a08 	blcc	2cec4c <__ccfg+0x2aeca4>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     42c:	4a000013 	bmi	480 <receiver+0x2b0>
     430:	0000010b 	andeq	r0, r0, fp, lsl #2
     434:	3f002e4b 	svccc	0x00002e4b
				if(!response_flag){
     438:	3a0e030c 	bcc	381070 <__ccfg+0x3610c8>
     43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					response_flag=1;
     440:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
					trigger(&response_flag);
     444:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				switch(response_message_5->status){
     448:	000a4001 	andeq	r4, sl, r1
     44c:	00054c00 	andeq	r4, r5, r0, lsl #24
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
     454:	0b390b3b 	bleq	e43148 <__ccfg+0xe231a0>
     458:	0a021349 	beq	85184 <__ccfg+0x651dc>
     45c:	2e4d0000 	cdpcs	0, 4, cr0, cr13, cr0, {0}
     460:	3a0e0300 	bcc	381068 <__ccfg+0x3610c0>
     464:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     468:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     46c:	000b2013 	andeq	r2, fp, r3, lsl r0
     470:	012e4e00 			; <UNDEFINED> instruction: 0x012e4e00
     474:	01111331 	tsteq	r1, r1, lsr r3
     478:	0a400112 	beq	10008c8 <__ccfg+0xfe0920>
     47c:	00001301 	andeq	r1, r0, r1, lsl #6
     480:	3100054f 	tstcc	r0, pc, asr #10
     484:	000a0213 	andeq	r0, sl, r3, lsl r2
     488:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
     48c:	01111331 	tsteq	r1, r1, lsr r3
     490:	0a400112 	beq	10008e0 <__ccfg+0xfe0938>
     494:	01000000 	mrseq	r0, (UNDEF: 0)
     498:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     49c:	0e030b13 	vmoveq.32	d3[0], r0
     4a0:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     4a4:	06100111 			; <UNDEFINED> instruction: 0x06100111
     4a8:	24020000 	strcs	r0, [r2], #-0
						if (response_checker[0] == response_message_5->request_number){
     4ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4b0:	000e030b 	andeq	r0, lr, fp, lsl #6
     4b4:	00160300 	andseq	r0, r6, r0, lsl #6
							switch(response_checker[1]){
     4b8:	0b3a0e03 	bleq	e83ccc <__ccfg+0xe63d24>
     4bc:	0b390b3b 	bleq	e431b0 <__ccfg+0xe23208>
     4c0:	00001349 	andeq	r1, r0, r9, asr #6
     4c4:	0b002404 	bleq	94dc <__exidx_end+0x3bc4>
									proceed response_1_create;
     4c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
						proceed response_2;
     4cc:	05000008 	streq	r0, [r0, #-8]
									proceed response_1_delete;
     4d0:	13490026 	movtne	r0, #36902	; 0x9026
									proceed response_1_retrieve;
     4d4:	35060000 	strcc	r0, [r6, #-0]
						proceed response_2;
     4d8:	00134900 	andseq	r4, r3, r0, lsl #18
						proceed response_3;
     4dc:	000f0700 	andeq	r0, pc, r0, lsl #14
						proceed response_4;
     4e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	13080000 	movwne	r0, #32768	; 0x8000
     4e8:	3a0b0b01 	bcc	2c30f4 <__ccfg+0x2a314c>
}
     4ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f0:	0013010b 	andseq	r0, r3, fp, lsl #2
     4f4:	000d0900 	andeq	r0, sp, r0, lsl #18
     4f8:	0b3a0e03 	bleq	e83d0c <__ccfg+0xe63d64>
bool delete_all(struct Node *node){
     4fc:	0b390b3b 	bleq	e431f0 <__ccfg+0xe23248>
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	0b0b1349 	bleq	2c522c <__ccfg+0x2a5284>
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	0b0c0b0d 	bleq	303140 <__ccfg+0x2e3198>
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	03000d0a 	movweq	r0, #3338	; 0xd0a
            node->data_base.item_array[i].timestamp = 0;
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    node->data_base.item_count = 0;
     518:	000b3813 	andeq	r3, fp, r3, lsl r8
}
     51c:	00340b00 	eorseq	r0, r4, r0, lsl #22
        return true;
     520:	0b3a0e03 	bleq	e83d34 <__ccfg+0xe63d8c>
fsm root {
     524:	0b390b3b 	bleq	e43218 <__ccfg+0xe23270>
     528:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 40c <receiver+0x23c>
     52c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     530:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     534:	00130113 	andseq	r0, r3, r3, lsl r1
     538:	00210d00 	eoreq	r0, r1, r0, lsl #26
     53c:	160e0000 	strne	r0, [lr], -r0
     540:	3a0e0300 	bcc	381148 <__ccfg+0x3611a0>
     544:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     548:	0013490b 	andseq	r4, r3, fp, lsl #18
     54c:	01150f00 	tsteq	r5, r0, lsl #30
     550:	13010c27 	movwne	r0, #7207	; 0x1c27
     554:	05100000 	ldreq	r0, [r0, #-0]
     558:	00134900 	andseq	r4, r3, r0, lsl #18
     55c:	00341100 	eorseq	r1, r4, r0, lsl #2
     560:	0b3a0e03 	bleq	e83d74 <__ccfg+0xe63dcc>
     564:	0b39053b 	bleq	e41a58 <__ccfg+0xe21ab0>
     568:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 44c <receiver+0x27c>
     56c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     570:	0b011312 	bleq	451c0 <__ccfg+0x25218>
     574:	3b0b3a0b 	blcc	2ceda8 <__ccfg+0x2aee00>
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	010b3905 	tsteq	fp, r5, lsl #18
     57c:	13000013 	movwne	r0, #19
     580:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		init_node(node_db);
     584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		phys_cc1350(0, MAX_PKT_LEN);
     588:	13490b39 	movtne	r0, #39737	; 0x9b39
     58c:	00000b38 	andeq	r0, r0, r8, lsr fp
		tcv_plug (0, &plug_null);
     590:	03011314 	movweq	r1, #4884	; 0x1314
     594:	3a0b0b0e 	bcc	2c31d4 <__ccfg+0x2a322c>
		sfd = tcv_open (WNONE, 0, 0);
     598:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     59c:	0013010b 	andseq	r0, r3, fp, lsl #2
     5a0:	00211500 	eoreq	r1, r1, r0, lsl #10
     5a4:	0b2f1349 	bleq	bc52d0 <__ccfg+0xba5328>
     5a8:	34160000 	ldrcc	r0, [r6], #-0
			diag("Cannot open tcv interface");
     5ac:	3a0e0300 	bcc	3811b4 <__ccfg+0x36120c>
     5b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			halt();
     5b4:	0013490b 	andseq	r4, r3, fp, lsl #18
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b8:	00341700 	eorseq	r1, r4, r0, lsl #14
     5bc:	0b3a0e03 	bleq	e83dd0 <__ccfg+0xe63e28>
		runfsm receiver(node_db);
     5c0:	0b390b3b 	bleq	e432b4 <__ccfg+0xe2330c>
     5c4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 4a8 <receiver+0x2d8>
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	00000a02 	andeq	r0, r0, r2, lsl #20
     5cc:	03003418 	movweq	r3, #1048	; 0x418
     5d0:	3b0b3a0e 	blcc	2cee10 <__ccfg+0x2aee68>
     5d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     5d8:	000a0213 	andeq	r0, sl, r3, lsl r2
     5dc:	00341900 	eorseq	r1, r4, r0, lsl #18
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	0b3a1347 	bleq	e85304 <__ccfg+0xe6535c>
     5e4:	0b39053b 	bleq	e41ad8 <__ccfg+0xe21b30>
     5e8:	00000a02 	andeq	r0, r0, r2, lsl #20
		switch(CHOICE) {
     5ec:	3f012e1a 	svccc	0x00012e1a
     5f0:	3a0e030c 	bcc	381228 <__ccfg+0x361280>
     5f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     5fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     600:	010a4001 	tsteq	sl, r1
     604:	1b000013 	blne	658 <root+0x134>
     608:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     60c:	00001301 	andeq	r1, r0, r1, lsl #6
     610:	0300341c 	movweq	r3, #1052	; 0x41c
     614:	3b0b3a08 	blcc	2cee3c <__ccfg+0x2aee94>
     618:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				proceed menu;
     61c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     620:	1331001d 	teqne	r1, #29
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	01120111 	tsteq	r2, r1, lsl r1
     628:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	00000b57 	andeq	r0, r0, r7, asr fp
     630:	3f012e1e 	svccc	0x00012e1e
     634:	3a0e030c 	bcc	38126c <__ccfg+0x3612c4>
		DEBUG_PRINT("setting node group ID");
     638:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     640:	010a4001 	tsteq	sl, r1
		proceed menu;
     644:	1f000013 	svcne	0x00000013
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     64c:	0b3b0b3a 	bleq	ec333c <__ccfg+0xea3394>
		if(node_db->id < 1 || node_db->id > 25){
     650:	00000b39 	andeq	r0, r0, r9, lsr fp
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	31011d20 	tstcc	r1, r0, lsr #26
     658:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		if(node_db->id < 1 || node_db->id > 25){
     65c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     660:	010b5705 	tsteq	fp, r5, lsl #14
     664:	21000013 	tstcs	r0, r3, lsl r0
			strncpy(reason, "Out of Range", 50);
     668:	13310005 	teqne	r1, #5
     66c:	1d220000 	stcne	0, cr0, [r2, #-0]
			proceed invalid_node_id;
     670:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     674:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
				strncpy(reason, "ID is already in use", 50);
     678:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     67c:	0013010b 	andseq	r0, r3, fp, lsl #2
			if(node_db->id == node_db->nnodes[i]){
     680:	010b2300 	mrseq	r2, (UNDEF: 59)
     684:	00000655 	andeq	r0, r0, r5, asr r6
     688:	31000a24 	tstcc	r0, r4, lsr #20
				strncpy(reason, "ID is already in use", 50);
     68c:	00011113 	andeq	r1, r1, r3, lsl r1
     690:	001d2500 	andseq	r2, sp, r0, lsl #10
     694:	01521331 	cmpeq	r2, r1, lsr r3
				proceed invalid_node_id;
     698:	0b580655 	bleq	1601ff4 <__ccfg+0x15e204c>
		for(int i = 0; i < 25; i++){
     69c:	0b570559 	bleq	15c1c08 <__ccfg+0x15a1c60>
     6a0:	1d260000 	stcne	0, cr0, [r6, #-0]
		proceed menu;
     6a4:	11133101 	tstne	r3, r1, lsl #2
     6a8:	58011201 	stmdapl	r1, {r0, r9, ip}
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     6b0:	0013010b 	andseq	r0, r3, fp, lsl #2
     6b4:	011d2700 	tsteq	sp, r0, lsl #14
     6b8:	01111331 	tsteq	r1, r1, lsr r3
		proceed get_new_node_id;
     6bc:	0b580112 	bleq	1600b0c <__ccfg+0x15e0b64>
     6c0:	0b570559 	bleq	15c1c2c <__ccfg+0x15a1c84>
		if (!clear_node_neighbour_array(node_db)){
     6c4:	1d280000 	stcne	0, cr0, [r8, #-0]
     6c8:	11133100 	tstne	r3, r0, lsl #2
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	58011201 	stmdapl	r1, {r0, r9, ip}
     6d0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     6d4:	2900000b 	stmdbcs	r0, {r0, r1, r3}
			proceed error;
     6d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6e0:	13490b39 	movtne	r0, #39737	; 0x9b39
		request_packet->gid = node_db->gid;
     6e4:	00000602 	andeq	r0, r0, r2, lsl #12
     6e8:	03012e2a 	movweq	r2, #7722	; 0x1e2a
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	3b0b3a0e 	blcc	2cef2c <__ccfg+0x2aef84>
		request_packet->request_number = generate_request_num();
     6f0:	200b3905 	andcs	r3, fp, r5, lsl #18
     6f4:	0013010b 	andseq	r0, r3, fp, lsl #2
		call sender(request_packet, wait_discovery);
     6f8:	000a2b00 	andeq	r2, sl, r0, lsl #22
     6fc:	0b3a0e03 	bleq	e83f10 <__ccfg+0xe63f68>
		request_packet->receiver_id=0;
     700:	0b39053b 	bleq	e41bf4 <__ccfg+0xe21c4c>
		call sender(request_packet, wait_discovery);
     704:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     708:	030c3f01 	movweq	r3, #52993	; 0xcf01
     70c:	3b0b3a0e 	blcc	2cef4c <__ccfg+0x2aefa4>
			release;
     710:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
				proceed get_new_node_id;
     714:	1201110c 	andne	r1, r1, #12, 2
				proceed clear_neighbour_array;
     718:	010a4001 	tsteq	sl, r1
				proceed create_proto_start;
     71c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
				proceed start_delete_proto;
     720:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
				proceed retrieve_proto;
     724:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				proceed display_db;
     728:	13490b39 	movtne	r0, #39737	; 0x9b39
				proceed del_local;
     72c:	00000602 	andeq	r0, r0, r2, lsl #12
		if (discovery_wait_flag == 0){
     730:	11010b2e 	tstne	r1, lr, lsr #22
			discovery_wait_flag=1;
     734:	01011201 	tsteq	r1, r1, lsl #4
     738:	2f000013 	svccs	0x00000013
			delay(3000, find_proto_start);
     73c:	13310034 	teqne	r1, #52	; 0x34
     740:	0b300000 	bleq	c00748 <__ccfg+0xbe07a0>
		if (discovery_wait_flag == 1){
     744:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
			discovery_wait_flag=0;
     748:	31000006 	tstcc	r0, r6
     74c:	13310034 	teqne	r1, #52	; 0x34
			delay(3000, display_neighbour_nodes);
     750:	00000602 	andeq	r0, r0, r2, lsl #12
     754:	31011d32 	tstcc	r1, r2, lsr sp
     758:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     75c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     760:	000b570b 	andeq	r5, fp, fp, lsl #14
     764:	011d3300 	tsteq	sp, r0, lsl #6
     768:	01521331 	cmpeq	r2, r1, lsr r3
     76c:	0b580655 	bleq	16020c8 <__ccfg+0x15e2120>
     770:	0b570559 	bleq	15c1cdc <__ccfg+0x15a1d34>
     774:	05340000 	ldreq	r0, [r4, #-0]!
     778:	3a080300 	bcc	201380 <__ccfg+0x1e13d8>
     77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     780:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     784:	3500000a 	strcc	r0, [r0, #-10]
     788:	13310005 	teqne	r1, #5
     78c:	00000602 	andeq	r0, r0, r2, lsl #12
     790:	03003436 	movweq	r3, #1078	; 0x436
     794:	3b0b3a08 	blcc	2cefbc <__ccfg+0x2af014>
     798:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     79c:	00060213 	andeq	r0, r6, r3, lsl r2
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	010b3700 	tsteq	fp, r0, lsl #14
     7a4:	01120111 	tsteq	r2, r1, lsl r1
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     7a8:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     7ac:	3a0e0300 	bcc	3813b4 <__ccfg+0x36140c>
			if (node_db->nnodes[i]=='\0') break;
     7b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b4:	000b200b 	andeq	r2, fp, fp
     7b8:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
		proceed menu;
     7bc:	0b3a0e03 	bleq	e83fd0 <__ccfg+0xe64028>
     7c0:	0b39053b 	bleq	e41cb4 <__ccfg+0xe21d0c>
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c4:	01110c27 	tsteq	r1, r7, lsr #24
     7c8:	0a400112 	beq	1000c18 <__ccfg+0xfe0c70>
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	00001301 	andeq	r1, r0, r1, lsl #6
     7d0:	03012e3a 	movweq	r2, #7738	; 0x1e3a
			strncpy(reason, "Error: improper ID", 50);
     7d4:	3b0b3a0e 	blcc	2cf014 <__ccfg+0x2af06c>
     7d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     7dc:	1113490c 	tstne	r3, ip, lsl #18
			proceed error;
     7e0:	40011201 	andmi	r1, r1, r1, lsl #4
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	0013010a 	andseq	r0, r3, sl, lsl #2
     7e8:	00053b00 	andeq	r3, r5, r0, lsl #22
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	0b3a0803 	bleq	e82800 <__ccfg+0xe62858>
     7f0:	0b39053b 	bleq	e41ce4 <__ccfg+0xe21d3c>
     7f4:	06021349 	streq	r1, [r2], -r9, asr #6
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
		create_message->tpe = CREATE_RECORD;
     7fc:	3a0e0301 	bcc	381408 <__ccfg+0x361460>
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		create_message->gid = node_db->gid;
     804:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		create_message->tpe = CREATE_RECORD;
     808:	010a4001 	tsteq	sl, r1
		create_message->request_number = generate_request_num();
     80c:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     810:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 760 <root+0x23c>
		create_message->sender_id = node_db->id;
     814:	0b3a0e03 	bleq	e84028 <__ccfg+0xe64080>
     818:	0b39053b 	bleq	e41d0c <__ccfg+0xe21d64>
     81c:	13490c27 	movtne	r0, #39975	; 0x9c27
		strncpy(create_message->record, user_provided_record, 20);
     820:	13010b20 	movwne	r0, #6944	; 0x1b20
     824:	053e0000 	ldreq	r0, [lr, #-0]!
     828:	3a080300 	bcc	201430 <__ccfg+0x1e1488>
		response_checker[0] = create_message->request_number;
     82c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		call sender(&create_message, wait);
     830:	0013490b 	andseq	r4, r3, fp, lsl #18
		response_checker[1] = create_message->tpe;
     834:	000a3f00 	andeq	r3, sl, r0, lsl #30
     838:	0b3a0803 	bleq	e8284c <__ccfg+0xe628a4>
		call sender(&create_message, wait);
     83c:	0b39053b 	bleq	e41d30 <__ccfg+0xe21d88>
     840:	34400000 	strbcc	r0, [r0], #-0
     844:	3a0e0300 	bcc	38144c <__ccfg+0x3614a4>
     848:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     850:	41000006 	tstmi	r0, r6
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	0803000a 	stmdaeq	r3, {r1, r3}
     858:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			strncpy(reason, "Error: improper node ID", 50);
     85c:	01110b39 	tsteq	r1, r9, lsr fp
     860:	1d420000 	stclne	0, cr0, [r2, #-0]
     864:	11133101 	tstne	r3, r1, lsl #2
			proceed error;
     868:	58011201 	stmdapl	r1, {r0, r9, ip}
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     870:	0013010b 	andseq	r0, r3, fp, lsl #2
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	011d4300 	tsteq	sp, r0, lsl #6
     878:	01111331 	tsteq	r1, r1, lsr r3
     87c:	0b580112 	bleq	1600ccc <__ccfg+0x15e0d24>
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	0b570b59 	bleq	15c35ec <__ccfg+0x15a3644>
		delete_record->tpe = DELETE_RECORD;
     884:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	3a0e0301 	bcc	381494 <__ccfg+0x3614ec>
		delete_record->gid = node_db->gid;
     88c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		delete_record->tpe = DELETE_RECORD;
     890:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		delete_record->request_number = generate_request_num();
     894:	010b2013 	tsteq	fp, r3, lsl r0
     898:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
		delete_record->sender_id = node_db->id;
     89c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     8a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8a4:	13490b39 	movtne	r0, #39737	; 0x9b39
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	00000b20 	andeq	r0, r0, r0, lsr #22
		response_checker[0] = delete_record->request_number;
     8ac:	03012e46 	movweq	r2, #7750	; 0x1e46
     8b0:	3b0b3a0e 	blcc	2cf0f0 <__ccfg+0x2af148>
		call sender(&delete_record, wait);
     8b4:	200b390b 	andcs	r3, fp, fp, lsl #18
     8b8:	0013010b 	andseq	r0, r3, fp, lsl #2
     8bc:	00344700 	eorseq	r4, r4, r0, lsl #14
     8c0:	0b3a0803 	bleq	e828d4 <__ccfg+0xe6292c>
     8c4:	0b390b3b 	bleq	e435b8 <__ccfg+0xe23610>
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	00001349 	andeq	r1, r0, r9, asr #6
     8cc:	00010b48 	andeq	r0, r1, r8, asr #22
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
     8d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     8d8:	0b3b0b3a 	bleq	ec35c8 <__ccfg+0xea3620>
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     8e0:	01120111 	tsteq	r2, r1, lsl r1
			proceed error;
     8e4:	13010a40 	movwne	r0, #6720	; 0x1a40
     8e8:	054a0000 	strbeq	r0, [sl, #-0]
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	3a080300 	bcc	2014f4 <__ccfg+0x1e154c>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8f8:	4b000006 	blmi	918 <root+0x3f4>
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     900:	0b3b0b3a 	bleq	ec35f0 <__ccfg+0xea3648>
		retrieve_record->gid = node_db->gid;
     904:	13490b39 	movtne	r0, #39737	; 0x9b39
     908:	00000a02 	andeq	r0, r0, r2, lsl #20
     90c:	03000a4c 	movweq	r0, #2636	; 0xa4c
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	3b0b3a0e 	blcc	2cf150 <__ccfg+0x2af1a8>
		retrieve_record->request_number = generate_request_num();
     914:	110b390b 	tstne	fp, fp, lsl #18
     918:	4d000001 	stcmi	0, cr0, [r0, #-4]
		retrieve_record->sender_id = node_db->id;
     91c:	1331001d 	teqne	r1, #29
		response_checker[0] = retrieve_record->request_number;
     920:	06550152 			; <UNDEFINED> instruction: 0x06550152
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	0b590b58 	bleq	164368c <__ccfg+0x16236e4>
		retrieve_record->record_index = user_provided_index;
     928:	00000b57 	andeq	r0, r0, r7, asr fp
		call sender(&retrieve_record, wait);
     92c:	3f002e4e 	svccc	0x00002e4e
		response_checker[1] = retrieve_record->tpe;
     930:	3a0e030c 	bcc	381568 <__ccfg+0x3615c0>
     934:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		call sender(&retrieve_record, wait);
     938:	110c270b 	tstne	ip, fp, lsl #14
     93c:	40011201 	andmi	r1, r1, r1, lsl #4
     940:	4f00000a 	svcmi	0x0000000a
     944:	08030005 	stmdaeq	r3, {r0, r2}
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	0b3b0b3a 	bleq	ec3638 <__ccfg+0xea3690>
     94c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if(node_db->data_base.item_count != 0){
     950:	00000a02 	andeq	r0, r0, r2, lsl #20
     954:	03012e50 	movweq	r2, #7760	; 0x1e50
		proceed menu;
     958:	3b0b3a0e 	blcc	2cf198 <__ccfg+0x2af1f0>
     95c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		delete_all(node_db);
     960:	010b200c 	tsteq	fp, ip
     964:	51000013 	tstpl	r0, r3, lsl r0
		proceed menu;
     968:	08030005 	stmdaeq	r3, {r0, r2}
		delay(3000, timeout);
     96c:	0b3b0b3a 	bleq	ec365c <__ccfg+0xea36b4>
     970:	13490b39 	movtne	r0, #39737	; 0x9b39
     974:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
		when(&response_flag, menu);
     978:	3a0e0301 	bcc	381584 <__ccfg+0x3615dc>
     97c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	200c270b 	andcs	r2, ip, fp, lsl #14
     984:	0013010b 	andseq	r0, r3, fp, lsl #2
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	00055300 	andeq	r5, r5, r0, lsl #6
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	0b3a0e03 	bleq	e841a0 <__ccfg+0xe641f8>
     990:	0b39053b 	bleq	e41e84 <__ccfg+0xe21edc>
     994:	00001349 	andeq	r1, r0, r9, asr #6
     998:	03002e54 	movweq	r2, #3668	; 0xe54
     99c:	3b0b3a0e 	blcc	2cf1dc <__ccfg+0x2af234>
     9a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     9a4:	000b200c 	andeq	r2, fp, ip
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
     9ac:	0b3a0e03 	bleq	e841c0 <__ccfg+0xe64218>
     9b0:	0b390b3b 	bleq	e436a4 <__ccfg+0xe236fc>
     9b4:	13490c27 	movtne	r0, #39975	; 0x9c27
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	13010b20 	movwne	r0, #6944	; 0x1b20
     9bc:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	3a0e0300 	bcc	3815c8 <__ccfg+0x361620>
     9c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		proceed menu;
     9c8:	200c270b 	andcs	r2, ip, fp, lsl #14
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	5700000b 	strpl	r0, [r0, -fp]
     9d0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     9d4:	0b3b0b3a 	bleq	ec36c4 <__ccfg+0xea371c>
		proceed menu;
     9d8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
     9dc:	0b201349 	bleq	805708 <__ccfg+0x7e5760>
     9e0:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
     9e4:	3a0e0300 	bcc	3815ec <__ccfg+0x361644>
     9e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ec:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     9f0:	000b2013 	andeq	r2, fp, r3, lsl r0
     9f4:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
     9f8:	01111331 	tsteq	r1, r1, lsr r3
     9fc:	0a400112 	beq	1000e4c <__ccfg+0xfe0ea4>
     a00:	01000000 	mrseq	r0, (UNDEF: 0)
     a04:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a08:	0e030b13 	vmoveq.32	d3[0], r0
     a0c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     a10:	06100111 			; <UNDEFINED> instruction: 0x06100111
     a14:	24020000 	strcs	r0, [r2], #-0
     a18:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a1c:	000e030b 	andeq	r0, lr, fp, lsl #6
     a20:	00160300 	andseq	r0, r6, r0, lsl #6
     a24:	0b3a0e03 	bleq	e84238 <__ccfg+0xe64290>
     a28:	0b390b3b 	bleq	e4371c <__ccfg+0xe23774>
     a2c:	00001349 	andeq	r1, r0, r9, asr #6
static void devinit_uart (int devnum) {
     a30:	0b002404 	bleq	9a48 <__exidx_end+0x4130>
	adddevfunc (ioreq_uart_a, devnum);
     a34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     a38:	05000008 	streq	r0, [r0, #-8]
void udelay (volatile word n) {
     a3c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     a40:	0b3a0b0b 	bleq	e83674 <__ccfg+0xe636cc>
	while (n) {
     a44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a48:	0d060000 	stceq	0, cr0, [r6, #-0]
}
     a4c:	490e0300 	stmdbmi	lr, {r8, r9}
	while (n--);
     a50:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     a54:	0700000c 	streq	r0, [r0, -ip]
     a58:	0b0b000f 	bleq	2c0a9c <__ccfg+0x2a0af4>
		n--;
     a5c:	26080000 	strcs	r0, [r8], -r0
     a60:	00134900 	andseq	r4, r3, r0, lsl #18
     a64:	00350900 	eorseq	r0, r5, r0, lsl #18
void mdelay (volatile word n) {
     a68:	00001349 	andeq	r1, r0, r9, asr #6
     a6c:	0b000f0a 	bleq	469c <NOROM_ChipInfo_GetChipFamily+0x30>
	while (n) {
     a70:	0013490b 	andseq	r4, r3, fp, lsl #18
     a74:	01130b00 	tsteq	r3, r0, lsl #22
}
     a78:	0b3a0b0b 	bleq	e836ac <__ccfg+0xe63704>
		udelay (999);
     a7c:	0b390b3b 	bleq	e43770 <__ccfg+0xe237c8>
     a80:	00001301 	andeq	r1, r0, r1, lsl #6
		n--;
     a84:	03000d0c 	movweq	r0, #3340	; 0xd0c
     a88:	3b0b3a0e 	blcc	2cf2c8 <__ccfg+0x2af320>
     a8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a90:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
void __pi_ondomain (lword d) {
     a94:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     a98:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
		if (__pi_systat.effpdm > 1)
     a9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
			__pi_systat.effpdm = 1;
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
	PRCMPowerDomainOn (d);
     aa8:	00000b38 	andeq	r0, r0, r8, lsr fp
     aac:	0300340e 	movweq	r3, #1038	; 0x40e
     ab0:	3b0b3a0e 	blcc	2cf2f0 <__ccfg+0x2af348>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ab8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     abc:	0f00000c 	svceq	0x0000000c
	__pi_systat.ondmns |= d;
     ac0:	13490101 	movtne	r0, #37121	; 0x9101
     ac4:	00001301 	andeq	r1, r0, r1, lsl #6
}
     ac8:	00002110 	andeq	r2, r0, r0, lsl r1
     acc:	00161100 	andseq	r1, r6, r0, lsl #2
void __pi_offdomain (lword d) {
     ad0:	0b3a0e03 	bleq	e842e4 <__ccfg+0xe6433c>
     ad4:	0b39053b 	bleq	e41fc8 <__ccfg+0xe22020>
	PRCMPowerDomainOff (d);
     ad8:	00001349 	andeq	r1, r0, r9, asr #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	27011512 	smladcs	r1, r2, r5, r1
     ae0:	0013010c 	andseq	r0, r3, ip, lsl #2
     ae4:	00051300 	andeq	r1, r5, r0, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	00001349 	andeq	r1, r0, r9, asr #6
     aec:	03003414 	movweq	r3, #1044	; 0x414
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	3b0b3a0e 	blcc	2cf330 <__ccfg+0x2af388>
     af4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     afc:	1500000c 	strne	r0, [r0, #-12]
	__pi_systat.ondmns &= ~d;
     b00:	0b0b0113 	bleq	2c0f54 <__ccfg+0x2a0fac>
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     b08:	13010b39 	movwne	r0, #6969	; 0x1b39
     b0c:	0d160000 	ldceq	0, cr0, [r6, #-0]
void __pi_syserror (word ec, const char *m) {
     b10:	3a0e0300 	bcc	381718 <__ccfg+0x361770>
	diag ("SYSERR: %x, %s", ec, m);
     b14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	1700000b 	strne	r0, [r0, -fp]
     b20:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     b24:	0b3a0b0b 	bleq	e83758 <__ccfg+0xe637b0>
     b28:	0b39053b 	bleq	e4201c <__ccfg+0xe22074>
		all_leds_blink;
     b2c:	00001301 	andeq	r1, r0, r1, lsl #6
     b30:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
     b34:	000b2f13 	andeq	r2, fp, r3, lsl pc
     b38:	01151900 	tsteq	r5, r0, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	13490c27 	movtne	r0, #39975	; 0x9c27
     b40:	00001301 	andeq	r1, r0, r1, lsl #6
     b44:	4700341a 	smladmi	r0, sl, r4, r3
     b48:	3b0b3a13 	blcc	2cf39c <__ccfg+0x2af3f4>
     b4c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
     b50:	1b00000a 	blne	b80 <tci_run_delay_timer+0x1c>
	while (1) {
     b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b58:	0b3b0b3a 	bleq	ec3848 <__ccfg+0xea38a0>
     b5c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b60:	0a020c3f 	beq	83c64 <__ccfg+0x63cbc>
void tci_run_delay_timer () {
     b64:	341c0000 	ldrcc	r0, [ip], #-0
	setdel = __pi_mintk - __pi_old;
     b68:	3a0e0300 	bcc	381770 <__ccfg+0x3617c8>
     b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b74:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b80:	13490b39 	movtne	r0, #39737	; 0x9b39
     b84:	00000a02 	andeq	r0, r0, r2, lsl #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	3f002e1e 	svccc	0x00002e1e
	sti_tim;
     b8c:	3a0e030c 	bcc	3817c4 <__ccfg+0x36181c>
}
     b90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b94:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     b98:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b9c:	000a4001 	andeq	r4, sl, r1
     ba0:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
	cli_aux;
     ba4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ba8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     bb0:	01120111 	tsteq	r2, r1, lsl r1
     bb4:	13010a40 	movwne	r0, #6720	; 0x1a40
     bb8:	05200000 	streq	r0, [r0, #-0]!
	sti_aux;
     bbc:	3a0e0300 	bcc	3817c4 <__ccfg+0x36181c>
}
     bc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bc8:	21000006 	tstcs	r0, r6
void AONRTCIntHandler () {
     bcc:	00000018 	andeq	r0, r0, r8, lsl r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	03003422 	movweq	r3, #1058	; 0x422
     bd4:	3b0b3a08 	blcc	2cf3fc <__ccfg+0x2af454>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (__pi_utims [0] == 0)
     bdc:	00060213 	andeq	r0, r6, r3, lsl r2
     be0:	00342300 	eorseq	r2, r4, r0, lsl #6
		if (*(__pi_utims [0])) {
     be4:	0b3a0803 	bleq	e82bf8 <__ccfg+0xe62c50>
     be8:	0b39053b 	bleq	e420dc <__ccfg+0xe22134>
			(*(__pi_utims [0]))--;
     bec:	0a021349 	beq	85918 <__ccfg+0x65970>
		if (__pi_utims [1] == 0)
     bf0:	34240000 	strtcc	r0, [r4], #-0
		if (*(__pi_utims [1])) {
     bf4:	3a080300 	bcc	2017fc <__ccfg+0x1e1854>
			aux_timer_inactive = 0;
     bf8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			(*(__pi_utims [1]))--;
     bfc:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (__pi_utims [2] == 0)
     c00:	000a2500 	andeq	r2, sl, r0, lsl #10
		if (*(__pi_utims [2])) {
     c04:	0b3a0e03 	bleq	e84418 <__ccfg+0xe64470>
			(*(__pi_utims [2]))--;
     c08:	0b39053b 	bleq	e420fc <__ccfg+0xe22154>
		if (__pi_utims [3] != 0) {
     c0c:	00000111 	andeq	r0, r0, r1, lsl r1
			if (*(__pi_utims [3])) {
     c10:	11010b26 	tstne	r1, r6, lsr #22
				aux_timer_inactive = 0;
     c14:	01011201 	tsteq	r1, r1, lsl #4
				(*(__pi_utims [3]))--;
     c18:	27000013 	smladcs	r0, r3, r0, r0
	if (__pi_systat.ledsts) {
     c1c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     c20:	00001301 	andeq	r1, r0, r1, lsl #6
		if (__pi_systat.ledblc++ == 0) {
     c24:	31011d28 	tstcc	r1, r8, lsr #26
     c28:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			if (__pi_systat.ledblk) {
     c2c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     c30:	000b5705 	andeq	r5, fp, r5, lsl #14
     c34:	00052900 	andeq	r2, r5, r0, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	00001331 	andeq	r1, r0, r1, lsr r3
     c3c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
				if (__pi_systat.ledsts & 0x2)
     c40:	3b0b3a0e 	blcc	2cf480 <__ccfg+0x2af4d8>
     c44:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     c48:	1201110c 	andne	r1, r1, #12, 2
				if (__pi_systat.ledsts & 0x4)
     c4c:	010a4001 	tsteq	sl, r1
				__pi_systat.ledblk = 0;
     c50:	2b000013 	blcs	ca4 <AONRTCIntHandler+0xd8>
     c54:	08030005 	stmdaeq	r3, {r0, r2}
			if (__pi_systat.fstblk)
     c58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c5c:	13490b39 	movtne	r0, #39737	; 0x9b39
				__pi_systat.ledblc = 200;
     c60:	00000602 	andeq	r0, r0, r2, lsl #12
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	3f012e2c 	svccc	0x00012e2c
		cli_tim;
     c68:	3a0e030c 	bcc	3818a0 <__ccfg+0x3618f8>
		__pi_new += setdel;
     c6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c70:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		setdel = 0;
     c74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		RISE_N_SHINE;
     c78:	010a4001 	tsteq	sl, r1
		__pi_new += setdel;
     c7c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
		RISE_N_SHINE;
     c80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		aux_timer_inactive = 1;
     c88:	13490b39 	movtne	r0, #39737	; 0x9b39
     c8c:	00000602 	andeq	r0, r0, r2, lsl #12
				if (__pi_systat.ledsts & 0x1)
     c90:	3f012e2e 	svccc	0x00012e2e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c94:	3a0e030c 	bcc	3818cc <__ccfg+0x361924>
     c98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (__pi_systat.ledsts & 0x2)
     c9c:	200c270b 	andcs	r2, ip, fp, lsl #14
     ca0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ca4:	00052f00 	andeq	r2, r5, r0, lsl #30
				if (__pi_systat.ledsts & 0x8)
     ca8:	0b3a0803 	bleq	e82cbc <__ccfg+0xe62d14>
				__pi_systat.ledblk = 1;
     cac:	0b39053b 	bleq	e421a0 <__ccfg+0xe221f8>
     cb0:	00001349 	andeq	r1, r0, r9, asr #6
		if (aux_timer_inactive) {
     cb4:	3f012e30 	svccc	0x00012e30
			cli_aux;
     cb8:	3a0e030c 	bcc	3818f0 <__ccfg+0x361948>
     cbc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     cc4:	010a4001 	tsteq	sl, r1
     cc8:	31000013 	tstcc	r0, r3, lsl r0
     ccc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; c1c <AONRTCIntHandler+0x50>
     cd0:	0b3a0803 	bleq	e82ce4 <__ccfg+0xe62d3c>
     cd4:	0b39053b 	bleq	e421c8 <__ccfg+0xe22220>
     cd8:	13490c27 	movtne	r0, #39975	; 0x9c27
     cdc:	01120111 	tsteq	r2, r1, lsl r1
word tci_update_delay_ticks (Boolean force) {
     ce0:	13010a40 	movwne	r0, #6720	; 0x1a40
	cli_tim;
     ce4:	05320000 	ldreq	r0, [r2, #-0]!
     ce8:	3a080300 	bcc	2018f0 <__ccfg+0x1e1948>
	if (setdel) {
     cec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	3300000a 	movwcc	r0, #10
     cf8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; c48 <AONRTCIntHandler+0x7c>
     cfc:	0b3a0e03 	bleq	e84510 <__ccfg+0xe64568>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	0b39053b 	bleq	e421f4 <__ccfg+0xe2224c>
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	01110c27 	tsteq	r1, r7, lsr #24
	return NO;
     d08:	0a400112 	beq	1001158 <__ccfg+0xfe11b0>
			setdel = 0;
     d0c:	05340000 	ldreq	r0, [r4, #-0]!
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	3a0e0300 	bcc	381918 <__ccfg+0x361970>
     d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     d18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		sti_tim;
     d1c:	3500000a 	strcc	r0, [r0, #-10]
		return YES;
     d20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d28:	13490b39 	movtne	r0, #39737	; 0x9b39
     d2c:	0b360000 	bleq	d80d34 <__ccfg+0xd60d8c>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	00065501 	andeq	r5, r6, r1, lsl #10
	UARTDisable (UART0_BASE);
     d34:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	UARTDisable (UART0_BASE);
     d3c:	0b3b0b3a 	bleq	ec3a2c <__ccfg+0xea3a84>
	UARTConfigSetExpClk (UART0_BASE,
     d40:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     d44:	13010b20 	movwne	r0, #6944	; 0x1b20
     d48:	05380000 	ldreq	r0, [r8, #-0]!
     d4c:	3a080300 	bcc	201954 <__ccfg+0x1e19ac>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d54:	0013490b 	andseq	r4, r3, fp, lsl #18
     d58:	00053900 	andeq	r3, r5, r0, lsl #18
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	0b3a0e03 	bleq	e84570 <__ccfg+0xe645c8>
     d60:	0b390b3b 	bleq	e43a54 <__ccfg+0xe23aac>
     d64:	00001349 	andeq	r1, r0, r9, asr #6
	urates [0] = rate;
     d68:	0300343a 	movweq	r3, #1082	; 0x43a
}
     d6c:	3b0b3a08 	blcc	2cf594 <__ccfg+0x2af5ec>
     d70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d74:	3b000013 	blcc	dc8 <ioreq_uart_a+0xc>
     d78:	0803000a 	stmdaeq	r3, {r1, r3}
     d7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d80:	00000b39 	andeq	r0, r0, r9, lsr fp
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	3f012e3c 	svccc	0x00012e3c
     d88:	3a0e030c 	bcc	3819c0 <__ccfg+0x361a18>
     d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	110c270b 	tstne	ip, fp, lsl #14
     d94:	40011201 	andmi	r1, r1, r1, lsl #4
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d98:	0013010a 	andseq	r0, r3, sl, lsl #2
     d9c:	00053d00 	andeq	r3, r5, r0, lsl #26
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	0b3a0803 	bleq	e82db4 <__ccfg+0xe62e0c>
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
     da8:	06021349 	streq	r1, [r2], -r9, asr #6
     dac:	343e0000 	ldrtcc	r0, [lr], #-0
     db0:	3a080300 	bcc	2019b8 <__ccfg+0x1e1a10>
     db4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	switch (operation) {
     dbc:	3f000006 	svccc	0x00000006
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d10 <tci_update_delay_ticks+0x30>
     dc4:	0b3a0e03 	bleq	e845d8 <__ccfg+0xe64630>
     dc8:	0b390b3b 	bleq	e43abc <__ccfg+0xe23b14>
     dcc:	01110c27 	tsteq	r1, r7, lsr #24
     dd0:	0a400112 	beq	1001220 <__ccfg+0xfe1278>
				*buf++ = uart_a_read;
     dd4:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
     dd8:	3a0e0301 	bcc	3819e4 <__ccfg+0x361a3c>
			while (len && uart_a_char_available) {
     ddc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     de0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     de4:	010b2013 	tsteq	fp, r3, lsl r0
			if (len != operation) {
     de8:	41000013 	tstmi	r0, r3, lsl r0
}
     dec:	0e03012e 	adfeqsp	f0, f3, #0.5
     df0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			uart_a_disable_int;
     df4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (uart_a_char_available) {
     df8:	0b201349 	bleq	805b24 <__ccfg+0x7e5b7c>
				*buf++ = uart_a_read;
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
			uart_a_disable_int;
     e00:	31012e42 	tstcc	r1, r2, asr #28
     e04:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			if (uart_a_char_available) {
     e08:	010a4001 	tsteq	sl, r1
     e0c:	43000013 	movwmi	r0, #19
				uart_a_enable_int;
     e10:	13310005 	teqne	r1, #5
     e14:	00000602 	andeq	r0, r0, r2, lsl #12
				goto Redo_rx;
     e18:	31003444 	tstcc	r0, r4, asr #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	00060213 	andeq	r0, r6, r3, lsl r2
     e20:	011d4500 	tsteq	sp, r0, lsl #10
			return -2;
     e24:	01111331 	tsteq	r1, r1, lsr r3
     e28:	0b580112 	bleq	1601278 <__ccfg+0x15e12d0>
				uart_a_write (*buf);
     e2c:	0b570b59 	bleq	15c3b98 <__ccfg+0x15a3bf0>
     e30:	34460000 	strbcc	r0, [r6], #-0
			while (len && uart_a_room_in_tx) {
     e34:	00133100 	andseq	r3, r3, r0, lsl #2
     e38:	011d4700 	tsteq	sp, r0, lsl #14
     e3c:	01521331 	cmpeq	r2, r1, lsr r3
			if (len != operation) {
     e40:	0b580655 	bleq	160279c <__ccfg+0x15e27f4>
			uart_a_disable_int;
     e44:	0b570b59 	bleq	15c3bb0 <__ccfg+0x15a3c08>
     e48:	0a480000 	beq	1200e50 <__ccfg+0x11e0ea8>
			if (uart_a_room_in_tx) {
     e4c:	11133100 	tstne	r3, r0, lsl #2
     e50:	49000001 	stmdbmi	r0, {r0}
				uart_a_enable_int;
     e54:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     e58:	01120111 	tsteq	r2, r1, lsl r1
				*buf++ = uart_a_read;
     e5c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
			if (uart_a_room_in_tx) {
     e60:	00000b57 	andeq	r0, r0, r7, asr fp
				uart_a_write (*buf);
     e64:	31012e4a 	tstcc	r1, sl, asr #28
     e68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6c:	000a4001 	andeq	r4, sl, r1
     e70:	11010000 	mrsne	r0, (UNDEF: 1)
			uart_a_enable_int;
     e74:	130e2501 	movwne	r2, #58625	; 0xe501
     e78:	1b0e030b 	blne	381aac <__ccfg+0x361b04>
     e7c:	1106550e 	tstne	r6, lr, lsl #10
			return 0;
     e80:	00061001 	andeq	r1, r6, r1
			if (len == UART_CNTRL_SETRATE) {
     e84:	00240200 	eoreq	r0, r4, r0, lsl #4
				if (__pi_uart_setrate (*((word*)buf),
     e88:	0b3e0b0b 	bleq	f83abc <__ccfg+0xf63b14>
     e8c:	00000e03 	andeq	r0, r0, r3, lsl #28
     e90:	03001603 	movweq	r1, #1539	; 0x603
				syserror (EREQPAR, "uar");
     e94:	3b0b3a0e 	blcc	2cf6d4 <__ccfg+0x2af72c>
			syserror (ENOOPER, "uai");
     e98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			if (len == UART_CNTRL_GETRATE) {
     e9c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
				return 1;
     ea0:	0b0b0024 	bleq	2c0f38 <__ccfg+0x2a0f90>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
			syserror (ENOOPER, "uai");
     ea8:	13050000 	movwne	r0, #20480	; 0x5000
     eac:	0b0e0301 	bleq	381ab8 <__ccfg+0x361b10>
     eb0:	3b0b3a0b 	blcc	2cf6e4 <__ccfg+0x2af73c>
     eb4:	0013010b 	andseq	r0, r3, fp, lsl #2
     eb8:	000d0600 	andeq	r0, sp, r0, lsl #12
     ebc:	13490e03 	movtne	r0, #40451	; 0x9e03
     ec0:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     ec4:	0f070000 	svceq	0x00070000
     ec8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	00260800 	eoreq	r0, r6, r0, lsl #16
void UART0IntHandler () {
     ed0:	00001349 	andeq	r1, r0, r9, asr #6
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     ed8:	0a000013 	beq	f2c <UART0IntHandler+0x60>
     edc:	0b0b000f 	bleq	2c0f20 <__ccfg+0x2a0f78>
     ee0:	00001349 	andeq	r1, r0, r9, asr #6
     ee4:	0b01130b 	bleq	45b18 <__ccfg+0x25b70>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	3b0b3a0b 	blcc	2cf71c <__ccfg+0x2af774>
     eec:	010b390b 	tsteq	fp, fp, lsl #18
		RISE_N_SHINE;
     ef0:	0c000013 	stceq	0, cr0, [r0], {19}
     ef4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		i_trigger (devevent (UART_A, READ));
     ef8:	0b3b0b3a 	bleq	ec3be8 <__ccfg+0xea3c40>
     efc:	13490b39 	movtne	r0, #39737	; 0x9b39
     f00:	0b0d0b0b 	bleq	343b34 <__ccfg+0x323b8c>
     f04:	0b380b0c 	bleq	e03b3c <__ccfg+0xde3b94>
     f08:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     f18:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     f1c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f20:	0b3b0b3a 	bleq	ec3c10 <__ccfg+0xea3c68>
     f24:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     f2c:	010f0000 	mrseq	r0, CPSR
     f30:	01134901 	tsteq	r3, r1, lsl #18
		i_trigger (devevent (UART_A, WRITE));
     f34:	10000013 	andne	r0, r0, r3, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	00000021 	andeq	r0, r0, r1, lsr #32
     f3c:	03001611 	movweq	r1, #1553	; 0x611
		RISE_N_SHINE;
     f40:	3b0b3a0e 	blcc	2cf780 <__ccfg+0x2af7d8>
     f44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f48:	12000013 	andne	r0, r0, #19
		i_trigger (devevent (UART_A, WRITE));
     f4c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     f50:	00001301 	andeq	r1, r0, r1, lsl #6
     f54:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     f58:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     f5c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f64:	13490b39 	movtne	r0, #39737	; 0x9b39
     f68:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     f6c:	15150000 	ldrne	r0, [r5, #-0]
     f70:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     f74:	00130113 	andseq	r0, r3, r3, lsl r1
}
     f78:	01131600 	tsteq	r3, r0, lsl #12
     f7c:	0b0b0e03 	bleq	2c4790 <__ccfg+0x2a47e8>
     f80:	0b3b0b3a 	bleq	ec3c70 <__ccfg+0xea3cc8>
     f84:	13010b39 	movwne	r0, #6969	; 0x1b39
     f88:	17170000 	ldrne	r0, [r7, -r0]
void __buttons_setirq (int val) {
     f8c:	3a0b0b01 	bcc	2c3b98 <__ccfg+0x2a3bf0>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	0013010b 	andseq	r0, r3, fp, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     f98:	000d1800 	andeq	r1, sp, r0, lsl #16
     f9c:	0b3a0e03 	bleq	e847b0 <__ccfg+0xe64808>
     fa0:	0b390b3b 	bleq	e43c94 <__ccfg+0xe23cec>
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	00001349 	andeq	r1, r0, r9, asr #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	03000d19 	movweq	r0, #3353	; 0xd19
     fac:	3b0b3a08 	blcc	2cf7d4 <__ccfg+0x2af82c>
     fb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fb4:	1a000013 	bne	1008 <__pinlist_setirq+0x38>
     fb8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     fbc:	0b3b0b3a 	bleq	ec3cac <__ccfg+0xea3d04>
}
     fc0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fc4:	00000b38 	andeq	r0, r0, r8, lsr fp
     fc8:	0b01131b 	bleq	45c3c <__ccfg+0x25c94>
     fcc:	3b0b3a0b 	blcc	2cf800 <__ccfg+0x2af858>
void __pinlist_setirq (int val) {
     fd0:	010b3905 	tsteq	fp, r5, lsl #18
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	1c000013 	stcne	0, cr0, [r0], {19}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	13490b39 	movtne	r0, #39737	; 0x9b39
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	00000b38 	andeq	r0, r0, r8, lsr fp
     fe8:	0301131d 	movweq	r1, #4893	; 0x131d
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	3a0b0b0e 	bcc	2c3c2c <__ccfg+0x2a3c84>
     ff0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff4:	0013010b 	andseq	r0, r3, fp, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	00211e00 	eoreq	r1, r1, r0, lsl #28
}
     ffc:	0b2f1349 	bleq	bc5d28 <__ccfg+0xba5d80>
    1000:	341f0000 	ldrcc	r0, [pc], #-0	; 1008 <__pinlist_setirq+0x38>
    1004:	3a0e0300 	bcc	381c0c <__ccfg+0x361c64>
    1008:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void GPIOIntHandler () {
    100c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
if (buttons_int) {
    1010:	2000000a 	andcs	r0, r0, sl
    1014:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; f64 <UART0IntHandler+0x98>
	buttons_disable ();
    1018:	0b3a0e03 	bleq	e8482c <__ccfg+0xe64884>
    101c:	0b39053b 	bleq	e42510 <__ccfg+0xe22568>
	i_trigger ((aword)&__button_list);
    1020:	01110c27 	tsteq	r1, r7, lsr #24
    1024:	0a400112 	beq	1001474 <__ccfg+0xfe14cc>
    1028:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    102c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1030:	3b0b3a0e 	blcc	2cf870 <__ccfg+0x2af8c8>
    1034:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1038:	1113490c 	tstne	r3, ip, lsl #18
    103c:	40011201 	andmi	r1, r1, r1, lsl #4
    1040:	0013010a 	andseq	r0, r3, sl, lsl #2
    1044:	00052200 	andeq	r2, r5, r0, lsl #4
    1048:	0b3a0803 	bleq	e8305c <__ccfg+0xe630b4>
	RISE_N_SHINE;
    104c:	0b39053b 	bleq	e42540 <__ccfg+0xe22598>
    1050:	06021349 	streq	r1, [r2], -r9, asr #6
    1054:	1d230000 	stcne	0, cr0, [r3, #-0]
if (pin_sensor_int) {
    1058:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    105c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	i_trigger ((aword)(&__input_pins));
    1060:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1064:	2400000b 	strcs	r0, [r0], #-11
    1068:	13310005 	teqne	r1, #5
    106c:	00000602 	andeq	r0, r0, r2, lsl #12
    1070:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
    1074:	26000006 	strcs	r0, [r0], -r6
    1078:	13310034 	teqne	r1, #52	; 0x34
    107c:	00000602 	andeq	r0, r0, r2, lsl #12
    1080:	3f012e27 	svccc	0x00012e27
    1084:	3a0e030c 	bcc	381cbc <__ccfg+0x361d14>
    1088:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pinsen_disable_and_clear;
    108c:	110c270b 	tstne	ip, fp, lsl #14
	RISE_N_SHINE;
    1090:	40011201 	andmi	r1, r1, r1, lsl #4
    1094:	0013010a 	andseq	r0, r3, sl, lsl #2
    1098:	00342800 	eorseq	r2, r4, r0, lsl #16
}
    109c:	0b3a0803 	bleq	e830b0 <__ccfg+0xe63108>
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
    10a4:	06021349 	streq	r1, [r2], -r9, asr #6
    10a8:	34290000 	strtcc	r0, [r9], #-0
    10ac:	3a080300 	bcc	201cb4 <__ccfg+0x1e1d0c>
void system_init () {
    10b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	0013490b 	andseq	r4, r3, fp, lsl #18
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	00342a00 	eorseq	r2, r4, r0, lsl #20
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	0b3a0803 	bleq	e830d0 <__ccfg+0xe63128>
    10c0:	0b39053b 	bleq	e425b4 <__ccfg+0xe2260c>
    10c4:	0a021349 	beq	85df0 <__ccfg+0x65e48>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c8:	052b0000 	streq	r0, [fp, #-0]!
    10cc:	3a0e0300 	bcc	381cd4 <__ccfg+0x361d2c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10d8:	2c000006 	stccs	0, cr0, [r0], {6}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 102c <GPIOIntHandler+0x20>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	0b3a0e03 	bleq	e848f4 <__ccfg+0xe6494c>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	0b39053b 	bleq	e425d8 <__ccfg+0xe22630>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e8:	13490c27 	movtne	r0, #39975	; 0x9c27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ec:	13010b20 	movwne	r0, #6944	; 0x1b20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	052d0000 	streq	r0, [sp, #-0]!
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	3a0e0300 	bcc	381cfc <__ccfg+0x361d54>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		pin = (port_confs [i] >> 19) & 0x1f;
    10fc:	0013490b 	andseq	r4, r3, fp, lsl #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	00052e00 	andeq	r2, r5, r0, lsl #28
    1104:	0b3a0803 	bleq	e83118 <__ccfg+0xe63170>
    1108:	0b39053b 	bleq	e425fc <__ccfg+0xe22654>
    110c:	00001349 	andeq	r1, r0, r9, asr #6
		if (port_confs [i] & 0x80)
    1110:	11010b2f 	tstne	r1, pc, lsr #22
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1114:	00011201 	andeq	r1, r1, r1, lsl #4
    1118:	00343000 	eorseq	r3, r4, r0
		if (port_confs [i] & 0x40)
    111c:	0b3a0e03 	bleq	e84930 <__ccfg+0xe64988>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	0b39053b 	bleq	e42614 <__ccfg+0xe2266c>
    1124:	0a021349 	beq	85e50 <__ccfg+0x65ea8>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	0a310000 	beq	c41130 <__ccfg+0xc21188>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112c:	3a0e0300 	bcc	381d34 <__ccfg+0x361d8c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	all_leds_blink;
    1134:	0001110b 	andeq	r1, r1, fp, lsl #2
    1138:	011d3200 	tsteq	sp, r0, lsl #4
    113c:	01111331 	tsteq	r1, r1, lsr r3
    1140:	0b580112 	bleq	1601590 <__ccfg+0x15e15e8>
    1144:	0b570559 	bleq	15c26b0 <__ccfg+0x15a2708>
    1148:	05330000 	ldreq	r0, [r3, #-0]!
    114c:	00133100 	andseq	r3, r3, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1150:	00053400 	andeq	r3, r5, r0, lsl #8
    1154:	0b3a0803 	bleq	e83168 <__ccfg+0xe631c0>
    1158:	0b39053b 	bleq	e4264c <__ccfg+0xe226a4>
    115c:	0a021349 	beq	85e88 <__ccfg+0x65ee0>
    1160:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	36000000 	strcc	r0, [r0], -r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    116c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	IntEnable (INT_AON_RTC_COMB);
    1170:	13490b39 	movtne	r0, #39737	; 0x9b39
    1174:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
    1178:	3a080301 	bcc	201d84 <__ccfg+0x1e1ddc>
	__pi_malloc_init ();
    117c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	IntEnable (INT_AON_GPIO_EDGE);
    1180:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1184:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	010a4001 	tsteq	sl, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	38000013 	stmdacc	r0, {r0, r1, r4}
    1190:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    1194:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    119c:	01120111 	tsteq	r2, r1, lsl r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	13010a40 	movwne	r0, #6720	; 0x1a40
    11a4:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
    11a8:	3a0e0301 	bcc	381db4 <__ccfg+0x361e0c>
	urates [0] = UART_RATE / 100;
    11ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11b0:	200c270b 	andcs	r2, ip, fp, lsl #14
	reinit_uart ();
    11b4:	0013010b 	andseq	r0, r3, fp, lsl #2
	EXTRA_INITIALIZERS;
    11b8:	00053a00 	andeq	r3, r5, r0, lsl #20
    11bc:	0b3a0803 	bleq	e831d0 <__ccfg+0xe63228>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11c0:	0b390b3b 	bleq	e43eb4 <__ccfg+0xe23f0c>
    11c4:	00001349 	andeq	r1, r0, r9, asr #6
    11c8:	03012e3b 	movweq	r2, #7739	; 0x1e3b
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	3b0b3a0e 	blcc	2cfa0c <__ccfg+0x2afa64>
    11d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	2013490c 	andscs	r4, r3, ip, lsl #18
    11d8:	0013010b 	andseq	r0, r3, fp, lsl #2
			devinit [i] . init (devinit [i] . param);
    11dc:	00343c00 	eorseq	r3, r4, r0, lsl #24
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	0b3a0803 	bleq	e831f4 <__ccfg+0xe6324c>
    11e4:	0b390b3b 	bleq	e43ed8 <__ccfg+0xe23f30>
    11e8:	00001349 	andeq	r1, r0, r9, asr #6
	IntEnable (INT_UART0_COMB);
    11ec:	03012e3d 	movweq	r2, #7741	; 0x1e3d
    11f0:	3b0b3a08 	blcc	2cfa18 <__ccfg+0x2afa70>
}
    11f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	tci_run_auxiliary_timer ();
    11f8:	010b200c 	tsteq	fp, ip
		diag ("");
    11fc:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    1200:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	01120111 	tsteq	r2, r1, lsl r1
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	13010a40 	movwne	r0, #6720	; 0x1a40
		diag ("Leftover RAM: %d bytes",
    120c:	053f0000 	ldreq	r0, [pc, #-0]!	; 1214 <system_init+0x164>
    1210:	02133100 	andseq	r3, r3, #0, 2
    1214:	4000000a 	andmi	r0, r0, sl
    1218:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    121c:	01120111 	tsteq	r2, r1, lsl r1
    1220:	0b590b58 	bleq	1643f88 <__ccfg+0x1623fe0>
    1224:	00000b57 	andeq	r0, r0, r7, asr fp
    1228:	31011d41 	tstcc	r1, r1, asr #26
    122c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1230:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1234:	000b570b 	andeq	r5, fp, fp, lsl #14
    1238:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
    123c:	01111331 	tsteq	r1, r1, lsr r3
    1240:	0a400112 	beq	1001690 <__ccfg+0xfe16e8>
    1244:	34430000 	strbcc	r0, [r3], #-0
    1248:	00133100 	andseq	r3, r3, r0, lsl #2
    124c:	11010000 	mrsne	r0, (UNDEF: 1)
    1250:	130e2501 	movwne	r2, #58625	; 0xe501
    1254:	1b0e030b 	blne	381e88 <__ccfg+0x361ee0>
    1258:	1106550e 	tstne	r6, lr, lsl #10
    125c:	00061001 	andeq	r1, r6, r1
    1260:	00240200 	eoreq	r0, r4, r0, lsl #4
    1264:	0b3e0b0b 	bleq	f83e98 <__ccfg+0xf63ef0>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	00000e03 	andeq	r0, r0, r3, lsl #28
    126c:	03001603 	movweq	r1, #1539	; 0x603
    1270:	3b0b3a0e 	blcc	2cfab0 <__ccfg+0x2afb08>
    1274:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1278:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    127c:	0b0b0024 	bleq	2c1314 <__ccfg+0x2a136c>
    1280:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1284:	0f050000 	svceq	0x00050000
}
    1288:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
__attribute__ ((noreturn)) void __pi_release () {
    128c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1290:	13490026 	movtne	r0, #36902	; 0x9026
    1294:	15070000 	strne	r0, [r7, #-0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	000c2700 	andeq	r2, ip, r0, lsl #14
	check_stack_overflow;
    129c:	00340800 	eorseq	r0, r4, r0, lsl #16
    12a0:	0b3a0e03 	bleq	e84ab4 <__ccfg+0xe64b0c>
    12a4:	0b390b3b 	bleq	e43f98 <__ccfg+0xe23ff0>
	update_n_wake (MAX_WORD, NO);
    12a8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 118c <system_init+0xdc>
    12ac:	00000c3c 	andeq	r0, r0, ip, lsr ip
    12b0:	49010109 	stmdbmi	r1, {r0, r3, r8}
	for_all_tasks (__pi_curr) {
    12b4:	00130113 	andseq	r0, r3, r3, lsl r1
    12b8:	00210a00 	eoreq	r0, r1, r0, lsl #20
    12bc:	0b2f1349 	bleq	bc5fe8 <__ccfg+0xba6040>
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	340b0000 	strcc	r0, [fp], #-0
	__SLEEP;
    12c4:	3a0e0300 	bcc	381ecc <__ccfg+0x361f24>
    12c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12cc:	3f13490b 	svccc	0x0013490b
    12d0:	000a020c 	andeq	r0, sl, ip, lsl #4
	system_event_count ++;
    12d4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    12d8:	0b3a0e03 	bleq	e84aec <__ccfg+0xe64b44>
	switch (__pi_systat.effpdm) {
    12dc:	0b39053b 	bleq	e427d0 <__ccfg+0xe22828>
    12e0:	01110c27 	tsteq	r1, r7, lsr #24
    12e4:	0a400112 	beq	1001734 <__ccfg+0xfe178c>
    12e8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
			__WFI ();
    12ec:	030c3f01 	movweq	r3, #52993	; 0xcf01
    12f0:	3b0b3a0e 	blcc	2cfb30 <__ccfg+0x2afb88>
    12f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	check_stack_overflow;
    12f8:	1201110c 	andne	r1, r1, #12, 2
    12fc:	000a4001 	andeq	r4, sl, r1
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	00340e00 	eorseq	r0, r4, r0, lsl #28
    1304:	0b3a0e03 	bleq	e84b18 <__ccfg+0xe64b70>
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	0b390b3b 	bleq	e43ffc <__ccfg+0xe24054>
			goto Redo;
    130c:	06021349 	streq	r1, [r2], -r9, asr #6
	for_all_tasks (__pi_curr) {
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	0e030b13 	vmoveq.32	d3[0], r0
    131c:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	24020000 	strcs	r0, [r2], #-0
    1324:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1328:	000e030b 	andeq	r0, lr, fp, lsl #6
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    132c:	00160300 	andseq	r0, r6, r0, lsl #6
    1330:	0b3a0e03 	bleq	e84b44 <__ccfg+0xe64b9c>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	0b390b3b 	bleq	e44028 <__ccfg+0xe24080>
    1338:	00001349 	andeq	r1, r0, r9, asr #6
			__WFI ();
    133c:	0b002404 	bleq	a354 <__exidx_end+0x4a3c>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1340:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1344:	05000008 	streq	r0, [r0, #-8]
}
    1348:	0b0b0113 	bleq	2c179c <__ccfg+0x2a17f4>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	0b3b0b3a 	bleq	ec403c <__ccfg+0xea4094>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	13010b39 	movwne	r0, #6969	; 0x1b39
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	0d060000 	stceq	0, cr0, [r6, #-0]
    1358:	3a0e0300 	bcc	381f60 <__ccfg+0x361fb8>
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1360:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1364:	0700000b 	streq	r0, [r0, -fp]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	13490026 	movtne	r0, #36902	; 0x9026
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	34080000 	strcc	r0, [r8], #-0
    1370:	3a0e0300 	bcc	381f78 <__ccfg+0x361fd0>
    1374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1378:	3f13490b 	svccc	0x0013490b
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1380:	00350900 	eorseq	r0, r5, r0, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	00001349 	andeq	r1, r0, r9, asr #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1388:	03000d0a 	movweq	r0, #3338	; 0xd0a
    138c:	3b0b3a0e 	blcc	2cfbcc <__ccfg+0x2afc24>
    1390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1394:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1398:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			SysCtrlSetRechargeBeforePowerDown
    139c:	0b00000b 	bleq	13d0 <__pi_release+0x144>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	0b0b000f 	bleq	2c13e4 <__ccfg+0x2a143c>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a4:	00001349 	andeq	r1, r0, r9, asr #6
    13a8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	00130113 	andseq	r0, r3, r3, lsl r1
    13b0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    13b4:	160e0000 	strne	r0, [lr], -r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	3a0e0300 	bcc	381fc0 <__ccfg+0x362018>
    13bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	01150f00 	tsteq	r5, r0, lsl #30
    13c8:	13010c27 	movwne	r0, #7207	; 0x1c27
    13cc:	05100000 	ldreq	r0, [r0, #-0]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	00134900 	andseq	r4, r3, r0, lsl #18
			while (!(AONWUCPowerStatusGet () &
    13d4:	00341100 	eorseq	r1, r4, r0, lsl #2
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	0b3a0e03 	bleq	e84bec <__ccfg+0xe64c44>
    13dc:	0b39053b 	bleq	e428d0 <__ccfg+0xe22928>
    13e0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 12c4 <__pi_release+0x38>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    13e8:	0b011312 	bleq	46038 <__ccfg+0x26090>
    13ec:	3b0b3a0b 	blcc	2cfc20 <__ccfg+0x2afc78>
    13f0:	010b3905 	tsteq	fp, r5, lsl #18
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	13000013 	movwne	r0, #19
    13f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1400:	13490b39 	movtne	r0, #39737	; 0x9b39
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	00000b38 	andeq	r0, r0, r8, lsr fp
			reinit_uart ();
    1408:	03011314 	movweq	r1, #4884	; 0x1314
    140c:	3a0b0b0e 	bcc	2c404c <__ccfg+0x2a40a4>
    1410:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1414:	0013010b 	andseq	r0, r3, fp, lsl #2
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1418:	00211500 	eoreq	r1, r1, r0, lsl #10
    141c:	0b2f1349 	bleq	bc6148 <__ccfg+0xba61a0>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	34160000 	ldrcc	r0, [r6], #-0
    1424:	3a134700 	bcc	4d302c <__ccfg+0x4b3084>
    1428:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	000a020b 	andeq	r0, sl, fp, lsl #4
    1430:	11010000 	mrsne	r0, (UNDEF: 1)
    1434:	130e2501 	movwne	r2, #58625	; 0xe501
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	1b0e030b 	blne	38206c <__ccfg+0x3620c4>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	1106550e 	tstne	r6, lr, lsl #10
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	00061001 	andeq	r1, r6, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	00240200 	eoreq	r0, r4, r0, lsl #4
    1448:	0b3e0b0b 	bleq	f8407c <__ccfg+0xf640d4>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    144c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1450:	03001603 	movweq	r1, #1539	; 0x603
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1454:	3b0b3a0e 	blcc	2cfc94 <__ccfg+0x2afcec>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1458:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1460:	0b0b0024 	bleq	2c14f8 <__ccfg+0x2a1550>
			PRCMPowerDomainOff (
    1464:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1468:	26050000 	strcs	r0, [r5], -r0
	__SLEEP;
    146c:	00134900 	andseq	r4, r3, r0, lsl #18
    1470:	00350600 	eorseq	r0, r5, r0, lsl #12
  __ASM volatile ("cpsie i" : : : "memory");
    1474:	00001349 	andeq	r1, r0, r9, asr #6
	goto Redo;
    1478:	0b000f07 	bleq	509c <patchGenfskRfe+0x108>
    147c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1480:	01130800 	tsteq	r3, r0, lsl #16
    1484:	0b3a0b0b 	bleq	e840b8 <__ccfg+0xe64110>
    1488:	0b390b3b 	bleq	e4417c <__ccfg+0xe241d4>
    148c:	00001301 	andeq	r1, r0, r1, lsl #6
    1490:	03000d09 	movweq	r0, #3337	; 0xd09
    1494:	3b0b3a0e 	blcc	2cfcd4 <__ccfg+0x2afd2c>
    1498:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    149c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    14a0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    14a4:	0a00000b 	beq	14d8 <__pi_release+0x24c>
    14a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b4:	00000b38 	andeq	r0, r0, r8, lsr fp
    14b8:	0300340b 	movweq	r3, #1035	; 0x40b
    14bc:	3b0b3a0e 	blcc	2cfcfc <__ccfg+0x2afd54>
    14c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    14c4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    14c8:	0c00000c 	stceq	0, cr0, [r0], {12}
    14cc:	13490101 	movtne	r0, #37121	; 0x9101
    14d0:	00001301 	andeq	r1, r0, r1, lsl #6
    14d4:	0000210d 	andeq	r2, r0, sp, lsl #2
    14d8:	00160e00 	andseq	r0, r6, r0, lsl #28
    14dc:	0b3a0e03 	bleq	e84cf0 <__ccfg+0xe64d48>
    14e0:	0b39053b 	bleq	e429d4 <__ccfg+0xe22a2c>
	cli_tim;
    14e4:	00001349 	andeq	r1, r0, r9, asr #6
    14e8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    14ec:	0013010c 	andseq	r0, r3, ip, lsl #2
	diag ("PicOS halted");
    14f0:	00051000 	andeq	r1, r5, r0
	mdelay (500);
    14f4:	00001349 	andeq	r1, r0, r9, asr #6
    14f8:	03003411 	movweq	r3, #1041	; 0x411
	setpowermode (2);
    14fc:	3b0b3a0e 	blcc	2cfd3c <__ccfg+0x2afd94>
	__PCB = NULL;
    1500:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	release;
    1504:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1508:	1200000c 	andne	r0, r0, #12
    150c:	0b0b0113 	bleq	2c1960 <__ccfg+0x2a19b8>
    1510:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
int main (void) {
    1514:	13010b39 	movwne	r0, #6969	; 0x1b39
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	0d130000 	ldceq	0, cr0, [r3, #-0]
    151c:	3a0e0300 	bcc	382124 <__ccfg+0x36217c>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	system_init ();
    1528:	1400000b 	strne	r0, [r0], #-11
	tcv_init ();
    152c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1530:	0b3a0b0b 	bleq	e84164 <__ccfg+0xe641bc>
    1534:	0b39053b 	bleq	e42a28 <__ccfg+0xe22a80>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	00001301 	andeq	r1, r0, r1, lsl #6
    153c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1540:	000b2f13 	andeq	r2, fp, r3, lsl pc
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1544:	00341600 	eorseq	r1, r4, r0, lsl #12
    1548:	0b3a1347 	bleq	e8626c <__ccfg+0xe662c4>
	delay (16, 0);
    154c:	0b390b3b 	bleq	e44240 <__ccfg+0xe24298>
    1550:	00000a02 	andeq	r0, r0, r2, lsl #20
    1554:	3f012e17 	svccc	0x00012e17
	__pi_release ();
    1558:	3a0e030c 	bcc	382190 <__ccfg+0x3621e8>
    155c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1560:	110c270b 	tstne	ip, fp, lsl #14
    1564:	40011201 	andmi	r1, r1, r1, lsl #4
    1568:	0013010a 	andseq	r0, r3, sl, lsl #2
    156c:	00051800 	andeq	r1, r5, r0, lsl #16
    1570:	0b3a0803 	bleq	e83584 <__ccfg+0xe635dc>
static void killev (__pi_pcb_t *pid) {
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
	wfun = (aword)(pid->code);
    1578:	06021349 	streq	r1, [r2], -r9, asr #6
	for_all_tasks (i) {
    157c:	05190000 	ldreq	r0, [r9, #-0]
		for (j = 0; j < nevents (i); j++) {
    1580:	3a0e0300 	bcc	382188 <__ccfg+0x3621e0>
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1588:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			    || i->Events [j] . Event == wfun
    158c:	1a000006 	bne	15ac <killev+0x38>
		for (j = 0; j < nevents (i); j++) {
    1590:	08030034 	stmdaeq	r3, {r2, r4, r5}
			if (i->Events [j] . Event == (aword)pid
    1594:	0b3b0b3a 	bleq	ec4284 <__ccfg+0xea42dc>
    1598:	13490b39 	movtne	r0, #39737	; 0x9b39
    159c:	341b0000 	ldrcc	r0, [fp], #-0
				wakeupev (i, j);
    15a0:	3a080300 	bcc	2021a8 <__ccfg+0x1e2200>
    15a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i) {
    15a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    15ac:	1c000006 	stcne	0, cr0, [r0], {6}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	1331001d 	teqne	r1, #29
static void qfree (aword *ch) {
    15b4:	01120111 	tsteq	r2, r1, lsl r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b8:	0b590b58 	bleq	1644320 <__ccfg+0x1624378>
	cc = (aword*)(mpools + MA_NP);
    15bc:	00000b57 	andeq	r0, r0, r7, asr fp
	m_setnextp (ch, chunk);
    15c0:	31011d1d 	tstcc	r1, sp, lsl sp
	m_setnextp (cc, ch);
    15c4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
}
    15c8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15cc:	000b570b 	andeq	r5, fp, fp, lsl #14
    15d0:	00051e00 	andeq	r1, r5, r0, lsl #28
    15d4:	06021331 			; <UNDEFINED> instruction: 0x06021331
			m_setnextp (cc, m_nextp (chunk));
    15d8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
			m_size (chunk) += m_hdrlen + m_size (ch);
    15dc:	030c3f00 	movweq	r3, #52992	; 0xcf00
    15e0:	3b0b3a0e 	blcc	2cfe20 <__ccfg+0x2afe78>
    15e4:	110b390b 	tstne	fp, fp, lsl #18
    15e8:	40011201 	andmi	r1, r1, r1, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15ec:	2000000a 	andcs	r0, r0, sl
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
    15f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			m_setnextp (cc, m_nextp (chunk));
    15fc:	00000b20 	andeq	r0, r0, r0, lsr #22
			m_size (ch) += m_hdrlen + m_size (chunk);
    1600:	03012e21 	movweq	r2, #7713	; 0x1e21
    1604:	3b0b3a0e 	blcc	2cfe44 <__ccfg+0x2afe9c>
    1608:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    160c:	2013490c 	andscs	r4, r3, ip, lsl #18
    1610:	2200000b 	andcs	r0, r0, #11
    1614:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			if (m_size (chunk) >= m_size (ch))
    1618:	0b3b0b3a 	bleq	ec4308 <__ccfg+0xea4360>
    161c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1620:	01000000 	mrseq	r0, (UNDEF: 0)
		chunk = m_nextp (chunk))
    1624:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1628:	0e030b13 	vmoveq.32	d3[0], r0
    162c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1630:	06100111 			; <UNDEFINED> instruction: 0x06100111
	diag_wait (a);
    1634:	24020000 	strcs	r0, [r2], #-0
	diag_wchar (c, a);
    1638:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    163c:	000e030b 	andeq	r0, lr, fp, lsl #6
}
    1640:	00160300 	andseq	r0, r6, r0, lsl #6
    1644:	0b3a0e03 	bleq	e84e58 <__ccfg+0xe64eb0>
	syserror (ESTATE, "state");
    1648:	0b390b3b 	bleq	e4433c <__ccfg+0xe24394>
    164c:	00001349 	andeq	r1, r0, r9, asr #6
    1650:	0b002404 	bleq	a668 <__exidx_end+0x4d50>
    1654:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	05000008 	streq	r0, [r0, #-8]
void utimer_add (address ut) {
    165c:	13490026 	movtne	r0, #36902	; 0x9026
    1660:	35060000 	strcc	r0, [r6, #-0]
		if (__pi_utims [i] == NULL)
    1664:	00134900 	andseq	r4, r3, r0, lsl #18
	for (i = 0; i < MAX_UTIMERS; i++)
    1668:	01130700 	tsteq	r3, r0, lsl #14
    166c:	0b3a0b0b 	bleq	e842a0 <__ccfg+0xe642f8>
		syserror (ERESOURCE, "ut a");
    1670:	0b390b3b 	bleq	e44364 <__ccfg+0xe243bc>
	__pi_utims [i] = ut;
    1674:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1678:	03000d08 	movweq	r0, #3336	; 0xd08
    167c:	3b0b3a0e 	blcc	2cfebc <__ccfg+0x2aff14>
    1680:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	*t = v;
    1684:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	TCI_RUN_AUXILIARY_TIMER;
    1688:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
void update_n_wake (word min, Boolean force) {
    168c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
	if (TCI_UPDATE_DELAY_TICKS (force))
    1690:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169c:	00000b38 	andeq	r0, r0, r8, lsr fp
    16a0:	0300340a 	movweq	r3, #1034	; 0x40a
    16a4:	3b0b3a0e 	blcc	2cfee4 <__ccfg+0x2aff3c>
    16a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    16ac:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    16b0:	0b00000c 	bleq	16e8 <update_n_wake+0x5c>
    16b4:	0b0b000f 	bleq	2c16f8 <__ccfg+0x2a1750>
    16b8:	00001349 	andeq	r1, r0, r9, asr #6
    16bc:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    16c0:	00130113 	andseq	r0, r3, r3, lsl r1
    16c4:	00210d00 	eoreq	r0, r1, r0, lsl #26
    16c8:	160e0000 	strne	r0, [lr], -r0
    16cc:	3a0e0300 	bcc	3822d4 <__ccfg+0x36232c>
		for_all_tasks (i) {
    16d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_mintk = znew + min;
    16d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    16d8:	01150f00 	tsteq	r5, r0, lsl #30
			if (!twaiting (i))
    16dc:	13010c27 	movwne	r0, #7207	; 0x1c27
    16e0:	05100000 	ldreq	r0, [r0, #-0]
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e4:	00134900 	andseq	r4, r3, r0, lsl #18
    16e8:	00341100 	eorseq	r1, r4, r0, lsl #2
    16ec:	0b3a0e03 	bleq	e84f00 <__ccfg+0xe64f58>
    16f0:	0b39053b 	bleq	e42be4 <__ccfg+0xe22c3c>
    16f4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 15d8 <qfree+0x28>
    16f8:	00000c3c 	andeq	r0, r0, ip, lsr ip
    16fc:	0b011312 	bleq	4634c <__ccfg+0x263a4>
    1700:	3b0b3a0b 	blcc	2cff34 <__ccfg+0x2aff8c>
    1704:	010b3905 	tsteq	fp, r5, lsl #18
    1708:	13000013 	movwne	r0, #19
    170c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1710:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				wakeuptm (i);
    1714:	13490b39 	movtne	r0, #39737	; 0x9b39
    1718:	00000b38 	andeq	r0, r0, r8, lsr fp
		for_all_tasks (i) {
    171c:	03011314 	movweq	r1, #4884	; 0x1314
				d = i->Timer - znew;
    1720:	3a0b0b0e 	bcc	2c4360 <__ccfg+0x2a43b8>
    1724:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1728:	0013010b 	andseq	r0, r3, fp, lsl #2
		if ((word)(__pi_mintk - znew) < min) 
    172c:	00211500 	eoreq	r1, r1, r0, lsl #10
    1730:	0b2f1349 	bleq	bc645c <__ccfg+0xba64b4>
    1734:	34160000 	ldrcc	r0, [r6], #-0
	__pi_old = znew;
    1738:	3a0e0300 	bcc	382340 <__ccfg+0x362398>
}
    173c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	TCI_RUN_DELAY_TIMER;
    1740:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1744:	1700000a 	strne	r0, [r0, -sl]
    1748:	13470034 	movtne	r0, #28724	; 0x7034
    174c:	0b3b0b3a 	bleq	ec443c <__ccfg+0xea4494>
    1750:	0a020b39 	beq	8443c <__ccfg+0x64494>
    1754:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
void proceed (word state) {
    1758:	030c3f01 	movweq	r3, #52993	; 0xcf01
	prcdstate (__pi_curr, state);
    175c:	3b0b3a0e 	blcc	2cff9c <__ccfg+0x2afff4>
    1760:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	release;
    1764:	1201110c 	andne	r1, r1, #12, 2
    1768:	010a4001 	tsteq	sl, r1
void __pi_wait (aword event, word state) {
    176c:	19000013 	stmdbne	r0, {r0, r1, r4}
	sint j = nevents (__pi_curr);
    1770:	08030005 	stmdaeq	r3, {r0, r2}
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
    177c:	00000602 	andeq	r0, r0, r2, lsl #12
		syserror (ENEVENTS, "sw");
    1780:	0300051a 	movweq	r0, #1306	; 0x51a
    1784:	3b0b3a0e 	blcc	2cffc4 <__ccfg+0x2b001c>
	setestate (__pi_curr->Events [j], state, event);
    1788:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	incwait (__pi_curr);
    178c:	00060213 	andeq	r0, r6, r3, lsl r2
	setestate (__pi_curr->Events [j], state, event);
    1790:	000a1b00 	andeq	r1, sl, r0, lsl #22
}
    1794:	0b3a0e03 	bleq	e84fa8 <__ccfg+0xe65000>
    1798:	0b390b3b 	bleq	e4448c <__ccfg+0xe244e4>
    179c:	00000111 	andeq	r0, r0, r1, lsl r1
void __pi_trigger (aword event) {
    17a0:	31011d1c 	tstcc	r1, ip, lsl sp
	for_all_tasks (i) {
    17a4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		for (j = 0; j < nevents (i); j++) {
    17a8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    17ac:	010b570b 	tsteq	fp, fp, lsl #14
    17b0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    17b4:	13310005 	teqne	r1, #5
			if (i->Events [j] . Event == event) {
    17b8:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    17bc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    17c0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
				wakeupev (i, j);
    17c4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    17c8:	1f00000b 	svcne	0x0000000b
	for_all_tasks (i) {
    17cc:	0e03012e 	adfeqsp	f0, f3, #0.5
}
    17d0:	0b3b0b3a 	bleq	ec44c0 <__ccfg+0xea4518>
aword __pi_join (aword pid, word st) {
    17d4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	for_all_tasks (i) {
    17d8:	0b201349 	bleq	806504 <__ccfg+0x7e655c>
    17dc:	05200000 	streq	r0, [r0, #-0]!
	return 0;
    17e0:	3a0e0300 	bcc	3823e8 <__ccfg+0x362440>
		if ((aword)i == pid) {
    17e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			__pi_wait (pid, st);
    17e8:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    17ec:	11010000 	mrsne	r0, (UNDEF: 1)
	for_all_tasks (i) {
    17f0:	130e2501 	movwne	r2, #58625	; 0xe501
    17f4:	1b0e030b 	blne	382428 <__ccfg+0x362480>
void delay (word d, word state) {
    17f8:	1106550e 	tstne	r6, lr, lsl #10
	settstate (__pi_curr, state);
    17fc:	00061001 	andeq	r1, r6, r1
    1800:	00240200 	eoreq	r0, r4, r0, lsl #4
    1804:	0b3e0b0b 	bleq	f84438 <__ccfg+0xf64490>
    1808:	00000e03 	andeq	r0, r0, r3, lsl #28
	update_n_wake (d, YES);
    180c:	03001603 	movweq	r1, #1539	; 0x603
    1810:	3b0b3a0e 	blcc	2d0050 <__ccfg+0x2b00a8>
	__pi_curr->Timer = __pi_old + d;
    1814:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1818:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	inctimer (__pi_curr);
    181c:	0b0b0024 	bleq	2c18b4 <__ccfg+0x2a190c>
    1820:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1824:	26050000 	strcs	r0, [r5], -r0
}
    1828:	00134900 	andseq	r4, r3, r0, lsl #18
    182c:	00350600 	eorseq	r0, r5, r0, lsl #12
	if (fun == NULL)
    1830:	00001349 	andeq	r1, r0, r9, asr #6
		return (int) __pi_curr;
    1834:	0b011307 	bleq	46458 <__ccfg+0x264b0>
    1838:	3b0b3a0b 	blcc	2d006c <__ccfg+0x2b00c4>
	for_all_tasks (i)
    183c:	010b390b 	tsteq	fp, fp, lsl #18
}
    1840:	08000013 	stmdaeq	r0, {r0, r1, r4}
		if (i->code == fun)
    1844:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	for_all_tasks (i)
    1848:	0b3b0b3a 	bleq	ec4538 <__ccfg+0xea4590>
    184c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1850:	0b0d0b0b 	bleq	344484 <__ccfg+0x3244dc>
int __pi_strlen (const char *s) {
    1854:	0b380b0c 	bleq	e0448c <__ccfg+0xde44e4>
	for (i = 0; *(s+i) != '\0'; i++);
    1858:	0d090000 	stceq	0, cr0, [r9, #-0]
}
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
	for (i = 0; *(s+i) != '\0'; i++);
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	while ((Boolean)(*d++ = *s++));
    1864:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1868:	0a00000b 	beq	189c <__pi_memcpy+0xe>
    186c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
}
    1870:	0b3b0b3a 	bleq	ec4560 <__ccfg+0xea45b8>
	while (n-- && (*s != '\0'))
    1874:	13490b39 	movtne	r0, #39737	; 0x9b39
    1878:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	*d = '\0';
    187c:	0f0b0000 	svceq	0x000b0000
	while (n-- && (*s != '\0'))
    1880:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1884:	0c000013 	stceq	0, cr0, [r0], {19}
		*d++ = *s++;
    1888:	13490101 	movtne	r0, #37121	; 0x9101
    188c:	00001301 	andeq	r1, r0, r1, lsl #6
	while (n--)
    1890:	0000210d 	andeq	r2, r0, sp, lsl #2
    1894:	00160e00 	andseq	r0, r6, r0, lsl #28
		*dest++ = *src++;
    1898:	0b3a0e03 	bleq	e850ac <__ccfg+0xe65104>
    189c:	0b39053b 	bleq	e42d90 <__ccfg+0xe22de8>
    18a0:	00001349 	andeq	r1, r0, r9, asr #6
	while (n--)
    18a4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
}
    18a8:	0013010c 	andseq	r0, r3, ip, lsl #2
		*dest++ = c;
    18ac:	00051000 	andeq	r1, r5, r0
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	00001349 	andeq	r1, r0, r9, asr #6
		syserror (EREQPAR, "addv");
    18b4:	03003411 	movweq	r3, #1041	; 0x411
		syserror (ERESOURCE, "addv");
    18b8:	3b0b3a0e 	blcc	2d00f8 <__ccfg+0x2b0150>
	if (ioreq [loc] != NULL)
    18bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    18c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		syserror (ERESOURCE, "addv");
    18c4:	1200000c 	andne	r0, r0, #12
	ioreq [loc] = rf;
    18c8:	0b0b0113 	bleq	2c1d1c <__ccfg+0x2a1d74>
}
    18cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18d0:	13010b39 	movwne	r0, #6969	; 0x1b39
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    18d8:	3a0e0300 	bcc	3824e0 <__ccfg+0x362538>
    18dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e4:	1400000b 	strne	r0, [r0], #-11
    18e8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    18ec:	0b3a0b0b 	bleq	e84520 <__ccfg+0xe64578>
		syserror (ENODEVICE, "io");
    18f0:	0b39053b 	bleq	e42de4 <__ccfg+0xe22e3c>
    18f4:	00001301 	andeq	r1, r0, r1, lsl #6
	if (len == 0)
    18f8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1900:	00341600 	eorseq	r1, r4, r0, lsl #12
	if (ret >= 0)
    1904:	0b3a0e03 	bleq	e85118 <__ccfg+0xe65170>
	if (ret == -1) {
    1908:	0b390b3b 	bleq	e445fc <__ccfg+0xe24654>
    190c:	0a021349 	beq	86638 <__ccfg+0x66690>
		if (retry == WNONE)
    1910:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
		iowait (dev, operation, retry);
    1914:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1918:	3b0b3a0e 	blcc	2d0158 <__ccfg+0x2b01b0>
    191c:	110b390b 	tstne	fp, fp, lsl #18
			release;
    1920:	40011201 	andmi	r1, r1, r1, lsl #4
	if (ret == -2) {
    1924:	1800000a 	stmdane	r0, {r1, r3}
		if (retry != WNONE) {
    1928:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1878 <__pi_strncpy+0x6>
    192c:	0b3a0e03 	bleq	e85140 <__ccfg+0xe65198>
			iowait (dev, operation, retry);
    1930:	0b390b3b 	bleq	e44624 <__ccfg+0xe2467c>
    1934:	13490c27 	movtne	r0, #39975	; 0x9c27
			(ioreq [dev]) (NONE, buf, len);
    1938:	01120111 	tsteq	r2, r1, lsl r1
    193c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1940:	05190000 	ldreq	r0, [r9, #-0]
		(ioreq [dev]) (NONE, buf, len);
    1944:	3a080300 	bcc	20254c <__ccfg+0x1e25a4>
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    194c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1950:	1a000006 	bne	1970 <__pi_malloc_init>
	if (retry != WNONE) {
    1954:	08030005 	stmdaeq	r3, {r0, r2}
		delay (-ret - 2, retry);
    1958:	0b3b0b3a 	bleq	ec4648 <__ccfg+0xea46a0>
    195c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1960:	00000a02 	andeq	r0, r0, r2, lsl #20
    1964:	3f012e1b 	svccc	0x00012e1b
		release;
    1968:	3a0e030c 	bcc	3825a0 <__ccfg+0x3625f8>
    196c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1970:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1974:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1978:	010a4001 	tsteq	sl, r1
    197c:	1c000013 	stcne	0, cr0, [r0], {19}
    1980:	08030005 	stmdaeq	r3, {r0, r2}
		syserror (ERESOURCE, "mal1");
    1984:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1988:	13490b39 	movtne	r0, #39737	; 0x9b39
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    198c:	00000602 	andeq	r0, r0, r2, lsl #12
    1990:	3f002e1d 	svccc	0x00002e1d
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1994:	3a0e030c 	bcc	3825cc <__ccfg+0x362624>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1998:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    199c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    19a0:	000a4001 	andeq	r4, sl, r1
    19a4:	00341e00 	eorseq	r1, r4, r0, lsl #28
}
    19a8:	0b3a0803 	bleq	e839bc <__ccfg+0xe63a14>
    19ac:	0b39053b 	bleq	e42ea0 <__ccfg+0xe22ef8>
    19b0:	06021349 	streq	r1, [r2], -r9, asr #6
    19b4:	0a1f0000 	beq	7c19bc <__ccfg+0x7a1a14>
    19b8:	3a0e0300 	bcc	3825c0 <__ccfg+0x362618>
    19bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pi_free (aword *ch) {
    19c0:	0001110b 	andeq	r1, r1, fp, lsl #2
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    19c4:	011d2000 	tsteq	sp, r0
    19c8:	01521331 	cmpeq	r2, r1, lsr r3
		syserror (EMALLOC, "malg");
    19cc:	0b580655 	bleq	1603328 <__ccfg+0x15e3380>
    19d0:	0b570559 	bleq	15c2f3c <__ccfg+0x15a2f94>
	mcfree [MA_NP] += m_size (ch);
    19d4:	00001301 	andeq	r1, r0, r1, lsl #6
		m_size (ch) ^= MALLOC_UMASK;
    19d8:	31000521 	tstcc	r0, r1, lsr #10
    19dc:	22000013 	andcs	r0, r0, #19
	mcfree [MA_NP] += m_size (ch);
    19e0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	QFREE;
    19e4:	01120111 	tsteq	r2, r1, lsl r1
	if (mevent [MA_NP] . nwait) {
    19e8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    19ec:	00000b57 	andeq	r0, r0, r7, asr fp
		trigger ((aword)(&(mevent [MA_NP])));
    19f0:	03000523 	movweq	r0, #1315	; 0x523
		mevent [MA_NP] . nwait --;
    19f4:	3b0b3a0e 	blcc	2d0234 <__ccfg+0x2b028c>
}
    19f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19fc:	00060213 	andeq	r0, r6, r3, lsl r2
    1a00:	000a2400 	andeq	r2, sl, r0, lsl #8
    1a04:	0b3a0e03 	bleq	e85218 <__ccfg+0xe65270>
void kill (aword pid) {
    1a08:	0b390b3b 	bleq	e446fc <__ccfg+0xe24754>
		pid = (aword) __pi_curr;
    1a0c:	00000111 	andeq	r0, r0, r1, lsl r1
	j = NULL;
    1a10:	31011d25 	tstcc	r1, r5, lsr #26
	for_all_tasks (i) {
    1a14:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	syserror (EREQPAR, "kpi");
    1a18:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1a1c:	000b570b 	andeq	r5, fp, fp, lsl #14
		if ((aword)i == pid) {
    1a20:	00052600 	andeq	r2, r5, r0, lsl #12
    1a24:	06021331 			; <UNDEFINED> instruction: 0x06021331
				__PCB = i->Next;
    1a28:	1d270000 	stcne	0, cr0, [r7, #-0]
			killev (i);
    1a2c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
			ufree (i);
    1a30:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			if (i == __pi_curr)
    1a34:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1a38:	0013010b 	andseq	r0, r3, fp, lsl #2
				release;
    1a3c:	011d2800 	tsteq	sp, r0, lsl #16
				j->Next = i->Next;
    1a40:	01111331 	tsteq	r1, r1, lsr r3
    1a44:	0b580112 	bleq	1601e94 <__ccfg+0x15e1eec>
    1a48:	0b570b59 	bleq	15c47b4 <__ccfg+0x15a480c>
}
    1a4c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    1a50:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1a54:	3b0b3a0e 	blcc	2d0294 <__ccfg+0x2b02ec>
	if (size < 8)
    1a58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		_size = 2;
    1a5c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a60:	000a4001 	andeq	r4, sl, r1
		_size = (((aword)size) + 3) >> 2;
    1a64:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a68:	0b3a0e03 	bleq	e8527c <__ccfg+0xe652d4>
		_size = (((aword)size) + 3) >> 2;
    1a6c:	0b390b3b 	bleq	e44760 <__ccfg+0xe247b8>
		if (mevent [MA_NP] . nfail != 255)
    1a70:	01120111 	tsteq	r2, r1, lsl r1
    1a74:	13010a40 	movwne	r0, #6720	; 0x1a40
			mevent [MA_NP] . nfail ++;
    1a78:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
		mnfree [MA_NP] = 0;
    1a7c:	3a0e0300 	bcc	382684 <__ccfg+0x3626dc>
    1a80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a84:	000b200b 	andeq	r2, fp, fp
    1a88:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
			syserror (EMALLOC, "malc");
    1a8c:	0b3a0e03 	bleq	e852a0 <__ccfg+0xe652f8>
    1a90:	0b390b3b 	bleq	e44784 <__ccfg+0xe247dc>
		if (m_size (chunk) >= _size)
    1a94:	01110c27 	tsteq	r1, r7, lsr #24
    1a98:	0a400112 	beq	1001ee8 <__ccfg+0xfe1f40>
		chunk = m_nextp (chunk)) {
    1a9c:	00001301 	andeq	r1, r0, r1, lsl #6
		m_setnextp (cc, m_nextp (chunk));
    1aa0:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1aa4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    1aa8:	13310034 	teqne	r1, #52	; 0x34
			m_size (chunk) = _size;
    1aac:	00000602 	andeq	r0, r0, r2, lsl #12
			cc = chunk + _size + m_hdrlen;
    1ab0:	03012e2f 	movweq	r2, #7727	; 0x1e2f
    1ab4:	3b0b3a0e 	blcc	2d02f4 <__ccfg+0x2b034c>
			m_size (cc) = waste - m_hdrlen;
    1ab8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			QFREE;
    1abc:	010b2013 	tsteq	fp, r3, lsl r0
		mevent [MA_NP] . nfail = 0;
    1ac0:	30000013 	andcc	r0, r0, r3, lsl r0
		mcfree [MA_NP] -= m_size (chunk);
    1ac4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1ac8:	0b3b0b3a 	bleq	ec47b8 <__ccfg+0xea4810>
    1acc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ad0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
		m_size (chunk) |= MALLOC_UMASK;
    1ad4:	3a0e0301 	bcc	3826e0 <__ccfg+0x362738>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		m_size (chunk) |= MALLOC_UMASK;
    1adc:	200c270b 	andcs	r2, ip, fp, lsl #14
			mnfree [MA_NP] = mcfree [MA_NP];
    1ae0:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    1ae4:	00053200 	andeq	r3, r5, r0, lsl #4
    1ae8:	0b3a0803 	bleq	e83afc <__ccfg+0xe63b54>
    1aec:	0b390b3b 	bleq	e447e0 <__ccfg+0xe24838>
    1af0:	00001349 	andeq	r1, r0, r9, asr #6
    1af4:	31011d33 	tstcc	r1, r3, lsr sp
    1af8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1afc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
aword __pi_fork (fsmcode func, aword data) {
    1b00:	010b570b 	tsteq	fp, fp, lsl #14
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b04:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
    1b08:	0e03012e 	adfeqsp	f0, f3, #0.5
    1b0c:	0b3b0b3a 	bleq	ec47fc <__ccfg+0xea4854>
		if ((j = __PCB) == NULL)
    1b10:	13490b39 	movtne	r0, #39737	; 0x9b39
	i->Next = NULL;
    1b14:	01120111 	tsteq	r2, r1, lsl r1
	i->data = data;
    1b18:	13010a40 	movwne	r0, #6720	; 0x1a40
		if ((j = __PCB) == NULL)
    1b1c:	34350000 	ldrtcc	r0, [r5], #-0
}
    1b20:	3a080300 	bcc	202728 <__ccfg+0x1e2780>
			for (; j->Next != NULL; j = j->Next);
    1b24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	return (aword) i;
    1b2c:	36000006 	strcc	r0, [r0], -r6
    1b30:	0e03012e 	adfeqsp	f0, f3, #0.5
	if (mevent [MA_NP] . nwait != 255)
    1b34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b38:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1b3c:	13010b20 	movwne	r0, #6944	; 0x1b20
		mevent [MA_NP] . nwait ++;
    1b40:	05370000 	ldreq	r0, [r7, #-0]!
	wait ((aword)(&(mevent [MA_NP])), state);
    1b44:	3a0e0300 	bcc	38274c <__ccfg+0x3627a4>
    1b48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void diag (const char *mess, ...) {
    1b4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b50:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
    1b54:	0b3a0e03 	bleq	e85368 <__ccfg+0xe653c0>
	diag_disable_int (a, is);
    1b58:	0b390b3b 	bleq	e4484c <__ccfg+0xe248a4>
    1b5c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1b60:	13010b20 	movwne	r0, #6944	; 0x1b20
				d = (bc == 16) ? 10000 : 1000000000;
    1b64:	05390000 	ldreq	r0, [r9, #-0]!
	diag_disable_int (a, is);
    1b68:	3a0e0300 	bcc	382770 <__ccfg+0x3627c8>
	while (*mess != '\0') {
    1b6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	dgout ('\r');
    1b70:	0013490b 	andseq	r4, r3, fp, lsl #18
	dgout ('\n');
    1b74:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
    1b78:	01111331 	tsteq	r1, r1, lsr r3
    1b7c:	0a400112 	beq	1001fcc <__ccfg+0xfe2024>
	diag_wait (a);
    1b80:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
	diag_enable_int (a, is);
    1b84:	11133100 	tstne	r3, r0, lsl #2
    1b88:	58011201 	stmdapl	r1, {r0, r9, ip}
}
    1b8c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1b90:	0000000b 	andeq	r0, r0, fp
    1b94:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
		if (*mess == '%') {
    1b98:	030b130e 	movweq	r1, #45838	; 0xb30e
    1b9c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			if (*mess == 'l') {
    1ba0:	10011106 	andne	r1, r1, r6, lsl #2
    1ba4:	02000006 	andeq	r0, r0, #6
				mess++;
    1ba8:	0b0b0024 	bleq	2c1c40 <__ccfg+0x2a1c98>
				val = va_arg (ap, lword);
    1bac:	0e030b3e 	vmoveq.16	d3[0], r0
				bc = 32;
    1bb0:	16030000 	strne	r0, [r3], -r0
				bc = 16;
    1bb4:	3a0e0300 	bcc	3827bc <__ccfg+0x362814>
			switch (*mess) {
    1bb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bbc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1bc0:	00240400 	eoreq	r0, r4, r0, lsl #8
				dgout ('%');
    1bc4:	0b3e0b0b 	bleq	f847f8 <__ccfg+0xf64850>
    1bc8:	00000803 	andeq	r0, r0, r3, lsl #16
				dgout (*mess);
    1bcc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    1bd0:	06000013 			; <UNDEFINED> instruction: 0x06000013
			switch (*mess) {
    1bd4:	13490035 	movtne	r0, #36917	; 0x9035
					v = __pi_hex_enc_table [
    1bd8:	0f070000 	svceq	0x00070000
					i += 4;
    1bdc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
					(val >> (bc - i)) & 0xf];
    1be0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1be4:	0b0b0113 	bleq	2c2038 <__ccfg+0x2a2090>
					dgout (v);
    1be8:	0b3b0b3a 	bleq	ec48d8 <__ccfg+0xea4930>
    1bec:	13010b39 	movwne	r0, #6969	; 0x1b39
				while (i < bc) {
    1bf0:	0d090000 	stceq	0, cr0, [r9, #-0]
			mess++;
    1bf4:	3a0e0300 	bcc	3827fc <__ccfg+0x362854>
					d /= 10;
    1bf8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if ((val >> (bc - 1)) & 1) {
    1bfc:	0b13490b 	bleq	4d4030 <__ccfg+0x4b4088>
    1c00:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
					dgout ('-');
    1c04:	000b380b 	andeq	r3, fp, fp, lsl #16
    1c08:	000d0a00 	andeq	r0, sp, r0, lsl #20
						val |= 0xffff0000;
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
    1c14:	0b381349 	bleq	e06940 <__ccfg+0xde6998>
				d = (bc == 16) ? 10000 : 1000000000;
    1c18:	340b0000 	strcc	r0, [fp], #-0
    1c1c:	3a0e0300 	bcc	382824 <__ccfg+0x36287c>
    1c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					v = (word) (val / d);
    1c24:	3f13490b 	svccc	0x0013490b
					if (v || d == 1) break;
    1c28:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1c2c:	01010c00 	tsteq	r1, r0, lsl #24
					d /= 10;
    1c30:	13011349 	movwne	r1, #4937	; 0x1349
				d = (bc == 16) ? 10000 : 1000000000;
    1c34:	210d0000 	mrscs	r0, (UNDEF: 13)
					dgout (v + '0');
    1c38:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1c3c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1c40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					d /= 10;
    1c44:	13490b39 	movtne	r0, #39737	; 0x9b39
					val = val - (v * d);
    1c48:	150f0000 	strne	r0, [pc, #-0]	; 1c50 <diag+0x104>
					if (d == 0) break;
    1c4c:	010c2701 	tsteq	ip, r1, lsl #14
					v = (word) (val / d);
    1c50:	10000013 	andne	r0, r0, r3, lsl r0
    1c54:	13490005 	movtne	r0, #36869	; 0x9005
				if (bc == 16)
    1c58:	34110000 	ldrcc	r0, [r1], #-0
				d = (bc == 16) ? 10000 : 1000000000;
    1c5c:	3a0e0300 	bcc	382864 <__ccfg+0x3628bc>
					val &= 0xffff;
    1c60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					dgout (*s);
    1c64:	3f13490b 	svccc	0x0013490b
					s++;
    1c68:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				while (*s != '\0') {
    1c6c:	01131200 	tsteq	r3, r0, lsl #4
    1c70:	0b3a0b0b 	bleq	e848a4 <__ccfg+0xe648fc>
			dgout (*mess++);
    1c74:	0b39053b 	bleq	e43168 <__ccfg+0xe231c0>
    1c78:	00001301 	andeq	r1, r0, r1, lsl #6
    1c7c:	03000d13 	movweq	r0, #3347	; 0xd13
    1c80:	3b0b3a0e 	blcc	2d04c0 <__ccfg+0x2b0518>
    1c84:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1c88:	000b3813 	andeq	r3, fp, r3, lsl r8
    1c8c:	01131400 	tsteq	r3, r0, lsl #8
    1c90:	0b0b0e03 	bleq	2c54a4 <__ccfg+0x2a54fc>
    1c94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	^ entropy
    1c98:	13010b39 	movwne	r0, #6969	; 0x1b39
}
    1c9c:	21150000 	tstcs	r5, r0
    1ca0:	2f134900 	svccs	0x00134900
    1ca4:	1600000b 	strne	r0, [r0], -fp
    1ca8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1bf8 <diag+0xac>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1cac:	0b3a0e03 	bleq	e854c0 <__ccfg+0xe65518>
	word cs = size + hblenb;
    1cb0:	0b390b3b 	bleq	e449a4 <__ccfg+0xe249fc>
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1cb4:	13490c27 	movtne	r0, #39975	; 0x9c27
    1cb8:	01120111 	tsteq	r2, r1, lsl r1
	p -> length = size;
    1cbc:	13010a40 	movwne	r0, #6720	; 0x1a40
}
    1cc0:	05170000 	ldreq	r0, [r7, #-0]
	if (p->attributes.b.queued) {
    1cc4:	3a080300 	bcc	2028cc <__ccfg+0x1e2924>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1cd0:	18000006 	stmdane	r0, {r1, r2}
		p->attributes.b.queued = 0;
    1cd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
	deq (p);	// Remove from queue
    1ce0:	00000602 	andeq	r0, r0, r2, lsl #12
}
    1ce4:	03003419 	movweq	r3, #1049	; 0x419
	tfree ((address)p);
    1ce8:	3b0b3a08 	blcc	2d0510 <__ccfg+0x2b0568>
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1cf0:	00060213 	andeq	r0, r6, r3, lsl r2
    1cf4:	11010000 	mrsne	r0, (UNDEF: 1)
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf8:	130e2501 	movwne	r2, #58625	; 0xe501
    1cfc:	1b0e030b 	blne	382930 <__ccfg+0x362988>
	if (q_empty (q))
    1d00:	1106550e 	tstne	r6, lr, lsl #10
    1d04:	00061001 	andeq	r1, r6, r1
		trigger (q);
    1d08:	00240200 	eoreq	r0, r4, r0, lsl #4
	if (p->attributes.b.urgent) {
    1d0c:	0b3e0b0b 	bleq	f84940 <__ccfg+0xf64998>
		p->u.bqueue.next = q->next;
    1d10:	00000e03 	andeq	r0, r0, r3, lsl #28
		p->u.bqueue.prev = q;
    1d14:	03001603 	movweq	r1, #1539	; 0x603
		q->next->prev = (qitem_t*) p;
    1d18:	3b0b3a0e 	blcc	2d0558 <__ccfg+0x2b05b0>
	p->attributes.b.queued = 1;
    1d1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1d20:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
}
    1d24:	0b0b0024 	bleq	2c1dbc <__ccfg+0x2a1e14>
		p->u.bqueue.prev = q->prev;
    1d28:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		q->prev->next = (qitem_t*) p;
    1d2c:	26050000 	strcs	r0, [r5], -r0
		q->prev = (qitem_t*) p;
    1d30:	00134900 	andseq	r4, r3, r0, lsl #18
    1d34:	00350600 	eorseq	r0, r5, r0, lsl #12
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1d38:	00001349 	andeq	r1, r0, r9, asr #6
	deq (p);	// Soft dequeue, timer and hook left intact
    1d3c:	0b011307 	bleq	46960 <__ccfg+0x269b8>
	switch (dv) {
    1d40:	3b0b3a0b 	blcc	2d0574 <__ccfg+0x2b05cc>
    1d44:	010b390b 	tsteq	fp, fp, lsl #18
    1d48:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1d4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			p->attributes.b.urgent = 1;
    1d50:	0b3b0b3a 	bleq	ec4a40 <__ccfg+0xea4a98>
    1d54:	13490b39 	movtne	r0, #39737	; 0x9b39
			verify_ses (p, "dispose ses");
    1d58:	0b0d0b0b 	bleq	34498c <__ccfg+0x3249e4>
    1d5c:	0b380b0c 	bleq	e04994 <__ccfg+0xde49ec>
    1d60:	0d090000 	stceq	0, cr0, [r9, #-0]
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			verify_phy (p, "dispose phy");
    1d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1d70:	0a00000b 	beq	1da4 <dispose+0x6c>
}
    1d74:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			enq (oqueues [p->attributes.b.phys], p);
    1d78:	0b3b0b3a 	bleq	ec4a68 <__ccfg+0xea4ac0>
			p->attributes.b.urgent = 1;
    1d7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d80:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			verify_phy (p, "dispose phy");
    1d84:	0f0b0000 	svceq	0x000b0000
    1d88:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d8c:	0c000013 	stceq	0, cr0, [r0], {19}
    1d90:	13490101 	movtne	r0, #37121	; 0x9101
    1d94:	00001301 	andeq	r1, r0, r1, lsl #6
    1d98:	0000210d 	andeq	r2, r0, sp, lsl #2
			enq (oqueues [p->attributes.b.phys], p);
    1d9c:	00160e00 	andseq	r0, r6, r0, lsl #28
    1da0:	0b3a0e03 	bleq	e855b4 <__ccfg+0xe6560c>
}
    1da4:	0b39053b 	bleq	e43298 <__ccfg+0xe232f0>
			rlp (p);
    1da8:	00001349 	andeq	r1, r0, r9, asr #6
}
    1dac:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1db0:	0013010c 	andseq	r0, r3, ip, lsl #2
    1db4:	00051000 	andeq	r1, r5, r0
    1db8:	00001349 	andeq	r1, r0, r9, asr #6
    1dbc:	03003411 	movweq	r3, #1041	; 0x411
    1dc0:	3b0b3a0e 	blcc	2d0600 <__ccfg+0x2b0658>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1dc4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (b->attributes.b.outgoing) {
    1dc8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	b = header (p);
    1dcc:	1200000c 	andne	r0, r0, #12
	if (b->attributes.b.outgoing) {
    1dd0:	0b0b0113 	bleq	2c2224 <__ccfg+0x2a227c>
		verify_ses (b, "tcv02");
    1dd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1dd8:	13010b39 	movwne	r0, #6969	; 0x1b39
    1ddc:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1de0:	3a0e0300 	bcc	3829e8 <__ccfg+0x362a40>
    1de4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		verify_plg (b, tcv_out, "tcv03");
    1de8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1dec:	1400000b 	strne	r0, [r0], #-11
    1df0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1df4:	0b3a0b0b 	bleq	e84a28 <__ccfg+0xe64a80>
    1df8:	0b39053b 	bleq	e432ec <__ccfg+0xe23344>
    1dfc:	00001301 	andeq	r1, r0, r1, lsl #6
    1e00:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1e04:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1e08:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e0c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
}
    1e10:	0b3b0b3a 	bleq	ec4b00 <__ccfg+0xea4b58>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e14:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		rlp (b);
    1e18:	01111349 	tsteq	r1, r9, asr #6
}
    1e1c:	0a400112 	beq	100226c <__ccfg+0xfe22c4>
		rlp (b);
    1e20:	05170000 	ldreq	r0, [r7, #-0]
    1e24:	3a080300 	bcc	202a2c <__ccfg+0x1e2a84>
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e30:	18000006 	stmdane	r0, {r1, r2}
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e34:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e38:	0b3b0b3a 	bleq	ec4b28 <__ccfg+0xea4b80>
    1e3c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e40:	00000602 	andeq	r0, r0, r2, lsl #12
	va_start (ap, plid);
    1e44:	01110100 	tsteq	r1, r0, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e48:	0b130e25 	bleq	4c56e4 <__ccfg+0x4a573c>
    1e4c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1e50:	01110655 	tsteq	r1, r5, asr r6
    1e54:	00000610 	andeq	r0, r0, r0, lsl r6
    1e58:	0b002402 	bleq	ae68 <__exidx_end+0x5550>
    1e5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			syserror (ENODEVICE, "tcv04");
    1e60:	0300000e 	movweq	r0, #14
		syserror (EMALLOC, "tcv05");
    1e64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	attp.b.outgoing = 1;
    1e68:	0b3b0b3a 	bleq	ec4b58 <__ccfg+0xea4bb0>
    1e6c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e70:	24040000 	strcs	r0, [r4], #-0
    1e74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e78:	0008030b 	andeq	r0, r8, fp, lsl #6
		if (descriptors [fd] == NULL)
    1e7c:	01130500 	tsteq	r3, r0, lsl #10
    1e80:	0b0b0e03 	bleq	2c5694 <__ccfg+0x2a56ec>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e84:	0b3b0b3a 	bleq	ec4b74 <__ccfg+0xea4bcc>
		return ERROR;
    1e88:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1e8c:	03000d06 	movweq	r0, #3334	; 0xd06
    1e90:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    1e94:	000c340b 	andeq	r3, ip, fp, lsl #8
	s->attpattern.b.session = fd;
    1e98:	000f0700 	andeq	r0, pc, r0, lsl #14
    1e9c:	00000b0b 	andeq	r0, r0, fp, lsl #22
	descriptors [fd] = s;
    1ea0:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
	q_init (&(s->rqueue));
    1ea4:	09000013 	stmdbeq	r0, {r0, r1, r4}
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1ea8:	13490035 	movtne	r0, #36917	; 0x9035
    1eac:	130a0000 	movwne	r0, #40960	; 0xa000
    1eb0:	3a0b0b01 	bcc	2c4abc <__ccfg+0x2a4b14>
    1eb4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1eb8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ebc:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1ec0:	0b3a0e03 	bleq	e856d4 <__ccfg+0xe6572c>
	descriptors [fd] = s;
    1ec4:	0b390b3b 	bleq	e44bb8 <__ccfg+0xe24c10>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1ec8:	0b0b1349 	bleq	2c6bf4 <__ccfg+0x2a6c4c>
    1ecc:	0b0c0b0d 	bleq	304b08 <__ccfg+0x2e4b60>
	if (s == NULL)
    1ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
		syserror (EMALLOC, "tcv05");
    1ed4:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ee0:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ee4:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1ee8:	0b3a0e03 	bleq	e856fc <__ccfg+0xe65754>
    1eec:	0b390b3b 	bleq	e44be0 <__ccfg+0xe24c38>
    1ef0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1dd4 <tcv_endp+0x10>
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ef4:	00000c3c 	andeq	r0, r0, ip, lsr ip
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ef8:	0b000f0e 	bleq	5b38 <__exidx_end+0x220>
    1efc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f00:	01010f00 	tsteq	r1, r0, lsl #30
	plugins [ord] = pl;
    1f04:	13011349 	movwne	r1, #4937	; 0x1349
	return 0;
    1f08:	21100000 	tstcs	r0, r0
		return ERROR;
    1f0c:	11000000 	mrsne	r0, (UNDEF: 0)
}
    1f10:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	verify_fds (fd, "tcv10");
    1f18:	13490b39 	movtne	r0, #39737	; 0x9b39
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1f1c:	15120000 	ldrne	r0, [r2, #-0]
	verify_fds (fd, "tcv10");
    1f20:	010c2701 	tsteq	ip, r1, lsl #14
    1f24:	13000013 	movwne	r0, #19
    1f28:	13490005 	movtne	r0, #36869	; 0x9005
	verify_plg (b, tcv_frm, "tcv11");
    1f2c:	34140000 	ldrcc	r0, [r4], #-0
	b = q_first (rq);
    1f30:	3a0e0300 	bcc	382b38 <__ccfg+0x362b90>
	if (q_end (b, rq)) {
    1f34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (state != WNONE) {
    1f38:	3f13490b 	svccc	0x0013490b
    1f3c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			when (rq, state);
    1f40:	01131500 	tsteq	r3, r0, lsl #10
			release;
    1f44:	0b3a0b0b 	bleq	e84b78 <__ccfg+0xe64bd0>
	deq (b);	// Dequeue the packet ...
    1f48:	0b39053b 	bleq	e4343c <__ccfg+0xe23494>
    1f4c:	00001301 	andeq	r1, r0, r1, lsl #6
	p = ((address)(b + 1));
    1f50:	03000d16 	movweq	r0, #3350	; 0xd16
	verify_plg (b, tcv_frm, "tcv11");
    1f54:	3b0b3a0e 	blcc	2d0794 <__ccfg+0x2b07ec>
    1f58:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1f5c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1f60:	01131700 	tsteq	r3, r0, lsl #14
    1f64:	0b0b0e03 	bleq	2c5778 <__ccfg+0x2a57d0>
    1f68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1f6c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1f70:	21180000 	tstcs	r8, r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1f74:	2f134900 	svccs	0x00134900
    1f78:	1900000b 	stmdbne	r0, {r0, r1, r3}
	b->u.pointers.tail =
    1f7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1ecc <tcv_open+0x98>
}
    1f80:	0b3a0e03 	bleq	e85794 <__ccfg+0xe657ec>
		return NULL;
    1f84:	0b390b3b 	bleq	e44c78 <__ccfg+0xe24cd0>
    1f88:	13490c27 	movtne	r0, #39975	; 0x9c27
    1f8c:	01120111 	tsteq	r2, r1, lsl r1
    1f90:	13010a40 	movwne	r0, #6720	; 0x1a40
    1f94:	051a0000 	ldreq	r0, [sl, #-0]
	verify_fds (fd, "tcv16");
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
								Boolean urg) {
    1f9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	verify_fds (fd, "tcv16");
    1fa4:	1b000006 	blne	1fc4 <tcv_wnps+0x2c>
    1fa8:	08030005 	stmdaeq	r3, {r0, r2}
    1fac:	0b3b0b3a 	bleq	ec4c9c <__ccfg+0xea4cf4>
	verify_pld (s, tcv_frm, "tcv17");
    1fb0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1fb4:	00000a02 	andeq	r0, r0, r2, lsl #20
    1fb8:	0000181c 	andeq	r1, r0, ip, lsl r8
    1fbc:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1fc0:	0b3a0e03 	bleq	e857d4 <__ccfg+0xe6582c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
    1fcc:	341e0000 	ldrcc	r0, [lr], #-0
	ptrs.head = (word) fd;
    1fd0:	3a080300 	bcc	202bd8 <__ccfg+0x1e2c30>
	ptrs.tail = (word) urg;
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fdc:	1f000006 	svcne	0x00000006
		if (state != WNONE) {
    1fe0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1fe4:	0b3b0b3a 	bleq	ec4cd4 <__ccfg+0xea4d2c>
}
    1fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
			when (eid, state);
    1fec:	00000a02 	andeq	r0, r0, r2, lsl #20
    1ff0:	01110100 	tsteq	r1, r0, lsl #2
			release;
    1ff4:	0b130e25 	bleq	4c5890 <__ccfg+0x4a58e8>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1ff8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1ffc:	01110655 	tsteq	r1, r5, asr r6
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2000:	00000610 	andeq	r0, r0, r0, lsl r6
    2004:	0b002402 	bleq	b014 <__exidx_end+0x56fc>
    2008:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    200c:	0300000e 	movweq	r0, #14
    2010:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2014:	0b3b0b3a 	bleq	ec4d04 <__ccfg+0xea4d5c>
		if (state != WNONE) {
    2018:	13490b39 	movtne	r0, #39737	; 0x9b39
    201c:	24040000 	strcs	r0, [r4], #-0
			tmwait (state);
    2020:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2024:	0008030b 	andeq	r0, r8, fp, lsl #6
	b->attributes = s->attpattern;
    2028:	01130500 	tsteq	r3, r0, lsl #10
		b->attributes.b.urgent = 1;
    202c:	0b0b0e03 	bleq	2c5840 <__ccfg+0x2a5898>
    2030:	0b3b0b3a 	bleq	ec4d20 <__ccfg+0xea4d78>
	b->u.pointers.head = ptrs.head;
    2034:	00001301 	andeq	r1, r0, r1, lsl #6
	b->u.pointers.tail = length;
    2038:	03000d06 	movweq	r0, #3334	; 0xd06
	return (address) (b + 1);
    203c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2040:	000c340b 	andeq	r3, ip, fp, lsl #8
    2044:	000f0700 	andeq	r0, pc, r0, lsl #14
    2048:	00000b0b 	andeq	r0, r0, fp, lsl #22
    204c:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    2050:	09000013 	stmdbeq	r0, {r0, r1, r4}
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2054:	13490035 	movtne	r0, #36917	; 0x9035
	if (len >= b->u.pointers.tail)
    2058:	130a0000 	movwne	r0, #40960	; 0xa000
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    205c:	3a0b0b01 	bcc	2c4c68 <__ccfg+0x2a4cc0>
    2060:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (len > 0) {
    2064:	0013010b 	andseq	r0, r3, fp, lsl #2
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2068:	000d0b00 	andeq	r0, sp, r0, lsl #22
    206c:	0b3a0e03 	bleq	e85880 <__ccfg+0xe658d8>
    2070:	0b390b3b 	bleq	e44d64 <__ccfg+0xe24dbc>
		b->u.pointers.tail -= len;
    2074:	0b0b1349 	bleq	2c6da0 <__ccfg+0x2a6df8>
    2078:	0b0c0b0d 	bleq	304cb4 <__ccfg+0x2e4d0c>
    207c:	00000b38 	andeq	r0, r0, r8, lsr fp
		b->u.pointers.head += len;
    2080:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    208c:	000b3813 	andeq	r3, fp, r3, lsl r8
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2090:	00340d00 	eorseq	r0, r4, r0, lsl #26
    2094:	0b3a0e03 	bleq	e858a8 <__ccfg+0xe65900>
    2098:	0b390b3b 	bleq	e44d8c <__ccfg+0xe24de4>
	verify_fph (phy, "tcv23");
    209c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f80 <tcv_rnp+0x68>
    20a0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    20a4:	0b000f0e 	bleq	5ce4 <__exidx_end+0x3cc>
    20a8:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    20ac:	01010f00 	tsteq	r1, r0, lsl #30
	return (physical [phy]) (opt, arg);
    20b0:	13011349 	movwne	r1, #4937	; 0x1349
    20b4:	21100000 	tstcs	r0, r0
    20b8:	11000000 	mrsne	r0, (UNDEF: 0)
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    20bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if (opt < 0) {
    20c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (fd < 0)
    20c4:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (opt == PHYSOPT_PLUGINFO) {
    20c8:	15120000 	ldrne	r0, [r2, #-0]
			if (fd >= TCV_MAX_PLUGS)
    20cc:	010c2701 	tsteq	ip, r1, lsl #14
			if ((p = plugins [fd]) == NULL)
    20d0:	13000013 	movwne	r0, #19
    20d4:	13490005 	movtne	r0, #36869	; 0x9005
}
    20d8:	34140000 	ldrcc	r0, [r4], #-0
		if (fd >= TCV_MAX_PHYS)
    20dc:	3a0e0300 	bcc	382ce4 <__ccfg+0x362d3c>
		return physinfo [fd];
    20e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20e4:	3f13490b 	svccc	0x0013490b
	verify_fds (fd, "tcv22");
    20e8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    20ec:	01131500 	tsteq	r3, r0, lsl #10
    20f0:	0b3a0b0b 	bleq	e84d24 <__ccfg+0xe64d7c>
    20f4:	0b39053b 	bleq	e435e8 <__ccfg+0xe23640>
    20f8:	00001301 	andeq	r1, r0, r1, lsl #6
}
    20fc:	03000d16 	movweq	r0, #3350	; 0xd16
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2100:	3b0b3a0e 	blcc	2d0940 <__ccfg+0x2b0998>
    2104:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			return 0;
    2108:	000b3813 	andeq	r3, fp, r3, lsl r8
    210c:	01131700 	tsteq	r3, r0, lsl #14
    2110:	0b0b0e03 	bleq	2c5924 <__ccfg+0x2a597c>
    2114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2118:	13010b39 	movwne	r0, #6969	; 0x1b39
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    211c:	21180000 	tstcs	r8, r0
    2120:	2f134900 	svccs	0x00134900
	if (dsp != TCV_DSP_PASS) {
    2124:	1900000b 	stmdbne	r0, {r0, r1, r3}
		if (ses == NONE)
    2128:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2078 <tcv_read+0x24>
			syserror (EREQPAR, "tcv26");
    212c:	0b3a0e03 	bleq	e85940 <__ccfg+0xe65998>
		verify_fds (ses, "tcv27");
    2130:	0b390b3b 	bleq	e44e24 <__ccfg+0xe24e7c>
    2134:	13490c27 	movtne	r0, #39975	; 0x9c27
    2138:	01120111 	tsteq	r2, r1, lsl r1
    213c:	13010a40 	movwne	r0, #6720	; 0x1a40
    2140:	051a0000 	ldreq	r0, [sl, #-0]
		if ((p = apb (size)) != NULL) {
    2144:	3a080300 	bcc	202d4c <__ccfg+0x1e2da4>
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return NULL;
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			p->attributes = descriptors [ses] -> attpattern;
    2150:	1b000006 	blne	2170 <tcvp_new+0x54>
			dispose (p, dsp);
    2154:	08030005 	stmdaeq	r3, {r0, r2}
			p->attributes = descriptors [ses] -> attpattern;
    2158:	0b3b0b3a 	bleq	ec4e48 <__ccfg+0xea4ea0>
			p->attributes.b.outgoing = 0;
    215c:	13490b39 	movtne	r0, #39737	; 0x9b39
			dispose (p, dsp);
    2160:	00000a02 	andeq	r0, r0, r2, lsl #20
			return (address)(p + 1);
    2164:	0000181c 	andeq	r1, r0, ip, lsl r8
    2168:	00341d00 	eorseq	r1, r4, r0, lsl #26
	if ((p = apb (size)) != NULL)
    216c:	0b3a0e03 	bleq	e85980 <__ccfg+0xe659d8>
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
		return (address)(p + 1);
    2174:	06021349 	streq	r1, [r2], -r9, asr #6
    2178:	341e0000 	ldrcc	r0, [lr], #-0
    217c:	3a080300 	bcc	202d84 <__ccfg+0x1e2ddc>
    2180:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2184:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2188:	0000000a 	andeq	r0, r0, sl
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    218c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2190:	030b130e 	movweq	r1, #45838	; 0xb30e
		syserror (EREQPAR, "tcv28");
    2194:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		syserror (EMALLOC, "tcv29");
    2198:	10011106 	andne	r1, r1, r6, lsl #2
	physical [phy] = ps;
    219c:	02000006 	andeq	r0, r0, #6
	physinfo [phy] = info;
    21a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    21a4:	0b3b0b3a 	bleq	ec4e94 <__ccfg+0xea4eec>
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    21ac:	24030000 	strcs	r0, [r3], #-0
    21b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		syserror (EMALLOC, "tcv29");
    21b4:	000e030b 	andeq	r0, lr, fp, lsl #6
    21b8:	00260400 	eoreq	r0, r6, r0, lsl #8
	q_init (q);
    21bc:	00001349 	andeq	r1, r0, r9, asr #6
}
    21c0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    21c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    21c8:	0b0b0024 	bleq	2c2260 <__ccfg+0x2a22b8>
    21cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    21d0:	16070000 	strne	r0, [r7], -r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21d4:	3a0e0300 	bcc	382ddc <__ccfg+0x362e34>
	verify_fph (phy, "tcv30");
    21d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    21e0:	01170800 	tsteq	r7, r0, lsl #16
	verify_fph (phy, "tcv30");
    21e4:	0b3a0b0b 	bleq	e84e18 <__ccfg+0xe64e70>
    21e8:	0b390b3b 	bleq	e44edc <__ccfg+0xe24f34>
    21ec:	00001301 	andeq	r1, r0, r1, lsl #6
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    21f0:	03000d09 	movweq	r0, #3337	; 0xd09
    21f4:	3b0b3a0e 	blcc	2d0a34 <__ccfg+0x2b0a8c>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    21f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    21fc:	0a000013 	beq	2250 <tcvphy_rcv+0x7c>
		if (plugins [plg] == NULL)
    2200:	13490101 	movtne	r0, #37121	; 0x9101
    2204:	00001301 	andeq	r1, r0, r1, lsl #6
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2208:	4900210b 	stmdbmi	r0, {r0, r1, r3, r8, sp}
}
    220c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2210:	01130c00 	tsteq	r3, r0, lsl #24
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2214:	0b3a0b0b 	bleq	e84e48 <__ccfg+0xe64ea0>
    2218:	0b390b3b 	bleq	e44f0c <__ccfg+0xe24f64>
    221c:	00001301 	andeq	r1, r0, r1, lsl #6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2220:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2224:	3b0b3a0e 	blcc	2d0a64 <__ccfg+0x2b0abc>
    2228:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    222c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2230:	000f0e00 	andeq	r0, pc, r0, lsl #28
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2234:	00000b0b 	andeq	r0, r0, fp, lsl #22
	len -= (ap.head + ap.tail);
    2238:	0301130f 	movweq	r1, #4879	; 0x130f
    223c:	3a0b0b0e 	bcc	2c4e7c <__ccfg+0x2a4ed4>
    2240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2244:	0013010b 	andseq	r0, r3, fp, lsl #2
    2248:	000d1000 	andeq	r1, sp, r0
    224c:	0b3a0803 	bleq	e84260 <__ccfg+0xe642b8>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2250:	0b390b3b 	bleq	e44f44 <__ccfg+0xe24f9c>
    2254:	0b381349 	bleq	e06f80 <__ccfg+0xde6fd8>
    2258:	0f110000 	svceq	0x00110000
	return 1;
    225c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2260:	12000013 	andne	r0, r0, #19
    2264:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2268:	0b3a050b 	bleq	e8369c <__ccfg+0xe636f4>
    226c:	0b390b3b 	bleq	e44f60 <__ccfg+0xe24fb8>
	verify_fph (phy, "tcv32");
    2270:	00001301 	andeq	r1, r0, r1, lsl #6
    2274:	03000d13 	movweq	r0, #3347	; 0xd13
    2278:	3b0b3a0e 	blcc	2d0ab8 <__ccfg+0x2b0b10>
    227c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2280:	00053813 	andeq	r3, r5, r3, lsl r8
    2284:	00151400 	andseq	r1, r5, r0, lsl #8
	oq = oqueues [phy];
    2288:	00000c27 	andeq	r0, r0, r7, lsr #24
	b = q_first (oq);
    228c:	27011515 	smladcs	r1, r5, r5, r1
	if (q_end (b, oq)) {
    2290:	0113490c 	tsteq	r3, ip, lsl #18
	*len = b->length;
    2294:	16000013 			; <UNDEFINED> instruction: 0x16000013
	deq (b);	// Dequeue the packet ...
    2298:	13490005 	movtne	r0, #36869	; 0x9005
}
    229c:	13170000 	tstne	r7, #0
		return NULL;
    22a0:	0b0e0301 	bleq	382eac <__ccfg+0x362f04>
    22a4:	3b0b3a05 	blcc	2d0ac0 <__ccfg+0x2b0b18>
    22a8:	010b3905 	tsteq	fp, r5, lsl #18
    22ac:	18000013 	stmdane	r0, {r0, r1, r4}
	verify_fph (phy, "tcv33");
    22b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    22b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    22bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    22c0:	03000d19 	movweq	r0, #3353	; 0xd19
    22c4:	3b0b3a0e 	blcc	2d0b04 <__ccfg+0x2b0b5c>
	oq = oqueues [phy];
    22c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	b = q_first (oq);
    22cc:	00053813 	andeq	r3, r5, r3, lsl r8
		return NULL;
    22d0:	01131a00 	tsteq	r3, r0, lsl #20
	return (address)(b + 1);
    22d4:	0b0b0e03 	bleq	2c5ae8 <__ccfg+0x2a5b40>
}
    22d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    22e0:	131b0000 	tstne	fp, #0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    22e4:	3a0b0b01 	bcc	2c4ef0 <__ccfg+0x2a4f48>
	verify_plg (b, tcv_xmt, "tcv34");
    22e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	hblock_t *b = header (pkt);
    22ec:	0013010b 	andseq	r0, r3, fp, lsl #2
	verify_plg (b, tcv_xmt, "tcv34");
    22f0:	01171c00 	tsteq	r7, r0, lsl #24
    22f4:	0b3a0b0b 	bleq	e84f28 <__ccfg+0xe64f80>
    22f8:	0b39053b 	bleq	e437ec <__ccfg+0xe23844>
    22fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2300:	03000d1d 	movweq	r0, #3357	; 0xd1d
    2304:	3b0b3a0e 	blcc	2d0b44 <__ccfg+0x2b0b9c>
    2308:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	dispose (b, plugins [b->attributes.b.plugin] ->
    230c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
}
    2310:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
	dispose (b, plugins [b->attributes.b.plugin] ->
    2314:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2318:	2701151f 	smladcs	r1, pc, r5, r1	; <UNPREDICTABLE>
    231c:	0013010c 	andseq	r0, r3, ip, lsl #2
}
    2320:	00342000 	eorseq	r2, r4, r0
    while(1)
    2324:	0b3a0e03 	bleq	e85b38 <__ccfg+0xe65b90>
{
    2328:	0b39053b 	bleq	e4381c <__ccfg+0xe23874>
    SetupTrimDevice();
    232c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2210 <tcvphy_rcv+0x3c>
    pui32Src = &_etext;
    2330:	00000c3c 	andeq	r0, r0, ip, lsr ip
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2334:	03000d21 	movweq	r0, #3361	; 0xd21
    __asm("    ldr     r0, =_bss\n"
    2338:	3b0b3a0e 	blcc	2d0b78 <__ccfg+0x2b0bd0>
    233c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2340:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2344:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2348:	2200000b 	andcs	r0, r0, #11
   main();
    234c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    FaultISR();
    2350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        *pui32Dest++ = *pui32Src++;
    2354:	13490b39 	movtne	r0, #39737	; 0x9b39
    2358:	0b0d0b0b 	bleq	344f8c <__ccfg+0x324fe4>
    235c:	0b380b0c 	bleq	e04f94 <__ccfg+0xde4fec>
    2360:	34230000 	strtcc	r0, [r3], #-0
    2364:	3a0e0300 	bcc	382f6c <__ccfg+0x362fc4>
    2368:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    236c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2370:	2400000a 	strcs	r0, [r0], #-10
static byte get_byte () {
    2374:	13490021 	movtne	r0, #36897	; 0x9021
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2378:	0000052f 	andeq	r0, r0, pc, lsr #10
    237c:	03003425 	movweq	r3, #1061	; 0x425
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2380:	3b0b3a0e 	blcc	2d0bc0 <__ccfg+0x2b0c18>
    2384:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (ee_inp)
    2388:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			b |= 1;
    238c:	2600000c 	strcs	r0, [r0], -ip
    2390:	00000021 	andeq	r0, r0, r1, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2394:	03003427 	movweq	r3, #1063	; 0x427
	for (b = 0, i = 0; i < 8; i++) {
    2398:	3b0b3a0e 	blcc	2d0bd8 <__ccfg+0x2b0c30>
}
    239c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    23a0:	28000013 	stmdacs	r0, {r0, r1, r4}
    23a4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 22f4 <tcvphy_end+0x10>
static void put_byte (byte b) {
    23a8:	0b3a0e03 	bleq	e85bbc <__ccfg+0xe65c14>
    23ac:	0b39053b 	bleq	e438a0 <__ccfg+0xe238f8>
    23b0:	01110c27 	tsteq	r1, r7, lsr #24
    23b4:	0a400112 	beq	1002804 <__ccfg+0xfe285c>
		if (b & 0x80)
    23b8:	00001301 	andeq	r1, r0, r1, lsl #6
    23bc:	03000529 	movweq	r0, #1321	; 0x529
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23c0:	3b0b3a08 	blcc	2d0be8 <__ccfg+0x2b0c40>
	for (i = 0; i < 8; i++) {
    23c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		b <<= 1;
    23c8:	00060213 	andeq	r0, r6, r3, lsl r2
	for (i = 0; i < 8; i++) {
    23cc:	011d2a00 	tsteq	sp, r0, lsl #20
}
    23d0:	01521331 	cmpeq	r2, r1, lsr r3
    23d4:	0b580655 	bleq	1603d30 <__ccfg+0x15e3d88>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    23d8:	0b570559 	bleq	15c3944 <__ccfg+0x15a399c>
    23dc:	00001301 	andeq	r1, r0, r1, lsl #6
	put_byte (cmd);
    23e0:	55010b2b 	strpl	r0, [r1, #-2859]	; 0xfffff4d5
    23e4:	2c000006 	stccs	0, cr0, [r0], {6}
}
    23e8:	13310034 	teqne	r1, #52	; 0x34
    23ec:	342d0000 	strtcc	r0, [sp], #-0
static void wwait (word st, word del) {
    23f0:	02133100 	andseq	r3, r3, #0, 2
    23f4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    23f8:	1331001d 	teqne	r1, #29
	while (dopen && (rdsr () & 1)) {
    23fc:	06550152 			; <UNDEFINED> instruction: 0x06550152
    2400:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2404:	00000b57 	andeq	r0, r0, r7, asr fp
    2408:	03012e2f 	movweq	r2, #7727	; 0x1e2f
	put_byte (CMD_RDSR);
    240c:	3b0b3a0e 	blcc	2d0c4c <__ccfg+0x2b0ca4>
	r = get_byte ();
    2410:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    2414:	1113490c 	tstne	r3, ip, lsl #18
	while (dopen && (rdsr () & 1)) {
    2418:	40011201 	andmi	r1, r1, r1, lsl #4
}
    241c:	0013010a 	andseq	r0, r3, sl, lsl #2
		if (st == WNONE)
    2420:	00343000 	eorseq	r3, r4, r0
    2424:	0b3a0803 	bleq	e84438 <__ccfg+0xe64490>
			mdelay (1);
    2428:	0b39053b 	bleq	e4391c <__ccfg+0xe23974>
    242c:	06021349 	streq	r1, [r2], -r9, asr #6
			delay (del, st);
    2430:	0a310000 	beq	c42438 <__ccfg+0xc22490>
    2434:	3a0e0300 	bcc	38303c <__ccfg+0x363094>
			release;
    2438:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    243c:	0001110b 	andeq	r1, r1, fp, lsl #2
    2440:	010b3200 	mrseq	r3, R11_fiq
static void ready () {
    2444:	01120111 	tsteq	r2, r1, lsl r1
	if (dopen) {
    2448:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
		wwait (WNONE, 1);
    244c:	3a0e0301 	bcc	383058 <__ccfg+0x3630b0>
    2450:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2454:	010b200b 	tsteq	fp, fp
	dstat = 0;
    2458:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
}
    245c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2464:	13490b39 	movtne	r0, #39737	; 0x9b39
	udelay (1);
    2468:	05350000 	ldreq	r0, [r5, #-0]!
    246c:	3a0e0300 	bcc	383074 <__ccfg+0x3630cc>
	udelay (1);
    2470:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		dopen = DOPEN_TEMP;
    2474:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2478:	36000006 	strcc	r0, [r0], -r6
    247c:	1331001d 	teqne	r1, #29
    2480:	01120111 	tsteq	r2, r1, lsl r1
static void cclose () {
    2484:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	if (dopen == DOPEN_TEMP) {
    2488:	00000b57 	andeq	r0, r0, r7, asr fp
    248c:	55010b37 	strpl	r0, [r1, #-2871]	; 0xfffff4c9
		wwait (WNONE, 1);
    2490:	00130106 	andseq	r0, r3, r6, lsl #2
    2494:	011d3800 	tsteq	sp, r0, lsl #16
	cmd_0 (CMD_DP);
    2498:	01111331 	tsteq	r1, r1, lsr r3
    249c:	0b580112 	bleq	16028ec <__ccfg+0x15e2944>
		dopen = 0;
    24a0:	0b570559 	bleq	15c3a0c <__ccfg+0x15a3a64>
}
    24a4:	00001301 	andeq	r1, r0, r1, lsl #6
word ee_open () {
    24a8:	31000539 	tstcc	r0, r9, lsr r5
	ready ();
    24ac:	3a000013 	bcc	2500 <ser_out+0x30>
	dopen = DOPEN_PERM;
    24b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    24b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
}
    24b8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	if (dopen) {
    24bc:	00000b57 	andeq	r0, r0, r7, asr fp
    24c0:	03012e3b 	movweq	r2, #7739	; 0x1e3b
		dopen = DOPEN_TEMP;
    24c4:	3b0b3a0e 	blcc	2d0d04 <__ccfg+0x2b0d5c>
		cclose ();
    24c8:	110b3905 	tstne	fp, r5, lsl #18
}
    24cc:	40011201 	andmi	r1, r1, r1, lsl #4
int ser_out (word st, const char *m) {
    24d0:	0013010a 	andseq	r0, r3, sl, lsl #2
	if ((prcs = running (__outserial)) != 0) {
    24d4:	002e3c00 	eoreq	r3, lr, r0, lsl #24
    24d8:	0b3a0e03 	bleq	e85cec <__ccfg+0xe65d44>
    24dc:	0b39053b 	bleq	e439d0 <__ccfg+0xe23a28>
		join (prcs, st);
    24e0:	00000b20 	andeq	r0, r0, r0, lsr #22
		release;
    24e4:	03002e3d 	movweq	r2, #3645	; 0xe3d
	if (*m)
    24e8:	3b0b3a0e 	blcc	2d0d28 <__ccfg+0x2b0d80>
		prcs = strlen (m) +1;
    24ec:	110b3905 	tstne	fp, r5, lsl #18
    24f0:	40011201 	andmi	r1, r1, r1, lsl #4
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    24f4:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
    24f8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    24fc:	0b3b0b3a 	bleq	ec51ec <__ccfg+0xea5244>
		umwait (st);
    2500:	0b200b39 	bleq	8051ec <__ccfg+0x7e5244>
    2504:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
		prcs =  m [1] + 3;
    2508:	3a0e0301 	bcc	383114 <__ccfg+0x36316c>
	if (*m)
    250c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		strcpy (buf, m);
    2510:	200c270b 	andcs	r2, ip, fp, lsl #14
    2514:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (runstrand (__outserial, buf) == 0) {
    2518:	00054000 	andeq	r4, r5, r0
    251c:	0b3a0803 	bleq	e84530 <__ccfg+0xe64588>
		ufree (buf);
    2520:	0b390b3b 	bleq	e45214 <__ccfg+0xe2526c>
    2524:	00001349 	andeq	r1, r0, r9, asr #6
		memcpy (buf, m, prcs);
    2528:	03000541 	movweq	r0, #1345	; 0x541
    252c:	3b0b3a0e 	blcc	2d0d6c <__ccfg+0x2b0dc4>
    2530:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    2534:	42000013 	andmi	r0, r0, #19
    2538:	08030034 	stmdaeq	r3, {r2, r4, r5}
int ser_in (word st, char *buf, int len) {
    253c:	0b3b0b3a 	bleq	ec522c <__ccfg+0xea5284>
    2540:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (len == 0)
    2544:	2e430000 	cdpcs	0, 4, cr0, cr3, cr0, {0}
	if (__inpline == NULL) {
    2548:	3a0e0301 	bcc	383154 <__ccfg+0x3631ac>
		if ((prcs = running (__inserial)) == 0) {
    254c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2550:	200c270b 	andcs	r2, ip, fp, lsl #14
			prcs = runthread (__inserial);
    2554:	0013010b 	andseq	r0, r3, fp, lsl #2
    2558:	00054400 	andeq	r4, r5, r0, lsl #8
			if (prcs == 0) {
    255c:	0b3a0e03 	bleq	e85d70 <__ccfg+0xe65dc8>
				npwait (st);
    2560:	0b39053b 	bleq	e43a54 <__ccfg+0xe23aac>
		release;
    2564:	00001349 	andeq	r1, r0, r9, asr #6
		join (prcs, st);
    2568:	03002e45 	movweq	r2, #3653	; 0xe45
    256c:	3b0b3a0e 	blcc	2d0dac <__ccfg+0x2b0e04>
	if (*__inpline == NULL) // bin cmd
    2570:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2574:	000b200c 	andeq	r2, fp, ip
	if (prcs >= len)
    2578:	002e4600 	eoreq	r4, lr, r0, lsl #12
		prcs = len-1;
    257c:	0b3a0e03 	bleq	e85d90 <__ccfg+0xe65de8>
	memcpy (buf, __inpline, prcs);
    2580:	0b390b3b 	bleq	e45274 <__ccfg+0xe252cc>
    2584:	0b200c27 	bleq	805628 <__ccfg+0x7e5680>
    2588:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
	ufree (__inpline);
    258c:	11133101 	tstne	r3, r1, lsl #2
	__inpline = NULL;
    2590:	40011201 	andmi	r1, r1, r1, lsl #4
	if (*buf) // if it's NULL, it's a bin cmd
    2594:	0013010a 	andseq	r0, r3, sl, lsl #2
		buf [prcs] = '\0';
    2598:	00054800 	andeq	r4, r5, r0, lsl #16
}
    259c:	06021331 			; <UNDEFINED> instruction: 0x06021331
		prcs = strlen (__inpline);
    25a0:	1d490000 	stclne	0, cr0, [r9, #-0]
    25a4:	11133101 	tstne	r3, r1, lsl #2
		return 0;
    25a8:	58011201 	stmdapl	r1, {r0, r9, ip}
    25ac:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    25b0:	4a00000b 	bmi	25e4 <ser_outf+0x30>
int ser_outf (word st, const char *m, ...) {
    25b4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    25b8:	01120111 	tsteq	r2, r1, lsl r1
	if ((prcs = running (__outserial)) != 0) {
    25bc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    25c0:	00000b57 	andeq	r0, r0, r7, asr fp
		join (prcs, st);
    25c4:	31012e4b 	tstcc	r1, fp, asr #28
    25c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		release;
    25cc:	000a4001 	andeq	r4, sl, r1
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d0:	00344c00 	eorseq	r4, r4, r0, lsl #24
    25d4:	061c1331 			; <UNDEFINED> instruction: 0x061c1331
    25d8:	01000000 	mrseq	r0, (UNDEF: 0)
		umwait (st);
    25dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    25e0:	0e030b13 	vmoveq.32	d3[0], r0
	if (runstrand (__outserial, buf) == 0) {
    25e4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    25e8:	06100111 			; <UNDEFINED> instruction: 0x06100111
    25ec:	24020000 	strcs	r0, [r2], #-0
		ufree (buf);
    25f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		npwait (st);
    25f4:	000e030b 	andeq	r0, lr, fp, lsl #6
}
    25f8:	00160300 	andseq	r0, r6, r0, lsl #6
    25fc:	0b3a0e03 	bleq	e85e10 <__ccfg+0xe65e68>
    2600:	0b390b3b 	bleq	e452f4 <__ccfg+0xe2534c>
    2604:	00001349 	andeq	r1, r0, r9, asr #6
int ser_inf (word st, const char *fmt, ...) {
    2608:	0b002404 	bleq	b620 <__exidx_end+0x5d08>
    260c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	if (fmt == NULL)
    2610:	05000008 	streq	r0, [r0, #-8]
	if (__inpline == NULL) {
    2614:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		if ((prcs = running (__inserial)) == 0) {
    2618:	0b3a0b0b 	bleq	e8524c <__ccfg+0xe652a4>
    261c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
			prcs = runthread (__inserial);
    2620:	0d060000 	stceq	0, cr0, [r6, #-0]
    2624:	490e0300 	stmdbmi	lr, {r8, r9}
			if (prcs == 0) {
    2628:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
				npwait (st);
    262c:	0700000c 	streq	r0, [r0, -ip]
		release;
    2630:	0b0b000f 	bleq	2c2674 <__ccfg+0x2a26cc>
		join (prcs, st);
    2634:	26080000 	strcs	r0, [r8], -r0
    2638:	00134900 	andseq	r4, r3, r0, lsl #18
	va_start (ap, fmt);
    263c:	00350900 	eorseq	r0, r5, r0, lsl #18
	prcs = vscan (__inpline, fmt, ap);
    2640:	00001349 	andeq	r1, r0, r9, asr #6
    2644:	0b000f0a 	bleq	6274 <__exidx_end+0x95c>
	ufree (__inpline);
    2648:	0013490b 	andseq	r4, r3, fp, lsl #18
	__inpline = NULL;
    264c:	01130b00 	tsteq	r3, r0, lsl #22
}
    2650:	0b3a0b0b 	bleq	e85284 <__ccfg+0xe652dc>
    2654:	0b390b3b 	bleq	e45348 <__ccfg+0xe253a0>
    2658:	00001301 	andeq	r1, r0, r1, lsl #6
		return 0;
    265c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2660:	3b0b3a0e 	blcc	2d0ea0 <__ccfg+0x2b0ef8>
    2664:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2668:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    266c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2670:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
	RF_cmdFs.frequency = 
    2674:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2680:	00000b38 	andeq	r0, r0, r8, lsr fp
    2684:	0300340e 	movweq	r3, #1038	; 0x40e
static int option (int opt, address val) {
    2688:	3b0b3a0e 	blcc	2d0ec8 <__ccfg+0x2b0f20>
    268c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2690:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2694:	0f00000c 	svceq	0x0000000c
    2698:	13490101 	movtne	r0, #37121	; 0x9101
    269c:	00001301 	andeq	r1, r0, r1, lsl #6
    26a0:	00002110 	andeq	r2, r0, r0, lsl r1
    26a4:	00161100 	andseq	r1, r6, r0, lsl #2
    26a8:	0b3a0e03 	bleq	e85ebc <__ccfg+0xe65f14>
    26ac:	0b39053b 	bleq	e43ba0 <__ccfg+0xe23bf8>
    26b0:	00001349 	andeq	r1, r0, r9, asr #6
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    26b4:	27011512 	smladcs	r1, r2, r5, r1
    26b8:	0013010c 	andseq	r0, r3, ip, lsl #2
			goto RVal;
    26bc:	00051300 	andeq	r1, r5, r0, lsl #6
			_BIS (dstate, DSTATE_RXON);
    26c0:	00001349 	andeq	r1, r0, r9, asr #6
    26c4:	03003414 	movweq	r3, #1044	; 0x414
	int ret = 0;
    26c8:	3b0b3a0e 	blcc	2d0f08 <__ccfg+0x2b0f60>
			p_trigger (drvprcs, qevent);
    26cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    26d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    26d4:	1500000c 	strne	r0, [r0, #-12]
    26d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    26dc:	13011349 	movwne	r1, #4937	; 0x1349
    26e0:	13160000 	tstne	r6, #0
    26e4:	3a0b0b01 	bcc	2c52f0 <__ccfg+0x2a5348>
    26e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    26f0:	000d1700 	andeq	r1, sp, r0, lsl #14
}
    26f4:	0b3a0e03 	bleq	e85f08 <__ccfg+0xe65f60>
			_BIC (dstate, DSTATE_RXON);
    26f8:	0b39053b 	bleq	e43bec <__ccfg+0xe23c44>
    26fc:	0b381349 	bleq	e07428 <__ccfg+0xde7480>
			statid = (val == NULL) ? 0 : *val;
    2700:	13180000 	tstne	r8, #0
    2704:	0b0e0301 	bleq	383310 <__ccfg+0x363368>
	int ret = 0;
    2708:	3b0b3a0b 	blcc	2d0f3c <__ccfg+0x2b0f94>
			ret = (int) statid;
    270c:	010b3905 	tsteq	fp, r5, lsl #18
	if (val != NULL)
    2710:	19000013 	stmdbne	r0, {r0, r1, r4}
		*val = ret;
    2714:	13490021 	movtne	r0, #36897	; 0x9021
			ret = rbuffl + 2;
    2718:	00000b2f 	andeq	r0, r0, pc, lsr #22
    271c:	0300341a 	movweq	r3, #1050	; 0x41a
			if (val != NULL) {
    2720:	3b0b3a0e 	blcc	2d0f60 <__ccfg+0x2b0fb8>
				memcpy (val, &rxstat,
    2724:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2728:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
				memset (&rxstat, 0, 
    272c:	1b00000a 	blne	275c <option+0xd4>
    2730:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			if (val == NULL)
    2734:	0b3b0b3a 	bleq	ec5424 <__ccfg+0xea547c>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2738:	13490b39 	movtne	r0, #39737	; 0x9b39
    273c:	00000a02 	andeq	r0, r0, r2, lsl #20
				utimer_set (bckf_timer, *val);
    2740:	03012e1c 	movweq	r2, #7708	; 0x1e1c
    2744:	3b0b3a0e 	blcc	2d0f84 <__ccfg+0x2b0fdc>
    2748:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			for (ret = 0; ret < 8; ret++)
    274c:	1113490c 	tstne	r3, ip, lsl #18
				if (RF_cmdPropRadioDivSetup.txPower
    2750:	40011201 	andmi	r1, r1, r1, lsl #4
					== patable [ret])
    2754:	0013010a 	andseq	r0, r3, sl, lsl #2
				if (RF_cmdPropRadioDivSetup.txPower
    2758:	00051d00 	andeq	r1, r5, r0, lsl #26
			for (ret = 0; ret < 8; ret++)
    275c:	0b3a0803 	bleq	e84770 <__ccfg+0xe647c8>
    2760:	0b390b3b 	bleq	e45454 <__ccfg+0xe254ac>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2764:	06021349 	streq	r1, [r2], -r9, asr #6
    2768:	051e0000 	ldreq	r0, [lr, #-0]
    276c:	3a0e0300 	bcc	383374 <__ccfg+0x3633cc>
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			_BIS (dstate, DSTATE_IRST);
    2778:	1f00000a 	svcne	0x0000000a
    277c:	08030005 	stmdaeq	r3, {r0, r2}
    2780:	0b3b0b3a 	bleq	ec5470 <__ccfg+0xea54c8>
			ret = (int) channel;
    2784:	13490b39 	movtne	r0, #39737	; 0x9b39
			goto RVal;
    2788:	00000a02 	andeq	r0, r0, r2, lsl #20
				(*val > 7) ? 7 : *val;
    278c:	03012e20 	movweq	r2, #7712	; 0x1e20
    2790:	3b0b3a0e 	blcc	2d0fd0 <__ccfg+0x2b1028>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2794:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2798:	2013490c 	andscs	r4, r3, ip, lsl #18
			plugch ();
    279c:	0013010b 	andseq	r0, r3, fp, lsl #2
			_BIS (dstate, DSTATE_IRST);
    27a0:	00052100 	andeq	r2, r5, r0, lsl #2
    27a4:	0b3a0803 	bleq	e847b8 <__ccfg+0xe64810>
			ret = (int) vrate;
    27a8:	0b390b3b 	bleq	e4549c <__ccfg+0xe254f4>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27ac:	00001349 	andeq	r1, r0, r9, asr #6
    27b0:	03000522 	movweq	r0, #1314	; 0x522
    27b4:	3b0b3a0e 	blcc	2d0ff4 <__ccfg+0x2b104c>
    27b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    27bc:	23000013 	movwcs	r0, #19
    27c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    27c4:	0b3b0b3a 	bleq	ec54b4 <__ccfg+0xea550c>
    27c8:	13490b39 	movtne	r0, #39737	; 0x9b39
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27cc:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    27d0:	11133101 	tstne	r3, r1, lsl #2
    27d4:	40011201 	andmi	r1, r1, r1, lsl #4
    27d8:	2500000a 	strcs	r0, [r0, #-10]
			syserror (EREQPAR, "cc13 op");
    27dc:	13310005 	teqne	r1, #5
    27e0:	00000602 	andeq	r0, r0, r2, lsl #12
    27e4:	31003426 	tstcc	r0, r6, lsr #8
    27e8:	27000013 	smladcs	r0, r3, r0, r0
    27ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    27f0:	01120111 	tsteq	r2, r1, lsl r1
    27f4:	0b590b58 	bleq	164555c <__ccfg+0x16255b4>
    27f8:	00000b57 	andeq	r0, r0, r7, asr fp
    27fc:	31000528 	tstcc	r0, r8, lsr #10
    2800:	000a0213 	andeq	r0, sl, r3, lsl r2
    2804:	00052900 	andeq	r2, r5, r0, lsl #18
    2808:	00001331 	andeq	r1, r0, r1, lsr r3
    280c:	01110100 	tsteq	r1, r0, lsl #2
    2810:	0b130e25 	bleq	4c60ac <__ccfg+0x4a6104>
    2814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
static void issue_cmd (lword cmd) {
    2818:	01110655 	tsteq	r1, r5, asr r6
    281c:	00000610 	andeq	r0, r0, r0, lsl r6
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2820:	0b002402 	bleq	b830 <__exidx_end+0x5f18>
    2824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2828:	0300000e 	movweq	r0, #14
		if (res != 0x86)
    282c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			syserror (EHARDWARE, "hang ic0");
    2830:	0b3b0b3a 	bleq	ec5520 <__ccfg+0xea5578>
    2834:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (cnt-- == 0) {
    2838:	24040000 	strcs	r0, [r4], #-0
			diag ("HUP %lx %lx", cmd, res);
    283c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2840:	0008030b 	andeq	r0, r8, fp, lsl #6
			syserror (EHARDWARE, "hang ic0");
    2844:	00260500 	eoreq	r0, r6, r0, lsl #10
		udelay (1);
    2848:	00001349 	andeq	r1, r0, r9, asr #6
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    284c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
}
    2850:	07000013 	smladeq	r0, r3, r0, r0
    2854:	0b0b0113 	bleq	2c2ca8 <__ccfg+0x2a2d00>
    2858:	0b3b0b3a 	bleq	ec5548 <__ccfg+0xea55a0>
    285c:	13010b39 	movwne	r0, #6969	; 0x1b39
static void rx_de () {
    2860:	0d080000 	stceq	0, cr0, [r8, #-0]
	if ((dstate & DSTATE_RXAC) == 0)
    2864:	3a0e0300 	bcc	38346c <__ccfg+0x3634c4>
    2868:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    286c:	0b13490b 	bleq	4d4ca0 <__ccfg+0x4b4cf8>
	_BIC (dstate, DSTATE_RXAC);
    2870:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2874:	000b380b 	andeq	r3, fp, fp, lsl #16
}
    2878:	000d0900 	andeq	r0, sp, r0, lsl #18
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
static void rf_off () {
    2884:	0b381349 	bleq	e075b0 <__ccfg+0xde7608>
	if ((dstate & DSTATE_RFON) == 0)
    2888:	340a0000 	strcc	r0, [sl], #-0
    288c:	3a0e0300 	bcc	383494 <__ccfg+0x3634ec>
	IntDisable (INT_RFC_CPE_0);
    2890:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2894:	3f13490b 	svccc	0x0013490b
    2898:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	RFCAdi3VcoLdoVoltageMode (false);
    289c:	000f0b00 	andeq	r0, pc, r0, lsl #22
	RFCSynthPowerDown ();
    28a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    28a4:	010c0000 	mrseq	r0, (UNDEF: 12)
    28a8:	01134901 	tsteq	r3, r1, lsl #18
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    28ac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    28b0:	00000021 	andeq	r0, r0, r1, lsr #32
	OSCHF_SwitchToRcOscTurnOffXosc ();
    28b4:	0300160e 	movweq	r1, #1550	; 0x60e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    28b8:	3b0b3a0e 	blcc	2d10f8 <__ccfg+0x2b1150>
    28bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    28c0:	0f000013 	svceq	0x00000013
	_BIC (dstate, DSTATE_RFON);
    28c4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    28c8:	00001301 	andeq	r1, r0, r1, lsl #6
}
    28cc:	49000510 	stmdbmi	r0, {r4, r8, sl}
    28d0:	11000013 	tstne	r0, r3, lsl r0
    28d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28dc:	13490b39 	movtne	r0, #39737	; 0x9b39
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    28e0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    28e4:	13120000 	tstne	r2, #0
    28e8:	3a0b0b01 	bcc	2c54f4 <__ccfg+0x2a554c>
		if (cmd->status == tstat)
    28ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (timeout-- == 0) {
    28f0:	0013010b 	andseq	r0, r3, fp, lsl #2
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    28f4:	000d1300 	andeq	r1, sp, r0, lsl #6
    28f8:	0b3a0e03 	bleq	e8610c <__ccfg+0xe66164>
    28fc:	0b39053b 	bleq	e43df0 <__ccfg+0xe23e48>
			syserror (EHARDWARE, "rt2");
    2900:	0b381349 	bleq	e0762c <__ccfg+0xde7684>
    2904:	13140000 	tstne	r4, #0
		udelay (1);
    2908:	0b0e0301 	bleq	383514 <__ccfg+0x36356c>
		if (cmd->status == tstat)
    290c:	3b0b3a0b 	blcc	2d1140 <__ccfg+0x2b1198>
}
    2910:	010b3905 	tsteq	fp, r5, lsl #18
    2914:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2918:	13490021 	movtne	r0, #36897	; 0x9021
    291c:	00000b2f 	andeq	r0, r0, pc, lsr #22
static void rf_on () {
    2920:	3f012e16 	svccc	0x00012e16
    2924:	3a0e030c 	bcc	38355c <__ccfg+0x3635b4>
	OSCHF_TurnOnXosc();
    2928:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    292c:	110c270b 	tstne	ip, fp, lsl #14
    2930:	40011201 	andmi	r1, r1, r1, lsl #4
    2934:	0013010a 	andseq	r0, r3, sl, lsl #2
    2938:	00051700 	andeq	r1, r5, r0, lsl #14
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2944:	06021349 	streq	r1, [r2], -r9, asr #6
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2948:	34180000 	ldrcc	r0, [r8], #-0
	issue_cmd (
    294c:	3a0e0300 	bcc	383554 <__ccfg+0x3635ac>
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2954:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2958:	19000006 	stmdbne	r0, {r1, r2}
    295c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
   pPatchTab[80] = 0;
    2960:	0b3b0b3a 	bleq	ec5650 <__ccfg+0xea56a8>
   } while (--nIterations);
    2964:	00000b39 	andeq	r0, r0, r9, lsr fp
   pPatchTab[53] = 2;
    2968:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    296c:	1b000006 	blne	298c <rf_on.part.0+0x74>
   pPatchTab[55] = 3;
    2970:	08030034 	stmdaeq	r3, {r2, r4, r5}
   pPatchTab[110] = 4;
    2974:	0b3b0b3a 	bleq	ec5664 <__ccfg+0xea56bc>
   pPatchTab[107] = 5;
    2978:	13490b39 	movtne	r0, #39737	; 0x9b39
   pPatchTab[65] = 6;
    297c:	00000a02 	andeq	r0, r0, r2, lsl #20
    2980:	01110100 	tsteq	r1, r0, lsl #2
   pPatchTab[57] = 1;
    2984:	0b130e25 	bleq	4c6220 <__ccfg+0x4a6278>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2988:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
   const uint32_t *pS = patchGenfskRfe;
    298c:	01110655 	tsteq	r1, r5, asr r6
      t2 = *pS++;
    2990:	00000610 	andeq	r0, r0, r0, lsl r6
      t4 = *pS++;
    2994:	0b002402 	bleq	b9a4 <__exidx_end+0x608c>
      t6 = *pS++;
    2998:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      t8 = *pS++;
    299c:	0300000e 	movweq	r0, #14
      *pD++ = t1;
    29a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      *pD++ = t2;
    29a4:	0b3b0b3a 	bleq	ec5694 <__ccfg+0xea56ec>
      *pD++ = t3;
    29a8:	13490b39 	movtne	r0, #39737	; 0x9b39
      *pD++ = t5;
    29ac:	24040000 	strcs	r0, [r4], #-0
      *pD++ = t7;
    29b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
   } while (--nIterations);
    29b4:	0008030b 	andeq	r0, r8, fp, lsl #6
    29b8:	00260500 	eoreq	r0, r6, r0, lsl #10
      *pD++ = t8;
    29bc:	00001349 	andeq	r1, r0, r9, asr #6
   } while (--nIterations);
    29c0:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    29c4:	07000013 	smladeq	r0, r3, r0, r0
   *pD++ = t2;
    29c8:	0b0b000f 	bleq	2c2a0c <__ccfg+0x2a2a64>
   *pD++ = t3;
    29cc:	00001349 	andeq	r1, r0, r9, asr #6
   *pD++ = t4;
    29d0:	0b011308 	bleq	475f8 <__ccfg+0x27650>
   *pD++ = t5;
    29d4:	3b0b3a0b 	blcc	2d1208 <__ccfg+0x2b1260>
    29d8:	010b390b 	tsteq	fp, fp, lsl #18
	RFCAdi3VcoLdoVoltageMode (true);
    29dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    29e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
       	RFCRfTrimSet (&rfTrim);
    29e4:	0b3b0b3a 	bleq	ec56d4 <__ccfg+0xea572c>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    29e8:	13490b39 	movtne	r0, #39737	; 0x9b39
    29ec:	0b0d0b0b 	bleq	345620 <__ccfg+0x325678>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    29f0:	0b380b0c 	bleq	e05628 <__ccfg+0xde5680>
    29f4:	0d0a0000 	stceq	0, cr0, [sl, #-0]
	issue_cmd ((lword)&cmd_srt);
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	issue_cmd ((lword)&RF_cmdFs);
    2a00:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2a04:	0b00000b 	bleq	2a38 <rf_on.part.0+0x120>
    2a08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a0c:	0b3b0b3a 	bleq	ec56fc <__ccfg+0xea5754>
	IntEnable (INT_RFC_CPE_0);
    2a10:	13490b39 	movtne	r0, #39737	; 0x9b39
	_BIC (dstate, DSTATE_IRST);
    2a14:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2a18:	010c0000 	mrseq	r0, (UNDEF: 12)
    2a1c:	01134901 	tsteq	r3, r1, lsl #18
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2a20:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a24:	00000021 	andeq	r0, r0, r1, lsr #32
	IntEnable (INT_RFC_CPE_0);
    2a28:	0300160e 	movweq	r1, #1550	; 0x60e
    2a2c:	3b0b3a0e 	blcc	2d126c <__ccfg+0x2b12c4>
}
    2a30:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	IntEnable (INT_RFC_CPE_0);
    2a34:	0f000013 	svceq	0x00000013
    2a38:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2a3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2a40:	49000510 	stmdbmi	r0, {r4, r8, sl}
    2a44:	11000013 	tstne	r0, r3, lsl r0
    2a48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a50:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a54:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2a58:	13120000 	tstne	r2, #0
    2a5c:	3a0b0b01 	bcc	2c5668 <__ccfg+0x2a56c0>
    2a60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a64:	0013010b 	andseq	r0, r3, fp, lsl #2
    2a68:	000d1300 	andeq	r1, sp, r0, lsl #6
    2a6c:	0b3a0e03 	bleq	e86280 <__ccfg+0xe662d8>
    2a70:	0b39053b 	bleq	e43f64 <__ccfg+0xe23fbc>
    2a74:	0b381349 	bleq	e077a0 <__ccfg+0xde77f8>
    2a78:	13140000 	tstne	r4, #0
    2a7c:	0b0e0301 	bleq	383688 <__ccfg+0x3636e0>
    2a80:	3b0b3a0b 	blcc	2d12b4 <__ccfg+0x2b130c>
    2a84:	010b3905 	tsteq	fp, r5, lsl #18
    2a88:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2a8c:	13490021 	movtne	r0, #36897	; 0x9021
    2a90:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2a94:	03003416 	movweq	r3, #1046	; 0x416
static void rx_int_enable () {
    2a98:	3b0b3a0e 	blcc	2d12d8 <__ccfg+0x2b1330>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2a9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2aa0:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
    2aa4:	1700000a 	strne	r0, [r0, -sl]
    2aa8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 29f8 <rf_on.part.0+0xe0>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2aac:	0b3a0e03 	bleq	e862c0 <__ccfg+0xe66318>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2ab0:	0b390b3b 	bleq	e457a4 <__ccfg+0xe257fc>
    2ab4:	01110c27 	tsteq	r1, r7, lsr #24
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2ab8:	0a400112 	beq	1002f08 <__ccfg+0xfe2f60>
    2abc:	05180000 	ldreq	r0, [r8, #-0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ac0:	3a0e0300 	bcc	3836c8 <__ccfg+0x363720>
    2ac4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2acc:	19000006 	stmdbne	r0, {r1, r2}
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2ad0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ad4:	0b3b0b3a 	bleq	ec57c4 <__ccfg+0xea581c>
		if (db->status == DATA_ENTRY_FINISHED) {
    2ad8:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2adc:	00000602 	andeq	r0, r0, r2, lsl #12
    2ae0:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
			nr++;
    2ae4:	1b000006 	blne	2b04 <rx_int_enable+0x6c>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ae8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2aec:	0b3b0b3a 	bleq	ec57dc <__ccfg+0xea5834>
    2af0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2af4:	00000a02 	andeq	r0, r0, r2, lsl #20
				__dp [pl + 1] = __dp [pl] - 128;
    2af8:	01110100 	tsteq	r1, r0, lsl #2
				pl = __dp [1] + 2;
    2afc:	0b130e25 	bleq	4c6398 <__ccfg+0x4a63f0>
				__dp [pl + 1] = __dp [pl] - 128;
    2b00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2b04:	01110655 	tsteq	r1, r5, asr r6
				__dp [pl] = 0;
    2b08:	00000610 	andeq	r0, r0, r0, lsl r6
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b0c:	0b002402 	bleq	bb1c <__exidx_end+0x6204>
    2b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2b14:	0300000e 	movweq	r0, #14
			db->status = DATA_ENTRY_PENDING;
    2b18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b1c:	0b3b0b3a 	bleq	ec580c <__ccfg+0xea5864>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2b20:	13490b39 	movtne	r0, #39737	; 0x9b39
				diag ("BAD RX");
    2b24:	24040000 	strcs	r0, [r4], #-0
    2b28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (nr) {
    2b2c:	0008030b 	andeq	r0, r8, fp, lsl #6
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b30:	01130500 	tsteq	r3, r0, lsl #10
}
    2b34:	0b0b0e03 	bleq	2c6348 <__ccfg+0x2a63a0>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b38:	0b3b0b3a 	bleq	ec5828 <__ccfg+0xea5880>
    2b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    2b40:	03000d06 	movweq	r0, #3334	; 0xd06
}
    2b44:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2b48:	000c340b 	andeq	r3, ip, fp, lsl #8
    2b4c:	000f0700 	andeq	r0, pc, r0, lsl #14
    2b50:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2b54:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    2b58:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2b5c:	13490035 	movtne	r0, #36917	; 0x9035
    2b60:	0f0a0000 	svceq	0x000a0000
    2b64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
thread (cc1350_driver)
    2b68:	0b000013 	bleq	2bbc <cc1350_driver+0x54>
    2b6c:	0b0b0113 	bleq	2c2fc0 <__ccfg+0x2a3018>
    2b70:	0b3b0b3a 	bleq	ec5860 <__ccfg+0xea58b8>
    2b74:	13010b39 	movwne	r0, #6969	; 0x1b39
    2b78:	0d0c0000 	stceq	0, cr0, [ip, #-0]
		if (dstate & DSTATE_IRST) {
    2b7c:	3a0e0300 	bcc	383784 <__ccfg+0x3637dc>
    2b80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b84:	0b13490b 	bleq	4d4fb8 <__ccfg+0x4b5010>
			rf_off ();
    2b88:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
			_BIC (dstate,
    2b8c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2b90:	000d0d00 	andeq	r0, sp, r0, lsl #26
		if (dstate & DSTATE_RXAC) {
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
			if ((dstate & DSTATE_RXON) == 0)
    2b9c:	0b381349 	bleq	e078c8 <__ccfg+0xde7920>
				rx_de ();
    2ba0:	340e0000 	strcc	r0, [lr], #-0
		if (paylen == 0) {
    2ba4:	3a0e0300 	bcc	3837ac <__ccfg+0x363804>
    2ba8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2bac:	3f13490b 	svccc	0x0013490b
    2bb0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2bb4:	01010f00 	tsteq	r1, r0, lsl #30
    2bb8:	13011349 	movwne	r1, #4937	; 0x1349
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bbc:	21100000 	tstcs	r0, r0
    2bc0:	11000000 	mrsne	r0, (UNDEF: 0)
    2bc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2bc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2bd0:	15120000 	ldrne	r0, [r2, #-0]
    2bd4:	010c2701 	tsteq	ip, r1, lsl #14
    2bd8:	13000013 	movwne	r0, #19
		} else if (dstate & DSTATE_RXON) {
    2bdc:	13490005 	movtne	r0, #36869	; 0x9005
	if (dstate & DSTATE_RFON)
    2be0:	34140000 	ldrcc	r0, [r4], #-0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2be4:	3a0e0300 	bcc	3837ec <__ccfg+0x363844>
		re->status = DATA_ENTRY_PENDING;
    2be8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2bec:	3f13490b 	svccc	0x0013490b
	issue_cmd ((lword)&RF_cmdPropRx);
    2bf0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	_BIS (dstate, DSTATE_RXAC);
    2bf4:	01131500 	tsteq	r3, r0, lsl #10
    2bf8:	0b3a0b0b 	bleq	e8582c <__ccfg+0xe65884>
    2bfc:	0b39053b 	bleq	e440f0 <__ccfg+0xe24148>
    2c00:	00001301 	andeq	r1, r0, r1, lsl #6
	if (dstate & DSTATE_RXAC)
    2c04:	03000d16 	movweq	r0, #3350	; 0xd16
    2c08:	3b0b3a0e 	blcc	2d1448 <__ccfg+0x2b14a0>
				if (statid != 0xffff)
    2c0c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2c10:	000b3813 	andeq	r3, fp, r3, lsl r8
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2c14:	01131700 	tsteq	r3, r0, lsl #14
				RF_cmdPropTx.pktLen = (byte) paylen;
    2c18:	0b0b0e03 	bleq	2c642c <__ccfg+0x2a6484>
		if (paylen == 0) {
    2c1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			wait (qevent, DR_LOOP);
    2c20:	13010b39 	movwne	r0, #6969	; 0x1b39
    2c24:	21180000 	tstcs	r8, r0
			if (dstate & DSTATE_RXAC) {
    2c28:	2f134900 	svccs	0x00134900
    2c2c:	1900000b 	stmdbne	r0, {r0, r1, r3}
				rx_int_enable ();
    2c30:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2b80 <cc1350_driver+0x18>
			release;
    2c34:	0b3a0e03 	bleq	e86448 <__ccfg+0xe664a0>
			} else if (dstate & DSTATE_RFON) {
    2c38:	0b390b3b 	bleq	e4592c <__ccfg+0xe25984>
				delay (offdelay, DR_GOOF);
    2c3c:	13490c27 	movtne	r0, #39975	; 0x9c27
    2c40:	01120111 	tsteq	r2, r1, lsl r1
    2c44:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (bckf_timer) {
    2c48:	051a0000 	ldreq	r0, [sl, #-0]
			wait (qevent, DR_LOOP);
    2c4c:	3a080300 	bcc	203854 <__ccfg+0x1e38ac>
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			delay (bckf_timer, DR_LOOP);
    2c58:	1b000006 	blne	2c78 <cc1350_driver+0x110>
    2c5c:	08030034 	stmdaeq	r3, {r2, r4, r5}
			if (dstate & DSTATE_RXAC)
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
    2c64:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (dstate & DSTATE_RFON)
    2c68:	00000602 	andeq	r0, r0, r2, lsl #12
    2c6c:	03000a1c 	movweq	r0, #2588	; 0xa1c
		rx_de ();
    2c70:	3b0b3a0e 	blcc	2d14b0 <__ccfg+0x2b1508>
		RF_cmdPropTx . status = 0;
    2c74:	110b390b 	tstne	fp, fp, lsl #18
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c78:	1d000001 	stcne	0, cr0, [r0, #-4]
    2c7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2bcc <cc1350_driver+0x64>
    2c80:	0b3a0e03 	bleq	e86494 <__ccfg+0xe664ec>
		issue_cmd ((lword)&cmd_cs);
    2c84:	0b390b3b 	bleq	e45978 <__ccfg+0xe259d0>
		if (dstate & DSTATE_IRST)
    2c88:	13490c27 	movtne	r0, #39975	; 0x9c27
    2c8c:	01120111 	tsteq	r2, r1, lsl r1
    2c90:	00000a40 	andeq	r0, r0, r0, asr #20
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2c94:	0300341e 	movweq	r3, #1054	; 0x41e
    2c98:	3b0b3a08 	blcc	2d14c0 <__ccfg+0x2b1518>
			delay (1, DR_XMIT);
    2c9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2ca0:	000a0213 	andeq	r0, sl, r3, lsl r2
    2ca4:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
    2ca8:	0b3a0e03 	bleq	e864bc <__ccfg+0xe66514>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2cac:	0b390b3b 	bleq	e459a0 <__ccfg+0xe259f8>
    2cb0:	01110c27 	tsteq	r1, r7, lsr #24
				RF_cmdPropTx . status = 0;
    2cb4:	0a400112 	beq	1003104 <__ccfg+0xfe315c>
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2cb8:	13010a48 	movwne	r0, #6728	; 0x1a48
				issue_cmd ((lword)&RF_cmdPropTx);
    2cbc:	05200000 	streq	r0, [r0, #-0]!
				proceed (DR_XMIT);
    2cc0:	3a080300 	bcc	2038c8 <__ccfg+0x1e3920>
    2cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			txtries++;
    2cc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2ccc:	2100000a 	tstcs	r0, sl
    2cd0:	0803000a 	stmdaeq	r3, {r1, r3}
    2cd4:	0b3b0b3a 	bleq	ec59c4 <__ccfg+0xea5a1c>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cd8:	01110b39 	tsteq	r1, r9, lsr fp
		goto DR_LOOP__;
    2cdc:	0b220000 	bleq	882ce4 <__ccfg+0x862d3c>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ce0:	01065501 	tsteq	r6, r1, lsl #10
		paylen = 0;
    2ce4:	23000013 	movwcs	r0, #19
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ce8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		txtries = 0;
    2cec:	0b3b0b3a 	bleq	ec59dc <__ccfg+0xea5a34>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2cf0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2cf4:	0b240000 	bleq	902cfc <__ccfg+0x8e2d54>
    2cf8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2cfc:	00130101 	andseq	r0, r3, r1, lsl #2
    2d00:	010b2500 	tsteq	fp, r0, lsl #10
		    tcvphy_top (physid) == NULL)
    2d04:	01120111 	tsteq	r2, r1, lsl r1
    2d08:	01000000 	mrseq	r0, (UNDEF: 0)
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d0c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2d10:	0e030b13 	vmoveq.32	d3[0], r0
			rf_off ();
    2d14:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
endthread
    2d18:	06100111 			; <UNDEFINED> instruction: 0x06100111
    2d1c:	24020000 	strcs	r0, [r2], #-0
    2d20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2d24:	000e030b 	andeq	r0, lr, fp, lsl #6
    2d28:	00160300 	andseq	r0, r6, r0, lsl #6
    2d2c:	0b3a0e03 	bleq	e86540 <__ccfg+0xe66598>
    2d30:	0b390b3b 	bleq	e45a24 <__ccfg+0xe25a7c>
    2d34:	00001349 	andeq	r1, r0, r9, asr #6
    2d38:	0b002404 	bleq	bd50 <__exidx_end+0x6438>
    2d3c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2d40:	05000008 	streq	r0, [r0, #-8]
    2d44:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2d48:	0b3a0b0b 	bleq	e8597c <__ccfg+0xe659d4>
    2d4c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2d50:	0d060000 	stceq	0, cr0, [r6, #-0]
    2d54:	490e0300 	stmdbmi	lr, {r8, r9}
void RFCCPE0IntHandler (void) {
    2d58:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d5c:	0700000c 	streq	r0, [r0, -ip]
		_BIS (dstate, DSTATE_IRST);
    2d60:	0b0b000f 	bleq	2c2da4 <__ccfg+0x2a2dfc>
    2d64:	26080000 	strcs	r0, [r8], -r0
    2d68:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2d6c:	00350900 	eorseq	r0, r5, r0, lsl #18
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2d70:	00001349 	andeq	r1, r0, r9, asr #6
    2d74:	0b000f0a 	bleq	69a4 <__exidx_end+0x108c>
	p_trigger (drvprcs, qevent);
    2d78:	0013490b 	andseq	r4, r3, fp, lsl #18
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2d7c:	01130b00 	tsteq	r3, r0, lsl #22
    2d80:	0b3a0b0b 	bleq	e859b4 <__ccfg+0xe65a0c>
    2d84:	0b390b3b 	bleq	e45a78 <__ccfg+0xe25ad0>
    2d88:	00001301 	andeq	r1, r0, r1, lsl #6
    2d8c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2d90:	3b0b3a0e 	blcc	2d15d0 <__ccfg+0x2b1628>
    2d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d98:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2d9c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2da0:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
	RISE_N_SHINE;
    2da4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2db0:	00000b38 	andeq	r0, r0, r8, lsr fp
    2db4:	0300340e 	movweq	r3, #1038	; 0x40e
    2db8:	3b0b3a0e 	blcc	2d15f8 <__ccfg+0x2b1650>
    2dbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2dc0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2dc4:	0f00000c 	svceq	0x0000000c
void phys_cc1350 (int phy, int mbs) {
    2dc8:	13490101 	movtne	r0, #37121	; 0x9101
	if (rbuffl != 0)
    2dcc:	00001301 	andeq	r1, r0, r1, lsl #6
    2dd0:	00002110 	andeq	r2, r0, r0, lsl r1
		syserror (ETOOMANY, "cc13");
    2dd4:	00161100 	andseq	r1, r6, r0, lsl #2
		syserror (EREQPAR, "cc13 mb");
    2dd8:	0b3a0e03 	bleq	e865ec <__ccfg+0xe66644>
	if (mbs == 0)
    2ddc:	0b39053b 	bleq	e442d0 <__ccfg+0xe24328>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2de0:	00001349 	andeq	r1, r0, r9, asr #6
		syserror (EREQPAR, "cc13 mb");
    2de4:	27011512 	smladcs	r1, r2, r5, r1
    2de8:	0013010c 	andseq	r0, r3, ip, lsl #2
	i = 0;
    2dec:	00051300 	andeq	r1, r5, r0, lsl #6
	rbuffl = (byte) mbs;
    2df0:	00001349 	andeq	r1, r0, r9, asr #6
		db->config.type = 0;	// General (data in structure)
    2df4:	03003414 	movweq	r3, #1044	; 0x414
	rbuffl = (byte) mbs;
    2df8:	3b0b3a0e 	blcc	2d1638 <__ccfg+0x2b1690>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2dfc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2e00:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		if (db == NULL)
    2e04:	1500000c 	strne	r0, [r0, #-12]
			syserror (EMALLOC, "cc13");
    2e08:	0b0b0113 	bleq	2c325c <__ccfg+0x2a32b4>
    2e0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e10:	13010b39 	movwne	r0, #6969	; 0x1b39
		db->status = DATA_ENTRY_PENDING;
    2e14:	0d160000 	ldceq	0, cr0, [r6, #-0]
		if (i)
    2e18:	3a0e0300 	bcc	383a20 <__ccfg+0x363a78>
			da->pNextEntry = (byte*) db;
    2e1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		db->length = rbuffl + 2;
    2e20:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2e24:	1700000b 	strne	r0, [r0, -fp]
		db->config.type = 0;	// General (data in structure)
    2e28:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		db->length = rbuffl + 2;
    2e2c:	0b3a0b0b 	bleq	e85a60 <__ccfg+0xe65ab8>
	db->pNextEntry = (byte*) re;
    2e30:	0b39053b 	bleq	e44324 <__ccfg+0xe2437c>
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2e34:	00001301 	andeq	r1, r0, r1, lsl #6
    2e38:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
	if (rbuffs == NULL)
    2e3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
	rbuffs->pCurrEntry = (byte*) re;
    2e40:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
	rbuffs->pLastEntry = NULL;
    2e44:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2e48:	0b3b0b3a 	bleq	ec5b38 <__ccfg+0xea5b90>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e4c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2e50:	01111349 	tsteq	r1, r9, asr #6
    2e54:	0a400112 	beq	10032a4 <__ccfg+0xfe32fc>
    2e58:	00001301 	andeq	r1, r0, r1, lsl #6
	rbuffl -= 2;
    2e5c:	0300051a 	movweq	r0, #1306	; 0x51a
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e60:	3b0b3a08 	blcc	2d1688 <__ccfg+0x2b16e0>
	rbuffl -= 2;
    2e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	physid = phy;
    2e68:	00060213 	andeq	r0, r6, r3, lsl r2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e6c:	00341b00 	eorseq	r1, r4, r0, lsl #22
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e70:	0b3a0803 	bleq	e84e84 <__ccfg+0xe64edc>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e74:	0b390b3b 	bleq	e45b68 <__ccfg+0xe25bc0>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e78:	06021349 	streq	r1, [r2], -r9, asr #6
    2e7c:	0a1c0000 	beq	702e84 <__ccfg+0x6e2edc>
	utimer_add (&bckf_timer);
    2e80:	3a0e0300 	bcc	383a88 <__ccfg+0x363ae0>
	drvprcs = runthread (cc1350_driver);
    2e84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e88:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2e8c:	0111010b 	tsteq	r1, fp, lsl #2
	if (drvprcs == 0)
    2e90:	13010112 	movwne	r0, #4370	; 0x1112
		syserror (ERESOURCE, "cc13");
    2e94:	341e0000 	ldrcc	r0, [lr], #-0
    2e98:	3a080300 	bcc	203aa0 <__ccfg+0x1e3af8>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2e9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ea0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ea4:	1f00000a 	svcne	0x0000000a
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2ea8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2eac:	00001301 	andeq	r1, r0, r1, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2eb0:	03003420 	movweq	r3, #1056	; 0x420
    2eb4:	3b0b3a08 	blcc	2d16dc <__ccfg+0x2b1734>
    2eb8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2ebc:	21000013 	tstcs	r0, r3, lsl r0
    2ec0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ec8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ecc:	0e030b13 	vmoveq.32	d3[0], r0
    2ed0:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
	plugch ();
    2ed4:	24020000 	strcs	r0, [r2], #-0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2ed8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2edc:	000e030b 	andeq	r0, lr, fp, lsl #6
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2ee0:	00160300 	andseq	r0, r6, r0, lsl #6
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2ee4:	0b3a0e03 	bleq	e866f8 <__ccfg+0xe66750>
    2ee8:	0b390b3b 	bleq	e45bdc <__ccfg+0xe25c34>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2eec:	00001349 	andeq	r1, r0, r9, asr #6
}
    2ef0:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
    2ef4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    2ef8:	0b0b0024 	bleq	2c2f90 <__ccfg+0x2a2fe8>
    2efc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2f00:	16060000 	strne	r0, [r6], -r0
    2f04:	3a0e0300 	bcc	383b0c <__ccfg+0x363b64>
    2f08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f0c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f10:	01170700 	tsteq	r7, r0, lsl #14
    2f14:	0b3a0b0b 	bleq	e85b48 <__ccfg+0xe65ba0>
    2f18:	0b390b3b 	bleq	e45c0c <__ccfg+0xe25c64>
    2f1c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f20:	03000d08 	movweq	r0, #3336	; 0xd08
    2f24:	3b0b3a0e 	blcc	2d1764 <__ccfg+0x2b17bc>
    2f28:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f2c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2f30:	13490101 	movtne	r0, #37121	; 0x9101
    2f34:	00001301 	andeq	r1, r0, r1, lsl #6
    2f38:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    2f3c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2f40:	01130b00 	tsteq	r3, r0, lsl #22
    2f44:	0b3a0b0b 	bleq	e85b78 <__ccfg+0xe65bd0>
    2f48:	0b390b3b 	bleq	e45c3c <__ccfg+0xe25c94>
    2f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    2f50:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2f54:	3b0b3a0e 	blcc	2d1794 <__ccfg+0x2b17ec>
    2f58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f5c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2f60:	000f0d00 	andeq	r0, pc, r0, lsl #26
    2f64:	00000b0b 	andeq	r0, r0, fp, lsl #22
    2f68:	0301130e 	movweq	r1, #4878	; 0x130e
    2f6c:	3a0b0b0e 	bcc	2c5bac <__ccfg+0x2a5c04>
    2f70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f74:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f78:	000d0f00 	andeq	r0, sp, r0, lsl #30
    2f7c:	0b3a0803 	bleq	e84f90 <__ccfg+0xe64fe8>
    2f80:	0b390b3b 	bleq	e45c74 <__ccfg+0xe25ccc>
    2f84:	0b381349 	bleq	e07cb0 <__ccfg+0xde7d08>
    2f88:	0f100000 	svceq	0x00100000
    2f8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2f90:	11000013 	tstne	r0, r3, lsl r0
    2f94:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2f98:	0b3a050b 	bleq	e843cc <__ccfg+0xe64424>
    2f9c:	0b390b3b 	bleq	e45c90 <__ccfg+0xe25ce8>
    2fa0:	00001301 	andeq	r1, r0, r1, lsl #6
    2fa4:	03000d12 	movweq	r0, #3346	; 0xd12
    2fa8:	3b0b3a0e 	blcc	2d17e8 <__ccfg+0x2b1840>
    2fac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2fb0:	00053813 	andeq	r3, r5, r3, lsl r8
    2fb4:	00151300 	andseq	r1, r5, r0, lsl #6
    2fb8:	00000c27 	andeq	r0, r0, r7, lsr #24
    2fbc:	27011514 	smladcs	r1, r4, r5, r1
    2fc0:	0113490c 	tsteq	r3, ip, lsl #18
    2fc4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2fc8:	13490005 	movtne	r0, #36869	; 0x9005
    2fcc:	13160000 	tstne	r6, #0
    2fd0:	0b0e0301 	bleq	383bdc <__ccfg+0x363c34>
    2fd4:	3b0b3a05 	blcc	2d17f0 <__ccfg+0x2b1848>
    2fd8:	010b3905 	tsteq	fp, r5, lsl #18
strand (__outserial, const char*)
    2fdc:	17000013 	smladne	r0, r3, r0, r0
    2fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
endstrand
    2fec:	00000b38 	andeq	r0, r0, r8, lsr fp
    2ff0:	03000d18 	movweq	r0, #3352	; 0xd18
	ptr = data;
    2ff4:	3b0b3a0e 	blcc	2d1834 <__ccfg+0x2b188c>
    2ff8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (*ptr)
    2ffc:	00053813 	andeq	r3, r5, r3, lsl r8
		len = strlen (ptr);
    3000:	01131900 	tsteq	r3, r0, lsl #18
    3004:	0b0b0e03 	bleq	2c6818 <__ccfg+0x2a6870>
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3008:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    300c:	13010b39 	movwne	r0, #6969	; 0x1b39
    3010:	131a0000 	tstne	sl, #0
    3014:	3a0b0b01 	bcc	2c5c20 <__ccfg+0x2a5c78>
    3018:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	len -= quant;
    301c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3020:	01171b00 	tsteq	r7, r0, lsl #22
    3024:	0b3a0b0b 	bleq	e85c58 <__ccfg+0xe65cb0>
	if (len == 0) {
    3028:	0b39053b 	bleq	e4451c <__ccfg+0xe24574>
		ufree (data);
    302c:	00001301 	andeq	r1, r0, r1, lsl #6
		finish;
    3030:	03000d1c 	movweq	r0, #3356	; 0xd1c
    3034:	3b0b3a0e 	blcc	2d1874 <__ccfg+0x2b18cc>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3038:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    303c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    3040:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    3044:	00000c3c 	andeq	r0, r0, ip, lsr ip
    3048:	2701151e 	smladcs	r1, lr, r5, r1
strand (__inserial, address)
    304c:	0013010c 	andseq	r0, r3, ip, lsl #2
    3050:	00341f00 	eorseq	r1, r4, r0, lsl #30
    3054:	0b3a0e03 	bleq	e86868 <__ccfg+0xe668c0>
    3058:	0b39053b 	bleq	e4454c <__ccfg+0xe245a4>
    305c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2f40 <tcv_clo_null+0x4>
	if (__inpline != NULL)
    3060:	00000c3c 	andeq	r0, r0, ip, lsr ip
    3064:	03000d20 	movweq	r0, #3360	; 0xd20
		finish;
    3068:	3b0b3a0e 	blcc	2d18a8 <__ccfg+0x2b1900>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    306c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    3070:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    3074:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3078:	2100000b 	tstcs	r0, fp
		umwait (IM_INIT);
    307c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		release;
    3080:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	savedata (data);
    3084:	13490b39 	movtne	r0, #39737	; 0x9b39
	len = MAX_LINE_LENGTH;
    3088:	0b0d0b0b 	bleq	345cbc <__ccfg+0x325d14>
	io (IM_READ, __cport, READ, ptr, 1);
    308c:	0b380b0c 	bleq	e05cc4 <__ccfg+0xde5d1c>
    3090:	34220000 	strtcc	r0, [r2], #-0
    3094:	3a0e0300 	bcc	383c9c <__ccfg+0x363cf4>
    3098:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (ptr == (char*) data) { // new line
    309c:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    30a0:	23000003 	movwcs	r0, #3
		if (*ptr == '\0') { // bin cmd
    30a4:	13490021 	movtne	r0, #36897	; 0x9021
			proceed (IM_BIN);
    30a8:	0000052f 	andeq	r0, r0, pc, lsr #10
    30ac:	49003524 	stmdbmi	r0, {r2, r5, r8, sl, ip, sp}
		if (*ptr < 0x20)
    30b0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    30b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			proceed (IM_READ);
    30b8:	0b3b0b3a 	bleq	ec5da8 <__ccfg+0xea5e00>
    30bc:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (*ptr == '\n' || *ptr == '\r') {
    30c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    30c4:	21260000 			; <UNDEFINED> instruction: 0x21260000
    30c8:	27000000 	strcs	r0, [r0, -r0]
		*ptr = '\0';
    30cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		__inpline = (char*)data;
    30d0:	0b3b0b3a 	bleq	ec5dc0 <__ccfg+0xea5e18>
		finish;
    30d4:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (len) {
    30d8:	00000a02 	andeq	r0, r0, r2, lsl #20
		ptr++;
    30dc:	47003428 	strmi	r3, [r0, -r8, lsr #8]
    30e0:	3b0b3a13 	blcc	2d1934 <__ccfg+0x2b198c>
		len--;
    30e4:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
	proceed (IM_READ);
    30e8:	0000000a 	andeq	r0, r0, sl
	io (IM_BIN, __cport, READ, ptr, 1);
    30ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    30f0:	030b130e 	movweq	r1, #45838	; 0xb30e
    30f4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    30f8:	10011117 	andne	r1, r1, r7, lsl r1
    30fc:	02000017 	andeq	r0, r0, #23
	len -= 2;
    3100:	0b0b0024 	bleq	2c3198 <__ccfg+0x2a31f0>
	if (len > *ptr + 1) // 1 for 0x04
    3104:	0e030b3e 	vmoveq.16	d3[0], r0
    3108:	16030000 	strne	r0, [r3], -r0
		len = *ptr + 1;
    310c:	3a0e0300 	bcc	383d14 <__ccfg+0x363d6c>
    3110:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	ptr++;
    3114:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3118:	0b0b0024 	bleq	2c31b0 <__ccfg+0x2a3208>
    311c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3120:	0f050000 	svceq	0x00050000
    3124:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3128:	06000013 			; <UNDEFINED> instruction: 0x06000013
    312c:	19270015 	stmdbne	r7!, {r0, r2, r4}
	len -= quant;
    3130:	15070000 	strne	r0, [r7, #-0]
		__inpline = (char*)data;
    3134:	01192701 	tsteq	r9, r1, lsl #14
		finish;
    3138:	08000013 	stmdaeq	r0, {r0, r1, r4}
	ptr += quant;
    313c:	13490005 	movtne	r0, #36869	; 0x9005
    3140:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
endstrand
    3144:	03193f01 	tsteq	r9, #1, 30
    3148:	3b0b3a0e 	blcc	2d1988 <__ccfg+0x2b19e0>
	proceed (IM_BINL);
    314c:	1119270b 	tstne	r9, fp, lsl #14
endstrand
    3150:	40061201 	andmi	r1, r6, r1, lsl #4
    3154:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    3158:	00001301 	andeq	r1, r0, r1, lsl #6
    315c:	0300050a 	movweq	r0, #1290	; 0x50a
    3160:	3b0b3a0e 	blcc	2d19a0 <__ccfg+0x2b19f8>
    3164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (res && (d < n))
    3168:	0b000017 	bleq	31cc <__pi_vfparse+0x44>
    316c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3170:	0b3b0b3a 	bleq	ec5e60 <__ccfg+0xea5eb8>
    3174:	17021349 	strne	r1, [r2, -r9, asr #6]
			res [d] = (char) c;
    3178:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
		d++;
    317c:	11000182 	smlabbne	r0, r2, r1, r0
    3180:	00133101 	andseq	r3, r3, r1, lsl #2
    3184:	82890d00 	addhi	r0, r9, #0, 26
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3188:	01110001 	tsteq	r1, r1
    318c:	31194295 			; <UNDEFINED> instruction: 0x31194295
    3190:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
				enci (10000);
    3194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3198:	0b3a0e03 	bleq	e869ac <__ccfg+0xe66a04>
    319c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
	d = 0;
    31a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
		c = *fm++;
    31a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
		if (c == '\\') {
    31a8:	00130119 	andseq	r0, r3, r9, lsl r1
			if ((c = *fm++) == '\0') {
    31ac:	82890f00 	addhi	r0, r9, #0, 30
    31b0:	01110101 	tsteq	r1, r1, lsl #2
				outc ('\\');
    31b4:	00001301 	andeq	r1, r0, r1, lsl #6
			if ((c = *fm++) == '\0') {
    31b8:	01828a10 	orreq	r8, r2, r0, lsl sl
				outc ('\\');
    31bc:	91180200 	tstls	r8, r0, lsl #4
    31c0:	00001842 	andeq	r1, r0, r2, asr #16
			outc (c);
    31c4:	3f002e11 	svccc	0x00002e11
    31c8:	3a0e0319 	bcc	383e34 <__ccfg+0x363e8c>
			if (c == '\0')
    31cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    31d0:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
			outc (c);
    31d4:	00000019 	andeq	r0, r0, r9, lsl r0
				outc (val);
    31d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				val = (word) va_arg (ap, aword);
    31dc:	030b130e 	movweq	r1, #45838	; 0xb30e
		if (c == '%') {
    31e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    31e4:	10011117 	andne	r1, r1, r7, lsl r1
			c = *fm++;
    31e8:	02000017 	andeq	r0, r0, #23
			switch (c) {
    31ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    31f0:	0b3b0b3a 	bleq	ec5ee0 <__ccfg+0xea5f38>
    31f4:	00001349 	andeq	r1, r0, r9, asr #6
    31f8:	0b002403 	bleq	c20c <__exidx_end+0x68f4>
    31fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3200:	0400000e 	streq	r0, [r0], #-14
    3204:	0b0b0024 	bleq	2c329c <__ccfg+0x2a32f4>
    3208:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
				outc ('%');
    320c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3210:	03193f01 	tsteq	r9, #1, 30
				outc (c);
    3214:	3b0b3a0e 	blcc	2d1a54 <__ccfg+0x2b1aac>
    3218:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    321c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				if (c == '\0')
    3220:	97184006 	ldrls	r4, [r8, -r6]
				return d;
    3224:	00001942 	andeq	r1, r0, r2, asr #18
}
    3228:	03003406 	movweq	r3, #1030	; 0x406
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
			switch (c) {
    3230:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3234:	07000017 	smladeq	r0, r7, r0, r0
    3238:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				for (i = 12; ; i -= 4) {
    323c:	0b3b0b3a 	bleq	ec5f2c <__ccfg+0xea5f84>
				val = (word) va_arg (ap, aword);
    3240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
						[ (val >> i) & 0xf ]);
    3244:	01000000 	mrseq	r0, (UNDEF: 0)
    3248:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    324c:	0e030b13 	vmoveq.32	d3[0], r0
					outc (__pi_hex_enc_table
    3250:	17550e1b 	smmlane	r5, fp, lr, r0
    3254:	17100111 			; <UNDEFINED> instruction: 0x17100111
					if (i == 0)
    3258:	24020000 	strcs	r0, [r2], #-0
    325c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				for (i = 12; ; i -= 4) {
    3260:	000e030b 	andeq	r0, lr, fp, lsl #6
				val = (word) va_arg (ap, aword);
    3264:	00160300 	andseq	r0, r6, r0, lsl #6
				if (c == 'd' && (val & 0x8000) != 0) {
    3268:	0b3a0e03 	bleq	e86a7c <__ccfg+0xe66ad4>
				val = (word) va_arg (ap, aword);
    326c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
				if (c == 'd' && (val & 0x8000) != 0) {
    3270:	24040000 	strcs	r0, [r4], #-0
    3274:	3e0b0b00 	vmlacc.f64	d0, d11, d0
					outc ('-');
    3278:	0008030b 	andeq	r0, r8, fp, lsl #6
    327c:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
					val = (~val) + 1;
    3280:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3284:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				for (i = 12; ; i -= 4) {
    3288:	13491927 	movtne	r1, #39207	; 0x9927
				enci (10000);
    328c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3290:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3294:	00130119 	andseq	r0, r3, r9, lsl r1
    3298:	00340600 	eorseq	r0, r4, r0, lsl #12
    329c:	0b3a0e03 	bleq	e86ab0 <__ccfg+0xe66b08>
    32a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32a4:	00001702 	andeq	r1, r0, r2, lsl #14
    32a8:	03003407 	movweq	r3, #1031	; 0x407
    32ac:	3b0b3a0e 	blcc	2d1aec <__ccfg+0x2b1b44>
    32b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32b4:	08000018 	stmdaeq	r0, {r3, r4}
    32b8:	0b0b0117 	bleq	2c371c <__ccfg+0x2a3774>
    32bc:	0b3b0b3a 	bleq	ec5fac <__ccfg+0xea6004>
    32c0:	00001301 	andeq	r1, r0, r1, lsl #6
    32c4:	03000d09 	movweq	r0, #3337	; 0xd09
    32c8:	3b0b3a0e 	blcc	2d1b08 <__ccfg+0x2b1b60>
    32cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    32d0:	00340a00 	eorseq	r0, r4, r0, lsl #20
				if (c == 'd' || c == 'u') {
    32d4:	0b3a0e03 	bleq	e86ae8 <__ccfg+0xe66b40>
    32d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
					if (c == 'd' &&
    32dc:	010b0000 	mrseq	r0, (UNDEF: 11)
					val = va_arg (ap, lword);
    32e0:	01134901 	tsteq	r3, r1, lsl #18
					fm++;
    32e4:	0c000013 	stceq	0, cr0, [r0], {19}
					if (c == 'd' &&
    32e8:	13490021 	movtne	r0, #36897	; 0x9021
    32ec:	00000b2f 	andeq	r0, r0, pc, lsr #22
						outc ('-');
    32f0:	01110100 	tsteq	r1, r0, lsl #2
    32f4:	0b130e25 	bleq	4c6b90 <__ccfg+0x4a6be8>
						val = (~val) + 1;
    32f8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
				enci (10000);
    32fc:	01111755 	tsteq	r1, r5, asr r7
					enci (1000000000UL);
    3300:	00001710 	andeq	r1, r0, r0, lsl r7
    3304:	0b002402 	bleq	c314 <__exidx_end+0x69fc>
    3308:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    330c:	0300000e 	movweq	r0, #14
    3310:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3314:	0b3b0b3a 	bleq	ec6004 <__ccfg+0xea605c>
    3318:	00001349 	andeq	r1, r0, r9, asr #6
    331c:	0b002404 	bleq	c334 <__exidx_end+0x6a1c>
    3320:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3324:	05000008 	streq	r0, [r0, #-8]
    3328:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    332c:	0b3a0e03 	bleq	e86b40 <__ccfg+0xe66b98>
    3330:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3334:	01111349 	tsteq	r1, r9, asr #6
    3338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    333c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3340:	06000013 			; <UNDEFINED> instruction: 0x06000013
				} else if (c == 'x') {
    3344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
					for (i = 28; ; i -= 4) {
    3348:	0b3b0b3a 	bleq	ec6038 <__ccfg+0xea6090>
					val = va_arg (ap, lword);
    334c:	00001349 	andeq	r1, r0, r9, asr #6
							[ (val >> i) & 0xf ]);
    3350:	03003407 	movweq	r3, #1031	; 0x407
    3354:	3b0b3a0e 	blcc	2d1b94 <__ccfg+0x2b1bec>
						outc (__pi_hex_enc_table
    3358:	00134905 	andseq	r4, r3, r5, lsl #18
    335c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3360:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
						if (i == 0)
    3364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3368:	13491927 	movtne	r1, #39207	; 0x9927
					for (i = 28; ; i -= 4) {
    336c:	06120111 			; <UNDEFINED> instruction: 0x06120111
					outc ('%');
    3370:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3374:	00130119 	andseq	r0, r3, r9, lsl r1
    3378:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
					outc ('l');
    337c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				val = (word) va_arg (ap, aword);
    3384:	01111927 	tsteq	r1, r7, lsr #18
				outc (val);
    3388:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    338c:	00194297 	mulseq	r9, r7, r2
				while (*st != '\0') {
    3390:	00050a00 	andeq	r0, r5, r0, lsl #20
    3394:	0b3a0e03 	bleq	e86ba8 <__ccfg+0xe66c00>
    3398:	1349053b 	movtne	r0, #38203	; 0x953b
    339c:	00001802 	andeq	r1, r0, r2, lsl #16
					outc (*st);
    33a0:	01110100 	tsteq	r1, r0, lsl #2
    33a4:	0b130e25 	bleq	4c6c40 <__ccfg+0x4a6c98>
					st++;
    33a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		c = *fm++;
    33ac:	01111755 	tsteq	r1, r5, asr r7
    33b0:	00001710 	andeq	r1, r0, r0, lsl r7
    33b4:	0b002402 	bleq	c3c4 <__exidx_end+0x6aac>
char *vform (char *res, const char *fm, va_list aq) {
    33b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33bc:	0300000e 	movweq	r0, #14
	if (res != NULL) {
    33c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    33c4:	0b3b0b3a 	bleq	ec60b4 <__ccfg+0xea610c>
    33c8:	00001349 	andeq	r1, r0, r9, asr #6
    33cc:	0b002404 	bleq	c3e4 <__exidx_end+0x6acc>
}
    33d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33d4:	05000008 	streq	r0, [r0, #-8]
	fml = strlen (fm) + 17;
    33d8:	0b0b000f 	bleq	2c341c <__ccfg+0x2a3474>
    33dc:	00001349 	andeq	r1, r0, r9, asr #6
    33e0:	27001506 	strcs	r1, [r0, -r6, lsl #10]
	if ((res = (char*) umalloc (fml)) == NULL)
    33e4:	07000019 	smladeq	r0, r9, r0, r0
    33e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    33ec:	00001301 	andeq	r1, r0, r1, lsl #6
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    33f0:	49000508 	stmdbmi	r0, {r3, r8, sl}
    33f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    33f8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    33fc:	13011349 	movwne	r1, #4937	; 0x1349
		ufree (res);
    3400:	150a0000 	strne	r0, [sl, #-0]
		goto Again;
    3404:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
	if (buf == NULL || fmt == NULL)
    3408:	0b000013 	bleq	345c <vscan+0x54>
int vscan (const char *buf, const char *fmt, va_list ap) {
    340c:	0b0b0113 	bleq	2c3860 <__ccfg+0x2a38b8>
	if (buf == NULL || fmt == NULL)
    3410:	0b3b0b3a 	bleq	ec6100 <__ccfg+0xea6158>
    3414:	00001301 	andeq	r1, r0, r1, lsl #6
    3418:	03000d0c 	movweq	r0, #3340	; 0xd0c
		    	    case 'u': scanu (lword); break;
    341c:	3b0b3a0e 	blcc	2d1c5c <__ccfg+0x2b1cb4>
			while (isspace (*buf)) buf++;
    3420:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3424:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
	while (*fmt != '\0') {
    3428:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
		if (*fmt++ != '%')
    342c:	0b3a0e03 	bleq	e86c40 <__ccfg+0xe66c98>
		switch (*fmt++) {
    3430:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3434:	13010b20 	movwne	r0, #6944	; 0x1b20
    3438:	050e0000 	streq	r0, [lr, #-0]
    343c:	3a0e0300 	bcc	384044 <__ccfg+0x36409c>
    3440:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3444:	0f000013 	svceq	0x00000013
    3448:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
}
    344c:	0b3a0e03 	bleq	e86c60 <__ccfg+0xe66cb8>
		switch (*fmt++) {
    3450:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3454:	0b201349 	bleq	808180 <__ccfg+0x7e81d8>
    3458:	00001301 	andeq	r1, r0, r1, lsl #6
    345c:	03003410 	movweq	r3, #1040	; 0x410
			while (isspace (*buf)) buf++;
    3460:	3b0b3a0e 	blcc	2d1ca0 <__ccfg+0x2b1cf8>
    3464:	0013490b 	andseq	r4, r3, fp, lsl #18
    3468:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    346c:	01111331 	tsteq	r1, r1, lsr r3
    3470:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3474:	01194297 			; <UNDEFINED> instruction: 0x01194297
			if (*buf == '\0')
    3478:	12000013 	andne	r0, r0, #19
			if (*buf != ',') {
    347c:	13310005 	teqne	r1, #5
			sap = va_arg (ap, char*);
    3480:	00001702 	andeq	r1, r0, r2, lsl #14
			nc++;
    3484:	11010b13 	tstne	r1, r3, lsl fp
			if (*buf != ',') {
    3488:	01061201 	tsteq	r6, r1, lsl #4
				while (!isspace (*buf) && *buf != ',' &&
    348c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3490:	01018289 	smlabbeq	r1, r9, r2, r8
    3494:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3498:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
    349c:	0001828a 	andeq	r8, r1, sl, lsl #5
    34a0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    34a4:	16000018 			; <UNDEFINED> instruction: 0x16000018
			while (isspace (*buf)) buf++;
    34a8:	01018289 	smlabbeq	r1, r9, r2, r8
    34ac:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    34b0:	00130118 	andseq	r0, r3, r8, lsl r1
    34b4:	00341700 	eorseq	r1, r4, r0, lsl #14
    34b8:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
			if (*buf == ',') buf++;
    34bc:	0b180000 	bleq	6034c4 <__ccfg+0x5e351c>
    34c0:	01175501 	tsteq	r7, r1, lsl #10
			*sap = '\0';
    34c4:	19000013 	stmdbne	r0, {r0, r1, r4}
			break;
    34c8:	13310005 	teqne	r1, #5
		    case 'd': scani (word); break;
    34cc:	00000b1c 	andeq	r0, r0, ip, lsl fp
    34d0:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    34d4:	1b000017 	blne	3538 <vscan+0x130>
    34d8:	13310034 	teqne	r1, #52	; 0x34
    34dc:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    34e0:	03193f01 	tsteq	r9, #1, 30
    34e4:	3b0b3a0e 	blcc	2d1d24 <__ccfg+0x2b1d7c>
    34e8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    34ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34f0:	97184006 	ldrls	r4, [r8, -r6]
    34f4:	13011942 	movwne	r1, #6466	; 0x1942
    34f8:	051d0000 	ldreq	r0, [sp, #-0]
    34fc:	3a0e0300 	bcc	384104 <__ccfg+0x36415c>
    3500:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3504:	00170213 	andseq	r0, r7, r3, lsl r2
    3508:	00341e00 	eorseq	r1, r4, r0, lsl #28
    350c:	0b3a0e03 	bleq	e86d20 <__ccfg+0xe66d78>
    3510:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3514:	00001702 	andeq	r1, r0, r2, lsl #14
    3518:	0182891f 	orreq	r8, r2, pc, lsl r9
    351c:	31011100 	mrscc	r1, (UNDEF: 17)
    3520:	20000013 	andcs	r0, r0, r3, lsl r0
    3524:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3528:	0b3a0e03 	bleq	e86d3c <__ccfg+0xe66d94>
    352c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3530:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3534:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3538:	00130119 	andseq	r0, r3, r9, lsl r1
		    case 'u': scanu (word); break;
    353c:	82892100 	addhi	r2, r9, #0, 2
    3540:	01110101 	tsteq	r1, r1, lsl #2
    3544:	13011331 	movwne	r1, #4913	; 0x1331
    3548:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    354c:	3a0e0300 	bcc	384154 <__ccfg+0x3641ac>
    3550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3554:	20134919 	andscs	r4, r3, r9, lsl r9
    3558:	2300000b 	movwcs	r0, #11
    355c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3560:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3564:	0b201927 	bleq	809a08 <__ccfg+0x7e9a60>
    3568:	34240000 	strtcc	r0, [r4], #-0
    356c:	3a0e0300 	bcc	384174 <__ccfg+0x3641cc>
    3570:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3574:	00170213 	andseq	r0, r7, r3, lsl r2
    3578:	011d2500 	tsteq	sp, r0, lsl #10
    357c:	01111331 	tsteq	r1, r1, lsr r3
    3580:	0b580612 	bleq	1604dd0 <__ccfg+0x15e4e28>
		    case 'x': scanx (word); break;
    3584:	13010559 	movwne	r0, #5465	; 0x1559
    3588:	05260000 	streq	r0, [r6, #-0]!
    358c:	3a0e0300 	bcc	384194 <__ccfg+0x3641ec>
    3590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3594:	00170213 	andseq	r0, r7, r3, lsl r2
    3598:	00342700 	eorseq	r2, r4, r0, lsl #14
    359c:	0b3a0e03 	bleq	e86db0 <__ccfg+0xe66e08>
    35a0:	1349053b 	movtne	r0, #38203	; 0x953b
    35a4:	00001802 	andeq	r1, r0, r2, lsl #16
    35a8:	03003428 	movweq	r3, #1064	; 0x428
    35ac:	3b0b3a08 	blcc	2d1dd4 <__ccfg+0x2b1e2c>
    35b0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    35b4:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    35b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    35bc:	0b3b0b3a 	bleq	ec62ac <__ccfg+0xea6304>
    35c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    35c4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    35c8:	03193f00 	tsteq	r9, #0, 30
    35cc:	3b0b3a0e 	blcc	2d1e0c <__ccfg+0x2b1e64>
    35d0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    35d4:	00193c13 	andseq	r3, r9, r3, lsl ip
    35d8:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    35dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    35e0:	0b3b0b3a 	bleq	ec62d0 <__ccfg+0xea6328>
    35e4:	13491927 	movtne	r1, #39207	; 0x9927
    35e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    35ec:	3f012e2c 	svccc	0x00012e2c
    35f0:	3a0e0319 	bcc	38425c <__ccfg+0x3642b4>
    35f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    35f8:	00193c19 	andseq	r3, r9, r9, lsl ip
			switch (*fmt++) {
    35fc:	11010000 	mrsne	r0, (UNDEF: 1)
    3600:	130e2501 	movwne	r2, #58625	; 0xe501
    3604:	1b0e030b 	blne	384238 <__ccfg+0x364290>
    3608:	1117550e 	tstne	r7, lr, lsl #10
    360c:	00171001 	andseq	r1, r7, r1
    3610:	00240200 	eoreq	r0, r4, r0, lsl #4
		    	    case 'd': scani (lword); break;
    3614:	0b3e0b0b 	bleq	f86248 <__ccfg+0xf662a0>
    3618:	00000e03 	andeq	r0, r0, r3, lsl #28
    361c:	03001603 	movweq	r1, #1539	; 0x603
    3620:	3b0b3a0e 	blcc	2d1e60 <__ccfg+0x2b1eb8>
    3624:	0013490b 	andseq	r4, r3, fp, lsl #18
    3628:	00240400 	eoreq	r0, r4, r0, lsl #8
    362c:	0b3e0b0b 	bleq	f86260 <__ccfg+0xf662b8>
    3630:	00000803 	andeq	r0, r0, r3, lsl #16
    3634:	0b000f05 	bleq	7250 <__exidx_end+0x1938>
    3638:	0600000b 	streq	r0, [r0], -fp
    363c:	0b0b000f 	bleq	2c3680 <__ccfg+0x2a36d8>
    3640:	00001349 	andeq	r1, r0, r9, asr #6
    3644:	03011307 	movweq	r1, #4871	; 0x1307
    3648:	3a0b0b0e 	bcc	2c6288 <__ccfg+0x2a62e0>
    364c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3650:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3654:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3658:	0b3b0b3a 	bleq	ec6348 <__ccfg+0xea63a0>
    365c:	0b381349 	bleq	e08388 <__ccfg+0xde83e0>
    3660:	13090000 	movwne	r0, #36864	; 0x9000
    3664:	3a0b0b01 	bcc	2c6270 <__ccfg+0x2a62c8>
    3668:	010b3b0b 	tsteq	fp, fp, lsl #22
    366c:	0a000013 	beq	36c0 <vscan+0x2b8>
		    	    case 'x': scanx (lword); break;
    3670:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3674:	0b3b0b3a 	bleq	ec6364 <__ccfg+0xea63bc>
    3678:	0b0b1349 	bleq	2c83a4 <__ccfg+0x2a83fc>
    367c:	0b0c0b0d 	bleq	3062b8 <__ccfg+0x2e6310>
    3680:	00000b38 	andeq	r0, r0, r8, lsr fp
    3684:	0301130b 	movweq	r1, #4875	; 0x130b
    3688:	3a0b0b0e 	bcc	2c62c8 <__ccfg+0x2a6320>
    368c:	01053b0b 	tsteq	r5, fp, lsl #22
    3690:	0c000013 	stceq	0, cr0, [r0], {19}
    3694:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    369c:	0b381349 	bleq	e083c8 <__ccfg+0xde8420>
    36a0:	130d0000 	movwne	r0, #53248	; 0xd000
    36a4:	3a0b0b01 	bcc	2c62b0 <__ccfg+0x2a6308>
    36a8:	01053b0b 	tsteq	r5, fp, lsl #22
    36ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    36b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    36b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36b8:	0b0b1349 	bleq	2c83e4 <__ccfg+0x2a843c>
    36bc:	0b0c0b0d 	bleq	3062f8 <__ccfg+0x2e6350>
    36c0:	00000b38 	andeq	r0, r0, r8, lsr fp
    36c4:	03002e0f 	movweq	r2, #3599	; 0xe0f
    36c8:	3b0b3a0e 	blcc	2d1f08 <__ccfg+0x2b1f60>
    36cc:	20192705 	andscs	r2, r9, r5, lsl #14
    36d0:	1000000b 	andne	r0, r0, fp
    36d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    36d8:	0b3a0e03 	bleq	e86eec <__ccfg+0xe66f44>
    36dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
		    	    case 'd': scani (lword); break;
    36e0:	01111349 	tsteq	r1, r9, asr #6
    36e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    36e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    36ec:	11000013 	tstne	r0, r3, lsl r0
    36f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    36f4:	0b3b0b3a 	bleq	ec63e4 <__ccfg+0xea643c>
    36f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
		    	    case 'u': scanu (lword); break;
    36fc:	05120000 	ldreq	r0, [r2, #-0]
    3700:	3a080300 	bcc	204308 <__ccfg+0x1e4360>
    3704:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3708:	00170213 	andseq	r0, r7, r3, lsl r2
    370c:	001d1300 	andseq	r1, sp, r0, lsl #6
    3710:	01111331 	tsteq	r1, r1, lsr r3
    3714:	0b580612 	bleq	1604f64 <__ccfg+0x15e4fbc>
    3718:	00000b59 	andeq	r0, r0, r9, asr fp
    371c:	3f002e14 	svccc	0x00002e14
    3720:	3a0e0319 	bcc	38438c <__ccfg+0x3643e4>
    3724:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3728:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    372c:	97184006 	ldrls	r4, [r8, -r6]
    3730:	00001942 	andeq	r1, r0, r2, asr #18
    3734:	3f012e15 	svccc	0x00012e15
    3738:	3a0e0319 	bcc	3843a4 <__ccfg+0x3643fc>
    373c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3740:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
		    	    case 'x': scanx (lword); break;
    3744:	97184006 	ldrls	r4, [r8, -r6]
    3748:	13011942 	movwne	r1, #6466	; 0x1942
			if ((c = *buf++) == '\0')
    374c:	05160000 	ldreq	r0, [r6, #-0]
    3750:	3a0e0300 	bcc	384358 <__ccfg+0x3643b0>
			sap = va_arg (ap, char*);
    3754:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nc++;
    3758:	00180213 	andseq	r0, r8, r3, lsl r2
			break;
    375c:	00341700 	eorseq	r1, r4, r0, lsl #14
			while (isspace (*buf)) buf++;
    3760:	0b3a0e03 	bleq	e86f74 <__ccfg+0xe66fcc>
    3764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3768:	00001702 	andeq	r1, r0, r2, lsl #14
						*sap++ = *buf++;
    376c:	03000518 	movweq	r0, #1304	; 0x518
    3770:	3b0b3a0e 	blcc	2d1fb0 <__ccfg+0x2b2008>
			while (isspace (*buf)) buf++;
    3774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3778:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    377c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		return 0;
    3780:	0b3b0b3a 	bleq	ec6470 <__ccfg+0xea64c8>
    3784:	00001349 	andeq	r1, r0, r9, asr #6
		    case 'x': scanx (word); break;
    3788:	0300051a 	movweq	r0, #1306	; 0x51a
    378c:	3b0b3a0e 	blcc	2d1fcc <__ccfg+0x2b2024>
		    	    case 'x': scanx (lword); break;
    3790:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3794:	1b000017 	blne	37f8 <NOROM_AONRTCCurrentCompareValueGet+0x8>
    3798:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    379c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37a0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
    37a4:	341c0000 	ldrcc	r0, [ip], #-0
    37a8:	3a080300 	bcc	2043b0 <__ccfg+0x1e4408>
    37ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    37b0:	00170213 	andseq	r0, r7, r3, lsl r2
    37b4:	82891d00 	addhi	r1, r9, #0, 26
    37b8:	01110101 	tsteq	r1, r1, lsl #2
    37bc:	00001331 	andeq	r1, r0, r1, lsr r3
    37c0:	01828a1e 	orreq	r8, r2, lr, lsl sl
    37c4:	91180200 	tstls	r8, r0, lsl #4
    37c8:	00001842 	andeq	r1, r0, r2, asr #16
    37cc:	0300051f 	movweq	r0, #1311	; 0x51f
    37d0:	3b0b3a0e 	blcc	2d2010 <__ccfg+0x2b2068>
    37d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    37d8:	20000018 	andcs	r0, r0, r8, lsl r0
    37dc:	13490101 	movtne	r0, #37121	; 0x9101
    37e0:	00001301 	andeq	r1, r0, r1, lsl #6
    37e4:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
    37e8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    37ec:	00342200 	eorseq	r2, r4, r0, lsl #4
    37f0:	0b3a0e03 	bleq	e87004 <__ccfg+0xe6705c>
    37f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    37f8:	00000a1c 	andeq	r0, r0, ip, lsl sl
    37fc:	49002623 	stmdbmi	r0, {r0, r1, r5, r9, sl, sp}
    3800:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3804:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3808:	0b3a0e03 	bleq	e8701c <__ccfg+0xe67074>
    380c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3810:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3814:	05250000 	streq	r0, [r5, #-0]!
    3818:	00134900 	andseq	r4, r3, r0, lsl #18
    381c:	11010000 	mrsne	r0, (UNDEF: 1)
    3820:	130e2501 	movwne	r2, #58625	; 0xe501
    3824:	1b0e030b 	blne	384458 <__ccfg+0x3644b0>
    3828:	1117550e 	tstne	r7, lr, lsl #10
    382c:	00171001 	andseq	r1, r7, r1
    3830:	00240200 	eoreq	r0, r4, r0, lsl #4
    3834:	0b3e0b0b 	bleq	f86468 <__ccfg+0xf664c0>
    3838:	00000e03 	andeq	r0, r0, r3, lsl #28
    383c:	03001603 	movweq	r1, #1539	; 0x603
    3840:	3b0b3a0e 	blcc	2d2080 <__ccfg+0x2b20d8>
    3844:	0013490b 	andseq	r4, r3, fp, lsl #18
    3848:	00240400 	eoreq	r0, r4, r0, lsl #8
    384c:	0b3e0b0b 	bleq	f86480 <__ccfg+0xf664d8>
    3850:	00000803 	andeq	r0, r0, r3, lsl #16
    3854:	03002e05 	movweq	r2, #3589	; 0xe05
    3858:	3b0b3a0e 	blcc	2d2098 <__ccfg+0x2b20f0>
    385c:	20192705 	andscs	r2, r9, r5, lsl #14
    3860:	0600000b 	streq	r0, [r0], -fp
    3864:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3868:	0b3b0b3a 	bleq	ec6558 <__ccfg+0xea65b0>
    386c:	0b201927 	bleq	809d10 <__ccfg+0x7e9d68>
    3870:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    3874:	3a0e0301 	bcc	384480 <__ccfg+0x3644d8>
    3878:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    387c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3880:	97184006 	ldrls	r4, [r8, -r6]
    3884:	13011942 	movwne	r1, #6466	; 0x1942
    3888:	05080000 	streq	r0, [r8, #-0]
    388c:	3a0e0300 	bcc	384494 <__ccfg+0x3644ec>
    3890:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3894:	00170213 	andseq	r0, r7, r3, lsl r2
    3898:	00340900 	eorseq	r0, r4, r0, lsl #18
    389c:	0b3a0e03 	bleq	e870b0 <__ccfg+0xe67108>
    38a0:	1349053b 	movtne	r0, #38203	; 0x953b
    38a4:	00001702 	andeq	r1, r0, r2, lsl #14
    38a8:	31001d0a 	tstcc	r0, sl, lsl #26
    38ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38b0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    38b4:	0b000005 	bleq	38d0 <NOROM_OSCHF_TurnOnXosc+0x10>
    38b8:	0111010b 	tsteq	r1, fp, lsl #2
    38bc:	13010612 	movwne	r0, #5650	; 0x1612
    38c0:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
    38c4:	11010182 	smlabbne	r1, r2, r1, r0
    38c8:	01133101 	tsteq	r3, r1, lsl #2
    38cc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    38d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    38d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    38d8:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    38dc:	01018289 	smlabbeq	r1, r9, r2, r8
    38e0:	00000111 	andeq	r0, r0, r1, lsl r1
    38e4:	3f012e0f 	svccc	0x00012e0f
    38e8:	3a0e0319 	bcc	384554 <__ccfg+0x3645ac>
    38ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    38f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    38f4:	97184006 	ldrls	r4, [r8, -r6]
    38f8:	13011942 	movwne	r1, #6466	; 0x1942
    38fc:	34100000 	ldrcc	r0, [r0], #-0
    3900:	3a0e0300 	bcc	384508 <__ccfg+0x364560>
    3904:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3908:	00170213 	andseq	r0, r7, r3, lsl r2
    390c:	82891100 	addhi	r1, r9, #0, 2
    3910:	01110001 	tsteq	r1, r1
    3914:	00001331 	andeq	r1, r0, r1, lsr r3
    3918:	01828912 	orreq	r8, r2, r2, lsl r9
    391c:	31011101 	tstcc	r1, r1, lsl #2
    3920:	13000013 	movwne	r0, #19
    3924:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3928:	0b3a0e03 	bleq	e8713c <__ccfg+0xe67194>
    392c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3930:	1301193c 	movwne	r1, #6460	; 0x193c
    3934:	05140000 	ldreq	r0, [r4, #-0]
    3938:	00134900 	andseq	r4, r3, r0, lsl #18
    393c:	002e1500 	eoreq	r1, lr, r0, lsl #10
    3940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3944:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    394c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    3950:	03193f00 	tsteq	r9, #0, 30
    3954:	3b0b3a0e 	blcc	2d2194 <__ccfg+0x2b21ec>
    3958:	3c19270b 	ldccc	7, cr2, [r9], {11}
    395c:	00000019 	andeq	r0, r0, r9, lsl r0
    3960:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3964:	030b130e 	movweq	r1, #45838	; 0xb30e
    3968:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    396c:	10011117 	andne	r1, r1, r7, lsl r1
    3970:	02000017 	andeq	r0, r0, #23
    3974:	0b0b0024 	bleq	2c3a0c <__ccfg+0x2a3a64>
    3978:	0e030b3e 	vmoveq.16	d3[0], r0
    397c:	16030000 	strne	r0, [r3], -r0
    3980:	3a0e0300 	bcc	384588 <__ccfg+0x3645e0>
    3984:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3988:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    398c:	0b0b0024 	bleq	2c3a24 <__ccfg+0x2a3a7c>
    3990:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3994:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3998:	3a0e0301 	bcc	3845a4 <__ccfg+0x3645fc>
    399c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39a0:	20134919 	andscs	r4, r3, r9, lsl r9
    39a4:	0013010b 	andseq	r0, r3, fp, lsl #2
    39a8:	00050600 	andeq	r0, r5, r0, lsl #12
    39ac:	0b3a0e03 	bleq	e871c0 <__ccfg+0xe67218>
    39b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39b4:	34070000 	strcc	r0, [r7], #-0
    39b8:	3a0e0300 	bcc	3845c0 <__ccfg+0x364618>
    39bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    39c0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    39c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    39c8:	0b3a0e03 	bleq	e871dc <__ccfg+0xe67234>
    39cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39d0:	0b201349 	bleq	8086fc <__ccfg+0x7e8754>
    39d4:	00001301 	andeq	r1, r0, r1, lsl #6
    39d8:	03000509 	movweq	r0, #1289	; 0x509
    39dc:	3b0b3a0e 	blcc	2d221c <__ccfg+0x2b2274>
    39e0:	00134905 	andseq	r4, r3, r5, lsl #18
    39e4:	00340a00 	eorseq	r0, r4, r0, lsl #20
    39e8:	0b3a0e03 	bleq	e871fc <__ccfg+0xe67254>
    39ec:	1349053b 	movtne	r0, #38203	; 0x953b
    39f0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    39f4:	3a0e0300 	bcc	3845fc <__ccfg+0x364654>
    39f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    39fc:	000b2019 	andeq	r2, fp, r9, lsl r0
    3a00:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
    3a04:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a0c:	01111927 	tsteq	r1, r7, lsr #18
    3a10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3a14:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3a18:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    3a1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a20:	0b3b0b3a 	bleq	ec6710 <__ccfg+0xea6768>
    3a24:	17021349 	strne	r1, [r2, -r9, asr #6]
    3a28:	340e0000 	strcc	r0, [lr], #-0
    3a2c:	3a0e0300 	bcc	384634 <__ccfg+0x36468c>
    3a30:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a34:	00180213 	andseq	r0, r8, r3, lsl r2
    3a38:	00340f00 	eorseq	r0, r4, r0, lsl #30
    3a3c:	0b3a0e03 	bleq	e87250 <__ccfg+0xe672a8>
    3a40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a44:	00001702 	andeq	r1, r0, r2, lsl #14
    3a48:	31011d10 	tstcc	r1, r0, lsl sp
    3a4c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3a50:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3a54:	0013010b 	andseq	r0, r3, fp, lsl #2
    3a58:	00051100 	andeq	r1, r5, r0, lsl #2
    3a5c:	00001331 	andeq	r1, r0, r1, lsr r3
    3a60:	55010b12 	strpl	r0, [r1, #-2834]	; 0xfffff4ee
    3a64:	13000017 	movwne	r0, #23
    3a68:	13310034 	teqne	r1, #52	; 0x34
    3a6c:	00001802 	andeq	r1, r0, r2, lsl #16
    3a70:	31011d14 	tstcc	r1, r4, lsl sp
    3a74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3a78:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3a7c:	1500000b 	strne	r0, [r0, #-11]
    3a80:	0111010b 	tsteq	r1, fp, lsl #2
    3a84:	00000612 	andeq	r0, r0, r2, lsl r6
    3a88:	31003416 	tstcc	r0, r6, lsl r4
    3a8c:	00170213 	andseq	r0, r7, r3, lsl r2
    3a90:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    3a94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a98:	0b3b0b3a 	bleq	ec6788 <__ccfg+0xea67e0>
    3a9c:	01111927 	tsteq	r1, r7, lsr #18
    3aa0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3aa4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aa8:	18000013 	stmdane	r0, {r0, r1, r4}
    3aac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3ab0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3ab4:	0b590b58 	bleq	164681c <__ccfg+0x1626874>
    3ab8:	00001301 	andeq	r1, r0, r1, lsl #6
    3abc:	01828919 	orreq	r8, r2, r9, lsl r9
    3ac0:	31011101 	tstcc	r1, r1, lsl #2
    3ac4:	1a000013 	bne	3b18 <NOROM_RFCRfTrimRead+0x138>
    3ac8:	0001828a 	andeq	r8, r1, sl, lsl #5
    3acc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3ad0:	1b000018 	blne	3b38 <NOROM_RFCRTrim+0x8>
    3ad4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3ad8:	0b3a0e03 	bleq	e872ec <__ccfg+0xe67344>
    3adc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3ae0:	01111349 	tsteq	r1, r9, asr #6
    3ae4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3ae8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aec:	1c000013 	stcne	0, cr0, [r0], {19}
    3af0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3af4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3af8:	17021349 	strne	r1, [r2, -r9, asr #6]
    3afc:	341d0000 	ldrcc	r0, [sp], #-0
    3b00:	3a0e0300 	bcc	384708 <__ccfg+0x364760>
    3b04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b08:	00170213 	andseq	r0, r7, r3, lsl r2
    3b0c:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
    3b10:	01111331 	tsteq	r1, r1, lsr r3
    3b14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3b18:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3b1c:	1f000013 	svcne	0x00000013
    3b20:	13310005 	teqne	r1, #5
    3b24:	00001702 	andeq	r1, r0, r2, lsl #14
    3b28:	31003420 	tstcc	r0, r0, lsr #8
    3b2c:	21000013 	tstcs	r0, r3, lsl r0
    3b30:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3b34:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3b38:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3b3c:	00001301 	andeq	r1, r0, r1, lsl #6
    3b40:	01828922 	orreq	r8, r2, r2, lsr #18
    3b44:	31011101 	tstcc	r1, r1, lsl #2
    3b48:	00130113 	andseq	r0, r3, r3, lsl r1
    3b4c:	82892300 	addhi	r2, r9, #0, 6
    3b50:	01110001 	tsteq	r1, r1
    3b54:	00001331 	andeq	r1, r0, r1, lsr r3
    3b58:	01828924 	orreq	r8, r2, r4, lsr #18
    3b5c:	93011101 	movwls	r1, #4353	; 0x1101
    3b60:	13011842 	movwne	r1, #6210	; 0x1842
    3b64:	1d250000 	stcne	0, cr0, [r5, #-0]
    3b68:	11133100 	tstne	r3, r0, lsl #2
    3b6c:	58061201 	stmdapl	r6, {r0, r9, ip}
    3b70:	0005590b 	andeq	r5, r5, fp, lsl #18
    3b74:	82892600 	addhi	r2, r9, #0, 12
    3b78:	01110101 	tsteq	r1, r1, lsl #2
    3b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    3b80:	3f012e27 	svccc	0x00012e27
    3b84:	3a0e0319 	bcc	3847f0 <__ccfg+0x364848>
    3b88:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3b8c:	01193c19 	tsteq	r9, r9, lsl ip
    3b90:	28000013 	stmdacs	r0, {r0, r1, r4}
    3b94:	13490005 	movtne	r0, #36869	; 0x9005
    3b98:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    3b9c:	03193f01 	tsteq	r9, #1, 30
    3ba0:	3b0b3a0e 	blcc	2d23e0 <__ccfg+0x2b2438>
    3ba4:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3ba8:	00130119 	andseq	r0, r3, r9, lsl r1
    3bac:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    3bb0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3bb8:	13491927 	movtne	r1, #39207	; 0x9927
    3bbc:	0000193c 	andeq	r1, r0, ip, lsr r9
    3bc0:	01110100 	tsteq	r1, r0, lsl #2
    3bc4:	0b130e25 	bleq	4c7460 <__ccfg+0x4a74b8>
    3bc8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3bcc:	01111755 	tsteq	r1, r5, asr r7
    3bd0:	00001710 	andeq	r1, r0, r0, lsl r7
    3bd4:	03001602 	movweq	r1, #1538	; 0x602
    3bd8:	3b0b3a0e 	blcc	2d2418 <__ccfg+0x2b2470>
    3bdc:	0013490b 	andseq	r4, r3, fp, lsl #18
    3be0:	00240300 	eoreq	r0, r4, r0, lsl #6
    3be4:	0b3e0b0b 	bleq	f86818 <__ccfg+0xf66870>
    3be8:	00000e03 	andeq	r0, r0, r3, lsl #28
    3bec:	0b002404 	bleq	cc04 <__exidx_end+0x72ec>
    3bf0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bf4:	05000008 	streq	r0, [r0, #-8]
    3bf8:	0b0b000f 	bleq	2c3c3c <__ccfg+0x2a3c94>
    3bfc:	00001349 	andeq	r1, r0, r9, asr #6
    3c00:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    3c04:	07000019 	smladeq	r0, r9, r0, r0
    3c08:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c0c:	00001301 	andeq	r1, r0, r1, lsl #6
    3c10:	49000508 	stmdbmi	r0, {r3, r8, sl}
    3c14:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3c18:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    3c1c:	13011349 	movwne	r1, #4937	; 0x1349
    3c20:	150a0000 	strne	r0, [sl, #-0]
    3c24:	49192700 	ldmdbmi	r9, {r8, r9, sl, sp}
    3c28:	0b000013 	bleq	3c7c <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>
    3c2c:	0b0b0113 	bleq	2c4080 <__ccfg+0x2a40d8>
    3c30:	0b3b0b3a 	bleq	ec6920 <__ccfg+0xea6978>
    3c34:	00001301 	andeq	r1, r0, r1, lsl #6
    3c38:	03000d0c 	movweq	r0, #3340	; 0xd0c
    3c3c:	3b0b3a0e 	blcc	2d247c <__ccfg+0x2b24d4>
    3c40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3c44:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3c48:	0e03012e 	adfeqsp	f0, f3, #0.5
    3c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c50:	0b201927 	bleq	80a0f4 <__ccfg+0x7ea14c>
    3c54:	00001301 	andeq	r1, r0, r1, lsl #6
    3c58:	0300050e 	movweq	r0, #1294	; 0x50e
    3c5c:	3b0b3a0e 	blcc	2d249c <__ccfg+0x2b24f4>
    3c60:	00134905 	andseq	r4, r3, r5, lsl #18
    3c64:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    3c68:	0b3a0e03 	bleq	e8747c <__ccfg+0xe674d4>
    3c6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c70:	0b201349 	bleq	80899c <__ccfg+0x7e89f4>
    3c74:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    3c78:	3a0e0300 	bcc	384880 <__ccfg+0x3648d8>
    3c7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c80:	000b2019 	andeq	r2, fp, r9, lsl r0
    3c84:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    3c88:	0b3a0e03 	bleq	e8749c <__ccfg+0xe674f4>
    3c8c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3c90:	0b201349 	bleq	8089bc <__ccfg+0x7e8a14>
    3c94:	00001301 	andeq	r1, r0, r1, lsl #6
    3c98:	03000512 	movweq	r0, #1298	; 0x512
    3c9c:	3b0b3a0e 	blcc	2d24dc <__ccfg+0x2b2534>
    3ca0:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ca4:	00341300 	eorseq	r1, r4, r0, lsl #6
    3ca8:	0b3a0e03 	bleq	e874bc <__ccfg+0xe67514>
    3cac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3cb0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3cb4:	03193f01 	tsteq	r9, #1, 30
    3cb8:	3b0b3a0e 	blcc	2d24f8 <__ccfg+0x2b2550>
    3cbc:	1119270b 	tstne	r9, fp, lsl #14
    3cc0:	40061201 	andmi	r1, r6, r1, lsl #4
    3cc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3cc8:	00001301 	andeq	r1, r0, r1, lsl #6
    3ccc:	03003415 	movweq	r3, #1045	; 0x415
    3cd0:	3b0b3a0e 	blcc	2d2510 <__ccfg+0x2b2568>
    3cd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3cd8:	16000017 			; <UNDEFINED> instruction: 0x16000017
    3cdc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3ce0:	0b3b0b3a 	bleq	ec69d0 <__ccfg+0xea6a28>
    3ce4:	051c1349 	ldreq	r1, [ip, #-841]	; 0xfffffcb7
    3ce8:	1d170000 	ldcne	0, cr0, [r7, #-0]
    3cec:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3cf0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3cf4:	010b590b 	tsteq	fp, fp, lsl #18
    3cf8:	18000013 	stmdane	r0, {r0, r1, r4}
    3cfc:	13310005 	teqne	r1, #5
    3d00:	00000b1c 	andeq	r0, r0, ip, lsl fp
    3d04:	31001d19 	tstcc	r0, r9, lsl sp
    3d08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d0c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3d10:	1a00000b 	bne	3d44 <TrimAfterColdResetWakeupFromShutDown+0xc0>
    3d14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3d18:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d1c:	0b590b58 	bleq	1646a84 <__ccfg+0x1626adc>
    3d20:	00001301 	andeq	r1, r0, r1, lsl #6
    3d24:	0182891b 	orreq	r8, r2, fp, lsl r9
    3d28:	31011100 	mrscc	r1, (UNDEF: 17)
    3d2c:	1c000013 	stcne	0, cr0, [r0], {19}
    3d30:	01018289 	smlabbeq	r1, r9, r2, r8
    3d34:	13010111 	movwne	r0, #4369	; 0x1111
    3d38:	8a1d0000 	bhi	743d40 <__ccfg+0x723d98>
    3d3c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3d40:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3d44:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    3d48:	11010182 	smlabbne	r1, r2, r1, r0
    3d4c:	01133101 	tsteq	r3, r1, lsl #2
    3d50:	1f000013 	svcne	0x00000013
    3d54:	01018289 	smlabbeq	r1, r9, r2, r8
    3d58:	00000111 	andeq	r0, r0, r1, lsl r1
    3d5c:	3f012e20 	svccc	0x00012e20
    3d60:	3a0e0319 	bcc	3849cc <__ccfg+0x364a24>
    3d64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3d68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3d6c:	97184006 	ldrls	r4, [r8, -r6]
    3d70:	13011942 	movwne	r1, #6466	; 0x1942
    3d74:	05210000 	streq	r0, [r1, #-0]!
    3d78:	3a0e0300 	bcc	384980 <__ccfg+0x3649d8>
    3d7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d80:	00170213 	andseq	r0, r7, r3, lsl r2
    3d84:	00342200 	eorseq	r2, r4, r0, lsl #4
    3d88:	0b3a0e03 	bleq	e8759c <__ccfg+0xe675f4>
    3d8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d90:	00001802 	andeq	r1, r0, r2, lsl #16
    3d94:	03003423 	movweq	r3, #1059	; 0x423
    3d98:	3b0b3a08 	blcc	2d25c0 <__ccfg+0x2b2618>
    3d9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3da0:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    3da4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3da8:	0b3b0b3a 	bleq	ec6a98 <__ccfg+0xea6af0>
    3dac:	00001349 	andeq	r1, r0, r9, asr #6
    3db0:	11010b25 	tstne	r1, r5, lsr #22
    3db4:	01061201 	tsteq	r6, r1, lsl #4
    3db8:	26000013 			; <UNDEFINED> instruction: 0x26000013
    3dbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3dc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3dc4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3dc8:	1d270000 	stcne	0, cr0, [r7, #-0]
    3dcc:	11133101 	tstne	r3, r1, lsl #2
    3dd0:	58061201 	stmdapl	r6, {r0, r9, ip}
    3dd4:	0105590b 	tsteq	r5, fp, lsl #18
    3dd8:	28000013 	stmdacs	r0, {r0, r1, r4}
    3ddc:	13310005 	teqne	r1, #5
    3de0:	0b290000 	bleq	a43de8 <__ccfg+0xa23e40>
    3de4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3de8:	2a000006 	bcs	3e08 <NOROM_SetupSetVddrLevel+0xc>
    3dec:	13310034 	teqne	r1, #52	; 0x34
    3df0:	00001702 	andeq	r1, r0, r2, lsl #14
    3df4:	31011d2b 	tstcc	r1, fp, lsr #26
    3df8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3dfc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3e00:	00130105 	andseq	r0, r3, r5, lsl #2
    3e04:	010b2c00 	tsteq	fp, r0, lsl #24
    3e08:	00001755 	andeq	r1, r0, r5, asr r7
    3e0c:	4900262d 	stmdbmi	r0, {r0, r2, r3, r5, r9, sl, sp}
    3e10:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    3e14:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3e18:	0b3a0e03 	bleq	e8762c <__ccfg+0xe67684>
    3e1c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3e20:	01111349 	tsteq	r1, r9, asr #6
    3e24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3e28:	00194297 	mulseq	r9, r7, r2
    3e2c:	01012f00 	tsteq	r1, r0, lsl #30
    3e30:	13011349 	movwne	r1, #4937	; 0x1349
    3e34:	21300000 	teqcs	r0, r0
    3e38:	2f134900 	svccs	0x00134900
    3e3c:	3100000b 	tstcc	r0, fp
    3e40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3e44:	0b3a0e03 	bleq	e87658 <__ccfg+0xe676b0>
    3e48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e4c:	1301193c 	movwne	r1, #6460	; 0x193c
    3e50:	2e320000 	cdpcs	0, 3, cr0, cr2, cr0, {0}
    3e54:	03193f01 	tsteq	r9, #1, 30
    3e58:	3b0b3a0e 	blcc	2d2698 <__ccfg+0x2b26f0>
    3e5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e60:	01193c13 	tsteq	r9, r3, lsl ip
    3e64:	33000013 	movwcc	r0, #19
    3e68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3e6c:	0b3a0e03 	bleq	e87680 <__ccfg+0xe676d8>
    3e70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e74:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3e78:	01000000 	mrseq	r0, (UNDEF: 0)
    3e7c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3e80:	0e030b13 	vmoveq.32	d3[0], r0
    3e84:	17550e1b 	smmlane	r5, fp, lr, r0
    3e88:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3e8c:	24020000 	strcs	r0, [r2], #-0
    3e90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3e94:	000e030b 	andeq	r0, lr, fp, lsl #6
    3e98:	00160300 	andseq	r0, r6, r0, lsl #6
    3e9c:	0b3a0e03 	bleq	e876b0 <__ccfg+0xe67708>
    3ea0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3ea4:	24040000 	strcs	r0, [r4], #-0
    3ea8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3eac:	0008030b 	andeq	r0, r8, fp, lsl #6
    3eb0:	01040500 	tsteq	r4, r0, lsl #10
    3eb4:	0b3a0b0b 	bleq	e86ae8 <__ccfg+0xe66b40>
    3eb8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3ebc:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    3ec0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    3ec4:	0700000d 	streq	r0, [r0, -sp]
    3ec8:	0b0b0104 	bleq	2c42e0 <__ccfg+0x2a4338>
    3ecc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ed0:	00001301 	andeq	r1, r0, r1, lsl #6
    3ed4:	03001608 	movweq	r1, #1544	; 0x608
    3ed8:	3b0b3a0e 	blcc	2d2718 <__ccfg+0x2b2770>
    3edc:	00134905 	andseq	r4, r3, r5, lsl #18
    3ee0:	002e0900 	eoreq	r0, lr, r0, lsl #18
    3ee4:	0b3a0e03 	bleq	e876f8 <__ccfg+0xe67750>
    3ee8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3eec:	0b201349 	bleq	808c18 <__ccfg+0x7e8c70>
    3ef0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    3ef4:	03193f01 	tsteq	r9, #1, 30
    3ef8:	3b0b3a0e 	blcc	2d2738 <__ccfg+0x2b2790>
    3efc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f00:	010b2013 	tsteq	fp, r3, lsl r0
    3f04:	0b000013 	bleq	3f58 <NOROM_SetupGetTrimForAnabypassValue1+0x34>
    3f08:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3f0c:	0b3b0b3a 	bleq	ec6bfc <__ccfg+0xea6c54>
    3f10:	00001349 	andeq	r1, r0, r9, asr #6
    3f14:	3f002e0c 	svccc	0x00002e0c
    3f18:	3a0e0319 	bcc	384b84 <__ccfg+0x364bdc>
    3f1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3f20:	11134919 	tstne	r3, r9, lsl r9
    3f24:	40061201 	andmi	r1, r6, r1, lsl #4
    3f28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3f2c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3f30:	03193f01 	tsteq	r9, #1, 30
    3f34:	3b0b3a0e 	blcc	2d2774 <__ccfg+0x2b27cc>
    3f38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3f3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f40:	97184006 	ldrls	r4, [r8, -r6]
    3f44:	13011942 	movwne	r1, #6466	; 0x1942
    3f48:	340e0000 	strcc	r0, [lr], #-0
    3f4c:	3a0e0300 	bcc	384b54 <__ccfg+0x364bac>
    3f50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f54:	00170213 	andseq	r0, r7, r3, lsl r2
    3f58:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    3f5c:	01111331 	tsteq	r1, r1, lsr r3
    3f60:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f64:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3f68:	10000013 	andne	r0, r0, r3, lsl r0
    3f6c:	13310034 	teqne	r1, #52	; 0x34
    3f70:	00001702 	andeq	r1, r0, r2, lsl #14
    3f74:	11010b11 	tstne	r1, r1, lsl fp
    3f78:	00061201 	andeq	r1, r6, r1, lsl #4
    3f7c:	00341200 	eorseq	r1, r4, r0, lsl #4
    3f80:	00001331 	andeq	r1, r0, r1, lsr r3
    3f84:	31001d13 	tstcc	r0, r3, lsl sp
    3f88:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f8c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3f90:	1400000b 	strne	r0, [r0], #-11
    3f94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3f98:	0b3a0e03 	bleq	e877ac <__ccfg+0xe67804>
    3f9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fa0:	01111349 	tsteq	r1, r9, asr #6
    3fa4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3fa8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3fac:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3fb0:	00018289 	andeq	r8, r1, r9, lsl #5
    3fb4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3fb8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    3fbc:	3a0e0301 	bcc	384bc8 <__ccfg+0x364c20>
    3fc0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3fc4:	20134919 	andscs	r4, r3, r9, lsl r9
    3fc8:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fcc:	00341700 	eorseq	r1, r4, r0, lsl #14
    3fd0:	0b3a0e03 	bleq	e877e4 <__ccfg+0xe6783c>
    3fd4:	1349053b 	movtne	r0, #38203	; 0x953b
    3fd8:	34180000 	ldrcc	r0, [r8], #-0
    3fdc:	3a0e0300 	bcc	384be4 <__ccfg+0x364c3c>
    3fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fe4:	00180213 	andseq	r0, r8, r3, lsl r2
    3fe8:	001d1900 	andseq	r1, sp, r0, lsl #18
    3fec:	01521331 	cmpeq	r2, r1, lsr r3
    3ff0:	0b581755 	bleq	1609d4c <__ccfg+0x15e9da4>
    3ff4:	00000b59 	andeq	r0, r0, r9, asr fp
    3ff8:	31011d1a 	tstcc	r1, sl, lsl sp
    3ffc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    4000:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    4004:	0013010b 	andseq	r0, r3, fp, lsl #2
    4008:	010b1b00 	tsteq	fp, r0, lsl #22
    400c:	00001755 	andeq	r1, r0, r5, asr r7
    4010:	3f012e1c 	svccc	0x00012e1c
    4014:	3a0e0319 	bcc	384c80 <__ccfg+0x364cd8>
    4018:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    401c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    4020:	97184006 	ldrls	r4, [r8, -r6]
    4024:	00001942 	andeq	r1, r0, r2, asr #18
    4028:	31011d1d 	tstcc	r1, sp, lsl sp
    402c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4030:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4034:	0013010b 	andseq	r0, r3, fp, lsl #2
    4038:	011d1e00 	tsteq	sp, r0, lsl #28
    403c:	01111331 	tsteq	r1, r1, lsr r3
    4040:	0b580612 	bleq	1605890 <__ccfg+0x15e58e8>
    4044:	00000b59 	andeq	r0, r0, r9, asr fp
    4048:	01110100 	tsteq	r1, r0, lsl #2
    404c:	0b130e25 	bleq	4c78e8 <__ccfg+0x4a7940>
    4050:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    4054:	01111755 	tsteq	r1, r5, asr r7
    4058:	00001710 	andeq	r1, r0, r0, lsl r7
    405c:	0b002402 	bleq	d06c <__exidx_end+0x7754>
    4060:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4064:	0300000e 	movweq	r0, #14
    4068:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    406c:	0b3b0b3a 	bleq	ec6d5c <__ccfg+0xea6db4>
    4070:	00001349 	andeq	r1, r0, r9, asr #6
    4074:	0b002404 	bleq	d08c <__exidx_end+0x7774>
    4078:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    407c:	05000008 	streq	r0, [r0, #-8]
    4080:	0e03012e 	adfeqsp	f0, f3, #0.5
    4084:	0b3b0b3a 	bleq	ec6d74 <__ccfg+0xea6dcc>
    4088:	0b201927 	bleq	80a52c <__ccfg+0x7ea584>
    408c:	00001301 	andeq	r1, r0, r1, lsl #6
    4090:	03000506 	movweq	r0, #1286	; 0x506
    4094:	3b0b3a0e 	blcc	2d28d4 <__ccfg+0x2b292c>
    4098:	0013490b 	andseq	r4, r3, fp, lsl #18
    409c:	00340700 	eorseq	r0, r4, r0, lsl #14
    40a0:	0b3a0e03 	bleq	e878b4 <__ccfg+0xe6790c>
    40a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    40a8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    40ac:	3a0e0301 	bcc	384cb8 <__ccfg+0x364d10>
    40b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    40b4:	20134919 	andscs	r4, r3, r9, lsl r9
    40b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    40bc:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    40c0:	01111331 	tsteq	r1, r1, lsr r3
    40c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    40c8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    40cc:	0a000013 	beq	4120 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x38>
    40d0:	13310005 	teqne	r1, #5
    40d4:	00001702 	andeq	r1, r0, r2, lsl #14
    40d8:	3100340b 	tstcc	r0, fp, lsl #8
    40dc:	00170213 	andseq	r0, r7, r3, lsl r2
    40e0:	00050c00 	andeq	r0, r5, r0, lsl #24
    40e4:	0b1c1331 	bleq	708db0 <__ccfg+0x6e8e08>
    40e8:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    40ec:	11000182 	smlabbne	r0, r2, r1, r0
    40f0:	00133101 	andseq	r3, r3, r1, lsl #2
    40f4:	82890e00 	addhi	r0, r9, #0, 28
    40f8:	01110001 	tsteq	r1, r1
    40fc:	31194295 			; <UNDEFINED> instruction: 0x31194295
    4100:	0f000013 	svceq	0x00000013
    4104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4108:	0b3a0e03 	bleq	e8791c <__ccfg+0xe67974>
    410c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    4110:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4114:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4118:	00130119 	andseq	r0, r3, r9, lsl r1
    411c:	00051000 	andeq	r1, r5, r0
    4120:	0b3a0e03 	bleq	e87934 <__ccfg+0xe6798c>
    4124:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4128:	00001702 	andeq	r1, r0, r2, lsl #14
    412c:	01828911 	orreq	r8, r2, r1, lsl r9
    4130:	95011101 	strls	r1, [r1, #-257]	; 0xfffffeff
    4134:	13311942 	teqne	r1, #1081344	; 0x108000
    4138:	8a120000 	bhi	484140 <__ccfg+0x464198>
    413c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    4140:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    4144:	34130000 	ldrcc	r0, [r3], #-0
    4148:	3a0e0300 	bcc	384d50 <__ccfg+0x364da8>
    414c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4150:	00170213 	andseq	r0, r7, r3, lsl r2
    4154:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    4158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    415c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4160:	13491927 	movtne	r1, #39207	; 0x9927
    4164:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4168:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    416c:	00130119 	andseq	r0, r3, r9, lsl r1
    4170:	011d1500 	tsteq	sp, r0, lsl #10
    4174:	01111331 	tsteq	r1, r1, lsr r3
    4178:	0b580612 	bleq	16059c8 <__ccfg+0x15e5a20>
    417c:	00000b59 	andeq	r0, r0, r9, asr fp
    4180:	11010b16 	tstne	r1, r6, lsl fp
    4184:	00061201 	andeq	r1, r6, r1, lsl #4
    4188:	002e1700 	eoreq	r1, lr, r0, lsl #14
    418c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    4190:	0b3b0b3a 	bleq	ec6e80 <__ccfg+0xea6ed8>
    4194:	13491927 	movtne	r1, #39207	; 0x9927
    4198:	0000193c 	andeq	r1, r0, ip, lsr r9
    419c:	01110100 	tsteq	r1, r0, lsl #2
    41a0:	0b130e25 	bleq	4c7a3c <__ccfg+0x4a7a94>
    41a4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    41a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    41ac:	00001710 	andeq	r1, r0, r0, lsl r7
    41b0:	0b002402 	bleq	d1c0 <__exidx_end+0x78a8>
    41b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    41b8:	03000008 	movweq	r0, #8
    41bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    41c0:	0b3b0b3a 	bleq	ec6eb0 <__ccfg+0xea6f08>
    41c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    41c8:	24040000 	strcs	r0, [r4], #-0
    41cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    41d0:	000e030b 	andeq	r0, lr, fp, lsl #6
    41d4:	00160500 	andseq	r0, r6, r0, lsl #10
    41d8:	0b3a0e03 	bleq	e879ec <__ccfg+0xe67a44>
    41dc:	0b39053b 	bleq	e456d0 <__ccfg+0xe25728>
    41e0:	00001349 	andeq	r1, r0, r9, asr #6
    41e4:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    41e8:	07000013 	smladeq	r0, r3, r0, r0
    41ec:	0b0b0117 	bleq	2c4650 <__ccfg+0x2a46a8>
    41f0:	0b3b0b3a 	bleq	ec6ee0 <__ccfg+0xea6f38>
    41f4:	13010b39 	movwne	r0, #6969	; 0x1b39
    41f8:	0d080000 	stceq	0, cr0, [r8, #-0]
    41fc:	3a0e0300 	bcc	384e04 <__ccfg+0x364e5c>
    4200:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4204:	0013490b 	andseq	r4, r3, fp, lsl #18
    4208:	01010900 	tsteq	r1, r0, lsl #18
    420c:	13011349 	movwne	r1, #4937	; 0x1349
    4210:	210a0000 	mrscs	r0, (UNDEF: 10)
    4214:	2f134900 	svccs	0x00134900
    4218:	0b00000b 	bleq	424c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>
    421c:	0b0b0113 	bleq	2c4670 <__ccfg+0x2a46c8>
    4220:	0b3b0b3a 	bleq	ec6f10 <__ccfg+0xea6f68>
    4224:	13010b39 	movwne	r0, #6969	; 0x1b39
    4228:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    422c:	3a0e0300 	bcc	384e34 <__ccfg+0x364e8c>
    4230:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4234:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4238:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    423c:	0b0b000f 	bleq	2c4280 <__ccfg+0x2a42d8>
    4240:	370e0000 	strcc	r0, [lr, -r0]
    4244:	00134900 	andseq	r4, r3, r0, lsl #18
    4248:	01130f00 	tsteq	r3, r0, lsl #30
    424c:	0b0b0e03 	bleq	2c7a60 <__ccfg+0x2a7ab8>
    4250:	0b3b0b3a 	bleq	ec6f40 <__ccfg+0xea6f98>
    4254:	13010b39 	movwne	r0, #6969	; 0x1b39
    4258:	0d100000 	ldceq	0, cr0, [r0, #-0]
    425c:	3a080300 	bcc	204e64 <__ccfg+0x1e4ebc>
    4260:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4264:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4268:	1100000b 	tstne	r0, fp
    426c:	0b0b000f 	bleq	2c42b0 <__ccfg+0x2a4308>
    4270:	00001349 	andeq	r1, r0, r9, asr #6
    4274:	03011312 	movweq	r1, #4882	; 0x1312
    4278:	3a050b0e 	bcc	146eb8 <__ccfg+0x126f10>
    427c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4280:	0013010b 	andseq	r0, r3, fp, lsl #2
    4284:	000d1300 	andeq	r1, sp, r0, lsl #6
    4288:	0b3a0e03 	bleq	e87a9c <__ccfg+0xe67af4>
    428c:	0b390b3b 	bleq	e46f80 <__ccfg+0xe26fd8>
    4290:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4294:	15140000 	ldrne	r0, [r4, #-0]
    4298:	00192700 	andseq	r2, r9, r0, lsl #14
    429c:	01151500 	tsteq	r5, r0, lsl #10
    42a0:	13491927 	movtne	r1, #39207	; 0x9927
    42a4:	00001301 	andeq	r1, r0, r1, lsl #6
    42a8:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
    42ac:	17000013 	smladne	r0, r3, r0, r0
    42b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    42b4:	0b3a050b 	bleq	e856e8 <__ccfg+0xe65740>
    42b8:	0b39053b 	bleq	e457ac <__ccfg+0xe25804>
    42bc:	00001301 	andeq	r1, r0, r1, lsl #6
    42c0:	03000d18 	movweq	r0, #3352	; 0xd18
    42c4:	3b0b3a0e 	blcc	2d2b04 <__ccfg+0x2b2b5c>
    42c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42cc:	000b3813 	andeq	r3, fp, r3, lsl r8
    42d0:	000d1900 	andeq	r1, sp, r0, lsl #18
    42d4:	0b3a0e03 	bleq	e87ae8 <__ccfg+0xe67b40>
    42d8:	0b39053b 	bleq	e457cc <__ccfg+0xe25824>
    42dc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    42e0:	131a0000 	tstne	sl, #0
    42e4:	0b0e0301 	bleq	384ef0 <__ccfg+0x364f48>
    42e8:	3b0b3a0b 	blcc	2d2b1c <__ccfg+0x2b2b74>
    42ec:	010b3905 	tsteq	fp, r5, lsl #18
    42f0:	1b000013 	blne	4344 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc0>
    42f4:	0b0b0113 	bleq	2c4748 <__ccfg+0x2a47a0>
    42f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42fc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4300:	171c0000 	ldrne	r0, [ip, -r0]
    4304:	3a0b0b01 	bcc	2c6f10 <__ccfg+0x2a6f68>
    4308:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    430c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4310:	000d1d00 	andeq	r1, sp, r0, lsl #26
    4314:	0b3a0e03 	bleq	e87b28 <__ccfg+0xe67b80>
    4318:	0b39053b 	bleq	e4580c <__ccfg+0xe25864>
    431c:	00001349 	andeq	r1, r0, r9, asr #6
    4320:	2701151e 	smladcs	r1, lr, r5, r1
    4324:	00130119 	andseq	r0, r3, r9, lsl r1
    4328:	00341f00 	eorseq	r1, r4, r0, lsl #30
    432c:	0b3a0e03 	bleq	e87b40 <__ccfg+0xe67b98>
    4330:	0b39053b 	bleq	e45824 <__ccfg+0xe2587c>
    4334:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4338:	0000193c 	andeq	r1, r0, ip, lsr r9
    433c:	00002620 	andeq	r2, r0, r0, lsr #12
    4340:	00342100 	eorseq	r2, r4, r0, lsl #2
    4344:	0b3a0e03 	bleq	e87b58 <__ccfg+0xe67bb0>
    4348:	0b390b3b 	bleq	e4703c <__ccfg+0xe27094>
    434c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4350:	0000193c 	andeq	r1, r0, ip, lsr r9
    4354:	3f012e22 	svccc	0x00012e22
    4358:	3a0e0319 	bcc	384fc4 <__ccfg+0x36501c>
    435c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4360:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4364:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4368:	97184006 	ldrls	r4, [r8, -r6]
    436c:	13011942 	movwne	r1, #6466	; 0x1942
    4370:	05230000 	streq	r0, [r3, #-0]!
    4374:	3a0e0300 	bcc	384f7c <__ccfg+0x364fd4>
    4378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    437c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4380:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
    4384:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4388:	0b3b0b3a 	bleq	ec7078 <__ccfg+0xea70d0>
    438c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4390:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4394:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    4398:	08030034 	stmdaeq	r3, {r2, r4, r5}
    439c:	0b3b0b3a 	bleq	ec708c <__ccfg+0xea70e4>
    43a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43a4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    43a8:	26000017 			; <UNDEFINED> instruction: 0x26000017
    43ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    43b0:	0b3b0b3a 	bleq	ec70a0 <__ccfg+0xea70f8>
    43b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    43b8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    43bc:	00000017 	andeq	r0, r0, r7, lsl r0
    43c0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    43c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    43c8:	110e1b0e 	tstne	lr, lr, lsl #22
    43cc:	10061201 	andne	r1, r6, r1, lsl #4
    43d0:	02000017 	andeq	r0, r0, #23
    43d4:	0b0b0024 	bleq	2c446c <__ccfg+0x2a44c4>
    43d8:	0e030b3e 	vmoveq.16	d3[0], r0
    43dc:	24030000 	strcs	r0, [r3], #-0
    43e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43e4:	0008030b 	andeq	r0, r8, fp, lsl #6
    43e8:	00160400 	andseq	r0, r6, r0, lsl #8
    43ec:	0b3a0e03 	bleq	e87c00 <__ccfg+0xe67c58>
    43f0:	0b39053b 	bleq	e458e4 <__ccfg+0xe2593c>
    43f4:	00001349 	andeq	r1, r0, r9, asr #6
    43f8:	03001605 	movweq	r1, #1541	; 0x605
    43fc:	3b0b3a0e 	blcc	2d2c3c <__ccfg+0x2b2c94>
    4400:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4404:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4408:	0b0b0117 	bleq	2c486c <__ccfg+0x2a48c4>
    440c:	0b3b0b3a 	bleq	ec70fc <__ccfg+0xea7154>
    4410:	13010b39 	movwne	r0, #6969	; 0x1b39
    4414:	0d070000 	stceq	0, cr0, [r7, #-0]
    4418:	3a0e0300 	bcc	385020 <__ccfg+0x365078>
    441c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4420:	0013490b 	andseq	r4, r3, fp, lsl #18
    4424:	01010800 	tsteq	r1, r0, lsl #16
    4428:	13011349 	movwne	r1, #4937	; 0x1349
    442c:	21090000 	mrscs	r0, (UNDEF: 9)
    4430:	2f134900 	svccs	0x00134900
    4434:	0a00000b 	beq	4468 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x94>
    4438:	0b0b0113 	bleq	2c488c <__ccfg+0x2a48e4>
    443c:	0b3b0b3a 	bleq	ec712c <__ccfg+0xea7184>
    4440:	13010b39 	movwne	r0, #6969	; 0x1b39
    4444:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4448:	3a0e0300 	bcc	385050 <__ccfg+0x3650a8>
    444c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4450:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4454:	0c00000b 	stceq	0, cr0, [r0], {11}
    4458:	0b0b000f 	bleq	2c449c <__ccfg+0x2a44f4>
    445c:	130d0000 	movwne	r0, #53248	; 0xd000
    4460:	0b0e0301 	bleq	38506c <__ccfg+0x3650c4>
    4464:	3b0b3a0b 	blcc	2d2c98 <__ccfg+0x2b2cf0>
    4468:	010b390b 	tsteq	fp, fp, lsl #18
    446c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4470:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4474:	0b3b0b3a 	bleq	ec7164 <__ccfg+0xea71bc>
    4478:	13490b39 	movtne	r0, #39737	; 0x9b39
    447c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4480:	0b000f0f 	bleq	80c4 <__exidx_end+0x27ac>
    4484:	0013490b 	andseq	r4, r3, fp, lsl #18
    4488:	01131000 	tsteq	r3, r0
    448c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    4490:	0b3b0b3a 	bleq	ec7180 <__ccfg+0xea71d8>
    4494:	13010b39 	movwne	r0, #6969	; 0x1b39
    4498:	0d110000 	ldceq	0, cr0, [r1, #-0]
    449c:	3a0e0300 	bcc	3850a4 <__ccfg+0x3650fc>
    44a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    44a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    44a8:	12000005 	andne	r0, r0, #5
    44ac:	19270015 	stmdbne	r7!, {r0, r2, r4}
    44b0:	15130000 	ldrne	r0, [r3, #-0]
    44b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    44b8:	00130113 	andseq	r0, r3, r3, lsl r1
    44bc:	00051400 	andeq	r1, r5, r0, lsl #8
    44c0:	00001349 	andeq	r1, r0, r9, asr #6
    44c4:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    44c8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    44cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    44d0:	0b3a050b 	bleq	e85904 <__ccfg+0xe6595c>
    44d4:	0b39053b 	bleq	e459c8 <__ccfg+0xe25a20>
    44d8:	00001301 	andeq	r1, r0, r1, lsl #6
    44dc:	03000d17 	movweq	r0, #3351	; 0xd17
    44e0:	3b0b3a0e 	blcc	2d2d20 <__ccfg+0x2b2d78>
    44e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    44e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    44ec:	000d1800 	andeq	r1, sp, r0, lsl #16
    44f0:	0b3a0e03 	bleq	e87d04 <__ccfg+0xe67d5c>
    44f4:	0b39053b 	bleq	e459e8 <__ccfg+0xe25a40>
    44f8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    44fc:	13190000 	tstne	r9, #0
    4500:	0b0e0301 	bleq	38510c <__ccfg+0x365164>
    4504:	3b0b3a0b 	blcc	2d2d38 <__ccfg+0x2b2d90>
    4508:	010b3905 	tsteq	fp, r5, lsl #18
    450c:	1a000013 	bne	4560 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x18c>
    4510:	0b0b0113 	bleq	2c4964 <__ccfg+0x2a49bc>
    4514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4518:	13010b39 	movwne	r0, #6969	; 0x1b39
    451c:	171b0000 	ldrne	r0, [fp, -r0]
    4520:	3a0b0b01 	bcc	2c712c <__ccfg+0x2a7184>
    4524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4528:	0013010b 	andseq	r0, r3, fp, lsl #2
    452c:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4530:	0b3a0e03 	bleq	e87d44 <__ccfg+0xe67d9c>
    4534:	0b39053b 	bleq	e45a28 <__ccfg+0xe25a80>
    4538:	00001349 	andeq	r1, r0, r9, asr #6
    453c:	0300131d 	movweq	r1, #797	; 0x31d
    4540:	00193c0e 	andseq	r3, r9, lr, lsl #24
    4544:	01151e00 	tsteq	r5, r0, lsl #28
    4548:	13011927 	movwne	r1, #6439	; 0x1927
    454c:	341f0000 	ldrcc	r0, [pc], #-0	; 4554 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x180>
    4550:	3a0e0300 	bcc	385158 <__ccfg+0x3651b0>
    4554:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4558:	3f13490b 	svccc	0x0013490b
    455c:	00193c19 	andseq	r3, r9, r9, lsl ip
    4560:	00342000 	eorseq	r2, r4, r0
    4564:	0b3a0e03 	bleq	e87d78 <__ccfg+0xe67dd0>
    4568:	0b390b3b 	bleq	e4725c <__ccfg+0xe272b4>
    456c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4570:	0000193c 	andeq	r1, r0, ip, lsr r9
    4574:	3f012e21 	svccc	0x00012e21
    4578:	3a0e0319 	bcc	3851e4 <__ccfg+0x36523c>
    457c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4580:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4584:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4588:	96184006 	ldrls	r4, [r8], -r6
    458c:	13011942 	movwne	r1, #6466	; 0x1942
    4590:	34220000 	strtcc	r0, [r2], #-0
    4594:	3a0e0300 	bcc	38519c <__ccfg+0x3651f4>
    4598:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    459c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    45a0:	1742b717 	smlaldne	fp, r2, r7, r7
    45a4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    45a8:	03193f01 	tsteq	r9, #1, 30
    45ac:	3b0b3a0e 	blcc	2d2dec <__ccfg+0x2b2e44>
    45b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    45b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    45b8:	97184006 	ldrls	r4, [r8, -r6]
    45bc:	00001942 	andeq	r1, r0, r2, asr #18
    45c0:	03000524 	movweq	r0, #1316	; 0x524
    45c4:	3b0b3a0e 	blcc	2d2e04 <__ccfg+0x2b2e5c>
    45c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    45cc:	00180213 	andseq	r0, r8, r3, lsl r2
    45d0:	11010000 	mrsne	r0, (UNDEF: 1)
    45d4:	130e2501 	movwne	r2, #58625	; 0xe501
    45d8:	1b0e030b 	blne	38520c <__ccfg+0x365264>
    45dc:	0017100e 	andseq	r1, r7, lr
    45e0:	00240200 	eoreq	r0, r4, r0, lsl #4
    45e4:	0b3e0b0b 	bleq	f87218 <__ccfg+0xf67270>
    45e8:	00000803 	andeq	r0, r0, r3, lsl #16
    45ec:	0b002403 	bleq	d600 <__exidx_end+0x7ce8>
    45f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    45f4:	0400000e 	streq	r0, [r0], #-14
    45f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    45fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4600:	13490b39 	movtne	r0, #39737	; 0x9b39
    4604:	16050000 	strne	r0, [r5], -r0
    4608:	3a0e0300 	bcc	385210 <__ccfg+0x365268>
    460c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4610:	0013490b 	andseq	r4, r3, fp, lsl #18
    4614:	01170600 	tsteq	r7, r0, lsl #12
    4618:	0b3a0b0b 	bleq	e8724c <__ccfg+0xe672a4>
    461c:	0b390b3b 	bleq	e47310 <__ccfg+0xe27368>
    4620:	00001301 	andeq	r1, r0, r1, lsl #6
    4624:	03000d07 	movweq	r0, #3335	; 0xd07
    4628:	3b0b3a0e 	blcc	2d2e68 <__ccfg+0x2b2ec0>
    462c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4630:	08000013 	stmdaeq	r0, {r0, r1, r4}
    4634:	13490101 	movtne	r0, #37121	; 0x9101
    4638:	00001301 	andeq	r1, r0, r1, lsl #6
    463c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    4640:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4644:	01130a00 	tsteq	r3, r0, lsl #20
    4648:	0b3a0b0b 	bleq	e8727c <__ccfg+0xe672d4>
    464c:	0b390b3b 	bleq	e47340 <__ccfg+0xe27398>
    4650:	00001301 	andeq	r1, r0, r1, lsl #6
    4654:	03000d0b 	movweq	r0, #3339	; 0xd0b
    4658:	3b0b3a0e 	blcc	2d2e98 <__ccfg+0x2b2ef0>
    465c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4660:	000b3813 	andeq	r3, fp, r3, lsl r8
    4664:	000f0c00 	andeq	r0, pc, r0, lsl #24
    4668:	00000b0b 	andeq	r0, r0, fp, lsl #22
    466c:	0301130d 	movweq	r1, #4877	; 0x130d
    4670:	3a0b0b0e 	bcc	2c72b0 <__ccfg+0x2a7308>
    4674:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4678:	0013010b 	andseq	r0, r3, fp, lsl #2
    467c:	000d0e00 	andeq	r0, sp, r0, lsl #28
    4680:	0b3a0803 	bleq	e86694 <__ccfg+0xe666ec>
    4684:	0b390b3b 	bleq	e47378 <__ccfg+0xe273d0>
    4688:	0b381349 	bleq	e093b4 <__ccfg+0xde940c>
    468c:	0f0f0000 	svceq	0x000f0000
    4690:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4694:	10000013 	andne	r0, r0, r3, lsl r0
    4698:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    469c:	0b3a050b 	bleq	e85ad0 <__ccfg+0xe65b28>
    46a0:	0b390b3b 	bleq	e47394 <__ccfg+0xe273ec>
    46a4:	00001301 	andeq	r1, r0, r1, lsl #6
    46a8:	03000d11 	movweq	r0, #3345	; 0xd11
    46ac:	3b0b3a0e 	blcc	2d2eec <__ccfg+0x2b2f44>
    46b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    46b4:	00053813 	andeq	r3, r5, r3, lsl r8
    46b8:	00151200 	andseq	r1, r5, r0, lsl #4
    46bc:	00001927 	andeq	r1, r0, r7, lsr #18
    46c0:	27011513 	smladcs	r1, r3, r5, r1
    46c4:	01134919 	tsteq	r3, r9, lsl r9
    46c8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    46cc:	13490005 	movtne	r0, #36869	; 0x9005
    46d0:	26150000 	ldrcs	r0, [r5], -r0
    46d4:	00134900 	andseq	r4, r3, r0, lsl #18
    46d8:	01131600 	tsteq	r3, r0, lsl #12
    46dc:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    46e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46e4:	13010b39 	movwne	r0, #6969	; 0x1b39
    46e8:	0d170000 	ldceq	0, cr0, [r7, #-0]
    46ec:	3a0e0300 	bcc	3852f4 <__ccfg+0x36534c>
    46f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    46f8:	1800000b 	stmdane	r0, {r0, r1, r3}
    46fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4704:	13490b39 	movtne	r0, #39737	; 0x9b39
    4708:	00000538 	andeq	r0, r0, r8, lsr r5
    470c:	03011319 	movweq	r1, #4889	; 0x1319
    4710:	3a0b0b0e 	bcc	2c7350 <__ccfg+0x2a73a8>
    4714:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4718:	0013010b 	andseq	r0, r3, fp, lsl #2
    471c:	01131a00 	tsteq	r3, r0, lsl #20
    4720:	0b3a0b0b 	bleq	e87354 <__ccfg+0xe673ac>
    4724:	0b39053b 	bleq	e45c18 <__ccfg+0xe25c70>
    4728:	00001301 	andeq	r1, r0, r1, lsl #6
    472c:	0b01171b 	bleq	4a3a0 <__ccfg+0x2a3f8>
    4730:	3b0b3a0b 	blcc	2d2f64 <__ccfg+0x2b2fbc>
    4734:	010b3905 	tsteq	fp, r5, lsl #18
    4738:	1c000013 	stcne	0, cr0, [r0], {19}
    473c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4744:	13490b39 	movtne	r0, #39737	; 0x9b39
    4748:	131d0000 	tstne	sp, #0
    474c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4750:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    4754:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4758:	00001301 	andeq	r1, r0, r1, lsl #6
    475c:	0300341f 	movweq	r3, #1055	; 0x41f
    4760:	3b0b3a0e 	blcc	2d2fa0 <__ccfg+0x2b2ff8>
    4764:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4768:	3c193f13 	ldccc	15, cr3, [r9], {19}
    476c:	20000019 	andcs	r0, r0, r9, lsl r0
    4770:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4774:	0b3b0b3a 	bleq	ec7464 <__ccfg+0xea74bc>
    4778:	13490b39 	movtne	r0, #39737	; 0x9b39
    477c:	00001802 	andeq	r1, r0, r2, lsl #16
    4780:	47003421 	strmi	r3, [r0, -r1, lsr #8]
    4784:	00180213 	andseq	r0, r8, r3, lsl r2
    4788:	11010000 	mrsne	r0, (UNDEF: 1)
    478c:	130e2501 	movwne	r2, #58625	; 0xe501
    4790:	1b0e030b 	blne	3853c4 <__ccfg+0x36541c>
    4794:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    4798:	00171006 	andseq	r1, r7, r6
    479c:	00240200 	eoreq	r0, r4, r0, lsl #4
    47a0:	0b3e0b0b 	bleq	f873d4 <__ccfg+0xf6742c>
    47a4:	00000e03 	andeq	r0, r0, r3, lsl #28
    47a8:	0b002403 	bleq	d7bc <__exidx_end+0x7ea4>
    47ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    47b0:	04000008 	streq	r0, [r0], #-8
    47b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    47b8:	0b3b0b3a 	bleq	ec74a8 <__ccfg+0xea7500>
    47bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    47c0:	0f050000 	svceq	0x00050000
    47c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    47c8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    47cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    47d0:	13011349 	movwne	r1, #4937	; 0x1349
    47d4:	05070000 	streq	r0, [r7, #-0]
    47d8:	00134900 	andseq	r4, r3, r0, lsl #18
    47dc:	00260800 	eoreq	r0, r6, r0, lsl #16
    47e0:	34090000 	strcc	r0, [r9], #-0
    47e4:	3a0e0300 	bcc	3853ec <__ccfg+0x365444>
    47e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47ec:	3f13490b 	svccc	0x0013490b
    47f0:	00193c19 	andseq	r3, r9, r9, lsl ip
    47f4:	01040a00 	tsteq	r4, r0, lsl #20
    47f8:	0b3e0e03 	bleq	f8800c <__ccfg+0xf68064>
    47fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4800:	0b3b0b3a 	bleq	ec74f0 <__ccfg+0xea7548>
    4804:	13010b39 	movwne	r0, #6969	; 0x1b39
    4808:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    480c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    4810:	0c00000b 	stceq	0, cr0, [r0], {11}
    4814:	13490101 	movtne	r0, #37121	; 0x9101
    4818:	00001301 	andeq	r1, r0, r1, lsl #6
    481c:	0000210d 	andeq	r2, r0, sp, lsl #2
    4820:	00260e00 	eoreq	r0, r6, r0, lsl #28
    4824:	00001349 	andeq	r1, r0, r9, asr #6
    4828:	0300340f 	movweq	r3, #1039	; 0x40f
    482c:	3b0b3a0e 	blcc	2d306c <__ccfg+0x2b30c4>
    4830:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4834:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4838:	10000019 	andne	r0, r0, r9, lsl r0
    483c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4840:	0000193c 	andeq	r1, r0, ip, lsr r9
    4844:	27001511 	smladcs	r0, r1, r5, r1
    4848:	12000019 	andne	r0, r0, #25
    484c:	0e030017 	mcreq	0, 0, r0, cr3, cr7, {0}
    4850:	0000193c 	andeq	r1, r0, ip, lsr r9
    4854:	03011313 	movweq	r1, #4883	; 0x1313
    4858:	3a0b0b0e 	bcc	2c7498 <__ccfg+0x2a74f0>
    485c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4860:	0013010b 	andseq	r0, r3, fp, lsl #2
    4864:	000d1400 	andeq	r1, sp, r0, lsl #8
    4868:	0b3a0e03 	bleq	e8807c <__ccfg+0xe680d4>
    486c:	0b39053b 	bleq	e45d60 <__ccfg+0xe25db8>
    4870:	0b381349 	bleq	e0959c <__ccfg+0xde95f4>
    4874:	21150000 	tstcs	r5, r0
    4878:	2f134900 	svccs	0x00134900
    487c:	1600000b 	strne	r0, [r0], -fp
    4880:	0e030104 	adfeqs	f0, f3, f4
    4884:	0b0b0b3e 	bleq	2c7584 <__ccfg+0x2a75dc>
    4888:	0b3a1349 	bleq	e895b4 <__ccfg+0xe6960c>
    488c:	0b39053b 	bleq	e45d80 <__ccfg+0xe25dd8>
    4890:	00001301 	andeq	r1, r0, r1, lsl #6
    4894:	03000d17 	movweq	r0, #3351	; 0xd17
    4898:	3b0b3a08 	blcc	2d30c0 <__ccfg+0x2b3118>
    489c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    48a0:	000b3813 	andeq	r3, fp, r3, lsl r8
    48a4:	01171800 	tsteq	r7, r0, lsl #16
    48a8:	0b3a0b0b 	bleq	e874dc <__ccfg+0xe67534>
    48ac:	0b39053b 	bleq	e45da0 <__ccfg+0xe25df8>
    48b0:	00001301 	andeq	r1, r0, r1, lsl #6
    48b4:	03000d19 	movweq	r0, #3353	; 0xd19
    48b8:	3b0b3a08 	blcc	2d30e0 <__ccfg+0x2b3138>
    48bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    48c0:	1a000013 	bne	4914 <__aeabi_lmul+0xb0>
    48c4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    48c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    48d0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    48d4:	03193f01 	tsteq	r9, #1, 30
    48d8:	3b0b3a0e 	blcc	2d3118 <__ccfg+0x2b3170>
    48dc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    48e0:	11134919 	tstne	r3, r9, lsl r9
    48e4:	40061201 	andmi	r1, r6, r1, lsl #4
    48e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    48ec:	051c0000 	ldreq	r0, [ip, #-0]
    48f0:	3a080300 	bcc	2054f8 <__ccfg+0x1e5550>
    48f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    48fc:	1742b717 	smlaldne	fp, r2, r7, r7
    4900:	341d0000 	ldrcc	r0, [sp], #-0
    4904:	3a080300 	bcc	20550c <__ccfg+0x1e5564>
    4908:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    490c:	0013490b 	andseq	r4, r3, fp, lsl #18
    4910:	010b1e00 	tsteq	fp, r0, lsl #28
    4914:	00001755 	andeq	r1, r0, r5, asr r7
    4918:	0300341f 	movweq	r3, #1055	; 0x41f
    491c:	3b0b3a0e 	blcc	2d315c <__ccfg+0x2b31b4>
    4920:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4924:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4928:	00001742 	andeq	r1, r0, r2, asr #14
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000524 	andeq	r0, r0, r4, lsr #10
       4:	0000057c 	andeq	r0, r0, ip, ror r5
       8:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
       c:	c0000009 	andgt	r0, r0, r9
    return node->data_base.item_array[index];
      10:	01000009 	tsteq	r0, r9
      14:	09e25000 	stmibeq	r2!, {ip, lr}^
      18:	09e50000 	stmibeq	r5!, {}^	; <UNPREDICTABLE>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	00064200 	andeq	r4, r6, r0, lsl #4
      2c:	00064400 	andeq	r4, r6, r0, lsl #8
      30:	53000100 	movwpl	r0, #256	; 0x100
	...
      3c:	0000067e 	andeq	r0, r0, lr, ror r6
			i = k;
      40:	000006ac 	andeq	r0, r0, ip, lsr #13
				j->Next = k;
      44:	00550001 	subseq	r0, r5, r1
      48:	00000000 	andeq	r0, r0, r0
}
      4c:	a4000000 	strge	r0, [r0], #-0
      50:	a8000006 	stmdage	r0, {r1, r2}
      54:	01000006 	tsteq	r0, r6
		release;
      58:	00005300 	andeq	r5, r0, r0, lsl #6
      5c:	00000000 	andeq	r0, r0, r0
			nq++;
      60:	06e80000 	strbteq	r0, [r8], r0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	06f30000 	ldrbteq	r0, [r3], r0
      68:	00010000 	andeq	r0, r1, r0
      6c:	0006f350 	andeq	pc, r6, r0, asr r3	; <UNPREDICTABLE>
      70:	00070e00 	andeq	r0, r7, r0, lsl #28
      74:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
      80:	000007ae 	andeq	r0, r0, lr, lsr #15
      84:	000007c2 	andeq	r0, r0, r2, asr #15
      88:	80540001 	subshi	r0, r4, r1
      8c:	8c000009 	stchi	0, cr0, [r0], {9}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	01000009 	tsteq	r0, r9
      94:	00005400 	andeq	r5, r0, r0, lsl #8
      98:	00000000 	andeq	r0, r0, r0
	if (baction == NULL)
      9c:	098c0000 	stmibeq	ip, {}	; <UNPREDICTABLE>
      a0:	09b60000 	ldmibeq	r6!, {}	; <UNPREDICTABLE>
	(*baction) (pbutton);
      a4:	00010000 	andeq	r0, r1, r0
endthread
      a8:	00000054 	andeq	r0, r0, r4, asr r0
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	0001d000 	andeq	sp, r1, r0
endthread
      b4:	0001f200 	andeq	pc, r1, r0, lsl #4
      b8:	50000100 	andpl	r0, r0, r0, lsl #2
      bc:	000004ec 	andeq	r0, r0, ip, ror #9
      c0:	000004ef 	andeq	r0, r0, pc, ror #9
      c4:	00500001 	subseq	r0, r0, r1
fsm sender(struct ResponseMessage *message) {
      c8:	00000000 	andeq	r0, r0, r0
      cc:	da000000 	ble	d4 <sender+0xc>
      d0:	6c000001 	stcvs	0, cr0, [r0], {1}
}
      d4:	01000002 	tsteq	r0, r2
      d8:	027e5400 	rsbseq	r5, lr, #0, 8
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	02d40000 	sbcseq	r0, r4, #0
      e0:	00010000 	andeq	r0, r1, r0
      e4:	00035c54 	andeq	r5, r3, r4, asr ip
      e8:	0003a200 	andeq	sl, r3, r0, lsl #4
		packet[0] = NETWORK_ID;
      ec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	000003ac 	andeq	r0, r0, ip, lsr #7
		*p = message->tpe;p++;
      f4:	000003f4 	strdeq	r0, [r0], -r4
      f8:	1c540001 	mrrcne	0, 0, r0, r4, cr1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	fc000004 	stc2	0, cr0, [r0], {4}
		*p = message->sender_id;p++;
     100:	01000004 	tsteq	r0, r4
		*p = message->receiver_id;p++;
     104:	00005400 	andeq	r5, r0, r0, lsl #8
		switch(message->tpe) {
     108:	00000000 	andeq	r0, r0, r0
     10c:	039e0000 	orrseq	r0, lr, #0
     110:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
		tcv_endp(packet);
     114:	00020000 	andeq	r0, r2, r0
     118:	00000074 	andeq	r0, r0, r4, ror r0
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	00000000 	andeq	r0, r0, r0
     120:	039e0000 	orrseq	r0, lr, #0
}
     124:	03a20000 			; <UNDEFINED> instruction: 0x03a20000
		finish;
     128:	00020000 	andeq	r0, r2, r0
     12c:	00000274 	andeq	r0, r0, r4, ror r2
				*p = message->status;p++;
     130:	00000000 	andeq	r0, r0, r0
     134:	041a0000 	ldreq	r0, [sl], #-0
				strncpy(p, message->record, sizeof(message->record));
     138:	041c0000 	ldreq	r0, [ip], #-0
				*p = message->padding;p++;
     13c:	00010000 	andeq	r0, r1, r0
				strncpy(p, message->record, sizeof(message->record));
     140:	00000051 	andeq	r0, r0, r1, asr r0
				strncpy(p, message->record, sizeof(message->record));
     144:	00000000 	andeq	r0, r0, r0
     148:	00041400 	andeq	r1, r4, r0, lsl #8
				strncpy(p, message->record, sizeof(message->record));
     14c:	00041c00 	andeq	r1, r4, r0, lsl #24
				*p = message->record_index;p++;
     150:	03000800 	movweq	r0, #2048	; 0x800
				*p = message->padding;
     154:	20000558 	andcs	r0, r0, r8, asr r5
				break;
     158:	00072306 	andeq	r2, r7, r6, lsl #6
     15c:	00000000 	andeq	r0, r0, r0
     160:	14000000 	strne	r0, [r0], #-0
     164:	1c000004 	stcne	0, cr0, [r0], {4}
     168:	08000004 	stmdaeq	r0, {r2}
bool init_node(struct Node* node){
     16c:	05580300 	ldrbeq	r0, [r8, #-768]	; 0xfffffd00
    node->id  = 0;                  // default id value 0
     170:	23062000 	movwcs	r2, #24576	; 0x6000
    node->index = 0;                // default entry count 0
     174:	00000005 	andeq	r0, r0, r5
    node->data_base.item_count = 0; // default no items in array
     178:	00000000 	andeq	r0, r0, r0
    DEBUG_PRINT("Error initializing node...\n");
     17c:	0003ee00 	andeq	lr, r3, r0, lsl #28
     180:	0003fa00 	andeq	pc, r3, r0, lsl #20
};
     184:	53000100 	movwpl	r0, #256	; 0x100
     188:	000003fa 	strdeq	r0, [r0], -sl
uint8_t generate_request_num(void){
     18c:	00000408 	andeq	r0, r0, r8, lsl #8
    return (uint8_t) (rand() % 255);
     190:	58030008 	stmdapl	r3, {r3}
     194:	06200005 	strteq	r0, [r0], -r5
     198:	00000823 	andeq	r0, r0, r3, lsr #16
}
     19c:	00000000 	andeq	r0, r0, r0
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	03ee0000 	mvneq	r0, #0
     1a4:	03f40000 	mvnseq	r0, #0
     1a8:	00010000 	andeq	r0, r1, r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	00000054 	andeq	r0, r0, r4, asr r0
};
     1b0:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	0000c800 	andeq	ip, r0, r0, lsl #16
     1b8:	0000d900 	andeq	sp, r0, r0, lsl #18
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	50000100 	andpl	r0, r0, r0, lsl #2
     1c0:	000000da 	ldrdeq	r0, [r0], -sl
     1c4:	000000eb 	andeq	r0, r0, fp, ror #1
        node->data_base.item_count -= 1;
     1c8:	00500001 	subseq	r0, r0, r1
};
     1cc:	00000000 	andeq	r0, r0, r0
fsm receiver(struct Node* node_db) {
     1d0:	dc000000 	stcle	0, cr0, [r0], {-0}
     1d4:	e0000000 	and	r0, r0, r0
     1d8:	05000000 	streq	r0, [r0, #-0]
     1dc:	06007300 	streq	r7, [r0], -r0, lsl #6
     1e0:	00000823 	andeq	r0, r0, r3, lsr #16
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	01400000 	mrseq	r0, (UNDEF: 64)
     1ec:	01420000 	mrseq	r0, (UNDEF: 66)
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	00010000 	andeq	r0, r1, r0
     1f4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     204:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		switch (tpe){
     210:	000004fc 	strdeq	r0, [r0], -ip
     214:	0000051c 	andeq	r0, r0, ip, lsl r5
     218:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
     21c:	20000005 	andcs	r0, r0, r5
     220:	01000005 	tsteq	r0, r5
     224:	00005000 	andeq	r5, r0, r0
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	00000000 	andeq	r0, r0, r0
     22c:	050a0000 	streq	r0, [sl, #-0]
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	050c0000 	streq	r0, [ip, #-0]
     234:	00010000 	andeq	r0, r1, r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	00051453 	andeq	r1, r5, r3, asr r4
     23c:	00051c00 	andeq	r1, r5, r0, lsl #24
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	53000100 	movwpl	r0, #256	; 0x100
	...
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     24c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
				if (discovery_request_message->gid == node_db->gid){
     250:	000001ce 	andeq	r0, r0, lr, asr #3
     254:	00500001 	subseq	r0, r0, r1
					response_message_0->gid = discovery_request_message->gid;
     258:	00000000 	andeq	r0, r0, r0
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	b4000000 	strlt	r0, [r0], #-0
					response_message_0->request_number = discovery_request_message->request_number;
     260:	c0000001 	andgt	r0, r0, r1
					response_message_0->sender_id = node_db->id;
     264:	01000001 	tsteq	r0, r1
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	00005100 	andeq	r5, r0, r0, lsl #2
					call sender(response_message_0, done_case);
     26c:	00000000 	andeq	r0, r0, r0
     270:	019e0000 	orrseq	r0, lr, r0
     274:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     278:	00010000 	andeq	r0, r1, r0
     27c:	00000050 	andeq	r0, r0, r0, asr r0
	...
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     28c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	00500001 	subseq	r0, r0, r1
     2a4:	00000000 	andeq	r0, r0, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	6c000000 	stcvs	0, cr0, [r0], {-0}
     2ac:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
     2b0:	01000001 	tsteq	r0, r1
     2b4:	00005000 	andeq	r5, r0, r0
	...
     2c4:	00010000 	andeq	r0, r1, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	00000050 	andeq	r0, r0, r0, asr r0
	...
		tcv_endp(incoming_packet);
     2d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ec:	00500001 	subseq	r0, r0, r1
	...
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2fc:	01000000 	mrseq	r0, (UNDEF: 0)
     300:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	00010000 	andeq	r0, r1, r0
     314:	00000052 	andeq	r0, r0, r2, asr r0
	...
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	00510001 	subseq	r0, r1, r1
	...
		proceed receiving;
     348:	01000000 	mrseq	r0, (UNDEF: 0)
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	00010000 	andeq	r0, r1, r0
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	00000053 	andeq	r0, r0, r3, asr r0
	...
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     370:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     37c:	00001268 	andeq	r1, r0, r8, ror #4
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	00001268 	andeq	r1, r0, r8, ror #4
     384:	00500001 	subseq	r0, r0, r1
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	00000000 	andeq	r0, r0, r0
     38c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	fa000010 	blx	3d8 <receiver+0x208>
     394:	01000010 	tsteq	r0, r0, lsl r0
     398:	112a5600 			; <UNDEFINED> instruction: 0x112a5600
     39c:	112e0000 			; <UNDEFINED> instruction: 0x112e0000
		strncpy(response_message->record, rec, 20);
     3a0:	00010000 	andeq	r0, r1, r0
     3a4:	00000056 	andeq	r0, r0, r6, asr r0
					call sender(response_message_4, done_case);
     3a8:	00000000 	andeq	r0, r0, r0
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	000fde00 	andeq	sp, pc, r0, lsl #28
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b0:	000fe200 	andeq	lr, pc, r0, lsl #4
     3b4:	52000100 	andpl	r0, r0, #0, 2
     3b8:	00000ff8 	strdeq	r0, [r0], -r8
     3bc:	0000100c 	andeq	r1, r0, ip
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	00520001 	subseq	r0, r2, r1
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	e6000000 	str	r0, [r0], -r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	ec00000f 	stc	0, cr0, [r0], {15}
     3d0:	0100000f 	tsteq	r0, pc
     3d4:	00005300 	andeq	r5, r0, r0, lsl #6
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	0f9c0000 	svceq	0x009c0000
     3e0:	0fa60000 	svceq	0x00a60000
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	00010000 	andeq	r0, r1, r0
     3e8:	00000053 	andeq	r0, r0, r3, asr r0
     3ec:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
     3f0:	000f9c00 	andeq	r9, pc, r0, lsl #24
     3f4:	000fa200 	andeq	sl, pc, r0, lsl #4
     3f8:	53000100 	movwpl	r0, #256	; 0x100
	...
     404:	00001032 	andeq	r1, r0, r2, lsr r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	0000103c 	andeq	r1, r0, ip, lsr r0
     40c:	00530001 	subseq	r0, r3, r1
     410:	00000000 	andeq	r0, r0, r0
		strncpy(response_message->record, rec, 20);
     414:	24000000 	strcs	r0, [r0], #-0
     418:	4e000010 	mcrmi	0, 0, r0, cr0, cr0, {0}
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	01000010 	tsteq	r0, r0, lsl r0
     420:	00005200 	andeq	r5, r0, r0, lsl #4
     424:	00000000 	andeq	r0, r0, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	10720000 	rsbsne	r0, r2, r0
     42c:	107c0000 	rsbsne	r0, ip, r0
     430:	00010000 	andeq	r0, r1, r0
     434:	00000053 	andeq	r0, r0, r3, asr r0
				if(!response_flag){
     438:	00000000 	andeq	r0, r0, r0
     43c:	00106400 	andseq	r6, r0, r0, lsl #8
					response_flag=1;
     440:	00109a00 	andseq	r9, r0, r0, lsl #20
					trigger(&response_flag);
     444:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				switch(response_message_5->status){
     450:	00000f0a 	andeq	r0, r0, sl, lsl #30
     454:	00000f14 	andeq	r0, r0, r4, lsl pc
     458:	00530001 	subseq	r0, r3, r1
     45c:	00000000 	andeq	r0, r0, r0
     460:	fc000000 	stc2	0, cr0, [r0], {-0}
     464:	2600000e 	strcs	r0, [r0], -lr
     468:	0100000f 	tsteq	r0, pc
     46c:	00005200 	andeq	r5, r0, r0, lsl #4
     470:	00000000 	andeq	r0, r0, r0
     474:	0f5c0000 	svceq	0x005c0000
     478:	0f660000 	svceq	0x00660000
     47c:	00010000 	andeq	r0, r1, r0
     480:	00000053 	andeq	r0, r0, r3, asr r0
     484:	00000000 	andeq	r0, r0, r0
     488:	000f4e00 	andeq	r4, pc, r0, lsl #28
     48c:	000f7600 	andeq	r7, pc, r0, lsl #12
     490:	52000100 	andpl	r0, r0, #0, 2
	...
     49c:	00000a30 	andeq	r0, r0, r0, lsr sl
     4a0:	00000a34 	andeq	r0, r0, r4, lsr sl
     4a4:	34500001 	ldrbcc	r0, [r0], #-1
     4a8:	3700000a 	strcc	r0, [r0, -sl]
						if (response_checker[0] == response_message_5->request_number){
     4ac:	0100000a 	tsteq	r0, sl
     4b0:	00005100 	andeq	r5, r0, r0, lsl #2
     4b4:	00000000 	andeq	r0, r0, r0
							switch(response_checker[1]){
     4b8:	0dbc0000 	ldceq	0, cr0, [ip]
     4bc:	0dbe0000 	ldceq	0, cr0, [lr]
     4c0:	00010000 	andeq	r0, r1, r0
     4c4:	00000050 	andeq	r0, r0, r0, asr r0
									proceed response_1_create;
     4c8:	00000000 	andeq	r0, r0, r0
						proceed response_2;
     4cc:	000dbc00 	andeq	fp, sp, r0, lsl #24
									proceed response_1_delete;
     4d0:	000dd200 	andeq	sp, sp, r0, lsl #4
									proceed response_1_retrieve;
     4d4:	51000100 	mrspl	r0, (UNDEF: 16)
						proceed response_2;
     4d8:	00000dd2 	ldrdeq	r0, [r0], -r2
						proceed response_3;
     4dc:	00000dd6 	ldrdeq	r0, [r0], -r6
						proceed response_4;
     4e0:	dc550001 	mrrcle	0, 0, r0, r5, cr1
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	f200000d 	vhadd.s8	d0, d0, d13
     4e8:	0100000d 	tsteq	r0, sp
}
     4ec:	0df25500 	cfldr64eq	mvdx5, [r2]
     4f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4f4:	00010000 	andeq	r0, r1, r0
     4f8:	000e0051 	andeq	r0, lr, r1, asr r0
bool delete_all(struct Node *node){
     4fc:	000e2e00 	andeq	r2, lr, r0, lsl #28
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	00000e34 	andeq	r0, r0, r4, lsr lr
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	00000e5c 	andeq	r0, r0, ip, asr lr
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	5c550001 	mrrcpl	0, 0, r0, r5, cr1
            node->data_base.item_array[i].timestamp = 0;
     510:	6a00000e 	bvs	550 <root+0x2c>
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	0100000e 	tsteq	r0, lr
    node->data_base.item_count = 0;
     518:	0e6a5100 	poweqe	f5, f2, f0
}
     51c:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
        return true;
     520:	00010000 	andeq	r0, r1, r0
fsm root {
     524:	000e7455 	andeq	r7, lr, r5, asr r4
     528:	000e7f00 	andeq	r7, lr, r0, lsl #30
     52c:	51000100 	mrspl	r0, (UNDEF: 16)
     530:	00000e7f 	andeq	r0, r0, pc, ror lr
     534:	00000e82 	andeq	r0, r0, r2, lsl #29
     538:	82550001 	subshi	r0, r5, #1
     53c:	8800000e 	stmdahi	r0, {r1, r2, r3}
     540:	0100000e 	tsteq	r0, lr
     544:	0e885100 	rmfeqe	f5, f0, f0
     548:	0e9a0000 	cdpeq	0, 9, cr0, cr10, cr0, {0}
     54c:	00010000 	andeq	r0, r1, r0
     550:	000e9a55 	andeq	r9, lr, r5, asr sl
     554:	000eac00 	andeq	sl, lr, r0, lsl #24
     558:	51000100 	mrspl	r0, (UNDEF: 16)
     55c:	00000eac 	andeq	r0, r0, ip, lsr #29
     560:	00000ecc 	andeq	r0, r0, ip, asr #29
     564:	00550001 	subseq	r0, r5, r1
     568:	00000000 	andeq	r0, r0, r0
     56c:	bc000000 	stclt	0, cr0, [r0], {-0}
     570:	d200000d 	andle	r0, r0, #13
     574:	0100000d 	tsteq	r0, sp
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	0dd25200 	lfmeq	f5, 2, [r2]
     57c:	0dd80000 	ldcleq	0, cr0, [r8]
     580:	00010000 	andeq	r0, r1, r0
		init_node(node_db);
     584:	000ddc56 	andeq	sp, sp, r6, asr ip
		phys_cc1350(0, MAX_PKT_LEN);
     588:	000dec00 	andeq	lr, sp, r0, lsl #24
     58c:	56000100 	strpl	r0, [r0], -r0, lsl #2
		tcv_plug (0, &plug_null);
     590:	00000df2 	strdeq	r0, [r0], -r2
     594:	00000e00 	andeq	r0, r0, r0, lsl #28
		sfd = tcv_open (WNONE, 0, 0);
     598:	00520001 	subseq	r0, r2, r1
     59c:	3000000e 	andcc	r0, r0, lr
     5a0:	0100000e 	tsteq	r0, lr
     5a4:	0e345600 	cfmsuba32eq	mvax0, mvax5, mvfx4, mvfx0
     5a8:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
			diag("Cannot open tcv interface");
     5ac:	00010000 	andeq	r0, r1, r0
     5b0:	000e5c56 	andeq	r5, lr, r6, asr ip
			halt();
     5b4:	000e6a00 	andeq	r6, lr, r0, lsl #20
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b8:	52000100 	andpl	r0, r0, #0, 2
     5bc:	00000e6a 	andeq	r0, r0, sl, ror #28
		runfsm receiver(node_db);
     5c0:	00000e74 	andeq	r0, r0, r4, ror lr
     5c4:	74560001 	ldrbvc	r0, [r6], #-1
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	7f00000e 	svcvc	0x0000000e
     5cc:	0100000e 	tsteq	r0, lr
     5d0:	0e825200 	cdpeq	2, 8, cr5, cr2, cr0, {0}
     5d4:	0e8d0000 	cdpeq	0, 8, cr0, cr13, cr0, {0}
     5d8:	00010000 	andeq	r0, r1, r0
     5dc:	000e8d52 	andeq	r8, lr, r2, asr sp
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	000e9a00 	andeq	r9, lr, r0, lsl #20
     5e4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     5e8:	00000e9a 	muleq	r0, sl, lr
		switch(CHOICE) {
     5ec:	00000ecc 	andeq	r0, r0, ip, asr #29
     5f0:	00520001 	subseq	r0, r2, r1
     5f4:	00000000 	andeq	r0, r0, r0
     5f8:	30000000 	andcc	r0, r0, r0
     5fc:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
     600:	0100000d 	tsteq	r0, sp
     604:	00005000 	andeq	r5, r0, r0
     608:	00000000 	andeq	r0, r0, r0
     60c:	0d300000 	ldceq	0, cr0, [r0, #-0]
     610:	0d3f0000 	ldceq	0, cr0, [pc, #-0]	; 618 <root+0xf4>
     614:	00010000 	andeq	r0, r1, r0
     618:	00000051 	andeq	r0, r0, r1, asr r0
				proceed menu;
     61c:	00000000 	andeq	r0, r0, r0
     620:	000ce000 	andeq	lr, ip, r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	000cf700 	andeq	pc, ip, r0, lsl #14
     628:	50000100 	andpl	r0, r0, r0, lsl #2
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	00000d1a 	andeq	r0, r0, sl, lsl sp
     630:	00000d30 	andeq	r0, r0, r0, lsr sp
     634:	00500001 	subseq	r0, r0, r1
		DEBUG_PRINT("setting node group ID");
     638:	00000000 	andeq	r0, r0, r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	d6000000 	strle	r0, [r0], -r0
     640:	e600000b 	str	r0, [r0], -fp
		proceed menu;
     644:	0100000b 	tsteq	r0, fp
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	0be65200 	bleq	ff994e50 <_estack+0xdf98fe50>
     64c:	0bee0000 	bleq	ffb80654 <_estack+0xdfb7b654>
		if(node_db->id < 1 || node_db->id > 25){
     650:	00050000 	andeq	r0, r5, r0
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     658:	000c8840 	andeq	r8, ip, r0, asr #16
		if(node_db->id < 1 || node_db->id > 25){
     65c:	000c8c00 	andeq	r8, ip, r0, lsl #24
     660:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     664:	40092004 	andmi	r2, r9, r4
			strncpy(reason, "Out of Range", 50);
     668:	00000c8c 	andeq	r0, r0, ip, lsl #25
     66c:	00000c8e 	andeq	r0, r0, lr, lsl #25
			proceed invalid_node_id;
     670:	8e520001 	cdphi	0, 5, cr0, cr2, cr1, {0}
     674:	9000000c 	andls	r0, r0, ip
				strncpy(reason, "ID is already in use", 50);
     678:	0500000c 	streq	r0, [r0, #-12]
     67c:	20040c00 	andcs	r0, r4, r0, lsl #24
			if(node_db->id == node_db->nnodes[i]){
     680:	00004009 	andeq	r4, r0, r9
     684:	00000000 	andeq	r0, r0, r0
     688:	0bf00000 	bleq	ffc00690 <_estack+0xdfbfb690>
				strncpy(reason, "ID is already in use", 50);
     68c:	0bfa0000 	bleq	ffe80694 <_estack+0xdfe7b694>
     690:	00010000 	andeq	r0, r1, r0
     694:	000bfe52 	andeq	pc, fp, r2, asr lr	; <UNPREDICTABLE>
				proceed invalid_node_id;
     698:	000c0800 	andeq	r0, ip, r0, lsl #16
		for(int i = 0; i < 25; i++){
     69c:	52000100 	andpl	r0, r0, #0, 2
     6a0:	00000c0c 	andeq	r0, r0, ip, lsl #24
		proceed menu;
     6a4:	00000c16 	andeq	r0, r0, r6, lsl ip
     6a8:	1a520001 	bne	14806b4 <__ccfg+0x146070c>
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	2600000c 	strcs	r0, [r0], -ip
     6b0:	0100000c 	tsteq	r0, ip
     6b4:	0cb25200 	lfmeq	f5, 4, [r2]
     6b8:	0cb60000 	ldceq	0, cr0, [r6]
		proceed get_new_node_id;
     6bc:	00010000 	andeq	r0, r1, r0
     6c0:	00000052 	andeq	r0, r0, r2, asr r0
		if (!clear_node_neighbour_array(node_db)){
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	000b7600 	andeq	r7, fp, r0, lsl #12
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	000b8800 	andeq	r8, fp, r0, lsl #16
     6d0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	00000b10 	andeq	r0, r0, r0, lsl fp
     6e0:	00000b18 	andeq	r0, r0, r8, lsl fp
		request_packet->gid = node_db->gid;
     6e4:	00500001 	subseq	r0, r0, r1
     6e8:	00000000 	andeq	r0, r0, r0
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	10000000 	andne	r0, r0, r0
		request_packet->request_number = generate_request_num();
     6f0:	1600000b 	strne	r0, [r0], -fp
     6f4:	0100000b 	tsteq	r0, fp
		call sender(request_packet, wait_discovery);
     6f8:	0b165100 	bleq	594b00 <__ccfg+0x574b58>
     6fc:	0b1b0000 	bleq	6c0704 <__ccfg+0x6a075c>
		request_packet->receiver_id=0;
     700:	00010000 	andeq	r0, r1, r0
		call sender(request_packet, wait_discovery);
     704:	00000052 	andeq	r0, r0, r2, asr r0
	...
				proceed get_new_node_id;
     714:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				proceed display_db;
     728:	00510001 	subseq	r0, r1, r1
				proceed del_local;
     72c:	00000000 	andeq	r0, r0, r0
		if (discovery_wait_flag == 0){
     730:	01000000 	mrseq	r0, (UNDEF: 0)
			discovery_wait_flag=1;
     734:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		if (discovery_wait_flag == 1){
     744:	00010000 	andeq	r0, r1, r0
			discovery_wait_flag=0;
     748:	00000052 	andeq	r0, r0, r2, asr r0
     74c:	00000000 	andeq	r0, r0, r0
			delay(3000, display_neighbour_nodes);
     750:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     75c:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     760:	00000adb 	ldrdeq	r0, [r0], -fp
     764:	db500001 	blle	1400770 <__ccfg+0x13e07c8>
     768:	0400000a 	streq	r0, [r0], #-10
     76c:	0100000b 	tsteq	r0, fp
     770:	00005400 	andeq	r5, r0, r0, lsl #8
     774:	00000000 	andeq	r0, r0, r0
     778:	0a940000 	beq	fe500780 <_estack+0xde4fb780>
     77c:	0aac0000 	beq	feb00784 <_estack+0xdeafb784>
     780:	00010000 	andeq	r0, r1, r0
     784:	000aac50 	andeq	sl, sl, r0, asr ip
     788:	000ac400 	andeq	ip, sl, r0, lsl #8
     78c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     798:	00000a68 	andeq	r0, r0, r8, ror #20
     79c:	00000a6e 	andeq	r0, r0, lr, ror #20
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	00500001 	subseq	r0, r0, r1
	...
			if (node_db->nnodes[i]=='\0') break;
     7b0:	01000000 	mrseq	r0, (UNDEF: 0)
     7b4:	00005000 	andeq	r5, r0, r0
     7b8:	00000000 	andeq	r0, r0, r0
		proceed menu;
     7bc:	1b4c0000 	blne	13007c4 <__ccfg+0x12e081c>
     7c0:	1b6a0000 	blne	1a807c8 <__ccfg+0x1a60820>
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c4:	00020000 	andeq	r0, r2, r0
     7c8:	1b6a7091 	blne	1a9ca14 <__ccfg+0x1a7ca6c>
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	1b920000 	blne	fe4807d4 <_estack+0xde47b7d4>
     7d0:	00010000 	andeq	r0, r1, r0
			strncpy(reason, "Error: improper ID", 50);
     7d4:	001b9654 	andseq	r9, fp, r4, asr r6
     7d8:	001b9e00 	andseq	r9, fp, r0, lsl #28
     7dc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			proceed error;
     7e0:	00001bac 	andeq	r1, r0, ip, lsr #23
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	00001bf6 	strdeq	r1, [r0], -r6
     7e8:	fa560001 	blx	15807f4 <__ccfg+0x156084c>
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	7200001b 	andvc	r0, r0, #27
     7f0:	0100001c 	tsteq	r0, ip, lsl r0
     7f4:	00005600 	andeq	r5, r0, r0, lsl #12
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	00000000 	andeq	r0, r0, r0
		create_message->tpe = CREATE_RECORD;
     7fc:	1bb60000 	blne	fed80804 <_estack+0xded7b804>
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	1bf40000 	blne	ffd00808 <_estack+0xdfcfb808>
		create_message->gid = node_db->gid;
     804:	00010000 	andeq	r0, r1, r0
		create_message->tpe = CREATE_RECORD;
     808:	001bfa51 	andseq	pc, fp, r1, asr sl	; <UNPREDICTABLE>
		create_message->request_number = generate_request_num();
     80c:	001c0c00 	andseq	r0, ip, r0, lsl #24
     810:	51000100 	mrspl	r0, (UNDEF: 16)
		create_message->sender_id = node_db->id;
     814:	00001c18 	andeq	r1, r0, r8, lsl ip
     818:	00001c22 	andeq	r1, r0, r2, lsr #24
     81c:	34510001 	ldrbcc	r0, [r1], #-1
		strncpy(create_message->record, user_provided_record, 20);
     820:	3800001c 	stmdacc	r0, {r2, r3, r4}
     824:	0100001c 	tsteq	r0, ip, lsl r0
     828:	1c585100 	ldfnee	f5, [r8], {-0}
		response_checker[0] = create_message->request_number;
     82c:	1c5c0000 	mrane	r0, ip, acc0
		call sender(&create_message, wait);
     830:	00010000 	andeq	r0, r1, r0
		response_checker[1] = create_message->tpe;
     834:	00000051 	andeq	r0, r0, r1, asr r0
     838:	00000000 	andeq	r0, r0, r0
		call sender(&create_message, wait);
     83c:	001bb600 	andseq	fp, fp, r0, lsl #12
     840:	001bf400 	andseq	pc, fp, r0, lsl #8
     844:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     848:	00001bfa 	strdeq	r1, [r0], -sl
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	00001c22 	andeq	r1, r0, r2, lsr #24
     850:	34550001 	ldrbcc	r0, [r5], #-1
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	3800001c 	stmdacc	r0, {r2, r3, r4}
     858:	0100001c 	tsteq	r0, ip, lsl r0
			strncpy(reason, "Error: improper node ID", 50);
     85c:	1c585500 	cfldr64ne	mvdx5, [r8], {-0}
     860:	1c720000 	ldclne	0, cr0, [r2], #-0
     864:	00010000 	andeq	r0, r1, r0
			proceed error;
     868:	00000055 	andeq	r0, r0, r5, asr r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	00000000 	andeq	r0, r0, r0
     870:	001c2800 	andseq	r2, ip, r0, lsl #16
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	001c3400 	andseq	r3, ip, r0, lsl #8
     878:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     87c:	00001c38 	andeq	r1, r0, r8, lsr ip
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	00001c52 	andeq	r1, r0, r2, asr ip
		delete_record->tpe = DELETE_RECORD;
     884:	56550001 	ldrbpl	r0, [r5], -r1
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	5800001c 	stmdapl	r0, {r2, r3, r4}
		delete_record->gid = node_db->gid;
     88c:	0100001c 	tsteq	r0, ip, lsl r0
		delete_record->tpe = DELETE_RECORD;
     890:	00005500 	andeq	r5, r0, r0, lsl #10
		delete_record->request_number = generate_request_num();
     894:	00000000 	andeq	r0, r0, r0
     898:	1bdc0000 	blne	ff7008a0 <_estack+0xdf6fb8a0>
		delete_record->sender_id = node_db->id;
     89c:	1bf40000 	blne	ffd008a4 <_estack+0xdfcfb8a4>
     8a0:	00010000 	andeq	r0, r1, r0
     8a4:	00000054 	andeq	r0, r0, r4, asr r0
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	00000000 	andeq	r0, r0, r0
		response_checker[0] = delete_record->request_number;
     8ac:	001c2200 	andseq	r2, ip, r0, lsl #4
     8b0:	001c3400 	andseq	r3, ip, r0, lsl #8
		call sender(&delete_record, wait);
     8b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     8b8:	00001c38 	andeq	r1, r0, r8, lsr ip
     8bc:	00001c4c 	andeq	r1, r0, ip, asr #24
     8c0:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
     8c4:	5800001c 	stmdapl	r0, {r2, r3, r4}
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	0100001c 	tsteq	r0, ip, lsl r0
     8cc:	00005300 	andeq	r5, r0, r0, lsl #6
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	1c640000 	stclne	0, cr0, [r4], #-0
     8d8:	1c720000 	ldclne	0, cr0, [r2], #-0
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	00010000 	andeq	r0, r1, r0
     8e0:	00000051 	andeq	r0, r0, r1, asr r0
			proceed error;
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	00163000 	andseq	r3, r6, r0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	00163c00 	andseq	r3, r6, r0, lsl #24
     8f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		retrieve_record->gid = node_db->gid;
     904:	00500001 	subseq	r0, r0, r1
     908:	00000000 	andeq	r0, r0, r0
     90c:	01000000 	mrseq	r0, (UNDEF: 0)
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	00005000 	andeq	r5, r0, r0
	...
		response_checker[0] = retrieve_record->request_number;
     920:	00010000 	andeq	r0, r1, r0
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	00000051 	andeq	r0, r0, r1, asr r0
		retrieve_record->record_index = user_provided_index;
     928:	00000000 	andeq	r0, r0, r0
		call sender(&retrieve_record, wait);
     92c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     940:	00520001 	subseq	r0, r2, r1
     944:	00000000 	andeq	r0, r0, r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	01000000 	mrseq	r0, (UNDEF: 0)
     94c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		proceed menu;
     95c:	00010000 	andeq	r0, r1, r0
		delete_all(node_db);
     960:	00000053 	andeq	r0, r0, r3, asr r0
     964:	00000000 	andeq	r0, r0, r0
		proceed menu;
     968:	53000100 	movwpl	r0, #256	; 0x100
	...
		delay(3000, timeout);
     974:	00530001 	subseq	r0, r3, r1
	...
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     984:	01000000 	mrseq	r0, (UNDEF: 0)
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	00005000 	andeq	r5, r0, r0
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	00000000 	andeq	r0, r0, r0
     990:	1b340000 	blne	d00998 <__ccfg+0xce09f0>
     994:	1b3c0000 	blne	f0099c <__ccfg+0xee09f4>
     998:	00010000 	andeq	r0, r1, r0
     99c:	00000050 	andeq	r0, r0, r0, asr r0
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	001a5800 	andseq	r5, sl, r0, lsl #16
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	001a5e00 	andseq	r5, sl, r0, lsl #28
     9ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	00001a6e 	andeq	r1, r0, lr, ror #20
     9bc:	00001a9a 	muleq	r0, sl, sl
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	9a540001 	bls	15009cc <__ccfg+0x14e0a24>
     9c4:	a000001a 	andge	r0, r0, sl, lsl r0
		proceed menu;
     9c8:	0100001a 	tsteq	r0, sl, lsl r0
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	1aa05200 	bne	fe8151d4 <_estack+0xde8101d4>
     9d0:	1ae80000 	bne	ffa009d8 <_estack+0xdf9fb9d8>
     9d4:	00010000 	andeq	r0, r1, r0
		proceed menu;
     9d8:	001ae854 	andseq	lr, sl, r4, asr r8
}
     9dc:	001b0000 	andseq	r0, fp, r0
     9e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9ec:	00001a9a 	muleq	r0, sl, sl
     9f0:	00001a9e 	muleq	r0, lr, sl
     9f4:	9e540001 	cdpls	0, 5, cr0, cr4, cr1, {0}
     9f8:	a000001a 	andge	r0, r0, sl, lsl r0
     9fc:	0100001a 	tsteq	r0, sl, lsl r0
     a00:	1ab65300 	bne	fed95608 <_estack+0xded90608>
     a04:	1abf0000 	bne	fefc0a0c <_estack+0xdefbba0c>
     a08:	00010000 	andeq	r0, r1, r0
     a0c:	00000050 	andeq	r0, r0, r0, asr r0
     a10:	00000000 	andeq	r0, r0, r0
     a14:	001aa800 	andseq	sl, sl, r0, lsl #16
     a18:	001ab800 	andseq	fp, sl, r0, lsl #16
     a1c:	53000100 	movwpl	r0, #256	; 0x100
	...
     a28:	00001a6e 	andeq	r1, r0, lr, ror #20
     a2c:	00001a8c 	andeq	r1, r0, ip, lsl #21
static void devinit_uart (int devnum) {
     a30:	92500001 	subsls	r0, r0, #1
	adddevfunc (ioreq_uart_a, devnum);
     a34:	b200001a 	andlt	r0, r0, #26
     a38:	0100001a 	tsteq	r0, sl, lsl r0
void udelay (volatile word n) {
     a3c:	1ab25000 	bne	fec94a44 <_estack+0xdec8fa44>
     a40:	1abc0000 	bne	fef00a48 <_estack+0xdeefba48>
	while (n) {
     a44:	00020000 	andeq	r0, r2, r0
     a48:	00007c74 	andeq	r7, r0, r4, ror ip
}
     a4c:	00000000 	andeq	r0, r0, r0
	while (n--);
     a50:	15b00000 	ldrne	r0, [r0, #0]!
     a54:	15de0000 	ldrbne	r0, [lr]
     a58:	00010000 	andeq	r0, r1, r0
		n--;
     a5c:	0015ec50 	andseq	lr, r5, r0, asr ip
     a60:	00163000 	andseq	r3, r6, r0
     a64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (n) {
     a70:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
     a74:	000015c4 	andeq	r1, r0, r4, asr #11
}
     a78:	c4530001 	ldrbgt	r0, [r3], #-1
		udelay (999);
     a7c:	c6000015 			; <UNDEFINED> instruction: 0xc6000015
     a80:	02000015 	andeq	r0, r0, #21
		n--;
     a84:	ca007000 	bgt	1ca8c <__exidx_end+0x17174>
     a88:	22000015 	andcs	r0, r0, #21
     a8c:	01000016 	tsteq	r0, r6, lsl r0
     a90:	16225300 	strtne	r5, [r2], -r0, lsl #6
void __pi_ondomain (lword d) {
     a94:	16260000 	strtne	r0, [r6], -r0
     a98:	00020000 	andeq	r0, r2, r0
		if (__pi_systat.effpdm > 1)
     a9c:	16260073 			; <UNDEFINED> instruction: 0x16260073
     aa0:	16300000 	ldrtne	r0, [r0], -r0
			__pi_systat.effpdm = 1;
     aa4:	00010000 	andeq	r0, r1, r0
	PRCMPowerDomainOn (d);
     aa8:	00000053 	andeq	r0, r0, r3, asr r0
     aac:	00000000 	andeq	r0, r0, r0
     ab0:	0015b800 	andseq	fp, r5, r0, lsl #16
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	0015ba00 	andseq	fp, r5, r0, lsl #20
     ab8:	52000100 	andpl	r0, r0, #0, 2
     abc:	000015ca 	andeq	r1, r0, sl, asr #11
	__pi_systat.ondmns |= d;
     ac0:	0000160a 	andeq	r1, r0, sl, lsl #12
     ac4:	22520001 	subscs	r0, r2, #1
}
     ac8:	26000016 			; <UNDEFINED> instruction: 0x26000016
     acc:	01000016 	tsteq	r0, r6, lsl r0
void __pi_offdomain (lword d) {
     ad0:	16265300 	strtne	r5, [r6], -r0, lsl #6
     ad4:	16300000 	ldrtne	r0, [r0], -r0
	PRCMPowerDomainOff (d);
     ad8:	00010000 	andeq	r0, r1, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	00000052 	andeq	r0, r0, r2, asr r0
     ae0:	00000000 	andeq	r0, r0, r0
     ae4:	00198000 	andseq	r8, r9, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	00198800 	andseq	r8, r9, r0, lsl #16
     aec:	51000100 	mrspl	r0, (UNDEF: 16)
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	0000198c 	andeq	r1, r0, ip, lsl #19
     af4:	0000198e 	andeq	r1, r0, lr, lsl #19
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	00510001 	subseq	r0, r1, r1
     afc:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns &= ~d;
     b00:	d4000000 	strle	r0, [r0], #-0
     b04:	f0000018 			; <UNDEFINED> instruction: 0xf0000018
}
     b08:	01000018 	tsteq	r0, r8, lsl r0
     b0c:	18f65000 	ldmne	r6!, {ip, lr}^
void __pi_syserror (word ec, const char *m) {
     b10:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
	diag ("SYSERR: %x, %s", ec, m);
     b14:	00010000 	andeq	r0, r1, r0
     b18:	00000050 	andeq	r0, r0, r0, asr r0
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	00000000 	andeq	r0, r0, r0
     b20:	0018d400 	andseq	sp, r8, r0, lsl #8
     b24:	0018f200 	andseq	pc, r8, r0, lsl #4
     b28:	51000100 	mrspl	r0, (UNDEF: 16)
		all_leds_blink;
     b2c:	000018f6 	strdeq	r1, [r0], -r6
     b30:	00001900 	andeq	r1, r0, r0, lsl #18
     b34:	00510001 	subseq	r0, r1, r1
     b38:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	d4000000 	strle	r0, [r0], #-0
     b40:	f5000018 			; <UNDEFINED> instruction: 0xf5000018
     b44:	01000018 	tsteq	r0, r8, lsl r0
     b48:	18f65200 	ldmne	r6!, {r9, ip, lr}^
     b4c:	18fe0000 	ldmne	lr!, {}^	; <UNPREDICTABLE>
     b50:	00010000 	andeq	r0, r1, r0
	while (1) {
     b54:	00000052 	andeq	r0, r0, r2, asr r0
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	0018d400 	andseq	sp, r8, r0, lsl #8
     b60:	0018ec00 	andseq	lr, r8, r0, lsl #24
void tci_run_delay_timer () {
     b64:	53000100 	movwpl	r0, #256	; 0x100
	setdel = __pi_mintk - __pi_old;
     b68:	000018ec 	andeq	r1, r0, ip, ror #17
     b6c:	00001970 	andeq	r1, r0, r0, ror r9
     b70:	00550001 	subseq	r0, r5, r1
     b74:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b78:	d4000000 	strle	r0, [r0], #-0
     b7c:	54000018 	strpl	r0, [r0], #-24	; 0xffffffe8
     b80:	02000019 	andeq	r0, r0, #25
     b84:	54009100 	strpl	r9, [r0], #-256	; 0xffffff00
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	70000019 	andvc	r0, r0, r9, lsl r0
	sti_tim;
     b8c:	02000019 	andeq	r0, r0, #25
}
     b90:	00009100 	andeq	r9, r0, r0, lsl #2
     b94:	00000000 	andeq	r0, r0, r0
     b98:	04000000 	streq	r0, [r0], #-0
     b9c:	1a000019 	bne	c08 <AONRTCIntHandler+0x3c>
     ba0:	01000019 	tsteq	r0, r9, lsl r0
	cli_aux;
     ba4:	19225000 	stmdbne	r2!, {ip, lr}
     ba8:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	00010000 	andeq	r0, r1, r0
     bb0:	00194450 	andseq	r4, r9, r0, asr r4
     bb4:	00194c00 	andseq	r4, r9, r0, lsl #24
     bb8:	50000100 	andpl	r0, r0, r0, lsl #2
	sti_aux;
     bbc:	00001954 	andeq	r1, r0, r4, asr r9
}
     bc0:	0000195c 	andeq	r1, r0, ip, asr r9
     bc4:	00500001 	subseq	r0, r0, r1
     bc8:	00000000 	andeq	r0, r0, r0
void AONRTCIntHandler () {
     bcc:	b0000000 	andlt	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	b6000018 			; <UNDEFINED> instruction: 0xb6000018
     bd4:	01000018 	tsteq	r0, r8, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	18bc5000 	ldmne	ip!, {ip, lr}
		if (__pi_utims [0] == 0)
     bdc:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
     be0:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [0])) {
     be4:	0018c850 	andseq	ip, r8, r0, asr r8
     be8:	0018d400 	andseq	sp, r8, r0, lsl #8
			(*(__pi_utims [0]))--;
     bec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			aux_timer_inactive = 0;
     bf8:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
			(*(__pi_utims [1]))--;
     bfc:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
		if (__pi_utims [2] == 0)
     c00:	bc510001 	mrrclt	0, 0, r0, r1, cr1
		if (*(__pi_utims [2])) {
     c04:	c6000018 			; <UNDEFINED> instruction: 0xc6000018
			(*(__pi_utims [2]))--;
     c08:	01000018 	tsteq	r0, r8, lsl r0
		if (__pi_utims [3] != 0) {
     c0c:	18c85100 	stmiane	r8, {r8, ip, lr}^
			if (*(__pi_utims [3])) {
     c10:	18d40000 	ldmne	r4, {}^	; <UNPREDICTABLE>
				aux_timer_inactive = 0;
     c14:	00010000 	andeq	r0, r1, r0
				(*(__pi_utims [3]))--;
     c18:	00000051 	andeq	r0, r0, r1, asr r0
	if (__pi_systat.ledsts) {
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	0018a200 	andseq	sl, r8, r0, lsl #4
		if (__pi_systat.ledblc++ == 0) {
     c24:	0018aa00 	andseq	sl, r8, r0, lsl #20
     c28:	50000100 	andpl	r0, r0, r0, lsl #2
			if (__pi_systat.ledblk) {
     c2c:	000018ae 	andeq	r1, r0, lr, lsr #17
     c30:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     c34:	00500001 	subseq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	a2000000 	andge	r0, r0, #0
				if (__pi_systat.ledsts & 0x2)
     c40:	a4000018 	strge	r0, [r0], #-24	; 0xffffffe8
     c44:	01000018 	tsteq	r0, r8, lsl r0
     c48:	00005200 	andeq	r5, r0, r0, lsl #4
				if (__pi_systat.ledsts & 0x4)
     c4c:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 0;
     c50:	188e0000 	stmne	lr, {}	; <UNPREDICTABLE>
     c54:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
			if (__pi_systat.fstblk)
     c58:	00010000 	andeq	r0, r1, r0
     c5c:	00000050 	andeq	r0, r0, r0, asr r0
				__pi_systat.ledblc = 200;
     c60:	00000000 	andeq	r0, r0, r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	00188e00 	andseq	r8, r8, r0, lsl #28
		cli_tim;
     c68:	00189800 	andseq	r9, r8, r0, lsl #16
		__pi_new += setdel;
     c6c:	51000100 	mrspl	r0, (UNDEF: 16)
     c70:	0000189c 	muleq	r0, ip, r8
		setdel = 0;
     c74:	000018a2 	andeq	r1, r0, r2, lsr #17
		RISE_N_SHINE;
     c78:	00510001 	subseq	r0, r1, r1
		__pi_new += setdel;
     c7c:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     c80:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     c84:	92000018 	andls	r0, r0, #24
		aux_timer_inactive = 1;
     c88:	01000018 	tsteq	r0, r8, lsl r0
     c8c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
				if (__pi_systat.ledsts & 0x2)
     c9c:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ca0:	00000050 	andeq	r0, r0, r0, asr r0
	...
				__pi_systat.ledblk = 1;
     cb0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			cli_aux;
     cc4:	00500001 	subseq	r0, r0, r1
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	01000000 	mrseq	r0, (UNDEF: 0)
     cd0:	00005000 	andeq	r5, r0, r0
	...
word tci_update_delay_ticks (Boolean force) {
     ce0:	00010000 	andeq	r0, r1, r0
	cli_tim;
     ce4:	00000051 	andeq	r0, r0, r1, asr r0
     ce8:	00000000 	andeq	r0, r0, r0
	if (setdel) {
     cec:	00187200 	andseq	r7, r8, r0, lsl #4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	00188800 	andseq	r8, r8, r0, lsl #16
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	50000100 	andpl	r0, r0, r0, lsl #2
     cf8:	0000188c 	andeq	r1, r0, ip, lsl #17
     cfc:	0000188e 	andeq	r1, r0, lr, lsl #17
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	00500001 	subseq	r0, r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	00000000 	andeq	r0, r0, r0
	return NO;
     d08:	72000000 	andvc	r0, r0, #0
			setdel = 0;
     d0c:	74000018 	strvc	r0, [r0], #-24	; 0xffffffe8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	01000018 	tsteq	r0, r8, lsl r0
     d14:	00005100 	andeq	r5, r0, r0, lsl #2
}
     d18:	00000000 	andeq	r0, r0, r0
		sti_tim;
     d1c:	18720000 	ldmdane	r2!, {}^	; <UNPREDICTABLE>
		return YES;
     d20:	18760000 	ldmdane	r6!, {}^	; <UNPREDICTABLE>
     d24:	00010000 	andeq	r0, r1, r0
     d28:	00000052 	andeq	r0, r0, r2, asr r0
     d2c:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	00186200 	andseq	r6, r8, r0, lsl #4
	UARTDisable (UART0_BASE);
     d34:	00186400 	andseq	r6, r8, r0, lsl #8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTConfigSetExpClk (UART0_BASE,
     d44:	00001862 	andeq	r1, r0, r2, ror #16
     d48:	00001864 	andeq	r1, r0, r4, ror #16
     d4c:	68510001 	ldmdavs	r1, {r0}^
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	72000018 	andvc	r0, r0, #24
     d54:	01000018 	tsteq	r0, r8, lsl r0
     d58:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
     d64:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
	urates [0] = rate;
     d68:	00010000 	andeq	r0, r1, r0
}
     d6c:	00185850 	andseq	r5, r8, r0, asr r8
     d70:	00186200 	andseq	r6, r8, r0, lsl #4
     d74:	53000100 	movwpl	r0, #256	; 0x100
	...
     d80:	00001858 	andeq	r1, r0, r8, asr r8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	00001862 	andeq	r1, r0, r2, ror #16
     d88:	00500001 	subseq	r0, r0, r1
	...
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d98:	01000000 	mrseq	r0, (UNDEF: 0)
     d9c:	00005000 	andeq	r5, r0, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	00000000 	andeq	r0, r0, r0
     da4:	00010000 	andeq	r0, r1, r0
     da8:	00000051 	andeq	r0, r0, r1, asr r0
	...
     db8:	52000100 	andpl	r0, r0, #0, 2
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc4:	00520001 	subseq	r0, r2, r1
	...
				*buf++ = uart_a_read;
     dd4:	01000000 	mrseq	r0, (UNDEF: 0)
     dd8:	00005000 	andeq	r5, r0, r0
			while (len && uart_a_char_available) {
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
     de4:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
			if (len != operation) {
     de8:	00010000 	andeq	r0, r1, r0
}
     dec:	00183a50 	andseq	r3, r8, r0, asr sl
     df0:	00183e00 	andseq	r3, r8, r0, lsl #28
			uart_a_disable_int;
     df4:	50000100 	andpl	r0, r0, r0, lsl #2
			if (uart_a_char_available) {
     df8:	0000183e 	andeq	r1, r0, lr, lsr r8
				*buf++ = uart_a_read;
     dfc:	00001854 	andeq	r1, r0, r4, asr r8
			uart_a_disable_int;
     e00:	00530001 	subseq	r0, r3, r1
	...
				uart_a_enable_int;
     e10:	01000000 	mrseq	r0, (UNDEF: 0)
     e14:	00005000 	andeq	r5, r0, r0
				goto Redo_rx;
     e18:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	00010000 	andeq	r0, r1, r0
     e20:	00000050 	andeq	r0, r0, r0, asr r0
	...
				uart_a_write (*buf);
     e30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (len && uart_a_room_in_tx) {
     e3c:	00500001 	subseq	r0, r0, r1
	...
			if (uart_a_room_in_tx) {
     e4c:	01000000 	mrseq	r0, (UNDEF: 0)
     e50:	00005000 	andeq	r5, r0, r0
				uart_a_enable_int;
     e54:	00000000 	andeq	r0, r0, r0
     e58:	00010000 	andeq	r0, r1, r0
				*buf++ = uart_a_read;
     e5c:	00000057 	andeq	r0, r0, r7, asr r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			return 0;
     e80:	00500001 	subseq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     e84:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
     e88:	01000000 	mrseq	r0, (UNDEF: 0)
     e8c:	00005000 	andeq	r5, r0, r0
     e90:	00000000 	andeq	r0, r0, r0
				syserror (EREQPAR, "uar");
     e94:	00010000 	andeq	r0, r1, r0
			syserror (ENOOPER, "uai");
     e98:	00000058 	andeq	r0, r0, r8, asr r0
			if (len == UART_CNTRL_GETRATE) {
     e9c:	00000000 	andeq	r0, r0, r0
				return 1;
     ea0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (ENOOPER, "uai");
     eb4:	00540001 	subseq	r0, r4, r1
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	01000000 	mrseq	r0, (UNDEF: 0)
     ec0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
void UART0IntHandler () {
     ed0:	00010000 	andeq	r0, r1, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	00000058 	andeq	r0, r0, r8, asr r0
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	58000100 	stmdapl	r0, {r8}
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	00001a08 	andeq	r1, r0, r8, lsl #20
     eec:	00001a10 	andeq	r1, r0, r0, lsl sl
		RISE_N_SHINE;
     ef0:	10500001 	subsne	r0, r0, r1
     ef4:	1a00001a 	bne	f64 <UART0IntHandler+0x98>
		i_trigger (devevent (UART_A, READ));
     ef8:	0100001a 	tsteq	r0, sl, lsl r0
     efc:	1a205000 	bne	814f04 <__ccfg+0x7f4f5c>
     f00:	1a2c0000 	bne	b00f08 <__ccfg+0xae0f60>
     f04:	00010000 	andeq	r0, r1, r0
     f08:	001a4050 	andseq	r4, sl, r0, asr r0
     f0c:	001a4a00 	andseq	r4, sl, r0, lsl #20
     f10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f1c:	00001a16 	andeq	r1, r0, r6, lsl sl
     f20:	00001a48 	andeq	r1, r0, r8, asr #20
     f24:	48540001 	ldmdami	r4, {r0}^
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	4a00001a 	bmi	f98 <__buttons_setirq+0xc>
     f2c:	0100001a 	tsteq	r0, sl, lsl r0
     f30:	1a4a5200 	bne	1295738 <__ccfg+0x1275790>
		i_trigger (devevent (UART_A, WRITE));
     f34:	1a4c0000 	bne	1300f3c <__ccfg+0x12e0f94>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	00010000 	andeq	r0, r1, r0
     f3c:	00000054 	andeq	r0, r0, r4, asr r0
		RISE_N_SHINE;
     f40:	00000000 	andeq	r0, r0, r0
     f44:	00157a00 	andseq	r7, r5, r0, lsl #20
     f48:	0015ac00 	andseq	sl, r5, r0, lsl #24
		i_trigger (devevent (UART_A, WRITE));
     f4c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     f58:	00001590 	muleq	r0, r0, r5
     f5c:	0000159a 	muleq	r0, sl, r5
     f60:	00530001 	subseq	r0, r3, r1
	...
     f70:	01000000 	mrseq	r0, (UNDEF: 0)
     f74:	00005000 	andeq	r5, r0, r0
}
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	00010000 	andeq	r0, r1, r0
     f80:	00000054 	andeq	r0, r0, r4, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f9c:	00500001 	subseq	r0, r0, r1
     fa0:	00000000 	andeq	r0, r0, r0
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	11000017 	tstne	r0, r7, lsl r0
     fac:	01000018 	tsteq	r0, r8, lsl r0
     fb0:	00005000 	andeq	r5, r0, r0
     fb4:	00000000 	andeq	r0, r0, r0
     fb8:	17f80000 	ldrbne	r0, [r8, r0]!
     fbc:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
}
     fc0:	00010000 	andeq	r0, r1, r0
     fc4:	00000051 	andeq	r0, r0, r1, asr r0
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	0017d400 	andseq	sp, r7, r0, lsl #8
void __pinlist_setirq (int val) {
     fd0:	0017e800 	andseq	lr, r7, r0, lsl #16
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	50000100 	andpl	r0, r0, r0, lsl #2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	000017e8 	andeq	r1, r0, r8, ror #15
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	000017ec 	andeq	r1, r0, ip, ror #15
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	f8000017 			; <UNDEFINED> instruction: 0xf8000017
     fe8:	01000017 	tsteq	r0, r7, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	00005000 	andeq	r5, r0, r0
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	17d40000 	ldrbne	r0, [r4, r0]
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	17eb0000 	strbne	r0, [fp, r0]!
}
     ffc:	00010000 	andeq	r0, r1, r0
    1000:	0017f051 	andseq	pc, r7, r1, asr r0	; <UNPREDICTABLE>
    1004:	0017f800 	andseq	pc, r7, r0, lsl #16
    1008:	51000100 	mrspl	r0, (UNDEF: 16)
	...
if (buttons_int) {
    1014:	000017dc 	ldrdeq	r1, [r0], -ip
	buttons_disable ();
    1018:	000017eb 	andeq	r1, r0, fp, ror #15
    101c:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
	i_trigger ((aword)&__button_list);
    1020:	f8000017 			; <UNDEFINED> instruction: 0xf8000017
    1024:	01000017 	tsteq	r0, r7, lsl r0
    1028:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1038:	00010000 	andeq	r0, r1, r0
    103c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	RISE_N_SHINE;
    104c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
if (pin_sensor_int) {
    1058:	00550001 	subseq	r0, r5, r1
	...
	i_trigger ((aword)(&__input_pins));
    1068:	01000000 	mrseq	r0, (UNDEF: 0)
    106c:	00005200 	andeq	r5, r0, r0, lsl #4
    1070:	00000000 	andeq	r0, r0, r0
    1074:	00010000 	andeq	r0, r1, r0
    1078:	00000052 	andeq	r0, r0, r2, asr r0
    107c:	00000000 	andeq	r0, r0, r0
    1080:	0017b400 	andseq	fp, r7, r0, lsl #8
    1084:	0017be00 	andseq	fp, r7, r0, lsl #28
    1088:	53000100 	movwpl	r0, #256	; 0x100
	...
	RISE_N_SHINE;
    1094:	00001758 	andeq	r1, r0, r8, asr r7
    1098:	0000175e 	andeq	r1, r0, lr, asr r7
}
    109c:	00500001 	subseq	r0, r0, r1
	...
    10a8:	0600001b 			; <UNDEFINED> instruction: 0x0600001b
    10ac:	0100001b 	tsteq	r0, fp, lsl r0
void system_init () {
    10b0:	1b065000 	blne	1950b8 <__ccfg+0x175110>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	1b340000 	blne	d010bc <__ccfg+0xce1114>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	00000055 	andeq	r0, r0, r5, asr r0
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	001b0000 	andseq	r0, fp, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c8:	001b0b00 	andseq	r0, fp, r0, lsl #22
    10cc:	51000100 	mrspl	r0, (UNDEF: 16)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	00001b0b 	andeq	r1, r0, fp, lsl #22
    10d4:	00001b34 	andeq	r1, r0, r4, lsr fp
    10d8:	00540001 	subseq	r0, r4, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	1c000000 	stcne	0, cr0, [r0], {-0}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	2000001b 	andcs	r0, r0, fp, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e8:	0100001b 	tsteq	r0, fp, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ec:	1b225300 	blne	895cf4 <__ccfg+0x875d4c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	1b260000 	blne	9810f8 <__ccfg+0x961150>
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	00010000 	andeq	r0, r1, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	001b2653 	andseq	r2, fp, r3, asr r6
		pin = (port_confs [i] >> 19) & 0x1f;
    10fc:	001b3400 	andseq	r3, fp, r0, lsl #8
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	52000100 	andpl	r0, r0, #0, 2
	...
    110c:	00001684 	andeq	r1, r0, r4, lsl #13
		if (port_confs [i] & 0x80)
    1110:	00001689 	andeq	r1, r0, r9, lsl #13
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1114:	00500001 	subseq	r0, r0, r1
    1118:	00000000 	andeq	r0, r0, r0
		if (port_confs [i] & 0x40)
    111c:	84000000 	strhi	r0, [r0], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	89000016 	stmdbhi	r0, {r1, r2, r4}
    1124:	01000016 	tsteq	r0, r6, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1138:	00010000 	andeq	r0, r1, r0
	all_leds_blink;
    113c:	00000050 	andeq	r0, r0, r0, asr r0
    1140:	00000000 	andeq	r0, r0, r0
    1144:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1158:	00530001 	subseq	r0, r3, r1
    115c:	00000000 	andeq	r0, r0, r0
    1160:	01000000 	mrseq	r0, (UNDEF: 0)
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	00005300 	andeq	r5, r0, r0, lsl #6
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	00000000 	andeq	r0, r0, r0
    116c:	16580000 	ldrbne	r0, [r8], -r0
	IntEnable (INT_AON_RTC_COMB);
    1170:	16600000 	strbtne	r0, [r0], -r0
    1174:	00010000 	andeq	r0, r1, r0
    1178:	00166050 	andseq	r6, r6, r0, asr r0
	__pi_malloc_init ();
    117c:	00167300 	andseq	r7, r6, r0, lsl #6
	IntEnable (INT_AON_GPIO_EDGE);
    1180:	53000100 	movwpl	r0, #256	; 0x100
    1184:	00001674 	andeq	r1, r0, r4, ror r6
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	00001684 	andeq	r1, r0, r4, lsl #13
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	00530001 	subseq	r0, r3, r1
    1190:	00000000 	andeq	r0, r0, r0
    1194:	62000000 	andvs	r0, r0, #0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	73000016 	movwvc	r0, #22
    119c:	01000016 	tsteq	r0, r6, lsl r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	16745000 	ldrbtne	r5, [r4], -r0
    11a4:	16840000 	strne	r0, [r4], r0
    11a8:	00010000 	andeq	r0, r1, r0
	urates [0] = UART_RATE / 100;
    11ac:	00000050 	andeq	r0, r0, r0, asr r0
	...
	EXTRA_INITIALIZERS;
    11bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    11c8:	00530001 	subseq	r0, r3, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	00000000 	andeq	r0, r0, r0
    11d0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e4:	00010000 	andeq	r0, r1, r0
    11e8:	00000050 	andeq	r0, r0, r0, asr r0
	IntEnable (INT_UART0_COMB);
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	00530001 	subseq	r0, r3, r1
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	00000000 	andeq	r0, r0, r0
		diag ("Leftover RAM: %d bytes",
    120c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1210:	92000016 	andls	r0, r0, #22
    1214:	01000016 	tsteq	r0, r6, lsl r0
    1218:	00005000 	andeq	r5, r0, r0
    121c:	00000000 	andeq	r0, r0, r0
    1220:	168c0000 	strne	r0, [ip], r0
    1224:	16950000 	ldrne	r0, [r5], r0
    1228:	00010000 	andeq	r0, r1, r0
    122c:	00000051 	andeq	r0, r0, r1, asr r0
    1230:	00000000 	andeq	r0, r0, r0
    1234:	00169a00 	andseq	r9, r6, r0, lsl #20
    1238:	0016d800 	andseq	sp, r6, r0, lsl #16
    123c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1240:	000016dc 	ldrdeq	r1, [r0], -ip
    1244:	0000172a 	andeq	r1, r0, sl, lsr #14
    1248:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    124c:	36000017 			; <UNDEFINED> instruction: 0x36000017
    1250:	01000017 	tsteq	r0, r7, lsl r0
    1254:	00005400 	andeq	r5, r0, r0, lsl #8
    1258:	00000000 	andeq	r0, r0, r0
    125c:	16d20000 	ldrbne	r0, [r2], r0
    1260:	16d40000 	ldrbne	r0, [r4], r0
    1264:	00010000 	andeq	r0, r1, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	0016dc50 	andseq	sp, r6, r0, asr ip
    126c:	00172c00 	andseq	r2, r7, r0, lsl #24
    1270:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    127c:	0000176c 	andeq	r1, r0, ip, ror #14
    1280:	00001780 	andeq	r1, r0, r0, lsl #15
    1284:	86500001 	ldrbhi	r0, [r0], -r1
}
    1288:	a0000017 	andge	r0, r0, r7, lsl r0
__attribute__ ((noreturn)) void __pi_release () {
    128c:	01000017 	tsteq	r0, r7, lsl r0
    1290:	00005000 	andeq	r5, r0, r0
    1294:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	176c0000 	strbne	r0, [ip, -r0]!
	check_stack_overflow;
    129c:	17820000 	strne	r0, [r2, r0]
    12a0:	00010000 	andeq	r0, r1, r0
    12a4:	00178651 	andseq	r8, r7, r1, asr r6
	update_n_wake (MAX_WORD, NO);
    12a8:	00178c00 	andseq	r8, r7, r0, lsl #24
    12ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	for_all_tasks (__pi_curr) {
    12b8:	0000177e 	andeq	r1, r0, lr, ror r7
    12bc:	00001780 	andeq	r1, r0, r0, lsl #15
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	00500001 	subseq	r0, r0, r1
	__SLEEP;
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    12cc:	82000017 	andhi	r0, r0, #23
    12d0:	01000017 	tsteq	r0, r7, lsl r0
	system_event_count ++;
    12d4:	00005100 	andeq	r5, r0, r0, lsl #2
    12d8:	00000000 	andeq	r0, r0, r0
	switch (__pi_systat.effpdm) {
    12dc:	19c00000 	stmibne	r0, {}^	; <UNPREDICTABLE>
    12e0:	19ce0000 	stmibne	lr, {}^	; <UNPREDICTABLE>
    12e4:	00010000 	andeq	r0, r1, r0
    12e8:	0019d450 	andseq	sp, r9, r0, asr r4
			__WFI ();
    12ec:	0019e700 	andseq	lr, r9, r0, lsl #14
    12f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	check_stack_overflow;
    12fc:	000019cc 	andeq	r1, r0, ip, asr #19
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	000019ce 	andeq	r1, r0, lr, asr #19
    1304:	00500001 	subseq	r0, r0, r1
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	01000000 	mrseq	r0, (UNDEF: 0)
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	00005000 	andeq	r5, r0, r0
    131c:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	00010000 	andeq	r0, r1, r0
    1324:	00000050 	andeq	r0, r0, r0, asr r0
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    1348:	00540001 	subseq	r0, r4, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	00000000 	andeq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	00005000 	andeq	r5, r0, r0
	...
    1364:	00010000 	andeq	r0, r1, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1370:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	00750002 	rsbseq	r0, r5, r2
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1388:	000022e4 	andeq	r2, r0, r4, ror #5
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    138c:	00002304 	andeq	r2, r0, r4, lsl #6
    1390:	0a500001 	beq	140139c <__ccfg+0x13e13f4>
    1394:	0b000023 	bleq	1428 <__pi_release+0x19c>
    1398:	01000023 	tsteq	r0, r3, lsr #32
			SysCtrlSetRechargeBeforePowerDown
    139c:	00005000 	andeq	r5, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a4:	22ee0000 	rsccs	r0, lr, #0
    13a8:	23140000 	tstcs	r4, #0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	00010000 	andeq	r0, r1, r0
    13b0:	00231454 	eoreq	r1, r3, r4, asr r4
    13b4:	00231700 	eoreq	r1, r3, r0, lsl #14
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c8:	000022c0 	andeq	r2, r0, r0, asr #5
    13cc:	c6500001 	ldrbgt	r0, [r0], -r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	ce000022 	cdpgt	0, 0, cr0, cr0, cr2, {1}
			while (!(AONWUCPowerStatusGet () &
    13d4:	01000022 	tsteq	r0, r2, lsr #32
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	00005000 	andeq	r5, r0, r0
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	22cc0000 	sbccs	r0, ip, #0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	22d80000 	sbcscs	r0, r8, #0
    13e8:	00010000 	andeq	r0, r1, r0
    13ec:	00000053 	andeq	r0, r0, r3, asr r0
    13f0:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	0022ce00 	eoreq	ip, r2, r0, lsl #28
    13f8:	0022d400 	eoreq	sp, r2, r0, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1400:	000022d4 	ldrdeq	r2, [r0], -r4
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	000022d8 	ldrdeq	r2, [r0], -r8
			reinit_uart ();
    1408:	00730002 	rsbseq	r0, r3, r2
	...
}
    1414:	00002270 	andeq	r2, r0, r0, ror r2
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1418:	00002280 	andeq	r2, r0, r0, lsl #5
    141c:	86500001 	ldrbhi	r0, [r0], -r1
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	8e000022 	cdphi	0, 0, cr0, cr0, cr2, {1}
    1424:	01000022 	tsteq	r0, r2, lsr #32
    1428:	00005000 	andeq	r5, r0, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	00000000 	andeq	r0, r0, r0
    1430:	22700000 	rsbscs	r0, r0, #0
    1434:	22820000 	addcs	r0, r2, #0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	00010000 	andeq	r0, r1, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	00228651 	eoreq	r8, r2, r1, asr r6
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	0022b000 	eoreq	fp, r2, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1450:	0000228c 	andeq	r2, r0, ip, lsl #5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1454:	00002294 	muleq	r0, r4, r2
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1458:	9e530001 	cdpls	0, 5, cr0, cr3, cr1, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145c:	b0000022 	andlt	r0, r0, r2, lsr #32
    1460:	01000022 	tsteq	r0, r2, lsr #32
			PRCMPowerDomainOff (
    1464:	00005300 	andeq	r5, r0, r0, lsl #6
    1468:	00000000 	andeq	r0, r0, r0
	__SLEEP;
    146c:	228e0000 	addcs	r0, lr, #0
    1470:	229c0000 	addscs	r0, ip, #0
  __ASM volatile ("cpsie i" : : : "memory");
    1474:	00010000 	andeq	r0, r1, r0
	goto Redo;
    1478:	00229e50 	eoreq	r9, r2, r0, asr lr
    147c:	0022a000 	eoreq	sl, r2, r0
    1480:	50000100 	andpl	r0, r0, r0, lsl #2
    1484:	000022a0 	andeq	r2, r0, r0, lsr #5
    1488:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    148c:	00730002 	rsbseq	r0, r3, r2
	...
    1498:	000021d4 	ldrdeq	r2, [r0], -r4
    149c:	000021ee 	andeq	r2, r0, lr, ror #3
    14a0:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    14a4:	f4000021 	vst4.8	{d0-d3}, [r0 :128], r1
    14a8:	01000021 	tsteq	r0, r1, lsr #32
    14ac:	21f45500 	mvnscs	r5, r0, lsl #10
    14b0:	21fe0000 	mvnscs	r0, r0
    14b4:	00010000 	andeq	r0, r1, r0
    14b8:	0021fe50 	eoreq	pc, r1, r0, asr lr	; <UNPREDICTABLE>
    14bc:	00227000 	eoreq	r7, r2, r0
    14c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    14cc:	000021d4 	ldrdeq	r2, [r0], -r4
    14d0:	000021ee 	andeq	r2, r0, lr, ror #3
    14d4:	ee510001 	cdp	0, 5, cr0, cr1, cr1, {0}
    14d8:	f4000021 	vst4.8	{d0-d3}, [r0 :128], r1
    14dc:	01000021 	tsteq	r0, r1, lsr #32
    14e0:	21f45700 	mvnscs	r5, r0, lsl #14
	cli_tim;
    14e4:	21fe0000 	mvnscs	r0, r0
    14e8:	00010000 	andeq	r0, r1, r0
    14ec:	0021fe51 	eoreq	pc, r1, r1, asr lr	; <UNPREDICTABLE>
	diag ("PicOS halted");
    14f0:	00227000 	eoreq	r7, r2, r0
	mdelay (500);
    14f4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	__PCB = NULL;
    1500:	000021d4 	ldrdeq	r2, [r0], -r4
	release;
    1504:	000021ee 	andeq	r2, r0, lr, ror #3
    1508:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    150c:	f4000021 	vst4.8	{d0-d3}, [r0 :128], r1
    1510:	01000021 	tsteq	r0, r1, lsr #32
int main (void) {
    1514:	21f45400 	mvnscs	r5, r0, lsl #8
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	21fe0000 	mvnscs	r0, r0
    151c:	00010000 	andeq	r0, r1, r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	0021fe52 	eoreq	pc, r1, r2, asr lr	; <UNPREDICTABLE>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	00227000 	eoreq	r7, r2, r0
	system_init ();
    1528:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1534:	0000222e 	andeq	r2, r0, lr, lsr #4
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	00002246 	andeq	r2, r0, r6, asr #4
    153c:	46500001 	ldrbmi	r0, [r0], -r1
    1540:	4b000022 	blmi	15d0 <qfree+0x20>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1544:	01000022 	tsteq	r0, r2, lsr #32
    1548:	00005100 	andeq	r5, r0, r0, lsl #2
	delay (16, 0);
    154c:	00000000 	andeq	r0, r0, r0
    1550:	224c0000 	subcs	r0, ip, #0
    1554:	225b0000 	subscs	r0, fp, #0
	__pi_release ();
    1558:	00010000 	andeq	r0, r1, r0
    155c:	00000050 	andeq	r0, r0, r0, asr r0
    1560:	00000000 	andeq	r0, r0, r0
    1564:	00218400 	eoreq	r8, r1, r0, lsl #8
    1568:	00219200 	eoreq	r9, r1, r0, lsl #4
    156c:	50000100 	andpl	r0, r0, r0, lsl #2
    1570:	00002192 	muleq	r0, r2, r1
static void killev (__pi_pcb_t *pid) {
    1574:	000021c0 	andeq	r2, r0, r0, asr #3
	wfun = (aword)(pid->code);
    1578:	00540001 	subseq	r0, r4, r1
	for_all_tasks (i) {
    157c:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
    1580:	84000000 	strhi	r0, [r0], #-0
    1584:	98000021 	stmdals	r0, {r0, r5}
    1588:	01000021 	tsteq	r0, r1, lsr #32
			    || i->Events [j] . Event == wfun
    158c:	219c5100 	orrscs	r5, ip, r0, lsl #2
		for (j = 0; j < nevents (i); j++) {
    1590:	21ab0000 			; <UNDEFINED> instruction: 0x21ab0000
			if (i->Events [j] . Event == (aword)pid
    1594:	00010000 	andeq	r0, r1, r0
    1598:	00000051 	andeq	r0, r0, r1, asr r0
    159c:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
    15a0:	00218400 	eoreq	r8, r1, r0, lsl #8
    15a4:	00219800 	eoreq	r9, r1, r0, lsl #16
	for_all_tasks (i) {
    15a8:	52000100 	andpl	r0, r0, #0, 2
}
    15ac:	0000219c 	muleq	r0, ip, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	000021ab 	andeq	r2, r0, fp, lsr #3
static void qfree (aword *ch) {
    15b4:	00520001 	subseq	r0, r2, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b8:	00000000 	andeq	r0, r0, r0
	cc = (aword*)(mpools + MA_NP);
    15bc:	ac000000 	stcge	0, cr0, [r0], {-0}
	m_setnextp (ch, chunk);
    15c0:	b6000021 	strlt	r0, [r0], -r1, lsr #32
	m_setnextp (cc, ch);
    15c4:	01000021 	tsteq	r0, r1, lsr #32
}
    15c8:	21b65000 			; <UNDEFINED> instruction: 0x21b65000
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15cc:	21ba0000 			; <UNDEFINED> instruction: 0x21ba0000
    15d0:	00070000 	andeq	r0, r7, r0
    15d4:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
			m_setnextp (cc, m_nextp (chunk));
    15d8:	ba220072 	blt	8817a8 <__ccfg+0x861800>
			m_size (chunk) += m_hdrlen + m_size (ch);
    15dc:	d4000021 	strle	r0, [r0], #-33	; 0xffffffdf
    15e0:	01000021 	tsteq	r0, r1, lsr #32
    15e4:	00005000 	andeq	r5, r0, r0
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f4:	00010000 	andeq	r0, r1, r0
    15f8:	00000050 	andeq	r0, r0, r0, asr r0
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
    1608:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (m_size (chunk) >= m_size (ch))
    161c:	00500001 	subseq	r0, r0, r1
    1620:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk))
    1624:	01000000 	mrseq	r0, (UNDEF: 0)
    1628:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	diag_wchar (c, a);
    1638:	00010000 	andeq	r0, r1, r0
    163c:	00000051 	andeq	r0, r0, r1, asr r0
}
    1640:	00000000 	andeq	r0, r0, r0
    1644:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	00500001 	subseq	r0, r0, r1
void utimer_add (address ut) {
    165c:	00000000 	andeq	r0, r0, r0
    1660:	01000000 	mrseq	r0, (UNDEF: 0)
		if (__pi_utims [i] == NULL)
    1664:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	__pi_utims [i] = ut;
    1674:	00010000 	andeq	r0, r1, r0
}
    1678:	00000050 	andeq	r0, r0, r0, asr r0
    167c:	00000000 	andeq	r0, r0, r0
    1680:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
    1694:	00510001 	subseq	r0, r1, r1
    1698:	00000000 	andeq	r0, r0, r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169c:	01000000 	mrseq	r0, (UNDEF: 0)
    16a0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    16b0:	00010000 	andeq	r0, r1, r0
    16b4:	00000050 	andeq	r0, r0, r0, asr r0
    16b8:	00000000 	andeq	r0, r0, r0
    16bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		for_all_tasks (i) {
    16d0:	00510001 	subseq	r0, r1, r1
	__pi_mintk = znew + min;
    16d4:	00000000 	andeq	r0, r0, r0
    16d8:	01000000 	mrseq	r0, (UNDEF: 0)
			if (!twaiting (i))
    16dc:	00005100 	andeq	r5, r0, r0, lsl #2
    16e0:	00000000 	andeq	r0, r0, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e4:	20bc0000 	adcscs	r0, ip, r0
    16e8:	20d40000 	sbcscs	r0, r4, r0
    16ec:	00010000 	andeq	r0, r1, r0
    16f0:	0020da50 	eoreq	sp, r0, r0, asr sl
    16f4:	0020e400 	eoreq	lr, r0, r0, lsl #8
    16f8:	50000100 	andpl	r0, r0, r0, lsl #2
    16fc:	000020e6 	andeq	r2, r0, r6, ror #1
    1700:	000020f4 	strdeq	r2, [r0], -r4
    1704:	fa500001 	blx	1401710 <__ccfg+0x13e1768>
    1708:	fc000020 	stc2	0, cr0, [r0], {32}
    170c:	01000020 	tsteq	r0, r0, lsr #32
    1710:	21065000 	mrscs	r5, (UNDEF: 6)
				wakeuptm (i);
    1714:	21080000 	mrscs	r0, (UNDEF: 8)
    1718:	00010000 	andeq	r0, r1, r0
		for_all_tasks (i) {
    171c:	00000050 	andeq	r0, r0, r0, asr r0
				d = i->Timer - znew;
    1720:	00000000 	andeq	r0, r0, r0
    1724:	0020bc00 	eoreq	fp, r0, r0, lsl #24
    1728:	0020f600 	eoreq	pc, r0, r0, lsl #12
		if ((word)(__pi_mintk - znew) < min) 
    172c:	51000100 	mrspl	r0, (UNDEF: 16)
    1730:	000020fa 	strdeq	r2, [r0], -sl
    1734:	00002105 	andeq	r2, r0, r5, lsl #2
	__pi_old = znew;
    1738:	06510001 	ldrbeq	r0, [r1], -r1
}
    173c:	1c000021 	stcne	0, cr0, [r0], {33}	; 0x21
	TCI_RUN_DELAY_TIMER;
    1740:	01000021 	tsteq	r0, r1, lsr #32
}
    1744:	00005100 	andeq	r5, r0, r0, lsl #2
    1748:	00000000 	andeq	r0, r0, r0
    174c:	20bc0000 	adcscs	r0, ip, r0
    1750:	20f90000 	rscscs	r0, r9, r0
    1754:	00010000 	andeq	r0, r1, r0
void proceed (word state) {
    1758:	0020fa52 	eoreq	pc, r0, r2, asr sl	; <UNPREDICTABLE>
	prcdstate (__pi_curr, state);
    175c:	00210500 	eoreq	r0, r1, r0, lsl #10
    1760:	52000100 	andpl	r0, r0, #0, 2
	release;
    1764:	00002106 	andeq	r2, r0, r6, lsl #2
    1768:	0000211c 	andeq	r2, r0, ip, lsl r1
void __pi_wait (aword event, word state) {
    176c:	00520001 	subseq	r0, r2, r1
	sint j = nevents (__pi_curr);
    1770:	00000000 	andeq	r0, r0, r0
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	d4000000 	strle	r0, [r0], #-0
    1778:	d8000020 	stmdale	r0, {r5}
    177c:	01000020 	tsteq	r0, r0, lsr #32
		syserror (ENEVENTS, "sw");
    1780:	00005000 	andeq	r5, r0, r0
	...
	setestate (__pi_curr->Events [j], state, event);
    1790:	00010000 	andeq	r0, r1, r0
}
    1794:	00000050 	andeq	r0, r0, r0, asr r0
    1798:	00000000 	andeq	r0, r0, r0
    179c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		for (j = 0; j < nevents (i); j++) {
    17b0:	00500001 	subseq	r0, r0, r1
    17b4:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == event) {
    17b8:	01000000 	mrseq	r0, (UNDEF: 0)
    17bc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	for_all_tasks (i) {
    17cc:	00010000 	andeq	r0, r1, r0
}
    17d0:	00000051 	andeq	r0, r0, r1, asr r0
	...
	return 0;
    17e0:	52000100 	andpl	r0, r0, #0, 2
	...
}
    17ec:	00550001 	subseq	r0, r5, r1
	for_all_tasks (i) {
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	54000000 	strpl	r0, [r0], #-0
void delay (word d, word state) {
    17f8:	5e000020 	cdppl	0, 0, cr0, cr0, cr0, {1}
	settstate (__pi_curr, state);
    17fc:	01000020 	tsteq	r0, r0, lsr #32
    1800:	205e5000 	subscs	r5, lr, r0
    1804:	208e0000 	addcs	r0, lr, r0
    1808:	00010000 	andeq	r0, r1, r0
	update_n_wake (d, YES);
    180c:	00000054 	andeq	r0, r0, r4, asr r0
    1810:	00000000 	andeq	r0, r0, r0
	__pi_curr->Timer = __pi_old + d;
    1814:	00205400 	eoreq	r5, r0, r0, lsl #8
    1818:	00206c00 	eoreq	r6, r0, r0, lsl #24
	inctimer (__pi_curr);
    181c:	51000100 	mrspl	r0, (UNDEF: 16)
    1820:	0000206c 	andeq	r2, r0, ip, rrx
    1824:	00002073 	andeq	r2, r0, r3, ror r0
}
    1828:	00500001 	subseq	r0, r0, r1
    182c:	00000000 	andeq	r0, r0, r0
	if (fun == NULL)
    1830:	54000000 	strpl	r0, [r0], #-0
		return (int) __pi_curr;
    1834:	64000020 	strvs	r0, [r0], #-32	; 0xffffffe0
    1838:	01000020 	tsteq	r0, r0, lsr #32
	for_all_tasks (i)
    183c:	20645200 	rsbcs	r5, r4, r0, lsl #4
}
    1840:	208e0000 	addcs	r0, lr, r0
		if (i->code == fun)
    1844:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i)
    1848:	00000055 	andeq	r0, r0, r5, asr r0
    184c:	00000000 	andeq	r0, r0, r0
    1850:	001f9800 	andseq	r9, pc, r0, lsl #16
int __pi_strlen (const char *s) {
    1854:	001fae00 	andseq	sl, pc, r0, lsl #28
	for (i = 0; *(s+i) != '\0'; i++);
    1858:	50000100 	andpl	r0, r0, r0, lsl #2
}
    185c:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
	for (i = 0; *(s+i) != '\0'; i++);
    1860:	00001fd4 	ldrdeq	r1, [r0], -r4
	while ((Boolean)(*d++ = *s++));
    1864:	00500001 	subseq	r0, r0, r1
    1868:	00000000 	andeq	r0, r0, r0
    186c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
}
    1870:	ae00001f 	mcrge	0, 0, r0, cr0, cr15, {0}
	while (n-- && (*s != '\0'))
    1874:	0100001f 	tsteq	r0, pc, lsl r0
    1878:	1fb45100 	svcne	0x00b45100
	*d = '\0';
    187c:	1fcc0000 	svcne	0x00cc0000
	while (n-- && (*s != '\0'))
    1880:	00010000 	andeq	r0, r1, r0
    1884:	001fce51 	andseq	ip, pc, r1, asr lr	; <UNPREDICTABLE>
		*d++ = *s++;
    1888:	001fda00 	andseq	sp, pc, r0, lsl #20
    188c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		*dest++ = *src++;
    1898:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    189c:	00001fae 	andeq	r1, r0, lr, lsr #31
    18a0:	ae520001 	cdpge	0, 5, cr0, cr2, cr1, {0}
	while (n--)
    18a4:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
}
    18a8:	0100001f 	tsteq	r0, pc, lsl r0
		*dest++ = c;
    18ac:	1fb45400 	svcne	0x00b45400
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	1fc00000 	svcne	0x00c00000
		syserror (EREQPAR, "addv");
    18b4:	00010000 	andeq	r0, r1, r0
		syserror (ERESOURCE, "addv");
    18b8:	001fc052 	andseq	ip, pc, r2, asr r0	; <UNPREDICTABLE>
	if (ioreq [loc] != NULL)
    18bc:	001fe600 	andseq	lr, pc, r0, lsl #12
    18c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		syserror (ERESOURCE, "addv");
    18c4:	00001fec 	andeq	r1, r0, ip, ror #31
	ioreq [loc] = rf;
    18c8:	00001ff2 	strdeq	r1, [r0], -r2
}
    18cc:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
    18d0:	0a00001f 	beq	1954 <io+0x80>
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	01000020 	tsteq	r0, r0, lsr #32
    18d8:	00005400 	andeq	r5, r0, r0, lsl #8
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	1f980000 	svcne	0x00980000
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e4:	1fa60000 	svcne	0x00a60000
    18e8:	00010000 	andeq	r0, r1, r0
    18ec:	00000053 	andeq	r0, r0, r3, asr r0
		syserror (ENODEVICE, "io");
    18f0:	00000000 	andeq	r0, r0, r0
    18f4:	00201400 	eoreq	r1, r0, r0, lsl #8
	if (len == 0)
    18f8:	00202000 	eoreq	r2, r0, r0
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1900:	00002026 	andeq	r2, r0, r6, lsr #32
	if (ret >= 0)
    1904:	0000203e 	andeq	r2, r0, lr, lsr r0
	if (ret == -1) {
    1908:	00500001 	subseq	r0, r0, r1
    190c:	00000000 	andeq	r0, r0, r0
		if (retry == WNONE)
    1910:	dc000000 	stcle	0, cr0, [r0], {-0}
		iowait (dev, operation, retry);
    1914:	e600001f 			; <UNDEFINED> instruction: 0xe600001f
    1918:	0100001f 	tsteq	r0, pc, lsl r0
    191c:	1fec5000 	svcne	0x00ec5000
			release;
    1920:	1ff10000 	svcne	0x00f10000
	if (ret == -2) {
    1924:	00010000 	andeq	r0, r1, r0
		if (retry != WNONE) {
    1928:	001ff650 	andseq	pc, pc, r0, asr r6	; <UNPREDICTABLE>
    192c:	00200400 	eoreq	r0, r0, r0, lsl #8
			iowait (dev, operation, retry);
    1930:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		(ioreq [dev]) (NONE, buf, len);
    1944:	00500001 	subseq	r0, r0, r1
    1948:	00000000 	andeq	r0, r0, r0
    194c:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1950:	00005000 	andeq	r5, r0, r0
	if (retry != WNONE) {
    1954:	00000000 	andeq	r0, r0, r0
		delay (-ret - 2, retry);
    1958:	00010000 	andeq	r0, r1, r0
    195c:	00000050 	andeq	r0, r0, r0, asr r0
    1960:	00000000 	andeq	r0, r0, r0
    1964:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1978:	00510001 	subseq	r0, r1, r1
    197c:	00000000 	andeq	r0, r0, r0
    1980:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (ERESOURCE, "mal1");
    1984:	00005100 	andeq	r5, r0, r0, lsl #2
    1988:	00000000 	andeq	r0, r0, r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    198c:	00010000 	andeq	r0, r1, r0
    1990:	00000051 	andeq	r0, r0, r1, asr r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1994:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1998:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    19ac:	00540001 	subseq	r0, r4, r1
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	0a000000 	beq	19bc <__pi_malloc_init+0x4c>
    19b8:	32007000 	andcc	r7, r0, #0
    19bc:	05980324 	ldreq	r0, [r8, #804]	; 0x324
void __pi_free (aword *ch) {
    19c0:	00222000 	eoreq	r2, r2, r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    19c4:	00000000 	andeq	r0, r0, r0
    19c8:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (EMALLOC, "malg");
    19cc:	00005400 	andeq	r5, r0, r0, lsl #8
    19d0:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    19d4:	000a0000 	andeq	r0, sl, r0
		m_size (ch) ^= MALLOC_UMASK;
    19d8:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    19dc:	00059803 	andeq	r9, r5, r3, lsl #16
	mcfree [MA_NP] += m_size (ch);
    19e0:	00002220 	andeq	r2, r0, r0, lsr #4
	QFREE;
    19e4:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait) {
    19e8:	00010000 	andeq	r0, r1, r0
    19ec:	00000054 	andeq	r0, r0, r4, asr r0
		trigger ((aword)(&(mevent [MA_NP])));
    19f0:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait --;
    19f4:	70000a00 	andvc	r0, r0, r0, lsl #20
}
    19f8:	03243200 			; <UNDEFINED> instruction: 0x03243200
    19fc:	20000598 	mulcs	r0, r8, r5
    1a00:	00000022 	andeq	r0, r0, r2, lsr #32
	...
	j = NULL;
    1a10:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	syserror (EREQPAR, "kpi");
    1a1c:	00550001 	subseq	r0, r5, r1
	...
			killev (i);
    1a2c:	01000000 	mrseq	r0, (UNDEF: 0)
			ufree (i);
    1a30:	00005400 	andeq	r5, r0, r0, lsl #8
			if (i == __pi_curr)
    1a34:	00000000 	andeq	r0, r0, r0
    1a38:	00010000 	andeq	r0, r1, r0
				release;
    1a3c:	00000054 	andeq	r0, r0, r4, asr r0
	...
}
    1a4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (size < 8)
    1a58:	00500001 	subseq	r0, r0, r1
		_size = 2;
    1a5c:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a60:	01000000 	mrseq	r0, (UNDEF: 0)
		_size = (((aword)size) + 3) >> 2;
    1a64:	00005000 	andeq	r5, r0, r0
	...
		if (mevent [MA_NP] . nfail != 255)
    1a74:	00010000 	andeq	r0, r1, r0
			mevent [MA_NP] . nfail ++;
    1a78:	00000055 	andeq	r0, r0, r5, asr r0
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		chunk = m_nextp (chunk)) {
    1a9c:	00500001 	subseq	r0, r0, r1
		m_setnextp (cc, m_nextp (chunk));
    1aa0:	00000000 	andeq	r0, r0, r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa8:	00005000 	andeq	r5, r0, r0
			m_size (chunk) = _size;
    1aac:	00000000 	andeq	r0, r0, r0
			cc = chunk + _size + m_hdrlen;
    1ab0:	00010000 	andeq	r0, r1, r0
    1ab4:	00000050 	andeq	r0, r0, r0, asr r0
			m_size (cc) = waste - m_hdrlen;
    1ab8:	00000000 	andeq	r0, r0, r0
			QFREE;
    1abc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		mcfree [MA_NP] -= m_size (chunk);
    1ad0:	00510001 	subseq	r0, r1, r1
		m_size (chunk) |= MALLOC_UMASK;
    1ad4:	00000000 	andeq	r0, r0, r0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad8:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (chunk) |= MALLOC_UMASK;
    1adc:	00005100 	andeq	r5, r0, r0, lsl #2
			mnfree [MA_NP] = mcfree [MA_NP];
    1ae0:	00000000 	andeq	r0, r0, r0
}
    1ae4:	00010000 	andeq	r0, r1, r0
    1ae8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1af8:	53000100 	movwpl	r0, #256	; 0x100
	...
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b04:	0070000a 	rsbseq	r0, r0, sl
    1b08:	98032432 	stmdals	r3, {r1, r4, r5, sl, sp}
    1b0c:	22200005 	eorcs	r0, r0, #5
	...
	i->data = data;
    1b18:	00530001 	subseq	r0, r3, r1
		if ((j = __PCB) == NULL)
    1b1c:	00000000 	andeq	r0, r0, r0
}
    1b20:	0a000000 	beq	1b28 <__pi_fork+0x28>
			for (; j->Next != NULL; j = j->Next);
    1b24:	32007000 	andcc	r7, r0, #0
    1b28:	05980324 	ldreq	r0, [r8, #804]	; 0x324
	return (aword) i;
    1b2c:	00222000 	eoreq	r2, r2, r0
    1b30:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait != 255)
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	00005300 	andeq	r5, r0, r0, lsl #6
    1b3c:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait ++;
    1b40:	000a0000 	andeq	r0, sl, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1b44:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1b48:	00059803 	andeq	r9, r5, r3, lsl #16
void diag (const char *mess, ...) {
    1b4c:	00002220 	andeq	r2, r0, r0, lsr #4
	...
	diag_disable_int (a, is);
    1b5c:	00010000 	andeq	r0, r1, r0
    1b60:	00000050 	andeq	r0, r0, r0, asr r0
				d = (bc == 16) ? 10000 : 1000000000;
    1b64:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    1b68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1b7c:	00530001 	subseq	r0, r3, r1
	diag_wait (a);
    1b80:	00000000 	andeq	r0, r0, r0
	diag_enable_int (a, is);
    1b84:	01000000 	mrseq	r0, (UNDEF: 0)
    1b88:	00005300 	andeq	r5, r0, r0, lsl #6
}
    1b8c:	00000000 	andeq	r0, r0, r0
    1b90:	00010000 	andeq	r0, r1, r0
    1b94:	00000053 	andeq	r0, r0, r3, asr r0
	...
			if (*mess == 'l') {
    1ba4:	52000100 	andpl	r0, r0, #0, 2
	...
				bc = 32;
    1bb0:	00520001 	subseq	r0, r2, r1
				bc = 16;
    1bb4:	00000000 	andeq	r0, r0, r0
			switch (*mess) {
    1bb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bbc:	00005200 	andeq	r5, r0, r0, lsl #4
    1bc0:	00000000 	andeq	r0, r0, r0
				dgout ('%');
    1bc4:	00010000 	andeq	r0, r1, r0
    1bc8:	00000052 	andeq	r0, r0, r2, asr r0
				dgout (*mess);
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	001f1800 	andseq	r1, pc, r0, lsl #16
			switch (*mess) {
    1bd4:	001f2600 	andseq	r2, pc, r0, lsl #12
					v = __pi_hex_enc_table [
    1bd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					(val >> (bc - i)) & 0xf];
    1be4:	00001f18 	andeq	r1, r0, r8, lsl pc
					dgout (v);
    1be8:	00001f2a 	andeq	r1, r0, sl, lsr #30
    1bec:	30510001 	subscc	r0, r1, r1
				while (i < bc) {
    1bf0:	4000001f 	andmi	r0, r0, pc, lsl r0
			mess++;
    1bf4:	0100001f 	tsteq	r0, pc, lsl r0
					d /= 10;
    1bf8:	1f485100 	svcne	0x00485100
				if ((val >> (bc - 1)) & 1) {
    1bfc:	1f6a0000 	svcne	0x006a0000
    1c00:	00010000 	andeq	r0, r1, r0
					dgout ('-');
    1c04:	001f6c51 	andseq	r6, pc, r1, asr ip	; <UNPREDICTABLE>
    1c08:	001f6e00 	andseq	r6, pc, r0, lsl #28
						val |= 0xffff0000;
    1c0c:	51000100 	mrspl	r0, (UNDEF: 16)
    1c10:	00001f82 	andeq	r1, r0, r2, lsl #31
    1c14:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
				d = (bc == 16) ? 10000 : 1000000000;
    1c18:	00510001 	subseq	r0, r1, r1
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	54000000 	strpl	r0, [r0], #-0
					v = (word) (val / d);
    1c24:	7e00001f 	mcrvc	0, 0, r0, cr0, cr15, {0}
					if (v || d == 1) break;
    1c28:	0100001f 	tsteq	r0, pc, lsl r0
    1c2c:	00005500 	andeq	r5, r0, r0, lsl #10
					d /= 10;
    1c30:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1c34:	1f320000 	svcne	0x00320000
					dgout (v + '0');
    1c38:	1f5c0000 	svcne	0x005c0000
    1c3c:	00010000 	andeq	r0, r1, r0
    1c40:	001f5c54 	andseq	r5, pc, r4, asr ip	; <UNPREDICTABLE>
					d /= 10;
    1c44:	001f7000 	andseq	r7, pc, r0
					val = val - (v * d);
    1c48:	50000100 	andpl	r0, r0, r0, lsl #2
					if (d == 0) break;
    1c4c:	00001f70 	andeq	r1, r0, r0, ror pc
					v = (word) (val / d);
    1c50:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    1c54:	00540001 	subseq	r0, r4, r1
				if (bc == 16)
    1c58:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1c5c:	30000000 	andcc	r0, r0, r0
					val &= 0xffff;
    1c60:	4300001f 	movwmi	r0, #31
					dgout (*s);
    1c64:	0100001f 	tsteq	r0, pc, lsl r0
					s++;
    1c68:	1f485000 	svcne	0x00485000
				while (*s != '\0') {
    1c6c:	1f4a0000 	svcne	0x004a0000
    1c70:	00010000 	andeq	r0, r1, r0
			dgout (*mess++);
    1c74:	001f4a50 	andseq	r4, pc, r0, asr sl	; <UNPREDICTABLE>
    1c78:	001f4d00 	andseq	r4, pc, r0, lsl #26
    1c7c:	71000700 	tstvc	r0, r0, lsl #14
    1c80:	72243200 	eorvc	r3, r4, #0, 4
    1c84:	1f822200 	svcne	0x00822200
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1c88:	1f980000 	svcne	0x00980000
    1c8c:	00010000 	andeq	r0, r1, r0
    1c90:	00000050 	andeq	r0, r0, r0, asr r0
    1c94:	00000000 	andeq	r0, r0, r0
	^ entropy
    1c98:	001ef400 	andseq	pc, lr, r0, lsl #8
}
    1c9c:	001f0a00 	andseq	r0, pc, r0, lsl #20
    1ca0:	50000100 	andpl	r0, r0, r0, lsl #2
    1ca4:	00001f0c 	andeq	r1, r0, ip, lsl #30
    1ca8:	00001f10 	andeq	r1, r0, r0, lsl pc
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1cac:	00500001 	subseq	r0, r0, r1
	...
	p -> length = size;
    1cbc:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1cc0:	00005000 	andeq	r5, r0, r0
	if (p->attributes.b.queued) {
    1cc4:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1cc8:	00010000 	andeq	r0, r1, r0
    1ccc:	00000050 	andeq	r0, r0, r0, asr r0
	...
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1cdc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	tfree ((address)p);
    1ce8:	00550001 	subseq	r0, r5, r1
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    1cf4:	00005100 	andeq	r5, r0, r0, lsl #2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	00010000 	andeq	r0, r1, r0
	if (q_empty (q))
    1d00:	00000055 	andeq	r0, r0, r5, asr r0
    1d04:	00000000 	andeq	r0, r0, r0
		trigger (q);
    1d08:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		p->u.bqueue.prev = q;
    1d14:	00550001 	subseq	r0, r5, r1
	...
}
    1d24:	01000000 	mrseq	r0, (UNDEF: 0)
		p->u.bqueue.prev = q->prev;
    1d28:	00005600 	andeq	r5, r0, r0, lsl #12
	...
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1d38:	00010000 	andeq	r0, r1, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1d3c:	00000050 	andeq	r0, r0, r0, asr r0
	switch (dv) {
    1d40:	00000000 	andeq	r0, r0, r0
    1d44:	001e3400 	andseq	r3, lr, r0, lsl #8
    1d48:	001e6200 	andseq	r6, lr, r0, lsl #4
    1d4c:	50000100 	andpl	r0, r0, r0, lsl #2
			p->attributes.b.urgent = 1;
    1d50:	00001e68 	andeq	r1, r0, r8, ror #28
    1d54:	00001e88 	andeq	r1, r0, r8, lsl #29
			verify_ses (p, "dispose ses");
    1d58:	c8500001 	ldmdagt	r0, {r0}^
    1d5c:	ca00001e 	bgt	1ddc <tcv_endp+0x18>
    1d60:	0100001e 	tsteq	r0, lr, lsl r0
    1d64:	00005000 	andeq	r5, r0, r0
    1d68:	00000000 	andeq	r0, r0, r0
			verify_phy (p, "dispose phy");
    1d6c:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    1d70:	1e640000 	cdpne	0, 6, cr0, cr4, cr0, {0}
}
    1d74:	00010000 	andeq	r0, r1, r0
			enq (oqueues [p->attributes.b.phys], p);
    1d78:	001e6451 	andseq	r6, lr, r1, asr r4
			p->attributes.b.urgent = 1;
    1d7c:	001e6800 	andseq	r6, lr, r0, lsl #16
    1d80:	57000100 	strpl	r0, [r0, -r0, lsl #2]
			verify_phy (p, "dispose phy");
    1d84:	00001e68 	andeq	r1, r0, r8, ror #28
    1d88:	00001e88 	andeq	r1, r0, r8, lsl #29
    1d8c:	88510001 	ldmdahi	r1, {r0}^
    1d90:	9400001e 	strls	r0, [r0], #-30	; 0xffffffe2
    1d94:	0100001e 	tsteq	r0, lr, lsl r0
    1d98:	1e985700 	cdpne	7, 9, cr5, cr8, cr0, {0}
			enq (oqueues [p->attributes.b.phys], p);
    1d9c:	1ec80000 	cdpne	0, 12, cr0, cr8, cr0, {0}
    1da0:	00010000 	andeq	r0, r1, r0
}
    1da4:	001ec857 	andseq	ip, lr, r7, asr r8
			rlp (p);
    1da8:	001ecd00 	andseq	ip, lr, r0, lsl #26
}
    1dac:	51000100 	mrspl	r0, (UNDEF: 16)
    1db0:	00001ecd 	andeq	r1, r0, sp, asr #29
    1db4:	00001ef4 	strdeq	r1, [r0], -r4
    1db8:	00570001 	subseq	r0, r7, r1
    1dbc:	00000000 	andeq	r0, r0, r0
    1dc0:	34000000 	strcc	r0, [r0], #-0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1dc4:	6400001e 	strvs	r0, [r0], #-30	; 0xffffffe2
	if (b->attributes.b.outgoing) {
    1dc8:	0200001e 	andeq	r0, r0, #30
	b = header (p);
    1dcc:	68789100 	ldmdavs	r8!, {r8, ip, pc}^
	if (b->attributes.b.outgoing) {
    1dd0:	8800001e 	stmdahi	r0, {r1, r2, r3, r4}
		verify_ses (b, "tcv02");
    1dd4:	0200001e 	andeq	r0, r0, #30
    1dd8:	98789100 	ldmdals	r8!, {r8, ip, pc}^
    1ddc:	a400001e 	strge	r0, [r0], #-30	; 0xffffffe2
    1de0:	0200001e 	andeq	r0, r0, #30
    1de4:	c8789100 	ldmdagt	r8!, {r8, ip, pc}^
		verify_plg (b, tcv_out, "tcv03");
    1de8:	f400001e 	vst4.8	{d0-d3}, [r0 :64], lr
    1dec:	0200001e 	andeq	r0, r0, #30
    1df0:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1df4:	00000000 	andeq	r0, r0, r0
    1df8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1dfc:	8c00001e 	stchi	0, cr0, [r0], {30}
    1e00:	0100001e 	tsteq	r0, lr, lsl r0
    1e04:	1e985600 	cdpne	6, 9, cr5, cr8, cr0, {0}
    1e08:	1ef40000 	cdpne	0, 15, cr0, cr4, cr0, {0}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e0c:	00010000 	andeq	r0, r1, r0
}
    1e10:	00000056 	andeq	r0, r0, r6, asr r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e14:	00000000 	andeq	r0, r0, r0
		rlp (b);
    1e18:	001e9800 	andseq	r9, lr, r0, lsl #16
}
    1e1c:	001eb200 	andseq	fp, lr, r0, lsl #4
		rlp (b);
    1e20:	50000100 	andpl	r0, r0, r0, lsl #2
    1e24:	00001eb2 			; <UNDEFINED> instruction: 0x00001eb2
    1e28:	00001eb6 			; <UNDEFINED> instruction: 0x00001eb6
    1e2c:	b6540001 	ldrblt	r0, [r4], -r1
    1e30:	ba00001e 	blt	1eb0 <tcv_open+0x7c>
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e34:	0100001e 	tsteq	r0, lr, lsl r0
    1e38:	1eba5000 	cdpne	0, 11, cr5, cr10, cr0, {0}
    1e3c:	1ec80000 	cdpne	0, 12, cr0, cr8, cr0, {0}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e40:	00010000 	andeq	r0, r1, r0
	va_start (ap, plid);
    1e44:	001ece54 	andseq	ip, lr, r4, asr lr
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e48:	001ed600 	andseq	sp, lr, r0, lsl #12
    1e4c:	50000100 	andpl	r0, r0, r0, lsl #2
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1e50:	00001ed6 	ldrdeq	r1, [r0], -r6
    1e54:	00001ef4 	strdeq	r1, [r0], -r4
    1e58:	00540001 	subseq	r0, r4, r1
    1e5c:	00000000 	andeq	r0, r0, r0
			syserror (ENODEVICE, "tcv04");
    1e60:	c4000000 	strgt	r0, [r0], #-0
		syserror (EMALLOC, "tcv05");
    1e64:	ea00001d 	b	1ee0 <tcv_open+0xac>
	attp.b.outgoing = 1;
    1e68:	0100001d 	tsteq	r0, sp, lsl r0
    1e6c:	1dee5000 	stclne	0, cr5, [lr]
    1e70:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    1e74:	00010000 	andeq	r0, r1, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e78:	001e1850 	andseq	r1, lr, r0, asr r8
		if (descriptors [fd] == NULL)
    1e7c:	001e1a00 	andseq	r1, lr, r0, lsl #20
    1e80:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1e8c:	00001dce 	andeq	r1, r0, lr, asr #27
    1e90:	00001e14 	andeq	r1, r0, r4, lsl lr
    1e94:	14540001 	ldrbne	r0, [r4], #-1
	s->attpattern.b.session = fd;
    1e98:	1700001e 	smladne	r0, lr, r0, r0
    1e9c:	0100001e 	tsteq	r0, lr, lsl r0
	descriptors [fd] = s;
    1ea0:	1e185000 	cdpne	0, 1, cr5, cr8, cr0, {0}
	q_init (&(s->rqueue));
    1ea4:	1e1e0000 	cdpne	0, 1, cr0, cr14, cr0, {0}
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1ea8:	00010000 	andeq	r0, r1, r0
    1eac:	001e1e54 	andseq	r1, lr, r4, asr lr
    1eb0:	001e2100 	andseq	r2, lr, r0, lsl #2
    1eb4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1ec0:	00001cac 	andeq	r1, r0, ip, lsr #25
	descriptors [fd] = s;
    1ec4:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1ec8:	00500001 	subseq	r0, r0, r1
    1ecc:	00000000 	andeq	r0, r0, r0
	if (s == NULL)
    1ed0:	dc000000 	stcle	0, cr0, [r0], {-0}
		syserror (EMALLOC, "tcv05");
    1ed4:	e900001c 	stmdb	r0, {r2, r3, r4}
    1ed8:	0100001c 	tsteq	r0, ip, lsl r0
    1edc:	00005000 	andeq	r5, r0, r0
    1ee0:	00000000 	andeq	r0, r0, r0
    1ee4:	1cc80000 	stclne	0, cr0, [r8], {0}
    1ee8:	1cda0000 	ldclne	0, cr0, [sl], {0}
    1eec:	00010000 	andeq	r0, r1, r0
    1ef0:	00000050 	andeq	r0, r0, r0, asr r0
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ef4:	00000000 	andeq	r0, r0, r0
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ef8:	001cec00 	andseq	lr, ip, r0, lsl #24
    1efc:	001cfa00 	andseq	pc, ip, r0, lsl #20
    1f00:	50000100 	andpl	r0, r0, r0, lsl #2
	plugins [ord] = pl;
    1f04:	00001cfa 	strdeq	r1, [r0], -sl
	return 0;
    1f08:	00001d00 	andeq	r1, r0, r0, lsl #26
		return ERROR;
    1f0c:	00550001 	subseq	r0, r5, r1
}
    1f10:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    1f14:	0100001d 	tsteq	r0, sp, lsl r0
	verify_fds (fd, "tcv10");
    1f18:	1d095000 	stcne	0, cr5, [r9, #-0]
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1f1c:	1d380000 	ldcne	0, cr0, [r8, #-0]
	verify_fds (fd, "tcv10");
    1f20:	00010000 	andeq	r0, r1, r0
    1f24:	00000055 	andeq	r0, r0, r5, asr r0
    1f28:	00000000 	andeq	r0, r0, r0
	verify_plg (b, tcv_frm, "tcv11");
    1f2c:	001cec00 	andseq	lr, ip, r0, lsl #24
	b = q_first (rq);
    1f30:	001cfc00 	andseq	pc, ip, r0, lsl #24
	if (q_end (b, rq)) {
    1f34:	51000100 	mrspl	r0, (UNDEF: 16)
		if (state != WNONE) {
    1f38:	00001cfc 	strdeq	r1, [r0], -ip
    1f3c:	00001d00 	andeq	r1, r0, r0, lsl #26
			when (rq, state);
    1f40:	00540001 	subseq	r0, r4, r1
			release;
    1f44:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
	deq (b);	// Dequeue the packet ...
    1f48:	0100001d 	tsteq	r0, sp, lsl r0
    1f4c:	1d095100 	stfnes	f5, [r9, #-0]
	p = ((address)(b + 1));
    1f50:	1d380000 	ldcne	0, cr0, [r8, #-0]
	verify_plg (b, tcv_frm, "tcv11");
    1f54:	00010000 	andeq	r0, r1, r0
    1f58:	00000054 	andeq	r0, r0, r4, asr r0
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	001cf800 	andseq	pc, ip, r0, lsl #16
    1f64:	001cfa00 	andseq	pc, ip, r0, lsl #20
    1f68:	50000100 	andpl	r0, r0, r0, lsl #2
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1f6c:	00001cfa 	strdeq	r1, [r0], -sl
    1f70:	00001d00 	andeq	r1, r0, r0, lsl #26
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1f74:	00550001 	subseq	r0, r5, r1
    1f78:	00000000 	andeq	r0, r0, r0
	b->u.pointers.tail =
    1f7c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
}
    1f80:	fc00001c 	stc2	0, cr0, [r0], {28}
		return NULL;
    1f84:	0100001c 	tsteq	r0, ip, lsl r0
    1f88:	1cfc5100 	ldfnee	f5, [ip]
    1f8c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1f90:	00010000 	andeq	r0, r1, r0
    1f94:	00000054 	andeq	r0, r0, r4, asr r0
	verify_fds (fd, "tcv16");
    1f98:	00000000 	andeq	r0, r0, r0
								Boolean urg) {
    1f9c:	001d3800 	andseq	r3, sp, r0, lsl #16
    1fa0:	001d6800 	andseq	r6, sp, r0, lsl #16
	verify_fds (fd, "tcv16");
    1fa4:	50000100 	andpl	r0, r0, r0, lsl #2
    1fa8:	00001d68 	andeq	r1, r0, r8, ror #26
    1fac:	00001d74 	andeq	r1, r0, r4, ror sp
	verify_pld (s, tcv_frm, "tcv17");
    1fb0:	74540001 	ldrbvc	r0, [r4], #-1
    1fb4:	7b00001d 	blvc	2030 <tcv_wnps+0x98>
    1fb8:	0100001d 	tsteq	r0, sp, lsl r0
    1fbc:	1d7c5100 	ldfnee	f5, [ip, #-0]
    1fc0:	1da20000 	stcne	0, cr0, [r2]
    1fc4:	00010000 	andeq	r0, r1, r0
    1fc8:	001da250 	andseq	sl, sp, r0, asr r2
    1fcc:	001da400 	andseq	sl, sp, r0, lsl #8
	ptrs.head = (word) fd;
    1fd0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	ptrs.tail = (word) urg;
    1fd4:	00001da4 	andeq	r1, r0, r4, lsr #27
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd8:	00001dab 	andeq	r1, r0, fp, lsr #27
    1fdc:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		if (state != WNONE) {
    1fe0:	c400001d 	strgt	r0, [r0], #-29	; 0xffffffe3
    1fe4:	0100001d 	tsteq	r0, sp, lsl r0
}
    1fe8:	00005000 	andeq	r5, r0, r0
			when (eid, state);
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	1d380000 	ldcne	0, cr0, [r8, #-0]
			release;
    1ff4:	1d420000 	stclne	0, cr0, [r2, #-0]
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1ff8:	00010000 	andeq	r0, r1, r0
    1ffc:	00000051 	andeq	r0, r0, r1, asr r0
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2000:	00000000 	andeq	r0, r0, r0
    2004:	001d8400 	andseq	r8, sp, r0, lsl #8
    2008:	001da200 	andseq	sl, sp, r0, lsl #4
    200c:	50000100 	andpl	r0, r0, r0, lsl #2
    2010:	00001da2 	andeq	r1, r0, r2, lsr #27
    2014:	00001da4 	andeq	r1, r0, r4, lsr #27
		if (state != WNONE) {
    2018:	00540001 	subseq	r0, r4, r1
    201c:	00000000 	andeq	r0, r0, r0
			tmwait (state);
    2020:	90000000 	andls	r0, r0, r0
    2024:	96000020 	strls	r0, [r0], -r0, lsr #32
	b->attributes = s->attpattern;
    2028:	01000020 	tsteq	r0, r0, lsr #32
		b->attributes.b.urgent = 1;
    202c:	20965000 	addscs	r5, r6, r0
    2030:	20a20000 	adccs	r0, r2, r0
	b->u.pointers.head = ptrs.head;
    2034:	00010000 	andeq	r0, r1, r0
	b->u.pointers.tail = length;
    2038:	00000053 	andeq	r0, r0, r3, asr r0
	return (address) (b + 1);
    203c:	00000000 	andeq	r0, r0, r0
    2040:	00209000 	eoreq	r9, r0, r0
    2044:	00209a00 	eoreq	r9, r0, r0, lsl #20
    2048:	51000100 	mrspl	r0, (UNDEF: 16)
    204c:	0000209a 	muleq	r0, sl, r0
    2050:	000020a6 	andeq	r2, r0, r6, lsr #1
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2054:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	if (len >= b->u.pointers.tail)
    2058:	b1000020 	tstlt	r0, r0, lsr #32
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    205c:	01000020 	tsteq	r0, r0, lsr #32
    2060:	00005000 	andeq	r5, r0, r0
	if (len > 0) {
    2064:	00000000 	andeq	r0, r0, r0
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2068:	20900000 	addscs	r0, r0, r0
    206c:	209e0000 	addscs	r0, lr, r0
    2070:	00010000 	andeq	r0, r1, r0
		b->u.pointers.tail -= len;
    2074:	00209e52 	eoreq	r9, r0, r2, asr lr
    2078:	0020a800 	eoreq	sl, r0, r0, lsl #16
    207c:	51000100 	mrspl	r0, (UNDEF: 16)
		b->u.pointers.head += len;
    2080:	000020ac 	andeq	r2, r0, ip, lsr #1
    2084:	000020b1 	strheq	r2, [r0], -r1
    2088:	00510001 	subseq	r0, r1, r1
}
    208c:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2090:	a4000000 	strge	r0, [r0], #-0
    2094:	a6000020 	strge	r0, [r0], -r0, lsr #32
    2098:	01000020 	tsteq	r0, r0, lsr #32
	verify_fph (phy, "tcv23");
    209c:	00005000 	andeq	r5, r0, r0
    20a0:	00000000 	andeq	r0, r0, r0
    20a4:	20a40000 	adccs	r0, r4, r0
    20a8:	20a80000 	adccs	r0, r8, r0
}
    20ac:	00010000 	andeq	r0, r1, r0
	return (physical [phy]) (opt, arg);
    20b0:	00000051 	andeq	r0, r0, r1, asr r0
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	00211c00 	eoreq	r1, r1, r0, lsl #24
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    20bc:	00212000 	eoreq	r2, r1, r0
	if (opt < 0) {
    20c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (fd >= TCV_MAX_PLUGS)
    20cc:	0000211c 	andeq	r2, r0, ip, lsl r1
			if ((p = plugins [fd]) == NULL)
    20d0:	0000212e 	andeq	r2, r0, lr, lsr #2
    20d4:	2e510001 	cdpcs	0, 5, cr0, cr1, cr1, {0}
}
    20d8:	32000021 	andcc	r0, r0, #33	; 0x21
		if (fd >= TCV_MAX_PHYS)
    20dc:	01000021 	tsteq	r0, r1, lsr #32
		return physinfo [fd];
    20e0:	21325600 	teqcs	r2, r0, lsl #12
    20e4:	21420000 	mrscs	r0, (UNDEF: 66)
	verify_fds (fd, "tcv22");
    20e8:	00010000 	andeq	r0, r1, r0
    20ec:	00214251 	eoreq	r4, r1, r1, asr r2
    20f0:	00214400 	eoreq	r4, r1, r0, lsl #8
    20f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    20f8:	00002144 	andeq	r2, r0, r4, asr #2
}
    20fc:	00002147 	andeq	r2, r0, r7, asr #2
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2100:	47510001 	ldrbmi	r0, [r1, -r1]
    2104:	6a000021 	bvs	2190 <tcvphy_reg+0xc>
			return 0;
    2108:	01000021 	tsteq	r0, r1, lsr #32
    210c:	216a5600 	cmncs	sl, r0, lsl #12
    2110:	216d0000 	cmncs	sp, r0
    2114:	00010000 	andeq	r0, r1, r0
    2118:	00216d51 	eoreq	r6, r1, r1, asr sp
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    211c:	00218400 	eoreq	r8, r1, r0, lsl #8
    2120:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			syserror (EREQPAR, "tcv26");
    212c:	0000211c 	andeq	r2, r0, ip, lsl r1
		verify_fds (ses, "tcv27");
    2130:	00002131 	andeq	r2, r0, r1, lsr r1
    2134:	31520001 	cmpcc	r2, r1
    2138:	32000021 	andcc	r0, r0, #33	; 0x21
    213c:	01000021 	tsteq	r0, r1, lsr #32
    2140:	21325500 	teqcs	r2, r0, lsl #10
		if ((p = apb (size)) != NULL) {
    2144:	21470000 	mrscs	r0, (UNDEF: 71)
    2148:	00010000 	andeq	r0, r1, r0
		return NULL;
    214c:	00214752 	eoreq	r4, r1, r2, asr r7
			p->attributes = descriptors [ses] -> attpattern;
    2150:	00216a00 	eoreq	r6, r1, r0, lsl #20
			dispose (p, dsp);
    2154:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			p->attributes = descriptors [ses] -> attpattern;
    2158:	0000216a 	andeq	r2, r0, sl, ror #2
			p->attributes.b.outgoing = 0;
    215c:	0000216d 	andeq	r2, r0, sp, ror #2
			dispose (p, dsp);
    2160:	6d520001 	ldclvs	0, cr0, [r2, #-4]
			return (address)(p + 1);
    2164:	84000021 	strhi	r0, [r0], #-33	; 0xffffffdf
    2168:	01000021 	tsteq	r0, r1, lsr #32
	if ((p = apb (size)) != NULL)
    216c:	00005500 	andeq	r5, r0, r0, lsl #10
    2170:	00000000 	andeq	r0, r0, r0
		return (address)(p + 1);
    2174:	21480000 	mrscs	r0, (UNDEF: 72)
    2178:	214e0000 	mrscs	r0, (UNDEF: 78)
    217c:	00010000 	andeq	r0, r1, r0
    2180:	00215050 	eoreq	r5, r1, r0, asr r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2184:	00216300 	eoreq	r6, r1, r0, lsl #6
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2188:	50000100 	andpl	r0, r0, r0, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    218c:	00002163 	andeq	r2, r0, r3, ror #2
    2190:	0000216a 	andeq	r2, r0, sl, ror #2
		syserror (EREQPAR, "tcv28");
    2194:	6e540001 	cdpvs	0, 5, cr0, cr4, cr1, {0}
		syserror (EMALLOC, "tcv29");
    2198:	74000021 	strvc	r0, [r0], #-33	; 0xffffffdf
	physical [phy] = ps;
    219c:	01000021 	tsteq	r0, r1, lsr #32
	physinfo [phy] = info;
    21a0:	00005000 	andeq	r5, r0, r0
    21a4:	00000000 	andeq	r0, r0, r0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a8:	212a0000 			; <UNDEFINED> instruction: 0x212a0000
    21ac:	212e0000 			; <UNDEFINED> instruction: 0x212e0000
    21b0:	00010000 	andeq	r0, r1, r0
		syserror (EMALLOC, "tcv29");
    21b4:	00000051 	andeq	r0, r0, r1, asr r0
    21b8:	00000000 	andeq	r0, r0, r0
	q_init (q);
    21bc:	00233400 	eoreq	r3, r3, r0, lsl #8
}
    21c0:	00234d00 	eoreq	r4, r3, r0, lsl #26
    21c4:	52000100 	andpl	r0, r0, #0, 2
    21c8:	00002358 	andeq	r2, r0, r8, asr r3
    21cc:	0000236c 	andeq	r2, r0, ip, ror #6
    21d0:	00520001 	subseq	r0, r2, r1
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21d4:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv30");
    21d8:	34000000 	strcc	r0, [r0], #-0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21dc:	4d000023 	stcmi	0, cr0, [r0, #-140]	; 0xffffff74
    21e0:	01000023 	tsteq	r0, r3, lsr #32
	verify_fph (phy, "tcv30");
    21e4:	235c5300 	cmpcs	ip, #0, 6
    21e8:	236c0000 	cmncs	ip, #0
    21ec:	00010000 	andeq	r0, r1, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    21f0:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if (plugins [plg] == NULL)
    2200:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    220c:	00500001 	subseq	r0, r0, r1
	...
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    221c:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2220:	00005100 	andeq	r5, r0, r0, lsl #2
    2224:	00000000 	andeq	r0, r0, r0
    2228:	00010000 	andeq	r0, r1, r0
    222c:	00000051 	andeq	r0, r0, r1, asr r0
	...
	len -= (ap.head + ap.tail);
    223c:	52000100 	andpl	r0, r0, #0, 2
	...
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2248:	00520001 	subseq	r0, r2, r1
	...
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2258:	01000000 	mrseq	r0, (UNDEF: 0)
	return 1;
    225c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    226c:	00010000 	andeq	r0, r1, r0
	verify_fph (phy, "tcv32");
    2270:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2280:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	b = q_first (oq);
    228c:	00030005 	andeq	r0, r3, r5
	...
	deq (b);	// Dequeue the packet ...
    2298:	01000000 	mrseq	r0, (UNDEF: 0)
}
    229c:	00005000 	andeq	r5, r0, r0
		return NULL;
    22a0:	00000000 	andeq	r0, r0, r0
    22a4:	00050000 	andeq	r0, r5, r0
    22a8:	00000003 	andeq	r0, r0, r3
	...
	verify_fph (phy, "tcv33");
    22bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	oq = oqueues [phy];
    22c8:	00500001 	subseq	r0, r0, r1
	b = q_first (oq);
    22cc:	00000000 	andeq	r0, r0, r0
		return NULL;
    22d0:	01000000 	mrseq	r0, (UNDEF: 0)
	return (address)(b + 1);
    22d4:	00005000 	andeq	r5, r0, r0
}
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	00010000 	andeq	r0, r1, r0
    22e0:	00000050 	andeq	r0, r0, r0, asr r0
	...
	verify_plg (b, tcv_xmt, "tcv34");
    22f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2304:	00500001 	subseq	r0, r0, r1
	...
	dispose (b, plugins [b->attributes.b.plugin] ->
    2314:	01000000 	mrseq	r0, (UNDEF: 0)
    2318:	00005000 	andeq	r5, r0, r0
	...
{
    2328:	00010000 	andeq	r0, r1, r0
    SetupTrimDevice();
    232c:	00000051 	andeq	r0, r0, r1, asr r0
    pui32Src = &_etext;
    2330:	00000000 	andeq	r0, r0, r0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2334:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    2348:	00520001 	subseq	r0, r2, r1
	...
        *pui32Dest++ = *pui32Src++;
    2358:	01000000 	mrseq	r0, (UNDEF: 0)
    235c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    236c:	00010000 	andeq	r0, r1, r0
    2370:	00000054 	andeq	r0, r0, r4, asr r0
static byte get_byte () {
    2374:	00000000 	andeq	r0, r0, r0
    2378:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2384:	00540001 	subseq	r0, r4, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2394:	01000000 	mrseq	r0, (UNDEF: 0)
	for (b = 0, i = 0; i < 8; i++) {
    2398:	00005000 	andeq	r5, r0, r0
}
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	00010000 	andeq	r0, r1, r0
    23a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    23b4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23c0:	00560001 	subseq	r0, r6, r1
	for (i = 0; i < 8; i++) {
    23c4:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    23c8:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = 0; i < 8; i++) {
    23cc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    23dc:	00010000 	andeq	r0, r1, r0
	put_byte (cmd);
    23e0:	00000052 	andeq	r0, r0, r2, asr r0
    23e4:	00000000 	andeq	r0, r0, r0
}
    23e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	while (dopen && (rdsr () & 1)) {
    23fc:	00540001 	subseq	r0, r4, r1
	...
	put_byte (CMD_RDSR);
    240c:	01000000 	mrseq	r0, (UNDEF: 0)
	r = get_byte ();
    2410:	00005000 	andeq	r5, r0, r0
	...
		if (st == WNONE)
    2420:	00010000 	andeq	r0, r1, r0
    2424:	00000050 	andeq	r0, r0, r0, asr r0
			mdelay (1);
    2428:	00000000 	andeq	r0, r0, r0
    242c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			release;
    2438:	00500001 	subseq	r0, r0, r1
	...
	if (dopen) {
    2448:	01000000 	mrseq	r0, (UNDEF: 0)
		wwait (WNONE, 1);
    244c:	00005100 	andeq	r5, r0, r0, lsl #2
    2450:	00000000 	andeq	r0, r0, r0
    2454:	00010000 	andeq	r0, r1, r0
	dstat = 0;
    2458:	00000056 	andeq	r0, r0, r6, asr r0
}
    245c:	00000000 	andeq	r0, r0, r0
    2460:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    246c:	00510001 	subseq	r0, r1, r1
	...
		dopen = DOPEN_TEMP;
    247c:	01000000 	mrseq	r0, (UNDEF: 0)
    2480:	00005200 	andeq	r5, r0, r0, lsl #4
static void cclose () {
    2484:	00000000 	andeq	r0, r0, r0
	if (dopen == DOPEN_TEMP) {
    2488:	00010000 	andeq	r0, r1, r0
    248c:	00000052 	andeq	r0, r0, r2, asr r0
		wwait (WNONE, 1);
    2490:	00000000 	andeq	r0, r0, r0
    2494:	0023f000 	eoreq	pc, r3, r0
	cmd_0 (CMD_DP);
    2498:	00240000 	eoreq	r0, r4, r0
    249c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
word ee_open () {
    24a8:	000023f0 	strdeq	r2, [r0], -r0
	ready ();
    24ac:	00002400 	andeq	r2, r0, r0, lsl #8
	dopen = DOPEN_PERM;
    24b0:	00510001 	subseq	r0, r1, r1
    24b4:	00000000 	andeq	r0, r0, r0
}
    24b8:	12000000 	andne	r0, r0, #0
	if (dopen) {
    24bc:	16000024 	strne	r0, [r0], -r4, lsr #32
    24c0:	01000024 	tsteq	r0, r4, lsr #32
		dopen = DOPEN_TEMP;
    24c4:	00005000 	andeq	r5, r0, r0
		cclose ();
    24c8:	00000000 	andeq	r0, r0, r0
}
    24cc:	23d80000 	bicscs	r0, r8, #0
int ser_out (word st, const char *m) {
    24d0:	23e30000 	mvncs	r0, #0
	if ((prcs = running (__outserial)) != 0) {
    24d4:	00010000 	andeq	r0, r1, r0
    24d8:	00000050 	andeq	r0, r0, r0, asr r0
    24dc:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    24e0:	0023a800 	eoreq	sl, r3, r0, lsl #16
		release;
    24e4:	0023c400 	eoreq	ip, r3, r0, lsl #8
	if (*m)
    24e8:	50000100 	andpl	r0, r0, r0, lsl #2
		prcs = strlen (m) +1;
    24ec:	000023cc 	andeq	r2, r0, ip, asr #7
    24f0:	000023d8 	ldrdeq	r2, [r0], -r8
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    24f4:	00500001 	subseq	r0, r0, r1
    24f8:	00000000 	andeq	r0, r0, r0
    24fc:	84000000 	strhi	r0, [r0], #-0
		umwait (st);
    2500:	88000023 	stmdahi	r0, {r0, r1, r5}
    2504:	01000023 	tsteq	r0, r3, lsr #32
		prcs =  m [1] + 3;
    2508:	238c5000 	orrcs	r5, ip, #0
	if (*m)
    250c:	23a80000 			; <UNDEFINED> instruction: 0x23a80000
		strcpy (buf, m);
    2510:	00010000 	andeq	r0, r1, r0
    2514:	00000050 	andeq	r0, r0, r0, asr r0
	if (runstrand (__outserial, buf) == 0) {
    2518:	00000000 	andeq	r0, r0, r0
    251c:	0024d000 	eoreq	sp, r4, r0
		ufree (buf);
    2520:	0024d600 	eoreq	sp, r4, r0, lsl #12
    2524:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		memcpy (buf, m, prcs);
    2530:	000024d0 	ldrdeq	r2, [r0], -r0
}
    2534:	000024db 	ldrdeq	r2, [r0], -fp
    2538:	db510001 	blle	1442544 <__ccfg+0x142259c>
int ser_in (word st, char *buf, int len) {
    253c:	36000024 	strcc	r0, [r0], -r4, lsr #32
    2540:	01000025 	tsteq	r0, r5, lsr #32
	if (len == 0)
    2544:	00005400 	andeq	r5, r0, r0, lsl #8
	if (__inpline == NULL) {
    2548:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    254c:	24dc0000 	ldrbcs	r0, [ip], #0
    2550:	24e30000 	strbtcs	r0, [r3], #0
			prcs = runthread (__inserial);
    2554:	00010000 	andeq	r0, r1, r0
    2558:	0024e850 	eoreq	lr, r4, r0, asr r8
			if (prcs == 0) {
    255c:	0024ee00 	eoreq	lr, r4, r0, lsl #28
				npwait (st);
    2560:	50000100 	andpl	r0, r0, r0, lsl #2
		release;
    2564:	000024f4 	strdeq	r2, [r0], -r4
		join (prcs, st);
    2568:	00002506 	andeq	r2, r0, r6, lsl #10
    256c:	06550001 	ldrbeq	r0, [r5], -r1
	if (*__inpline == NULL) // bin cmd
    2570:	0a000025 	beq	260c <ser_inf+0x4>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2574:	01000025 	tsteq	r0, r5, lsr #32
	if (prcs >= len)
    2578:	250a5000 	strcs	r5, [sl, #-0]
		prcs = len-1;
    257c:	25360000 	ldrcs	r0, [r6, #-0]!
	memcpy (buf, __inpline, prcs);
    2580:	00010000 	andeq	r0, r1, r0
    2584:	00000055 	andeq	r0, r0, r5, asr r0
    2588:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    258c:	0024fa00 	eoreq	pc, r4, r0, lsl #20
	__inpline = NULL;
    2590:	0024fe00 	eoreq	pc, r4, r0, lsl #28
	if (*buf) // if it's NULL, it's a bin cmd
    2594:	50000100 	andpl	r0, r0, r0, lsl #2
		buf [prcs] = '\0';
    2598:	000024fe 	strdeq	r2, [r0], -lr
}
    259c:	00002506 	andeq	r2, r0, r6, lsl #10
		prcs = strlen (__inpline);
    25a0:	0c570001 	mrrceq	0, 0, r0, r7, cr1
    25a4:	15000025 	strne	r0, [r0, #-37]	; 0xffffffdb
		return 0;
    25a8:	01000025 	tsteq	r0, r5, lsr #32
    25ac:	25155000 	ldrcs	r5, [r5, #-0]
    25b0:	25280000 	strcs	r0, [r8, #-0]!
int ser_outf (word st, const char *m, ...) {
    25b4:	00010000 	andeq	r0, r1, r0
    25b8:	00252857 	eoreq	r2, r5, r7, asr r8
	if ((prcs = running (__outserial)) != 0) {
    25bc:	00252f00 	eoreq	r2, r5, r0, lsl #30
    25c0:	50000100 	andpl	r0, r0, r0, lsl #2
		join (prcs, st);
    25c4:	0000252f 	andeq	r2, r0, pc, lsr #10
    25c8:	00002536 	andeq	r2, r0, r6, lsr r5
		release;
    25cc:	00570001 	subseq	r0, r7, r1
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d0:	00000000 	andeq	r0, r0, r0
    25d4:	3c000000 	stccc	0, cr0, [r0], {-0}
    25d8:	4a000025 	bmi	2674 <plugch+0xc>
		umwait (st);
    25dc:	01000025 	tsteq	r0, r5, lsr #32
    25e0:	25a65000 	strcs	r5, [r6, #0]!
	if (runstrand (__outserial, buf) == 0) {
    25e4:	25b40000 	ldrcs	r0, [r4, #0]!
    25e8:	00010000 	andeq	r0, r1, r0
    25ec:	00000050 	andeq	r0, r0, r0, asr r0
		ufree (buf);
    25f0:	00000000 	andeq	r0, r0, r0
		npwait (st);
    25f4:	00253c00 	eoreq	r3, r5, r0, lsl #24
}
    25f8:	00255100 	eoreq	r5, r5, r0, lsl #2
    25fc:	51000100 	mrspl	r0, (UNDEF: 16)
    2600:	00002551 	andeq	r2, r0, r1, asr r5
    2604:	00002570 	andeq	r2, r0, r0, ror r5
int ser_inf (word st, const char *fmt, ...) {
    2608:	70570001 	subsvc	r0, r7, r1
    260c:	78000025 	stmdavc	r0, {r0, r2, r5}
	if (fmt == NULL)
    2610:	01000025 	tsteq	r0, r5, lsr #32
	if (__inpline == NULL) {
    2614:	25785100 	ldrbcs	r5, [r8, #-256]!	; 0xffffff00
		if ((prcs = running (__inserial)) == 0) {
    2618:	259e0000 	ldrcs	r0, [lr]
    261c:	00010000 	andeq	r0, r1, r0
			prcs = runthread (__inserial);
    2620:	00259e57 	eoreq	r9, r5, r7, asr lr
    2624:	0025a100 	eoreq	sl, r5, r0, lsl #2
			if (prcs == 0) {
    2628:	51000100 	mrspl	r0, (UNDEF: 16)
				npwait (st);
    262c:	000025a1 	andeq	r2, r0, r1, lsr #11
		release;
    2630:	000025a6 	andeq	r2, r0, r6, lsr #11
		join (prcs, st);
    2634:	a6570001 	ldrbge	r0, [r7], -r1
    2638:	b4000025 	strlt	r0, [r0], #-37	; 0xffffffdb
	va_start (ap, fmt);
    263c:	01000025 	tsteq	r0, r5, lsr #32
	prcs = vscan (__inpline, fmt, ap);
    2640:	00005100 	andeq	r5, r0, r0, lsl #2
    2644:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    2648:	253c0000 	ldrcs	r0, [ip, #-0]!
	__inpline = NULL;
    264c:	25510000 	ldrbcs	r0, [r1, #-0]
}
    2650:	00010000 	andeq	r0, r1, r0
    2654:	00255152 	eoreq	r5, r5, r2, asr r1
    2658:	00257000 	eoreq	r7, r5, r0
		return 0;
    265c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2660:	00002570 	andeq	r2, r0, r0, ror r5
    2664:	00002578 	andeq	r2, r0, r8, ror r5
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2668:	78520001 	ldmdavc	r2, {r0}^
    266c:	9e000025 	cdpls	0, 0, cr0, cr0, cr5, {1}
    2670:	01000025 	tsteq	r0, r5, lsr #32
	RF_cmdFs.frequency = 
    2674:	259e5500 	ldrcs	r5, [lr, #1280]	; 0x500
}
    2678:	25a10000 	strcs	r0, [r1, #0]!
    267c:	00010000 	andeq	r0, r1, r0
    2680:	0025a152 	eoreq	sl, r5, r2, asr r1
    2684:	0025a600 	eoreq	sl, r5, r0, lsl #12
static int option (int opt, address val) {
    2688:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    268c:	000025a6 	andeq	r2, r0, r6, lsr #11
    2690:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
    2694:	00520001 	subseq	r0, r2, r1
    2698:	00000000 	andeq	r0, r0, r0
    269c:	52000000 	andpl	r0, r0, #0
    26a0:	58000025 	stmdapl	r0, {r0, r2, r5}
    26a4:	01000025 	tsteq	r0, r5, lsr #32
    26a8:	25585000 	ldrbcs	r5, [r8, #-0]
    26ac:	255b0000 	ldrbcs	r0, [fp, #-0]
    26b0:	00010000 	andeq	r0, r1, r0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    26b4:	00255c51 	eoreq	r5, r5, r1, asr ip
    26b8:	00256000 	eoreq	r6, r5, r0
			goto RVal;
    26bc:	50000100 	andpl	r0, r0, r0, lsl #2
			_BIS (dstate, DSTATE_RXON);
    26c0:	00002568 	andeq	r2, r0, r8, ror #10
    26c4:	0000256d 	andeq	r2, r0, sp, ror #10
	int ret = 0;
    26c8:	78500001 	ldmdavc	r0, {r0}^
			p_trigger (drvprcs, qevent);
    26cc:	9a000025 	bls	2768 <option+0xe0>
    26d0:	01000025 	tsteq	r0, r5, lsr #32
    26d4:	25a45400 	strcs	r5, [r4, #1024]!	; 0x400
    26d8:	25a60000 	strcs	r0, [r6, #0]!
    26dc:	00010000 	andeq	r0, r1, r0
    26e0:	00000050 	andeq	r0, r0, r0, asr r0
    26e4:	00000000 	andeq	r0, r0, r0
    26e8:	0025b400 	eoreq	fp, r5, r0, lsl #8
    26ec:	0025bc00 	eoreq	fp, r5, r0, lsl #24
    26f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			_BIC (dstate, DSTATE_RXON);
    26fc:	000025c0 	andeq	r2, r0, r0, asr #11
			statid = (val == NULL) ? 0 : *val;
    2700:	000025c9 	andeq	r2, r0, r9, asr #11
    2704:	c9500001 	ldmdbgt	r0, {r0}^
	int ret = 0;
    2708:	ce000025 	cdpgt	0, 0, cr0, cr0, cr5, {1}
			ret = (int) statid;
    270c:	01000025 	tsteq	r0, r5, lsr #32
	if (val != NULL)
    2710:	25ce5600 	strbcs	r5, [lr, #1536]	; 0x600
		*val = ret;
    2714:	25d70000 	ldrbcs	r0, [r7]
			ret = rbuffl + 2;
    2718:	00010000 	andeq	r0, r1, r0
    271c:	0025d750 	eoreq	sp, r5, r0, asr r7
			if (val != NULL) {
    2720:	0025fe00 	eoreq	pc, r5, r0, lsl #28
				memcpy (val, &rxstat,
    2724:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2728:	000025fe 	strdeq	r2, [r0], -lr
				memset (&rxstat, 0, 
    272c:	00002608 	andeq	r2, r0, r8, lsl #12
    2730:	00500001 	subseq	r0, r0, r1
			if (val == NULL)
    2734:	00000000 	andeq	r0, r0, r0
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2738:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    273c:	dc000025 	stcle	0, cr0, [r0], {37}	; 0x25
				utimer_set (bckf_timer, *val);
    2740:	01000025 	tsteq	r0, r5, lsr #32
    2744:	25dc5000 	ldrbcs	r5, [ip]
    2748:	25e40000 	strbcs	r0, [r4, #0]!
			for (ret = 0; ret < 8; ret++)
    274c:	00010000 	andeq	r0, r1, r0
				if (RF_cmdPropRadioDivSetup.txPower
    2750:	0025e455 	eoreq	lr, r5, r5, asr r4
					== patable [ret])
    2754:	0025e800 	eoreq	lr, r5, r0, lsl #16
				if (RF_cmdPropRadioDivSetup.txPower
    2758:	50000100 	andpl	r0, r0, r0, lsl #2
			for (ret = 0; ret < 8; ret++)
    275c:	000025e8 	andeq	r2, r0, r8, ror #11
    2760:	000025fe 	strdeq	r2, [r0], -lr
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2764:	00550001 	subseq	r0, r5, r1
    2768:	00000000 	andeq	r0, r0, r0
    276c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2770:	16000026 	strne	r0, [r0], -r6, lsr #32
    2774:	01000026 	tsteq	r0, r6, lsr #32
			_BIS (dstate, DSTATE_IRST);
    2778:	265c5000 	ldrbcs	r5, [ip], -r0
    277c:	26680000 	strbtcs	r0, [r8], -r0
    2780:	00010000 	andeq	r0, r1, r0
			ret = (int) channel;
    2784:	00000050 	andeq	r0, r0, r0, asr r0
			goto RVal;
    2788:	00000000 	andeq	r0, r0, r0
				(*val > 7) ? 7 : *val;
    278c:	00261e00 	eoreq	r1, r6, r0, lsl #28
    2790:	00262400 	eoreq	r2, r6, r0, lsl #8
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2794:	50000100 	andpl	r0, r0, r0, lsl #2
    2798:	00002624 	andeq	r2, r0, r4, lsr #12
			plugch ();
    279c:	00002627 	andeq	r2, r0, r7, lsr #12
			_BIS (dstate, DSTATE_IRST);
    27a0:	28510001 	ldmdacs	r1, {r0}^
    27a4:	2c000026 	stccs	0, cr0, [r0], {38}	; 0x26
			ret = (int) vrate;
    27a8:	01000026 	tsteq	r0, r6, lsr #32
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27ac:	26345000 	ldrtcs	r5, [r4], -r0
    27b0:	26390000 	ldrtcs	r0, [r9], -r0
    27b4:	00010000 	andeq	r0, r1, r0
    27b8:	00264650 	eoreq	r4, r6, r0, asr r6
    27bc:	00264800 	eoreq	r4, r6, r0, lsl #16
    27c0:	50000100 	andpl	r0, r0, r0, lsl #2
    27c4:	00002648 	andeq	r2, r0, r8, asr #12
    27c8:	00002650 	andeq	r2, r0, r0, asr r6
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27cc:	00540001 	subseq	r0, r4, r1
    27d0:	00000000 	andeq	r0, r0, r0
    27d4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    27d8:	d600002d 	strle	r0, [r0], -sp, lsr #32
			syserror (EREQPAR, "cc13 op");
    27dc:	0100002d 	tsteq	r0, sp, lsr #32
    27e0:	2dd65000 	ldclcs	0, cr5, [r6]
    27e4:	2ddc0000 	ldclcs	0, cr0, [ip]
    27e8:	00010000 	andeq	r0, r1, r0
    27ec:	002ddc56 	eoreq	sp, sp, r6, asr ip
    27f0:	002de600 	eoreq	lr, sp, r0, lsl #12
    27f4:	50000100 	andpl	r0, r0, r0, lsl #2
    27f8:	00002de6 	andeq	r2, r0, r6, ror #27
    27fc:	00002dea 	andeq	r2, r0, sl, ror #27
    2800:	ea560001 	b	158280c <__ccfg+0x1562864>
    2804:	fa00002d 	blx	28c0 <rf_off+0x3c>
    2808:	0100002d 	tsteq	r0, sp, lsr #32
    280c:	2dfa5000 	ldclcs	0, cr5, [sl]
    2810:	2ef20000 	cdpcs	0, 15, cr0, cr2, cr0, {0}
    2814:	00010000 	andeq	r0, r1, r0
static void issue_cmd (lword cmd) {
    2818:	00000056 	andeq	r0, r0, r6, asr r0
    281c:	00000000 	andeq	r0, r0, r0
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2820:	002dc800 	eoreq	ip, sp, r0, lsl #16
    2824:	002dd800 	eoreq	sp, sp, r0, lsl #16
    2828:	51000100 	mrspl	r0, (UNDEF: 16)
		if (res != 0x86)
    282c:	00002ddc 	ldrdeq	r2, [r0], -ip
			syserror (EHARDWARE, "hang ic0");
    2830:	00002de8 	andeq	r2, r0, r8, ror #27
    2834:	ea510001 	b	1442840 <__ccfg+0x1422898>
		if (cnt-- == 0) {
    2838:	fa00002d 	blx	28f4 <wait_cmd.constprop.0+0x14>
			diag ("HUP %lx %lx", cmd, res);
    283c:	0100002d 	tsteq	r0, sp, lsr #32
    2840:	00005100 	andeq	r5, r0, r0, lsl #2
			syserror (EHARDWARE, "hang ic0");
    2844:	00000000 	andeq	r0, r0, r0
		udelay (1);
    2848:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    284c:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
}
    2850:	00010000 	andeq	r0, r1, r0
    2854:	002e4455 	eoreq	r4, lr, r5, asr r4
    2858:	002e4a00 	eoreq	r4, lr, r0, lsl #20
    285c:	70000200 	andvc	r0, r0, r0, lsl #4
	...
	if ((dstate & DSTATE_RXAC) == 0)
    2868:	002dfa00 	eoreq	pc, sp, r0, lsl #20
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    286c:	002e0300 	eoreq	r0, lr, r0, lsl #6
	_BIC (dstate, DSTATE_RXAC);
    2870:	53000100 	movwpl	r0, #256	; 0x100
    2874:	00002e03 	andeq	r2, r0, r3, lsl #28
}
    2878:	00002e66 	andeq	r2, r0, r6, ror #28
    287c:	985b0001 	ldmdals	fp, {r0}^
    2880:	9c00002e 	stcls	0, cr0, [r0], {46}	; 0x2e
static void rf_off () {
    2884:	0100002e 	tsteq	r0, lr, lsr #32
	if ((dstate & DSTATE_RFON) == 0)
    2888:	00005b00 	andeq	r5, r0, r0, lsl #22
    288c:	00000000 	andeq	r0, r0, r0
	IntDisable (INT_RFC_CPE_0);
    2890:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    2894:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2898:	00010000 	andeq	r0, r1, r0
	RFCAdi3VcoLdoVoltageMode (false);
    289c:	002e0e50 	eoreq	r0, lr, r0, asr lr
	RFCSynthPowerDown ();
    28a0:	002e3400 	eoreq	r3, lr, r0, lsl #8
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    28a4:	50000100 	andpl	r0, r0, r0, lsl #2
    28a8:	00002e34 	andeq	r2, r0, r4, lsr lr
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    28ac:	00002e37 	andeq	r2, r0, r7, lsr lr
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    28b0:	98530001 	ldmdals	r3, {r0}^
	OSCHF_SwitchToRcOscTurnOffXosc ();
    28b4:	9c00002e 	stcls	0, cr0, [r0], {46}	; 0x2e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    28b8:	0100002e 	tsteq	r0, lr, lsr #32
    28bc:	00005000 	andeq	r5, r0, r0
    28c0:	00000000 	andeq	r0, r0, r0
	_BIC (dstate, DSTATE_RFON);
    28c4:	26880000 	strcs	r0, [r8], r0
    28c8:	26b60000 	ldrtcs	r0, [r6], r0
}
    28cc:	00010000 	andeq	r0, r1, r0
    28d0:	0026be50 	eoreq	fp, r6, r0, asr lr
    28d4:	0026c800 	eoreq	ip, r6, r0, lsl #16
    28d8:	50000100 	andpl	r0, r0, r0, lsl #2
    28dc:	000026f6 	strdeq	r2, [r0], -r6
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    28e0:	00002708 	andeq	r2, r0, r8, lsl #14
    28e4:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    28e8:	10000027 	andne	r0, r0, r7, lsr #32
		if (cmd->status == tstat)
    28ec:	01000027 	tsteq	r0, r7, lsr #32
		if (timeout-- == 0) {
    28f0:	27185000 	ldrcs	r5, [r8, -r0]
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    28f4:	271c0000 	ldrcs	r0, [ip, -r0]
    28f8:	00010000 	andeq	r0, r1, r0
    28fc:	00271e50 	eoreq	r1, r7, r0, asr lr
			syserror (EHARDWARE, "rt2");
    2900:	00272400 	eoreq	r2, r7, r0, lsl #8
    2904:	50000100 	andpl	r0, r0, r0, lsl #2
		udelay (1);
    2908:	0000272c 	andeq	r2, r0, ip, lsr #14
		if (cmd->status == tstat)
    290c:	0000272e 	andeq	r2, r0, lr, lsr #14
}
    2910:	34500001 	ldrbcc	r0, [r0], #-1
    2914:	39000027 	stmdbcc	r0, {r0, r1, r2, r5}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2918:	01000027 	tsteq	r0, r7, lsr #32
    291c:	27485000 	strbcs	r5, [r8, -r0]
static void rf_on () {
    2920:	274e0000 	strbcs	r0, [lr, -r0]
    2924:	00010000 	andeq	r0, r1, r0
	OSCHF_TurnOnXosc();
    2928:	00276450 	eoreq	r6, r7, r0, asr r4
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    292c:	00276800 	eoreq	r6, r7, r0, lsl #16
    2930:	50000100 	andpl	r0, r0, r0, lsl #2
    2934:	00002784 	andeq	r2, r0, r4, lsl #15
    2938:	00002788 	andeq	r2, r0, r8, lsl #15
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    293c:	8a500001 	bhi	1402948 <__ccfg+0x13e29a0>
    2940:	dc000027 	stcle	0, cr0, [r0], {39}	; 0x27
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2944:	01000027 	tsteq	r0, r7, lsr #32
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2948:	00005000 	andeq	r5, r0, r0
	issue_cmd (
    294c:	00000000 	andeq	r0, r0, r0
    2950:	26880000 	strcs	r0, [r8], r0
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2954:	26c80000 	strbcs	r0, [r8], r0
    2958:	00010000 	andeq	r0, r1, r0
    295c:	0026f651 	eoreq	pc, r6, r1, asr r6	; <UNPREDICTABLE>
   pPatchTab[80] = 0;
    2960:	00270800 	eoreq	r0, r7, r0, lsl #16
   } while (--nIterations);
    2964:	51000100 	mrspl	r0, (UNDEF: 16)
   pPatchTab[53] = 2;
    2968:	0000270c 	andeq	r2, r0, ip, lsl #14
    296c:	00002710 	andeq	r2, r0, r0, lsl r7
   pPatchTab[55] = 3;
    2970:	10510001 	subsne	r0, r1, r1
   pPatchTab[110] = 4;
    2974:	18000027 	stmdane	r0, {r0, r1, r2, r5}
   pPatchTab[107] = 5;
    2978:	01000027 	tsteq	r0, r7, lsr #32
   pPatchTab[65] = 6;
    297c:	27185400 	ldrcs	r5, [r8, -r0, lsl #8]
    2980:	27260000 	strcs	r0, [r6, -r0]!
   pPatchTab[57] = 1;
    2984:	00010000 	andeq	r0, r1, r0
   pIrqPatch[1] = _IRQ_PATCH_0;
    2988:	00272651 	eoreq	r2, r7, r1, asr r6
   const uint32_t *pS = patchGenfskRfe;
    298c:	00272c00 	eoreq	r2, r7, r0, lsl #24
      t2 = *pS++;
    2990:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
      t4 = *pS++;
    2994:	0000272c 	andeq	r2, r0, ip, lsr #14
      t6 = *pS++;
    2998:	00002731 	andeq	r2, r0, r1, lsr r7
      t8 = *pS++;
    299c:	31510001 	cmpcc	r1, r1
      *pD++ = t1;
    29a0:	34000027 	strcc	r0, [r0], #-39	; 0xffffffd9
      *pD++ = t2;
    29a4:	01000027 	tsteq	r0, r7, lsr #32
      *pD++ = t3;
    29a8:	27345400 	ldrcs	r5, [r4, -r0, lsl #8]!
      *pD++ = t5;
    29ac:	27390000 	ldrcs	r0, [r9, -r0]!
      *pD++ = t7;
    29b0:	00010000 	andeq	r0, r1, r0
   } while (--nIterations);
    29b4:	00273951 	eoreq	r3, r7, r1, asr r9
    29b8:	00274800 	eoreq	r4, r7, r0, lsl #16
      *pD++ = t8;
    29bc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
   } while (--nIterations);
    29c0:	00002748 	andeq	r2, r0, r8, asr #14
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    29c4:	0000274a 	andeq	r2, r0, sl, asr #14
   *pD++ = t2;
    29c8:	4a510001 	bmi	14429d4 <__ccfg+0x1422a2c>
   *pD++ = t3;
    29cc:	4c000027 	stcmi	0, cr0, [r0], {39}	; 0x27
   *pD++ = t4;
    29d0:	01000027 	tsteq	r0, r7, lsr #32
   *pD++ = t5;
    29d4:	274c5400 	strbcs	r5, [ip, -r0, lsl #8]
    29d8:	27540000 	ldrbcs	r0, [r4, -r0]
	RFCAdi3VcoLdoVoltageMode (true);
    29dc:	00010000 	andeq	r0, r1, r0
    29e0:	00275451 	eoreq	r5, r7, r1, asr r4
       	RFCRfTrimSet (&rfTrim);
    29e4:	00276400 	eoreq	r6, r7, r0, lsl #8
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    29e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    29ec:	00002764 	andeq	r2, r0, r4, ror #14
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    29f0:	000027de 	ldrdeq	r2, [r0], -lr
    29f4:	de510001 	cdple	0, 5, cr0, cr1, cr1, {0}
	issue_cmd ((lword)&cmd_srt);
    29f8:	18000027 	stmdane	r0, {r0, r1, r2, r5}
    29fc:	01000028 	tsteq	r0, r8, lsr #32
	issue_cmd ((lword)&RF_cmdFs);
    2a00:	00005400 	andeq	r5, r0, r0, lsl #8
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2a04:	00000000 	andeq	r0, r0, r0
    2a08:	26bc0000 	ldrtcs	r0, [ip], r0
    2a0c:	26be0000 	ldrtcs	r0, [lr], r0
	IntEnable (INT_RFC_CPE_0);
    2a10:	00010000 	andeq	r0, r1, r0
	_BIC (dstate, DSTATE_IRST);
    2a14:	0026ca50 	eoreq	ip, r6, r0, asr sl
    2a18:	0026f400 	eoreq	pc, r6, r0, lsl #8
    2a1c:	50000100 	andpl	r0, r0, r0, lsl #2
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2a20:	00002710 	andeq	r2, r0, r0, lsl r7
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a24:	00002718 	andeq	r2, r0, r8, lsl r7
	IntEnable (INT_RFC_CPE_0);
    2a28:	54500001 	ldrbpl	r0, [r0], #-1
    2a2c:	64000027 	strvs	r0, [r0], #-39	; 0xffffffd9
}
    2a30:	01000027 	tsteq	r0, r7, lsr #32
	IntEnable (INT_RFC_CPE_0);
    2a34:	276e5000 	strbcs	r5, [lr, -r0]!
    2a38:	27840000 	strcs	r0, [r4, r0]
    2a3c:	00010000 	andeq	r0, r1, r0
    2a40:	00278850 	eoreq	r8, r7, r0, asr r8
    2a44:	00278a00 	eoreq	r8, r7, r0, lsl #20
    2a48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2a54:	000026de 	ldrdeq	r2, [r0], -lr
    2a58:	000026e8 	andeq	r2, r0, r8, ror #13
    2a5c:	00530001 	subseq	r0, r3, r1
    2a60:	00000000 	andeq	r0, r0, r0
    2a64:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2a68:	7c00002b 	stcvc	0, cr0, [r0], {43}	; 0x2b
    2a6c:	0100002b 	tsteq	r0, fp, lsr #32
    2a70:	2cf05000 	ldclcs	0, cr5, [r0]
    2a74:	2d080000 	stccs	0, cr0, [r8, #-0]
    2a78:	00010000 	andeq	r0, r1, r0
    2a7c:	002d1850 	eoreq	r1, sp, r0, asr r8
    2a80:	002d1f00 	eoreq	r1, sp, r0, lsl #30
    2a84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2a90:	00002be8 	andeq	r2, r0, r8, ror #23
    2a94:	00002bf0 	strdeq	r2, [r0], -r0
static void rx_int_enable () {
    2a98:	f0520001 			; <UNDEFINED> instruction: 0xf0520001
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2a9c:	f300002b 	vhadd.u8	d0, d0, d27
    2aa0:	0200002b 	andeq	r0, r0, #43	; 0x2b
    2aa4:	00007200 	andeq	r7, r0, r0, lsl #4
    2aa8:	00000000 	andeq	r0, r0, r0
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2aac:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2ab0:	9800002d 	stmdals	r0, {r0, r2, r3, r5}
    2ab4:	0100002d 	tsteq	r0, sp, lsr #32
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2ab8:	00005300 	andeq	r5, r0, r0, lsl #6
    2abc:	00000000 	andeq	r0, r0, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ac0:	2ad60000 	bcs	ff582ac8 <_estack+0xdf57dac8>
    2ac4:	2b1a0000 	blcs	682acc <__ccfg+0x662b24>
    2ac8:	00010000 	andeq	r0, r1, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2acc:	002b1a54 	eoreq	r1, fp, r4, asr sl
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2ad0:	002b2200 	eoreq	r2, fp, r0, lsl #4
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ad4:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
		if (db->status == DATA_ENTRY_FINISHED) {
    2ad8:	002b2200 	eoreq	r2, fp, r0, lsl #4
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2adc:	002b2c00 	eoreq	r2, fp, r0, lsl #24
    2ae0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			nr++;
    2ae4:	00002b2c 	andeq	r2, r0, ip, lsr #22
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ae8:	00002b31 	andeq	r2, r0, r1, lsr fp
    2aec:	00740002 	rsbseq	r0, r4, r2
    2af0:	00002b42 	andeq	r2, r0, r2, asr #22
    2af4:	00002b46 	andeq	r2, r0, r6, asr #22
				__dp [pl + 1] = __dp [pl] - 128;
    2af8:	00740002 	rsbseq	r0, r4, r2
	...
    2b04:	00002afe 	strdeq	r2, [r0], -lr
				__dp [pl] = 0;
    2b08:	00002b15 	andeq	r2, r0, r5, lsl fp
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b0c:	00520001 	subseq	r0, r2, r1
    2b10:	00000000 	andeq	r0, r0, r0
    2b14:	d6000000 	strle	r0, [r0], -r0
			db->status = DATA_ENTRY_PENDING;
    2b18:	3600002a 	strcc	r0, [r0], -sl, lsr #32
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b1c:	0100002b 	tsteq	r0, fp, lsr #32
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2b20:	2b425500 	blcs	1097f28 <__ccfg+0x1077f80>
				diag ("BAD RX");
    2b24:	2b460000 	blcs	1182b2c <__ccfg+0x1162b84>
    2b28:	00010000 	andeq	r0, r1, r0
	if (nr) {
    2b2c:	00000055 	andeq	r0, r0, r5, asr r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b30:	00000000 	andeq	r0, r0, r0
}
    2b34:	00281800 	eoreq	r1, r8, r0, lsl #16
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b38:	00281e00 	eoreq	r1, r8, r0, lsl #28
    2b3c:	50000100 	andpl	r0, r0, r0, lsl #2
    2b40:	0000281e 	andeq	r2, r0, lr, lsl r8
}
    2b44:	00002850 	andeq	r2, r0, r0, asr r8
    2b48:	00540001 	subseq	r0, r4, r1
    2b4c:	00000000 	andeq	r0, r0, r0
    2b50:	26000000 	strcs	r0, [r0], -r0
    2b54:	30000028 	andcc	r0, r0, r8, lsr #32
    2b58:	01000028 	tsteq	r0, r8, lsr #32
    2b5c:	28365200 	ldmdacs	r6!, {r9, ip, lr}
    2b60:	28410000 	stmdacs	r1, {}^	; <UNPREDICTABLE>
    2b64:	00010000 	andeq	r0, r1, r0
thread (cc1350_driver)
    2b68:	00284652 	eoreq	r4, r8, r2, asr r6
    2b6c:	00284b00 	eoreq	r4, r8, r0, lsl #22
    2b70:	52000100 	andpl	r0, r0, #0, 2
    2b74:	0000284e 	andeq	r2, r0, lr, asr #16
    2b78:	00002860 	andeq	r2, r0, r0, ror #16
		if (dstate & DSTATE_IRST) {
    2b7c:	00520001 	subseq	r0, r2, r1
    2b80:	00000000 	andeq	r0, r0, r0
    2b84:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
			rf_off ();
    2b88:	30000028 	andcc	r0, r0, r8, lsr #32
			_BIC (dstate,
    2b8c:	01000028 	tsteq	r0, r8, lsr #32
    2b90:	00005400 	andeq	r5, r0, r0, lsl #8
		if (dstate & DSTATE_RXAC) {
    2b94:	00000000 	andeq	r0, r0, r0
    2b98:	28e00000 	stmiacs	r0!, {}^	; <UNPREDICTABLE>
			if ((dstate & DSTATE_RXON) == 0)
    2b9c:	28ea0000 	stmiacs	sl!, {}^	; <UNPREDICTABLE>
				rx_de ();
    2ba0:	00010000 	andeq	r0, r1, r0
		if (paylen == 0) {
    2ba4:	0028ea50 	eoreq	lr, r8, r0, asr sl
    2ba8:	00291000 	eoreq	r1, r9, r0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2bac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2bb8:	000028e0 	andeq	r2, r0, r0, ror #17
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bbc:	000028ea 	andeq	r2, r0, sl, ror #17
    2bc0:	ea510001 	b	1442bcc <__ccfg+0x1422c24>
    2bc4:	10000028 	andne	r0, r0, r8, lsr #32
    2bc8:	01000029 	tsteq	r0, r9, lsr #32
    2bcc:	00005500 	andeq	r5, r0, r0, lsl #10
    2bd0:	00000000 	andeq	r0, r0, r0
    2bd4:	29ba0000 	ldmibcs	sl!, {}	; <UNPREDICTABLE>
    2bd8:	29c20000 	stmibcs	r2, {}^	; <UNPREDICTABLE>
		} else if (dstate & DSTATE_RXON) {
    2bdc:	00010000 	andeq	r0, r1, r0
	if (dstate & DSTATE_RFON)
    2be0:	00000052 	andeq	r0, r0, r2, asr r0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2be4:	00000000 	andeq	r0, r0, r0
		re->status = DATA_ENTRY_PENDING;
    2be8:	00298e00 	eoreq	r8, r9, r0, lsl #28
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2bec:	0029ba00 	eoreq	fp, r9, r0, lsl #20
	issue_cmd ((lword)&RF_cmdPropRx);
    2bf0:	53000100 	movwpl	r0, #256	; 0x100
	_BIS (dstate, DSTATE_RXAC);
    2bf4:	000029be 			; <UNDEFINED> instruction: 0x000029be
    2bf8:	000029c2 	andeq	r2, r0, r2, asr #19
    2bfc:	00530001 	subseq	r0, r3, r1
    2c00:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RXAC)
    2c04:	94000000 	strls	r0, [r0], #-0
    2c08:	c2000029 	andgt	r0, r0, #41	; 0x29
				if (statid != 0xffff)
    2c0c:	01000029 	tsteq	r0, r9, lsr #32
    2c10:	00005e00 	andeq	r5, r0, r0, lsl #28
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2c14:	00000000 	andeq	r0, r0, r0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2c18:	29980000 	ldmibcs	r8, {}	; <UNPREDICTABLE>
		if (paylen == 0) {
    2c1c:	29c20000 	stmibcs	r2, {}^	; <UNPREDICTABLE>
			wait (qevent, DR_LOOP);
    2c20:	00010000 	andeq	r0, r1, r0
    2c24:	00000057 	andeq	r0, r0, r7, asr r0
			if (dstate & DSTATE_RXAC) {
    2c28:	00000000 	andeq	r0, r0, r0
    2c2c:	00299c00 	eoreq	r9, r9, r0, lsl #24
				rx_int_enable ();
    2c30:	0029d800 	eoreq	sp, r9, r0, lsl #16
			release;
    2c34:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				delay (offdelay, DR_GOOF);
    2c40:	0000299c 	muleq	r0, ip, r9
    2c44:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
		if (bckf_timer) {
    2c48:	b4500001 	ldrblt	r0, [r0], #-1
			wait (qevent, DR_LOOP);
    2c4c:	be000029 	cdplt	0, 0, cr0, cr0, cr9, {1}
    2c50:	02000029 	andeq	r0, r0, #41	; 0x29
    2c54:	be187300 	cdplt	3, 1, cr7, cr8, cr0, {0}
			delay (bckf_timer, DR_LOOP);
    2c58:	c0000029 	andgt	r0, r0, r9, lsr #32
    2c5c:	02000029 	andeq	r0, r0, #41	; 0x29
			if (dstate & DSTATE_RXAC)
    2c60:	00187000 	andseq	r7, r8, r0
    2c64:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RFON)
    2c68:	ba000000 	blt	2c70 <cc1350_driver+0x108>
    2c6c:	d8000029 	stmdale	r0, {r0, r3, r5}
		rx_de ();
    2c70:	01000029 	tsteq	r0, r9, lsr #32
		RF_cmdPropTx . status = 0;
    2c74:	00005400 	andeq	r5, r0, r0, lsl #8
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c78:	00000000 	andeq	r0, r0, r0
    2c7c:	2f900000 	svccs	0x00900000
    2c80:	2f920000 	svccs	0x00920000
		issue_cmd ((lword)&cmd_cs);
    2c84:	00010000 	andeq	r0, r1, r0
		if (dstate & DSTATE_IRST)
    2c88:	00000050 	andeq	r0, r0, r0, asr r0
    2c8c:	00000000 	andeq	r0, r0, r0
    2c90:	002f8c00 	eoreq	r8, pc, r0, lsl #24
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2c94:	002f8e00 	eoreq	r8, pc, r0, lsl #28
    2c98:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2ca4:	00002f84 	andeq	r2, r0, r4, lsl #31
    2ca8:	00002f86 	andeq	r2, r0, r6, lsl #31
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2cac:	00500001 	subseq	r0, r0, r1
    2cb0:	00000000 	andeq	r0, r0, r0
				RF_cmdPropTx . status = 0;
    2cb4:	60000000 	andvs	r0, r0, r0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2cb8:	6a00002f 	bvs	2d7c <RFCCPE0IntHandler+0x24>
				issue_cmd ((lword)&RF_cmdPropTx);
    2cbc:	0100002f 	tsteq	r0, pc, lsr #32
				proceed (DR_XMIT);
    2cc0:	2f6c5000 	svccs	0x006c5000
    2cc4:	2f7a0000 	svccs	0x007a0000
			txtries++;
    2cc8:	00010000 	andeq	r0, r1, r0
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2ccc:	00000050 	andeq	r0, r0, r0, asr r0
    2cd0:	00000000 	andeq	r0, r0, r0
    2cd4:	002f6000 	eoreq	r6, pc, r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cd8:	002f6200 	eoreq	r6, pc, r0, lsl #4
		goto DR_LOOP__;
    2cdc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ce8:	00002f60 	andeq	r2, r0, r0, ror #30
		txtries = 0;
    2cec:	00002f64 	andeq	r2, r0, r4, ror #30
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2cf0:	00520001 	subseq	r0, r2, r1
    2cf4:	00000000 	andeq	r0, r0, r0
    2cf8:	60000000 	andvs	r0, r0, r0
    2cfc:	7800002f 	stmdavc	r0, {r0, r1, r2, r3, r5}
    2d00:	0100002f 	tsteq	r0, pc, lsr #32
		    tcvphy_top (physid) == NULL)
    2d04:	00005300 	andeq	r5, r0, r0, lsl #6
    2d08:	00000000 	andeq	r0, r0, r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d0c:	2f3c0000 	svccs	0x003c0000
    2d10:	2f480000 	svccs	0x00480000
			rf_off ();
    2d14:	00010000 	andeq	r0, r1, r0
endthread
    2d18:	002f4850 	eoreq	r4, pc, r0, asr r8	; <UNPREDICTABLE>
    2d1c:	002f6000 	eoreq	r6, pc, r0
    2d20:	53000100 	movwpl	r0, #256	; 0x100
	...
    2d2c:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    2d30:	00002fa2 	andeq	r2, r0, r2, lsr #31
    2d34:	a2500001 	subsge	r0, r0, #1
    2d38:	dc00002f 	stcle	0, cr0, [r0], {47}	; 0x2f
    2d3c:	0100002f 	tsteq	r0, pc, lsr #32
    2d40:	00005500 	andeq	r5, r0, r0, lsl #10
    2d44:	00000000 	andeq	r0, r0, r0
    2d48:	2f940000 	svccs	0x00940000
    2d4c:	2fa50000 	svccs	0x00a50000
    2d50:	00010000 	andeq	r0, r1, r0
    2d54:	002fa551 	eoreq	sl, pc, r1, asr r5	; <UNPREDICTABLE>
void RFCCPE0IntHandler (void) {
    2d58:	002fdc00 	eoreq	sp, pc, r0, lsl #24
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d5c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		_BIS (dstate, DSTATE_IRST);
    2d68:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2d6c:	00002fa5 	andeq	r2, r0, r5, lsr #31
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2d70:	b4520001 	ldrblt	r0, [r2], #-1
    2d74:	ba00002f 	blt	2e38 <phys_cc1350+0x70>
	p_trigger (drvprcs, qevent);
    2d78:	0100002f 	tsteq	r0, pc, lsr #32
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2d7c:	00005200 	andeq	r5, r0, r0, lsl #4
    2d80:	00000000 	andeq	r0, r0, r0
    2d84:	2fdc0000 	svccs	0x00dc0000
    2d88:	2ff30000 	svccs	0x00f30000
    2d8c:	00010000 	andeq	r0, r1, r0
    2d90:	002ff450 	eoreq	pc, pc, r0, asr r4	; <UNPREDICTABLE>
    2d94:	00300000 	eorseq	r0, r0, r0
    2d98:	50000100 	andpl	r0, r0, r0, lsl #2
    2d9c:	00003038 	andeq	r3, r0, r8, lsr r0
    2da0:	0000304c 	andeq	r3, r0, ip, asr #32
	RISE_N_SHINE;
    2da4:	00500001 	subseq	r0, r0, r1
    2da8:	00000000 	andeq	r0, r0, r0
    2dac:	e4000000 	str	r0, [r0], #-0
}
    2db0:	f000002f 			; <UNDEFINED> instruction: 0xf000002f
    2db4:	0100002f 	tsteq	r0, pc, lsr #32
    2db8:	2ff05500 	svccs	0x00f05500
    2dbc:	2ff30000 	svccs	0x00f30000
    2dc0:	00020000 	andeq	r0, r2, r0
    2dc4:	2ff40873 	svccs	0x00f40873
void phys_cc1350 (int phy, int mbs) {
    2dc8:	304c0000 	subcc	r0, ip, r0
	if (rbuffl != 0)
    2dcc:	00010000 	andeq	r0, r1, r0
    2dd0:	00000055 	andeq	r0, r0, r5, asr r0
		syserror (ETOOMANY, "cc13");
    2dd4:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "cc13 mb");
    2dd8:	00301a00 	eorseq	r1, r0, r0, lsl #20
	if (mbs == 0)
    2ddc:	00302c00 	eorseq	r2, r0, r0, lsl #24
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2de0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	i = 0;
    2dec:	0000304c 	andeq	r3, r0, ip, asr #32
	rbuffl = (byte) mbs;
    2df0:	00003068 	andeq	r3, r0, r8, rrx
		db->config.type = 0;	// General (data in structure)
    2df4:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
	rbuffl = (byte) mbs;
    2df8:	57000031 	smladxpl	r0, r1, r0, r0
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2dfc:	01000031 	tsteq	r0, r1, lsr r0
    2e00:	00005000 	andeq	r5, r0, r0
		if (db == NULL)
    2e04:	00000000 	andeq	r0, r0, r0
			syserror (EMALLOC, "cc13");
    2e08:	30540000 	subscc	r0, r4, r0
    2e0c:	30760000 	rsbscc	r0, r6, r0
    2e10:	00010000 	andeq	r0, r1, r0
		db->status = DATA_ENTRY_PENDING;
    2e14:	00307654 	eorseq	r7, r0, r4, asr r6
		if (i)
    2e18:	00307d00 	eorseq	r7, r0, r0, lsl #26
			da->pNextEntry = (byte*) db;
    2e1c:	50000100 	andpl	r0, r0, r0, lsl #2
		db->length = rbuffl + 2;
    2e20:	0000307d 	andeq	r3, r0, sp, ror r0
    2e24:	00003082 	andeq	r3, r0, r2, lsl #1
		db->config.type = 0;	// General (data in structure)
    2e28:	82540001 	subshi	r0, r4, #1
		db->length = rbuffl + 2;
    2e2c:	8c000030 	stchi	0, cr0, [r0], {48}	; 0x30
	db->pNextEntry = (byte*) re;
    2e30:	01000030 	tsteq	r0, r0, lsr r0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2e34:	308c5000 	addcc	r5, ip, r0
    2e38:	314a0000 	mrscc	r0, (UNDEF: 74)
	if (rbuffs == NULL)
    2e3c:	00010000 	andeq	r0, r1, r0
	rbuffs->pCurrEntry = (byte*) re;
    2e40:	00314e54 	eorseq	r4, r1, r4, asr lr
	rbuffs->pLastEntry = NULL;
    2e44:	00315400 	eorseq	r5, r1, r0, lsl #8
    2e48:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e4c:	00003154 	andeq	r3, r0, r4, asr r1
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2e50:	00003157 	andeq	r3, r0, r7, asr r1
    2e54:	08720002 	ldmdaeq	r2!, {r1}^
	...
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e60:	0000312e 	andeq	r3, r0, lr, lsr #2
	rbuffl -= 2;
    2e64:	00003130 	andeq	r3, r0, r0, lsr r1
	physid = phy;
    2e68:	30500001 	subscc	r0, r0, r1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e6c:	4a000031 	bmi	2f38 <phys_cc1350+0x170>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e70:	01000031 	tsteq	r0, r1, lsr r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e74:	00005600 	andeq	r5, r0, r0, lsl #12
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e78:	00000000 	andeq	r0, r0, r0
    2e7c:	33b80000 			; <UNDEFINED> instruction: 0x33b80000
	utimer_add (&bckf_timer);
    2e80:	33cf0000 	biccc	r0, pc, #0
	drvprcs = runthread (cc1350_driver);
    2e84:	00010000 	andeq	r0, r1, r0
    2e88:	0033cf50 	eorseq	ip, r3, r0, asr pc
    2e8c:	0033d600 	eorseq	sp, r3, r0, lsl #12
	if (drvprcs == 0)
    2e90:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		syserror (ERESOURCE, "cc13");
    2e94:	000033d6 	ldrdeq	r3, [r0], -r6
    2e98:	000033d8 	ldrdeq	r3, [r0], -r8
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2e9c:	d8500001 	ldmdale	r0, {r0}^
    2ea0:	e8000033 	stmda	r0, {r0, r1, r4, r5}
    2ea4:	01000033 	tsteq	r0, r3, lsr r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2ea8:	33e85400 	mvncc	r5, #0, 8
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2eac:	33f70000 	mvnscc	r0, #0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2eb0:	00010000 	andeq	r0, r1, r0
    2eb4:	0033f750 	eorseq	pc, r3, r0, asr r7	; <UNPREDICTABLE>
    2eb8:	00340800 	eorseq	r0, r4, r0, lsl #16
    2ebc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2ec8:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
    2ecc:	000033cc 	andeq	r3, r0, ip, asr #7
    2ed0:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
	plugch ();
    2ed4:	cf000033 	svcgt	0x00000033
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2ed8:	01000033 	tsteq	r0, r3, lsr r0
    2edc:	33cf5200 	biccc	r5, pc, #0, 4
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2ee0:	33d60000 	bicscc	r0, r6, #0
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2ee4:	00010000 	andeq	r0, r1, r0
    2ee8:	0033d656 	eorseq	sp, r3, r6, asr r6
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2eec:	0033db00 	eorseq	sp, r3, r0, lsl #22
}
    2ef0:	51000100 	mrspl	r0, (UNDEF: 16)
    2ef4:	000033db 	ldrdeq	r3, [r0], -fp
    2ef8:	00003408 	andeq	r3, r0, r8, lsl #8
    2efc:	00560001 	subseq	r0, r6, r1
    2f00:	00000000 	andeq	r0, r0, r0
    2f04:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2f08:	c0000033 	andgt	r0, r0, r3, lsr r0
    2f0c:	01000033 	tsteq	r0, r3, lsr r0
    2f10:	33c45200 	biccc	r5, r4, #0, 4
    2f14:	33c80000 	biccc	r0, r8, #0
    2f18:	00010000 	andeq	r0, r1, r0
    2f1c:	0033d052 	eorseq	sp, r3, r2, asr r0
    2f20:	0033d600 	eorseq	sp, r3, r0, lsl #12
    2f24:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2f28:	000033e2 	andeq	r3, r0, r2, ror #7
    2f2c:	00003408 	andeq	r3, r0, r8, lsl #8
    2f30:	00570001 	subseq	r0, r7, r1
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	e2000000 	and	r0, r0, #0
    2f3c:	04000033 	streq	r0, [r0], #-51	; 0xffffffcd
    2f40:	01000034 	tsteq	r0, r4, lsr r0
    2f44:	34045500 	strcc	r5, [r4], #-1280	; 0xfffffb00
    2f48:	34080000 	strcc	r0, [r8], #-0
    2f4c:	00010000 	andeq	r0, r1, r0
    2f50:	00000058 	andeq	r0, r0, r8, asr r0
    2f54:	00000000 	andeq	r0, r0, r0
    2f58:	0033fc00 	eorseq	pc, r3, r0, lsl #24
    2f5c:	00340000 	eorseq	r0, r4, r0
    2f60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2f6c:	00003188 	andeq	r3, r0, r8, lsl #3
    2f70:	000031a2 	andeq	r3, r0, r2, lsr #3
    2f74:	00500001 	subseq	r0, r0, r1
    2f78:	00000000 	andeq	r0, r0, r0
    2f7c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2f80:	a2000031 	andge	r0, r0, #49	; 0x31
    2f84:	01000031 	tsteq	r0, r1, lsr r0
    2f88:	00005100 	andeq	r5, r0, r0, lsl #2
    2f8c:	00000000 	andeq	r0, r0, r0
    2f90:	31880000 	orrcc	r0, r8, r0
    2f94:	31a20000 			; <UNDEFINED> instruction: 0x31a20000
    2f98:	00010000 	andeq	r0, r1, r0
    2f9c:	0031b252 	eorseq	fp, r1, r2, asr r2
    2fa0:	0031de00 	eorseq	sp, r1, r0, lsl #28
    2fa4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2fa8:	000031ec 	andeq	r3, r0, ip, ror #3
    2fac:	000033aa 	andeq	r3, r0, sl, lsr #7
    2fb0:	00550001 	subseq	r0, r5, r1
    2fb4:	00000000 	andeq	r0, r0, r0
    2fb8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2fbc:	8c000031 	stchi	0, cr0, [r0], {49}	; 0x31
    2fc0:	01000031 	tsteq	r0, r1, lsr r0
    2fc4:	318e5300 	orrcc	r5, lr, r0, lsl #6
    2fc8:	31900000 	orrscc	r0, r0, r0
    2fcc:	00030000 	andeq	r0, r3, r0
    2fd0:	90049353 	andls	r9, r4, r3, asr r3
    2fd4:	da000031 	ble	30a0 <__inserial+0x54>
    2fd8:	03000031 	movweq	r0, #49	; 0x31
strand (__outserial, const char*)
    2fdc:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2fe0:	000031da 	ldrdeq	r3, [r0], -sl
    2fe4:	0000322e 	andeq	r3, r0, lr, lsr #4
    2fe8:	93540003 	cmpls	r4, #3
endstrand
    2fec:	00322e04 	eorseq	r2, r2, r4, lsl #28
    2ff0:	00323a00 	eorseq	r3, r2, r0, lsl #20
	ptr = data;
    2ff4:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2ff8:	32420493 	subcc	r0, r2, #-1828716544	; 0x93000000
	if (*ptr)
    2ffc:	32640000 	rsbcc	r0, r4, #0
		len = strlen (ptr);
    3000:	00030000 	andeq	r0, r3, r0
    3004:	68049354 	stmdavs	r4, {r2, r4, r6, r8, r9, ip, pc}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3008:	e2000032 	and	r0, r0, #50	; 0x32
    300c:	03000032 	movweq	r0, #50	; 0x32
    3010:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3014:	000032e8 	andeq	r3, r0, r8, ror #5
    3018:	000032fc 	strdeq	r3, [r0], -ip
	len -= quant;
    301c:	93540003 	cmpls	r4, #3
    3020:	00334204 	eorseq	r4, r3, r4, lsl #4
    3024:	00334e00 	eorseq	r4, r3, r0, lsl #28
	if (len == 0) {
    3028:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
		ufree (data);
    302c:	33700493 	cmncc	r0, #-1828716544	; 0x93000000
		finish;
    3030:	33820000 	orrcc	r0, r2, #0
    3034:	00030000 	andeq	r0, r3, r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3038:	86049354 			; <UNDEFINED> instruction: 0x86049354
    303c:	8e000033 	mcrhi	0, 0, r0, cr0, cr3, {1}
    3040:	03000033 	movweq	r0, #51	; 0x33
    3044:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3048:	00003392 	muleq	r0, r2, r3
strand (__inserial, address)
    304c:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
    3050:	93540003 	cmpls	r4, #3
    3054:	00000004 	andeq	r0, r0, r4
    3058:	00000000 	andeq	r0, r0, r0
    305c:	0031a600 	eorseq	sl, r1, r0, lsl #12
	if (__inpline != NULL)
    3060:	0031b000 	eorseq	fp, r1, r0
    3064:	59000100 	stmdbpl	r0, {r8}
		finish;
    3068:	000031b0 			; <UNDEFINED> instruction: 0x000031b0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    306c:	000031b2 			; <UNDEFINED> instruction: 0x000031b2
    3070:	00720002 	rsbseq	r0, r2, r2
    3074:	000031b2 			; <UNDEFINED> instruction: 0x000031b2
    3078:	000031d6 	ldrdeq	r3, [r0], -r6
		umwait (IM_INIT);
    307c:	de590001 	cdple	0, 5, cr0, cr9, cr1, {0}
		release;
    3080:	ec000031 	stc	0, cr0, [r0], {49}	; 0x31
	savedata (data);
    3084:	01000031 	tsteq	r0, r1, lsr r0
	len = MAX_LINE_LENGTH;
    3088:	31ec5900 	mvncc	r5, r0, lsl #18
	io (IM_READ, __cport, READ, ptr, 1);
    308c:	32240000 	eorcc	r0, r4, #0
    3090:	00010000 	andeq	r0, r1, r0
    3094:	00322e58 	eorseq	r2, r2, r8, asr lr
    3098:	00323e00 	eorseq	r3, r2, r0, lsl #28
	if (ptr == (char*) data) { // new line
    309c:	58000100 	stmdapl	r0, {r8}
    30a0:	0000323e 	andeq	r3, r0, lr, lsr r2
		if (*ptr == '\0') { // bin cmd
    30a4:	00003246 	andeq	r3, r0, r6, asr #4
			proceed (IM_BIN);
    30a8:	01720002 	cmneq	r2, r2
    30ac:	00003264 	andeq	r3, r0, r4, ror #4
		if (*ptr < 0x20)
    30b0:	0000328e 	andeq	r3, r0, lr, lsl #5
    30b4:	92580001 	subsls	r0, r8, #1
			proceed (IM_READ);
    30b8:	96000032 			; <UNDEFINED> instruction: 0x96000032
    30bc:	01000032 	tsteq	r0, r2, lsr r0
	if (*ptr == '\n' || *ptr == '\r') {
    30c0:	32a05000 	adccc	r5, r0, #0
    30c4:	32aa0000 	adccc	r0, sl, #0
    30c8:	00010000 	andeq	r0, r1, r0
		*ptr = '\0';
    30cc:	0032ca50 	eorseq	ip, r2, r0, asr sl
		__inpline = (char*)data;
    30d0:	0032cc00 	eorseq	ip, r2, r0, lsl #24
		finish;
    30d4:	50000100 	andpl	r0, r0, r0, lsl #2
	if (len) {
    30d8:	000032d2 	ldrdeq	r3, [r0], -r2
		ptr++;
    30dc:	000032d4 	ldrdeq	r3, [r0], -r4
    30e0:	d4580001 	ldrble	r0, [r8], #-1
		len--;
    30e4:	f7000032 			; <UNDEFINED> instruction: 0xf7000032
	proceed (IM_READ);
    30e8:	01000032 	tsteq	r0, r2, lsr r0
	io (IM_BIN, __cport, READ, ptr, 1);
    30ec:	33065300 	movwcc	r5, #25344	; 0x6300
    30f0:	330a0000 	movwcc	r0, #40960	; 0xa000
    30f4:	00010000 	andeq	r0, r1, r0
    30f8:	00331459 	eorseq	r1, r3, r9, asr r4
    30fc:	00333400 	eorseq	r3, r3, r0, lsl #8
	len -= 2;
    3100:	59000100 	stmdbpl	r0, {r8}
	if (len > *ptr + 1) // 1 for 0x04
    3104:	0000333a 	andeq	r3, r0, sl, lsr r3
    3108:	0000333c 	andeq	r3, r0, ip, lsr r3
		len = *ptr + 1;
    310c:	42590001 	subsmi	r0, r9, #1
    3110:	50000033 	andpl	r0, r0, r3, lsr r0
	ptr++;
    3114:	01000033 	tsteq	r0, r3, lsr r0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3118:	33705300 	cmncc	r0, #0, 6
    311c:	33790000 	cmncc	r9, #0
    3120:	00010000 	andeq	r0, r1, r0
    3124:	00338253 	eorseq	r8, r3, r3, asr r2
    3128:	00339600 	eorseq	r9, r3, r0, lsl #12
    312c:	58000100 	stmdapl	r0, {r8}
	len -= quant;
    3130:	000033aa 	andeq	r3, r0, sl, lsr #7
		__inpline = (char*)data;
    3134:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
		finish;
    3138:	00590001 	subseq	r0, r9, r1
	ptr += quant;
    313c:	00000000 	andeq	r0, r0, r0
    3140:	46000000 	strmi	r0, [r0], -r0
endstrand
    3144:	64000032 	strvs	r0, [r0], #-50	; 0xffffffce
    3148:	01000032 	tsteq	r0, r2, lsr r0
	proceed (IM_BINL);
    314c:	00005800 	andeq	r5, r0, r0, lsl #16
endstrand
    3150:	00000000 	andeq	r0, r0, r0
    3154:	32700000 	rsbscc	r0, r0, #0
    3158:	32840000 	addcc	r0, r4, #0
    315c:	00010000 	andeq	r0, r1, r0
    3160:	00328859 	eorseq	r8, r2, r9, asr r8
    3164:	0032b600 	eorseq	fp, r2, r0, lsl #12
		if (res && (d < n))
    3168:	59000100 	stmdbpl	r0, {r8}
    316c:	000032be 			; <UNDEFINED> instruction: 0x000032be
    3170:	000032d2 	ldrdeq	r3, [r0], -r2
    3174:	00590001 	subseq	r0, r9, r1
			res [d] = (char) c;
    3178:	00000000 	andeq	r0, r0, r0
		d++;
    317c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3180:	c0000032 	andgt	r0, r0, r2, lsr r0
    3184:	01000032 	tsteq	r0, r2, lsr r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3188:	32c05800 	sbccc	r5, r0, #0, 16
    318c:	32cc0000 	sbccc	r0, ip, #0
    3190:	00010000 	andeq	r0, r1, r0
				enci (10000);
    3194:	0032cc53 	eorseq	ip, r2, r3, asr ip
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3198:	0032d200 	eorseq	sp, r2, r0, lsl #4
    319c:	58000100 	stmdapl	r0, {r8}
	...
		if (c == '\\') {
    31a8:	000032fc 	strdeq	r3, [r0], -ip
			if ((c = *fm++) == '\0') {
    31ac:	00003342 	andeq	r3, r0, r2, asr #6
    31b0:	005a0001 	subseq	r0, sl, r1
				outc ('\\');
    31b4:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    31b8:	02000000 	andeq	r0, r0, #0
				outc ('\\');
    31bc:	2c000033 	stccs	0, cr0, [r0], {51}	; 0x33
    31c0:	01000033 	tsteq	r0, r3, lsr r0
			outc (c);
    31c4:	332c5800 			; <UNDEFINED> instruction: 0x332c5800
    31c8:	333c0000 	teqcc	ip, #0
			if (c == '\0')
    31cc:	00010000 	andeq	r0, r1, r0
    31d0:	00333c53 	eorseq	r3, r3, r3, asr ip
			outc (c);
    31d4:	00334200 	eorseq	r4, r3, r0, lsl #4
				outc (val);
    31d8:	58000100 	stmdapl	r0, {r8}
	...
		if (c == '%') {
    31e4:	00003350 	andeq	r3, r0, r0, asr r3
			c = *fm++;
    31e8:	00003370 	andeq	r3, r0, r0, ror r3
			switch (c) {
    31ec:	00580001 	subseq	r0, r8, r1
    31f0:	00000000 	andeq	r0, r0, r0
    31f4:	82000000 	andhi	r0, r0, #0
    31f8:	86000033 			; <UNDEFINED> instruction: 0x86000033
    31fc:	02000033 	andeq	r0, r0, #51	; 0x33
    3200:	86007400 	strhi	r7, [r0], -r0, lsl #8
    3204:	8e000033 	mcrhi	0, 0, r0, cr0, cr3, {1}
    3208:	02000033 	andeq	r0, r0, #51	; 0x33
				outc ('%');
    320c:	007c7400 	rsbseq	r7, ip, r0, lsl #8
    3210:	00000000 	andeq	r0, r0, r0
				outc (c);
    3214:	9a000000 	bls	321c <__pi_vfparse+0x94>
    3218:	a8000033 	stmdage	r0, {r0, r1, r4, r5}
    321c:	01000033 	tsteq	r0, r3, lsr r0
				if (c == '\0')
    3220:	00005800 	andeq	r5, r0, r0, lsl #16
				return d;
    3224:	00000000 	andeq	r0, r0, r0
}
    3228:	34080000 	strcc	r0, [r8], #-0
    322c:	34240000 	strtcc	r0, [r4], #-0
			switch (c) {
    3230:	00010000 	andeq	r0, r1, r0
    3234:	00346250 	eorseq	r6, r4, r0, asr r2
    3238:	00347400 	eorseq	r7, r4, r0, lsl #8
				for (i = 12; ; i -= 4) {
    323c:	53000100 	movwpl	r0, #256	; 0x100
				val = (word) va_arg (ap, aword);
    3240:	00003474 	andeq	r3, r0, r4, ror r4
						[ (val >> i) & 0xf ]);
    3244:	00003488 	andeq	r3, r0, r8, lsl #9
    3248:	8a560001 	bhi	1583254 <__ccfg+0x15632ac>
    324c:	a6000034 			; <UNDEFINED> instruction: 0xa6000034
					outc (__pi_hex_enc_table
    3250:	01000034 	tsteq	r0, r4, lsr r0
    3254:	34b85600 	ldrtcc	r5, [r8], #1536	; 0x600
					if (i == 0)
    3258:	34c40000 	strbcc	r0, [r4], #0
    325c:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    3260:	0034c456 	eorseq	ip, r4, r6, asr r4
				val = (word) va_arg (ap, aword);
    3264:	0034ca00 	eorseq	ip, r4, r0, lsl #20
				if (c == 'd' && (val & 0x8000) != 0) {
    3268:	53000100 	movwpl	r0, #256	; 0x100
				val = (word) va_arg (ap, aword);
    326c:	000034d0 	ldrdeq	r3, [r0], -r0
				if (c == 'd' && (val & 0x8000) != 0) {
    3270:	000034d4 	ldrdeq	r3, [r0], -r4
    3274:	d4530001 	ldrble	r0, [r3], #-1
					outc ('-');
    3278:	e4000034 	str	r0, [r0], #-52	; 0xffffffcc
    327c:	01000034 	tsteq	r0, r4, lsr r0
					val = (~val) + 1;
    3280:	34e45e00 	strbtcc	r5, [r4], #3584	; 0xe00
    3284:	34fa0000 	ldrbtcc	r0, [sl], #0
				for (i = 12; ; i -= 4) {
    3288:	00010000 	andeq	r0, r1, r0
				enci (10000);
    328c:	0034fa53 	eorseq	pc, r4, r3, asr sl	; <UNPREDICTABLE>
    3290:	00350200 	eorseq	r0, r5, r0, lsl #4
    3294:	5e000100 	adfpls	f0, f0, f0
    3298:	00003508 	andeq	r3, r0, r8, lsl #10
    329c:	00003524 	andeq	r3, r0, r4, lsr #10
    32a0:	24530001 	ldrbcs	r0, [r3], #-1
    32a4:	2a000035 	bcs	3380 <__pi_vfparse+0x1f8>
    32a8:	01000035 	tsteq	r0, r5, lsr r0
    32ac:	352a5e00 	strcc	r5, [sl, #-3584]!	; 0xfffff200
    32b0:	352c0000 	strcc	r0, [ip, #-0]!
    32b4:	00010000 	andeq	r0, r1, r0
    32b8:	00353853 	eorseq	r3, r5, r3, asr r8
    32bc:	00353a00 	eorseq	r3, r5, r0, lsl #20
    32c0:	5e000100 	adfpls	f0, f0, f0
    32c4:	0000353a 	andeq	r3, r0, sl, lsr r5
    32c8:	0000354e 	andeq	r3, r0, lr, asr #10
    32cc:	4e530001 	cdpmi	0, 5, cr0, cr3, cr1, {0}
    32d0:	5e000035 	mcrpl	0, 0, r0, cr0, cr5, {1}
				if (c == 'd' || c == 'u') {
    32d4:	01000035 	tsteq	r0, r5, lsr r0
    32d8:	355e5600 	ldrbcc	r5, [lr, #-1536]	; 0xfffffa00
					if (c == 'd' &&
    32dc:	35720000 	ldrbcc	r0, [r2, #-0]!
					val = va_arg (ap, lword);
    32e0:	00010000 	andeq	r0, r1, r0
					fm++;
    32e4:	00358053 	eorseq	r8, r5, r3, asr r0
					if (c == 'd' &&
    32e8:	00358200 	eorseq	r8, r5, r0, lsl #4
    32ec:	56000100 	strpl	r0, [r0], -r0, lsl #2
						outc ('-');
    32f0:	00003582 	andeq	r3, r0, r2, lsl #11
    32f4:	0000359a 	muleq	r0, sl, r5
						val = (~val) + 1;
    32f8:	9a530001 	bls	14c3304 <__ccfg+0x14a335c>
				enci (10000);
    32fc:	b4000035 	strlt	r0, [r0], #-53	; 0xffffffcb
					enci (1000000000UL);
    3300:	01000035 	tsteq	r0, r5, lsr r0
    3304:	35ba5600 	ldrcc	r5, [sl, #1536]!	; 0x600
    3308:	35dc0000 	ldrbcc	r0, [ip]
    330c:	00010000 	andeq	r0, r1, r0
    3310:	0035dc53 	eorseq	sp, r5, r3, asr ip
    3314:	0035ee00 	eorseq	lr, r5, r0, lsl #28
    3318:	56000100 	strpl	r0, [r0], -r0, lsl #2
    331c:	00003614 	andeq	r3, r0, r4, lsl r6
    3320:	00003618 	andeq	r3, r0, r8, lsl r6
    3324:	18530001 	ldmdane	r3, {r0}^
    3328:	28000036 	stmdacs	r0, {r1, r2, r4, r5}
    332c:	01000036 	tsteq	r0, r6, lsr r0
    3330:	36285800 	strtcc	r5, [r8], -r0, lsl #16
    3334:	36380000 	ldrtcc	r0, [r8], -r0
    3338:	00010000 	andeq	r0, r1, r0
    333c:	00363853 	eorseq	r3, r6, r3, asr r8
    3340:	00364200 	eorseq	r4, r6, r0, lsl #4
				} else if (c == 'x') {
    3344:	58000100 	stmdapl	r0, {r8}
					for (i = 28; ; i -= 4) {
    3348:	00003648 	andeq	r3, r0, r8, asr #12
					val = va_arg (ap, lword);
    334c:	0000366a 	andeq	r3, r0, sl, ror #12
							[ (val >> i) & 0xf ]);
    3350:	70530001 	subsvc	r0, r3, r1
    3354:	80000036 	andhi	r0, r0, r6, lsr r0
						outc (__pi_hex_enc_table
    3358:	01000036 	tsteq	r0, r6, lsr r0
    335c:	36805300 	strcc	r5, [r0], r0, lsl #6
    3360:	369a0000 	ldrcc	r0, [sl], r0
						if (i == 0)
    3364:	00010000 	andeq	r0, r1, r0
    3368:	0036a056 	eorseq	sl, r6, r6, asr r0
					for (i = 28; ; i -= 4) {
    336c:	0036c000 	eorseq	ip, r6, r0
					outc ('%');
    3370:	53000100 	movwpl	r0, #256	; 0x100
    3374:	000036c0 	andeq	r3, r0, r0, asr #13
    3378:	000036d2 	ldrdeq	r3, [r0], -r2
					outc ('l');
    337c:	e6560001 	ldrb	r0, [r6], -r1
    3380:	ea000036 	b	3460 <vscan+0x58>
				val = (word) va_arg (ap, aword);
    3384:	01000036 	tsteq	r0, r6, lsr r0
				outc (val);
    3388:	36ea5800 	strbtcc	r5, [sl], r0, lsl #16
    338c:	36ee0000 	strbtcc	r0, [lr], r0
				while (*st != '\0') {
    3390:	00010000 	andeq	r0, r1, r0
    3394:	0036f853 	eorseq	pc, r6, r3, asr r8	; <UNPREDICTABLE>
    3398:	0036fa00 	eorseq	pc, r6, r0, lsl #20
    339c:	58000100 	stmdapl	r0, {r8}
					outc (*st);
    33a0:	000036fa 	strdeq	r3, [r0], -sl
    33a4:	00003710 	andeq	r3, r0, r0, lsl r7
					st++;
    33a8:	10530001 	subsne	r0, r3, r1
		c = *fm++;
    33ac:	20000037 	andcs	r0, r0, r7, lsr r0
    33b0:	01000037 	tsteq	r0, r7, lsr r0
    33b4:	37205600 	strcc	r5, [r0, -r0, lsl #12]!
char *vform (char *res, const char *fm, va_list aq) {
    33b8:	37360000 	ldrcc	r0, [r6, -r0]!
    33bc:	00010000 	andeq	r0, r1, r0
	if (res != NULL) {
    33c0:	00374053 	eorseq	r4, r7, r3, asr r0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    33c4:	00374200 	eorseq	r4, r7, r0, lsl #4
    33c8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    33cc:	00003742 	andeq	r3, r0, r2, asr #14
}
    33d0:	0000374a 	andeq	r3, r0, sl, asr #14
    33d4:	4e530001 	cdpmi	0, 5, cr0, cr3, cr1, {0}
	fml = strlen (fm) + 17;
    33d8:	5e000037 	mcrpl	0, 0, r0, cr0, cr7, {1}
    33dc:	01000037 	tsteq	r0, r7, lsr r0
    33e0:	375e5300 	ldrbcc	r5, [lr, -r0, lsl #6]
	if ((res = (char*) umalloc (fml)) == NULL)
    33e4:	376c0000 	strbcc	r0, [ip, -r0]!
    33e8:	00010000 	andeq	r0, r1, r0
    33ec:	00376c56 	eorseq	r6, r7, r6, asr ip
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    33f0:	00377200 	eorseq	r7, r7, r0, lsl #4
    33f4:	58000100 	stmdapl	r0, {r8}
    33f8:	00003772 	andeq	r3, r0, r2, ror r7
    33fc:	0000377e 	andeq	r3, r0, lr, ror r7
		ufree (res);
    3400:	7e560001 	cdpvc	0, 5, cr0, cr6, cr1, {0}
		goto Again;
    3404:	86000037 			; <UNDEFINED> instruction: 0x86000037
	if (buf == NULL || fmt == NULL)
    3408:	01000037 	tsteq	r0, r7, lsr r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    340c:	37865000 	strcc	r5, [r6, r0]
	if (buf == NULL || fmt == NULL)
    3410:	37980000 	ldrcc	r0, [r8, r0]
    3414:	00010000 	andeq	r0, r1, r0
    3418:	00000053 	andeq	r0, r0, r3, asr r0
		    	    case 'u': scanu (lword); break;
    341c:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    3420:	00340800 	eorseq	r0, r4, r0, lsl #16
    3424:	00342600 	eorseq	r2, r4, r0, lsl #12
	while (*fmt != '\0') {
    3428:	51000100 	mrspl	r0, (UNDEF: 16)
		if (*fmt++ != '%')
    342c:	00003426 	andeq	r3, r0, r6, lsr #8
		switch (*fmt++) {
    3430:	0000342c 	andeq	r3, r0, ip, lsr #8
    3434:	2c560001 	mrrccs	0, 0, r0, r6, cr1
    3438:	4a000034 	bmi	3510 <vscan+0x108>
    343c:	01000034 	tsteq	r0, r4, lsr r0
    3440:	34505100 	ldrbcc	r5, [r0], #-256	; 0xffffff00
    3444:	37980000 	ldrcc	r0, [r8, r0]
    3448:	00010000 	andeq	r0, r1, r0
}
    344c:	00000051 	andeq	r0, r0, r1, asr r0
		switch (*fmt++) {
    3450:	00000000 	andeq	r0, r0, r0
    3454:	00340800 	eorseq	r0, r4, r0, lsl #16
    3458:	00340800 	eorseq	r0, r4, r0, lsl #16
    345c:	52000100 	andpl	r0, r0, #0, 2
			while (isspace (*buf)) buf++;
    3460:	00003408 	andeq	r3, r0, r8, lsl #8
    3464:	00003424 	andeq	r3, r0, r4, lsr #8
    3468:	93520003 	cmpls	r2, #3
    346c:	0034ca04 	eorseq	ip, r4, r4, lsl #20
    3470:	0034fe00 	eorseq	pc, r4, r0, lsl #28
    3474:	52000100 	andpl	r0, r0, #0, 2
			if (*buf == '\0')
    3478:	00003524 	andeq	r3, r0, r4, lsr #10
			if (*buf != ',') {
    347c:	0000352a 	andeq	r3, r0, sl, lsr #10
			sap = va_arg (ap, char*);
    3480:	3a520001 	bcc	148348c <__ccfg+0x14634e4>
			nc++;
    3484:	54000035 	strpl	r0, [r0], #-53	; 0xffffffcb
			if (*buf != ',') {
    3488:	01000035 	tsteq	r0, r5, lsr r0
				while (!isspace (*buf) && *buf != ',' &&
    348c:	35825200 	strcc	r5, [r2, #512]	; 0x200
    3490:	35aa0000 	strcc	r0, [sl, #0]!
    3494:	00010000 	andeq	r0, r1, r0
    3498:	0035fc52 	eorseq	pc, r5, r2, asr ip	; <UNPREDICTABLE>
    349c:	00363c00 	eorseq	r3, r6, r0, lsl #24
    34a0:	52000100 	andpl	r0, r0, #0, 2
    34a4:	0000366a 	andeq	r3, r0, sl, ror #12
			while (isspace (*buf)) buf++;
    34a8:	00003690 	muleq	r0, r0, r6
    34ac:	e0520001 	subs	r0, r2, r1
    34b0:	ea000036 	b	3590 <vscan+0x188>
    34b4:	01000036 	tsteq	r0, r6, lsr r0
    34b8:	36fa5200 	ldrbtcc	r5, [sl], r0, lsl #4
			if (*buf == ',') buf++;
    34bc:	37160000 	ldrcc	r0, [r6, -r0]
    34c0:	00010000 	andeq	r0, r1, r0
			*sap = '\0';
    34c4:	00374252 	eorseq	r4, r7, r2, asr r2
			break;
    34c8:	00375800 	eorseq	r5, r7, r0, lsl #16
		    case 'd': scani (word); break;
    34cc:	52000100 	andpl	r0, r0, #0, 2
    34d0:	0000375e 	andeq	r3, r0, lr, asr r7
    34d4:	0000376c 	andeq	r3, r0, ip, ror #14
    34d8:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
    34dc:	86000037 			; <UNDEFINED> instruction: 0x86000037
    34e0:	01000037 	tsteq	r0, r7, lsr r0
    34e4:	00005200 	andeq	r5, r0, r0, lsl #4
    34e8:	00000000 	andeq	r0, r0, r0
    34ec:	34860000 	strcc	r0, [r6], #0
    34f0:	34880000 	strcc	r0, [r8], #0
    34f4:	00010000 	andeq	r0, r1, r0
    34f8:	00350054 	eorseq	r0, r5, r4, asr r0
    34fc:	00352400 	eorseq	r2, r5, r0, lsl #8
    3500:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3504:	0000352a 	andeq	r3, r0, sl, lsr #10
    3508:	0000353a 	andeq	r3, r0, sl, lsr r5
    350c:	56540001 	ldrbpl	r0, [r4], -r1
    3510:	82000035 	andhi	r0, r0, #53	; 0x35
    3514:	01000035 	tsteq	r0, r5, lsr r0
    3518:	35ac5400 	strcc	r5, [ip, #1024]!	; 0x400
    351c:	35fc0000 	ldrbcc	r0, [ip, #0]!
    3520:	00010000 	andeq	r0, r1, r0
    3524:	00363e54 	eorseq	r3, r6, r4, asr lr
    3528:	00366a00 	eorseq	r6, r6, r0, lsl #20
    352c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3530:	00003692 	muleq	r0, r2, r6
    3534:	000036e0 	andeq	r3, r0, r0, ror #13
    3538:	ea540001 	b	1503544 <__ccfg+0x14e359c>
		    case 'u': scanu (word); break;
    353c:	fa000036 	blx	361c <vscan+0x214>
    3540:	01000036 	tsteq	r0, r6, lsr r0
    3544:	37185400 	ldrcc	r5, [r8, -r0, lsl #8]
    3548:	37420000 	strbcc	r0, [r2, -r0]
    354c:	00010000 	andeq	r0, r1, r0
    3550:	00375a54 	eorseq	r5, r7, r4, asr sl
    3554:	00375e00 	eorseq	r5, r7, r0, lsl #28
    3558:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    355c:	00003786 	andeq	r3, r0, r6, lsl #15
    3560:	00003798 	muleq	r0, r8, r7
    3564:	00540001 	subseq	r0, r4, r1
    3568:	00000000 	andeq	r0, r0, r0
    356c:	fa000000 	blx	3574 <vscan+0x16c>
    3570:	24000034 	strcs	r0, [r0], #-52	; 0xffffffcc
    3574:	01000035 	tsteq	r0, r5, lsr r0
    3578:	352a5800 	strcc	r5, [sl, #-2048]!	; 0xfffff800
    357c:	353a0000 	ldrcc	r0, [sl, #-0]!
    3580:	00010000 	andeq	r0, r1, r0
		    case 'x': scanx (word); break;
    3584:	00000058 	andeq	r0, r0, r8, asr r0
    3588:	00000000 	andeq	r0, r0, r0
    358c:	0035dc00 	eorseq	sp, r5, r0, lsl #24
    3590:	0035ee00 	eorseq	lr, r5, r0, lsl #28
    3594:	59000100 	stmdbpl	r0, {r8}
    3598:	000035ee 	andeq	r3, r0, lr, ror #11
    359c:	000035f6 	strdeq	r3, [r0], -r6
    35a0:	00500001 	subseq	r0, r0, r1
    35a4:	00000000 	andeq	r0, r0, r0
    35a8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    35ac:	62000036 	andvs	r0, r0, #54	; 0x36
    35b0:	01000036 	tsteq	r0, r6, lsr r0
    35b4:	36ea5000 	strbtcc	r5, [sl], r0
    35b8:	36fa0000 	ldrbtcc	r0, [sl], r0
    35bc:	00010000 	andeq	r0, r1, r0
    35c0:	00000050 	andeq	r0, r0, r0, asr r0
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	0036c000 	eorseq	ip, r6, r0
    35cc:	0036d200 	eorseq	sp, r6, r0, lsl #4
    35d0:	59000100 	stmdbpl	r0, {r8}
    35d4:	000036d2 	ldrdeq	r3, [r0], -r2
    35d8:	000036da 	ldrdeq	r3, [r0], -sl
    35dc:	00500001 	subseq	r0, r0, r1
    35e0:	00000000 	andeq	r0, r0, r0
    35e4:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    35e8:	5e000037 	mcrpl	0, 0, r0, cr0, cr7, {1}
    35ec:	01000037 	tsteq	r0, r7, lsr r0
    35f0:	00005000 	andeq	r5, r0, r0
    35f4:	00000000 	andeq	r0, r0, r0
    35f8:	348a0000 	strcc	r0, [sl], #0
			switch (*fmt++) {
    35fc:	34a60000 	strtcc	r0, [r6], #0
    3600:	00010000 	andeq	r0, r1, r0
    3604:	0037705e 	eorseq	r7, r7, lr, asr r0
    3608:	00377200 	eorseq	r7, r7, r0, lsl #4
    360c:	5e000100 	adfpls	f0, f0, f0
	...
		    	    case 'd': scani (lword); break;
    3618:	00003798 	muleq	r0, r8, r7
    361c:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    3620:	9f500001 	svcls	0x00500001
    3624:	b6000037 			; <UNDEFINED> instruction: 0xb6000037
    3628:	01000037 	tsteq	r0, r7, lsr r0
    362c:	37b65600 	ldrcc	r5, [r6, r0, lsl #12]!
    3630:	37ba0000 	ldrcc	r0, [sl, r0]!
    3634:	00040000 	andeq	r0, r4, r0
    3638:	9f5001f3 	svcls	0x005001f3
    363c:	000037ba 			; <UNDEFINED> instruction: 0x000037ba
    3640:	000037bc 			; <UNDEFINED> instruction: 0x000037bc
    3644:	bc560001 	mrrclt	0, 0, r0, r6, cr1
    3648:	c0000037 	andgt	r0, r0, r7, lsr r0
    364c:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3650:	5001f300 	andpl	pc, r1, r0, lsl #6
    3654:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3658:	00000000 	andeq	r0, r0, r0
    365c:	0037a200 	eorseq	sl, r7, r0, lsl #4
    3660:	0037ab00 	eorseq	sl, r7, r0, lsl #22
    3664:	70000500 	andvc	r0, r0, r0, lsl #10
    3668:	9f293000 	svcls	0x00293000
    366c:	000037ab 	andeq	r3, r0, fp, lsr #15
		    	    case 'x': scanx (lword); break;
    3670:	000037b6 			; <UNDEFINED> instruction: 0x000037b6
    3674:	00750005 	rsbseq	r0, r5, r5
    3678:	ba9f2930 	blt	fe7cdb40 <_estack+0xde7c8b40>
    367c:	bc000037 	stclt	0, cr0, [r0], {55}	; 0x37
    3680:	05000037 	streq	r0, [r0, #-55]	; 0xffffffc9
    3684:	30007500 	andcc	r7, r0, r0, lsl #10
    3688:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    3698:	00010000 	andeq	r0, r1, r0
    369c:	00000050 	andeq	r0, r0, r0, asr r0
    36a0:	00000000 	andeq	r0, r0, r0
    36a4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    36b0:	01f30004 	mvnseq	r0, r4
    36b4:	00009f50 	andeq	r9, r0, r0, asr pc
    36b8:	00000000 	andeq	r0, r0, r0
    36bc:	00010000 	andeq	r0, r1, r0
    36c0:	00000056 	andeq	r0, r0, r6, asr r0
    36c4:	00000000 	andeq	r0, r0, r0
    36c8:	f3000400 	vshl.u8	d0, d0, d0
    36cc:	009f5001 	addseq	r5, pc, r1
	...
    36dc:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'd': scani (lword); break;
    36e0:	00005100 	andeq	r5, r0, r0, lsl #2
    36e4:	00000000 	andeq	r0, r0, r0
    36e8:	00040000 	andeq	r0, r4, r0
    36ec:	9f5101f3 	svcls	0x005101f3
	...
		    	    case 'u': scanu (lword); break;
    3700:	00700005 	rsbseq	r0, r0, r5
    3704:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    3708:	00000000 	andeq	r0, r0, r0
    370c:	05000000 	streq	r0, [r0, #-0]
    3710:	30007500 	andcc	r7, r0, r0, lsl #10
    3714:	00009f29 	andeq	r9, r0, r9, lsr #30
    3718:	00000000 	andeq	r0, r0, r0
    371c:	00050000 	andeq	r0, r5, r0
    3720:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3724:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3728:	00000000 	andeq	r0, r0, r0
    372c:	0037c400 	eorseq	ip, r7, r0, lsl #8
    3730:	0037d600 	eorseq	sp, r7, r0, lsl #12
    3734:	70000700 	andvc	r0, r0, r0, lsl #14
    3738:	3f243f00 	svccc	0x00243f00
    373c:	00009f26 	andeq	r9, r0, r6, lsr #30
    3740:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    3744:	37cc0000 	strbcc	r0, [ip, r0]
    3748:	37d40000 	ldrbcc	r0, [r4, r0]
			if ((c = *buf++) == '\0')
    374c:	000d0000 	andeq	r0, sp, r0
    3750:	717a8072 	cmnvc	sl, r2, ror r0
			sap = va_arg (ap, char*);
    3754:	48244800 	stmdami	r4!, {fp, lr}
			nc++;
    3758:	26341e26 	ldrtcs	r1, [r4], -r6, lsr #28
			break;
    375c:	0037d49f 	mlaseq	r7, pc, r4, sp	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    3760:	0037f000 	eorseq	pc, r7, r0
    3764:	71000c00 	tstvc	r0, r0, lsl #24
    3768:	48244800 	stmdami	r4!, {fp, lr}
						*sap++ = *buf++;
    376c:	1e007226 	cdpne	2, 0, cr7, cr0, cr6, {1}
    3770:	009f2634 	addseq	r2, pc, r4, lsr r6	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    3774:	00000000 	andeq	r0, r0, r0
    3778:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    377c:	00000037 	andeq	r0, r0, r7, lsr r0
		return 0;
    3780:	01000038 	tsteq	r0, r8, lsr r0
    3784:	00005300 	andeq	r5, r0, r0, lsl #6
		    case 'x': scanx (word); break;
    3788:	00000000 	andeq	r0, r0, r0
    378c:	37f80000 	ldrbcc	r0, [r8, r0]!
		    	    case 'x': scanx (lword); break;
    3790:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    3794:	00010000 	andeq	r0, r1, r0
    3798:	00000050 	andeq	r0, r0, r0, asr r0
    379c:	00000000 	andeq	r0, r0, r0
    37a0:	00383800 	eorseq	r3, r8, r0, lsl #16
    37a4:	00385000 	eorseq	r5, r8, r0
    37a8:	50000100 	andpl	r0, r0, r0, lsl #2
    37ac:	00003850 	andeq	r3, r0, r0, asr r8
    37b0:	0000388a 	andeq	r3, r0, sl, lsl #17
    37b4:	8a550001 	bhi	15437c0 <__ccfg+0x1523818>
    37b8:	94000038 	strls	r0, [r0], #-56	; 0xffffffc8
    37bc:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    37c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    37c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37c8:	00000000 	andeq	r0, r0, r0
    37cc:	00383800 	eorseq	r3, r8, r0, lsl #16
    37d0:	00383e00 	eorseq	r3, r8, r0, lsl #28
    37d4:	51000100 	mrspl	r0, (UNDEF: 16)
    37d8:	0000383e 	andeq	r3, r0, lr, lsr r8
    37dc:	00003876 	andeq	r3, r0, r6, ror r8
    37e0:	76540001 	ldrbvc	r0, [r4], -r1
    37e4:	94000038 	strls	r0, [r0], #-56	; 0xffffffc8
    37e8:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    37ec:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    37f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37f4:	00000000 	andeq	r0, r0, r0
    37f8:	00387200 	eorseq	r7, r8, r0, lsl #4
    37fc:	00388600 	eorseq	r8, r8, r0, lsl #12
    3800:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    380c:	00003872 	andeq	r3, r0, r2, ror r8
    3810:	00003876 	andeq	r3, r0, r6, ror r8
    3814:	76540001 	ldrbvc	r0, [r4], -r1
    3818:	86000038 			; <UNDEFINED> instruction: 0x86000038
    381c:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    3820:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3824:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3828:	00000000 	andeq	r0, r0, r0
    382c:	00389400 	eorseq	r9, r8, r0, lsl #8
    3830:	0038b200 	eorseq	fp, r8, r0, lsl #4
    3834:	50000100 	andpl	r0, r0, r0, lsl #2
    3838:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
    383c:	000038c0 	andeq	r3, r0, r0, asr #17
    3840:	01f30004 	mvnseq	r0, r4
    3844:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3854:	00010000 	andeq	r0, r1, r0
    3858:	00000050 	andeq	r0, r0, r0, asr r0
    385c:	00000000 	andeq	r0, r0, r0
    3860:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    386c:	01f30004 	mvnseq	r0, r4
    3870:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3880:	00010000 	andeq	r0, r1, r0
    3884:	00000055 	andeq	r0, r0, r5, asr r0
	...
    3894:	70000700 	andvc	r0, r0, r0, lsl #14
    3898:	1c007300 	stcne	3, cr7, [r0], {-0}
    389c:	00009f19 	andeq	r9, r0, r9, lsl pc
    38a0:	00000000 	andeq	r0, r0, r0
    38a4:	00040000 	andeq	r0, r4, r0
    38a8:	9f190070 	svcls	0x00190070
	...
    38bc:	d00a0004 	andle	r0, sl, r4
    38c0:	00009f07 	andeq	r9, r0, r7, lsl #30
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	00010000 	andeq	r0, r1, r0
    38cc:	00000050 	andeq	r0, r0, r0, asr r0
    38d0:	00000000 	andeq	r0, r0, r0
    38d4:	72000500 	andvc	r0, r0, #0, 10
    38d8:	9f254000 	svcls	0x00254000
	...
    38e4:	00500001 	subseq	r0, r0, r1
    38e8:	00000000 	andeq	r0, r0, r0
    38ec:	04000000 	streq	r0, [r0], #-0
    38f0:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    38f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    38f8:	00000000 	andeq	r0, r0, r0
    38fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3908:	00003912 	andeq	r3, r0, r2, lsl r9
    390c:	0000391e 	andeq	r3, r0, lr, lsl r9
    3910:	00500001 	subseq	r0, r0, r1
    3914:	00000000 	andeq	r0, r0, r0
    3918:	12000000 	andne	r0, r0, #0
    391c:	1e000039 	mcrne	0, 0, r0, cr0, cr9, {1}
    3920:	01000039 	tsteq	r0, r9, lsr r0
    3924:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    3934:	00010000 	andeq	r0, r1, r0
    3938:	00000050 	andeq	r0, r0, r0, asr r0
    393c:	00000000 	andeq	r0, r0, r0
    3940:	70000300 	andvc	r0, r0, r0, lsl #6
    3944:	00009f1b 	andeq	r9, r0, fp, lsl pc
    3948:	00000000 	andeq	r0, r0, r0
    394c:	00040000 	andeq	r0, r4, r0
    3950:	9f5001f3 	svcls	0x005001f3
	...
    3964:	00740007 	rsbseq	r0, r4, r7
    3968:	26482448 	strbcs	r2, [r8], -r8, asr #8
    396c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    397c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3988:	01f30006 	mvnseq	r0, r6
    398c:	9f1c4b50 	svcls	0x001c4b50
	...
    39a0:	00550001 	subseq	r0, r5, r1
    39a4:	00000000 	andeq	r0, r0, r0
    39a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    39ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    39b0:	01f31c4b 	mvnseq	r1, fp, asr #24
    39b4:	1e1c4b50 			; <UNDEFINED> instruction: 0x1e1c4b50
    39b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39c8:	71002c00 	tstvc	r0, r0, lsl #24
    39cc:	71264000 			; <UNDEFINED> instruction: 0x71264000
    39d0:	48244000 	stmdami	r4!, {lr}
    39d4:	1e007026 	cdpne	0, 0, cr7, cr0, cr6, {1}
    39d8:	71222633 			; <UNDEFINED> instruction: 0x71222633
    39dc:	48244800 	stmdami	r4!, {fp, lr}
    39e0:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    39e4:	7422263a 	strtvc	r2, [r2], #-1594	; 0xfffff9c6
    39e8:	48244800 	stmdami	r4!, {fp, lr}
    39ec:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    39f0:	421e0070 	andsmi	r0, lr, #112	; 0x70
    39f4:	009f2226 	addseq	r2, pc, r6, lsr #4
    39f8:	00000000 	andeq	r0, r0, r0
    39fc:	32000000 	andcc	r0, r0, #0
    3a00:	40007100 	andmi	r7, r0, r0, lsl #2
    3a04:	5001f326 	andpl	pc, r1, r6, lsr #6
    3a08:	00711c4b 	rsbseq	r1, r1, fp, asr #24
    3a0c:	26482440 	strbcs	r2, [r8], -r0, asr #8
    3a10:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    3a14:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    3a18:	00752648 	rsbseq	r2, r5, r8, asr #12
    3a1c:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    3a20:	4b5001f3 	blmi	14041f4 <__ccfg+0x13e424c>
    3a24:	4800741c 	stmdami	r0, {r2, r3, r4, sl, ip, sp, lr}
    3a28:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3a2c:	421e0075 	andsmi	r0, lr, #117	; 0x75
    3a30:	009f2226 	addseq	r2, pc, r6, lsr #4
	...
    3a40:	01000000 	mrseq	r0, (UNDEF: 0)
    3a44:	00005000 	andeq	r5, r0, r0
    3a48:	00000000 	andeq	r0, r0, r0
    3a4c:	00040000 	andeq	r0, r4, r0
    3a50:	9f5001f3 	svcls	0x005001f3
	...
    3a64:	0070000b 	rsbseq	r0, r0, fp
    3a68:	461e0070 			; <UNDEFINED> instruction: 0x461e0070
    3a6c:	1c007026 	stcne	0, cr7, [r0], {38}	; 0x26
    3a70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a74:	00000000 	andeq	r0, r0, r0
    3a78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3a84:	01f3000e 	mvnseq	r0, lr
    3a88:	5001f350 	andpl	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    3a8c:	f326461e 	vmin.u32	d4, d6, d14
    3a90:	9f1c5001 	svcls	0x001c5001
	...
    3aa4:	00550001 	subseq	r0, r5, r1
    3aa8:	00000000 	andeq	r0, r0, r0
    3aac:	05000000 	streq	r0, [r0, #-0]
    3ab0:	10380c00 	eorsne	r0, r8, r0, lsl #24
    3ab4:	00004009 	andeq	r4, r0, r9
	...
    3ac4:	00010000 	andeq	r0, r1, r0
    3ac8:	00000056 	andeq	r0, r0, r6, asr r0
	...
    3ad8:	70000600 	andvc	r0, r0, r0, lsl #12
    3adc:	1c007600 	stcne	6, cr7, [r0], {-0}
    3ae0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ae4:	00000000 	andeq	r0, r0, r0
    3ae8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3afc:	0070000a 	rsbseq	r0, r0, sl
    3b00:	2444fc08 	strbcs	pc, [r4], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    3b04:	9f25461a 	svcls	0x0025461a
	...
    3b18:	00530001 	subseq	r0, r3, r1
	...
    3b28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3b2c:	0a007300 	beq	20734 <__ccfg+0x78c>
    3b30:	3a1afc00 	bcc	6c2b38 <__ccfg+0x6a2b90>
    3b34:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    3b44:	000a0000 	andeq	r0, sl, r0
    3b48:	fc080073 	stc2	0, cr0, [r8], {115}	; 0x73
    3b4c:	421a2440 	andsmi	r2, sl, #64, 8	; 0x40000000
    3b50:	00009f25 	andeq	r9, r0, r5, lsr #30
    3b54:	00000000 	andeq	r0, r0, r0
    3b58:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    3b5c:	398a0000 	stmibcc	sl, {}	; <UNPREDICTABLE>
    3b60:	00010000 	andeq	r0, r1, r0
    3b64:	00398a50 	eorseq	r8, r9, r0, asr sl
    3b68:	00399400 	eorseq	r9, r9, r0, lsl #8
    3b6c:	f3000400 	vshl.u8	d0, d0, d0
    3b70:	009f5001 	addseq	r5, pc, r1
    3b74:	00000000 	andeq	r0, r0, r0
    3b78:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    3b7c:	f8000039 			; <UNDEFINED> instruction: 0xf8000039
    3b80:	01000039 	tsteq	r0, r9, lsr r0
    3b84:	39fa5300 	ldmibcc	sl!, {r8, r9, ip, lr}^
    3b88:	39fc0000 	ldmibcc	ip!, {}^	; <UNPREDICTABLE>
    3b8c:	00010000 	andeq	r0, r1, r0
    3b90:	00000053 	andeq	r0, r0, r3, asr r0
    3b94:	00000000 	andeq	r0, r0, r0
    3b98:	003b3000 	eorseq	r3, fp, r0
    3b9c:	003b6600 	eorseq	r6, fp, r0, lsl #12
    3ba0:	50000100 	andpl	r0, r0, r0, lsl #2
    3ba4:	00003b66 	andeq	r3, r0, r6, ror #22
    3ba8:	00003c48 	andeq	r3, r0, r8, asr #24
    3bac:	01f30004 	mvnseq	r0, r4
    3bb0:	00009f50 	andeq	r9, r0, r0, asr pc
    3bb4:	00000000 	andeq	r0, r0, r0
    3bb8:	3b4e0000 	blcc	1383bc0 <__ccfg+0x1363c18>
    3bbc:	3b520000 	blcc	1483bc4 <__ccfg+0x1463c1c>
    3bc0:	00010000 	andeq	r0, r1, r0
    3bc4:	003b5251 	eorseq	r5, fp, r1, asr r2
    3bc8:	003b5800 	eorseq	r5, fp, r0, lsl #16
    3bcc:	32000200 	andcc	r0, r0, #0, 4
    3bd0:	003b5c9f 	mlaseq	fp, pc, ip, r5	; <UNPREDICTABLE>
    3bd4:	003be600 	eorseq	lr, fp, r0, lsl #12
    3bd8:	51000100 	mrspl	r0, (UNDEF: 16)
    3bdc:	00003be6 	andeq	r3, r0, r6, ror #23
    3be0:	00003bea 	andeq	r3, r0, sl, ror #23
    3be4:	05710003 	ldrbeq	r0, [r1, #-3]!
    3be8:	003c0c9f 	mlaseq	ip, pc, ip, r0	; <UNPREDICTABLE>
    3bec:	003c2200 	eorseq	r2, ip, r0, lsl #4
    3bf0:	51000100 	mrspl	r0, (UNDEF: 16)
    3bf4:	00003c22 	andeq	r3, r0, r2, lsr #24
    3bf8:	00003c24 	andeq	r3, r0, r4, lsr #24
    3bfc:	05710003 	ldrbeq	r0, [r1, #-3]!
    3c00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	003bb200 	eorseq	fp, fp, r0, lsl #4
    3c0c:	003bb800 	eorseq	fp, fp, r0, lsl #16
    3c10:	53000100 	movwpl	r0, #256	; 0x100
    3c14:	00003bc0 	andeq	r3, r0, r0, asr #23
    3c18:	00003bc2 	andeq	r3, r0, r2, asr #23
    3c1c:	d6530001 	ldrble	r0, [r3], -r1
    3c20:	d800003b 	stmdale	r0, {r0, r1, r3, r4, r5}
    3c24:	0100003b 	tsteq	r0, fp, lsr r0
    3c28:	3be05300 	blcc	ff818830 <_estack+0xdf813830>
    3c2c:	3bec0000 	blcc	ffb03c34 <_estack+0xdfafec34>
    3c30:	00010000 	andeq	r0, r1, r0
    3c34:	003c0c53 	eorseq	r0, ip, r3, asr ip
    3c38:	003c1800 	eorseq	r1, ip, r0, lsl #16
    3c3c:	53000100 	movwpl	r0, #256	; 0x100
    3c40:	00003c1c 	andeq	r3, r0, ip, lsl ip
    3c44:	00003c24 	andeq	r3, r0, r4, lsr #24
    3c48:	00530001 	subseq	r0, r3, r1
    3c4c:	00000000 	andeq	r0, r0, r0
    3c50:	50000000 	andpl	r0, r0, r0
    3c54:	5200003b 	andpl	r0, r0, #59	; 0x3b
    3c58:	0100003b 	tsteq	r0, fp, lsr r0
    3c5c:	3b545300 	blcc	1518864 <__ccfg+0x14f88bc>
    3c60:	3b580000 	blcc	1603c68 <__ccfg+0x15e3cc0>
    3c64:	00010000 	andeq	r0, r1, r0
    3c68:	003b5e53 	eorseq	r5, fp, r3, asr lr
    3c6c:	003b6600 	eorseq	r6, fp, r0, lsl #12
    3c70:	53000100 	movwpl	r0, #256	; 0x100
    3c74:	00003b66 	andeq	r3, r0, r6, ror #22
    3c78:	00003b7c 	andeq	r3, r0, ip, ror fp
    3c7c:	6c740003 	ldclvs	0, cr0, [r4], #-12
    3c80:	003b809f 	mlaseq	fp, pc, r0, r8	; <UNPREDICTABLE>
    3c84:	003b8600 	eorseq	r8, fp, r0, lsl #12
    3c88:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    3c8c:	00009f6c 	andeq	r9, r0, ip, ror #30
    3c90:	00000000 	andeq	r0, r0, r0
    3c94:	3b760000 	blcc	1d83c9c <__ccfg+0x1d63cf4>
    3c98:	3bfa0000 	blcc	ffe83ca0 <_estack+0xdfe7eca0>
    3c9c:	00010000 	andeq	r0, r1, r0
    3ca0:	003bfa52 	eorseq	pc, fp, r2, asr sl	; <UNPREDICTABLE>
    3ca4:	003c0000 	eorseq	r0, ip, r0
    3ca8:	70000200 	andvc	r0, r0, r0, lsl #4
    3cac:	003c0000 	eorseq	r0, ip, r0
    3cb0:	003c0400 	eorseq	r0, ip, r0, lsl #8
    3cb4:	52000100 	andpl	r0, r0, #0, 2
    3cb8:	00003c04 	andeq	r3, r0, r4, lsl #24
    3cbc:	00003c0a 	andeq	r3, r0, sl, lsl #24
    3cc0:	00700002 	rsbseq	r0, r0, r2
    3cc4:	00003c0c 	andeq	r3, r0, ip, lsl #24
    3cc8:	00003c14 	andeq	r3, r0, r4, lsl ip
    3ccc:	14520001 	ldrbne	r0, [r2], #-1
    3cd0:	1a00003c 	bne	3dc8 <NOROM_SetupTrimDevice+0x70>
    3cd4:	0200003c 	andeq	r0, r0, #60	; 0x3c
    3cd8:	1c007000 	stcne	0, cr7, [r0], {-0}
    3cdc:	2400003c 	strcs	r0, [r0], #-60	; 0xffffffc4
    3ce0:	0100003c 	tsteq	r0, ip, lsr r0
    3ce4:	00005200 	andeq	r5, r0, r0, lsl #4
    3ce8:	00000000 	andeq	r0, r0, r0
    3cec:	3b300000 	blcc	c03cf4 <__ccfg+0xbe3d4c>
    3cf0:	3b7c0000 	blcc	1f03cf8 <__ccfg+0x1ee3d50>
    3cf4:	00020000 	andeq	r0, r2, r0
    3cf8:	3b7c9f30 	blcc	1f2b9c0 <__ccfg+0x1f0ba18>
    3cfc:	3b800000 	blcc	fe003d04 <_estack+0xddffed04>
    3d00:	00010000 	andeq	r0, r1, r0
    3d04:	003b8054 	eorseq	r8, fp, r4, asr r0
    3d08:	003b8600 	eorseq	r8, fp, r0, lsl #12
    3d0c:	30000200 	andcc	r0, r0, r0, lsl #4
    3d10:	003b869f 	mlaseq	fp, pc, r6, r8	; <UNPREDICTABLE>
    3d14:	003c2400 	eorseq	r2, ip, r0, lsl #8
    3d18:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3d24:	00003c48 	andeq	r3, r0, r8, asr #24
    3d28:	00003c52 	andeq	r3, r0, r2, asr ip
    3d2c:	52500001 	subspl	r0, r0, #1
    3d30:	6400003c 	strvs	r0, [r0], #-60	; 0xffffffc4
    3d34:	0300003c 	movweq	r0, #60	; 0x3c
    3d38:	9f707500 	svcls	0x00707500
    3d3c:	00003c64 	andeq	r3, r0, r4, ror #24
    3d40:	00003c68 	andeq	r3, r0, r8, ror #24
    3d44:	01f30004 	mvnseq	r0, r4
    3d48:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3d58:	00020000 	andeq	r0, r2, r0
    3d5c:	00009f30 	andeq	r9, r0, r0, lsr pc
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	00020000 	andeq	r0, r2, r0
    3d68:	00009f31 	andeq	r9, r0, r1, lsr pc
    3d6c:	00000000 	andeq	r0, r0, r0
    3d70:	00020000 	andeq	r0, r2, r0
    3d74:	00009f32 	andeq	r9, r0, r2, lsr pc
    3d78:	00000000 	andeq	r0, r0, r0
    3d7c:	00020000 	andeq	r0, r2, r0
    3d80:	00009f33 	andeq	r9, r0, r3, lsr pc
    3d84:	00000000 	andeq	r0, r0, r0
    3d88:	00020000 	andeq	r0, r2, r0
    3d8c:	00009f34 	andeq	r9, r0, r4, lsr pc
    3d90:	00000000 	andeq	r0, r0, r0
    3d94:	00020000 	andeq	r0, r2, r0
    3d98:	00009f35 	andeq	r9, r0, r5, lsr pc
    3d9c:	00000000 	andeq	r0, r0, r0
    3da0:	00020000 	andeq	r0, r2, r0
    3da4:	00009f36 	andeq	r9, r0, r6, lsr pc
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	00020000 	andeq	r0, r2, r0
    3db0:	00009f37 	andeq	r9, r0, r7, lsr pc
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	00020000 	andeq	r0, r2, r0
    3dbc:	00009f38 	andeq	r9, r0, r8, lsr pc
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	00020000 	andeq	r0, r2, r0
    3dc8:	00009f39 	andeq	r9, r0, r9, lsr pc
    3dcc:	00000000 	andeq	r0, r0, r0
    3dd0:	00020000 	andeq	r0, r2, r0
    3dd4:	00009f3a 	andeq	r9, r0, sl, lsr pc
    3dd8:	00000000 	andeq	r0, r0, r0
    3ddc:	00020000 	andeq	r0, r2, r0
    3de0:	00009f3b 	andeq	r9, r0, fp, lsr pc
    3de4:	00000000 	andeq	r0, r0, r0
    3de8:	00020000 	andeq	r0, r2, r0
    3dec:	00009f3c 	andeq	r9, r0, ip, lsr pc
    3df0:	00000000 	andeq	r0, r0, r0
    3df4:	3c840000 	stccc	0, cr0, [r4], {0}
    3df8:	3cc20000 	stclcc	0, cr0, [r2], {0}
    3dfc:	00010000 	andeq	r0, r1, r0
    3e00:	003cc250 	eorseq	ip, ip, r0, asr r2
    3e04:	003d2400 	eorseq	r2, sp, r0, lsl #8
    3e08:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3e0c:	00003d24 	andeq	r3, r0, r4, lsr #26
    3e10:	00003d58 	andeq	r3, r0, r8, asr sp
    3e14:	01f30004 	mvnseq	r0, r4
    3e18:	00009f50 	andeq	r9, r0, r0, asr pc
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	3cc00000 	stclcc	0, cr0, [r0], {0}
    3e24:	3d240000 	stccc	0, cr0, [r4, #-0]
    3e28:	00010000 	andeq	r0, r1, r0
    3e2c:	00000054 	andeq	r0, r0, r4, asr r0
    3e30:	00000000 	andeq	r0, r0, r0
    3e34:	003cd600 	eorseq	sp, ip, r0, lsl #12
    3e38:	003cd800 	eorseq	sp, ip, r0, lsl #16
    3e3c:	73000700 	movwvc	r0, #1792	; 0x700
    3e40:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3e44:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3e48:	00000000 	andeq	r0, r0, r0
    3e4c:	3ce60000 	stclcc	0, cr0, [r6]
    3e50:	3d000000 	stccc	0, cr0, [r0, #-0]
    3e54:	00010000 	andeq	r0, r1, r0
    3e58:	00000053 	andeq	r0, r0, r3, asr r0
    3e5c:	00000000 	andeq	r0, r0, r0
    3e60:	003cea00 	eorseq	lr, ip, r0, lsl #20
    3e64:	003cf600 	eorseq	pc, ip, r0, lsl #12
    3e68:	52000100 	andpl	r0, r0, #0, 2
    3e6c:	00003cf6 	strdeq	r3, [r0], -r6
    3e70:	00003cfa 	strdeq	r3, [r0], -sl
    3e74:	06710003 	ldrbteq	r0, [r1], -r3
    3e78:	003cfa9f 	mlaseq	ip, pc, sl, pc	; <UNPREDICTABLE>
    3e7c:	003d0200 	eorseq	r0, sp, r0, lsl #4
    3e80:	52000100 	andpl	r0, r0, #0, 2
	...
    3e8c:	00003d5e 	andeq	r3, r0, lr, asr sp
    3e90:	00003dd8 	ldrdeq	r3, [r0], -r8
    3e94:	00540001 	subseq	r0, r4, r1
    3e98:	00000000 	andeq	r0, r0, r0
    3e9c:	c4000000 	strgt	r0, [r0], #-0
    3ea0:	ce00003d 	mcrgt	0, 0, r0, cr0, cr13, {1}
    3ea4:	0100003d 	tsteq	r0, sp, lsr r0
    3ea8:	00005300 	andeq	r5, r0, r0, lsl #6
    3eac:	00000000 	andeq	r0, r0, r0
    3eb0:	3dfc0000 	ldclcc	0, cr0, [ip]
    3eb4:	3e220000 	cdpcc	0, 2, cr0, cr2, cr0, {0}
    3eb8:	00010000 	andeq	r0, r1, r0
    3ebc:	003e2250 	eorseq	r2, lr, r0, asr r2
    3ec0:	003e7800 	eorseq	r7, lr, r0, lsl #16
    3ec4:	f3000400 	vshl.u8	d0, d0, d0
    3ec8:	009f5001 	addseq	r5, pc, r1
    3ecc:	00000000 	andeq	r0, r0, r0
    3ed0:	24000000 	strcs	r0, [r0], #-0
    3ed4:	5800003e 	stmdapl	r0, {r1, r2, r3, r4, r5}
    3ed8:	0100003e 	tsteq	r0, lr, lsr r0
    3edc:	00005300 	andeq	r5, r0, r0, lsl #6
    3ee0:	00000000 	andeq	r0, r0, r0
    3ee4:	3e280000 	cdpcc	0, 2, cr0, cr8, cr0, {0}
    3ee8:	3e360000 	cdpcc	0, 3, cr0, cr6, cr0, {0}
    3eec:	00010000 	andeq	r0, r1, r0
    3ef0:	003e3651 	eorseq	r3, lr, r1, asr r6
    3ef4:	003e3800 	eorseq	r3, lr, r0, lsl #16
    3ef8:	72000600 	andvc	r0, r0, #0, 12
    3efc:	1c007300 	stcne	3, cr7, [r0], {-0}
    3f00:	003e389f 	mlaseq	lr, pc, r8, r3	; <UNPREDICTABLE>
    3f04:	003e3e00 	eorseq	r3, lr, r0, lsl #28
    3f08:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3f14:	00003e14 	andeq	r3, r0, r4, lsl lr
    3f18:	00003e26 	andeq	r3, r0, r6, lsr #28
    3f1c:	00530001 	subseq	r0, r3, r1
    3f20:	00000000 	andeq	r0, r0, r0
    3f24:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    3f28:	9b00003e 	blls	4028 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x8>
    3f2c:	0100003e 	tsteq	r0, lr, lsr r0
    3f30:	3e9b5000 	cdpcc	0, 9, cr5, cr11, cr0, {0}
    3f34:	3ea60000 	cdpcc	0, 10, cr0, cr6, cr0, {0}
    3f38:	00010000 	andeq	r0, r1, r0
    3f3c:	003ea654 	eorseq	sl, lr, r4, asr r6
    3f40:	003eae00 	eorseq	sl, lr, r0, lsl #28
    3f44:	50000100 	andpl	r0, r0, r0, lsl #2
    3f48:	00003eae 	andeq	r3, r0, lr, lsr #29
    3f4c:	00003efa 	strdeq	r3, [r0], -sl
    3f50:	00540001 	subseq	r0, r4, r1
    3f54:	00000000 	andeq	r0, r0, r0
    3f58:	b4000000 	strlt	r0, [r0], #-0
    3f5c:	b800003e 	stmdalt	r0, {r1, r2, r3, r4, r5}
    3f60:	0100003e 	tsteq	r0, lr, lsr r0
    3f64:	3eba5300 	cdpcc	3, 11, cr5, cr10, cr0, {0}
    3f68:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
    3f6c:	00010000 	andeq	r0, r1, r0
    3f70:	003eca53 	eorseq	ip, lr, r3, asr sl
    3f74:	003ed200 	eorseq	sp, lr, r0, lsl #4
    3f78:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f84:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
    3f88:	00003ee8 	andeq	r3, r0, r8, ror #29
    3f8c:	00740005 	rsbseq	r0, r4, r5
    3f90:	e89f264c 	ldm	pc, {r2, r3, r6, r9, sl, sp}	; <UNPREDICTABLE>
    3f94:	2400003e 	strcs	r0, [r0], #-62	; 0xffffffc2
    3f98:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    3f9c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3fa0:	009f264c 	addseq	r2, pc, ip, asr #12
    3fa4:	00000000 	andeq	r0, r0, r0
    3fa8:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    3fac:	b800003e 	stmdalt	r0, {r1, r2, r3, r4, r5}
    3fb0:	0100003e 	tsteq	r0, lr, lsr r0
    3fb4:	00005300 	andeq	r5, r0, r0, lsl #6
    3fb8:	00000000 	andeq	r0, r0, r0
    3fbc:	3f240000 	svccc	0x00240000
    3fc0:	3f380000 	svccc	0x00380000
    3fc4:	00010000 	andeq	r0, r1, r0
    3fc8:	003f3850 	eorseq	r3, pc, r0, asr r8	; <UNPREDICTABLE>
    3fcc:	003f8000 	eorseq	r8, pc, r0
    3fd0:	f3000400 	vshl.u8	d0, d0, d0
    3fd4:	009f5001 	addseq	r5, pc, r1
    3fd8:	00000000 	andeq	r0, r0, r0
    3fdc:	2a000000 	bcs	3fe4 <NOROM_SetupGetTrimForAmpcompCtrl+0x28>
    3fe0:	3200003f 	andcc	r0, r0, #63	; 0x3f
    3fe4:	0100003f 	tsteq	r0, pc, lsr r0
    3fe8:	00005300 	andeq	r5, r0, r0, lsl #6
    3fec:	00000000 	andeq	r0, r0, r0
    3ff0:	3f2e0000 	svccc	0x002e0000
    3ff4:	3f400000 	svccc	0x00400000
    3ff8:	00010000 	andeq	r0, r1, r0
    3ffc:	003f4052 	eorseq	r4, pc, r2, asr r0	; <UNPREDICTABLE>
    4000:	003f4200 	eorseq	r4, pc, r0, lsl #4
    4004:	72000500 	andvc	r0, r0, #0, 10
    4008:	9f253100 	svcls	0x00253100
    400c:	00003f42 	andeq	r3, r0, r2, asr #30
    4010:	00003f48 	andeq	r3, r0, r8, asr #30
    4014:	4c520001 	mrrcmi	0, 0, r0, r2, cr1
    4018:	5e00003f 	mcrpl	0, 0, r0, cr0, cr15, {1}
    401c:	0100003f 	tsteq	r0, pc, lsr r0
    4020:	3f625200 	svccc	0x00625200
    4024:	3f6c0000 	svccc	0x006c0000
    4028:	00010000 	andeq	r0, r1, r0
    402c:	003f6e52 	eorseq	r6, pc, r2, asr lr	; <UNPREDICTABLE>
    4030:	003f8000 	eorseq	r8, pc, r0
    4034:	52000100 	andpl	r0, r0, #0, 2
	...
    4040:	00003f32 	andeq	r3, r0, r2, lsr pc
    4044:	00003f3c 	andeq	r3, r0, ip, lsr pc
    4048:	3c530001 	mrrccc	0, 0, r0, r3, cr1
    404c:	3e00003f 	mcrcc	0, 0, r0, cr0, cr15, {1}
    4050:	0500003f 	streq	r0, [r0, #-63]	; 0xffffffc1
    4054:	31007300 	mrscc	r7, LR_irq
    4058:	3f3e9f25 	svccc	0x003e9f25
    405c:	3f400000 	svccc	0x00400000
    4060:	00010000 	andeq	r0, r1, r0
    4064:	003f4053 	eorseq	r4, pc, r3, asr r0	; <UNPREDICTABLE>
    4068:	003f4c00 	eorseq	r4, pc, r0, lsl #24
    406c:	0a000400 	beq	5074 <patchGenfskRfe+0xe0>
    4070:	4c9fffff 	ldcmi	15, cr15, [pc], {255}	; 0xff
    4074:	5200003f 	andpl	r0, r0, #63	; 0x3f
    4078:	0100003f 	tsteq	r0, pc, lsr r0
    407c:	3f565300 	svccc	0x00565300
    4080:	3f5c0000 	svccc	0x005c0000
    4084:	00010000 	andeq	r0, r1, r0
    4088:	003f5c53 	eorseq	r5, pc, r3, asr ip	; <UNPREDICTABLE>
    408c:	003f6e00 	eorseq	r6, pc, r0, lsl #28
    4090:	31000200 	mrscc	r0, R8_usr
    4094:	003f6e9f 	mlaseq	pc, pc, lr, r6	; <UNPREDICTABLE>
    4098:	003f8000 	eorseq	r8, pc, r0
    409c:	53000100 	movwpl	r0, #256	; 0x100
	...
    40a8:	00003f32 	andeq	r3, r0, r2, lsr pc
    40ac:	00003f38 	andeq	r3, r0, r8, lsr pc
    40b0:	9f300002 	svcls	0x00300002
    40b4:	00003f38 	andeq	r3, r0, r8, lsr pc
    40b8:	00003f74 	andeq	r3, r0, r4, ror pc
    40bc:	00500001 	subseq	r0, r0, r1
    40c0:	00000000 	andeq	r0, r0, r0
    40c4:	74000000 	strvc	r0, [r0], #-0
    40c8:	7800003f 	stmdavc	r0, {r0, r1, r2, r3, r4, r5}
    40cc:	0800003f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5}
    40d0:	40007200 	andmi	r7, r0, r0, lsl #4
    40d4:	21007324 	tstcs	r0, r4, lsr #6
    40d8:	003f789f 	mlaseq	pc, pc, r8, r7	; <UNPREDICTABLE>
    40dc:	003f8000 	eorseq	r8, pc, r0
    40e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    40ec:	00003f8a 	andeq	r3, r0, sl, lsl #31
    40f0:	00003f8e 	andeq	r3, r0, lr, lsl #31
    40f4:	0070000a 	rsbseq	r0, r0, sl
    40f8:	24381a33 	ldrtcs	r1, [r8], #-2611	; 0xfffff5cd
    40fc:	9f210073 	svcls	0x00210073
    4100:	00003f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    4104:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    4108:	00500001 	subseq	r0, r0, r1
	...
    4118:	07000000 	streq	r0, [r0, -r0]
    411c:	0a007000 	beq	20124 <__ccfg+0x17c>
    4120:	9f1a3fff 	svcls	0x001a3fff
	...
    412c:	00003f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    4130:	00003fa0 	andeq	r3, r0, r0, lsr #31
    4134:	0070000f 	rsbseq	r0, r0, pc
    4138:	701afc08 	andsvc	pc, sl, r8, lsl #24
    413c:	f8801100 			; <UNDEFINED> instruction: 0xf8801100
    4140:	211a67f3 			; <UNDEFINED> instruction: 0x211a67f3
    4144:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4148:	00000000 	andeq	r0, r0, r0
    414c:	003f9c00 	eorseq	r9, pc, r0, lsl #24
    4150:	003fa000 	eorseq	sl, pc, r0
    4154:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4160:	00003fac 	andeq	r3, r0, ip, lsr #31
    4164:	00003fb0 			; <UNDEFINED> instruction: 0x00003fb0
    4168:	0070000f 	rsbseq	r0, r0, pc
    416c:	701a3f08 	andsvc	r3, sl, r8, lsl #30
    4170:	ffc00c00 			; <UNDEFINED> instruction: 0xffc00c00
    4174:	211a00fc 	ldrshcs	r0, [sl, -ip]
    4178:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    417c:	00000000 	andeq	r0, r0, r0
    4180:	003fac00 	eorseq	sl, pc, r0, lsl #24
    4184:	003fb000 	eorseq	fp, pc, r0
    4188:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4194:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
    4198:	00004012 	andeq	r4, r0, r2, lsl r0
    419c:	12500001 	subsne	r0, r0, #1
    41a0:	20000040 	andcs	r0, r0, r0, asr #32
    41a4:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    41a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    41ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    41b0:	00000000 	andeq	r0, r0, r0
    41b4:	003ffc00 	eorseq	pc, pc, r0, lsl #24
    41b8:	00400400 	subeq	r0, r0, r0, lsl #8
    41bc:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    41c0:	ff000a00 			; <UNDEFINED> instruction: 0xff000a00
    41c4:	0800741a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp, lr}
    41c8:	72211af0 	eorvc	r1, r1, #240, 20	; 0xf0000
    41cc:	21244400 			; <UNDEFINED> instruction: 0x21244400
    41d0:	24400073 	strbcs	r0, [r0], #-115	; 0xffffff8d
    41d4:	40089f21 	andmi	r9, r8, r1, lsr #30
    41d8:	40200000 	eormi	r0, r0, r0
    41dc:	00010000 	andeq	r0, r1, r0
    41e0:	00000053 	andeq	r0, r0, r3, asr r0
    41e4:	00000000 	andeq	r0, r0, r0
    41e8:	003fc400 	eorseq	ip, pc, r0, lsl #8
    41ec:	00400e00 	subeq	r0, r0, r0, lsl #28
    41f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    41fc:	00003fca 	andeq	r3, r0, sl, asr #31
    4200:	00003fde 	ldrdeq	r3, [r0], -lr
    4204:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
    4208:	ea00003f 	b	430c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x88>
    420c:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    4210:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    4214:	fc9f24ec 	ldc2	4, cr2, [pc], {236}	; 0xec
    4218:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    421c:	01000040 	tsteq	r0, r0, asr #32
    4220:	00005200 	andeq	r5, r0, r0, lsl #4
    4224:	00000000 	andeq	r0, r0, r0
    4228:	3fd20000 	svccc	0x00d20000
    422c:	3ff00000 	svccc	0x00f00000	; IMB
    4230:	00010000 	andeq	r0, r1, r0
    4234:	003ff053 	eorseq	pc, pc, r3, asr r0	; <UNPREDICTABLE>
    4238:	003ffc00 	eorseq	pc, pc, r0, lsl #24
    423c:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    4240:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    4244:	003ffc9f 	mlaseq	pc, pc, ip, pc	; <UNPREDICTABLE>
    4248:	00400800 	subeq	r0, r0, r0, lsl #16
    424c:	53000100 	movwpl	r0, #256	; 0x100
	...
    4258:	00003fdc 	ldrdeq	r3, [r0], -ip
    425c:	00003fde 	ldrdeq	r3, [r0], -lr
    4260:	00760006 	rsbseq	r0, r6, r6
    4264:	9f220072 	svcls	0x00220072
    4268:	00003fde 	ldrdeq	r3, [r0], -lr
    426c:	00003fe6 	andeq	r3, r0, r6, ror #31
    4270:	e6520001 	ldrb	r0, [r2], -r1
    4274:	e800003f 	stmda	r0, {r0, r1, r2, r3, r4, r5}
    4278:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
    427c:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    4280:	007624ec 	rsbseq	r2, r6, ip, ror #9
    4284:	3fe89f22 	svccc	0x00e89f22
    4288:	3fea0000 	svccc	0x00ea0000
    428c:	00010000 	andeq	r0, r1, r0
    4290:	003fee55 	eorseq	lr, pc, r5, asr lr	; <UNPREDICTABLE>
    4294:	003ff000 	eorseq	pc, pc, r0
    4298:	71000600 	tstvc	r0, r0, lsl #12
    429c:	22007300 	andcs	r7, r0, #0, 6
    42a0:	003ff09f 	mlaseq	pc, pc, r0, pc	; <UNPREDICTABLE>
    42a4:	003ff800 	eorseq	pc, pc, r0, lsl #16
    42a8:	53000100 	movwpl	r0, #256	; 0x100
    42ac:	00003ff8 	strdeq	r3, [r0], -r8
    42b0:	00003ffa 	strdeq	r3, [r0], -sl
    42b4:	00740009 	rsbseq	r0, r4, r9
    42b8:	7124f009 	msrvc	CPSR_s, r9
    42bc:	fa9f2200 	blx	fe7ccac4 <_estack+0xde7c7ac4>
    42c0:	fc00003f 	stc2	0, cr0, [r0], {63}	; 0x3f
    42c4:	0200003f 	andeq	r0, r0, #63	; 0x3f
    42c8:	009f3000 	addseq	r3, pc, r0
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	20000000 	andcs	r0, r0, r0
    42d4:	28000040 	stmdacs	r0, {r6}
    42d8:	01000040 	tsteq	r0, r0, asr #32
    42dc:	40285000 	eormi	r5, r8, r0
    42e0:	40340000 	eorsmi	r0, r4, r0
    42e4:	00040000 	andeq	r0, r4, r0
    42e8:	9f5001f3 	svcls	0x005001f3
	...
    42f4:	00004020 	andeq	r4, r0, r0, lsr #32
    42f8:	0000402e 	andeq	r4, r0, lr, lsr #32
    42fc:	9f300002 	svcls	0x00300002
    4300:	0000402e 	andeq	r4, r0, lr, lsr #32
    4304:	00004034 	andeq	r4, r0, r4, lsr r0
    4308:	00500001 	subseq	r0, r0, r1
    430c:	00000000 	andeq	r0, r0, r0
    4310:	22000000 	andcs	r0, r0, #0
    4314:	28000040 	stmdacs	r0, {r6}
    4318:	01000040 	tsteq	r0, r0, asr #32
    431c:	40285000 	eormi	r5, r8, r0
    4320:	40340000 	eorsmi	r0, r4, r0
    4324:	00040000 	andeq	r0, r4, r0
    4328:	9f5001f3 	svcls	0x005001f3
	...
    4334:	0000402c 	andeq	r4, r0, ip, lsr #32
    4338:	0000402e 	andeq	r4, r0, lr, lsr #32
    433c:	00500001 	subseq	r0, r0, r1
    4340:	00000000 	andeq	r0, r0, r0
    4344:	34000000 	strcc	r0, [r0], #-0
    4348:	3c000040 	stccc	0, cr0, [r0], {64}	; 0x40
    434c:	01000040 	tsteq	r0, r0, asr #32
    4350:	403c5000 	eorsmi	r5, ip, r0
    4354:	40480000 	submi	r0, r8, r0
    4358:	00040000 	andeq	r0, r4, r0
    435c:	9f5001f3 	svcls	0x005001f3
	...
    4368:	00004034 	andeq	r4, r0, r4, lsr r0
    436c:	00004042 	andeq	r4, r0, r2, asr #32
    4370:	9f310002 	svcls	0x00310002
    4374:	00004042 	andeq	r4, r0, r2, asr #32
    4378:	00004048 	andeq	r4, r0, r8, asr #32
    437c:	00500001 	subseq	r0, r0, r1
    4380:	00000000 	andeq	r0, r0, r0
    4384:	36000000 	strcc	r0, [r0], -r0
    4388:	3c000040 	stccc	0, cr0, [r0], {64}	; 0x40
    438c:	01000040 	tsteq	r0, r0, asr #32
    4390:	403c5000 	eorsmi	r5, ip, r0
    4394:	40480000 	submi	r0, r8, r0
    4398:	00040000 	andeq	r0, r4, r0
    439c:	9f5001f3 	svcls	0x005001f3
	...
    43a8:	00004040 	andeq	r4, r0, r0, asr #32
    43ac:	00004042 	andeq	r4, r0, r2, asr #32
    43b0:	00500001 	subseq	r0, r0, r1
    43b4:	00000000 	andeq	r0, r0, r0
    43b8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    43bc:	50000040 	andpl	r0, r0, r0, asr #32
    43c0:	01000040 	tsteq	r0, r0, asr #32
    43c4:	40505000 	subsmi	r5, r0, r0
    43c8:	405c0000 	subsmi	r0, ip, r0
    43cc:	00040000 	andeq	r0, r4, r0
    43d0:	9f5001f3 	svcls	0x005001f3
	...
    43dc:	00004048 	andeq	r4, r0, r8, asr #32
    43e0:	00004056 	andeq	r4, r0, r6, asr r0
    43e4:	9f310002 	svcls	0x00310002
    43e8:	00004056 	andeq	r4, r0, r6, asr r0
    43ec:	0000405c 	andeq	r4, r0, ip, asr r0
    43f0:	00500001 	subseq	r0, r0, r1
    43f4:	00000000 	andeq	r0, r0, r0
    43f8:	4a000000 	bmi	4400 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x2c>
    43fc:	50000040 	andpl	r0, r0, r0, asr #32
    4400:	01000040 	tsteq	r0, r0, asr #32
    4404:	40505000 	subsmi	r5, r0, r0
    4408:	405c0000 	subsmi	r0, ip, r0
    440c:	00040000 	andeq	r0, r4, r0
    4410:	9f5001f3 	svcls	0x005001f3
	...
    441c:	00004054 	andeq	r4, r0, r4, asr r0
    4420:	00004056 	andeq	r4, r0, r6, asr r0
    4424:	00500001 	subseq	r0, r0, r1
    4428:	00000000 	andeq	r0, r0, r0
    442c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4430:	68000040 	stmdavs	r0, {r6}
    4434:	01000040 	tsteq	r0, r0, asr #32
    4438:	40685000 	rsbmi	r5, r8, r0
    443c:	40840000 	addmi	r0, r4, r0
    4440:	00040000 	andeq	r0, r4, r0
    4444:	9f5001f3 	svcls	0x005001f3
	...
    4450:	0000405c 	andeq	r4, r0, ip, asr r0
    4454:	0000407e 	andeq	r4, r0, lr, ror r0
    4458:	9f300002 	svcls	0x00300002
    445c:	0000407e 	andeq	r4, r0, lr, ror r0
    4460:	00004084 	andeq	r4, r0, r4, lsl #1
    4464:	00500001 	subseq	r0, r0, r1
    4468:	00000000 	andeq	r0, r0, r0
    446c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    4470:	68000040 	stmdavs	r0, {r6}
    4474:	01000040 	tsteq	r0, r0, asr #32
    4478:	40685000 	rsbmi	r5, r8, r0
    447c:	40840000 	addmi	r0, r4, r0
    4480:	00040000 	andeq	r0, r4, r0
    4484:	9f5001f3 	svcls	0x005001f3
	...
    4490:	00004070 	andeq	r4, r0, r0, ror r0
    4494:	00004078 	andeq	r4, r0, r8, ror r0
    4498:	00730010 	rsbseq	r0, r3, r0, lsl r0
    449c:	1a24464c 	bne	915dd4 <__ccfg+0x8f5e2c>
    44a0:	24322548 	ldrtcs	r2, [r2], #-1352	; 0xfffffab8
    44a4:	24380072 	ldrtcs	r0, [r8], #-114	; 0xffffff8e
    44a8:	407a9f21 	rsbsmi	r9, sl, r1, lsr #30
    44ac:	407e0000 	rsbsmi	r0, lr, r0
    44b0:	00010000 	andeq	r0, r1, r0
    44b4:	00000050 	andeq	r0, r0, r0, asr r0
    44b8:	00000000 	andeq	r0, r0, r0
    44bc:	00406400 	subeq	r6, r0, r0, lsl #8
    44c0:	00407800 	subeq	r7, r0, r0, lsl #16
    44c4:	53000100 	movwpl	r0, #256	; 0x100
	...
    44d0:	00004088 	andeq	r4, r0, r8, lsl #1
    44d4:	0000408c 	andeq	r4, r0, ip, lsl #1
    44d8:	00700009 	rsbseq	r0, r0, r9
    44dc:	1a244048 	bne	914604 <__ccfg+0x8f465c>
    44e0:	009f2543 	addseq	r2, pc, r3, asr #10
    44e4:	00000000 	andeq	r0, r0, r0
    44e8:	94000000 	strls	r0, [r0], #-0
    44ec:	a0000040 	andge	r0, r0, r0, asr #32
    44f0:	01000040 	tsteq	r0, r0, asr #32
    44f4:	40a05000 	adcmi	r5, r0, r0
    44f8:	40c00000 	sbcmi	r0, r0, r0
    44fc:	00040000 	andeq	r0, r4, r0
    4500:	9f5001f3 	svcls	0x005001f3
	...
    450c:	00004094 	muleq	r0, r4, r0
    4510:	000040b6 	strheq	r4, [r0], -r6
    4514:	000c0006 	andeq	r0, ip, r6
    4518:	9f403f80 	svcls	0x00403f80
    451c:	000040b6 	strheq	r4, [r0], -r6
    4520:	000040c0 	andeq	r4, r0, r0, asr #1
    4524:	00500001 	subseq	r0, r0, r1
    4528:	00000000 	andeq	r0, r0, r0
    452c:	96000000 	strls	r0, [r0], -r0
    4530:	a0000040 	andge	r0, r0, r0, asr #32
    4534:	01000040 	tsteq	r0, r0, asr #32
    4538:	40a05000 	adcmi	r5, r0, r0
    453c:	40c00000 	sbcmi	r0, r0, r0
    4540:	00040000 	andeq	r0, r4, r0
    4544:	9f5001f3 	svcls	0x005001f3
	...
    4550:	000040a4 	andeq	r4, r0, r4, lsr #1
    4554:	000040aa 	andeq	r4, r0, sl, lsr #1
    4558:	00730010 	rsbseq	r0, r3, r0, lsl r0
    455c:	1a03f00a 	bne	10058c <__ccfg+0xe05e4>
    4560:	24402534 	strbcs	r2, [r0], #-1332	; 0xfffffacc
    4564:	24460072 	strbcs	r0, [r6], #-114	; 0xffffff8e
    4568:	40b49f21 	adcsmi	r9, r4, r1, lsr #30
    456c:	40b60000 	adcsmi	r0, r6, r0
    4570:	00010000 	andeq	r0, r1, r0
    4574:	00000050 	andeq	r0, r0, r0, asr r0
    4578:	00000000 	andeq	r0, r0, r0
    457c:	00409c00 	subeq	r9, r0, r0, lsl #24
    4580:	0040aa00 	subeq	sl, r0, r0, lsl #20
    4584:	53000100 	movwpl	r0, #256	; 0x100
	...
    4590:	000040c0 	andeq	r4, r0, r0, asr #1
    4594:	000040c8 	andeq	r4, r0, r8, asr #1
    4598:	c8500001 	ldmdagt	r0, {r0}^
    459c:	d4000040 	strle	r0, [r0], #-64	; 0xffffffc0
    45a0:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    45a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    45a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	0040c000 	subeq	ip, r0, r0
    45b4:	0040ce00 	subeq	ip, r0, r0, lsl #28
    45b8:	30000200 	andcc	r0, r0, r0, lsl #4
    45bc:	0040ce9f 	umaaleq	ip, r0, pc, lr	; <UNPREDICTABLE>
    45c0:	0040d400 	subeq	sp, r0, r0, lsl #8
    45c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    45d0:	000040c2 	andeq	r4, r0, r2, asr #1
    45d4:	000040c8 	andeq	r4, r0, r8, asr #1
    45d8:	c8500001 	ldmdagt	r0, {r0}^
    45dc:	d4000040 	strle	r0, [r0], #-64	; 0xffffffc0
    45e0:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    45e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    45e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ec:	00000000 	andeq	r0, r0, r0
    45f0:	0040cc00 	subeq	ip, r0, r0, lsl #24
    45f4:	0040ce00 	subeq	ip, r0, r0, lsl #28
    45f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4604:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4608:	000040dc 	ldrdeq	r4, [r0], -ip
    460c:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4610:	e8000040 	stmda	r0, {r6}
    4614:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4618:	5001f300 	andpl	pc, r1, r0, lsl #6
    461c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4620:	00000000 	andeq	r0, r0, r0
    4624:	0040d400 	subeq	sp, r0, r0, lsl #8
    4628:	0040e200 	subeq	lr, r0, r0, lsl #4
    462c:	30000200 	andcc	r0, r0, r0, lsl #4
    4630:	0040e29f 	umaaleq	lr, r0, pc, r2	; <UNPREDICTABLE>
    4634:	0040e800 	subeq	lr, r0, r0, lsl #16
    4638:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4644:	000040d6 	ldrdeq	r4, [r0], -r6
    4648:	000040dc 	ldrdeq	r4, [r0], -ip
    464c:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4650:	e8000040 	stmda	r0, {r6}
    4654:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4658:	5001f300 	andpl	pc, r1, r0, lsl #6
    465c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4660:	00000000 	andeq	r0, r0, r0
    4664:	0040e000 	subeq	lr, r0, r0
    4668:	0040e200 	subeq	lr, r0, r0, lsl #4
    466c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4678:	000040e8 	andeq	r4, r0, r8, ror #1
    467c:	000040ee 	andeq	r4, r0, lr, ror #1
    4680:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    4684:	d8000040 	stmdale	r0, {r6}
    4688:	01000041 	tsteq	r0, r1, asr #32
    468c:	41d85500 	bicsmi	r5, r8, r0, lsl #10
    4690:	41f80000 	mvnsmi	r0, r0
    4694:	00040000 	andeq	r0, r4, r0
    4698:	9f5001f3 	svcls	0x005001f3
	...
    46a4:	000040e8 	andeq	r4, r0, r8, ror #1
    46a8:	000040f1 	strdeq	r4, [r0], -r1
    46ac:	f1510001 			; <UNDEFINED> instruction: 0xf1510001
    46b0:	f8000040 			; <UNDEFINED> instruction: 0xf8000040
    46b4:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    46b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    46bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46c0:	00000000 	andeq	r0, r0, r0
    46c4:	0040f600 	subeq	pc, r0, r0, lsl #12
    46c8:	0040fa00 	subeq	pc, r0, r0, lsl #20
    46cc:	50000100 	andpl	r0, r0, r0, lsl #2
    46d0:	000040fa 	strdeq	r4, [r0], -sl
    46d4:	000040fd 	strdeq	r4, [r0], -sp
    46d8:	02520001 	subseq	r0, r2, #1
    46dc:	06000041 	streq	r0, [r0], -r1, asr #32
    46e0:	01000041 	tsteq	r0, r1, asr #32
    46e4:	41305000 	teqmi	r0, r0
    46e8:	41320000 	teqmi	r2, r0
    46ec:	00010000 	andeq	r0, r1, r0
    46f0:	00413250 	subeq	r3, r1, r0, asr r2
    46f4:	00413500 	subeq	r3, r1, r0, lsl #10
    46f8:	52000100 	andpl	r0, r0, #0, 2
    46fc:	0000413e 	andeq	r4, r0, lr, lsr r1
    4700:	00004140 	andeq	r4, r0, r0, asr #2
    4704:	40500001 	subsmi	r0, r0, r1
    4708:	43000041 	movwmi	r0, #65	; 0x41
    470c:	01000041 	tsteq	r0, r1, asr #32
    4710:	414e5200 	mrsmi	r5, SPSR_fiq
    4714:	41500000 	cmpmi	r0, r0
    4718:	00010000 	andeq	r0, r1, r0
    471c:	00415050 	subeq	r5, r1, r0, asr r0
    4720:	00415300 	subeq	r5, r1, r0, lsl #6
    4724:	52000100 	andpl	r0, r0, #0, 2
    4728:	0000415a 	andeq	r4, r0, sl, asr r1
    472c:	0000415c 	andeq	r4, r0, ip, asr r1
    4730:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4734:	70000041 	andvc	r0, r0, r1, asr #32
    4738:	01000041 	tsteq	r0, r1, asr #32
    473c:	417e5000 	cmnmi	lr, r0
    4740:	41800000 	orrmi	r0, r0, r0
    4744:	00010000 	andeq	r0, r1, r0
    4748:	00418050 	subeq	r8, r1, r0, asr r0
    474c:	00418300 	subeq	r8, r1, r0, lsl #6
    4750:	52000100 	andpl	r0, r0, #0, 2
    4754:	0000418a 	andeq	r4, r0, sl, lsl #3
    4758:	0000418c 	andeq	r4, r0, ip, lsl #3
    475c:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4760:	9e000041 	cdpls	0, 0, cr0, cr0, cr1, {2}
    4764:	01000041 	tsteq	r0, r1, asr #32
    4768:	41ae5000 			; <UNDEFINED> instruction: 0x41ae5000
    476c:	41b20000 			; <UNDEFINED> instruction: 0x41b20000
    4770:	00010000 	andeq	r0, r1, r0
    4774:	0041c650 	subeq	ip, r1, r0, asr r6
    4778:	0041c800 	subeq	ip, r1, r0, lsl #16
    477c:	50000100 	andpl	r0, r0, r0, lsl #2
    4780:	000041c8 	andeq	r4, r0, r8, asr #3
    4784:	000041cb 	andeq	r4, r0, fp, asr #3
    4788:	00520001 	subseq	r0, r2, r1
    478c:	00000000 	andeq	r0, r0, r0
    4790:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4794:	24000041 	strcs	r0, [r0], #-65	; 0xffffffbf
    4798:	07000041 	streq	r0, [r0, -r1, asr #32]
    479c:	0a007200 	beq	20fa4 <__ccfg+0xffc>
    47a0:	9f1a3fff 	svcls	0x001a3fff
	...
    47ac:	00004212 	andeq	r4, r0, r2, lsl r2
    47b0:	0000421c 	andeq	r4, r0, ip, lsl r2
    47b4:	00730009 	rsbseq	r0, r3, r9
    47b8:	0000040c 	andeq	r0, r0, ip, lsl #8
    47bc:	009f2120 	addseq	r2, pc, r0, lsr #2
    47c0:	00000000 	andeq	r0, r0, r0
    47c4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    47c8:	64000042 	strvs	r0, [r0], #-66	; 0xffffffbe
    47cc:	01000042 	tsteq	r0, r2, asr #32
    47d0:	42645000 	rsbmi	r5, r4, #0
    47d4:	42840000 	addmi	r0, r4, #0
    47d8:	00040000 	andeq	r0, r4, r0
    47dc:	9f5001f3 	svcls	0x005001f3
	...
    47e8:	00004284 	andeq	r4, r0, r4, lsl #5
    47ec:	000042ac 	andeq	r4, r0, ip, lsr #5
    47f0:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    47f4:	ec000042 	stc	0, cr0, [r0], {66}	; 0x42
    47f8:	01000042 	tsteq	r0, r2, asr #32
    47fc:	42ec5400 	rscmi	r5, ip, #0, 8
    4800:	42f40000 	rscsmi	r0, r4, #0
    4804:	00010000 	andeq	r0, r1, r0
    4808:	0042f450 	subeq	pc, r2, r0, asr r4	; <UNPREDICTABLE>
    480c:	00433e00 	subeq	r3, r3, r0, lsl #28
    4810:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4814:	0000433e 	andeq	r4, r0, lr, lsr r3
    4818:	0000437a 	andeq	r4, r0, sl, ror r3
    481c:	01f30004 	mvnseq	r0, r4
    4820:	437a9f50 	cmnmi	sl, #80, 30	; 0x140
    4824:	437e0000 	cmnmi	lr, #0
    4828:	00010000 	andeq	r0, r1, r0
    482c:	00437e54 	subeq	r7, r3, r4, asr lr
    4830:	0043d400 	subeq	sp, r3, r0, lsl #8
    4834:	f3000400 	vshl.u8	d0, d0, d0
    4838:	009f5001 	addseq	r5, pc, r1
    483c:	00000000 	andeq	r0, r0, r0
    4840:	9a000000 	bls	4848 <rand+0x1c>
    4844:	dc000042 	stcle	0, cr0, [r0], {66}	; 0x42
    4848:	01000042 	tsteq	r0, r2, asr #32
    484c:	00005300 	andeq	r5, r0, r0, lsl #6
    4850:	00000000 	andeq	r0, r0, r0
    4854:	430e0000 	movwmi	r0, #57344	; 0xe000
    4858:	43140000 	tstmi	r4, #0
    485c:	00010000 	andeq	r0, r1, r0
    4860:	00000050 	andeq	r0, r0, r0, asr r0
    4864:	00000000 	andeq	r0, r0, r0
    4868:	00433e00 	subeq	r3, r3, r0, lsl #28
    486c:	00434000 	subeq	r4, r3, r0
    4870:	50000100 	andpl	r0, r0, r0, lsl #2
    4874:	00004340 	andeq	r4, r0, r0, asr #6
    4878:	00004354 	andeq	r4, r0, r4, asr r3
    487c:	00540001 	subseq	r0, r4, r1
    4880:	00000000 	andeq	r0, r0, r0
    4884:	54000000 	strpl	r0, [r0], #-0
    4888:	74000043 	strvc	r0, [r0], #-67	; 0xffffffbd
    488c:	01000043 	tsteq	r0, r3, asr #32
    4890:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    48a0:	00010000 	andeq	r0, r1, r0
    48a4:	00000055 	andeq	r0, r0, r5, asr r0
    48a8:	00000000 	andeq	r0, r0, r0
    48ac:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    48b0:	00009f7f 	andeq	r9, r0, pc, ror pc
    48b4:	00000000 	andeq	r0, r0, r0
    48b8:	00010000 	andeq	r0, r1, r0
    48bc:	00000055 	andeq	r0, r0, r5, asr r0
    48c0:	00000000 	andeq	r0, r0, r0
    48c4:	0043d400 	subeq	sp, r3, r0, lsl #8
    48c8:	0043f300 	subeq	pc, r3, r0, lsl #6
    48cc:	50000100 	andpl	r0, r0, r0, lsl #2
    48d0:	000043f3 	strdeq	r4, [r0], -r3
    48d4:	000044b4 			; <UNDEFINED> instruction: 0x000044b4
    48d8:	b4570001 	ldrblt	r0, [r7], #-1
    48dc:	f4000044 	vst4.16	{d0-d3}, [r0], r4
    48e0:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
    48e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    48e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48ec:	00000000 	andeq	r0, r0, r0
    48f0:	0043f400 	subeq	pc, r3, r0, lsl #8
    48f4:	00457400 	subeq	r7, r5, r0, lsl #8
    48f8:	50000100 	andpl	r0, r0, r0, lsl #2
    48fc:	00004576 	andeq	r4, r0, r6, ror r5
    4900:	000045b0 			; <UNDEFINED> instruction: 0x000045b0
    4904:	00500001 	subseq	r0, r0, r1
    4908:	00000000 	andeq	r0, r0, r0
    490c:	9c000000 	stcls	0, cr0, [r0], {-0}
    4910:	a0000044 	andge	r0, r0, r4, asr #32
    4914:	03000044 	movweq	r0, #68	; 0x44
    4918:	9f717000 	svcls	0x00717000
    491c:	000044a0 	andeq	r4, r0, r0, lsr #9
    4920:	000044a6 	andeq	r4, r0, r6, lsr #9
    4924:	a6510001 	ldrbge	r0, [r1], -r1
    4928:	c6000044 	strgt	r0, [r0], -r4, asr #32
    492c:	02000044 	andeq	r0, r0, #68	; 0x44
    4930:	c6549100 	ldrbgt	r9, [r4], -r0, lsl #2
    4934:	d2000044 	andle	r0, r0, #68	; 0x44
    4938:	01000044 	tsteq	r0, r4, asr #32
    493c:	44d25100 	ldrbmi	r5, [r2], #256	; 0x100
    4940:	44d40000 	ldrbmi	r0, [r4], #0
    4944:	00020000 	andeq	r0, r2, r0
    4948:	44d45491 	ldrbmi	r5, [r4], #1169	; 0x491
    494c:	44d60000 	ldrbmi	r0, [r6], #0
    4950:	00010000 	andeq	r0, r1, r0
    4954:	0044d651 	subeq	sp, r4, r1, asr r6
    4958:	00457c00 	subeq	r7, r5, r0, lsl #24
    495c:	91000200 	mrsls	r0, R8_usr
    4960:	00000054 	andeq	r0, r0, r4, asr r0
    4964:	00000000 	andeq	r0, r0, r0
    4968:	00440000 	subeq	r0, r4, r0
    496c:	00445a00 	subeq	r5, r4, r0, lsl #20
    4970:	51000100 	mrspl	r0, (UNDEF: 16)
    4974:	00004462 	andeq	r4, r0, r2, ror #8
    4978:	00004464 	andeq	r4, r0, r4, ror #8
    497c:	00510001 	subseq	r0, r1, r1
    4980:	00000000 	andeq	r0, r0, r0
    4984:	52000000 	andpl	r0, r0, #0
    4988:	60000044 	andvs	r0, r0, r4, asr #32
    498c:	01000044 	tsteq	r0, r4, asr #32
    4990:	44625200 	strbtmi	r5, [r2], #-512	; 0xfffffe00
    4994:	45440000 	strbmi	r0, [r4, #-0]
    4998:	00010000 	andeq	r0, r1, r0
    499c:	00000052 	andeq	r0, r0, r2, asr r0
    49a0:	00000000 	andeq	r0, r0, r0
    49a4:	00445200 	subeq	r5, r4, r0, lsl #4
    49a8:	00453a00 	subeq	r3, r5, r0, lsl #20
    49ac:	53000100 	movwpl	r0, #256	; 0x100
	...
    49b8:	000043f8 	strdeq	r4, [r0], -r8
    49bc:	0000454e 	andeq	r4, r0, lr, asr #10
    49c0:	00550001 	subseq	r0, r5, r1
    49c4:	00000000 	andeq	r0, r0, r0
    49c8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    49cc:	7c000043 	stcvc	0, cr0, [r0], {67}	; 0x43
    49d0:	02000044 	andeq	r0, r0, #68	; 0x44
    49d4:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    49d8:	b0000044 	andlt	r0, r0, r4, asr #32
    49dc:	01000045 	tsteq	r0, r5, asr #32
    49e0:	00005400 	andeq	r5, r0, r0, lsl #8
    49e4:	00000000 	andeq	r0, r0, r0
    49e8:	44740000 	ldrbtmi	r0, [r4], #-0
    49ec:	447e0000 	ldrbtmi	r0, [lr], #-0
    49f0:	00010000 	andeq	r0, r1, r0
    49f4:	00000051 	andeq	r0, r0, r1, asr r0
    49f8:	00000000 	andeq	r0, r0, r0
    49fc:	00449c00 	subeq	r9, r4, r0, lsl #24
    4a00:	0044ec00 	subeq	lr, r4, r0, lsl #24
    4a04:	30000200 	andcc	r0, r0, r0, lsl #4
    4a08:	0044ec9f 	umaaleq	lr, r4, pc, ip	; <UNPREDICTABLE>
    4a0c:	00450c00 	subeq	r0, r5, r0, lsl #24
    4a10:	51000100 	mrspl	r0, (UNDEF: 16)
    4a14:	0000450c 	andeq	r4, r0, ip, lsl #10
    4a18:	00004512 	andeq	r4, r0, r2, lsl r5
    4a1c:	9f300002 	svcls	0x00300002
    4a20:	00004512 	andeq	r4, r0, r2, lsl r5
    4a24:	0000454c 	andeq	r4, r0, ip, asr #10
    4a28:	00510001 	subseq	r0, r1, r1
    4a2c:	00000000 	andeq	r0, r0, r0
    4a30:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4a34:	cc000044 	stcgt	0, cr0, [r0], {68}	; 0x44
    4a38:	01000044 	tsteq	r0, r4, asr #32
    4a3c:	44d45e00 	ldrbmi	r5, [r4], #3584	; 0xe00
    4a40:	44d60000 	ldrbmi	r0, [r6], #0
    4a44:	00010000 	andeq	r0, r1, r0
    4a48:	0044d65e 	subeq	sp, r4, lr, asr r6
    4a4c:	0044dc00 	subeq	sp, r4, r0, lsl #24
    4a50:	51000100 	mrspl	r0, (UNDEF: 16)
    4a54:	000044dc 	ldrdeq	r4, [r0], -ip
    4a58:	000044e4 	andeq	r4, r0, r4, ror #9
    4a5c:	7f710003 	svcvc	0x00710003
    4a60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a64:	00000000 	andeq	r0, r0, r0
    4a68:	00449c00 	subeq	r9, r4, r0, lsl #24
    4a6c:	0044c600 	subeq	ip, r4, r0, lsl #12
    4a70:	30000200 	andcc	r0, r0, r0, lsl #4
    4a74:	0044c69f 	umaaleq	ip, r4, pc, r6	; <UNPREDICTABLE>
    4a78:	0044d000 	subeq	sp, r4, r0
    4a7c:	5e000100 	adfpls	f0, f0, f0
    4a80:	000044d0 	ldrdeq	r4, [r0], -r0
    4a84:	000044d2 	ldrdeq	r4, [r0], -r2
    4a88:	00710005 	rsbseq	r0, r1, r5
    4a8c:	d29f2638 	addsle	r2, pc, #56, 12	; 0x3800000
    4a90:	d4000044 	strle	r0, [r0], #-68	; 0xffffffbc
    4a94:	06000044 	streq	r0, [r0], -r4, asr #32
    4a98:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    4a9c:	d49f2638 	ldrle	r2, [pc], #1592	; 4aa4 <__aeabi_lmul+0x240>
    4aa0:	d6000044 	strle	r0, [r0], -r4, asr #32
    4aa4:	01000044 	tsteq	r0, r4, asr #32
    4aa8:	44d65e00 	ldrbmi	r5, [r6], #3584	; 0xe00
    4aac:	450c0000 	strmi	r0, [ip, #-0]
    4ab0:	00060000 	andeq	r0, r6, r0
    4ab4:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    4ab8:	450c9f26 	strmi	r9, [ip, #-3878]	; 0xfffff0da
    4abc:	45120000 	ldrmi	r0, [r2, #-0]
    4ac0:	00020000 	andeq	r0, r2, r0
    4ac4:	45129f30 	ldrmi	r9, [r2, #-3888]	; 0xfffff0d0
    4ac8:	457c0000 	ldrbmi	r0, [ip, #-0]!
    4acc:	00010000 	andeq	r0, r1, r0
    4ad0:	0000005e 	andeq	r0, r0, lr, asr r0
    4ad4:	00000000 	andeq	r0, r0, r0
    4ad8:	0044e800 	subeq	lr, r4, r0, lsl #16
    4adc:	00450c00 	subeq	r0, r5, r0, lsl #24
    4ae0:	5c000100 	stfpls	f0, [r0], {-0}
	...
    4aec:	00004516 	andeq	r4, r0, r6, lsl r5
    4af0:	0000457c 	andeq	r4, r0, ip, ror r5
    4af4:	005a0001 	subseq	r0, sl, r1
    4af8:	00000000 	andeq	r0, r0, r0
    4afc:	1a000000 	bne	4b04 <__aeabi_lmul+0x2a0>
    4b00:	56000045 	strpl	r0, [r0], -r5, asr #32
    4b04:	01000045 	tsteq	r0, r5, asr #32
    4b08:	45565c00 	ldrbmi	r5, [r6, #-3072]	; 0xfffff400
    4b0c:	455a0000 	ldrbmi	r0, [sl, #-0]
    4b10:	00010000 	andeq	r0, r1, r0
    4b14:	00000051 	andeq	r0, r0, r1, asr r0
    4b18:	00000000 	andeq	r0, r0, r0
    4b1c:	00455a00 	subeq	r5, r5, r0, lsl #20
    4b20:	00456400 	subeq	r6, r5, r0, lsl #8
    4b24:	71001700 	tstvc	r0, r0, lsl #14
    4b28:	4b401200 	blmi	1009330 <__ccfg+0xfe9388>
    4b2c:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    4b30:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    4b34:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4b38:	16000128 	strne	r0, [r0], -r8, lsr #2
    4b3c:	00009f13 	andeq	r9, r0, r3, lsl pc
    4b40:	00000000 	andeq	r0, r0, r0
    4b44:	45840000 	strmi	r0, [r4]
    4b48:	45900000 	ldrmi	r0, [r0]
    4b4c:	00020000 	andeq	r0, r2, r0
    4b50:	45909f30 	ldrmi	r9, [r0, #3888]	; 0xf30
    4b54:	45b00000 	ldrmi	r0, [r0, #0]!
    4b58:	00010000 	andeq	r0, r1, r0
    4b5c:	00000051 	andeq	r0, r0, r1, asr r0
    4b60:	00000000 	andeq	r0, r0, r0
    4b64:	00458600 	subeq	r8, r5, r0, lsl #12
    4b68:	00458800 	subeq	r8, r5, r0, lsl #16
    4b6c:	53000100 	movwpl	r0, #256	; 0x100
    4b70:	00004588 	andeq	r4, r0, r8, lsl #11
    4b74:	00004590 	muleq	r0, r0, r5
    4b78:	9f4f0002 	svcls	0x004f0002
    4b7c:	00004590 	muleq	r0, r0, r5
    4b80:	000045a0 	andeq	r4, r0, r0, lsr #11
    4b84:	a0530001 	subsge	r0, r3, r1
    4b88:	a4000045 	strge	r0, [r0], #-69	; 0xffffffbb
    4b8c:	05000045 	streq	r0, [r0, #-69]	; 0xffffffbb
    4b90:	34007300 	strcc	r7, [r0], #-768	; 0xfffffd00
    4b94:	45a49f25 	strmi	r9, [r4, #3877]!	; 0xf25
    4b98:	45a80000 	strmi	r0, [r8, #0]!
    4b9c:	00010000 	andeq	r0, r1, r0
    4ba0:	00000053 	andeq	r0, r0, r3, asr r0
    4ba4:	00000000 	andeq	r0, r0, r0
    4ba8:	00449c00 	subeq	r9, r4, r0, lsl #24
    4bac:	00457c00 	subeq	r7, r5, r0, lsl #24
    4bb0:	0c000600 	stceq	6, cr0, [r0], {-0}
    4bb4:	5000139c 	mulpl	r0, ip, r3
    4bb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4bbc:	00000000 	andeq	r0, r0, r0
    4bc0:	00440800 	subeq	r0, r4, r0, lsl #16
    4bc4:	00441400 	subeq	r1, r4, r0, lsl #8
    4bc8:	53000100 	movwpl	r0, #256	; 0x100
	...
    4bd4:	00004428 	andeq	r4, r0, r8, lsr #8
    4bd8:	00004434 	andeq	r4, r0, r4, lsr r4
    4bdc:	00520001 	subseq	r0, r2, r1
    4be0:	00000000 	andeq	r0, r0, r0
    4be4:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4be8:	4a000044 	bmi	4d00 <__aeabi_lmul+0x49c>
    4bec:	01000044 	tsteq	r0, r4, asr #32
    4bf0:	00005200 	andeq	r5, r0, r0, lsl #4
    4bf4:	00000000 	andeq	r0, r0, r0
    4bf8:	444a0000 	strbmi	r0, [sl], #-0
    4bfc:	453a0000 	ldrmi	r0, [sl, #-0]!
    4c00:	00010000 	andeq	r0, r1, r0
    4c04:	00000053 	andeq	r0, r0, r3, asr r0
    4c08:	00000000 	andeq	r0, r0, r0
    4c0c:	00460200 	subeq	r0, r6, r0, lsl #4
    4c10:	00460c00 	subeq	r0, r6, r0, lsl #24
    4c14:	50000100 	andpl	r0, r0, r0, lsl #2
    4c18:	0000460c 	andeq	r4, r0, ip, lsl #12
    4c1c:	00004616 	andeq	r4, r0, r6, lsl r6
    4c20:	0070000e 	rsbseq	r0, r0, lr
    4c24:	16800912 	pkhbtne	r0, r0, r2, lsl #18
    4c28:	01282b14 			; <UNDEFINED> instruction: 0x01282b14
    4c2c:	9f131600 	svcls	0x00131600
	...
    4c38:	000045fc 	strdeq	r4, [r0], -ip
    4c3c:	00004628 	andeq	r4, r0, r8, lsr #12
    4c40:	00540001 	subseq	r0, r4, r1
    4c44:	00000000 	andeq	r0, r0, r0
    4c48:	2c000000 	stccs	0, cr0, [r0], {-0}
    4c4c:	32000046 	andcc	r0, r0, #70	; 0x46
    4c50:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
    4c54:	12007300 	andne	r7, r0, #0, 6
    4c58:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4c5c:	4014164f 	andsmi	r1, r4, pc, asr #12
    4c60:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4c64:	16000128 	strne	r0, [r0], -r8, lsr #2
    4c68:	00009f13 	andeq	r9, r0, r3, lsl pc
    4c6c:	00000000 	andeq	r0, r0, r0
    4c70:	46380000 	ldrtmi	r0, [r8], -r0
    4c74:	46420000 	strbmi	r0, [r2], -r0
    4c78:	00170000 	andseq	r0, r7, r0
    4c7c:	40120074 	andsmi	r0, r2, r4, ror r0
    4c80:	0a22244b 	beq	88ddb4 <__ccfg+0x86de0c>
    4c84:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    4c88:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4c8c:	0001282d 	andeq	r2, r1, sp, lsr #16
    4c90:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4ca0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ca4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    4cb4:	00010000 	andeq	r0, r1, r0
    4cb8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4cc8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4cdc:	00530001 	subseq	r0, r3, r1
	...
    4cec:	16000000 	strne	r0, [r0], -r0
    4cf0:	08007000 	stmdaeq	r0, {ip, sp, lr}
    4cf4:	400070ff 	strdmi	r7, [r0], -pc	; <UNPREDICTABLE>
    4cf8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4cfc:	80000005 	andhi	r0, r0, r5
    4d00:	0001282d 	andeq	r2, r1, sp, lsr #16
    4d04:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4d08:	00000000 	andeq	r0, r0, r0
    4d0c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    4d10:	ae000046 	cdpge	0, 0, cr0, cr0, cr6, {2}
    4d14:	03000046 	movweq	r0, #70	; 0x46
    4d18:	9fff0900 	svcls	0x00ff0900
    4d1c:	000046ae 	andeq	r4, r0, lr, lsr #13
    4d20:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
    4d24:	00500001 	subseq	r0, r0, r1
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    4d30:	86000046 	strhi	r0, [r0], -r6, asr #32
    4d34:	01000046 	tsteq	r0, r6, asr #32
    4d38:	468a5000 	strmi	r5, [sl], r0
    4d3c:	46a60000 	strtmi	r0, [r6], r0
    4d40:	00010000 	andeq	r0, r1, r0
    4d44:	0046a850 	subeq	sl, r6, r0, asr r8
    4d48:	0046aa00 	subeq	sl, r6, r0, lsl #20
    4d4c:	50000100 	andpl	r0, r0, r0, lsl #2
    4d50:	000046ac 	andeq	r4, r0, ip, lsr #13
    4d54:	000046ae 	andeq	r4, r0, lr, lsr #13
    4d58:	00500001 	subseq	r0, r0, r1
	...
    4d68:	03000000 	movweq	r0, #0
    4d6c:	9fff0900 	svcls	0x00ff0900
	...
    4d78:	00500001 	subseq	r0, r0, r1
	...
    4d88:	01000000 	mrseq	r0, (UNDEF: 0)
    4d8c:	00005400 	andeq	r5, r0, r0, lsl #8
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	46b80000 	ldrtmi	r0, [r8], r0
    4d98:	46f20000 	ldrbtmi	r0, [r2], r0
    4d9c:	00030000 	andeq	r0, r3, r0
    4da0:	f29fff09 			; <UNDEFINED> instruction: 0xf29fff09
    4da4:	f6000046 			; <UNDEFINED> instruction: 0xf6000046
    4da8:	02000046 	andeq	r0, r0, #70	; 0x46
    4dac:	f69f4400 			; <UNDEFINED> instruction: 0xf69f4400
    4db0:	fa000046 	blx	4ed0 <__pi_hex_enc_table+0x67>
    4db4:	02000046 	andeq	r0, r0, #70	; 0x46
    4db8:	fa9f4500 	blx	fe7d61c0 <_estack+0xde7d11c0>
    4dbc:	18000046 	stmdane	r0, {r1, r2, r6}
    4dc0:	03000047 	movweq	r0, #71	; 0x47
    4dc4:	9fff0900 	svcls	0x00ff0900
    4dc8:	00004718 	andeq	r4, r0, r8, lsl r7
    4dcc:	0000471a 	andeq	r4, r0, sl, lsl r7
    4dd0:	1a500001 	bne	1404ddc <__ccfg+0x13e4e34>
    4dd4:	1c000047 	stcne	0, cr0, [r0], {71}	; 0x47
    4dd8:	03000047 	movweq	r0, #71	; 0x47
    4ddc:	9fff0900 	svcls	0x00ff0900
    4de0:	0000471c 	andeq	r4, r0, ip, lsl r7
    4de4:	00004724 	andeq	r4, r0, r4, lsr #14
    4de8:	00500001 	subseq	r0, r0, r1
    4dec:	00000000 	andeq	r0, r0, r0
    4df0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4df4:	20000046 	andcs	r0, r0, r6, asr #32
    4df8:	01000047 	tsteq	r0, r7, asr #32
    4dfc:	00005400 	andeq	r5, r0, r0, lsl #8
    4e00:	00000000 	andeq	r0, r0, r0
    4e04:	473c0000 	ldrmi	r0, [ip, -r0]!
    4e08:	47450000 	strbmi	r0, [r5, -r0]
    4e0c:	00010000 	andeq	r0, r1, r0
    4e10:	00474550 	subeq	r4, r7, r0, asr r5
    4e14:	00475a00 	subeq	r5, r7, r0, lsl #20
    4e18:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4e1c:	0000475a 	andeq	r4, r0, sl, asr r7
    4e20:	0000475e 	andeq	r4, r0, lr, asr r7
    4e24:	01f30004 	mvnseq	r0, r4
    4e28:	475e9f50 			; <UNDEFINED> instruction: 0x475e9f50
    4e2c:	47600000 	strbmi	r0, [r0, -r0]!
    4e30:	00010000 	andeq	r0, r1, r0
    4e34:	00476054 	subeq	r6, r7, r4, asr r0
    4e38:	00476400 	subeq	r6, r7, r0, lsl #8
    4e3c:	f3000400 	vshl.u8	d0, d0, d0
    4e40:	009f5001 	addseq	r5, pc, r1
    4e44:	00000000 	andeq	r0, r0, r0
    4e48:	3c000000 	stccc	0, cr0, [r0], {-0}
    4e4c:	45000047 	strmi	r0, [r0, #-71]	; 0xffffffb9
    4e50:	01000047 	tsteq	r0, r7, asr #32
    4e54:	47455100 	strbmi	r5, [r5, -r0, lsl #2]
    4e58:	475a0000 	ldrbmi	r0, [sl, -r0]
    4e5c:	00010000 	andeq	r0, r1, r0
    4e60:	00475a55 	subeq	r5, r7, r5, asr sl
    4e64:	00475e00 	subeq	r5, r7, r0, lsl #28
    4e68:	f3000400 	vshl.u8	d0, d0, d0
    4e6c:	5e9f5101 	fmlple	f5, f7, f1
    4e70:	60000047 	andvs	r0, r0, r7, asr #32
    4e74:	01000047 	tsteq	r0, r7, asr #32
    4e78:	47605500 	strbmi	r5, [r0, -r0, lsl #10]!
    4e7c:	47640000 	strbmi	r0, [r4, -r0]!
    4e80:	00040000 	andeq	r0, r4, r0
    4e84:	9f5101f3 	svcls	0x005101f3
	...
    4e90:	00004746 	andeq	r4, r0, r6, asr #14
    4e94:	0000475d 	andeq	r4, r0, sp, asr r7
    4e98:	00700005 	rsbseq	r0, r0, r5
    4e9c:	5e9f2930 			; <UNDEFINED> instruction: 0x5e9f2930
    4ea0:	64000047 	strvs	r0, [r0], #-71	; 0xffffffb9
    4ea4:	05000047 	streq	r0, [r0, #-71]	; 0xffffffb9
    4ea8:	30007000 	andcc	r7, r0, r0
    4eac:	00009f29 	andeq	r9, r0, r9, lsr #30
    4eb0:	00000000 	andeq	r0, r0, r0
    4eb4:	47640000 	strbmi	r0, [r4, -r0]!
    4eb8:	47660000 	strbmi	r0, [r6, -r0]!
    4ebc:	00010000 	andeq	r0, r1, r0
    4ec0:	00476650 	subeq	r6, r7, r0, asr r6
    4ec4:	00476c00 	subeq	r6, r7, r0, lsl #24
    4ec8:	f3000400 	vshl.u8	d0, d0, d0
    4ecc:	009f5001 	addseq	r5, pc, r1
    4ed0:	00000000 	andeq	r0, r0, r0
    4ed4:	64000000 	strvs	r0, [r0], #-0
    4ed8:	68000047 	stmdavs	r0, {r0, r1, r2, r6}
    4edc:	01000047 	tsteq	r0, r7, asr #32
    4ee0:	47685100 	strbmi	r5, [r8, -r0, lsl #2]!
    4ee4:	476c0000 	strbmi	r0, [ip, -r0]!
    4ee8:	00040000 	andeq	r0, r4, r0
    4eec:	9f5101f3 	svcls	0x005101f3
	...
    4ef8:	00004764 	andeq	r4, r0, r4, ror #14
    4efc:	0000476b 	andeq	r4, r0, fp, ror #14
    4f00:	6b520001 	blvs	1484f0c <__ccfg+0x1464f64>
    4f04:	6c000047 	stcvs	0, cr0, [r0], {71}	; 0x47
    4f08:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
    4f0c:	5201f300 	andpl	pc, r1, #0, 6
    4f10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4f20:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4f2c:	01f30004 	mvnseq	r0, r4
    4f30:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4f40:	00010000 	andeq	r0, r1, r0
    4f44:	00000051 	andeq	r0, r0, r1, asr r0
    4f48:	00000000 	andeq	r0, r0, r0
    4f4c:	f3000400 	vshl.u8	d0, d0, d0
    4f50:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4f60:	01000000 	mrseq	r0, (UNDEF: 0)
    4f64:	00005200 	andeq	r5, r0, r0, lsl #4
    4f68:	00000000 	andeq	r0, r0, r0
    4f6c:	00040000 	andeq	r0, r4, r0
    4f70:	9f5201f3 	svcls	0x005201f3
	...
    4f7c:	00520001 	subseq	r0, r2, r1
    4f80:	00000000 	andeq	r0, r0, r0
    4f84:	15000000 	strne	r0, [r0, #-0]
    4f88:	5201f300 	andpl	pc, r1, #0, 6
    4f8c:	01f32540 	mvnseq	r2, r0, asr #10
    4f90:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4f94:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4f98:	16000128 	strne	r0, [r0], -r8, lsr #2
    4f9c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4fac:	00010000 	andeq	r0, r1, r0
    4fb0:	00000053 	andeq	r0, r0, r3, asr r0
    4fb4:	00000000 	andeq	r0, r0, r0
    4fb8:	f3000400 	vshl.u8	d0, d0, d0
    4fbc:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    4fcc:	04000000 	streq	r0, [r0], #-0
    4fd0:	04807000 	streq	r7, [r0], #0
    4fd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4fd8:	00000000 	andeq	r0, r0, r0
    4fdc:	f3000d00 	vpadd.f32	d0, d0, d0
    4fe0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4fe4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4fe8:	9f048023 	svcls	0x00048023
	...
    4ff4:	00500001 	subseq	r0, r0, r1
    4ff8:	00000000 	andeq	r0, r0, r0
    4ffc:	52000000 	andpl	r0, r0, #0
    5000:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5004:	01f32431 	mvnseq	r2, r1, lsr r4
    5008:	80232250 	eorhi	r2, r3, r0, asr r2
    500c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    5010:	01f32431 	mvnseq	r2, r1, lsr r4
    5014:	01f32250 	mvnseq	r2, r0, asr r2
    5018:	30254052 	eorcc	r4, r5, r2, asr r0
    501c:	00012829 	andeq	r2, r1, r9, lsr #16
    5020:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    5024:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    5028:	01f32431 	mvnseq	r2, r1, lsr r4
    502c:	80232250 	eorhi	r2, r3, r0, asr r2
    5030:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    5034:	01f32431 	mvnseq	r2, r1, lsr r4
    5038:	01f32250 	mvnseq	r2, r0, asr r2
    503c:	30254052 	eorcc	r4, r5, r2, asr r0
    5040:	00012829 	andeq	r2, r1, r9, lsr #16
    5044:	01f31316 	mvnseq	r1, r6, lsl r3
    5048:	30254052 	eorcc	r4, r5, r2, asr r0
    504c:	0001282e 	andeq	r2, r1, lr, lsr #16
    5050:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5060:	01000000 	mrseq	r0, (UNDEF: 0)
    5064:	00005100 	andeq	r5, r0, r0, lsl #2
    5068:	00000000 	andeq	r0, r0, r0
    506c:	002f0000 	eoreq	r0, pc, r0
    5070:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    5074:	01f32540 	mvnseq	r2, r0, asr #10
    5078:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    507c:	2e302540 	cfneg32cs	mvfx2, mvfx0
    5080:	16000128 	strne	r0, [r0], -r8, lsr #2
    5084:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    5088:	01f32540 	mvnseq	r2, r0, asr #10
    508c:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    5090:	13160001 	tstne	r6, #1
    5094:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    5098:	00012829 	andeq	r2, r1, r9, lsr #16
    509c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    50ac:	01000000 	mrseq	r0, (UNDEF: 0)
    50b0:	00005000 	andeq	r5, r0, r0
    50b4:	00000000 	andeq	r0, r0, r0
    50b8:	00040000 	andeq	r0, r4, r0
    50bc:	9f5001f3 	svcls	0x005001f3
	...
    50d0:	00510001 	subseq	r0, r1, r1
    50d4:	00000000 	andeq	r0, r0, r0
    50d8:	04000000 	streq	r0, [r0], #-0
    50dc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    50e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    50f0:	52000100 	andpl	r0, r0, #0, 2
	...
    50fc:	01f30004 	mvnseq	r0, r4
    5100:	00009f52 	andeq	r9, r0, r2, asr pc
    5104:	00000000 	andeq	r0, r0, r0
    5108:	00010000 	andeq	r0, r1, r0
    510c:	00000052 	andeq	r0, r0, r2, asr r0
    5110:	00000000 	andeq	r0, r0, r0
    5114:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    5118:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    511c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5120:	4b405301 	blmi	1019d2c <__ccfg+0xff9d84>
    5124:	0f0c2224 	svceq	0x000c2224
    5128:	2b800000 	blcs	fe005130 <_estack+0xde000130>
    512c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5130:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5140:	00010000 	andeq	r0, r1, r0
    5144:	00000053 	andeq	r0, r0, r3, asr r0
    5148:	00000000 	andeq	r0, r0, r0
    514c:	f3000400 	vshl.u8	d0, d0, d0
    5150:	009f5301 	addseq	r5, pc, r1, lsl #6
    5154:	00000000 	andeq	r0, r0, r0
    5158:	01000000 	mrseq	r0, (UNDEF: 0)
    515c:	00005300 	andeq	r5, r0, r0, lsl #6
    5160:	00000000 	andeq	r0, r0, r0
    5164:	001b0000 	andseq	r0, fp, r0
    5168:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    516c:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    5170:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5174:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5178:	8000000f 	andhi	r0, r0, pc
    517c:	0001282b 	andeq	r2, r1, fp, lsr #16
    5180:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5190:	02000000 	andeq	r0, r0, #0
    5194:	00009100 	andeq	r9, r0, r0, lsl #2
    5198:	00000000 	andeq	r0, r0, r0
    519c:	02000000 	andeq	r0, r0, #0
    51a0:	00007d00 	andeq	r7, r0, r0, lsl #26
	...
    51b0:	04000000 	streq	r0, [r0], #-0
    51b4:	04807000 	streq	r7, [r0], #0
    51b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51bc:	00000000 	andeq	r0, r0, r0
    51c0:	f3000d00 	vpadd.f32	d0, d0, d0
    51c4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    51c8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    51cc:	9f048023 	svcls	0x00048023
	...
    51d8:	00500001 	subseq	r0, r0, r1
    51dc:	00000000 	andeq	r0, r0, r0
    51e0:	64000000 	strvs	r0, [r0], #-0
    51e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    51e8:	01f32431 	mvnseq	r2, r1, lsr r4
    51ec:	80232250 	eorhi	r2, r3, r0, asr r2
    51f0:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    51f4:	01f32431 	mvnseq	r2, r1, lsr r4
    51f8:	01f32250 	mvnseq	r2, r0, asr r2
    51fc:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5200:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5204:	282c8000 	stmdacs	ip!, {pc}
    5208:	13160001 	tstne	r6, #1
    520c:	f3048423 	vshl.u8	d8, d19, d4
    5210:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    5214:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    5218:	f3048023 	vhadd.u8	d8, d4, d19
    521c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    5220:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    5224:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5228:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    522c:	8000000f 	andhi	r0, r0, pc
    5230:	0001282c 	andeq	r2, r1, ip, lsr #16
    5234:	01f31316 	mvnseq	r1, r6, lsl r3
    5238:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    523c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5240:	282b8000 	stmdacs	fp!, {pc}
    5244:	13160001 	tstne	r6, #1
    5248:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5258:	74000a00 	strvc	r0, [r0], #-2560	; 0xfffff600
    525c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5260:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    5264:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5268:	00000000 	andeq	r0, r0, r0
    526c:	7d000c00 	stcvc	12, cr0, [r0, #-0]
    5270:	0a029400 	beq	aa278 <__ccfg+0x8a2d0>
    5274:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    5278:	009f2400 	addseq	r2, pc, r0, lsl #8
    527c:	00000000 	andeq	r0, r0, r0
    5280:	24000000 	strcs	r0, [r0], #-0
    5284:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    5288:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    528c:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    5290:	01f31c40 	mvnseq	r1, r0, asr #24
    5294:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    5298:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    529c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    52a0:	01282b80 	smlawbeq	r8, r0, fp, r2
    52a4:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    52a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    52b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    52c4:	01f30004 	mvnseq	r0, r4
    52c8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    52d8:	00010000 	andeq	r0, r1, r0
    52dc:	00000051 	andeq	r0, r0, r1, asr r0
    52e0:	00000000 	andeq	r0, r0, r0
    52e4:	f3000400 	vshl.u8	d0, d0, d0
    52e8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    52f8:	01000000 	mrseq	r0, (UNDEF: 0)
    52fc:	00005200 	andeq	r5, r0, r0, lsl #4
    5300:	00000000 	andeq	r0, r0, r0
    5304:	00010000 	andeq	r0, r1, r0
    5308:	00000054 	andeq	r0, r0, r4, asr r0
    530c:	00000000 	andeq	r0, r0, r0
    5310:	f3001500 	vrshl.u8	d1, d0, d0
    5314:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5318:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    531c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5320:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5324:	9f131600 	svcls	0x00131600
	...
    5338:	00550001 	subseq	r0, r5, r1
    533c:	00000000 	andeq	r0, r0, r0
    5340:	1d000000 	stcne	0, cr0, [r0, #-0]
    5344:	5001f300 	andpl	pc, r1, r0, lsl #6
    5348:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    534c:	01f30223 	mvnseq	r0, r3, lsr #4
    5350:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5354:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5358:	2e302540 	cfneg32cs	mvfx2, mvfx0
    535c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5360:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5370:	00060000 	andeq	r0, r6, r0
    5374:	00740075 	rsbseq	r0, r4, r5, ror r0
    5378:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5388:	00010000 	andeq	r0, r1, r0
    538c:	00000055 	andeq	r0, r0, r5, asr r0
    5390:	00000000 	andeq	r0, r0, r0
    5394:	f3001d00 	vpadd.f32	d1, d0, d0
    5398:	01f35001 	mvnseq	r5, r1
    539c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    53a0:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    53a4:	f3225101 	vrhadd.u32	d5, d2, d1
    53a8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    53ac:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    53b0:	9f131600 	svcls	0x00131600
	...
    53c4:	00750007 	rsbseq	r0, r5, r7
    53c8:	1affff0a 	bne	4ff8 <patchGenfskRfe+0x64>
    53cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    53dc:	70000500 	andvc	r0, r0, r0, lsl #10
    53e0:	9f293000 	svcls	0x00293000
	...
    53f4:	00500001 	subseq	r0, r0, r1
    53f8:	00000000 	andeq	r0, r0, r0
    53fc:	04000000 	streq	r0, [r0], #-0
    5400:	5001f300 	andpl	pc, r1, r0, lsl #6
    5404:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5414:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5420:	01f30004 	mvnseq	r0, r4
    5424:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5434:	00010000 	andeq	r0, r1, r0
    5438:	00000052 	andeq	r0, r0, r2, asr r0
    543c:	00000000 	andeq	r0, r0, r0
    5440:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    544c:	01f3001b 	mvnseq	r0, fp, lsl r0
    5450:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    5454:	01f35201 	mvnseq	r5, r1, lsl #4
    5458:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    545c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5460:	282b8000 	stmdacs	fp!, {pc}
    5464:	13160001 	tstne	r6, #1
    5468:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5478:	53000100 	movwpl	r0, #256	; 0x100
	...
    5484:	00550001 	subseq	r0, r5, r1
    5488:	00000000 	andeq	r0, r0, r0
    548c:	1b000000 	blne	5494 <patchGenfskRfe+0x500>
    5490:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    5494:	01f31c40 	mvnseq	r1, r0, asr #24
    5498:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    549c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    54a0:	00000f0c 	andeq	r0, r0, ip, lsl #30
    54a4:	01282b80 	smlawbeq	r8, r0, fp, r2
    54a8:	9f131600 	svcls	0x00131600
	...
    54bc:	00560001 	subseq	r0, r6, r1
    54c0:	00000000 	andeq	r0, r0, r0
    54c4:	06000000 	streq	r0, [r0], -r0
    54c8:	71007000 	mrsvc	r7, (UNDEF: 0)
    54cc:	009f2200 	addseq	r2, pc, r0, lsl #4
    54d0:	00000000 	andeq	r0, r0, r0
    54d4:	01000000 	mrseq	r0, (UNDEF: 0)
    54d8:	00005600 	andeq	r5, r0, r0, lsl #12
    54dc:	00000000 	andeq	r0, r0, r0
    54e0:	00230000 	eoreq	r0, r3, r0
    54e4:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    54e8:	23225101 			; <UNDEFINED> instruction: 0x23225101
    54ec:	5001f302 	andpl	pc, r1, r2, lsl #6
    54f0:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    54f4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    54f8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    54fc:	8000000f 	andhi	r0, r0, pc
    5500:	0001282b 	andeq	r2, r1, fp, lsr #16
    5504:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5514:	06000000 	streq	r0, [r0], -r0
    5518:	74007600 	strvc	r7, [r0], #-1536	; 0xfffffa00
    551c:	009f1a00 	addseq	r1, pc, r0, lsl #20
    5520:	00000000 	andeq	r0, r0, r0
    5524:	01000000 	mrseq	r0, (UNDEF: 0)
    5528:	00005000 	andeq	r5, r0, r0
	...
    5538:	00010000 	andeq	r0, r1, r0
    553c:	00000056 	andeq	r0, r0, r6, asr r0
    5540:	00000000 	andeq	r0, r0, r0
    5544:	f3002300 	vcgt.u8	d2, d0, d0
    5548:	01f35001 	mvnseq	r5, r1
    554c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    5550:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5554:	f3225101 	vrhadd.u32	d5, d2, d1
    5558:	4b405301 	blmi	101a164 <__ccfg+0xffa1bc>
    555c:	0f0c2224 	svceq	0x000c2224
    5560:	2b800000 	blcs	fe005568 <_estack+0xde000568>
    5564:	16000128 	strne	r0, [r0], -r8, lsr #2
    5568:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5578:	00070000 	andeq	r0, r7, r0
    557c:	ff0a0076 			; <UNDEFINED> instruction: 0xff0a0076
    5580:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5590:	05000000 	streq	r0, [r0, #-0]
    5594:	30007000 	andcc	r7, r0, r0
    5598:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    55b0:	00520000 	subseq	r0, r2, r0
    55b4:	00010000 	andeq	r0, r1, r0
    55b8:	00005251 	andeq	r5, r0, r1, asr r2
    55bc:	00009600 	andeq	r9, r0, r0, lsl #12
    55c0:	f3000400 	vshl.u8	d0, d0, d0
    55c4:	969f5101 	ldrls	r5, [pc], r1, lsl #2
    55c8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    55cc:	01000000 	mrseq	r0, (UNDEF: 0)
    55d0:	00985100 	addseq	r5, r8, r0, lsl #2
    55d4:	00a00000 	adceq	r0, r0, r0
    55d8:	00040000 	andeq	r0, r4, r0
    55dc:	9f5101f3 	svcls	0x005101f3
    55e0:	000000a0 	andeq	r0, r0, r0, lsr #1
    55e4:	000000a6 	andeq	r0, r0, r6, lsr #1
    55e8:	a6510001 	ldrbge	r0, [r1], -r1
    55ec:	aa000000 	bge	55f4 <patchGenfskRfe+0x660>
    55f0:	04000000 	streq	r0, [r0], #-0
    55f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    55f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5604:	00000202 	andeq	r0, r0, r2, lsl #4
    5608:	00000000 	andeq	r0, r0, r0
    560c:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    562c:	00002a00 	andeq	r2, r0, r0, lsl #20
    5630:	52000100 	andpl	r0, r0, #0, 2
    5634:	0000002a 	andeq	r0, r0, sl, lsr #32
    5638:	00000040 	andeq	r0, r0, r0, asr #32
    563c:	00710009 	rsbseq	r0, r1, r9
    5640:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    5644:	409f1c00 	addsmi	r1, pc, r0, lsl #24
    5648:	42000000 	andmi	r0, r0, #0
    564c:	0b000000 	bleq	5654 <patchImageGenfsk+0xc>
    5650:	72007100 	andvc	r7, r0, #0, 2
    5654:	00742200 	rsbseq	r2, r4, r0, lsl #4
    5658:	9f1c401c 	svcls	0x001c401c
    565c:	00000042 	andeq	r0, r0, r2, asr #32
    5660:	0000004c 	andeq	r0, r0, ip, asr #32
    5664:	00710009 	rsbseq	r0, r1, r9
    5668:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    566c:	569f1c00 	ldrpl	r1, [pc], r0, lsl #24
    5670:	5a000000 	bpl	5678 <patchImageGenfsk+0x30>
    5674:	01000000 	mrseq	r0, (UNDEF: 0)
    5678:	005a5300 	subseq	r5, sl, r0, lsl #6
    567c:	005e0000 	subseq	r0, lr, r0
    5680:	00060000 	andeq	r0, r6, r0
    5684:	00760073 	rsbseq	r0, r6, r3, ror r0
    5688:	005e9f1c 	subseq	r9, lr, ip, lsl pc
    568c:	00600000 	rsbeq	r0, r0, r0
    5690:	00080000 	andeq	r0, r8, r0
    5694:	00760073 	rsbseq	r0, r6, r3, ror r0
    5698:	9f1c341c 	svcls	0x001c341c
    569c:	00000060 	andeq	r0, r0, r0, rrx
    56a0:	0000006a 	andeq	r0, r0, sl, rrx
    56a4:	00730006 	rsbseq	r0, r3, r6
    56a8:	9f1c0076 	svcls	0x001c0076
    56ac:	0000006a 	andeq	r0, r0, sl, rrx
    56b0:	00000072 	andeq	r0, r0, r2, ror r0
    56b4:	00720008 	rsbseq	r0, r2, r8
    56b8:	00761a3f 	rsbseq	r1, r6, pc, lsr sl
    56bc:	00729f1c 	rsbseq	r9, r2, ip, lsl pc
    56c0:	00760000 	rsbseq	r0, r6, r0
    56c4:	00090000 	andeq	r0, r9, r0
    56c8:	3f5201f3 	svccc	0x005201f3
    56cc:	1c00761a 	stcne	6, cr7, [r0], {26}
    56d0:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    56d4:	00007800 	andeq	r7, r0, r0, lsl #16
    56d8:	52000100 	andpl	r0, r0, #0, 2
    56dc:	00000078 	andeq	r0, r0, r8, ror r0
    56e0:	00000080 	andeq	r0, r0, r0, lsl #1
    56e4:	80560001 	subshi	r0, r6, r1
    56e8:	82000000 	andhi	r0, r0, #0
    56ec:	07000000 	streq	r0, [r0, -r0]
    56f0:	20007300 	andcs	r7, r0, r0, lsl #6
    56f4:	9f220076 	svcls	0x00220076
    56f8:	00000082 	andeq	r0, r0, r2, lsl #1
    56fc:	00000088 	andeq	r0, r0, r8, lsl #1
    5700:	00760006 	rsbseq	r0, r6, r6
    5704:	9f1c0073 	svcls	0x001c0073
    5708:	00000088 	andeq	r0, r0, r8, lsl #1
    570c:	0000008c 	andeq	r0, r0, ip, lsl #1
    5710:	00730007 	rsbseq	r0, r3, r7
    5714:	22007620 	andcs	r7, r0, #32, 12	; 0x2000000
    5718:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    571c:	00009a00 	andeq	r9, r0, r0, lsl #20
    5720:	52000100 	andpl	r0, r0, #0, 2
    5724:	0000009a 	muleq	r0, sl, r0
    5728:	000000a0 	andeq	r0, r0, r0, lsr #1
    572c:	a0560001 	subsge	r0, r6, r1
    5730:	a2000000 	andge	r0, r0, #0
    5734:	01000000 	mrseq	r0, (UNDEF: 0)
    5738:	00a25200 	adceq	r5, r2, r0, lsl #4
    573c:	00a60000 	adceq	r0, r6, r0
    5740:	00010000 	andeq	r0, r1, r0
    5744:	0000a656 	andeq	sl, r0, r6, asr r6
    5748:	0000aa00 	andeq	sl, r0, r0, lsl #20
    574c:	53000100 	movwpl	r0, #256	; 0x100
	...
    5758:	00000002 	andeq	r0, r0, r2
    575c:	01000000 	mrseq	r0, (UNDEF: 0)
    5760:	00000001 	andeq	r0, r0, r1
	...
    576c:	00000076 	andeq	r0, r0, r6, ror r0
    5770:	76500001 	ldrbvc	r0, [r0], -r1
    5774:	80000000 	andhi	r0, r0, r0
    5778:	01000000 	mrseq	r0, (UNDEF: 0)
    577c:	00805500 	addeq	r5, r0, r0, lsl #10
    5780:	00820000 	addeq	r0, r2, r0
    5784:	00080000 	andeq	r0, r8, r0
    5788:	00730075 	rsbseq	r0, r3, r5, ror r0
    578c:	9f012322 	svcls	0x00012322
    5790:	00000082 	andeq	r0, r0, r2, lsl #1
    5794:	00000082 	andeq	r0, r0, r2, lsl #1
    5798:	00750006 	rsbseq	r0, r5, r6
    579c:	9f220073 	svcls	0x00220073
    57a0:	00000082 	andeq	r0, r0, r2, lsl #1
    57a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    57a8:	00750008 	rsbseq	r0, r5, r8
    57ac:	23220073 			; <UNDEFINED> instruction: 0x23220073
    57b0:	00969f01 	addseq	r9, r6, r1, lsl #30
    57b4:	00980000 	addseq	r0, r8, r0
    57b8:	00010000 	andeq	r0, r1, r0
    57bc:	00009850 	andeq	r9, r0, r0, asr r8
    57c0:	0000a000 	andeq	sl, r0, r0
    57c4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    57c8:	000000a0 	andeq	r0, r0, r0, lsr #1
    57cc:	000000aa 	andeq	r0, r0, sl, lsr #1
    57d0:	00500001 	subseq	r0, r0, r1
    57d4:	00000000 	andeq	r0, r0, r0
    57d8:	03000000 	movweq	r0, #0
	...
    57e4:	00000101 	andeq	r0, r0, r1, lsl #2
    57e8:	00000000 	andeq	r0, r0, r0
    57ec:	52000000 	andpl	r0, r0, #0
    57f0:	01000000 	mrseq	r0, (UNDEF: 0)
    57f4:	00525100 	subseq	r5, r2, r0, lsl #2
    57f8:	00760000 	rsbseq	r0, r6, r0
    57fc:	00040000 	andeq	r0, r4, r0
    5800:	9f5101f3 	svcls	0x005101f3
    5804:	00000076 	andeq	r0, r0, r6, ror r0
    5808:	00000080 	andeq	r0, r0, r0, lsl #1
    580c:	80510001 	subshi	r0, r1, r1
    5810:	82000000 	andhi	r0, r0, #0
    5814:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5818:	73007100 	movwvc	r7, #256	; 0x100
    581c:	01232200 			; <UNDEFINED> instruction: 0x01232200
    5820:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5824:	00008200 	andeq	r8, r0, r0, lsl #4
    5828:	71000600 	tstvc	r0, r0, lsl #12
    582c:	22007300 	andcs	r7, r0, #0, 6
    5830:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5834:	00008c00 	andeq	r8, r0, r0, lsl #24
    5838:	71000800 	tstvc	r0, r0, lsl #16
    583c:	22007300 	andcs	r7, r0, #0, 6
    5840:	969f0123 	ldrls	r0, [pc], r3, lsr #2
    5844:	a6000000 	strge	r0, [r0], -r0
    5848:	01000000 	mrseq	r0, (UNDEF: 0)
    584c:	00a65100 	adceq	r5, r6, r0, lsl #2
    5850:	00aa0000 	adceq	r0, sl, r0
    5854:	00040000 	andeq	r0, r4, r0
    5858:	9f5101f3 	svcls	0x005101f3
	...
    5864:	01010100 	mrseq	r0, (UNDEF: 17)
    5868:	01020201 	tsteq	r2, r1, lsl #4
    586c:	00000001 	andeq	r0, r0, r1
    5870:	01000000 	mrseq	r0, (UNDEF: 0)
    5874:	00000001 	andeq	r0, r0, r1
    5878:	00000000 	andeq	r0, r0, r0
    587c:	0000002a 	andeq	r0, r0, sl, lsr #32
    5880:	0000002c 	andeq	r0, r0, ip, lsr #32
    5884:	00700009 	rsbseq	r0, r0, r9
    5888:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    588c:	2c9f2200 	lfmcs	f2, 4, [pc], {0}
    5890:	3a000000 	bcc	5898 <patchImageGenfsk+0x250>
    5894:	0b000000 	bleq	589c <patchImageGenfsk+0x254>
    5898:	71007000 	mrsvc	r7, (UNDEF: 0)
    589c:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    58a0:	9f042322 	svcls	0x00042322
    58a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    58a8:	0000003a 	andeq	r0, r0, sl, lsr r0
    58ac:	0070000b 	rsbseq	r0, r0, fp
    58b0:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    58b4:	08232200 	stmdaeq	r3!, {r9, sp}
    58b8:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    58bc:	00004000 	andeq	r4, r0, r0
    58c0:	70000b00 	andvc	r0, r0, r0, lsl #22
    58c4:	1c007100 	stfnes	f7, [r0], {-0}
    58c8:	23220074 			; <UNDEFINED> instruction: 0x23220074
    58cc:	00409f0c 	subeq	r9, r0, ip, lsl #30
    58d0:	00420000 	subeq	r0, r2, r0
    58d4:	000b0000 	andeq	r0, fp, r0
    58d8:	00710070 	rsbseq	r0, r1, r0, ror r0
    58dc:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    58e0:	429f1023 	addsmi	r1, pc, #35	; 0x23
    58e4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    58e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    58ec:	71007000 	mrsvc	r7, (UNDEF: 0)
    58f0:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    58f4:	00569f22 	subseq	r9, r6, r2, lsr #30
    58f8:	005a0000 	subseq	r0, sl, r0
    58fc:	00010000 	andeq	r0, r1, r0
    5900:	00005a55 	andeq	r5, r0, r5, asr sl
    5904:	00005a00 	andeq	r5, r0, r0, lsl #20
    5908:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    590c:	22007600 	andcs	r7, r0, #0, 12
    5910:	00005a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5914:	00006000 	andeq	r6, r0, r0
    5918:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    591c:	22007600 	andcs	r7, r0, #0, 12
    5920:	609f0423 	addsvs	r0, pc, r3, lsr #8
    5924:	74000000 	strvc	r0, [r0], #-0
    5928:	06000000 	streq	r0, [r0], -r0
    592c:	76007500 	strvc	r7, [r0], -r0, lsl #10
    5930:	749f2200 	ldrvc	r2, [pc], #512	; 5938 <__exidx_end+0x20>
    5934:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5938:	0b000000 	bleq	5940 <__exidx_end+0x28>
    593c:	34017c00 	strcc	r7, [r1], #-3072	; 0xfffff400
    5940:	22007024 	andcs	r7, r0, #36	; 0x24
    5944:	9f220076 	svcls	0x00220076
    5948:	000000a6 	andeq	r0, r0, r6, lsr #1
    594c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5950:	00550001 	subseq	r0, r5, r1
	...
    595c:	01010101 	tsteq	r1, r1, lsl #2
    5960:	01010202 	tsteq	r1, r2, lsl #4
    5964:	00000000 	andeq	r0, r0, r0
    5968:	01010000 	mrseq	r0, (UNDEF: 1)
    596c:	00000000 	andeq	r0, r0, r0
    5970:	2a000000 	bcs	5978 <__exidx_end+0x60>
    5974:	2c000000 	stccs	0, cr0, [r0], {-0}
    5978:	01000000 	mrseq	r0, (UNDEF: 0)
    597c:	002c5400 	eoreq	r5, ip, r0, lsl #8
    5980:	003a0000 	eorseq	r0, sl, r0
    5984:	00030000 	andeq	r0, r3, r0
    5988:	3a9f0474 	bcc	fe7c6b60 <_estack+0xde7c1b60>
    598c:	3a000000 	bcc	5994 <__exidx_end+0x7c>
    5990:	03000000 	movweq	r0, #0
    5994:	9f087400 	svcls	0x00087400
    5998:	0000003a 	andeq	r0, r0, sl, lsr r0
    599c:	00000040 	andeq	r0, r0, r0, asr #32
    59a0:	0c740003 	ldcleq	0, cr0, [r4], #-12
    59a4:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    59a8:	00004200 	andeq	r4, r0, r0, lsl #4
    59ac:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    59b0:	00429f10 	subeq	r9, r2, r0, lsl pc
    59b4:	004c0000 	subeq	r0, ip, r0
    59b8:	00010000 	andeq	r0, r1, r0
    59bc:	00005454 	andeq	r5, r0, r4, asr r4
    59c0:	00005a00 	andeq	r5, r0, r0, lsl #20
    59c4:	51000100 	mrspl	r0, (UNDEF: 16)
    59c8:	0000005a 	andeq	r0, r0, sl, asr r0
    59cc:	0000005a 	andeq	r0, r0, sl, asr r0
    59d0:	00710006 	rsbseq	r0, r1, r6
    59d4:	9f220076 	svcls	0x00220076
    59d8:	0000005a 	andeq	r0, r0, sl, asr r0
    59dc:	00000060 	andeq	r0, r0, r0, rrx
    59e0:	00710008 	rsbseq	r0, r1, r8
    59e4:	23220076 			; <UNDEFINED> instruction: 0x23220076
    59e8:	00609f04 	rsbeq	r9, r0, r4, lsl #30
    59ec:	00760000 	rsbseq	r0, r6, r0
    59f0:	00060000 	andeq	r0, r6, r0
    59f4:	00760071 	rsbseq	r0, r6, r1, ror r0
    59f8:	00769f22 	rsbseq	r9, r6, r2, lsr #30
    59fc:	00780000 	rsbseq	r0, r8, r0
    5a00:	000c0000 	andeq	r0, ip, r0
    5a04:	2434017c 	ldrtcs	r0, [r4], #-380	; 0xfffffe84
    5a08:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5a0c:	9f220076 	svcls	0x00220076
    5a10:	000000a6 	andeq	r0, r0, r6, lsr #1
    5a14:	000000aa 	andeq	r0, r0, sl, lsr #1
    5a18:	00510001 	subseq	r0, r1, r1
	...
    5a28:	00001a01 	andeq	r1, r0, r1, lsl #20
    5a2c:	00001c00 	andeq	r1, r0, r0, lsl #24
    5a30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5a34:	0000001c 	andeq	r0, r0, ip, lsl r0
    5a38:	00000024 	andeq	r0, r0, r4, lsr #32
    5a3c:	00730002 	rsbseq	r0, r3, r2
    5a40:	00000027 	andeq	r0, r0, r7, lsr #32
    5a44:	00000038 	andeq	r0, r0, r8, lsr r0
    5a48:	d8740004 	ldmdale	r4!, {r2}^
    5a4c:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
    5a58:	00040000 	andeq	r0, r4, r0
    5a5c:	00060000 	andeq	r0, r6, r0
    5a60:	00020000 	andeq	r0, r2, r0
    5a64:	00060073 	andeq	r0, r6, r3, ror r0
    5a68:	00080000 	andeq	r0, r8, r0
    5a6c:	00010000 	andeq	r0, r1, r0
    5a70:	00000053 	andeq	r0, r0, r3, asr r0
	...
    5a80:	00000e00 	andeq	r0, r0, r0, lsl #28
    5a84:	50000600 	andpl	r0, r0, r0, lsl #12
    5a88:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    5a8c:	00000e04 	andeq	r0, r0, r4, lsl #28
    5a90:	00005400 	andeq	r5, r0, r0, lsl #8
    5a94:	f3000600 	vmax.u8	d0, d0, d0
    5a98:	2500f503 	strcs	pc, [r0, #-1283]	; 0xfffffafd
    5a9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5aac:	00003e00 	andeq	r3, r0, r0, lsl #28
    5ab0:	52000600 	andpl	r0, r0, #0, 12
    5ab4:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    5ab8:	00003e04 	andeq	r3, r0, r4, lsl #28
    5abc:	00005400 	andeq	r5, r0, r0, lsl #8
    5ac0:	f3000600 	vmax.u8	d0, d0, d0
    5ac4:	2502f503 	strcs	pc, [r2, #-1283]	; 0xfffffafd
    5ac8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5acc:	00000000 	andeq	r0, r0, r0
    5ad0:	1a020000 	bne	85ad8 <__ccfg+0x65b30>
    5ad4:	4a000000 	bmi	5adc <__exidx_end+0x1c4>
    5ad8:	01000000 	mrseq	r0, (UNDEF: 0)
    5adc:	00005600 	andeq	r5, r0, r0, lsl #12
    5ae0:	00000000 	andeq	r0, r0, r0
    5ae4:	00010000 	andeq	r0, r1, r0
    5ae8:	00000000 	andeq	r0, r0, r0
    5aec:	0000001a 	andeq	r0, r0, sl, lsl r0
    5af0:	0000001e 	andeq	r0, r0, lr, lsl r0
    5af4:	00700006 	rsbseq	r0, r0, r6
    5af8:	9f1e0074 	svcls	0x001e0074
    5afc:	0000001e 	andeq	r0, r0, lr, lsl r0
    5b00:	00000022 	andeq	r0, r0, r2, lsr #32
    5b04:	26500001 	ldrbcs	r0, [r0], -r1
    5b08:	44000000 	strmi	r0, [r0], #-0
    5b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    5b10:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    5b1c:	001c0000 	andseq	r0, ip, r0
    5b20:	00360000 	eorseq	r0, r6, r0
    5b24:	00010000 	andeq	r0, r1, r0
    5b28:	00003655 	andeq	r3, r0, r5, asr r6
    5b2c:	00003e00 	andeq	r3, r0, r0, lsl #28
    5b30:	72000c00 	andvc	r0, r0, #0, 24
    5b34:	40244000 	eormi	r4, r4, r0
    5b38:	40007c25 	andmi	r7, r0, r5, lsr #24
    5b3c:	009f1e25 	addseq	r1, pc, r5, lsr #28
	...
    5b48:	00002000 	andeq	r2, r0, r0
    5b4c:	00003c00 	andeq	r3, r0, r0, lsl #24
    5b50:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5b60:	00000012 	andeq	r0, r0, r2, lsl r0
    5b64:	0000001e 	andeq	r0, r0, lr, lsl r0
    5b68:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
    5b6c:	54000000 	strpl	r0, [r0], #-0
    5b70:	07000000 	streq	r0, [r0, -r0]
    5b74:	40007c00 	andmi	r7, r0, r0, lsl #24
    5b78:	9f254024 	svcls	0x00254024
	...
    5b88:	00000016 	andeq	r0, r0, r6, lsl r0
    5b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
    5b90:	1c550001 	mrrcne	0, 0, r0, r5, cr1
    5b94:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5b98:	07000000 	streq	r0, [r0, -r0]
    5b9c:	40007200 	andmi	r7, r0, r0, lsl #4
    5ba0:	9f254024 	svcls	0x00254024
	...
    5bb0:	00000014 	andeq	r0, r0, r4, lsl r0
    5bb4:	00000020 	andeq	r0, r0, r0, lsr #32
    5bb8:	20510001 	subscs	r0, r1, r1
    5bbc:	54000000 	strpl	r0, [r0], #-0
    5bc0:	05000000 	streq	r0, [r0, #-0]
    5bc4:	40007c00 	andmi	r7, r0, r0, lsl #24
    5bc8:	00009f25 	andeq	r9, r0, r5, lsr #30
    5bcc:	00000000 	andeq	r0, r0, r0
    5bd0:	00010000 	andeq	r0, r1, r0
    5bd4:	00160000 	andseq	r0, r6, r0
    5bd8:	00240000 	eoreq	r0, r4, r0
    5bdc:	00010000 	andeq	r0, r1, r0
    5be0:	00002454 	andeq	r2, r0, r4, asr r4
    5be4:	00003e00 	andeq	r3, r0, r0, lsl #28
    5be8:	72000500 	andvc	r0, r0, #0, 10
    5bec:	9f254000 	svcls	0x00254000
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000094 	muleq	r0, r4, r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000a4 	andeq	r0, r0, r4, lsr #1
  18:	0000016c 	andeq	r0, r0, ip, ror #2
};
  1c:	00000020 	andeq	r0, r0, r0, lsr #32
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000006 	andeq	r0, r0, r6
  30:	00000000 	andeq	r0, r0, r0
  34:	00000008 	andeq	r0, r0, r8
  38:	00000000 	andeq	r0, r0, r0
  3c:	00000014 	andeq	r0, r0, r4, lsl r0
			i = k;
  40:	0000018c 	andeq	r0, r0, ip, lsl #3
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	00000000 	andeq	r0, r0, r0
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	0000019e 	muleq	r0, lr, r1
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
			nq++;
  60:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	0000032c 	andeq	r0, r0, ip, lsr #6
  68:	00000000 	andeq	r0, r0, r0
  6c:	0000001e 	andeq	r0, r0, lr, lsl r0
  70:	000004fc 	strdeq	r0, [r0], -ip
  74:	00000026 	andeq	r0, r0, r6, lsr #32
  78:	00000000 	andeq	r0, r0, r0
  7c:	00000012 	andeq	r0, r0, r2, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	00000014 	andeq	r0, r0, r4, lsl r0
  88:	00000524 	andeq	r0, r0, r4, lsr #10
  8c:	0000050c 	andeq	r0, r0, ip, lsl #10
	...
	if (!button_still_pressed (__button_list [pbutton]))
  98:	000000e4 	andeq	r0, r0, r4, ror #1
	if (baction == NULL)
  9c:	1cde0002 	ldclne	0, cr0, [lr], {2}
  a0:	00040000 	andeq	r0, r4, r0
	(*baction) (pbutton);
  a4:	00000000 	andeq	r0, r0, r0
endthread
  a8:	00000a30 	andeq	r0, r0, r0, lsr sl
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	00000a3c 	andeq	r0, r0, ip, lsr sl
endthread
  b4:	0000002c 	andeq	r0, r0, ip, lsr #32
  b8:	00000a68 	andeq	r0, r0, r8, ror #20
  bc:	0000002a 	andeq	r0, r0, sl, lsr #32
  c0:	00000a94 	muleq	r0, r4, sl
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
fsm sender(struct ResponseMessage *message) {
  c8:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  cc:	00000040 	andeq	r0, r0, r0, asr #32
  d0:	00000000 	andeq	r0, r0, r0
}
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000b10 	andeq	r0, r0, r0, lsl fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000054 	andeq	r0, r0, r4, asr r0
  e0:	00000b64 	andeq	r0, r0, r4, ror #22
  e4:	00000040 	andeq	r0, r0, r0, asr #32
  e8:	00000ba4 	andeq	r0, r0, r4, lsr #23
		packet[0] = NETWORK_ID;
  ec:	00000028 	andeq	r0, r0, r8, lsr #32
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  f0:	00000bcc 	andeq	r0, r0, ip, asr #23
		*p = message->tpe;p++;
  f4:	00000114 	andeq	r0, r0, r4, lsl r1
  f8:	00000ce0 	andeq	r0, r0, r0, ror #25
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  fc:	00000050 	andeq	r0, r0, r0, asr r0
		*p = message->sender_id;p++;
 100:	00000d30 	andeq	r0, r0, r0, lsr sp
		*p = message->receiver_id;p++;
 104:	00000054 	andeq	r0, r0, r4, asr r0
		switch(message->tpe) {
 108:	00000d84 	andeq	r0, r0, r4, lsl #27
 10c:	00000038 	andeq	r0, r0, r8, lsr r0
 110:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
		tcv_endp(packet);
 114:	00000110 	andeq	r0, r0, r0, lsl r1
 118:	00000000 	andeq	r0, r0, r0
		ser_out(CONFIRM_message, "Message sent\r\n");
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000ecc 	andeq	r0, r0, ip, asr #29
}
 124:	000000c0 	andeq	r0, r0, r0, asr #1
		finish;
 128:	00000f8c 	andeq	r0, r0, ip, lsl #31
 12c:	00000044 	andeq	r0, r0, r4, asr #32
				*p = message->status;p++;
 130:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
				strncpy(p, message->record, sizeof(message->record));
 138:	0000100c 	andeq	r1, r0, ip
				*p = message->padding;p++;
 13c:	000000a4 	andeq	r0, r0, r4, lsr #1
				strncpy(p, message->record, sizeof(message->record));
 140:	000010b0 	strheq	r1, [r0], -r0
				strncpy(p, message->record, sizeof(message->record));
 144:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 148:	00001268 	andeq	r1, r0, r8, ror #4
				strncpy(p, message->record, sizeof(message->record));
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
				*p = message->record_index;p++;
 150:	00000000 	andeq	r0, r0, r0
				*p = message->padding;
 154:	00000028 	andeq	r0, r0, r8, lsr #32
				break;
 158:	0000128c 	andeq	r1, r0, ip, lsl #5
 15c:	00000258 	andeq	r0, r0, r8, asr r2
 160:	000014e4 	andeq	r1, r0, r4, ror #9
 164:	00000030 	andeq	r0, r0, r0, lsr r0
 168:	00000000 	andeq	r0, r0, r0
bool init_node(struct Node* node){
 16c:	0000005c 	andeq	r0, r0, ip, asr r0
    node->id  = 0;                  // default id value 0
 170:	00001514 	andeq	r1, r0, r4, lsl r5
    node->index = 0;                // default entry count 0
 174:	00000060 	andeq	r0, r0, r0, rrx
	...
    DEBUG_PRINT("Error initializing node...\n");
 180:	00000154 	andeq	r0, r0, r4, asr r1
};
 184:	316e0002 	cmncc	lr, r2
 188:	00040000 	andeq	r0, r4, r0
uint8_t generate_request_num(void){
 18c:	00000000 	andeq	r0, r0, r0
    return (uint8_t) (rand() % 255);
 190:	00001574 	andeq	r1, r0, r4, ror r5
 194:	0000003c 	andeq	r0, r0, ip, lsr r0
 198:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
}
 19c:	00000080 	andeq	r0, r0, r0, lsl #1
            node->nnodes[i] = '\0'; // set to null byte
 1a0:	00001630 	andeq	r1, r0, r0, lsr r6
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	00000000 	andeq	r0, r0, r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 1ac:	00000024 	andeq	r0, r0, r4, lsr #32
};
 1b0:	00001648 	andeq	r1, r0, r8, asr #12
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
 1b4:	00000010 	andeq	r0, r0, r0, lsl r0
 1b8:	00001658 	andeq	r1, r0, r8, asr r6
        node->data_base.item_array[index].data_entry[0] = '\0';
 1bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	0000004c 	andeq	r0, r0, ip, asr #32
        node->data_base.item_count -= 1;
 1c8:	00001684 	andeq	r1, r0, r4, lsl #13
};
 1cc:	00000006 	andeq	r0, r0, r6
fsm receiver(struct Node* node_db) {
 1d0:	0000168c 	andeq	r1, r0, ip, lsl #13
 1d4:	000000cc 	andeq	r0, r0, ip, asr #1
 1d8:	00001758 	andeq	r1, r0, r8, asr r7
 1dc:	00000014 	andeq	r0, r0, r4, lsl r0
 1e0:	0000176c 	andeq	r1, r0, ip, ror #14
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
 1e8:	000017a0 	andeq	r1, r0, r0, lsr #15
 1ec:	00000034 	andeq	r0, r0, r4, lsr r0
		incoming_packet = tcv_rnp(receiving, sfd);
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f8:	000017d4 	ldrdeq	r1, [r0], -r4
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
 200:	000017f8 	strdeq	r1, [r0], -r8
 204:	00000038 	andeq	r0, r0, r8, lsr r0
 208:	00000000 	andeq	r0, r0, r0
		switch (tpe){
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	00000000 	andeq	r0, r0, r0
 214:	00000040 	andeq	r0, r0, r0, asr #32
 218:	00000000 	andeq	r0, r0, r0
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	00001830 	andeq	r1, r0, r0, lsr r8
 224:	00000024 	andeq	r0, r0, r4, lsr #32
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
 230:	00001854 	andeq	r1, r0, r4, asr r8
 234:	0000000e 	andeq	r0, r0, lr
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
 238:	00001862 	andeq	r1, r0, r2, ror #16
 23c:	00000010 	andeq	r0, r0, r0, lsl r0
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
 240:	00001872 	andeq	r1, r0, r2, ror r8
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000010 	andeq	r0, r0, r0, lsl r0
				if (discovery_request_message->gid == node_db->gid){
 250:	00000000 	andeq	r0, r0, r0
 254:	00000006 	andeq	r0, r0, r6
					response_message_0->gid = discovery_request_message->gid;
 258:	0000188e 	andeq	r1, r0, lr, lsl #17
					response_message_0->tpe = DISCOVERY_RESPONSE;
 25c:	00000014 	andeq	r0, r0, r4, lsl r0
					response_message_0->request_number = discovery_request_message->request_number;
 260:	000018a2 	andeq	r1, r0, r2, lsr #17
					response_message_0->sender_id = node_db->id;
 264:	0000000e 	andeq	r0, r0, lr
					response_message_0->receiver_id = discovery_request_message->sender_id;
 268:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
					call sender(response_message_0, done_case);
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
 270:	000018d4 	ldrdeq	r1, [r0], -r4
 274:	0000009c 	muleq	r0, ip, r0
 278:	00001970 	andeq	r1, r0, r0, ror r9
 27c:	00000050 	andeq	r0, r0, r0, asr r0
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
 280:	000019c0 	andeq	r1, r0, r0, asr #19
 284:	00000048 	andeq	r0, r0, r8, asr #32
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
 288:	00001a08 	andeq	r1, r0, r8, lsl #20
 28c:	00000050 	andeq	r0, r0, r0, asr r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
 290:	00000000 	andeq	r0, r0, r0
 294:	00000058 	andeq	r0, r0, r8, asr r0
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
 298:	00001a58 	andeq	r1, r0, r8, asr sl
 29c:	000000a8 	andeq	r0, r0, r8, lsr #1
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
 2a0:	00001b00 	andeq	r1, r0, r0, lsl #22
 2a4:	00000034 	andeq	r0, r0, r4, lsr r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 2a8:	00001b34 	andeq	r1, r0, r4, lsr fp
 2ac:	00000018 	andeq	r0, r0, r8, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000030 	andeq	r0, r0, r0, lsr r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	00000038 	andeq	r0, r0, r8, lsr r0
 2c0:	00001b4c 	andeq	r1, r0, ip, asr #22
 2c4:	0000013c 	andeq	r0, r0, ip, lsr r1
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 2c8:	00001c88 	andeq	r1, r0, r8, lsl #25
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
	...
		tcv_endp(incoming_packet);
 2d8:	00000104 	andeq	r0, r0, r4, lsl #2
		ser_out(response_1_create, "\r\n Data Saved");
 2dc:	43910002 	orrsmi	r0, r1, #2
 2e0:	00040000 	andeq	r0, r4, r0
		proceed receiving;
 2e4:	00000000 	andeq	r0, r0, r0
 2e8:	00001cac 	andeq	r1, r0, ip, lsr #25
		ser_out(response_1_delete, "\r\n Record Deleted");
 2ec:	00000016 	andeq	r0, r0, r6, lsl r0
 2f0:	00001cc2 	andeq	r1, r0, r2, asr #25
		proceed receiving;
 2f4:	0000001a 	andeq	r0, r0, sl, lsl r0
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 2f8:	00001cdc 	ldrdeq	r1, [r0], -ip
 2fc:	0000000e 	andeq	r0, r0, lr
 300:	00001cec 	andeq	r1, r0, ip, ror #25
 304:	0000004c 	andeq	r0, r0, ip, asr #32
 308:	00001d38 	andeq	r1, r0, r8, lsr sp
		proceed receiving;
 30c:	0000008c 	andeq	r0, r0, ip, lsl #1
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
 310:	00001dc4 	andeq	r1, r0, r4, asr #27
 314:	00000070 	andeq	r0, r0, r0, ror r0
 318:	00001e34 	andeq	r1, r0, r4, lsr lr
 31c:	000000c0 	andeq	r0, r0, r0, asr #1
		proceed receiving;
 320:	00000000 	andeq	r0, r0, r0
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
 324:	0000006c 	andeq	r0, r0, ip, rrx
 328:	00001ef4 	strdeq	r1, [r0], -r4
 32c:	00000024 	andeq	r0, r0, r4, lsr #32
 330:	00001f18 	andeq	r1, r0, r8, lsl pc
		proceed receiving;
 334:	00000080 	andeq	r0, r0, r0, lsl #1
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000070 	andeq	r0, r0, r0, ror r0
 340:	00000000 	andeq	r0, r0, r0
 344:	00000078 	andeq	r0, r0, r8, ror r0
		proceed receiving;
 348:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 34c:	000000bc 	strheq	r0, [r0], -ip
 350:	00002054 	andeq	r2, r0, r4, asr r0
		proceed receiving;
 354:	0000003a 	andeq	r0, r0, sl, lsr r0
}
 358:	00000000 	andeq	r0, r0, r0
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
 35c:	00000038 	andeq	r0, r0, r8, lsr r0
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
 360:	00000000 	andeq	r0, r0, r0
 364:	0000000a 	andeq	r0, r0, sl
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
 368:	00002090 	muleq	r0, r0, r0
 36c:	0000002c 	andeq	r0, r0, ip, lsr #32
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
 370:	000020bc 	strheq	r2, [r0], -ip
 374:	00000060 	andeq	r0, r0, r0, rrx
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
 378:	00000000 	andeq	r0, r0, r0
 37c:	00000040 	andeq	r0, r0, r0, asr #32
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
 380:	00000000 	andeq	r0, r0, r0
 384:	0000002c 	andeq	r0, r0, ip, lsr #32
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
 388:	00000000 	andeq	r0, r0, r0
 38c:	0000003c 	andeq	r0, r0, ip, lsr r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
 390:	00000000 	andeq	r0, r0, r0
 394:	00000006 	andeq	r0, r0, r6
 398:	0000211c 	andeq	r2, r0, ip, lsl r1
 39c:	00000068 	andeq	r0, r0, r8, rrx
		strncpy(response_message->record, rec, 20);
 3a0:	00002184 	andeq	r2, r0, r4, lsl #3
 3a4:	00000050 	andeq	r0, r0, r0, asr r0
					call sender(response_message_4, done_case);
 3a8:	000021d4 	ldrdeq	r2, [r0], -r4
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
 3ac:	0000009c 	muleq	r0, ip, r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 3b0:	00002270 	andeq	r2, r0, r0, ror r2
 3b4:	00000040 	andeq	r0, r0, r0, asr #32
 3b8:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
 3bc:	00000034 	andeq	r0, r0, r4, lsr r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 3c0:	000022e4 	andeq	r2, r0, r4, ror #5
					if (delete_record(node_db, delete_record_message->record_index)){
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c8:	00000000 	andeq	r0, r0, r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 3cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 3d0:	00002320 	andeq	r2, r0, r0, lsr #6
 3d4:	00000002 	andeq	r0, r0, r2
	...
 3e0:	00000034 	andeq	r0, r0, r4, lsr r0
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 3e4:	56c80002 	strbpl	r0, [r8], r2
 3e8:	00040000 	andeq	r0, r4, r0
 3ec:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
 3f0:	00002322 	andeq	r2, r0, r2, lsr #6
 3f4:	00000002 	andeq	r0, r0, r2
 3f8:	00002324 	andeq	r2, r0, r4, lsr #6
 3fc:	00000002 	andeq	r0, r0, r2
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 400:	00002326 	andeq	r2, r0, r6, lsr #6
    return node->data_base.item_array[index];
 404:	00000002 	andeq	r0, r0, r2
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 408:	00002328 	andeq	r2, r0, r8, lsr #6
 40c:	00000044 	andeq	r0, r0, r4, asr #32
	...
		strncpy(response_message->record, rec, 20);
 418:	00000014 	andeq	r0, r0, r4, lsl r0
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 41c:	58400002 	stmdapl	r0, {r1}^
 420:	00040000 	andeq	r0, r4, r0
	...
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 430:	00000024 	andeq	r0, r0, r4, lsr #32
 434:	5d7b0002 	ldclpl	0, cr0, [fp, #-8]!
				if(!response_flag){
 438:	00040000 	andeq	r0, r4, r0
	...
					trigger(&response_flag);
 444:	00000002 	andeq	r0, r0, r2
				switch(response_message_5->status){
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000058 	andeq	r0, r0, r8, asr r0
	...
 458:	00000024 	andeq	r0, r0, r4, lsr #32
 45c:	627f0002 	rsbsvs	r0, pc, #2
 460:	00040000 	andeq	r0, r4, r0
	...
 46c:	000000cc 	andeq	r0, r0, ip, asr #1
 470:	00000000 	andeq	r0, r0, r0
 474:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 480:	0000008c 	andeq	r0, r0, ip, lsl #1
 484:	67790002 	ldrbvs	r0, [r9, -r2]!
 488:	00040000 	andeq	r0, r4, r0
 48c:	00000000 	andeq	r0, r0, r0
 490:	00002374 	andeq	r2, r0, r4, ror r3
 494:	00000034 	andeq	r0, r0, r4, lsr r0
 498:	000023a8 	andeq	r2, r0, r8, lsr #7
 49c:	00000030 	andeq	r0, r0, r0, lsr r0
 4a0:	000023d8 	ldrdeq	r2, [r0], -r8
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	000023f0 	strdeq	r2, [r0], -r0
						if (response_checker[0] == response_message_5->request_number){
 4ac:	00000054 	andeq	r0, r0, r4, asr r0
 4b0:	00002444 	andeq	r2, r0, r4, asr #8
 4b4:	00000040 	andeq	r0, r0, r0, asr #32
							switch(response_checker[1]){
 4b8:	00002484 	andeq	r2, r0, r4, lsl #9
 4bc:	00000024 	andeq	r0, r0, r4, lsr #32
 4c0:	000024a8 	andeq	r2, r0, r8, lsr #9
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
									proceed response_1_create;
 4c8:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
						proceed response_2;
 4cc:	00000014 	andeq	r0, r0, r4, lsl r0
									proceed response_1_delete;
 4d0:	00000000 	andeq	r0, r0, r0
									proceed response_1_retrieve;
 4d4:	00000064 	andeq	r0, r0, r4, rrx
						proceed response_2;
 4d8:	00000000 	andeq	r0, r0, r0
						proceed response_3;
 4dc:	00000128 	andeq	r0, r0, r8, lsr #2
						proceed response_4;
 4e0:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
 4e4:	000000ec 	andeq	r0, r0, ip, ror #1
 4e8:	00000000 	andeq	r0, r0, r0
}
 4ec:	00000002 	andeq	r0, r0, r2
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000004 	andeq	r0, r0, r4
 4f8:	00000000 	andeq	r0, r0, r0
bool delete_all(struct Node *node){
 4fc:	00000014 	andeq	r0, r0, r4, lsl r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
 500:	00000000 	andeq	r0, r0, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 504:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
            node->data_base.item_array[i].timestamp = 0;
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 514:	72240002 	eorvc	r0, r4, #2
    node->data_base.item_count = 0;
 518:	00040000 	andeq	r0, r4, r0
}
 51c:	00000000 	andeq	r0, r0, r0
        return true;
 520:	000024d0 	ldrdeq	r2, [r0], -r0
fsm root {
 524:	0000006c 	andeq	r0, r0, ip, rrx
	...
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	76460002 	strbvc	r0, [r6], -r2
 538:	00040000 	andeq	r0, r4, r0
 53c:	00000000 	andeq	r0, r0, r0
 540:	0000253c 	andeq	r2, r0, ip, lsr r5
 544:	00000078 	andeq	r0, r0, r8, ror r0
	...
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	7a5c0002 	bvc	1700564 <__ccfg+0x16e05bc>
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
 560:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
 564:	00000054 	andeq	r0, r0, r4, asr r0
	...
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	7eac0002 	cdpvc	0, 10, cr0, cr12, cr2, {0}
		node_db = (struct Node *)umalloc(sizeof(struct Node));
 578:	00040000 	andeq	r0, r4, r0
 57c:	00000000 	andeq	r0, r0, r0
 580:	00002608 	andeq	r2, r0, r8, lsl #12
		init_node(node_db);
 584:	00000060 	andeq	r0, r0, r0, rrx
	...
		tcv_plug (0, &plug_null);
 590:	0000006c 	andeq	r0, r0, ip, rrx
 594:	82fc0002 	rscshi	r0, ip, #2
		sfd = tcv_open (WNONE, 0, 0);
 598:	00040000 	andeq	r0, r4, r0
 59c:	00000000 	andeq	r0, r0, r0
 5a0:	00002668 	andeq	r2, r0, r8, ror #12
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	00002688 	andeq	r2, r0, r8, lsl #13
			diag("Cannot open tcv interface");
 5ac:	00000190 	muleq	r0, r0, r1
 5b0:	00002818 	andeq	r2, r0, r8, lsl r8
			halt();
 5b4:	00000048 	andeq	r0, r0, r8, asr #32
		tcv_control(sfd, PHYSOPT_ON, NULL);
 5b8:	00002860 	andeq	r2, r0, r0, ror #16
 5bc:	00000024 	andeq	r0, r0, r4, lsr #32
		runfsm receiver(node_db);
 5c0:	00002884 	andeq	r2, r0, r4, lsl #17
 5c4:	0000005c 	andeq	r0, r0, ip, asr r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
 5c8:	000028e0 	andeq	r2, r0, r0, ror #17
 5cc:	00000038 	andeq	r0, r0, r8, lsr r0
 5d0:	00002918 	andeq	r2, r0, r8, lsl r9
 5d4:	00000180 	andeq	r0, r0, r0, lsl #3
 5d8:	00002a98 	muleq	r0, r8, sl
 5dc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		ser_inf(get_choice, "%c", &CHOICE);
 5e0:	00002b68 	andeq	r2, r0, r8, ror #22
 5e4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e8:	00002d58 	andeq	r2, r0, r8, asr sp
		switch(CHOICE) {
 5ec:	00000070 	andeq	r0, r0, r0, ror r0
 5f0:	00002dc8 	andeq	r2, r0, r8, asr #27
 5f4:	00000174 	andeq	r0, r0, r4, ror r1
	...
 600:	00000044 	andeq	r0, r0, r4, asr #32
 604:	a7740002 	ldrbge	r0, [r4, -r2]!
 608:	00040000 	andeq	r0, r4, r0
 60c:	00000000 	andeq	r0, r0, r0
 610:	00002f3c 	andeq	r2, r0, ip, lsr pc
 614:	00000024 	andeq	r0, r0, r4, lsr #32
 618:	00002f60 	andeq	r2, r0, r0, ror #30
				proceed menu;
 61c:	00000024 	andeq	r0, r0, r4, lsr #32
 620:	00002f84 	andeq	r2, r0, r4, lsl #31
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 624:	00000008 	andeq	r0, r0, r8
 628:	00002f8c 	andeq	r2, r0, ip, lsl #31
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
 62c:	00000004 	andeq	r0, r0, r4
 630:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
 634:	00000004 	andeq	r0, r0, r4
		DEBUG_PRINT("setting node group ID");
 638:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 63c:	00000048 	andeq	r0, r0, r8, asr #32
	...
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
 648:	0000001c 	andeq	r0, r0, ip, lsl r0
 64c:	aea90002 	cdpge	0, 10, cr0, cr9, cr2, {0}
		if(node_db->id < 1 || node_db->id > 25){
 650:	00040000 	andeq	r0, r4, r0
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
 654:	00000000 	andeq	r0, r0, r0
 658:	00002fdc 	ldrdeq	r2, [r0], -ip
		if(node_db->id < 1 || node_db->id > 25){
 65c:	00000070 	andeq	r0, r0, r0, ror r0
	...
			strncpy(reason, "Out of Range", 50);
 668:	0000001c 	andeq	r0, r0, ip, lsl r0
 66c:	b2da0002 	sbcslt	r0, sl, #2
			proceed invalid_node_id;
 670:	00040000 	andeq	r0, r4, r0
 674:	00000000 	andeq	r0, r0, r0
				strncpy(reason, "ID is already in use", 50);
 678:	0000304c 	andeq	r3, r0, ip, asr #32
 67c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
			if(node_db->id == node_db->nnodes[i]){
 688:	0000002c 	andeq	r0, r0, ip, lsr #32
				strncpy(reason, "ID is already in use", 50);
 68c:	b71e0002 	ldrlt	r0, [lr, -r2]
 690:	00040000 	andeq	r0, r4, r0
 694:	00000000 	andeq	r0, r0, r0
				proceed invalid_node_id;
 698:	00003168 	andeq	r3, r0, r8, ror #2
		for(int i = 0; i < 25; i++){
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	00003188 	andeq	r3, r0, r8, lsl #3
		proceed menu;
 6a4:	00000230 	andeq	r0, r0, r0, lsr r2
 6a8:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 6ac:	00000050 	andeq	r0, r0, r0, asr r0
	...
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
		proceed get_new_node_id;
 6bc:	bd120002 	ldclt	0, cr0, [r2, #-8]
 6c0:	00040000 	andeq	r0, r4, r0
		if (!clear_node_neighbour_array(node_db)){
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	00003408 	andeq	r3, r0, r8, lsl #8
			strncpy(reason, "Error Clearing Node Array", 50);
 6cc:	00000390 	muleq	r0, r0, r3
	...
			proceed error;
 6d8:	00000014 	andeq	r0, r0, r4, lsl r0
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
 6dc:	c2a50002 	adcgt	r0, r5, #2
 6e0:	00040000 	andeq	r0, r4, r0
	...
		request_packet->request_number = generate_request_num();
 6f0:	00000024 	andeq	r0, r0, r4, lsr #32
 6f4:	e2930002 	adds	r0, r3, #2
		call sender(request_packet, wait_discovery);
 6f8:	00040000 	andeq	r0, r4, r0
 6fc:	00000000 	andeq	r0, r0, r0
		request_packet->receiver_id=0;
 700:	00003798 	muleq	r0, r8, r7
		call sender(request_packet, wait_discovery);
 704:	00000028 	andeq	r0, r0, r8, lsr #32
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
				proceed clear_neighbour_array;
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
				proceed create_proto_start;
 71c:	e4210002 	strt	r0, [r1], #-2
				proceed start_delete_proto;
 720:	00040000 	andeq	r0, r4, r0
				proceed retrieve_proto;
 724:	00000000 	andeq	r0, r0, r0
				proceed display_db;
 728:	000037c0 	andeq	r3, r0, r0, asr #15
				proceed del_local;
 72c:	00000030 	andeq	r0, r0, r0, lsr r0
	...
			discovery_wait_flag=1;
 738:	00000024 	andeq	r0, r0, r4, lsr #32
			delay(3000, find_proto_start);
 73c:	e4fa0002 	ldrbt	r0, [sl], #2
 740:	00040000 	andeq	r0, r4, r0
		if (discovery_wait_flag == 1){
 744:	00000000 	andeq	r0, r0, r0
			discovery_wait_flag=0;
 748:	000037f0 	strdeq	r3, [r0], -r0
 74c:	00000020 	andeq	r0, r0, r0, lsr #32
			delay(3000, display_neighbour_nodes);
 750:	00003810 	andeq	r3, r0, r0, lsl r8
 754:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 760:	0000003c 	andeq	r0, r0, ip, lsr r0
 764:	e6410002 	strb	r0, [r1], -r2
 768:	00040000 	andeq	r0, r4, r0
 76c:	00000000 	andeq	r0, r0, r0
 770:	00003828 	andeq	r3, r0, r8, lsr #16
 774:	00000008 	andeq	r0, r0, r8
 778:	00000000 	andeq	r0, r0, r0
 77c:	00000006 	andeq	r0, r0, r6
 780:	00003830 	andeq	r3, r0, r0, lsr r8
 784:	00000008 	andeq	r0, r0, r8
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000006 	andeq	r0, r0, r6
 790:	00000000 	andeq	r0, r0, r0
 794:	00000008 	andeq	r0, r0, r8
	...
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
 7a0:	00000064 	andeq	r0, r0, r4, rrx
 7a4:	e77b0002 	ldrb	r0, [fp, -r2]!
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
 7a8:	00040000 	andeq	r0, r4, r0
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
 7ac:	00000000 	andeq	r0, r0, r0
			if (node_db->nnodes[i]=='\0') break;
 7b0:	00003838 	andeq	r3, r0, r8, lsr r8
 7b4:	0000005c 	andeq	r0, r0, ip, asr r0
 7b8:	00003894 	muleq	r0, r4, r8
		proceed menu;
 7bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 7c0:	00000000 	andeq	r0, r0, r0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 7c4:	00000090 	muleq	r0, r0, r0
 7c8:	000038c0 	andeq	r3, r0, r0, asr #17
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
 7cc:	00000018 	andeq	r0, r0, r8, lsl r0
 7d0:	000038d8 	ldrdeq	r3, [r0], -r8
			strncpy(reason, "Error: improper ID", 50);
 7d4:	00000060 	andeq	r0, r0, r0, rrx
 7d8:	00003938 	andeq	r3, r0, r8, lsr r9
 7dc:	00000034 	andeq	r0, r0, r4, lsr r0
			proceed error;
 7e0:	00000000 	andeq	r0, r0, r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
 7e4:	00000038 	andeq	r0, r0, r8, lsr r0
 7e8:	00000000 	andeq	r0, r0, r0
		ser_in(get_record_to_create, user_provided_record, 20);
 7ec:	0000000c 	andeq	r0, r0, ip
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	00000034 	andeq	r0, r0, r4, lsr r0
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
 7f8:	00000000 	andeq	r0, r0, r0
		create_message->tpe = CREATE_RECORD;
 7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 808:	00000054 	andeq	r0, r0, r4, asr r0
		create_message->request_number = generate_request_num();
 80c:	f03e0002 			; <UNDEFINED> instruction: 0xf03e0002
 810:	00040000 	andeq	r0, r4, r0
	...
		create_message->sender_id = node_db->id;
 81c:	00000014 	andeq	r0, r0, r4, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
 820:	0000396c 	andeq	r3, r0, ip, ror #18
 824:	00000028 	andeq	r0, r0, r8, lsr #32
 828:	00003994 	muleq	r0, r4, r9
		response_checker[0] = create_message->request_number;
 82c:	0000004c 	andeq	r0, r0, ip, asr #32
		call sender(&create_message, wait);
 830:	000039e0 	andeq	r3, r0, r0, ror #19
		response_checker[1] = create_message->tpe;
 834:	00000150 	andeq	r0, r0, r0, asr r1
 838:	00003b30 	andeq	r3, r0, r0, lsr fp
		call sender(&create_message, wait);
 83c:	00000118 	andeq	r0, r0, r8, lsl r1
 840:	00003c48 	andeq	r3, r0, r8, asr #24
 844:	00000020 	andeq	r0, r0, r0, lsr #32
 848:	00000000 	andeq	r0, r0, r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
 84c:	00000060 	andeq	r0, r0, r0, rrx
 850:	00003c68 	andeq	r3, r0, r8, ror #24
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
 854:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			strncpy(reason, "Error: improper node ID", 50);
 860:	00000024 	andeq	r0, r0, r4, lsr #32
 864:	faf60002 	blx	ffd80874 <_estack+0xdfd7b874>
			proceed error;
 868:	00040000 	andeq	r0, r4, r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
 86c:	00000000 	andeq	r0, r0, r0
 870:	00003c84 	andeq	r3, r0, r4, lsl #25
		ser_inf(get_index_for_delete, "%d", user_provided_index);
 874:	000000d4 	ldrdeq	r0, [r0], -r4
 878:	00003d58 	andeq	r3, r0, r8, asr sp
 87c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
 888:	000000b4 	strheq	r0, [r0], -r4
		delete_record->gid = node_db->gid;
 88c:	fd010002 	stc2	0, cr0, [r1, #-8]
		delete_record->tpe = DELETE_RECORD;
 890:	00040000 	andeq	r0, r4, r0
		delete_record->request_number = generate_request_num();
 894:	00000000 	andeq	r0, r0, r0
 898:	00003dfc 	strdeq	r3, [r0], -ip
		delete_record->sender_id = node_db->id;
 89c:	0000007c 	andeq	r0, r0, ip, ror r0
 8a0:	00003e78 	andeq	r3, r0, r8, ror lr
 8a4:	000000ac 	andeq	r0, r0, ip, lsr #1
		delete_record->receiver_id = user_provided_receiver_id;
 8a8:	00003f24 	andeq	r3, r0, r4, lsr #30
		response_checker[0] = delete_record->request_number;
 8ac:	0000005c 	andeq	r0, r0, ip, asr r0
 8b0:	00003f80 	andeq	r3, r0, r0, lsl #31
		call sender(&delete_record, wait);
 8b4:	00000018 	andeq	r0, r0, r8, lsl r0
 8b8:	00000000 	andeq	r0, r0, r0
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
 8c0:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
 8c4:	00000010 	andeq	r0, r0, r0, lsl r0
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
 8c8:	00003fa8 	andeq	r3, r0, r8, lsr #31
 8cc:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
 8d0:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
 8d4:	00000064 	andeq	r0, r0, r4, rrx
 8d8:	00004020 	andeq	r4, r0, r0, lsr #32
			strncpy(reason, "Error: improper node ID", 50);
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
 8e0:	00004034 	andeq	r4, r0, r4, lsr r0
			proceed error;
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
 8e8:	00004048 	andeq	r4, r0, r8, asr #32
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
 8ec:	00000014 	andeq	r0, r0, r4, lsl r0
 8f0:	0000405c 	andeq	r4, r0, ip, asr r0
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
 8f4:	00000028 	andeq	r0, r0, r8, lsr #32
 8f8:	00004084 	andeq	r4, r0, r4, lsl #1
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
 8fc:	00000010 	andeq	r0, r0, r0, lsl r0
 900:	00004094 	muleq	r0, r4, r0
		retrieve_record->gid = node_db->gid;
 904:	0000002c 	andeq	r0, r0, ip, lsr #32
 908:	000040c0 	andeq	r4, r0, r0, asr #1
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
		retrieve_record->tpe = RETRIEVE_RECORD;
 910:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
		retrieve_record->request_number = generate_request_num();
 914:	00000014 	andeq	r0, r0, r4, lsl r0
 918:	000040e8 	andeq	r4, r0, r8, ror #1
		retrieve_record->sender_id = node_db->id;
 91c:	00000110 	andeq	r0, r0, r0, lsl r1
		response_checker[0] = retrieve_record->request_number;
 920:	000041f8 	strdeq	r4, [r0], -r8
		retrieve_record->receiver_id = user_provided_receiver_id;
 924:	00000064 	andeq	r0, r0, r4, rrx
		retrieve_record->record_index = user_provided_index;
 928:	0000425c 	andeq	r4, r0, ip, asr r2
		call sender(&retrieve_record, wait);
 92c:	00000028 	andeq	r0, r0, r8, lsr #32
		response_checker[1] = retrieve_record->tpe;
 930:	00004284 	andeq	r4, r0, r4, lsl #5
 934:	00000150 	andeq	r0, r0, r0, asr r1
	...
		call sender(&retrieve_record, wait);
 940:	0000003c 	andeq	r0, r0, ip, lsr r0
 944:	081c0002 	ldmdaeq	ip, {r1}
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
 948:	00040001 	andeq	r0, r4, r1
	...
		if(node_db->data_base.item_count != 0){
 954:	000000f4 	strdeq	r0, [r0], -r4
		proceed menu;
 958:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 95c:	00000220 	andeq	r0, r0, r0, lsr #4
		delete_all(node_db);
 960:	000045f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 964:	00000060 	andeq	r0, r0, r0, rrx
		proceed menu;
 968:	00000000 	andeq	r0, r0, r0
		delay(3000, timeout);
 96c:	00000078 	andeq	r0, r0, r8, ror r0
 970:	00004654 	andeq	r4, r0, r4, asr r6
 974:	00000018 	andeq	r0, r0, r8, lsl r0
	...
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
 980:	00000044 	andeq	r0, r0, r4, asr #32
 984:	11430002 	cmpne	r3, r2
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
 988:	00040001 	andeq	r0, r4, r1
	...
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
 994:	00000010 	andeq	r0, r0, r0, lsl r0
 998:	00000000 	andeq	r0, r0, r0
 99c:	00000018 	andeq	r0, r0, r8, lsl r0
 9a0:	0000466c 	andeq	r4, r0, ip, ror #12
 9a4:	0000004c 	andeq	r0, r0, ip, asr #32
			for(int i = 0; i <= node_db->data_base.item_count; i++){
 9a8:	00000000 	andeq	r0, r0, r0
 9ac:	00000030 	andeq	r0, r0, r0, lsr r0
 9b0:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
 9b4:	0000006c 	andeq	r0, r0, ip, rrx
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
 9b8:	00004724 	andeq	r4, r0, r4, lsr #14
 9bc:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		proceed menu;
 9c8:	00000044 	andeq	r0, r0, r4, asr #32
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
 9cc:	15130002 	ldrne	r0, [r3, #-2]
 9d0:	00040001 	andeq	r0, r4, r1
 9d4:	00000000 	andeq	r0, r0, r0
		proceed menu;
 9d8:	0000473c 	andeq	r4, r0, ip, lsr r7
}
 9dc:	00000028 	andeq	r0, r0, r8, lsr #32
 9e0:	00004764 	andeq	r4, r0, r4, ror #14
 9e4:	00000008 	andeq	r0, r0, r8
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	00000022 	andeq	r0, r0, r2, lsr #32
 9f0:	00000000 	andeq	r0, r0, r0
 9f4:	0000002e 	andeq	r0, r0, lr, lsr #32
 9f8:	00000000 	andeq	r0, r0, r0
 9fc:	00000034 	andeq	r0, r0, r4, lsr r0
 a00:	00000000 	andeq	r0, r0, r0
 a04:	00000040 	andeq	r0, r0, r0, asr #32
	...
 a10:	0000001c 	andeq	r0, r0, ip, lsl r0
 a14:	1abe0002 	bne	fef80a24 <_estack+0xdef7ba24>
 a18:	00040001 	andeq	r0, r4, r1
 a1c:	00000000 	andeq	r0, r0, r0
 a20:	0000476c 	andeq	r4, r0, ip, ror #14
 a24:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
static void devinit_uart (int devnum) {
 a30:	0000001c 	andeq	r0, r0, ip, lsl r0
	adddevfunc (ioreq_uart_a, devnum);
 a34:	29f30002 	ldmibcs	r3!, {r1}^
 a38:	00040001 	andeq	r0, r4, r1
void udelay (volatile word n) {
 a3c:	00000000 	andeq	r0, r0, r0
 a40:	00004818 	andeq	r4, r0, r8, lsl r8
	while (n) {
 a44:	0000004c 	andeq	r0, r0, ip, asr #32
	...
	while (n--);
 a50:	00000014 	andeq	r0, r0, r4, lsl r0
 a54:	336d0002 	cmncc	sp, #2
 a58:	00040001 	andeq	r0, r4, r1
	...
void mdelay (volatile word n) {
 a68:	0000001c 	andeq	r0, r0, ip, lsl r0
 a6c:	3c970002 	ldccc	0, cr0, [r7], {2}
	while (n) {
 a70:	00040001 	andeq	r0, r4, r1
 a74:	00000000 	andeq	r0, r0, r0
}
 a78:	00004864 	andeq	r4, r0, r4, ror #16
		udelay (999);
 a7c:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000122 	andeq	r0, r0, r2, lsr #2
      28:	00000126 	andeq	r0, r0, r6, lsr #2
      2c:	0000016c 	andeq	r0, r0, ip, ror #2
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	0000011a 	andeq	r0, r0, sl, lsl r1
      50:	0000012c 	andeq	r0, r0, ip, lsr #2
      54:	0000016c 	andeq	r0, r0, ip, ror #2
	...
			nq++;
      60:	000001ee 	andeq	r0, r0, lr, ror #3
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000358 	andeq	r0, r0, r8, asr r3
      68:	0000035c 	andeq	r0, r0, ip, asr r3
      6c:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
      78:	000001fc 	strdeq	r0, [r0], -ip
      7c:	000002d4 	ldrdeq	r0, [r0], -r4
      80:	0000035c 	andeq	r0, r0, ip, asr r3
      84:	000004ec 	andeq	r0, r0, ip, ror #9
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000226 	andeq	r0, r0, r6, lsr #4
      94:	000002d4 	ldrdeq	r0, [r0], -r4
      98:	0000035c 	andeq	r0, r0, ip, asr r3
	if (baction == NULL)
      9c:	000004ea 	andeq	r0, r0, sl, ror #9
      a0:	000004ea 	andeq	r0, r0, sl, ror #9
	(*baction) (pbutton);
      a4:	000004ec 	andeq	r0, r0, ip, ror #9
	...
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      b0:	000003a2 	andeq	r0, r0, r2, lsr #7
endthread
      b4:	000003a8 	andeq	r0, r0, r8, lsr #7
      b8:	00000414 	andeq	r0, r0, r4, lsl r4
      bc:	0000041c 	andeq	r0, r0, ip, lsl r4
	...
fsm sender(struct ResponseMessage *message) {
      c8:	000003ee 	andeq	r0, r0, lr, ror #7
      cc:	00000400 	andeq	r0, r0, r0, lsl #8
      d0:	00000404 	andeq	r0, r0, r4, lsl #8
}
      d4:	00000408 	andeq	r0, r0, r8, lsl #8
	...
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	00000578 	andeq	r0, r0, r8, ror r5
      e4:	00000676 	andeq	r0, r0, r6, ror r6
      e8:	00000678 	andeq	r0, r0, r8, ror r6
		packet[0] = NETWORK_ID;
      ec:	000009dc 	ldrdeq	r0, [r0], -ip
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	000009e2 	andeq	r0, r0, r2, ror #19
		*p = message->tpe;p++;
      f4:	000009e6 	andeq	r0, r0, r6, ror #19
	...
		*p = message->sender_id;p++;
     100:	00000650 	andeq	r0, r0, r0, asr r6
		*p = message->receiver_id;p++;
     104:	00000676 	andeq	r0, r0, r6, ror r6
		switch(message->tpe) {
     108:	00000678 	andeq	r0, r0, r8, ror r6
     10c:	000006ac 	andeq	r0, r0, ip, lsr #13
	...
		tcv_endp(packet);
     118:	000006a4 	andeq	r0, r0, r4, lsr #13
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	000006a4 	andeq	r0, r0, r4, lsr #13
     120:	000006a6 	andeq	r0, r0, r6, lsr #13
}
     124:	000006a8 	andeq	r0, r0, r8, lsr #13
	...
				*p = message->status;p++;
     130:	000006dc 	ldrdeq	r0, [r0], -ip
     134:	0000070e 	andeq	r0, r0, lr, lsl #14
				strncpy(p, message->record, sizeof(message->record));
     138:	0000072e 	andeq	r0, r0, lr, lsr #14
				*p = message->padding;p++;
     13c:	0000072e 	andeq	r0, r0, lr, lsr #14
	...
				strncpy(p, message->record, sizeof(message->record));
     148:	000007a8 	andeq	r0, r0, r8, lsr #15
				strncpy(p, message->record, sizeof(message->record));
     14c:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
				*p = message->record_index;p++;
     150:	00000980 	andeq	r0, r0, r0, lsl #19
				*p = message->padding;
     154:	0000098c 	andeq	r0, r0, ip, lsl #19
	...
				break;
     160:	000000c8 	andeq	r0, r0, r8, asr #1
     164:	0000016c 	andeq	r0, r0, ip, ror #2
     168:	0000016c 	andeq	r0, r0, ip, ror #2
bool init_node(struct Node* node){
     16c:	0000018c 	andeq	r0, r0, ip, lsl #3
    node->id  = 0;                  // default id value 0
     170:	00000001 	andeq	r0, r0, r1
    node->index = 0;                // default entry count 0
     174:	00000001 	andeq	r0, r0, r1
    node->data_base.item_count = 0; // default no items in array
     178:	00000001 	andeq	r0, r0, r1
    DEBUG_PRINT("Error initializing node...\n");
     17c:	00000001 	andeq	r0, r0, r1
     180:	00000001 	andeq	r0, r0, r1
};
     184:	00000001 	andeq	r0, r0, r1
     188:	00000001 	andeq	r0, r0, r1
uint8_t generate_request_num(void){
     18c:	00000001 	andeq	r0, r0, r1
    return (uint8_t) (rand() % 255);
     190:	0000018c 	andeq	r0, r0, ip, lsl #3
     194:	0000019e 	muleq	r0, lr, r1
     198:	00000001 	andeq	r0, r0, r1
}
     19c:	00000001 	andeq	r0, r0, r1
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	0000019e 	muleq	r0, lr, r1
     1a4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     1a8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
};
     1b0:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	000004fc 	strdeq	r0, [r0], -ip
     1b8:	00000001 	andeq	r0, r0, r1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	00000001 	andeq	r0, r0, r1
     1c0:	000004fc 	strdeq	r0, [r0], -ip
     1c4:	00000522 	andeq	r0, r0, r2, lsr #10
        node->data_base.item_count -= 1;
     1c8:	00000001 	andeq	r0, r0, r1
};
     1cc:	00000001 	andeq	r0, r0, r1
fsm receiver(struct Node* node_db) {
     1d0:	00000001 	andeq	r0, r0, r1
     1d4:	00000001 	andeq	r0, r0, r1
     1d8:	00000524 	andeq	r0, r0, r4, lsr #10
     1dc:	00000a30 	andeq	r0, r0, r0, lsr sl
	...
     1e8:	00000b1e 	andeq	r0, r0, lr, lsl fp
     1ec:	00000b24 	andeq	r0, r0, r4, lsr #22
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	00000b24 	andeq	r0, r0, r4, lsr #22
     1f4:	00000b24 	andeq	r0, r0, r4, lsr #22
     1f8:	00000b28 	andeq	r0, r0, r8, lsr #22
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	00000b2a 	andeq	r0, r0, sl, lsr #22
	...
     208:	00000b24 	andeq	r0, r0, r4, lsr #22
		switch (tpe){
     20c:	00000b26 	andeq	r0, r0, r6, lsr #22
     210:	00000b2a 	andeq	r0, r0, sl, lsr #22
     214:	00000b2c 	andeq	r0, r0, ip, lsr #22
	...
     220:	00000b3c 	andeq	r0, r0, ip, lsr fp
     224:	00000b3e 	andeq	r0, r0, lr, lsr fp
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	00000b40 	andeq	r0, r0, r0, asr #22
     22c:	00000b42 	andeq	r0, r0, r2, asr #22
	...
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	00000b76 	andeq	r0, r0, r6, ror fp
     23c:	00000b7a 	andeq	r0, r0, sl, ror fp
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	00000b7c 	andeq	r0, r0, ip, ror fp
     244:	00000b7e 	andeq	r0, r0, lr, ror fp
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	00000b80 	andeq	r0, r0, r0, lsl #23
     24c:	00000b88 	andeq	r0, r0, r8, lsl #23
	...
					response_message_0->gid = discovery_request_message->gid;
     258:	00000bac 	andeq	r0, r0, ip, lsr #23
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
					response_message_0->request_number = discovery_request_message->request_number;
     260:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
					response_message_0->sender_id = node_db->id;
     264:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
	...
					call sender(response_message_0, done_case);
     270:	00000bdc 	ldrdeq	r0, [r0], -ip
     274:	00000c62 	andeq	r0, r0, r2, ror #24
     278:	00000c88 	andeq	r0, r0, r8, lsl #25
     27c:	00000ce0 	andeq	r0, r0, r0, ror #25
	...
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	00000d50 	andeq	r0, r0, r0, asr sp
     28c:	00000d52 	andeq	r0, r0, r2, asr sp
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	00000d54 	andeq	r0, r0, r4, asr sp
     294:	00000d68 	andeq	r0, r0, r8, ror #26
	...
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	00000d84 	andeq	r0, r0, r4, lsl #27
     2a4:	00000d86 	andeq	r0, r0, r6, lsl #27
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	00000d88 	andeq	r0, r0, r8, lsl #27
     2ac:	00000d90 	muleq	r0, r0, sp
	...
     2b8:	00000ecc 	andeq	r0, r0, ip, asr #29
     2bc:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2c0:	00000ed2 	ldrdeq	r0, [r0], -r2
     2c4:	00000ed4 	ldrdeq	r0, [r0], -r4
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	00000ed6 	ldrdeq	r0, [r0], -r6
     2cc:	00000ed8 	ldrdeq	r0, [r0], -r8
	...
		tcv_endp(incoming_packet);
     2d8:	00000f34 	andeq	r0, r0, r4, lsr pc
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	00000f38 	andeq	r0, r0, r8, lsr pc
     2e0:	00000f4a 	andeq	r0, r0, sl, asr #30
		proceed receiving;
     2e4:	00000f76 	andeq	r0, r0, r6, ror pc
	...
		ser_out(response_1_delete, "\r\n Record Deleted");
     2f0:	00000f8c 	andeq	r0, r0, ip, lsl #31
		proceed receiving;
     2f4:	00000f8c 	andeq	r0, r0, ip, lsl #31
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	00000f8e 	andeq	r0, r0, lr, lsl #31
     2fc:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	...
     308:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
		proceed receiving;
     30c:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     314:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
     318:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
     31c:	00000fa2 	andeq	r0, r0, r2, lsr #31
		proceed receiving;
     320:	00000fac 	andeq	r0, r0, ip, lsr #31
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	00000fae 	andeq	r0, r0, lr, lsr #31
     328:	00000fba 			; <UNDEFINED> instruction: 0x00000fba
     32c:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
	...
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     33c:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     340:	00000fd2 	ldrdeq	r0, [r0], -r2
     344:	00000fd4 	ldrdeq	r0, [r0], -r4
	...
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     350:	00000fd6 	ldrdeq	r0, [r0], -r6
		proceed receiving;
     354:	00000fd8 	ldrdeq	r0, [r0], -r8
}
     358:	00000fda 	ldrdeq	r0, [r0], -sl
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	00000fdc 	ldrdeq	r0, [r0], -ip
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	00000fe6 	andeq	r0, r0, r6, ror #31
     364:	00000fea 	andeq	r0, r0, sl, ror #31
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     368:	00000ff4 	strdeq	r0, [r0], -r4
     36c:	00000ff6 	strdeq	r0, [r0], -r6
	...
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     378:	000010da 	ldrdeq	r1, [r0], -sl
     37c:	000010dc 	ldrdeq	r1, [r0], -ip
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	000010de 	ldrdeq	r1, [r0], -lr
     384:	000010e2 	andeq	r1, r0, r2, ror #1
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	000010f2 	strdeq	r1, [r0], -r2
     38c:	000010f4 	strdeq	r1, [r0], -r4
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     398:	000010dc 	ldrdeq	r1, [r0], -ip
     39c:	000010de 	ldrdeq	r1, [r0], -lr
		strncpy(response_message->record, rec, 20);
     3a0:	000010e2 	andeq	r1, r0, r2, ror #1
     3a4:	000010f2 	strdeq	r1, [r0], -r2
					call sender(response_message_4, done_case);
     3a8:	000010f4 	strdeq	r1, [r0], -r4
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	0000112e 	andeq	r1, r0, lr, lsr #2
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b8:	000010e6 	andeq	r1, r0, r6, ror #1
     3bc:	000010ea 	andeq	r1, r0, sl, ror #1
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	00001112 	andeq	r1, r0, r2, lsl r1
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	0000111a 	andeq	r1, r0, sl, lsl r1
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3d0:	000010ea 	andeq	r1, r0, sl, ror #1
     3d4:	000010ee 	andeq	r1, r0, lr, ror #1
     3d8:	00001126 	andeq	r1, r0, r6, lsr #2
     3dc:	0000112a 	andeq	r1, r0, sl, lsr #2
	...
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e8:	000010ee 	andeq	r1, r0, lr, ror #1
     3ec:	000010f2 	strdeq	r1, [r0], -r2
    return node->data_base.item_array[index];
     3f0:	00001120 	andeq	r1, r0, r0, lsr #2
     3f4:	00001126 	andeq	r1, r0, r6, lsr #2
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	0000112e 	andeq	r1, r0, lr, lsr #2
    return node->data_base.item_array[index];
     404:	00001130 	andeq	r1, r0, r0, lsr r1
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	00001132 	andeq	r1, r0, r2, lsr r1
     40c:	00001134 	andeq	r1, r0, r4, lsr r1
     410:	00001136 	andeq	r1, r0, r6, lsr r1
		strncpy(response_message->record, rec, 20);
     414:	00001138 	andeq	r1, r0, r8, lsr r1
	...
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     420:	00001130 	andeq	r1, r0, r0, lsr r1
     424:	00001132 	andeq	r1, r0, r2, lsr r1
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	00001138 	andeq	r1, r0, r8, lsr r1
     42c:	0000113a 	andeq	r1, r0, sl, lsr r1
	...
				if(!response_flag){
     438:	0000114a 	andeq	r1, r0, sl, asr #2
     43c:	0000114c 	andeq	r1, r0, ip, asr #2
					response_flag=1;
     440:	0000114e 	andeq	r1, r0, lr, asr #2
					trigger(&response_flag);
     444:	00001150 	andeq	r1, r0, r0, asr r1
	...
				switch(response_message_5->status){
     450:	00001162 	andeq	r1, r0, r2, ror #2
     454:	00001164 	andeq	r1, r0, r4, ror #2
     458:	00001166 	andeq	r1, r0, r6, ror #2
     45c:	00001168 	andeq	r1, r0, r8, ror #2
	...
     468:	000011aa 	andeq	r1, r0, sl, lsr #3
     46c:	000011aa 	andeq	r1, r0, sl, lsr #3
     470:	000011ae 	andeq	r1, r0, lr, lsr #3
     474:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
	...
     480:	000011e0 	andeq	r1, r0, r0, ror #3
     484:	000011e2 	andeq	r1, r0, r2, ror #3
     488:	000011e4 	andeq	r1, r0, r4, ror #3
     48c:	000011ec 	andeq	r1, r0, ip, ror #3
	...
     498:	0000128c 	andeq	r1, r0, ip, lsl #5
     49c:	0000128c 	andeq	r1, r0, ip, lsl #5
     4a0:	00001292 	muleq	r0, r2, r2
     4a4:	00001294 	muleq	r0, r4, r2
     4a8:	00001296 	muleq	r0, r6, r2
						if (response_checker[0] == response_message_5->request_number){
     4ac:	0000129a 	muleq	r0, sl, r2
	...
							switch(response_checker[1]){
     4b8:	000012a6 	andeq	r1, r0, r6, lsr #5
     4bc:	000012a8 	andeq	r1, r0, r8, lsr #5
     4c0:	000012be 			; <UNDEFINED> instruction: 0x000012be
     4c4:	000012c0 	andeq	r1, r0, r0, asr #5
									proceed response_1_create;
     4c8:	000012d2 	ldrdeq	r1, [r0], -r2
						proceed response_2;
     4cc:	000012ee 	andeq	r1, r0, lr, ror #5
									proceed response_1_delete;
     4d0:	00001312 	andeq	r1, r0, r2, lsl r3
									proceed response_1_retrieve;
     4d4:	0000146c 	andeq	r1, r0, ip, ror #8
	...
						proceed response_4;
     4e0:	000012a6 	andeq	r1, r0, r6, lsr #5
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	000012a8 	andeq	r1, r0, r8, lsr #5
     4e8:	00001346 	andeq	r1, r0, r6, asr #6
}
     4ec:	0000134a 	andeq	r1, r0, sl, asr #6
	...
     4f8:	0000134a 	andeq	r1, r0, sl, asr #6
bool delete_all(struct Node *node){
     4fc:	0000134a 	andeq	r1, r0, sl, asr #6
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	0000134e 	andeq	r1, r0, lr, asr #6
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	00001352 	andeq	r1, r0, r2, asr r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	00001356 	andeq	r1, r0, r6, asr r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	00001358 	andeq	r1, r0, r8, asr r3
	...
    node->data_base.item_count = 0;
     518:	0000134a 	andeq	r1, r0, sl, asr #6
}
     51c:	0000134e 	andeq	r1, r0, lr, asr #6
        return true;
     520:	00001364 	andeq	r1, r0, r4, ror #6
fsm root {
     524:	00001366 	andeq	r1, r0, r6, ror #6
     528:	0000136a 	andeq	r1, r0, sl, ror #6
     52c:	0000136e 	andeq	r1, r0, lr, ror #6
	...
     538:	00001352 	andeq	r1, r0, r2, asr r3
     53c:	00001356 	andeq	r1, r0, r6, asr r3
     540:	00001358 	andeq	r1, r0, r8, asr r3
     544:	0000135a 	andeq	r1, r0, sl, asr r3
     548:	0000135e 	andeq	r1, r0, lr, asr r3
     54c:	00001362 	andeq	r1, r0, r2, ror #6
	...
     558:	00001366 	andeq	r1, r0, r6, ror #6
     55c:	0000136a 	andeq	r1, r0, sl, ror #6
     560:	00001384 	andeq	r1, r0, r4, lsl #7
     564:	00001388 	andeq	r1, r0, r8, lsl #7
     568:	0000138a 	andeq	r1, r0, sl, lsl #7
     56c:	00001392 	muleq	r0, r2, r3
	...
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	0000137c 	andeq	r1, r0, ip, ror r3
     57c:	0000137e 	andeq	r1, r0, lr, ror r3
     580:	00001380 	andeq	r1, r0, r0, lsl #7
		init_node(node_db);
     584:	00001384 	andeq	r1, r0, r4, lsl #7
	...
		tcv_plug (0, &plug_null);
     590:	000013c0 	andeq	r1, r0, r0, asr #7
     594:	000013c4 	andeq	r1, r0, r4, asr #7
		sfd = tcv_open (WNONE, 0, 0);
     598:	000013c6 	andeq	r1, r0, r6, asr #7
     59c:	000013ce 	andeq	r1, r0, lr, asr #7
	...
     5a8:	000013c4 	andeq	r1, r0, r4, asr #7
			diag("Cannot open tcv interface");
     5ac:	000013c6 	andeq	r1, r0, r6, asr #7
     5b0:	000013d2 	ldrdeq	r1, [r0], -r2
			halt();
     5b4:	000013d4 	ldrdeq	r1, [r0], -r4
	...
		runfsm receiver(node_db);
     5c0:	000013f2 	strdeq	r1, [r0], -r2
     5c4:	000013f4 	strdeq	r1, [r0], -r4
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	000013f6 	strdeq	r1, [r0], -r6
     5cc:	000013f8 	strdeq	r1, [r0], -r8
	...
     5d8:	000013f4 	strdeq	r1, [r0], -r4
     5dc:	000013f6 	strdeq	r1, [r0], -r6
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	000013f8 	strdeq	r1, [r0], -r8
     5e4:	000013fc 	strdeq	r1, [r0], -ip
	...
		switch(CHOICE) {
     5f0:	00001452 	andeq	r1, r0, r2, asr r4
     5f4:	00001454 	andeq	r1, r0, r4, asr r4
     5f8:	00001454 	andeq	r1, r0, r4, asr r4
     5fc:	00001456 	andeq	r1, r0, r6, asr r4
	...
     608:	0000145a 	andeq	r1, r0, sl, asr r4
     60c:	0000145e 	andeq	r1, r0, lr, asr r4
     610:	00001460 	andeq	r1, r0, r0, ror #8
     614:	00001462 	andeq	r1, r0, r2, ror #8
	...
				proceed menu;
     620:	00000001 	andeq	r0, r0, r1
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	00000001 	andeq	r0, r0, r1
     628:	00000001 	andeq	r0, r0, r1
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	00000001 	andeq	r0, r0, r1
	...
		DEBUG_PRINT("setting node group ID");
     638:	00001514 	andeq	r1, r0, r4, lsl r5
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	00001514 	andeq	r1, r0, r4, lsl r5
     640:	00001518 	andeq	r1, r0, r8, lsl r5
		proceed menu;
     644:	00001524 	andeq	r1, r0, r4, lsr #10
	...
		if(node_db->id < 1 || node_db->id > 25){
     650:	00000a30 	andeq	r0, r0, r0, lsr sl
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	00000a3c 	andeq	r0, r0, ip, lsr sl
     658:	00000a3c 	andeq	r0, r0, ip, lsr sl
		if(node_db->id < 1 || node_db->id > 25){
     65c:	00000a68 	andeq	r0, r0, r8, ror #20
     660:	00000a68 	andeq	r0, r0, r8, ror #20
     664:	00000a92 	muleq	r0, r2, sl
			strncpy(reason, "Out of Range", 50);
     668:	00000a94 	muleq	r0, r4, sl
     66c:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			proceed invalid_node_id;
     670:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     674:	00000b10 	andeq	r0, r0, r0, lsl fp
				strncpy(reason, "ID is already in use", 50);
     678:	00000001 	andeq	r0, r0, r1
     67c:	00000001 	andeq	r0, r0, r1
			if(node_db->id == node_db->nnodes[i]){
     680:	00000b10 	andeq	r0, r0, r0, lsl fp
     684:	00000b64 	andeq	r0, r0, r4, ror #22
     688:	00000b64 	andeq	r0, r0, r4, ror #22
				strncpy(reason, "ID is already in use", 50);
     68c:	00000ba4 	andeq	r0, r0, r4, lsr #23
     690:	00000ba4 	andeq	r0, r0, r4, lsr #23
     694:	00000bcc 	andeq	r0, r0, ip, asr #23
				proceed invalid_node_id;
     698:	00000bcc 	andeq	r0, r0, ip, asr #23
		for(int i = 0; i < 25; i++){
     69c:	00000ce0 	andeq	r0, r0, r0, ror #25
     6a0:	00000ce0 	andeq	r0, r0, r0, ror #25
		proceed menu;
     6a4:	00000d30 	andeq	r0, r0, r0, lsr sp
     6a8:	00000d30 	andeq	r0, r0, r0, lsr sp
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	00000d84 	andeq	r0, r0, r4, lsl #27
     6b0:	00000d84 	andeq	r0, r0, r4, lsl #27
     6b4:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
     6b8:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
		proceed get_new_node_id;
     6bc:	00000ecc 	andeq	r0, r0, ip, asr #29
     6c0:	00000001 	andeq	r0, r0, r1
		if (!clear_node_neighbour_array(node_db)){
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00000ecc 	andeq	r0, r0, ip, asr #29
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	00000f8c 	andeq	r0, r0, ip, lsl #31
     6d0:	00000f8c 	andeq	r0, r0, ip, lsl #31
     6d4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			proceed error;
     6d8:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	0000100c 	andeq	r1, r0, ip
     6e0:	0000100c 	andeq	r1, r0, ip
		request_packet->gid = node_db->gid;
     6e4:	000010b0 	strheq	r1, [r0], -r0
     6e8:	000010b0 	strheq	r1, [r0], -r0
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	00001268 	andeq	r1, r0, r8, ror #4
		request_packet->request_number = generate_request_num();
     6f0:	00001268 	andeq	r1, r0, r8, ror #4
     6f4:	0000128c 	andeq	r1, r0, ip, lsl #5
		call sender(request_packet, wait_discovery);
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
		request_packet->receiver_id=0;
     700:	0000128c 	andeq	r1, r0, ip, lsl #5
		call sender(request_packet, wait_discovery);
     704:	000014e4 	andeq	r1, r0, r4, ror #9
     708:	000014e4 	andeq	r1, r0, r4, ror #9
     70c:	00001514 	andeq	r1, r0, r4, lsl r5
			release;
     710:	00000001 	andeq	r0, r0, r1
				proceed get_new_node_id;
     714:	00000001 	andeq	r0, r0, r1
				proceed clear_neighbour_array;
     718:	00001514 	andeq	r1, r0, r4, lsl r5
				proceed create_proto_start;
     71c:	00001574 	andeq	r1, r0, r4, ror r5
	...
				proceed display_db;
     728:	00001630 	andeq	r1, r0, r0, lsr r6
				proceed del_local;
     72c:	00001632 	andeq	r1, r0, r2, lsr r6
		if (discovery_wait_flag == 0){
     730:	00001632 	andeq	r1, r0, r2, lsr r6
			discovery_wait_flag=1;
     734:	00001634 	andeq	r1, r0, r4, lsr r6
	...
			delay(3000, find_proto_start);
     740:	0000169a 	muleq	r0, sl, r6
		if (discovery_wait_flag == 1){
     744:	0000173c 	andeq	r1, r0, ip, lsr r7
			discovery_wait_flag=0;
     748:	00001740 	andeq	r1, r0, r0, asr #14
     74c:	00001744 	andeq	r1, r0, r4, asr #14
	...
			delay(3000, display_neighbour_nodes);
     758:	00001b10 	andeq	r1, r0, r0, lsl fp
     75c:	00001b12 	andeq	r1, r0, r2, lsl fp
     760:	00001b16 	andeq	r1, r0, r6, lsl fp
     764:	00001b18 	andeq	r1, r0, r8, lsl fp
     768:	00001b1c 	andeq	r1, r0, ip, lsl fp
     76c:	00001b20 	andeq	r1, r0, r0, lsr #22
     770:	00001b22 	andeq	r1, r0, r2, lsr #22
     774:	00001b2c 	andeq	r1, r0, ip, lsr #22
	...
     780:	00001b5e 	andeq	r1, r0, lr, asr fp
     784:	00001b60 	andeq	r1, r0, r0, ror #22
     788:	00001b62 	andeq	r1, r0, r2, ror #22
     78c:	00001b66 	andeq	r1, r0, r6, ror #22
     790:	00001bf6 	strdeq	r1, [r0], -r6
     794:	00001c58 	andeq	r1, r0, r8, asr ip
     798:	00001c5c 	andeq	r1, r0, ip, asr ip
     79c:	00001c60 	andeq	r1, r0, r0, ror #24
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	00001c62 	andeq	r1, r0, r2, ror #24
     7a4:	00001c64 	andeq	r1, r0, r4, ror #24
	...
			if (node_db->nnodes[i]=='\0') break;
     7b0:	00001b7a 	andeq	r1, r0, sl, ror fp
     7b4:	00001b7c 	andeq	r1, r0, ip, ror fp
     7b8:	00001b7c 	andeq	r1, r0, ip, ror fp
		proceed menu;
     7bc:	00001b7e 	andeq	r1, r0, lr, ror fp
	...
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c8:	00001574 	andeq	r1, r0, r4, ror r5
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
     7d0:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
			strncpy(reason, "Error: improper ID", 50);
     7d4:	00001630 	andeq	r1, r0, r0, lsr r6
     7d8:	00001630 	andeq	r1, r0, r0, lsr r6
     7dc:	00001648 	andeq	r1, r0, r8, asr #12
			proceed error;
     7e0:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	00000001 	andeq	r0, r0, r1
     7e8:	00001648 	andeq	r1, r0, r8, asr #12
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	00001658 	andeq	r1, r0, r8, asr r6
     7f0:	00001658 	andeq	r1, r0, r8, asr r6
     7f4:	00001684 	andeq	r1, r0, r4, lsl #13
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	00000001 	andeq	r0, r0, r1
		create_message->tpe = CREATE_RECORD;
     7fc:	00000001 	andeq	r0, r0, r1
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	00001684 	andeq	r1, r0, r4, lsl #13
		create_message->gid = node_db->gid;
     804:	0000168a 	andeq	r1, r0, sl, lsl #13
		create_message->tpe = CREATE_RECORD;
     808:	0000168c 	andeq	r1, r0, ip, lsl #13
		create_message->request_number = generate_request_num();
     80c:	00001758 	andeq	r1, r0, r8, asr r7
     810:	00001758 	andeq	r1, r0, r8, asr r7
		create_message->sender_id = node_db->id;
     814:	0000176c 	andeq	r1, r0, ip, ror #14
     818:	0000176c 	andeq	r1, r0, ip, ror #14
     81c:	000017a0 	andeq	r1, r0, r0, lsr #15
		strncpy(create_message->record, user_provided_record, 20);
     820:	000017a0 	andeq	r1, r0, r0, lsr #15
     824:	000017d4 	ldrdeq	r1, [r0], -r4
     828:	00000001 	andeq	r0, r0, r1
		response_checker[0] = create_message->request_number;
     82c:	00000001 	andeq	r0, r0, r1
		call sender(&create_message, wait);
     830:	000017d4 	ldrdeq	r1, [r0], -r4
		response_checker[1] = create_message->tpe;
     834:	000017f8 	strdeq	r1, [r0], -r8
     838:	000017f8 	strdeq	r1, [r0], -r8
		call sender(&create_message, wait);
     83c:	00001830 	andeq	r1, r0, r0, lsr r8
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	00000001 	andeq	r0, r0, r1
     858:	00001830 	andeq	r1, r0, r0, lsr r8
			strncpy(reason, "Error: improper node ID", 50);
     85c:	00001854 	andeq	r1, r0, r4, asr r8
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
			proceed error;
     868:	00001854 	andeq	r1, r0, r4, asr r8
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	00001862 	andeq	r1, r0, r2, ror #16
     870:	00001862 	andeq	r1, r0, r2, ror #16
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	00001872 	andeq	r1, r0, r2, ror r8
     878:	00001872 	andeq	r1, r0, r2, ror r8
     87c:	0000188e 	andeq	r1, r0, lr, lsl #17
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	00000001 	andeq	r0, r0, r1
		delete_record->tpe = DELETE_RECORD;
     884:	00000001 	andeq	r0, r0, r1
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	00000001 	andeq	r0, r0, r1
		delete_record->gid = node_db->gid;
     88c:	00000001 	andeq	r0, r0, r1
		delete_record->tpe = DELETE_RECORD;
     890:	0000188e 	andeq	r1, r0, lr, lsl #17
		delete_record->request_number = generate_request_num();
     894:	000018a2 	andeq	r1, r0, r2, lsr #17
     898:	000018a2 	andeq	r1, r0, r2, lsr #17
		delete_record->sender_id = node_db->id;
     89c:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     8a0:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     8a4:	000018d4 	ldrdeq	r1, [r0], -r4
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	000018d4 	ldrdeq	r1, [r0], -r4
		response_checker[0] = delete_record->request_number;
     8ac:	00001970 	andeq	r1, r0, r0, ror r9
     8b0:	00001970 	andeq	r1, r0, r0, ror r9
		call sender(&delete_record, wait);
     8b4:	000019c0 	andeq	r1, r0, r0, asr #19
     8b8:	000019c0 	andeq	r1, r0, r0, asr #19
     8bc:	00001a08 	andeq	r1, r0, r8, lsl #20
     8c0:	00001a08 	andeq	r1, r0, r8, lsl #20
     8c4:	00001a58 	andeq	r1, r0, r8, asr sl
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	00001a58 	andeq	r1, r0, r8, asr sl
     8d4:	00001b00 	andeq	r1, r0, r0, lsl #22
     8d8:	00001b00 	andeq	r1, r0, r0, lsl #22
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	00001b34 	andeq	r1, r0, r4, lsr fp
     8e0:	00001b34 	andeq	r1, r0, r4, lsr fp
			proceed error;
     8e4:	00001b4c 	andeq	r1, r0, ip, asr #22
     8e8:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	00000001 	andeq	r0, r0, r1
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00001b4c 	andeq	r1, r0, ip, asr #22
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	00001c88 	andeq	r1, r0, r8, lsl #25
     900:	00001c88 	andeq	r1, r0, r8, lsl #25
		retrieve_record->gid = node_db->gid;
     904:	00001cac 	andeq	r1, r0, ip, lsr #25
	...
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	00001d6c 	andeq	r1, r0, ip, ror #26
		retrieve_record->request_number = generate_request_num();
     914:	00001d72 	andeq	r1, r0, r2, ror sp
     918:	00001d78 	andeq	r1, r0, r8, ror sp
		retrieve_record->sender_id = node_db->id;
     91c:	00001d7c 	andeq	r1, r0, ip, ror sp
		response_checker[0] = retrieve_record->request_number;
     920:	00001d84 	andeq	r1, r0, r4, lsl #27
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	00001da4 	andeq	r1, r0, r4, lsr #27
	...
		response_checker[1] = retrieve_record->tpe;
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
		call sender(&retrieve_record, wait);
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
	...
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	00001cac 	andeq	r1, r0, ip, lsr #25
     94c:	00001cc2 	andeq	r1, r0, r2, asr #25
		if(node_db->data_base.item_count != 0){
     950:	00001cc2 	andeq	r1, r0, r2, asr #25
     954:	00001cdc 	ldrdeq	r1, [r0], -ip
		proceed menu;
     958:	00001cdc 	ldrdeq	r1, [r0], -ip
     95c:	00001cea 	andeq	r1, r0, sl, ror #25
		delete_all(node_db);
     960:	00001cec 	andeq	r1, r0, ip, ror #25
     964:	00001d38 	andeq	r1, r0, r8, lsr sp
		proceed menu;
     968:	00001d38 	andeq	r1, r0, r8, lsr sp
		delay(3000, timeout);
     96c:	00001dc4 	andeq	r1, r0, r4, asr #27
     970:	00001dc4 	andeq	r1, r0, r4, asr #27
     974:	00001e34 	andeq	r1, r0, r4, lsr lr
		when(&response_flag, menu);
     978:	00001e34 	andeq	r1, r0, r4, lsr lr
     97c:	00001ef4 	strdeq	r1, [r0], -r4
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	00001ef4 	strdeq	r1, [r0], -r4
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	00001f18 	andeq	r1, r0, r8, lsl pc
     990:	00001f18 	andeq	r1, r0, r8, lsl pc
     994:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     9ac:	00002054 	andeq	r2, r0, r4, asr r0
     9b0:	00002054 	andeq	r2, r0, r4, asr r0
     9b4:	0000208e 	andeq	r2, r0, lr, lsl #1
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
		proceed menu;
     9c8:	00002090 	muleq	r0, r0, r0
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	000020bc 	strheq	r2, [r0], -ip
     9d0:	000020bc 	strheq	r2, [r0], -ip
     9d4:	0000211c 	andeq	r2, r0, ip, lsl r1
		proceed menu;
     9d8:	00000001 	andeq	r0, r0, r1
}
     9dc:	00000001 	andeq	r0, r0, r1
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
     9f8:	0000211c 	andeq	r2, r0, ip, lsl r1
     9fc:	00002184 	andeq	r2, r0, r4, lsl #3
     a00:	00002184 	andeq	r2, r0, r4, lsl #3
     a04:	000021d4 	ldrdeq	r2, [r0], -r4
     a08:	000021d4 	ldrdeq	r2, [r0], -r4
     a0c:	00002270 	andeq	r2, r0, r0, ror r2
     a10:	00002270 	andeq	r2, r0, r0, ror r2
     a14:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
     a18:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
     a1c:	000022e4 	andeq	r2, r0, r4, ror #5
     a20:	000022e4 	andeq	r2, r0, r4, ror #5
     a24:	00002320 	andeq	r2, r0, r0, lsr #6
     a28:	00000001 	andeq	r0, r0, r1
     a2c:	00000001 	andeq	r0, r0, r1
static void devinit_uart (int devnum) {
     a30:	00002320 	andeq	r2, r0, r0, lsr #6
	adddevfunc (ioreq_uart_a, devnum);
     a34:	00002322 	andeq	r2, r0, r2, lsr #6
	...
void udelay (volatile word n) {
     a40:	00002322 	andeq	r2, r0, r2, lsr #6
	while (n) {
     a44:	00002324 	andeq	r2, r0, r4, lsr #6
     a48:	00002324 	andeq	r2, r0, r4, lsr #6
}
     a4c:	00002326 	andeq	r2, r0, r6, lsr #6
	while (n--);
     a50:	00002326 	andeq	r2, r0, r6, lsr #6
     a54:	00002328 	andeq	r2, r0, r8, lsr #6
     a58:	00002328 	andeq	r2, r0, r8, lsr #6
		n--;
     a5c:	0000236c 	andeq	r2, r0, ip, ror #6
	...
void mdelay (volatile word n) {
     a68:	00000001 	andeq	r0, r0, r1
     a6c:	00000001 	andeq	r0, r0, r1
	while (n) {
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
}
     a78:	00000001 	andeq	r0, r0, r1
		udelay (999);
     a7c:	00000001 	andeq	r0, r0, r1
     a80:	00000001 	andeq	r0, r0, r1
		n--;
     a84:	00000001 	andeq	r0, r0, r1
	...
     a90:	00000001 	andeq	r0, r0, r1
void __pi_ondomain (lword d) {
     a94:	00000001 	andeq	r0, r0, r1
     a98:	00000001 	andeq	r0, r0, r1
		if (__pi_systat.effpdm > 1)
     a9c:	00000001 	andeq	r0, r0, r1
	...
	PRCMPowerDomainOn (d);
     aa8:	00000001 	andeq	r0, r0, r1
     aac:	00000001 	andeq	r0, r0, r1
     ab0:	00000001 	andeq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	00000001 	andeq	r0, r0, r1
     ab8:	00000001 	andeq	r0, r0, r1
     abc:	00000001 	andeq	r0, r0, r1
	__pi_systat.ondmns |= d;
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00000001 	andeq	r0, r0, r1
	...
void __pi_offdomain (lword d) {
     ad0:	00000001 	andeq	r0, r0, r1
     ad4:	00000001 	andeq	r0, r0, r1
	PRCMPowerDomainOff (d);
     ad8:	00000001 	andeq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	00000001 	andeq	r0, r0, r1
	...
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	00000001 	andeq	r0, r0, r1
     aec:	00000001 	andeq	r0, r0, r1
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	00000001 	andeq	r0, r0, r1
     af4:	00000001 	andeq	r0, r0, r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	00000001 	andeq	r0, r0, r1
     afc:	00000001 	andeq	r0, r0, r1
	...
}
     b08:	00000001 	andeq	r0, r0, r1
     b0c:	00000001 	andeq	r0, r0, r1
void __pi_syserror (word ec, const char *m) {
     b10:	00000001 	andeq	r0, r0, r1
	diag ("SYSERR: %x, %s", ec, m);
     b14:	00000001 	andeq	r0, r0, r1
	...
     b20:	00002378 	andeq	r2, r0, r8, ror r3
     b24:	0000237c 	andeq	r2, r0, ip, ror r3
     b28:	00002382 	andeq	r2, r0, r2, lsl #7
		all_leds_blink;
     b2c:	00002384 	andeq	r2, r0, r4, lsl #7
     b30:	00002392 	muleq	r0, r2, r3
     b34:	00002392 	muleq	r0, r2, r3
     b38:	00002394 	muleq	r0, r4, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	00002396 	muleq	r0, r6, r3
	...
     b48:	0000237e 	andeq	r2, r0, lr, ror r3
     b4c:	00002380 	andeq	r2, r0, r0, lsl #7
     b50:	00002396 	muleq	r0, r6, r3
	while (1) {
     b54:	00002398 	muleq	r0, r8, r3
	...
     b60:	00002380 	andeq	r2, r0, r0, lsl #7
void tci_run_delay_timer () {
     b64:	00002382 	andeq	r2, r0, r2, lsl #7
	setdel = __pi_mintk - __pi_old;
     b68:	00002384 	andeq	r2, r0, r4, lsl #7
     b6c:	00002386 	andeq	r2, r0, r6, lsl #7
     b70:	0000238c 	andeq	r2, r0, ip, lsl #7
     b74:	0000238c 	andeq	r2, r0, ip, lsl #7
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b80:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
     b84:	000023b8 			; <UNDEFINED> instruction: 0x000023b8
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	000023c2 	andeq	r2, r0, r2, asr #7
	sti_tim;
     b8c:	000023c2 	andeq	r2, r0, r2, asr #7
}
     b90:	000023c6 	andeq	r2, r0, r6, asr #7
     b94:	000023c8 	andeq	r2, r0, r8, asr #7
	...
     ba0:	000023c8 	andeq	r2, r0, r8, asr #7
	cli_aux;
     ba4:	000023c8 	andeq	r2, r0, r8, asr #7
     ba8:	000023ca 	andeq	r2, r0, sl, asr #7
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	000023cc 	andeq	r2, r0, ip, asr #7
	...
     bb8:	000023d8 	ldrdeq	r2, [r0], -r8
	sti_aux;
     bbc:	000023da 	ldrdeq	r2, [r0], -sl
}
     bc0:	000023dc 	ldrdeq	r2, [r0], -ip
     bc4:	000023e0 	andeq	r2, r0, r0, ror #7
	...
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	000023f8 	strdeq	r2, [r0], -r8
     bd4:	000023fa 	strdeq	r2, [r0], -sl
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	000023fe 	strdeq	r2, [r0], -lr
		if (__pi_utims [0] == 0)
     bdc:	00002400 	andeq	r2, r0, r0, lsl #8
     be0:	00002406 	andeq	r2, r0, r6, lsl #8
		if (*(__pi_utims [0])) {
     be4:	00002416 	andeq	r2, r0, r6, lsl r4
	...
		if (__pi_utims [1] == 0)
     bf0:	000023f8 	strdeq	r2, [r0], -r8
		if (*(__pi_utims [1])) {
     bf4:	000023fa 	strdeq	r2, [r0], -sl
			aux_timer_inactive = 0;
     bf8:	000023fe 	strdeq	r2, [r0], -lr
			(*(__pi_utims [1]))--;
     bfc:	00002400 	andeq	r2, r0, r0, lsl #8
		if (__pi_utims [2] == 0)
     c00:	00002406 	andeq	r2, r0, r6, lsl #8
		if (*(__pi_utims [2])) {
     c04:	00002406 	andeq	r2, r0, r6, lsl #8
			(*(__pi_utims [2]))--;
     c08:	00002408 	andeq	r2, r0, r8, lsl #8
		if (__pi_utims [3] != 0) {
     c0c:	0000240a 	andeq	r2, r0, sl, lsl #8
	...
				(*(__pi_utims [3]))--;
     c18:	0000245e 	andeq	r2, r0, lr, asr r4
	if (__pi_systat.ledsts) {
     c1c:	00002462 	andeq	r2, r0, r2, ror #8
     c20:	00002464 	andeq	r2, r0, r4, ror #8
		if (__pi_systat.ledblc++ == 0) {
     c24:	00002466 	andeq	r2, r0, r6, ror #8
	...
			if (__pi_systat.ledblk) {
     c30:	0000246a 	andeq	r2, r0, sl, ror #8
     c34:	0000246a 	andeq	r2, r0, sl, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	0000246c 	andeq	r2, r0, ip, ror #8
     c3c:	0000246e 	andeq	r2, r0, lr, ror #8
	...
     c48:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x4)
     c4c:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 0;
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00000001 	andeq	r0, r0, r1
	...
				__pi_systat.ledblc = 200;
     c60:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	00000001 	andeq	r0, r0, r1
		cli_tim;
     c68:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     c6c:	00000001 	andeq	r0, r0, r1
	...
		RISE_N_SHINE;
     c78:	00000001 	andeq	r0, r0, r1
		__pi_new += setdel;
     c7c:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     c80:	00000001 	andeq	r0, r0, r1
     c84:	00000001 	andeq	r0, r0, r1
	...
				if (__pi_systat.ledsts & 0x1)
     c90:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c94:	00000001 	andeq	r0, r0, r1
     c98:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x2)
     c9c:	00000001 	andeq	r0, r0, r1
	...
				if (__pi_systat.ledsts & 0x8)
     ca8:	00002374 	andeq	r2, r0, r4, ror r3
				__pi_systat.ledblk = 1;
     cac:	000023a8 	andeq	r2, r0, r8, lsr #7
     cb0:	000023a8 	andeq	r2, r0, r8, lsr #7
		if (aux_timer_inactive) {
     cb4:	000023d8 	ldrdeq	r2, [r0], -r8
			cli_aux;
     cb8:	000023d8 	ldrdeq	r2, [r0], -r8
     cbc:	000023f0 	strdeq	r2, [r0], -r0
     cc0:	000023f0 	strdeq	r2, [r0], -r0
     cc4:	00002444 	andeq	r2, r0, r4, asr #8
     cc8:	00002444 	andeq	r2, r0, r4, asr #8
     ccc:	00002484 	andeq	r2, r0, r4, lsl #9
     cd0:	00002484 	andeq	r2, r0, r4, lsl #9
     cd4:	000024a8 	andeq	r2, r0, r8, lsr #9
     cd8:	000024a8 	andeq	r2, r0, r8, lsr #9
     cdc:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
word tci_update_delay_ticks (Boolean force) {
     ce0:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
	cli_tim;
     ce4:	000024d0 	ldrdeq	r2, [r0], -r0
     ce8:	00000001 	andeq	r0, r0, r1
	if (setdel) {
     cec:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	00000001 	andeq	r0, r0, r1
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	00000001 	andeq	r0, r0, r1
     cf8:	00000001 	andeq	r0, r0, r1
     cfc:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	00000001 	andeq	r0, r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	00000001 	andeq	r0, r0, r1
	return NO;
     d08:	00000001 	andeq	r0, r0, r1
			setdel = 0;
     d0c:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	00000001 	andeq	r0, r0, r1
     d14:	00000001 	andeq	r0, r0, r1
}
     d18:	00000001 	andeq	r0, r0, r1
		sti_tim;
     d1c:	00000001 	andeq	r0, r0, r1
	...
		return YES;
     d28:	000024d0 	ldrdeq	r2, [r0], -r0
     d2c:	0000253c 	andeq	r2, r0, ip, lsr r5
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	0000253c 	andeq	r2, r0, ip, lsr r5
	UARTDisable (UART0_BASE);
     d3c:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
	...
	UARTConfigSetExpClk (UART0_BASE,
     d48:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
     d4c:	00002608 	andeq	r2, r0, r8, lsl #12
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d58:	00002608 	andeq	r2, r0, r8, lsl #12
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	00002668 	andeq	r2, r0, r8, ror #12
	...
	urates [0] = rate;
     d68:	0000288e 	andeq	r2, r0, lr, lsl #17
}
     d6c:	00002890 	muleq	r0, r0, r8
     d70:	000028a4 	andeq	r2, r0, r4, lsr #17
     d74:	000028a6 	andeq	r2, r0, r6, lsr #17
     d78:	000028a8 	andeq	r2, r0, r8, lsr #17
     d7c:	000028aa 	andeq	r2, r0, sl, lsr #17
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d88:	00002918 	andeq	r2, r0, r8, lsl r9
     d8c:	0000291e 	andeq	r2, r0, lr, lsl r9
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	00002922 	andeq	r2, r0, r2, lsr #18
     d94:	00002924 	andeq	r2, r0, r4, lsr #18
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	00002946 	andeq	r2, r0, r6, asr #18
     da4:	0000294c 	andeq	r2, r0, ip, asr #18
     da8:	0000294e 	andeq	r2, r0, lr, asr #18
     dac:	00002950 	andeq	r2, r0, r0, asr r9
	...
     db8:	00002954 	andeq	r2, r0, r4, asr r9
	switch (operation) {
     dbc:	00002960 	andeq	r2, r0, r0, ror #18
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc0:	00002960 	andeq	r2, r0, r0, ror #18
     dc4:	00002964 	andeq	r2, r0, r4, ror #18
     dc8:	00002966 	andeq	r2, r0, r6, ror #18
     dcc:	0000298a 	andeq	r2, r0, sl, lsl #19
	...
				*buf++ = uart_a_read;
     dd8:	00002964 	andeq	r2, r0, r4, ror #18
			while (len && uart_a_char_available) {
     ddc:	00002966 	andeq	r2, r0, r6, ror #18
     de0:	0000298a 	andeq	r2, r0, sl, lsl #19
     de4:	000029c4 	andeq	r2, r0, r4, asr #19
			if (len != operation) {
     de8:	000029c6 	andeq	r2, r0, r6, asr #19
}
     dec:	000029d8 	ldrdeq	r2, [r0], -r8
	...
			if (uart_a_char_available) {
     df8:	00002a98 	muleq	r0, r8, sl
				*buf++ = uart_a_read;
     dfc:	00002a98 	muleq	r0, r8, sl
			uart_a_disable_int;
     e00:	00002a9c 	muleq	r0, ip, sl
     e04:	00002ab6 			; <UNDEFINED> instruction: 0x00002ab6
			if (uart_a_char_available) {
     e08:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
     e0c:	00002aba 			; <UNDEFINED> instruction: 0x00002aba
				uart_a_enable_int;
     e10:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
     e14:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
				goto Redo_rx;
     e18:	00002ac2 	andeq	r2, r0, r2, asr #21
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	00002acc 	andeq	r2, r0, ip, asr #21
	...
			return -2;
     e28:	00002bde 	ldrdeq	r2, [r0], -lr
				uart_a_write (*buf);
     e2c:	00002be2 	andeq	r2, r0, r2, ror #23
     e30:	00002bfe 	strdeq	r2, [r0], -lr
			while (len && uart_a_room_in_tx) {
     e34:	00002c02 	andeq	r2, r0, r2, lsl #24
	...
			if (len != operation) {
     e40:	00002be2 	andeq	r2, r0, r2, ror #23
			uart_a_disable_int;
     e44:	00002bfe 	strdeq	r2, [r0], -lr
     e48:	00002c02 	andeq	r2, r0, r2, lsl #24
			if (uart_a_room_in_tx) {
     e4c:	00002c0a 	andeq	r2, r0, sl, lsl #24
	...
				uart_a_enable_int;
     e58:	00002d76 	andeq	r2, r0, r6, ror sp
				*buf++ = uart_a_read;
     e5c:	00002d78 	andeq	r2, r0, r8, ror sp
			if (uart_a_room_in_tx) {
     e60:	00002d7a 	andeq	r2, r0, sl, ror sp
				uart_a_write (*buf);
     e64:	00002d7e 	andeq	r2, r0, lr, ror sp
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e70:	00002d78 	andeq	r2, r0, r8, ror sp
			uart_a_enable_int;
     e74:	00002d7a 	andeq	r2, r0, sl, ror sp
     e78:	00002d7e 	andeq	r2, r0, lr, ror sp
     e7c:	00002da4 	andeq	r2, r0, r4, lsr #27
	...
				if (__pi_uart_setrate (*((word*)buf),
     e88:	00002dec 	andeq	r2, r0, ip, ror #27
     e8c:	00002dee 	andeq	r2, r0, lr, ror #27
     e90:	00002df2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
				syserror (EREQPAR, "uar");
     e94:	00002df8 	strdeq	r2, [r0], -r8
			syserror (ENOOPER, "uai");
     e98:	00002dfa 	strdeq	r2, [r0], -sl
			if (len == UART_CNTRL_GETRATE) {
     e9c:	00002e46 	andeq	r2, r0, r6, asr #28
				return 1;
     ea0:	00002e48 	andeq	r2, r0, r8, asr #28
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea4:	00002e4c 	andeq	r2, r0, ip, asr #28
			syserror (ENOOPER, "uai");
     ea8:	00002e4e 	andeq	r2, r0, lr, asr #28
     eac:	00002e5e 	andeq	r2, r0, lr, asr lr
     eb0:	00002e62 	andeq	r2, r0, r2, ror #28
     eb4:	00002e66 	andeq	r2, r0, r6, ror #28
     eb8:	00002e98 	muleq	r0, r8, lr
     ebc:	00002e9c 	muleq	r0, ip, lr
	...
     ec8:	00002ea2 	andeq	r2, r0, r2, lsr #29
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	00002ea4 	andeq	r2, r0, r4, lsr #29
void UART0IntHandler () {
     ed0:	00002ea6 	andeq	r2, r0, r6, lsr #29
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	00002ed4 	ldrdeq	r2, [r0], -r4
	...
     ee0:	00002668 	andeq	r2, r0, r8, ror #12
     ee4:	00002688 	andeq	r2, r0, r8, lsl #13
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	00002688 	andeq	r2, r0, r8, lsl #13
     eec:	00002818 	andeq	r2, r0, r8, lsl r8
		RISE_N_SHINE;
     ef0:	00002818 	andeq	r2, r0, r8, lsl r8
     ef4:	00002860 	andeq	r2, r0, r0, ror #16
		i_trigger (devevent (UART_A, READ));
     ef8:	00002860 	andeq	r2, r0, r0, ror #16
     efc:	00002884 	andeq	r2, r0, r4, lsl #17
     f00:	00002884 	andeq	r2, r0, r4, lsl #17
     f04:	000028e0 	andeq	r2, r0, r0, ror #17
     f08:	000028e0 	andeq	r2, r0, r0, ror #17
     f0c:	00002918 	andeq	r2, r0, r8, lsl r9
     f10:	00002918 	andeq	r2, r0, r8, lsl r9
     f14:	00002a98 	muleq	r0, r8, sl
     f18:	00002a98 	muleq	r0, r8, sl
     f1c:	00002b68 	andeq	r2, r0, r8, ror #22
     f20:	00002b68 	andeq	r2, r0, r8, ror #22
     f24:	00002d58 	andeq	r2, r0, r8, asr sp
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	00002d58 	andeq	r2, r0, r8, asr sp
     f2c:	00002dc8 	andeq	r2, r0, r8, asr #27
     f30:	00002dc8 	andeq	r2, r0, r8, asr #27
		i_trigger (devevent (UART_A, WRITE));
     f34:	00002f3c 	andeq	r2, r0, ip, lsr pc
	...
		RISE_N_SHINE;
     f40:	00002f3c 	andeq	r2, r0, ip, lsr pc
     f44:	00002f60 	andeq	r2, r0, r0, ror #30
     f48:	00002f60 	andeq	r2, r0, r0, ror #30
		i_trigger (devevent (UART_A, WRITE));
     f4c:	00002f84 	andeq	r2, r0, r4, lsl #31
     f50:	00002f84 	andeq	r2, r0, r4, lsl #31
     f54:	00002f8c 	andeq	r2, r0, ip, lsl #31
     f58:	00002f8c 	andeq	r2, r0, ip, lsl #31
     f5c:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     f60:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     f64:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     f68:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     f6c:	00002fdc 	ldrdeq	r2, [r0], -ip
	...
}
     f78:	00002fea 	andeq	r2, r0, sl, ror #31
     f7c:	00002fea 	andeq	r2, r0, sl, ror #31
     f80:	00002ff0 	strdeq	r2, [r0], -r0
     f84:	0000304c 	andeq	r3, r0, ip, asr #32
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	00002fdc 	ldrdeq	r2, [r0], -ip
     f94:	0000304c 	andeq	r3, r0, ip, asr #32
	...
     fa0:	00003060 	andeq	r3, r0, r0, rrx
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	00003144 	andeq	r3, r0, r4, asr #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	0000314a 	andeq	r3, r0, sl, asr #2
     fac:	0000314e 	andeq	r3, r0, lr, asr #2
     fb0:	00003154 	andeq	r3, r0, r4, asr r1
     fb4:	00003168 	andeq	r3, r0, r8, ror #2
	...
}
     fc0:	0000304c 	andeq	r3, r0, ip, asr #32
     fc4:	00003168 	andeq	r3, r0, r8, ror #2
	...
void __pinlist_setirq (int val) {
     fd0:	00003194 	muleq	r0, r4, r1
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	00003196 	muleq	r0, r6, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	00003264 	andeq	r3, r0, r4, ror #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	00003288 	andeq	r3, r0, r8, lsl #5
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	0000328a 	andeq	r3, r0, sl, lsl #5
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	000032d2 	ldrdeq	r3, [r0], -r2
     fe8:	000032fc 	strdeq	r3, [r0], -ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	000032fe 	strdeq	r3, [r0], -lr
	...
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	00003196 	muleq	r0, r6, r1
}
     ffc:	00003198 	muleq	r0, r8, r1
    1000:	0000323a 	andeq	r3, r0, sl, lsr r2
    1004:	00003264 	andeq	r3, r0, r4, ror #4
    1008:	00003288 	andeq	r3, r0, r8, lsl #5
void GPIOIntHandler () {
    100c:	0000328a 	andeq	r3, r0, sl, lsl #5
	...
	buttons_disable ();
    1018:	000031d6 	ldrdeq	r3, [r0], -r6
    101c:	000031de 	ldrdeq	r3, [r0], -lr
	i_trigger ((aword)&__button_list);
    1020:	00003382 	andeq	r3, r0, r2, lsl #7
    1024:	0000338e 	andeq	r3, r0, lr, lsl #7
	...
    1030:	000032dc 	ldrdeq	r3, [r0], -ip
    1034:	000032fc 	strdeq	r3, [r0], -ip
    1038:	000032fe 	strdeq	r3, [r0], -lr
    103c:	00003342 	andeq	r3, r0, r2, asr #6
	...
    1048:	00003168 	andeq	r3, r0, r8, ror #2
	RISE_N_SHINE;
    104c:	00003188 	andeq	r3, r0, r8, lsl #3
    1050:	00003188 	andeq	r3, r0, r8, lsl #3
    1054:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
if (pin_sensor_int) {
    1058:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
    105c:	00003408 	andeq	r3, r0, r8, lsl #8
	...
	i_trigger ((aword)(&__input_pins));
    1068:	0000341c 	andeq	r3, r0, ip, lsl r4
    106c:	00003420 	andeq	r3, r0, r0, lsr #8
    1070:	000036fa 	strdeq	r3, [r0], -sl
    1074:	00003742 	andeq	r3, r0, r2, asr #14
	...
    1080:	00003420 	andeq	r3, r0, r0, lsr #8
    1084:	00003426 	andeq	r3, r0, r6, lsr #8
    1088:	0000345e 	andeq	r3, r0, lr, asr r4
	__pinsen_disable_and_clear;
    108c:	000034ca 	andeq	r3, r0, sl, asr #9
	RISE_N_SHINE;
    1090:	0000375e 	andeq	r3, r0, lr, asr r7
    1094:	0000377e 	andeq	r3, r0, lr, ror r7
	...
}
    10a0:	00003582 	andeq	r3, r0, r2, lsl #11
    10a4:	000035fc 	strdeq	r3, [r0], -ip
    10a8:	00003786 	andeq	r3, r0, r6, lsl #15
    10ac:	0000378e 	andeq	r3, r0, lr, lsl #15
	...
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	00003614 	andeq	r3, r0, r4, lsl r6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	0000366a 	andeq	r3, r0, sl, ror #12
    10c0:	000036e0 	andeq	r3, r0, r0, ror #13
    10c4:	000036fa 	strdeq	r3, [r0], -sl
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	00003670 	andeq	r3, r0, r0, ror r6
    10d4:	000036e0 	andeq	r3, r0, r0, ror #13
    10d8:	00003742 	andeq	r3, r0, r2, asr #14
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	0000374a 	andeq	r3, r0, sl, asr #14
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	0000378e 	andeq	r3, r0, lr, lsl #15
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	00003798 	muleq	r0, r8, r7
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	00003408 	andeq	r3, r0, r8, lsl #8
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	00003798 	muleq	r0, r8, r7
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	00003798 	muleq	r0, r8, r7
    1104:	000037c0 	andeq	r3, r0, r0, asr #15
    1108:	00000001 	andeq	r0, r0, r1
    110c:	00000001 	andeq	r0, r0, r1
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1118:	000037c0 	andeq	r3, r0, r0, asr #15
		if (port_confs [i] & 0x40)
    111c:	000037f0 	strdeq	r3, [r0], -r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	000037f0 	strdeq	r3, [r0], -r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112c:	00003810 	andeq	r3, r0, r0, lsl r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1130:	00003810 	andeq	r3, r0, r0, lsl r8
	all_leds_blink;
    1134:	00003828 	andeq	r3, r0, r8, lsr #16
	...
    1140:	00003828 	andeq	r3, r0, r8, lsr #16
    1144:	00003830 	andeq	r3, r0, r0, lsr r8
    1148:	00000001 	andeq	r0, r0, r1
    114c:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1150:	00003830 	andeq	r3, r0, r0, lsr r8
    1154:	00003838 	andeq	r3, r0, r8, lsr r8
    1158:	00000001 	andeq	r0, r0, r1
    115c:	00000001 	andeq	r0, r0, r1
    1160:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_RTC_COMB);
    1170:	0000389a 	muleq	r0, sl, r8
    1174:	000038aa 	andeq	r3, r0, sl, lsr #17
    1178:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
	__pi_malloc_init ();
    117c:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
	...
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	00003838 	andeq	r3, r0, r8, lsr r8
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	00003894 	muleq	r0, r4, r8
    1190:	00003894 	muleq	r0, r4, r8
    1194:	000038c0 	andeq	r3, r0, r0, asr #17
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	00000001 	andeq	r0, r0, r1
    119c:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	000038c0 	andeq	r3, r0, r0, asr #17
    11a4:	000038d8 	ldrdeq	r3, [r0], -r8
    11a8:	000038d8 	ldrdeq	r3, [r0], -r8
	urates [0] = UART_RATE / 100;
    11ac:	00003938 	andeq	r3, r0, r8, lsr r9
    11b0:	00003938 	andeq	r3, r0, r8, lsr r9
	reinit_uart ();
    11b4:	0000396c 	andeq	r3, r0, ip, ror #18
	EXTRA_INITIALIZERS;
    11b8:	00000001 	andeq	r0, r0, r1
    11bc:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11c0:	00000001 	andeq	r0, r0, r1
    11c4:	00000001 	andeq	r0, r0, r1
    11c8:	00000001 	andeq	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	00000001 	andeq	r0, r0, r1
    11d0:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	00000001 	andeq	r0, r0, r1
    11e4:	00000001 	andeq	r0, r0, r1
    11e8:	0000396c 	andeq	r3, r0, ip, ror #18
	IntEnable (INT_UART0_COMB);
    11ec:	00003994 	muleq	r0, r4, r9
    11f0:	00003994 	muleq	r0, r4, r9
}
    11f4:	000039e0 	andeq	r3, r0, r0, ror #19
	tci_run_auxiliary_timer ();
    11f8:	000039e0 	andeq	r3, r0, r0, ror #19
		diag ("");
    11fc:	00003b30 	andeq	r3, r0, r0, lsr fp
    1200:	00003b30 	andeq	r3, r0, r0, lsr fp
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	00003c48 	andeq	r3, r0, r8, asr #24
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	00003c48 	andeq	r3, r0, r8, asr #24
		diag ("Leftover RAM: %d bytes",
    120c:	00003c68 	andeq	r3, r0, r8, ror #24
    1210:	00000001 	andeq	r0, r0, r1
    1214:	00000001 	andeq	r0, r0, r1
    1218:	00003c68 	andeq	r3, r0, r8, ror #24
    121c:	00003c84 	andeq	r3, r0, r4, lsl #25
	...
    1228:	00003c84 	andeq	r3, r0, r4, lsl #25
    122c:	00003d58 	andeq	r3, r0, r8, asr sp
    1230:	00003d58 	andeq	r3, r0, r8, asr sp
    1234:	00003dfc 	strdeq	r3, [r0], -ip
	...
    1240:	00003e0a 	andeq	r3, r0, sl, lsl #28
    1244:	00003e0c 	andeq	r3, r0, ip, lsl #28
    1248:	00003e10 	andeq	r3, r0, r0, lsl lr
    124c:	00003e14 	andeq	r3, r0, r4, lsl lr
	...
    1258:	00004118 	andeq	r4, r0, r8, lsl r1
    125c:	0000411a 	andeq	r4, r0, sl, lsl r1
    1260:	0000411c 	andeq	r4, r0, ip, lsl r1
    1264:	0000411e 	andeq	r4, r0, lr, lsl r1
	...
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1270:	00003dfc 	strdeq	r3, [r0], -ip
    1274:	00003e78 	andeq	r3, r0, r8, ror lr
    1278:	00003e78 	andeq	r3, r0, r8, ror lr
    127c:	00003f24 	andeq	r3, r0, r4, lsr #30
    1280:	00003f24 	andeq	r3, r0, r4, lsr #30
    1284:	00003f80 	andeq	r3, r0, r0, lsl #31
}
    1288:	00003f80 	andeq	r3, r0, r0, lsl #31
__attribute__ ((noreturn)) void __pi_release () {
    128c:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    1290:	00000001 	andeq	r0, r0, r1
    1294:	00000001 	andeq	r0, r0, r1
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
	check_stack_overflow;
    129c:	00003fa8 	andeq	r3, r0, r8, lsr #31
    12a0:	00003fa8 	andeq	r3, r0, r8, lsr #31
    12a4:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
	update_n_wake (MAX_WORD, NO);
    12a8:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
    12ac:	00004020 	andeq	r4, r0, r0, lsr #32
    12b0:	00004020 	andeq	r4, r0, r0, lsr #32
	for_all_tasks (__pi_curr) {
    12b4:	00004034 	andeq	r4, r0, r4, lsr r0
    12b8:	00004034 	andeq	r4, r0, r4, lsr r0
    12bc:	00004048 	andeq	r4, r0, r8, asr #32
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	00004048 	andeq	r4, r0, r8, asr #32
	__SLEEP;
    12c4:	0000405c 	andeq	r4, r0, ip, asr r0
    12c8:	0000405c 	andeq	r4, r0, ip, asr r0
    12cc:	00004084 	andeq	r4, r0, r4, lsl #1
    12d0:	00004084 	andeq	r4, r0, r4, lsl #1
	system_event_count ++;
    12d4:	00004094 	muleq	r0, r4, r0
    12d8:	00004094 	muleq	r0, r4, r0
	switch (__pi_systat.effpdm) {
    12dc:	000040c0 	andeq	r4, r0, r0, asr #1
    12e0:	000040c0 	andeq	r4, r0, r0, asr #1
    12e4:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    12e8:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
			__WFI ();
    12ec:	000040e8 	andeq	r4, r0, r8, ror #1
    12f0:	000040e8 	andeq	r4, r0, r8, ror #1
    12f4:	000041f8 	strdeq	r4, [r0], -r8
	check_stack_overflow;
    12f8:	000041f8 	strdeq	r4, [r0], -r8
    12fc:	0000425c 	andeq	r4, r0, ip, asr r2
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	0000425c 	andeq	r4, r0, ip, asr r2
    1304:	00004284 	andeq	r4, r0, r4, lsl #5
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	00004284 	andeq	r4, r0, r4, lsl #5
			goto Redo;
    130c:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	00000001 	andeq	r0, r0, r1
    131c:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	00000001 	andeq	r0, r0, r1
    1324:	00000001 	andeq	r0, r0, r1
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1330:	0000444a 	andeq	r4, r0, sl, asr #8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	0000444c 	andeq	r4, r0, ip, asr #8
    1338:	0000444e 	andeq	r4, r0, lr, asr #8
			__WFI ();
    133c:	00004452 	andeq	r4, r0, r2, asr r4
	...
}
    1348:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	00000001 	andeq	r0, r0, r1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	000045f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1358:	000045f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135c:	00004654 	andeq	r4, r0, r4, asr r6
    1360:	00000001 	andeq	r0, r0, r1
    1364:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	00004654 	andeq	r4, r0, r4, asr r6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	0000466c 	andeq	r4, r0, ip, ror #12
	...
    1378:	000046ba 			; <UNDEFINED> instruction: 0x000046ba
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	000046be 			; <UNDEFINED> instruction: 0x000046be
    1380:	000046c4 	andeq	r4, r0, r4, asr #13
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	000046c6 	andeq	r4, r0, r6, asr #13
	...
    1390:	000046be 			; <UNDEFINED> instruction: 0x000046be
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1394:	000046c4 	andeq	r4, r0, r4, asr #13
    1398:	000046c6 	andeq	r4, r0, r6, asr #13
			SysCtrlSetRechargeBeforePowerDown
    139c:	000046ce 	andeq	r4, r0, lr, asr #13
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a8:	00000001 	andeq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	00000001 	andeq	r0, r0, r1
    13b0:	00000001 	andeq	r0, r0, r1
    13b4:	00000001 	andeq	r0, r0, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	0000466c 	andeq	r4, r0, ip, ror #12
    13bc:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	00000001 	andeq	r0, r0, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	00000001 	andeq	r0, r0, r1
    13c8:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
    13cc:	00004724 	andeq	r4, r0, r4, lsr #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	00004724 	andeq	r4, r0, r4, lsr #14
			while (!(AONWUCPowerStatusGet () &
    13d4:	0000473a 	andeq	r4, r0, sl, lsr r7
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13e0:	0000473c 	andeq	r4, r0, ip, lsr r7
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	00004764 	andeq	r4, r0, r4, ror #14
    13e8:	00004764 	andeq	r4, r0, r4, ror #14
    13ec:	0000476c 	andeq	r4, r0, ip, ror #14
    13f0:	00000001 	andeq	r0, r0, r1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	00000001 	andeq	r0, r0, r1
    13f8:	00000001 	andeq	r0, r0, r1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1400:	00000001 	andeq	r0, r0, r1
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	00000001 	andeq	r0, r0, r1
			reinit_uart ();
    1408:	00000001 	andeq	r0, r0, r1
    140c:	00000001 	andeq	r0, r0, r1
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	00000004 	andeq	r0, r0, r4
    1424:	00000006 	andeq	r0, r0, r6
    1428:	0000000a 	andeq	r0, r0, sl
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	00000026 	andeq	r0, r0, r6, lsr #32
    1430:	00000028 	andeq	r0, r0, r8, lsr #32
    1434:	00000038 	andeq	r0, r0, r8, lsr r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	0000003e 	andeq	r0, r0, lr, lsr r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	00000040 	andeq	r0, r0, r0, asr #32
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	00000042 	andeq	r0, r0, r2, asr #32
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000cb5 			; <UNDEFINED> instruction: 0x00000cb5
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      54:	2f62696c 	svccs	0x0062696c
		release;
      58:	00737973 	rsbseq	r7, r3, r3, ror r9
      5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa8 <_estack+0xdfffafa8>
			nq++;
      60:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
      68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      6c:	6f746b73 	svcvs	0x00746b73
      70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      7c:	2f534f43 	svccs	0x00534f43
      80:	4f636950 	svcmi	0x00636950
      84:	43432f53 	movtmi	r2, #16211	; 0x3f53
      88:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      8c:	6f682f00 	svcvs	0x00682f00
	if (!button_still_pressed (__button_list [pbutton]))
      90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      98:	442f6e65 	strtmi	r6, [pc], #-3685	; a0 <g_pfnVectors+0xa0>
	if (baction == NULL)
      9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      a0:	4f2f706f 	svcmi	0x002f706f
	(*baction) (pbutton);
      a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
endthread
      a8:	502f5445 	eorpl	r5, pc, r5, asr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	534f4349 	movtpl	r4, #62281	; 0xf349
      b0:	6369502f 	cmnvs	r9, #47	; 0x2f
endthread
      b4:	2f00534f 	svccs	0x0000534f
      b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
fsm sender(struct ResponseMessage *message) {
      c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
      d4:	4349502f 	movtmi	r5, #36911	; 0x902f
      d8:	502f534f 	eorpl	r5, pc, pc, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	534f6369 	movtpl	r6, #62313	; 0xf369
      e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      e4:	562f7362 	strtpl	r7, [pc], -r2, ror #6
      e8:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
		packet[0] = NETWORK_ID;
      ec:	6f682f00 	svcvs	0x00682f00
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		*p = message->tpe;p++;
      f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 100 <_Min_Stack_Size>
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		*p = message->sender_id;p++;
     100:	4f2f706f 	svcmi	0x002f706f
		*p = message->receiver_id;p++;
     104:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		switch(message->tpe) {
     108:	502f5445 	eorpl	r5, pc, r5, asr #8
     10c:	534f4349 	movtpl	r4, #62281	; 0xf349
     110:	6369502f 	cmnvs	r9, #47	; 0x2f
		tcv_endp(packet);
     114:	6b2f534f 	blvs	bd4e58 <__ccfg+0xbb4eb0>
     118:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     120:	2f656d6f 	svccs	0x00656d6f
}
     124:	70657473 	rsbvc	r7, r5, r3, ror r4
		finish;
     128:	2f6e6568 	svccs	0x006e6568
     12c:	6b736544 	blvs	1cd9644 <__ccfg+0x1cb969c>
				*p = message->status;p++;
     130:	2f706f74 	svccs	0x00706f74
     134:	4f534c4f 	svcmi	0x00534c4f
				strncpy(p, message->record, sizeof(message->record));
     138:	2f54454e 	svccs	0x0054454e
				*p = message->padding;p++;
     13c:	4f434950 	svcmi	0x00434950
				strncpy(p, message->record, sizeof(message->record));
     140:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				strncpy(p, message->record, sizeof(message->record));
     144:	2f534f63 	svccs	0x00534f63
     148:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
				strncpy(p, message->record, sizeof(message->record));
     14c:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
				*p = message->record_index;p++;
     150:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
				*p = message->padding;
     154:	2e006c6c 	cdpcs	12, 0, cr6, cr0, cr12, {3}
				break;
     158:	6f682f00 	svcvs	0x00682f00
     15c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
     160:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     164:	442f6e65 	strtmi	r6, [pc], #-3685	; 16c <init_node>
     168:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
bool init_node(struct Node* node){
     16c:	4f2f706f 	svcmi	0x002f706f
    node->id  = 0;                  // default id value 0
     170:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    node->index = 0;                // default entry count 0
     174:	502f5445 	eorpl	r5, pc, r5, asr #8
    node->data_base.item_count = 0; // default no items in array
     178:	534f4349 	movtpl	r4, #62281	; 0xf349
    DEBUG_PRINT("Error initializing node...\n");
     17c:	6369502f 	cmnvs	r9, #47	; 0x2f
     180:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
};
     184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     188:	43432f58 	movtmi	r2, #16216	; 0x3f58
uint8_t generate_request_num(void){
     18c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    return (uint8_t) (rand() % 255);
     190:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
     194:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     198:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
}
     19c:	00006269 	andeq	r6, r0, r9, ror #4
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
     1a8:	74730000 	ldrbtvc	r0, [r3], #-0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	66656464 	strbtvs	r6, [r5], -r4, ror #8
};
     1b0:	0100682e 	tsteq	r0, lr, lsr #16
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	745f0000 	ldrbvc	r0, [pc], #-0	; 1bc <delete_record+0x8>
     1b8:	73657079 	cmnvc	r5, #121	; 0x79
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1c0:	65720000 	ldrbvs	r0, [r2, #-0]!
     1c4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
        node->data_base.item_count -= 1;
     1c8:	00020068 	andeq	r0, r2, r8, rrx
};
     1cc:	636f6c00 	cmnvs	pc, #0, 24
fsm receiver(struct Node* node_db) {
     1d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     1d4:	73000002 	movwvc	r0, #2
     1d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     1dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     1e0:	73000001 	movwvc	r0, #1
     1e4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     1e8:	00682e67 	rsbeq	r2, r8, r7, ror #28
     1ec:	61000001 	tstvs	r0, r1
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
     1f4:	00030068 	andeq	r0, r3, r8, rrx
     1f8:	63616d00 	cmnvs	r1, #0, 26
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	00682e68 	rsbeq	r2, r8, r8, ror #28
     200:	70000003 	andvc	r0, r0, r3
     204:	5f736e69 	svcpl	0x00736e69
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
		switch (tpe){
     20c:	00030068 	andeq	r0, r3, r8, rrx
     210:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
     214:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     21c:	0300682e 	movweq	r6, #2094	; 0x82e
     220:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     224:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	00040068 	andeq	r0, r4, r8, rrx
     22c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     234:	00682e73 	rsbeq	r2, r8, r3, ror lr
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	6b000005 	blvs	254 <receiver+0x84>
     23c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     244:	70000006 	andvc	r0, r0, r6
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	5f67756c 	svcpl	0x0067756c
     24c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
				if (discovery_request_message->gid == node_db->gid){
     250:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     254:	65680000 	strbvs	r0, [r8, #-0]!
					response_message_0->gid = discovery_request_message->gid;
     258:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	7070682e 	rsbsvc	r6, r0, lr, lsr #16
					response_message_0->request_number = discovery_request_message->request_number;
     260:	00000800 	andeq	r0, r0, r0, lsl #16
					response_message_0->sender_id = node_db->id;
     264:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
					call sender(response_message_0, done_case);
     26c:	00003e6e 	andeq	r3, r0, lr, ror #28
     270:	6f610000 	svcvs	0x00610000
     274:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
     278:	00682e63 	rsbeq	r2, r8, r3, ror #28
     27c:	00000009 	andeq	r0, r0, r9
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	01d50300 	bicseq	r0, r5, r0, lsl #6
     28c:	011e0501 	tsteq	lr, r1, lsl #10
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     298:	1305206e 	movwne	r2, #20590	; 0x506e
     29c:	4a360306 	bmi	d80ebc <__ccfg+0xd60f14>
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	01060105 	tsteq	r6, r5, lsl #2
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	2e4a0365 	cdpcs	3, 4, cr0, cr10, cr5, {3}
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
     2bc:	21060205 	tstcs	r6, r5, lsl #4
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
     2cc:	0a052306 	beq	148eec <__ccfg+0x128f44>
					node_db->index+=1;
     2d0:	2406051c 	strcs	r0, [r6], #-1308	; 0xfffffae4
		tcv_endp(incoming_packet);
     2d4:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
     2d8:	0f052e06 	svceq	0x00052e06
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	030a0521 	movweq	r0, #42273	; 0xa521
     2e0:	0305207a 	movweq	r2, #20602	; 0x507a
		proceed receiving;
     2e4:	14132106 	ldrne	r2, [r3], #-262	; 0xfffffefa
     2e8:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ec:	15051303 	strne	r1, [r5, #-771]	; 0xfffffcfd
     2f0:	13030501 	movwne	r0, #13569	; 0x3501
		proceed receiving;
     2f4:	01060605 	tsteq	r6, r5, lsl #12
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	20062005 	andcs	r2, r6, r5
     2fc:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
     300:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     304:	1b052006 	blne	148324 <__ccfg+0x12837c>
     308:	03052006 	movweq	r2, #20486	; 0x5006
		proceed receiving;
     30c:	060f0513 			; <UNDEFINED> instruction: 0x060f0513
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	20060501 	andcs	r0, r6, r1, lsl #10
     314:	20061d05 	andcs	r1, r6, r5, lsl #26
     318:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
     31c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
		proceed receiving;
     320:	1f030603 	svcne	0x00030603
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	054c4066 	strbeq	r4, [ip, #-102]	; 0xffffff9a
     328:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
     32c:	05052d03 	streq	r2, [r5, #-3331]	; 0xfffff2fd
     330:	586e0306 	stmdapl	lr!, {r1, r2, r8, r9}^
		proceed receiving;
     334:	01061105 	tsteq	r6, r5, lsl #2
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	05230505 	streq	r0, [r3, #-1285]!	; 0xfffffafb
     33c:	1a051d08 	bne	147764 <__ccfg+0x1277bc>
     340:	05052006 	streq	r2, [r5, #-6]
     344:	06110513 			; <UNDEFINED> instruction: 0x06110513
		proceed receiving;
     348:	22050501 	andcs	r0, r5, #4194304	; 0x400000
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	052c0805 	streq	r0, [ip, #-2053]!	; 0xfffff7fb
     350:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
		proceed receiving;
     354:	6f031405 	svcvs	0x00031405
}
     358:	1103062e 	tstne	r3, lr, lsr #12
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	032f064a 			; <UNDEFINED> instruction: 0x032f064a
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	11052075 	tstne	r5, r5, ror r0
     364:	08050106 	stmdaeq	r5, {r1, r2, r8}
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     368:	06200520 	strteq	r0, [r0], -r0, lsr #10
     36c:	13050520 	movwne	r0, #21792	; 0x5520
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     370:	01061105 	tsteq	r6, r5, lsl #2
     374:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     378:	02210605 	eoreq	r0, r1, #5242880	; 0x500000
     37c:	0101000a 	tsteq	r1, sl
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     384:	00016c02 	andeq	r6, r1, r2, lsl #24
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	01100300 	tsteq	r0, r0, lsl #6
     38c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	05110621 	ldreq	r0, [r1, #-1569]	; 0xfffff9df
     394:	0505210e 	streq	r2, [r5, #-270]	; 0xfffffef2
     398:	0f052f06 	svceq	0x00052f06
     39c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		strncpy(response_message->record, rec, 20);
     3a0:	11052106 	tstne	r5, r6, lsl #2
     3a4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
					call sender(response_message_4, done_case);
     3a8:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b0:	15330605 	ldrne	r0, [r3, #-1541]!	; 0xfffff9fb
     3b4:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
     3b8:	00050213 	andeq	r0, r5, r3, lsl r2
     3bc:	2f050101 	svccs	0x00050101
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	00020500 	andeq	r0, r2, r0, lsl #10
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	03000000 	movweq	r0, #0
     3c8:	05050121 	streq	r0, [r5, #-289]	; 0xfffffedf
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
     3d0:	06050501 	streq	r0, [r5], -r1, lsl #10
     3d4:	06010521 	streq	r0, [r1], -r1, lsr #10
     3d8:	00020213 	andeq	r0, r2, r3, lsl r2
     3dc:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
     3e0:	00020500 	andeq	r0, r2, r0, lsl #10
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	03000000 	movweq	r0, #0
     3e8:	05050126 	streq	r0, [r5, #-294]	; 0xfffffeda
     3ec:	060f0513 			; <UNDEFINED> instruction: 0x060f0513
    return node->data_base.item_array[index];
     3f0:	06050501 	streq	r0, [r5], -r1, lsl #10
     3f4:	06010521 	streq	r0, [r1], -r1, lsr #10
     3f8:	00020213 	andeq	r0, r2, r3, lsl r2
     3fc:	3e050101 	adfccs	f0, f5, f1
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	00020500 	andeq	r0, r2, r0, lsl #10
    return node->data_base.item_array[index];
     404:	03000000 	movweq	r0, #0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	0505012c 	streq	r0, [r5, #-300]	; 0xfffffed4
     40c:	06110513 			; <UNDEFINED> instruction: 0x06110513
     410:	06050501 	streq	r0, [r5], -r1, lsl #10
		strncpy(response_message->record, rec, 20);
     414:	0601052f 	streq	r0, [r1], -pc, lsr #10
     418:	00020213 	andeq	r0, r2, r3, lsl r2
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
     420:	00020500 	andeq	r0, r2, r0, lsl #10
     424:	03000000 	movweq	r0, #0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	02050133 	andeq	r0, r5, #-1073741812	; 0xc000000c
     42c:	01070513 	tsteq	r7, r3, lsl r5
     430:	05011005 	streq	r1, [r1, #-5]
     434:	05130613 	ldreq	r0, [r3, #-1555]	; 0xfffff9ed
				if(!response_flag){
     438:	05580603 	ldrbeq	r0, [r8, #-1539]	; 0xfffff9fd
     43c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
					response_flag=1;
     440:	052d0616 	streq	r0, [sp, #-1558]!	; 0xfffff9ea
					trigger(&response_flag);
     444:	02050110 	andeq	r0, r5, #16, 2
				switch(response_message_5->status){
     448:	01050106 	tsteq	r5, r6, lsl #2
     44c:	00010231 	andeq	r0, r1, r1, lsr r2
     450:	23050101 	movwcs	r0, #20737	; 0x5101
     454:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     458:	03000001 	movweq	r0, #1
     45c:	0505013a 	streq	r0, [r5, #-314]	; 0xfffffec6
     460:	06230513 			; <UNDEFINED> instruction: 0x06230513
     464:	21170511 	tstcs	r7, r1, lsl r5
     468:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
     46c:	02024b01 	andeq	r4, r2, #1024	; 0x400
     470:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     474:	02050048 	andeq	r0, r5, #72	; 0x48
     478:	00000000 	andeq	r0, r0, r0
     47c:	05013f03 	streq	r3, [r1, #-3843]	; 0xfffff0fd
     480:	05151505 	ldreq	r1, [r5, #-1285]	; 0xfffffafb
     484:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     488:	2e170301 	cdpcs	3, 1, cr0, cr7, cr1, {0}
     48c:	01000402 	tsteq	r0, r2, lsl #8
     490:	00320501 	eorseq	r0, r2, r1, lsl #10
     494:	019e0205 	orrseq	r0, lr, r5, lsl #4
     498:	df030000 	svcle	0x00030000
     49c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
     4a0:	15090514 	strne	r0, [r9, #-1300]	; 0xfffffaec
     4a4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     4a8:	1d050119 	stfnes	f0, [r5, #-100]	; 0xffffff9c
						if (response_checker[0] == response_message_5->request_number){
     4ac:	0d051306 	stceq	3, cr1, [r5, #-24]	; 0xffffffe8
     4b0:	1d055806 	stcne	8, cr5, [r5, #-24]	; 0xffffffe8
     4b4:	21050106 	tstcs	r5, r6, lsl #2
							switch(response_checker[1]){
     4b8:	19052d06 	stmdbne	r5, {r1, r2, r8, sl, fp, sp}
     4bc:	06090501 	streq	r0, [r9], -r1, lsl #10
     4c0:	060a0501 	streq	r0, [sl], -r1, lsl #10
     4c4:	13090530 	movwne	r0, #38192	; 0x9530
									proceed response_1_create;
     4c8:	17060105 	strne	r0, [r6, -r5, lsl #2]
						proceed response_2;
     4cc:	01000202 	tsteq	r0, r2, lsl #4
									proceed response_1_delete;
     4d0:	00340501 	eorseq	r0, r4, r1, lsl #10
									proceed response_1_retrieve;
     4d4:	01b40205 			; <UNDEFINED> instruction: 0x01b40205
						proceed response_2;
     4d8:	ef030000 	svc	0x00030000
						proceed response_3;
     4dc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
						proceed response_4;
     4e0:	06180515 			; <UNDEFINED> instruction: 0x06180515
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
     4e8:	24060905 	strcs	r0, [r6], #-2309	; 0xfffff6fb
}
     4ec:	01063905 	tsteq	r6, r5, lsl #18
     4f0:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     4f4:	09051e39 	stmdbeq	r5, {r0, r3, r4, r5, r9, sl, fp, ip}
     4f8:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
bool delete_all(struct Node *node){
     4fc:	09050106 	stmdbeq	r5, {r1, r2, r8}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	06050106 	streq	r0, [r5], -r6, lsl #2
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	13060515 	movwne	r0, #25877	; 0x6515
            node->data_base.item_array[i].timestamp = 0;
     510:	15060105 	strne	r0, [r6, #-261]	; 0xfffffefb
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	01000202 	tsteq	r0, r2, lsl #4
    node->data_base.item_count = 0;
     518:	001e0501 	andseq	r0, lr, r1, lsl #10
}
     51c:	01d00205 	bicseq	r0, r0, r5, lsl #4
        return true;
     520:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
fsm root {
     524:	20050102 	andcs	r0, r5, r2, lsl #2
     528:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
     52c:	20510501 	subscs	r0, r1, r1, lsl #10
     530:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
     534:	5a052051 	bpl	148680 <__ccfg+0x1286d8>
     538:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
     53c:	0513149f 	ldreq	r1, [r3, #-1183]	; 0xfffffb61
     540:	15051603 	strne	r1, [r5, #-1539]	; 0xfffff9fd
     544:	13050106 	movwne	r0, #20742	; 0x5106
     548:	06030558 			; <UNDEFINED> instruction: 0x06030558
     54c:	18051331 	stmdane	r5, {r0, r4, r5, r8, r9, ip}
     550:	03050106 	movweq	r0, #20742	; 0x5106
     554:	05148406 	ldreq	r8, [r4, #-1030]	; 0xfffffbfa
     558:	03050104 	movweq	r0, #20740	; 0x5104
     55c:	031c0514 	tsteq	ip, #20, 10	; 0x5000000
     560:	0505c80e 	streq	ip, [r5, #-2062]	; 0xfffff7f2
     564:	72051414 	andvc	r1, r5, #20, 8	; 0x14000000
     568:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     56c:	4b4b2306 	blmi	12c918c <__ccfg+0x12a91e4>
     570:	054d4b4b 	strbeq	r4, [sp, #-2891]	; 0xfffff4b5
     574:	05010622 	streq	r0, [r1, #-1570]	; 0xfffff9de
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	06052008 	streq	r2, [r5], -r8
     57c:	1e053d06 	cdpne	13, 0, cr3, cr5, cr6, {0}
     580:	06050106 	streq	r0, [r5], -r6, lsl #2
		init_node(node_db);
     584:	1e052f06 	cdpne	15, 0, cr2, cr5, cr6, {0}
		phys_cc1350(0, MAX_PKT_LEN);
     588:	06050106 	streq	r0, [r5], -r6, lsl #2
     58c:	44052f06 	strmi	r2, [r5], #-3846	; 0xfffff0fa
		tcv_plug (0, &plug_null);
     590:	29050106 	stmdbcs	r5, {r1, r2, r8}
     594:	06060520 	streq	r0, [r6], -r0, lsr #10
		sfd = tcv_open (WNONE, 0, 0);
     598:	062d0521 	strteq	r0, [sp], -r1, lsr #10
     59c:	20240501 	eorcs	r0, r4, r1, lsl #10
     5a0:	21060605 	tstcs	r6, r5, lsl #12
     5a4:	01064105 	tsteq	r6, r5, lsl #2
     5a8:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
			diag("Cannot open tcv interface");
     5ac:	05220606 	streq	r0, [r2, #-1542]!	; 0xfffff9fa
     5b0:	0f05010b 	svceq	0x0005010b
			halt();
     5b4:	0e050106 	adfeqs	f0, f5, f6
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b8:	06590566 	ldrbeq	r0, [r9], -r6, ror #10
     5bc:	031d0520 	tsteq	sp, #32, 10	; 0x8000000
		runfsm receiver(node_db);
     5c0:	05052e0d 	streq	r2, [r5, #-3597]	; 0xfffff1f3
     5c4:	066d0514 			; <UNDEFINED> instruction: 0x066d0514
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	06050501 	streq	r0, [r5], -r1, lsl #10
     5cc:	4b4b4b23 	blmi	12d3260 <__ccfg+0x12b32b8>
     5d0:	25054c4b 	strcs	r4, [r5, #-3147]	; 0xfffff3b5
     5d4:	64050106 	strvs	r0, [r5], #-262	; 0xfffffefa
     5d8:	20750566 	rsbscs	r0, r5, r6, ror #10
     5dc:	3c3c2505 	cfldr32cc	mvfx2, [ip], #-20	; 0xffffffec
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	40060505 	andmi	r0, r6, r5, lsl #10
     5e4:	01060805 	tsteq	r6, r5, lsl #16
     5e8:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
		switch(CHOICE) {
     5ec:	01061405 	tsteq	r6, r5, lsl #8
     5f0:	03060305 	movweq	r0, #25349	; 0x6305
     5f4:	503c019b 	mlaspl	ip, fp, r1, r0
     5f8:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
     5fc:	01065705 	tsteq	r6, r5, lsl #14
     600:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     604:	03052057 	movweq	r2, #20567	; 0x5057
     608:	40670620 	rsbmi	r0, r7, r0, lsr #12
     60c:	01065705 	tsteq	r6, r5, lsl #14
     610:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     614:	03052057 	movweq	r2, #20567	; 0x5057
     618:	3e4b0620 	cdpcc	6, 4, cr0, cr11, cr0, {1}
				proceed menu;
     61c:	01065805 	tsteq	r6, r5, lsl #16
     620:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	03052058 	movweq	r2, #20568	; 0x5058
     628:	3e4b0620 	cdpcc	6, 4, cr0, cr11, cr0, {1}
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	01065705 	tsteq	r6, r5, lsl #14
     630:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     634:	03052057 	movweq	r2, #20567	; 0x5057
		DEBUG_PRINT("setting node group ID");
     638:	404b0620 	submi	r0, fp, r0, lsr #12
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	3e01053f 	mcrcc	5, 0, r0, cr1, cr15, {1}
     640:	cc031805 	stcgt	8, cr1, [r3], {5}
		proceed menu;
     644:	05052e7e 	streq	r2, [r5, #-3710]	; 0xfffff182
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	66051313 			; <UNDEFINED> instruction: 0x66051313
     64c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if(node_db->id < 1 || node_db->id > 25){
     650:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	4b4b1513 	blmi	12c5aa8 <__ccfg+0x12a5b00>
     658:	5b4b4b4b 	blpl	12d338c <__ccfg+0x12b33e4>
		if(node_db->id < 1 || node_db->id > 25){
     65c:	01063605 	tsteq	r6, r5, lsl #12
     660:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     664:	07053c3b 	smladxeq	r5, fp, ip, r3
			strncpy(reason, "Out of Range", 50);
     668:	3c250306 	stccc	3, cr0, [r5], #-24	; 0xffffffe8
     66c:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
			proceed invalid_node_id;
     670:	7e810302 	cdpvc	3, 8, cr0, cr1, cr2, {0}
     674:	13131401 	tstne	r3, #16777216	; 0x1000000
				strncpy(reason, "ID is already in use", 50);
     678:	13131313 	tstne	r3, #1275068416	; 0x4c000000
     67c:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
			if(node_db->id == node_db->nnodes[i]){
     680:	03051302 	movweq	r1, #21250	; 0x5302
     684:	02055913 	andeq	r5, r5, #311296	; 0x4c000
     688:	03070514 	movweq	r0, #29972	; 0x7514
				strncpy(reason, "ID is already in use", 50);
     68c:	0501028d 	streq	r0, [r1, #-653]	; 0xfffffd73
     690:	0b051306 	bleq	1452b0 <__ccfg+0x125308>
     694:	060f0501 	streq	r0, [pc], -r1, lsl #10
				proceed invalid_node_id;
     698:	06180501 	ldreq	r0, [r8], -r1, lsl #10
		for(int i = 0; i < 25; i++){
     69c:	052e4f03 	streq	r4, [lr, #-3843]!	; 0xfffff0fd
     6a0:	05131305 	ldreq	r1, [r3, #-773]	; 0xfffffcfb
		proceed menu;
     6a4:	05010666 	streq	r0, [r1, #-1638]	; 0xfffff99a
     6a8:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     6b0:	06054a34 			; <UNDEFINED> instruction: 0x06054a34
     6b4:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     6b8:	06490515 			; <UNDEFINED> instruction: 0x06490515
		proceed get_new_node_id;
     6bc:	20080501 	andcs	r0, r8, r1, lsl #10
     6c0:	31060605 	tstcc	r6, r5, lsl #12
		if (!clear_node_neighbour_array(node_db)){
     6c4:	01060a05 	tsteq	r6, r5, lsl #20
     6c8:	03061a05 	movweq	r1, #27141	; 0x6a05
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	05054a0e 	streq	r4, [r5, #-2574]	; 0xfffff5f2
     6d0:	15131313 	ldrne	r1, [r3, #-787]	; 0xfffffced
     6d4:	01060805 	tsteq	r6, r5, lsl #16
			proceed error;
     6d8:	05663405 	strbeq	r3, [r6, #-1029]!	; 0xfffffbfb
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	05680606 	strbeq	r0, [r8, #-1542]!	; 0xfffff9fa
     6e0:	4d051505 	cfstr32mi	mvfx1, [r5, #-20]	; 0xffffffec
		request_packet->gid = node_db->gid;
     6e4:	08050106 	stmdaeq	r5, {r1, r2, r8}
     6e8:	0606052e 	streq	r0, [r6], -lr, lsr #10
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	0305053d 	movweq	r0, #21821	; 0x553d
		request_packet->request_number = generate_request_num();
     6f0:	05017dd4 	streq	r7, [r1, #-3540]	; 0xfffff22c
     6f4:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
		call sender(request_packet, wait_discovery);
     6f8:	02ac0319 	adceq	r0, ip, #1677721600	; 0x64000000
     6fc:	03260590 			; <UNDEFINED> instruction: 0x03260590
		request_packet->receiver_id=0;
     700:	052e7dd4 	streq	r7, [lr, #-3540]!	; 0xfffff22c
		call sender(request_packet, wait_discovery);
     704:	02ac0319 	adceq	r0, ip, #1677721600	; 0x64000000
     708:	0606052e 	streq	r0, [r6], -lr, lsr #10
     70c:	17070567 	strne	r0, [r7, -r7, ror #10]
			release;
     710:	03020513 	movweq	r0, #9491	; 0x2513
				proceed get_new_node_id;
     714:	14017de6 	strne	r7, [r1], #-3558	; 0xfffff21a
				proceed clear_neighbour_array;
     718:	13131313 	tstne	r3, #1275068416	; 0x4c000000
				proceed create_proto_start;
     71c:	03051313 	movweq	r1, #21267	; 0x5313
				proceed start_delete_proto;
     720:	13020514 	movwne	r0, #9492	; 0x2514
				proceed retrieve_proto;
     724:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
				proceed display_db;
     728:	02960313 	addseq	r0, r6, #1275068416	; 0x4c000000
				proceed del_local;
     72c:	1305054a 	movwne	r0, #21834	; 0x554a
		if (discovery_wait_flag == 0){
     730:	01064305 	tsteq	r6, r5, lsl #6
			discovery_wait_flag=1;
     734:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
     738:	08052043 	stmdaeq	r5, {r0, r1, r6, sp}
			delay(3000, find_proto_start);
     73c:	1d180523 	cfldr32ne	mvfx0, [r8, #-140]	; 0xffffff74
     740:	23060505 	movwcs	r0, #25861	; 0x6505
		if (discovery_wait_flag == 1){
     744:	01060805 	tsteq	r6, r5, lsl #16
			discovery_wait_flag=0;
     748:	054a3105 	strbeq	r3, [sl, #-261]	; 0xfffffefb
     74c:	055a0606 	ldrbeq	r0, [sl, #-1542]	; 0xfffff9fa
			delay(3000, display_neighbour_nodes);
     750:	08051405 	stmdaeq	r5, {r0, r2, sl, ip}
     754:	07050106 	streq	r0, [r5, -r6, lsl #2]
     758:	06060520 	streq	r0, [r6], -r0, lsr #10
     75c:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     760:	06060501 	streq	r0, [r6], -r1, lsl #10
     764:	3105052f 	tstcc	r5, pc, lsr #10
     768:	01061e05 	tsteq	r6, r5, lsl #28
     76c:	02060705 	andeq	r0, r6, #1310720	; 0x140000
     770:	1b051733 	blne	146444 <__ccfg+0x12649c>
     774:	34050106 	strcc	r0, [r5], #-262	; 0xfffffefa
     778:	200a0520 	andcs	r0, sl, r0, lsr #10
     77c:	4b060805 	blmi	182798 <__ccfg+0x1627f0>
     780:	01061f05 	tsteq	r6, r5, lsl #30
     784:	84060a05 	strhi	r0, [r6], #-2565	; 0xfffff5fb
     788:	03060705 	movweq	r0, #26373	; 0x6705
     78c:	2f06200e 	svccs	0x0006200e
     790:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
     794:	07053120 	streq	r3, [r5, -r0, lsr #2]
     798:	05313136 	ldreq	r3, [r1, #-310]!	; 0xfffffeca
     79c:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	1404053d 	strne	r0, [r4], #-1341	; 0xfffffac3
     7a4:	10060505 	andne	r0, r6, r5, lsl #10
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     7a8:	03061305 	movweq	r1, #25349	; 0x6305
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     7ac:	01052026 	tsteq	r5, r6, lsr #32
			if (node_db->nnodes[i]=='\0') break;
     7b0:	06022e06 	streq	r2, [r2], -r6, lsl #28
     7b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     7b8:	02050040 	andeq	r0, r5, #64	; 0x40
		proceed menu;
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	01018303 	tsteq	r1, r3, lsl #6
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c4:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     7c8:	050f0640 	streq	r0, [pc, #-1600]	; 190 <generate_request_num+0x4>
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	40052326 	andmi	r2, r5, r6, lsr #6
     7d0:	2326052b 			; <UNDEFINED> instruction: 0x2326052b
			strncpy(reason, "Error: improper ID", 50);
     7d4:	02920105 	addseq	r0, r2, #1073741825	; 0x40000001
     7d8:	01010002 	tsteq	r1, r2
     7dc:	05002205 	streq	r2, [r0, #-517]	; 0xfffffdfb
			proceed error;
     7e0:	0004fc02 	andeq	pc, r4, r2, lsl #24
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	018b0300 	orreq	r0, fp, r0, lsl #6
     7e8:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	0f062205 	svceq	0x00062205
     7f0:	05231805 	streq	r1, [r3, #-2053]!	; 0xfffff7fb
     7f4:	11052e08 	tstne	r5, r8, lsl #28
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	2f390523 	svccs	0x00390523
		create_message->tpe = CREATE_RECORD;
     7fc:	20060d05 	andcs	r0, r6, r5, lsl #26
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	11063a05 	tstne	r6, r5, lsl #20
		create_message->gid = node_db->gid;
     804:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
		create_message->tpe = CREATE_RECORD;
     808:	0d052139 	stfeqs	f2, [r5, #-228]	; 0xffffff1c
		create_message->request_number = generate_request_num();
     80c:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
     810:	39050106 	stmdbcc	r5, {r1, r2, r8}
		create_message->sender_id = node_db->id;
     814:	18052c06 	stmdane	r5, {r1, r2, sl, fp, sp}
     818:	06090501 	streq	r0, [r9], -r1, lsl #10
     81c:	06060501 	streq	r0, [r6], -r1, lsl #10
		strncpy(create_message->record, user_provided_record, 20);
     820:	13050524 	movwne	r0, #21796	; 0x5524
     824:	01062005 	tsteq	r6, r5
     828:	30060505 	andcc	r0, r6, r5, lsl #10
		response_checker[0] = create_message->request_number;
     82c:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
		call sender(&create_message, wait);
     830:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
		response_checker[1] = create_message->tpe;
     834:	0f052301 	svceq	0x00052301
     838:	02207303 	eoreq	r7, r0, #201326592	; 0xc000000
		call sender(&create_message, wait);
     83c:	01010002 	tsteq	r1, r2
     840:	0001af05 	andeq	sl, r1, r5, lsl #30
     844:	00000205 	andeq	r0, r0, r5, lsl #4
     848:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
     850:	13131413 	tstne	r3, #318767104	; 0x13000000
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	13131313 	tstne	r3, #1275068416	; 0x4c000000
     858:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
			strncpy(reason, "Error: improper node ID", 50);
     85c:	af051302 	svcge	0x00051302
     860:	74030601 	strvc	r0, [r3], #-1537	; 0xfffff9ff
     864:	05052001 	streq	r2, [r5, #-1]
			proceed error;
     868:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	4b210603 	blmi	842080 <__ccfg+0x8220d8>
     870:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	02140601 	andseq	r0, r4, #1048576	; 0x100000
     878:	01010002 	tsteq	r1, r2
     87c:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	00000002 	andeq	r0, r0, r2
		delete_record->tpe = DELETE_RECORD;
     884:	01b30300 			; <UNDEFINED> instruction: 0x01b30300
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	13020501 	movwne	r0, #9473	; 0x2501
		delete_record->gid = node_db->gid;
     88c:	06100516 			; <UNDEFINED> instruction: 0x06100516
		delete_record->tpe = DELETE_RECORD;
     890:	06020501 	streq	r0, [r2], -r1, lsl #10
		delete_record->request_number = generate_request_num();
     894:	05661903 	strbeq	r1, [r6, #-2307]!	; 0xfffff6fd
     898:	02130601 	andseq	r0, r3, #1048576	; 0x100000
		delete_record->sender_id = node_db->id;
     89c:	01010004 	tsteq	r1, r4
     8a0:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
     8a4:	00052402 	andeq	r2, r5, r2, lsl #8
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	049e0300 	ldreq	r0, [lr], #768	; 0x300
		response_checker[0] = delete_record->request_number;
     8ac:	011c0501 	tsteq	ip, r1, lsl #10
     8b0:	01061a05 	tsteq	r6, r5, lsl #20
		call sender(&delete_record, wait);
     8b4:	02060205 	andeq	r0, r6, #1342177280	; 0x50000000
     8b8:	1313182a 	tstne	r3, #2752512	; 0x2a0000
     8bc:	1a030513 	bne	c1d10 <__ccfg+0xa1d68>
     8c0:	01062605 	tsteq	r6, r5, lsl #12
     8c4:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	30310603 	eorscc	r0, r1, r3, lsl #12
     8cc:	034a0e03 	movteq	r0, #44547	; 0xae03
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	09054a11 	stmdbeq	r5, {r0, r4, r9, fp, lr}
     8d4:	07050106 	streq	r0, [r5, -r6, lsl #2]
     8d8:	22060566 	andcs	r0, r6, #427819008	; 0x19800000
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	051e0705 	ldreq	r0, [lr, #-1797]	; 0xfffff8fb
     8e0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
			proceed error;
     8e4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     8e8:	3d210604 	stccc	6, cr0, [r1, #-16]!
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	1a03052f 	bne	c1db0 <__ccfg+0xa1e08>
     8f0:	9e054d4c 	cdpls	13, 0, cr4, cr5, cr12, {2}
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f4:	05200602 	streq	r0, [r0, #-1538]!	; 0xfffff9fe
     8f8:	a1062e03 	tstge	r6, r3, lsl #28
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	03050567 	movweq	r0, #21863	; 0x5567
     900:	03660823 	cmneq	r6, #2293760	; 0x230000
		retrieve_record->gid = node_db->gid;
     904:	03062e60 	movweq	r2, #28256	; 0x6e60
     908:	2f062020 	svccs	0x00062020
     90c:	4e160305 	cdpmi	3, 1, cr0, cr6, cr5, {0}
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	053e5a13 	ldreq	r5, [lr, #-2579]!	; 0xfffff5ed
		retrieve_record->request_number = generate_request_num();
     914:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     918:	08052603 	stmdaeq	r5, {r0, r1, r9, sl, sp}
		retrieve_record->sender_id = node_db->id;
     91c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
		response_checker[0] = retrieve_record->request_number;
     920:	8d030605 	stchi	6, cr0, [r3, #-20]	; 0xffffffec
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	0f05207b 	svceq	0x0005207b
		retrieve_record->record_index = user_provided_index;
     928:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		call sender(&retrieve_record, wait);
     92c:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
		response_checker[1] = retrieve_record->tpe;
     930:	0104f603 	tsteq	r4, r3, lsl #12	; <UNPREDICTABLE>
     934:	31140305 	tstcc	r4, r5, lsl #6
		call sender(&retrieve_record, wait);
     938:	0d05134d 	stceq	3, cr1, [r5, #-308]	; 0xfffffecc
     93c:	03051506 	movweq	r1, #21766	; 0x5506
     940:	055b061d 	ldrbeq	r0, [fp, #-1565]	; 0xfffff9e3
     944:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	05052016 	streq	r2, [r5, #-22]	; 0xffffffea
     94c:	06040520 	streq	r0, [r4], -r0, lsr #10
		if(node_db->data_base.item_count != 0){
     950:	1a05593d 	bne	156e4c <__ccfg+0x136ea4>
     954:	7ef20306 	cdpvc	3, 15, cr0, cr2, cr6, {0}
		proceed menu;
     958:	0305053c 	movweq	r0, #21820	; 0x553c
     95c:	05200194 	streq	r0, [r0, #-404]!	; 0xfffffe6c
		delete_all(node_db);
     960:	053b0604 	ldreq	r0, [fp, #-1540]!	; 0xfffff9fc
     964:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		proceed menu;
     968:	06052025 	streq	r2, [r5], -r5, lsr #32
		delay(3000, timeout);
     96c:	06050520 	streq	r0, [r5], -r0, lsr #10
     970:	053d5959 	ldreq	r5, [sp, #-2393]!	; 0xfffff6a7
     974:	1b050e1a 	blne	1441e4 <__ccfg+0x12423c>
		when(&response_flag, menu);
     978:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     97c:	03052006 	movweq	r2, #20486	; 0x5006
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     984:	03053306 	movweq	r3, #21254	; 0x5306
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	06080515 			; <UNDEFINED> instruction: 0x06080515
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	06050501 	streq	r0, [r5], -r1, lsl #10
     990:	207aea03 	rsbscs	lr, sl, r3, lsl #20
     994:	03060305 	movweq	r0, #25349	; 0x6305
     998:	0501059b 	streq	r0, [r1, #-1435]	; 0xfffffa65
     99c:	7ae5030e 	bvc	ff9415dc <_estack+0xdf93c5dc>
     9a0:	06050520 	streq	r0, [r5], -r0, lsr #10
     9a4:	03040521 	movweq	r0, #17697	; 0x4521
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	05010598 	streq	r0, [r1, #-1432]	; 0xfffffa68
     9ac:	05331403 	ldreq	r1, [r3, #-1027]!	; 0xfffffbfd
     9b0:	05010656 	streq	r0, [r1, #-1622]	; 0xfffff9aa
     9b4:	56052003 	strpl	r2, [r5], -r3
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	20030520 	andcs	r0, r3, r0, lsr #10
     9bc:	0e035906 	vmlaeq.f16	s10, s6, s12	; <UNPREDICTABLE>
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
     9c4:	4a060501 	bmi	181dd0 <__ccfg+0x161e28>
		proceed menu;
     9c8:	21060405 	tstcs	r6, r5, lsl #8
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	03053d59 	movweq	r3, #23897	; 0x5d59
     9d0:	3f051316 	svccc	0x00051316
     9d4:	17050106 	strne	r0, [r5, -r6, lsl #2]
		proceed menu;
     9d8:	1f20053f 	svcne	0x0020053f
}
     9dc:	051e3f05 	ldreq	r3, [lr, #-3845]	; 0xfffff0fb
     9e0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     9e4:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
     9e8:	051f2f17 	ldreq	r2, [pc, #-3863]	; fffffad9 <_estack+0xdfffaad9>
     9ec:	13210603 			; <UNDEFINED> instruction: 0x13210603
     9f0:	01062405 	tsteq	r6, r5, lsl #8
     9f4:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     9f8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     9fc:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
     a00:	2605270c 	strcs	r2, [r5], -ip, lsl #14
     a04:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
     a08:	1d05270c 	stcne	7, cr2, [r5, #-48]	; 0xffffffd0
     a0c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
     a10:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     a14:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
     a18:	05260603 	streq	r0, [r6, #-1539]!	; 0xfffff9fd
     a1c:	0c050108 	stfeqs	f0, [r5], {8}
     a20:	0b050106 	bleq	140e40 <__ccfg+0x120e98>
     a24:	06040558 			; <UNDEFINED> instruction: 0x06040558
     a28:	03050526 	movweq	r0, #21798	; 0x5526
     a2c:	322e7f85 	eorcc	r7, lr, #532	; 0x214
static void devinit_uart (int devnum) {
     a30:	32323332 	eorscc	r3, r2, #-939524096	; 0xc8000000
	adddevfunc (ioreq_uart_a, devnum);
     a34:	03700532 	cmneq	r0, #209715200	; 0xc800000
     a38:	052e00dc 	streq	r0, [lr, #-220]!	; 0xffffff24
void udelay (volatile word n) {
     a3c:	1b051503 	blne	145e50 <__ccfg+0x125ea8>
     a40:	06050106 	streq	r0, [r5], -r6, lsl #2
	while (n) {
     a44:	0604052e 	streq	r0, [r4], -lr, lsr #10
     a48:	06170521 	ldreq	r0, [r7], -r1, lsr #10
}
     a4c:	21040501 	tstcs	r4, r1, lsl #10
	while (n--);
     a50:	051f1705 	ldreq	r1, [pc, #-1797]	; 353 <receiver+0x183>
     a54:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     a58:	06055b03 	streq	r5, [r5], -r3, lsl #22
		n--;
     a5c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     a60:	17052f06 	strne	r2, [r5, -r6, lsl #30]
     a64:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
void mdelay (volatile word n) {
     a68:	1f170521 	svcne	0x00170521
     a6c:	21060405 	tstcs	r6, r5, lsl #8
	while (n) {
     a70:	29020305 	stmdbcs	r2, {r0, r2, r8, r9}
     a74:	08054c17 	stmdaeq	r5, {r0, r1, r2, r4, sl, fp, lr}
}
     a78:	060c0501 	streq	r0, [ip], -r1, lsl #10
		udelay (999);
     a7c:	21170501 	tstcs	r7, r1, lsl #10
     a80:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
		n--;
     a84:	051e0611 	ldreq	r0, [lr, #-1553]	; 0xfffff9ef
     a88:	17051304 	strne	r1, [r5, -r4, lsl #6]
     a8c:	07050106 	streq	r0, [r5, -r6, lsl #2]
     a90:	0603054a 	streq	r0, [r3], -sl, asr #10
void __pi_ondomain (lword d) {
     a94:	3c0d033f 	stccc	3, cr0, [sp], {63}	; 0x3f
     a98:	04055a4d 	streq	r5, [r5], #-2637	; 0xfffff5b3
		if (__pi_systat.effpdm > 1)
     a9c:	053d5913 	ldreq	r5, [sp, #-2323]!	; 0xfffff6ed
     aa0:	5d4d1503 	cfstr64pl	mvdx1, [sp, #-12]
			__pi_systat.effpdm = 1;
     aa4:	063b0513 			; <UNDEFINED> instruction: 0x063b0513
	PRCMPowerDomainOn (d);
     aa8:	3e170501 	cfmul32cc	mvfx0, mvfx7, mvfx1
     aac:	051f2005 	ldreq	r2, [pc, #-5]	; aaf <__pi_ondomain+0x1b>
     ab0:	03051f12 	movweq	r1, #24338	; 0x5f12
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	20052106 	andcs	r2, r5, r6, lsl #2
     ab8:	17050106 	strne	r0, [r5, -r6, lsl #2]
     abc:	0603052e 	streq	r0, [r3], -lr, lsr #10
	__pi_systat.ondmns |= d;
     ac0:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     ac4:	06030501 	streq	r0, [r3], -r1, lsl #10
}
     ac8:	0611052f 	ldreq	r0, [r1], -pc, lsr #10
     acc:	20240501 	eorcs	r0, r4, r1, lsl #10
void __pi_offdomain (lword d) {
     ad0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     ad4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	PRCMPowerDomainOff (d);
     ad8:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	26052011 			; <UNDEFINED> instruction: 0x26052011
     ae0:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
     ae4:	051e1d05 	ldreq	r1, [lr, #-3333]	; 0xfffff2fb
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     aec:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	1f052103 	svcne	0x00052103
     af4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	27053f21 	strcs	r3, [r5, -r1, lsr #30]
     afc:	17050106 	strne	r0, [r5, -r6, lsl #2]
	__pi_systat.ondmns &= ~d;
     b00:	20270520 	eorcs	r0, r7, r0, lsr #10
     b04:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
}
     b08:	03051d27 	movweq	r1, #23847	; 0x5d27
     b0c:	27052106 	strcs	r2, [r5, -r6, lsl #2]
void __pi_syserror (word ec, const char *m) {
     b10:	0c050106 	stfeqs	f0, [r5], {6}
	diag ("SYSERR: %x, %s", ec, m);
     b14:	1e270522 	cfsh64ne	mvdx0, mvdx7, #18
     b18:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     b1c:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b20:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     b24:	0305580b 	movweq	r5, #22539	; 0x580b
     b28:	3c0c0306 	stccc	3, cr0, [ip], {6}
		all_leds_blink;
     b2c:	04055a4d 	streq	r5, [r5], #-2637	; 0xfffff5b3
     b30:	053d5913 	ldreq	r5, [sp, #-2323]!	; 0xfffff6ed
     b34:	5a4d1503 	bpl	1345f48 <__ccfg+0x1325fa0>
     b38:	05150405 	ldreq	r0, [r5, #-1029]	; 0xfffffbfb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
     b40:	0501063b 	streq	r0, [r1, #-1595]	; 0xfffff9c5
     b44:	1f053e16 	svcne	0x00053e16
     b48:	1f11051f 	svcne	0x0011051f
     b4c:	21060305 	tstcs	r6, r5, lsl #6
     b50:	01061f05 	tsteq	r6, r5, lsl #30
	while (1) {
     b54:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     b58:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     b5c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     b60:	052f0603 	streq	r0, [pc, #-1539]!	; 565 <root+0x41>
void tci_run_delay_timer () {
     b64:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
	setdel = __pi_mintk - __pi_old;
     b68:	21052023 	tstcs	r5, r3, lsr #32
     b6c:	0603052e 	streq	r0, [r3], -lr, lsr #10
     b70:	06250521 	strteq	r0, [r5], -r1, lsr #10
     b74:	20100501 	andscs	r0, r0, r1, lsl #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b78:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
     b7c:	1c052626 	stcne	6, cr2, [r5], {38}	; 0x26
     b80:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     b84:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
	sti_tim;
     b8c:	052f0603 	streq	r0, [pc, #-1539]!	; 591 <root+0x6d>
}
     b90:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
     b94:	05240603 	streq	r0, [r4, #-1539]!	; 0xfffff9fd
     b98:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     b9c:	2605230c 	strcs	r2, [r5], -ip, lsl #6
     ba0:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
	cli_aux;
     ba4:	06260521 	strteq	r0, [r6], -r1, lsr #10
     ba8:	220c0501 	andcs	r0, ip, #4194304	; 0x400000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	051e2605 	ldreq	r2, [lr, #-1541]	; 0xfffff9fb
     bb0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     bb4:	0c050108 	stfeqs	f0, [r5], {8}
     bb8:	0b050106 	bleq	140fd8 <__ccfg+0x121030>
	sti_aux;
     bbc:	06030558 			; <UNDEFINED> instruction: 0x06030558
}
     bc0:	4d3c0c03 	ldcmi	12, cr0, [ip, #-12]!
     bc4:	1304055a 	movwne	r0, #17754	; 0x455a
     bc8:	03053d59 	movweq	r3, #23897	; 0x5d59
void AONRTCIntHandler () {
     bcc:	055a4d15 	ldrbeq	r4, [sl, #-3349]	; 0xfffff2eb
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	03051504 	movweq	r1, #21764	; 0x5504
     bd4:	3f051316 	svccc	0x00051316
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	18050106 	stmdane	r5, {r1, r2, r8}
		if (__pi_utims [0] == 0)
     bdc:	1f21053e 	svcne	0x0021053e
     be0:	051f1305 	ldreq	r1, [pc, #-773]	; 8e3 <root+0x3bf>
		if (*(__pi_utims [0])) {
     be4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     be8:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
			(*(__pi_utims [0]))--;
     bec:	03052e18 	movweq	r2, #24088	; 0x5e18
		if (__pi_utims [1] == 0)
     bf0:	18052106 	stmdane	r5, {r1, r2, r8, sp}
		if (*(__pi_utims [1])) {
     bf4:	03050106 	movweq	r0, #20742	; 0x5106
			aux_timer_inactive = 0;
     bf8:	12052f06 	andne	r2, r5, #6, 30
			(*(__pi_utims [1]))--;
     bfc:	25050106 	strcs	r0, [r5, #-262]	; 0xfffffefa
		if (__pi_utims [2] == 0)
     c00:	2e230520 	cfsh64cs	mvdx0, mvdx3, #16
		if (*(__pi_utims [2])) {
     c04:	21060305 	tstcs	r6, r5, lsl #6
			(*(__pi_utims [2]))--;
     c08:	01062705 	tsteq	r6, r5, lsl #14
		if (__pi_utims [3] != 0) {
     c0c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
			if (*(__pi_utims [3])) {
     c10:	28052027 	stmdacs	r5, {r0, r1, r2, r5, sp}
				aux_timer_inactive = 0;
     c14:	031e0526 	tsteq	lr, #159383552	; 0x9800000
				(*(__pi_utims [3]))--;
     c18:	0305207a 	movweq	r2, #20602	; 0x507a
	if (__pi_systat.ledsts) {
     c1c:	20052106 	andcs	r2, r5, r6, lsl #2
     c20:	03050106 	movweq	r0, #20742	; 0x5106
		if (__pi_systat.ledblc++ == 0) {
     c24:	21052f06 	tstcs	r5, r6, lsl #30
     c28:	03050106 	movweq	r0, #20742	; 0x5106
			if (__pi_systat.ledblk) {
     c2c:	17052406 	strne	r2, [r5, -r6, lsl #8]
     c30:	0c050106 	stfeqs	f0, [r5], {6}
     c34:	1d280523 	cfstr32ne	mvfx0, [r8, #-140]!	; 0xffffff74
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	21060305 	tstcs	r6, r5, lsl #6
     c3c:	01062805 	tsteq	r6, r5, lsl #16
				if (__pi_systat.ledsts & 0x2)
     c40:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
     c44:	03051e28 	movweq	r1, #24104	; 0x5e28
     c48:	08052206 	stmdaeq	r5, {r1, r2, r9, sp}
				if (__pi_systat.ledsts & 0x4)
     c4c:	060c0501 	streq	r0, [ip], -r1, lsl #10
				__pi_systat.ledblk = 0;
     c50:	580b0501 	stmdapl	fp, {r0, r8, sl}
     c54:	3f060305 	svccc	0x00060305
			if (__pi_systat.fstblk)
     c58:	0618054d 	ldreq	r0, [r8], -sp, asr #10
     c5c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
				__pi_systat.ledblc = 200;
     c60:	41060305 	tstmi	r6, r5, lsl #6
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	593f4b3f 	ldmdbpl	pc!, {r0, r1, r2, r3, r4, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
		cli_tim;
     c68:	0304054b 	movweq	r0, #17739	; 0x454b
		__pi_new += setdel;
     c6c:	05207edb 	streq	r7, [r0, #-3803]!	; 0xfffff125
     c70:	19054818 	stmdbne	r5, {r3, r4, fp, lr}
		setdel = 0;
     c74:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		RISE_N_SHINE;
     c78:	019b0306 	orrseq	r0, fp, r6, lsl #6
		__pi_new += setdel;
     c7c:	01b5052e 			; <UNDEFINED> instruction: 0x01b5052e
		RISE_N_SHINE;
     c80:	05053c06 	streq	r3, [r5, #-3078]	; 0xfffff3fa
     c84:	0637052e 	ldrteq	r0, [r7], -lr, lsr #10
		aux_timer_inactive = 1;
     c88:	0638058f 	ldrteq	r0, [r8], -pc, lsl #11
     c8c:	06130501 	ldreq	r0, [r3], -r1, lsl #10
				if (__pi_systat.ledsts & 0x1)
     c90:	061f0520 	ldreq	r0, [pc], -r0, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c94:	202a0501 	eorcs	r0, sl, r1, lsl #10
     c98:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
				if (__pi_systat.ledsts & 0x2)
     c9c:	05053c0c 	streq	r3, [r5, #-3084]	; 0xfffff3f4
     ca0:	06030521 	streq	r0, [r3], -r1, lsr #10
     ca4:	4b3c0f03 	blmi	f048b8 <__ccfg+0xee4910>
				if (__pi_systat.ledsts & 0x8)
     ca8:	01055940 	tsteq	r5, r0, asr #18
				__pi_systat.ledblk = 1;
     cac:	3c13053d 	cfldr32cc	mvfx0, [r3], {61}	; 0x3d
     cb0:	2e060105 	adfcss	f0, f6, f5
		if (aux_timer_inactive) {
     cb4:	01002502 	tsteq	r0, r2, lsl #10
			cli_aux;
     cb8:	00156201 	andseq	r6, r5, r1, lsl #4
     cbc:	a1000300 	mrsge	r0, LR_irq
     cc0:	02000002 	andeq	r0, r0, #2
     cc4:	0d0efb01 	vstreq	d15, [lr, #-4]
     cc8:	01010100 	mrseq	r0, (UNDEF: 17)
     ccc:	00000001 	andeq	r0, r0, r1
     cd0:	01000001 	tsteq	r0, r1
     cd4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c20 <AONRTCIntHandler+0x54>
     cd8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
     cdc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
word tci_update_delay_ticks (Boolean force) {
     ce0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	cli_tim;
     ce4:	6f746b73 	svcvs	0x00746b73
     ce8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	if (setdel) {
     cec:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	2f534f43 	svccs	0x00534f43
     cf8:	4f636950 	svcmi	0x00636950
     cfc:	43432f53 	movtmi	r2, #16211	; 0x3f53
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	6f682f00 	svcvs	0x00682f00
	return NO;
     d08:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
			setdel = 0;
     d0c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	442f6e65 	strtmi	r6, [pc], #-3685	; d18 <tci_update_delay_ticks+0x38>
     d14:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
}
     d18:	4f2f706f 	svcmi	0x002f706f
		sti_tim;
     d1c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		return YES;
     d20:	502f5445 	eorpl	r5, pc, r5, asr #8
     d24:	534f4349 	movtpl	r4, #62281	; 0xf349
     d28:	6369502f 	cmnvs	r9, #47	; 0x2f
     d2c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	UARTDisable (UART0_BASE);
     d34:	43432f58 	movtmi	r2, #16216	; 0x3f58
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
	UARTDisable (UART0_BASE);
     d3c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
	UARTConfigSetExpClk (UART0_BASE,
     d40:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     d44:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
     d48:	2f006269 	svccs	0x00006269
     d4c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     d54:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     d58:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     d60:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     d64:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	urates [0] = rate;
     d68:	4349502f 	movtmi	r5, #36911	; 0x902f
}
     d6c:	502f534f 	eorpl	r5, pc, pc, asr #6
     d70:	534f6369 	movtpl	r6, #62313	; 0xf369
     d74:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     d78:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
     d7c:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
     d80:	2f656d6f 	svccs	0x00656d6f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	70657473 	rsbvc	r7, r5, r3, ror r4
     d88:	2f6e6568 	svccs	0x006e6568
     d8c:	6b736544 	blvs	1cda2a4 <__ccfg+0x1cba2fc>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	2f706f74 	svccs	0x00706f74
     d94:	4f534c4f 	svcmi	0x00534c4f
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d98:	2f54454e 	svccs	0x0054454e
     d9c:	4f434950 	svcmi	0x00434950
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     da4:	2f534f63 	svccs	0x00534f63
     da8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     dac:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
     db0:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     db4:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
     db8:	2f656d6f 	svccs	0x00656d6f
	switch (operation) {
     dbc:	70657473 	rsbvc	r7, r5, r3, ror r4
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc0:	2f6e6568 	svccs	0x006e6568
     dc4:	6b736544 	blvs	1cda2dc <__ccfg+0x1cba334>
     dc8:	2f706f74 	svccs	0x00706f74
     dcc:	4f534c4f 	svcmi	0x00534c4f
     dd0:	2f54454e 	svccs	0x0054454e
				*buf++ = uart_a_read;
     dd4:	4f434950 	svcmi	0x00434950
     dd8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			while (len && uart_a_char_available) {
     ddc:	2f534f63 	svccs	0x00534f63
     de0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     de4:	2f006c65 	svccs	0x00006c65
			if (len != operation) {
     de8:	2f727375 	svccs	0x00727375
}
     dec:	2f62696c 	svccs	0x0062696c
     df0:	2f636367 	svccs	0x00636367
			uart_a_disable_int;
     df4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
			if (uart_a_char_available) {
     df8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
				*buf++ = uart_a_read;
     dfc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
			uart_a_disable_int;
     e00:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
     e04:	2f312e32 	svccs	0x00312e32
			if (uart_a_char_available) {
     e08:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e0c:	00656475 	rsbeq	r6, r5, r5, ror r4
				uart_a_enable_int;
     e10:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d5c <__pi_uart_setrate+0x2c>
     e14:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				goto Redo_rx;
     e18:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     e20:	6f746b73 	svcvs	0x00746b73
			return -2;
     e24:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     e28:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				uart_a_write (*buf);
     e2c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     e30:	2f534f43 	svccs	0x00534f43
			while (len && uart_a_room_in_tx) {
     e34:	4f636950 	svcmi	0x00636950
     e38:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     e3c:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
			if (len != operation) {
     e40:	00010063 	andeq	r0, r1, r3, rrx
			uart_a_disable_int;
     e44:	73797300 	cmnvc	r9, #0, 6
     e48:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
			if (uart_a_room_in_tx) {
     e4c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     e50:	63000002 	movwvs	r0, #2
				uart_a_enable_int;
     e54:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     e58:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
				*buf++ = uart_a_read;
     e5c:	0100682e 	tsteq	r0, lr, lsr #16
			if (uart_a_room_in_tx) {
     e60:	70670000 	rsbvc	r0, r7, r0
				uart_a_write (*buf);
     e64:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     e68:	00000200 	andeq	r0, r0, r0, lsl #4
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6c:	5f717269 	svcpl	0x00717269
     e70:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
			uart_a_enable_int;
     e74:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
     e78:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
     e7c:	00000300 	andeq	r0, r0, r0, lsl #6
			return 0;
     e80:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			if (len == UART_CNTRL_SETRATE) {
     e84:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
				if (__pi_uart_setrate (*((word*)buf),
     e88:	72690000 	rsbvc	r0, r9, #0
     e8c:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
     e90:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
				syserror (EREQPAR, "uar");
     e94:	00682e73 	rsbeq	r2, r8, r3, ror lr
			syserror (ENOOPER, "uai");
     e98:	69000003 	stmdbvs	r0, {r0, r1}
			if (len == UART_CNTRL_GETRATE) {
     e9c:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
				return 1;
     ea0:	735f6e69 	cmpvc	pc, #1680	; 0x690
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea4:	6f736e65 	svcvs	0x00736e65
			syserror (ENOOPER, "uai");
     ea8:	00682e72 	rsbeq	r2, r8, r2, ror lr
     eac:	70000004 	andvc	r0, r0, r4
     eb0:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     eb4:	00020068 	andeq	r0, r2, r8, rrx
     eb8:	6e6f6100 	powvse	f6, f7, f0
     ebc:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     ec0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ec4:	77700000 	ldrbvc	r0, [r0, -r0]!
     ec8:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
void UART0IntHandler () {
     ed0:	00000200 	andeq	r0, r0, r0, lsl #4
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	5f6e6f61 	svcpl	0x006e6f61
     ed8:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     edc:	00020068 	andeq	r0, r2, r8, rrx
     ee0:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
     ee4:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     eec:	00000500 	andeq	r0, r0, r0, lsl #10
		RISE_N_SHINE;
     ef0:	5f6e6f61 	svcpl	0x006e6f61
     ef4:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
		i_trigger (devevent (UART_A, READ));
     ef8:	00020068 	andeq	r0, r2, r8, rrx
     efc:	6e6f6100 	powvse	f6, f7, f0
     f00:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     f04:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
     f08:	00020068 	andeq	r0, r2, r8, rrx
     f0c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     f10:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     f14:	00060068 	andeq	r0, r6, r8, rrx
     f18:	63726100 	cmnvs	r2, #0, 2
     f1c:	00682e68 	rsbeq	r2, r8, r8, ror #28
     f20:	6d000001 	stcvs	0, cr0, [r0, #-4]
     f24:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	00010068 	andeq	r0, r1, r8, rrx
     f2c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     f30:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		i_trigger (devevent (UART_A, WRITE));
     f34:	00682e73 	rsbeq	r2, r8, r3, ror lr
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	62000001 	andvs	r0, r0, #1
     f3c:	6f747475 	svcvs	0x00747475
		RISE_N_SHINE;
     f40:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     f44:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     f48:	00000100 	andeq	r0, r0, r0, lsl #2
		i_trigger (devevent (UART_A, WRITE));
     f4c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     f50:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     f54:	6b000007 	blvs	f78 <UART0IntHandler+0xac>
     f58:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     f5c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     f60:	00000005 	andeq	r0, r0, r5
     f64:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
     f68:	000a3002 	andeq	r3, sl, r2
     f6c:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
     f70:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     f74:	10062705 	andne	r2, r6, r5, lsl #14
}
     f78:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
     f7c:	01010005 	tsteq	r1, r5
     f80:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     f84:	000a3c02 	andeq	r3, sl, r2, lsl #24
     f88:	01180300 	tsteq	r8, r0, lsl #6
void __buttons_setirq (int val) {
     f8c:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	09050108 	stmdbeq	r5, {r3, r8}
     f94:	08050106 	stmdaeq	r5, {r1, r2, r8}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     f98:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
     f9c:	2b060305 	blcs	181bb8 <__ccfg+0x161c10>
     fa0:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	060a0501 	streq	r0, [sl], -r1, lsl #10
     fac:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     fb0:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     fb4:	01060405 	tsteq	r6, r5, lsl #8
     fb8:	01000702 	tsteq	r0, r2, lsl #14
     fbc:	001f0501 	andseq	r0, pc, r1, lsl #10
}
     fc0:	0a680205 	beq	1a017dc <__ccfg+0x19e1834>
     fc4:	1f030000 	svcne	0x00030000
     fc8:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     fcc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
void __pinlist_setirq (int val) {
     fd0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	01053c08 	tsteq	r5, r8, lsl #24
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	06030524 	streq	r0, [r3], -r4, lsr #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	07020106 	streq	r0, [r2, -r6, lsl #2]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     fe8:	0205001e 	andeq	r0, r5, #30
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	00000a94 	muleq	r0, r4, sl
     ff0:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
     ff4:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
}
     ffc:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
    1000:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    1004:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    1008:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
void GPIOIntHandler () {
    100c:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
if (buttons_int) {
    1010:	17052106 	strne	r2, [r5, -r6, lsl #2]
    1014:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	buttons_disable ();
    1018:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    101c:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
	i_trigger ((aword)&__button_list);
    1020:	06090501 	streq	r0, [r9], -r1, lsl #10
    1024:	4a080501 	bmi	202430 <__ccfg+0x1e2488>
    1028:	30060205 	andcc	r0, r6, r5, lsl #4
    102c:	01061505 	tsteq	r6, r5, lsl #10
    1030:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1034:	01010005 	tsteq	r1, r5
    1038:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    103c:	000ad002 	andeq	sp, sl, r2
    1040:	013a0300 	teqeq	sl, r0, lsl #6
    1044:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    1048:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
	RISE_N_SHINE;
    104c:	1f052502 	svcne	0x00052502
    1050:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
    1054:	3c053d06 	stccc	13, cr3, [r5], {6}
if (pin_sensor_int) {
    1058:	01080501 	tsteq	r8, r1, lsl #10
    105c:	01060905 	tsteq	r6, r5, lsl #18
	i_trigger ((aword)(&__input_pins));
    1060:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    1064:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    1068:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    106c:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
    1070:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1074:	06052027 	streq	r2, [r5], -r7, lsr #32
    1078:	06040520 	streq	r0, [r4], -r0, lsr #10
    107c:	06240521 	strteq	r0, [r4], -r1, lsr #10
    1080:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    1084:	23060205 	movwcs	r0, #25093	; 0x6205
    1088:	01061505 	tsteq	r6, r5, lsl #10
	__pinsen_disable_and_clear;
    108c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
	RISE_N_SHINE;
    1090:	01010005 	tsteq	r1, r5
    1094:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
    1098:	00000002 	andeq	r0, r0, r2
}
    109c:	00ce0300 	sbceq	r0, lr, r0, lsl #6
    10a0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    10a4:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
    10a8:	06220205 	strteq	r0, [r2], -r5, lsl #4
    10ac:	03053633 	movweq	r3, #22067	; 0x5633
void system_init () {
    10b0:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	01f00304 	mvnseq	r0, r4, lsl #6
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	5c053001 	stcpl	0, cr3, [r5], {1}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    10c0:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
    10c4:	0502100a 	streq	r1, [r2, #-10]
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    10cc:	0205002d 	andeq	r0, r5, #45	; 0x2d
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	00000b10 	andeq	r0, r0, r0, lsl fp
    10d4:	01019703 	tsteq	r1, r3, lsl #14
    10d8:	01140205 	tsteq	r4, r5, lsl #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	2d051701 	stccs	7, cr1, [r5, #-4]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	01790306 	cmneq	r9, r6, lsl #6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e8:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ec:	03030503 	movweq	r0, #13571	; 0x3503
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	062d0504 	strteq	r0, [sp], -r4, lsl #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	2001cb03 	andcs	ip, r1, r3, lsl #22
		pin = (port_confs [i] >> 19) & 0x1f;
    10fc:	02050104 	andeq	r0, r5, #4, 2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	7f8f0306 	svcvc	0x008f0306
    1104:	1303053c 	movwne	r0, #13628	; 0x353c
    1108:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
    110c:	eb032905 	bl	cb528 <__ccfg+0xab580>
		if (port_confs [i] & 0x80)
    1110:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1114:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1118:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (port_confs [i] & 0x40)
    111c:	7f900303 	svcvc	0x00900303
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    1124:	00f0032d 	rscseq	r0, r0, sp, lsr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112c:	90030603 	andls	r0, r3, r3, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1130:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
	all_leds_blink;
    1134:	eb032905 	bl	cb550 <__ccfg+0xab5a8>
    1138:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    113c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1140:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1144:	90030603 	andls	r0, r3, r3, lsl #12
    1148:	0101207f 	tsteq	r1, pc, ror r0
    114c:	01010101 	tsteq	r1, r1, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1150:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1154:	29050404 	stmdbcs	r5, {r2, sl}
    1158:	0101a103 	tsteq	r1, r3, lsl #2
    115c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1160:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	03030501 	movweq	r0, #13569	; 0x3501
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    116c:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	IntEnable (INT_AON_RTC_COMB);
    1170:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
    1174:	06030501 	streq	r0, [r3], -r1, lsl #10
    1178:	207eda03 	rsbscs	sp, lr, r3, lsl #20
	__pi_malloc_init ();
    117c:	29050404 	stmdbcs	r5, {r2, sl}
	IntEnable (INT_AON_GPIO_EDGE);
    1180:	0101a103 	tsteq	r1, r3, lsl #2
    1184:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1190:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    1194:	01010101 	tsteq	r1, r1, lsl #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	01580101 	cmpeq	r8, r1, lsl #2
    119c:	1108052e 	tstne	r8, lr, lsr #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	01000902 	tsteq	r0, r2, lsl #18
    11a4:	001d0501 	andseq	r0, sp, r1, lsl #10
    11a8:	0b640205 	bleq	19019c4 <__ccfg+0x18e1a1c>
	urates [0] = UART_RATE / 100;
    11ac:	9d030000 	stcls	0, cr0, [r3, #-0]
    11b0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	reinit_uart ();
    11b4:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
	EXTRA_INITIALIZERS;
    11b8:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
    11bc:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11c0:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
    11c4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    11c8:	01760323 	cmneq	r6, r3, lsr #6
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	01061105 	tsteq	r6, r5, lsl #2
    11d0:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
    11d8:	2a052073 	bcs	1493ac <__ccfg+0x129404>
			devinit [i] . init (devinit [i] . param);
    11dc:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	2076032f 	rsbscs	r0, r6, pc, lsr #6
    11e4:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    11e8:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
	IntEnable (INT_UART0_COMB);
    11ec:	23060205 	movwcs	r0, #25093	; 0x6205
    11f0:	2f060105 	svccs	0x00060105
}
    11f4:	01000b02 	tsteq	r0, r2, lsl #22
	tci_run_auxiliary_timer ();
    11f8:	00210501 	eoreq	r0, r1, r1, lsl #10
		diag ("");
    11fc:	0ba40205 	bleq	fe901a18 <_estack+0xde8fca18>
    1200:	aa030000 	bge	c1208 <__ccfg+0xa1260>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	06210517 			; <UNDEFINED> instruction: 0x06210517
		diag ("Leftover RAM: %d bytes",
    120c:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
    1210:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
    1214:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    1218:	11050169 	tstne	r5, r9, ror #2
    121c:	2f050106 	svccs	0x00050106
    1220:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
    1224:	2f052017 	svccs	0x00052017
    1228:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
    122c:	2a052e36 	bcs	14cb0c <__ccfg+0x12cb64>
    1230:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
    1234:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    1238:	01052e09 	tsteq	r5, r9, lsl #28
    123c:	06021306 	streq	r1, [r2], -r6, lsl #6
    1240:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1244:	0205001a 	andeq	r0, r5, #26
    1248:	00000bcc 	andeq	r0, r0, ip, asr #23
    124c:	0102b703 	tsteq	r2, r3, lsl #14
    1250:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1254:	0e061a05 	vmlaeq.f32	s2, s12, s10
    1258:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    125c:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    1260:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
    1264:	2b051406 	blcs	146284 <__ccfg+0x1262dc>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    126c:	06050522 	streq	r0, [r5], -r2, lsr #10
    1270:	06030501 	streq	r0, [r3], -r1, lsl #10
    1274:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
    1278:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    127c:	03052e06 	movweq	r2, #24070	; 0x5e06
    1280:	07053006 	streq	r3, [r5, -r6]
    1284:	06050106 	streq	r0, [r5], -r6, lsl #2
}
    1288:	06040520 	streq	r0, [r4], -r0, lsr #10
__attribute__ ((noreturn)) void __pi_release () {
    128c:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
    1290:	06040501 	streq	r0, [r4], -r1, lsl #10
    1294:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	06030501 	streq	r0, [r3], -r1, lsl #10
	check_stack_overflow;
    129c:	06120522 	ldreq	r0, [r2], -r2, lsr #10
    12a0:	20060501 	andcs	r0, r6, r1, lsl #10
    12a4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
	update_n_wake (MAX_WORD, NO);
    12a8:	01060705 	tsteq	r6, r5, lsl #14
    12ac:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    12b0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	for_all_tasks (__pi_curr) {
    12b4:	1f130617 	svcne	0x00130617
    12b8:	2f060405 	svccs	0x00060405
    12bc:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	__SLEEP;
    12c4:	03052006 	movweq	r2, #20486	; 0x5006
    12c8:	07052206 	streq	r2, [r5, -r6, lsl #4]
    12cc:	06050106 	streq	r0, [r5], -r6, lsl #2
    12d0:	06040520 	streq	r0, [r4], -r0, lsr #10
	system_event_count ++;
    12d4:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    12d8:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
	switch (__pi_systat.effpdm) {
    12dc:	03052f06 	movweq	r2, #24326	; 0x5f06
    12e0:	06120514 			; <UNDEFINED> instruction: 0x06120514
    12e4:	20060501 	andcs	r0, r6, r1, lsl #10
    12e8:	21060405 	tstcs	r6, r5, lsl #8
			__WFI ();
    12ec:	01060805 	tsteq	r6, r5, lsl #16
    12f0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    12f4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	check_stack_overflow;
    12f8:	1f130618 	svcne	0x00130618
    12fc:	2f060505 	svccs	0x00060505
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
    1304:	017da303 	cmneq	sp, r3, lsl #6
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	01061105 	tsteq	r6, r5, lsl #2
			goto Redo;
    130c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
	for_all_tasks (__pi_curr) {
    1310:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	06052019 			; <UNDEFINED> instruction: 0x06052019
    131c:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    1324:	20070501 	andcs	r0, r7, r1, lsl #10
    1328:	052f1405 	streq	r1, [pc, #-1029]!	; f2b <UART0IntHandler+0x5f>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    132c:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    1330:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	06050106 	streq	r0, [r5], -r6, lsl #2
    1338:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
			__WFI ();
    133c:	96032905 	strls	r2, [r3], -r5, lsl #18
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1340:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    1344:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
}
    1348:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	e6030605 	str	r0, [r3], -r5, lsl #12
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	08050106 	stmdaeq	r5, {r1, r2, r8}
    1358:	06060520 	streq	r0, [r6], -r0, lsr #10
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135c:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    1360:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
    1364:	17050501 	strne	r0, [r5, -r1, lsl #10]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	01062d05 	tsteq	r6, r5, lsl #26
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    1370:	7de80306 	stclvc	3, cr0, [r8, #24]!
    1374:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    1378:	06060501 	streq	r0, [r6], -r1, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    1380:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	06050106 	streq	r0, [r5], -r6, lsl #2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1388:	01012106 	tsteq	r1, r6, lsl #2
    138c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    1390:	03010618 	movweq	r0, #5656	; 0x1618
    1394:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
    1398:	13052206 	movwne	r2, #20998	; 0x5206
			SysCtrlSetRechargeBeforePowerDown
    139c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	06050520 	streq	r0, [r5], -r0, lsr #10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a4:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
    13a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
    13b0:	02052e02 	andeq	r2, r5, #2, 28
    13b4:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	06030501 	streq	r0, [r3], -r1, lsl #10
    13bc:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	0c052206 	sfmeq	f2, 4, [r5], {6}
    13c8:	0a050106 	beq	1417e8 <__ccfg+0x121840>
    13cc:	1f0c052f 	svcne	0x000c052f
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
			while (!(AONWUCPowerStatusGet () &
    13d4:	03051e0c 	movweq	r1, #24076	; 0x5e0c
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	01132f06 	tsteq	r3, r6, lsl #30
    13dc:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
    13e0:	13060105 	movwne	r0, #24837	; 0x6105
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
    13e8:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
    13ec:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
    13f0:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	06050106 	streq	r0, [r5], -r6, lsl #2
    13f8:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	c2032905 	andgt	r2, r3, #81920	; 0x14000
    1400:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
			reinit_uart ();
    1408:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    140c:	ba030605 	blt	c2c28 <__ccfg+0xa2c80>
    1410:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
}
    1414:	08050106 	stmdaeq	r5, {r1, r2, r8}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1418:	06060520 	streq	r0, [r6], -r0, lsr #10
    141c:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
    1424:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1428:	01062d05 	tsteq	r6, r5, lsl #26
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    1430:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
    1434:	0614054a 	ldreq	r0, [r4], -sl, asr #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	06060501 	streq	r0, [r6], -r1, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	06050106 	streq	r0, [r5], -r6, lsl #2
    1448:	01012106 	tsteq	r1, r6, lsl #2
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    144c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    1450:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1454:	06030501 	streq	r0, [r3], -r1, lsl #10
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1458:	4a02ce03 	bmi	b4c6c <__ccfg+0x94cc4>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145c:	01060605 	tsteq	r6, r5, lsl #12
    1460:	30060405 	andcc	r0, r6, r5, lsl #8
			PRCMPowerDomainOff (
    1464:	01001502 	tsteq	r0, r2, lsl #10
    1468:	002d0501 	eoreq	r0, sp, r1, lsl #10
	__SLEEP;
    146c:	0ce00205 	sfmeq	f0, 2, [r0], #20
    1470:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
  __ASM volatile ("cpsie i" : : : "memory");
    1474:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
	goto Redo;
    1478:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
    147c:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    1480:	052f0605 	streq	r0, [pc, #-1541]!	; e83 <ioreq_uart_a+0xc7>
    1484:	21061f02 	tstcs	r6, r2, lsl #30
    1488:	01060605 	tsteq	r6, r5, lsl #12
    148c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    1490:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    1494:	06060520 	streq	r0, [r6], -r0, lsr #10
    1498:	06040501 	streq	r0, [r4], -r1, lsl #10
    149c:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    14a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    14a4:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
    14a8:	01061005 	tsteq	r6, r5
    14ac:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
    14b0:	0187031a 	orreq	r0, r7, sl, lsl r3
    14b4:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
    14b8:	1f170520 	svcne	0x00170520
    14bc:	0a030905 	beq	c38d8 <__ccfg+0xa3930>
    14c0:	030d0520 	movweq	r0, #54560	; 0xd520
    14c4:	0b052076 	bleq	1496a4 <__ccfg+0x1296fc>
    14c8:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
    14cc:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
    14d0:	06010513 			; <UNDEFINED> instruction: 0x06010513
    14d4:	06030519 			; <UNDEFINED> instruction: 0x06030519
    14d8:	0a052f29 	beq	14d184 <__ccfg+0x12d1dc>
    14dc:	09020106 	stmdbeq	r2, {r1, r2, r8}
    14e0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	cli_tim;
    14e4:	02050033 	andeq	r0, r5, #51	; 0x33
    14e8:	00000d30 	andeq	r0, r0, r0, lsr sp
    14ec:	0105d303 	tsteq	r5, r3, lsl #6
	diag ("PicOS halted");
    14f0:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
	mdelay (500);
    14f4:	03063305 	movweq	r3, #25349	; 0x6305
    14f8:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
	setpowermode (2);
    14fc:	03330527 	teqeq	r3, #163577856	; 0x9c00000
	__PCB = NULL;
    1500:	02053c79 	andeq	r3, r5, #30976	; 0x7900
	release;
    1504:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
    1508:	03050502 	movweq	r0, #21762	; 0x5502
    150c:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
    1510:	06020501 	streq	r0, [r2], -r1, lsl #10
int main (void) {
    1514:	0104ab03 	tsteq	r4, r3, lsl #22
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
    151c:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	017dd903 	cmneq	sp, r3, lsl #18
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	system_init ();
    1528:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
	tcv_init ();
    152c:	03010501 	movweq	r0, #5377	; 0x1501
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1530:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
    1534:	03230506 			; <UNDEFINED> instruction: 0x03230506
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
    153c:	054f0605 	strbeq	r0, [pc, #-1541]	; f3f <UART0IntHandler+0x73>
    1540:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1544:	06020501 	streq	r0, [r2], -r1, lsl #10
    1548:	66029e03 	strvs	r9, [r2], -r3, lsl #28
	delay (16, 0);
    154c:	01060d05 	tsteq	r6, r5, lsl #26
    1550:	2f060205 	svccs	0x00060205
    1554:	13060105 	movwne	r0, #24837	; 0x6105
	__pi_release ();
    1558:	01000c02 	tsteq	r0, r2, lsl #24
    155c:	001c0501 	andseq	r0, ip, r1, lsl #10
    1560:	0d840205 	sfmeq	f0, 4, [r4, #20]
    1564:	ef030000 	svc	0x00030000
    1568:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    156c:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
    1570:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
static void killev (__pi_pcb_t *pid) {
    1574:	17050501 	strne	r0, [r5, -r1, lsl #10]
	wfun = (aword)(pid->code);
    1578:	01062305 	tsteq	r6, r5, lsl #6
	for_all_tasks (i) {
    157c:	02050104 	andeq	r0, r5, #4, 2
		for (j = 0; j < nevents (i); j++) {
    1580:	20028803 	andcs	r8, r2, r3, lsl #16
    1584:	23050604 	movwcs	r0, #22020	; 0x5604
    1588:	207df803 	rsbscs	pc, sp, r3, lsl #16
			    || i->Events [j] . Event == wfun
    158c:	02050104 	andeq	r0, r5, #4, 2
		for (j = 0; j < nevents (i); j++) {
    1590:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
			if (i->Events [j] . Event == (aword)pid
    1594:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
    1598:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
    159c:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
				wakeupev (i, j);
    15a0:	17050517 	smladne	r5, r7, r5, r0
    15a4:	01062305 	tsteq	r6, r5, lsl #6
	for_all_tasks (i) {
    15a8:	02050104 	andeq	r0, r5, #4, 2
}
    15ac:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
static void qfree (aword *ch) {
    15b4:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b8:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
	cc = (aword*)(mpools + MA_NP);
    15bc:	01062405 	tsteq	r6, r5, lsl #8
	m_setnextp (ch, chunk);
    15c0:	02050104 	andeq	r0, r5, #4, 2
	m_setnextp (cc, ch);
    15c4:	7db20306 	ldcvc	3, cr0, [r2, #24]!
}
    15c8:	000e0258 	andeq	r0, lr, r8, asr r2
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15cc:	3d050101 	stfccs	f0, [r5, #-4]
    15d0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    15d4:	0300000d 	movweq	r0, #13
			m_setnextp (cc, m_nextp (chunk));
    15d8:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
			m_size (chunk) += m_hdrlen + m_size (ch);
    15dc:	3d051402 	cfstrscc	mvf1, [r5, #-8]
    15e0:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
    15e4:	0b030605 	bleq	c2e00 <__ccfg+0xa2e58>
    15e8:	060e0582 	streq	r0, [lr], -r2, lsl #11
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15ec:	2f080501 	svccs	0x00080501
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f0:	051f0e05 	ldreq	r0, [pc, #-3589]	; 7f3 <root+0x2cf>
    15f4:	052f0605 	streq	r0, [pc, #-1541]!	; ff7 <__pinlist_setirq+0x27>
    15f8:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
			m_setnextp (cc, m_nextp (chunk));
    15fc:	0f052006 	svceq	0x00052006
			m_size (ch) += m_hdrlen + m_size (chunk);
    1600:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1604:	06070534 			; <UNDEFINED> instruction: 0x06070534
    1608:	06050501 	streq	r0, [r5], -r1, lsl #10
    160c:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
    1610:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    1614:	20340301 	eorscs	r0, r4, r1, lsl #6
			if (m_size (chunk) >= m_size (ch))
    1618:	a0030905 	andge	r0, r3, r5, lsl #18
    161c:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
    1620:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
		chunk = m_nextp (chunk))
    1624:	0e052108 	adfeqs	f2, f5, #0.0
    1628:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
    162c:	0b030604 	bleq	c2e44 <__ccfg+0xa2e9c>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1630:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
	diag_wait (a);
    1634:	07050106 	streq	r0, [r5, -r6, lsl #2]
	diag_wchar (c, a);
    1638:	0605052e 	streq	r0, [r5], -lr, lsr #10
    163c:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
}
    1640:	060b0524 	streq	r0, [fp], -r4, lsr #10
    1644:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
	syserror (ESTATE, "state");
    1648:	21062d04 	tstcs	r6, r4, lsl #26
    164c:	01060b05 	tsteq	r6, r5, lsl #22
    1650:	03060505 	movweq	r0, #25861	; 0x6505
    1654:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	05053006 	streq	r3, [r5, #-6]
void utimer_add (address ut) {
    165c:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
    1660:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
		if (__pi_utims [i] == NULL)
    1664:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
	for (i = 0; i < MAX_UTIMERS; i++)
    1668:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
    166c:	07053506 	streq	r3, [r5, -r6, lsl #10]
		syserror (ERESOURCE, "ut a");
    1670:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	__pi_utims [i] = ut;
    1674:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
}
    1678:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    167c:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
    1680:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
	*t = v;
    1684:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
	TCI_RUN_AUXILIARY_TIMER;
    1688:	03040520 	movweq	r0, #17696	; 0x4520
void update_n_wake (word min, Boolean force) {
    168c:	08052030 	stmdaeq	r5, {r4, r5, sp}
	if (TCI_UPDATE_DELAY_TICKS (force))
    1690:	03050521 	movweq	r0, #21793	; 0x5521
    1694:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
    1698:	3c110306 	ldccc	3, cr0, [r1], {6}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169c:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
    16a0:	1f04053d 	svcne	0x0004053d
    16a4:	0b052f06 	bleq	14d2c4 <__ccfg+0x12d31c>
    16a8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    16ac:	07052506 	streq	r2, [r5, -r6, lsl #10]
    16b0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    16b4:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    16b8:	08050106 	stmdaeq	r5, {r1, r2, r8}
    16bc:	0605054a 	streq	r0, [r5], -sl, asr #10
    16c0:	06040531 			; <UNDEFINED> instruction: 0x06040531
    16c4:	062e1603 	strteq	r1, [lr], -r3, lsl #12
    16c8:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
    16cc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
		for_all_tasks (i) {
    16d0:	052f0605 	streq	r0, [pc, #-1541]!	; 10d3 <system_init+0x23>
	__pi_mintk = znew + min;
    16d4:	7f880302 	svcvc	0x00880302
    16d8:	06100501 	ldreq	r0, [r0], -r1, lsl #10
			if (!twaiting (i))
    16dc:	030c0501 	movweq	r0, #50433	; 0xc501
    16e0:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e4:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
    16e8:	0c052f06 	stceq	15, cr2, [r5], {6}
    16ec:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    16f0:	20110306 	andscs	r0, r1, r6, lsl #6
    16f4:	01001202 	tsteq	r0, r2, lsl #4
    16f8:	002b0501 	eoreq	r0, fp, r1, lsl #10
    16fc:	00000205 	andeq	r0, r0, r5, lsl #4
    1700:	ea030000 	b	c1708 <__ccfg+0xa1760>
    1704:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    1708:	06010514 			; <UNDEFINED> instruction: 0x06010514
    170c:	00060213 	andeq	r0, r6, r3, lsl r2
    1710:	19050101 	stmdbne	r5, {r0, r8}
				wakeuptm (i);
    1714:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    1718:	0300000e 	movweq	r0, #14
		for_all_tasks (i) {
    171c:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
				d = i->Timer - znew;
    1720:	06041402 	streq	r1, [r4], -r2, lsl #8
    1724:	12032405 	andne	r2, r3, #83886080	; 0x5000000
    1728:	17050501 	strne	r0, [r5, -r1, lsl #10]
		if ((word)(__pi_mintk - znew) < min) 
    172c:	01062205 	tsteq	r6, r5, lsl #4
    1730:	19050104 	stmdbne	r5, {r2, r8}
    1734:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
	__pi_old = znew;
    1738:	03220506 			; <UNDEFINED> instruction: 0x03220506
}
    173c:	01042019 	tsteq	r4, r9, lsl r0
	TCI_RUN_DELAY_TIMER;
    1740:	6b030605 	blvs	c2f5c <__ccfg+0xa2fb4>
}
    1744:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    1748:	20150322 	andscs	r0, r5, r2, lsr #6
    174c:	02050104 	andeq	r0, r5, #4, 2
    1750:	206b0306 	rsbcs	r0, fp, r6, lsl #6
    1754:	01060605 	tsteq	r6, r5, lsl #12
void proceed (word state) {
    1758:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
	prcdstate (__pi_curr, state);
    175c:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
    1760:	0603052e 	streq	r0, [r3], -lr, lsr #10
	release;
    1764:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
    1768:	01010113 	tsteq	r1, r3, lsl r1
void __pi_wait (aword event, word state) {
    176c:	0620062e 	strteq	r0, [r0], -lr, lsr #12
	sint j = nevents (__pi_curr);
    1770:	4a662e66 	bmi	198d110 <__ccfg+0x196d168>
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	02052e01 	andeq	r2, r5, #1, 28
    1778:	06060515 			; <UNDEFINED> instruction: 0x06060515
    177c:	20050501 	andcs	r0, r5, r1, lsl #10
		syserror (ENEVENTS, "sw");
    1780:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
    1784:	03052e18 	movweq	r2, #24088	; 0x5e18
	setestate (__pi_curr->Events [j], state, event);
    1788:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
	incwait (__pi_curr);
    178c:	014b062c 	cmpeq	fp, ip, lsr #12
	setestate (__pi_curr->Events [j], state, event);
    1790:	01011358 	tsteq	r1, r8, asr r3
}
    1794:	20062e01 	andcs	r2, r6, r1, lsl #28
    1798:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    179c:	0105014a 	tsteq	r5, sl, asr #2
void __pi_trigger (aword event) {
    17a0:	0b023206 	bleq	8dfc0 <__ccfg+0x6e018>
	for_all_tasks (i) {
    17a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		for (j = 0; j < nevents (i); j++) {
    17a8:	02050021 	andeq	r0, r5, #33	; 0x21
    17ac:	00000f8c 	andeq	r0, r0, ip, lsl #31
    17b0:	0107d903 	tsteq	r7, r3, lsl #18
    17b4:	13140205 	tstne	r4, #1342177280	; 0x50000000
			if (i->Events [j] . Event == event) {
    17b8:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    17bc:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    17c0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				wakeupev (i, j);
    17c4:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
    17c8:	03040106 	movweq	r0, #16646	; 0x4106
	for_all_tasks (i) {
    17cc:	83030305 	movwhi	r0, #13061	; 0x3305
}
    17d0:	01042079 	tsteq	r4, r9, ror r0
aword __pi_join (aword pid, word st) {
    17d4:	03060205 	movweq	r0, #25093	; 0x6205
	for_all_tasks (i) {
    17d8:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
    17dc:	0305010e 	movweq	r0, #20750	; 0x510e
	return 0;
    17e0:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
		if ((aword)i == pid) {
    17e4:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
			__pi_wait (pid, st);
    17e8:	0104017d 	tsteq	r4, sp, ror r1
}
    17ec:	d3030805 	movwle	r0, #14341	; 0x3805
	for_all_tasks (i) {
    17f0:	04042002 	streq	r2, [r4], #-2
    17f4:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
void delay (word d, word state) {
    17f8:	0104207d 	tsteq	r4, sp, ror r0
	settstate (__pi_curr, state);
    17fc:	d3030805 	movwle	r0, #14341	; 0x3805
    1800:	03052002 	movweq	r2, #20482	; 0x5002
    1804:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    1808:	21060305 	tstcs	r6, r5, lsl #6
	update_n_wake (d, YES);
    180c:	29050404 	stmdbcs	r5, {r2, sl}
    1810:	017da703 	cmneq	sp, r3, lsl #14
	__pi_curr->Timer = __pi_old + d;
    1814:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1818:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
	inctimer (__pi_curr);
    181c:	01042e2d 	tsteq	r4, sp, lsr #28
    1820:	03060305 	movweq	r0, #25349	; 0x6305
    1824:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
}
    1828:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
    182c:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
	if (fun == NULL)
    1830:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
		return (int) __pi_curr;
    1834:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
    1838:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	for_all_tasks (i)
    183c:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
}
    1840:	58410520 	stmdapl	r1, {r5, r8, sl}^
		if (i->code == fun)
    1844:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	for_all_tasks (i)
    1848:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    184c:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
    1850:	03290504 			; <UNDEFINED> instruction: 0x03290504
int __pi_strlen (const char *s) {
    1854:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
	for (i = 0; *(s+i) != '\0'; i++);
    1858:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
}
    185c:	01040106 	tsteq	r4, r6, lsl #2
	for (i = 0; *(s+i) != '\0'; i++);
    1860:	03060305 	movweq	r0, #25349	; 0x6305
	while ((Boolean)(*d++ = *s++));
    1864:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    1868:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
    186c:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
}
    1870:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
	while (n-- && (*s != '\0'))
    1874:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
    1878:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
	*d = '\0';
    187c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	while (n-- && (*s != '\0'))
    1880:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
    1884:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
		*d++ = *s++;
    1888:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    188c:	02050021 	andeq	r0, r5, #33	; 0x21
	while (n--)
    1890:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1894:	0107ec03 	tsteq	r7, r3, lsl #24
		*dest++ = *src++;
    1898:	13140205 	tstne	r4, #1342177280	; 0x50000000
    189c:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    18a0:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
	while (n--)
    18a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    18a8:	90030621 	andls	r0, r3, r1, lsr #12
		*dest++ = c;
    18ac:	03040107 	movweq	r0, #16647	; 0x4107
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
		syserror (EREQPAR, "addv");
    18b4:	01042078 	tsteq	r4, r8, ror r0
		syserror (ERESOURCE, "addv");
    18b8:	03060205 	movweq	r0, #25093	; 0x6205
	if (ioreq [loc] != NULL)
    18bc:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
    18c0:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
		syserror (ERESOURCE, "addv");
    18c4:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
	ioreq [loc] = rf;
    18c8:	9b033305 	blls	ce4e4 <__ccfg+0xae53c>
}
    18cc:	0104207d 	tsteq	r4, sp, ror r0
    18d0:	e6030805 	str	r0, [r3], -r5, lsl #16
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	04042002 	streq	r2, [r4], #-2
    18d8:	9a032d05 	bls	cccf4 <__ccfg+0xacd4c>
    18dc:	0104207d 	tsteq	r4, sp, ror r0
    18e0:	e8030305 	stmda	r3, {r0, r2, r8, r9}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e4:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
    18e8:	01060805 	tsteq	r6, r5, lsl #16
    18ec:	051f1e05 	ldreq	r1, [pc, #-3589]	; aef <__pi_offdomain+0x1f>
		syserror (ENODEVICE, "io");
    18f0:	03052106 	movweq	r2, #20742	; 0x5106
    18f4:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
	if (len == 0)
    18f8:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    1900:	06330517 			; <UNDEFINED> instruction: 0x06330517
	if (ret >= 0)
    1904:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (ret == -1) {
    1908:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
    190c:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
		if (retry == WNONE)
    1910:	2d050404 	cfstrscs	mvf0, [r5, #-16]
		iowait (dev, operation, retry);
    1914:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
    1918:	03050104 	movweq	r0, #20740	; 0x5104
    191c:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
			release;
    1920:	06410520 	strbeq	r0, [r1], -r0, lsr #10
	if (ret == -2) {
    1924:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
		if (retry != WNONE) {
    1928:	010e051d 	tsteq	lr, sp, lsl r5
    192c:	01060205 	tsteq	r6, r5, lsl #4
			iowait (dev, operation, retry);
    1930:	03042606 	movweq	r2, #17926	; 0x4606
    1934:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
			(ioreq [dev]) (NONE, buf, len);
    1938:	01040178 	tsteq	r4, r8, ror r1
    193c:	03060105 	movweq	r0, #24837	; 0x6105
    1940:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
		(ioreq [dev]) (NONE, buf, len);
    1944:	01010008 	tsteq	r1, r8
    1948:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    194c:	00100c02 	andseq	r0, r0, r2, lsl #24
}
    1950:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
	if (retry != WNONE) {
    1954:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
		delay (-ret - 2, retry);
    1958:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
    195c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1960:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
    1964:	07040107 	streq	r0, [r4, -r7, lsl #2]
		release;
    1968:	bb030505 	bllt	c2d84 <__ccfg+0xa2ddc>
    196c:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1970:	0602052e 	streq	r0, [r2], -lr, lsr #10
    1974:	01013d3d 	tsteq	r1, sp, lsr sp
    1978:	20063c01 	andcs	r3, r6, r1, lsl #24
    197c:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    1980:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		syserror (ERESOURCE, "mal1");
    1984:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    1988:	050f0105 	streq	r0, [pc, #-261]	; 188b <__pi_strncpy+0x19>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    198c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1990:	02052004 	andeq	r2, r5, #4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1994:	01013d06 	tsteq	r1, r6, lsl #26
	m_size (mpools [0]) = mlen - m_hdrlen;
    1998:	20063c01 	andcs	r3, r6, r1, lsl #24
	m_magic (mpools [0]) = MALLOC_MAGIC;
    199c:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    19a0:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
    19a4:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
}
    19a8:	06010501 	streq	r0, [r1], -r1, lsl #10
    19ac:	0107d003 	tsteq	r7, r3
    19b0:	01000b02 	tsteq	r0, r2, lsl #22
    19b4:	00150501 	andseq	r0, r5, r1, lsl #10
    19b8:	10b00205 	adcsne	r0, r0, r5, lsl #4
    19bc:	80030000 	andhi	r0, r3, r0
void __pi_free (aword *ch) {
    19c0:	02050108 	andeq	r0, r5, #8, 2
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    19c4:	06150514 			; <UNDEFINED> instruction: 0x06150514
    19c8:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
		syserror (EMALLOC, "malg");
    19cc:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    19d0:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
	mcfree [MA_NP] += m_size (ch);
    19d4:	a7030505 	strge	r0, [r3, -r5, lsl #10]
		m_size (ch) ^= MALLOC_UMASK;
    19d8:	3105017c 	tstcc	r5, ip, ror r1
    19dc:	01040106 	tsteq	r4, r6, lsl #2
	mcfree [MA_NP] += m_size (ch);
    19e0:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
	QFREE;
    19e4:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
	if (mevent [MA_NP] . nwait) {
    19e8:	bb033105 	bllt	cde04 <__ccfg+0xade5c>
    19ec:	01042002 	tsteq	r4, r2
		trigger ((aword)(&(mevent [MA_NP])));
    19f0:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
		mevent [MA_NP] . nwait --;
    19f4:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
}
    19f8:	9b030505 	blls	c2e14 <__ccfg+0xa2e6c>
    19fc:	2d052e02 	stccs	14, cr2, [r5, #-8]
    1a00:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
    1a04:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
void kill (aword pid) {
    1a08:	03310509 	teqeq	r1, #37748736	; 0x2400000
		pid = (aword) __pi_curr;
    1a0c:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
	j = NULL;
    1a10:	06020501 	streq	r0, [r2], -r1, lsl #10
	for_all_tasks (i) {
    1a14:	2003dc03 	andcs	sp, r3, r3, lsl #24
	syserror (EREQPAR, "kpi");
    1a18:	0179e703 	cmneq	r9, r3, lsl #14
    1a1c:	01070514 	tsteq	r7, r4, lsl r5
		if ((aword)i == pid) {
    1a20:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
    1a24:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
				__PCB = i->Next;
    1a28:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
			killev (i);
    1a2c:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
			ufree (i);
    1a30:	2f060305 	svccs	0x00060305
			if (i == __pi_curr)
    1a34:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
    1a38:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
				release;
    1a3c:	052f0603 	streq	r0, [pc, #-1539]!	; 1441 <__pi_release+0x1b5>
				j->Next = i->Next;
    1a40:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1a44:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
    1a48:	03290504 			; <UNDEFINED> instruction: 0x03290504
}
    1a4c:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
    1a50:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    1a54:	06380517 			; <UNDEFINED> instruction: 0x06380517
	if (size < 8)
    1a58:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
		_size = 2;
    1a5c:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a60:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
		_size = (((aword)size) + 3) >> 2;
    1a64:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a68:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
		_size = (((aword)size) + 3) >> 2;
    1a6c:	27032905 	strcs	r2, [r3, -r5, lsl #18]
		if (mevent [MA_NP] . nfail != 255)
    1a70:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1a74:	01062d05 	tsteq	r6, r5, lsl #26
			mevent [MA_NP] . nfail ++;
    1a78:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		mnfree [MA_NP] = 0;
    1a7c:	3c560306 	mrrccc	3, 0, r0, r6, cr6
    1a80:	29050404 	stmdbcs	r5, {r2, sl}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a84:	0100db03 	tsteq	r0, r3, lsl #22
    1a88:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			syserror (EMALLOC, "malc");
    1a8c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1a90:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
		if (m_size (chunk) >= _size)
    1a94:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
    1a98:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
		chunk = m_nextp (chunk)) {
    1a9c:	06010602 	streq	r0, [r1], -r2, lsl #12
		m_setnextp (cc, m_nextp (chunk));
    1aa0:	2e069a03 	vmlacs.f32	s18, s12, s6
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1aa4:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
    1aa8:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
			m_size (chunk) = _size;
    1aac:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
			cc = chunk + _size + m_hdrlen;
    1ab0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1ab4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			m_size (cc) = waste - m_hdrlen;
    1ab8:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
			QFREE;
    1abc:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
		mevent [MA_NP] . nfail = 0;
    1ac0:	7a9a032d 	bvc	fe68277c <_estack+0xde67d77c>
		mcfree [MA_NP] -= m_size (chunk);
    1ac4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1ac8:	e6030602 	str	r0, [r3], -r2, lsl #12
    1acc:	04042005 	streq	r2, [r4], #-5
    1ad0:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
		m_size (chunk) |= MALLOC_UMASK;
    1ad4:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		m_size (chunk) |= MALLOC_UMASK;
    1adc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			mnfree [MA_NP] = mcfree [MA_NP];
    1ae0:	e6030602 	str	r0, [r3], -r2, lsl #12
}
    1ae4:	01012005 	tsteq	r1, r5
    1ae8:	01010101 	tsteq	r1, r1, lsl #2
    1aec:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1af0:	29050404 	stmdbcs	r5, {r2, sl}
    1af4:	017acb03 	cmneq	sl, r3, lsl #22
    1af8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1afc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
aword __pi_fork (fsmcode func, aword data) {
    1b00:	03020501 	movweq	r0, #9473	; 0x2501
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b04:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
    1b08:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1b0c:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
		if ((j = __PCB) == NULL)
    1b10:	06020501 	streq	r0, [r2], -r1, lsl #10
	i->Next = NULL;
    1b14:	2005b003 	andcs	fp, r5, r3
	i->data = data;
    1b18:	29050404 	stmdbcs	r5, {r2, sl}
		if ((j = __PCB) == NULL)
    1b1c:	017acb03 	cmneq	sl, r3, lsl #22
}
    1b20:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			for (; j->Next != NULL; j = j->Next);
    1b24:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1b28:	06020501 	streq	r0, [r2], -r1, lsl #10
	return (aword) i;
    1b2c:	2005b003 	andcs	fp, r5, r3
    1b30:	01010101 	tsteq	r1, r1, lsl #2
	if (mevent [MA_NP] . nwait != 255)
    1b34:	23050101 	movwcs	r0, #20737	; 0x5101
    1b38:	01100306 	tsteq	r0, r6, lsl #6
    1b3c:	70030205 	andvc	r0, r3, r5, lsl #4
		mevent [MA_NP] . nwait ++;
    1b40:	01580620 	cmpeq	r8, r0, lsr #12
	wait ((aword)(&(mevent [MA_NP])), state);
    1b44:	010d032e 	tsteq	sp, lr, lsr #6
    1b48:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
void diag (const char *mess, ...) {
    1b4c:	017ecd03 	cmneq	lr, r3, lsl #26
    1b50:	01062f05 	tsteq	r6, r5, lsl #30
    1b54:	27050104 	strcs	r0, [r5, -r4, lsl #2]
	diag_disable_int (a, is);
    1b58:	2001ba03 	andcs	fp, r1, r3, lsl #20
    1b5c:	2f050a04 	svccs	0x00050a04
    1b60:	207ec603 	rsbscs	ip, lr, r3, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    1b64:	02050104 	andeq	r0, r5, #4, 2
	diag_disable_int (a, is);
    1b68:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
	while (*mess != '\0') {
    1b6c:	06230520 	strteq	r0, [r3], -r0, lsr #10
	dgout ('\r');
    1b70:	03020513 	movweq	r0, #9491	; 0x2513
	dgout ('\n');
    1b74:	2305200c 	movwcs	r2, #20492	; 0x500c
    1b78:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    1b7c:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
	diag_wait (a);
    1b80:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
	diag_enable_int (a, is);
    1b84:	27052802 	strcs	r2, [r5, -r2, lsl #16]
    1b88:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
}
    1b8c:	3f280602 	svccc	0x00280602
    1b90:	4a0a0331 	bmi	28285c <__ccfg+0x2628b4>
    1b94:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
		if (*mess == '%') {
    1b98:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
    1b9c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
			if (*mess == 'l') {
    1ba0:	017eae03 	cmneq	lr, r3, lsl #28
    1ba4:	0d050104 	stfeqs	f0, [r5, #-16]
				mess++;
    1ba8:	01d40306 	bicseq	r0, r4, r6, lsl #6
				val = va_arg (ap, lword);
    1bac:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
				bc = 32;
    1bb0:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
				bc = 16;
    1bb4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
			switch (*mess) {
    1bb8:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
    1bbc:	0d052001 	stceq	0, cr2, [r5, #-4]
    1bc0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				dgout ('%');
    1bc4:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
    1bc8:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
				dgout (*mess);
    1bcc:	0605152e 	streq	r1, [r5], -lr, lsr #10
    1bd0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			switch (*mess) {
    1bd4:	0603052e 	streq	r0, [r3], -lr, lsr #10
					v = __pi_hex_enc_table [
    1bd8:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
					i += 4;
    1bdc:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
					(val >> (bc - i)) & 0xf];
    1be0:	030c0401 	movweq	r0, #50177	; 0xc401
    1be4:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
					dgout (v);
    1be8:	0b040106 	bleq	102008 <__ccfg+0xe2060>
    1bec:	03060505 	movweq	r0, #25861	; 0x6505
				while (i < bc) {
    1bf0:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
			mess++;
    1bf4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
					d /= 10;
    1bf8:	01044b06 	tsteq	r4, r6, lsl #22
				if ((val >> (bc - 1)) & 1) {
    1bfc:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
    1c00:	03054a06 	movweq	r4, #23046	; 0x5a06
					dgout ('-');
    1c04:	13040513 	movwne	r0, #17683	; 0x4513
    1c08:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
						val |= 0xffff0000;
    1c0c:	cb031902 	blgt	c801c <__ccfg+0xa8074>
    1c10:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
    1c14:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
				d = (bc == 16) ? 10000 : 1000000000;
    1c18:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
    1c1c:	06230517 			; <UNDEFINED> instruction: 0x06230517
    1c20:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
					v = (word) (val / d);
    1c24:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
					if (v || d == 1) break;
    1c28:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    1c2c:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
					d /= 10;
    1c30:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
				d = (bc == 16) ? 10000 : 1000000000;
    1c34:	dd030602 	stcle	6, cr0, [r3, #-8]
					dgout (v + '0');
    1c38:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
    1c3c:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    1c40:	03052d02 	movweq	r2, #23810	; 0x5d02
					d /= 10;
    1c44:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
					val = val - (v * d);
    1c48:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
					if (d == 0) break;
    1c4c:	03051306 	movweq	r1, #21254	; 0x5306
					v = (word) (val / d);
    1c50:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
    1c54:	1f050101 	svcne	0x00050101
				if (bc == 16)
    1c58:	68020500 	stmdavs	r2, {r8, sl}
				d = (bc == 16) ? 10000 : 1000000000;
    1c5c:	03000012 	movweq	r0, #18
					val &= 0xffff;
    1c60:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
					dgout (*s);
    1c64:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
					s++;
    1c68:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
				while (*s != '\0') {
    1c6c:	2c056615 	stccs	6, cr6, [r5], {21}
    1c70:	20150520 	andscs	r0, r5, r0, lsr #10
			dgout (*mess++);
    1c74:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    1c78:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
    1c7c:	03022301 	movweq	r2, #8961	; 0x2301
    1c80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1c84:	0205001c 	andeq	r0, r5, #28
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1c88:	00000000 	andeq	r0, r0, r0
    1c8c:	010adb03 	tsteq	sl, r3, lsl #22
    1c90:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1c94:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
	^ entropy
    1c98:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
}
    1c9c:	07052506 	streq	r2, [r5, -r6, lsl #10]
    1ca0:	58060520 	stmdapl	r6, {r5, r8, sl}
    1ca4:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1ca8:	01060605 	tsteq	r6, r5, lsl #12
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1cac:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
	word cs = size + hblenb;
    1cb0:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1cb4:	06200602 	strteq	r0, [r0], -r2, lsl #12
    1cb8:	0601054d 	streq	r0, [r1], -sp, asr #10
	p -> length = size;
    1cbc:	00040213 	andeq	r0, r4, r3, lsl r2
}
    1cc0:	31050101 	tstcc	r5, r1, lsl #2
	if (p->attributes.b.queued) {
    1cc4:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1cc8:	03000012 	movweq	r0, #18
    1ccc:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1cd0:	03041402 	movweq	r1, #17410	; 0x4402
		p->attributes.b.queued = 0;
    1cd4:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
    1cd8:	01040177 	tsteq	r4, r7, ror r1
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1cdc:	03063105 	movweq	r3, #24837	; 0x6105
	deq (p);	// Remove from queue
    1ce0:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
}
    1ce4:	03030503 	movweq	r0, #13571	; 0x3503
	tfree ((address)p);
    1ce8:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cec:	03310501 	teqeq	r1, #4194304	; 0x400000
    1cf0:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
    1cf4:	03030503 	movweq	r0, #13571	; 0x3503
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf8:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
    1cfc:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (q_empty (q))
    1d00:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
    1d04:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
		trigger (q);
    1d08:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
	if (p->attributes.b.urgent) {
    1d0c:	01046676 	tsteq	r4, r6, ror r6
		p->u.bqueue.next = q->next;
    1d10:	03060205 	movweq	r0, #25093	; 0x6205
		p->u.bqueue.prev = q;
    1d14:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
		q->next->prev = (qitem_t*) p;
    1d18:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
	p->attributes.b.queued = 1;
    1d1c:	19010101 	stmdbne	r1, {r0, r8}
    1d20:	01044a5b 	tsteq	r4, fp, asr sl
}
    1d24:	03061a05 	movweq	r1, #27141	; 0x6a05
		p->u.bqueue.prev = q->prev;
    1d28:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
		q->prev->next = (qitem_t*) p;
    1d2c:	0602050d 	streq	r0, [r2], -sp, lsl #10
		q->prev = (qitem_t*) p;
    1d30:	2076f903 	rsbscs	pc, r6, r3, lsl #18
    1d34:	01010101 	tsteq	r1, r1, lsl #2
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1d38:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
	deq (p);	// Soft dequeue, timer and hook left intact
    1d3c:	01360303 	teqeq	r6, r3, lsl #6
	switch (dv) {
    1d40:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1d44:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
    1d48:	eb030104 	bl	c2160 <__ccfg+0xa21b8>
    1d4c:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
			p->attributes.b.urgent = 1;
    1d50:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1d54:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
			verify_ses (p, "dispose ses");
    1d58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1d5c:	20150520 	andscs	r0, r5, r0, lsr #10
    1d60:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    1d64:	216a0604 	cmncs	sl, r4, lsl #12
    1d68:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
			verify_phy (p, "dispose phy");
    1d6c:	01778e03 	cmneq	r7, r3, lsl #28
    1d70:	03050304 	movweq	r0, #21252	; 0x5304
}
    1d74:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
			enq (oqueues [p->attributes.b.phys], p);
    1d78:	0302050d 	movweq	r0, #9485	; 0x250d
			p->attributes.b.urgent = 1;
    1d7c:	20202055 	eorcs	r2, r0, r5, asr r0
    1d80:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
			verify_phy (p, "dispose phy");
    1d84:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
    1d88:	a6030305 	strge	r0, [r3], -r5, lsl #6
    1d8c:	10054a75 	andne	r4, r5, r5, ror sl
    1d90:	06050106 	streq	r0, [r5], -r6, lsl #2
    1d94:	20230520 	eorcs	r0, r3, r0, lsr #10
    1d98:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
			enq (oqueues [p->attributes.b.phys], p);
    1d9c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    1da0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
}
    1da4:	052f0604 	streq	r0, [pc, #-1540]!	; 17a8 <__pi_trigger+0x8>
			rlp (p);
    1da8:	01041c02 	tsteq	r4, r2, lsl #24
}
    1dac:	8f030405 	svchi	0x00030405
    1db0:	2a052e09 	bcs	14d5dc <__ccfg+0x12d634>
    1db4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1db8:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
    1dbc:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1dc0:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1dc4:	017fb203 	cmneq	pc, r3, lsl #4
	if (b->attributes.b.outgoing) {
    1dc8:	01062905 	tsteq	r6, r5, lsl #18
	b = header (p);
    1dcc:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (b->attributes.b.outgoing) {
    1dd0:	00d10306 	sbcseq	r0, r1, r6, lsl #6
		verify_ses (b, "tcv02");
    1dd4:	02044d66 	andeq	r4, r4, #6528	; 0x1980
    1dd8:	9f030505 	svcls	0x00030505
    1ddc:	01040178 	tsteq	r4, r8, ror r1
    1de0:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    1de4:	1a052007 	bne	149e08 <__ccfg+0x129e60>
		verify_plg (b, tcv_out, "tcv03");
    1de8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1dec:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    1df0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1df4:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    1df8:	03050502 	movweq	r0, #21762	; 0x5502
    1dfc:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
    1e00:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
    1e04:	06040501 	streq	r0, [r4], -r1, lsl #10
    1e08:	2007f103 	andcs	pc, r7, r3, lsl #2
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e0c:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
}
    1e10:	0178a003 	cmneq	r8, r3
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e14:	31050904 	tstcc	r5, r4, lsl #18
		rlp (b);
    1e18:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
}
    1e1c:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
		rlp (b);
    1e20:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
    1e24:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
    1e28:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
    1e2c:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1e30:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e34:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1e38:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
    1e3c:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e40:	a0033105 	andge	r3, r3, r5, lsl #2
	va_start (ap, plid);
    1e44:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e48:	06520515 			; <UNDEFINED> instruction: 0x06520515
    1e4c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1e50:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
    1e54:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    1e58:	7a9b0352 	bvc	fe6c2ba8 <_estack+0xde6bdba8>
    1e5c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
			syserror (ENODEVICE, "tcv04");
    1e60:	e0030604 	and	r0, r3, r4, lsl #12
		syserror (EMALLOC, "tcv05");
    1e64:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
	attp.b.outgoing = 1;
    1e68:	86030505 	strhi	r0, [r3], -r5, lsl #10
    1e6c:	01040178 	tsteq	r4, r8, ror r1
    1e70:	fc030405 	stc2	4, cr0, [r3], {5}
    1e74:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e78:	ea030505 	b	c3294 <__ccfg+0xa32ec>
		if (descriptors [fd] == NULL)
    1e7c:	3105017a 	tstcc	r5, sl, ror r1
    1e80:	29050106 	stmdbcs	r5, {r1, r2, r8}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e84:	2004b603 	andcs	fp, r4, r3, lsl #12
		return ERROR;
    1e88:	ca033105 	bgt	ce2a4 <__ccfg+0xae2fc>
}
    1e8c:	01042e7b 	tsteq	r4, fp, ror lr
    1e90:	03060405 	movweq	r0, #25605	; 0x6405
    1e94:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
	s->attpattern.b.session = fd;
    1e98:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    1e9c:	6a062004 	bvs	189eb4 <__ccfg+0x169f0c>
	descriptors [fd] = s;
    1ea0:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	q_init (&(s->rqueue));
    1ea4:	01799f03 	cmneq	r9, r3, lsl #30
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1ea8:	01063f05 	tsteq	r6, r5, lsl #30
    1eac:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1eb0:	2006ed03 	andcs	lr, r6, r3, lsl #26
    1eb4:	3f050904 	svccc	0x00050904
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1eb8:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1ebc:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1ec0:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
	descriptors [fd] = s;
    1ec4:	0309042e 	movweq	r0, #37934	; 0x942e
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1ec8:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1ecc:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
	if (s == NULL)
    1ed0:	03040501 	movweq	r0, #17665	; 0x4501
		syserror (EMALLOC, "tcv05");
    1ed4:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
    1ed8:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1edc:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
    1ee0:	06040501 	streq	r0, [r4], -r1, lsl #10
    1ee4:	4a00f303 	bmi	3eaf8 <__ccfg+0x1eb50>
    1ee8:	0204404d 	andeq	r4, r4, #77	; 0x4d
    1eec:	ea030505 	b	c3308 <__ccfg+0xa3360>
    1ef0:	01040177 	tsteq	r4, r7, ror r1
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ef4:	99030405 	stmdbls	r3, {r0, r2, sl}
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ef8:	1a052008 	bne	149f20 <__ccfg+0x129f78>
    1efc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1f00:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
	plugins [ord] = pl;
    1f04:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	return 0;
    1f08:	1a052304 	bne	14ab20 <__ccfg+0x12ab78>
		return ERROR;
    1f0c:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
}
    1f10:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
    1f14:	017eee03 	cmneq	lr, r3, lsl #28
	verify_fds (fd, "tcv10");
    1f18:	01062905 	tsteq	r6, r5, lsl #18
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1f1c:	0d050e04 	stceq	14, cr0, [r5, #-16]
	verify_fds (fd, "tcv10");
    1f20:	2e7bdb03 	vaddcs.f64	d29, d11, d3
    1f24:	29050904 	stmdbcs	r5, {r2, r8, fp}
    1f28:	2004a503 	andcs	sl, r4, r3, lsl #10
	verify_plg (b, tcv_frm, "tcv11");
    1f2c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	b = q_first (rq);
    1f30:	01970306 	orrseq	r0, r7, r6, lsl #6
	if (q_end (b, rq)) {
    1f34:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
		if (state != WNONE) {
    1f38:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    1f3c:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
			when (rq, state);
    1f40:	01065205 	tsteq	r6, r5, lsl #4
			release;
    1f44:	1a050104 	bne	14235c <__ccfg+0x1223b4>
	deq (b);	// Dequeue the packet ...
    1f48:	068c0306 	streq	r0, [ip], r6, lsl #6
    1f4c:	110a052e 	tstne	sl, lr, lsr #10
	p = ((address)(b + 1));
    1f50:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
	verify_plg (b, tcv_frm, "tcv11");
    1f54:	017ac303 	cmneq	sl, r3, lsl #6
    1f58:	01060d05 	tsteq	r6, r5, lsl #26
    1f5c:	0a050104 	beq	142374 <__ccfg+0x1223cc>
    1f60:	2005bd03 	andcs	fp, r5, r3, lsl #26
    1f64:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    1f68:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1f6c:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    1f70:	110a0521 	tstne	sl, r1, lsr #10
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1f74:	01060b05 	tsteq	r6, r5, lsl #22
    1f78:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
	b->u.pointers.tail =
    1f7c:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
}
    1f80:	03050509 	movweq	r0, #21769	; 0x5509
		return NULL;
    1f84:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
    1f88:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    1f8c:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
    1f90:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    1f94:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
	verify_fds (fd, "tcv16");
    1f98:	06040501 	streq	r0, [r4], -r1, lsl #10
								Boolean urg) {
    1f9c:	2005cb03 	andcs	ip, r5, r3, lsl #22
    1fa0:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	verify_fds (fd, "tcv16");
    1fa4:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
    1fa8:	01063f05 	tsteq	r6, r5, lsl #30
    1fac:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	verify_pld (s, tcv_frm, "tcv17");
    1fb0:	07920306 	ldreq	r0, [r2, r6, lsl #6]
    1fb4:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1fb8:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
    1fbc:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    1fc0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1fc4:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
    1fc8:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
    1fcc:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
	ptrs.head = (word) fd;
    1fd0:	01040177 	tsteq	r4, r7, ror r1
	ptrs.tail = (word) urg;
    1fd4:	ba030405 	blt	c2ff0 <__ccfg+0xa3048>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd8:	09032008 	stmdbeq	r3, {r3, sp}
    1fdc:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
		if (state != WNONE) {
    1fe0:	017db003 	cmneq	sp, r3
    1fe4:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
}
    1fe8:	017ed403 	cmneq	lr, r3, lsl #8
			when (eid, state);
    1fec:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1ff0:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
			release;
    1ff4:	03010501 	movweq	r0, #5377	; 0x1501
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1ff8:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
    1ffc:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2000:	055b2002 	ldrbeq	r2, [fp, #-2]
    2004:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    2008:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
    200c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    2010:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    2014:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
		if (state != WNONE) {
    2018:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
    201c:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
			tmwait (state);
    2020:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2024:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
	b->attributes = s->attpattern;
    2028:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
		b->attributes.b.urgent = 1;
    202c:	03050502 	movweq	r0, #21762	; 0x5502
    2030:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
	b->u.pointers.head = ptrs.head;
    2034:	03040501 	movweq	r0, #17665	; 0x4501
	b->u.pointers.tail = length;
    2038:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
	return (address) (b + 1);
    203c:	0305050e 	movweq	r0, #21774	; 0x550e
    2040:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
    2044:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    2048:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    204c:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
    2050:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2054:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
	if (len >= b->u.pointers.tail)
    2058:	06040501 	streq	r0, [r4], -r1, lsl #10
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    205c:	3c05f703 	stccc	7, cr15, [r5], {3}
    2060:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	if (len > 0) {
    2064:	01778503 	cmneq	r7, r3, lsl #10
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2068:	0d050e04 	stceq	14, cr0, [r5, #-16]
    206c:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    2070:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		b->u.pointers.tail -= len;
    2074:	96030639 			; <UNDEFINED> instruction: 0x96030639
    2078:	0a052006 	beq	14a098 <__ccfg+0x12a0f0>
    207c:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
		b->u.pointers.head += len;
    2080:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
    2084:	060d0501 	streq	r0, [sp], -r1, lsl #10
    2088:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    208c:	0696030a 	ldreq	r0, [r6], sl, lsl #6
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2090:	06040520 	streq	r0, [r4], -r0, lsr #10
    2094:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    2098:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
	verify_fph (phy, "tcv23");
    209c:	06410501 	strbeq	r0, [r1], -r1, lsl #10
    20a0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    20a4:	08970304 	ldmeq	r7, {r2, r8, r9}
    20a8:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
}
    20ac:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
	return (physical [phy]) (opt, arg);
    20b0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    20b4:	97030604 	strls	r0, [r3, -r4, lsl #12]
    20b8:	04522008 	ldrbeq	r2, [r2], #-8
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    20bc:	0302050d 	movweq	r0, #9485	; 0x250d
	if (opt < 0) {
    20c0:	4a2075d1 	bmi	81f80c <__ccfg+0x7ff864>
		if (fd < 0)
    20c4:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
		if (opt == PHYSOPT_PLUGINFO) {
    20c8:	03030503 	movweq	r0, #13571	; 0x3503
			if (fd >= TCV_MAX_PLUGS)
    20cc:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
			if ((p = plugins [fd]) == NULL)
    20d0:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    20d4:	37021620 	strcc	r1, [r2, -r0, lsr #12]
}
    20d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (fd >= TCV_MAX_PHYS)
    20dc:	02050012 	andeq	r0, r5, #18
		return physinfo [fd];
    20e0:	000014e4 	andeq	r1, r0, r4, ror #9
    20e4:	0100e103 	tsteq	r0, r3, lsl #2
	verify_fds (fd, "tcv22");
    20e8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    20ec:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
    20f0:	1f212202 	svcne	0x00212202
    20f4:	4b2f2106 	blmi	bca514 <__ccfg+0xbaa56c>
    20f8:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
}
    20fc:	06020501 	streq	r0, [r2], -r1, lsl #10
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2100:	0008022f 	andeq	r0, r8, pc, lsr #4
    2104:	3a050101 	bcc	142510 <__ccfg+0x122568>
			return 0;
    2108:	00020500 	andeq	r0, r2, r0, lsl #10
    210c:	03000000 	movweq	r0, #0
    2110:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
    2114:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2118:	200e063a 	andcs	r0, lr, sl, lsr r6
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    211c:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    2120:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
	if (dsp != TCV_DSP_PASS) {
    2124:	06030524 	streq	r0, [r3], -r4, lsr #10
		if (ses == NONE)
    2128:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
			syserror (EREQPAR, "tcv26");
    212c:	06040501 	streq	r0, [r4], -r1, lsl #10
		verify_fds (ses, "tcv27");
    2130:	06120530 			; <UNDEFINED> instruction: 0x06120530
    2134:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    2138:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    213c:	01060905 	tsteq	r6, r5, lsl #18
    2140:	2f050f04 	svccs	0x00050f04
		if ((p = apb (size)) != NULL) {
    2144:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    2148:	03090501 	movweq	r0, #38145	; 0x9501
		return NULL;
    214c:	0305206b 	movweq	r2, #20587	; 0x506b
			p->attributes = descriptors [ses] -> attpattern;
    2150:	0f042106 	svceq	0x00042106
			dispose (p, dsp);
    2154:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
			p->attributes = descriptors [ses] -> attpattern;
    2158:	062f0501 	strteq	r0, [pc], -r1, lsl #10
			p->attributes.b.outgoing = 0;
    215c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			dispose (p, dsp);
    2160:	207a0301 	rsbscs	r0, sl, r1, lsl #6
			return (address)(p + 1);
    2164:	03060405 	movweq	r0, #25605	; 0x6405
    2168:	0f04206f 	svceq	0x0004206f
	if ((p = apb (size)) != NULL)
    216c:	c3030505 	movwgt	r0, #13573	; 0x3505
    2170:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
		return (address)(p + 1);
    2174:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    2178:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
    217c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    2180:	017fb603 	cmneq	pc, r3, lsl #12
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2184:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2188:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    218c:	062f050e 	strteq	r0, [pc], -lr, lsl #10
    2190:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (EREQPAR, "tcv28");
    2194:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
		syserror (EMALLOC, "tcv29");
    2198:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	physical [phy] = ps;
    219c:	06053f04 	streq	r3, [r5], -r4, lsl #30
	physinfo [phy] = info;
    21a0:	0604052b 	streq	r0, [r4], -fp, lsr #10
    21a4:	03052f23 	movweq	r2, #24355	; 0x5f23
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a8:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    21ac:	03051f09 	movweq	r1, #24329	; 0x5f09
    21b0:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
		syserror (EMALLOC, "tcv29");
    21b4:	01010009 	tsteq	r1, r9
    21b8:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
	q_init (q);
    21bc:	00151402 	andseq	r1, r5, r2, lsl #8
}
    21c0:	0af10300 	beq	ffc42dc8 <_estack+0xdfc3ddc8>
    21c4:	16030501 	strne	r0, [r3], -r1, lsl #10
    21c8:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    21cc:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
    21d0:	26250520 	strtcs	r0, [r5], -r0, lsr #10
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21d4:	051f0305 	ldreq	r0, [pc, #-773]	; 1ed7 <tcv_open+0xa3>
	verify_fph (phy, "tcv30");
    21d8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21dc:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    21e0:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
	verify_fph (phy, "tcv30");
    21e4:	0305010f 	movweq	r0, #20751	; 0x510f
    21e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    21ec:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    21f0:	06207903 	strteq	r7, [r0], -r3, lsl #18
    21f4:	5b5b3231 	blpl	16ceac0 <__ccfg+0x16aeb18>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    21f8:	01061c05 	tsteq	r6, r5, lsl #24
    21fc:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
		if (plugins [plg] == NULL)
    2200:	0c052302 	stceq	3, cr2, [r5], {2}
    2204:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2208:	03043e23 	movweq	r3, #20003	; 0x4e23
}
    220c:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
    2210:	01040175 	tsteq	r4, r5, ror r1
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2214:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
    2218:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
    221c:	e4010100 	str	r0, [r1], #-256	; 0xffffff00
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2220:	0300000e 	movweq	r0, #14
    2224:	00019400 	andeq	r9, r1, r0, lsl #8
    2228:	fb010200 	blx	42a32 <__ccfg+0x22a8a>
    222c:	01000d0e 	tsteq	r0, lr, lsl #26
    2230:	00010101 	andeq	r0, r1, r1, lsl #2
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2234:	00010000 	andeq	r0, r1, r0
	len -= (ap.head + ap.tail);
    2238:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    223c:	2f656d6f 	svccs	0x00656d6f
    2240:	70657473 	rsbvc	r7, r5, r3, ror r4
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2244:	2f6e6568 	svccs	0x006e6568
    2248:	6b736544 	blvs	1cdb760 <__ccfg+0x1cbb7b8>
    224c:	2f706f74 	svccs	0x00706f74
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2250:	4f534c4f 	svcmi	0x00534c4f
    2254:	2f54454e 	svccs	0x0054454e
    2258:	4f434950 	svcmi	0x00434950
	return 1;
    225c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2260:	2f534f63 	svccs	0x00534f63
    2264:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    2268:	2f006c65 	svccs	0x00006c65
    226c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	verify_fph (phy, "tcv32");
    2270:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    2274:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2278:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    227c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2280:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2284:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	oq = oqueues [phy];
    2288:	4349502f 	movtmi	r5, #36911	; 0x902f
	b = q_first (oq);
    228c:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (q_end (b, oq)) {
    2290:	534f6369 	movtpl	r6, #62313	; 0xf369
	*len = b->length;
    2294:	3143432f 	cmpcc	r3, pc, lsr #6
	deq (b);	// Dequeue the packet ...
    2298:	2f585833 	svccs	0x00585833
}
    229c:	33314343 	teqcc	r1, #201326593	; 0xc000001
		return NULL;
    22a0:	41575858 	cmpmi	r7, r8, asr r8
    22a4:	642f4552 	strtvs	r4, [pc], #-1362	; 22ac <tcvphy_get+0x3c>
    22a8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    22ac:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	verify_fph (phy, "tcv33");
    22b0:	73752f00 	cmnvc	r5, #0, 30
    22b4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    22b8:	63672f62 	cmnvs	r7, #392	; 0x188
    22bc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    22c0:	6f6e2d6d 	svcvs	0x006e2d6d
    22c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
	oq = oqueues [phy];
    22c8:	2f696261 	svccs	0x00696261
	b = q_first (oq);
    22cc:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
		return NULL;
    22d0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
	return (address)(b + 1);
    22d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
}
    22d8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    22dc:	2f656d6f 	svccs	0x00656d6f
    22e0:	70657473 	rsbvc	r7, r5, r3, ror r4
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    22e4:	2f6e6568 	svccs	0x006e6568
	verify_plg (b, tcv_xmt, "tcv34");
    22e8:	6b736544 	blvs	1cdb800 <__ccfg+0x1cbb858>
	hblock_t *b = header (pkt);
    22ec:	2f706f74 	svccs	0x00706f74
	verify_plg (b, tcv_xmt, "tcv34");
    22f0:	4f534c4f 	svcmi	0x00534c4f
    22f4:	2f54454e 	svccs	0x0054454e
    22f8:	4f434950 	svcmi	0x00434950
    22fc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2300:	2f534f63 	svccs	0x00534f63
    2304:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2308:	2f005858 	svccs	0x00005858
	dispose (b, plugins [b->attributes.b.plugin] ->
    230c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    2310:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	dispose (b, plugins [b->attributes.b.plugin] ->
    2314:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2318:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    231c:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
    2320:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    while(1)
    2324:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
{
    2328:	4349502f 	movtmi	r5, #36911	; 0x902f
    SetupTrimDevice();
    232c:	502f534f 	eorpl	r5, pc, pc, asr #6
    pui32Src = &_etext;
    2330:	534f6369 	movtpl	r6, #62313	; 0xf369
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2334:	656b0000 	strbvs	r0, [fp, #-0]!
    __asm("    ldr     r0, =_bss\n"
    2338:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    233c:	0100632e 	tsteq	r0, lr, lsr #6
    2340:	61750000 	cmnvs	r5, r0
    2344:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    2348:	00000200 	andeq	r0, r0, r0, lsl #4
   main();
    234c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    FaultISR();
    2350:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
        *pui32Dest++ = *pui32Src++;
    2354:	00000300 	andeq	r0, r0, r0, lsl #6
    2358:	61647473 	smcvs	18243	; 0x4743
    235c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    2360:	00000300 	andeq	r0, r0, r0, lsl #6
    2364:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    2368:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    236c:	616d0000 	cmnvs	sp, r0
    2370:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
static byte get_byte () {
    2374:	00000400 	andeq	r0, r0, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2378:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    237c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2380:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    2384:	75620000 	strbvc	r0, [r2, #-0]!
		if (ee_inp)
    2388:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			b |= 1;
    238c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2390:	00682e73 	rsbeq	r2, r8, r3, ror lr
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2394:	73000004 	movwvc	r0, #4
	for (b = 0, i = 0; i < 8; i++) {
    2398:	6f697379 	svcvs	0x00697379
}
    239c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    23a0:	656b0000 	strbvs	r0, [fp, #-0]!
    23a4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
static void put_byte (byte b) {
    23a8:	0100682e 	tsteq	r0, lr, lsr #16
    23ac:	623c0000 	eorsvs	r0, ip, #0
    23b0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    23b4:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
		if (b & 0x80)
    23b8:	00000000 	andeq	r0, r0, r0
    23bc:	00260500 	eoreq	r0, r6, r0, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23c0:	15740205 	ldrbne	r0, [r4, #-517]!	; 0xfffffdfb
	for (i = 0; i < 8; i++) {
    23c4:	c3030000 	movwgt	r0, #12288	; 0x3000
		b <<= 1;
    23c8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
	for (i = 0; i < 8; i++) {
    23cc:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
}
    23d0:	03062605 	movweq	r2, #26117	; 0x6605
    23d4:	02050178 	andeq	r0, r5, #120, 2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    23d8:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    23dc:	02051f07 	andeq	r1, r5, #7, 30
	put_byte (cmd);
    23e0:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
    23e4:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
}
    23e8:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    23ec:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
static void wwait (word st, word del) {
    23f0:	2c060f05 	stccs	15, cr0, [r6], {5}
    23f4:	01060305 	tsteq	r6, r5, lsl #6
    23f8:	2f060405 	svccs	0x00060405
	while (dopen && (rdsr () & 1)) {
    23fc:	01061605 	tsteq	r6, r5, lsl #12
    2400:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    2404:	4b310605 	blmi	c43c20 <__ccfg+0xc23c78>
    2408:	7a030205 	bvc	c2c24 <__ccfg+0xa2c7c>
	put_byte (CMD_RDSR);
    240c:	06010501 	streq	r0, [r1], -r1, lsl #10
	r = get_byte ();
    2410:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    2414:	01010003 	tsteq	r1, r3
	while (dopen && (rdsr () & 1)) {
    2418:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
}
    241c:	0015b002 	andseq	fp, r5, r2
		if (st == WNONE)
    2420:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    2424:	03020501 	movweq	r0, #9473	; 0x2501
			mdelay (1);
    2428:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    242c:	01060d05 	tsteq	r6, r5, lsl #26
			delay (del, st);
    2430:	70031f05 	andvc	r1, r3, r5, lsl #30
    2434:	030d0520 	movweq	r0, #54560	; 0xd520
			release;
    2438:	1f052e10 	svcne	0x00052e10
    243c:	02052006 	andeq	r2, r5, #6
    2440:	03060106 	movweq	r0, #24838	; 0x6106
static void ready () {
    2444:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
	if (dopen) {
    2448:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		wwait (WNONE, 1);
    244c:	1f051f05 	svcne	0x00051f05
    2450:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    2454:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
	dstat = 0;
    2458:	060f0521 	streq	r0, [pc], -r1, lsr #10
}
    245c:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
    2460:	0f052306 	svceq	0x00052306
    2464:	01050106 	tsteq	r5, r6, lsl #2
	udelay (1);
    2468:	06030524 	streq	r0, [r3], -r4, lsr #10
    246c:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
	udelay (1);
    2470:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
		dopen = DOPEN_TEMP;
    2474:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
    2478:	05213006 	streq	r3, [r1, #-6]!
    247c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2480:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
static void cclose () {
    2484:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
	if (dopen == DOPEN_TEMP) {
    2488:	0a050106 	beq	1428a8 <__ccfg+0x122900>
    248c:	1f053406 	svcne	0x00053406
		wwait (WNONE, 1);
    2490:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    2494:	06040558 			; <UNDEFINED> instruction: 0x06040558
	cmd_0 (CMD_DP);
    2498:	10052f22 	andne	r2, r5, r2, lsr #30
    249c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		dopen = 0;
    24a0:	ac0b0306 	stcge	3, cr0, [fp], {6}
}
    24a4:	01060705 	tsteq	r6, r5, lsl #14
word ee_open () {
    24a8:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
	ready ();
    24ac:	13060905 	movwne	r0, #26885	; 0x6905
	dopen = DOPEN_PERM;
    24b0:	01000702 	tsteq	r0, r2, lsl #14
    24b4:	001c0501 	andseq	r0, ip, r1, lsl #10
}
    24b8:	16300205 	ldrtne	r0, [r0], -r5, lsl #4
	if (dopen) {
    24bc:	c6030000 	strgt	r0, [r3], -r0
    24c0:	02050108 	andeq	r0, r5, #8, 2
		dopen = DOPEN_TEMP;
    24c4:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
		cclose ();
    24c8:	df03060d 	svcle	0x0003060d
}
    24cc:	0104017c 	tsteq	r4, ip, ror r1
int ser_out (word st, const char *m) {
    24d0:	03060f05 	movweq	r0, #28421	; 0x6f05
	if ((prcs = running (__outserial)) != 0) {
    24d4:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    24d8:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    24dc:	da032405 	ble	cb4f8 <__ccfg+0xab550>
		join (prcs, st);
    24e0:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
		release;
    24e4:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
	if (*m)
    24e8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		prcs = strlen (m) +1;
    24ec:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    24f0:	052f0620 	streq	r0, [pc, #-1568]!	; 1ed8 <tcv_open+0xa4>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    24f4:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    24f8:	01010005 	tsteq	r1, r5
    24fc:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
		umwait (st);
    2500:	00000002 	andeq	r0, r0, r2
    2504:	00de0300 	sbcseq	r0, lr, r0, lsl #6
		prcs =  m [1] + 3;
    2508:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	if (*m)
    250c:	06270514 			; <UNDEFINED> instruction: 0x06270514
		strcpy (buf, m);
    2510:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    2514:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
	if (runstrand (__outserial, buf) == 0) {
    2518:	20062402 	andcs	r2, r6, r2, lsl #8
    251c:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
		ufree (buf);
    2520:	01060605 	tsteq	r6, r5, lsl #12
    2524:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
		memcpy (buf, m, prcs);
    2528:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
    252c:	01000502 	tsteq	r0, r2, lsl #10
    2530:	001b0501 	andseq	r0, fp, r1, lsl #10
}
    2534:	16480205 	strbne	r0, [r8], -r5, lsl #4
    2538:	fa030000 	blx	c2540 <__ccfg+0xa2598>
int ser_in (word st, char *buf, int len) {
    253c:	02050100 	andeq	r0, r5, #0, 2
    2540:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
	if (len == 0)
    2544:	2102051f 	tstcs	r2, pc, lsl r5
	if (__inpline == NULL) {
    2548:	01000602 	tsteq	r0, r2, lsl #12
		if ((prcs = running (__inserial)) == 0) {
    254c:	001e0501 	andseq	r0, lr, r1, lsl #10
    2550:	16580205 	ldrbne	r0, [r8], -r5, lsl #4
			prcs = runthread (__inserial);
    2554:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2558:	02050100 	andeq	r0, r5, #0, 2
			if (prcs == 0) {
    255c:	0e051416 	cfmvdlreq	mvd5, r1
				npwait (st);
    2560:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
		release;
    2564:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
		join (prcs, st);
    2568:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    256c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
	if (*__inpline == NULL) // bin cmd
    2570:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2574:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	if (prcs >= len)
    2578:	1f052e06 	svcne	0x00052e06
		prcs = len-1;
    257c:	20051f06 	andcs	r1, r5, r6, lsl #30
	memcpy (buf, __inpline, prcs);
    2580:	0e050106 	adfeqs	f0, f5, f6
    2584:	02052006 	andeq	r2, r5, #6
    2588:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
	ufree (__inpline);
    258c:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
	__inpline = NULL;
    2590:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
	if (*buf) // if it's NULL, it's a bin cmd
    2594:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
		buf [prcs] = '\0';
    2598:	06022f01 	streq	r2, [r2], -r1, lsl #30
}
    259c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		prcs = strlen (__inpline);
    25a0:	02050021 	andeq	r0, r5, #33	; 0x21
    25a4:	00000000 	andeq	r0, r0, r0
		return 0;
    25a8:	01018e03 	tsteq	r1, r3, lsl #28
    25ac:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    25b0:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
int ser_outf (word st, const char *m, ...) {
    25b4:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    25b8:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
	if ((prcs = running (__outserial)) != 0) {
    25bc:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    25c0:	01061205 	tsteq	r6, r5, lsl #4
		join (prcs, st);
    25c4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    25c8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		release;
    25cc:	06054b03 	streq	r4, [r5], -r3, lsl #22
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d0:	1f050106 	svcne	0x00050106
    25d4:	20052b06 	andcs	r2, r5, r6, lsl #22
    25d8:	0e050106 	adfeqs	f0, f5, f6
		umwait (st);
    25dc:	02052006 	andeq	r2, r5, #6
    25e0:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
	if (runstrand (__outserial, buf) == 0) {
    25e4:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    25e8:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
    25ec:	2f030501 	svccs	0x00030501
		ufree (buf);
    25f0:	01061f05 	tsteq	r6, r5, lsl #30
		npwait (st);
    25f4:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
}
    25f8:	03052012 	movweq	r2, #20498	; 0x5012
    25fc:	06052f06 	streq	r2, [r5], -r6, lsl #30
    2600:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2604:	0b053206 	bleq	14ee24 <__ccfg+0x12ee7c>
int ser_inf (word st, const char *fmt, ...) {
    2608:	0601052e 	streq	r0, [r1], -lr, lsr #10
    260c:	00070213 	andeq	r0, r7, r3, lsl r2
	if (fmt == NULL)
    2610:	2a050101 	bcs	142a1c <__ccfg+0x122a74>
	if (__inpline == NULL) {
    2614:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
		if ((prcs = running (__inserial)) == 0) {
    2618:	03000016 	movweq	r0, #22
    261c:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
			prcs = runthread (__inserial);
    2620:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    2624:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			if (prcs == 0) {
    2628:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
				npwait (st);
    262c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		release;
    2630:	0205002e 	andeq	r0, r5, #46	; 0x2e
		join (prcs, st);
    2634:	0000168c 	andeq	r1, r0, ip, lsl #13
    2638:	0101ae03 	tsteq	r1, r3, lsl #28
	va_start (ap, fmt);
    263c:	02052006 	andeq	r2, r5, #6
	prcs = vscan (__inpline, fmt, ap);
    2640:	200e0306 	andcs	r0, lr, r6, lsl #6
    2644:	01100313 	tsteq	r0, r3, lsl r3
	ufree (__inpline);
    2648:	01060605 	tsteq	r6, r5, lsl #12
	__inpline = NULL;
    264c:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
}
    2650:	09030602 	stmdbeq	r3, {r1, r9, sl}
    2654:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2658:	58050501 	stmdapl	r5, {r0, r8, sl}
		return 0;
    265c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    2660:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    2664:	0302052e 	movweq	r0, #9518	; 0x252e
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2668:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    266c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    2670:	0604052e 	streq	r0, [r4], -lr, lsr #10
	RF_cmdFs.frequency = 
    2674:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
}
    2678:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    267c:	04052007 	streq	r2, [r5], #-7
    2680:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    2684:	07050106 	streq	r0, [r5, -r6, lsl #2]
static int option (int opt, address val) {
    2688:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    268c:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    2690:	0303053e 	movweq	r0, #13630	; 0x353e
    2694:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    2698:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    269c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    26a0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    26a4:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    26a8:	17030603 	strne	r0, [r3, -r3, lsl #12]
    26ac:	06070566 	streq	r0, [r7], -r6, ror #10
    26b0:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    26b4:	03060205 	movweq	r0, #25093	; 0x6205
    26b8:	0b053c16 	bleq	151718 <__ccfg+0x131770>
			goto RVal;
    26bc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			_BIS (dstate, DSTATE_RXON);
    26c0:	01054006 	tsteq	r5, r6
    26c4:	010d0306 	tsteq	sp, r6, lsl #6
	int ret = 0;
    26c8:	73030205 	movwvc	r0, #12805	; 0x3205
			p_trigger (drvprcs, qevent);
    26cc:	0301052e 	movweq	r0, #5422	; 0x152e
    26d0:	0a022e0d 	beq	8df0c <__ccfg+0x6df64>
    26d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26d8:	0205001b 	andeq	r0, r5, #27
    26dc:	00001758 	andeq	r1, r0, r8, asr r7
    26e0:	0102d203 	tsteq	r2, r3, lsl #4
    26e4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    26e8:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    26ec:	4b062202 	blmi	18aefc <__ccfg+0x16af54>
    26f0:	01000502 	tsteq	r0, r2, lsl #10
}
    26f4:	002a0501 	eoreq	r0, sl, r1, lsl #10
			_BIC (dstate, DSTATE_RXON);
    26f8:	176c0205 	strbne	r0, [ip, -r5, lsl #4]!
    26fc:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
			statid = (val == NULL) ? 0 : *val;
    2700:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2704:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
	int ret = 0;
    2708:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
			ret = (int) statid;
    270c:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
	if (val != NULL)
    2710:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
		*val = ret;
    2714:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
			ret = rbuffl + 2;
    2718:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    271c:	06014c02 	streq	r4, [r1], -r2, lsl #24
			if (val != NULL) {
    2720:	20061f3d 	andcs	r1, r6, sp, lsr pc
				memcpy (val, &rxstat,
    2724:	01051320 	tsteq	r5, r0, lsr #6
    2728:	06022106 	streq	r2, [r2], -r6, lsl #2
				memset (&rxstat, 0, 
    272c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2730:	02050021 	andeq	r0, r5, #33	; 0x21
			if (val == NULL)
    2734:	000017a0 	andeq	r1, r0, r0, lsr #15
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2738:	0102e503 	tsteq	r2, r3, lsl #10
    273c:	13160205 	tstne	r6, #1342177280	; 0x50000000
				utimer_set (bckf_timer, *val);
    2740:	06210514 			; <UNDEFINED> instruction: 0x06210514
    2744:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    2748:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
			for (ret = 0; ret < 8; ret++)
    274c:	21061305 	tstcs	r6, r5, lsl #6
				if (RF_cmdPropRadioDivSetup.txPower
    2750:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
					== patable [ret])
    2754:	0f052013 	svceq	0x00052013
				if (RF_cmdPropRadioDivSetup.txPower
    2758:	03054a06 	movweq	r4, #23046	; 0x5a06
			for (ret = 0; ret < 8; ret++)
    275c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2760:	07052f06 	streq	r2, [r5, -r6, lsl #30]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2764:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2768:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    276c:	01050d02 	tsteq	r5, r2, lsl #26
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2770:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2774:	01000302 	tsteq	r0, r2, lsl #6
			_BIS (dstate, DSTATE_IRST);
    2778:	002d0501 	eoreq	r0, sp, r1, lsl #10
    277c:	00000205 	andeq	r0, r0, r5, lsl #4
    2780:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
			ret = (int) channel;
    2784:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
			goto RVal;
    2788:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
				(*val > 7) ? 7 : *val;
    278c:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    2790:	02052001 	andeq	r2, r5, #1
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2794:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    2798:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
			plugch ();
    279c:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
			_BIS (dstate, DSTATE_IRST);
    27a0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    27a4:	01053c02 	tsteq	r5, r2, lsl #24
			ret = (int) vrate;
    27a8:	06030533 			; <UNDEFINED> instruction: 0x06030533
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27ac:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    27b0:	1f200501 	svcne	0x00200501
    27b4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    27b8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    27bc:	0102641f 	tsteq	r2, pc, lsl r4
    27c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    27c4:	02050026 	andeq	r0, r5, #38	; 0x26
    27c8:	000017d4 	ldrdeq	r1, [r0], -r4
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27cc:	01038703 	tsteq	r3, r3, lsl #14
    27d0:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    27d4:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    27d8:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
			syserror (EREQPAR, "cc13 op");
    27dc:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    27e0:	03052806 	movweq	r2, #22534	; 0x5806
    27e4:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    27e8:	01060605 	tsteq	r6, r5, lsl #12
    27ec:	30060405 	andcc	r0, r6, r5, lsl #8
    27f0:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    27f4:	06020517 			; <UNDEFINED> instruction: 0x06020517
    27f8:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    27fc:	01010004 	tsteq	r1, r4
    2800:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    2804:	0017f802 	andseq	pc, r7, r2, lsl #16
    2808:	03990300 	orrseq	r0, r9, #0, 6
    280c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2810:	0e062105 	adfeqs	f2, f6, f5
    2814:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
static void issue_cmd (lword cmd) {
    2818:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    281c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2820:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    2824:	20130520 	andscs	r0, r3, r0, lsr #10
    2828:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
		if (res != 0x86)
    282c:	59060105 	stmdbpl	r6, {r0, r2, r8}
			syserror (EHARDWARE, "hang ic0");
    2830:	01000502 	tsteq	r0, r2, lsl #10
    2834:	00140501 	andseq	r0, r4, r1, lsl #10
		if (cnt-- == 0) {
    2838:	00000205 	andeq	r0, r0, r5, lsl #4
			diag ("HUP %lx %lx", cmd, res);
    283c:	a7030000 	strge	r0, [r3, -r0]
    2840:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
			syserror (EHARDWARE, "hang ic0");
    2844:	06010516 			; <UNDEFINED> instruction: 0x06010516
		udelay (1);
    2848:	00040267 	andeq	r0, r4, r7, ror #4
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    284c:	18050101 	stmdane	r5, {r0, r8}
}
    2850:	00020500 	andeq	r0, r2, r0, lsl #10
    2854:	03000000 	movweq	r0, #0
    2858:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    285c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
static void rx_de () {
    2860:	200e0618 	andcs	r0, lr, r8, lsl r6
	if ((dstate & DSTATE_RXAC) == 0)
    2864:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2868:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    286c:	06030501 	streq	r0, [r3], -r1, lsl #10
	_BIC (dstate, DSTATE_RXAC);
    2870:	06050521 	streq	r0, [r5], -r1, lsr #10
    2874:	06020501 	streq	r0, [r2], -r1, lsl #10
}
    2878:	06120535 			; <UNDEFINED> instruction: 0x06120535
    287c:	59010501 	stmdbpl	r1, {r0, r8, sl}
    2880:	03060305 	movweq	r0, #25349	; 0x6305
static void rf_off () {
    2884:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
	if ((dstate & DSTATE_RFON) == 0)
    2888:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    288c:	0b052e17 	bleq	14e0f0 <__ccfg+0x12e148>
	IntDisable (INT_RFC_CPE_0);
    2890:	0008023d 	andeq	r0, r8, sp, lsr r2
    2894:	1d050101 	stfnes	f0, [r5, #-4]
    2898:	00020500 	andeq	r0, r2, r0, lsl #10
	RFCAdi3VcoLdoVoltageMode (false);
    289c:	03000000 	movweq	r0, #0
	RFCSynthPowerDown ();
    28a0:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    28a4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    28a8:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    28ac:	03052405 	movweq	r2, #21509	; 0x5405
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    28b0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
	OSCHF_SwitchToRcOscTurnOffXosc ();
    28b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    28b8:	01053206 	tsteq	r5, r6, lsl #4
    28bc:	03051306 	movweq	r1, #21254	; 0x5306
    28c0:	06022b06 	streq	r2, [r2], -r6, lsl #22
	_BIC (dstate, DSTATE_RFON);
    28c4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    28c8:	0205001d 	andeq	r0, r5, #29
}
    28cc:	00001830 	andeq	r1, r0, r0, lsr r8
    28d0:	01049e03 	tsteq	r4, r3, lsl #28
    28d4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    28d8:	01060505 	tsteq	r6, r5, lsl #10
    28dc:	2f060305 	svccs	0x00060305
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    28e0:	01060a05 	tsteq	r6, r5, lsl #20
    28e4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    28e8:	0601052e 	streq	r0, [r1], -lr, lsr #10
		if (cmd->status == tstat)
    28ec:	06030525 	streq	r0, [r3], -r5, lsr #10
		if (timeout-- == 0) {
    28f0:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    28f4:	06020501 	streq	r0, [r2], -r1, lsl #10
    28f8:	0006023b 	andeq	r0, r6, fp, lsr r2
    28fc:	1d050101 	stfnes	f0, [r5, #-4]
			syserror (EHARDWARE, "rt2");
    2900:	00020500 	andeq	r0, r2, r0, lsl #10
    2904:	03000000 	movweq	r0, #0
		udelay (1);
    2908:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
		if (cmd->status == tstat)
    290c:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
}
    2910:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    2914:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2918:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    291c:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
static void rf_on () {
    2920:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    2924:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
	OSCHF_TurnOnXosc();
    2928:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    292c:	06051f02 	streq	r1, [r5], -r2, lsl #30
    2930:	06040521 	streq	r0, [r4], -r1, lsr #10
    2934:	06050521 	streq	r0, [r5], -r1, lsr #10
    2938:	06020501 	streq	r0, [r2], -r1, lsl #10
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    293c:	0004023a 	andeq	r0, r4, sl, lsr r2
    2940:	21050101 	tstcs	r5, r1, lsl #2
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2944:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2948:	03000018 	movweq	r0, #24
	issue_cmd (
    294c:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    2950:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2954:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    2958:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    295c:	02052006 	andeq	r2, r5, #6
   pPatchTab[80] = 0;
    2960:	01050106 	tsteq	r5, r6, lsl #2
   } while (--nIterations);
    2964:	06220531 			; <UNDEFINED> instruction: 0x06220531
   pPatchTab[53] = 2;
    2968:	011e051d 	tsteq	lr, sp, lsl r5
    296c:	01061f05 	tsteq	r6, r5, lsl #30
   pPatchTab[55] = 3;
    2970:	01000202 	tsteq	r0, r2, lsl #4
   pPatchTab[110] = 4;
    2974:	002b0501 	eoreq	r0, fp, r1, lsl #10
   pPatchTab[107] = 5;
    2978:	18620205 	stmdane	r2!, {r0, r2, r9}^
   pPatchTab[65] = 6;
    297c:	c1030000 	mrsgt	r0, (UNDEF: 3)
    2980:	02050104 	andeq	r0, r5, #4, 2
   pPatchTab[57] = 1;
    2984:	20200514 	eorcs	r0, r0, r4, lsl r5
   pIrqPatch[1] = _IRQ_PATCH_0;
    2988:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
   const uint32_t *pS = patchGenfskRfe;
    298c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
      t2 = *pS++;
    2990:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
      t4 = *pS++;
    2994:	2f01052e 	svccs	0x0001052e
      t6 = *pS++;
    2998:	01000102 	tsteq	r0, r2, lsl #2
      t8 = *pS++;
    299c:	00330501 	eorseq	r0, r3, r1, lsl #10
      *pD++ = t1;
    29a0:	18720205 	ldmdane	r2!, {r0, r2, r9}^
      *pD++ = t2;
    29a4:	c6030000 	strgt	r0, [r3], -r0
      *pD++ = t3;
    29a8:	02050104 	andeq	r0, r5, #4, 2
      *pD++ = t5;
    29ac:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
      *pD++ = t7;
    29b0:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
   } while (--nIterations);
    29b4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    29b8:	11052f01 	tstne	r5, r1, lsl #30
      *pD++ = t8;
    29bc:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
   } while (--nIterations);
    29c0:	2f060305 	svccs	0x00060305
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    29c4:	01060805 	tsteq	r6, r5, lsl #16
   *pD++ = t2;
    29c8:	01000302 	tsteq	r0, r2, lsl #6
   *pD++ = t3;
    29cc:	002b0501 	eoreq	r0, fp, r1, lsl #10
   *pD++ = t4;
    29d0:	00000205 	andeq	r0, r0, r5, lsl #4
   *pD++ = t5;
    29d4:	cd030000 	stcgt	0, cr0, [r3, #-0]
    29d8:	02050104 	andeq	r0, r5, #4, 2
	RFCAdi3VcoLdoVoltageMode (true);
    29dc:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    29e0:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
       	RFCRfTrimSet (&rfTrim);
    29e4:	01010002 	tsteq	r1, r2
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    29e8:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    29ec:	00000002 	andeq	r0, r0, r2
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    29f0:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    29f4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	issue_cmd ((lword)&cmd_srt);
    29f8:	01000302 	tsteq	r0, r2, lsl #6
    29fc:	00370501 	eorseq	r0, r7, r1, lsl #10
	issue_cmd ((lword)&RF_cmdFs);
    2a00:	188e0205 	stmne	lr, {r0, r2, r9}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2a04:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2a08:	02050104 	andeq	r0, r5, #4, 2
    2a0c:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
	IntEnable (INT_RFC_CPE_0);
    2a10:	30060105 	andcc	r0, r6, r5, lsl #2
	_BIC (dstate, DSTATE_IRST);
    2a14:	1f060305 	svcne	0x00060305
    2a18:	01060d05 	tsteq	r6, r5, lsl #26
    2a1c:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2a20:	01010003 	tsteq	r1, r3
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a24:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
	IntEnable (INT_RFC_CPE_0);
    2a28:	0018a202 	andseq	sl, r8, r2, lsl #4
    2a2c:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
}
    2a30:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	IntEnable (INT_RFC_CPE_0);
    2a34:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2a38:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2a3c:	051f0603 	ldreq	r0, [pc, #-1539]	; 2441 <wwait+0x51>
    2a40:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    2a44:	01010003 	tsteq	r1, r3
    2a48:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    2a4c:	0018b002 	andseq	fp, r8, r2
    2a50:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    2a54:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2a58:	10062b05 	andne	r2, r6, r5, lsl #22
    2a5c:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    2a60:	06210603 	strteq	r0, [r1], -r3, lsl #12
    2a64:	06020531 			; <UNDEFINED> instruction: 0x06020531
    2a68:	060c052d 	streq	r0, [ip], -sp, lsr #10
    2a6c:	20050501 	andcs	r0, r5, r1, lsl #10
    2a70:	2f060305 	svccs	0x00060305
    2a74:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    2a78:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2a7c:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    2a80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2a84:	02050045 	andeq	r0, r5, #69	; 0x45
    2a88:	000018d4 	ldrdeq	r1, [r0], -r4
    2a8c:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    2a90:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2a94:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
static void rx_int_enable () {
    2a98:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2a9c:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2aa0:	03054a19 	movweq	r4, #23065	; 0x5a19
    2aa4:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    2aa8:	0605054c 	streq	r0, [r5], -ip, asr #10
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2aac:	06020501 	streq	r0, [r2], -r1, lsl #10
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2ab0:	060f0540 	streq	r0, [pc], -r0, asr #10
    2ab4:	06020501 	streq	r0, [r2], -r1, lsl #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2ab8:	0605054c 	streq	r0, [r5], -ip, asr #10
    2abc:	06020501 	streq	r0, [r2], -r1, lsl #10
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ac0:	06050531 			; <UNDEFINED> instruction: 0x06050531
    2ac4:	06030501 	streq	r0, [r3], -r1, lsl #10
    2ac8:	0606054f 	streq	r0, [r6], -pc, asr #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2acc:	06030501 	streq	r0, [r3], -r1, lsl #10
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2ad0:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ad4:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
		if (db->status == DATA_ENTRY_FINISHED) {
    2ad8:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2adc:	01060505 	tsteq	r6, r5, lsl #10
    2ae0:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
			nr++;
    2ae4:	01060605 	tsteq	r6, r5, lsl #12
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ae8:	4b060405 	blmi	183b04 <__ccfg+0x163b5c>
    2aec:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2af0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2af4:	060a0569 	streq	r0, [sl], -r9, ror #10
				__dp [pl + 1] = __dp [pl] - 128;
    2af8:	06030501 	streq	r0, [r3], -r1, lsl #10
				pl = __dp [1] + 2;
    2afc:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
				__dp [pl + 1] = __dp [pl] - 128;
    2b00:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    2b04:	20290301 	eorcs	r0, r9, r1, lsl #6
				__dp [pl] = 0;
    2b08:	03060205 	movweq	r0, #25093	; 0x6205
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b0c:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2b10:	03050106 	movweq	r0, #20742	; 0x5106
    2b14:	02752f06 	rsbseq	r2, r5, #6, 30
			db->status = DATA_ENTRY_PENDING;
    2b18:	01010005 	tsteq	r1, r5
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b1c:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2b20:	00197002 	andseq	r7, r9, r2
				diag ("BAD RX");
    2b24:	05ef0300 	strbeq	r0, [pc, #768]!	; 2e2c <phys_cc1350+0x64>
    2b28:	17020501 	strne	r0, [r2, -r1, lsl #10]
	if (nr) {
    2b2c:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b30:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
}
    2b34:	2068031a 	rsbcs	r0, r8, sl, lsl r3
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b38:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    2b3c:	580c0520 	stmdapl	ip, {r5, r8, sl}
    2b40:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
}
    2b44:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b48:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    2b4c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2b50:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    2b54:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    2b58:	2016052b 	andscs	r0, r6, fp, lsr #10
    2b5c:	21060205 	tstcs	r6, r5, lsl #4
    2b60:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    2b64:	31060205 	tstcc	r6, r5, lsl #4
thread (cc1350_driver)
    2b68:	01061a05 	tsteq	r6, r5, lsl #20
    2b6c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    2b70:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    2b74:	01000d02 	tsteq	r0, r2, lsl #26
    2b78:	001c0501 	andseq	r0, ip, r1, lsl #10
		if (dstate & DSTATE_IRST) {
    2b7c:	19c00205 	stmibne	r0, {r0, r2, r9}^
    2b80:	fb030000 	blx	c2b8a <__ccfg+0xa2be2>
    2b84:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			rf_off ();
    2b88:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
			_BIC (dstate,
    2b8c:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2b90:	03050501 	movweq	r0, #21761	; 0x5501
		if (dstate & DSTATE_RXAC) {
    2b94:	0205200c 	andeq	r2, r5, #12
    2b98:	07052506 	streq	r2, [r5, -r6, lsl #10]
			if ((dstate & DSTATE_RXON) == 0)
    2b9c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				rx_de ();
    2ba0:	0603052e 	streq	r0, [r3], -lr, lsr #10
		if (paylen == 0) {
    2ba4:	11054c2f 	tstne	r5, pc, lsr #24
    2ba8:	0f051606 	svceq	0x00051606
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2bac:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    2bb0:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    2bb4:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2bb8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bbc:	30300602 	eorscc	r0, r0, r2, lsl #12
    2bc0:	01061505 	tsteq	r6, r5, lsl #10
    2bc4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2bc8:	2f2f0603 	svccs	0x002f0603
    2bcc:	01061a05 	tsteq	r6, r5, lsl #20
    2bd0:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    2bd4:	01010008 	tsteq	r1, r8
    2bd8:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
		} else if (dstate & DSTATE_RXON) {
    2bdc:	001a0802 	andseq	r0, sl, r2, lsl #16
	if (dstate & DSTATE_RFON)
    2be0:	03d80300 	bicseq	r0, r8, #0, 6
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2be4:	16020501 	strne	r0, [r2], -r1, lsl #10
		re->status = DATA_ENTRY_PENDING;
    2be8:	06170514 			; <UNDEFINED> instruction: 0x06170514
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2bec:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
	issue_cmd ((lword)&RF_cmdPropRx);
    2bf0:	03052605 	movweq	r2, #22021	; 0x5605
	_BIS (dstate, DSTATE_RXAC);
    2bf4:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2bf8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2bfc:	06020520 	streq	r0, [r2], -r0, lsr #10
    2c00:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
	if (dstate & DSTATE_RXAC)
    2c04:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    2c08:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
				if (statid != 0xffff)
    2c0c:	0305200f 	movweq	r2, #20495	; 0x500f
    2c10:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2c14:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
				RF_cmdPropTx.pktLen = (byte) paylen;
    2c18:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
		if (paylen == 0) {
    2c1c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
			wait (qevent, DR_LOOP);
    2c20:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2c24:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
			if (dstate & DSTATE_RXAC) {
    2c28:	3d230604 	stccc	6, cr0, [r3, #-16]!
    2c2c:	060a052f 	streq	r0, [sl], -pc, lsr #10
				rx_int_enable ();
    2c30:	20070501 	andcs	r0, r7, r1, lsl #10
			release;
    2c34:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
			} else if (dstate & DSTATE_RFON) {
    2c38:	060d052a 	streq	r0, [sp], -sl, lsr #10
				delay (offdelay, DR_GOOF);
    2c3c:	03010501 	movweq	r0, #5377	; 0x1501
    2c40:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    2c44:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (bckf_timer) {
    2c48:	0205001c 	andeq	r0, r5, #28
			wait (qevent, DR_LOOP);
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    2c54:	13160205 	tstne	r6, #1342177280	; 0x50000000
			delay (bckf_timer, DR_LOOP);
    2c58:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    2c5c:	7703061c 	smladvc	r3, ip, r6, r0
			if (dstate & DSTATE_RXAC)
    2c60:	36040501 	strcc	r0, [r4], -r1, lsl #10
    2c64:	051f0605 	ldreq	r0, [pc, #-1541]	; 2667 <ser_inf+0x5f>
	if (dstate & DSTATE_RFON)
    2c68:	1c052209 	sfmne	f2, 4, [r5], {9}
    2c6c:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
		rx_de ();
    2c70:	2010030a 	andscs	r0, r0, sl, lsl #6
		RF_cmdPropTx . status = 0;
    2c74:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c78:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2c7c:	06020520 	streq	r0, [r2], -r0, lsr #10
    2c80:	11030601 	tstne	r3, r1, lsl #12
		issue_cmd ((lword)&cmd_cs);
    2c84:	06050520 	streq	r0, [r5], -r0, lsr #10
		if (dstate & DSTATE_IRST)
    2c88:	06030501 	streq	r0, [r3], -r1, lsl #10
    2c8c:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    2c90:	01060605 	tsteq	r6, r5, lsl #12
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2c94:	59060405 	stmdbpl	r6, {r0, r2, sl}
    2c98:	06070513 			; <UNDEFINED> instruction: 0x06070513
			delay (1, DR_XMIT);
    2c9c:	06050501 	streq	r0, [r5], -r1, lsl #10
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2ca0:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2ca4:	06040501 	streq	r0, [r4], -r1, lsl #10
    2ca8:	06070531 			; <UNDEFINED> instruction: 0x06070531
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2cac:	2f090501 	svccs	0x00090501
    2cb0:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
				RF_cmdPropTx . status = 0;
    2cb4:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2cb8:	060d0545 	streq	r0, [sp], -r5, asr #10
				issue_cmd ((lword)&RF_cmdPropTx);
    2cbc:	03010501 	movweq	r0, #5377	; 0x1501
				proceed (DR_XMIT);
    2cc0:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    2cc4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			txtries++;
    2cc8:	02050020 	andeq	r0, r5, #32
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2ccc:	00001a58 	andeq	r1, r0, r8, asr sl
    2cd0:	0107a203 	tsteq	r7, r3, lsl #4
    2cd4:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cd8:	06050514 			; <UNDEFINED> instruction: 0x06050514
		goto DR_LOOP__;
    2cdc:	06030501 	streq	r0, [r3], -r1, lsl #10
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ce0:	06090525 	streq	r0, [r9], -r5, lsr #10
		paylen = 0;
    2ce4:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ce8:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
		txtries = 0;
    2cec:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2cf0:	2070031a 	rsbscs	r0, r0, sl, lsl r3
    2cf4:	10030d05 	andne	r0, r3, r5, lsl #26
    2cf8:	2306052e 	movwcs	r0, #25902	; 0x652e
    2cfc:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2d00:	06020520 	streq	r0, [r2], -r0, lsr #10
		    tcvphy_top (physid) == NULL)
    2d04:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
    2d08:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d0c:	06010602 	streq	r0, [r1], -r2, lsl #12
    2d10:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
			rf_off ();
    2d14:	01190303 	tsteq	r9, r3, lsl #6
endthread
    2d18:	01061605 	tsteq	r6, r5, lsl #12
    2d1c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2d20:	052f0604 	streq	r0, [pc, #-1540]!	; 2724 <option+0x9c>
    2d24:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2d28:	0d030603 	stceq	6, cr0, [r3, #-12]
    2d2c:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2d30:	06020501 	streq	r0, [r2], -r1, lsl #10
    2d34:	06090540 	streq	r0, [r9], -r0, asr #10
    2d38:	06030501 	streq	r0, [r3], -r1, lsl #10
    2d3c:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    2d40:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2d44:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    2d48:	06054c03 	streq	r4, [r5], -r3, lsl #24
    2d4c:	2e050106 	adfcss	f0, f5, f6
    2d50:	4a7a0306 	bmi	1e83970 <__ccfg+0x1e639c8>
    2d54:	13060905 	movwne	r0, #26885	; 0x6905
void RFCCPE0IntHandler (void) {
    2d58:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d5c:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
		_BIS (dstate, DSTATE_IRST);
    2d60:	01060e05 	tsteq	r6, r5, lsl #28
    2d64:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    2d68:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2d6c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2d70:	052f0604 	streq	r0, [pc, #-1540]!	; 2774 <option+0xec>
    2d74:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
	p_trigger (drvprcs, qevent);
    2d78:	04052007 	streq	r2, [r5], #-7
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2d7c:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    2d80:	10050106 	andne	r0, r5, r6, lsl #2
    2d84:	06040520 	streq	r0, [r4], -r0, lsr #10
    2d88:	2e090530 	cfmv64hrcs	mvdx9, r0
    2d8c:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2d90:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2d94:	1a053012 	bne	14ede4 <__ccfg+0x12ee3c>
    2d98:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2d9c:	06150522 	ldreq	r0, [r5], -r2, lsr #10
    2da0:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
	RISE_N_SHINE;
    2da4:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2da8:	01060e05 	tsteq	r6, r5, lsl #28
    2dac:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
}
    2db0:	12052906 	andne	r2, r5, #98304	; 0x18000
    2db4:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    2db8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2dbc:	01061305 	tsteq	r6, r5, lsl #6
    2dc0:	31060305 	tstcc	r6, r5, lsl #6
    2dc4:	03060105 	movweq	r0, #24837	; 0x6105
void phys_cc1350 (int phy, int mbs) {
    2dc8:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
	if (rbuffl != 0)
    2dcc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2dd0:	0205002c 	andeq	r0, r5, #44	; 0x2c
		syserror (ETOOMANY, "cc13");
    2dd4:	00001b00 	andeq	r1, r0, r0, lsl #22
		syserror (EREQPAR, "cc13 mb");
    2dd8:	0102ab03 	tsteq	r2, r3, lsl #22
	if (mbs == 0)
    2ddc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2de0:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
		syserror (EREQPAR, "cc13 mb");
    2de4:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    2de8:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
	i = 0;
    2dec:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
	rbuffl = (byte) mbs;
    2df0:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
		db->config.type = 0;	// General (data in structure)
    2df4:	060a0523 	streq	r0, [sl], -r3, lsr #10
	rbuffl = (byte) mbs;
    2df8:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2dfc:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2e00:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
		if (db == NULL)
    2e04:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
			syserror (EMALLOC, "cc13");
    2e08:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2e0c:	13140305 	tstne	r4, #335544320	; 0x14000000
    2e10:	01060605 	tsteq	r6, r5, lsl #12
		db->status = DATA_ENTRY_PENDING;
    2e14:	21060405 	tstcs	r6, r5, lsl #8
		if (i)
    2e18:	01060a05 	tsteq	r6, r5, lsl #20
			da->pNextEntry = (byte*) db;
    2e1c:	0f030105 	svceq	0x00030105
		db->length = rbuffl + 2;
    2e20:	060b0520 	streq	r0, [fp], -r0, lsr #10
    2e24:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
		db->config.type = 0;	// General (data in structure)
    2e28:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
		db->length = rbuffl + 2;
    2e2c:	2f062004 	svccs	0x00062004
	db->pNextEntry = (byte*) re;
    2e30:	01060c05 	tsteq	r6, r5, lsl #24
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2e34:	03060205 	movweq	r0, #25093	; 0x6205
    2e38:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
	if (rbuffs == NULL)
    2e3c:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
	rbuffs->pCurrEntry = (byte*) re;
    2e40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	rbuffs->pLastEntry = NULL;
    2e44:	02050020 	andeq	r0, r5, #32
    2e48:	00001b34 	andeq	r1, r0, r4, lsr fp
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e4c:	01088103 	tsteq	r8, r3, lsl #2
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2e50:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2e54:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    2e58:	03200501 			; <UNDEFINED> instruction: 0x03200501
	rbuffl -= 2;
    2e5c:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e60:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
	rbuffl -= 2;
    2e64:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
	physid = phy;
    2e68:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e6c:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e70:	06020501 	streq	r0, [r2], -r1, lsl #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e74:	0004023e 	andeq	r0, r4, lr, lsr r2
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e78:	21050101 	tstcs	r5, r1, lsl #2
    2e7c:	00020500 	andeq	r0, r2, r0, lsl #10
	utimer_add (&bckf_timer);
    2e80:	03000000 	movweq	r0, #0
	drvprcs = runthread (cc1350_driver);
    2e84:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    2e88:	01090302 	tsteq	r9, r2, lsl #6
    2e8c:	03062105 	movweq	r2, #24837	; 0x6105
	if (drvprcs == 0)
    2e90:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
		syserror (ERESOURCE, "cc13");
    2e94:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2e98:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2e9c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2ea0:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    2ea4:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2ea8:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2eac:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2eb0:	09051402 	stmdbeq	r5, {r1, sl, ip}
    2eb4:	01050106 	tsteq	r5, r6, lsl #2
    2eb8:	0006025a 	andeq	r0, r6, sl, asr r2
    2ebc:	20050101 	andcs	r0, r5, r1, lsl #2
    2ec0:	00020500 	andeq	r0, r2, r0, lsl #10
    2ec4:	03000000 	movweq	r0, #0
    2ec8:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2ecc:	01090302 	tsteq	r9, r2, lsl #6
    2ed0:	20051413 	andcs	r1, r5, r3, lsl r4
	plugch ();
    2ed4:	01740306 	cmneq	r4, r6, lsl #6
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2ed8:	0c031d05 	stceq	13, cr1, [r3], {5}
    2edc:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2ee0:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2ee4:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    2ee8:	06010602 	streq	r0, [r1], -r2, lsl #12
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2eec:	06050524 	streq	r0, [r5], -r4, lsr #10
}
    2ef0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2ef4:	06070521 	streq	r0, [r7], -r1, lsr #10
    2ef8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2efc:	0609054c 	streq	r0, [r9], -ip, asr #10
    2f00:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    2f04:	03060305 	movweq	r0, #25349	; 0x6305
    2f08:	23052e79 	movwcs	r2, #24185	; 0x5e79
    2f0c:	06052d06 	streq	r2, [r5], -r6, lsl #26
    2f10:	0e054a06 	vmlaeq.f32	s8, s10, s12
    2f14:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    2f18:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2f1c:	02050023 	andeq	r0, r5, #35	; 0x23
    2f20:	00001b4c 	andeq	r1, r0, ip, asr #22
    2f24:	01098103 	tsteq	r9, r3, lsl #2
    2f28:	13410205 	movtne	r0, #4613	; 0x1205
    2f2c:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2f30:	03062305 	movweq	r2, #25349	; 0x6305
    2f34:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    2f38:	1f3c0c03 	svcne	0x003c0c03
    2f3c:	01012106 	tsteq	r1, r6, lsl #2
    2f40:	03060805 	movweq	r0, #26629	; 0x6805
    2f44:	02052028 	andeq	r2, r5, #40	; 0x28
    2f48:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    2f4c:	2023031c 	eorcs	r0, r3, ip, lsl r3
    2f50:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    2f54:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    2f58:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2f5c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2f60:	02052008 	andeq	r2, r5, #8
    2f64:	00c70306 	sbceq	r0, r7, r6, lsl #6
    2f68:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    2f6c:	060d0502 	streq	r0, [sp], -r2, lsl #10
    2f70:	017bcf03 	cmneq	fp, r3, lsl #30
    2f74:	0f050104 	svceq	0x00050104
    2f78:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    2f7c:	01020520 	tsteq	r2, r0, lsr #10
    2f80:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    2f84:	017bca03 	cmneq	fp, r3, lsl #20
    2f88:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2f8c:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    2f90:	03020501 	movweq	r0, #9473	; 0x2501
    2f94:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    2f98:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    2f9c:	13060105 	movwne	r0, #24837	; 0x6105
    2fa0:	03060305 	movweq	r0, #25349	; 0x6305
    2fa4:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    2fa8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2fac:	134b0604 	movtne	r0, #46596	; 0xb604
    2fb0:	20060705 	andcs	r0, r6, r5, lsl #14
    2fb4:	4b060505 	blmi	1843d0 <__ccfg+0x164428>
    2fb8:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2fbc:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2fc0:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    2fc4:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2fc8:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2fcc:	0f060805 	svceq	0x00060805
    2fd0:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    2fd4:	31030505 	tstcc	r3, r5, lsl #10
    2fd8:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
strand (__outserial, const char*)
    2fdc:	4a4e0306 	bmi	1383bfc <__ccfg+0x1363c54>
    2fe0:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    2fe4:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    2fe8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
endstrand
    2fec:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    2ff0:	11060b05 	tstne	r6, r5, lsl #22
	ptr = data;
    2ff4:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    2ff8:	0b052f06 	bleq	14ec18 <__ccfg+0x12ec70>
	if (*ptr)
    2ffc:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
		len = strlen (ptr);
    3000:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    3004:	03010608 	movweq	r0, #5640	; 0x1608
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3008:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    300c:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    3010:	06150513 			; <UNDEFINED> instruction: 0x06150513
    3014:	200e0501 	andcs	r0, lr, r1, lsl #10
    3018:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
	len -= quant;
    301c:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 300c <__outserial+0x30>
    3020:	01060905 	tsteq	r6, r5, lsl #18
    3024:	21060705 	tstcs	r6, r5, lsl #14
	if (len == 0) {
    3028:	01060b05 	tsteq	r6, r5, lsl #22
		ufree (data);
    302c:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
		finish;
    3030:	01060a05 	tsteq	r6, r5, lsl #20
    3034:	23060505 	movwcs	r0, #25861	; 0x6505
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3038:	01061c05 	tsteq	r6, r5, lsl #24
    303c:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    3040:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    3044:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3048:	06052e08 	streq	r2, [r5], -r8, lsl #28
strand (__inserial, address)
    304c:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    3050:	0c050106 	stfeqs	f0, [r5], {6}
    3054:	06060520 	streq	r0, [r6], -r0, lsr #10
    3058:	0608052f 	streq	r0, [r8], -pc, lsr #10
    305c:	060b0501 	streq	r0, [fp], -r1, lsl #10
	if (__inpline != NULL)
    3060:	0608052a 	streq	r0, [r8], -sl, lsr #10
    3064:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
		finish;
    3068:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    306c:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    3070:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    3074:	051f0805 	ldreq	r0, [pc, #-2053]	; 2877 <rx_de+0x17>
    3078:	06052d0a 	streq	r2, [r5], -sl, lsl #26
		umwait (IM_INIT);
    307c:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
		release;
    3080:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	savedata (data);
    3084:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
	len = MAX_LINE_LENGTH;
    3088:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
	io (IM_READ, __cport, READ, ptr, 1);
    308c:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    3090:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    3094:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    3098:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
	if (ptr == (char*) data) { // new line
    309c:	06080520 	streq	r0, [r8], -r0, lsr #10
    30a0:	06060501 	streq	r0, [r6], -r1, lsl #10
		if (*ptr == '\0') { // bin cmd
    30a4:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
			proceed (IM_BIN);
    30a8:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    30ac:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
		if (*ptr < 0x20)
    30b0:	03060505 	movweq	r0, #25861	; 0x6505
    30b4:	0605206e 	streq	r2, [r5], -lr, rrx
			proceed (IM_READ);
    30b8:	2f201703 	svccs	0x00201703
    30bc:	01060705 	tsteq	r6, r5, lsl #14
	if (*ptr == '\n' || *ptr == '\r') {
    30c0:	1e060b05 	vmlane.f64	d0, d6, d5
    30c4:	01060c05 	tsteq	r6, r5, lsl #24
    30c8:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
		*ptr = '\0';
    30cc:	0c030604 	stceq	6, cr0, [r3], {4}
		__inpline = (char*)data;
    30d0:	000b023c 	andeq	r0, fp, ip, lsr r2
		finish;
    30d4:	0f050101 	svceq	0x00050101
	if (len) {
    30d8:	88020500 	stmdahi	r2, {r8, sl}
		ptr++;
    30dc:	0300001c 	movweq	r0, #28
    30e0:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
		len--;
    30e4:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
	proceed (IM_READ);
    30e8:	18050106 	stmdane	r5, {r1, r2, r8}
	io (IM_BIN, __cport, READ, ptr, 1);
    30ec:	2025052e 	eorcs	r0, r5, lr, lsr #10
    30f0:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    30f4:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    30f8:	0602052e 	streq	r0, [r2], -lr, lsr #10
    30fc:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
	len -= 2;
    3100:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
	if (len > *ptr + 1) // 1 for 0x04
    3104:	bb010100 	bllt	4350c <__ccfg+0x23564>
    3108:	0300000c 	movweq	r0, #12
		len = *ptr + 1;
    310c:	0001a500 	andeq	sl, r1, r0, lsl #10
    3110:	fb010200 	blx	4391a <__ccfg+0x23972>
	ptr++;
    3114:	01000d0e 	tsteq	r0, lr, lsl #26
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3118:	00010101 	andeq	r0, r1, r1, lsl #2
    311c:	00010000 	andeq	r0, r1, r0
    3120:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3124:	2f656d6f 	svccs	0x00656d6f
    3128:	70657473 	rsbvc	r7, r5, r3, ror r4
    312c:	2f6e6568 	svccs	0x006e6568
	len -= quant;
    3130:	6b736544 	blvs	1cdc648 <__ccfg+0x1cbc6a0>
		__inpline = (char*)data;
    3134:	2f706f74 	svccs	0x00706f74
		finish;
    3138:	4f534c4f 	svcmi	0x00534c4f
	ptr += quant;
    313c:	2f54454e 	svccs	0x0054454e
    3140:	4f434950 	svcmi	0x00434950
endstrand
    3144:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3148:	2f534f63 	svccs	0x00534f63
	proceed (IM_BINL);
    314c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
endstrand
    3150:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    3154:	00497465 	subeq	r7, r9, r5, ror #8
    3158:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    315c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3160:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3164:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
		if (res && (d < n))
    3168:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    316c:	61652d65 	cmnvs	r5, r5, ror #26
    3170:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3174:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
			res [d] = (char) c;
    3178:	636e692f 	cmnvs	lr, #770048	; 0xbc000
		d++;
    317c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3180:	6f682f00 	svcvs	0x00682f00
    3184:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3188:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    318c:	442f6e65 	strtmi	r6, [pc], #-3685	; 3194 <__pi_vfparse+0xc>
    3190:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				enci (10000);
    3194:	4f2f706f 	svcmi	0x002f706f
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3198:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    319c:	502f5445 	eorpl	r5, pc, r5, asr #8
	d = 0;
    31a0:	534f4349 	movtpl	r4, #62281	; 0xf349
		c = *fm++;
    31a4:	6369502f 	cmnvs	r9, #47	; 0x2f
		if (c == '\\') {
    31a8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
			if ((c = *fm++) == '\0') {
    31ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    31b0:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
				outc ('\\');
    31b4:	2f656d6f 	svccs	0x00656d6f
			if ((c = *fm++) == '\0') {
    31b8:	70657473 	rsbvc	r7, r5, r3, ror r4
				outc ('\\');
    31bc:	2f6e6568 	svccs	0x006e6568
    31c0:	6b736544 	blvs	1cdc6d8 <__ccfg+0x1cbc730>
			outc (c);
    31c4:	2f706f74 	svccs	0x00706f74
    31c8:	4f534c4f 	svcmi	0x00534c4f
			if (c == '\0')
    31cc:	2f54454e 	svccs	0x0054454e
    31d0:	4f434950 	svcmi	0x00434950
			outc (c);
    31d4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				outc (val);
    31d8:	00534f63 	subseq	r4, r3, r3, ror #30
				val = (word) va_arg (ap, aword);
    31dc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3128 <__inserial+0xdc>
		if (c == '%') {
    31e0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    31e4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
			c = *fm++;
    31e8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			switch (c) {
    31ec:	6f746b73 	svcvs	0x00746b73
    31f0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    31f4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    31f8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    31fc:	2f534f43 	svccs	0x00534f43
    3200:	4f636950 	svcmi	0x00636950
    3204:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3208:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
				outc ('%');
    320c:	63740000 	cmnvs	r4, #0
    3210:	00632e76 	rsbeq	r2, r3, r6, ror lr
				outc (c);
    3214:	73000001 	movwvc	r0, #1
    3218:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    321c:	00682e74 	rsbeq	r2, r8, r4, ror lr
				if (c == '\0')
    3220:	73000002 	movwvc	r0, #2
				return d;
    3224:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
}
    3228:	00682e67 	rsbeq	r2, r8, r7, ror #28
    322c:	61000002 	tstvs	r0, r2
			switch (c) {
    3230:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3234:	00030068 	andeq	r0, r3, r8, rrx
    3238:	63616d00 	cmnvs	r1, #0, 26
				for (i = 12; ; i -= 4) {
    323c:	00682e68 	rsbeq	r2, r8, r8, ror #28
				val = (word) va_arg (ap, aword);
    3240:	70000003 	andvc	r0, r0, r3
						[ (val >> i) & 0xf ]);
    3244:	5f736e69 	svcpl	0x00736e69
    3248:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    324c:	00030068 	andeq	r0, r3, r8, rrx
					outc (__pi_hex_enc_table
    3250:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3254:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
					if (i == 0)
    3258:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    325c:	0300682e 	movweq	r6, #2094	; 0x82e
				for (i = 12; ; i -= 4) {
    3260:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    3264:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
				if (c == 'd' && (val & 0x8000) != 0) {
    3268:	00040068 	andeq	r0, r4, r8, rrx
				val = (word) va_arg (ap, aword);
    326c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
				if (c == 'd' && (val & 0x8000) != 0) {
    3270:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3274:	00682e73 	rsbeq	r2, r8, r3, ror lr
					outc ('-');
    3278:	6b000001 	blvs	3284 <__pi_vfparse+0xfc>
    327c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
					val = (~val) + 1;
    3280:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3284:	74000005 	strvc	r0, [r0], #-5
				for (i = 12; ; i -= 4) {
    3288:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
				enci (10000);
    328c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3290:	00000100 	andeq	r0, r0, r0, lsl #2
    3294:	5f766374 	svcpl	0x00766374
    3298:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    329c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    32a0:	00682e61 	rsbeq	r2, r8, r1, ror #28
    32a4:	3c000001 	stccc	0, cr0, [r0], {1}
    32a8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    32ac:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    32b0:	0000003e 	andeq	r0, r0, lr, lsr r0
    32b4:	31050000 	mrscc	r0, (UNDEF: 5)
    32b8:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    32bc:	0300001c 	movweq	r0, #28
    32c0:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    32c4:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    32c8:	03063105 	movweq	r3, #24837	; 0x6105
    32cc:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    32d0:	16052607 	strne	r2, [r5], -r7, lsl #12
				if (c == 'd' || c == 'u') {
    32d4:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    32d8:	26060205 	strcs	r0, [r6], -r5, lsl #4
					if (c == 'd' &&
    32dc:	13061a05 	movwne	r1, #27141	; 0x6a05
					val = va_arg (ap, lword);
    32e0:	051f0e05 	ldreq	r0, [pc, #-3589]	; 24e3 <ser_out+0x13>
					fm++;
    32e4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
					if (c == 'd' &&
    32e8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    32ec:	0c030602 	stceq	6, cr0, [r3], {2}
						outc ('-');
    32f0:	06010520 	streq	r0, [r1], -r0, lsr #10
    32f4:	00010216 	andeq	r0, r1, r6, lsl r2
						val = (~val) + 1;
    32f8:	2e050101 	adfcss	f0, f5, f1
				enci (10000);
    32fc:	c2020500 	andgt	r0, r2, #0, 10
					enci (1000000000UL);
    3300:	0300001c 	movweq	r0, #28
    3304:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    3308:	06051602 	streq	r1, [r5], -r2, lsl #12
    330c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3310:	06030520 	streq	r0, [r3], -r0, lsr #10
    3314:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    3318:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    331c:	21060305 	tstcs	r6, r5, lsl #6
    3320:	01062905 	tsteq	r6, r5, lsl #18
    3324:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    3328:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    332c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3330:	01024c01 	tsteq	r2, r1, lsl #24
    3334:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3338:	0205002e 	andeq	r0, r5, #46	; 0x2e
    333c:	00001cdc 	ldrdeq	r1, [r0], -ip
    3340:	01028303 	tsteq	r2, r3, lsl #6
				} else if (c == 'x') {
    3344:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
					for (i = 28; ; i -= 4) {
    3348:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
					val = va_arg (ap, lword);
    334c:	2f062402 	svccs	0x00062402
							[ (val >> i) & 0xf ]);
    3350:	01130101 	tsteq	r3, r1, lsl #2
    3354:	01051401 	tsteq	r5, r1, lsl #8
						outc (__pi_hex_enc_table
    3358:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    335c:	0002022d 	andeq	r0, r2, sp, lsr #4
    3360:	3a050101 	bcc	14376c <__ccfg+0x1237c4>
						if (i == 0)
    3364:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    3368:	0300001c 	movweq	r0, #28
					for (i = 28; ; i -= 4) {
    336c:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
					outc ('%');
    3370:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    3374:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    3378:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
					outc ('l');
    337c:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    3380:	20062402 	andcs	r2, r6, r2, lsl #8
				val = (word) va_arg (ap, aword);
    3384:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
				outc (val);
    3388:	03050106 	movweq	r0, #20742	; 0x5106
    338c:	02053d06 	andeq	r3, r5, #384	; 0x180
				while (*st != '\0') {
    3390:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3394:	20050501 	andcs	r0, r5, r1, lsl #10
    3398:	30060305 	andcc	r0, r6, r5, lsl #6
    339c:	01061705 	tsteq	r6, r5, lsl #14
					outc (*st);
    33a0:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    33a4:	052f0603 	streq	r0, [pc, #-1539]!	; 2da9 <RFCCPE0IntHandler+0x51>
					st++;
    33a8:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
		c = *fm++;
    33ac:	03052011 	movweq	r2, #20497	; 0x5011
    33b0:	0b052106 	bleq	14b7d0 <__ccfg+0x12b828>
    33b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
char *vform (char *res, const char *fm, va_list aq) {
    33b8:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    33bc:	01050106 	tsteq	r5, r6, lsl #2
	if (res != NULL) {
    33c0:	0603054b 	streq	r0, [r3], -fp, asr #10
		__pi_vfparse (res, MAX_WORD, fm, aq);
    33c4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    33c8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    33cc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
}
    33d0:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    33d4:	03052014 	movweq	r2, #20500	; 0x5014
	fml = strlen (fm) + 17;
    33d8:	11052106 	tstne	r5, r6, lsl #2
    33dc:	03050106 	movweq	r0, #20742	; 0x5106
    33e0:	0b052106 	bleq	14b800 <__ccfg+0x12b858>
	if ((res = (char*) umalloc (fml)) == NULL)
    33e4:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    33e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    33ec:	0205003a 	andeq	r0, r5, #58	; 0x3a
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    33f0:	00001d38 	andeq	r1, r0, r8, lsr sp
    33f4:	0101df03 	tsteq	r1, r3, lsl #30
    33f8:	02052006 	andeq	r2, r5, #6
    33fc:	20090306 	andcs	r0, r9, r6, lsl #6
		ufree (res);
    3400:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
		goto Again;
    3404:	01061b05 	tsteq	r6, r5, lsl #22
	if (buf == NULL || fmt == NULL)
    3408:	4c060405 	cfstrsmi	mvf0, [r6], {5}
int vscan (const char *buf, const char *fmt, va_list ap) {
    340c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
	if (buf == NULL || fmt == NULL)
    3410:	0627064a 	strteq	r0, [r7], -sl, asr #12
    3414:	133c7903 	teqne	ip, #49152	; 0xc000
    3418:	03060105 	movweq	r0, #24837	; 0x6105
		    	    case 'u': scanu (lword); break;
    341c:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
			while (isspace (*buf)) buf++;
    3420:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    3424:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
	while (*fmt != '\0') {
    3428:	06040501 	streq	r0, [r4], -r1, lsl #10
		if (*fmt++ != '%')
    342c:	2e90014c 	fmlcssm	f0, f0, #4.0
		switch (*fmt++) {
    3430:	01055b13 	tsteq	r5, r3, lsl fp
    3434:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    3438:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    343c:	0c023601 	stceq	6, cr3, [r2], {1}
    3440:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3444:	02050031 	andeq	r0, r5, #49	; 0x31
    3448:	00001dc4 	andeq	r1, r0, r4, asr #27
}
    344c:	0102ba03 	tsteq	r2, r3, lsl #20
		switch (*fmt++) {
    3450:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    3454:	03063105 	movweq	r3, #24837	; 0x6105
    3458:	06050178 			; <UNDEFINED> instruction: 0x06050178
    345c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
			while (isspace (*buf)) buf++;
    3460:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    3464:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    3468:	03050106 	movweq	r0, #20742	; 0x5106
    346c:	06012f06 	streq	r2, [r1], -r6, lsl #30
    3470:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    3474:	133b0621 	teqne	fp, #34603008	; 0x2100000
			if (*buf == '\0')
    3478:	4a660601 	bmi	1984c84 <__ccfg+0x1964cdc>
			if (*buf != ',') {
    347c:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
			sap = va_arg (ap, char*);
    3480:	03060105 	movweq	r0, #24837	; 0x6105
			nc++;
    3484:	03053c09 	movweq	r3, #23561	; 0x5c09
			if (*buf != ',') {
    3488:	062e7703 	strteq	r7, [lr], -r3, lsl #14
				while (!isspace (*buf) && *buf != ',' &&
    348c:	06010536 			; <UNDEFINED> instruction: 0x06010536
    3490:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
    3494:	01000b02 	tsteq	r0, r2, lsl #22
    3498:	004a0501 	subeq	r0, sl, r1, lsl #10
    349c:	1e340205 	cdpne	2, 3, cr0, cr4, cr5, {0}
    34a0:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    34a4:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
			while (isspace (*buf)) buf++;
    34a8:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    34ac:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    34b0:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    34b4:	0b030505 	bleq	c48d0 <__ccfg+0xa4928>
    34b8:	034a053c 	movteq	r0, #42300	; 0xa53c
			if (*buf == ',') buf++;
    34bc:	02052075 	andeq	r2, r5, #117	; 0x75
    34c0:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
			*sap = '\0';
    34c4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
			break;
    34c8:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
		    case 'd': scani (word); break;
    34cc:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    34d0:	053c3005 	ldreq	r3, [ip, #-5]!
    34d4:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    34d8:	03054b06 	movweq	r4, #23302	; 0x5b06
    34dc:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    34e0:	03060205 	movweq	r0, #25093	; 0x6205
    34e4:	13132e6e 	tstne	r3, #1760	; 0x6e0
    34e8:	06120517 			; <UNDEFINED> instruction: 0x06120517
    34ec:	06020501 	streq	r0, [r2], -r1, lsl #10
    34f0:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
    34f4:	20060a05 	andcs	r0, r6, r5, lsl #20
    34f8:	2f060305 	svccs	0x00060305
    34fc:	01061305 	tsteq	r6, r5, lsl #6
    3500:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    3504:	051f0622 	ldreq	r0, [pc, #-1570]	; 2eea <phys_cc1350+0x122>
    3508:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    350c:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3510:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    3514:	0105330a 	tsteq	r5, sl, lsl #6
    3518:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    351c:	73030602 	movwvc	r0, #13826	; 0x3602
    3520:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    3524:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    3528:	2f060205 	svccs	0x00060205
    352c:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    3530:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    3534:	0114132f 	tsteq	r4, pc, lsr #6
    3538:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
		    case 'u': scanu (word); break;
    353c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3540:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    3544:	13053206 	movwne	r3, #20998	; 0x5206
    3548:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    354c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3550:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3554:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    3558:	06130515 			; <UNDEFINED> instruction: 0x06130515
    355c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3560:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    3564:	06030501 	streq	r0, [r3], -r1, lsl #10
    3568:	0010023d 	andseq	r0, r0, sp, lsr r2
    356c:	3a050101 	bcc	143978 <__ccfg+0x1239d0>
    3570:	00020500 	andeq	r0, r2, r0, lsl #10
    3574:	03000000 	movweq	r0, #0
    3578:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    357c:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    3580:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
		    case 'x': scanx (word); break;
    3584:	0205201b 	andeq	r2, r5, #27
    3588:	4a062025 	bmi	18b624 <__ccfg+0x16b67c>
    358c:	03062706 	movweq	r2, #26374	; 0x6706
    3590:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    3594:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    3598:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    359c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    35a0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    35a4:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    35a8:	13410603 	movtne	r0, #5635	; 0x1603
    35ac:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    35b0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    35b4:	02052008 	andeq	r2, r5, #8
    35b8:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    35bc:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    35c0:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    35c4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    35c8:	0101000b 	tsteq	r1, fp
    35cc:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    35d0:	001ef402 	andseq	pc, lr, r2, lsl #8
    35d4:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    35d8:	16020501 	strne	r0, [r2], -r1, lsl #10
    35dc:	01060505 	tsteq	r6, r5, lsl #10
    35e0:	052f0f05 	streq	r0, [pc, #-3845]!	; 26e3 <option+0x5b>
    35e4:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    35e8:	06020521 	streq	r0, [r2], -r1, lsr #10
    35ec:	06100531 			; <UNDEFINED> instruction: 0x06100531
    35f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    35f4:	0609052f 	streq	r0, [r9], -pc, lsr #10
    35f8:	2b0a0501 	blcs	284a04 <__ccfg+0x264a5c>
			switch (*fmt++) {
    35fc:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    3600:	01010004 	tsteq	r1, r4
    3604:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    3608:	001f1802 	andseq	r1, pc, r2, lsl #16
    360c:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    3610:	19020501 	stmdbne	r2, {r0, r8, sl}
		    	    case 'd': scani (lword); break;
    3614:	01141313 	tsteq	r4, r3, lsl r3
    3618:	03063c05 	movweq	r3, #27653	; 0x6c05
    361c:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    3620:	200b0302 	andcs	r0, fp, r2, lsl #6
    3624:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    3628:	06201303 	strteq	r1, [r0], -r3, lsl #6
    362c:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    3630:	06040513 			; <UNDEFINED> instruction: 0x06040513
    3634:	06020501 	streq	r0, [r2], -r1, lsl #10
    3638:	06050521 	streq	r0, [r5], -r1, lsr #10
    363c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3640:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3644:	06040501 	streq	r0, [r4], -r1, lsl #10
    3648:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    364c:	01013d33 	tsteq	r1, r3, lsr sp
    3650:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    3654:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    3658:	06013006 	streq	r3, [r1], -r6
    365c:	2e064a4a 	vmlscs.f32	s8, s12, s20
    3660:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    3664:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    3668:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    366c:	01052306 	tsteq	r5, r6, lsl #6
		    	    case 'x': scanx (lword); break;
    3670:	0a051306 	beq	148290 <__ccfg+0x1282e8>
    3674:	022e7003 	eoreq	r7, lr, #3
    3678:	0101000b 	tsteq	r1, fp
    367c:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    3680:	00000002 	andeq	r0, r0, r2
    3684:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    3688:	16020501 	strne	r0, [r2], -r1, lsl #10
    368c:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    3690:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    3694:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    3698:	20090302 	andcs	r0, r9, r2, lsl #6
    369c:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    36a0:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    36a4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    36a8:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    36ac:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    36b0:	20050501 	andcs	r0, r5, r1, lsl #10
    36b4:	2f060305 	svccs	0x00060305
    36b8:	13190205 	tstne	r9, #1342177280	; 0x50000000
    36bc:	01061b05 	tsteq	r6, r5, lsl #22
    36c0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    36c4:	0a030603 	beq	c4ed8 <__ccfg+0xa4f30>
    36c8:	06050520 	streq	r0, [r5], -r0, lsr #10
    36cc:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    36d0:	200b030a 	andcs	r0, fp, sl, lsl #6
    36d4:	20061a05 	andcs	r1, r6, r5, lsl #20
    36d8:	01060305 	tsteq	r6, r5, lsl #6
    36dc:	2f060405 	svccs	0x00060405
		    	    case 'd': scani (lword); break;
    36e0:	11062c05 	tstne	r6, r5, lsl #24
    36e4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    36e8:	051f062a 	ldreq	r0, [pc, #-1578]	; 30c6 <__inserial+0x7a>
    36ec:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    36f0:	01062105 	tsteq	r6, r5, lsl #2
    36f4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    36f8:	052f0603 	streq	r0, [pc, #-1539]!	; 30fd <__inserial+0xb1>
		    	    case 'u': scanu (lword); break;
    36fc:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    3700:	20052006 	andcs	r2, r5, r6
    3704:	20060520 	andcs	r0, r6, r0, lsr #10
    3708:	33060205 	movwcc	r0, #25093	; 0x6205
    370c:	06050513 			; <UNDEFINED> instruction: 0x06050513
    3710:	06030501 	streq	r0, [r3], -r1, lsl #10
    3714:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    3718:	0a050f06 	beq	147338 <__ccfg+0x127390>
    371c:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    3720:	06030520 	streq	r0, [r3], -r0, lsr #10
    3724:	03010501 	movweq	r0, #5377	; 0x1501
    3728:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    372c:	20740306 	rsbscs	r0, r4, r6, lsl #6
    3730:	01060805 	tsteq	r6, r5, lsl #16
    3734:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    3738:	052f0605 	streq	r0, [pc, #-1541]!	; 313b <__inserial+0xef>
    373c:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    3740:	2a052207 	bcs	14bf64 <__ccfg+0x12bfbc>
		    	    case 'x': scanx (lword); break;
    3744:	0a021e06 	beq	8af64 <__ccfg+0x6afbc>
    3748:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			if ((c = *buf++) == '\0')
    374c:	02050038 	andeq	r0, r5, #56	; 0x38
    3750:	00000000 	andeq	r0, r0, r0
			sap = va_arg (ap, char*);
    3754:	0105a303 	tsteq	r5, r3, lsl #6
			nc++;
    3758:	13160205 	tstne	r6, #1342177280	; 0x50000000
			break;
    375c:	01141313 	tsteq	r4, r3, lsl r3
			while (isspace (*buf)) buf++;
    3760:	03063805 	movweq	r3, #26629	; 0x6805
    3764:	02052077 	andeq	r2, r5, #119	; 0x77
    3768:	20200903 	eorcs	r0, r0, r3, lsl #18
						*sap++ = *buf++;
    376c:	03054a06 	movweq	r4, #23046	; 0x5a06
    3770:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
			while (isspace (*buf)) buf++;
    3774:	03060205 	movweq	r0, #25093	; 0x6205
    3778:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    377c:	01061a05 	tsteq	r6, r5, lsl #20
		return 0;
    3780:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3784:	052f0603 	streq	r0, [pc, #-1539]!	; 3189 <__pi_vfparse+0x1>
		    case 'x': scanx (word); break;
    3788:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    378c:	1b050106 	blne	143bac <__ccfg+0x123c04>
		    	    case 'x': scanx (lword); break;
    3790:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    3794:	0305206b 	movweq	r2, #20587	; 0x506b
    3798:	7cb30306 	ldcvc	3, cr0, [r3], #24
    379c:	06050520 	streq	r0, [r5], -r0, lsr #10
    37a0:	06030501 	streq	r0, [r3], -r1, lsl #10
    37a4:	06060521 	streq	r0, [r6], -r1, lsr #10
    37a8:	06030501 	streq	r0, [r3], -r1, lsl #10
    37ac:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    37b0:	01061305 	tsteq	r6, r5, lsl #6
    37b4:	20060f05 	andcs	r0, r6, r5, lsl #30
    37b8:	13060505 	movwne	r0, #25861	; 0x6505
    37bc:	03060905 	movweq	r0, #26885	; 0x6905
    37c0:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    37c4:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    37c8:	0305200c 	movweq	r2, #20492	; 0x500c
    37cc:	20052f06 	andcs	r2, r5, r6, lsl #30
    37d0:	06050106 	streq	r0, [r5], -r6, lsl #2
    37d4:	20200520 	eorcs	r0, r0, r0, lsr #10
    37d8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    37dc:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    37e0:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    37e4:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    37e8:	0a030601 	beq	c4ff4 <__ccfg+0xa504c>
    37ec:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    37f0:	06090521 	streq	r0, [r9], -r1, lsr #10
    37f4:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    37f8:	06020520 	streq	r0, [r2], -r0, lsr #10
    37fc:	03010501 	movweq	r0, #5377	; 0x1501
    3800:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3804:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    3808:	01061e05 	tsteq	r6, r5, lsl #28
    380c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3810:	2f300604 	svccs	0x00300604
    3814:	01060605 	tsteq	r6, r5, lsl #12
    3818:	21060405 	tstcs	r6, r5, lsl #8
    381c:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    3820:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    3824:	0101000a 	tsteq	r1, sl
    3828:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    382c:	001f9802 	andseq	r9, pc, r2, lsl #16
    3830:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    3834:	13020501 	movwne	r0, #9473	; 0x2501
    3838:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    383c:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    3840:	20207a03 	eorcs	r7, r0, r3, lsl #20
    3844:	20420205 	subcs	r0, r2, r5, lsl #4
    3848:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    384c:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    3850:	4a580601 	bmi	160505c <__ccfg+0x15e50b4>
    3854:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    3858:	01060e05 	tsteq	r6, r5, lsl #28
    385c:	2f060205 	svccs	0x00060205
    3860:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    3864:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    3868:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    386c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3870:	03052e05 	movweq	r2, #24069	; 0x5e05
    3874:	06052206 	streq	r2, [r5], -r6, lsl #4
    3878:	0a050106 	beq	143c98 <__ccfg+0x123cf0>
    387c:	0301054e 	movweq	r0, #5454	; 0x154e
    3880:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    3884:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    3888:	0117033d 	tsteq	r7, sp, lsr r3
    388c:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3890:	2e3c012e 	rsfcsep	f0, f4, #0.5
    3894:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3898:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    389c:	0b054a17 	bleq	156100 <__ccfg+0x136158>
    38a0:	58050520 	stmdapl	r5, {r5, r8, sl}
    38a4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    38a8:	01060605 	tsteq	r6, r5, lsl #12
    38ac:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    38b0:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    38b4:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    38b8:	052f0602 	streq	r0, [pc, #-1538]!	; 32be <__pi_vfparse+0x136>
    38bc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    38c0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    38c4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    38c8:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    38cc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    38d0:	051f2f15 	ldreq	r2, [pc, #-3861]	; 29c3 <rf_on.part.0+0xab>
    38d4:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    38d8:	01060905 	tsteq	r6, r5, lsl #18
    38dc:	01000c02 	tsteq	r0, r2, lsl #24
    38e0:	00440501 	subeq	r0, r4, r1, lsl #10
    38e4:	20540205 	subscs	r0, r4, r5, lsl #4
    38e8:	87030000 	strhi	r0, [r3, -r0]
    38ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    38f0:	06440516 			; <UNDEFINED> instruction: 0x06440516
    38f4:	0205200e 	andeq	r2, r5, #14
    38f8:	1a052606 	bne	14d118 <__ccfg+0x12d170>
    38fc:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    3900:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3904:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3908:	0605054a 	streq	r0, [r5], -sl, asr #10
    390c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3910:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3914:	03050106 	movweq	r0, #20742	; 0x5106
    3918:	16056706 	strne	r6, [r5], -r6, lsl #14
    391c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3920:	01055b06 	tsteq	r5, r6, lsl #22
    3924:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3928:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    392c:	0205004b 	andeq	r0, r5, #75	; 0x4b
    3930:	00000000 	andeq	r0, r0, r0
    3934:	01069903 	tsteq	r6, r3, lsl #18
    3938:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    393c:	03064b05 	movweq	r4, #27397	; 0x6b05
    3940:	1a05017a 	bne	143f30 <__ccfg+0x123f88>
    3944:	034b0526 	movteq	r0, #46374	; 0xb526
    3948:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    394c:	4a090306 	bmi	24456c <__ccfg+0x2245c4>
    3950:	01060505 	tsteq	r6, r5, lsl #10
    3954:	2f060305 	svccs	0x00060305
    3958:	06160567 	ldreq	r0, [r6], -r7, ror #10
    395c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3960:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3964:	06020501 	streq	r0, [r2], -r1, lsl #10
    3968:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    396c:	00020213 	andeq	r0, r2, r3, lsl r2
    3970:	31050101 	tstcc	r5, r1, lsl #2
    3974:	00020500 	andeq	r0, r2, r0, lsl #10
    3978:	03000000 	movweq	r0, #0
    397c:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    3980:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    3984:	03050106 	movweq	r0, #20742	; 0x5106
    3988:	01052106 	tsteq	r5, r6, lsl #2
    398c:	01023d06 	tsteq	r2, r6, lsl #26
    3990:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3994:	02050048 	andeq	r0, r5, #72	; 0x48
    3998:	00002090 	muleq	r0, r0, r0
    399c:	0106d103 	tsteq	r6, r3, lsl #2
    39a0:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    39a4:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    39a8:	01240602 			; <UNDEFINED> instruction: 0x01240602
    39ac:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    39b0:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    39b4:	4a4a0620 	bmi	128523c <__ccfg+0x1265294>
    39b8:	06010513 			; <UNDEFINED> instruction: 0x06010513
    39bc:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    39c0:	01000602 	tsteq	r0, r2, lsl #12
    39c4:	00460501 	subeq	r0, r6, r1, lsl #10
    39c8:	20bc0205 	adcscs	r0, ip, r5, lsl #4
    39cc:	b2030000 	andlt	r0, r3, #0
    39d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    39d4:	06460517 			; <UNDEFINED> instruction: 0x06460517
    39d8:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    39dc:	2f060305 	svccs	0x00060305
    39e0:	01060605 	tsteq	r6, r5, lsl #12
    39e4:	30060305 	andcc	r0, r6, r5, lsl #6
    39e8:	01060605 	tsteq	r6, r5, lsl #12
    39ec:	2f060405 	svccs	0x00060405
    39f0:	06070513 			; <UNDEFINED> instruction: 0x06070513
    39f4:	06040501 	streq	r0, [r4], -r1, lsl #10
    39f8:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    39fc:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3a00:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3a04:	01060c05 	tsteq	r6, r5, lsl #24
    3a08:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3a0c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3a10:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3a14:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3a18:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3a1c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3a20:	014c0602 	cmpeq	ip, r2, lsl #12
    3a24:	4a062e06 	bmi	18f244 <__ccfg+0x16f29c>
    3a28:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    3a2c:	01050106 	tsteq	r5, r6, lsl #2
    3a30:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    3a34:	71030b05 	tstvc	r3, r5, lsl #22
    3a38:	000b023c 	andeq	r0, fp, ip, lsr r2
    3a3c:	3d050101 	stfccs	f0, [r5, #-4]
    3a40:	00020500 	andeq	r0, r2, r0, lsl #10
    3a44:	03000000 	movweq	r0, #0
    3a48:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    3a4c:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3a50:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3a54:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3a58:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3a5c:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    3a60:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    3a64:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    3a68:	43052e22 	movwmi	r2, #24098	; 0x5e22
    3a6c:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    3a70:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    3a74:	01010005 	tsteq	r1, r5
    3a78:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3a7c:	00000002 	andeq	r0, r0, r2
    3a80:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    3a84:	16020501 	strne	r0, [r2], -r1, lsl #10
    3a88:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3a8c:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3a90:	4a4a0620 	bmi	1285318 <__ccfg+0x1265370>
    3a94:	06220513 			; <UNDEFINED> instruction: 0x06220513
    3a98:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    3a9c:	01000502 	tsteq	r0, r2, lsl #10
    3aa0:	00400501 	subeq	r0, r0, r1, lsl #10
    3aa4:	00000205 	andeq	r0, r0, r5, lsl #4
    3aa8:	ea030000 	b	c3ab0 <__ccfg+0xa3b08>
    3aac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3ab0:	40051416 	andmi	r1, r5, r6, lsl r4
    3ab4:	017a0306 	cmneq	sl, r6, lsl #6
    3ab8:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3abc:	7a034005 	bvc	d3ad8 <__ccfg+0xb3b30>
    3ac0:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3ac4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3ac8:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3acc:	01061105 	tsteq	r6, r5, lsl #2
    3ad0:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3ad4:	02051d11 	andeq	r1, r5, #1088	; 0x440
    3ad8:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3adc:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3ae0:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3ae4:	01060905 	tsteq	r6, r5, lsl #18
    3ae8:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3aec:	01010002 	tsteq	r1, r2
    3af0:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3af4:	00000002 	andeq	r0, r0, r2
    3af8:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    3afc:	16020501 	strne	r0, [r2], -r1, lsl #10
    3b00:	01000302 	tsteq	r0, r2, lsl #6
    3b04:	00450501 	subeq	r0, r5, r1, lsl #10
    3b08:	211c0205 	tstcs	ip, r5, lsl #4
    3b0c:	85030000 	strhi	r0, [r3, #-0]
    3b10:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3b14:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    3b18:	017a0306 	cmneq	sl, r6, lsl #6
    3b1c:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3b20:	31060305 	tstcc	r6, r5, lsl #6
    3b24:	01060605 	tsteq	r6, r5, lsl #12
    3b28:	2f060405 	svccs	0x00060405
    3b2c:	2f060305 	svccs	0x00060305
    3b30:	06012e06 	streq	r2, [r1], -r6, lsl #28
    3b34:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    3b38:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    3b3c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3b40:	0a052e06 	beq	14f360 <__ccfg+0x12f3b8>
    3b44:	27010535 	smladxcs	r1, r5, r5, r0
    3b48:	03060405 	movweq	r0, #25605	; 0x6405
    3b4c:	20052073 	andcs	r2, r5, r3, ror r0
    3b50:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3b54:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    3b58:	30060405 	andcc	r0, r6, r5, lsl #8
    3b5c:	01061d05 	tsteq	r6, r5, lsl #26
    3b60:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    3b64:	060b052f 	streq	r0, [fp], -pc, lsr #10
    3b68:	06020501 	streq	r0, [r2], -r1, lsl #10
    3b6c:	060b0541 	streq	r0, [fp], -r1, asr #10
    3b70:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3b74:	2f060305 	svccs	0x00060305
    3b78:	01060a05 	tsteq	r6, r5, lsl #20
    3b7c:	01000902 	tsteq	r0, r2, lsl #18
    3b80:	00480501 	subeq	r0, r8, r1, lsl #10
    3b84:	21840205 	orrcs	r0, r4, r5, lsl #4
    3b88:	86030000 	strhi	r0, [r3], -r0
    3b8c:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3b90:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3b94:	48050106 	stmdami	r5, {r1, r2, r8}
    3b98:	20207803 	eorcs	r7, r0, r3, lsl #16
    3b9c:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3ba0:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3ba4:	06030520 	streq	r0, [r3], -r0, lsr #10
    3ba8:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3bac:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3bb0:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3bb4:	052f0602 	streq	r0, [pc, #-1538]!	; 35ba <vscan+0x1b2>
    3bb8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3bbc:	11052221 	tstne	r5, r1, lsr #4
    3bc0:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3bc4:	06210530 			; <UNDEFINED> instruction: 0x06210530
    3bc8:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3bcc:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3bd0:	01060505 	tsteq	r6, r5, lsl #10
    3bd4:	21060305 	tstcs	r6, r5, lsl #6
    3bd8:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3bdc:	13060105 	movwne	r0, #24837	; 0x6105
    3be0:	01000b02 	tsteq	r0, r2, lsl #22
    3be4:	00440501 	subeq	r0, r4, r1, lsl #10
    3be8:	21d40205 	bicscs	r0, r4, r5, lsl #4
    3bec:	a0030000 	andge	r0, r3, r0
    3bf0:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3bf4:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    3bf8:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    3bfc:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3c00:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3c04:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    3c08:	03020520 	movweq	r0, #9504	; 0x2520
    3c0c:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3c10:	0603054a 	streq	r0, [r3], -sl, asr #10
    3c14:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3c18:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    3c1c:	0f054706 	svceq	0x00054706
    3c20:	06050106 	streq	r0, [r5], -r6, lsl #2
    3c24:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    3c28:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3c2c:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    3c30:	0a050106 	beq	144050 <__ccfg+0x1240a8>
    3c34:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    3c38:	200d0301 	andcs	r0, sp, r1, lsl #6
    3c3c:	03060305 	movweq	r0, #25349	; 0x6305
    3c40:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    3c44:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    3c48:	06050106 	streq	r0, [r5], -r6, lsl #2
    3c4c:	06020574 			; <UNDEFINED> instruction: 0x06020574
    3c50:	06050542 	streq	r0, [r5], -r2, asr #10
    3c54:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c58:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    3c5c:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    3c60:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    3c64:	02052006 	andeq	r2, r5, #6
    3c68:	0b052306 	bleq	14c888 <__ccfg+0x12c8e0>
    3c6c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3c70:	0602054a 	streq	r0, [r2], -sl, asr #10
    3c74:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    3c78:	0a020106 	beq	84098 <__ccfg+0x640f0>
    3c7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3c80:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3c84:	00002270 	andeq	r2, r0, r0, ror r2
    3c88:	0109d103 	tsteq	r9, r3, lsl #2
    3c8c:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3c90:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3c94:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3c98:	20280205 	eorcs	r0, r8, r5, lsl #4
    3c9c:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3ca0:	01060505 	tsteq	r6, r5, lsl #10
    3ca4:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3ca8:	01060405 	tsteq	r6, r5, lsl #8
    3cac:	21060205 	tstcs	r6, r5, lsl #4
    3cb0:	01060505 	tsteq	r6, r5, lsl #10
    3cb4:	33060205 	movwcc	r0, #25093	; 0x6205
    3cb8:	01060a05 	tsteq	r6, r5, lsl #20
    3cbc:	2f060205 	svccs	0x00060205
    3cc0:	1301012f 	movwne	r0, #4399	; 0x112f
    3cc4:	01060905 	tsteq	r6, r5, lsl #18
    3cc8:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3ccc:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3cd0:	01000902 	tsteq	r0, r2, lsl #18
    3cd4:	00340501 	eorseq	r0, r4, r1, lsl #10
    3cd8:	22b00205 	adcscs	r0, r0, #1342177280	; 0x50000000
    3cdc:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3ce0:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3ce4:	01141316 	tsteq	r4, r6, lsl r3
    3ce8:	03063405 	movweq	r3, #25605	; 0x6405
    3cec:	02052079 	andeq	r2, r5, #121	; 0x79
    3cf0:	4a062027 	bmi	18bd94 <__ccfg+0x16bdec>
    3cf4:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    3cf8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3cfc:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3d00:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3d04:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3d08:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3d0c:	0a052306 	beq	14c92c <__ccfg+0x12c984>
    3d10:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3d14:	21010530 	tstcs	r1, r0, lsr r5
    3d18:	01000702 	tsteq	r0, r2, lsl #14
    3d1c:	00350501 	eorseq	r0, r5, r1, lsl #10
    3d20:	22e40205 	rsccs	r0, r4, #1342177280	; 0x50000000
    3d24:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    3d28:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3d2c:	06350516 			; <UNDEFINED> instruction: 0x06350516
    3d30:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    3d34:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    3d38:	01300602 	teqeq	r0, r2, lsl #12
    3d3c:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    3d40:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    3d44:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    3d48:	06022c02 	streq	r2, [r2], -r2, lsl #24
    3d4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3d50:	02050032 	andeq	r0, r5, #50	; 0x32
    3d54:	00000000 	andeq	r0, r0, r0
    3d58:	010a8403 	tsteq	sl, r3, lsl #8
    3d5c:	01160205 	tsteq	r6, r5, lsl #4
    3d60:	1c063205 	sfmne	f3, 4, [r6], {5}
    3d64:	20240205 	eorcs	r0, r4, r5, lsl #4
    3d68:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3d6c:	03060a05 	movweq	r0, #27141	; 0x6a05
    3d70:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    3d74:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    3d78:	06020520 	streq	r0, [r2], -r0, lsr #10
    3d7c:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    3d80:	03051413 	movweq	r1, #21523	; 0x5413
    3d84:	06050513 			; <UNDEFINED> instruction: 0x06050513
    3d88:	06030501 	streq	r0, [r3], -r1, lsl #10
    3d8c:	06060521 	streq	r0, [r6], -r1, lsr #10
    3d90:	06030501 	streq	r0, [r3], -r1, lsl #10
    3d94:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3d98:	01061305 	tsteq	r6, r5, lsl #6
    3d9c:	20060f05 	andcs	r0, r6, r5, lsl #30
    3da0:	13060505 	movwne	r0, #25861	; 0x6505
    3da4:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    3da8:	08022008 	stmdaeq	r2, {r3, sp}
    3dac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3db0:	02050028 	andeq	r0, r5, #40	; 0x28
    3db4:	00002320 	andeq	r2, r0, r0, lsr #6
    3db8:	010a8c03 	tsteq	sl, r3, lsl #24
    3dbc:	1a030105 	bne	c41d8 <__ccfg+0xa4230>
    3dc0:	00010201 	andeq	r0, r1, r1, lsl #4
    3dc4:	01240101 			; <UNDEFINED> instruction: 0x01240101
    3dc8:	00030000 	andeq	r0, r3, r0
    3dcc:	0000008a 	andeq	r0, r0, sl, lsl #1
    3dd0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3dd4:	0101000d 	tsteq	r1, sp
    3dd8:	00000101 	andeq	r0, r0, r1, lsl #2
    3ddc:	00000100 	andeq	r0, r0, r0, lsl #2
    3de0:	6f682f01 	svcvs	0x00682f01
    3de4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3de8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3dec:	442f6e65 	strtmi	r6, [pc], #-3685	; 3df4 <NOROM_SetupTrimDevice+0x9c>
    3df0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3df4:	4f2f706f 	svcmi	0x002f706f
    3df8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3dfc:	502f5445 	eorpl	r5, pc, r5, asr #8
    3e00:	534f4349 	movtpl	r4, #62281	; 0xf349
    3e04:	6369502f 	cmnvs	r9, #47	; 0x2f
    3e08:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3e0c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3e10:	752f0058 	strvc	r0, [pc, #-88]!	; 3dc0 <NOROM_SetupTrimDevice+0x68>
    3e14:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3c50 <NOROM_RFCRfTrimSet+0x8>
    3e18:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3e1c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3e20:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3e24:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3e28:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3e2c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3e30:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3e34:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3e38:	00006564 	andeq	r6, r0, r4, ror #10
    3e3c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3e40:	5f707574 	svcpl	0x00707574
    3e44:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    3e48:	00010063 	andeq	r0, r1, r3, rrx
    3e4c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3e50:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3e54:	00020068 	andeq	r0, r2, r8, rrx
    3e58:	01050000 	mrseq	r0, (UNDEF: 5)
    3e5c:	22020500 	andcs	r0, r2, #0, 10
    3e60:	03000023 	movweq	r0, #35	; 0x23
    3e64:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    3e68:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3e6c:	0102100a 	tsteq	r2, sl
    3e70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e74:	02050001 	andeq	r0, r5, #1
    3e78:	00002324 	andeq	r2, r0, r4, lsr #6
    3e7c:	01029603 	tsteq	r2, r3, lsl #12
    3e80:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3e84:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3e88:	01010001 	tsteq	r1, r1
    3e8c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3e90:	00232602 	eoreq	r2, r3, r2, lsl #12
    3e94:	02a80300 	adceq	r0, r8, #0, 6
    3e98:	16050501 	strne	r0, [r5], -r1, lsl #10
    3e9c:	100a0514 	andne	r0, sl, r4, lsl r5
    3ea0:	01000102 	tsteq	r0, r2, lsl #2
    3ea4:	00010501 	andeq	r0, r1, r1, lsl #10
    3ea8:	23280205 			; <UNDEFINED> instruction: 0x23280205
    3eac:	d2030000 	andle	r0, r3, #0
    3eb0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3eb4:	01051713 	tsteq	r5, r3, lsl r7
    3eb8:	017a0306 	cmneq	sl, r6, lsl #6
    3ebc:	06260505 	strteq	r0, [r6], -r5, lsl #10
    3ec0:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    3ec4:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    3ec8:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    3ecc:	06050520 	streq	r0, [r5], -r0, lsr #10
    3ed0:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    3ed4:	900d0304 	andls	r0, sp, r4, lsl #6
    3ed8:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3edc:	052f0601 	streq	r0, [pc, #-1537]!	; 38e3 <NOROM_OSCHF_AttemptToSwitchToXosc+0xb>
    3ee0:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    3ee4:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    3ee8:	00100201 	andseq	r0, r0, r1, lsl #4
    3eec:	01890101 	orreq	r0, r9, r1, lsl #2
    3ef0:	00030000 	andeq	r0, r3, r0
    3ef4:	00000183 	andeq	r0, r0, r3, lsl #3
    3ef8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3efc:	0101000d 	tsteq	r1, sp
    3f00:	00000101 	andeq	r0, r0, r1, lsl #2
    3f04:	00000100 	andeq	r0, r0, r0, lsl #2
    3f08:	73752f01 	cmnvc	r5, #1, 30
    3f0c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3f10:	63672f62 	cmnvs	r7, #392	; 0x188
    3f14:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3f18:	6f6e2d6d 	svcvs	0x006e2d6d
    3f1c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3f20:	2f696261 	svccs	0x00696261
    3f24:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3f28:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3f2c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3f30:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3f34:	2f656d6f 	svccs	0x00656d6f
    3f38:	70657473 	rsbvc	r7, r5, r3, ror r4
    3f3c:	2f6e6568 	svccs	0x006e6568
    3f40:	6b736544 	blvs	1cdd458 <__ccfg+0x1cbd4b0>
    3f44:	2f706f74 	svccs	0x00706f74
    3f48:	4f534c4f 	svcmi	0x00534c4f
    3f4c:	2f54454e 	svccs	0x0054454e
    3f50:	4f434950 	svcmi	0x00434950
    3f54:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3f58:	2f534f63 	svccs	0x00534f63
    3f5c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f60:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3f64:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3f68:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3f6c:	6e692f45 	cdpvs	15, 6, cr2, cr9, cr5, {2}
    3f70:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    3f74:	2f656d6f 	svccs	0x00656d6f
    3f78:	70657473 	rsbvc	r7, r5, r3, ror r4
    3f7c:	2f6e6568 	svccs	0x006e6568
    3f80:	6b736544 	blvs	1cdd498 <__ccfg+0x1cbd4f0>
    3f84:	2f706f74 	svccs	0x00706f74
    3f88:	4f534c4f 	svcmi	0x00534c4f
    3f8c:	2f54454e 	svccs	0x0054454e
    3f90:	4f434950 	svcmi	0x00434950
    3f94:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3f98:	2f534f63 	svccs	0x00534f63
    3f9c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fa0:	2f005858 	svccs	0x00005858
    3fa4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fa8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    3fac:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    3fb0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fb4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3fb8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3fbc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3fc0:	4349502f 	movtmi	r5, #36911	; 0x902f
    3fc4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3fc8:	534f6369 	movtpl	r6, #62313	; 0xf369
    3fcc:	6f682f00 	svcvs	0x00682f00
    3fd0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3fd4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3fd8:	442f6e65 	strtmi	r6, [pc], #-3685	; 3fe0 <NOROM_SetupGetTrimForAmpcompCtrl+0x24>
    3fdc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3fe0:	4f2f706f 	svcmi	0x002f706f
    3fe4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3fe8:	502f5445 	eorpl	r5, pc, r5, asr #8
    3fec:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ff0:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ff4:	6b2f534f 	blvs	bd8d38 <__ccfg+0xbb8d90>
    3ff8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3ffc:	7300006c 	movwvc	r0, #108	; 0x6c
    4000:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4004:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4008:	68000001 	stmdavs	r0, {r0}
    400c:	63635f77 	cmnvs	r3, #476	; 0x1dc
    4010:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    4014:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    4018:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    401c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    4020:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4024:	72610000 	rsbvc	r0, r1, #0
    4028:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    402c:	00000300 	andeq	r0, r0, r0, lsl #6
    4030:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4034:	0300682e 	movweq	r6, #2094	; 0x82e
    4038:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    403c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4040:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4044:	00000300 	andeq	r0, r0, r0, lsl #6
    4048:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    404c:	5f736e6f 	svcpl	0x00736e6f
    4050:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4054:	00030068 	andeq	r0, r3, r8, rrx
    4058:	73797300 	cmnvc	r9, #0, 6
    405c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4060:	00000400 	andeq	r0, r0, r0, lsl #8
    4064:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4068:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    406c:	00000500 	andeq	r0, r0, r0, lsl #10
    4070:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    4074:	0300632e 	movweq	r6, #814	; 0x32e
    4078:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    407c:	03000002 	movweq	r0, #2
    4080:	0001c500 	andeq	ip, r1, r0, lsl #10
    4084:	fb010200 	blx	4488e <__ccfg+0x248e6>
    4088:	01000d0e 	tsteq	r0, lr, lsl #26
    408c:	00010101 	andeq	r0, r1, r1, lsl #2
    4090:	00010000 	andeq	r0, r1, r0
    4094:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4098:	2f656d6f 	svccs	0x00656d6f
    409c:	70657473 	rsbvc	r7, r5, r3, ror r4
    40a0:	2f6e6568 	svccs	0x006e6568
    40a4:	6b736544 	blvs	1cdd5bc <__ccfg+0x1cbd614>
    40a8:	2f706f74 	svccs	0x00706f74
    40ac:	4f534c4f 	svcmi	0x00534c4f
    40b0:	2f54454e 	svccs	0x0054454e
    40b4:	4f434950 	svcmi	0x00434950
    40b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    40bc:	2f534f63 	svccs	0x00534f63
    40c0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    40c4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    40c8:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    40cc:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    40d0:	2f656d6f 	svccs	0x00656d6f
    40d4:	70657473 	rsbvc	r7, r5, r3, ror r4
    40d8:	2f6e6568 	svccs	0x006e6568
    40dc:	6b736544 	blvs	1cdd5f4 <__ccfg+0x1cbd64c>
    40e0:	2f706f74 	svccs	0x00706f74
    40e4:	4f534c4f 	svcmi	0x00534c4f
    40e8:	2f54454e 	svccs	0x0054454e
    40ec:	4f434950 	svcmi	0x00434950
    40f0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    40f4:	2f534f63 	svccs	0x00534f63
    40f8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    40fc:	2f005858 	svccs	0x00005858
    4100:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4104:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4108:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    410c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4110:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4114:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4118:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    411c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4120:	502f534f 	eorpl	r5, pc, pc, asr #6
    4124:	534f6369 	movtpl	r6, #62313	; 0xf369
    4128:	3143432f 	cmpcc	r3, pc, lsr #6
    412c:	2f585833 	svccs	0x00585833
    4130:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4134:	41575858 	cmpmi	r7, r8, asr r8
    4138:	642f4552 	strtvs	r4, [pc], #-1362	; 4140 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x58>
    413c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4140:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4144:	73752f00 	cmnvc	r5, #0, 30
    4148:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    414c:	63672f62 	cmnvs	r7, #392	; 0x188
    4150:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4154:	6f6e2d6d 	svcvs	0x006e2d6d
    4158:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    415c:	2f696261 	svccs	0x00696261
    4160:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4164:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4168:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    416c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4170:	2f656d6f 	svccs	0x00656d6f
    4174:	70657473 	rsbvc	r7, r5, r3, ror r4
    4178:	2f6e6568 	svccs	0x006e6568
    417c:	6b736544 	blvs	1cdd694 <__ccfg+0x1cbd6ec>
    4180:	2f706f74 	svccs	0x00706f74
    4184:	4f534c4f 	svcmi	0x00534c4f
    4188:	2f54454e 	svccs	0x0054454e
    418c:	4f434950 	svcmi	0x00434950
    4190:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4194:	00534f63 	subseq	r4, r3, r3, ror #30
    4198:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 40e4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>
    419c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    41a0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    41a4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    41a8:	6f746b73 	svcvs	0x00746b73
    41ac:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    41b0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    41b4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    41b8:	2f534f43 	svccs	0x00534f43
    41bc:	4f636950 	svcmi	0x00636950
    41c0:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    41c4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    41c8:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    41cc:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    41d0:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    41d4:	0100632e 	tsteq	r0, lr, lsr #6
    41d8:	6d630000 	stclvs	0, cr0, [r3, #-0]
    41dc:	5f736973 	svcpl	0x00736973
    41e0:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    41e4:	00020068 	andeq	r0, r2, r8, rrx
    41e8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    41ec:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    41f0:	73000003 	movwvc	r0, #3
    41f4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    41f8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    41fc:	61000004 	tstvs	r0, r4
    4200:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4204:	00020068 	andeq	r0, r2, r8, rrx
    4208:	63616d00 	cmnvs	r1, #0, 26
    420c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4210:	70000002 	andvc	r0, r0, r2
    4214:	5f736e69 	svcpl	0x00736e69
    4218:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    421c:	00020068 	andeq	r0, r2, r8, rrx
    4220:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4224:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4228:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    422c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4230:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4234:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4238:	00050068 	andeq	r0, r5, r8, rrx
    423c:	72656b00 	rsbvc	r6, r5, #0, 22
    4240:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4244:	00060068 	andeq	r0, r6, r8, rrx
    4248:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    424c:	00020500 	andeq	r0, r2, r0, lsl #10
    4250:	03000000 	movweq	r0, #0
    4254:	1b05010e 	blne	144694 <__ccfg+0x1246ec>
    4258:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    425c:	02010601 	andeq	r0, r1, #1048576	; 0x100000
    4260:	01010001 	tsteq	r1, r1
    4264:	05003f05 	streq	r3, [r0, #-3845]	; 0xfffff0fb
    4268:	00000002 	andeq	r0, r0, r2
    426c:	01100300 	tsteq	r0, r0, lsl #6
    4270:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4274:	3f051413 	svccc	0x00051413
    4278:	017a0306 	cmneq	sl, r6, lsl #6
    427c:	26050520 	strcs	r0, [r5], -r0, lsr #10
    4280:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    4284:	01060605 	tsteq	r6, r5, lsl #12
    4288:	4d060305 	stcmi	3, cr0, [r6, #-20]	; 0xffffffec
    428c:	c1030204 	tstgt	r3, r4, lsl #4
    4290:	01040100 	mrseq	r0, (UNDEF: 20)
    4294:	3d204003 	stccc	0, cr4, [r0, #-12]!
    4298:	0302044b 	movweq	r0, #9291	; 0x244b
    429c:	01040133 	tsteq	r4, r3, lsr r1
    42a0:	05204e03 	streq	r4, [r0, #-3587]!	; 0xfffff1fd
    42a4:	07053102 	streq	r3, [r5, -r2, lsl #2]
    42a8:	03040106 	movweq	r0, #16646	; 0x4106
    42ac:	8b030f05 	blhi	c7ec8 <__ccfg+0xa7f20>
    42b0:	01042e01 	tsteq	r4, r1, lsl #28
    42b4:	f5030705 			; <UNDEFINED> instruction: 0xf5030705
    42b8:	0205207e 	andeq	r2, r5, #126	; 0x7e
    42bc:	0b052106 	bleq	14c6dc <__ccfg+0x12c734>
    42c0:	13030513 	movwne	r0, #13587	; 0x3513
    42c4:	29050304 	stmdbcs	r5, {r2, r8, r9}
    42c8:	01018303 	tsteq	r1, r3, lsl #6
    42cc:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42d0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    42d4:	017ef803 	cmneq	lr, r3, lsl #16	; <UNPREDICTABLE>
    42d8:	0f050304 	svceq	0x00050304
    42dc:	20018803 	andcs	r8, r1, r3, lsl #16
    42e0:	0b050104 	bleq	1446f8 <__ccfg+0x124750>
    42e4:	207ef803 	rsbscs	pc, lr, r3, lsl #16
    42e8:	33050304 	movwcc	r0, #21252	; 0x5304
    42ec:	2e018803 	cdpcs	8, 0, cr8, cr1, cr3, {0}
    42f0:	04204205 	strteq	r4, [r0], #-517	; 0xfffffdfb
    42f4:	030b0501 	movweq	r0, #46337	; 0xb501
    42f8:	052e7ef8 	streq	r7, [lr, #-3832]!	; 0xfffff108
    42fc:	1f052e08 	svcne	0x00052e08
    4300:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    4304:	051e0205 	ldreq	r0, [lr, #-517]	; 0xfffffdfb
    4308:	3a052208 	bcc	14cb30 <__ccfg+0x12cb88>
    430c:	0b051f06 	bleq	14bf2c <__ccfg+0x12bf84>
    4310:	06020501 	streq	r0, [r2], -r1, lsl #10
    4314:	23010511 	movwcs	r0, #5393	; 0x1511
    4318:	01000602 	tsteq	r0, r2, lsl #12
    431c:	00034101 	andeq	r4, r3, r1, lsl #2
    4320:	ae000300 	cdpge	3, 0, cr0, cr0, cr0, {0}
    4324:	02000001 	andeq	r0, r0, #1
    4328:	0d0efb01 	vstreq	d15, [lr, #-4]
    432c:	01010100 	mrseq	r0, (UNDEF: 17)
    4330:	00000001 	andeq	r0, r0, r1
    4334:	01000001 	tsteq	r0, r1
    4338:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4284 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    433c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4340:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4344:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4348:	6f746b73 	svcvs	0x00746b73
    434c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4350:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4354:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4358:	2f534f43 	svccs	0x00534f43
    435c:	4f636950 	svcmi	0x00636950
    4360:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4364:	2f736269 	svccs	0x00736269
    4368:	2f004f49 	svccs	0x00004f49
    436c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4370:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4374:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4378:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    437c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4380:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4384:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4388:	4349502f 	movtmi	r5, #36911	; 0x902f
    438c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4390:	534f6369 	movtpl	r6, #62313	; 0xf369
    4394:	3143432f 	cmpcc	r3, pc, lsr #6
    4398:	2f585833 	svccs	0x00585833
    439c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    43a0:	41575858 	cmpmi	r7, r8, asr r8
    43a4:	642f4552 	strtvs	r4, [pc], #-1362	; 43ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>
    43a8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    43ac:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    43b0:	73752f00 	cmnvc	r5, #0, 30
    43b4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    43b8:	63672f62 	cmnvs	r7, #392	; 0x188
    43bc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    43c0:	6f6e2d6d 	svcvs	0x006e2d6d
    43c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    43c8:	2f696261 	svccs	0x00696261
    43cc:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    43d0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    43d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    43d8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    43dc:	2f656d6f 	svccs	0x00656d6f
    43e0:	70657473 	rsbvc	r7, r5, r3, ror r4
    43e4:	2f6e6568 	svccs	0x006e6568
    43e8:	6b736544 	blvs	1cdd900 <__ccfg+0x1cbd958>
    43ec:	2f706f74 	svccs	0x00706f74
    43f0:	4f534c4f 	svcmi	0x00534c4f
    43f4:	2f54454e 	svccs	0x0054454e
    43f8:	4f434950 	svcmi	0x00434950
    43fc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4400:	2f534f63 	svccs	0x00534f63
    4404:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4408:	2f005858 	svccs	0x00005858
    440c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4410:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4414:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4418:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    441c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4420:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4424:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4428:	4349502f 	movtmi	r5, #36911	; 0x902f
    442c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4430:	534f6369 	movtpl	r6, #62313	; 0xf369
    4434:	6f682f00 	svcvs	0x00682f00
    4438:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    443c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4440:	442f6e65 	strtmi	r6, [pc], #-3685	; 4448 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x74>
    4444:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4448:	4f2f706f 	svcmi	0x002f706f
    444c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4450:	502f5445 	eorpl	r5, pc, r5, asr #8
    4454:	534f4349 	movtpl	r4, #62281	; 0xf349
    4458:	6369502f 	cmnvs	r9, #47	; 0x2f
    445c:	6b2f534f 	blvs	bd91a0 <__ccfg+0xbb91f8>
    4460:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4464:	6200006c 	andvs	r0, r0, #108	; 0x6c
    4468:	6f747475 	svcvs	0x00747475
    446c:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    4470:	00000100 	andeq	r0, r0, r0, lsl #2
    4474:	6f697067 	svcvs	0x00697067
    4478:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    447c:	74730000 	ldrbtvc	r0, [r3], #-0
    4480:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4484:	0300682e 	movweq	r6, #2094	; 0x82e
    4488:	72610000 	rsbvc	r0, r1, #0
    448c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4490:	00000400 	andeq	r0, r0, r0, lsl #8
    4494:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4498:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    449c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    44a0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    44a4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    44a8:	00000400 	andeq	r0, r0, r0, lsl #8
    44ac:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    44b0:	5f736e6f 	svcpl	0x00736e6f
    44b4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    44b8:	00040068 	andeq	r0, r4, r8, rrx
    44bc:	73797300 	cmnvc	r9, #0, 6
    44c0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    44c4:	00000500 	andeq	r0, r0, r0, lsl #10
    44c8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    44cc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    44d0:	00000600 	andeq	r0, r0, r0, lsl #12
    44d4:	00010500 	andeq	r0, r1, r0, lsl #10
    44d8:	00000205 	andeq	r0, r0, r5, lsl #4
    44dc:	1b030000 	blne	c44e4 <__ccfg+0xa453c>
    44e0:	2e060101 	adfcss	f0, f6, f1
    44e4:	6a060205 	bvs	184d00 <__ccfg+0x164d58>
    44e8:	01060e05 	tsteq	r6, r5, lsl #28
    44ec:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    44f0:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    44f4:	0f054002 	svceq	0x00054002
    44f8:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    44fc:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    4500:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4504:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    4508:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    450c:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    4510:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    4514:	03062002 	movweq	r2, #24578	; 0x6002
    4518:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    451c:	71030305 	tstvc	r3, r5, lsl #6
    4520:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4524:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    4528:	17050501 	strne	r0, [r5, -r1, lsl #10]
    452c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4530:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    4534:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4538:	0183030f 	orreq	r0, r3, pc, lsl #6
    453c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4540:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    4544:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4548:	01830333 	orreq	r0, r3, r3, lsr r3
    454c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4550:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    4554:	06040520 	streq	r0, [r4], -r0, lsr #10
    4558:	06050530 			; <UNDEFINED> instruction: 0x06050530
    455c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4560:	06030540 	streq	r0, [r3], -r0, asr #10
    4564:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    4568:	0306052f 	movweq	r0, #25903	; 0x652f
    456c:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    4570:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4574:	3c160306 	ldccc	3, cr0, [r6], {6}
    4578:	01060705 	tsteq	r6, r5, lsl #14
    457c:	29050204 	stmdbcs	r5, {r2, r9}
    4580:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    4584:	17050558 	smlsdne	r5, r8, r5, r0
    4588:	01060f05 	tsteq	r6, r5, lsl #30
    458c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4590:	207f9003 	rsbscs	r9, pc, r3
    4594:	0f050204 	svceq	0x00050204
    4598:	2000f003 	andcs	pc, r0, r3
    459c:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    45a0:	03050501 	movweq	r0, #21761	; 0x5501
    45a4:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    45a8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    45ac:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    45b0:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    45b4:	07055102 	streq	r5, [r5, -r2, lsl #2]
    45b8:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    45bc:	03062905 	movweq	r2, #26885	; 0x6905
    45c0:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    45c4:	0f051705 	svceq	0x00051705
    45c8:	01040106 	tsteq	r4, r6, lsl #2
    45cc:	9c030705 	stcls	7, cr0, [r3], {5}
    45d0:	0204207f 	andeq	r2, r4, #127	; 0x7f
    45d4:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    45d8:	01042e00 	tsteq	r4, r0, lsl #28
    45dc:	9c030705 	stcls	7, cr0, [r3], {5}
    45e0:	0204207f 	andeq	r2, r4, #127	; 0x7f
    45e4:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    45e8:	01042000 	mrseq	r2, (UNDEF: 4)
    45ec:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    45f0:	0205207f 	andeq	r2, r5, #127	; 0x7f
    45f4:	0e053106 	adfeqs	f3, f5, f6
    45f8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    45fc:	0602052e 	streq	r0, [r2], -lr, lsr #10
    4600:	06030531 			; <UNDEFINED> instruction: 0x06030531
    4604:	06020501 	streq	r0, [r2], -r1, lsl #10
    4608:	06010522 	streq	r0, [r1], -r2, lsr #10
    460c:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    4610:	4c060105 	stfmis	f0, [r6], {5}
    4614:	01000c02 	tsteq	r0, r2, lsl #24
    4618:	00290501 	eoreq	r0, r9, r1, lsl #10
    461c:	00000205 	andeq	r0, r0, r5, lsl #4
    4620:	d7030000 	strle	r0, [r3, -r0]
    4624:	02050100 	andeq	r0, r5, #0, 2
    4628:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    462c:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    4630:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    4634:	03052005 	movweq	r2, #20485	; 0x5005
    4638:	01052106 	tsteq	r5, r6, lsl #2
    463c:	03051a06 	movweq	r1, #23046	; 0x5a06
    4640:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    4644:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    4648:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    464c:	03053c05 	movweq	r3, #23557	; 0x5c05
    4650:	052f2f06 	streq	r2, [pc, #-3846]!	; 3752 <vscan+0x34a>
    4654:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    4658:	01052c03 	tsteq	r5, r3, lsl #24
    465c:	0006023e 	andeq	r0, r6, lr, lsr r2
    4660:	09360101 	ldmdbeq	r6!, {r0, r8}
    4664:	00030000 	andeq	r0, r3, r0
    4668:	000001d1 	ldrdeq	r0, [r0], -r1
    466c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4670:	0101000d 	tsteq	r1, sp
    4674:	00000101 	andeq	r0, r0, r1, lsl #2
    4678:	00000100 	andeq	r0, r0, r0, lsl #2
    467c:	6f682f01 	svcvs	0x00682f01
    4680:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4684:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4688:	442f6e65 	strtmi	r6, [pc], #-3685	; 4690 <NOROM_ChipInfo_GetChipFamily+0x24>
    468c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4690:	4f2f706f 	svcmi	0x002f706f
    4694:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4698:	502f5445 	eorpl	r5, pc, r5, asr #8
    469c:	534f4349 	movtpl	r4, #62281	; 0xf349
    46a0:	6369502f 	cmnvs	r9, #47	; 0x2f
    46a4:	502f534f 	eorpl	r5, pc, pc, asr #6
    46a8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    46ac:	6f74532f 	svcvs	0x0074532f
    46b0:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    46b4:	6f682f00 	svcvs	0x00682f00
    46b8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    46bc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    46c0:	442f6e65 	strtmi	r6, [pc], #-3685	; 46c8 <NOROM_ChipInfo_GetHwRevision+0x10>
    46c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    46c8:	4f2f706f 	svcmi	0x002f706f
    46cc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    46d0:	502f5445 	eorpl	r5, pc, r5, asr #8
    46d4:	534f4349 	movtpl	r4, #62281	; 0xf349
    46d8:	6369502f 	cmnvs	r9, #47	; 0x2f
    46dc:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    46e0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    46e4:	43432f58 	movtmi	r2, #16216	; 0x3f58
    46e8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    46ec:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    46f0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    46f4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    46f8:	2f006269 	svccs	0x00006269
    46fc:	2f727375 	svccs	0x00727375
    4700:	2f62696c 	svccs	0x0062696c
    4704:	2f636367 	svccs	0x00636367
    4708:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    470c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4710:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4714:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4718:	2f312e32 	svccs	0x00312e32
    471c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4720:	00656475 	rsbeq	r6, r5, r5, ror r4
    4724:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4670 <NOROM_ChipInfo_GetChipFamily+0x4>
    4728:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    472c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4730:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4734:	6f746b73 	svcvs	0x00746b73
    4738:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    473c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4740:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4744:	2f534f43 	svccs	0x00534f43
    4748:	4f636950 	svcmi	0x00636950
    474c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4750:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4754:	6f682f00 	svcvs	0x00682f00
    4758:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    475c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4760:	442f6e65 	strtmi	r6, [pc], #-3685	; 4768 <NOROM_DDI32RegWrite+0x4>
    4764:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4768:	4f2f706f 	svcmi	0x002f706f
    476c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4770:	502f5445 	eorpl	r5, pc, r5, asr #8
    4774:	534f4349 	movtpl	r4, #62281	; 0xf349
    4778:	6369502f 	cmnvs	r9, #47	; 0x2f
    477c:	2f00534f 	svccs	0x0000534f
    4780:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4784:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4788:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    478c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4790:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4794:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4798:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    479c:	4349502f 	movtmi	r5, #36911	; 0x902f
    47a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    47a4:	534f6369 	movtpl	r6, #62313	; 0xf369
    47a8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    47ac:	006c656e 	rsbeq	r6, ip, lr, ror #10
    47b0:	6f747300 	svcvs	0x00747300
    47b4:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    47b8:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    47bc:	30387235 	eorscc	r7, r8, r5, lsr r2
    47c0:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    47c4:	00000100 	andeq	r0, r0, r0, lsl #2
    47c8:	6f697067 	svcvs	0x00697067
    47cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    47d0:	74730000 	ldrbtvc	r0, [r3], #-0
    47d4:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    47d8:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    47dc:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 4624 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x30>
    47e0:	0100682e 	tsteq	r0, lr, lsr #16
    47e4:	74730000 	ldrbtvc	r0, [r3], #-0
    47e8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    47ec:	0300682e 	movweq	r6, #2094	; 0x82e
    47f0:	72610000 	rsbvc	r0, r1, #0
    47f4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    47f8:	00000400 	andeq	r0, r0, r0, lsl #8
    47fc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4800:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4804:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4808:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    480c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4810:	00000400 	andeq	r0, r0, r0, lsl #8
    4814:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4818:	5f736e6f 	svcpl	0x00736e6f
    481c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4820:	00040068 	andeq	r0, r4, r8, rrx
    4824:	73797300 	cmnvc	r9, #0, 6
    4828:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    482c:	00000500 	andeq	r0, r0, r0, lsl #10
    4830:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4834:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4838:	00000600 	andeq	r0, r0, r0, lsl #12
    483c:	00190500 	andseq	r0, r9, r0, lsl #10
    4840:	23740205 	cmncs	r4, #1342177280	; 0x50000000
    4844:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4848:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    484c:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    4850:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    4854:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    4858:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    485c:	20028a03 	andcs	r8, r2, r3, lsl #20
    4860:	19050104 	stmdbne	r5, {r2, r8}
    4864:	2e7df103 	expcse	f7, f3
    4868:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    486c:	2002c503 	andcs	ip, r2, r3, lsl #10
    4870:	d0030f05 	andle	r0, r3, r5, lsl #30
    4874:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    4878:	2000fa03 	andcs	pc, r0, r3, lsl #20
    487c:	03050104 	movweq	r0, #20740	; 0x5104
    4880:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    4884:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4888:	8f03060f 	svchi	0x0003060f
    488c:	01040101 	tsteq	r4, r1, lsl #2
    4890:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    4894:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    4898:	1f050521 	svcne	0x00050521
    489c:	21060305 	tstcs	r6, r5, lsl #6
    48a0:	29050204 	stmdbcs	r5, {r2, r9}
    48a4:	01018903 	tsteq	r1, r3, lsl #18
    48a8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    48ac:	03040501 	movweq	r0, #17665	; 0x4501
    48b0:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    48b4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    48b8:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    48bc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    48c0:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    48c4:	01041705 	tsteq	r4, r5, lsl #14
    48c8:	03060205 	movweq	r0, #25093	; 0x6205
    48cc:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    48d0:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    48d4:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    48d8:	06030501 	streq	r0, [r3], -r1, lsl #10
    48dc:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    48e0:	29050204 	stmdbcs	r5, {r2, r9}
    48e4:	0102b603 	tsteq	r2, r3, lsl #12
    48e8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    48ec:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    48f0:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    48f4:	207dc003 	rsbscs	ip, sp, r3
    48f8:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    48fc:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    4900:	20090301 	andcs	r0, r9, r1, lsl #6
    4904:	01000702 	tsteq	r0, r2, lsl #14
    4908:	001f0501 	andseq	r0, pc, r1, lsl #10
    490c:	23a80205 			; <UNDEFINED> instruction: 0x23a80205
    4910:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4914:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4918:	010e0514 	tsteq	lr, r4, lsl r5
    491c:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    4920:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4924:	01ff032d 	mvnseq	r0, sp, lsr #6
    4928:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    492c:	86030603 	strhi	r0, [r3], -r3, lsl #12
    4930:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    4934:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4938:	02042f06 	andeq	r2, r4, #6, 30
    493c:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    4940:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4944:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4948:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    494c:	89030604 	stmdbhi	r3, {r2, r9, sl}
    4950:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    4954:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    4958:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    495c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4960:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4964:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    4968:	0204207d 	andeq	r2, r4, #125	; 0x7d
    496c:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    4970:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4974:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4978:	017e8c03 	cmneq	lr, r3, lsl #24
    497c:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4980:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4984:	01fb032d 	mvnseq	r0, sp, lsr #6
    4988:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    498c:	8b030603 	blhi	c61a0 <__ccfg+0xa61f8>
    4990:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4994:	a6032905 	strge	r2, [r3], -r5, lsl #18
    4998:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    499c:	06010417 			; <UNDEFINED> instruction: 0x06010417
    49a0:	017dd603 	cmneq	sp, r3, lsl #12
    49a4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    49a8:	2002aa03 	andcs	sl, r2, r3, lsl #20
    49ac:	03050104 	movweq	r0, #20740	; 0x5104
    49b0:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    49b4:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    49b8:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    49bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    49c0:	03010501 	movweq	r0, #5377	; 0x1501
    49c4:	05022009 	streq	r2, [r2, #-9]
    49c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    49cc:	0205001e 	andeq	r0, r5, #30
    49d0:	000023d8 	ldrdeq	r2, [r0], -r8
    49d4:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    49d8:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    49dc:	cf032905 	svcgt	0x00032905
    49e0:	3d050103 	stfccs	f0, [r5, #-12]
    49e4:	17050514 	smladne	r5, r4, r5, r0
    49e8:	01063805 	tsteq	r6, r5, lsl #16
    49ec:	1e050104 	adfnes	f0, f5, f4
    49f0:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    49f4:	38050204 	stmdacc	r5, {r2, r9}
    49f8:	2003d803 	andcs	sp, r3, r3, lsl #16
    49fc:	02050104 	andeq	r0, r5, #4, 2
    4a00:	7cab0306 	stcvc	3, cr0, [fp], #24
    4a04:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4a08:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    4a0c:	3d050103 	stfccs	f0, [r5, #-12]
    4a10:	17050514 	smladne	r5, r4, r5, r0
    4a14:	01063805 	tsteq	r6, r5, lsl #16
    4a18:	01050104 	tsteq	r5, r4, lsl #2
    4a1c:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    4a20:	01000402 	tsteq	r0, r2, lsl #8
    4a24:	00270501 	eoreq	r0, r7, r1, lsl #10
    4a28:	23f00205 	mvnscs	r0, #1342177280	; 0x50000000
    4a2c:	d7030000 	strle	r0, [r3, -r0]
    4a30:	02050100 	andeq	r0, r5, #0, 2
    4a34:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4a38:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    4a3c:	ba033805 	blt	d2a58 <__ccfg+0xb2ab0>
    4a40:	01042e03 	tsteq	r4, r3, lsl #28
    4a44:	ca030905 	bgt	c6e60 <__ccfg+0xa6eb8>
    4a48:	0204207c 	andeq	r2, r4, #124	; 0x7c
    4a4c:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    4a50:	01042e03 	tsteq	r4, r3, lsl #28
    4a54:	03060805 	movweq	r0, #26629	; 0x6805
    4a58:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    4a5c:	3c730302 	ldclcc	3, cr0, [r3], #-8
    4a60:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4a64:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    4a68:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4a6c:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4a70:	06020501 	streq	r0, [r2], -r1, lsl #10
    4a74:	017cc003 	cmneq	ip, r3
    4a78:	38050204 	stmdacc	r5, {r2, r9}
    4a7c:	2003c003 	andcs	ip, r3, r3
    4a80:	02050104 	andeq	r0, r5, #4, 2
    4a84:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4a88:	06052f20 	streq	r2, [r5], -r0, lsr #30
    4a8c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4a90:	02042f06 	andeq	r2, r4, #6, 30
    4a94:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    4a98:	3d050103 	stfccs	f0, [r5, #-12]
    4a9c:	17050514 	smladne	r5, r4, r5, r0
    4aa0:	01063805 	tsteq	r6, r5, lsl #16
    4aa4:	02050104 	andeq	r0, r5, #4, 2
    4aa8:	7cc30306 	stclvc	3, cr0, [r3], {6}
    4aac:	060f052e 	streq	r0, [pc], -lr, lsr #10
    4ab0:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4ab4:	03060305 	movweq	r0, #25349	; 0x6305
    4ab8:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    4abc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4ac0:	4b4c4b06 	blmi	13176e0 <__ccfg+0x12f7738>
    4ac4:	01000702 	tsteq	r0, r2, lsl #14
    4ac8:	00160501 	andseq	r0, r6, r1, lsl #10
    4acc:	24440205 	strbcs	r0, [r4], #-517	; 0xfffffdfb
    4ad0:	81030000 	mrshi	r0, (UNDEF: 3)
    4ad4:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4ad8:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4adc:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4ae0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ae4:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4ae8:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    4aec:	01050106 	tsteq	r5, r6, lsl #2
    4af0:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4af4:	0302051b 	movweq	r0, #9499	; 0x251b
    4af8:	01010166 	tsteq	r1, r6, ror #2
    4afc:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4b00:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4b04:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4b08:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4b0c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4b10:	03020501 	movweq	r0, #9473	; 0x2501
    4b14:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4b18:	03380502 	teqeq	r8, #8388608	; 0x800000
    4b1c:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    4b20:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b24:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4b28:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4b2c:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    4b30:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4b34:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4b38:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b3c:	017ce303 	cmneq	ip, r3, lsl #6
    4b40:	38050204 	stmdacc	r5, {r2, r9}
    4b44:	20039d03 	andcs	r9, r3, r3, lsl #26
    4b48:	02050104 	andeq	r0, r5, #4, 2
    4b4c:	7ce30306 	stclvc	3, cr0, [r3], #24
    4b50:	03030520 	movweq	r0, #13600	; 0x3520
    4b54:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    4b58:	09020106 	stmdbeq	r2, {r1, r2, r8}
    4b5c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4b60:	02050017 	andeq	r0, r5, #23
    4b64:	00002484 	andeq	r2, r0, r4, lsl #9
    4b68:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    4b6c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4b70:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    4b74:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    4b78:	06030520 	streq	r0, [r3], -r0, lsr #10
    4b7c:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    4b80:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    4b84:	3c130303 	ldccc	3, cr0, [r3], {3}
    4b88:	01060905 	tsteq	r6, r5, lsl #18
    4b8c:	2f060305 	svccs	0x00060305
    4b90:	01050101 	tsteq	r5, r1, lsl #2
    4b94:	03021406 	movweq	r1, #9222	; 0x2406
    4b98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4b9c:	02050011 	andeq	r0, r5, #17
    4ba0:	000024a8 	andeq	r2, r0, r8, lsr #9
    4ba4:	01019203 	tsteq	r1, r3, lsl #4
    4ba8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4bac:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    4bb0:	2f062402 	svccs	0x00062402
    4bb4:	01060805 	tsteq	r6, r5, lsl #16
    4bb8:	0e030105 	adfeqs	f0, f3, f5
    4bbc:	0308052e 	movweq	r0, #34094	; 0x852e
    4bc0:	02052072 	andeq	r2, r5, #114	; 0x72
    4bc4:	200d0306 	andcs	r0, sp, r6, lsl #6
    4bc8:	13060105 	movwne	r0, #24837	; 0x6105
    4bcc:	01000302 	tsteq	r0, r2, lsl #6
    4bd0:	00120501 	andseq	r0, r2, r1, lsl #10
    4bd4:	24bc0205 	ldrtcs	r0, [ip], #517	; 0x205
    4bd8:	a7030000 	strge	r0, [r3, -r0]
    4bdc:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4be0:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4be4:	20050501 	andcs	r0, r5, r1, lsl #10
    4be8:	2f060305 	svccs	0x00060305
    4bec:	01060905 	tsteq	r6, r5, lsl #18
    4bf0:	2f060305 	svccs	0x00060305
    4bf4:	30060105 	andcc	r0, r6, r5, lsl #2
    4bf8:	01000302 	tsteq	r0, r2, lsl #6
    4bfc:	002b0501 	eoreq	r0, fp, r1, lsl #10
    4c00:	00000205 	andeq	r0, r0, r5, lsl #4
    4c04:	af030000 	svcge	0x00030000
    4c08:	20060101 	andcs	r0, r6, r1, lsl #2
    4c0c:	30060205 	andcc	r0, r6, r5, lsl #4
    4c10:	01060505 	tsteq	r6, r5, lsl #10
    4c14:	31060205 	tstcc	r6, r5, lsl #4
    4c18:	01060505 	tsteq	r6, r5, lsl #10
    4c1c:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    4c20:	02052012 	andeq	r2, r5, #18
    4c24:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4c28:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4c2c:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    4c30:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4c34:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4c38:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4c3c:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    4c40:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4c44:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    4c48:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4c4c:	aa030602 	bge	c645c <__ccfg+0xa64b4>
    4c50:	4b2f207d 	blmi	bcce4c <__ccfg+0xbacea4>
    4c54:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4c58:	31020520 	tstcc	r2, r0, lsr #10
    4c5c:	29050204 	stmdbcs	r5, {r2, r9}
    4c60:	0102c703 	tsteq	r2, r3, lsl #14
    4c64:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4c68:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4c6c:	01040106 	tsteq	r4, r6, lsl #2
    4c70:	03060205 	movweq	r0, #25093	; 0x6205
    4c74:	302e7db4 	strhtcc	r7, [lr], -r4
    4c78:	13060105 	movwne	r0, #24837	; 0x6105
    4c7c:	03060305 	movweq	r0, #25349	; 0x6305
    4c80:	0a052e79 	beq	15066c <__ccfg+0x1306c4>
    4c84:	08050106 	stmdaeq	r5, {r1, r2, r8}
    4c88:	030a052e 	movweq	r0, #42286	; 0xa52e
    4c8c:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    4c90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4c94:	02050031 	andeq	r0, r5, #49	; 0x31
    4c98:	00000000 	andeq	r0, r0, r0
    4c9c:	0101ca03 	tsteq	r1, r3, lsl #20
    4ca0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4ca4:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4ca8:	3105220c 	tstcc	r5, ip, lsl #4
    4cac:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    4cb0:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4cb4:	03053005 	movweq	r3, #20485	; 0x5005
    4cb8:	06053206 	streq	r3, [r5], -r6, lsl #4
    4cbc:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4cc0:	20060520 	andcs	r0, r6, r0, lsr #10
    4cc4:	30060305 	andcc	r0, r6, r5, lsl #6
    4cc8:	01060605 	tsteq	r6, r5, lsl #12
    4ccc:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4cd0:	30320603 	eorscc	r0, r2, r3, lsl #12
    4cd4:	0a030405 	beq	c5cf0 <__ccfg+0xa5d48>
    4cd8:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    4cdc:	20090501 	andcs	r0, r9, r1, lsl #10
    4ce0:	05201005 	streq	r1, [r0, #-5]!
    4ce4:	04052009 	streq	r2, [r5], #-9
    4ce8:	11052206 	tstne	r5, r6, lsl #4
    4cec:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4cf0:	201f0520 	andscs	r0, pc, r0, lsr #10
    4cf4:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4cf8:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    4cfc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4d00:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4d04:	0b053106 	bleq	151124 <__ccfg+0x13117c>
    4d08:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4d0c:	052f2f06 	streq	r2, [pc, #-3846]!	; 3e0e <NOROM_SetupSetVddrLevel+0x12>
    4d10:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4d14:	20310301 	eorscs	r0, r1, r1, lsl #6
    4d18:	03060405 	movweq	r0, #25605	; 0x6405
    4d1c:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    4d20:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4d24:	20250520 	eorcs	r0, r5, r0, lsr #10
    4d28:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    4d2c:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    4d30:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4d34:	0b052804 	bleq	14ed4c <__ccfg+0x12eda4>
    4d38:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    4d3c:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    4d40:	03063805 	movweq	r3, #26629	; 0x6805
    4d44:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    4d48:	03040501 	movweq	r0, #17665	; 0x4501
    4d4c:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    4d50:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    4d54:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4d58:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    4d5c:	3d050103 	stfccs	f0, [r5, #-12]
    4d60:	17050514 	smladne	r5, r4, r5, r0
    4d64:	01063805 	tsteq	r6, r5, lsl #16
    4d68:	02050104 	andeq	r0, r5, #4, 2
    4d6c:	7cb20306 	ldcvc	3, cr0, [r2], #24
    4d70:	4b4b2f20 	blmi	12d09f8 <__ccfg+0x12b0a50>
    4d74:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    4d78:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    4d7c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4d80:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4d84:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4d88:	06020501 	streq	r0, [r2], -r1, lsl #10
    4d8c:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    4d90:	03060b05 	movweq	r0, #27397	; 0x6b05
    4d94:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    4d98:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    4d9c:	01061305 	tsteq	r6, r5, lsl #6
    4da0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4da4:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4da8:	06050520 	streq	r0, [r5], -r0, lsr #10
    4dac:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4db0:	06050501 	streq	r0, [r5], -r1, lsl #10
    4db4:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4db8:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    4dbc:	03060405 	movweq	r0, #25605	; 0x6405
    4dc0:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4dc4:	03010609 	movweq	r0, #5641	; 0x1609
    4dc8:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    4dcc:	6b032106 	blvs	cd1ec <__ccfg+0xad244>
    4dd0:	0b035920 	bleq	db258 <__ccfg+0xbb2b0>
    4dd4:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4dd8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4ddc:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4de0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4de4:	ba030603 	blt	c65f8 <__ccfg+0xa6650>
    4de8:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    4dec:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4df0:	0100083b 	tsteq	r0, fp, lsr r8
    4df4:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4df8:	00000205 	andeq	r0, r0, r5, lsl #4
    4dfc:	a0030000 	andge	r0, r3, r0
    4e00:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4e04:	3b051414 	blcc	149e5c <__ccfg+0x129eb4>
    4e08:	0c050e06 	stceq	14, cr0, [r5], {6}
    4e0c:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    4e10:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4e14:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4e18:	06030532 			; <UNDEFINED> instruction: 0x06030532
    4e1c:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4e20:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4e24:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4e28:	053f0603 	ldreq	r0, [pc, #-1539]!	; 482d <rand+0x1>
    4e2c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4e30:	052f0603 	streq	r0, [pc, #-1539]!	; 4835 <rand+0x9>
    4e34:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4e38:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    4e3c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4e40:	2f300603 	svccs	0x00300603
    4e44:	01060905 	tsteq	r6, r5, lsl #18
    4e48:	30060305 	andcc	r0, r6, r5, lsl #6
    4e4c:	01060c05 	tsteq	r6, r5, lsl #24
    4e50:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4e54:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4e58:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4e5c:	2f210604 	svccs	0x00210604
    4e60:	03060105 	movweq	r0, #24837	; 0x6105
    4e64:	03050122 	movweq	r0, #20770	; 0x5122
    4e68:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    4e6c:	01061105 	tsteq	r6, r5, lsl #2
    4e70:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4e74:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    4e78:	304a0624 	subcc	r0, sl, r4, lsr #12
    4e7c:	29050204 	stmdbcs	r5, {r2, r9}
    4e80:	0101c803 	tsteq	r1, r3, lsl #16
    4e84:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4e88:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4e8c:	01040106 	tsteq	r4, r6, lsl #2
    4e90:	b3030305 	movwlt	r0, #13061	; 0x3305
    4e94:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    4e98:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    4e9c:	01042001 	tsteq	r4, r1
    4ea0:	03060305 	movweq	r0, #25349	; 0x6305
    4ea4:	2f2e7eb3 	svccs	0x002e7eb3
    4ea8:	01061905 	tsteq	r6, r5, lsl #18
    4eac:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    4eb0:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4eb4:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4eb8:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    4ebc:	2308052e 	movwcs	r0, #34094	; 0x852e
    4ec0:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4ec4:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4ec8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4ecc:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    4ed0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4ed4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4ed8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4edc:	c1030602 	tstgt	r3, r2, lsl #12
    4ee0:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4ee4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4ee8:	054b4006 	strbeq	r4, [fp, #-6]
    4eec:	20730304 	rsbscs	r0, r3, r4, lsl #6
    4ef0:	01061305 	tsteq	r6, r5, lsl #6
    4ef4:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4ef8:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    4efc:	06040501 	streq	r0, [r4], -r1, lsl #10
    4f00:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4f04:	030b0501 	movweq	r0, #46337	; 0xb501
    4f08:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    4f0c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4f10:	02050012 	andeq	r0, r5, #18
    4f14:	00000000 	andeq	r0, r0, r0
    4f18:	0102da03 	tsteq	r2, r3, lsl #20
    4f1c:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    4f20:	01010001 	tsteq	r1, r1
    4f24:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4f28:	00000002 	andeq	r0, r0, r2
    4f2c:	02df0300 	sbcseq	r0, pc, #0, 6
    4f30:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    4f34:	13060105 	movwne	r0, #24837	; 0x6105
    4f38:	01000202 	tsteq	r0, r2, lsl #4
    4f3c:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4f40:	02050029 	andeq	r0, r5, #41	; 0x29
    4f44:	00000000 	andeq	r0, r0, r0
    4f48:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    4f4c:	01060505 	tsteq	r6, r5, lsl #10
    4f50:	21060305 	tstcs	r6, r5, lsl #6
    4f54:	01060705 	tsteq	r6, r5, lsl #14
    4f58:	30060205 	andcc	r0, r6, r5, lsl #4
    4f5c:	01060505 	tsteq	r6, r5, lsl #10
    4f60:	21060305 	tstcs	r6, r5, lsl #6
    4f64:	01060805 	tsteq	r6, r5, lsl #16
    4f68:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4f6c:	13060105 	movwne	r0, #24837	; 0x6105
    4f70:	01000302 	tsteq	r0, r2, lsl #6
    4f74:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4f78:	02050017 	andeq	r0, r5, #23
    4f7c:	00000000 	andeq	r0, r0, r0
    4f80:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    4f84:	17051402 	strne	r1, [r5, -r2, lsl #8]
    4f88:	02051006 	andeq	r1, r5, #6
    4f8c:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    4f90:	13060105 	movwne	r0, #24837	; 0x6105
    4f94:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    4f98:	01010002 	tsteq	r1, r2
    4f9c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    4fa0:	01250003 			; <UNDEFINED> instruction: 0x01250003
    4fa4:	01020000 	mrseq	r0, (UNDEF: 2)
    4fa8:	000d0efb 	strdeq	r0, [sp], -fp
    4fac:	01010101 	tsteq	r1, r1, lsl #2
    4fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    4fb4:	2f010000 	svccs	0x00010000
    4fb8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4fbc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4fc0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4fc4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4fc8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4fcc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4fd0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4fd4:	4349502f 	movtmi	r5, #36911	; 0x902f
    4fd8:	502f534f 	eorpl	r5, pc, pc, asr #6
    4fdc:	534f6369 	movtpl	r6, #62313	; 0xf369
    4fe0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4fe4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4fe8:	61697265 	cmnvs	r9, r5, ror #4
    4fec:	752f006c 	strvc	r0, [pc, #-108]!	; 4f88 <patable+0x6>
    4ff0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4e2c <port_confs+0x30>
    4ff4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4ff8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4ffc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5000:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5004:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5008:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    500c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5010:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5014:	2f006564 	svccs	0x00006564
    5018:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    501c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5020:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5024:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5028:	706f746b 	rsbvc	r7, pc, fp, ror #8
    502c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5030:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5034:	4349502f 	movtmi	r5, #36911	; 0x902f
    5038:	502f534f 	eorpl	r5, pc, pc, asr #6
    503c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5040:	3143432f 	cmpcc	r3, pc, lsr #6
    5044:	00585833 	subseq	r5, r8, r3, lsr r8
    5048:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4f94 <patchGenfskRfe>
    504c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5050:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5054:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5058:	6f746b73 	svcvs	0x00746b73
    505c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5060:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5064:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5068:	2f534f43 	svccs	0x00534f43
    506c:	4f636950 	svcmi	0x00636950
    5070:	73000053 	movwvc	r0, #83	; 0x53
    5074:	6f5f7265 	svcvs	0x005f7265
    5078:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
    507c:	00000100 	andeq	r0, r0, r0, lsl #2
    5080:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5084:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5088:	00000200 	andeq	r0, r0, r0, lsl #4
    508c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5090:	0300682e 	movweq	r6, #2094	; 0x82e
    5094:	616d0000 	cmnvs	sp, r0
    5098:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    509c:	00000300 	andeq	r0, r0, r0, lsl #6
    50a0:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    50a4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    50a8:	0300682e 	movweq	r6, #2094	; 0x82e
    50ac:	75620000 	strbvc	r0, [r2, #-0]!
    50b0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    50b4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    50b8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    50bc:	73000003 	movwvc	r0, #3
    50c0:	6f697379 	svcvs	0x00697379
    50c4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    50c8:	05000000 	streq	r0, [r0, #-0]
    50cc:	02050026 	andeq	r0, r5, #38	; 0x26
    50d0:	000024d0 	ldrdeq	r2, [r0], -r0
    50d4:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    50d8:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    50dc:	0d062605 	stceq	6, cr2, [r6, #-20]	; 0xffffffec
    50e0:	250e0520 	strcs	r0, [lr, #-1312]	; 0xfffffae0
    50e4:	051b2605 	ldreq	r2, [fp, #-1541]	; 0xfffff9fb
    50e8:	0505250e 	streq	r2, [r5, #-1294]	; 0xfffffaf2
    50ec:	0603052e 	streq	r0, [r3], -lr, lsr #10
    50f0:	0d033d22 	stceq	13, cr3, [r3, #-136]	; 0xffffff78
    50f4:	03020501 	movweq	r0, #9473	; 0x2501
    50f8:	05052e76 	streq	r2, [r5, #-3702]	; 0xfffff18a
    50fc:	03050106 	movweq	r0, #20742	; 0x5106
    5100:	0a052f06 	beq	150d20 <__ccfg+0x130d78>
    5104:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5108:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    510c:	06150524 	ldreq	r0, [r5], -r4, lsr #10
    5110:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    5114:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    5118:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    511c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5120:	02052008 	andeq	r2, r5, #8
    5124:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    5128:	01060505 	tsteq	r6, r5, lsl #10
    512c:	2f060305 	svccs	0x00060305
    5130:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    5134:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5138:	03054a05 	movweq	r4, #23045	; 0x5a05
    513c:	033e2206 	teqeq	lr, #1610612736	; 0x60000000
    5140:	0205207a 	andeq	r2, r5, #122	; 0x7a
    5144:	05580a03 	ldrbeq	r0, [r8, #-2563]	; 0xfffff5fd
    5148:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    514c:	01010005 	tsteq	r1, r5
    5150:	000001c4 	andeq	r0, r0, r4, asr #3
    5154:	01240003 			; <UNDEFINED> instruction: 0x01240003
    5158:	01020000 	mrseq	r0, (UNDEF: 2)
    515c:	000d0efb 	strdeq	r0, [sp], -fp
    5160:	01010101 	tsteq	r1, r1, lsl #2
    5164:	01000000 	mrseq	r0, (UNDEF: 0)
    5168:	2f010000 	svccs	0x00010000
    516c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5170:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5174:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5178:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    517c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5180:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5184:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5188:	4349502f 	movtmi	r5, #36911	; 0x902f
    518c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5190:	534f6369 	movtpl	r6, #62313	; 0xf369
    5194:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5198:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    519c:	61697265 	cmnvs	r9, r5, ror #4
    51a0:	752f006c 	strvc	r0, [pc, #-108]!	; 513c <patchGenfskRfe+0x1a8>
    51a4:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4fe0 <patchGenfskRfe+0x4c>
    51a8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    51ac:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    51b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    51b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    51b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    51bc:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    51c0:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    51c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    51c8:	2f006564 	svccs	0x00006564
    51cc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    51d0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    51d4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    51d8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51dc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51e0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51e4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51e8:	4349502f 	movtmi	r5, #36911	; 0x902f
    51ec:	502f534f 	eorpl	r5, pc, pc, asr #6
    51f0:	534f6369 	movtpl	r6, #62313	; 0xf369
    51f4:	3143432f 	cmpcc	r3, pc, lsr #6
    51f8:	00585833 	subseq	r5, r8, r3, lsr r8
    51fc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5148 <patchGenfskRfe+0x1b4>
    5200:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5204:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5208:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    520c:	6f746b73 	svcvs	0x00746b73
    5210:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5214:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5218:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    521c:	2f534f43 	svccs	0x00534f43
    5220:	4f636950 	svcmi	0x00636950
    5224:	73000053 	movwvc	r0, #83	; 0x53
    5228:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    522c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5230:	73000001 	movwvc	r0, #1
    5234:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5238:	00682e74 	rsbeq	r2, r8, r4, ror lr
    523c:	61000002 	tstvs	r0, r2
    5240:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5244:	00030068 	andeq	r0, r3, r8, rrx
    5248:	63616d00 	cmnvs	r1, #0, 26
    524c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5250:	70000003 	andvc	r0, r0, r3
    5254:	5f736e69 	svcpl	0x00736e69
    5258:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    525c:	00030068 	andeq	r0, r3, r8, rrx
    5260:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5264:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5268:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    526c:	0300682e 	movweq	r6, #2094	; 0x82e
    5270:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5274:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5278:	00040068 	andeq	r0, r4, r8, rrx
    527c:	2a050000 	bcs	145284 <__ccfg+0x1252dc>
    5280:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    5284:	03000025 	movweq	r0, #37	; 0x25
    5288:	0205010c 	andeq	r0, r5, #12, 2
    528c:	2a051416 	bcs	14a2ec <__ccfg+0x12a344>
    5290:	017a0306 	cmneq	sl, r6, lsl #6
    5294:	34050520 	strcc	r0, [r5], #-1312	; 0xfffffae0
    5298:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    529c:	01061005 	tsteq	r6, r5
    52a0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    52a4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    52a8:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    52ac:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    52b0:	0b052106 	bleq	14d6d0 <__ccfg+0x12d728>
    52b4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    52b8:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    52bc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    52c0:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    52c4:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    52c8:	05054f02 	streq	r4, [r5, #-3842]	; 0xfffff0fe
    52cc:	03050106 	movweq	r0, #20742	; 0x5106
    52d0:	13052f06 	movwne	r2, #24326	; 0x5f06
    52d4:	08050106 	stmdaeq	r5, {r1, r2, r8}
    52d8:	06020520 	streq	r0, [r2], -r0, lsr #10
    52dc:	06050524 	streq	r0, [r5], -r4, lsr #10
    52e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    52e4:	06080521 	streq	r0, [r8], -r1, lsr #10
    52e8:	06020501 	streq	r0, [r2], -r1, lsl #10
    52ec:	053d593e 	ldreq	r5, [sp, #-2366]!	; 0xfffff6c2
    52f0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    52f4:	052f0602 	streq	r0, [pc, #-1538]!	; 4cfa <__aeabi_lmul+0x496>
    52f8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    52fc:	052f0603 	streq	r0, [pc, #-1539]!	; 4d01 <__aeabi_lmul+0x49d>
    5300:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5304:	03052201 	movweq	r2, #20993	; 0x5201
    5308:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    530c:	01060a05 	tsteq	r6, r5, lsl #20
    5310:	024a6e03 	subeq	r6, sl, #3, 28	; 0x30
    5314:	01010007 	tsteq	r1, r7
    5318:	000001a1 	andeq	r0, r0, r1, lsr #3
    531c:	01400003 	cmpeq	r0, r3
    5320:	01020000 	mrseq	r0, (UNDEF: 2)
    5324:	000d0efb 	strdeq	r0, [sp], -fp
    5328:	01010101 	tsteq	r1, r1, lsl #2
    532c:	01000000 	mrseq	r0, (UNDEF: 0)
    5330:	2f010000 	svccs	0x00010000
    5334:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5338:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    533c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5340:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5344:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5348:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    534c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5350:	4349502f 	movtmi	r5, #36911	; 0x902f
    5354:	502f534f 	eorpl	r5, pc, pc, asr #6
    5358:	534f6369 	movtpl	r6, #62313	; 0xf369
    535c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5360:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5364:	61697265 	cmnvs	r9, r5, ror #4
    5368:	752f006c 	strvc	r0, [pc, #-108]!	; 5304 <patchGenfskRfe+0x370>
    536c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 51a8 <patchGenfskRfe+0x214>
    5370:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5374:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5378:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    537c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5380:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5384:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5388:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    538c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5390:	2f006564 	svccs	0x00006564
    5394:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5398:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    539c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    53a0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    53a4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    53a8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    53ac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    53b0:	4349502f 	movtmi	r5, #36911	; 0x902f
    53b4:	502f534f 	eorpl	r5, pc, pc, asr #6
    53b8:	534f6369 	movtpl	r6, #62313	; 0xf369
    53bc:	3143432f 	cmpcc	r3, pc, lsr #6
    53c0:	00585833 	subseq	r5, r8, r3, lsr r8
    53c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5310 <patchGenfskRfe+0x37c>
    53c8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    53cc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    53d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    53d4:	6f746b73 	svcvs	0x00746b73
    53d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    53dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    53e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    53e4:	2f534f43 	svccs	0x00534f43
    53e8:	4f636950 	svcmi	0x00636950
    53ec:	73000053 	movwvc	r0, #83	; 0x53
    53f0:	6f5f7265 	svcvs	0x005f7265
    53f4:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    53f8:	00010063 	andeq	r0, r1, r3, rrx
    53fc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5400:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5404:	00020068 	andeq	r0, r2, r8, rrx
    5408:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    540c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5410:	00020068 	andeq	r0, r2, r8, rrx
    5414:	63726100 	cmnvs	r2, #0, 2
    5418:	00682e68 	rsbeq	r2, r8, r8, ror #28
    541c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5420:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5424:	00030068 	andeq	r0, r3, r8, rrx
    5428:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    542c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5430:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5434:	62000003 	andvs	r0, r0, #3
    5438:	6f747475 	svcvs	0x00747475
    543c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5440:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5444:	00000300 	andeq	r0, r0, r0, lsl #6
    5448:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    544c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5450:	3c000004 	stccc	0, cr0, [r0], {4}
    5454:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5458:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    545c:	0000003e 	andeq	r0, r0, lr, lsr r0
    5460:	2c050000 	stccs	0, cr0, [r5], {-0}
    5464:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    5468:	03000025 	movweq	r0, #37	; 0x25
    546c:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    5470:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    5474:	03062c05 	movweq	r2, #27653	; 0x6c05
    5478:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    547c:	0505260e 	streq	r2, [r5, #-1550]	; 0xfffff9f2
    5480:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    5484:	0a033d30 	beq	d494c <__ccfg+0xb49a4>
    5488:	03020501 	movweq	r0, #9473	; 0x2501
    548c:	0d052e79 	stceq	14, cr2, [r5, #-484]	; 0xfffffe1c
    5490:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    5494:	0522061e 	streq	r0, [r2, #-1566]!	; 0xfffff9e2
    5498:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    549c:	03052e05 	movweq	r2, #24069	; 0x5e05
    54a0:	02053206 	andeq	r3, r5, #1610612736	; 0x60000000
    54a4:	0606054e 	streq	r0, [r6], -lr, asr #10
    54a8:	4a050501 	bmi	1468b4 <__ccfg+0x12690c>
    54ac:	21060305 	tstcs	r6, r5, lsl #6
    54b0:	2402053d 	strcs	r0, [r2], #-1341	; 0xfffffac3
    54b4:	13060105 	movwne	r0, #24837	; 0x6105
    54b8:	01000902 	tsteq	r0, r2, lsl #18
    54bc:	0001b201 	andeq	fp, r1, r1, lsl #4
    54c0:	3f000300 	svccc	0x00000300
    54c4:	02000001 	andeq	r0, r0, #1
    54c8:	0d0efb01 	vstreq	d15, [lr, #-4]
    54cc:	01010100 	mrseq	r0, (UNDEF: 17)
    54d0:	00000001 	andeq	r0, r0, r1
    54d4:	01000001 	tsteq	r0, r1
    54d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5424 <patchGenfskRfe+0x490>
    54dc:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    54e0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    54e4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    54e8:	6f746b73 	svcvs	0x00746b73
    54ec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    54f0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    54f4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    54f8:	2f534f43 	svccs	0x00534f43
    54fc:	4f636950 	svcmi	0x00636950
    5500:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5504:	2f736269 	svccs	0x00736269
    5508:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    550c:	2f006c61 	svccs	0x00006c61
    5510:	2f727375 	svccs	0x00727375
    5514:	2f62696c 	svccs	0x0062696c
    5518:	2f636367 	svccs	0x00636367
    551c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5520:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5524:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5528:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    552c:	2f312e32 	svccs	0x00312e32
    5530:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5534:	00656475 	rsbeq	r6, r5, r5, ror r4
    5538:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5484 <patchGenfskRfe+0x4f0>
    553c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5540:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5544:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5548:	6f746b73 	svcvs	0x00746b73
    554c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5550:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5554:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5558:	2f534f43 	svccs	0x00534f43
    555c:	4f636950 	svcmi	0x00636950
    5560:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5564:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5568:	6f682f00 	svcvs	0x00682f00
    556c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5570:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5574:	442f6e65 	strtmi	r6, [pc], #-3685	; 557c <patchGenfskRfe+0x5e8>
    5578:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    557c:	4f2f706f 	svcmi	0x002f706f
    5580:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5584:	502f5445 	eorpl	r5, pc, r5, asr #8
    5588:	534f4349 	movtpl	r4, #62281	; 0xf349
    558c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5590:	0000534f 	andeq	r5, r0, pc, asr #6
    5594:	5f726573 	svcpl	0x00726573
    5598:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    559c:	00010063 	andeq	r0, r1, r3, rrx
    55a0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    55a4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    55a8:	00020068 	andeq	r0, r2, r8, rrx
    55ac:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    55b0:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    55b4:	00020068 	andeq	r0, r2, r8, rrx
    55b8:	63726100 	cmnvs	r2, #0, 2
    55bc:	00682e68 	rsbeq	r2, r8, r8, ror #28
    55c0:	6d000003 	stcvs	0, cr0, [r0, #-12]
    55c4:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    55c8:	00030068 	andeq	r0, r3, r8, rrx
    55cc:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    55d0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    55d4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    55d8:	62000003 	andvs	r0, r0, #3
    55dc:	6f747475 	svcvs	0x00747475
    55e0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55e4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55e8:	00000300 	andeq	r0, r0, r0, lsl #6
    55ec:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    55f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    55f4:	3c000004 	stccc	0, cr0, [r0], {4}
    55f8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    55fc:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5600:	0000003e 	andeq	r0, r0, lr, lsr r0
    5604:	2d050000 	stccs	0, cr0, [r5, #-0]
    5608:	08020500 	stmdaeq	r2, {r8, sl}
    560c:	03000026 	movweq	r0, #38	; 0x26
    5610:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    5614:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    5618:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    561c:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    5620:	06020536 			; <UNDEFINED> instruction: 0x06020536
    5624:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    5628:	20050501 	andcs	r0, r5, r1, lsl #10
    562c:	2f060305 	svccs	0x00060305
    5630:	01060f05 	tsteq	r6, r5, lsl #30
    5634:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    5638:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    563c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5640:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    5644:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5648:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    564c:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    5650:	304f0205 	subcc	r0, pc, r5, lsl #4
    5654:	01060905 	tsteq	r6, r5, lsl #18
    5658:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    565c:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    5660:	06020501 	streq	r0, [r2], -r1, lsl #10
    5664:	06010530 			; <UNDEFINED> instruction: 0x06010530
    5668:	030a0513 	movweq	r0, #42259	; 0xa513
    566c:	06026669 	streq	r6, [r2], -r9, ror #12
    5670:	ae010100 	adfges	f0, f1, f0
    5674:	0300000c 	movweq	r0, #12
    5678:	00029e00 	andeq	r9, r2, r0, lsl #28
    567c:	fb010200 	blx	45e86 <__ccfg+0x25ede>
    5680:	01000d0e 	tsteq	r0, lr, lsl #26
    5684:	00010101 	andeq	r0, r1, r1, lsl #2
    5688:	00010000 	andeq	r0, r1, r0
    568c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5690:	2f656d6f 	svccs	0x00656d6f
    5694:	70657473 	rsbvc	r7, r5, r3, ror r4
    5698:	2f6e6568 	svccs	0x006e6568
    569c:	6b736544 	blvs	1cdebb4 <__ccfg+0x1cbec0c>
    56a0:	2f706f74 	svccs	0x00706f74
    56a4:	4f534c4f 	svcmi	0x00534c4f
    56a8:	2f54454e 	svccs	0x0054454e
    56ac:	4f434950 	svcmi	0x00434950
    56b0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    56b4:	2f534f63 	svccs	0x00534f63
    56b8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    56bc:	2f005858 	svccs	0x00005858
    56c0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    56c4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    56c8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    56cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    56d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    56d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    56d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    56dc:	4349502f 	movtmi	r5, #36911	; 0x902f
    56e0:	502f534f 	eorpl	r5, pc, pc, asr #6
    56e4:	534f6369 	movtpl	r6, #62313	; 0xf369
    56e8:	3143432f 	cmpcc	r3, pc, lsr #6
    56ec:	2f585833 	svccs	0x00585833
    56f0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    56f4:	41575858 	cmpmi	r7, r8, asr r8
    56f8:	642f4552 	strtvs	r4, [pc], #-1362	; 5700 <patchImageGenfsk+0xb8>
    56fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5700:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5704:	6f682f00 	svcvs	0x00682f00
    5708:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    570c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5710:	442f6e65 	strtmi	r6, [pc], #-3685	; 5718 <patchImageGenfsk+0xd0>
    5714:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5718:	4f2f706f 	svcmi	0x002f706f
    571c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5720:	502f5445 	eorpl	r5, pc, r5, asr #8
    5724:	534f4349 	movtpl	r4, #62281	; 0xf349
    5728:	6369502f 	cmnvs	r9, #47	; 0x2f
    572c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5730:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5734:	43432f58 	movtmi	r2, #16216	; 0x3f58
    5738:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    573c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    5740:	5f66722f 	svcpl	0x0066722f
    5744:	63746170 	cmnvs	r4, #112, 2
    5748:	00736568 	rsbseq	r6, r3, r8, ror #10
    574c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5750:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5754:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5758:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    575c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5760:	61652d65 	cmnvs	r5, r5, ror #26
    5764:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5768:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    576c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5770:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5774:	73752f00 	cmnvc	r5, #0, 30
    5778:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    577c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5780:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5784:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5788:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    578c:	6f682f00 	svcvs	0x00682f00
    5790:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5794:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5798:	442f6e65 	strtmi	r6, [pc], #-3685	; 57a0 <patchImageGenfsk+0x158>
    579c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    57a0:	4f2f706f 	svcmi	0x002f706f
    57a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    57a8:	502f5445 	eorpl	r5, pc, r5, asr #8
    57ac:	534f4349 	movtpl	r4, #62281	; 0xf349
    57b0:	6369502f 	cmnvs	r9, #47	; 0x2f
    57b4:	2f00534f 	svccs	0x0000534f
    57b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    57bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    57c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    57c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    57c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    57cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    57d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    57d4:	4349502f 	movtmi	r5, #36911	; 0x902f
    57d8:	502f534f 	eorpl	r5, pc, pc, asr #6
    57dc:	534f6369 	movtpl	r6, #62313	; 0xf369
    57e0:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    57e4:	006c656e 	rsbeq	r6, ip, lr, ror #10
    57e8:	70667200 	rsbvc	r7, r6, r0, lsl #4
    57ec:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    57f0:	00010063 	andeq	r0, r1, r3, rrx
    57f4:	63667200 	cmnvs	r6, #0, 4
    57f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    57fc:	70670000 	rsbvc	r0, r7, r0
    5800:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5804:	00000200 	andeq	r0, r0, r0, lsl #4
    5808:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    580c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    5810:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
    5814:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    5818:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    581c:	00030068 	andeq	r0, r3, r8, rrx
    5820:	5f667200 	svcpl	0x00667200
    5824:	63746170 	cmnvs	r4, #112, 2
    5828:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
    582c:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    5830:	6b73666e 	blvs	1cdf1f0 <__ccfg+0x1cbf248>
    5834:	0300682e 	movweq	r6, #2094	; 0x82e
    5838:	74730000 	ldrbtvc	r0, [r3], #-0
    583c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5840:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5844:	74730000 	ldrbtvc	r0, [r3], #-0
    5848:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    584c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5850:	745f0000 	ldrbvc	r0, [pc], #-0	; 5858 <patchImageGenfsk+0x210>
    5854:	73657079 	cmnvc	r5, #121	; 0x79
    5858:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    585c:	65720000 	ldrbvs	r0, [r2, #-0]!
    5860:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    5864:	00050068 	andeq	r0, r5, r8, rrx
    5868:	636f6c00 	cmnvs	pc, #0, 24
    586c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    5870:	72000005 	andvc	r0, r0, #5
    5874:	616d5f66 	cmnvs	sp, r6, ror #30
    5878:	6f626c69 	svcvs	0x00626c69
    587c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    5880:	72000002 	andvc	r0, r0, #2
    5884:	6f635f66 	svcvs	0x00635f66
    5888:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    588c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    5890:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5894:	66720000 	ldrbtvs	r0, [r2], -r0
    5898:	6f72705f 	svcvs	0x0072705f
    589c:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    58a0:	00682e64 	rsbeq	r2, r8, r4, ror #28
    58a4:	72000002 	andvc	r0, r0, #2
    58a8:	61645f66 	cmnvs	r4, r6, ror #30
    58ac:	655f6174 	ldrbvs	r6, [pc, #-372]	; 5740 <patchImageGenfsk+0xf8>
    58b0:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    58b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    58b8:	72610000 	rsbvc	r0, r1, #0
    58bc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    58c0:	00000100 	andeq	r0, r0, r0, lsl #2
    58c4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    58c8:	0100682e 	tsteq	r0, lr, lsr #16
    58cc:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    58d0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    58d4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    58d8:	00000100 	andeq	r0, r0, r0, lsl #2
    58dc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    58e0:	5f736e6f 	svcpl	0x00736e6f
    58e4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    58e8:	00010068 	andeq	r0, r1, r8, rrx
    58ec:	73797300 	cmnvc	r9, #0, 6
    58f0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    58f4:	00000600 	andeq	r0, r0, r0, lsl #12
    58f8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    58fc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    5900:	00000700 	andeq	r0, r0, r0, lsl #14
    5904:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    5908:	5f667274 	svcpl	0x00667274
    590c:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    5910:	73676e69 	cmnvc	r7, #1680	; 0x690
    5914:	0100682e 	tsteq	r0, lr, lsr #16
    5918:	05000000 	streq	r0, [r0, #-0]
    591c:	02050017 	andeq	r0, r5, #23
    5920:	00002668 	andeq	r2, r0, r8, ror #12
    5924:	01039f03 	tsteq	r3, r3, lsl #30
    5928:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    592c:	05140638 	ldreq	r0, [r4, #-1592]	; 0xfffff9c8
    5930:	38052026 	stmdacc	r5, {r1, r2, r5, sp}
    5934:	3c260520 	cfstr32cc	mvfx0, [r6], #-128	; 0xffffff80
    5938:	051e1505 	ldreq	r1, [lr, #-1285]	; 0xfffffafb
    593c:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    5940:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5944:	0205002a 	andeq	r0, r5, #42	; 0x2a
    5948:	00002688 	andeq	r2, r0, r8, lsl #13
    594c:	0106c903 	tsteq	r6, r3, lsl #18
    5950:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5954:	0e062a05 	vmlaeq.f32	s4, s12, s10
    5958:	06040520 	streq	r0, [r4], -r0, lsr #10
    595c:	17054408 	strne	r4, [r5, -r8, lsl #8]
    5960:	0c050106 	stfeqs	f0, [r5], {6}
    5964:	03080520 	movweq	r0, #34080	; 0x8520
    5968:	04053c20 	streq	r3, [r5], #-3104	; 0xfffff3e0
    596c:	64032106 	strvs	r2, [r3], #-262	; 0xfffffefa
    5970:	06060520 	streq	r0, [r6], -r0, lsr #10
    5974:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    5978:	0d030604 	stceq	6, cr0, [r3, #-16]
    597c:	9e010120 	adflssp	f0, f1, f0
    5980:	054a582e 	strbeq	r5, [sl, #-2094]	; 0xfffff7d2
    5984:	fa030601 	blx	c7190 <__ccfg+0xa71e8>
    5988:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    598c:	7f900306 	svcvc	0x00900306
    5990:	0b055d20 	bleq	15ce18 <__ccfg+0x13ce70>
    5994:	20200106 	eorcs	r0, r0, r6, lsl #2
    5998:	2f060405 	svccs	0x00060405
    599c:	03060605 	movweq	r0, #26117	; 0x6605
    59a0:	04050163 	streq	r0, [r5], #-355	; 0xfffffe9d
    59a4:	2e210306 	cdpcs	3, 2, cr0, cr1, cr6, {0}
    59a8:	01060a05 	tsteq	r6, r5, lsl #20
    59ac:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    59b0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    59b4:	00e20302 	rsceq	r0, r2, r2, lsl #6
    59b8:	06050501 	streq	r0, [r5], -r1, lsl #10
    59bc:	06030501 	streq	r0, [r3], -r1, lsl #10
    59c0:	0f02052f 	svceq	0x0002052f
    59c4:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
    59c8:	051d0905 	ldreq	r0, [sp, #-2309]	; 0xfffff6fb
    59cc:	a4030604 	strge	r0, [r3], #-1540	; 0xfffff9fc
    59d0:	1105207f 	tstne	r5, pc, ror r0
    59d4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    59d8:	05054106 	streq	r4, [r5, #-262]	; 0xfffffefa
    59dc:	07051306 	streq	r1, [r5, -r6, lsl #6]
    59e0:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    59e4:	04055b21 	streq	r5, [r5], #-2849	; 0xfffff4df
    59e8:	06070552 			; <UNDEFINED> instruction: 0x06070552
    59ec:	06050501 	streq	r0, [r5], -r1, lsl #10
    59f0:	06010122 	streq	r0, [r1], -r2, lsr #2
    59f4:	054a065a 	strbeq	r0, [sl, #-1626]	; 0xfffff9a6
    59f8:	0535060d 	ldreq	r0, [r5, #-1549]!	; 0xfffff9f3
    59fc:	05052120 	streq	r2, [r5, #-288]	; 0xfffffee0
    5a00:	11053c06 	tstne	r5, r6, lsl #24
    5a04:	08051306 	stmdaeq	r5, {r1, r2, r8, r9, ip}
    5a08:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    5a0c:	061e052d 	ldreq	r0, [lr], -sp, lsr #10
    5a10:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    5a14:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a18:	10030601 	andne	r0, r3, r1, lsl #12
    5a1c:	062e053c 			; <UNDEFINED> instruction: 0x062e053c
    5a20:	21140501 	tstcs	r4, r1, lsl #10
    5a24:	051f2e05 	ldreq	r2, [pc, #-3589]	; 4c27 <__aeabi_lmul+0x3c3>
    5a28:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5a2c:	0501062e 	streq	r0, [r1, #-1582]	; 0xfffff9d2
    5a30:	04052024 	streq	r2, [r5], #-36	; 0xffffffdc
    5a34:	24594b06 	ldrbcs	r4, [r9], #-2822	; 0xfffff4fa
    5a38:	01060a05 	tsteq	r6, r5, lsl #20
    5a3c:	0e030805 	cdpeq	8, 0, cr0, cr3, cr5, {0}
    5a40:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a44:	20750322 	rsbscs	r0, r5, r2, lsr #6
    5a48:	01060c05 	tsteq	r6, r5, lsl #24
    5a4c:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    5a50:	0520490c 	streq	r4, [r0, #-2316]!	; 0xfffff6f4
    5a54:	03300604 	teqeq	r0, #4, 12	; 0x400000
    5a58:	032f0111 			; <UNDEFINED> instruction: 0x032f0111
    5a5c:	0a055875 	beq	15bc38 <__ccfg+0x13bc90>
    5a60:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5a64:	0a053606 	beq	153284 <__ccfg+0x1332dc>
    5a68:	06050106 	streq	r0, [r5], -r6, lsl #2
    5a6c:	1f0a0521 	svcne	0x000a0521
    5a70:	3c20202e 	stccc	0, cr2, [r0], #-184	; 0xffffff48
    5a74:	03060405 	movweq	r0, #25605	; 0x6405
    5a78:	0d056609 	stceq	6, cr6, [r5, #-36]	; 0xffffffdc
    5a7c:	20200106 	eorcs	r0, r0, r6, lsl #2
    5a80:	30060405 	andcc	r0, r6, r5, lsl #8
    5a84:	1e060d05 	cdpne	13, 0, cr0, cr6, cr5, {0}
    5a88:	42060405 	andmi	r0, r6, #83886080	; 0x5000000
    5a8c:	01001f02 	tsteq	r0, r2, lsl #30
    5a90:	00230501 	eoreq	r0, r3, r1, lsl #10
    5a94:	28180205 	ldmdacs	r8, {r0, r2, r9}
    5a98:	c4030000 	strgt	r0, [r3], #-0
    5a9c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5aa0:	23051517 	movwcs	r1, #21783	; 0x5517
    5aa4:	01780306 	cmneq	r8, r6, lsl #6
    5aa8:	06020520 	streq	r0, [r2], -r0, lsr #10
    5aac:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    5ab0:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    5ab4:	0c050106 	stfeqs	f0, [r5], {6}
    5ab8:	2006053c 	andcs	r0, r6, ip, lsr r5
    5abc:	31060305 	tstcc	r6, r5, lsl #6
    5ac0:	01060605 	tsteq	r6, r5, lsl #12
    5ac4:	30060405 	andcc	r0, r6, r5, lsl #8
    5ac8:	03052606 	movweq	r2, #22022	; 0x5606
    5acc:	06053a06 	streq	r3, [r5], -r6, lsl #20
    5ad0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5ad4:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
    5ad8:	08053103 	stmdaeq	r5, {r0, r1, r8, ip, sp}
    5adc:	053c7103 	ldreq	r7, [ip, #-259]!	; 0xfffffefd
    5ae0:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5ae4:	20100301 	andscs	r0, r0, r1, lsl #6
    5ae8:	01000902 	tsteq	r0, r2, lsl #18
    5aec:	00160501 	andseq	r0, r6, r1, lsl #10
    5af0:	28600205 	stmdacs	r0!, {r0, r2, r9}^
    5af4:	94030000 	strls	r0, [r3], #-0
    5af8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    5afc:	06160516 			; <UNDEFINED> instruction: 0x06160516
    5b00:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5b04:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5b08:	3d3f0602 	ldccc	6, cr0, [pc, #-8]!	; 5b08 <__exidx_end+0x1f0>
    5b0c:	4b060105 	blmi	185f28 <__ccfg+0x165f80>
    5b10:	01000602 	tsteq	r0, r2, lsl #12
    5b14:	00170501 	andseq	r0, r7, r1, lsl #10
    5b18:	28840205 	stmcs	r4, {r0, r2, r9}
    5b1c:	e0030000 	and	r0, r3, r0
    5b20:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    5b24:	06170516 			; <UNDEFINED> instruction: 0x06170516
    5b28:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5b2c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5b30:	043f0602 	ldrteq	r0, [pc], #-1538	; 5b38 <__exidx_end+0x220>
    5b34:	06350502 	ldrteq	r0, [r5], -r2, lsl #10
    5b38:	017eb903 	cmneq	lr, r3, lsl #18
    5b3c:	02050104 	andeq	r0, r5, #4, 2
    5b40:	2001c703 	andcs	ip, r1, r3, lsl #14
    5b44:	303f5a06 	eorscc	r5, pc, r6, lsl #20
    5b48:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5b4c:	017eb203 	cmneq	lr, r3, lsl #4
    5b50:	01063505 	tsteq	r6, r5, lsl #10
    5b54:	02050104 	andeq	r0, r5, #4, 2
    5b58:	2001d003 	andcs	sp, r1, r3
    5b5c:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5b60:	207eb003 	rsbscs	fp, lr, r3
    5b64:	02050104 	andeq	r0, r5, #4, 2
    5b68:	01d00306 	bicseq	r0, r0, r6, lsl #6
    5b6c:	48053120 	stmdami	r5, {r5, r8, ip, sp}
    5b70:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5b74:	01313106 	teqeq	r1, r6, lsl #2
    5b78:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5b7c:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
    5b80:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5b84:	01040106 	tsteq	r4, r6, lsl #2
    5b88:	03060205 	movweq	r0, #25093	; 0x6205
    5b8c:	03044a1c 	movweq	r4, #18972	; 0x4a1c
    5b90:	5f032905 	svcpl	0x00032905
    5b94:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5b98:	01062d05 	tsteq	r6, r5, lsl #26
    5b9c:	02050104 	andeq	r0, r5, #4, 2
    5ba0:	2e1c0306 	cdpcs	3, 1, cr0, cr12, cr6, {0}
    5ba4:	01014b14 	tsteq	r1, r4, lsl fp
    5ba8:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    5bac:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5bb0:	0101000b 	tsteq	r1, fp
    5bb4:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5bb8:	0028e002 	eoreq	lr, r8, r2
    5bbc:	01e10300 	mvneq	r0, r0, lsl #6
    5bc0:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    5bc4:	054f0602 	strbeq	r0, [pc, #-1538]	; 55ca <patchGenfskRfe+0x636>
    5bc8:	0a051303 	beq	14a7dc <__ccfg+0x12a834>
    5bcc:	06050106 	streq	r0, [r5], -r6, lsl #2
    5bd0:	06030520 	streq	r0, [r3], -r0, lsr #10
    5bd4:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5bd8:	06040501 	streq	r0, [r4], -r1, lsl #10
    5bdc:	03055b30 	movweq	r5, #23344	; 0x5b30
    5be0:	0308054c 	movweq	r0, #34124	; 0x854c
    5be4:	06053c75 			; <UNDEFINED> instruction: 0x06053c75
    5be8:	01051306 	tsteq	r5, r6, lsl #6
    5bec:	02200c03 	eoreq	r0, r0, #768	; 0x300
    5bf0:	01010005 	tsteq	r1, r5
    5bf4:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5bf8:	00291802 	eoreq	r1, r9, r2, lsl #16
    5bfc:	01fe0300 	mvnseq	r0, r0, lsl #6
    5c00:	03020501 	movweq	r0, #9473	; 0x2501
    5c04:	04010109 	streq	r0, [r1], #-265	; 0xfffffef7
    5c08:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5c0c:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5c10:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5c14:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c18:	3c57030d 	mrrccc	3, 0, r0, r7, cr13
    5c1c:	2d050304 	stccs	3, cr0, [r5, #-16]
    5c20:	042e2903 	strteq	r2, [lr], #-2307	; 0xfffff6fd
    5c24:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c28:	04206003 	strteq	r6, [r0], #-3
    5c2c:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5c30:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5c34:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5c38:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c3c:	60030602 	andvs	r0, r3, r2, lsl #12
    5c40:	052f192e 	streq	r1, [pc, #-2350]!	; 531a <patchGenfskRfe+0x386>
    5c44:	1c050107 	stfnes	f0, [r5], {7}
    5c48:	061e053c 			; <UNDEFINED> instruction: 0x061e053c
    5c4c:	2e020501 	cfsh32cs	mvfx0, mvfx2, #1
    5c50:	48053106 	stmdami	r5, {r1, r2, r8, ip, sp}
    5c54:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5c58:	1c480532 	cfstr64ne	mvdx0, [r8], {50}	; 0x32
    5c5c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5c60:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    5c64:	7ee40305 	cdpvc	3, 14, cr0, cr4, cr5, {0}
    5c68:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    5c6c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c70:	019f0302 	orrseq	r0, pc, r2, lsl #6
    5c74:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    5c78:	7ee10335 	mcrvc	3, 7, r0, cr1, cr5, {1}
    5c7c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5c80:	9f030602 	svcls	0x00030602
    5c84:	04322001 	ldrteq	r2, [r2], #-1
    5c88:	03040504 	movweq	r0, #17668	; 0x4504
    5c8c:	73030110 	movwvc	r0, #12560	; 0x3110
    5c90:	03010501 	movweq	r0, #5377	; 0x1501
    5c94:	0405016b 	streq	r0, [r5], #-363	; 0xfffffe95
    5c98:	03011603 	movweq	r1, #5635	; 0x1603
    5c9c:	03150161 	tsteq	r5, #1073741848	; 0x40000018
    5ca0:	6d03661d 	stcvs	6, cr6, [r3, #-116]	; 0xffffff8c
    5ca4:	05151301 	ldreq	r1, [r5, #-769]	; 0xfffffcff
    5ca8:	04010612 	streq	r0, [r1], #-1554	; 0xfffff9ee
    5cac:	03040505 	movweq	r0, #17669	; 0x4505
    5cb0:	042e01f1 	strteq	r0, [lr], #-497	; 0xfffffe0f
    5cb4:	03120504 	tsteq	r2, #4, 10	; 0x1000000
    5cb8:	05207e8f 	streq	r7, [r0, #-3727]!	; 0xfffff171
    5cbc:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5cc0:	3d130612 	ldccc	6, cr0, [r3, #-72]	; 0xffffffb8
    5cc4:	2f3d1305 	svccs	0x003d1305
    5cc8:	052f1205 	streq	r1, [pc, #-517]!	; 5acb <__exidx_end+0x1b3>
    5ccc:	12053e11 	andne	r3, r5, #272	; 0x110
    5cd0:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    5cd4:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    5cd8:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    5cdc:	01061105 	tsteq	r6, r5, lsl #2
    5ce0:	1c050504 	cfstr32ne	mvfx0, [r5], {4}
    5ce4:	2001d403 	andcs	sp, r1, r3, lsl #8
    5ce8:	051f1405 	ldreq	r1, [pc, #-1029]	; 58eb <ratable+0x17>
    5cec:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    5cf0:	0a051307 	beq	14a914 <__ccfg+0x12a96c>
    5cf4:	051b1806 	ldreq	r1, [fp, #-2054]	; 0xfffff7fa
    5cf8:	052f0607 	streq	r0, [pc, #-1543]!	; 56f9 <patchImageGenfsk+0xb1>
    5cfc:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5d00:	052f0607 	streq	r0, [pc, #-1543]!	; 5701 <patchImageGenfsk+0xb9>
    5d04:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5d08:	132f0607 			; <UNDEFINED> instruction: 0x132f0607
    5d0c:	01060a05 	tsteq	r6, r5, lsl #20
    5d10:	2f210d05 	svccs	0x00210d05
    5d14:	21212f2f 			; <UNDEFINED> instruction: 0x21212f2f
    5d18:	30040521 	andcc	r0, r4, r1, lsr #10
    5d1c:	03060705 	movweq	r0, #26373	; 0x6705
    5d20:	13133c78 	tstne	r3, #120, 24	; 0x7800
    5d24:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5d28:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    5d2c:	060c052e 	streq	r0, [ip], -lr, lsr #10
    5d30:	06040521 	streq	r0, [r4], -r1, lsr #10
    5d34:	13220601 			; <UNDEFINED> instruction: 0x13220601
    5d38:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5d3c:	01060a05 	tsteq	r6, r5, lsl #20
    5d40:	09050104 	stmdbeq	r5, {r2, r8}
    5d44:	207e9503 	rsbscs	r9, lr, r3, lsl #10
    5d48:	0a050504 	beq	147160 <__ccfg+0x1271b8>
    5d4c:	2001eb03 	andcs	lr, r1, r3, lsl #22
    5d50:	21060405 	tstcs	r6, r5, lsl #8
    5d54:	01060a05 	tsteq	r6, r5, lsl #20
    5d58:	2f060405 	svccs	0x00060405
    5d5c:	01060a05 	tsteq	r6, r5, lsl #20
    5d60:	2f060405 	svccs	0x00060405
    5d64:	01060a05 	tsteq	r6, r5, lsl #20
    5d68:	2f060405 	svccs	0x00060405
    5d6c:	01060a05 	tsteq	r6, r5, lsl #20
    5d70:	09050104 	stmdbeq	r5, {r2, r8}
    5d74:	7e910306 	cdpvc	3, 9, cr0, cr1, cr6, {0}
    5d78:	3602052e 	strcc	r0, [r2], -lr, lsr #10
    5d7c:	053f0905 	ldreq	r0, [pc, #-2309]!	; 547f <patchGenfskRfe+0x4eb>
    5d80:	3c120302 	ldccc	3, cr0, [r2], {2}
    5d84:	3d435c3e 	stclcc	12, cr5, [r3, #-248]	; 0xffffff08
    5d88:	2506135a 	strcs	r1, [r6, #-858]	; 0xfffffca6
    5d8c:	0569061b 	strbeq	r0, [r9, #-1563]!	; 0xfffff9e5
    5d90:	05010630 	streq	r0, [r1, #-1584]	; 0xfffff9d0
    5d94:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5d98:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    5d9c:	052f0602 	streq	r0, [pc, #-1538]!	; 57a2 <patchImageGenfsk+0x15a>
    5da0:	051f062d 	ldreq	r0, [pc, #-1581]	; 577b <patchImageGenfsk+0x133>
    5da4:	01052102 	tsteq	r5, r2, lsl #2
    5da8:	03020528 	movweq	r0, #9512	; 0x2528
    5dac:	33022e78 	movwcc	r2, #11896	; 0x2e78
    5db0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5db4:	0205001e 	andeq	r0, r5, #30
    5db8:	00002a98 	muleq	r0, r8, sl
    5dbc:	0103b403 	tsteq	r3, r3, lsl #8
    5dc0:	13140205 	tstne	r4, #1342177280	; 0x50000000
    5dc4:	04010903 	streq	r0, [r1], #-2307	; 0xfffff6fd
    5dc8:	03030502 	movweq	r0, #13570	; 0x3502
    5dcc:	04017dee 	streq	r7, [r1], #-3566	; 0xfffff212
    5dd0:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    5dd4:	01028603 	tsteq	r2, r3, lsl #12
    5dd8:	30050204 	andcc	r0, r5, r4, lsl #4
    5ddc:	2e7dfa03 	vaddcs.f32	s31, s26, s6
    5de0:	057b3205 	ldrbeq	r3, [fp, #-517]!	; 0xfffffdfb
    5de4:	05290603 	streq	r0, [r9, #-1539]!	; 0xfffff9fd
    5de8:	32051705 	andcc	r1, r5, #1310720	; 0x140000
    5dec:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5df0:	0a052106 	beq	14e210 <__ccfg+0x12e268>
    5df4:	03050106 	movweq	r0, #20742	; 0x5106
    5df8:	04330620 	ldrteq	r0, [r3], #-1568	; 0xfffff9e0
    5dfc:	060a0501 	streq	r0, [sl], -r1, lsl #10
    5e00:	01028b03 	tsteq	r2, r3, lsl #22
    5e04:	30050204 	andcc	r0, r5, r4, lsl #4
    5e08:	207df503 	rsbscs	pc, sp, r3, lsl #10
    5e0c:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    5e10:	20029e03 	andcs	r9, r2, r3, lsl #28
    5e14:	30050204 	andcc	r0, r5, r4, lsl #4
    5e18:	207de203 	rsbscs	lr, sp, r3, lsl #4
    5e1c:	2d050104 	stfcss	f0, [r5, #-16]
    5e20:	20029103 	andcs	r9, r2, r3, lsl #2
    5e24:	30050204 	andcc	r0, r5, r4, lsl #4
    5e28:	2e7def03 	cdpcs	15, 7, cr14, cr13, cr3, {0}
    5e2c:	02050104 	andeq	r0, r5, #4, 2
    5e30:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    5e34:	06270558 			; <UNDEFINED> instruction: 0x06270558
    5e38:	03050501 	movweq	r0, #21761	; 0x5501
    5e3c:	0a05200f 	beq	14de80 <__ccfg+0x12ded8>
    5e40:	052e7103 	streq	r7, [lr, #-259]!	; 0xfffffefd
    5e44:	052f0606 	streq	r0, [pc, #-1542]!	; 5846 <patchImageGenfsk+0x1fe>
    5e48:	06051303 	streq	r1, [r5], -r3, lsl #6
    5e4c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5e50:	01013d06 	tsteq	r1, r6, lsl #26
    5e54:	06190513 			; <UNDEFINED> instruction: 0x06190513
    5e58:	200d0514 	andcs	r0, sp, r4, lsl r5
    5e5c:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    5e60:	06052007 	streq	r2, [r5], -r7
    5e64:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    5e68:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5e6c:	20210501 	eorcs	r0, r1, r1, lsl #10
    5e70:	054a3705 	strbeq	r3, [sl, #-1797]	; 0xfffff8fb
    5e74:	053f0605 	ldreq	r0, [pc, #-1541]!	; 5877 <patchImageGenfsk+0x22f>
    5e78:	05160615 	ldreq	r0, [r6, #-1557]	; 0xfffff9eb
    5e7c:	05052a08 	streq	r2, [r5, #-2568]	; 0xfffff5f8
    5e80:	1f052406 	svcne	0x00052406
    5e84:	13050106 	movwne	r0, #20742	; 0x5106
    5e88:	201f0520 	andscs	r0, pc, r0, lsr #10
    5e8c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    5e90:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    5e94:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5e98:	052f0605 	streq	r0, [pc, #-1541]!	; 589b <patchImageGenfsk+0x253>
    5e9c:	0f056e04 	svceq	0x00056e04
    5ea0:	13050106 	movwne	r0, #20742	; 0x5106
    5ea4:	2e6a0306 	cdpcs	3, 6, cr0, cr10, cr6, {0}
    5ea8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5eac:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    5eb0:	05052f1b 	streq	r2, [r5, #-3867]	; 0xfffff0e5
    5eb4:	3c120306 	ldccc	3, cr0, [r2], {6}
    5eb8:	0a030205 	beq	c66d4 <__ccfg+0xa672c>
    5ebc:	0605054a 	streq	r0, [r5], -sl, asr #10
    5ec0:	06030501 	streq	r0, [r3], -r1, lsl #10
    5ec4:	14010121 	strne	r0, [r1], #-289	; 0xfffffedf
    5ec8:	01050101 	tsteq	r5, r1, lsl #2
    5ecc:	03053106 	movweq	r3, #20742	; 0x5106
    5ed0:	6901052b 	stmdbvs	r1, {r0, r1, r3, r5, r8, sl}
    5ed4:	01001302 	tsteq	r0, r2, lsl #6
    5ed8:	00010501 	andeq	r0, r1, r1, lsl #10
    5edc:	2b680205 	blcs	1a066f8 <__ccfg+0x19e6750>
    5ee0:	8c030000 	stchi	0, cr0, [r3], {-0}
    5ee4:	06010104 	streq	r0, [r1], -r4, lsl #2
    5ee8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5eec:	05820a03 	streq	r0, [r2, #2563]	; 0xa03
    5ef0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5ef4:	04052006 	streq	r2, [r5], #-6
    5ef8:	05304c06 	ldreq	r4, [r0, #-3078]!	; 0xfffff3fa
    5efc:	0e054f03 	cdpeq	15, 0, cr4, cr5, cr3, {0}
    5f00:	06050106 	streq	r0, [r5], -r6, lsl #2
    5f04:	06040520 	streq	r0, [r4], -r0, lsr #10
    5f08:	0607054b 	streq	r0, [r7], -fp, asr #10
    5f0c:	06050501 	streq	r0, [r5], -r1, lsl #10
    5f10:	36030521 	strcc	r0, [r3], -r1, lsr #10
    5f14:	01060e05 	tsteq	r6, r5, lsl #28
    5f18:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    5f1c:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    5f20:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    5f24:	0705581b 	smladeq	r5, fp, r8, r5
    5f28:	06050520 	streq	r0, [r5], -r0, lsr #10
    5f2c:	05130633 	ldreq	r0, [r3, #-1587]	; 0xfffff9cd
    5f30:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    5f34:	1f0c0521 	svcne	0x000c0521
    5f38:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    5f3c:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    5f40:	06012106 	streq	r2, [r1], -r6, lsl #2
    5f44:	2e062e20 	cdpcs	14, 0, cr2, cr6, cr0, {1}
    5f48:	72030a05 	andvc	r0, r3, #20480	; 0x5000
    5f4c:	060d054a 	streq	r0, [sp], -sl, asr #10
    5f50:	06040501 	streq	r0, [r4], -r1, lsl #10
    5f54:	03020530 	movweq	r0, #9520	; 0x2530
    5f58:	05017dde 	streq	r7, [r1, #-3550]	; 0xfffff222
    5f5c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5f60:	88030602 	stmdahi	r3, {r1, r9, sl}
    5f64:	27052e01 	strcs	r2, [r5, -r1, lsl #28]
    5f68:	0a050106 	beq	146388 <__ccfg+0x1263e0>
    5f6c:	06060520 	streq	r0, [r6], -r0, lsr #10
    5f70:	1303052f 	movwne	r0, #13615	; 0x352f
    5f74:	01060e05 	tsteq	r6, r5, lsl #28
    5f78:	2d061305 	stccs	3, cr1, [r6, #-20]	; 0xffffffec
    5f7c:	01061b05 	tsteq	r6, r5, lsl #22
    5f80:	20060605 	andcs	r0, r6, r5, lsl #12
    5f84:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5f88:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5f8c:	051f0613 	ldreq	r0, [pc, #-1555]	; 5981 <__exidx_end+0x69>
    5f90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5f94:	47033016 	smladmi	r3, r6, r0, r3
    5f98:	05010174 	streq	r0, [r1, #-372]	; 0xfffffe8c
    5f9c:	01cd0304 	biceq	r0, sp, r4, lsl #6
    5fa0:	03020501 	movweq	r0, #9473	; 0x2501
    5fa4:	13017ede 	movwne	r7, #7902	; 0x1ede
    5fa8:	06050514 			; <UNDEFINED> instruction: 0x06050514
    5fac:	aa030601 	bge	c77b8 <__ccfg+0xa7810>
    5fb0:	01154a01 	tsteq	r5, r1, lsl #20
    5fb4:	08051401 	stmdaeq	r5, {r0, sl, ip}
    5fb8:	10050106 	andne	r0, r5, r6, lsl #2
    5fbc:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    5fc0:	22060605 	andcs	r0, r6, #5242880	; 0x500000
    5fc4:	01062905 	tsteq	r6, r5, lsl #18
    5fc8:	31060505 	tstcc	r6, r5, lsl #10
    5fcc:	01061b05 	tsteq	r6, r5, lsl #22
    5fd0:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    5fd4:	01060605 	tsteq	r6, r5, lsl #12
    5fd8:	30060405 	andcc	r0, r6, r5, lsl #8
    5fdc:	060f054b 	streq	r0, [pc], -fp, asr #10
    5fe0:	20070501 	andcs	r0, r7, r1, lsl #10
    5fe4:	30060505 	andcc	r0, r6, r5, lsl #10
    5fe8:	05350405 	ldreq	r0, [r5, #-1029]!	; 0xfffffbfb
    5fec:	0e052a0b 	vmlaeq.f32	s4, s10, s22
    5ff0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5ff4:	03053006 	movweq	r3, #20486	; 0x5006
    5ff8:	0607056b 	streq	r0, [r7], -fp, ror #10
    5ffc:	20060501 	andcs	r0, r6, r1, lsl #10
    6000:	33060405 	movwcc	r0, #25605	; 0x6405
    6004:	07054b59 	smlsdeq	r5, r9, fp, r4
    6008:	03050106 	movweq	r0, #20742	; 0x5106
    600c:	4a100306 	bmi	406c2c <__ccfg+0x3e6c84>
    6010:	9e030205 	cdpls	2, 0, cr0, cr3, cr5, {0}
    6014:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    6018:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    601c:	00d60306 	sbcseq	r0, r6, r6, lsl #6
    6020:	05010158 	streq	r0, [r1, #-344]	; 0xfffffea8
    6024:	028d0303 	addeq	r0, sp, #201326592	; 0xc000000
    6028:	2e1e0301 	cdpcs	3, 1, cr0, cr14, cr1, {0}
    602c:	01061905 	tsteq	r6, r5, lsl #18
    6030:	05213105 	streq	r3, [r1, #-261]!	; 0xfffffefb
    6034:	03052d19 	movweq	r2, #23833	; 0x5d19
    6038:	31052106 	tstcc	r5, r6, lsl #2
    603c:	03050106 	movweq	r0, #20742	; 0x5106
    6040:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    6044:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6048:	06070532 			; <UNDEFINED> instruction: 0x06070532
    604c:	20060501 	andcs	r0, r6, r1, lsl #10
    6050:	5b060305 	blpl	186c6c <__ccfg+0x166cc4>
    6054:	01060805 	tsteq	r6, r5, lsl #16
    6058:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    605c:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    6060:	13054103 	movwne	r4, #20739	; 0x5103
    6064:	06050106 	streq	r0, [r5], -r6, lsl #2
    6068:	0604052e 	streq	r0, [r4], -lr, lsr #10
    606c:	0607054b 	streq	r0, [r7], -fp, asr #10
    6070:	06050501 	streq	r0, [r5], -r1, lsl #10
    6074:	061b0541 	ldreq	r0, [fp], -r1, asr #10
    6078:	06050501 	streq	r0, [r5], -r1, lsl #10
    607c:	0633052f 	ldrteq	r0, [r3], -pc, lsr #10
    6080:	06050501 	streq	r0, [r5], -r1, lsl #10
    6084:	04052f3e 	streq	r2, [r5], #-3902	; 0xfffff0c2
    6088:	060b053f 			; <UNDEFINED> instruction: 0x060b053f
    608c:	06040501 	streq	r0, [r4], -r1, lsl #10
    6090:	013c0903 	teqeq	ip, r3, lsl #18
    6094:	06030501 	streq	r0, [r3], -r1, lsl #10
    6098:	5800c303 	stmdapl	r0, {r0, r1, r8, r9, lr, pc}
    609c:	6d034206 	sfmvs	f4, 4, [r3, #-24]	; 0xffffffe8
    60a0:	0a053d20 	beq	155528 <__ccfg+0x135580>
    60a4:	03050106 	movweq	r0, #20742	; 0x5106
    60a8:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    60ac:	2074030a 	rsbscs	r0, r4, sl, lsl #6
    60b0:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    60b4:	01060b05 	tsteq	r6, r5, lsl #22
    60b8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    60bc:	03150101 	tsteq	r5, #1073741824	; 0x40000000
    60c0:	0705200b 	streq	r2, [r5, -fp]
    60c4:	06050106 	streq	r0, [r5], -r6, lsl #2
    60c8:	581f052e 	ldmdapl	pc, {r1, r2, r3, r5, r8, sl}	; <UNPREDICTABLE>
    60cc:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
    60d0:	0405493e 	streq	r4, [r5], #-2366	; 0xfffff6c2
    60d4:	01053e06 	tsteq	r5, r6, lsl #28
    60d8:	2002013f 	andcs	r0, r2, pc, lsr r1
    60dc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    60e0:	0205001f 	andeq	r0, r5, #31
    60e4:	00002d58 	andeq	r2, r0, r8, asr sp
    60e8:	0103eb03 	tsteq	r3, r3, lsl #22
    60ec:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    60f0:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    60f4:	05052506 	streq	r2, [r5, #-1286]	; 0xfffffafa
    60f8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    60fc:	05020423 	streq	r0, [r2, #-1059]	; 0xfffffbdd
    6100:	b0030630 	andlt	r0, r3, r0, lsr r6
    6104:	0305667e 	movweq	r6, #22142	; 0x567e
    6108:	05051b06 	streq	r1, [r5, #-2822]	; 0xfffff4fa
    610c:	06300517 			; <UNDEFINED> instruction: 0x06300517
    6110:	060a0501 	streq	r0, [sl], -r1, lsl #10
    6114:	060b0521 	streq	r0, [fp], -r1, lsr #10
    6118:	20030501 	andcs	r0, r3, r1, lsl #10
    611c:	02050104 	andeq	r0, r5, #4, 2
    6120:	01d60306 	bicseq	r0, r6, r6, lsl #6
    6124:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    6128:	7e810303 	cdpvc	3, 8, cr0, cr1, cr3, {0}
    612c:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    6130:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    6134:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    6138:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    613c:	7dfe0332 	ldclvc	3, cr0, [lr, #200]!	; 0xc8
    6140:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    6144:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    6148:	2e82062e 	cdpcs	6, 8, cr0, cr2, cr14, {1}
    614c:	14014a58 	strne	r4, [r1], #-2648	; 0xfffff5a8
    6150:	01055801 	tsteq	r5, r1, lsl #16
    6154:	0d021306 	stceq	3, cr1, [r2, #-24]	; 0xffffffe8
    6158:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    615c:	02050025 	andeq	r0, r5, #37	; 0x25
    6160:	00002dc8 	andeq	r2, r0, r8, asr #27
    6164:	0107d603 	tsteq	r7, r3, lsl #12
    6168:	09030205 	stmdbeq	r3, {r0, r2, r9}
    616c:	06250501 	strteq	r0, [r5], -r1, lsl #10
    6170:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    6174:	2e09030d 	cdpcs	3, 0, cr0, cr9, cr13, {0}
    6178:	77032505 	strvc	r2, [r3, -r5, lsl #10]
    617c:	03050520 	movweq	r0, #21792	; 0x5520
    6180:	03052009 	movweq	r2, #20489	; 0x5009
    6184:	36063006 	strcc	r3, [r6], -r6
    6188:	03060205 	movweq	r0, #25093	; 0x6205
    618c:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    6190:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6194:	0e052406 	cdpeq	4, 0, cr2, cr5, cr6, {0}
    6198:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    619c:	06030520 	streq	r0, [r3], -r0, lsr #10
    61a0:	06070530 			; <UNDEFINED> instruction: 0x06070530
    61a4:	06020537 			; <UNDEFINED> instruction: 0x06020537
    61a8:	06040528 	streq	r0, [r4], -r8, lsr #10
    61ac:	017ea103 	cmneq	lr, r3, lsl #2
    61b0:	df030905 	svcle	0x00030905
    61b4:	0e052001 	cdpeq	0, 0, cr2, cr5, cr1, {0}
    61b8:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    61bc:	05281305 	streq	r1, [r8, #-773]!	; 0xfffffcfb
    61c0:	01cc030b 	biceq	r0, ip, fp, lsl #6
    61c4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    61c8:	7e9b0323 	cdpvc	3, 9, cr0, cr11, cr3, {1}
    61cc:	13141301 	tstne	r4, #67108864	; 0x4000000
    61d0:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    61d4:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    61d8:	055d0603 	ldrbeq	r0, [sp, #-1539]	; 0xfffff9fd
    61dc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    61e0:	052f0604 	streq	r0, [pc, #-1540]!	; 5be4 <__exidx_end+0x2cc>
    61e4:	0e055a03 	vmlaeq.f32	s10, s10, s6
    61e8:	03050106 	movweq	r0, #20742	; 0x5106
    61ec:	06053006 	streq	r3, [r5], -r6
    61f0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    61f4:	13053006 	movwne	r3, #20486	; 0x5006
    61f8:	03050106 	movweq	r0, #20742	; 0x5106
    61fc:	13133206 	tstne	r3, #1610612736	; 0x60000000
    6200:	14060605 	strne	r0, [r6], #-1541	; 0xfffff9fb
    6204:	051f1705 	ldreq	r1, [pc, #-1797]	; 5b07 <__exidx_end+0x1ef>
    6208:	17052106 	strne	r2, [r5, -r6, lsl #2]
    620c:	2b13051f 	blcs	4c7690 <__ccfg+0x4a76e8>
    6210:	31060305 	tstcc	r6, r5, lsl #6
    6214:	01060e05 	tsteq	r6, r5, lsl #28
    6218:	21060305 	tstcs	r6, r5, lsl #6
    621c:	01060605 	tsteq	r6, r5, lsl #12
    6220:	26060205 	strcs	r0, [r6], -r5, lsl #4
    6224:	01061105 	tsteq	r6, r5, lsl #2
    6228:	23060205 	movwcs	r0, #25093	; 0x6205
    622c:	01061a05 	tsteq	r6, r5, lsl #20
    6230:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
    6234:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    6238:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    623c:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    6240:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6244:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    6248:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    624c:	0b052002 	bleq	14e25c <__ccfg+0x12e2b4>
    6250:	2001c003 	andcs	ip, r1, r3
    6254:	c0031505 	andgt	r1, r3, r5, lsl #10
    6258:	0205207e 	andeq	r2, r5, #126	; 0x7e
    625c:	19052306 	stmdbne	r5, {r1, r2, r8, r9, sp}
    6260:	0b050106 	bleq	146680 <__ccfg+0x1266d8>
    6264:	2001bd03 	andcs	fp, r1, r3, lsl #26
    6268:	c3031905 	movwgt	r1, #14597	; 0x3905
    626c:	0205207e 	andeq	r2, r5, #126	; 0x7e
    6270:	15132306 	ldrne	r2, [r3, #-774]	; 0xfffffcfa
    6274:	25051613 	strcs	r1, [r5, #-1555]	; 0xfffff9ed
    6278:	01770306 	cmneq	r7, r6, lsl #6
    627c:	03060205 	movweq	r0, #25093	; 0x6205
    6280:	0905660c 	stmdbeq	r5, {r2, r3, r9, sl, sp, lr}
    6284:	0b050106 	bleq	1466a4 <__ccfg+0x1266fc>
    6288:	2001ae03 	andcs	sl, r1, r3, lsl #28
    628c:	d2030905 	andle	r0, r3, #81920	; 0x14000
    6290:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    6294:	01ab0306 			; <UNDEFINED> instruction: 0x01ab0306
    6298:	0609052e 	streq	r0, [r9], -lr, lsr #10
    629c:	06020501 	streq	r0, [r2], -r1, lsl #10
    62a0:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    62a4:	2e090501 	cfsh32cs	mvfx0, mvfx9, #1
    62a8:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
    62ac:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    62b0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    62b4:	01130101 	tsteq	r3, r1, lsl #2
    62b8:	01011301 	tsteq	r1, r1, lsl #6
    62bc:	053f4f15 	ldreq	r4, [pc, #-3861]!	; 53af <patchGenfskRfe+0x41b>
    62c0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    62c4:	02054a0a 	andeq	r4, r5, #40960	; 0xa000
    62c8:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    62cc:	03050106 	movweq	r0, #20742	; 0x5106
    62d0:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    62d4:	06220560 	strteq	r0, [r2], -r0, ror #10
    62d8:	03440501 	movteq	r0, #17665	; 0x4501
    62dc:	053c7ba0 	ldreq	r7, [ip, #-2976]!	; 0xfffff460
    62e0:	04e00322 	strbteq	r0, [r0], #802	; 0x322
    62e4:	06020520 	streq	r0, [r2], -r0, lsr #10
    62e8:	7b9b0324 	blvc	fe6c6f80 <_estack+0xde6c1f80>
    62ec:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    62f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    62f4:	0644053d 			; <UNDEFINED> instruction: 0x0644053d
    62f8:	2d2e0501 	cfstr32cs	mvfx0, [lr, #-4]!
    62fc:	03060205 	movweq	r0, #25093	; 0x6205
    6300:	200804e7 	andcs	r0, r8, r7, ror #9
    6304:	06280532 			; <UNDEFINED> instruction: 0x06280532
    6308:	23020501 	movwcs	r0, #9473	; 0x2501
    630c:	051d2805 	ldreq	r2, [sp, #-2053]	; 0xfffff7fb
    6310:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    6314:	02052f09 	andeq	r2, r5, #9, 30	; 0x24
    6318:	0630054e 	ldrteq	r0, [r0], -lr, asr #10
    631c:	2f010501 	svccs	0x00010501
    6320:	01002702 	tsteq	r0, r2, lsl #14
    6324:	0002ab01 	andeq	sl, r2, r1, lsl #22
    6328:	4f000300 	svcmi	0x00000300
    632c:	02000001 	andeq	r0, r0, #1
    6330:	0d0efb01 	vstreq	d15, [lr, #-4]
    6334:	01010100 	mrseq	r0, (UNDEF: 17)
    6338:	00000001 	andeq	r0, r0, r1
    633c:	01000001 	tsteq	r0, r1
    6340:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6344:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6348:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    634c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6350:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6354:	61652d65 	cmnvs	r5, r5, ror #26
    6358:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    635c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6360:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6364:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6368:	6f682f00 	svcvs	0x00682f00
    636c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6370:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6374:	442f6e65 	strtmi	r6, [pc], #-3685	; 637c <__exidx_end+0xa64>
    6378:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    637c:	4f2f706f 	svcmi	0x002f706f
    6380:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6384:	502f5445 	eorpl	r5, pc, r5, asr #8
    6388:	534f4349 	movtpl	r4, #62281	; 0xf349
    638c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6390:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6394:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6398:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    639c:	2f656d6f 	svccs	0x00656d6f
    63a0:	70657473 	rsbvc	r7, r5, r3, ror r4
    63a4:	2f6e6568 	svccs	0x006e6568
    63a8:	6b736544 	blvs	1cdf8c0 <__ccfg+0x1cbf918>
    63ac:	2f706f74 	svccs	0x00706f74
    63b0:	4f534c4f 	svcmi	0x00534c4f
    63b4:	2f54454e 	svccs	0x0054454e
    63b8:	4f434950 	svcmi	0x00434950
    63bc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    63c0:	00534f63 	subseq	r4, r3, r3, ror #30
    63c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6310 <__exidx_end+0x9f8>
    63c8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    63cc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    63d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    63d4:	6f746b73 	svcvs	0x00746b73
    63d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    63dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    63e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    63e4:	2f534f43 	svccs	0x00534f43
    63e8:	4f636950 	svcmi	0x00636950
    63ec:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    63f0:	2f736269 	svccs	0x00736269
    63f4:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    63f8:	70000049 	andvc	r0, r0, r9, asr #32
    63fc:	5f67756c 	svcpl	0x0067756c
    6400:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    6404:	0063632e 	rsbeq	r6, r3, lr, lsr #6
    6408:	73000000 	movwvc	r0, #0
    640c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6410:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6414:	73000001 	movwvc	r0, #1
    6418:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    641c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6420:	61000001 	tstvs	r0, r1
    6424:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6428:	00020068 	andeq	r0, r2, r8, rrx
    642c:	63616d00 	cmnvs	r1, #0, 26
    6430:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6434:	70000002 	andvc	r0, r0, r2
    6438:	5f736e69 	svcpl	0x00736e69
    643c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6440:	00020068 	andeq	r0, r2, r8, rrx
    6444:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6448:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    644c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6450:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6454:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6458:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    645c:	00030068 	andeq	r0, r3, r8, rrx
    6460:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    6464:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6468:	00682e73 	rsbeq	r2, r8, r3, ror lr
    646c:	3c000004 	stccc	0, cr0, [r0], {4}
    6470:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6474:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6478:	0000003e 	andeq	r0, r0, lr, lsr r0
    647c:	2b050000 	blcs	146484 <__ccfg+0x1264dc>
    6480:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    6484:	0300002f 	movweq	r0, #47	; 0x2f
    6488:	02050136 	andeq	r0, r5, #-2147483635	; 0x8000000d
    648c:	062b0516 			; <UNDEFINED> instruction: 0x062b0516
    6490:	2410050e 	ldrcs	r0, [r0], #-1294	; 0xfffffaf2
    6494:	051c2b05 	ldreq	r2, [ip, #-2821]	; 0xfffff4fb
    6498:	05052410 	streq	r2, [r5, #-1040]	; 0xfffffbf0
    649c:	2015053c 	andscs	r0, r5, ip, lsr r5
    64a0:	3f060205 	svccc	0x00060205
    64a4:	01061205 	tsteq	r6, r5, lsl #4
    64a8:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    64ac:	01060905 	tsteq	r6, r5, lsl #18
    64b0:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    64b4:	01010004 	tsteq	r1, r4
    64b8:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    64bc:	002f6002 	eoreq	r6, pc, r2
    64c0:	00c20300 	sbceq	r0, r2, r0, lsl #6
    64c4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    64c8:	01061005 	tsteq	r6, r5
    64cc:	051e1f05 	ldreq	r1, [lr, #-3845]	; 0xfffff0fb
    64d0:	05052210 	streq	r2, [r5, #-528]	; 0xfffffdf0
    64d4:	210a0520 	tstcs	sl, r0, lsr #10
    64d8:	052d2a05 	streq	r2, [sp, #-2565]!	; 0xfffff5fb
    64dc:	15052e1e 	strne	r2, [r5, #-3614]	; 0xfffff1e2
    64e0:	06020520 	streq	r0, [r2], -r0, lsr #10
    64e4:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
    64e8:	22090501 	andcs	r0, r9, #4194304	; 0x400000
    64ec:	051e1e05 	ldreq	r1, [lr, #-3589]	; 0xfffff1fb
    64f0:	0205200f 	andeq	r2, r5, #15
    64f4:	01052206 	tsteq	r5, r6, lsl #4
    64f8:	03021306 	movweq	r1, #8966	; 0x2306
    64fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6500:	02050037 	andeq	r0, r5, #55	; 0x37
    6504:	00002f84 	andeq	r2, r0, r4, lsl #31
    6508:	0100cc03 	tsteq	r0, r3, lsl #24
    650c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    6510:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    6514:	01052e16 	tsteq	r5, r6, lsl lr
    6518:	00010221 	andeq	r0, r1, r1, lsr #4
    651c:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    6520:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    6524:	0300002f 	movweq	r0, #47	; 0x2f
    6528:	050100d1 	streq	r0, [r1, #-209]	; 0xffffff2f
    652c:	01051402 	tsteq	r5, r2, lsl #8
    6530:	02021406 	andeq	r1, r2, #100663296	; 0x6000000
    6534:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6538:	02050025 	andeq	r0, r5, #37	; 0x25
    653c:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    6540:	0100d703 	tsteq	r0, r3, lsl #14
    6544:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    6548:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    654c:	01010002 	tsteq	r1, r2
    6550:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
    6554:	002f9402 	eoreq	r9, pc, r2, lsl #8
    6558:	01200300 			; <UNDEFINED> instruction: 0x01200300
    655c:	26061005 	strcs	r1, [r6], -r5
    6560:	7a033905 	bvc	d497c <__ccfg+0xb49d4>
    6564:	06020520 	streq	r0, [r2], -r0, lsr #10
    6568:	05051424 	streq	r1, [r5, #-1060]	; 0xfffffbdc
    656c:	39050106 	stmdbcc	r5, {r1, r2, r8}
    6570:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    6574:	03052605 	movweq	r2, #22021	; 0x5605
    6578:	20052106 	andcs	r2, r5, r6, lsl #2
    657c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    6580:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    6584:	06060521 	streq	r0, [r6], -r1, lsr #10
    6588:	060f0501 	streq	r0, [pc], -r1, lsl #10
    658c:	13040522 	movwne	r0, #17698	; 0x4522
    6590:	01061205 	tsteq	r6, r5, lsl #4
    6594:	49061605 	stmdbmi	r6, {r0, r2, r9, sl, ip}
    6598:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    659c:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    65a0:	16050106 	strne	r0, [r5], -r6, lsl #2
    65a4:	0f051f06 	svceq	0x00051f06
    65a8:	17020501 	strne	r0, [r2, -r1, lsl #10]
    65ac:	01061005 	tsteq	r6, r5
    65b0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    65b4:	053f0602 	ldreq	r0, [pc, #-1538]!	; 5fba <__exidx_end+0x6a2>
    65b8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    65bc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    65c0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    65c4:	01051d0a 	tsteq	r5, sl, lsl #26
    65c8:	06040532 			; <UNDEFINED> instruction: 0x06040532
    65cc:	02207503 	eoreq	r7, r0, #12582912	; 0xc00000
    65d0:	01010009 	tsteq	r1, r9
    65d4:	000001a4 	andeq	r0, r0, r4, lsr #3
    65d8:	01290003 			; <UNDEFINED> instruction: 0x01290003
    65dc:	01020000 	mrseq	r0, (UNDEF: 2)
    65e0:	000d0efb 	strdeq	r0, [sp], -fp
    65e4:	01010101 	tsteq	r1, r1, lsl #2
    65e8:	01000000 	mrseq	r0, (UNDEF: 0)
    65ec:	2f010000 	svccs	0x00010000
    65f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    65f4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    65f8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    65fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6600:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6604:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6608:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    660c:	4349502f 	movtmi	r5, #36911	; 0x902f
    6610:	502f534f 	eorpl	r5, pc, pc, asr #6
    6614:	534f6369 	movtpl	r6, #62313	; 0xf369
    6618:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    661c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    6620:	61697265 	cmnvs	r9, r5, ror #4
    6624:	752f006c 	strvc	r0, [pc, #-108]!	; 65c0 <__exidx_end+0xca8>
    6628:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6464 <__exidx_end+0xb4c>
    662c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    6630:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    6634:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6638:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    663c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6640:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    6644:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6648:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    664c:	2f006564 	svccs	0x00006564
    6650:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6654:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6658:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    665c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6660:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6664:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6668:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    666c:	4349502f 	movtmi	r5, #36911	; 0x902f
    6670:	502f534f 	eorpl	r5, pc, pc, asr #6
    6674:	534f6369 	movtpl	r6, #62313	; 0xf369
    6678:	3143432f 	cmpcc	r3, pc, lsr #6
    667c:	00585833 	subseq	r5, r8, r3, lsr r8
    6680:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 65cc <__exidx_end+0xcb4>
    6684:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6688:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    668c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6690:	6f746b73 	svcvs	0x00746b73
    6694:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6698:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    669c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    66a0:	2f534f43 	svccs	0x00534f43
    66a4:	4f636950 	svcmi	0x00636950
    66a8:	5f000053 	svcpl	0x00000053
    66ac:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    66b0:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    66b4:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    66b8:	00000100 	andeq	r0, r0, r0, lsl #2
    66bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    66c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    66c4:	00000200 	andeq	r0, r0, r0, lsl #4
    66c8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    66cc:	0300682e 	movweq	r6, #2094	; 0x82e
    66d0:	616d0000 	cmnvs	sp, r0
    66d4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    66d8:	00000300 	andeq	r0, r0, r0, lsl #6
    66dc:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    66e0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    66e4:	0300682e 	movweq	r6, #2094	; 0x82e
    66e8:	75620000 	strbvc	r0, [r2, #-0]!
    66ec:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    66f0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    66f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    66f8:	73000003 	movwvc	r0, #3
    66fc:	6f697379 	svcvs	0x00697379
    6700:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6704:	05000000 	streq	r0, [r0, #-0]
    6708:	02050001 	andeq	r0, r5, #1
    670c:	00002fdc 	ldrdeq	r2, [r0], -ip
    6710:	01011c03 	tsteq	r1, r3, lsl #24
    6714:	3c062006 	stccc	0, cr2, [r6], {6}
    6718:	013c2603 	teqeq	ip, r3, lsl #12
    671c:	5f030205 	svcpl	0x00030205
    6720:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    6724:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    6728:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    672c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6730:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6734:	052f0603 	streq	r0, [pc, #-1539]!	; 6139 <__exidx_end+0x821>
    6738:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    673c:	0a053c07 	beq	155760 <__ccfg+0x1357b8>
    6740:	06020528 	streq	r0, [r2], -r8, lsr #10
    6744:	060a052e 	streq	r0, [sl], -lr, lsr #10
    6748:	06020501 	streq	r0, [r2], -r1, lsl #10
    674c:	06060583 	streq	r0, [r6], -r3, lsl #11
    6750:	211f2101 	tstcs	pc, r1, lsl #2
    6754:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    6758:	06060521 	streq	r0, [r6], -r1, lsr #10
    675c:	06020501 	streq	r0, [r2], -r1, lsl #10
    6760:	06050521 	streq	r0, [r5], -r1, lsr #10
    6764:	06030501 	streq	r0, [r3], -r1, lsl #10
    6768:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    676c:	060d054a 	streq	r0, [sp], -sl, asr #10
    6770:	20110501 	andscs	r0, r1, r1, lsl #10
    6774:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    6778:	01010008 	tsteq	r1, r8
    677c:	0000024e 	andeq	r0, r0, lr, asr #4
    6780:	01280003 			; <UNDEFINED> instruction: 0x01280003
    6784:	01020000 	mrseq	r0, (UNDEF: 2)
    6788:	000d0efb 	strdeq	r0, [sp], -fp
    678c:	01010101 	tsteq	r1, r1, lsl #2
    6790:	01000000 	mrseq	r0, (UNDEF: 0)
    6794:	2f010000 	svccs	0x00010000
    6798:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    679c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    67a0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    67a4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    67a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    67ac:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    67b0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    67b4:	4349502f 	movtmi	r5, #36911	; 0x902f
    67b8:	502f534f 	eorpl	r5, pc, pc, asr #6
    67bc:	534f6369 	movtpl	r6, #62313	; 0xf369
    67c0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    67c4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    67c8:	61697265 	cmnvs	r9, r5, ror #4
    67cc:	752f006c 	strvc	r0, [pc, #-108]!	; 6768 <__exidx_end+0xe50>
    67d0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 660c <__exidx_end+0xcf4>
    67d4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    67d8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    67dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    67e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    67e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    67e8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    67ec:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    67f0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    67f4:	2f006564 	svccs	0x00006564
    67f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    67fc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6800:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6804:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6808:	706f746b 	rsbvc	r7, pc, fp, ror #8
    680c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6810:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6814:	4349502f 	movtmi	r5, #36911	; 0x902f
    6818:	502f534f 	eorpl	r5, pc, pc, asr #6
    681c:	534f6369 	movtpl	r6, #62313	; 0xf369
    6820:	3143432f 	cmpcc	r3, pc, lsr #6
    6824:	00585833 	subseq	r5, r8, r3, lsr r8
    6828:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6774 <__exidx_end+0xe5c>
    682c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6830:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6834:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6838:	6f746b73 	svcvs	0x00746b73
    683c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6840:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6844:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6848:	2f534f43 	svccs	0x00534f43
    684c:	4f636950 	svcmi	0x00636950
    6850:	5f000053 	svcpl	0x00000053
    6854:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    6858:	61697265 	cmnvs	r9, r5, ror #4
    685c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    6860:	73000001 	movwvc	r0, #1
    6864:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6868:	00682e74 	rsbeq	r2, r8, r4, ror lr
    686c:	61000002 	tstvs	r0, r2
    6870:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6874:	00030068 	andeq	r0, r3, r8, rrx
    6878:	63616d00 	cmnvs	r1, #0, 26
    687c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6880:	70000003 	andvc	r0, r0, r3
    6884:	5f736e69 	svcpl	0x00736e69
    6888:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    688c:	00030068 	andeq	r0, r3, r8, rrx
    6890:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6894:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6898:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    689c:	0300682e 	movweq	r6, #2094	; 0x82e
    68a0:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    68a4:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    68a8:	00040068 	andeq	r0, r4, r8, rrx
    68ac:	01050000 	mrseq	r0, (UNDEF: 5)
    68b0:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    68b4:	03000030 	movweq	r0, #48	; 0x30
    68b8:	06010122 	streq	r0, [r1], -r2, lsr #2
    68bc:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    68c0:	13136b02 	tstne	r3, #2048	; 0x800
    68c4:	06100516 			; <UNDEFINED> instruction: 0x06100516
    68c8:	20050501 	andcs	r0, r5, r1, lsl #10
    68cc:	30060305 	andcc	r0, r6, r5, lsl #6
    68d0:	053f0205 	ldreq	r0, [pc, #-517]!	; 66d3 <__exidx_end+0xdbb>
    68d4:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    68d8:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    68dc:	200b0520 	andcs	r0, fp, r0, lsr #10
    68e0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    68e4:	2f240603 	svccs	0x00240603
    68e8:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    68ec:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    68f0:	2f061f02 	svccs	0x00061f02
    68f4:	01060605 	tsteq	r6, r5, lsl #12
    68f8:	30060205 	andcc	r0, r6, r5, lsl #4
    68fc:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    6900:	01060505 	tsteq	r6, r5, lsl #10
    6904:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    6908:	01060605 	tsteq	r6, r5, lsl #12
    690c:	2f060405 	svccs	0x00060405
    6910:	01060705 	tsteq	r6, r5, lsl #14
    6914:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    6918:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    691c:	03052106 	movweq	r2, #20742	; 0x5106
    6920:	06070531 			; <UNDEFINED> instruction: 0x06070531
    6924:	20060501 	andcs	r0, r6, r1, lsl #10
    6928:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    692c:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    6930:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6934:	13052e05 	movwne	r2, #24069	; 0x5e05
    6938:	0603052e 	streq	r0, [r3], -lr, lsr #10
    693c:	0608052f 	streq	r0, [r8], -pc, lsr #10
    6940:	06030501 	streq	r0, [r3], -r1, lsl #10
    6944:	060d052f 	streq	r0, [sp], -pc, lsr #10
    6948:	06030501 	streq	r0, [r3], -r1, lsl #10
    694c:	3102052f 	tstcc	r2, pc, lsr #10
    6950:	01060605 	tsteq	r6, r5, lsl #12
    6954:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    6958:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    695c:	21010606 	tstcs	r1, r6, lsl #12
    6960:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    6964:	0606052f 	streq	r0, [r6], -pc, lsr #10
    6968:	06020501 	streq	r0, [r2], -r1, lsl #10
    696c:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    6970:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6974:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6978:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    697c:	07053c11 	smladeq	r5, r1, ip, r3
    6980:	06020521 	streq	r0, [r2], -r1, lsr #10
    6984:	0605054b 	streq	r0, [r5], -fp, asr #10
    6988:	06020501 	streq	r0, [r2], -r1, lsl #10
    698c:	060a0524 	streq	r0, [sl], -r4, lsr #10
    6990:	9f060501 	svcls	0x00060501
    6994:	051f0a05 	ldreq	r0, [pc, #-2565]	; 5f97 <__exidx_end+0x67f>
    6998:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    699c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    69a0:	052f0602 	streq	r0, [pc, #-1538]!	; 63a6 <__exidx_end+0xa8e>
    69a4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    69a8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    69ac:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    69b0:	052f0603 	streq	r0, [pc, #-1539]!	; 63b5 <__exidx_end+0xa9d>
    69b4:	06053002 	streq	r3, [r5], -r2
    69b8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    69bc:	01053d06 	tsteq	r5, r6, lsl #26
    69c0:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    69c4:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    69c8:	000d0230 	andeq	r0, sp, r0, lsr r2
    69cc:	03c00101 	biceq	r0, r0, #1073741824	; 0x40000000
    69d0:	00030000 	andeq	r0, r3, r0
    69d4:	0000013d 	andeq	r0, r0, sp, lsr r1
    69d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    69dc:	0101000d 	tsteq	r1, sp
    69e0:	00000101 	andeq	r0, r0, r1, lsl #2
    69e4:	00000100 	andeq	r0, r0, r0, lsl #2
    69e8:	6f682f01 	svcvs	0x00682f01
    69ec:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    69f0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    69f4:	442f6e65 	strtmi	r6, [pc], #-3685	; 69fc <__exidx_end+0x10e4>
    69f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    69fc:	4f2f706f 	svcmi	0x002f706f
    6a00:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6a04:	502f5445 	eorpl	r5, pc, r5, asr #8
    6a08:	534f4349 	movtpl	r4, #62281	; 0xf349
    6a0c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6a10:	502f534f 	eorpl	r5, pc, pc, asr #6
    6a14:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6a18:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6a1c:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6a20:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6a24:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6a28:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6a2c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6a30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a34:	61652d65 	cmnvs	r5, r5, ror #26
    6a38:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6a3c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6a40:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6a44:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6a48:	6f682f00 	svcvs	0x00682f00
    6a4c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6a50:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6a54:	442f6e65 	strtmi	r6, [pc], #-3685	; 6a5c <__exidx_end+0x1144>
    6a58:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6a5c:	4f2f706f 	svcmi	0x002f706f
    6a60:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6a64:	502f5445 	eorpl	r5, pc, r5, asr #8
    6a68:	534f4349 	movtpl	r4, #62281	; 0xf349
    6a6c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6a70:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6a74:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6a78:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6a7c:	2f656d6f 	svccs	0x00656d6f
    6a80:	70657473 	rsbvc	r7, r5, r3, ror r4
    6a84:	2f6e6568 	svccs	0x006e6568
    6a88:	6b736544 	blvs	1cdffa0 <__ccfg+0x1cbfff8>
    6a8c:	2f706f74 	svccs	0x00706f74
    6a90:	4f534c4f 	svcmi	0x00534c4f
    6a94:	2f54454e 	svccs	0x0054454e
    6a98:	4f434950 	svcmi	0x00434950
    6a9c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6aa0:	00534f63 	subseq	r4, r3, r3, ror #30
    6aa4:	6f667600 	svcvs	0x00667600
    6aa8:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    6aac:	00000100 	andeq	r0, r0, r0, lsl #2
    6ab0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6ab4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6ab8:	00000200 	andeq	r0, r0, r0, lsl #4
    6abc:	61647473 	smcvs	18243	; 0x4743
    6ac0:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6ac4:	00000200 	andeq	r0, r0, r0, lsl #4
    6ac8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6acc:	0300682e 	movweq	r6, #2094	; 0x82e
    6ad0:	616d0000 	cmnvs	sp, r0
    6ad4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6ad8:	00000300 	andeq	r0, r0, r0, lsl #6
    6adc:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6ae0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6ae4:	0300682e 	movweq	r6, #2094	; 0x82e
    6ae8:	75620000 	strbvc	r0, [r2, #-0]!
    6aec:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6af0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6af4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6af8:	73000003 	movwvc	r0, #3
    6afc:	6f697379 	svcvs	0x00697379
    6b00:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6b04:	623c0000 	eorsvs	r0, ip, #0
    6b08:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6b0c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6b10:	00000000 	andeq	r0, r0, r0
    6b14:	00150500 	andseq	r0, r5, r0, lsl #10
    6b18:	31680205 	cmncc	r8, r5, lsl #4
    6b1c:	0c030000 	stceq	0, cr0, [r3], {-0}
    6b20:	13030501 	movwne	r0, #13569	; 0x3501
    6b24:	01060605 	tsteq	r6, r5, lsl #12
    6b28:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    6b2c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6b30:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6b34:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6b38:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6b3c:	01025902 	tsteq	r2, r2, lsl #18
    6b40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6b44:	02050043 	andeq	r0, r5, #67	; 0x43
    6b48:	00003188 	andeq	r3, r0, r8, lsl #3
    6b4c:	052e0619 	streq	r0, [lr, #-1561]!	; 0xfffff9e7
    6b50:	04052006 	streq	r2, [r5], #-6
    6b54:	052e1d03 	streq	r1, [lr, #-3331]!	; 0xfffff2fd
    6b58:	20280305 	eorcs	r0, r8, r5, lsl #6
    6b5c:	71030705 	tstvc	r3, r5, lsl #14
    6b60:	03060520 	movweq	r0, #25888	; 0x6520
    6b64:	0205204a 	andeq	r2, r5, #74	; 0x4a
    6b68:	14133e06 	ldrne	r3, [r3], #-3590	; 0xfffff1fa
    6b6c:	05180305 	ldreq	r0, [r8, #-773]	; 0xfffffcfb
    6b70:	01120302 	tsteq	r2, r2, lsl #6
    6b74:	01060405 	tsteq	r6, r5, lsl #8
    6b78:	30060205 	andcc	r0, r6, r5, lsl #4
    6b7c:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    6b80:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6b84:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6b88:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6b8c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6b90:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6b94:	05052e10 	streq	r2, [r5, #-3600]	; 0xfffff1f0
    6b98:	2d070521 	cfstr32cs	mvfx0, [r7, #-132]	; 0xffffff7c
    6b9c:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    6ba0:	0304053d 	movweq	r0, #17725	; 0x453d
    6ba4:	590100da 	stmdbpl	r1, {r1, r3, r4, r6, r7}
    6ba8:	01060705 	tsteq	r6, r5, lsl #14
    6bac:	03060405 	movweq	r0, #25605	; 0x6405
    6bb0:	054a7fa7 	strbeq	r7, [sl, #-4007]	; 0xfffff059
    6bb4:	c2030605 	andgt	r0, r3, #5242880	; 0x500000
    6bb8:	2f062000 	svccs	0x00062000
    6bbc:	10061205 	andne	r1, r6, r5, lsl #4
    6bc0:	03060305 	movweq	r0, #25349	; 0x6305
    6bc4:	06052e43 	streq	r2, [r5], -r3, asr #28
    6bc8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6bcc:	06054c06 	streq	r4, [r5], -r6, lsl #24
    6bd0:	0b050106 	bleq	146ff0 <__ccfg+0x127048>
    6bd4:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6bd8:	03050521 	movweq	r0, #21793	; 0x5521
    6bdc:	59e400c9 	stmibpl	r4!, {r0, r3, r6, r7}^
    6be0:	06080559 			; <UNDEFINED> instruction: 0x06080559
    6be4:	06050501 	streq	r0, [r5], -r1, lsl #10
    6be8:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    6bec:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6bf0:	04053101 	streq	r3, [r5], #-257	; 0xfffffeff
    6bf4:	3c7fa903 			; <UNDEFINED> instruction: 0x3c7fa903
    6bf8:	68060505 	stmdavs	r6, {r0, r2, r8, sl}
    6bfc:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    6c00:	0c051305 	stceq	3, cr1, [r5], {5}
    6c04:	12051306 	andne	r1, r5, #402653184	; 0x18000000
    6c08:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6c0c:	060e052f 	streq	r0, [lr], -pc, lsr #10
    6c10:	06060514 			; <UNDEFINED> instruction: 0x06060514
    6c14:	060e052d 	streq	r0, [lr], -sp, lsr #10
    6c18:	2e140513 	mrccs	5, 0, r0, cr4, cr3, {0}
    6c1c:	062d0605 	strteq	r0, [sp], -r5, lsl #12
    6c20:	0609055a 			; <UNDEFINED> instruction: 0x0609055a
    6c24:	06140501 	ldreq	r0, [r4], -r1, lsl #10
    6c28:	06160539 			; <UNDEFINED> instruction: 0x06160539
    6c2c:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    6c30:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6c34:	06050513 			; <UNDEFINED> instruction: 0x06050513
    6c38:	13200903 			; <UNDEFINED> instruction: 0x13200903
    6c3c:	01061205 	tsteq	r6, r5, lsl #4
    6c40:	052f0805 	streq	r0, [pc, #-2053]!	; 6443 <__exidx_end+0xb2b>
    6c44:	05052d09 	streq	r2, [r5, #-3337]	; 0xfffff2f7
    6c48:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    6c4c:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6c50:	06060520 	streq	r0, [r6], -r0, lsr #10
    6c54:	0a055930 	beq	15d11c <__ccfg+0x13d174>
    6c58:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6c5c:	0c054c06 	stceq	12, cr4, [r5], {6}
    6c60:	016f0306 	cmneq	pc, r6, lsl #6
    6c64:	11030505 	tstne	r3, r5, lsl #10
    6c68:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    6c6c:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6c70:	8274014a 	rsbshi	r0, r4, #-2147483630	; 0x80000012
    6c74:	204a2020 	subcs	r2, sl, r0, lsr #32
    6c78:	0705252e 	streq	r2, [r5, -lr, lsr #10]
    6c7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6c80:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    6c84:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6c88:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6c8c:	09051330 	stmdbeq	r5, {r4, r5, r8, r9, ip}
    6c90:	0a051406 	beq	14bcb0 <__ccfg+0x12bd08>
    6c94:	2d08051f 	cfstr32cs	mvfx0, [r8, #-124]	; 0xffffff84
    6c98:	2f060605 	svccs	0x00060605
    6c9c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6ca0:	20130501 	andscs	r0, r3, r1, lsl #10
    6ca4:	3f060705 	svccc	0x00060705
    6ca8:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    6cac:	06060501 	streq	r0, [r6], -r1, lsl #10
    6cb0:	06050530 			; <UNDEFINED> instruction: 0x06050530
    6cb4:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    6cb8:	20110306 	andscs	r0, r1, r6, lsl #6
    6cbc:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6cc0:	4a063c06 	bmi	195ce0 <__ccfg+0x175d38>
    6cc4:	01666601 	cmneq	r6, r1, lsl #12
    6cc8:	2e20582e 	cdpcs	8, 2, cr5, cr0, cr14, {1}
    6ccc:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
    6cd0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    6cd4:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6cd8:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    6cdc:	2d0a0514 	cfstr32cs	mvfx0, [sl, #-80]	; 0xffffffb0
    6ce0:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6ce4:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    6ce8:	0f051407 	svceq	0x00051407
    6cec:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    6cf0:	2d07052e 	cfstr32cs	mvfx0, [r7, #-184]	; 0xffffff48
    6cf4:	0a055a06 	beq	15d514 <__ccfg+0x13d56c>
    6cf8:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    6cfc:	17054706 	strne	r4, [r5, -r6, lsl #14]
    6d00:	13050106 	movwne	r0, #20742	; 0x5106
    6d04:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    6d08:	06051306 	streq	r1, [r5], -r6, lsl #6
    6d0c:	05592606 	ldrbeq	r2, [r9, #-1542]	; 0xfffff9fa
    6d10:	13134f05 	tstne	r3, #5, 30
    6d14:	11060905 	tstne	r6, r5, lsl #18
    6d18:	062f0505 	strteq	r0, [pc], -r5, lsl #10
    6d1c:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6d20:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
    6d24:	0b050106 	bleq	147144 <__ccfg+0x12719c>
    6d28:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6d2c:	0a054b3d 	beq	159a28 <__ccfg+0x139a80>
    6d30:	7fad0306 	svcvc	0x00ad0306
    6d34:	00070220 	andeq	r0, r7, r0, lsr #4
    6d38:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    6d3c:	b8020500 	stmdalt	r2, {r8, sl}
    6d40:	03000033 	movweq	r0, #51	; 0x33
    6d44:	05010190 	streq	r0, [r1, #-400]	; 0xfffffe70
    6d48:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    6d4c:	2e0e0635 	mcrcs	6, 0, r0, cr14, cr5, {1}
    6d50:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    6d54:	67300603 	ldrvs	r0, [r0, -r3, lsl #12]!
    6d58:	03060105 	movweq	r0, #24837	; 0x6105
    6d5c:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    6d60:	3c720306 	ldclcc	3, cr0, [r2], #-24	; 0xffffffe8
    6d64:	01060805 	tsteq	r6, r5, lsl #16
    6d68:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    6d6c:	053f0602 	ldreq	r0, [pc, #-1538]!	; 6772 <__exidx_end+0xe5a>
    6d70:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6d74:	02053c05 	andeq	r3, r5, #1280	; 0x500
    6d78:	0b054006 	bleq	156d98 <__ccfg+0x136df0>
    6d7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6d80:	200b0558 	andcs	r0, fp, r8, asr r5
    6d84:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6d88:	3d220603 	stccc	6, cr0, [r2, #-12]!
    6d8c:	00020213 	andeq	r0, r2, r3, lsl r2
    6d90:	02c90101 	sbceq	r0, r9, #1073741824	; 0x40000000
    6d94:	00030000 	andeq	r0, r3, r0
    6d98:	0000013d 	andeq	r0, r0, sp, lsr r1
    6d9c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6da0:	0101000d 	tsteq	r1, sp
    6da4:	00000101 	andeq	r0, r0, r1, lsl #2
    6da8:	00000100 	andeq	r0, r0, r0, lsl #2
    6dac:	6f682f01 	svcvs	0x00682f01
    6db0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6db4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6db8:	442f6e65 	strtmi	r6, [pc], #-3685	; 6dc0 <__exidx_end+0x14a8>
    6dbc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6dc0:	4f2f706f 	svcmi	0x002f706f
    6dc4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6dc8:	502f5445 	eorpl	r5, pc, r5, asr #8
    6dcc:	534f4349 	movtpl	r4, #62281	; 0xf349
    6dd0:	6369502f 	cmnvs	r9, #47	; 0x2f
    6dd4:	502f534f 	eorpl	r5, pc, pc, asr #6
    6dd8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6ddc:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6de0:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6de4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6de8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6dec:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6df0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6df4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6df8:	61652d65 	cmnvs	r5, r5, ror #26
    6dfc:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6e00:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6e04:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6e08:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6e0c:	6f682f00 	svcvs	0x00682f00
    6e10:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6e14:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6e18:	442f6e65 	strtmi	r6, [pc], #-3685	; 6e20 <__exidx_end+0x1508>
    6e1c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6e20:	4f2f706f 	svcmi	0x002f706f
    6e24:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6e28:	502f5445 	eorpl	r5, pc, r5, asr #8
    6e2c:	534f4349 	movtpl	r4, #62281	; 0xf349
    6e30:	6369502f 	cmnvs	r9, #47	; 0x2f
    6e34:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6e38:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6e3c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6e40:	2f656d6f 	svccs	0x00656d6f
    6e44:	70657473 	rsbvc	r7, r5, r3, ror r4
    6e48:	2f6e6568 	svccs	0x006e6568
    6e4c:	6b736544 	blvs	1ce0364 <__ccfg+0x1cc03bc>
    6e50:	2f706f74 	svccs	0x00706f74
    6e54:	4f534c4f 	svcmi	0x00534c4f
    6e58:	2f54454e 	svccs	0x0054454e
    6e5c:	4f434950 	svcmi	0x00434950
    6e60:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6e64:	00534f63 	subseq	r4, r3, r3, ror #30
    6e68:	63737600 	cmnvs	r3, #0, 12
    6e6c:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    6e70:	00000100 	andeq	r0, r0, r0, lsl #2
    6e74:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6e78:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6e7c:	00000200 	andeq	r0, r0, r0, lsl #4
    6e80:	61647473 	smcvs	18243	; 0x4743
    6e84:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6e88:	00000200 	andeq	r0, r0, r0, lsl #4
    6e8c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6e90:	0300682e 	movweq	r6, #2094	; 0x82e
    6e94:	616d0000 	cmnvs	sp, r0
    6e98:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6e9c:	00000300 	andeq	r0, r0, r0, lsl #6
    6ea0:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6ea4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6ea8:	0300682e 	movweq	r6, #2094	; 0x82e
    6eac:	75620000 	strbvc	r0, [r2, #-0]!
    6eb0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6eb4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6eb8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6ebc:	73000003 	movwvc	r0, #3
    6ec0:	6f697379 	svcvs	0x00697379
    6ec4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6ec8:	623c0000 	eorsvs	r0, ip, #0
    6ecc:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6ed0:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6ed4:	00000000 	andeq	r0, r0, r0
    6ed8:	003a0500 	eorseq	r0, sl, r0, lsl #10
    6edc:	34080205 	strcc	r0, [r8], #-517	; 0xfffffdfb
    6ee0:	05190000 	ldreq	r0, [r9, #-0]
    6ee4:	3a031402 	bcc	cbef4 <__ccfg+0xabf4c>
    6ee8:	06050501 	streq	r0, [r5], -r1, lsl #10
    6eec:	033a0501 	teqeq	sl, #4194304	; 0x400000
    6ef0:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    6ef4:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    6ef8:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    6efc:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    6f00:	0b05200e 	bleq	14ef40 <__ccfg+0x12ef98>
    6f04:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    6f08:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    6f0c:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    6f10:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    6f14:	21060305 	tstcs	r6, r5, lsl #6
    6f18:	01060605 	tsteq	r6, r5, lsl #12
    6f1c:	30060305 	andcc	r0, r6, r5, lsl #6
    6f20:	01060b05 	tsteq	r6, r5, lsl #22
    6f24:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    6f28:	01052003 	tsteq	r5, r3
    6f2c:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    6f30:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    6f34:	1b030b05 	blne	c9b50 <__ccfg+0xa9ba8>
    6f38:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    6f3c:	060b052e 	streq	r0, [fp], -lr, lsr #10
    6f40:	06040501 	streq	r0, [r4], -r1, lsl #10
    6f44:	060705ad 	streq	r0, [r7], -sp, lsr #11
    6f48:	06040501 	streq	r0, [r4], -r1, lsl #10
    6f4c:	06070530 			; <UNDEFINED> instruction: 0x06070530
    6f50:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    6f54:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    6f58:	142f0604 	strtne	r0, [pc], #-1540	; 6f60 <__exidx_end+0x1648>
    6f5c:	01060705 	tsteq	r6, r5, lsl #14
    6f60:	2f060b05 	svccs	0x00060b05
    6f64:	01060d05 	tsteq	r6, r5, lsl #26
    6f68:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    6f6c:	2b052e1c 	blcs	1527e4 <__ccfg+0x13283c>
    6f70:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    6f74:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    6f78:	01060b05 	tsteq	r6, r5, lsl #22
    6f7c:	83060405 	movwhi	r0, #25605	; 0x6405
    6f80:	01061805 	tsteq	r6, r5, lsl #16
    6f84:	4b060405 	blmi	187fa0 <__ccfg+0x167ff8>
    6f88:	01060905 	tsteq	r6, r5, lsl #18
    6f8c:	2f060405 	svccs	0x00060405
    6f90:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    6f94:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    6f98:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6f9c:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    6fa0:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    6fa4:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    6fa8:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    6fac:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    6fb0:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    6fb4:	2e060106 	adfcss	f0, f6, f6
    6fb8:	4a219082 	bmi	86b1c8 <__ccfg+0x84b220>
    6fbc:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    6fc0:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    6fc4:	3c062e06 	stccc	14, cr2, [r6], {6}
    6fc8:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    6fcc:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    6fd0:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    6fd4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6fd8:	16052010 			; <UNDEFINED> instruction: 0x16052010
    6fdc:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    6fe0:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6fe4:	3c063c06 	stccc	12, cr3, [r6], {6}
    6fe8:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    6fec:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    6ff0:	9006923c 	andls	r9, r6, ip, lsr r2
    6ff4:	013c5806 	teqeq	ip, r6, lsl #16
    6ff8:	2e06012e 	adfcssp	f0, f6, #0.5
    6ffc:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    7000:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    7004:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    7008:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    700c:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    7010:	01062e01 	tsteq	r6, r1, lsl #28
    7014:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    7018:	4f040521 	svcmi	0x00040521
    701c:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    7020:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    7024:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    7028:	13060805 	movwne	r0, #26629	; 0x6805
    702c:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    7030:	13210604 			; <UNDEFINED> instruction: 0x13210604
    7034:	01060905 	tsteq	r6, r5, lsl #18
    7038:	21060405 	tstcs	r6, r5, lsl #8
    703c:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    7040:	03060705 	movweq	r0, #26373	; 0x6705
    7044:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    7048:	0b050106 	bleq	147468 <__ccfg+0x1274c0>
    704c:	030a053e 	movweq	r0, #42302	; 0xa53e
    7050:	11056654 	tstne	r5, r4, asr r6
    7054:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    7058:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    705c:	8e010100 	adfhis	f0, f1, f0
    7060:	03000002 	movweq	r0, #2
    7064:	00028800 	andeq	r8, r2, r0, lsl #16
    7068:	fb010200 	blx	47872 <__ccfg+0x278ca>
    706c:	01000d0e 	tsteq	r0, lr, lsl #26
    7070:	00010101 	andeq	r0, r1, r1, lsl #2
    7074:	00010000 	andeq	r0, r1, r0
    7078:	752f0100 	strvc	r0, [pc, #-256]!	; 6f80 <__exidx_end+0x1668>
    707c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6eb8 <__exidx_end+0x15a0>
    7080:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7084:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7088:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    708c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7090:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7094:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    7098:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    709c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    70a0:	2f006564 	svccs	0x00006564
    70a4:	2f727375 	svccs	0x00727375
    70a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    70ac:	2f656475 	svccs	0x00656475
    70b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    70b4:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    70b8:	2f007379 	svccs	0x00007379
    70bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    70c0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    70c4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    70c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    70cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    70d0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    70d4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    70d8:	4349502f 	movtmi	r5, #36911	; 0x902f
    70dc:	502f534f 	eorpl	r5, pc, pc, asr #6
    70e0:	534f6369 	movtpl	r6, #62313	; 0xf369
    70e4:	3143432f 	cmpcc	r3, pc, lsr #6
    70e8:	2f585833 	svccs	0x00585833
    70ec:	33314343 	teqcc	r1, #201326593	; 0xc000001
    70f0:	41575858 	cmpmi	r7, r8, asr r8
    70f4:	642f4552 	strtvs	r4, [pc], #-1362	; 70fc <__exidx_end+0x17e4>
    70f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    70fc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7100:	6f682f00 	svcvs	0x00682f00
    7104:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    7108:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    710c:	442f6e65 	strtmi	r6, [pc], #-3685	; 7114 <__exidx_end+0x17fc>
    7110:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    7114:	4f2f706f 	svcmi	0x002f706f
    7118:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    711c:	502f5445 	eorpl	r5, pc, r5, asr #8
    7120:	534f4349 	movtpl	r4, #62281	; 0xf349
    7124:	6369502f 	cmnvs	r9, #47	; 0x2f
    7128:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    712c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    7130:	43432f58 	movtmi	r2, #16216	; 0x3f58
    7134:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    7138:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    713c:	5f66722f 	svcpl	0x0066722f
    7140:	63746170 	cmnvs	r4, #112, 2
    7144:	00736568 	rsbseq	r6, r3, r8, ror #10
    7148:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7094 <__exidx_end+0x177c>
    714c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    7150:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7154:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    7158:	6f746b73 	svcvs	0x00746b73
    715c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    7160:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7164:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    7168:	2f534f43 	svccs	0x00534f43
    716c:	4f636950 	svcmi	0x00636950
    7170:	43432f53 	movtmi	r2, #16211	; 0x3f53
    7174:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    7178:	6f682f00 	svcvs	0x00682f00
    717c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    7180:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    7184:	442f6e65 	strtmi	r6, [pc], #-3685	; 718c <__exidx_end+0x1874>
    7188:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    718c:	4f2f706f 	svcmi	0x002f706f
    7190:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    7194:	502f5445 	eorpl	r5, pc, r5, asr #8
    7198:	534f4349 	movtpl	r4, #62281	; 0xf349
    719c:	6369502f 	cmnvs	r9, #47	; 0x2f
    71a0:	2f00534f 	svccs	0x0000534f
    71a4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    71a8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    71ac:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    71b0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    71b4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    71b8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    71bc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    71c0:	4349502f 	movtmi	r5, #36911	; 0x902f
    71c4:	502f534f 	eorpl	r5, pc, pc, asr #6
    71c8:	534f6369 	movtpl	r6, #62313	; 0xf369
    71cc:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    71d0:	006c656e 	rsbeq	r6, ip, lr, ror #10
    71d4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    71d8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    71dc:	00010068 	andeq	r0, r1, r8, rrx
    71e0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    71e4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    71e8:	00010068 	andeq	r0, r1, r8, rrx
    71ec:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    71f0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    71f4:	00020068 	andeq	r0, r2, r8, rrx
    71f8:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    71fc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7200:	00000200 	andeq	r0, r0, r0, lsl #4
    7204:	6b636f6c 	blvs	18e2fbc <__ccfg+0x18c3014>
    7208:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    720c:	66720000 	ldrbtvs	r0, [r2], -r0
    7210:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    7214:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    7218:	0300682e 	movweq	r6, #2094	; 0x82e
    721c:	66720000 	ldrbtvs	r0, [r2], -r0
    7220:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 70ac <__exidx_end+0x1794>
    7224:	5f6e6f6d 	svcpl	0x006e6f6d
    7228:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    722c:	00030068 	andeq	r0, r3, r8, rrx
    7230:	5f667200 	svcpl	0x00667200
    7234:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    7238:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    723c:	0300682e 	movweq	r6, #2094	; 0x82e
    7240:	66720000 	ldrbtvs	r0, [r2], -r0
    7244:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    7248:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    724c:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
    7250:	73666e65 	cmnvc	r6, #1616	; 0x650
    7254:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7258:	72000004 	andvc	r0, r0, #4
    725c:	61705f66 	cmnvs	r0, r6, ror #30
    7260:	5f686374 	svcpl	0x00686374
    7264:	5f656672 	svcpl	0x00656672
    7268:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    726c:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    7270:	00000400 	andeq	r0, r0, r0, lsl #8
    7274:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    7278:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    727c:	616d0000 	cmnvs	sp, r0
    7280:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    7284:	00000500 	andeq	r0, r0, r0, lsl #10
    7288:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    728c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    7290:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7294:	75620000 	strbvc	r0, [r2, #-0]!
    7298:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    729c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    72a0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    72a4:	73000005 	movwvc	r0, #5
    72a8:	6f697379 	svcvs	0x00697379
    72ac:	0600682e 	streq	r6, [r0], -lr, lsr #16
    72b0:	656b0000 	strbvs	r0, [fp, #-0]!
    72b4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    72b8:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    72bc:	6d730000 	ldclvs	0, cr0, [r3, #-0]
    72c0:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    72c4:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    72c8:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    72cc:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    72d0:	00000500 	andeq	r0, r0, r0, lsl #10
    72d4:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    72d8:	5f667274 	svcpl	0x00667274
    72dc:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    72e0:	73676e69 	cmnvc	r7, #1680	; 0x690
    72e4:	5f706c5f 	svcpl	0x00706c5f
    72e8:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    72ec:	00000500 	andeq	r0, r0, r0, lsl #10
    72f0:	00019c00 	andeq	r9, r1, r0, lsl #24
    72f4:	5f000200 	svcpl	0x00000200
    72f8:	02000001 	andeq	r0, r0, #1
    72fc:	0d0efb01 	vstreq	d15, [lr, #-4]
    7300:	01010100 	mrseq	r0, (UNDEF: 17)
    7304:	00000001 	andeq	r0, r0, r1
    7308:	01000001 	tsteq	r0, r1
    730c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7310:	2f2e2e2f 	svccs	0x002e2e2f
    7314:	642f2e2e 	strtvs	r2, [pc], #-3630	; 731c <__exidx_end+0x1a04>
    7318:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    731c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7320:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7324:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7328:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    732c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7330:	31303030 	teqcc	r0, r0, lsr r0
    7334:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7338:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    733c:	61746562 	cmnvs	r4, r2, ror #10
    7340:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7344:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7348:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7180 <__exidx_end+0x1868>
    734c:	6f635c73 	svcvs	0x00635c73
    7350:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7354:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7358:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    735c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7360:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7364:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7368:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    736c:	3130322d 	teqcc	r0, sp, lsr #4
    7370:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7374:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7378:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    737c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7380:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7384:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7388:	616d5c65 	cmnvs	sp, r5, ror #24
    738c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7390:	3a630065 	bcc	18c752c <__ccfg+0x18a7584>
    7394:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7398:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    739c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    73a0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    73a4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    73a8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    73ac:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    73b0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    73b4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    73b8:	6f6f745c 	svcvs	0x006f745c
    73bc:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    73c0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    73c4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    73c8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    73cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    73d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    73d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    73d8:	5f342d69 	svcpl	0x00342d69
    73dc:	30322d39 	eorscc	r2, r2, r9, lsr sp
    73e0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    73e4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    73e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    73ec:	61652d65 	cmnvs	r5, r5, ror #26
    73f0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    73f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    73f8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    73fc:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7400:	2f2e2e2f 	svccs	0x002e2e2f
    7404:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7408:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    740c:	61000063 	tstvs	r0, r3, rrx
    7410:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    7414:	00000100 	andeq	r0, r0, r0, lsl #2
    7418:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    741c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7420:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7424:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7428:	00000200 	andeq	r0, r0, r0, lsl #4
    742c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7430:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7434:	00030068 	andeq	r0, r3, r8, rrx
    7438:	5f776800 	svcpl	0x00776800
    743c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7440:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7444:	72000004 	andvc	r0, r0, #4
    7448:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    744c:	00000100 	andeq	r0, r0, r0, lsl #2
    7450:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    7454:	00010068 	andeq	r0, r1, r8, rrx
    7458:	05000000 	streq	r0, [r0, #-0]
    745c:	00379802 	eorseq	r9, r7, r2, lsl #16
    7460:	01350300 	teqeq	r5, r0, lsl #6
    7464:	02002120 	andeq	r2, r0, #32, 2
    7468:	4b3d0104 	blmi	f47880 <__ccfg+0xf278d8>
    746c:	2c232f21 	stccs	15, cr2, [r3], #-132	; 0xffffff7c
    7470:	01000502 	tsteq	r0, r2, lsl #10
    7474:	02050001 	andeq	r0, r5, #1
    7478:	00000000 	andeq	r0, r0, r0
    747c:	0100c003 	tsteq	r0, r3
    7480:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
    7484:	4b3d0104 	blmi	f4789c <__ccfg+0xf278f4>
    7488:	2c232f2f 	stccs	15, cr2, [r3], #-188	; 0xffffff44
    748c:	01000502 	tsteq	r0, r2, lsl #10
    7490:	00016701 	andeq	r6, r1, r1, lsl #14
    7494:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    7498:	02000001 	andeq	r0, r0, #1
    749c:	0d0efb01 	vstreq	d15, [lr, #-4]
    74a0:	01010100 	mrseq	r0, (UNDEF: 17)
    74a4:	00000001 	andeq	r0, r0, r1
    74a8:	01000001 	tsteq	r0, r1
    74ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    74b0:	2f2e2e2f 	svccs	0x002e2e2f
    74b4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 74bc <__exidx_end+0x1ba4>
    74b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    74bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    74c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    74c4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    74c8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    74cc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    74d0:	31303030 	teqcc	r0, r0, lsr r0
    74d4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    74d8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    74dc:	61746562 	cmnvs	r4, r2, ror #10
    74e0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    74e4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    74e8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7320 <__exidx_end+0x1a08>
    74ec:	6f635c73 	svcvs	0x00635c73
    74f0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    74f4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    74f8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    74fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7500:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7504:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7508:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    750c:	3130322d 	teqcc	r0, sp, lsr #4
    7510:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7514:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7518:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    751c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7520:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7524:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7528:	616d5c65 	cmnvs	sp, r5, ror #24
    752c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7530:	3a630065 	bcc	18c76cc <__ccfg+0x18a7724>
    7534:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7538:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    753c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7540:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7544:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7548:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    754c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7550:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7554:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7558:	6f6f745c 	svcvs	0x006f745c
    755c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7560:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7564:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7568:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    756c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7570:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7574:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7578:	5f342d69 	svcpl	0x00342d69
    757c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7580:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7584:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7588:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    758c:	61652d65 	cmnvs	r5, r5, ror #26
    7590:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7594:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7598:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    759c:	00007379 	andeq	r7, r0, r9, ror r3
    75a0:	5f6e6f61 	svcpl	0x006e6f61
    75a4:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    75a8:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    75ac:	00000100 	andeq	r0, r0, r0, lsl #2
    75b0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    75b4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    75b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    75bc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    75c0:	00000200 	andeq	r0, r0, r0, lsl #4
    75c4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    75c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    75cc:	00030068 	andeq	r0, r3, r8, rrx
    75d0:	6e6f6100 	powvse	f6, f7, f0
    75d4:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    75d8:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    75dc:	00010068 	andeq	r0, r1, r8, rrx
    75e0:	05000000 	streq	r0, [r0, #-0]
    75e4:	0037c002 	eorseq	ip, r7, r2
    75e8:	013c0300 	teqeq	ip, r0, lsl #6
    75ec:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    75f0:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    75f4:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    75f8:	01010009 	tsteq	r1, r9
    75fc:	000001a9 	andeq	r0, r0, r9, lsr #3
    7600:	01410002 	cmpeq	r1, r2
    7604:	01020000 	mrseq	r0, (UNDEF: 2)
    7608:	000d0efb 	strdeq	r0, [sp], -fp
    760c:	01010101 	tsteq	r1, r1, lsl #2
    7610:	01000000 	mrseq	r0, (UNDEF: 0)
    7614:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7618:	2f2e2e2f 	svccs	0x002e2e2f
    761c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7620:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7624:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7628:	0062696c 	rsbeq	r6, r2, ip, ror #18
    762c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7630:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7634:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7638:	302e302e 	eorcc	r3, lr, lr, lsr #32
    763c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7640:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7644:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7648:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    764c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7650:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7654:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7658:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 74f0 <__exidx_end+0x1bd8>
    765c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7660:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7664:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7668:	6f6e2d6d 	svcvs	0x006e2d6d
    766c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7670:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7674:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7678:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    767c:	615c3371 	cmpvs	ip, r1, ror r3
    7680:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7684:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7688:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    768c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7690:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7694:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7698:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    769c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    76a0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    76a4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    76a8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    76ac:	31303030 	teqcc	r0, r0, lsr r0
    76b0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    76b4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    76b8:	61746562 	cmnvs	r4, r2, ror #10
    76bc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    76c0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    76c4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 74fc <__exidx_end+0x1be4>
    76c8:	6f635c73 	svcvs	0x00635c73
    76cc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    76d0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    76d4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    76d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    76dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    76e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    76e4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    76e8:	3130322d 	teqcc	r0, sp, lsr #4
    76ec:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    76f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    76f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    76f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    76fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7700:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7704:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7708:	61000073 	tstvs	r0, r3, ror r0
    770c:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    7710:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    7714:	00000100 	andeq	r0, r0, r0, lsl #2
    7718:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    771c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7720:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7724:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7728:	00000200 	andeq	r0, r0, r0, lsl #4
    772c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7730:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7734:	00030068 	andeq	r0, r3, r8, rrx
    7738:	6e6f6100 	powvse	f6, f7, f0
    773c:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    7740:	0100682e 	tsteq	r0, lr, lsr #16
    7744:	00000000 	andeq	r0, r0, r0
    7748:	37f00205 	ldrbcc	r0, [r0, r5, lsl #4]!
    774c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    7750:	04020001 	streq	r0, [r2], #-1
    7754:	010a0301 	tsteq	sl, r1, lsl #6
    7758:	01040200 	mrseq	r0, R12_usr
    775c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    7760:	02001f01 	andeq	r1, r0, #1, 30
    7764:	00210104 	eoreq	r0, r1, r4, lsl #2
    7768:	21010402 	tstcs	r1, r2, lsl #8
    776c:	01040200 	mrseq	r0, R12_usr
    7770:	02213021 	eoreq	r3, r1, #33	; 0x21
    7774:	01010008 	tsteq	r1, r8
    7778:	10020500 	andne	r0, r2, r0, lsl #10
    777c:	03000038 	movweq	r0, #56	; 0x38
    7780:	000100d7 	ldrdeq	r0, [r1], -r7
    7784:	03010402 	movweq	r0, #5122	; 0x1402
    7788:	0200010c 	andeq	r0, r0, #12, 2
    778c:	00210104 	eoreq	r0, r1, r4, lsl #2
    7790:	1f010402 	svcne	0x00010402
    7794:	01040200 	mrseq	r0, R12_usr
    7798:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    779c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    77a0:	31210104 			; <UNDEFINED> instruction: 0x31210104
    77a4:	01000502 	tsteq	r0, r2, lsl #10
    77a8:	00019c01 	andeq	r9, r1, r1, lsl #24
    77ac:	39000200 	stmdbcc	r0, {r9}
    77b0:	02000001 	andeq	r0, r0, #1
    77b4:	0d0efb01 	vstreq	d15, [lr, #-4]
    77b8:	01010100 	mrseq	r0, (UNDEF: 17)
    77bc:	00000001 	andeq	r0, r0, r1
    77c0:	01000001 	tsteq	r0, r1
    77c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    77c8:	2f2e2e2f 	svccs	0x002e2e2f
    77cc:	642f2e2e 	strtvs	r2, [pc], #-3630	; 77d4 <__exidx_end+0x1ebc>
    77d0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    77d4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    77d8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    77dc:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    77e0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    77e4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    77e8:	31303030 	teqcc	r0, r0, lsr r0
    77ec:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    77f0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    77f4:	61746562 	cmnvs	r4, r2, ror #10
    77f8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    77fc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7800:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7638 <__exidx_end+0x1d20>
    7804:	6f635c73 	svcvs	0x00635c73
    7808:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    780c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7810:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7814:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7818:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    781c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7820:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7824:	3130322d 	teqcc	r0, sp, lsr #4
    7828:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    782c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7830:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7834:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7838:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    783c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7840:	616d5c65 	cmnvs	sp, r5, ror #24
    7844:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7848:	3a630065 	bcc	18c79e4 <__ccfg+0x18a7a3c>
    784c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7850:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7854:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7858:	3030302e 	eorscc	r3, r0, lr, lsr #32
    785c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7860:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7864:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7868:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    786c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7870:	6f6f745c 	svcvs	0x006f745c
    7874:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7878:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    787c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7880:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7884:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7888:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    788c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7890:	5f342d69 	svcpl	0x00342d69
    7894:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7898:	33713531 	cmncc	r1, #205520896	; 0xc400000
    789c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    78a0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    78a4:	61652d65 	cmnvs	r5, r5, ror #26
    78a8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    78ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    78b0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    78b4:	00007379 	andeq	r7, r0, r9, ror r3
    78b8:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    78bc:	00010063 	andeq	r0, r1, r3, rrx
    78c0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    78c4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    78c8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    78cc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    78d0:	00020068 	andeq	r0, r2, r8, rrx
    78d4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    78d8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    78dc:	0300682e 	movweq	r6, #2094	; 0x82e
    78e0:	70630000 	rsbvc	r0, r3, r0
    78e4:	00682e75 	rsbeq	r2, r8, r5, ror lr
    78e8:	00000001 	andeq	r0, r0, r1
    78ec:	28020500 	stmdacs	r2, {r8, sl}
    78f0:	03000038 	movweq	r0, #56	; 0x38
    78f4:	030100f5 	movweq	r0, #4341	; 0x10f5
    78f8:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    78fc:	00010100 	andeq	r0, r1, r0, lsl #2
    7900:	00000205 	andeq	r0, r0, r5, lsl #4
    7904:	c0030000 	andgt	r0, r3, r0
    7908:	11030101 	tstne	r3, r1, lsl #2
    790c:	00030201 	andeq	r0, r3, r1, lsl #4
    7910:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7914:	00383002 	eorseq	r3, r8, r2
    7918:	028d0300 	addeq	r0, sp, #0, 6
    791c:	01120301 	tsteq	r2, r1, lsl #6
    7920:	01000402 	tsteq	r0, r2, lsl #8
    7924:	02050001 	andeq	r0, r5, #1
    7928:	00000000 	andeq	r0, r0, r0
    792c:	0102d803 	tsteq	r2, r3, lsl #16
    7930:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    7934:	01010003 	tsteq	r1, r3
    7938:	00020500 	andeq	r0, r2, r0, lsl #10
    793c:	03000000 	movweq	r0, #0
    7940:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    7944:	01000402 	tsteq	r0, r2, lsl #8
    7948:	0002d601 	andeq	sp, r2, r1, lsl #12
    794c:	7c000200 	sfmvc	f0, 4, [r0], {-0}
    7950:	02000001 	andeq	r0, r0, #1
    7954:	0d0efb01 	vstreq	d15, [lr, #-4]
    7958:	01010100 	mrseq	r0, (UNDEF: 17)
    795c:	00000001 	andeq	r0, r0, r1
    7960:	01000001 	tsteq	r0, r1
    7964:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7968:	2f2e2e2f 	svccs	0x002e2e2f
    796c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7974 <__exidx_end+0x205c>
    7970:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7974:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7978:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    797c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7980:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7984:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7988:	31303030 	teqcc	r0, r0, lsr r0
    798c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7990:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7994:	61746562 	cmnvs	r4, r2, ror #10
    7998:	63635c32 	cmnvs	r3, #12800	; 0x3200
    799c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    79a0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 77d8 <__exidx_end+0x1ec0>
    79a4:	6f635c73 	svcvs	0x00635c73
    79a8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    79ac:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    79b0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    79b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    79b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    79bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    79c0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    79c4:	3130322d 	teqcc	r0, sp, lsr #4
    79c8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    79cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    79d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    79d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    79d8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    79dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    79e0:	616d5c65 	cmnvs	sp, r5, ror #24
    79e4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    79e8:	3a630065 	bcc	18c7b84 <__ccfg+0x18a7bdc>
    79ec:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    79f0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    79f4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    79f8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    79fc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7a00:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7a04:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7a08:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7a0c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7a10:	6f6f745c 	svcvs	0x006f745c
    7a14:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7a18:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7a1c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7a20:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7a24:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7a28:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7a2c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7a30:	5f342d69 	svcpl	0x00342d69
    7a34:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7a38:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7a3c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7a40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7a44:	61652d65 	cmnvs	r5, r5, ror #26
    7a48:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7a4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7a50:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7a54:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7a58:	2f2e2e2f 	svccs	0x002e2e2f
    7a5c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7a60:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7a64:	6f000063 	svcvs	0x00000063
    7a68:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    7a6c:	00000100 	andeq	r0, r0, r0, lsl #2
    7a70:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7a74:	00010068 	andeq	r0, r1, r8, rrx
    7a78:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7a7c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7a80:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7a84:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7a88:	00020068 	andeq	r0, r2, r8, rrx
    7a8c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7a90:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7a94:	0300682e 	movweq	r6, #2094	; 0x82e
    7a98:	77680000 	strbvc	r0, [r8, -r0]!
    7a9c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7aa0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7aa4:	00000400 	andeq	r0, r0, r0, lsl #8
    7aa8:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    7aac:	00010068 	andeq	r0, r1, r8, rrx
    7ab0:	6e6f6100 	powvse	f6, f7, f0
    7ab4:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    7ab8:	0100682e 	tsteq	r0, lr, lsr #16
    7abc:	6f610000 	svcvs	0x00610000
    7ac0:	61625f6e 	cmnvs	r2, lr, ror #30
    7ac4:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    7ac8:	0100682e 	tsteq	r0, lr, lsr #16
    7acc:	00000000 	andeq	r0, r0, r0
    7ad0:	38380205 	ldmdacc	r8!, {r0, r2, r9}
    7ad4:	e5030000 	str	r0, [r3, #-0]
    7ad8:	03200100 	nopeq	{0}	; <UNPREDICTABLE>
    7adc:	7103200f 	tstvc	r3, pc
    7ae0:	200f0320 	andcs	r0, pc, r0, lsr #6
    7ae4:	9e090325 	cdpls	3, 0, cr0, cr9, cr5, {1}
    7ae8:	9e090330 	mcrls	3, 0, r0, cr9, cr0, {1}
    7aec:	0702a333 	smladxeq	r2, r3, r3, sl
    7af0:	00010100 	andeq	r0, r1, r0, lsl #2
    7af4:	38940205 	ldmcc	r4, {r0, r2, r9}
    7af8:	a0030000 	andge	r0, r3, r0
    7afc:	0c030101 	stfeqs	f0, [r3], {1}
    7b00:	0388222e 	orreq	r2, r8, #-536870910	; 0xe0000002
    7b04:	25263c7a 	strcs	r3, [r6, #-3194]!	; 0xfffff386
    7b08:	01000602 	tsteq	r0, r2, lsl #12
    7b0c:	02050001 	andeq	r0, r5, #1
    7b10:	00000000 	andeq	r0, r0, r0
    7b14:	0101c203 	tsteq	r1, r3, lsl #4
    7b18:	34912520 	ldrcc	r2, [r1], #1312	; 0x520
    7b1c:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    7b20:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    7b24:	01040200 	mrseq	r0, R12_usr
    7b28:	00207a03 	eoreq	r7, r0, r3, lsl #20
    7b2c:	50010402 	andpl	r0, r1, r2, lsl #8
    7b30:	1f302d30 	svcne	0x00302d30
    7b34:	1f3d4b24 	svcne	0x003d4b24
    7b38:	326c3d34 	rsbcc	r3, ip, #52, 26	; 0xd00
    7b3c:	03666d03 	cmneq	r6, #3, 26	; 0xc0
    7b40:	02263c10 	eoreq	r3, r6, #16, 24	; 0x1000
    7b44:	01010009 	tsteq	r1, r9
    7b48:	c0020500 	andgt	r0, r2, r0, lsl #10
    7b4c:	03000038 	movweq	r0, #56	; 0x38
    7b50:	210101f3 	strdcs	r0, [r1, -r3]
    7b54:	0007024b 	andeq	r0, r7, fp, asr #4
    7b58:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b5c:	0038d802 	eorseq	sp, r8, r2, lsl #16
    7b60:	02800300 	addeq	r0, r0, #0, 6
    7b64:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
    7b68:	04582203 	ldrbeq	r2, [r8], #-515	; 0xfffffdfd
    7b6c:	82620301 	rsbhi	r0, r2, #67108864	; 0x4000000
    7b70:	3c030204 	sfmcc	f0, 4, [r3], {4}
    7b74:	03010420 	movweq	r0, #5152	; 0x1420
    7b78:	1f3d4a4a 	svcne	0x003d4a4a
    7b7c:	221f3d21 	andscs	r3, pc, #2112	; 0x840
    7b80:	22301f30 	eorscs	r1, r0, #48, 30	; 0xc0
    7b84:	000c0223 	andeq	r0, ip, r3, lsr #4
    7b88:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b8c:	00393802 	eorseq	r3, r9, r2, lsl #16
    7b90:	02a30300 	adceq	r0, r3, #0, 6
    7b94:	044f2501 	strbeq	r2, [pc], #-1281	; 7b9c <__exidx_end+0x2284>
    7b98:	4a170302 	bmi	5c87a8 <__ccfg+0x5a8800>
    7b9c:	6d030104 	stfvss	f0, [r3, #-16]
    7ba0:	09024b4a 	stmdbeq	r2, {r1, r3, r6, r8, r9, fp, lr}
    7ba4:	00010100 	andeq	r0, r1, r0, lsl #2
    7ba8:	00000205 	andeq	r0, r0, r5, lsl #4
    7bac:	bc030000 	stclt	0, cr0, [r3], {-0}
    7bb0:	03220102 			; <UNDEFINED> instruction: 0x03220102
    7bb4:	69032017 	stmdbvs	r3, {r0, r1, r2, r4, sp}
    7bb8:	10032820 	andne	r2, r3, r0, lsr #16
    7bbc:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    7bc0:	032e1503 			; <UNDEFINED> instruction: 0x032e1503
    7bc4:	1303586d 	movwne	r5, #14445	; 0x386d
    7bc8:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    7bcc:	3f201103 	svccc	0x00201103
    7bd0:	01000602 	tsteq	r0, r2, lsl #12
    7bd4:	02050001 	andeq	r0, r5, #1
    7bd8:	00000000 	andeq	r0, r0, r0
    7bdc:	0102e303 	tsteq	r2, r3, lsl #6
    7be0:	4d012103 	stfmis	f2, [r1, #-12]
    7be4:	01000202 	tsteq	r0, r2, lsl #4
    7be8:	02050001 	andeq	r0, r5, #1
    7bec:	00000000 	andeq	r0, r0, r0
    7bf0:	01039003 	tsteq	r3, r3
    7bf4:	21201003 			; <UNDEFINED> instruction: 0x21201003
    7bf8:	0021211f 	eoreq	r2, r1, pc, lsl r1
    7bfc:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
    7c00:	01040200 	mrseq	r0, R12_usr
    7c04:	1d313d3d 	ldcne	13, cr3, [r1, #-244]!	; 0xffffff0c
    7c08:	00070234 	andeq	r0, r7, r4, lsr r2
    7c0c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c10:	00000002 	andeq	r0, r0, r2
    7c14:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
    7c18:	2c311701 	ldccs	7, cr1, [r1], #-4
    7c1c:	05023d33 	streq	r3, [r2, #-3379]	; 0xfffff2cd
    7c20:	a7010100 	strge	r0, [r1, -r0, lsl #2]
    7c24:	02000003 	andeq	r0, r0, #3
    7c28:	00026500 	andeq	r6, r2, r0, lsl #10
    7c2c:	fb010200 	blx	48436 <__ccfg+0x2848e>
    7c30:	01000d0e 	tsteq	r0, lr, lsl #26
    7c34:	00010101 	andeq	r0, r1, r1, lsl #2
    7c38:	00010000 	andeq	r0, r1, r0
    7c3c:	2f2e0100 	svccs	0x002e0100
    7c40:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7c44:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7c48:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7c4c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7c50:	63006269 	movwvs	r6, #617	; 0x269
    7c54:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7c58:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7c5c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7c60:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7c64:	5f393130 	svcpl	0x00393130
    7c68:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7c6c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7c70:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7c74:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7c78:	6f745c36 	svcvs	0x00745c36
    7c7c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7c80:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7c84:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7c88:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7c8c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7c90:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7c94:	61652d65 	cmnvs	r5, r5, ror #26
    7c98:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7c9c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7ca0:	71353130 	teqvc	r5, r0, lsr r1
    7ca4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7ca8:	6f6e2d6d 	svcvs	0x006e2d6d
    7cac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7cb0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7cb4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7cb8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7cbc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7cc0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    7cc4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7cc8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7ccc:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7cd0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7cd4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7cd8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7cdc:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7ce0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7ce4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7ce8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7cec:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7cf0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7b88 <__exidx_end+0x2270>
    7cf4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7cf8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7cfc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7d00:	6f6e2d6d 	svcvs	0x006e2d6d
    7d04:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d08:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7d0c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7d10:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7d14:	615c3371 	cmpvs	ip, r1, ror r3
    7d18:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7d1c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7d20:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d24:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7d28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7d2c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7d30:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7d34:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7d38:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7d3c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7d40:	31303030 	teqcc	r0, r0, lsr r0
    7d44:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7d48:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7d4c:	61746562 	cmnvs	r4, r2, ror #10
    7d50:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7d54:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7d58:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7b90 <__exidx_end+0x2278>
    7d5c:	6f635c73 	svcvs	0x00635c73
    7d60:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7d64:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7d68:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7d6c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7d70:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7d74:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d78:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7d7c:	3130322d 	teqcc	r0, sp, lsr #4
    7d80:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7d84:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
    7d88:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    7d8c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7d90:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7d94:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7d98:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    7d9c:	5c332e39 	ldcpl	14, cr2, [r3], #-228	; 0xffffff1c
    7da0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7da4:	00656475 	rsbeq	r6, r5, r5, ror r4
    7da8:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7dac:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7db0:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7db4:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7db8:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7dbc:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7dc0:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7dc4:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7dc8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7dcc:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7dd0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7dd4:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7c6c <__exidx_end+0x2354>
    7dd8:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7ddc:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7de0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7de4:	6f6e2d6d 	svcvs	0x006e2d6d
    7de8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7dec:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7df0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7df4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7df8:	615c3371 	cmpvs	ip, r1, ror r3
    7dfc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7e00:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7e04:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7e08:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7e0c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7e10:	66720000 	ldrbtvs	r0, [r2], -r0
    7e14:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7e18:	72000001 	andvc	r0, r0, #1
    7e1c:	682e6366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sp, lr}
    7e20:	00000100 	andeq	r0, r0, r0, lsl #2
    7e24:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7e28:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7e2c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7e30:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7e34:	00000200 	andeq	r0, r0, r0, lsl #4
    7e38:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7e3c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7e40:	00030068 	andeq	r0, r3, r8, rrx
    7e44:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7e48:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7e4c:	00040068 	andeq	r0, r4, r8, rrx
    7e50:	5f667200 	svcpl	0x00667200
    7e54:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    7e58:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    7e5c:	00010068 	andeq	r0, r1, r8, rrx
    7e60:	5f667200 	svcpl	0x00667200
    7e64:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    7e68:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    7e6c:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7e70:	00000100 	andeq	r0, r0, r0, lsl #2
    7e74:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7e78:	5f706f72 	svcpl	0x00706f72
    7e7c:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7e80:	00010068 	andeq	r0, r1, r8, rrx
    7e84:	72747300 	rsbsvc	r7, r4, #0, 6
    7e88:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    7e8c:	00050068 	andeq	r0, r5, r8, rrx
    7e90:	05000000 	streq	r0, [r0, #-0]
    7e94:	00000002 	andeq	r0, r0, r2
    7e98:	00e80300 	rsceq	r0, r8, r0, lsl #6
    7e9c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    7ea0:	00310104 	eorseq	r0, r1, r4, lsl #2
    7ea4:	2f010402 	svccs	0x00010402
    7ea8:	0003023f 	andeq	r0, r3, pc, lsr r2
    7eac:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7eb0:	00396c02 	eorseq	r6, r9, r2, lsl #24
    7eb4:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    7eb8:	04020001 	streq	r0, [r2], #-1
    7ebc:	02041301 	andeq	r1, r4, #67108864	; 0x4000000
    7ec0:	4a01c703 	bmi	79ad4 <__ccfg+0x59b2c>
    7ec4:	bd030104 	stflts	f0, [r3, #-16]
    7ec8:	02002e7e 	andeq	r2, r0, #2016	; 0x7e0
    7ecc:	04220104 	strteq	r0, [r2], #-260	; 0xfffffefc
    7ed0:	01c10302 	biceq	r0, r1, r2, lsl #6
    7ed4:	0301043c 	movweq	r0, #5180	; 0x143c
    7ed8:	2f3c7ec2 	svccs	0x003c7ec2
    7edc:	01000502 	tsteq	r0, r2, lsl #10
    7ee0:	02050001 	andeq	r0, r5, #1
    7ee4:	00003994 	muleq	r0, r4, r9
    7ee8:	01018f03 	tsteq	r1, r3, lsl #30
    7eec:	251d2314 	ldrcs	r2, [sp, #-788]	; 0xfffffcec
    7ef0:	2f3d761b 	svccs	0x003d761b
    7ef4:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    7ef8:	2121212d 			; <UNDEFINED> instruction: 0x2121212d
    7efc:	01000c02 	tsteq	r0, r2, lsl #24
    7f00:	02050001 	andeq	r0, r5, #1
    7f04:	000039e0 	andeq	r3, r0, r0, ror #19
    7f08:	0101a403 	tsteq	r1, r3, lsl #8
    7f0c:	1c2f9615 	stcne	6, cr9, [pc], #-84	; 7ec0 <__exidx_end+0x25a8>
    7f10:	21252521 			; <UNDEFINED> instruction: 0x21252521
    7f14:	0a032f1f 	beq	d3b98 <__ccfg+0xb3bf0>
    7f18:	2f3d3d66 	svccs	0x003d3d66
    7f1c:	03587303 	cmpeq	r8, #201326592	; 0xc000000
    7f20:	3d3d6618 	ldccc	6, cr6, [sp, #-96]!	; 0xffffffa0
    7f24:	5868032f 	stmdapl	r8!, {r0, r1, r2, r3, r5, r8, r9}^
    7f28:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    7f2c:	3d3d580b 	ldccc	8, cr5, [sp, #-44]!	; 0xffffffd4
    7f30:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    7f34:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7e48 <__exidx_end+0x2530>
    7f38:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7e4c <__exidx_end+0x2534>
    7f3c:	492f3e3d 	stmdbmi	pc!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    7f40:	01002f02 	tsteq	r0, r2, lsl #30
    7f44:	02050001 	andeq	r0, r5, #1
    7f48:	00003b30 	andeq	r3, r0, r0, lsr fp
    7f4c:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    7f50:	03010903 	movweq	r0, #6403	; 0x1903
    7f54:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    7f58:	2121af20 			; <UNDEFINED> instruction: 0x2121af20
    7f5c:	22221f23 	eorcs	r1, r2, #35, 30	; 0x8c
    7f60:	0b03262f 	bleq	d1824 <__ccfg+0xb187c>
    7f64:	5a2f2d4a 	bpl	bd3494 <__ccfg+0xbb34ec>
    7f68:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    7f6c:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    7f70:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    7f74:	6f03f214 	svcvs	0x0003f214
    7f78:	4a23032e 	bmi	8c8c38 <__ccfg+0x8a8c90>
    7f7c:	4c3c6203 	lfmmi	f6, 4, [ip], #-12
    7f80:	32363222 	eorscc	r3, r6, #536870914	; 0x20000002
    7f84:	0350224c 	cmpeq	r0, #76, 4	; 0xc0000004
    7f88:	595eac09 	ldmdbpl	lr, {r0, r3, sl, fp, sp, pc}^
    7f8c:	62033626 	andvs	r3, r3, #39845888	; 0x2600000
    7f90:	00160266 	andseq	r0, r6, r6, ror #4
    7f94:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7f98:	003c4802 	eorseq	r4, ip, r2, lsl #16
    7f9c:	02f70300 	rscseq	r0, r7, #0, 6
    7fa0:	02ad2f01 	adceq	r2, sp, #1, 30
    7fa4:	01010003 	tsteq	r1, r3
    7fa8:	00020500 	andeq	r0, r2, r0, lsl #10
    7fac:	03000000 	movweq	r0, #0
    7fb0:	24010382 	strcs	r0, [r1], #-898	; 0xfffffc7e
    7fb4:	002a025d 	eoreq	r0, sl, sp, asr r2
    7fb8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7fbc:	003c6802 	eorseq	r6, ip, r2, lsl #16
    7fc0:	03960300 	orrseq	r0, r6, #0, 6
    7fc4:	3e232101 	sufccs	f2, f3, f1
    7fc8:	00060241 	andeq	r0, r6, r1, asr #4
    7fcc:	01e90101 	mvneq	r0, r1, lsl #2
    7fd0:	00020000 	andeq	r0, r2, r0
    7fd4:	00000167 	andeq	r0, r0, r7, ror #2
    7fd8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7fdc:	0101000d 	tsteq	r1, sp
    7fe0:	00000101 	andeq	r0, r0, r1, lsl #2
    7fe4:	00000100 	andeq	r0, r0, r0, lsl #2
    7fe8:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7fec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7ff0:	2f2e2e2f 	svccs	0x002e2e2f
    7ff4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7ff8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7ffc:	3a630062 	bcc	18c818c <__ccfg+0x18a81e4>
    8000:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8004:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8008:	302e322e 	eorcc	r3, lr, lr, lsr #4
    800c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8010:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8014:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8018:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    801c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8020:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8024:	6f6f745c 	svcvs	0x006f745c
    8028:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    802c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8030:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8034:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8038:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    803c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8040:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8044:	5f342d69 	svcpl	0x00342d69
    8048:	30322d39 	eorscc	r2, r2, r9, lsr sp
    804c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8050:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8054:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8058:	61652d65 	cmnvs	r5, r5, ror #26
    805c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8060:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8064:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8068:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    806c:	6300656e 	movwvs	r6, #1390	; 0x56e
    8070:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8074:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8078:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    807c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8080:	5f393130 	svcpl	0x00393130
    8084:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8088:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    808c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8090:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8094:	6f745c36 	svcvs	0x00745c36
    8098:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    809c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    80a0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    80a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    80a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    80ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    80b0:	61652d65 	cmnvs	r5, r5, ror #26
    80b4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    80b8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    80bc:	71353130 	teqvc	r5, r0, lsr r1
    80c0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    80c4:	6f6e2d6d 	svcvs	0x006e2d6d
    80c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    80cc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    80d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    80d4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    80d8:	00737973 	rsbseq	r7, r3, r3, ror r9
    80dc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    80e0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    80e4:	00000100 	andeq	r0, r0, r0, lsl #2
    80e8:	5f6e6f61 	svcpl	0x006e6f61
    80ec:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    80f0:	00010068 	andeq	r0, r1, r8, rrx
    80f4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    80f8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    80fc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8100:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8104:	00020068 	andeq	r0, r2, r8, rrx
    8108:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    810c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8110:	0300682e 	movweq	r6, #2094	; 0x82e
    8114:	65730000 	ldrbvs	r0, [r3, #-0]!
    8118:	5f707574 	svcpl	0x00707574
    811c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8120:	00010068 	andeq	r0, r1, r8, rrx
    8124:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8128:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    812c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    8130:	73000001 	movwvc	r0, #1
    8134:	70757465 	rsbsvc	r7, r5, r5, ror #8
    8138:	0100682e 	tsteq	r0, lr, lsr #16
    813c:	00000000 	andeq	r0, r0, r0
    8140:	3c840205 	sfmcc	f0, 4, [r4], {5}
    8144:	8d030000 	stchi	0, cr0, [r3, #-0]
    8148:	03200102 			; <UNDEFINED> instruction: 0x03200102
    814c:	0200200a 	andeq	r2, r0, #10
    8150:	4f410104 	svcmi	0x00410104
    8154:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    8158:	0302041f 	movweq	r0, #9247	; 0x241f
    815c:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    8160:	7c860301 	stcvc	3, cr0, [r6], {1}
    8164:	0342363c 	movteq	r3, #9788	; 0x263c
    8168:	3d2d4a09 	vpushcc	{s8-s16}
    816c:	2f1f2f2f 	svccs	0x001f2f2f
    8170:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    8174:	0a032548 	beq	d169c <__ccfg+0xb16f4>
    8178:	3f5d4158 	svccc	0x005d4158
    817c:	01001e02 	tsteq	r0, r2, lsl #28
    8180:	02050001 	andeq	r0, r5, #1
    8184:	00003d58 	andeq	r3, r0, r8, asr sp
    8188:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    818c:	33433028 	movtcc	r3, #12328	; 0x3028
    8190:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    8194:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    8198:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    819c:	03207903 			; <UNDEFINED> instruction: 0x03207903
    81a0:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    81a4:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    81a8:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    81ac:	4b69242d 	blmi	1a51268 <__ccfg+0x1a312c0>
    81b0:	01040200 	mrseq	r0, R12_usr
    81b4:	13024d27 	movwne	r4, #11559	; 0x2d27
    81b8:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    81bc:	02000004 	andeq	r0, r0, #4
    81c0:	00016500 	andeq	r6, r1, r0, lsl #10
    81c4:	fb010200 	blx	489ce <__ccfg+0x28a26>
    81c8:	01000d0e 	tsteq	r0, lr, lsl #26
    81cc:	00010101 	andeq	r0, r1, r1, lsl #2
    81d0:	00010000 	andeq	r0, r1, r0
    81d4:	2f2e0100 	svccs	0x002e0100
    81d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    81dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    81e0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    81e4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    81e8:	63006269 	movwvs	r6, #617	; 0x269
    81ec:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    81f0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    81f4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    81f8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    81fc:	5f393130 	svcpl	0x00393130
    8200:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8204:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8208:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    820c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8210:	6f745c36 	svcvs	0x00745c36
    8214:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8218:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    821c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8220:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8224:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8228:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    822c:	61652d65 	cmnvs	r5, r5, ror #26
    8230:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8234:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8238:	71353130 	teqvc	r5, r0, lsr r1
    823c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8240:	6f6e2d6d 	svcvs	0x006e2d6d
    8244:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8248:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    824c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8250:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8254:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8258:	00656e69 	rsbeq	r6, r5, r9, ror #28
    825c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8260:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8264:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8268:	302e302e 	eorcc	r3, lr, lr, lsr #32
    826c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8270:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8274:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8278:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    827c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8280:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8284:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8288:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8120 <__exidx_end+0x2808>
    828c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8290:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8294:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8298:	6f6e2d6d 	svcvs	0x006e2d6d
    829c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    82a0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    82a4:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    82a8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    82ac:	615c3371 	cmpvs	ip, r1, ror r3
    82b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    82b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    82b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    82bc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    82c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    82c4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    82c8:	65730000 	ldrbvs	r0, [r3, #-0]!
    82cc:	5f707574 	svcpl	0x00707574
    82d0:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    82d4:	00010063 	andeq	r0, r1, r3, rrx
    82d8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    82dc:	725f7075 	subsvc	r7, pc, #117	; 0x75
    82e0:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    82e4:	00000100 	andeq	r0, r0, r0, lsl #2
    82e8:	5f737973 	svcpl	0x00737973
    82ec:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    82f0:	0100682e 	tsteq	r0, lr, lsr #16
    82f4:	645f0000 	ldrbvs	r0, [pc], #-0	; 82fc <__exidx_end+0x29e4>
    82f8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    82fc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8304 <__exidx_end+0x29ec>
    8300:	73657079 	cmnvc	r5, #121	; 0x79
    8304:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8308:	735f0000 	cmpvc	pc, #0
    830c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8310:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8314:	64000003 	strvs	r0, [r0], #-3
    8318:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    831c:	00000100 	andeq	r0, r0, r0, lsl #2
    8320:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    8324:	00010068 	andeq	r0, r1, r8, rrx
    8328:	05000000 	streq	r0, [r0, #-0]
    832c:	003dfc02 	eorseq	pc, sp, r2, lsl #24
    8330:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    8334:	200b0301 	andcs	r0, fp, r1, lsl #6
    8338:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    833c:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    8340:	0302042e 	movweq	r0, #9262	; 0x242e
    8344:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    8348:	7fa80301 	svcvc	0x00a80301
    834c:	03020420 	movweq	r0, #9248	; 0x2420
    8350:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    8354:	03010421 	movweq	r0, #5153	; 0x1421
    8358:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    835c:	652f214d 	strvs	r2, [pc, #-333]!	; 8217 <__exidx_end+0x28ff>
    8360:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    8364:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    8368:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    836c:	10033c73 	andne	r3, r3, r3, ror ip
    8370:	21212120 			; <UNDEFINED> instruction: 0x21212120
    8374:	000d0221 	andeq	r0, sp, r1, lsr #4
    8378:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    837c:	003e7802 	eorseq	r7, lr, r2, lsl #16
    8380:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    8384:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    8388:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    838c:	7a03200e 	bvc	d03cc <__ccfg+0xb0424>
    8390:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    8394:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    8398:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    839c:	01042130 	tsteq	r4, r0, lsr r1
    83a0:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    83a4:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    83a8:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    83ac:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    83b0:	0015022d 	andseq	r0, r5, sp, lsr #4
    83b4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    83b8:	003f2402 	eorseq	r2, pc, r2, lsl #8
    83bc:	049f0300 	ldreq	r0, [pc], #768	; 83c4 <__exidx_end+0x2aac>
    83c0:	010c0301 	tsteq	ip, r1, lsl #6
    83c4:	03200903 			; <UNDEFINED> instruction: 0x03200903
    83c8:	31212077 			; <UNDEFINED> instruction: 0x31212077
    83cc:	30302733 	eorscc	r2, r0, r3, lsr r7
    83d0:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    83d4:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    83d8:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    83dc:	20760327 	rsbscs	r0, r6, r7, lsr #6
    83e0:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    83e4:	01010006 	tsteq	r1, r6
    83e8:	80020500 	andhi	r0, r2, r0, lsl #10
    83ec:	0300003f 	movweq	r0, #63	; 0x3f
    83f0:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    83f4:	20790334 	rsbscs	r0, r9, r4, lsr r3
    83f8:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    83fc:	00010100 	andeq	r0, r1, r0, lsl #2
    8400:	00000205 	andeq	r0, r0, r5, lsl #4
    8404:	81030000 	mrshi	r0, (UNDEF: 3)
    8408:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    840c:	01000602 	tsteq	r0, r2, lsl #12
    8410:	02050001 	andeq	r0, r5, #1
    8414:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    8418:	01059503 	tsteq	r5, r3, lsl #10
    841c:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    8420:	01000602 	tsteq	r0, r2, lsl #12
    8424:	02050001 	andeq	r0, r5, #1
    8428:	00003fa8 	andeq	r3, r0, r8, lsr #31
    842c:	0105b803 	tsteq	r5, r3, lsl #16
    8430:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    8434:	01000802 	tsteq	r0, r2, lsl #16
    8438:	02050001 	andeq	r0, r5, #1
    843c:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
    8440:	0105db03 	tsteq	r5, r3, lsl #22
    8444:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    8448:	77032009 	strvc	r2, [r3, -r9]
    844c:	20090320 	andcs	r0, r9, r0, lsr #6
    8450:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    8454:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    8458:	27473230 	smlaldxcs	r3, r7, r0, r2
    845c:	03473230 	movteq	r3, #29232	; 0x7230
    8460:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    8464:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    8468:	00010100 	andeq	r0, r1, r0, lsl #2
    846c:	40200205 	eormi	r0, r0, r5, lsl #4
    8470:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    8474:	21150106 	tstcs	r5, r6, lsl #2
    8478:	20090355 	andcs	r0, r9, r5, asr r3
    847c:	01000302 	tsteq	r0, r2, lsl #6
    8480:	02050001 	andeq	r0, r5, #1
    8484:	00004034 	andeq	r4, r0, r4, lsr r0
    8488:	0106bc03 	tsteq	r6, r3, lsl #24
    848c:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    8490:	03022009 	movweq	r2, #8201	; 0x2009
    8494:	00010100 	andeq	r0, r1, r0, lsl #2
    8498:	40480205 	submi	r0, r8, r5, lsl #4
    849c:	cf030000 	svcgt	0x00030000
    84a0:	21150106 	tstcs	r5, r6, lsl #2
    84a4:	20090355 	andcs	r0, r9, r5, asr r3
    84a8:	01000302 	tsteq	r0, r2, lsl #6
    84ac:	02050001 	andeq	r0, r5, #1
    84b0:	0000405c 	andeq	r4, r0, ip, asr r0
    84b4:	0106e203 	tsteq	r6, r3, lsl #4
    84b8:	2f432116 	svccs	0x00432116
    84bc:	40207a03 	eormi	r7, r0, r3, lsl #20
    84c0:	71032c35 	tstvc	r3, r5, lsr ip
    84c4:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    84c8:	01000302 	tsteq	r0, r2, lsl #6
    84cc:	02050001 	andeq	r0, r5, #1
    84d0:	00004084 	andeq	r4, r0, r4, lsl #1
    84d4:	01078203 	tsteq	r7, r3, lsl #4
    84d8:	06023316 			; <UNDEFINED> instruction: 0x06023316
    84dc:	00010100 	andeq	r0, r1, r0, lsl #2
    84e0:	40940205 	addsmi	r0, r4, r5, lsl #4
    84e4:	94030000 	strls	r0, [r3], #-0
    84e8:	21160107 	tstcs	r6, r7, lsl #2
    84ec:	33342943 	teqcc	r4, #1097728	; 0x10c000
    84f0:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    84f4:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    84f8:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    84fc:	01010005 	tsteq	r1, r5
    8500:	c0020500 	andgt	r0, r2, r0, lsl #10
    8504:	03000040 	movweq	r0, #64	; 0x40
    8508:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    850c:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    8510:	00030220 	andeq	r0, r3, r0, lsr #4
    8514:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8518:	0040d402 	subeq	sp, r0, r2, lsl #8
    851c:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    8520:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    8524:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    8528:	01010003 	tsteq	r1, r3
    852c:	e8020500 	stmda	r2, {r8, sl}
    8530:	03000040 	movweq	r0, #64	; 0x40
    8534:	200102a7 	andcs	r0, r1, r7, lsr #5
    8538:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    853c:	2f4e211f 	svccs	0x004e211f
    8540:	ac02d103 	stfged	f5, [r2], {3}
    8544:	207db903 	rsbscs	fp, sp, r3, lsl #18
    8548:	2002c703 	andcs	ip, r2, r3, lsl #14
    854c:	207db903 	rsbscs	fp, sp, r3, lsl #18
    8550:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    8554:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    8558:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    855c:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    8560:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    8564:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    8568:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    856c:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    8570:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    8574:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    8578:	00010100 	andeq	r0, r1, r0, lsl #2
    857c:	41f80205 	mvnsmi	r0, r5, lsl #4
    8580:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    8584:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    8588:	0e030104 	adfeqs	f0, f3, f4
    858c:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    8590:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    8594:	207a034b 	rsbscs	r0, sl, fp, asr #6
    8598:	02004134 	andeq	r4, r0, #52, 2
    859c:	5b3d0104 	blpl	f489b4 <__ccfg+0xf28a0c>
    85a0:	000b0231 	andeq	r0, fp, r1, lsr r2
    85a4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    85a8:	00425c02 	subeq	r5, r2, r2, lsl #24
    85ac:	08930300 	ldmeq	r3, {r8, r9}
    85b0:	01090301 	tsteq	r9, r1, lsl #6
    85b4:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    85b8:	01040200 	mrseq	r0, R12_usr
    85bc:	07024b3d 	smladxeq	r2, sp, fp, r4
    85c0:	00010100 	andeq	r0, r1, r0, lsl #2
    85c4:	42840205 	addmi	r0, r4, #1342177280	; 0x50000000
    85c8:	9b030000 	blls	c85d0 <__ccfg+0xa8628>
    85cc:	09030103 	stmdbeq	r3, {r0, r1, r8}
    85d0:	3c770301 	ldclcc	3, cr0, [r7], #-4
    85d4:	20090320 	andcs	r0, r9, r0, lsr #6
    85d8:	03313052 	teqeq	r1, #82	; 0x52
    85dc:	2b234a0a 	blcs	8dae0c <__ccfg+0x8bae64>
    85e0:	2f24484c 	svccs	0x0024484c
    85e4:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    85e8:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    85ec:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 84ac <__exidx_end+0x2b94>
    85f0:	4b845d2f 	blmi	fe11fab4 <_estack+0xde11aab4>
    85f4:	003d243d 	eorseq	r2, sp, sp, lsr r4
    85f8:	4b010402 	blmi	49608 <__ccfg+0x29660>
    85fc:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    8600:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    8604:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    8608:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    860c:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    8610:	001f024a 	andseq	r0, pc, sl, asr #4
    8614:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    8618:	00020000 	andeq	r0, r2, r0
    861c:	000001a8 	andeq	r0, r0, r8, lsr #3
    8620:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8624:	0101000d 	tsteq	r1, sp
    8628:	00000101 	andeq	r0, r0, r1, lsl #2
    862c:	00000100 	andeq	r0, r0, r0, lsl #2
    8630:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8634:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8638:	2f2e2e2f 	svccs	0x002e2e2f
    863c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8640:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8644:	3a630062 	bcc	18c87d4 <__ccfg+0x18a882c>
    8648:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    864c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8650:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8654:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8658:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    865c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8660:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8664:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8668:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    866c:	6f6f745c 	svcvs	0x006f745c
    8670:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8674:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8678:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    867c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8680:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8684:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8688:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    868c:	5f342d69 	svcpl	0x00342d69
    8690:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8694:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8698:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    869c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    86a0:	61652d65 	cmnvs	r5, r5, ror #26
    86a4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    86a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    86ac:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    86b0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    86b4:	6300656e 	movwvs	r6, #1390	; 0x56e
    86b8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    86bc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    86c0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    86c4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    86c8:	5f393130 	svcpl	0x00393130
    86cc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    86d0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    86d4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    86d8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    86dc:	6f745c36 	svcvs	0x00745c36
    86e0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    86e4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    86e8:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    86ec:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    86f0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    86f4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    86f8:	61652d65 	cmnvs	r5, r5, ror #26
    86fc:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8700:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8704:	71353130 	teqvc	r5, r0, lsr r1
    8708:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    870c:	6f6e2d6d 	svcvs	0x006e2d6d
    8710:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8714:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8718:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    871c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8720:	00737973 	rsbseq	r7, r3, r3, ror r9
    8724:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8728:	2f2e2e2f 	svccs	0x002e2e2f
    872c:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    8730:	0000636e 	andeq	r6, r0, lr, ror #6
    8734:	5f737973 	svcpl	0x00737973
    8738:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    873c:	0100632e 	tsteq	r0, lr, lsr #6
    8740:	6f610000 	svcvs	0x00610000
    8744:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    8748:	00682e63 	rsbeq	r2, r8, r3, ror #28
    874c:	6f000001 	svcvs	0x00000001
    8750:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    8754:	00000100 	andeq	r0, r0, r0, lsl #2
    8758:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    875c:	0100682e 	tsteq	r0, lr, lsr #16
    8760:	65730000 	ldrbvs	r0, [r3, #-0]!
    8764:	5f707574 	svcpl	0x00707574
    8768:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    876c:	00010068 	andeq	r0, r1, r8, rrx
    8770:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8774:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8778:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    877c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8780:	00020068 	andeq	r0, r2, r8, rrx
    8784:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8788:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    878c:	0300682e 	movweq	r6, #2094	; 0x82e
    8790:	77680000 	strbvc	r0, [r8, -r0]!
    8794:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8798:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    879c:	00000400 	andeq	r0, r0, r0, lsl #8
    87a0:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    87a4:	00010068 	andeq	r0, r1, r8, rrx
    87a8:	73797300 	cmnvc	r9, #0, 6
    87ac:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    87b0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    87b4:	61000001 	tstvs	r0, r1
    87b8:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    87bc:	6f6d7461 	svcvs	0x006d7461
    87c0:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    87c4:	00000001 	andeq	r0, r0, r1
    87c8:	00020500 	andeq	r0, r2, r0, lsl #10
    87cc:	03000000 	movweq	r0, #0
    87d0:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    87d4:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    87d8:	03010401 	movweq	r0, #5121	; 0x1401
    87dc:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    87e0:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    87e4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    87e8:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    87ec:	00010420 	andeq	r0, r1, r0, lsr #8
    87f0:	03010402 	movweq	r0, #5122	; 0x1402
    87f4:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    87f8:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    87fc:	89670104 	stmdbhi	r7!, {r2, r8}^
    8800:	4a09034b 	bmi	249534 <__ccfg+0x22958c>
    8804:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    8808:	01045801 	tsteq	r4, r1, lsl #16
    880c:	4a7ee403 	bmi	1fc1820 <__ccfg+0x1fa1878>
    8810:	01040200 	mrseq	r0, R12_usr
    8814:	0304045d 	movweq	r0, #17501	; 0x445d
    8818:	00740381 	rsbseq	r0, r4, r1, lsl #7
    881c:	03010402 	movweq	r0, #5122	; 0x1402
    8820:	01043c14 	tsteq	r4, r4, lsl ip
    8824:	01040200 	mrseq	r0, R12_usr
    8828:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    882c:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    8830:	1c322e03 	ldcne	14, cr2, [r2], #-12
    8834:	20420324 	subcs	r0, r2, r4, lsr #6
    8838:	01040200 	mrseq	r0, R12_usr
    883c:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    8840:	04020001 	streq	r0, [r2], #-1
    8844:	7cf70301 	ldclvc	3, cr0, [r7], #4
    8848:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    884c:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    8850:	1b24384b 	blne	916984 <__ccfg+0x8f69dc>
    8854:	e7030404 	str	r0, [r3, -r4, lsl #8]
    8858:	02002e02 	andeq	r2, r0, #2, 28
    885c:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    8860:	0001043c 	andeq	r0, r1, ip, lsr r4
    8864:	03010402 	movweq	r0, #5122	; 0x1402
    8868:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    886c:	01001702 	tsteq	r0, r2, lsl #14
    8870:	02050001 	andeq	r0, r5, #1
    8874:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    8878:	0101da03 	tsteq	r1, r3, lsl #20
    887c:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    8880:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    8884:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    8888:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    888c:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    8890:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    8894:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    8898:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    889c:	1b32432e 	blne	c9955c <__ccfg+0xc795b4>
    88a0:	03050433 	movweq	r0, #21555	; 0x5433
    88a4:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    88a8:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    88ac:	51030504 	tstpl	r3, r4, lsl #10
    88b0:	0301042e 	movweq	r0, #5166	; 0x142e
    88b4:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    88b8:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    88bc:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    88c0:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    88c4:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    88c8:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    88cc:	58060104 	stmdapl	r6, {r2, r8}
    88d0:	4a0f0306 	bmi	3c94f0 <__ccfg+0x3a9548>
    88d4:	2a2f3fca 	bcs	bd8804 <__ccfg+0xbb885c>
    88d8:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    88dc:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    88e0:	213e3d3e 	teqcs	lr, lr, lsr sp
    88e4:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    88e8:	31202603 			; <UNDEFINED> instruction: 0x31202603
    88ec:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    88f0:	0b03213e 	bleq	d0df0 <__ccfg+0xb0e48>
    88f4:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    88f8:	2009033c 	andcs	r0, r9, ip, lsr r3
    88fc:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    8900:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    8904:	0f032071 	svceq	0x00032071
    8908:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    890c:	21226521 			; <UNDEFINED> instruction: 0x21226521
    8910:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    8914:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    8918:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    891c:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    8920:	01002102 	tsteq	r0, r2, lsl #2
    8924:	02050001 	andeq	r0, r5, #1
    8928:	000045f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    892c:	0103b603 	tsteq	r3, r3, lsl #12
    8930:	2f224027 	svccs	0x00224027
    8934:	404e24a2 	submi	r2, lr, r2, lsr #9
    8938:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    893c:	01010009 	tsteq	r1, r9
    8940:	00020500 	andeq	r0, r2, r0, lsl #10
    8944:	03000000 	movweq	r0, #0
    8948:	030103e5 	movweq	r0, #5093	; 0x13e5
    894c:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    8950:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    8954:	211f322d 	tstcs	pc, sp, lsr #4
    8958:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    895c:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    8960:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    8964:	0c023e1e 	stceq	14, cr3, [r2], {30}
    8968:	00010100 	andeq	r0, r1, r0, lsl #2
    896c:	46540205 	ldrbmi	r0, [r4], -r5, lsl #4
    8970:	a6030000 	strge	r0, [r3], -r0
    8974:	3f130104 	svccc	0x00130104
    8978:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    897c:	2b010100 	blcs	48d84 <__ccfg+0x28ddc>
    8980:	02000002 	andeq	r0, r0, #2
    8984:	00014300 	andeq	r4, r1, r0, lsl #6
    8988:	fb010200 	blx	49192 <__ccfg+0x291ea>
    898c:	01000d0e 	tsteq	r0, lr, lsl #26
    8990:	00010101 	andeq	r0, r1, r1, lsl #2
    8994:	00010000 	andeq	r0, r1, r0
    8998:	2f2e0100 	svccs	0x002e0100
    899c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89a4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    89a8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    89ac:	63006269 	movwvs	r6, #617	; 0x269
    89b0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    89b4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    89b8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    89bc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    89c0:	5f393130 	svcpl	0x00393130
    89c4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    89c8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    89cc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    89d0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    89d4:	6f745c36 	svcvs	0x00745c36
    89d8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    89dc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    89e0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    89e4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    89e8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    89ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    89f0:	61652d65 	cmnvs	r5, r5, ror #26
    89f4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    89f8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    89fc:	71353130 	teqvc	r5, r0, lsr r1
    8a00:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8a04:	6f6e2d6d 	svcvs	0x006e2d6d
    8a08:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8a0c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8a10:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8a14:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8a18:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8a1c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8a20:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8a24:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8a28:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8a2c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8a30:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8a34:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8a38:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8a3c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8a40:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8a44:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8a48:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8a4c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 88e4 <__exidx_end+0x2fcc>
    8a50:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8a54:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8a58:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8a5c:	6f6e2d6d 	svcvs	0x006e2d6d
    8a60:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8a64:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8a68:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8a6c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8a70:	615c3371 	cmpvs	ip, r1, ror r3
    8a74:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8a78:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8a7c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8a80:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8a84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8a88:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8a8c:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    8a90:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    8a94:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    8a98:	00000100 	andeq	r0, r0, r0, lsl #2
    8a9c:	70696863 	rsbvc	r6, r9, r3, ror #16
    8aa0:	6f666e69 	svcvs	0x00666e69
    8aa4:	0100682e 	tsteq	r0, lr, lsr #16
    8aa8:	645f0000 	ldrbvs	r0, [pc], #-0	; 8ab0 <__exidx_end+0x3198>
    8aac:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8ab0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8ab8 <__exidx_end+0x31a0>
    8ab4:	73657079 	cmnvc	r5, #121	; 0x79
    8ab8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8abc:	735f0000 	cmpvc	pc, #0
    8ac0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8ac4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8ac8:	00000003 	andeq	r0, r0, r3
    8acc:	00020500 	andeq	r0, r2, r0, lsl #10
    8ad0:	03000000 	movweq	r0, #0
    8ad4:	130100c4 	movwne	r0, #4292	; 0x10c4
    8ad8:	0006022f 	andeq	r0, r6, pc, lsr #4
    8adc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8ae0:	00000002 	andeq	r0, r0, r2
    8ae4:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    8ae8:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    8aec:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    8af0:	00010100 	andeq	r0, r1, r0, lsl #2
    8af4:	466c0205 	strbtmi	r0, [ip], -r5, lsl #4
    8af8:	e6030000 	str	r0, [r3], -r0
    8afc:	2a1a0100 	bcs	688f04 <__ccfg+0x668f5c>
    8b00:	0302044e 	movweq	r0, #9294	; 0x244e
    8b04:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    8b08:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    8b0c:	4b4c232e 	blmi	13117cc <__ccfg+0x12f1824>
    8b10:	242f724b 	strtcs	r7, [pc], #-587	; 8b18 <__exidx_end+0x3200>
    8b14:	01000502 	tsteq	r0, r2, lsl #10
    8b18:	02050001 	andeq	r0, r5, #1
    8b1c:	00000000 	andeq	r0, r0, r0
    8b20:	01018303 	tsteq	r1, r3, lsl #6
    8b24:	b0030204 	andlt	r0, r3, r4, lsl #4
    8b28:	01042001 	tsteq	r4, r1
    8b2c:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    8b30:	03233139 			; <UNDEFINED> instruction: 0x03233139
    8b34:	0a033c78 	beq	d7d1c <__ccfg+0xb7d74>
    8b38:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    8b3c:	00050225 	andeq	r0, r5, r5, lsr #4
    8b40:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8b44:	0046b802 	subeq	fp, r6, r2, lsl #16
    8b48:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    8b4c:	03020401 	movweq	r0, #9217	; 0x2401
    8b50:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    8b54:	6f032e11 	svcvs	0x00032e11
    8b58:	2011033c 	andscs	r0, r1, ip, lsr r3
    8b5c:	03010425 	movweq	r0, #5157	; 0x1425
    8b60:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    8b64:	21222195 			; <UNDEFINED> instruction: 0x21222195
    8b68:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    8b6c:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    8b70:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    8b74:	03206403 			; <UNDEFINED> instruction: 0x03206403
    8b78:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    8b7c:	00010100 	andeq	r0, r1, r0, lsl #2
    8b80:	47240205 	strmi	r0, [r4, -r5, lsl #4]!
    8b84:	e0030000 	and	r0, r3, r0
    8b88:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8b8c:	2001a403 	andcs	sl, r1, r3, lsl #8
    8b90:	dd030104 	stfles	f0, [r3, #-16]
    8b94:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    8b98:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    8b9c:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    8ba0:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    8ba4:	09030104 	stmdbeq	r3, {r2, r8}
    8ba8:	0002022e 	andeq	r0, r2, lr, lsr #4
    8bac:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    8bb0:	00020000 	andeq	r0, r2, r0
    8bb4:	00000142 	andeq	r0, r0, r2, asr #2
    8bb8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8bbc:	0101000d 	tsteq	r1, sp
    8bc0:	00000101 	andeq	r0, r0, r1, lsl #2
    8bc4:	00000100 	andeq	r0, r0, r0, lsl #2
    8bc8:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8bcc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8bd0:	2f2e2e2f 	svccs	0x002e2e2f
    8bd4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8bd8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8bdc:	3a630062 	bcc	18c8d6c <__ccfg+0x18a8dc4>
    8be0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8be4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8be8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8bec:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8bf0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8bf4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8bf8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8bfc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8c00:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8c04:	6f6f745c 	svcvs	0x006f745c
    8c08:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8c0c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8c10:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8c14:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8c18:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8c1c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8c20:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8c24:	5f342d69 	svcpl	0x00342d69
    8c28:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8c2c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8c30:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8c34:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8c38:	61652d65 	cmnvs	r5, r5, ror #26
    8c3c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8c40:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8c44:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8c48:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8c4c:	6300656e 	movwvs	r6, #1390	; 0x56e
    8c50:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8c54:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8c58:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8c5c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8c60:	5f393130 	svcpl	0x00393130
    8c64:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8c68:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8c6c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8c70:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8c74:	6f745c36 	svcvs	0x00745c36
    8c78:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8c7c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8c80:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8c84:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8c88:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8c8c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8c90:	61652d65 	cmnvs	r5, r5, ror #26
    8c94:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8c98:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8c9c:	71353130 	teqvc	r5, r0, lsr r1
    8ca0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8ca4:	6f6e2d6d 	svcvs	0x006e2d6d
    8ca8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8cac:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8cb0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8cb4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8cb8:	00737973 	rsbseq	r7, r3, r3, ror r9
    8cbc:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8cc0:	0100682e 	tsteq	r0, lr, lsr #16
    8cc4:	64640000 	strbtvs	r0, [r4], #-0
    8cc8:	00632e69 	rsbeq	r2, r3, r9, ror #28
    8ccc:	5f000001 	svcpl	0x00000001
    8cd0:	61666564 	cmnvs	r6, r4, ror #10
    8cd4:	5f746c75 	svcpl	0x00746c75
    8cd8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8cdc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8ce0:	5f000002 	svcpl	0x00000002
    8ce4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8ce8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8cec:	00000300 	andeq	r0, r0, r0, lsl #6
    8cf0:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    8cf4:	00010068 	andeq	r0, r1, r8, rrx
    8cf8:	05000000 	streq	r0, [r0, #-0]
    8cfc:	00473c02 	subeq	r3, r7, r2, lsl #24
    8d00:	01880300 	orreq	r0, r8, r0, lsl #6
    8d04:	30312001 	eorscc	r2, r1, r1
    8d08:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    8d0c:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    8d10:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8d14:	02050002 	andeq	r0, r5, #2
    8d18:	00004764 	andeq	r4, r0, r4, ror #14
    8d1c:	0100c303 	tsteq	r0, r3, lsl #6
    8d20:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    8d24:	01010004 	tsteq	r1, r4
    8d28:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8d2c:	00000002 	andeq	r0, r0, r2
    8d30:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    8d34:	010e0301 	tsteq	lr, r1, lsl #6
    8d38:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    8d3c:	4f35352e 	svcmi	0x0035352e
    8d40:	01000402 	tsteq	r0, r2, lsl #8
    8d44:	00020401 	andeq	r0, r2, r1, lsl #8
    8d48:	00000205 	andeq	r0, r0, r5, lsl #4
    8d4c:	85030000 	strhi	r0, [r3, #-0]
    8d50:	11030101 	tstne	r3, r1, lsl #2
    8d54:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    8d58:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    8d5c:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    8d60:	7103342e 	tstvc	r3, lr, lsr #8
    8d64:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    8d68:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    8d6c:	01010002 	tsteq	r1, r2
    8d70:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8d74:	00000002 	andeq	r0, r0, r2
    8d78:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    8d7c:	20110301 	andscs	r0, r1, r1, lsl #6
    8d80:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    8d84:	2f201303 	svccs	0x00201303
    8d88:	69030104 	stmdbvs	r3, {r2, r8}
    8d8c:	234d3020 	movtcs	r3, #53280	; 0xd020
    8d90:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8d94:	1d030204 	sfmne	f0, 4, [r3, #-16]
    8d98:	0005022e 	andeq	r0, r5, lr, lsr #4
    8d9c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8da0:	00020500 	andeq	r0, r2, r0, lsl #10
    8da4:	03000000 	movweq	r0, #0
    8da8:	030101de 	movweq	r0, #4574	; 0x11de
    8dac:	031b2011 	tsteq	fp, #17
    8db0:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    8db4:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    8db8:	7fb90301 	svcvc	0x00b90301
    8dbc:	234d3020 	movtcs	r3, #53280	; 0xd020
    8dc0:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8dc4:	c8030204 	stmdagt	r3, {r2, r9}
    8dc8:	02422e00 	subeq	r2, r2, #0, 28
    8dcc:	01010005 	tsteq	r1, r5
    8dd0:	00000243 	andeq	r0, r0, r3, asr #4
    8dd4:	01950003 	orrseq	r0, r5, r3
    8dd8:	01020000 	mrseq	r0, (UNDEF: 2)
    8ddc:	000d0efb 	strdeq	r0, [sp], -fp
    8de0:	01010101 	tsteq	r1, r1, lsl #2
    8de4:	01000000 	mrseq	r0, (UNDEF: 0)
    8de8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8dec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8df0:	2f2e2e2f 	svccs	0x002e2e2f
    8df4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8df8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8dfc:	2f2e2e2f 	svccs	0x002e2e2f
    8e00:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8e04:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8e08:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8e0c:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 8c8c <__exidx_end+0x3374>
    8e10:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8e14:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    8e18:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    8e1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8e20:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    8e24:	00676e69 	rsbeq	r6, r7, r9, ror #28
    8e28:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8e2c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8e30:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8e34:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8e38:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8e3c:	61652d65 	cmnvs	r5, r5, ror #26
    8e40:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8e44:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8e48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8e4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8e50:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8e54:	2f646c69 	svccs	0x00646c69
    8e58:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8e5c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8e60:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8e64:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8e68:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8e6c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8e70:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8e74:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8e78:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8e7c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8e80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8e84:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8e88:	2f007379 	svccs	0x00007379
    8e8c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8e90:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8e94:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8e98:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8e9c:	2f787945 	svccs	0x00787945
    8ea0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8ea4:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8ea8:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8eac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8eb0:	2f62696c 	svccs	0x0062696c
    8eb4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8eb8:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    8ebc:	00656c61 	rsbeq	r6, r5, r1, ror #24
    8ec0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8ec4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8ec8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8ecc:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8ed0:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8ed4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ed8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8edc:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8ee0:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8ee4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ee8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8eec:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8ef0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8ef4:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    8ef8:	70636d65 	rsbvc	r6, r3, r5, ror #26
    8efc:	00632e79 	rsbeq	r2, r3, r9, ror lr
    8f00:	73000001 	movwvc	r0, #1
    8f04:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8f08:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8f0c:	5f000002 	svcpl	0x00000002
    8f10:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8f14:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8f18:	72000003 	andvc	r0, r0, #3
    8f1c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8f20:	0300682e 	movweq	r6, #2094	; 0x82e
    8f24:	6f6c0000 	svcvs	0x006c0000
    8f28:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8f2c:	00000300 	andeq	r0, r0, r0, lsl #6
    8f30:	6c746573 	cfldr64vs	mvdx6, [r4], #-460	; 0xfffffe34
    8f34:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    8f38:	00682e65 	rsbeq	r2, r8, r5, ror #28
    8f3c:	73000004 	movwvc	r0, #4
    8f40:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    8f44:	00682e62 	rsbeq	r2, r8, r2, ror #28
    8f48:	77000005 	strvc	r0, [r0, -r5]
    8f4c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    8f50:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f54:	6f6c0000 	svcvs	0x006c0000
    8f58:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    8f5c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f60:	74730000 	ldrbtvc	r0, [r3], #-0
    8f64:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    8f68:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8f6c:	05000000 	streq	r0, [r0, #-0]
    8f70:	02050001 	andeq	r0, r5, #1
    8f74:	0000476c 	andeq	r4, r0, ip, ror #14
    8f78:	05013303 	streq	r3, [r1, #-771]	; 0xfffffcfd
    8f7c:	010e0303 	tsteq	lr, r3, lsl #6
    8f80:	16131313 			; <UNDEFINED> instruction: 0x16131313
    8f84:	03060105 	movweq	r0, #24837	; 0x6105
    8f88:	0605016b 	streq	r0, [r5], -fp, ror #2
    8f8c:	053c1503 	ldreq	r1, [ip, #-1283]!	; 0xfffffafd
    8f90:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    8f94:	18052e01 	stmdane	r5, {r0, r9, sl, fp, sp}
    8f98:	01040200 	mrseq	r0, R12_usr
    8f9c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    8fa0:	0b059e01 	bleq	1707ac <__ccfg+0x150804>
    8fa4:	1a052806 	bne	152fc4 <__ccfg+0x13301c>
    8fa8:	39301306 	ldmdbcc	r0!, {r1, r2, r8, r9, ip}
    8fac:	2f060b05 	svccs	0x00060b05
    8fb0:	061a0513 			; <UNDEFINED> instruction: 0x061a0513
    8fb4:	060b0501 	streq	r0, [fp], -r1, lsl #10
    8fb8:	0106133d 	tsteq	r6, sp, lsr r3
    8fbc:	7a030d05 	bvc	cc3d8 <__ccfg+0xac430>
    8fc0:	4a0a0320 	bmi	289c48 <__ccfg+0x269ca0>
    8fc4:	20203c20 	eorcs	r3, r0, r0, lsr #24
    8fc8:	30060b05 	andcc	r0, r6, r5, lsl #22
    8fcc:	01061a05 	tsteq	r6, r5, lsl #20
    8fd0:	2f060b05 	svccs	0x00060b05
    8fd4:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    8fd8:	204a581d 	subcs	r5, sl, sp, lsl r8
    8fdc:	0b030e05 	bleq	cc7f8 <__ccfg+0xac850>
    8fe0:	20090520 	andcs	r0, r9, r0, lsr #10
    8fe4:	2e2e5e03 	cdpcs	14, 2, cr5, cr14, cr3, {0}
    8fe8:	03060505 	movweq	r0, #25861	; 0x6505
    8fec:	0c052023 	stceq	0, cr2, [r5], {35}	; 0x23
    8ff0:	09050106 	stmdbeq	r5, {r1, r2, r8}
    8ff4:	3301053b 	movwcc	r0, #5435	; 0x153b
    8ff8:	59030905 	stmdbpl	r3, {r0, r2, r8, fp}
    8ffc:	030e0558 	movweq	r0, #58712	; 0xe558
    9000:	09052022 	stmdbeq	r5, {r1, r5, sp}
    9004:	3c0e0520 	cfstr32cc	mvfx0, [lr], {32}
    9008:	5e030905 	vmlapl.f16	s0, s6, s10	; <UNPREDICTABLE>
    900c:	030d0520 	movweq	r0, #54560	; 0xd520
    9010:	02022e17 	andeq	r2, r2, #368	; 0x170
    9014:	71010100 	mrsvc	r0, (UNDEF: 17)
    9018:	03000001 	movweq	r0, #1
    901c:	00011700 	andeq	r1, r1, r0, lsl #14
    9020:	fb010200 	blx	4982a <__ccfg+0x29882>
    9024:	01000d0e 	tsteq	r0, lr, lsl #26
    9028:	00010101 	andeq	r0, r1, r1, lsl #2
    902c:	00010000 	andeq	r0, r1, r0
    9030:	2e2e0100 	sufcse	f0, f6, f0
    9034:	2f2e2e2f 	svccs	0x002e2e2f
    9038:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    903c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9040:	2f2e2e2f 	svccs	0x002e2e2f
    9044:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    9048:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    904c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    9050:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    9054:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    9058:	752f0062 	strvc	r0, [pc, #-98]!	; 8ffe <__exidx_end+0x36e6>
    905c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8e98 <__exidx_end+0x3580>
    9060:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    9064:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    9068:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    906c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    9070:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    9074:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    9078:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    907c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    9080:	2f006564 	svccs	0x00006564
    9084:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9088:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    908c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9090:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    9094:	2f787945 	svccs	0x00787945
    9098:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    909c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    90a0:	302e332e 	eorcc	r3, lr, lr, lsr #6
    90a4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    90a8:	2f62696c 	svccs	0x0062696c
    90ac:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    90b0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    90b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    90b8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    90bc:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    90c0:	2f646c69 	svccs	0x00646c69
    90c4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    90c8:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    90cc:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    90d0:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    90d4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    90d8:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    90dc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    90e0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    90e4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    90e8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    90ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    90f0:	00006564 	andeq	r6, r0, r4, ror #10
    90f4:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    90f8:	0100632e 	tsteq	r0, lr, lsr #6
    90fc:	74730000 	ldrbtvc	r0, [r3], #-0
    9100:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    9104:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9108:	745f0000 	ldrbvc	r0, [pc], #-0	; 9110 <__exidx_end+0x37f8>
    910c:	73657079 	cmnvc	r5, #121	; 0x79
    9110:	0300682e 	movweq	r6, #2094	; 0x82e
    9114:	65720000 	ldrbvs	r0, [r2, #-0]!
    9118:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    911c:	00030068 	andeq	r0, r3, r8, rrx
    9120:	636f6c00 	cmnvs	pc, #0, 24
    9124:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    9128:	73000003 	movwvc	r0, #3
    912c:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    9130:	00682e62 	rsbeq	r2, r8, r2, ror #28
    9134:	00000004 	andeq	r0, r0, r4
    9138:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    913c:	00481802 	subeq	r1, r8, r2, lsl #16
    9140:	013e0300 	teqeq	lr, r0, lsl #6
    9144:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    9148:	0305141d 	movweq	r1, #21533	; 0x541d
    914c:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    9150:	20202e01 	eorcs	r2, r0, r1, lsl #28
    9154:	062f0105 	strteq	r0, [pc], -r5, lsl #2
    9158:	1303054e 	movwne	r0, #13646	; 0x354e
    915c:	01061205 	tsteq	r6, r5, lsl #4
    9160:	051f0105 	ldreq	r0, [pc, #-261]	; 9063 <__exidx_end+0x374b>
    9164:	1d052112 	stfnes	f2, [r5, #-72]	; 0xffffffb8
    9168:	03052506 	movweq	r2, #21766	; 0x5506
    916c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    9170:	201e0513 	andscs	r0, lr, r3, lsl r5
    9174:	2e44054a 	cdpcs	5, 4, cr0, cr4, cr10, {2}
    9178:	05491b05 	strbeq	r1, [r9, #-2821]	; 0xfffff4fb
    917c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    9180:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    9184:	02012f01 	andeq	r2, r1, #1, 30
    9188:	0101000a 	tsteq	r1, sl
    918c:	000000dc 	ldrdeq	r0, [r0], -ip
    9190:	00d60003 	sbcseq	r0, r6, r3
    9194:	01020000 	mrseq	r0, (UNDEF: 2)
    9198:	000d0efb 	strdeq	r0, [sp], -fp
    919c:	01010101 	tsteq	r1, r1, lsl #2
    91a0:	01000000 	mrseq	r0, (UNDEF: 0)
    91a4:	2f010000 	svccs	0x00010000
    91a8:	2f727375 	svccs	0x00727375
    91ac:	2f62696c 	svccs	0x0062696c
    91b0:	2f636367 	svccs	0x00636367
    91b4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    91b8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    91bc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    91c0:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    91c4:	2f312e33 	svccs	0x00312e33
    91c8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    91cc:	00656475 	rsbeq	r6, r5, r5, ror r4
    91d0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    91d4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    91d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    91dc:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    91e0:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    91e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    91e8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    91ec:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    91f0:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    91f4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    91f8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    91fc:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9200:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9204:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    9208:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    920c:	2f2e2e2f 	svccs	0x002e2e2f
    9210:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9214:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9218:	2f2e2e2f 	svccs	0x002e2e2f
    921c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    9220:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9224:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    9228:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    922c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    9230:	74730000 	ldrbtvc	r0, [r3], #-0
    9234:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    9238:	0100682e 	tsteq	r0, lr, lsr #16
    923c:	745f0000 	ldrbvc	r0, [pc], #-0	; 9244 <__exidx_end+0x392c>
    9240:	73657079 	cmnvc	r5, #121	; 0x79
    9244:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9248:	65720000 	ldrbvs	r0, [r2, #-0]!
    924c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    9250:	00020068 	andeq	r0, r2, r8, rrx
    9254:	636f6c00 	cmnvs	pc, #0, 24
    9258:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    925c:	69000002 	stmdbvs	r0, {r1}
    9260:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    9264:	00632e65 	rsbeq	r2, r3, r5, ror #28
    9268:	00000003 	andeq	r0, r0, r3
    926c:	0000019b 	muleq	r0, fp, r1
    9270:	00e20003 	rsceq	r0, r2, r3
    9274:	01020000 	mrseq	r0, (UNDEF: 2)
    9278:	000d0efb 	strdeq	r0, [sp], -fp
    927c:	01010101 	tsteq	r1, r1, lsl #2
    9280:	01000000 	mrseq	r0, (UNDEF: 0)
    9284:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9288:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    928c:	2f2e2e2f 	svccs	0x002e2e2f
    9290:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9294:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    9298:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    929c:	2f2e2e00 	svccs	0x002e2e00
    92a0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92a4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92a8:	2f2e2e2f 	svccs	0x002e2e2f
    92ac:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    92b0:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    92b4:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    92b8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    92bc:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    92c0:	2f2e2e2f 	svccs	0x002e2e2f
    92c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92c8:	2f2e2f2e 	svccs	0x002e2f2e
    92cc:	00636367 	rsbeq	r6, r3, r7, ror #6
    92d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92d8:	2f2e2e2f 	svccs	0x002e2e2f
    92dc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 922c <__exidx_end+0x3914>
    92e0:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    92e4:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    92e8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    92ec:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    92f0:	2f676966 	svccs	0x00676966
    92f4:	006d7261 	rsbeq	r7, sp, r1, ror #4
    92f8:	62696c00 	rsbvs	r6, r9, #0, 24
    92fc:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    9300:	0100632e 	tsteq	r0, lr, lsr #6
    9304:	61680000 	cmnvs	r8, r0
    9308:	61746873 	cmnvs	r4, r3, ror r8
    930c:	00682e62 	rsbeq	r2, r8, r2, ror #28
    9310:	61000002 	tstvs	r0, r2
    9314:	692d6d72 	pushvs	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    9318:	682e6173 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}
    931c:	00000300 	andeq	r0, r0, r0, lsl #6
    9320:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    9324:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    9328:	00030068 	andeq	r0, r3, r8, rrx
    932c:	736e6900 	cmnvc	lr, #0, 18
    9330:	6f632d6e 	svcvs	0x00632d6e
    9334:	6174736e 	cmnvs	r4, lr, ror #6
    9338:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    933c:	00030068 	andeq	r0, r3, r8, rrx
    9340:	6d726100 	ldfvse	f6, [r2, #-0]
    9344:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    9348:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    934c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    9350:	00682e32 	rsbeq	r2, r8, r2, lsr lr
    9354:	00000001 	andeq	r0, r0, r1
    9358:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    935c:	00486402 	subeq	r6, r8, r2, lsl #8
    9360:	04a40300 	strteq	r0, [r4], #768	; 0x300
    9364:	13030501 	movwne	r0, #13569	; 0x3501
    9368:	16051313 			; <UNDEFINED> instruction: 0x16051313
    936c:	01010101 	tsteq	r1, r1, lsl #2
    9370:	06010501 	streq	r0, [r1], -r1, lsl #10
    9374:	3116050f 	tstcc	r6, pc, lsl #10
    9378:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    937c:	062e3116 			; <UNDEFINED> instruction: 0x062e3116
    9380:	0120202e 			; <UNDEFINED> instruction: 0x0120202e
    9384:	0620012e 	strteq	r0, [r0], -lr, lsr #2
    9388:	20200620 	eorcs	r0, r0, r0, lsr #12
    938c:	20062006 	andcs	r2, r6, r6
    9390:	0f060105 	svceq	0x00060105
    9394:	00231605 	eoreq	r1, r3, r5, lsl #12
    9398:	06010402 	streq	r0, [r1], -r2, lsl #8
    939c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    93a0:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    93a4:	20060304 	andcs	r0, r6, r4, lsl #6
    93a8:	03040200 	movweq	r0, #16896	; 0x4200
    93ac:	22052006 	andcs	r2, r5, #6
    93b0:	03040200 	movweq	r0, #16896	; 0x4200
    93b4:	1e051406 	cdpne	4, 0, cr1, cr5, cr6, {0}
    93b8:	03040200 	movweq	r0, #16896	; 0x4200
    93bc:	0016052f 	andseq	r0, r6, pc, lsr #10
    93c0:	1d030402 	cfstrsne	mvf0, [r3, #-8]
    93c4:	02000c05 	andeq	r0, r0, #1280	; 0x500
    93c8:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
    93cc:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    93d0:	02001e03 	andeq	r1, r0, #3, 28	; 0x30
    93d4:	00200304 	eoreq	r0, r0, r4, lsl #6
    93d8:	06030402 	streq	r0, [r3], -r2, lsl #8
    93dc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    93e0:	03050103 	movweq	r0, #20739	; 0x5103
    93e4:	03040200 	movweq	r0, #16896	; 0x4200
    93e8:	000c0514 	andeq	r0, ip, r4, lsl r5
    93ec:	06030402 	streq	r0, [r3], -r2, lsl #8
    93f0:	00030501 	andeq	r0, r3, r1, lsl #10
    93f4:	06030402 	streq	r0, [r3], -r2, lsl #8
    93f8:	00010523 	andeq	r0, r1, r3, lsr #10
    93fc:	06030402 	streq	r0, [r3], -r2, lsl #8
    9400:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    9404:	05020103 	streq	r0, [r2, #-259]	; 0xfffffefd
    9408:	Address 0x0000000000009408 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      24:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
      28:	7000735f 	andvc	r7, r0, pc, asr r3
      2c:	646f6d64 	strbtvs	r6, [pc], #-3428	; 34 <g_pfnVectors+0x34>
      30:	6f5f0065 	svcvs	0x005f0065
      34:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
      38:	615f7469 	cmpvs	pc, r9, ror #8
      3c:	00736772 	rsbseq	r6, r3, r2, ror r7
			i = k;
      40:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
				j->Next = k;
      44:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      48:	5f007961 	svcpl	0x00007961
}
      4c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      50:	615f6261 	cmpvs	pc, r1, ror #4
      54:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
		release;
      58:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
      5c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
			nq++;
      60:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00786564 	rsbseq	r6, r8, r4, ror #10
      68:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
      6c:	5f626d6f 	svcpl	0x00626d6f
      70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
      74:	725f0065 	subsvc	r0, pc, #101	; 0x65
      78:	72003834 	andvc	r3, r0, #52, 16	; 0x340000
      7c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      80:	00726576 	rsbseq	r6, r2, r6, ror r5
      84:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      88:	5f62616c 	svcpl	0x0062616c
      8c:	5f746567 	svcpl	0x00746567
	if (!button_still_pressed (__button_list [pbutton]))
      90:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
      94:	72006563 	andvc	r6, r0, #415236096	; 0x18c00000
      98:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	if (baction == NULL)
      9c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      a0:	47007961 	strmi	r7, [r0, -r1, ror #18]
	(*baction) (pbutton);
      a4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
endthread
      a8:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      b0:	31303220 	teqcc	r0, r0, lsr #4
endthread
      b4:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
      b8:	72282035 	eorvc	r2, r8, #53	; 0x35
      bc:	61656c65 	cmnvs	r5, r5, ror #24
      c0:	20296573 	eorcs	r6, r9, r3, ror r5
      c4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
fsm sender(struct ResponseMessage *message) {
      c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      cc:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
      d0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
}
      d4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
      d8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
      e0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
      e4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
      e8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
		packet[0] = NETWORK_ID;
      ec:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
		*p = message->tpe;p++;
      f4:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
      f8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
		*p = message->sender_id;p++;
     100:	6f6c666d 	svcvs	0x006c666d
		*p = message->receiver_id;p++;
     104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
		switch(message->tpe) {
     108:	733d6962 	teqvc	sp, #1605632	; 0x188000
     10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
     110:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
		tcv_endp(packet);
     114:	613d6863 	teqvs	sp, r3, ror #16
     118:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     120:	672d2067 	strvs	r2, [sp, -r7, rrx]!
}
     124:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
		finish;
     128:	20332d66 	eorscs	r2, r3, r6, ror #26
     12c:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
				*p = message->status;p++;
     130:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     134:	6177642d 	cmnvs	r7, sp, lsr #8
				strncpy(p, message->record, sizeof(message->record));
     138:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
				*p = message->padding;p++;
     13c:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
				strncpy(p, message->record, sizeof(message->record));
     140:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
				strncpy(p, message->record, sizeof(message->record));
     144:	20393963 	eorscs	r3, r9, r3, ror #18
     148:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
				strncpy(p, message->record, sizeof(message->record));
     14c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
				*p = message->record_index;p++;
     150:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
				*p = message->padding;
     154:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
				break;
     158:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     15c:	6164662d 	cmnvs	r4, sp, lsr #12
     160:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     164:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     168:	20736e6f 	rsbscs	r6, r3, pc, ror #28
bool init_node(struct Node* node){
     16c:	6f6e662d 	svcvs	0x006e662d
    node->id  = 0;                  // default id value 0
     170:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
    node->index = 0;                // default entry count 0
     174:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
    node->data_base.item_count = 0; // default no items in array
     178:	61696c61 	cmnvs	r9, r1, ror #24
    DEBUG_PRINT("Error initializing node...\n");
     17c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     180:	61662d20 	cmnvs	r6, r0, lsr #26
};
     184:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
     188:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
uint8_t generate_request_num(void){
     18c:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
    return (uint8_t) (rand() % 255);
     190:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
     194:	5f003031 	svcpl	0x00003031
     198:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
}
     19c:	6174735f 	cmnvs	r4, pc, asr r3
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	5f5f7472 	svcpl	0x005f7472
     1a4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     1a8:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	6f6f7200 	svcvs	0x006f7200
};
     1b0:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
     1b8:	5f00657a 	svcpl	0x0000657a
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     1c0:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
     1c4:	67006461 	strvs	r6, [r0, -r1, ror #8]
        node->data_base.item_count -= 1;
     1c8:	6d5f7465 	cfldrdvs	mvd7, [pc, #-404]	; 3c <g_pfnVectors+0x3c>
};
     1cc:	61737365 	cmnvs	r3, r5, ror #6
fsm receiver(struct Node* node_db) {
     1d0:	735f6567 	cmpvc	pc, #432013312	; 0x19c00000
     1d4:	00657a69 	rsbeq	r7, r5, r9, ror #20
     1d8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     1dc:	5f62616c 	svcpl	0x0062616c
     1e0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     1e4:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
     1e8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     1ec:	6f72705f 	svcvs	0x0072705f
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	5f006f74 	svcpl	0x00006f74
     1f4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1f8:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	675f7765 	ldrbvs	r7, [pc, -r5, ror #14]
     200:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     204:	0064695f 	rsbeq	r6, r4, pc, asr r9
     208:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		switch (tpe){
     20c:	5f62616c 	svcpl	0x0062616c
     210:	5f746567 	svcpl	0x00746567
     214:	665f6469 	ldrbvs	r6, [pc], -r9, ror #8
     218:	645f726f 	ldrbvs	r7, [pc], #-623	; 220 <receiver+0x50>
     21c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     220:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     224:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 64 <g_pfnVectors+0x64>
     22c:	61737365 	cmnvs	r3, r5, ror #6
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	305f6567 	subscc	r6, pc, r7, ror #10
     234:	73657200 	cmnvc	r5, #0, 4
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     23c:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	67617373 			; <UNDEFINED> instruction: 0x67617373
     244:	00315f65 	eorseq	r5, r1, r5, ror #30
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	70736572 	rsbsvc	r6, r3, r2, ror r5
     24c:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
				if (discovery_request_message->gid == node_db->gid){
     250:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     254:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
					response_message_0->gid = discovery_request_message->gid;
     258:	5f00325f 	svcpl	0x0000325f
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	4b434f4c 	blmi	10d3f94 <__ccfg+0x10b3fec>
					response_message_0->request_number = discovery_request_message->request_number;
     260:	4345525f 	movtmi	r5, #21087	; 0x525f
					response_message_0->sender_id = node_db->id;
     264:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	545f4556 	ldrbpl	r4, [pc], #-1366	; 270 <receiver+0xa0>
					call sender(response_message_0, done_case);
     26c:	73657200 	cmnvc	r5, #0, 4
     270:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     274:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     278:	67617373 			; <UNDEFINED> instruction: 0x67617373
     27c:	00345f65 	eorseq	r5, r4, r5, ror #30
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     280:	70736572 	rsbsvc	r6, r3, r2, ror r5
     284:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     28c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	7500355f 	strvc	r3, [r0, #-1375]	; 0xfffffaa1
     294:	5f726573 	svcpl	0x00726573
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     298:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     29c:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     2a4:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     2ac:	6f6e6e00 	svcvs	0x006e6e00
     2b0:	00736564 	rsbseq	r6, r3, r4, ror #10
     2b4:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     2b8:	5f6e656c 	svcpl	0x006e656c
     2bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     2c0:	69440065 	stmdbvs	r4, {r0, r2, r5, r6}^
     2c4:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	52797265 	rsbspl	r7, r9, #1342177286	; 0x50000006
     2cc:	6f707365 	svcvs	0x00707365
					node_db->index+=1;
     2d0:	4d65736e 	stclmi	3, cr7, [r5, #-440]!	; 0xfffffe48
		tcv_endp(incoming_packet);
     2d4:	61737365 	cmnvs	r3, r5, ror #6
     2d8:	5f006567 	svcpl	0x00006567
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     2e0:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
		proceed receiving;
     2e4:	6e5f7765 	cdpvs	7, 5, cr7, cr15, cr5, {3}
     2e8:	5f65646f 	svcpl	0x0065646f
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ec:	66006469 	strvs	r6, [r0], -r9, ror #8
     2f0:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
		proceed receiving;
     2f4:	5f5f006b 	svcpl	0x005f006b
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	6f5f6970 	svcvs	0x005f6970
     2fc:	5f00646c 	svcpl	0x0000646c
     300:	6f647473 	svcvs	0x00647473
     304:	5f007475 	svcpl	0x00007475
     308:	736f7066 	cmnvc	pc, #102	; 0x66
		proceed receiving;
     30c:	5f00745f 	svcpl	0x0000745f
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	00736e66 	rsbseq	r6, r3, r6, ror #28
     314:	6f6f635f 	svcvs	0x006f635f
     318:	0065696b 	rsbeq	r6, r5, fp, ror #18
     31c:	5f766374 	svcpl	0x00766374
		proceed receiving;
     320:	6f666e69 	svcvs	0x00666e69
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	73797300 	cmnvc	r9, #0, 6
     328:	5f746174 	svcpl	0x00746174
     32c:	5f5f0074 	svcpl	0x005f0074
     330:	5f737362 	svcpl	0x00737362
		proceed receiving;
     334:	5f646e65 	svcpl	0x00646e65
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	425f005f 	subsmi	r0, pc, #95	; 0x5f
     33c:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     340:	544f0074 	strbpl	r0, [pc], #-116	; 348 <receiver+0x178>
     344:	5f524548 	svcpl	0x00524548
		proceed receiving;
     348:	4f525245 	svcmi	0x00525245
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	5f5f0052 	svcpl	0x005f0052
     350:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
		proceed receiving;
     354:	00796164 	rsbseq	r6, r9, r4, ror #2
}
     358:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	65725f73 	ldrbvs	r5, [r2, #-3955]!	; 0xfffff08d
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	5f006461 	svcpl	0x00006461
     364:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     368:	5f00746c 	svcpl	0x0000746c
     36c:	5f6d745f 	svcpl	0x006d745f
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     370:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
     374:	57454e00 	strbpl	r4, [r5, -r0, lsl #28]
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     378:	444f4e5f 	strbmi	r4, [pc], #-3679	; 380 <receiver+0x1b0>
     37c:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
     384:	79706f72 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	735f5f00 	cmpvc	pc, #0, 30
     38c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     394:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     398:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 3a0 <receiver+0x1d0>
     39c:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
		strncpy(response_message->record, rec, 20);
     3a0:	635f5f00 	cmpvs	pc, #0, 30
     3a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
					call sender(response_message_4, done_case);
     3a8:	736f6800 	cmnvc	pc, #0, 16
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b0:	63617000 	cmnvs	r1, #0
     3b4:	5f74656b 	svcpl	0x0074656b
     3b8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     3bc:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     3c8:	5f5f0073 	svcpl	0x005f0073
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 204 <receiver+0x34>
     3d0:	5f006e69 	svcpl	0x00006e69
     3d4:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     3d8:	65720066 	ldrbvs	r0, [r2, #-102]!	; 0xffffff9a
     3dc:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     3e0:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 21c <receiver+0x4c>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	61737365 	cmnvs	r3, r5, ror #6
     3e8:	335f6567 	cmpcc	pc, #432013312	; 0x19c00000
     3ec:	61725f00 	cmnvs	r2, r0, lsl #30
    return node->data_base.item_array[index];
     3f0:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
     3f4:	736e6900 	cmnvc	lr, #0, 18
     3f8:	5f747265 	svcpl	0x00747265
     3fc:	6f636572 	svcvs	0x00636572
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	5f006472 	svcpl	0x00006472
    return node->data_base.item_array[index];
     404:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	635f6261 	cmpvs	pc, #268435462	; 0x10000006
     40c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     410:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
		strncpy(response_message->record, rec, 20);
     414:	5f6f746f 	svcpl	0x006f746f
     418:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	725f0074 	subsvc	r0, pc, #116	; 0x74
     420:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     424:	006b5f74 	rsbeq	r5, fp, r4, ror pc
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     42c:	5f6c616e 	svcpl	0x006c616e
     430:	00667562 	rsbeq	r7, r6, r2, ror #10
     434:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
				if(!response_flag){
     438:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     43c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
					response_flag=1;
     440:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
					trigger(&response_flag);
     444:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
				switch(response_message_5->status){
     448:	5f00746e 	svcpl	0x0000746e
     44c:	74637361 	strbtvc	r7, [r3], #-865	; 0xfffffc9f
     450:	5f656d69 	svcpl	0x00656d69
     454:	00667562 	rsbeq	r7, r6, r2, ror #10
     458:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     45c:	0062645f 	rsbeq	r6, r2, pc, asr r4
     460:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
     464:	00454c49 	subeq	r4, r5, r9, asr #24
     468:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
     46c:	61657200 	cmnvs	r5, r0, lsl #4
     470:	006e6f73 	rsbeq	r6, lr, r3, ror pc
     474:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
     478:	5f424400 	svcpl	0x00424400
     47c:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
     480:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     484:	00454c49 	subeq	r4, r5, r9, asr #24
     488:	5f746573 	svcpl	0x00746573
     48c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     490:	0064695f 	rsbeq	r6, r4, pc, asr r9
     494:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     498:	00746573 	rsbseq	r6, r4, r3, ror r5
     49c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     4a0:	6f72705f 	svcvs	0x0072705f
     4a4:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     4a8:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
						if (response_checker[0] == response_message_5->request_number){
     4ac:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     4b0:	735f5f00 	cmpvc	pc, #0, 30
     4b4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
							switch(response_checker[1]){
     4b8:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     4bc:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     4c0:	0062645f 	rsbeq	r6, r2, pc, asr r4
     4c4:	5f766374 	svcpl	0x00766374
									proceed response_1_create;
     4c8:	0065706f 	rsbeq	r7, r5, pc, rrx
						proceed response_2;
     4cc:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
									proceed response_1_delete;
     4d0:	6f72705f 	svcvs	0x0072705f
									proceed response_1_retrieve;
     4d4:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
						proceed response_2;
     4d8:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
						proceed response_3;
     4dc:	00786564 	rsbseq	r6, r8, r4, ror #10
						proceed response_4;
     4e0:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     4e8:	73007963 	movwvc	r7, #2403	; 0x963
}
     4ec:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     4f0:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     4f4:	735f5f00 	cmpvc	pc, #0, 30
     4f8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
bool delete_all(struct Node *node){
     4fc:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	76656972 			; <UNDEFINED> instruction: 0x76656972
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	006f746f 	rsbeq	r7, pc, pc, ror #8
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
            node->data_base.item_array[i].timestamp = 0;
     510:	5f62616c 	svcpl	0x0062616c
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	61656c63 	cmnvs	r5, r3, ror #24
    node->data_base.item_count = 0;
     518:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
}
     51c:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
        return true;
     520:	5f72756f 	svcpl	0x0072756f
fsm root {
     524:	61727261 	cmnvs	r2, r1, ror #4
     528:	5f5f0079 	svcpl	0x005f0079
     52c:	63756e67 	cmnvs	r5, #1648	; 0x670
     530:	5f61765f 	svcpl	0x0061765f
     534:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     538:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
     53c:	6f635f6d 	svcvs	0x00635f6d
     540:	00746e75 	rsbseq	r6, r4, r5, ror lr
     544:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     548:	5f62616c 	svcpl	0x0062616c
     54c:	70736572 	rsbsvc	r6, r3, r2, ror r5
     550:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     554:	645f315f 	ldrbvs	r3, [pc], #-351	; 55c <root+0x38>
     558:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     55c:	5f5f0065 	svcpl	0x005f0065
     560:	616c7473 	smcvs	51011	; 0xc743
     564:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     568:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     56c:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     570:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     574:	00657461 	rsbeq	r7, r5, r1, ror #8
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     57c:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     580:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 588 <root+0x64>
		init_node(node_db);
     584:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
		phys_cc1350(0, MAX_PKT_LEN);
     588:	5f007961 	svcpl	0x00007961
     58c:	00636e69 	rsbeq	r6, r3, r9, ror #28
		tcv_plug (0, &plug_null);
     590:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     594:	6e656700 	cdpvs	7, 6, cr6, cr5, cr0, {0}
		sfd = tcv_open (WNONE, 0, 0);
     598:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     59c:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     5a0:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     5a4:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
     5a8:	5f5f006d 	svcpl	0x005f006d
			diag("Cannot open tcv interface");
     5ac:	616c7473 	smcvs	51011	; 0xc743
     5b0:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
			halt();
     5b4:	5f747261 	svcpl	0x00747261
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b8:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     5bc:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
		runfsm receiver(node_db);
     5c0:	6f72705f 	svcvs	0x0072705f
     5c4:	5f006f74 	svcpl	0x00006f74
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
     5cc:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     5d0:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     5d4:	00657461 	rsbeq	r7, r5, r1, ror #8
     5d8:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
     5dc:	735f5f00 	cmpvc	pc, #0, 30
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     5e4:	006b6f5f 	rsbeq	r6, fp, pc, asr pc
     5e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
		switch(CHOICE) {
     5ec:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
     5f0:	6c630070 	stclvs	0, cr0, [r3], #-448	; 0xfffffe40
     5f4:	5f726165 	svcpl	0x00726165
     5f8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     5fc:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     600:	6f626867 	svcvs	0x00626867
     604:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
     608:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     60c:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     610:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     614:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
     618:	5f5f0073 	svcpl	0x005f0073
				proceed menu;
     61c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     620:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	00747369 	rsbseq	r7, r4, r9, ror #6
     628:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
     630:	00657079 	rsbeq	r7, r5, r9, ror r0
     634:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
		DEBUG_PRINT("setting node group ID");
     638:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 478 <receiver+0x2a8>
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
     640:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
		proceed menu;
     644:	626d5f00 	rsbvs	r5, sp, #0, 30
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	5f6e656c 	svcpl	0x006e656c
     64c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		if(node_db->id < 1 || node_db->id > 25){
     650:	77610065 	strbvc	r0, [r1, -r5, rrx]!
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	0064726f 	rsbeq	r7, r4, pc, ror #4
     658:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
		if(node_db->id < 1 || node_db->id > 25){
     65c:	53006e70 	movwpl	r6, #3696	; 0xe70
     660:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     664:	6c005353 	stcvs	3, cr5, [r0], {83}	; 0x53
			strncpy(reason, "Out of Range", 50);
     668:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     66c:	5f5f0063 	svcpl	0x005f0063
			proceed invalid_node_id;
     670:	616c7473 	smcvs	51011	; 0xc743
     674:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
				strncpy(reason, "ID is already in use", 50);
     678:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     67c:	00676e69 	rsbeq	r6, r7, r9, ror #28
			if(node_db->id == node_db->nnodes[i]){
     680:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     684:	61646d5f 	cmnvs	r4, pc, asr sp
     688:	5f5f0079 	svcpl	0x005f0079
				strncpy(reason, "ID is already in use", 50);
     68c:	616c7473 	smcvs	51011	; 0xc743
     690:	61775f62 	cmnvs	r7, r2, ror #30
     694:	645f7469 	ldrbvs	r7, [pc], #-1129	; 69c <root+0x178>
				proceed invalid_node_id;
     698:	6f637369 	svcvs	0x00637369
		for(int i = 0; i < 25; i++){
     69c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     6a0:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
		proceed menu;
     6a4:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     6a8:	5f00636e 	svcpl	0x0000636e
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     6b0:	5f63776f 	svcpl	0x0063776f
     6b4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6b8:	615f0065 	cmpvs	pc, r5, rrx
		proceed get_new_node_id;
     6bc:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     6c0:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
		if (!clear_node_neighbour_array(node_db)){
     6c4:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     6c8:	5f5f006b 	svcpl	0x005f006b
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     6d0:	61747379 	cmnvs	r4, r9, ror r3
     6d4:	5f5f0074 	svcpl	0x005f0074
			proceed error;
     6d8:	616c7473 	smcvs	51011	; 0xc743
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     6e0:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		request_packet->gid = node_db->gid;
     6e4:	315f6573 	cmpcc	pc, r3, ror r5	; <UNPREDICTABLE>
     6e8:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	76656972 			; <UNDEFINED> instruction: 0x76656972
		request_packet->request_number = generate_request_num();
     6f0:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     6f4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		call sender(request_packet, wait_discovery);
     6f8:	635f6573 	cmpvs	pc, #482344960	; 0x1cc00000
     6fc:	6b636568 	blvs	18d9ca4 <__ccfg+0x18b9cfc>
		request_packet->receiver_id=0;
     700:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
		call sender(request_packet, wait_discovery);
     704:	6f637369 	svcvs	0x00637369
     708:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     70c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
			release;
     710:	4d747365 	ldclmi	3, cr7, [r4, #-404]!	; 0xfffffe6c
				proceed get_new_node_id;
     714:	61737365 	cmnvs	r3, r5, ror #6
				proceed clear_neighbour_array;
     718:	5f006567 	svcpl	0x00006567
				proceed create_proto_start;
     71c:	5f69705f 	svcpl	0x0069705f
				proceed start_delete_proto;
     720:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
				proceed retrieve_proto;
     724:	5f5f006b 	svcpl	0x005f006b
				proceed display_db;
     728:	616c7473 	smcvs	51011	; 0xc743
				proceed del_local;
     72c:	69745f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
		if (discovery_wait_flag == 0){
     730:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1cb <delete_record+0x17>
			discovery_wait_flag=1;
     734:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     738:	6b636f6c 	blvs	18dc4f0 <__ccfg+0x18bc548>
			delay(3000, find_proto_start);
     73c:	5f00745f 	svcpl	0x0000745f
     740:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		if (discovery_wait_flag == 1){
     744:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
			discovery_wait_flag=0;
     748:	6f707365 	svcvs	0x00707365
     74c:	5f65736e 	svcpl	0x0065736e
			delay(3000, display_neighbour_nodes);
     750:	5f5f0032 	svcpl	0x005f0032
     754:	616c7473 	smcvs	51011	; 0xc743
     758:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     75c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     760:	335f6573 	cmpcc	pc, #482344960	; 0x1cc00000
     764:	735f5f00 	cmpvc	pc, #0, 30
     768:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     76c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     770:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     774:	00345f65 	eorseq	r5, r4, r5, ror #30
     778:	63775f5f 	cmnvs	r7, #380	; 0x17c
     77c:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
     780:	0073626f 	rsbseq	r6, r3, pc, ror #4
     784:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     788:	64007375 	strvs	r7, [r0], #-885	; 0xfffffc8b
     78c:	5f617461 	svcpl	0x00617461
     790:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     794:	5f5f0079 	svcpl	0x005f0079
     798:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
     79c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	735f5f00 	cmpvc	pc, #0, 30
     7a4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     7a8:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     7ac:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
			if (node_db->nnodes[i]=='\0') break;
     7b0:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 7b8 <root+0x294>
     7b4:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
     7b8:	735f5f00 	cmpvc	pc, #0, 30
		proceed menu;
     7bc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     7c0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c4:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     7c8:	5f64726f 	svcpl	0x0064726f
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
     7d0:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
			strncpy(reason, "Error: improper ID", 50);
     7d4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     7d8:	69657274 	stmdbvs	r5!, {r2, r4, r5, r6, r9, ip, sp, lr}^
     7dc:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
			proceed error;
     7e0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
     7e8:	67617373 			; <UNDEFINED> instruction: 0x67617373
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	735f0065 	cmpvc	pc, #101	; 0x65
     7f0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     7f4:	61675f00 	cmnvs	r7, r0, lsl #30
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	5f616d6d 	svcpl	0x00616d6d
		create_message->tpe = CREATE_RECORD;
     7fc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	006d6167 	rsbeq	r6, sp, r7, ror #2
		create_message->gid = node_db->gid;
     804:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
		create_message->tpe = CREATE_RECORD;
     808:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		create_message->request_number = generate_request_num();
     80c:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     810:	5f5f0074 	svcpl	0x005f0074
		create_message->sender_id = node_db->id;
     814:	616c7473 	smcvs	51011	; 0xc743
     818:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     81c:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
		strncpy(create_message->record, user_provided_record, 20);
     820:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     824:	5f70756f 	svcpl	0x0070756f
     828:	5f006469 	svcpl	0x00006469
		response_checker[0] = create_message->request_number;
     82c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
		call sender(&create_message, wait);
     830:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
		response_checker[1] = create_message->tpe;
     834:	64617000 	strbtvs	r7, [r1], #-0
     838:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
		call sender(&create_message, wait);
     83c:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
     840:	4b00746c 	blmi	1d9f8 <__exidx_end+0x180e0>
     844:	2f504d54 	svccs	0x00504d54
     848:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	5f5f0063 	svcpl	0x005f0063
     850:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	775f0067 	ldrbvc	r0, [pc, -r7, rrx]
     858:	6f747263 	svcvs	0x00747263
			strncpy(reason, "Error: improper node ID", 50);
     85c:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     860:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     864:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
			proceed error;
     868:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	6f707365 	svcvs	0x00707365
     870:	5f65736e 	svcpl	0x0065736e
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     878:	615f5f00 	cmpvs	pc, r0, lsl #30
     87c:	5f5f0070 	svcpl	0x005f0070
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	616c7473 	smcvs	51011	; 0xc743
		delete_record->tpe = DELETE_RECORD;
     884:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	6f6c5f6c 	svcvs	0x006c5f6c
		delete_record->gid = node_db->gid;
     88c:	006c6163 	rsbeq	r6, ip, r3, ror #2
		delete_record->tpe = DELETE_RECORD;
     890:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
		delete_record->request_number = generate_request_num();
     894:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
     898:	5f5f0070 	svcpl	0x005f0070
		delete_record->sender_id = node_db->id;
     89c:	616c7473 	smcvs	51011	; 0xc743
     8a0:	6f6c5f62 	svcvs	0x006c5f62
     8a4:	745f706f 	ldrbvc	r7, [pc], #-111	; 8ac <root+0x388>
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	756f7268 	strbvc	r7, [pc, #-616]!	; 648 <root+0x124>
		response_checker[0] = delete_record->request_number;
     8ac:	645f6867 	ldrbvs	r6, [pc], #-2151	; 8b4 <root+0x390>
     8b0:	00617461 	rsbeq	r7, r1, r1, ror #8
		call sender(&delete_record, wait);
     8b4:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
     8b8:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 36c <receiver+0x19c>
     8bc:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     8c0:	626d5f00 	rsbvs	r5, sp, #0, 30
     8c4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8cc:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	756f6268 	strbvc	r6, [pc, #-616]!	; 670 <root+0x14c>
     8d4:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8d8:	006b6365 	rsbeq	r6, fp, r5, ror #6
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	5f746573 	svcpl	0x00746573
     8e0:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
			proceed error;
     8e4:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
     8e8:	73797300 	cmnvc	r9, #0, 6
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	5f6d6574 	svcpl	0x006d6574
     8f0:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f4:	6f635f74 	svcvs	0x00635f74
     8f8:	00746e75 	rsbseq	r6, r4, r5, ror lr
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     900:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
		retrieve_record->gid = node_db->gid;
     904:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
     908:	64707165 	ldrbtvs	r7, [r0], #-357	; 0xfffffe9b
     90c:	685f006d 	ldmdavs	pc, {r0, r2, r3, r5, r6}^	; <UNPREDICTABLE>
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
		retrieve_record->request_number = generate_request_num();
     914:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
     918:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
		retrieve_record->sender_id = node_db->id;
     91c:	6f006f6c 	svcvs	0x00006f6c
		response_checker[0] = retrieve_record->request_number;
     920:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
		retrieve_record->record_index = user_provided_index;
     928:	5f006d75 	svcpl	0x00006d75
		call sender(&retrieve_record, wait);
     92c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		response_checker[1] = retrieve_record->tpe;
     930:	6d5f6261 	lfmvs	f6, 2, [pc, #-388]	; 7b4 <root+0x290>
     934:	00756e65 	rsbseq	r6, r5, r5, ror #28
		call sender(&retrieve_record, wait);
     938:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     93c:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     940:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
     944:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     94c:	61755f69 	cmnvs	r5, r9, ror #30
		if(node_db->data_base.item_count != 0){
     950:	41007472 	tstmi	r0, r2, ror r4
     954:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
		proceed menu;
     958:	63655343 	cmnvs	r5, #201326593	; 0xc000001
     95c:	00746547 	rsbseq	r6, r4, r7, asr #10
		delete_all(node_db);
     960:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     964:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
		proceed menu;
     968:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
		delay(3000, timeout);
     96c:	63740074 	cmnvs	r4, #116	; 0x74
     970:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffffa02 <_estack+0xdfffaa02>
     974:	5f5f0074 	svcpl	0x005f0074
		when(&response_flag, menu);
     978:	616c7473 	smcvs	51011	; 0xc743
     97c:	69665f62 	stmdbvs	r6!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	705f646e 	subsvc	r6, pc, lr, ror #8
     984:	6f746f72 	svcvs	0x00746f72
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	6174735f 	cmnvs	r4, pc, asr r3
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
     990:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
     994:	5f455645 	svcpl	0x00455645
     998:	4f434552 	svcmi	0x00434552
     99c:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
     9a0:	6f637369 	svcvs	0x00637369
     9a4:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     9ac:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
     9b0:	5f006761 	svcpl	0x00006761
     9b4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
     9bc:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	6f665f64 	svcvs	0x00665f64
     9c4:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
		proceed menu;
     9c8:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	44006576 	strmi	r6, [r0], #-1398	; 0xfffffa8a
     9d0:	4f435349 	svcmi	0x00435349
     9d4:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
		proceed menu;
     9d8:	5345525f 	movtpl	r5, #21087	; 0x525f
}
     9dc:	534e4f50 	movtpl	r4, #61264	; 0xef50
     9e0:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
     9e4:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9e8:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
     9ec:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     9f0:	5f5f0064 	svcpl	0x005f0064
     9f4:	685f6970 	ldmdavs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
     9f8:	655f7865 	ldrbvs	r7, [pc, #-2149]	; 19b <generate_request_num+0xf>
     9fc:	745f636e 	ldrbvc	r6, [pc], #-878	; a04 <root+0x4e0>
     a00:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     a04:	735f5f00 	cmpvc	pc, #0, 30
     a08:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a0c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     a10:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     a14:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     a18:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
     a1c:	5f746e65 	svcpl	0x00746e65
     a20:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     a24:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a28:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 860 <root+0x33c>
     a2c:	61747362 	cmnvs	r4, r2, ror #6
static void devinit_uart (int devnum) {
     a30:	5f006574 	svcpl	0x00006574
	adddevfunc (ioreq_uart_a, devnum);
     a34:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     a38:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
void udelay (volatile word n) {
     a3c:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     a40:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
	while (n) {
     a44:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     a48:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
}
     a4c:	76656972 			; <UNDEFINED> instruction: 0x76656972
	while (n--);
     a50:	5f5f0065 	svcpl	0x005f0065
     a54:	616c7473 	smcvs	51011	; 0xc743
     a58:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
		n--;
     a5c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     a60:	5f786564 	svcpl	0x00786564
     a64:	5f726f66 	svcpl	0x00726f66
void mdelay (volatile word n) {
     a68:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
     a6c:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
	while (n) {
     a70:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     a74:	7300746d 	movwvc	r7, #1133	; 0x46d
}
     a78:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
		udelay (999);
     a7c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     a80:	735f5f00 	cmpvc	pc, #0, 30
		n--;
     a84:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a88:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     a8c:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
     a90:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
void __pi_ondomain (lword d) {
     a94:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     a98:	5f64726f 	svcpl	0x0064726f
		if (__pi_systat.effpdm > 1)
     a9c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     aa0:	00656761 	rsbeq	r6, r5, r1, ror #14
			__pi_systat.effpdm = 1;
     aa4:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
	PRCMPowerDomainOn (d);
     aa8:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
     aac:	74736465 	ldrbtvc	r6, [r3], #-1125	; 0xfffffb9b
     ab0:	5f5f0073 	svcpl	0x005f0073
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	70006673 	andvc	r6, r0, r3, ror r6
     ab8:	6f696e69 	svcvs	0x00696e69
     abc:	00745f64 	rsbseq	r5, r4, r4, ror #30
	__pi_systat.ondmns |= d;
     ac0:	63775f5f 	cmnvs	r7, #380	; 0x17c
     ac4:	5f006268 	svcpl	0x00006268
}
     ac8:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
     acc:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
void __pi_offdomain (lword d) {
     ad0:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
     ad4:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
	PRCMPowerDomainOff (d);
     ad8:	5f5f0072 	svcpl	0x005f0072
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     ae0:	00726165 	rsbseq	r6, r2, r5, ror #2
     ae4:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     aec:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     af4:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	67617373 			; <UNDEFINED> instruction: 0x67617373
     afc:	5f5f0065 	svcpl	0x005f0065
	__pi_systat.ondmns &= ~d;
     b00:	616c7473 	smcvs	51011	; 0xc743
     b04:	73615f62 	cmnvc	r1, #392	; 0x188
}
     b08:	6f665f6b 	svcvs	0x00665f6b
     b0c:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
void __pi_syserror (word ec, const char *m) {
     b10:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
	diag ("SYSERR: %x, %s", ec, m);
     b14:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     b18:	76656972 			; <UNDEFINED> instruction: 0x76656972
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     b20:	00786564 	rsbseq	r6, r8, r4, ror #10
     b24:	52544552 	subspl	r4, r4, #343932928	; 0x14800000
     b28:	45564549 	ldrbmi	r4, [r6, #-1353]	; 0xfffffab7
		all_leds_blink;
     b2c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     b30:	5f00524f 	svcpl	0x0000524f
     b34:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     b38:	655f6261 	ldrbvs	r6, [pc, #-609]	; 8df <root+0x3bb>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     b40:	4c454400 	cfstrdmi	mvd4, [r5], {-0}
     b44:	5f455445 	svcpl	0x00455445
     b48:	4f434552 	svcmi	0x00434552
     b4c:	5f004452 	svcpl	0x00004452
     b50:	61636f6c 	cmnvs	r3, ip, ror #30
	while (1) {
     b54:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
     b58:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
     b5c:	755f0066 	ldrbvc	r0, [pc, #-102]	; afe <__pi_offdomain+0x2e>
     b60:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
void tci_run_delay_timer () {
     b64:	635f0064 	cmpvs	pc, #100	; 0x64
	setdel = __pi_mintk - __pi_old;
     b68:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
     b6c:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 9bc <root+0x498>
     b70:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
     b74:	6c5f0073 	mrrcvs	0, 7, r0, pc, cr3	; <UNPREDICTABLE>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b78:	5f613436 	svcpl	0x00613436
     b7c:	00667562 	rsbeq	r7, r6, r2, ror #10
     b80:	6b6c625f 	blvs	1b19504 <__ccfg+0x1af955c>
     b84:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	745f5f00 	ldrbvc	r5, [pc], #-3840	; b90 <tci_run_delay_timer+0x2c>
	sti_tim;
     b8c:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
}
     b90:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     b94:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     b98:	0064726f 	rsbeq	r7, r4, pc, ror #4
     b9c:	61765f5f 	cmnvs	r6, pc, asr pc
     ba0:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
	cli_aux;
     ba4:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     ba8:	006b636f 	rsbeq	r6, fp, pc, ror #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	61657243 	cmnvs	r5, r3, asr #4
     bb0:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     bb4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     bb8:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
	sti_aux;
     bbc:	00656761 	rsbeq	r6, r5, r1, ror #14
}
     bc0:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     bc4:	00737365 	rsbseq	r7, r3, r5, ror #6
     bc8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void AONRTCIntHandler () {
     bcc:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	63740072 	cmnvs	r4, #114	; 0x72
     bd4:	63725f76 	cmnvs	r2, #472	; 0x1d8
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	6e5f0076 	mrcvs	0, 2, r0, cr15, cr6, {3}
		if (__pi_utims [0] == 0)
     bdc:	73626f69 	cmnvc	r2, #420	; 0x1a4
     be0:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
		if (*(__pi_utims [0])) {
     be4:	00745f74 	rsbseq	r5, r4, r4, ror pc
     be8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			(*(__pi_utims [0]))--;
     bec:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
		if (__pi_utims [1] == 0)
     bf0:	5400745f 	strpl	r7, [r0], #-1119	; 0xfffffba1
		if (*(__pi_utims [1])) {
     bf4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			aux_timer_inactive = 0;
     bf8:	53494400 	movtpl	r4, #37888	; 0x9400
			(*(__pi_utims [1]))--;
     bfc:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
		if (__pi_utims [2] == 0)
     c00:	525f5952 	subspl	r5, pc, #1343488	; 0x148000
		if (*(__pi_utims [2])) {
     c04:	45555145 	ldrbmi	r5, [r5, #-325]	; 0xfffffebb
			(*(__pi_utims [2]))--;
     c08:	5f005453 	svcpl	0x00005453
		if (__pi_utims [3] != 0) {
     c0c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
			if (*(__pi_utims [3])) {
     c10:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
				aux_timer_inactive = 0;
     c14:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
				(*(__pi_utims [3]))--;
     c18:	6d5f4d52 	ldclvs	13, cr4, [pc, #-328]	; ad8 <__pi_offdomain+0x8>
	if (__pi_systat.ledsts) {
     c1c:	61737365 	cmnvs	r3, r5, ror #6
     c20:	5f006567 	svcpl	0x00006567
		if (__pi_systat.ledblc++ == 0) {
     c24:	5f6f7364 	svcpl	0x006f7364
     c28:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
			if (__pi_systat.ledblk) {
     c2c:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     c30:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; a80 <mdelay+0x18>
     c34:	5f676e69 	svcpl	0x00676e69
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	6b636170 	blvs	18d9200 <__ccfg+0x18b9258>
     c3c:	5f007465 	svcpl	0x00007465
				if (__pi_systat.ledsts & 0x2)
     c40:	5f69705f 	svcpl	0x0069705f
     c44:	5f007473 	svcpl	0x00007473
     c48:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
				if (__pi_systat.ledsts & 0x4)
     c4c:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
				__pi_systat.ledblk = 0;
     c50:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     c54:	7a696c61 	bvc	1a5bde0 <__ccfg+0x1a3be38>
			if (__pi_systat.fstblk)
     c58:	6f6e5f65 	svcvs	0x006e5f65
     c5c:	5f006564 	svcpl	0x00006564
				__pi_systat.ledblc = 200;
     c60:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
		cli_tim;
     c68:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
		__pi_new += setdel;
     c6c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     c70:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
		setdel = 0;
     c74:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		RISE_N_SHINE;
     c78:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
		__pi_new += setdel;
     c7c:	73660077 	cmnvc	r6, #119	; 0x77
		RISE_N_SHINE;
     c80:	646f636d 	strbtvs	r6, [pc], #-877	; c88 <AONRTCIntHandler+0xbc>
     c84:	454e0065 	strbmi	r0, [lr, #-101]	; 0xffffff9b
		aux_timer_inactive = 1;
     c88:	4f4e5f57 	svcmi	0x004e5f57
     c8c:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
				if (__pi_systat.ledsts & 0x1)
     c90:	5f004449 	svcpl	0x00004449
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c94:	4243505f 	submi	r5, r3, #95	; 0x5f
     c98:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
				if (__pi_systat.ledsts & 0x2)
     c9c:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
     ca0:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     ca4:	63740072 	cmnvs	r4, #114	; 0x72
				if (__pi_systat.ledsts & 0x8)
     ca8:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
				__pi_systat.ledblk = 1;
     cac:	6174006d 	cmnvs	r4, sp, rrx
     cb0:	5f006c69 	svcpl	0x00006c69
		if (aux_timer_inactive) {
     cb4:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; bb4 <tci_run_auxiliary_timer+0x10>
			cli_aux;
     cb8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     cbc:	6f6e5f74 	svcvs	0x006e5f74
     cc0:	5f006564 	svcpl	0x00006564
     cc4:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
     cc8:	61750066 	cmnvs	r5, r6, rrx
     ccc:	745f7472 	ldrbvc	r7, [pc], #-1138	; cd4 <AONRTCIntHandler+0x108>
     cd0:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     cd4:	61625f61 	cmnvs	r2, r1, ror #30
     cd8:	5f006573 	svcpl	0x00006573
     cdc:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
word tci_update_delay_ticks (Boolean force) {
     ce0:	735f5f00 	cmpvc	pc, #0, 30
	cli_tim;
     ce4:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     ce8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
	if (setdel) {
     cec:	6b6f7472 	blvs	1bddebc <__ccfg+0x1bbdf14>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; b2c <__pi_syserror+0x1c>
     cf8:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
     cfc:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	00657461 	rsbeq	r7, r5, r1, ror #8
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	63736964 	cmnvs	r3, #100, 18	; 0x190000
	return NO;
     d08:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
			setdel = 0;
     d0c:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     d14:	656d5f74 	strbvs	r5, [sp, #-3956]!	; 0xfffff08c
}
     d18:	67617373 			; <UNDEFINED> instruction: 0x67617373
		sti_tim;
     d1c:	5f5f0065 	svcpl	0x005f0065
		return YES;
     d20:	616c7473 	smcvs	51011	; 0xc743
     d24:	61775f62 	cmnvs	r7, r2, ror #30
     d28:	5f007469 	svcpl	0x00007469
     d2c:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	74007367 	strvc	r7, [r0], #-871	; 0xfffffc99
	UARTDisable (UART0_BASE);
     d34:	6c707663 	ldclvs	6, cr7, [r0], #-396	; 0xfffffe74
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	745f6775 	ldrbvc	r6, [pc], #-1909	; d40 <__pi_uart_setrate+0x10>
	UARTDisable (UART0_BASE);
     d3c:	735f5f00 	cmpvc	pc, #0, 30
	UARTConfigSetExpClk (UART0_BASE,
     d40:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     d44:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     d48:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     d4c:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	6f626867 	svcvs	0x00626867
     d54:	6e5f7275 	mrcvs	2, 2, r7, cr15, cr5, {3}
     d58:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     d60:	00746e65 	rsbseq	r6, r4, r5, ror #28
     d64:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
	urates [0] = rate;
     d68:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
}
     d6c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     d70:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     d74:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
     d78:	64617663 	strbtvs	r7, [r1], #-1635	; 0xfffff99d
     d7c:	00745f70 	rsbseq	r5, r4, r0, ror pc
     d80:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	5f747365 	svcpl	0x00747365
     d88:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     d8c:	5f007265 	svcpl	0x00007265
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     d94:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d98:	5f74696e 	svcpl	0x0074696e
     d9c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	725f6574 	subsvc	r6, pc, #116, 10	; 0x1d000000
     da4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     da8:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
     dac:	67617373 			; <UNDEFINED> instruction: 0x67617373
     db0:	5f5f0065 	svcpl	0x005f0065
     db4:	616c7473 	smcvs	51011	; 0xc743
     db8:	6f645f62 	svcvs	0x00645f62
	switch (operation) {
     dbc:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc0:	00657361 	rsbeq	r7, r5, r1, ror #6
     dc4:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
     dc8:	73657079 	cmnvc	r5, #121	; 0x79
     dcc:	735f5f00 	cmpvc	pc, #0, 30
     dd0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
				*buf++ = uart_a_read;
     dd4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     dd8:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
			while (len && uart_a_char_available) {
     ddc:	5f315f65 	svcpl	0x00315f65
     de0:	61657263 	cmnvs	r5, r3, ror #4
     de4:	5f006574 	svcpl	0x00006574
			if (len != operation) {
     de8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
     dec:	615f6261 	cmpvs	pc, r1, ror #4
     df0:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
			uart_a_disable_int;
     df4:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
			if (uart_a_char_available) {
     df8:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
				*buf++ = uart_a_read;
     dfc:	6f745f64 	svcvs	0x00745f64
			uart_a_disable_int;
     e00:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     e04:	00657461 	rsbeq	r7, r5, r1, ror #8
			if (uart_a_char_available) {
     e08:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d54 <__pi_uart_setrate+0x24>
     e0c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				uart_a_enable_int;
     e10:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
     e14:	6f442f6e 	svcvs	0x00442f6e
				goto Redo_rx;
     e18:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	2f73746e 	svccs	0x0073746e
     e20:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
			return -2;
     e24:	442f6275 	strtmi	r6, [pc], #-629	; e2c <ioreq_uart_a+0x70>
     e28:	72747369 	rsbsvc	r7, r4, #-1543503871	; 0xa4000001
				uart_a_write (*buf);
     e2c:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
     e30:	442d6465 	strtmi	r6, [sp], #-1125	; 0xfffffb9b
			while (len && uart_a_room_in_tx) {
     e34:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
     e38:	6f727453 	svcvs	0x00727453
     e3c:	2d656761 	stclcs	7, cr6, [r5, #-388]!	; 0xfffffe7c
			if (len != operation) {
     e40:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
			uart_a_disable_int;
     e44:	5f006d65 	svcpl	0x00006d65
     e48:	5f66666f 	svcpl	0x0066666f
			if (uart_a_room_in_tx) {
     e4c:	65440074 	strbvs	r0, [r4, #-116]	; 0xffffff8c
     e50:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
				uart_a_enable_int;
     e54:	6f636552 	svcvs	0x00636552
     e58:	654d6472 	strbvs	r6, [sp, #-1138]	; 0xfffffb8e
				*buf++ = uart_a_read;
     e5c:	67617373 			; <UNDEFINED> instruction: 0x67617373
			if (uart_a_room_in_tx) {
     e60:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
				uart_a_write (*buf);
     e64:	00667562 	rsbeq	r7, r6, r2, ror #10
     e68:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6c:	5f646573 	svcpl	0x00646573
     e70:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
			uart_a_enable_int;
     e74:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     e78:	63657073 	cmnvs	r5, #115	; 0x73
     e7c:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
			return 0;
     e80:	6f6c5f64 	svcvs	0x006c5f64
			if (len == UART_CNTRL_SETRATE) {
     e84:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
				if (__pi_uart_setrate (*((word*)buf),
     e88:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
     e8c:	4843006f 	stmdami	r3, {r0, r1, r2, r3, r5, r6}^
     e90:	4543494f 	strbmi	r4, [r3, #-2383]	; 0xfffff6b1
				syserror (EREQPAR, "uar");
     e94:	6c665f00 	stclvs	15, cr5, [r6], #-0
			syserror (ENOOPER, "uai");
     e98:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
			if (len == UART_CNTRL_GETRATE) {
     e9c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
				return 1;
     ea0:	646f6e5f 	strbtvs	r6, [pc], #-3679	; ea8 <ioreq_uart_a+0xec>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea4:	62645f65 	rsbvs	r5, r4, #404	; 0x194
			syserror (ENOOPER, "uai");
     ea8:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
     eac:	635f7972 	cmpvs	pc, #1867776	; 0x1c8000
     eb0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     eb4:	73695f00 	cmnvc	r9, #0, 30
     eb8:	6178635f 	cmnvs	r8, pc, asr r3
     ebc:	61725f00 	cmnvs	r2, r0, lsl #30
     ec0:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
     ec4:	00747865 	rsbseq	r7, r4, r5, ror #16
     ec8:	6f6c5f5f 	svcvs	0x006c5f5f
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
void UART0IntHandler () {
     ed0:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     ed8:	705f7473 	subsvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
     edc:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
     ee0:	735f0074 	cmpvc	pc, #116	; 0x74
     ee4:	006b6565 	rsbeq	r6, fp, r5, ror #10
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
     eec:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
		RISE_N_SHINE;
     ef0:	6f636552 	svcvs	0x00636552
     ef4:	654d6472 	strbvs	r6, [sp, #-1138]	; 0xfffffb8e
		i_trigger (devevent (UART_A, READ));
     ef8:	67617373 			; <UNDEFINED> instruction: 0x67617373
     efc:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
     f00:	6e655f77 	mcrvs	15, 3, r5, cr5, cr7, {3}
     f04:	00797274 	rsbseq	r7, r9, r4, ror r2
     f08:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     f0c:	00727265 	rsbseq	r7, r2, r5, ror #4
     f10:	616d6e5f 	cmnvs	sp, pc, asr lr
     f14:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     f18:	62755f00 	rsbsvs	r5, r5, #0, 30
     f1c:	43006675 	movwmi	r6, #1653	; 0x675
     f20:	54414552 	strbpl	r4, [r1], #-1362	; 0xfffffaae
     f24:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xfffff0bb
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	44524f43 	ldrbmi	r4, [r2], #-3907	; 0xfffff0bd
     f2c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     f30:	5f657465 	svcpl	0x00657465
		i_trigger (devevent (UART_A, WRITE));
     f34:	006c6c61 	rsbeq	r6, ip, r1, ror #24
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	70666665 	rsbvc	r6, r6, r5, ror #12
     f3c:	6f006d64 	svcvs	0x00006d64
		RISE_N_SHINE;
     f40:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
     f44:	0064695f 	rsbeq	r6, r4, pc, asr r9
     f48:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
		i_trigger (devevent (UART_A, WRITE));
     f4c:	50470074 	subpl	r0, r7, r4, ror r0
     f50:	735f4f49 	cmpvc	pc, #292	; 0x124
     f54:	754f7465 	strbvc	r7, [pc, #-1125]	; af7 <__pi_offdomain+0x27>
     f58:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     f5c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     f60:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
     f64:	4f41006f 	svcmi	0x0041006f
     f68:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     f6c:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
     f70:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     f74:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
}
     f78:	6f4d3233 	svcvs	0x004d3233
     f7c:	5f006564 	svcpl	0x00006564
     f80:	5f69705f 	svcpl	0x0069705f
     f84:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
     f88:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
void __buttons_setirq (int val) {
     f8c:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	76617474 			; <UNDEFINED> instruction: 0x76617474
     f94:	61727500 	cmnvs	r2, r0, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     f98:	00736574 	rsbseq	r6, r3, r4, ror r5
     f9c:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
     fa0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	7172695f 	cmnvc	r2, pc, asr r9
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
     fac:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
     fb0:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     fb4:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
     fb8:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     fbc:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
}
     fc0:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
     fc4:	6b615778 	blvs	1856dac <__ccfg+0x1836e04>
     fc8:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
     fcc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
void __pinlist_setirq (int val) {
     fd0:	4e4f4100 	dvfmie	f4, f7, f0
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	50435557 	subpl	r5, r3, r7, asr r5
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	41550074 	cmpmi	r5, r4, ror r0
     fe8:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
     ff0:	73007261 	movwvc	r7, #609	; 0x261
     ff4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
}
     ffc:	41007469 	tstmi	r0, r9, ror #8
    1000:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
    1004:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
    1008:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
void GPIOIntHandler () {
    100c:	616e456e 	cmnvs	lr, lr, ror #10
if (buttons_int) {
    1010:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1014:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
	buttons_disable ();
    1018:	50006c65 	andpl	r6, r0, r5, ror #24
    101c:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
	i_trigger ((aword)&__button_list);
    1020:	6f507563 	svcvs	0x00507563
    1024:	4f726577 	svcmi	0x00726577
    1028:	5f006666 	svcpl	0x00006666
    102c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1030:	50534d5f 	subspl	r4, r3, pc, asr sp
    1034:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    1038:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    103c:	5f00745f 	svcpl	0x0000745f
    1040:	5f69705f 	svcpl	0x0069705f
    1044:	6f646e6f 	svcvs	0x00646e6f
    1048:	6e69616d 	powvsez	f6, f1, #5.0
	RISE_N_SHINE;
    104c:	52415500 	subpl	r5, r1, #0, 10
    1050:	46774854 			; <UNDEFINED> instruction: 0x46774854
    1054:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
if (pin_sensor_int) {
    1058:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    105c:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
	i_trigger ((aword)(&__input_pins));
    1060:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1064:	5f5f0065 	svcpl	0x005f0065
    1068:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 700 <root+0x1dc>
    106c:	5f747261 	svcpl	0x00747261
    1070:	72746567 	rsbsvc	r6, r4, #432013312	; 0x19c00000
    1074:	00657461 	rsbeq	r7, r5, r1, ror #8
    1078:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
    107c:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
    1080:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
    1084:	61736944 	cmnvs	r3, r4, asr #18
    1088:	00656c62 	rsbeq	r6, r5, r2, ror #24
	__pinsen_disable_and_clear;
    108c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	RISE_N_SHINE;
    1090:	654c7852 	strbvs	r7, [ip, #-2130]	; 0xfffff7ae
    1094:	006c6576 	rsbeq	r6, ip, r6, ror r5
    1098:	6f646552 	svcvs	0x00646552
}
    109c:	0078725f 	rsbseq	r7, r8, pc, asr r2
    10a0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    10a4:	654c7854 	strbvs	r7, [ip, #-2132]	; 0xfffff7ac
    10a8:	006c6576 	rsbeq	r6, ip, r6, ror r5
    10ac:	43737953 	cmnmi	r3, #1359872	; 0x14c000
void system_init () {
    10b0:	436c7274 	cmnmi	ip, #116, 4	; 0x40000007
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	6b636f6c 	blvs	18dce6c <__ccfg+0x18bcec4>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	00746547 	rsbseq	r6, r4, r7, asr #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    10c0:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    10c4:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c8:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    10cc:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    10d4:	43525000 	cmpmi	r2, #0
    10d8:	616f4c4d 	cmnvs	pc, sp, asr #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	74655364 	strbtvc	r5, [r5], #-868	; 0xfffffc9c
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	33697500 	cmncc	r9, #0, 10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	616e4532 	cmnvs	lr, r2, lsr r5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ec:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	755f656c 	ldrbvc	r6, [pc, #-1388]	; b8c <tci_run_delay_timer+0x28>
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	5f747261 	svcpl	0x00747261
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
		pin = (port_confs [i] >> 19) & 0x1f;
    10fc:	70757272 	rsbsvc	r7, r5, r2, ror r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
    1104:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
    1108:	454f4649 	strbmi	r4, [pc, #-1609]	; ac7 <__pi_ondomain+0x33>
    110c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		if (port_confs [i] & 0x80)
    1110:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1114:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
    1118:	616c4674 	smcvs	50276	; 0xc464
		if (port_confs [i] & 0x40)
    111c:	64007367 	strvs	r7, [r0], #-871	; 0xfffffc99
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	754e6f69 	strbvc	r6, [lr, #-3945]	; 0xfffff097
    1124:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112c:	61755f69 	cmnvs	r5, r9, ror #30
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1130:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
	all_leds_blink;
    1134:	61727465 	cmnvs	r2, r5, ror #8
    1138:	50006574 	andpl	r6, r0, r4, ror r5
    113c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1140:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1144:	72464f49 	subvc	r4, r6, #292	; 0x124
    1148:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
    114c:	61736944 	cmnvs	r3, r4, asr #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1150:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1154:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    1158:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    115c:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
    1160:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    116c:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
	IntEnable (INT_AON_RTC_COMB);
    1170:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
    1174:	6f6d7265 	svcvs	0x006d7265
    1178:	6f006564 	svcvs	0x00006564
	__pi_malloc_init ();
    117c:	61726570 	cmnvs	r2, r0, ror r5
	IntEnable (INT_AON_GPIO_EDGE);
    1180:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1184:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1190:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
    1194:	00657669 	rsbeq	r7, r5, r9, ror #12
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    119c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
    11a4:	5f6f6465 	svcpl	0x006f6465
    11a8:	75007874 	strvc	r7, [r0, #-2164]	; 0xfffff78c
	urates [0] = UART_RATE / 100;
    11ac:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    11b0:	6156636e 	cmpvs	r6, lr, ror #6
	reinit_uart ();
    11b4:	0065756c 	rsbeq	r7, r5, ip, ror #10
	EXTRA_INITIALIZERS;
    11b8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    11bc:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11c0:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 11c8 <system_init+0x118>
    11c4:	66775f6f 	ldrbtvs	r5, [r7], -pc, ror #30
    11c8:	73615f69 	cmnvc	r1, #420	; 0x1a4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	65656e5f 	strbvs	r6, [r5, #-3679]!	; 0xfffff1a1
    11d0:	00646564 	rsbeq	r6, r4, r4, ror #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	524e4f41 	subpl	r4, lr, #260	; 0x104
    11d8:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
			devinit [i] . init (devinit [i] . param);
    11dc:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	68436575 	stmdavs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    11e4:	74655332 	strbtvc	r5, [r5], #-818	; 0xfffffcce
    11e8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
	IntEnable (INT_UART0_COMB);
    11ec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    11f0:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
}
    11f4:	4f410074 	svcmi	0x00410074
	tci_run_auxiliary_timer ();
    11f8:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
		diag ("");
    11fc:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    1200:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	70007265 	andvc	r7, r0, r5, ror #4
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
		diag ("Leftover RAM: %d bytes",
    120c:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
    1210:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
    1214:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1218:	745f7961 	ldrbvc	r7, [pc], #-2401	; 1220 <system_init+0x170>
    121c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1220:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1224:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1228:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    122c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    1230:	70006f64 	andvc	r6, r0, r4, ror #30
    1234:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    1238:	755f7469 	ldrbvc	r7, [pc, #-1129]	; dd7 <ioreq_uart_a+0x1b>
    123c:	00747261 	rsbseq	r7, r4, r1, ror #4
    1240:	63726f66 	cmnvs	r2, #408	; 0x198
    1244:	41550065 	cmpmi	r5, r5, rrx
    1248:	6e455452 	mcrvs	4, 2, r5, cr5, cr2, {2}
    124c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1250:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1254:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
    1258:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0xfffffe9b
    125c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1260:	006f6944 	rsbeq	r6, pc, r4, asr #18
    1264:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    126c:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    1270:	71726974 	cmnvc	r2, r4, ror r9
    1274:	65646d00 	strbvs	r6, [r4, #-3328]!	; 0xfffff300
    1278:	0079616c 	rsbseq	r6, r9, ip, ror #2
    127c:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1280:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1284:	72695f65 	rsbvc	r5, r9, #404	; 0x194
}
    1288:	682f0071 	stmdavs	pc!, {r0, r4, r5, r6}	; <UNPREDICTABLE>
__attribute__ ((noreturn)) void __pi_release () {
    128c:	2f656d6f 	svccs	0x00656d6f
    1290:	70657473 	rsbvc	r7, r5, r3, ror r4
    1294:	2f6e6568 	svccs	0x006e6568
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	6b736544 	blvs	1cda7b0 <__ccfg+0x1cba808>
	check_stack_overflow;
    129c:	2f706f74 	svccs	0x00706f74
    12a0:	4f534c4f 	svcmi	0x00534c4f
    12a4:	2f54454e 	svccs	0x0054454e
	update_n_wake (MAX_WORD, NO);
    12a8:	4f434950 	svcmi	0x00434950
    12ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    12b0:	2f534f63 	svccs	0x00534f63
	for_all_tasks (__pi_curr) {
    12b4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    12b8:	6d2f5858 	stcvs	8, cr5, [pc, #-352]!	; 1160 <system_init+0xb0>
    12bc:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	50470063 	subpl	r0, r7, r3, rrx
	__SLEEP;
    12c4:	635f4f49 	cmpvs	pc, #292	; 0x124
    12c8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    12cc:	006f6944 	rsbeq	r6, pc, r4, asr #18
    12d0:	43737953 	cmnmi	r3, #1359872	; 0x14c000
	system_event_count ++;
    12d4:	416c7274 	smcmi	50980	; 0xc724
    12d8:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	switch (__pi_systat.effpdm) {
    12dc:	5f00636e 	svcpl	0x0000636e
    12e0:	5f69705f 	svcpl	0x0069705f
    12e4:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    12e8:	6572666b 	ldrbvs	r6, [r2, #-1643]!	; 0xfffff995
			__WFI ();
    12ec:	63740065 	cmnvs	r4, #101	; 0x65
    12f0:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
    12f4:	75615f6e 	strbvc	r5, [r1, #-3950]!	; 0xfffff092
	check_stack_overflow;
    12f8:	696c6978 	stmdbvs	ip!, {r3, r4, r5, r6, r8, fp, sp, lr}^
    12fc:	5f797261 	svcpl	0x00797261
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1304:	5f5f0072 	svcpl	0x005f0072
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	6c6e6970 			; <UNDEFINED> instruction: 0x6c6e6970
			goto Redo;
    130c:	5f747369 	svcpl	0x00747369
	for_all_tasks (__pi_curr) {
    1310:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	47007172 	smlsdxmi	r0, r2, r1, r7
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	494f4950 	stmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    131c:	6148746e 	cmpvs	r8, lr, ror #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1324:	6f420072 	svcvs	0x00420072
    1328:	61656c6f 	cmnvs	r5, pc, ror #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    132c:	4155006e 	cmpmi	r5, lr, rrx
    1330:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	654c4f46 	strbvs	r4, [ip, #-3910]	; 0xfffff0ba
    1338:	536c6576 	cmnpl	ip, #494927872	; 0x1d800000
			__WFI ();
    133c:	53007465 	movwpl	r7, #1125	; 0x465
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1340:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    1344:	79536c72 	ldmdbvc	r3, {r1, r4, r5, r6, sl, fp, sp, lr}^
}
    1348:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	76617474 			; <UNDEFINED> instruction: 0x76617474
    1358:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0xfffffb00
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135c:	0073746e 	rsbseq	r7, r3, lr, ror #8
    1360:	6c656475 	cfstrdvs	mvd6, [r5], #-468	; 0xfffffe2c
    1364:	41007961 	tstmi	r0, r1, ror #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	61424e4f 	cmpvs	r2, pc, asr #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
    1370:	61736944 	cmnvs	r3, r4, asr #18
    1374:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1378:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    1380:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1388:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
    138c:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
    1390:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1394:	4100656c 	tstmi	r0, ip, ror #10
    1398:	61424e4f 	cmpvs	r2, pc, asr #28
			SysCtrlSetRechargeBeforePowerDown
    139c:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a4:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
    13a8:	61746c6f 	cmnvs	r4, pc, ror #24
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
    13b0:	6f690074 	svcvs	0x00690074
    13b4:	5f716572 	svcpl	0x00716572
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    13bc:	5f00615f 	svcpl	0x0000615f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	5f69705f 	svcpl	0x0069705f
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    13c8:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
    13cc:	4700746e 	strmi	r7, [r0, -lr, ror #8]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	5f4f4950 	svcpl	0x004f4950
			while (!(AONWUCPowerStatusGet () &
    13d4:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	64006f69 	strvs	r6, [r0], #-3945	; 0xfffff097
    13dc:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    13e0:	5f007469 	svcpl	0x00007469
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	5f69705f 	svcpl	0x0069705f
    13e8:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
    13ec:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    13f0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	006d756e 	rsbeq	r7, sp, lr, ror #10
    13f8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1400:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
			reinit_uart ();
    1408:	55007972 	strpl	r7, [r0, #-2418]	; 0xfffff68e
    140c:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
    1410:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
}
    1414:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1418:	43525000 	cmpmi	r2, #0
    141c:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	6f646c55 	svcvs	0x00646c55
    1424:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1428:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	756f0065 	strbvc	r0, [pc, #-101]!	; 13cf <__pi_release+0x143>
    1430:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1434:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	6156656c 	cmpvs	r6, ip, ror #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	706f7400 	rsbvc	r7, pc, r0, lsl #8
    1448:	614d664f 	cmpvs	sp, pc, asr #12
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    144c:	74536e69 	ldrbvc	r6, [r3], #-3689	; 0xfffff197
    1450:	006b6361 	rsbeq	r6, fp, r1, ror #6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1454:	6564675f 	strbvs	r6, [r4, #-1887]!	; 0xfffff8a1
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1458:	0079616c 	rsbseq	r6, r9, ip, ror #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145c:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    1460:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
			PRCMPowerDomainOff (
    1464:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1468:	0072656c 	rsbseq	r6, r2, ip, ror #10
	__SLEEP;
    146c:	70656544 	rsbvc	r6, r5, r4, asr #10
    1470:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
  __ASM volatile ("cpsie i" : : : "memory");
    1474:	6f700070 	svcvs	0x00700070
	goto Redo;
    1478:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
    147c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1480:	63740067 	cmnvs	r4, #103	; 0x67
    1484:	70755f69 	rsbsvc	r5, r5, r9, ror #30
    1488:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    148c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1490:	745f7961 	ldrbvc	r7, [pc], #-2401	; 1498 <__pi_release+0x20c>
    1494:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    1498:	61654d00 	cmnvs	r5, r0, lsl #26
    149c:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
    14a0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    14a4:	66716572 			; <UNDEFINED> instruction: 0x66716572
    14a8:	745f6e75 	ldrbvc	r6, [pc], #-3701	; 14b0 <__pi_release+0x224>
    14ac:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    14b0:	0076656c 	rsbseq	r6, r6, ip, ror #10
    14b4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    14b8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    14bc:	00797063 	rsbseq	r7, r9, r3, rrx
    14c0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    14c4:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
    14c8:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    14cc:	61776e75 	cmnvs	r7, r5, ror lr
    14d0:	71007469 	tstvc	r0, r9, ror #8
    14d4:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    14d8:	726f6900 	rsbvc	r6, pc, #0, 18
    14dc:	5f007165 	svcpl	0x00007165
    14e0:	5f69705f 	svcpl	0x0069705f
	cli_tim;
    14e4:	6b726f66 	blvs	1c9d284 <__ccfg+0x1c7d2dc>
    14e8:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    14ec:	706d006c 	rsbvc	r0, sp, ip, rrx
	diag ("PicOS halted");
    14f0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
	mdelay (500);
    14f4:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
    14f8:	5f72656d 	svcpl	0x0072656d
	setpowermode (2);
    14fc:	00646461 	rsbeq	r6, r4, r1, ror #8
	__PCB = NULL;
    1500:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	release;
    1504:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    1508:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    150c:	616d5f69 	cmnvs	sp, r9, ror #30
    1510:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
int main (void) {
    1514:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	5f5f0074 	svcpl	0x005f0074
    151c:	745f6970 	ldrbvc	r6, [pc], #-2416	; 1524 <main+0x10>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	67676972 			; <UNDEFINED> instruction: 0x67676972
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	5f007265 	svcpl	0x00007265
	system_init ();
    1528:	5f69705f 	svcpl	0x0069705f
	tcv_init ();
    152c:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1530:	5f006e65 	svcpl	0x00006e65
    1534:	5f69705f 	svcpl	0x0069705f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	6678616d 	ldrbtvs	r6, [r8], -sp, ror #2
    153c:	00656572 	rsbeq	r6, r5, r2, ror r5
    1540:	6e757263 	cdpvs	2, 7, cr7, cr5, cr3, {3}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1544:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1548:	68636e00 	stmdavs	r3!, {r9, sl, fp, sp, lr}^
	delay (16, 0);
    154c:	6e6d006b 	cdpvs	0, 6, cr0, cr13, cr11, {3}
    1550:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1554:	6f727000 	svcvs	0x00727000
	__pi_release ();
    1558:	64656563 	strbtvs	r6, [r5], #-1379	; 0xfffffa9d
    155c:	656c6d00 	strbvs	r6, [ip, #-3328]!	; 0xfffff300
    1560:	5f5f006e 	svcpl	0x005f006e
    1564:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    1568:	67697274 			; <UNDEFINED> instruction: 0x67697274
    156c:	00726567 	rsbseq	r6, r2, r7, ror #10
    1570:	64646461 	strbtvs	r6, [r4], #-1121	; 0xfffffb9f
static void killev (__pi_pcb_t *pid) {
    1574:	75667665 	strbvc	r7, [r6, #-1637]!	; 0xfffff99b
	wfun = (aword)(pid->code);
    1578:	7000636e 	andvc	r6, r0, lr, ror #6
	for_all_tasks (i) {
    157c:	65766469 	ldrbvs	r6, [r6, #-1129]!	; 0xfffffb97
		for (j = 0; j < nevents (i); j++) {
    1580:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    1584:	5f006761 	svcpl	0x00006761
    1588:	5f69705f 	svcpl	0x0069705f
			    || i->Events [j] . Event == wfun
    158c:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
		for (j = 0; j < nevents (i); j++) {
    1590:	6d007461 	cfstrsvs	mvf7, [r0, #-388]	; 0xfffffe7c
			if (i->Events [j] . Event == (aword)pid
    1594:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    1598:	00745f74 	rsbseq	r5, r4, r4, ror pc
    159c:	7266636d 	rsbvc	r6, r6, #-1275068415	; 0xb4000001
				wakeupev (i, j);
    15a0:	77006565 	strvc	r6, [r0, -r5, ror #10]
    15a4:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
	for_all_tasks (i) {
    15a8:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
}
    15ac:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	00747365 	rsbseq	r7, r4, r5, ror #6
static void qfree (aword *ch) {
    15b4:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b8:	6f682f00 	svcvs	0x00682f00
	cc = (aword*)(mpools + MA_NP);
    15bc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	m_setnextp (ch, chunk);
    15c0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	m_setnextp (cc, ch);
    15c4:	442f6e65 	strtmi	r6, [pc], #-3685	; 15cc <qfree+0x1c>
}
    15c8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15cc:	4f2f706f 	svcmi	0x002f706f
    15d0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    15d4:	502f5445 	eorpl	r5, pc, r5, asr #8
			m_setnextp (cc, m_nextp (chunk));
    15d8:	534f4349 	movtpl	r4, #62281	; 0xf349
			m_size (chunk) += m_hdrlen + m_size (ch);
    15dc:	6369502f 	cmnvs	r9, #47	; 0x2f
    15e0:	6b2f534f 	blvs	bd6324 <__ccfg+0xbb637c>
    15e4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    15e8:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15ec:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f0:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    15f4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    15f8:	5f5f0074 	svcpl	0x005f0074
			m_setnextp (cc, m_nextp (chunk));
    15fc:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
			m_size (ch) += m_hdrlen + m_size (chunk);
    1600:	74736461 	ldrbtvc	r6, [r3], #-1121	; 0xfffffb9f
    1604:	00657461 	rsbeq	r7, r5, r1, ror #8
    1608:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    160c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1610:	5f5f0074 	svcpl	0x005f0074
    1614:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
			if (m_size (chunk) >= m_size (ch))
    1618:	6d746961 			; <UNDEFINED> instruction: 0x6d746961
    161c:	6c006d65 	stcvs	13, cr6, [r0], {101}	; 0x65
    1620:	00646e72 	rsbeq	r6, r4, r2, ror lr
		chunk = m_nextp (chunk))
    1624:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1628:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    162c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1630:	75686300 	strbvc	r6, [r8, #-768]!	; 0xfffffd00
	diag_wait (a);
    1634:	75006b6e 	strvc	r6, [r0, #-2926]	; 0xfffff492
	diag_wchar (c, a);
    1638:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    163c:	5f6e5f65 	svcpl	0x006e5f65
}
    1640:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
    1644:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	syserror (ESTATE, "state");
    1648:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xfffff097
    164c:	67006465 	strvs	r6, [r0, -r5, ror #8]
    1650:	6f637465 	svcvs	0x00637465
    1654:	64006564 	strvs	r6, [r0], #-1380	; 0xfffffa9c
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
void utimer_add (address ut) {
    165c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1660:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
		if (__pi_utims [i] == NULL)
    1664:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
	for (i = 0; i < MAX_UTIMERS; i++)
    1668:	6f676400 	svcvs	0x00676400
    166c:	5f007475 	svcpl	0x00007475
		syserror (ERESOURCE, "ut a");
    1670:	5f69705f 	svcpl	0x0069705f
	__pi_utims [i] = ut;
    1674:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
}
    1678:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
    167c:	77007465 	strvc	r7, [r0, -r5, ror #8]
    1680:	006e7566 	rsbeq	r7, lr, r6, ror #10
	*t = v;
    1684:	6961666e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
	TCI_RUN_AUXILIARY_TIMER;
    1688:	5f5f006c 	svcpl	0x005f006c
void update_n_wake (word min, Boolean force) {
    168c:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
	if (TCI_UPDATE_DELAY_TICKS (force))
    1690:	00656572 	rsbeq	r6, r5, r2, ror r5
    1694:	535f4944 	cmppl	pc, #68, 18	; 0x110000
    1698:	5f004749 	svcpl	0x00004749
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169c:	5f69705f 	svcpl	0x0069705f
    16a0:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    16a4:	6b007465 	blvs	1e840 <__exidx_end+0x18f28>
    16a8:	616c6c69 	cmnvs	ip, r9, ror #24
    16ac:	5f006c6c 	svcpl	0x00006c6c
    16b0:	5f69705f 	svcpl	0x0069705f
    16b4:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    16b8:	00797063 	rsbseq	r7, r9, r3, rrx
    16bc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    16c0:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    16c4:	7475006e 	ldrbtvc	r0, [r5], #-110	; 0xffffff92
    16c8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    16cc:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
		for_all_tasks (i) {
    16d0:	00657465 	rsbeq	r7, r5, r5, ror #8
	__pi_mintk = znew + min;
    16d4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    16d8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
			if (!twaiting (i))
    16dc:	7461636e 	strbtvc	r6, [r1], #-878	; 0xfffffc92
    16e0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e4:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    16e8:	7000657a 	andvc	r6, r0, sl, ror r5
    16ec:	00766572 	rsbseq	r6, r6, r2, ror r5
    16f0:	63745f5f 	cmnvs	r4, #380	; 0x17c
    16f4:	61625f76 	smcvs	9718	; 0x25f6
    16f8:	5f727474 	svcpl	0x00727474
    16fc:	63740074 	cmnvs	r4, #116	; 0x74
    1700:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    1704:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
    1708:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    170c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1710:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1548 <main+0x34>
				wakeuptm (i);
    1714:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1718:	6165725f 	cmnvs	r5, pc, asr r2
		for_all_tasks (i) {
    171c:	63740064 	cmnvs	r4, #100	; 0x64
				d = i->Timer - znew;
    1720:	645f7076 	ldrbvs	r7, [pc], #-118	; 1728 <update_n_wake+0x9c>
    1724:	6f707369 	svcvs	0x00707369
    1728:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
		if ((word)(__pi_mintk - znew) < min) 
    172c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    1730:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
    1734:	74630067 	strbtvc	r0, [r3], #-103	; 0xffffff99
	__pi_old = znew;
    1738:	75666c72 	strbvc	r6, [r6, #-3186]!	; 0xfffff38e
}
    173c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
	TCI_RUN_DELAY_TIMER;
    1740:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 168c <update_n_wake>
}
    1744:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    1748:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    174c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1750:	6f746b73 	svcvs	0x00746b73
    1754:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
void proceed (word state) {
    1758:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	prcdstate (__pi_curr, state);
    175c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1760:	2f534f43 	svccs	0x00534f43
	release;
    1764:	4f636950 	svcmi	0x00636950
    1768:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
void __pi_wait (aword event, word state) {
    176c:	2f736269 	svccs	0x00736269
	sint j = nevents (__pi_curr);
    1770:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	63742f49 	cmnvs	r4, #292	; 0x124
    1778:	00632e76 	rsbeq	r2, r3, r6, ror lr
    177c:	70766374 	rsbsvc	r6, r6, r4, ror r3
		syserror (ENEVENTS, "sw");
    1780:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
    1784:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
	setestate (__pi_curr->Events [j], state, event);
    1788:	6f5f7663 	svcvs	0x005f7663
	incwait (__pi_curr);
    178c:	006e6570 	rsbeq	r6, lr, r0, ror r5
	setestate (__pi_curr->Events [j], state, event);
    1790:	5f766374 	svcpl	0x00766374
}
    1794:	706f7264 	rsbvc	r7, pc, r4, ror #4
    1798:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    179c:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
void __pi_trigger (aword event) {
    17a0:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
	for_all_tasks (i) {
    17a4:	00797470 	rsbseq	r7, r9, r0, ror r4
		for (j = 0; j < nevents (i); j++) {
    17a8:	70766374 	rsbsvc	r6, r6, r4, ror r3
    17ac:	655f7968 	ldrbvs	r7, [pc, #-2408]	; e4c <ioreq_uart_a+0x90>
    17b0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    17b4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			if (i->Events [j] . Event == event) {
    17b8:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
    17bc:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
    17c0:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
				wakeupev (i, j);
    17c4:	73657565 	cmnvc	r5, #423624704	; 0x19400000
    17c8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17d0 <__pi_trigger+0x30>
	for_all_tasks (i) {
    17cc:	715f7663 	cmpvc	pc, r3, ror #12
}
    17d0:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
aword __pi_join (aword pid, word st) {
    17d4:	5f00735f 	svcpl	0x0000735f
	for_all_tasks (i) {
    17d8:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    17dc:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
	return 0;
    17e0:	745f6d65 	ldrbvc	r6, [pc], #-3429	; 17e8 <__pi_join+0x14>
		if ((aword)i == pid) {
    17e4:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17ec <__pi_join+0x18>
			__pi_wait (pid, st);
    17e8:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
}
    17ec:	636f6c62 	cmnvs	pc, #25088	; 0x6200
	for_all_tasks (i) {
    17f0:	00745f6b 	rsbseq	r5, r4, fp, ror #30
    17f4:	70747461 	rsbsvc	r7, r4, r1, ror #8
void delay (word d, word state) {
    17f8:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
	settstate (__pi_curr, state);
    17fc:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1800:	725f7245 	subsvc	r7, pc, #1342177284	; 0x50000004
    1804:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    1808:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
	update_n_wake (d, YES);
    180c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    1810:	63740073 	cmnvs	r4, #115	; 0x73
	__pi_curr->Timer = __pi_old + d;
    1814:	72655f76 	rsbvc	r5, r5, #472	; 0x1d8
    1818:	00657361 	rsbeq	r7, r5, r1, ror #6
	inctimer (__pi_curr);
    181c:	5f766374 	svcpl	0x00766374
    1820:	70646e65 	rsbvc	r6, r4, r5, ror #28
    1824:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
}
    1828:	656e5f70 	strbvs	r5, [lr, #-3952]!	; 0xfffff090
    182c:	71720077 	cmnvc	r2, r7, ror r0
	if (fun == NULL)
    1830:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
		return (int) __pi_curr;
    1834:	72747000 	rsbsvc	r7, r4, #0
    1838:	6f700073 	svcvs	0x00700073
	for_all_tasks (i)
    183c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
}
    1840:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
		if (i->code == fun)
    1844:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
	for_all_tasks (i)
    1848:	0073706e 	rsbseq	r7, r3, lr, rrx
    184c:	5f766374 	svcpl	0x00766374
    1850:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
int __pi_strlen (const char *s) {
    1854:	63740065 	cmnvs	r4, #101	; 0x65
	for (i = 0; *(s+i) != '\0'; i++);
    1858:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
}
    185c:	0065736f 	rsbeq	r7, r5, pc, ror #6
	for (i = 0; *(s+i) != '\0'; i++);
    1860:	63745f5f 	cmnvs	r4, #380	; 0x17c
	while ((Boolean)(*d++ = *s++));
    1864:	65735f76 	ldrbvs	r5, [r3, #-3958]!	; 0xfffff08a
    1868:	73656473 	cmnvc	r5, #1929379840	; 0x73000000
    186c:	00745f63 	rsbseq	r5, r4, r3, ror #30
}
    1870:	73796870 	cmnvc	r9, #112, 16	; 0x700000
	while (n-- && (*s != '\0'))
    1874:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    1878:	61636973 	smcvs	13971	; 0x3693
	*d = '\0';
    187c:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
	while (n-- && (*s != '\0'))
    1880:	64657565 	strbtvs	r7, [r5], #-1381	; 0xfffffa9b
    1884:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		*d++ = *s++;
    1888:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    188c:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
	while (n--)
    1890:	6f697373 	svcvs	0x00697373
    1894:	6374006e 	cmnvs	r4, #110	; 0x6e
		*dest++ = *src++;
    1898:	635f7076 	cmpvs	pc, #118	; 0x76
    189c:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
    18a0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	while (n--)
    18a4:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
}
    18a8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		*dest++ = c;
    18ac:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	63740064 	cmnvs	r4, #100	; 0x64
		syserror (EREQPAR, "addv");
    18b4:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
		syserror (ERESOURCE, "addv");
    18b8:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
	if (ioreq [loc] != NULL)
    18bc:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    18c0:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
		syserror (ERESOURCE, "addv");
    18c4:	006e7265 	rsbeq	r7, lr, r5, ror #4
	ioreq [loc] = rf;
    18c8:	5f766374 	svcpl	0x00766374
}
    18cc:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    18d0:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
    18d8:	00736574 	rsbseq	r6, r3, r4, ror r5
    18dc:	63745f5f 	cmnvs	r4, #380	; 0x17c
    18e0:	68715f76 	ldmdavs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e4:	5f646165 	svcpl	0x00646165
    18e8:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
    18ec:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
		syserror (ENODEVICE, "io");
    18f0:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    18f4:	00687467 	rsbeq	r7, r8, r7, ror #8
	if (len == 0)
    18f8:	70736964 	rsbsvc	r6, r3, r4, ror #18
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1900:	706e725f 	rsbvc	r7, lr, pc, asr r2
	if (ret >= 0)
    1904:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	if (ret == -1) {
    1908:	5f796870 	svcpl	0x00796870
    190c:	00766372 	rsbseq	r6, r6, r2, ror r3
		if (retry == WNONE)
    1910:	65757162 	ldrbvs	r7, [r5, #-354]!	; 0xfffffe9e
		iowait (dev, operation, retry);
    1914:	70006575 	andvc	r6, r0, r5, ror r5
    1918:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    191c:	5f00736e 	svcpl	0x0000736e
			release;
    1920:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	if (ret == -2) {
    1924:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
		if (retry != WNONE) {
    1928:	5f6b636f 	svcpl	0x006b636f
    192c:	756f0073 	strbvc	r0, [pc, #-115]!	; 18c1 <adddevfunc+0x11>
			iowait (dev, operation, retry);
    1930:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    1934:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
			(ioreq [dev]) (NONE, buf, len);
    1938:	5f707663 	svcpl	0x00707663
    193c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1940:	006c6f72 	rsbeq	r6, ip, r2, ror pc
		(ioreq [dev]) (NONE, buf, len);
    1944:	7473655f 	ldrbtvc	r6, [r3], #-1375	; 0xfffffaa1
    1948:	006b6361 	rsbeq	r6, fp, r1, ror #6
    194c:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
}
    1950:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
	if (retry != WNONE) {
    1954:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
		delay (-ret - 2, retry);
    1958:	5349746c 	movtpl	r7, #37996	; 0x946c
    195c:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
    1960:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1964:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
		release;
    1968:	61485253 	cmpvs	r8, r3, asr r2
    196c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1970:	655f0072 	ldrbvs	r0, [pc, #-114]	; 1906 <io+0x32>
    1974:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    1978:	62655f00 	rsbvs	r5, r5, #0, 30
    197c:	2f007373 	svccs	0x00007373
    1980:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		syserror (ERESOURCE, "mal1");
    1984:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1988:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    198c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1990:	706f746b 	rsbvc	r7, pc, fp, ror #8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1994:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	m_size (mpools [0]) = mlen - m_hdrlen;
    1998:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    199c:	4349502f 	movtmi	r5, #36911	; 0x902f
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    19a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    19a4:	534f6369 	movtpl	r6, #62313	; 0xf369
}
    19a8:	3143432f 	cmpcc	r3, pc, lsr #6
    19ac:	2f585833 	svccs	0x00585833
    19b0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    19b4:	5f707574 	svcpl	0x00707574
    19b8:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    19bc:	625f0063 	subsvs	r0, pc, #99	; 0x63
void __pi_free (aword *ch) {
    19c0:	5f007373 	svcpl	0x00007373
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    19c4:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
    19c8:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
		syserror (EMALLOC, "malg");
    19cc:	66654474 			; <UNDEFINED> instruction: 0x66654474
    19d0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
	mcfree [MA_NP] += m_size (ch);
    19d4:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
		m_size (ch) ^= MALLOC_UMASK;
    19d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    19dc:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
	mcfree [MA_NP] += m_size (ch);
    19e0:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
	QFREE;
    19e4:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
	if (mevent [MA_NP] . nwait) {
    19e8:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
    19ec:	65443233 	strbvs	r3, [r4, #-563]	; 0xfffffdcd
		trigger ((aword)(&(mevent [MA_NP])));
    19f0:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
		mevent [MA_NP] . nwait --;
    19f4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
}
    19f8:	00525349 	subseq	r5, r2, r9, asr #6
    19fc:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a00:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1a04:	4f4c5f54 	svcmi	0x004c5f54
void kill (aword pid) {
    1a08:	305f4441 	subscc	r4, pc, r1, asr #8
		pid = (aword) __pi_curr;
    1a0c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	j = NULL;
    1a10:	4f565f47 	svcmi	0x00565f47
	for_all_tasks (i) {
    1a14:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
	syserror (EREQPAR, "kpi");
    1a18:	5f44414f 	svcpl	0x0044414f
    1a1c:	43430031 	movtmi	r0, #12337	; 0x3031
		if ((aword)i == pid) {
    1a20:	425f4746 	subsmi	r4, pc, #18350080	; 0x1180000
    1a24:	4f435f4c 	svcmi	0x00435f4c
				__PCB = i->Next;
    1a28:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
			killev (i);
    1a2c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
			ufree (i);
    1a30:	54525f47 	ldrbpl	r5, [r2], #-3911	; 0xfffff0b9
			if (i == __pi_curr)
    1a34:	464f5f43 	strbmi	r5, [pc], -r3, asr #30
    1a38:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
				release;
    1a3c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				j->Next = i->Next;
    1a40:	4f4d5f47 	svcmi	0x004d5f47
    1a44:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
    1a48:	00464e4f 	subeq	r4, r6, pc, asr #28
}
    1a4c:	63635f5f 	cmnvs	r3, #380	; 0x17c
    1a50:	43006766 	movwmi	r6, #1894	; 0x766
    1a54:	5f474643 	svcpl	0x00474643
	if (size < 8)
    1a58:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
		_size = 2;
    1a5c:	444e415f 	strbmi	r4, [lr], #-351	; 0xfffffea1
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1a60:	5349445f 	movtpl	r4, #37983	; 0x945f
		_size = (((aword)size) + 3) >> 2;
    1a64:	414c465f 	cmpmi	ip, pc, asr r6
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a68:	43005347 	movwmi	r5, #839	; 0x347
		_size = (((aword)size) + 3) >> 2;
    1a6c:	5f474643 	svcpl	0x00474643
		if (mevent [MA_NP] . nfail != 255)
    1a70:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1a74:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
			mevent [MA_NP] . nfail ++;
    1a78:	4300305f 	movwmi	r3, #95	; 0x5f
		mnfree [MA_NP] = 0;
    1a7c:	5f474643 	svcpl	0x00474643
    1a80:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
		if (m_magic (chunk) != MALLOC_MAGIC)
    1a84:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
    1a88:	2f00315f 	svccs	0x0000315f
			syserror (EMALLOC, "malc");
    1a8c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1a90:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		if (m_size (chunk) >= _size)
    1a94:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1a98:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		chunk = m_nextp (chunk)) {
    1a9c:	706f746b 	rsbvc	r7, pc, fp, ror #8
		m_setnextp (cc, m_nextp (chunk));
    1aa0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1aa4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1aa8:	4349502f 	movtmi	r5, #36911	; 0x902f
			m_size (chunk) = _size;
    1aac:	502f534f 	eorpl	r5, pc, pc, asr #6
			cc = chunk + _size + m_hdrlen;
    1ab0:	534f6369 	movtpl	r6, #62313	; 0xf369
    1ab4:	3143432f 	cmpcc	r3, pc, lsr #6
			m_size (cc) = waste - m_hdrlen;
    1ab8:	2f585833 	svccs	0x00585833
			QFREE;
    1abc:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
		mevent [MA_NP] . nfail = 0;
    1ac0:	4300632e 	movwmi	r6, #814	; 0x32e
		mcfree [MA_NP] -= m_size (chunk);
    1ac4:	5f474643 	svcpl	0x00474643
    1ac8:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    1acc:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1ad0:	00315f46 	eorseq	r5, r1, r6, asr #30
		m_size (chunk) |= MALLOC_UMASK;
    1ad4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ad8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
		m_size (chunk) |= MALLOC_UMASK;
    1adc:	41545f47 	cmpmi	r4, r7, asr #30
			mnfree [MA_NP] = mcfree [MA_NP];
    1ae0:	41445f50 	cmpmi	r4, r0, asr pc
}
    1ae4:	00305f50 	eorseq	r5, r0, r0, asr pc
    1ae8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1aec:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1af0:	41545f47 	cmpmi	r4, r7, asr #30
    1af4:	41445f50 	cmpmi	r4, r0, asr pc
    1af8:	00315f50 	eorseq	r5, r1, r0, asr pc
    1afc:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
aword __pi_fork (fsmcode func, aword data) {
    1b00:	4300745f 	movwmi	r7, #1119	; 0x45f
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1b04:	5f474643 	svcpl	0x00474643
    1b08:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b0c:	4f52505f 	svcmi	0x0052505f
		if ((j = __PCB) == NULL)
    1b10:	32315f54 	eorscc	r5, r1, #84, 30	; 0x150
	i->Next = NULL;
    1b14:	36395f37 	shasxcc	r5, r9, r7
	i->data = data;
    1b18:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		if ((j = __PCB) == NULL)
    1b1c:	52455f47 	subpl	r5, r5, #284	; 0x11c
}
    1b20:	5f455341 	svcpl	0x00455341
			for (; j->Next != NULL; j = j->Next);
    1b24:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1b28:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	return (aword) i;
    1b2c:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1b30:	505f4746 	subspl	r4, pc, r6, asr #14
	if (mevent [MA_NP] . nwait != 255)
    1b34:	5f544f52 	svcpl	0x00544f52
    1b38:	305f3133 	subscc	r3, pc, r3, lsr r1	; <UNPREDICTABLE>
    1b3c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		mevent [MA_NP] . nwait ++;
    1b40:	4d495f47 	stclmi	15, cr5, [r9, #-284]	; 0xfffffee4
	wait ((aword)(&(mevent [MA_NP])), state);
    1b44:	5f454741 	svcpl	0x00454741
    1b48:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
void diag (const char *mess, ...) {
    1b4c:	4f435f44 	svcmi	0x00435f44
    1b50:	4300464e 	movwmi	r4, #1614	; 0x64e
    1b54:	5f474643 	svcpl	0x00474643
	diag_disable_int (a, is);
    1b58:	51455246 	cmppl	r5, r6, asr #4
    1b5c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
    1b60:	00544553 	subseq	r4, r4, r3, asr r5
				d = (bc == 16) ? 10000 : 1000000000;
    1b64:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	diag_disable_int (a, is);
    1b68:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	while (*mess != '\0') {
    1b6c:	52505f47 	subspl	r5, r0, #284	; 0x11c
	dgout ('\r');
    1b70:	365f544f 	ldrbcc	r5, [pc], -pc, asr #8
	dgout ('\n');
    1b74:	32335f33 	eorscc	r5, r3, #51, 30	; 0xcc
    1b78:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b7c:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
	diag_wait (a);
    1b80:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
	diag_enable_int (a, is);
    1b84:	305f454c 	subscc	r4, pc, ip, asr #10
    1b88:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    1b8c:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    1b90:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
    1b94:	315f454c 	cmpcc	pc, ip, asr #10
		if (*mess == '%') {
    1b98:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b9c:	43435f47 	movtmi	r5, #16199	; 0x3f47
			if (*mess == 'l') {
    1ba0:	505f4746 	subspl	r4, pc, r6, asr #14
    1ba4:	5f544f52 	svcpl	0x00544f52
				mess++;
    1ba8:	365f3539 			; <UNDEFINED> instruction: 0x365f3539
				val = va_arg (ap, lword);
    1bac:	43430034 	movtmi	r0, #12340	; 0x3034
				bc = 32;
    1bb0:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 1472 <__pi_release+0x1e6>
				bc = 16;
    1bb4:	4c5f5458 	cfldrdmi	mvd5, [pc], {88}	; 0x58
			switch (*mess) {
    1bb8:	4c435f46 	mcrrmi	15, 4, r5, r3, cr6
    1bbc:	4343004b 	movtmi	r0, #12363	; 0x304b
    1bc0:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
				dgout ('%');
    1bc4:	5f474643 	svcpl	0x00474643
    1bc8:	4f5f4954 	svcmi	0x005f4954
				dgout (*mess);
    1bcc:	4f495450 	svcmi	0x00495450
    1bd0:	4700534e 	strmi	r5, [r0, -lr, asr #6]
			switch (*mess) {
    1bd4:	5f4f4950 	svcpl	0x004f4950
					v = __pi_hex_enc_table [
    1bd8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
					i += 4;
    1bdc:	006f6944 	rsbeq	r6, pc, r4, asr #18
					(val >> (bc - i)) & 0xf];
    1be0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b2c <__pi_fork+0x2c>
    1be4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
					dgout (v);
    1be8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1bec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				while (i < bc) {
    1bf0:	6f746b73 	svcvs	0x00746b73
			mess++;
    1bf4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
					d /= 10;
    1bf8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				if ((val >> (bc - 1)) & 1) {
    1bfc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1c00:	2f534f43 	svccs	0x00534f43
					dgout ('-');
    1c04:	4f636950 	svcmi	0x00636950
    1c08:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
						val |= 0xffff0000;
    1c0c:	2f736269 	svccs	0x00736269
    1c10:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    1c14:	2f73726f 	svccs	0x0073726f
				d = (bc == 16) ? 10000 : 1000000000;
    1c18:	5f6e6970 	svcpl	0x006e6970
    1c1c:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    1c20:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
					v = (word) (val / d);
    1c24:	6e756a00 	vaddvs.f32	s13, s10, s0
					if (v || d == 1) break;
    1c28:	6970006b 	ldmdbvs	r0!, {r0, r1, r3, r5, r6}^
    1c2c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
					d /= 10;
    1c30:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
				d = (bc == 16) ? 10000 : 1000000000;
    1c34:	6165725f 	cmnvs	r5, pc, asr r2
					dgout (v + '0');
    1c38:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
    1c3c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1c40:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
					d /= 10;
    1c44:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
					val = val - (v * d);
    1c48:	65540074 	ldrbvs	r0, [r4, #-116]	; 0xffffff8c
					if (d == 0) break;
    1c4c:	62006d72 	andvs	r6, r0, #7296	; 0x1c80
					v = (word) (val / d);
    1c50:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1c54:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
				if (bc == 16)
    1c58:	756f6265 	strbvc	r6, [pc, #-613]!	; 19fb <__pi_free+0x3b>
				d = (bc == 16) ? 10000 : 1000000000;
    1c5c:	0065636e 	rsbeq	r6, r5, lr, ror #6
					val &= 0xffff;
    1c60:	74756270 	ldrbtvc	r6, [r5], #-624	; 0xfffffd90
					dgout (*s);
    1c64:	006e6f74 	rsbeq	r6, lr, r4, ror pc
					s++;
    1c68:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
				while (*s != '\0') {
    1c6c:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
    1c70:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
			dgout (*mess++);
    1c74:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    1c78:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    1c7c:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
    1c80:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1c84:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1bd0 <diag+0x84>
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1c88:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    1c8c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1c90:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1c94:	6f746b73 	svcvs	0x00746b73
	^ entropy
    1c98:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
    1c9c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1ca0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1ca4:	2f534f43 	svccs	0x00534f43
    1ca8:	4f636950 	svcmi	0x00636950
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1cac:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	word cs = size + hblenb;
    1cb0:	2f736269 	svccs	0x00736269
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1cb4:	622f4f49 	eorvs	r4, pc, #292	; 0x124
    1cb8:	6f747475 	svcvs	0x00747475
	p -> length = size;
    1cbc:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
}
    1cc0:	6f434500 	svcvs	0x00434500
	if (p->attributes.b.queued) {
    1cc4:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1cc8:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    1ccc:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 186b <__pi_strcpy+0x9>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1cd0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
		p->attributes.b.queued = 0;
    1cd4:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
    1cd8:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1cdc:	00305f64 	eorseq	r5, r0, r4, ror #30
	deq (p);	// Remove from queue
    1ce0:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
}
    1ce4:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	tfree ((address)p);
    1ce8:	5f656500 	svcpl	0x00656500
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1cec:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    1cf0:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    1cf4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1cf8:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    1cfc:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
	if (q_empty (q))
    1d00:	5f656500 	svcpl	0x00656500
    1d04:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		trigger (q);
    1d08:	6f435700 	svcvs	0x00435700
	if (p->attributes.b.urgent) {
    1d0c:	6300746e 	movwvs	r7, #1134	; 0x46e
		p->u.bqueue.next = q->next;
    1d10:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
		p->u.bqueue.prev = q;
    1d14:	5f656500 	svcpl	0x00656500
		q->next->prev = (qitem_t*) p;
    1d18:	696e6170 	stmdbvs	lr!, {r4, r5, r6, r8, sp, lr}^
	p->attributes.b.queued = 1;
    1d1c:	65650063 	strbvs	r0, [r5, #-99]!	; 0xffffff9d
    1d20:	6e79735f 	mrcvs	3, 3, r7, cr9, cr15, {2}
}
    1d24:	72660063 	rsbvc	r0, r6, #99	; 0x63
		p->u.bqueue.prev = q->prev;
    1d28:	65006d6f 	strvs	r6, [r0, #-3439]	; 0xfffff291
		q->prev->next = (qitem_t*) p;
    1d2c:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
		q->prev = (qitem_t*) p;
    1d30:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
    1d34:	00727364 	rsbseq	r7, r2, r4, ror #6
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1d38:	6f6c6363 	svcvs	0x006c6363
	deq (p);	// Soft dequeue, timer and hook left intact
    1d3c:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
	switch (dv) {
    1d40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1d44:	6f682f00 	svcvs	0x00682f00
    1d48:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1d4c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			p->attributes.b.urgent = 1;
    1d50:	442f6e65 	strtmi	r6, [pc], #-3685	; 1d58 <dispose+0x20>
    1d54:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			verify_ses (p, "dispose ses");
    1d58:	4f2f706f 	svcmi	0x002f706f
    1d5c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1d60:	502f5445 	eorpl	r5, pc, r5, asr #8
    1d64:	534f4349 	movtpl	r4, #62281	; 0xf349
    1d68:	6369502f 	cmnvs	r9, #47	; 0x2f
			verify_phy (p, "dispose phy");
    1d6c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1d70:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
}
    1d74:	6f74532f 	svcvs	0x0074532f
			enq (oqueues [p->attributes.b.phys], p);
    1d78:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
			p->attributes.b.urgent = 1;
    1d7c:	6f74732f 	svcvs	0x0074732f
    1d80:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
			verify_phy (p, "dispose phy");
    1d84:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    1d88:	30387235 	eorscc	r7, r8, r5, lsr r2
    1d8c:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    1d90:	706f6300 	rsbvc	r6, pc, r0, lsl #6
    1d94:	63006e65 	movwvs	r6, #3685	; 0xe65
    1d98:	00727470 	rsbseq	r7, r2, r0, ror r4
			enq (oqueues [p->attributes.b.phys], p);
    1d9c:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    1da0:	00657a69 	rsbeq	r7, r5, r9, ror #20
}
    1da4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
			rlp (p);
    1da8:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
}
    1dac:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1db0:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
    1db4:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
    1db8:	00746961 	rsbseq	r6, r4, r1, ror #18
    1dbc:	5f746567 	svcpl	0x00746567
    1dc0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1dc4:	74757000 	ldrbtvc	r7, [r5], #-0
	if (b->attributes.b.outgoing) {
    1dc8:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
	b = header (p);
    1dcc:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	if (b->attributes.b.outgoing) {
    1dd0:	2f656d6f 	svccs	0x00656d6f
		verify_ses (b, "tcv02");
    1dd4:	70657473 	rsbvc	r7, r5, r3, ror r4
    1dd8:	2f6e6568 	svccs	0x006e6568
    1ddc:	6b736544 	blvs	1cdb2f4 <__ccfg+0x1cbb34c>
    1de0:	2f706f74 	svccs	0x00706f74
    1de4:	4f534c4f 	svcmi	0x00534c4f
		verify_plg (b, tcv_out, "tcv03");
    1de8:	2f54454e 	svccs	0x0054454e
    1dec:	4f434950 	svcmi	0x00434950
    1df0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1df4:	2f534f63 	svccs	0x00534f63
    1df8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1dfc:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1e00:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1e04:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1e08:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e0c:	7300632e 	movwvc	r6, #814	; 0x32e
}
    1e10:	6f5f7265 	svcvs	0x005f7265
		dispose (b, plugins [b->attributes.b.plugin] ->
    1e14:	2f007475 	svccs	0x00007475
		rlp (b);
    1e18:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    1e1c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		rlp (b);
    1e20:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1e24:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1e28:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1e2c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1e30:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1e34:	4349502f 	movtmi	r5, #36911	; 0x902f
    1e38:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e3c:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e40:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
	va_start (ap, plid);
    1e44:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1e48:	61697265 	cmnvs	r9, r5, ror #4
    1e4c:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1e50:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    1e54:	5f00632e 	svcpl	0x0000632e
    1e58:	706e695f 	rsbvc	r6, lr, pc, asr r9
    1e5c:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
			syserror (ENODEVICE, "tcv04");
    1e60:	72657300 	rsbvc	r7, r5, #0, 6
		syserror (EMALLOC, "tcv05");
    1e64:	006e695f 	rsbeq	r6, lr, pc, asr r9
	attp.b.outgoing = 1;
    1e68:	5f726573 	svcpl	0x00726573
    1e6c:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    1e70:	6f682f00 	svcvs	0x00682f00
    1e74:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e78:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		if (descriptors [fd] == NULL)
    1e7c:	442f6e65 	strtmi	r6, [pc], #-3685	; 1e84 <tcv_open+0x50>
    1e80:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1e84:	4f2f706f 	svcmi	0x002f706f
		return ERROR;
    1e88:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
}
    1e8c:	502f5445 	eorpl	r5, pc, r5, asr #8
    1e90:	534f4349 	movtpl	r4, #62281	; 0xf349
    1e94:	6369502f 	cmnvs	r9, #47	; 0x2f
	s->attpattern.b.session = fd;
    1e98:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e9c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	descriptors [fd] = s;
    1ea0:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
	q_init (&(s->rqueue));
    1ea4:	2f6c6169 	svccs	0x006c6169
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1ea8:	5f726573 	svcpl	0x00726573
    1eac:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    1eb0:	2f00632e 	svccs	0x0000632e
    1eb4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1eb8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1ebc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1ec0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	descriptors [fd] = s;
    1ec4:	706f746b 	rsbvc	r7, pc, fp, ror #8
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1ec8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1ecc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (s == NULL)
    1ed0:	4349502f 	movtmi	r5, #36911	; 0x902f
		syserror (EMALLOC, "tcv05");
    1ed4:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ed8:	534f6369 	movtpl	r6, #62313	; 0xf369
    1edc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1ee0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1ee4:	61697265 	cmnvs	r9, r5, ror #4
    1ee8:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1eec:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    1ef0:	00632e66 	rsbeq	r2, r3, r6, ror #28
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1ef4:	5f726573 	svcpl	0x00726573
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1ef8:	00666e69 	rsbeq	r6, r6, r9, ror #28
    1efc:	75737369 	ldrbvc	r7, [r3, #-873]!	; 0xfffffc97
    1f00:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
	plugins [ord] = pl;
    1f04:	6f6d0064 	svcvs	0x006d0064
	return 0;
    1f08:	616c7564 	cmnvs	ip, r4, ror #10
		return ERROR;
    1f0c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
}
    1f10:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 1f18 <tcv_rnp>
    1f14:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
	verify_fds (fd, "tcv10");
    1f18:	62006f4e 	andvs	r6, r0, #312	; 0x138
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1f1c:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
	verify_fds (fd, "tcv10");
    1f20:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
    1f24:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f28:	5f667200 	svcpl	0x00667200
	verify_plg (b, tcv_frm, "tcv11");
    1f2c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
	b = q_first (rq);
    1f30:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
	if (q_end (b, rq)) {
    1f34:	5662006d 	strbtpl	r0, [r2], -sp, rrx
		if (state != WNONE) {
    1f38:	654c7261 	strbvs	r7, [ip, #-609]	; 0xfffffd9f
    1f3c:	5070006e 	rsbspl	r0, r0, lr, rrx
			when (rq, state);
    1f40:	6300746b 	movwvs	r7, #1131	; 0x46b
			release;
    1f44:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
	deq (b);	// Dequeue the packet ...
    1f48:	65724672 	ldrbvs	r4, [r2, #-1650]!	; 0xfffff98e
    1f4c:	6f630071 	svcvs	0x00630071
	p = ((address)(b + 1));
    1f50:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	verify_plg (b, tcv_frm, "tcv11");
    1f54:	47657275 			; <UNDEFINED> instruction: 0x47657275
    1f58:	73666e65 	cmnvc	r6, #1616	; 0x650
    1f5c:	7461506b 	strbtvc	r5, [r1], #-107	; 0xffffff95
    1f60:	77006863 	strvc	r6, [r0, -r3, ror #16]
    1f64:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    1f68:	646f4d6e 	strbtvs	r4, [pc], #-3438	; 1f70 <tcv_rnp+0x58>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    1f6c:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    1f70:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
		b->length - b->u.pointers.head - b->u.pointers.tail;
    1f74:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1f78:	435f504f 	cmpmi	pc, #79	; 0x4f
	b->u.pointers.tail =
    1f7c:	00735f53 	rsbseq	r5, r3, r3, asr pc
}
    1f80:	74736170 	ldrbtvc	r6, [r3], #-368	; 0xfffffe90
		return NULL;
    1f84:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1f88:	54667200 	strbtpl	r7, [r6], #-512	; 0xfffffe00
    1f8c:	5f6d6972 	svcpl	0x006d6972
    1f90:	62720074 	rsbsvs	r0, r2, #116	; 0x74
    1f94:	6c666675 	stclvs	6, cr6, [r6], #-468	; 0xfffffe2c
	verify_fds (fd, "tcv16");
    1f98:	5f524400 	svcpl	0x00524400
								Boolean urg) {
    1f9c:	504f4f4c 	subpl	r4, pc, ip, asr #30
    1fa0:	70005f5f 	andvc	r5, r0, pc, asr pc
	verify_fds (fd, "tcv16");
    1fa4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1fa8:	62007475 	andvs	r7, r0, #1962934272	; 0x75000000
    1fac:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
	verify_pld (s, tcv_frm, "tcv17");
    1fb0:	6b4f7461 	blvs	13df13c <__ccfg+0x13bf194>
    1fb4:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    1fb8:	6f6e6749 	svcvs	0x006e6749
    1fbc:	00646572 	rsbeq	r6, r4, r2, ror r5
    1fc0:	4d636566 	cfstr64mi	mvdx6, [r3, #-408]!	; 0xfffffe68
    1fc4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1fc8:	4e78526e 	cdpmi	2, 7, cr5, cr8, cr14, {3}
    1fcc:	6f006b6f 	svcvs	0x00006b6f
	ptrs.head = (word) fd;
    1fd0:	65646666 	strbvs	r6, [r4, #-1638]!	; 0xfffff99a
	ptrs.tail = (word) urg;
    1fd4:	0079616c 	rsbseq	r6, r9, ip, ror #2
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1fd8:	61657270 	smcvs	22304	; 0x5720
    1fdc:	646f4d6d 	strbtvs	r4, [pc], #-3437	; 1fe4 <tcv_wnps+0x4c>
		if (state != WNONE) {
    1fe0:	43700065 	cmnmi	r0, #101	; 0x65
    1fe4:	45727275 	ldrbmi	r7, [r2, #-629]!	; 0xfffffd8b
}
    1fe8:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
			when (eid, state);
    1fec:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1ff0:	61745365 	cmnvs	r4, r5, ror #6
			release;
    1ff4:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1ff8:	6e497172 	mcrvs	1, 2, r7, cr9, cr2, {3}
    1ffc:	77007674 	smlsdxvc	r0, r4, r6, r7
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2000:	5f746961 	svcpl	0x00746961
    2004:	00646d63 	rsbeq	r6, r4, r3, ror #26
    2008:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    200c:	6f437461 	svcvs	0x00437461
    2010:	7300666e 	movwvc	r6, #1646	; 0x66e
    2014:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
		if (state != WNONE) {
    2018:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    201c:	70416200 	subvc	r6, r1, r0, lsl #4
			tmwait (state);
    2020:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    2024:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	b->attributes = s->attpattern;
    2028:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
		b->attributes.b.urgent = 1;
    202c:	4e700070 	mrcmi	0, 3, r0, cr0, cr0, {3}
    2030:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0xfffff79b
	b->u.pointers.head = ptrs.head;
    2034:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
	b->u.pointers.tail = length;
    2038:	5f465200 	svcpl	0x00465200
	return (address) (b + 1);
    203c:	50646d63 	rsbpl	r6, r4, r3, ror #26
    2040:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    2044:	6f696461 	svcvs	0x00696461
    2048:	53766944 	cmnpl	r6, #68, 18	; 0x110000
    204c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2050:	76657100 	strbtvc	r7, [r5], -r0, lsl #2
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    2054:	00746e65 	rsbseq	r6, r4, r5, ror #28
	if (len >= b->u.pointers.tail)
    2058:	43746b70 	cmnmi	r4, #112, 22	; 0x1c000
__PUBLF (PicOSNode, int, tcv_read) (address p, byte *buf, int len) {
    205c:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    2060:	73796870 	cmnvc	r9, #112, 16	; 0x700000
	if (len > 0) {
    2064:	3163635f 	cmncc	r3, pc, asr r3
		memcpy ((char*)buf, ((char*)p) + b->u.pointers.head, len);
    2068:	00303533 	eorseq	r3, r0, r3, lsr r5
    206c:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    2070:	645f3035 	ldrbvs	r3, [pc], #-53	; 2078 <tcv_read+0x24>
		b->u.pointers.tail -= len;
    2074:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2078:	66720072 			; <UNDEFINED> instruction: 0x66720072
    207c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
		b->u.pointers.head += len;
    2080:	53465f44 	movtpl	r5, #28484	; 0x6f44
    2084:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    2088:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
}
    208c:	465f444d 	ldrbmi	r4, [pc], -sp, asr #8
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2090:	00745f53 	rsbseq	r5, r4, r3, asr pc
    2094:	6f507874 	svcvs	0x00507874
    2098:	00726577 	rsbseq	r6, r2, r7, ror r5
	verify_fph (phy, "tcv23");
    209c:	77427872 	smlsldxvc	r7, r2, r2, r8
    20a0:	70706100 	rsbsvc	r6, r0, r0, lsl #2
    20a4:	6547796c 	strbvs	r7, [r7, #-2412]	; 0xfffff694
    20a8:	6b73666e 	blvs	1cdba68 <__ccfg+0x1cbbac0>
}
    20ac:	63746150 	cmnvs	r4, #80, 2
	return (physical [phy]) (opt, arg);
    20b0:	68630068 	stmdavs	r3!, {r3, r5, r6}^
    20b4:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    20b8:	7973006c 	ldmdbvc	r3!, {r2, r3, r5, r6}^
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    20bc:	4368746e 	cmnmi	r8, #1845493760	; 0x6e000000
	if (opt < 0) {
    20c0:	00666e6f 	rsbeq	r6, r6, pc, ror #28
		if (fd < 0)
    20c4:	616e4562 	cmnvs	lr, r2, ror #10
		if (opt == PHYSOPT_PLUGINFO) {
    20c8:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
			if (fd >= TCV_MAX_PLUGS)
    20cc:	75416200 	strbvc	r6, [r1, #-512]	; 0xfffffe00
			if ((p = plugins [fd]) == NULL)
    20d0:	6c466f74 	mcrrvs	15, 7, r6, r6, cr4
    20d4:	43687375 	cmnmi	r8, #-738197503	; 0xd4000001
}
    20d8:	72456372 	subvc	r6, r5, #-939524095	; 0xc8000001
		if (fd >= TCV_MAX_PHYS)
    20dc:	6f630072 	svcvs	0x00630072
		return physinfo [fd];
    20e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20e4:	72466652 	subvc	r6, r6, #85983232	; 0x5200000
	verify_fds (fd, "tcv22");
    20e8:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    20ec:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
    20f0:	6f4d7854 	svcvs	0x004d7854
    20f4:	61006564 	tstvs	r0, r4, ror #10
    20f8:	6f6c616e 	svcvs	0x006c616e
}
    20fc:	67664367 	strbvs	r4, [r6, -r7, ror #6]!
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2100:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2104:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
			return 0;
    2108:	646d4361 	strbtvs	r4, [sp], #-865	; 0xfffffc9f
    210c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    2110:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    2114:	00766e49 	rsbseq	r6, r6, r9, asr #28
    2118:	71724970 	cmnvc	r2, r0, ror r9
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    211c:	63746150 	cmnvs	r4, #80, 2
    2120:	50700068 	rsbspl	r0, r0, r8, rrx
	if (dsp != TCV_DSP_PASS) {
    2124:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
		if (ses == NONE)
    2128:	00636556 	rsbeq	r6, r3, r6, asr r5
			syserror (EREQPAR, "tcv26");
    212c:	43434652 	movtmi	r4, #13906	; 0x3652
		verify_fds (ses, "tcv27");
    2130:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    2134:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
    2138:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    213c:	78616d00 	stmdavc	r1!, {r8, sl, fp, sp, lr}^
    2140:	4c746b50 			; <UNDEFINED> instruction: 0x4c746b50
		if ((p = apb (size)) != NULL) {
    2144:	63006e65 	movwvs	r6, #3685	; 0xe65
    2148:	4372726f 	cmnmi	r2, #-268435450	; 0xf0000006
		return NULL;
    214c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
			p->attributes = descriptors [ses] -> attpattern;
    2150:	61720067 	cmnvs	r2, r7, rrx
			dispose (p, dsp);
    2154:	62003074 	andvs	r3, r0, #116	; 0x74
			p->attributes = descriptors [ses] -> attpattern;
    2158:	4d736169 	ldfmie	f6, [r3, #-420]!	; 0xfffffe5c
			p->attributes.b.outgoing = 0;
    215c:	0065646f 	rsbeq	r6, r5, pc, ror #8
			dispose (p, dsp);
    2160:	43434652 	movtmi	r4, #13906	; 0x3652
			return (address)(p + 1);
    2164:	49306570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, sp, lr}
    2168:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
	if ((p = apb (size)) != NULL)
    216c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2170:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
		return (address)(p + 1);
    2174:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2178:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
    217c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    2180:	49676966 	stmdbmi	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2184:	63644166 	cmnvs	r4, #-2147483623	; 0x80000019
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2188:	63667200 	cmnvs	r6, #0, 4
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    218c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2190:	4f52505f 	svcmi	0x0052505f
		syserror (EREQPAR, "tcv28");
    2194:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
		syserror (EMALLOC, "tcv29");
    2198:	6500735f 	strvs	r7, [r0, #-863]	; 0xfffffca1
	physical [phy] = ps;
    219c:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
	physinfo [phy] = info;
    21a0:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    21a4:	66720072 			; <UNDEFINED> instruction: 0x66720072
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    21a8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    21ac:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    21b0:	435f504f 	cmpmi	pc, #79	; 0x4f
		syserror (EMALLOC, "tcv29");
    21b4:	00745f53 	rsbseq	r5, r4, r3, asr pc
    21b8:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
	q_init (q);
    21bc:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
}
    21c0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    21c4:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    21c8:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    21cc:	70006f4e 	andvc	r6, r0, lr, asr #30
    21d0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21d4:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
	verify_fph (phy, "tcv30");
    21d8:	70795464 	rsbsvc	r5, r9, r4, ror #8
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    21dc:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
    21e0:	73635f64 	cmnvc	r3, #100, 30	; 0x190
	verify_fph (phy, "tcv30");
    21e4:	73737200 	cmnvc	r3, #0, 4
    21e8:	72685469 	rsbvc	r5, r8, #1761607680	; 0x69000000
    21ec:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    21f0:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    21f4:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    21f8:	61565200 	cmpvs	r6, r0, lsl #4
    21fc:	6f63006c 	svcvs	0x0063006c
		if (plugins [plg] == NULL)
    2200:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    2204:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2208:	636e4962 	cmnvs	lr, #1605632	; 0x188000
}
    220c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2210:	00726448 	rsbseq	r6, r2, r8, asr #8
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2214:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    2218:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    221c:	646f6d00 	strbtvs	r6, [pc], #-3328	; 2224 <tcvphy_rcv+0x50>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2220:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2224:	614c7000 	mrsvs	r7, (UNDEF: 76)
    2228:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
    222c:	00797274 	rsbseq	r7, r9, r4, ror r2
    2230:	4278526e 	rsbsmi	r5, r8, #-536870906	; 0xe0000006
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2234:	75466675 	strbvc	r6, [r6, #-1653]	; 0xfffff98b
	len -= (ap.head + ap.tail);
    2238:	72006c6c 	andvc	r6, r0, #108, 24	; 0x6c00
    223c:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
    2240:	33697500 	cmncc	r9, #0, 10
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    2244:	73614d32 	cmnvc	r1, #3200	; 0xc80
    2248:	7363006b 	cmnvc	r3, #107	; 0x6b
    224c:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2250:	67676972 			; <UNDEFINED> instruction: 0x67676972
    2254:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
    2258:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
	return 1;
    225c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
    2260:	006c6173 	rsbeq	r6, ip, r3, ror r1
    2264:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    2268:	30796d6d 	rsbscc	r6, r9, sp, ror #26
    226c:	6d797300 	ldclvs	3, cr7, [r9, #-0]
	verify_fph (phy, "tcv32");
    2270:	526c6f62 	rsbpl	r6, ip, #392	; 0x188
    2274:	00657461 	rsbeq	r7, r5, r1, ror #8
    2278:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    227c:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
    2280:	00736666 	rsbseq	r6, r3, r6, ror #12
    2284:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
	oq = oqueues [phy];
    2288:	00704f74 	rsbseq	r4, r0, r4, ror pc
	b = q_first (oq);
    228c:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
	if (q_end (b, oq)) {
    2290:	00716572 	rsbseq	r6, r1, r2, ror r5
	*len = b->length;
    2294:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
	deq (b);	// Dequeue the packet ...
    2298:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
}
    229c:	67496873 	smlsldxvs	r6, r9, r3, r8
		return NULL;
    22a0:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
    22a4:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
    22a8:	61725f63 	cmnvs	r2, r3, ror #30
    22ac:	4f6f6964 	svcmi	0x006f6964
	verify_fph (phy, "tcv33");
    22b0:	00745f70 	rsbseq	r5, r4, r0, ror pc
    22b4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    22b8:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    22bc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    22c0:	74617000 	strbtvc	r7, [r1], #-0
    22c4:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
	oq = oqueues [phy];
    22c8:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
	b = q_first (oq);
    22cc:	73666e65 	cmnvc	r6, #1616	; 0x650
		return NULL;
    22d0:	6672006b 	ldrbtvs	r0, [r2], -fp, rrx
	return (address)(b + 1);
    22d4:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
}
    22d8:	6f682f00 	svcvs	0x00682f00
    22dc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    22e0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    22e4:	442f6e65 	strtmi	r6, [pc], #-3685	; 22ec <tcvphy_end+0x8>
	verify_plg (b, tcv_xmt, "tcv34");
    22e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	hblock_t *b = header (pkt);
    22ec:	4f2f706f 	svcmi	0x002f706f
	verify_plg (b, tcv_xmt, "tcv34");
    22f0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    22f4:	502f5445 	eorpl	r5, pc, r5, asr #8
    22f8:	534f4349 	movtpl	r4, #62281	; 0xf349
    22fc:	6369502f 	cmnvs	r9, #47	; 0x2f
    2300:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    2304:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    2308:	66722f58 	uhsaxvs	r2, r2, r8
	dispose (b, plugins [b->attributes.b.plugin] ->
    230c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
}
    2310:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
	dispose (b, plugins [b->attributes.b.plugin] ->
    2314:	43616e45 	cmnmi	r1, #1104	; 0x450
    2318:	0072726f 	rsbseq	r7, r2, pc, ror #4
    231c:	4f734662 	svcmi	0x00734662
}
    2320:	64496666 	strbvs	r6, [r9], #-1638	; 0xfffff99a
    while(1)
    2324:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
{
    2328:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    SetupTrimDevice();
    232c:	00734664 	rsbseq	r4, r3, r4, ror #12
    pui32Src = &_etext;
    2330:	61657270 	smcvs	22304	; 0x5720
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2334:	6e6f436d 	cdpvs	3, 6, cr4, cr15, cr13, {3}
    __asm("    ldr     r0, =_bss\n"
    2338:	79730066 	ldmdbvc	r3!, {r1, r2, r5, r6}^
    233c:	6f57636e 	svcvs	0x0057636e
    2340:	6f006472 	svcvs	0x00006472
    2344:	6f697470 	svcvs	0x00697470
    2348:	6170006e 	cmnvs	r0, lr, rrx
   main();
    234c:	47686374 			; <UNDEFINED> instruction: 0x47686374
    FaultISR();
    2350:	73666e65 	cmnvc	r6, #1616	; 0x650
        *pui32Dest++ = *pui32Src++;
    2354:	6566526b 	strbvs	r5, [r6, #-619]!	; 0xfffffd95
    2358:	45736300 	ldrbmi	r6, [r3, #-768]!	; 0xfffffd00
    235c:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2360:	7200656d 	andvc	r6, r0, #457179136	; 0x1b400000
    2364:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
    2368:	745f656c 	ldrbvc	r6, [pc], #-1388	; 2370 <zero_loop+0x30>
    236c:	726f6300 	rsbvc	r6, pc, #0, 6
    2370:	72655072 	rsbvc	r5, r5, #114	; 0x72
static byte get_byte () {
    2374:	00646f69 	rsbeq	r6, r4, r9, ror #30
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2378:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    237c:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2380:	70434346 	subvc	r4, r3, r6, asr #6
    2384:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
		if (ee_inp)
    2388:	61656c43 	cmnvs	r5, r3, asr #24
			b |= 1;
    238c:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
    2390:	68636775 	stmdavs	r3!, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2394:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
	for (b = 0, i = 0; i < 8; i++) {
    2398:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
}
    239c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    23a0:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    23a4:	00736552 	rsbseq	r6, r3, r2, asr r5
static void put_byte (byte b) {
    23a8:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    23ac:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    23b0:	72700071 	rsbsvc	r0, r0, #113	; 0x71
    23b4:	61635365 	cmnvs	r3, r5, ror #6
		if (b & 0x80)
    23b8:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    23bc:	69427753 	stmdbvs	r2, {r0, r1, r4, r6, r8, r9, sl, ip, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    23c0:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
	for (i = 0; i < 8; i++) {
    23c4:	4f797375 	svcmi	0x00797375
		b <<= 1;
    23c8:	6f6c0070 	svcvs	0x006c0070
	for (i = 0; i < 8; i++) {
    23cc:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
}
    23d0:	00726564 	rsbseq	r6, r2, r4, ror #10
    23d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    23d8:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
    23dc:	61705f66 	cmnvs	r0, r6, ror #30
	put_byte (cmd);
    23e0:	5f686374 	svcpl	0x00686374
    23e4:	5f657063 	svcpl	0x00657063
}
    23e8:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    23ec:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
static void wwait (word st, word del) {
    23f0:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
    23f4:	4e620066 	cdpmi	0, 6, cr0, cr2, cr6, {3}
    23f8:	5073466f 	rsbspl	r4, r3, pc, ror #12
	while (dopen && (rdsr () & 1)) {
    23fc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2400:	4f007055 	svcmi	0x00007055
    2404:	6e764552 	mrcvs	5, 3, r4, cr6, cr2, {2}
    2408:	46620074 			; <UNDEFINED> instruction: 0x46620074
	put_byte (CMD_RDSR);
    240c:	66664f73 	uqsub16vs	r4, r6, r3
	r = get_byte ();
    2410:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    2414:	61727600 	cmnvs	r2, r0, lsl #12
	while (dopen && (rdsr () & 1)) {
    2418:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
}
    241c:	69727478 	ldmdbvs	r2!, {r3, r4, r5, r6, sl, ip, sp, lr}^
		if (st == WNONE)
    2420:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
    2424:	4662734d 	strbtmi	r7, [r2], -sp, asr #6
			mdelay (1);
    2428:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
    242c:	5f787200 	svcpl	0x00787200
			delay (del, st);
    2430:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
    2434:	6e695f78 	mcrvs	15, 3, r5, cr9, cr8, {3}
			release;
    2438:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    243c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2440:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
static void ready () {
    2444:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
	if (dopen) {
    2448:	64610030 	strbtvs	r0, [r1], #-48	; 0xffffffd0
		wwait (WNONE, 1);
    244c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2450:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
    2454:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
	dstat = 0;
    2458:	505f444d 	subspl	r4, pc, sp, asr #8
}
    245c:	5f504f52 	svcpl	0x00504f52
    2460:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    2464:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
	udelay (1);
    2468:	45535f56 	ldrbmi	r5, [r3, #-3926]	; 0xfffff0aa
    246c:	5f505554 	svcpl	0x00505554
	udelay (1);
    2470:	66720073 			; <UNDEFINED> instruction: 0x66720073
		dopen = DOPEN_TEMP;
    2474:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2478:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    247c:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2480:	4f494441 	svcmi	0x00494441
static void cclose () {
    2484:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
	if (dopen == DOPEN_TEMP) {
    2488:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    248c:	745f5055 	ldrbvc	r5, [pc], #-85	; 2494 <cclose+0x10>
		wwait (WNONE, 1);
    2490:	63667200 	cmnvs	r6, #0, 4
    2494:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	cmd_0 (CMD_DP);
    2498:	4f52505f 	svcmi	0x0052505f
    249c:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
		dopen = 0;
    24a0:	7000745f 	andvc	r7, r0, pc, asr r4
}
    24a4:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
word ee_open () {
    24a8:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
	ready ();
    24ac:	74537852 	ldrbvc	r7, [r3], #-2130	; 0xfffff7ae
	dopen = DOPEN_PERM;
    24b0:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
    24b4:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
}
    24b8:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
	if (dopen) {
    24bc:	6c644969 			; <UNDEFINED> instruction: 0x6c644969
    24c0:	61720065 	cmnvs	r2, r5, rrx
		dopen = DOPEN_TEMP;
    24c4:	6f576574 	svcvs	0x00576574
		cclose ();
    24c8:	72006472 	andvc	r6, r0, #1912602624	; 0x72000000
}
    24cc:	61747378 	cmnvs	r4, r8, ror r3
int ser_out (word st, const char *m) {
    24d0:	52700074 	rsbspl	r0, r0, #116	; 0x74
	if ((prcs = running (__outserial)) != 0) {
    24d4:	764f6765 	strbvc	r6, [pc], -r5, ror #14
    24d8:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    24dc:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
		join (prcs, st);
    24e0:	726d7461 	rsbvc	r7, sp, #1627389952	; 0x61000000
		release;
    24e4:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
	if (*m)
    24e8:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
		prcs = strlen (m) +1;
    24ec:	7352646e 	cmpvc	r2, #1845493760	; 0x6e000000
    24f0:	72006973 	andvc	r6, r0, #1884160	; 0x1cc000
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    24f4:	705f6366 	subsvc	r6, pc, r6, ror #6
    24f8:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    24fc:	74754f78 	ldrbtvc	r4, [r5], #-3960	; 0xfffff088
		umwait (st);
    2500:	5f747570 	svcpl	0x00747570
    2504:	66720073 			; <UNDEFINED> instruction: 0x66720073
		prcs =  m [1] + 3;
    2508:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
	if (*m)
    250c:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
		strcpy (buf, m);
    2510:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2514:	745f7475 	ldrbvc	r7, [pc], #-1141	; 251c <ser_out+0x4c>
	if (runstrand (__outserial, buf) == 0) {
    2518:	43465200 	movtmi	r5, #25088	; 0x6200
    251c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
		ufree (buf);
    2520:	7369446b 	cmnvc	r9, #1795162112	; 0x6b000000
    2524:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		memcpy (buf, m, prcs);
    2528:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    252c:	53676966 	cmnpl	r7, #1671168	; 0x198000
    2530:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
}
    2534:	63787400 	cmnvs	r8, #0, 8
    2538:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
int ser_in (word st, char *buf, int len) {
    253c:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
    2540:	7a536e65 	bvc	14ddedc <__ccfg+0x14bdf34>
	if (len == 0)
    2544:	63667200 	cmnvs	r6, #0, 4
	if (__inpline == NULL) {
    2548:	6461725f 	strbtvs	r7, [r1], #-607	; 0xfffffda1
		if ((prcs = running (__inserial)) == 0) {
    254c:	704f6f69 	subvc	r6, pc, r9, ror #30
    2550:	6200735f 	andvs	r7, r0, #2080374785	; 0x7c000001
			prcs = runthread (__inserial);
    2554:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
    2558:	6f4e7461 	svcvs	0x004e7461
			if (prcs == 0) {
    255c:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
				npwait (st);
    2560:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
		release;
    2564:	7200704f 	andvc	r7, r0, #79	; 0x4f
		join (prcs, st);
    2568:	645f6366 	ldrbvs	r6, [pc], #-870	; 2570 <ser_in+0x34>
    256c:	45617461 	strbmi	r7, [r1, #-1121]!	; 0xfffffb9f
	if (*__inpline == NULL) // bin cmd
    2570:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2574:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
	if (prcs >= len)
    2578:	5f6c6172 	svcpl	0x006c6172
		prcs = len-1;
    257c:	66720073 			; <UNDEFINED> instruction: 0x66720073
	memcpy (buf, __inpline, prcs);
    2580:	61645f63 	cmnvs	r4, r3, ror #30
    2584:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
    2588:	47797274 			; <UNDEFINED> instruction: 0x47797274
	ufree (__inpline);
    258c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
	__inpline = NULL;
    2590:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 2598 <ser_in+0x5c>
	if (*buf) // if it's NULL, it's a bin cmd
    2594:	5f667200 	svcpl	0x00667200
		buf [prcs] = '\0';
    2598:	63746170 	cmnvs	r4, #112, 2
}
    259c:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
		prcs = strlen (__inpline);
    25a0:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    25a4:	6b73666e 	blvs	1cdbf64 <__ccfg+0x1cbbfbc>
		return 0;
    25a8:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    25ac:	52006b4f 	andpl	r6, r0, #80896	; 0x13c00
    25b0:	00746552 	rsbseq	r6, r4, r2, asr r5
int ser_outf (word st, const char *m, ...) {
    25b4:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    25b8:	31796d6d 	cmncc	r9, sp, ror #26
	if ((prcs = running (__outserial)) != 0) {
    25bc:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 25c4 <ser_outf+0x10>
    25c0:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
		join (prcs, st);
    25c4:	5f5f0032 	svcpl	0x005f0032
    25c8:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
		release;
    25cc:	6e003379 	mcrvs	3, 0, r3, cr0, cr9, {3}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    25d0:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
    25d4:	6f697461 	svcvs	0x00697461
    25d8:	7000736e 	andvc	r7, r0, lr, ror #6
		umwait (st);
    25dc:	654c746b 	strbvs	r7, [ip, #-1131]	; 0xfffffb95
    25e0:	7572006e 	ldrbvc	r0, [r2, #-110]!	; 0xffffff92
	if (runstrand (__outserial, buf) == 0) {
    25e4:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    25e8:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    25ec:	6f725064 	svcvs	0x00725064
		ufree (buf);
    25f0:	00785270 	rsbseq	r5, r8, r0, ror r2
		npwait (st);
    25f4:	43434652 	movtmi	r4, #13906	; 0x3652
}
    25f8:	49304550 	ldmdbmi	r0!, {r4, r6, r8, sl, lr}
    25fc:	6148746e 	cmpvs	r8, lr, ror #8
    2600:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    2604:	72640072 	rsbvc	r0, r4, #114	; 0x72
int ser_inf (word st, const char *fmt, ...) {
    2608:	63727076 	cmnvs	r2, #118	; 0x76
    260c:	506e0073 	rsbpl	r0, lr, r3, ror r0
	if (fmt == NULL)
    2610:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
	if (__inpline == NULL) {
    2614:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
		if ((prcs = running (__inserial)) == 0) {
    2618:	63620073 	cmnvs	r2, #115	; 0x73
    261c:	745f666b 	ldrbvc	r6, [pc], #-1643	; 2624 <ser_inf+0x1c>
			prcs = runthread (__inserial);
    2620:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2624:	63667200 	cmnvs	r6, #0, 4
			if (prcs == 0) {
    2628:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
				npwait (st);
    262c:	4f52505f 	svcmi	0x0052505f
		release;
    2630:	58545f50 	ldmdapl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
		join (prcs, st);
    2634:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    2638:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
	va_start (ap, fmt);
    263c:	505f444d 	subspl	r4, pc, sp, asr #8
	prcs = vscan (__inpline, fmt, ap);
    2640:	5f504f52 	svcpl	0x00504f52
    2644:	735f5854 	cmpvc	pc, #84, 16	; 0x540000
	ufree (__inpline);
    2648:	6c646900 			; <UNDEFINED> instruction: 0x6c646900
	__inpline = NULL;
    264c:	00704f65 	rsbseq	r4, r0, r5, ror #30
}
    2650:	71657266 	cmnvc	r5, r6, ror #4
    2654:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2658:	50700079 	rsbspl	r0, r0, r9, ror r0
		return 0;
    265c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2660:	00626154 	rsbeq	r6, r2, r4, asr r1
    2664:	73467363 	movtvc	r7, #25443	; 0x6363
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2668:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    266c:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
    2670:	7472735f 	ldrbtvc	r7, [r2], #-863	; 0xfffffca1
	RF_cmdFs.frequency = 
    2674:	73466200 	movtvc	r6, #25088	; 0x6200
}
    2678:	0066664f 	rsbeq	r6, r6, pc, asr #12
    267c:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    2680:	694d6769 	stmdbvs	sp, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    2684:	64416373 	strbvs	r6, [r1], #-883	; 0xfffffc8d
static int option (int opt, address val) {
    2688:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
    268c:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    2690:	43620065 	cmnmi	r2, #101	; 0x65
    2694:	64416b68 	strbvs	r6, [r1], #-2920	; 0xfffff498
    2698:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    269c:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
    26a0:	47726574 			; <UNDEFINED> instruction: 0x47726574
    26a4:	73666e65 	cmnvc	r6, #1616	; 0x650
    26a8:	6570436b 	ldrbvs	r4, [r0, #-875]!	; 0xfffffc95
    26ac:	63746150 	cmnvs	r4, #80, 2
    26b0:	66720068 	ldrbtvs	r0, [r2], -r8, rrx
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    26b4:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    26b8:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
			goto RVal;
    26bc:	535f434e 	cmppl	pc, #939524097	; 0x38000001
			_BIS (dstate, DSTATE_RXON);
    26c0:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
    26c4:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
	int ret = 0;
    26c8:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
			p_trigger (drvprcs, qevent);
    26cc:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    26d0:	535f444d 	cmppl	pc, #1291845632	; 0x4d000000
    26d4:	5f434e59 	svcpl	0x00434e59
    26d8:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    26dc:	41525f54 	cmpmi	r2, r4, asr pc
    26e0:	00745f54 	rsbseq	r5, r4, r4, asr pc
    26e4:	6c796170 	ldfvse	f6, [r9], #-448	; 0xfffffe40
    26e8:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
    26ec:	73526d75 	cmpvc	r2, #7488	; 0x1d40
    26f0:	75426973 	strbvc	r6, [r2, #-2419]	; 0xfffff68d
}
    26f4:	74007973 	strvc	r7, [r0], #-2419	; 0xfffff68d
			_BIC (dstate, DSTATE_RXON);
    26f8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    26fc:	73556200 	cmpvc	r5, #0, 4
			statid = (val == NULL) ? 0 : *val;
    2700:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
    2704:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
	int ret = 0;
    2708:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
			ret = (int) statid;
    270c:	6b73666e 	blvs	1cdc0cc <__ccfg+0x1cbc124>
	if (val != NULL)
    2710:	50737953 	rsbspl	r7, r3, r3, asr r9
		*val = ret;
    2714:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
			ret = rbuffl + 2;
    2718:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    271c:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
			if (val != NULL) {
    2720:	63006e6f 	movwvs	r6, #3695	; 0xe6f
				memcpy (val, &rxstat,
    2724:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    2728:	61640066 	cmnvs	r4, r6, rrx
				memset (&rxstat, 0, 
    272c:	75516174 	ldrbvc	r6, [r1, #-372]	; 0xfffffe8c
    2730:	5f657565 	svcpl	0x00657565
			if (val == NULL)
    2734:	536e0074 	cmnpl	lr, #116	; 0x74
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2738:	0070696b 	rsbseq	r6, r0, fp, ror #18
    273c:	73796870 	cmnvc	r9, #112, 16	; 0x700000
				utimer_set (bckf_timer, *val);
    2740:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
    2744:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    2748:	6f725064 	svcvs	0x00725064
			for (ret = 0; ret < 8; ret++)
    274c:	00785470 	rsbseq	r5, r8, r0, ror r4
				if (RF_cmdPropRadioDivSetup.txPower
    2750:	46666572 			; <UNDEFINED> instruction: 0x46666572
					== patable [ret])
    2754:	00716572 	rsbseq	r6, r1, r2, ror r5
				if (RF_cmdPropRadioDivSetup.txPower
    2758:	43434652 	movtmi	r4, #13906	; 0x3652
			for (ret = 0; ret < 8; ret++)
    275c:	6b636f6c 	blvs	18de514 <__ccfg+0x18be56c>
    2760:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2764:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    2768:	67676972 			; <UNDEFINED> instruction: 0x67676972
    276c:	79547265 	ldmdbvc	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2770:	4b006570 	blmi	1bd38 <__exidx_end+0x16420>
    2774:	2f504d54 	svccs	0x00504d54
			_BIS (dstate, DSTATE_IRST);
    2778:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    277c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    2780:	00632e6c 	rsbeq	r2, r3, ip, ror #28
			ret = (int) channel;
    2784:	5f766374 	svcpl	0x00766374
			goto RVal;
    2788:	5f74756f 	svcpl	0x0074756f
				(*val > 7) ? 7 : *val;
    278c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2790:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2794:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    2798:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
			plugch ();
    279c:	6374006c 	cmnvs	r4, #108	; 0x6c
			_BIS (dstate, DSTATE_IRST);
    27a0:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    27a4:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
			ret = (int) vrate;
    27a8:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    27ac:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
    27b0:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    27b4:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    27b8:	5f766374 	svcpl	0x00766374
    27bc:	5f6f6c63 	svcpl	0x006f6c63
    27c0:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    27c4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    27c8:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    27cc:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    27d0:	6f62006c 	svcvs	0x0062006c
    27d4:	73646e75 	cmnvc	r4, #1872	; 0x750
    27d8:	73646e00 	cmnvc	r4, #0, 28
			syserror (EREQPAR, "cc13 op");
    27dc:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
    27e0:	71006c6c 	tstvc	r0, ip, ror #24
    27e4:	746e6175 	strbtvc	r6, [lr], #-373	; 0xfffffe8b
    27e8:	6f682f00 	svcvs	0x00682f00
    27ec:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    27f0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    27f4:	442f6e65 	strtmi	r6, [pc], #-3685	; 27fc <option+0x174>
    27f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    27fc:	4f2f706f 	svcmi	0x002f706f
    2800:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2804:	502f5445 	eorpl	r5, pc, r5, asr #8
    2808:	534f4349 	movtpl	r4, #62281	; 0xf349
    280c:	6369502f 	cmnvs	r9, #47	; 0x2f
    2810:	502f534f 	eorpl	r5, pc, pc, asr #6
    2814:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
static void issue_cmd (lword cmd) {
    2818:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    281c:	2f6c6169 	svccs	0x006c6169
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2820:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 18c9 <adddevfunc+0x19>
    2824:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    2828:	2e6c6169 	powcsez	f6, f4, #1.0
		if (res != 0x86)
    282c:	5f5f0063 	svcpl	0x005f0063
			syserror (EHARDWARE, "hang ic0");
    2830:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    2834:	61697265 	cmnvs	r9, r5, ror #4
		if (cnt-- == 0) {
    2838:	5f5f006c 	svcpl	0x005f006c
			diag ("HUP %lx %lx", cmd, res);
    283c:	575f4d4f 	ldrbpl	r4, [pc, -pc, asr #26]
    2840:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0xfffff6ae
			syserror (EHARDWARE, "hang ic0");
    2844:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
		udelay (1);
    2848:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    284c:	006c6169 	rsbeq	r6, ip, r9, ror #2
}
    2850:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 279c <option+0x114>
    2854:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    2858:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    285c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
static void rx_de () {
    2860:	6f746b73 	svcvs	0x00746b73
	if ((dstate & DSTATE_RXAC) == 0)
    2864:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2868:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    286c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	_BIC (dstate, DSTATE_RXAC);
    2870:	2f534f43 	svccs	0x00534f43
    2874:	4f636950 	svcmi	0x00636950
}
    2878:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    287c:	2f736269 	svccs	0x00736269
    2880:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
static void rf_off () {
    2884:	5f2f6c61 	svcpl	0x002f6c61
	if ((dstate & DSTATE_RFON) == 0)
    2888:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    288c:	61697265 	cmnvs	r9, r5, ror #4
	IntDisable (INT_RFC_CPE_0);
    2890:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2894:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 27e0 <option+0x158>
    2898:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	RFCAdi3VcoLdoVoltageMode (false);
    289c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	RFCSynthPowerDown ();
    28a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    28a4:	6f746b73 	svcvs	0x00746b73
    28a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    28ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    28b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	OSCHF_SwitchToRcOscTurnOffXosc ();
    28b4:	2f534f43 	svccs	0x00534f43
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    28b8:	4f636950 	svcmi	0x00636950
    28bc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    28c0:	2f736269 	svccs	0x00736269
	_BIC (dstate, DSTATE_RFON);
    28c4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    28c8:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
}
    28cc:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    28d0:	4100632e 	tstmi	r0, lr, lsr #6
    28d4:	6e696167 	powvsez	f6, f1, f7
    28d8:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
    28dc:	5f5f0063 	svcpl	0x005f0063
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    28e0:	765f6970 			; <UNDEFINED> instruction: 0x765f6970
    28e4:	72617066 	rsbvc	r7, r1, #102	; 0x66
    28e8:	76006573 			; <UNDEFINED> instruction: 0x76006573
		if (cmd->status == tstat)
    28ec:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
		if (timeout-- == 0) {
    28f0:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    28f4:	645f7972 	ldrbvs	r7, [pc], #-2418	; 28fc <wait_cmd.constprop.0+0x1c>
    28f8:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    28fc:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
			syserror (EHARDWARE, "rt2");
    2900:	2f656d6f 	svccs	0x00656d6f
    2904:	70657473 	rsbvc	r7, r5, r3, ror r4
		udelay (1);
    2908:	2f6e6568 	svccs	0x006e6568
		if (cmd->status == tstat)
    290c:	6b736544 	blvs	1cdbe24 <__ccfg+0x1cbbe7c>
}
    2910:	2f706f74 	svccs	0x00706f74
    2914:	4f534c4f 	svcmi	0x00534c4f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2918:	2f54454e 	svccs	0x0054454e
    291c:	4f434950 	svcmi	0x00434950
static void rf_on () {
    2920:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2924:	2f534f63 	svccs	0x00534f63
	OSCHF_TurnOnXosc();
    2928:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    292c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    2930:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    2934:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
    2938:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    293c:	63737600 	cmnvs	r3, #0, 12
    2940:	52006e61 	andpl	r6, r0, #1552	; 0x610
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2944:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2948:	6c5f645f 	cfldrdvs	mvd6, [pc], {95}	; 0x5f
	issue_cmd (
    294c:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    2950:	6f682f00 	svcvs	0x00682f00
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2954:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    2958:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    295c:	442f6e65 	strtmi	r6, [pc], #-3685	; 2964 <rf_on.part.0+0x4c>
   pPatchTab[80] = 0;
    2960:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
   } while (--nIterations);
    2964:	4f2f706f 	svcmi	0x002f706f
   pPatchTab[53] = 2;
    2968:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    296c:	502f5445 	eorpl	r5, pc, r5, asr #8
   pPatchTab[55] = 3;
    2970:	534f4349 	movtpl	r4, #62281	; 0xf349
   pPatchTab[110] = 4;
    2974:	6369502f 	cmnvs	r9, #47	; 0x2f
   pPatchTab[107] = 5;
    2978:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
   pPatchTab[65] = 6;
    297c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    2980:	6d732f58 	ldclvs	15, cr2, [r3, #-352]!	; 0xfffffea0
   pPatchTab[57] = 1;
    2984:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
   pIrqPatch[1] = _IRQ_PATCH_0;
    2988:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
   const uint32_t *pS = patchGenfskRfe;
    298c:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
      t2 = *pS++;
    2990:	6c5f7367 	mrrcvs	3, 6, r7, pc, cr7	; <UNPREDICTABLE>
      t4 = *pS++;
    2994:	72685f70 	rsbvc	r5, r8, #112, 30	; 0x1c0
      t6 = *pS++;
    2998:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
      t8 = *pS++;
    299c:	70746e69 	rsbsvc	r6, r4, r9, ror #28
      *pD++ = t1;
    29a0:	745f7274 	ldrbvc	r7, [pc], #-628	; 29a8 <rf_on.part.0+0x90>
      *pD++ = t2;
    29a4:	764f7000 	strbvc	r7, [pc], -r0
      *pD++ = t3;
    29a8:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      *pD++ = t5;
    29ac:	00736564 	rsbseq	r6, r3, r4, ror #10
      *pD++ = t7;
    29b0:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   } while (--nIterations);
    29b4:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    29b8:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
      *pD++ = t8;
    29bc:	45717249 	ldrbmi	r7, [r1, #-585]!	; 0xfffffdb7
   } while (--nIterations);
    29c0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    29c4:	53006465 	movwpl	r6, #1125	; 0x465
   *pD++ = t2;
    29c8:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
   *pD++ = t3;
    29cc:	41697061 	cmnmi	r9, r1, rrx
   *pD++ = t4;
    29d0:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
   *pD++ = t5;
    29d4:	6c655369 	stclvs	3, cr5, [r5], #-420	; 0xfffffe5c
    29d8:	00746365 	rsbseq	r6, r4, r5, ror #6
	RFCAdi3VcoLdoVoltageMode (true);
    29dc:	52545046 	subspl	r5, r4, #70	; 0x46
    29e0:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
       	RFCRfTrimSet (&rfTrim);
    29e4:	4f565f44 	svcmi	0x00565f44
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    29e8:	545f4449 	ldrbpl	r4, [pc], #-1097	; 29f0 <rf_on.part.0+0xd8>
    29ec:	524f4e00 	subpl	r4, pc, #0, 28
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    29f0:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    29f4:	70635550 	rsbvc	r5, r3, r0, asr r5
	issue_cmd ((lword)&cmd_srt);
    29f8:	00646973 	rsbeq	r6, r4, r3, ror r9
    29fc:	4f524f4e 	svcmi	0x00524f4e
	issue_cmd ((lword)&RF_cmdFs);
    2a00:	50435f4d 	subpl	r5, r3, sp, asr #30
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2a04:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
    2a08:	53006569 	movwpl	r6, #1385	; 0x569
    2a0c:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
	IntEnable (INT_RFC_CPE_0);
    2a10:	56697061 	strbtpl	r7, [r9], -r1, rrx
	_BIC (dstate, DSTATE_IRST);
    2a14:	0064696f 	rsbeq	r6, r4, pc, ror #18
    2a18:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2a1c:	5f38746e 	svcpl	0x0038746e
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2a20:	2f2e0074 	svccs	0x002e0074
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2a24:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	IntEnable (INT_RFC_CPE_0);
    2a28:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a2c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
}
    2a30:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	IntEnable (INT_RFC_CPE_0);
    2a34:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2a38:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    2a3c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    2a40:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
    2a44:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    2a48:	31303220 	teqcc	r0, r0, lsr #4
    2a4c:	32353035 	eorscc	r3, r5, #53	; 0x35
    2a50:	72282039 	eorvc	r2, r8, #57	; 0x39
    2a54:	61656c65 	cmnvs	r5, r5, ror #24
    2a58:	20296573 	eorcs	r6, r9, r3, ror r5
    2a5c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    2a60:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
    2a64:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
    2a68:	5f342d64 	svcpl	0x00342d64
    2a6c:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    2a70:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    2a74:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    2a78:	6f697369 	svcvs	0x00697369
    2a7c:	3232206e 	eorscc	r2, r2, #110	; 0x6e
    2a80:	37373937 			; <UNDEFINED> instruction: 0x37373937
    2a84:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    2a88:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    2a8c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    2a90:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
    2a94:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
static void rx_int_enable () {
    2a98:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2a9c:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
    2aa0:	734f2d20 	movtvc	r2, #64800	; 0xfd20
    2aa4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
    2aa8:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2aac:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2ab0:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
    2ab4:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2ab8:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
    2abc:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ac0:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
    2ac4:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
    2ac8:	6f697463 	svcvs	0x00697463
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2acc:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2ad0:	6f697463 	svcvs	0x00697463
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ad4:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
		if (db->status == DATA_ENTRY_FINISHED) {
    2ad8:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2adc:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
    2ae0:	6f697463 	svcvs	0x00697463
			nr++;
    2ae4:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ae8:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
    2aec:	74506600 	ldrbvc	r6, [r0], #-1536	; 0xfffffa00
    2af0:	50460072 	subpl	r0, r6, r2, ror r0
    2af4:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
				__dp [pl + 1] = __dp [pl] - 128;
    2af8:	5f44494f 	svcpl	0x0044494f
				pl = __dp [1] + 2;
    2afc:	544e4955 	strbpl	r4, [lr], #-2389	; 0xfffff6ab
				__dp [pl + 1] = __dp [pl] - 128;
    2b00:	00545f38 	subseq	r5, r4, r8, lsr pc
    2b04:	4a5c3a43 	bmi	1711418 <__ccfg+0x16f1470>
				__dp [pl] = 0;
    2b08:	696b6e65 	stmdbvs	fp!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2b0c:	6a5c736e 	bvs	171f8cc <__ccfg+0x16ff924>
    2b10:	5c73626f 	lfmpl	f6, 2, [r3], #-444	; 0xfffffe44
    2b14:	72475746 	subvc	r5, r7, #18350080	; 0x1180000
			db->status = DATA_ENTRY_PENDING;
    2b18:	2d70756f 	cfldr64cs	mvdx7, [r0, #-444]!	; 0xfffffe44
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2b1c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2b20:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
				diag ("BAD RX");
    2b24:	6f775c62 	svcvs	0x00775c62
    2b28:	70736b72 	rsbsvc	r6, r3, r2, ror fp
	if (nr) {
    2b2c:	5c656361 	stclpl	3, cr6, [r5], #-388	; 0xfffffe7c
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b30:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
}
    2b34:	5c73656c 	cfldr64pl	mvdx6, [r3], #-432	; 0xfffffe50
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2b38:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    2b3c:	635c7475 	cmpvs	ip, #1962934272	; 0x75000000
    2b40:	78333163 	ldmdavc	r3!, {r0, r1, r5, r6, r8, ip, sp}
}
    2b44:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b48:	5f325f61 	svcpl	0x00325f61
    2b4c:	78655f30 	stmdavc	r5!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    2b50:	72645c74 	rsbvc	r5, r4, #116, 24	; 0x7400
    2b54:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2b58:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
    2b5c:	5c6e6962 			; <UNDEFINED> instruction: 0x5c6e6962
    2b60:	00636367 	rsbeq	r6, r3, r7, ror #6
    2b64:	53387475 	teqpl	r8, #1962934272	; 0x75000000
thread (cc1350_driver)
    2b68:	616e6769 	cmnvs	lr, r9, ror #14
    2b6c:	4f4e006c 	svcmi	0x004e006c
    2b70:	5f4d4f52 	svcpl	0x004d4f52
    2b74:	424e4f41 	submi	r4, lr, #260	; 0x104
    2b78:	6f4d7461 	svcvs	0x004d7461
		if (dstate & DSTATE_IRST) {
    2b7c:	6d65546e 	cfstrdvs	mvd5, [r5, #-440]!	; 0xfffffe48
    2b80:	61726570 	cmnvs	r2, r0, ror r5
    2b84:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
			rf_off ();
    2b88:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
			_BIC (dstate,
    2b8c:	00436765 	subeq	r6, r3, r5, ror #14
    2b90:	746c6f76 	strbtvc	r6, [ip], #-3958	; 0xfffff08a
		if (dstate & DSTATE_RXAC) {
    2b94:	53656761 	cmnpl	r5, #25427968	; 0x1840000
    2b98:	65706f6c 	ldrbvs	r6, [r0, #-3948]!	; 0xfffff094
			if ((dstate & DSTATE_RXON) == 0)
    2b9c:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
				rx_de ();
    2ba0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
		if (paylen == 0) {
    2ba4:	5f00745f 	svcpl	0x0000745f
    2ba8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2bac:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2bb0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2bb4:	2f2e2e2f 	svccs	0x002e2e2f
    2bb8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2bc0 <cc1350_driver+0x58>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2bbc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2bc0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2bc4:	6e6f612f 	powvsep	f6, f7, #10.0
    2bc8:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    2bcc:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    2bd0:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2bd4:	6f43706d 	svcvs	0x0043706d
    2bd8:	63657272 	cmnvs	r5, #536870919	; 0x20000007
		} else if (dstate & DSTATE_RXON) {
    2bdc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if (dstate & DSTATE_RFON)
    2be0:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2be4:	5464656e 	strbtpl	r6, [r4], #-1390	; 0xfffffa92
		re->status = DATA_ENTRY_PENDING;
    2be8:	00706d65 	rsbseq	r6, r0, r5, ror #26
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2bec:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
	issue_cmd ((lword)&RF_cmdPropRx);
    2bf0:	61566e72 	cmpvs	r6, r2, ror lr
	_BIS (dstate, DSTATE_RXAC);
    2bf4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2bf8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2bfc:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2c00:	53746e65 	cmnpl	r4, #1616	; 0x650
	if (dstate & DSTATE_RXAC)
    2c04:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    2c08:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ad4 <rx_int_enable+0x3c>
				if (statid != 0xffff)
    2c0c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    2c10:	43435452 	movtmi	r5, #13394	; 0x3452
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2c14:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
				RF_cmdPropTx.pktLen = (byte) paylen;
    2c18:	6f43746e 	svcvs	0x0043746e
		if (paylen == 0) {
    2c1c:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
			wait (qevent, DR_LOOP);
    2c20:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    2c24:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
			if (dstate & DSTATE_RXAC) {
    2c28:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2c2c:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
				rx_int_enable ();
    2c30:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
			release;
    2c34:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
			} else if (dstate & DSTATE_RFON) {
    2c38:	00646165 	rsbeq	r6, r4, r5, ror #2
				delay (offdelay, DR_GOOF);
    2c3c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2c40:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
    2c44:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
		if (bckf_timer) {
    2c48:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
			wait (qevent, DR_LOOP);
    2c4c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2c50:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
    2c54:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
			delay (bckf_timer, DR_LOOP);
    2c58:	524f4e00 	subpl	r4, pc, #0, 28
    2c5c:	415f4d4f 	cmpmi	pc, pc, asr #26
			if (dstate & DSTATE_RXAC)
    2c60:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    2c64:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
	if (dstate & DSTATE_RFON)
    2c68:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c6c:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
		rx_de ();
    2c70:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
		RF_cmdPropTx . status = 0;
    2c74:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2c78:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    2c7c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2c80:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
		issue_cmd ((lword)&cmd_cs);
    2c84:	63657300 	cmnvs	r5, #0, 6
		if (dstate & DSTATE_IRST)
    2c88:	53646e41 	cmnpl	r4, #1040	; 0x410
    2c8c:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    2c90:	2f2e0063 	svccs	0x002e0063
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2c94:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2c98:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
			delay (1, DR_XMIT);
    2c9c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2ca0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2ca4:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2ca8:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2cac:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    2cb0:	7a697300 	bvc	1a5f8b8 <__ccfg+0x1a3f910>
				RF_cmdPropTx . status = 0;
    2cb4:	70797465 	rsbsvc	r7, r9, r5, ror #8
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2cb8:	4f4e0065 	svcmi	0x004e0065
				issue_cmd ((lword)&RF_cmdPropTx);
    2cbc:	5f4d4f52 	svcpl	0x004d4f52
				proceed (DR_XMIT);
    2cc0:	62555043 	subsvs	r5, r5, #67	; 0x43
    2cc4:	70657361 	rsbvc	r7, r5, r1, ror #6
			txtries++;
    2cc8:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2ccc:	4f4e0074 	svcmi	0x004e0074
    2cd0:	5f4d4f52 	svcpl	0x004d4f52
    2cd4:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2cd8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
		goto DR_LOOP__;
    2cdc:	33697500 	cmncc	r9, #0, 10
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ce0:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
		paylen = 0;
    2ce4:	33697500 	cmncc	r9, #0, 10
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ce8:	756f4332 	strbvc	r4, [pc, #-818]!	; 29be <rf_on.part.0+0xa6>
		txtries = 0;
    2cec:	2e00746e 	cdpcs	4, 0, cr7, cr0, cr14, {3}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2cf0:	2f2e2e2f 	svccs	0x002e2e2f
    2cf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2cf8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2cfc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2d00:	2f62696c 	svccs	0x0062696c
		    tcvphy_top (physid) == NULL)
    2d04:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    2d08:	4f4e0063 	svcmi	0x004e0063
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2d0c:	5f4d4f52 	svcpl	0x004d4f52
    2d10:	70555043 	subsvc	r5, r5, r3, asr #32
			rf_off ();
    2d14:	616d6972 	smcvs	54930	; 0xd692
endthread
    2d18:	4e006b73 	vmovmi.16	d0[1], r6
    2d1c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2be8 <cc1350_driver+0x80>
    2d20:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2d24:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d28:	756f536b 	strbvc	r5, [pc, #-875]!	; 29c5 <rf_on.part.0+0xad>
    2d2c:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    2d30:	46007465 	strmi	r7, [r0], -r5, ror #8
    2d34:	5f525450 	svcpl	0x00525450
    2d38:	54454c46 	strbpl	r4, [r5], #-3142	; 0xfffff3ba
    2d3c:	52454843 	subpl	r4, r5, #4390912	; 0x430000
    2d40:	545f3233 	ldrbpl	r3, [pc], #-563	; 2d48 <cc1350_driver+0x1e0>
    2d44:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d48:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    2d4c:	41564444 	cmpmi	r6, r4, asr #8
    2d50:	00545f4c 	subseq	r5, r4, ip, asr #30
    2d54:	4f524f4e 	svcmi	0x00524f4e
void RFCCPE0IntHandler (void) {
    2d58:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2d5c:	6f6c4343 	svcvs	0x006c4343
		_BIS (dstate, DSTATE_IRST);
    2d60:	6f536b63 	svcvs	0x00536b63
    2d64:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2d68:	00746547 	rsbseq	r6, r4, r7, asr #10
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2d6c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2d70:	0063734f 	rsbeq	r7, r3, pc, asr #6
    2d74:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
	p_trigger (drvprcs, qevent);
    2d78:	6f437463 	svcvs	0x00437463
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2d7c:	5242706d 	subpl	r7, r2, #109	; 0x6d
    2d80:	46006665 	strmi	r6, [r0], -r5, ror #12
    2d84:	5f525450 	svcpl	0x00525450
    2d88:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2d8c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2d90:	00545f34 	subseq	r5, r4, r4, lsr pc
    2d94:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2d98:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2d9c:	435f6e4f 	cmpmi	pc, #1264	; 0x4f0
    2da0:	4f4e0056 	svcmi	0x004e0056
	RISE_N_SHINE;
    2da4:	5f4d4f52 	svcpl	0x004d4f52
    2da8:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2dac:	74415f46 	strbvc	r5, [r1], #-3910	; 0xfffff0ba
}
    2db0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2db4:	536f5474 	cmnpl	pc, #116, 8	; 0x74000000
    2db8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2dbc:	586f5468 	stmdapl	pc!, {r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2dc0:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2dc4:	6f534648 	svcvs	0x00534648
void phys_cc1350 (int phy, int mbs) {
    2dc8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
	if (rbuffl != 0)
    2dcc:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    2dd0:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
		syserror (ETOOMANY, "cc13");
    2dd4:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
		syserror (EREQPAR, "cc13 mb");
    2dd8:	58706d65 	ldmdapl	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
	if (mbs == 0)
    2ddc:	4f63736f 	svcmi	0x0063736f
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2de0:	6e006666 	cfmadd32vs	mvax3, mvfx6, mvfx0, mvfx6
		syserror (EREQPAR, "cc13 mb");
    2de4:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
    2de8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
	i = 0;
    2dec:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
	rbuffl = (byte) mbs;
    2df0:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
		db->config.type = 0;	// General (data in structure)
    2df4:	61700073 	cmnvs	r0, r3, ror r0
	rbuffl = (byte) mbs;
    2df8:	506d6172 	rsbpl	r6, sp, r2, ror r1
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2dfc:	61700031 	cmnvs	r0, r1, lsr r0
    2e00:	506d6172 	rsbpl	r6, sp, r2, ror r1
		if (db == NULL)
    2e04:	61700032 	cmnvs	r0, r2, lsr r0
			syserror (EMALLOC, "cc13");
    2e08:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2e0c:	5f5f0033 	svcpl	0x005f0033
    2e10:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
		db->status = DATA_ENTRY_PENDING;
    2e14:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2e1c <phys_cc1350+0x54>
		if (i)
    2e18:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
			da->pNextEntry = (byte*) db;
    2e1c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
		db->length = rbuffl + 2;
    2e20:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2e24:	5f334445 	svcpl	0x00334445
		db->config.type = 0;	// General (data in structure)
    2e28:	72700054 	rsbsvc	r0, r0, #84	; 0x54
		db->length = rbuffl + 2;
    2e2c:	6f697665 	svcvs	0x00697665
	db->pNextEntry = (byte*) re;
    2e30:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2e34:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2e38:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
	if (rbuffs == NULL)
    2e3c:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
	rbuffs->pCurrEntry = (byte*) re;
    2e40:	2f2e0073 	svccs	0x002e0073
	rbuffs->pLastEntry = NULL;
    2e44:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e48:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e4c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2e50:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2e54:	6f2f6269 	svcvs	0x002f6269
    2e58:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
	rbuffl -= 2;
    2e5c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e60:	736f5865 	cmnvc	pc, #6619136	; 0x650000
	rbuffl -= 2;
    2e64:	61745363 	cmnvs	r4, r3, ror #6
	physid = phy;
    2e68:	5f656c62 	svcpl	0x00656c62
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e6c:	74005643 	strvc	r5, [r0], #-1603	; 0xfffff9bd
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e70:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2e74:	61746c65 	cmnvs	r4, r5, ror #24
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2e78:	776f6c00 	strbvc	r6, [pc, -r0, lsl #24]!
    2e7c:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
	utimer_add (&bckf_timer);
    2e80:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2cbc <cc1350_driver+0x154>
	drvprcs = runthread (cc1350_driver);
    2e84:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
    2e88:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    2e8c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
	if (drvprcs == 0)
    2e90:	4f4e0065 	svcmi	0x004e0065
		syserror (ERESOURCE, "cc13");
    2e94:	5f4d4f52 	svcpl	0x004d4f52
    2e98:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2e9c:	75545f46 	ldrbvc	r5, [r4, #-3910]	; 0xfffff0ba
    2ea0:	6e4f6e72 	mcrvs	14, 2, r6, cr15, cr2, {3}
    2ea4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2ea8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2eac:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2eb0:	44544553 	ldrbmi	r4, [r4], #-1363	; 0xfffffaad
    2eb4:	545f5645 	ldrbpl	r5, [pc], #-1605	; 2ebc <phys_cc1350+0xf4>
    2eb8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2ebc:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2ec0:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2ec4:	5f324445 	svcpl	0x00324445
    2ec8:	65520054 	ldrbvs	r0, [r2, #-84]	; 0xffffffac
    2ecc:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2ed0:	6f4c6465 	svcvs	0x004c6465
	plugch ();
    2ed4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2ed8:	00336e6f 	eorseq	r6, r3, pc, ror #28
    2edc:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2ee0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2ee4:	73655200 	cmnvc	r5, #0, 4
    2ee8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2eec:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
}
    2ef0:	6f697461 	svcvs	0x00697461
    2ef4:	4e00346e 	cdpmi	4, 0, cr3, cr0, cr14, {3}
    2ef8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2dc4 <RFCCPE0IntHandler+0x6c>
    2efc:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2f00:	535f4648 	cmppl	pc, #72, 12	; 0x4800000
    2f04:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2f08:	526f5468 	rsbpl	r5, pc, #104, 8	; 0x68000000
    2f0c:	63734f63 	cmnvs	r3, #396	; 0x18c
    2f10:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    2f14:	5866664f 	stmdapl	r6!, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    2f18:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2f1c:	52545046 	subspl	r5, r4, #70	; 0x46
    2f20:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    2f24:	5f4c4156 	svcpl	0x004c4156
    2f28:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
    2f2c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2f30:	43434441 	movtmi	r4, #13377	; 0x3441
    2f34:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
    2f38:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    2f3c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2f40:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2f44:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2f48:	5678614d 	ldrbtpl	r6, [r8], -sp, asr #2
    2f4c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2f50:	524f4e00 	subpl	r4, pc, #0, 28
    2f54:	4f5f4d4f 	svcmi	0x005f4d4f
    2f58:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2f5c:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2f60:	616c6552 	cmnvs	ip, r2, asr r5
    2f64:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    2f68:	71657246 	cmnvc	r5, r6, asr #4
    2f6c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2f70:	66664f79 	uqsub16vs	r4, r6, r9
    2f74:	47746573 			; <UNDEFINED> instruction: 0x47746573
    2f78:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    2f7c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e48 <phys_cc1350+0x80>
    2f80:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2f84:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2f8c <tcv_out_null>
    2f88:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    2f8c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2f90:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2f94:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2f98:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2f9c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2fa0:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2fa4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2fa8:	50460065 	subpl	r0, r6, r5, rrx
    2fac:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2fb0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2fb4:	31444556 	cmpcc	r4, r6, asr r5
    2fb8:	4300545f 	movwmi	r5, #1119	; 0x45f
    2fbc:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    2fc0:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    2fc4:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    2fc8:	00323372 	eorseq	r3, r2, r2, ror r3
    2fcc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2fd0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2fd4:	50460064 	subpl	r0, r6, r4, rrx
    2fd8:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2e90 <phys_cc1350+0xc8>
strand (__outserial, const char*)
    2fdc:	564e4145 	strbpl	r4, [lr], -r5, asr #2
    2fe0:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2fe8 <__outserial+0xc>
    2fe4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2fe8:	44415f52 	strbmi	r5, [r1], #-3922	; 0xfffff0ae
endstrand
    2fec:	4d4f4343 	stclmi	3, cr4, [pc, #-268]	; 2ee8 <phys_cc1350+0x120>
    2ff0:	4e494250 	mcrmi	2, 2, r4, cr9, cr0, {2}
	ptr = data;
    2ff4:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2ff8:	5f525450 	svcpl	0x00525450
	if (*ptr)
    2ffc:	504d4f43 	subpl	r4, sp, r3, asr #30
		len = strlen (ptr);
    3000:	46455242 	strbmi	r5, [r5], -r2, asr #4
    3004:	5300545f 	movwpl	r5, #1119	; 0x45f
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3008:	63656c65 	cmnvs	r5, #25856	; 0x6500
    300c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2e44 <phys_cc1350+0x7c>
    3010:	6e494170 	mcrvs	1, 2, r4, cr9, cr0, {3}
    3014:	00747570 	rsbseq	r7, r4, r0, ror r5
    3018:	52545046 	subspl	r5, r4, #70	; 0x46
	len -= quant;
    301c:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2ea8 <phys_cc1350+0xe0>
    3020:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    3024:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
	if (len == 0) {
    3028:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
		ufree (data);
    302c:	61746c65 	cmnvs	r4, r5, ror #24
		finish;
    3030:	6f003258 	svcvs	0x00003258
    3034:	66486373 			; <UNDEFINED> instruction: 0x66486373
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3038:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    303c:	00736c61 	rsbseq	r6, r3, r1, ror #24
    3040:	534f5048 	movtpl	r5, #61512	; 0xf048
    3044:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xfffff0bd
    3048:	6572466c 	ldrbvs	r4, [r2, #-1644]!	; 0xfffff994
strand (__inserial, address)
    304c:	66664f71 	uqsub16vs	r4, r6, r1
    3050:	00746573 	rsbseq	r6, r4, r3, ror r5
    3054:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3058:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
    305c:	6e695365 	cdpvs	3, 6, cr5, cr9, cr5, {3}
	if (__inpline != NULL)
    3060:	6f586563 	svcvs	0x00586563
    3064:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
		finish;
    3068:	734d6e49 	movtvc	r6, #56905	; 0xde49
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    306c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    3070:	65546174 	ldrbvs	r6, [r4, #-372]	; 0xfffffe8c
    3074:	6953706d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, ip, sp, lr}^
    3078:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
		umwait (IM_INIT);
    307c:	4f63736f 	svcmi	0x0063736f
		release;
    3080:	6966006e 	stmdbvs	r6!, {r1, r2, r3, r5, r6}^
	savedata (data);
    3084:	72615074 	rsbvc	r5, r1, #116	; 0x74
	len = MAX_LINE_LENGTH;
    3088:	00736d61 	rsbseq	r6, r3, r1, ror #26
	io (IM_READ, __cport, READ, ptr, 1);
    308c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3090:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    3094:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    3098:	0073556e 	rsbseq	r5, r3, lr, ror #10
	if (ptr == (char*) data) { // new line
    309c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    30a0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		if (*ptr == '\0') { // bin cmd
    30a4:	5f66664f 	svcpl	0x0066664f
			proceed (IM_BIN);
    30a8:	4f005643 	svcmi	0x00005643
    30ac:	66484353 			; <UNDEFINED> instruction: 0x66484353
		if (*ptr < 0x20)
    30b0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    30b4:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
			proceed (IM_READ);
    30b8:	00796461 	rsbseq	r6, r9, r1, ror #8
    30bc:	43706d61 	cmnmi	r0, #6208	; 0x1840
	if (*ptr == '\n' || *ptr == '\r') {
    30c0:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    30c4:	4f003168 	svcmi	0x00003168
    30c8:	66486373 			; <UNDEFINED> instruction: 0x66486373
		*ptr = '\0';
    30cc:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
		__inpline = (char*)data;
    30d0:	5f736c61 	svcpl	0x00736c61
		finish;
    30d4:	41480074 	hvcmi	32772	; 0x8004
	if (len) {
    30d8:	415f4452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
		ptr++;
    30dc:	545f4950 	ldrbpl	r4, [pc], #-2384	; 30e4 <__inserial+0x98>
    30e0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
		len--;
    30e4:	746e5565 	strbtvc	r5, [lr], #-1381	; 0xfffffa9b
	proceed (IM_READ);
    30e8:	61576c69 	cmpvs	r7, r9, ror #24
	io (IM_BIN, __cport, READ, ptr, 1);
    30ec:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    30f0:	734d6e49 	movtvc	r6, #56905	; 0xde49
    30f4:	33697500 	cmncc	r9, #0, 10
    30f8:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
    30fc:	006b6c43 	rsbeq	r6, fp, r3, asr #24
	len -= 2;
    3100:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	if (len > *ptr + 1) // 1 for 0x04
    3104:	756f5366 	strbvc	r5, [pc, #-870]!	; 2da6 <RFCCPE0IntHandler+0x4e>
    3108:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
		len = *ptr + 1;
    310c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    3110:	50460068 	subpl	r0, r6, r8, rrx
	ptr++;
    3114:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3118:	32334352 	eorscc	r4, r3, #1207959553	; 0x48000001
    311c:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    3120:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    3124:	00436765 	subeq	r6, r3, r5, ror #14
    3128:	52545046 	subspl	r5, r4, #70	; 0x46
    312c:	4e494d5f 	mcrmi	13, 2, r4, cr9, cr15, {2}
	len -= quant;
    3130:	5f4c4156 	svcpl	0x004c4156
		__inpline = (char*)data;
    3134:	50460054 	subpl	r0, r6, r4, asr r0
		finish;
    3138:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
	ptr += quant;
    313c:	554f5346 	strbpl	r5, [pc, #-838]	; 2dfe <phys_cc1350+0x36>
    3140:	53454352 	movtpl	r4, #21330	; 0x5352
endstrand
    3144:	53454641 	movtpl	r4, #22081	; 0x5641
    3148:	43544957 	cmpmi	r4, #1425408	; 0x15c000
	proceed (IM_BINL);
    314c:	00545f48 	subseq	r5, r4, r8, asr #30
endstrand
    3150:	566e694d 	strbtpl	r6, [lr], -sp, asr #18
    3154:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3158:	65727000 	ldrbvs	r7, [r2, #-0]!
    315c:	6d694c76 	stclvs	12, cr4, [r9, #-472]!	; 0xfffffe28
    3160:	3274696d 	rsbscc	r6, r4, #1785856	; 0x1b4000
    3164:	556e4935 	strbpl	r4, [lr, #-2357]!	; 0xfffff6cb
		if (res && (d < n))
    3168:	4f4e0073 	svcmi	0x004e0073
    316c:	5f4d4f52 	svcpl	0x004d4f52
    3170:	5f43534f 	svcpl	0x0043534f
    3174:	534f5048 	movtpl	r5, #61512	; 0xf048
			res [d] = (char) c;
    3178:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
		d++;
    317c:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    3180:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    3184:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3188:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    318c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3190:	46526f54 	usaxmi	r6, r2, r4
				enci (10000);
    3194:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3198:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    319c:	6f437461 	svcvs	0x00437461
	d = 0;
    31a0:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
		c = *fm++;
    31a4:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
		if (c == '\\') {
    31a8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
			if ((c = *fm++) == '\0') {
    31ac:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    31b0:	66655241 	strbtvs	r5, [r5], -r1, asr #4
				outc ('\\');
    31b4:	33697500 	cmncc	r9, #0, 10
			if ((c = *fm++) == '\0') {
    31b8:	6f6c4332 	svcvs	0x006c4332
				outc ('\\');
    31bc:	6f536b63 	svcvs	0x00536b63
    31c0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
			outc (c);
    31c4:	73655200 	cmnvc	r5, #0, 4
    31c8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
			if (c == '\0')
    31cc:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    31d0:	6f697461 	svcvs	0x00697461
			outc (c);
    31d4:	5200316e 	andpl	r3, r0, #-2147483621	; 0x8000001b
				outc (val);
    31d8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
				val = (word) va_arg (ap, aword);
    31dc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
		if (c == '%') {
    31e0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    31e4:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
			c = *fm++;
    31e8:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
			switch (c) {
    31ec:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    31f0:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
    31f4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    31f8:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    31fc:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    3200:	356e6f69 	strbcc	r6, [lr, #-3945]!	; 0xfffff097
    3204:	61745300 	cmnvs	r4, r0, lsl #6
    3208:	6544646e 	strbvs	r6, [r4, #-1134]	; 0xfffffb92
				outc ('%');
    320c:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
    3210:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
				outc (c);
    3214:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3218:	43667200 	cmnmi	r6, #0, 4
    321c:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
				if (c == '\0')
    3220:	4f716572 	svcmi	0x00716572
				return d;
    3224:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
}
    3228:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    322c:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
			switch (c) {
    3230:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3234:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    3238:	4f524f4e 	svcmi	0x00524f4e
				for (i = 12; ; i -= 4) {
    323c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
				val = (word) va_arg (ap, aword);
    3240:	5f464843 	svcpl	0x00464843
						[ (val >> i) & 0xf ]);
    3244:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    3248:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    324c:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
					outc (__pi_hex_enc_table
    3250:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    3254:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
					if (i == 0)
    3258:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    325c:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
				for (i = 12; ; i -= 4) {
    3260:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
				val = (word) va_arg (ap, aword);
    3264:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
				if (c == 'd' && (val & 0x8000) != 0) {
    3268:	00656475 	rsbeq	r6, r5, r5, ror r4
				val = (word) va_arg (ap, aword);
    326c:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
				if (c == 'd' && (val & 0x8000) != 0) {
    3270:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    3274:	706f4367 	rsbvc	r4, pc, r7, ror #6
					outc ('-');
    3278:	50460079 	subpl	r0, r6, r9, ror r0
    327c:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
					val = (~val) + 1;
    3280:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    3284:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
				for (i = 12; ; i -= 4) {
    3288:	4e00545f 	cfmvsrmi	mvf0, r5
				enci (10000);
    328c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3158 <__inserial+0x10c>
    3290:	43534f5f 	cmpmi	r3, #380	; 0x17c
    3294:	475f4648 	ldrbmi	r4, [pc, -r8, asr #12]
    3298:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
    329c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    32a0:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    32a4:	6c460065 	mcrrvs	0, 6, r0, r6, cr5
    32a8:	47687361 	strbmi	r7, [r8, -r1, ror #6]!
    32ac:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    32b0:	4600657a 			; <UNDEFINED> instruction: 0x4600657a
    32b4:	5f525450 	svcpl	0x00525450
    32b8:	504d4f43 	subpl	r4, sp, r3, asr #30
    32bc:	46455241 	strbmi	r5, [r5], -r1, asr #4
    32c0:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    32c4:	5f525450 	svcpl	0x00525450
    32c8:	43544547 	cmpmi	r4, #297795584	; 0x11c00000
    32cc:	49504948 	ldmdbmi	r0, {r3, r6, r8, fp, lr}^
    32d0:	00545f44 	subseq	r5, r4, r4, asr #30
				if (c == 'd' || c == 'u') {
    32d4:	52545046 	subspl	r5, r4, #70	; 0x46
    32d8:	5345525f 	movtpl	r5, #21087	; 0x525f
					if (c == 'd' &&
    32dc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
					val = va_arg (ap, lword);
    32e0:	545f3544 	ldrbpl	r3, [pc], #-1348	; 32e8 <__pi_vfparse+0x160>
					fm++;
    32e4:	72617000 	rsbvc	r7, r1, #0
					if (c == 'd' &&
    32e8:	30506d61 	subscc	r6, r0, r1, ror #26
    32ec:	524f4e00 	subpl	r4, pc, #0, 28
						outc ('-');
    32f0:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    32f4:	70434346 	subvc	r4, r3, r6, asr #6
						val = (~val) + 1;
    32f8:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
				enci (10000);
    32fc:	41746547 	cmnmi	r4, r7, asr #10
					enci (1000000000UL);
    3300:	6c43646e 	cfstrdvs	mvd6, [r3], {110}	; 0x6e
    3304:	00726165 	rsbseq	r6, r2, r5, ror #2
    3308:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
    330c:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    3310:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
    3314:	745f657a 	ldrbvc	r6, [pc], #-1402	; 331c <__pi_vfparse+0x194>
    3318:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
    331c:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    3320:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    3324:	00786564 	rsbseq	r6, r8, r4, ror #10
    3328:	4f524f4e 	svcmi	0x00524f4e
    332c:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    3330:	69644143 	stmdbvs	r4!, {r0, r1, r6, r8, lr}^
    3334:	6f635633 	svcvs	0x00635633
    3338:	566f644c 	strbtpl	r6, [pc], -ip, asr #8
    333c:	61746c6f 	cmnvs	r4, pc, ror #24
    3340:	6f4d6567 	svcvs	0x004d6567
				} else if (c == 'x') {
    3344:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
					for (i = 28; ; i -= 4) {
    3348:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
					val = va_arg (ap, lword);
    334c:	505f444d 	subspl	r4, pc, sp, asr #8
							[ (val >> i) & 0xf ]);
    3350:	5f504f52 	svcpl	0x00504f52
    3354:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
						outc (__pi_hex_enc_table
    3358:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    335c:	5f505554 	svcpl	0x00505554
    3360:	4f4e0074 	svcmi	0x004e0074
						if (i == 0)
    3364:	5f4d4f52 	svcpl	0x004d4f52
    3368:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
					for (i = 28; ; i -= 4) {
    336c:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
					outc ('%');
    3370:	7465536d 	strbtvc	r5, [r5], #-877	; 0xfffffc93
    3374:	524f4e00 	subpl	r4, pc, #0, 28
    3378:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
					outc ('l');
    337c:	79534346 	ldmdbvc	r3, {r1, r2, r6, r8, r9, lr}^
    3380:	5068746e 	rsbpl	r7, r8, lr, ror #8
				val = (word) va_arg (ap, aword);
    3384:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
				outc (val);
    3388:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    338c:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
				while (*st != '\0') {
    3390:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    3394:	74725f65 	ldrbtvc	r5, [r2], #-3941	; 0xfffff09b
    3398:	006d6972 	rsbeq	r6, sp, r2, ror r9
    339c:	53704f70 	cmnpl	r0, #112, 30	; 0x1c0
					outc (*st);
    33a0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    33a4:	33697500 	cmncc	r9, #0, 10
					st++;
    33a8:	67664932 			; <UNDEFINED> instruction: 0x67664932
		c = *fm++;
    33ac:	63667200 	cmnvs	r6, #0, 4
    33b0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    33b4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
char *vform (char *res, const char *fm, va_list aq) {
    33b8:	41717249 	cmnmi	r1, r9, asr #4
    33bc:	00726464 	rsbseq	r6, r2, r4, ror #8
	if (res != NULL) {
    33c0:	4f524f4e 	svcmi	0x00524f4e
		__pi_vfparse (res, MAX_WORD, fm, aq);
    33c4:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    33c8:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
    33cc:	63746150 	cmnvs	r4, #80, 2
}
    33d0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    33d4:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
	fml = strlen (fm) + 17;
    33d8:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    33dc:	505f444d 	subspl	r4, pc, sp, asr #8
    33e0:	5f504f52 	svcpl	0x00504f52
	if ((res = (char*) umalloc (fml)) == NULL)
    33e4:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    33e8:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    33ec:	5f505554 	svcpl	0x00505554
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    33f0:	52700073 	rsbspl	r0, r0, #115	; 0x73
    33f4:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    33f8:	766f006d 	strbtvc	r0, [pc], -sp, rrx
    33fc:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		ufree (res);
    3400:	765f6564 	ldrbvc	r6, [pc], -r4, ror #10
		goto Again;
    3404:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	if (buf == NULL || fmt == NULL)
    3408:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
int vscan (const char *buf, const char *fmt, va_list ap) {
    340c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	if (buf == NULL || fmt == NULL)
    3410:	2f2e2e2f 	svccs	0x002e2e2f
    3414:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3418:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		    	    case 'u': scanu (lword); break;
    341c:	66722f62 	ldrbtvs	r2, [r2], -r2, ror #30
			while (isspace (*buf)) buf++;
    3420:	00632e63 	rsbeq	r2, r3, r3, ror #28
    3424:	5f636672 	svcpl	0x00636672
	while (*fmt != '\0') {
    3428:	5f444d43 	svcpl	0x00444d43
		if (*fmt++ != '%')
    342c:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
		switch (*fmt++) {
    3430:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    3434:	5f505554 	svcpl	0x00505554
    3438:	66720073 			; <UNDEFINED> instruction: 0x66720073
    343c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    3440:	41525f44 	cmpmi	r2, r4, asr #30
    3444:	5f4f4944 	svcpl	0x004f4944
    3448:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
}
    344c:	00745f50 	rsbseq	r5, r4, r0, asr pc
		switch (*fmt++) {
    3450:	616e4562 	cmnvs	lr, r2, ror #10
    3454:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3458:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    345c:	74725f31 	ldrbtvc	r5, [r2], #-3889	; 0xfffff0cf
			while (isspace (*buf)) buf++;
    3460:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3464:	4f524f4e 	svcmi	0x00524f4e
    3468:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    346c:	72545243 	subsvc	r5, r4, #805306372	; 0x30000004
    3470:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    3474:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3340 <__pi_vfparse+0x1b8>
			if (*buf == '\0')
    3478:	4346525f 	movtmi	r5, #25183	; 0x625f
			if (*buf != ',') {
    347c:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
			sap = va_arg (ap, char*);
    3480:	6c6c6562 	cfstr64vs	mvdx6, [ip], #-392	; 0xfffffe78
			nc++;
    3484:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
			if (*buf != ',') {
    3488:	52006f54 	andpl	r6, r0, #84, 30	; 0x150
				while (!isspace (*buf) && *buf != ',' &&
    348c:	63414346 	movtvs	r4, #4934	; 0x1346
    3490:	746e496b 	strbtvc	r4, [lr], #-2411	; 0xfffff695
    3494:	61656c43 	cmnvs	r5, r3, asr #24
    3498:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    349c:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    34a0:	4f4e0072 	svcmi	0x004e0072
    34a4:	5f4d4f52 	svcpl	0x004d4f52
			while (isspace (*buf)) buf++;
    34a8:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
    34ac:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    34b0:	6165526d 	cmnvs	r5, sp, ror #4
    34b4:	706d0064 	rsbvc	r0, sp, r4, rrx
    34b8:	76657231 			; <UNDEFINED> instruction: 0x76657231
			if (*buf == ',') buf++;
    34bc:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    34c0:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
			*sap = '\0';
    34c4:	6f437265 	svcvs	0x00437265
			break;
    34c8:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
		    case 'd': scani (word); break;
    34cc:	57746573 			; <UNDEFINED> instruction: 0x57746573
    34d0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    34d4:	6f724670 	svcvs	0x00724670
    34d8:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    34dc:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    34e0:	4f4e006e 	svcmi	0x004e006e
    34e4:	5f4d4f52 	svcpl	0x004d4f52
    34e8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    34ec:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
    34f0:	6f437265 	svcvs	0x00437265
    34f4:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    34f8:	57746573 			; <UNDEFINED> instruction: 0x57746573
    34fc:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3500:	6f724670 	svcvs	0x00724670
    3504:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3508:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    350c:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3510:	4f4e0031 	svcmi	0x004e0031
    3514:	5f4d4f52 	svcpl	0x004d4f52
    3518:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    351c:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
    3520:	6f437265 	svcvs	0x00437265
    3524:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3528:	57746573 			; <UNDEFINED> instruction: 0x57746573
    352c:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3530:	6f724670 	svcvs	0x00724670
    3534:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3538:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
		    case 'u': scanu (word); break;
    353c:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3540:	4f4e0032 	svcmi	0x004e0032
    3544:	5f4d4f52 	svcpl	0x004d4f52
    3548:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    354c:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
    3550:	6f437265 	svcvs	0x00437265
    3554:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3558:	57746573 			; <UNDEFINED> instruction: 0x57746573
    355c:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3560:	6f724670 	svcvs	0x00724670
    3564:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3568:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    356c:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3570:	2f2e0033 	svccs	0x002e0033
    3574:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3578:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    357c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3580:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
		    case 'x': scanx (word); break;
    3584:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3588:	70757465 	rsbsvc	r7, r5, r5, ror #8
    358c:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3590:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 345c <vscan+0x54>
    3594:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3598:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    359c:	63614374 	cmnvs	r1, #116, 6	; 0xd0000001
    35a0:	6f4d6568 	svcvs	0x004d6568
    35a4:	63416564 	movtvs	r6, #5476	; 0x1564
    35a8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    35ac:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    35b0:	6663436f 	strbtvs	r4, [r3], -pc, ror #6
    35b4:	74655367 	strbtvc	r5, [r5], #-871	; 0xfffffc99
    35b8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    35bc:	33697500 	cmncc	r9, #0, 10
    35c0:	66634632 			; <UNDEFINED> instruction: 0x66634632
    35c4:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    35c8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    35cc:	41006e6f 	tstmi	r0, pc, ror #28
    35d0:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
    35d4:	61744a43 	cmnvs	r4, r3, asr #20
    35d8:	776f5067 	strbvc	r5, [pc, -r7, rrx]!
    35dc:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    35e0:	72540066 	subsvc	r0, r4, #102	; 0x66
    35e4:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    35e8:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    35ec:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    35f0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    35f4:	524f4e00 	subpl	r4, pc, #0, 28
    35f8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
			switch (*fmt++) {
    35fc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3600:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3604:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3608:	76006563 	strvc	r6, [r0], -r3, ror #10
    360c:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    3610:	6964755f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
		    	    case 'd': scani (lword); break;
    3614:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    3618:	6f413233 	svcvs	0x00413233
    361c:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    3620:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3624:	6c746374 	ldclvs	3, cr6, [r4], #-464	; 0xfffffe30
    3628:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    362c:	6f4d5f67 	svcvs	0x004d5f67
    3630:	6f436564 	svcvs	0x00436564
    3634:	6552666e 	ldrbvs	r6, [r2, #-1646]	; 0xfffff992
    3638:	72540067 	subsvc	r0, r4, #103	; 0x67
    363c:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    3640:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    3644:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    3648:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    364c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    3650:	72467075 	subvc	r7, r6, #117	; 0x75
    3654:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3658:	6f447475 	svcvs	0x00447475
    365c:	61576e77 	cmpvs	r7, r7, ror lr
    3660:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    3664:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3554 <vscan+0x14c>
    3668:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    366c:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
		    	    case 'x': scanx (lword); break;
    3670:	4f4e006e 	svcmi	0x004e006e
    3674:	5f4d4f52 	svcpl	0x004d4f52
    3678:	73696854 	cmnvc	r9, #84, 16	; 0x540000
    367c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    3680:	75427349 	strbvc	r7, [r2, #-841]	; 0xfffffcb7
    3684:	46746c69 	ldrbtmi	r6, [r4], -r9, ror #24
    3688:	4343726f 	movtmi	r7, #12911	; 0x326f
    368c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3690:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3694:	41303276 	teqmi	r0, r6, ror r2
    3698:	614c646e 	cmpvs	ip, lr, ror #8
    369c:	5f726574 	svcpl	0x00726574
    36a0:	746c6148 	strbtvc	r6, [ip], #-328	; 0xfffffeb8
    36a4:	69566649 	ldmdbvs	r6, {r0, r3, r6, r9, sl, sp, lr}^
    36a8:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    36ac:	76006465 	strvc	r6, [r0], -r5, ror #8
    36b0:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    36b4:	646f625f 	strbtvs	r6, [pc], #-607	; 36bc <vscan+0x2b4>
    36b8:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    36bc:	74784567 	ldrbtvc	r4, [r8], #-1383	; 0xfffffa99
    36c0:	6c43664c 	mcrrvs	6, 4, r6, r3, cr12
    36c4:	7563006b 	strbvc	r0, [r3, #-107]!	; 0xffffff95
    36c8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    36cc:	43664874 	cmnmi	r6, #116, 16	; 0x740000
    36d0:	6b636f6c 	blvs	18df488 <__ccfg+0x18bf4e0>
    36d4:	33697500 	cmncc	r9, #0, 10
    36d8:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    36dc:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
		    	    case 'd': scani (lword); break;
    36e0:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    36e4:	524f4e00 	subpl	r4, pc, #0, 28
    36e8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    36ec:	70757465 	rsbsvc	r7, r5, r5, ror #8
    36f0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    36f4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    36f8:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
		    	    case 'u': scanu (lword); break;
    36fc:	70796261 	rsbsvc	r6, r9, r1, ror #4
    3700:	56737361 	ldrbtpl	r7, [r3], -r1, ror #6
    3704:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3708:	4f4e0031 	svcmi	0x004e0031
    370c:	5f4d4f52 	svcpl	0x004d4f52
    3710:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3714:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3718:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    371c:	44726f46 	ldrbtmi	r6, [r2], #-3910	; 0xfffff0ba
    3720:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    3724:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    3728:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    372c:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    3730:	6f567465 	svcvs	0x00567465
    3734:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    3738:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    373c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3740:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
		    	    case 'x': scanx (lword); break;
    3744:	6976006d 	ldmdbvs	r6!, {r0, r2, r3, r5, r6}^
    3748:	7443736d 	strbvc	r7, [r3], #-877	; 0xfffffc93
			if ((c = *buf++) == '\0')
    374c:	646f4d6c 	strbtvs	r4, [pc], #-3436	; 3754 <vscan+0x34c>
    3750:	69003065 	stmdbvs	r0, {r0, r2, r5, r6, ip, sp}
			sap = va_arg (ap, char*);
    3754:	73616962 	cmnvc	r1, #1605632	; 0x188000
			nc++;
    3758:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
			break;
    375c:	67007465 	strvs	r7, [r0, -r5, ror #8]
			while (isspace (*buf)) buf++;
    3760:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3764:	6f466d69 	svcvs	0x00466d69
    3768:	736f5872 	cmnvc	pc, #7471104	; 0x720000
						*sap++ = *buf++;
    376c:	43666863 	cmnmi	r6, #6488064	; 0x630000
    3770:	61566c74 	cmpvs	r6, r4, ror ip
			while (isspace (*buf)) buf++;
    3774:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3778:	4f524f4e 	svcmi	0x00524f4e
    377c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
		return 0;
    3780:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3784:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
		    case 'x': scanx (word); break;
    3788:	6f466d69 	svcvs	0x00466d69
    378c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
		    	    case 'x': scanx (lword); break;
    3790:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    3794:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    3798:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    379c:	524f4e00 	subpl	r4, pc, #0, 28
    37a0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    37a4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    37a8:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    37ac:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    37b0:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    37b4:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    37b8:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    37bc:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    37c0:	64006d69 	strvs	r6, [r0], #-3433	; 0xfffff297
    37c4:	61746c65 	cmnvs	r4, r5, ror #24
    37c8:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    37cc:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
    37d0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 369c <vscan+0x294>
    37d4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    37d8:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    37dc:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37e0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37e4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    37e8:	74436648 	strbvc	r6, [r3], #-1608	; 0xfffff9b8
    37ec:	6567006c 	strbvs	r0, [r7, #-108]!	; 0xffffff94
    37f0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37f4:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37f8:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    37fc:	43747845 	cmnmi	r4, #4521984	; 0x450000
    3800:	61566766 	cmpvs	r6, r6, ror #14
    3804:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3808:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    380c:	69725461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, lr}^
    3810:	6975006d 	ldmdbvs	r5!, {r0, r2, r3, r5, r6}^
    3814:	6f583233 	svcvs	0x00583233
    3818:	66486373 			; <UNDEFINED> instruction: 0x66486373
    381c:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    3820:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    3824:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    3828:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    382c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 36f8 <vscan+0x2f0>
    3830:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3834:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3838:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    383c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3840:	63706d41 	cmnvs	r0, #4160	; 0x1040
    3844:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    3848:	4e003168 	adfmisz	f3, f0, #0.0
    384c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3718 <vscan+0x310>
    3850:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3854:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3858:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    385c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3860:	63706d41 	cmnvs	r0, #4160	; 0x1040
    3864:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    3868:	4e003268 	cdpmi	2, 0, cr3, cr0, cr8, {3}
    386c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3738 <vscan+0x330>
    3870:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3874:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3878:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    387c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3880:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    3884:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
    3888:	006e4566 	rsbeq	r4, lr, r6, ror #10
    388c:	4f524f4e 	svcmi	0x00524f4e
    3890:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3894:	52323349 	eorspl	r3, r2, #603979777	; 0x24000001
    3898:	72576765 	subsvc	r6, r7, #26476544	; 0x1940000
    389c:	00657469 	rsbeq	r7, r5, r9, ror #8
    38a0:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    38a4:	74614431 	strbtvc	r4, [r1], #-1073	; 0xfffffbcf
    38a8:	72740061 	rsbsvc	r0, r4, #97	; 0x61
    38ac:	6f466d69 	svcvs	0x00466d69
    38b0:	4f635272 	svcmi	0x00635272
    38b4:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    38b8:	61694249 	cmnvs	r9, r9, asr #4
    38bc:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    38c0:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    38c4:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    38c8:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    38cc:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    38d0:	4f4e006d 	svcmi	0x004e006d
    38d4:	5f4d4f52 	svcpl	0x004d4f52
    38d8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    38dc:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    38e0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    38e4:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    38e8:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    38ec:	66437478 			; <UNDEFINED> instruction: 0x66437478
    38f0:	2f2e0067 	svccs	0x002e0067
    38f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    38f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38fc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3900:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3904:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3908:	70757465 	rsbsvc	r7, r5, r5, ror #8
    390c:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 3798 <SafeHapiVoid>
    3910:	7300632e 	movwvc	r6, #814	; 0x32e
    3914:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    3918:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    391c:	524f4e00 	subpl	r4, pc, #0, 28
    3920:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3924:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3928:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    392c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3930:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    3934:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    3938:	75745266 	ldrbvc	r5, [r4, #-614]!	; 0xfffffd9a
    393c:	7443656e 	strbvc	r6, [r3], #-1390	; 0xfffffa92
    3940:	54656e75 	strbtpl	r6, [r5], #-3701	; 0xfffff18b
    3944:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3948:	4f524f4e 	svcmi	0x00524f4e
    394c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3950:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3954:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3958:	6f466d69 	svcvs	0x00466d69
    395c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3960:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    3964:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    3968:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    396c:	43646e41 	cmnmi	r4, #1040	; 0x410
    3970:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    3974:	61527277 	cmpvs	r2, r7, ror r2
    3978:	006f6974 	rsbeq	r6, pc, r4, ror r9	; <UNPREDICTABLE>
    397c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3980:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3984:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    3988:	69537075 	ldmdbvs	r3, {r0, r2, r4, r5, r6, ip, sp, lr}^
    398c:	78456e67 	stmdavc	r5, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    3990:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    3994:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3998:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    399c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    39a0:	65670065 	strbvs	r0, [r7, #-101]!	; 0xffffff9b
    39a4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    39a8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    39ac:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    39b0:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
    39b4:	566e4566 	strbtpl	r4, [lr], -r6, ror #10
    39b8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    39bc:	524f4e00 	subpl	r4, pc, #0, 28
    39c0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    39c4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    39c8:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    39cc:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    39d0:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    39d4:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    39d8:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
    39dc:	3369006e 	cmncc	r9, #110	; 0x6e
    39e0:	67695332 			; <UNDEFINED> instruction: 0x67695332
    39e4:	5664656e 	strbtpl	r6, [r4], -lr, ror #10
    39e8:	56726464 	ldrbtpl	r6, [r2], -r4, ror #8
    39ec:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
    39f0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    39f4:	31666e6f 	cmncc	r6, pc, ror #28
    39f8:	33697500 	cmncc	r9, #0, 10
    39fc:	66634632 			; <UNDEFINED> instruction: 0x66634632
    3a00:	61563167 	cmpvs	r6, r7, ror #2
    3a04:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3a08:	4f524f4e 	svcmi	0x00524f4e
    3a0c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3a10:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3a14:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3a18:	6f466d69 	svcvs	0x00466d69
    3a1c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3a20:	49664863 	stmdbmi	r6!, {r0, r1, r5, r6, fp, lr}^
    3a24:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3a28:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    3a2c:	6567006d 	strbvs	r0, [r7, #-109]!	; 0xffffff93
    3a30:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3a34:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a38:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    3a3c:	646f4d68 	strbtvs	r4, [pc], #-3432	; 3a44 <NOROM_RFCRfTrimRead+0x64>
    3a40:	566e4565 	strbtpl	r4, [lr], -r5, ror #10
    3a44:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3a48:	32336900 	eorscc	r6, r3, #0, 18
    3a4c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3a50:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3a54:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3a58:	6366006d 	cmnvs	r6, #109	; 0x6d
    3a5c:	4f316766 	svcmi	0x00316766
    3a60:	6f436373 	svcvs	0x00436373
    3a64:	6400666e 	strvs	r6, [r0], #-1646	; 0xfffff992
    3a68:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    3a6c:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    3a70:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    3a74:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    3a78:	6f567465 	svcvs	0x00567465
    3a7c:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    3a80:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    3a84:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    3a88:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3a8c:	6f58726f 	svcvs	0x0058726f
    3a90:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3a94:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    3a98:	6f74616c 	svcvs	0x0074616c
    3a9c:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    3aa0:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    3aa4:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    3aa8:	6f697461 	svcvs	0x00697461
    3aac:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3ab0:	62690065 	rsbvs	r0, r9, #101	; 0x65
    3ab4:	49736169 	ldmdbmi	r3!, {r0, r3, r5, r6, r8, sp, lr}^
    3ab8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3abc:	4f524f4e 	svcmi	0x00524f4e
    3ac0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3ac4:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    3ac8:	6f417465 	svcvs	0x00417465
    3acc:	6374526e 	cmnvs	r4, #-536870906	; 0xe0000006
    3ad0:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    3ad4:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    3ad8:	4f4e0063 	svcmi	0x004e0063
    3adc:	5f4d4f52 	svcpl	0x004d4f52
    3ae0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3ae4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3ae8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3aec:	41726f46 	cmnmi	r2, r6, asr #30
    3af0:	6f63706d 	svcvs	0x0063706d
    3af4:	7443706d 	strbvc	r7, [r3], #-109	; 0xffffff93
    3af8:	75006c72 	strvc	r6, [r0, #-3186]	; 0xfffff38e
    3afc:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3b00:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3b04:	776f5266 	strbvc	r5, [pc, -r6, ror #4]!
    3b08:	33697500 	cmncc	r9, #0, 10
    3b0c:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3b10:	43664863 	cmnmi	r6, #6488064	; 0x630000
    3b14:	4e006c6f 	cdpmi	12, 0, cr6, cr0, cr15, {3}
    3b18:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 39e4 <NOROM_RFCRfTrimRead+0x4>
    3b1c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3b20:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3b24:	64645674 	strbtvs	r5, [r4], #-1652	; 0xfffff98c
    3b28:	76654c72 			; <UNDEFINED> instruction: 0x76654c72
    3b2c:	6e006c65 	cdpvs	12, 0, cr6, cr0, cr5, {3}
    3b30:	72547765 	subsvc	r7, r4, #26476544	; 0x1940000
    3b34:	61526d69 	cmpvs	r2, r9, ror #26
    3b38:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    3b3c:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
    3b40:	61566d69 	cmpvs	r6, r9, ror #26
    3b44:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3b48:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    3b4c:	6f747375 	svcvs	0x00747375
    3b50:	4472656d 	ldrbtmi	r6, [r2], #-1389	; 0xfffffa93
    3b54:	61746c65 	cmnvs	r4, r5, ror #24
    3b58:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    3b5c:	69007473 	stmdbvs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    3b60:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    3b64:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3b68:	44706565 	ldrbtmi	r6, [r0], #-1381	; 0xfffffa9b
    3b6c:	61746c65 	cmnvs	r4, r5, ror #24
    3b70:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3b74:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3b78:	7463416d 	strbtvc	r4, [r3], #-365	; 0xfffffe93
    3b7c:	63006576 	movwvs	r6, #1398	; 0x576
    3b80:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    3b84:	6400706d 	strvs	r7, [r0], #-109	; 0xffffff93
    3b88:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    3b8c:	41726464 	cmnmi	r2, r4, ror #8
    3b90:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    3b94:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    3b98:	70007065 	andvc	r7, r0, r5, rrx
    3b9c:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    3ba0:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    3ba4:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    3ba8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3bac:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    3bb0:	524f4e00 	subpl	r4, pc, #0, 28
    3bb4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3bb8:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3bbc:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    3bc0:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    3bc4:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3bc8:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3bcc:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3bd0:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    3bd4:	6f447265 	svcvs	0x00447265
    3bd8:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    3bdc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3aa8 <NOROM_RFCRfTrimRead+0xc8>
    3be0:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3be4:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3be8:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3bec:	61686365 	cmnvs	r8, r5, ror #6
    3bf0:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    3bf4:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    3bf8:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    3bfc:	6f447265 	svcvs	0x00447265
    3c00:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3c04:	2f2e2e2f 	svccs	0x002e2e2f
    3c08:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3c0c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3c10:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3c14:	2f62696c 	svccs	0x0062696c
    3c18:	5f737973 	svcpl	0x00737973
    3c1c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    3c20:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3c24:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3af0 <NOROM_RFCRfTrimRead+0x110>
    3c28:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3c2c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3c30:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3c34:	756f5374 	strbvc	r5, [pc, #-884]!	; 38c8 <NOROM_OSCHF_TurnOnXosc+0x8>
    3c38:	47656372 			; <UNDEFINED> instruction: 0x47656372
    3c3c:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    3c40:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    3c44:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3c48:	7000736e 	andvc	r7, r0, lr, ror #6
    3c4c:	00457265 	subeq	r7, r5, r5, ror #4
    3c50:	65546470 	ldrbvs	r6, [r4, #-1136]	; 0xfffffb90
    3c54:	7500706d 	strvc	r7, [r0, #-109]	; 0xffffff93
    3c58:	41323369 	teqmi	r2, r9, ror #6
    3c5c:	6c437875 	mcrrvs	8, 7, r7, r3, cr5
    3c60:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    3c64:	43525000 	cmpmi	r2, #0
    3c68:	6d6f444d 	cfstrdvs	mvd4, [pc, #-308]!	; 3b3c <NOROM_RFCRTrim+0xc>
    3c6c:	456e6961 	strbmi	r6, [lr, #-2401]!	; 0xfffff69f
    3c70:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3c74:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
    3c78:	6e004d72 	mcrvs	13, 0, r4, cr0, cr2, {3}
    3c7c:	65527765 	ldrbvs	r7, [r2, #-1893]	; 0xfffff89b
    3c80:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3c84:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3c88:	646f6972 	strbtvs	r6, [pc], #-2418	; 3c90 <TrimAfterColdResetWakeupFromShutDown+0xc>
    3c8c:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3c90:	70614372 	rsbvc	r4, r1, r2, ror r3
    3c94:	33697500 	cmncc	r9, #0, 10
    3c98:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    3c9c:	53647000 	cmnpl	r4, #0
    3ca0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3ca4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    3ca8:	74736567 	ldrbtvc	r6, [r3], #-1383	; 0xfffffa99
    3cac:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3cb0:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3cb4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3cb8:	6400646f 	strvs	r6, [r0], #-1135	; 0xfffffb91
    3cbc:	61746c65 	cmnvs	r4, r5, ror #24
    3cc0:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3cc4:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3cc8:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3ccc:	6162006d 	cmnvs	r2, sp, rrx
    3cd0:	72685474 	rsbvc	r5, r8, #116, 8	; 0x74000000
    3cd4:	6f687365 	svcvs	0x00687365
    3cd8:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
    3cdc:	5063736f 	rsbpl	r7, r3, pc, ror #6
    3ce0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3ce4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3ce8:	43525000 	cmpmi	r2, #0
    3cec:	616f4c4d 	cmnvs	pc, sp, asr #24
    3cf0:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
    3cf4:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    3cf8:	64657466 	strbtvs	r7, [r5], #-1126	; 0xfffffb9a
    3cfc:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3d00:	44637400 	strbtmi	r7, [r3], #-1024	; 0xfffffc00
    3d04:	61746c65 	cmnvs	r4, r5, ror #24
    3d08:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3d0c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3d10:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xfffff0b3
    3d14:	4743656c 	strbmi	r6, [r3, -ip, ror #10]
    3d18:	72756300 	rsbsvc	r6, r5, #0, 6
    3d1c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3d20:	6f610065 	svcvs	0x00610065
    3d24:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    3d28:	506c7463 	rsbpl	r7, ip, r3, ror #8
    3d2c:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    3d30:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    3d34:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    3d38:	524f4e00 	subpl	r4, pc, #0, 28
    3d3c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3d40:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3d44:	6f506c72 	svcvs	0x00506c72
    3d48:	45726577 	ldrbmi	r6, [r2, #-1399]!	; 0xfffffa89
    3d4c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3d50:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    3d54:	4c700067 	ldclmi	0, cr0, [r0], #-412	; 0xfffffe64
    3d58:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
    3d5c:	62615470 	rsbvs	r5, r1, #112, 8	; 0x70000000
    3d60:	7000656c 	andvc	r6, r0, ip, ror #10
    3d64:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    3d68:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3d6c:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3d70:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3d74:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    3d78:	6f6d7461 	svcvs	0x006d7461
    3d7c:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3d80:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3d84:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3d88:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    3d8c:	50007065 	andpl	r7, r0, r5, rrx
    3d90:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3d94:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3d98:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3d9c:	5f736c61 	svcpl	0x00736c61
    3da0:	4f4e0074 	svcmi	0x004e0074
    3da4:	5f4d4f52 	svcpl	0x004d4f52
    3da8:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3dac:	5f6c7274 	svcpl	0x006c7274
    3db0:	43444344 	movtmi	r4, #17220	; 0x4344
    3db4:	6c6f565f 	stclvs	6, cr5, [pc], #-380	; 3c40 <NOROM_RFCRTrim+0x110>
    3db8:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3dbc:	646e6f43 	strbtvs	r6, [lr], #-3907	; 0xfffff0bd
    3dc0:	6f697469 	svcvs	0x00697469
    3dc4:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    3dc8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    3dcc:	70006c6f 	andvc	r6, r0, pc, ror #24
    3dd0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3dd4:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3dd8:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3ddc:	00736c61 	rsbseq	r6, r3, r1, ror #24
    3de0:	544f5250 	strbpl	r5, [pc], #-592	; 3de8 <NOROM_SetupTrimDevice+0x90>
    3de4:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3de8:	5f544942 	svcpl	0x00544942
    3dec:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    3df0:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    3df4:	00797261 	rsbseq	r7, r9, r1, ror #4
    3df8:	4b434150 	blmi	10d4340 <__ccfg+0x10b4398>
    3dfc:	5f454741 	svcpl	0x00454741
    3e00:	00347834 	eorseq	r7, r4, r4, lsr r8
    3e04:	50494843 	subpl	r4, r9, r3, asr #16
    3e08:	5059545f 	subspl	r5, r9, pc, asr r4
    3e0c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3e10:	30343632 	eorscc	r3, r4, r2, lsr r6
    3e14:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    3e18:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3e1c:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3e20:	5f594c49 	svcpl	0x00594c49
    3e24:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3e28:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    3e2c:	4e007a69 	vmlsmi.f32	s14, s0, s19
    3e30:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3cfc <TrimAfterColdResetWakeupFromShutDown+0x78>
    3e34:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3e38:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3e3c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3e40:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    3e44:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3e48:	00796c69 	rsbseq	r6, r9, r9, ror #24
    3e4c:	4f524f4e 	svcmi	0x00524f4e
    3e50:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e54:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3e58:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3e5c:	61507465 	cmpvs	r0, r5, ror #8
    3e60:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    3e64:	70795465 	rsbsvc	r5, r9, r5, ror #8
    3e68:	4f4e0065 	svcmi	0x004e0065
    3e6c:	5f4d4f52 	svcpl	0x004d4f52
    3e70:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e74:	6f666e49 	svcvs	0x00666e49
    3e78:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e7c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3e80:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3e84:	70006e6f 	andvc	r6, r0, pc, ror #28
    3e88:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    3e8c:	00657079 	rsbeq	r7, r5, r9, ror r0
    3e90:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e94:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3e98:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3e9c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3ea0:	6f697369 	svcvs	0x00697369
    3ea4:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    3ea8:	50494843 	subpl	r4, r9, r3, asr #16
    3eac:	5059545f 	subspl	r5, r9, pc, asr r4
    3eb0:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3eb4:	30313331 	eorscc	r3, r1, r1, lsr r3
    3eb8:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3ebc:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3ec0:	5f796c69 	svcpl	0x00796c69
    3ec4:	77680074 			; <UNDEFINED> instruction: 0x77680074
    3ec8:	00766552 	rsbseq	r6, r6, r2, asr r5
    3ecc:	50494843 	subpl	r4, r9, r3, asr #16
    3ed0:	5059545f 	subspl	r5, r9, pc, asr r4
    3ed4:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3ed8:	30353632 	eorscc	r3, r5, r2, lsr r6
    3edc:	43415000 	movtmi	r5, #4096	; 0x1000
    3ee0:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3ee4:	5343575f 	movtpl	r5, #14175	; 0x375f
    3ee8:	696d0050 	stmdbvs	sp!, {r4, r6}^
    3eec:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    3ef0:	46007665 	strmi	r7, [r0], -r5, ror #12
    3ef4:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3ef8:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3efc:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3f00:	0032525f 	eorseq	r5, r2, pc, asr r2
    3f04:	50494843 	subpl	r4, r9, r3, asr #16
    3f08:	5059545f 	subspl	r5, r9, pc, asr r4
    3f0c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3f10:	30353331 	eorscc	r3, r5, r1, lsr r3
    3f14:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3f18:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3f1c:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f20:	61467069 	cmpvs	r6, r9, rrx
    3f24:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    3f28:	43437349 	movtmi	r7, #13129	; 0x3349
    3f2c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3f30:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3f34:	5f594c49 	svcpl	0x00594c49
    3f38:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3f3c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3f40:	50494843 	subpl	r4, r9, r3, asr #16
    3f44:	5059545f 	subspl	r5, r9, pc, asr r4
    3f48:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3f4c:	30323632 	eorscc	r3, r2, r2, lsr r6
    3f50:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3f54:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    3f58:	41460076 	hvcmi	24582	; 0x6006
    3f5c:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3f60:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3f64:	00787836 	rsbseq	r7, r8, r6, lsr r8
    3f68:	70696863 	rsbvc	r6, r9, r3, ror #16
    3f6c:	006d6146 	rsbeq	r6, sp, r6, asr #2
    3f70:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3f74:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    3f78:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3f7c:	6366006e 	cmnvs	r6, #110	; 0x6e
    3f80:	50316766 	eorspl	r6, r1, r6, ror #14
    3f84:	6f746f72 	svcvs	0x00746f72
    3f88:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    3f8c:	746f7250 	strbtvc	r7, [pc], #-592	; 3f94 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>
    3f90:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3ddc <NOROM_SetupTrimDevice+0x84>
    3f94:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    3f98:	6f746365 	svcvs	0x00746365
    3f9c:	00745f72 	rsbseq	r5, r4, r2, ror pc
    3fa0:	544f5250 	strbpl	r5, [pc], #-592	; 3fa8 <NOROM_SetupGetTrimForAmpcompTh1>
    3fa4:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3fa8:	5f544942 	svcpl	0x00544942
    3fac:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    3fb0:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    3fb4:	5f35315f 	svcpl	0x0035315f
    3fb8:	48430034 	stmdami	r3, {r2, r4, r5}^
    3fbc:	545f5049 	ldrbpl	r5, [pc], #-73	; 3fc4 <NOROM_SetupGetTrimForAmpcompCtrl+0x8>
    3fc0:	5f455059 	svcpl	0x00455059
    3fc4:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3fc8:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3fcc:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3fd0:	5f325f56 	svcpl	0x00325f56
    3fd4:	41460032 	cmpmi	r6, r2, lsr r0
    3fd8:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3fdc:	3143435f 	cmpcc	r3, pc, asr r3
    3fe0:	00787833 	rsbseq	r7, r8, r3, lsr r8
    3fe4:	4b434150 	blmi	10d452c <__ccfg+0x10b4584>
    3fe8:	5f454741 	svcpl	0x00454741
    3fec:	00377837 	eorseq	r7, r7, r7, lsr r8
    3ff0:	544f5250 	strbpl	r5, [pc], #-592	; 3ff8 <NOROM_SetupGetTrimForAmpcompCtrl+0x3c>
    3ff4:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3ff8:	6b6e555f 	blvs	1b9957c <__ccfg+0x1b795d4>
    3ffc:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    4000:	52574800 	subspl	r4, r7, #0, 16
    4004:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    4008:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    400c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3ed8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x60>
    4010:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    4014:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    4018:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    401c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    4020:	70795470 	rsbsvc	r5, r9, r0, ror r4
    4024:	57480065 	strbpl	r0, [r8, -r5, rrx]
    4028:	5f564552 	svcpl	0x00564552
    402c:	00315f32 	eorseq	r5, r1, r2, lsr pc
    4030:	544f5250 	strbpl	r5, [pc], #-592	; 4038 <NOROM_SetupGetTrimForAdcShModeEn+0x4>
    4034:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    4038:	5f544942 	svcpl	0x00544942
    403c:	00454c42 	subeq	r4, r5, r2, asr #24
    4040:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    4044:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    4048:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    404c:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    4050:	57480061 	strbpl	r0, [r8, -r1, rrx]
    4054:	5f564552 	svcpl	0x00564552
    4058:	00335f32 	eorseq	r5, r3, r2, lsr pc
    405c:	70696863 	rsbvc	r6, r9, r3, ror #16
    4060:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4064:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    4068:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    406c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    4070:	4f545355 	svcmi	0x00545355
    4074:	00305f4d 	eorseq	r5, r0, sp, asr #30
    4078:	50494843 	subpl	r4, r9, r3, asr #16
    407c:	5059545f 	subspl	r5, r9, pc, asr r4
    4080:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    4084:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 3f40 <NOROM_SetupGetTrimForAnabypassValue1+0x1c>
    4088:	4300315f 	movwmi	r3, #351	; 0x15f
    408c:	5f504948 	svcpl	0x00504948
    4090:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4094:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    4098:	00303336 	eorseq	r3, r0, r6, lsr r3
    409c:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    40a0:	5f315f56 	svcpl	0x00315f56
    40a4:	41500030 	cmpmi	r0, r0, lsr r0
    40a8:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    40ac:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    40b0:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    40b4:	2f2e006e 	svccs	0x002e006e
    40b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    40bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40c0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    40c4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    40c8:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    40cc:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    40d0:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    40d4:	63660063 	cmnvs	r6, #99	; 0x63
    40d8:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    40dc:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    40e0:	68430064 	stmdavs	r3, {r2, r5, r6}^
    40e4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    40e8:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    40ec:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    40f0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    40f4:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    40f8:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    40fc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4100:	70696843 	rsbvc	r6, r9, r3, asr #16
    4104:	6f666e49 	svcvs	0x00666e49
    4108:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    410c:	6f6e694d 	svcvs	0x006e694d
    4110:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    4114:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    4118:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    411c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4120:	4f4e0076 	svcmi	0x004e0076
    4124:	5f4d4f52 	svcpl	0x004d4f52
    4128:	70696843 	rsbvc	r6, r9, r3, asr #16
    412c:	6f666e49 	svcvs	0x00666e49
    4130:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    4134:	70707553 	rsbsvc	r7, r0, r3, asr r5
    4138:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    413c:	6f725064 	svcvs	0x00725064
    4140:	6f636f74 	svcvs	0x00636f74
    4144:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    4148:	43415000 	movtmi	r5, #4096	; 0x1000
    414c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    4150:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    4154:	50005245 	andpl	r5, r0, r5, asr #4
    4158:	414b4341 	cmpmi	fp, r1, asr #6
    415c:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 3c1d <NOROM_RFCRTrim+0xed>
    4160:	50003578 	andpl	r3, r0, r8, ror r5
    4164:	616b6361 	cmnvs	fp, r1, ror #6
    4168:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    416c:	745f6570 	ldrbvc	r6, [pc], #-1392	; 4174 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x8c>
    4170:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    4174:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    4178:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    417c:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    4180:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    4184:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    4188:	5f514554 	svcpl	0x00514554
    418c:	00305f32 	eorseq	r5, r0, r2, lsr pc
    4190:	70696843 	rsbvc	r6, r9, r3, asr #16
    4194:	6f666e49 	svcvs	0x00666e49
    4198:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    419c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    41a0:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    41a4:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    41a8:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    41ac:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 4078 <NOROM_SetupGetTrimForXoscHfCtl+0x1c>
    41b0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    41b4:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    41b8:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    41bc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    41c0:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    41c4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    41c8:	524f4e00 	subpl	r4, pc, #0, 28
    41cc:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 41d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xec>
    41d0:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    41d4:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    41d8:	00646165 	rsbeq	r6, r4, r5, ror #2
    41dc:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    41e0:	78754100 	ldmdavc	r5!, {r8, lr}^
    41e4:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    41e8:	61536964 	cmpvs	r3, r4, ror #18
    41ec:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    41f0:	00657469 	rsbeq	r7, r5, r9, ror #8
    41f4:	36316975 			; <UNDEFINED> instruction: 0x36316975
    41f8:	61746144 	cmnvs	r4, r4, asr #2
    41fc:	33697500 	cmncc	r9, #0, 10
    4200:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    4204:	00617461 	rsbeq	r7, r1, r1, ror #8
    4208:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    420c:	61746144 	cmnvs	r4, r4, asr #2
    4210:	33697500 	cmncc	r9, #0, 10
    4214:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    4218:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    421c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 40e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    4220:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4224:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    4228:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    422c:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    4230:	00657469 	rsbeq	r7, r5, r9, ror #8
    4234:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    4238:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    423c:	61563233 	cmpvs	r6, r3, lsr r2
    4240:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    4244:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    4248:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    424c:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    4250:	00646165 	rsbeq	r6, r4, r5, ror #2
    4254:	4f524f4e 	svcmi	0x00524f4e
    4258:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    425c:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    4260:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    4264:	00657469 	rsbeq	r7, r5, r9, ror #8
    4268:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    426c:	2f2e2e2f 	svccs	0x002e2e2f
    4270:	642f2e2e 	strtvs	r2, [pc], #-3630	; 4278 <NOROM_SetupSetAonRtcSubSecInc+0x1c>
    4274:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4278:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    427c:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4280:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    4284:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    4288:	64416765 	strbvs	r6, [r1], #-1893	; 0xfffff89b
    428c:	6e007264 	cdpvs	2, 0, cr7, cr0, cr4, {3}
    4290:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    4294:	5f435f00 	svcpl	0x00435f00
    4298:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
    429c:	5f636972 	svcpl	0x00636972
    42a0:	61636f6c 	cmnvs	r3, ip, ror #30
    42a4:	6300656c 	movwvs	r6, #1388	; 0x56c
    42a8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    42ac:	5f79636e 	svcpl	0x0079636e
    42b0:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    42b4:	63006c6f 	movwvs	r6, #3183	; 0xc6f
    42b8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    42bc:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    42c0:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    42c4:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    42c8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    42cc:	73645f64 	cmnvc	r4, #100, 30	; 0x190
    42d0:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    42d4:	5f6e5f74 	svcpl	0x006e5f74
    42d8:	5f706573 	svcpl	0x00706573
    42dc:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    42e0:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    42e4:	6f636c00 	svcvs	0x00636c00
    42e8:	6300766e 	movwvs	r7, #1646	; 0x66e
    42ec:	6c5f6b6a 	mrrcvs	11, 6, r6, pc, cr10	; <UNPREDICTABLE>
    42f0:	00676e61 	rsbeq	r6, r7, r1, ror #28
    42f4:	6e5f636c 	cdpvs	3, 5, cr6, cr15, cr12, {3}
    42f8:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    42fc:	545f6369 	ldrbpl	r6, [pc], #-873	; 4304 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x80>
    4300:	5f435f00 	svcpl	0x00435f00
    4304:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4308:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    430c:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4310:	5f746e69 	svcpl	0x00746e69
    4314:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    4318:	6d79735f 	ldclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    431c:	006c6f62 	rsbeq	r6, ip, r2, ror #30
    4320:	745f636c 	ldrbvc	r6, [pc], #-876	; 4328 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    4324:	5f656d69 	svcpl	0x00656d69
    4328:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
    432c:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4330:	73746967 	cmnvc	r4, #1687552	; 0x19c000
    4334:	5f435f00 	svcpl	0x00435f00
    4338:	70797463 	rsbsvc	r7, r9, r3, ror #8
    433c:	6f6c5f65 	svcvs	0x006c5f65
    4340:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    4344:	5f6d6100 	svcpl	0x006d6100
    4348:	65006d70 	strvs	r6, [r0, #-3440]	; 0xfffff290
    434c:	645f6172 	ldrbvs	r6, [pc], #-370	; 4354 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xd0>
    4350:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    4354:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    4358:	7274736f 	rsbsvc	r7, r4, #-1140850687	; 0xbc000001
    435c:	5f636c00 	svcpl	0x00636c00
    4360:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    4364:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    4368:	6d00545f 	cfstrsvs	mvf5, [r0, #-380]	; 0xfffffe84
    436c:	61737365 	cmnvs	r3, r5, ror #6
    4370:	635f6567 	cmpvs	pc, #432013312	; 0x19c00000
    4374:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    4378:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
    437c:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    4380:	435f0063 	cmpmi	pc, #99	; 0x63
    4384:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    4388:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    438c:	6f6c5f73 	svcvs	0x006c5f73
    4390:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    4394:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4398:	735f705f 	cmpvc	pc, #95	; 0x5f
    439c:	5f6e6769 	svcpl	0x006e6769
    43a0:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    43a4:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    43a8:	6f72675f 	svcvs	0x0072675f
    43ac:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
    43b0:	5f580067 	svcpl	0x00580067
    43b4:	00746d66 	rsbseq	r6, r4, r6, ror #26
    43b8:	5f746e69 	svcpl	0x00746e69
    43bc:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
    43c0:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    43c4:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    43c8:	6f6d0073 	svcvs	0x006d0073
    43cc:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
    43d0:	616d6963 	cmnvs	sp, r3, ror #18
    43d4:	6f705f6c 	svcvs	0x00705f6c
    43d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    43dc:	6d665f63 	stclvs	15, cr5, [r6, #-396]!	; 0xfffffe74
    43e0:	61640074 	smcvs	16388	; 0x4004
    43e4:	665f6574 			; <UNDEFINED> instruction: 0x665f6574
    43e8:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    43ec:	74616765 	strbtvc	r6, [r1], #-1893	; 0xfffff89b
    43f0:	5f657669 	svcpl	0x00657669
    43f4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    43f8:	5f626d00 	svcpl	0x00626d00
    43fc:	5f727563 	svcpl	0x00727563
    4400:	0078616d 	rsbseq	r6, r8, sp, ror #2
    4404:	61686377 	smcvs	34359	; 0x8637
    4408:	00745f72 	rsbseq	r5, r4, r2, ror pc
    440c:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4410:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    4414:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    4418:	7463006e 	strbtvc	r0, [r3], #-110	; 0xffffff92
    441c:	5f657079 	svcpl	0x00657079
    4420:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    4424:	00746573 	rsbseq	r6, r4, r3, ror r5
    4428:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    442c:	756f6420 	strbvc	r6, [pc, #-1056]!	; 4014 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>
    4430:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4434:	78656f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4438:	78007270 	stmdavc	r0, {r4, r5, r6, r9, ip, sp, lr}
    443c:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4440:	62757300 	rsbsvs	r7, r5, #0, 6
    4444:	6174706f 	cmnvs	r4, pc, rrx
    4448:	69006772 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    444c:	705f746e 	subsvc	r7, pc, lr, ror #8
    4450:	7065735f 	rsbvc	r7, r5, pc, asr r3
    4454:	5f79625f 	svcpl	0x0079625f
    4458:	63617073 	cmnvs	r1, #115	; 0x73
    445c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4460:	5f6e5f74 	svcpl	0x006e5f74
    4464:	705f7363 	subsvc	r7, pc, r3, ror #6
    4468:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    446c:	00736564 	rsbseq	r6, r3, r4, ror #10
    4470:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4474:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4478:	2f2e2e2f 	svccs	0x002e2e2f
    447c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4480:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4484:	2f2e2e2f 	svccs	0x002e2e2f
    4488:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    448c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 42f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x6c>
    4490:	2f636269 	svccs	0x00636269
    4494:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4498:	2f656e69 	svccs	0x00656e69
    449c:	2f6d7261 	svccs	0x006d7261
    44a0:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    44a4:	732d7970 			; <UNDEFINED> instruction: 0x732d7970
    44a8:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    44ac:	646d0063 	strbtvs	r0, [sp], #-99	; 0xffffff9d
    44b0:	64726f5f 	ldrbtvs	r6, [r2], #-3935	; 0xfffff0a1
    44b4:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    44b8:	74737365 	ldrbtvc	r7, [r3], #-869	; 0xfffffc9b
    44bc:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    44c0:	70786573 	rsbsvc	r6, r8, r3, ror r5
    44c4:	72650072 	rsbvc	r0, r5, #114	; 0x72
    44c8:	5f645f61 	svcpl	0x00645f61
    44cc:	00746d66 	rsbseq	r6, r4, r6, ror #26
    44d0:	635f636c 	cmpvs	pc, #108, 6	; 0xb0000001
    44d4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    44d8:	6500545f 	strvs	r5, [r0, #-1119]	; 0xfffffba1
    44dc:	745f6172 	ldrbvc	r6, [pc], #-370	; 44e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x110>
    44e0:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    44e4:	74637700 	strbtvc	r7, [r3], #-1792	; 0xfffff900
    44e8:	00626d6f 	rsbeq	r6, r2, pc, ror #26
    44ec:	5f6e6f6d 	svcpl	0x006e6f6d
    44f0:	756f6874 	strbvc	r6, [pc, #-2164]!	; 3c84 <TrimAfterColdResetWakeupFromShutDown>
    44f4:	646e6173 	strbtvs	r6, [lr], #-371	; 0xfffffe8d
    44f8:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    44fc:	6d610070 	stclvs	0, cr0, [r1, #-448]!	; 0xfffffe40
    4500:	665f6d70 			; <UNDEFINED> instruction: 0x665f6d70
    4504:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    4508:	656d5f63 	strbvs	r5, [sp, #-3939]!	; 0xfffff09d
    450c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4510:	545f7365 	ldrbpl	r7, [pc], #-869	; 4518 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x144>
    4514:	65657700 	strbvs	r7, [r5, #-1792]!	; 0xfffff900
    4518:	7961646b 	stmdbvc	r1!, {r0, r1, r3, r5, r6, sl, sp, lr}^
    451c:	5f435f00 	svcpl	0x00435f00
    4520:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    4524:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    4528:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    452c:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4530:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    4534:	69726f67 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    4538:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    453c:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    4540:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    4544:	6f705f6e 	svcvs	0x00705f6e
    4548:	61006e73 	tstvs	r0, r3, ror lr
    454c:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    4550:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    4554:	47006372 	smlsdxmi	r0, r2, r3, r6
    4558:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    455c:	38203731 	stmdacc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
    4560:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4564:	31303220 	teqcc	r0, r0, lsr #4
    4568:	30373039 	eorscc	r3, r7, r9, lsr r0
    456c:	72282033 	eorvc	r2, r8, #51	; 0x33
    4570:	61656c65 	cmnvs	r5, r5, ror #24
    4574:	20296573 	eorcs	r6, r9, r3, ror r5
    4578:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
    457c:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
    4580:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    4584:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    4588:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    458c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    4590:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
    4594:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    4598:	6f6c666d 	svcvs	0x006c666d
    459c:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    45a0:	733d6962 	teqvc	sp, #1605632	; 0x188000
    45a4:	2074666f 	rsbscs	r6, r4, pc, ror #12
    45a8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    45ac:	20626d75 	rsbcs	r6, r2, r5, ror sp
    45b0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    45b4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    45b8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    45bc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    45c0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    45c4:	613d7570 	teqvs	sp, r0, ror r5
    45c8:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    45cc:	20696d64 	rsbcs	r6, r9, r4, ror #26
    45d0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    45d4:	613d6863 	teqvs	sp, r3, ror #16
    45d8:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    45dc:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    45e0:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    45e4:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    45e8:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    45ec:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    45f0:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    45f4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    45f8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    45fc:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4600:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    4604:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    4608:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    460c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4610:	2f302e33 	svccs	0x00302e33
    4614:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4618:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    461c:	6f6e2d6d 	svcvs	0x006e2d6d
    4620:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4624:	2f696261 	svccs	0x00696261
    4628:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    462c:	6f6e2f62 	svcvs	0x006e2f62
    4630:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    4634:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4638:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    463c:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 44bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe8>
    4640:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4644:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4648:	6c006d72 	stcvs	13, cr6, [r0], {114}	; 0x72
    464c:	00306e65 	eorseq	r6, r0, r5, ror #28
    4650:	5f746e69 	svcpl	0x00746e69
    4654:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    4658:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    465c:	00737469 	rsbseq	r7, r3, r9, ror #8
    4660:	30637273 	rsbcc	r7, r3, r3, ror r2
    4664:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    4668:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    466c:	2e006874 	mcrcs	8, 0, r6, cr0, cr4, {3}
    4670:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4674:	2f2e2e2f 	svccs	0x002e2e2f
    4678:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    467c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4680:	2f2e2e2f 	svccs	0x002e2e2f
    4684:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4688:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 44ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x118>
    468c:	2f636269 	svccs	0x00636269
    4690:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    4694:	722f6269 	eorvc	r6, pc, #-1879048186	; 0x90000006
    4698:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    469c:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    46a0:	00646e61 	rsbeq	r6, r4, r1, ror #28
    46a4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    46a8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    46ac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46b0:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    46b4:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    46b8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46bc:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46c0:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    46c4:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    46c8:	2f646c69 	svccs	0x00646c69
    46cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    46d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    46d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    46d8:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    46dc:	2f626d75 	svccs	0x00626d75
    46e0:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    46e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46e8:	2f62696c 	svccs	0x0062696c
    46ec:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    46f0:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    46f4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    46f8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    46fc:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4700:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4704:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    4708:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    470c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4710:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4714:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    4718:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    471c:	2f646c69 	svccs	0x00646c69
    4720:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4724:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4728:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    472c:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    4730:	2f626d75 	svccs	0x00626d75
    4734:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    4738:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    473c:	2f62696c 	svccs	0x0062696c
    4740:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4744:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    4748:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    474c:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    4750:	61645f65 	cmnvs	r4, r5, ror #30
    4754:	2e006174 	mcrcs	1, 0, r6, cr0, cr4, {3}
    4758:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    475c:	2f2e2e2f 	svccs	0x002e2e2f
    4760:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4764:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4768:	2f2e2e2f 	svccs	0x002e2e2f
    476c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4770:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 45d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>
    4774:	2f636269 	svccs	0x00636269
    4778:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    477c:	6d692f74 	stclvs	15, cr2, [r9, #-464]!	; 0xfffffe30
    4780:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4784:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    4788:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    478c:	50435f54 	subpl	r5, r3, r4, asr pc
    4790:	6f635f55 	svcvs	0x00635f55
    4794:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4798:	63373161 	teqvs	r7, #1073741848	; 0x40000018
    479c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    47a0:	00376178 	eorseq	r6, r7, r8, ror r1
    47a4:	5f617369 	svcpl	0x00617369
    47a8:	5f746962 	svcpl	0x00746962
    47ac:	645f7066 	ldrbvs	r7, [pc], #-102	; 47b4 <memcpy+0x48>
    47b0:	61006c62 	tstvs	r0, r2, ror #24
    47b4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    47b8:	5f686372 	svcpl	0x00686372
    47bc:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    47c0:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
    47c4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47c8:	50435f54 	subpl	r5, r3, r4, asr pc
    47cc:	6f635f55 	svcvs	0x00635f55
    47d0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    47d4:	0033326d 	eorseq	r3, r3, sp, ror #4
    47d8:	5f4d5241 	svcpl	0x004d5241
    47dc:	54005145 	strpl	r5, [r0], #-325	; 0xfffffebb
    47e0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47e4:	50435f54 	subpl	r5, r3, r4, asr pc
    47e8:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    47ec:	3531316d 	ldrcc	r3, [r1, #-365]!	; 0xfffffe93
    47f0:	66327436 			; <UNDEFINED> instruction: 0x66327436
    47f4:	73690073 	cmnvc	r9, #115	; 0x73
    47f8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    47fc:	68745f74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4800:	00626d75 	rsbeq	r6, r2, r5, ror sp
    4804:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4808:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    480c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4810:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4814:	37356178 			; <UNDEFINED> instruction: 0x37356178
    4818:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    481c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4820:	5f5f0033 	svcpl	0x005f0033
    4824:	646c756d 	strbtvs	r7, [ip], #-1389	; 0xfffffa93
    4828:	42003369 	andmi	r3, r0, #-1543503871	; 0xa4000001
    482c:	5f455341 	svcpl	0x00455341
    4830:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4834:	5f4d385f 	svcpl	0x004d385f
    4838:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    483c:	52415400 	subpl	r5, r1, #0, 8
    4840:	5f544547 	svcpl	0x00544547
    4844:	5f555043 	svcpl	0x00555043
    4848:	386d7261 	stmdacc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    484c:	54003031 	strpl	r3, [r0], #-49	; 0xffffffcf
    4850:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4854:	50435f54 	subpl	r5, r3, r4, asr pc
    4858:	67785f55 			; <UNDEFINED> instruction: 0x67785f55
    485c:	31656e65 	cmncc	r5, r5, ror #28
    4860:	4d524100 	ldfmie	f4, [r2, #-0]
    4864:	5343505f 	movtpl	r5, #12383	; 0x305f
    4868:	5041415f 	subpl	r4, r1, pc, asr r1
    486c:	495f5343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    4870:	584d4d57 	stmdapl	sp, {r0, r1, r2, r4, r6, r8, sl, fp, lr}^
    4874:	41420054 	qdaddmi	r0, r4, r2
    4878:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    487c:	5f484352 	svcpl	0x00484352
    4880:	41420030 	cmpmi	r2, r0, lsr r0
    4884:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4888:	5f484352 	svcpl	0x00484352
    488c:	41420032 	cmpmi	r2, r2, lsr r0
    4890:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4894:	5f484352 	svcpl	0x00484352
    4898:	41420033 	cmpmi	r2, r3, lsr r0
    489c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    48a0:	5f484352 	svcpl	0x00484352
    48a4:	41420034 	cmpmi	r2, r4, lsr r0
    48a8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    48ac:	5f484352 	svcpl	0x00484352
    48b0:	41420036 	cmpmi	r2, r6, lsr r0
    48b4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    48b8:	5f484352 	svcpl	0x00484352
    48bc:	41540037 	cmpmi	r4, r7, lsr r0
    48c0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    48c4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    48c8:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    48cc:	00656c61 	rsbeq	r6, r5, r1, ror #24
    48d0:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    48d4:	61736900 	cmnvs	r3, r0, lsl #18
    48d8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    48dc:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    48e0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    48e4:	52415400 	subpl	r5, r1, #0, 8
    48e8:	5f544547 	svcpl	0x00544547
    48ec:	5f555043 	svcpl	0x00555043
    48f0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    48f4:	336d7865 	cmncc	sp, #6619136	; 0x650000
    48f8:	53550033 	cmppl	r5, #51	; 0x33
    48fc:	70797449 	rsbsvc	r7, r9, r9, asr #8
    4900:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    4904:	2f2e2e2f 	svccs	0x002e2e2f
    4908:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    490c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4910:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4914:	2f636367 	svccs	0x00636367
    4918:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    491c:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    4920:	41540063 	cmpmi	r4, r3, rrx
    4924:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4928:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    492c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4930:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4934:	73690069 	cmnvc	r9, #105	; 0x69
    4938:	6f6e5f61 	svcvs	0x006e5f61
    493c:	00746962 	rsbseq	r6, r4, r2, ror #18
    4940:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4944:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4948:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    494c:	31316d72 	teqcc	r1, r2, ror sp
    4950:	7a6a3637 	bvc	1a92234 <__ccfg+0x1a7228c>
    4954:	69007366 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    4958:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    495c:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
    4960:	32767066 	rsbscc	r7, r6, #102	; 0x66
    4964:	4d524100 	ldfmie	f4, [r2, #-0]
    4968:	5343505f 	movtpl	r5, #12383	; 0x305f
    496c:	4b4e555f 	blmi	1399ef0 <__ccfg+0x1379f48>
    4970:	4e574f4e 	cdpmi	15, 5, cr4, cr7, cr14, {2}
    4974:	52415400 	subpl	r5, r1, #0, 8
    4978:	5f544547 	svcpl	0x00544547
    497c:	5f555043 	svcpl	0x00555043
    4980:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4984:	41420065 	cmpmi	r2, r5, rrx
    4988:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    498c:	5f484352 	svcpl	0x00484352
    4990:	4a455435 	bmi	1159a6c <__ccfg+0x1139ac4>
    4994:	6d726100 	ldfvse	f6, [r2, #-0]
    4998:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    499c:	735f6d73 	cmpvc	pc, #7360	; 0x1cc0
    49a0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    49a4:	6d726100 	ldfvse	f6, [r2, #-0]
    49a8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    49ac:	65743568 	ldrbvs	r3, [r4, #-1384]!	; 0xfffffa98
    49b0:	736e7500 	cmnvc	lr, #0, 10
    49b4:	5f636570 	svcpl	0x00636570
    49b8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    49bc:	0073676e 	rsbseq	r6, r3, lr, ror #14
    49c0:	5f617369 	svcpl	0x00617369
    49c4:	5f746962 	svcpl	0x00746962
    49c8:	00636573 	rsbeq	r6, r3, r3, ror r5
    49cc:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    49d0:	61745f7a 	cmnvs	r4, sl, ror pc
    49d4:	52410062 	subpl	r0, r1, #98	; 0x62
    49d8:	43565f4d 	cmpmi	r6, #308	; 0x134
    49dc:	6d726100 	ldfvse	f6, [r2, #-0]
    49e0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    49e4:	73785f68 	cmnvc	r8, #104, 30	; 0x1a0
    49e8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    49ec:	4d524100 	ldfmie	f4, [r2, #-0]
    49f0:	00454c5f 	subeq	r4, r5, pc, asr ip
    49f4:	6e755744 	cdpvs	7, 7, cr5, cr5, cr4, {2}
    49f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    49fc:	5f4d5241 	svcpl	0x004d5241
    4a00:	41005356 	tstmi	r0, r6, asr r3
    4a04:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    4a08:	72610045 	rsbvc	r0, r1, #69	; 0x45
    4a0c:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4a10:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    4a14:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    4a18:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    4a1c:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 4a24 <__aeabi_lmul+0x1c0>
    4a20:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    4a24:	6f6c6620 	svcvs	0x006c6620
    4a28:	54007461 	strpl	r7, [r0], #-1121	; 0xfffffb9f
    4a2c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a30:	50435f54 	subpl	r5, r3, r4, asr pc
    4a34:	6f635f55 	svcvs	0x00635f55
    4a38:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a3c:	00353161 	eorseq	r3, r5, r1, ror #2
    4a40:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a44:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a48:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4a4c:	36323761 	ldrtcc	r3, [r2], -r1, ror #14
    4a50:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4a54:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a58:	50435f54 	subpl	r5, r3, r4, asr pc
    4a5c:	6f635f55 	svcvs	0x00635f55
    4a60:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a64:	00373161 	eorseq	r3, r7, r1, ror #2
    4a68:	5f4d5241 	svcpl	0x004d5241
    4a6c:	54005447 	strpl	r5, [r0], #-1095	; 0xfffffbb9
    4a70:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a74:	50435f54 	subpl	r5, r3, r4, asr pc
    4a78:	656e5f55 	strbvs	r5, [lr, #-3925]!	; 0xfffff0ab
    4a7c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    4a80:	316e6573 	smccc	58963	; 0xe653
    4a84:	52415400 	subpl	r5, r1, #0, 8
    4a88:	5f544547 	svcpl	0x00544547
    4a8c:	5f555043 	svcpl	0x00555043
    4a90:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a94:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    4a98:	41420066 	cmpmi	r2, r6, rrx
    4a9c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4aa0:	5f484352 	svcpl	0x00484352
    4aa4:	004d4537 	subeq	r4, sp, r7, lsr r5
    4aa8:	20554e47 	subscs	r4, r5, r7, asr #28
    4aac:	20373143 	eorscs	r3, r7, r3, asr #2
    4ab0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4ab4:	30322031 	eorscc	r2, r2, r1, lsr r0
    4ab8:	30313931 	eorscc	r3, r1, r1, lsr r9
    4abc:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    4ac0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    4ac4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4ac8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    4acc:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
    4ad0:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
    4ad4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    4ad8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    4adc:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4ae0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    4ae4:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
    4ae8:	205d3939 	subscs	r3, sp, r9, lsr r9
    4aec:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4af0:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4af4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4af8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    4afc:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4b00:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    4b04:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    4b08:	613d7570 	teqvs	sp, r0, ror r5
    4b0c:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4b10:	20696d64 	rsbcs	r6, r9, r4, ror #26
    4b14:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    4b18:	613d6863 	teqvs	sp, r3, ror #16
    4b1c:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    4b20:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    4b24:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4b28:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b2c:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b30:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b34:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b38:	69756266 	ldmdbvs	r5!, {r1, r2, r5, r6, r9, sp, lr}^
    4b3c:	6e69646c 	cdpvs	4, 6, cr6, cr9, cr12, {3}
    4b40:	696c2d67 	stmdbvs	ip!, {r0, r1, r2, r5, r6, r8, sl, fp, sp}^
    4b44:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4b48:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    4b4c:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    4b50:	2d6b6361 	stclcs	3, cr6, [fp, #-388]!	; 0xfffffe7c
    4b54:	746f7270 	strbtvc	r7, [pc], #-624	; 4b5c <__aeabi_lmul+0x2f8>
    4b58:	6f746365 	svcvs	0x00746365
    4b5c:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
    4b60:	692d6f6e 	pushvs	{r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4b64:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
    4b68:	662d2065 	strtvs	r2, [sp], -r5, rrx
    4b6c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4b70:	696c6962 	stmdbvs	ip!, {r1, r5, r6, r8, fp, sp, lr}^
    4b74:	683d7974 	ldmdavs	sp!, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    4b78:	65646469 	strbvs	r6, [r4, #-1129]!	; 0xfffffb97
    4b7c:	4154006e 	cmpmi	r4, lr, rrx
    4b80:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4b84:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4b88:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4b8c:	61786574 	cmnvs	r8, r4, ror r5
    4b90:	68003231 	stmdavs	r0, {r0, r4, r5, r9, ip, sp}
    4b94:	76687361 	strbtvc	r7, [r8], -r1, ror #6
    4b98:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 4ba0 <__aeabi_lmul+0x33c>
    4b9c:	53414200 	movtpl	r4, #4608	; 0x1200
    4ba0:	52415f45 	subpl	r5, r1, #276	; 0x114
    4ba4:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    4ba8:	69005a4b 	stmdbvs	r0, {r0, r1, r3, r6, r9, fp, ip, lr}
    4bac:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4bb0:	00737469 	rsbseq	r7, r3, r9, ror #8
    4bb4:	5f6d7261 	svcpl	0x006d7261
    4bb8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4bbc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4bc0:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    4bc4:	61007669 	tstvs	r0, r9, ror #12
    4bc8:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    4bcc:	645f7570 	ldrbvs	r7, [pc], #-1392	; 4bd4 <__aeabi_lmul+0x370>
    4bd0:	00637365 	rsbeq	r7, r3, r5, ror #6
    4bd4:	5f617369 	svcpl	0x00617369
    4bd8:	5f746962 	svcpl	0x00746962
    4bdc:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    4be0:	4d524100 	ldfmie	f4, [r2, #-0]
    4be4:	0049485f 	subeq	r4, r9, pc, asr r8
    4be8:	5f617369 	svcpl	0x00617369
    4bec:	5f746962 	svcpl	0x00746962
    4bf0:	76696461 	strbtvc	r6, [r9], -r1, ror #8
    4bf4:	52415400 	subpl	r5, r1, #0, 8
    4bf8:	5f544547 	svcpl	0x00544547
    4bfc:	5f555043 	svcpl	0x00555043
    4c00:	316d7261 	cmncc	sp, r1, ror #4
    4c04:	6a363331 	bvs	d918d0 <__ccfg+0xd71928>
    4c08:	41540073 	cmpmi	r4, r3, ror r0
    4c0c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c10:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c14:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c18:	41540038 	cmpmi	r4, r8, lsr r0
    4c1c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c20:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c24:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c28:	41540039 	cmpmi	r4, r9, lsr r0
    4c2c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c30:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c34:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4c38:	61003632 	tstvs	r0, r2, lsr r6
    4c3c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4c40:	5f686372 	svcpl	0x00686372
    4c44:	65736d63 	ldrbvs	r6, [r3, #-3427]!	; 0xfffff29d
    4c48:	52415400 	subpl	r5, r1, #0, 8
    4c4c:	5f544547 	svcpl	0x00544547
    4c50:	5f555043 	svcpl	0x00555043
    4c54:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c58:	346d7865 	strbtcc	r7, [sp], #-2149	; 0xfffff79b
    4c5c:	52415400 	subpl	r5, r1, #0, 8
    4c60:	5f544547 	svcpl	0x00544547
    4c64:	5f555043 	svcpl	0x00555043
    4c68:	316d7261 	cmncc	sp, r1, ror #4
    4c6c:	54006530 	strpl	r6, [r0], #-1328	; 0xfffffad0
    4c70:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c74:	50435f54 	subpl	r5, r3, r4, asr pc
    4c78:	6f635f55 	svcvs	0x00635f55
    4c7c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c80:	6100376d 	tstvs	r0, sp, ror #14
    4c84:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    4c88:	5f646e6f 	svcpl	0x00646e6f
    4c8c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    4c90:	4d524100 	ldfmie	f4, [r2, #-0]
    4c94:	5343505f 	movtpl	r5, #12383	; 0x305f
    4c98:	5041415f 	subpl	r4, r1, pc, asr r1
    4c9c:	69005343 	stmdbvs	r0, {r0, r1, r6, r8, r9, ip, lr}
    4ca0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4ca4:	615f7469 	cmpvs	pc, r9, ror #8
    4ca8:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4cac:	4200325f 	andmi	r3, r0, #-268435451	; 0xf0000005
    4cb0:	5f455341 	svcpl	0x00455341
    4cb4:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4cb8:	004d335f 	subeq	r3, sp, pc, asr r3
    4cbc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4cc0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4cc4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4cc8:	31376d72 	teqcc	r7, r2, ror sp
    4ccc:	61007430 	tstvs	r0, r0, lsr r4
    4cd0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4cd4:	5f686372 	svcpl	0x00686372
    4cd8:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    4cdc:	00327478 	eorseq	r7, r2, r8, ror r4
    4ce0:	5f617369 	svcpl	0x00617369
    4ce4:	5f6d756e 	svcpl	0x006d756e
    4ce8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4cec:	52415400 	subpl	r5, r1, #0, 8
    4cf0:	5f544547 	svcpl	0x00544547
    4cf4:	5f555043 	svcpl	0x00555043
    4cf8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4cfc:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4d00:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    4d04:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4d08:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4d0c:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    4d10:	41540079 	cmpmi	r4, r9, ror r0
    4d14:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d18:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d1c:	7978655f 	ldmdbvc	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    4d20:	6d736f6e 	ldclvs	15, cr6, [r3, #-440]!	; 0xfffffe48
    4d24:	41540031 	cmpmi	r4, r1, lsr r0
    4d28:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d2c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d30:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d34:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    4d38:	69003235 	stmdbvs	r0, {r0, r2, r4, r5, r9, ip, sp}
    4d3c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d40:	745f7469 	ldrbvc	r7, [pc], #-1129	; 4d48 <__aeabi_lmul+0x4e4>
    4d44:	00766964 	rsbseq	r6, r6, r4, ror #18
    4d48:	66657270 			; <UNDEFINED> instruction: 0x66657270
    4d4c:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    4d50:	5f6e6f65 	svcpl	0x006e6f65
    4d54:	5f726f66 	svcpl	0x00726f66
    4d58:	69623436 	stmdbvs	r2!, {r1, r2, r4, r5, sl, ip, sp}^
    4d5c:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4d60:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d64:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4d68:	66363170 			; <UNDEFINED> instruction: 0x66363170
    4d6c:	54006c6d 	strpl	r6, [r0], #-3181	; 0xfffff393
    4d70:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d74:	50435f54 	subpl	r5, r3, r4, asr pc
    4d78:	6f635f55 	svcvs	0x00635f55
    4d7c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d80:	00323361 	eorseq	r3, r2, r1, ror #6
    4d84:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d88:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d8c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d90:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d94:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    4d98:	61736900 	cmnvs	r3, r0, lsl #18
    4d9c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4da0:	3170665f 	cmncc	r0, pc, asr r6
    4da4:	6e6f6336 	mcrvs	3, 3, r6, cr15, cr6, {1}
    4da8:	6e750076 	mrcvs	0, 3, r0, cr5, cr6, {3}
    4dac:	63657073 	cmnvs	r5, #115	; 0x73
    4db0:	74735f76 	ldrbtvc	r5, [r3], #-3958	; 0xfffff08a
    4db4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4db8:	41540073 	cmpmi	r4, r3, ror r0
    4dbc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dc0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4dc4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4dc8:	36353131 			; <UNDEFINED> instruction: 0x36353131
    4dcc:	00733274 	rsbseq	r3, r3, r4, ror r2
    4dd0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4dd4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4dd8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4ddc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4de0:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    4de4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4de8:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4dec:	41540035 	cmpmi	r4, r5, lsr r0
    4df0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4df4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4df8:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4dfc:	65743630 	ldrbvs	r3, [r4, #-1584]!	; 0xfffff9d0
    4e00:	52415400 	subpl	r5, r1, #0, 8
    4e04:	5f544547 	svcpl	0x00544547
    4e08:	5f555043 	svcpl	0x00555043
    4e0c:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4e10:	6a653632 	bvs	19526e0 <__ccfg+0x1932738>
    4e14:	41420073 	hvcmi	8195	; 0x2003
    4e18:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4e1c:	5f484352 	svcpl	0x00484352
    4e20:	69005434 	stmdbvs	r0, {r2, r4, r5, sl, ip, lr}
    4e24:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e28:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    4e2c:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    4e30:	7261006f 	rsbvc	r0, r1, #111	; 0x6f
    4e34:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    4e38:	695f7367 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4e3c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    4e40:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    4e44:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    4e48:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e4c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    4e50:	41420062 	cmpmi	r2, r2, rrx
    4e54:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4e58:	5f484352 	svcpl	0x00484352
    4e5c:	00455435 	subeq	r5, r5, r5, lsr r4
    4e60:	5f617369 	svcpl	0x00617369
    4e64:	74616566 	strbtvc	r6, [r1], #-1382	; 0xfffffa9a
    4e68:	00657275 	rsbeq	r7, r5, r5, ror r2
    4e6c:	5f617369 	svcpl	0x00617369
    4e70:	5f746962 	svcpl	0x00746962
    4e74:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4e78:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4e7c:	6d726100 	ldfvse	f6, [r2, #-0]
    4e80:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    4e84:	756f5f67 	strbvc	r5, [pc, #-3943]!	; 3f25 <NOROM_SetupGetTrimForAnabypassValue1+0x1>
    4e88:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    4e8c:	6a626f5f 	bvs	18a0c10 <__ccfg+0x1880c68>
    4e90:	5f746365 	svcpl	0x00746365
    4e94:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    4e98:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
    4e9c:	685f7365 	ldmdavs	pc, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4ea0:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    4ea4:	5f617369 	svcpl	0x00617369
    4ea8:	5f746962 	svcpl	0x00746962
    4eac:	645f7066 	ldrbvs	r7, [pc], #-102	; 4eb4 <__pi_hex_enc_table+0x4b>
    4eb0:	41003233 	tstmi	r0, r3, lsr r2
    4eb4:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    4eb8:	73690045 	cmnvc	r9, #69	; 0x45
    4ebc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ec0:	65625f74 	strbvs	r5, [r2, #-3956]!	; 0xfffff08c
    4ec4:	41540038 	cmpmi	r4, r8, lsr r0
    4ec8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4ecc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ed0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ed4:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4ed8:	00737a6a 	rsbseq	r7, r3, sl, ror #20
    4edc:	636f7270 	cmnvs	pc, #112, 4
    4ee0:	6f737365 	svcvs	0x00737365
    4ee4:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ee8:	61006570 	tstvs	r0, r0, ror r5
    4eec:	665f6c6c 	ldrbvs	r6, [pc], -ip, ror #24
    4ef0:	00737570 	rsbseq	r7, r3, r0, ror r5
    4ef4:	5f6d7261 	svcpl	0x006d7261
    4ef8:	00736370 	rsbseq	r6, r3, r0, ror r3
    4efc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4f00:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4f04:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4f08:	6d726100 	ldfvse	f6, [r2, #-0]
    4f0c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4f10:	00743468 	rsbseq	r3, r4, r8, ror #8
    4f14:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4f18:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4f1c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4f20:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4f24:	36376178 			; <UNDEFINED> instruction: 0x36376178
    4f28:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f2c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4f30:	72610035 	rsbvc	r0, r1, #53	; 0x35
    4f34:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4f38:	775f656e 	ldrbvc	r6, [pc, -lr, ror #10]
    4f3c:	00667562 	rsbeq	r7, r6, r2, ror #10
    4f40:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4f44:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    4f48:	73690068 	cmnvc	r9, #104	; 0x68
    4f4c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f50:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    4f54:	5f6b7269 	svcpl	0x006b7269
    4f58:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    4f5c:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    4f60:	5f656c69 	svcpl	0x00656c69
    4f64:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    4f68:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f6c:	50435f54 	subpl	r5, r3, r4, asr pc
    4f70:	6f635f55 	svcvs	0x00635f55
    4f74:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f78:	5400306d 	strpl	r3, [r0], #-109	; 0xffffff93
    4f7c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f80:	50435f54 	subpl	r5, r3, r4, asr pc
    4f84:	6f635f55 	svcvs	0x00635f55
    4f88:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f8c:	5400316d 	strpl	r3, [r0], #-365	; 0xfffffe93
    4f90:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f94:	50435f54 	subpl	r5, r3, r4, asr pc
    4f98:	6f635f55 	svcvs	0x00635f55
    4f9c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4fa0:	6900336d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    4fa4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fa8:	615f7469 	cmpvs	pc, r9, ror #8
    4fac:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fb0:	6100315f 	tstvs	r0, pc, asr r1
    4fb4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4fb8:	5f686372 	svcpl	0x00686372
    4fbc:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    4fc0:	61736900 	cmnvs	r3, r0, lsl #18
    4fc4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fc8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fcc:	335f3876 	cmpcc	pc, #7733248	; 0x760000
    4fd0:	61736900 	cmnvs	r3, r0, lsl #18
    4fd4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fd8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fdc:	345f3876 	ldrbcc	r3, [pc], #-2166	; 4fe4 <patchGenfskRfe+0x50>
    4fe0:	61736900 	cmnvs	r3, r0, lsl #18
    4fe4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fe8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fec:	355f3876 	ldrbcc	r3, [pc, #-2166]	; 477e <memcpy+0x12>
    4ff0:	52415400 	subpl	r5, r1, #0, 8
    4ff4:	5f544547 	svcpl	0x00544547
    4ff8:	5f555043 	svcpl	0x00555043
    4ffc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5000:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5004:	41540033 	cmpmi	r4, r3, lsr r0
    5008:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    500c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5010:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5014:	61786574 	cmnvs	r8, r4, ror r5
    5018:	54003535 	strpl	r3, [r0], #-1333	; 0xfffffacb
    501c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5020:	50435f54 	subpl	r5, r3, r4, asr pc
    5024:	6f635f55 	svcvs	0x00635f55
    5028:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    502c:	00373561 	eorseq	r3, r7, r1, ror #10
    5030:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5034:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5038:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 4f00 <__pi_hex_enc_table+0x97>
    503c:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    5040:	41540065 	cmpmi	r4, r5, rrx
    5044:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5048:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    504c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5050:	6e6f6e5f 	mcrvs	14, 3, r6, cr15, cr15, {2}
    5054:	72610065 	rsbvc	r0, r1, #101	; 0x65
    5058:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    505c:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    5060:	006d746f 	rsbeq	r7, sp, pc, ror #8
    5064:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5068:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    506c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5070:	30316d72 	eorscc	r6, r1, r2, ror sp
    5074:	6a653632 	bvs	1952944 <__ccfg+0x193299c>
    5078:	41420073 	hvcmi	8195	; 0x2003
    507c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5080:	5f484352 	svcpl	0x00484352
    5084:	42004a36 	andmi	r4, r0, #221184	; 0x36000
    5088:	5f455341 	svcpl	0x00455341
    508c:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5090:	004b365f 	subeq	r3, fp, pc, asr r6
    5094:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5098:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    509c:	4d365f48 	ldcmi	15, cr5, [r6, #-288]!	; 0xfffffee0
    50a0:	61736900 	cmnvs	r3, r0, lsl #18
    50a4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    50a8:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    50ac:	0074786d 	rsbseq	r7, r4, sp, ror #16
    50b0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    50b4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    50b8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    50bc:	31316d72 	teqcc	r1, r2, ror sp
    50c0:	666a3633 			; <UNDEFINED> instruction: 0x666a3633
    50c4:	52410073 	subpl	r0, r1, #115	; 0x73
    50c8:	534c5f4d 	movtpl	r5, #53069	; 0xcf4d
    50cc:	4d524100 	ldfmie	f4, [r2, #-0]
    50d0:	00544c5f 	subseq	r4, r4, pc, asr ip
    50d4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    50d8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    50dc:	5a365f48 	bpl	d9ce04 <__ccfg+0xd7ce5c>
    50e0:	4d524100 	ldfmie	f4, [r2, #-0]
    50e4:	5343505f 	movtpl	r5, #12383	; 0x305f
    50e8:	5041415f 	subpl	r4, r1, pc, asr r1
    50ec:	565f5343 	ldrbpl	r5, [pc], -r3, asr #6
    50f0:	54005046 	strpl	r5, [r0], #-70	; 0xffffffba
    50f4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    50f8:	50435f54 	subpl	r5, r3, r4, asr pc
    50fc:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    5100:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    5104:	73690032 	cmnvc	r9, #50	; 0x32
    5108:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    510c:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
    5110:	61006e6f 	tstvs	r0, pc, ror #28
    5114:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    5118:	615f7570 	cmpvs	pc, r0, ror r5	; <UNPREDICTABLE>
    511c:	00727474 	rsbseq	r7, r2, r4, ror r4
    5120:	5f617369 	svcpl	0x00617369
    5124:	5f746962 	svcpl	0x00746962
    5128:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    512c:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    5130:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5134:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5138:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    513c:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    5140:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    5144:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5148:	50435f54 	subpl	r5, r3, r4, asr pc
    514c:	616d5f55 	cmnvs	sp, r5, asr pc
    5150:	6c657672 	stclvs	6, cr7, [r5], #-456	; 0xfffffe38
    5154:	6a705f6c 	bvs	1c1cf0c <__ccfg+0x1bfcf64>
    5158:	74680034 	strbtvc	r0, [r8], #-52	; 0xffffffcc
    515c:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    5160:	5f687361 	svcpl	0x00687361
    5164:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    5168:	00726574 	rsbseq	r6, r2, r4, ror r5
    516c:	5f6d7261 	svcpl	0x006d7261
    5170:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    5174:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5178:	5f786574 	svcpl	0x00786574
    517c:	69003961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp}
    5180:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5184:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5188:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    518c:	54003274 	strpl	r3, [r0], #-628	; 0xfffffd8c
    5190:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5194:	50435f54 	subpl	r5, r3, r4, asr pc
    5198:	6f635f55 	svcvs	0x00635f55
    519c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    51a0:	63323761 	teqvs	r2, #25427968	; 0x1840000
    51a4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    51a8:	33356178 	teqcc	r5, #120, 2
    51ac:	61736900 	cmnvs	r3, r0, lsl #18
    51b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    51b4:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    51b8:	0032626d 	eorseq	r6, r2, sp, ror #4
    51bc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    51c0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    51c4:	41375f48 	teqmi	r7, r8, asr #30
    51c8:	61736900 	cmnvs	r3, r0, lsl #18
    51cc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    51d0:	746f645f 	strbtvc	r6, [pc], #-1119	; 51d8 <patchGenfskRfe+0x244>
    51d4:	646f7270 	strbtvs	r7, [pc], #-624	; 51dc <patchGenfskRfe+0x248>
    51d8:	6d726100 	ldfvse	f6, [r2, #-0]
    51dc:	3170665f 	cmncc	r0, pc, asr r6
    51e0:	79745f36 	ldmdbvc	r4!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    51e4:	6e5f6570 	mrcvs	5, 2, r6, cr15, cr0, {3}
    51e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    51ec:	5f4d5241 	svcpl	0x004d5241
    51f0:	6100494d 	tstvs	r0, sp, asr #18
    51f4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    51f8:	36686372 			; <UNDEFINED> instruction: 0x36686372
    51fc:	7261006b 	rsbvc	r0, r1, #107	; 0x6b
    5200:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5204:	6d366863 	ldcvs	8, cr6, [r6, #-396]!	; 0xfffffe74
    5208:	53414200 	movtpl	r4, #4608	; 0x1200
    520c:	52415f45 	subpl	r5, r1, #276	; 0x114
    5210:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    5214:	5f5f0052 	svcpl	0x005f0052
    5218:	63706f70 	cmnvs	r0, #112, 30	; 0x1c0
    521c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    5220:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    5224:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5228:	2f646c69 	svccs	0x00646c69
    522c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5230:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5234:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5238:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    523c:	6c472d69 	mcrrvs	13, 6, r2, r7, cr9
    5240:	39546b39 	ldmdbcc	r4, {r0, r3, r4, r5, r8, r9, fp, sp, lr}^
    5244:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5248:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    524c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5250:	61652d65 	cmnvs	r5, r5, ror #26
    5254:	392d6962 	pushcc	{r1, r5, r6, r8, fp, sp, lr}
    5258:	3130322d 	teqcc	r0, sp, lsr #4
    525c:	34712d39 	ldrbtcc	r2, [r1], #-3385	; 0xfffff2c7
    5260:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5264:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    5268:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    526c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5270:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5274:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    5278:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    527c:	2f70666f 	svccs	0x0070666f
    5280:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    5284:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    5288:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    528c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5290:	0065736d 	rsbeq	r7, r5, sp, ror #6
    5294:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5298:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    529c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    52a0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    52a4:	33376178 	teqcc	r7, #120, 2
    52a8:	52415400 	subpl	r5, r1, #0, 8
    52ac:	5f544547 	svcpl	0x00544547
    52b0:	5f555043 	svcpl	0x00555043
    52b4:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    52b8:	76636972 			; <UNDEFINED> instruction: 0x76636972
    52bc:	54006137 	strpl	r6, [r0], #-311	; 0xfffffec9
    52c0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    52c4:	50435f54 	subpl	r5, r3, r4, asr pc
    52c8:	6f635f55 	svcvs	0x00635f55
    52cc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    52d0:	00363761 	eorseq	r3, r6, r1, ror #14
    52d4:	5f6d7261 	svcpl	0x006d7261
    52d8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    52dc:	5f6f6e5f 	svcpl	0x006f6e5f
    52e0:	616c6f76 	smcvs	50934	; 0xc6f6
    52e4:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
    52e8:	0065635f 	rsbeq	r6, r5, pc, asr r3
    52ec:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    52f0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    52f4:	41385f48 	teqmi	r8, r8, asr #30
    52f8:	61736900 	cmnvs	r3, r0, lsl #18
    52fc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5300:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5304:	00743576 	rsbseq	r3, r4, r6, ror r5
    5308:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    530c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5310:	52385f48 	eorspl	r5, r8, #72, 30	; 0x120
    5314:	52415400 	subpl	r5, r1, #0, 8
    5318:	5f544547 	svcpl	0x00544547
    531c:	5f555043 	svcpl	0x00555043
    5320:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5324:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    5328:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    532c:	61786574 	cmnvs	r8, r4, ror r5
    5330:	41003533 	tstmi	r0, r3, lsr r5
    5334:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    5338:	72610056 	rsbvc	r0, r1, #86	; 0x56
    533c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5340:	00346863 	eorseq	r6, r4, r3, ror #16
    5344:	5f6d7261 	svcpl	0x006d7261
    5348:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    534c:	72610036 	rsbvc	r0, r1, #54	; 0x36
    5350:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5354:	00376863 	eorseq	r6, r7, r3, ror #16
    5358:	5f6d7261 	svcpl	0x006d7261
    535c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5360:	49440038 	stmdbmi	r4, {r3, r4, r5}^
    5364:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5368:	6d726100 	ldfvse	f6, [r2, #-0]
    536c:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    5370:	73785f65 	cmnvc	r8, #404	; 0x194
    5374:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    5378:	73574400 	cmpvc	r7, #0, 8
    537c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    5380:	616d0074 	smcvs	53252	; 0xd004
    5384:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    5388:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    538c:	745f7473 	ldrbvc	r7, [pc], #-1139	; 5394 <patchGenfskRfe+0x400>
    5390:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    5394:	75687400 	strbvc	r7, [r8, #-1024]!	; 0xfffffc00
    5398:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    539c:	5f6c6c61 	svcpl	0x006c6c61
    53a0:	5f616976 	svcpl	0x00616976
    53a4:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    53a8:	7369006c 	cmnvc	r9, #108	; 0x6c
    53ac:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    53b0:	70665f74 	rsbvc	r5, r6, r4, ror pc
    53b4:	69003576 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp}
    53b8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    53bc:	615f7469 	cmpvs	pc, r9, ror #8
    53c0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    53c4:	4154006b 	cmpmi	r4, fp, rrx
    53c8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53cc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53d0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53d4:	61786574 	cmnvs	r8, r4, ror r5
    53d8:	41540037 	cmpmi	r4, r7, lsr r0
    53dc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53e0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53e4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53e8:	61786574 	cmnvs	r8, r4, ror r5
    53ec:	41540038 	cmpmi	r4, r8, lsr r0
    53f0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53f8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53fc:	61786574 	cmnvs	r8, r4, ror r5
    5400:	52410039 	subpl	r0, r1, #57	; 0x39
    5404:	43505f4d 	cmpmi	r0, #308	; 0x134
    5408:	50415f53 	subpl	r5, r1, r3, asr pc
    540c:	41005343 	tstmi	r0, r3, asr #6
    5410:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5414:	415f5343 	cmpmi	pc, r3, asr #6
    5418:	53435054 	movtpl	r5, #12372	; 0x3054
    541c:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 5424 <patchGenfskRfe+0x490>
    5420:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    5424:	756f6420 	strbvc	r6, [pc, #-1056]!	; 500c <patchGenfskRfe+0x78>
    5428:	00656c62 	rsbeq	r6, r5, r2, ror #24
    542c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5430:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5434:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5438:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    543c:	33376178 	teqcc	r7, #120, 2
    5440:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5444:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5448:	41540033 	cmpmi	r4, r3, lsr r0
    544c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5450:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5454:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5458:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    545c:	756c7030 	strbvc	r7, [ip, #-48]!	; 0xffffffd0
    5460:	72610073 	rsbvc	r0, r1, #115	; 0x73
    5464:	63635f6d 	cmnvs	r3, #436	; 0x1b4
    5468:	61736900 	cmnvs	r3, r0, lsl #18
    546c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5470:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    5474:	00656c61 	rsbeq	r6, r5, r1, ror #24
    5478:	6e6f645f 	mcrvs	4, 3, r6, cr15, cr15, {2}
    547c:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
    5480:	72745f65 	rsbsvc	r5, r4, #404	; 0x194
    5484:	685f6565 	ldmdavs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    5488:	5f657265 	svcpl	0x00657265
    548c:	52415400 	subpl	r5, r1, #0, 8
    5490:	5f544547 	svcpl	0x00544547
    5494:	5f555043 	svcpl	0x00555043
    5498:	316d7261 	cmncc	sp, r1, ror #4
    549c:	6d647430 	cfstrdvs	mvd7, [r4, #-192]!	; 0xffffff40
    54a0:	41540069 	cmpmi	r4, r9, rrx
    54a4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    54a8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    54ac:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    54b0:	61786574 	cmnvs	r8, r4, ror r5
    54b4:	61620035 	cmnvs	r2, r5, lsr r0
    54b8:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    54bc:	69686372 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    54c0:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    54c4:	00657275 	rsbeq	r7, r5, r5, ror r2
    54c8:	5f6d7261 	svcpl	0x006d7261
    54cc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    54d0:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    54d4:	52415400 	subpl	r5, r1, #0, 8
    54d8:	5f544547 	svcpl	0x00544547
    54dc:	5f555043 	svcpl	0x00555043
    54e0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    54e4:	316d7865 	cmncc	sp, r5, ror #16
    54e8:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    54ec:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    54f0:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    54f4:	72610079 	rsbvc	r0, r1, #121	; 0x79
    54f8:	75635f6d 	strbvc	r5, [r3, #-3949]!	; 0xfffff093
    54fc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    5500:	63635f74 	cmnvs	r3, #116, 30	; 0x1d0
    5504:	61736900 	cmnvs	r3, r0, lsl #18
    5508:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    550c:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    5510:	41003233 	tstmi	r0, r3, lsr r2
    5514:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5518:	7369004c 	cmnvc	r9, #76	; 0x4c
    551c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5520:	66765f74 	uhsub16vs	r5, r6, r4
    5524:	00337670 	eorseq	r7, r3, r0, ror r6
    5528:	5f617369 	svcpl	0x00617369
    552c:	5f746962 	svcpl	0x00746962
    5530:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5534:	41420034 	cmpmi	r2, r4, lsr r0
    5538:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    553c:	5f484352 	svcpl	0x00484352
    5540:	00325436 	eorseq	r5, r2, r6, lsr r4
    5544:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5548:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    554c:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    5550:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    5554:	4154004e 	cmpmi	r4, lr, asr #32
    5558:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    555c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5560:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5564:	6d647439 	cfstrdvs	mvd7, [r4, #-228]!	; 0xffffff1c
    5568:	52410069 	subpl	r0, r1, #105	; 0x69
    556c:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
    5570:	53414200 	movtpl	r4, #4608	; 0x1200
    5574:	52415f45 	subpl	r5, r1, #276	; 0x114
    5578:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    557c:	7261004d 	rsbvc	r0, r1, #77	; 0x4d
    5580:	61745f6d 	cmnvs	r4, sp, ror #30
    5584:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    5588:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
    558c:	61006c65 	tstvs	r0, r5, ror #24
    5590:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5598 <patchGenfskRfe+0x604>
    5594:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    5598:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    559c:	54006e73 	strpl	r6, [r0], #-3699	; 0xfffff18d
    55a0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55a4:	50435f54 	subpl	r5, r3, r4, asr pc
    55a8:	6f635f55 	svcvs	0x00635f55
    55ac:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55b0:	54003572 	strpl	r3, [r0], #-1394	; 0xfffffa8e
    55b4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55b8:	50435f54 	subpl	r5, r3, r4, asr pc
    55bc:	6f635f55 	svcvs	0x00635f55
    55c0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55c4:	54003772 	strpl	r3, [r0], #-1906	; 0xfffff88e
    55c8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55cc:	50435f54 	subpl	r5, r3, r4, asr pc
    55d0:	6f635f55 	svcvs	0x00635f55
    55d4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55d8:	69003872 	stmdbvs	r0, {r1, r4, r5, r6, fp, ip, sp}
    55dc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    55e0:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    55e4:	00656170 	rsbeq	r6, r5, r0, ror r1
    55e8:	5f617369 	svcpl	0x00617369
    55ec:	5f746962 	svcpl	0x00746962
    55f0:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    55f4:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    55f8:	6b36766d 	blvs	da2fb4 <__ccfg+0xd8300c>
    55fc:	7369007a 	cmnvc	r9, #122	; 0x7a
    5600:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5604:	6f6e5f74 	svcvs	0x006e5f74
    5608:	69006d74 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
    560c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5610:	615f7469 	cmpvs	pc, r9, ror #8
    5614:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    5618:	61736900 	cmnvs	r3, r0, lsl #18
    561c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5620:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5624:	69003676 	stmdbvs	r0, {r1, r2, r4, r5, r6, r9, sl, ip, sp}
    5628:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    562c:	615f7469 	cmpvs	pc, r9, ror #8
    5630:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5634:	61736900 	cmnvs	r3, r0, lsl #18
    5638:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    563c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5640:	5f003876 	svcpl	0x00003876
    5644:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    5648:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    564c:	7874725f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
    5650:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    5654:	55005f65 	strpl	r5, [r0, #-3941]	; 0xfffff09b
    5658:	79744951 	ldmdbvc	r4!, {r0, r4, r6, r8, fp, lr}^
    565c:	69006570 	stmdbvs	r0, {r4, r5, r6, r8, sl, sp, lr}
    5660:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5664:	615f7469 	cmpvs	pc, r9, ror #8
    5668:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    566c:	61006574 	tstvs	r0, r4, ror r5
    5670:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5678 <patchImageGenfsk+0x30>
    5674:	00656e75 	rsbeq	r6, r5, r5, ror lr
    5678:	5f6d7261 	svcpl	0x006d7261
    567c:	5f707063 	svcpl	0x00707063
    5680:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    5684:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    5688:	4154006b 	cmpmi	r4, fp, rrx
    568c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5690:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5694:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5698:	74303239 	ldrtvc	r3, [r0], #-569	; 0xfffffdc7
    569c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 47a4 <memcpy+0x38>
    56a0:	74680068 	strbtvc	r0, [r8], #-104	; 0xffffff98
    56a4:	655f6261 	ldrbvs	r6, [pc, #-609]	; 544b <patchGenfskRfe+0x4b7>
    56a8:	41540071 	cmpmi	r4, r1, ror r0
    56ac:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    56b0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    56b4:	3561665f 	strbcc	r6, [r1, #-1631]!	; 0xfffff9a1
    56b8:	5f003632 	svcpl	0x00003632
    56bc:	006c755f 	rsbeq	r7, ip, pc, asr r5
    56c0:	5f6d7261 	svcpl	0x006d7261
    56c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    56c8:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    56cc:	685f626d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    56d0:	76696477 			; <UNDEFINED> instruction: 0x76696477
    56d4:	61746800 	cmnvs	r4, r0, lsl #16
    56d8:	71655f62 	cmnvc	r5, r2, ror #30
    56dc:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    56e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    56e4:	6d726100 	ldfvse	f6, [r2, #-0]
    56e8:	6369705f 	cmnvs	r9, #95	; 0x5f
    56ec:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    56f0:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    56f4:	41540072 	cmpmi	r4, r2, ror r0
    56f8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    56fc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5700:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5704:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    5708:	616d7330 	cmnvs	sp, r0, lsr r3
    570c:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
    5710:	7069746c 	rsbvc	r7, r9, ip, ror #8
    5714:	5400796c 	strpl	r7, [r0], #-2412	; 0xfffff694
    5718:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    571c:	50435f54 	subpl	r5, r3, r4, asr pc
    5720:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    5724:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    5728:	66766f6e 	ldrbtvs	r6, [r6], -lr, ror #30
    572c:	73690070 	cmnvc	r9, #112	; 0x70
    5730:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5734:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    5738:	5f6b7269 	svcpl	0x006b7269
    573c:	5f336d63 	svcpl	0x00336d63
    5740:	6472646c 	ldrbtvs	r6, [r2], #-1132	; 0xfffffb94
    5744:	4d524100 	ldfmie	f4, [r2, #-0]
    5748:	0043435f 	subeq	r4, r3, pc, asr r3
    574c:	5f6d7261 	svcpl	0x006d7261
    5750:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5754:	00325f38 	eorseq	r5, r2, r8, lsr pc
    5758:	5f6d7261 	svcpl	0x006d7261
    575c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5760:	00335f38 	eorseq	r5, r3, r8, lsr pc
    5764:	5f6d7261 	svcpl	0x006d7261
    5768:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    576c:	00345f38 	eorseq	r5, r4, r8, lsr pc
    5770:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5774:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5778:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    577c:	3236706d 	eorscc	r7, r6, #109	; 0x6d
    5780:	52410036 	subpl	r0, r1, #54	; 0x36
    5784:	53435f4d 	movtpl	r5, #16205	; 0x3f4d
    5788:	6d726100 	ldfvse	f6, [r2, #-0]
    578c:	3170665f 	cmncc	r0, pc, asr r6
    5790:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
    5794:	5f007473 	svcpl	0x00007473
    5798:	0068765f 	rsbeq	r7, r8, pc, asr r6
    579c:	5f6d7261 	svcpl	0x006d7261
    57a0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    57a4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    57a8:	5f5f0068 	svcpl	0x005f0068
    57ac:	54006c76 	strpl	r6, [r0], #-3190	; 0xfffff38a
    57b0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    57b4:	50435f54 	subpl	r5, r3, r4, asr pc
    57b8:	6f635f55 	svcvs	0x00635f55
    57bc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57c0:	54003472 	strpl	r3, [r0], #-1138	; 0xfffffb8e
    57c4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    57c8:	50435f54 	subpl	r5, r3, r4, asr pc
    57cc:	6f635f55 	svcvs	0x00635f55
    57d0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57d4:	63353161 	teqvs	r5, #1073741848	; 0x40000018
    57d8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    57dc:	00376178 	eorseq	r6, r7, r8, ror r1
    57e0:	5f6d7261 	svcpl	0x006d7261
    57e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    57e8:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    57ec:	47524154 			; <UNDEFINED> instruction: 0x47524154
    57f0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    57f4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    57f8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    57fc:	32376178 	eorscc	r6, r7, #120, 2
    5800:	6d726100 	ldfvse	f6, [r2, #-0]
    5804:	7363705f 	cmnvc	r3, #95	; 0x5f
    5808:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    580c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5810:	4d524100 	ldfmie	f4, [r2, #-0]
    5814:	5343505f 	movtpl	r5, #12383	; 0x305f
    5818:	5041415f 	subpl	r4, r1, pc, asr r1
    581c:	4c5f5343 	mrrcmi	3, 4, r5, pc, cr3	; <UNPREDICTABLE>
    5820:	4c41434f 	mcrrmi	3, 4, r4, r1, cr15
    5824:	52415400 	subpl	r5, r1, #0, 8
    5828:	5f544547 	svcpl	0x00544547
    582c:	5f555043 	svcpl	0x00555043
    5830:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5834:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    5838:	41540035 	cmpmi	r4, r5, lsr r0
    583c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5840:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5844:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    5848:	61676e6f 	cmnvs	r7, pc, ror #28
    584c:	61006d72 	tstvs	r0, r2, ror sp
    5850:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5854:	5f686372 	svcpl	0x00686372
    5858:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    585c:	61003162 	tstvs	r0, r2, ror #2
    5860:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5864:	5f686372 	svcpl	0x00686372
    5868:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    586c:	54003262 	strpl	r3, [r0], #-610	; 0xfffffd9e
    5870:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5874:	50435f54 	subpl	r5, r3, r4, asr pc
    5878:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    587c:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    5880:	6d726100 	ldfvse	f6, [r2, #-0]
    5884:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5888:	00743568 	rsbseq	r3, r4, r8, ror #10
    588c:	30785f5f 	rsbscc	r5, r8, pc, asr pc
    5890:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5894:	5f5f0031 	svcpl	0x005f0031
    5898:	5f003278 	svcpl	0x00003278
    589c:	0033785f 	eorseq	r7, r3, pc, asr r8
    58a0:	5f617369 	svcpl	0x00617369
    58a4:	5f746962 	svcpl	0x00746962
    58a8:	6100706d 	tstvs	r0, sp, rrx
    58ac:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    58b0:	63735f64 	cmnvs	r3, #100, 30	; 0x190
    58b4:	00646568 	rsbeq	r6, r4, r8, ror #10
    58b8:	5f6d7261 	svcpl	0x006d7261
    58bc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    58c0:	00315f38 	eorseq	r5, r1, r8, lsr pc

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
		packet[0] = NETWORK_ID;
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  f0:	61656c65 	cmnvs	r5, r5, ror #24
		*p = message->tpe;p++;
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		*p = message->sender_id;p++;
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
		*p = message->receiver_id;p++;
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		switch(message->tpe) {
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		tcv_endp(packet);
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	0000002c 	andeq	r0, r0, ip, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000a4 	andeq	r0, r0, r4, lsr #1
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      2c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
      30:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
      34:	ce0a660b 	cfmadd32gt	mvax0, mvfx6, mvfx10, mvfx11
      38:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      3c:	000b4300 	andeq	r4, fp, r0, lsl #6
			i = k;
      40:	00000014 	andeq	r0, r0, r4, lsl r0
				j->Next = k;
      44:	00000000 	andeq	r0, r0, r0
      48:	0000016c 	andeq	r0, r0, ip, ror #2
}
      4c:	00000020 	andeq	r0, r0, r0, lsr #32
      50:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
      54:	00018e02 	andeq	r8, r1, r2, lsl #28
      58:	0000000c 	andeq	r0, r0, ip
	...
      64:	00000006 	andeq	r0, r0, r6
      68:	0000000c 	andeq	r0, r0, ip
	...
      74:	00000006 	andeq	r0, r0, r6
      78:	0000000c 	andeq	r0, r0, ip
	...
      84:	00000008 	andeq	r0, r0, r8
      88:	0000000c 	andeq	r0, r0, ip
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	00000014 	andeq	r0, r0, r4, lsl r0
      98:	00000014 	andeq	r0, r0, r4, lsl r0
	if (baction == NULL)
      9c:	00000000 	andeq	r0, r0, r0
      a0:	0000018c 	andeq	r0, r0, ip, lsl #3
	(*baction) (pbutton);
      a4:	00000012 	andeq	r0, r0, r2, lsl r0
endthread
      a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00018e02 	andeq	r8, r1, r2, lsl #28
      b0:	0000000c 	andeq	r0, r0, ip
	...
endthread
      bc:	0000000c 	andeq	r0, r0, ip
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	00000000 	andeq	r0, r0, r0
fsm sender(struct ResponseMessage *message) {
      c8:	0000019e 	muleq	r0, lr, r1
      cc:	00000016 	andeq	r0, r0, r6, lsl r0
      d0:	0000000c 	andeq	r0, r0, ip
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0000001c 	andeq	r0, r0, ip, lsl r0
      e0:	00000024 	andeq	r0, r0, r4, lsr #32
      e4:	00000000 	andeq	r0, r0, r0
      e8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		packet[0] = NETWORK_ID;
      ec:	0000032c 	andeq	r0, r0, ip, lsr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		*p = message->tpe;p++;
      f4:	86038504 	strhi	r8, [r3], -r4, lsl #10
      f8:	42018e02 	andmi	r8, r1, #2, 28
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      fc:	c202500e 	andgt	r5, r2, #14
		*p = message->sender_id;p++;
     100:	41100e0a 	tstmi	r0, sl, lsl #28
		*p = message->receiver_id;p++;
     104:	0000000b 	andeq	r0, r0, fp
		switch(message->tpe) {
     108:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		tcv_endp(packet);
     114:	0000001e 	andeq	r0, r0, lr, lsl r0
     118:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_out(CONFIRM_message, "Message sent\r\n");
     11c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     120:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     124:	00000014 	andeq	r0, r0, r4, lsl r0
		finish;
     128:	00000000 	andeq	r0, r0, r0
     12c:	000004fc 	strdeq	r0, [r0], -ip
				*p = message->status;p++;
     130:	00000026 	andeq	r0, r0, r6, lsr #32
     134:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				strncpy(p, message->record, sizeof(message->record));
     138:	00018e02 	andeq	r8, r1, r2, lsl #28
				*p = message->padding;p++;
     13c:	00000014 	andeq	r0, r0, r4, lsl r0
	...
				strncpy(p, message->record, sizeof(message->record));
     148:	00000012 	andeq	r0, r0, r2, lsl r0
				strncpy(p, message->record, sizeof(message->record));
     14c:	83080e41 	movwhi	r0, #36417	; 0x8e41
				*p = message->record_index;p++;
     150:	00018e02 	andeq	r8, r1, r2, lsl #28
				*p = message->padding;
     154:	0000000c 	andeq	r0, r0, ip
	...
				break;
     160:	00000014 	andeq	r0, r0, r4, lsl r0
     164:	00000024 	andeq	r0, r0, r4, lsr #32
     168:	00000000 	andeq	r0, r0, r0
bool init_node(struct Node* node){
     16c:	00000524 	andeq	r0, r0, r4, lsr #10
    node->id  = 0;                  // default id value 0
     170:	0000050c 	andeq	r0, r0, ip, lsl #10
    node->index = 0;                // default entry count 0
     174:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    node->data_base.item_count = 0; // default no items in array
     178:	86058506 	strhi	r8, [r5], -r6, lsl #10
    DEBUG_PRINT("Error initializing node...\n");
     17c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     180:	42018e02 	andmi	r8, r1, #2, 28
};
     184:	5903300e 	stmdbpl	r3, {r1, r2, r3, ip, sp}
     188:	00180e02 	andseq	r0, r8, r2, lsl #28
uint8_t generate_request_num(void){
     18c:	0000000c 	andeq	r0, r0, ip
    return (uint8_t) (rand() % 255);
     190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     194:	7c020001 	stcvc	0, cr0, [r2], {1}
     198:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
     19c:	0000000c 	andeq	r0, r0, ip
            node->nnodes[i] = '\0'; // set to null byte
     1a0:	0000018c 	andeq	r0, r0, ip, lsl #3
     1a4:	00000a30 	andeq	r0, r0, r0, lsr sl
     1a8:	0000000c 	andeq	r0, r0, ip
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1ac:	00000018 	andeq	r0, r0, r8, lsl r0
};
     1b0:	0000018c 	andeq	r0, r0, ip, lsl #3
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1b4:	00000a3c 	andeq	r0, r0, ip, lsr sl
     1b8:	0000002c 	andeq	r0, r0, ip, lsr #32
        node->data_base.item_array[index].data_entry[0] = '\0';
     1bc:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     1c0:	41000e0a 	tstmi	r0, sl, lsl #28
     1c4:	0000000b 	andeq	r0, r0, fp
        node->data_base.item_count -= 1;
     1c8:	00000018 	andeq	r0, r0, r8, lsl r0
};
     1cc:	0000018c 	andeq	r0, r0, ip, lsl #3
fsm receiver(struct Node* node_db) {
     1d0:	00000a68 	andeq	r0, r0, r8, ror #20
     1d4:	0000002a 	andeq	r0, r0, sl, lsr #32
     1d8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
     1dc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     1e0:	000b4204 	andeq	r4, fp, r4, lsl #4
     1e4:	00000018 	andeq	r0, r0, r8, lsl r0
     1e8:	0000018c 	andeq	r0, r0, ip, lsl #3
     1ec:	00000a94 	muleq	r0, r4, sl
		incoming_packet = tcv_rnp(receiving, sfd);
     1f0:	0000003c 	andeq	r0, r0, ip, lsr r0
     1f4:	83100e41 	tsthi	r0, #1040	; 0x410
     1f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     200:	00000018 	andeq	r0, r0, r8, lsl r0
     204:	0000018c 	andeq	r0, r0, ip, lsl #3
     208:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		switch (tpe){
     20c:	00000040 	andeq	r0, r0, r0, asr #32
     210:	83100e41 	tsthi	r0, #1040	; 0x410
     214:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     218:	00018e02 	andeq	r8, r1, r2, lsl #28
     21c:	00000014 	andeq	r0, r0, r4, lsl r0
     220:	0000018c 	andeq	r0, r0, ip, lsl #3
     224:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("RECEIVED GID: %d\n", discovery_request_message->gid);
     228:	00000020 	andeq	r0, r0, r0, lsr #32
     22c:	83080e42 	movwhi	r0, #36418	; 0x8e42
				DEBUG_PRINT("RECEIVED TYPE: %d\n", discovery_request_message->tpe);
     230:	00018e02 	andeq	r8, r1, r2, lsl #28
     234:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", discovery_request_message->request_number);
     238:	0000018c 	andeq	r0, r0, ip, lsl #3
     23c:	00000b10 	andeq	r0, r0, r0, lsl fp
				DEBUG_PRINT("RECEIVED SID: %d\n", discovery_request_message->sender_id);
     240:	00000054 	andeq	r0, r0, r4, asr r0
     244:	87080e42 	strhi	r0, [r8, -r2, asr #28]
				DEBUG_PRINT("RECEIVED RID: %d\n", discovery_request_message->receiver_id);
     248:	00018e02 	andeq	r8, r1, r2, lsl #28
     24c:	00000014 	andeq	r0, r0, r4, lsl r0
				if (discovery_request_message->gid == node_db->gid){
     250:	0000018c 	andeq	r0, r0, ip, lsl #3
     254:	00000b64 	andeq	r0, r0, r4, ror #22
					response_message_0->gid = discovery_request_message->gid;
     258:	00000040 	andeq	r0, r0, r0, asr #32
					response_message_0->tpe = DISCOVERY_RESPONSE;
     25c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					response_message_0->request_number = discovery_request_message->request_number;
     260:	00018e02 	andeq	r8, r1, r2, lsl #28
					response_message_0->sender_id = node_db->id;
     264:	00000014 	andeq	r0, r0, r4, lsl r0
					response_message_0->receiver_id = discovery_request_message->sender_id;
     268:	0000018c 	andeq	r0, r0, ip, lsl #3
					call sender(response_message_0, done_case);
     26c:	00000ba4 	andeq	r0, r0, r4, lsr #23
     270:	00000028 	andeq	r0, r0, r8, lsr #32
     274:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     278:	00018e02 	andeq	r8, r1, r2, lsl #28
     27c:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("RECEIVED GID: %d\n", response_message_1->gid);
     280:	0000018c 	andeq	r0, r0, ip, lsl #3
     284:	00000bcc 	andeq	r0, r0, ip, asr #23
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
     288:	00000114 	andeq	r0, r0, r4, lsl r1
     28c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
     290:	00018e02 	andeq	r8, r1, r2, lsl #28
     294:	0000001c 	andeq	r0, r0, ip, lsl r0
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
     298:	0000018c 	andeq	r0, r0, ip, lsl #3
     29c:	00000ce0 	andeq	r0, r0, r0, ror #25
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
     2a0:	00000050 	andeq	r0, r0, r0, asr r0
     2a4:	83180e41 	tsthi	r8, #1040	; 0x410
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     2a8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     2ac:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     2b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     2b4:	00000018 	andeq	r0, r0, r8, lsl r0
     2b8:	0000018c 	andeq	r0, r0, ip, lsl #3
     2bc:	00000d30 	andeq	r0, r0, r0, lsr sp
     2c0:	00000054 	andeq	r0, r0, r4, asr r0
     2c4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     2c8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2cc:	00018e02 	andeq	r8, r1, r2, lsl #28
					node_db->index+=1;
     2d0:	0000000c 	andeq	r0, r0, ip
		tcv_endp(incoming_packet);
     2d4:	0000018c 	andeq	r0, r0, ip, lsl #3
     2d8:	00000d84 	andeq	r0, r0, r4, lsl #27
		ser_out(response_1_create, "\r\n Data Saved");
     2dc:	00000038 	andeq	r0, r0, r8, lsr r0
     2e0:	00000020 	andeq	r0, r0, r0, lsr #32
		proceed receiving;
     2e4:	0000018c 	andeq	r0, r0, ip, lsl #3
     2e8:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
		ser_out(response_1_delete, "\r\n Record Deleted");
     2ec:	00000110 	andeq	r0, r0, r0, lsl r1
     2f0:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
		proceed receiving;
     2f4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		ser_outf(response_1_retrieve, "\r\n Record Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     2f8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     2fc:	89038804 	stmdbhi	r3, {r2, fp, pc}
     300:	00018e02 	andeq	r8, r1, r2, lsl #28
     304:	0000000c 	andeq	r0, r0, ip
     308:	0000018c 	andeq	r0, r0, ip, lsl #3
		proceed receiving;
     30c:	00000000 	andeq	r0, r0, r0
		ser_outf(response_2, "\r\n The record can't be saved on node %d", response_message_5->sender_id);
     310:	0000000c 	andeq	r0, r0, ip
     314:	00000018 	andeq	r0, r0, r8, lsl r0
     318:	0000018c 	andeq	r0, r0, ip, lsl #3
     31c:	00000ecc 	andeq	r0, r0, ip, asr #29
		proceed receiving;
     320:	000000c0 	andeq	r0, r0, r0, asr #1
		ser_outf(response_3, "\r\n The record does not exists on node %d", response_message_5->sender_id);
     324:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     328:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     32c:	00000001 	andeq	r0, r0, r1
     330:	00000018 	andeq	r0, r0, r8, lsl r0
		proceed receiving;
     334:	0000018c 	andeq	r0, r0, ip, lsl #3
		ser_outf(response_4, "\r\n The record does not exist on node %d", response_message_5->sender_id);
     338:	00000f8c 	andeq	r0, r0, ip, lsl #31
     33c:	00000044 	andeq	r0, r0, r4, asr #32
     340:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     344:	86038504 	strhi	r8, [r3], -r4, lsl #10
		proceed receiving;
     348:	00018e02 	andeq	r8, r1, r2, lsl #28
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     34c:	0000001c 	andeq	r0, r0, ip, lsl r0
     350:	0000018c 	andeq	r0, r0, ip, lsl #3
		proceed receiving;
     354:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
     358:	0000003c 	andeq	r0, r0, ip, lsr r0
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     35c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
				DEBUG_PRINT("RECEIVED GID: %d\n", create_record_message->gid);
     360:	86048505 	strhi	r8, [r4], -r5, lsl #10
     364:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
				DEBUG_PRINT("RECEIVED TYPE: %d\n", create_record_message->tpe);
     368:	00000001 	andeq	r0, r0, r1
     36c:	00000018 	andeq	r0, r0, r8, lsl r0
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", create_record_message->request_number);
     370:	0000018c 	andeq	r0, r0, ip, lsl #3
     374:	0000100c 	andeq	r1, r0, ip
				DEBUG_PRINT("RECEIVED SID: %d\n", create_record_message->sender_id);
     378:	000000a4 	andeq	r0, r0, r4, lsr #1
     37c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				DEBUG_PRINT("RECEIVED RID: %d\n", create_record_message->receiver_id);
     380:	86038504 	strhi	r8, [r3], -r4, lsl #10
     384:	00018e02 	andeq	r8, r1, r2, lsl #28
				DEBUG_PRINT("RECEIVED RECORD: %s\n", create_record_message->record);
     388:	00000030 	andeq	r0, r0, r0, lsr r0
     38c:	0000018c 	andeq	r0, r0, ip, lsl #3
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->id){
     390:	000010b0 	strheq	r1, [r0], -r0
     394:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     398:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     39c:	86078508 	strhi	r8, [r7], -r8, lsl #10
		strncpy(response_message->record, rec, 20);
     3a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     3a4:	8a038904 	bhi	e27bc <__ccfg+0xc2814>
					call sender(response_message_4, done_case);
     3a8:	02018e02 	andeq	r8, r1, #2, 28
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     3ac:	cace0aa2 	bgt	ff382e3c <_estack+0xdf37de3c>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3b0:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     3b4:	000ec4c5 	andeq	ip, lr, r5, asr #9
     3b8:	00000b42 	andeq	r0, r0, r2, asr #22
     3bc:	0000000c 	andeq	r0, r0, ip
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     3c0:	0000018c 	andeq	r0, r0, ip, lsl #3
					if (delete_record(node_db, delete_record_message->record_index)){
     3c4:	00001268 	andeq	r1, r0, r8, ror #4
     3c8:	00000024 	andeq	r0, r0, r4, lsr #32
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     3cc:	0000000c 	andeq	r0, r0, ip
     3d0:	0000018c 	andeq	r0, r0, ip, lsl #3
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	00000028 	andeq	r0, r0, r8, lsr #32
     3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e0:	0000018c 	andeq	r0, r0, ip, lsl #3
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     3e4:	0000128c 	andeq	r1, r0, ip, lsl #5
     3e8:	00000258 	andeq	r0, r0, r8, asr r2
     3ec:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
    return node->data_base.item_array[index];
     3f0:	8e028b03 	vmlahi.f64	d8, d2, d3
     3f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     3f8:	00070d42 	andeq	r0, r7, r2, asr #26
     3fc:	00000014 	andeq	r0, r0, r4, lsl r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     400:	0000018c 	andeq	r0, r0, ip, lsl #3
    return node->data_base.item_array[index];
     404:	000014e4 	andeq	r1, r0, r4, ror #9
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     408:	00000030 	andeq	r0, r0, r0, lsr r0
     40c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     410:	00018e02 	andeq	r8, r1, r2, lsl #28
		strncpy(response_message->record, rec, 20);
     414:	00000018 	andeq	r0, r0, r8, lsl r0
     418:	0000018c 	andeq	r0, r0, ip, lsl #3
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     41c:	00000000 	andeq	r0, r0, r0
     420:	0000005c 	andeq	r0, r0, ip, asr r0
     424:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     428:	86038504 	strhi	r8, [r3], -r4, lsl #10
     42c:	00018e02 	andeq	r8, r1, r2, lsl #28
     430:	00000014 	andeq	r0, r0, r4, lsl r0
     434:	0000018c 	andeq	r0, r0, ip, lsl #3
				if(!response_flag){
     438:	00001514 	andeq	r1, r0, r4, lsl r5
     43c:	00000060 	andeq	r0, r0, r0, rrx
					response_flag=1;
     440:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					trigger(&response_flag);
     444:	00018e02 	andeq	r8, r1, r2, lsl #28
				switch(response_message_5->status){
     448:	0000000c 	andeq	r0, r0, ip
     44c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     450:	7c020001 	stcvc	0, cr0, [r2], {1}
     454:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     458:	00000018 	andeq	r0, r0, r8, lsl r0
     45c:	00000448 	andeq	r0, r0, r8, asr #8
     460:	00001574 	andeq	r1, r0, r4, ror r5
     464:	0000003c 	andeq	r0, r0, ip, lsr r0
     468:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     46c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     470:	00018e02 	andeq	r8, r1, r2, lsl #28
     474:	00000018 	andeq	r0, r0, r8, lsl r0
     478:	00000448 	andeq	r0, r0, r8, asr #8
     47c:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
     480:	00000080 	andeq	r0, r0, r0, lsl #1
     484:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     488:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     48c:	00000001 	andeq	r0, r0, r1
     490:	0000000c 	andeq	r0, r0, ip
     494:	00000448 	andeq	r0, r0, r8, asr #8
     498:	00001630 	andeq	r1, r0, r0, lsr r6
     49c:	00000018 	andeq	r0, r0, r8, lsl r0
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
     4a4:	00000448 	andeq	r0, r0, r8, asr #8
     4a8:	00000000 	andeq	r0, r0, r0
						if (response_checker[0] == response_message_5->request_number){
     4ac:	00000024 	andeq	r0, r0, r4, lsr #32
     4b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
							switch(response_checker[1]){
     4b8:	00000014 	andeq	r0, r0, r4, lsl r0
     4bc:	00000448 	andeq	r0, r0, r8, asr #8
     4c0:	00001648 	andeq	r1, r0, r8, asr #12
     4c4:	00000010 	andeq	r0, r0, r0, lsl r0
									proceed response_1_create;
     4c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
						proceed response_2;
     4cc:	00018e02 	andeq	r8, r1, r2, lsl #28
									proceed response_1_delete;
     4d0:	00000014 	andeq	r0, r0, r4, lsl r0
									proceed response_1_retrieve;
     4d4:	00000448 	andeq	r0, r0, r8, asr #8
						proceed response_2;
     4d8:	00001658 	andeq	r1, r0, r8, asr r6
						proceed response_3;
     4dc:	0000002c 	andeq	r0, r0, ip, lsr #32
						proceed response_4;
     4e0:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", tpe);
     4e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4e8:	00000014 	andeq	r0, r0, r4, lsl r0
}
     4ec:	00000448 	andeq	r0, r0, r8, asr #8
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	0000004c 	andeq	r0, r0, ip, asr #32
     4f8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
bool delete_all(struct Node *node){
     4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     500:	0000000c 	andeq	r0, r0, ip
        for(int i = 0; i <= node->data_base.item_count; i++){
     504:	00000448 	andeq	r0, r0, r8, asr #8
            node->data_base.item_array[i].data_entry[0] = '\0';
     508:	00001684 	andeq	r1, r0, r4, lsl #13
        for(int i = 0; i <= node->data_base.item_count; i++){
     50c:	00000006 	andeq	r0, r0, r6
            node->data_base.item_array[i].timestamp = 0;
     510:	00000028 	andeq	r0, r0, r8, lsr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
     514:	00000448 	andeq	r0, r0, r8, asr #8
    node->data_base.item_count = 0;
     518:	0000168c 	andeq	r1, r0, ip, lsl #13
}
     51c:	000000cc 	andeq	r0, r0, ip, asr #1
        return true;
     520:	83180e41 	tsthi	r8, #1040	; 0x410
fsm root {
     524:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     528:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     52c:	02018e02 	andeq	r8, r1, #2, 28
     530:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     534:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     538:	0b42000e 	bleq	1080578 <__ccfg+0x10605d0>
     53c:	00000014 	andeq	r0, r0, r4, lsl r0
     540:	00000448 	andeq	r0, r0, r8, asr #8
     544:	00001758 	andeq	r1, r0, r8, asr r7
     548:	00000014 	andeq	r0, r0, r4, lsl r0
     54c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     550:	00018e02 	andeq	r8, r1, r2, lsl #28
     554:	00000014 	andeq	r0, r0, r4, lsl r0
     558:	00000448 	andeq	r0, r0, r8, asr #8
     55c:	0000176c 	andeq	r1, r0, ip, ror #14
     560:	00000034 	andeq	r0, r0, r4, lsr r0
     564:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     568:	00018e02 	andeq	r8, r1, r2, lsl #28
     56c:	00000018 	andeq	r0, r0, r8, lsl r0
     570:	00000448 	andeq	r0, r0, r8, asr #8
     574:	000017a0 	andeq	r1, r0, r0, lsr #15
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     578:	00000034 	andeq	r0, r0, r4, lsr r0
     57c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     580:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		init_node(node_db);
     584:	00000001 	andeq	r0, r0, r1
		phys_cc1350(0, MAX_PKT_LEN);
     588:	00000018 	andeq	r0, r0, r8, lsl r0
     58c:	00000448 	andeq	r0, r0, r8, asr #8
		tcv_plug (0, &plug_null);
     590:	00000000 	andeq	r0, r0, r0
     594:	0000002c 	andeq	r0, r0, ip, lsr #32
		sfd = tcv_open (WNONE, 0, 0);
     598:	83100e41 	tsthi	r0, #1040	; 0x410
     59c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5a4:	00000014 	andeq	r0, r0, r4, lsl r0
     5a8:	00000448 	andeq	r0, r0, r8, asr #8
			diag("Cannot open tcv interface");
     5ac:	000017d4 	ldrdeq	r1, [r0], -r4
     5b0:	00000024 	andeq	r0, r0, r4, lsr #32
			halt();
     5b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		tcv_control(sfd, PHYSOPT_ON, NULL);
     5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5bc:	00000018 	andeq	r0, r0, r8, lsl r0
		runfsm receiver(node_db);
     5c0:	00000448 	andeq	r0, r0, r8, asr #8
     5c4:	000017f8 	strdeq	r1, [r0], -r8
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     5c8:	00000038 	andeq	r0, r0, r8, lsr r0
     5cc:	83100e41 	tsthi	r0, #1040	; 0x410
     5d0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5d8:	0000000c 	andeq	r0, r0, ip
     5dc:	00000448 	andeq	r0, r0, r8, asr #8
		ser_inf(get_choice, "%c", &CHOICE);
     5e0:	00000000 	andeq	r0, r0, r0
     5e4:	00000014 	andeq	r0, r0, r4, lsl r0
     5e8:	00000014 	andeq	r0, r0, r4, lsl r0
		switch(CHOICE) {
     5ec:	00000448 	andeq	r0, r0, r8, asr #8
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	00000040 	andeq	r0, r0, r0, asr #32
     5f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     600:	00000014 	andeq	r0, r0, r4, lsl r0
     604:	00000448 	andeq	r0, r0, r8, asr #8
     608:	00000000 	andeq	r0, r0, r0
     60c:	00000018 	andeq	r0, r0, r8, lsl r0
     610:	83080e41 	movwhi	r0, #36417	; 0x8e41
     614:	00018e02 	andeq	r8, r1, r2, lsl #28
     618:	0000000c 	andeq	r0, r0, ip
				proceed menu;
     61c:	00000448 	andeq	r0, r0, r8, asr #8
     620:	00001830 	andeq	r1, r0, r0, lsr r8
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     624:	00000024 	andeq	r0, r0, r4, lsr #32
     628:	0000000c 	andeq	r0, r0, ip
		ser_inf(new_group_id, "%s", NEW_NODE_GID); // NOTE: is this syntax correct?
     62c:	00000448 	andeq	r0, r0, r8, asr #8
     630:	00000000 	andeq	r0, r0, r0
     634:	00000020 	andeq	r0, r0, r0, lsr #32
		DEBUG_PRINT("setting node group ID");
     638:	0000000c 	andeq	r0, r0, ip
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     63c:	00000448 	andeq	r0, r0, r8, asr #8
     640:	00001854 	andeq	r1, r0, r4, asr r8
		proceed menu;
     644:	0000000e 	andeq	r0, r0, lr
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     648:	0000000c 	andeq	r0, r0, ip
     64c:	00000448 	andeq	r0, r0, r8, asr #8
		if(node_db->id < 1 || node_db->id > 25){
     650:	00001862 	andeq	r1, r0, r2, ror #16
		ser_inf(new_node_id, "%u", (unsigned int) NEW_NODE_ID);
     654:	00000010 	andeq	r0, r0, r0, lsl r0
     658:	0000000c 	andeq	r0, r0, ip
		if(node_db->id < 1 || node_db->id > 25){
     65c:	00000448 	andeq	r0, r0, r8, asr #8
     660:	00001872 	andeq	r1, r0, r2, ror r8
     664:	0000001c 	andeq	r0, r0, ip, lsl r0
			strncpy(reason, "Out of Range", 50);
     668:	0000000c 	andeq	r0, r0, ip
     66c:	00000448 	andeq	r0, r0, r8, asr #8
			proceed invalid_node_id;
     670:	00000000 	andeq	r0, r0, r0
     674:	00000010 	andeq	r0, r0, r0, lsl r0
				strncpy(reason, "ID is already in use", 50);
     678:	0000000c 	andeq	r0, r0, ip
     67c:	00000448 	andeq	r0, r0, r8, asr #8
			if(node_db->id == node_db->nnodes[i]){
     680:	00000000 	andeq	r0, r0, r0
     684:	00000006 	andeq	r0, r0, r6
     688:	0000000c 	andeq	r0, r0, ip
				strncpy(reason, "ID is already in use", 50);
     68c:	00000448 	andeq	r0, r0, r8, asr #8
     690:	0000188e 	andeq	r1, r0, lr, lsl #17
     694:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed invalid_node_id;
     698:	0000000c 	andeq	r0, r0, ip
		for(int i = 0; i < 25; i++){
     69c:	00000448 	andeq	r0, r0, r8, asr #8
     6a0:	000018a2 	andeq	r1, r0, r2, lsr #17
		proceed menu;
     6a4:	0000000e 	andeq	r0, r0, lr
     6a8:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     6ac:	00000448 	andeq	r0, r0, r8, asr #8
     6b0:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     6b4:	00000024 	andeq	r0, r0, r4, lsr #32
     6b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
		proceed get_new_node_id;
     6bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c0:	00000020 	andeq	r0, r0, r0, lsr #32
		if (!clear_node_neighbour_array(node_db)){
     6c4:	00000448 	andeq	r0, r0, r8, asr #8
     6c8:	000018d4 	ldrdeq	r1, [r0], -r4
			strncpy(reason, "Error Clearing Node Array", 50);
     6cc:	0000009c 	muleq	r0, ip, r0
     6d0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     6d4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
			proceed error;
     6d8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		request_packet = (struct DiscoveryRequestMessage*)umalloc(sizeof(struct DiscoveryRequestMessage));
     6dc:	89038804 	stmdbhi	r3, {r2, fp, pc}
     6e0:	00018e02 	andeq	r8, r1, r2, lsl #28
		request_packet->gid = node_db->gid;
     6e4:	00000014 	andeq	r0, r0, r4, lsl r0
     6e8:	00000448 	andeq	r0, r0, r8, asr #8
		request_packet->tpe = DISCOVERY_REQUEST;
     6ec:	00001970 	andeq	r1, r0, r0, ror r9
		request_packet->request_number = generate_request_num();
     6f0:	00000050 	andeq	r0, r0, r0, asr r0
     6f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
		call sender(request_packet, wait_discovery);
     6f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6fc:	00000014 	andeq	r0, r0, r4, lsl r0
		request_packet->receiver_id=0;
     700:	00000448 	andeq	r0, r0, r8, asr #8
		call sender(request_packet, wait_discovery);
     704:	000019c0 	andeq	r1, r0, r0, asr #19
     708:	00000048 	andeq	r0, r0, r8, asr #32
     70c:	83080e41 	movwhi	r0, #36417	; 0x8e41
			release;
     710:	00018e02 	andeq	r8, r1, r2, lsl #28
				proceed get_new_node_id;
     714:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed clear_neighbour_array;
     718:	00000448 	andeq	r0, r0, r8, asr #8
				proceed create_proto_start;
     71c:	00001a08 	andeq	r1, r0, r8, lsl #20
				proceed start_delete_proto;
     720:	00000050 	andeq	r0, r0, r0, asr r0
				proceed retrieve_proto;
     724:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				proceed display_db;
     728:	00018e02 	andeq	r8, r1, r2, lsl #28
				proceed del_local;
     72c:	00000020 	andeq	r0, r0, r0, lsr #32
		if (discovery_wait_flag == 0){
     730:	00000448 	andeq	r0, r0, r8, asr #8
			discovery_wait_flag=1;
     734:	00000000 	andeq	r0, r0, r0
     738:	00000058 	andeq	r0, r0, r8, asr r0
			delay(3000, find_proto_start);
     73c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     740:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		if (discovery_wait_flag == 1){
     744:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			discovery_wait_flag=0;
     748:	89038804 	stmdbhi	r3, {r2, fp, pc}
     74c:	00018e02 	andeq	r8, r1, r2, lsl #28
			delay(3000, display_neighbour_nodes);
     750:	00000018 	andeq	r0, r0, r8, lsl r0
     754:	00000448 	andeq	r0, r0, r8, asr #8
     758:	00001a58 	andeq	r1, r0, r8, asr sl
     75c:	000000a8 	andeq	r0, r0, r8, lsr #1
     760:	83100e44 	tsthi	r0, #68, 28	; 0x440
     764:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     768:	00018e02 	andeq	r8, r1, r2, lsl #28
     76c:	00000018 	andeq	r0, r0, r8, lsl r0
     770:	00000448 	andeq	r0, r0, r8, asr #8
     774:	00001b00 	andeq	r1, r0, r0, lsl #22
     778:	00000034 	andeq	r0, r0, r4, lsr r0
     77c:	83100e41 	tsthi	r0, #1040	; 0x410
     780:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     784:	00018e02 	andeq	r8, r1, r2, lsl #28
     788:	0000000c 	andeq	r0, r0, ip
     78c:	00000448 	andeq	r0, r0, r8, asr #8
     790:	00001b34 	andeq	r1, r0, r4, lsr fp
     794:	00000018 	andeq	r0, r0, r8, lsl r0
     798:	00000014 	andeq	r0, r0, r4, lsl r0
     79c:	00000448 	andeq	r0, r0, r8, asr #8
		ser_out(display_neighbour_nodes, "\r\n Neighbors: ");
     7a0:	00000000 	andeq	r0, r0, r0
     7a4:	00000030 	andeq	r0, r0, r0, lsr r0
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     7a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     7ac:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (node_db->nnodes[i]=='\0') break;
     7b0:	00000014 	andeq	r0, r0, r4, lsl r0
     7b4:	00000448 	andeq	r0, r0, r8, asr #8
     7b8:	00000000 	andeq	r0, r0, r0
		proceed menu;
     7bc:	00000038 	andeq	r0, r0, r8, lsr r0
     7c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     7c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7c8:	00000040 	andeq	r0, r0, r0, asr #32
		ser_in(get_id_for_create, "%d", user_provided_receiver_id);
     7cc:	00000448 	andeq	r0, r0, r8, asr #8
     7d0:	00001b4c 	andeq	r1, r0, ip, asr #22
			strncpy(reason, "Error: improper ID", 50);
     7d4:	0000013c 	andeq	r0, r0, ip, lsr r1
     7d8:	80100e41 	andshi	r0, r0, r1, asr #28
     7dc:	82038104 	andhi	r8, r3, #4, 2
			proceed error;
     7e0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     7e4:	0b84380e 	bleq	fe10e824 <_estack+0xde109824>
     7e8:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
		ser_in(get_record_to_create, user_provided_record, 20);
     7ec:	07880887 	streq	r0, [r8, r7, lsl #17]
     7f0:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     7f4:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     7f8:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
		create_message->tpe = CREATE_RECORD;
     7fc:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
		create_message = (struct CreateRecordMessage*)umalloc(sizeof(struct CreateRecordMessage));
     800:	c341100e 	movtgt	r1, #4110	; 0x100e
		create_message->gid = node_db->gid;
     804:	0ec0c1c2 	acseqdm	f4, f2
		create_message->tpe = CREATE_RECORD;
     808:	000b4100 	andeq	r4, fp, r0, lsl #2
		create_message->request_number = generate_request_num();
     80c:	0000000c 	andeq	r0, r0, ip
     810:	00000448 	andeq	r0, r0, r8, asr #8
		create_message->sender_id = node_db->id;
     814:	00001c88 	andeq	r1, r0, r8, lsl #25
     818:	00000024 	andeq	r0, r0, r4, lsr #32
     81c:	0000000c 	andeq	r0, r0, ip
		strncpy(create_message->record, user_provided_record, 20);
     820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     824:	7c020001 	stcvc	0, cr0, [r2], {1}
     828:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		response_checker[0] = create_message->request_number;
     82c:	00000014 	andeq	r0, r0, r4, lsl r0
		call sender(&create_message, wait);
     830:	0000081c 	andeq	r0, r0, ip, lsl r8
		response_checker[1] = create_message->tpe;
     834:	00001cac 	andeq	r1, r0, ip, lsr #25
     838:	00000016 	andeq	r0, r0, r6, lsl r0
		call sender(&create_message, wait);
     83c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     840:	00018e02 	andeq	r8, r1, r2, lsl #28
     844:	0000000c 	andeq	r0, r0, ip
     848:	0000081c 	andeq	r0, r0, ip, lsl r8
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     84c:	00001cc2 	andeq	r1, r0, r2, asr #25
     850:	0000001a 	andeq	r0, r0, sl, lsl r0
		ser_inf(get_id_for_delete, "%d", user_provided_receiver_id);
     854:	00000018 	andeq	r0, r0, r8, lsl r0
     858:	0000081c 	andeq	r0, r0, ip, lsl r8
			strncpy(reason, "Error: improper node ID", 50);
     85c:	00001cdc 	ldrdeq	r1, [r0], -ip
     860:	0000000e 	andeq	r0, r0, lr
     864:	83080e41 	movwhi	r0, #36417	; 0x8e41
			proceed error;
     868:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     86c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     870:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(get_index_for_delete, "%d", user_provided_index);
     874:	0000081c 	andeq	r0, r0, ip, lsl r8
     878:	00001cec 	andeq	r1, r0, ip, ror #25
     87c:	0000004c 	andeq	r0, r0, ip, asr #32
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     880:	83100e41 	tsthi	r0, #1040	; 0x410
		delete_record->tpe = DELETE_RECORD;
     884:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		delete_record = (struct DeleteRecordMessage *)umalloc(sizeof(struct DeleteRecordMessage));
     888:	00018e02 	andeq	r8, r1, r2, lsl #28
		delete_record->gid = node_db->gid;
     88c:	00000020 	andeq	r0, r0, r0, lsr #32
		delete_record->tpe = DELETE_RECORD;
     890:	0000081c 	andeq	r0, r0, ip, lsl r8
		delete_record->request_number = generate_request_num();
     894:	00001d38 	andeq	r1, r0, r8, lsr sp
     898:	0000008c 	andeq	r0, r0, ip, lsl #1
		delete_record->sender_id = node_db->id;
     89c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8a0:	5f018e02 	svcpl	0x00018e02
     8a4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		delete_record->receiver_id = user_provided_receiver_id;
     8a8:	560b4200 	strpl	r4, [fp], -r0, lsl #4
		response_checker[0] = delete_record->request_number;
     8ac:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8b0:	00000020 	andeq	r0, r0, r0, lsr #32
		call sender(&delete_record, wait);
     8b4:	0000081c 	andeq	r0, r0, ip, lsl r8
     8b8:	00001dc4 	andeq	r1, r0, r4, asr #27
     8bc:	00000070 	andeq	r0, r0, r0, ror r0
     8c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8c4:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     8c8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8cc:	430b4200 	movwmi	r4, #45568	; 0xb200
		ser_inf(get_id_for_retrieve, "%d", user_provided_receiver_id);
     8d0:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     8d8:	0000081c 	andeq	r0, r0, ip, lsl r8
			strncpy(reason, "Error: improper node ID", 50);
     8dc:	00001e34 	andeq	r1, r0, r4, lsr lr
     8e0:	000000c0 	andeq	r0, r0, r0, asr #1
			proceed error;
     8e4:	82080e41 	andhi	r0, r8, #1040	; 0x410
     8e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     8ec:	0a84300e 	beq	fe10c92c <_estack+0xde10792c>
     8f0:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
		ser_inf(get_index_for_retrieve, "%d", user_provided_index);
     8f4:	06880787 	streq	r0, [r8], r7, lsl #15
     8f8:	048a0589 	streq	r0, [sl], #1417	; 0x589
		retrieve_record = (struct RetrieveRecordMessage *)umalloc(sizeof(struct RetrieveRecordMessage));
     8fc:	0a6b038e 	beq	1ac173c <__ccfg+0x1aa1794>
     900:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
		retrieve_record->gid = node_db->gid;
     904:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     908:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     90c:	c2c34108 	sbcgt	r4, r3, #8, 2
		retrieve_record->tpe = RETRIEVE_RECORD;
     910:	0b41000e 	bleq	1040950 <__ccfg+0x10209a8>
		retrieve_record->request_number = generate_request_num();
     914:	0000001c 	andeq	r0, r0, ip, lsl r0
     918:	0000081c 	andeq	r0, r0, ip, lsl r8
		retrieve_record->sender_id = node_db->id;
     91c:	00000000 	andeq	r0, r0, r0
		response_checker[0] = retrieve_record->request_number;
     920:	0000006c 	andeq	r0, r0, ip, rrx
		retrieve_record->receiver_id = user_provided_receiver_id;
     924:	83180e42 	tsthi	r8, #1056	; 0x420
		retrieve_record->record_index = user_provided_index;
     928:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		call sender(&retrieve_record, wait);
     92c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		response_checker[1] = retrieve_record->tpe;
     930:	00018e02 	andeq	r8, r1, r2, lsl #28
     934:	0000000c 	andeq	r0, r0, ip
		call sender(&retrieve_record, wait);
     938:	0000081c 	andeq	r0, r0, ip, lsl r8
     93c:	00001ef4 	strdeq	r1, [r0], -r4
     940:	00000024 	andeq	r0, r0, r4, lsr #32
     944:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     948:	0000081c 	andeq	r0, r0, ip, lsl r8
     94c:	00001f18 	andeq	r1, r0, r8, lsl pc
		if(node_db->data_base.item_count != 0){
     950:	00000080 	andeq	r0, r0, r0, lsl #1
     954:	83100e42 	tsthi	r0, #1056	; 0x420
		proceed menu;
     958:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     95c:	00018e02 	andeq	r8, r1, r2, lsl #28
		delete_all(node_db);
     960:	00000014 	andeq	r0, r0, r4, lsl r0
     964:	0000081c 	andeq	r0, r0, ip, lsl r8
		proceed menu;
     968:	00000000 	andeq	r0, r0, r0
		delay(3000, timeout);
     96c:	00000070 	andeq	r0, r0, r0, ror r0
     970:	83080e42 	movwhi	r0, #36418	; 0x8e42
     974:	00018e02 	andeq	r8, r1, r2, lsl #28
		when(&response_flag, menu);
     978:	00000018 	andeq	r0, r0, r8, lsl r0
     97c:	0000081c 	andeq	r0, r0, ip, lsl r8
			ser_outf(display_neighbour_nodes, "%u, ", (unsigned int) node_db->nnodes[i]);
     980:	00000000 	andeq	r0, r0, r0
     984:	00000078 	andeq	r0, r0, r8, ror r0
		for (int i=0; i<=NNODE_GROUP_SIZE; i++){
     988:	83100e42 	tsthi	r0, #1056	; 0x420
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     98c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     990:	00018e02 	andeq	r8, r1, r2, lsl #28
     994:	00000020 	andeq	r0, r0, r0, lsr #32
     998:	0000081c 	andeq	r0, r0, ip, lsl r8
     99c:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     9a0:	000000bc 	strheq	r0, [r0], -ip
     9a4:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     9a8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     9ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     9b0:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     9b4:	000b4114 	andeq	r4, fp, r4, lsl r1
				ser_outf(loop_through_data, "\r\n%d\t%d\t\t\t%d\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     9b8:	00000018 	andeq	r0, r0, r8, lsl r0
     9bc:	0000081c 	andeq	r0, r0, ip, lsl r8
		ser_out(timeout, "\r\nFailed to reach the destination");
     9c0:	00002054 	andeq	r2, r0, r4, asr r0
     9c4:	0000003a 	andeq	r0, r0, sl, lsr r0
		proceed menu;
     9c8:	83100e41 	tsthi	r0, #1040	; 0x410
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     9cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     9d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d4:	00000018 	andeq	r0, r0, r8, lsl r0
		proceed menu;
     9d8:	0000081c 	andeq	r0, r0, ip, lsl r8
}
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	00000038 	andeq	r0, r0, r8, lsr r0
     9e4:	83100e41 	tsthi	r0, #1040	; 0x410
     9e8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     9ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     9f0:	0000000c 	andeq	r0, r0, ip
     9f4:	0000081c 	andeq	r0, r0, ip, lsl r8
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	0000000a 	andeq	r0, r0, sl
     a00:	00000018 	andeq	r0, r0, r8, lsl r0
     a04:	0000081c 	andeq	r0, r0, ip, lsl r8
     a08:	00002090 	muleq	r0, r0, r0
     a0c:	0000002c 	andeq	r0, r0, ip, lsr #32
     a10:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     a14:	4c018e02 	stcmi	14, cr8, [r1], {2}
     a18:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a20:	0000081c 	andeq	r0, r0, ip, lsl r8
     a24:	000020bc 	strheq	r2, [r0], -ip
     a28:	00000060 	andeq	r0, r0, r0, rrx
     a2c:	83080e41 	movwhi	r0, #36417	; 0x8e41
static void devinit_uart (int devnum) {
     a30:	61018e02 	tstvs	r1, r2, lsl #28
	adddevfunc (ioreq_uart_a, devnum);
     a34:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     a38:	000b4300 	andeq	r4, fp, r0, lsl #6
void udelay (volatile word n) {
     a3c:	00000014 	andeq	r0, r0, r4, lsl r0
     a40:	0000081c 	andeq	r0, r0, ip, lsl r8
	while (n) {
     a44:	00000000 	andeq	r0, r0, r0
     a48:	00000040 	andeq	r0, r0, r0, asr #32
}
     a4c:	83080e42 	movwhi	r0, #36418	; 0x8e42
	while (n--);
     a50:	00018e02 	andeq	r8, r1, r2, lsl #28
     a54:	00000014 	andeq	r0, r0, r4, lsl r0
     a58:	0000081c 	andeq	r0, r0, ip, lsl r8
		n--;
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	0000002c 	andeq	r0, r0, ip, lsr #32
     a64:	83080e42 	movwhi	r0, #36418	; 0x8e42
void mdelay (volatile word n) {
     a68:	00018e02 	andeq	r8, r1, r2, lsl #28
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (n) {
     a70:	0000081c 	andeq	r0, r0, ip, lsl r8
     a74:	00000000 	andeq	r0, r0, r0
}
     a78:	0000003c 	andeq	r0, r0, ip, lsr r0
		udelay (999);
     a7c:	83180e41 	tsthi	r8, #1040	; 0x410
     a80:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		n--;
     a84:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a88:	00018e02 	andeq	r8, r1, r2, lsl #28
     a8c:	0000000c 	andeq	r0, r0, ip
     a90:	0000081c 	andeq	r0, r0, ip, lsl r8
void __pi_ondomain (lword d) {
     a94:	00000000 	andeq	r0, r0, r0
     a98:	00000006 	andeq	r0, r0, r6
		if (__pi_systat.effpdm > 1)
     a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     aa0:	0000081c 	andeq	r0, r0, ip, lsl r8
			__pi_systat.effpdm = 1;
     aa4:	0000211c 	andeq	r2, r0, ip, lsl r1
	PRCMPowerDomainOn (d);
     aa8:	00000068 	andeq	r0, r0, r8, rrx
     aac:	83180e41 	tsthi	r8, #1040	; 0x410
     ab0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     ab4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     ab8:	00018e02 	andeq	r8, r1, r2, lsl #28
     abc:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_systat.ondmns |= d;
     ac0:	0000081c 	andeq	r0, r0, ip, lsl r8
     ac4:	00002184 	andeq	r2, r0, r4, lsl #3
}
     ac8:	00000050 	andeq	r0, r0, r0, asr r0
     acc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
void __pi_offdomain (lword d) {
     ad0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ad4:	0000002c 	andeq	r0, r0, ip, lsr #32
	PRCMPowerDomainOff (d);
     ad8:	0000081c 	andeq	r0, r0, ip, lsl r8
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     adc:	000021d4 	ldrdeq	r2, [r0], -r4
     ae0:	0000009c 	muleq	r0, ip, r0
     ae4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
	if (d & PRCM_DOMAIN_RFCORE) {
     ae8:	86088509 	strhi	r8, [r8], -r9, lsl #10
     aec:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     af0:	8a048905 	bhi	122f0c <__ccfg+0x102f64>
     af4:	8e028b03 	vmlahi.f64	d8, d2, d3
			__pi_systat.effpdm = __pi_systat.reqpdm;
     af8:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     afc:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
	__pi_systat.ondmns &= ~d;
     b00:	00000b42 	andeq	r0, r0, r2, asr #22
     b04:	00000014 	andeq	r0, r0, r4, lsl r0
}
     b08:	0000081c 	andeq	r0, r0, ip, lsl r8
     b0c:	00002270 	andeq	r2, r0, r0, ror r2
void __pi_syserror (word ec, const char *m) {
     b10:	00000040 	andeq	r0, r0, r0, asr #32
	diag ("SYSERR: %x, %s", ec, m);
     b14:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b18:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     b1c:	00000014 	andeq	r0, r0, r4, lsl r0
     b20:	0000081c 	andeq	r0, r0, ip, lsl r8
     b24:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
     b28:	00000034 	andeq	r0, r0, r4, lsr r0
		all_leds_blink;
     b2c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b30:	00018e02 	andeq	r8, r1, r2, lsl #28
     b34:	00000018 	andeq	r0, r0, r8, lsl r0
     b38:	0000081c 	andeq	r0, r0, ip, lsl r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b3c:	000022e4 	andeq	r2, r0, r4, ror #5
     b40:	0000003c 	andeq	r0, r0, ip, lsr r0
     b44:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b48:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     b4c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b50:	00000018 	andeq	r0, r0, r8, lsl r0
	while (1) {
     b54:	0000081c 	andeq	r0, r0, ip, lsl r8
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	0000003c 	andeq	r0, r0, ip, lsr r0
     b60:	83100e42 	tsthi	r0, #1056	; 0x420
void tci_run_delay_timer () {
     b64:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	setdel = __pi_mintk - __pi_old;
     b68:	00018e02 	andeq	r8, r1, r2, lsl #28
     b6c:	0000000c 	andeq	r0, r0, ip
     b70:	0000081c 	andeq	r0, r0, ip, lsl r8
     b74:	00002320 	andeq	r2, r0, r0, lsr #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     b78:	00000002 	andeq	r0, r0, r2
     b7c:	0000000c 	andeq	r0, r0, ip
     b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b84:	7c020001 	stcvc	0, cr0, [r2], {1}
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     b88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	sti_tim;
     b8c:	0000000c 	andeq	r0, r0, ip
}
     b90:	00000b7c 	andeq	r0, r0, ip, ror fp
     b94:	00002322 	andeq	r2, r0, r2, lsr #6
     b98:	00000002 	andeq	r0, r0, r2
     b9c:	0000000c 	andeq	r0, r0, ip
     ba0:	00000b7c 	andeq	r0, r0, ip, ror fp
	cli_aux;
     ba4:	00002324 	andeq	r2, r0, r4, lsr #6
     ba8:	00000002 	andeq	r0, r0, r2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     bac:	0000000c 	andeq	r0, r0, ip
     bb0:	00000b7c 	andeq	r0, r0, ip, ror fp
     bb4:	00002326 	andeq	r2, r0, r6, lsr #6
     bb8:	00000002 	andeq	r0, r0, r2
	sti_aux;
     bbc:	00000014 	andeq	r0, r0, r4, lsl r0
}
     bc0:	00000b7c 	andeq	r0, r0, ip, ror fp
     bc4:	00002328 	andeq	r2, r0, r8, lsr #6
     bc8:	00000044 	andeq	r0, r0, r4, asr #32
void AONRTCIntHandler () {
     bcc:	83080e41 	movwhi	r0, #36417	; 0x8e41
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd4:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     bd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (__pi_utims [0] == 0)
     bdc:	7c020001 	stcvc	0, cr0, [r2], {1}
     be0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		if (*(__pi_utims [0])) {
     be4:	0000000c 	andeq	r0, r0, ip
     be8:	00000bd4 	ldrdeq	r0, [r0], -r4
			(*(__pi_utims [0]))--;
     bec:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
     bf0:	00000002 	andeq	r0, r0, r2
		if (*(__pi_utims [1])) {
     bf4:	00000018 	andeq	r0, r0, r8, lsl r0
			aux_timer_inactive = 0;
     bf8:	00000bd4 	ldrdeq	r0, [r0], -r4
			(*(__pi_utims [1]))--;
     bfc:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     c00:	00000058 	andeq	r0, r0, r8, asr r0
		if (*(__pi_utims [2])) {
     c04:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			(*(__pi_utims [2]))--;
     c08:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (__pi_utims [3] != 0) {
     c0c:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (*(__pi_utims [3])) {
     c10:	0000000c 	andeq	r0, r0, ip
				aux_timer_inactive = 0;
     c14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				(*(__pi_utims [3]))--;
     c18:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (__pi_systat.ledsts) {
     c1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c20:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (__pi_systat.ledblc++ == 0) {
     c24:	00000c10 	andeq	r0, r0, r0, lsl ip
     c28:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.ledblk) {
     c2c:	000000cc 	andeq	r0, r0, ip, asr #1
     c30:	83100e42 	tsthi	r0, #1056	; 0x420
     c34:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     c38:	02018e02 	andeq	r8, r1, #2, 28
     c3c:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
				if (__pi_systat.ledsts & 0x2)
     c40:	000ec3c4 	andeq	ip, lr, r4, asr #7
     c44:	ce420b44 	vmlsgt.f64	d16, d2, d4
     c48:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
				if (__pi_systat.ledsts & 0x4)
     c4c:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 0;
     c50:	00000024 	andeq	r0, r0, r4, lsr #32
     c54:	00000c10 	andeq	r0, r0, r0, lsl ip
			if (__pi_systat.fstblk)
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	00000038 	andeq	r0, r0, r8, lsr r0
				__pi_systat.ledblc = 200;
     c60:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	if (events & AON_RTC_EVFLAGS_CH0) {
     c64:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
		cli_tim;
     c68:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		__pi_new += setdel;
     c6c:	4a0b4300 	bmi	2d1874 <__ccfg+0x2b18cc>
     c70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		setdel = 0;
     c74:	000b4300 	andeq	r4, fp, r0, lsl #6
		RISE_N_SHINE;
     c78:	0000000c 	andeq	r0, r0, ip
		__pi_new += setdel;
     c7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		RISE_N_SHINE;
     c80:	7c020001 	stcvc	0, cr0, [r2], {1}
     c84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		aux_timer_inactive = 1;
     c88:	00000018 	andeq	r0, r0, r8, lsl r0
     c8c:	00000c78 	andeq	r0, r0, r8, ror ip
				if (__pi_systat.ledsts & 0x1)
     c90:	00002374 	andeq	r2, r0, r4, ror r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     c94:	00000034 	andeq	r0, r0, r4, lsr r0
     c98:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
				if (__pi_systat.ledsts & 0x2)
     c9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ca0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ca4:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x8)
     ca8:	00000c78 	andeq	r0, r0, r8, ror ip
				__pi_systat.ledblk = 1;
     cac:	000023a8 	andeq	r2, r0, r8, lsr #7
     cb0:	00000030 	andeq	r0, r0, r0, lsr r0
		if (aux_timer_inactive) {
     cb4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			cli_aux;
     cb8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     cbc:	00000001 	andeq	r0, r0, r1
     cc0:	00000014 	andeq	r0, r0, r4, lsl r0
     cc4:	00000c78 	andeq	r0, r0, r8, ror ip
     cc8:	000023d8 	ldrdeq	r2, [r0], -r8
     ccc:	00000018 	andeq	r0, r0, r8, lsl r0
     cd0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     cd4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cdc:	00000c78 	andeq	r0, r0, r8, ror ip
word tci_update_delay_ticks (Boolean force) {
     ce0:	000023f0 	strdeq	r2, [r0], -r0
	cli_tim;
     ce4:	00000054 	andeq	r0, r0, r4, asr r0
     ce8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
	if (setdel) {
     cec:	86058506 	strhi	r8, [r5], -r6, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     cf0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     cf4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cfc:	00000c78 	andeq	r0, r0, r8, ror ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d00:	00002444 	andeq	r2, r0, r4, asr #8
				AON_RTC_O_CH0CMP)) - gettav ());
     d04:	00000040 	andeq	r0, r0, r0, asr #32
	return NO;
     d08:	83180e41 	tsthi	r8, #1040	; 0x410
			setdel = 0;
     d0c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     d10:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d14:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     d18:	00000014 	andeq	r0, r0, r4, lsl r0
		sti_tim;
     d1c:	00000c78 	andeq	r0, r0, r8, ror ip
		return YES;
     d20:	00002484 	andeq	r2, r0, r4, lsl #9
     d24:	00000024 	andeq	r0, r0, r4, lsr #32
     d28:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d2c:	00018e02 	andeq	r8, r1, r2, lsl #28
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d30:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTDisable (UART0_BASE);
     d34:	00000c78 	andeq	r0, r0, r8, ror ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     d38:	000024a8 	andeq	r2, r0, r8, lsr #9
	UARTDisable (UART0_BASE);
     d3c:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTConfigSetExpClk (UART0_BASE,
     d40:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d44:	00018e02 	andeq	r8, r1, r2, lsl #28
     d48:	0000000c 	andeq	r0, r0, ip
     d4c:	00000c78 	andeq	r0, r0, r8, ror ip
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d50:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
     d54:	00000014 	andeq	r0, r0, r4, lsl r0
     d58:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     d5c:	00000c78 	andeq	r0, r0, r8, ror ip
     d60:	00000000 	andeq	r0, r0, r0
     d64:	00000064 	andeq	r0, r0, r4, rrx
	urates [0] = rate;
     d68:	83180e41 	tsthi	r8, #1040	; 0x410
}
     d6c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d70:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d74:	00018e02 	andeq	r8, r1, r2, lsl #28
     d78:	0000001c 	andeq	r0, r0, ip, lsl r0
     d7c:	00000c78 	andeq	r0, r0, r8, ror ip
     d80:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     d84:	00000128 	andeq	r0, r0, r8, lsr #2
     d88:	83180e41 	tsthi	r8, #1040	; 0x410
     d8c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     d90:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d94:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     d98:	00000024 	andeq	r0, r0, r4, lsr #32
     d9c:	00000c78 	andeq	r0, r0, r8, ror ip
	__pi_uart_setrate (urates [0], __pi_uart);
     da0:	00000000 	andeq	r0, r0, r0
     da4:	000000ec 	andeq	r0, r0, ip, ror #1
     da8:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     dac:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     db0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     db4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     db8:	8b038a04 	blhi	e35d0 <__ccfg+0xc3628>
	switch (operation) {
     dbc:	00018e02 	andeq	r8, r1, r2, lsl #28
static int ioreq_uart_a (int operation, char *buf, int len) {
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	00000c78 	andeq	r0, r0, r8, ror ip
     dc8:	00000000 	andeq	r0, r0, r0
     dcc:	00000002 	andeq	r0, r0, r2
     dd0:	0000000c 	andeq	r0, r0, ip
				*buf++ = uart_a_read;
     dd4:	00000c78 	andeq	r0, r0, r8, ror ip
     dd8:	00000000 	andeq	r0, r0, r0
			while (len && uart_a_char_available) {
     ddc:	00000004 	andeq	r0, r0, r4
     de0:	0000000c 	andeq	r0, r0, ip
     de4:	00000c78 	andeq	r0, r0, r8, ror ip
			if (len != operation) {
     de8:	00000000 	andeq	r0, r0, r0
}
     dec:	00000014 	andeq	r0, r0, r4, lsl r0
     df0:	00000018 	andeq	r0, r0, r8, lsl r0
			uart_a_disable_int;
     df4:	00000c78 	andeq	r0, r0, r8, ror ip
			if (uart_a_char_available) {
     df8:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     dfc:	0000001a 	andeq	r0, r0, sl, lsl r0
			uart_a_disable_int;
     e00:	83080e41 	movwhi	r0, #36417	; 0x8e41
     e04:	4a018e02 	bmi	64614 <__ccfg+0x4466c>
			if (uart_a_char_available) {
     e08:	000ec3ce 	andeq	ip, lr, lr, asr #7
     e0c:	0000000c 	andeq	r0, r0, ip
				uart_a_enable_int;
     e10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e14:	7c020001 	stcvc	0, cr0, [r2], {1}
				goto Redo_rx;
     e18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     e1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e20:	00000e0c 	andeq	r0, r0, ip, lsl #28
			return -2;
     e24:	000024d0 	ldrdeq	r2, [r0], -r0
     e28:	0000006c 	andeq	r0, r0, ip, rrx
				uart_a_write (*buf);
     e2c:	83180e41 	tsthi	r8, #1040	; 0x410
     e30:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			while (len && uart_a_room_in_tx) {
     e34:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e38:	00018e02 	andeq	r8, r1, r2, lsl #28
     e3c:	0000000c 	andeq	r0, r0, ip
			if (len != operation) {
     e40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			uart_a_disable_int;
     e44:	7c020001 	stcvc	0, cr0, [r2], {1}
     e48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			if (uart_a_room_in_tx) {
     e4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e50:	00000e3c 	andeq	r0, r0, ip, lsr lr
				uart_a_enable_int;
     e54:	0000253c 	andeq	r2, r0, ip, lsr r5
     e58:	00000078 	andeq	r0, r0, r8, ror r0
				*buf++ = uart_a_read;
     e5c:	83180e41 	tsthi	r8, #1040	; 0x410
			if (uart_a_room_in_tx) {
     e60:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
				uart_a_write (*buf);
     e64:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e68:	00018e02 	andeq	r8, r1, r2, lsl #28
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     e6c:	0000000c 	andeq	r0, r0, ip
     e70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			uart_a_enable_int;
     e74:	7c020001 	stcvc	0, cr0, [r2], {1}
     e78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e7c:	00000030 	andeq	r0, r0, r0, lsr r0
			return 0;
     e80:	00000e6c 	andeq	r0, r0, ip, ror #28
			if (len == UART_CNTRL_SETRATE) {
     e84:	000025b4 			; <UNDEFINED> instruction: 0x000025b4
				if (__pi_uart_setrate (*((word*)buf),
     e88:	00000054 	andeq	r0, r0, r4, asr r0
     e8c:	810c0e41 	tsthi	ip, r1, asr #28
     e90:	83028203 	movwhi	r8, #8707	; 0x2203
				syserror (EREQPAR, "uar");
     e94:	280e4101 	stmdacs	lr, {r0, r8, lr}
			syserror (ENOOPER, "uai");
     e98:	06850784 	streq	r0, [r5], r4, lsl #15
			if (len == UART_CNTRL_GETRATE) {
     e9c:	048e0586 	streq	r0, [lr], #1414	; 0x586
				return 1;
     ea0:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     ea4:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
			syserror (ENOOPER, "uai");
     ea8:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     eac:	000ec1c2 	andeq	ip, lr, r2, asr #3
     eb0:	0000000c 	andeq	r0, r0, ip
     eb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eb8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ebc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ec0:	00000030 	andeq	r0, r0, r0, lsr r0
     ec4:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ec8:	00002608 	andeq	r2, r0, r8, lsl #12
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     ecc:	00000060 	andeq	r0, r0, r0, rrx
void UART0IntHandler () {
     ed0:	810c0e41 	tsthi	ip, r1, asr #28
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     ed4:	83028203 	movwhi	r8, #8707	; 0x2203
     ed8:	200e4101 	andcs	r4, lr, r1, lsl #2
     edc:	05850684 	streq	r0, [r5, #1668]	; 0x684
     ee0:	0a64048e 	beq	1902120 <__ccfg+0x18e2178>
     ee4:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     ee8:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     eec:	c1c2c341 	bicgt	ip, r2, r1, asr #6
		RISE_N_SHINE;
     ef0:	0b41000e 	bleq	1040f30 <__ccfg+0x1020f88>
     ef4:	0000000c 	andeq	r0, r0, ip
		i_trigger (devevent (UART_A, READ));
     ef8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     efc:	7c020001 	stcvc	0, cr0, [r2], {1}
     f00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f04:	0000000c 	andeq	r0, r0, ip
     f08:	00000ef4 	strdeq	r0, [r0], -r4
     f0c:	00002668 	andeq	r2, r0, r8, ror #12
     f10:	00000020 	andeq	r0, r0, r0, lsr #32
     f14:	00000018 	andeq	r0, r0, r8, lsl r0
     f18:	00000ef4 	strdeq	r0, [r0], -r4
     f1c:	00002688 	andeq	r2, r0, r8, lsl #13
     f20:	00000190 	muleq	r0, r0, r1
     f24:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     f28:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f30:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     f34:	00000ef4 	strdeq	r0, [r0], -r4
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     f38:	00002818 	andeq	r2, r0, r8, lsl r8
     f3c:	00000048 	andeq	r0, r0, r8, asr #32
		RISE_N_SHINE;
     f40:	83100e41 	tsthi	r0, #1040	; 0x410
     f44:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f48:	00018e02 	andeq	r8, r1, r2, lsl #28
		i_trigger (devevent (UART_A, WRITE));
     f4c:	00000014 	andeq	r0, r0, r4, lsl r0
     f50:	00000ef4 	strdeq	r0, [r0], -r4
     f54:	00002860 	andeq	r2, r0, r0, ror #16
     f58:	00000024 	andeq	r0, r0, r4, lsr #32
     f5c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f60:	00018e02 	andeq	r8, r1, r2, lsl #28
     f64:	00000018 	andeq	r0, r0, r8, lsl r0
     f68:	00000ef4 	strdeq	r0, [r0], -r4
     f6c:	00002884 	andeq	r2, r0, r4, lsl #17
     f70:	0000005c 	andeq	r0, r0, ip, asr r0
     f74:	83100e41 	tsthi	r0, #1040	; 0x410
}
     f78:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f80:	00000018 	andeq	r0, r0, r8, lsl r0
     f84:	00000ef4 	strdeq	r0, [r0], -r4
     f88:	000028e0 	andeq	r2, r0, r0, ror #17
void __buttons_setirq (int val) {
     f8c:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     f90:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f94:	86038504 	strhi	r8, [r3], -r4, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     f98:	00018e02 	andeq	r8, r1, r2, lsl #28
     f9c:	00000028 	andeq	r0, r0, r8, lsr #32
     fa0:	00000ef4 	strdeq	r0, [r0], -r4
		bn = BUTTON_GPIO (__button_list [i]);
     fa4:	00002918 	andeq	r2, r0, r8, lsl r9
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fa8:	00000180 	andeq	r0, r0, r0, lsl #3
     fac:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     fb0:	86058506 	strhi	r8, [r5], -r6, lsl #10
     fb4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     fb8:	02018e02 	andeq	r8, r1, #2, 28
     fbc:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
}
     fc0:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	00000030 	andeq	r0, r0, r0, lsr r0
     fcc:	00000ef4 	strdeq	r0, [r0], -r4
void __pinlist_setirq (int val) {
     fd0:	00002a98 	muleq	r0, r8, sl
	for (i = 0; i < N_PINLIST; i++) {
     fd4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fd8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fdc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
	for (i = 0; i < N_PINLIST; i++) {
     fe0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     fe4:	89038804 	stmdbhi	r3, {r2, fp, pc}
     fe8:	02018e02 	andeq	r8, r1, #2, 28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     fec:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
     ff0:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     ff4:	000ec3c4 	andeq	ip, lr, r4, asr #7
	for (i = 0; i < N_PINLIST; i++) {
     ff8:	00000b46 	andeq	r0, r0, r6, asr #22
}
     ffc:	00000020 	andeq	r0, r0, r0, lsr #32
    1000:	00000ef4 	strdeq	r0, [r0], -r4
    1004:	00002b68 	andeq	r2, r0, r8, ror #22
    1008:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
void GPIOIntHandler () {
    100c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
if (buttons_int) {
    1010:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1014:	02018e02 	andeq	r8, r1, #2, 28
	buttons_disable ();
    1018:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    101c:	00000ec4 	andeq	r0, r0, r4, asr #29
	i_trigger ((aword)&__button_list);
    1020:	00000018 	andeq	r0, r0, r8, lsl r0
    1024:	00000ef4 	strdeq	r0, [r0], -r4
    1028:	00002d58 	andeq	r2, r0, r8, asr sp
    102c:	00000070 	andeq	r0, r0, r0, ror r0
    1030:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1034:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000024 	andeq	r0, r0, r4, lsr #32
    1040:	00000ef4 	strdeq	r0, [r0], -r4
    1044:	00002dc8 	andeq	r2, r0, r8, asr #27
    1048:	00000174 	andeq	r0, r0, r4, ror r1
	RISE_N_SHINE;
    104c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    1050:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    1054:	87078608 	strhi	r8, [r7, -r8, lsl #12]
if (pin_sensor_int) {
    1058:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    105c:	8b038a04 	blhi	e3874 <__ccfg+0xc38cc>
	i_trigger ((aword)(&__input_pins));
    1060:	00018e02 	andeq	r8, r1, r2, lsl #28
    1064:	0000000c 	andeq	r0, r0, ip
    1068:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    106c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1070:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1074:	00000014 	andeq	r0, r0, r4, lsl r0
    1078:	00001064 	andeq	r1, r0, r4, rrx
    107c:	00002f3c 	andeq	r2, r0, ip, lsr pc
    1080:	00000024 	andeq	r0, r0, r4, lsr #32
    1084:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1088:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pinsen_disable_and_clear;
    108c:	0000000c 	andeq	r0, r0, ip
	RISE_N_SHINE;
    1090:	00001064 	andeq	r1, r0, r4, rrx
    1094:	00002f60 	andeq	r2, r0, r0, ror #30
    1098:	00000024 	andeq	r0, r0, r4, lsr #32
}
    109c:	0000000c 	andeq	r0, r0, ip
    10a0:	00001064 	andeq	r1, r0, r4, rrx
    10a4:	00002f84 	andeq	r2, r0, r4, lsl #31
    10a8:	00000008 	andeq	r0, r0, r8
    10ac:	0000000c 	andeq	r0, r0, ip
void system_init () {
    10b0:	00001064 	andeq	r1, r0, r4, rrx
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10b4:	00002f8c 	andeq	r2, r0, ip, lsl #31
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    10b8:	00000004 	andeq	r0, r0, r4
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    10bc:	0000000c 	andeq	r0, r0, ip
    10c0:	00001064 	andeq	r1, r0, r4, rrx
    10c4:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    10c8:	00000004 	andeq	r0, r0, r4
    10cc:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    10d0:	00001064 	andeq	r1, r0, r4, rrx
    10d4:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    10d8:	00000048 	andeq	r0, r0, r8, asr #32
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    10e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    10e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    10e8:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    10ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    10f0:	7c020001 	stcvc	0, cr0, [r2], {1}
		pin = (port_confs [i] >> 19) & 0x1f;
    10f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    10f8:	00000028 	andeq	r0, r0, r8, lsr #32
		pin = (port_confs [i] >> 19) & 0x1f;
    10fc:	000010e8 	andeq	r1, r0, r8, ror #1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1100:	00002fdc 	ldrdeq	r2, [r0], -ip
    1104:	00000070 	andeq	r0, r0, r0, ror r0
    1108:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    110c:	86048505 	strhi	r8, [r4], -r5, lsl #10
		if (port_confs [i] & 0x80)
    1110:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1114:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    1118:	c7ce4214 	bfigt	r4, r4, #4, #11
		if (port_confs [i] & 0x40)
    111c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1120:	000b4200 	andeq	r4, fp, r0, lsl #4
    1124:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    112c:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	all_leds_blink;
    1134:	00000028 	andeq	r0, r0, r8, lsr #32
    1138:	00001124 	andeq	r1, r0, r4, lsr #2
    113c:	0000304c 	andeq	r3, r0, ip, asr #32
    1140:	0000011c 	andeq	r0, r0, ip, lsl r1
    1144:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1148:	86048505 	strhi	r8, [r4], -r5, lsl #10
    114c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1150:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    1154:	c7ce4214 	bfigt	r4, r4, #4, #11
    1158:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    115c:	00000000 	andeq	r0, r0, r0
    1160:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1168:	7c020001 	stcvc	0, cr0, [r2], {1}
    116c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	IntEnable (INT_AON_RTC_COMB);
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	00001160 	andeq	r1, r0, r0, ror #2
    1178:	00003168 	andeq	r3, r0, r8, ror #2
	__pi_malloc_init ();
    117c:	00000020 	andeq	r0, r0, r0, lsr #32
	IntEnable (INT_AON_GPIO_EDGE);
    1180:	00000028 	andeq	r0, r0, r8, lsr #32
    1184:	00001160 	andeq	r1, r0, r0, ror #2
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1188:	00003188 	andeq	r3, r0, r8, lsl #3
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    118c:	00000230 	andeq	r0, r0, r0, lsr r2
    1190:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    1194:	86078508 	strhi	r8, [r7], -r8, lsl #10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1198:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    119c:	8a038904 	bhi	e35b4 <__ccfg+0xc360c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    11a0:	02018e02 	andeq	r8, r1, #2, 28
    11a4:	200e0a4f 	andcs	r0, lr, pc, asr #20
    11a8:	00000b42 	andeq	r0, r0, r2, asr #22
	urates [0] = UART_RATE / 100;
    11ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    11b0:	00001160 	andeq	r1, r0, r0, ror #2
	reinit_uart ();
    11b4:	000033b8 			; <UNDEFINED> instruction: 0x000033b8
	EXTRA_INITIALIZERS;
    11b8:	00000050 	andeq	r0, r0, r0, asr r0
    11bc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    11c0:	86058506 	strhi	r8, [r5], -r6, lsl #10
    11c4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    11c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    11cc:	0000000c 	andeq	r0, r0, ip
    11d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    11d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			devinit [i] . init (devinit [i] . param);
    11dc:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    11e0:	000011cc 	andeq	r1, r0, ip, asr #3
    11e4:	00003408 	andeq	r3, r0, r8, lsl #8
    11e8:	00000390 	muleq	r0, r0, r3
	IntEnable (INT_UART0_COMB);
    11ec:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    11f0:	86068507 	strhi	r8, [r6], -r7, lsl #10
}
    11f4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
	tci_run_auxiliary_timer ();
    11f8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
		diag ("");
    11fc:	00000001 	andeq	r0, r0, r1
    1200:	0000000c 	andeq	r0, r0, ip
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1204:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    1208:	7c020001 	stcvc	0, cr0, [r2], {1}
		diag ("Leftover RAM: %d bytes",
    120c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1210:	00000024 	andeq	r0, r0, r4, lsr #32
    1214:	00001200 	andeq	r1, r0, r0, lsl #4
    1218:	00003798 	muleq	r0, r8, r7
    121c:	00000028 	andeq	r0, r0, r8, lsr #32
    1220:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1224:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1228:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    122c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1230:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    1234:	0000000b 	andeq	r0, r0, fp
    1238:	00000028 	andeq	r0, r0, r8, lsr #32
    123c:	00001200 	andeq	r1, r0, r0, lsl #4
    1240:	00000000 	andeq	r0, r0, r0
    1244:	0000002c 	andeq	r0, r0, ip, lsr #32
    1248:	83180e41 	tsthi	r8, #1040	; 0x410
    124c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1250:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1254:	50018e02 	andpl	r8, r1, r2, lsl #28
    1258:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    125c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1260:	000b4200 	andeq	r4, fp, r0, lsl #4
    1264:	0000000c 	andeq	r0, r0, ip
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1268:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    126c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1270:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1274:	0000000c 	andeq	r0, r0, ip
    1278:	00001264 	andeq	r1, r0, r4, ror #4
    127c:	000037c0 	andeq	r3, r0, r0, asr #15
    1280:	00000030 	andeq	r0, r0, r0, lsr r0
    1284:	0000000c 	andeq	r0, r0, ip
}
    1288:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
__attribute__ ((noreturn)) void __pi_release () {
    128c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1290:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1294:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1298:	00001284 	andeq	r1, r0, r4, lsl #5
	check_stack_overflow;
    129c:	000037f0 	strdeq	r3, [r0], -r0
    12a0:	00000020 	andeq	r0, r0, r0, lsr #32
    12a4:	0000000c 	andeq	r0, r0, ip
	update_n_wake (MAX_WORD, NO);
    12a8:	00001284 	andeq	r1, r0, r4, lsl #5
    12ac:	00003810 	andeq	r3, r0, r0, lsl r8
    12b0:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (__pi_curr) {
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12bc:	7c020001 	stcvc	0, cr0, [r2], {1}
  __ASM volatile ("cpsid i" : : : "memory");
    12c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12c4:	0000000c 	andeq	r0, r0, ip
	__SLEEP;
    12c8:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    12cc:	00003828 	andeq	r3, r0, r8, lsr #16
    12d0:	00000008 	andeq	r0, r0, r8
	system_event_count ++;
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
	switch (__pi_systat.effpdm) {
    12dc:	00000000 	andeq	r0, r0, r0
    12e0:	00000006 	andeq	r0, r0, r6
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
			__WFI ();
    12ec:	00003830 	andeq	r3, r0, r0, lsr r8
    12f0:	00000008 	andeq	r0, r0, r8
    12f4:	0000000c 	andeq	r0, r0, ip
	check_stack_overflow;
    12f8:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    12fc:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1300:	00000006 	andeq	r0, r0, r6
    1304:	0000000c 	andeq	r0, r0, ip
			(__pi_curr->code) (tstate (__pi_curr));
    1308:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
			goto Redo;
    130c:	00000000 	andeq	r0, r0, r0
	for_all_tasks (__pi_curr) {
    1310:	00000008 	andeq	r0, r0, r8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1314:	0000000c 	andeq	r0, r0, ip
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    131c:	7c020001 	stcvc	0, cr0, [r2], {1}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1324:	0000001c 	andeq	r0, r0, ip, lsl r0
    1328:	00001314 	andeq	r1, r0, r4, lsl r3
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    132c:	00003838 	andeq	r3, r0, r8, lsr r8
    1330:	0000005c 	andeq	r0, r0, ip, asr r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1334:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1338:	86038504 	strhi	r8, [r3], -r4, lsl #10
			__WFI ();
    133c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1340:	0000100e 	andeq	r1, r0, lr
    1344:	00000014 	andeq	r0, r0, r4, lsl r0
}
    1348:	00001314 	andeq	r1, r0, r4, lsl r3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    134c:	00003894 	muleq	r0, r4, r8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1350:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1354:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1358:	00018e02 	andeq	r8, r1, r2, lsl #28
			PRCMPowerDomainOff (__pi_systat.ondmns |
    135c:	00000018 	andeq	r0, r0, r8, lsl r0
    1360:	00001314 	andeq	r1, r0, r4, lsl r3
    1364:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1368:	00000090 	muleq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    136c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1370:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1374:	00018e02 	andeq	r8, r1, r2, lsl #28
    1378:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    137c:	00001314 	andeq	r1, r0, r4, lsl r3
    1380:	000038c0 	andeq	r3, r0, r0, asr #17
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1384:	00000018 	andeq	r0, r0, r8, lsl r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1388:	83080e41 	movwhi	r0, #36417	; 0x8e41
    138c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1390:	00000014 	andeq	r0, r0, r4, lsl r0
    1394:	00001314 	andeq	r1, r0, r4, lsl r3
    1398:	000038d8 	ldrdeq	r3, [r0], -r8
			SysCtrlSetRechargeBeforePowerDown
    139c:	00000060 	andeq	r0, r0, r0, rrx
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    13a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13a8:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    13ac:	00001314 	andeq	r1, r0, r4, lsl r3
    13b0:	00003938 	andeq	r3, r0, r8, lsr r9
    13b4:	00000034 	andeq	r0, r0, r4, lsr r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    13b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13bc:	00018e02 	andeq	r8, r1, r2, lsl #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    13c0:	00000018 	andeq	r0, r0, r8, lsl r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    13c4:	00001314 	andeq	r1, r0, r4, lsl r3
    13c8:	00000000 	andeq	r0, r0, r0
    13cc:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    13d0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			while (!(AONWUCPowerStatusGet () &
    13d4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			PRCMPowerDomainOn (__pi_systat.ondmns);
    13d8:	00000001 	andeq	r0, r0, r1
    13dc:	0000000c 	andeq	r0, r0, ip
    13e0:	00001314 	andeq	r1, r0, r4, lsl r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	0000000c 	andeq	r0, r0, ip
    13ec:	00000018 	andeq	r0, r0, r8, lsl r0
    13f0:	00001314 	andeq	r1, r0, r4, lsl r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	00000034 	andeq	r0, r0, r4, lsr r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13fc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1400:	86038504 	strhi	r8, [r3], -r4, lsl #10
			SysCtrlAdjustRechargeAfterPowerDown ();
    1404:	00018e02 	andeq	r8, r1, r2, lsl #28
			reinit_uart ();
    1408:	0000000c 	andeq	r0, r0, ip
    140c:	00001314 	andeq	r1, r0, r4, lsl r3
    1410:	00000000 	andeq	r0, r0, r0
}
    1414:	0000001c 	andeq	r0, r0, ip, lsl r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    1418:	0000000c 	andeq	r0, r0, ip
    141c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1420:	7c020001 	stcvc	0, cr0, [r2], {1}
    1424:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1428:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    142c:	00001418 	andeq	r1, r0, r8, lsl r4
    1430:	00000000 	andeq	r0, r0, r0
    1434:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1438:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    143c:	00001418 	andeq	r1, r0, r8, lsl r4
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1440:	0000396c 	andeq	r3, r0, ip, ror #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1444:	00000028 	andeq	r0, r0, r8, lsr #32
    1448:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    144c:	00001418 	andeq	r1, r0, r8, lsl r4
    1450:	00003994 	muleq	r0, r4, r9
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1454:	0000004c 	andeq	r0, r0, ip, asr #32
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1458:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    145c:	00001418 	andeq	r1, r0, r8, lsl r4
    1460:	000039e0 	andeq	r3, r0, r0, ror #19
			PRCMPowerDomainOff (
    1464:	00000150 	andeq	r0, r0, r0, asr r1
    1468:	00000018 	andeq	r0, r0, r8, lsl r0
	__SLEEP;
    146c:	00001418 	andeq	r1, r0, r8, lsl r4
    1470:	00003b30 	andeq	r3, r0, r0, lsr fp
  __ASM volatile ("cpsie i" : : : "memory");
    1474:	00000118 	andeq	r0, r0, r8, lsl r1
	goto Redo;
    1478:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    147c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1480:	00018e02 	andeq	r8, r1, r2, lsl #28
    1484:	00000018 	andeq	r0, r0, r8, lsl r0
    1488:	00001418 	andeq	r1, r0, r8, lsl r4
    148c:	00003c48 	andeq	r3, r0, r8, asr #24
    1490:	00000020 	andeq	r0, r0, r0, lsr #32
    1494:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1498:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    149c:	00000001 	andeq	r0, r0, r1
    14a0:	00000014 	andeq	r0, r0, r4, lsl r0
    14a4:	00001418 	andeq	r1, r0, r8, lsl r4
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	00000060 	andeq	r0, r0, r0, rrx
    14b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    14b8:	0000000c 	andeq	r0, r0, ip
    14bc:	00001418 	andeq	r1, r0, r8, lsl r4
    14c0:	00003c68 	andeq	r3, r0, r8, ror #24
    14c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14c8:	0000000c 	andeq	r0, r0, ip
    14cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    14d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14d8:	00000018 	andeq	r0, r0, r8, lsl r0
    14dc:	000014c8 	andeq	r1, r0, r8, asr #9
    14e0:	00003c84 	andeq	r3, r0, r4, lsl #25
	cli_tim;
    14e4:	000000d4 	ldrdeq	r0, [r0], -r4
    14e8:	83100e41 	tsthi	r0, #1040	; 0x410
    14ec:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	diag ("PicOS halted");
    14f0:	00018e02 	andeq	r8, r1, r2, lsl #28
	mdelay (500);
    14f4:	00000014 	andeq	r0, r0, r4, lsl r0
    14f8:	000014c8 	andeq	r1, r0, r8, asr #9
	setpowermode (2);
    14fc:	00003d58 	andeq	r3, r0, r8, asr sp
	__PCB = NULL;
    1500:	000000a4 	andeq	r0, r0, r4, lsr #1
	release;
    1504:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1508:	00018e02 	andeq	r8, r1, r2, lsl #28
    150c:	0000000c 	andeq	r0, r0, ip
    1510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
int main (void) {
    1514:	7c020001 	stcvc	0, cr0, [r2], {1}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1518:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    151c:	00000018 	andeq	r0, r0, r8, lsl r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1520:	0000150c 	andeq	r1, r0, ip, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1524:	00003dfc 	strdeq	r3, [r0], -ip
	system_init ();
    1528:	0000007c 	andeq	r0, r0, ip, ror r0
	tcv_init ();
    152c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1530:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1534:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1538:	00000014 	andeq	r0, r0, r4, lsl r0
    153c:	0000150c 	andeq	r1, r0, ip, lsl #10
    1540:	00003e78 	andeq	r3, r0, r8, ror lr
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1544:	000000ac 	andeq	r0, r0, ip, lsr #1
    1548:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
	delay (16, 0);
    154c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1550:	0000000c 	andeq	r0, r0, ip
    1554:	0000150c 	andeq	r1, r0, ip, lsl #10
	__pi_release ();
    1558:	00003f24 	andeq	r3, r0, r4, lsr #30
    155c:	0000005c 	andeq	r0, r0, ip, asr r0
    1560:	0000000c 	andeq	r0, r0, ip
    1564:	0000150c 	andeq	r1, r0, ip, lsl #10
    1568:	00003f80 	andeq	r3, r0, r0, lsl #31
    156c:	00000018 	andeq	r0, r0, r8, lsl r0
    1570:	0000000c 	andeq	r0, r0, ip
static void killev (__pi_pcb_t *pid) {
    1574:	0000150c 	andeq	r1, r0, ip, lsl #10
	wfun = (aword)(pid->code);
    1578:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    157c:	00000010 	andeq	r0, r0, r0, lsl r0
		for (j = 0; j < nevents (i); j++) {
    1580:	0000000c 	andeq	r0, r0, ip
    1584:	0000150c 	andeq	r1, r0, ip, lsl #10
    1588:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
			    || i->Events [j] . Event == wfun
    158c:	00000010 	andeq	r0, r0, r0, lsl r0
		for (j = 0; j < nevents (i); j++) {
    1590:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == (aword)pid
    1594:	0000150c 	andeq	r1, r0, ip, lsl #10
    1598:	00003fa8 	andeq	r3, r0, r8, lsr #31
    159c:	00000014 	andeq	r0, r0, r4, lsl r0
				wakeupev (i, j);
    15a0:	00000018 	andeq	r0, r0, r8, lsl r0
    15a4:	0000150c 	andeq	r1, r0, ip, lsl #10
	for_all_tasks (i) {
    15a8:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
}
    15ac:	00000064 	andeq	r0, r0, r4, rrx
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
static void qfree (aword *ch) {
    15b4:	86038504 	strhi	r8, [r3], -r4, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15b8:	00018e02 	andeq	r8, r1, r2, lsl #28
	cc = (aword*)(mpools + MA_NP);
    15bc:	0000000c 	andeq	r0, r0, ip
	m_setnextp (ch, chunk);
    15c0:	0000150c 	andeq	r1, r0, ip, lsl #10
	m_setnextp (cc, ch);
    15c4:	00004020 	andeq	r4, r0, r0, lsr #32
}
    15c8:	00000014 	andeq	r0, r0, r4, lsl r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    15cc:	0000000c 	andeq	r0, r0, ip
    15d0:	0000150c 	andeq	r1, r0, ip, lsl #10
    15d4:	00004034 	andeq	r4, r0, r4, lsr r0
			m_setnextp (cc, m_nextp (chunk));
    15d8:	00000014 	andeq	r0, r0, r4, lsl r0
			m_size (chunk) += m_hdrlen + m_size (ch);
    15dc:	0000000c 	andeq	r0, r0, ip
    15e0:	0000150c 	andeq	r1, r0, ip, lsl #10
    15e4:	00004048 	andeq	r4, r0, r8, asr #32
    15e8:	00000014 	andeq	r0, r0, r4, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    15ec:	0000000c 	andeq	r0, r0, ip
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    15f0:	0000150c 	andeq	r1, r0, ip, lsl #10
    15f4:	0000405c 	andeq	r4, r0, ip, asr r0
    15f8:	00000028 	andeq	r0, r0, r8, lsr #32
			m_setnextp (cc, m_nextp (chunk));
    15fc:	0000000c 	andeq	r0, r0, ip
			m_size (ch) += m_hdrlen + m_size (chunk);
    1600:	0000150c 	andeq	r1, r0, ip, lsl #10
    1604:	00004084 	andeq	r4, r0, r4, lsl #1
    1608:	00000010 	andeq	r0, r0, r0, lsl r0
    160c:	0000000c 	andeq	r0, r0, ip
    1610:	0000150c 	andeq	r1, r0, ip, lsl #10
    1614:	00004094 	muleq	r0, r4, r0
			if (m_size (chunk) >= m_size (ch))
    1618:	0000002c 	andeq	r0, r0, ip, lsr #32
    161c:	0000000c 	andeq	r0, r0, ip
    1620:	0000150c 	andeq	r1, r0, ip, lsl #10
		chunk = m_nextp (chunk))
    1624:	000040c0 	andeq	r4, r0, r0, asr #1
    1628:	00000014 	andeq	r0, r0, r4, lsl r0
    162c:	0000000c 	andeq	r0, r0, ip
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1630:	0000150c 	andeq	r1, r0, ip, lsl #10
	diag_wait (a);
    1634:	000040d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	diag_wchar (c, a);
    1638:	00000014 	andeq	r0, r0, r4, lsl r0
    163c:	0000001c 	andeq	r0, r0, ip, lsl r0
}
    1640:	0000150c 	andeq	r1, r0, ip, lsl #10
    1644:	000040e8 	andeq	r4, r0, r8, ror #1
	syserror (ESTATE, "state");
    1648:	00000110 	andeq	r0, r0, r0, lsl r1
    164c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1650:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1654:	02018e02 	andeq	r8, r1, #2, 28
	for (i = 0; i < MAX_UTIMERS; i++)
    1658:	00100e76 	andseq	r0, r0, r6, ror lr
void utimer_add (address ut) {
    165c:	00000018 	andeq	r0, r0, r8, lsl r0
    1660:	0000150c 	andeq	r1, r0, ip, lsl #10
		if (__pi_utims [i] == NULL)
    1664:	000041f8 	strdeq	r4, [r0], -r8
	for (i = 0; i < MAX_UTIMERS; i++)
    1668:	00000064 	andeq	r0, r0, r4, rrx
    166c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		syserror (ERESOURCE, "ut a");
    1670:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	__pi_utims [i] = ut;
    1674:	00000001 	andeq	r0, r0, r1
}
    1678:	0000000c 	andeq	r0, r0, ip
    167c:	0000150c 	andeq	r1, r0, ip, lsl #10
    1680:	0000425c 	andeq	r4, r0, ip, asr r2
	*t = v;
    1684:	00000028 	andeq	r0, r0, r8, lsr #32
	TCI_RUN_AUXILIARY_TIMER;
    1688:	00000014 	andeq	r0, r0, r4, lsl r0
void update_n_wake (word min, Boolean force) {
    168c:	0000150c 	andeq	r1, r0, ip, lsl #10
	if (TCI_UPDATE_DELAY_TICKS (force))
    1690:	00004284 	andeq	r4, r0, r4, lsl #5
    1694:	00000150 	andeq	r0, r0, r0, asr r1
    1698:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    169c:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a0:	0000000c 	andeq	r0, r0, ip
    16a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16a8:	7c020001 	stcvc	0, cr0, [r2], {1}
    16ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16b4:	000016a0 	andeq	r1, r0, r0, lsr #13
    16b8:	00000000 	andeq	r0, r0, r0
    16bc:	000000f4 	strdeq	r0, [r0], -r4
    16c0:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    16c4:	86058506 	strhi	r8, [r5], -r6, lsl #10
    16c8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    16cc:	00018e02 	andeq	r8, r1, r2, lsl #28
		for_all_tasks (i) {
    16d0:	00000028 	andeq	r0, r0, r8, lsr #32
	__pi_mintk = znew + min;
    16d4:	000016a0 	andeq	r1, r0, r0, lsr #13
    16d8:	000043d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
			if (!twaiting (i))
    16dc:	00000220 	andeq	r0, r0, r0, lsr #4
    16e0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
			if (twakecnd (__pi_old, znew, i->Timer)) {
    16e4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    16e8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    16ec:	8a048905 	bhi	123b08 <__ccfg+0x103b60>
    16f0:	8e028b03 	vmlahi.f64	d8, d2, d3
    16f4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    16f8:	00000024 	andeq	r0, r0, r4, lsr #32
    16fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1700:	000016a0 	andeq	r1, r0, r0, lsr #13
    1704:	000045f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1708:	00000060 	andeq	r0, r0, r0, rrx
    170c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1710:	00018e02 	andeq	r8, r1, r2, lsl #28
				wakeuptm (i);
    1714:	00000014 	andeq	r0, r0, r4, lsl r0
    1718:	000016a0 	andeq	r1, r0, r0, lsr #13
		for_all_tasks (i) {
    171c:	00000000 	andeq	r0, r0, r0
				d = i->Timer - znew;
    1720:	00000078 	andeq	r0, r0, r8, ror r0
    1724:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1728:	00018e02 	andeq	r8, r1, r2, lsl #28
		if ((word)(__pi_mintk - znew) < min) 
    172c:	0000000c 	andeq	r0, r0, ip
    1730:	000016a0 	andeq	r1, r0, r0, lsr #13
    1734:	00004654 	andeq	r4, r0, r4, asr r6
	__pi_old = znew;
    1738:	00000018 	andeq	r0, r0, r8, lsl r0
}
    173c:	0000000c 	andeq	r0, r0, ip
	TCI_RUN_DELAY_TIMER;
    1740:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    1744:	7c020001 	stcvc	0, cr0, [r2], {1}
    1748:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    174c:	0000000c 	andeq	r0, r0, ip
    1750:	0000173c 	andeq	r1, r0, ip, lsr r7
    1754:	00000000 	andeq	r0, r0, r0
void proceed (word state) {
    1758:	00000010 	andeq	r0, r0, r0, lsl r0
	prcdstate (__pi_curr, state);
    175c:	0000000c 	andeq	r0, r0, ip
    1760:	0000173c 	andeq	r1, r0, ip, lsr r7
	release;
    1764:	00000000 	andeq	r0, r0, r0
    1768:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_wait (aword event, word state) {
    176c:	0000000c 	andeq	r0, r0, ip
	sint j = nevents (__pi_curr);
    1770:	0000173c 	andeq	r1, r0, ip, lsr r7
	if (j >= MAX_EVENTS_PER_TASK)
    1774:	0000466c 	andeq	r4, r0, ip, ror #12
    1778:	0000004c 	andeq	r0, r0, ip, asr #32
    177c:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ENEVENTS, "sw");
    1780:	0000173c 	andeq	r1, r0, ip, lsr r7
    1784:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    1788:	00000030 	andeq	r0, r0, r0, lsr r0
	incwait (__pi_curr);
    178c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	setestate (__pi_curr->Events [j], state, event);
    1790:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    1794:	00000018 	andeq	r0, r0, r8, lsl r0
    1798:	0000173c 	andeq	r1, r0, ip, lsr r7
    179c:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
void __pi_trigger (aword event) {
    17a0:	0000006c 	andeq	r0, r0, ip, rrx
	for_all_tasks (i) {
    17a4:	83100e41 	tsthi	r0, #1040	; 0x410
		for (j = 0; j < nevents (i); j++) {
    17a8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    17ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b0:	00000014 	andeq	r0, r0, r4, lsl r0
    17b4:	0000173c 	andeq	r1, r0, ip, lsr r7
			if (i->Events [j] . Event == event) {
    17b8:	00004724 	andeq	r4, r0, r4, lsr #14
    17bc:	00000016 	andeq	r0, r0, r6, lsl r0
    17c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
				wakeupev (i, j);
    17c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    17c8:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    17cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    17d0:	7c020001 	stcvc	0, cr0, [r2], {1}
aword __pi_join (aword pid, word st) {
    17d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17d8:	00000024 	andeq	r0, r0, r4, lsr #32
	for_all_tasks (i) {
    17dc:	000017c8 	andeq	r1, r0, r8, asr #15
	return 0;
    17e0:	0000473c 	andeq	r4, r0, ip, lsr r7
		if ((aword)i == pid) {
    17e4:	00000028 	andeq	r0, r0, r8, lsr #32
			__pi_wait (pid, st);
    17e8:	83100e41 	tsthi	r0, #1040	; 0x410
}
    17ec:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	for_all_tasks (i) {
    17f0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    17f4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
void delay (word d, word state) {
    17f8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
	settstate (__pi_curr, state);
    17fc:	0000000b 	andeq	r0, r0, fp
    1800:	0000000c 	andeq	r0, r0, ip
    1804:	000017c8 	andeq	r1, r0, r8, asr #15
    1808:	00004764 	andeq	r4, r0, r4, ror #14
	update_n_wake (d, YES);
    180c:	00000008 	andeq	r0, r0, r8
    1810:	0000000c 	andeq	r0, r0, ip
	__pi_curr->Timer = __pi_old + d;
    1814:	000017c8 	andeq	r1, r0, r8, asr #15
    1818:	00000000 	andeq	r0, r0, r0
	inctimer (__pi_curr);
    181c:	00000022 	andeq	r0, r0, r2, lsr #32
    1820:	00000018 	andeq	r0, r0, r8, lsl r0
    1824:	000017c8 	andeq	r1, r0, r8, asr #15
}
    1828:	00000000 	andeq	r0, r0, r0
    182c:	0000002e 	andeq	r0, r0, lr, lsr #32
	if (fun == NULL)
    1830:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		return (int) __pi_curr;
    1834:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1838:	000ec4ce 	andeq	ip, lr, lr, asr #9
	for_all_tasks (i)
    183c:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1840:	000017c8 	andeq	r1, r0, r8, asr #15
		if (i->code == fun)
    1844:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i)
    1848:	00000034 	andeq	r0, r0, r4, lsr r0
    184c:	83100e41 	tsthi	r0, #1040	; 0x410
    1850:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
int __pi_strlen (const char *s) {
    1854:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; *(s+i) != '\0'; i++);
    1858:	00000018 	andeq	r0, r0, r8, lsl r0
}
    185c:	000017c8 	andeq	r1, r0, r8, asr #15
	for (i = 0; *(s+i) != '\0'; i++);
    1860:	00000000 	andeq	r0, r0, r0
	while ((Boolean)(*d++ = *s++));
    1864:	00000040 	andeq	r0, r0, r0, asr #32
    1868:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    186c:	86038504 	strhi	r8, [r3], -r4, lsl #10
}
    1870:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n-- && (*s != '\0'))
    1874:	0000000c 	andeq	r0, r0, ip
    1878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	*d = '\0';
    187c:	7c020001 	stcvc	0, cr0, [r2], {1}
	while (n-- && (*s != '\0'))
    1880:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1884:	00000020 	andeq	r0, r0, r0, lsr #32
		*d++ = *s++;
    1888:	00001874 	andeq	r1, r0, r4, ror r8
    188c:	0000476c 	andeq	r4, r0, ip, ror #14
	while (n--)
    1890:	000000aa 	andeq	r0, r0, sl, lsr #1
    1894:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
		*dest++ = *src++;
    1898:	86048505 	strhi	r8, [r4], -r5, lsl #10
    189c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18a0:	180e4201 	stmdane	lr, {r0, r9, lr}
	while (n--)
    18a4:	00000688 	andeq	r0, r0, r8, lsl #13
}
    18a8:	0000000c 	andeq	r0, r0, ip
		*dest++ = c;
    18ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void adddevfunc (devreqfun_t rf, int loc) {
    18b0:	7c020001 	stcvc	0, cr0, [r2], {1}
		syserror (EREQPAR, "addv");
    18b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		syserror (ERESOURCE, "addv");
    18b8:	0000000c 	andeq	r0, r0, ip
	if (ioreq [loc] != NULL)
    18bc:	000018a8 	andeq	r1, r0, r8, lsr #17
    18c0:	00004818 	andeq	r4, r0, r8, lsl r8
		syserror (ERESOURCE, "addv");
    18c4:	00000014 	andeq	r0, r0, r4, lsl r0
	ioreq [loc] = rf;
    18c8:	00000014 	andeq	r0, r0, r4, lsl r0
}
    18cc:	000018a8 	andeq	r1, r0, r8, lsr #17
    18d0:	0000482c 	andeq	r4, r0, ip, lsr #16
sint io (word retry, word dev, word operation, char *buf, word len) {
    18d4:	00000038 	andeq	r0, r0, r8, lsr r0
    18d8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    18dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    18e0:	0000000c 	andeq	r0, r0, ip
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    18e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		syserror (ENODEVICE, "io");
    18f0:	00000020 	andeq	r0, r0, r0, lsr #32
    18f4:	000018e0 	andeq	r1, r0, r0, ror #17
	if (len == 0)
    18f8:	00004864 	andeq	r4, r0, r4, ror #16
	ret = (ioreq [dev]) (operation, buf, len);
    18fc:	00000054 	andeq	r0, r0, r4, asr r0
    1900:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	if (ret >= 0)
    1904:	86048505 	strhi	r8, [r4], -r5, lsl #10
	if (ret == -1) {
    1908:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    190c:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
		if (retry == WNONE)
    1910:	00000688 	andeq	r0, r0, r8, lsl #13
