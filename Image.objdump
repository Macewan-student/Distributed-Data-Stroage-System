
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000025a1 	andeq	r2, r0, r1, lsr #11
		// Called to issue a wait request
		if (st == WNONE)
       8:	0000259b 	muleq	r0, fp, r5
       c:	0000259d 	muleq	r0, sp, r5
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      14:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
		when (&__input_pins, st);
      18:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      30:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      3c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      40:	000012c1 	andeq	r1, r0, r1, asr #5
      44:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      48:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
}
      4c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      50:	00000e81 	andeq	r0, r0, r1, lsl #29
      54:	00001181 	andeq	r1, r0, r1, lsl #3
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	    pbutton++) {
      5c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      60:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002fd1 	ldrdeq	r2, [r0], -r1
      68:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      6c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      70:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      74:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      7c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      84:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      8c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      90:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      94:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      98:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
		goto Done;

	if (baction == NULL)
      9c:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      a0:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
		goto Term;

	(*baction) (pbutton);
      a4:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      b0:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
endthread
      b4:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      b8:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      bc:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      c0:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
      c4:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>

000000c8 <sender>:
	return response_message;

};

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      ca:	4606      	mov	r6, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d02a      	beq.n	128 <_Min_Stack_Size+0x28>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      d6:	f001 bc11 	b.w	18fc <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b24      	ldr	r3, [pc, #144]	; (16c <_Min_Stack_Size+0x6c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4924      	ldr	r1, [pc, #144]	; (170 <_Min_Stack_Size+0x70>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689d      	ldr	r5, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f002 f8b0 	bl	224c <tcv_wnps>
      ec:	4604      	mov	r4, r0
		packet[0] = 0;
      ee:	8006      	strh	r6, [r0, #0]
		packet[1] = message->gid;
      f0:	882b      	ldrh	r3, [r5, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f2:	4f20      	ldr	r7, [pc, #128]	; (174 <_Min_Stack_Size+0x74>)
		packet[1] = message->gid;
      f4:	8043      	strh	r3, [r0, #2]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f6:	6038      	str	r0, [r7, #0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	481f      	ldr	r0, [pc, #124]	; (178 <_Min_Stack_Size+0x78>)
      fa:	f001 fe81 	bl	1e00 <diag>
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
      fe:	7969      	ldrb	r1, [r5, #5]
     100:	481e      	ldr	r0, [pc, #120]	; (17c <_Min_Stack_Size+0x7c>)
     102:	f001 fe7d 	bl	1e00 <diag>
		*p = message->tpe;p++;
     106:	78ab      	ldrb	r3, [r5, #2]
     108:	7123      	strb	r3, [r4, #4]
		*p = message->request_number;p++;
     10a:	78eb      	ldrb	r3, [r5, #3]
     10c:	7163      	strb	r3, [r4, #5]
		*p = message->sender_id;p++;
     10e:	792b      	ldrb	r3, [r5, #4]
     110:	71a3      	strb	r3, [r4, #6]
		*p = message->receiver_id;p++;
     112:	796b      	ldrb	r3, [r5, #5]
     114:	71e3      	strb	r3, [r4, #7]
		switch(message->tpe) {
     116:	78ab      	ldrb	r3, [r5, #2]
     118:	2b04      	cmp	r3, #4
     11a:	d80e      	bhi.n	13a <_Min_Stack_Size+0x3a>
     11c:	2b02      	cmp	r3, #2
     11e:	d820      	bhi.n	162 <_Min_Stack_Size+0x62>
     120:	d017      	beq.n	152 <_Min_Stack_Size+0x52>
		tcv_endp(packet);
     122:	6838      	ldr	r0, [r7, #0]
     124:	f001 ffa8 	bl	2078 <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2001      	movs	r0, #1
     12a:	4915      	ldr	r1, [pc, #84]	; (180 <_Min_Stack_Size+0x80>)
     12c:	f002 fb0c 	bl	2748 <ser_out>
}
     130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		finish;
     134:	2000      	movs	r0, #0
     136:	f001 bdc1 	b.w	1cbc <kill>
     13a:	2b05      	cmp	r3, #5
     13c:	d1f1      	bne.n	122 <_Min_Stack_Size+0x22>
				*p = message->status;p++;
     13e:	79ab      	ldrb	r3, [r5, #6]
				strncpy(p, message->record, sizeof(message->record));
     140:	2214      	movs	r2, #20
				*p = message->status;p++;
     142:	7223      	strb	r3, [r4, #8]
				*p = message->padding;p++;
     144:	79eb      	ldrb	r3, [r5, #7]
				strncpy(p, message->record, sizeof(message->record));
     146:	f105 0108 	add.w	r1, r5, #8
				*p = message->padding;p++;
     14a:	7263      	strb	r3, [r4, #9]
				strncpy(p, message->record, sizeof(message->record));
     14c:	f104 000a 	add.w	r0, r4, #10
     150:	e004      	b.n	15c <_Min_Stack_Size+0x5c>
				strncpy(p, message->record, sizeof(message->record));
     152:	2214      	movs	r2, #20
     154:	f105 0108 	add.w	r1, r5, #8
     158:	f104 0008 	add.w	r0, r4, #8
				strncpy(p, message->record, sizeof(message->record));
     15c:	f001 fce3 	bl	1b26 <__pi_strncpy>
				break;
     160:	e7df      	b.n	122 <_Min_Stack_Size+0x22>
				*p = message->record_index;p++;
     162:	7f2b      	ldrb	r3, [r5, #28]
     164:	7223      	strb	r3, [r4, #8]
				*p = message->padding;
     166:	79eb      	ldrb	r3, [r5, #7]
     168:	7263      	strb	r3, [r4, #9]
				break;
     16a:	e7da      	b.n	122 <_Min_Stack_Size+0x22>
     16c:	200006d8 	ldrdcs	r0, [r0], -r8
     170:	20000000 	andcs	r0, r0, r0
     174:	20000548 	andcs	r0, r0, r8, asr #10
     178:	00004b30 	andeq	r4, r0, r0, lsr fp
     17c:	00004b42 	andeq	r4, r0, r2, asr #22
     180:	00004b59 	andeq	r4, r0, r9, asr fp

00000184 <init_node>:
struct Node* init_node(struct Node* node){
     184:	b538      	push	{r3, r4, r5, lr}
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     186:	f240 4084 	movw	r0, #1156	; 0x484
     18a:	f001 fdbf 	bl	1d0c <__pi_malloc>
    node2->id = 0;
     18e:	2500      	movs	r5, #0
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     190:	4604      	mov	r4, r0
    node2->id = 0;
     192:	7005      	strb	r5, [r0, #0]
    node2->gid = 0;
     194:	8045      	strh	r5, [r0, #2]
    node2->data_base.item_count = 0;
     196:	f880 5464 	strb.w	r5, [r0, #1124]	; 0x464
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19a:	4629      	mov	r1, r5
     19c:	f44f 628c 	mov.w	r2, #1120	; 0x460
     1a0:	3004      	adds	r0, #4
     1a2:	f001 fcd8 	bl	1b56 <__pi_memset>
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a6:	f504 608d 	add.w	r0, r4, #1128	; 0x468
     1aa:	2219      	movs	r2, #25
     1ac:	4629      	mov	r1, r5
     1ae:	f001 fcd2 	bl	1b56 <__pi_memset>
    node2->index = 0;
     1b2:	f884 5481 	strb.w	r5, [r4, #1153]	; 0x481
};
     1b6:	4620      	mov	r0, r4
     1b8:	bd38      	pop	{r3, r4, r5, pc}

000001ba <generate_request_num>:
uint8_t generate_request_num(void){
     1ba:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     1bc:	f004 fc72 	bl	4aa4 <rand>
     1c0:	23ff      	movs	r3, #255	; 0xff
     1c2:	fb90 f3f3 	sdiv	r3, r0, r3
     1c6:	4418      	add	r0, r3
}
     1c8:	b2c0      	uxtb	r0, r0
     1ca:	bd08      	pop	{r3, pc}

000001cc <insert_record>:
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     1d0:	4690      	mov	r8, r2
     1d2:	4604      	mov	r4, r0
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	460a      	mov	r2, r1
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1d6:	460f      	mov	r7, r1
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d8:	481b      	ldr	r0, [pc, #108]	; (248 <insert_record+0x7c>)
     1da:	4641      	mov	r1, r8
     1dc:	f001 fe10 	bl	1e00 <diag>
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	f894 3464 	ldrb.w	r3, [r4, #1124]	; 0x464
     1e4:	2b28      	cmp	r3, #40	; 0x28
     1e6:	d02c      	beq.n	242 <insert_record+0x76>
        for (int i = 0; i < NUMB_OF_ENT; i++){
     1e8:	2600      	movs	r6, #0
     1ea:	231c      	movs	r3, #28
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	1d62      	adds	r2, r4, #5
     1ee:	fb03 f506 	mul.w	r5, r3, r6
     1f2:	5d51      	ldrb	r1, [r2, r5]
     1f4:	bb09      	cbnz	r1, 23a <insert_record+0x6e>
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f6:	f105 0905 	add.w	r9, r5, #5
     1fa:	44a1      	add	r9, r4
     1fc:	4648      	mov	r0, r9
     1fe:	2214      	movs	r2, #20
     200:	4639      	mov	r1, r7
     202:	f001 fc90 	bl	1b26 <__pi_strncpy>
                node->data_base.item_array[i].owner_id = owner_id;
     206:	4425      	add	r5, r4
{
    //
    // The following read gets the seconds, but also latches the fractional
    // part.
    //
    return(HWREG(AON_RTC_BASE + AON_RTC_O_SEC));
     208:	4b10      	ldr	r3, [pc, #64]	; (24c <insert_record+0x80>)
     20a:	f885 8004 	strb.w	r8, [r5, #4]
     20e:	681b      	ldr	r3, [r3, #0]
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	464a      	mov	r2, r9
                node->data_base.item_array[i].timestamp = seconds();
     212:	61eb      	str	r3, [r5, #28]
                node->data_base.item_count += 1;
     214:	f894 3464 	ldrb.w	r3, [r4, #1124]	; 0x464
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	480b      	ldr	r0, [pc, #44]	; (248 <insert_record+0x7c>)
                node->data_base.item_count += 1;
     21a:	3301      	adds	r3, #1
     21c:	f884 3464 	strb.w	r3, [r4, #1124]	; 0x464
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	7929      	ldrb	r1, [r5, #4]
     222:	f001 fded 	bl	1e00 <diag>
                break; // NOTE: This may be required so we do not fill the entries with one insert.
     226:	46b1      	mov	r9, r6
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	201c      	movs	r0, #28
     22a:	fb00 4409 	mla	r4, r0, r9, r4
     22e:	7960      	ldrb	r0, [r4, #5]
     230:	3800      	subs	r0, #0
     232:	bf18      	it	ne
     234:	2001      	movne	r0, #1
};
     236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23a:	3601      	adds	r6, #1
     23c:	2e28      	cmp	r6, #40	; 0x28
     23e:	d1d6      	bne.n	1ee <insert_record+0x22>
     240:	e7f2      	b.n	228 <insert_record+0x5c>
        return false;
     242:	2000      	movs	r0, #0
     244:	e7f7      	b.n	236 <insert_record+0x6a>
     246:	bf00      	nop
     248:	00004b68 	andeq	r4, r0, r8, ror #22
     24c:	40092008 	andmi	r2, r9, r8

00000250 <clear_node_neighbour_array>:
            node->nnodes[i] = 0; // set to null byte
     250:	2200      	movs	r2, #0
     252:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     256:	f200 4081 	addw	r0, r0, #1153	; 0x481
     25a:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     25e:	4283      	cmp	r3, r0
     260:	d1fb      	bne.n	25a <clear_node_neighbour_array+0xa>
};
     262:	2001      	movs	r0, #1
     264:	4770      	bx	lr

00000266 <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     266:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     26a:	b153      	cbz	r3, 282 <delete_record+0x1c>
     26c:	221c      	movs	r2, #28
     26e:	fb02 0101 	mla	r1, r2, r1, r0
     272:	794a      	ldrb	r2, [r1, #5]
     274:	b12a      	cbz	r2, 282 <delete_record+0x1c>
        node->data_base.item_array[index].data_entry[0] = '\0';
     276:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     278:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     27a:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     27c:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     27e:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     282:	2000      	movs	r0, #0
     284:	4770      	bx	lr

00000286 <delete_all>:
bool delete_all(struct Node *node){
     286:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     288:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     28c:	b18c      	cbz	r4, 2b2 <delete_all+0x2c>
     28e:	7943      	ldrb	r3, [r0, #5]
     290:	b17b      	cbz	r3, 2b2 <delete_all+0x2c>
        for(int i = 0; i <= node->data_base.item_count; i++){
     292:	2300      	movs	r3, #0
     294:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     296:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     298:	3301      	adds	r3, #1
     29a:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     29e:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     2a2:	daf9      	bge.n	298 <delete_all+0x12>
    node->data_base.item_count = 0;
     2a4:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	7940      	ldrb	r0, [r0, #5]
     2aa:	fab0 f080 	clz	r0, r0
     2ae:	0940      	lsrs	r0, r0, #5
}
     2b0:	bd10      	pop	{r4, pc}
        return true;
     2b2:	2001      	movs	r0, #1
     2b4:	e7fc      	b.n	2b0 <delete_all+0x2a>

000002b6 <assemble_response_message>:
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2ba:	4680      	mov	r8, r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	201e      	movs	r0, #30
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2be:	461e      	mov	r6, r3
     2c0:	460f      	mov	r7, r1
     2c2:	4615      	mov	r5, r2
     2c4:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
     2c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	f001 fd1e 	bl	1d0c <__pi_malloc>
	response_message->tpe = RESPONSE;
     2d0:	2305      	movs	r3, #5
     2d2:	7083      	strb	r3, [r0, #2]
	response_message->status = status;
     2d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	4604      	mov	r4, r0
	response_message->gid = gid;
     2da:	f8a0 8000 	strh.w	r8, [r0]
	response_message->request_number = request_number;
     2de:	70c7      	strb	r7, [r0, #3]
	response_message->sender_id = receiver_id;
     2e0:	7106      	strb	r6, [r0, #4]
	response_message->receiver_id = sender_id;
     2e2:	7145      	strb	r5, [r0, #5]
	response_message->status = status;
     2e4:	7183      	strb	r3, [r0, #6]
	if (!padding){
     2e6:	f1ba 0f00 	cmp.w	sl, #0
     2ea:	d101      	bne.n	2f0 <assemble_response_message+0x3a>
		response_message->padding = padding;
     2ec:	f880 a007 	strb.w	sl, [r0, #7]
	if (rec != NULL){
     2f0:	f1b9 0f00 	cmp.w	r9, #0
     2f4:	d005      	beq.n	302 <assemble_response_message+0x4c>
		strncpy(response_message->record, rec, 20);
     2f6:	2214      	movs	r2, #20
     2f8:	4649      	mov	r1, r9
     2fa:	f104 0008 	add.w	r0, r4, #8
     2fe:	f001 fc12 	bl	1b26 <__pi_strncpy>
};
     302:	4620      	mov	r0, r4
     304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00000308 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     30c:	4b9d      	ldr	r3, [pc, #628]	; (584 <receiver+0x27c>)
     30e:	b092      	sub	sp, #72	; 0x48
     310:	681b      	ldr	r3, [r3, #0]
     312:	689c      	ldr	r4, [r3, #8]
     314:	2809      	cmp	r0, #9
     316:	f200 81f7 	bhi.w	708 <receiver+0x400>
     31a:	e8df f000 	tbb	[pc, r0]
     31e:	75681205 	strbvc	r1, [r8, #-517]!	; 0xfffffdfb
     322:	998f837c 	stmibls	pc, {r2, r3, r4, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
     326:	4897ada3 	ldmmi	r7, {r0, r1, r5, r7, r8, sl, fp, sp, pc}
	
	//address incoming_packet;
	//char array[20];

	state receiving:
		DEBUG_PRINT("\r\nreceiving 0");
     32a:	f001 fd69 	bl	1e00 <diag>
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     32e:	4b97      	ldr	r3, [pc, #604]	; (58c <receiver+0x284>)
     330:	2000      	movs	r0, #0
     332:	6819      	ldr	r1, [r3, #0]
     334:	f001 ff4a 	bl	21cc <tcv_rnp>
     338:	4b95      	ldr	r3, [pc, #596]	; (590 <receiver+0x288>)
     33a:	6018      	str	r0, [r3, #0]
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	4895      	ldr	r0, [pc, #596]	; (594 <receiver+0x28c>)
     33e:	f001 fd5f 	bl	1e00 <diag>
	state ok:
		//uint8_t tpe;
		//uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
		DEBUG_PRINT("\r\nreceiving 2");
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     342:	4d93      	ldr	r5, [pc, #588]	; (590 <receiver+0x288>)
		DEBUG_PRINT("\r\nreceiving 2");
     344:	4894      	ldr	r0, [pc, #592]	; (598 <receiver+0x290>)
     346:	f001 fd5b 	bl	1e00 <diag>
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34a:	682b      	ldr	r3, [r5, #0]
     34c:	4f93      	ldr	r7, [pc, #588]	; (59c <receiver+0x294>)
     34e:	1c9a      	adds	r2, r3, #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	7919      	ldrb	r1, [r3, #4]
     352:	4893      	ldr	r0, [pc, #588]	; (5a0 <receiver+0x298>)
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	603a      	str	r2, [r7, #0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     356:	f001 fd53 	bl	1e00 <diag>
		DEBUG_PRINT("\r\nreceiving 3");
     35a:	4892      	ldr	r0, [pc, #584]	; (5a4 <receiver+0x29c>)
     35c:	f001 fd50 	bl	1e00 <diag>
		//if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		//};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (response_message_5->tpe){
     360:	683b      	ldr	r3, [r7, #0]
     362:	789e      	ldrb	r6, [r3, #2]
     364:	2e05      	cmp	r6, #5
     366:	f200 81ca 	bhi.w	6fe <receiver+0x3f6>
     36a:	e8df f016 	tbh	[pc, r6, lsl #1]
     36e:	00290006 	eoreq	r0, r9, r6
     372:	00ce008e 	sbceq	r0, lr, lr, lsl #1
     376:	018a014f 	orreq	r0, sl, pc, asr #2
			
			Because this is one of the scenarios where the packets are the same we can send back the packet with any required modifications
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37a:	201e      	movs	r0, #30
     37c:	f001 fcc6 	bl	1d0c <__pi_malloc>
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
				DEBUG_PRINT("\r\ndiscover gid: %u\r\nNode gid:%u", discovery_request_message->gid, node_db->gid);*/
				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     382:	8863      	ldrh	r3, [r4, #2]
     384:	886a      	ldrh	r2, [r5, #2]
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     386:	4606      	mov	r6, r0
				if (discovery_request_message->gid == node_db->gid){
     388:	429a      	cmp	r2, r3
     38a:	d130      	bne.n	3ee <receiver+0xe6>
					DEBUG_PRINT("\r\nSending to sender");
     38c:	4886      	ldr	r0, [pc, #536]	; (5a8 <receiver+0x2a0>)
     38e:	f001 fd37 	bl	1e00 <diag>
					response_message_0->gid = discovery_request_message->gid;
     392:	886b      	ldrh	r3, [r5, #2]
					response_message_0->request_number = discovery_request_message->request_number;
					response_message_0->sender_id = node_db->id;
					response_message_0->receiver_id = discovery_request_message->sender_id;

					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					DEBUG_PRINT("\r\nSending to sender");
     394:	4884      	ldr	r0, [pc, #528]	; (5a8 <receiver+0x2a0>)
					response_message_0->gid = discovery_request_message->gid;
     396:	8033      	strh	r3, [r6, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	2301      	movs	r3, #1
     39a:	70b3      	strb	r3, [r6, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	796b      	ldrb	r3, [r5, #5]
     39e:	70f3      	strb	r3, [r6, #3]
					response_message_0->sender_id = node_db->id;
     3a0:	7823      	ldrb	r3, [r4, #0]
     3a2:	7133      	strb	r3, [r6, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	79ab      	ldrb	r3, [r5, #6]
     3a6:	7173      	strb	r3, [r6, #5]
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	f001 fd2a 	bl	1e00 <diag>
					call sender(response_message_0, done_case);
     3ac:	4631      	mov	r1, r6
     3ae:	487f      	ldr	r0, [pc, #508]	; (5ac <receiver+0x2a4>)
     3b0:	f001 fd00 	bl	1db4 <__pi_fork>
     3b4:	2102      	movs	r1, #2
     3b6:	f001 fb67 	bl	1a88 <__pi_join>
     3ba:	b1c0      	cbz	r0, 3ee <receiver+0xe6>
     3bc:	f001 f8c0 	bl	1540 <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	6829      	ldr	r1, [r5, #0]
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
*/
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c2:	8862      	ldrh	r2, [r4, #2]
     3c4:	884b      	ldrh	r3, [r1, #2]
     3c6:	429a      	cmp	r2, r3
     3c8:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     3cc:	d103      	bne.n	3d6 <receiver+0xce>
     3ce:	798a      	ldrb	r2, [r1, #6]
     3d0:	1e50      	subs	r0, r2, #1
     3d2:	2817      	cmp	r0, #23
     3d4:	d902      	bls.n	3dc <receiver+0xd4>
     3d6:	18e2      	adds	r2, r4, r3
     3d8:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     3dc:	18e0      	adds	r0, r4, r3
     3de:	f880 2468 	strb.w	r2, [r0, #1128]	; 0x468
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e2:	7989      	ldrb	r1, [r1, #6]
     3e4:	4291      	cmp	r1, r2
     3e6:	d102      	bne.n	3ee <receiver+0xe6>
					node_db->index+=1;
     3e8:	3301      	adds	r3, #1
     3ea:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
				break;

		};
	state done_case:
		DEBUG_PRINT("\r\nIn done_case");
     3ee:	4870      	ldr	r0, [pc, #448]	; (5b0 <receiver+0x2a8>)
     3f0:	f001 fd06 	bl	1e00 <diag>
		tcv_endp(incoming_packet);
     3f4:	4b66      	ldr	r3, [pc, #408]	; (590 <receiver+0x288>)
     3f6:	6818      	ldr	r0, [r3, #0]
     3f8:	f001 fe3e 	bl	2078 <tcv_endp>
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	486c      	ldr	r0, [pc, #432]	; (5b0 <receiver+0x2a8>)
     3fe:	f001 fcff 	bl	1e00 <diag>
		proceed receiving;
     402:	2000      	movs	r0, #0
     404:	f001 fb02 	bl	1a0c <proceed>
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\nData Saved");
     408:	2003      	movs	r0, #3
     40a:	496a      	ldr	r1, [pc, #424]	; (5b4 <receiver+0x2ac>)
     40c:	f002 f99c 	bl	2748 <ser_out>
		proceed receiving;
     410:	2000      	movs	r0, #0
     412:	f001 fafb 	bl	1a0c <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\nRecord Deleted");
     416:	2004      	movs	r0, #4
     418:	4967      	ldr	r1, [pc, #412]	; (5b8 <receiver+0x2b0>)
     41a:	f002 f995 	bl	2748 <ser_out>
		proceed receiving;
     41e:	2000      	movs	r0, #0
     420:	f001 faf4 	bl	1a0c <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     424:	4b5d      	ldr	r3, [pc, #372]	; (59c <receiver+0x294>)
     426:	2005      	movs	r0, #5
     428:	681a      	ldr	r2, [r3, #0]
     42a:	4964      	ldr	r1, [pc, #400]	; (5bc <receiver+0x2b4>)
     42c:	f102 0308 	add.w	r3, r2, #8
     430:	7912      	ldrb	r2, [r2, #4]
     432:	f002 f9fb 	bl	282c <ser_outf>
		proceed receiving;
     436:	2000      	movs	r0, #0
     438:	f001 fae8 	bl	1a0c <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     43c:	4b57      	ldr	r3, [pc, #348]	; (59c <receiver+0x294>)
     43e:	2006      	movs	r0, #6
     440:	681b      	ldr	r3, [r3, #0]
     442:	495f      	ldr	r1, [pc, #380]	; (5c0 <receiver+0x2b8>)
     444:	791a      	ldrb	r2, [r3, #4]
     446:	f002 f9f1 	bl	282c <ser_outf>
		proceed receiving;
     44a:	2000      	movs	r0, #0
     44c:	f001 fade 	bl	1a0c <proceed>
	state response_3:
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	4b52      	ldr	r3, [pc, #328]	; (59c <receiver+0x294>)
     452:	2007      	movs	r0, #7
     454:	681b      	ldr	r3, [r3, #0]
     456:	495b      	ldr	r1, [pc, #364]	; (5c4 <receiver+0x2bc>)
     458:	791a      	ldrb	r2, [r3, #4]
     45a:	f002 f9e7 	bl	282c <ser_outf>
		proceed receiving;
     45e:	2000      	movs	r0, #0
     460:	f001 fad4 	bl	1a0c <proceed>
	state response_4:
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	4b4d      	ldr	r3, [pc, #308]	; (59c <receiver+0x294>)
     466:	2008      	movs	r0, #8
     468:	681b      	ldr	r3, [r3, #0]
     46a:	4957      	ldr	r1, [pc, #348]	; (5c8 <receiver+0x2c0>)
     46c:	791a      	ldrb	r2, [r3, #4]
     46e:	f002 f9dd 	bl	282c <ser_outf>
		proceed receiving;
     472:	2000      	movs	r0, #0
     474:	f001 faca 	bl	1a0c <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	4854      	ldr	r0, [pc, #336]	; (5cc <receiver+0x2c4>)
     47a:	f001 fcc1 	bl	1e00 <diag>
		// handle error
		// retry?
		proceed receiving;
     47e:	2000      	movs	r0, #0
     480:	f001 fac4 	bl	1a0c <proceed>
		
}
     484:	b012      	add	sp, #72	; 0x48
     486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48a:	201e      	movs	r0, #30
     48c:	f001 fc3e 	bl	1d0c <__pi_malloc>
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	682d      	ldr	r5, [r5, #0]
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     492:	7823      	ldrb	r3, [r4, #0]
     494:	79ea      	ldrb	r2, [r5, #7]
     496:	429a      	cmp	r2, r3
     498:	d103      	bne.n	4a2 <receiver+0x19a>
     49a:	886a      	ldrh	r2, [r5, #2]
     49c:	8863      	ldrh	r3, [r4, #2]
     49e:	429a      	cmp	r2, r3
     4a0:	d003      	beq.n	4aa <receiver+0x1a2>
					DEBUG_PRINT("\r\nCreate rec we broke");
     4a2:	484b      	ldr	r0, [pc, #300]	; (5d0 <receiver+0x2c8>)
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	f001 fcac 	bl	1e00 <diag>
					break;
     4a8:	e7a1      	b.n	3ee <receiver+0xe6>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4aa:	2114      	movs	r1, #20
     4ac:	4849      	ldr	r0, [pc, #292]	; (5d4 <receiver+0x2cc>)
     4ae:	f001 fca7 	bl	1e00 <diag>
					DEBUG_PRINT("\r\nCreate rec second if");
     4b2:	4849      	ldr	r0, [pc, #292]	; (5d8 <receiver+0x2d0>)
     4b4:	f001 fca4 	bl	1e00 <diag>
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	4620      	mov	r0, r4
     4ba:	79aa      	ldrb	r2, [r5, #6]
     4bc:	f105 0108 	add.w	r1, r5, #8
     4c0:	f7ff fe84 	bl	1cc <insert_record>
     4c4:	b1e8      	cbz	r0, 502 <receiver+0x1fa>
						DEBUG_PRINT("\r\nCreate rec third if");
     4c6:	4845      	ldr	r0, [pc, #276]	; (5dc <receiver+0x2d4>)
     4c8:	f001 fc9a 	bl	1e00 <diag>
						status = (uint8_t) SUCCESS;
     4cc:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nCreate rec out if");
     4ce:	4844      	ldr	r0, [pc, #272]	; (5e0 <receiver+0x2d8>)
     4d0:	f001 fc96 	bl	1e00 <diag>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	8860      	ldrh	r0, [r4, #2]
     4d6:	4c43      	ldr	r4, [pc, #268]	; (5e4 <receiver+0x2dc>)
     4d8:	79eb      	ldrb	r3, [r5, #7]
     4da:	79aa      	ldrb	r2, [r5, #6]
     4dc:	7969      	ldrb	r1, [r5, #5]
     4de:	9402      	str	r4, [sp, #8]
     4e0:	2400      	movs	r4, #0
     4e2:	e9cd 6400 	strd	r6, r4, [sp]
     4e6:	f7ff fee6 	bl	2b6 <assemble_response_message>
     4ea:	4604      	mov	r4, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	483e      	ldr	r0, [pc, #248]	; (5e8 <receiver+0x2e0>)
     4ee:	f001 fc87 	bl	1e00 <diag>
					call sender(response_message_2, done_case);
     4f2:	4621      	mov	r1, r4
     4f4:	482d      	ldr	r0, [pc, #180]	; (5ac <receiver+0x2a4>)
     4f6:	f001 fc5d 	bl	1db4 <__pi_fork>
     4fa:	2102      	movs	r1, #2
     4fc:	f001 fac4 	bl	1a88 <__pi_join>
     500:	e75c      	b.n	3bc <receiver+0xb4>
						DEBUG_PRINT("\r\nCreate rec third else");
     502:	483a      	ldr	r0, [pc, #232]	; (5ec <receiver+0x2e4>)
     504:	f001 fc7c 	bl	1e00 <diag>
						status = (uint8_t) DB_FULL;
     508:	e7e1      	b.n	4ce <receiver+0x1c6>
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50a:	201e      	movs	r0, #30
     50c:	f001 fbfe 	bl	1d0c <__pi_malloc>
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	4837      	ldr	r0, [pc, #220]	; (5f0 <receiver+0x2e8>)
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     512:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nDelete rec");/*
     514:	f001 fc74 	bl	1e00 <diag>
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	7820      	ldrb	r0, [r4, #0]
     51a:	79eb      	ldrb	r3, [r5, #7]
     51c:	8862      	ldrh	r2, [r4, #2]
     51e:	8869      	ldrh	r1, [r5, #2]
     520:	9000      	str	r0, [sp, #0]
     522:	4834      	ldr	r0, [pc, #208]	; (5f4 <receiver+0x2ec>)
     524:	f001 fc6c 	bl	1e00 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	886a      	ldrh	r2, [r5, #2]
     52a:	8863      	ldrh	r3, [r4, #2]
     52c:	429a      	cmp	r2, r3
     52e:	d103      	bne.n	538 <receiver+0x230>
     530:	79ea      	ldrb	r2, [r5, #7]
     532:	7823      	ldrb	r3, [r4, #0]
     534:	429a      	cmp	r2, r3
     536:	d001      	beq.n	53c <receiver+0x234>
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	482f      	ldr	r0, [pc, #188]	; (5f8 <receiver+0x2f0>)
     53a:	e7b3      	b.n	4a4 <receiver+0x19c>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	7a2b      	ldrb	r3, [r5, #8]
     53e:	2b28      	cmp	r3, #40	; 0x28
     540:	f63f af55 	bhi.w	3ee <receiver+0xe6>
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	482d      	ldr	r0, [pc, #180]	; (5fc <receiver+0x2f4>)
     546:	f001 fc5b 	bl	1e00 <diag>
					if (delete_record(node_db, delete_record_message->record_index)){
     54a:	4620      	mov	r0, r4
     54c:	7a29      	ldrb	r1, [r5, #8]
     54e:	f7ff fe8a 	bl	266 <delete_record>
     552:	b198      	cbz	r0, 57c <receiver+0x274>
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	482a      	ldr	r0, [pc, #168]	; (600 <receiver+0x2f8>)
     556:	f001 fc53 	bl	1e00 <diag>
						status = (uint8_t) SUCCESS;
     55a:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	4829      	ldr	r0, [pc, #164]	; (604 <receiver+0x2fc>)
     55e:	f001 fc4f 	bl	1e00 <diag>
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     562:	8860      	ldrh	r0, [r4, #2]
     564:	4c1f      	ldr	r4, [pc, #124]	; (5e4 <receiver+0x2dc>)
     566:	79eb      	ldrb	r3, [r5, #7]
     568:	79aa      	ldrb	r2, [r5, #6]
     56a:	7969      	ldrb	r1, [r5, #5]
     56c:	9402      	str	r4, [sp, #8]
     56e:	2400      	movs	r4, #0
     570:	e9cd 6400 	strd	r6, r4, [sp]
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	f7ff fe9f 	bl	2b6 <assemble_response_message>
     578:	4601      	mov	r1, r0
     57a:	e718      	b.n	3ae <receiver+0xa6>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	4822      	ldr	r0, [pc, #136]	; (608 <receiver+0x300>)
     57e:	f001 fc3f 	bl	1e00 <diag>
     582:	e7eb      	b.n	55c <receiver+0x254>
     584:	200006d8 	ldrdcs	r0, [r0], -r8
     588:	00004b82 	andeq	r4, r0, r2, lsl #23
     58c:	20000000 	andcs	r0, r0, r0
     590:	20000650 	andcs	r0, r0, r0, asr r6
     594:	00004b90 	muleq	r0, r0, fp
     598:	00004b9e 	muleq	r0, lr, fp
     59c:	20000654 	andcs	r0, r0, r4, asr r6
     5a0:	00004bac 	andeq	r4, r0, ip, lsr #23
     5a4:	00004bb6 			; <UNDEFINED> instruction: 0x00004bb6
     5a8:	00004bc4 	andeq	r4, r0, r4, asr #23
     5ac:	000000c9 	andeq	r0, r0, r9, asr #1
     5b0:	00004db6 			; <UNDEFINED> instruction: 0x00004db6
     5b4:	00004dc5 	andeq	r4, r0, r5, asr #27
     5b8:	00004dd2 	ldrdeq	r4, [r0], -r2
     5bc:	00004de3 	andeq	r4, r0, r3, ror #27
     5c0:	00004e01 	andeq	r4, r0, r1, lsl #28
     5c4:	00004e28 	andeq	r4, r0, r8, lsr #28
     5c8:	00004e50 	andeq	r4, r0, r0, asr lr
     5cc:	00004e77 	andeq	r4, r0, r7, ror lr
     5d0:	00004bd8 	ldrdeq	r4, [r0], -r8
     5d4:	00004bee 	andeq	r4, r0, lr, ror #23
     5d8:	00004c1a 	andeq	r4, r0, sl, lsl ip
     5dc:	00004c31 	andeq	r4, r0, r1, lsr ip
     5e0:	00004c5f 	andeq	r4, r0, pc, asr ip
     5e4:	2000068d 	andcs	r0, r0, sp, lsl #13
     5e8:	00004c73 	andeq	r4, r0, r3, ror ip
     5ec:	00004c47 	andeq	r4, r0, r7, asr #24
     5f0:	00004c92 	muleq	r0, r2, ip
     5f4:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     5f8:	00004cf1 	strdeq	r4, [r0], -r1
     5fc:	00004d07 	andeq	r4, r0, r7, lsl #26
     600:	00004d1e 	andeq	r4, r0, lr, lsl sp
     604:	00004d4b 	andeq	r4, r0, fp, asr #26
     608:	00004d34 	andeq	r4, r0, r4, lsr sp
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	201e      	movs	r0, #30
     60e:	f001 fb7d 	bl	1d0c <__pi_malloc>
				DEBUG_PRINT("\r\nretrieve rec");
     612:	483f      	ldr	r0, [pc, #252]	; (710 <receiver+0x408>)
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	f8d5 8000 	ldr.w	r8, [r5]
				DEBUG_PRINT("\r\nretrieve rec");
     618:	f001 fbf2 	bl	1e00 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	2300      	movs	r3, #0
     61e:	881a      	ldrh	r2, [r3, #0]
     620:	8863      	ldrh	r3, [r4, #2]
     622:	429a      	cmp	r2, r3
     624:	f47f aee3 	bne.w	3ee <receiver+0xe6>
     628:	2300      	movs	r3, #0
     62a:	795a      	ldrb	r2, [r3, #5]
     62c:	7823      	ldrb	r3, [r4, #0]
     62e:	429a      	cmp	r2, r3
     630:	f47f aedd 	bne.w	3ee <receiver+0xe6>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	f898 5008 	ldrb.w	r5, [r8, #8]
     638:	2d28      	cmp	r5, #40	; 0x28
     63a:	f63f aed8 	bhi.w	3ee <receiver+0xe6>
    return node->data_base.item_array[index];
     63e:	231c      	movs	r3, #28
     640:	fb03 4505 	mla	r5, r3, r5, r4
     644:	ae0b      	add	r6, sp, #44	; 0x2c
     646:	3504      	adds	r5, #4
     648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     64a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     64c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	af0b      	add	r7, sp, #44	; 0x2c
     652:	ad04      	add	r5, sp, #16
    return node->data_base.item_array[index];
     654:	e886 0007 	stmia.w	r6, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     65a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     65c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     660:	e885 0007 	stmia.w	r5, {r0, r1, r2}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	8860      	ldrh	r0, [r4, #2]
     666:	f10d 0411 	add.w	r4, sp, #17
     66a:	2500      	movs	r5, #0
     66c:	f898 3007 	ldrb.w	r3, [r8, #7]
     670:	f898 2006 	ldrb.w	r2, [r8, #6]
     674:	f898 1005 	ldrb.w	r1, [r8, #5]
     678:	9402      	str	r4, [sp, #8]
     67a:	2401      	movs	r4, #1
     67c:	e9cd 4500 	strd	r4, r5, [sp]
     680:	e778      	b.n	574 <receiver+0x26c>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     682:	682b      	ldr	r3, [r5, #0]
				DEBUG_PRINT("\r\nResponse");
     684:	4823      	ldr	r0, [pc, #140]	; (714 <receiver+0x40c>)
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     686:	3302      	adds	r3, #2
     688:	603b      	str	r3, [r7, #0]
				DEBUG_PRINT("\r\nResponse");
     68a:	f001 fbb9 	bl	1e00 <diag>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     68e:	683b      	ldr	r3, [r7, #0]
     690:	8862      	ldrh	r2, [r4, #2]
     692:	8819      	ldrh	r1, [r3, #0]
     694:	4291      	cmp	r1, r2
     696:	f47f aeaa 	bne.w	3ee <receiver+0xe6>
     69a:	795a      	ldrb	r2, [r3, #5]
     69c:	7823      	ldrb	r3, [r4, #0]
     69e:	429a      	cmp	r2, r3
     6a0:	f47f aea5 	bne.w	3ee <receiver+0xe6>
				if(!response_flag){
     6a4:	481c      	ldr	r0, [pc, #112]	; (718 <receiver+0x410>)
     6a6:	8803      	ldrh	r3, [r0, #0]
     6a8:	b91b      	cbnz	r3, 6b2 <receiver+0x3aa>
					response_flag=1;
     6aa:	2301      	movs	r3, #1
     6ac:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     6ae:	f001 f9d1 	bl	1a54 <__pi_trigger>
				switch(response_message_5->status){
     6b2:	683a      	ldr	r2, [r7, #0]
     6b4:	7993      	ldrb	r3, [r2, #6]
     6b6:	3b01      	subs	r3, #1
     6b8:	2b03      	cmp	r3, #3
     6ba:	f63f ae98 	bhi.w	3ee <receiver+0xe6>
     6be:	e8df f003 	tbb	[pc, r3]
     6c2:	1c1a1802 	ldcne	8, cr1, [sl], {2}
						if (response_checker[0] == response_message_5->request_number){
     6c6:	4b15      	ldr	r3, [pc, #84]	; (71c <receiver+0x414>)
     6c8:	78d2      	ldrb	r2, [r2, #3]
     6ca:	6819      	ldr	r1, [r3, #0]
     6cc:	4291      	cmp	r1, r2
     6ce:	f47f ae8e 	bne.w	3ee <receiver+0xe6>
							switch(response_checker[1]){
     6d2:	685b      	ldr	r3, [r3, #4]
     6d4:	2b03      	cmp	r3, #3
     6d6:	d008      	beq.n	6ea <receiver+0x3e2>
     6d8:	2b04      	cmp	r3, #4
     6da:	d008      	beq.n	6ee <receiver+0x3e6>
     6dc:	2b02      	cmp	r3, #2
     6de:	f47f ae86 	bne.w	3ee <receiver+0xe6>
									proceed response_1_create;
     6e2:	2003      	movs	r0, #3
						proceed response_4;
     6e4:	f001 f992 	bl	1a0c <proceed>
						break;
     6e8:	e681      	b.n	3ee <receiver+0xe6>
									proceed response_1_delete;
     6ea:	2004      	movs	r0, #4
     6ec:	e7fa      	b.n	6e4 <receiver+0x3dc>
									proceed response_1_retrieve;
     6ee:	2005      	movs	r0, #5
     6f0:	e7f8      	b.n	6e4 <receiver+0x3dc>
						proceed response_2;
     6f2:	2006      	movs	r0, #6
     6f4:	e7f6      	b.n	6e4 <receiver+0x3dc>
						proceed response_3;
     6f6:	2007      	movs	r0, #7
     6f8:	e7f4      	b.n	6e4 <receiver+0x3dc>
						proceed response_4;
     6fa:	2008      	movs	r0, #8
     6fc:	e7f2      	b.n	6e4 <receiver+0x3dc>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     6fe:	4631      	mov	r1, r6
     700:	4807      	ldr	r0, [pc, #28]	; (720 <receiver+0x418>)
     702:	f001 fb7d 	bl	1e00 <diag>
				break;
     706:	e672      	b.n	3ee <receiver+0xe6>
}
     708:	f001 f8f8 	bl	18fc <__pi_badstate>
     70c:	e6ba      	b.n	484 <receiver+0x17c>
     70e:	bf00      	nop
     710:	00004d69 	andeq	r4, r0, r9, ror #26
     714:	00004d78 	andeq	r4, r0, r8, ror sp
     718:	2000054c 	andcs	r0, r0, ip, asr #10
     71c:	20000648 	andcs	r0, r0, r8, asr #12
     720:	00004d83 	andeq	r4, r0, r3, lsl #27

00000724 <root>:

fsm root {
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	b085      	sub	sp, #20
     728:	2820      	cmp	r0, #32
     72a:	f200 829f 	bhi.w	c6c <root+0x548>
     72e:	e8df f010 	tbh	[pc, r0, lsl #1]
     732:	00450021 	subeq	r0, r5, r1, lsr #32
     736:	00740052 	rsbseq	r0, r4, r2, asr r0
     73a:	00890078 	addeq	r0, r9, r8, ror r0
     73e:	00b0008d 	adcseq	r0, r0, sp, lsl #1
     742:	00c800bb 	strheq	r0, [r8], #11
     746:	01390101 	teqeq	r9, r1, lsl #2
     74a:	0151014d 	cmpeq	r1, sp, asr #2
     74e:	01670163 	cmneq	r7, r3, ror #2
     752:	0194016c 	orrseq	r0, r4, ip, ror #2
     756:	01aa0198 			; <UNDEFINED> instruction: 0x01aa0198
     75a:	01bf01ae 			; <UNDEFINED> instruction: 0x01bf01ae
     75e:	01e701e3 	mvneq	r0, r3, ror #3
     762:	01fd01f9 	ldrsheq	r0, [sp, #25]!
     766:	023e020e 	eorseq	r0, lr, #-536870912	; 0xe0000000
     76a:	025c0242 	subseq	r0, ip, #536870916	; 0x20000004
     76e:	028c0263 	addeq	r0, ip, #805306374	; 0x30000006
     772:	4c780293 	lfmmi	f0, 2, [r8], #-588	; 0xfffffdb4
	int i = 0;
	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = init_node(node_db);
     776:	6820      	ldr	r0, [r4, #0]
     778:	f7ff fd04 	bl	184 <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     77c:	21fa      	movs	r1, #250	; 0xfa
		node_db = init_node(node_db);
     77e:	6020      	str	r0, [r4, #0]
		phys_cc1350(0, MAX_PKT_LEN);
     780:	2000      	movs	r0, #0
     782:	f002 fc5d 	bl	3040 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     786:	4975      	ldr	r1, [pc, #468]	; (95c <root+0x238>)
     788:	2000      	movs	r0, #0
     78a:	f001 fd0d 	bl	21a8 <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     78e:	2200      	movs	r2, #0
     790:	f64f 70ff 	movw	r0, #65535	; 0xffff
     794:	4611      	mov	r1, r2
     796:	f001 fca7 	bl	20e8 <tcv_open>
     79a:	4a71      	ldr	r2, [pc, #452]	; (960 <root+0x23c>)

		if (sfd < 0) {
     79c:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     79e:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     7a0:	da04      	bge.n	7ac <root+0x88>
			diag("Cannot open tcv interface");
     7a2:	4870      	ldr	r0, [pc, #448]	; (964 <root+0x240>)
     7a4:	f001 fb2c 	bl	1e00 <diag>
			halt();
     7a8:	f000 fff6 	bl	1798 <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	2104      	movs	r1, #4
     7ae:	2200      	movs	r2, #0
     7b0:	f001 fdc0 	bl	2334 <tcv_control>

		runfsm receiver(node_db);
     7b4:	6821      	ldr	r1, [r4, #0]
     7b6:	486c      	ldr	r0, [pc, #432]	; (968 <root+0x244>)
     7b8:	f001 fafc 	bl	1db4 <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	2028      	movs	r0, #40	; 0x28
     7be:	4b66      	ldr	r3, [pc, #408]	; (958 <root+0x234>)
     7c0:	6819      	ldr	r1, [r3, #0]
     7c2:	780b      	ldrb	r3, [r1, #0]
     7c4:	884a      	ldrh	r2, [r1, #2]
     7c6:	9001      	str	r0, [sp, #4]
     7c8:	f891 1464 	ldrb.w	r1, [r1, #1124]	; 0x464
     7cc:	2001      	movs	r0, #1
     7ce:	9100      	str	r1, [sp, #0]
     7d0:	4966      	ldr	r1, [pc, #408]	; (96c <root+0x248>)
     7d2:	f002 f82b 	bl	282c <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     7d6:	4c66      	ldr	r4, [pc, #408]	; (970 <root+0x24c>)
     7d8:	2002      	movs	r0, #2
     7da:	4622      	mov	r2, r4
     7dc:	4965      	ldr	r1, [pc, #404]	; (974 <root+0x250>)
     7de:	f002 f84f 	bl	2880 <ser_inf>
		switch(CHOICE) {
     7e2:	7823      	ldrb	r3, [r4, #0]
     7e4:	2b53      	cmp	r3, #83	; 0x53
     7e6:	d80f      	bhi.n	808 <root+0xe4>
     7e8:	2b42      	cmp	r3, #66	; 0x42
     7ea:	d911      	bls.n	810 <root+0xec>
     7ec:	3b43      	subs	r3, #67	; 0x43
     7ee:	2b10      	cmp	r3, #16
     7f0:	d80e      	bhi.n	810 <root+0xec>
     7f2:	e8df f003 	tbb	[pc, r3]
     7f6:	838d8785 	orrhi	r8, sp, #34865152	; 0x2140000
     7fa:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     7fe:	810d0d0d 	tsthi	sp, sp, lsl #26
     802:	890d0d0d 	stmdbhi	sp, {r0, r2, r3, r8, sl, fp}
     806:	3b63008b 	blcc	18c0a3a <__ccfg+0x18a0a92>
     80a:	b2da      	uxtb	r2, r3
     80c:	2a10      	cmp	r2, #16
     80e:	d9ee      	bls.n	7ee <root+0xca>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     810:	2001      	movs	r0, #1
     812:	e000      	b.n	816 <root+0xf2>
				proceed get_new_group_id;
     814:	2003      	movs	r0, #3
				proceed menu;
     816:	f001 f8f9 	bl	1a0c <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81a:	2003      	movs	r0, #3
     81c:	4956      	ldr	r1, [pc, #344]	; (978 <root+0x254>)
     81e:	f001 ff93 	bl	2748 <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		uint16_t NEW_NODE_GID;
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     822:	f10d 020e 	add.w	r2, sp, #14
     826:	4955      	ldr	r1, [pc, #340]	; (97c <root+0x258>)
     828:	2004      	movs	r0, #4
     82a:	f002 f829 	bl	2880 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     82e:	4854      	ldr	r0, [pc, #336]	; (980 <root+0x25c>)
     830:	f001 fae6 	bl	1e00 <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	4b48      	ldr	r3, [pc, #288]	; (958 <root+0x234>)
    node->gid = gid; 
     836:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     83a:	681b      	ldr	r3, [r3, #0]
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     83c:	2001      	movs	r0, #1
    node->gid = gid; 
     83e:	805a      	strh	r2, [r3, #2]
		proceed menu;
     840:	f001 f8e4 	bl	1a0c <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	2005      	movs	r0, #5
     846:	494f      	ldr	r1, [pc, #316]	; (984 <root+0x260>)
     848:	f001 ff7e 	bl	2748 <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	4d42      	ldr	r5, [pc, #264]	; (958 <root+0x234>)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     84e:	494b      	ldr	r1, [pc, #300]	; (97c <root+0x258>)
     850:	f10d 020e 	add.w	r2, sp, #14
     854:	2006      	movs	r0, #6
     856:	f002 f813 	bl	2880 <ser_inf>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85a:	682a      	ldr	r2, [r5, #0]
     85c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    node->id = id;
     860:	7011      	strb	r1, [r2, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		// Check to see if the number given is within range.
		if((node_db->id < 1) || (node_db->id > 25)){
     862:	682a      	ldr	r2, [r5, #0]
     864:	7812      	ldrb	r2, [r2, #0]
     866:	3a01      	subs	r2, #1
     868:	2a18      	cmp	r2, #24
     86a:	d907      	bls.n	87c <root+0x158>
			strncpy(reason, "Out of Range", 50);
     86c:	4846      	ldr	r0, [pc, #280]	; (988 <root+0x264>)
     86e:	2232      	movs	r2, #50	; 0x32
     870:	4946      	ldr	r1, [pc, #280]	; (98c <root+0x268>)
     872:	f001 f958 	bl	1b26 <__pi_strncpy>
			proceed invalid_node_id;
     876:	2007      	movs	r0, #7
     878:	f001 f8c8 	bl	1a0c <proceed>
fsm root {
     87c:	2400      	movs	r4, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < node_db->index; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     87e:	4e44      	ldr	r6, [pc, #272]	; (990 <root+0x26c>)
     880:	4f41      	ldr	r7, [pc, #260]	; (988 <root+0x264>)
		for(int i = 0; i < node_db->index; i++){
     882:	682b      	ldr	r3, [r5, #0]
     884:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
     888:	42a2      	cmp	r2, r4
     88a:	dc43      	bgt.n	914 <root+0x1f0>
				proceed invalid_node_id;
			};
		};
		
		proceed menu;
     88c:	2001      	movs	r0, #1
     88e:	f001 f8bd 	bl	1a0c <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     892:	4b31      	ldr	r3, [pc, #196]	; (958 <root+0x234>)
     894:	2007      	movs	r0, #7
     896:	681a      	ldr	r2, [r3, #0]
     898:	493e      	ldr	r1, [pc, #248]	; (994 <root+0x270>)
     89a:	4b3b      	ldr	r3, [pc, #236]	; (988 <root+0x264>)
     89c:	7812      	ldrb	r2, [r2, #0]
     89e:	f001 ffc5 	bl	282c <ser_outf>
		proceed get_new_node_id;
     8a2:	2005      	movs	r0, #5
     8a4:	f001 f8b2 	bl	1a0c <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     8a8:	4b2b      	ldr	r3, [pc, #172]	; (958 <root+0x234>)
     8aa:	6818      	ldr	r0, [r3, #0]
     8ac:	f7ff fcd0 	bl	250 <clear_node_neighbour_array>
     8b0:	b938      	cbnz	r0, 8c2 <root+0x19e>
			strncpy(reason, "Error Clearing Node Array", 50);
     8b2:	4835      	ldr	r0, [pc, #212]	; (988 <root+0x264>)
     8b4:	2232      	movs	r2, #50	; 0x32
     8b6:	4938      	ldr	r1, [pc, #224]	; (998 <root+0x274>)
     8b8:	f001 f935 	bl	1b26 <__pi_strncpy>
			proceed error;
     8bc:	2020      	movs	r0, #32
     8be:	f001 f8a5 	bl	1a0c <proceed>
		};

	state find_proto_start:

		struct ResponseMessage *request_packet;
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c2:	201e      	movs	r0, #30
     8c4:	f001 fa22 	bl	1d0c <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     8ca:	4e23      	ldr	r6, [pc, #140]	; (958 <root+0x234>)
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     8ce:	6833      	ldr	r3, [r6, #0]
     8d0:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     8d2:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     8d4:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     8d6:	f7ff fc70 	bl	1ba <generate_request_num>
     8da:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     8dc:	6833      	ldr	r3, [r6, #0]
		request_packet->receiver_id=0;

		call sender(request_packet, wait_discovery);
     8de:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     8e0:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     8e2:	482e      	ldr	r0, [pc, #184]	; (99c <root+0x278>)
		request_packet->sender_id = node_db->id;
     8e4:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     8e6:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     8e8:	f001 fa64 	bl	1db4 <__pi_fork>
     8ec:	210a      	movs	r1, #10
     8ee:	f001 f8cb 	bl	1a88 <__pi_join>
     8f2:	b1f8      	cbz	r0, 934 <root+0x210>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     8f4:	f000 fe24 	bl	1540 <__pi_release>
				proceed get_new_node_id;
     8f8:	2005      	movs	r0, #5
     8fa:	e78c      	b.n	816 <root+0xf2>
				proceed clear_neighbour_array;
     8fc:	2008      	movs	r0, #8
     8fe:	e78a      	b.n	816 <root+0xf2>
				proceed create_proto_start;
     900:	200c      	movs	r0, #12
     902:	e788      	b.n	816 <root+0xf2>
				proceed start_delete_proto;
     904:	2011      	movs	r0, #17
     906:	e786      	b.n	816 <root+0xf2>
				proceed start_retrieve_proto;
     908:	2016      	movs	r0, #22
     90a:	e784      	b.n	816 <root+0xf2>
				proceed display_db;
     90c:	201b      	movs	r0, #27
     90e:	e782      	b.n	816 <root+0xf2>
				proceed del_local;
     910:	201d      	movs	r0, #29
     912:	e780      	b.n	816 <root+0xf2>
			if(node_db->id == node_db->nnodes[i]){
     914:	1919      	adds	r1, r3, r4
     916:	781a      	ldrb	r2, [r3, #0]
     918:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     91c:	429a      	cmp	r2, r3
     91e:	d107      	bne.n	930 <root+0x20c>
				strncpy(reason, "ID is already in use", 50);
     920:	4638      	mov	r0, r7
     922:	2232      	movs	r2, #50	; 0x32
     924:	4631      	mov	r1, r6
     926:	f001 f8fe 	bl	1b26 <__pi_strncpy>
				proceed invalid_node_id;
     92a:	2007      	movs	r0, #7
     92c:	f001 f86e 	bl	1a0c <proceed>
		for(int i = 0; i < node_db->index; i++){
     930:	3401      	adds	r4, #1
     932:	e7a6      	b.n	882 <root+0x15e>
		if (discovery_wait_flag == 0){
     934:	4b1a      	ldr	r3, [pc, #104]	; (9a0 <root+0x27c>)
     936:	681a      	ldr	r2, [r3, #0]
     938:	b93a      	cbnz	r2, 94a <root+0x226>
			discovery_wait_flag=1;
     93a:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     93c:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     93e:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     940:	f640 30b8 	movw	r0, #3000	; 0xbb8
     944:	f001 f8b2 	bl	1aac <delay>
     948:	e7d4      	b.n	8f4 <root+0x1d0>
		}
		if (discovery_wait_flag == 1){
     94a:	2a01      	cmp	r2, #1
     94c:	d12a      	bne.n	9a4 <root+0x280>
			discovery_wait_flag=0;
     94e:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     950:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     952:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     954:	e7f4      	b.n	940 <root+0x21c>
     956:	bf00      	nop
     958:	200006a4 	andcs	r0, r0, r4, lsr #13
     95c:	00005d60 	andeq	r5, r0, r0, ror #26
     960:	20000000 	andcs	r0, r0, r0
     964:	00004eac 	andeq	r4, r0, ip, lsr #29
     968:	00000309 	andeq	r0, r0, r9, lsl #6
     96c:	00004ec6 	andeq	r4, r0, r6, asr #29
     970:	200006a1 	andcs	r0, r0, r1, lsr #13
     974:	00004fb2 			; <UNDEFINED> instruction: 0x00004fb2
     978:	00004fb5 			; <UNDEFINED> instruction: 0x00004fb5
     97c:	00004fd6 	ldrdeq	r4, [r0], -r6
     980:	00004fd9 	ldrdeq	r4, [r0], -r9
     984:	00004fef 	andeq	r4, r0, pc, ror #31
     988:	20000658 	andcs	r0, r0, r8, asr r6
     98c:	00005022 	andeq	r5, r0, r2, lsr #32
     990:	0000502f 	andeq	r5, r0, pc, lsr #32
     994:	00005044 	andeq	r5, r0, r4, asr #32
     998:	00005071 	andeq	r5, r0, r1, ror r0
     99c:	000000c9 	andeq	r0, r0, r9, asr #1
     9a0:	20000540 	andcs	r0, r0, r0, asr #10
			release;
		}
	
	state display_neighbour_nodes:
		if(node_db->index == 0){
     9a4:	4db3      	ldr	r5, [pc, #716]	; (c74 <root+0x550>)
     9a6:	682b      	ldr	r3, [r5, #0]
     9a8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
     9ac:	b913      	cbnz	r3, 9b4 <root+0x290>
			proceed menu;
     9ae:	2001      	movs	r0, #1
     9b0:	f001 f82c 	bl	1a0c <proceed>
fsm root {
     9b4:	2400      	movs	r4, #0
		}
		for (int i=0; i<node_db->index; i++) {
			if(i == 0){
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     9b6:	4eb0      	ldr	r6, [pc, #704]	; (c78 <root+0x554>)
			}
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	4fb0      	ldr	r7, [pc, #704]	; (c7c <root+0x558>)
		for (int i=0; i<node_db->index; i++) {
     9ba:	682b      	ldr	r3, [r5, #0]
     9bc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
     9c0:	42a3      	cmp	r3, r4
     9c2:	f300 8123 	bgt.w	c0c <root+0x4e8>
		}
		proceed menu;
     9c6:	2001      	movs	r0, #1
     9c8:	f001 f820 	bl	1a0c <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	200c      	movs	r0, #12
     9ce:	49ac      	ldr	r1, [pc, #688]	; (c80 <root+0x55c>)
     9d0:	f001 feba 	bl	2748 <ser_out>

	state get_id_for_create:
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	4cab      	ldr	r4, [pc, #684]	; (c84 <root+0x560>)
     9d6:	200d      	movs	r0, #13
     9d8:	4622      	mov	r2, r4
     9da:	49ab      	ldr	r1, [pc, #684]	; (c88 <root+0x564>)
     9dc:	f001 ff50 	bl	2880 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	7823      	ldrb	r3, [r4, #0]
     9e2:	3b01      	subs	r3, #1
     9e4:	2b18      	cmp	r3, #24
     9e6:	d907      	bls.n	9f8 <root+0x2d4>
			strncpy(reason, "Error: improper ID", 50);
     9e8:	48a8      	ldr	r0, [pc, #672]	; (c8c <root+0x568>)
     9ea:	2232      	movs	r2, #50	; 0x32
     9ec:	49a8      	ldr	r1, [pc, #672]	; (c90 <root+0x56c>)
     9ee:	f001 f89a 	bl	1b26 <__pi_strncpy>
			proceed error;
     9f2:	2020      	movs	r0, #32
     9f4:	f001 f80a 	bl	1a0c <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	200e      	movs	r0, #14
     9fa:	49a6      	ldr	r1, [pc, #664]	; (c94 <root+0x570>)
     9fc:	f001 fea4 	bl	2748 <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	2214      	movs	r2, #20
     a02:	200f      	movs	r0, #15
     a04:	49a4      	ldr	r1, [pc, #656]	; (c98 <root+0x574>)
     a06:	f001 fed5 	bl	27b4 <ser_in>

	state init_create_record_message:

		struct ResponseMessage *create_message;
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0a:	201e      	movs	r0, #30
     a0c:	f001 f97e 	bl	1d0c <__pi_malloc>
		create_message->gid = node_db->gid;
     a10:	4d98      	ldr	r5, [pc, #608]	; (c74 <root+0x550>)
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a12:	4604      	mov	r4, r0
		create_message->gid = node_db->gid;
     a14:	682b      	ldr	r3, [r5, #0]
     a16:	885b      	ldrh	r3, [r3, #2]
     a18:	8003      	strh	r3, [r0, #0]
		create_message->tpe = CREATE_RECORD;
     a1a:	2302      	movs	r3, #2
     a1c:	7083      	strb	r3, [r0, #2]
		create_message->request_number = generate_request_num();
     a1e:	f7ff fbcc 	bl	1ba <generate_request_num>
     a22:	70e0      	strb	r0, [r4, #3]
		create_message->sender_id = node_db->id;
     a24:	682b      	ldr	r3, [r5, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     a26:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     a28:	781b      	ldrb	r3, [r3, #0]
		strncpy(create_message->record, user_provided_record, 20);
     a2a:	499b      	ldr	r1, [pc, #620]	; (c98 <root+0x574>)
		create_message->sender_id = node_db->id;
     a2c:	7123      	strb	r3, [r4, #4]
		create_message->receiver_id = user_provided_receiver_id;
     a2e:	4b95      	ldr	r3, [pc, #596]	; (c84 <root+0x560>)
		strncpy(create_message->record, user_provided_record, 20);
     a30:	f104 0008 	add.w	r0, r4, #8
		create_message->receiver_id = user_provided_receiver_id;
     a34:	781b      	ldrb	r3, [r3, #0]
     a36:	7163      	strb	r3, [r4, #5]
		strncpy(create_message->record, user_provided_record, 20);
     a38:	f001 f875 	bl	1b26 <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     a3c:	78e2      	ldrb	r2, [r4, #3]
     a3e:	4b97      	ldr	r3, [pc, #604]	; (c9c <root+0x578>)
		response_checker[1] = create_message->tpe;

		call sender(create_message, wait);
     a40:	4621      	mov	r1, r4
		response_checker[0] = create_message->request_number;
     a42:	601a      	str	r2, [r3, #0]
		response_checker[1] = create_message->tpe;
     a44:	78a2      	ldrb	r2, [r4, #2]
		call sender(create_message, wait);
     a46:	4896      	ldr	r0, [pc, #600]	; (ca0 <root+0x57c>)
		response_checker[1] = create_message->tpe;
     a48:	605a      	str	r2, [r3, #4]
		call sender(create_message, wait);
     a4a:	f001 f9b3 	bl	1db4 <__pi_fork>
     a4e:	211e      	movs	r1, #30
     a50:	f001 f81a 	bl	1a88 <__pi_join>
     a54:	2800      	cmp	r0, #0
     a56:	f47f af4d 	bne.w	8f4 <root+0x1d0>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5a:	2011      	movs	r0, #17
     a5c:	4988      	ldr	r1, [pc, #544]	; (c80 <root+0x55c>)
     a5e:	f001 fe73 	bl	2748 <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a62:	4c88      	ldr	r4, [pc, #544]	; (c84 <root+0x560>)
     a64:	2012      	movs	r0, #18
     a66:	4622      	mov	r2, r4
     a68:	4987      	ldr	r1, [pc, #540]	; (c88 <root+0x564>)
     a6a:	f001 ff09 	bl	2880 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a6e:	7823      	ldrb	r3, [r4, #0]
     a70:	3b01      	subs	r3, #1
     a72:	2b18      	cmp	r3, #24
     a74:	d907      	bls.n	a86 <root+0x362>
			strncpy(reason, "Error: improper node ID", 50);
     a76:	4885      	ldr	r0, [pc, #532]	; (c8c <root+0x568>)
     a78:	2232      	movs	r2, #50	; 0x32
     a7a:	498a      	ldr	r1, [pc, #552]	; (ca4 <root+0x580>)
     a7c:	f001 f853 	bl	1b26 <__pi_strncpy>
			proceed error;
     a80:	2020      	movs	r0, #32
     a82:	f000 ffc3 	bl	1a0c <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a86:	2013      	movs	r0, #19
     a88:	4987      	ldr	r1, [pc, #540]	; (ca8 <root+0x584>)
     a8a:	f001 fe5d 	bl	2748 <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a8e:	4c87      	ldr	r4, [pc, #540]	; (cac <root+0x588>)
     a90:	2014      	movs	r0, #20
     a92:	4622      	mov	r2, r4
     a94:	497c      	ldr	r1, [pc, #496]	; (c88 <root+0x564>)
     a96:	f001 fef3 	bl	2880 <ser_inf>

		if (us_pr_in < 0 || us_pr_in > 40){
     a9a:	7823      	ldrb	r3, [r4, #0]
     a9c:	2b28      	cmp	r3, #40	; 0x28
     a9e:	d907      	bls.n	ab0 <root+0x38c>
			strncpy(reason, "Error: invalid index", 50);
     aa0:	487a      	ldr	r0, [pc, #488]	; (c8c <root+0x568>)
     aa2:	2232      	movs	r2, #50	; 0x32
     aa4:	4982      	ldr	r1, [pc, #520]	; (cb0 <root+0x58c>)
     aa6:	f001 f83e 	bl	1b26 <__pi_strncpy>
			proceed error;
     aaa:	2020      	movs	r0, #32
     aac:	f000 ffae 	bl	1a0c <proceed>
		};

	state init_delete_record_message:

		struct ResponseMessage *delete_record;
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	201e      	movs	r0, #30
     ab2:	f001 f92b 	bl	1d0c <__pi_malloc>
		delete_record->gid = node_db->gid;
     ab6:	4d6f      	ldr	r5, [pc, #444]	; (c74 <root+0x550>)
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	4604      	mov	r4, r0
		delete_record->gid = node_db->gid;
     aba:	682b      	ldr	r3, [r5, #0]
     abc:	885b      	ldrh	r3, [r3, #2]
     abe:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     ac0:	2303      	movs	r3, #3
     ac2:	7083      	strb	r3, [r0, #2]
		delete_record->request_number = generate_request_num();
     ac4:	f7ff fb79 	bl	1ba <generate_request_num>
     ac8:	70e0      	strb	r0, [r4, #3]
		delete_record->sender_id = node_db->id;
     aca:	682b      	ldr	r3, [r5, #0]

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
		response_checker[1] = delete_record->tpe;

		call sender(delete_record, wait);
     acc:	4621      	mov	r1, r4
		delete_record->sender_id = node_db->id;
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	7123      	strb	r3, [r4, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     ad2:	4b6c      	ldr	r3, [pc, #432]	; (c84 <root+0x560>)
     ad4:	781b      	ldrb	r3, [r3, #0]
     ad6:	7163      	strb	r3, [r4, #5]
		delete_record->record_index = us_pr_in;
     ad8:	4b74      	ldr	r3, [pc, #464]	; (cac <root+0x588>)
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	7723      	strb	r3, [r4, #28]
		response_checker[0] = delete_record->request_number;
     ade:	4b6f      	ldr	r3, [pc, #444]	; (c9c <root+0x578>)
     ae0:	6018      	str	r0, [r3, #0]
		response_checker[1] = delete_record->tpe;
     ae2:	78a2      	ldrb	r2, [r4, #2]
		call sender(delete_record, wait);
     ae4:	486e      	ldr	r0, [pc, #440]	; (ca0 <root+0x57c>)
		response_checker[1] = delete_record->tpe;
     ae6:	605a      	str	r2, [r3, #4]
		call sender(delete_record, wait);
     ae8:	f001 f964 	bl	1db4 <__pi_fork>
     aec:	211e      	movs	r1, #30
     aee:	f000 ffcb 	bl	1a88 <__pi_join>
     af2:	2800      	cmp	r0, #0
     af4:	f47f aefe 	bne.w	8f4 <root+0x1d0>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	2016      	movs	r0, #22
     afa:	4961      	ldr	r1, [pc, #388]	; (c80 <root+0x55c>)
     afc:	f001 fe24 	bl	2748 <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	4c6c      	ldr	r4, [pc, #432]	; (cb4 <root+0x590>)
     b02:	2017      	movs	r0, #23
     b04:	4622      	mov	r2, r4
     b06:	4960      	ldr	r1, [pc, #384]	; (c88 <root+0x564>)
     b08:	f001 feba 	bl	2880 <ser_inf>

		if (get_id < 1 || get_id > 25){
     b0c:	7823      	ldrb	r3, [r4, #0]
     b0e:	3b01      	subs	r3, #1
     b10:	2b18      	cmp	r3, #24
     b12:	d907      	bls.n	b24 <root+0x400>
			strncpy(reason, "Error: improper node ID", 50);
     b14:	485d      	ldr	r0, [pc, #372]	; (c8c <root+0x568>)
     b16:	2232      	movs	r2, #50	; 0x32
     b18:	4962      	ldr	r1, [pc, #392]	; (ca4 <root+0x580>)
     b1a:	f001 f804 	bl	1b26 <__pi_strncpy>
			proceed error;
     b1e:	2020      	movs	r0, #32
     b20:	f000 ff74 	bl	1a0c <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	2018      	movs	r0, #24
     b26:	4960      	ldr	r1, [pc, #384]	; (ca8 <root+0x584>)
     b28:	f001 fe0e 	bl	2748 <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	4c62      	ldr	r4, [pc, #392]	; (cb8 <root+0x594>)
     b2e:	2019      	movs	r0, #25
     b30:	4622      	mov	r2, r4
     b32:	4962      	ldr	r1, [pc, #392]	; (cbc <root+0x598>)
     b34:	f001 fea4 	bl	2880 <ser_inf>

		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	7823      	ldrb	r3, [r4, #0]
     b3a:	2b28      	cmp	r3, #40	; 0x28
     b3c:	d907      	bls.n	b4e <root+0x42a>
			strncpy(reason, "Error: invalid index", 50);
     b3e:	4853      	ldr	r0, [pc, #332]	; (c8c <root+0x568>)
     b40:	2232      	movs	r2, #50	; 0x32
     b42:	495b      	ldr	r1, [pc, #364]	; (cb0 <root+0x58c>)
     b44:	f000 ffef 	bl	1b26 <__pi_strncpy>
			proceed error;
     b48:	2020      	movs	r0, #32
     b4a:	f000 ff5f 	bl	1a0c <proceed>
		};

	state retrieve_proto:

		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b4e:	4d59      	ldr	r5, [pc, #356]	; (cb4 <root+0x590>)
     b50:	485b      	ldr	r0, [pc, #364]	; (cc0 <root+0x59c>)
     b52:	7829      	ldrb	r1, [r5, #0]
     b54:	f001 f954 	bl	1e00 <diag>

		struct ResponseMessage *retrieve_record;
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	201e      	movs	r0, #30
     b5a:	f001 f8d7 	bl	1d0c <__pi_malloc>
		retrieve_record->gid = node_db->gid;
     b5e:	4e45      	ldr	r6, [pc, #276]	; (c74 <root+0x550>)
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b60:	4604      	mov	r4, r0
		retrieve_record->gid = node_db->gid;
     b62:	6833      	ldr	r3, [r6, #0]
     b64:	885b      	ldrh	r3, [r3, #2]
     b66:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	2304      	movs	r3, #4
     b6a:	7083      	strb	r3, [r0, #2]
		retrieve_record->request_number = generate_request_num();
     b6c:	f7ff fb25 	bl	1ba <generate_request_num>
     b70:	70e0      	strb	r0, [r4, #3]
		retrieve_record->sender_id = node_db->id;
     b72:	6833      	ldr	r3, [r6, #0]
		retrieve_record->receiver_id = get_id;
     b74:	7829      	ldrb	r1, [r5, #0]
		retrieve_record->sender_id = node_db->id;
     b76:	781b      	ldrb	r3, [r3, #0]
		retrieve_record->record_index = beg_for_index;
		// NOTE: something to do with padding here?
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	4851      	ldr	r0, [pc, #324]	; (cc0 <root+0x59c>)
		retrieve_record->sender_id = node_db->id;
     b7a:	7123      	strb	r3, [r4, #4]
		retrieve_record->record_index = beg_for_index;
     b7c:	4b4e      	ldr	r3, [pc, #312]	; (cb8 <root+0x594>)
		retrieve_record->receiver_id = get_id;
     b7e:	7161      	strb	r1, [r4, #5]
		retrieve_record->record_index = beg_for_index;
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	7723      	strb	r3, [r4, #28]
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	f001 f93c 	bl	1e00 <diag>
		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     b88:	4b44      	ldr	r3, [pc, #272]	; (c9c <root+0x578>)
     b8a:	78e2      	ldrb	r2, [r4, #3]
		response_checker[1] = retrieve_record->tpe;
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	484c      	ldr	r0, [pc, #304]	; (cc0 <root+0x59c>)
		response_checker[0] = retrieve_record->request_number;
     b8e:	601a      	str	r2, [r3, #0]
		response_checker[1] = retrieve_record->tpe;
     b90:	78a2      	ldrb	r2, [r4, #2]
     b92:	605a      	str	r2, [r3, #4]
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	7961      	ldrb	r1, [r4, #5]
     b96:	f001 f933 	bl	1e00 <diag>
		
		call sender(retrieve_record, wait);
     b9a:	4621      	mov	r1, r4
     b9c:	4840      	ldr	r0, [pc, #256]	; (ca0 <root+0x57c>)
     b9e:	f001 f909 	bl	1db4 <__pi_fork>
     ba2:	211e      	movs	r1, #30
     ba4:	f000 ff70 	bl	1a88 <__pi_join>
     ba8:	2800      	cmp	r0, #0
     baa:	f47f aea3 	bne.w	8f4 <root+0x1d0>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bae:	201b      	movs	r0, #27
     bb0:	4944      	ldr	r1, [pc, #272]	; (cc4 <root+0x5a0>)
     bb2:	f001 fdc9 	bl	2748 <ser_out>
		
	state loop_through_data:
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb6:	4c2f      	ldr	r4, [pc, #188]	; (c74 <root+0x550>)
     bb8:	4843      	ldr	r0, [pc, #268]	; (cc8 <root+0x5a4>)
     bba:	6823      	ldr	r3, [r4, #0]
     bbc:	f893 1464 	ldrb.w	r1, [r3, #1124]	; 0x464
     bc0:	f001 f91e 	bl	1e00 <diag>
		if(node_db->data_base.item_count != 0){
     bc4:	6823      	ldr	r3, [r4, #0]
     bc6:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
     bca:	b153      	cbz	r3, be2 <root+0x4be>
			//int i = 0;
			while(i <= node_db->data_base.item_count){
				i+=1;
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	261c      	movs	r6, #28
			while(i <= node_db->data_base.item_count){
     bce:	4d3f      	ldr	r5, [pc, #252]	; (ccc <root+0x5a8>)
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bd0:	4f3f      	ldr	r7, [pc, #252]	; (cd0 <root+0x5ac>)
			while(i <= node_db->data_base.item_count){
     bd2:	6823      	ldr	r3, [r4, #0]
     bd4:	682a      	ldr	r2, [r5, #0]
     bd6:	f893 1464 	ldrb.w	r1, [r3, #1124]	; 0x464
     bda:	4291      	cmp	r1, r2
     bdc:	da25      	bge.n	c2a <root+0x506>
			}
			i = 0;
     bde:	2300      	movs	r3, #0
     be0:	602b      	str	r3, [r5, #0]
		}
		ser_out(menu, "\r\n");
     be2:	2001      	movs	r0, #1
     be4:	493b      	ldr	r1, [pc, #236]	; (cd4 <root+0x5b0>)
     be6:	f001 fdaf 	bl	2748 <ser_out>
		//proceed menu;

	state del_local:
		delete_all(node_db);
     bea:	4b22      	ldr	r3, [pc, #136]	; (c74 <root+0x550>)
     bec:	6818      	ldr	r0, [r3, #0]
     bee:	f7ff fb4a 	bl	286 <delete_all>
		proceed menu;
     bf2:	2001      	movs	r0, #1
     bf4:	f000 ff0a 	bl	1a0c <proceed>

	state wait:
		delay(3000, timeout);
     bf8:	211f      	movs	r1, #31
     bfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
     bfe:	f000 ff55 	bl	1aac <delay>
		when(&response_flag, menu);
     c02:	2101      	movs	r1, #1
     c04:	4834      	ldr	r0, [pc, #208]	; (cd8 <root+0x5b4>)
     c06:	f000 ff0b 	bl	1a20 <__pi_wait>
		release;
     c0a:	e673      	b.n	8f4 <root+0x1d0>
			if(i == 0){
     c0c:	b91c      	cbnz	r4, c16 <root+0x4f2>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c0e:	4631      	mov	r1, r6
     c10:	200b      	movs	r0, #11
     c12:	f001 fd99 	bl	2748 <ser_out>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c16:	682b      	ldr	r3, [r5, #0]
     c18:	4639      	mov	r1, r7
     c1a:	4423      	add	r3, r4
     c1c:	200b      	movs	r0, #11
     c1e:	f893 2468 	ldrb.w	r2, [r3, #1128]	; 0x468
     c22:	f001 fe03 	bl	282c <ser_outf>
		for (int i=0; i<node_db->index; i++) {
     c26:	3401      	adds	r4, #1
     c28:	e6c7      	b.n	9ba <root+0x296>
				i+=1;
     c2a:	3201      	adds	r2, #1
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	fb06 f002 	mul.w	r0, r6, r2
     c30:	1819      	adds	r1, r3, r0
     c32:	3005      	adds	r0, #5
     c34:	4403      	add	r3, r0
				i+=1;
     c36:	602a      	str	r2, [r5, #0]
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c38:	9301      	str	r3, [sp, #4]
     c3a:	790b      	ldrb	r3, [r1, #4]
     c3c:	201c      	movs	r0, #28
     c3e:	9300      	str	r3, [sp, #0]
     c40:	69cb      	ldr	r3, [r1, #28]
     c42:	4639      	mov	r1, r7
     c44:	f001 fdf2 	bl	282c <ser_outf>
     c48:	e7c3      	b.n	bd2 <root+0x4ae>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     c4a:	201f      	movs	r0, #31
     c4c:	4923      	ldr	r1, [pc, #140]	; (cdc <root+0x5b8>)
     c4e:	f001 fd7b 	bl	2748 <ser_out>
		proceed menu;
     c52:	2001      	movs	r0, #1
     c54:	f000 feda 	bl	1a0c <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	2007      	movs	r0, #7
     c5a:	4a0c      	ldr	r2, [pc, #48]	; (c8c <root+0x568>)
     c5c:	4920      	ldr	r1, [pc, #128]	; (ce0 <root+0x5bc>)
     c5e:	f001 fde5 	bl	282c <ser_outf>
		proceed menu;
     c62:	2001      	movs	r0, #1
     c64:	f000 fed2 	bl	1a0c <proceed>
}
     c68:	b005      	add	sp, #20
     c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c6c:	f000 fe46 	bl	18fc <__pi_badstate>
     c70:	e7fa      	b.n	c68 <root+0x544>
     c72:	bf00      	nop
     c74:	200006a4 	andcs	r0, r0, r4, lsr #13
     c78:	0000508b 	andeq	r5, r0, fp, lsl #1
     c7c:	00005099 	muleq	r0, r9, r0
     c80:	0000509e 	muleq	r0, lr, r0
     c84:	200006a2 	andcs	r0, r0, r2, lsr #13
     c88:	000053e7 	andeq	r5, r0, r7, ror #7
     c8c:	20000658 	andcs	r0, r0, r8, asr r6
     c90:	000050c0 	andeq	r5, r0, r0, asr #1
     c94:	000050d3 	ldrdeq	r5, [r0], -r3
     c98:	20000630 	andcs	r0, r0, r0, lsr r6
     c9c:	20000648 	andcs	r0, r0, r8, asr #12
     ca0:	000000c9 	andeq	r0, r0, r9, asr #1
     ca4:	000050fc 	strdeq	r5, [r0], -ip
     ca8:	00005114 	andeq	r5, r0, r4, lsl r1
     cac:	20000644 	andcs	r0, r0, r4, asr #12
     cb0:	0000513d 	andeq	r5, r0, sp, lsr r1
     cb4:	2000068a 	andcs	r0, r0, sl, lsl #13
     cb8:	2000068b 	andcs	r0, r0, fp, lsl #13
     cbc:	00004fd6 	ldrdeq	r4, [r0], -r6
     cc0:	00005152 	andeq	r5, r0, r2, asr r1
     cc4:	0000515f 	andeq	r5, r0, pc, asr r1
     cc8:	00005188 	andeq	r5, r0, r8, lsl #3
     ccc:	20000544 	andcs	r0, r0, r4, asr #10
     cd0:	00005199 	muleq	r0, r9, r1
     cd4:	00004b65 	andeq	r4, r0, r5, ror #22
     cd8:	2000054c 	andcs	r0, r0, ip, asr #10
     cdc:	000051aa 	andeq	r5, r0, sl, lsr #3
     ce0:	000051cc 	andeq	r5, r0, ip, asr #3

00000ce4 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     ce4:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     ce6:	4801      	ldr	r0, [pc, #4]	; (cec <devinit_uart+0x8>)
     ce8:	f000 bf3c 	b.w	1b64 <adddevfunc>
     cec:	00001071 	andeq	r1, r0, r1, ror r0

00000cf0 <udelay>:
void udelay (volatile word n) {
     cf0:	b082      	sub	sp, #8
     cf2:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     cf6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     cfa:	b29b      	uxth	r3, r3
     cfc:	b90b      	cbnz	r3, d02 <udelay+0x12>
}
     cfe:	b002      	add	sp, #8
     d00:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     d02:	2304      	movs	r3, #4
	while (n--);
     d04:	461a      	mov	r2, r3
     d06:	3b01      	subs	r3, #1
     d08:	b29b      	uxth	r3, r3
     d0a:	2a00      	cmp	r2, #0
     d0c:	d1fa      	bne.n	d04 <udelay+0x14>
		n--;
     d0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     d12:	3b01      	subs	r3, #1
     d14:	b29b      	uxth	r3, r3
     d16:	f8ad 3006 	strh.w	r3, [sp, #6]
     d1a:	e7ec      	b.n	cf6 <udelay+0x6>

00000d1c <mdelay>:
void mdelay (volatile word n) {
     d1c:	b507      	push	{r0, r1, r2, lr}
     d1e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     d22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     d26:	b29b      	uxth	r3, r3
     d28:	b913      	cbnz	r3, d30 <mdelay+0x14>
}
     d2a:	b003      	add	sp, #12
     d2c:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     d30:	f240 30e7 	movw	r0, #999	; 0x3e7
     d34:	f7ff ffdc 	bl	cf0 <udelay>
		n--;
     d38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     d3c:	3b01      	subs	r3, #1
     d3e:	b29b      	uxth	r3, r3
     d40:	f8ad 3006 	strh.w	r3, [sp, #6]
     d44:	e7ed      	b.n	d22 <mdelay+0x6>
	...

00000d48 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     d48:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     d4a:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     d4c:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     d4e:	d505      	bpl.n	d5c <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     d50:	4b0a      	ldr	r3, [pc, #40]	; (d7c <__pi_ondomain+0x34>)
     d52:	78da      	ldrb	r2, [r3, #3]
     d54:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     d56:	bf84      	itt	hi
     d58:	2201      	movhi	r2, #1
     d5a:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     d5c:	4d08      	ldr	r5, [pc, #32]	; (d80 <__pi_ondomain+0x38>)
     d5e:	4620      	mov	r0, r4
     d60:	682b      	ldr	r3, [r5, #0]
     d62:	695b      	ldr	r3, [r3, #20]
     d64:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d66:	682b      	ldr	r3, [r5, #0]
     d68:	4620      	mov	r0, r4
     d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d6c:	4798      	blx	r3
     d6e:	2801      	cmp	r0, #1
     d70:	d1f9      	bne.n	d66 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     d72:	4b02      	ldr	r3, [pc, #8]	; (d7c <__pi_ondomain+0x34>)
     d74:	6858      	ldr	r0, [r3, #4]
     d76:	4304      	orrs	r4, r0
     d78:	605c      	str	r4, [r3, #4]
}
     d7a:	bd38      	pop	{r3, r4, r5, pc}
     d7c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
     d80:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000d84 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     d84:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     d86:	4d0d      	ldr	r5, [pc, #52]	; (dbc <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     d88:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     d8a:	682b      	ldr	r3, [r5, #0]
     d8c:	699b      	ldr	r3, [r3, #24]
     d8e:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	682b      	ldr	r3, [r5, #0]
     d92:	4620      	mov	r0, r4
     d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d96:	4798      	blx	r3
     d98:	2802      	cmp	r0, #2
     d9a:	d1f9      	bne.n	d90 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	f014 0f01 	tst.w	r4, #1
     da0:	4b07      	ldr	r3, [pc, #28]	; (dc0 <__pi_offdomain+0x3c>)
     da2:	d006      	beq.n	db2 <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	7899      	ldrb	r1, [r3, #2]
     da6:	78da      	ldrb	r2, [r3, #3]
     da8:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     daa:	bf82      	ittt	hi
     dac:	789a      	ldrbhi	r2, [r3, #2]
     dae:	b2d2      	uxtbhi	r2, r2
     db0:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     db2:	6858      	ldr	r0, [r3, #4]
     db4:	ea20 0404 	bic.w	r4, r0, r4
     db8:	605c      	str	r4, [r3, #4]
}
     dba:	bd38      	pop	{r3, r4, r5, pc}
     dbc:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     dc0:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

00000dc4 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     dc4:	460a      	mov	r2, r1
     dc6:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	4601      	mov	r1, r0
     dca:	480f      	ldr	r0, [pc, #60]	; (e08 <__pi_syserror+0x44>)
     dcc:	f001 f818 	bl	1e00 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd2:	2540      	movs	r5, #64	; 0x40
     dd4:	462f      	mov	r7, r5
     dd6:	4e0d      	ldr	r6, [pc, #52]	; (e0c <__pi_syserror+0x48>)
     dd8:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     dda:	490d      	ldr	r1, [pc, #52]	; (e10 <__pi_syserror+0x4c>)
     ddc:	6037      	str	r7, [r6, #0]
     dde:	6034      	str	r4, [r6, #0]
     de0:	780b      	ldrb	r3, [r1, #0]
     de2:	780b      	ldrb	r3, [r1, #0]
     de4:	20c8      	movs	r0, #200	; 0xc8
     de6:	f36f 1307 	bfc	r3, #4, #4
     dea:	700b      	strb	r3, [r1, #0]
     dec:	f7ff ff96 	bl	d1c <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	4b08      	ldr	r3, [pc, #32]	; (e14 <__pi_syserror+0x50>)
     df2:	20c8      	movs	r0, #200	; 0xc8
     df4:	601d      	str	r5, [r3, #0]
     df6:	601c      	str	r4, [r3, #0]
     df8:	780b      	ldrb	r3, [r1, #0]
     dfa:	780b      	ldrb	r3, [r1, #0]
     dfc:	f36f 1307 	bfc	r3, #4, #4
     e00:	700b      	strb	r3, [r1, #0]
     e02:	f7ff ff8b 	bl	d1c <mdelay>
	while (1) {
     e06:	e7e7      	b.n	dd8 <__pi_syserror+0x14>
     e08:	000051d8 	ldrdeq	r5, [r0], -r8
     e0c:	40022090 	mulmi	r2, r0, r0
     e10:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
     e14:	400220a0 	andmi	r2, r2, r0, lsr #1

00000e18 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     e18:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     e1a:	4b0a      	ldr	r3, [pc, #40]	; (e44 <tci_run_delay_timer+0x2c>)
     e1c:	881c      	ldrh	r4, [r3, #0]
     e1e:	4b0a      	ldr	r3, [pc, #40]	; (e48 <tci_run_delay_timer+0x30>)
     e20:	8818      	ldrh	r0, [r3, #0]
     e22:	4b0a      	ldr	r3, [pc, #40]	; (e4c <tci_run_delay_timer+0x34>)
     e24:	1b00      	subs	r0, r0, r4
     e26:	b284      	uxth	r4, r0
     e28:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2a:	f002 fe2d 	bl	3a88 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     e2e:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e30:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e32:	4b07      	ldr	r3, [pc, #28]	; (e50 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     e38:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	6018      	str	r0, [r3, #0]
	sti_tim;
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <tci_run_delay_timer+0x3c>)
     e40:	601a      	str	r2, [r3, #0]
}
     e42:	bd10      	pop	{r4, pc}
     e44:	200006ba 			; <UNDEFINED> instruction: 0x200006ba
     e48:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     e4c:	2000054e 	andcs	r0, r0, lr, asr #10
     e50:	40092018 	andmi	r2, r9, r8, lsl r0
     e54:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000e58 <tci_run_auxiliary_timer>:
	cli_aux;
     e58:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     e5a:	b510      	push	{r4, lr}
	cli_aux;
     e5c:	4c06      	ldr	r4, [pc, #24]	; (e78 <tci_run_auxiliary_timer+0x20>)
     e5e:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	f002 fe12 	bl	3a88 <NOROM_AONRTCCurrent64BitValueGet>
     e64:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     e66:	4b05      	ldr	r3, [pc, #20]	; (e7c <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     e6c:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     e6e:	6018      	str	r0, [r3, #0]
	sti_aux;
     e70:	2301      	movs	r3, #1
     e72:	6023      	str	r3, [r4, #0]
}
     e74:	bd10      	pop	{r4, pc}
     e76:	bf00      	nop
     e78:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     e7c:	40092020 	andmi	r2, r9, r0, lsr #32

00000e80 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     e80:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e82:	4b3b      	ldr	r3, [pc, #236]	; (f70 <AONRTCIntHandler+0xf0>)
     e84:	6818      	ldr	r0, [r3, #0]
     e86:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     e8a:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     e8e:	d542      	bpl.n	f16 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     e90:	4b38      	ldr	r3, [pc, #224]	; (f74 <AONRTCIntHandler+0xf4>)
     e92:	6819      	ldr	r1, [r3, #0]
     e94:	2900      	cmp	r1, #0
     e96:	d053      	beq.n	f40 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     e98:	880a      	ldrh	r2, [r1, #0]
     e9a:	2a00      	cmp	r2, #0
     e9c:	d04e      	beq.n	f3c <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     e9e:	3a01      	subs	r2, #1
     ea0:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     ea2:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     ea4:	685c      	ldr	r4, [r3, #4]
     ea6:	b194      	cbz	r4, ece <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     ea8:	8821      	ldrh	r1, [r4, #0]
     eaa:	b111      	cbz	r1, eb2 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     eac:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     eae:	3901      	subs	r1, #1
     eb0:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     eb2:	689c      	ldr	r4, [r3, #8]
     eb4:	b15c      	cbz	r4, ece <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     eb6:	8821      	ldrh	r1, [r4, #0]
     eb8:	b111      	cbz	r1, ec0 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     eba:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     ebc:	3901      	subs	r1, #1
     ebe:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     ec0:	68d9      	ldr	r1, [r3, #12]
     ec2:	b121      	cbz	r1, ece <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     ec4:	880b      	ldrh	r3, [r1, #0]
     ec6:	b113      	cbz	r3, ece <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     ec8:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     eca:	3b01      	subs	r3, #1
     ecc:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     ece:	4b2a      	ldr	r3, [pc, #168]	; (f78 <AONRTCIntHandler+0xf8>)
     ed0:	7819      	ldrb	r1, [r3, #0]
     ed2:	0909      	lsrs	r1, r1, #4
     ed4:	d047      	beq.n	f66 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     ed6:	7859      	ldrb	r1, [r3, #1]
     ed8:	1c4a      	adds	r2, r1, #1
     eda:	b2d2      	uxtb	r2, r2
     edc:	705a      	strb	r2, [r3, #1]
     ede:	b9d1      	cbnz	r1, f16 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     ee0:	781a      	ldrb	r2, [r3, #0]
     ee2:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     ee6:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     ee8:	d02c      	beq.n	f44 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     eea:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	bf42      	ittt	mi
     eee:	2140      	movmi	r1, #64	; 0x40
     ef0:	4a22      	ldrmi	r2, [pc, #136]	; (f7c <AONRTCIntHandler+0xfc>)
     ef2:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     ef4:	781a      	ldrb	r2, [r3, #0]
     ef6:	0692      	lsls	r2, r2, #26
     ef8:	bf42      	ittt	mi
     efa:	2180      	movmi	r1, #128	; 0x80
     efc:	4a1f      	ldrmi	r2, [pc, #124]	; (f7c <AONRTCIntHandler+0xfc>)
     efe:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     f00:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     f02:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     f04:	781a      	ldrb	r2, [r3, #0]
     f06:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     f0a:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     f0c:	781a      	ldrb	r2, [r3, #0]
     f0e:	0752      	lsls	r2, r2, #29
     f10:	d501      	bpl.n	f16 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     f12:	22c8      	movs	r2, #200	; 0xc8
     f14:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     f16:	07c3      	lsls	r3, r0, #31
     f18:	d50f      	bpl.n	f3a <AONRTCIntHandler+0xba>
		cli_tim;
     f1a:	2100      	movs	r1, #0
     f1c:	4b18      	ldr	r3, [pc, #96]	; (f80 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     f1e:	4a19      	ldr	r2, [pc, #100]	; (f84 <AONRTCIntHandler+0x104>)
     f20:	4819      	ldr	r0, [pc, #100]	; (f88 <AONRTCIntHandler+0x108>)
		cli_tim;
     f22:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     f24:	8803      	ldrh	r3, [r0, #0]
     f26:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     f28:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     f2a:	4423      	add	r3, r4
		RISE_N_SHINE;
     f2c:	4a12      	ldr	r2, [pc, #72]	; (f78 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     f2e:	b29b      	uxth	r3, r3
     f30:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     f32:	7813      	ldrb	r3, [r2, #0]
     f34:	f043 0302 	orr.w	r3, r3, #2
     f38:	7013      	strb	r3, [r2, #0]
}
     f3a:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     f3c:	2201      	movs	r2, #1
     f3e:	e7b1      	b.n	ea4 <AONRTCIntHandler+0x24>
     f40:	2201      	movs	r2, #1
     f42:	e7c4      	b.n	ece <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     f44:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f46:	bf42      	ittt	mi
     f48:	2140      	movmi	r1, #64	; 0x40
     f4a:	4a10      	ldrmi	r2, [pc, #64]	; (f8c <AONRTCIntHandler+0x10c>)
     f4c:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     f4e:	781a      	ldrb	r2, [r3, #0]
     f50:	0691      	lsls	r1, r2, #26
     f52:	bf42      	ittt	mi
     f54:	2180      	movmi	r1, #128	; 0x80
     f56:	4a0d      	ldrmi	r2, [pc, #52]	; (f8c <AONRTCIntHandler+0x10c>)
     f58:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     f5a:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     f5c:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     f5e:	781a      	ldrb	r2, [r3, #0]
     f60:	f042 0208 	orr.w	r2, r2, #8
     f64:	e7d1      	b.n	f0a <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     f66:	2a00      	cmp	r2, #0
     f68:	d0d5      	beq.n	f16 <AONRTCIntHandler+0x96>
			cli_aux;
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <AONRTCIntHandler+0x110>)
     f6c:	6019      	str	r1, [r3, #0]
     f6e:	e7d2      	b.n	f16 <AONRTCIntHandler+0x96>
     f70:	40092004 	andmi	r2, r9, r4
     f74:	200006c8 	andcs	r0, r0, r8, asr #13
     f78:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
     f7c:	40022090 	mulmi	r2, r0, r0
     f80:	43240280 			; <UNDEFINED> instruction: 0x43240280
     f84:	2000054e 	andcs	r0, r0, lr, asr #10
     f88:	200006c4 	andcs	r0, r0, r4, asr #13
     f8c:	400220a0 	andmi	r2, r2, r0, lsr #1
     f90:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000f94 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     f96:	2600      	movs	r6, #0
     f98:	4b0e      	ldr	r3, [pc, #56]	; (fd4 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     f9a:	4f0f      	ldr	r7, [pc, #60]	; (fd8 <tci_update_delay_ticks+0x44>)
	cli_tim;
     f9c:	601e      	str	r6, [r3, #0]
	if (setdel) {
     f9e:	883d      	ldrh	r5, [r7, #0]
     fa0:	b19d      	cbz	r5, fca <tci_update_delay_ticks+0x36>
		if (force) {
     fa2:	b1a0      	cbz	r0, fce <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fa4:	4b0d      	ldr	r3, [pc, #52]	; (fdc <tci_update_delay_ticks+0x48>)
     fa6:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	f002 fd6e 	bl	3a88 <NOROM_AONRTCCurrent64BitValueGet>
     fac:	0d80      	lsrs	r0, r0, #22
     fae:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb2:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     fb6:	b280      	uxth	r0, r0
     fb8:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fba:	1b2c      	subs	r4, r5, r4
	return NO;
     fbc:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fbe:	4b08      	ldr	r3, [pc, #32]	; (fe0 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     fc0:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc2:	881a      	ldrh	r2, [r3, #0]
     fc4:	4414      	add	r4, r2
     fc6:	b2a4      	uxth	r4, r4
     fc8:	801c      	strh	r4, [r3, #0]
}
     fca:	4628      	mov	r0, r5
     fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     fce:	2501      	movs	r5, #1
     fd0:	601d      	str	r5, [r3, #0]
		return YES;
     fd2:	e7fa      	b.n	fca <tci_update_delay_ticks+0x36>
     fd4:	43240280 			; <UNDEFINED> instruction: 0x43240280
     fd8:	2000054e 	andcs	r0, r0, lr, asr #10
     fdc:	40092018 	andmi	r2, r9, r8, lsl r0
     fe0:	200006c4 	andcs	r0, r0, r4, asr #13

00000fe4 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     fe6:	4e0f      	ldr	r6, [pc, #60]	; (1024 <__pi_uart_setrate+0x40>)
     fe8:	4d0f      	ldr	r5, [pc, #60]	; (1028 <__pi_uart_setrate+0x44>)
     fea:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     fee:	68db      	ldr	r3, [r3, #12]
     ff0:	4628      	mov	r0, r5
     ff2:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	2264      	movs	r2, #100	; 0x64
     ff6:	6833      	ldr	r3, [r6, #0]
     ff8:	4628      	mov	r0, r5
     ffa:	4362      	muls	r2, r4
     ffc:	685e      	ldr	r6, [r3, #4]
     ffe:	490b      	ldr	r1, [pc, #44]	; (102c <__pi_uart_setrate+0x48>)
    1000:	2360      	movs	r3, #96	; 0x60
    1002:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	4a0a      	ldr	r2, [pc, #40]	; (1030 <__pi_uart_setrate+0x4c>)
}
    1006:	2001      	movs	r0, #1
    1008:	6813      	ldr	r3, [r2, #0]
    100a:	f043 0310 	orr.w	r3, r3, #16
    100e:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	6853      	ldr	r3, [r2, #4]
    1012:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1016:	f043 0301 	orr.w	r3, r3, #1
    101a:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
    101c:	4b05      	ldr	r3, [pc, #20]	; (1034 <__pi_uart_setrate+0x50>)
    101e:	801c      	strh	r4, [r3, #0]
}
    1020:	bd70      	pop	{r4, r5, r6, pc}
    1022:	bf00      	nop
    1024:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
    1028:	40001000 	andmi	r1, r0, r0
    102c:	02dc6c00 	sbcseq	r6, ip, #0, 24
    1030:	4000102c 	andmi	r1, r0, ip, lsr #32
    1034:	20000550 	andcs	r0, r0, r0, asr r5

00001038 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	4a08      	ldr	r2, [pc, #32]	; (105c <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
    103a:	4909      	ldr	r1, [pc, #36]	; (1060 <reinit_uart+0x28>)
    103c:	6813      	ldr	r3, [r2, #0]
    103e:	f043 0310 	orr.w	r3, r3, #16
    1042:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	2212      	movs	r2, #18
    1046:	4b07      	ldr	r3, [pc, #28]	; (1064 <reinit_uart+0x2c>)
    1048:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104a:	4a07      	ldr	r2, [pc, #28]	; (1068 <reinit_uart+0x30>)
    104c:	6813      	ldr	r3, [r2, #0]
    104e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    1052:	6013      	str	r3, [r2, #0]
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <reinit_uart+0x34>)
    1056:	8818      	ldrh	r0, [r3, #0]
    1058:	f7ff bfc4 	b.w	fe4 <__pi_uart_setrate>
    105c:	4000102c 	andmi	r1, r0, ip, lsr #32
    1060:	200006a8 	andcs	r0, r0, r8, lsr #13
    1064:	40001034 	andmi	r1, r0, r4, lsr r0
    1068:	40001030 	andmi	r1, r0, r0, lsr r0
    106c:	20000550 	andcs	r0, r0, r0, asr r5

00001070 <ioreq_uart_a>:
	switch (operation) {
    1070:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
    1072:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1076:	460d      	mov	r5, r1
    1078:	4614      	mov	r4, r2
    107a:	2803      	cmp	r0, #3
    107c:	d86e      	bhi.n	115c <ioreq_uart_a+0xec>
    107e:	e8df f000 	tbb	[pc, r0]
    1082:	5a471253 	bpl	11c59d6 <__ccfg+0x11a5a2e>
				*buf++ = uart_a_read;
    1086:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
    108a:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
    108c:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
    1090:	b11e      	cbz	r6, 109a <ioreq_uart_a+0x2a>
    1092:	f8d8 3000 	ldr.w	r3, [r8]
    1096:	06d8      	lsls	r0, r3, #27
    1098:	d5f5      	bpl.n	1086 <ioreq_uart_a+0x16>
			if (len != operation) {
    109a:	42a6      	cmp	r6, r4
    109c:	d00a      	beq.n	10b4 <ioreq_uart_a+0x44>
				return operation - len;
    109e:	1ba4      	subs	r4, r4, r6
}
    10a0:	4620      	mov	r0, r4
    10a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
    10a6:	4616      	mov	r6, r2
			uart_a_disable_int;
    10a8:	4f2e      	ldr	r7, [pc, #184]	; (1164 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
    10aa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1178 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
    10ae:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 117c <ioreq_uart_a+0x10c>
    10b2:	e7ed      	b.n	1090 <ioreq_uart_a+0x20>
			uart_a_disable_int;
    10b4:	683b      	ldr	r3, [r7, #0]
    10b6:	2015      	movs	r0, #21
    10b8:	695b      	ldr	r3, [r3, #20]
    10ba:	4798      	blx	r3
			if (uart_a_char_available) {
    10bc:	f8d8 3000 	ldr.w	r3, [r8]
    10c0:	06d9      	lsls	r1, r3, #27
    10c2:	d404      	bmi.n	10ce <ioreq_uart_a+0x5e>
				uart_a_enable_int;
    10c4:	683b      	ldr	r3, [r7, #0]
    10c6:	2015      	movs	r0, #21
    10c8:	691b      	ldr	r3, [r3, #16]
    10ca:	4798      	blx	r3
				goto Redo_rx;
    10cc:	e7e0      	b.n	1090 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10ce:	4a26      	ldr	r2, [pc, #152]	; (1168 <ioreq_uart_a+0xf8>)
    10d0:	7993      	ldrb	r3, [r2, #6]
    10d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
    10d6:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    10da:	7193      	strb	r3, [r2, #6]
			return -2;
    10dc:	e7e0      	b.n	10a0 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
    10de:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
    10e2:	3e01      	subs	r6, #1
				uart_a_write (*buf);
    10e4:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
    10e8:	b11e      	cbz	r6, 10f2 <ioreq_uart_a+0x82>
    10ea:	f8d8 3000 	ldr.w	r3, [r8]
    10ee:	069a      	lsls	r2, r3, #26
    10f0:	d5f5      	bpl.n	10de <ioreq_uart_a+0x6e>
			if (len != operation) {
    10f2:	42a6      	cmp	r6, r4
    10f4:	d1d3      	bne.n	109e <ioreq_uart_a+0x2e>
			uart_a_disable_int;
    10f6:	683b      	ldr	r3, [r7, #0]
    10f8:	2015      	movs	r0, #21
    10fa:	695b      	ldr	r3, [r3, #20]
    10fc:	4798      	blx	r3
			if (uart_a_room_in_tx) {
    10fe:	f8d8 3000 	ldr.w	r3, [r8]
    1102:	069b      	lsls	r3, r3, #26
    1104:	d40b      	bmi.n	111e <ioreq_uart_a+0xae>
				uart_a_enable_int;
    1106:	683b      	ldr	r3, [r7, #0]
    1108:	2015      	movs	r0, #21
    110a:	691b      	ldr	r3, [r3, #16]
    110c:	4798      	blx	r3
				goto Redo_tx;
    110e:	e7eb      	b.n	10e8 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
    1110:	4616      	mov	r6, r2
			uart_a_disable_int;
    1112:	4f14      	ldr	r7, [pc, #80]	; (1164 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
    1114:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1178 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
    1118:	f8df 9060 	ldr.w	r9, [pc, #96]	; 117c <ioreq_uart_a+0x10c>
    111c:	e7e4      	b.n	10e8 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    111e:	4a12      	ldr	r2, [pc, #72]	; (1168 <ioreq_uart_a+0xf8>)
    1120:	7993      	ldrb	r3, [r2, #6]
    1122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1126:	e7d6      	b.n	10d6 <ioreq_uart_a+0x66>
			uart_a_enable_int;
    1128:	4b0e      	ldr	r3, [pc, #56]	; (1164 <ioreq_uart_a+0xf4>)
    112a:	2015      	movs	r0, #21
    112c:	681b      	ldr	r3, [r3, #0]
			return 0;
    112e:	2400      	movs	r4, #0
			uart_a_enable_int;
    1130:	691b      	ldr	r3, [r3, #16]
    1132:	4798      	blx	r3
			return 0;
    1134:	e7b4      	b.n	10a0 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
    1136:	2a01      	cmp	r2, #1
    1138:	d109      	bne.n	114e <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
    113a:	490b      	ldr	r1, [pc, #44]	; (1168 <ioreq_uart_a+0xf8>)
    113c:	8828      	ldrh	r0, [r5, #0]
    113e:	f7ff ff51 	bl	fe4 <__pi_uart_setrate>
    1142:	2800      	cmp	r0, #0
    1144:	d1ac      	bne.n	10a0 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
    1146:	2003      	movs	r0, #3
    1148:	4908      	ldr	r1, [pc, #32]	; (116c <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
    114a:	f7ff fe3b 	bl	dc4 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
    114e:	2a02      	cmp	r2, #2
    1150:	d104      	bne.n	115c <ioreq_uart_a+0xec>
	return urates [0];
    1152:	4b07      	ldr	r3, [pc, #28]	; (1170 <ioreq_uart_a+0x100>)
				return 1;
    1154:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1156:	881b      	ldrh	r3, [r3, #0]
    1158:	800b      	strh	r3, [r1, #0]
				return 1;
    115a:	e7a1      	b.n	10a0 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
    115c:	2002      	movs	r0, #2
    115e:	4905      	ldr	r1, [pc, #20]	; (1174 <ioreq_uart_a+0x104>)
    1160:	e7f3      	b.n	114a <ioreq_uart_a+0xda>
    1162:	bf00      	nop
    1164:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1168:	200006a8 	andcs	r0, r0, r8, lsr #13
    116c:	000051e7 	andeq	r5, r0, r7, ror #3
    1170:	20000550 	andcs	r0, r0, r0, asr r5
    1174:	000051eb 	andeq	r5, r0, fp, ror #3
    1178:	40001018 	andmi	r1, r0, r8, lsl r0
    117c:	40001000 	andmi	r1, r0, r0

00001180 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
    1184:	b530      	push	{r4, r5, lr}
    1186:	4b29      	ldr	r3, [pc, #164]	; (122c <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	4c29      	ldr	r4, [pc, #164]	; (1230 <UART0IntHandler+0xb0>)
    118a:	601a      	str	r2, [r3, #0]
    118c:	6822      	ldr	r2, [r4, #0]
    118e:	06d5      	lsls	r5, r2, #27
    1190:	d423      	bmi.n	11da <UART0IntHandler+0x5a>
    1192:	4b28      	ldr	r3, [pc, #160]	; (1234 <UART0IntHandler+0xb4>)
    1194:	799a      	ldrb	r2, [r3, #6]
    1196:	0610      	lsls	r0, r2, #24
    1198:	d51f      	bpl.n	11da <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119a:	799a      	ldrb	r2, [r3, #6]
    119c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    11a0:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    11a2:	4a25      	ldr	r2, [pc, #148]	; (1238 <UART0IntHandler+0xb8>)
    11a4:	7813      	ldrb	r3, [r2, #0]
    11a6:	f043 0302 	orr.w	r3, r3, #2
    11aa:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
    11ac:	4b23      	ldr	r3, [pc, #140]	; (123c <UART0IntHandler+0xbc>)
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	b19a      	cbz	r2, 11da <UART0IntHandler+0x5a>
    11b2:	4610      	mov	r0, r2
    11b4:	2300      	movs	r3, #0
    11b6:	f830 1b10 	ldrh.w	r1, [r0], #16
    11ba:	f001 0107 	and.w	r1, r1, #7
    11be:	4299      	cmp	r1, r3
    11c0:	dd09      	ble.n	11d6 <UART0IntHandler+0x56>
    11c2:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    11c6:	3301      	adds	r3, #1
    11c8:	f515 7f81 	cmn.w	r5, #258	; 0x102
    11cc:	d1f7      	bne.n	11be <UART0IntHandler+0x3e>
    11ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    11d2:	889b      	ldrh	r3, [r3, #4]
    11d4:	8013      	strh	r3, [r2, #0]
    11d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    11d8:	e7ea      	b.n	11b0 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11da:	6823      	ldr	r3, [r4, #0]
    11dc:	0699      	lsls	r1, r3, #26
    11de:	d424      	bmi.n	122a <UART0IntHandler+0xaa>
    11e0:	4b14      	ldr	r3, [pc, #80]	; (1234 <UART0IntHandler+0xb4>)
    11e2:	799a      	ldrb	r2, [r3, #6]
    11e4:	0652      	lsls	r2, r2, #25
    11e6:	d520      	bpl.n	122a <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
    11e8:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	799a      	ldrb	r2, [r3, #6]
    11ee:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    11f2:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    11f4:	4a10      	ldr	r2, [pc, #64]	; (1238 <UART0IntHandler+0xb8>)
    11f6:	7813      	ldrb	r3, [r2, #0]
    11f8:	f043 0302 	orr.w	r3, r3, #2
    11fc:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
    11fe:	4b0f      	ldr	r3, [pc, #60]	; (123c <UART0IntHandler+0xbc>)
    1200:	681a      	ldr	r2, [r3, #0]
    1202:	b192      	cbz	r2, 122a <UART0IntHandler+0xaa>
    1204:	4610      	mov	r0, r2
    1206:	2300      	movs	r3, #0
    1208:	f830 1b10 	ldrh.w	r1, [r0], #16
    120c:	f001 0107 	and.w	r1, r1, #7
    1210:	4299      	cmp	r1, r3
    1212:	dd08      	ble.n	1226 <UART0IntHandler+0xa6>
    1214:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    1218:	3301      	adds	r3, #1
    121a:	42a5      	cmp	r5, r4
    121c:	d1f8      	bne.n	1210 <UART0IntHandler+0x90>
    121e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1222:	889b      	ldrh	r3, [r3, #4]
    1224:	8013      	strh	r3, [r2, #0]
    1226:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1228:	e7eb      	b.n	1202 <UART0IntHandler+0x82>
	}

	RTNI;
}
    122a:	bd30      	pop	{r4, r5, pc}
    122c:	40001044 	andmi	r1, r0, r4, asr #32
    1230:	40001018 	andmi	r1, r0, r8, lsl r0
    1234:	200006a8 	andcs	r0, r0, r8, lsr #13
    1238:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    123c:	20000554 	andcs	r0, r0, r4, asr r5

00001240 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
    1240:	b570      	push	{r4, r5, r6, lr}
    1242:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
    1246:	4e0c      	ldr	r6, [pc, #48]	; (1278 <__buttons_setirq+0x38>)
    1248:	4d0c      	ldr	r5, [pc, #48]	; (127c <__buttons_setirq+0x3c>)
    124a:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	4c0c      	ldr	r4, [pc, #48]	; (1280 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
    124e:	0a1b      	lsrs	r3, r3, #8
    1250:	fa01 f203 	lsl.w	r2, r1, r3
    1254:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1256:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125a:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
    125e:	0a1b      	lsrs	r3, r3, #8
    1260:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1262:	01db      	lsls	r3, r3, #7
    1264:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    1268:	4322      	orrs	r2, r4
    126a:	4323      	orrs	r3, r4
    126c:	6010      	str	r0, [r2, #0]
    126e:	6029      	str	r1, [r5, #0]
    1270:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    1272:	b662      	cpsie	i
			val;
	}
	sti;
}
    1274:	bd70      	pop	{r4, r5, r6, pc}
    1276:	bf00      	nop
    1278:	00005382 	andeq	r5, r0, r2, lsl #7
    127c:	400220e0 	andmi	r2, r2, r0, ror #1
    1280:	42000048 	andmi	r0, r0, #72	; 0x48

00001284 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
    1284:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1286:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
    1288:	2200      	movs	r2, #0
    128a:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	4f09      	ldr	r7, [pc, #36]	; (12b4 <__pinlist_setirq+0x30>)
    128e:	4c0a      	ldr	r4, [pc, #40]	; (12b8 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	490a      	ldr	r1, [pc, #40]	; (12bc <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1292:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
    1294:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    129a:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    129e:	01db      	lsls	r3, r3, #7
    12a0:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    12a4:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
    12a6:	2a04      	cmp	r2, #4
    12a8:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12aa:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	d1f1      	bne.n	1292 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    12ae:	b662      	cpsie	i
			val;
	}
	sti;
}
    12b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b2:	bf00      	nop
    12b4:	0000537d 	andeq	r5, r0, sp, ror r3
    12b8:	400220e0 	andmi	r2, r2, r0, ror #1
    12bc:	42000048 	andmi	r0, r0, #72	; 0x48

000012c0 <GPIOIntHandler>:
void GPIOIntHandler () {
    12c0:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    12c2:	4c23      	ldr	r4, [pc, #140]	; (1350 <GPIOIntHandler+0x90>)
    12c4:	6822      	ldr	r2, [r4, #0]
    12c6:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    12ca:	d01e      	beq.n	130a <GPIOIntHandler+0x4a>
	buttons_disable ();
    12cc:	2000      	movs	r0, #0
    12ce:	f7ff ffb7 	bl	1240 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    12d2:	4b20      	ldr	r3, [pc, #128]	; (1354 <GPIOIntHandler+0x94>)
    12d4:	4d20      	ldr	r5, [pc, #128]	; (1358 <GPIOIntHandler+0x98>)
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	b192      	cbz	r2, 1300 <GPIOIntHandler+0x40>
    12da:	4610      	mov	r0, r2
    12dc:	2300      	movs	r3, #0
    12de:	f830 1b10 	ldrh.w	r1, [r0], #16
    12e2:	f001 0107 	and.w	r1, r1, #7
    12e6:	4299      	cmp	r1, r3
    12e8:	dd08      	ble.n	12fc <GPIOIntHandler+0x3c>
    12ea:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    12ee:	3301      	adds	r3, #1
    12f0:	42ae      	cmp	r6, r5
    12f2:	d1f8      	bne.n	12e6 <GPIOIntHandler+0x26>
    12f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    12f8:	889b      	ldrh	r3, [r3, #4]
    12fa:	8013      	strh	r3, [r2, #0]
    12fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    12fe:	e7eb      	b.n	12d8 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    1300:	4a16      	ldr	r2, [pc, #88]	; (135c <GPIOIntHandler+0x9c>)
    1302:	7813      	ldrb	r3, [r2, #0]
    1304:	f043 0302 	orr.w	r3, r3, #2
    1308:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    130a:	6823      	ldr	r3, [r4, #0]
    130c:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    1310:	d01d      	beq.n	134e <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    1312:	4b10      	ldr	r3, [pc, #64]	; (1354 <GPIOIntHandler+0x94>)
    1314:	4c12      	ldr	r4, [pc, #72]	; (1360 <GPIOIntHandler+0xa0>)
    1316:	6818      	ldr	r0, [r3, #0]
    1318:	b190      	cbz	r0, 1340 <GPIOIntHandler+0x80>
    131a:	4601      	mov	r1, r0
    131c:	2300      	movs	r3, #0
    131e:	f831 2b10 	ldrh.w	r2, [r1], #16
    1322:	f002 0207 	and.w	r2, r2, #7
    1326:	429a      	cmp	r2, r3
    1328:	dd08      	ble.n	133c <GPIOIntHandler+0x7c>
    132a:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    132e:	3301      	adds	r3, #1
    1330:	42a5      	cmp	r5, r4
    1332:	d1f8      	bne.n	1326 <GPIOIntHandler+0x66>
    1334:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1338:	889b      	ldrh	r3, [r3, #4]
    133a:	8003      	strh	r3, [r0, #0]
    133c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    133e:	e7eb      	b.n	1318 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    1340:	f7ff ffa0 	bl	1284 <__pinlist_setirq>
	RISE_N_SHINE;
    1344:	4a05      	ldr	r2, [pc, #20]	; (135c <GPIOIntHandler+0x9c>)
    1346:	7813      	ldrb	r3, [r2, #0]
    1348:	f043 0302 	orr.w	r3, r3, #2
    134c:	7013      	strb	r3, [r2, #0]
}
    134e:	bd70      	pop	{r4, r5, r6, pc}
    1350:	400220e0 	andmi	r2, r2, r0, ror #1
    1354:	20000554 	andcs	r0, r0, r4, asr r5
    1358:	00005382 	andeq	r5, r0, r2, lsl #7
    135c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    1360:	0000537d 	andeq	r5, r0, sp, ror r3

00001364 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    1364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	4c58      	ldr	r4, [pc, #352]	; (14cc <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136a:	2004      	movs	r0, #4
    136c:	f7ff fcec 	bl	d48 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	6823      	ldr	r3, [r4, #0]
    1372:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    1376:	69db      	ldr	r3, [r3, #28]
    1378:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137a:	6823      	ldr	r3, [r4, #0]
    137c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    1380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1382:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	6823      	ldr	r3, [r4, #0]
    1386:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    138c:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    138e:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	2600      	movs	r6, #0
    1392:	4c4f      	ldr	r4, [pc, #316]	; (14d0 <system_init+0x16c>)
    1394:	4f4f      	ldr	r7, [pc, #316]	; (14d4 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1396:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1514 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139a:	f8df e17c 	ldr.w	lr, [pc, #380]	; 1518 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    139e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 14e0 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 14d8 <system_init+0x174>
    13a6:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    13ae:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b2:	0091      	lsls	r1, r2, #2
    13b4:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    13b8:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    13bc:	ea05 0a0c 	and.w	sl, r5, ip
    13c0:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    13c4:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c6:	bf44      	itt	mi
    13c8:	ea41 010e 	orrmi.w	r1, r1, lr
    13cc:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    13ce:	fa03 f202 	lsl.w	r2, r3, r2
    13d2:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	bf4c      	ite	mi
    13d6:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13da:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13de:	2e11      	cmp	r6, #17
    13e0:	d1e2      	bne.n	13a8 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e2:	2540      	movs	r5, #64	; 0x40
    13e4:	2680      	movs	r6, #128	; 0x80
    13e6:	4b3c      	ldr	r3, [pc, #240]	; (14d8 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    13e8:	493c      	ldr	r1, [pc, #240]	; (14dc <system_init+0x178>)
    13ea:	601d      	str	r5, [r3, #0]
    13ec:	601e      	str	r6, [r3, #0]
    13ee:	780b      	ldrb	r3, [r1, #0]
    13f0:	780b      	ldrb	r3, [r1, #0]
    13f2:	20c8      	movs	r0, #200	; 0xc8
    13f4:	f36f 1307 	bfc	r3, #4, #4
    13f8:	700b      	strb	r3, [r1, #0]
    13fa:	f7ff fc8f 	bl	d1c <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13fe:	4b38      	ldr	r3, [pc, #224]	; (14e0 <system_init+0x17c>)
    1400:	20c8      	movs	r0, #200	; 0xc8
    1402:	601d      	str	r5, [r3, #0]
    1404:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1406:	2601      	movs	r6, #1
	all_leds_blink;
    1408:	780b      	ldrb	r3, [r1, #0]
    140a:	780b      	ldrb	r3, [r1, #0]
    140c:	f36f 1307 	bfc	r3, #4, #4
    1410:	700b      	strb	r3, [r1, #0]
    1412:	f7ff fc83 	bl	d1c <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    1416:	4b33      	ldr	r3, [pc, #204]	; (14e4 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	4a33      	ldr	r2, [pc, #204]	; (14e8 <system_init+0x184>)
    141a:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	4b33      	ldr	r3, [pc, #204]	; (14ec <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    141e:	4d34      	ldr	r5, [pc, #208]	; (14f0 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1420:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1422:	4b34      	ldr	r3, [pc, #208]	; (14f4 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    1424:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1426:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    1428:	682b      	ldr	r3, [r5, #0]
    142a:	691b      	ldr	r3, [r3, #16]
    142c:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    142e:	f000 fbf9 	bl	1c24 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    1432:	682b      	ldr	r3, [r5, #0]
    1434:	2010      	movs	r0, #16
    1436:	691b      	ldr	r3, [r3, #16]
    1438:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143a:	2002      	movs	r0, #2
    143c:	f7ff fc84 	bl	d48 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	68ab      	ldr	r3, [r5, #8]
    1442:	f44f 7000 	mov.w	r0, #512	; 0x200
    1446:	69db      	ldr	r3, [r3, #28]
    1448:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144a:	68ab      	ldr	r3, [r5, #8]
    144c:	f44f 7000 	mov.w	r0, #512	; 0x200
    1450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1452:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	68ab      	ldr	r3, [r5, #8]
    1456:	f44f 7000 	mov.w	r0, #512	; 0x200
    145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    145c:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    145e:	2260      	movs	r2, #96	; 0x60
    1460:	4b25      	ldr	r3, [pc, #148]	; (14f8 <system_init+0x194>)
    1462:	6026      	str	r6, [r4, #0]
    1464:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    1466:	f7ff fde7 	bl	1038 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    146a:	f001 f959 	bl	2720 <ee_open>
    146e:	f001 f961 	bl	2734 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1472:	f003 fa2b 	bl	48cc <NOROM_SysCtrlResetSourceGet>
    1476:	2808      	cmp	r0, #8
    1478:	d11a      	bne.n	14b0 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    147a:	4b20      	ldr	r3, [pc, #128]	; (14fc <system_init+0x198>)
    147c:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    147e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1482:	3b04      	subs	r3, #4
    1484:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1486:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    148a:	3324      	adds	r3, #36	; 0x24
    148c:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    148e:	2000      	movs	r0, #0
    1490:	f7ff fc28 	bl	ce4 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1494:	4a1a      	ldr	r2, [pc, #104]	; (1500 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    1496:	2015      	movs	r0, #21
    1498:	6813      	ldr	r3, [r2, #0]
    149a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    149e:	6013      	str	r3, [r2, #0]
    14a0:	4b13      	ldr	r3, [pc, #76]	; (14f0 <system_init+0x18c>)
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	691b      	ldr	r3, [r3, #16]
    14a6:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    14a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    14ac:	f7ff bcd4 	b.w	e58 <tci_run_auxiliary_timer>
		diag ("");
    14b0:	4814      	ldr	r0, [pc, #80]	; (1504 <system_init+0x1a0>)
    14b2:	f000 fca5 	bl	1e00 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b6:	4814      	ldr	r0, [pc, #80]	; (1508 <system_init+0x1a4>)
    14b8:	f000 fca2 	bl	1e00 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	4913      	ldr	r1, [pc, #76]	; (150c <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    14be:	4814      	ldr	r0, [pc, #80]	; (1510 <system_init+0x1ac>)
    14c0:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    14c4:	b289      	uxth	r1, r1
    14c6:	f000 fc9b 	bl	1e00 <diag>
    14ca:	e7e0      	b.n	148e <system_init+0x12a>
    14cc:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    14d0:	60082028 	andvs	r2, r8, r8, lsr #32
    14d4:	00005264 	andeq	r5, r0, r4, ror #4
    14d8:	40022090 	mulmi	r2, r0, r0
    14dc:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    14e0:	400220a0 	andmi	r2, r2, r0, lsr #1
    14e4:	40092024 	andmi	r2, r9, r4, lsr #32
    14e8:	00050003 	andeq	r0, r5, r3
    14ec:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    14f0:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    14f4:	40092000 	andmi	r2, r9, r0
    14f8:	20000550 	andcs	r0, r0, r0, asr r5
    14fc:	4009400c 	andmi	r4, r9, ip
    1500:	40001038 	andmi	r1, r0, r8, lsr r0
    1504:	00004b67 	andeq	r4, r0, r7, ror #22
    1508:	000051ef 	andeq	r5, r0, pc, ror #3
    150c:	200006dc 	ldrdcs	r0, [r0], -ip
    1510:	0000523b 	andeq	r5, r0, fp, lsr r2
    1514:	7f077f3f 	svcvc	0x00077f3f
    1518:	42441a00 	submi	r1, r4, #0, 20

0000151c <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	2803      	cmp	r0, #3
    151e:	4603      	mov	r3, r0
    1520:	bf28      	it	cs
    1522:	2303      	movcs	r3, #3
    1524:	4a05      	ldr	r2, [pc, #20]	; (153c <setpowermode+0x20>)
    1526:	b2db      	uxtb	r3, r3
    1528:	2801      	cmp	r0, #1
    152a:	7093      	strb	r3, [r2, #2]
    152c:	d904      	bls.n	1538 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    152e:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1530:	f011 0f01 	tst.w	r1, #1
    1534:	bf18      	it	ne
    1536:	2301      	movne	r3, #1
    1538:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    153a:	4770      	bx	lr
    153c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

00001540 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    1540:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    1544:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1546:	4b79      	ldr	r3, [pc, #484]	; (172c <__pi_release+0x1ec>)
    1548:	af00      	add	r7, sp, #0
    154a:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    154e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    1552:	681a      	ldr	r2, [r3, #0]
    1554:	4b76      	ldr	r3, [pc, #472]	; (1730 <__pi_release+0x1f0>)
    1556:	429a      	cmp	r2, r3
    1558:	d127      	bne.n	15aa <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    155a:	4e76      	ldr	r6, [pc, #472]	; (1734 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    155c:	2100      	movs	r1, #0
    155e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1562:	f000 f9ed 	bl	1940 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    1566:	4a74      	ldr	r2, [pc, #464]	; (1738 <__pi_release+0x1f8>)
    1568:	4b74      	ldr	r3, [pc, #464]	; (173c <__pi_release+0x1fc>)
    156a:	6812      	ldr	r2, [r2, #0]
    156c:	601a      	str	r2, [r3, #0]
    156e:	681a      	ldr	r2, [r3, #0]
    1570:	b9fa      	cbnz	r2, 15b2 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1572:	4c73      	ldr	r4, [pc, #460]	; (1740 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    1576:	4d73      	ldr	r5, [pc, #460]	; (1744 <__pi_release+0x204>)
    1578:	782b      	ldrb	r3, [r5, #0]
    157a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    157e:	0798      	lsls	r0, r3, #30
    1580:	607a      	str	r2, [r7, #4]
    1582:	f100 80cd 	bmi.w	1720 <__pi_release+0x1e0>
	system_event_count ++;
    1586:	4a70      	ldr	r2, [pc, #448]	; (1748 <__pi_release+0x208>)
    1588:	6813      	ldr	r3, [r2, #0]
    158a:	3301      	adds	r3, #1
    158c:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    158e:	78ea      	ldrb	r2, [r5, #3]
    1590:	2a01      	cmp	r2, #1
    1592:	b2d3      	uxtb	r3, r2
    1594:	d017      	beq.n	15c6 <__pi_release+0x86>
    1596:	2b02      	cmp	r3, #2
    1598:	d031      	beq.n	15fe <__pi_release+0xbe>
    159a:	2b00      	cmp	r3, #0
    159c:	f040 8095 	bne.w	16ca <__pi_release+0x18a>
			__WFI ();
    15a0:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    15a2:	b662      	cpsie	i
    15a4:	bf00      	nop
    15a6:	bf00      	nop
    15a8:	e7e4      	b.n	1574 <__pi_release+0x34>
	check_stack_overflow;
    15aa:	200b      	movs	r0, #11
    15ac:	4967      	ldr	r1, [pc, #412]	; (174c <__pi_release+0x20c>)
    15ae:	f7ff fc09 	bl	dc4 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b2:	6851      	ldr	r1, [r2, #4]
    15b4:	b129      	cbz	r1, 15c2 <__pi_release+0x82>
    15b6:	8810      	ldrh	r0, [r2, #0]
    15b8:	0704      	lsls	r4, r0, #28
    15ba:	d102      	bne.n	15c2 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	0900      	lsrs	r0, r0, #4
    15be:	4788      	blx	r1
			goto Redo;
    15c0:	e7cc      	b.n	155c <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    15c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    15c4:	e7d2      	b.n	156c <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15c6:	4a62      	ldr	r2, [pc, #392]	; (1750 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15ca:	6813      	ldr	r3, [r2, #0]
    15cc:	f043 0301 	orr.w	r3, r3, #1
    15d0:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    15d6:	f043 0303 	orr.w	r3, r3, #3
    15da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15de:	4b5d      	ldr	r3, [pc, #372]	; (1754 <__pi_release+0x214>)
    15e0:	681b      	ldr	r3, [r3, #0]
    15e2:	699b      	ldr	r3, [r3, #24]
    15e4:	4798      	blx	r3
    15e6:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	6823      	ldr	r3, [r4, #0]
    15ea:	f043 0304 	orr.w	r3, r3, #4
    15ee:	6023      	str	r3, [r4, #0]
			__WFI ();
    15f0:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f2:	6823      	ldr	r3, [r4, #0]
    15f4:	f023 0304 	bic.w	r3, r3, #4
    15f8:	6023      	str	r3, [r4, #0]
    15fa:	6833      	ldr	r3, [r6, #0]
}
    15fc:	e7d1      	b.n	15a2 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    15fe:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1602:	687a      	ldr	r2, [r7, #4]
    1604:	4b54      	ldr	r3, [pc, #336]	; (1758 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1606:	f8df b188 	ldr.w	fp, [pc, #392]	; 1790 <__pi_release+0x250>
    160a:	601a      	str	r2, [r3, #0]
    160c:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    160e:	f8df a144 	ldr.w	sl, [pc, #324]	; 1754 <__pi_release+0x214>
    1612:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1616:	6833      	ldr	r3, [r6, #0]
    1618:	4b50      	ldr	r3, [pc, #320]	; (175c <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1794 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    161e:	f8c3 8000 	str.w	r8, [r3]
    1622:	6868      	ldr	r0, [r5, #4]
    1624:	f8da 3000 	ldr.w	r3, [sl]
    1628:	f040 0020 	orr.w	r0, r0, #32
    162c:	699b      	ldr	r3, [r3, #24]
    162e:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	4b4b      	ldr	r3, [pc, #300]	; (1760 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1632:	2103      	movs	r1, #3
    1634:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	f8d9 3000 	ldr.w	r3, [r9]
    163c:	4849      	ldr	r0, [pc, #292]	; (1764 <__pi_release+0x224>)
    163e:	f023 0303 	bic.w	r3, r3, #3
    1642:	f8c9 3000 	str.w	r3, [r9]
    1646:	4b48      	ldr	r3, [pc, #288]	; (1768 <__pi_release+0x228>)
    1648:	681a      	ldr	r2, [r3, #0]
    164a:	6852      	ldr	r2, [r2, #4]
    164c:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    164e:	6878      	ldr	r0, [r7, #4]
    1650:	f002 fffc 	bl	464c <NOROM_SysCtrlSetRechargeBeforePowerDown>
    1654:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1656:	6822      	ldr	r2, [r4, #0]
    1658:	f042 0204 	orr.w	r2, r2, #4
    165c:	6022      	str	r2, [r4, #0]
			__WFI ();
    165e:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1662:	4b41      	ldr	r3, [pc, #260]	; (1768 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1664:	f022 0204 	bic.w	r2, r2, #4
    1668:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	4641      	mov	r1, r8
    166e:	685b      	ldr	r3, [r3, #4]
    1670:	483c      	ldr	r0, [pc, #240]	; (1764 <__pi_release+0x224>)
    1672:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	4a3c      	ldr	r2, [pc, #240]	; (176c <__pi_release+0x22c>)
    167a:	f043 0303 	orr.w	r3, r3, #3
    167e:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1682:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1686:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    1688:	0699      	lsls	r1, r3, #26
    168a:	d5fc      	bpl.n	1686 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	f8da 3000 	ldr.w	r3, [sl]
    1690:	6868      	ldr	r0, [r5, #4]
    1692:	695b      	ldr	r3, [r3, #20]
    1694:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1696:	4d2f      	ldr	r5, [pc, #188]	; (1754 <__pi_release+0x214>)
    1698:	4b2a      	ldr	r3, [pc, #168]	; (1744 <__pi_release+0x204>)
    169a:	6858      	ldr	r0, [r3, #4]
    169c:	682b      	ldr	r3, [r5, #0]
    169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    16a0:	4798      	blx	r3
    16a2:	2801      	cmp	r0, #1
    16a4:	d1f8      	bne.n	1698 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    16a6:	4b2d      	ldr	r3, [pc, #180]	; (175c <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	4a2d      	ldr	r2, [pc, #180]	; (1760 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    16aa:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16ac:	2300      	movs	r3, #0
    16ae:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	4b29      	ldr	r3, [pc, #164]	; (1758 <__pi_release+0x218>)
    16b2:	6018      	str	r0, [r3, #0]
    16b4:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b6:	f003 f8d9 	bl	486c <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    16ba:	f7ff fcbd 	bl	1038 <reinit_uart>
    16be:	4a2c      	ldr	r2, [pc, #176]	; (1770 <__pi_release+0x230>)
    16c0:	6813      	ldr	r3, [r2, #0]
    16c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    16c6:	6013      	str	r3, [r2, #0]
}
    16c8:	e76b      	b.n	15a2 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    16ca:	4b2a      	ldr	r3, [pc, #168]	; (1774 <__pi_release+0x234>)
    16cc:	2001      	movs	r0, #1
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	68db      	ldr	r3, [r3, #12]
    16d2:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	4a28      	ldr	r2, [pc, #160]	; (1778 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16d6:	4929      	ldr	r1, [pc, #164]	; (177c <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d8:	6813      	ldr	r3, [r2, #0]
    16da:	f023 0301 	bic.w	r3, r3, #1
    16de:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	4b27      	ldr	r3, [pc, #156]	; (1780 <__pi_release+0x240>)
    16e2:	681a      	ldr	r2, [r3, #0]
    16e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    16e8:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ea:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    16ee:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	604a      	str	r2, [r1, #4]
    16f2:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	687a      	ldr	r2, [r7, #4]
    16f6:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	687a      	ldr	r2, [r7, #4]
    16fa:	4b22      	ldr	r3, [pc, #136]	; (1784 <__pi_release+0x244>)
    16fc:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    16fe:	2201      	movs	r2, #1
    1700:	4b21      	ldr	r3, [pc, #132]	; (1788 <__pi_release+0x248>)
    1702:	601a      	str	r2, [r3, #0]
    1704:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1706:	4a19      	ldr	r2, [pc, #100]	; (176c <__pi_release+0x22c>)
    1708:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170a:	069b      	lsls	r3, r3, #26
    170c:	d4fc      	bmi.n	1708 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    170e:	2201      	movs	r2, #1
    1710:	4b1e      	ldr	r3, [pc, #120]	; (178c <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    1712:	2037      	movs	r0, #55	; 0x37
    1714:	601a      	str	r2, [r3, #0]
    1716:	4b0f      	ldr	r3, [pc, #60]	; (1754 <__pi_release+0x214>)
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	699b      	ldr	r3, [r3, #24]
    171c:	4798      	blx	r3
			goto DeepSleep;
    171e:	e763      	b.n	15e8 <__pi_release+0xa8>
	__SLEEP;
    1720:	782b      	ldrb	r3, [r5, #0]
    1722:	f36f 0341 	bfc	r3, #1, #1
    1726:	702b      	strb	r3, [r5, #0]
    1728:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    172a:	e717      	b.n	155c <__pi_release+0x1c>
    172c:	20005000 	andcs	r5, r0, r0
    1730:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1734:	4009202c 	andmi	r2, r9, ip, lsr #32
    1738:	20000554 	andcs	r0, r0, r4, asr r5
    173c:	200006d8 	ldrdcs	r0, [r0], -r8
    1740:	e000ed10 	and	lr, r0, r0, lsl sp
    1744:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    1748:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    174c:	00005252 	andeq	r5, r0, r2, asr r2
    1750:	4008218c 	andmi	r2, r8, ip, lsl #3
    1754:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    1758:	4009400c 	andmi	r4, r9, ip
    175c:	60082028 	andvs	r2, r8, r8, lsr #32
    1760:	43040180 	movwmi	r0, #16768	; 0x4180
    1764:	40034000 	andmi	r4, r3, r0
    1768:	100001d8 	ldrdne	r0, [r0], -r8
    176c:	40091014 	andmi	r1, r9, r4, lsl r0
    1770:	40001038 	andmi	r1, r0, r8, lsr r0
    1774:	100001a0 	andne	r0, r0, r0, lsr #3
    1778:	40091010 	andmi	r1, r9, r0, lsl r0
    177c:	40093000 	andmi	r3, r9, r0
    1780:	40091040 	andmi	r1, r9, r0, asr #32
    1784:	43220420 			; <UNDEFINED> instruction: 0x43220420
    1788:	40091018 	andmi	r1, r9, r8, lsl r0
    178c:	43040188 	movwmi	r0, #16776	; 0x4188
    1790:	43220200 			; <UNDEFINED> instruction: 0x43220200
    1794:	40082224 	andmi	r2, r8, r4, lsr #4

00001798 <halt>:
	cli_tim;
    1798:	2400      	movs	r4, #0
void halt (void) {
    179a:	b508      	push	{r3, lr}
	cli_tim;
    179c:	4b07      	ldr	r3, [pc, #28]	; (17bc <halt+0x24>)
	diag ("PicOS halted");
    179e:	4808      	ldr	r0, [pc, #32]	; (17c0 <halt+0x28>)
	cli_tim;
    17a0:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    17a2:	f000 fb2d 	bl	1e00 <diag>
	mdelay (500);
    17a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17aa:	f7ff fab7 	bl	d1c <mdelay>
	setpowermode (2);
    17ae:	2002      	movs	r0, #2
    17b0:	f7ff feb4 	bl	151c <setpowermode>
	__PCB = NULL;
    17b4:	4b03      	ldr	r3, [pc, #12]	; (17c4 <halt+0x2c>)
    17b6:	601c      	str	r4, [r3, #0]
	release;
    17b8:	f7ff fec2 	bl	1540 <__pi_release>
    17bc:	43240280 			; <UNDEFINED> instruction: 0x43240280
    17c0:	00005255 	andeq	r5, r0, r5, asr r2
    17c4:	20000554 	andcs	r0, r0, r4, asr r5

000017c8 <main>:

#include "scheduler.h"

}

int main (void) {
    17c8:	b510      	push	{r4, lr}
    17ca:	4b11      	ldr	r3, [pc, #68]	; (1810 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	4911      	ldr	r1, [pc, #68]	; (1814 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17ce:	4a12      	ldr	r2, [pc, #72]	; (1818 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17d0:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	4293      	cmp	r3, r2
    17d6:	d1fb      	bne.n	17d0 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17d8:	4c10      	ldr	r4, [pc, #64]	; (181c <main+0x54>)
	system_init ();
    17da:	f7ff fdc3 	bl	1364 <system_init>
	tcv_init ();
    17de:	f000 fedb 	bl	2598 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e2:	6823      	ldr	r3, [r4, #0]
    17e4:	2129      	movs	r1, #41	; 0x29
    17e6:	2000      	movs	r0, #0
    17e8:	681b      	ldr	r3, [r3, #0]
    17ea:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17ec:	6823      	ldr	r3, [r4, #0]
    17ee:	2120      	movs	r1, #32
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	2001      	movs	r0, #1
    17f4:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    17f6:	2100      	movs	r1, #0
    17f8:	4809      	ldr	r0, [pc, #36]	; (1820 <main+0x58>)
    17fa:	f000 fadb 	bl	1db4 <__pi_fork>
    17fe:	4b09      	ldr	r3, [pc, #36]	; (1824 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    1800:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1802:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    1804:	2010      	movs	r0, #16
    1806:	f000 f951 	bl	1aac <delay>
    180a:	b662      	cpsie	i

	sti;

	__pi_release ();
    180c:	f7ff fe98 	bl	1540 <__pi_release>
    1810:	20004bfc 	strdcs	r4, [r0], -ip
    1814:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1818:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    181c:	10000184 	andne	r0, r0, r4, lsl #3
    1820:	00000725 	andeq	r0, r0, r5, lsr #14
    1824:	200006d8 	ldrdcs	r0, [r0], -r8

00001828 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    1828:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    182a:	4b0d      	ldr	r3, [pc, #52]	; (1860 <killev+0x38>)
	wfun = (aword)(pid->code);
    182c:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    182e:	681a      	ldr	r2, [r3, #0]
    1830:	b1aa      	cbz	r2, 185e <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    1832:	4614      	mov	r4, r2
    1834:	f834 1b10 	ldrh.w	r1, [r4], #16
    1838:	2300      	movs	r3, #0
    183a:	f001 0107 	and.w	r1, r1, #7
    183e:	e001      	b.n	1844 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    1840:	42b5      	cmp	r5, r6
    1842:	d006      	beq.n	1852 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    1844:	4299      	cmp	r1, r3
    1846:	dd08      	ble.n	185a <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    1848:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    184c:	3301      	adds	r3, #1
    184e:	42a8      	cmp	r0, r5
    1850:	d1f6      	bne.n	1840 <killev+0x18>
			    ) {
				wakeupev (i, j);
    1852:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1856:	889b      	ldrh	r3, [r3, #4]
    1858:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    185a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    185c:	e7e8      	b.n	1830 <killev+0x8>
				break;
			}
		}
	}
}
    185e:	bd70      	pop	{r4, r5, r6, pc}
    1860:	20000554 	andcs	r0, r0, r4, asr r5

00001864 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	4a1d      	ldr	r2, [pc, #116]	; (18dc <qfree+0x78>)
static void qfree (aword *ch) {
    1866:	b530      	push	{r4, r5, lr}
    1868:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186a:	6813      	ldr	r3, [r2, #0]
    186c:	b93b      	cbnz	r3, 187e <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    186e:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    1870:	4a1a      	ldr	r2, [pc, #104]	; (18dc <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1872:	bb53      	cbnz	r3, 18ca <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    1874:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    1876:	4b1a      	ldr	r3, [pc, #104]	; (18e0 <qfree+0x7c>)
	m_setnextp (cc, ch);
    1878:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    187a:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    187c:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    187e:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    1882:	3101      	adds	r1, #1
    1884:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1888:	4288      	cmp	r0, r1
    188a:	d10b      	bne.n	18a4 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    188c:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    188e:	f850 0c04 	ldr.w	r0, [r0, #-4]
    1892:	f853 1c04 	ldr.w	r1, [r3, #-4]
    1896:	4401      	add	r1, r0
    1898:	4618      	mov	r0, r3
    189a:	3101      	adds	r1, #1
    189c:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	e7e3      	b.n	186c <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    18a8:	3101      	adds	r1, #1
    18aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    18ae:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    18b0:	bf03      	ittte	eq
    18b2:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    18b8:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    18bc:	461a      	movne	r2, r3
    18be:	bf02      	ittt	eq
    18c0:	1949      	addeq	r1, r1, r5
    18c2:	3101      	addeq	r1, #1
    18c4:	f840 1c04 	streq.w	r1, [r0, #-4]
    18c8:	e7ea      	b.n	18a0 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    18ca:	f853 4c04 	ldr.w	r4, [r3, #-4]
    18ce:	f850 1c04 	ldr.w	r1, [r0, #-4]
    18d2:	428c      	cmp	r4, r1
    18d4:	d2ce      	bcs.n	1874 <qfree+0x10>
		chunk = m_nextp (chunk))
    18d6:	461a      	mov	r2, r3
    18d8:	681b      	ldr	r3, [r3, #0]
    18da:	e7ca      	b.n	1872 <qfree+0xe>
    18dc:	20000568 	andcs	r0, r0, r8, ror #10
    18e0:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

000018e4 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	4a03      	ldr	r2, [pc, #12]	; (18f4 <dgout+0x10>)
    18e6:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    18e8:	071b      	lsls	r3, r3, #28
    18ea:	d4fc      	bmi.n	18e6 <dgout+0x2>
	diag_wchar (c, a);
    18ec:	4b02      	ldr	r3, [pc, #8]	; (18f8 <dgout+0x14>)
    18ee:	b2c0      	uxtb	r0, r0
    18f0:	6018      	str	r0, [r3, #0]
}
    18f2:	4770      	bx	lr
    18f4:	40001018 	andmi	r1, r0, r8, lsl r0
    18f8:	40001000 	andmi	r1, r0, r0

000018fc <__pi_badstate>:
	syserror (ESTATE, "state");
    18fc:	2007      	movs	r0, #7
void __pi_badstate (void) {
    18fe:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1900:	4901      	ldr	r1, [pc, #4]	; (1908 <__pi_badstate+0xc>)
    1902:	f7ff fa5f 	bl	dc4 <__pi_syserror>
    1906:	bf00      	nop
    1908:	000052a8 	andeq	r5, r0, r8, lsr #5

0000190c <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    190c:	4a08      	ldr	r2, [pc, #32]	; (1930 <utimer_add+0x24>)
void utimer_add (address ut) {
    190e:	4603      	mov	r3, r0
    1910:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    1912:	2000      	movs	r0, #0
void utimer_add (address ut) {
    1914:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    1916:	f852 4b04 	ldr.w	r4, [r2], #4
    191a:	b12c      	cbz	r4, 1928 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	3001      	adds	r0, #1
    191e:	2804      	cmp	r0, #4
    1920:	d1f9      	bne.n	1916 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    1922:	4904      	ldr	r1, [pc, #16]	; (1934 <utimer_add+0x28>)
    1924:	f7ff fa4e 	bl	dc4 <__pi_syserror>
	__pi_utims [i] = ut;
    1928:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    192c:	bd10      	pop	{r4, pc}
    192e:	bf00      	nop
    1930:	200006c8 	andcs	r0, r0, r8, asr #13
    1934:	000052ae 	andeq	r5, r0, lr, lsr #5

00001938 <__pi_utimer_set>:
	*t = v;
    1938:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    193a:	f7ff ba8d 	b.w	e58 <tci_run_auxiliary_timer>
	...

00001940 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1942:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1944:	4608      	mov	r0, r1
    1946:	f7ff fb25 	bl	f94 <tci_update_delay_ticks>
    194a:	2800      	cmp	r0, #0
    194c:	d154      	bne.n	19f8 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    194e:	4b2b      	ldr	r3, [pc, #172]	; (19fc <update_n_wake+0xbc>)
    1950:	4d2b      	ldr	r5, [pc, #172]	; (1a00 <update_n_wake+0xc0>)
    1952:	8819      	ldrh	r1, [r3, #0]
    1954:	882a      	ldrh	r2, [r5, #0]
    1956:	b289      	uxth	r1, r1
    1958:	428a      	cmp	r2, r1
    195a:	492a      	ldr	r1, [pc, #168]	; (1a04 <update_n_wake+0xc4>)
    195c:	d803      	bhi.n	1966 <update_n_wake+0x26>
    195e:	8808      	ldrh	r0, [r1, #0]
    1960:	b280      	uxth	r0, r0
    1962:	4282      	cmp	r2, r0
    1964:	d20d      	bcs.n	1982 <update_n_wake+0x42>
    1966:	881e      	ldrh	r6, [r3, #0]
    1968:	8808      	ldrh	r0, [r1, #0]
    196a:	b2b6      	uxth	r6, r6
    196c:	b280      	uxth	r0, r0
    196e:	4286      	cmp	r6, r0
    1970:	d236      	bcs.n	19e0 <update_n_wake+0xa0>
    1972:	8818      	ldrh	r0, [r3, #0]
    1974:	b280      	uxth	r0, r0
    1976:	4282      	cmp	r2, r0
    1978:	d903      	bls.n	1982 <update_n_wake+0x42>
    197a:	8808      	ldrh	r0, [r1, #0]
    197c:	b280      	uxth	r0, r0
    197e:	4282      	cmp	r2, r0
    1980:	d32e      	bcc.n	19e0 <update_n_wake+0xa0>
		for_all_tasks (i) {
    1982:	4a21      	ldr	r2, [pc, #132]	; (1a08 <update_n_wake+0xc8>)
    1984:	6810      	ldr	r0, [r2, #0]
    1986:	b918      	cbnz	r0, 1990 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1988:	8818      	ldrh	r0, [r3, #0]
    198a:	4404      	add	r4, r0
    198c:	802c      	strh	r4, [r5, #0]
    198e:	e02c      	b.n	19ea <update_n_wake+0xaa>
			if (!twaiting (i))
    1990:	8806      	ldrh	r6, [r0, #0]
    1992:	0732      	lsls	r2, r6, #28
    1994:	d51b      	bpl.n	19ce <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1996:	881f      	ldrh	r7, [r3, #0]
    1998:	8842      	ldrh	r2, [r0, #2]
    199a:	b2bf      	uxth	r7, r7
    199c:	42ba      	cmp	r2, r7
    199e:	d803      	bhi.n	19a8 <update_n_wake+0x68>
    19a0:	880f      	ldrh	r7, [r1, #0]
    19a2:	b2bf      	uxth	r7, r7
    19a4:	42ba      	cmp	r2, r7
    19a6:	d20f      	bcs.n	19c8 <update_n_wake+0x88>
    19a8:	f8b3 c000 	ldrh.w	ip, [r3]
    19ac:	880f      	ldrh	r7, [r1, #0]
    19ae:	fa1f fc8c 	uxth.w	ip, ip
    19b2:	b2bf      	uxth	r7, r7
    19b4:	45bc      	cmp	ip, r7
    19b6:	d20c      	bcs.n	19d2 <update_n_wake+0x92>
    19b8:	881f      	ldrh	r7, [r3, #0]
    19ba:	b2bf      	uxth	r7, r7
    19bc:	42ba      	cmp	r2, r7
    19be:	d903      	bls.n	19c8 <update_n_wake+0x88>
    19c0:	880f      	ldrh	r7, [r1, #0]
    19c2:	b2bf      	uxth	r7, r7
    19c4:	42ba      	cmp	r2, r7
    19c6:	d304      	bcc.n	19d2 <update_n_wake+0x92>
				wakeuptm (i);
    19c8:	f026 060f 	bic.w	r6, r6, #15
    19cc:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    19ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    19d0:	e7d9      	b.n	1986 <update_n_wake+0x46>
				d = i->Timer - znew;
    19d2:	881e      	ldrh	r6, [r3, #0]
    19d4:	1b92      	subs	r2, r2, r6
    19d6:	b292      	uxth	r2, r2
    19d8:	4294      	cmp	r4, r2
    19da:	bf28      	it	cs
    19dc:	4614      	movcs	r4, r2
    19de:	e7f6      	b.n	19ce <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    19e0:	8818      	ldrh	r0, [r3, #0]
    19e2:	1a12      	subs	r2, r2, r0
    19e4:	b292      	uxth	r2, r2
    19e6:	4294      	cmp	r4, r2
    19e8:	d9ce      	bls.n	1988 <update_n_wake+0x48>
	__pi_old = znew;
    19ea:	881b      	ldrh	r3, [r3, #0]
    19ec:	b29b      	uxth	r3, r3
    19ee:	800b      	strh	r3, [r1, #0]
}
    19f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    19f4:	f7ff ba10 	b.w	e18 <tci_run_delay_timer>
}
    19f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19fa:	bf00      	nop
    19fc:	200006c4 	andcs	r0, r0, r4, asr #13
    1a00:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1a04:	200006ba 			; <UNDEFINED> instruction: 0x200006ba
    1a08:	20000554 	andcs	r0, r0, r4, asr r5

00001a0c <proceed>:
void proceed (word state) {
    1a0c:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1a0e:	4b03      	ldr	r3, [pc, #12]	; (1a1c <proceed+0x10>)
    1a10:	0100      	lsls	r0, r0, #4
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	8018      	strh	r0, [r3, #0]
	release;
    1a16:	f7ff fd93 	bl	1540 <__pi_release>
    1a1a:	bf00      	nop
    1a1c:	200006d8 	ldrdcs	r0, [r0], -r8

00001a20 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1a20:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    1a22:	4b0a      	ldr	r3, [pc, #40]	; (1a4c <__pi_wait+0x2c>)
    1a24:	681c      	ldr	r4, [r3, #0]
    1a26:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1a28:	f013 0f04 	tst.w	r3, #4
    1a2c:	f003 0207 	and.w	r2, r3, #7
    1a30:	d003      	beq.n	1a3a <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    1a32:	2005      	movs	r0, #5
    1a34:	4906      	ldr	r1, [pc, #24]	; (1a50 <__pi_wait+0x30>)
    1a36:	f7ff f9c5 	bl	dc4 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1a3a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1a3e:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1a40:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    1a42:	8191      	strh	r1, [r2, #12]
    1a44:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    1a46:	8023      	strh	r3, [r4, #0]
}
    1a48:	bd10      	pop	{r4, pc}
    1a4a:	bf00      	nop
    1a4c:	200006d8 	ldrdcs	r0, [r0], -r8
    1a50:	000052b3 			; <UNDEFINED> instruction: 0x000052b3

00001a54 <__pi_trigger>:
void __pi_trigger (aword event) {
    1a54:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    1a56:	4b0b      	ldr	r3, [pc, #44]	; (1a84 <__pi_trigger+0x30>)
    1a58:	681a      	ldr	r2, [r3, #0]
    1a5a:	b192      	cbz	r2, 1a82 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1a5c:	4614      	mov	r4, r2
    1a5e:	2300      	movs	r3, #0
    1a60:	f834 1b10 	ldrh.w	r1, [r4], #16
    1a64:	f001 0107 	and.w	r1, r1, #7
    1a68:	4299      	cmp	r1, r3
    1a6a:	dd08      	ble.n	1a7e <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1a6c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1a70:	3301      	adds	r3, #1
    1a72:	4285      	cmp	r5, r0
    1a74:	d1f8      	bne.n	1a68 <__pi_trigger+0x14>
				wakeupev (i, j);
    1a76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1a7a:	889b      	ldrh	r3, [r3, #4]
    1a7c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1a7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1a80:	e7eb      	b.n	1a5a <__pi_trigger+0x6>
}
    1a82:	bd30      	pop	{r4, r5, pc}
    1a84:	20000554 	andcs	r0, r0, r4, asr r5

00001a88 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1a88:	b510      	push	{r4, lr}
    1a8a:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1a8c:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <__pi_join+0x20>)
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	b90b      	cbnz	r3, 1a96 <__pi_join+0xe>
	return 0;
    1a92:	461c      	mov	r4, r3
    1a94:	e004      	b.n	1aa0 <__pi_join+0x18>
		if ((aword)i == pid) {
    1a96:	42a3      	cmp	r3, r4
    1a98:	d104      	bne.n	1aa4 <__pi_join+0x1c>
			__pi_wait (pid, st);
    1a9a:	4620      	mov	r0, r4
    1a9c:	f7ff ffc0 	bl	1a20 <__pi_wait>
}
    1aa0:	4620      	mov	r0, r4
    1aa2:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1aa6:	e7f3      	b.n	1a90 <__pi_join+0x8>
    1aa8:	20000554 	andcs	r0, r0, r4, asr r5

00001aac <delay>:
void delay (word d, word state) {
    1aac:	b538      	push	{r3, r4, r5, lr}
    1aae:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1ab0:	4d0a      	ldr	r5, [pc, #40]	; (1adc <delay+0x30>)
    1ab2:	682a      	ldr	r2, [r5, #0]
    1ab4:	8813      	ldrh	r3, [r2, #0]
    1ab6:	f003 0307 	and.w	r3, r3, #7
    1aba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1abe:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    1ac0:	2101      	movs	r1, #1
    1ac2:	f7ff ff3d 	bl	1940 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1ac6:	4b06      	ldr	r3, [pc, #24]	; (1ae0 <delay+0x34>)
    1ac8:	8818      	ldrh	r0, [r3, #0]
    1aca:	682b      	ldr	r3, [r5, #0]
    1acc:	4404      	add	r4, r0
    1ace:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    1ad0:	682a      	ldr	r2, [r5, #0]
    1ad2:	8813      	ldrh	r3, [r2, #0]
    1ad4:	f043 0308 	orr.w	r3, r3, #8
    1ad8:	8013      	strh	r3, [r2, #0]
}
    1ada:	bd38      	pop	{r3, r4, r5, pc}
    1adc:	200006d8 	ldrdcs	r0, [r0], -r8
    1ae0:	200006ba 			; <UNDEFINED> instruction: 0x200006ba

00001ae4 <running>:
	if (fun == NULL)
    1ae4:	4603      	mov	r3, r0
    1ae6:	b910      	cbnz	r0, 1aee <running+0xa>
		return (int) __pi_curr;
    1ae8:	4b05      	ldr	r3, [pc, #20]	; (1b00 <running+0x1c>)
    1aea:	6818      	ldr	r0, [r3, #0]
    1aec:	4770      	bx	lr
	for_all_tasks (i)
    1aee:	4a05      	ldr	r2, [pc, #20]	; (1b04 <running+0x20>)
    1af0:	6810      	ldr	r0, [r2, #0]
    1af2:	b900      	cbnz	r0, 1af6 <running+0x12>
}
    1af4:	4770      	bx	lr
		if (i->code == fun)
    1af6:	6842      	ldr	r2, [r0, #4]
    1af8:	429a      	cmp	r2, r3
    1afa:	d0fb      	beq.n	1af4 <running+0x10>
	for_all_tasks (i)
    1afc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1afe:	e7f8      	b.n	1af2 <running+0xe>
    1b00:	200006d8 	ldrdcs	r0, [r0], -r8
    1b04:	20000554 	andcs	r0, r0, r4, asr r5

00001b08 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1b08:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1b0a:	2000      	movs	r0, #0
    1b0c:	5c1a      	ldrb	r2, [r3, r0]
    1b0e:	b902      	cbnz	r2, 1b12 <__pi_strlen+0xa>
}
    1b10:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1b12:	3001      	adds	r0, #1
    1b14:	e7fa      	b.n	1b0c <__pi_strlen+0x4>

00001b16 <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    1b16:	3801      	subs	r0, #1
    1b18:	f811 3b01 	ldrb.w	r3, [r1], #1
    1b1c:	f800 3f01 	strb.w	r3, [r0, #1]!
    1b20:	2b00      	cmp	r3, #0
    1b22:	d1f9      	bne.n	1b18 <__pi_strcpy+0x2>
}
    1b24:	4770      	bx	lr

00001b26 <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    1b26:	3901      	subs	r1, #1
    1b28:	4402      	add	r2, r0
    1b2a:	4290      	cmp	r0, r2
    1b2c:	d102      	bne.n	1b34 <__pi_strncpy+0xe>
	*d = '\0';
    1b2e:	2300      	movs	r3, #0
    1b30:	7003      	strb	r3, [r0, #0]
}
    1b32:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    1b34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d0f8      	beq.n	1b2e <__pi_strncpy+0x8>
		*d++ = *s++;
    1b3c:	f800 3b01 	strb.w	r3, [r0], #1
    1b40:	e7f3      	b.n	1b2a <__pi_strncpy+0x4>

00001b42 <__pi_memcpy>:
	while (n--)
    1b42:	3801      	subs	r0, #1
    1b44:	440a      	add	r2, r1
    1b46:	4291      	cmp	r1, r2
    1b48:	d100      	bne.n	1b4c <__pi_memcpy+0xa>
}
    1b4a:	4770      	bx	lr
		*dest++ = *src++;
    1b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1b50:	f800 3f01 	strb.w	r3, [r0, #1]!
    1b54:	e7f7      	b.n	1b46 <__pi_memcpy+0x4>

00001b56 <__pi_memset>:
	while (n--)
    1b56:	4402      	add	r2, r0
    1b58:	4290      	cmp	r0, r2
    1b5a:	d100      	bne.n	1b5e <__pi_memset+0x8>
}
    1b5c:	4770      	bx	lr
		*dest++ = c;
    1b5e:	f800 1b01 	strb.w	r1, [r0], #1
    1b62:	e7f9      	b.n	1b58 <__pi_memset+0x2>

00001b64 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1b64:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1b66:	b119      	cbz	r1, 1b70 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1b68:	2003      	movs	r0, #3
    1b6a:	4905      	ldr	r1, [pc, #20]	; (1b80 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1b6c:	f7ff f92a 	bl	dc4 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <adddevfunc+0x20>)
    1b72:	681a      	ldr	r2, [r3, #0]
    1b74:	b112      	cbz	r2, 1b7c <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1b76:	2004      	movs	r0, #4
    1b78:	4901      	ldr	r1, [pc, #4]	; (1b80 <adddevfunc+0x1c>)
    1b7a:	e7f7      	b.n	1b6c <adddevfunc+0x8>
	ioreq [loc] = rf;
    1b7c:	6018      	str	r0, [r3, #0]
}
    1b7e:	bd08      	pop	{r3, pc}
    1b80:	000052b6 			; <UNDEFINED> instruction: 0x000052b6
    1b84:	20000558 	andcs	r0, r0, r8, asr r5

00001b88 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b8c:	4604      	mov	r4, r0
    1b8e:	4616      	mov	r6, r2
    1b90:	461d      	mov	r5, r3
    1b92:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1b96:	b921      	cbnz	r1, 1ba2 <io+0x1a>
    1b98:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1c20 <io+0x98>
    1b9c:	f8d9 3000 	ldr.w	r3, [r9]
    1ba0:	b91b      	cbnz	r3, 1baa <io+0x22>
		syserror (ENODEVICE, "io");
    1ba2:	2001      	movs	r0, #1
    1ba4:	491d      	ldr	r1, [pc, #116]	; (1c1c <io+0x94>)
    1ba6:	f7ff f90d 	bl	dc4 <__pi_syserror>
	if (len == 0)
    1baa:	f1b8 0f00 	cmp.w	r8, #0
    1bae:	d028      	beq.n	1c02 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1bb0:	4642      	mov	r2, r8
    1bb2:	4629      	mov	r1, r5
    1bb4:	4630      	mov	r0, r6
    1bb6:	4798      	blx	r3
	if (ret >= 0)
    1bb8:	2800      	cmp	r0, #0
    1bba:	da23      	bge.n	1c04 <io+0x7c>
	if (ret == -1) {
    1bbc:	1c41      	adds	r1, r0, #1
    1bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1bc2:	d108      	bne.n	1bd6 <io+0x4e>
		if (retry == WNONE)
    1bc4:	429c      	cmp	r4, r3
    1bc6:	d01c      	beq.n	1c02 <io+0x7a>
		iowait (dev, operation, retry);
    1bc8:	4621      	mov	r1, r4
    1bca:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1bce:	f7ff ff27 	bl	1a20 <__pi_wait>
			release;
    1bd2:	f7ff fcb5 	bl	1540 <__pi_release>
	if (ret == -2) {
    1bd6:	1c82      	adds	r2, r0, #2
    1bd8:	d116      	bne.n	1c08 <io+0x80>
		if (retry != WNONE) {
    1bda:	429c      	cmp	r4, r3
    1bdc:	f8d9 9000 	ldr.w	r9, [r9]
    1be0:	d00a      	beq.n	1bf8 <io+0x70>
			iowait (dev, operation, retry);
    1be2:	4621      	mov	r1, r4
    1be4:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1be8:	f7ff ff1a 	bl	1a20 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1bec:	4642      	mov	r2, r8
    1bee:	4629      	mov	r1, r5
    1bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1bf4:	47c8      	blx	r9
    1bf6:	e7ec      	b.n	1bd2 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1bf8:	4642      	mov	r2, r8
    1bfa:	4629      	mov	r1, r5
    1bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c00:	47c8      	blx	r9
		return 0;
    1c02:	2000      	movs	r0, #0
}
    1c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1c08:	429c      	cmp	r4, r3
    1c0a:	d0fa      	beq.n	1c02 <io+0x7a>
		delay (-ret - 2, retry);
    1c0c:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1c10:	30fe      	adds	r0, #254	; 0xfe
    1c12:	4621      	mov	r1, r4
    1c14:	b280      	uxth	r0, r0
    1c16:	f7ff ff49 	bl	1aac <delay>
		release;
    1c1a:	e7da      	b.n	1bd2 <io+0x4a>
    1c1c:	000052bb 			; <UNDEFINED> instruction: 0x000052bb
    1c20:	20000558 	andcs	r0, r0, r8, asr r5

00001c24 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c24:	4a0d      	ldr	r2, [pc, #52]	; (1c5c <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1c26:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c28:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1c2c:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1c30:	089b      	lsrs	r3, r3, #2
    1c32:	1e59      	subs	r1, r3, #1
    1c34:	29ff      	cmp	r1, #255	; 0xff
    1c36:	d803      	bhi.n	1c40 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1c38:	2004      	movs	r0, #4
    1c3a:	4909      	ldr	r1, [pc, #36]	; (1c60 <__pi_malloc_init+0x3c>)
    1c3c:	f7ff f8c2 	bl	dc4 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1c40:	4908      	ldr	r1, [pc, #32]	; (1c64 <__pi_malloc_init+0x40>)
    1c42:	1d10      	adds	r0, r2, #4
    1c44:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c46:	2000      	movs	r0, #0
    1c48:	4907      	ldr	r1, [pc, #28]	; (1c68 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1c4a:	3b02      	subs	r3, #2
    1c4c:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c4e:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1c52:	4a06      	ldr	r2, [pc, #24]	; (1c6c <__pi_malloc_init+0x48>)
    1c54:	6013      	str	r3, [r2, #0]
    1c56:	4a06      	ldr	r2, [pc, #24]	; (1c70 <__pi_malloc_init+0x4c>)
    1c58:	6013      	str	r3, [r2, #0]
}
    1c5a:	bd08      	pop	{r3, pc}
    1c5c:	200006dc 	ldrdcs	r0, [r0], -ip
    1c60:	000052be 			; <UNDEFINED> instruction: 0x000052be
    1c64:	20000568 	andcs	r0, r0, r8, ror #10
    1c68:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1c6c:	2000055c 	andcs	r0, r0, ip, asr r5
    1c70:	20000564 	andcs	r0, r0, r4, ror #10

00001c74 <__pi_free>:
void __pi_free (aword *ch) {
    1c74:	b508      	push	{r3, lr}
	if (ch == NULL)
    1c76:	b1c8      	cbz	r0, 1cac <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1c78:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	db03      	blt.n	1c88 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1c80:	2006      	movs	r0, #6
    1c82:	490b      	ldr	r1, [pc, #44]	; (1cb0 <__pi_free+0x3c>)
    1c84:	f7ff f89e 	bl	dc4 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1c88:	490a      	ldr	r1, [pc, #40]	; (1cb4 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1c8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1c8e:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1c90:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1c94:	4413      	add	r3, r2
    1c96:	600b      	str	r3, [r1, #0]
	QFREE;
    1c98:	f7ff fde4 	bl	1864 <qfree>
	if (mevent [MA_NP] . nwait) {
    1c9c:	4806      	ldr	r0, [pc, #24]	; (1cb8 <__pi_free+0x44>)
    1c9e:	7803      	ldrb	r3, [r0, #0]
    1ca0:	b123      	cbz	r3, 1cac <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1ca2:	f7ff fed7 	bl	1a54 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1ca6:	7803      	ldrb	r3, [r0, #0]
    1ca8:	3b01      	subs	r3, #1
    1caa:	7003      	strb	r3, [r0, #0]
}
    1cac:	bd08      	pop	{r3, pc}
    1cae:	bf00      	nop
    1cb0:	000052c3 	andeq	r5, r0, r3, asr #5
    1cb4:	2000055c 	andcs	r0, r0, ip, asr r5
    1cb8:	20000560 	andcs	r0, r0, r0, ror #10

00001cbc <kill>:
void kill (aword pid) {
    1cbc:	b510      	push	{r4, lr}
	if (pid == 0)
    1cbe:	b908      	cbnz	r0, 1cc4 <kill+0x8>
		pid = (aword) __pi_curr;
    1cc0:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <kill+0x44>)
    1cc2:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1cc4:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1cc6:	4b0f      	ldr	r3, [pc, #60]	; (1d04 <kill+0x48>)
    1cc8:	681c      	ldr	r4, [r3, #0]
    1cca:	b91c      	cbnz	r4, 1cd4 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1ccc:	2003      	movs	r0, #3
    1cce:	490e      	ldr	r1, [pc, #56]	; (1d08 <kill+0x4c>)
    1cd0:	f7ff f878 	bl	dc4 <__pi_syserror>
		if ((aword)i == pid) {
    1cd4:	4284      	cmp	r4, r0
    1cd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1cd8:	d10e      	bne.n	1cf8 <kill+0x3c>
			if (j == NULL)
    1cda:	b95a      	cbnz	r2, 1cf4 <kill+0x38>
				__PCB = i->Next;
    1cdc:	6019      	str	r1, [r3, #0]
			killev (i);
    1cde:	4620      	mov	r0, r4
    1ce0:	f7ff fda2 	bl	1828 <killev>
			ufree (i);
    1ce4:	f7ff ffc6 	bl	1c74 <__pi_free>
			if (i == __pi_curr)
    1ce8:	4b05      	ldr	r3, [pc, #20]	; (1d00 <kill+0x44>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	42a3      	cmp	r3, r4
    1cee:	d106      	bne.n	1cfe <kill+0x42>
				release;
    1cf0:	f7ff fc26 	bl	1540 <__pi_release>
				j->Next = i->Next;
    1cf4:	62d1      	str	r1, [r2, #44]	; 0x2c
    1cf6:	e7f2      	b.n	1cde <kill+0x22>
    1cf8:	4622      	mov	r2, r4
    1cfa:	460c      	mov	r4, r1
    1cfc:	e7e5      	b.n	1cca <kill+0xe>
}
    1cfe:	bd10      	pop	{r4, pc}
    1d00:	200006d8 	ldrdcs	r0, [r0], -r8
    1d04:	20000554 	andcs	r0, r0, r4, asr r5
    1d08:	000052c8 	andeq	r5, r0, r8, asr #5

00001d0c <__pi_malloc>:
	if (size < 8)
    1d0c:	2807      	cmp	r0, #7
		_size = 2;
    1d0e:	bf98      	it	ls
    1d10:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1d12:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d14:	4b21      	ldr	r3, [pc, #132]	; (1d9c <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1d16:	bf88      	it	hi
    1d18:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d1a:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d1c:	4920      	ldr	r1, [pc, #128]	; (1da0 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1d1e:	bf88      	it	hi
    1d20:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d22:	b94c      	cbnz	r4, 1d38 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1d24:	4a1f      	ldr	r2, [pc, #124]	; (1da4 <__pi_malloc+0x98>)
    1d26:	7853      	ldrb	r3, [r2, #1]
    1d28:	2bff      	cmp	r3, #255	; 0xff
    1d2a:	d001      	beq.n	1d30 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1d2c:	3301      	adds	r3, #1
    1d2e:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1d30:	2200      	movs	r2, #0
    1d32:	4b1d      	ldr	r3, [pc, #116]	; (1da8 <__pi_malloc+0x9c>)
    1d34:	601a      	str	r2, [r3, #0]
	return chunk;
    1d36:	e02f      	b.n	1d98 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d38:	6862      	ldr	r2, [r4, #4]
    1d3a:	428a      	cmp	r2, r1
    1d3c:	d003      	beq.n	1d46 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1d3e:	2006      	movs	r0, #6
    1d40:	491a      	ldr	r1, [pc, #104]	; (1dac <__pi_malloc+0xa0>)
    1d42:	f7ff f83f 	bl	dc4 <__pi_syserror>
		if (m_size (chunk) >= _size)
    1d46:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1d4a:	4285      	cmp	r5, r0
    1d4c:	d202      	bcs.n	1d54 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1d4e:	4623      	mov	r3, r4
    1d50:	4614      	mov	r4, r2
    1d52:	e7e6      	b.n	1d22 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1d54:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1d56:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1d5a:	1a1b      	subs	r3, r3, r0
    1d5c:	2b08      	cmp	r3, #8
    1d5e:	d909      	bls.n	1d74 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1d60:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1d64:	3001      	adds	r0, #1
    1d66:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1d6a:	3b01      	subs	r3, #1
    1d6c:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1d70:	f7ff fd78 	bl	1864 <qfree>
		mevent [MA_NP] . nfail = 0;
    1d74:	2200      	movs	r2, #0
    1d76:	4b0b      	ldr	r3, [pc, #44]	; (1da4 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1d78:	490d      	ldr	r1, [pc, #52]	; (1db0 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1d7a:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1d7c:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1d80:	680b      	ldr	r3, [r1, #0]
    1d82:	1a9b      	subs	r3, r3, r2
    1d84:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d86:	4908      	ldr	r1, [pc, #32]	; (1da8 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1d88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d8c:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1d8e:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d92:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1d94:	bf38      	it	cc
    1d96:	600b      	strcc	r3, [r1, #0]
}
    1d98:	4620      	mov	r0, r4
    1d9a:	bd38      	pop	{r3, r4, r5, pc}
    1d9c:	20000568 	andcs	r0, r0, r8, ror #10
    1da0:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1da4:	20000560 	andcs	r0, r0, r0, ror #10
    1da8:	20000564 	andcs	r0, r0, r4, ror #10
    1dac:	000052cc 	andeq	r5, r0, ip, asr #5
    1db0:	2000055c 	andcs	r0, r0, ip, asr r5

00001db4 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1db4:	b538      	push	{r3, r4, r5, lr}
    1db6:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1db8:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1dba:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1dbc:	f7ff ffa6 	bl	1d0c <__pi_malloc>
    1dc0:	2300      	movs	r3, #0
    1dc2:	b138      	cbz	r0, 1dd4 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1dc4:	4a07      	ldr	r2, [pc, #28]	; (1de4 <__pi_fork+0x30>)
	i->Status = 0;
    1dc6:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1dc8:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1dca:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1dcc:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1dd0:	b90b      	cbnz	r3, 1dd6 <__pi_fork+0x22>
			__PCB = i;
    1dd2:	6010      	str	r0, [r2, #0]
}
    1dd4:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1dd6:	461a      	mov	r2, r3
    1dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d1fb      	bne.n	1dd6 <__pi_fork+0x22>
			j->Next = i;
    1dde:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1de0:	e7f8      	b.n	1dd4 <__pi_fork+0x20>
    1de2:	bf00      	nop
    1de4:	20000554 	andcs	r0, r0, r4, asr r5

00001de8 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1de8:	4a04      	ldr	r2, [pc, #16]	; (1dfc <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1dea:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1dec:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1dee:	4803      	ldr	r0, [pc, #12]	; (1dfc <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1df0:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1df2:	bf1c      	itt	ne
    1df4:	3301      	addne	r3, #1
    1df6:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1df8:	f7ff be12 	b.w	1a20 <__pi_wait>
    1dfc:	20000560 	andcs	r0, r0, r0, ror #10

00001e00 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1e00:	b40f      	push	{r0, r1, r2, r3}
    1e02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1e06:	ab0a      	add	r3, sp, #40	; 0x28
    1e08:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1e0c:	2015      	movs	r0, #21
	va_start (ap, mess);
    1e0e:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1e10:	4b46      	ldr	r3, [pc, #280]	; (1f2c <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1e12:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1e14:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1e16:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1f34 <diag+0x134>
	diag_disable_int (a, is);
    1e1a:	695b      	ldr	r3, [r3, #20]
    1e1c:	4798      	blx	r3
	while (*mess != '\0') {
    1e1e:	7820      	ldrb	r0, [r4, #0]
    1e20:	b998      	cbnz	r0, 1e4a <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1e22:	200d      	movs	r0, #13
    1e24:	f7ff fd5e 	bl	18e4 <dgout>
	dgout ('\n');
    1e28:	200a      	movs	r0, #10
    1e2a:	f7ff fd5b 	bl	18e4 <dgout>
    1e2e:	4a40      	ldr	r2, [pc, #256]	; (1f30 <diag+0x130>)
    1e30:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1e32:	071b      	lsls	r3, r3, #28
    1e34:	d4fc      	bmi.n	1e30 <diag+0x30>
	diag_enable_int (a, is);
    1e36:	4b3d      	ldr	r3, [pc, #244]	; (1f2c <diag+0x12c>)
    1e38:	2015      	movs	r0, #21
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	691b      	ldr	r3, [r3, #16]
    1e3e:	4798      	blx	r3
}
    1e40:	b003      	add	sp, #12
    1e42:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e46:	b004      	add	sp, #16
    1e48:	4770      	bx	lr
		if (*mess == '%') {
    1e4a:	2825      	cmp	r0, #37	; 0x25
    1e4c:	f104 0601 	add.w	r6, r4, #1
    1e50:	d169      	bne.n	1f26 <diag+0x126>
			if (*mess == 'l') {
    1e52:	9b01      	ldr	r3, [sp, #4]
    1e54:	7862      	ldrb	r2, [r4, #1]
    1e56:	f853 1b04 	ldr.w	r1, [r3], #4
    1e5a:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1e5c:	bf08      	it	eq
    1e5e:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1e60:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1e62:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1e64:	bf0c      	ite	eq
    1e66:	2520      	moveq	r5, #32
				bc = 16;
    1e68:	2510      	movne	r5, #16
			switch (*mess) {
    1e6a:	2b75      	cmp	r3, #117	; 0x75
    1e6c:	d04e      	beq.n	1f0c <diag+0x10c>
    1e6e:	d80a      	bhi.n	1e86 <diag+0x86>
    1e70:	2b64      	cmp	r3, #100	; 0x64
    1e72:	d01c      	beq.n	1eae <diag+0xae>
    1e74:	2b73      	cmp	r3, #115	; 0x73
    1e76:	d052      	beq.n	1f1e <diag+0x11e>
				dgout ('%');
    1e78:	2025      	movs	r0, #37	; 0x25
    1e7a:	f7ff fd33 	bl	18e4 <dgout>
				dgout (*mess);
    1e7e:	7830      	ldrb	r0, [r6, #0]
    1e80:	f7ff fd30 	bl	18e4 <dgout>
    1e84:	e010      	b.n	1ea8 <diag+0xa8>
			switch (*mess) {
    1e86:	2b78      	cmp	r3, #120	; 0x78
    1e88:	d1f6      	bne.n	1e78 <diag+0x78>
    1e8a:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1e8c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f38 <diag+0x138>
					i += 4;
    1e90:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1e92:	1b2b      	subs	r3, r5, r4
    1e94:	fa21 f303 	lsr.w	r3, r1, r3
    1e98:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1e9c:	f819 0003 	ldrb.w	r0, [r9, r3]
    1ea0:	f7ff fd20 	bl	18e4 <dgout>
				while (i < bc) {
    1ea4:	42a5      	cmp	r5, r4
    1ea6:	dcf3      	bgt.n	1e90 <diag+0x90>
			mess++;
    1ea8:	3601      	adds	r6, #1
					d /= 10;
    1eaa:	4634      	mov	r4, r6
    1eac:	e7b7      	b.n	1e1e <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1eae:	1e6b      	subs	r3, r5, #1
    1eb0:	fa21 f303 	lsr.w	r3, r1, r3
    1eb4:	07da      	lsls	r2, r3, #31
    1eb6:	d509      	bpl.n	1ecc <diag+0xcc>
					dgout ('-');
    1eb8:	202d      	movs	r0, #45	; 0x2d
    1eba:	f7ff fd13 	bl	18e4 <dgout>
					if (bc == 16)
    1ebe:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1ec0:	bf04      	itt	eq
    1ec2:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1ec6:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1eca:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1ecc:	f242 7410 	movw	r4, #10000	; 0x2710
    1ed0:	2d10      	cmp	r5, #16
    1ed2:	bf18      	it	ne
    1ed4:	4644      	movne	r4, r8
					v = (word) (val / d);
    1ed6:	fbb1 f5f4 	udiv	r5, r1, r4
    1eda:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1edc:	b935      	cbnz	r5, 1eec <diag+0xec>
    1ede:	2c01      	cmp	r4, #1
    1ee0:	d004      	beq.n	1eec <diag+0xec>
					d /= 10;
    1ee2:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1ee6:	e7f6      	b.n	1ed6 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1ee8:	4c12      	ldr	r4, [pc, #72]	; (1f34 <diag+0x134>)
    1eea:	e7f4      	b.n	1ed6 <diag+0xd6>
					dgout (v + '0');
    1eec:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1ef0:	b280      	uxth	r0, r0
    1ef2:	f7ff fcf7 	bl	18e4 <dgout>
					if (d == 0) break;
    1ef6:	2c09      	cmp	r4, #9
					d /= 10;
    1ef8:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1efc:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1f00:	d9d2      	bls.n	1ea8 <diag+0xa8>
					v = (word) (val / d);
    1f02:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1f06:	461c      	mov	r4, r3
					v = (word) (val / d);
    1f08:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1f0a:	e7ef      	b.n	1eec <diag+0xec>
				if (bc == 16)
    1f0c:	2d10      	cmp	r5, #16
    1f0e:	d1eb      	bne.n	1ee8 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1f10:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1f14:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1f16:	e7de      	b.n	1ed6 <diag+0xd6>
					dgout (*s);
    1f18:	f7ff fce4 	bl	18e4 <dgout>
					s++;
    1f1c:	3101      	adds	r1, #1
				while (*s != '\0') {
    1f1e:	7808      	ldrb	r0, [r1, #0]
    1f20:	2800      	cmp	r0, #0
    1f22:	d1f9      	bne.n	1f18 <diag+0x118>
    1f24:	e7c0      	b.n	1ea8 <diag+0xa8>
			dgout (*mess++);
    1f26:	f7ff fcdd 	bl	18e4 <dgout>
    1f2a:	e7be      	b.n	1eaa <diag+0xaa>
    1f2c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1f30:	40001018 	andmi	r1, r0, r8, lsl r0
    1f34:	3b9aca00 	blcc	fe6b473c <_estack+0xde6af73c>
    1f38:	000052d1 	ldrdeq	r5, [r0], -r1

00001f3c <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1f3c:	f243 0039 	movw	r0, #12345	; 0x3039
    1f40:	4a04      	ldr	r2, [pc, #16]	; (1f54 <lrnd+0x18>)
    1f42:	4905      	ldr	r1, [pc, #20]	; (1f58 <lrnd+0x1c>)
    1f44:	6813      	ldr	r3, [r2, #0]
    1f46:	fb01 0303 	mla	r3, r1, r3, r0
    1f4a:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1f4c:	4a03      	ldr	r2, [pc, #12]	; (1f5c <lrnd+0x20>)
    1f4e:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1f50:	4058      	eors	r0, r3
    1f52:	4770      	bx	lr
    1f54:	20000004 	andcs	r0, r0, r4
    1f58:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1f5c:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

00001f60 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1f60:	b510      	push	{r4, lr}
    1f62:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1f64:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1f66:	b280      	uxth	r0, r0
    1f68:	f7ff fed0 	bl	1d0c <__pi_malloc>
    1f6c:	b110      	cbz	r0, 1f74 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1f6e:	2300      	movs	r3, #0
	p -> length = size;
    1f70:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1f72:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1f74:	bd10      	pop	{r4, pc}

00001f76 <deq>:
	if (p->attributes.b.queued) {
    1f76:	7a83      	ldrb	r3, [r0, #10]
    1f78:	07db      	lsls	r3, r3, #31
    1f7a:	d508      	bpl.n	1f8e <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1f7c:	e9d0 2300 	ldrd	r2, r3, [r0]
    1f80:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1f82:	6802      	ldr	r2, [r0, #0]
    1f84:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1f86:	7a83      	ldrb	r3, [r0, #10]
    1f88:	f36f 0300 	bfc	r3, #0, #1
    1f8c:	7283      	strb	r3, [r0, #10]
}
    1f8e:	4770      	bx	lr

00001f90 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1f90:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1f92:	f7ff fff0 	bl	1f76 <deq>
}
    1f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1f9a:	f7ff be6b 	b.w	1c74 <__pi_free>
	...

00001fa0 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa0:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fa2:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa4:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fa6:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa8:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1faa:	d503      	bpl.n	1fb4 <enq+0x14>
    1fac:	200a      	movs	r0, #10
    1fae:	490e      	ldr	r1, [pc, #56]	; (1fe8 <enq+0x48>)
    1fb0:	f7fe ff08 	bl	dc4 <__pi_syserror>
	if (q_empty (q))
    1fb4:	6803      	ldr	r3, [r0, #0]
    1fb6:	4283      	cmp	r3, r0
    1fb8:	d101      	bne.n	1fbe <enq+0x1e>
		trigger (q);
    1fba:	f7ff fd4b 	bl	1a54 <__pi_trigger>
	if (p->attributes.b.urgent) {
    1fbe:	7aa3      	ldrb	r3, [r4, #10]
    1fc0:	075b      	lsls	r3, r3, #29
    1fc2:	d50a      	bpl.n	1fda <enq+0x3a>
		p->u.bqueue.next = q->next;
    1fc4:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1fc6:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1fca:	682b      	ldr	r3, [r5, #0]
    1fcc:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1fce:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1fd0:	7aa3      	ldrb	r3, [r4, #10]
    1fd2:	f043 0301 	orr.w	r3, r3, #1
    1fd6:	72a3      	strb	r3, [r4, #10]
}
    1fd8:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1fda:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1fdc:	686b      	ldr	r3, [r5, #4]
    1fde:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1fe0:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1fe2:	606c      	str	r4, [r5, #4]
    1fe4:	e7f4      	b.n	1fd0 <enq+0x30>
    1fe6:	bf00      	nop
    1fe8:	000052e1 	andeq	r5, r0, r1, ror #5

00001fec <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1fec:	b510      	push	{r4, lr}
    1fee:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1ff0:	f7ff ffc1 	bl	1f76 <deq>
	switch (dv) {
    1ff4:	3901      	subs	r1, #1
    1ff6:	2904      	cmp	r1, #4
    1ff8:	d832      	bhi.n	2060 <dispose+0x74>
    1ffa:	e8df f001 	tbb	[pc, r1]
    1ffe:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    2002:	7a830019 	bvc	fe0c206e <_estack+0xde0bd06e>
			p->attributes.b.urgent = 1;
    2006:	f043 0304 	orr.w	r3, r3, #4
    200a:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    200c:	8963      	ldrh	r3, [r4, #10]
    200e:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    2012:	2b07      	cmp	r3, #7
    2014:	d803      	bhi.n	201e <dispose+0x32>
    2016:	4a13      	ldr	r2, [pc, #76]	; (2064 <dispose+0x78>)
    2018:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    201c:	b918      	cbnz	r0, 2026 <dispose+0x3a>
    201e:	4912      	ldr	r1, [pc, #72]	; (2068 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    2020:	200a      	movs	r0, #10
    2022:	f7fe fecf 	bl	dc4 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    2026:	4621      	mov	r1, r4
}
    2028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    202c:	f7ff bfb8 	b.w	1fa0 <enq>
			p->attributes.b.urgent = 1;
    2030:	7a83      	ldrb	r3, [r0, #10]
    2032:	f043 0304 	orr.w	r3, r3, #4
    2036:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    2038:	7ae2      	ldrb	r2, [r4, #11]
    203a:	2a5f      	cmp	r2, #95	; 0x5f
    203c:	ea4f 1352 	mov.w	r3, r2, lsr #5
    2040:	d803      	bhi.n	204a <dispose+0x5e>
    2042:	4a0a      	ldr	r2, [pc, #40]	; (206c <dispose+0x80>)
    2044:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2048:	b90a      	cbnz	r2, 204e <dispose+0x62>
    204a:	4909      	ldr	r1, [pc, #36]	; (2070 <dispose+0x84>)
    204c:	e7e8      	b.n	2020 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    204e:	4a09      	ldr	r2, [pc, #36]	; (2074 <dispose+0x88>)
    2050:	4621      	mov	r1, r4
    2052:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2056:	e7e7      	b.n	2028 <dispose+0x3c>
}
    2058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    205c:	f7ff bf98 	b.w	1f90 <rlp>
}
    2060:	bd10      	pop	{r4, pc}
    2062:	bf00      	nop
    2064:	2000056c 	andcs	r0, r0, ip, ror #10
    2068:	000052e7 	andeq	r5, r0, r7, ror #5
    206c:	20000598 	mulcs	r0, r8, r5
    2070:	000052f3 	strdeq	r5, [r0], -r3
    2074:	2000058c 	andcs	r0, r0, ip, lsl #11

00002078 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    2078:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    207a:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    207e:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    2082:	0792      	lsls	r2, r2, #30
    2084:	d522      	bpl.n	20cc <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    2086:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    208a:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    208e:	2a07      	cmp	r2, #7
    2090:	d803      	bhi.n	209a <tcv_endp+0x22>
    2092:	4911      	ldr	r1, [pc, #68]	; (20d8 <tcv_endp+0x60>)
    2094:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2098:	b91a      	cbnz	r2, 20a2 <tcv_endp+0x2a>
    209a:	4910      	ldr	r1, [pc, #64]	; (20dc <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    209c:	200a      	movs	r0, #10
    209e:	f7fe fe91 	bl	dc4 <__pi_syserror>
    20a2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    20a6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    20aa:	2b02      	cmp	r3, #2
    20ac:	d805      	bhi.n	20ba <tcv_endp+0x42>
    20ae:	4a0c      	ldr	r2, [pc, #48]	; (20e0 <tcv_endp+0x68>)
    20b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    20b4:	b10b      	cbz	r3, 20ba <tcv_endp+0x42>
    20b6:	691b      	ldr	r3, [r3, #16]
    20b8:	b90b      	cbnz	r3, 20be <tcv_endp+0x46>
    20ba:	490a      	ldr	r1, [pc, #40]	; (20e4 <tcv_endp+0x6c>)
    20bc:	e7ee      	b.n	209c <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    20be:	4798      	blx	r3
    20c0:	4601      	mov	r1, r0
    20c2:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    20c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c8:	f7ff bf90 	b.w	1fec <dispose>
		rlp (b);
    20cc:	4620      	mov	r0, r4
}
    20ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    20d2:	f7ff bf5d 	b.w	1f90 <rlp>
    20d6:	bf00      	nop
    20d8:	2000056c 	andcs	r0, r0, ip, ror #10
    20dc:	000052ff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    20e0:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    20e4:	00005305 	andeq	r5, r0, r5, lsl #6

000020e8 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20e8:	b40c      	push	{r2, r3}
    20ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    20ee:	ab0a      	add	r3, sp, #40	; 0x28
    20f0:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20f4:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20f6:	460f      	mov	r7, r1
	va_start (ap, plid);
    20f8:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20fa:	d80b      	bhi.n	2114 <tcv_open+0x2c>
    20fc:	4b24      	ldr	r3, [pc, #144]	; (2190 <tcv_open+0xa8>)
    20fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    2102:	b13b      	cbz	r3, 2114 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2104:	f1b8 0f02 	cmp.w	r8, #2
    2108:	d804      	bhi.n	2114 <tcv_open+0x2c>
    210a:	4b22      	ldr	r3, [pc, #136]	; (2194 <tcv_open+0xac>)
    210c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    2110:	4699      	mov	r9, r3
    2112:	b91a      	cbnz	r2, 211c <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    2114:	2001      	movs	r0, #1
    2116:	4920      	ldr	r1, [pc, #128]	; (2198 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    2118:	f7fe fe54 	bl	dc4 <__pi_syserror>
	attp.b.outgoing = 1;
    211c:	f008 0307 	and.w	r3, r8, #7
    2120:	029b      	lsls	r3, r3, #10
    2122:	f043 0302 	orr.w	r3, r3, #2
    2126:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    212a:	4b1c      	ldr	r3, [pc, #112]	; (219c <tcv_open+0xb4>)
    212c:	2600      	movs	r6, #0
    212e:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    2130:	f853 2b04 	ldr.w	r2, [r3], #4
    2134:	b312      	cbz	r2, 217c <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2136:	3601      	adds	r6, #1
    2138:	2e08      	cmp	r6, #8
    213a:	d1f9      	bne.n	2130 <tcv_open+0x48>
		return ERROR;
    213c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    2140:	4630      	mov	r0, r6
    2142:	b002      	add	sp, #8
    2144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2148:	b002      	add	sp, #8
    214a:	4770      	bx	lr
	s->attpattern.b.session = fd;
    214c:	462b      	mov	r3, r5
    214e:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    2152:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    2156:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    2158:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    215c:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	b913      	cbnz	r3, 216a <tcv_open+0x82>
    2164:	200a      	movs	r0, #10
    2166:	490e      	ldr	r1, [pc, #56]	; (21a0 <tcv_open+0xb8>)
    2168:	e7d6      	b.n	2118 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    216a:	4631      	mov	r1, r6
    216c:	4638      	mov	r0, r7
    216e:	9a01      	ldr	r2, [sp, #4]
    2170:	4798      	blx	r3
    2172:	2800      	cmp	r0, #0
    2174:	d1e2      	bne.n	213c <tcv_open+0x54>
	descriptors [fd] = s;
    2176:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    217a:	e7e1      	b.n	2140 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    217c:	200c      	movs	r0, #12
    217e:	f7ff fdc5 	bl	1d0c <__pi_malloc>
	if (s == NULL)
    2182:	4604      	mov	r4, r0
    2184:	2800      	cmp	r0, #0
    2186:	d1e1      	bne.n	214c <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    2188:	2006      	movs	r0, #6
    218a:	4906      	ldr	r1, [pc, #24]	; (21a4 <tcv_open+0xbc>)
    218c:	e7c4      	b.n	2118 <tcv_open+0x30>
    218e:	bf00      	nop
    2190:	2000058c 	andcs	r0, r0, ip, lsl #11
    2194:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2198:	0000530b 	andeq	r5, r0, fp, lsl #6
    219c:	2000056c 	andcs	r0, r0, ip, ror #10
    21a0:	00005317 	andeq	r5, r0, r7, lsl r3
    21a4:	00005311 	andeq	r5, r0, r1, lsl r3

000021a8 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21a8:	2802      	cmp	r0, #2
    21aa:	d809      	bhi.n	21c0 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21ac:	4b06      	ldr	r3, [pc, #24]	; (21c8 <tcv_plug+0x20>)
    21ae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21b2:	b10a      	cbz	r2, 21b8 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21b4:	428a      	cmp	r2, r1
    21b6:	d103      	bne.n	21c0 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    21b8:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    21bc:	2000      	movs	r0, #0
    21be:	4770      	bx	lr
		return ERROR;
    21c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    21c4:	4770      	bx	lr
    21c6:	bf00      	nop
    21c8:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

000021cc <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    21cc:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    21ce:	b538      	push	{r3, r4, r5, lr}
    21d0:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    21d2:	d803      	bhi.n	21dc <tcv_rnp+0x10>
    21d4:	4a19      	ldr	r2, [pc, #100]	; (223c <tcv_rnp+0x70>)
    21d6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    21da:	b918      	cbnz	r0, 21e4 <tcv_rnp+0x18>
    21dc:	4918      	ldr	r1, [pc, #96]	; (2240 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    21de:	200a      	movs	r0, #10
    21e0:	f7fe fdf0 	bl	dc4 <__pi_syserror>
	b = q_first (rq);
    21e4:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    21e6:	42a0      	cmp	r0, r4
    21e8:	d108      	bne.n	21fc <tcv_rnp+0x30>
		if (state != WNONE) {
    21ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    21ee:	4293      	cmp	r3, r2
    21f0:	d021      	beq.n	2236 <tcv_rnp+0x6a>
			when (rq, state);
    21f2:	4619      	mov	r1, r3
    21f4:	f7ff fc14 	bl	1a20 <__pi_wait>
			release;
    21f8:	f7ff f9a2 	bl	1540 <__pi_release>
	deq (b);	// Dequeue the packet ...
    21fc:	4620      	mov	r0, r4
    21fe:	f7ff feba 	bl	1f76 <deq>
	verify_plg (b, tcv_frm, "tcv11");
    2202:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    2204:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    2208:	f3c3 0382 	ubfx	r3, r3, #2, #3
    220c:	2b02      	cmp	r3, #2
    220e:	d805      	bhi.n	221c <tcv_rnp+0x50>
    2210:	4a0c      	ldr	r2, [pc, #48]	; (2244 <tcv_rnp+0x78>)
    2212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2216:	b10b      	cbz	r3, 221c <tcv_rnp+0x50>
    2218:	68db      	ldr	r3, [r3, #12]
    221a:	b90b      	cbnz	r3, 2220 <tcv_rnp+0x54>
    221c:	490a      	ldr	r1, [pc, #40]	; (2248 <tcv_rnp+0x7c>)
    221e:	e7de      	b.n	21de <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2220:	4621      	mov	r1, r4
    2222:	4628      	mov	r0, r5
    2224:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2226:	8823      	ldrh	r3, [r4, #0]
    2228:	8862      	ldrh	r2, [r4, #2]
    222a:	441a      	add	r2, r3
    222c:	8923      	ldrh	r3, [r4, #8]
    222e:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    2230:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    2232:	4628      	mov	r0, r5
    2234:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    2236:	2500      	movs	r5, #0
    2238:	e7fb      	b.n	2232 <tcv_rnp+0x66>
    223a:	bf00      	nop
    223c:	2000056c 	andcs	r0, r0, ip, ror #10
    2240:	0000531d 	andeq	r5, r0, sp, lsl r3
    2244:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2248:	00005323 	andeq	r5, r0, r3, lsr #6

0000224c <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    224c:	2908      	cmp	r1, #8
								Boolean urg) {
    224e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2250:	4605      	mov	r5, r0
    2252:	4614      	mov	r4, r2
    2254:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    2256:	d803      	bhi.n	2260 <tcv_wnps+0x14>
    2258:	4b26      	ldr	r3, [pc, #152]	; (22f4 <tcv_wnps+0xa8>)
    225a:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    225e:	b91f      	cbnz	r7, 2268 <tcv_wnps+0x1c>
    2260:	4925      	ldr	r1, [pc, #148]	; (22f8 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    2262:	200a      	movs	r0, #10
    2264:	f7fe fdae 	bl	dc4 <__pi_syserror>
    2268:	7a7b      	ldrb	r3, [r7, #9]
    226a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    226e:	2b02      	cmp	r3, #2
    2270:	d805      	bhi.n	227e <tcv_wnps+0x32>
    2272:	4a22      	ldr	r2, [pc, #136]	; (22fc <tcv_wnps+0xb0>)
    2274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2278:	b10b      	cbz	r3, 227e <tcv_wnps+0x32>
    227a:	68db      	ldr	r3, [r3, #12]
    227c:	b90b      	cbnz	r3, 2282 <tcv_wnps+0x36>
    227e:	4920      	ldr	r1, [pc, #128]	; (2300 <tcv_wnps+0xb4>)
    2280:	e7ef      	b.n	2262 <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    2282:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2286:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    2288:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    228c:	a901      	add	r1, sp, #4
    228e:	4798      	blx	r3
    2290:	b158      	cbz	r0, 22aa <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    2292:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2296:	429d      	cmp	r5, r3
    2298:	d102      	bne.n	22a0 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    229a:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    229c:	b003      	add	sp, #12
    229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    22a0:	4629      	mov	r1, r5
    22a2:	f7ff fbbd 	bl	1a20 <__pi_wait>
			release;
    22a6:	f7ff f94b 	bl	1540 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    22aa:	7a3b      	ldrb	r3, [r7, #8]
    22ac:	07db      	lsls	r3, r3, #31
    22ae:	d501      	bpl.n	22b4 <tcv_wnps+0x68>
    22b0:	4914      	ldr	r1, [pc, #80]	; (2304 <tcv_wnps+0xb8>)
    22b2:	e7d6      	b.n	2262 <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    22b4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    22b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    22bc:	b2a4      	uxth	r4, r4
    22be:	4418      	add	r0, r3
    22c0:	4420      	add	r0, r4
    22c2:	b280      	uxth	r0, r0
    22c4:	f7ff fe4c 	bl	1f60 <apb>
    22c8:	b938      	cbnz	r0, 22da <tcv_wnps+0x8e>
		if (state != WNONE) {
    22ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    22ce:	429d      	cmp	r5, r3
    22d0:	d0e3      	beq.n	229a <tcv_wnps+0x4e>
			tmwait (state);
    22d2:	4628      	mov	r0, r5
    22d4:	f7ff fd88 	bl	1de8 <__pi_waitmem>
    22d8:	e7e5      	b.n	22a6 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    22da:	893b      	ldrh	r3, [r7, #8]
    22dc:	8143      	strh	r3, [r0, #10]
	if (urg)
    22de:	b11e      	cbz	r6, 22e8 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    22e0:	7a83      	ldrb	r3, [r0, #10]
    22e2:	f043 0304 	orr.w	r3, r3, #4
    22e6:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    22e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    22ec:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    22ee:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    22f0:	300c      	adds	r0, #12
    22f2:	e7d3      	b.n	229c <tcv_wnps+0x50>
    22f4:	2000056c 	andcs	r0, r0, ip, ror #10
    22f8:	00005329 	andeq	r5, r0, r9, lsr #6
    22fc:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2300:	0000532f 	andeq	r5, r0, pc, lsr #6
    2304:	00005335 	andeq	r5, r0, r5, lsr r3

00002308 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2308:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    230a:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    230c:	4608      	mov	r0, r1
    230e:	b510      	push	{r4, lr}
    2310:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    2312:	d803      	bhi.n	231c <tcvp_control+0x14>
    2314:	4a05      	ldr	r2, [pc, #20]	; (232c <tcvp_control+0x24>)
    2316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    231a:	b91b      	cbnz	r3, 2324 <tcvp_control+0x1c>
    231c:	200a      	movs	r0, #10
    231e:	4904      	ldr	r1, [pc, #16]	; (2330 <tcvp_control+0x28>)
    2320:	f7fe fd50 	bl	dc4 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    2324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    2328:	4718      	bx	r3
    232a:	bf00      	nop
    232c:	20000598 	mulcs	r0, r8, r5
    2330:	0000533b 	andeq	r5, r0, fp, lsr r3

00002334 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2334:	b508      	push	{r3, lr}
	if (opt < 0) {
    2336:	1e0b      	subs	r3, r1, #0
    2338:	da11      	bge.n	235e <tcv_control+0x2a>
		if (fd < 0)
    233a:	2800      	cmp	r0, #0
    233c:	db1f      	blt.n	237e <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    233e:	3301      	adds	r3, #1
    2340:	d107      	bne.n	2352 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    2342:	2802      	cmp	r0, #2
    2344:	dc1b      	bgt.n	237e <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    2346:	4b0f      	ldr	r3, [pc, #60]	; (2384 <tcv_control+0x50>)
    2348:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    234c:	b100      	cbz	r0, 2350 <tcv_control+0x1c>
			return p->tcv_info;
    234e:	69c0      	ldr	r0, [r0, #28]
}
    2350:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    2352:	2802      	cmp	r0, #2
    2354:	dc13      	bgt.n	237e <tcv_control+0x4a>
		return physinfo [fd];
    2356:	4b0c      	ldr	r3, [pc, #48]	; (2388 <tcv_control+0x54>)
    2358:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    235c:	e7f8      	b.n	2350 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    235e:	2808      	cmp	r0, #8
    2360:	d803      	bhi.n	236a <tcv_control+0x36>
    2362:	4b0a      	ldr	r3, [pc, #40]	; (238c <tcv_control+0x58>)
    2364:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2368:	b91b      	cbnz	r3, 2372 <tcv_control+0x3e>
    236a:	200a      	movs	r0, #10
    236c:	4908      	ldr	r1, [pc, #32]	; (2390 <tcv_control+0x5c>)
    236e:	f7fe fd29 	bl	dc4 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2372:	7a58      	ldrb	r0, [r3, #9]
}
    2374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2378:	0940      	lsrs	r0, r0, #5
    237a:	f7ff bfc5 	b.w	2308 <tcvp_control>
			return 0;
    237e:	2000      	movs	r0, #0
    2380:	e7e6      	b.n	2350 <tcv_control+0x1c>
    2382:	bf00      	nop
    2384:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2388:	200005a4 	andcs	r0, r0, r4, lsr #11
    238c:	2000056c 	andcs	r0, r0, ip, ror #10
    2390:	00005341 	andeq	r5, r0, r1, asr #6

00002394 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2396:	b280      	uxth	r0, r0
    2398:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    239a:	460e      	mov	r6, r1
    239c:	b309      	cbz	r1, 23e2 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    239e:	1c53      	adds	r3, r2, #1
    23a0:	d103      	bne.n	23aa <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    23a2:	2003      	movs	r0, #3
    23a4:	4912      	ldr	r1, [pc, #72]	; (23f0 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    23a6:	f7fe fd0d 	bl	dc4 <__pi_syserror>
    23aa:	2a08      	cmp	r2, #8
    23ac:	d803      	bhi.n	23b6 <tcvp_new+0x22>
    23ae:	4f11      	ldr	r7, [pc, #68]	; (23f4 <tcvp_new+0x60>)
    23b0:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    23b4:	b913      	cbnz	r3, 23bc <tcvp_new+0x28>
    23b6:	200a      	movs	r0, #10
    23b8:	490f      	ldr	r1, [pc, #60]	; (23f8 <tcvp_new+0x64>)
    23ba:	e7f4      	b.n	23a6 <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    23bc:	f7ff fdd0 	bl	1f60 <apb>
    23c0:	4604      	mov	r4, r0
    23c2:	b908      	cbnz	r0, 23c8 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    23c4:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    23c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    23c8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    23cc:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    23ce:	891b      	ldrh	r3, [r3, #8]
    23d0:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    23d2:	f36f 0341 	bfc	r3, #1, #1
    23d6:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    23d8:	f7ff fe08 	bl	1fec <dispose>
			return (address)(p + 1);
    23dc:	f104 000c 	add.w	r0, r4, #12
    23e0:	e7f1      	b.n	23c6 <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    23e2:	f7ff fdbd 	bl	1f60 <apb>
    23e6:	2800      	cmp	r0, #0
    23e8:	d0ec      	beq.n	23c4 <tcvp_new+0x30>
		return (address)(p + 1);
    23ea:	300c      	adds	r0, #12
    23ec:	e7eb      	b.n	23c6 <tcvp_new+0x32>
    23ee:	bf00      	nop
    23f0:	00005347 	andeq	r5, r0, r7, asr #6
    23f4:	2000056c 	andcs	r0, r0, ip, ror #10
    23f8:	0000534d 	andeq	r5, r0, sp, asr #6

000023fc <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    23fc:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    23fe:	b510      	push	{r4, lr}
    2400:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2402:	d803      	bhi.n	240c <tcvphy_reg+0x10>
    2404:	4b0c      	ldr	r3, [pc, #48]	; (2438 <tcvphy_reg+0x3c>)
    2406:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    240a:	b118      	cbz	r0, 2414 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    240c:	2003      	movs	r0, #3
    240e:	490b      	ldr	r1, [pc, #44]	; (243c <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    2410:	f7fe fcd8 	bl	dc4 <__pi_syserror>
	physical [phy] = ps;
    2414:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    2418:	4b09      	ldr	r3, [pc, #36]	; (2440 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    241a:	2008      	movs	r0, #8
	physinfo [phy] = info;
    241c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2420:	f7ff fc74 	bl	1d0c <__pi_malloc>
    2424:	4a07      	ldr	r2, [pc, #28]	; (2444 <tcvphy_reg+0x48>)
    2426:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    242a:	b910      	cbnz	r0, 2432 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    242c:	2006      	movs	r0, #6
    242e:	4906      	ldr	r1, [pc, #24]	; (2448 <tcvphy_reg+0x4c>)
    2430:	e7ee      	b.n	2410 <tcvphy_reg+0x14>
	q_init (q);
    2432:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    2436:	bd10      	pop	{r4, pc}
    2438:	20000598 	mulcs	r0, r8, r5
    243c:	00005353 	andeq	r5, r0, r3, asr r3
    2440:	200005a4 	andcs	r0, r0, r4, lsr #11
    2444:	2000058c 	andcs	r0, r0, ip, lsl #11
    2448:	00005359 	andeq	r5, r0, r9, asr r3

0000244c <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    2450:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2452:	4605      	mov	r5, r0
    2454:	460f      	mov	r7, r1
    2456:	4614      	mov	r4, r2
    2458:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    245a:	d803      	bhi.n	2464 <tcvphy_rcv+0x18>
    245c:	4b1e      	ldr	r3, [pc, #120]	; (24d8 <tcvphy_rcv+0x8c>)
    245e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2462:	b91b      	cbnz	r3, 246c <tcvphy_rcv+0x20>
    2464:	491d      	ldr	r1, [pc, #116]	; (24dc <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2466:	200a      	movs	r0, #10
    2468:	f7fe fcac 	bl	dc4 <__pi_syserror>
    246c:	4e1c      	ldr	r6, [pc, #112]	; (24e0 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    246e:	f10d 080c 	add.w	r8, sp, #12
    2472:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    2476:	6833      	ldr	r3, [r6, #0]
    2478:	46b1      	mov	r9, r6
    247a:	3e04      	subs	r6, #4
    247c:	b92b      	cbnz	r3, 248a <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    247e:	45ca      	cmp	sl, r9
    2480:	d1f9      	bne.n	2476 <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    2482:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    2484:	b005      	add	sp, #20
    2486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    248a:	f8d3 b008 	ldr.w	fp, [r3, #8]
    248e:	f1bb 0f00 	cmp.w	fp, #0
    2492:	d101      	bne.n	2498 <tcvphy_rcv+0x4c>
    2494:	4913      	ldr	r1, [pc, #76]	; (24e4 <tcvphy_rcv+0x98>)
    2496:	e7e6      	b.n	2466 <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2498:	4639      	mov	r1, r7
    249a:	4622      	mov	r2, r4
    249c:	4628      	mov	r0, r5
    249e:	f8cd 8000 	str.w	r8, [sp]
    24a2:	ab02      	add	r3, sp, #8
    24a4:	47d8      	blx	fp
    24a6:	4601      	mov	r1, r0
    24a8:	2800      	cmp	r0, #0
    24aa:	d0e8      	beq.n	247e <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    24ac:	2801      	cmp	r0, #1
    24ae:	d0e8      	beq.n	2482 <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    24b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    24b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    24b8:	441a      	add	r2, r3
    24ba:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    24bc:	4620      	mov	r0, r4
    24be:	9a02      	ldr	r2, [sp, #8]
    24c0:	f7ff ff68 	bl	2394 <tcvp_new>
    24c4:	2800      	cmp	r0, #0
    24c6:	d0dc      	beq.n	2482 <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    24c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    24cc:	4622      	mov	r2, r4
    24ce:	4439      	add	r1, r7
    24d0:	f7ff fb37 	bl	1b42 <__pi_memcpy>
	return 1;
    24d4:	2001      	movs	r0, #1
    24d6:	e7d5      	b.n	2484 <tcvphy_rcv+0x38>
    24d8:	20000598 	mulcs	r0, r8, r5
    24dc:	0000535f 	andeq	r5, r0, pc, asr r3
    24e0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    24e4:	00005365 	andeq	r5, r0, r5, ror #6

000024e8 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    24e8:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    24ea:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    24ec:	d803      	bhi.n	24f6 <tcvphy_get+0xe>
    24ee:	4b0b      	ldr	r3, [pc, #44]	; (251c <tcvphy_get+0x34>)
    24f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    24f4:	b91b      	cbnz	r3, 24fe <tcvphy_get+0x16>
    24f6:	200a      	movs	r0, #10
    24f8:	4909      	ldr	r1, [pc, #36]	; (2520 <tcvphy_get+0x38>)
    24fa:	f7fe fc63 	bl	dc4 <__pi_syserror>

	oq = oqueues [phy];
    24fe:	4b09      	ldr	r3, [pc, #36]	; (2524 <tcvphy_get+0x3c>)
    2500:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    2504:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    2506:	4283      	cmp	r3, r0
    2508:	d005      	beq.n	2516 <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    250a:	8903      	ldrh	r3, [r0, #8]
    250c:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    250e:	f7ff fd32 	bl	1f76 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    2512:	300c      	adds	r0, #12
}
    2514:	bd08      	pop	{r3, pc}
		return NULL;
    2516:	2000      	movs	r0, #0
    2518:	e7fc      	b.n	2514 <tcvphy_get+0x2c>
    251a:	bf00      	nop
    251c:	20000598 	mulcs	r0, r8, r5
    2520:	0000536b 	andeq	r5, r0, fp, ror #6
    2524:	2000058c 	andcs	r0, r0, ip, lsl #11

00002528 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    2528:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    252a:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    252c:	d803      	bhi.n	2536 <tcvphy_top+0xe>
    252e:	4b08      	ldr	r3, [pc, #32]	; (2550 <tcvphy_top+0x28>)
    2530:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2534:	b91b      	cbnz	r3, 253e <tcvphy_top+0x16>
    2536:	200a      	movs	r0, #10
    2538:	4906      	ldr	r1, [pc, #24]	; (2554 <tcvphy_top+0x2c>)
    253a:	f7fe fc43 	bl	dc4 <__pi_syserror>

	oq = oqueues [phy];
    253e:	4b06      	ldr	r3, [pc, #24]	; (2558 <tcvphy_top+0x30>)
    2540:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    2544:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    2546:	4283      	cmp	r3, r0
		return NULL;
    2548:	bf0c      	ite	eq
    254a:	2000      	moveq	r0, #0

	return (address)(b + 1);
    254c:	300c      	addne	r0, #12
}
    254e:	bd08      	pop	{r3, pc}
    2550:	20000598 	mulcs	r0, r8, r5
    2554:	00005371 	andeq	r5, r0, r1, ror r3
    2558:	2000058c 	andcs	r0, r0, ip, lsl #11

0000255c <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    255c:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    255e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    2562:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    2566:	f3c3 0382 	ubfx	r3, r3, #2, #3
    256a:	2b02      	cmp	r3, #2
    256c:	d805      	bhi.n	257a <tcvphy_end+0x1e>
    256e:	4a08      	ldr	r2, [pc, #32]	; (2590 <tcvphy_end+0x34>)
    2570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2574:	b10b      	cbz	r3, 257a <tcvphy_end+0x1e>
    2576:	695b      	ldr	r3, [r3, #20]
    2578:	b91b      	cbnz	r3, 2582 <tcvphy_end+0x26>
    257a:	200a      	movs	r0, #10
    257c:	4905      	ldr	r1, [pc, #20]	; (2594 <tcvphy_end+0x38>)
    257e:	f7fe fc21 	bl	dc4 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    2582:	4798      	blx	r3
    2584:	4601      	mov	r1, r0
    2586:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    2588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    258c:	f7ff bd2e 	b.w	1fec <dispose>
    2590:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2594:	00005377 	andeq	r5, r0, r7, ror r3

00002598 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    2598:	4770      	bx	lr

0000259a <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    259a:	e7fe      	b.n	259a <NmiSR>

0000259c <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    259c:	e7fe      	b.n	259c <FaultISR>

0000259e <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    259e:	e7fe      	b.n	259e <AONIntHandler>

000025a0 <ResetISR>:
{
    25a0:	b508      	push	{r3, lr}
    SetupTrimDevice();
    25a2:	f001 fd15 	bl	3fd0 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    25a6:	4b0c      	ldr	r3, [pc, #48]	; (25d8 <zero_loop+0x20>)
    pui32Src = &_etext;
    25a8:	4a0c      	ldr	r2, [pc, #48]	; (25dc <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    25aa:	490d      	ldr	r1, [pc, #52]	; (25e0 <zero_loop+0x28>)
    25ac:	428b      	cmp	r3, r1
    25ae:	d30d      	bcc.n	25cc <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    25b0:	480c      	ldr	r0, [pc, #48]	; (25e4 <zero_loop+0x2c>)
    25b2:	490d      	ldr	r1, [pc, #52]	; (25e8 <zero_loop+0x30>)
    25b4:	f04f 0200 	mov.w	r2, #0

000025b8 <zero_loop>:
    25b8:	4288      	cmp	r0, r1
    25ba:	bfb8      	it	lt
    25bc:	f840 2b04 	strlt.w	r2, [r0], #4
    25c0:	dbfa      	blt.n	25b8 <zero_loop>
   main();
    25c2:	f7ff f901 	bl	17c8 <main>
    FaultISR();
    25c6:	f7ff ffe9 	bl	259c <FaultISR>
}
    25ca:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    25cc:	f852 0b04 	ldr.w	r0, [r2], #4
    25d0:	f843 0b04 	str.w	r0, [r3], #4
    25d4:	e7ea      	b.n	25ac <ResetISR+0xc>
    25d6:	bf00      	nop
    25d8:	20000000 	andcs	r0, r0, r0
    25dc:	00005d80 	andeq	r5, r0, r0, lsl #27
    25e0:	20000540 	andcs	r0, r0, r0, asr #10
    25e4:	20000540 	andcs	r0, r0, r0, asr #10
    25e8:	200006dc 	ldrdcs	r0, [r0], -ip

000025ec <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    25ec:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    25ee:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    25f4:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    25f6:	4907      	ldr	r1, [pc, #28]	; (2614 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25f8:	4d07      	ldr	r5, [pc, #28]	; (2618 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25fa:	4c08      	ldr	r4, [pc, #32]	; (261c <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25fc:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    25fe:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    2600:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    2602:	b2c0      	uxtb	r0, r0
			b |= 1;
    2604:	bf48      	it	mi
    2606:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    260a:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    260c:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    260e:	600a      	str	r2, [r1, #0]
    2610:	d1f4      	bne.n	25fc <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    2612:	bd70      	pop	{r4, r5, r6, pc}
    2614:	400220a0 	andmi	r2, r2, r0, lsr #1
    2618:	400220c0 	andmi	r2, r2, r0, asr #1
    261c:	40022090 	mulmi	r2, r0, r0

00002620 <put_byte>:

static void put_byte (byte b) {
    2620:	b530      	push	{r4, r5, lr}
    2622:	2308      	movs	r3, #8
    2624:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2628:	f44f 6180 	mov.w	r1, #1024	; 0x400
    262c:	4c06      	ldr	r4, [pc, #24]	; (2648 <put_byte+0x28>)
    262e:	4a07      	ldr	r2, [pc, #28]	; (264c <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    2630:	f010 0f80 	tst.w	r0, #128	; 0x80
    2634:	bf14      	ite	ne
    2636:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2638:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    263a:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    263c:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    263e:	6021      	str	r1, [r4, #0]
		b <<= 1;
    2640:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2642:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    2644:	d1f4      	bne.n	2630 <put_byte+0x10>
	}
}
    2646:	bd30      	pop	{r4, r5, pc}
    2648:	40022090 	mulmi	r2, r0, r0
    264c:	400220a0 	andmi	r2, r2, r0, lsr #1

00002650 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2650:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    2652:	b510      	push	{r4, lr}
    2654:	4c03      	ldr	r4, [pc, #12]	; (2664 <cmd_0+0x14>)
    2656:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    2658:	f7ff ffe2 	bl	2620 <put_byte>
    265c:	2300      	movs	r3, #0
    265e:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    2660:	bd10      	pop	{r4, pc}
    2662:	bf00      	nop
    2664:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002668 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    2668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    266c:	4604      	mov	r4, r0
    266e:	460d      	mov	r5, r1
    2670:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    2672:	f8df 8044 	ldr.w	r8, [pc, #68]	; 26b8 <wwait+0x50>
    2676:	4e0f      	ldr	r6, [pc, #60]	; (26b4 <wwait+0x4c>)
    2678:	f898 3000 	ldrb.w	r3, [r8]
    267c:	b14b      	cbz	r3, 2692 <wwait+0x2a>
	put_byte (CMD_RDSR);
    267e:	2005      	movs	r0, #5
    2680:	6037      	str	r7, [r6, #0]
    2682:	f7ff ffcd 	bl	2620 <put_byte>
	r = get_byte ();
    2686:	f7ff ffb1 	bl	25ec <get_byte>
    268a:	2300      	movs	r3, #0
    268c:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    268e:	07c3      	lsls	r3, r0, #31
    2690:	d401      	bmi.n	2696 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    2692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    2696:	f64f 73ff 	movw	r3, #65535	; 0xffff
    269a:	429c      	cmp	r4, r3
    269c:	d103      	bne.n	26a6 <wwait+0x3e>
			mdelay (1);
    269e:	2001      	movs	r0, #1
    26a0:	f7fe fb3c 	bl	d1c <mdelay>
    26a4:	e7e8      	b.n	2678 <wwait+0x10>
			delay (del, st);
    26a6:	4621      	mov	r1, r4
    26a8:	4628      	mov	r0, r5
    26aa:	f7ff f9ff 	bl	1aac <delay>
			release;
    26ae:	f7fe ff47 	bl	1540 <__pi_release>
    26b2:	bf00      	nop
    26b4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    26b8:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

000026bc <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    26bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    26be:	4d0c      	ldr	r5, [pc, #48]	; (26f0 <ready+0x34>)
    26c0:	782f      	ldrb	r7, [r5, #0]
    26c2:	b147      	cbz	r7, 26d6 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    26c4:	2101      	movs	r1, #1
    26c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    26ca:	f7ff ffcd 	bl	2668 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    26ce:	2200      	movs	r2, #0
    26d0:	4b08      	ldr	r3, [pc, #32]	; (26f4 <ready+0x38>)
    26d2:	701a      	strb	r2, [r3, #0]
}
    26d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26d6:	2401      	movs	r4, #1
    26d8:	4e07      	ldr	r6, [pc, #28]	; (26f8 <ready+0x3c>)
	udelay (1);
    26da:	4620      	mov	r0, r4
    26dc:	6034      	str	r4, [r6, #0]
    26de:	f7fe fb07 	bl	cf0 <udelay>
	udelay (1);
    26e2:	4620      	mov	r0, r4
    26e4:	6037      	str	r7, [r6, #0]
    26e6:	f7fe fb03 	bl	cf0 <udelay>
		dopen = DOPEN_TEMP;
    26ea:	2302      	movs	r3, #2
    26ec:	702b      	strb	r3, [r5, #0]
    26ee:	e7ee      	b.n	26ce <ready+0x12>
    26f0:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    26f4:	200005bd 			; <UNDEFINED> instruction: 0x200005bd
    26f8:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000026fc <cclose>:
static void cclose () {
    26fc:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    26fe:	4c07      	ldr	r4, [pc, #28]	; (271c <cclose+0x20>)
    2700:	7823      	ldrb	r3, [r4, #0]
    2702:	2b02      	cmp	r3, #2
    2704:	d109      	bne.n	271a <cclose+0x1e>
		wwait (WNONE, 1);
    2706:	2101      	movs	r1, #1
    2708:	f64f 70ff 	movw	r0, #65535	; 0xffff
    270c:	f7ff ffac 	bl	2668 <wwait>
	cmd_0 (CMD_DP);
    2710:	20b9      	movs	r0, #185	; 0xb9
    2712:	f7ff ff9d 	bl	2650 <cmd_0>
		dopen = 0;
    2716:	2300      	movs	r3, #0
    2718:	7023      	strb	r3, [r4, #0]
}
    271a:	bd10      	pop	{r4, pc}
    271c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00002720 <ee_open>:

// ============================================================================

word ee_open () {
    2720:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    2722:	f7ff ffcb 	bl	26bc <ready>
	dopen = DOPEN_PERM;
    2726:	2201      	movs	r2, #1
    2728:	4b01      	ldr	r3, [pc, #4]	; (2730 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    272a:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    272c:	701a      	strb	r2, [r3, #0]
}
    272e:	bd08      	pop	{r3, pc}
    2730:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00002734 <ee_close>:

void ee_close () {

	if (dopen) {
    2734:	4b03      	ldr	r3, [pc, #12]	; (2744 <ee_close+0x10>)
    2736:	781a      	ldrb	r2, [r3, #0]
    2738:	b11a      	cbz	r2, 2742 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    273a:	2202      	movs	r2, #2
    273c:	701a      	strb	r2, [r3, #0]
		cclose ();
    273e:	f7ff bfdd 	b.w	26fc <cclose>
	}
}
    2742:	4770      	bx	lr
    2744:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00002748 <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    2748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    274a:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    274c:	4818      	ldr	r0, [pc, #96]	; (27b0 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    274e:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    2750:	f7ff f9c8 	bl	1ae4 <running>
    2754:	b120      	cbz	r0, 2760 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    2756:	4631      	mov	r1, r6
    2758:	f7ff f996 	bl	1a88 <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    275c:	f7fe fef0 	bl	1540 <__pi_release>
	if (*m)
    2760:	7823      	ldrb	r3, [r4, #0]
    2762:	b163      	cbz	r3, 277e <ser_out+0x36>
		prcs = strlen (m) +1;
    2764:	4620      	mov	r0, r4
    2766:	f7ff f9cf 	bl	1b08 <__pi_strlen>
    276a:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    276c:	b2a8      	uxth	r0, r5
    276e:	f7ff facd 	bl	1d0c <__pi_malloc>
    2772:	4607      	mov	r7, r0
    2774:	b930      	cbnz	r0, 2784 <ser_out+0x3c>
		umwait (st);
    2776:	4630      	mov	r0, r6
    2778:	f7ff fb36 	bl	1de8 <__pi_waitmem>
    277c:	e7ee      	b.n	275c <ser_out+0x14>
		prcs =  m [1] + 3;
    277e:	7865      	ldrb	r5, [r4, #1]
    2780:	3503      	adds	r5, #3
    2782:	e7f3      	b.n	276c <ser_out+0x24>
	}

	if (*m)
    2784:	7823      	ldrb	r3, [r4, #0]
    2786:	b15b      	cbz	r3, 27a0 <ser_out+0x58>
		strcpy (buf, m);
    2788:	4621      	mov	r1, r4
    278a:	f7ff f9c4 	bl	1b16 <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    278e:	4639      	mov	r1, r7
    2790:	4807      	ldr	r0, [pc, #28]	; (27b0 <ser_out+0x68>)
    2792:	f7ff fb0f 	bl	1db4 <__pi_fork>
    2796:	b940      	cbnz	r0, 27aa <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    2798:	4638      	mov	r0, r7
    279a:	f7ff fa6b 	bl	1c74 <__pi_free>
		// and wait for a process slot
		npwait (st);
    279e:	e7ea      	b.n	2776 <ser_out+0x2e>
		memcpy (buf, m, prcs);
    27a0:	462a      	mov	r2, r5
    27a2:	4621      	mov	r1, r4
    27a4:	f7ff f9cd 	bl	1b42 <__pi_memcpy>
    27a8:	e7f1      	b.n	278e <ser_out+0x46>
		release;
	}

	return 0;
}
    27aa:	2000      	movs	r0, #0
    27ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27ae:	bf00      	nop
    27b0:	00003255 	andeq	r3, r0, r5, asr r2

000027b4 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    27b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27b6:	4604      	mov	r4, r0
    27b8:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    27ba:	4615      	mov	r5, r2
    27bc:	b37a      	cbz	r2, 281e <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    27be:	4e19      	ldr	r6, [pc, #100]	; (2824 <ser_in+0x70>)
    27c0:	6830      	ldr	r0, [r6, #0]
    27c2:	b988      	cbnz	r0, 27e8 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    27c4:	4818      	ldr	r0, [pc, #96]	; (2828 <ser_in+0x74>)
    27c6:	f7ff f98d 	bl	1ae4 <running>
    27ca:	b948      	cbnz	r0, 27e0 <ser_in+0x2c>
			prcs = runthread (__inserial);
    27cc:	4601      	mov	r1, r0
    27ce:	4816      	ldr	r0, [pc, #88]	; (2828 <ser_in+0x74>)
    27d0:	f7ff faf0 	bl	1db4 <__pi_fork>
			if (prcs == 0) {
    27d4:	b920      	cbnz	r0, 27e0 <ser_in+0x2c>
				npwait (st);
    27d6:	4620      	mov	r0, r4
    27d8:	f7ff fb06 	bl	1de8 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    27dc:	f7fe feb0 	bl	1540 <__pi_release>
		join (prcs, st);
    27e0:	4621      	mov	r1, r4
    27e2:	f7ff f951 	bl	1a88 <__pi_join>
    27e6:	e7f9      	b.n	27dc <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    27e8:	7803      	ldrb	r3, [r0, #0]
    27ea:	b9a3      	cbnz	r3, 2816 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    27ec:	7844      	ldrb	r4, [r0, #1]
    27ee:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    27f0:	42ac      	cmp	r4, r5
		prcs = len-1;
    27f2:	bfa8      	it	ge
    27f4:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    27f8:	4622      	mov	r2, r4
    27fa:	4638      	mov	r0, r7
    27fc:	6831      	ldr	r1, [r6, #0]
    27fe:	f7ff f9a0 	bl	1b42 <__pi_memcpy>
	ufree (__inpline);
    2802:	6830      	ldr	r0, [r6, #0]
    2804:	f7ff fa36 	bl	1c74 <__pi_free>
	__inpline = NULL;
    2808:	2300      	movs	r3, #0
    280a:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    280c:	783a      	ldrb	r2, [r7, #0]
    280e:	b102      	cbz	r2, 2812 <ser_in+0x5e>
		buf [prcs] = '\0';
    2810:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    2812:	4620      	mov	r0, r4
    2814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    2816:	f7ff f977 	bl	1b08 <__pi_strlen>
    281a:	4604      	mov	r4, r0
    281c:	e7e8      	b.n	27f0 <ser_in+0x3c>
		return 0;
    281e:	4614      	mov	r4, r2
    2820:	e7f7      	b.n	2812 <ser_in+0x5e>
    2822:	bf00      	nop
    2824:	20000608 	andcs	r0, r0, r8, lsl #12
    2828:	000032c5 	andeq	r3, r0, r5, asr #5

0000282c <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    282c:	b40e      	push	{r1, r2, r3}
    282e:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    2830:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    2832:	4812      	ldr	r0, [pc, #72]	; (287c <ser_outf+0x50>)
    2834:	f7ff f956 	bl	1ae4 <running>
    2838:	4606      	mov	r6, r0
    283a:	b120      	cbz	r0, 2846 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    283c:	4621      	mov	r1, r4
    283e:	f7ff f923 	bl	1a88 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    2842:	f7fe fe7d 	bl	1540 <__pi_release>
	va_start (ap, m);
    2846:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2848:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    284a:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    284c:	f000 fef0 	bl	3630 <vform>
    2850:	4605      	mov	r5, r0
    2852:	b918      	cbnz	r0, 285c <ser_outf+0x30>
		umwait (st);
    2854:	4620      	mov	r0, r4
    2856:	f7ff fac7 	bl	1de8 <__pi_waitmem>
    285a:	e7f2      	b.n	2842 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    285c:	4601      	mov	r1, r0
    285e:	4807      	ldr	r0, [pc, #28]	; (287c <ser_outf+0x50>)
    2860:	f7ff faa8 	bl	1db4 <__pi_fork>
    2864:	b918      	cbnz	r0, 286e <ser_outf+0x42>
		ufree (buf);
    2866:	4628      	mov	r0, r5
    2868:	f7ff fa04 	bl	1c74 <__pi_free>
		npwait (st);
    286c:	e7f2      	b.n	2854 <ser_outf+0x28>
		release;
	}

	return 0;
}
    286e:	4630      	mov	r0, r6
    2870:	b003      	add	sp, #12
    2872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2876:	b003      	add	sp, #12
    2878:	4770      	bx	lr
    287a:	bf00      	nop
    287c:	00003255 	andeq	r3, r0, r5, asr r2

00002880 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    2880:	b40e      	push	{r1, r2, r3}
    2882:	b533      	push	{r0, r1, r4, r5, lr}
    2884:	9905      	ldr	r1, [sp, #20]
    2886:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    2888:	b321      	cbz	r1, 28d4 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    288a:	4d13      	ldr	r5, [pc, #76]	; (28d8 <ser_inf+0x58>)
    288c:	6828      	ldr	r0, [r5, #0]
    288e:	b988      	cbnz	r0, 28b4 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2890:	4812      	ldr	r0, [pc, #72]	; (28dc <ser_inf+0x5c>)
    2892:	f7ff f927 	bl	1ae4 <running>
    2896:	b948      	cbnz	r0, 28ac <ser_inf+0x2c>
			prcs = runthread (__inserial);
    2898:	4601      	mov	r1, r0
    289a:	4810      	ldr	r0, [pc, #64]	; (28dc <ser_inf+0x5c>)
    289c:	f7ff fa8a 	bl	1db4 <__pi_fork>
			if (prcs == 0) {
    28a0:	b920      	cbnz	r0, 28ac <ser_inf+0x2c>
				npwait (st);
    28a2:	4620      	mov	r0, r4
    28a4:	f7ff faa0 	bl	1de8 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    28a8:	f7fe fe4a 	bl	1540 <__pi_release>
		join (prcs, st);
    28ac:	4621      	mov	r1, r4
    28ae:	f7ff f8eb 	bl	1a88 <__pi_join>
    28b2:	e7f9      	b.n	28a8 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    28b4:	aa06      	add	r2, sp, #24
    28b6:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    28b8:	f000 fee2 	bl	3680 <vscan>
    28bc:	4604      	mov	r4, r0

	ufree (__inpline);
    28be:	6828      	ldr	r0, [r5, #0]
    28c0:	f7ff f9d8 	bl	1c74 <__pi_free>
	__inpline = NULL;
    28c4:	2300      	movs	r3, #0
    28c6:	602b      	str	r3, [r5, #0]

	return prcs;
}
    28c8:	4620      	mov	r0, r4
    28ca:	b002      	add	sp, #8
    28cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    28d0:	b003      	add	sp, #12
    28d2:	4770      	bx	lr
		return 0;
    28d4:	460c      	mov	r4, r1
    28d6:	e7f7      	b.n	28c8 <ser_inf+0x48>
    28d8:	20000608 	andcs	r0, r0, r8, lsl #12
    28dc:	000032c5 	andeq	r3, r0, r5, asr #5

000028e0 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    28e0:	4b04      	ldr	r3, [pc, #16]	; (28f4 <plugch+0x14>)
    28e2:	4a05      	ldr	r2, [pc, #20]	; (28f8 <plugch+0x18>)
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	f503 7359 	add.w	r3, r3, #868	; 0x364
    28ea:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    28ec:	4a03      	ldr	r2, [pc, #12]	; (28fc <plugch+0x1c>)
    28ee:	81d3      	strh	r3, [r2, #14]
}
    28f0:	4770      	bx	lr
    28f2:	bf00      	nop
    28f4:	200005c0 	andcs	r0, r0, r0, asr #11
    28f8:	20000054 	andcs	r0, r0, r4, asr r0
    28fc:	2000003c 	andcs	r0, r0, ip, lsr r0

00002900 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2900:	b570      	push	{r4, r5, r6, lr}
    2902:	460c      	mov	r4, r1
    2904:	281a      	cmp	r0, #26
    2906:	f200 80a4 	bhi.w	2a52 <option+0x152>
    290a:	e8df f000 	tbb	[pc, r0]
    290e:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    2912:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    2916:	3b35445b 	blcc	d53a8a <__ccfg+0xd33ae2>
    291a:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    291e:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    2922:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    2926:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    292a:	4b4c      	ldr	r3, [pc, #304]	; (2a5c <option+0x15c>)
    292c:	7818      	ldrb	r0, [r3, #0]
    292e:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    2932:	3002      	adds	r0, #2
			goto RVal;
    2934:	e028      	b.n	2988 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    2936:	4a49      	ldr	r2, [pc, #292]	; (2a5c <option+0x15c>)
    2938:	7813      	ldrb	r3, [r2, #0]
    293a:	f043 0301 	orr.w	r3, r3, #1
    293e:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    2940:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    2942:	4b47      	ldr	r3, [pc, #284]	; (2a60 <option+0x160>)
    2944:	6819      	ldr	r1, [r3, #0]
    2946:	4b47      	ldr	r3, [pc, #284]	; (2a64 <option+0x164>)
    2948:	460c      	mov	r4, r1
    294a:	681d      	ldr	r5, [r3, #0]
    294c:	2300      	movs	r3, #0
    294e:	f834 2b10 	ldrh.w	r2, [r4], #16
    2952:	f002 0207 	and.w	r2, r2, #7
    2956:	429a      	cmp	r2, r3
    2958:	dd08      	ble.n	296c <option+0x6c>
    295a:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    295e:	3301      	adds	r3, #1
    2960:	42ae      	cmp	r6, r5
    2962:	d1f8      	bne.n	2956 <option+0x56>
    2964:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2968:	889b      	ldrh	r3, [r3, #4]
    296a:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    296c:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    296e:	4a3b      	ldr	r2, [pc, #236]	; (2a5c <option+0x15c>)
    2970:	7813      	ldrb	r3, [r2, #0]
    2972:	f023 0301 	bic.w	r3, r3, #1
    2976:	e7e2      	b.n	293e <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    2978:	b101      	cbz	r1, 297c <option+0x7c>
    297a:	880c      	ldrh	r4, [r1, #0]
    297c:	4b3a      	ldr	r3, [pc, #232]	; (2a68 <option+0x168>)
    297e:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    2980:	2000      	movs	r0, #0
    2982:	e7f3      	b.n	296c <option+0x6c>
			ret = (int) statid;
    2984:	4b38      	ldr	r3, [pc, #224]	; (2a68 <option+0x168>)
    2986:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    2988:	2c00      	cmp	r4, #0
    298a:	d0ef      	beq.n	296c <option+0x6c>
		*val = ret;
    298c:	8020      	strh	r0, [r4, #0]
	return ret;
    298e:	e7ed      	b.n	296c <option+0x6c>
			ret = rbuffl + 2;
    2990:	4b36      	ldr	r3, [pc, #216]	; (2a6c <option+0x16c>)
    2992:	7818      	ldrb	r0, [r3, #0]
    2994:	e7cd      	b.n	2932 <option+0x32>
				memcpy (val, &rxstat,
    2996:	220c      	movs	r2, #12
			if (val != NULL) {
    2998:	b121      	cbz	r1, 29a4 <option+0xa4>
				memcpy (val, &rxstat,
    299a:	4620      	mov	r0, r4
    299c:	4934      	ldr	r1, [pc, #208]	; (2a70 <option+0x170>)
    299e:	f7ff f8d0 	bl	1b42 <__pi_memcpy>
    29a2:	e7ed      	b.n	2980 <option+0x80>
				memset (&rxstat, 0, 
    29a4:	4832      	ldr	r0, [pc, #200]	; (2a70 <option+0x170>)
    29a6:	f7ff f8d6 	bl	1b56 <__pi_memset>
    29aa:	e7e9      	b.n	2980 <option+0x80>
			if (val == NULL)
    29ac:	b941      	cbnz	r1, 29c0 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    29ae:	f7ff fac5 	bl	1f3c <lrnd>
    29b2:	f3c0 4105 	ubfx	r1, r0, #16, #6
    29b6:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    29b8:	482e      	ldr	r0, [pc, #184]	; (2a74 <option+0x174>)
    29ba:	f7fe ffbd 	bl	1938 <__pi_utimer_set>
    29be:	e7bf      	b.n	2940 <option+0x40>
    29c0:	8809      	ldrh	r1, [r1, #0]
    29c2:	e7f9      	b.n	29b8 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    29c4:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    29c6:	4b2c      	ldr	r3, [pc, #176]	; (2a78 <option+0x178>)
    29c8:	8b5a      	ldrh	r2, [r3, #26]
    29ca:	4b2c      	ldr	r3, [pc, #176]	; (2a7c <option+0x17c>)
					== patable [ret])
    29cc:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    29d0:	428a      	cmp	r2, r1
    29d2:	d0d9      	beq.n	2988 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    29d4:	3001      	adds	r0, #1
    29d6:	2808      	cmp	r0, #8
    29d8:	d1f8      	bne.n	29cc <option+0xcc>
    29da:	e7d5      	b.n	2988 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29dc:	b119      	cbz	r1, 29e6 <option+0xe6>
				(*val > 7) ? 7 : *val;
    29de:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29e0:	2807      	cmp	r0, #7
    29e2:	bf28      	it	cs
    29e4:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    29e6:	4b25      	ldr	r3, [pc, #148]	; (2a7c <option+0x17c>)
    29e8:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    29ec:	4b22      	ldr	r3, [pc, #136]	; (2a78 <option+0x178>)
    29ee:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    29f0:	4a1a      	ldr	r2, [pc, #104]	; (2a5c <option+0x15c>)
    29f2:	7813      	ldrb	r3, [r2, #0]
    29f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    29f8:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    29fa:	e7a2      	b.n	2942 <option+0x42>
			ret = (int) channel;
    29fc:	4b20      	ldr	r3, [pc, #128]	; (2a80 <option+0x180>)
			ret = (int) vrate;
    29fe:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2a00:	e7c2      	b.n	2988 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a02:	b121      	cbz	r1, 2a0e <option+0x10e>
				(*val > 7) ? 7 : *val;
    2a04:	880c      	ldrh	r4, [r1, #0]
    2a06:	2c07      	cmp	r4, #7
    2a08:	bf28      	it	cs
    2a0a:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a0c:	b2e4      	uxtb	r4, r4
    2a0e:	4b1c      	ldr	r3, [pc, #112]	; (2a80 <option+0x180>)
    2a10:	701c      	strb	r4, [r3, #0]
			plugch ();
    2a12:	f7ff ff65 	bl	28e0 <plugch>
			_BIS (dstate, DSTATE_IRST);
    2a16:	4a11      	ldr	r2, [pc, #68]	; (2a5c <option+0x15c>)
    2a18:	7813      	ldrb	r3, [r2, #0]
    2a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a1e:	e78e      	b.n	293e <option+0x3e>
			ret = (int) vrate;
    2a20:	4b18      	ldr	r3, [pc, #96]	; (2a84 <option+0x184>)
    2a22:	e7ec      	b.n	29fe <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a24:	b139      	cbz	r1, 2a36 <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    2a26:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a28:	2b03      	cmp	r3, #3
    2a2a:	d806      	bhi.n	2a3a <option+0x13a>
    2a2c:	b13b      	cbz	r3, 2a3e <option+0x13e>
    2a2e:	b2db      	uxtb	r3, r3
    2a30:	4a14      	ldr	r2, [pc, #80]	; (2a84 <option+0x184>)
    2a32:	7013      	strb	r3, [r2, #0]
    2a34:	e7ed      	b.n	2a12 <option+0x112>
    2a36:	2302      	movs	r3, #2
    2a38:	e7fa      	b.n	2a30 <option+0x130>
    2a3a:	2303      	movs	r3, #3
    2a3c:	e7f8      	b.n	2a30 <option+0x130>
    2a3e:	2301      	movs	r3, #1
    2a40:	e7f6      	b.n	2a30 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a42:	b119      	cbz	r1, 2a4c <option+0x14c>
    2a44:	880b      	ldrh	r3, [r1, #0]
    2a46:	4a10      	ldr	r2, [pc, #64]	; (2a88 <option+0x188>)
    2a48:	8013      	strh	r3, [r2, #0]
			goto RRet;
    2a4a:	e799      	b.n	2980 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    2a50:	e7f9      	b.n	2a46 <option+0x146>
			syserror (EREQPAR, "cc13 op");
    2a52:	2003      	movs	r0, #3
    2a54:	490d      	ldr	r1, [pc, #52]	; (2a8c <option+0x18c>)
    2a56:	f7fe f9b5 	bl	dc4 <__pi_syserror>
    2a5a:	bf00      	nop
    2a5c:	200005c8 	andcs	r0, r0, r8, asr #11
    2a60:	200005c4 	andcs	r0, r0, r4, asr #11
    2a64:	200005d4 	ldrdcs	r0, [r0], -r4
    2a68:	200005f8 	strdcs	r0, [r0], -r8
    2a6c:	200005d8 	ldrdcs	r0, [r0], -r8
    2a70:	200005ec 	andcs	r0, r0, ip, ror #11
    2a74:	200005be 			; <UNDEFINED> instruction: 0x200005be
    2a78:	20000054 	andcs	r0, r0, r4, asr r0
    2a7c:	000053ea 	andeq	r5, r0, sl, ror #7
    2a80:	200005c0 	andcs	r0, r0, r0, asr #11
    2a84:	2000003a 	andcs	r0, r0, sl, lsr r0
    2a88:	20000038 	andcs	r0, r0, r8, lsr r0
    2a8c:	00005386 	andeq	r5, r0, r6, lsl #7

00002a90 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2a90:	b538      	push	{r3, r4, r5, lr}
    2a92:	4604      	mov	r4, r0
    2a94:	4d0c      	ldr	r5, [pc, #48]	; (2ac8 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a96:	4620      	mov	r0, r4
    2a98:	f001 f8a4 	bl	3be4 <NOROM_RFCDoorbellSendTo>
    2a9c:	b2c2      	uxtb	r2, r0
    2a9e:	2a01      	cmp	r2, #1
    2aa0:	d011      	beq.n	2ac6 <issue_cmd+0x36>
		if (res != 0x86)
    2aa2:	2a86      	cmp	r2, #134	; 0x86
    2aa4:	d003      	beq.n	2aae <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    2aa6:	4909      	ldr	r1, [pc, #36]	; (2acc <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    2aa8:	2008      	movs	r0, #8
    2aaa:	f7fe f98b 	bl	dc4 <__pi_syserror>
		if (cnt-- == 0) {
    2aae:	3d01      	subs	r5, #1
    2ab0:	d105      	bne.n	2abe <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    2ab2:	4621      	mov	r1, r4
    2ab4:	4806      	ldr	r0, [pc, #24]	; (2ad0 <issue_cmd+0x40>)
    2ab6:	f7ff f9a3 	bl	1e00 <diag>
			syserror (EHARDWARE, "hang ic0");
    2aba:	4906      	ldr	r1, [pc, #24]	; (2ad4 <issue_cmd+0x44>)
    2abc:	e7f4      	b.n	2aa8 <issue_cmd+0x18>
		udelay (1);
    2abe:	2001      	movs	r0, #1
    2ac0:	f7fe f916 	bl	cf0 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2ac4:	e7e7      	b.n	2a96 <issue_cmd+0x6>
}
    2ac6:	bd38      	pop	{r3, r4, r5, pc}
    2ac8:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    2acc:	0000538e 	andeq	r5, r0, lr, lsl #7
    2ad0:	00005392 	muleq	r0, r2, r3
    2ad4:	0000539e 	muleq	r0, lr, r3

00002ad8 <rx_de>:
static void rx_de () {
    2ad8:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    2ada:	4c06      	ldr	r4, [pc, #24]	; (2af4 <rx_de+0x1c>)
    2adc:	7823      	ldrb	r3, [r4, #0]
    2ade:	079b      	lsls	r3, r3, #30
    2ae0:	d506      	bpl.n	2af0 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2ae2:	4805      	ldr	r0, [pc, #20]	; (2af8 <rx_de+0x20>)
    2ae4:	f7ff ffd4 	bl	2a90 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    2ae8:	7823      	ldrb	r3, [r4, #0]
    2aea:	f023 0302 	bic.w	r3, r3, #2
    2aee:	7023      	strb	r3, [r4, #0]
}
    2af0:	bd10      	pop	{r4, pc}
    2af2:	bf00      	nop
    2af4:	200005c8 	andcs	r0, r0, r8, asr #11
    2af8:	04010001 	streq	r0, [r1], #-1

00002afc <rf_off>:
static void rf_off () {
    2afc:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2afe:	4c11      	ldr	r4, [pc, #68]	; (2b44 <rf_off+0x48>)
    2b00:	7823      	ldrb	r3, [r4, #0]
    2b02:	06db      	lsls	r3, r3, #27
    2b04:	d51d      	bpl.n	2b42 <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2b06:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2b08:	4b0f      	ldr	r3, [pc, #60]	; (2b48 <rf_off+0x4c>)
    2b0a:	2019      	movs	r0, #25
    2b0c:	681b      	ldr	r3, [r3, #0]
    2b0e:	695b      	ldr	r3, [r3, #20]
    2b10:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    2b12:	2000      	movs	r0, #0
    2b14:	f001 f9e4 	bl	3ee0 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2b18:	f001 f878 	bl	3c0c <NOROM_RFCSynthPowerDown>
    2b1c:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2b1e:	2001      	movs	r0, #1
    2b20:	601d      	str	r5, [r3, #0]
    2b22:	f7fe f92f 	bl	d84 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b26:	4b0a      	ldr	r3, [pc, #40]	; (2b50 <rf_off+0x54>)
    2b28:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2b2a:	f001 f841 	bl	3bb0 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b32:	4b08      	ldr	r3, [pc, #32]	; (2b54 <rf_off+0x58>)
    2b34:	601a      	str	r2, [r3, #0]
    2b36:	2202      	movs	r2, #2
    2b38:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2b3a:	7823      	ldrb	r3, [r4, #0]
    2b3c:	f023 0310 	bic.w	r3, r3, #16
    2b40:	7023      	strb	r3, [r4, #0]
}
    2b42:	bd38      	pop	{r3, r4, r5, pc}
    2b44:	200005c8 	andcs	r0, r0, r8, asr #11
    2b48:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2b4c:	60040000 	andvs	r0, r4, r0
    2b50:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2b54:	400220a0 	andmi	r2, r2, r0, lsr #1

00002b58 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2b58:	b570      	push	{r4, r5, r6, lr}
    2b5a:	4604      	mov	r4, r0
    2b5c:	460d      	mov	r5, r1
    2b5e:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    2b62:	8862      	ldrh	r2, [r4, #2]
    2b64:	42aa      	cmp	r2, r5
    2b66:	d00e      	beq.n	2b86 <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2b68:	3e01      	subs	r6, #1
    2b6a:	d108      	bne.n	2b7e <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2b6c:	8821      	ldrh	r1, [r4, #0]
    2b6e:	4806      	ldr	r0, [pc, #24]	; (2b88 <wait_cmd.constprop.0+0x30>)
    2b70:	462b      	mov	r3, r5
    2b72:	f7ff f945 	bl	1e00 <diag>
			syserror (EHARDWARE, "rt2");
    2b76:	2008      	movs	r0, #8
    2b78:	4904      	ldr	r1, [pc, #16]	; (2b8c <wait_cmd.constprop.0+0x34>)
    2b7a:	f7fe f923 	bl	dc4 <__pi_syserror>
		udelay (1);
    2b7e:	2001      	movs	r0, #1
    2b80:	f7fe f8b6 	bl	cf0 <udelay>
		if (cmd->status == tstat)
    2b84:	e7ed      	b.n	2b62 <wait_cmd.constprop.0+0xa>
}
    2b86:	bd70      	pop	{r4, r5, r6, pc}
    2b88:	000053a7 	andeq	r5, r0, r7, lsr #7
    2b8c:	000053b7 			; <UNDEFINED> instruction: 0x000053b7

00002b90 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b94:	4b46      	ldr	r3, [pc, #280]	; (2cb0 <rf_on.part.0+0x120>)
static void rf_on () {
    2b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b9a:	601a      	str	r2, [r3, #0]
    2b9c:	2202      	movs	r2, #2
    2b9e:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2ba0:	f000 ffca 	bl	3b38 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2ba4:	200a      	movs	r0, #10
    2ba6:	f7fe f8a3 	bl	cf0 <udelay>
    2baa:	f000 ffd1 	bl	3b50 <NOROM_OSCHF_AttemptToSwitchToXosc>
    2bae:	2800      	cmp	r0, #0
    2bb0:	d0f8      	beq.n	2ba4 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb2:	2401      	movs	r4, #1
    2bb4:	4b3f      	ldr	r3, [pc, #252]	; (2cb4 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bb6:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb8:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bba:	f7fe f8c5 	bl	d48 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2bc2:	4b3d      	ldr	r3, [pc, #244]	; (2cb8 <rf_on.part.0+0x128>)
	issue_cmd (
    2bc4:	483d      	ldr	r0, [pc, #244]	; (2cbc <rf_on.part.0+0x12c>)
    2bc6:	601a      	str	r2, [r3, #0]
    2bc8:	f7ff ff62 	bl	2a90 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2bcc:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2bd0:	493b      	ldr	r1, [pc, #236]	; (2cc0 <rf_on.part.0+0x130>)
    2bd2:	483c      	ldr	r0, [pc, #240]	; (2cc4 <rf_on.part.0+0x134>)
    2bd4:	f001 ff06 	bl	49e4 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2bd8:	2200      	movs	r2, #0
    2bda:	4b3b      	ldr	r3, [pc, #236]	; (2cc8 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2bdc:	493b      	ldr	r1, [pc, #236]	; (2ccc <rf_on.part.0+0x13c>)
    2bde:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2be0:	2202      	movs	r2, #2
    2be2:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2be6:	2203      	movs	r2, #3
    2be8:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2bec:	2204      	movs	r2, #4
    2bee:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2bf0:	2205      	movs	r2, #5
    2bf2:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2bf4:	2206      	movs	r2, #6
    2bf6:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2bfa:	4a35      	ldr	r2, [pc, #212]	; (2cd0 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2bfc:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2c00:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2c02:	4b34      	ldr	r3, [pc, #208]	; (2cd4 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2c04:	4a34      	ldr	r2, [pc, #208]	; (2cd8 <rf_on.part.0+0x148>)
      t7 = *pS++;
    2c06:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2c08:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2c0c:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2c10:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2c14:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2c16:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2c1a:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2c1e:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2c22:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2c24:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2c26:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2c28:	6198      	str	r0, [r3, #24]
    2c2a:	4618      	mov	r0, r3
   } while (--nIterations);
    2c2c:	4288      	cmp	r0, r1
    2c2e:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2c32:	f103 0320 	add.w	r3, r3, #32
    2c36:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2c38:	d1e5      	bne.n	2c06 <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2c3a:	4b28      	ldr	r3, [pc, #160]	; (2cdc <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2c3c:	4828      	ldr	r0, [pc, #160]	; (2ce0 <rf_on.part.0+0x150>)
    2c3e:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2c40:	4b28      	ldr	r3, [pc, #160]	; (2ce4 <rf_on.part.0+0x154>)
    2c42:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2c44:	4b28      	ldr	r3, [pc, #160]	; (2ce8 <rf_on.part.0+0x158>)
    2c46:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2c48:	4b28      	ldr	r3, [pc, #160]	; (2cec <rf_on.part.0+0x15c>)
    2c4a:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2c4c:	4b28      	ldr	r3, [pc, #160]	; (2cf0 <rf_on.part.0+0x160>)
    2c4e:	630b      	str	r3, [r1, #48]	; 0x30
    2c50:	f7ff ff1e 	bl	2a90 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2c54:	2001      	movs	r0, #1
    2c56:	f001 f943 	bl	3ee0 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2c5a:	4826      	ldr	r0, [pc, #152]	; (2cf4 <rf_on.part.0+0x164>)
    2c5c:	f001 f930 	bl	3ec0 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2c60:	4825      	ldr	r0, [pc, #148]	; (2cf8 <rf_on.part.0+0x168>)
    2c62:	f7ff ff15 	bl	2a90 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2c66:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2c6a:	4823      	ldr	r0, [pc, #140]	; (2cf8 <rf_on.part.0+0x168>)
    2c6c:	f7ff ff74 	bl	2b58 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2c70:	4822      	ldr	r0, [pc, #136]	; (2cfc <rf_on.part.0+0x16c>)
    2c72:	f7ff ff0d 	bl	2a90 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2c76:	4822      	ldr	r0, [pc, #136]	; (2d00 <rf_on.part.0+0x170>)
    2c78:	f7ff ff0a 	bl	2a90 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2c7c:	4820      	ldr	r0, [pc, #128]	; (2d00 <rf_on.part.0+0x170>)
    2c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2c82:	f7ff ff69 	bl	2b58 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2c86:	4a1f      	ldr	r2, [pc, #124]	; (2d04 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2c88:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2c8a:	7813      	ldrb	r3, [r2, #0]
    2c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c90:	f043 0310 	orr.w	r3, r3, #16
    2c94:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2c96:	2300      	movs	r3, #0
    2c98:	4a1b      	ldr	r2, [pc, #108]	; (2d08 <rf_on.part.0+0x178>)
    2c9a:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2c9c:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2ca0:	4b1a      	ldr	r3, [pc, #104]	; (2d0c <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2ca2:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2ca4:	681b      	ldr	r3, [r3, #0]
}
    2ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2caa:	691b      	ldr	r3, [r3, #16]
    2cac:	4718      	bx	r3
    2cae:	bf00      	nop
    2cb0:	40022090 	mulmi	r2, r0, r0
    2cb4:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2cb8:	60040000 	andvs	r0, r4, r0
    2cbc:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2cc0:	00005ab0 			; <UNDEFINED> instruction: 0x00005ab0
    2cc4:	2100041c 	tstcs	r0, ip, lsl r4
    2cc8:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2ccc:	2100c680 	smlabbcs	r0, r0, r6, ip
    2cd0:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2cd4:	2100c000 	mrscs	ip, (UNDEF: 0)
    2cd8:	000053fc 	strdeq	r5, [r0], -ip
    2cdc:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2ce0:	06070001 	streq	r0, [r7], -r1
    2ce4:	1a101020 	bne	406d6c <__ccfg+0x3e6dc4>
    2ce8:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2cec:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2cf0:	70006b54 	andvc	r6, r0, r4, asr fp
    2cf4:	200005dc 	ldrdcs	r0, [r0], -ip
    2cf8:	20000054 	andcs	r0, r0, r4, asr r0
    2cfc:	20000024 	andcs	r0, r0, r4, lsr #32
    2d00:	2000003c 	andcs	r0, r0, ip, lsr r0
    2d04:	200005c8 	andcs	r0, r0, r8, asr #11
    2d08:	40041014 	andmi	r1, r4, r4, lsl r0
    2d0c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002d10 <rx_int_enable>:
static void rx_int_enable () {
    2d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2d14:	4a2a      	ldr	r2, [pc, #168]	; (2dc0 <rx_int_enable+0xb0>)
    2d16:	6813      	ldr	r3, [r2, #0]
    2d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2d20:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2d22:	2200      	movs	r2, #0
    2d24:	4b27      	ldr	r3, [pc, #156]	; (2dc4 <rx_int_enable+0xb4>)
    2d26:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2d28:	681d      	ldr	r5, [r3, #0]
    2d2a:	2d00      	cmp	r5, #0
    2d2c:	d1fb      	bne.n	2d26 <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d2e:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2d30:	4a25      	ldr	r2, [pc, #148]	; (2dc8 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2d32:	4f26      	ldr	r7, [pc, #152]	; (2dcc <rx_int_enable+0xbc>)
    2d34:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d36:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2dd8 <rx_int_enable+0xc8>
    2d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2d42:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d44:	4b22      	ldr	r3, [pc, #136]	; (2dd0 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d46:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2ddc <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d4a:	69db      	ldr	r3, [r3, #28]
    2d4c:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2d4e:	7923      	ldrb	r3, [r4, #4]
    2d50:	2b03      	cmp	r3, #3
    2d52:	d11e      	bne.n	2d92 <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d54:	7a63      	ldrb	r3, [r4, #9]
    2d56:	7a21      	ldrb	r1, [r4, #8]
    2d58:	1cda      	adds	r2, r3, #3
    2d5a:	4291      	cmp	r1, r2
			nr++;
    2d5c:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d60:	d11c      	bne.n	2d9c <rx_int_enable+0x8c>
    2d62:	f898 2000 	ldrb.w	r2, [r8]
    2d66:	429a      	cmp	r2, r3
    2d68:	d318      	bcc.n	2d9c <rx_int_enable+0x8c>
    2d6a:	f013 0c01 	ands.w	ip, r3, #1
    2d6e:	d115      	bne.n	2d9c <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2d70:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2d74:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2d76:	5c88      	ldrb	r0, [r1, r2]
    2d78:	440b      	add	r3, r1
    2d7a:	3880      	subs	r0, #128	; 0x80
    2d7c:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2d7e:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d82:	f8b9 0000 	ldrh.w	r0, [r9]
    2d86:	f104 010a 	add.w	r1, r4, #10
    2d8a:	f7ff fb5f 	bl	244c <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2d8e:	2300      	movs	r3, #0
    2d90:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d92:	2e01      	cmp	r6, #1
    2d94:	d006      	beq.n	2da4 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2d96:	2601      	movs	r6, #1
    2d98:	6824      	ldr	r4, [r4, #0]
    2d9a:	e7d8      	b.n	2d4e <rx_int_enable+0x3e>
				diag ("BAD RX");
    2d9c:	4638      	mov	r0, r7
    2d9e:	f7ff f82f 	bl	1e00 <diag>
    2da2:	e7f4      	b.n	2d8e <rx_int_enable+0x7e>
	if (nr) {
    2da4:	b14d      	cbz	r5, 2dba <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2da6:	f7ff f8c9 	bl	1f3c <lrnd>
}
    2daa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2dae:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2db2:	3102      	adds	r1, #2
    2db4:	4807      	ldr	r0, [pc, #28]	; (2dd4 <rx_int_enable+0xc4>)
    2db6:	f7fe bdbf 	b.w	1938 <__pi_utimer_set>
}
    2dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dbe:	bf00      	nop
    2dc0:	40041018 	andmi	r1, r4, r8, lsl r0
    2dc4:	40041010 	andmi	r1, r4, r0, lsl r0
    2dc8:	40041014 	andmi	r1, r4, r4, lsl r0
    2dcc:	000053bb 			; <UNDEFINED> instruction: 0x000053bb
    2dd0:	2000007c 	andcs	r0, r0, ip, ror r0
    2dd4:	200005be 			; <UNDEFINED> instruction: 0x200005be
    2dd8:	200005d8 	ldrdcs	r0, [r0], -r8
    2ddc:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

00002de0 <cc1350_driver>:
thread (cc1350_driver)
    2de0:	2801      	cmp	r0, #1
    2de2:	b570      	push	{r4, r5, r6, lr}
    2de4:	f000 808b 	beq.w	2efe <cc1350_driver+0x11e>
    2de8:	2802      	cmp	r0, #2
    2dea:	f000 80bd 	beq.w	2f68 <cc1350_driver+0x188>
    2dee:	2800      	cmp	r0, #0
    2df0:	f040 80ce 	bne.w	2f90 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2df4:	4c68      	ldr	r4, [pc, #416]	; (2f98 <cc1350_driver+0x1b8>)
    2df6:	f994 3000 	ldrsb.w	r3, [r4]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	da05      	bge.n	2e0a <cc1350_driver+0x2a>
			rf_off ();
    2dfe:	f7ff fe7d 	bl	2afc <rf_off>
			_BIC (dstate,
    2e02:	7823      	ldrb	r3, [r4, #0]
    2e04:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2e08:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2e0a:	7823      	ldrb	r3, [r4, #0]
    2e0c:	0798      	lsls	r0, r3, #30
    2e0e:	f003 0201 	and.w	r2, r3, #1
    2e12:	d51e      	bpl.n	2e52 <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2e14:	b90a      	cbnz	r2, 2e1a <cc1350_driver+0x3a>
				rx_de ();
    2e16:	f7ff fe5f 	bl	2ad8 <rx_de>
		if (paylen == 0) {
    2e1a:	4d60      	ldr	r5, [pc, #384]	; (2f9c <cc1350_driver+0x1bc>)
    2e1c:	4e60      	ldr	r6, [pc, #384]	; (2fa0 <cc1350_driver+0x1c0>)
    2e1e:	682b      	ldr	r3, [r5, #0]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d14c      	bne.n	2ebe <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2e24:	4b5f      	ldr	r3, [pc, #380]	; (2fa4 <cc1350_driver+0x1c4>)
    2e26:	4629      	mov	r1, r5
    2e28:	8818      	ldrh	r0, [r3, #0]
    2e2a:	f7ff fb5d 	bl	24e8 <tcvphy_get>
    2e2e:	6170      	str	r0, [r6, #20]
    2e30:	2800      	cmp	r0, #0
    2e32:	d02f      	beq.n	2e94 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e34:	4a5c      	ldr	r2, [pc, #368]	; (2fa8 <cc1350_driver+0x1c8>)
				paylen -= 2;
    2e36:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e38:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2e3a:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e3c:	4293      	cmp	r3, r2
				paylen -= 2;
    2e3e:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e40:	dc03      	bgt.n	2e4a <cc1350_driver+0x6a>
    2e42:	2b00      	cmp	r3, #0
    2e44:	dd01      	ble.n	2e4a <cc1350_driver+0x6a>
    2e46:	07db      	lsls	r3, r3, #31
    2e48:	d51b      	bpl.n	2e82 <cc1350_driver+0xa2>
    2e4a:	200a      	movs	r0, #10
    2e4c:	4957      	ldr	r1, [pc, #348]	; (2fac <cc1350_driver+0x1cc>)
    2e4e:	f7fd ffb9 	bl	dc4 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2e52:	2a00      	cmp	r2, #0
    2e54:	d0e1      	beq.n	2e1a <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2e56:	06d9      	lsls	r1, r3, #27
    2e58:	d50d      	bpl.n	2e76 <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2e5a:	4855      	ldr	r0, [pc, #340]	; (2fb0 <cc1350_driver+0x1d0>)
    2e5c:	69c3      	ldr	r3, [r0, #28]
    2e5e:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2e60:	2300      	movs	r3, #0
    2e62:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2e64:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2e66:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2e68:	f7ff fe12 	bl	2a90 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2e6c:	7823      	ldrb	r3, [r4, #0]
    2e6e:	f043 0302 	orr.w	r3, r3, #2
    2e72:	7023      	strb	r3, [r4, #0]
    2e74:	e7d1      	b.n	2e1a <cc1350_driver+0x3a>
    2e76:	f7ff fe8b 	bl	2b90 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2e7a:	7823      	ldrb	r3, [r4, #0]
    2e7c:	079a      	lsls	r2, r3, #30
    2e7e:	d5ec      	bpl.n	2e5a <cc1350_driver+0x7a>
    2e80:	e7cb      	b.n	2e1a <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e86:	4b4b      	ldr	r3, [pc, #300]	; (2fb4 <cc1350_driver+0x1d4>)
    2e88:	881b      	ldrh	r3, [r3, #0]
    2e8a:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2e8c:	bf18      	it	ne
    2e8e:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2e90:	682b      	ldr	r3, [r5, #0]
    2e92:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2e94:	6829      	ldr	r1, [r5, #0]
    2e96:	b991      	cbnz	r1, 2ebe <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2e98:	4b47      	ldr	r3, [pc, #284]	; (2fb8 <cc1350_driver+0x1d8>)
    2e9a:	6818      	ldr	r0, [r3, #0]
    2e9c:	f7fe fdc0 	bl	1a20 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2ea0:	7823      	ldrb	r3, [r4, #0]
    2ea2:	079d      	lsls	r5, r3, #30
    2ea4:	d503      	bpl.n	2eae <cc1350_driver+0xce>
				rx_int_enable ();
    2ea6:	f7ff ff33 	bl	2d10 <rx_int_enable>
			release;
    2eaa:	f7fe fb49 	bl	1540 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2eae:	06dc      	lsls	r4, r3, #27
    2eb0:	d5fb      	bpl.n	2eaa <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2eb2:	2102      	movs	r1, #2
    2eb4:	4b41      	ldr	r3, [pc, #260]	; (2fbc <cc1350_driver+0x1dc>)
    2eb6:	8818      	ldrh	r0, [r3, #0]
    2eb8:	f7fe fdf8 	bl	1aac <delay>
    2ebc:	e7f5      	b.n	2eaa <cc1350_driver+0xca>
		if (bckf_timer) {
    2ebe:	4d40      	ldr	r5, [pc, #256]	; (2fc0 <cc1350_driver+0x1e0>)
    2ec0:	882b      	ldrh	r3, [r5, #0]
    2ec2:	b163      	cbz	r3, 2ede <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2ec4:	4b3c      	ldr	r3, [pc, #240]	; (2fb8 <cc1350_driver+0x1d8>)
    2ec6:	2100      	movs	r1, #0
    2ec8:	6818      	ldr	r0, [r3, #0]
    2eca:	f7fe fda9 	bl	1a20 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2ece:	8828      	ldrh	r0, [r5, #0]
    2ed0:	2100      	movs	r1, #0
    2ed2:	f7fe fdeb 	bl	1aac <delay>
			if (dstate & DSTATE_RXAC)
    2ed6:	7823      	ldrb	r3, [r4, #0]
    2ed8:	0798      	lsls	r0, r3, #30
    2eda:	d5e6      	bpl.n	2eaa <cc1350_driver+0xca>
    2edc:	e7e3      	b.n	2ea6 <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2ede:	7823      	ldrb	r3, [r4, #0]
    2ee0:	06d9      	lsls	r1, r3, #27
    2ee2:	d401      	bmi.n	2ee8 <cc1350_driver+0x108>
    2ee4:	f7ff fe54 	bl	2b90 <rf_on.part.0>
		rx_de ();
    2ee8:	f7ff fdf6 	bl	2ad8 <rx_de>
		RF_cmdPropTx . status = 0;
    2eec:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2eee:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2ef2:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef4:	4b33      	ldr	r3, [pc, #204]	; (2fc4 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2ef6:	4834      	ldr	r0, [pc, #208]	; (2fc8 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef8:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2efa:	f7ff fdc9 	bl	2a90 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2efe:	4b26      	ldr	r3, [pc, #152]	; (2f98 <cc1350_driver+0x1b8>)
    2f00:	f993 3000 	ldrsb.w	r3, [r3]
    2f04:	2b00      	cmp	r3, #0
    2f06:	f6ff af75 	blt.w	2df4 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f0a:	4b2e      	ldr	r3, [pc, #184]	; (2fc4 <cc1350_driver+0x1e4>)
    2f0c:	681a      	ldr	r2, [r3, #0]
    2f0e:	0792      	lsls	r2, r2, #30
    2f10:	d402      	bmi.n	2f18 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2f12:	2101      	movs	r1, #1
    2f14:	4608      	mov	r0, r1
    2f16:	e7cf      	b.n	2eb8 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2f18:	4821      	ldr	r0, [pc, #132]	; (2fa0 <cc1350_driver+0x1c0>)
    2f1a:	4c2c      	ldr	r4, [pc, #176]	; (2fcc <cc1350_driver+0x1ec>)
    2f1c:	8842      	ldrh	r2, [r0, #2]
    2f1e:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2f22:	d018      	beq.n	2f56 <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2f24:	7822      	ldrb	r2, [r4, #0]
    2f26:	2a0f      	cmp	r2, #15
    2f28:	d909      	bls.n	2f3e <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2f2a:	2200      	movs	r2, #0
    2f2c:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2f2e:	f06f 0202 	mvn.w	r2, #2
    2f32:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2f34:	f7ff fdac 	bl	2a90 <issue_cmd>
				proceed (DR_XMIT);
    2f38:	2001      	movs	r0, #1
    2f3a:	f7fe fd67 	bl	1a0c <proceed>
			txtries++;
    2f3e:	7823      	ldrb	r3, [r4, #0]
    2f40:	3301      	adds	r3, #1
    2f42:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2f44:	f7fe fffa 	bl	1f3c <lrnd>
    2f48:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2f4c:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f4e:	481c      	ldr	r0, [pc, #112]	; (2fc0 <cc1350_driver+0x1e0>)
    2f50:	f7fe fcf2 	bl	1938 <__pi_utimer_set>
		goto DR_LOOP__;
    2f54:	e74e      	b.n	2df4 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2f56:	6940      	ldr	r0, [r0, #20]
    2f58:	f7ff fb00 	bl	255c <tcvphy_end>
		paylen = 0;
    2f5c:	2300      	movs	r3, #0
    2f5e:	4a0f      	ldr	r2, [pc, #60]	; (2f9c <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f60:	2102      	movs	r1, #2
		paylen = 0;
    2f62:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2f64:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f66:	e7f2      	b.n	2f4e <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f68:	4b0b      	ldr	r3, [pc, #44]	; (2f98 <cc1350_driver+0x1b8>)
    2f6a:	781a      	ldrb	r2, [r3, #0]
    2f6c:	f993 3000 	ldrsb.w	r3, [r3]
    2f70:	2b00      	cmp	r3, #0
    2f72:	f6ff af3f 	blt.w	2df4 <cc1350_driver+0x14>
    2f76:	07d3      	lsls	r3, r2, #31
    2f78:	f53f af3c 	bmi.w	2df4 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2f7c:	4b09      	ldr	r3, [pc, #36]	; (2fa4 <cc1350_driver+0x1c4>)
    2f7e:	8818      	ldrh	r0, [r3, #0]
    2f80:	f7ff fad2 	bl	2528 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f84:	2800      	cmp	r0, #0
    2f86:	f47f af35 	bne.w	2df4 <cc1350_driver+0x14>
			rf_off ();
    2f8a:	f7ff fdb7 	bl	2afc <rf_off>
    2f8e:	e731      	b.n	2df4 <cc1350_driver+0x14>
endthread
    2f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2f94:	f7fe bcb2 	b.w	18fc <__pi_badstate>
    2f98:	200005c8 	andcs	r0, r0, r8, asr #11
    2f9c:	200005cc 	andcs	r0, r0, ip, asr #11
    2fa0:	200000a0 	andcs	r0, r0, r0, lsr #1
    2fa4:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2fa8:	200005d8 	ldrdcs	r0, [r0], -r8
    2fac:	000053c2 	andeq	r5, r0, r2, asr #7
    2fb0:	2000007c 	andcs	r0, r0, ip, ror r0
    2fb4:	200005f8 	strdcs	r0, [r0], -r8
    2fb8:	200005d4 	ldrdcs	r0, [r0], -r4
    2fbc:	20000038 	andcs	r0, r0, r8, lsr r0
    2fc0:	200005be 			; <UNDEFINED> instruction: 0x200005be
    2fc4:	40041010 	andmi	r1, r4, r0, lsl r0
    2fc8:	20000008 	andcs	r0, r0, r8
    2fcc:	200005fa 	strdcs	r0, [r0], -sl

00002fd0 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2fd0:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2fd2:	4a15      	ldr	r2, [pc, #84]	; (3028 <RFCCPE0IntHandler+0x58>)
    2fd4:	6813      	ldr	r3, [r2, #0]
    2fd6:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2fd8:	bfbf      	itttt	lt
    2fda:	4914      	ldrlt	r1, [pc, #80]	; (302c <RFCCPE0IntHandler+0x5c>)
    2fdc:	780b      	ldrblt	r3, [r1, #0]
    2fde:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2fe2:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2fe4:	2100      	movs	r1, #0
    2fe6:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2fe8:	6813      	ldr	r3, [r2, #0]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d1fb      	bne.n	2fe6 <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2fee:	4a10      	ldr	r2, [pc, #64]	; (3030 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2ff0:	4c10      	ldr	r4, [pc, #64]	; (3034 <RFCCPE0IntHandler+0x64>)
    2ff2:	6811      	ldr	r1, [r2, #0]
    2ff4:	6013      	str	r3, [r2, #0]
    2ff6:	4a10      	ldr	r2, [pc, #64]	; (3038 <RFCCPE0IntHandler+0x68>)
    2ff8:	6824      	ldr	r4, [r4, #0]
    2ffa:	6811      	ldr	r1, [r2, #0]
    2ffc:	4608      	mov	r0, r1
    2ffe:	f830 2b10 	ldrh.w	r2, [r0], #16
    3002:	f002 0207 	and.w	r2, r2, #7
    3006:	429a      	cmp	r2, r3
    3008:	dd08      	ble.n	301c <RFCCPE0IntHandler+0x4c>
    300a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    300e:	3301      	adds	r3, #1
    3010:	42a5      	cmp	r5, r4
    3012:	d1f8      	bne.n	3006 <RFCCPE0IntHandler+0x36>
    3014:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3018:	889b      	ldrh	r3, [r3, #4]
    301a:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    301c:	4a07      	ldr	r2, [pc, #28]	; (303c <RFCCPE0IntHandler+0x6c>)
    301e:	7813      	ldrb	r3, [r2, #0]
    3020:	f043 0302 	orr.w	r3, r3, #2
    3024:	7013      	strb	r3, [r2, #0]
}
    3026:	bd30      	pop	{r4, r5, pc}
    3028:	40041010 	andmi	r1, r4, r0, lsl r0
    302c:	200005c8 	andcs	r0, r0, r8, asr #11
    3030:	40041014 	andmi	r1, r4, r4, lsl r0
    3034:	200005d4 	ldrdcs	r0, [r0], -r4
    3038:	200005c4 	andcs	r0, r0, r4, asr #11
    303c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

00003040 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    3040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    3044:	4c49      	ldr	r4, [pc, #292]	; (316c <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    3046:	4606      	mov	r6, r0
	if (rbuffl != 0)
    3048:	7822      	ldrb	r2, [r4, #0]
    304a:	b11a      	cbz	r2, 3054 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    304c:	2009      	movs	r0, #9
    304e:	4948      	ldr	r1, [pc, #288]	; (3170 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    3050:	f7fd feb8 	bl	dc4 <__pi_syserror>
	if (mbs == 0)
    3054:	b129      	cbz	r1, 3062 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    3056:	1f8a      	subs	r2, r1, #6
    3058:	2af4      	cmp	r2, #244	; 0xf4
    305a:	d903      	bls.n	3064 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    305c:	2003      	movs	r0, #3
    305e:	4945      	ldr	r1, [pc, #276]	; (3174 <phys_cc1350+0x134>)
    3060:	e7f6      	b.n	3050 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    3062:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    3064:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    3066:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    306a:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    306c:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    3070:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    3072:	7820      	ldrb	r0, [r4, #0]
    3074:	469b      	mov	fp, r3
    3076:	300d      	adds	r0, #13
    3078:	f7fe fe48 	bl	1d0c <__pi_malloc>
		if (db == NULL)
    307c:	4603      	mov	r3, r0
    307e:	b920      	cbnz	r0, 308a <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    3080:	2006      	movs	r0, #6
    3082:	493b      	ldr	r1, [pc, #236]	; (3170 <phys_cc1350+0x130>)
    3084:	e7e4      	b.n	3050 <phys_cc1350+0x10>
    3086:	46b8      	mov	r8, r7
    3088:	e7f3      	b.n	3072 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    308a:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    308e:	2f00      	cmp	r7, #0
    3090:	d03e      	beq.n	3110 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    3092:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    3096:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    3098:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    309a:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    309c:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    30a0:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    30a4:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    30a6:	d1ee      	bne.n	3086 <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    30a8:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    30aa:	2008      	movs	r0, #8
    30ac:	f7fe fe2e 	bl	1d0c <__pi_malloc>
    30b0:	4b31      	ldr	r3, [pc, #196]	; (3178 <phys_cc1350+0x138>)
    30b2:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    30b4:	2800      	cmp	r0, #0
    30b6:	d0e3      	beq.n	3080 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    30b8:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    30ba:	2500      	movs	r5, #0
    30bc:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30be:	492f      	ldr	r1, [pc, #188]	; (317c <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    30c0:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    30c2:	4a2f      	ldr	r2, [pc, #188]	; (3180 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30c4:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    30c6:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    30c8:	89da      	ldrh	r2, [r3, #14]
    30ca:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    30ce:	f042 0206 	orr.w	r2, r2, #6
    30d2:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    30d4:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    30da:	3b02      	subs	r3, #2
    30dc:	7023      	strb	r3, [r4, #0]
	physid = phy;
    30de:	4b29      	ldr	r3, [pc, #164]	; (3184 <phys_cc1350+0x144>)
    30e0:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30e2:	f7ff f98b 	bl	23fc <tcvphy_reg>
    30e6:	4b28      	ldr	r3, [pc, #160]	; (3188 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30e8:	2207      	movs	r2, #7
    30ea:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30ec:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30ee:	462b      	mov	r3, r5
    30f0:	4826      	ldr	r0, [pc, #152]	; (318c <phys_cc1350+0x14c>)
    30f2:	f7fe fe85 	bl	1e00 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    30f6:	4826      	ldr	r0, [pc, #152]	; (3190 <phys_cc1350+0x150>)
    30f8:	f7fe fc08 	bl	190c <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    30fc:	4629      	mov	r1, r5
    30fe:	4825      	ldr	r0, [pc, #148]	; (3194 <phys_cc1350+0x154>)
    3100:	f7fe fe58 	bl	1db4 <__pi_fork>
    3104:	4b24      	ldr	r3, [pc, #144]	; (3198 <phys_cc1350+0x158>)
    3106:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    3108:	b920      	cbnz	r0, 3114 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    310a:	2004      	movs	r0, #4
    310c:	4918      	ldr	r1, [pc, #96]	; (3170 <phys_cc1350+0x130>)
    310e:	e79f      	b.n	3050 <phys_cc1350+0x10>
    3110:	4605      	mov	r5, r0
    3112:	e7c0      	b.n	3096 <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3114:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    3118:	4c20      	ldr	r4, [pc, #128]	; (319c <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    311a:	4921      	ldr	r1, [pc, #132]	; (31a0 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    311c:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    311e:	4b21      	ldr	r3, [pc, #132]	; (31a4 <phys_cc1350+0x164>)
    3120:	781a      	ldrb	r2, [r3, #0]
    3122:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3124:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3128:	8858      	ldrh	r0, [r3, #2]
    312a:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    312e:	6922      	ldr	r2, [r4, #16]
    3130:	f003 030f 	and.w	r3, r3, #15
    3134:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    3138:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    313c:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3140:	f022 020f 	bic.w	r2, r2, #15
    3144:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    3148:	4313      	orrs	r3, r2
    314a:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    314c:	f7ff fbc8 	bl	28e0 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3150:	4b15      	ldr	r3, [pc, #84]	; (31a8 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3152:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3154:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3156:	f000 fe27 	bl	3da8 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    315a:	4620      	mov	r0, r4
    315c:	4913      	ldr	r1, [pc, #76]	; (31ac <phys_cc1350+0x16c>)
    315e:	f000 fd7b 	bl	3c58 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3162:	4b13      	ldr	r3, [pc, #76]	; (31b0 <phys_cc1350+0x170>)
    3164:	601d      	str	r5, [r3, #0]
}
    3166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    316a:	bf00      	nop
    316c:	200005d8 	ldrdcs	r0, [r0], -r8
    3170:	000053ca 	andeq	r5, r0, sl, asr #7
    3174:	000053cf 	andeq	r5, r0, pc, asr #7
    3178:	2000007c 	andcs	r0, r0, ip, ror r0
    317c:	00002901 	andeq	r2, r0, r1, lsl #18
    3180:	200005ec 	andcs	r0, r0, ip, ror #11
    3184:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    3188:	200005d4 	ldrdcs	r0, [r0], -r4
    318c:	000053d7 	ldrdeq	r5, [r0], -r7
    3190:	200005be 			; <UNDEFINED> instruction: 0x200005be
    3194:	00002de1 	andeq	r2, r0, r1, ror #27
    3198:	200005c4 	andcs	r0, r0, r4, asr #11
    319c:	20000054 	andcs	r0, r0, r4, asr r0
    31a0:	00005d3c 	andeq	r5, r0, ip, lsr sp
    31a4:	2000003a 	andcs	r0, r0, sl, lsr r0
    31a8:	400821d0 	ldrdmi	r2, [r8], -r0
    31ac:	200005dc 	ldrdcs	r0, [r0], -ip
    31b0:	40041018 	andmi	r1, r4, r8, lsl r0

000031b4 <tcv_clo_null>:
    31b4:	b510      	push	{r4, lr}
    31b6:	4a07      	ldr	r2, [pc, #28]	; (31d4 <tcv_clo_null+0x20>)
    31b8:	4603      	mov	r3, r0
    31ba:	6812      	ldr	r2, [r2, #0]
    31bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    31c0:	b132      	cbz	r2, 31d0 <tcv_clo_null+0x1c>
    31c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    31c6:	428c      	cmp	r4, r1
    31c8:	bf04      	itt	eq
    31ca:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    31ce:	2000      	moveq	r0, #0
    31d0:	bd10      	pop	{r4, pc}
    31d2:	bf00      	nop
    31d4:	200005fc 	strdcs	r0, [r0], -ip

000031d8 <tcv_rcv_null>:
    31d8:	4907      	ldr	r1, [pc, #28]	; (31f8 <tcv_rcv_null+0x20>)
    31da:	9a00      	ldr	r2, [sp, #0]
    31dc:	6809      	ldr	r1, [r1, #0]
    31de:	b909      	cbnz	r1, 31e4 <tcv_rcv_null+0xc>
    31e0:	2000      	movs	r0, #0
    31e2:	4770      	bx	lr
    31e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    31e8:	6019      	str	r1, [r3, #0]
    31ea:	3101      	adds	r1, #1
    31ec:	d0f8      	beq.n	31e0 <tcv_rcv_null+0x8>
    31ee:	2300      	movs	r3, #0
    31f0:	2002      	movs	r0, #2
    31f2:	8053      	strh	r3, [r2, #2]
    31f4:	8013      	strh	r3, [r2, #0]
    31f6:	4770      	bx	lr
    31f8:	200005fc 	strdcs	r0, [r0], -ip

000031fc <tcv_frm_null>:
    31fc:	2000      	movs	r0, #0
    31fe:	8048      	strh	r0, [r1, #2]
    3200:	8008      	strh	r0, [r1, #0]
    3202:	4770      	bx	lr

00003204 <tcv_out_null>:
    3204:	2004      	movs	r0, #4
    3206:	4770      	bx	lr

00003208 <tcv_xmt_null>:
    3208:	2001      	movs	r0, #1
    320a:	4770      	bx	lr

0000320c <tcv_ope_null>:
    320c:	b570      	push	{r4, r5, r6, lr}
    320e:	4c0f      	ldr	r4, [pc, #60]	; (324c <tcv_ope_null+0x40>)
    3210:	4605      	mov	r5, r0
    3212:	6823      	ldr	r3, [r4, #0]
    3214:	460e      	mov	r6, r1
    3216:	b94b      	cbnz	r3, 322c <tcv_ope_null+0x20>
    3218:	200c      	movs	r0, #12
    321a:	f7fe fd77 	bl	1d0c <__pi_malloc>
    321e:	6020      	str	r0, [r4, #0]
    3220:	b178      	cbz	r0, 3242 <tcv_ope_null+0x36>
    3222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3226:	e9c0 3300 	strd	r3, r3, [r0]
    322a:	6083      	str	r3, [r0, #8]
    322c:	6823      	ldr	r3, [r4, #0]
    322e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    3232:	3201      	adds	r2, #1
    3234:	bf06      	itte	eq
    3236:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    323a:	2000      	moveq	r0, #0
    323c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3240:	bd70      	pop	{r4, r5, r6, pc}
    3242:	2006      	movs	r0, #6
    3244:	4902      	ldr	r1, [pc, #8]	; (3250 <tcv_ope_null+0x44>)
    3246:	f7fd fdbd 	bl	dc4 <__pi_syserror>
    324a:	bf00      	nop
    324c:	200005fc 	strdcs	r0, [r0], -ip
    3250:	00005d48 	andeq	r5, r0, r8, asr #26

00003254 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    3254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3256:	4b18      	ldr	r3, [pc, #96]	; (32b8 <__outserial+0x64>)
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	689d      	ldr	r5, [r3, #8]
    325c:	b130      	cbz	r0, 326c <__outserial+0x18>
    325e:	280a      	cmp	r0, #10
    3260:	d00d      	beq.n	327e <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    3262:	b003      	add	sp, #12
    3264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3268:	f7fe bb48 	b.w	18fc <__pi_badstate>
	ptr = data;
    326c:	4b13      	ldr	r3, [pc, #76]	; (32bc <__outserial+0x68>)
    326e:	4c14      	ldr	r4, [pc, #80]	; (32c0 <__outserial+0x6c>)
    3270:	601d      	str	r5, [r3, #0]
	if (*ptr)
    3272:	782b      	ldrb	r3, [r5, #0]
    3274:	b1e3      	cbz	r3, 32b0 <__outserial+0x5c>
		len = strlen (ptr);
    3276:	4628      	mov	r0, r5
    3278:	f7fe fc46 	bl	1b08 <__pi_strlen>
    327c:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    327e:	4e0f      	ldr	r6, [pc, #60]	; (32bc <__outserial+0x68>)
    3280:	4f0f      	ldr	r7, [pc, #60]	; (32c0 <__outserial+0x6c>)
    3282:	883b      	ldrh	r3, [r7, #0]
    3284:	2201      	movs	r2, #1
    3286:	9300      	str	r3, [sp, #0]
    3288:	2100      	movs	r1, #0
    328a:	6833      	ldr	r3, [r6, #0]
    328c:	200a      	movs	r0, #10
    328e:	f7fe fc7b 	bl	1b88 <io>
	ptr += quant;
    3292:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    3294:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    3296:	4403      	add	r3, r0
	len -= quant;
    3298:	1a24      	subs	r4, r4, r0
	ptr += quant;
    329a:	6033      	str	r3, [r6, #0]
	len -= quant;
    329c:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    329e:	2c00      	cmp	r4, #0
    32a0:	d1ef      	bne.n	3282 <__outserial+0x2e>
		ufree (data);
    32a2:	4628      	mov	r0, r5
    32a4:	f7fe fce6 	bl	1c74 <__pi_free>
		finish;
    32a8:	4620      	mov	r0, r4
    32aa:	f7fe fd07 	bl	1cbc <kill>
    32ae:	e7e8      	b.n	3282 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    32b0:	786b      	ldrb	r3, [r5, #1]
    32b2:	3303      	adds	r3, #3
    32b4:	6023      	str	r3, [r4, #0]
    32b6:	e7e2      	b.n	327e <__outserial+0x2a>
    32b8:	200006d8 	ldrdcs	r0, [r0], -r8
    32bc:	20000604 	andcs	r0, r0, r4, lsl #12
    32c0:	20000600 	andcs	r0, r0, r0, lsl #12

000032c4 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    32c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32c6:	4d42      	ldr	r5, [pc, #264]	; (33d0 <__inserial+0x10c>)
    32c8:	682a      	ldr	r2, [r5, #0]
    32ca:	6894      	ldr	r4, [r2, #8]
    32cc:	2803      	cmp	r0, #3
    32ce:	d87a      	bhi.n	33c6 <__inserial+0x102>
    32d0:	e8df f000 	tbb	[pc, r0]
    32d4:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    32d8:	4b3e      	ldr	r3, [pc, #248]	; (33d4 <__inserial+0x110>)
    32da:	681b      	ldr	r3, [r3, #0]
    32dc:	b113      	cbz	r3, 32e4 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    32de:	2000      	movs	r0, #0
    32e0:	f7fe fcec 	bl	1cbc <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    32e4:	2040      	movs	r0, #64	; 0x40
    32e6:	f7fe fd11 	bl	1d0c <__pi_malloc>
    32ea:	4b3b      	ldr	r3, [pc, #236]	; (33d8 <__inserial+0x114>)
    32ec:	4604      	mov	r4, r0
    32ee:	6018      	str	r0, [r3, #0]
    32f0:	b918      	cbnz	r0, 32fa <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    32f2:	f7fe fd79 	bl	1de8 <__pi_waitmem>
		release;
    32f6:	f7fe f923 	bl	1540 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    32fa:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    32fc:	682b      	ldr	r3, [r5, #0]
    32fe:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    3300:	4b36      	ldr	r3, [pc, #216]	; (33dc <__inserial+0x118>)
    3302:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    3304:	2001      	movs	r0, #1
    3306:	2200      	movs	r2, #0
    3308:	4d33      	ldr	r5, [pc, #204]	; (33d8 <__inserial+0x114>)
    330a:	9000      	str	r0, [sp, #0]
    330c:	682b      	ldr	r3, [r5, #0]
    330e:	4611      	mov	r1, r2
    3310:	f7fe fc3a 	bl	1b88 <io>
	if (ptr == (char*) data) { // new line
    3314:	682b      	ldr	r3, [r5, #0]
    3316:	42a3      	cmp	r3, r4
    3318:	d10d      	bne.n	3336 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    331a:	7823      	ldrb	r3, [r4, #0]
    331c:	b923      	cbnz	r3, 3328 <__inserial+0x64>
			ptr++;
    331e:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    3320:	2002      	movs	r0, #2
			ptr++;
    3322:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    3324:	f7fe fb72 	bl	1a0c <proceed>
		}

		if (*ptr < 0x20)
    3328:	682b      	ldr	r3, [r5, #0]
    332a:	781b      	ldrb	r3, [r3, #0]
    332c:	2b1f      	cmp	r3, #31
    332e:	d802      	bhi.n	3336 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    3330:	2001      	movs	r0, #1
    3332:	f7fe fb6b 	bl	1a0c <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    3336:	682b      	ldr	r3, [r5, #0]
    3338:	781a      	ldrb	r2, [r3, #0]
    333a:	2a0a      	cmp	r2, #10
    333c:	d001      	beq.n	3342 <__inserial+0x7e>
    333e:	2a0d      	cmp	r2, #13
    3340:	d105      	bne.n	334e <__inserial+0x8a>
		*ptr = '\0';
    3342:	2000      	movs	r0, #0
    3344:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    3346:	4b23      	ldr	r3, [pc, #140]	; (33d4 <__inserial+0x110>)
    3348:	601c      	str	r4, [r3, #0]
		finish;
    334a:	f7fe fcb7 	bl	1cbc <kill>
	}

	if (len) {
    334e:	4923      	ldr	r1, [pc, #140]	; (33dc <__inserial+0x118>)
    3350:	680b      	ldr	r3, [r1, #0]
    3352:	b123      	cbz	r3, 335e <__inserial+0x9a>
		ptr++;
    3354:	682a      	ldr	r2, [r5, #0]
		len--;
    3356:	3b01      	subs	r3, #1
		ptr++;
    3358:	3201      	adds	r2, #1
    335a:	602a      	str	r2, [r5, #0]
		len--;
    335c:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    335e:	2001      	movs	r0, #1
    3360:	f7fe fb54 	bl	1a0c <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    3364:	2301      	movs	r3, #1
    3366:	2200      	movs	r2, #0
    3368:	4d1b      	ldr	r5, [pc, #108]	; (33d8 <__inserial+0x114>)
    336a:	9300      	str	r3, [sp, #0]
    336c:	4611      	mov	r1, r2
    336e:	682b      	ldr	r3, [r5, #0]
    3370:	2002      	movs	r0, #2
    3372:	f7fe fc09 	bl	1b88 <io>
	len -= 2;
    3376:	4819      	ldr	r0, [pc, #100]	; (33dc <__inserial+0x118>)
    3378:	6803      	ldr	r3, [r0, #0]
    337a:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    337c:	682b      	ldr	r3, [r5, #0]
    337e:	f813 1b01 	ldrb.w	r1, [r3], #1
    3382:	3101      	adds	r1, #1
		len = *ptr + 1;
    3384:	4291      	cmp	r1, r2
    3386:	bfd4      	ite	le
    3388:	6001      	strle	r1, [r0, #0]
    338a:	6002      	strgt	r2, [r0, #0]
	ptr++;
    338c:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    338e:	2200      	movs	r2, #0
    3390:	4f12      	ldr	r7, [pc, #72]	; (33dc <__inserial+0x118>)
    3392:	4d11      	ldr	r5, [pc, #68]	; (33d8 <__inserial+0x114>)
    3394:	883b      	ldrh	r3, [r7, #0]
    3396:	4611      	mov	r1, r2
    3398:	9300      	str	r3, [sp, #0]
    339a:	682b      	ldr	r3, [r5, #0]
    339c:	2003      	movs	r0, #3
    339e:	f7fe fbf3 	bl	1b88 <io>
	len -= quant;
    33a2:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    33a4:	4606      	mov	r6, r0
	len -= quant;
    33a6:	1a18      	subs	r0, r3, r0
    33a8:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    33aa:	b918      	cbnz	r0, 33b4 <__inserial+0xf0>
		__inpline = (char*)data;
    33ac:	4b09      	ldr	r3, [pc, #36]	; (33d4 <__inserial+0x110>)
    33ae:	601c      	str	r4, [r3, #0]
		finish;
    33b0:	f7fe fc84 	bl	1cbc <kill>
	}
	ptr += quant;
    33b4:	6828      	ldr	r0, [r5, #0]
    33b6:	4430      	add	r0, r6
    33b8:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    33ba:	2003      	movs	r0, #3

endstrand
    33bc:	b003      	add	sp, #12
    33be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    33c2:	f7fe bb23 	b.w	1a0c <proceed>
endstrand
    33c6:	b003      	add	sp, #12
    33c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    33cc:	f7fe ba96 	b.w	18fc <__pi_badstate>
    33d0:	200006d8 	ldrdcs	r0, [r0], -r8
    33d4:	20000608 	andcs	r0, r0, r8, lsl #12
    33d8:	20000610 	andcs	r0, r0, r0, lsl r6
    33dc:	2000060c 	andcs	r0, r0, ip, lsl #12

000033e0 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    33e0:	f8dc 2000 	ldr.w	r2, [ip]
    33e4:	b132      	cbz	r2, 33f4 <outc.5724+0x14>
    33e6:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    33ea:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    33ee:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    33f0:	bf88      	it	hi
    33f2:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    33f4:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    33f8:	3301      	adds	r3, #1
    33fa:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    33fe:	4770      	bx	lr

00003400 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3404:	461c      	mov	r4, r3
    3406:	ab0c      	add	r3, sp, #48	; 0x30
    3408:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    340a:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    340c:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    340e:	4f86      	ldr	r7, [pc, #536]	; (3628 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3410:	9001      	str	r0, [sp, #4]
    3412:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    3416:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    341a:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    341e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    3422:	d118      	bne.n	3456 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    3424:	f892 9001 	ldrb.w	r9, [r2, #1]
    3428:	1c95      	adds	r5, r2, #2
				outc ('\\');
    342a:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    342e:	f1b9 0f00 	cmp.w	r9, #0
    3432:	d10b      	bne.n	344c <__pi_vfparse+0x4c>
				outc ('\\');
    3434:	205c      	movs	r0, #92	; 0x5c
    3436:	f7ff ffd3 	bl	33e0 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    343a:	4648      	mov	r0, r9
    343c:	f10d 0c04 	add.w	ip, sp, #4
    3440:	f7ff ffce 	bl	33e0 <outc.5724>
			if (c == '\0')
    3444:	f1b9 0f00 	cmp.w	r9, #0
    3448:	d103      	bne.n	3452 <__pi_vfparse+0x52>
    344a:	e027      	b.n	349c <__pi_vfparse+0x9c>
			outc (c);
    344c:	4648      	mov	r0, r9
				outc (val);
    344e:	f7ff ffc7 	bl	33e0 <outc.5724>
				val = (word) va_arg (ap, aword);
    3452:	462a      	mov	r2, r5
    3454:	e7e1      	b.n	341a <__pi_vfparse+0x1a>
		if (c == '%') {
    3456:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    345a:	f040 80e2 	bne.w	3622 <__pi_vfparse+0x222>
			c = *fm++;
    345e:	f892 8001 	ldrb.w	r8, [r2, #1]
    3462:	1c95      	adds	r5, r2, #2
			switch (c) {
    3464:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    3468:	f000 80cd 	beq.w	3606 <__pi_vfparse+0x206>
    346c:	d81b      	bhi.n	34a6 <__pi_vfparse+0xa6>
    346e:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    3472:	d033      	beq.n	34dc <__pi_vfparse+0xdc>
    3474:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3478:	d067      	beq.n	354a <__pi_vfparse+0x14a>
    347a:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    347e:	f000 80bc 	beq.w	35fa <__pi_vfparse+0x1fa>
				outc ('%');
    3482:	2025      	movs	r0, #37	; 0x25
    3484:	f10d 0c04 	add.w	ip, sp, #4
    3488:	f7ff ffaa 	bl	33e0 <outc.5724>
				outc (c);
    348c:	4640      	mov	r0, r8
    348e:	f10d 0c04 	add.w	ip, sp, #4
    3492:	f7ff ffa5 	bl	33e0 <outc.5724>
				if (c == '\0')
    3496:	f1b8 0f00 	cmp.w	r8, #0
    349a:	d1da      	bne.n	3452 <__pi_vfparse+0x52>
Ret:
				return d;
    349c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    34a0:	b004      	add	sp, #16
    34a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    34a6:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    34aa:	d017      	beq.n	34dc <__pi_vfparse+0xdc>
    34ac:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    34b0:	d1e7      	bne.n	3482 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    34b2:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    34b6:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    34ba:	fa1f f983 	uxth.w	r9, r3
    34be:	fa49 f308 	asr.w	r3, r9, r8
    34c2:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    34c6:	5cf8      	ldrb	r0, [r7, r3]
    34c8:	f10d 0c04 	add.w	ip, sp, #4
    34cc:	f7ff ff88 	bl	33e0 <outc.5724>
					if (i == 0)
    34d0:	f1b8 0f00 	cmp.w	r8, #0
    34d4:	d0bd      	beq.n	3452 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    34d6:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    34da:	e7f0      	b.n	34be <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    34dc:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    34e0:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    34e4:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    34e8:	d10a      	bne.n	3500 <__pi_vfparse+0x100>
    34ea:	041b      	lsls	r3, r3, #16
    34ec:	d508      	bpl.n	3500 <__pi_vfparse+0x100>
					outc ('-');
    34ee:	202d      	movs	r0, #45	; 0x2d
    34f0:	f10d 0c04 	add.w	ip, sp, #4
    34f4:	f7ff ff74 	bl	33e0 <outc.5724>
					val = (~val) + 1;
    34f8:	f1c9 0900 	rsb	r9, r9, #0
    34fc:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    3500:	2305      	movs	r3, #5
				enci (10000);
    3502:	f242 7810 	movw	r8, #10000	; 0x2710
    3506:	fbb9 f0f8 	udiv	r0, r9, r8
    350a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    350e:	d103      	bne.n	3518 <__pi_vfparse+0x118>
    3510:	3b01      	subs	r3, #1
    3512:	d117      	bne.n	3544 <__pi_vfparse+0x144>
    3514:	f04f 0801 	mov.w	r8, #1
    3518:	fa1f fa80 	uxth.w	sl, r0
    351c:	f10d 0c04 	add.w	ip, sp, #4
    3520:	3030      	adds	r0, #48	; 0x30
    3522:	f7ff ff5d 	bl	33e0 <outc.5724>
    3526:	fbb8 f3f6 	udiv	r3, r8, r6
    352a:	fb08 991a 	mls	r9, r8, sl, r9
    352e:	f1b8 0f09 	cmp.w	r8, #9
    3532:	fa1f f989 	uxth.w	r9, r9
    3536:	b29b      	uxth	r3, r3
    3538:	d98b      	bls.n	3452 <__pi_vfparse+0x52>
    353a:	fbb9 f0f3 	udiv	r0, r9, r3
    353e:	4698      	mov	r8, r3
    3540:	b2c0      	uxtb	r0, r0
    3542:	e7e9      	b.n	3518 <__pi_vfparse+0x118>
    3544:	fbb8 f8f6 	udiv	r8, r8, r6
    3548:	e7dd      	b.n	3506 <__pi_vfparse+0x106>
				c = *fm;
    354a:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    354c:	2b64      	cmp	r3, #100	; 0x64
    354e:	d001      	beq.n	3554 <__pi_vfparse+0x154>
    3550:	2b75      	cmp	r3, #117	; 0x75
    3552:	d132      	bne.n	35ba <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    3554:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    3556:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    355a:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    355e:	d109      	bne.n	3574 <__pi_vfparse+0x174>
    3560:	f1ba 0f00 	cmp.w	sl, #0
    3564:	da06      	bge.n	3574 <__pi_vfparse+0x174>
						outc ('-');
    3566:	202d      	movs	r0, #45	; 0x2d
    3568:	f10d 0c04 	add.w	ip, sp, #4
    356c:	f7ff ff38 	bl	33e0 <outc.5724>
						val = (~val) + 1;
    3570:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    3574:	230a      	movs	r3, #10
					enci (1000000000UL);
    3576:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 362c <__pi_vfparse+0x22c>
    357a:	fbba f9f8 	udiv	r9, sl, r8
    357e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    3582:	d103      	bne.n	358c <__pi_vfparse+0x18c>
    3584:	3b01      	subs	r3, #1
    3586:	d115      	bne.n	35b4 <__pi_vfparse+0x1b4>
    3588:	f04f 0801 	mov.w	r8, #1
    358c:	f10d 0c04 	add.w	ip, sp, #4
    3590:	f109 0030 	add.w	r0, r9, #48	; 0x30
    3594:	f7ff ff24 	bl	33e0 <outc.5724>
    3598:	f1b8 0f09 	cmp.w	r8, #9
    359c:	fbb8 f3f6 	udiv	r3, r8, r6
    35a0:	fb08 aa19 	mls	sl, r8, r9, sl
    35a4:	f67f af55 	bls.w	3452 <__pi_vfparse+0x52>
    35a8:	fbba f9f3 	udiv	r9, sl, r3
    35ac:	4698      	mov	r8, r3
    35ae:	fa5f f989 	uxtb.w	r9, r9
    35b2:	e7eb      	b.n	358c <__pi_vfparse+0x18c>
    35b4:	fbb8 f8f6 	udiv	r8, r8, r6
    35b8:	e7df      	b.n	357a <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    35ba:	2b78      	cmp	r3, #120	; 0x78
    35bc:	d114      	bne.n	35e8 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    35be:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    35c2:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    35c6:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    35c8:	fa29 f308 	lsr.w	r3, r9, r8
    35cc:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    35d0:	5cf8      	ldrb	r0, [r7, r3]
    35d2:	f10d 0c04 	add.w	ip, sp, #4
    35d6:	f7ff ff03 	bl	33e0 <outc.5724>
						if (i == 0)
    35da:	f1b8 0f00 	cmp.w	r8, #0
    35de:	f43f af38 	beq.w	3452 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    35e2:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    35e6:	e7ef      	b.n	35c8 <__pi_vfparse+0x1c8>
					outc ('%');
    35e8:	4648      	mov	r0, r9
    35ea:	f10d 0c04 	add.w	ip, sp, #4
    35ee:	f7ff fef7 	bl	33e0 <outc.5724>
					outc ('l');
    35f2:	4640      	mov	r0, r8
    35f4:	f10d 0c04 	add.w	ip, sp, #4
    35f8:	e729      	b.n	344e <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    35fa:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    35fe:	f10d 0c04 	add.w	ip, sp, #4
    3602:	b280      	uxth	r0, r0
    3604:	e723      	b.n	344e <__pi_vfparse+0x4e>
				while (*st != '\0') {
    3606:	f854 3b04 	ldr.w	r3, [r4], #4
    360a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    360e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    3612:	2800      	cmp	r0, #0
    3614:	f43f af1d 	beq.w	3452 <__pi_vfparse+0x52>
					outc (*st);
    3618:	f10d 0c04 	add.w	ip, sp, #4
    361c:	f7ff fee0 	bl	33e0 <outc.5724>
					st++;
    3620:	e7f5      	b.n	360e <__pi_vfparse+0x20e>
		c = *fm++;
    3622:	1c55      	adds	r5, r2, #1
    3624:	e709      	b.n	343a <__pi_vfparse+0x3a>
    3626:	bf00      	nop
    3628:	000052d1 	ldrdeq	r5, [r0], -r1
    362c:	3b9aca00 	blcc	fe6b5e34 <_estack+0xde6b0e34>

00003630 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    3630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3634:	460e      	mov	r6, r1
    3636:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    3638:	4604      	mov	r4, r0
    363a:	b140      	cbz	r0, 364e <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    363c:	4613      	mov	r3, r2
    363e:	460a      	mov	r2, r1
    3640:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3644:	f7ff fedc 	bl	3400 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    3648:	4620      	mov	r0, r4
    364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    364e:	4608      	mov	r0, r1
    3650:	f7fe fa5a 	bl	1b08 <__pi_strlen>
    3654:	f100 0511 	add.w	r5, r0, #17
    3658:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    365a:	4628      	mov	r0, r5
    365c:	f7fe fb56 	bl	1d0c <__pi_malloc>
    3660:	4604      	mov	r4, r0
    3662:	2800      	cmp	r0, #0
    3664:	d0f0      	beq.n	3648 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3666:	463b      	mov	r3, r7
    3668:	4632      	mov	r2, r6
    366a:	4629      	mov	r1, r5
    366c:	f7ff fec8 	bl	3400 <__pi_vfparse>
    3670:	4285      	cmp	r5, r0
    3672:	4680      	mov	r8, r0
    3674:	d2e8      	bcs.n	3648 <vform+0x18>
		ufree (res);
    3676:	4620      	mov	r0, r4
    3678:	f7fe fafc 	bl	1c74 <__pi_free>
		goto Again;
    367c:	4645      	mov	r5, r8
    367e:	e7ec      	b.n	365a <vform+0x2a>

00003680 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    3680:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    3682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    3686:	2800      	cmp	r0, #0
    3688:	f000 81b5 	beq.w	39f6 <vscan+0x376>
    368c:	2900      	cmp	r1, #0
    368e:	f000 81b4 	beq.w	39fa <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    3692:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    3694:	270a      	movs	r7, #10
    3696:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    3698:	f8df c370 	ldr.w	ip, [pc, #880]	; 3a0c <vscan+0x38c>
    369c:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    369e:	f811 0b01 	ldrb.w	r0, [r1], #1
    36a2:	b170      	cbz	r0, 36c2 <vscan+0x42>
		if (*fmt++ != '%')
    36a4:	2825      	cmp	r0, #37	; 0x25
    36a6:	d1f9      	bne.n	369c <vscan+0x1c>
		switch (*fmt++) {
    36a8:	7870      	ldrb	r0, [r6, #1]
    36aa:	1cb1      	adds	r1, r6, #2
    36ac:	286c      	cmp	r0, #108	; 0x6c
    36ae:	f000 80e1 	beq.w	3874 <vscan+0x1f4>
    36b2:	d809      	bhi.n	36c8 <vscan+0x48>
    36b4:	2863      	cmp	r0, #99	; 0x63
    36b6:	f000 8184 	beq.w	39c2 <vscan+0x342>
    36ba:	2864      	cmp	r0, #100	; 0x64
    36bc:	d043      	beq.n	3746 <vscan+0xc6>
    36be:	2800      	cmp	r0, #0
    36c0:	d1ec      	bne.n	369c <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    36c2:	4620      	mov	r0, r4
    36c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    36c8:	2875      	cmp	r0, #117	; 0x75
    36ca:	d074      	beq.n	37b6 <vscan+0x136>
    36cc:	2878      	cmp	r0, #120	; 0x78
    36ce:	f000 8098 	beq.w	3802 <vscan+0x182>
    36d2:	2873      	cmp	r0, #115	; 0x73
    36d4:	d1e2      	bne.n	369c <vscan+0x1c>
			while (isspace (*buf)) buf++;
    36d6:	7818      	ldrb	r0, [r3, #0]
    36d8:	461e      	mov	r6, r3
    36da:	f1a0 0e09 	sub.w	lr, r0, #9
    36de:	fa5f fe8e 	uxtb.w	lr, lr
    36e2:	f1be 0f17 	cmp.w	lr, #23
    36e6:	4698      	mov	r8, r3
    36e8:	f103 0301 	add.w	r3, r3, #1
    36ec:	f240 8173 	bls.w	39d6 <vscan+0x356>
			if (*buf == '\0')
    36f0:	2800      	cmp	r0, #0
    36f2:	d0e6      	beq.n	36c2 <vscan+0x42>
			if (*buf != ',') {
    36f4:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    36f6:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    36fa:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    36fe:	d00e      	beq.n	371e <vscan+0x9e>
    3700:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    3702:	f818 3b01 	ldrb.w	r3, [r8], #1
    3706:	f1a3 0009 	sub.w	r0, r3, #9
    370a:	2801      	cmp	r0, #1
    370c:	d907      	bls.n	371e <vscan+0x9e>
    370e:	2b0d      	cmp	r3, #13
    3710:	d005      	beq.n	371e <vscan+0x9e>
    3712:	2b2c      	cmp	r3, #44	; 0x2c
    3714:	d003      	beq.n	371e <vscan+0x9e>
    3716:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    371a:	f040 8163 	bne.w	39e4 <vscan+0x364>
			while (isspace (*buf)) buf++;
    371e:	f896 8000 	ldrb.w	r8, [r6]
    3722:	4633      	mov	r3, r6
    3724:	f1a8 0009 	sub.w	r0, r8, #9
    3728:	b2c0      	uxtb	r0, r0
    372a:	2817      	cmp	r0, #23
    372c:	f106 0601 	add.w	r6, r6, #1
    3730:	f240 815b 	bls.w	39ea <vscan+0x36a>
			if (*buf == ',') buf++;
    3734:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    3738:	bf08      	it	eq
    373a:	4633      	moveq	r3, r6
			*sap = '\0';
    373c:	f88e 5000 	strb.w	r5, [lr]
			break;
    3740:	e7ac      	b.n	369c <vscan+0x1c>
		    case 'd': scani (word); break;
    3742:	2e00      	cmp	r6, #0
    3744:	d0bd      	beq.n	36c2 <vscan+0x42>
    3746:	469e      	mov	lr, r3
    3748:	f813 6b01 	ldrb.w	r6, [r3], #1
    374c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3750:	2809      	cmp	r0, #9
    3752:	d923      	bls.n	379c <vscan+0x11c>
    3754:	2e2d      	cmp	r6, #45	; 0x2d
    3756:	d001      	beq.n	375c <vscan+0xdc>
    3758:	2e2b      	cmp	r6, #43	; 0x2b
    375a:	d1f2      	bne.n	3742 <vscan+0xc2>
    375c:	7818      	ldrb	r0, [r3, #0]
    375e:	469e      	mov	lr, r3
    3760:	3830      	subs	r0, #48	; 0x30
    3762:	2809      	cmp	r0, #9
    3764:	d8ef      	bhi.n	3746 <vscan+0xc6>
    3766:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    376a:	f1d9 0800 	rsbs	r8, r9, #0
    376e:	eb48 0809 	adc.w	r8, r8, r9
    3772:	f852 6b04 	ldr.w	r6, [r2], #4
    3776:	3401      	adds	r4, #1
    3778:	8035      	strh	r5, [r6, #0]
    377a:	f89e 0000 	ldrb.w	r0, [lr]
    377e:	4673      	mov	r3, lr
    3780:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    3784:	f1b9 0f09 	cmp.w	r9, #9
    3788:	f10e 0e01 	add.w	lr, lr, #1
    378c:	d909      	bls.n	37a2 <vscan+0x122>
    378e:	f1b8 0f00 	cmp.w	r8, #0
    3792:	d183      	bne.n	369c <vscan+0x1c>
    3794:	8830      	ldrh	r0, [r6, #0]
    3796:	4240      	negs	r0, r0
    3798:	8030      	strh	r0, [r6, #0]
    379a:	e77f      	b.n	369c <vscan+0x1c>
    379c:	f04f 0800 	mov.w	r8, #0
    37a0:	e7e7      	b.n	3772 <vscan+0xf2>
    37a2:	8833      	ldrh	r3, [r6, #0]
    37a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37a8:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    37ac:	3030      	adds	r0, #48	; 0x30
    37ae:	8030      	strh	r0, [r6, #0]
    37b0:	e7e3      	b.n	377a <vscan+0xfa>
		    case 'u': scanu (word); break;
    37b2:	2800      	cmp	r0, #0
    37b4:	d085      	beq.n	36c2 <vscan+0x42>
    37b6:	7818      	ldrb	r0, [r3, #0]
    37b8:	461e      	mov	r6, r3
    37ba:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    37be:	f1be 0f09 	cmp.w	lr, #9
    37c2:	f103 0301 	add.w	r3, r3, #1
    37c6:	d8f4      	bhi.n	37b2 <vscan+0x132>
    37c8:	f852 eb04 	ldr.w	lr, [r2], #4
    37cc:	3401      	adds	r4, #1
    37ce:	f8ae 5000 	strh.w	r5, [lr]
    37d2:	7830      	ldrb	r0, [r6, #0]
    37d4:	4633      	mov	r3, r6
    37d6:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    37da:	f1b8 0f09 	cmp.w	r8, #9
    37de:	f106 0601 	add.w	r6, r6, #1
    37e2:	f63f af5b 	bhi.w	369c <vscan+0x1c>
    37e6:	f8be 3000 	ldrh.w	r3, [lr]
    37ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    37f2:	3830      	subs	r0, #48	; 0x30
    37f4:	f8ae 0000 	strh.w	r0, [lr]
    37f8:	e7eb      	b.n	37d2 <vscan+0x152>
		    case 'x': scanx (word); break;
    37fa:	f1be 0f00 	cmp.w	lr, #0
    37fe:	f43f af60 	beq.w	36c2 <vscan+0x42>
    3802:	f893 e000 	ldrb.w	lr, [r3]
    3806:	461e      	mov	r6, r3
    3808:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    380c:	2809      	cmp	r0, #9
    380e:	f103 0301 	add.w	r3, r3, #1
    3812:	d904      	bls.n	381e <vscan+0x19e>
    3814:	f02e 0020 	bic.w	r0, lr, #32
    3818:	3841      	subs	r0, #65	; 0x41
    381a:	2805      	cmp	r0, #5
    381c:	d8ed      	bhi.n	37fa <vscan+0x17a>
    381e:	f852 eb04 	ldr.w	lr, [r2], #4
    3822:	3401      	adds	r4, #1
    3824:	f8ae 5000 	strh.w	r5, [lr]
    3828:	f106 0805 	add.w	r8, r6, #5
    382c:	f896 9000 	ldrb.w	r9, [r6]
    3830:	4633      	mov	r3, r6
    3832:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    3836:	b2c0      	uxtb	r0, r0
    3838:	2809      	cmp	r0, #9
    383a:	f106 0601 	add.w	r6, r6, #1
    383e:	f240 80de 	bls.w	39fe <vscan+0x37e>
    3842:	f029 0020 	bic.w	r0, r9, #32
    3846:	3841      	subs	r0, #65	; 0x41
    3848:	2805      	cmp	r0, #5
    384a:	f63f af27 	bhi.w	369c <vscan+0x1c>
    384e:	4546      	cmp	r6, r8
    3850:	f43f af24 	beq.w	369c <vscan+0x1c>
    3854:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    3858:	2b05      	cmp	r3, #5
    385a:	bf94      	ite	ls
    385c:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3860:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    3864:	b2c0      	uxtb	r0, r0
    3866:	f8be 3000 	ldrh.w	r3, [lr]
    386a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    386e:	f8ae 0000 	strh.w	r0, [lr]
    3872:	e7db      	b.n	382c <vscan+0x1ac>
			switch (*fmt++) {
    3874:	78b0      	ldrb	r0, [r6, #2]
    3876:	1cf1      	adds	r1, r6, #3
    3878:	2875      	cmp	r0, #117	; 0x75
    387a:	d07d      	beq.n	3978 <vscan+0x2f8>
    387c:	d831      	bhi.n	38e2 <vscan+0x262>
    387e:	2800      	cmp	r0, #0
    3880:	f43f af1f 	beq.w	36c2 <vscan+0x42>
    3884:	2864      	cmp	r0, #100	; 0x64
    3886:	f47f af09 	bne.w	369c <vscan+0x1c>
    388a:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    388c:	f813 6b01 	ldrb.w	r6, [r3], #1
    3890:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3894:	2809      	cmp	r0, #9
    3896:	d962      	bls.n	395e <vscan+0x2de>
    3898:	2e2d      	cmp	r6, #45	; 0x2d
    389a:	d001      	beq.n	38a0 <vscan+0x220>
    389c:	2e2b      	cmp	r6, #43	; 0x2b
    389e:	d15b      	bne.n	3958 <vscan+0x2d8>
    38a0:	7818      	ldrb	r0, [r3, #0]
    38a2:	4698      	mov	r8, r3
    38a4:	3830      	subs	r0, #48	; 0x30
    38a6:	2809      	cmp	r0, #9
    38a8:	d8ef      	bhi.n	388a <vscan+0x20a>
    38aa:	3e2d      	subs	r6, #45	; 0x2d
    38ac:	4270      	negs	r0, r6
    38ae:	4170      	adcs	r0, r6
    38b0:	f852 eb04 	ldr.w	lr, [r2], #4
    38b4:	3401      	adds	r4, #1
    38b6:	f8ce 5000 	str.w	r5, [lr]
    38ba:	f898 6000 	ldrb.w	r6, [r8]
    38be:	4643      	mov	r3, r8
    38c0:	3e30      	subs	r6, #48	; 0x30
    38c2:	fa5f f986 	uxtb.w	r9, r6
    38c6:	f1b9 0f09 	cmp.w	r9, #9
    38ca:	f108 0801 	add.w	r8, r8, #1
    38ce:	d948      	bls.n	3962 <vscan+0x2e2>
    38d0:	2800      	cmp	r0, #0
    38d2:	f47f aee3 	bne.w	369c <vscan+0x1c>
    38d6:	f8de 0000 	ldr.w	r0, [lr]
    38da:	4240      	negs	r0, r0
    38dc:	f8ce 0000 	str.w	r0, [lr]
    38e0:	e6dc      	b.n	369c <vscan+0x1c>
    38e2:	2878      	cmp	r0, #120	; 0x78
    38e4:	f47f aeda 	bne.w	369c <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    38e8:	f893 e000 	ldrb.w	lr, [r3]
    38ec:	461e      	mov	r6, r3
    38ee:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    38f2:	2809      	cmp	r0, #9
    38f4:	f103 0301 	add.w	r3, r3, #1
    38f8:	d904      	bls.n	3904 <vscan+0x284>
    38fa:	f02e 0020 	bic.w	r0, lr, #32
    38fe:	3841      	subs	r0, #65	; 0x41
    3900:	2805      	cmp	r0, #5
    3902:	d85a      	bhi.n	39ba <vscan+0x33a>
    3904:	f852 eb04 	ldr.w	lr, [r2], #4
    3908:	3401      	adds	r4, #1
    390a:	f8ce 5000 	str.w	r5, [lr]
    390e:	f106 0809 	add.w	r8, r6, #9
    3912:	f896 9000 	ldrb.w	r9, [r6]
    3916:	4633      	mov	r3, r6
    3918:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    391c:	b2c0      	uxtb	r0, r0
    391e:	2809      	cmp	r0, #9
    3920:	f106 0601 	add.w	r6, r6, #1
    3924:	d96f      	bls.n	3a06 <vscan+0x386>
    3926:	f029 0020 	bic.w	r0, r9, #32
    392a:	3841      	subs	r0, #65	; 0x41
    392c:	2805      	cmp	r0, #5
    392e:	f63f aeb5 	bhi.w	369c <vscan+0x1c>
    3932:	4546      	cmp	r6, r8
    3934:	f43f aeb2 	beq.w	369c <vscan+0x1c>
    3938:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    393c:	2b05      	cmp	r3, #5
    393e:	bf94      	ite	ls
    3940:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3944:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    3948:	b2c0      	uxtb	r0, r0
    394a:	f8de 3000 	ldr.w	r3, [lr]
    394e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    3952:	f8ce 0000 	str.w	r0, [lr]
    3956:	e7dc      	b.n	3912 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    3958:	2e00      	cmp	r6, #0
    395a:	d196      	bne.n	388a <vscan+0x20a>
    395c:	e6b1      	b.n	36c2 <vscan+0x42>
    395e:	2000      	movs	r0, #0
    3960:	e7a6      	b.n	38b0 <vscan+0x230>
    3962:	f8de 3000 	ldr.w	r3, [lr]
    3966:	b2b6      	uxth	r6, r6
    3968:	437b      	muls	r3, r7
    396a:	1b9e      	subs	r6, r3, r6
    396c:	f8ce 6000 	str.w	r6, [lr]
    3970:	e7a3      	b.n	38ba <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    3972:	2800      	cmp	r0, #0
    3974:	f43f aea5 	beq.w	36c2 <vscan+0x42>
    3978:	7818      	ldrb	r0, [r3, #0]
    397a:	461e      	mov	r6, r3
    397c:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3980:	f1be 0f09 	cmp.w	lr, #9
    3984:	f103 0301 	add.w	r3, r3, #1
    3988:	d8f3      	bhi.n	3972 <vscan+0x2f2>
    398a:	f852 eb04 	ldr.w	lr, [r2], #4
    398e:	3401      	adds	r4, #1
    3990:	f8ce 5000 	str.w	r5, [lr]
    3994:	7830      	ldrb	r0, [r6, #0]
    3996:	4633      	mov	r3, r6
    3998:	3830      	subs	r0, #48	; 0x30
    399a:	fa5f f880 	uxtb.w	r8, r0
    399e:	f1b8 0f09 	cmp.w	r8, #9
    39a2:	f106 0601 	add.w	r6, r6, #1
    39a6:	f63f ae79 	bhi.w	369c <vscan+0x1c>
    39aa:	f8de 3000 	ldr.w	r3, [lr]
    39ae:	b280      	uxth	r0, r0
    39b0:	fb07 0003 	mla	r0, r7, r3, r0
    39b4:	f8ce 0000 	str.w	r0, [lr]
    39b8:	e7ec      	b.n	3994 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    39ba:	f1be 0f00 	cmp.w	lr, #0
    39be:	d193      	bne.n	38e8 <vscan+0x268>
    39c0:	e67f      	b.n	36c2 <vscan+0x42>
			if ((c = *buf++) == '\0')
    39c2:	f813 0b01 	ldrb.w	r0, [r3], #1
    39c6:	2800      	cmp	r0, #0
    39c8:	f43f ae7b 	beq.w	36c2 <vscan+0x42>
			sap = va_arg (ap, char*);
    39cc:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    39d0:	3401      	adds	r4, #1
			*sap = c;
    39d2:	7030      	strb	r0, [r6, #0]
			break;
    39d4:	e662      	b.n	369c <vscan+0x1c>
			while (isspace (*buf)) buf++;
    39d6:	fa2c fe0e 	lsr.w	lr, ip, lr
    39da:	f01e 0f01 	tst.w	lr, #1
    39de:	f47f ae7a 	bne.w	36d6 <vscan+0x56>
    39e2:	e687      	b.n	36f4 <vscan+0x74>
						*sap++ = *buf++;
    39e4:	f80e 3b01 	strb.w	r3, [lr], #1
    39e8:	e68a      	b.n	3700 <vscan+0x80>
			while (isspace (*buf)) buf++;
    39ea:	fa2c f000 	lsr.w	r0, ip, r0
    39ee:	07c0      	lsls	r0, r0, #31
    39f0:	f53f ae95 	bmi.w	371e <vscan+0x9e>
    39f4:	e6a2      	b.n	373c <vscan+0xbc>
		return 0;
    39f6:	4604      	mov	r4, r0
    39f8:	e663      	b.n	36c2 <vscan+0x42>
    39fa:	460c      	mov	r4, r1
    39fc:	e661      	b.n	36c2 <vscan+0x42>
		    case 'x': scanx (word); break;
    39fe:	4546      	cmp	r6, r8
    3a00:	f47f af31 	bne.w	3866 <vscan+0x1e6>
    3a04:	e64a      	b.n	369c <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3a06:	4546      	cmp	r6, r8
    3a08:	d19f      	bne.n	394a <vscan+0x2ca>
    3a0a:	e647      	b.n	369c <vscan+0x1c>
    3a0c:	00800013 	addeq	r0, r0, r3, lsl r0

00003a10 <SafeHapiVoid>:
    3a10:	b570      	push	{r4, r5, r6, lr}
    3a12:	4606      	mov	r6, r0
    3a14:	f000 f844 	bl	3aa0 <NOROM_CPUcpsid>
    3a18:	4605      	mov	r5, r0
    3a1a:	4c06      	ldr	r4, [pc, #24]	; (3a34 <SafeHapiVoid+0x24>)
    3a1c:	6823      	ldr	r3, [r4, #0]
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d0fb      	beq.n	3a1a <SafeHapiVoid+0xa>
    3a22:	47b0      	blx	r6
    3a24:	2301      	movs	r3, #1
    3a26:	6023      	str	r3, [r4, #0]
    3a28:	b91d      	cbnz	r5, 3a32 <SafeHapiVoid+0x22>
    3a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a2e:	f000 b83b 	b.w	3aa8 <NOROM_CPUcpsie>
    3a32:	bd70      	pop	{r4, r5, r6, pc}
    3a34:	400c8000 	andmi	r8, ip, r0

00003a38 <NOROM_AONBatMonTemperatureGetDegC>:
    3a38:	4b08      	ldr	r3, [pc, #32]	; (3a5c <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    3a3a:	6818      	ldr	r0, [r3, #0]
    3a3c:	4b08      	ldr	r3, [pc, #32]	; (3a60 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    3a3e:	7819      	ldrb	r1, [r3, #0]
    3a40:	4b08      	ldr	r3, [pc, #32]	; (3a64 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    3a42:	681a      	ldr	r2, [r3, #0]
    3a44:	f340 0310 	sbfx	r3, r0, #0, #17
    3a48:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3a4c:	b248      	sxtb	r0, r1
    3a4e:	4350      	muls	r0, r2
    3a50:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    3a54:	3080      	adds	r0, #128	; 0x80
    3a56:	1200      	asrs	r0, r0, #8
    3a58:	4770      	bx	lr
    3a5a:	bf00      	nop
    3a5c:	40095030 	andmi	r5, r9, r0, lsr r0
    3a60:	5000130c 	andpl	r1, r0, ip, lsl #6
    3a64:	40095028 	andmi	r5, r9, r8, lsr #32

00003a68 <NOROM_AONRTCCurrentCompareValueGet>:
    3a68:	4a05      	ldr	r2, [pc, #20]	; (3a80 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    3a6a:	4906      	ldr	r1, [pc, #24]	; (3a84 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3a6c:	6813      	ldr	r3, [r2, #0]
    3a6e:	6808      	ldr	r0, [r1, #0]
    3a70:	6812      	ldr	r2, [r2, #0]
    3a72:	4293      	cmp	r3, r2
    3a74:	d1f8      	bne.n	3a68 <NOROM_AONRTCCurrentCompareValueGet>
    3a76:	041b      	lsls	r3, r3, #16
    3a78:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3a7c:	4770      	bx	lr
    3a7e:	bf00      	nop
    3a80:	40092008 	andmi	r2, r9, r8
    3a84:	4009200c 	andmi	r2, r9, ip

00003a88 <NOROM_AONRTCCurrent64BitValueGet>:
    3a88:	4b03      	ldr	r3, [pc, #12]	; (3a98 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    3a8a:	4904      	ldr	r1, [pc, #16]	; (3a9c <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3a8c:	681a      	ldr	r2, [r3, #0]
    3a8e:	6808      	ldr	r0, [r1, #0]
    3a90:	6819      	ldr	r1, [r3, #0]
    3a92:	4291      	cmp	r1, r2
    3a94:	d1f8      	bne.n	3a88 <NOROM_AONRTCCurrent64BitValueGet>
    3a96:	4770      	bx	lr
    3a98:	40092008 	andmi	r2, r9, r8
    3a9c:	4009200c 	andmi	r2, r9, ip

00003aa0 <NOROM_CPUcpsid>:
    3aa0:	f3ef 8010 	mrs	r0, PRIMASK
    3aa4:	b672      	cpsid	i
    3aa6:	4770      	bx	lr

00003aa8 <NOROM_CPUcpsie>:
    3aa8:	f3ef 8010 	mrs	r0, PRIMASK
    3aac:	b662      	cpsie	i
    3aae:	4770      	bx	lr

00003ab0 <NOROM_OSCClockSourceSet>:
    3ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3ab2:	460c      	mov	r4, r1
    3ab4:	07c1      	lsls	r1, r0, #31
    3ab6:	4605      	mov	r5, r0
    3ab8:	d509      	bpl.n	3ace <NOROM_OSCClockSourceSet+0x1e>
    3aba:	4b12      	ldr	r3, [pc, #72]	; (3b04 <NOROM_OSCClockSourceSet+0x54>)
    3abc:	b2a2      	uxth	r2, r4
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	2100      	movs	r1, #0
    3ac2:	9200      	str	r2, [sp, #0]
    3ac4:	685e      	ldr	r6, [r3, #4]
    3ac6:	4810      	ldr	r0, [pc, #64]	; (3b08 <NOROM_OSCClockSourceSet+0x58>)
    3ac8:	2201      	movs	r2, #1
    3aca:	460b      	mov	r3, r1
    3acc:	47b0      	blx	r6
    3ace:	07aa      	lsls	r2, r5, #30
    3ad0:	d509      	bpl.n	3ae6 <NOROM_OSCClockSourceSet+0x36>
    3ad2:	4b0c      	ldr	r3, [pc, #48]	; (3b04 <NOROM_OSCClockSourceSet+0x54>)
    3ad4:	b2a2      	uxth	r2, r4
    3ad6:	681b      	ldr	r3, [r3, #0]
    3ad8:	9200      	str	r2, [sp, #0]
    3ada:	685e      	ldr	r6, [r3, #4]
    3adc:	480a      	ldr	r0, [pc, #40]	; (3b08 <NOROM_OSCClockSourceSet+0x58>)
    3ade:	2100      	movs	r1, #0
    3ae0:	2202      	movs	r2, #2
    3ae2:	2301      	movs	r3, #1
    3ae4:	47b0      	blx	r6
    3ae6:	076b      	lsls	r3, r5, #29
    3ae8:	d509      	bpl.n	3afe <NOROM_OSCClockSourceSet+0x4e>
    3aea:	4b06      	ldr	r3, [pc, #24]	; (3b04 <NOROM_OSCClockSourceSet+0x54>)
    3aec:	b2a4      	uxth	r4, r4
    3aee:	681b      	ldr	r3, [r3, #0]
    3af0:	9400      	str	r4, [sp, #0]
    3af2:	685c      	ldr	r4, [r3, #4]
    3af4:	4804      	ldr	r0, [pc, #16]	; (3b08 <NOROM_OSCClockSourceSet+0x58>)
    3af6:	2100      	movs	r1, #0
    3af8:	220c      	movs	r2, #12
    3afa:	2302      	movs	r3, #2
    3afc:	47a0      	blx	r4
    3afe:	b002      	add	sp, #8
    3b00:	bd70      	pop	{r4, r5, r6, pc}
    3b02:	bf00      	nop
    3b04:	100001a4 	andne	r0, r0, r4, lsr #3
    3b08:	400ca000 	andmi	sl, ip, r0

00003b0c <NOROM_OSCClockSourceGet>:
    3b0c:	b510      	push	{r4, lr}
    3b0e:	4b08      	ldr	r3, [pc, #32]	; (3b30 <NOROM_OSCClockSourceGet+0x24>)
    3b10:	2804      	cmp	r0, #4
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	f04f 0134 	mov.w	r1, #52	; 0x34
    3b18:	68dc      	ldr	r4, [r3, #12]
    3b1a:	bf07      	ittee	eq
    3b1c:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3b20:	231d      	moveq	r3, #29
    3b22:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    3b26:	231c      	movne	r3, #28
    3b28:	4802      	ldr	r0, [pc, #8]	; (3b34 <NOROM_OSCClockSourceGet+0x28>)
    3b2a:	47a0      	blx	r4
    3b2c:	bd10      	pop	{r4, pc}
    3b2e:	bf00      	nop
    3b30:	100001a4 	andne	r0, r0, r4, lsr #3
    3b34:	400ca000 	andmi	sl, ip, r0

00003b38 <NOROM_OSCHF_TurnOnXosc>:
    3b38:	b508      	push	{r3, lr}
    3b3a:	2003      	movs	r0, #3
    3b3c:	2101      	movs	r1, #1
    3b3e:	f7ff ffb7 	bl	3ab0 <NOROM_OSCClockSourceSet>
    3b42:	f7ff ff91 	bl	3a68 <NOROM_AONRTCCurrentCompareValueGet>
    3b46:	4b01      	ldr	r3, [pc, #4]	; (3b4c <NOROM_OSCHF_TurnOnXosc+0x14>)
    3b48:	6098      	str	r0, [r3, #8]
    3b4a:	bd08      	pop	{r3, pc}
    3b4c:	20000614 	andcs	r0, r0, r4, lsl r6

00003b50 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3b50:	b510      	push	{r4, lr}
    3b52:	2001      	movs	r0, #1
    3b54:	f7ff ffda 	bl	3b0c <NOROM_OSCClockSourceGet>
    3b58:	2801      	cmp	r0, #1
    3b5a:	d01c      	beq.n	3b96 <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3b5c:	4b0f      	ldr	r3, [pc, #60]	; (3b9c <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3b5e:	4810      	ldr	r0, [pc, #64]	; (3ba0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	2134      	movs	r1, #52	; 0x34
    3b64:	68dc      	ldr	r4, [r3, #12]
    3b66:	2201      	movs	r2, #1
    3b68:	2300      	movs	r3, #0
    3b6a:	47a0      	blx	r4
    3b6c:	b1a0      	cbz	r0, 3b98 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3b6e:	4b0d      	ldr	r3, [pc, #52]	; (3ba4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3b70:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3b72:	f7ff ff4d 	bl	3a10 <SafeHapiVoid>
    3b76:	f7ff ff77 	bl	3a68 <NOROM_AONRTCCurrentCompareValueGet>
    3b7a:	4a0b      	ldr	r2, [pc, #44]	; (3ba8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3b7c:	6893      	ldr	r3, [r2, #8]
    3b7e:	60d0      	str	r0, [r2, #12]
    3b80:	1ac0      	subs	r0, r0, r3
    3b82:	4b0a      	ldr	r3, [pc, #40]	; (3bac <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3b84:	4358      	muls	r0, r3
    3b86:	6813      	ldr	r3, [r2, #0]
    3b88:	0c00      	lsrs	r0, r0, #16
    3b8a:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3b8e:	4283      	cmp	r3, r0
    3b90:	bf94      	ite	ls
    3b92:	6010      	strls	r0, [r2, #0]
    3b94:	6013      	strhi	r3, [r2, #0]
    3b96:	2001      	movs	r0, #1
    3b98:	bd10      	pop	{r4, pc}
    3b9a:	bf00      	nop
    3b9c:	100001a4 	andne	r0, r0, r4, lsr #3
    3ba0:	400ca000 	andmi	sl, ip, r0
    3ba4:	10000048 	andne	r0, r0, r8, asr #32
    3ba8:	20000614 	andcs	r0, r0, r4, lsl r6
    3bac:	000f4240 	andeq	r4, pc, r0, asr #4

00003bb0 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3bb0:	b510      	push	{r4, lr}
    3bb2:	2003      	movs	r0, #3
    3bb4:	2100      	movs	r1, #0
    3bb6:	f7ff ff7b 	bl	3ab0 <NOROM_OSCClockSourceSet>
    3bba:	2001      	movs	r0, #1
    3bbc:	f7ff ffa6 	bl	3b0c <NOROM_OSCClockSourceGet>
    3bc0:	b118      	cbz	r0, 3bca <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    3bc2:	4b06      	ldr	r3, [pc, #24]	; (3bdc <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    3bc4:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3bc6:	f7ff ff23 	bl	3a10 <SafeHapiVoid>
    3bca:	f7ff ff4d 	bl	3a68 <NOROM_AONRTCCurrentCompareValueGet>
    3bce:	4c04      	ldr	r4, [pc, #16]	; (3be0 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3bd0:	6060      	str	r0, [r4, #4]
    3bd2:	f7ff ff31 	bl	3a38 <NOROM_AONBatMonTemperatureGetDegC>
    3bd6:	6120      	str	r0, [r4, #16]
    3bd8:	bd10      	pop	{r4, pc}
    3bda:	bf00      	nop
    3bdc:	10000048 	andne	r0, r0, r8, asr #32
    3be0:	20000614 	andcs	r0, r0, r4, lsl r6

00003be4 <NOROM_RFCDoorbellSendTo>:
    3be4:	4a07      	ldr	r2, [pc, #28]	; (3c04 <NOROM_RFCDoorbellSendTo+0x20>)
    3be6:	6811      	ldr	r1, [r2, #0]
    3be8:	2900      	cmp	r1, #0
    3bea:	d1fb      	bne.n	3be4 <NOROM_RFCDoorbellSendTo>
    3bec:	4b06      	ldr	r3, [pc, #24]	; (3c08 <NOROM_RFCDoorbellSendTo+0x24>)
    3bee:	6019      	str	r1, [r3, #0]
    3bf0:	6010      	str	r0, [r2, #0]
    3bf2:	681a      	ldr	r2, [r3, #0]
    3bf4:	2a00      	cmp	r2, #0
    3bf6:	d0fc      	beq.n	3bf2 <NOROM_RFCDoorbellSendTo+0xe>
    3bf8:	4b03      	ldr	r3, [pc, #12]	; (3c08 <NOROM_RFCDoorbellSendTo+0x24>)
    3bfa:	2200      	movs	r2, #0
    3bfc:	601a      	str	r2, [r3, #0]
    3bfe:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3c02:	4770      	bx	lr
    3c04:	40041000 	andmi	r1, r4, r0
    3c08:	4004101c 	andmi	r1, r4, ip, lsl r0

00003c0c <NOROM_RFCSynthPowerDown>:
    3c0c:	4a0e      	ldr	r2, [pc, #56]	; (3c48 <NOROM_RFCSynthPowerDown+0x3c>)
    3c0e:	490f      	ldr	r1, [pc, #60]	; (3c4c <NOROM_RFCSynthPowerDown+0x40>)
    3c10:	6813      	ldr	r3, [r2, #0]
    3c12:	2050      	movs	r0, #80	; 0x50
    3c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3c18:	f023 0302 	bic.w	r3, r3, #2
    3c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3c20:	6013      	str	r3, [r2, #0]
    3c22:	4b0b      	ldr	r3, [pc, #44]	; (3c50 <NOROM_RFCSynthPowerDown+0x44>)
    3c24:	2203      	movs	r2, #3
    3c26:	601a      	str	r2, [r3, #0]
    3c28:	f241 0330 	movw	r3, #4144	; 0x1030
    3c2c:	4a09      	ldr	r2, [pc, #36]	; (3c54 <NOROM_RFCSynthPowerDown+0x48>)
    3c2e:	600b      	str	r3, [r1, #0]
    3c30:	2301      	movs	r3, #1
    3c32:	6013      	str	r3, [r2, #0]
    3c34:	6008      	str	r0, [r1, #0]
    3c36:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3c3a:	6013      	str	r3, [r2, #0]
    3c3c:	6008      	str	r0, [r1, #0]
    3c3e:	6013      	str	r3, [r2, #0]
    3c40:	f842 3c0c 	str.w	r3, [r2, #-12]
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop
    3c48:	60040000 	andvs	r0, r4, r0
    3c4c:	40044114 	andmi	r4, r4, r4, lsl r1
    3c50:	40044108 	andmi	r4, r4, r8, lsl #2
    3c54:	4004410c 	andmi	r4, r4, ip, lsl #2

00003c58 <NOROM_RFCRfTrimRead>:
    3c58:	f640 0202 	movw	r2, #2050	; 0x802
    3c5c:	8803      	ldrh	r3, [r0, #0]
    3c5e:	4293      	cmp	r3, r2
    3c60:	d006      	beq.n	3c70 <NOROM_RFCRfTrimRead+0x18>
    3c62:	f643 0207 	movw	r2, #14343	; 0x3807
    3c66:	4293      	cmp	r3, r2
    3c68:	d104      	bne.n	3c74 <NOROM_RFCRfTrimRead+0x1c>
    3c6a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3c6e:	e002      	b.n	3c76 <NOROM_RFCRfTrimRead+0x1e>
    3c70:	7bc3      	ldrb	r3, [r0, #15]
    3c72:	e000      	b.n	3c76 <NOROM_RFCRfTrimRead+0x1e>
    3c74:	2300      	movs	r3, #0
    3c76:	4a36      	ldr	r2, [pc, #216]	; (3d50 <NOROM_RFCRfTrimRead+0xf8>)
    3c78:	2b0a      	cmp	r3, #10
    3c7a:	6812      	ldr	r2, [r2, #0]
    3c7c:	600a      	str	r2, [r1, #0]
    3c7e:	d031      	beq.n	3ce4 <NOROM_RFCRfTrimRead+0x8c>
    3c80:	dc10      	bgt.n	3ca4 <NOROM_RFCRfTrimRead+0x4c>
    3c82:	2b05      	cmp	r3, #5
    3c84:	d021      	beq.n	3cca <NOROM_RFCRfTrimRead+0x72>
    3c86:	2b06      	cmp	r3, #6
    3c88:	d153      	bne.n	3d32 <NOROM_RFCRfTrimRead+0xda>
    3c8a:	4b32      	ldr	r3, [pc, #200]	; (3d54 <NOROM_RFCRfTrimRead+0xfc>)
    3c8c:	681b      	ldr	r3, [r3, #0]
    3c8e:	604b      	str	r3, [r1, #4]
    3c90:	4b31      	ldr	r3, [pc, #196]	; (3d58 <NOROM_RFCRfTrimRead+0x100>)
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	608b      	str	r3, [r1, #8]
    3c96:	4b31      	ldr	r3, [pc, #196]	; (3d5c <NOROM_RFCRfTrimRead+0x104>)
    3c98:	681b      	ldr	r3, [r3, #0]
    3c9a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c9e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3ca2:	e052      	b.n	3d4a <NOROM_RFCRfTrimRead+0xf2>
    3ca4:	2b0f      	cmp	r3, #15
    3ca6:	d02a      	beq.n	3cfe <NOROM_RFCRfTrimRead+0xa6>
    3ca8:	2b1e      	cmp	r3, #30
    3caa:	d035      	beq.n	3d18 <NOROM_RFCRfTrimRead+0xc0>
    3cac:	2b0c      	cmp	r3, #12
    3cae:	d140      	bne.n	3d32 <NOROM_RFCRfTrimRead+0xda>
    3cb0:	4b2b      	ldr	r3, [pc, #172]	; (3d60 <NOROM_RFCRfTrimRead+0x108>)
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	604b      	str	r3, [r1, #4]
    3cb6:	4b2b      	ldr	r3, [pc, #172]	; (3d64 <NOROM_RFCRfTrimRead+0x10c>)
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	608b      	str	r3, [r1, #8]
    3cbc:	4b2a      	ldr	r3, [pc, #168]	; (3d68 <NOROM_RFCRfTrimRead+0x110>)
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3cc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3cc8:	e03f      	b.n	3d4a <NOROM_RFCRfTrimRead+0xf2>
    3cca:	4b28      	ldr	r3, [pc, #160]	; (3d6c <NOROM_RFCRfTrimRead+0x114>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	604b      	str	r3, [r1, #4]
    3cd0:	4b27      	ldr	r3, [pc, #156]	; (3d70 <NOROM_RFCRfTrimRead+0x118>)
    3cd2:	681b      	ldr	r3, [r3, #0]
    3cd4:	608b      	str	r3, [r1, #8]
    3cd6:	4b27      	ldr	r3, [pc, #156]	; (3d74 <NOROM_RFCRfTrimRead+0x11c>)
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3cde:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3ce2:	e032      	b.n	3d4a <NOROM_RFCRfTrimRead+0xf2>
    3ce4:	4b24      	ldr	r3, [pc, #144]	; (3d78 <NOROM_RFCRfTrimRead+0x120>)
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	604b      	str	r3, [r1, #4]
    3cea:	4b24      	ldr	r3, [pc, #144]	; (3d7c <NOROM_RFCRfTrimRead+0x124>)
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	608b      	str	r3, [r1, #8]
    3cf0:	4b23      	ldr	r3, [pc, #140]	; (3d80 <NOROM_RFCRfTrimRead+0x128>)
    3cf2:	681b      	ldr	r3, [r3, #0]
    3cf4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3cf8:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3cfc:	e025      	b.n	3d4a <NOROM_RFCRfTrimRead+0xf2>
    3cfe:	4b21      	ldr	r3, [pc, #132]	; (3d84 <NOROM_RFCRfTrimRead+0x12c>)
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	604b      	str	r3, [r1, #4]
    3d04:	4b20      	ldr	r3, [pc, #128]	; (3d88 <NOROM_RFCRfTrimRead+0x130>)
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	608b      	str	r3, [r1, #8]
    3d0a:	4b20      	ldr	r3, [pc, #128]	; (3d8c <NOROM_RFCRfTrimRead+0x134>)
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3d12:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3d16:	e018      	b.n	3d4a <NOROM_RFCRfTrimRead+0xf2>
    3d18:	4b1d      	ldr	r3, [pc, #116]	; (3d90 <NOROM_RFCRfTrimRead+0x138>)
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	604b      	str	r3, [r1, #4]
    3d1e:	4b1d      	ldr	r3, [pc, #116]	; (3d94 <NOROM_RFCRfTrimRead+0x13c>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	608b      	str	r3, [r1, #8]
    3d24:	4b1c      	ldr	r3, [pc, #112]	; (3d98 <NOROM_RFCRfTrimRead+0x140>)
    3d26:	681b      	ldr	r3, [r3, #0]
    3d28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3d2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3d30:	e00b      	b.n	3d4a <NOROM_RFCRfTrimRead+0xf2>
    3d32:	4b1a      	ldr	r3, [pc, #104]	; (3d9c <NOROM_RFCRfTrimRead+0x144>)
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	604b      	str	r3, [r1, #4]
    3d38:	4b19      	ldr	r3, [pc, #100]	; (3da0 <NOROM_RFCRfTrimRead+0x148>)
    3d3a:	681b      	ldr	r3, [r3, #0]
    3d3c:	608b      	str	r3, [r1, #8]
    3d3e:	4b19      	ldr	r3, [pc, #100]	; (3da4 <NOROM_RFCRfTrimRead+0x14c>)
    3d40:	681b      	ldr	r3, [r3, #0]
    3d42:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d4a:	60cb      	str	r3, [r1, #12]
    3d4c:	4770      	bx	lr
    3d4e:	bf00      	nop
    3d50:	5000134c 	andpl	r1, r0, ip, asr #6
    3d54:	500010c8 	andpl	r1, r0, r8, asr #1
    3d58:	500010e0 	andpl	r1, r0, r0, ror #1
    3d5c:	500010f8 	strdpl	r1, [r0], -r8
    3d60:	500010d0 	ldrdpl	r1, [r0], -r0
    3d64:	500010e8 	andpl	r1, r0, r8, ror #1
    3d68:	50001100 	andpl	r1, r0, r0, lsl #2
    3d6c:	500010c4 	andpl	r1, r0, r4, asr #1
    3d70:	500010dc 	ldrdpl	r1, [r0], -ip
    3d74:	500010f4 	strdpl	r1, [r0], -r4
    3d78:	500010cc 	andpl	r1, r0, ip, asr #1
    3d7c:	500010e4 	andpl	r1, r0, r4, ror #1
    3d80:	500010fc 	strdpl	r1, [r0], -ip
    3d84:	500010d4 	ldrdpl	r1, [r0], -r4
    3d88:	500010ec 	andpl	r1, r0, ip, ror #1
    3d8c:	50001104 	andpl	r1, r0, r4, lsl #2
    3d90:	500010d8 	ldrdpl	r1, [r0], -r8
    3d94:	500010f0 	strdpl	r1, [r0], -r0
    3d98:	50001108 	andpl	r1, r0, r8, lsl #2
    3d9c:	50001354 	andpl	r1, r0, r4, asr r3
    3da0:	50001358 	andpl	r1, r0, r8, asr r3
    3da4:	50001380 	andpl	r1, r0, r0, lsl #7

00003da8 <NOROM_RFCRTrim>:
    3da8:	f643 0206 	movw	r2, #14342	; 0x3806
    3dac:	b570      	push	{r4, r5, r6, lr}
    3dae:	8803      	ldrh	r3, [r0, #0]
    3db0:	4293      	cmp	r3, r2
    3db2:	d00a      	beq.n	3dca <NOROM_RFCRTrim+0x22>
    3db4:	f643 0207 	movw	r2, #14343	; 0x3807
    3db8:	4293      	cmp	r3, r2
    3dba:	d009      	beq.n	3dd0 <NOROM_RFCRTrim+0x28>
    3dbc:	f640 0202 	movw	r2, #2050	; 0x802
    3dc0:	4293      	cmp	r3, r2
    3dc2:	d16b      	bne.n	3e9c <NOROM_RFCRTrim+0xf4>
    3dc4:	7bc1      	ldrb	r1, [r0, #15]
    3dc6:	6943      	ldr	r3, [r0, #20]
    3dc8:	e005      	b.n	3dd6 <NOROM_RFCRTrim+0x2e>
    3dca:	69c3      	ldr	r3, [r0, #28]
    3dcc:	2102      	movs	r1, #2
    3dce:	e002      	b.n	3dd6 <NOROM_RFCRTrim+0x2e>
    3dd0:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3dd4:	69c3      	ldr	r3, [r0, #28]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d060      	beq.n	3e9c <NOROM_RFCRTrim+0xf4>
    3dda:	f103 0414 	add.w	r4, r3, #20
    3dde:	f244 0538 	movw	r5, #16440	; 0x4038
    3de2:	681a      	ldr	r2, [r3, #0]
    3de4:	4618      	mov	r0, r3
    3de6:	b296      	uxth	r6, r2
    3de8:	42ae      	cmp	r6, r5
    3dea:	f103 0304 	add.w	r3, r3, #4
    3dee:	d103      	bne.n	3df8 <NOROM_RFCRTrim+0x50>
    3df0:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3df4:	b91c      	cbnz	r4, 3dfe <NOROM_RFCRTrim+0x56>
    3df6:	bd70      	pop	{r4, r5, r6, pc}
    3df8:	42a3      	cmp	r3, r4
    3dfa:	d1f0      	bne.n	3dde <NOROM_RFCRTrim+0x36>
    3dfc:	bd70      	pop	{r4, r5, r6, pc}
    3dfe:	290a      	cmp	r1, #10
    3e00:	d01d      	beq.n	3e3e <NOROM_RFCRTrim+0x96>
    3e02:	dc06      	bgt.n	3e12 <NOROM_RFCRTrim+0x6a>
    3e04:	2905      	cmp	r1, #5
    3e06:	d013      	beq.n	3e30 <NOROM_RFCRTrim+0x88>
    3e08:	2906      	cmp	r1, #6
    3e0a:	d016      	beq.n	3e3a <NOROM_RFCRTrim+0x92>
    3e0c:	2902      	cmp	r1, #2
    3e0e:	d11f      	bne.n	3e50 <NOROM_RFCRTrim+0xa8>
    3e10:	e007      	b.n	3e22 <NOROM_RFCRTrim+0x7a>
    3e12:	290f      	cmp	r1, #15
    3e14:	d015      	beq.n	3e42 <NOROM_RFCRTrim+0x9a>
    3e16:	291e      	cmp	r1, #30
    3e18:	d015      	beq.n	3e46 <NOROM_RFCRTrim+0x9e>
    3e1a:	290c      	cmp	r1, #12
    3e1c:	d118      	bne.n	3e50 <NOROM_RFCRTrim+0xa8>
    3e1e:	4b20      	ldr	r3, [pc, #128]	; (3ea0 <NOROM_RFCRTrim+0xf8>)
    3e20:	e012      	b.n	3e48 <NOROM_RFCRTrim+0xa0>
    3e22:	4b20      	ldr	r3, [pc, #128]	; (3ea4 <NOROM_RFCRTrim+0xfc>)
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3e2a:	2b0f      	cmp	r3, #15
    3e2c:	d12a      	bne.n	3e84 <NOROM_RFCRTrim+0xdc>
    3e2e:	e023      	b.n	3e78 <NOROM_RFCRTrim+0xd0>
    3e30:	4b1d      	ldr	r3, [pc, #116]	; (3ea8 <NOROM_RFCRTrim+0x100>)
    3e32:	681b      	ldr	r3, [r3, #0]
    3e34:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3e38:	e02c      	b.n	3e94 <NOROM_RFCRTrim+0xec>
    3e3a:	4b1c      	ldr	r3, [pc, #112]	; (3eac <NOROM_RFCRTrim+0x104>)
    3e3c:	e004      	b.n	3e48 <NOROM_RFCRTrim+0xa0>
    3e3e:	4b1c      	ldr	r3, [pc, #112]	; (3eb0 <NOROM_RFCRTrim+0x108>)
    3e40:	e002      	b.n	3e48 <NOROM_RFCRTrim+0xa0>
    3e42:	4b1c      	ldr	r3, [pc, #112]	; (3eb4 <NOROM_RFCRTrim+0x10c>)
    3e44:	e000      	b.n	3e48 <NOROM_RFCRTrim+0xa0>
    3e46:	4b1c      	ldr	r3, [pc, #112]	; (3eb8 <NOROM_RFCRTrim+0x110>)
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3e4e:	e021      	b.n	3e94 <NOROM_RFCRTrim+0xec>
    3e50:	4b14      	ldr	r3, [pc, #80]	; (3ea4 <NOROM_RFCRTrim+0xfc>)
    3e52:	681b      	ldr	r3, [r3, #0]
    3e54:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3e58:	2b0f      	cmp	r3, #15
    3e5a:	d113      	bne.n	3e84 <NOROM_RFCRTrim+0xdc>
    3e5c:	3905      	subs	r1, #5
    3e5e:	2919      	cmp	r1, #25
    3e60:	d80a      	bhi.n	3e78 <NOROM_RFCRTrim+0xd0>
    3e62:	2301      	movs	r3, #1
    3e64:	fa03 f101 	lsl.w	r1, r3, r1
    3e68:	4b14      	ldr	r3, [pc, #80]	; (3ebc <NOROM_RFCRTrim+0x114>)
    3e6a:	400b      	ands	r3, r1
    3e6c:	b123      	cbz	r3, 3e78 <NOROM_RFCRTrim+0xd0>
    3e6e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3e72:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3e76:	e003      	b.n	3e80 <NOROM_RFCRTrim+0xd8>
    3e78:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3e7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3e80:	6002      	str	r2, [r0, #0]
    3e82:	bd70      	pop	{r4, r5, r6, pc}
    3e84:	429c      	cmp	r4, r3
    3e86:	d209      	bcs.n	3e9c <NOROM_RFCRTrim+0xf4>
    3e88:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3e8c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3e90:	6003      	str	r3, [r0, #0]
    3e92:	bd70      	pop	{r4, r5, r6, pc}
    3e94:	2b0f      	cmp	r3, #15
    3e96:	d1f5      	bne.n	3e84 <NOROM_RFCRTrim+0xdc>
    3e98:	3905      	subs	r1, #5
    3e9a:	e7e2      	b.n	3e62 <NOROM_RFCRTrim+0xba>
    3e9c:	bd70      	pop	{r4, r5, r6, pc}
    3e9e:	bf00      	nop
    3ea0:	50001100 	andpl	r1, r0, r0, lsl #2
    3ea4:	50001380 	andpl	r1, r0, r0, lsl #7
    3ea8:	50001320 	andpl	r1, r0, r0, lsr #6
    3eac:	500010f8 	strdpl	r1, [r0], -r8
    3eb0:	500010fc 	strdpl	r1, [r0], -ip
    3eb4:	50001104 	andpl	r1, r0, r4, lsl #2
    3eb8:	50001108 	andpl	r1, r0, r8, lsl #2
    3ebc:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003ec0 <NOROM_RFCRfTrimSet>:
    3ec0:	4603      	mov	r3, r0
    3ec2:	b530      	push	{r4, r5, lr}
    3ec4:	4c05      	ldr	r4, [pc, #20]	; (3edc <NOROM_RFCRfTrimSet+0x1c>)
    3ec6:	f100 0510 	add.w	r5, r0, #16
    3eca:	4622      	mov	r2, r4
    3ecc:	6818      	ldr	r0, [r3, #0]
    3ece:	6859      	ldr	r1, [r3, #4]
    3ed0:	3308      	adds	r3, #8
    3ed2:	c203      	stmia	r2!, {r0, r1}
    3ed4:	42ab      	cmp	r3, r5
    3ed6:	4614      	mov	r4, r2
    3ed8:	d1f7      	bne.n	3eca <NOROM_RFCRfTrimSet+0xa>
    3eda:	bd30      	pop	{r4, r5, pc}
    3edc:	21000018 	tstcs	r0, r8, lsl r0

00003ee0 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3ee0:	4b04      	ldr	r3, [pc, #16]	; (3ef4 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3ee2:	b128      	cbz	r0, 3ef0 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3ee4:	4a04      	ldr	r2, [pc, #16]	; (3ef8 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3ee6:	2100      	movs	r1, #0
    3ee8:	7011      	strb	r1, [r2, #0]
    3eea:	2220      	movs	r2, #32
    3eec:	701a      	strb	r2, [r3, #0]
    3eee:	4770      	bx	lr
    3ef0:	7018      	strb	r0, [r3, #0]
    3ef2:	4770      	bx	lr
    3ef4:	40086202 	andmi	r6, r8, r2, lsl #4
    3ef8:	40086200 	andmi	r6, r8, r0, lsl #4

00003efc <TrimAfterColdResetWakeupFromShutDown>:
    3efc:	b538      	push	{r3, r4, r5, lr}
    3efe:	4605      	mov	r5, r0
    3f00:	4b26      	ldr	r3, [pc, #152]	; (3f9c <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3f02:	2201      	movs	r2, #1
    3f04:	601a      	str	r2, [r3, #0]
    3f06:	4b26      	ldr	r3, [pc, #152]	; (3fa0 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3f08:	681b      	ldr	r3, [r3, #0]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d0fb      	beq.n	3f06 <TrimAfterColdResetWakeupFromShutDown+0xa>
    3f0e:	4b25      	ldr	r3, [pc, #148]	; (3fa4 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3f10:	22c0      	movs	r2, #192	; 0xc0
    3f12:	601a      	str	r2, [r3, #0]
    3f14:	4b24      	ldr	r3, [pc, #144]	; (3fa8 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	079b      	lsls	r3, r3, #30
    3f1a:	bf5f      	itttt	pl
    3f1c:	4b23      	ldrpl	r3, [pc, #140]	; (3fac <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3f1e:	4a24      	ldrpl	r2, [pc, #144]	; (3fb0 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3f20:	681b      	ldrpl	r3, [r3, #0]
    3f22:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3f26:	bf5c      	itt	pl
    3f28:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3f2c:	7013      	strbpl	r3, [r2, #0]
    3f2e:	4b21      	ldr	r3, [pc, #132]	; (3fb4 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3f30:	2200      	movs	r2, #0
    3f32:	601a      	str	r2, [r3, #0]
    3f34:	4b20      	ldr	r3, [pc, #128]	; (3fb8 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3f36:	681c      	ldr	r4, [r3, #0]
    3f38:	4620      	mov	r0, r4
    3f3a:	f000 f8d9 	bl	40f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3f3e:	4628      	mov	r0, r5
    3f40:	4621      	mov	r1, r4
    3f42:	f000 fa0d 	bl	4360 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3f46:	f240 221d 	movw	r2, #541	; 0x21d
    3f4a:	4b1c      	ldr	r3, [pc, #112]	; (3fbc <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3f4c:	681b      	ldr	r3, [r3, #0]
    3f4e:	b29b      	uxth	r3, r3
    3f50:	4293      	cmp	r3, r2
    3f52:	d814      	bhi.n	3f7e <TrimAfterColdResetWakeupFromShutDown+0x82>
    3f54:	4a1a      	ldr	r2, [pc, #104]	; (3fc0 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3f56:	6813      	ldr	r3, [r2, #0]
    3f58:	6812      	ldr	r2, [r2, #0]
    3f5a:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3f5e:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3f62:	b103      	cbz	r3, 3f66 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3f64:	3b01      	subs	r3, #1
    3f66:	1f91      	subs	r1, r2, #6
    3f68:	2901      	cmp	r1, #1
    3f6a:	bf86      	itte	hi
    3f6c:	3202      	addhi	r2, #2
    3f6e:	f002 020f 	andhi.w	r2, r2, #15
    3f72:	2207      	movls	r2, #7
    3f74:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3f78:	4a12      	ldr	r2, [pc, #72]	; (3fc4 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3f7a:	b2db      	uxtb	r3, r3
    3f7c:	7013      	strb	r3, [r2, #0]
    3f7e:	4620      	mov	r0, r4
    3f80:	f000 fabc 	bl	44fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3f84:	4b10      	ldr	r3, [pc, #64]	; (3fc8 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3f86:	2002      	movs	r0, #2
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	68db      	ldr	r3, [r3, #12]
    3f8c:	4798      	blx	r3
    3f8e:	4b05      	ldr	r3, [pc, #20]	; (3fa4 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3f90:	2240      	movs	r2, #64	; 0x40
    3f92:	601a      	str	r2, [r3, #0]
    3f94:	4b0d      	ldr	r3, [pc, #52]	; (3fcc <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3f96:	2201      	movs	r2, #1
    3f98:	601a      	str	r2, [r3, #0]
    3f9a:	bd38      	pop	{r3, r4, r5, pc}
    3f9c:	40091010 	andmi	r1, r9, r0, lsl r0
    3fa0:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3fa4:	400c6000 	andmi	r6, ip, r0
    3fa8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3fac:	50003fac 	andpl	r3, r0, ip, lsr #31
    3fb0:	40086256 	andmi	r6, r8, r6, asr r2
    3fb4:	40091040 	andmi	r1, r9, r0, asr #32
    3fb8:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3fbc:	50001314 	andpl	r1, r0, r4, lsl r3
    3fc0:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3fc4:	40086002 	andmi	r6, r8, r2
    3fc8:	100001a0 	andne	r0, r0, r0, lsr #3
    3fcc:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003fd0 <NOROM_SetupTrimDevice>:
    3fd0:	b510      	push	{r4, lr}
    3fd2:	4b1f      	ldr	r3, [pc, #124]	; (4050 <NOROM_SetupTrimDevice+0x80>)
    3fd4:	681c      	ldr	r4, [r3, #0]
    3fd6:	1c63      	adds	r3, r4, #1
    3fd8:	bf08      	it	eq
    3fda:	2400      	moveq	r4, #0
    3fdc:	f000 fcde 	bl	499c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3fe0:	4b1c      	ldr	r3, [pc, #112]	; (4054 <NOROM_SetupTrimDevice+0x84>)
    3fe2:	2200      	movs	r2, #0
    3fe4:	601a      	str	r2, [r3, #0]
    3fe6:	4a1c      	ldr	r2, [pc, #112]	; (4058 <NOROM_SetupTrimDevice+0x88>)
    3fe8:	2301      	movs	r3, #1
    3fea:	6013      	str	r3, [r2, #0]
    3fec:	4a1b      	ldr	r2, [pc, #108]	; (405c <NOROM_SetupTrimDevice+0x8c>)
    3fee:	6013      	str	r3, [r2, #0]
    3ff0:	f000 fa3e 	bl	4470 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3ff4:	4b1a      	ldr	r3, [pc, #104]	; (4060 <NOROM_SetupTrimDevice+0x90>)
    3ff6:	681b      	ldr	r3, [r3, #0]
    3ff8:	b123      	cbz	r3, 4004 <NOROM_SetupTrimDevice+0x34>
    3ffa:	4b1a      	ldr	r3, [pc, #104]	; (4064 <NOROM_SetupTrimDevice+0x94>)
    3ffc:	4620      	mov	r0, r4
    3ffe:	681b      	ldr	r3, [r3, #0]
    4000:	f7ff ff7c 	bl	3efc <TrimAfterColdResetWakeupFromShutDown>
    4004:	4b18      	ldr	r3, [pc, #96]	; (4068 <NOROM_SetupTrimDevice+0x98>)
    4006:	2200      	movs	r2, #0
    4008:	601a      	str	r2, [r3, #0]
    400a:	4a18      	ldr	r2, [pc, #96]	; (406c <NOROM_SetupTrimDevice+0x9c>)
    400c:	6813      	ldr	r3, [r2, #0]
    400e:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    4012:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    4016:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    401e:	6013      	str	r3, [r2, #0]
    4020:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    4024:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    4028:	6813      	ldr	r3, [r2, #0]
    402a:	f3c3 3301 	ubfx	r3, r3, #12, #2
    402e:	2b01      	cmp	r3, #1
    4030:	bf01      	itttt	eq
    4032:	6813      	ldreq	r3, [r2, #0]
    4034:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    4038:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    403c:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    4040:	bf04      	itt	eq
    4042:	6011      	streq	r1, [r2, #0]
    4044:	6013      	streq	r3, [r2, #0]
    4046:	4b0a      	ldr	r3, [pc, #40]	; (4070 <NOROM_SetupTrimDevice+0xa0>)
    4048:	681b      	ldr	r3, [r3, #0]
    404a:	2b00      	cmp	r3, #0
    404c:	d1fb      	bne.n	4046 <NOROM_SetupTrimDevice+0x76>
    404e:	bd10      	pop	{r4, pc}
    4050:	5000131c 	andpl	r1, r0, ip, lsl r3
    4054:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    4058:	400c605c 	andmi	r6, ip, ip, asr r0
    405c:	43042208 	movwmi	r2, #16904	; 0x4208
    4060:	43280180 			; <UNDEFINED> instruction: 0x43280180
    4064:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    4068:	4008218c 	andmi	r2, r8, ip, lsl #3
    406c:	40032048 	andmi	r2, r3, r8, asr #32
    4070:	4268000c 	rsbmi	r0, r8, #12

00004074 <NOROM_SetupSetVddrLevel>:
    4074:	b530      	push	{r4, r5, lr}
    4076:	4b19      	ldr	r3, [pc, #100]	; (40dc <NOROM_SetupSetVddrLevel+0x68>)
    4078:	681a      	ldr	r2, [r3, #0]
    407a:	4b19      	ldr	r3, [pc, #100]	; (40e0 <NOROM_SetupSetVddrLevel+0x6c>)
    407c:	f3c2 6204 	ubfx	r2, r2, #24, #5
    4080:	781b      	ldrb	r3, [r3, #0]
    4082:	2a15      	cmp	r2, #21
    4084:	f003 031f 	and.w	r3, r3, #31
    4088:	bf88      	it	hi
    408a:	3a20      	subhi	r2, #32
    408c:	2b15      	cmp	r3, #21
    408e:	bf88      	it	hi
    4090:	3b20      	subhi	r3, #32
    4092:	4293      	cmp	r3, r2
    4094:	d020      	beq.n	40d8 <NOROM_SetupSetVddrLevel+0x64>
    4096:	4913      	ldr	r1, [pc, #76]	; (40e4 <NOROM_SetupSetVddrLevel+0x70>)
    4098:	2000      	movs	r0, #0
    409a:	6008      	str	r0, [r1, #0]
    409c:	4608      	mov	r0, r1
    409e:	1ad1      	subs	r1, r2, r3
    40a0:	2902      	cmp	r1, #2
    40a2:	dc05      	bgt.n	40b0 <NOROM_SetupSetVddrLevel+0x3c>
    40a4:	f06f 0401 	mvn.w	r4, #1
    40a8:	42a1      	cmp	r1, r4
    40aa:	bfb8      	it	lt
    40ac:	4621      	movlt	r1, r4
    40ae:	e000      	b.n	40b2 <NOROM_SetupSetVddrLevel+0x3e>
    40b0:	2102      	movs	r1, #2
    40b2:	440b      	add	r3, r1
    40b4:	490c      	ldr	r1, [pc, #48]	; (40e8 <NOROM_SetupSetVddrLevel+0x74>)
    40b6:	4d0d      	ldr	r5, [pc, #52]	; (40ec <NOROM_SetupSetVddrLevel+0x78>)
    40b8:	680c      	ldr	r4, [r1, #0]
    40ba:	f003 041f 	and.w	r4, r3, #31
    40be:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    40c2:	802c      	strh	r4, [r5, #0]
    40c4:	4293      	cmp	r3, r2
    40c6:	f04f 0401 	mov.w	r4, #1
    40ca:	600c      	str	r4, [r1, #0]
    40cc:	d1e7      	bne.n	409e <NOROM_SetupSetVddrLevel+0x2a>
    40ce:	680b      	ldr	r3, [r1, #0]
    40d0:	600c      	str	r4, [r1, #0]
    40d2:	680b      	ldr	r3, [r1, #0]
    40d4:	6004      	str	r4, [r0, #0]
    40d6:	680b      	ldr	r3, [r1, #0]
    40d8:	bd30      	pop	{r4, r5, pc}
    40da:	bf00      	nop
    40dc:	50001388 	andpl	r1, r0, r8, lsl #7
    40e0:	40086206 	andmi	r6, r8, r6, lsl #4
    40e4:	43200098 			; <UNDEFINED> instruction: 0x43200098
    40e8:	4009202c 	andmi	r2, r9, ip, lsr #32
    40ec:	4008626c 	andmi	r6, r8, ip, ror #4

000040f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    40f0:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    40f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    40f8:	b510      	push	{r4, lr}
    40fa:	4604      	mov	r4, r0
    40fc:	d10f      	bne.n	411e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    40fe:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    4102:	4a1e      	ldr	r2, [pc, #120]	; (417c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    4104:	2380      	movs	r3, #128	; 0x80
    4106:	7013      	strb	r3, [r2, #0]
    4108:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    410c:	f802 3c10 	strb.w	r3, [r2, #-16]
    4110:	f7ff ffb0 	bl	4074 <NOROM_SetupSetVddrLevel>
    4114:	4b1a      	ldr	r3, [pc, #104]	; (4180 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    4116:	681b      	ldr	r3, [r3, #0]
    4118:	f3c3 2304 	ubfx	r3, r3, #8, #5
    411c:	e003      	b.n	4126 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    411e:	4b19      	ldr	r3, [pc, #100]	; (4184 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    4120:	681b      	ldr	r3, [r3, #0]
    4122:	f3c3 6304 	ubfx	r3, r3, #24, #5
    4126:	2b15      	cmp	r3, #21
    4128:	bf88      	it	hi
    412a:	3b20      	subhi	r3, #32
    412c:	eb03 7324 	add.w	r3, r3, r4, asr #28
    4130:	3301      	adds	r3, #1
    4132:	2b15      	cmp	r3, #21
    4134:	dc05      	bgt.n	4142 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    4136:	f06f 0209 	mvn.w	r2, #9
    413a:	4293      	cmp	r3, r2
    413c:	bfb8      	it	lt
    413e:	4613      	movlt	r3, r2
    4140:	e000      	b.n	4144 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    4142:	2315      	movs	r3, #21
    4144:	4a10      	ldr	r2, [pc, #64]	; (4188 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    4146:	f003 031f 	and.w	r3, r3, #31
    414a:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    414e:	8013      	strh	r3, [r2, #0]
    4150:	4b0e      	ldr	r3, [pc, #56]	; (418c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    4152:	681b      	ldr	r3, [r3, #0]
    4154:	f013 0302 	ands.w	r3, r3, #2
    4158:	bf0a      	itet	eq
    415a:	4a0d      	ldreq	r2, [pc, #52]	; (4190 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    415c:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    4160:	6013      	streq	r3, [r2, #0]
    4162:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    4166:	4a0b      	ldr	r2, [pc, #44]	; (4194 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    4168:	f083 0301 	eor.w	r3, r3, #1
    416c:	6013      	str	r3, [r2, #0]
    416e:	f3c4 6480 	ubfx	r4, r4, #26, #1
    4172:	4b09      	ldr	r3, [pc, #36]	; (4198 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    4174:	f084 0401 	eor.w	r4, r4, #1
    4178:	601c      	str	r4, [r3, #0]
    417a:	bd10      	pop	{r4, pc}
    417c:	40086225 	andmi	r6, r8, r5, lsr #4
    4180:	50001388 	andpl	r1, r0, r8, lsl #7
    4184:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    4188:	4008626e 	andmi	r6, r8, lr, ror #4
    418c:	40090000 	andmi	r0, r9, r0
    4190:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    4194:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    4198:	43200008 			; <UNDEFINED> instruction: 0x43200008

0000419c <NOROM_SetupGetTrimForAnabypassValue1>:
    419c:	4b15      	ldr	r3, [pc, #84]	; (41f4 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    419e:	0381      	lsls	r1, r0, #14
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	f3c3 6283 	ubfx	r2, r3, #26, #4
    41a6:	f3c3 238f 	ubfx	r3, r3, #10, #16
    41aa:	d41f      	bmi.n	41ec <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    41ac:	f340 2007 	sbfx	r0, r0, #8, #8
    41b0:	2800      	cmp	r0, #0
    41b2:	da19      	bge.n	41e8 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    41b4:	085b      	lsrs	r3, r3, #1
    41b6:	d105      	bne.n	41c4 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    41b8:	0852      	lsrs	r2, r2, #1
    41ba:	bf06      	itte	eq
    41bc:	2301      	moveq	r3, #1
    41be:	461a      	moveq	r2, r3
    41c0:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    41c4:	3001      	adds	r0, #1
    41c6:	e7f3      	b.n	41b0 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    41c8:	005b      	lsls	r3, r3, #1
    41ca:	f043 0301 	orr.w	r3, r3, #1
    41ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    41d2:	d308      	bcc.n	41e6 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    41d4:	0052      	lsls	r2, r2, #1
    41d6:	f042 0201 	orr.w	r2, r2, #1
    41da:	2a0f      	cmp	r2, #15
    41dc:	bf86      	itte	hi
    41de:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    41e2:	220f      	movhi	r2, #15
    41e4:	2301      	movls	r3, #1
    41e6:	3801      	subs	r0, #1
    41e8:	2800      	cmp	r0, #0
    41ea:	d1ed      	bne.n	41c8 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    41ec:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    41f0:	4770      	bx	lr
    41f2:	bf00      	nop
    41f4:	50001350 	andpl	r1, r0, r0, asr r3

000041f8 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    41f8:	4a04      	ldr	r2, [pc, #16]	; (420c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    41fa:	6813      	ldr	r3, [r2, #0]
    41fc:	6810      	ldr	r0, [r2, #0]
    41fe:	f3c3 0387 	ubfx	r3, r3, #2, #8
    4202:	f000 0003 	and.w	r0, r0, #3
    4206:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    420a:	4770      	bx	lr
    420c:	50001350 	andpl	r1, r0, r0, asr r3

00004210 <NOROM_SetupGetTrimForAmpcompTh2>:
    4210:	4b02      	ldr	r3, [pc, #8]	; (421c <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    4212:	6818      	ldr	r0, [r3, #0]
    4214:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    4218:	4770      	bx	lr
    421a:	bf00      	nop
    421c:	50001374 	andpl	r1, r0, r4, ror r3

00004220 <NOROM_SetupGetTrimForAmpcompTh1>:
    4220:	4b03      	ldr	r3, [pc, #12]	; (4230 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    4222:	6818      	ldr	r0, [r3, #0]
    4224:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4228:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    422c:	4770      	bx	lr
    422e:	bf00      	nop
    4230:	50001370 	andpl	r1, r0, r0, ror r3

00004234 <NOROM_SetupGetTrimForAmpcompCtrl>:
    4234:	b570      	push	{r4, r5, r6, lr}
    4236:	4b15      	ldr	r3, [pc, #84]	; (428c <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    4238:	4915      	ldr	r1, [pc, #84]	; (4290 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    423a:	681c      	ldr	r4, [r3, #0]
    423c:	6809      	ldr	r1, [r1, #0]
    423e:	f3c4 5203 	ubfx	r2, r4, #20, #4
    4242:	f011 0501 	ands.w	r5, r1, #1
    4246:	f3c4 4303 	ubfx	r3, r4, #16, #4
    424a:	d113      	bne.n	4274 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    424c:	4911      	ldr	r1, [pc, #68]	; (4294 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    424e:	6809      	ldr	r1, [r1, #0]
    4250:	f341 2603 	sbfx	r6, r1, #8, #4
    4254:	18b2      	adds	r2, r6, r2
    4256:	d403      	bmi.n	4260 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    4258:	2a0f      	cmp	r2, #15
    425a:	bfa8      	it	ge
    425c:	220f      	movge	r2, #15
    425e:	e000      	b.n	4262 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    4260:	462a      	mov	r2, r5
    4262:	f341 3103 	sbfx	r1, r1, #12, #4
    4266:	18cb      	adds	r3, r1, r3
    4268:	d403      	bmi.n	4272 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    426a:	2b0f      	cmp	r3, #15
    426c:	bfa8      	it	ge
    426e:	230f      	movge	r3, #15
    4270:	e000      	b.n	4274 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    4272:	2300      	movs	r3, #0
    4274:	b2a1      	uxth	r1, r4
    4276:	2821      	cmp	r0, #33	; 0x21
    4278:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    427c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    4280:	bf84      	itt	hi
    4282:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    4286:	4323      	orrhi	r3, r4
    4288:	4618      	mov	r0, r3
    428a:	bd70      	pop	{r4, r5, r6, pc}
    428c:	50001378 	andpl	r1, r0, r8, ror r3
    4290:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4294:	50003fac 	andpl	r3, r0, ip, lsr #31

00004298 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    4298:	281f      	cmp	r0, #31
    429a:	bf83      	ittte	hi
    429c:	4b02      	ldrhi	r3, [pc, #8]	; (42a8 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    429e:	6818      	ldrhi	r0, [r3, #0]
    42a0:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    42a4:	2000      	movls	r0, #0
    42a6:	4770      	bx	lr
    42a8:	50001398 	mulpl	r0, r8, r3

000042ac <NOROM_SetupGetTrimForAdcShModeEn>:
    42ac:	2821      	cmp	r0, #33	; 0x21
    42ae:	bf83      	ittte	hi
    42b0:	4b02      	ldrhi	r3, [pc, #8]	; (42bc <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    42b2:	6818      	ldrhi	r0, [r3, #0]
    42b4:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    42b8:	2001      	movls	r0, #1
    42ba:	4770      	bx	lr
    42bc:	5000138c 	andpl	r1, r0, ip, lsl #7

000042c0 <NOROM_SetupGetTrimForAdcShVbufEn>:
    42c0:	2821      	cmp	r0, #33	; 0x21
    42c2:	bf83      	ittte	hi
    42c4:	4b02      	ldrhi	r3, [pc, #8]	; (42d0 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    42c6:	6818      	ldrhi	r0, [r3, #0]
    42c8:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    42cc:	2001      	movls	r0, #1
    42ce:	4770      	bx	lr
    42d0:	5000138c 	andpl	r1, r0, ip, lsl #7

000042d4 <NOROM_SetupGetTrimForXoscHfCtl>:
    42d4:	281f      	cmp	r0, #31
    42d6:	bf81      	itttt	hi
    42d8:	4b07      	ldrhi	r3, [pc, #28]	; (42f8 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    42da:	681b      	ldrhi	r3, [r3, #0]
    42dc:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    42e0:	0080      	lslhi	r0, r0, #2
    42e2:	bf81      	itttt	hi
    42e4:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    42e8:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    42ec:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    42f0:	4318      	orrhi	r0, r3
    42f2:	bf98      	it	ls
    42f4:	2000      	movls	r0, #0
    42f6:	4770      	bx	lr
    42f8:	50001398 	mulpl	r0, r8, r3

000042fc <NOROM_SetupGetTrimForXoscHfFastStart>:
    42fc:	4b02      	ldr	r3, [pc, #8]	; (4308 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    42fe:	6818      	ldr	r0, [r3, #0]
    4300:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	5000138c 	andpl	r1, r0, ip, lsl #7

0000430c <NOROM_SetupGetTrimForRadcExtCfg>:
    430c:	281f      	cmp	r0, #31
    430e:	bf81      	itttt	hi
    4310:	4b07      	ldrhi	r3, [pc, #28]	; (4330 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    4312:	681b      	ldrhi	r3, [r3, #0]
    4314:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    4318:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    431c:	bf81      	itttt	hi
    431e:	0400      	lslhi	r0, r0, #16
    4320:	031b      	lslhi	r3, r3, #12
    4322:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    4326:	b29b      	uxthhi	r3, r3
    4328:	bf8c      	ite	hi
    432a:	4318      	orrhi	r0, r3
    432c:	4801      	ldrls	r0, [pc, #4]	; (4334 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    432e:	4770      	bx	lr
    4330:	50001398 	mulpl	r0, r8, r3
    4334:	403f8000 	eorsmi	r8, pc, r0

00004338 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    4338:	2821      	cmp	r0, #33	; 0x21
    433a:	bf83      	ittte	hi
    433c:	4b02      	ldrhi	r3, [pc, #8]	; (4348 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    433e:	6818      	ldrhi	r0, [r3, #0]
    4340:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    4344:	2000      	movls	r0, #0
    4346:	4770      	bx	lr
    4348:	5000138c 	andpl	r1, r0, ip, lsl #7

0000434c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    434c:	2821      	cmp	r0, #33	; 0x21
    434e:	bf83      	ittte	hi
    4350:	4b02      	ldrhi	r3, [pc, #8]	; (435c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    4352:	6818      	ldrhi	r0, [r3, #0]
    4354:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    4358:	2000      	movls	r0, #0
    435a:	4770      	bx	lr
    435c:	5000138c 	andpl	r1, r0, ip, lsl #7

00004360 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    4360:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4362:	4605      	mov	r5, r0
    4364:	4608      	mov	r0, r1
    4366:	f7ff ff19 	bl	419c <NOROM_SetupGetTrimForAnabypassValue1>
    436a:	4c39      	ldr	r4, [pc, #228]	; (4450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    436c:	4602      	mov	r2, r0
    436e:	2118      	movs	r1, #24
    4370:	4620      	mov	r0, r4
    4372:	f000 fb33 	bl	49dc <NOROM_DDI32RegWrite>
    4376:	f7ff ff3f 	bl	41f8 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    437a:	4b36      	ldr	r3, [pc, #216]	; (4454 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    437c:	b280      	uxth	r0, r0
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	9000      	str	r0, [sp, #0]
    4382:	685e      	ldr	r6, [r3, #4]
    4384:	4620      	mov	r0, r4
    4386:	212c      	movs	r1, #44	; 0x2c
    4388:	f240 32ff 	movw	r2, #1023	; 0x3ff
    438c:	2300      	movs	r3, #0
    438e:	47b0      	blx	r6
    4390:	4b31      	ldr	r3, [pc, #196]	; (4458 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    4392:	4620      	mov	r0, r4
    4394:	681a      	ldr	r2, [r3, #0]
    4396:	211c      	movs	r1, #28
    4398:	f3c2 020d 	ubfx	r2, r2, #0, #14
    439c:	f000 fb1e 	bl	49dc <NOROM_DDI32RegWrite>
    43a0:	f7ff ff36 	bl	4210 <NOROM_SetupGetTrimForAmpcompTh2>
    43a4:	2114      	movs	r1, #20
    43a6:	4602      	mov	r2, r0
    43a8:	4620      	mov	r0, r4
    43aa:	f000 fb17 	bl	49dc <NOROM_DDI32RegWrite>
    43ae:	f7ff ff37 	bl	4220 <NOROM_SetupGetTrimForAmpcompTh1>
    43b2:	2110      	movs	r1, #16
    43b4:	4602      	mov	r2, r0
    43b6:	4620      	mov	r0, r4
    43b8:	f000 fb10 	bl	49dc <NOROM_DDI32RegWrite>
    43bc:	4628      	mov	r0, r5
    43be:	f7ff ff39 	bl	4234 <NOROM_SetupGetTrimForAmpcompCtrl>
    43c2:	210c      	movs	r1, #12
    43c4:	4602      	mov	r2, r0
    43c6:	4620      	mov	r0, r4
    43c8:	f000 fb08 	bl	49dc <NOROM_DDI32RegWrite>
    43cc:	4628      	mov	r0, r5
    43ce:	f7ff ff6d 	bl	42ac <NOROM_SetupGetTrimForAdcShModeEn>
    43d2:	0040      	lsls	r0, r0, #1
    43d4:	4e21      	ldr	r6, [pc, #132]	; (445c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    43d6:	f040 0020 	orr.w	r0, r0, #32
    43da:	b2c0      	uxtb	r0, r0
    43dc:	7030      	strb	r0, [r6, #0]
    43de:	4628      	mov	r0, r5
    43e0:	f7ff ff6e 	bl	42c0 <NOROM_SetupGetTrimForAdcShVbufEn>
    43e4:	f040 0010 	orr.w	r0, r0, #16
    43e8:	b2c0      	uxtb	r0, r0
    43ea:	7030      	strb	r0, [r6, #0]
    43ec:	4628      	mov	r0, r5
    43ee:	f7ff ff71 	bl	42d4 <NOROM_SetupGetTrimForXoscHfCtl>
    43f2:	2128      	movs	r1, #40	; 0x28
    43f4:	4602      	mov	r2, r0
    43f6:	4620      	mov	r0, r4
    43f8:	f000 faf0 	bl	49dc <NOROM_DDI32RegWrite>
    43fc:	4628      	mov	r0, r5
    43fe:	f7ff ff4b 	bl	4298 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    4402:	0040      	lsls	r0, r0, #1
    4404:	4b16      	ldr	r3, [pc, #88]	; (4460 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    4406:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    440a:	b2c0      	uxtb	r0, r0
    440c:	7018      	strb	r0, [r3, #0]
    440e:	4628      	mov	r0, r5
    4410:	f7ff ff92 	bl	4338 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    4414:	00c0      	lsls	r0, r0, #3
    4416:	4b13      	ldr	r3, [pc, #76]	; (4464 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    4418:	f060 007f 	orn	r0, r0, #127	; 0x7f
    441c:	b2c0      	uxtb	r0, r0
    441e:	7018      	strb	r0, [r3, #0]
    4420:	4628      	mov	r0, r5
    4422:	f7ff ff93 	bl	434c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    4426:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    442a:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    442e:	4b0e      	ldr	r3, [pc, #56]	; (4468 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    4430:	b280      	uxth	r0, r0
    4432:	8018      	strh	r0, [r3, #0]
    4434:	4628      	mov	r0, r5
    4436:	f7ff ff69 	bl	430c <NOROM_SetupGetTrimForRadcExtCfg>
    443a:	2108      	movs	r1, #8
    443c:	4602      	mov	r2, r0
    443e:	4620      	mov	r0, r4
    4440:	f000 facc 	bl	49dc <NOROM_DDI32RegWrite>
    4444:	4b09      	ldr	r3, [pc, #36]	; (446c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    4446:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    444a:	601a      	str	r2, [r3, #0]
    444c:	b002      	add	sp, #8
    444e:	bd70      	pop	{r4, r5, r6, pc}
    4450:	400ca000 	andmi	sl, ip, r0
    4454:	100001a4 	andne	r0, r0, r4, lsr #3
    4458:	5000137c 	andpl	r1, r0, ip, ror r3
    445c:	400ca149 	andmi	sl, ip, r9, asr #2
    4460:	400ca14c 	andmi	sl, ip, ip, asr #2
    4464:	400ca141 	andmi	sl, ip, r1, asr #2
    4468:	400ca1dc 	ldrdmi	sl, [ip], -ip
    446c:	400ca040 	andmi	sl, ip, r0, asr #32

00004470 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    4470:	b530      	push	{r4, r5, lr}
    4472:	4b14      	ldr	r3, [pc, #80]	; (44c4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    4474:	681b      	ldr	r3, [r3, #0]
    4476:	2b00      	cmp	r3, #0
    4478:	d1fb      	bne.n	4472 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    447a:	4a13      	ldr	r2, [pc, #76]	; (44c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    447c:	4913      	ldr	r1, [pc, #76]	; (44cc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    447e:	6813      	ldr	r3, [r2, #0]
    4480:	6809      	ldr	r1, [r1, #0]
    4482:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    4486:	f023 0307 	bic.w	r3, r3, #7
    448a:	f011 0f04 	tst.w	r1, #4
    448e:	4614      	mov	r4, r2
    4490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    4494:	d003      	beq.n	449e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    4496:	f043 0305 	orr.w	r3, r3, #5
    449a:	6013      	str	r3, [r2, #0]
    449c:	bd30      	pop	{r4, r5, pc}
    449e:	490c      	ldr	r1, [pc, #48]	; (44d0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    44a0:	f043 0004 	orr.w	r0, r3, #4
    44a4:	680d      	ldr	r5, [r1, #0]
    44a6:	07ad      	lsls	r5, r5, #30
    44a8:	d009      	beq.n	44be <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    44aa:	f043 0307 	orr.w	r3, r3, #7
    44ae:	6013      	str	r3, [r2, #0]
    44b0:	680b      	ldr	r3, [r1, #0]
    44b2:	f003 0303 	and.w	r3, r3, #3
    44b6:	2b03      	cmp	r3, #3
    44b8:	d1fa      	bne.n	44b0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    44ba:	6020      	str	r0, [r4, #0]
    44bc:	bd30      	pop	{r4, r5, pc}
    44be:	6010      	str	r0, [r2, #0]
    44c0:	bd30      	pop	{r4, r5, pc}
    44c2:	bf00      	nop
    44c4:	4268000c 	rsbmi	r0, r8, #12
    44c8:	40034004 	andmi	r4, r3, r4
    44cc:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    44d0:	40034000 	andmi	r4, r3, r0

000044d4 <NOROM_SetupSetAonRtcSubSecInc>:
    44d4:	4b07      	ldr	r3, [pc, #28]	; (44f4 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    44d6:	b282      	uxth	r2, r0
    44d8:	f3c0 4007 	ubfx	r0, r0, #16, #8
    44dc:	601a      	str	r2, [r3, #0]
    44de:	6058      	str	r0, [r3, #4]
    44e0:	2201      	movs	r2, #1
    44e2:	3308      	adds	r3, #8
    44e4:	601a      	str	r2, [r3, #0]
    44e6:	4a04      	ldr	r2, [pc, #16]	; (44f8 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    44e8:	6812      	ldr	r2, [r2, #0]
    44ea:	2a00      	cmp	r2, #0
    44ec:	d0fb      	beq.n	44e6 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    44ee:	2200      	movs	r2, #0
    44f0:	601a      	str	r2, [r3, #0]
    44f2:	4770      	bx	lr
    44f4:	400c603c 	andmi	r6, ip, ip, lsr r0
    44f8:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000044fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    44fc:	f3c0 4381 	ubfx	r3, r0, #18, #2
    4500:	2b01      	cmp	r3, #1
    4502:	b510      	push	{r4, lr}
    4504:	4604      	mov	r4, r0
    4506:	d002      	beq.n	450e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    4508:	2b02      	cmp	r3, #2
    450a:	d02f      	beq.n	456c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    450c:	e02a      	b.n	4564 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    450e:	4b42      	ldr	r3, [pc, #264]	; (4618 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	039a      	lsls	r2, r3, #14
    4514:	d426      	bmi.n	4564 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    4516:	4a41      	ldr	r2, [pc, #260]	; (461c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    4518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    451c:	6011      	str	r1, [r2, #0]
    451e:	4940      	ldr	r1, [pc, #256]	; (4620 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    4520:	f3c3 3003 	ubfx	r0, r3, #12, #4
    4524:	680a      	ldr	r2, [r1, #0]
    4526:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    452a:	4302      	orrs	r2, r0
    452c:	f3c3 4000 	ubfx	r0, r3, #16, #1
    4530:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    4534:	600a      	str	r2, [r1, #0]
    4536:	f851 2c01 	ldr.w	r2, [r1, #-1]
    453a:	f3c3 2003 	ubfx	r0, r3, #8, #4
    453e:	f022 020f 	bic.w	r2, r2, #15
    4542:	4302      	orrs	r2, r0
    4544:	f851 0c01 	ldr.w	r0, [r1, #-1]
    4548:	f841 2c01 	str.w	r2, [r1, #-1]
    454c:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4550:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    4554:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    4558:	4313      	orrs	r3, r2
    455a:	f851 2c02 	ldr.w	r2, [r1, #-2]
    455e:	f841 3c02 	str.w	r3, [r1, #-2]
    4562:	e003      	b.n	456c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    4564:	4b2d      	ldr	r3, [pc, #180]	; (461c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    4566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    456a:	601a      	str	r2, [r3, #0]
    456c:	4b2d      	ldr	r3, [pc, #180]	; (4624 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	071b      	lsls	r3, r3, #28
    4572:	bf5e      	ittt	pl
    4574:	4b2c      	ldrpl	r3, [pc, #176]	; (4628 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    4576:	2240      	movpl	r2, #64	; 0x40
    4578:	601a      	strpl	r2, [r3, #0]
    457a:	4b2c      	ldr	r3, [pc, #176]	; (462c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    457c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4580:	601a      	str	r2, [r3, #0]
    4582:	f7ff febb 	bl	42fc <NOROM_SetupGetTrimForXoscHfFastStart>
    4586:	4b2a      	ldr	r3, [pc, #168]	; (4630 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    4588:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    458c:	b2c0      	uxtb	r0, r0
    458e:	7018      	strb	r0, [r3, #0]
    4590:	f3c4 5081 	ubfx	r0, r4, #22, #2
    4594:	2801      	cmp	r0, #1
    4596:	d00b      	beq.n	45b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    4598:	d302      	bcc.n	45a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    459a:	2802      	cmp	r0, #2
    459c:	d026      	beq.n	45ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    459e:	e028      	b.n	45f2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    45a0:	2004      	movs	r0, #4
    45a2:	2101      	movs	r1, #1
    45a4:	f7ff fa84 	bl	3ab0 <NOROM_OSCClockSourceSet>
    45a8:	4822      	ldr	r0, [pc, #136]	; (4634 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    45aa:	f7ff ff93 	bl	44d4 <NOROM_SetupSetAonRtcSubSecInc>
    45ae:	e024      	b.n	45fa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    45b0:	f7ff faac 	bl	3b0c <NOROM_OSCClockSourceGet>
    45b4:	4604      	mov	r4, r0
    45b6:	2004      	movs	r0, #4
    45b8:	4621      	mov	r1, r4
    45ba:	f7ff fa79 	bl	3ab0 <NOROM_OSCClockSourceSet>
    45be:	2004      	movs	r0, #4
    45c0:	f7ff faa4 	bl	3b0c <NOROM_OSCClockSourceGet>
    45c4:	42a0      	cmp	r0, r4
    45c6:	d1fa      	bne.n	45be <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    45c8:	4b1b      	ldr	r3, [pc, #108]	; (4638 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    45ca:	681c      	ldr	r4, [r3, #0]
    45cc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    45d0:	f7ff ff80 	bl	44d4 <NOROM_SetupSetAonRtcSubSecInc>
    45d4:	4b19      	ldr	r3, [pc, #100]	; (463c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    45d6:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	0e20      	lsrs	r0, r4, #24
    45de:	681b      	ldr	r3, [r3, #0]
    45e0:	2107      	movs	r1, #7
    45e2:	4798      	blx	r3
    45e4:	4b0d      	ldr	r3, [pc, #52]	; (461c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    45e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    45ea:	601a      	str	r2, [r3, #0]
    45ec:	2004      	movs	r0, #4
    45ee:	2103      	movs	r1, #3
    45f0:	e001      	b.n	45f6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    45f2:	2004      	movs	r0, #4
    45f4:	2102      	movs	r1, #2
    45f6:	f7ff fa5b 	bl	3ab0 <NOROM_OSCClockSourceSet>
    45fa:	4b11      	ldr	r3, [pc, #68]	; (4640 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    45fc:	4a11      	ldr	r2, [pc, #68]	; (4644 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    45fe:	681b      	ldr	r3, [r3, #0]
    4600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4604:	7013      	strb	r3, [r2, #0]
    4606:	f647 0218 	movw	r2, #30744	; 0x7818
    460a:	4b0f      	ldr	r3, [pc, #60]	; (4648 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    460c:	801a      	strh	r2, [r3, #0]
    460e:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    4612:	3b44      	subs	r3, #68	; 0x44
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	bd10      	pop	{r4, pc}
    4618:	5000138c 	andpl	r1, r0, ip, lsl #7
    461c:	400ca040 	andmi	sl, ip, r0, asr #32
    4620:	4008600c 	andmi	r6, r8, ip
    4624:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4628:	400ca068 	andmi	sl, ip, r8, rrx
    462c:	400ca080 	andmi	sl, ip, r0, lsl #1
    4630:	400ca108 	andmi	sl, ip, r8, lsl #2
    4634:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    4638:	50003fa8 	andpl	r3, r0, r8, lsr #31
    463c:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    4640:	5000136c 	andpl	r1, r0, ip, ror #6
    4644:	400cb00b 	andmi	fp, ip, fp
    4648:	400cb070 	andmi	fp, ip, r0, ror r0

0000464c <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    464c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4650:	4b77      	ldr	r3, [pc, #476]	; (4830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    4652:	4607      	mov	r7, r0
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	4e77      	ldr	r6, [pc, #476]	; (4834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4658:	f013 0f02 	tst.w	r3, #2
    465c:	d004      	beq.n	4668 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    465e:	2308      	movs	r3, #8
    4660:	71b3      	strb	r3, [r6, #6]
    4662:	4a75      	ldr	r2, [pc, #468]	; (4838 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    4664:	4b75      	ldr	r3, [pc, #468]	; (483c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    4666:	e0df      	b.n	4828 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    4668:	f7ff f9e6 	bl	3a38 <NOROM_AONBatMonTemperatureGetDegC>
    466c:	4b74      	ldr	r3, [pc, #464]	; (4840 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    466e:	681d      	ldr	r5, [r3, #0]
    4670:	172a      	asrs	r2, r5, #28
    4672:	02ac      	lsls	r4, r5, #10
    4674:	f102 0101 	add.w	r1, r2, #1
    4678:	d408      	bmi.n	468c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    467a:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    467e:	10db      	asrs	r3, r3, #3
    4680:	2b08      	cmp	r3, #8
    4682:	bfa8      	it	ge
    4684:	2308      	movge	r3, #8
    4686:	4299      	cmp	r1, r3
    4688:	bfb8      	it	lt
    468a:	4619      	movlt	r1, r3
    468c:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    4690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4694:	d10a      	bne.n	46ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    4696:	4b6b      	ldr	r3, [pc, #428]	; (4844 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    4698:	681a      	ldr	r2, [r3, #0]
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	f3c2 2204 	ubfx	r2, r2, #8, #5
    46a0:	2a15      	cmp	r2, #21
    46a2:	bf88      	it	hi
    46a4:	3a20      	subhi	r2, #32
    46a6:	f3c3 6304 	ubfx	r3, r3, #24, #5
    46aa:	e00a      	b.n	46c2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    46ac:	4b66      	ldr	r3, [pc, #408]	; (4848 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    46ae:	681a      	ldr	r2, [r3, #0]
    46b0:	4b66      	ldr	r3, [pc, #408]	; (484c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    46b2:	f3c2 6204 	ubfx	r2, r2, #24, #5
    46b6:	681b      	ldr	r3, [r3, #0]
    46b8:	2a15      	cmp	r2, #21
    46ba:	bf88      	it	hi
    46bc:	3a20      	subhi	r2, #32
    46be:	f3c3 4304 	ubfx	r3, r3, #16, #5
    46c2:	2b15      	cmp	r3, #21
    46c4:	440a      	add	r2, r1
    46c6:	bf88      	it	hi
    46c8:	3b20      	subhi	r3, #32
    46ca:	2a15      	cmp	r2, #21
    46cc:	dc05      	bgt.n	46da <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    46ce:	f06f 0109 	mvn.w	r1, #9
    46d2:	428a      	cmp	r2, r1
    46d4:	bfb8      	it	lt
    46d6:	460a      	movlt	r2, r1
    46d8:	e000      	b.n	46dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    46da:	2215      	movs	r2, #21
    46dc:	4c5c      	ldr	r4, [pc, #368]	; (4850 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    46de:	f002 011f 	and.w	r1, r2, #31
    46e2:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    46e6:	8021      	strh	r1, [r4, #0]
    46e8:	495a      	ldr	r1, [pc, #360]	; (4854 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    46ea:	6809      	ldr	r1, [r1, #0]
    46ec:	f011 0403 	ands.w	r4, r1, #3
    46f0:	bf18      	it	ne
    46f2:	2401      	movne	r4, #1
    46f4:	0749      	lsls	r1, r1, #29
    46f6:	bf48      	it	mi
    46f8:	f044 0402 	orrmi.w	r4, r4, #2
    46fc:	b10f      	cbz	r7, 4702 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    46fe:	f044 0404 	orr.w	r4, r4, #4
    4702:	f996 1007 	ldrsb.w	r1, [r6, #7]
    4706:	1a41      	subs	r1, r0, r1
    4708:	2904      	cmp	r1, #4
    470a:	dc03      	bgt.n	4714 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    470c:	4949      	ldr	r1, [pc, #292]	; (4834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    470e:	7989      	ldrb	r1, [r1, #6]
    4710:	428c      	cmp	r4, r1
    4712:	d06f      	beq.n	47f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    4714:	f1b0 010f 	subs.w	r1, r0, #15
    4718:	9101      	str	r1, [sp, #4]
    471a:	f004 0101 	and.w	r1, r4, #1
    471e:	f8df a144 	ldr.w	sl, [pc, #324]	; 4864 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    4722:	f004 0904 	and.w	r9, r4, #4
    4726:	f004 0802 	and.w	r8, r4, #2
    472a:	460f      	mov	r7, r1
    472c:	d42a      	bmi.n	4784 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    472e:	9901      	ldr	r1, [sp, #4]
    4730:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4734:	ea4f 2e21 	mov.w	lr, r1, asr #8
    4738:	f1be 0f07 	cmp.w	lr, #7
    473c:	9101      	str	r1, [sp, #4]
    473e:	d801      	bhi.n	4744 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    4740:	d104      	bne.n	474c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    4742:	e001      	b.n	4748 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    4744:	f04f 0e07 	mov.w	lr, #7
    4748:	2106      	movs	r1, #6
    474a:	e000      	b.n	474e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    474c:	4671      	mov	r1, lr
    474e:	f8df b118 	ldr.w	fp, [pc, #280]	; 4868 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    4752:	3101      	adds	r1, #1
    4754:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    4758:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    475c:	ebc1 0c0c 	rsb	ip, r1, ip
    4760:	fa5f f18c 	uxtb.w	r1, ip
    4764:	f1b9 0f00 	cmp.w	r9, #0
    4768:	d002      	beq.n	4770 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    476a:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    476e:	4459      	add	r1, fp
    4770:	f1b8 0f00 	cmp.w	r8, #0
    4774:	d002      	beq.n	477c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    4776:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    477a:	4459      	add	r1, fp
    477c:	b12f      	cbz	r7, 478a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    477e:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    4782:	e002      	b.n	478a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4784:	f04f 0e00 	mov.w	lr, #0
    4788:	4671      	mov	r1, lr
    478a:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    478e:	fa5f fc8a 	uxtb.w	ip, sl
    4792:	f1b9 0f00 	cmp.w	r9, #0
    4796:	d002      	beq.n	479e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    4798:	f3ca 2907 	ubfx	r9, sl, #8, #8
    479c:	44cc      	add	ip, r9
    479e:	f1b8 0f00 	cmp.w	r8, #0
    47a2:	d002      	beq.n	47aa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    47a4:	f3ca 4807 	ubfx	r8, sl, #16, #8
    47a8:	44c4      	add	ip, r8
    47aa:	b10f      	cbz	r7, 47b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    47ac:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    47b0:	1a9b      	subs	r3, r3, r2
    47b2:	2b01      	cmp	r3, #1
    47b4:	bfb8      	it	lt
    47b6:	2301      	movlt	r3, #1
    47b8:	9f01      	ldr	r7, [sp, #4]
    47ba:	2234      	movs	r2, #52	; 0x34
    47bc:	4353      	muls	r3, r2
    47be:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    47c2:	4379      	muls	r1, r7
    47c4:	b2ed      	uxtb	r5, r5
    47c6:	436b      	muls	r3, r5
    47c8:	3180      	adds	r1, #128	; 0x80
    47ca:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    47ce:	fbb3 f1f1 	udiv	r1, r3, r1
    47d2:	f64f 7cff 	movw	ip, #65535	; 0xffff
    47d6:	4561      	cmp	r1, ip
    47d8:	bf28      	it	cs
    47da:	4661      	movcs	r1, ip
    47dc:	287f      	cmp	r0, #127	; 0x7f
    47de:	80b1      	strh	r1, [r6, #4]
    47e0:	dc05      	bgt.n	47ee <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    47e2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    47e6:	4298      	cmp	r0, r3
    47e8:	bfb8      	it	lt
    47ea:	4618      	movlt	r0, r3
    47ec:	e000      	b.n	47f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    47ee:	207f      	movs	r0, #127	; 0x7f
    47f0:	71f0      	strb	r0, [r6, #7]
    47f2:	71b4      	strb	r4, [r6, #6]
    47f4:	4b18      	ldr	r3, [pc, #96]	; (4858 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    47f6:	2100      	movs	r1, #0
    47f8:	681b      	ldr	r3, [r3, #0]
    47fa:	6033      	str	r3, [r6, #0]
    47fc:	88b3      	ldrh	r3, [r6, #4]
    47fe:	2b1e      	cmp	r3, #30
    4800:	bf9e      	ittt	ls
    4802:	4a0c      	ldrls	r2, [pc, #48]	; (4834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4804:	231f      	movls	r3, #31
    4806:	8093      	strhls	r3, [r2, #4]
    4808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    480c:	d302      	bcc.n	4814 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    480e:	085b      	lsrs	r3, r3, #1
    4810:	3101      	adds	r1, #1
    4812:	e7f9      	b.n	4808 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    4814:	4a11      	ldr	r2, [pc, #68]	; (485c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    4816:	3b0f      	subs	r3, #15
    4818:	430a      	orrs	r2, r1
    481a:	091b      	lsrs	r3, r3, #4
    481c:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    4820:	4a06      	ldr	r2, [pc, #24]	; (483c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    4822:	6013      	str	r3, [r2, #0]
    4824:	4b0e      	ldr	r3, [pc, #56]	; (4860 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    4826:	2200      	movs	r2, #0
    4828:	601a      	str	r2, [r3, #0]
    482a:	b003      	add	sp, #12
    482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4830:	40090000 	andmi	r0, r9, r0
    4834:	20000628 	andcs	r0, r0, r8, lsr #12
    4838:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    483c:	40091030 	andmi	r1, r9, r0, lsr r0
    4840:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    4844:	50001388 	andpl	r1, r0, r8, lsl #7
    4848:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    484c:	5000113c 	andpl	r1, r0, ip, lsr r1
    4850:	4008626e 	andmi	r6, r8, lr, ror #4
    4854:	40082224 	andmi	r2, r8, r4, lsr #4
    4858:	40092008 	andmi	r2, r9, r8
    485c:	80a4e700 	adchi	lr, r4, r0, lsl #14
    4860:	40091034 	andmi	r1, r9, r4, lsr r0
    4864:	5000139c 	mulpl	r0, ip, r3
    4868:	50001398 	mulpl	r0, r8, r3

0000486c <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    486c:	b510      	push	{r4, lr}
    486e:	4b14      	ldr	r3, [pc, #80]	; (48c0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    4870:	681c      	ldr	r4, [r3, #0]
    4872:	b2a4      	uxth	r4, r4
    4874:	b314      	cbz	r4, 48bc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    4876:	f7ff f8df 	bl	3a38 <NOROM_AONBatMonTemperatureGetDegC>
    487a:	4b12      	ldr	r3, [pc, #72]	; (48c4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    487c:	f993 2007 	ldrsb.w	r2, [r3, #7]
    4880:	4290      	cmp	r0, r2
    4882:	da05      	bge.n	4890 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    4884:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    4888:	4290      	cmp	r0, r2
    488a:	bfb8      	it	lt
    488c:	4610      	movlt	r0, r2
    488e:	71d8      	strb	r0, [r3, #7]
    4890:	889a      	ldrh	r2, [r3, #4]
    4892:	490c      	ldr	r1, [pc, #48]	; (48c4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4894:	4294      	cmp	r4, r2
    4896:	d310      	bcc.n	48ba <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    4898:	4b0b      	ldr	r3, [pc, #44]	; (48c8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    489a:	6808      	ldr	r0, [r1, #0]
    489c:	681b      	ldr	r3, [r3, #0]
    489e:	1aa4      	subs	r4, r4, r2
    48a0:	3302      	adds	r3, #2
    48a2:	1a1b      	subs	r3, r3, r0
    48a4:	2b1f      	cmp	r3, #31
    48a6:	bf28      	it	cs
    48a8:	231f      	movcs	r3, #31
    48aa:	085b      	lsrs	r3, r3, #1
    48ac:	40dc      	lsrs	r4, r3
    48ae:	4414      	add	r4, r2
    48b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    48b4:	4294      	cmp	r4, r2
    48b6:	bf28      	it	cs
    48b8:	4614      	movcs	r4, r2
    48ba:	808c      	strh	r4, [r1, #4]
    48bc:	bd10      	pop	{r4, pc}
    48be:	bf00      	nop
    48c0:	40091034 	andmi	r1, r9, r4, lsr r0
    48c4:	20000628 	andcs	r0, r0, r8, lsr #12
    48c8:	40092008 	andmi	r2, r9, r8

000048cc <NOROM_SysCtrlResetSourceGet>:
    48cc:	4b04      	ldr	r3, [pc, #16]	; (48e0 <NOROM_SysCtrlResetSourceGet+0x14>)
    48ce:	681a      	ldr	r2, [r3, #0]
    48d0:	0412      	lsls	r2, r2, #16
    48d2:	bf5a      	itte	pl
    48d4:	6818      	ldrpl	r0, [r3, #0]
    48d6:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    48da:	2008      	movmi	r0, #8
    48dc:	4770      	bx	lr
    48de:	bf00      	nop
    48e0:	40090004 	andmi	r0, r9, r4

000048e4 <NOROM_ChipInfo_GetChipFamily>:
    48e4:	f64b 129a 	movw	r2, #47514	; 0xb99a
    48e8:	4b10      	ldr	r3, [pc, #64]	; (492c <NOROM_ChipInfo_GetChipFamily+0x48>)
    48ea:	6818      	ldr	r0, [r3, #0]
    48ec:	f3c0 300f 	ubfx	r0, r0, #12, #16
    48f0:	4290      	cmp	r0, r2
    48f2:	d106      	bne.n	4902 <NOROM_ChipInfo_GetChipFamily+0x1e>
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	0f1b      	lsrs	r3, r3, #28
    48f8:	2b0b      	cmp	r3, #11
    48fa:	bf0c      	ite	eq
    48fc:	2004      	moveq	r0, #4
    48fe:	2000      	movne	r0, #0
    4900:	e011      	b.n	4926 <NOROM_ChipInfo_GetChipFamily+0x42>
    4902:	f64b 13be 	movw	r3, #47550	; 0xb9be
    4906:	4298      	cmp	r0, r3
    4908:	d00a      	beq.n	4920 <NOROM_ChipInfo_GetChipFamily+0x3c>
    490a:	f64b 3341 	movw	r3, #47937	; 0xbb41
    490e:	4298      	cmp	r0, r3
    4910:	d008      	beq.n	4924 <NOROM_ChipInfo_GetChipFamily+0x40>
    4912:	f64b 3320 	movw	r3, #47904	; 0xbb20
    4916:	4298      	cmp	r0, r3
    4918:	bf14      	ite	ne
    491a:	20ff      	movne	r0, #255	; 0xff
    491c:	2002      	moveq	r0, #2
    491e:	e002      	b.n	4926 <NOROM_ChipInfo_GetChipFamily+0x42>
    4920:	2001      	movs	r0, #1
    4922:	e000      	b.n	4926 <NOROM_ChipInfo_GetChipFamily+0x42>
    4924:	2003      	movs	r0, #3
    4926:	b240      	sxtb	r0, r0
    4928:	4770      	bx	lr
    492a:	bf00      	nop
    492c:	50001318 	andpl	r1, r0, r8, lsl r3

00004930 <NOROM_ChipInfo_GetHwRevision>:
    4930:	b538      	push	{r3, r4, r5, lr}
    4932:	4b19      	ldr	r3, [pc, #100]	; (4998 <NOROM_ChipInfo_GetHwRevision+0x68>)
    4934:	681d      	ldr	r5, [r3, #0]
    4936:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    493a:	6818      	ldr	r0, [r3, #0]
    493c:	0f2d      	lsrs	r5, r5, #28
    493e:	b2c4      	uxtb	r4, r0
    4940:	2c80      	cmp	r4, #128	; 0x80
    4942:	bf28      	it	cs
    4944:	2400      	movcs	r4, #0
    4946:	f7ff ffcd 	bl	48e4 <NOROM_ChipInfo_GetChipFamily>
    494a:	2804      	cmp	r0, #4
    494c:	d821      	bhi.n	4992 <NOROM_ChipInfo_GetHwRevision+0x62>
    494e:	e8df f000 	tbb	[pc, r0]
    4952:	1b1b1303 	blne	6c9566 <__ccfg+0x6a95be>
    4956:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    495a:	2d07      	cmp	r5, #7
    495c:	d819      	bhi.n	4992 <NOROM_ChipInfo_GetHwRevision+0x62>
    495e:	e8df f005 	tbb	[pc, r5]
    4962:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    4966:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    496a:	2014      	movs	r0, #20
    496c:	e012      	b.n	4994 <NOROM_ChipInfo_GetHwRevision+0x64>
    496e:	2015      	movs	r0, #21
    4970:	e010      	b.n	4994 <NOROM_ChipInfo_GetHwRevision+0x64>
    4972:	f104 0016 	add.w	r0, r4, #22
    4976:	e00a      	b.n	498e <NOROM_ChipInfo_GetHwRevision+0x5e>
    4978:	b125      	cbz	r5, 4984 <NOROM_ChipInfo_GetHwRevision+0x54>
    497a:	2d02      	cmp	r5, #2
    497c:	d109      	bne.n	4992 <NOROM_ChipInfo_GetHwRevision+0x62>
    497e:	f104 0014 	add.w	r0, r4, #20
    4982:	e004      	b.n	498e <NOROM_ChipInfo_GetHwRevision+0x5e>
    4984:	200a      	movs	r0, #10
    4986:	e005      	b.n	4994 <NOROM_ChipInfo_GetHwRevision+0x64>
    4988:	b91d      	cbnz	r5, 4992 <NOROM_ChipInfo_GetHwRevision+0x62>
    498a:	f104 000a 	add.w	r0, r4, #10
    498e:	b2c0      	uxtb	r0, r0
    4990:	e000      	b.n	4994 <NOROM_ChipInfo_GetHwRevision+0x64>
    4992:	20ff      	movs	r0, #255	; 0xff
    4994:	b240      	sxtb	r0, r0
    4996:	bd38      	pop	{r3, r4, r5, pc}
    4998:	50001318 	andpl	r1, r0, r8, lsl r3

0000499c <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    499c:	b508      	push	{r3, lr}
    499e:	f7ff ffa1 	bl	48e4 <NOROM_ChipInfo_GetChipFamily>
    49a2:	2801      	cmp	r0, #1
    49a4:	d103      	bne.n	49ae <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    49a6:	f7ff ffc3 	bl	4930 <NOROM_ChipInfo_GetHwRevision>
    49aa:	2813      	cmp	r0, #19
    49ac:	dc00      	bgt.n	49b0 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    49ae:	e7fe      	b.n	49ae <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    49b0:	bd08      	pop	{r3, pc}
	...

000049b4 <AuxAdiDdiSafeWrite.constprop.1>:
    49b4:	b538      	push	{r3, r4, r5, lr}
    49b6:	4604      	mov	r4, r0
    49b8:	460d      	mov	r5, r1
    49ba:	f7ff f871 	bl	3aa0 <NOROM_CPUcpsid>
    49be:	4b06      	ldr	r3, [pc, #24]	; (49d8 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    49c0:	681a      	ldr	r2, [r3, #0]
    49c2:	2a00      	cmp	r2, #0
    49c4:	d0fb      	beq.n	49be <AuxAdiDdiSafeWrite.constprop.1+0xa>
    49c6:	2201      	movs	r2, #1
    49c8:	6025      	str	r5, [r4, #0]
    49ca:	601a      	str	r2, [r3, #0]
    49cc:	b918      	cbnz	r0, 49d6 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    49ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    49d2:	f7ff b869 	b.w	3aa8 <NOROM_CPUcpsie>
    49d6:	bd38      	pop	{r3, r4, r5, pc}
    49d8:	400c8000 	andmi	r8, ip, r0

000049dc <NOROM_DDI32RegWrite>:
    49dc:	4408      	add	r0, r1
    49de:	4611      	mov	r1, r2
    49e0:	f7ff bfe8 	b.w	49b4 <AuxAdiDdiSafeWrite.constprop.1>

000049e4 <memcpy>:
    49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e6:	46c6      	mov	lr, r8
    49e8:	b500      	push	{lr}
    49ea:	2a0f      	cmp	r2, #15
    49ec:	d945      	bls.n	4a7a <memcpy+0x96>
    49ee:	000b      	movs	r3, r1
    49f0:	2603      	movs	r6, #3
    49f2:	4303      	orrs	r3, r0
    49f4:	401e      	ands	r6, r3
    49f6:	000c      	movs	r4, r1
    49f8:	0003      	movs	r3, r0
    49fa:	2e00      	cmp	r6, #0
    49fc:	d142      	bne.n	4a84 <memcpy+0xa0>
    49fe:	0015      	movs	r5, r2
    4a00:	3d10      	subs	r5, #16
    4a02:	092d      	lsrs	r5, r5, #4
    4a04:	46ac      	mov	ip, r5
    4a06:	012d      	lsls	r5, r5, #4
    4a08:	46a8      	mov	r8, r5
    4a0a:	4480      	add	r8, r0
    4a0c:	e000      	b.n	4a10 <memcpy+0x2c>
    4a0e:	003b      	movs	r3, r7
    4a10:	6867      	ldr	r7, [r4, #4]
    4a12:	605f      	str	r7, [r3, #4]
    4a14:	68e7      	ldr	r7, [r4, #12]
    4a16:	60df      	str	r7, [r3, #12]
    4a18:	001f      	movs	r7, r3
    4a1a:	6825      	ldr	r5, [r4, #0]
    4a1c:	601d      	str	r5, [r3, #0]
    4a1e:	68a5      	ldr	r5, [r4, #8]
    4a20:	3710      	adds	r7, #16
    4a22:	609d      	str	r5, [r3, #8]
    4a24:	3410      	adds	r4, #16
    4a26:	4543      	cmp	r3, r8
    4a28:	d1f1      	bne.n	4a0e <memcpy+0x2a>
    4a2a:	4665      	mov	r5, ip
    4a2c:	230f      	movs	r3, #15
    4a2e:	240c      	movs	r4, #12
    4a30:	3501      	adds	r5, #1
    4a32:	012d      	lsls	r5, r5, #4
    4a34:	1949      	adds	r1, r1, r5
    4a36:	4013      	ands	r3, r2
    4a38:	1945      	adds	r5, r0, r5
    4a3a:	4214      	tst	r4, r2
    4a3c:	d025      	beq.n	4a8a <memcpy+0xa6>
    4a3e:	598c      	ldr	r4, [r1, r6]
    4a40:	51ac      	str	r4, [r5, r6]
    4a42:	3604      	adds	r6, #4
    4a44:	1b9c      	subs	r4, r3, r6
    4a46:	2c03      	cmp	r4, #3
    4a48:	d8f9      	bhi.n	4a3e <memcpy+0x5a>
    4a4a:	2403      	movs	r4, #3
    4a4c:	3b04      	subs	r3, #4
    4a4e:	089b      	lsrs	r3, r3, #2
    4a50:	3301      	adds	r3, #1
    4a52:	009b      	lsls	r3, r3, #2
    4a54:	4022      	ands	r2, r4
    4a56:	18ed      	adds	r5, r5, r3
    4a58:	18c9      	adds	r1, r1, r3
    4a5a:	1e56      	subs	r6, r2, #1
    4a5c:	2a00      	cmp	r2, #0
    4a5e:	d007      	beq.n	4a70 <memcpy+0x8c>
    4a60:	2300      	movs	r3, #0
    4a62:	e000      	b.n	4a66 <memcpy+0x82>
    4a64:	0023      	movs	r3, r4
    4a66:	5cca      	ldrb	r2, [r1, r3]
    4a68:	1c5c      	adds	r4, r3, #1
    4a6a:	54ea      	strb	r2, [r5, r3]
    4a6c:	429e      	cmp	r6, r3
    4a6e:	d1f9      	bne.n	4a64 <memcpy+0x80>
    4a70:	bc04      	pop	{r2}
    4a72:	4690      	mov	r8, r2
    4a74:	bcf0      	pop	{r4, r5, r6, r7}
    4a76:	bc02      	pop	{r1}
    4a78:	4708      	bx	r1
    4a7a:	0005      	movs	r5, r0
    4a7c:	1e56      	subs	r6, r2, #1
    4a7e:	2a00      	cmp	r2, #0
    4a80:	d1ee      	bne.n	4a60 <memcpy+0x7c>
    4a82:	e7f5      	b.n	4a70 <memcpy+0x8c>
    4a84:	1e56      	subs	r6, r2, #1
    4a86:	0005      	movs	r5, r0
    4a88:	e7ea      	b.n	4a60 <memcpy+0x7c>
    4a8a:	001a      	movs	r2, r3
    4a8c:	e7f6      	b.n	4a7c <memcpy+0x98>
    4a8e:	46c0      	nop			; (mov r8, r8)

00004a90 <srand>:
    4a90:	2200      	movs	r2, #0
    4a92:	4b03      	ldr	r3, [pc, #12]	; (4aa0 <srand+0x10>)
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	33a8      	adds	r3, #168	; 0xa8
    4a98:	6018      	str	r0, [r3, #0]
    4a9a:	605a      	str	r2, [r3, #4]
    4a9c:	4770      	bx	lr
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	20000110 	andcs	r0, r0, r0, lsl r1

00004aa4 <rand>:
    4aa4:	4b0a      	ldr	r3, [pc, #40]	; (4ad0 <rand+0x2c>)
    4aa6:	b510      	push	{r4, lr}
    4aa8:	681c      	ldr	r4, [r3, #0]
    4aaa:	34a8      	adds	r4, #168	; 0xa8
    4aac:	6820      	ldr	r0, [r4, #0]
    4aae:	6861      	ldr	r1, [r4, #4]
    4ab0:	4a08      	ldr	r2, [pc, #32]	; (4ad4 <rand+0x30>)
    4ab2:	4b09      	ldr	r3, [pc, #36]	; (4ad8 <rand+0x34>)
    4ab4:	f000 f812 	bl	4adc <__aeabi_lmul>
    4ab8:	2201      	movs	r2, #1
    4aba:	2300      	movs	r3, #0
    4abc:	1880      	adds	r0, r0, r2
    4abe:	4159      	adcs	r1, r3
    4ac0:	6020      	str	r0, [r4, #0]
    4ac2:	6061      	str	r1, [r4, #4]
    4ac4:	0048      	lsls	r0, r1, #1
    4ac6:	0840      	lsrs	r0, r0, #1
    4ac8:	bc10      	pop	{r4}
    4aca:	bc02      	pop	{r1}
    4acc:	4708      	bx	r1
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	20000110 	andcs	r0, r0, r0, lsl r1
    4ad4:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    4ad8:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

00004adc <__aeabi_lmul>:
    4adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ade:	000f      	movs	r7, r1
    4ae0:	0001      	movs	r1, r0
    4ae2:	46c6      	mov	lr, r8
    4ae4:	4684      	mov	ip, r0
    4ae6:	0415      	lsls	r5, r2, #16
    4ae8:	0400      	lsls	r0, r0, #16
    4aea:	0c14      	lsrs	r4, r2, #16
    4aec:	0c00      	lsrs	r0, r0, #16
    4aee:	0c09      	lsrs	r1, r1, #16
    4af0:	0c2d      	lsrs	r5, r5, #16
    4af2:	002e      	movs	r6, r5
    4af4:	4346      	muls	r6, r0
    4af6:	434d      	muls	r5, r1
    4af8:	4360      	muls	r0, r4
    4afa:	4361      	muls	r1, r4
    4afc:	1940      	adds	r0, r0, r5
    4afe:	0c34      	lsrs	r4, r6, #16
    4b00:	1824      	adds	r4, r4, r0
    4b02:	b500      	push	{lr}
    4b04:	42a5      	cmp	r5, r4
    4b06:	d903      	bls.n	4b10 <__aeabi_lmul+0x34>
    4b08:	2080      	movs	r0, #128	; 0x80
    4b0a:	0240      	lsls	r0, r0, #9
    4b0c:	4680      	mov	r8, r0
    4b0e:	4441      	add	r1, r8
    4b10:	0c25      	lsrs	r5, r4, #16
    4b12:	186d      	adds	r5, r5, r1
    4b14:	4661      	mov	r1, ip
    4b16:	4359      	muls	r1, r3
    4b18:	437a      	muls	r2, r7
    4b1a:	0430      	lsls	r0, r6, #16
    4b1c:	1949      	adds	r1, r1, r5
    4b1e:	0424      	lsls	r4, r4, #16
    4b20:	0c00      	lsrs	r0, r0, #16
    4b22:	1820      	adds	r0, r4, r0
    4b24:	1889      	adds	r1, r1, r2
    4b26:	bc04      	pop	{r2}
    4b28:	4690      	mov	r8, r2
    4b2a:	bcf0      	pop	{r4, r5, r6, r7}
    4b2c:	bc04      	pop	{r2}
    4b2e:	4710      	bx	r2
    4b30:	444e4553 	strbmi	r4, [lr], #-1363	; 0xfffffaad
    4b34:	20474e49 	subcs	r4, r7, r9, asr #28
    4b38:	434f5250 	movtmi	r5, #62032	; 0xf250
    4b3c:	52554445 	subspl	r4, r5, #1157627904	; 0x45000000
    4b40:	20490045 	subcs	r0, r9, r5, asr #32
    4b44:	74206d61 	strtvc	r6, [r0], #-3425	; 0xfffff29f
    4b48:	656d2068 	strbvs	r2, [sp, #-104]!	; 0xffffff98
    4b4c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4b50:	49472065 	stmdbmi	r7, {r0, r2, r5, r6, sp}^
    4b54:	64252044 	strtvs	r2, [r5], #-68	; 0xffffffbc
    4b58:	73654d00 	cmnvc	r5, #0, 26
    4b5c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4b60:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4b64:	000a0d74 	andeq	r0, sl, r4, ror sp
    4b68:	656e776f 	strbvs	r7, [lr, #-1903]!	; 0xfffff891
    4b6c:	64692072 	strbtvs	r2, [r9], #-114	; 0xffffff8e
    4b70:	0a642520 	beq	190dff8 <__ccfg+0x18ee050>
    4b74:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4b78:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
    4b7c:	25207972 	strcs	r7, [r0, #-2418]!	; 0xfffff68e
    4b80:	0a0d0073 	beq	344d54 <__ccfg+0x324dac>
    4b84:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4b88:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
    4b8c:	00302067 	eorseq	r2, r0, r7, rrx
    4b90:	65720a0d 	ldrbvs	r0, [r2, #-2573]!	; 0xfffff5f3
    4b94:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4b98:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4b9c:	0a0d0031 	beq	344c68 <__ccfg+0x324cc0>
    4ba0:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4ba4:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
    4ba8:	00322067 	eorseq	r2, r2, r7, rrx
    4bac:	50540a0d 	subspl	r0, r4, sp, lsl #20
    4bb0:	25203a45 	strcs	r3, [r0, #-2629]!	; 0xfffff5bb
    4bb4:	0a0d0064 	beq	344d4c <__ccfg+0x324da4>
    4bb8:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4bbc:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
    4bc0:	00332067 	eorseq	r2, r3, r7, rrx
    4bc4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
    4bc8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    4bcc:	6f742067 	svcvs	0x00742067
    4bd0:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4bd4:	00726564 	rsbseq	r6, r2, r4, ror #10
    4bd8:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4bdc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4be0:	63657220 	cmnvs	r5, #32, 4
    4be4:	20657720 	rsbcs	r7, r5, r0, lsr #14
    4be8:	6b6f7262 	blvs	1be1578 <__ccfg+0x1bc15d0>
    4bec:	0a0d0065 	beq	344d88 <__ccfg+0x324de0>
    4bf0:	61657243 	cmnvs	r5, r3, asr #4
    4bf4:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4bf8:	69206365 	stmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sp, lr}
    4bfc:	7465626e 	strbtvc	r6, [r5], #-622	; 0xfffffd92
    4c00:	6e656577 	mcrvs	5, 3, r6, cr5, cr7, {3}
    4c04:	3a666920 	bcc	199f08c <__ccfg+0x197f0e4>
    4c08:	7a695320 	bvc	1a59890 <__ccfg+0x1a398e8>
    4c0c:	666f2065 	strbtvs	r2, [pc], -r5, rrx
    4c10:	63657220 	cmnvs	r5, #32, 4
    4c14:	25203d20 	strcs	r3, [r0, #-3360]!	; 0xfffff2e0
    4c18:	0a0d0064 	beq	344db0 <__ccfg+0x324e08>
    4c1c:	61657243 	cmnvs	r5, r3, asr #4
    4c20:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4c24:	73206365 			; <UNDEFINED> instruction: 0x73206365
    4c28:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
    4c2c:	66692064 	strbtvs	r2, [r9], -r4, rrx
    4c30:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4c34:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4c38:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c3c:	68742063 	ldmdavs	r4!, {r0, r1, r5, r6, sp}^
    4c40:	20647269 	rsbcs	r7, r4, r9, ror #4
    4c44:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4c48:	6572430a 	ldrbvs	r4, [r2, #-778]!	; 0xfffffcf6
    4c4c:	20657461 	rsbcs	r7, r5, r1, ror #8
    4c50:	20636572 	rsbcs	r6, r3, r2, ror r5
    4c54:	72696874 	rsbvc	r6, r9, #116, 16	; 0x740000
    4c58:	6c652064 	stclvs	0, cr2, [r5], #-400	; 0xfffffe70
    4c5c:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4c60:	6572430a 	ldrbvs	r4, [r2, #-778]!	; 0xfffffcf6
    4c64:	20657461 	rsbcs	r7, r5, r1, ror #8
    4c68:	20636572 	rsbcs	r6, r3, r2, ror r5
    4c6c:	2074756f 	rsbscs	r7, r4, pc, ror #10
    4c70:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4c74:	6572430a 	ldrbvs	r4, [r2, #-778]!	; 0xfffffcf6
    4c78:	20657461 	rsbcs	r7, r5, r1, ror #8
    4c7c:	20636572 	rsbcs	r6, r3, r2, ror r5
    4c80:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
    4c84:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4c88:	73206f74 			; <UNDEFINED> instruction: 0x73206f74
    4c8c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    4c90:	0a0d0072 	beq	344e60 <__ccfg+0x324eb8>
    4c94:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    4c98:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4c9c:	64006365 	strvs	r6, [r0], #-869	; 0xfffffc9b
    4ca0:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4ca4:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4ca8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4cac:	64696720 	strbtvs	r6, [r9], #-1824	; 0xfffff8e0
    4cb0:	0a642520 	beq	190e138 <__ccfg+0x18ee190>
    4cb4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4cb8:	2062645f 	rsbcs	r6, r2, pc, asr r4
    4cbc:	20646967 	rsbcs	r6, r4, r7, ror #18
    4cc0:	200a6425 	andcs	r6, sl, r5, lsr #8
    4cc4:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
    4cc8:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4ccc:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4cd0:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    4cd4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4cd8:	69207265 	stmdbvs	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4cdc:	64252064 	strtvs	r2, [r5], #-100	; 0xffffff9c
    4ce0:	6e202c0a 	cdpvs	12, 2, cr2, cr0, cr10, {0}
    4ce4:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4ce8:	69206264 	stmdbvs	r0!, {r2, r5, r6, r9, sp, lr}
    4cec:	64252064 	strtvs	r2, [r5], #-100	; 0xffffff9c
    4cf0:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4cf4:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4cf8:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4cfc:	69662063 	stmdbvs	r6!, {r0, r1, r5, r6, sp}^
    4d00:	20747372 	rsbscs	r7, r4, r2, ror r3
    4d04:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4d08:	6c65440a 	cfstrdvs	mvd4, [r5], #-40	; 0xffffffd8
    4d0c:	20657465 	rsbcs	r7, r5, r5, ror #8
    4d10:	20636572 	rsbcs	r6, r3, r2, ror r5
    4d14:	6f636573 	svcvs	0x00636573
    4d18:	6920646e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, sl, sp, lr}
    4d1c:	0a0d0066 	beq	344ebc <__ccfg+0x324f14>
    4d20:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    4d24:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4d28:	74206365 	strtvc	r6, [r0], #-869	; 0xfffffc9b
    4d2c:	64726968 	ldrbtvs	r6, [r2], #-2408	; 0xfffff698
    4d30:	00666920 	rsbeq	r6, r6, r0, lsr #18
    4d34:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4d38:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4d3c:	63657220 	cmnvs	r5, #32, 4
    4d40:	756f6620 	strbvc	r6, [pc, #-1568]!	; 4728 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xdc>
    4d44:	20687472 	rsbcs	r7, r8, r2, ror r4
    4d48:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4d4c:	6c65440a 	cfstrdvs	mvd4, [r5], #-40	; 0xffffffd8
    4d50:	20657465 	rsbcs	r7, r5, r5, ror #8
    4d54:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
    4d58:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
    4d5c:	20656c20 	rsbcs	r6, r5, r0, lsr #24
    4d60:	70736572 	rsbsvc	r6, r3, r2, ror r5
    4d64:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
    4d68:	720a0d00 	andvc	r0, sl, #0, 26
    4d6c:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4d70:	20657665 	rsbcs	r7, r5, r5, ror #12
    4d74:	00636572 	rsbeq	r6, r3, r2, ror r5
    4d78:	65520a0d 	ldrbvs	r0, [r2, #-2573]	; 0xfffff5f3
    4d7c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
    4d80:	45006573 	strmi	r6, [r0, #-1395]	; 0xfffffa8d
    4d84:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    4d88:	6572203a 	ldrbvs	r2, [r2, #-58]!	; 0xffffffc6
    4d8c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4d90:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
    4d94:	20657079 	rsbcs	r7, r5, r9, ror r0
    4d98:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
    4d9c:	20736920 	rsbscs	r6, r3, r0, lsr #18
    4da0:	20746f6e 	rsbscs	r6, r4, lr, ror #30
    4da4:	6167656c 	cmnvs	r7, ip, ror #10
    4da8:	6170206c 	cmnvs	r0, ip, rrx
    4dac:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
    4db0:	70797420 	rsbsvc	r7, r9, r0, lsr #8
    4db4:	0a0d0065 	beq	344f50 <__ccfg+0x324fa8>
    4db8:	64206e49 	strtvs	r6, [r0], #-3657	; 0xfffff1b7
    4dbc:	5f656e6f 	svcpl	0x00656e6f
    4dc0:	65736163 	ldrbvs	r6, [r3, #-355]!	; 0xfffffe9d
    4dc4:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4dc8:	20617461 	rsbcs	r7, r1, r1, ror #8
    4dcc:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0xfffffead
    4dd0:	0a0d0064 	beq	344f68 <__ccfg+0x324fc0>
    4dd4:	6f636552 	svcvs	0x00636552
    4dd8:	44206472 	strtmi	r6, [r0], #-1138	; 0xfffffb8e
    4ddc:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4de0:	0d006465 	cfstrseq	mvf6, [r0, #-404]	; 0xfffffe6c
    4de4:	6365520a 	cmnvs	r5, #-1610612736	; 0xa0000000
    4de8:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4dec:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
    4df0:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    4df4:	6f726620 	svcvs	0x00726620
    4df8:	6425206d 	strtvs	r2, [r5], #-109	; 0xffffff93
    4dfc:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    4e00:	540a0d00 	strpl	r0, [sl], #-3328	; 0xfffff300
    4e04:	72206568 	eorvc	r6, r0, #104, 10	; 0x1a000000
    4e08:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4e0c:	61632064 	cmnvs	r3, r4, rrx
    4e10:	2074276e 	rsbscs	r2, r4, lr, ror #14
    4e14:	73206562 			; <UNDEFINED> instruction: 0x73206562
    4e18:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
    4e1c:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4e20:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4e24:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4e28:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4e2c:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4e30:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4e34:	656f6420 	strbvs	r6, [pc, #-1056]!	; 4a1c <memcpy+0x38>
    4e38:	6f6e2073 	svcvs	0x006e2073
    4e3c:	78652074 	stmdavc	r5!, {r2, r4, r5, r6, sp}^
    4e40:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    4e44:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4e48:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4e4c:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4e50:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4e54:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4e58:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4e5c:	656f6420 	strbvs	r6, [pc, #-1056]!	; 4a44 <memcpy+0x60>
    4e60:	6f6e2073 	svcvs	0x006e2073
    4e64:	78652074 	stmdavc	r5!, {r2, r4, r5, r6, sp}^
    4e68:	20747369 	rsbscs	r7, r4, r9, ror #6
    4e6c:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4e70:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4e74:	45006425 	strmi	r6, [r0, #-1061]	; 0xfffffbdb
    4e78:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    4e7c:	6f73203a 	svcvs	0x0073203a
    4e80:	6974656d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    4e84:	7720676e 	strvc	r6, [r0, -lr, ror #14]!
    4e88:	20746e65 	rsbscs	r6, r4, r5, ror #28
    4e8c:	6e6f7277 	mcrvs	2, 3, r7, cr15, cr7, {3}
    4e90:	68772067 	ldmdavs	r7!, {r0, r1, r2, r5, r6, sp}^
    4e94:	72206e65 	eorvc	r6, r0, #1616	; 0x650
    4e98:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4e9c:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
    4ea0:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    4ea4:	63617020 	cmnvs	r1, #32
    4ea8:	0074656b 	rsbseq	r6, r4, fp, ror #10
    4eac:	6e6e6143 	powvsem	f6, f6, f3
    4eb0:	6f20746f 	svcvs	0x0020746f
    4eb4:	206e6570 	rsbcs	r6, lr, r0, ror r5
    4eb8:	20766374 	rsbscs	r6, r6, r4, ror r3
    4ebc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    4ec0:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    4ec4:	0a0d0065 	beq	345060 <__ccfg+0x3250b8>
    4ec8:	756f7247 	strbvc	r7, [pc, #-583]!	; 4c89 <__aeabi_lmul+0x1ad>
    4ecc:	64252070 	strtvs	r2, [r5], #-112	; 0xffffff90
    4ed0:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
    4ed4:	20656369 	rsbcs	r6, r5, r9, ror #6
    4ed8:	20642523 	rsbcs	r2, r4, r3, lsr #10
    4edc:	2f642528 	svccs	0x00642528
    4ee0:	72206425 	eorvc	r6, r0, #620756992	; 0x25000000
    4ee4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4ee8:	0d297364 	stceq	3, cr7, [r9, #-400]!	; 0xfffffe70
    4eec:	2947280a 	stmdbcs	r7, {r1, r3, fp, sp}^
    4ef0:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4ef4:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4ef8:	294e280a 	stmdbcs	lr, {r1, r3, fp, sp}^
    4efc:	64207765 	strtvs	r7, [r0], #-1893	; 0xfffff89b
    4f00:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4f04:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4f08:	46280a0d 	strtmi	r0, [r8], -sp, lsl #20
    4f0c:	646e6929 	strbtvs	r6, [lr], #-2345	; 0xfffff6d7
    4f10:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4f14:	6f626867 	svcvs	0x00626867
    4f18:	0a0d7372 	beq	361ce8 <__ccfg+0x341d40>
    4f1c:	72294328 	eorvc	r4, r9, #40, 6	; 0xa0000000
    4f20:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4f24:	63657220 	cmnvs	r5, #32, 4
    4f28:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4f2c:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4f30:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4f34:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4f38:	2944280a 	stmdbcs	r4, {r1, r3, fp, sp}^
    4f3c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4f40:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4f44:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4f48:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4f4c:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4f50:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4f54:	52280a0d 	eorpl	r0, r8, #53248	; 0xd000
    4f58:	72746529 	rsbsvc	r6, r4, #171966464	; 0xa400000
    4f5c:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
    4f60:	63657220 	cmnvs	r5, #32, 4
    4f64:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4f68:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 4dd8 <__aeabi_lmul+0x2fc>
    4f6c:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4f70:	6f626867 	svcvs	0x00626867
    4f74:	280a0d72 	stmdacs	sl, {r1, r4, r5, r6, r8, sl, fp}
    4f78:	6f682953 	svcvs	0x00682953
    4f7c:	6f6c2077 	svcvs	0x006c2077
    4f80:	206c6163 	rsbcs	r6, ip, r3, ror #2
    4f84:	6f636572 	svcvs	0x00636572
    4f88:	0d736472 	cfldrdeq	mvd6, [r3, #-456]!	; 0xfffffe38
    4f8c:	6528520a 	strvs	r5, [r8, #-522]!	; 0xfffffdf6
    4f90:	74657329 	strbtvc	r7, [r5], #-809	; 0xfffffcd7
    4f94:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    4f98:	73206c61 			; <UNDEFINED> instruction: 0x73206c61
    4f9c:	61726f74 	cmnvs	r2, r4, ror pc
    4fa0:	0a0d6567 	beq	35e544 <__ccfg+0x33e59c>
    4fa4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
    4fa8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    4fac:	3a6e6f69 	bcc	1ba0d58 <__ccfg+0x1b80db0>
    4fb0:	63250020 			; <UNDEFINED> instruction: 0x63250020
    4fb4:	656c5000 	strbvs	r5, [ip, #-0]!
    4fb8:	20657361 	rsbcs	r7, r5, r1, ror #6
    4fbc:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4fc0:	20656469 	rsbcs	r6, r5, r9, ror #8
    4fc4:	656e2061 	strbvs	r2, [lr, #-97]!	; 0xffffff9f
    4fc8:	72672077 	rsbvc	r2, r7, #119	; 0x77
    4fcc:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4fd0:	3a234449 	bcc	8d60fc <__ccfg+0x8b6154>
    4fd4:	75250020 	strvc	r0, [r5, #-32]!	; 0xffffffe0
    4fd8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    4fdc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4fe0:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4fe8 <__aeabi_lmul+0x50c>
    4fe4:	72672065 	rsbvc	r2, r7, #101	; 0x65
    4fe8:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4fec:	0d004449 	cfstrseq	mvf4, [r0, #-292]	; 0xfffffedc
    4ff0:	656c500a 	strbvs	r5, [ip, #-10]!
    4ff4:	20657361 	rsbcs	r7, r5, r1, ror #6
    4ff8:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4ffc:	20656469 	rsbcs	r6, r5, r9, ror #8
    5000:	656e2061 	strbvs	r2, [lr, #-97]!	; 0xffffff9f
    5004:	6f6e2077 	svcvs	0x006e2077
    5008:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    500c:	28202344 	stmdacs	r0!, {r2, r6, r8, r9, sp}
    5010:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    5014:	636e6920 	cmnvs	lr, #32, 18	; 0x80000
    5018:	6973756c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    501c:	3a296576 	bcc	a5e5fc <__ccfg+0xa3e654>
    5020:	754f0020 	strbvc	r0, [pc, #-32]	; 5008 <__aeabi_lmul+0x52c>
    5024:	666f2074 			; <UNDEFINED> instruction: 0x666f2074
    5028:	6e615220 	cdpvs	2, 6, cr5, cr1, cr0, {1}
    502c:	49006567 	stmdbmi	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    5030:	73692044 	cmnvc	r9, #68	; 0x44
    5034:	726c6120 	rsbvc	r6, ip, #32, 2
    5038:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    503c:	206e6920 	rsbcs	r6, lr, r0, lsr #18
    5040:	00657375 	rsbeq	r7, r5, r5, ror r3
    5044:	44490a0d 	strbmi	r0, [r9], #-2573	; 0xfffff5f3
    5048:	25203a23 	strcs	r3, [r0, #-2595]!	; 0xfffff5dd
    504c:	69202c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp}
    5050:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    5054:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
    5058:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
    505c:	6f686320 	svcvs	0x00686320
    5060:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
    5064:	61655220 	cmnvs	r5, r0, lsr #4
    5068:	3a6e6f73 	bcc	1ba0e3c <__ccfg+0x1b80e94>
    506c:	2e732520 	cdpcs	5, 7, cr2, cr3, cr0, {1}
    5070:	72724500 	rsbsvc	r4, r2, #0, 10
    5074:	4320726f 			; <UNDEFINED> instruction: 0x4320726f
    5078:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    507c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    5080:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
    5084:	72724120 	rsbsvc	r4, r2, #32, 2
    5088:	0d007961 	vstreq.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
    508c:	69654e0a 	stmdbvs	r5!, {r1, r3, r9, sl, fp, lr}^
    5090:	6f626867 	svcvs	0x00626867
    5094:	203a7372 	eorscs	r7, sl, r2, ror r3
    5098:	2c752500 	cfldr64cs	mvdx2, [r5], #-0
    509c:	6c500020 	mrrcvs	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
    50a0:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    50a4:	6f727020 	svcvs	0x00727020
    50a8:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    50ac:	6e206120 	sufvssp	f6, f0, f0
    50b0:	2065646f 	rsbcs	r6, r5, pc, ror #8
    50b4:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    50b8:	35322d30 	ldrcc	r2, [r2, #-3376]!	; 0xfffff2d0
    50bc:	00203a29 	eoreq	r3, r0, r9, lsr #20
    50c0:	6f727245 	svcvs	0x00727245
    50c4:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    50c8:	6f72706d 	svcvs	0x0072706d
    50cc:	20726570 	rsbscs	r6, r2, r0, ror r5
    50d0:	50004449 	andpl	r4, r0, r9, asr #8
    50d4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    50d8:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    50dc:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    50e0:	20612065 	rsbcs	r2, r1, r5, rrx
    50e4:	6f636572 	svcvs	0x00636572
    50e8:	28206472 	stmdacs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    50ec:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    50f0:	3c206874 	stccc	8, cr6, [r0], #-464	; 0xfffffe30
    50f4:	3032203d 	eorscc	r2, r2, sp, lsr r0
    50f8:	00203a29 	eoreq	r3, r0, r9, lsr #20
    50fc:	6f727245 	svcvs	0x00727245
    5100:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    5104:	6f72706d 	svcvs	0x0072706d
    5108:	20726570 	rsbscs	r6, r2, r0, ror r5
    510c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    5110:	00444920 	subeq	r4, r4, r0, lsr #18
    5114:	61656c50 	cmnvs	r5, r0, asr ip
    5118:	70206573 	eorvc	r6, r0, r3, ror r5
    511c:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    5120:	74206564 	strtvc	r6, [r0], #-1380	; 0xfffffa9c
    5124:	72206568 	eorvc	r6, r0, #104, 10	; 0x1a000000
    5128:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    512c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    5130:	20786564 	rsbscs	r6, r8, r4, ror #10
    5134:	342d3028 	strtcc	r3, [sp], #-40	; 0xffffffd8
    5138:	203a2930 	eorscs	r2, sl, r0, lsr r9
    513c:	72724500 	rsbsvc	r4, r2, #0, 10
    5140:	203a726f 	eorscs	r7, sl, pc, ror #4
    5144:	61766e69 	cmnvs	r6, r9, ror #28
    5148:	2064696c 	rsbcs	r6, r4, ip, ror #18
    514c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    5150:	0a0d0078 	beq	345338 <__ccfg+0x325390>
    5154:	20746572 	rsbscs	r6, r4, r2, ror r5
    5158:	203a4449 	eorscs	r4, sl, r9, asr #8
    515c:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    5160:	646e490a 	strbtvs	r4, [lr], #-2314	; 0xfffff6f6
    5164:	54097865 	strpl	r7, [r9], #-2149	; 0xfffff79b
    5168:	20656d69 	rsbcs	r6, r5, r9, ror #26
    516c:	6d617453 	cfstrdvs	mvd7, [r1, #-332]!	; 0xfffffeb4
    5170:	4f090970 	svcmi	0x00090970
    5174:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
    5178:	09444920 	stmdbeq	r4, {r5, r8, fp, lr}^
    517c:	6f636552 	svcvs	0x00636552
    5180:	44206472 	strtmi	r6, [r0], #-1138	; 0xfffffb8e
    5184:	00617461 	rsbeq	r7, r1, r1, ror #8
    5188:	74690a0d 	strbtvc	r0, [r9], #-2573	; 0xfffff5f3
    518c:	63206d65 			; <UNDEFINED> instruction: 0x63206d65
    5190:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    5194:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    5198:	250a0d00 	strcs	r0, [sl, #-3328]	; 0xfffff300
    519c:	75250964 	strvc	r0, [r5, #-2404]!	; 0xfffff69c
    51a0:	25090909 	strcs	r0, [r9, #-2313]	; 0xfffff6f7
    51a4:	25090975 	strcs	r0, [r9, #-2421]	; 0xfffff68b
    51a8:	0a0d0073 	beq	34537c <__ccfg+0x3253d4>
    51ac:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
    51b0:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
    51b4:	6572206f 	ldrbvs	r2, [r2, #-111]!	; 0xffffff91
    51b8:	20686361 	rsbcs	r6, r8, r1, ror #6
    51bc:	20656874 	rsbcs	r6, r5, r4, ror r8
    51c0:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    51c4:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
    51c8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    51cc:	72450a0d 	subvc	r0, r5, #53248	; 0xd000
    51d0:	3a726f72 	bcc	1ca0fa0 <__ccfg+0x1c80ff8>
    51d4:	00732520 	rsbseq	r2, r3, r0, lsr #10
    51d8:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    51dc:	203a5252 	eorscs	r5, sl, r2, asr r2
    51e0:	202c7825 	eorcs	r7, ip, r5, lsr #16
    51e4:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    51e8:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    51ec:	50006961 	andpl	r6, r0, r1, ror #18
    51f0:	534f6369 	movtpl	r6, #62313	; 0xf369
    51f4:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    51f8:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    51fc:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    5200:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    5204:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5208:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    520c:	434e5541 	movtmi	r5, #58689	; 0xe541
    5210:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    5214:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    5218:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    521c:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    5220:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 51a8 <__aeabi_lmul+0x6cc>
    5224:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    5228:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    522c:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    5230:	30303220 	eorscc	r3, r0, r0, lsr #4
    5234:	30322d32 	eorscc	r2, r2, r2, lsr sp
    5238:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    523c:	6f746665 	svcvs	0x00746665
    5240:	20726576 	rsbscs	r6, r2, r6, ror r5
    5244:	3a4d4152 	bcc	1355794 <__ccfg+0x13357ec>
    5248:	20642520 	rsbcs	r2, r4, r0, lsr #10
    524c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    5250:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    5254:	63695000 	cmnvs	r9, #0
    5258:	6820534f 	stmdavs	r0!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
    525c:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    5260:	00000064 	andeq	r0, r0, r4, rrx

00005264 <port_confs>:
    5264:	00306080 	eorseq	r6, r0, r0, lsl #1
    5268:	00386080 	eorseq	r6, r8, r0, lsl #1
    526c:	00186010 	andseq	r6, r8, r0, lsl r0
    5270:	2010400f 	andscs	r4, r0, pc
    5274:	30694000 	rsbcc	r4, r9, r0
    5278:	30714000 	rsbscc	r4, r1, r0
    527c:	00b86008 	adcseq	r6, r8, r8
    5280:	60c94000 	sbcvs	r4, r9, r0
    5284:	60d14000 	sbcsvs	r4, r1, r0
    5288:	60d94000 	sbcsvs	r4, r9, r0
    528c:	60e14000 	rscvs	r4, r1, r0
    5290:	00096380 	andeq	r6, r9, r0, lsl #7
    5294:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    5298:	20402000 	subcs	r2, r0, r0
    529c:	00486080 	subeq	r6, r8, r0, lsl #1
    52a0:	00506080 	subseq	r6, r0, r0, lsl #1
    52a4:	00a06000 	adceq	r6, r0, r0
    52a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    52ac:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    52b0:	73006120 	movwvc	r6, #288	; 0x120
    52b4:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    52b8:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    52bc:	616d006f 	cmnvs	sp, pc, rrx
    52c0:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    52c4:	00676c61 	rsbeq	r6, r7, r1, ror #24
    52c8:	0069706b 	rsbeq	r7, r9, fp, rrx
    52cc:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

000052d1 <__pi_hex_enc_table>:
    52d1:	33323130 	teqcc	r2, #48, 2
    52d5:	37363534 			; <UNDEFINED> instruction: 0x37363534
    52d9:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    52dd:	46454443 	strbmi	r4, [r5], -r3, asr #8
    52e1:	30766374 	rsbscc	r6, r6, r4, ror r3
    52e5:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    52e9:	736f7073 	cmnvc	pc, #115	; 0x73
    52ed:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    52f1:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    52f5:	736f7073 	cmnvc	pc, #115	; 0x73
    52f9:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    52fd:	63740079 	cmnvs	r4, #121	; 0x79
    5301:	00323076 	eorseq	r3, r2, r6, ror r0
    5305:	30766374 	rsbscc	r6, r6, r4, ror r3
    5309:	63740033 	cmnvs	r4, #51	; 0x33
    530d:	00343076 	eorseq	r3, r4, r6, ror r0
    5311:	30766374 	rsbscc	r6, r6, r4, ror r3
    5315:	63740035 	cmnvs	r4, #53	; 0x35
    5319:	00363076 	eorseq	r3, r6, r6, ror r0
    531d:	31766374 	cmncc	r6, r4, ror r3
    5321:	63740030 	cmnvs	r4, #48	; 0x30
    5325:	00313176 	eorseq	r3, r1, r6, ror r1
    5329:	31766374 	cmncc	r6, r4, ror r3
    532d:	63740036 	cmnvs	r4, #54	; 0x36
    5331:	00373176 	eorseq	r3, r7, r6, ror r1
    5335:	31766374 	cmncc	r6, r4, ror r3
    5339:	63740038 	cmnvs	r4, #56	; 0x38
    533d:	00333276 	eorseq	r3, r3, r6, ror r2
    5341:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5345:	63740032 	cmnvs	r4, #50	; 0x32
    5349:	00363276 	eorseq	r3, r6, r6, ror r2
    534d:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5351:	63740037 	cmnvs	r4, #55	; 0x37
    5355:	00383276 	eorseq	r3, r8, r6, ror r2
    5359:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    535d:	63740039 	cmnvs	r4, #57	; 0x39
    5361:	00303376 	eorseq	r3, r0, r6, ror r3
    5365:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    5369:	63740031 	cmnvs	r4, #49	; 0x31
    536d:	00323376 	eorseq	r3, r2, r6, ror r3
    5371:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    5375:	63740033 	cmnvs	r4, #51	; 0x33
    5379:	00343376 	eorseq	r3, r4, r6, ror r3

0000537d <__input_pins>:
    537d:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00005382 <__button_list>:
    5382:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    5386:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    538a:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    538e:	00317472 	eorseq	r7, r1, r2, ror r4
    5392:	20505548 	subscs	r5, r0, r8, asr #10
    5396:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    539a:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    539e:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    53a2:	30636920 	rsbcc	r6, r3, r0, lsr #18
    53a6:	50554800 	subspl	r4, r5, r0, lsl #16
    53aa:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    53ae:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    53b2:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    53b6:	32747200 	rsbscc	r7, r4, #0, 4
    53ba:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    53be:	00585220 	subseq	r5, r8, r0, lsr #4
    53c2:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    53c6:	00797020 	rsbseq	r7, r9, r0, lsr #32
    53ca:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    53ce:	31636300 	cmncc	r3, r0, lsl #6
    53d2:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    53d6:	31434300 	mrscc	r4, (UNDEF: 115)
    53da:	3a303533 	bcc	c128ae <__ccfg+0xbf2906>
    53de:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    53e2:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    53e6:	00642520 	rsbeq	r2, r4, r0, lsr #10

000053ea <patable>:
    53ea:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    53ee:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    53f2:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    53f6:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000053fc <patchGenfskRfe>:
    53fc:	000061a3 	andeq	r6, r0, r3, lsr #3
    5400:	1307147f 	movwne	r1, #29823	; 0x747f
    5404:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    5408:	3f131f2e 	svccc	0x00131f2e
    540c:	003f0ab0 	ldrhteq	r0, [pc], -r0
    5410:	0000ff07 	andeq	pc, r0, r7, lsl #30
    5414:	40004030 	andmi	r4, r0, r0, lsr r0
    5418:	40034001 	andmi	r4, r3, r1
    541c:	400f4007 	andmi	r4, pc, r7
    5420:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    5424:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    5428:	4fcf47cf 	svcmi	0x00cf47cf
    542c:	2fcf3fcf 	svccs	0x00cf3fcf
    5430:	0fcf1fcf 	svceq	0x00cf1fcf
    5434:	00000000 	andeq	r0, r0, r0
    5438:	0008000f 	andeq	r0, r8, pc
    543c:	003f0000 	eorseq	r0, pc, r0
    5440:	00400000 	subeq	r0, r0, r0
    5444:	0000003f 	andeq	r0, r0, pc, lsr r0
    5448:	00680004 	rsbeq	r0, r8, r4
    544c:	00dc000e 	sbcseq	r0, ip, lr
    5450:	00430006 	subeq	r0, r3, r6
    5454:	0005001a 	andeq	r0, r5, sl, lsl r0
    5458:	00000000 	andeq	r0, r0, r0
    545c:	00000002 	andeq	r0, r0, r2
    5460:	0000003f 	andeq	r0, r0, pc, lsr r0
    5464:	00040000 	andeq	r0, r4, r0
    5468:	000000c0 	andeq	r0, r0, r0, asr #1
    546c:	00c00004 	sbceq	r0, r0, r4
    5470:	00070000 	andeq	r0, r7, r0
    5474:	9100c050 	qaddls	ip, r0, r0
    5478:	c0707000 	rsbsgt	r7, r0, r0
    547c:	70009100 	andvc	r9, r0, r0, lsl #2
    5480:	00213182 	eoreq	r3, r1, r2, lsl #3
    5484:	b1109131 	tstlt	r0, r1, lsr r1
    5488:	81017000 	mrshi	r7, (UNDEF: 1)
    548c:	a100b101 	tstge	r0, r1, lsl #2
    5490:	91323182 	teqls	r2, r2, lsl #3
    5494:	9101b110 	tstls	r1, r0, lsl r1
    5498:	81411011 	cmphi	r1, r1, lsl r0
    549c:	404f2241 	submi	r2, pc, r1, asr #4
    54a0:	700006f1 	strdvc	r0, [r0], -r1
    54a4:	9101c051 	qaddls	ip, r1, r1
    54a8:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    54ac:	d0083183 	andle	r3, r8, r3, lsl #3
    54b0:	6f413118 	svcvs	0x00413118
    54b4:	91310031 	teqls	r1, r1, lsr r0
    54b8:	1483b110 	strne	fp, [r3], #272	; 0x110
    54bc:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    54c0:	10257000 	eorne	r7, r5, r0
    54c4:	9100c050 	qaddls	ip, r0, r0
    54c8:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    54cc:	6f031420 	svcvs	0x00031420
    54d0:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    54d4:	3182c022 	orrcc	ip, r2, r2, lsr #32
    54d8:	91310021 	teqls	r1, r1, lsr #32
    54dc:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    54e0:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    54e4:	3182c082 	orrcc	ip, r2, r2, lsl #1
    54e8:	91310021 	teqls	r1, r1, lsr #32
    54ec:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    54f0:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    54f4:	00213182 	eoreq	r3, r1, r2, lsl #3
    54f8:	b1109131 	tstlt	r0, r1, lsr r1
    54fc:	31151050 	tstcc	r5, r0, asr r0
    5500:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    5504:	643f7000 	ldrtvs	r7, [pc], #-0	; 550c <patchGenfskRfe+0x110>
    5508:	1031c052 	eorsne	ip, r1, r2, asr r0
    550c:	31610631 	cmncc	r1, r1, lsr r6
    5510:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    5514:	1031c112 	eorsne	ip, r1, r2, lsl r1
    5518:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    551c:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    5520:	70006442 	andvc	r6, r0, r2, asr #8
    5524:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    5528:	8220c088 	eorhi	ip, r0, #136	; 0x88
    552c:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    5530:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    5534:	3001c041 	andcc	ip, r1, r1, asr #32
    5538:	1a181418 	bne	60a5a0 <__ccfg+0x5ea5f8>
    553c:	8230c089 	eorshi	ip, r0, #137	; 0x89
    5540:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    5544:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    5548:	3001c041 	andcc	ip, r1, r1, asr #32
    554c:	1a191419 	bne	64a5b8 <__ccfg+0x62a610>
    5550:	9136643c 	teqls	r6, ip, lsr r4
    5554:	9134b110 	teqls	r4, r0, lsl r1
    5558:	b054b110 	subslt	fp, r4, r0, lsl r1
    555c:	a0547100 	subsge	r7, r4, r0, lsl #2
    5560:	80f0b064 	rscshi	fp, r0, r4, rrx
    5564:	40af2200 	adcmi	r2, pc, r0, lsl #4
    5568:	90b01240 	adcsls	r1, r0, r0, asr #4
    556c:	8253b032 	subshi	fp, r3, #50	; 0x32
    5570:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    5574:	643f6485 	ldrtvs	r6, [pc], #-1157	; 557c <patchGenfskRfe+0x180>
    5578:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    557c:	c1706442 	cmngt	r0, r2, asr #8
    5580:	c11168c2 	tstgt	r1, r2, asr #17
    5584:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    5588:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    558c:	9100c050 	qaddls	ip, r0, r0
    5590:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    5594:	16141615 			; <UNDEFINED> instruction: 0x16141615
    5598:	10531042 	subsne	r1, r3, r2, asr #32
    559c:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    55a0:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    55a4:	31313981 	teqcc	r1, r1, lsl #19
    55a8:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    55ac:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    55b0:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    55b4:	10731062 	rsbsne	r1, r3, r2, rrx
    55b8:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    55bc:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    55c0:	101b3981 	andsne	r3, fp, r1, lsl #19
    55c4:	c0e26572 	rscgt	r6, r2, r2, ror r5
    55c8:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    55cc:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    55d0:	b0610002 	rsblt	r0, r1, r2
    55d4:	91327100 	teqls	r2, r0, lsl #2
    55d8:	a051b110 	subsge	fp, r1, r0, lsl r1
    55dc:	7227b061 	eorvc	fp, r7, #97	; 0x61
    55e0:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    55e4:	12800000 	addne	r0, r0, #0
    55e8:	b03290b0 	ldrhtlt	r9, [r2], -r0
    55ec:	c0507000 	subsgt	r7, r0, r0
    55f0:	72279100 	eorvc	r9, r7, #0, 2
    55f4:	10629299 	mlsne	r2, r9, r2, r9
    55f8:	c3f01073 	mvnsgt	r1, #115	; 0x73
    55fc:	31218231 			; <UNDEFINED> instruction: 0x31218231
    5600:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    5604:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5608:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    560c:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    5610:	10531042 	subsne	r1, r3, r2, asr #32
    5614:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5618:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    561c:	31313981 	teqcc	r1, r1, lsl #19
    5620:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    5624:	b061a051 	rsblt	sl, r1, r1, asr r0
    5628:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    562c:	643f6918 	ldrtvs	r6, [pc], #-2328	; 5634 <patchGenfskRfe+0x238>
    5630:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    5634:	c1016442 	tstgt	r1, r2, asr #8
    5638:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    563c:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    5640:	b1109135 	tstlt	r0, r5, lsr r1
    5644:	64858253 	strvs	r8, [r5], #595	; 0x253
    5648:	90b012c0 	adcsls	r1, r0, r0, asr #5
    564c:	7000b032 	andvc	fp, r0, r2, lsr r0
    5650:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    5654:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    5658:	c111c122 	tstgt	r1, r2, lsr #2
    565c:	c0026442 	andgt	r6, r2, r2, asr #8
    5660:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5664:	c331c062 	teqgt	r1, #98	; 0x62
    5668:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    566c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5670:	c111c302 	tstgt	r1, r2, lsl #6
    5674:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    5678:	64853953 	strvs	r3, [r5], #2387	; 0x953
    567c:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    5680:	41402211 	cmpmi	r0, r1, lsl r2
    5684:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    5688:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    568c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5690:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    5694:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    5698:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    569c:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    56a0:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    56a4:	70006954 	andvc	r6, r0, r4, asr r9
    56a8:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    56ac:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    56b0:	c011c252 	andsgt	ip, r1, r2, asr r2
    56b4:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    56b8:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    56bc:	c101c002 	tstgt	r1, r2
    56c0:	c0626442 	rsbgt	r6, r2, r2, asr #8
    56c4:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    56c8:	c101c122 	tstgt	r1, r2, lsr #2
    56cc:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    56d0:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    56d4:	c101c302 	tstgt	r1, r2, lsl #6
    56d8:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    56dc:	70006485 	andvc	r6, r0, r5, lsl #9
    56e0:	7100b061 	tstvc	r0, r1, rrx
    56e4:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    56e8:	91334d7a 	teqls	r3, sl, ror sp
    56ec:	7000b110 	andvc	fp, r0, r0, lsl r1
    56f0:	b1109132 	tstlt	r0, r2, lsr r1
    56f4:	70006972 	andvc	r6, r0, r2, ror r9
    56f8:	7100b061 	tstvc	r0, r1, rrx
    56fc:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    5700:	91324986 	teqls	r2, r6, lsl #19
    5704:	7000b110 	andvc	fp, r0, r0, lsl r1
    5708:	b1109133 	tstlt	r0, r3, lsr r1
    570c:	7000697e 	andvc	r6, r0, lr, ror r9
    5710:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    5714:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    5718:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    571c:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    5720:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    5724:	10541405 	subsne	r1, r4, r5, lsl #8
    5728:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    572c:	c0e67000 	rscgt	r7, r6, r0
    5730:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    5734:	10671416 	rsbne	r1, r7, r6, lsl r4
    5738:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    573c:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    5740:	73067000 	movwvc	r7, #24576	; 0x6000
    5744:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    5748:	b050720e 	subslt	r7, r0, lr, lsl #4
    574c:	80817100 	addhi	r7, r1, r0, lsl #2
    5750:	a050b060 	subsge	fp, r0, r0, rrx
    5754:	22418092 	subcs	r8, r1, #146	; 0x92
    5758:	808045c3 	addhi	r4, r0, r3, asr #11
    575c:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    5760:	11011630 	tstne	r1, r0, lsr r6
    5764:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    5768:	61d761d6 	ldrsbvs	r6, [r7, #22]
    576c:	61d961d8 	ldrsbvs	r6, [r9, #24]
    5770:	61db61da 	ldrsbvs	r6, [fp, #26]
    5774:	61de61dc 	ldrsbvs	r6, [lr, #28]
    5778:	61e261e0 	mvnvs	r6, r0, ror #3
    577c:	633661e4 	teqvs	r6, #228, 2	; 0x39
    5780:	80916339 	addshi	r6, r1, r9, lsr r3
    5784:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    5788:	80823121 	addhi	r3, r2, r1, lsr #2
    578c:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    5790:	11011632 	tstne	r1, r2, lsr r6
    5794:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    5798:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    579c:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    57a0:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    57a4:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    57a8:	61e661e6 	mvnvs	r6, r6, ror #3
    57ac:	61e661e6 	mvnvs	r6, r6, ror #3
    57b0:	61e661e6 	mvnvs	r6, r6, ror #3
    57b4:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    57b8:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    57bc:	61e6652a 	mvnvs	r6, sl, lsr #10
    57c0:	61e66556 	mvnvs	r6, r6, asr r5
    57c4:	61e66746 	mvnvs	r6, r6, asr #14
    57c8:	90b01210 	adcsls	r1, r0, r0, lsl r2
    57cc:	7306720e 	movwvc	r7, #25102	; 0x620e
    57d0:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    57d4:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    57d8:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    57dc:	c003c1d4 	ldrdgt	ip, [r3], -r4
    57e0:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    57e4:	91507840 	cmpls	r0, r0, asr #16
    57e8:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    57ec:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    57f0:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    57f4:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    57f8:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    57fc:	91907830 	orrsls	r7, r0, r0, lsr r8
    5800:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    5804:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    5808:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    580c:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    5810:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    5814:	a054a0e2 	subsge	sl, r4, r2, ror #1
    5818:	225080f0 	subscs	r8, r0, #240	; 0xf0
    581c:	80404615 	subhi	r4, r0, r5, lsl r6
    5820:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    5824:	a040620d 	subge	r6, r0, sp, lsl #4
    5828:	318d822d 	orrcc	r8, sp, sp, lsr #4
    582c:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    5830:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    5834:	821a1009 	andshi	r1, sl, #9
    5838:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    583c:	39808210 	stmibcc	r0, {r4, r9, pc}
    5840:	100e0410 	andne	r0, lr, r0, lsl r4
    5844:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    5848:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    584c:	cfe07229 	svcgt	0x00e07229
    5850:	b013673c 	andslt	r6, r3, ip, lsr r7
    5854:	66c8b003 	strbvs	fp, [r8], r3
    5858:	b050b053 	subslt	fp, r0, r3, asr r0
    585c:	b064b054 	rsblt	fp, r4, r4, asr r0
    5860:	66a5b013 	ssatvs	fp, #6, r3
    5864:	22e08210 	rsccs	r8, r0, #16, 4
    5868:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    586c:	80417100 	subhi	r7, r1, r0, lsl #2
    5870:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5874:	221080f0 	andscs	r8, r0, #240	; 0xf0
    5878:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    587c:	b0644718 	rsblt	r4, r4, r8, lsl r7
    5880:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    5884:	66ceb063 	strbvs	fp, [lr], r3, rrx
    5888:	22e08210 	rsccs	r8, r0, #16, 4
    588c:	66704638 			; <UNDEFINED> instruction: 0x66704638
    5890:	b0646238 	rsblt	r6, r4, r8, lsr r2
    5894:	318f816f 	orrcc	r8, pc, pc, ror #2
    5898:	dfd03d8f 	svcle	0x00d03d8f
    589c:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    58a0:	80417100 	subhi	r7, r1, r0, lsl #2
    58a4:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    58a8:	80f0b064 	rscshi	fp, r0, r4, rrx
    58ac:	42652250 	rsbmi	r2, r5, #80, 4
    58b0:	8211b063 	andshi	fp, r1, #99	; 0x63
    58b4:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    58b8:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    58bc:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    58c0:	66704652 			; <UNDEFINED> instruction: 0x66704652
    58c4:	81616252 	cmnhi	r1, r2, asr r2
    58c8:	31818172 	orrcc	r8, r1, r2, ror r1
    58cc:	31823d81 	orrcc	r3, r2, r1, lsl #27
    58d0:	efc03d82 	svc	0x00c03d82
    58d4:	930292f1 	movwls	r9, #8945	; 0x22f1
    58d8:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    58dc:	91c081b0 	strhls	r8, [r0, #16]
    58e0:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    58e4:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    58e8:	0bf34e7f 	bleq	ffcd92ec <_estack+0xdfcd42ec>
    58ec:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    58f0:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    58f4:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    58f8:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    58fc:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    5900:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    5904:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    5908:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    590c:	1a1ba290 	bne	6ee354 <__ccfg+0x6ce3ac>
    5910:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    5914:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5918:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    591c:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    5920:	4aa21c9b 	bmi	fe88cb94 <_estack+0xde887b94>
    5924:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    5928:	821010b2 	andshi	r1, r0, #178	; 0xb2
    592c:	429d22d0 	addsmi	r2, sp, #208, 4
    5930:	221080f0 	andscs	r8, r0, #240	; 0xf0
    5934:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    5938:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    593c:	629410ab 	addsvs	r1, r4, #171	; 0xab
    5940:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    5944:	82307000 	eorshi	r7, r0, #0
    5948:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    594c:	7100b063 	tstvc	r0, r3, rrx
    5950:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    5954:	7000b0e0 	andvc	fp, r0, r0, ror #1
    5958:	91c281b2 	strhls	r8, [r2, #18]
    595c:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    5960:	81511812 	cmphi	r1, r2, lsl r8
    5964:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    5968:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    596c:	4abf1c12 	bmi	fefcc9bc <_estack+0xdefc79bc>
    5970:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    5974:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    5978:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    597c:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    5980:	9162c812 	cmnls	r2, r2, lsl r8
    5984:	b0319172 	eorslt	r9, r1, r2, ror r1
    5988:	7000b0e1 	andvc	fp, r0, r1, ror #1
    598c:	c006c008 	andgt	ip, r6, r8
    5990:	9160c800 	cmnls	r0, r0, lsl #16
    5994:	70009170 	andvc	r9, r0, r0, ror r1
    5998:	81b08201 	lslshi	r8, r1, #4
    599c:	81d091c0 	bicshi	r9, r0, r0, asr #3
    59a0:	81511810 	cmphi	r1, r0, lsl r8
    59a4:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    59a8:	824280e1 	subhi	r8, r2, #225	; 0xe1
    59ac:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    59b0:	4ae41c20 	bmi	ff90ca38 <_estack+0xdf907a38>
    59b4:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    59b8:	b03246e8 	eorslt	r4, r2, r8, ror #13
    59bc:	dfa01005 	svcle	0x00a01005
    59c0:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    59c4:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    59c8:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    59cc:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    59d0:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    59d4:	42f61e01 	rscsmi	r1, r6, #1, 28
    59d8:	c0101618 	andsgt	r1, r0, r8, lsl r6
    59dc:	1c083010 	stcne	0, cr3, [r8], {16}
    59e0:	10604704 	rsbne	r4, r0, r4, lsl #14
    59e4:	10063c10 	andne	r3, r6, r0, lsl ip
    59e8:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    59ec:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    59f0:	81719166 	cmnhi	r1, r6, ror #2
    59f4:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    59f8:	4b011c16 	blmi	4ca58 <__ccfg+0x2cab0>
    59fc:	b0319176 	eorslt	r9, r1, r6, ror r1
    5a00:	c008c006 	andgt	ip, r8, r6
    5a04:	81617000 	cmnhi	r1, r0
    5a08:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5a0c:	39808240 	stmibcc	r0, {r6, r9, pc}
    5a10:	1cf11801 	ldclne	8, cr1, [r1], #4
    5a14:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    5a18:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    5a1c:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    5a20:	ef90b033 	svc	0x0090b033
    5a24:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    5a28:	7000673c 	andvc	r6, r0, ip, lsr r7
    5a2c:	b063a003 	rsblt	sl, r3, r3
    5a30:	b0efb064 	rsclt	fp, pc, r4, rrx
    5a34:	71006556 	tstvc	r0, r6, asr r5
    5a38:	22008040 	andcs	r8, r0, #64	; 0x40
    5a3c:	b064472b 	rsblt	r4, r4, fp, lsr #14
    5a40:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    5a44:	80407100 	subhi	r7, r0, r0, lsl #2
    5a48:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    5a4c:	b003b064 	andlt	fp, r3, r4, rrx
    5a50:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    5a54:	31828162 	orrcc	r8, r2, r2, ror #2
    5a58:	ef803d82 	svc	0x00803d82
    5a5c:	930292f1 	movwls	r9, #8945	; 0x22f1
    5a60:	a003673c 	andge	r6, r3, ip, lsr r7
    5a64:	61e66556 	mvnvs	r6, r6, asr r5
    5a68:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    5a6c:	b05061e6 	subslt	r6, r0, r6, ror #3
    5a70:	61e67100 	mvnvs	r7, r0, lsl #2
    5a74:	82d092e0 	sbcshi	r9, r0, #224, 4
    5a78:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    5a7c:	7000b2c0 	andvc	fp, r0, r0, asr #5
    5a80:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    5a84:	b0304359 	eorslt	r4, r0, r9, asr r3
    5a88:	3162c102 	cmncc	r2, r2, lsl #2
    5a8c:	80a0c001 	adchi	ip, r0, r1
    5a90:	43521e00 	cmpmi	r2, #0, 28
    5a94:	435322f0 	cmpmi	r3, #240, 4
    5a98:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    5a9c:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    5aa0:	1a101020 	bne	409b28 <__ccfg+0x3e9b80>
    5aa4:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    5aa8:	16121611 			; <UNDEFINED> instruction: 0x16121611
    5aac:	70006b54 	andvc	r6, r0, r4, asr fp

00005ab0 <patchImageGenfsk>:
    5ab0:	210004ad 	smlatbcs	r0, sp, r4, r0
    5ab4:	21000449 	tstcs	r0, r9, asr #8
    5ab8:	2100047d 	tstcs	r0, sp, ror r4
    5abc:	21000481 	smlabbcs	r0, r1, r4, r0
    5ac0:	21000511 	tstcs	r0, r1, lsl r5
    5ac4:	21000591 			; <UNDEFINED> instruction: 0x21000591
    5ac8:	21000641 	tstcs	r0, r1, asr #12
    5acc:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    5ad0:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    5ad4:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    5ad8:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    5adc:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    5ae0:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    5ae4:	d00b079b 	mulle	fp, fp, r7
    5ae8:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    5aec:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    5af0:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    5af4:	240f490e 	strcs	r4, [pc], #-2318	; 5afc <patchImageGenfsk+0x4c>
    5af8:	43200224 			; <UNDEFINED> instruction: 0x43200224
    5afc:	82c83160 	sbchi	r3, r8, #96, 2
    5b00:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    5b04:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    5b08:	2100026b 	tstcs	r0, fp, ror #4
    5b0c:	00004ce5 	andeq	r4, r0, r5, ror #25
    5b10:	e0014809 	and	r4, r1, r9, lsl #16
    5b14:	0c004808 	stceq	8, cr4, [r0], {8}
    5b18:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    5b1c:	2aff7822 	bcs	fffe3bac <_estack+0xdffdebac>
    5b20:	7acad101 	bvc	ff2b9f2c <_estack+0xdf2b4f2c>
    5b24:	31607022 	cmncc	r0, r2, lsr #32
    5b28:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    5b2c:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    5b30:	40086200 	andmi	r6, r8, r0, lsl #4
    5b34:	210006a4 	smlatbcs	r0, r4, r6, r0
    5b38:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    5b3c:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    5b40:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    5b44:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    5b48:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    5b4c:	4a11d006 	bmi	479b6c <__ccfg+0x459bc4>
    5b50:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5b54:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    5b58:	e000480f 	and	r4, r0, pc, lsl #16
    5b5c:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    5b60:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    5b64:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    5b68:	dcf92c00 	ldclle	12, cr2, [r9]
    5b6c:	200140e3 	andcs	r4, r1, r3, ror #1
    5b70:	18180340 	ldmdane	r8, {r6, r8, r9}
    5b74:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    5b78:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    5b7c:	31802300 	orrcc	r2, r0, r0, lsl #6
    5b80:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5b84:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    5b88:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    5b8c:	316c4b04 	cmncc	ip, r4, lsl #22
    5b90:	0000e7f6 	strdeq	lr, [r0], -r6
    5b94:	00005c83 	andeq	r5, r0, r3, lsl #25
    5b98:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    5b9c:	230d8300 	movwcs	r8, #54016	; 0xd300
    5ba0:	21000674 	tstcs	r0, r4, ror r6
    5ba4:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    5ba8:	6b714605 	blvs	1c573c4 <__ccfg+0x1c3741c>
    5bac:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    5bb0:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    5bb4:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    5bb8:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5bbc:	7b00d00f 	blvc	39c00 <__ccfg+0x19c58>
    5bc0:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    5bc4:	4f152001 	svcmi	0x00152001
    5bc8:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5bcc:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    5bd0:	09c18800 	stmibeq	r1, {fp, pc}^
    5bd4:	d00407c9 	andle	r0, r4, r9, asr #15
    5bd8:	7ac0e016 	bvc	ff03dc38 <_estack+0xdf038c38>
    5bdc:	7b40e7f0 	blvc	103fba4 <__ccfg+0x101fbfc>
    5be0:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    5be4:	61cc6374 	bicvs	r6, ip, r4, ror r3
    5be8:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5bec:	2001d00c 	andcs	sp, r1, ip
    5bf0:	6b310380 	blvs	c469f8 <__ccfg+0xc26a50>
    5bf4:	d0012d00 	andle	r2, r1, r0, lsl #26
    5bf8:	e0004301 	and	r4, r0, r1, lsl #6
    5bfc:	46084381 	strmi	r4, [r8], -r1, lsl #7
    5c00:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    5c04:	63483940 	movtvs	r3, #35136	; 0x8940
    5c08:	47b82000 	ldrmi	r2, [r8, r0]!
    5c0c:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    5c10:	21000280 	smlabbcs	r0, r0, r2, r0
    5c14:	21000088 	smlabbcs	r0, r8, r0, r0
    5c18:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    5c1c:	00003f7b 	andeq	r3, r0, fp, ror pc
    5c20:	40044040 	andmi	r4, r4, r0, asr #32
    5c24:	4a22b510 	bmi	8b306c <__ccfg+0x8930c4>
    5c28:	61512100 	cmpvs	r1, r0, lsl #2
    5c2c:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    5c30:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    5c34:	4b204921 	blmi	8180c0 <__ccfg+0x7f8118>
    5c38:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    5c3c:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    5c40:	e0004313 	and	r4, r0, r3, lsl r3
    5c44:	634b4393 	movtvs	r4, #45971	; 0xb393
    5c48:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    5c4c:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    5c50:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    5c54:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    5c58:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    5c5c:	09c08800 	stmibeq	r0, {fp, pc}^
    5c60:	d12207c0 	smlawtle	r2, r0, r7, r0
    5c64:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    5c68:	d11e2800 	tstle	lr, r0, lsl #16
    5c6c:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    5c70:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    5c74:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    5c78:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    5c7c:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    5c80:	2008d213 	andcs	sp, r8, r3, lsl r2
    5c84:	6a686160 	bvs	1a1e20c <__ccfg+0x19fe264>
    5c88:	01400940 	cmpeq	r0, r0, asr #18
    5c8c:	4a0e6020 	bmi	39dd14 <__ccfg+0x37dd6c>
    5c90:	62d12100 	sbcsvs	r2, r1, #0, 2
    5c94:	21024a0d 	tstcs	r2, sp, lsl #20
    5c98:	21016011 	tstcs	r1, r1, lsl r0
    5c9c:	60204308 	eorvs	r4, r0, r8, lsl #6
    5ca0:	43082103 	movwmi	r2, #33027	; 0x8103
    5ca4:	60206268 	eorvs	r6, r0, r8, ror #4
    5ca8:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5cac:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5cb0:	40044000 	andmi	r4, r4, r0
    5cb4:	21000018 	tstcs	r0, r8, lsl r0
    5cb8:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5cbc:	21000280 	smlabbcs	r0, r0, r2, r0
    5cc0:	000068cf 	andeq	r6, r0, pc, asr #17
    5cc4:	21000068 	tstcs	r0, r8, rrx
    5cc8:	40041100 	andmi	r1, r4, r0, lsl #2
    5ccc:	e000e280 	and	lr, r0, r0, lsl #5
    5cd0:	00003bc3 	andeq	r3, r0, r3, asr #23
    5cd4:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5cd8:	2004d000 	andcs	sp, r4, r0
    5cdc:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5ce0:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    5ce4:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5ce8:	2080e000 	addcs	lr, r0, r0
    5cec:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5cf0:	00004770 	andeq	r4, r0, r0, ror r7
    5cf4:	2100026b 	tstcs	r0, fp, ror #4
    5cf8:	40046058 	andmi	r6, r4, r8, asr r0
    5cfc:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5d00:	bd019001 	stclt	0, cr9, [r1, #-4]
    5d04:	00006fa5 	andeq	r6, r0, r5, lsr #31
    5d08:	00000000 	andeq	r0, r0, r0
    5d0c:	00030001 	andeq	r0, r3, r1
    5d10:	001f000a 	andseq	r0, pc, sl
    5d14:	00eb0059 	rsceq	r0, fp, r9, asr r0
    5d18:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    5d1c:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    5d20:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    5d24:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    5d28:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    5d2c:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    5d30:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    5d34:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    5d38:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00005d3c <ratable>:
    5d3c:	12c5000b 	sbcne	r0, r5, #11
    5d40:	2de00007 	stclcs	0, cr0, [r0, #28]!
    5d44:	8000000f 	andhi	r0, r0, pc
    5d48:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    5d4c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    5d50:	6374206c 	cmnvs	r4, #108	; 0x6c
    5d54:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    5d58:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5d5c:	00006c6c 	andeq	r6, r0, ip, ror #24

00005d60 <plug_null>:
    5d60:	0000320d 	andeq	r3, r0, sp, lsl #4
    5d64:	000031b5 			; <UNDEFINED> instruction: 0x000031b5
    5d68:	000031d9 	ldrdeq	r3, [r0], -r9
    5d6c:	000031fd 	strdeq	r3, [r0], -sp
    5d70:	00003205 	andeq	r3, r0, r5, lsl #4
    5d74:	00003209 	andeq	r3, r0, r9, lsl #4
    5d78:	00000000 	andeq	r0, r0, r0
    5d7c:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <discovery_wait_flag>:
20000540:	00000000 	andeq	r0, r0, r0

20000544 <i.6559>:
20000544:	00000000 	andeq	r0, r0, r0

20000548 <packet.6483>:
20000548:	00000000 	andeq	r0, r0, r0

2000054c <response_flag>:
	...

2000054e <setdel>:
	...

20000550 <urates>:
static word urates [N_UARTS];
20000550:	00000000 	andeq	r0, r0, r0

20000554 <__PCB>:
20000554:	00000000 	andeq	r0, r0, r0

20000558 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000558:	00000000 	andeq	r0, r0, r0

2000055c <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <mevent>:
20000560:	00000000 	andeq	r0, r0, r0

20000564 <mnfree>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000568:	00000000 	andeq	r0, r0, r0

2000056c <descriptors>:
	...

2000058c <oqueues>:
	...

20000598 <physical>:
	...

200005a4 <physinfo>:
	...

200005b0 <plugins>:
	...

200005bc <dopen>:
	...

200005bd <dstat>:
	...

200005be <bckf_timer>:
	...

200005c0 <channel>:
200005c0:	00000000 	andeq	r0, r0, r0

200005c4 <drvprcs>:
static aword drvprcs, qevent;
200005c4:	00000000 	andeq	r0, r0, r0

200005c8 <dstate>:
200005c8:	00000000 	andeq	r0, r0, r0

200005cc <paylen>:
static	int paylen = 0;			// Current TX payload length
200005cc:	00000000 	andeq	r0, r0, r0

200005d0 <physid>:
static word	physid,
200005d0:	00000000 	andeq	r0, r0, r0

200005d4 <qevent>:
static aword drvprcs, qevent;
200005d4:	00000000 	andeq	r0, r0, r0

200005d8 <rbuffl>:
200005d8:	00000000 	andeq	r0, r0, r0

200005dc <rfTrim>:
	...

200005ec <rxstat>:
	...

200005f8 <statid>:
	...

200005fa <txtries>:
	...

200005fc <ndsc_null>:
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <len.5699>:
20000600:	00000000 	andeq	r0, r0, r0

20000604 <ptr.5698>:
20000604:	00000000 	andeq	r0, r0, r0

20000608 <__inpline>:
char *__inpline = NULL;
20000608:	00000000 	andeq	r0, r0, r0

2000060c <len.5700>:
2000060c:	00000000 	andeq	r0, r0, r0

20000610 <ptr.5699>:
20000610:	00000000 	andeq	r0, r0, r0

20000614 <oscHfGlobals>:
	...

20000628 <powerQualGlobals>:
	...

20000630 <user_provided_record>:
	...

20000644 <us_pr_in>:
uint8_t us_pr_in;
20000644:	00000000 	andeq	r0, r0, r0

20000648 <response_checker>:
	...

20000650 <incoming_packet>:
address incoming_packet;
20000650:	00000000 	andeq	r0, r0, r0

20000654 <response_message_5>:
struct ResponseMessage* response_message_5;
20000654:	00000000 	andeq	r0, r0, r0

20000658 <reason>:
	...

2000068a <get_id>:
	...

2000068b <beg_for_index>:
	...

2000068c <user_provided_index>:
	...

2000068d <array>:
	...

200006a1 <CHOICE>:
	...

200006a2 <user_provided_receiver_id>:
	...

200006a4 <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
200006a4:	00000000 	andeq	r0, r0, r0

200006a8 <__pi_uart>:
	...

200006b0 <system_event_count>:
200006b0:	00000000 	andeq	r0, r0, r0

200006b4 <entropy>:
200006b4:	00000000 	andeq	r0, r0, r0

200006b8 <__pi_mintk>:
	...

200006ba <__pi_old>:
	...

200006bc <__pi_systat>:
	...

200006c4 <__pi_new>:
200006c4:	00000000 	andeq	r0, r0, r0

200006c8 <__pi_utims>:
	...

200006d8 <__pi_curr>:
200006d8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006dc <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001c48 	andeq	r1, r0, r8, asr #24
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000ac 	andeq	r0, r0, ip, lsr #1
    return node->data_base.item_array[index];
      10:	0008370c 	andeq	r3, r8, ip, lsl #14
      14:	000e1000 	andeq	r1, lr, r0
      18:	00017000 	andeq	r7, r1, r0
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000042b 	andeq	r0, r0, fp, lsr #8
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000bd5 	ldrdeq	r0, [r0], -r5
      38:	16015e03 	strne	r5, [r1], -r3, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	5d060102 	stfpls	f0, [r6, #-8]
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a6b05 	andeq	r6, sl, r5, lsl #22
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d6c 	andeq	r0, r0, ip, ror #26
      5c:	fd050402 	stc2	4, cr0, [r5, #-8]
			nq++;
      60:	02000007 	andeq	r0, r0, #7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	0007f805 	andeq	pc, r7, r5, lsl #16
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000421 	andeq	r0, r0, r1, lsr #8
      78:	000e4f05 	andeq	r4, lr, r5, lsl #30
      7c:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	0002ff05 	andeq	pc, r2, r5, lsl #30
      88:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	076c0700 	strbeq	r0, [ip, -r0, lsl #14]!
	if (baction == NULL)
      9c:	a7040000 	strge	r0, [r4, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0ab40700 	beq	fed01cac <_estack+0xdecfccac>
endthread
      a8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a204 	str	sl, [r9], -r4, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	0000038e 	andeq	r0, r0, lr, lsl #7
      d0:	2c07a404 	cfstrscs	mvf10, [r7], {4}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	0006010b 	andeq	r0, r6, fp, lsl #2
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
      e0:	00000090 	muleq	r0, r0, r0
      e4:	b5050004 	strlt	r0, [r5, #-4]
      e8:	04000008 	streq	r0, [r0], #-8
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet[1] = message->gid;
      f0:	040c0000 	streq	r0, [ip], #-0
      f4:	000b900d 	andeq	r9, fp, sp
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	00120400 	andseq	r0, r2, r0, lsl #8
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00086d0e 	andeq	r6, r8, lr, lsl #26
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		*p = message->tpe;p++;
     108:	00010000 	andeq	r0, r1, r0
		*p = message->request_number;p++;
     10c:	00084205 	andeq	r4, r8, r5, lsl #4
		*p = message->sender_id;p++;
     110:	17160500 	ldrne	r0, [r6, -r0, lsl #10]
		*p = message->receiver_id;p++;
     114:	00000063 	andeq	r0, r0, r3, rrx
		switch(message->tpe) {
     118:	00025305 	andeq	r5, r2, r5, lsl #6
     11c:	0d0c0600 	stceq	6, cr0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
		tcv_endp(packet);
     124:	00072a05 	andeq	r2, r7, r5, lsl #20
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	1b230500 	blne	8c1530 <__ccfg+0x8a1588>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
}
     130:	0003320f 	andeq	r3, r3, pc, lsl #4
		finish;
     134:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
     13c:	0eca0b00 	vdiveq.f64	d16, d10, d0
				strncpy(p, message->record, sizeof(message->record));
     140:	36050000 	strcc	r0, [r5], -r0
				*p = message->padding;p++;
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
				strncpy(p, message->record, sizeof(message->record));
     148:	5f100000 	svcpl	0x00100000
     14c:	3705006b 	strcc	r0, [r5, -fp, rrx]
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				strncpy(p, message->record, sizeof(message->record));
     154:	620b0400 	andvs	r0, fp, #0, 8
     158:	0500000b 	streq	r0, [r0, #-11]
				strncpy(p, message->record, sizeof(message->record));
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
				break;
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
				*p = message->record_index;p++;
     164:	000043fb 	strdeq	r4, [r0], -fp
				*p = message->padding;
     168:	2c143705 	ldccs	7, cr3, [r4], {5}
				break;
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
     170:	0004550b 	andeq	r5, r4, fp, lsl #10
     174:	1b370500 	blne	dc157c <__ccfg+0xda15d4>
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
     180:	0b380500 	bleq	e01588 <__ccfg+0xde15e0>
struct Node* init_node(struct Node* node){
     184:	00000190 	muleq	r0, r0, r1
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
    node2->gid = 0;
     194:	0001a000 	andeq	sl, r1, r0
    node2->data_base.item_count = 0;
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	000b7d0f 	andeq	r7, fp, pc, lsl #26
     1a4:	3c052400 	cfstrscc	mvf2, [r5], {-0}
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
     1ac:	056c0b00 	strbeq	r0, [ip, #-2816]!	; 0xfffff500
     1b0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    node2->index = 0;
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
};
     1b8:	b70b0000 	strlt	r0, [fp, -r0]
    return (uint8_t) (rand() % 255);
     1bc:	05000003 	streq	r0, [r0, #-3]
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
}
     1c8:	00000358 	andeq	r0, r0, r8, asr r3
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	2c074005 	stccs	0, cr4, [r7], {5}
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	0006740b 	andeq	r7, r6, fp, lsl #8
     1d8:	07410500 	strbeq	r0, [r1, -r0, lsl #10]
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	09540b0c 	ldmdbeq	r4, {r2, r3, r8, r9, fp}^
     1e4:	42050000 	andmi	r0, r5, #0
        for (int i = 0; i < NUMB_OF_ENT; i++){
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	ce0b1000 	cdpgt	0, 0, cr1, cr11, cr0, {0}
     1f0:	0500000a 	streq	r0, [r0, #-10]
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
     1fc:	00000346 	andeq	r0, r0, r6, asr #6
     200:	2c074405 	cfstrscs	mvf4, [r7], {5}
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    return(HWREG(AON_RTC_BASE + AON_RTC_O_SEC));
     208:	0005750b 	andeq	r7, r5, fp, lsl #10
                node->data_base.item_array[i].owner_id = owner_id;
     20c:	07450500 	strbeq	r0, [r5, -r0, lsl #10]
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
                node->data_base.item_count += 1;
     214:	08f00b1c 	ldmeq	r0!, {r2, r3, r4, r8, r9, fp}^
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	46050000 	strmi	r0, [r5], -r0
                node->data_base.item_count += 1;
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	12002000 	andne	r2, r0, #0
     224:	0000003b 	andeq	r0, r0, fp, lsr r0
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	4f050108 	svcmi	0x00050108
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
     230:	0d330b00 	vldmdbeq	r3!, {d0-d-1}
     234:	50050000 	andpl	r0, r5, r0
};
     238:	00026809 	andeq	r6, r2, r9, lsl #16
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23c:	170b0000 	strne	r0, [fp, -r0]
     240:	0500000c 	streq	r0, [r0, #-12]
        return false;
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
     248:	13800000 	orrne	r0, r0, #0
     24c:	00000dcc 	andeq	r0, r0, ip, asr #27
            node->nnodes[i] = 0; // set to null byte
     250:	0c0a5305 	stceq	3, cr5, [sl], {5}
     254:	00000001 	andeq	r0, r0, r1
     258:	0ebd1301 	cdpeq	3, 11, cr1, cr13, cr1, {0}
     25c:	56050000 	strpl	r0, [r5], -r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
};
     264:	00010400 	andeq	r0, r1, r0, lsl #8
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
     274:	001f0000 	andseq	r0, pc, r0
        node->data_base.item_count -= 1;
     278:	000a1612 	andeq	r1, sl, r2, lsl r6
        node->data_base.item_array[index].timestamp = 0;
     27c:	05019000 	streq	r9, [r1, #-0]
        node->data_base.item_count -= 1;
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
};
     284:	ca0b0000 	bgt	2c028c <__ccfg+0x2a02e4>
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     288:	0500000e 	streq	r0, [r0, #-14]
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
     290:	0b000000 	bleq	298 <delete_all+0x12>
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	00000584 	andeq	r0, r0, r4, lsl #11
     298:	2c066405 	cfstrscs	mvf6, [r6], {5}
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	04000000 	streq	r0, [r0], #-0
            node->data_base.item_array[i].timestamp = 0;
     2a0:	0003070b 	andeq	r0, r3, fp, lsl #14
    node->data_base.item_count = 0;
     2a4:	09660500 	stmdbeq	r6!, {r8, sl}^
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
     2ac:	003b0b08 	eorseq	r0, fp, r8, lsl #22
}
     2b0:	67050000 	strvs	r0, [r5, -r0]
        return true;
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b8:	11008800 	tstne	r0, r0, lsl #16
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
     2c4:	02d10000 	sbcseq	r0, r1, #0
     2c8:	25090000 	strcs	r0, [r9, #-0]
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	1f000000 	svcne	0x00000000
	response_message->tpe = RESPONSE;
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
	response_message->status = status;
     2d4:	14000002 	strne	r0, [r0], #-2
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	0cc50f01 	stcleq	15, cr0, [r5], {1}
	response_message->gid = gid;
     2dc:	05080000 	streq	r0, [r8, #-0]
	response_message->sender_id = receiver_id;
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
	response_message->status = status;
     2e4:	d70b0000 	strle	r0, [fp, -r0]
	if (!padding){
     2e8:	0500000c 	streq	r0, [r0, #-12]
		response_message->padding = padding;
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
	if (rec != NULL){
     2f0:	0b000000 	bleq	2f8 <assemble_response_message+0x42>
     2f4:	00001da6 	andeq	r1, r0, r6, lsr #27
		strncpy(response_message->record, rec, 20);
     2f8:	2c067c05 	stccs	12, cr7, [r6], {5}
     2fc:	04000000 	streq	r0, [r0], #-0
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
};
     304:	0f000000 	svceq	0x00000000
fsm receiver(struct Node* node_db) {
     308:	0000044d 	andeq	r0, r0, sp, asr #8
     30c:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
     310:	0000044a 	andeq	r0, r0, sl, asr #8
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
     318:	0112bb05 	tsteq	r2, r5, lsl #22
     31c:	00000003 	andeq	r0, r0, r3
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
     324:	2c07bc05 	stccs	12, cr11, [r7], {5}
		DEBUG_PRINT("\r\nreceiving 0");
     328:	04000000 	streq	r0, [r0], #-0
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	2c07bd05 	stccs	13, cr11, [r7], {5}
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     338:	0001c40b 	andeq	ip, r1, fp, lsl #8
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	09be0500 	ldmibeq	lr!, {r8, sl}
     340:	0000004e 	andeq	r0, r0, lr, asr #32
		DEBUG_PRINT("\r\nreceiving 2");
     344:	08590b0c 	ldmdaeq	r9, {r2, r3, r8, r9, fp}^
     348:	bf050000 	svclt	0x00050000
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	5f100e00 	svcpl	0x00100e00
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
		switch (response_message_5->tpe){
     360:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     364:	2c07c105 	stfcsd	f4, [r7], {5}
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     36c:	00030c0b 	andeq	r0, r3, fp, lsl #24
     370:	0ac80500 	beq	ff201778 <_estack+0xdf1fc778>
     374:	000000f2 	strdeq	r0, [r0], -r2
     378:	1d350b1c 	vldmdbne	r5!, {d0-d13}
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37c:	ca050000 	bgt	140384 <__ccfg+0x1203dc>
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
				if (discovery_request_message->gid == node_db->gid){
     384:	fc0b2000 	stc2	0, cr2, [fp], {-0}
     388:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
					DEBUG_PRINT("\r\nSending to sender");
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
					DEBUG_PRINT("\r\nSending to sender");
     394:	00000eea 	andeq	r0, r0, sl, ror #29
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	1f0dcf05 	svcne	0x000dcf05
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	28000006 	stmdacs	r0, {r1, r2}
					response_message_0->sender_id = node_db->id;
     3a0:	001cea0b 	andseq	lr, ip, fp, lsl #20
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	09d00500 	ldmibeq	r0, {r8, sl}^
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
					call sender(response_message_0, done_case);
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x80>
     3b0:	d3050062 	movwle	r0, #20578	; 0x5062
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
     3bc:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	10380000 	eorsne	r0, r8, r0
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
     3cc:	2c07d505 	cfstr32cs	mvfx13, [r7], {5}
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
     3d4:	000f210b 	andeq	r2, pc, fp, lsl #2
     3d8:	11d80500 	bicsne	r0, r8, r0, lsl #10
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
     3e0:	0e6a0b40 	vnmuleq.f64	d16, d10, d0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
					node_db->index+=1;
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
     3ec:	5f104300 	svcpl	0x00104300
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
		tcv_endp(incoming_packet);
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	00000b74 	andeq	r0, r0, r4, ror fp
     400:	2c07df05 	stccs	15, cr13, [r7], {5}
		proceed receiving;
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
		ser_out(response_1_create, "\r\nData Saved");
     408:	00047c0b 	andeq	r7, r4, fp, lsl #24
     40c:	0ae00500 	beq	ff801814 <_estack+0xdf7fc814>
		proceed receiving;
     410:	00000078 	andeq	r0, r0, r8, ror r0
     414:	47590b50 			; <UNDEFINED> instruction: 0x47590b50
		ser_out(response_1_delete, "\r\nRecord Deleted");
     418:	e3050000 	movw	r0, #20480	; 0x5000
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
		proceed receiving;
     420:	9a0b5400 	bls	2d5428 <__ccfg+0x2b5480>
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     424:	0500000b 	streq	r0, [r0, #-11]
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
     430:	00000a1e 	andeq	r0, r0, lr, lsl sl
     434:	e60ee905 	str	lr, [lr], -r5, lsl #18
		proceed receiving;
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     43c:	000e9d0b 	andeq	r9, lr, fp, lsl #26
     440:	07ea0500 	strbeq	r0, [sl, r0, lsl #10]!
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
     448:	01150064 	tsteq	r5, r4, rrx
		proceed receiving;
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	00000469 	andeq	r0, r0, r9, ror #8
     454:	00046916 	andeq	r6, r4, r6, lsl r9
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
		proceed receiving;
     460:	16000005 	strne	r0, [r0], -r5
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
     46c:	17000004 	strne	r0, [r0, -r4]
     470:	00000469 	andeq	r0, r0, r9, ror #8
		proceed receiving;
     474:	000d6518 	andeq	r6, sp, r8, lsl r5
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
		proceed receiving;
     480:	19000005 	stmdbne	r0, {r0, r2}
}
     484:	00000904 	andeq	r0, r0, r4, lsl #18
     488:	07026705 	streq	r6, [r2, -r5, lsl #14]
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	07e21900 	strbeq	r1, [r2, r0, lsl #18]!
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     494:	6c050000 	stcvs	0, cr0, [r5], {-0}
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002f7 	strdeq	r0, [r0], -r7
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	14026c05 	strne	r6, [r2], #-3077	; 0xfffff3fb
					break;
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	0f101908 	svceq	0x00101908
     4b0:	6c050000 	stcvs	0, cr0, [r5], {-0}
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4bc:	0000057f 	andeq	r0, r0, pc, ror r5
     4c0:	07026e05 	streq	r6, [r2, -r5, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	04d41910 	ldrbeq	r1, [r4], #2320	; 0x910
						status = (uint8_t) SUCCESS;
     4cc:	6f050000 	svcvs	0x00050000
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     4d8:	00000e7d 	andeq	r0, r0, sp, ror lr
     4dc:	07027205 	streq	r7, [r2, -r5, lsl #4]
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	42a71930 	adcmi	r1, r7, #48, 18	; 0xc0000
     4e8:	73050000 	movwvc	r0, #20480	; 0x5000
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
					call sender(response_message_2, done_case);
     4f4:	0000078a 	andeq	r0, r0, sl, lsl #15
     4f8:	07027505 	streq	r7, [r2, -r5, lsl #10]
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     500:	08841938 	stmeq	r4, {r3, r4, r5, r8, fp, ip}
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	77050000 	strvc	r0, [r5, -r0]
						status = (uint8_t) DB_FULL;
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	00000350 	andeq	r0, r0, r0, asr r3
     514:	13027a05 	movwne	r7, #10757	; 0x2a05
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
     51c:	040b1940 	streq	r1, [fp], #-2368	; 0xfffff6c0
     520:	7b050000 	blvc	140528 <__ccfg+0x120580>
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     52c:	00000609 	andeq	r0, r0, r9, lsl #12
     530:	13027c05 	movwne	r7, #11269	; 0x2c05
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	081f1948 	ldmdaeq	pc, {r3, r6, r8, fp, ip}	; <UNPREDICTABLE>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	7d050000 	stcvc	0, cr0, [r5, #-0]
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
     548:	00000b5a 	andeq	r0, r0, sl, asr fp
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	07028005 	streq	r8, [r2, -r5]
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	0c531950 	mrrceq	9, 5, r1, r3, cr0	; <UNPREDICTABLE>
     558:	81050000 	mrshi	r0, (UNDEF: 5)
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	00000c6d 	andeq	r0, r0, sp, ror #24
     568:	0702a405 	streq	sl, [r2, -r5, lsl #8]
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a161a58 	beq	586ed8 <__ccfg+0x566f30>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	a8050000 	stmdage	r5, {}	; <UNPREDICTABLE>
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
     580:	0006ae1a 	andeq	sl, r6, sl, lsl lr
     584:	02a90500 	adceq	r0, r9, #0, 10
     588:	00027812 	andeq	r7, r2, r2, lsl r8
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
     590:	00000695 	muleq	r0, r5, r6
     594:	0c02ad05 	stceq	13, cr10, [r2], {5}
     598:	000008ec 	andeq	r0, r0, ip, ror #17
     59c:	e91a02dc 	ldmdb	sl, {r2, r3, r4, r6, r7, r9}
     5a0:	0500000c 	streq	r0, [r0, #-12]
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
     5a8:	e0000006 	and	r0, r0, r6
     5ac:	0aa61a02 	beq	fe986dbc <_estack+0xde981dbc>
     5b0:	b4050000 	strlt	r0, [r5], #-0
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
     5b8:	02ec0000 	rsceq	r0, ip, #0
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
     5c0:	02000005 	andeq	r0, r0, #5
     5c4:	0c640801 	stcleq	8, cr0, [r4], #-4
     5c8:	c3170000 	tstgt	r7, #0
     5cc:	11000005 	tstne	r0, r5
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
     600:	00840115 	addeq	r0, r4, r5, lsl r1
     604:	061f0000 	ldreq	r0, [pc], -r0
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	16000004 	strne	r0, [r0], -r4
     610:	000000f2 	strdeq	r0, [r0], -r2
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	00008416 	andeq	r8, r0, r6, lsl r4
				DEBUG_PRINT("\r\nretrieve rec");
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
     620:	00060004 	andeq	r0, r6, r4
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     628:	3a000000 	bcc	630 <receiver+0x328>
     62c:	16000006 	strne	r0, [r0], -r6
     630:	00000469 	andeq	r0, r0, r9, ror #8
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     638:	04110000 	ldreq	r0, [r1], #-0
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
    return node->data_base.item_array[index];
     640:	00004708 	andeq	r4, r0, r8, lsl #14
     644:	00065000 	andeq	r5, r6, r0
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
     64c:	00020000 	andeq	r0, r2, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	00004708 	andeq	r4, r0, r8, lsl #14
    return node->data_base.item_array[index];
     654:	00066000 	andeq	r6, r6, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
     65c:	00000000 	andeq	r0, r0, r0
     660:	00046e04 	andeq	r6, r4, r4, lsl #28
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	01240500 			; <UNDEFINED> instruction: 0x01240500
     668:	00030718 	andeq	r0, r3, r8, lsl r7
     66c:	0cdd1b00 	vldmiaeq	sp, {d17-d16}
     670:	050c0000 	streq	r0, [ip, #-0]
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000eca 	andeq	r0, r0, sl, asr #29
     680:	11012a05 	tstne	r1, r5, lsl #20
				DEBUG_PRINT("\r\nResponse");
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	0bce1900 	bleq	ff386a90 <_estack+0xdf381a90>
				DEBUG_PRINT("\r\nResponse");
     68c:	2b050000 	blcs	140694 <__ccfg+0x1206ec>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     698:	00000772 	andeq	r0, r0, r2, ror r7
     69c:	0b012c05 	bleq	4b6b8 <__ccfg+0x2b710>
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
				if(!response_flag){
     6a4:	04110008 	ldreq	r0, [r1], #-8
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
					response_flag=1;
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
					trigger(&response_flag);
     6b0:	da1b0000 	ble	6c06b8 <__ccfg+0x6a0710>
				switch(response_message_5->status){
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     6b8:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
     6c0:	00165119 	andseq	r5, r6, r9, lsl r1
     6c4:	01450500 	cmpeq	r5, r0, lsl #10
						if (response_checker[0] == response_message_5->request_number){
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
     6cc:	31190000 	tstcc	r9, r0
     6d0:	05000008 	streq	r0, [r0, #-8]
							switch(response_checker[1]){
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
     6d8:	06000006 	streq	r0, [r0], -r6
     6dc:	00150319 	andseq	r0, r5, r9, lsl r3
     6e0:	01470500 	cmpeq	r7, r0, lsl #10
						proceed response_4;
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
						break;
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
									proceed response_1_delete;
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
									proceed response_1_retrieve;
     6f0:	000006fb 	strdeq	r0, [r0], -fp
						proceed response_2;
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
						proceed response_3;
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
						proceed response_4;
     6fc:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	00081007 	andeq	r1, r8, r7
     704:	0e701900 	vaddeq.f16	s3, s0, s0	; <UNPREDICTABLE>
}
     708:	87050000 	strhi	r0, [r5, -r0]
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     714:	00000cf1 	strdeq	r0, [r0], -r1
     718:	12028805 	andne	r8, r2, #327680	; 0x50000
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     720:	04381904 	ldrteq	r1, [r8], #-2308	; 0xfffff6fc
fsm root {
     724:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
     728:	08101002 	ldmdaeq	r0, {r1, ip}
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     730:	00000b43 	andeq	r0, r0, r3, asr #22
     734:	17028a05 	strne	r8, [r2, -r5, lsl #20]
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
     73c:	07e91924 	strbeq	r1, [r9, r4, lsr #18]!
     740:	8b050000 	blhi	140748 <__ccfg+0x1207a0>
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     74c:	00000ec5 	andeq	r0, r0, r5, asr #29
     750:	2c028c05 	stccs	12, cr8, [r2], {5}
     754:	00000071 	andeq	r0, r0, r1, ror r0
     758:	007f1950 	rsbseq	r1, pc, r0, asr r9	; <UNPREDICTABLE>
     75c:	8d050000 	stchi	0, cr0, [r5, #-0]
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     768:	00000639 	andeq	r0, r0, r9, lsr r6
     76c:	16028e05 	strne	r8, [r2], -r5, lsl #28
     770:	000000e6 	andeq	r0, r0, r6, ror #1
		node_db = init_node(node_db);
     774:	0cfe1968 			; <UNDEFINED> instruction: 0x0cfe1968
     778:	8f050000 	svchi	0x00050000
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     784:	00000071 	andeq	r0, r0, r1, ror r0
		tcv_plug (0, &plug_null);
     788:	16029005 	strne	r9, [r2], -r5
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
		sfd = tcv_open (WNONE, 0, 0);
     790:	0b6a1978 	bleq	1a86d78 <__ccfg+0x1a66dd0>
     794:	91050000 	mrsls	r0, (UNDEF: 5)
     798:	08201002 	stmdaeq	r0!, {r1, ip}
		if (sfd < 0) {
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     7a0:	00000415 	andeq	r0, r0, r5, lsl r4
			diag("Cannot open tcv interface");
     7a4:	10029205 	andne	r9, r2, r5, lsl #4
			halt();
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	0c8d1988 			; <UNDEFINED> instruction: 0x0c8d1988
     7b0:	93050000 	movwls	r0, #20480	; 0x5000
		runfsm receiver(node_db);
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	000002ac 	andeq	r0, r0, ip, lsr #5
     7c0:	16029405 	strne	r9, [r2], -r5, lsl #8
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
     7c8:	069f19a4 	ldreq	r1, [pc], r4, lsr #19
     7cc:	95050000 	strls	r0, [r5, #-0]
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
     7dc:	16029605 	strne	r9, [r2], -r5, lsl #12
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
		switch(CHOICE) {
     7e4:	084a19b4 	stmdaeq	sl, {r2, r4, r5, r7, r8, fp, ip}^
     7e8:	97050000 	strls	r0, [r5, -r0]
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     7f4:	00000628 	andeq	r0, r0, r8, lsr #12
     7f8:	16029805 	strne	r9, [r2], -r5, lsl #16
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
     800:	090219c4 	stmdbeq	r2, {r2, r6, r7, r8, fp, ip}
     804:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
     80c:	00cc0000 	sbceq	r0, ip, r0
				proceed menu;
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
				proceed get_new_group_id;
     814:	00082000 	andeq	r2, r8, r0
				proceed menu;
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	00190000 	andseq	r0, r9, r0
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	00083000 	andeq	r3, r8, r0
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
     82c:	00070000 	andeq	r0, r7, r0
		DEBUG_PRINT("setting node group ID");
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	00084000 	andeq	r4, r8, r0
    node->gid = gid; 
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
		proceed menu;
     83c:	00170000 	andseq	r0, r7, r0
     840:	9e05f01c 	mcrls	0, 0, pc, cr5, cr12, {0}	; <UNPREDICTABLE>
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
     848:	c0190000 	andsgt	r0, r9, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	05000003 	streq	r0, [r0, #-3]
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
     854:	00000008 	andeq	r0, r0, r8
     858:	000f1819 	andeq	r1, pc, r9, lsl r8	; <UNPREDICTABLE>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	02a20500 	adceq	r0, r2, #0, 10
    node->id = id;
     860:	00087718 	andeq	r7, r8, r8, lsl r7
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
     868:	00000301 	andeq	r0, r0, r1, lsl #6
			strncpy(reason, "Out of Range", 50);
     86c:	00000877 	andeq	r0, r0, r7, ror r8
     870:	00002509 	andeq	r2, r0, r9, lsl #10
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
			proceed invalid_node_id;
     878:	00000025 	andeq	r0, r0, r5, lsr #32
fsm root {
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
				strncpy(reason, "ID is already in use", 50);
     880:	00002509 	andeq	r2, r0, r9, lsl #10
		for(int i = 0; i < node_db->index; i++){
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
     888:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
		proceed menu;
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
     890:	0d651e00 	stcleq	14, cr1, [r5, #-0]
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	9a050000 	bls	14089c <__ccfg+0x1208f4>
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
     89c:	521e0000 	andspl	r0, lr, #0
     8a0:	0500000b 	streq	r0, [r0, #-11]
		proceed get_new_node_id;
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
		if (!clear_node_neighbour_array(node_db)){
     8a8:	00000008 	andeq	r0, r0, r8
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
     8b8:	00180000 	andseq	r0, r8, r0
			proceed error;
     8bc:	000ed01f 	andeq	sp, lr, pc, lsl r0
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
		request_packet->gid = node_db->gid;
     8d0:	00000004 	andeq	r0, r0, r4
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
		request_packet->request_number = generate_request_num();
     8d8:	04110000 	ldreq	r0, [r1], #-0
		request_packet->sender_id = node_db->id;
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
		call sender(request_packet, wait_discovery);
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
     8f0:	04110000 	ldreq	r0, [r1], #-0
			release;
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
				proceed get_new_node_id;
     8f8:	00066008 	andeq	r6, r6, r8
				proceed clear_neighbour_array;
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
				proceed create_proto_start;
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
				proceed start_delete_proto;
     904:	00020000 	andeq	r0, r2, r0
				proceed start_retrieve_proto;
     908:	000ac221 	andeq	ip, sl, r1, lsr #4
				proceed display_db;
     90c:	03330500 	teqeq	r3, #0, 10
				proceed del_local;
     910:	00046917 	andeq	r6, r4, r7, lsl r9
			if(node_db->id == node_db->nnodes[i]){
     914:	21010100 	mrscs	r0, (UNDEF: 17)
     918:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
     91c:	1d033405 	cfstrsne	mvf3, [r3, #-20]	; 0xffffffec
				strncpy(reason, "ID is already in use", 50);
     920:	0000046f 	andeq	r0, r0, pc, ror #8
     924:	22050101 	andcs	r0, r5, #1073741824	; 0x40000000
     928:	0700002a 	streq	r0, [r0, -sl, lsr #32]
				proceed invalid_node_id;
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
		for(int i = 0; i < node_db->index; i++){
     930:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
		if (discovery_wait_flag == 0){
     934:	0700002e 	streq	r0, [r0, -lr, lsr #32]
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
			delay(3000, find_proto_start);
     93c:	ba050000 	blt	140944 <__ccfg+0x12099c>
     940:	07000029 	streq	r0, [r0, -r9, lsr #32]
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
     948:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
		if (discovery_wait_flag == 1){
     94c:	08000005 	stmdaeq	r0, {r0, r2}
			delay(3000, display_neighbour_nodes);
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
     954:	92050000 	andls	r0, r5, #0
     958:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
     960:	01050000 	mrseq	r0, (UNDEF: 5)
     964:	09000029 	stmdbeq	r0, {r0, r3, r5}
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
     96c:	62170000 	andsvs	r0, r7, #0
     970:	22000009 	andcs	r0, r0, #9
     974:	00000962 	andeq	r0, r0, r2, ror #18
     978:	001dc805 	andseq	ip, sp, r5, lsl #16
     97c:	112b0900 			; <UNDEFINED> instruction: 0x112b0900
     980:	00000926 	andeq	r0, r0, r6, lsr #18
     984:	00097822 	andeq	r7, r9, r2, lsr #16
     988:	29530500 	ldmdbcs	r3, {r8, sl}^
     98c:	2c090000 	stccs	0, cr0, [r9], {-0}
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
     998:	46050000 	strmi	r0, [r5], -r0
     99c:	09000006 	stmdbeq	r0, {r1, r2}
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
		if(node_db->index == 0){
     9a4:	b4050000 	strlt	r0, [r5], #-0
     9a8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
			proceed menu;
     9b0:	04110000 	ldreq	r0, [r1], #-0
fsm root {
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	3209080a 	andcc	r0, r9, #655360	; 0xa0000
		for (int i=0; i<node_db->index; i++) {
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
     9c0:	00342300 	eorseq	r2, r4, r0, lsl #6
     9c4:	34090000 	strcc	r0, [r9], #-0
		proceed menu;
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
     9d0:	064c2300 	strbeq	r2, [ip], -r0, lsl #6
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	35090000 	strcc	r0, [r9, #-0]
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	02e72300 	rsceq	r2, r7, #0, 6
     9e4:	36090000 	strcc	r0, [r9], -r0
			strncpy(reason, "Error: improper ID", 50);
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     9f0:	06b72300 	ldrteq	r2, [r7], r0, lsl #6
			proceed error;
     9f4:	37090000 	strcc	r0, [r9, -r0]
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	0a9f2300 	beq	fe7c9608 <_estack+0xde7c4608>
     a04:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
		create_message->gid = node_db->gid;
     a10:	065b0b00 	ldrbeq	r0, [fp], -r0, lsl #22
     a14:	3a090000 	bcc	240a1c <__ccfg+0x220a74>
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
		create_message->tpe = CREATE_RECORD;
     a1c:	fb0b0100 	blx	2c0e26 <__ccfg+0x2a0e7e>
		create_message->request_number = generate_request_num();
     a20:	09000008 	stmdbeq	r0, {r3}
		create_message->sender_id = node_db->id;
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
     a2c:	00000f40 	andeq	r0, r0, r0, asr #30
		strncpy(create_message->record, user_provided_record, 20);
     a30:	78033d09 	stmdavc	r3, {r0, r3, r8, sl, fp, ip, sp}
		create_message->receiver_id = user_provided_receiver_id;
     a34:	03000009 	movweq	r0, #9
		strncpy(create_message->record, user_provided_record, 20);
     a38:	0009130b 	andeq	r1, r9, fp, lsl #6
		response_checker[0] = create_message->request_number;
     a3c:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
		call sender(create_message, wait);
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
		response_checker[1] = create_message->tpe;
     a44:	1d050004 	stcne	0, cr0, [r5, #-16]
     a48:	09000003 	stmdbeq	r0, {r0, r1}
		call sender(create_message, wait);
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
     a50:	46220000 	strtmi	r0, [r2], -r0
     a54:	2400000a 	strcs	r0, [r0], #-10
     a58:	000006be 			; <UNDEFINED> instruction: 0x000006be
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5c:	521a4309 	andspl	r4, sl, #603979776	; 0x24000000
     a60:	0100000a 	tsteq	r0, sl
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a64:	01a02401 	lsleq	r2, r1, #8
     a68:	45090000 	strmi	r0, [r9, #-0]
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
     a74:	00000326 	andeq	r0, r0, r6, lsr #6
			strncpy(reason, "Error: improper node ID", 50);
     a78:	bd1e4509 	cfldr32lt	mvfx4, [lr, #-36]	; 0xffffffdc
     a7c:	01000005 	tsteq	r0, r5
			proceed error;
     a80:	0a080a01 	beq	20328c <__ccfg+0x1e32e4>
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a88:	d80b0000 	stmdale	fp, {}	; <UNPREDICTABLE>
     a8c:	0a00000c 	beq	ac4 <root+0x3a0>
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
     a94:	0b000000 	bleq	a9c <root+0x378>
     a98:	0000107b 	andeq	r1, r0, fp, ror r0
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	6207910a 	andvs	r9, r7, #-2147483646	; 0x80000002
			strncpy(reason, "Error: invalid index", 50);
     aa0:	04000009 	streq	r0, [r0], #-9
     aa4:	0001c50b 	andeq	ip, r1, fp, lsl #10
     aa8:	10920a00 	addsne	r0, r2, r0, lsl #20
			proceed error;
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	cc050006 	stcgt	0, cr0, [r5], {6}
     ab4:	0a00000c 	beq	aec <root+0x3c8>
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
		delete_record->gid = node_db->gid;
     abc:	b2080000 	andlt	r0, r8, #0
		delete_record->tpe = DELETE_RECORD;
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
		delete_record->request_number = generate_request_num();
     ac4:	2500000a 	strcs	r0, [r0, #-10]
     ac8:	093d2400 	ldmdbeq	sp!, {sl, sp}
		call sender(delete_record, wait);
     acc:	990a0000 	stmdbls	sl, {}	; <UNPREDICTABLE>
		delete_record->sender_id = node_db->id;
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
		delete_record->receiver_id = user_provided_receiver_id;
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
		delete_record->record_index = us_pr_in;
     ad8:	09910b01 	ldmibeq	r1, {r0, r8, r9, fp}
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
		response_checker[0] = delete_record->request_number;
     ae0:	00091a23 	andeq	r1, r9, r3, lsr #20
		call sender(delete_record, wait);
     ae4:	07930b00 	ldreq	r0, [r3, r0, lsl #22]
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
     af0:	0005cc23 	andeq	ip, r5, r3, lsr #24
     af4:	03940b00 	orrseq	r0, r4, #0, 22
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	00000978 	andeq	r0, r0, r8, ror r9
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	0aab0500 	beq	feac1f08 <_estack+0xdeabcf08>
     b04:	960b0000 	strls	r0, [fp], -r0
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
		if (get_id < 1 || get_id > 25){
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
			strncpy(reason, "Error: improper node ID", 50);
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     b18:	2500000b 	strcs	r0, [r0, #-11]
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
			proceed error;
     b20:	aa240000 	bge	900b28 <__ccfg+0x8e0b80>
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	0b000003 	bleq	b38 <root+0x414>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
			strncpy(reason, "Error: invalid index", 50);
     b40:	00060e24 	andeq	r0, r6, r4, lsr #28
     b44:	13060c00 	movwne	r0, #27648	; 0x6c00
			proceed error;
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
     b4c:	dd240101 	stfles	f0, [r4, #-4]!
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	0a000008 	beq	b78 <root+0x454>
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
     b5c:	000c7204 	andeq	r7, ip, r4, lsl #4
     b60:	016e0d00 	cmneq	lr, r0, lsl #26
		retrieve_record->gid = node_db->gid;
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	6f041100 	svcvs	0x00041100
		retrieve_record->request_number = generate_request_num();
     b6c:	2000000b 	andcs	r0, r0, fp
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
		retrieve_record->receiver_id = get_id;
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		retrieve_record->record_index = beg_for_index;
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
		response_checker[0] = retrieve_record->request_number;
     b88:	2100000b 	tstcs	r0, fp
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	000009e6 	andeq	r0, r0, r6, ror #19
		response_checker[1] = retrieve_record->tpe;
     b90:	13017f0d 	movwne	r7, #7949	; 0x1f0d
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
     b98:	96210101 	strtls	r0, [r1], -r1, lsl #2
		call sender(retrieve_record, wait);
     b9c:	0d000003 	stceq	0, cr0, [r0, #-12]
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
     ba4:	01000009 	tsteq	r0, r9
     ba8:	0e040a01 	vmlaeq.f32	s0, s8, s2
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	cb0b0000 	blgt	2c0bb8 <__ccfg+0x2a0c10>
     bb4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
     bbc:	0b000000 	bleq	bc4 <root+0x4a0>
     bc0:	00000ca2 	andeq	r0, r0, r2, lsr #25
		if(node_db->data_base.item_count != 0){
     bc4:	6203100e 	andvs	r1, r3, #14
     bc8:	02000009 	andeq	r0, r0, #9
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	0d7f0500 	cfldr64eq	mvdx0, [pc, #-0]	; bd4 <root+0x4b0>
     bd0:	110e0000 	mrsne	r0, (UNDEF: 14)
			while(i <= node_db->data_base.item_count){
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
     bd8:	0e200a00 	vmuleq.f32	s0, s0, s0
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
			i = 0;
     be0:	ac0b0000 	stcge	0, cr0, [fp], {-0}
		ser_out(menu, "\r\n");
     be4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
		delete_all(node_db);
     bec:	0b000000 	bleq	bf4 <root+0x4d0>
     bf0:	0000090b 	andeq	r0, r0, fp, lsl #18
		proceed menu;
     bf4:	8008180e 	andhi	r1, r8, lr, lsl #16
		delay(3000, timeout);
     bf8:	0400000c 	streq	r0, [r0], #-12
     bfc:	000bc60b 	andeq	ip, fp, fp, lsl #12
     c00:	08190e00 	ldmdaeq	r9, {r9, sl, fp}
		when(&response_flag, menu);
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     c08:	0c9a0b08 	vldmiaeq	sl, {d0-d3}
			if(i == 0){
     c0c:	1a0e0000 	bne	380c14 <__ccfg+0x360c6c>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
     c14:	620b0c00 	andvs	r0, fp, #0, 24
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c18:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
     c24:	00000a63 	andeq	r0, r0, r3, ror #20
		for (int i=0; i<node_db->index; i++) {
     c28:	e7081c0e 	str	r1, [r8, -lr, lsl #24]
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	1400000c 	strne	r0, [r0], #-12
     c30:	0001ae0b 	andeq	sl, r1, fp, lsl #28
     c34:	081d0e00 	ldmdaeq	sp, {r9, sl, fp}
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
     c3c:	03140b18 	tsteq	r4, #24, 22	; 0x6000
     c40:	1e0e0000 	cdpne	0, 0, cr0, cr14, cr0, {0}
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
		ser_out(timeout, "\r\nFailed to reach the destination");
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
		proceed menu;
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c5c:	16000000 	strne	r0, [r0], -r0
     c60:	00000956 	andeq	r0, r0, r6, asr r9
		proceed menu;
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
}
     c68:	1500000c 	strne	r0, [r0, #-12]
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c70:	000c8000 	andeq	r8, ip, r0
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
     c84:	01150000 	tsteq	r5, r0
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c9c:	16000000 	strne	r0, [r0], -r0
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
     ca8:	04110000 	ldreq	r0, [r1], #-0
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
     cb4:	04110000 	ldreq	r0, [r1], #-0
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
     cc4:	a6160000 	ldrge	r0, [r6], -r0
     cc8:	16000009 	strne	r0, [r0], -r9
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
     cd4:	1500000c 	strne	r0, [r0, #-12]
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
static void devinit_uart (int devnum) {
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
     cec:	0d3b0500 	cfldr32eq	mvfx0, [fp, #-0]
void udelay (volatile word n) {
     cf0:	1f0e0000 	svcne	0x000e0000
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
	while (n) {
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
     cfc:	6e210000 	cdpvs	0, 2, cr0, cr1, cr0, {0}
}
     d00:	0d000003 	stceq	0, cr0, [r0, #-12]
	while (n--);
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
     d08:	01000009 	tsteq	r0, r9
     d0c:	0d081c01 	stceq	12, cr1, [r8, #-4]
		n--;
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d18:	00003ca7 	andeq	r3, r0, r7, lsr #25
void mdelay (volatile word n) {
     d1c:	0703070d 	streq	r0, [r3, -sp, lsl #14]
     d20:	00000962 	andeq	r0, r0, r2, ror #18
	while (n) {
     d24:	0fd31900 	svceq	0x00d31900
     d28:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
}
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
		udelay (999);
     d30:	00040000 	andeq	r0, r4, r0
     d34:	000a0904 	andeq	r0, sl, r4, lsl #18
		n--;
     d38:	03090d00 	movweq	r0, #40192	; 0x9d00
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
     d40:	00291b00 	eoreq	r1, r9, r0, lsl #22
     d44:	0d300000 	ldceq	0, cr0, [r0, #-0]
void __pi_ondomain (lword d) {
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
		if (__pi_systat.effpdm > 1)
     d50:	00001f2a 	andeq	r1, r0, sl, lsr #30
     d54:	0703140d 	streq	r1, [r3, -sp, lsl #8]
			__pi_systat.effpdm = 1;
     d58:	00000962 	andeq	r0, r0, r2, ror #18
	PRCMPowerDomainOn (d);
     d5c:	0be71900 	bleq	ff9c7164 <_estack+0xdf9c2164>
     d60:	150d0000 	strne	r0, [sp, #-0]
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     d6c:	00004c94 	muleq	r0, r4, ip
     d70:	0a03160d 	beq	c65ac <__ccfg+0xa6604>
	__pi_systat.ondmns |= d;
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
     d78:	475a1904 	ldrbmi	r1, [sl, -r4, lsl #18]
}
     d7c:	170d0000 	strne	r0, [sp, -r0]
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
void __pi_offdomain (lword d) {
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     d88:	0000000f 	andeq	r0, r0, pc
	PRCMPowerDomainOff (d);
     d8c:	0f03180d 	svceq	0x0003180d
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
     d94:	095d190c 	ldmdbeq	sp, {r2, r3, r8, fp, ip}^
     d98:	190d0000 	stmdbne	sp, {}	; <UNPREDICTABLE>
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
     da0:	002c0000 	eoreq	r0, ip, r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
     db0:	00030000 	andeq	r0, r3, r0
	__pi_systat.ondmns &= ~d;
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
     db8:	dc040000 	stcle	0, cr0, [r4], {-0}
}
     dbc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
void __pi_syserror (word ec, const char *m) {
     dc4:	2100000d 	tstcs	r0, sp
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
     dcc:	14031e0d 	strne	r1, [r3], #-3597	; 0xfffff1f3
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
     ddc:	00070f24 	andeq	r0, r7, r4, lsr #30
		all_leds_blink;
     de0:	0d1d0f00 	ldceq	15, cr0, [sp, #-0]
     de4:	00000962 	andeq	r0, r0, r2, ror #18
     de8:	ee240101 	sufs	f0, f4, f1
     dec:	0f000002 	svceq	0x00000002
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
     df8:	000c6924 	andeq	r6, ip, r4, lsr #18
     dfc:	201e0f00 	andscs	r0, lr, r0, lsl #30
     e00:	00000973 	andeq	r0, r0, r3, ror r9
     e04:	87240101 	strhi	r0, [r4, -r1, lsl #2]!
	while (1) {
     e08:	0f00000c 	svceq	0x0000000c
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
void tci_run_delay_timer () {
     e18:	180c1000 	stmdane	ip, {ip}
	setdel = __pi_mintk - __pi_old;
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
     e20:	1c260101 	stfnes	f0, [r6], #-4
     e24:	01000006 	tsteq	r0, r6
     e28:	00000047 	andeq	r0, r0, r7, asr #32
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2c:	58061911 	stmdapl	r6, {r0, r4, r8, fp, ip}
     e30:	2700000e 	strcs	r0, [r0, -lr]
     e34:	00000bed 	andeq	r0, r0, sp, ror #23
     e38:	09c32700 	stmibeq	r3, {r8, r9, sl, sp}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	27010000 	strcs	r0, [r1, -r0]
	sti_tim;
     e40:	00000f27 	andeq	r0, r0, r7, lsr #30
}
     e44:	0b352702 	bleq	d4aa54 <__ccfg+0xd2aaac>
     e48:	27030000 	strcs	r0, [r3, -r0]
     e4c:	00000983 	andeq	r0, r0, r3, lsl #19
     e50:	09cd2704 	stmibeq	sp, {r2, r8, r9, sl, sp}^
     e54:	00050000 	andeq	r0, r5, r0
	cli_aux;
     e58:	001f2a26 	andseq	r2, pc, r6, lsr #20
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	22110000 	andscs	r0, r1, #0
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
     e68:	033a2700 	teqeq	sl, #0, 14
     e6c:	27000000 	strcs	r0, [r0, -r0]
	sti_aux;
     e70:	00000653 	andeq	r0, r0, r3, asr r6
}
     e74:	04662701 	strbteq	r2, [r6], #-1793	; 0xfffff8ff
     e78:	27020000 	strcs	r0, [r2, -r0]
     e7c:	000008a8 	andeq	r0, r0, r8, lsr #17
void AONRTCIntHandler () {
     e80:	0b182703 	bleq	60aa94 <__ccfg+0x5eaaec>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	00040000 	andeq	r0, r4, r0
     e88:	0004920f 	andeq	r9, r4, pc, lsl #4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	2c111c00 	ldccs	12, cr1, [r1], {-0}
		if (__pi_utims [0] == 0)
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
     e94:	0f470b00 	svceq	0x00470b00
		if (*(__pi_utims [0])) {
     e98:	2d110000 	ldccs	0, cr0, [r1, #-0]
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
			(*(__pi_utims [0]))--;
     ea0:	7f0b0000 	svcvc	0x000b0000
		if (__pi_utims [1] == 0)
     ea4:	11000007 	tstne	r0, r7
		if (*(__pi_utims [1])) {
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
			aux_timer_inactive = 0;
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
			(*(__pi_utims [1]))--;
     eb0:	000005dc 	ldrdeq	r0, [r0], -ip
		if (__pi_utims [2] == 0)
     eb4:	63102f11 	tstvs	r0, #17, 30	; 0x44
		if (*(__pi_utims [2])) {
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
			(*(__pi_utims [2]))--;
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
		if (__pi_utims [3] != 0) {
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
			if (*(__pi_utims [3])) {
     ec4:	25090000 	strcs	r0, [r9, #-0]
				aux_timer_inactive = 0;
     ec8:	13000000 	movwne	r0, #0
				(*(__pi_utims [3]))--;
     ecc:	475a1200 	ldrbmi	r1, [sl, -r0, lsl #4]
	if (__pi_systat.ledsts) {
     ed0:	04640000 	strbteq	r0, [r4], #-0
     ed4:	f7083311 			; <UNDEFINED> instruction: 0xf7083311
		if (__pi_systat.ledblc++ == 0) {
     ed8:	0b00000e 	bleq	f18 <AONRTCIntHandler+0x98>
     edc:	00000049 	andeq	r0, r0, r9, asr #32
			if (__pi_systat.ledblk) {
     ee0:	f7103411 			; <UNDEFINED> instruction: 0xf7103411
     ee4:	0000000e 	andeq	r0, r0, lr
     ee8:	00052d13 	andeq	r2, r5, r3, lsl sp
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	0a351100 	beq	d452f4 <__ccfg+0xd2534c>
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
				if (__pi_systat.ledsts & 0x2)
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
				if (__pi_systat.ledsts & 0x4)
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
				__pi_systat.ledblk = 0;
     f04:	12002700 	andne	r2, r0, #0, 14
     f08:	00000461 	andeq	r0, r0, r1, ror #8
			if (__pi_systat.fstblk)
     f0c:	3c110484 	cfldrscc	mvf0, [r1], {132}	; 0x84
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
				__pi_systat.ledblc = 200;
     f14:	64691000 	strbtvs	r1, [r9], #-0
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	0a3d1100 	beq	f45320 <__ccfg+0xf25378>
		cli_tim;
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
		__pi_new += setdel;
     f20:	69671000 	stmdbvs	r7!, {ip}^
     f24:	3e110064 	cdpcc	0, 1, cr0, cr1, cr4, {3}
		setdel = 0;
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
		RISE_N_SHINE;
     f2c:	d30b0200 	movwle	r0, #45568	; 0xb200
		__pi_new += setdel;
     f30:	1100000c 	tstne	r0, ip
		RISE_N_SHINE;
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
     f38:	13040000 	movwne	r0, #16384	; 0x4000
		aux_timer_inactive = 1;
     f3c:	000002a5 	andeq	r0, r0, r5, lsr #5
     f40:	580a4011 	stmdapl	sl, {r0, r4, lr}
				if (__pi_systat.ledsts & 0x1)
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	04c21304 	strbeq	r1, [r2], #772	; 0x304
     f4c:	41110000 	tstmi	r1, r0
				if (__pi_systat.ledsts & 0x2)
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
				if (__pi_systat.ledsts & 0x8)
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
				__pi_systat.ledblk = 1;
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
     f64:	00180000 	andseq	r0, r8, r0
		if (aux_timer_inactive) {
     f68:	0006f70f 	andeq	pc, r6, pc, lsl #14
			cli_aux;
     f6c:	44110600 	ldrmi	r0, [r1], #-1536	; 0xfffffa00
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
     f74:	69671000 	stmdbvs	r7!, {ip}^
     f78:	45110064 	ldrmi	r0, [r1, #-100]	; 0xffffff9c
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
     f80:	74100000 	ldrvc	r0, [r0], #-0
     f84:	11006570 	tstne	r0, r0, ror r5
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
     f90:	00000d88 	andeq	r0, r0, r8, lsl #27
word tci_update_delay_ticks (Boolean force) {
     f94:	260a4711 			; <UNDEFINED> instruction: 0x260a4711
	cli_tim;
     f98:	03000009 	movweq	r0, #9
     f9c:	0004df0b 	andeq	sp, r4, fp, lsl #30
	if (setdel) {
     fa0:	0a481100 	beq	12053a8 <__ccfg+0x11e5400>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	02990b04 	addseq	r0, r9, #4, 22	; 0x1000
     fac:	49110000 	ldmdbmi	r1, {}	; <UNPREDICTABLE>
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	0f000500 	svceq	0x00000500
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
	return NO;
     fbc:	084c1106 	stmdaeq	ip, {r1, r2, r8, ip}^
			setdel = 0;
     fc0:	00001006 	andeq	r1, r0, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
     fc8:	0b4d1100 	bleq	13453d0 <__ccfg+0x1325428>
}
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
		sti_tim;
     fd0:	70741000 	rsbsvc	r1, r4, r0
		return YES;
     fd4:	4e110065 	cdpmi	0, 1, cr0, cr1, cr5, {3}
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
     fdc:	880b0200 	stmdahi	fp, {r9}
     fe0:	1100000d 	tstne	r0, sp
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
	UARTDisable (UART0_BASE);
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	UARTDisable (UART0_BASE);
     ff0:	260a5011 			; <UNDEFINED> instruction: 0x260a5011
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	04000009 	streq	r0, [r0], #-9
     ff8:	0002990b 	andeq	r9, r2, fp, lsl #18
     ffc:	0a511100 	beq	1445404 <__ccfg+0x142545c>
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	a00f0005 	andge	r0, pc, r5
    1008:	1a00000b 	bne	103c <reinit_uart+0x4>
    100c:	62085411 	andvs	r5, r8, #285212672	; 0x11000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	10000010 	andne	r0, r0, r0, lsl r0
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
    1018:	320b5511 	andcc	r5, fp, #71303168	; 0x4400000
	urates [0] = rate;
    101c:	00000009 	andeq	r0, r0, r9
}
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1024:	0a561100 	beq	158542c <__ccfg+0x1565484>
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
    102c:	0d880b02 	vstreq	d0, [r8, #8]
    1030:	57110000 	ldrpl	r0, [r1, -r0]
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	df0b0300 	svcle	0x000b0300
    103c:	11000004 	tstne	r0, r4
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
    1048:	00000299 	muleq	r0, r9, r2
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104c:	260a5911 			; <UNDEFINED> instruction: 0x260a5911
    1050:	05000009 	streq	r0, [r0, #-9]
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	0004920b 	andeq	r9, r4, fp, lsl #4
    1058:	075a1100 	ldrbeq	r1, [sl, -r0, lsl #2]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    1060:	560f0006 	strpl	r0, [pc], -r6
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1068:	cb085d11 	blgt	2184b4 <__ccfg+0x1f850c>
    106c:	10000010 	andne	r0, r0, r0, lsl r0
	switch (operation) {
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
static int ioreq_uart_a (int operation, char *buf, int len) {
    1074:	320b5e11 	andcc	r5, fp, #272	; 0x110
    1078:	00000009 	andeq	r0, r0, r9
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1080:	0a5f1100 	beq	17c5488 <__ccfg+0x17a54e0>
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
				*buf++ = uart_a_read;
    1088:	0d880b02 	vstreq	d0, [r8, #8]
    108c:	60110000 	andsvs	r0, r1, r0
			while (len && uart_a_char_available) {
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
    1094:	df0b0300 	svcle	0x000b0300
    1098:	11000004 	tstne	r0, r4
			if (len != operation) {
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
}
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
    10a4:	00000299 	muleq	r0, r9, r2
			uart_a_disable_int;
    10a8:	260a6211 			; <UNDEFINED> instruction: 0x260a6211
			if (uart_a_char_available) {
    10ac:	05000009 	streq	r0, [r0, #-9]
				*buf++ = uart_a_read;
    10b0:	0000640b 	andeq	r6, r0, fp, lsl #8
			uart_a_disable_int;
    10b4:	0a631100 	beq	18c54bc <__ccfg+0x18a5514>
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
			if (uart_a_char_available) {
    10bc:	08290b06 	stmdaeq	r9!, {r1, r2, r8, r9, fp}
    10c0:	64110000 	ldrvs	r0, [r1], #-0
				uart_a_enable_int;
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
    10c8:	0f000700 	svceq	0x00000700
				goto Redo_rx;
    10cc:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10d0:	08681108 	stmdaeq	r8!, {r3, r8, ip}^
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
			return -2;
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
    10dc:	0b691100 	bleq	1a454e4 <__ccfg+0x1a2553c>
				uart_a_write (*buf);
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
    10e4:	70741000 	rsbsvc	r1, r4, r0
			while (len && uart_a_room_in_tx) {
    10e8:	6a110065 	bvs	441284 <__ccfg+0x4212dc>
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    10f0:	880b0200 	stmdahi	fp, {r9}
			if (len != operation) {
    10f4:	1100000d 	tstne	r0, sp
			uart_a_disable_int;
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
			if (uart_a_room_in_tx) {
    1100:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1104:	260a6c11 			; <UNDEFINED> instruction: 0x260a6c11
				uart_a_enable_int;
    1108:	04000009 	streq	r0, [r0], #-9
    110c:	0002990b 	andeq	r9, r2, fp, lsl #18
				*buf++ = uart_a_read;
    1110:	0a6d1100 	beq	1b45518 <__ccfg+0x1b25570>
			if (uart_a_room_in_tx) {
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
				uart_a_write (*buf);
    1118:	00640b05 	rsbeq	r0, r4, r5, lsl #22
    111c:	6e110000 	cdpvs	0, 1, cr0, cr1, cr0, {0}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
    1124:	290b0600 	stmdbcs	fp, {r9, sl}
			uart_a_enable_int;
    1128:	11000008 	tstne	r0, r8
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
    1130:	00070000 	andeq	r0, r7, r0
			return 0;
    1134:	0002c30f 	andeq	ip, r2, pc, lsl #6
			if (len == UART_CNTRL_SETRATE) {
    1138:	76111e00 	ldrvc	r1, [r1], -r0, lsl #28
				if (__pi_uart_setrate (*((word*)buf),
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
    1140:	69671000 	stmdbvs	r7!, {ip}^
    1144:	77110064 	ldrvc	r0, [r1, -r4, rrx]
				syserror (EREQPAR, "uar");
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
			syserror (ENOOPER, "uai");
    114c:	74100000 	ldrvc	r0, [r0], #-0
			if (len == UART_CNTRL_GETRATE) {
    1150:	11006570 	tstne	r0, r0, ror r5
				return 1;
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
			syserror (ENOOPER, "uai");
    115c:	00000d88 	andeq	r0, r0, r8, lsl #27
    1160:	260a7911 			; <UNDEFINED> instruction: 0x260a7911
    1164:	03000009 	movweq	r0, #9
    1168:	0004df0b 	andeq	sp, r4, fp, lsl #30
    116c:	0a7a1100 	beq	1e85574 <__ccfg+0x1e655cc>
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
    1174:	02990b04 	addseq	r0, r9, #4, 22	; 0x1000
    1178:	7b110000 	blvc	441180 <__ccfg+0x4211d8>
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	780b0500 	stmdavc	fp, {r8, sl}
void UART0IntHandler () {
    1184:	11000007 	tstne	r0, r7
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
    1190:	00000829 	andeq	r0, r0, r9, lsr #16
    1194:	260a7d11 			; <UNDEFINED> instruction: 0x260a7d11
    1198:	07000009 	streq	r0, [r0, -r9]
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	0004920b 	andeq	r9, r4, fp, lsl #4
    11a0:	077e1100 	ldrbeq	r1, [lr, -r0, lsl #2]!
		RISE_N_SHINE;
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    11a8:	00640b08 	rsbeq	r0, r4, r8, lsl #22
		i_trigger (devevent (UART_A, READ));
    11ac:	7f110000 	svcvc	0x00110000
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
    11b8:	00000e96 	muleq	r0, r6, lr
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
    11c0:	01000005 	tsteq	r0, r5
    11c4:	06a10305 	strteq	r0, [r1], r5, lsl #6
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
    11cc:	da000005 	ble	11e8 <UART0IntHandler+0x68>
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
    11d8:	5a280031 	bpl	a012a4 <__ccfg+0x9e12fc>
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	01000004 	tsteq	r0, r4
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
    11e4:	05010000 	streq	r0, [r1, #-0]
		i_trigger (devevent (UART_A, WRITE));
    11e8:	00065803 	andeq	r5, r6, r3, lsl #16
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
		RISE_N_SHINE;
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
    11fc:	20000000 	andcs	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
    1204:	00121000 	andseq	r1, r2, r0
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
    120c:	00010000 	andeq	r0, r1, r0
    1210:	0006e628 	andeq	lr, r6, r8, lsr #12
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
    121c:	48030501 	stmdami	r3, {r0, r8, sl}
    1220:	28200006 	stmdacs	r0!, {r1, r2}
    1224:	00000993 	muleq	r0, r3, r9
    1228:	2c050901 			; <UNDEFINED> instruction: 0x2c050901
}
    122c:	01000000 	mrseq	r0, (UNDEF: 0)
    1230:	05400305 	strbeq	r0, [r0, #-773]	; 0xfffffcfb
    1234:	84282000 	strthi	r2, [r8], #-0
    1238:	01000004 	tsteq	r0, r4
    123c:	0ebd060a 	cdpeq	6, 11, cr0, cr13, cr10, {0}
void __buttons_setirq (int val) {
    1240:	05010000 	streq	r0, [r1, #-0]
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	00063003 	andeq	r3, r6, r3
    1248:	04b42820 	ldrteq	r2, [r4], #2080	; 0x820
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	0b010000 	bleq	41254 <__ccfg+0x212ac>
    1250:	00092609 	andeq	r2, r9, r9, lsl #12
    1254:	03050100 	movweq	r0, #20736	; 0x5100
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	2000068c 	andcs	r0, r0, ip, lsl #13
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125c:	00002028 	andeq	r2, r0, r8, lsr #32
    1260:	090c0100 	stmdbeq	ip, {r8}
    1264:	00000926 	andeq	r0, r0, r6, lsr #18
    1268:	44030501 	strmi	r0, [r3], #-1281	; 0xfffffaff
    126c:	28200006 	stmdacs	r0!, {r1, r2}
    1270:	00000475 	andeq	r0, r0, r5, ror r4
}
    1274:	26090d01 	strcs	r0, [r9], -r1, lsl #26
    1278:	01000009 	tsteq	r0, r9
    127c:	068a0305 	streq	r0, [sl], r5, lsl #6
    1280:	b7282000 	strlt	r2, [r8, -r0]!
void __pinlist_setirq (int val) {
    1284:	0100000c 	tsteq	r0, ip
	for (i = 0; i < N_PINLIST; i++) {
    1288:	0926090e 	stmdbeq	r6!, {r1, r2, r3, r8, fp}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	05010000 	streq	r0, [r1, #-0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	00068b03 	andeq	r8, r6, r3, lsl #22
	for (i = 0; i < N_PINLIST; i++) {
    1294:	028b2820 	addeq	r2, fp, #32, 16	; 0x200000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	0f010000 	svceq	0x00010000
    129c:	00092609 	andeq	r2, r9, r9, lsl #12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	03050100 	movweq	r0, #20736	; 0x5100
    12a4:	200006a2 	andcs	r0, r0, r2, lsr #13
    12a8:	000c2328 	andeq	r2, ip, r8, lsr #6
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	09100100 	ldmdbeq	r0, {r8}
}
    12b0:	000009a6 	andeq	r0, r0, r6, lsr #19
    12b4:	50030501 	andpl	r0, r3, r1, lsl #10
    12b8:	28200006 	stmdacs	r0!, {r1, r2}
    12bc:	0000004e 	andeq	r0, r0, lr, asr #32
void GPIOIntHandler () {
    12c0:	bd061101 	stflts	f1, [r6, #-4]
if (buttons_int) {
    12c4:	0100000e 	tsteq	r0, lr
    12c8:	068d0305 	streq	r0, [sp], r5, lsl #6
	buttons_disable ();
    12cc:	78282000 	stmdavc	r8!, {sp}
    12d0:	01000002 	tsteq	r0, r2
	i_trigger ((aword)&__button_list);
    12d4:	12e11912 	rscne	r1, r1, #294912	; 0x48000
    12d8:	05010000 	streq	r0, [r1, #-0]
    12dc:	00065403 	andeq	r5, r6, r3, lsl #8
    12e0:	34041120 	strcc	r1, [r4], #-288	; 0xfffffee0
    12e4:	28000011 	stmdacs	r0, {r0, r4}
    12e8:	0000085f 	andeq	r0, r0, pc, asr r8
    12ec:	62061301 	andvs	r1, r6, #67108864	; 0x4000000
    12f0:	01000009 	tsteq	r0, r9
    12f4:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    12f8:	45282000 	strmi	r2, [r8, #-0]!
    12fc:	01000004 	tsteq	r0, r4
	RISE_N_SHINE;
    1300:	130d0e15 	movwne	r0, #56853	; 0xde15
    1304:	05010000 	streq	r0, [r1, #-0]
    1308:	0006a403 	andeq	sl, r6, r3, lsl #8
if (pin_sensor_int) {
    130c:	07041120 	streq	r1, [r4, -r0, lsr #2]
    1310:	2a00000f 	bcs	1354 <GPIOIntHandler+0x94>
	i_trigger ((aword)(&__input_pins));
    1314:	0001b601 	andeq	fp, r1, r1, lsl #12
    1318:	02340100 	eorseq	r0, r4, #0, 2
    131c:	07240106 	streq	r0, [r4, -r6, lsl #2]!
    1320:	0ce40000 	stcleq	0, cr0, [r4]
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	00001628 	andeq	r1, r0, r8, lsr #12
    132c:	000c332b 	andeq	r3, ip, fp, lsr #6
    1330:	02340100 	eorseq	r0, r4, #0, 2
    1334:	00096211 	andeq	r6, r9, r1, lsl r2
    1338:	00000000 	andeq	r0, r0, r0
    133c:	0c3b2c00 	ldceq	12, cr2, [fp], #-0
	__pinsen_disable_and_clear;
    1340:	3d010000 	stccc	0, cr0, [r1, #-0]
	RISE_N_SHINE;
    1344:	07741902 	ldrbeq	r1, [r4, -r2, lsl #18]!
    1348:	1f2c0000 	svcne	0x002c0000
    134c:	01000009 	tsteq	r0, r9
}
    1350:	bc100272 	lfmlt	f0, 4, [r0], {114}	; 0x72
    1354:	2c000007 	stccs	0, cr0, [r0], {7}
    1358:	0000008d 	andeq	r0, r0, sp, lsl #1
    135c:	16027501 	strne	r7, [r2], -r1, lsl #10
    1360:	000007d6 	ldrdeq	r0, [r0], -r6
void system_init () {
    1364:	0008062c 	andeq	r0, r8, ip, lsr #12
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	029e0100 	addseq	r0, lr, #0, 2
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	00081a1c 	andeq	r1, r8, ip, lsl sl
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	01eb2c00 	mvneq	r2, r0, lsl #24
    1374:	a2010000 	andge	r0, r1, #0
    1378:	08221802 	stmdaeq	r2!, {r1, fp, ip}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137c:	762c0000 	strtvc	r0, [ip], -r0
    1380:	01000003 	tsteq	r0, r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	441b02b0 	ldrmi	r0, [fp], #-688	; 0xfffffd50
    1388:	2c000008 	stccs	0, cr0, [r0], {8}
    138c:	000002d3 	ldrdeq	r0, [r0], -r3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	1702b301 	strne	fp, [r2, -r1, lsl #6]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1394:	0000084c 	andeq	r0, r0, ip, asr #16
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	0007952c 	andeq	r9, r7, ip, lsr #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	02ce0100 	sbceq	r0, lr, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	0008921b 	andeq	r9, r8, fp, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	05002c00 	streq	r2, [r0, #-3072]	; 0xfffff400
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	08a82102 	stmiaeq	r8!, {r1, r8, sp}
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	6a2c0000 	bvs	b013b8 <__ccfg+0xae1410>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	01000009 	tsteq	r0, r9
    13b8:	c21c02e4 	andsgt	r0, ip, #228, 4	; 0x4000000e
    13bc:	2c000008 	stccs	0, cr0, [r0], {8}
    13c0:	0000067e 	andeq	r0, r0, lr, ror r6
		if (port_confs [i] & 0x80)
    13c4:	1a02f101 	bne	bd7d0 <__ccfg+0x9d828>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	00000934 	andeq	r0, r0, r4, lsr r9
    13cc:	000d452c 	andeq	r4, sp, ip, lsr #10
		if (port_confs [i] & 0x40)
    13d0:	02fd0100 	rscseq	r0, sp, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	0009a423 	andeq	sl, r9, r3, lsr #8
    13d8:	03f02c00 	mvnseq	r2, #0, 24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	13010000 	movwne	r0, #4096	; 0x1000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13e0:	09cc1e03 	stmibeq	ip, {r0, r1, r9, sl, fp, ip}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e4:	522c0000 	eorpl	r0, ip, #0
	all_leds_blink;
    13e8:	01000005 	tsteq	r0, r5
    13ec:	d41d0316 	ldrle	r0, [sp], #-790	; 0xfffffcea
    13f0:	2c000009 	stccs	0, cr0, [r0], {9}
    13f4:	00000def 	andeq	r0, r0, pc, ror #27
    13f8:	24031e01 	strcs	r1, [r3], #-3585	; 0xfffff1ff
    13fc:	000009f8 	strdeq	r0, [r0], -r8
    1400:	0007ad2c 	andeq	sl, r7, ip, lsr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	03210100 			; <UNDEFINED> instruction: 0x03210100
    1408:	000a0020 	andeq	r0, sl, r0, lsr #32
    140c:	0a752c00 	beq	1d4c414 <__ccfg+0x1d2c46c>
    1410:	24010000 	strcs	r0, [r1], #-0
    1414:	0a0a2603 	beq	28ac28 <__ccfg+0x26ac80>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	d02c0000 	eorle	r0, ip, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	01000001 	tsteq	r0, r1
    1420:	5a1e033e 	bpl	782120 <__ccfg+0x762178>
	IntEnable (INT_AON_RTC_COMB);
    1424:	2c00000a 	stccs	0, cr0, [r0], {10}
    1428:	00000200 	andeq	r0, r0, r0, lsl #4
    142c:	1d034101 	stfnes	f4, [r3, #-4]
	__pi_malloc_init ();
    1430:	00000a62 	andeq	r0, r0, r2, ror #20
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	0000542c 	andeq	r5, r0, ip, lsr #8
    1438:	03490100 	movteq	r0, #37120	; 0x9100
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143c:	000a8620 	andeq	r8, sl, r0, lsr #12
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	0a462c00 	beq	118c448 <__ccfg+0x116c4a0>
    1444:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1448:	0a8e2003 	beq	fe38945c <_estack+0xde38445c>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	972c0000 	strls	r0, [ip, -r0]!
    1450:	0100000d 	tsteq	r0, sp
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	b0260354 	eorlt	r0, r6, r4, asr r3
    1458:	2c00000a 	stccs	0, cr0, [r0], {10}
    145c:	0000059e 	muleq	r0, lr, r5
	urates [0] = UART_RATE / 100;
    1460:	20036f01 	andcs	r6, r3, r1, lsl #30
    1464:	00000af8 	strdeq	r0, [r0], -r8
	reinit_uart ();
    1468:	0009a72c 	andeq	sl, r9, ip, lsr #14
	EXTRA_INITIALIZERS;
    146c:	03720100 	cmneq	r2, #0, 2
    1470:	000b001f 	andeq	r0, fp, pc, lsl r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1474:	0af22c00 	beq	ffc8c47c <_estack+0xdfc8747c>
    1478:	7a010000 	bvc	41480 <__ccfg+0x214d8>
    147c:	0b242903 	bleq	90b890 <__ccfg+0x8eb8e8>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1480:	272c0000 	strcs	r0, [ip, -r0]!
    1484:	0100000a 	tsteq	r0, sl
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1488:	2c22037d 	stccs	3, cr0, [r2], #-500	; 0xfffffe0c
    148c:	2c00000b 	stccs	0, cr0, [r0], {11}
			devinit [i] . init (devinit [i] . param);
    1490:	000004e9 	andeq	r0, r0, r9, ror #9
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1494:	1a038501 	bne	e28a0 <__ccfg+0xc28f8>
    1498:	00000b4e 	andeq	r0, r0, lr, asr #22
    149c:	0004992c 	andeq	r9, r4, ip, lsr #18
	IntEnable (INT_UART0_COMB);
    14a0:	039a0100 	orrseq	r0, sl, #0, 2
    14a4:	000bae16 	andeq	sl, fp, r6, lsl lr
}
    14a8:	088e2c00 	stmeq	lr, {sl, fp, sp}
	tci_run_auxiliary_timer ();
    14ac:	9d010000 	stcls	0, cr0, [r1, #-0]
		diag ("");
    14b0:	0bb61d03 	bleq	fed888c4 <_estack+0xded838c4>
    14b4:	722c0000 	eorvc	r0, ip, #0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b8:	01000008 	tsteq	r0, r8
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	ea1503aa 	b	54236c <__ccfg+0x5223c4>
		diag ("Leftover RAM: %d bytes",
    14c0:	2c00000b 	stccs	0, cr0, [r0], {11}
    14c4:	00000d26 	andeq	r0, r0, r6, lsr #26
    14c8:	1003ae01 	andne	sl, r3, r1, lsl #28
    14cc:	00000bf8 	strdeq	r0, [r0], -r8
    14d0:	00071a2c 	andeq	r1, r7, ip, lsr #20
    14d4:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    14d8:	000c4a13 	andeq	r4, ip, r3, lsl sl
    14dc:	0b272c00 	bleq	9cc4e4 <__ccfg+0x9ac53c>
    14e0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    14e4:	0c581103 	ldfeqe	f1, [r8], {3}
    14e8:	c02d0000 	eorgt	r0, sp, r0
    14ec:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    14f0:	3b010069 	blcc	4169c <__ccfg+0x216f4>
    14f4:	002c0d02 	eoreq	r0, ip, r2, lsl #26
    14f8:	03050000 	movweq	r0, #20480	; 0x5000
    14fc:	20000544 	andcs	r0, r0, r4, asr #10
    1500:	0008222f 	andeq	r2, r8, pc, lsr #4
    1504:	00084400 	andeq	r4, r8, r0, lsl #8
    1508:	00154200 	andseq	r4, r5, r0, lsl #4
    150c:	0c7a3000 	ldcleq	0, cr3, [sl], #-0
    1510:	a3010000 	movwge	r0, #4096	; 0x1000
    1514:	09320c02 	ldmdbeq	r2!, {r1, sl, fp}
    1518:	91020000 	mrsls	r0, (UNDEF: 2)
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	1aec3166 	bne	ffb0dabc <_estack+0xdfb08abc>
    1520:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
    1524:	00e80000 	rsceq	r0, r8, r0
    1528:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    152c:	0b320802 	bleq	c8353c <__ccfg+0xc63594>
    1530:	2900001b 	stmdbcs	r0, {r0, r1, r3, r4}
    1534:	32000000 	andcc	r0, r0, #0
    1538:	00001aff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
}
    153c:	0000003d 	andeq	r0, r0, sp, lsr r0
__attribute__ ((noreturn)) void __pi_release () {
    1540:	08330000 	ldmdaeq	r3!, {}	; <UNPREDICTABLE>
    1544:	99000001 	stmdbls	r0, {r0}
    1548:	30000015 	andcc	r0, r0, r5, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    154c:	00000362 	andeq	r0, r0, r2, ror #6
	check_stack_overflow;
    1550:	0b02b401 	bleq	ae55c <__ccfg+0x8e5b4>
    1554:	00000926 	andeq	r0, r0, r6, lsr #18
    1558:	33669102 	cmncc	r6, #-2147483648	; 0x80000000
	update_n_wake (MAX_WORD, NO);
    155c:	00000128 	andeq	r0, r0, r8, lsr #2
    1560:	00001574 	andeq	r1, r0, r4, ror r5
    1564:	01006934 	tsteq	r0, r4, lsr r9
	for_all_tasks (__pi_curr) {
    1568:	2c0b02c4 	sfmcs	f0, 4, [fp], {196}	; 0xc4
    156c:	50000000 	andpl	r0, r0, r0
    1570:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	001b1835 	andseq	r1, fp, r5, lsr r8
	__SLEEP;
    1578:	00086000 	andeq	r6, r8, r0
    157c:	00086200 	andeq	r6, r8, r0, lsl #4
    1580:	02b80100 	adcseq	r0, r8, #0, 2
    1584:	1b373208 	blne	dcddac <__ccfg+0xdade04>
	system_event_count ++;
    1588:	006e0000 	rsbeq	r0, lr, r0
    158c:	2b320000 	blcs	c81594 <__ccfg+0xc615ec>
	switch (__pi_systat.effpdm) {
    1590:	8100001b 	tsthi	r0, fp, lsl r0
    1594:	00000000 	andeq	r0, r0, r0
    1598:	01403300 	mrseq	r3, SPSR_irq
    159c:	15b40000 	ldrne	r0, [r4, #0]!
			__WFI ();
    15a0:	db360000 	blle	d815a8 <__ccfg+0xd61600>
    15a4:	0100000e 	tsteq	r0, lr
    15a8:	e11b02e6 	tst	fp, r6, ror #5
	check_stack_overflow;
    15ac:	94000012 	strls	r0, [r0], #-18	; 0xffffffee
    15b0:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b4:	00015833 	andeq	r5, r1, r3, lsr r8
    15b8:	0015cd00 	andseq	ip, r5, r0, lsl #26
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	00693400 	rsbeq	r3, r9, r0, lsl #8
			goto Redo;
    15c0:	0c030101 	stfeqs	f0, [r3], {1}
	for_all_tasks (__pi_curr) {
    15c4:	0000002c 	andeq	r0, r0, ip, lsr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	000000b2 	strheq	r0, [r0], -r2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15cc:	0a0a2f00 	beq	28d1d4 <__ccfg+0x26d22c>
    15d0:	0a5a0000 	beq	16815d8 <__ccfg+0x1661630>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d4:	15ec0000 	strbne	r0, [ip, #0]!
    15d8:	00360000 	eorseq	r0, r6, r0
    15dc:	01000000 	mrseq	r0, (UNDEF: 0)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15e0:	e11b0326 	tst	fp, r6, lsr #6
    15e4:	d0000012 	andle	r0, r0, r2, lsl r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	000ab02f 	andeq	fp, sl, pc, lsr #32
			__WFI ();
    15f0:	000af800 	andeq	pc, sl, r0, lsl #16
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f4:	00160b00 	andseq	r0, r6, r0, lsl #22
    15f8:	0b823600 	bleq	fe08ee00 <_estack+0xde089e00>
}
    15fc:	56010000 	strpl	r0, [r1], -r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1600:	12e11b03 	rscne	r1, r1, #3072	; 0xc00
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1604:	00ee0000 	rsceq	r0, lr, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1608:	37000000 	strcc	r0, [r0, -r0]
    160c:	00000b4e 	andeq	r0, r0, lr, asr #22
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1610:	00000bae 	andeq	r0, r0, lr, lsr #23
    1614:	0009d636 	andeq	sp, r9, r6, lsr r6
    1618:	03890100 	orreq	r0, r9, #0, 2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161c:	0012e11b 	andseq	lr, r2, fp, lsl r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1620:	00010c00 	andeq	r0, r1, r0, lsl #24
    1624:	00000000 	andeq	r0, r0, r0
    1628:	0084012a 	addeq	r0, r4, sl, lsr #2
    162c:	04010000 	streq	r0, [r1], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	08010601 	stmdaeq	r1, {r0, r9, sl}
    1634:	24000003 	strcs	r0, [r0], #-3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	01000007 	tsteq	r0, r7
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    163c:	0017bc9c 	mulseq	r7, ip, ip
    1640:	0c332b00 			; <UNDEFINED> instruction: 0x0c332b00
    1644:	04010000 	streq	r0, [r1], #-0
    1648:	09621501 	stmdbeq	r2!, {r0, r8, sl, ip}^
    164c:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
			SysCtrlSetRechargeBeforePowerDown
    1650:	45360000 	ldrmi	r0, [r6, #-0]!
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1654:	01000004 	tsteq	r0, r4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1658:	0d2e0104 	stfeqs	f0, [lr, #-16]!
    165c:	48000013 	stmdami	r0, {r0, r1, r4}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	2c000001 	stccs	0, cr0, [r0], {1}
    1664:	00000662 	andeq	r0, r0, r2, ror #12
    1668:	13010a01 	movwne	r0, #6657	; 0x1a01
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166c:	00000328 	andeq	r0, r0, r8, lsr #6
    1670:	0005d12c 	andeq	sp, r5, ip, lsr #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	010f0100 	mrseq	r0, (UNDEF: 31)
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	0003420e 	andeq	r4, r3, lr, lsl #4
    167c:	0dba2c00 	ldceq	12, cr2, [sl]
    1680:	0f010000 	svceq	0x00010000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1684:	03ee1502 	mvneq	r1, #8388608	; 0x800000
			while (!(AONWUCPowerStatusGet () &
    1688:	d52c0000 	strle	r0, [ip, #-0]!
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	0100000d 	tsteq	r0, sp
    1690:	081d0216 	ldmdaeq	sp, {r1, r2, r4, r9}
    1694:	2c000004 	stccs	0, cr0, [r0], {4}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1698:	00000538 	andeq	r0, r0, r8, lsr r5
    169c:	1d021901 	vstrne.16	s2, [r2, #-2]	; <UNPREDICTABLE>
    16a0:	00000416 	andeq	r0, r0, r6, lsl r4
    16a4:	0006ca2c 	andeq	ip, r6, ip, lsr #20
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	021c0100 	andseq	r0, ip, #0, 2
    16ac:	0004241f 	andeq	r2, r4, pc, lsl r4
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	07332c00 	ldreq	r2, [r3, -r0, lsl #24]!
    16b4:	21010000 	mrscs	r0, (UNDEF: 1)
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b8:	043c1602 	ldrteq	r1, [ip], #-1538	; 0xfffff9fe
			reinit_uart ();
    16bc:	462c0000 	strtmi	r0, [ip], -r0
    16c0:	01000007 	tsteq	r0, r7
    16c4:	50160224 	andspl	r0, r6, r4, lsr #4
}
    16c8:	2c000004 	stccs	0, cr0, [r0], {4}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    16cc:	00000759 	andeq	r0, r0, r9, asr r7
    16d0:	16022701 	strne	r2, [r2], -r1, lsl #14
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	00000464 	andeq	r0, r0, r4, ror #8
    16d8:	000b272c 	andeq	r2, fp, ip, lsr #14
    16dc:	022c0100 	eoreq	r0, ip, #0, 2
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	00047811 	andeq	r7, r4, r1, lsl r8
    16e4:	00902d00 	addseq	r2, r0, r0, lsl #26
    16e8:	1a360000 	bne	d816f0 <__ccfg+0xd61748>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ec:	01000002 	tsteq	r0, r2
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	e11d012a 	tst	sp, sl, lsr #2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	92000012 	andls	r0, r0, #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	38000001 	stmdacc	r0, {r0}
    16fc:	00000d0c 	andeq	r0, r0, ip, lsl #26
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1700:	25012c01 	strcs	r2, [r1, #-3073]	; 0xfffff3ff
    1704:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1708:	00022d38 	andeq	r2, r2, r8, lsr sp
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170c:	01510100 	cmpeq	r1, r0, lsl #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1710:	0017c226 	andseq	ip, r7, r6, lsr #4
    1714:	02403600 	subeq	r3, r0, #0, 12
			PRCMPowerDomainOff (
    1718:	67010000 	strvs	r0, [r1, -r0]
    171c:	12e11d01 	rscne	r1, r1, #1, 26	; 0x40
	__SLEEP;
    1720:	01b00000 	movseq	r0, r0
    1724:	82380000 	eorshi	r0, r8, #0
  __ASM volatile ("cpsie i" : : : "memory");
    1728:	0100000a 	tsteq	r0, sl
	goto Redo;
    172c:	c8210168 	stmdagt	r1!, {r3, r5, r6, r8}
    1730:	38000017 	stmdacc	r0, {r0, r1, r2, r4}
    1734:	000008c0 	andeq	r0, r0, r0, asr #17
    1738:	09016901 	stmdbeq	r1, {r0, r8, fp, sp, lr}
    173c:	000017ce 	andeq	r1, r0, lr, asr #15
    1740:	00077836 	andeq	r7, r7, r6, lsr r8
    1744:	016a0100 	cmneq	sl, r0, lsl #2
    1748:	0009260d 	andeq	r2, r9, sp, lsl #12
    174c:	0001ce00 	andeq	ip, r1, r0, lsl #28
    1750:	03c73800 	biceq	r3, r7, #0, 16
    1754:	92010000 	andls	r0, r1, #0
    1758:	12e11d01 	rscne	r1, r1, #1, 26	; 0x40
    175c:	a4380000 	ldrtge	r0, [r8], #-0
    1760:	0100000d 	tsteq	r0, sp
    1764:	d5210193 	strle	r0, [r1, #-403]!	; 0xfffffe6d
    1768:	38000017 	stmdacc	r0, {r0, r1, r2, r4}
    176c:	00000265 	andeq	r0, r0, r5, ror #4
    1770:	1d01ba01 	vstrne	s22, [r1, #-4]
    1774:	000012e1 	andeq	r1, r0, r1, ror #5
    1778:	0007ca38 	andeq	ip, r7, r8, lsr sl
    177c:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    1780:	0017db23 	andseq	sp, r7, r3, lsr #22
    1784:	092c3000 	stmdbeq	ip!, {ip, sp}
    1788:	bc010000 	stclt	0, cr0, [r1], {-0}
    178c:	0e881301 	cdpeq	3, 8, cr1, cr8, cr1, {0}
    1790:	91030000 	mrsls	r0, (UNDEF: 3)
    1794:	31317fb0 	teqcc	r1, r0	; <illegal shifter operand>
	cli_tim;
    1798:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
    179c:	a8000006 	stmdage	r0, {r1, r2}
    17a0:	01000000 	mrseq	r0, (UNDEF: 0)
	diag ("PicOS halted");
    17a4:	321901c7 	andscc	r0, r9, #-1073741775	; 0xc0000031
	mdelay (500);
    17a8:	00001950 	andeq	r1, r0, r0, asr r9
    17ac:	000001ec 	andeq	r0, r0, ip, ror #3
	setpowermode (2);
    17b0:	00194432 	andseq	r4, r9, r2, lsr r4
	__PCB = NULL;
    17b4:	00020b00 	andeq	r0, r2, r0, lsl #22
	release;
    17b8:	00000000 	andeq	r0, r0, r0
    17bc:	0f680411 	svceq	0x00680411
    17c0:	04110000 	ldreq	r0, [r1], #-0
    17c4:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
int main (void) {
    17c8:	10060411 	andne	r0, r6, r1, lsl r4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	01020000 	mrseq	r0, (UNDEF: 2)
    17d0:	000ca702 	andeq	sl, ip, r2, lsl #14
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	62041100 	andvs	r1, r4, #0, 2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17d8:	11000010 	tstne	r0, r0, lsl r0
	system_init ();
    17dc:	0010cb04 	andseq	ip, r0, r4, lsl #22
	tcv_init ();
    17e0:	98013900 	stmdals	r1, {r8, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e4:	0100000a 	tsteq	r0, sl
    17e8:	c80106c7 	stmdagt	r1, {r0, r1, r2, r6, r7, r9, sl}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17ec:	84000000 	strhi	r0, [r0], #-0
    17f0:	01000001 	tsteq	r0, r1
    17f4:	00186b9c 	mulseq	r8, ip, fp
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    17f8:	0c333a00 			; <UNDEFINED> instruction: 0x0c333a00
    17fc:	c7010000 	strgt	r0, [r1, -r0]
	delay (16, 0);
    1800:	00096213 	andeq	r6, r9, r3, lsl r2
    1804:	00021e00 	andeq	r1, r2, r0, lsl #28
    1808:	0c0f3b00 			; <UNDEFINED> instruction: 0x0c0f3b00
	__pi_release ();
    180c:	c7010000 	strgt	r0, [r1, -r0]
    1810:	0012e137 	andseq	lr, r2, r7, lsr r1
    1814:	00023c00 	andeq	r3, r2, r0, lsl #24
    1818:	09f93c00 	ldmibeq	r9!, {sl, fp, ip, sp}^
    181c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1820:	0000da11 	andeq	sp, r0, r1, lsl sl
    1824:	0bff3c00 	bleq	fffd082c <_estack+0xdffcb82c>
static void killev (__pi_pcb_t *pid) {
    1828:	fc010000 	stc2	0, cr0, [r1], {-0}
	wfun = (aword)(pid->code);
    182c:	0001281b 	andeq	r2, r1, fp, lsl r8
	for_all_tasks (i) {
    1830:	00002d00 	andeq	r2, r0, r0, lsl #26
		for (j = 0; j < nevents (i); j++) {
    1834:	2c3d0000 	ldccs	0, cr0, [sp], #-0
    1838:	0100000c 	tsteq	r0, ip
    183c:	09a611c8 	stmibeq	r6!, {r3, r6, r7, r8, ip}
			    || i->Events [j] . Event == wfun
    1840:	03050000 	movweq	r0, #20480	; 0x5000
		for (j = 0; j < nevents (i); j++) {
    1844:	20000548 	andcs	r0, r0, r8, asr #10
			if (i->Events [j] . Event == (aword)pid
    1848:	00039e3e 	andeq	r9, r3, lr, lsr lr
    184c:	0dca0100 	stfeqe	f0, [sl]
    1850:	0000002c 	andeq	r0, r0, ip, lsr #32
				wakeupev (i, j);
    1854:	00382d1e 	eorseq	r2, r8, lr, lsl sp
    1858:	703f0000 	eorsvc	r0, pc, r0
	for_all_tasks (i) {
    185c:	0ad00100 	beq	ff401c64 <_estack+0xdf3fcc64>
}
    1860:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	00000253 	andeq	r0, r0, r3, asr r2
static void qfree (aword *ch) {
    1868:	40000000 	andmi	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186c:	000ad801 	andeq	sp, sl, r1, lsl #16
	cc = (aword*)(mpools + MA_NP);
    1870:	19b20100 	ldmibne	r2!, {r8}
	m_setnextp (ch, chunk);
    1874:	0012e101 	andseq	lr, r2, r1, lsl #2
	m_setnextp (cc, ch);
    1878:	0002b600 	andeq	fp, r2, r0, lsl #12
}
    187c:	00030800 	andeq	r0, r3, r0, lsl #16
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1880:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    1884:	41000019 	tstmi	r0, r9, lsl r0
    1888:	00646967 	rsbeq	r6, r4, r7, ror #18
			m_setnextp (cc, m_nextp (chunk));
    188c:	323cb201 	eorscc	fp, ip, #268435456	; 0x10000000
			m_size (chunk) += m_hdrlen + m_size (ch);
    1890:	66000009 	strvs	r0, [r0], -r9
    1894:	3a000002 	bcc	18a4 <qfree+0x40>
    1898:	00000d88 	andeq	r0, r0, r8, lsl #27
    189c:	2649b201 	strbcs	fp, [r9], -r1, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	79000009 	stmdbvc	r0, {r0, r3}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	3a000002 	bcc	18b4 <qfree+0x50>
    18a8:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    18ac:	2661b201 	strbtcs	fp, [r1], -r1, lsl #4
			m_setnextp (cc, m_nextp (chunk));
    18b0:	8c000009 	stchi	0, cr0, [r0], {9}
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	3a000002 	bcc	18c4 <qfree+0x60>
    18b8:	00000299 	muleq	r0, r9, r2
    18bc:	2674b201 	ldrbtcs	fp, [r4], -r1, lsl #4
    18c0:	9f000009 	svcls	0x00000009
    18c4:	42000002 	andmi	r0, r0, #2
    18c8:	00000778 	andeq	r0, r0, r8, ror r7
			if (m_size (chunk) >= m_size (ch))
    18cc:	2689b201 	strcs	fp, [r9], r1, lsl #4
    18d0:	02000009 	andeq	r0, r0, #9
    18d4:	29420091 	stmdbcs	r2, {r0, r4, r7}^
		chunk = m_nextp (chunk))
    18d8:	01000008 	tsteq	r0, r8
    18dc:	092699b2 	stmdbeq	r6!, {r1, r4, r5, r7, r8, fp, ip, pc}
    18e0:	91020000 	mrsls	r0, (UNDEF: 2)
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	65724304 	ldrbvs	r4, [r2, #-772]!	; 0xfffffcfc
	diag_wait (a);
    18e8:	b2010063 	andlt	r0, r1, #99	; 0x63
	diag_wchar (c, a);
    18ec:	0005bda7 	andeq	fp, r5, r7, lsr #27
    18f0:	08910200 	ldmeq	r1, {r9}
}
    18f4:	000ae13b 	andeq	lr, sl, fp, lsr r1
    18f8:	1ab30100 	bne	fecc1d00 <_estack+0xdecbcd00>
	syserror (ESTATE, "state");
    18fc:	000012e1 	andeq	r1, r0, r1, ror #5
    1900:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1904:	35014400 	strcc	r4, [r1, #-1024]	; 0xfffffc00
    1908:	0100000f 	tsteq	r0, pc
	for (i = 0; i < MAX_UTIMERS; i++)
    190c:	ce01059f 	mcrgt	5, 0, r0, cr1, cr15, {4}
void utimer_add (address ut) {
    1910:	01000017 	tsteq	r0, r7, lsl r0
    1914:	00001931 	andeq	r1, r0, r1, lsr r9
		if (__pi_utims [i] == NULL)
    1918:	0051ef45 	subseq	lr, r1, r5, asr #30
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	1d9f0100 	ldfnes	f0, [pc]	; 1924 <utimer_add+0x18>
    1920:	0000130d 	andeq	r1, r0, sp, lsl #6
		syserror (ERESOURCE, "ut a");
    1924:	00694746 	rsbeq	r4, r9, r6, asr #14
	__pi_utims [i] = ut;
    1928:	2c11a501 	cfldr32cs	mvfx10, [r1], {1}
}
    192c:	00000000 	andeq	r0, r0, r0
    1930:	d6014400 	strle	r4, [r1], -r0, lsl #8
    1934:	01000009 	tsteq	r0, r9
	*t = v;
    1938:	88010f97 	stmdahi	r1, {r0, r1, r2, r4, r7, r8, r9, sl, fp}
	TCI_RUN_AUXILIARY_TIMER;
    193c:	0100000e 	tsteq	r0, lr
void update_n_wake (word min, Boolean force) {
    1940:	0000195d 	andeq	r1, r0, sp, asr r9
	if (TCI_UPDATE_DELAY_TICKS (force))
    1944:	0051ef45 	subseq	lr, r1, r5, asr #30
    1948:	2c970100 	ldfcss	f0, [r7], {0}
    194c:	0000130d 	andeq	r1, r0, sp, lsl #6
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1950:	0004c245 	andeq	ip, r4, r5, asr #4
    1954:	3a970100 	bcc	fe5c1d5c <_estack+0xde5bcd5c>
    1958:	00000926 	andeq	r0, r0, r6, lsr #18
    195c:	82014000 	andhi	r4, r1, #0
    1960:	0100000b 	tsteq	r0, fp
    1964:	ce010583 	cfsh32gt	mvfx0, mvfx1, #-61
    1968:	66000017 			; <UNDEFINED> instruction: 0x66000017
    196c:	86000002 	strhi	r0, [r0], -r2
    1970:	01000002 	tsteq	r0, r2
    1974:	00199a9c 	mulseq	r9, ip, sl
    1978:	51ef3a00 	mvnpl	r3, r0, lsl #20
    197c:	83010000 	movwhi	r0, #4096	; 0x1000
    1980:	00130d20 	andseq	r0, r3, r0, lsr #26
		for_all_tasks (i) {
    1984:	0002d000 	andeq	sp, r2, r0
	__pi_mintk = znew + min;
    1988:	04c23a00 	strbeq	r3, [r2], #2560	; 0xa00
    198c:	83010000 	movwhi	r0, #4096	; 0x1000
			if (!twaiting (i))
    1990:	0009262e 	andeq	r2, r9, lr, lsr #12
    1994:	0002e300 	andeq	lr, r2, r0, lsl #6
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1998:	01400000 	mrseq	r0, (UNDEF: 64)
    199c:	000005e6 	andeq	r0, r0, r6, ror #11
    19a0:	01057301 	tsteq	r5, r1, lsl #6
    19a4:	000017ce 	andeq	r1, r0, lr, asr #15
    19a8:	00000250 	andeq	r0, r0, r0, asr r2
    19ac:	00000266 	andeq	r0, r0, r6, ror #4
    19b0:	19db9c01 	ldmibne	fp, {r0, sl, fp, ip, pc}^
    19b4:	ef3a0000 	svc	0x003a0000
    19b8:	01000051 	qaddeq	r0, r1, r0
    19bc:	130d2d73 	movwne	r2, #56691	; 0xdd73
    19c0:	02f60000 	rscseq	r0, r6, #0
    19c4:	50370000 	eorspl	r0, r7, r0
				wakeuptm (i);
    19c8:	62000002 	andvs	r0, r0, #2
    19cc:	47000002 	strmi	r0, [r0, -r2]
		for_all_tasks (i) {
    19d0:	78010069 	stmdavc	r1, {r0, r3, r5, r6}
				d = i->Timer - znew;
    19d4:	00002c12 	andeq	r2, r0, r2, lsl ip
    19d8:	40000000 	andmi	r0, r0, r0
    19dc:	0003e201 	andeq	lr, r3, r1, lsl #4
		if ((word)(__pi_mintk - znew) < min) 
    19e0:	05510100 	ldrbeq	r0, [r1, #-256]	; 0xffffff00
    19e4:	0017ce01 	andseq	ip, r7, r1, lsl #28
    19e8:	0001cc00 	andeq	ip, r1, r0, lsl #24
	__pi_old = znew;
    19ec:	00025000 	andeq	r5, r2, r0
}
    19f0:	5c9c0100 	ldfpls	f0, [ip], {0}
	TCI_RUN_DELAY_TIMER;
    19f4:	3a00001a 	bcc	1a64 <__pi_trigger+0x10>
}
    19f8:	000051ef 	andeq	r5, r0, pc, ror #3
    19fc:	0d205101 	stfeqs	f5, [r0, #-4]!
    1a00:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1a04:	3a000003 	bcc	1a18 <proceed+0xc>
    1a08:	00000f06 	andeq	r0, r0, r6, lsl #30
void proceed (word state) {
    1a0c:	bd2b5101 	stflts	f5, [fp, #-4]!
	prcdstate (__pi_curr, state);
    1a10:	32000005 	andcc	r0, r0, #5
    1a14:	3a000003 	bcc	1a28 <__pi_wait+0x8>
	release;
    1a18:	00000f47 	andeq	r0, r0, r7, asr #30
    1a1c:	26425101 	strbcs	r5, [r2], -r1, lsl #2
void __pi_wait (aword event, word state) {
    1a20:	5b000009 	blpl	1a4c <__pi_wait+0x2c>
	sint j = nevents (__pi_curr);
    1a24:	3f000003 	svccc	0x00000003
	if (j >= MAX_EVENTS_PER_TASK)
    1a28:	006d756e 	rsbeq	r7, sp, lr, ror #10
    1a2c:	2c095401 	cfstrscs	mvf5, [r9], {1}
    1a30:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
		syserror (ENEVENTS, "sw");
    1a34:	2d000003 	stccs	0, cr0, [r0, #-12]
    1a38:	00000060 	andeq	r0, r0, r0, rrx
	setestate (__pi_curr->Events [j], state, event);
    1a3c:	0100693f 	tsteq	r0, pc, lsr r9
	incwait (__pi_curr);
    1a40:	002c125d 	eoreq	r1, ip, sp, asr r2
	setestate (__pi_curr->Events [j], state, event);
    1a44:	038c0000 	orreq	r0, ip, #0
}
    1a48:	80480000 	subhi	r0, r8, r0
    1a4c:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    1a50:	78000002 	stmdavc	r0, {r1}
void __pi_trigger (aword event) {
    1a54:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
    1a58:	00003b63 	andeq	r3, r0, r3, ror #22
		for (j = 0; j < nevents (i); j++) {
    1a5c:	05890149 	streq	r0, [r9, #329]	; 0x149
    1a60:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1a64:	09260109 	stmdbeq	r6!, {r0, r3, r8}
    1a68:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
			if (i->Events [j] . Event == event) {
    1a6c:	01cc0000 	biceq	r0, ip, r0
    1a70:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a74:	00a00139 	adceq	r0, r0, r9, lsr r1
				wakeupev (i, j);
    1a78:	45010000 	strmi	r0, [r1, #-0]
    1a7c:	00000106 	andeq	r0, r0, r6, lsl #2
	for_all_tasks (i) {
    1a80:	00000000 	andeq	r0, r0, r0
}
    1a84:	9c010000 	stcls	0, cr0, [r1], {-0}
aword __pi_join (aword pid, word st) {
    1a88:	00001ab1 			; <UNDEFINED> instruction: 0x00001ab1
	for_all_tasks (i) {
    1a8c:	0051ef3a 	subseq	lr, r1, sl, lsr pc
    1a90:	1f450100 	svcne	0x00450100
	return 0;
    1a94:	0000130d 	andeq	r1, r0, sp, lsl #6
		if ((aword)i == pid) {
    1a98:	000003aa 	andeq	r0, r0, sl, lsr #7
			__pi_wait (pid, st);
    1a9c:	00000037 	andeq	r0, r0, r7, lsr r0
}
    1aa0:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1aa4:	00694700 	rsbeq	r4, r9, r0, lsl #14
    1aa8:	2c0b4601 	stccs	6, cr4, [fp], {1}
void delay (word d, word state) {
    1aac:	00000000 	andeq	r0, r0, r0
	settstate (__pi_curr, state);
    1ab0:	a5014000 	strge	r4, [r1, #-0]
    1ab4:	0100000e 	tsteq	r0, lr
    1ab8:	ce01053e 	mcrgt	5, 0, r0, cr1, cr14, {1}
    1abc:	00000017 	andeq	r0, r0, r7, lsl r0
	update_n_wake (d, YES);
    1ac0:	00000000 	andeq	r0, r0, r0
    1ac4:	01000000 	mrseq	r0, (UNDEF: 0)
	__pi_curr->Timer = __pi_old + d;
    1ac8:	001aec9c 	mulseq	sl, ip, ip
    1acc:	51ef3a00 	mvnpl	r3, r0, lsl #20
	inctimer (__pi_curr);
    1ad0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    1ad4:	00130d2a 	andseq	r0, r3, sl, lsr #26
    1ad8:	0003bd00 	andeq	fp, r3, r0, lsl #26
}
    1adc:	03904200 	orrseq	r4, r0, #0, 4
    1ae0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
	if (fun == NULL)
    1ae4:	00092638 	andeq	r2, r9, r8, lsr r6
		return (int) __pi_curr;
    1ae8:	00510100 	subseq	r0, r1, r0, lsl #2
    1aec:	08d00144 	ldmeq	r0, {r2, r6, r8}^
	for_all_tasks (i)
    1af0:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
}
    1af4:	17ce0105 	strbne	r0, [lr, r5, lsl #2]
		if (i->code == fun)
    1af8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
	for_all_tasks (i)
    1afc:	4500001b 	strmi	r0, [r0, #-27]	; 0xffffffe5
    1b00:	000051ef 	andeq	r5, r0, pc, ror #3
    1b04:	0d1f3801 	ldceq	8, cr3, [pc, #-4]	; 1b08 <__pi_strlen>
int __pi_strlen (const char *s) {
    1b08:	4a000013 	bmi	1b5c <__pi_memset+0x6>
	for (i = 0; *(s+i) != '\0'; i++);
    1b0c:	00646967 	rsbeq	r6, r4, r7, ror #18
}
    1b10:	322e3801 	eorcc	r3, lr, #65536	; 0x10000
	for (i = 0; *(s+i) != '\0'; i++);
    1b14:	00000009 	andeq	r0, r0, r9
	while ((Boolean)(*d++ = *s++));
    1b18:	04c80144 	strbeq	r0, [r8], #324	; 0x144
    1b1c:	33010000 	movwcc	r0, #4096	; 0x1000
    1b20:	17ce0105 	strbne	r0, [lr, r5, lsl #2]
}
    1b24:	43010000 	movwmi	r0, #4096	; 0x1000
	while (n-- && (*s != '\0'))
    1b28:	4500001b 	strmi	r0, [r0, #-27]	; 0xffffffe5
    1b2c:	000051ef 	andeq	r5, r0, pc, ror #3
	*d = '\0';
    1b30:	0d1e3301 	ldceq	3, cr3, [lr, #-4]
	while (n-- && (*s != '\0'))
    1b34:	4a000013 	bmi	1b88 <io>
    1b38:	01006469 	tsteq	r0, r9, ror #8
		*d++ = *s++;
    1b3c:	09262c33 	stmdbeq	r6!, {r0, r1, r4, r5, sl, fp, sp}
    1b40:	40000000 	andmi	r0, r0, r0
	while (n--)
    1b44:	000cad01 	andeq	sl, ip, r1, lsl #26
    1b48:	0e1a0100 	mufeqe	f0, f2, f0
		*dest++ = *src++;
    1b4c:	00130d01 	andseq	r0, r3, r1, lsl #26
    1b50:	00018400 	andeq	r8, r1, r0, lsl #8
    1b54:	0001ba00 	andeq	fp, r1, r0, lsl #20
	while (n--)
    1b58:	809c0100 	addshi	r0, ip, r0, lsl #2
}
    1b5c:	3a00001b 	bcc	1bd0 <io+0x48>
		*dest++ = c;
    1b60:	000051ef 	andeq	r5, r0, pc, ror #3
void adddevfunc (devreqfun_t rf, int loc) {
    1b64:	0d251a01 	vstmdbeq	r5!, {s2}
		syserror (EREQPAR, "addv");
    1b68:	d0000013 	andle	r0, r0, r3, lsl r0
		syserror (ERESOURCE, "addv");
    1b6c:	3b000003 	blcc	1b80 <adddevfunc+0x1c>
	if (ioreq [loc] != NULL)
    1b70:	00000ce3 	andeq	r0, r0, r3, ror #25
    1b74:	0d121b01 	vldreq	d1, [r2, #-4]
		syserror (ERESOURCE, "addv");
    1b78:	e3000013 	movw	r0, #19
	ioreq [loc] = rf;
    1b7c:	00000003 	andeq	r0, r0, r3
}
    1b80:	0009474b 	andeq	r4, r9, fp, asr #14
    1b84:	01d30200 	bicseq	r0, r3, r0, lsl #4
sint io (word retry, word dev, word operation, char *buf, word len) {
    1b88:	093e0101 	ldmdbeq	lr!, {r0, r8}
    1b8c:	4c030000 	stcmi	0, cr0, [r3], {-0}
    1b90:	00001b18 	andeq	r1, r0, r8, lsl fp
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1b9c:	1bb39c01 	blne	fece8ba8 <_estack+0xdece3ba8>
    1ba0:	2b320000 	blcs	c81ba8 <__ccfg+0xc61c00>
		syserror (ENODEVICE, "io");
    1ba4:	0100001b 	tsteq	r0, fp, lsl r0
    1ba8:	4d000004 	stcmi	0, cr0, [r0, #-16]
	if (len == 0)
    1bac:	00001b37 	andeq	r1, r0, r7, lsr fp
	ret = (ioreq [dev]) (operation, buf, len);
    1bb0:	4c005101 	stfmis	f5, [r0], {1}
    1bb4:	00001aec 	andeq	r1, r0, ip, ror #21
	...
	if (ret == -1) {
    1bc0:	1bd79c01 	blne	ff5e8bcc <_estack+0xdf5e3bcc>
		if (retry == WNONE)
    1bc4:	ff320000 			; <UNDEFINED> instruction: 0xff320000
		iowait (dev, operation, retry);
    1bc8:	1400001a 	strne	r0, [r0], #-26	; 0xffffffe6
    1bcc:	4d000004 	stcmi	0, cr0, [r0, #-16]
    1bd0:	00001b0b 	andeq	r1, r0, fp, lsl #22
			release;
    1bd4:	4c005101 	stfmis	f5, [r0], {1}
	if (ret == -2) {
    1bd8:	00001931 	andeq	r1, r0, r1, lsr r9
	...
			iowait (dev, operation, retry);
    1be4:	1bfd9c01 	blne	fff68bf0 <_estack+0xdff63bf0>
    1be8:	44320000 	ldrtmi	r0, [r2], #-0
			(ioreq [dev]) (NONE, buf, len);
    1bec:	27000019 	smladcs	r0, r9, r0, r0
    1bf0:	32000004 	andcc	r0, r0, #4
    1bf4:	00001950 	andeq	r1, r0, r0, asr r9
		(ioreq [dev]) (NONE, buf, len);
    1bf8:	0000043a 	andeq	r0, r0, sl, lsr r4
    1bfc:	19054e00 	stmdbne	r5, {r9, sl, fp, lr}
    1c00:	02860000 	addeq	r0, r6, #0
}
    1c04:	02b60000 	adcseq	r0, r6, #0
	if (retry != WNONE) {
    1c08:	9c010000 	stcls	0, cr0, [r1], {-0}
		delay (-ret - 2, retry);
    1c0c:	00191832 	andseq	r1, r9, r2, lsr r8
    1c10:	00044d00 	andeq	r4, r4, r0, lsl #26
    1c14:	19244f00 	stmdbne	r4!, {r8, r9, sl, fp, lr}
    1c18:	02920000 	addseq	r0, r2, #0
		release;
    1c1c:	02a40000 	adceq	r0, r4, #0
    1c20:	1c300000 	ldcne	0, cr0, [r0], #-0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c24:	25500000 	ldrbcs	r0, [r0, #-0]
    1c28:	6b000019 	blvs	1c94 <__pi_free+0x20>
    1c2c:	00000004 	andeq	r0, r0, r4
    1c30:	00190551 	andseq	r0, r9, r1, asr r5
    1c34:	0002a400 	andeq	sl, r2, r0, lsl #8
		syserror (ERESOURCE, "mal1");
    1c38:	0002b000 	andeq	fp, r2, r0
    1c3c:	059f0100 	ldreq	r0, [pc, #256]	; 1d44 <__pi_malloc+0x38>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1c40:	00191832 	andseq	r1, r9, r2, lsr r8
    1c44:	00048900 	andeq	r8, r4, r0, lsl #18
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c48:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1c4c:	0000148c 	andeq	r1, r0, ip, lsl #9
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c50:	04ae0003 	strteq	r0, [lr], #3
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1c54:	01040000 	mrseq	r0, (UNDEF: 4)
    1c58:	000000ac 	andeq	r0, r0, ip, lsr #1
}
    1c5c:	0012920c 	andseq	r9, r2, ip, lsl #4
    1c60:	000e1000 	andeq	r1, lr, r0
    1c64:	00065800 	andeq	r5, r6, r0, lsl #16
    1c68:	00000000 	andeq	r0, r0, r0
    1c6c:	000e2d00 	andeq	r2, lr, r0, lsl #26
    1c70:	06010200 	streq	r0, [r1], -r0, lsl #4
void __pi_free (aword *ch) {
    1c74:	00000c5d 	andeq	r0, r0, sp, asr ip
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1c78:	6b050202 	blvs	142488 <__ccfg+0x1224e0>
    1c7c:	0300000a 	movweq	r0, #10
		syserror (EMALLOC, "malg");
    1c80:	00002ba7 	andeq	r2, r0, r7, lsr #23
    1c84:	3f182810 	svccc	0x00182810
	mcfree [MA_NP] += m_size (ch);
    1c88:	02000000 	andeq	r0, r0, #0
		m_size (ch) ^= MALLOC_UMASK;
    1c8c:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    1c90:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
	mcfree [MA_NP] += m_size (ch);
    1c94:	0007f805 	andeq	pc, r7, r5, lsl #16
	QFREE;
    1c98:	2a220300 	bcs	8828a0 <__ccfg+0x8628f8>
	if (mevent [MA_NP] . nwait) {
    1c9c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1ca0:	00005918 	andeq	r5, r0, r8, lsl r9
		trigger ((aword)(&(mevent [MA_NP])));
    1ca4:	08010200 	stmdaeq	r1, {r9}
		mevent [MA_NP] . nwait --;
    1ca8:	00000c5b 	andeq	r0, r0, fp, asr ip
}
    1cac:	002e1803 	eoreq	r1, lr, r3, lsl #16
    1cb0:	19311000 	ldmdbne	r1!, {ip}
    1cb4:	0000006c 	andeq	r0, r0, ip, rrx
    1cb8:	6c070202 	sfmvs	f0, 4, [r7], {2}
void kill (aword pid) {
    1cbc:	0300000d 	movweq	r0, #13
		pid = (aword) __pi_curr;
    1cc0:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
	j = NULL;
    1cc4:	7f193410 	svcvc	0x00193410
	for_all_tasks (i) {
    1cc8:	02000000 	andeq	r0, r0, #0
	syserror (EREQPAR, "kpi");
    1ccc:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    1cd0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
		if ((aword)i == pid) {
    1cd4:	00042107 	andeq	r2, r4, r7, lsl #2
    1cd8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
				__PCB = i->Next;
    1cdc:	00746e69 	rsbseq	r6, r4, r9, ror #28
			killev (i);
    1ce0:	2b070402 	blcs	1c2cf0 <__ccfg+0x1a2d48>
			ufree (i);
    1ce4:	03000004 	movweq	r0, #4
			if (i == __pi_curr)
    1ce8:	0000132e 	andeq	r1, r0, lr, lsr #6
    1cec:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
				release;
    1cf0:	03000000 	movweq	r0, #0
				j->Next = i->Next;
    1cf4:	00002901 	andeq	r2, r0, r1, lsl #18
    1cf8:	60122711 	andsvs	r2, r2, r1, lsl r7
    1cfc:	05000000 	streq	r0, [r0, #-0]
}
    1d00:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d04:	0000a706 	andeq	sl, r0, r6, lsl #14
    1d08:	13d20300 	bicsne	r0, r2, #0, 6
	if (size < 8)
    1d0c:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
		_size = 2;
    1d10:	00003312 	andeq	r3, r0, r2, lsl r3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d14:	1dc80300 	stclne	3, cr0, [r8]
		_size = (((aword)size) + 3) >> 2;
    1d18:	2b110000 	blcs	441d20 <__ccfg+0x421d78>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d1c:	00004d12 	andeq	r4, r0, r2, lsl sp
		_size = (((aword)size) + 3) >> 2;
    1d20:	00c90600 	sbceq	r0, r9, r0, lsl #12
		if (mevent [MA_NP] . nfail != 255)
    1d24:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    1d28:	03000000 	movweq	r0, #0
			mevent [MA_NP] . nfail ++;
    1d2c:	00002953 	andeq	r2, r0, r3, asr r9
		mnfree [MA_NP] = 0;
    1d30:	73122c11 	tstvc	r2, #4352	; 0x1100
    1d34:	05000000 	streq	r0, [r0, #-0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d38:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1d3c:	00064603 	andeq	r4, r6, r3, lsl #12
			syserror (EMALLOC, "malc");
    1d40:	122d1100 	eorne	r1, sp, #0, 2
    1d44:	00000073 	andeq	r0, r0, r3, ror r0
		if (m_size (chunk) >= _size)
    1d48:	000bb403 	andeq	fp, fp, r3, lsl #8
    1d4c:	102e1100 	eorne	r1, lr, r0, lsl #2
		chunk = m_nextp (chunk)) {
    1d50:	00000108 	andeq	r0, r0, r8, lsl #2
		m_setnextp (cc, m_nextp (chunk));
    1d54:	00a70407 	adceq	r0, r7, r7, lsl #8
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1d58:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    1d5c:	9c093211 	sfmls	f3, 4, [r9], {17}
			m_size (chunk) = _size;
    1d60:	09000001 	stmdbeq	r0, {r0}
			cc = chunk + _size + m_hdrlen;
    1d64:	00000034 	andeq	r0, r0, r4, lsr r0
    1d68:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
			m_size (cc) = waste - m_hdrlen;
    1d6c:	01000000 	mrseq	r0, (UNDEF: 0)
			QFREE;
    1d70:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
		mevent [MA_NP] . nfail = 0;
    1d74:	0000064c 	andeq	r0, r0, ip, asr #12
		mcfree [MA_NP] -= m_size (chunk);
    1d78:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
    1d7c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d80:	09000601 	stmdbeq	r0, {r0, r9, sl}
    1d84:	000002e7 	andeq	r0, r0, r7, ror #5
		m_size (chunk) |= MALLOC_UMASK;
    1d88:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d8c:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (chunk) |= MALLOC_UMASK;
    1d90:	09000501 	stmdbeq	r0, {r0, r8, sl}
			mnfree [MA_NP] = mcfree [MA_NP];
    1d94:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
}
    1d98:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
    1d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1da0:	09000401 	stmdbeq	r0, {r0, sl}
    1da4:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1da8:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
    1dac:	01000000 	mrseq	r0, (UNDEF: 0)
    1db0:	0a000004 	beq	1dc8 <__pi_fork+0x14>
aword __pi_fork (fsmcode func, aword data) {
    1db4:	0000065b 	andeq	r0, r0, fp, asr r6
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1db8:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
    1dbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1dc0:	0008fb0a 	andeq	pc, r8, sl, lsl #22
		if ((j = __PCB) == NULL)
    1dc4:	033c1100 	teqeq	ip, #0, 2
	i->Next = NULL;
    1dc8:	000000c9 	andeq	r0, r0, r9, asr #1
	i->data = data;
    1dcc:	0f400a02 	svceq	0x00400a02
		if ((j = __PCB) == NULL)
    1dd0:	3d110000 	ldccc	0, cr0, [r1, #-0]
}
    1dd4:	0000c903 	andeq	ip, r0, r3, lsl #18
			for (; j->Next != NULL; j = j->Next);
    1dd8:	130a0300 	movwne	r0, #41728	; 0xa300
    1ddc:	11000009 	tstne	r0, r9
	return (aword) i;
    1de0:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    1de4:	00040000 	andeq	r0, r4, r0
	if (mevent [MA_NP] . nwait != 255)
    1de8:	00031d03 	andeq	r1, r3, r3, lsl #26
    1dec:	03411100 	movteq	r1, #4352	; 0x1100
    1df0:	0000010e 	andeq	r0, r0, lr, lsl #2
		mevent [MA_NP] . nwait ++;
    1df4:	00019c06 	andeq	r9, r1, r6, lsl #24
	wait ((aword)(&(mevent [MA_NP])), state);
    1df8:	06be0b00 	ldrteq	r0, [lr], r0, lsl #22
    1dfc:	43110000 	tstmi	r1, #0
void diag (const char *mess, ...) {
    1e00:	0001a81a 	andeq	sl, r1, sl, lsl r8
    1e04:	0b010100 	bleq	4220c <__ccfg+0x22264>
    1e08:	000001a0 	andeq	r0, r0, r0, lsr #3
	diag_disable_int (a, is);
    1e0c:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
    1e10:	01000001 	tsteq	r0, r1
    1e14:	cf040701 	svcgt	0x00040701
				d = (bc == 16) ? 10000 : 1000000000;
    1e18:	02000001 	andeq	r0, r0, #1
	diag_disable_int (a, is);
    1e1c:	0c640801 	stcleq	8, cr0, [r4], #-4
	while (*mess != '\0') {
    1e20:	cf050000 	svcgt	0x00050000
	dgout ('\r');
    1e24:	0b000001 	bleq	1e30 <diag+0x30>
	dgout ('\n');
    1e28:	00000326 	andeq	r0, r0, r6, lsr #6
    1e2c:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
    1e30:	01000001 	tsteq	r0, r1
	diag_wait (a);
    1e34:	12080801 	andne	r0, r8, #65536	; 0x10000
	diag_enable_int (a, is);
    1e38:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
    1e3c:	d80a0000 	stmdale	sl, {}	; <UNPREDICTABLE>
}
    1e40:	1200000c 	andne	r0, r0, #12
    1e44:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
    1e48:	0a000000 	beq	1e50 <diag+0x50>
		if (*mess == '%') {
    1e4c:	0000107b 	andeq	r1, r0, fp, ror r0
    1e50:	a7089112 	smladge	r8, r2, r1, r9
			if (*mess == 'l') {
    1e54:	04000000 	streq	r0, [r0], #-0
    1e58:	0001c50a 	andeq	ip, r1, sl, lsl #10
				mess++;
    1e5c:	10921200 	addsne	r1, r2, r0, lsl #4
				val = va_arg (ap, lword);
    1e60:	000000d5 	ldrdeq	r0, [r0], -r5
				bc = 32;
    1e64:	cc030006 	stcgt	0, cr0, [r3], {6}
				bc = 16;
    1e68:	1200000c 	andne	r0, r0, #12
			switch (*mess) {
    1e6c:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
    1e70:	1a050000 	bne	141e78 <__ccfg+0x121ed0>
    1e74:	0c000002 	stceq	0, cr0, [r0], {2}
				dgout ('%');
    1e78:	0000021a 	andeq	r0, r0, sl, lsl r2
    1e7c:	00000236 	andeq	r0, r0, r6, lsr r2
				dgout (*mess);
    1e80:	3d0b000d 	stccc	0, cr0, [fp, #-52]	; 0xffffffcc
    1e84:	12000009 	andne	r0, r0, #9
			switch (*mess) {
    1e88:	022b0f99 	eoreq	r0, fp, #612	; 0x264
					v = __pi_hex_enc_table [
    1e8c:	01010000 	mrseq	r0, (UNDEF: 1)
					i += 4;
    1e90:	00da0407 	sbcseq	r0, sl, r7, lsl #8
					(val >> (bc - i)) & 0xf];
    1e94:	01080000 	mrseq	r0, (UNDEF: 8)
    1e98:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
					dgout (v);
    1e9c:	09000002 	stmdbeq	r0, {r1}
    1ea0:	0000091a 	andeq	r0, r0, sl, lsl r9
				while (i < bc) {
    1ea4:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
			mess++;
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
					d /= 10;
    1eac:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
				if ((val >> (bc - 1)) & 1) {
    1eb0:	000005cc 	andeq	r0, r0, ip, asr #11
    1eb4:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
					dgout ('-');
    1eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ebc:	00000001 	andeq	r0, r0, r1
						val |= 0xffff0000;
    1ec0:	000aab03 	andeq	sl, sl, r3, lsl #22
    1ec4:	03961300 	orrseq	r1, r6, #0, 6
    1ec8:	0000024a 	andeq	r0, r0, sl, asr #4
				d = (bc == 16) ? 10000 : 1000000000;
    1ecc:	00027405 	andeq	r7, r2, r5, lsl #8
    1ed0:	02800c00 	addeq	r0, r0, #0, 24
    1ed4:	02900000 	addseq	r0, r0, #0
					v = (word) (val / d);
    1ed8:	000d0000 	andeq	r0, sp, r0
					if (v || d == 1) break;
    1edc:	00028505 	andeq	r8, r2, r5, lsl #10
    1ee0:	03aa0b00 			; <UNDEFINED> instruction: 0x03aa0b00
					d /= 10;
    1ee4:	9c130000 	ldcls	0, cr0, [r3], {-0}
				d = (bc == 16) ? 10000 : 1000000000;
    1ee8:	00029017 	andeq	r9, r2, r7, lsl r0
					dgout (v + '0');
    1eec:	0c010100 	stfeqs	f0, [r1], {-0}
    1ef0:	000000b3 	strheq	r0, [r0], -r3
    1ef4:	000002ae 	andeq	r0, r0, lr, lsr #5
					d /= 10;
    1ef8:	a305000d 	movwge	r0, #20493	; 0x500d
					val = val - (v * d);
    1efc:	0b000002 	bleq	1f0c <diag+0x10c>
					if (d == 0) break;
    1f00:	0000060e 	andeq	r0, r0, lr, lsl #12
					v = (word) (val / d);
    1f04:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
    1f08:	01000002 	tsteq	r0, r2
				if (bc == 16)
    1f0c:	08dd0b01 	ldmeq	sp, {r0, r8, r9, fp}^
				d = (bc == 16) ? 10000 : 1000000000;
    1f10:	c3120000 	tstgt	r2, #0
					val &= 0xffff;
    1f14:	0000df0e 	andeq	sp, r0, lr, lsl #30
					dgout (*s);
    1f18:	0e010100 	adfeqs	f0, f1, f0
					s++;
    1f1c:	00000c72 	andeq	r0, r0, r2, ror ip
				while (*s != '\0') {
    1f20:	10016e15 	andne	r6, r1, r5, lsl lr
    1f24:	000002dc 	ldrdeq	r0, [r0], -ip
			dgout (*mess++);
    1f28:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
    1f2c:	010f0000 	mrseq	r0, CPSR
    1f30:	000002ee 	andeq	r0, r0, lr, ror #5
    1f34:	0000a710 	andeq	sl, r0, r0, lsl r7
    1f38:	d60c0000 	strle	r0, [ip], -r0
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1f3c:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
    1f40:	0d000002 	stceq	0, cr0, [r0, #-8]
    1f44:	02ee0500 	rsceq	r0, lr, #0, 10
    1f48:	e6110000 	ldr	r0, [r1], -r0
	^ entropy
    1f4c:	15000009 	strne	r0, [r0, #-9]
}
    1f50:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
    1f54:	01000002 	tsteq	r0, r2
    1f58:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    1f5c:	82150000 	andshi	r0, r5, #0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1f60:	00eb1401 	rsceq	r1, fp, r1, lsl #8
	word cs = size + hblenb;
    1f64:	01010000 	mrseq	r0, (UNDEF: 1)
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1f68:	00036e11 	andeq	r6, r3, r1, lsl lr
    1f6c:	02d81500 	sbcseq	r1, r8, #0, 10
	p -> length = size;
    1f70:	0000df0e 	andeq	sp, r0, lr, lsl #30
}
    1f74:	12010100 	andne	r0, r1, #0, 2
	if (p->attributes.b.queued) {
    1f78:	03031508 	movweq	r1, #13576	; 0x3508
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1f7c:	00035209 	andeq	r5, r3, r9, lsl #4
    1f80:	3ca71300 	stccc	3, cr1, [r7]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1f84:	07150000 	ldreq	r0, [r5, -r0]
		p->attributes.b.queued = 0;
    1f88:	00a70703 	adceq	r0, r7, r3, lsl #14
    1f8c:	13000000 	movwne	r0, #0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1f90:	00000fd3 	ldrdeq	r0, [r0], -r3
	deq (p);	// Remove from queue
    1f94:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
}
    1f98:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	tfree ((address)p);
    1f9c:	090e0004 	stmdbeq	lr, {r2}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa0:	1500000a 	strne	r0, [r0, #-10]
    1fa4:	2b030309 	blcs	c2bd0 <__ccfg+0xa2c28>
    1fa8:	14000003 	strne	r0, [r0], #-3
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fac:	00000029 	andeq	r0, r0, r9, lsr #32
    1fb0:	030b1530 	movweq	r1, #46384	; 0xb530
	if (q_empty (q))
    1fb4:	0003c208 	andeq	ip, r3, r8, lsl #4
    1fb8:	1f2a1300 	svcne	0x002a1300
		trigger (q);
    1fbc:	14150000 	ldrne	r0, [r5], #-0
	if (p->attributes.b.urgent) {
    1fc0:	00a70803 	adceq	r0, r7, r3, lsl #16
		p->u.bqueue.next = q->next;
    1fc4:	13000000 	movwne	r0, #0
		p->u.bqueue.prev = q;
    1fc8:	00000be7 	andeq	r0, r0, r7, ror #23
		q->next->prev = (qitem_t*) p;
    1fcc:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
	p->attributes.b.queued = 1;
    1fd0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1fd4:	4c941302 	ldcmi	3, cr1, [r4], {2}
}
    1fd8:	16150000 	ldrne	r0, [r5], -r0
		p->u.bqueue.prev = q->prev;
    1fdc:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
		q->prev->next = (qitem_t*) p;
    1fe0:	13040000 	movwne	r0, #16384	; 0x4000
		q->prev = (qitem_t*) p;
    1fe4:	0000475a 	andeq	r4, r0, sl, asr r7
    1fe8:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1fec:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	deq (p);	// Soft dequeue, timer and hook left intact
    1ff0:	000f1308 	andeq	r1, pc, r8, lsl #6
	switch (dv) {
    1ff4:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    1ff8:	03c20f03 	biceq	r0, r2, #3, 30
    1ffc:	130c0000 	movwne	r0, #49152	; 0xc000
    2000:	0000095d 	andeq	r0, r0, sp, asr r9
			p->attributes.b.urgent = 1;
    2004:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
    2008:	000003d2 	ldrdeq	r0, [r0], -r2
			verify_ses (p, "dispose ses");
    200c:	520c002c 	andpl	r0, ip, #44	; 0x2c
    2010:	d2000003 	andle	r0, r0, #3
    2014:	15000003 	strne	r0, [r0, #-3]
    2018:	00000094 	muleq	r0, r4, r0
    201c:	04070003 	streq	r0, [r7], #-3
			verify_phy (p, "dispose phy");
    2020:	0000035f 	andeq	r0, r0, pc, asr r3
    2024:	000bdc0e 	andeq	sp, fp, lr, lsl #24
}
    2028:	031c1500 	tsteq	ip, #0, 10
			enq (oqueues [p->attributes.b.phys], p);
    202c:	00035f1b 	andeq	r5, r3, fp, lsl pc
			p->attributes.b.urgent = 1;
    2030:	0bbc1100 	bleq	fef06438 <_estack+0xdef01438>
    2034:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
			verify_phy (p, "dispose phy");
    2038:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
    203c:	01010000 	mrseq	r0, (UNDEF: 1)
    2040:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
    2044:	0f0b0000 	svceq	0x000b0000
    2048:	16000007 	strne	r0, [r0], -r7
    204c:	00a7131d 	adceq	r1, r7, sp, lsl r3
			enq (oqueues [p->attributes.b.phys], p);
    2050:	01010000 	mrseq	r0, (UNDEF: 1)
    2054:	0002ee0b 	andeq	lr, r2, fp, lsl #28
}
    2058:	1a1e1600 	bne	787860 <__ccfg+0x7678b8>
			rlp (p);
    205c:	000000b8 	strheq	r0, [r0], -r8
}
    2060:	690b0101 	stmdbvs	fp, {r0, r8}
    2064:	1600000c 	strne	r0, [r0], -ip
    2068:	00b8241e 	adcseq	r2, r8, lr, lsl r4
    206c:	01010000 	mrseq	r0, (UNDEF: 1)
    2070:	000c870b 	andeq	r8, ip, fp, lsl #14
    2074:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    2078:	000003f4 	strdeq	r0, [r0], -r4
	if (b->attributes.b.outgoing) {
    207c:	b7030101 	strlt	r0, [r3, -r1, lsl #2]
	b = header (p);
    2080:	1600000f 	strne	r0, [r0], -pc
	if (b->attributes.b.outgoing) {
    2084:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
		verify_ses (b, "tcv02");
    2088:	04070000 	streq	r0, [r7], #-0
    208c:	00000444 	andeq	r0, r0, r4, asr #8
    2090:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
    2094:	8d100000 	ldchi	0, cr0, [r0, #-0]
    2098:	00000000 	andeq	r0, r0, r0
		verify_plg (b, tcv_out, "tcv03");
    209c:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
    20a0:	00047409 	andeq	r7, r4, r9, lsl #8
    20a4:	151d0a00 	ldrne	r0, [sp, #-2560]	; 0xfffff600
    20a8:	4a160000 	bmi	5820b0 <__ccfg+0x562108>
    20ac:	0004320f 	andeq	r3, r4, pc, lsl #4
    20b0:	0f0a0000 	svceq	0x000a0000
    20b4:	16000012 			; <UNDEFINED> instruction: 0x16000012
    20b8:	008d074b 	addeq	r0, sp, fp, asr #14
    20bc:	00040000 	andeq	r0, r4, r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c0:	00103d03 	andseq	r3, r0, r3, lsl #26
}
    20c4:	034c1600 	movteq	r1, #50688	; 0xc600
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c8:	00000450 	andeq	r0, r0, r0, asr r4
		rlp (b);
    20cc:	00047405 	andeq	r7, r4, r5, lsl #8
}
    20d0:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
		rlp (b);
    20d4:	04950000 	ldreq	r0, [r5], #0
    20d8:	94150000 	ldrls	r0, [r5], #-0
    20dc:	03000000 	movweq	r0, #0
    20e0:	13c70b00 	bicne	r0, r7, #0, 22
    20e4:	0d010000 	stceq	0, cr0, [r1, #-0]
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20e8:	00048512 	andeq	r8, r4, r2, lsl r5
    20ec:	0c010100 	stfeqs	f0, [r1], {-0}
    20f0:	00000480 	andeq	r0, r0, r0, lsl #9
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20f4:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
	va_start (ap, plid);
    20f8:	00009415 	andeq	r9, r0, r5, lsl r4
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20fc:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    2100:	000004a3 	andeq	r0, r0, r3, lsr #9
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2104:	0013e316 	andseq	lr, r3, r6, lsl r3
    2108:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
    210c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    2110:	0000eb0c 	andeq	lr, r0, ip, lsl #22
			syserror (ENODEVICE, "tcv04");
    2114:	0004d400 	andeq	sp, r4, r0, lsl #8
		syserror (EMALLOC, "tcv05");
    2118:	00941500 	addseq	r1, r4, r0, lsl #10
	attp.b.outgoing = 1;
    211c:	00100000 	andseq	r0, r0, r0
    2120:	0004c405 	andeq	ip, r4, r5, lsl #8
    2124:	11a01700 	lslne	r1, r0, #14
    2128:	ec010000 	stc	0, cr0, [r1], {-0}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    212c:	0004d40d 	andeq	sp, r4, sp, lsl #8
		if (descriptors [fd] == NULL)
    2130:	03050100 	movweq	r0, #20736	; 0x5100
    2134:	00005264 	andeq	r5, r0, r4, ror #4
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2138:	00101c18 	andseq	r1, r0, r8, lsl ip
		return ERROR;
    213c:	010c0100 	mrseq	r0, (UNDEF: 28)
}
    2140:	0000a70d 	andeq	sl, r0, sp, lsl #14
    2144:	4e030500 	cfsh32mi	mvfx0, mvfx3, #0
    2148:	19200005 	stmdbne	r0!, {r0, r2}
	s->attpattern.b.session = fd;
    214c:	00000236 	andeq	r0, r0, r6, lsr r2
    2150:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
	descriptors [fd] = s;
    2154:	06a80305 	strteq	r0, [r8], r5, lsl #6
	q_init (&(s->rqueue));
    2158:	a70c2000 	strge	r2, [ip, -r0]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    215c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2160:	15000005 	strne	r0, [r0, #-5]
    2164:	00000094 	muleq	r0, r4, r0
    2168:	9d180000 	ldcls	0, cr0, [r8, #-0]
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    216c:	0100000f 	tsteq	r0, pc
    2170:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
    2174:	05000005 	streq	r0, [r0, #-5]
	descriptors [fd] = s;
    2178:	00055003 	andeq	r5, r5, r3
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    217c:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
    2180:	8c010000 	stchi	0, cr0, [r1], {-0}
	if (s == NULL)
    2184:	03050704 	movweq	r0, #22276	; 0x5704
		syserror (EMALLOC, "tcv05");
    2188:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    218c:	0f91011a 	svceq	0x0091011a
    2190:	72010000 	andvc	r0, r1, #0
    2194:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
    2198:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    219c:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    21a0:	01000018 	tsteq	r0, r8, lsl r0
    21a4:	0005849c 	muleq	r5, ip, r4
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21a8:	06401b00 	strbeq	r1, [r0], -r0, lsl #22
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21ac:	05720000 	ldrbeq	r0, [r2, #-0]!
    21b0:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    21b4:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
	plugins [ord] = pl;
    21b8:	0000bd11 	andeq	fp, r0, r1, lsl sp
	return 0;
    21bc:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
		return ERROR;
    21c0:	0a000011 	beq	220c <tcv_rnp+0x40>
}
    21c4:	0c000018 	stceq	0, cr0, [r0], {24}
    21c8:	01000018 	tsteq	r0, r8, lsl r0
	verify_fds (fd, "tcv10");
    21cc:	0002058d 	andeq	r0, r2, sp, lsl #11
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    21d0:	1229011e 	eorne	r0, r9, #-2147483641	; 0x80000007
	verify_fds (fd, "tcv10");
    21d4:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    21d8:	15402105 	strbne	r2, [r0, #-261]	; 0xfffffefb
    21dc:	17980000 	ldrne	r0, [r8, r0]
	verify_plg (b, tcv_frm, "tcv11");
    21e0:	9c010000 	stcls	0, cr0, [r1], {-0}
	b = q_first (rq);
    21e4:	000007e4 	andeq	r0, r0, r4, ror #15
	if (q_end (b, rq)) {
    21e8:	0012361f 	andseq	r3, r2, pc, lsl r6
		if (state != WNONE) {
    21ec:	01080d00 	tsteq	r8, r0, lsl #26
    21f0:	0011d020 	andseq	sp, r1, r0, lsr #32
			when (rq, state);
    21f4:	00154000 	andseq	r4, r5, r0
			release;
    21f8:	0004a000 	andeq	sl, r4, r0
	deq (b);	// Dequeue the packet ...
    21fc:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    2200:	0005bf02 	andeq	fp, r5, r2, lsl #30
	p = ((address)(b + 1));
    2204:	11df2100 	bicsne	r2, pc, r0, lsl #2
	verify_plg (b, tcv_frm, "tcv11");
    2208:	22000000 	andcs	r0, r0, #0
    220c:	00000812 	andeq	r0, r0, r2, lsl r8
    2210:	0000155a 	andeq	r1, r0, sl, asr r5
    2214:	000004c0 	andeq	r0, r0, r0, asr #9
    2218:	b302270d 	movwlt	r2, #9997	; 0x270d
    221c:	23000007 	movwcs	r0, #7
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2220:	000004c0 	andeq	r0, r0, r0, asr #9
    2224:	00082024 	andeq	r2, r8, r4, lsr #32
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2228:	0015e800 	andseq	lr, r5, r0, lsl #16
    222c:	125c2500 	subsne	r2, ip, #0, 10
	b->u.pointers.tail =
    2230:	155a0000 	ldrbne	r0, [sl, #-0]
}
    2234:	04e80000 	strbteq	r0, [r8], #0
		return NULL;
    2238:	b3010000 	movwlt	r0, #4096	; 0x1000
    223c:	381d0404 	ldmdacc	sp, {r2, sl}
    2240:	d2000014 	andle	r0, r0, #20
    2244:	de000015 	mcrle	0, 0, r0, cr0, cr5, {0}
    2248:	01000015 	tsteq	r0, r5, lsl r0
	verify_fds (fd, "tcv16");
    224c:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
								Boolean urg) {
    2250:	0000125c 	andeq	r1, r0, ip, asr r2
    2254:	000015e6 	andeq	r1, r0, r6, ror #11
	verify_fds (fd, "tcv16");
    2258:	000015e8 	andeq	r1, r0, r8, ror #11
    225c:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
    2260:	0012c025 	andseq	ip, r2, r5, lsr #32
	verify_pld (s, tcv_frm, "tcv17");
    2264:	0015fe00 	andseq	pc, r5, r0, lsl #28
    2268:	00050000 	andeq	r0, r5, r0
    226c:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
    2270:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
    2274:	15fe0000 	ldrbne	r0, [lr, #0]!
    2278:	05200000 	streq	r0, [r0, #-0]!
    227c:	c5010000 	strgt	r0, [r1, #-0]
    2280:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
	ptrs.head = (word) fd;
    2284:	06000012 			; <UNDEFINED> instruction: 0x06000012
	ptrs.tail = (word) urg;
    2288:	40000016 	andmi	r0, r0, r6, lsl r0
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    228c:	01000005 	tsteq	r0, r5
    2290:	510404c0 	smlabtpl	r4, r0, r4, r0
		if (state != WNONE) {
    2294:	21000006 	tstcs	r0, r6
    2298:	0000129d 	muleq	r0, sp, r2
}
    229c:	125c1d00 	subsne	r1, ip, #0, 26
			when (eid, state);
    22a0:	16160000 	ldrne	r0, [r6], -r0
    22a4:	16180000 	ldrne	r0, [r8], -r0
			release;
    22a8:	c3010000 	movwgt	r0, #4096	; 0x1000
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    22ac:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
    22b0:	1a000014 	bne	2308 <tcvp_control>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    22b4:	60000016 	andvs	r0, r0, r6, lsl r0
    22b8:	01000005 	tsteq	r0, r5
    22bc:	200404d5 	ldrdcs	r0, [r4], -r5
    22c0:	0000144e 	andeq	r1, r0, lr, asr #8
    22c4:	00001630 	andeq	r1, r0, r0, lsr r6
    22c8:	00000580 	andeq	r0, r0, r0, lsl #11
		if (state != WNONE) {
    22cc:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
    22d0:	0000068e 	andeq	r0, r0, lr, lsl #13
			tmwait (state);
    22d4:	00145d21 	andseq	r5, r4, r1, lsr #26
    22d8:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
	b->attributes = s->attpattern;
    22dc:	54000012 	strpl	r0, [r0], #-18	; 0xffffffee
		b->attributes.b.urgent = 1;
    22e0:	56000016 			; <UNDEFINED> instruction: 0x56000016
    22e4:	01000016 	tsteq	r0, r6, lsl r0
	b->u.pointers.head = ptrs.head;
    22e8:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
	b->u.pointers.tail = length;
    22ec:	00001438 	andeq	r1, r0, r8, lsr r4
	return (address) (b + 1);
    22f0:	00001674 	andeq	r1, r0, r4, ror r6
    22f4:	00000598 	muleq	r0, r8, r5
    22f8:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
    22fc:	00127f25 	andseq	r7, r2, r5, lsr #30
    2300:	00167800 	andseq	r7, r6, r0, lsl #16
    2304:	0005b000 	andeq	fp, r5, r0
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2308:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    230c:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
    2310:	16820000 	strne	r0, [r2], r0
	verify_fph (phy, "tcv23");
    2314:	16860000 	strne	r0, [r6], r0
    2318:	ed010000 	stc	0, cr0, [r1, #-0]
    231c:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
    2320:	9d210000 	stcls	0, cr0, [r1, #-0]
}
    2324:	00000012 	andeq	r0, r0, r2, lsl r0
	return (physical [phy]) (opt, arg);
    2328:	00144325 	andseq	r4, r4, r5, lsr #6
    232c:	0016a600 	andseq	sl, r6, r0, lsl #12
    2330:	0005c800 	andeq	ip, r5, r0, lsl #16
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2334:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
	if (opt < 0) {
    2338:	144e2004 	strbne	r2, [lr], #-4
		if (fd < 0)
    233c:	16a80000 	strtne	r0, [r8], r0
		if (opt == PHYSOPT_PLUGINFO) {
    2340:	05e00000 	strbeq	r0, [r0, #0]!
			if (fd >= TCV_MAX_PLUGS)
    2344:	fa010000 	blx	4234c <__ccfg+0x223a4>
			if ((p = plugins [fd]) == NULL)
    2348:	07080404 	streq	r0, [r8, -r4, lsl #8]
    234c:	5d210000 	stcpl	0, cr0, [r1, #-0]
}
    2350:	00000014 	andeq	r0, r0, r4, lsl r0
		if (fd >= TCV_MAX_PHYS)
    2354:	0012b61d 	andseq	fp, r2, sp, lsl r6
		return physinfo [fd];
    2358:	0016b000 	andseq	fp, r6, r0
    235c:	0016b400 	andseq	fp, r6, r0, lsl #8
	verify_fds (fd, "tcv22");
    2360:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    2364:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    2368:	16b40000 	ldrtne	r0, [r4], r0
    236c:	16b60000 	ldrtne	r0, [r6], r0
    2370:	00010000 	andeq	r0, r1, r0
}
    2374:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2378:	be00000b 	cdplt	0, 0, cr0, cr0, cr11, {0}
    237c:	ca000016 	bgt	23dc <tcvp_new+0x48>
			return 0;
    2380:	01000016 	tsteq	r0, r6, lsl r0
    2384:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
    2388:	27000007 	strcs	r0, [r0, -r7]
    238c:	00001311 	andeq	r1, r0, r1, lsl r3
    2390:	000016be 			; <UNDEFINED> instruction: 0x000016be
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2394:	000016c8 	andeq	r1, r0, r8, asr #13
    2398:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
	if (dsp != TCV_DSP_PASS) {
    239c:	00132d21 	andseq	r2, r3, r1, lsr #26
		if (ses == NONE)
    23a0:	13202100 	nopne	{0}	; <UNPREDICTABLE>
			syserror (EREQPAR, "tcv26");
    23a4:	00000000 	andeq	r0, r0, r0
		verify_fds (ses, "tcv27");
    23a8:	00125c1d 	andseq	r5, r2, sp, lsl ip
    23ac:	0016f200 	andseq	pc, r6, r0, lsl #4
    23b0:	0016f400 	andseq	pc, r6, r0, lsl #8
    23b4:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
    23b8:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
		if ((p = apb (size)) != NULL) {
    23bc:	16f40000 	ldrbtne	r0, [r4], r0
    23c0:	17040000 	strne	r0, [r4, -r0]
		return NULL;
    23c4:	41010000 	mrsmi	r0, (UNDEF: 1)
			p->attributes = descriptors [ses] -> attpattern;
    23c8:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
			dispose (p, dsp);
    23cc:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
			p->attributes = descriptors [ses] -> attpattern;
    23d0:	06000017 			; <UNDEFINED> instruction: 0x06000017
			p->attributes.b.outgoing = 0;
    23d4:	01000017 	tsteq	r0, r7, lsl r0
			dispose (p, dsp);
    23d8:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
			return (address)(p + 1);
    23dc:	0000127f 	andeq	r1, r0, pc, ror r2
    23e0:	00001706 	andeq	r1, r0, r6, lsl #14
	if ((p = apb (size)) != NULL)
    23e4:	000005f8 	strdeq	r0, [r0], -r8
    23e8:	0b054701 	bleq	153ff4 <__ccfg+0x13404c>
		return (address)(p + 1);
    23ec:	00146b25 	andseq	r6, r4, r5, lsr #22
    23f0:	00170e00 	andseq	r0, r7, r0, lsl #28
    23f4:	00061000 	andeq	r1, r6, r0
    23f8:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    23fc:	28000004 	stmdacs	r0, {r2}
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2400:	000011ed 	andeq	r1, r0, sp, ror #3
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2404:	00001574 	andeq	r1, r0, r4, ror r5
    2408:	00001576 	andeq	r1, r0, r6, ror r5
		syserror (EREQPAR, "tcv28");
    240c:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
		syserror (EMALLOC, "tcv29");
    2410:	000011f7 	strdeq	r1, [r0], -r7
	physical [phy] = ps;
    2414:	000015a2 	andeq	r1, r0, r2, lsr #11
	physinfo [phy] = info;
    2418:	000015a4 	andeq	r1, r0, r4, lsr #11
    241c:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2420:	000011f7 	strdeq	r1, [r0], -r7
    2424:	00001728 	andeq	r1, r0, r8, lsr #14
    2428:	0000172a 	andeq	r1, r0, sl, lsr #14
		syserror (EMALLOC, "tcv29");
    242c:	0002270d 	andeq	r2, r2, sp, lsl #14
    2430:	12e7011a 	rscne	r0, r7, #-2147483642	; 0x80000006
	q_init (q);
    2434:	5c010000 	stcpl	0, cr0, [r1], {-0}
}
    2438:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
    2444:	01000000 	mrseq	r0, (UNDEF: 0)
    2448:	0008129c 	muleq	r8, ip, r2
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    244c:	63732900 	cmnvs	r3, #0, 18
	verify_fph (phy, "tcv30");
    2450:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2454:	0000a707 	andeq	sl, r0, r7, lsl #14
    2458:	00049c00 	andeq	r9, r4, r0, lsl #24
	verify_fph (phy, "tcv30");
    245c:	c92a0000 	stmdbgt	sl!, {}	; <UNPREDICTABLE>
    2460:	01000011 	tsteq	r0, r1, lsl r0
    2464:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2468:	0000082a 	andeq	r0, r0, sl, lsr #16
    246c:	0014742b 	andseq	r7, r4, fp, lsr #8
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2470:	04ad0100 	strteq	r0, [sp], #256	; 0x100
    2474:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
		if (plugins [plg] == NULL)
    2478:	00001176 	andeq	r1, r0, r6, ror r1
    247c:	06047e01 	streq	r7, [r4], -r1, lsl #28
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2480:	00151c01 	andseq	r1, r5, r1, lsl #24
}
    2484:	00154000 	andseq	r4, r5, r0
    2488:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    248c:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    2490:	00000036 	andeq	r0, r0, r6, lsr r0
    2494:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2498:	000000a7 	andeq	r0, r0, r7, lsr #1
    249c:	000004af 	andeq	r0, r0, pc, lsr #9
    24a0:	fb011e00 	blx	49caa <__ccfg+0x29d02>
    24a4:	0100000f 	tsteq	r0, pc
    24a8:	64060401 	strvs	r0, [r6], #-1025	; 0xfffffbff
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    24ac:	1c000013 	stcne	0, cr0, [r0], {19}
	len -= (ap.head + ap.tail);
    24b0:	01000015 	tsteq	r0, r5, lsl r0
    24b4:	000a1e9c 	muleq	sl, ip, lr
    24b8:	148e2e00 	strne	r2, [lr], #3584	; 0xe00
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    24bc:	14940000 	ldrne	r0, [r4], #0
    24c0:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    24c4:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    24c8:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
    24cc:	00008d0b 	andeq	r8, r0, fp, lsl #26
    24d0:	43250000 			; <UNDEFINED> instruction: 0x43250000
	return 1;
    24d4:	8e000014 	mcrhi	0, 0, r0, cr0, cr4, {0}
    24d8:	80000013 	andhi	r0, r0, r3, lsl r0
    24dc:	01000003 	tsteq	r0, r3
    24e0:	20020408 	andcs	r0, r2, r8, lsl #8
    24e4:	00000f54 	andeq	r0, r0, r4, asr pc
	verify_fph (phy, "tcv32");
    24e8:	00001390 	muleq	r0, r0, r3
    24ec:	000003a0 	andeq	r0, r0, r0, lsr #7
    24f0:	02040b01 	andeq	r0, r4, #1024	; 0x400
    24f4:	0000091a 	andeq	r0, r0, sl, lsl r9
    24f8:	0003a023 	andeq	sl, r3, r3, lsr #32
    24fc:	0f612f00 	svceq	0x00612f00
	oq = oqueues [phy];
    2500:	6d300000 	ldcvs	0, cr0, [r0, #-0]
	b = q_first (oq);
    2504:	a000000f 	andge	r0, r0, pc
	if (q_end (b, oq)) {
    2508:	31000003 	tstcc	r0, r3
	*len = b->length;
    250c:	00000f6e 	andeq	r0, r0, lr, ror #30
	deq (b);	// Dequeue the packet ...
    2510:	000004c2 	andeq	r0, r0, r2, asr #9
}
    2514:	0013c922 	andseq	ip, r3, r2, lsr #18
		return NULL;
    2518:	00139a00 	andseq	r9, r3, r0, lsl #20
    251c:	0003c000 	andeq	ip, r3, r0
    2520:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    2524:	000008e7 	andeq	r0, r0, r7, ror #17
	verify_fph (phy, "tcv33");
    2528:	0013e521 	andseq	lr, r3, r1, lsr #10
    252c:	13d82100 	bicsne	r2, r8, #0, 2
    2530:	22000000 	andcs	r0, r0, #0
    2534:	000013f3 	strdeq	r1, [r0], -r3
    2538:	0000139e 	muleq	r0, lr, r3
    253c:	000003d8 	ldrdeq	r0, [r0], -r8
	oq = oqueues [phy];
    2540:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
	b = q_first (oq);
    2544:	21000009 	tstcs	r0, r9
		return NULL;
    2548:	00001402 	andeq	r1, r0, r2, lsl #8
	return (address)(b + 1);
    254c:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
}
    2550:	13a20000 			; <UNDEFINED> instruction: 0x13a20000
    2554:	03f00000 	mvnseq	r0, #0
    2558:	fc010000 	stc2	0, cr0, [r1], {-0}
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    255c:	141f2104 	ldrne	r2, [pc], #-260	; 2564 <tcvphy_end+0x8>
	verify_plg (b, tcv_xmt, "tcv34");
    2560:	00000000 	andeq	r0, r0, r0
	hblock_t *b = header (pkt);
    2564:	10200000 	eorne	r0, r0, r0
	verify_plg (b, tcv_xmt, "tcv34");
    2568:	e2000014 	and	r0, r0, #20
    256c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2570:	01000004 	tsteq	r0, r4
    2574:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
    2578:	21000009 	tstcs	r0, r9
    257c:	0000141f 	andeq	r1, r0, pc, lsl r4
    2580:	14102000 	ldrne	r2, [r0], #-0
	dispose (b, plugins [b->attributes.b.plugin] ->
    2584:	13e40000 	mvnne	r0, #0
}
    2588:	04280000 	strteq	r0, [r8], #-0
	dispose (b, plugins [b->attributes.b.plugin] ->
    258c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2590:	09500204 	ldmdbeq	r0, {r2, r9}^
    2594:	1f210000 	svcne	0x00210000
}
    2598:	00000014 	andeq	r0, r0, r4, lsl r0
    while(1)
    259c:	0013f320 	andseq	pc, r3, r0, lsr #6
{
    25a0:	0013fe00 	andseq	pc, r3, r0, lsl #28
    SetupTrimDevice();
    25a4:	00044000 	andeq	r4, r4, r0
    pui32Src = &_etext;
    25a8:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    25ac:	00096b02 	andeq	r6, r9, r2, lsl #22
    __asm("    ldr     r0, =_bss\n"
    25b0:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    25b4:	26000000 	strcs	r0, [r0], -r0
    25b8:	000013f3 	strdeq	r1, [r0], -r3
    25bc:	00001404 	andeq	r1, r0, r4, lsl #8
    25c0:	00001406 	andeq	r1, r0, r6, lsl #8
   main();
    25c4:	02040e01 	andeq	r0, r4, #1, 28
    FaultISR();
    25c8:	00000986 	andeq	r0, r0, r6, lsl #19
        *pui32Dest++ = *pui32Src++;
    25cc:	00140221 	andseq	r0, r4, r1, lsr #4
    25d0:	34200000 	strtcc	r0, [r0], #-0
    25d4:	16000012 			; <UNDEFINED> instruction: 0x16000012
    25d8:	58000014 	stmdapl	r0, {r2, r4}
    25dc:	01000004 	tsteq	r0, r4
    25e0:	a102041b 	tstge	r2, fp, lsl r4
    25e4:	21000009 	tstcs	r0, r9
    25e8:	00001243 	andeq	r1, r0, r3, asr #4
static byte get_byte () {
    25ec:	0ccb2600 	stcleq	6, cr2, [fp], {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25f0:	14400000 	strbne	r0, [r0], #-0
    25f4:	146a0000 	strbtne	r0, [sl], #-0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25f8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    25fc:	09c80204 	stmibeq	r8, {r2, r9}^
		if (ee_inp)
    2600:	43250000 			; <UNDEFINED> instruction: 0x43250000
			b |= 1;
    2604:	5e000014 	mcrpl	0, 0, r0, cr0, cr4, {0}
    2608:	70000014 	andvc	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    260c:	01000004 	tsteq	r0, r4
	for (b = 0, i = 0; i < 8; i++) {
    2610:	00020301 	andeq	r0, r2, r1, lsl #6
}
    2614:	0012ab26 	andseq	sl, r2, r6, lsr #22
    2618:	00147a00 	andseq	r7, r4, r0, lsl #20
    261c:	00148e00 	andseq	r8, r4, r0, lsl #28
static void put_byte (byte b) {
    2620:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
    2624:	0009ef03 	andeq	lr, r9, r3, lsl #30
    2628:	12b61d00 	adcsne	r1, r6, #0, 26
    262c:	147a0000 	ldrbtne	r0, [sl], #-0
		if (b & 0x80)
    2630:	147e0000 	ldrbtne	r0, [lr], #-0
    2634:	140b0000 	strne	r0, [fp], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2638:	33000501 	movwcc	r0, #1281	; 0x501
	for (i = 0; i < 8; i++) {
    263c:	00000b95 	muleq	r0, r5, fp
		b <<= 1;
    2640:	00001494 	muleq	r0, r4, r4
	for (i = 0; i < 8; i++) {
    2644:	00000488 	andeq	r0, r0, r8, lsl #9
}
    2648:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
    264c:	00131133 	andseq	r1, r3, r3, lsr r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2650:	00149400 	andseq	r9, r4, r0, lsl #8
    2654:	00048800 	andeq	r8, r4, r0, lsl #16
	put_byte (cmd);
    2658:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
    265c:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
}
    2660:	20210000 	eorcs	r0, r1, r0
    2664:	00000013 	andeq	r0, r0, r3, lsl r0
static void wwait (word st, word del) {
    2668:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    266c:	0000130e 	andeq	r1, r0, lr, lsl #6
    2670:	0603ed01 	streq	lr, [r3], -r1, lsl #26
	while (dopen && (rdsr () & 1)) {
    2674:	00128401 	andseq	r8, r2, r1, lsl #8
    2678:	0012c000 	andseq	ip, r2, r0
    267c:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    2680:	3400000a 	strcc	r0, [r0], #-10
	put_byte (CMD_RDSR);
    2684:	006c6176 	rsbeq	r6, ip, r6, ror r1
	r = get_byte ();
    2688:	1c03ed01 	stcne	13, cr14, [r3], {1}
    268c:	0000008d 	andeq	r0, r0, sp, lsl #1
	while (dopen && (rdsr () & 1)) {
    2690:	69295001 	stmdbvs	r9!, {r0, ip, lr}
}
    2694:	03ef0100 	mvneq	r0, #0, 2
		if (st == WNONE)
    2698:	00008d06 	andeq	r8, r0, r6, lsl #26
    269c:	0004e000 	andeq	lr, r4, r0
			mdelay (1);
    26a0:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
    26a4:	03f00100 	mvnseq	r0, #0, 2
			delay (del, st);
    26a8:	0000df08 	andeq	sp, r0, r8, lsl #30
    26ac:	0004fe00 	andeq	pc, r4, r0, lsl #28
			release;
    26b0:	11ed2500 	mvnne	r2, r0, lsl #10
    26b4:	12840000 	addne	r0, r4, #0
    26b8:	03400000 	movteq	r0, #0
static void ready () {
    26bc:	f2010000 	vhadd.s8	d0, d1, d0
	if (dopen) {
    26c0:	ac200203 	sfmge	f0, 4, [r0], #-12
		wwait (WNONE, 1);
    26c4:	8a000013 	bhi	2718 <cclose+0x1c>
    26c8:	58000012 	stmdapl	r0, {r1, r4}
    26cc:	01000003 	tsteq	r0, r3
	dstat = 0;
    26d0:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
}
    26d4:	3500000a 	strcc	r0, [r0, #-10]
    26d8:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    26dc:	000004fe 	strdeq	r0, [r0], -lr
	udelay (1);
    26e0:	11f71d00 	mvnsne	r1, r0, lsl #26
    26e4:	12ae0000 	adcne	r0, lr, #0
	udelay (1);
    26e8:	12b00000 	adcsne	r0, r0, #0
		dopen = DOPEN_TEMP;
    26ec:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    26f0:	2c000203 	sfmcs	f0, 4, [r0], {3}
    26f4:	00126c01 	andseq	r6, r2, r1, lsl #24
    26f8:	03da0100 	bicseq	r0, sl, #0, 2
static void cclose () {
    26fc:	12400106 	subne	r0, r0, #-2147483647	; 0x80000001
	if (dopen == DOPEN_TEMP) {
    2700:	12840000 	addne	r0, r4, #0
    2704:	9c010000 	stcls	0, cr0, [r1], {-0}
		wwait (WNONE, 1);
    2708:	00000b2c 	andeq	r0, r0, ip, lsr #22
    270c:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
	cmd_0 (CMD_DP);
    2710:	03da0100 	bicseq	r0, sl, #0, 2
    2714:	00008d1c 	andeq	r8, r0, ip, lsl sp
		dopen = 0;
    2718:	1c500100 	ldfnee	f0, [r0], {-0}
}
    271c:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
word ee_open () {
    2720:	008d0603 	addeq	r0, sp, r3, lsl #12
	ready ();
    2724:	62290000 	eorvs	r0, r9, #0
	dopen = DOPEN_PERM;
    2728:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    272c:	00df0803 	sbcseq	r0, pc, r3, lsl #16
}
    2730:	05110000 	ldreq	r0, [r1, #-0]
	if (dopen) {
    2734:	ed250000 	stc	0, cr0, [r5, #-0]
    2738:	40000011 	andmi	r0, r0, r1, lsl r0
		dopen = DOPEN_TEMP;
    273c:	f8000012 			; <UNDEFINED> instruction: 0xf8000012
		cclose ();
    2740:	01000002 	tsteq	r0, r2
}
    2744:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
int ser_out (word st, const char *m) {
    2748:	000013ac 	andeq	r1, r0, ip, lsr #7
	if ((prcs = running (__outserial)) != 0) {
    274c:	00001244 	andeq	r1, r0, r4, asr #4
    2750:	00000310 	andeq	r0, r0, r0, lsl r3
    2754:	0303e201 	movweq	lr, #12801	; 0x3201
		join (prcs, st);
    2758:	00000b1a 	andeq	r0, r0, sl, lsl fp
		release;
    275c:	0013bb35 	andseq	fp, r3, r5, lsr fp
	if (*m)
    2760:	00052400 	andeq	r2, r5, r0, lsl #8
		prcs = strlen (m) +1;
    2764:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    2768:	72000011 	andvc	r0, r0, #17
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    276c:	74000012 	strvc	r0, [r0], #-18	; 0xffffffee
    2770:	01000012 	tsteq	r0, r2, lsl r0
    2774:	000203e6 	andeq	r0, r2, r6, ror #7
		umwait (st);
    2778:	131f011e 	tstne	pc, #-2147483641	; 0x80000007
    277c:	c6010000 	strgt	r0, [r1], -r0
		prcs =  m [1] + 3;
    2780:	12c00603 	sbcne	r0, r0, #3145728	; 0x300000
	if (*m)
    2784:	13640000 	cmnne	r4, #0
		strcpy (buf, m);
    2788:	9c010000 	stcls	0, cr0, [r1], {-0}
    278c:	00000b95 	muleq	r0, r5, fp
	if (runstrand (__outserial, buf) == 0) {
    2790:	0012d22e 	andseq	sp, r2, lr, lsr #4
    2794:	00130000 	andseq	r0, r3, r0
		ufree (buf);
    2798:	000b6e00 	andeq	r6, fp, r0, lsl #28
    279c:	006a3600 	rsbeq	r3, sl, r0, lsl #12
		memcpy (buf, m, prcs);
    27a0:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
    27a4:	37000000 	strcc	r0, [r0, -r0]
    27a8:	36000005 	strcc	r0, [r0], -r5
}
    27ac:	03070069 	movweq	r0, #28777	; 0x7069
    27b0:	0003f402 	andeq	pc, r3, r2, lsl #8
int ser_in (word st, char *buf, int len) {
    27b4:	00054a00 	andeq	r4, r5, r0, lsl #20
    27b8:	12370000 	eorsne	r0, r7, #0
	if (len == 0)
    27bc:	40000013 	andmi	r0, r0, r3, lsl r0
	if (__inpline == NULL) {
    27c0:	36000013 			; <UNDEFINED> instruction: 0x36000013
		if ((prcs = running (__inserial)) == 0) {
    27c4:	0208006a 	andeq	r0, r8, #106	; 0x6a
    27c8:	00008d02 	andeq	r8, r0, r2, lsl #26
			prcs = runthread (__inserial);
    27cc:	00055d00 	andeq	r5, r5, r0, lsl #26
    27d0:	00693600 	rsbeq	r3, r9, r0, lsl #12
			if (prcs == 0) {
    27d4:	f4020208 	vst1.8	{d0-d3}, [r2], r8
				npwait (st);
    27d8:	70000003 	andvc	r0, r0, r3
		release;
    27dc:	00000005 	andeq	r0, r0, r5
		join (prcs, st);
    27e0:	10f43800 	rscsne	r3, r4, r0, lsl #16
    27e4:	bb010000 	bllt	427ec <__ccfg+0x22844>
	if (*__inpline == NULL) // bin cmd
    27e8:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    27ec:	00146401 	andseq	r6, r4, r1, lsl #8
	if (prcs >= len)
    27f0:	03820100 	orreq	r0, r2, #0, 2
		prcs = len-1;
    27f4:	00118006 	andseq	r8, r1, r6
	memcpy (buf, __inpline, prcs);
    27f8:	00124000 	andseq	r4, r2, r0
    27fc:	289c0100 	ldmcs	ip, {r8}
    2800:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
	ufree (__inpline);
    2804:	000011ac 	andeq	r1, r0, ip, lsr #3
	__inpline = NULL;
    2808:	000011da 	ldrdeq	r1, [r0], -sl
	if (*buf) // if it's NULL, it's a bin cmd
    280c:	00000be3 	andeq	r0, r0, r3, ror #23
		buf [prcs] = '\0';
    2810:	01006a29 	tsteq	r0, r9, lsr #20
}
    2814:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
		prcs = strlen (__inpline);
    2818:	83000000 	movwhi	r0, #0
    281c:	29000005 	stmdbcs	r0, {r0, r2}
		return 0;
    2820:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    2824:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    2828:	05960000 	ldreq	r0, [r6]
int ser_outf (word st, const char *m, ...) {
    282c:	1b000000 	blne	2834 <ser_outf+0x8>
    2830:	000002e0 	andeq	r0, r0, r0, ror #5
	if ((prcs = running (__outserial)) != 0) {
    2834:	00000c0b 	andeq	r0, r0, fp, lsl #24
    2838:	01006a29 	tsteq	r0, r9, lsr #20
		join (prcs, st);
    283c:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
    2840:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
		release;
    2844:	29000005 	stmdbcs	r0, {r0, r2}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2848:	8f010069 	svchi	0x00010069
    284c:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    2850:	05bc0000 	ldreq	r0, [ip, #0]!
		umwait (st);
    2854:	33000000 	movwcc	r0, #0
    2858:	000012e7 	andeq	r1, r0, r7, ror #5
	if (runstrand (__outserial, buf) == 0) {
    285c:	00001180 	andeq	r1, r0, r0, lsl #3
    2860:	000002c0 	andeq	r0, r0, r0, asr #5
    2864:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
		ufree (buf);
    2868:	00130321 	andseq	r0, r3, r1, lsr #6
		npwait (st);
    286c:	12f62100 	rscsne	r2, r6, #0, 2
}
    2870:	00000000 	andeq	r0, r0, r0
    2874:	0011f139 	andseq	pc, r1, r9, lsr r1	; <UNPREDICTABLE>
    2878:	037d0100 	cmneq	sp, #0, 2
    287c:	0ce4010d 	stfeqe	f0, [r4], #52	; 0x34
int ser_inf (word st, const char *fmt, ...) {
    2880:	0cf00000 	ldcleq	0, cr0, [r0]
    2884:	9c010000 	stcls	0, cr0, [r1], {-0}
	if (fmt == NULL)
    2888:	00000c52 	andeq	r0, r0, r2, asr ip
	if (__inpline == NULL) {
    288c:	0013f92d 	andseq	pc, r3, sp, lsr #18
		if ((prcs = running (__inserial)) == 0) {
    2890:	037d0100 	cmneq	sp, #0, 2
    2894:	00008d1f 	andeq	r8, r0, pc, lsl sp
			prcs = runthread (__inserial);
    2898:	0005cf00 	andeq	ip, r5, r0, lsl #30
    289c:	ba3a0000 	blt	e828a4 <__ccfg+0xe628fc>
			if (prcs == 0) {
    28a0:	01000013 	tsteq	r0, r3, lsl r0
				npwait (st);
    28a4:	010c0310 	tsteq	ip, r0, lsl r3
		release;
    28a8:	0000008d 	andeq	r0, r0, sp, lsl #1
		join (prcs, st);
    28ac:	00001070 	andeq	r1, r0, r0, ror r0
    28b0:	00001180 	andeq	r1, r0, r0, lsl #3
	va_start (ap, fmt);
    28b4:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
	prcs = vscan (__inpline, fmt, ap);
    28b8:	832d0000 			; <UNDEFINED> instruction: 0x832d0000
    28bc:	01000011 	tsteq	r0, r1, lsl r0
	ufree (__inpline);
    28c0:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
	__inpline = NULL;
    28c4:	ed000000 	stc	0, cr0, [r0, #-0]
}
    28c8:	3b000005 	blcc	28e4 <plugch+0x4>
    28cc:	00667562 	rsbeq	r7, r6, r2, ror #10
    28d0:	2f031001 	svccs	0x00031001
		return 0;
    28d4:	000001c9 	andeq	r0, r0, r9, asr #3
    28d8:	00000600 	andeq	r0, r0, r0, lsl #12
    28dc:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    28e0:	03100100 	tsteq	r0, #0, 2
    28e4:	00008d38 	andeq	r8, r0, r8, lsr sp
    28e8:	0006a200 	andeq	sl, r6, r0, lsl #4
	RF_cmdFs.frequency = 
    28ec:	10a02b00 	adcne	r2, r0, r0, lsl #22
}
    28f0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    28f4:	ab2b0103 	blge	ac2d08 <__ccfg+0xaa2d60>
    28f8:	01000011 	tsteq	r0, r1, lsl r0
    28fc:	2701033d 	smladxcs	r1, sp, r3, r0
static int option (int opt, address val) {
    2900:	00000d44 	andeq	r0, r0, r4, asr #26
    2904:	00001152 	andeq	r1, r0, r2, asr r1
    2908:	00001154 	andeq	r1, r0, r4, asr r1
    290c:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
    2910:	000d5821 	andeq	r5, sp, r1, lsr #16
    2914:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2918:	0000123b 	andeq	r1, r0, fp, lsr r2
    291c:	0d02fc01 	stceq	12, cr15, [r2, #-4]
    2920:	123c3c01 	eorsne	r3, ip, #256	; 0x100
    2924:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2928:	10380d02 	eorsne	r0, r8, r2, lsl #26
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    292c:	10700000 	rsbsne	r0, r0, r0
    2930:	9c010000 	stcls	0, cr0, [r1], {-0}
			goto RVal;
    2934:	00000d44 	andeq	r0, r0, r4, asr #26
			_BIS (dstate, DSTATE_RXON);
    2938:	00133b20 	andseq	r3, r3, r0, lsr #22
    293c:	00103800 	andseq	r3, r0, r0, lsl #16
	int ret = 0;
    2940:	0002a800 	andeq	sl, r2, r0, lsl #16
			p_trigger (drvprcs, qevent);
    2944:	02f50100 	rscseq	r0, r5, #0, 2
    2948:	000d0702 	andeq	r0, sp, r2, lsl #14
    294c:	134a2100 	movtne	r2, #41216	; 0xa100
    2950:	26000000 	strcs	r0, [r0], -r0
    2954:	00001375 	andeq	r1, r0, r5, ror r3
    2958:	00001044 	andeq	r1, r0, r4, asr #32
    295c:	0000104a 	andeq	r1, r0, sl, asr #32
    2960:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
    2964:	00000d2c 	andeq	r0, r0, ip, lsr #26
    2968:	00139e21 	andseq	r9, r3, r1, lsr #28
}
    296c:	13912100 	orrsne	r2, r1, #0, 2
			_BIC (dstate, DSTATE_RXON);
    2970:	84210000 	strthi	r0, [r1], #-0
    2974:	00000013 	andeq	r0, r0, r3, lsl r0
			statid = (val == NULL) ? 0 : *val;
    2978:	0012ca27 	andseq	ip, r2, r7, lsr #20
    297c:	00104a00 	andseq	r4, r0, r0, lsl #20
	int ret = 0;
    2980:	00105400 	andseq	r5, r0, r0, lsl #8
			ret = (int) statid;
    2984:	02f70100 	rscseq	r0, r7, #0, 2
	if (val != NULL)
    2988:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
		*val = ret;
    298c:	00000000 	andeq	r0, r0, r0
			ret = rbuffl + 2;
    2990:	106e013d 	rsbne	r0, lr, sp, lsr r1
    2994:	eb010000 	bl	4299c <__ccfg+0x229f4>
			if (val != NULL) {
    2998:	a7010602 	strge	r0, [r1, -r2, lsl #12]
				memcpy (val, &rxstat,
    299c:	01000000 	mrseq	r0, (UNDEF: 0)
    29a0:	00000d65 	andeq	r0, r0, r5, ror #26
				memset (&rxstat, 0, 
    29a4:	0061753e 	rsbeq	r7, r1, lr, lsr r5
    29a8:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
			if (val == NULL)
    29ac:	00000d65 	andeq	r0, r0, r5, ror #26
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    29b0:	26040700 	strcs	r0, [r4], -r0, lsl #14
    29b4:	1a000002 	bne	29c4 <option+0xc4>
				utimer_set (bckf_timer, *val);
    29b8:	00113101 	andseq	r3, r1, r1, lsl #2
    29bc:	02d40100 	sbcseq	r0, r4, #0, 2
    29c0:	009b0109 	addseq	r0, fp, r9, lsl #2
			for (ret = 0; ret < 8; ret++)
    29c4:	0fe40000 	svceq	0x00e40000
				if (RF_cmdPropRadioDivSetup.txPower
    29c8:	10380000 	eorsne	r0, r8, r0
					== patable [ret])
    29cc:	9c010000 	stcls	0, cr0, [r1], {-0}
				if (RF_cmdPropRadioDivSetup.txPower
    29d0:	00000dc1 	andeq	r0, r0, r1, asr #27
			for (ret = 0; ret < 8; ret++)
    29d4:	00107b2d 	andseq	r7, r0, sp, lsr #22
    29d8:	02d40100 	sbcseq	r0, r4, #0, 2
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29dc:	0000a721 	andeq	sl, r0, r1, lsr #14
    29e0:	00072e00 	andeq	r2, r7, r0, lsl #28
    29e4:	61753b00 	cmnvs	r5, r0, lsl #22
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    29e8:	02d40100 	sbcseq	r0, r4, #0, 2
    29ec:	000dc12f 	andeq	ip, sp, pc, lsr #2
			_BIS (dstate, DSTATE_IRST);
    29f0:	00074100 	andeq	r4, r7, r0, lsl #2
    29f4:	13583300 	cmpne	r8, #0, 6
    29f8:	10040000 	andne	r0, r4, r0
			ret = (int) channel;
    29fc:	02900000 	addseq	r0, r0, #0
			goto RVal;
    2a00:	e6010000 	str	r0, [r1], -r0
				(*val > 7) ? 7 : *val;
    2a04:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
    2a08:	00000013 	andeq	r0, r0, r3, lsl r0
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a0c:	1a040700 	bne	104614 <__ccfg+0xe466c>
    2a10:	1a000002 	bne	2a20 <option+0x120>
			plugch ();
    2a14:	00148a01 	andseq	r8, r4, r1, lsl #20
			_BIS (dstate, DSTATE_IRST);
    2a18:	018a0100 	orreq	r0, sl, r0, lsl #2
    2a1c:	00a70106 	adceq	r0, r7, r6, lsl #2
			ret = (int) vrate;
    2a20:	0f940000 	svceq	0x00940000
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a24:	0fe40000 	svceq	0x00e40000
    2a28:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a2c:	00000e0f 	andeq	r0, r0, pc, lsl #28
    2a30:	0012482d 	andseq	r4, r2, sp, lsr #16
    2a34:	018a0100 	orreq	r0, sl, r0, lsl #2
    2a38:	00009b26 	andeq	r9, r0, r6, lsr #22
    2a3c:	00075400 	andeq	r5, r7, r0, lsl #8
    2a40:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a44:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    2a48:	0f461d01 	svceq	0x00461d01
    2a4c:	0fa80000 	svceq	0x00a80000
    2a50:	0fb20000 	svceq	0x00b20000
			syserror (EREQPAR, "cc13 op");
    2a54:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a58:	1e001a01 	vmlane.f32	s2, s0, s2
    2a5c:	0011fe01 	andseq	pc, r1, r1, lsl #28
    2a60:	01380100 	teqeq	r8, r0, lsl #2
    2a64:	000e8006 	andeq	r8, lr, r6
    2a68:	000f9400 	andeq	r9, pc, r0, lsl #8
    2a6c:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2a70:	4000000e 	andmi	r0, r0, lr
    2a74:	00001361 	andeq	r1, r0, r1, ror #6
    2a78:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
    2a7c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2a80:	00000772 	andeq	r0, r0, r2, ror r7
    2a84:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
    2a88:	01680100 	cmneq	r8, r0, lsl #2
    2a8c:	000ece01 	andeq	ip, lr, r1, lsl #28
static void issue_cmd (lword cmd) {
    2a90:	02782300 	rsbseq	r2, r8, #0, 6
    2a94:	8d400000 	stclhi	0, cr0, [r0, #-0]
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a98:	01000011 	tsteq	r0, r1, lsl r0
    2a9c:	9b0b0147 	blls	2c2fc0 <__ccfg+0x2a3018>
    2aa0:	bd000000 	stclt	0, cr0, [r0, #-0]
		if (res != 0x86)
    2aa4:	42000007 	andmi	r0, r0, #7
			syserror (EHARDWARE, "hang ic0");
    2aa8:	00001410 	andeq	r1, r0, r0, lsl r4
    2aac:	00000eec 	andeq	r0, r0, ip, ror #29
		if (cnt-- == 0) {
    2ab0:	00000ef4 	strdeq	r0, [r0], -r4
			diag ("HUP %lx %lx", cmd, res);
    2ab4:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
    2ab8:	2100000e 	tstcs	r0, lr
			syserror (EHARDWARE, "hang ic0");
    2abc:	0000141f 	andeq	r1, r0, pc, lsl r4
		udelay (1);
    2ac0:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2ac4:	0ef80000 	cdpeq	0, 15, cr0, cr8, cr0, {0}
}
    2ac8:	0f000000 	svceq	0x00000000
    2acc:	0f050000 	svceq	0x00050000
    2ad0:	000e8f06 	andeq	r8, lr, r6, lsl #30
    2ad4:	141f2100 	ldrne	r2, [pc], #-256	; 2adc <rx_de+0x4>
static void rx_de () {
    2ad8:	42000000 	andmi	r0, r0, #0
	if ((dstate & DSTATE_RXAC) == 0)
    2adc:	000013f3 	strdeq	r1, [r0], -r3
    2ae0:	00000f46 	andeq	r0, r0, r6, asr #30
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2ae4:	00000f4e 	andeq	r0, r0, lr, asr #30
	_BIC (dstate, DSTATE_RXAC);
    2ae8:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
    2aec:	2100000e 	tstcs	r0, lr
}
    2af0:	00001402 	andeq	r1, r0, r2, lsl #8
    2af4:	13f34300 	mvnsne	r4, #0, 6
    2af8:	0f520000 	svceq	0x00520000
static void rf_off () {
    2afc:	0f5a0000 	svceq	0x005a0000
	if ((dstate & DSTATE_RFON) == 0)
    2b00:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    2b04:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
	IntDisable (INT_RFC_CPE_0);
    2b08:	00000000 	andeq	r0, r0, r0
    2b0c:	f6011e00 			; <UNDEFINED> instruction: 0xf6011e00
    2b10:	01000012 	tsteq	r0, r2, lsl r0
	RFCAdi3VcoLdoVoltageMode (false);
    2b14:	5806012b 	stmdapl	r6, {r0, r1, r3, r5, r8}
	RFCSynthPowerDown ();
    2b18:	8000000e 	andhi	r0, r0, lr
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2b1c:	0100000e 	tsteq	r0, lr
    2b20:	000ef19c 	muleq	lr, ip, r1
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2b24:	0f253300 	svceq	0x00253300
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b28:	0e600000 	cdpeq	0, 6, cr0, cr0, cr0, {0}
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2b2c:	02600000 	rsbeq	r0, r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2b30:	32010000 	andcc	r0, r1, #0
    2b34:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
    2b38:	0000000f 	andeq	r0, r0, pc
	_BIC (dstate, DSTATE_RFON);
    2b3c:	15011e00 	strne	r1, [r1, #-3584]	; 0xfffff200
    2b40:	01000012 	tsteq	r0, r2, lsl r0
}
    2b44:	1806011e 	stmdane	r6, {r1, r2, r3, r4, r8}
    2b48:	5800000e 	stmdapl	r0, {r1, r2, r3}
    2b4c:	0100000e 	tsteq	r0, lr
    2b50:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
    2b54:	0f253300 	svceq	0x00253300
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2b58:	0e2a0000 	cdpeq	0, 2, cr0, cr10, cr0, {0}
    2b5c:	02400000 	subeq	r0, r0, #0
    2b60:	25010000 	strcs	r0, [r1, #-0]
		if (cmd->status == tstat)
    2b64:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
		if (timeout-- == 0) {
    2b68:	fc00000f 	stc2	0, cr0, [r0], {15}
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2b6c:	00000007 	andeq	r0, r0, r7
    2b70:	135a4400 	cmpne	sl, #0, 8
    2b74:	17010000 	strne	r0, [r1, -r0]
			syserror (EHARDWARE, "rt2");
    2b78:	df011501 	svcle	0x00011501
    2b7c:	03000000 	movweq	r0, #0
		udelay (1);
    2b80:	00000f46 	andeq	r0, r0, r6, asr #30
		if (cmd->status == tstat)
    2b84:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
}
    2b88:	01170100 	tsteq	r7, r0, lsl #2
    2b8c:	0000a722 	andeq	sl, r0, r2, lsr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2b90:	96450000 	strbls	r0, [r5], -r0
    2b94:	0100000f 	tsteq	r0, pc
static void rf_on () {
    2b98:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
    2b9c:	03000000 	movweq	r0, #0
	OSCHF_TurnOnXosc();
    2ba0:	00147e46 	andseq	r7, r4, r6, asr #28
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2ba4:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
    2ba8:	000f7a03 	andeq	r7, pc, r3, lsl #20
    2bac:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
    2bb0:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb4:	00008d06 	andeq	r8, r0, r6, lsl #26
    2bb8:	69474800 	stmdbvs	r7, {fp, lr}^
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bbc:	0bf40100 	bleq	ffd02fc4 <_estack+0xdfcfdfc4>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2bc0:	0000008d 	andeq	r0, r0, sp, lsl #1
	issue_cmd (
    2bc4:	01490000 	mrseq	r0, (UNDEF: 73)
    2bc8:	000013eb 	andeq	r1, r0, fp, ror #7
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2bcc:	01069801 	tsteq	r6, r1, lsl #16
    2bd0:	00000dc4 	andeq	r0, r0, r4, asr #27
    2bd4:	00000e18 	andeq	r0, r0, r8, lsl lr
   pPatchTab[80] = 0;
    2bd8:	10249c01 	eorne	r9, r4, r1, lsl #24
   } while (--nIterations);
    2bdc:	654a0000 	strbvs	r0, [sl, #-0]
   pPatchTab[53] = 2;
    2be0:	98010063 	stmdals	r1, {r0, r1, r5, r6}
    2be4:	0000a71a 	andeq	sl, r0, sl, lsl r7
   pPatchTab[55] = 3;
    2be8:	00080f00 	andeq	r0, r8, r0, lsl #30
   pPatchTab[110] = 4;
    2bec:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
   pPatchTab[107] = 5;
    2bf0:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
   pPatchTab[65] = 6;
    2bf4:	22000010 	andcs	r0, r0, #16
    2bf8:	28000008 	stmdacs	r0, {r3}
   pPatchTab[57] = 1;
    2bfc:	000011ed 	andeq	r1, r0, sp, ror #3
   pIrqPatch[1] = _IRQ_PATCH_0;
    2c00:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   const uint32_t *pS = patchGenfskRfe;
    2c04:	00000dd2 	ldrdeq	r0, [r0], -r2
      t2 = *pS++;
    2c08:	2202a801 	andcs	sl, r2, #65536	; 0x10000
      t4 = *pS++;
    2c0c:	00001410 	andeq	r1, r0, r0, lsl r4
      t6 = *pS++;
    2c10:	00000dd2 	ldrdeq	r0, [r0], -r2
      t8 = *pS++;
    2c14:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      *pD++ = t1;
    2c18:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
      *pD++ = t2;
    2c1c:	2100000f 	tstcs	r0, pc
      *pD++ = t3;
    2c20:	0000141f 	andeq	r1, r0, pc, lsl r4
      *pD++ = t5;
    2c24:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
      *pD++ = t7;
    2c28:	0dd80000 	ldcleq	0, cr0, [r8]
   } while (--nIterations);
    2c2c:	02100000 	andseq	r0, r0, #0
    2c30:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
      *pD++ = t8;
    2c34:	000ff303 	andeq	pc, pc, r3, lsl #6
   } while (--nIterations);
    2c38:	141f2100 	ldrne	r2, [pc], #-256	; 2c40 <rf_on.part.0+0xb0>
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2c3c:	22000000 	andcs	r0, r0, #0
   *pD++ = t2;
    2c40:	000013f3 	strdeq	r1, [r0], -r3
   *pD++ = t3;
    2c44:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   *pD++ = t4;
    2c48:	00000228 	andeq	r0, r0, r8, lsr #4
   *pD++ = t5;
    2c4c:	0d03b801 	stceq	8, cr11, [r3, #-4]
    2c50:	21000010 	tstcs	r0, r0, lsl r0
	RFCAdi3VcoLdoVoltageMode (true);
    2c54:	00001402 	andeq	r1, r0, r2, lsl #8
    2c58:	13f34300 	mvnsne	r4, #0, 6
       	RFCRfTrimSet (&rfTrim);
    2c5c:	0df60000 	ldcleq	0, cr0, [r6]
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2c60:	0df80000 	ldcleq	0, cr0, [r8]
    2c64:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2c68:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
    2c6c:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&cmd_srt);
    2c70:	01d60407 	bicseq	r0, r6, r7, lsl #8
    2c74:	01490000 	mrseq	r0, (UNDEF: 73)
	issue_cmd ((lword)&RF_cmdFs);
    2c78:	00001380 	andeq	r1, r0, r0, lsl #7
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2c7c:	01067201 	tsteq	r6, r1, lsl #4
	...
	IntEnable (INT_RFC_CPE_0);
    2c88:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
	_BIC (dstate, DSTATE_IRST);
    2c8c:	734a0000 	movtvc	r0, #40960	; 0xa000
    2c90:	72010074 	andvc	r0, r1, #116	; 0x74
    2c94:	0000a718 	andeq	sl, r0, r8, lsl r7
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2c98:	00084000 	andeq	r4, r8, r0
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2c9c:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
	IntEnable (INT_RFC_CPE_0);
    2ca0:	7201006e 	andvc	r0, r1, #110	; 0x6e
    2ca4:	00024428 	andeq	r4, r2, r8, lsr #8
}
    2ca8:	00085300 	andeq	r5, r8, r0, lsl #6
	IntEnable (INT_RFC_CPE_0);
    2cac:	61764a00 	cmnvs	r6, r0, lsl #20
    2cb0:	7201006c 	andvc	r0, r1, #108	; 0x6c
    2cb4:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
    2cb8:	00087100 	andeq	r7, r8, r0, lsl #2
    2cbc:	0fb14b00 	svceq	0x00b14b00
    2cc0:	74010000 	strvc	r0, [r1], #-0
    2cc4:	0000c90e 	andeq	ip, r0, lr, lsl #18
    2cc8:	00030500 	andeq	r0, r3, r0, lsl #10
    2ccc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2cd0:	000014a1 	andeq	r1, r0, r1, lsr #9
    2cd4:	00017801 	andeq	r7, r1, r1, lsl #16
    2cd8:	4d000000 	stcmi	0, cr0, [r0, #-0]
    2cdc:	00001220 	andeq	r1, r0, r0, lsr #4
    2ce0:	00000000 	andeq	r0, r0, r0
    2ce4:	00000628 	andeq	r0, r0, r8, lsr #12
    2ce8:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
    2cec:	00001201 	andeq	r1, r0, r1, lsl #4
	...
    2cf8:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
    2cfc:	2f000010 	svccs	0x00000010
    2d00:	00001213 	andeq	r1, r0, r3, lsl r2
    2d04:	122a2800 	eorne	r2, sl, #0, 16
	...
static void rx_int_enable () {
    2d10:	84010000 	strhi	r0, [r1], #-0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2d14:	014e0003 	cmpeq	lr, r3
    2d18:	00001448 	andeq	r1, r0, r8, asr #8
    2d1c:	01066201 	tsteq	r6, r1, lsl #4
    2d20:	00001798 	muleq	r0, r8, r7
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2d24:	000017c8 	andeq	r1, r0, r8, asr #15
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2d28:	01499c01 	cmpeq	r9, r1, lsl #24
    2d2c:	00000f50 	andeq	r0, r0, r0, asr pc
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2d30:	01064f01 	tsteq	r6, r1, lsl #30
	...
    2d3c:	11079c01 	tstne	r7, r1, lsl #24
    2d40:	51280000 			; <UNDEFINED> instruction: 0x51280000
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d44:	00000012 	andeq	r0, r0, r2, lsl r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d48:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d4c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (db->status == DATA_ENTRY_FINISHED) {
    2d50:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d54:	000f8701 	andeq	r8, pc, r1, lsl #14
    2d58:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
			nr++;
    2d5c:	000d8401 	andeq	r8, sp, r1, lsl #8
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d60:	000dc400 	andeq	ip, sp, r0, lsl #8
    2d64:	2e9c0100 	fmlcse	f0, f4, f0
    2d68:	4a000011 	bmi	2db4 <rx_int_enable+0xa4>
    2d6c:	3b010064 	blcc	42f04 <__ccfg+0x22f5c>
				__dp [pl + 1] = __dp [pl] - 128;
    2d70:	0000df1c 	andeq	sp, r0, ip, lsl pc
				pl = __dp [1] + 2;
    2d74:	00088f00 	andeq	r8, r8, r0, lsl #30
				__dp [pl + 1] = __dp [pl] - 128;
    2d78:	01490000 	mrseq	r0, (UNDEF: 73)
    2d7c:	00001047 	andeq	r1, r0, r7, asr #32
				__dp [pl] = 0;
    2d80:	01062b01 	tsteq	r6, r1, lsl #22
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d84:	00000d48 	andeq	r0, r0, r8, asr #26
    2d88:	00000d84 	andeq	r0, r0, r4, lsl #27
    2d8c:	11559c01 	cmpne	r5, r1, lsl #24
			db->status = DATA_ENTRY_PENDING;
    2d90:	644a0000 	strbvs	r0, [sl], #-0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d94:	1b2b0100 	blne	ac319c <__ccfg+0xaa31f4>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2d98:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
				diag ("BAD RX");
    2d9c:	000008ad 	andeq	r0, r0, sp, lsr #17
    2da0:	7d014900 	vstrvc.16	s8, [r1, #-0]	; <UNPREDICTABLE>
	if (nr) {
    2da4:	01000012 	tsteq	r0, r2, lsl r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2da8:	1c010620 	stcne	6, cr0, [r1], {32}
}
    2dac:	4600000d 	strmi	r0, [r0], -sp
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2db0:	0100000d 	tsteq	r0, sp
    2db4:	00117c9c 	mulseq	r1, ip, ip
    2db8:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
}
    2dbc:	b81c2001 	ldmdalt	ip, {r0, sp}
    2dc0:	cb000000 	blgt	2dc8 <rx_int_enable+0xb8>
    2dc4:	00000008 	andeq	r0, r0, r8
    2dc8:	13680149 	cmnne	r8, #1073741842	; 0x40000012
    2dcc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2dd0:	0cf00106 	ldfeqe	f0, [r0], #24
    2dd4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    2dd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ddc:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
thread (cc1350_driver)
    2de0:	01006e4f 	tsteq	r0, pc, asr #28
    2de4:	00b81c19 	adcseq	r1, r8, r9, lsl ip
    2de8:	50010000 	andpl	r0, r1, r0
    2dec:	0011b743 	andseq	fp, r1, r3, asr #14
    2df0:	000d0400 	andeq	r0, sp, r0, lsl #8
		if (dstate & DSTATE_IRST) {
    2df4:	000d0e00 	andeq	r0, sp, r0, lsl #28
    2df8:	031b0100 	tsteq	fp, #0, 2
    2dfc:	0011c521 	andseq	ip, r1, r1, lsr #10
			rf_off ();
    2e00:	50000000 	andpl	r0, r0, r0
			_BIC (dstate,
    2e04:	0000145c 	andeq	r1, r0, ip, asr r4
    2e08:	01141501 	tsteq	r4, r1, lsl #10
		if (dstate & DSTATE_RXAC) {
    2e0c:	0011d003 	andseq	sp, r1, r3
    2e10:	006e5100 	rsbeq	r5, lr, r0, lsl #2
			if ((dstate & DSTATE_RXON) == 0)
    2e14:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
				rx_de ();
    2e18:	00000000 	andeq	r0, r0, r0
		if (paylen == 0) {
    2e1c:	00103352 	andseq	r3, r0, r2, asr r3
    2e20:	011a0300 	tsteq	sl, r0, lsl #6
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2e24:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
    2e28:	53000011 	movwpl	r0, #17
    2e2c:	0000144d 	andeq	r1, r0, sp, asr #8
    2e30:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e34:	00000073 	andeq	r0, r0, r3, ror r0
    2e38:	12845400 	addne	r5, r4, #0, 8
    2e3c:	5b030000 	blpl	c2e44 <__ccfg+0xa2e9c>
    2e40:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
    2e44:	00000fa4 	andeq	r0, r0, r4, lsr #31
    2e48:	01355003 	teqeq	r5, r3
    2e4c:	139f5503 	orrsne	r5, pc, #12582912	; 0xc00000
    2e50:	bf0f0000 	svclt	0x000f0000
		} else if (dstate & DSTATE_RXON) {
    2e54:	00730101 	rsbseq	r0, r3, r1, lsl #2
	if (dstate & DSTATE_RFON)
    2e58:	20030000 	andcs	r0, r3, r0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2e5c:	16000012 			; <UNDEFINED> instruction: 0x16000012
		re->status = DATA_ENTRY_PENDING;
    2e60:	00001400 	andeq	r1, r0, r0, lsl #8
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2e64:	730ec10f 	movwvc	ip, #57615	; 0xe10f
	issue_cmd ((lword)&RF_cmdPropRx);
    2e68:	00000000 	andeq	r0, r0, r0
	_BIS (dstate, DSTATE_RXAC);
    2e6c:	00136f54 	andseq	r6, r3, r4, asr pc
    2e70:	01900f00 	orrseq	r0, r0, r0, lsl #30
    2e74:	6e540301 	cdpvs	3, 5, cr0, cr4, cr1, {0}
    2e78:	0f00000f 	svceq	0x0000000f
	if (dstate & DSTATE_RXAC)
    2e7c:	0301017b 	movweq	r0, #4475	; 0x117b
    2e80:	0011dc52 	andseq	sp, r1, r2, asr ip
				if (statid != 0xffff)
    2e84:	03660a00 	cmneq	r6, #0, 20
    2e88:	51030101 	tstpl	r3, r1, lsl #2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2e8c:	53000012 	movwpl	r0, #18
				RF_cmdPropTx.pktLen = (byte) paylen;
    2e90:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
		if (paylen == 0) {
    2e94:	1f03660a 	svcne	0x0003660a
			wait (qevent, DR_LOOP);
    2e98:	00000073 	andeq	r0, r0, r3, ror r0
    2e9c:	13475600 	movtne	r5, #30208	; 0x7600
			if (dstate & DSTATE_RXAC) {
    2ea0:	4c020000 	stcmi	0, cr0, [r2], {-0}
    2ea4:	03010101 	movweq	r0, #4353	; 0x1101
				rx_int_enable ();
    2ea8:	0012d854 	andseq	sp, r2, r4, asr r8
			release;
    2eac:	01c40200 	biceq	r0, r4, r0, lsl #4
			} else if (dstate & DSTATE_RFON) {
    2eb0:	b4570301 	ldrblt	r0, [r7], #-769	; 0xfffffcff
				delay (offdelay, DR_GOOF);
    2eb4:	02000010 	andeq	r0, r0, #16
    2eb8:	730101ad 	movwvc	r0, #4525	; 0x11ad
    2ebc:	03000000 	movweq	r0, #0
		if (bckf_timer) {
    2ec0:	00100756 	andseq	r0, r0, r6, asr r7
			wait (qevent, DR_LOOP);
    2ec4:	02450e00 	subeq	r0, r5, #0, 28
    2ec8:	58030101 	stmdapl	r3, {r0, r8}
    2ecc:	00000fd9 	ldrdeq	r0, [r0], -r9
			delay (bckf_timer, DR_LOOP);
    2ed0:	01022c0e 	tsteq	r2, lr, lsl #24
    2ed4:	00007301 	andeq	r7, r0, r1, lsl #6
			if (dstate & DSTATE_RXAC)
    2ed8:	c4520300 	ldrbgt	r0, [r2], #-768	; 0xfffffd00
    2edc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
	if (dstate & DSTATE_RFON)
    2ee0:	010101dc 	ldrdeq	r0, [r1, -ip]
    2ee4:	0012ab03 	andseq	sl, r2, r3, lsl #22
		rx_de ();
    2ee8:	0f7e5300 	svceq	0x007e5300
		RF_cmdPropTx . status = 0;
    2eec:	dc0e0000 	stcle	0, cr0, [lr], {-0}
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef0:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    2ef4:	56000000 	strpl	r0, [r0], -r0
    2ef8:	00001143 	andeq	r1, r0, r3, asr #2
		issue_cmd ((lword)&cmd_cs);
    2efc:	01010f0b 	tsteq	r1, fp, lsl #30
		if (dstate & DSTATE_IRST)
    2f00:	80540301 	subshi	r0, r4, r1, lsl #6
    2f04:	0c000010 	stceq	0, cr0, [r0], {16}
    2f08:	030101ed 	movweq	r0, #4589	; 0x11ed
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f0c:	00138c54 	andseq	r8, r3, r4, asr ip
    2f10:	01d60c00 	bicseq	r0, r6, r0, lsl #24
			delay (1, DR_XMIT);
    2f14:	55520301 	ldrbpl	r0, [r2, #-769]	; 0xfffffcff
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2f18:	06000010 			; <UNDEFINED> instruction: 0x06000010
    2f1c:	01010440 	tsteq	r1, r0, asr #8
    2f20:	0012e703 	andseq	lr, r2, r3, lsl #14
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2f24:	11c05300 	bicne	r5, r0, r0, lsl #6
    2f28:	40060000 	andmi	r0, r6, r0
				RF_cmdPropTx . status = 0;
    2f2c:	00732404 	rsbseq	r2, r3, r4, lsl #8
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2f30:	52000000 	andpl	r0, r0, #0
				issue_cmd ((lword)&RF_cmdPropTx);
    2f34:	00000fee 	andeq	r0, r0, lr, ror #31
				proceed (DR_XMIT);
    2f38:	01039106 	tsteq	r3, r6, lsl #2
    2f3c:	13110301 	tstne	r1, #67108864	; 0x4000000
			txtries++;
    2f40:	c0530000 	subsgt	r0, r3, r0
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2f44:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2f48:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    2f4c:	53000000 	movwpl	r0, #0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f50:	0000111a 	andeq	r1, r0, sl, lsl r1
		goto DR_LOOP__;
    2f54:	2a039106 	bcs	e7374 <__ccfg+0xc73cc>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2f58:	00000073 	andeq	r0, r0, r3, ror r0
		paylen = 0;
    2f5c:	14135200 	ldrne	r5, [r3], #-512	; 0xfffffe00
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f60:	0c060000 	stceq	0, cr0, [r6], {-0}
		txtries = 0;
    2f64:	03010103 	movweq	r0, #4355	; 0x1103
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f68:	0000133b 	andeq	r1, r0, fp, lsr r3
    2f6c:	0011c053 	andseq	ip, r1, r3, asr r0
    2f70:	030c0600 	movweq	r0, #50688	; 0xc600
    2f74:	00007318 	andeq	r7, r0, r8, lsl r3
    2f78:	111a5300 	tstne	sl, r0, lsl #6
		    tcvphy_top (physid) == NULL)
    2f7c:	0c060000 	stceq	0, cr0, [r6], {-0}
    2f80:	00732b03 	rsbseq	r2, r3, r3, lsl #22
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f84:	52000000 	andpl	r0, r0, #0
    2f88:	0000110b 	andeq	r1, r0, fp, lsl #2
			rf_off ();
    2f8c:	0101e706 	tsteq	r1, r6, lsl #14
endthread
    2f90:	13580301 	cmpne	r8, #67108864	; 0x4000000
    2f94:	c0530000 	subsgt	r0, r3, r0
    2f98:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2f9c:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    2fa0:	00000000 	andeq	r0, r0, r0
    2fa4:	00124e52 	andseq	r4, r2, r2, asr lr
    2fa8:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    2fac:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
    2fb0:	53000013 	movwpl	r0, #19
    2fb4:	000011c0 	andeq	r1, r0, r0, asr #3
    2fb8:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
    2fbc:	00000073 	andeq	r0, r0, r3, ror r0
    2fc0:	13365200 	teqne	r6, #0, 4
    2fc4:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    2fc8:	03010101 	movweq	r0, #4353	; 0x1101
    2fcc:	000013ac 	andeq	r1, r0, ip, lsr #7
void RFCCPE0IntHandler (void) {
    2fd0:	0011c053 	andseq	ip, r1, r3, asr r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2fd4:	01390600 	teqeq	r9, r0, lsl #12
		_BIS (dstate, DSTATE_IRST);
    2fd8:	0000731b 	andeq	r7, r0, fp, lsl r3
    2fdc:	10a85300 	adcne	r5, r8, r0, lsl #6
    2fe0:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2fe4:	00732e01 	rsbseq	r2, r3, r1, lsl #28
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2fe8:	94530000 	ldrbls	r0, [r3], #-0
    2fec:	06000010 			; <UNDEFINED> instruction: 0x06000010
	p_trigger (drvprcs, qevent);
    2ff0:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ff4:	00000000 	andeq	r0, r0, r0
    2ff8:	00125952 	andseq	r5, r2, r2, asr r9
    2ffc:	02840400 	addeq	r0, r4, #0, 8
    3000:	c9030101 	stmdbgt	r3, {r0, r8}
    3004:	53000013 	movwpl	r0, #19
    3008:	00001127 	andeq	r1, r0, r7, lsr #2
    300c:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
    3010:	00000073 	andeq	r0, r0, r3, ror r0
    3014:	0f565200 	svceq	0x00565200
    3018:	06040000 	streq	r0, [r4], -r0
	RISE_N_SHINE;
    301c:	03010102 	movweq	r0, #4354	; 0x1102
    3020:	000013f3 	strdeq	r1, [r0], -r3
    3024:	00112753 	andseq	r2, r1, r3, asr r7
}
    3028:	02060400 	andeq	r0, r6, #0, 8
    302c:	00007323 	andeq	r7, r0, r3, lsr #6
    3030:	14365300 	ldrtne	r5, [r6], #-768	; 0xfffffd00
    3034:	06040000 	streq	r0, [r4], -r0
    3038:	00733702 	rsbseq	r3, r3, r2, lsl #14
    303c:	52000000 	andpl	r0, r0, #0
void phys_cc1350 (int phy, int mbs) {
    3040:	000012ca 	andeq	r1, r0, sl, asr #5
	if (rbuffl != 0)
    3044:	01015404 	tsteq	r1, r4, lsl #8
    3048:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
		syserror (ETOOMANY, "cc13");
    304c:	27530000 	ldrbcs	r0, [r3, -r0]
		syserror (EREQPAR, "cc13 mb");
    3050:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
	if (mbs == 0)
    3054:	73190154 	tstvc	r9, #84, 2
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    3058:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "cc13 mb");
    305c:	0013d752 	andseq	sp, r3, r2, asr r7
    3060:	011e0400 	tsteq	lr, r0, lsl #8
	i = 0;
    3064:	2d030101 	stfcss	f0, [r3, #-4]
	rbuffl = (byte) mbs;
    3068:	53000014 	movwpl	r0, #20
		db->config.type = 0;	// General (data in structure)
    306c:	00001127 	andeq	r1, r0, r7, lsr #2
	rbuffl = (byte) mbs;
    3070:	17011e04 	strne	r1, [r1, -r4, lsl #28]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    3074:	00000073 	andeq	r0, r0, r3, ror r0
    3078:	115c5600 	cmpne	ip, r0, lsl #12
		if (db == NULL)
    307c:	63090000 	movwvs	r0, #36864	; 0x9000
			syserror (EMALLOC, "cc13");
    3080:	03010104 	movweq	r0, #4356	; 0x1104
    3084:	0010c456 	andseq	ip, r0, r6, asr r4
    3088:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
		db->status = DATA_ENTRY_PENDING;
    308c:	56030101 	strpl	r0, [r3], -r1, lsl #2
		if (i)
    3090:	000010dd 	ldrdeq	r1, [r0], -sp
			da->pNextEntry = (byte*) db;
    3094:	01022a09 	tsteq	r2, r9, lsl #20
		db->length = rbuffl + 2;
    3098:	21520301 	cmpcs	r2, r1, lsl #6
    309c:	09000014 	stmdbeq	r0, {r2, r4}
		db->config.type = 0;	// General (data in structure)
    30a0:	01010168 	tsteq	r1, r8, ror #2
		db->length = rbuffl + 2;
    30a4:	00146b03 	andseq	r6, r4, r3, lsl #22
	db->pNextEntry = (byte*) re;
    30a8:	10e95300 	rscne	r5, r9, r0, lsl #6
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    30ac:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    30b0:	00731f01 	rsbseq	r1, r3, r1, lsl #30
	if (rbuffs == NULL)
    30b4:	56000000 	strpl	r0, [r0], -r0
	rbuffs->pCurrEntry = (byte*) re;
    30b8:	00001023 	andeq	r1, r0, r3, lsr #32
	rbuffs->pLastEntry = NULL;
    30bc:	01013209 	tsteq	r1, r9, lsl #4
    30c0:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30c4:	0000000d 	andeq	r0, r0, sp
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    30c8:	00000000 	andeq	r0, r0, r0
    30cc:	01000000 	mrseq	r0, (UNDEF: 0)
    30d0:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
	rbuffl -= 2;
    30d4:	08de0000 	ldmeq	lr, {}^	; <UNPREDICTABLE>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30d8:	00000000 	andeq	r0, r0, r0
	rbuffl -= 2;
    30dc:	0000121f 	andeq	r1, r0, pc, lsl r2
	physid = phy;
    30e0:	0a1a0003 	beq	6830f4 <__ccfg+0x66314c>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30e4:	01040000 	mrseq	r0, (UNDEF: 4)
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30e8:	000000ac 	andeq	r0, r0, ip, lsr #1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30ec:	0015c10c 	andseq	ip, r5, ip, lsl #2
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30f0:	000e1000 	andeq	r1, lr, r0
    30f4:	0007d000 	andeq	sp, r7, r0
	utimer_add (&bckf_timer);
    30f8:	00000000 	andeq	r0, r0, r0
	drvprcs = runthread (cc1350_driver);
    30fc:	00239300 	eoreq	r9, r3, r0, lsl #6
    3100:	06010200 	streq	r0, [r1], -r0, lsl #4
    3104:	00000c5d 	andeq	r0, r0, sp, asr ip
	if (drvprcs == 0)
    3108:	6b050202 	blvs	143918 <__ccfg+0x123970>
		syserror (ERESOURCE, "cc13");
    310c:	0300000a 	movweq	r0, #10
    3110:	00002ba7 	andeq	r2, r0, r7, lsr #23
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3114:	3f182803 	svccc	0x00182803
    3118:	02000000 	andeq	r0, r0, #0
    311c:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3120:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3124:	0007f805 	andeq	pc, r7, r5, lsl #16
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3128:	2a220300 	bcs	883d30 <__ccfg+0x863d88>
    312c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    3130:	00005918 	andeq	r5, r0, r8, lsl r9
    3134:	08010200 	stmdaeq	r1, {r9}
    3138:	00000c5b 	andeq	r0, r0, fp, asr ip
    313c:	002e1803 	eoreq	r1, lr, r3, lsl #16
    3140:	19310300 	ldmdbne	r1!, {r8, r9}
    3144:	0000006c 	andeq	r0, r0, ip, rrx
    3148:	6c070202 	sfmvs	f0, 4, [r7], {2}
	plugch ();
    314c:	0300000d 	movweq	r0, #13
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3150:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    3154:	7f193403 	svcvc	0x00193403
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3158:	02000000 	andeq	r0, r0, #0
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    315c:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    3160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3164:	00042107 	andeq	r2, r4, r7, lsl #2
}
    3168:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    316c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3170:	2b070402 	blcs	1c4180 <__ccfg+0x1a41d8>
    3174:	03000004 	movweq	r0, #4
    3178:	0000051e 	andeq	r0, r0, lr, lsl r5
    317c:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    3180:	05000000 	streq	r0, [r0, #-0]
    3184:	00000b90 	muleq	r0, r0, fp
    3188:	bf000b04 	svclt	0x00000b04
    318c:	06000000 	streq	r0, [r0], -r0
    3190:	0000086d 	andeq	r0, r0, sp, ror #16
    3194:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    3198:	07000100 	streq	r0, [r0, -r0, lsl #2]
    319c:	0b920304 	bleq	fe483db4 <_estack+0xde47edb4>
    31a0:	63040000 	movwvs	r0, #16384	; 0x4000
    31a4:	00009b18 	andeq	r9, r0, r8, lsl fp
    31a8:	132e0300 			; <UNDEFINED> instruction: 0x132e0300
    31ac:	26050000 	strcs	r0, [r5], -r0
    31b0:	00004d12 	andeq	r4, r0, r2, lsl sp
    31b4:	29010300 	stmdbcs	r1, {r8, r9}
    31b8:	27050000 	strcs	r0, [r5, -r0]
    31bc:	00006012 	andeq	r6, r0, r2, lsl r0
    31c0:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    31c4:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    31c8:	03000000 	movweq	r0, #0
    31cc:	000013d2 	ldrdeq	r1, [r0], -r2
    31d0:	33122805 	tstcc	r2, #327680	; 0x50000
    31d4:	03000000 	movweq	r0, #0
    31d8:	00001dc8 	andeq	r1, r0, r8, asr #27
    31dc:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
    31e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    31e4:	000000fb 	strdeq	r0, [r0], -fp
    31e8:	00295303 	eoreq	r5, r9, r3, lsl #6
    31ec:	122c0500 	eorne	r0, ip, #0, 10
    31f0:	00000073 	andeq	r0, r0, r3, ror r0
    31f4:	00010c08 	andeq	r0, r1, r8, lsl #24
    31f8:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    31fc:	2d050000 	stccs	0, cr0, [r5, #-0]
    3200:	00007312 	andeq	r7, r0, r2, lsl r3
    3204:	0bb40300 	bleq	fed03e0c <_estack+0xdecfee0c>
    3208:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    320c:	00013510 	andeq	r3, r1, r0, lsl r5
    3210:	d9040a00 	stmdble	r4, {r9, fp}
    3214:	0b000000 	bleq	321c <tcv_ope_null+0x10>
    3218:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    321c:	000001c9 	andeq	r0, r0, r9, asr #3
    3220:	0000340c 	andeq	r3, r0, ip, lsl #8
    3224:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    3228:	000000fb 	strdeq	r0, [r0], -fp
    322c:	00070101 	andeq	r0, r7, r1, lsl #2
    3230:	00064c0c 	andeq	r4, r6, ip, lsl #24
    3234:	03350500 	teqeq	r5, #0, 10
    3238:	000000fb 	strdeq	r0, [r0], -fp
    323c:	00060101 	andeq	r0, r6, r1, lsl #2
    3240:	0002e70c 	andeq	lr, r2, ip, lsl #14
    3244:	03360500 	teqeq	r6, #0, 10
    3248:	000000fb 	strdeq	r0, [r0], -fp
    324c:	00050101 	andeq	r0, r5, r1, lsl #2
    3250:	0006b70c 	andeq	fp, r6, ip, lsl #14
strand (__outserial, const char*)
    3254:	03370500 	teqeq	r7, #0, 10
    3258:	000000fb 	strdeq	r0, [r0], -fp
    325c:	00040101 	andeq	r0, r4, r1, lsl #2
    3260:	000a9f0c 	andeq	r9, sl, ip, lsl #30
endstrand
    3264:	03380500 	teqeq	r8, #0, 10
    3268:	000000fb 	strdeq	r0, [r0], -fp
	ptr = data;
    326c:	00000401 	andeq	r0, r0, r1, lsl #8
    3270:	00065b0d 	andeq	r5, r6, sp, lsl #22
	if (*ptr)
    3274:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
		len = strlen (ptr);
    3278:	000000fb 	strdeq	r0, [r0], -fp
    327c:	08fb0d01 	ldmeq	fp!, {r0, r8, sl, fp}^
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3280:	3c050000 	stccc	0, cr0, [r5], {-0}
    3284:	0000fb03 	andeq	pc, r0, r3, lsl #22
    3288:	400d0200 	andmi	r0, sp, r0, lsl #4
    328c:	0500000f 	streq	r0, [r0, #-15]
    3290:	00fb033d 	rscseq	r0, fp, sp, lsr r3
	len -= quant;
    3294:	0d030000 	stceq	0, cr0, [r3, #-0]
    3298:	00000913 	andeq	r0, r0, r3, lsl r9
    329c:	0c083f05 	stceq	15, cr3, [r8], {5}
	if (len == 0) {
    32a0:	04000001 	streq	r0, [r0], #-1
		ufree (data);
    32a4:	031d0300 	tsteq	sp, #0, 6
		finish;
    32a8:	41050000 	mrsmi	r0, (UNDEF: 5)
    32ac:	00013b03 	andeq	r3, r1, r3, lsl #22
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    32b0:	01c90900 	biceq	r0, r9, r0, lsl #18
    32b4:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    32b8:	05000006 	streq	r0, [r0, #-6]
    32bc:	01d51a43 	bicseq	r1, r5, r3, asr #20
    32c0:	01010000 	mrseq	r0, (UNDEF: 1)
strand (__inserial, address)
    32c4:	0001a00e 	andeq	sl, r1, lr
    32c8:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    32cc:	000001f6 	strdeq	r0, [r0], -r6
    32d0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    32d4:	000001fc 	strdeq	r0, [r0], -ip
	if (__inpline != NULL)
    32d8:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    32dc:	0800000c 	stmdaeq	r0, {r2, r3}
		finish;
    32e0:	000001fc 	strdeq	r0, [r0], -ip
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    32e4:	0003260e 	andeq	r2, r3, lr, lsl #12
    32e8:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    32ec:	000001f6 	strdeq	r0, [r0], -r6
    32f0:	080b0101 	stmdaeq	fp, {r0, r8}
		umwait (IM_INIT);
    32f4:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
		release;
    32f8:	0d000002 	stceq	0, cr0, [r0, #-8]
	savedata (data);
    32fc:	00000cd8 	ldrdeq	r0, [r0], -r8
	len = MAX_LINE_LENGTH;
    3300:	730b9006 	movwvc	r9, #45062	; 0xb006
	io (IM_READ, __cport, READ, ptr, 1);
    3304:	00000000 	andeq	r0, r0, r0
    3308:	00107b0d 	andseq	r7, r0, sp, lsl #22
    330c:	08910600 	ldmeq	r1, {r9, sl}
    3310:	000000d9 	ldrdeq	r0, [r0], -r9
	if (ptr == (char*) data) { // new line
    3314:	01c50d04 	biceq	r0, r5, r4, lsl #26
    3318:	92060000 	andls	r0, r6, #0
		if (*ptr == '\0') { // bin cmd
    331c:	00010710 	andeq	r0, r1, r0, lsl r7
			proceed (IM_BIN);
    3320:	03000600 	movweq	r0, #1536	; 0x600
    3324:	00000ccc 	andeq	r0, r0, ip, asr #25
		if (*ptr < 0x20)
    3328:	16039306 	strne	r9, [r3], -r6, lsl #6
    332c:	0f000002 	svceq	0x00000002
			proceed (IM_READ);
    3330:	00000247 	andeq	r0, r0, r7, asr #4
    3334:	0000025e 	andeq	r0, r0, lr, asr r2
	if (*ptr == '\n' || *ptr == '\r') {
    3338:	3d0e0010 	stccc	0, cr0, [lr, #-64]	; 0xffffffc0
    333c:	06000009 	streq	r0, [r0], -r9
    3340:	02530f99 	subseq	r0, r3, #612	; 0x264
		*ptr = '\0';
    3344:	01010000 	mrseq	r0, (UNDEF: 1)
		__inpline = (char*)data;
    3348:	9107010b 	tstls	r7, fp, lsl #2
		finish;
    334c:	00029609 	andeq	r9, r2, r9, lsl #12
	if (len) {
    3350:	091a0c00 	ldmdbeq	sl, {sl, fp}
		ptr++;
    3354:	93070000 	movwls	r0, #28672	; 0x7000
    3358:	0000fb07 	andeq	pc, r0, r7, lsl #22
		len--;
    335c:	01070100 	mrseq	r0, (UNDEF: 23)
	proceed (IM_READ);
    3360:	05cc0c00 	strbeq	r0, [ip, #3072]	; 0xc00
	io (IM_BIN, __cport, READ, ptr, 1);
    3364:	94070000 	strls	r0, [r7], #-0
    3368:	0000fb03 	andeq	pc, r0, r3, lsl #22
    336c:	00010100 	andeq	r0, r1, r0, lsl #2
    3370:	ab030000 	blge	c3378 <__ccfg+0xa33d0>
    3374:	0700000a 	streq	r0, [r0, -sl]
	len -= 2;
    3378:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
	if (len > *ptr + 1) // 1 for 0x04
    337c:	96080000 	strls	r0, [r8], -r0
    3380:	0f000002 	svceq	0x00000002
		len = *ptr + 1;
    3384:	000002a2 	andeq	r0, r0, r2, lsr #5
    3388:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
	ptr++;
    338c:	a7080010 	smladge	r8, r0, r0, r0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3390:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3394:	000003aa 	andeq	r0, r0, sl, lsr #7
    3398:	b2179c07 	andslt	r9, r7, #1792	; 0x700
    339c:	01000002 	tsteq	r0, r2
    33a0:	00e50f01 	rsceq	r0, r5, r1, lsl #30
    33a4:	02d00000 	sbcseq	r0, r0, #0
	len -= quant;
    33a8:	00100000 	andseq	r0, r0, r0
		__inpline = (char*)data;
    33ac:	0002c508 	andeq	ip, r2, r8, lsl #10
		finish;
    33b0:	060e0e00 	streq	r0, [lr], -r0, lsl #28
	ptr += quant;
    33b4:	06080000 	streq	r0, [r8], -r0
    33b8:	0002d013 	andeq	sp, r2, r3, lsl r0
endstrand
    33bc:	0e010100 	adfeqs	f0, f1, f0
    33c0:	000008dd 	ldrdeq	r0, [r0], -sp
	proceed (IM_BINL);
    33c4:	0c0ec306 	stceq	3, cr12, [lr], {6}
endstrand
    33c8:	01000001 	tsteq	r0, r1
    33cc:	0c721101 	ldfeqe	f1, [r2], #-4
    33d0:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    33d4:	02fe1001 	rscseq	r1, lr, #1
    33d8:	040a0000 	streq	r0, [sl], #-0
    33dc:	00000304 	andeq	r0, r0, r4, lsl #6
		if (res && (d < n))
    33e0:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    33e4:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    33e8:	00000000 	andeq	r0, r0, r0
    33ec:	0002030f 	andeq	r0, r2, pc, lsl #6
			res [d] = (char) c;
    33f0:	00031b00 	andeq	r1, r3, r0, lsl #22
		d++;
    33f4:	08001000 	stmdaeq	r0, {ip}
    33f8:	00000310 	andeq	r0, r0, r0, lsl r3
    33fc:	0009e614 	andeq	lr, r9, r4, lsl r6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3400:	017f0900 	cmneq	pc, r0, lsl #18
    3404:	00031b16 	andeq	r1, r3, r6, lsl fp
    3408:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
				enci (10000);
    340c:	00000396 	muleq	r0, r6, r3
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3410:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    3414:	00000118 	andeq	r0, r0, r8, lsl r1
	d = 0;
    3418:	6e140101 	mufvss	f0, f4, f1
		c = *fm++;
    341c:	09000003 	stmdbeq	r0, {r0, r1}
		if (c == '\\') {
    3420:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
			if ((c = *fm++) == '\0') {
    3424:	01000001 	tsteq	r0, r1
    3428:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
				outc ('\\');
    342c:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
			if ((c = *fm++) == '\0') {
    3430:	16000003 	strne	r0, [r0], -r3
				outc ('\\');
    3434:	00003ca7 	andeq	r3, r0, r7, lsr #25
    3438:	07030709 	streq	r0, [r3, -r9, lsl #14]
			outc (c);
    343c:	000000d9 	ldrdeq	r0, [r0], -r9
    3440:	0fd31600 	svceq	0x00d31600
			if (c == '\0')
    3444:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    3448:	011d0803 	tsteq	sp, r3, lsl #16
			outc (c);
    344c:	00040000 	andeq	r0, r4, r0
				outc (val);
    3450:	000a0911 	andeq	r0, sl, r1, lsl r9
				val = (word) va_arg (ap, aword);
    3454:	03090900 	movweq	r0, #39168	; 0x9900
		if (c == '%') {
    3458:	00034d03 	andeq	r4, r3, r3, lsl #26
    345c:	00291700 	eoreq	r1, r9, r0, lsl #14
			c = *fm++;
    3460:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
			switch (c) {
    3464:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
    3468:	16000003 	strne	r0, [r0], -r3
    346c:	00001f2a 	andeq	r1, r0, sl, lsr #30
    3470:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    3474:	000000d9 	ldrdeq	r0, [r0], -r9
    3478:	0be71600 	bleq	ff9c8c80 <_estack+0xdf9c3c80>
    347c:	15090000 	strne	r0, [r9, #-0]
    3480:	00d90803 	sbcseq	r0, r9, r3, lsl #16
				outc ('%');
    3484:	16020000 	strne	r0, [r2], -r0
    3488:	00004c94 	muleq	r0, r4, ip
				outc (c);
    348c:	0b031609 	bleq	c8cb8 <__ccfg+0xa8d10>
    3490:	000002f1 	strdeq	r0, [r0], -r1
    3494:	475a1604 	ldrbmi	r1, [sl, -r4, lsl #12]
				if (c == '\0')
    3498:	17090000 	strne	r0, [r9, -r0]
				return d;
    349c:	011d0903 	tsteq	sp, r3, lsl #18
}
    34a0:	16080000 	strne	r0, [r8], -r0
    34a4:	0000000f 	andeq	r0, r0, pc
			switch (c) {
    34a8:	0f031809 	svceq	0x00031809
    34ac:	000003e4 	andeq	r0, r0, r4, ror #7
    34b0:	095d160c 	ldmdbeq	sp, {r2, r3, r9, sl, ip}^
				for (i = 12; ; i -= 4) {
    34b4:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    34b8:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
						[ (val >> i) & 0xf ]);
    34bc:	002c0000 	eoreq	r0, ip, r0
    34c0:	0003740f 	andeq	r7, r3, pc, lsl #8
    34c4:	0003f400 	andeq	pc, r3, r0, lsl #8
					outc (__pi_hex_enc_table
    34c8:	00941800 	addseq	r1, r4, r0, lsl #16
    34cc:	00030000 	andeq	r0, r3, r0
					if (i == 0)
    34d0:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
    34d4:	dc110000 	ldcle	0, cr0, [r1], {-0}
				for (i = 12; ; i -= 4) {
    34d8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
				val = (word) va_arg (ap, aword);
    34dc:	811b031c 	tsthi	fp, ip, lsl r3
				if (c == 'd' && (val & 0x8000) != 0) {
    34e0:	14000003 	strne	r0, [r0], #-3
				val = (word) va_arg (ap, aword);
    34e4:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
				if (c == 'd' && (val & 0x8000) != 0) {
    34e8:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    34ec:	00000416 	andeq	r0, r0, r6, lsl r4
					outc ('-');
    34f0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    34f4:	000003fa 	strdeq	r0, [r0], -sl
					val = (~val) + 1;
    34f8:	00070f0e 	andeq	r0, r7, lr, lsl #30
    34fc:	131d0a00 	tstne	sp, #0, 20
				for (i = 12; ; i -= 4) {
    3500:	000000d9 	ldrdeq	r0, [r0], -r9
				enci (10000);
    3504:	ee0e0101 	adfe	f0, f6, f1
    3508:	0a000002 	beq	3518 <__pi_vfparse+0x118>
    350c:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
    3510:	01010000 	mrseq	r0, (UNDEF: 1)
    3514:	000c690e 	andeq	r6, ip, lr, lsl #18
    3518:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    351c:	000000ea 	andeq	r0, r0, sl, ror #1
    3520:	870e0101 	strhi	r0, [lr, -r1, lsl #2]
    3524:	0a00000c 	beq	355c <__pi_vfparse+0x15c>
    3528:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
    352c:	01010000 	mrseq	r0, (UNDEF: 1)
    3530:	0014a903 	andseq	sl, r4, r3, lsl #18
    3534:	0f440a00 	svceq	0x00440a00
    3538:	00000460 	andeq	r0, r0, r0, ror #8
    353c:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
    3540:	01190000 	tsteq	r9, r0
    3544:	0000008d 	andeq	r0, r0, sp, lsl #1
    3548:	00000480 	andeq	r0, r0, r0, lsl #9
				if (c == 'd' || c == 'u') {
    354c:	00008d13 	andeq	r8, r0, r3, lsl sp
    3550:	01f61300 	mvnseq	r1, r0, lsl #6
					if (c == 'd' &&
    3554:	8d130000 	ldchi	0, cr0, [r3, #-0]
					val = va_arg (ap, lword);
    3558:	00000000 	andeq	r0, r0, r0
					fm++;
    355c:	00033e1a 	andeq	r3, r3, sl, lsl lr
					if (c == 'd' &&
    3560:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    3564:	06b40305 	ldrteq	r0, [r4], r5, lsl #6
						outc ('-');
    3568:	4d1b2000 	ldcmi	0, cr2, [fp, #-0]
    356c:	01000016 	tsteq	r0, r6, lsl r0
						val = (~val) + 1;
    3570:	010c0710 	tsteq	ip, r0, lsl r7
				enci (10000);
    3574:	05010000 	streq	r0, [r1, #-0]
					enci (1000000000UL);
    3578:	00000403 	andeq	r0, r0, r3, lsl #8
    357c:	04461a20 	strbeq	r1, [r6], #-2592	; 0xfffff5e0
    3580:	1a010000 	bne	43588 <__ccfg+0x235e0>
    3584:	5403050d 	strpl	r0, [r3], #-1293	; 0xfffffaf3
    3588:	0f200005 	svceq	0x00200005
    358c:	00000454 	andeq	r0, r0, r4, asr r4
    3590:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    3594:	00009418 	andeq	r9, r0, r8, lsl r4
    3598:	1c000000 	stcne	0, cr0, [r0], {-0}
    359c:	000014e1 	andeq	r1, r0, r1, ror #9
    35a0:	af141e01 	svcge	0x00141e01
    35a4:	05000004 	streq	r0, [r0, #-4]
    35a8:	00055803 	andeq	r5, r5, r3, lsl #16
    35ac:	01da1a20 	bicseq	r1, sl, r0, lsr #20
    35b0:	22010000 	andcs	r0, r1, #0
    35b4:	bc030513 	cfstr32lt	mvfx0, [r3], {19}
    35b8:	1a200006 	bne	8035d8 <__ccfg+0x7e3630>
				} else if (c == 'x') {
    35bc:	00000407 	andeq	r0, r0, r7, lsl #8
					for (i = 28; ; i -= 4) {
    35c0:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
					val = va_arg (ap, lword);
    35c4:	0006d803 	andeq	sp, r6, r3, lsl #16
							[ (val >> i) & 0xf ]);
    35c8:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
    35cc:	30010000 	andcc	r0, r1, r0
						outc (__pi_hex_enc_table
    35d0:	b8030507 	stmdalt	r3, {r0, r1, r2, r8, sl}
    35d4:	1a200006 	bne	8035f4 <__ccfg+0x7e364c>
    35d8:	0000042a 	andeq	r0, r0, sl, lsr #8
						if (i == 0)
    35dc:	050f3101 	streq	r3, [pc, #-257]	; 34e3 <__pi_vfparse+0xe3>
    35e0:	0006ba03 	andeq	fp, r6, r3, lsl #20
					for (i = 28; ; i -= 4) {
    35e4:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
					outc ('%');
    35e8:	31010000 	mrscc	r0, (UNDEF: 1)
    35ec:	c4030519 	strgt	r0, [r3], #-1305	; 0xfffffae7
    35f0:	0f200006 	svceq	0x00200006
					outc ('l');
    35f4:	00000129 	andeq	r0, r0, r9, lsr #2
    35f8:	00000527 	andeq	r0, r0, r7, lsr #10
				val = (word) va_arg (ap, aword);
    35fc:	00009418 	andeq	r9, r0, r8, lsl r4
				outc (val);
    3600:	1b000300 	blne	4208 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x10>
    3604:	000013c7 	andeq	r1, r0, r7, asr #7
				while (*st != '\0') {
    3608:	170a3601 	strne	r3, [sl, -r1, lsl #12]
    360c:	01000005 	tsteq	r0, r5
    3610:	06c80305 	strbeq	r0, [r8], r5, lsl #6
    3614:	201a2000 	andscs	r2, sl, r0
					outc (*st);
    3618:	01000003 	tsteq	r0, r3
    361c:	03050c3f 	movweq	r0, #23615	; 0x5c3f
					st++;
    3620:	000052d1 	ldrdeq	r5, [r0], -r1
		c = *fm++;
    3624:	00032f1a 	andeq	r2, r3, sl, lsl pc
    3628:	0d450100 	stfeqe	f0, [r5, #-0]
    362c:	00000305 	andeq	r0, r0, r5, lsl #6
char *vform (char *res, const char *fm, va_list aq) {
    3630:	020b0000 	andeq	r0, fp, #0
    3634:	7a094901 	bvc	255a40 <__ccfg+0x235a98>
	if (res != NULL) {
    3638:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
		__pi_vfparse (res, MAX_WORD, fm, aq);
    363c:	000014d5 	ldrdeq	r1, [r0], -r5
    3640:	fb074a01 	blx	1d5e4e <__ccfg+0x1b5ea6>
    3644:	00000000 	andeq	r0, r0, r0
}
    3648:	00168c0d 	andseq	r8, r6, sp, lsl #24
    364c:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
	fml = strlen (fm) + 17;
    3650:	000000fb 	strdeq	r0, [r0], -fp
    3654:	9b030001 	blls	c3660 <__ccfg+0xa36b8>
    3658:	01000015 	tsteq	r0, r5, lsl r0
	if ((res = (char*) umalloc (fml)) == NULL)
    365c:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
    3660:	7a0f0000 	bvc	3c3668 <__ccfg+0x3a36c0>
    3664:	96000005 	strls	r0, [r0], -r5
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3668:	18000005 	stmdane	r0, {r0, r2}
    366c:	00000094 	muleq	r0, r4, r0
    3670:	fb1c0000 	blx	70367a <__ccfg+0x6e36d2>
    3674:	01000015 	tsteq	r0, r5, lsl r0
		ufree (res);
    3678:	0586114e 	streq	r1, [r6, #334]	; 0x14e
		goto Again;
    367c:	03050000 	movweq	r0, #20480	; 0x5000
	if (buf == NULL || fmt == NULL)
    3680:	20000560 	andcs	r0, r0, r0, ror #10
int vscan (const char *buf, const char *fmt, va_list ap) {
    3684:	0005b80f 	andeq	fp, r5, pc, lsl #16
	if (buf == NULL || fmt == NULL)
    3688:	0005b800 	andeq	fp, r5, r0, lsl #16
    368c:	00941800 	addseq	r1, r4, r0, lsl #16
    3690:	00000000 	andeq	r0, r0, r0
		    	    case 'u': scanu (lword); break;
    3694:	011d040a 	tsteq	sp, sl, lsl #8
			while (isspace (*buf)) buf++;
    3698:	f61d0000 			; <UNDEFINED> instruction: 0xf61d0000
    369c:	01000014 	tsteq	r0, r4, lsl r0
	while (*fmt != '\0') {
    36a0:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
		if (*fmt++ != '%')
    36a4:	05000005 	streq	r0, [r0, #-5]
		switch (*fmt++) {
    36a8:	00056803 	andeq	r6, r5, r3, lsl #16
    36ac:	011d0f20 	tsteq	sp, r0, lsr #30
    36b0:	05e10000 	strbeq	r0, [r1, #0]!
    36b4:	94180000 	ldrls	r0, [r8], #-0
    36b8:	00000000 	andeq	r0, r0, r0
    36bc:	15561d00 	ldrbne	r1, [r6, #-3328]	; 0xfffff300
    36c0:	c2010000 	andgt	r0, r1, #0
}
    36c4:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
		switch (*fmt++) {
    36c8:	03050000 	movweq	r0, #20480	; 0x5000
    36cc:	20000564 	andcs	r0, r0, r4, ror #10
    36d0:	0015a41d 	andseq	sl, r5, sp, lsl r4
    36d4:	02c20100 	sbceq	r0, r2, #0, 2
			while (isspace (*buf)) buf++;
    36d8:	0005d126 	andeq	sp, r5, r6, lsr #2
    36dc:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    36e0:	1e200005 	cdpne	0, 2, cr0, cr0, cr5, {0}
    36e4:	00162701 	andseq	r2, r6, r1, lsl #14
    36e8:	052f0100 	streq	r0, [pc, #-256]!	; 35f0 <__pi_vfparse+0x1f0>
    36ec:	010c0107 	tsteq	ip, r7, lsl #2
			if (*buf == '\0')
    36f0:	1f3c0000 	svcne	0x003c0000
			if (*buf != ',') {
    36f4:	1f600000 	svcne	0x00600000
			sap = va_arg (ap, char*);
    36f8:	9c010000 	stcls	0, cr0, [r1], {-0}
			nc++;
    36fc:	158a011f 	strne	r0, [sl, #287]	; 0x11f
			if (*buf != ',') {
    3700:	82010000 	andhi	r0, r1, #0
				while (!isspace (*buf) && *buf != ',' &&
    3704:	00010604 	andeq	r0, r1, r4, lsl #12
    3708:	3c00001e 	stccc	0, cr0, [r0], {30}
    370c:	0100001f 	tsteq	r0, pc, lsl r0
    3710:	00070e9c 	muleq	r7, ip, lr
    3714:	15bc2000 	ldrne	r2, [ip, #0]!
    3718:	82010000 	andhi	r0, r1, #0
    371c:	070e1804 	streq	r1, [lr, -r4, lsl #16]
			while (isspace (*buf)) buf++;
    3720:	08f10000 	ldmeq	r1!, {}^	; <UNPREDICTABLE>
    3724:	22210000 	eorcs	r0, r1, #0
    3728:	006c6176 	rsbeq	r6, ip, r6, ror r1
    372c:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    3730:	0000010c 	andeq	r0, r0, ip, lsl #2
			if (*buf == ',') buf++;
    3734:	00000931 	andeq	r0, r0, r1, lsr r9
    3738:	00706123 	rsbseq	r6, r0, r3, lsr #2
			*sap = '\0';
    373c:	0a048801 	beq	125748 <__ccfg+0x1057a0>
			break;
    3740:	000000c1 	andeq	r0, r0, r1, asr #1
		    case 'd': scani (word); break;
    3744:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    3748:	01006362 	tsteq	r0, r2, ror #6
    374c:	ef070489 	svc	0x00070489
    3750:	70000000 	andvc	r0, r0, r0
    3754:	22000009 	andcs	r0, r0, #9
    3758:	8a010076 	bhi	43938 <__ccfg+0x23990>
    375c:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    3760:	09a40000 	stmibeq	r4!, {}	; <UNPREDICTABLE>
    3764:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    3768:	8b010073 	blhi	4393c <__ccfg+0x23994>
    376c:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    3770:	9c250000 	stcls	0, cr0, [r5], #-0
    3774:	01000016 	tsteq	r0, r6, lsl r0
    3778:	cc0104b0 	cfstrsgt	mvf0, [r1], {176}	; 0xb0
    377c:	2600001e 			; <UNDEFINED> instruction: 0x2600001e
    3780:	00001e8c 	andeq	r1, r0, ip, lsl #29
    3784:	00001ea8 	andeq	r1, r0, r8, lsr #29
    3788:	000006c0 	andeq	r0, r0, r0, asr #13
    378c:	01006922 	tsteq	r0, r2, lsr #18
    3790:	ef0a049f 	svc	0x000a049f
    3794:	cd000000 	stcgt	0, cr0, [r0, #-0]
    3798:	00000009 	andeq	r0, r0, r9
    379c:	00078827 	andeq	r8, r7, r7, lsr #16
    37a0:	0006d900 	andeq	sp, r6, r0, lsl #18
    37a4:	00642200 	rsbeq	r2, r4, r0, lsl #4
    37a8:	0b04a901 	bleq	12dbb4 <__ccfg+0x10dc0c>
    37ac:	0000010c 	andeq	r0, r0, ip, lsl #2
    37b0:	000009e0 	andeq	r0, r0, r0, ror #19
		    case 'u': scanu (word); break;
    37b4:	1f182600 	svcne	0x00182600
    37b8:	1f260000 	svcne	0x00260000
    37bc:	06f60000 	ldrbteq	r0, [r6], r0
    37c0:	73220000 			; <UNDEFINED> instruction: 0x73220000
    37c4:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    37c8:	0001f60b 	andeq	pc, r1, fp, lsl #12
    37cc:	000a0900 	andeq	r0, sl, r0, lsl #18
    37d0:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    37d4:	2e000010 	mcrcs	0, 0, r0, cr0, cr0, {0}
    37d8:	b800001e 	stmdalt	r0, {r1, r2, r3, r4}
    37dc:	01000007 	tsteq	r0, r7
    37e0:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
    37e4:	000010d4 	ldrdeq	r1, [r0], -r4
    37e8:	040a0000 	streq	r0, [sl], #-0
    37ec:	00000203 	andeq	r0, r0, r3, lsl #4
    37f0:	0016712a 	andseq	r7, r6, sl, lsr #2
    37f4:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    37f8:	18e4010d 	stmiane	r4!, {r0, r2, r3, r8}^
		    case 'x': scanx (word); break;
    37fc:	18fc0000 	ldmne	ip!, {}^	; <UNPREDICTABLE>
    3800:	9c010000 	stcls	0, cr0, [r1], {-0}
    3804:	00000753 	andeq	r0, r0, r3, asr r7
    3808:	0100632b 	tsteq	r0, fp, lsr #6
    380c:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
    3810:	1c000000 	stcne	0, cr0, [r0], {-0}
    3814:	2800000a 	stmdacs	r0, {r1, r3}
    3818:	000010c1 	andeq	r1, r0, r1, asr #1
    381c:	000018e4 	andeq	r1, r0, r4, ror #17
    3820:	00000730 	andeq	r0, r0, r0, lsr r7
    3824:	02044901 	andeq	r4, r4, #16384	; 0x4000
    3828:	0010d429 	andseq	sp, r0, r9, lsr #8
    382c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3830:	00153b01 	andseq	r3, r5, r1, lsl #22
    3834:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    3838:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3844:	9c010000 	stcls	0, cr0, [r1], {-0}
    3848:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    384c:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
    3850:	1c042801 	stcne	8, cr2, [r4], {1}
    3854:	00000129 	andeq	r0, r0, r9, lsr #2
    3858:	00000a2f 	andeq	r0, r0, pc, lsr #20
    385c:	0016392d 	andseq	r3, r6, sp, lsr #18
    3860:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    3864:	0005b809 	andeq	fp, r5, r9, lsl #16
    3868:	000a4d00 	andeq	r4, sl, r0, lsl #26
    386c:	616d2200 	cmnvs	sp, r0, lsl #4
    3870:	32010078 	andcc	r0, r1, #120	; 0x78
			switch (*fmt++) {
    3874:	011d0804 	tsteq	sp, r4, lsl #16
    3878:	0a6b0000 	beq	1ac3880 <__ccfg+0x1aa38d8>
    387c:	512d0000 			; <UNDEFINED> instruction: 0x512d0000
    3880:	01000015 	tsteq	r0, r5, lsl r0
    3884:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
    3888:	89000001 	stmdbhi	r0, {r0}
		    	    case 'd': scani (lword); break;
    388c:	0000000a 	andeq	r0, r0, sl
    3890:	162c012c 	strtne	r0, [ip], -ip, lsr #2
    3894:	15010000 	strne	r0, [r1, #-0]
    3898:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    38a4:	01000000 	mrseq	r0, (UNDEF: 0)
    38a8:	0007e39c 	muleq	r7, ip, r3
    38ac:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    38b0:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    38b4:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    38b8:	0ab20000 	beq	fec838c0 <_estack+0xdec7e8c0>
    38bc:	1f000000 	svcne	0x00000000
    38c0:	00161a01 	andseq	r1, r6, r1, lsl #20
    38c4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    38c8:	1de80106 	stfnee	f0, [r8, #24]!
    38cc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    38d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    38d4:	0000080e 	andeq	r0, r0, lr, lsl #16
    38d8:	00007920 	andeq	r7, r0, r0, lsr #18
    38dc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    38e0:	0000d919 	andeq	sp, r0, r9, lsl r9
    38e4:	000ac500 	andeq	ip, sl, r0, lsl #10
		    	    case 'x': scanx (lword); break;
    38e8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    38ec:	000014c8 	andeq	r1, r0, r8, asr #9
    38f0:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
    38f4:	0005b801 	andeq	fp, r5, r1, lsl #16
    38f8:	001d0c00 	andseq	r0, sp, r0, lsl #24
    38fc:	001db400 	andseq	fp, sp, r0, lsl #8
    3900:	809c0100 	addshi	r0, ip, r0, lsl #2
    3904:	20000008 	andcs	r0, r0, r8
    3908:	00001da7 	andeq	r1, r0, r7, lsr #27
    390c:	1a03a301 	bne	ec518 <__ccfg+0xcc570>
    3910:	000000d9 	ldrdeq	r0, [r0], -r9
    3914:	00000ad8 	ldrdeq	r0, [r0], -r8
    3918:	0016392d 	andseq	r3, r6, sp, lsr #18
    391c:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3920:	0005b809 	andeq	fp, r5, r9, lsl #16
    3924:	000aeb00 	andeq	lr, sl, r0, lsl #22
    3928:	63632200 	cmnvs	r3, #0, 4
    392c:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3930:	0005b811 	andeq	fp, r5, r1, lsl r8
    3934:	000b1f00 	andeq	r1, fp, r0, lsl #30
    3938:	15ab2d00 	strne	r2, [fp, #3328]!	; 0xd00
    393c:	ab010000 	blge	43944 <__ccfg+0x2399c>
    3940:	011d1503 	tsteq	sp, r3, lsl #10
    3944:	0b480000 	bleq	120394c <__ccfg+0x11e39a4>
    3948:	a62d0000 	strtge	r0, [sp], -r0
    394c:	0100001d 	tsteq	r0, sp, lsl r0
    3950:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
    3954:	5b000001 	blpl	3960 <vscan+0x2e0>
		    	    case 'd': scani (lword); break;
    3958:	0000000b 	andeq	r0, r0, fp
    395c:	1692012e 	ldrne	r0, [r2], lr, lsr #2
    3960:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3964:	01010603 	tsteq	r1, r3, lsl #12
    3968:	0000089d 	muleq	r0, sp, r8
    396c:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    3970:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
		    	    case 'u': scanu (lword); break;
    3974:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3978:	14db2a00 	ldrbne	r2, [fp], #2560	; 0xa00
    397c:	4a010000 	bmi	43984 <__ccfg+0x239dc>
    3980:	64010d03 	strvs	r0, [r1], #-3331	; 0xfffff2fd
    3984:	e4000018 	str	r0, [r0], #-24	; 0xffffffe8
    3988:	01000018 	tsteq	r0, r8, lsl r0
    398c:	0008e79c 	muleq	r8, ip, r7
    3990:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    3994:	034a0100 	movteq	r0, #41216	; 0xa100
    3998:	0005b81b 	andeq	fp, r5, fp, lsl r8
    399c:	000b8500 	andeq	r8, fp, r0, lsl #10
    39a0:	16392d00 	ldrtne	r2, [r9], -r0, lsl #26
    39a4:	57010000 	strpl	r0, [r1, -r0]
    39a8:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    39ac:	0ba30000 	bleq	fe8c39b4 <_estack+0xde8be9b4>
    39b0:	63220000 			; <UNDEFINED> instruction: 0x63220000
    39b4:	57010063 	strpl	r0, [r1, -r3, rrx]
    39b8:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
		    	    case 'x': scanx (lword); break;
    39bc:	0be40000 	bleq	ff9039c4 <_estack+0xdf8fe9c4>
    39c0:	30000000 	andcc	r0, r0, r0
			if ((c = *buf++) == '\0')
    39c4:	00151101 	andseq	r1, r5, r1, lsl #2
    39c8:	02f00100 	rscseq	r0, r0, #0, 2
			sap = va_arg (ap, char*);
    39cc:	001c2406 	andseq	r2, ip, r6, lsl #8
			nc++;
    39d0:	001c7400 	andseq	r7, ip, r0, lsl #8
			break;
    39d4:	119c0100 	orrsne	r0, ip, r0, lsl #2
			while (isspace (*buf)) buf++;
    39d8:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    39dc:	00001565 	andeq	r1, r0, r5, ror #10
    39e0:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
						*sap++ = *buf++;
    39e4:	0000011d 	andeq	r0, r0, sp, lsl r1
    39e8:	00000c18 	andeq	r0, r0, r8, lsl ip
			while (isspace (*buf)) buf++;
    39ec:	69013100 	stmdbvs	r1, {r8, ip, sp}
    39f0:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
    39f4:	ef010602 	svc	0x00010602
		return 0;
    39f8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    39fc:	2400001b 	strcs	r0, [r0], #-27	; 0xffffffe5
		    case 'x': scanx (word); break;
    3a00:	0100001c 	tsteq	r0, ip, lsl r0
    3a04:	0009949c 	muleq	r9, ip, r4
		    	    case 'x': scanx (lword); break;
    3a08:	15b12000 	ldrne	r2, [r1, #0]!
    3a0c:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3a10:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    3a14:	0c360000 	ldceq	0, cr0, [r6], #-0
    3a18:	642b0000 	strtvs	r0, [fp], #-0
    3a1c:	01007665 	tsteq	r0, r5, ror #12
    3a20:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    3a24:	54000000 	strpl	r0, [r0], #-0
    3a28:	2000000c 	andcs	r0, r0, ip
    3a2c:	00001183 	andeq	r1, r0, r3, lsl #3
    3a30:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    3a34:	000000d9 	ldrdeq	r0, [r0], -r9
    3a38:	00000c72 	andeq	r0, r0, r2, ror ip
    3a3c:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
    3a40:	02790100 	rsbseq	r0, r9, #0, 2
    3a44:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
    3a48:	000c9000 	andeq	r9, ip, r0
    3a4c:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
    3a50:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
    3a54:	00d94002 	sbcseq	r4, r9, r2
    3a58:	0cae0000 	stceq	0, cr0, [lr]
    3a5c:	72220000 	eorvc	r0, r2, #0
    3a60:	01007465 	tsteq	r0, r5, ror #8
    3a64:	ef07027b 	svc	0x0007027b
    3a68:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    3a6c:	0000000c 	andeq	r0, r0, ip
    3a70:	1578011f 	ldrbne	r0, [r8, #-287]!	; 0xfffffee1
    3a74:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3a78:	64010602 	strvs	r0, [r1], #-1538	; 0xfffff9fe
    3a7c:	8800001b 	stmdahi	r0, {r0, r1, r3, r4}
    3a80:	0100001b 	tsteq	r0, fp, lsl r0
    3a84:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    3a88:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
    3a8c:	02690100 	rsbeq	r0, r9, #0, 2
    3a90:	0004541e 	andeq	r5, r4, lr, lsl r4
    3a94:	000d0200 	andeq	r0, sp, r0, lsl #4
    3a98:	6f6c2b00 	svcvs	0x006c2b00
    3a9c:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    3aa0:	008d2602 	addeq	r2, sp, r2, lsl #12
    3aa4:	0d2b0000 	stceq	0, cr0, [fp, #-0]
    3aa8:	1f000000 	svcne	0x00000000
    3aac:	0016a301 	andseq	sl, r6, r1, lsl #6
    3ab0:	025f0100 	subseq	r0, pc, #0, 2
    3ab4:	1b560106 	blne	1583ed4 <__ccfg+0x1563f2c>
    3ab8:	1b640000 	blne	1903ac0 <__ccfg+0x18e3b18>
    3abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ac0:	00000a16 	andeq	r0, r0, r6, lsl sl
    3ac4:	0015b720 	andseq	fp, r5, r0, lsr #14
    3ac8:	025f0100 	subseq	r0, pc, #0, 2
    3acc:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3ad0:	000d5400 	andeq	r5, sp, r0, lsl #8
    3ad4:	00633200 	rsbeq	r3, r3, r0, lsl #4
    3ad8:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    3adc:	000001fc 	strdeq	r0, [r0], -ip
    3ae0:	6e2b5101 	sufvse	f5, f3, f1
    3ae4:	025f0100 	subseq	r0, pc, #0, 2
    3ae8:	00008d2b 	andeq	r8, r0, fp, lsr #26
    3aec:	000d7200 	andeq	r7, sp, r0, lsl #4
    3af0:	011f0000 	tsteq	pc, r0
    3af4:	00001665 	andeq	r1, r0, r5, ror #12
    3af8:	06025901 	streq	r5, [r2], -r1, lsl #18
    3afc:	001b4201 	andseq	r4, fp, r1, lsl #4
    3b00:	001b5600 	andseq	r5, fp, r0, lsl #12
    3b04:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    3b08:	2000000a 	andcs	r0, r0, sl
    3b0c:	000015b7 			; <UNDEFINED> instruction: 0x000015b7
    3b10:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    3b14:	000001f6 	strdeq	r0, [r0], -r6
    3b18:	00000d85 	andeq	r0, r0, r5, lsl #27
    3b1c:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    3b20:	02590100 	subseq	r0, r9, #0, 2
    3b24:	00070e2b 	andeq	r0, r7, fp, lsr #28
    3b28:	000d9800 	andeq	r9, sp, r0, lsl #16
    3b2c:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    3b30:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    3b34:	0000008d 	andeq	r0, r0, sp, lsl #1
    3b38:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    3b3c:	dc011f00 	stcle	15, cr1, [r1], {-0}
    3b40:	01000016 	tsteq	r0, r6, lsl r0
    3b44:	01060254 	tsteq	r6, r4, asr r2
	...
    3b50:	0aa69c01 	beq	fe9aab5c <_estack+0xde9a5b5c>
    3b54:	642b0000 	strtvs	r0, [fp], #-0
    3b58:	02540100 	subseq	r0, r4, #0, 2
    3b5c:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    3b60:	000dc900 	andeq	ip, sp, r0, lsl #18
    3b64:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3b68:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    3b6c:	0000070e 	andeq	r0, r0, lr, lsl #14
    3b70:	00000ddc 	ldrdeq	r0, [r0], -ip
    3b74:	01006e32 	tsteq	r0, r2, lsr lr
    3b78:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    3b7c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b80:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    3b84:	0000158f 	andeq	r1, r0, pc, lsl #11
    3b88:	06024e01 	streq	r4, [r2], -r1, lsl #28
    3b8c:	00000001 	andeq	r0, r0, r1
    3b90:	00000000 	andeq	r0, r0, r0
    3b94:	de9c0100 	fmllee	f0, f4, f0
    3b98:	2b00000a 	blcs	3bc8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x18>
    3b9c:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    3ba0:	01f61902 	mvnseq	r1, r2, lsl #18
    3ba4:	0def0000 	stcleq	0, cr0, [pc]	; 3bac <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>
    3ba8:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3bac:	024e0100 	subeq	r0, lr, #0, 2
    3bb0:	00070e28 	andeq	r0, r7, r8, lsr #28
    3bb4:	000e0d00 	andeq	r0, lr, r0, lsl #26
    3bb8:	011f0000 	tsteq	pc, r0
    3bbc:	000016b7 			; <UNDEFINED> instruction: 0x000016b7
    3bc0:	06024701 	streq	r4, [r2], -r1, lsl #14
    3bc4:	001b2601 	andseq	r2, fp, r1, lsl #12
    3bc8:	001b4200 	andseq	r4, fp, r0, lsl #4
    3bcc:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    3bd0:	2b00000b 	blcs	3c04 <NOROM_RFCDoorbellSendTo+0x20>
    3bd4:	47010064 	strmi	r0, [r1, -r4, rrx]
    3bd8:	01f61a02 	mvnseq	r1, r2, lsl #20
    3bdc:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    3be0:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3be4:	02470100 	subeq	r0, r7, #0, 2
    3be8:	00070e29 	andeq	r0, r7, r9, lsr #28
    3bec:	000e3e00 	andeq	r3, lr, r0, lsl #28
    3bf0:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    3bf4:	30024701 	andcc	r4, r2, r1, lsl #14
    3bf8:	0000008d 	andeq	r0, r0, sp, lsl #1
    3bfc:	00000e51 	andeq	r0, r0, r1, asr lr
    3c00:	bc011f00 	stclt	15, cr1, [r1], {-0}
    3c04:	01000014 	tsteq	r0, r4, lsl r0
    3c08:	01060242 	tsteq	r6, r2, asr #4
    3c0c:	00001b16 	andeq	r1, r0, r6, lsl fp
    3c10:	00001b26 	andeq	r1, r0, r6, lsr #22
    3c14:	0b5d9c01 	bleq	176ac20 <__ccfg+0x174ac78>
    3c18:	642b0000 	strtvs	r0, [fp], #-0
    3c1c:	02420100 	subeq	r0, r2, #0, 2
    3c20:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3c24:	000e6400 	andeq	r6, lr, r0, lsl #8
    3c28:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3c2c:	28024201 	stmdacs	r2, {r0, r9, lr}
    3c30:	0000070e 	andeq	r0, r0, lr, lsl #14
    3c34:	00000e77 	andeq	r0, r0, r7, ror lr
    3c38:	2f012c00 	svccs	0x00012c00
    3c3c:	01000015 	tsteq	r0, r5, lsl r0
    3c40:	01050239 	tsteq	r5, r9, lsr r2
    3c44:	0000008d 	andeq	r0, r0, sp, lsl #1
    3c48:	00001b08 	andeq	r1, r0, r8, lsl #22
    3c4c:	00001b16 	andeq	r1, r0, r6, lsl fp
    3c50:	0b999c01 	bleq	fe66ac5c <_estack+0xde665c5c>
    3c54:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3c58:	02390100 	eorseq	r0, r9, #0, 2
    3c5c:	00070e1e 	andeq	r0, r7, lr, lsl lr
    3c60:	000e9500 	andeq	r9, lr, r0, lsl #10
    3c64:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3c68:	06023b01 	streq	r3, [r2], -r1, lsl #22
    3c6c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3c70:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    3c74:	48012c00 	stmdami	r1, {sl, fp, sp}
    3c78:	01000015 	tsteq	r0, r5, lsl r0
    3c7c:	0106022d 	tsteq	r6, sp, lsr #4
    3c80:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3c8c:	0be69c01 	bleq	ff9aac98 <_estack+0xdf9a5c98>
    3c90:	662b0000 	strtvs	r0, [fp], -r0
    3c94:	01006e75 	tsteq	r0, r5, ror lr
    3c98:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
    3c9c:	c6000002 	strgt	r0, [r0], -r2
    3ca0:	2200000e 	andcs	r0, r0, #14
    3ca4:	2f010069 	svccs	0x00010069
    3ca8:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3cac:	0ee40000 	cdpeq	0, 14, cr0, cr4, cr0, {0}
    3cb0:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3cb4:	02300100 	eorseq	r0, r0, #0, 2
    3cb8:	0000d907 	andeq	sp, r0, r7, lsl #18
    3cbc:	000f0200 	andeq	r0, pc, r0, lsl #4
    3cc0:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3cc4:	00001549 	andeq	r1, r0, r9, asr #10
    3cc8:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    3ccc:	00011d01 	andeq	r1, r1, r1, lsl #26
    3cd0:	001ae400 	andseq	lr, sl, r0, lsl #8
    3cd4:	001b0800 	andseq	r0, fp, r0, lsl #16
    3cd8:	229c0100 	addscs	r0, ip, #0, 2
    3cdc:	2b00000c 	blcs	3d14 <NOROM_RFCRfTrimRead+0xbc>
    3ce0:	006e7566 	rsbeq	r7, lr, r6, ror #10
    3ce4:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
    3ce8:	000002f1 	strdeq	r0, [r0], -r1
    3cec:	00000f15 	andeq	r0, r0, r5, lsl pc
    3cf0:	01006923 	tsteq	r0, r3, lsr #18
    3cf4:	160e0221 	strne	r0, [lr], -r1, lsr #4
    3cf8:	01000004 	tsteq	r0, r4
    3cfc:	012c0050 	qsubeq	r0, r0, ip
    3d00:	00001657 	andeq	r1, r0, r7, asr r6
    3d04:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    3d08:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
    3d14:	609c0100 	addsvs	r0, ip, r0, lsl #2
    3d18:	2b00000c 	blcs	3d50 <NOROM_RFCRfTrimRead+0xf8>
    3d1c:	00646970 	rsbeq	r6, r4, r0, ror r9
    3d20:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    3d24:	0000011d 	andeq	r0, r0, sp, lsl r1
    3d28:	00000f3e 	andeq	r0, r0, lr, lsr pc
    3d2c:	01006922 	tsteq	r0, r2, lsr #18
    3d30:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    3d34:	5c000004 	stcpl	0, cr0, [r0], {4}
    3d38:	0000000f 	andeq	r0, r0, pc
    3d3c:	16af011f 	ssatne	r0, #16, pc, lsl #2	; <UNPREDICTABLE>
    3d40:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3d44:	00010601 	andeq	r0, r1, r1, lsl #12
    3d48:	00000000 	andeq	r0, r0, r0
    3d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    3d50:	000cc99c 	muleq	ip, ip, r9
    3d54:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3d58:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    3d5c:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    3d60:	0f7a0000 	svceq	0x007a0000
    3d64:	72220000 	eorvc	r0, r2, #0
    3d68:	01006c65 	tsteq	r0, r5, ror #24
    3d6c:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
    3d70:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3d74:	2200000f 	andcs	r0, r0, #15
    3d78:	fa010069 	blx	43f24 <__ccfg+0x23f7c>
    3d7c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3d80:	0fab0000 	svceq	0x00ab0000
    3d84:	6a220000 	bvs	883d8c <__ccfg+0x863de4>
    3d88:	01fa0100 	mvnseq	r0, r0, lsl #2
    3d8c:	00041612 	andeq	r1, r4, r2, lsl r6
    3d90:	000fdf00 	andeq	sp, pc, r0, lsl #30
    3d94:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    3d98:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    3d9c:	00000416 	andeq	r0, r0, r6, lsl r4
    3da0:	00000ffd 	strdeq	r0, [r0], -sp
    3da4:	f1011f00 			; <UNDEFINED> instruction: 0xf1011f00
    3da8:	01000014 	tsteq	r0, r4, lsl r0
    3dac:	010601d9 	ldrdeq	r0, [r6, -r9]
    3db0:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
    3db4:	00001d0c 	andeq	r1, r0, ip, lsl #26
    3db8:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
    3dbc:	702b0000 	eorvc	r0, fp, r0
    3dc0:	01006469 	tsteq	r0, r9, ror #8
    3dc4:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
    3dc8:	1b000001 	blne	3dd4 <NOROM_RFCRTrim+0x2c>
    3dcc:	22000010 	andcs	r0, r0, #16
    3dd0:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    3dd4:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3dd8:	104f0000 	subne	r0, pc, r0
    3ddc:	6a240000 	bvs	903de4 <__ccfg+0x8e3e3c>
    3de0:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    3de4:	00041612 	andeq	r1, r4, r2, lsl r6
    3de8:	b52a0000 	strlt	r0, [sl, #-0]!
    3dec:	01000014 	tsteq	r0, r4, lsl r0
    3df0:	010d01c4 	smlabteq	sp, r4, r1, r0
    3df4:	00001828 	andeq	r1, r0, r8, lsr #16
    3df8:	00001864 	andeq	r1, r0, r4, ror #16
    3dfc:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
    3e00:	70320000 	eorsvc	r0, r2, r0
    3e04:	01006469 	tsteq	r0, r9, ror #8
    3e08:	162101c4 	strtne	r0, [r1], -r4, asr #3
    3e0c:	01000004 	tsteq	r0, r4
    3e10:	16872d50 	pkhtbne	r2, r7, r0, asr #26
    3e14:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    3e18:	011d0801 	tsteq	sp, r1, lsl #16
    3e1c:	10780000 	rsbsne	r0, r8, r0
    3e20:	6a220000 	bvs	883e28 <__ccfg+0x863e80>
    3e24:	01c90100 	biceq	r0, r9, r0, lsl #2
    3e28:	00008d06 	andeq	r8, r0, r6, lsl #26
    3e2c:	00108b00 	andseq	r8, r0, r0, lsl #22
    3e30:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3e34:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    3e38:	00000416 	andeq	r0, r0, r6, lsl r4
    3e3c:	2c005201 	sfmcs	f5, 4, [r0], {1}
    3e40:	00165f01 	andseq	r5, r6, r1, lsl #30
    3e44:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    3e48:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3e54:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e58:	00000da1 	andeq	r0, r0, r1, lsr #27
    3e5c:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3e60:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    3e64:	00011d13 	andeq	r1, r1, r3, lsl sp
    3e68:	00109e00 	andseq	r9, r0, r0, lsl #28
    3e6c:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3e70:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    3e74:	00000416 	andeq	r0, r0, r6, lsl r4
    3e78:	000010bc 	strheq	r1, [r0], -ip
    3e7c:	d4013300 	strle	r3, [r1], #-768	; 0xfffffd00
    3e80:	01000014 	tsteq	r0, r4, lsl r0
    3e84:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    3e90:	011f9c01 	tsteq	pc, r1, lsl #24
    3e94:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    3e98:	06019a01 	streq	r9, [r1], -r1, lsl #20
    3e9c:	001aac01 	andseq	sl, sl, r1, lsl #24
    3ea0:	001ae400 	andseq	lr, sl, r0, lsl #8
    3ea4:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    3ea8:	2b00000d 	blcs	3ee4 <NOROM_RFCAdi3VcoLdoVoltageMode+0x4>
    3eac:	9a010064 	bls	44044 <__ccfg+0x2409c>
    3eb0:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    3eb4:	10da0000 	sbcsne	r0, sl, r0
    3eb8:	79200000 	stmdbvc	r0!, {}	; <UNPREDICTABLE>
    3ebc:	01000000 	mrseq	r0, (UNDEF: 0)
    3ec0:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    3ec4:	ed000000 	stc	0, cr0, [r0, #-0]
    3ec8:	00000010 	andeq	r0, r0, r0, lsl r0
    3ecc:	16c4012c 	strbne	r0, [r4], ip, lsr #2
    3ed0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    3ed4:	1d010701 	stcne	7, cr0, [r1, #-4]
    3ed8:	88000001 	stmdahi	r0, {r0}
    3edc:	ac00001a 	stcge	0, cr0, [r0], {26}
    3ee0:	0100001a 	tsteq	r0, sl, lsl r0
    3ee4:	000e3e9c 	muleq	lr, ip, lr
    3ee8:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3eec:	88010064 	stmdahi	r1, {r2, r5, r6}
    3ef0:	011d1801 	tsteq	sp, r1, lsl #16
    3ef4:	11000000 	mrsne	r0, (UNDEF: 0)
    3ef8:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3efc:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    3f00:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    3f04:	11290000 			; <UNDEFINED> instruction: 0x11290000
    3f08:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3f0c:	018a0100 	orreq	r0, sl, r0, lsl #2
    3f10:	0004160e 	andeq	r1, r4, lr, lsl #12
    3f14:	00114700 	andseq	r4, r1, r0, lsl #14
    3f18:	011f0000 	tsteq	pc, r0
    3f1c:	0000156a 	andeq	r1, r0, sl, ror #10
    3f20:	06017801 	streq	r7, [r1], -r1, lsl #16
    3f24:	00000001 	andeq	r0, r0, r1
    3f28:	00000000 	andeq	r0, r0, r0
    3f2c:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3f30:	2b00000e 	blcs	3f70 <TrimAfterColdResetWakeupFromShutDown+0x74>
    3f34:	00646970 	rsbeq	r6, r4, r0, ror r9
    3f38:	1b017801 	blne	61f44 <__ccfg+0x41f9c>
    3f3c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3f40:	00001165 	andeq	r1, r0, r5, ror #2
    3f44:	0015fc20 	andseq	pc, r5, r0, lsr #24
    3f48:	01780100 	cmneq	r8, r0, lsl #2
    3f4c:	00011d26 	andeq	r1, r1, r6, lsr #26
    3f50:	00117800 	andseq	r7, r1, r0, lsl #16
    3f54:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3f58:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    3f5c:	00000416 	andeq	r0, r0, r6, lsl r4
    3f60:	6a225001 	bvs	897f6c <__ccfg+0x877fc4>
    3f64:	017d0100 	cmneq	sp, r0, lsl #2
    3f68:	00008d07 	andeq	r8, r0, r7, lsl #26
    3f6c:	00119600 	andseq	r9, r1, r0, lsl #12
    3f70:	011f0000 	tsteq	pc, r0
    3f74:	00001522 	andeq	r1, r0, r2, lsr #10
    3f78:	06016601 	streq	r6, [r1], -r1, lsl #12
    3f7c:	001a5401 	andseq	r5, sl, r1, lsl #8
    3f80:	001a8800 	andseq	r8, sl, r0, lsl #16
    3f84:	db9c0100 	blle	fe70438c <_estack+0xde6ff38c>
    3f88:	3400000e 	strcc	r0, [r0], #-14
    3f8c:	000015fc 	strdeq	r1, [r0], -ip
    3f90:	1a016601 	bne	5d79c <__ccfg+0x3d7f4>
    3f94:	0000011d 	andeq	r0, r0, sp, lsl r1
    3f98:	6a225001 	bvs	897fa4 <__ccfg+0x877ffc>
    3f9c:	016a0100 	cmneq	sl, r0, lsl #2
    3fa0:	00008d06 	andeq	r8, r0, r6, lsl #26
    3fa4:	0011b400 	andseq	fp, r1, r0, lsl #8
    3fa8:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3fac:	0e016b01 	vmlaeq.f64	d6, d1, d1
    3fb0:	00000416 	andeq	r0, r0, r6, lsl r4
    3fb4:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    3fb8:	00161001 	andseq	r1, r6, r1
    3fbc:	01590100 	cmpeq	r9, r0, lsl #2
    3fc0:	11010106 	tstne	r1, r6, lsl #2
    3fc4:	3500000f 	strcc	r0, [r0, #-15]
    3fc8:	000015fc 	strdeq	r1, [r0], -ip
    3fcc:	17015901 	strne	r5, [r1, -r1, lsl #18]
    3fd0:	0000011d 	andeq	r0, r0, sp, lsl r1
    3fd4:	00007935 	andeq	r7, r0, r5, lsr r9
    3fd8:	01590100 	cmpeq	r9, r0, lsl #2
    3fdc:	0000d923 	andeq	sp, r0, r3, lsr #18
    3fe0:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    3fe4:	07015d01 	streq	r5, [r1, -r1, lsl #26]
    3fe8:	000000ef 	andeq	r0, r0, pc, ror #1
    3fec:	5d011f00 	stcpl	15, cr1, [r1, #-0]
    3ff0:	01000015 	tsteq	r0, r5, lsl r0
    3ff4:	01060153 	tsteq	r6, r3, asr r1
    3ff8:	00001a0c 	andeq	r1, r0, ip, lsl #20
    3ffc:	00001a20 	andeq	r1, r0, r0, lsr #20
    4000:	0f3c9c01 	svceq	0x003c9c01
    4004:	79200000 	stmdbvc	r0!, {}	; <UNPREDICTABLE>
    4008:	01000000 	mrseq	r0, (UNDEF: 0)
    400c:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    4010:	c7000000 	strgt	r0, [r0, -r0]
    4014:	00000011 	andeq	r0, r0, r1, lsl r0
    4018:	14e7012c 	strbtne	r0, [r7], #300	; 0x12c
    401c:	2c010000 	stccs	0, cr0, [r1], {-0}
    4020:	1d010701 	stcne	7, cr0, [r1, #-4]
    4024:	b4000001 	strlt	r0, [r0], #-1
    4028:	e800001d 	stmda	r0, {r0, r2, r3, r4}
    402c:	0100001d 	tsteq	r0, sp, lsl r0
    4030:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    4034:	069a2000 	ldreq	r2, [sl], r0
    4038:	2c010000 	stccs	0, cr0, [r1], {-0}
    403c:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    4040:	11da0000 	bicsne	r0, sl, r0
    4044:	5a200000 	bpl	80404c <__ccfg+0x7e40a4>
    4048:	01000047 	tsteq	r0, r7, asr #32
    404c:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    4050:	f8000001 			; <UNDEFINED> instruction: 0xf8000001
    4054:	23000011 	movwcs	r0, #17
    4058:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    405c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    4060:	50010000 	andpl	r0, r1, r0
    4064:	00076036 	andeq	r6, r7, r6, lsr r0
    4068:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    406c:	0f013d01 	svceq	0x00013d01
    4070:	00000416 	andeq	r0, r0, r6, lsl r4
    4074:	00001216 	andeq	r1, r0, r6, lsl r2
    4078:	01370000 	teqeq	r7, r0
    407c:	0000163f 	andeq	r1, r0, pc, lsr r6
    4080:	0106af01 	tsteq	r6, r1, lsl #30
    4084:	000fe301 	andeq	lr, pc, r1, lsl #6
    4088:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    408c:	af01006e 	svcge	0x0001006e
    4090:	0000d91a 	andeq	sp, r0, sl, lsl r9
    4094:	12483900 	subne	r3, r8, #0, 18
    4098:	af010000 	svcge	0x00010000
    409c:	0000cd27 	andeq	ip, r0, r7, lsr #26
    40a0:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    40a4:	160ebd01 	strne	fp, [lr], -r1, lsl #26
    40a8:	3a000004 	bcc	40c0 <NOROM_SetupSetVddrLevel+0x4c>
    40ac:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    40b0:	0000d907 	andeq	sp, r0, r7, lsl #18
    40b4:	4f4d3b00 	svcmi	0x004d3b00
    40b8:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    40bc:	3c000101 	stfccs	f0, [r0], {1}
    40c0:	00167701 	andseq	r7, r6, r1, lsl #14
    40c4:	06a70100 	strteq	r0, [r7], r0, lsl #2
    40c8:	00193801 	andseq	r3, r9, r1, lsl #16
    40cc:	00193e00 	andseq	r3, r9, r0, lsl #28
    40d0:	189c0100 	ldmne	ip, {r8}
    40d4:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    40d8:	a7010074 	smlsdxge	r1, r4, r0, r0
    40dc:	0001291f 	andeq	r2, r1, pc, lsl r9
    40e0:	00123f00 	andseq	r3, r2, r0, lsl #30
    40e4:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    40e8:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    40ec:	52000000 	andpl	r0, r0, #0
    40f0:	00000012 	andeq	r0, r0, r2, lsl r0
    40f4:	16ce013c 			; <UNDEFINED> instruction: 0x16ce013c
    40f8:	8f010000 	svchi	0x00010000
    40fc:	00000106 	andeq	r0, r0, r6, lsl #2
    4100:	00000000 	andeq	r0, r0, r0
    4104:	9c010000 	stcls	0, cr0, [r1], {-0}
    4108:	0000104e 	andeq	r1, r0, lr, asr #32
    410c:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    4110:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    4114:	65000001 	strvs	r0, [r0, #-1]
    4118:	3e000012 	mcrcc	0, 0, r0, cr0, cr2, {0}
    411c:	93010069 	movwls	r0, #4201	; 0x1069
    4120:	00008d06 	andeq	r8, r0, r6, lsl #26
    4124:	00128300 	andseq	r8, r2, r0, lsl #6
    4128:	013c0000 	teqeq	ip, r0
    412c:	000014fd 	strdeq	r1, [r0], -sp
    4130:	01067f01 	tsteq	r6, r1, lsl #30
    4134:	0000190c 	andeq	r1, r0, ip, lsl #18
    4138:	00001938 	andeq	r1, r0, r8, lsr r9
    413c:	10849c01 	addne	r9, r4, r1, lsl #24
    4140:	753d0000 	ldrvc	r0, [sp, #-0]!
    4144:	7f010074 	svcvc	0x00010074
    4148:	0001291a 	andeq	r2, r1, sl, lsl r9
    414c:	0012a100 	andseq	sl, r2, r0, lsl #2
    4150:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    4154:	8d068301 	stchi	3, cr8, [r6, #-4]
    4158:	ca000000 	bgt	4160 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x70>
    415c:	00000012 	andeq	r0, r0, r2, lsl r0
    4160:	1602013f 			; <UNDEFINED> instruction: 0x1602013f
    4164:	7b010000 	blvc	4416c <__ccfg+0x241c4>
    4168:	18fc0106 	ldmne	ip!, {r1, r2, r8}^
    416c:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    4170:	9c010000 	stcls	0, cr0, [r1], {-0}
    4174:	00158340 	andseq	r8, r5, r0, asr #6
    4178:	145f0100 	ldrbne	r0, [pc], #-256	; 4180 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>
    417c:	00041601 	andeq	r1, r4, r1, lsl #12
    4180:	10c10100 	sbcne	r0, r1, r0, lsl #2
    4184:	70380000 	eorsvc	r0, r8, r0
    4188:	01006469 	tsteq	r0, r9, ror #8
    418c:	011d225f 	tsteq	sp, pc, asr r2
    4190:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    4194:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    4198:	00000416 	andeq	r0, r0, r6, lsl r4
    419c:	15084100 	strne	r4, [r8, #-256]	; 0xffffff00
    41a0:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    41a4:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    41a8:	03000010 	movweq	r0, #16
    41ac:	000010e2 	andeq	r1, r0, r2, ror #1
    41b0:	0011c035 	andseq	ip, r1, r5, lsr r0
    41b4:	029e0200 	addseq	r0, lr, #0, 4
    41b8:	00007313 	andeq	r7, r0, r3, lsl r3
    41bc:	01020000 	mrseq	r0, (UNDEF: 2)
    41c0:	000ca702 	andeq	sl, ip, r2, lsl #14
    41c4:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    41d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    41d4:	0000112e 	andeq	r1, r0, lr, lsr #2
    41d8:	0010aa43 	andseq	sl, r0, r3, asr #20
    41dc:	0012e800 	andseq	lr, r2, r0, lsl #16
    41e0:	10b64400 	adcsne	r4, r6, r0, lsl #8
    41e4:	13110000 	tstne	r1, #0
    41e8:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    41ec:	00000010 	andeq	r0, r0, r0, lsl r0
    41f0:	00000000 	andeq	r0, r0, r0
    41f4:	01000000 	mrseq	r0, (UNDEF: 0)
    41f8:	aa43145f 	bge	10c937c <__ccfg+0x10a93d4>
    41fc:	2f000010 	svccs	0x00000010
    4200:	46000013 			; <UNDEFINED> instruction: 0x46000013
    4204:	000010b6 	strheq	r1, [r0], -r6
    4208:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    420c:	4000000f 	andmi	r0, r0, pc
    4210:	0c000019 	stceq	0, cr0, [r0], {25}
    4214:	0100001a 	tsteq	r0, sl, lsl r0
    4218:	00119a9c 	mulseq	r1, ip, sl
    421c:	0fad4300 	svceq	0x00ad4300
    4220:	13420000 	movtne	r0, #8192	; 0x2000
    4224:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    4228:	5500000f 	strpl	r0, [r0, #-15]
    422c:	46000013 			; <UNDEFINED> instruction: 0x46000013
    4230:	00000fc5 	andeq	r0, r0, r5, asr #31
    4234:	000fcf46 	andeq	ip, pc, r6, asr #30
    4238:	0f9e4700 	svceq	0x009e4700
    423c:	194e0000 	stmdbne	lr, {}^	; <UNPREDICTABLE>
    4240:	07480000 	strbeq	r0, [r8, -r0]
    4244:	af010000 	svcge	0x00010000
    4248:	0fb92906 	svceq	0x00b92906
    424c:	ad430000 	stclge	0, cr0, [r3, #-0]
    4250:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
    4254:	36000013 			; <UNDEFINED> instruction: 0x36000013
    4258:	00000748 	andeq	r0, r0, r8, asr #14
    425c:	000fc544 	andeq	ip, pc, r4, asr #10
    4260:	00139100 	andseq	r9, r3, r0, lsl #2
    4264:	0fcf4600 	svceq	0x00cf4600
    4268:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    426c:	ea00000f 	b	42b0 <NOROM_SetupGetTrimForAdcShModeEn+0x4>
    4270:	00000019 	andeq	r0, r0, r9, lsl r0
    4274:	db420000 	blle	108427c <__ccfg+0x10642d4>
    4278:	2000000e 	andcs	r0, r0, lr
    427c:	5400001a 	strpl	r0, [r0], #-26	; 0xffffffe6
    4280:	0100001a 	tsteq	r0, sl, lsl r0
    4284:	0011ee9c 	mulseq	r1, ip, lr
    4288:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    428c:	13af0000 			; <UNDEFINED> instruction: 0x13af0000
    4290:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    4294:	cd00000e 	stcgt	0, cr0, [r0, #-56]	; 0xffffffc8
    4298:	46000013 			; <UNDEFINED> instruction: 0x46000013
    429c:	00000f05 	andeq	r0, r0, r5, lsl #30
    42a0:	000edb49 	andeq	sp, lr, r9, asr #22
    42a4:	001a3200 	andseq	r3, sl, r0, lsl #4
    42a8:	001a3a00 	andseq	r3, sl, r0, lsl #20
    42ac:	01590100 	cmpeq	r9, r0, lsl #2
    42b0:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    42b4:	13eb0000 	mvnne	r0, #0
    42b8:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    42bc:	fe00000e 	cdp2	0, 0, cr0, cr0, cr14, {0}
    42c0:	46000013 			; <UNDEFINED> instruction: 0x46000013
    42c4:	00000f05 	andeq	r0, r0, r5, lsl #30
    42c8:	804a0000 	subhi	r0, sl, r0
    42cc:	74000008 	strvc	r0, [r0], #-8
    42d0:	bc00001c 	stclt	0, cr0, [r0], {28}
    42d4:	0100001c 	tsteq	r0, ip, lsl r0
    42d8:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    42dc:	14110000 	ldrne	r0, [r1], #-0
    42e0:	80490000 	subhi	r0, r9, r0
    42e4:	80000008 	andhi	r0, r0, r8
    42e8:	8800001c 	stmdahi	r0, {r2, r3, r4}
    42ec:	0100001c 	tsteq	r0, ip, lsl r0
    42f0:	4306037c 	movwmi	r0, #25468	; 0x637c
    42f4:	00000890 	muleq	r0, r0, r8
    42f8:	0000142f 	andeq	r1, r0, pc, lsr #8
    42fc:	33000000 	movwcc	r0, #0
    4300:	03000013 	movweq	r0, #19
    4304:	000e8900 	andeq	r8, lr, r0, lsl #18
    4308:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    430c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4310:	00001748 	andeq	r1, r0, r8, asr #14
    4314:	00000e10 	andeq	r0, r0, r0, lsl lr
    4318:	00000950 	andeq	r0, r0, r0, asr r9
    431c:	00000000 	andeq	r0, r0, r0
    4320:	0000327b 	andeq	r3, r0, fp, ror r2
    4324:	5d060102 	stfpls	f0, [r6, #-8]
    4328:	0200000c 	andeq	r0, r0, #12
    432c:	0a6b0502 	beq	1ac573c <__ccfg+0x1aa5794>
    4330:	04020000 	streq	r0, [r2], #-0
    4334:	0007fd05 	andeq	pc, r7, r5, lsl #26
    4338:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    433c:	000007f8 	strdeq	r0, [r0], -r8
    4340:	002a2203 	eoreq	r2, sl, r3, lsl #4
    4344:	182e0200 	stmdane	lr!, {r9}
    4348:	0000004d 	andeq	r0, r0, sp, asr #32
    434c:	5b080102 	blpl	20475c <__ccfg+0x1e47b4>
    4350:	0300000c 	movweq	r0, #12
    4354:	00002e18 	andeq	r2, r0, r8, lsl lr
    4358:	60193102 	andsvs	r3, r9, r2, lsl #2
    435c:	02000000 	andeq	r0, r0, #0
    4360:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
    4364:	ba030000 	blt	c436c <__ccfg+0xa43c4>
    4368:	02000029 	andeq	r0, r0, #41	; 0x29
    436c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    4370:	04020000 	streq	r0, [r2], #-0
    4374:	00042607 	andeq	r2, r4, r7, lsl #12
    4378:	07080200 	streq	r0, [r8, -r0, lsl #4]
    437c:	00000421 	andeq	r0, r0, r1, lsr #8
    4380:	69050404 	stmdbvs	r5, {r2, sl}
    4384:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4388:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    438c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    4390:	03000005 	movweq	r0, #5
    4394:	009b1b28 	addseq	r1, fp, r8, lsr #22
    4398:	90050000 	andls	r0, r5, r0
    439c:	0400000b 	streq	r0, [r0], #-11
    43a0:	00b3000d 	adcseq	r0, r3, sp
    43a4:	6d060000 	stcvs	0, cr0, [r6, #-0]
    43a8:	b3000008 	movwlt	r0, #8
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	04070001 	streq	r0, [r7], #-1
    43b4:	000b9203 	andeq	r9, fp, r3, lsl #4
    43b8:	18630300 	stmdane	r3!, {r8, r9}^
    43bc:	0000008f 	andeq	r0, r0, pc, lsl #1
    43c0:	00132e03 	andseq	r2, r3, r3, lsl #28
    43c4:	12260400 	eorne	r0, r6, #0, 8
    43c8:	00000041 	andeq	r0, r0, r1, asr #32
    43cc:	00290103 	eoreq	r0, r9, r3, lsl #2
    43d0:	12270400 	eorne	r0, r7, #0, 8
    43d4:	00000054 	andeq	r0, r0, r4, asr r0
    43d8:	0000cd08 	andeq	ip, r0, r8, lsl #26
    43dc:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    43e0:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    43e4:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    43e8:	0041122b 	subeq	r1, r1, fp, lsr #4
    43ec:	e3090000 	movw	r0, #36864	; 0x9000
    43f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    43f4:	000000e3 	andeq	r0, r0, r3, ror #1
    43f8:	00295303 	eoreq	r5, r9, r3, lsl #6
    43fc:	122c0400 	eorne	r0, ip, #0, 8
    4400:	00000067 	andeq	r0, r0, r7, rrx
    4404:	0000f908 	andeq	pc, r0, r8, lsl #18
    4408:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    440c:	2d040000 	stccs	0, cr0, [r4, #-0]
    4410:	00006712 	andeq	r6, r0, r2, lsl r7
    4414:	0bb40300 	bleq	fed0501c <_estack+0xded0001c>
    4418:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    441c:	00012210 	andeq	r2, r1, r0, lsl r2
    4420:	cd040a00 	vstrgt	s0, [r4, #-0]
    4424:	0b000000 	bleq	442c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xcc>
    4428:	09320408 	ldmdbeq	r2!, {r3, sl}
    442c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    4430:	0000340c 	andeq	r3, r0, ip, lsl #8
    4434:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    4438:	000000e3 	andeq	r0, r0, r3, ror #1
    443c:	00070101 	andeq	r0, r7, r1, lsl #2
    4440:	00064c0c 	andeq	r4, r6, ip, lsl #24
    4444:	03350400 	teqeq	r5, #0, 8
    4448:	000000e3 	andeq	r0, r0, r3, ror #1
    444c:	00060101 	andeq	r0, r6, r1, lsl #2
    4450:	0002e70c 	andeq	lr, r2, ip, lsl #14
    4454:	03360400 	teqeq	r6, #0, 8
    4458:	000000e3 	andeq	r0, r0, r3, ror #1
    445c:	00050101 	andeq	r0, r5, r1, lsl #2
    4460:	0006b70c 	andeq	fp, r6, ip, lsl #14
    4464:	03370400 	teqeq	r7, #0, 8
    4468:	000000e3 	andeq	r0, r0, r3, ror #1
    446c:	00040101 	andeq	r0, r4, r1, lsl #2
    4470:	000a9f0c 	andeq	r9, sl, ip, lsl #30
    4474:	03380400 	teqeq	r8, #0, 8
    4478:	000000e3 	andeq	r0, r0, r3, ror #1
    447c:	00000401 	andeq	r0, r0, r1, lsl #8
    4480:	00065b0d 	andeq	r5, r6, sp, lsl #22
    4484:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    4488:	000000e3 	andeq	r0, r0, r3, ror #1
    448c:	08fb0d01 	ldmeq	fp!, {r0, r8, sl, fp}^
    4490:	3c040000 	stccc	0, cr0, [r4], {-0}
    4494:	0000e303 	andeq	lr, r0, r3, lsl #6
    4498:	400d0200 	andmi	r0, sp, r0, lsl #4
    449c:	0400000f 	streq	r0, [r0], #-15
    44a0:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    44a4:	0d030000 	stceq	0, cr0, [r3, #-0]
    44a8:	00000913 	andeq	r0, r0, r3, lsl r9
    44ac:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    44b0:	04000000 	streq	r0, [r0], #-0
    44b4:	031d0300 	tsteq	sp, #0, 6
    44b8:	41040000 	mrsmi	r0, (UNDEF: 4)
    44bc:	00012803 	andeq	r2, r1, r3, lsl #16
    44c0:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    44c4:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    44c8:	04000006 	streq	r0, [r0], #-6
    44cc:	01c21a43 	biceq	r1, r2, r3, asr #20
    44d0:	01010000 	mrseq	r0, (UNDEF: 1)
    44d4:	0001a00e 	andeq	sl, r1, lr
    44d8:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    44dc:	000001e3 	andeq	r0, r0, r3, ror #3
    44e0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    44e4:	000001e9 	andeq	r0, r0, r9, ror #3
    44e8:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    44ec:	0800000c 	stmdaeq	r0, {r2, r3}
    44f0:	000001e9 	andeq	r0, r0, r9, ror #3
    44f4:	0003260e 	andeq	r2, r3, lr, lsl #12
    44f8:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    44fc:	000001e3 	andeq	r0, r0, r3, ror #3
    4500:	080b0101 	stmdaeq	fp, {r0, r8}
    4504:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    4508:	0d000002 	stceq	0, cr0, [r0, #-8]
    450c:	00000cd8 	ldrdeq	r0, [r0], -r8
    4510:	670b9005 	strvs	r9, [fp, -r5]
    4514:	00000000 	andeq	r0, r0, r0
    4518:	00107b0d 	andseq	r7, r0, sp, lsl #22
    451c:	08910500 	ldmeq	r1, {r8, sl}
    4520:	000000cd 	andeq	r0, r0, sp, asr #1
    4524:	01c50d04 	biceq	r0, r5, r4, lsl #26
    4528:	92050000 	andls	r0, r5, #0
    452c:	0000ef10 	andeq	lr, r0, r0, lsl pc
    4530:	03000600 	movweq	r0, #1536	; 0x600
    4534:	00000ccc 	andeq	r0, r0, ip, asr #25
    4538:	03039305 	movweq	r9, #13061	; 0x3305
    453c:	0f000002 	svceq	0x00000002
    4540:	00000234 	andeq	r0, r0, r4, lsr r2
    4544:	0000024b 	andeq	r0, r0, fp, asr #4
    4548:	3d0e0010 	stccc	0, cr0, [lr, #-64]	; 0xffffffc0
    454c:	05000009 	streq	r0, [r0, #-9]
    4550:	02400f99 	subeq	r0, r0, #612	; 0x264
    4554:	01010000 	mrseq	r0, (UNDEF: 1)
    4558:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    455c:	010b0000 	mrseq	r0, (UNDEF: 11)
    4560:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    4564:	0c000002 	stceq	0, cr0, [r0], {2}
    4568:	0000091a 	andeq	r0, r0, sl, lsl r9
    456c:	e3079306 	movw	r9, #29446	; 0x7306
    4570:	01000000 	mrseq	r0, (UNDEF: 0)
    4574:	0c000107 	stfeqs	f0, [r0], {7}
    4578:	000005cc 	andeq	r0, r0, ip, asr #11
    457c:	e3039406 	movw	r9, #13318	; 0x3406
    4580:	01000000 	mrseq	r0, (UNDEF: 0)
    4584:	00000001 	andeq	r0, r0, r1
    4588:	000aab03 	andeq	sl, sl, r3, lsl #22
    458c:	03960600 	orrseq	r0, r6, #0, 12
    4590:	0000025f 	andeq	r0, r0, pc, asr r2
    4594:	00028908 	andeq	r8, r2, r8, lsl #18
    4598:	02950f00 	addseq	r0, r5, #0, 30
    459c:	02a50000 	adceq	r0, r5, #0
    45a0:	00100000 	andseq	r0, r0, r0
    45a4:	00029a08 	andeq	r9, r2, r8, lsl #20
    45a8:	03aa0e00 			; <UNDEFINED> instruction: 0x03aa0e00
    45ac:	9c060000 	stcls	0, cr0, [r6], {-0}
    45b0:	0002a517 	andeq	sl, r2, r7, lsl r5
    45b4:	0f010100 	svceq	0x00010100
    45b8:	000000d9 	ldrdeq	r0, [r0], -r9
    45bc:	000002c3 	andeq	r0, r0, r3, asr #5
    45c0:	b8080010 	stmdalt	r8, {r4}
    45c4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    45c8:	0000060e 	andeq	r0, r0, lr, lsl #12
    45cc:	c3130607 	tstgt	r3, #7340032	; 0x700000
    45d0:	01000002 	tsteq	r0, r2
    45d4:	08dd0e01 	ldmeq	sp, {r0, r9, sl, fp}^
    45d8:	c3050000 	movwgt	r0, #20480	; 0x5000
    45dc:	0000f90e 	andeq	pc, r0, lr, lsl #18
    45e0:	11010100 	mrsne	r0, (UNDEF: 17)
    45e4:	00000c72 	andeq	r0, r0, r2, ror ip
    45e8:	10016e08 	andne	r6, r1, r8, lsl #28
    45ec:	000002f1 	strdeq	r0, [r0], -r1
    45f0:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    45f4:	01120000 	tsteq	r2, r0
    45f8:	00000303 	andeq	r0, r0, r3, lsl #6
    45fc:	0000cd13 	andeq	ip, r0, r3, lsl sp
    4600:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    4604:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4608:	10000003 	andne	r0, r0, r3
    460c:	03030800 	movweq	r0, #14336	; 0x3800
    4610:	e6140000 	ldr	r0, [r4], -r0
    4614:	08000009 	stmdaeq	r0, {r0, r3}
    4618:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    461c:	01000003 	tsteq	r0, r3
    4620:	03961401 	orrseq	r1, r6, #16777216	; 0x1000000
    4624:	82080000 	andhi	r0, r8, #0
    4628:	01051401 	tsteq	r5, r1, lsl #8
    462c:	01010000 	mrseq	r0, (UNDEF: 1)
    4630:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    4634:	00035509 	andeq	r5, r3, r9, lsl #10
    4638:	01cb0d00 	biceq	r0, fp, r0, lsl #26
    463c:	0f090000 	svceq	0x00090000
    4640:	0000cd07 	andeq	ip, r0, r7, lsl #26
    4644:	a20d0000 	andge	r0, sp, #0
    4648:	0900000c 	stmdbeq	r0, {r2, r3}
    464c:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    4650:	00020000 	andeq	r0, r2, r0
    4654:	000d7f03 	andeq	r7, sp, r3, lsl #30
    4658:	03110900 	tsteq	r1, #0, 18
    465c:	00000331 	andeq	r0, r0, r1, lsr r3
    4660:	1609200b 	strne	r2, [r9], -fp
    4664:	0003d309 	andeq	sp, r3, r9, lsl #6
    4668:	04ac0d00 	strteq	r0, [ip], #3328	; 0xd00
    466c:	17090000 	strne	r0, [r9, -r0]
    4670:	0003ed08 	andeq	lr, r3, r8, lsl #26
    4674:	0b0d0000 	bleq	34467c <__ccfg+0x3246d4>
    4678:	09000009 	stmdbeq	r0, {r0, r3}
    467c:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    4680:	0d040000 	stceq	0, cr0, [r4, #-0]
    4684:	00000bc6 	andeq	r0, r0, r6, asr #23
    4688:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    468c:	08000004 	stmdaeq	r0, {r2}
    4690:	000c9a0d 	andeq	r9, ip, sp, lsl #20
    4694:	081a0900 	ldmdaeq	sl, {r8, fp}
    4698:	00000459 	andeq	r0, r0, r9, asr r4
    469c:	09620d0c 	stmdbeq	r2!, {r2, r3, r8, sl, fp}^
    46a0:	1b090000 	blne	2446a8 <__ccfg+0x224700>
    46a4:	00046f08 	andeq	r6, r4, r8, lsl #30
    46a8:	630d1000 	movwvs	r1, #53248	; 0xd000
    46ac:	0900000a 	stmdbeq	r0, {r1, r3}
    46b0:	046f081c 	strbteq	r0, [pc], #-2076	; 46b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x6c>
    46b4:	0d140000 	ldceq	0, cr0, [r4, #-0]
    46b8:	000001ae 	andeq	r0, r0, lr, lsr #3
    46bc:	6f081d09 	svcvs	0x00081d09
    46c0:	18000004 	stmdane	r0, {r2}
    46c4:	0003140d 	andeq	r1, r3, sp, lsl #8
    46c8:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    46cc:	00000081 	andeq	r0, r0, r1, lsl #1
    46d0:	0115001c 	tsteq	r5, ip, lsl r0
    46d4:	00000081 	andeq	r0, r0, r1, lsl #1
    46d8:	000003ed 	andeq	r0, r0, sp, ror #7
    46dc:	00008113 	andeq	r8, r0, r3, lsl r1
    46e0:	00811300 	addeq	r1, r1, r0, lsl #6
    46e4:	b5130000 	ldrlt	r0, [r3, #-0]
    46e8:	00000000 	andeq	r0, r0, r0
    46ec:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    46f0:	01150000 	tsteq	r5, r0
    46f4:	00000081 	andeq	r0, r0, r1, lsl #1
    46f8:	00000408 	andeq	r0, r0, r8, lsl #8
    46fc:	00008113 	andeq	r8, r0, r3, lsl r1
    4700:	00811300 	addeq	r1, r1, r0, lsl #6
    4704:	0a000000 	beq	470c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc0>
    4708:	0003f304 	andeq	pc, r3, r4, lsl #6
    470c:	81011500 	tsthi	r1, r0, lsl #10
    4710:	32000000 	andcc	r0, r0, #0
    4714:	13000004 	movwne	r0, #4
    4718:	00000081 	andeq	r0, r0, r1, lsl #1
    471c:	00011613 	andeq	r1, r1, r3, lsl r6
    4720:	00811300 	addeq	r1, r1, r0, lsl #6
    4724:	32130000 	andscc	r0, r3, #0
    4728:	13000004 	movwne	r0, #4
    472c:	00000438 	andeq	r0, r0, r8, lsr r4
    4730:	81040a00 	tsthi	r4, r0, lsl #20
    4734:	0a000000 	beq	473c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf0>
    4738:	00035504 	andeq	r5, r3, r4, lsl #10
    473c:	0e040a00 	vmlaeq.f32	s0, s8, s0
    4740:	15000004 	strne	r0, [r0, #-4]
    4744:	00008101 	andeq	r8, r0, r1, lsl #2
    4748:	00045900 	andeq	r5, r4, r0, lsl #18
    474c:	01161300 	tsteq	r6, r0, lsl #6
    4750:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    4754:	00000004 	andeq	r0, r0, r4
    4758:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    475c:	01150000 	tsteq	r5, r0
    4760:	00000081 	andeq	r0, r0, r1, lsl #1
    4764:	0000046f 	andeq	r0, r0, pc, ror #8
    4768:	00011613 	andeq	r1, r1, r3, lsl r6
    476c:	040a0000 	streq	r0, [sl], #-0
    4770:	0000045f 	andeq	r0, r0, pc, asr r4
    4774:	000d3b03 	andeq	r3, sp, r3, lsl #22
    4778:	031f0900 	tsteq	pc, #0, 18
    477c:	00000361 	andeq	r0, r0, r1, ror #6
    4780:	00047508 	andeq	r7, r4, r8, lsl #10
    4784:	17d11600 	ldrbne	r1, [r1, r0, lsl #12]
    4788:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    478c:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    4790:	cb0d0000 	blgt	344798 <__ccfg+0x3247f0>
    4794:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    4798:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    479c:	0d000000 	stceq	0, cr0, [r0, #-0]
    47a0:	000016f3 	strdeq	r1, [r0], -r3
    47a4:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    47a8:	04000004 	streq	r0, [r0], #-4
    47ac:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    47b0:	03000004 	movweq	r0, #4
    47b4:	000017df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    47b8:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    47bc:	03000004 	movweq	r0, #4
    47c0:	000018e4 	andeq	r1, r0, r4, ror #17
    47c4:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    47c8:	0b000004 	bleq	47e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x194>
    47cc:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    47d0:	00000536 	andeq	r0, r0, r6, lsr r5
    47d4:	0018860c 	andseq	r8, r8, ip, lsl #12
    47d8:	09400900 	stmdbeq	r0, {r8, fp}^
    47dc:	000000cd 	andeq	r0, r0, sp, asr #1
    47e0:	000f0102 	andeq	r0, pc, r2, lsl #2
    47e4:	0019360c 	andseq	r3, r9, ip, lsl #12
    47e8:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    47ec:	000000cd 	andeq	r0, r0, sp, asr #1
    47f0:	000e0102 	andeq	r0, lr, r2, lsl #2
    47f4:	0018010c 	andseq	r0, r8, ip, lsl #2
    47f8:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    47fc:	000000cd 	andeq	r0, r0, sp, asr #1
    4800:	000d0102 	andeq	r0, sp, r2, lsl #2
    4804:	0018960c 	andseq	r9, r8, ip, lsl #12
    4808:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    480c:	000000cd 	andeq	r0, r0, sp, asr #1
    4810:	00060702 	andeq	r0, r6, r2, lsl #14
    4814:	0018f20c 	andseq	pc, r8, ip, lsl #4
    4818:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    481c:	000000cd 	andeq	r0, r0, sp, asr #1
    4820:	00030302 	andeq	r0, r3, r2, lsl #6
    4824:	0018780c 	andseq	r7, r8, ip, lsl #16
    4828:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    482c:	000000cd 	andeq	r0, r0, sp, asr #1
    4830:	00000302 	andeq	r0, r0, r2, lsl #6
    4834:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    4838:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    483c:	03180000 	tsteq	r8, #0
    4840:	09000006 	stmdbeq	r0, {r1, r2}
    4844:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    4848:	62190000 	andsvs	r0, r9, #0
    484c:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    4850:	000004cc 	andeq	r0, r0, ip, asr #9
    4854:	16f80300 	ldrbtne	r0, [r8], r0, lsl #6
    4858:	47090000 	strmi	r0, [r9, -r0]
    485c:	00053603 	andeq	r3, r5, r3, lsl #12
    4860:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    4864:	05840550 	streq	r0, [r4, #1360]	; 0x550
    4868:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    486c:	09000019 	stmdbeq	r0, {r0, r3, r4}
    4870:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    4874:	42180000 	andsmi	r0, r8, #0
    4878:	09000018 	stmdbeq	r0, {r3, r4}
    487c:	03550b52 	cmpeq	r5, #83968	; 0x14800
    4880:	16000000 	strne	r0, [r0], -r0
    4884:	00001927 	andeq	r1, r0, r7, lsr #18
    4888:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    488c:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    4890:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    4894:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    4898:	0d000000 	stceq	0, cr0, [r0, #-0]
    489c:	000018f9 	strdeq	r1, [r0], -r9
    48a0:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    48a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    48a8:	0018d90d 	andseq	sp, r8, sp, lsl #18
    48ac:	10680900 	rsbne	r0, r8, r0, lsl #18
    48b0:	00000556 	andeq	r0, r0, r6, asr r5
    48b4:	ed03000a 	stc	0, cr0, [r3, #-40]	; 0xffffffd8
    48b8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    48bc:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    48c0:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    48c4:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    48c8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    48cc:	00001836 	andeq	r1, r0, r6, lsr r8
    48d0:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    48d4:	00000004 	andeq	r0, r0, r4
    48d8:	0018c50d 	andseq	ip, r8, sp, lsl #10
    48dc:	11830900 	orrne	r0, r3, r0, lsl #18
    48e0:	00000556 	andeq	r0, r0, r6, asr r5
    48e4:	68030008 	stmdavs	r3, {r3}
    48e8:	09000018 	stmdbeq	r0, {r3, r4}
    48ec:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    48f0:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
    48f4:	08000003 	stmdaeq	r0, {r0, r1}
    48f8:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    48fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4900:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    4904:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    4908:	1c000006 	stcne	0, cr0, [r0], {6}
    490c:	00003ca7 	andeq	r3, r0, r7, lsr #25
    4910:	07030708 	streq	r0, [r3, -r8, lsl #14]
    4914:	000000cd 	andeq	r0, r0, sp, asr #1
    4918:	0fd31c00 	svceq	0x00d31c00
    491c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    4920:	010a0803 	tsteq	sl, r3, lsl #16
    4924:	00040000 	andeq	r0, r4, r0
    4928:	000a0911 	andeq	r0, sl, r1, lsl r9
    492c:	03090800 	movweq	r0, #38912	; 0x9800
    4930:	00060203 	andeq	r0, r6, r3, lsl #4
    4934:	00291d00 	eoreq	r1, r9, r0, lsl #26
    4938:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    493c:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    4940:	1c000006 	stcne	0, cr0, [r0], {6}
    4944:	00001f2a 	andeq	r1, r0, sl, lsr #30
    4948:	08031408 	stmdaeq	r3, {r3, sl, ip}
    494c:	000000cd 	andeq	r0, r0, sp, asr #1
    4950:	0be71c00 	bleq	ff9cb958 <_estack+0xdf9c6958>
    4954:	15080000 	strne	r0, [r8, #-0]
    4958:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    495c:	1c020000 	stcne	0, cr0, [r2], {-0}
    4960:	00004c94 	muleq	r0, r4, ip
    4964:	0b031608 	bleq	ca18c <__ccfg+0xaa1e4>
    4968:	000002e4 	andeq	r0, r0, r4, ror #5
    496c:	475a1c04 	ldrbmi	r1, [sl, -r4, lsl #24]
    4970:	17080000 	strne	r0, [r8, -r0]
    4974:	010a0903 	tsteq	sl, r3, lsl #18
    4978:	1c080000 	stcne	0, cr0, [r8], {-0}
    497c:	0000000f 	andeq	r0, r0, pc
    4980:	0f031808 	svceq	0x00031808
    4984:	00000699 	muleq	r0, r9, r6
    4988:	095d1c0c 	ldmdbeq	sp, {r2, r3, sl, fp, ip}^
    498c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4990:	06a91503 	strteq	r1, [r9], r3, lsl #10
    4994:	002c0000 	eoreq	r0, ip, r0
    4998:	0006290f 	andeq	r2, r6, pc, lsl #18
    499c:	0006a900 	andeq	sl, r6, r0, lsl #18
    49a0:	00881e00 	addeq	r1, r8, r0, lsl #28
    49a4:	00030000 	andeq	r0, r3, r0
    49a8:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    49ac:	dc110000 	ldcle	0, cr0, [r1], {-0}
    49b0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    49b4:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    49b8:	14000006 	strne	r0, [r0], #-6
    49bc:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    49c0:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    49c4:	000006cb 	andeq	r0, r0, fp, asr #13
    49c8:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    49cc:	000006af 	andeq	r0, r0, pc, lsr #13
    49d0:	00070f0e 	andeq	r0, r7, lr, lsl #30
    49d4:	131d0a00 	tstne	sp, #0, 20
    49d8:	000000cd 	andeq	r0, r0, sp, asr #1
    49dc:	ee0e0101 	adfe	f0, f6, f1
    49e0:	0a000002 	beq	49f0 <memcpy+0xc>
    49e4:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    49e8:	01010000 	mrseq	r0, (UNDEF: 1)
    49ec:	000c690e 	andeq	r6, ip, lr, lsl #18
    49f0:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    49f4:	000000de 	ldrdeq	r0, [r0], -lr
    49f8:	870e0101 	strhi	r0, [lr, -r1, lsl #2]
    49fc:	0a00000c 	beq	4a34 <memcpy+0x50>
    4a00:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    4a04:	01010000 	mrseq	r0, (UNDEF: 1)
    4a08:	00173e03 	andseq	r3, r7, r3, lsl #28
    4a0c:	0f0e0b00 	svceq	0x000e0b00
    4a10:	00000715 	andeq	r0, r0, r5, lsl r7
    4a14:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    4a18:	01150000 	tsteq	r5, r0
    4a1c:	00000081 	andeq	r0, r0, r1, lsl #1
    4a20:	00000730 	andeq	r0, r0, r0, lsr r7
    4a24:	00008113 	andeq	r8, r0, r3, lsl r1
    4a28:	01161300 	tsteq	r6, r0, lsl #6
    4a2c:	0f000000 	svceq	0x00000000
    4a30:	00000740 	andeq	r0, r0, r0, asr #14
    4a34:	00000740 	andeq	r0, r0, r0, asr #14
    4a38:	0000881e 	andeq	r8, r0, lr, lsl r8
    4a3c:	0a000700 	beq	6644 <__exidx_end+0x8c4>
    4a40:	0005e704 	andeq	lr, r5, r4, lsl #14
    4a44:	180e1f00 	stmdane	lr, {r8, r9, sl, fp, ip}
    4a48:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4a4c:	00073015 	andeq	r3, r7, r5, lsl r0
    4a50:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    4a54:	0f200005 	svceq	0x00200005
    4a58:	00000709 	andeq	r0, r0, r9, lsl #14
    4a5c:	00000768 	andeq	r0, r0, r8, ror #14
    4a60:	0000881e 	andeq	r8, r0, lr, lsl r8
    4a64:	1f000200 	svcne	0x00000200
    4a68:	0000187d 	andeq	r1, r0, sp, ror r8
    4a6c:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    4a70:	05000007 	streq	r0, [r0, #-7]
    4a74:	00059803 	andeq	r9, r5, r3, lsl #16
    4a78:	078a0f20 	streq	r0, [sl, r0, lsr #30]
    4a7c:	078a0000 	streq	r0, [sl, r0]
    4a80:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4a84:	02000000 	andeq	r0, r0, #0
    4a88:	c0040a00 	andgt	r0, r4, r0, lsl #20
    4a8c:	1f000004 	svcne	0x00000004
    4a90:	000017c9 	andeq	r1, r0, r9, asr #15
    4a94:	7a13190c 	bvc	4caecc <__ccfg+0x4aaf24>
    4a98:	05000007 	streq	r0, [r0, #-7]
    4a9c:	00058c03 	andeq	r8, r5, r3, lsl #24
    4aa0:	00810f20 	addeq	r0, r1, r0, lsr #30
    4aa4:	07b20000 	ldreq	r0, [r2, r0]!
    4aa8:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4aac:	02000000 	andeq	r0, r0, #0
    4ab0:	17a11f00 	strne	r1, [r1, r0, lsl #30]!
    4ab4:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    4ab8:	0007a20f 	andeq	sl, r7, pc, lsl #4
    4abc:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    4ac0:	0f200005 	svceq	0x00200005
    4ac4:	000007d4 	ldrdeq	r0, [r0], -r4
    4ac8:	000007d4 	ldrdeq	r0, [r0], -r4
    4acc:	0000881e 	andeq	r8, r0, lr, lsl r8
    4ad0:	0a000200 	beq	52d8 <__pi_hex_enc_table+0x7>
    4ad4:	00048104 	andeq	r8, r4, r4, lsl #2
    4ad8:	191f1f00 	ldmdbne	pc, {r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    4adc:	230c0000 	movwcs	r0, #49152	; 0xc000
    4ae0:	0007c41b 	andeq	ip, r7, fp, lsl r4
    4ae4:	b0030500 	andlt	r0, r3, r0, lsl #10
    4ae8:	20200005 	eorcs	r0, r0, r5
    4aec:	00188d01 	andseq	r8, r8, r1, lsl #26
    4af0:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    4af4:	25980101 	ldrcs	r0, [r8, #257]	; 0x101
    4af8:	259a0000 	ldrcs	r0, [sl]
    4afc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b00:	17b00121 	ldrne	r0, [r0, r1, lsr #2]!
    4b04:	05010000 	streq	r0, [r1, #-0]
    4b08:	81010105 	tsthi	r1, r5, lsl #2
	...
    4b14:	01000000 	mrseq	r0, (UNDEF: 0)
    4b18:	0008639c 	muleq	r8, ip, r3
    4b1c:	68702200 	ldmdavs	r0!, {r9, sp}^
    4b20:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    4b24:	00812d05 	addeq	r2, r1, r5, lsl #26
    4b28:	14420000 	strbne	r0, [r2], #-0
    4b2c:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    4b30:	00000011 	andeq	r0, r0, r1, lsl r0
    4b34:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4b38:	01000009 	tsteq	r0, r9
    4b3c:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    4b40:	00001160 	andeq	r1, r0, r0, ror #2
    4b44:	00001460 	andeq	r1, r0, r0, ror #8
    4b48:	00093825 	andeq	r3, r9, r5, lsr #16
    4b4c:	116b2600 	cmnne	fp, r0, lsl #12
    4b50:	14730000 	ldrbtne	r0, [r3], #-0
    4b54:	76260000 	strtvc	r0, [r6], -r0
    4b58:	91000011 	tstls	r0, r1, lsl r0
    4b5c:	00000014 	andeq	r0, r0, r4, lsl r0
    4b60:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4b64:	000018ba 			; <UNDEFINED> instruction: 0x000018ba
    4b68:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    4b6c:	00255c01 	eoreq	r5, r5, r1, lsl #24
    4b70:	00259800 	eoreq	r9, r5, r0, lsl #16
    4b74:	9d9c0100 	ldflss	f0, [ip]
    4b78:	22000008 	andcs	r0, r0, #8
    4b7c:	00746b70 	rsbseq	r6, r4, r0, ror fp
    4b80:	3004fa01 	andcc	pc, r4, r1, lsl #20
    4b84:	00000116 	andeq	r0, r0, r6, lsl r1
    4b88:	000014bb 			; <UNDEFINED> instruction: 0x000014bb
    4b8c:	01006228 	tsteq	r0, r8, lsr #4
    4b90:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    4b94:	d9000008 	stmdble	r0, {r3}
    4b98:	00000014 	andeq	r0, r0, r4, lsl r0
    4b9c:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    4ba0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4ba4:	00001706 	andeq	r1, r0, r6, lsl #14
    4ba8:	0104e901 	tsteq	r4, r1, lsl #18
    4bac:	00011601 	andeq	r1, r1, r1, lsl #12
    4bb0:	00252800 	eoreq	r2, r5, r0, lsl #16
    4bb4:	00255c00 	eoreq	r5, r5, r0, lsl #24
    4bb8:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    4bbc:	22000008 	andcs	r0, r0, #8
    4bc0:	00796870 	rsbseq	r6, r9, r0, ror r8
    4bc4:	2f04e901 	svccs	0x0004e901
    4bc8:	00000081 	andeq	r0, r0, r1, lsl #1
    4bcc:	000014f7 	strdeq	r1, [r0], -r7
    4bd0:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    4bd4:	0b04ed01 	bleq	13ffe0 <__ccfg+0x120038>
    4bd8:	0000078a 	andeq	r0, r0, sl, lsl #15
    4bdc:	00001515 	andeq	r1, r0, r5, lsl r5
    4be0:	01006228 	tsteq	r0, r8, lsr #4
    4be4:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    4be8:	28000008 	stmdacs	r0, {r3}
    4bec:	00000015 	andeq	r0, r0, r5, lsl r0
    4bf0:	17840121 	strne	r0, [r4, r1, lsr #2]
    4bf4:	d2010000 	andle	r0, r1, #0
    4bf8:	16010104 	strne	r0, [r1], -r4, lsl #2
    4bfc:	e8000001 	stmda	r0, {r0}
    4c00:	28000024 	stmdacs	r0, {r2, r5}
    4c04:	01000025 	tsteq	r0, r5, lsr #32
    4c08:	0009509c 	muleq	r9, ip, r0
    4c0c:	68702200 	ldmdavs	r0!, {r9, sp}^
    4c10:	d2010079 	andle	r0, r1, #121	; 0x79
    4c14:	00812f04 	addeq	r2, r1, r4, lsl #30
    4c18:	15470000 	strbne	r0, [r7, #-0]
    4c1c:	6c220000 	stcvs	0, cr0, [r2], #-0
    4c20:	01006e65 	tsteq	r0, r5, ror #28
    4c24:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    4c28:	65000004 	strvs	r0, [r0, #-4]
    4c2c:	28000015 	stmdacs	r0, {r0, r2, r4}
    4c30:	0100716f 	tsteq	r0, pc, ror #2
    4c34:	8a0b04d7 	bhi	2c5f98 <__ccfg+0x2a5ff0>
    4c38:	83000007 	movwhi	r0, #7
    4c3c:	28000015 	stmdacs	r0, {r0, r2, r4}
    4c40:	d8010062 	stmdale	r1, {r1, r5, r6}
    4c44:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    4c48:	15a10000 	strne	r0, [r1, #0]!
    4c4c:	21000000 	mrscs	r0, (UNDEF: 0)
    4c50:	00190d01 	andseq	r0, r9, r1, lsl #26
    4c54:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4c58:	00810101 	addeq	r0, r1, r1, lsl #2
    4c5c:	244c0000 	strbcs	r0, [ip], #-0
    4c60:	24e80000 	strbtcs	r0, [r8], #0
    4c64:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c68:	000009eb 	andeq	r0, r0, fp, ror #19
    4c6c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4c70:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4c74:	0000812b 	andeq	r8, r0, fp, lsr #2
    4c78:	0015cb00 	andseq	ip, r5, r0, lsl #22
    4c7c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4c80:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    4c84:	00000116 	andeq	r0, r0, r6, lsl r1
    4c88:	000015ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4c8c:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4c90:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4c94:	0000813f 	andeq	r8, r0, pc, lsr r1
    4c98:	00163300 	andseq	r3, r6, r0, lsl #6
    4c9c:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    4ca0:	a6010067 	strge	r0, [r1], -r7, rrx
    4ca4:	00810604 	addeq	r0, r1, r4, lsl #12
    4ca8:	64280000 	strtvs	r0, [r8], #-0
    4cac:	01007073 	tsteq	r0, r3, ror r0
    4cb0:	810b04a6 	smlatbhi	fp, r6, r4, r0
    4cb4:	67000000 	strvs	r0, [r0, -r0]
    4cb8:	2a000016 	bcs	4d18 <__aeabi_lmul+0x23c>
    4cbc:	00736573 	rsbseq	r6, r3, r3, ror r5
    4cc0:	1004a601 	andne	sl, r4, r1, lsl #12
    4cc4:	00000081 	andeq	r0, r0, r1, lsl #1
    4cc8:	2a509102 	bcs	14290d8 <__ccfg+0x1409130>
    4ccc:	01007061 	tsteq	r0, r1, rrx
    4cd0:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    4cd4:	02000003 	andeq	r0, r0, #3
    4cd8:	63285491 			; <UNDEFINED> instruction: 0x63285491
    4cdc:	04a80100 	strteq	r0, [r8], #256	; 0x100
    4ce0:	0001160a 	andeq	r1, r1, sl, lsl #12
    4ce4:	00168500 	andseq	r8, r6, r0, lsl #10
    4ce8:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4cec:	00001733 	andeq	r1, r0, r3, lsr r7
    4cf0:	01048701 	tsteq	r4, r1, lsl #14
    4cf4:	00008101 	andeq	r8, r0, r1, lsl #2
    4cf8:	0023fc00 	eoreq	pc, r3, r0, lsl #24
    4cfc:	00244c00 	eoreq	r4, r4, r0, lsl #24
    4d00:	4a9c0100 	bmi	fe705108 <_estack+0xde700108>
    4d04:	2200000a 	andcs	r0, r0, #10
    4d08:	00796870 	rsbseq	r6, r9, r0, ror r8
    4d0c:	2b048701 	blcs	126918 <__ccfg+0x106970>
    4d10:	00000081 	andeq	r0, r0, r1, lsl #1
    4d14:	00001698 	muleq	r0, r8, r6
    4d18:	00737022 	rsbseq	r7, r3, r2, lsr #32
    4d1c:	3a048701 	bcc	126928 <__ccfg+0x106980>
    4d20:	00000709 	andeq	r0, r0, r9, lsl #14
    4d24:	000016b6 			; <UNDEFINED> instruction: 0x000016b6
    4d28:	000e912b 	andeq	r9, lr, fp, lsr #2
    4d2c:	04870100 	streq	r0, [r7], #256	; 0x100
    4d30:	00008142 	andeq	r8, r0, r2, asr #2
    4d34:	0016d400 	andseq	sp, r6, r0, lsl #8
    4d38:	00712800 	rsbseq	r2, r1, r0, lsl #16
    4d3c:	0b048d01 	bleq	128148 <__ccfg+0x1081a0>
    4d40:	0000078a 	andeq	r0, r0, sl, lsl #15
    4d44:	000016f2 	strdeq	r1, [r0], -r2
    4d48:	2d012c00 	stccs	12, cr2, [r1, #-0]
    4d4c:	01000018 	tsteq	r0, r8, lsl r0
    4d50:	01010386 	smlabbeq	r1, r6, r3, r0
    4d54:	00000116 	andeq	r0, r0, r6, lsl r1
    4d58:	000a9101 	andeq	r9, sl, r1, lsl #2
    4d5c:	1da72d00 	stcne	13, cr2, [r7]
    4d60:	86010000 	strhi	r0, [r1], -r0
    4d64:	00812d03 	addeq	r2, r1, r3, lsl #26
    4d68:	642e0000 	strtvs	r0, [lr], #-0
    4d6c:	01007073 	tsteq	r0, r3, ror r0
    4d70:	81370386 	teqhi	r7, r6, lsl #7
    4d74:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4d78:	00736573 	rsbseq	r6, r3, r3, ror r5
    4d7c:	40038601 	andmi	r8, r3, r1, lsl #12
    4d80:	00000081 	andeq	r0, r0, r1, lsl #1
    4d84:	01007029 	tsteq	r0, r9, lsr #32
    4d88:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    4d8c:	00000008 	andeq	r0, r0, r8
    4d90:	17260127 	strne	r0, [r6, -r7, lsr #2]!
    4d94:	7f010000 	svcvc	0x00010000
    4d98:	00010103 	andeq	r0, r1, r3, lsl #2
    4d9c:	00000000 	andeq	r0, r0, r0
    4da0:	01000000 	mrseq	r0, (UNDEF: 0)
    4da4:	000acb9c 	muleq	sl, ip, fp
    4da8:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4dac:	32037f01 	andcc	r7, r3, #1, 30
    4db0:	00000116 	andeq	r0, r0, r6, lsl r1
    4db4:	00001721 	andeq	r1, r0, r1, lsr #14
    4db8:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    4dbc:	037f0100 	cmneq	pc, #0, 2
    4dc0:	00008139 	andeq	r8, r0, r9, lsr r1
    4dc4:	00173400 	andseq	r3, r7, r0, lsl #8
    4dc8:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4dcc:	0000189e 	muleq	r0, lr, r8
    4dd0:	01036b01 	tsteq	r3, r1, lsl #22
    4dd4:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    4de0:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    4de4:	2200000b 	andcs	r0, r0, #11
    4de8:	6b010070 	blvs	44fb0 <__ccfg+0x25008>
    4dec:	01163303 	tsteq	r6, r3, lsl #6
    4df0:	17470000 	strbne	r0, [r7, -r0]
    4df4:	002b0000 	eoreq	r0, fp, r0
    4df8:	01000019 	tsteq	r0, r9, lsl r0
    4dfc:	813a036b 	teqhi	sl, fp, ror #6
    4e00:	65000000 	strvs	r0, [r0, #-0]
    4e04:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    4e08:	01006370 	tsteq	r0, r0, ror r3
    4e0c:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    4e10:	83000008 	movwhi	r0, #8
    4e14:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    4e18:	01007070 	tsteq	r0, r0, ror r0
    4e1c:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    4e20:	00000008 	andeq	r0, r0, r8
    4e24:	17bd0127 	ldrne	r0, [sp, r7, lsr #2]!
    4e28:	63010000 	movwvs	r0, #4096	; 0x1000
    4e2c:	00010103 	andeq	r0, r1, r3, lsl #2
    4e30:	00000000 	andeq	r0, r0, r0
    4e34:	01000000 	mrseq	r0, (UNDEF: 0)
    4e38:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    4e3c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4e40:	31036301 	tstcc	r3, r1, lsl #6
    4e44:	00000116 	andeq	r0, r0, r6, lsl r1
    4e48:	000017a1 	andeq	r1, r0, r1, lsr #15
    4e4c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4e50:	03630100 	cmneq	r3, #0, 2
    4e54:	00008138 	andeq	r8, r0, r8, lsr r1
    4e58:	0017bf00 	andseq	fp, r7, r0, lsl #30
    4e5c:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4e60:	000018a9 	andeq	r1, r0, r9, lsr #17
    4e64:	01035a01 	tsteq	r3, r1, lsl #20
    4e68:	00000001 	andeq	r0, r0, r1
    4e6c:	00000000 	andeq	r0, r0, r0
    4e70:	999c0100 	ldmibls	ip, {r8}
    4e74:	2200000b 	andcs	r0, r0, #11
    4e78:	5a010070 	bpl	45040 <__ccfg+0x25098>
    4e7c:	01163103 	tsteq	r6, r3, lsl #2
    4e80:	17dd0000 	ldrbne	r0, [sp, r0]
    4e84:	73220000 			; <UNDEFINED> instruction: 0x73220000
    4e88:	01007365 	tsteq	r0, r5, ror #6
    4e8c:	8138035a 	teqhi	r8, sl, asr r3
    4e90:	fb000000 	blx	4e9a <__aeabi_lmul+0x3be>
    4e94:	00000017 	andeq	r0, r0, r7, lsl r0
    4e98:	193f012c 	ldmdbne	pc!, {r2, r3, r5, r8}	; <UNPREDICTABLE>
    4e9c:	52010000 	andpl	r0, r1, #0
    4ea0:	81010103 	tsthi	r1, r3, lsl #2
    4ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ea8:	00000bd5 	ldrdeq	r0, [r0], -r5
    4eac:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    4eb0:	03520100 	cmpeq	r2, #0, 2
    4eb4:	0000812d 	andeq	r8, r0, sp, lsr #2
    4eb8:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    4ebc:	52010074 	andpl	r0, r1, #116	; 0x74
    4ec0:	00813603 	addeq	r3, r1, r3, lsl #12
    4ec4:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    4ec8:	01006772 	tsteq	r0, r2, ror r7
    4ecc:	16430352 			; <UNDEFINED> instruction: 0x16430352
    4ed0:	00000001 	andeq	r0, r0, r1
    4ed4:	17110121 	ldrne	r0, [r1, -r1, lsr #2]
    4ed8:	33010000 	movwcc	r0, #4096	; 0x1000
    4edc:	81010103 	tsthi	r1, r3, lsl #2
    4ee0:	34000000 	strcc	r0, [r0], #-0
    4ee4:	94000023 	strls	r0, [r0], #-35	; 0xffffffdd
    4ee8:	01000023 	tsteq	r0, r3, lsr #32
    4eec:	000c3e9c 	muleq	ip, ip, lr
    4ef0:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    4ef4:	03330100 	teqeq	r3, #0, 2
    4ef8:	0000812c 	andeq	r8, r0, ip, lsr #2
    4efc:	00181900 	andseq	r1, r8, r0, lsl #18
    4f00:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    4f04:	33010074 	movwcc	r0, #4212	; 0x1074
    4f08:	00813403 	addeq	r3, r1, r3, lsl #8
    4f0c:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    4f10:	61220000 			; <UNDEFINED> instruction: 0x61220000
    4f14:	01006772 	tsteq	r0, r2, ror r7
    4f18:	16410333 			; <UNDEFINED> instruction: 0x16410333
    4f1c:	81000001 	tsthi	r0, r1
    4f20:	2f000018 	svccs	0x00000018
    4f24:	00002342 	andeq	r2, r0, r2, asr #6
    4f28:	00002350 	andeq	r2, r0, r0, asr r3
    4f2c:	01007028 	tsteq	r0, r8, lsr #32
    4f30:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    4f34:	aa000007 	bge	4f58 <__aeabi_lmul+0x47c>
    4f38:	00000018 	andeq	r0, r0, r8, lsl r0
    4f3c:	98012700 	stmdals	r1, {r8, r9, sl, sp}
    4f40:	01000017 	tsteq	r0, r7, lsl r0
    4f44:	0101032b 	tsteq	r1, fp, lsr #6
	...
    4f50:	0c679c01 	stcleq	12, cr9, [r7], #-4
    4f54:	70220000 	eorvc	r0, r2, r0
    4f58:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4f5c:	0001162e 	andeq	r1, r1, lr, lsr #12
    4f60:	0018bd00 	andseq	fp, r8, r0, lsl #26
    4f64:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4f68:	00001854 	andeq	r1, r0, r4, asr r8
    4f6c:	01031a01 	tsteq	r3, r1, lsl #20
    4f70:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4f7c:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    4f80:	2200000c 	andcs	r0, r0, #12
    4f84:	1a010070 	bne	4514c <__ccfg+0x251a4>
    4f88:	01162e03 	tsteq	r6, r3, lsl #28
    4f8c:	18db0000 	ldmne	fp, {}^	; <UNPREDICTABLE>
    4f90:	62220000 	eorvs	r0, r2, #0
    4f94:	01006675 	tsteq	r0, r5, ror r6
    4f98:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    4f9c:	f9000002 			; <UNDEFINED> instruction: 0xf9000002
    4fa0:	22000018 	andcs	r0, r0, #24
    4fa4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4fa8:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    4fac:	00000081 	andeq	r0, r0, r1, lsl #1
    4fb0:	0000190c 	andeq	r1, r0, ip, lsl #18
    4fb4:	01006229 	tsteq	r0, r9, lsr #4
    4fb8:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    4fbc:	00000008 	andeq	r0, r0, r8
    4fc0:	171d0121 	ldrne	r0, [sp, -r1, lsr #2]
    4fc4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4fc8:	81010103 	tsthi	r1, r3, lsl #2
	...
    4fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    4fd8:	000d1b9c 	muleq	sp, ip, fp
    4fdc:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4fe0:	2d030801 	stccs	8, cr0, [r3, #-4]
    4fe4:	00000116 	andeq	r0, r0, r6, lsl r1
    4fe8:	0000192a 	andeq	r1, r0, sl, lsr #18
    4fec:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    4ff0:	03080100 	movweq	r0, #33024	; 0x8100
    4ff4:	000d1b36 	andeq	r1, sp, r6, lsr fp
    4ff8:	00194800 	andseq	r4, r9, r0, lsl #16
    4ffc:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    5000:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    5004:	00813f03 	addeq	r3, r1, r3, lsl #30
    5008:	19660000 	stmdbne	r6!, {}^	; <UNPREDICTABLE>
    500c:	62290000 	eorvs	r0, r9, #0
    5010:	030c0100 	movweq	r0, #49408	; 0xc100
    5014:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5018:	040a0000 	streq	r0, [sl], #-0
    501c:	000000e3 	andeq	r0, r0, r3, ror #1
    5020:	184b0121 	stmdane	fp, {r0, r5, r8}^
    5024:	cd010000 	stcgt	0, cr0, [r1, #-0]
    5028:	16010102 	strne	r0, [r1], -r2, lsl #2
    502c:	4c000001 	stcmi	0, cr0, [r0], {1}
    5030:	08000022 	stmdaeq	r0, {r1, r5}
    5034:	01000023 	tsteq	r0, r3, lsr #32
    5038:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    503c:	00792b00 	rsbseq	r2, r9, r0, lsl #22
    5040:	cd010000 	stcgt	0, cr0, [r1, #-0]
    5044:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    5048:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
    504c:	66220000 	strtvs	r0, [r2], -r0
    5050:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    5054:	00813902 	addeq	r3, r1, r2, lsl #18
    5058:	19a20000 	stmibne	r2!, {}	; <UNPREDICTABLE>
    505c:	f92b0000 			; <UNDEFINED> instruction: 0xf92b0000
    5060:	01000018 	tsteq	r0, r8, lsl r0
    5064:	814102cd 	smlalbthi	r0, r1, sp, r2
    5068:	cb000000 	blgt	5070 <__aeabi_lmul+0x594>
    506c:	22000019 	andcs	r0, r0, #25
    5070:	00677275 	rsbeq	r7, r7, r5, ror r2
    5074:	1102ce01 	tstne	r2, r1, lsl #28
    5078:	000000c1 	andeq	r0, r0, r1, asr #1
    507c:	00001a15 	andeq	r1, r0, r5, lsl sl
    5080:	01006228 	tsteq	r0, r8, lsr #4
    5084:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    5088:	28000008 	stmdacs	r0, {r3}
    508c:	3000001a 	andcc	r0, r0, sl, lsl r0
    5090:	0000183d 	andeq	r1, r0, sp, lsr r8
    5094:	0b02d001 	bleq	b90a0 <__ccfg+0x990f8>
    5098:	00000355 	andeq	r0, r0, r5, asr r3
    509c:	2a649102 	bcs	19294ac <__ccfg+0x1909504>
    50a0:	d1010073 	tstle	r1, r3, ror r0
    50a4:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    50a8:	57010000 	strpl	r0, [r1, -r0]
    50ac:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    50b0:	02d20100 	sbcseq	r0, r2, #0, 2
    50b4:	00008106 	andeq	r8, r0, r6, lsl #2
    50b8:	001a4600 	andseq	r4, sl, r0, lsl #12
    50bc:	01210000 			; <UNDEFINED> instruction: 0x01210000
    50c0:	0000181a 	andeq	r1, r0, sl, lsl r8
    50c4:	0102a401 	tsteq	r2, r1, lsl #8
    50c8:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    50d4:	729c0100 	addsvc	r0, ip, #0, 2
    50d8:	2200000e 	andcs	r0, r0, #14
    50dc:	01006466 	tsteq	r0, r6, ror #8
    50e0:	812a02a4 	smulwbhi	sl, r4, r2
    50e4:	6f000000 	svcvs	0x00000000
    50e8:	2b00001a 	blcs	5158 <__aeabi_lmul+0x67c>
    50ec:	00001900 	andeq	r1, r0, r0, lsl #18
    50f0:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    50f4:	00000081 	andeq	r0, r0, r1, lsl #1
    50f8:	00001aa3 	andeq	r1, r0, r3, lsr #21
    50fc:	01007328 	tsteq	r0, r8, lsr #6
    5100:	400d02a8 	andmi	r0, sp, r8, lsr #5
    5104:	d7000007 	strle	r0, [r0, -r7]
    5108:	2800001a 	stmdacs	r0, {r1, r3, r4}
    510c:	0100716e 	tsteq	r0, lr, ror #2
    5110:	810602a9 	smlatbhi	r6, r9, r2, r0
    5114:	3c000000 	stccc	0, cr0, [r0], {-0}
    5118:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    511c:	01007172 	tsteq	r0, r2, ror r1
    5120:	8a0b02aa 	bhi	2c5bd0 <__ccfg+0x2a5c28>
    5124:	5a000007 	bpl	5148 <__aeabi_lmul+0x66c>
    5128:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    512c:	ab010062 	blge	452bc <__ccfg+0x25314>
    5130:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    5134:	1b780000 	blne	1e0513c <__ccfg+0x1de5194>
    5138:	08310000 	ldmdaeq	r1!, {}	; <UNPREDICTABLE>
    513c:	01000018 	tsteq	r0, r8, lsl r0
    5140:	000102c0 	andeq	r0, r1, r0, asr #5
    5144:	32000000 	andcc	r0, r0, #0
    5148:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    5154:	0a02bb01 	beq	b3d60 <__ccfg+0x93db8>
    5158:	00116033 	andseq	r6, r1, r3, lsr r0
    515c:	116b2600 	cmnne	fp, r0, lsl #12
    5160:	1ba10000 	blne	fe845168 <_estack+0xde840168>
    5164:	76260000 	strtvc	r0, [r6], -r0
    5168:	b4000011 	strlt	r0, [r0], #-17	; 0xffffffef
    516c:	0000001b 	andeq	r0, r0, fp, lsl r0
    5170:	e9012100 	stmdb	r1, {r8, sp}
    5174:	01000016 	tsteq	r0, r6, lsl r0
    5178:	0101027d 	tsteq	r1, sp, ror r2
    517c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    5188:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    518c:	66220000 	strtvs	r0, [r2], -r0
    5190:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    5194:	00812a02 	addeq	r2, r1, r2, lsl #20
    5198:	1bc70000 	blne	ff1c51a0 <_estack+0xdf1c01a0>
    519c:	002b0000 	eoreq	r0, fp, r0
    51a0:	01000019 	tsteq	r0, r9, lsl r0
    51a4:	8132027d 	teqhi	r2, sp, ror r2
    51a8:	fb000000 	blx	51b2 <__aeabi_lmul+0x6d6>
    51ac:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    51b0:	81010073 	tsthi	r1, r3, ror r0
    51b4:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    51b8:	1c240000 	stcne	0, cr0, [r4], #-0
    51bc:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    51c0:	82010071 	andhi	r0, r1, #113	; 0x71
    51c4:	00810602 	addeq	r0, r1, r2, lsl #12
    51c8:	1c890000 	stcne	0, cr0, [r9], {0}
    51cc:	72280000 	eorvc	r0, r8, #0
    51d0:	83010071 	movwhi	r0, #4209	; 0x1071
    51d4:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    51d8:	1ca70000 	stcne	0, cr0, [r7]
    51dc:	62280000 	eorvs	r0, r8, #0
    51e0:	02840100 	addeq	r0, r4, #0, 2
    51e4:	00089d0c 	andeq	r9, r8, ip, lsl #26
    51e8:	001cd000 	andseq	sp, ip, r0
    51ec:	01210000 			; <UNDEFINED> instruction: 0x01210000
    51f0:	00001905 	andeq	r1, r0, r5, lsl #18
    51f4:	01025601 	tsteq	r2, r1, lsl #12
    51f8:	00011601 	andeq	r1, r1, r1, lsl #12
    51fc:	0021cc00 	eoreq	ip, r1, r0, lsl #24
    5200:	00224c00 	eoreq	r4, r2, r0, lsl #24
    5204:	5c9c0100 	ldfpls	f0, [ip], {0}
    5208:	2b00000f 	blcs	524c <__aeabi_lmul+0x770>
    520c:	00000079 	andeq	r0, r0, r9, ror r0
    5210:	2d025601 	stccs	6, cr5, [r2, #-4]
    5214:	000000cd 	andeq	r0, r0, sp, asr #1
    5218:	00001d04 	andeq	r1, r0, r4, lsl #26
    521c:	00646622 	rsbeq	r6, r4, r2, lsr #12
    5220:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    5224:	00000081 	andeq	r0, r0, r1, lsl #1
    5228:	00001d17 	andeq	r1, r0, r7, lsl sp
    522c:	01007028 	tsteq	r0, r8, lsr #32
    5230:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    5234:	56000001 	strpl	r0, [r0], -r1
    5238:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    523c:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    5240:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    5244:	1d690000 	stclne	0, cr0, [r9, #-0]
    5248:	72280000 	eorvc	r0, r8, #0
    524c:	5f010071 	svcpl	0x00010071
    5250:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    5254:	1d920000 	ldcne	0, cr0, [r2]
    5258:	21000000 	mrscs	r0, (UNDEF: 0)
    525c:	0018d001 	andseq	sp, r8, r1
    5260:	024a0100 	subeq	r0, sl, #0, 2
    5264:	00810101 	addeq	r0, r1, r1, lsl #2
    5268:	21a80000 			; <UNDEFINED> instruction: 0x21a80000
    526c:	21cc0000 	biccs	r0, ip, r0
    5270:	9c010000 	stcls	0, cr0, [r1], {-0}
    5274:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    5278:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    527c:	024a0100 	subeq	r0, sl, #0, 2
    5280:	00008129 	andeq	r8, r0, r9, lsr #2
    5284:	001dcc00 	andseq	ip, sp, r0, lsl #24
    5288:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    528c:	024a0100 	subeq	r0, sl, #0, 2
    5290:	0007d43f 	andeq	sp, r7, pc, lsr r4
    5294:	00510100 	subseq	r0, r1, r0, lsl #2
    5298:	185e0121 	ldmdane	lr, {r0, r5, r8}^
    529c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    52a0:	81010102 	tsthi	r1, r2, lsl #2
	...
    52ac:	01000000 	mrseq	r0, (UNDEF: 0)
    52b0:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    52b4:	00792b00 	rsbseq	r2, r9, r0, lsl #22
    52b8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    52bc:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    52c0:	1dea0000 	stclne	0, cr0, [sl]
    52c4:	66220000 	strtvs	r0, [r2], -r0
    52c8:	29010064 	stmdbcs	r1, {r2, r5, r6}
    52cc:	00813602 	addeq	r3, r1, r2, lsl #12
    52d0:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    52d4:	73280000 			; <UNDEFINED> instruction: 0x73280000
    52d8:	022b0100 	eoreq	r0, fp, #0, 2
    52dc:	0007400d 	andeq	r4, r7, sp
    52e0:	001e5200 	andseq	r5, lr, r0, lsl #4
    52e4:	00622800 	rsbeq	r2, r2, r0, lsl #16
    52e8:	0c022c01 	stceq	12, cr2, [r2], {1}
    52ec:	0000089d 	muleq	r0, sp, r8
    52f0:	00001e65 	andeq	r1, r0, r5, ror #28
    52f4:	8f012100 	svchi	0x00012100
    52f8:	01000017 	tsteq	r0, r7, lsl r0
    52fc:	010101f6 	strdeq	r0, [r1, -r6]
    5300:	00000081 	andeq	r0, r0, r1, lsl #1
    5304:	000020e8 	andeq	r2, r0, r8, ror #1
    5308:	000021a8 	andeq	r2, r0, r8, lsr #3
    530c:	10839c01 	addne	r9, r3, r1, lsl #24
    5310:	792b0000 	stmdbvc	fp!, {}	; <UNPREDICTABLE>
    5314:	01000000 	mrseq	r0, (UNDEF: 0)
    5318:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    531c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5320:	2200001e 	andcs	r0, r0, #30
    5324:	00796870 	rsbseq	r6, r9, r0, ror r8
    5328:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    532c:	00000081 	andeq	r0, r0, r1, lsl #1
    5330:	00001ea1 	andeq	r1, r0, r1, lsr #29
    5334:	0018b52b 	andseq	fp, r8, fp, lsr #10
    5338:	01f60100 	mvnseq	r0, r0, lsl #2
    533c:	0000813e 	andeq	r8, r0, lr, lsr r1
    5340:	001ef600 	andseq	pc, lr, r0, lsl #12
    5344:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    5348:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    534c:	00810601 	addeq	r0, r1, r1, lsl #12
    5350:	1f2e0000 	svcne	0x002e0000
    5354:	fc360000 	ldc2	0, cr0, [r6], #-0
    5358:	01000017 	tsteq	r0, r7, lsl r0
    535c:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    5360:	28000005 	stmdacs	r0, {r0, r2}
    5364:	fa010073 	blx	45538 <__ccfg+0x25590>
    5368:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    536c:	1f4c0000 	svcne	0x004c0000
    5370:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    5374:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    5378:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    537c:	91020000 	mrsls	r0, (UNDEF: 2)
    5380:	01270054 	qsubeq	r0, r4, r7
    5384:	00001824 	andeq	r1, r0, r4, lsr #16
    5388:	01013b01 	tsteq	r1, r1, lsl #22
    538c:	00207801 	eoreq	r7, r0, r1, lsl #16
    5390:	0020e800 	eoreq	lr, r0, r0, lsl #16
    5394:	bb9c0100 	bllt	fe70579c <_estack+0xde70079c>
    5398:	22000010 	andcs	r0, r0, #16
    539c:	3b010070 	blcc	45564 <__ccfg+0x255bc>
    53a0:	01162e01 	tsteq	r6, r1, lsl #28
    53a4:	1f960000 	svcne	0x00960000
    53a8:	62280000 	eorvs	r0, r8, #0
    53ac:	01410100 	mrseq	r0, (UNDEF: 81)
    53b0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    53b4:	001fbf00 	andseq	fp, pc, r0, lsl #30
    53b8:	61370000 	teqvs	r7, r0
    53bc:	01006270 	tsteq	r0, r0, ror r2
    53c0:	01010114 	tsteq	r1, r4, lsl r1
    53c4:	0000089d 	muleq	r0, sp, r8
    53c8:	00001f60 	andeq	r1, r0, r0, ror #30
    53cc:	00001f76 	andeq	r1, r0, r6, ror pc
    53d0:	11029c01 	tstne	r2, r1, lsl #24
    53d4:	a72b0000 	strge	r0, [fp, -r0]!
    53d8:	0100001d 	tsteq	r0, sp, lsl r0
    53dc:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    53e0:	f3000000 	vhadd.u8	d0, d0, d0
    53e4:	2a00001f 	bcs	5468 <patchGenfskRfe+0x6c>
    53e8:	19010070 	stmdbne	r1, {r4, r5, r6}
    53ec:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    53f0:	50010000 	andpl	r0, r1, r0
    53f4:	00736329 	rsbseq	r6, r3, r9, lsr #6
    53f8:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    53fc:	000000cd 	andeq	r0, r0, sp, asr #1
    5400:	6c723800 	ldclvs	8, cr3, [r2], #-0
    5404:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    5408:	90010101 	andls	r0, r1, r1, lsl #2
    540c:	9e00001f 	mcrls	0, 0, r0, cr0, cr15, {0}
    5410:	0100001f 	tsteq	r0, pc, lsl r0
    5414:	00112a9c 	mulseq	r1, ip, sl
    5418:	00702200 	rsbseq	r2, r0, r0, lsl #4
    541c:	2b010401 	blcs	46428 <__ccfg+0x26480>
    5420:	0000089d 	muleq	r0, sp, r8
    5424:	00002006 	andeq	r2, r0, r6
    5428:	172b3900 	strne	r3, [fp, -r0, lsl #18]!
    542c:	e0010000 	and	r0, r1, r0
    5430:	4e010101 	adfmis	f0, f1, f1
    5434:	3a000011 	bcc	5480 <patchGenfskRfe+0x84>
    5438:	e0010070 	and	r0, r1, r0, ror r0
    543c:	00089d2f 	andeq	r9, r8, pc, lsr #26
    5440:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    5444:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    5448:	00000081 	andeq	r0, r0, r1, lsl #1
    544c:	17aa3b00 	strne	r3, [sl, r0, lsl #22]!
    5450:	cf010000 	svcgt	0x00010000
    5454:	00810101 	addeq	r0, r1, r1, lsl #2
    5458:	81010000 	mrshi	r0, (UNDEF: 1)
    545c:	3a000011 	bcc	54a8 <patchGenfskRfe+0xac>
    5460:	0100716f 	tsteq	r0, pc, ror #2
    5464:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    5468:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    546c:	d3010071 	movwle	r0, #4209	; 0x1071
    5470:	00008106 	andeq	r8, r0, r6, lsl #2
    5474:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    5478:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    547c:	00000008 	andeq	r0, r0, r8
    5480:	716e653d 	cmnvc	lr, sp, lsr r5
    5484:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    5488:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    548c:	713a0000 	teqvc	sl, r0
    5490:	2aa80100 	bcs	fea05898 <_estack+0xdea00898>
    5494:	0000078a 	andeq	r0, r0, sl, lsl #15
    5498:	0100703a 	tsteq	r0, sl, lsr r0
    549c:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    54a0:	3d000000 	stccc	0, cr0, [r0, #-0]
    54a4:	00716564 	rsbseq	r6, r1, r4, ror #10
    54a8:	01017f01 	tsteq	r1, r1, lsl #30
    54ac:	0011bd01 	andseq	fp, r1, r1, lsl #26
    54b0:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    54b4:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    54b8:	00000008 	andeq	r0, r0, r8
    54bc:	0011a43e 	andseq	sl, r1, lr, lsr r4
    54c0:	001f7600 	andseq	r7, pc, r0, lsl #12
    54c4:	001f9000 	andseq	r9, pc, r0
    54c8:	f29c0100 	vaddw.s16	q0, q6, d0
    54cc:	3f000011 	svccc	0x00000011
    54d0:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    54d4:	a4405001 	strbge	r5, [r0], #-1
    54d8:	7c000011 	stcvc	0, cr0, [r0], {17}
    54dc:	8e00001f 	mcrhi	0, 0, r0, cr0, cr15, {0}
    54e0:	0100001f 	tsteq	r0, pc, lsl r0
    54e4:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    54e8:	19000011 	stmdbne	r0, {r0, r4}
    54ec:	00000020 	andeq	r0, r0, r0, lsr #32
    54f0:	11813e00 	orrne	r3, r1, r0, lsl #28
    54f4:	1fa00000 	svcne	0x00a00000
    54f8:	1fec0000 	svcne	0x00ec0000
    54fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5500:	0000123b 	andeq	r1, r0, fp, lsr r2
    5504:	00118f24 	andseq	r8, r1, r4, lsr #30
    5508:	00202c00 	eoreq	r2, r0, r0, lsl #24
    550c:	11992400 	orrsne	r2, r9, r0, lsl #8
    5510:	20600000 	rsbcs	r0, r0, r0
    5514:	81400000 	mrshi	r0, (UNDEF: 64)
    5518:	ac000011 	stcge	0, cr0, [r0], {17}
    551c:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
    5520:	0100001f 	tsteq	r0, pc, lsl r0
    5524:	8f2401a8 	svchi	0x002401a8
    5528:	94000011 	strls	r0, [r0], #-17	; 0xffffffef
    552c:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
    5530:	00001199 	muleq	r0, r9, r1
    5534:	000020b2 	strheq	r2, [r0], -r2	; <UNPREDICTABLE>
    5538:	2a3e0000 	bcs	f85540 <__ccfg+0xf65598>
    553c:	ec000011 	stc	0, cr0, [r0], {17}
    5540:	7800001f 	stmdavc	r0, {r0, r1, r2, r3, r4}
    5544:	01000020 	tsteq	r0, r0, lsr #32
    5548:	0012809c 	mulseq	r2, ip, r0
    554c:	11382400 	teqne	r8, r0, lsl #8
    5550:	20d00000 	sbcscs	r0, r0, r0
    5554:	42240000 	eormi	r0, r4, #0
    5558:	25000011 	strcs	r0, [r0, #-17]	; 0xffffffef
    555c:	41000021 	tstmi	r0, r1, lsr #32
    5560:	0000112a 	andeq	r1, r0, sl, lsr #2
    5564:	00002020 	andeq	r2, r0, r0, lsr #32
    5568:	00000918 	andeq	r0, r0, r8, lsl r9
    556c:	3301e001 	movwcc	lr, #4097	; 0x1001
    5570:	00001142 	andeq	r1, r0, r2, asr #2
    5574:	00113824 	andseq	r3, r1, r4, lsr #16
    5578:	00213800 	eoreq	r3, r1, r0, lsl #16
    557c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5580:	00000b99 	muleq	r0, r9, fp
    5584:	00002308 	andeq	r2, r0, r8, lsl #6
    5588:	00002334 	andeq	r2, r0, r4, lsr r3
    558c:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    5590:	ad240000 	stcge	0, cr0, [r4, #-0]
    5594:	5600000b 	strpl	r0, [r0], -fp
    5598:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    559c:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    55a0:	00002174 	andeq	r2, r0, r4, ror r1
    55a4:	000bc724 	andeq	ip, fp, r4, lsr #14
    55a8:	00219d00 	eoreq	r9, r1, r0, lsl #26
    55ac:	0b993200 	bleq	fe651db4 <_estack+0xde64cdb4>
    55b0:	231c0000 	tstcs	ip, #0
    55b4:	23240000 			; <UNDEFINED> instruction: 0x23240000
    55b8:	52010000 	andpl	r0, r1, #0
    55bc:	ad330103 	ldfges	f0, [r3, #-12]!
    55c0:	2400000b 	strcs	r0, [r0], #-11
    55c4:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    55c8:	000021c6 	andeq	r2, r0, r6, asr #3
    55cc:	000bc724 	andeq	ip, fp, r4, lsr #14
    55d0:	0021d900 	eoreq	sp, r1, r0, lsl #18
    55d4:	42000000 	andmi	r0, r0, #0
    55d8:	00000a4a 	andeq	r0, r0, sl, asr #20
    55dc:	00002394 	muleq	r0, r4, r3
    55e0:	000023fc 	strdeq	r2, [r0], -ip
    55e4:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    55e8:	ec00000a 	stc	0, cr0, [r0], {10}
    55ec:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    55f0:	00000a6b 	andeq	r0, r0, fp, ror #20
    55f4:	000021ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    55f8:	000a7824 	andeq	r7, sl, r4, lsr #16
    55fc:	00225f00 	eoreq	r5, r2, r0, lsl #30
    5600:	0a852600 	beq	fe14ee08 <_estack+0xde149e08>
    5604:	22a90000 	adccs	r0, r9, #0
    5608:	4a320000 	bmi	c85610 <__ccfg+0xc65668>
    560c:	a200000a 	andge	r0, r0, #10
    5610:	a6000023 	strge	r0, [r0], -r3, lsr #32
    5614:	01000023 	tsteq	r0, r3, lsr #32
    5618:	33010386 	movwcc	r0, #4998	; 0x1386
    561c:	00000a5e 	andeq	r0, r0, lr, asr sl
    5620:	000a6b24 	andeq	r6, sl, r4, lsr #22
    5624:	0022dd00 	eoreq	sp, r2, r0, lsl #26
    5628:	0a783300 	beq	1e12230 <__ccfg+0x1df2288>
    562c:	85430000 	strbhi	r0, [r3, #-0]
    5630:	0000000a 	andeq	r0, r0, sl
    5634:	01740000 	cmneq	r4, r0
    5638:	00030000 	andeq	r0, r3, r0
    563c:	00001265 	andeq	r1, r0, r5, ror #4
    5640:	00ac0104 	adceq	r0, ip, r4, lsl #2
    5644:	870c0000 	strhi	r0, [ip, -r0]
    5648:	10000019 	andne	r0, r0, r9, lsl r0
    564c:	4800000e 	stmdami	r0, {r1, r2, r3}
    5650:	0000000a 	andeq	r0, r0, sl
    5654:	3a000000 	bcc	565c <patchGenfskRfe+0x260>
    5658:	0200003f 	andeq	r0, r0, #63	; 0x3f
    565c:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    5660:	02020000 	andeq	r0, r2, #0
    5664:	000a6b05 	andeq	r6, sl, r5, lsl #22
    5668:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    566c:	000007fd 	strdeq	r0, [r0], -sp
    5670:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    5674:	02000007 	andeq	r0, r0, #7
    5678:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    567c:	02020000 	andeq	r0, r2, #0
    5680:	000d6c07 	andeq	r6, sp, r7, lsl #24
    5684:	29ba0300 	ldmibcs	sl!, {r8, r9}
    5688:	34020000 	strcc	r0, [r2], #-0
    568c:	00005b19 	andeq	r5, r0, r9, lsl fp
    5690:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5694:	00000426 	andeq	r0, r0, r6, lsr #8
    5698:	21070802 	tstcs	r7, r2, lsl #16
    569c:	04000004 	streq	r0, [r0], #-4
    56a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    56a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    56a8:	00042b07 	andeq	r2, r4, r7, lsl #22
    56ac:	82040500 	andhi	r0, r4, #0, 10
    56b0:	06000000 	streq	r0, [r0], -r0
    56b4:	00000077 	andeq	r0, r0, r7, ror r0
    56b8:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    56bc:	0000004f 	andeq	r0, r0, pc, asr #32
    56c0:	00197a08 	andseq	r7, r9, r8, lsl #20
    56c4:	117f0100 	cmnne	pc, r0, lsl #2
    56c8:	0000004f 	andeq	r0, r0, pc, asr #32
    56cc:	59080101 	stmdbpl	r8, {r0, r8}
    56d0:	01000047 	tsteq	r0, r7, asr #32
    56d4:	004f1180 	subeq	r1, pc, r0, lsl #3
    56d8:	01010000 	mrseq	r0, (UNDEF: 1)
    56dc:	0019cb08 	andseq	ip, r9, r8, lsl #22
    56e0:	11810100 	orrne	r0, r1, r0, lsl #2
    56e4:	0000004f 	andeq	r0, r0, pc, asr #32
    56e8:	c6080101 	strgt	r0, [r8], -r1, lsl #2
    56ec:	01000019 	tsteq	r0, r9, lsl r0
    56f0:	004f1182 	subeq	r1, pc, r2, lsl #3
    56f4:	01010000 	mrseq	r0, (UNDEF: 1)
    56f8:	00198108 	andseq	r8, r9, r8, lsl #2
    56fc:	11830100 	orrne	r0, r3, r0, lsl #2
    5700:	0000004f 	andeq	r0, r0, pc, asr #32
    5704:	4c080101 	stfmis	f0, [r8], {1}
    5708:	01000019 	tsteq	r0, r9, lsl r0
    570c:	004f1184 	subeq	r1, pc, r4, lsl #3
    5710:	01010000 	mrseq	r0, (UNDEF: 1)
    5714:	00007d09 	andeq	r7, r0, r9, lsl #26
    5718:	0000ee00 	andeq	lr, r0, r0, lsl #28
    571c:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    5720:	00310000 	eorseq	r0, r1, r0
    5724:	0000de06 	andeq	sp, r0, r6, lsl #28
    5728:	19e40b00 	stmibne	r4!, {r8, r9, fp}^
    572c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    5730:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    5734:	03050100 	movweq	r0, #20736	; 0x5100
    5738:	00000000 	andeq	r0, r0, r0
    573c:	0019d20c 	andseq	sp, r9, ip, lsl #4
    5740:	01280100 			; <UNDEFINED> instruction: 0x01280100
    5744:	259e0101 	ldrcs	r0, [lr, #257]	; 0x101
    5748:	25a00000 	strcs	r0, [r0, #0]!
    574c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5750:	00195d0c 	andseq	r5, r9, ip, lsl #26
    5754:	01160100 	tsteq	r6, r0, lsl #2
    5758:	259c0101 	ldrcs	r0, [ip, #257]	; 0x101
    575c:	259e0000 	ldrcs	r0, [lr]
    5760:	9c010000 	stcls	0, cr0, [r1], {-0}
    5764:	00196d0c 	andseq	r6, r9, ip, lsl #26
    5768:	01040100 	mrseq	r0, (UNDEF: 20)
    576c:	259a0101 	ldrcs	r0, [sl, #257]	; 0x101
    5770:	259c0000 	ldrcs	r0, [ip]
    5774:	9c010000 	stcls	0, cr0, [r1], {-0}
    5778:	19fb010d 	ldmibne	fp!, {r0, r2, r3, r8}^
    577c:	d2010000 	andle	r0, r1, #0
    5780:	25a00101 	strcs	r0, [r0, #257]!	; 0x101
    5784:	25e40000 	strbcs	r0, [r4, #0]!
    5788:	9c010000 	stcls	0, cr0, [r1], {-0}
    578c:	0019540e 	andseq	r5, r9, lr, lsl #8
    5790:	0fd40100 	svceq	0x00d40100
    5794:	00000084 	andeq	r0, r0, r4, lsl #1
    5798:	000022f0 	strdeq	r2, [r0], -r0
    579c:	0019f10e 	andseq	pc, r9, lr, lsl #2
    57a0:	1ad40100 	bne	ff505ba8 <_estack+0xdf500ba8>
    57a4:	00000084 	andeq	r0, r0, r4, lsl #1
    57a8:	0000230e 	andeq	r2, r0, lr, lsl #6
    57ac:	05370000 	ldreq	r0, [r7, #-0]!
    57b0:	00030000 	andeq	r0, r3, r0
    57b4:	0000132a 	andeq	r1, r0, sl, lsr #6
    57b8:	00ac0104 	adceq	r0, ip, r4, lsl #2
    57bc:	930c0000 	movwls	r0, #49152	; 0xc000
    57c0:	1000001a 	andne	r0, r0, sl, lsl r0
    57c4:	6200000e 	andvs	r0, r0, #14
    57c8:	02000040 	andeq	r0, r0, #64	; 0x40
    57cc:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    57d0:	02020000 	andeq	r0, r2, #0
    57d4:	000a6b05 	andeq	r6, sl, r5, lsl #22
    57d8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    57dc:	000007fd 	strdeq	r0, [r0], -sp
    57e0:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    57e4:	03000007 	movweq	r0, #7
    57e8:	00002a22 	andeq	r2, r0, r2, lsr #20
    57ec:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    57f0:	02000000 	andeq	r0, r0, #0
    57f4:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    57f8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    57fc:	0100002e 	tsteq	r0, lr, lsr #32
    5800:	00581931 	subseq	r1, r8, r1, lsr r9
    5804:	02020000 	andeq	r0, r2, #0
    5808:	000d6c07 	andeq	r6, sp, r7, lsl #24
    580c:	29ba0300 	ldmibcs	sl!, {r8, r9}
    5810:	34010000 	strcc	r0, [r1], #-0
    5814:	00006b19 	andeq	r6, r0, r9, lsl fp
    5818:	07040200 	streq	r0, [r4, -r0, lsl #4]
    581c:	00000426 	andeq	r0, r0, r6, lsr #8
    5820:	21070802 	tstcs	r7, r2, lsl #16
    5824:	04000004 	streq	r0, [r0], #-4
    5828:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    582c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5830:	00042b07 	andeq	r2, r4, r7, lsl #22
    5834:	02580500 	subseq	r0, r8, #0, 10
    5838:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    583c:	b6060000 	strlt	r0, [r6], -r0
    5840:	0200001b 	andeq	r0, r0, #27
    5844:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    5848:	06000000 	streq	r0, [r0], -r0
    584c:	00001acb 	andeq	r1, r0, fp, asr #21
    5850:	5f103202 	svcpl	0x00103202
    5854:	04000000 	streq	r0, [r0], #-0
    5858:	001a5b06 	andseq	r5, sl, r6, lsl #22
    585c:	10330200 	eorsne	r0, r3, r0, lsl #4
    5860:	0000005f 	andeq	r0, r0, pc, asr r0
    5864:	1a450608 	bne	114708c <__ccfg+0x11270e4>
    5868:	34020000 	strcc	r0, [r2], #-0
    586c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5870:	04060c00 	streq	r0, [r6], #-3072	; 0xfffff400
    5874:	0200001a 	andeq	r0, r0, #26
    5878:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    587c:	06100000 	ldreq	r0, [r0], -r0
    5880:	00001a15 	andeq	r1, r0, r5, lsl sl
    5884:	5f103602 	svcpl	0x00103602
    5888:	14000000 	strne	r0, [r0], #-0
    588c:	001a3506 	andseq	r3, sl, r6, lsl #10
    5890:	10370200 	eorsne	r0, r7, r0, lsl #4
    5894:	0000005f 	andeq	r0, r0, pc, asr r0
    5898:	1b5b0618 	blne	16c7100 <__ccfg+0x16a7158>
    589c:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    58a0:	00005f10 	andeq	r5, r0, r0, lsl pc
    58a4:	73061c00 	movwvc	r1, #27648	; 0x6c00
    58a8:	0200001a 	andeq	r0, r0, #26
    58ac:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    58b0:	06200000 	strteq	r0, [r0], -r0
    58b4:	00001a83 	andeq	r1, r0, r3, lsl #21
    58b8:	5f103a02 	svcpl	0x00103a02
    58bc:	24000000 	strcs	r0, [r0], #-0
    58c0:	001b8106 	andseq	r8, fp, r6, lsl #2
    58c4:	103b0200 	eorsne	r0, fp, r0, lsl #4
    58c8:	0000005f 	andeq	r0, r0, pc, asr r0
    58cc:	1b910628 	blne	fe447174 <_estack+0xde442174>
    58d0:	3c020000 	stccc	0, cr0, [r2], {-0}
    58d4:	00005f10 	andeq	r5, r0, r0, lsl pc
    58d8:	26062c00 	strcs	r2, [r6], -r0, lsl #24
    58dc:	0200001a 	andeq	r0, r0, #26
    58e0:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    58e4:	06300000 	ldrteq	r0, [r0], -r0
    58e8:	00001b21 	andeq	r1, r0, r1, lsr #22
    58ec:	5f103e02 	svcpl	0x00103e02
    58f0:	34000000 	strcc	r0, [r0], #-0
    58f4:	001bc606 	andseq	ip, fp, r6, lsl #12
    58f8:	103f0200 	eorsne	r0, pc, r0, lsl #4
    58fc:	0000005f 	andeq	r0, r0, pc, asr r0
    5900:	1adc0638 	bne	ff7071e8 <_estack+0xdf7021e8>
    5904:	40020000 	andmi	r0, r2, r0
    5908:	00005f10 	andeq	r5, r0, r0, lsl pc
    590c:	f0063c00 			; <UNDEFINED> instruction: 0xf0063c00
    5910:	0200001a 	andeq	r0, r0, #26
    5914:	005f1041 	subseq	r1, pc, r1, asr #32
    5918:	06400000 	strbeq	r0, [r0], -r0
    591c:	00001b45 	andeq	r1, r0, r5, asr #22
    5920:	5f104202 	svcpl	0x00104202
    5924:	44000000 	strmi	r0, [r0], #-0
    5928:	001b3106 	andseq	r3, fp, r6, lsl #2
    592c:	10430200 	subne	r0, r3, r0, lsl #4
    5930:	0000005f 	andeq	r0, r0, pc, asr r0
    5934:	1b6c0648 	blne	1b0725c <__ccfg+0x1ae72b4>
    5938:	44020000 	strmi	r0, [r2], #-0
    593c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5940:	a1064c00 	tstge	r6, r0, lsl #24
    5944:	0200001b 	andeq	r0, r0, #27
    5948:	005f1045 	subseq	r1, pc, r5, asr #32
    594c:	06500000 	ldrbeq	r0, [r0], -r0
    5950:	00001b0b 	andeq	r1, r0, fp, lsl #22
    5954:	5f104602 	svcpl	0x00104602
    5958:	54000000 	strpl	r0, [r0], #-0
    595c:	1b040300 	blne	106564 <__ccfg+0xe65bc>
    5960:	47020000 	strmi	r0, [r2, -r0]
    5964:	00008703 	andeq	r8, r0, r3, lsl #14
    5968:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    596c:	54080000 	strpl	r0, [r8], #-0
    5970:	0200001a 	andeq	r0, r0, #26
    5974:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    5978:	01010000 	mrseq	r0, (UNDEF: 1)
    597c:	00290103 	eoreq	r0, r9, r3, lsl #2
    5980:	12270300 	eorne	r0, r7, #0, 6
    5984:	0000004c 	andeq	r0, r0, ip, asr #32
    5988:	0001ce07 	andeq	ip, r1, r7, lsl #28
    598c:	01ce0900 	biceq	r0, lr, r0, lsl #18
    5990:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    5994:	0300001d 	movweq	r0, #29
    5998:	0039122b 	eorseq	r1, r9, fp, lsr #4
    599c:	e4090000 	str	r0, [r9], #-0
    59a0:	03000001 	movweq	r0, #1
    59a4:	00002953 	andeq	r2, r0, r3, asr r9
    59a8:	5f122c03 	svcpl	0x00122c03
    59ac:	07000000 	streq	r0, [r0, -r0]
    59b0:	000001f5 	strdeq	r0, [r0], -r5
    59b4:	00064603 	andeq	r4, r6, r3, lsl #12
    59b8:	122d0300 	eorne	r0, sp, #0, 6
    59bc:	0000005f 	andeq	r0, r0, pc, asr r0
    59c0:	32030805 	andcc	r0, r3, #327680	; 0x50000
    59c4:	0002a009 	andeq	sl, r2, r9
    59c8:	00340a00 	eorseq	r0, r4, r0, lsl #20
    59cc:	34030000 	strcc	r0, [r3], #-0
    59d0:	0001e407 	andeq	lr, r1, r7, lsl #8
    59d4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    59d8:	064c0a00 	strbeq	r0, [ip], -r0, lsl #20
    59dc:	35030000 	strcc	r0, [r3, #-0]
    59e0:	0001e403 	andeq	lr, r1, r3, lsl #8
    59e4:	06010100 	streq	r0, [r1], -r0, lsl #2
    59e8:	02e70a00 	rsceq	r0, r7, #0, 20
    59ec:	36030000 	strcc	r0, [r3], -r0
    59f0:	0001e403 	andeq	lr, r1, r3, lsl #8
    59f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    59f8:	06b70a00 	ldrteq	r0, [r7], r0, lsl #20
    59fc:	37030000 	strcc	r0, [r3, -r0]
    5a00:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a04:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5a08:	0a9f0a00 	beq	fe7c8210 <_estack+0xde7c3210>
    5a0c:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5a10:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a14:	00040100 	andeq	r0, r4, r0, lsl #2
    5a18:	065b0600 	ldrbeq	r0, [fp], -r0, lsl #12
    5a1c:	3a030000 	bcc	c5a24 <__ccfg+0xa5a7c>
    5a20:	0001e407 	andeq	lr, r1, r7, lsl #8
    5a24:	fb060100 	blx	185e2e <__ccfg+0x165e86>
    5a28:	03000008 	movweq	r0, #8
    5a2c:	01e4033c 	mvneq	r0, ip, lsr r3
    5a30:	06020000 	streq	r0, [r2], -r0
    5a34:	00000f40 	andeq	r0, r0, r0, asr #30
    5a38:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    5a3c:	03000001 	movweq	r0, #1
    5a40:	00091306 	andeq	r1, r9, r6, lsl #6
    5a44:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    5a48:	000001f5 	strdeq	r0, [r0], -r5
    5a4c:	1d030004 	stcne	0, cr0, [r3, #-16]
    5a50:	03000003 	movweq	r0, #3
    5a54:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    5a58:	a0090000 	andge	r0, r9, r0
    5a5c:	08000002 	stmdaeq	r0, {r1}
    5a60:	000006be 			; <UNDEFINED> instruction: 0x000006be
    5a64:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    5a68:	01000002 	tsteq	r0, r2
    5a6c:	01a00801 	lsleq	r0, r1, #16
    5a70:	45030000 	strmi	r0, [r3, #-0]
    5a74:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    5a78:	0b010100 	bleq	45e80 <__ccfg+0x25ed8>
    5a7c:	0002d304 	andeq	sp, r2, r4, lsl #6
    5a80:	08010200 	stmdaeq	r1, {r9}
    5a84:	00000c64 	andeq	r0, r0, r4, ror #24
    5a88:	0002d307 	andeq	sp, r2, r7, lsl #6
    5a8c:	03260800 			; <UNDEFINED> instruction: 0x03260800
    5a90:	45030000 	strmi	r0, [r3, #-0]
    5a94:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    5a98:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5a9c:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    5aa0:	0000031e 	andeq	r0, r0, lr, lsl r3
    5aa4:	000cd806 	andeq	sp, ip, r6, lsl #16
    5aa8:	0b900400 	bleq	fe406ab0 <_estack+0xde401ab0>
    5aac:	0000005f 	andeq	r0, r0, pc, asr r0
    5ab0:	107b0600 	rsbsne	r0, fp, r0, lsl #12
    5ab4:	91040000 	mrsls	r0, (UNDEF: 4)
    5ab8:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5abc:	c5060400 	strgt	r0, [r6, #-1024]	; 0xfffffc00
    5ac0:	04000001 	streq	r0, [r0], #-1
    5ac4:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    5ac8:	00060000 	andeq	r0, r6, r0
    5acc:	000ccc03 	andeq	ip, ip, r3, lsl #24
    5ad0:	03930400 	orrseq	r0, r3, #0, 8
    5ad4:	000002ed 	andeq	r0, r0, sp, ror #5
    5ad8:	00031e0c 	andeq	r1, r3, ip, lsl #28
    5adc:	00033500 	andeq	r3, r3, r0, lsl #10
    5ae0:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    5ae4:	0000093d 	andeq	r0, r0, sp, lsr r9
    5ae8:	2a0f9904 	bcs	3ebf00 <__ccfg+0x3cbf58>
    5aec:	01000003 	tsteq	r0, r3
    5af0:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    5af4:	036d0991 	cmneq	sp, #2375680	; 0x244000
    5af8:	1a0a0000 	bne	285b00 <__ccfg+0x265b58>
    5afc:	05000009 	streq	r0, [r0, #-9]
    5b00:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    5b04:	07010000 	streq	r0, [r1, -r0]
    5b08:	cc0a0001 	stcgt	0, cr0, [sl], {1}
    5b0c:	05000005 	streq	r0, [r0, #-5]
    5b10:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    5b14:	01010000 	mrseq	r0, (UNDEF: 1)
    5b18:	03000000 	movweq	r0, #0
    5b1c:	00000aab 	andeq	r0, r0, fp, lsr #21
    5b20:	43039605 	movwmi	r9, #13829	; 0x3605
    5b24:	07000003 	streq	r0, [r0, -r3]
    5b28:	0000036d 	andeq	r0, r0, sp, ror #6
    5b2c:	0003790c 	andeq	r7, r3, ip, lsl #18
    5b30:	00038900 	andeq	r8, r3, r0, lsl #18
    5b34:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5b38:	0000037e 	andeq	r0, r0, lr, ror r3
    5b3c:	0003aa08 	andeq	sl, r3, r8, lsl #20
    5b40:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    5b44:	00000389 	andeq	r0, r0, r9, lsl #7
    5b48:	da0c0101 	ble	305f54 <__ccfg+0x2e5fac>
    5b4c:	a7000001 	strge	r0, [r0, -r1]
    5b50:	0d000003 	stceq	0, cr0, [r0, #-12]
    5b54:	039c0700 	orrseq	r0, ip, #0, 14
    5b58:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    5b5c:	06000006 	streq	r0, [r0], -r6
    5b60:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    5b64:	01010000 	mrseq	r0, (UNDEF: 1)
    5b68:	0008dd08 	andeq	sp, r8, r8, lsl #26
    5b6c:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    5b70:	000001f5 	strdeq	r0, [r0], -r5
    5b74:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    5b78:	0700000c 	streq	r0, [r0, -ip]
    5b7c:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    5b80:	0b000003 	bleq	5b94 <patchImageGenfsk+0xe4>
    5b84:	0003db04 	andeq	sp, r3, r4, lsl #22
    5b88:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    5b8c:	10000003 	andne	r0, r0, r3
    5b90:	000001ce 	andeq	r0, r0, lr, asr #3
    5b94:	02da0c00 	sbcseq	r0, sl, #0, 24
    5b98:	03f20000 	mvnseq	r0, #0
    5b9c:	000d0000 	andeq	r0, sp, r0
    5ba0:	0003e707 	andeq	lr, r3, r7, lsl #14
    5ba4:	09e61100 	stmibeq	r6!, {r8, ip}^
    5ba8:	7f070000 	svcvc	0x00070000
    5bac:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    5bb0:	01010000 	mrseq	r0, (UNDEF: 1)
    5bb4:	00039611 	andeq	r9, r3, r1, lsl r6
    5bb8:	01820700 	orreq	r0, r2, r0, lsl #14
    5bbc:	00020114 	andeq	r0, r2, r4, lsl r1
    5bc0:	11010100 	mrsne	r0, (UNDEF: 17)
    5bc4:	0000036e 	andeq	r0, r0, lr, ror #6
    5bc8:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    5bcc:	000001f5 	strdeq	r0, [r0], -r5
    5bd0:	08120101 	ldmdaeq	r2, {r0, r8}
    5bd4:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    5bd8:	0000044b 	andeq	r0, r0, fp, asr #8
    5bdc:	003ca713 	eorseq	sl, ip, r3, lsl r7
    5be0:	03070700 	movweq	r0, #30464	; 0x7700
    5be4:	0001ce07 	andeq	ip, r1, r7, lsl #28
    5be8:	d3130000 	tstle	r3, #0
    5bec:	0700000f 	streq	r0, [r0, -pc]
    5bf0:	06080308 	streq	r0, [r8], -r8, lsl #6
    5bf4:	04000002 	streq	r0, [r0], #-2
    5bf8:	0a090e00 	beq	249400 <__ccfg+0x229458>
    5bfc:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    5c00:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    5c04:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    5c08:	30000000 	andcc	r0, r0, r0
    5c0c:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    5c10:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    5c14:	001f2a13 	andseq	r2, pc, r3, lsl sl	; <UNPREDICTABLE>
    5c18:	03140700 	tsteq	r4, #0, 14
    5c1c:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5c20:	e7130000 	ldr	r0, [r3, -r0]
    5c24:	0700000b 	streq	r0, [r0, -fp]
    5c28:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    5c2c:	02000001 	andeq	r0, r0, #1
    5c30:	004c9413 	subeq	r9, ip, r3, lsl r4
    5c34:	03160700 	tsteq	r6, #0, 14
    5c38:	0003c80b 	andeq	ip, r3, fp, lsl #16
    5c3c:	5a130400 	bpl	4c6c44 <__ccfg+0x4a6c9c>
    5c40:	07000047 	streq	r0, [r0, -r7, asr #32]
    5c44:	06090317 			; <UNDEFINED> instruction: 0x06090317
    5c48:	08000002 	stmdaeq	r0, {r1}
    5c4c:	00000f13 	andeq	r0, r0, r3, lsl pc
    5c50:	03180700 	tsteq	r8, #0, 14
    5c54:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    5c58:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    5c5c:	07000009 	streq	r0, [r0, -r9]
    5c60:	cb150319 	blgt	5468cc <__ccfg+0x526924>
    5c64:	2c000004 	stccs	0, cr0, [r0], {4}
    5c68:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    5c6c:	04cb0000 	strbeq	r0, [fp], #0
    5c70:	80150000 	andshi	r0, r5, r0
    5c74:	03000000 	movweq	r0, #0
    5c78:	58040b00 	stmdapl	r4, {r8, r9, fp}
    5c7c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5c80:	00000bdc 	ldrdeq	r0, [r0], -ip
    5c84:	1b031c07 	blne	ccca8 <__ccfg+0xacd00>
    5c88:	00000458 	andeq	r0, r0, r8, asr r4
    5c8c:	000bbc11 	andeq	fp, fp, r1, lsl ip
    5c90:	031e0700 	tsteq	lr, #0, 14
    5c94:	0004ed14 	andeq	lr, r4, r4, lsl sp
    5c98:	0b010100 	bleq	460a0 <__ccfg+0x260f8>
    5c9c:	0004d104 	andeq	sp, r4, r4, lsl #2
    5ca0:	070f0800 	streq	r0, [pc, -r0, lsl #16]
    5ca4:	1d080000 	stcne	0, cr0, [r8, #-0]
    5ca8:	0001ce13 	andeq	ip, r1, r3, lsl lr
    5cac:	08010100 	stmdaeq	r1, {r8}
    5cb0:	000002ee 	andeq	r0, r0, lr, ror #5
    5cb4:	df1a1e08 	svcle	0x001a1e08
    5cb8:	01000001 	tsteq	r0, r1
    5cbc:	0c690801 	stcleq	8, cr0, [r9], #-4
    5cc0:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    5cc4:	0001df24 	andeq	sp, r1, r4, lsr #30
    5cc8:	08010100 	stmdaeq	r1, {r8}
    5ccc:	00000c87 	andeq	r0, r0, r7, lsl #25
    5cd0:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    5cd4:	01000004 	tsteq	r0, r4
    5cd8:	01c01601 	biceq	r1, r0, r1, lsl #12
    5cdc:	17090000 	strne	r0, [r9, -r0]
    5ce0:	03050e02 	movweq	r0, #24066	; 0x5e02
    5ce4:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    5ce8:	00050000 	andeq	r0, r5, r0
    5cec:	49000300 	stmdbmi	r0, {r8, r9}
    5cf0:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    5cf4:	0000ac01 	andeq	sl, r0, r1, lsl #24
    5cf8:	1be80c00 	blne	ffa08d00 <_estack+0xdfa03d00>
    5cfc:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    5d00:	0a980000 	beq	fe605d08 <_estack+0xde600d08>
    5d04:	00000000 	andeq	r0, r0, r0
    5d08:	41ef0000 	mvnmi	r0, r0
    5d0c:	01020000 	mrseq	r0, (UNDEF: 2)
    5d10:	000c5d06 	andeq	r5, ip, r6, lsl #26
    5d14:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5d18:	00000a6b 	andeq	r0, r0, fp, ror #20
    5d1c:	fd050402 	stc2	4, cr0, [r5, #-8]
    5d20:	02000007 	andeq	r0, r0, #7
    5d24:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    5d28:	22030000 	andcs	r0, r3, #0
    5d2c:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    5d30:	004d182e 	subeq	r1, sp, lr, lsr #16
    5d34:	01020000 	mrseq	r0, (UNDEF: 2)
    5d38:	000c5b08 	andeq	r5, ip, r8, lsl #22
    5d3c:	2e180300 	cdpcs	3, 1, cr0, cr8, cr0, {0}
    5d40:	31040000 	mrscc	r0, (UNDEF: 4)
    5d44:	00006019 	andeq	r6, r0, r9, lsl r0
    5d48:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5d4c:	00000d6c 	andeq	r0, r0, ip, ror #26
    5d50:	0029ba03 	eoreq	fp, r9, r3, lsl #20
    5d54:	19340400 	ldmdbne	r4!, {sl}
    5d58:	00000073 	andeq	r0, r0, r3, ror r0
    5d5c:	26070402 	strcs	r0, [r7], -r2, lsl #8
    5d60:	02000004 	andeq	r0, r0, #4
    5d64:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    5d68:	04040000 	streq	r0, [r4], #-0
    5d6c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5d70:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5d74:	0000042b 	andeq	r0, r0, fp, lsr #8
    5d78:	00290103 	eoreq	r0, r9, r3, lsl #2
    5d7c:	12270500 	eorne	r0, r7, #0, 10
    5d80:	00000054 	andeq	r0, r0, r4, asr r0
    5d84:	00008f05 	andeq	r8, r0, r5, lsl #30
    5d88:	008f0600 	addeq	r0, pc, r0, lsl #12
    5d8c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    5d90:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    5d94:	0041122b 	subeq	r1, r1, fp, lsr #4
    5d98:	a5060000 	strge	r0, [r6, #-0]
    5d9c:	05000000 	streq	r0, [r0, #-0]
    5da0:	000000a5 	andeq	r0, r0, r5, lsr #1
    5da4:	00295303 	eoreq	r5, r9, r3, lsl #6
    5da8:	122c0500 	eorne	r0, ip, #0, 10
    5dac:	00000067 	andeq	r0, r0, r7, rrx
    5db0:	0000bb05 	andeq	fp, r0, r5, lsl #22
    5db4:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    5db8:	2d050000 	stccs	0, cr0, [r5, #-0]
    5dbc:	00006712 	andeq	r6, r0, r2, lsl r7
    5dc0:	0bb40300 	bleq	fed069c8 <_estack+0xded019c8>
    5dc4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5dc8:	0000e410 	andeq	lr, r0, r0, lsl r4
    5dcc:	8f040700 	svchi	0x00040700
    5dd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5dd4:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    5dd8:	00000178 	andeq	r0, r0, r8, ror r1
    5ddc:	00003409 	andeq	r3, r0, r9, lsl #8
    5de0:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    5de4:	000000a5 	andeq	r0, r0, r5, lsr #1
    5de8:	00070101 	andeq	r0, r7, r1, lsl #2
    5dec:	00064c09 	andeq	r4, r6, r9, lsl #24
    5df0:	03350500 	teqeq	r5, #0, 10
    5df4:	000000a5 	andeq	r0, r0, r5, lsr #1
    5df8:	00060101 	andeq	r0, r6, r1, lsl #2
    5dfc:	0002e709 	andeq	lr, r2, r9, lsl #14
    5e00:	03360500 	teqeq	r6, #0, 10
    5e04:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e08:	00050101 	andeq	r0, r5, r1, lsl #2
    5e0c:	0006b709 	andeq	fp, r6, r9, lsl #14
    5e10:	03370500 	teqeq	r7, #0, 10
    5e14:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e18:	00040101 	andeq	r0, r4, r1, lsl #2
    5e1c:	000a9f09 	andeq	r9, sl, r9, lsl #30
    5e20:	03380500 	teqeq	r8, #0, 10
    5e24:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e28:	00000401 	andeq	r0, r0, r1, lsl #8
    5e2c:	00065b0a 	andeq	r5, r6, sl, lsl #22
    5e30:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    5e34:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e38:	08fb0a01 	ldmeq	fp!, {r0, r9, fp}^
    5e3c:	3c050000 	stccc	0, cr0, [r5], {-0}
    5e40:	0000a503 	andeq	sl, r0, r3, lsl #10
    5e44:	400a0200 	andmi	r0, sl, r0, lsl #4
    5e48:	0500000f 	streq	r0, [r0, #-15]
    5e4c:	00a5033d 	adceq	r0, r5, sp, lsr r3
    5e50:	0a030000 	beq	c5e58 <__ccfg+0xa5eb0>
    5e54:	00000913 	andeq	r0, r0, r3, lsl r9
    5e58:	bb083f05 	bllt	215a74 <__ccfg+0x1f5acc>
    5e5c:	04000000 	streq	r0, [r0], #-0
    5e60:	031d0300 	tsteq	sp, #0, 6
    5e64:	41050000 	mrsmi	r0, (UNDEF: 5)
    5e68:	0000ea03 	andeq	lr, r0, r3, lsl #20
    5e6c:	01780600 	cmneq	r8, r0, lsl #12
    5e70:	be0b0000 	cdplt	0, 0, cr0, cr11, cr0, {0}
    5e74:	05000006 	streq	r0, [r0, #-6]
    5e78:	01841a43 	orreq	r1, r4, r3, asr #20
    5e7c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e80:	0001a00b 	andeq	sl, r1, fp
    5e84:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    5e88:	000001a5 	andeq	r0, r0, r5, lsr #3
    5e8c:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5e90:	000001ab 	andeq	r0, r0, fp, lsr #3
    5e94:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    5e98:	0500000c 	streq	r0, [r0, #-12]
    5e9c:	000001ab 	andeq	r0, r0, fp, lsr #3
    5ea0:	0003260b 	andeq	r2, r3, fp, lsl #12
    5ea4:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    5ea8:	000001a5 	andeq	r0, r0, r5, lsr #3
    5eac:	08080101 	stmdaeq	r8, {r0, r8}
    5eb0:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    5eb4:	0a000001 	beq	5ec0 <__exidx_end+0x140>
    5eb8:	00000cd8 	ldrdeq	r0, [r0], -r8
    5ebc:	670b9006 	strvs	r9, [fp, -r6]
    5ec0:	00000000 	andeq	r0, r0, r0
    5ec4:	00107b0a 	andseq	r7, r0, sl, lsl #22
    5ec8:	08910600 	ldmeq	r1, {r9, sl}
    5ecc:	0000008f 	andeq	r0, r0, pc, lsl #1
    5ed0:	01c50a04 	biceq	r0, r5, r4, lsl #20
    5ed4:	92060000 	andls	r0, r6, #0
    5ed8:	0000b110 	andeq	fp, r0, r0, lsl r1
    5edc:	03000600 	movweq	r0, #1536	; 0x600
    5ee0:	00000ccc 	andeq	r0, r0, ip, asr #25
    5ee4:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    5ee8:	0c000001 	stceq	0, cr0, [r0], {1}
    5eec:	000001f6 	strdeq	r0, [r0], -r6
    5ef0:	0000020d 	andeq	r0, r0, sp, lsl #4
    5ef4:	3d0b000d 	stccc	0, cr0, [fp, #-52]	; 0xffffffcc
    5ef8:	06000009 	streq	r0, [r0], -r9
    5efc:	02020f99 	andeq	r0, r2, #612	; 0x264
    5f00:	01010000 	mrseq	r0, (UNDEF: 1)
    5f04:	00b60407 	adcseq	r0, r6, r7, lsl #8
    5f08:	01080000 	mrseq	r0, (UNDEF: 8)
    5f0c:	4b099107 	blmi	26a330 <__ccfg+0x24a388>
    5f10:	09000002 	stmdbeq	r0, {r1}
    5f14:	0000091a 	andeq	r0, r0, sl, lsl r9
    5f18:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    5f1c:	01000000 	mrseq	r0, (UNDEF: 0)
    5f20:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    5f24:	000005cc 	andeq	r0, r0, ip, asr #11
    5f28:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    5f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    5f30:	00000001 	andeq	r0, r0, r1
    5f34:	000aab03 	andeq	sl, sl, r3, lsl #22
    5f38:	03960700 	orrseq	r0, r6, #0, 14
    5f3c:	00000221 	andeq	r0, r0, r1, lsr #4
    5f40:	00024b05 	andeq	r4, r2, r5, lsl #22
    5f44:	02570c00 	subseq	r0, r7, #0, 24
    5f48:	02670000 	rsbeq	r0, r7, #0
    5f4c:	000d0000 	andeq	r0, sp, r0
    5f50:	00025c05 	andeq	r5, r2, r5, lsl #24
    5f54:	03aa0b00 			; <UNDEFINED> instruction: 0x03aa0b00
    5f58:	9c070000 	stcls	0, cr0, [r7], {-0}
    5f5c:	00026717 	andeq	r6, r2, r7, lsl r7
    5f60:	0c010100 	stfeqs	f0, [r1], {-0}
    5f64:	0000009b 	muleq	r0, fp, r0
    5f68:	00000285 	andeq	r0, r0, r5, lsl #5
    5f6c:	7a05000d 	bvc	145fa8 <__ccfg+0x126000>
    5f70:	0b000002 	bleq	5f80 <__exidx_end+0x200>
    5f74:	0000060e 	andeq	r0, r0, lr, lsl #12
    5f78:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    5f7c:	01000002 	tsteq	r0, r2
    5f80:	08dd0b01 	ldmeq	sp, {r0, r8, r9, fp}^
    5f84:	c3060000 	movwgt	r0, #24576	; 0x6000
    5f88:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    5f8c:	0e010100 	adfeqs	f0, f1, f0
    5f90:	00000c72 	andeq	r0, r0, r2, ror ip
    5f94:	10016e09 	andne	r6, r1, r9, lsl #28
    5f98:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    5f9c:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    5fa0:	010f0000 	mrseq	r0, CPSR
    5fa4:	000002c5 	andeq	r0, r0, r5, asr #5
    5fa8:	00008f10 	andeq	r8, r0, r0, lsl pc
    5fac:	b20c0000 	andlt	r0, ip, #0
    5fb0:	d0000001 	andle	r0, r0, r1
    5fb4:	0d000002 	stceq	0, cr0, [r0, #-8]
    5fb8:	02c50500 	sbceq	r0, r5, #0, 10
    5fbc:	e6110000 	ldr	r0, [r1], -r0
    5fc0:	09000009 	stmdbeq	r0, {r0, r3}
    5fc4:	d016017f 	andsle	r0, r6, pc, ror r1
    5fc8:	01000002 	tsteq	r0, r2
    5fcc:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    5fd0:	82090000 	andhi	r0, r9, #0
    5fd4:	00c71401 	sbceq	r1, r7, r1, lsl #8
    5fd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5fdc:	00036e11 	andeq	r6, r3, r1, lsl lr
    5fe0:	02d80900 	sbcseq	r0, r8, #0, 18
    5fe4:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    5fe8:	12010100 	andne	r0, r1, #0, 2
    5fec:	03030908 	movweq	r0, #14600	; 0x3908
    5ff0:	00032909 	andeq	r2, r3, r9, lsl #18
    5ff4:	3ca71300 	stccc	3, cr1, [r7]
    5ff8:	07090000 	streq	r0, [r9, -r0]
    5ffc:	008f0703 	addeq	r0, pc, r3, lsl #14
    6000:	13000000 	movwne	r0, #0
    6004:	00000fd3 	ldrdeq	r0, [r0], -r3
    6008:	08030809 	stmdaeq	r3, {r0, r3, fp}
    600c:	000000cc 	andeq	r0, r0, ip, asr #1
    6010:	090e0004 	stmdbeq	lr, {r2}
    6014:	0900000a 	stmdbeq	r0, {r1, r3}
    6018:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    601c:	14000003 	strne	r0, [r0], #-3
    6020:	00000029 	andeq	r0, r0, r9, lsr #32
    6024:	030b0930 	movweq	r0, #47408	; 0xb930
    6028:	00039908 	andeq	r9, r3, r8, lsl #18
    602c:	1f2a1300 	svcne	0x002a1300
    6030:	14090000 	strne	r0, [r9], #-0
    6034:	008f0803 	addeq	r0, pc, r3, lsl #16
    6038:	13000000 	movwne	r0, #0
    603c:	00000be7 	andeq	r0, r0, r7, ror #23
    6040:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    6044:	0000008f 	andeq	r0, r0, pc, lsl #1
    6048:	4c941302 	ldcmi	3, cr1, [r4], {2}
    604c:	16090000 	strne	r0, [r9], -r0
    6050:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    6054:	13040000 	movwne	r0, #16384	; 0x4000
    6058:	0000475a 	andeq	r4, r0, sl, asr r7
    605c:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    6060:	000000cc 	andeq	r0, r0, ip, asr #1
    6064:	000f1308 	andeq	r1, pc, r8, lsl #6
    6068:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    606c:	03990f03 	orrseq	r0, r9, #3, 30
    6070:	130c0000 	movwne	r0, #49152	; 0xc000
    6074:	0000095d 	andeq	r0, r0, sp, asr r9
    6078:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    607c:	000003a9 	andeq	r0, r0, r9, lsr #7
    6080:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    6084:	a9000003 	stmdbge	r0, {r0, r1}
    6088:	15000003 	strne	r0, [r0, #-3]
    608c:	00000088 	andeq	r0, r0, r8, lsl #1
    6090:	04070003 	streq	r0, [r7], #-3
    6094:	00000336 	andeq	r0, r0, r6, lsr r3
    6098:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    609c:	031c0900 	tsteq	ip, #0, 18
    60a0:	0003361b 	andeq	r3, r3, fp, lsl r6
    60a4:	0bbc1100 	bleq	fef0a4ac <_estack+0xdef054ac>
    60a8:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    60ac:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    60b0:	01010000 	mrseq	r0, (UNDEF: 1)
    60b4:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    60b8:	0f0b0000 	svceq	0x000b0000
    60bc:	0a000007 	beq	60e0 <__exidx_end+0x360>
    60c0:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    60c4:	01010000 	mrseq	r0, (UNDEF: 1)
    60c8:	0002ee0b 	andeq	lr, r2, fp, lsl #28
    60cc:	1a1e0a00 	bne	7888d4 <__ccfg+0x76892c>
    60d0:	000000a0 	andeq	r0, r0, r0, lsr #1
    60d4:	690b0101 	stmdbvs	fp, {r0, r8}
    60d8:	0a00000c 	beq	6110 <__exidx_end+0x390>
    60dc:	00a0241e 	adceq	r2, r0, lr, lsl r4
    60e0:	01010000 	mrseq	r0, (UNDEF: 1)
    60e4:	000c870b 	andeq	r8, ip, fp, lsl #14
    60e8:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    60ec:	000003cb 	andeq	r0, r0, fp, asr #7
    60f0:	6c160101 	ldfvss	f0, [r6], {1}
    60f4:	01000002 	tsteq	r0, r2
    60f8:	0305100d 	movweq	r1, #20493	; 0x500d
    60fc:	0000537d 	andeq	r5, r0, sp, ror r3
    6100:	1c320117 	ldfnes	f0, [r2], #-92	; 0xffffffa4
    6104:	11010000 	mrsne	r0, (UNDEF: 1)
    6108:	00000106 	andeq	r0, r0, r6, lsl #2
    610c:	00000000 	andeq	r0, r0, r0
    6110:	9c010000 	stcls	0, cr0, [r1], {-0}
    6114:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    6118:	00747318 	rsbseq	r7, r4, r8, lsl r3
    611c:	8f1c1101 	svchi	0x001c1101
    6120:	2c000000 	stccs	0, cr0, [r0], {-0}
    6124:	19000023 	stmdbne	r0, {r0, r1, r5}
    6128:	00001c2d 	andeq	r1, r0, sp, lsr #24
    612c:	1b2c1101 	blne	b0a538 <__ccfg+0xaea590>
    6130:	4a000002 	bmi	6140 <__exidx_end+0x3c0>
    6134:	18000023 	stmdane	r0, {r0, r1, r5}
    6138:	006c6176 	rsbeq	r6, ip, r6, ror r1
    613c:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    6140:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6144:	1a000023 	bne	61d8 <__exidx_end+0x458>
    6148:	13010070 	movwne	r0, #4208	; 0x1070
    614c:	0004bb12 	andeq	fp, r4, r2, lsl fp
    6150:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    6154:	8f071401 	svchi	0x00071401
    6158:	86000000 	strhi	r0, [r0], -r0
    615c:	1a000023 	bne	61f0 <__exidx_end+0x470>
    6160:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    6164:	0000a507 	andeq	sl, r0, r7, lsl #10
    6168:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    6174:	1c010000 	stcne	0, cr0, [r1], {-0}
    6178:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    6184:	1f010000 	svcne	0x00010000
    6188:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    618c:	00000000 	andeq	r0, r0, r0
    6190:	0a700000 	beq	1c06198 <__ccfg+0x1be61f0>
    6194:	26010000 	strcs	r0, [r1], -r0
    6198:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    619c:	23990000 	orrscs	r0, r9, #0
    61a0:	00000000 	andeq	r0, r0, r0
    61a4:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    61a8:	011f0000 	tsteq	pc, r0
    61ac:	00001c42 	andeq	r1, r0, r2, asr #24
    61b0:	00060f01 	andeq	r0, r6, r1, lsl #30
    61b4:	00000000 	andeq	r0, r0, r0
    61b8:	01000000 	mrseq	r0, (UNDEF: 0)
    61bc:	1284209c 	addne	r2, r4, #156	; 0x9c
    61c0:	5b020000 	blpl	861c8 <__ccfg+0x66220>
    61c4:	20030135 	andcs	r0, r3, r5, lsr r1
    61c8:	00000fa4 	andeq	r0, r0, r4, lsr #31
    61cc:	01355002 	teqeq	r5, r2
    61d0:	1bdb2103 	blne	ff6ce5e4 <_estack+0xdf6c95e4>
    61d4:	a4030000 	strge	r0, [r3], #-0
    61d8:	00670101 	rsbeq	r0, r7, r1, lsl #2
    61dc:	22030000 	andcs	r0, r3, #0
    61e0:	00001127 	andeq	r1, r0, r7, lsr #2
    61e4:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    61e8:	00000000 	andeq	r0, r0, r0
    61ec:	0004f600 	andeq	pc, r4, r0, lsl #12
    61f0:	3a000300 	bcc	6df8 <__exidx_end+0x1078>
    61f4:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    61f8:	0000ac01 	andeq	sl, r0, r1, lsl #24
    61fc:	1c8c0c00 	stcne	12, cr0, [ip], {0}
    6200:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    6204:	0b100000 	bleq	40620c <__ccfg+0x3e6264>
    6208:	00000000 	andeq	r0, r0, r0
    620c:	44910000 	ldrmi	r0, [r1], #0
    6210:	01020000 	mrseq	r0, (UNDEF: 2)
    6214:	000c5d06 	andeq	r5, ip, r6, lsl #26
    6218:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    621c:	00000a6b 	andeq	r0, r0, fp, ror #20
    6220:	fd050402 	stc2	4, cr0, [r5, #-8]
    6224:	02000007 	andeq	r0, r0, #7
    6228:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    622c:	22030000 	andcs	r0, r3, #0
    6230:	0300002a 	movweq	r0, #42	; 0x2a
    6234:	004d182e 	subeq	r1, sp, lr, lsr #16
    6238:	01020000 	mrseq	r0, (UNDEF: 2)
    623c:	000c5b08 	andeq	r5, ip, r8, lsl #22
    6240:	2e180300 	cdpcs	3, 1, cr0, cr8, cr0, {0}
    6244:	31030000 	mrscc	r0, (UNDEF: 3)
    6248:	00006019 	andeq	r6, r0, r9, lsl r0
    624c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6250:	00000d6c 	andeq	r0, r0, ip, ror #26
    6254:	0029ba03 	eoreq	fp, r9, r3, lsl #20
    6258:	19340300 	ldmdbne	r4!, {r8, r9}
    625c:	00000073 	andeq	r0, r0, r3, ror r0
    6260:	26070402 	strcs	r0, [r7], -r2, lsl #8
    6264:	02000004 	andeq	r0, r0, #4
    6268:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    626c:	04040000 	streq	r0, [r4], #-0
    6270:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6274:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6278:	0000042b 	andeq	r0, r0, fp, lsr #8
    627c:	00290103 	eoreq	r0, r9, r3, lsl #2
    6280:	12270400 	eorne	r0, r7, #0, 8
    6284:	00000054 	andeq	r0, r0, r4, asr r0
    6288:	00008f05 	andeq	r8, r0, r5, lsl #30
    628c:	008f0600 	addeq	r0, pc, r0, lsl #12
    6290:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    6294:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    6298:	0041122b 	subeq	r1, r1, fp, lsr #4
    629c:	a5060000 	strge	r0, [r6, #-0]
    62a0:	03000000 	movweq	r0, #0
    62a4:	00002953 	andeq	r2, r0, r3, asr r9
    62a8:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    62ac:	05000000 	streq	r0, [r0, #-0]
    62b0:	000000b6 	strheq	r0, [r0], -r6
    62b4:	00064603 	andeq	r4, r6, r3, lsl #12
    62b8:	122d0400 	eorne	r0, sp, #0, 8
    62bc:	00000067 	andeq	r0, r0, r7, rrx
    62c0:	32040807 	andcc	r0, r4, #458752	; 0x70000
    62c4:	00016109 	andeq	r6, r1, r9, lsl #2
    62c8:	00340800 	eorseq	r0, r4, r0, lsl #16
    62cc:	34040000 	strcc	r0, [r4], #-0
    62d0:	0000a507 	andeq	sl, r0, r7, lsl #10
    62d4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    62d8:	064c0800 	strbeq	r0, [ip], -r0, lsl #16
    62dc:	35040000 	strcc	r0, [r4, #-0]
    62e0:	0000a503 	andeq	sl, r0, r3, lsl #10
    62e4:	06010100 	streq	r0, [r1], -r0, lsl #2
    62e8:	02e70800 	rsceq	r0, r7, #0, 16
    62ec:	36040000 	strcc	r0, [r4], -r0
    62f0:	0000a503 	andeq	sl, r0, r3, lsl #10
    62f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    62f8:	06b70800 	ldrteq	r0, [r7], r0, lsl #16
    62fc:	37040000 	strcc	r0, [r4, -r0]
    6300:	0000a503 	andeq	sl, r0, r3, lsl #10
    6304:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6308:	0a9f0800 	beq	fe7c8310 <_estack+0xde7c3310>
    630c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6310:	0000a503 	andeq	sl, r0, r3, lsl #10
    6314:	00040100 	andeq	r0, r4, r0, lsl #2
    6318:	065b0900 	ldrbeq	r0, [fp], -r0, lsl #18
    631c:	3a040000 	bcc	106324 <__ccfg+0xe637c>
    6320:	0000a507 	andeq	sl, r0, r7, lsl #10
    6324:	fb090100 	blx	24672e <__ccfg+0x226786>
    6328:	04000008 	streq	r0, [r0], #-8
    632c:	00a5033c 	adceq	r0, r5, ip, lsr r3
    6330:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    6334:	00000f40 	andeq	r0, r0, r0, asr #30
    6338:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    633c:	03000000 	movweq	r0, #0
    6340:	00091309 	andeq	r1, r9, r9, lsl #6
    6344:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    6348:	000000b6 	strheq	r0, [r0], -r6
    634c:	1d030004 	stcne	0, cr0, [r3, #-16]
    6350:	04000003 	streq	r0, [r0], #-3
    6354:	00d30341 	sbcseq	r0, r3, r1, asr #6
    6358:	61060000 	mrsvs	r0, (UNDEF: 6)
    635c:	0a000001 	beq	6368 <__exidx_end+0x5e8>
    6360:	000006be 			; <UNDEFINED> instruction: 0x000006be
    6364:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    6368:	01000001 	tsteq	r0, r1
    636c:	01a00a01 	lsleq	r0, r1, #20
    6370:	45040000 	strmi	r0, [r4, #-0]
    6374:	00018e0e 	andeq	r8, r1, lr, lsl #28
    6378:	0b010100 	bleq	46780 <__ccfg+0x267d8>
    637c:	00019404 	andeq	r9, r1, r4, lsl #8
    6380:	08010200 	stmdaeq	r1, {r9}
    6384:	00000c64 	andeq	r0, r0, r4, ror #24
    6388:	00019405 	andeq	r9, r1, r5, lsl #8
    638c:	03260a00 			; <UNDEFINED> instruction: 0x03260a00
    6390:	45040000 	strmi	r0, [r4, #-0]
    6394:	00018e1e 	andeq	r8, r1, lr, lsl lr
    6398:	07010100 	streq	r0, [r1, -r0, lsl #2]
    639c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    63a0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    63a4:	000cd809 	andeq	sp, ip, r9, lsl #16
    63a8:	0b900500 	bleq	fe4077b0 <_estack+0xde4027b0>
    63ac:	00000067 	andeq	r0, r0, r7, rrx
    63b0:	107b0900 	rsbsne	r0, fp, r0, lsl #18
    63b4:	91050000 	mrsls	r0, (UNDEF: 5)
    63b8:	00008f08 	andeq	r8, r0, r8, lsl #30
    63bc:	c5090400 	strgt	r0, [r9, #-1024]	; 0xfffffc00
    63c0:	05000001 	streq	r0, [r0, #-1]
    63c4:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    63c8:	00060000 	andeq	r0, r6, r0
    63cc:	000ccc03 	andeq	ip, ip, r3, lsl #24
    63d0:	03930500 	orrseq	r0, r3, #0, 10
    63d4:	000001ae 	andeq	r0, r0, lr, lsr #3
    63d8:	0001df0c 	andeq	sp, r1, ip, lsl #30
    63dc:	0001f600 	andeq	pc, r1, r0, lsl #12
    63e0:	0a000d00 	beq	97e8 <__exidx_end+0x3a68>
    63e4:	0000093d 	andeq	r0, r0, sp, lsr r9
    63e8:	eb0f9905 	bl	3ec804 <__ccfg+0x3cc85c>
    63ec:	01000001 	tsteq	r0, r1
    63f0:	06010701 	streq	r0, [r1], -r1, lsl #14
    63f4:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    63f8:	1a080000 	bne	206400 <__ccfg+0x1e6458>
    63fc:	06000009 	streq	r0, [r0], -r9
    6400:	00a50793 	umlaleq	r0, r5, r3, r7
    6404:	07010000 	streq	r0, [r1, -r0]
    6408:	cc080001 	stcgt	0, cr0, [r8], {1}
    640c:	06000005 	streq	r0, [r0], -r5
    6410:	00a50394 	umlaleq	r0, r5, r4, r3
    6414:	01010000 	mrseq	r0, (UNDEF: 1)
    6418:	03000000 	movweq	r0, #0
    641c:	00000aab 	andeq	r0, r0, fp, lsr #21
    6420:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    6424:	05000002 	streq	r0, [r0, #-2]
    6428:	0000022e 	andeq	r0, r0, lr, lsr #4
    642c:	00023a0c 	andeq	r3, r2, ip, lsl #20
    6430:	00024a00 	andeq	r4, r2, r0, lsl #20
    6434:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6438:	0000023f 	andeq	r0, r0, pc, lsr r2
    643c:	0003aa0a 	andeq	sl, r3, sl, lsl #20
    6440:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    6444:	0000024a 	andeq	r0, r0, sl, asr #4
    6448:	9b0c0101 	blls	306854 <__ccfg+0x2e68ac>
    644c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6450:	0d000002 	stceq	0, cr0, [r0, #-8]
    6454:	025d0500 	subseq	r0, sp, #0, 10
    6458:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    645c:	07000006 	streq	r0, [r0, -r6]
    6460:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    6464:	01010000 	mrseq	r0, (UNDEF: 1)
    6468:	0008dd0a 	andeq	sp, r8, sl, lsl #26
    646c:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6470:	000000b6 	strheq	r0, [r0], -r6
    6474:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    6478:	0800000c 	stmdaeq	r0, {r2, r3}
    647c:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    6480:	0b000002 	bleq	6490 <__exidx_end+0x710>
    6484:	00029c04 	andeq	r9, r2, r4, lsl #24
    6488:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    648c:	10000002 	andne	r0, r0, r2
    6490:	0000008f 	andeq	r0, r0, pc, lsl #1
    6494:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    6498:	02b30000 	adcseq	r0, r3, #0
    649c:	000d0000 	andeq	r0, sp, r0
    64a0:	0002a805 	andeq	sl, r2, r5, lsl #16
    64a4:	09e61100 	stmibeq	r6!, {r8, ip}^
    64a8:	7f080000 	svcvc	0x00080000
    64ac:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    64b0:	01010000 	mrseq	r0, (UNDEF: 1)
    64b4:	00039611 	andeq	r9, r3, r1, lsl r6
    64b8:	01820800 	orreq	r0, r2, r0, lsl #16
    64bc:	0000c214 	andeq	ip, r0, r4, lsl r2
    64c0:	11010100 	mrsne	r0, (UNDEF: 17)
    64c4:	0000036e 	andeq	r0, r0, lr, ror #6
    64c8:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    64cc:	000000b6 	strheq	r0, [r0], -r6
    64d0:	08120101 	ldmdaeq	r2, {r0, r8}
    64d4:	09030308 	stmdbeq	r3, {r3, r8, r9}
    64d8:	0000030c 	andeq	r0, r0, ip, lsl #6
    64dc:	003ca713 	eorseq	sl, ip, r3, lsl r7
    64e0:	03070800 	movweq	r0, #30720	; 0x7800
    64e4:	00008f07 	andeq	r8, r0, r7, lsl #30
    64e8:	d3130000 	tstle	r3, #0
    64ec:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    64f0:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    64f4:	04000000 	streq	r0, [r0], #-0
    64f8:	0a090e00 	beq	249d00 <__ccfg+0x229d58>
    64fc:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    6500:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    6504:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    6508:	30000000 	andcc	r0, r0, r0
    650c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    6510:	0000037c 	andeq	r0, r0, ip, ror r3
    6514:	001f2a13 	andseq	r2, pc, r3, lsl sl	; <UNPREDICTABLE>
    6518:	03140800 	tsteq	r4, #0, 16
    651c:	00008f08 	andeq	r8, r0, r8, lsl #30
    6520:	e7130000 	ldr	r0, [r3, -r0]
    6524:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6528:	8f080315 	svchi	0x00080315
    652c:	02000000 	andeq	r0, r0, #0
    6530:	004c9413 	subeq	r9, ip, r3, lsl r4
    6534:	03160800 	tsteq	r6, #0, 16
    6538:	0002890b 	andeq	r8, r2, fp, lsl #18
    653c:	5a130400 	bpl	4c7544 <__ccfg+0x4a759c>
    6540:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    6544:	c7090317 	smladgt	r9, r7, r3, r0
    6548:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    654c:	00000f13 	andeq	r0, r0, r3, lsl pc
    6550:	03180800 	tsteq	r8, #0, 16
    6554:	00037c0f 	andeq	r7, r3, pc, lsl #24
    6558:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    655c:	08000009 	stmdaeq	r0, {r0, r3}
    6560:	8c150319 	ldchi	3, cr0, [r5], {25}
    6564:	2c000003 	stccs	0, cr0, [r0], {3}
    6568:	030c0c00 	movweq	r0, #52224	; 0xcc00
    656c:	038c0000 	orreq	r0, ip, #0
    6570:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    6574:	03000000 	movweq	r0, #0
    6578:	19040b00 	stmdbne	r4, {r8, r9, fp}
    657c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6580:	00000bdc 	ldrdeq	r0, [r0], -ip
    6584:	1b031c08 	blne	cd5ac <__ccfg+0xad604>
    6588:	00000319 	andeq	r0, r0, r9, lsl r3
    658c:	000bbc11 	andeq	fp, fp, r1, lsl ip
    6590:	031e0800 	tsteq	lr, #0, 16
    6594:	0003ae14 	andeq	sl, r3, r4, lsl lr
    6598:	0b010100 	bleq	469a0 <__ccfg+0x269f8>
    659c:	00039204 	andeq	r9, r3, r4, lsl #4
    65a0:	070f0a00 	streq	r0, [pc, -r0, lsl #20]
    65a4:	1d090000 	stcne	0, cr0, [r9, #-0]
    65a8:	00008f13 	andeq	r8, r0, r3, lsl pc
    65ac:	0a010100 	beq	469b4 <__ccfg+0x26a0c>
    65b0:	000002ee 	andeq	r0, r0, lr, ror #5
    65b4:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    65b8:	01000000 	mrseq	r0, (UNDEF: 0)
    65bc:	0c690a01 			; <UNDEFINED> instruction: 0x0c690a01
    65c0:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    65c4:	0000a024 	andeq	sl, r0, r4, lsr #32
    65c8:	0a010100 	beq	469d0 <__ccfg+0x26a28>
    65cc:	00000c87 	andeq	r0, r0, r7, lsl #25
    65d0:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    65d4:	01000003 	tsteq	r0, r3
    65d8:	1c571601 	mrrcne	6, 0, r1, r7, cr1
    65dc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    65e0:	0002960f 	andeq	r9, r2, pc, lsl #12
    65e4:	00030500 	andeq	r0, r3, r0, lsl #10
    65e8:	16000000 	strne	r0, [r0], -r0
    65ec:	00001c68 	andeq	r1, r0, r8, ror #24
    65f0:	8f0d0901 	svchi	0x000d0901
    65f4:	05000000 	streq	r0, [r0, #-0]
    65f8:	00000003 	andeq	r0, r0, r3
    65fc:	026d1700 	rsbeq	r1, sp, #0, 14
    6600:	0a010000 	beq	46608 <__ccfg+0x26660>
    6604:	8203050c 	andhi	r0, r3, #12, 10	; 0x3000000
    6608:	18000053 	stmdane	r0, {r0, r1, r4, r6}
    660c:	001c7d01 	andseq	r7, ip, r1, lsl #26
    6610:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    6614:	00000001 	andeq	r0, r0, r1
    6618:	00000000 	andeq	r0, r0, r0
    661c:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    6620:	19000004 	stmdbne	r0, {r2}
    6624:	00746361 	rsbseq	r6, r4, r1, ror #6
    6628:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    662c:	ac000002 	stcge	0, cr0, [r0], {2}
    6630:	00000023 	andeq	r0, r0, r3, lsr #32
    6634:	1c700118 	ldfnee	f0, [r0], #-96	; 0xffffffa0
    6638:	1c010000 	stcne	0, cr0, [r1], {-0}
    663c:	00000101 	andeq	r0, r0, r1, lsl #2
    6640:	00000000 	andeq	r0, r0, r0
    6644:	9c010000 	stcls	0, cr0, [r1], {-0}
    6648:	000004de 	ldrdeq	r0, [r0], -lr
    664c:	000c331a 	andeq	r3, ip, sl, lsl r3
    6650:	011c0100 	tsteq	ip, r0, lsl #2
    6654:	0000008f 	andeq	r0, r0, pc, lsl #1
    6658:	000023e8 	andeq	r2, r0, r8, ror #7
    665c:	001c521b 	andseq	r5, ip, fp, lsl r2
    6660:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6664:	00000000 	andeq	r0, r0, r0
    6668:	001c5f1b 	andseq	r5, ip, fp, lsl pc
    666c:	01300100 	teqeq	r0, r0, lsl #2
    6670:	00000000 	andeq	r0, r0, r0
    6674:	001db31b 	andseq	fp, sp, fp, lsl r3
    6678:	01370100 	teqeq	r7, r0, lsl #2
    667c:	00000000 	andeq	r0, r0, r0
    6680:	0004de1c 	andeq	sp, r4, ip, lsl lr
    6684:	00000000 	andeq	r0, r0, r0
    6688:	000ab000 	andeq	fp, sl, r0
    668c:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    6690:	000004ad 	andeq	r0, r0, sp, lsr #9
    6694:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    6698:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    669c:	00000004 	andeq	r0, r0, r4
    66a0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    66a4:	0100000a 	tsteq	r0, sl
    66a8:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    66ac:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    66b0:	00000004 	andeq	r0, r0, r4
    66b4:	0004de1e 	andeq	sp, r4, lr, lsl lr
    66b8:	00000000 	andeq	r0, r0, r0
    66bc:	000af000 	andeq	pc, sl, r0
    66c0:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    66c4:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    66c8:	1f000000 	svcne	0x00000000
    66cc:	00001bdb 	ldrdeq	r1, [r0], -fp
    66d0:	0101a402 	tsteq	r1, r2, lsl #8
    66d4:	00000067 	andeq	r0, r0, r7, rrx
    66d8:	11272003 			; <UNDEFINED> instruction: 0x11272003
    66dc:	a4020000 	strge	r0, [r2], #-0
    66e0:	00006718 	andeq	r6, r0, r8, lsl r7
    66e4:	a7000000 	strge	r0, [r0, -r0]
    66e8:	0300000a 	movweq	r0, #10
    66ec:	00180500 	andseq	r0, r8, r0, lsl #10
    66f0:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    66f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    66f8:	00001d4d 	andeq	r1, r0, sp, asr #26
    66fc:	00000e10 	andeq	r0, r0, r0, lsl lr
    6700:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    6704:	00000000 	andeq	r0, r0, r0
    6708:	000047d6 	ldrdeq	r4, [r0], -r6
    670c:	5d060102 	stfpls	f0, [r6, #-8]
    6710:	0200000c 	andeq	r0, r0, #12
    6714:	0a6b0502 	beq	1ac7b24 <__ccfg+0x1aa7b7c>
    6718:	04020000 	streq	r0, [r2], #-0
    671c:	0007fd05 	andeq	pc, r7, r5, lsl #26
    6720:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6724:	000007f8 	strdeq	r0, [r0], -r8
    6728:	002a2203 	eoreq	r2, sl, r3, lsl #4
    672c:	182e0400 	stmdane	lr!, {sl}
    6730:	0000004d 	andeq	r0, r0, sp, asr #32
    6734:	5b080102 	blpl	206b44 <__ccfg+0x1e6b9c>
    6738:	0300000c 	movweq	r0, #12
    673c:	00002e18 	andeq	r2, r0, r8, lsl lr
    6740:	60193104 	andsvs	r3, r9, r4, lsl #2
    6744:	02000000 	andeq	r0, r0, #0
    6748:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
    674c:	ba030000 	blt	c6754 <__ccfg+0xa67ac>
    6750:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    6754:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6758:	04020000 	streq	r0, [r2], #-0
    675c:	00042607 	andeq	r2, r4, r7, lsl #12
    6760:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6764:	00000421 	andeq	r0, r0, r1, lsr #8
    6768:	69050404 	stmdbvs	r5, {r2, sl}
    676c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6770:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    6774:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    6778:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    677c:	00411226 	subeq	r1, r1, r6, lsr #4
    6780:	01030000 	mrseq	r0, (UNDEF: 3)
    6784:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    6788:	00541227 	subseq	r1, r4, r7, lsr #4
    678c:	9b050000 	blls	146794 <__ccfg+0x1267ec>
    6790:	06000000 	streq	r0, [r0], -r0
    6794:	0000009b 	muleq	r0, fp, r0
    6798:	001dc803 	andseq	ip, sp, r3, lsl #16
    679c:	122b0500 	eorne	r0, fp, #0, 10
    67a0:	00000041 	andeq	r0, r0, r1, asr #32
    67a4:	0000b106 	andeq	fp, r0, r6, lsl #2
    67a8:	00b10500 	adcseq	r0, r1, r0, lsl #10
    67ac:	53030000 	movwpl	r0, #12288	; 0x3000
    67b0:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    67b4:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    67b8:	c7050000 	strgt	r0, [r5, -r0]
    67bc:	03000000 	movweq	r0, #0
    67c0:	00000646 	andeq	r0, r0, r6, asr #12
    67c4:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    67c8:	07000000 	streq	r0, [r0, -r0]
    67cc:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    67d0:	00000172 	andeq	r0, r0, r2, ror r1
    67d4:	00003408 	andeq	r3, r0, r8, lsl #8
    67d8:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    67dc:	000000b1 	strheq	r0, [r0], -r1
    67e0:	00070101 	andeq	r0, r7, r1, lsl #2
    67e4:	00064c08 	andeq	r4, r6, r8, lsl #24
    67e8:	03350500 	teqeq	r5, #0, 10
    67ec:	000000b1 	strheq	r0, [r0], -r1
    67f0:	00060101 	andeq	r0, r6, r1, lsl #2
    67f4:	0002e708 	andeq	lr, r2, r8, lsl #14
    67f8:	03360500 	teqeq	r6, #0, 10
    67fc:	000000b1 	strheq	r0, [r0], -r1
    6800:	00050101 	andeq	r0, r5, r1, lsl #2
    6804:	0006b708 	andeq	fp, r6, r8, lsl #14
    6808:	03370500 	teqeq	r7, #0, 10
    680c:	000000b1 	strheq	r0, [r0], -r1
    6810:	00040101 	andeq	r0, r4, r1, lsl #2
    6814:	000a9f08 	andeq	r9, sl, r8, lsl #30
    6818:	03380500 	teqeq	r8, #0, 10
    681c:	000000b1 	strheq	r0, [r0], -r1
    6820:	00000401 	andeq	r0, r0, r1, lsl #8
    6824:	00065b09 	andeq	r5, r6, r9, lsl #22
    6828:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    682c:	000000b1 	strheq	r0, [r0], -r1
    6830:	08fb0901 	ldmeq	fp!, {r0, r8, fp}^
    6834:	3c050000 	stccc	0, cr0, [r5], {-0}
    6838:	0000b103 	andeq	fp, r0, r3, lsl #2
    683c:	40090200 	andmi	r0, r9, r0, lsl #4
    6840:	0500000f 	streq	r0, [r0, #-15]
    6844:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    6848:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    684c:	00000913 	andeq	r0, r0, r3, lsl r9
    6850:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    6854:	04000000 	streq	r0, [r0], #-0
    6858:	031d0300 	tsteq	sp, #0, 6
    685c:	41050000 	mrsmi	r0, (UNDEF: 5)
    6860:	0000e403 	andeq	lr, r0, r3, lsl #8
    6864:	01720600 	cmneq	r2, r0, lsl #12
    6868:	be0a0000 	cdplt	0, 0, cr0, cr10, cr0, {0}
    686c:	05000006 	streq	r0, [r0, #-6]
    6870:	017e1a43 	cmneq	lr, r3, asr #20
    6874:	01010000 	mrseq	r0, (UNDEF: 1)
    6878:	0001a00a 	andeq	sl, r1, sl
    687c:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    6880:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    6884:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6888:	000001a5 	andeq	r0, r0, r5, lsr #3
    688c:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    6890:	0500000c 	streq	r0, [r0, #-12]
    6894:	000001a5 	andeq	r0, r0, r5, lsr #3
    6898:	0003260a 	andeq	r2, r3, sl, lsl #12
    689c:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    68a0:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    68a4:	08070101 	stmdaeq	r7, {r0, r8}
    68a8:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    68ac:	09000001 	stmdbeq	r0, {r0}
    68b0:	00000cd8 	ldrdeq	r0, [r0], -r8
    68b4:	670b9006 	strvs	r9, [fp, -r6]
    68b8:	00000000 	andeq	r0, r0, r0
    68bc:	00107b09 	andseq	r7, r0, r9, lsl #22
    68c0:	08910600 	ldmeq	r1, {r9, sl}
    68c4:	0000009b 	muleq	r0, fp, r0
    68c8:	01c50904 	biceq	r0, r5, r4, lsl #18
    68cc:	92060000 	andls	r0, r6, #0
    68d0:	0000bd10 	andeq	fp, r0, r0, lsl sp
    68d4:	03000600 	movweq	r0, #1536	; 0x600
    68d8:	00000ccc 	andeq	r0, r0, ip, asr #25
    68dc:	bf039306 	svclt	0x00039306
    68e0:	0c000001 	stceq	0, cr0, [r0], {1}
    68e4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    68e8:	00000207 	andeq	r0, r0, r7, lsl #4
    68ec:	3d0a000d 	stccc	0, cr0, [sl, #-52]	; 0xffffffcc
    68f0:	06000009 	streq	r0, [r0], -r9
    68f4:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    68f8:	01010000 	mrseq	r0, (UNDEF: 1)
    68fc:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    6900:	01070000 	mrseq	r0, (UNDEF: 7)
    6904:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    6908:	08000002 	stmdaeq	r0, {r1}
    690c:	0000091a 	andeq	r0, r0, sl, lsl r9
    6910:	b1079307 	tstlt	r7, r7, lsl #6
    6914:	01000000 	mrseq	r0, (UNDEF: 0)
    6918:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    691c:	000005cc 	andeq	r0, r0, ip, asr #11
    6920:	b1039407 	tstlt	r3, r7, lsl #8
    6924:	01000000 	mrseq	r0, (UNDEF: 0)
    6928:	00000001 	andeq	r0, r0, r1
    692c:	000aab03 	andeq	sl, sl, r3, lsl #22
    6930:	03960700 	orrseq	r0, r6, #0, 14
    6934:	0000021b 	andeq	r0, r0, fp, lsl r2
    6938:	00024505 	andeq	r4, r2, r5, lsl #10
    693c:	02510c00 	subseq	r0, r1, #0, 24
    6940:	02610000 	rsbeq	r0, r1, #0
    6944:	000d0000 	andeq	r0, sp, r0
    6948:	00025605 	andeq	r5, r2, r5, lsl #12
    694c:	03aa0a00 			; <UNDEFINED> instruction: 0x03aa0a00
    6950:	9c070000 	stcls	0, cr0, [r7], {-0}
    6954:	00026117 	andeq	r6, r2, r7, lsl r1
    6958:	0c010100 	stfeqs	f0, [r1], {-0}
    695c:	000000a7 	andeq	r0, r0, r7, lsr #1
    6960:	0000027f 	andeq	r0, r0, pc, ror r2
    6964:	7405000d 	strvc	r0, [r5], #-13
    6968:	0a000002 	beq	6978 <__exidx_end+0xbf8>
    696c:	0000060e 	andeq	r0, r0, lr, lsl #12
    6970:	7f130608 	svcvc	0x00130608
    6974:	01000002 	tsteq	r0, r2
    6978:	08dd0a01 	ldmeq	sp, {r0, r9, fp}^
    697c:	c3060000 	movwgt	r0, #24576	; 0x6000
    6980:	0000c70e 	andeq	ip, r0, lr, lsl #14
    6984:	0e010100 	adfeqs	f0, f1, f0
    6988:	00000c72 	andeq	r0, r0, r2, ror ip
    698c:	10016e09 	andne	r6, r1, r9, lsl #28
    6990:	000002ad 	andeq	r0, r0, sp, lsr #5
    6994:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    6998:	010f0000 	mrseq	r0, CPSR
    699c:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    69a0:	00009b10 	andeq	r9, r0, r0, lsl fp
    69a4:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    69a8:	ca000001 	bgt	69b4 <__exidx_end+0xc34>
    69ac:	0d000002 	stceq	0, cr0, [r0, #-8]
    69b0:	02bf0500 	adcseq	r0, pc, #0, 10
    69b4:	e6110000 	ldr	r0, [r1], -r0
    69b8:	09000009 	stmdbeq	r0, {r0, r3}
    69bc:	ca16017f 	bgt	586fc0 <__ccfg+0x567018>
    69c0:	01000002 	tsteq	r0, r2
    69c4:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    69c8:	82090000 	andhi	r0, r9, #0
    69cc:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    69d0:	01010000 	mrseq	r0, (UNDEF: 1)
    69d4:	00036e11 	andeq	r6, r3, r1, lsl lr
    69d8:	02d80900 	sbcseq	r0, r8, #0, 18
    69dc:	0000c70e 	andeq	ip, r0, lr, lsl #14
    69e0:	12010100 	andne	r0, r1, #0, 2
    69e4:	03030908 	movweq	r0, #14600	; 0x3908
    69e8:	00032309 	andeq	r2, r3, r9, lsl #6
    69ec:	3ca71300 	stccc	3, cr1, [r7]
    69f0:	07090000 	streq	r0, [r9, -r0]
    69f4:	009b0703 	addseq	r0, fp, r3, lsl #14
    69f8:	13000000 	movwne	r0, #0
    69fc:	00000fd3 	ldrdeq	r0, [r0], -r3
    6a00:	08030809 	stmdaeq	r3, {r0, r3, fp}
    6a04:	000000d8 	ldrdeq	r0, [r0], -r8
    6a08:	090e0004 	stmdbeq	lr, {r2}
    6a0c:	0900000a 	stmdbeq	r0, {r1, r3}
    6a10:	fc030309 	stc2	3, cr0, [r3], {9}
    6a14:	14000002 	strne	r0, [r0], #-2
    6a18:	00000029 	andeq	r0, r0, r9, lsr #32
    6a1c:	030b0930 	movweq	r0, #47408	; 0xb930
    6a20:	00039308 	andeq	r9, r3, r8, lsl #6
    6a24:	1f2a1300 	svcne	0x002a1300
    6a28:	14090000 	strne	r0, [r9], #-0
    6a2c:	009b0803 	addseq	r0, fp, r3, lsl #16
    6a30:	13000000 	movwne	r0, #0
    6a34:	00000be7 	andeq	r0, r0, r7, ror #23
    6a38:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    6a3c:	0000009b 	muleq	r0, fp, r0
    6a40:	4c941302 	ldcmi	3, cr1, [r4], {2}
    6a44:	16090000 	strne	r0, [r9], -r0
    6a48:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    6a4c:	13040000 	movwne	r0, #16384	; 0x4000
    6a50:	0000475a 	andeq	r4, r0, sl, asr r7
    6a54:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    6a58:	000000d8 	ldrdeq	r0, [r0], -r8
    6a5c:	000f1308 	andeq	r1, pc, r8, lsl #6
    6a60:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    6a64:	03930f03 	orrseq	r0, r3, #3, 30
    6a68:	130c0000 	movwne	r0, #49152	; 0xc000
    6a6c:	0000095d 	andeq	r0, r0, sp, asr r9
    6a70:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    6a74:	000003a3 	andeq	r0, r0, r3, lsr #7
    6a78:	230c002c 	movwcs	r0, #49196	; 0xc02c
    6a7c:	a3000003 	movwge	r0, #3
    6a80:	15000003 	strne	r0, [r0, #-3]
    6a84:	00000088 	andeq	r0, r0, r8, lsl #1
    6a88:	040b0003 	streq	r0, [fp], #-3
    6a8c:	00000330 	andeq	r0, r0, r0, lsr r3
    6a90:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    6a94:	031c0900 	tsteq	ip, #0, 18
    6a98:	0003301b 	andeq	r3, r3, fp, lsl r0
    6a9c:	0bbc1100 	bleq	fef0aea4 <_estack+0xdef05ea4>
    6aa0:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    6aa4:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    6aa8:	01010000 	mrseq	r0, (UNDEF: 1)
    6aac:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    6ab0:	0f0a0000 	svceq	0x000a0000
    6ab4:	0a000007 	beq	6ad8 <__exidx_end+0xd58>
    6ab8:	009b131d 	addseq	r1, fp, sp, lsl r3
    6abc:	01010000 	mrseq	r0, (UNDEF: 1)
    6ac0:	0002ee0a 	andeq	lr, r2, sl, lsl #28
    6ac4:	1a1e0a00 	bne	7892cc <__ccfg+0x769324>
    6ac8:	000000ac 	andeq	r0, r0, ip, lsr #1
    6acc:	690a0101 	stmdbvs	sl, {r0, r8}
    6ad0:	0a00000c 	beq	6b08 <__exidx_end+0xd88>
    6ad4:	00ac241e 	adceq	r2, ip, lr, lsl r4
    6ad8:	01010000 	mrseq	r0, (UNDEF: 1)
    6adc:	000c870a 	andeq	r8, ip, sl, lsl #14
    6ae0:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    6ae4:	000003c5 	andeq	r0, r0, r5, asr #7
    6ae8:	c1160101 	tstgt	r6, r1, lsl #2
    6aec:	0100000b 	tsteq	r0, fp
    6af0:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    6af4:	03050000 	movweq	r0, #20480	; 0x5000
    6af8:	00000000 	andeq	r0, r0, r0
    6afc:	000cf916 	andeq	pc, ip, r6, lsl r9	; <UNPREDICTABLE>
    6b00:	150f0100 	strne	r0, [pc, #-256]	; 6a08 <__exidx_end+0xc88>
    6b04:	000000c7 	andeq	r0, r0, r7, asr #1
    6b08:	00000305 	andeq	r0, r0, r5, lsl #6
    6b0c:	9f160000 	svcls	0x00160000
    6b10:	0100001d 	tsteq	r0, sp, lsl r0
    6b14:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    6b18:	03050000 	movweq	r0, #20480	; 0x5000
    6b1c:	00000000 	andeq	r0, r0, r0
    6b20:	001d0316 	andseq	r0, sp, r6, lsl r3
    6b24:	0d120100 	ldfeqs	f0, [r2, #-0]
    6b28:	000000b1 	strheq	r0, [r0], -r1
    6b2c:	05bc0305 	ldreq	r0, [ip, #773]!	; 0x305
    6b30:	47162000 	ldrmi	r2, [r6, -r0]
    6b34:	0100001d 	tsteq	r0, sp, lsl r0
    6b38:	00b10313 	adcseq	r0, r1, r3, lsl r3
    6b3c:	03050000 	movweq	r0, #20480	; 0x5000
    6b40:	200005bd 			; <UNDEFINED> instruction: 0x200005bd
    6b44:	00166016 	andseq	r6, r6, r6, lsl r0
    6b48:	0d150100 	ldfeqs	f0, [r5, #-0]
    6b4c:	0000009b 	muleq	r0, fp, r0
    6b50:	00000305 	andeq	r0, r0, r5, lsl #6
    6b54:	01170000 	tsteq	r7, r0
    6b58:	00001ccf 	andeq	r1, r0, pc, asr #25
    6b5c:	00061303 	andeq	r1, r6, r3, lsl #6
    6b60:	00000000 	andeq	r0, r0, r0
    6b64:	01000000 	mrseq	r0, (UNDEF: 0)
    6b68:	a401189c 	strge	r1, [r1], #-2204	; 0xfffff764
    6b6c:	0300001d 	movweq	r0, #29
    6b70:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    6b7c:	01000000 	mrseq	r0, (UNDEF: 0)
    6b80:	0004bc9c 	muleq	r4, ip, ip
    6b84:	72651900 	rsbvc	r1, r5, #0, 18
    6b88:	19080300 	stmdbne	r8, {r8, r9}
    6b8c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    6b90:	0000241c 	andeq	r2, r0, ip, lsl r4
    6b94:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    6b98:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    6b9c:	000004c2 	andeq	r0, r0, r2, asr #9
    6ba0:	0b005101 	bleq	1afac <__exidx_end+0x1522c>
    6ba4:	00008f04 	andeq	r8, r0, r4, lsl #30
    6ba8:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    6bac:	1b000000 	blne	6bb4 <__exidx_end+0xe34>
    6bb0:	001d2601 	andseq	r2, sp, r1, lsl #12
    6bb4:	01600100 	cmneq	r0, r0, lsl #2
    6bb8:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6bc8:	000004f6 	strdeq	r0, [r0], -r6
    6bcc:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    6bd0:	14016001 	strne	r6, [r1], #-1
    6bd4:	0000009b 	muleq	r0, fp, r0
    6bd8:	0000242f 	andeq	r2, r0, pc, lsr #8
    6bdc:	1d011d00 	stcne	13, cr1, [r1, #-0]
    6be0:	0100001d 	tsteq	r0, sp, lsl r0
    6be4:	0006015b 	andeq	r0, r6, fp, asr r1
    6be8:	00000000 	andeq	r0, r0, r0
    6bec:	01000000 	mrseq	r0, (UNDEF: 0)
    6bf0:	fa011b9c 	blx	4da68 <__ccfg+0x2dac0>
    6bf4:	0100001c 	tsteq	r0, ip, lsl r0
    6bf8:	01060121 	tsteq	r6, r1, lsr #2
    6bfc:	0000009b 	muleq	r0, fp, r0
	...
    6c08:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    6c0c:	731c0000 	tstvc	ip, #0
    6c10:	21010074 	tstcs	r1, r4, ror r0
    6c14:	009b1501 	addseq	r1, fp, r1, lsl #10
    6c18:	24420000 	strbcs	r0, [r2], #-0
    6c1c:	611c0000 	tstvs	ip, r0
    6c20:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c24:	0000c71f 	andeq	ip, r0, pc, lsl r7
    6c28:	00245500 	eoreq	r5, r4, r0, lsl #10
    6c2c:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    6c30:	2e012101 	adfcss	f2, f1, f1
    6c34:	00000215 	andeq	r0, r0, r5, lsl r2
    6c38:	00002473 	andeq	r2, r0, r3, ror r4
    6c3c:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    6c40:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c44:	00009b36 	andeq	r9, r0, r6, lsr fp
    6c48:	00248600 	eoreq	r8, r4, r0, lsl #12
    6c4c:	6c621e00 	stclvs	14, cr1, [r2], #-0
    6c50:	01230100 			; <UNDEFINED> instruction: 0x01230100
    6c54:	00009b07 	andeq	r9, r0, r7, lsl #22
    6c58:	00249900 	eoreq	r9, r4, r0, lsl #18
    6c5c:	1d111f00 	ldcne	15, cr1, [r1, #-0]
    6c60:	32010000 	andcc	r0, r1, #0
    6c64:	00000101 	andeq	r0, r0, r1, lsl #2
    6c68:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    6c6c:	00000009 	andeq	r0, r0, r9
    6c70:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    6c74:	0100000c 	tsteq	r0, ip
    6c78:	a3030143 	movwge	r0, #12611	; 0x3143
    6c7c:	21000005 	tstcs	r0, r5
    6c80:	00000a12 	andeq	r0, r0, r2, lsl sl
    6c84:	000a0521 	andeq	r0, sl, r1, lsr #10
    6c88:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    6c8c:	00000009 	andeq	r0, r0, r9
    6c90:	00000000 	andeq	r0, r0, r0
    6c94:	01000000 	mrseq	r0, (UNDEF: 0)
    6c98:	21030150 	tstcs	r3, r0, asr r1
    6c9c:	00000a12 	andeq	r0, r0, r2, lsl sl
    6ca0:	000a0521 	andeq	r0, sl, r1, lsr #10
    6ca4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6ca8:	001cf101 	andseq	pc, ip, r1, lsl #2
    6cac:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    6cb0:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6cbc:	819c0100 	orrshi	r0, ip, r0, lsl #2
    6cc0:	19000006 	stmdbne	r0, {r1, r2}
    6cc4:	01007473 	tsteq	r0, r3, ror r4
    6cc8:	009b15cb 	addseq	r1, fp, fp, asr #11
    6ccc:	24c20000 	strbcs	r0, [r2], #0
    6cd0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    6cd4:	0100001d 	tsteq	r0, sp, lsl r0
    6cd8:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    6cdc:	24e00000 	strbtcs	r0, [r0], #0
    6ce0:	dd230000 	stcle	0, cr0, [r3, #-0]
    6ce4:	0100001c 	tsteq	r0, ip, lsl r0
    6ce8:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    6cec:	25090000 	strcs	r0, [r9, #-0]
    6cf0:	c9240000 	stmdbgt	r4!, {}	; <UNPREDICTABLE>
    6cf4:	0100001c 	tsteq	r0, ip, lsl r0
    6cf8:	000001e6 	andeq	r0, r0, r6, ror #3
    6cfc:	b2240000 	eorlt	r0, r4, #0
    6d00:	0100001d 	tsteq	r0, sp, lsl r0
    6d04:	000001ea 	andeq	r0, r0, sl, ror #3
    6d08:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    6d0c:	00000008 	andeq	r0, r0, r8
    6d10:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6d14:	0100000c 	tsteq	r0, ip
    6d18:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    6d1c:	27000008 	strcs	r0, [r0, -r8]
    6d20:	26000025 	strcs	r0, [r0], -r5, lsr #32
    6d24:	0000086c 	andeq	r0, r0, ip, ror #16
    6d28:	0000253a 	andeq	r2, r0, sl, lsr r5
    6d2c:	0009f627 	andeq	pc, r9, r7, lsr #12
    6d30:	00000000 	andeq	r0, r0, r0
    6d34:	000c8000 	andeq	r8, ip, r0
    6d38:	02430100 	subeq	r0, r3, #0, 2
    6d3c:	00000664 	andeq	r0, r0, r4, ror #12
    6d40:	000a1221 	andeq	r1, sl, r1, lsr #4
    6d44:	0a052100 	beq	14f14c <__ccfg+0x12f1a4>
    6d48:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6d4c:	000009f6 	strdeq	r0, [r0], -r6
	...
    6d58:	21024801 	tstcs	r2, r1, lsl #16
    6d5c:	00000a12 	andeq	r0, r0, r2, lsl sl
    6d60:	000a0521 	andeq	r0, sl, r1, lsr #10
    6d64:	00000000 	andeq	r0, r0, r0
    6d68:	1d330118 	ldfnes	f0, [r3, #-96]!	; 0xffffffa0
    6d6c:	b0010000 	andlt	r0, r1, r0
    6d70:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d80:	00000704 	andeq	r0, r0, r4, lsl #14
    6d84:	01006119 	tsteq	r0, r9, lsl r1
    6d88:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    6d8c:	254d0000 	strbcs	r0, [sp, #-0]
    6d90:	73190000 	tstvc	r9, #0
    6d94:	1eb00100 	frdnes	f0, f0, f0
    6d98:	00000704 	andeq	r0, r0, r4, lsl #14
    6d9c:	00002576 	andeq	r2, r0, r6, ror r5
    6da0:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    6da4:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    6da8:	0000009b 	muleq	r0, fp, r0
    6dac:	000025aa 	andeq	r2, r0, sl, lsr #11
    6db0:	0009f627 	andeq	pc, r9, r7, lsr #12
    6db4:	00000000 	andeq	r0, r0, r0
    6db8:	000c5000 	andeq	r5, ip, r0
    6dbc:	02ba0100 	adcseq	r0, sl, #0, 2
    6dc0:	000006e8 	andeq	r0, r0, r8, ror #13
    6dc4:	000a1221 	andeq	r1, sl, r1, lsr #4
    6dc8:	0a052100 	beq	14f1d0 <__ccfg+0x12f228>
    6dcc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6dd0:	000009f6 	strdeq	r0, [r0], -r6
	...
    6ddc:	2102c401 	tstcs	r2, r1, lsl #8
    6de0:	00000a12 	andeq	r0, r0, r2, lsl sl
    6de4:	000a0521 	andeq	r0, sl, r1, lsr #10
    6de8:	0b000000 	bleq	6df0 <__exidx_end+0x1070>
    6dec:	0000b104 	andeq	fp, r0, r4, lsl #2
    6df0:	e8011700 	stmda	r1, {r8, r9, sl, ip}
    6df4:	0100001c 	tsteq	r0, ip, lsl r0
    6df8:	273406a8 	ldrcs	r0, [r4, -r8, lsr #13]!
    6dfc:	27480000 	strbcs	r0, [r8, -r0]
    6e00:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e04:	1d090129 	stfnes	f0, [r9, #-164]	; 0xffffff5c
    6e08:	93010000 	movwls	r0, #4096	; 0x1000
    6e0c:	00009b06 	andeq	r9, r0, r6, lsl #22
    6e10:	00272000 	eoreq	r2, r7, r0
    6e14:	00273400 	eoreq	r3, r7, r0, lsl #8
    6e18:	2a9c0100 	bcs	fe707220 <_estack+0xde702220>
    6e1c:	00001dac 	andeq	r1, r0, ip, lsr #27
    6e20:	bc0d8201 	sfmlt	f0, 1, [sp], {1}
    6e24:	fc000026 	stc2	0, cr0, [r0], {38}	; 0x26
    6e28:	01000026 	tsteq	r0, r6, lsr #32
    6e2c:	0007969c 	muleq	r7, ip, r6
    6e30:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    6e34:	26d60000 	ldrbcs	r0, [r6], r0
    6e38:	26ea0000 	strbtcs	r0, [sl], r0
    6e3c:	8a010000 	bhi	46e44 <__ccfg+0x26e9c>
    6e40:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    6e44:	26d60000 	ldrbcs	r0, [r6], r0
    6e48:	0c200000 	stceq	0, cr0, [r0], #-0
    6e4c:	72010000 	andvc	r0, r1, #0
    6e50:	00077902 	andeq	r7, r7, r2, lsl #18
    6e54:	0a122100 	beq	48f25c <__ccfg+0x46f2b4>
    6e58:	05210000 	streq	r0, [r1, #-0]!
    6e5c:	0000000a 	andeq	r0, r0, sl
    6e60:	0009f625 	andeq	pc, r9, r5, lsr #12
    6e64:	0026e200 	eoreq	lr, r6, r0, lsl #4
    6e68:	000c3800 	andeq	r3, ip, r0, lsl #16
    6e6c:	02740100 	rsbseq	r0, r4, #0, 2
    6e70:	000a1221 	andeq	r1, sl, r1, lsr #4
    6e74:	0a052100 	beq	14f27c <__ccfg+0x12f2d4>
    6e78:	00000000 	andeq	r0, r0, r0
    6e7c:	1d402b00 	vstrne	d18, [r0, #-0]
    6e80:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    6e84:	992b010d 	stmdbls	fp!, {r0, r2, r3, r8}
    6e88:	0100001d 	tsteq	r0, sp, lsl r0
    6e8c:	2b010d6d 	blcs	4a448 <__ccfg+0x2a4a0>
    6e90:	00001db8 			; <UNDEFINED> instruction: 0x00001db8
    6e94:	010d6601 	tsteq	sp, r1, lsl #12
    6e98:	001dbe2c 	andseq	fp, sp, ip, lsr #28
    6e9c:	0d580100 	ldfeqe	f0, [r8, #-0]
    6ea0:	00266801 	eoreq	r6, r6, r1, lsl #16
    6ea4:	0026bc00 	eoreq	fp, r6, r0, lsl #24
    6ea8:	429c0100 	addsmi	r0, ip, #0, 2
    6eac:	19000008 	stmdbne	r0, {r3}
    6eb0:	01007473 	tsteq	r0, r3, ror r4
    6eb4:	009b1958 	addseq	r1, fp, r8, asr r9
    6eb8:	25c80000 	strbcs	r0, [r8]
    6ebc:	64190000 	ldrvs	r0, [r9], #-0
    6ec0:	01006c65 	tsteq	r0, r5, ror #24
    6ec4:	009b2258 	addseq	r2, fp, r8, asr r2
    6ec8:	25db0000 	ldrbcs	r0, [fp]
    6ecc:	42250000 	eormi	r0, r5, #0
    6ed0:	70000008 	andvc	r0, r0, r8
    6ed4:	d8000026 	stmdale	r0, {r1, r2, r5}
    6ed8:	0100000b 	tsteq	r0, fp
    6edc:	d82d135c 	stmdale	sp!, {r2, r3, r4, r6, r8, r9, ip}
    6ee0:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    6ee4:	00000853 	andeq	r0, r0, r3, asr r8
    6ee8:	000025ee 	andeq	r2, r0, lr, ror #11
    6eec:	0009f627 	andeq	pc, r9, r7, lsr #12
    6ef0:	00267000 	eoreq	r7, r6, r0
    6ef4:	000bf800 	andeq	pc, fp, r0, lsl #16
    6ef8:	02510100 	subseq	r0, r1, #0, 2
    6efc:	00000824 	andeq	r0, r0, r4, lsr #16
    6f00:	000a1221 	andeq	r1, sl, r1, lsr #4
    6f04:	0a052100 	beq	14f30c <__ccfg+0x12f364>
    6f08:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6f0c:	000009f6 	strdeq	r0, [r0], -r6
    6f10:	0000268a 	andeq	r2, r0, sl, lsl #13
    6f14:	0000268e 	andeq	r2, r0, lr, lsl #13
    6f18:	21025401 	tstcs	r2, r1, lsl #8
    6f1c:	00000a12 	andeq	r0, r0, r2, lsl sl
    6f20:	000a0521 	andeq	r0, sl, r1, lsr #10
    6f24:	00000000 	andeq	r0, r0, r0
    6f28:	1d3b2f00 	ldcne	15, cr2, [fp, #-0]
    6f2c:	4b010000 	blmi	46f34 <__ccfg+0x26f8c>
    6f30:	0000b10d 	andeq	fp, r0, sp, lsl #2
    6f34:	085e0100 	ldmdaeq	lr, {r8}^
    6f38:	72300000 	eorsvc	r0, r0, #0
    6f3c:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    6f40:	000000b1 	strheq	r0, [r0], -r1
    6f44:	1d173100 	ldfnes	f3, [r7, #-0]
    6f48:	41010000 	mrsmi	r0, (UNDEF: 1)
    6f4c:	8301010d 	movwhi	r0, #4365	; 0x110d
    6f50:	32000008 	andcc	r0, r0, #8
    6f54:	00646d63 	rsbeq	r6, r4, r3, ror #26
    6f58:	b1194101 	tstlt	r9, r1, lsl #2
    6f5c:	32000000 	andcc	r0, r0, #0
    6f60:	41010061 	tstmi	r1, r1, rrx
    6f64:	0000c724 	andeq	ip, r0, r4, lsr #14
    6f68:	e22c0000 	eor	r0, ip, #0
    6f6c:	0100001c 	tsteq	r0, ip, lsl r0
    6f70:	50010d3a 	andpl	r0, r1, sl, lsr sp
    6f74:	68000026 	stmdavs	r0, {r1, r2, r5}
    6f78:	01000026 	tsteq	r0, r6, lsr #32
    6f7c:	0008e59c 	muleq	r8, ip, r5
    6f80:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    6f84:	3a010064 	bcc	4711c <__ccfg+0x27174>
    6f88:	0000b119 	andeq	fp, r0, r9, lsl r1
    6f8c:	00260100 	eoreq	r0, r6, r0, lsl #2
    6f90:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    6f94:	26500000 	ldrbcs	r0, [r0], -r0
    6f98:	0bc00000 	bleq	ff006fa0 <_estack+0xdf001fa0>
    6f9c:	3c010000 	stccc	0, cr0, [r1], {-0}
    6fa0:	0008c902 	andeq	ip, r8, r2, lsl #18
    6fa4:	0a122100 	beq	48f3ac <__ccfg+0x46f404>
    6fa8:	05210000 	streq	r0, [r1, #-0]!
    6fac:	0000000a 	andeq	r0, r0, sl
    6fb0:	0009f628 	andeq	pc, r9, r8, lsr #12
    6fb4:	00265c00 	eoreq	r5, r6, r0, lsl #24
    6fb8:	00266000 	eoreq	r6, r6, r0
    6fbc:	023e0100 	eorseq	r0, lr, #0, 2
    6fc0:	000a1221 	andeq	r1, sl, r1, lsr #4
    6fc4:	0a052100 	beq	14f3cc <__ccfg+0x12f424>
    6fc8:	00000000 	andeq	r0, r0, r0
    6fcc:	001dcd2c 	andseq	ip, sp, ip, lsr #26
    6fd0:	0d290100 	stfeqs	f0, [r9, #-0]
    6fd4:	00262001 	eoreq	r2, r6, r1
    6fd8:	00265000 	eoreq	r5, r6, r0
    6fdc:	799c0100 	ldmibvc	ip, {r8}
    6fe0:	19000009 	stmdbne	r0, {r0, r3}
    6fe4:	29010062 	stmdbcs	r1, {r1, r5, r6}
    6fe8:	0000b11c 	andeq	fp, r0, ip, lsl r1
    6fec:	00261400 	eoreq	r1, r6, r0, lsl #8
    6ff0:	00693000 	rsbeq	r3, r9, r0
    6ff4:	81062b01 	tsthi	r6, r1, lsl #22
    6ff8:	27000000 	strcs	r0, [r0, -r0]
    6ffc:	00000a3d 	andeq	r0, r0, sp, lsr sl
    7000:	00002628 	andeq	r2, r0, r8, lsr #12
    7004:	00000b88 	andeq	r0, r0, r8, lsl #23
    7008:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    700c:	21000009 	tstcs	r0, r9
    7010:	00000a4c 	andeq	r0, r0, ip, asr #20
    7014:	0a3d3300 	beq	f53c1c <__ccfg+0xf33c74>
    7018:	26340000 	ldrtcs	r0, [r4], -r0
    701c:	26380000 	ldrtcs	r0, [r8], -r0
    7020:	2f010000 	svccs	0x00010000
    7024:	00094804 	andeq	r4, r9, r4, lsl #16
    7028:	0a4c2100 	beq	130f430 <__ccfg+0x12ef488>
    702c:	33000000 	movwcc	r0, #0
    7030:	00000a20 	andeq	r0, r0, r0, lsr #20
    7034:	00002638 	andeq	r2, r0, r8, lsr r6
    7038:	0000263a 	andeq	r2, r0, sl, lsr r6
    703c:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    7040:	21000009 	tstcs	r0, r9
    7044:	00000a2f 	andeq	r0, r0, pc, lsr #20
    7048:	0a202500 	beq	810450 <__ccfg+0x7f04a8>
    704c:	26400000 	strbcs	r0, [r0], -r0
    7050:	0ba80000 	bleq	fea07058 <_estack+0xdea02058>
    7054:	33010000 	movwcc	r0, #4096	; 0x1000
    7058:	0a2f2103 	beq	bcf46c <__ccfg+0xbaf4c4>
    705c:	00000000 	andeq	r0, r0, r0
    7060:	001dc434 	andseq	ip, sp, r4, lsr r4
    7064:	0d190100 	ldfeqs	f0, [r9, #-0]
    7068:	000000b1 	strheq	r0, [r0], -r1
    706c:	000025ec 	andeq	r2, r0, ip, ror #11
    7070:	00002620 	andeq	r2, r0, r0, lsr #12
    7074:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    7078:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    707c:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    7080:	00000081 	andeq	r0, r0, r1, lsl #1
    7084:	01006235 	tsteq	r0, r5, lsr r2
    7088:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    708c:	26320000 	ldrtcs	r0, [r2], -r0
    7090:	3d270000 	stccc	0, cr0, [r7, #-0]
    7094:	f000000a 			; <UNDEFINED> instruction: 0xf000000a
    7098:	28000025 	stmdacs	r0, {r0, r2, r5}
    709c:	0100000b 	tsteq	r0, fp
    70a0:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    70a4:	4c210000 	stcmi	0, cr0, [r1], #-0
    70a8:	0000000a 	andeq	r0, r0, sl
    70ac:	000a2027 	andeq	r2, sl, r7, lsr #32
    70b0:	0025f600 	eoreq	pc, r5, r0, lsl #12
    70b4:	000b5000 	andeq	r5, fp, r0
    70b8:	03230100 			; <UNDEFINED> instruction: 0x03230100
    70bc:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    70c0:	000a2f21 	andeq	r2, sl, r1, lsr #30
    70c4:	5a250000 	bpl	9470cc <__ccfg+0x927124>
    70c8:	f800000a 			; <UNDEFINED> instruction: 0xf800000a
    70cc:	68000025 	stmdavs	r0, {r0, r2, r5}
    70d0:	0100000b 	tsteq	r0, fp
    70d4:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    70d8:	0000000a 	andeq	r0, r0, sl
    70dc:	0f563600 	svceq	0x00563600
    70e0:	06020000 	streq	r0, [r2], -r0
    70e4:	03010102 	movweq	r0, #4354	; 0x1102
    70e8:	00000a20 	andeq	r0, r0, r0, lsr #20
    70ec:	00112737 	andseq	r2, r1, r7, lsr r7
    70f0:	02060200 	andeq	r0, r6, #0, 4
    70f4:	00006723 	andeq	r6, r0, r3, lsr #14
    70f8:	14363700 	ldrtne	r3, [r6], #-1792	; 0xfffff900
    70fc:	06020000 	streq	r0, [r2], -r0
    7100:	00673702 	rsbeq	r3, r7, r2, lsl #14
    7104:	36000000 	strcc	r0, [r0], -r0
    7108:	000012ca 	andeq	r1, r0, sl, asr #5
    710c:	01015402 	tsteq	r1, r2, lsl #8
    7110:	0a3d0301 	beq	f47d1c <__ccfg+0xf27d74>
    7114:	27370000 	ldrcs	r0, [r7, -r0]!
    7118:	02000011 	andeq	r0, r0, #17
    711c:	67190154 			; <UNDEFINED> instruction: 0x67190154
    7120:	00000000 	andeq	r0, r0, r0
    7124:	0013d736 	andseq	sp, r3, r6, lsr r7
    7128:	011e0200 	tsteq	lr, r0, lsl #4
    712c:	5a030101 	bpl	c7538 <__ccfg+0xa7590>
    7130:	3700000a 	strcc	r0, [r0, -sl]
    7134:	00001127 	andeq	r1, r0, r7, lsr #2
    7138:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    713c:	00000067 	andeq	r0, r0, r7, rrx
    7140:	1bdb3800 	blne	ff6d5148 <_estack+0xdf6d0148>
    7144:	a4020000 	strge	r0, [r2], #-0
    7148:	00670101 	rsbeq	r0, r7, r1, lsl #2
    714c:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    7150:	3900000a 	stmdbcc	r0, {r1, r3}
    7154:	00001127 	andeq	r1, r0, r7, lsr #2
    7158:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    715c:	00000000 	andeq	r0, r0, r0
    7160:	0007963a 	andeq	r9, r7, sl, lsr r6
    7164:	0026fc00 	eoreq	pc, r6, r0, lsl #24
    7168:	00272000 	eoreq	r2, r7, r0
    716c:	289c0100 	ldmcs	ip, {r8}
    7170:	00000796 	muleq	r0, r6, r7
    7174:	00002706 	andeq	r2, r0, r6, lsl #14
    7178:	0000271a 	andeq	r2, r0, sl, lsl r7
    717c:	3b0d7801 	blcc	365188 <__ccfg+0x3451e0>
    7180:	000007a8 	andeq	r0, r0, r8, lsr #15
    7184:	00002710 	andeq	r2, r0, r0, lsl r7
    7188:	00002716 	andeq	r2, r0, r6, lsl r7
    718c:	00037c01 	andeq	r7, r3, r1, lsl #24
    7190:	041e0000 	ldreq	r0, [lr], #-0
    7194:	00030000 	andeq	r0, r3, r0
    7198:	00001bab 	andeq	r1, r0, fp, lsr #23
    719c:	00ac0104 	adceq	r0, ip, r4, lsl #2
    71a0:	d60c0000 	strle	r0, [ip], -r0
    71a4:	1000001d 	andne	r0, r0, sp, lsl r0
    71a8:	3000000e 	andcc	r0, r0, lr
    71ac:	0000000d 	andeq	r0, r0, sp
    71b0:	10000000 	andne	r0, r0, r0
    71b4:	02000051 	andeq	r0, r0, #81	; 0x51
    71b8:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    71bc:	02020000 	andeq	r0, r2, #0
    71c0:	000a6b05 	andeq	r6, sl, r5, lsl #22
    71c4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    71c8:	000007fd 	strdeq	r0, [r0], -sp
    71cc:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    71d0:	03000007 	movweq	r0, #7
    71d4:	00002a22 	andeq	r2, r0, r2, lsr #20
    71d8:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    71dc:	02000000 	andeq	r0, r0, #0
    71e0:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    71e4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    71e8:	0200002e 	andeq	r0, r0, #46	; 0x2e
    71ec:	00601931 	rsbeq	r1, r0, r1, lsr r9
    71f0:	02020000 	andeq	r0, r2, #0
    71f4:	000d6c07 	andeq	r6, sp, r7, lsl #24
    71f8:	29ba0300 	ldmibcs	sl!, {r8, r9}
    71fc:	34020000 	strcc	r0, [r2], #-0
    7200:	00007319 	andeq	r7, r0, r9, lsl r3
    7204:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7208:	00000426 	andeq	r0, r0, r6, lsr #8
    720c:	21070802 	tstcs	r7, r2, lsl #16
    7210:	04000004 	streq	r0, [r0], #-4
    7214:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7218:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    721c:	00042b07 	andeq	r2, r4, r7, lsl #22
    7220:	29010300 	stmdbcs	r1, {r8, r9}
    7224:	27030000 	strcs	r0, [r3, -r0]
    7228:	00005412 	andeq	r5, r0, r2, lsl r4
    722c:	008f0500 	addeq	r0, pc, r0, lsl #10
    7230:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    7234:	0300001d 	movweq	r0, #29
    7238:	0041122b 	subeq	r1, r1, fp, lsr #4
    723c:	a0060000 	andge	r0, r6, r0
    7240:	03000000 	movweq	r0, #0
    7244:	00002953 	andeq	r2, r0, r3, asr r9
    7248:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    724c:	05000000 	streq	r0, [r0, #-0]
    7250:	000000b1 	strheq	r0, [r0], -r1
    7254:	00064603 	andeq	r4, r6, r3, lsl #12
    7258:	122d0300 	eorne	r0, sp, #0, 6
    725c:	00000067 	andeq	r0, r0, r7, rrx
    7260:	000bb403 	andeq	fp, fp, r3, lsl #8
    7264:	102e0300 	eorne	r0, lr, r0, lsl #6
    7268:	000000da 	ldrdeq	r0, [r0], -sl
    726c:	008f0407 	addeq	r0, pc, r7, lsl #8
    7270:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    7274:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    7278:	09000001 	stmdbeq	r0, {r0}
    727c:	00000034 	andeq	r0, r0, r4, lsr r0
    7280:	a0073403 	andge	r3, r7, r3, lsl #8
    7284:	01000000 	mrseq	r0, (UNDEF: 0)
    7288:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    728c:	0000064c 	andeq	r0, r0, ip, asr #12
    7290:	a0033503 	andge	r3, r3, r3, lsl #10
    7294:	01000000 	mrseq	r0, (UNDEF: 0)
    7298:	09000601 	stmdbeq	r0, {r0, r9, sl}
    729c:	000002e7 	andeq	r0, r0, r7, ror #5
    72a0:	a0033603 	andge	r3, r3, r3, lsl #12
    72a4:	01000000 	mrseq	r0, (UNDEF: 0)
    72a8:	09000501 	stmdbeq	r0, {r0, r8, sl}
    72ac:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    72b0:	a0033703 	andge	r3, r3, r3, lsl #14
    72b4:	01000000 	mrseq	r0, (UNDEF: 0)
    72b8:	09000401 	stmdbeq	r0, {r0, sl}
    72bc:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    72c0:	a0033803 	andge	r3, r3, r3, lsl #16
    72c4:	01000000 	mrseq	r0, (UNDEF: 0)
    72c8:	0a000004 	beq	72e0 <__exidx_end+0x1560>
    72cc:	0000065b 	andeq	r0, r0, fp, asr r6
    72d0:	a0073a03 	andge	r3, r7, r3, lsl #20
    72d4:	01000000 	mrseq	r0, (UNDEF: 0)
    72d8:	0008fb0a 	andeq	pc, r8, sl, lsl #22
    72dc:	033c0300 	teqeq	ip, #0, 6
    72e0:	000000a0 	andeq	r0, r0, r0, lsr #1
    72e4:	0f400a02 	svceq	0x00400a02
    72e8:	3d030000 	stccc	0, cr0, [r3, #-0]
    72ec:	0000a003 	andeq	sl, r0, r3
    72f0:	130a0300 	movwne	r0, #41728	; 0xa300
    72f4:	03000009 	movweq	r0, #9
    72f8:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    72fc:	00040000 	andeq	r0, r4, r0
    7300:	00031d03 	andeq	r1, r3, r3, lsl #26
    7304:	03410300 	movteq	r0, #4864	; 0x1300
    7308:	000000e0 	andeq	r0, r0, r0, ror #1
    730c:	00016e06 	andeq	r6, r1, r6, lsl #28
    7310:	06be0b00 	ldrteq	r0, [lr], r0, lsl #22
    7314:	43030000 	movwmi	r0, #12288	; 0x3000
    7318:	00017a1a 	andeq	r7, r1, sl, lsl sl
    731c:	0b010100 	bleq	47724 <__ccfg+0x2777c>
    7320:	000001a0 	andeq	r0, r0, r0, lsr #3
    7324:	9b0e4503 	blls	398738 <__ccfg+0x378790>
    7328:	01000001 	tsteq	r0, r1
    732c:	a1040701 	tstge	r4, r1, lsl #14
    7330:	02000001 	andeq	r0, r0, #1
    7334:	0c640801 	stcleq	8, cr0, [r4], #-4
    7338:	a1050000 	mrsge	r0, (UNDEF: 5)
    733c:	0b000001 	bleq	7348 <__exidx_end+0x15c8>
    7340:	00000326 	andeq	r0, r0, r6, lsr #6
    7344:	9b1e4503 	blls	798758 <__ccfg+0x7787b0>
    7348:	01000001 	tsteq	r0, r1
    734c:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    7350:	01ec098f 	mvneq	r0, pc, lsl #19
    7354:	d80a0000 	stmdale	sl, {}	; <UNPREDICTABLE>
    7358:	0400000c 	streq	r0, [r0], #-12
    735c:	00670b90 	mlseq	r7, r0, fp, r0
    7360:	0a000000 	beq	7368 <__exidx_end+0x15e8>
    7364:	0000107b 	andeq	r1, r0, fp, ror r0
    7368:	8f089104 	svchi	0x00089104
    736c:	04000000 	streq	r0, [r0], #-0
    7370:	0001c50a 	andeq	ip, r1, sl, lsl #10
    7374:	10920400 	addsne	r0, r2, r0, lsl #8
    7378:	000000ac 	andeq	r0, r0, ip, lsr #1
    737c:	cc030006 	stcgt	0, cr0, [r3], {6}
    7380:	0400000c 	streq	r0, [r0], #-12
    7384:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    7388:	ec0c0000 	stc	0, cr0, [ip], {-0}
    738c:	03000001 	movweq	r0, #1
    7390:	0d000002 	stceq	0, cr0, [r0, #-8]
    7394:	093d0b00 	ldmdbeq	sp!, {r8, r9, fp}
    7398:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    739c:	0001f80f 	andeq	pc, r1, pc, lsl #16
    73a0:	08010100 	stmdaeq	r1, {r8}
    73a4:	09910501 	ldmibeq	r1, {r0, r8, sl}
    73a8:	0000023b 	andeq	r0, r0, fp, lsr r2
    73ac:	00091a09 	andeq	r1, r9, r9, lsl #20
    73b0:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    73b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    73b8:	00010701 	andeq	r0, r1, r1, lsl #14
    73bc:	0005cc09 	andeq	ip, r5, r9, lsl #24
    73c0:	03940500 	orrseq	r0, r4, #0, 10
    73c4:	000000a0 	andeq	r0, r0, r0, lsr #1
    73c8:	00000101 	andeq	r0, r0, r1, lsl #2
    73cc:	0aab0300 	beq	feac7fd4 <_estack+0xdeac2fd4>
    73d0:	96050000 	strls	r0, [r5], -r0
    73d4:	00021103 	andeq	r1, r2, r3, lsl #2
    73d8:	023b0500 	eorseq	r0, fp, #0, 10
    73dc:	470c0000 	strmi	r0, [ip, -r0]
    73e0:	57000002 	strpl	r0, [r0, -r2]
    73e4:	0d000002 	stceq	0, cr0, [r0, #-8]
    73e8:	024c0500 	subeq	r0, ip, #0, 10
    73ec:	aa0b0000 	bge	2c73f4 <__ccfg+0x2a744c>
    73f0:	05000003 	streq	r0, [r0, #-3]
    73f4:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    73f8:	01010000 	mrseq	r0, (UNDEF: 1)
    73fc:	00009b0c 	andeq	r9, r0, ip, lsl #22
    7400:	00027500 	andeq	r7, r2, r0, lsl #10
    7404:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7408:	0000026a 	andeq	r0, r0, sl, ror #4
    740c:	00060e0b 	andeq	r0, r6, fp, lsl #28
    7410:	13060600 	movwne	r0, #26112	; 0x6600
    7414:	00000275 	andeq	r0, r0, r5, ror r2
    7418:	dd0b0101 	stfles	f0, [fp, #-4]
    741c:	04000008 	streq	r0, [r0], #-8
    7420:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    7424:	01010000 	mrseq	r0, (UNDEF: 1)
    7428:	000c720e 	andeq	r7, ip, lr, lsl #4
    742c:	016e0700 	cmneq	lr, r0, lsl #14
    7430:	0002a310 	andeq	sl, r2, r0, lsl r3
    7434:	a9040700 	stmdbge	r4, {r8, r9, sl}
    7438:	0f000002 	svceq	0x00000002
    743c:	0002b501 	andeq	fp, r2, r1, lsl #10
    7440:	008f1000 	addeq	r1, pc, r0
    7444:	0c000000 	stceq	0, cr0, [r0], {-0}
    7448:	000001a8 	andeq	r0, r0, r8, lsr #3
    744c:	000002c0 	andeq	r0, r0, r0, asr #5
    7450:	b505000d 	strlt	r0, [r5, #-13]
    7454:	11000002 	tstne	r0, r2
    7458:	000009e6 	andeq	r0, r0, r6, ror #19
    745c:	16017f07 	strne	r7, [r1], -r7, lsl #30
    7460:	000002c0 	andeq	r0, r0, r0, asr #5
    7464:	96110101 	ldrls	r0, [r1], -r1, lsl #2
    7468:	07000003 	streq	r0, [r0, -r3]
    746c:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    7470:	01000000 	mrseq	r0, (UNDEF: 0)
    7474:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
    7478:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    747c:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    7480:	01010000 	mrseq	r0, (UNDEF: 1)
    7484:	03070812 	movweq	r0, #30738	; 0x7812
    7488:	03190903 	tsteq	r9, #49152	; 0xc000
    748c:	a7130000 	ldrge	r0, [r3, -r0]
    7490:	0700003c 	smladxeq	r0, ip, r0, r0
    7494:	8f070307 	svchi	0x00070307
    7498:	00000000 	andeq	r0, r0, r0
    749c:	000fd313 	andeq	sp, pc, r3, lsl r3	; <UNPREDICTABLE>
    74a0:	03080700 	movweq	r0, #34560	; 0x8700
    74a4:	0000c208 	andeq	ip, r0, r8, lsl #4
    74a8:	0e000400 	cfcpyseq	mvf0, mvf0
    74ac:	00000a09 	andeq	r0, r0, r9, lsl #20
    74b0:	03030907 	movweq	r0, #14599	; 0x3907
    74b4:	000002f2 	strdeq	r0, [r0], -r2
    74b8:	00002914 	andeq	r2, r0, r4, lsl r9
    74bc:	0b073000 	bleq	1d34c4 <__ccfg+0x1b351c>
    74c0:	03890803 	orreq	r0, r9, #196608	; 0x30000
    74c4:	2a130000 	bcs	4c74cc <__ccfg+0x4a7524>
    74c8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    74cc:	8f080314 	svchi	0x00080314
    74d0:	00000000 	andeq	r0, r0, r0
    74d4:	000be713 	andeq	lr, fp, r3, lsl r7
    74d8:	03150700 	tsteq	r5, #0, 14
    74dc:	00008f08 	andeq	r8, r0, r8, lsl #30
    74e0:	94130200 	ldrls	r0, [r3], #-512	; 0xfffffe00
    74e4:	0700004c 	streq	r0, [r0, -ip, asr #32]
    74e8:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    74ec:	04000002 	streq	r0, [r0], #-2
    74f0:	00475a13 	subeq	r5, r7, r3, lsl sl
    74f4:	03170700 	tsteq	r7, #0, 14
    74f8:	0000c209 	andeq	ip, r0, r9, lsl #4
    74fc:	0f130800 	svceq	0x00130800
    7500:	07000000 	streq	r0, [r0, -r0]
    7504:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7508:	0c000003 	stceq	0, cr0, [r0], {3}
    750c:	00095d13 	andeq	r5, r9, r3, lsl sp
    7510:	03190700 	tsteq	r9, #0, 14
    7514:	00039915 	andeq	r9, r3, r5, lsl r9
    7518:	0c002c00 	stceq	12, cr2, [r0], {-0}
    751c:	00000319 	andeq	r0, r0, r9, lsl r3
    7520:	00000399 	muleq	r0, r9, r3
    7524:	00008815 	andeq	r8, r0, r5, lsl r8
    7528:	07000300 	streq	r0, [r0, -r0, lsl #6]
    752c:	00032604 	andeq	r2, r3, r4, lsl #12
    7530:	0bdc0e00 	bleq	ff70ad38 <_estack+0xdf705d38>
    7534:	1c070000 	stcne	0, cr0, [r7], {-0}
    7538:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    753c:	bc110000 	ldclt	0, cr0, [r1], {-0}
    7540:	0700000b 	streq	r0, [r0, -fp]
    7544:	bb14031e 	bllt	5081c4 <__ccfg+0x4e821c>
    7548:	01000003 	tsteq	r0, r3
    754c:	9f040701 	svcls	0x00040701
    7550:	16000003 	strne	r0, [r0], -r3
    7554:	001e1701 	andseq	r1, lr, r1, lsl #14
    7558:	050b0100 	streq	r0, [fp, #-256]	; 0xffffff00
    755c:	00008101 	andeq	r8, r0, r1, lsl #2
    7560:	00274800 	eoreq	r4, r7, r0, lsl #16
    7564:	0027b400 	eoreq	fp, r7, r0, lsl #8
    7568:	1b9c0100 	blne	fe707970 <_estack+0xde702970>
    756c:	17000004 	strne	r0, [r0, -r4]
    7570:	01007473 	tsteq	r0, r3, ror r4
    7574:	008f130b 	addeq	r1, pc, fp, lsl #6
    7578:	26500000 	ldrbcs	r0, [r0], -r0
    757c:	6d170000 	ldcvs	0, cr0, [r7, #-0]
    7580:	230b0100 	movwcs	r0, #45312	; 0xb100
    7584:	0000041b 	andeq	r0, r0, fp, lsl r4
    7588:	00002663 	andeq	r2, r0, r3, ror #12
    758c:	00261118 	eoreq	r1, r6, r8, lsl r1
    7590:	060d0100 	streq	r0, [sp], -r0, lsl #2
    7594:	00000081 	andeq	r0, r0, r1, lsl #1
    7598:	00002681 	andeq	r2, r0, r1, lsl #13
    759c:	66756219 			; <UNDEFINED> instruction: 0x66756219
    75a0:	080e0100 	stmdaeq	lr, {r8}
    75a4:	0000019b 	muleq	r0, fp, r1
    75a8:	000026c0 	andeq	r2, r0, r0, asr #13
    75ac:	a8040700 	stmdage	r4, {r8, r9, sl}
    75b0:	00000001 	andeq	r0, r0, r1
    75b4:	00000412 	andeq	r0, r0, r2, lsl r4
    75b8:	1d0d0003 	stcne	0, cr0, [sp, #-12]
    75bc:	01040000 	mrseq	r0, (UNDEF: 4)
    75c0:	000000ac 	andeq	r0, r0, ip, lsr #1
    75c4:	001e1f0c 	andseq	r1, lr, ip, lsl #30
    75c8:	000e1000 	andeq	r1, lr, r0
    75cc:	000d4000 	andeq	r4, sp, r0
    75d0:	00000000 	andeq	r0, r0, r0
    75d4:	0052c400 	subseq	ip, r2, r0, lsl #8
    75d8:	06010200 	streq	r0, [r1], -r0, lsl #4
    75dc:	00000c5d 	andeq	r0, r0, sp, asr ip
    75e0:	6b050202 	blvs	147df0 <__ccfg+0x127e48>
    75e4:	0200000a 	andeq	r0, r0, #10
    75e8:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    75ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    75f0:	0007f805 	andeq	pc, r7, r5, lsl #16
    75f4:	2a220300 	bcs	8881fc <__ccfg+0x868254>
    75f8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    75fc:	00004d18 	andeq	r4, r0, r8, lsl sp
    7600:	08010200 	stmdaeq	r1, {r9}
    7604:	00000c5b 	andeq	r0, r0, fp, asr ip
    7608:	002e1803 	eoreq	r1, lr, r3, lsl #16
    760c:	19310200 	ldmdbne	r1!, {r9}
    7610:	00000060 	andeq	r0, r0, r0, rrx
    7614:	6c070202 	sfmvs	f0, 4, [r7], {2}
    7618:	0300000d 	movweq	r0, #13
    761c:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    7620:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7624:	02000000 	andeq	r0, r0, #0
    7628:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    762c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7630:	00042107 	andeq	r2, r4, r7, lsl #2
    7634:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7638:	00746e69 	rsbseq	r6, r4, r9, ror #28
    763c:	2b070402 	blcs	1c864c <__ccfg+0x1a86a4>
    7640:	03000004 	movweq	r0, #4
    7644:	00002901 	andeq	r2, r0, r1, lsl #18
    7648:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    764c:	05000000 	streq	r0, [r0, #-0]
    7650:	0000008f 	andeq	r0, r0, pc, lsl #1
    7654:	001dc803 	andseq	ip, sp, r3, lsl #16
    7658:	122b0300 	eorne	r0, fp, #0, 6
    765c:	00000041 	andeq	r0, r0, r1, asr #32
    7660:	0000a006 	andeq	sl, r0, r6
    7664:	29530300 	ldmdbcs	r3, {r8, r9}^
    7668:	2c030000 	stccs	0, cr0, [r3], {-0}
    766c:	00006712 	andeq	r6, r0, r2, lsl r7
    7670:	00b10500 	adcseq	r0, r1, r0, lsl #10
    7674:	46030000 	strmi	r0, [r3], -r0
    7678:	03000006 	movweq	r0, #6
    767c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7680:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    7684:	5c093203 	sfmpl	f3, 4, [r9], {3}
    7688:	08000001 	stmdaeq	r0, {r0}
    768c:	00000034 	andeq	r0, r0, r4, lsr r0
    7690:	a0073403 	andge	r3, r7, r3, lsl #8
    7694:	01000000 	mrseq	r0, (UNDEF: 0)
    7698:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    769c:	0000064c 	andeq	r0, r0, ip, asr #12
    76a0:	a0033503 	andge	r3, r3, r3, lsl #10
    76a4:	01000000 	mrseq	r0, (UNDEF: 0)
    76a8:	08000601 	stmdaeq	r0, {r0, r9, sl}
    76ac:	000002e7 	andeq	r0, r0, r7, ror #5
    76b0:	a0033603 	andge	r3, r3, r3, lsl #12
    76b4:	01000000 	mrseq	r0, (UNDEF: 0)
    76b8:	08000501 	stmdaeq	r0, {r0, r8, sl}
    76bc:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    76c0:	a0033703 	andge	r3, r3, r3, lsl #14
    76c4:	01000000 	mrseq	r0, (UNDEF: 0)
    76c8:	08000401 	stmdaeq	r0, {r0, sl}
    76cc:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    76d0:	a0033803 	andge	r3, r3, r3, lsl #16
    76d4:	01000000 	mrseq	r0, (UNDEF: 0)
    76d8:	09000004 	stmdbeq	r0, {r2}
    76dc:	0000065b 	andeq	r0, r0, fp, asr r6
    76e0:	a0073a03 	andge	r3, r7, r3, lsl #20
    76e4:	01000000 	mrseq	r0, (UNDEF: 0)
    76e8:	0008fb09 	andeq	pc, r8, r9, lsl #22
    76ec:	033c0300 	teqeq	ip, #0, 6
    76f0:	000000a0 	andeq	r0, r0, r0, lsr #1
    76f4:	0f400902 	svceq	0x00400902
    76f8:	3d030000 	stccc	0, cr0, [r3, #-0]
    76fc:	0000a003 	andeq	sl, r0, r3
    7700:	13090300 	movwne	r0, #37632	; 0x9300
    7704:	03000009 	movweq	r0, #9
    7708:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    770c:	00040000 	andeq	r0, r4, r0
    7710:	00031d03 	andeq	r1, r3, r3, lsl #26
    7714:	03410300 	movteq	r0, #4864	; 0x1300
    7718:	000000ce 	andeq	r0, r0, lr, asr #1
    771c:	00015c06 	andeq	r5, r1, r6, lsl #24
    7720:	06be0a00 	ldrteq	r0, [lr], r0, lsl #20
    7724:	43030000 	movwmi	r0, #12288	; 0x3000
    7728:	0001681a 	andeq	r6, r1, sl, lsl r8
    772c:	0a010100 	beq	47b34 <__ccfg+0x27b8c>
    7730:	000001a0 	andeq	r0, r0, r0, lsr #3
    7734:	890e4503 	stmdbhi	lr, {r0, r1, r8, sl, lr}
    7738:	01000001 	tsteq	r0, r1
    773c:	8f040b01 	svchi	0x00040b01
    7740:	02000001 	andeq	r0, r0, #1
    7744:	0c640801 	stcleq	8, cr0, [r4], #-4
    7748:	8f050000 	svchi	0x00050000
    774c:	0a000001 	beq	7758 <__exidx_end+0x19d8>
    7750:	00000326 	andeq	r0, r0, r6, lsr #6
    7754:	891e4503 	ldmdbhi	lr, {r0, r1, r8, sl, lr}
    7758:	01000001 	tsteq	r0, r1
    775c:	04080701 	streq	r0, [r8], #-1793	; 0xfffff8ff
    7760:	01da098f 	bicseq	r0, sl, pc, lsl #19
    7764:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    7768:	0400000c 	streq	r0, [r0], #-12
    776c:	00670b90 	mlseq	r7, r0, fp, r0
    7770:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7774:	0000107b 	andeq	r1, r0, fp, ror r0
    7778:	8f089104 	svchi	0x00089104
    777c:	04000000 	streq	r0, [r0], #-0
    7780:	0001c509 	andeq	ip, r1, r9, lsl #10
    7784:	10920400 	addsne	r0, r2, r0, lsl #8
    7788:	000000ac 	andeq	r0, r0, ip, lsr #1
    778c:	cc030006 	stcgt	0, cr0, [r3], {6}
    7790:	0400000c 	streq	r0, [r0], #-12
    7794:	01a90393 			; <UNDEFINED> instruction: 0x01a90393
    7798:	da0c0000 	ble	3077a0 <__ccfg+0x2e77f8>
    779c:	f1000001 	cps	#1
    77a0:	0d000001 	stceq	0, cr0, [r0, #-4]
    77a4:	093d0a00 	ldmdbeq	sp!, {r9, fp}
    77a8:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    77ac:	0001e60f 	andeq	lr, r1, pc, lsl #12
    77b0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    77b4:	09910501 	ldmibeq	r1, {r0, r8, sl}
    77b8:	00000229 	andeq	r0, r0, r9, lsr #4
    77bc:	00091a08 	andeq	r1, r9, r8, lsl #20
    77c0:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    77c4:	000000a0 	andeq	r0, r0, r0, lsr #1
    77c8:	00010701 	andeq	r0, r1, r1, lsl #14
    77cc:	0005cc08 	andeq	ip, r5, r8, lsl #24
    77d0:	03940500 	orrseq	r0, r4, #0, 10
    77d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    77d8:	00000101 	andeq	r0, r0, r1, lsl #2
    77dc:	0aab0300 	beq	feac83e4 <_estack+0xdeac33e4>
    77e0:	96050000 	strls	r0, [r5], -r0
    77e4:	0001ff03 	andeq	pc, r1, r3, lsl #30
    77e8:	02290500 	eoreq	r0, r9, #0, 10
    77ec:	350c0000 	strcc	r0, [ip, #-0]
    77f0:	45000002 	strmi	r0, [r0, #-2]
    77f4:	0d000002 	stceq	0, cr0, [r0, #-8]
    77f8:	023a0500 	eorseq	r0, sl, #0, 10
    77fc:	aa0a0000 	bge	287804 <__ccfg+0x26785c>
    7800:	05000003 	streq	r0, [r0, #-3]
    7804:	0245179c 	subeq	r1, r5, #156, 14	; 0x2700000
    7808:	01010000 	mrseq	r0, (UNDEF: 1)
    780c:	00009b0c 	andeq	r9, r0, ip, lsl #22
    7810:	00026300 	andeq	r6, r2, r0, lsl #6
    7814:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7818:	00000258 	andeq	r0, r0, r8, asr r2
    781c:	00060e0a 	andeq	r0, r6, sl, lsl #28
    7820:	13060600 	movwne	r0, #26112	; 0x6600
    7824:	00000263 	andeq	r0, r0, r3, ror #4
    7828:	dd0a0101 	stfles	f0, [sl, #-4]
    782c:	04000008 	streq	r0, [r0], #-8
    7830:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    7834:	01010000 	mrseq	r0, (UNDEF: 1)
    7838:	000c720e 	andeq	r7, ip, lr, lsl #4
    783c:	016e0700 	cmneq	lr, r0, lsl #14
    7840:	00029110 	andeq	r9, r2, r0, lsl r1
    7844:	97040b00 	strls	r0, [r4, -r0, lsl #22]
    7848:	0f000002 	svceq	0x00000002
    784c:	0002a301 	andeq	sl, r2, r1, lsl #6
    7850:	008f1000 	addeq	r1, pc, r0
    7854:	0c000000 	stceq	0, cr0, [r0], {-0}
    7858:	00000196 	muleq	r0, r6, r1
    785c:	000002ae 	andeq	r0, r0, lr, lsr #5
    7860:	a305000d 	movwge	r0, #20493	; 0x500d
    7864:	11000002 	tstne	r0, r2
    7868:	000009e6 	andeq	r0, r0, r6, ror #19
    786c:	16017f07 	strne	r7, [r1], -r7, lsl #30
    7870:	000002ae 	andeq	r0, r0, lr, lsr #5
    7874:	96110101 	ldrls	r0, [r1], -r1, lsl #2
    7878:	07000003 	streq	r0, [r0, -r3]
    787c:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    7880:	01000000 	mrseq	r0, (UNDEF: 0)
    7884:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
    7888:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    788c:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    7890:	01010000 	mrseq	r0, (UNDEF: 1)
    7894:	03070812 	movweq	r0, #30738	; 0x7812
    7898:	03070903 	movweq	r0, #30979	; 0x7903
    789c:	a7130000 	ldrge	r0, [r3, -r0]
    78a0:	0700003c 	smladxeq	r0, ip, r0, r0
    78a4:	8f070307 	svchi	0x00070307
    78a8:	00000000 	andeq	r0, r0, r0
    78ac:	000fd313 	andeq	sp, pc, r3, lsl r3	; <UNPREDICTABLE>
    78b0:	03080700 	movweq	r0, #34560	; 0x8700
    78b4:	0000c208 	andeq	ip, r0, r8, lsl #4
    78b8:	0e000400 	cfcpyseq	mvf0, mvf0
    78bc:	00000a09 	andeq	r0, r0, r9, lsl #20
    78c0:	03030907 	movweq	r0, #14599	; 0x3907
    78c4:	000002e0 	andeq	r0, r0, r0, ror #5
    78c8:	00002914 	andeq	r2, r0, r4, lsl r9
    78cc:	0b073000 	bleq	1d38d4 <__ccfg+0x1b392c>
    78d0:	03770803 	cmneq	r7, #196608	; 0x30000
    78d4:	2a130000 	bcs	4c78dc <__ccfg+0x4a7934>
    78d8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    78dc:	8f080314 	svchi	0x00080314
    78e0:	00000000 	andeq	r0, r0, r0
    78e4:	000be713 	andeq	lr, fp, r3, lsl r7
    78e8:	03150700 	tsteq	r5, #0, 14
    78ec:	00008f08 	andeq	r8, r0, r8, lsl #30
    78f0:	94130200 	ldrls	r0, [r3], #-512	; 0xfffffe00
    78f4:	0700004c 	streq	r0, [r0, -ip, asr #32]
    78f8:	840b0316 	strhi	r0, [fp], #-790	; 0xfffffcea
    78fc:	04000002 	streq	r0, [r0], #-2
    7900:	00475a13 	subeq	r5, r7, r3, lsl sl
    7904:	03170700 	tsteq	r7, #0, 14
    7908:	0000c209 	andeq	ip, r0, r9, lsl #4
    790c:	0f130800 	svceq	0x00130800
    7910:	07000000 	streq	r0, [r0, -r0]
    7914:	770f0318 	smladvc	pc, r8, r3, r0	; <UNPREDICTABLE>
    7918:	0c000003 	stceq	0, cr0, [r0], {3}
    791c:	00095d13 	andeq	r5, r9, r3, lsl sp
    7920:	03190700 	tsteq	r9, #0, 14
    7924:	00038715 	andeq	r8, r3, r5, lsl r7
    7928:	0c002c00 	stceq	12, cr2, [r0], {-0}
    792c:	00000307 	andeq	r0, r0, r7, lsl #6
    7930:	00000387 	andeq	r0, r0, r7, lsl #7
    7934:	00008815 	andeq	r8, r0, r5, lsl r8
    7938:	0b000300 	bleq	8540 <__exidx_end+0x27c0>
    793c:	00031404 	andeq	r1, r3, r4, lsl #8
    7940:	0bdc0e00 	bleq	ff70b148 <_estack+0xdf706148>
    7944:	1c070000 	stcne	0, cr0, [r7], {-0}
    7948:	03141b03 	tsteq	r4, #3072	; 0xc00
    794c:	bc110000 	ldclt	0, cr0, [r1], {-0}
    7950:	0700000b 	streq	r0, [r0, -fp]
    7954:	a914031e 	ldmdbge	r4, {r1, r2, r3, r4, r8, r9}
    7958:	01000003 	tsteq	r0, r3
    795c:	8d040b01 	vstrhi	d0, [r4, #-4]
    7960:	0a000003 	beq	7974 <__exidx_end+0x1bf4>
    7964:	00001e5f 	andeq	r1, r0, pc, asr lr
    7968:	890e0901 	stmdbhi	lr, {r0, r8, fp}
    796c:	01000001 	tsteq	r0, r1
    7970:	69011601 	stmdbvs	r1, {r0, r9, sl, ip}
    7974:	0100001e 	tsteq	r0, lr, lsl r0
    7978:	8101050d 	tsthi	r1, sp, lsl #10
    797c:	b4000000 	strlt	r0, [r0], #-0
    7980:	2c000027 	stccs	0, cr0, [r0], {39}	; 0x27
    7984:	01000028 	tsteq	r0, r8, lsr #32
    7988:	7473179c 	ldrbtvc	r1, [r3], #-1948	; 0xfffff864
    798c:	120d0100 	andne	r0, sp, #0, 2
    7990:	0000008f 	andeq	r0, r0, pc, lsl #1
    7994:	0000270a 	andeq	r2, r0, sl, lsl #14
    7998:	66756217 			; <UNDEFINED> instruction: 0x66756217
    799c:	1c0d0100 	stfnes	f0, [sp], {-0}
    79a0:	00000189 	andeq	r0, r0, r9, lsl #3
    79a4:	00002728 	andeq	r2, r0, r8, lsr #14
    79a8:	6e656c17 	mcrvs	12, 3, r6, cr5, cr7, {0}
    79ac:	250d0100 	strcs	r0, [sp, #-256]	; 0xffffff00
    79b0:	00000081 	andeq	r0, r0, r1, lsl #1
    79b4:	0000277d 	andeq	r2, r0, sp, ror r7
    79b8:	00261118 	eoreq	r1, r6, r8, lsl r1
    79bc:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    79c0:	00000081 	andeq	r0, r0, r1, lsl #1
    79c4:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    79c8:	044c0000 	strbeq	r0, [ip], #-0
    79cc:	00030000 	andeq	r0, r3, r0
    79d0:	00001e5c 	andeq	r1, r0, ip, asr lr
    79d4:	00ac0104 	adceq	r0, ip, r4, lsl #2
    79d8:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    79dc:	1000001e 	andne	r0, r0, lr, lsl r0
    79e0:	5000000e 	andpl	r0, r0, lr
    79e4:	0000000d 	andeq	r0, r0, sp
    79e8:	8c000000 	stchi	0, cr0, [r0], {-0}
    79ec:	02000054 	andeq	r0, r0, #84	; 0x54
    79f0:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    79f4:	02020000 	andeq	r0, r2, #0
    79f8:	000a6b05 	andeq	r6, sl, r5, lsl #22
    79fc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7a00:	000007fd 	strdeq	r0, [r0], -sp
    7a04:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    7a08:	03000007 	movweq	r0, #7
    7a0c:	00002a22 	andeq	r2, r0, r2, lsr #20
    7a10:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7a14:	02000000 	andeq	r0, r0, #0
    7a18:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    7a1c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    7a20:	0200002e 	andeq	r0, r0, #46	; 0x2e
    7a24:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7a28:	02020000 	andeq	r0, r2, #0
    7a2c:	000d6c07 	andeq	r6, sp, r7, lsl #24
    7a30:	29ba0300 	ldmibcs	sl!, {r8, r9}
    7a34:	34020000 	strcc	r0, [r2], #-0
    7a38:	00007319 	andeq	r7, r0, r9, lsl r3
    7a3c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7a40:	00000426 	andeq	r0, r0, r6, lsr #8
    7a44:	21070802 	tstcs	r7, r2, lsl #16
    7a48:	04000004 	streq	r0, [r0], #-4
    7a4c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7a50:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7a54:	00042b07 	andeq	r2, r4, r7, lsl #22
    7a58:	051e0300 	ldreq	r0, [lr, #-768]	; 0xfffffd00
    7a5c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    7a60:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7a64:	0b900500 	bleq	fe408e6c <_estack+0xde403e6c>
    7a68:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7a6c:	0000b300 	andeq	fp, r0, r0, lsl #6
    7a70:	086d0600 	stmdaeq	sp!, {r9, sl}^
    7a74:	00b30000 	adcseq	r0, r3, r0
    7a78:	01000000 	mrseq	r0, (UNDEF: 0)
    7a7c:	03040700 	movweq	r0, #18176	; 0x4700
    7a80:	00000b92 	muleq	r0, r2, fp
    7a84:	8f186303 	svchi	0x00186303
    7a88:	03000000 	movweq	r0, #0
    7a8c:	00002901 	andeq	r2, r0, r1, lsl #18
    7a90:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    7a94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7a98:	000000c1 	andeq	r0, r0, r1, asr #1
    7a9c:	001dc803 	andseq	ip, sp, r3, lsl #16
    7aa0:	122b0400 	eorne	r0, fp, #0, 8
    7aa4:	00000041 	andeq	r0, r0, r1, asr #32
    7aa8:	0000d209 	andeq	sp, r0, r9, lsl #4
    7aac:	29530300 	ldmdbcs	r3, {r8, r9}^
    7ab0:	2c040000 	stccs	0, cr0, [r4], {-0}
    7ab4:	00006712 	andeq	r6, r0, r2, lsl r7
    7ab8:	00e30800 	rsceq	r0, r3, r0, lsl #16
    7abc:	46030000 	strmi	r0, [r3], -r0
    7ac0:	04000006 	streq	r0, [r0], #-6
    7ac4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7ac8:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    7acc:	8e093204 	cdphi	2, 0, cr3, cr9, cr4, {0}
    7ad0:	0b000001 	bleq	7adc <__exidx_end+0x1d5c>
    7ad4:	00000034 	andeq	r0, r0, r4, lsr r0
    7ad8:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    7adc:	01000000 	mrseq	r0, (UNDEF: 0)
    7ae0:	0b000701 	bleq	96ec <__exidx_end+0x396c>
    7ae4:	0000064c 	andeq	r0, r0, ip, asr #12
    7ae8:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    7aec:	01000000 	mrseq	r0, (UNDEF: 0)
    7af0:	0b000601 	bleq	92fc <__exidx_end+0x357c>
    7af4:	000002e7 	andeq	r0, r0, r7, ror #5
    7af8:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    7afc:	01000000 	mrseq	r0, (UNDEF: 0)
    7b00:	0b000501 	bleq	8f0c <__exidx_end+0x318c>
    7b04:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    7b08:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    7b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    7b10:	0b000401 	bleq	8b1c <__exidx_end+0x2d9c>
    7b14:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    7b18:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    7b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    7b20:	0c000004 	stceq	0, cr0, [r0], {4}
    7b24:	0000065b 	andeq	r0, r0, fp, asr r6
    7b28:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    7b2c:	01000000 	mrseq	r0, (UNDEF: 0)
    7b30:	0008fb0c 	andeq	pc, r8, ip, lsl #22
    7b34:	033c0400 	teqeq	ip, #0, 8
    7b38:	000000d2 	ldrdeq	r0, [r0], -r2
    7b3c:	0f400c02 	svceq	0x00400c02
    7b40:	3d040000 	stccc	0, cr0, [r4, #-0]
    7b44:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b48:	130c0300 	movwne	r0, #49920	; 0xc300
    7b4c:	04000009 	streq	r0, [r0], #-9
    7b50:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    7b54:	00040000 	andeq	r0, r4, r0
    7b58:	00031d03 	andeq	r1, r3, r3, lsl #26
    7b5c:	03410400 	movteq	r0, #5120	; 0x1400
    7b60:	00000100 	andeq	r0, r0, r0, lsl #2
    7b64:	00018e09 	andeq	r8, r1, r9, lsl #28
    7b68:	06be0d00 	ldrteq	r0, [lr], r0, lsl #26
    7b6c:	43040000 	movwmi	r0, #16384	; 0x4000
    7b70:	00019a1a 	andeq	r9, r1, sl, lsl sl
    7b74:	0d010100 	stfeqs	f0, [r1, #-0]
    7b78:	000001a0 	andeq	r0, r0, r0, lsr #3
    7b7c:	bb0e4504 	bllt	398f94 <__ccfg+0x378fec>
    7b80:	01000001 	tsteq	r0, r1
    7b84:	c1040e01 	tstgt	r4, r1, lsl #28
    7b88:	02000001 	andeq	r0, r0, #1
    7b8c:	0c640801 	stcleq	8, cr0, [r4], #-4
    7b90:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7b94:	0d000001 	stceq	0, cr0, [r0, #-4]
    7b98:	00000326 	andeq	r0, r0, r6, lsr #6
    7b9c:	bb1e4504 	bllt	798fb4 <__ccfg+0x77900c>
    7ba0:	01000001 	tsteq	r0, r1
    7ba4:	05080a01 	streq	r0, [r8, #-2561]	; 0xfffff5ff
    7ba8:	020c098f 	andeq	r0, ip, #2342912	; 0x23c000
    7bac:	d80c0000 	stmdale	ip, {}	; <UNPREDICTABLE>
    7bb0:	0500000c 	streq	r0, [r0, #-12]
    7bb4:	00670b90 	mlseq	r7, r0, fp, r0
    7bb8:	0c000000 	stceq	0, cr0, [r0], {-0}
    7bbc:	0000107b 	andeq	r1, r0, fp, ror r0
    7bc0:	c1089105 	tstgt	r8, r5, lsl #2
    7bc4:	04000000 	streq	r0, [r0], #-0
    7bc8:	0001c50c 	andeq	ip, r1, ip, lsl #10
    7bcc:	10920500 	addsne	r0, r2, r0, lsl #10
    7bd0:	000000de 	ldrdeq	r0, [r0], -lr
    7bd4:	cc030006 	stcgt	0, cr0, [r3], {6}
    7bd8:	0500000c 	streq	r0, [r0, #-12]
    7bdc:	01db0393 			; <UNDEFINED> instruction: 0x01db0393
    7be0:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    7be4:	23000002 	movwcs	r0, #2
    7be8:	10000002 	andne	r0, r0, r2
    7bec:	093d0d00 	ldmdbeq	sp!, {r8, sl, fp}
    7bf0:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7bf4:	0002180f 	andeq	r1, r2, pc, lsl #16
    7bf8:	0a010100 	beq	48000 <__ccfg+0x28058>
    7bfc:	09910601 	ldmibeq	r1, {r0, r9, sl}
    7c00:	0000025b 	andeq	r0, r0, fp, asr r2
    7c04:	00091a0b 	andeq	r1, r9, fp, lsl #20
    7c08:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7c0c:	000000d2 	ldrdeq	r0, [r0], -r2
    7c10:	00010701 	andeq	r0, r1, r1, lsl #14
    7c14:	0005cc0b 	andeq	ip, r5, fp, lsl #24
    7c18:	03940600 	orrseq	r0, r4, #0, 12
    7c1c:	000000d2 	ldrdeq	r0, [r0], -r2
    7c20:	00000101 	andeq	r0, r0, r1, lsl #2
    7c24:	0aab0300 	beq	feac882c <_estack+0xdeac382c>
    7c28:	96060000 	strls	r0, [r6], -r0
    7c2c:	00023103 	andeq	r3, r2, r3, lsl #2
    7c30:	025b0800 	subseq	r0, fp, #0, 16
    7c34:	670f0000 	strvs	r0, [pc, -r0]
    7c38:	77000002 	strvc	r0, [r0, -r2]
    7c3c:	10000002 	andne	r0, r0, r2
    7c40:	026c0800 	rsbeq	r0, ip, #0, 16
    7c44:	aa0d0000 	bge	347c4c <__ccfg+0x327ca4>
    7c48:	06000003 	streq	r0, [r0], -r3
    7c4c:	0277179c 	rsbseq	r1, r7, #156, 14	; 0x2700000
    7c50:	01010000 	mrseq	r0, (UNDEF: 1)
    7c54:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    7c58:	00029500 	andeq	r9, r2, r0, lsl #10
    7c5c:	08001000 	stmdaeq	r0, {ip}
    7c60:	0000028a 	andeq	r0, r0, sl, lsl #5
    7c64:	00060e0d 	andeq	r0, r6, sp, lsl #28
    7c68:	13060700 	movwne	r0, #26368	; 0x6700
    7c6c:	00000295 	muleq	r0, r5, r2
    7c70:	dd0d0101 	stfles	f0, [sp, #-4]
    7c74:	05000008 	streq	r0, [r0, #-8]
    7c78:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    7c7c:	01010000 	mrseq	r0, (UNDEF: 1)
    7c80:	000c7211 	andeq	r7, ip, r1, lsl r2
    7c84:	016e0800 	cmneq	lr, r0, lsl #16
    7c88:	0002c310 	andeq	ip, r2, r0, lsl r3
    7c8c:	c9040e00 	stmdbgt	r4, {r9, sl, fp}
    7c90:	12000002 	andne	r0, r0, #2
    7c94:	0002d501 	andeq	sp, r2, r1, lsl #10
    7c98:	00c11300 	sbceq	r1, r1, r0, lsl #6
    7c9c:	0f000000 	svceq	0x00000000
    7ca0:	000001c8 	andeq	r0, r0, r8, asr #3
    7ca4:	000002e0 	andeq	r0, r0, r0, ror #5
    7ca8:	d5080010 	strle	r0, [r8, #-16]
    7cac:	14000002 	strne	r0, [r0], #-2
    7cb0:	000009e6 	andeq	r0, r0, r6, ror #19
    7cb4:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7cb8:	000002e0 	andeq	r0, r0, r0, ror #5
    7cbc:	96140101 	ldrls	r0, [r4], -r1, lsl #2
    7cc0:	08000003 	stmdaeq	r0, {r0, r1}
    7cc4:	ef140182 	svc	0x00140182
    7cc8:	01000000 	mrseq	r0, (UNDEF: 0)
    7ccc:	036e1401 	cmneq	lr, #16777216	; 0x1000000
    7cd0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7cd4:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    7cd8:	01010000 	mrseq	r0, (UNDEF: 1)
    7cdc:	03080815 	movweq	r0, #34837	; 0x8815
    7ce0:	03390903 	teqeq	r9, #49152	; 0xc000
    7ce4:	a7160000 	ldrge	r0, [r6, -r0]
    7ce8:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    7cec:	c1070307 	tstgt	r7, r7, lsl #6
    7cf0:	00000000 	andeq	r0, r0, r0
    7cf4:	000fd316 	andeq	sp, pc, r6, lsl r3	; <UNPREDICTABLE>
    7cf8:	03080800 	movweq	r0, #34816	; 0x8800
    7cfc:	0000f408 	andeq	pc, r0, r8, lsl #8
    7d00:	11000400 	tstne	r0, r0, lsl #8
    7d04:	00000a09 	andeq	r0, r0, r9, lsl #20
    7d08:	03030908 	movweq	r0, #14600	; 0x3908
    7d0c:	00000312 	andeq	r0, r0, r2, lsl r3
    7d10:	00002917 	andeq	r2, r0, r7, lsl r9
    7d14:	0b083000 	bleq	213d1c <__ccfg+0x1f3d74>
    7d18:	03a90803 			; <UNDEFINED> instruction: 0x03a90803
    7d1c:	2a160000 	bcs	587d24 <__ccfg+0x567d7c>
    7d20:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    7d24:	c1080314 	tstgt	r8, r4, lsl r3
    7d28:	00000000 	andeq	r0, r0, r0
    7d2c:	000be716 	andeq	lr, fp, r6, lsl r7
    7d30:	03150800 	tsteq	r5, #0, 16
    7d34:	0000c108 	andeq	ip, r0, r8, lsl #2
    7d38:	94160200 	ldrls	r0, [r6], #-512	; 0xfffffe00
    7d3c:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    7d40:	b60b0316 			; <UNDEFINED> instruction: 0xb60b0316
    7d44:	04000002 	streq	r0, [r0], #-2
    7d48:	00475a16 	subeq	r5, r7, r6, lsl sl
    7d4c:	03170800 	tsteq	r7, #0, 16
    7d50:	0000f409 	andeq	pc, r0, r9, lsl #8
    7d54:	0f160800 	svceq	0x00160800
    7d58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7d5c:	a90f0318 	stmdbge	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7d60:	0c000003 	stceq	0, cr0, [r0], {3}
    7d64:	00095d16 	andeq	r5, r9, r6, lsl sp
    7d68:	03190800 	tsteq	r9, #0, 16
    7d6c:	0003b915 	andeq	fp, r3, r5, lsl r9
    7d70:	0f002c00 	svceq	0x00002c00
    7d74:	00000339 	andeq	r0, r0, r9, lsr r3
    7d78:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    7d7c:	00008818 	andeq	r8, r0, r8, lsl r8
    7d80:	0e000300 	cdpeq	3, 0, cr0, cr0, cr0, {0}
    7d84:	00034604 	andeq	r4, r3, r4, lsl #12
    7d88:	0bdc1100 	bleq	ff70c190 <_estack+0xdf707190>
    7d8c:	1c080000 	stcne	0, cr0, [r8], {-0}
    7d90:	03461b03 	movteq	r1, #27395	; 0x6b03
    7d94:	bc140000 	ldclt	0, cr0, [r4], {-0}
    7d98:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7d9c:	db14031e 	blle	508a1c <__ccfg+0x4e8a74>
    7da0:	01000003 	tsteq	r0, r3
    7da4:	bf040e01 	svclt	0x00040e01
    7da8:	19000003 	stmdbne	r0, {r0, r1}
    7dac:	001e7001 	andseq	r7, lr, r1
    7db0:	050c0100 	streq	r0, [ip, #-256]	; 0xffffff00
    7db4:	00008101 	andeq	r8, r0, r1, lsl #2
    7db8:	00282c00 	eoreq	r2, r8, r0, lsl #24
    7dbc:	00288000 	eoreq	r8, r8, r0
    7dc0:	499c0100 	ldmibmi	ip, {r8}
    7dc4:	1a000004 	bne	7ddc <__exidx_end+0x205c>
    7dc8:	01007473 	tsteq	r0, r3, ror r4
    7dcc:	00c1140c 	sbceq	r1, r1, ip, lsl #8
    7dd0:	281c0000 	ldmdacs	ip, {}	; <UNPREDICTABLE>
    7dd4:	6d1b0000 	ldcvs	0, cr0, [fp, #-0]
    7dd8:	240c0100 	strcs	r0, [ip], #-256	; 0xffffff00
    7ddc:	00000449 	andeq	r0, r0, r9, asr #8
    7de0:	1c749102 	ldfnep	f1, [r4], #-8
    7de4:	0026111d 	eoreq	r1, r6, sp, lsl r1
    7de8:	060e0100 	streq	r0, [lr], -r0, lsl #2
    7dec:	00000081 	andeq	r0, r0, r1, lsl #1
    7df0:	0000282f 	andeq	r2, r0, pc, lsr #16
    7df4:	6675621e 			; <UNDEFINED> instruction: 0x6675621e
    7df8:	080f0100 	stmdaeq	pc, {r8}	; <UNPREDICTABLE>
    7dfc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7e00:	0000286e 	andeq	r2, r0, lr, ror #16
    7e04:	0070611f 	rsbseq	r6, r0, pc, lsl r1
    7e08:	b50a1001 	strlt	r1, [sl, #-1]
    7e0c:	02000000 	andeq	r0, r0, #0
    7e10:	0e005c91 	mcreq	12, 0, r5, cr0, cr1, {4}
    7e14:	0001c804 	andeq	ip, r1, r4, lsl #16
    7e18:	044c0000 	strbeq	r0, [ip], #-0
    7e1c:	00030000 	andeq	r0, r3, r0
    7e20:	00002008 	andeq	r2, r0, r8
    7e24:	00ac0104 	adceq	r0, ip, r4, lsl #2
    7e28:	bb0c0000 	bllt	307e30 <__ccfg+0x2e7e88>
    7e2c:	1000001e 	andne	r0, r0, lr, lsl r0
    7e30:	6000000e 	andvs	r0, r0, lr
    7e34:	0000000d 	andeq	r0, r0, sp
    7e38:	31000000 	mrscc	r0, (UNDEF: 0)
    7e3c:	02000056 	andeq	r0, r0, #86	; 0x56
    7e40:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    7e44:	02020000 	andeq	r0, r2, #0
    7e48:	000a6b05 	andeq	r6, sl, r5, lsl #22
    7e4c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7e50:	000007fd 	strdeq	r0, [r0], -sp
    7e54:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    7e58:	03000007 	movweq	r0, #7
    7e5c:	00002a22 	andeq	r2, r0, r2, lsr #20
    7e60:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7e64:	02000000 	andeq	r0, r0, #0
    7e68:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    7e6c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    7e70:	0200002e 	andeq	r0, r0, #46	; 0x2e
    7e74:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7e78:	02020000 	andeq	r0, r2, #0
    7e7c:	000d6c07 	andeq	r6, sp, r7, lsl #24
    7e80:	29ba0300 	ldmibcs	sl!, {r8, r9}
    7e84:	34020000 	strcc	r0, [r2], #-0
    7e88:	00007319 	andeq	r7, r0, r9, lsl r3
    7e8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7e90:	00000426 	andeq	r0, r0, r6, lsr #8
    7e94:	21070802 	tstcs	r7, r2, lsl #16
    7e98:	04000004 	streq	r0, [r0], #-4
    7e9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7ea0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7ea4:	00042b07 	andeq	r2, r4, r7, lsl #22
    7ea8:	051e0300 	ldreq	r0, [lr, #-768]	; 0xfffffd00
    7eac:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    7eb0:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7eb4:	0b900500 	bleq	fe4092bc <_estack+0xde4042bc>
    7eb8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7ebc:	0000b300 	andeq	fp, r0, r0, lsl #6
    7ec0:	086d0600 	stmdaeq	sp!, {r9, sl}^
    7ec4:	00b30000 	adcseq	r0, r3, r0
    7ec8:	01000000 	mrseq	r0, (UNDEF: 0)
    7ecc:	03040700 	movweq	r0, #18176	; 0x4700
    7ed0:	00000b92 	muleq	r0, r2, fp
    7ed4:	8f186303 	svchi	0x00186303
    7ed8:	03000000 	movweq	r0, #0
    7edc:	00002901 	andeq	r2, r0, r1, lsl #18
    7ee0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    7ee4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7ee8:	000000c1 	andeq	r0, r0, r1, asr #1
    7eec:	001dc803 	andseq	ip, sp, r3, lsl #16
    7ef0:	122b0400 	eorne	r0, fp, #0, 8
    7ef4:	00000041 	andeq	r0, r0, r1, asr #32
    7ef8:	0000d209 	andeq	sp, r0, r9, lsl #4
    7efc:	29530300 	ldmdbcs	r3, {r8, r9}^
    7f00:	2c040000 	stccs	0, cr0, [r4], {-0}
    7f04:	00006712 	andeq	r6, r0, r2, lsl r7
    7f08:	00e30800 	rsceq	r0, r3, r0, lsl #16
    7f0c:	46030000 	strmi	r0, [r3], -r0
    7f10:	04000006 	streq	r0, [r0], #-6
    7f14:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7f18:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
    7f1c:	8e093204 	cdphi	2, 0, cr3, cr9, cr4, {0}
    7f20:	0b000001 	bleq	7f2c <__exidx_end+0x21ac>
    7f24:	00000034 	andeq	r0, r0, r4, lsr r0
    7f28:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    7f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f30:	0b000701 	bleq	9b3c <__exidx_end+0x3dbc>
    7f34:	0000064c 	andeq	r0, r0, ip, asr #12
    7f38:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    7f3c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f40:	0b000601 	bleq	974c <__exidx_end+0x39cc>
    7f44:	000002e7 	andeq	r0, r0, r7, ror #5
    7f48:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    7f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f50:	0b000501 	bleq	935c <__exidx_end+0x35dc>
    7f54:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    7f58:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    7f5c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f60:	0b000401 	bleq	8f6c <__exidx_end+0x31ec>
    7f64:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    7f68:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    7f6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f70:	0c000004 	stceq	0, cr0, [r0], {4}
    7f74:	0000065b 	andeq	r0, r0, fp, asr r6
    7f78:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    7f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f80:	0008fb0c 	andeq	pc, r8, ip, lsl #22
    7f84:	033c0400 	teqeq	ip, #0, 8
    7f88:	000000d2 	ldrdeq	r0, [r0], -r2
    7f8c:	0f400c02 	svceq	0x00400c02
    7f90:	3d040000 	stccc	0, cr0, [r4, #-0]
    7f94:	0000d203 	andeq	sp, r0, r3, lsl #4
    7f98:	130c0300 	movwne	r0, #49920	; 0xc300
    7f9c:	04000009 	streq	r0, [r0], #-9
    7fa0:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    7fa4:	00040000 	andeq	r0, r4, r0
    7fa8:	00031d03 	andeq	r1, r3, r3, lsl #26
    7fac:	03410400 	movteq	r0, #5120	; 0x1400
    7fb0:	00000100 	andeq	r0, r0, r0, lsl #2
    7fb4:	00018e09 	andeq	r8, r1, r9, lsl #28
    7fb8:	06be0d00 	ldrteq	r0, [lr], r0, lsl #26
    7fbc:	43040000 	movwmi	r0, #16384	; 0x4000
    7fc0:	00019a1a 	andeq	r9, r1, sl, lsl sl
    7fc4:	0d010100 	stfeqs	f0, [r1, #-0]
    7fc8:	000001a0 	andeq	r0, r0, r0, lsr #3
    7fcc:	bb0e4504 	bllt	3993e4 <__ccfg+0x37943c>
    7fd0:	01000001 	tsteq	r0, r1
    7fd4:	c1040e01 	tstgt	r4, r1, lsl #28
    7fd8:	02000001 	andeq	r0, r0, #1
    7fdc:	0c640801 	stcleq	8, cr0, [r4], #-4
    7fe0:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7fe4:	0d000001 	stceq	0, cr0, [r0, #-4]
    7fe8:	00000326 	andeq	r0, r0, r6, lsr #6
    7fec:	bb1e4504 	bllt	799404 <__ccfg+0x77945c>
    7ff0:	01000001 	tsteq	r0, r1
    7ff4:	05080a01 	streq	r0, [r8, #-2561]	; 0xfffff5ff
    7ff8:	020c098f 	andeq	r0, ip, #2342912	; 0x23c000
    7ffc:	d80c0000 	stmdale	ip, {}	; <UNPREDICTABLE>
    8000:	0500000c 	streq	r0, [r0, #-12]
    8004:	00670b90 	mlseq	r7, r0, fp, r0
    8008:	0c000000 	stceq	0, cr0, [r0], {-0}
    800c:	0000107b 	andeq	r1, r0, fp, ror r0
    8010:	c1089105 	tstgt	r8, r5, lsl #2
    8014:	04000000 	streq	r0, [r0], #-0
    8018:	0001c50c 	andeq	ip, r1, ip, lsl #10
    801c:	10920500 	addsne	r0, r2, r0, lsl #10
    8020:	000000de 	ldrdeq	r0, [r0], -lr
    8024:	cc030006 	stcgt	0, cr0, [r3], {6}
    8028:	0500000c 	streq	r0, [r0, #-12]
    802c:	01db0393 			; <UNDEFINED> instruction: 0x01db0393
    8030:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    8034:	23000002 	movwcs	r0, #2
    8038:	10000002 	andne	r0, r0, r2
    803c:	093d0d00 	ldmdbeq	sp!, {r8, sl, fp}
    8040:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    8044:	0002180f 	andeq	r1, r2, pc, lsl #16
    8048:	0a010100 	beq	48450 <__ccfg+0x284a8>
    804c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    8050:	0000025b 	andeq	r0, r0, fp, asr r2
    8054:	00091a0b 	andeq	r1, r9, fp, lsl #20
    8058:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    805c:	000000d2 	ldrdeq	r0, [r0], -r2
    8060:	00010701 	andeq	r0, r1, r1, lsl #14
    8064:	0005cc0b 	andeq	ip, r5, fp, lsl #24
    8068:	03940600 	orrseq	r0, r4, #0, 12
    806c:	000000d2 	ldrdeq	r0, [r0], -r2
    8070:	00000101 	andeq	r0, r0, r1, lsl #2
    8074:	0aab0300 	beq	feac8c7c <_estack+0xdeac3c7c>
    8078:	96060000 	strls	r0, [r6], -r0
    807c:	00023103 	andeq	r3, r2, r3, lsl #2
    8080:	025b0800 	subseq	r0, fp, #0, 16
    8084:	670f0000 	strvs	r0, [pc, -r0]
    8088:	77000002 	strvc	r0, [r0, -r2]
    808c:	10000002 	andne	r0, r0, r2
    8090:	026c0800 	rsbeq	r0, ip, #0, 16
    8094:	aa0d0000 	bge	34809c <__ccfg+0x3280f4>
    8098:	06000003 	streq	r0, [r0], -r3
    809c:	0277179c 	rsbseq	r1, r7, #156, 14	; 0x2700000
    80a0:	01010000 	mrseq	r0, (UNDEF: 1)
    80a4:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    80a8:	00029500 	andeq	r9, r2, r0, lsl #10
    80ac:	08001000 	stmdaeq	r0, {ip}
    80b0:	0000028a 	andeq	r0, r0, sl, lsl #5
    80b4:	00060e0d 	andeq	r0, r6, sp, lsl #28
    80b8:	13060700 	movwne	r0, #26368	; 0x6700
    80bc:	00000295 	muleq	r0, r5, r2
    80c0:	dd0d0101 	stfles	f0, [sp, #-4]
    80c4:	05000008 	streq	r0, [r0, #-8]
    80c8:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    80cc:	01010000 	mrseq	r0, (UNDEF: 1)
    80d0:	000c7211 	andeq	r7, ip, r1, lsl r2
    80d4:	016e0800 	cmneq	lr, r0, lsl #16
    80d8:	0002c310 	andeq	ip, r2, r0, lsl r3
    80dc:	c9040e00 	stmdbgt	r4, {r9, sl, fp}
    80e0:	12000002 	andne	r0, r0, #2
    80e4:	0002d501 	andeq	sp, r2, r1, lsl #10
    80e8:	00c11300 	sbceq	r1, r1, r0, lsl #6
    80ec:	0f000000 	svceq	0x00000000
    80f0:	000001c8 	andeq	r0, r0, r8, asr #3
    80f4:	000002e0 	andeq	r0, r0, r0, ror #5
    80f8:	d5080010 	strle	r0, [r8, #-16]
    80fc:	14000002 	strne	r0, [r0], #-2
    8100:	000009e6 	andeq	r0, r0, r6, ror #19
    8104:	16017f08 	strne	r7, [r1], -r8, lsl #30
    8108:	000002e0 	andeq	r0, r0, r0, ror #5
    810c:	96140101 	ldrls	r0, [r4], -r1, lsl #2
    8110:	08000003 	stmdaeq	r0, {r0, r1}
    8114:	ef140182 	svc	0x00140182
    8118:	01000000 	mrseq	r0, (UNDEF: 0)
    811c:	036e1401 	cmneq	lr, #16777216	; 0x1000000
    8120:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    8124:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    8128:	01010000 	mrseq	r0, (UNDEF: 1)
    812c:	03080815 	movweq	r0, #34837	; 0x8815
    8130:	03390903 	teqeq	r9, #49152	; 0xc000
    8134:	a7160000 	ldrge	r0, [r6, -r0]
    8138:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    813c:	c1070307 	tstgt	r7, r7, lsl #6
    8140:	00000000 	andeq	r0, r0, r0
    8144:	000fd316 	andeq	sp, pc, r6, lsl r3	; <UNPREDICTABLE>
    8148:	03080800 	movweq	r0, #34816	; 0x8800
    814c:	0000f408 	andeq	pc, r0, r8, lsl #8
    8150:	11000400 	tstne	r0, r0, lsl #8
    8154:	00000a09 	andeq	r0, r0, r9, lsl #20
    8158:	03030908 	movweq	r0, #14600	; 0x3908
    815c:	00000312 	andeq	r0, r0, r2, lsl r3
    8160:	00002917 	andeq	r2, r0, r7, lsl r9
    8164:	0b083000 	bleq	21416c <__ccfg+0x1f41c4>
    8168:	03a90803 			; <UNDEFINED> instruction: 0x03a90803
    816c:	2a160000 	bcs	588174 <__ccfg+0x5681cc>
    8170:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    8174:	c1080314 	tstgt	r8, r4, lsl r3
    8178:	00000000 	andeq	r0, r0, r0
    817c:	000be716 	andeq	lr, fp, r6, lsl r7
    8180:	03150800 	tsteq	r5, #0, 16
    8184:	0000c108 	andeq	ip, r0, r8, lsl #2
    8188:	94160200 	ldrls	r0, [r6], #-512	; 0xfffffe00
    818c:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    8190:	b60b0316 			; <UNDEFINED> instruction: 0xb60b0316
    8194:	04000002 	streq	r0, [r0], #-2
    8198:	00475a16 	subeq	r5, r7, r6, lsl sl
    819c:	03170800 	tsteq	r7, #0, 16
    81a0:	0000f409 	andeq	pc, r0, r9, lsl #8
    81a4:	0f160800 	svceq	0x00160800
    81a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    81ac:	a90f0318 	stmdbge	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    81b0:	0c000003 	stceq	0, cr0, [r0], {3}
    81b4:	00095d16 	andeq	r5, r9, r6, lsl sp
    81b8:	03190800 	tsteq	r9, #0, 16
    81bc:	0003b915 	andeq	fp, r3, r5, lsl r9
    81c0:	0f002c00 	svceq	0x00002c00
    81c4:	00000339 	andeq	r0, r0, r9, lsr r3
    81c8:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    81cc:	00008818 	andeq	r8, r0, r8, lsl r8
    81d0:	0e000300 	cdpeq	3, 0, cr0, cr0, cr0, {0}
    81d4:	00034604 	andeq	r4, r3, r4, lsl #12
    81d8:	0bdc1100 	bleq	ff70c5e0 <_estack+0xdf7075e0>
    81dc:	1c080000 	stcne	0, cr0, [r8], {-0}
    81e0:	03461b03 	movteq	r1, #27395	; 0x6b03
    81e4:	bc140000 	ldclt	0, cr0, [r4], {-0}
    81e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    81ec:	db14031e 	blle	508e6c <__ccfg+0x4e8ec4>
    81f0:	01000003 	tsteq	r0, r3
    81f4:	bf040e01 	svclt	0x00040e01
    81f8:	0d000003 	stceq	0, cr0, [r0, #-12]
    81fc:	00001e5f 	andeq	r1, r0, pc, asr lr
    8200:	bb0e0a01 	bllt	38aa0c <__ccfg+0x36aa64>
    8204:	01000001 	tsteq	r0, r1
    8208:	fc011901 	stc2	9, cr1, [r1], {1}	; <UNPREDICTABLE>
    820c:	0100001e 	tsteq	r0, lr, lsl r0
    8210:	8101050e 	tsthi	r1, lr, lsl #10
    8214:	80000000 	andhi	r0, r0, r0
    8218:	e0000028 	and	r0, r0, r8, lsr #32
    821c:	01000028 	tsteq	r0, r8, lsr #32
    8220:	0004499c 	muleq	r4, ip, r9
    8224:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    8228:	130e0100 	movwne	r0, #57600	; 0xe100
    822c:	000000c1 	andeq	r0, r0, r1, asr #1
    8230:	000028a2 	andeq	r2, r0, r2, lsr #17
    8234:	746d661b 	strbtvc	r6, [sp], #-1563	; 0xfffff9e5
    8238:	230e0100 	movwcs	r0, #57600	; 0xe100
    823c:	00000449 	andeq	r0, r0, r9, asr #8
    8240:	1c749102 	ldfnep	f1, [r4], #-8
    8244:	0026111d 	eoreq	r1, r6, sp, lsl r1
    8248:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    824c:	00000081 	andeq	r0, r0, r1, lsl #1
    8250:	000028c0 	andeq	r2, r0, r0, asr #17
    8254:	0070611e 	rsbseq	r6, r0, lr, lsl r1
    8258:	b50a1401 	strlt	r1, [sl, #-1025]	; 0xfffffbff
    825c:	02000000 	andeq	r0, r0, #0
    8260:	0e006491 	mcreq	4, 0, r6, cr0, cr1, {4}
    8264:	0001c804 	andeq	ip, r1, r4, lsl #16
    8268:	24740000 	ldrbtcs	r0, [r4], #-0
    826c:	00030000 	andeq	r0, r3, r0
    8270:	000021a3 	andeq	r2, r0, r3, lsr #3
    8274:	00ac0104 	adceq	r0, ip, r4, lsl #2
    8278:	e10c0000 	mrs	r0, (UNDEF: 12)
    827c:	10000022 	andne	r0, r0, r2, lsr #32
    8280:	e800000e 	stmda	r0, {r1, r2, r3}
    8284:	0000000e 	andeq	r0, r0, lr
    8288:	e7000000 	str	r0, [r0, -r0]
    828c:	02000057 	andeq	r0, r0, #87	; 0x57
    8290:	00002bb1 			; <UNDEFINED> instruction: 0x00002bb1
    8294:	31172206 	tstcc	r7, r6, lsl #4
    8298:	03000000 	movweq	r0, #0
    829c:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    82a0:	f3020000 	vhadd.u8	d0, d2, d0
    82a4:	06000031 			; <UNDEFINED> instruction: 0x06000031
    82a8:	00441825 	subeq	r1, r4, r5, lsr #16
    82ac:	02030000 	andeq	r0, r3, #0
    82b0:	000a6b05 	andeq	r6, sl, r5, lsl #22
    82b4:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    82b8:	000007fd 	strdeq	r0, [r0], -sp
    82bc:	f8050803 			; <UNDEFINED> instruction: 0xf8050803
    82c0:	02000007 	andeq	r0, r0, #7
    82c4:	00002a22 	andeq	r2, r0, r2, lsr #20
    82c8:	65182e06 	ldrvs	r2, [r8, #-3590]	; 0xfffff1fa
    82cc:	03000000 	movweq	r0, #0
    82d0:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    82d4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    82d8:	0600002e 	streq	r0, [r0], -lr, lsr #32
    82dc:	00781931 	rsbseq	r1, r8, r1, lsr r9
    82e0:	02030000 	andeq	r0, r3, #0
    82e4:	000d6c07 	andeq	r6, sp, r7, lsl #24
    82e8:	29ba0200 	ldmibcs	sl!, {r9}
    82ec:	34060000 	strcc	r0, [r6], #-0
    82f0:	00009019 	andeq	r9, r0, r9, lsl r0
    82f4:	007f0400 	rsbseq	r0, pc, r0, lsl #8
    82f8:	04030000 	streq	r0, [r3], #-0
    82fc:	00042607 	andeq	r2, r4, r7, lsl #12
    8300:	00900500 	addseq	r0, r0, r0, lsl #10
    8304:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8308:	00042107 	andeq	r2, r4, r7, lsl #2
    830c:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    8310:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8314:	2b070403 	blcs	1c9328 <__ccfg+0x1a9380>
    8318:	07000004 	streq	r0, [r0, -r4]
    831c:	00000bd5 	ldrdeq	r0, [r0], -r5
    8320:	17015e07 	strne	r5, [r1, -r7, lsl #28]
    8324:	000000aa 	andeq	r0, r0, sl, lsr #1
    8328:	000e4f02 	andeq	r4, lr, r2, lsl #30
    832c:	0e2e0800 	cdpeq	8, 2, cr0, cr14, cr0, {0}
    8330:	0000004b 	andeq	r0, r0, fp, asr #32
    8334:	0002ff02 	andeq	pc, r2, r2, lsl #30
    8338:	0e740800 	cdpeq	8, 7, cr0, cr4, cr0, {0}
    833c:	0000004b 	andeq	r0, r0, fp, asr #32
    8340:	a5080408 	strge	r0, [r8, #-1032]	; 0xfffffbf8
    8344:	0000f803 	andeq	pc, r0, r3, lsl #16
    8348:	076c0900 	strbeq	r0, [ip, -r0, lsl #18]!
    834c:	a7080000 	strge	r0, [r8, -r0]
    8350:	0000b10c 	andeq	fp, r0, ip, lsl #2
    8354:	0ab40900 	beq	fed0a75c <_estack+0xded0575c>
    8358:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    835c:	0000f813 	andeq	pc, r0, r3, lsl r8	; <UNPREDICTABLE>
    8360:	650a0000 	strvs	r0, [sl, #-0]
    8364:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8368:	0b000001 	bleq	8374 <__exidx_end+0x25f4>
    836c:	000000aa 	andeq	r0, r0, sl, lsr #1
    8370:	080c0003 	stmdaeq	ip, {r0, r1}
    8374:	2c09a208 	sfmcs	f2, 1, [r9], {8}
    8378:	0d000001 	stceq	0, cr0, [r0, #-4]
    837c:	0000038e 	andeq	r0, r0, lr, lsl #7
    8380:	a307a408 	movwge	sl, #29704	; 0x7408
    8384:	00000000 	andeq	r0, r0, r0
    8388:	0006010d 	andeq	r0, r6, sp, lsl #2
    838c:	05a90800 	streq	r0, [r9, #2048]!	; 0x800
    8390:	000000d6 	ldrdeq	r0, [r0], -r6
    8394:	b5020004 	strlt	r0, [r2, #-4]
    8398:	08000008 	stmdaeq	r0, {r3}
    839c:	010803aa 	smlatbeq	r8, sl, r3, r0
    83a0:	040e0000 	streq	r0, [lr], #-0
    83a4:	00084202 	andeq	r4, r8, r2, lsl #4
    83a8:	19160900 	ldmdbne	r6, {r8, fp}
    83ac:	00000090 	muleq	r0, r0, r0
    83b0:	00025302 	andeq	r5, r2, r2, lsl #6
    83b4:	0d0c0a00 	vstreq	s0, [ip, #-0]
    83b8:	000000a3 	andeq	r0, r0, r3, lsr #1
    83bc:	00072a02 	andeq	r2, r7, r2, lsl #20
    83c0:	1b230900 	blne	8ca7c8 <__ccfg+0x8aa820>
    83c4:	00000146 	andeq	r0, r0, r6, asr #2
    83c8:	0003320f 	andeq	r3, r3, pc, lsl #4
    83cc:	34091800 	strcc	r1, [r9], #-2048	; 0xfffff800
    83d0:	0001b808 	andeq	fp, r1, r8, lsl #16
    83d4:	0eca0d00 	cdpeq	13, 12, cr0, cr10, cr0, {0}
    83d8:	36090000 	strcc	r0, [r9], -r0
    83dc:	0001b813 	andeq	fp, r1, r3, lsl r8
    83e0:	5f100000 	svcpl	0x00100000
    83e4:	3709006b 	strcc	r0, [r9, -fp, rrx]
    83e8:	0000a307 	andeq	sl, r0, r7, lsl #6
    83ec:	620d0400 	andvs	r0, sp, #0, 8
    83f0:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    83f4:	00a30b37 	adceq	r0, r3, r7, lsr fp
    83f8:	0d080000 	stceq	0, cr0, [r8, #-0]
    83fc:	000043fb 	strdeq	r4, [r0], -fp
    8400:	a3143709 	tstge	r4, #2359296	; 0x240000
    8404:	0c000000 	stceq	0, cr0, [r0], {-0}
    8408:	0004550d 	andeq	r5, r4, sp, lsl #10
    840c:	1b370900 	blne	dca814 <__ccfg+0xdaa86c>
    8410:	000000a3 	andeq	r0, r0, r3, lsr #1
    8414:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    8418:	0b380900 	bleq	e0a820 <__ccfg+0xdea878>
    841c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    8420:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
    8424:	0000015e 	andeq	r0, r0, lr, asr r1
    8428:	00013a0a 	andeq	r3, r1, sl, lsl #20
    842c:	0001ce00 	andeq	ip, r1, r0, lsl #28
    8430:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8434:	00000000 	andeq	r0, r0, r0
    8438:	000b7d0f 	andeq	r7, fp, pc, lsl #26
    843c:	3c092400 	cfstrscc	mvf2, [r9], {-0}
    8440:	00025108 	andeq	r5, r2, r8, lsl #2
    8444:	056c0d00 	strbeq	r0, [ip, #-3328]!	; 0xfffff300
    8448:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    844c:	0000a309 	andeq	sl, r0, r9, lsl #6
    8450:	b70d0000 	strlt	r0, [sp, -r0]
    8454:	09000003 	stmdbeq	r0, {r0, r1}
    8458:	00a3093f 	adceq	r0, r3, pc, lsr r9
    845c:	0d040000 	stceq	0, cr0, [r4, #-0]
    8460:	00000358 	andeq	r0, r0, r8, asr r3
    8464:	a3094009 	movwge	r4, #36873	; 0x9009
    8468:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    846c:	0006740d 	andeq	r7, r6, sp, lsl #8
    8470:	09410900 	stmdbeq	r1, {r8, fp}^
    8474:	000000a3 	andeq	r0, r0, r3, lsr #1
    8478:	09540d0c 	ldmdbeq	r4, {r2, r3, r8, sl, fp}^
    847c:	42090000 	andmi	r0, r9, #0
    8480:	0000a309 	andeq	sl, r0, r9, lsl #6
    8484:	ce0d1000 	cdpgt	0, 0, cr1, cr13, cr0, {0}
    8488:	0900000a 	stmdbeq	r0, {r1, r3}
    848c:	00a30943 	adceq	r0, r3, r3, asr #18
    8490:	0d140000 	ldceq	0, cr0, [r4, #-0]
    8494:	00000346 	andeq	r0, r0, r6, asr #6
    8498:	a3094409 	movwge	r4, #37897	; 0x9409
    849c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    84a0:	0005750d 	andeq	r7, r5, sp, lsl #10
    84a4:	09450900 	stmdbeq	r5, {r8, fp}^
    84a8:	000000a3 	andeq	r0, r0, r3, lsr #1
    84ac:	08f00d1c 	ldmeq	r0!, {r2, r3, r4, r8, sl, fp}^
    84b0:	46090000 	strmi	r0, [r9], -r0
    84b4:	0000a309 	andeq	sl, r0, r9, lsl #6
    84b8:	12002000 	andne	r2, r0, #0
    84bc:	0000003b 	andeq	r0, r0, fp, lsr r0
    84c0:	4f090108 	svcmi	0x00090108
    84c4:	00029608 	andeq	r9, r2, r8, lsl #12
    84c8:	0d330d00 	ldceq	13, cr0, [r3, #-0]
    84cc:	50090000 	andpl	r0, r9, r0
    84d0:	0002960a 	andeq	r9, r2, sl, lsl #12
    84d4:	170d0000 	strne	r0, [sp, -r0]
    84d8:	0900000c 	stmdbeq	r0, {r2, r3}
    84dc:	02960951 	addseq	r0, r6, #1327104	; 0x144000
    84e0:	13800000 	orrne	r0, r0, #0
    84e4:	00000dcc 	andeq	r0, r0, ip, asr #27
    84e8:	3a0a5309 	bcc	29d114 <__ccfg+0x27d16c>
    84ec:	00000001 	andeq	r0, r0, r1
    84f0:	0ebd1301 	cdpeq	3, 11, cr1, cr13, cr1, {0}
    84f4:	56090000 	strpl	r0, [r9], -r0
    84f8:	00013a0a 	andeq	r3, r1, sl, lsl #20
    84fc:	00010400 	andeq	r0, r1, r0, lsl #8
    8500:	0001380a 	andeq	r3, r1, sl, lsl #16
    8504:	0002a600 	andeq	sl, r2, r0, lsl #12
    8508:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    850c:	001f0000 	andseq	r0, pc, r0
    8510:	000a1612 	andeq	r1, sl, r2, lsl r6
    8514:	09019000 	stmdbeq	r1, {ip, pc}
    8518:	02e90862 	rsceq	r0, r9, #6422528	; 0x620000
    851c:	ca0d0000 	bgt	348524 <__ccfg+0x32857c>
    8520:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8524:	02e91263 	rsceq	r1, r9, #805306374	; 0x30000006
    8528:	0d000000 	stceq	0, cr0, [r0, #-0]
    852c:	00000584 	andeq	r0, r0, r4, lsl #11
    8530:	a3066409 	movwge	r6, #25609	; 0x6409
    8534:	04000000 	streq	r0, [r0], #-0
    8538:	0003070d 	andeq	r0, r3, sp, lsl #14
    853c:	09660900 	stmdbeq	r6!, {r8, fp}^
    8540:	000002ef 	andeq	r0, r0, pc, ror #5
    8544:	003b0d08 	eorseq	r0, fp, r8, lsl #26
    8548:	67090000 	strvs	r0, [r9, -r0]
    854c:	0002511e 	andeq	r5, r2, lr, lsl r1
    8550:	11008800 	tstne	r0, r0, lsl #16
    8554:	0002a604 	andeq	sl, r2, r4, lsl #12
    8558:	02ff0a00 	rscseq	r0, pc, #0, 20
    855c:	02ff0000 	rscseq	r0, pc, #0
    8560:	aa0b0000 	bge	2c8568 <__ccfg+0x2a85c0>
    8564:	1f000000 	svcne	0x00000000
    8568:	05041100 	streq	r1, [r4, #-256]	; 0xffffff00
    856c:	14000003 	strne	r0, [r0], #-3
    8570:	0cc50f01 	stcleq	15, cr0, [r5], {1}
    8574:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    8578:	032f087a 			; <UNDEFINED> instruction: 0x032f087a
    857c:	d70d0000 	strle	r0, [sp, -r0]
    8580:	0900000c 	stmdbeq	r0, {r2, r3}
    8584:	032f117b 			; <UNDEFINED> instruction: 0x032f117b
    8588:	0d000000 	stceq	0, cr0, [r0, #-0]
    858c:	00001da6 	andeq	r1, r0, r6, lsr #27
    8590:	a3067c09 	movwge	r7, #27657	; 0x6c09
    8594:	04000000 	streq	r0, [r0], #-0
    8598:	65041100 	strvs	r1, [r4, #-256]	; 0xffffff00
    859c:	0f000000 	svceq	0x00000000
    85a0:	0000044d 	andeq	r0, r0, sp, asr #8
    85a4:	08ba0968 	ldmeq	sl!, {r3, r5, r6, r8, fp}
    85a8:	00000478 	andeq	r0, r0, r8, ror r4
    85ac:	00705f10 	rsbseq	r5, r0, r0, lsl pc
    85b0:	2f12bb09 	svccs	0x0012bb09
    85b4:	00000003 	andeq	r0, r0, r3
    85b8:	00725f10 	rsbseq	r5, r2, r0, lsl pc
    85bc:	a307bc09 	movwge	fp, #31753	; 0x7c09
    85c0:	04000000 	streq	r0, [r0], #-0
    85c4:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    85c8:	a307bd09 	movwge	fp, #32009	; 0x7d09
    85cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    85d0:	0001c40d 	andeq	ip, r1, sp, lsl #8
    85d4:	09be0900 	ldmibeq	lr!, {r8, fp}
    85d8:	00000044 	andeq	r0, r0, r4, asr #32
    85dc:	08590d0c 	ldmdaeq	r9, {r2, r3, r8, sl, fp}^
    85e0:	bf090000 	svclt	0x00090000
    85e4:	00004409 	andeq	r4, r0, r9, lsl #8
    85e8:	5f100e00 	svcpl	0x00100e00
    85ec:	09006662 	stmdbeq	r0, {r1, r5, r6, r9, sl, sp, lr}
    85f0:	030711c0 	movweq	r1, #29120	; 0x71c0
    85f4:	0d100000 	ldceq	0, cr0, [r0, #-0]
    85f8:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    85fc:	a307c109 	movwge	ip, #28937	; 0x7109
    8600:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8604:	00030c0d 	andeq	r0, r3, sp, lsl #24
    8608:	0ac80900 	beq	ff20aa10 <_estack+0xdf205a10>
    860c:	00000138 	andeq	r0, r0, r8, lsr r1
    8610:	1d350d1c 	ldcne	13, cr0, [r5, #-112]!	; 0xffffff90
    8614:	ca090000 	bgt	24861c <__ccfg+0x228674>
    8618:	0005fd1d 	andeq	pc, r5, sp, lsl sp	; <UNPREDICTABLE>
    861c:	fc0d2000 	stc2	0, cr2, [sp], {-0}
    8620:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    8624:	06281dcc 	strteq	r1, [r8], -ip, asr #27
    8628:	0d240000 	stceq	0, cr0, [r4, #-0]
    862c:	00000eea 	andeq	r0, r0, sl, ror #29
    8630:	4d0dcf09 	stcmi	15, cr12, [sp, #-36]	; 0xffffffdc
    8634:	28000006 	stmdacs	r0, {r1, r2}
    8638:	001cea0d 	andseq	lr, ip, sp, lsl #20
    863c:	09d00900 	ldmibeq	r0, {r8, fp}^
    8640:	00000668 	andeq	r0, r0, r8, ror #12
    8644:	755f102c 	ldrbvc	r1, [pc, #-44]	; 8620 <__exidx_end+0x28a0>
    8648:	d3090062 	movwle	r0, #36962	; 0x9062
    864c:	00030711 	andeq	r0, r3, r1, lsl r7
    8650:	5f103000 	svcpl	0x00103000
    8654:	09007075 	stmdbeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
    8658:	032f12d4 			; <UNDEFINED> instruction: 0x032f12d4
    865c:	10380000 	eorsne	r0, r8, r0
    8660:	0072755f 	rsbseq	r7, r2, pc, asr r5
    8664:	a307d509 	movwge	sp, #29961	; 0x7509
    8668:	3c000000 	stccc	0, cr0, [r0], {-0}
    866c:	000f210d 	andeq	r2, pc, sp, lsl #2
    8670:	11d80900 	bicsne	r0, r8, r0, lsl #18
    8674:	0000066e 	andeq	r0, r0, lr, ror #12
    8678:	0e6a0d40 	cdpeq	13, 6, cr0, cr10, cr0, {2}
    867c:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    8680:	00067e11 	andeq	r7, r6, r1, lsl lr
    8684:	5f104300 	svcpl	0x00104300
    8688:	0900626c 	stmdbeq	r0, {r2, r3, r5, r6, r9, sp, lr}
    868c:	030711dc 	movweq	r1, #29148	; 0x71dc
    8690:	0d440000 	stcleq	0, cr0, [r4, #-0]
    8694:	00000b74 	andeq	r0, r0, r4, ror fp
    8698:	a307df09 	movwge	sp, #32521	; 0x7f09
    869c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    86a0:	00047c0d 	andeq	r7, r4, sp, lsl #24
    86a4:	0ae00900 	beq	ff80aaac <_estack+0xdf805aac>
    86a8:	000000be 	strheq	r0, [r0], -lr
    86ac:	47590d50 			; <UNDEFINED> instruction: 0x47590d50
    86b0:	e3090000 	movw	r0, #36864	; 0x9000
    86b4:	00049712 	andeq	r9, r4, r2, lsl r7
    86b8:	9a0d5400 	bls	35d6c0 <__ccfg+0x33d718>
    86bc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    86c0:	01520ce7 	cmpeq	r2, r7, ror #25
    86c4:	0d580000 	ldcleq	0, cr0, [r8, #-0]
    86c8:	00000a1e 	andeq	r0, r0, lr, lsl sl
    86cc:	2c0ee909 			; <UNDEFINED> instruction: 0x2c0ee909
    86d0:	5c000001 	stcpl	0, cr0, [r0], {1}
    86d4:	000e9d0d 	andeq	r9, lr, sp, lsl #26
    86d8:	09ea0900 	stmibeq	sl!, {r8, fp}^
    86dc:	000000a3 	andeq	r0, r0, r3, lsr #1
    86e0:	01150064 	tsteq	r5, r4, rrx
    86e4:	000000a3 	andeq	r0, r0, r3, lsr #1
    86e8:	00000497 	muleq	r0, r7, r4
    86ec:	00049716 	andeq	r9, r4, r6, lsl r7
    86f0:	01381600 	teqeq	r8, r0, lsl #12
    86f4:	eb160000 	bl	5886fc <__ccfg+0x568754>
    86f8:	16000005 	strne	r0, [r0], -r5
    86fc:	000000a3 	andeq	r0, r0, r3, lsr #1
    8700:	a2041100 	andge	r1, r4, #0, 2
    8704:	04000004 	streq	r0, [r0], #-4
    8708:	00000497 	muleq	r0, r7, r4
    870c:	000d6517 	andeq	r6, sp, r7, lsl r5
    8710:	09042800 	stmdbeq	r4, {fp, sp}
    8714:	eb080265 	bl	2090b0 <__ccfg+0x1e9108>
    8718:	18000005 	stmdane	r0, {r0, r2}
    871c:	00000904 	andeq	r0, r0, r4, lsl #18
    8720:	07026709 	streq	r6, [r2, -r9, lsl #14]
    8724:	000000a3 	andeq	r0, r0, r3, lsr #1
    8728:	07e21800 	strbeq	r1, [r2, r0, lsl #16]!
    872c:	6c090000 	stcvs	0, cr0, [r9], {-0}
    8730:	06da0b02 	ldrbeq	r0, [sl], r2, lsl #22
    8734:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8738:	000002f7 	strdeq	r0, [r0], -r7
    873c:	14026c09 	strne	r6, [r2], #-3081	; 0xfffff3f7
    8740:	000006da 	ldrdeq	r0, [r0], -sl
    8744:	0f101808 	svceq	0x00101808
    8748:	6c090000 	stcvs	0, cr0, [r9], {-0}
    874c:	06da1e02 	ldrbeq	r1, [sl], r2, lsl #28
    8750:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    8754:	0000057f 	andeq	r0, r0, pc, ror r5
    8758:	08026e09 	stmdaeq	r2, {r0, r3, r9, sl, fp, sp, lr}
    875c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8760:	04d41810 	ldrbeq	r1, [r4], #2064	; 0x810
    8764:	6f090000 	svcvs	0x00090000
    8768:	08da0802 	ldmeq	sl, {r1, fp}^
    876c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    8770:	00000e7d 	andeq	r0, r0, sp, ror lr
    8774:	07027209 	streq	r7, [r2, -r9, lsl #4]
    8778:	000000a3 	andeq	r0, r0, r3, lsr #1
    877c:	42a71830 	adcmi	r1, r7, #48, 16	; 0x300000
    8780:	73090000 	movwvc	r0, #36864	; 0x9000
    8784:	08f01602 	ldmeq	r0!, {r1, r9, sl, ip}^
    8788:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    878c:	0000078a 	andeq	r0, r0, sl, lsl #15
    8790:	07027509 	streq	r7, [r2, -r9, lsl #10]
    8794:	000000a3 	andeq	r0, r0, r3, lsr #1
    8798:	08841838 	stmeq	r4, {r3, r4, r5, fp, ip}
    879c:	77090000 	strvc	r0, [r9, -r0]
    87a0:	09020a02 	stmdbeq	r2, {r1, r9, fp}
    87a4:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
    87a8:	00000350 	andeq	r0, r0, r0, asr r3
    87ac:	13027a09 	movwne	r7, #10761	; 0x2a09
    87b0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    87b4:	040b1840 	streq	r1, [fp], #-2112	; 0xfffff7c0
    87b8:	7b090000 	blvc	2487c0 <__ccfg+0x228818>
    87bc:	00a30702 	adceq	r0, r3, r2, lsl #14
    87c0:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    87c4:	00000609 	andeq	r0, r0, r9, lsl #12
    87c8:	13027c09 	movwne	r7, #11273	; 0x2c09
    87cc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    87d0:	081f1848 	ldmdaeq	pc, {r3, r6, fp, ip}	; <UNPREDICTABLE>
    87d4:	7d090000 	stcvc	0, cr0, [r9, #-0]
    87d8:	09081402 	stmdbeq	r8, {r1, sl, ip}
    87dc:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    87e0:	00000b5a 	andeq	r0, r0, sl, asr fp
    87e4:	07028009 	streq	r8, [r2, -r9]
    87e8:	000000a3 	andeq	r0, r0, r3, lsr #1
    87ec:	0c531850 	mrrceq	8, 5, r1, r3, cr0
    87f0:	81090000 	mrshi	r0, (UNDEF: 9)
    87f4:	05eb0902 	strbeq	r0, [fp, #2306]!	; 0x902
    87f8:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    87fc:	00000c6d 	andeq	r0, r0, sp, ror #24
    8800:	0702a409 	streq	sl, [r2, -r9, lsl #8]
    8804:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    8808:	0a161958 	beq	58ed70 <__ccfg+0x56edc8>
    880c:	a8090000 	stmdage	r9, {}	; <UNPREDICTABLE>
    8810:	02e91302 	rsceq	r1, r9, #134217728	; 0x8000000
    8814:	01480000 	mrseq	r0, (UNDEF: 72)
    8818:	0006ae19 	andeq	sl, r6, r9, lsl lr
    881c:	02a90900 	adceq	r0, r9, #0, 18
    8820:	0002a612 	andeq	sl, r2, r2, lsl r6
    8824:	19014c00 	stmdbne	r1, {sl, fp, lr}
    8828:	00000695 	muleq	r0, r5, r6
    882c:	0c02ad09 	stceq	13, cr10, [r2], {9}
    8830:	0000091a 	andeq	r0, r0, sl, lsl r9
    8834:	e91902dc 	ldmdb	r9, {r2, r3, r4, r6, r7, r9}
    8838:	0900000c 	stmdbeq	r0, {r2, r3}
    883c:	9b1002b2 	blls	40930c <__ccfg+0x3e9364>
    8840:	e0000006 	and	r0, r0, r6
    8844:	0aa61902 	beq	fe98ec54 <_estack+0xde989c54>
    8848:	b4090000 	strlt	r0, [r9], #-0
    884c:	09260a02 	stmdbeq	r6!, {r1, r9, fp}
    8850:	02ec0000 	rsceq	r0, ip, #0
    8854:	f1041100 			; <UNDEFINED> instruction: 0xf1041100
    8858:	03000005 	movweq	r0, #5
    885c:	0c640801 	stcleq	8, cr0, [r4], #-4
    8860:	f1040000 	cps	#0
    8864:	11000005 	tstne	r0, r5
    8868:	00047804 	andeq	r7, r4, r4, lsl #16
    886c:	a3011500 	movwge	r1, #5376	; 0x1500
    8870:	22000000 	andcs	r0, r0, #0
    8874:	16000006 	strne	r0, [r0], -r6
    8878:	00000497 	muleq	r0, r7, r4
    887c:	00013816 	andeq	r3, r1, r6, lsl r8
    8880:	06221600 	strteq	r1, [r2], -r0, lsl #12
    8884:	a3160000 	tstge	r6, #0
    8888:	00000000 	andeq	r0, r0, r0
    888c:	05f80411 	ldrbeq	r0, [r8, #1041]!	; 0x411
    8890:	04110000 	ldreq	r0, [r1], #-0
    8894:	00000603 	andeq	r0, r0, r3, lsl #12
    8898:	00ca0115 	sbceq	r0, sl, r5, lsl r1
    889c:	064d0000 	strbeq	r0, [sp], -r0
    88a0:	97160000 	ldrls	r0, [r6, -r0]
    88a4:	16000004 	strne	r0, [r0], -r4
    88a8:	00000138 	andeq	r0, r0, r8, lsr r1
    88ac:	0000ca16 	andeq	ip, r0, r6, lsl sl
    88b0:	00a31600 	adceq	r1, r3, r0, lsl #12
    88b4:	11000000 	mrsne	r0, (UNDEF: 0)
    88b8:	00062e04 	andeq	r2, r6, r4, lsl #28
    88bc:	a3011500 	movwge	r1, #5376	; 0x1500
    88c0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    88c4:	16000006 	strne	r0, [r0], -r6
    88c8:	00000497 	muleq	r0, r7, r4
    88cc:	00013816 	andeq	r3, r1, r6, lsl r8
    88d0:	04110000 	ldreq	r0, [r1], #-0
    88d4:	00000653 	andeq	r0, r0, r3, asr r6
    88d8:	0000650a 	andeq	r6, r0, sl, lsl #10
    88dc:	00067e00 	andeq	r7, r6, r0, lsl #28
    88e0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    88e4:	00020000 	andeq	r0, r2, r0
    88e8:	0000650a 	andeq	r6, r0, sl, lsl #10
    88ec:	00068e00 	andeq	r8, r6, r0, lsl #28
    88f0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    88f4:	00000000 	andeq	r0, r0, r0
    88f8:	00046e07 	andeq	r6, r4, r7, lsl #28
    88fc:	01240900 			; <UNDEFINED> instruction: 0x01240900
    8900:	0003351a 	andeq	r3, r3, sl, lsl r5
    8904:	0cdd1a00 	vldmiaeq	sp, {s3-s2}
    8908:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    890c:	d4080128 	strle	r0, [r8], #-296	; 0xfffffed8
    8910:	18000006 	stmdane	r0, {r1, r2}
    8914:	00000eca 	andeq	r0, r0, sl, asr #29
    8918:	11012a09 	tstne	r1, r9, lsl #20
    891c:	000006d4 	ldrdeq	r0, [r0], -r4
    8920:	0bce1800 	bleq	ff38e928 <_estack+0xdf389928>
    8924:	2b090000 	blcs	24892c <__ccfg+0x228984>
    8928:	00a30701 	adceq	r0, r3, r1, lsl #14
    892c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8930:	00000772 	andeq	r0, r0, r2, ror r7
    8934:	0b012c09 	bleq	53960 <__ccfg+0x339b8>
    8938:	000006da 	ldrdeq	r0, [r0], -sl
    893c:	04110008 	ldreq	r0, [r1], #-8
    8940:	0000069b 	muleq	r0, fp, r6
    8944:	068e0411 	pkhbteq	r0, lr, r1, lsl #8
    8948:	da1a0000 	ble	688950 <__ccfg+0x6689a8>
    894c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    8950:	08014409 	stmdaeq	r1, {r0, r3, sl, lr}
    8954:	00000719 	andeq	r0, r0, r9, lsl r7
    8958:	00165118 	andseq	r5, r6, r8, lsl r1
    895c:	01450900 	cmpeq	r5, r0, lsl #18
    8960:	00071912 	andeq	r1, r7, r2, lsl r9
    8964:	31180000 	tstcc	r8, r0
    8968:	09000008 	stmdbeq	r0, {r3}
    896c:	19120146 	ldmdbne	r2, {r1, r2, r6, r8}
    8970:	06000007 	streq	r0, [r0], -r7
    8974:	00150318 	andseq	r0, r5, r8, lsl r3
    8978:	01470900 	cmpeq	r7, r0, lsl #18
    897c:	00007812 	andeq	r7, r0, r2, lsl r8
    8980:	0a000c00 	beq	b988 <__exidx_end+0x5c08>
    8984:	00000078 	andeq	r0, r0, r8, ror r0
    8988:	00000729 	andeq	r0, r0, r9, lsr #14
    898c:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8990:	1b000200 	blne	9198 <__exidx_end+0x3418>
    8994:	028509d0 	addeq	r0, r5, #208, 18	; 0x340000
    8998:	00083e07 	andeq	r3, r8, r7, lsl #28
    899c:	0e701800 	cdpeq	8, 7, cr1, cr0, cr0, {0}
    89a0:	87090000 	strhi	r0, [r9, -r0]
    89a4:	00aa1802 	adceq	r1, sl, r2, lsl #16
    89a8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    89ac:	00000cf1 	strdeq	r0, [r0], -r1
    89b0:	12028809 	andne	r8, r2, #589824	; 0x90000
    89b4:	000005eb 	andeq	r0, r0, fp, ror #11
    89b8:	04381804 	ldrteq	r1, [r8], #-2052	; 0xfffff7fc
    89bc:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    89c0:	083e1002 	ldmdaeq	lr!, {r1, ip}
    89c4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    89c8:	00000b43 	andeq	r0, r0, r3, asr #22
    89cc:	17028a09 	strne	r8, [r2, -r9, lsl #20]
    89d0:	000001ce 	andeq	r0, r0, lr, asr #3
    89d4:	07e91824 	strbeq	r1, [r9, r4, lsr #16]!
    89d8:	8b090000 	blhi	2489e0 <__ccfg+0x228a38>
    89dc:	00a30f02 	adceq	r0, r3, r2, lsl #30
    89e0:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    89e4:	00000ec5 	andeq	r0, r0, r5, asr #29
    89e8:	2c028c09 	stccs	12, cr8, [r2], {9}
    89ec:	0000009c 	muleq	r0, ip, r0
    89f0:	007f1850 	rsbseq	r1, pc, r0, asr r8	; <UNPREDICTABLE>
    89f4:	8d090000 	stchi	0, cr0, [r9, #-0]
    89f8:	06e01a02 	strbteq	r1, [r0], r2, lsl #20
    89fc:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    8a00:	00000639 	andeq	r0, r0, r9, lsr r6
    8a04:	16028e09 	strne	r8, [r2], -r9, lsl #28
    8a08:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a0c:	0cfe1868 	ldcleq	8, cr1, [lr], #416	; 0x1a0
    8a10:	8f090000 	svchi	0x00090000
    8a14:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a18:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    8a1c:	00000071 	andeq	r0, r0, r1, ror r0
    8a20:	16029009 	strne	r9, [r2], -r9
    8a24:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a28:	0b6a1878 	bleq	1a8ec10 <__ccfg+0x1a6ec68>
    8a2c:	91090000 	mrsls	r0, (UNDEF: 9)
    8a30:	084e1002 	stmdaeq	lr, {r1, ip}^
    8a34:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
    8a38:	00000415 	andeq	r0, r0, r5, lsl r4
    8a3c:	10029209 	andne	r9, r2, r9, lsl #4
    8a40:	0000085e 	andeq	r0, r0, lr, asr r8
    8a44:	0c8d1888 	stceq	8, cr1, [sp], {136}	; 0x88
    8a48:	93090000 	movwls	r0, #36864	; 0x9000
    8a4c:	00a30f02 	adceq	r0, r3, r2, lsl #30
    8a50:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    8a54:	000002ac 	andeq	r0, r0, ip, lsr #5
    8a58:	16029409 	strne	r9, [r2], -r9, lsl #8
    8a5c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a60:	069f18a4 	ldreq	r1, [pc], r4, lsr #17
    8a64:	95090000 	strls	r0, [r9, #-0]
    8a68:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a6c:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
    8a70:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    8a74:	16029609 	strne	r9, [r2], -r9, lsl #12
    8a78:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a7c:	084a18b4 	stmdaeq	sl, {r2, r4, r5, r7, fp, ip}^
    8a80:	97090000 	strls	r0, [r9, -r0]
    8a84:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a88:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    8a8c:	00000628 	andeq	r0, r0, r8, lsr #12
    8a90:	16029809 	strne	r9, [r2], -r9, lsl #16
    8a94:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a98:	090218c4 	stmdbeq	r2, {r2, r6, r7, fp, ip}
    8a9c:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    8aa0:	00a30802 	adceq	r0, r3, r2, lsl #16
    8aa4:	00cc0000 	sbceq	r0, ip, r0
    8aa8:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8aac:	00084e00 	andeq	r4, r8, r0, lsl #28
    8ab0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8ab4:	00190000 	andseq	r0, r9, r0
    8ab8:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8abc:	00085e00 	andeq	r5, r8, r0, lsl #28
    8ac0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8ac4:	00070000 	andeq	r0, r7, r0
    8ac8:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8acc:	00086e00 	andeq	r6, r8, r0, lsl #28
    8ad0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8ad4:	00170000 	andseq	r0, r7, r0
    8ad8:	9e09f01b 	mcrls	0, 0, pc, cr9, cr11, {0}	; <UNPREDICTABLE>
    8adc:	08950702 	ldmeq	r5, {r1, r8, r9, sl}
    8ae0:	c0180000 	andsgt	r0, r8, r0
    8ae4:	09000003 	stmdbeq	r0, {r0, r1}
    8ae8:	951b02a1 	ldrls	r0, [fp, #-673]	; 0xfffffd5f
    8aec:	00000008 	andeq	r0, r0, r8
    8af0:	000f1818 	andeq	r1, pc, r8, lsl r8	; <UNPREDICTABLE>
    8af4:	02a20900 	adceq	r0, r2, #0, 18
    8af8:	0008a518 	andeq	sl, r8, r8, lsl r5
    8afc:	0a007800 	beq	26b04 <__ccfg+0x6b5c>
    8b00:	0000032f 	andeq	r0, r0, pc, lsr #6
    8b04:	000008a5 	andeq	r0, r0, r5, lsr #17
    8b08:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8b0c:	0a001d00 	beq	ff14 <__exidx_end+0xa194>
    8b10:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b14:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    8b18:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8b1c:	1c001d00 	stcne	13, cr1, [r0], {-0}
    8b20:	028309f0 	addeq	r0, r3, #240, 18	; 0x3c0000
    8b24:	0008da03 	andeq	sp, r8, r3, lsl #20
    8b28:	0d651d00 	stcleq	13, cr1, [r5, #-0]
    8b2c:	9a090000 	bls	248b34 <__ccfg+0x228b8c>
    8b30:	07290b02 	streq	r0, [r9, -r2, lsl #22]!
    8b34:	521d0000 	andspl	r0, sp, #0
    8b38:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8b3c:	6e0b02a3 	cdpvs	2, 0, cr0, cr11, cr3, {5}
    8b40:	00000008 	andeq	r0, r0, r8
    8b44:	0005f10a 	andeq	pc, r5, sl, lsl #2
    8b48:	0008ea00 	andeq	lr, r8, r0, lsl #20
    8b4c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8b50:	00180000 	andseq	r0, r8, r0
    8b54:	000ed01e 	andeq	sp, lr, lr, lsl r0
    8b58:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
    8b5c:	000008ea 	andeq	r0, r0, sl, ror #17
    8b60:	0902011f 	stmdbeq	r2, {r0, r1, r2, r3, r4, r8}
    8b64:	97160000 	ldrls	r0, [r6, -r0]
    8b68:	00000004 	andeq	r0, r0, r4
    8b6c:	08f60411 	ldmeq	r6!, {r0, r4, sl}^
    8b70:	04110000 	ldreq	r0, [r1], #-0
    8b74:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    8b78:	091a011f 	ldmdbeq	sl, {r0, r1, r2, r3, r4, r8}
    8b7c:	a3160000 	tstge	r6, #0
    8b80:	00000000 	andeq	r0, r0, r0
    8b84:	09200411 	stmdbeq	r0!, {r0, r4, sl}
    8b88:	04110000 	ldreq	r0, [r1], #-0
    8b8c:	0000090e 	andeq	r0, r0, lr, lsl #18
    8b90:	00068e0a 	andeq	r8, r6, sl, lsl #28
    8b94:	00093600 	andeq	r3, r9, r0, lsl #12
    8b98:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8b9c:	00020000 	andeq	r0, r2, r0
    8ba0:	000ac220 	andeq	ip, sl, r0, lsr #4
    8ba4:	03330900 	teqeq	r3, #0, 18
    8ba8:	00049717 	andeq	r9, r4, r7, lsl r7
    8bac:	20010100 	andcs	r0, r1, r0, lsl #2
    8bb0:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    8bb4:	1d033409 	cfstrsne	mvf3, [r3, #-36]	; 0xffffffdc
    8bb8:	0000049d 	muleq	r0, sp, r4
    8bbc:	e7020101 	str	r0, [r2, -r1, lsl #2]
    8bc0:	0b000024 	bleq	8c58 <__exidx_end+0x2ed8>
    8bc4:	007f123b 	rsbseq	r1, pc, fp, lsr r2	; <UNPREDICTABLE>
    8bc8:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    8bcc:	8409400b 	strhi	r4, [r9], #-11
    8bd0:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    8bd4:	00001fea 	andeq	r1, r0, sl, ror #31
    8bd8:	840d410b 	strhi	r4, [sp], #-267	; 0xfffffef5
    8bdc:	00000009 	andeq	r0, r0, r9
    8be0:	00222d0d 	eoreq	r2, r2, sp, lsl #26
    8be4:	0d420b00 	vstreq	d16, [r2, #-0]
    8be8:	00000984 	andeq	r0, r0, r4, lsl #19
    8bec:	04110004 	ldreq	r0, [r1], #-4
    8bf0:	00000059 	andeq	r0, r0, r9, asr r0
    8bf4:	00273202 	eoreq	r3, r7, r2, lsl #4
    8bf8:	03430b00 	movteq	r0, #15104	; 0x3b00
    8bfc:	00000960 	andeq	r0, r0, r0, ror #18
    8c00:	0022ae02 	eoreq	sl, r2, r2, lsl #28
    8c04:	2b3c0c00 	blcs	f0bc0c <__ccfg+0xeebc64>
    8c08:	000009a2 	andeq	r0, r0, r2, lsr #19
    8c0c:	00254d0f 	eoreq	r4, r5, pc, lsl #26
    8c10:	6f0c1000 	svcvs	0x000c1000
    8c14:	0009fe15 	andeq	pc, r9, r5, lsl lr	; <UNPREDICTABLE>
    8c18:	1f190d00 	svcne	0x00190d00
    8c1c:	700c0000 	andvc	r0, ip, r0
    8c20:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8c24:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    8c28:	0c000007 	stceq	0, cr0, [r0], {7}
    8c2c:	006c0d71 	rsbeq	r0, ip, r1, ror sp
    8c30:	0d020000 	stceq	0, cr0, [r2, #-0]
    8c34:	0000228c 	andeq	r2, r0, ip, lsl #5
    8c38:	c013740c 	andsgt	r7, r3, ip, lsl #8
    8c3c:	0400000b 	streq	r0, [r0], #-11
    8c40:	00201b0d 	eoreq	r1, r0, sp, lsl #22
    8c44:	0c750c00 	ldcleq	12, cr0, [r5], #-0
    8c48:	00000954 	andeq	r0, r0, r4, asr r9
    8c4c:	22bc0d08 	adcscs	r0, ip, #8, 26	; 0x200
    8c50:	7d0c0000 	stcvc	0, cr0, [ip, #-0]
    8c54:	000b4c06 	andeq	r4, fp, r6, lsl #24
    8c58:	060d0c00 	streq	r0, [sp], -r0, lsl #24
    8c5c:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8c60:	0b960681 	bleq	fe58a66c <_estack+0xde58566c>
    8c64:	000d0000 	andeq	r0, sp, r0
    8c68:	00208f02 	eoreq	r8, r0, r2, lsl #30
    8c6c:	2a3f0c00 	bcs	fcbc74 <__ccfg+0xfabccc>
    8c70:	00000a0a 	andeq	r0, r0, sl, lsl #20
    8c74:	0020820f 	eoreq	r8, r0, pc, lsl #4
    8c78:	e00c1800 	and	r1, ip, r0, lsl #16
    8c7c:	000ac115 	andeq	ip, sl, r5, lsl r1
    8c80:	1f190d00 	svcne	0x00190d00
    8c84:	e10c0000 	mrs	r0, (UNDEF: 12)
    8c88:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8c8c:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    8c90:	0c000007 	stceq	0, cr0, [r0], {7}
    8c94:	006c0de2 	rsbeq	r0, ip, r2, ror #27
    8c98:	0d020000 	stceq	0, cr0, [r2, #-0]
    8c9c:	0000228c 	andeq	r2, r0, ip, lsl #5
    8ca0:	c013e50c 	andsgt	lr, r3, ip, lsl #10
    8ca4:	0400000b 	streq	r0, [r0], #-11
    8ca8:	00201b0d 	eoreq	r1, r0, sp, lsl #22
    8cac:	0ce60c00 	stcleq	12, cr0, [r6]
    8cb0:	00000954 	andeq	r0, r0, r4, asr r9
    8cb4:	22bc0d08 	adcscs	r0, ip, #8, 26	; 0x200
    8cb8:	ee0c0000 	cdp	0, 0, cr0, cr12, cr0, {0}
    8cbc:	000bcc06 	andeq	ip, fp, r6, lsl #24
    8cc0:	060d0c00 	streq	r0, [sp], -r0, lsl #24
    8cc4:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8cc8:	0c1606f2 	ldceq	6, cr0, [r6], {242}	; 0xf2
    8ccc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    8cd0:	00002658 	andeq	r2, r0, r8, asr r6
    8cd4:	6c0df30c 	stcvs	3, cr15, [sp], {12}
    8cd8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8cdc:	0023b00d 	eoreq	fp, r3, sp
    8ce0:	0df40c00 	ldcleq	12, cr0, [r4]
    8ce4:	0000006c 	andeq	r0, r0, ip, rrx
    8ce8:	20c20d10 	sbccs	r0, r2, r0, lsl sp
    8cec:	fa0c0000 	blx	308cf4 <__ccfg+0x2e8d4c>
    8cf0:	000c4006 	andeq	r4, ip, r6
    8cf4:	6c0d1200 	sfmvs	f1, 4, [sp], {-0}
    8cf8:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8cfc:	00590cfb 	ldrsheq	r0, [r9], #-203	; 0xffffff35
    8d00:	0d130000 	ldceq	0, cr0, [r3, #-0]
    8d04:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
    8d08:	590cfc0c 	stmdbpl	ip, {r2, r3, sl, fp, ip, sp, lr, pc}
    8d0c:	14000000 	strne	r0, [r0], #-0
    8d10:	0025c50d 	eoreq	ip, r5, sp, lsl #10
    8d14:	0cfd0c00 	ldcleq	12, cr0, [sp]
    8d18:	00000059 	andeq	r0, r0, r9, asr r0
    8d1c:	25ce0d15 	strbcs	r0, [lr, #3349]	; 0xd15
    8d20:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
    8d24:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d28:	02001600 	andeq	r1, r0, #0, 12
    8d2c:	000026d3 	ldrdeq	r2, [r0], -r3
    8d30:	cd36440c 	cfldrsgt	mvf4, [r6, #-48]!	; 0xffffffd0
    8d34:	1a00000a 	bne	8d64 <__exidx_end+0x2fe4>
    8d38:	000026ba 			; <UNDEFINED> instruction: 0x000026ba
    8d3c:	019f0c14 	orrseq	r0, pc, r4, lsl ip	; <UNPREDICTABLE>
    8d40:	000b4c15 	andeq	r4, fp, r5, lsl ip
    8d44:	1f191800 	svcne	0x00191800
    8d48:	a00c0000 	andge	r0, ip, r0
    8d4c:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8d50:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8d54:	00000778 	andeq	r0, r0, r8, ror r7
    8d58:	0d01a10c 	stfeqd	f2, [r1, #-48]	; 0xffffffd0
    8d5c:	0000006c 	andeq	r0, r0, ip, rrx
    8d60:	228c1802 	addcs	r1, ip, #131072	; 0x20000
    8d64:	a40c0000 	strge	r0, [ip], #-0
    8d68:	0bc01301 	bleq	ff00d974 <_estack+0xdf008974>
    8d6c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8d70:	0000201b 	andeq	r2, r0, fp, lsl r0
    8d74:	0c01a50c 	cfstr32eq	mvfx10, [r1], {12}
    8d78:	00000954 	andeq	r0, r0, r4, asr r9
    8d7c:	22bc1808 	adcscs	r1, ip, #8, 16	; 0x80000
    8d80:	ad0c0000 	stcge	0, cr0, [ip, #-0]
    8d84:	0c6a0601 	stcleq	6, cr0, [sl], #-4
    8d88:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    8d8c:	00002206 	andeq	r2, r0, r6, lsl #4
    8d90:	0601b10c 	streq	fp, [r1], -ip, lsl #2
    8d94:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    8d98:	226c180d 	rsbcs	r1, ip, #851968	; 0xd0000
    8d9c:	b20c0000 	andlt	r0, ip, #0
    8da0:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8da4:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    8da8:	0000215a 	andeq	r2, r0, sl, asr r1
    8dac:	0c01b30c 	stceq	3, cr11, [r1], {12}
    8db0:	00000954 	andeq	r0, r0, r4, asr r9
    8db4:	010c0010 	tsteq	ip, r0, lsl r0
    8db8:	9604760c 	strls	r7, [r4], -ip, lsl #12
    8dbc:	2100000b 	tstcs	r0, fp
    8dc0:	0000276f 	andeq	r2, r0, pc, ror #14
    8dc4:	590f770c 	stmdbpl	pc, {r2, r3, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
    8dc8:	01000000 	mrseq	r0, (UNDEF: 0)
    8dcc:	21000404 	tstcs	r0, r4, lsl #8
    8dd0:	0000210d 	andeq	r2, r0, sp, lsl #2
    8dd4:	590f780c 	stmdbpl	pc, {r2, r3, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8dd8:	01000000 	mrseq	r0, (UNDEF: 0)
    8ddc:	21000301 	tstcs	r0, r1, lsl #6
    8de0:	000021cd 	andeq	r2, r0, sp, asr #3
    8de4:	590f7a0c 	stmdbpl	pc, {r2, r3, r9, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8de8:	01000000 	mrseq	r0, (UNDEF: 0)
    8dec:	21000102 	tstcs	r0, r2, lsl #2
    8df0:	00001f88 	andeq	r1, r0, r8, lsl #31
    8df4:	590f7b0c 	stmdbpl	pc, {r2, r3, r8, r9, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8df8:	01000000 	mrseq	r0, (UNDEF: 0)
    8dfc:	00000001 	andeq	r0, r0, r1
    8e00:	7e0c010c 	adfvce	f0, f4, #4.0
    8e04:	000bc004 	andeq	ip, fp, r4
    8e08:	25ea2100 	strbcs	r2, [sl, #256]!	; 0x100
    8e0c:	7f0c0000 	svcvc	0x000c0000
    8e10:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e14:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8e18:	273e2100 	ldrcs	r2, [lr, -r0, lsl #2]!
    8e1c:	800c0000 	andhi	r0, ip, r0
    8e20:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e24:	00040100 	andeq	r0, r4, r0, lsl #2
    8e28:	04110000 	ldreq	r0, [r1], #-0
    8e2c:	00000996 	muleq	r0, r6, r9
    8e30:	007f0411 	rsbseq	r0, pc, r1, lsl r4	; <UNPREDICTABLE>
    8e34:	010c0000 	mrseq	r0, (UNDEF: 12)
    8e38:	1604e70c 	strne	lr, [r4], -ip, lsl #14
    8e3c:	2100000c 	tstcs	r0, ip
    8e40:	0000276f 	andeq	r2, r0, pc, ror #14
    8e44:	590fe80c 	stmdbpl	pc, {r2, r3, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8e48:	01000000 	mrseq	r0, (UNDEF: 0)
    8e4c:	21000404 	tstcs	r0, r4, lsl #8
    8e50:	0000210d 	andeq	r2, r0, sp, lsl #2
    8e54:	590fe90c 	stmdbpl	pc, {r2, r3, r8, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8e58:	01000000 	mrseq	r0, (UNDEF: 0)
    8e5c:	21000301 	tstcs	r0, r1, lsl #6
    8e60:	000021cd 	andeq	r2, r0, sp, asr #3
    8e64:	590feb0c 	stmdbpl	pc, {r2, r3, r8, r9, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8e68:	01000000 	mrseq	r0, (UNDEF: 0)
    8e6c:	21000102 	tstcs	r0, r2, lsl #2
    8e70:	00001f88 	andeq	r1, r0, r8, lsl #31
    8e74:	590fec0c 	stmdbpl	pc, {r2, r3, sl, fp, sp, lr, pc}	; <UNPREDICTABLE>
    8e78:	01000000 	mrseq	r0, (UNDEF: 0)
    8e7c:	00000001 	andeq	r0, r0, r1
    8e80:	ef0c010c 	svc	0x000c010c
    8e84:	000c4004 	andeq	r4, ip, r4
    8e88:	25ea2100 	strbcs	r2, [sl, #256]!	; 0x100
    8e8c:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    8e90:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e94:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8e98:	273e2100 	ldrcs	r2, [lr, -r0, lsl #2]!
    8e9c:	f10c0000 	cpsid	
    8ea0:	0000590f 	andeq	r5, r0, pc, lsl #18
    8ea4:	00040100 	andeq	r0, r4, r0, lsl #2
    8ea8:	010c0000 	mrseq	r0, (UNDEF: 12)
    8eac:	6a04f50c 	bvs	1462e4 <__ccfg+0x12633c>
    8eb0:	2100000c 	tstcs	r0, ip
    8eb4:	000020f7 	strdeq	r2, [r0], -r7
    8eb8:	590ff60c 	stmdbpl	pc, {r2, r3, r9, sl, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8ebc:	01000000 	mrseq	r0, (UNDEF: 0)
    8ec0:	21000701 	tstcs	r0, r1, lsl #14
    8ec4:	00002758 	andeq	r2, r0, r8, asr r7
    8ec8:	590ff80c 	stmdbpl	pc, {r2, r3, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8ecc:	01000000 	mrseq	r0, (UNDEF: 0)
    8ed0:	00000106 	andeq	r0, r0, r6, lsl #2
    8ed4:	a60c011b 			; <UNDEFINED> instruction: 0xa60c011b
    8ed8:	0cb90401 	cfldrseq	mvf0, [r9], #4
    8edc:	6f220000 	svcvs	0x00220000
    8ee0:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8ee4:	590f01a7 	stmdbpl	pc, {r0, r1, r2, r5, r7, r8}	; <UNPREDICTABLE>
    8ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    8eec:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8ef0:	0000210d 	andeq	r2, r0, sp, lsl #2
    8ef4:	0f01a80c 	svceq	0x0001a80c
    8ef8:	00000059 	andeq	r0, r0, r9, asr r0
    8efc:	00030101 	andeq	r0, r3, r1, lsl #2
    8f00:	0021cd22 	eoreq	ip, r1, r2, lsr #26
    8f04:	01aa0c00 			; <UNDEFINED> instruction: 0x01aa0c00
    8f08:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f0c:	01020100 	mrseq	r0, (UNDEF: 18)
    8f10:	1f882200 	svcne	0x00882200
    8f14:	ab0c0000 	blge	308f1c <__ccfg+0x2e8f74>
    8f18:	00590f01 	subseq	r0, r9, r1, lsl #30
    8f1c:	01010000 	mrseq	r0, (UNDEF: 1)
    8f20:	1b000000 	blne	8f28 <__exidx_end+0x31a8>
    8f24:	01ae0c01 			; <UNDEFINED> instruction: 0x01ae0c01
    8f28:	000ce604 	andeq	lr, ip, r4, lsl #12
    8f2c:	25ea2200 	strbcs	r2, [sl, #512]!	; 0x200
    8f30:	af0c0000 	svcge	0x000c0000
    8f34:	00590f01 	subseq	r0, r9, r1, lsl #30
    8f38:	04010000 	streq	r0, [r1], #-0
    8f3c:	3e220004 	cdpcc	0, 2, cr0, cr2, cr4, {0}
    8f40:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8f44:	590f01b0 	stmdbpl	pc, {r4, r5, r7, r8}	; <UNPREDICTABLE>
    8f48:	01000000 	mrseq	r0, (UNDEF: 0)
    8f4c:	00000004 	andeq	r0, r0, r4
    8f50:	098a0411 	stmibeq	sl, {r0, r4, sl}
    8f54:	2d020000 	stccs	0, cr0, [r2, #-0]
    8f58:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    8f5c:	0cf82f3d 	ldcleq	15, cr2, [r8], #244	; 0xf4
    8f60:	3f0f0000 	svccc	0x000f0000
    8f64:	18000026 	stmdane	r0, {r1, r2, r5}
    8f68:	8815780d 	ldmdahi	r5, {r0, r2, r3, fp, ip, sp, lr}
    8f6c:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    8f70:	00001f19 	andeq	r1, r0, r9, lsl pc
    8f74:	6c0d790d 			; <UNDEFINED> instruction: 0x6c0d790d
    8f78:	00000000 	andeq	r0, r0, r0
    8f7c:	0007780d 	andeq	r7, r7, sp, lsl #16
    8f80:	0d7a0d00 	ldcleq	13, cr0, [sl, #-0]
    8f84:	0000006c 	andeq	r0, r0, ip, rrx
    8f88:	228c0d02 	addcs	r0, ip, #2, 26	; 0x80
    8f8c:	7d0d0000 	stcvc	0, cr0, [sp, #-0]
    8f90:	000bc013 	andeq	ip, fp, r3, lsl r0
    8f94:	1b0d0400 	blne	349f9c <__ccfg+0x329ff4>
    8f98:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8f9c:	09540c7e 	ldmdbeq	r4, {r1, r2, r3, r4, r5, r6, sl, fp}^
    8fa0:	0d080000 	stceq	0, cr0, [r8, #-0]
    8fa4:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
    8fa8:	f306860d 	vmax.u8	d8, d6, d13
    8fac:	0c000010 	stceq	0, cr0, [r0], {16}
    8fb0:	0022060d 	eoreq	r0, r2, sp, lsl #12
    8fb4:	068a0d00 	streq	r0, [sl], r0, lsl #26
    8fb8:	0000113d 	andeq	r1, r0, sp, lsr r1
    8fbc:	20600d0d 	rsbcs	r0, r0, sp, lsl #26
    8fc0:	930d0000 	movwls	r0, #53248	; 0xd000
    8fc4:	00116706 	andseq	r6, r1, r6, lsl #14
    8fc8:	e30d0e00 	movw	r0, #56832	; 0xde00
    8fcc:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    8fd0:	00590c94 			; <UNDEFINED> instruction: 0x00590c94
    8fd4:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 8fdc <__exidx_end+0x325c>
    8fd8:	00002342 	andeq	r2, r0, r2, asr #6
    8fdc:	7f0d950d 	svcvc	0x000d950d
    8fe0:	10000000 	andne	r0, r0, r0
    8fe4:	001f460d 	andseq	r4, pc, sp, lsl #12
    8fe8:	0d960d00 	ldceq	13, cr0, [r6]
    8fec:	00000984 	andeq	r0, r0, r4, lsl #19
    8ff0:	99020014 	stmdbls	r2, {r2, r4}
    8ff4:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    8ff8:	0d942f3e 	ldceq	15, cr2, [r4, #248]	; 0xf8
    8ffc:	910f0000 	mrsls	r0, CPSR
    9000:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    9004:	72159f0d 	andsvc	r9, r5, #13, 30	; 0x34
    9008:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    900c:	00001f19 	andeq	r1, r0, r9, lsl pc
    9010:	6c0da00d 	stcvs	0, cr10, [sp], {13}
    9014:	00000000 	andeq	r0, r0, r0
    9018:	0007780d 	andeq	r7, r7, sp, lsl #16
    901c:	0da10d00 	stceq	13, cr0, [r1]
    9020:	0000006c 	andeq	r0, r0, ip, rrx
    9024:	228c0d02 	addcs	r0, ip, #2, 26	; 0x80
    9028:	a40d0000 	strge	r0, [sp], #-0
    902c:	000bc013 	andeq	ip, fp, r3, lsl r0
    9030:	1b0d0400 	blne	34a038 <__ccfg+0x32a090>
    9034:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9038:	09540ca5 	ldmdbeq	r4, {r0, r2, r5, r7, sl, fp}^
    903c:	0d080000 	stceq	0, cr0, [r8, #-0]
    9040:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
    9044:	a106ad0d 	tstge	r6, sp, lsl #26
    9048:	0c000011 	stceq	0, cr0, [r0], {17}
    904c:	0022060d 	eoreq	r0, r2, sp, lsl #12
    9050:	06b10d00 	ldrteq	r0, [r1], r0, lsl #26
    9054:	000011eb 	andeq	r1, r0, fp, ror #3
    9058:	20600d0d 	rsbcs	r0, r0, sp, lsl #26
    905c:	c30d0000 	movwgt	r0, #53248	; 0xd000
    9060:	00121506 	andseq	r1, r2, r6, lsl #10
    9064:	f70d0e00 			; <UNDEFINED> instruction: 0xf70d0e00
    9068:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    906c:	129f06cd 	addsne	r0, pc, #214958080	; 0xcd00000
    9070:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 9078 <__exidx_end+0x32f8>
    9074:	00002342 	andeq	r2, r0, r2, asr #6
    9078:	7f0dce0d 	svcvc	0x000dce0d
    907c:	10000000 	andne	r0, r0, r0
    9080:	0021450d 	eoreq	r4, r1, sp, lsl #10
    9084:	0ccf0d00 	stcleq	13, cr0, [pc], {0}
    9088:	00000059 	andeq	r0, r0, r9, asr r0
    908c:	24490d14 	strbcs	r0, [r9], #-3348	; 0xfffff2ec
    9090:	d10d0000 	mrsle	r0, (UNDEF: 13)
    9094:	0000590c 	andeq	r5, r0, ip, lsl #18
    9098:	520d1500 	andpl	r1, sp, #0, 10
    909c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    90a0:	00590cd2 	ldrsbeq	r0, [r9], #-194	; 0xffffff3e
    90a4:	0d160000 	ldceq	0, cr0, [r6, #-0]
    90a8:	000021a3 	andeq	r2, r0, r3, lsr #3
    90ac:	1906db0d 	stmdbne	r6, {r0, r2, r3, r8, r9, fp, ip, lr, pc}
    90b0:	17000013 	smladne	r0, r3, r0, r0
    90b4:	0026920d 	eoreq	r9, r6, sp, lsl #4
    90b8:	0cdc0d00 	ldcleq	13, cr0, [ip], {0}
    90bc:	00000954 	andeq	r0, r0, r4, asr r9
    90c0:	21d70d18 	bicscs	r0, r7, r8, lsl sp
    90c4:	dd0d0000 	stcle	0, cr0, [sp, #-0]
    90c8:	000ce611 	andeq	lr, ip, r1, lsl r6
    90cc:	ab0d1c00 	blge	3500d4 <__ccfg+0x33012c>
    90d0:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    90d4:	09840dde 	stmibeq	r4, {r1, r2, r3, r4, r6, r7, r8, sl, fp}
    90d8:	00200000 	eoreq	r0, r0, r0
    90dc:	0021ae02 	eoreq	sl, r1, r2, lsl #28
    90e0:	2f410d00 	svccs	0x00410d00
    90e4:	00000e7e 	andeq	r0, r0, lr, ror lr
    90e8:	001f761a 	andseq	r7, pc, sl, lsl r6	; <UNPREDICTABLE>
    90ec:	7d0d1c00 	stcvc	12, cr1, [sp, #-0]
    90f0:	0f6d1501 	svceq	0x006d1501
    90f4:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
    90f8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    90fc:	6c0d017e 	stfvss	f0, [sp], {126}	; 0x7e
    9100:	00000000 	andeq	r0, r0, r0
    9104:	00077818 	andeq	r7, r7, r8, lsl r8
    9108:	017f0d00 	cmneq	pc, r0, lsl #26
    910c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9110:	8c180200 	lfmhi	f0, 4, [r8], {-0}
    9114:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9118:	c0130182 	andsgt	r0, r3, r2, lsl #3
    911c:	0400000b 	streq	r0, [r0], #-11
    9120:	00201b18 	eoreq	r1, r0, r8, lsl fp
    9124:	01830d00 	orreq	r0, r3, r0, lsl #26
    9128:	0009540c 	andeq	r5, r9, ip, lsl #8
    912c:	bc180800 	ldclt	8, cr0, [r8], {-0}
    9130:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9134:	6306018b 	movwvs	r0, #24971	; 0x618b
    9138:	0c000013 	stceq	0, cr0, [r0], {19}
    913c:	00220618 	eoreq	r0, r2, r8, lsl r6
    9140:	018f0d00 	orreq	r0, pc, r0, lsl #26
    9144:	0013b206 	andseq	fp, r3, r6, lsl #4
    9148:	6c180d00 	ldcvs	13, cr0, [r8], {-0}
    914c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9150:	df060195 	svcle	0x00060195
    9154:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    9158:	00226c18 	eoreq	r6, r2, r8, lsl ip
    915c:	01960d00 	orrseq	r0, r6, r0, lsl #26
    9160:	0000590c 	andeq	r5, r0, ip, lsl #18
    9164:	2b180f00 	blcs	60cd6c <__ccfg+0x5ecdc4>
    9168:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    916c:	0c0601a3 	stfeqs	f0, [r6], {163}	; 0xa3
    9170:	10000014 	andne	r0, r0, r4, lsl r0
    9174:	0021ed18 	eoreq	lr, r1, r8, lsl sp
    9178:	01a40d00 			; <UNDEFINED> instruction: 0x01a40d00
    917c:	0000250b 	andeq	r2, r0, fp, lsl #10
    9180:	be181100 	muflte	f1, f0, f0
    9184:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9188:	590c01a5 	stmdbpl	ip, {r0, r2, r5, r7, r8}
    918c:	12000000 	andne	r0, r0, #0
    9190:	0026f318 	eoreq	pc, r6, r8, lsl r3	; <UNPREDICTABLE>
    9194:	01a70d00 			; <UNDEFINED> instruction: 0x01a70d00
    9198:	0000590c 	andeq	r5, r0, ip, lsl #18
    919c:	75181300 	ldrvc	r1, [r8, #-768]	; 0xfffffd00
    91a0:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    91a4:	6c0d01a9 	stfvss	f0, [sp], {169}	; 0xa9
    91a8:	14000000 	strne	r0, [r0], #-0
    91ac:	00214f18 	eoreq	r4, r1, r8, lsl pc
    91b0:	01af0d00 			; <UNDEFINED> instruction: 0x01af0d00
    91b4:	00147d06 	andseq	r7, r4, r6, lsl #26
    91b8:	52181600 	andspl	r1, r8, #0, 12
    91bc:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    91c0:	aa0601b7 	bge	1898a4 <__ccfg+0x1698fc>
    91c4:	17000014 	smladne	r0, r4, r0, r0
    91c8:	00236118 	eoreq	r6, r3, r8, lsl r1
    91cc:	01b80d00 			; <UNDEFINED> instruction: 0x01b80d00
    91d0:	0009540c 	andeq	r5, r9, ip, lsl #8
    91d4:	02001800 	andeq	r1, r0, #0, 16
    91d8:	0000247a 	andeq	r2, r0, sl, ror r4
    91dc:	793c430d 	ldmdbvc	ip!, {r0, r2, r3, r8, r9, lr}
    91e0:	1a00000f 	bne	9224 <__exidx_end+0x34a4>
    91e4:	0000245b 	andeq	r2, r0, fp, asr r4
    91e8:	021a0d28 	andseq	r0, sl, #40, 26	; 0xa00
    91ec:	00107615 	andseq	r7, r0, r5, lsl r6
    91f0:	1f191800 	svcne	0x00191800
    91f4:	1b0d0000 	blne	3491fc <__ccfg+0x329254>
    91f8:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    91fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9200:	00000778 	andeq	r0, r0, r8, ror r7
    9204:	0d021d0d 	stceq	13, cr1, [r2, #-52]	; 0xffffffcc
    9208:	0000006c 	andeq	r0, r0, ip, rrx
    920c:	228c1802 	addcs	r1, ip, #131072	; 0x20000
    9210:	200d0000 	andcs	r0, sp, r0
    9214:	0bc01302 	bleq	ff00de24 <_estack+0xdf008e24>
    9218:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    921c:	0000201b 	andeq	r2, r0, fp, lsl r0
    9220:	0c02210d 	stfeqs	f2, [r2], {13}
    9224:	00000954 	andeq	r0, r0, r4, asr r9
    9228:	22bc1808 	adcscs	r1, ip, #8, 16	; 0x80000
    922c:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
    9230:	14f90602 	ldrbtne	r0, [r9], #1538	; 0x602
    9234:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    9238:	00002206 	andeq	r2, r0, r6, lsl #4
    923c:	06022d0d 	streq	r2, [r2], -sp, lsl #26
    9240:	00001548 	andeq	r1, r0, r8, asr #10
    9244:	1f0e180d 	svcne	0x000e180d
    9248:	330d0000 	movwcc	r0, #53248	; 0xd000
    924c:	15750602 	ldrbne	r0, [r5, #-1538]!	; 0xfffff9fe
    9250:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    9254:	00002275 	andeq	r2, r0, r5, ror r2
    9258:	0602380d 	streq	r3, [r2], -sp, lsl #16
    925c:	000015a2 	andeq	r1, r0, r2, lsr #11
    9260:	20a41810 	adccs	r1, r4, r0, lsl r8
    9264:	390d0000 	stmdbcc	sp, {}	; <UNPREDICTABLE>
    9268:	00590c02 	subseq	r0, r9, r2, lsl #24
    926c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    9270:	00002338 	andeq	r2, r0, r8, lsr r3
    9274:	0602410d 	streq	r4, [r2], -sp, lsl #2
    9278:	000015cf 	andeq	r1, r0, pc, asr #11
    927c:	20101815 	andscs	r1, r0, r5, lsl r8
    9280:	550d0000 	strpl	r0, [sp, #-0]
    9284:	15fc0602 	ldrbne	r0, [ip, #1538]!	; 0x602
    9288:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    928c:	00001483 	andeq	r1, r0, r3, lsl #9
    9290:	0602680d 	streq	r6, [r2], -sp, lsl #16
    9294:	0000165c 	andeq	r1, r0, ip, asr r6
    9298:	209c1818 	addscs	r1, ip, r8, lsl r8
    929c:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
    92a0:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    92a4:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    92a8:	000024da 	ldrdeq	r2, [r0], -sl
    92ac:	0e026a0d 	vmlaeq.f32	s12, s4, s26
    92b0:	00000bc6 	andeq	r0, r0, r6, asr #23
    92b4:	1f4b181c 	svcne	0x004b181c
    92b8:	6c0d0000 	stcvs	0, cr0, [sp], {-0}
    92bc:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    92c0:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    92c4:	00002294 	muleq	r0, r4, r2
    92c8:	0c02700d 	stceq	0, cr7, [r2], {13}
    92cc:	00000038 	andeq	r0, r0, r8, lsr r0
    92d0:	23d21822 	bicscs	r1, r2, #2228224	; 0x220000
    92d4:	730d0000 	movwvc	r0, #53248	; 0xd000
    92d8:	00590c02 	subseq	r0, r9, r2, lsl #24
    92dc:	00240000 	eoreq	r0, r4, r0
    92e0:	00250e02 	eoreq	r0, r5, r2, lsl #28
    92e4:	30480d00 	subcc	r0, r8, r0, lsl #26
    92e8:	00001082 	andeq	r1, r0, r2, lsl #1
    92ec:	0024fb1a 	eoreq	pc, r4, sl, lsl fp	; <UNPREDICTABLE>
    92f0:	750d0c00 	strvc	r0, [sp, #-3072]	; 0xfffff400
    92f4:	10f31503 	rscsne	r1, r3, r3, lsl #10
    92f8:	b1180000 	tstlt	r8, r0
    92fc:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9300:	6c0d0376 	stcvs	3, cr0, [sp], {118}	; 0x76
    9304:	00000000 	andeq	r0, r0, r0
    9308:	001fd018 	andseq	sp, pc, r8, lsl r0	; <UNPREDICTABLE>
    930c:	03770d00 	cmneq	r7, #0, 26
    9310:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9314:	bd180200 	lfmlt	f0, 4, [r8, #-0]
    9318:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    931c:	590c0378 	stmdbpl	ip, {r3, r4, r5, r6, r8, r9}
    9320:	04000000 	streq	r0, [r0], #-0
    9324:	0024b318 	eoreq	fp, r4, r8, lsl r3
    9328:	03790d00 	cmneq	r9, #0, 26
    932c:	0000590c 	andeq	r5, r0, ip, lsl #18
    9330:	38180500 	ldmdacc	r8, {r8, sl}
    9334:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9338:	590c037a 	stmdbpl	ip, {r1, r3, r4, r5, r6, r8, r9}
    933c:	06000000 	streq	r0, [r0], -r0
    9340:	00221c18 	eoreq	r1, r2, r8, lsl ip
    9344:	037b0d00 	cmneq	fp, #0, 26
    9348:	0000250b 	andeq	r2, r0, fp, lsl #10
    934c:	f5180700 			; <UNDEFINED> instruction: 0xf5180700
    9350:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9354:	540c037c 	strpl	r0, [ip], #-892	; 0xfffffc84
    9358:	08000009 	stmdaeq	r0, {r0, r3}
    935c:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9360:	113d047f 	teqne	sp, pc, ror r4
    9364:	6f210000 	svcvs	0x00210000
    9368:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    936c:	00590f80 	subseq	r0, r9, r0, lsl #31
    9370:	04010000 	streq	r0, [r1], #-0
    9374:	0d210004 	stceq	0, cr0, [r1, #-16]!
    9378:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    937c:	00590f81 	subseq	r0, r9, r1, lsl #31
    9380:	01010000 	mrseq	r0, (UNDEF: 1)
    9384:	cd210003 	stcgt	0, cr0, [r1, #-12]!
    9388:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    938c:	00590f83 	subseq	r0, r9, r3, lsl #31
    9390:	02010000 	andeq	r0, r1, #0
    9394:	88210001 	stmdahi	r1!, {r0}
    9398:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    939c:	00590f84 	subseq	r0, r9, r4, lsl #31
    93a0:	01010000 	mrseq	r0, (UNDEF: 1)
    93a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    93a8:	04870d01 	streq	r0, [r7], #3329	; 0xd01
    93ac:	00001167 	andeq	r1, r0, r7, ror #2
    93b0:	0025ea21 	eoreq	lr, r5, r1, lsr #20
    93b4:	0f880d00 	svceq	0x00880d00
    93b8:	00000059 	andeq	r0, r0, r9, asr r0
    93bc:	00040401 	andeq	r0, r4, r1, lsl #8
    93c0:	00273e21 	eoreq	r3, r7, r1, lsr #28
    93c4:	0f890d00 	svceq	0x00890d00
    93c8:	00000059 	andeq	r0, r0, r9, asr r0
    93cc:	00000401 	andeq	r0, r0, r1, lsl #8
    93d0:	0d010c00 	stceq	12, cr0, [r1, #-0]
    93d4:	11a1048b 			; <UNDEFINED> instruction: 0x11a1048b
    93d8:	7d210000 	stcvc	0, cr0, [r1, #-0]
    93dc:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    93e0:	00590f8c 	subseq	r0, r9, ip, lsl #31
    93e4:	01010000 	mrseq	r0, (UNDEF: 1)
    93e8:	05210007 	streq	r0, [r1, #-7]!
    93ec:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    93f0:	00590f8f 	subseq	r0, r9, pc, lsl #31
    93f4:	01010000 	mrseq	r0, (UNDEF: 1)
    93f8:	3e210004 	cdpcc	0, 2, cr0, cr1, cr4, {0}
    93fc:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9400:	00590f91 			; <UNDEFINED> instruction: 0x00590f91
    9404:	01010000 	mrseq	r0, (UNDEF: 1)
    9408:	0c000003 	stceq	0, cr0, [r0], {3}
    940c:	04a60d01 	strteq	r0, [r6], #3329	; 0xd01
    9410:	000011eb 	andeq	r1, r0, fp, ror #3
    9414:	00276f21 	eoreq	r6, r7, r1, lsr #30
    9418:	0fa70d00 	svceq	0x00a70d00
    941c:	00000059 	andeq	r0, r0, r9, asr r0
    9420:	00040401 	andeq	r0, r4, r1, lsl #8
    9424:	00210d21 	eoreq	r0, r1, r1, lsr #26
    9428:	0fa80d00 	svceq	0x00a80d00
    942c:	00000059 	andeq	r0, r0, r9, asr r0
    9430:	00030101 	andeq	r0, r3, r1, lsl #2
    9434:	0021cd21 	eoreq	ip, r1, r1, lsr #26
    9438:	0faa0d00 	svceq	0x00aa0d00
    943c:	00000059 	andeq	r0, r0, r9, asr r0
    9440:	00010201 	andeq	r0, r1, r1, lsl #4
    9444:	001f8821 	andseq	r8, pc, r1, lsr #16
    9448:	0fab0d00 	svceq	0x00ab0d00
    944c:	00000059 	andeq	r0, r0, r9, asr r0
    9450:	00000101 	andeq	r0, r0, r1, lsl #2
    9454:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9458:	121504ae 	andsne	r0, r5, #-1375731712	; 0xae000000
    945c:	ea210000 	b	849464 <__ccfg+0x8294bc>
    9460:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9464:	00590faf 	subseq	r0, r9, pc, lsr #31
    9468:	04010000 	streq	r0, [r1], #-0
    946c:	3e210004 	cdpcc	0, 2, cr0, cr1, cr4, {0}
    9470:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9474:	00590fb0 	ldrheq	r0, [r9], #-240	; 0xffffff10
    9478:	04010000 	streq	r0, [r1], #-0
    947c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9480:	04b20d01 	ldrteq	r0, [r2], #3329	; 0xd01
    9484:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    9488:	00267d21 	eoreq	r7, r6, r1, lsr #26
    948c:	0fb30d00 	svceq	0x00b30d00
    9490:	00000059 	andeq	r0, r0, r9, asr r0
    9494:	00070101 	andeq	r0, r7, r1, lsl #2
    9498:	001fb321 	andseq	fp, pc, r1, lsr #6
    949c:	0fb50d00 	svceq	0x00b50d00
    94a0:	00000059 	andeq	r0, r0, r9, asr r0
    94a4:	00060101 	andeq	r0, r6, r1, lsl #2
    94a8:	00255b21 	eoreq	r5, r5, r1, lsr #22
    94ac:	0fb70d00 	svceq	0x00b70d00
    94b0:	00000059 	andeq	r0, r0, r9, asr r0
    94b4:	00050101 	andeq	r0, r5, r1, lsl #2
    94b8:	00270521 	eoreq	r0, r7, r1, lsr #10
    94bc:	0fb90d00 	svceq	0x00b90d00
    94c0:	00000059 	andeq	r0, r0, r9, asr r0
    94c4:	00040101 	andeq	r0, r4, r1, lsl #2
    94c8:	001f3e21 	andseq	r3, pc, r1, lsr #28
    94cc:	0fbb0d00 	svceq	0x00bb0d00
    94d0:	00000059 	andeq	r0, r0, r9, asr r0
    94d4:	00030101 	andeq	r0, r3, r1, lsl #2
    94d8:	00269a21 	eoreq	r9, r6, r1, lsr #20
    94dc:	0fbd0d00 	svceq	0x00bd0d00
    94e0:	00000059 	andeq	r0, r0, r9, asr r0
    94e4:	00020101 	andeq	r0, r2, r1, lsl #2
    94e8:	0021de21 	eoreq	sp, r1, r1, lsr #28
    94ec:	0fbf0d00 	svceq	0x00bf0d00
    94f0:	00000059 	andeq	r0, r0, r9, asr r0
    94f4:	00010101 	andeq	r0, r1, r1, lsl #2
    94f8:	00256621 	eoreq	r6, r5, r1, lsr #12
    94fc:	0fc10d00 	svceq	0x00c10d00
    9500:	00000059 	andeq	r0, r0, r9, asr r0
    9504:	00000101 	andeq	r0, r0, r1, lsl #2
    9508:	0d010c00 	stceq	12, cr0, [r1, #-0]
    950c:	131904c4 	tstne	r9, #196, 8	; 0xc4000000
    9510:	9c210000 	stcls	0, cr0, [r1], #-0
    9514:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9518:	00590fc5 	subseq	r0, r9, r5, asr #31
    951c:	01010000 	mrseq	r0, (UNDEF: 1)
    9520:	d5210007 	strle	r0, [r1, #-7]!
    9524:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9528:	00590fc6 	subseq	r0, r9, r6, asr #31
    952c:	01010000 	mrseq	r0, (UNDEF: 1)
    9530:	10210006 	eorne	r0, r1, r6
    9534:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9538:	00590fc8 	subseq	r0, r9, r8, asr #31
    953c:	01010000 	mrseq	r0, (UNDEF: 1)
    9540:	79210004 	stmdbvc	r1!, {r2}
    9544:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9548:	00590fc9 	subseq	r0, r9, r9, asr #31
    954c:	01010000 	mrseq	r0, (UNDEF: 1)
    9550:	ef210003 	svc	0x00210003
    9554:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9558:	00590fca 	subseq	r0, r9, sl, asr #31
    955c:	01010000 	mrseq	r0, (UNDEF: 1)
    9560:	25210002 	strcs	r0, [r1, #-2]!
    9564:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9568:	00590fcb 	subseq	r0, r9, fp, asr #31
    956c:	01010000 	mrseq	r0, (UNDEF: 1)
    9570:	23210001 			; <UNDEFINED> instruction: 0x23210001
    9574:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9578:	00590fcc 	subseq	r0, r9, ip, asr #31
    957c:	01010000 	mrseq	r0, (UNDEF: 1)
    9580:	0c000000 	stceq	0, cr0, [r0], {-0}
    9584:	04d40d01 	ldrbeq	r0, [r4], #3329	; 0xd01
    9588:	00001363 	andeq	r1, r0, r3, ror #6
    958c:	00276f21 	eoreq	r6, r7, r1, lsr #30
    9590:	0fd50d00 	svceq	0x00d50d00
    9594:	00000059 	andeq	r0, r0, r9, asr r0
    9598:	00040401 	andeq	r0, r4, r1, lsl #8
    959c:	00210d21 	eoreq	r0, r1, r1, lsr #26
    95a0:	0fd60d00 	svceq	0x00d60d00
    95a4:	00000059 	andeq	r0, r0, r9, asr r0
    95a8:	00030101 	andeq	r0, r3, r1, lsl #2
    95ac:	0021cd21 	eoreq	ip, r1, r1, lsr #26
    95b0:	0fd80d00 	svceq	0x00d80d00
    95b4:	00000059 	andeq	r0, r0, r9, asr r0
    95b8:	00010201 	andeq	r0, r1, r1, lsl #4
    95bc:	001f8821 	andseq	r8, pc, r1, lsr #16
    95c0:	0fd90d00 	svceq	0x00d90d00
    95c4:	00000059 	andeq	r0, r0, r9, asr r0
    95c8:	00000101 	andeq	r0, r0, r1, lsl #2
    95cc:	0d011b00 	vstreq	d1, [r1, #-0]
    95d0:	b2040184 	andlt	r0, r4, #132, 2	; 0x21
    95d4:	22000013 	andcs	r0, r0, #19
    95d8:	0000276f 	andeq	r2, r0, pc, ror #14
    95dc:	0f01850d 	svceq	0x0001850d
    95e0:	00000059 	andeq	r0, r0, r9, asr r0
    95e4:	00040401 	andeq	r0, r4, r1, lsl #8
    95e8:	00210d22 	eoreq	r0, r1, r2, lsr #26
    95ec:	01860d00 	orreq	r0, r6, r0, lsl #26
    95f0:	0000590f 	andeq	r5, r0, pc, lsl #18
    95f4:	03010100 	movweq	r0, #4352	; 0x1100
    95f8:	21cd2200 	biccs	r2, sp, r0, lsl #4
    95fc:	880d0000 	stmdahi	sp, {}	; <UNPREDICTABLE>
    9600:	00590f01 	subseq	r0, r9, r1, lsl #30
    9604:	02010000 	andeq	r0, r1, #0
    9608:	88220001 	stmdahi	r2!, {r0}
    960c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9610:	590f0189 	stmdbpl	pc, {r0, r3, r7, r8}	; <UNPREDICTABLE>
    9614:	01000000 	mrseq	r0, (UNDEF: 0)
    9618:	00000001 	andeq	r0, r0, r1
    961c:	8c0d011b 	stfhis	f0, [sp], {27}
    9620:	13df0401 	bicsne	r0, pc, #16777216	; 0x1000000
    9624:	ea220000 	b	88962c <__ccfg+0x869684>
    9628:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    962c:	590f018d 	stmdbpl	pc, {r0, r2, r3, r7, r8}	; <UNPREDICTABLE>
    9630:	01000000 	mrseq	r0, (UNDEF: 0)
    9634:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    9638:	0000273e 	andeq	r2, r0, lr, lsr r7
    963c:	0f018e0d 	svceq	0x00018e0d
    9640:	00000059 	andeq	r0, r0, r9, asr r0
    9644:	00000401 	andeq	r0, r0, r1, lsl #8
    9648:	0d011b00 	vstreq	d1, [r1, #-0]
    964c:	0c040190 	stfeqs	f0, [r4], {144}	; 0x90
    9650:	22000014 	andcs	r0, r0, #20
    9654:	00002324 	andeq	r2, r0, r4, lsr #6
    9658:	0f01910d 	svceq	0x0001910d
    965c:	00000059 	andeq	r0, r0, r9, asr r0
    9660:	00070101 	andeq	r0, r7, r1, lsl #2
    9664:	00241222 	eoreq	r1, r4, r2, lsr #4
    9668:	01930d00 	orrseq	r0, r3, r0, lsl #26
    966c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9670:	06010100 	streq	r0, [r1], -r0, lsl #2
    9674:	011b0000 	tsteq	fp, r0
    9678:	0401970d 	streq	r9, [r1], #-1805	; 0xfffff8f3
    967c:	0000147d 	andeq	r1, r0, sp, ror r4
    9680:	0020cc22 	eoreq	ip, r0, r2, lsr #24
    9684:	01980d00 	orrseq	r0, r8, r0, lsl #26
    9688:	0000590f 	andeq	r5, r0, pc, lsl #18
    968c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9690:	231b2200 	tstcs	fp, #0, 4
    9694:	990d0000 	stmdbls	sp, {}	; <UNPREDICTABLE>
    9698:	00590f01 	subseq	r0, r9, r1, lsl #30
    969c:	01010000 	mrseq	r0, (UNDEF: 1)
    96a0:	83220006 			; <UNDEFINED> instruction: 0x83220006
    96a4:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    96a8:	590f019a 	stmdbpl	pc, {r1, r3, r4, r7, r8}	; <UNPREDICTABLE>
    96ac:	01000000 	mrseq	r0, (UNDEF: 0)
    96b0:	22000501 	andcs	r0, r0, #4194304	; 0x400000
    96b4:	000023cb 	andeq	r2, r0, fp, asr #7
    96b8:	0f019c0d 	svceq	0x00019c0d
    96bc:	00000059 	andeq	r0, r0, r9, asr r0
    96c0:	00040101 	andeq	r0, r4, r1, lsl #2
    96c4:	00265122 	eoreq	r5, r6, r2, lsr #2
    96c8:	019f0d00 	orrseq	r0, pc, r0, lsl #26
    96cc:	0000590f 	andeq	r5, r0, pc, lsl #18
    96d0:	03010100 	movweq	r0, #4352	; 0x1100
    96d4:	23a52200 			; <UNDEFINED> instruction: 0x23a52200
    96d8:	a10d0000 	mrsge	r0, (UNDEF: 13)
    96dc:	00590f01 	subseq	r0, r9, r1, lsl #30
    96e0:	01010000 	mrseq	r0, (UNDEF: 1)
    96e4:	1b000002 	blne	96f4 <__exidx_end+0x3974>
    96e8:	01aa0d01 			; <UNDEFINED> instruction: 0x01aa0d01
    96ec:	0014aa04 	andseq	sl, r4, r4, lsl #20
    96f0:	21152200 	tstcs	r5, r0, lsl #4
    96f4:	ab0d0000 	blge	3496fc <__ccfg+0x329754>
    96f8:	00590f01 	subseq	r0, r9, r1, lsl #30
    96fc:	04010000 	streq	r0, [r1], #-0
    9700:	f5220004 			; <UNDEFINED> instruction: 0xf5220004
    9704:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9708:	590f01ad 	stmdbpl	pc, {r0, r2, r3, r5, r7, r8}	; <UNPREDICTABLE>
    970c:	01000000 	mrseq	r0, (UNDEF: 0)
    9710:	00000004 	andeq	r0, r0, r4
    9714:	b00d011b 	andlt	r0, sp, fp, lsl r1
    9718:	14f90401 	ldrbtne	r0, [r9], #1025	; 0x401
    971c:	6f220000 	svcvs	0x00220000
    9720:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9724:	590f01b1 	stmdbpl	pc, {r0, r4, r5, r7, r8}	; <UNPREDICTABLE>
    9728:	01000000 	mrseq	r0, (UNDEF: 0)
    972c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    9730:	0000210d 	andeq	r2, r0, sp, lsl #2
    9734:	0f01b20d 	svceq	0x0001b20d
    9738:	00000059 	andeq	r0, r0, r9, asr r0
    973c:	00030101 	andeq	r0, r3, r1, lsl #2
    9740:	0021cd22 	eoreq	ip, r1, r2, lsr #26
    9744:	01b40d00 			; <UNDEFINED> instruction: 0x01b40d00
    9748:	0000590f 	andeq	r5, r0, pc, lsl #18
    974c:	01020100 	mrseq	r0, (UNDEF: 18)
    9750:	1f882200 	svcne	0x00882200
    9754:	b50d0000 	strlt	r0, [sp, #-0]
    9758:	00590f01 	subseq	r0, r9, r1, lsl #30
    975c:	01010000 	mrseq	r0, (UNDEF: 1)
    9760:	1b000000 	blne	9768 <__exidx_end+0x39e8>
    9764:	02220d01 	eoreq	r0, r2, #1, 26	; 0x40
    9768:	00154804 	andseq	r4, r5, r4, lsl #16
    976c:	276f2200 	strbcs	r2, [pc, -r0, lsl #4]!
    9770:	230d0000 	movwcs	r0, #53248	; 0xd000
    9774:	00590f02 	subseq	r0, r9, r2, lsl #30
    9778:	04010000 	streq	r0, [r1], #-0
    977c:	0d220004 	stceq	0, cr0, [r2, #-16]!
    9780:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9784:	590f0224 	stmdbpl	pc, {r2, r5, r9}	; <UNPREDICTABLE>
    9788:	01000000 	mrseq	r0, (UNDEF: 0)
    978c:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    9790:	000021cd 	andeq	r2, r0, sp, asr #3
    9794:	0f02260d 	svceq	0x0002260d
    9798:	00000059 	andeq	r0, r0, r9, asr r0
    979c:	00010201 	andeq	r0, r1, r1, lsl #4
    97a0:	001f8822 	andseq	r8, pc, r2, lsr #16
    97a4:	02270d00 	eoreq	r0, r7, #0, 26
    97a8:	0000590f 	andeq	r5, r0, pc, lsl #18
    97ac:	00010100 	andeq	r0, r1, r0, lsl #2
    97b0:	011b0000 	tsteq	fp, r0
    97b4:	04022a0d 	streq	r2, [r2], #-2573	; 0xfffff5f3
    97b8:	00001575 	andeq	r1, r0, r5, ror r5
    97bc:	0025ea22 	eoreq	lr, r5, r2, lsr #20
    97c0:	022b0d00 	eoreq	r0, fp, #0, 26
    97c4:	0000590f 	andeq	r5, r0, pc, lsl #18
    97c8:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    97cc:	273e2200 	ldrcs	r2, [lr, -r0, lsl #4]!
    97d0:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    97d4:	00590f02 	subseq	r0, r9, r2, lsl #30
    97d8:	04010000 	streq	r0, [r1], #-0
    97dc:	1b000000 	blne	97e4 <__exidx_end+0x3a64>
    97e0:	022e0d02 	eoreq	r0, lr, #2, 26	; 0x80
    97e4:	0015a204 	andseq	sl, r5, r4, lsl #4
    97e8:	22252200 	eorcs	r2, r5, #0, 4
    97ec:	2f0d0000 	svccs	0x000d0000
    97f0:	006c1002 	rsbeq	r1, ip, r2
    97f4:	03020000 	movweq	r0, #8192	; 0x2000
    97f8:	2122000d 			; <UNDEFINED> instruction: 0x2122000d
    97fc:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9800:	6c100232 	lfmvs	f0, 4, [r0], {50}	; 0x32
    9804:	02000000 	andeq	r0, r0, #0
    9808:	0000000d 	andeq	r0, r0, sp
    980c:	340d041b 	strcc	r0, [sp], #-1051	; 0xfffffbe5
    9810:	15cf0402 	strbne	r0, [pc, #1026]	; 9c1a <__exidx_end+0x3e9a>
    9814:	ba220000 	blt	88981c <__ccfg+0x869874>
    9818:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    981c:	7f100235 	svcvc	0x00100235
    9820:	04000000 	streq	r0, [r0], #-0
    9824:	22001c04 	andcs	r1, r0, #4, 24	; 0x400
    9828:	000024ca 	andeq	r2, r0, sl, asr #9
    982c:	1002370d 	andne	r3, r2, sp, lsl #14
    9830:	0000007f 	andeq	r0, r0, pc, ror r0
    9834:	00031504 	andeq	r1, r3, r4, lsl #10
    9838:	0d011b00 	vstreq	d1, [r1, #-0]
    983c:	fc04023a 	stc2	2, cr0, [r4], {58}	; 0x3a
    9840:	22000015 	andcs	r0, r0, #21
    9844:	00002616 	andeq	r2, r0, r6, lsl r6
    9848:	0f023b0d 	svceq	0x00023b0d
    984c:	00000059 	andeq	r0, r0, r9, asr r0
    9850:	00020601 	andeq	r0, r2, r1, lsl #12
    9854:	001fe022 	andseq	lr, pc, r2, lsr #32
    9858:	023d0d00 	eorseq	r0, sp, #0, 26
    985c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9860:	00020100 	andeq	r0, r2, r0, lsl #2
    9864:	021b0000 	andseq	r0, fp, #0
    9868:	0402420d 	streq	r4, [r2], #-525	; 0xfffffdf3
    986c:	0000165c 	andeq	r1, r0, ip, asr r6
    9870:	0023c322 	eoreq	ip, r3, r2, lsr #6
    9874:	02430d00 	subeq	r0, r3, #0, 26
    9878:	00006c10 	andeq	r6, r0, r0, lsl ip
    987c:	0a060200 	beq	18a084 <__ccfg+0x16a0dc>
    9880:	225f2200 	subscs	r2, pc, #0, 4
    9884:	440d0000 	strmi	r0, [sp], #-0
    9888:	006c1002 	rsbeq	r1, ip, r2
    988c:	01020000 	mrseq	r0, (UNDEF: 2)
    9890:	2b220009 	blcs	8898bc <__ccfg+0x869914>
    9894:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9898:	6c100246 	lfmvs	f0, 4, [r0], {70}	; 0x46
    989c:	02000000 	andeq	r0, r0, #0
    98a0:	22000801 	andcs	r0, r0, #65536	; 0x10000
    98a4:	00001fc8 	andeq	r1, r0, r8, asr #31
    98a8:	1002480d 	andne	r4, r2, sp, lsl #16
    98ac:	0000006c 	andeq	r0, r0, ip, rrx
    98b0:	00040402 	andeq	r0, r4, r2, lsl #8
    98b4:	001f6b22 	andseq	r6, pc, r2, lsr #22
    98b8:	024d0d00 	subeq	r0, sp, #0, 26
    98bc:	00006c10 	andeq	r6, r0, r0, lsl ip
    98c0:	00030200 	andeq	r0, r3, r0, lsl #4
    98c4:	021b0000 	andseq	r0, fp, #0
    98c8:	0402560d 	streq	r5, [r2], #-1549	; 0xfffff9f3
    98cc:	000016ab 	andeq	r1, r0, fp, lsr #13
    98d0:	0021c022 	eoreq	ip, r1, r2, lsr #32
    98d4:	02570d00 	subseq	r0, r7, #0, 26
    98d8:	00006c10 	andeq	r6, r0, r0, lsl ip
    98dc:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    98e0:	215f2200 	cmpcs	pc, r0, lsl #4
    98e4:	5d0d0000 	stcpl	0, cr0, [sp, #-0]
    98e8:	006c1002 	rsbeq	r1, ip, r2
    98ec:	01020000 	mrseq	r0, (UNDEF: 2)
    98f0:	ff22000c 			; <UNDEFINED> instruction: 0xff22000c
    98f4:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    98f8:	6c10025f 	lfmvs	f0, 4, [r0], {95}	; 0x5f
    98fc:	02000000 	andeq	r0, r0, #0
    9900:	22000606 	andcs	r0, r0, #6291456	; 0x600000
    9904:	000023fe 	strdeq	r2, [r0], -lr
    9908:	1002660d 	andne	r6, r2, sp, lsl #12
    990c:	0000006c 	andeq	r0, r0, ip, rrx
    9910:	00050102 	andeq	r0, r5, r2, lsl #2
    9914:	25860200 	strcs	r0, [r6, #512]	; 0x200
    9918:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    991c:	0016b734 	andseq	fp, r6, r4, lsr r7
    9920:	256f0f00 	strbcs	r0, [pc, #-3840]!	; 8a28 <__exidx_end+0x2ca8>
    9924:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    9928:	1706155e 	smlsdne	r6, lr, r5, r1
    992c:	360d0000 	strcc	r0, [sp], -r0
    9930:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    9934:	09840d5f 	stmibeq	r4, {r0, r1, r2, r3, r4, r6, r8, sl, fp}
    9938:	0d000000 	stceq	0, cr0, [r0, #-0]
    993c:	00000778 	andeq	r0, r0, r8, ror r7
    9940:	590c600e 	stmdbpl	ip, {r1, r2, r3, sp, lr}
    9944:	04000000 	streq	r0, [r0], #-0
    9948:	0014830d 	andseq	r8, r4, sp, lsl #6
    994c:	066e0e00 	strbteq	r0, [lr], -r0, lsl #28
    9950:	00001706 	andeq	r1, r0, r6, lsl #14
    9954:	18f90d05 	ldmne	r9!, {r0, r2, r8, sl, fp}^
    9958:	6f0e0000 	svcvs	0x000e0000
    995c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9960:	5a0d0600 	bpl	34b168 <__ccfg+0x32b1c0>
    9964:	0e000047 	cdpeq	0, 0, cr0, cr0, cr7, {2}
    9968:	00590c71 	subseq	r0, r9, r1, ror ip
    996c:	00080000 	andeq	r0, r8, r0
    9970:	610e010c 	tstvs	lr, ip, lsl #2
    9974:	00174004 	andseq	r4, r7, r4
    9978:	536c2100 	cmnpl	ip, #0, 2
    997c:	620e0000 	andvs	r0, lr, #0
    9980:	0000590f 	andeq	r5, r0, pc, lsl #18
    9984:	06020100 	streq	r0, [r2], -r0, lsl #2
    9988:	25472100 	strbcs	r2, [r7, #-256]	; 0xffffff00
    998c:	670e0000 	strvs	r0, [lr, -r0]
    9990:	0000590f 	andeq	r5, r0, pc, lsl #18
    9994:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    9998:	1fff2100 	svcne	0x00ff2100
    999c:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    99a0:	0000590f 	andeq	r5, r0, pc, lsl #18
    99a4:	00040100 	andeq	r0, r4, r0, lsl #2
    99a8:	100c0000 	andne	r0, ip, r0
    99ac:	7e094802 	cdpvc	8, 0, cr4, cr9, cr2, {0}
    99b0:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    99b4:	00002185 	andeq	r2, r0, r5, lsl #3
    99b8:	7f0d4902 	svcvc	0x000d4902
    99bc:	00000000 	andeq	r0, r0, r0
    99c0:	0020e60d 	eoreq	lr, r0, sp, lsl #12
    99c4:	0d4a0200 	sfmeq	f0, 2, [sl, #-0]
    99c8:	0000007f 	andeq	r0, r0, pc, ror r0
    99cc:	25310d04 	ldrcs	r0, [r1, #-3332]!	; 0xfffff2fc
    99d0:	4b020000 	blmi	899d8 <__ccfg+0x69a30>
    99d4:	00007f0d 	andeq	r7, r0, sp, lsl #30
    99d8:	840d0800 	strhi	r0, [sp], #-2048	; 0xfffff800
    99dc:	02000026 	andeq	r0, r0, #38	; 0x26
    99e0:	007f0d4c 	rsbseq	r0, pc, ip, asr #26
    99e4:	000c0000 	andeq	r0, ip, r0
    99e8:	001f9102 	andseq	r9, pc, r2, lsl #2
    99ec:	034d0200 	movteq	r0, #53760	; 0xd200
    99f0:	00001740 	andeq	r1, r0, r0, asr #14
    99f4:	00008b0a 	andeq	r8, r0, sl, lsl #22
    99f8:	00179a00 	andseq	r9, r7, r0, lsl #20
    99fc:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9a00:	00a20000 	adceq	r0, r2, r0
    9a04:	00178a04 	andseq	r8, r7, r4, lsl #20
    9a08:	22c92300 	sbccs	r2, r9, #0, 6
    9a0c:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    9a10:	00179a10 	andseq	r9, r7, r0, lsl sl
    9a14:	b0030500 	andlt	r0, r3, r0, lsl #10
    9a18:	0a00005a 	beq	9b88 <__exidx_end+0x3e08>
    9a1c:	0000008b 	andeq	r0, r0, fp, lsl #1
    9a20:	000017c2 	andeq	r1, r0, r2, asr #15
    9a24:	0000aa24 	andeq	sl, r0, r4, lsr #20
    9a28:	0001ac00 	andeq	sl, r1, r0, lsl #24
    9a2c:	0017b104 	andseq	fp, r7, r4, lsl #2
    9a30:	23522300 	cmpcs	r2, #0, 6
    9a34:	3a050000 	bcc	149a3c <__ccfg+0x129a94>
    9a38:	0017c210 	andseq	ip, r7, r0, lsl r2
    9a3c:	fc030500 	stc2	5, cr0, [r3], {-0}
    9a40:	02000053 	andeq	r0, r0, #83	; 0x53
    9a44:	00002901 	andeq	r2, r0, r1, lsl #18
    9a48:	6c12270f 	ldcvs	7, cr2, [r2], {15}
    9a4c:	04000000 	streq	r0, [r0], #-0
    9a50:	000017d9 	ldrdeq	r1, [r0], -r9
    9a54:	0017d905 	andseq	sp, r7, r5, lsl #18
    9a58:	1dc80200 	sfmne	f0, 2, [r8]
    9a5c:	2b0f0000 	blcs	3c9a64 <__ccfg+0x3a9abc>
    9a60:	00005912 	andeq	r5, r0, r2, lsl r9
    9a64:	17ef0500 	strbne	r0, [pc, r0, lsl #10]!
    9a68:	53020000 	movwpl	r0, #8192	; 0x2000
    9a6c:	0f000029 	svceq	0x00000029
    9a70:	007f122c 	rsbseq	r1, pc, ip, lsr #4
    9a74:	00040000 	andeq	r0, r4, r0
    9a78:	02000018 	andeq	r0, r0, #24
    9a7c:	00000646 	andeq	r0, r0, r6, asr #12
    9a80:	7f122d0f 	svcvc	0x00122d0f
    9a84:	02000000 	andeq	r0, r0, #0
    9a88:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    9a8c:	29102e0f 	ldmdbcs	r0, {r0, r1, r2, r3, r9, sl, fp, sp}
    9a90:	11000018 	tstne	r0, r8, lsl r0
    9a94:	0017d904 	andseq	sp, r7, r4, lsl #18
    9a98:	0f080c00 	svceq	0x00080c00
    9a9c:	18bd0932 	popne	{r1, r4, r5, r8, fp}
    9aa0:	34210000 	strtcc	r0, [r1], #-0
    9aa4:	0f000000 	svceq	0x00000000
    9aa8:	17ef0734 			; <UNDEFINED> instruction: 0x17ef0734
    9aac:	01010000 	mrseq	r0, (UNDEF: 1)
    9ab0:	4c210007 	stcmi	0, cr0, [r1], #-28	; 0xffffffe4
    9ab4:	0f000006 	svceq	0x00000006
    9ab8:	17ef0335 			; <UNDEFINED> instruction: 0x17ef0335
    9abc:	01010000 	mrseq	r0, (UNDEF: 1)
    9ac0:	e7210006 	str	r0, [r1, -r6]!
    9ac4:	0f000002 	svceq	0x00000002
    9ac8:	17ef0336 			; <UNDEFINED> instruction: 0x17ef0336
    9acc:	01010000 	mrseq	r0, (UNDEF: 1)
    9ad0:	b7210005 	strlt	r0, [r1, -r5]!
    9ad4:	0f000006 	svceq	0x00000006
    9ad8:	17ef0337 			; <UNDEFINED> instruction: 0x17ef0337
    9adc:	01010000 	mrseq	r0, (UNDEF: 1)
    9ae0:	9f210004 	svcls	0x00210004
    9ae4:	0f00000a 	svceq	0x0000000a
    9ae8:	17ef0338 			; <UNDEFINED> instruction: 0x17ef0338
    9aec:	04010000 	streq	r0, [r1], #-0
    9af0:	5b0d0000 	blpl	349af8 <__ccfg+0x329b50>
    9af4:	0f000006 	svceq	0x00000006
    9af8:	17ef073a 			; <UNDEFINED> instruction: 0x17ef073a
    9afc:	0d010000 	stceq	0, cr0, [r1, #-0]
    9b00:	000008fb 	strdeq	r0, [r0], -fp
    9b04:	ef033c0f 	svc	0x00033c0f
    9b08:	02000017 	andeq	r0, r0, #23
    9b0c:	000f400d 	andeq	r4, pc, sp
    9b10:	033d0f00 	teqeq	sp, #0, 30
    9b14:	000017ef 	andeq	r1, r0, pc, ror #15
    9b18:	09130d03 	ldmdbeq	r3, {r0, r1, r8, sl, fp}
    9b1c:	3f0f0000 	svccc	0x000f0000
    9b20:	00180008 	andseq	r0, r8, r8
    9b24:	02000400 	andeq	r0, r0, #0, 8
    9b28:	0000031d 	andeq	r0, r0, sp, lsl r3
    9b2c:	2f03410f 	svccs	0x0003410f
    9b30:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9b34:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    9b38:	0006be25 	andeq	fp, r6, r5, lsr #28
    9b3c:	1a430f00 	bne	10cd744 <__ccfg+0x10ad79c>
    9b40:	000018c9 	andeq	r1, r0, r9, asr #17
    9b44:	a0250101 	eorge	r0, r5, r1, lsl #2
    9b48:	0f000001 	svceq	0x00000001
    9b4c:	05eb0e45 	strbeq	r0, [fp, #3653]!	; 0xe45
    9b50:	01010000 	mrseq	r0, (UNDEF: 1)
    9b54:	00032625 	andeq	r2, r3, r5, lsr #12
    9b58:	1e450f00 	cdpne	15, 4, cr0, cr5, cr0, {0}
    9b5c:	000005eb 	andeq	r0, r0, fp, ror #11
    9b60:	080c0101 	stmdaeq	ip, {r0, r8}
    9b64:	29098f10 	stmdbcs	r9, {r4, r8, r9, sl, fp, pc}
    9b68:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    9b6c:	00000cd8 	ldrdeq	r0, [r0], -r8
    9b70:	7f0b9010 	svcvc	0x000b9010
    9b74:	00000000 	andeq	r0, r0, r0
    9b78:	00107b0d 	andseq	r7, r0, sp, lsl #22
    9b7c:	08911000 	ldmeq	r1, {ip}
    9b80:	000017d9 	ldrdeq	r1, [r0], -r9
    9b84:	01c50d04 	biceq	r0, r5, r4, lsl #26
    9b88:	92100000 	andsls	r0, r0, #0
    9b8c:	0017fb10 	andseq	pc, r7, r0, lsl fp	; <UNPREDICTABLE>
    9b90:	02000600 	andeq	r0, r0, #0, 12
    9b94:	00000ccc 	andeq	r0, r0, ip, asr #25
    9b98:	f8039310 			; <UNDEFINED> instruction: 0xf8039310
    9b9c:	0a000018 	beq	9c04 <__exidx_end+0x3e84>
    9ba0:	00001929 	andeq	r1, r0, r9, lsr #18
    9ba4:	00001940 	andeq	r1, r0, r0, asr #18
    9ba8:	3d250026 	stccc	0, cr0, [r5, #-152]!	; 0xffffff68
    9bac:	10000009 	andne	r0, r0, r9
    9bb0:	19350f99 	ldmdbne	r5!, {r0, r3, r4, r7, r8, r9, sl, fp}
    9bb4:	01010000 	mrseq	r0, (UNDEF: 1)
    9bb8:	9111010c 	tstls	r1, ip, lsl #2
    9bbc:	00197809 	andseq	r7, r9, r9, lsl #16
    9bc0:	091a2100 	ldmdbeq	sl, {r8, sp}
    9bc4:	93110000 	tstls	r1, #0
    9bc8:	0017ef07 	andseq	lr, r7, r7, lsl #30
    9bcc:	01070100 	mrseq	r0, (UNDEF: 23)
    9bd0:	05cc2100 	strbeq	r2, [ip, #256]	; 0x100
    9bd4:	94110000 	ldrls	r0, [r1], #-0
    9bd8:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9bdc:	00010100 	andeq	r0, r1, r0, lsl #2
    9be0:	ab020000 	blge	89be8 <__ccfg+0x69c40>
    9be4:	1100000a 	tstne	r0, sl
    9be8:	194e0396 	stmdbne	lr, {r1, r2, r4, r7, r8, r9}^
    9bec:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    9bf0:	0a000019 	beq	9c5c <__exidx_end+0x3edc>
    9bf4:	00001984 	andeq	r1, r0, r4, lsl #19
    9bf8:	00001994 	muleq	r0, r4, r9
    9bfc:	89040026 	stmdbhi	r4, {r1, r2, r5}
    9c00:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    9c04:	000003aa 	andeq	r0, r0, sl, lsr #7
    9c08:	94179c11 	ldrls	r9, [r7], #-3089	; 0xfffff3ef
    9c0c:	01000019 	tsteq	r0, r9, lsl r0
    9c10:	17e50a01 	strbne	r0, [r5, r1, lsl #20]!
    9c14:	19b20000 	ldmibne	r2!, {}	; <UNPREDICTABLE>
    9c18:	00260000 	eoreq	r0, r6, r0
    9c1c:	0019a704 	andseq	sl, r9, r4, lsl #14
    9c20:	060e2500 	streq	r2, [lr], -r0, lsl #10
    9c24:	06120000 	ldreq	r0, [r2], -r0
    9c28:	0019b213 	andseq	fp, r9, r3, lsl r2
    9c2c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9c30:	000008dd 	ldrdeq	r0, [r0], -sp
    9c34:	000ec310 	andeq	ip, lr, r0, lsl r3
    9c38:	01000018 	tsteq	r0, r8, lsl r0
    9c3c:	0c720701 	ldcleq	7, cr0, [r2], #-4
    9c40:	6e130000 	cdpvs	0, 1, cr0, cr3, cr0, {0}
    9c44:	19e01001 	stmibne	r0!, {r0, ip}^
    9c48:	04110000 	ldreq	r0, [r1], #-0
    9c4c:	000019e6 	andeq	r1, r0, r6, ror #19
    9c50:	19f2011f 	ldmibne	r2!, {r0, r1, r2, r3, r4, r8}^
    9c54:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    9c58:	00000017 	andeq	r0, r0, r7, lsl r0
    9c5c:	0005f80a 	andeq	pc, r5, sl, lsl #16
    9c60:	0019fd00 	andseq	pc, r9, r0, lsl #26
    9c64:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    9c68:	000019f2 	strdeq	r1, [r0], -r2
    9c6c:	0009e620 	andeq	lr, r9, r0, lsr #12
    9c70:	017f1300 	cmneq	pc, r0, lsl #6
    9c74:	0019fd16 	andseq	pc, r9, r6, lsl sp	; <UNPREDICTABLE>
    9c78:	20010100 	andcs	r0, r1, r0, lsl #2
    9c7c:	00000396 	muleq	r0, r6, r3
    9c80:	14018213 	strne	r8, [r1], #-531	; 0xfffffded
    9c84:	0000180c 	andeq	r1, r0, ip, lsl #16
    9c88:	6e200101 	sufvss	f0, f0, f1
    9c8c:	13000003 	movwne	r0, #3
    9c90:	000e02d8 	ldrdeq	r0, [lr], -r8
    9c94:	01000018 	tsteq	r0, r8, lsl r0
    9c98:	13081b01 	movwne	r1, #35585	; 0x8b01
    9c9c:	56090303 	strpl	r0, [r9], -r3, lsl #6
    9ca0:	1800001a 	stmdane	r0, {r1, r3, r4}
    9ca4:	00003ca7 	andeq	r3, r0, r7, lsr #25
    9ca8:	07030713 	smladeq	r3, r3, r7, r0
    9cac:	000017d9 	ldrdeq	r1, [r0], -r9
    9cb0:	0fd31800 	svceq	0x00d31800
    9cb4:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    9cb8:	18110803 	ldmdane	r1, {r0, r1, fp}
    9cbc:	00040000 	andeq	r0, r4, r0
    9cc0:	000a0907 	andeq	r0, sl, r7, lsl #18
    9cc4:	03091300 	movweq	r1, #37632	; 0x9300
    9cc8:	001a2f03 	andseq	r2, sl, r3, lsl #30
    9ccc:	00291a00 	eoreq	r1, r9, r0, lsl #20
    9cd0:	13300000 	teqne	r0, #0
    9cd4:	c608030b 	strgt	r0, [r8], -fp, lsl #6
    9cd8:	1800001a 	stmdane	r0, {r1, r3, r4}
    9cdc:	00001f2a 	andeq	r1, r0, sl, lsr #30
    9ce0:	08031413 	stmdaeq	r3, {r0, r1, r4, sl, ip}
    9ce4:	000017d9 	ldrdeq	r1, [r0], -r9
    9ce8:	0be71800 	bleq	ff9cfcf0 <_estack+0xdf9cacf0>
    9cec:	15130000 	ldrne	r0, [r3, #-0]
    9cf0:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    9cf4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    9cf8:	00004c94 	muleq	r0, r4, ip
    9cfc:	0b031613 	bleq	cf550 <__ccfg+0xaf5a8>
    9d00:	000019d3 	ldrdeq	r1, [r0], -r3
    9d04:	475a1804 	ldrbmi	r1, [sl, -r4, lsl #16]
    9d08:	17130000 	ldrne	r0, [r3, -r0]
    9d0c:	18110903 	ldmdane	r1, {r0, r1, r8, fp}
    9d10:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    9d14:	0000000f 	andeq	r0, r0, pc
    9d18:	0f031813 	svceq	0x00031813
    9d1c:	00001ac6 	andeq	r1, r0, r6, asr #21
    9d20:	095d180c 	ldmdbeq	sp, {r2, r3, fp, ip}^
    9d24:	19130000 	ldmdbne	r3, {}	; <UNPREDICTABLE>
    9d28:	1ad61503 	bne	ff58f13c <_estack+0xdf58a13c>
    9d2c:	002c0000 	eoreq	r0, ip, r0
    9d30:	001a560a 	andseq	r5, sl, sl, lsl #12
    9d34:	001ad600 	andseq	sp, sl, r0, lsl #12
    9d38:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9d3c:	00030000 	andeq	r0, r3, r0
    9d40:	1a630411 	bne	18cad8c <__ccfg+0x18aade4>
    9d44:	dc070000 	stcle	0, cr0, [r7], {-0}
    9d48:	1300000b 	movwne	r0, #11
    9d4c:	631b031c 	tstvs	fp, #28, 6	; 0x70000000
    9d50:	2000001a 	andcs	r0, r0, sl, lsl r0
    9d54:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    9d58:	14031e13 	strne	r1, [r3], #-3603	; 0xfffff1ed
    9d5c:	00001af8 	strdeq	r1, [r0], -r8
    9d60:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
    9d64:	00001adc 	ldrdeq	r1, [r0], -ip
    9d68:	00070f25 	andeq	r0, r7, r5, lsr #30
    9d6c:	131d1400 	tstne	sp, #0, 8
    9d70:	000017d9 	ldrdeq	r1, [r0], -r9
    9d74:	ee250101 	sufs	f0, f5, f1
    9d78:	14000002 	strne	r0, [r0], #-2
    9d7c:	17ea1a1e 			; <UNDEFINED> instruction: 0x17ea1a1e
    9d80:	01010000 	mrseq	r0, (UNDEF: 1)
    9d84:	000c6925 	andeq	r6, ip, r5, lsr #18
    9d88:	241e1400 	ldrcs	r1, [lr], #-1024	; 0xfffffc00
    9d8c:	000017ea 	andeq	r1, r0, sl, ror #15
    9d90:	87250101 	strhi	r0, [r5, -r1, lsl #2]!
    9d94:	1400000c 	strne	r0, [r0], #-12
    9d98:	1af81422 	bne	ffe0ee28 <_estack+0xdfe09e28>
    9d9c:	01010000 	mrseq	r0, (UNDEF: 1)
    9da0:	00204125 	eoreq	r4, r0, r5, lsr #2
    9da4:	27391500 	ldrcs	r1, [r9, -r0, lsl #10]!
    9da8:	00000f6d 	andeq	r0, r0, sp, ror #30
    9dac:	2f250101 	svccs	0x00250101
    9db0:	15000023 	strne	r0, [r0, #-35]	; 0xffffffdd
    9db4:	09fe153a 	ldmibeq	lr!, {r1, r3, r4, r5, r8, sl, ip}^
    9db8:	01010000 	mrseq	r0, (UNDEF: 1)
    9dbc:	00274b25 	eoreq	r4, r7, r5, lsr #22
    9dc0:	1a3b1500 	bne	ecf1c8 <__ccfg+0xeaf220>
    9dc4:	00000cec 	andeq	r0, r0, ip, ror #25
    9dc8:	ef250101 	svc	0x00250101
    9dcc:	15000025 	strne	r0, [r0, #-37]	; 0xffffffdb
    9dd0:	0d881a3c 	vstreq	s2, [r8, #240]	; 0xf0
    9dd4:	01010000 	mrseq	r0, (UNDEF: 1)
    9dd8:	0026ec23 	eoreq	lr, r6, r3, lsr #24
    9ddc:	0c240100 	stfeqs	f0, [r4], #-0
    9de0:	000000a3 	andeq	r0, r0, r3, lsr #1
    9de4:	05cc0305 	strbeq	r0, [ip, #773]	; 0x305
    9de8:	9a232000 	bls	8d1df0 <__ccfg+0x8b1e48>
    9dec:	0100001f 	tsteq	r0, pc, lsl r0
    9df0:	17ef0d26 	strbne	r0, [pc, r6, lsr #26]!
    9df4:	03050000 	movweq	r0, #20480	; 0x5000
    9df8:	200005d8 	ldrdcs	r0, [r0], -r8
    9dfc:	00160923 	andseq	r0, r6, r3, lsr #18
    9e00:	03270100 			; <UNDEFINED> instruction: 0x03270100
    9e04:	000017ef 	andeq	r1, r0, pc, ror #15
    9e08:	05c80305 	strbeq	r0, [r8, #773]	; 0x305
    9e0c:	23232000 			; <UNDEFINED> instruction: 0x23232000
    9e10:	01000024 	tsteq	r0, r4, lsr #32
    9e14:	17ef0d2a 	strbne	r0, [pc, sl, lsr #26]!
    9e18:	03050000 	movweq	r0, #20480	; 0x5000
    9e1c:	200005fa 	strdcs	r0, [r0], -sl
    9e20:	00241d23 	eoreq	r1, r4, r3, lsr #26
    9e24:	0d430100 	stfeqe	f0, [r3, #-0]
    9e28:	000017ef 	andeq	r1, r0, pc, ror #15
    9e2c:	003a0305 	eorseq	r0, sl, r5, lsl #6
    9e30:	ba232000 	blt	8d1e38 <__ccfg+0x8b1e90>
    9e34:	01000020 	tsteq	r0, r0, lsr #32
    9e38:	17ef0d47 	strbne	r0, [pc, r7, asr #26]!
    9e3c:	03050000 	movweq	r0, #20480	; 0x5000
    9e40:	200005c0 	andcs	r0, r0, r0, asr #11
    9e44:	0017e50a 	andseq	lr, r7, sl, lsl #10
    9e48:	001bea00 	andseq	lr, fp, r0, lsl #20
    9e4c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9e50:	00070000 	andeq	r0, r7, r0
    9e54:	001bda04 	andseq	sp, fp, r4, lsl #20
    9e58:	24ab2300 	strtcs	r2, [fp], #768	; 0x300
    9e5c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    9e60:	001bea13 	andseq	lr, fp, r3, lsl sl
    9e64:	ea030500 	b	cb26c <__ccfg+0xab2c4>
    9e68:	23000053 	movwcs	r0, #83	; 0x53
    9e6c:	00002744 	andeq	r2, r0, r4, asr #14
    9e70:	d90d5201 	stmdble	sp, {r0, r9, ip, lr}
    9e74:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e78:	0005d003 	andeq	sp, r5, r3
    9e7c:	23dc2320 	bicscs	r2, ip, #32, 6	; 0x80000000
    9e80:	53010000 	movwpl	r0, #4096	; 0x1000
    9e84:	0017d903 	andseq	sp, r7, r3, lsl #18
    9e88:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    9e8c:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9e90:	00002622 	andeq	r2, r0, r2, lsr #12
    9e94:	d9035401 	stmdble	r3, {r0, sl, ip, lr}
    9e98:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e9c:	0005be03 	andeq	fp, r5, r3, lsl #28
    9ea0:	1fd72320 	svcne	0x00d72320
    9ea4:	55010000 	strpl	r0, [r1, #-0]
    9ea8:	0017d903 	andseq	sp, r7, r3, lsl #18
    9eac:	38030500 	stmdacc	r3, {r8, sl}
    9eb0:	0c200000 	stceq	0, cr0, [r0], #-0
    9eb4:	09590104 	ldmdbeq	r9, {r2, r8}^
    9eb8:	00001c6b 	andeq	r1, r0, fp, ror #24
    9ebc:	00737010 	rsbseq	r7, r3, r0, lsl r0
    9ec0:	d9085a01 	stmdble	r8, {r0, r9, fp, ip, lr}
    9ec4:	00000017 	andeq	r0, r0, r7, lsl r0
    9ec8:	00777210 	rsbseq	r7, r7, r0, lsl r2
    9ecc:	d9045b01 	stmdble	r4, {r0, r8, r9, fp, ip, lr}
    9ed0:	02000017 	andeq	r0, r0, #23
    9ed4:	236b0200 	cmncs	fp, #0, 4
    9ed8:	5c010000 	stcpl	0, cr0, [r1], {-0}
    9edc:	001c4903 	andseq	r4, ip, r3, lsl #18
    9ee0:	1c6b0400 	cfstrdne	mvd0, [fp], #-0
    9ee4:	770a0000 	strvc	r0, [sl, -r0]
    9ee8:	8c00001c 	stchi	0, cr0, [r0], {28}
    9eec:	0b00001c 	bleq	9f64 <__exidx_end+0x41e4>
    9ef0:	000000aa 	andeq	r0, r0, sl, lsr #1
    9ef4:	7c040002 	stcvc	0, cr0, [r4], {2}
    9ef8:	2300001c 	movwcs	r0, #28
    9efc:	0000239d 	muleq	r0, sp, r3
    9f00:	8c185e01 	ldchi	14, cr5, [r8], {1}
    9f04:	0500001c 	streq	r0, [r0, #-28]	; 0xffffffe4
    9f08:	005d3c03 	subseq	r3, sp, r3, lsl #24
    9f0c:	24d32300 	ldrbcs	r2, [r3], #768	; 0x300
    9f10:	66010000 	strvs	r0, [r1], -r0
    9f14:	0010761b 	andseq	r7, r0, fp, lsl r6
    9f18:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    9f1c:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9f20:	0000260e 	andeq	r2, r0, lr, lsl #12
    9f24:	110e6901 	tstne	lr, r1, lsl #18
    9f28:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9f2c:	0005c403 	andeq	ip, r5, r3, lsl #8
    9f30:	20592320 	subscs	r2, r9, r0, lsr #6
    9f34:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    9f38:	00181117 	andseq	r1, r8, r7, lsl r1
    9f3c:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    9f40:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9f44:	00002675 	andeq	r2, r0, r5, ror r6
    9f48:	c1217801 			; <UNDEFINED> instruction: 0xc1217801
    9f4c:	0500000a 	streq	r0, [r0, #-10]
    9f50:	00002403 	andeq	r2, r0, r3, lsl #8
    9f54:	21e62320 	mvncs	r2, r0, lsr #6
    9f58:	83010000 	movwhi	r0, #4096	; 0x1000
    9f5c:	000e721a 	andeq	r7, lr, sl, lsl r2
    9f60:	08030500 	stmdaeq	r3, {r8, sl}
    9f64:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9f68:	00001f37 	andeq	r1, r0, r7, lsr pc
    9f6c:	7e11c101 	mnfvcs	f4, f1
    9f70:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9f74:	0005dc03 	andeq	sp, r5, r3, lsl #24
    9f78:	253d2720 	ldrcs	r2, [sp, #-1824]!	; 0xfffff8e0
    9f7c:	0a010000 	beq	49f84 <__ccfg+0x29fdc>
    9f80:	00a30c02 	adceq	r0, r3, r2, lsl #24
    9f84:	01280000 			; <UNDEFINED> instruction: 0x01280000
    9f88:	00002068 	andeq	r2, r0, r8, rrx
    9f8c:	0603d701 	streq	sp, [r3], -r1, lsl #14
    9f90:	00304001 	eorseq	r4, r0, r1
    9f94:	0031b400 	eorseq	fp, r1, r0, lsl #8
    9f98:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    9f9c:	2900001d 	stmdbcs	r0, {r0, r2, r3, r4}
    9fa0:	00796870 	rsbseq	r6, r9, r0, ror r8
    9fa4:	1703d701 	strne	sp, [r3, -r1, lsl #14]
    9fa8:	000000a3 	andeq	r0, r0, r3, lsr #1
    9fac:	0000290a 	andeq	r2, r0, sl, lsl #18
    9fb0:	73626d29 	cmnvc	r2, #2624	; 0xa40
    9fb4:	03d70100 	bicseq	r0, r7, #0, 2
    9fb8:	0000a320 	andeq	sl, r0, r0, lsr #6
    9fbc:	00295400 	eoreq	r5, r9, r0, lsl #8
    9fc0:	1e352a00 	vaddne.f32	s4, s10, s0
    9fc4:	30640000 	rsbcc	r0, r4, r0
    9fc8:	0e900000 	cdpeq	0, 9, cr0, cr0, cr0, {0}
    9fcc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    9fd0:	1d930203 	lfmne	f0, 4, [r3, #12]
    9fd4:	902b0000 	eorls	r0, fp, r0
    9fd8:	2c00000e 	stccs	0, cr0, [r0], {14}
    9fdc:	00001e43 	andeq	r1, r0, r3, asr #28
    9fe0:	001e4e2d 	andseq	r4, lr, sp, lsr #28
    9fe4:	00297d00 	eoreq	r7, r9, r0, lsl #26
    9fe8:	1e5a2d00 	cdpne	13, 5, cr2, cr10, cr0, {0}
    9fec:	299c0000 	ldmibcs	ip, {}	; <UNPREDICTABLE>
    9ff0:	662d0000 	strtvs	r0, [sp], -r0
    9ff4:	c500001e 	strgt	r0, [r0, #-30]	; 0xffffffe2
    9ff8:	00000029 	andeq	r0, r0, r9, lsr #32
    9ffc:	1fcc2e00 	svcne	0x00cc2e00
    a000:	311a0000 	tstcc	sl, r0
    a004:	0ed00000 	cdpeq	0, 13, cr0, cr0, cr0, {0}
    a008:	14010000 	strne	r0, [r1], #-0
    a00c:	2f000204 	svccs	0x00000204
    a010:	0000234b 	andeq	r2, r0, fp, asr #6
    a014:	0c034a01 			; <UNDEFINED> instruction: 0x0c034a01
    a018:	0000a301 	andeq	sl, r0, r1, lsl #6
    a01c:	00290000 	eoreq	r0, r9, r0
    a020:	002a9000 	eoreq	r9, sl, r0
    a024:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    a028:	2900001e 	stmdbcs	r0, {r1, r2, r3, r4}
    a02c:	0074706f 	rsbseq	r7, r4, pc, rrx
    a030:	18034a01 	stmdane	r3, {r0, r9, fp, lr}
    a034:	000000a3 	andeq	r0, r0, r3, lsr #1
    a038:	000029f9 	strdeq	r2, [r0], -r9
    a03c:	6c617629 	stclvs	6, cr7, [r1], #-164	; 0xffffff5c
    a040:	034a0100 	movteq	r0, #41216	; 0xa100
    a044:	00181d25 	andseq	r1, r8, r5, lsr #26
    a048:	002a8500 	eoreq	r8, sl, r0, lsl #10
    a04c:	65723000 	ldrbvs	r3, [r2, #-0]!
    a050:	4c010074 	stcmi	0, cr0, [r1], {116}	; 0x74
    a054:	00a30603 	adceq	r0, r3, r3, lsl #12
    a058:	2b3d0000 	blcs	f4a060 <__ccfg+0xf2a0b8>
    a05c:	01310000 	teqeq	r1, r0
    a060:	01000022 	tsteq	r0, r2, lsr #32
    a064:	880103cf 	stmdahi	r1, {r0, r1, r2, r3, r6, r7, r8, r9}
    a068:	31000029 	tstcc	r0, r9, lsr #32
    a06c:	0000240b 	andeq	r2, r0, fp, lsl #8
    a070:	01035801 	tsteq	r3, r1, lsl #16
    a074:	00002942 	andeq	r2, r0, r2, asr #18
    a078:	0025b731 	eoreq	fp, r5, r1, lsr r7
    a07c:	03cd0100 	biceq	r0, sp, #0, 2
    a080:	00298c01 	eoreq	r8, r9, r1, lsl #24
    a084:	29423200 	stmdbcs	r2, {r9, ip, sp}^
    a088:	296c0000 	stmdbcs	ip!, {}^	; <UNPREDICTABLE>
    a08c:	6a300000 	bvs	c0a094 <__ccfg+0xbea0ec>
    a090:	03590100 	cmpeq	r9, #0, 2
    a094:	0000a304 	andeq	sl, r0, r4, lsl #6
    a098:	002b8700 	eoreq	r8, fp, r0, lsl #14
    a09c:	33000000 	movwcc	r0, #0
    a0a0:	00002280 	andeq	r2, r0, r0, lsl #5
    a0a4:	0d030701 	stceq	7, cr0, [r3, #-4]
    a0a8:	001e7301 	andseq	r7, lr, r1, lsl #6
    a0ac:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a0b0:	06030b01 	streq	r0, [r3], -r1, lsl #22
    a0b4:	000000a3 	andeq	r0, r0, r3, lsr #1
    a0b8:	00657234 	rsbeq	r7, r5, r4, lsr r2
    a0bc:	1a030c01 	bne	cd0c8 <__ccfg+0xad120>
    a0c0:	00001e73 	andeq	r1, r0, r3, ror lr
    a0c4:	00616434 	rsbeq	r6, r1, r4, lsr r4
    a0c8:	1f030c01 	svcne	0x00030c01
    a0cc:	00001e73 	andeq	r1, r0, r3, ror lr
    a0d0:	00626434 	rsbeq	r6, r2, r4, lsr r4
    a0d4:	24030c01 	strcs	r0, [r3], #-3073	; 0xfffff3ff
    a0d8:	00001e73 	andeq	r1, r0, r3, ror lr
    a0dc:	ab041100 	blge	10e4e4 <__ccfg+0xee53c>
    a0e0:	28000016 	stmdacs	r0, {r1, r2, r4}
    a0e4:	00207401 	eoreq	r7, r0, r1, lsl #8
    a0e8:	020d0100 	andeq	r0, sp, #0, 2
    a0ec:	2de00101 	stfcse	f0, [r0, #4]!
    a0f0:	2fd00000 	svccs	0x00d00000
    a0f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a0f8:	00001efd 	strdeq	r1, [r0], -sp
    a0fc:	000c3335 	andeq	r3, ip, r5, lsr r3
    a100:	020d0100 	andeq	r0, sp, #0, 2
    a104:	0017d901 	andseq	sp, r7, r1, lsl #18
    a108:	002b9a00 	eoreq	r9, fp, r0, lsl #20
    a10c:	1fa13100 	svcne	0x00a13100
    a110:	16010000 	strne	r0, [r1], -r0
    a114:	2df40102 	ldfcse	f0, [r4, #8]!
    a118:	232e0000 			; <UNDEFINED> instruction: 0x232e0000
    a11c:	56000020 	strpl	r0, [r0], -r0, lsr #32
    a120:	3000002e 	andcc	r0, r0, lr, lsr #32
    a124:	0100000e 	tsteq	r0, lr
    a128:	2a040225 	bcs	10a9c4 <__ccfg+0xeaa1c>
    a12c:	00001ff3 	strdeq	r1, [r0], -r3
    a130:	00002e5a 	andeq	r2, r0, sl, asr lr
    a134:	00000e48 	andeq	r0, r0, r8, asr #28
    a138:	04022601 	streq	r2, [r2], #-1537	; 0xfffff9ff
    a13c:	00001eeb 	andeq	r1, r0, fp, ror #29
    a140:	000e482b 	andeq	r4, lr, fp, lsr #16
    a144:	20012d00 	andcs	r2, r1, r0, lsl #26
    a148:	2bc30000 	blcs	ff0ca150 <_estack+0xdf0c5150>
    a14c:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    a150:	00000020 	andeq	r0, r0, r0, lsr #32
    a154:	20233600 	eorcs	r3, r3, r0, lsl #12
    a158:	2ede0000 	cdpcs	0, 13, cr0, cr14, cr0, {0}
    a15c:	2ee80000 	cdpcs	0, 14, cr0, cr8, cr0, {0}
    a160:	65010000 	strvs	r0, [r1, #-0]
    a164:	28000302 	stmdacs	r0, {r1, r8, r9}
    a168:	0025fc01 	eoreq	pc, r5, r1, lsl #24
    a16c:	01ec0100 	mvneq	r0, r0, lsl #2
    a170:	2fd00106 	svccs	0x00d00106
    a174:	30400000 	subcc	r0, r0, r0
    a178:	9c010000 	stcls	0, cr0, [r1], {-0}
    a17c:	00001f62 	andeq	r1, r0, r2, ror #30
    a180:	000e7837 	andeq	r7, lr, r7, lsr r8
    a184:	001f2f00 	andseq	r2, pc, r0, lsl #30
    a188:	006a3000 	rsbeq	r3, sl, r0
    a18c:	0201fe01 	andeq	pc, r1, #1, 28
    a190:	000000a3 	andeq	r0, r0, r3, lsr #1
    a194:	00002be2 	andeq	r2, r0, r2, ror #23
    a198:	21d53800 	bicscs	r3, r5, r0, lsl #16
    a19c:	2fe40000 	svccs	0x00e40000
    a1a0:	2fee0000 	svccs	0x00ee0000
    a1a4:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    a1a8:	1f4a0201 	svcne	0x004a0201
    a1ac:	e4390000 	ldrt	r0, [r9], #-0
    a1b0:	00000021 	andeq	r0, r0, r1, lsr #32
    a1b4:	0021f23a 	eoreq	pc, r1, sl, lsr r2	; <UNPREDICTABLE>
    a1b8:	002fee00 	eoreq	lr, pc, r0, lsl #28
    a1bc:	000e6000 	andeq	r6, lr, r0
    a1c0:	01fb0100 	mvnseq	r0, r0, lsl #2
    a1c4:	22003902 	andcs	r3, r0, #32768	; 0x8000
    a1c8:	00000000 	andeq	r0, r0, r0
    a1cc:	00243b3b 	eoreq	r3, r4, fp, lsr fp
    a1d0:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    a1d4:	002d100d 	eoreq	r1, sp, sp
    a1d8:	002de000 	eoreq	lr, sp, r0
    a1dc:	cc9c0100 	ldfgts	f0, [ip], {0}
    a1e0:	3000001f 	andcc	r0, r0, pc, lsl r0
    a1e4:	01006264 	tsteq	r0, r4, ror #4
    a1e8:	731a01b7 	tstvc	sl, #-1073741779	; 0xc000002d
    a1ec:	f500001e 			; <UNDEFINED> instruction: 0xf500001e
    a1f0:	3400002b 	strcc	r0, [r0], #-43	; 0xffffffd5
    a1f4:	b8010069 	stmdalt	r1, {r0, r3, r5, r6}
    a1f8:	00a30601 	adceq	r0, r3, r1, lsl #12
    a1fc:	70300000 	eorsvc	r0, r0, r0
    a200:	b801006c 	stmdalt	r1, {r2, r3, r5, r6}
    a204:	00a30901 	adceq	r0, r3, r1, lsl #18
    a208:	2c370000 	ldccs	0, cr0, [r7], #-0
    a20c:	6e300000 	cdpvs	0, 3, cr0, cr0, cr0, {0}
    a210:	b8010072 	stmdalt	r1, {r1, r4, r5, r6}
    a214:	00a30d01 	adceq	r0, r3, r1, lsl #26
    a218:	2c4a0000 	marcs	acc0, r0, sl
    a21c:	0d3a0000 	ldceq	0, cr0, [sl, #-0]
    a220:	10000022 	andne	r0, r0, r2, lsr #32
    a224:	0000002d 	andeq	r0, r0, sp, lsr #32
    a228:	0100000e 	tsteq	r0, lr
    a22c:	390201c1 	stmdbcc	r2, {r0, r6, r7, r8}
    a230:	0000221b 	andeq	r2, r0, fp, lsl r2
    a234:	803c0000 	eorshi	r0, ip, r0
    a238:	01000023 	tsteq	r0, r3, lsr #32
    a23c:	010d01ab 	smlatbeq	sp, fp, r1, r0
    a240:	0023963d 	eoreq	r9, r3, sp, lsr r6
    a244:	01a00100 	lsleq	r0, r0, #2
    a248:	0028e00d 	eoreq	lr, r8, sp
    a24c:	00290000 	eoreq	r0, r9, r0
    a250:	3c9c0100 	ldfccs	f0, [ip], {0}
    a254:	00002435 	andeq	r2, r0, r5, lsr r4
    a258:	0d019501 	cfstr32eq	mvfx9, [r1, #-4]
    a25c:	22433301 	subcs	r3, r3, #67108864	; 0x4000000
    a260:	80010000 	andhi	r0, r1, r0
    a264:	19010d01 	stmdbne	r1, {r0, r8, sl, fp}
    a268:	34000020 	strcc	r0, [r0], #-32	; 0xffffffe0
    a26c:	01006572 	tsteq	r0, r2, ror r5
    a270:	731a0184 	tstvc	sl, #132, 2	; 0x21
    a274:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a278:	85010069 	strhi	r0, [r1, #-105]	; 0xffffff97
    a27c:	00a30601 	adceq	r0, r3, r1, lsl #12
    a280:	3c000000 	stccc	0, cr0, [r0], {-0}
    a284:	000022da 	ldrdeq	r2, [r0], -sl
    a288:	0d016101 	stfeqs	f6, [r1, #-4]
    a28c:	1f313e01 	svcne	0x00313e01
    a290:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    a294:	073f010d 	ldreq	r0, [pc, -sp, lsl #2]!
    a298:	01000020 	tsteq	r0, r0, lsr #32
    a29c:	01010de2 	smlatteq	r1, r2, sp, r0
    a2a0:	0000205f 	andeq	r2, r0, pc, asr r0
    a2a4:	646d6340 	strbtvs	r6, [sp], #-832	; 0xfffffcc0
    a2a8:	26e20100 	strbtcs	r0, [r2], r0, lsl #2
    a2ac:	00000bc0 	andeq	r0, r0, r0, asr #23
    a2b0:	0026ff41 	eoreq	pc, r6, r1, asr #30
    a2b4:	31e20100 	mvncc	r0, r0, lsl #2
    a2b8:	00001800 	andeq	r1, r0, r0, lsl #16
    a2bc:	00072241 	andeq	r2, r7, r1, asr #4
    a2c0:	3ee20100 	cdpcc	1, 14, cr0, cr2, cr0, {0}
    a2c4:	00001800 	andeq	r1, r0, r0, lsl #16
    a2c8:	1f043f00 	svcne	0x00043f00
    a2cc:	c5010000 	strgt	r0, [r1, #-0]
    a2d0:	9201010d 	andls	r0, r1, #1073741827	; 0x40000003
    a2d4:	40000020 	andmi	r0, r0, r0, lsr #32
    a2d8:	00646d63 	rsbeq	r6, r4, r3, ror #26
    a2dc:	001ec501 	andseq	ip, lr, r1, lsl #10
    a2e0:	42000018 	andmi	r0, r0, #24
    a2e4:	00736572 	rsbseq	r6, r3, r2, ror r5
    a2e8:	a306ca01 	movwge	ip, #27137	; 0x6a01
    a2ec:	42000000 	andmi	r0, r0, #0
    a2f0:	00746e63 	rsbseq	r6, r4, r3, ror #28
    a2f4:	a306cd01 	movwge	ip, #27905	; 0x6d01
    a2f8:	00000000 	andeq	r0, r0, r0
    a2fc:	0012ca43 	andseq	ip, r2, r3, asr #20
    a300:	01540300 	cmpeq	r4, r0, lsl #6
    a304:	af030101 	svcge	0x00030101
    a308:	44000020 	strmi	r0, [r0], #-32	; 0xffffffe0
    a30c:	00001127 	andeq	r1, r0, r7, lsr #2
    a310:	19015403 	stmdbne	r1, {r0, r1, sl, ip, lr}
    a314:	0000007f 	andeq	r0, r0, pc, ror r0
    a318:	13d74300 	bicsne	r4, r7, #0, 6
    a31c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    a320:	03010101 	movweq	r0, #4353	; 0x1101
    a324:	000020cc 	andeq	r2, r0, ip, asr #1
    a328:	00112744 	andseq	r2, r1, r4, asr #14
    a32c:	011e0300 	tsteq	lr, r0, lsl #6
    a330:	00007f17 	andeq	r7, r0, r7, lsl pc
    a334:	9d430000 	stclls	0, cr0, [r3, #-0]
    a338:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    a33c:	011501ea 	tsteq	r5, sl, ror #3
    a340:	00216103 	eoreq	r6, r1, r3, lsl #2
    a344:	53703400 	cmnpl	r0, #0, 8
    a348:	01f20500 	mvnseq	r0, r0, lsl #10
    a34c:	00216114 	eoreq	r6, r1, r4, lsl r1
    a350:	44703400 	ldrbtmi	r3, [r0], #-1024	; 0xfffffc00
    a354:	01f30500 	mvnseq	r0, r0, lsl #10
    a358:	0021671c 	eoreq	r6, r1, ip, lsl r7
    a35c:	31743400 	cmncc	r4, r0, lsl #8
    a360:	01f40500 	mvnseq	r0, r0, lsl #10
    a364:	00007f0d 	andeq	r7, r0, sp, lsl #30
    a368:	32743400 	rsbscc	r3, r4, #0, 8
    a36c:	01f40500 	mvnseq	r0, r0, lsl #10
    a370:	00007f11 	andeq	r7, r0, r1, lsl pc
    a374:	33743400 	cmncc	r4, #0, 8
    a378:	01f40500 	mvnseq	r0, r0, lsl #10
    a37c:	00007f15 	andeq	r7, r0, r5, lsl pc
    a380:	34743400 	ldrbtcc	r3, [r4], #-1024	; 0xfffffc00
    a384:	01f40500 	mvnseq	r0, r0, lsl #10
    a388:	00007f19 	andeq	r7, r0, r9, lsl pc
    a38c:	35743400 	ldrbcc	r3, [r4, #-1024]!	; 0xfffffc00
    a390:	01f40500 	mvnseq	r0, r0, lsl #10
    a394:	00007f1d 	andeq	r7, r0, sp, lsl pc
    a398:	36743400 	ldrbtcc	r3, [r4], -r0, lsl #8
    a39c:	01f40500 	mvnseq	r0, r0, lsl #10
    a3a0:	00007f21 	andeq	r7, r0, r1, lsr #30
    a3a4:	37743400 	ldrbcc	r3, [r4, -r0, lsl #8]!
    a3a8:	01f40500 	mvnseq	r0, r0, lsl #10
    a3ac:	00007f25 	andeq	r7, r0, r5, lsr #30
    a3b0:	38743400 	ldmdacc	r4!, {sl, ip, sp}^
    a3b4:	01f40500 	mvnseq	r0, r0, lsl #10
    a3b8:	00007f29 	andeq	r7, r0, r9, lsr #30
    a3bc:	25d72700 	ldrbcs	r2, [r7, #1792]	; 0x700
    a3c0:	f5050000 			; <UNDEFINED> instruction: 0xf5050000
    a3c4:	007f0d01 	rsbseq	r0, pc, r1, lsl #26
    a3c8:	11000000 	mrsne	r0, (UNDEF: 0)
    a3cc:	00008b04 	andeq	r8, r0, r4, lsl #22
    a3d0:	97041100 	strls	r1, [r4, -r0, lsl #2]
    a3d4:	45000000 	strmi	r0, [r0, #-0]
    a3d8:	000023e3 	andeq	r2, r0, r3, ror #7
    a3dc:	15012f04 	strne	r2, [r1, #-3844]	; 0xfffff0fc
    a3e0:	a9450301 	stmdbge	r5, {r0, r8, r9}^
    a3e4:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    a3e8:	01150122 	tsteq	r5, r2, lsr #2
    a3ec:	1f564303 	svcne	0x00564303
    a3f0:	11040000 	mrsne	r0, (UNDEF: 4)
    a3f4:	03011501 	movweq	r1, #5377	; 0x1501
    a3f8:	000021ad 	andeq	r2, r0, sp, lsr #3
    a3fc:	00266227 	eoreq	r6, r6, r7, lsr #4
    a400:	01130400 	tsteq	r3, r0, lsl #8
    a404:	0009840d 	andeq	r8, r9, sp, lsl #8
    a408:	21202700 			; <UNDEFINED> instruction: 0x21202700
    a40c:	14040000 	strne	r0, [r4], #-0
    a410:	0bc60e01 	bleq	ff18dc1c <_estack+0xdf188c1c>
    a414:	45000000 	strmi	r0, [r0, #-0]
    a418:	0000270d 	andeq	r2, r0, sp, lsl #14
    a41c:	15010d04 	strne	r0, [r1, #-3332]	; 0xfffff2fc
    a420:	a6430301 	strbge	r0, [r3], -r1, lsl #6
    a424:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    a428:	01150104 	tsteq	r5, r4, lsl #2
    a42c:	0021d503 	eoreq	sp, r1, r3, lsl #10
    a430:	212a2700 			; <UNDEFINED> instruction: 0x212a2700
    a434:	06040000 	streq	r0, [r4], -r0
    a438:	0bc60e01 	bleq	ff18dc44 <_estack+0xdf188c44>
    a43c:	43000000 	movwmi	r0, #0
    a440:	00002387 	andeq	r2, r0, r7, lsl #7
    a444:	01011d02 	tsteq	r1, r2, lsl #26
    a448:	21f20301 	mvnscs	r0, r1, lsl #6
    a44c:	49440000 	stmdbmi	r4, {}^	; <UNPREDICTABLE>
    a450:	02000022 	andeq	r0, r0, #34	; 0x22
    a454:	7f19011d 	svcvc	0x0019011d
    a458:	00000000 	andeq	r0, r0, r0
    a45c:	0021343f 	eoreq	r3, r1, pc, lsr r4
    a460:	01f70200 	mvnseq	r0, r0, lsl #4
    a464:	220d0301 	andcs	r0, sp, #67108864	; 0x4000000
    a468:	49410000 	stmdbmi	r1, {}^	; <UNPREDICTABLE>
    a46c:	02000022 	andeq	r0, r0, #34	; 0x22
    a470:	007f1bf7 	ldrshteq	r1, [pc], #-183
    a474:	3f000000 	svccc	0x00000000
    a478:	00002168 	andeq	r2, r0, r8, ror #2
    a47c:	0101aa02 	tsteq	r1, r2, lsl #20
    a480:	00222803 	eoreq	r2, r2, r3, lsl #16
    a484:	22494100 	subcs	r4, r9, #0, 2
    a488:	aa020000 	bge	8a490 <__ccfg+0x6a4e8>
    a48c:	00007f1b 	andeq	r7, r0, fp, lsl pc
    a490:	21460000 	mrscs	r0, (UNDEF: 70)
    a494:	02000025 	andeq	r0, r0, #37	; 0x25
    a498:	0301019c 	movweq	r0, #4508	; 0x119c
    a49c:	00276046 	eoreq	r6, r7, r6, asr #32
    a4a0:	01790200 	cmneq	r9, r0, lsl #4
    a4a4:	5f470301 	svcpl	0x00470301
    a4a8:	90000020 	andls	r0, r0, r0, lsr #32
    a4ac:	d800002a 	stmdale	r0, {r1, r3, r5}
    a4b0:	0100002a 	tsteq	r0, sl, lsr #32
    a4b4:	00228b9c 	mlaeq	r2, ip, fp, r8
    a4b8:	206d4800 	rsbcs	r4, sp, r0, lsl #16
    a4bc:	2c680000 	stclcs	0, cr0, [r8], #-0
    a4c0:	792d0000 	pushvc	{}	; <UNPREDICTABLE>
    a4c4:	86000020 	strhi	r0, [r0], -r0, lsr #32
    a4c8:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a4cc:	00002085 	andeq	r2, r0, r5, lsl #1
    a4d0:	00205f49 	eoreq	r5, r0, r9, asr #30
    a4d4:	002aa600 	eoreq	sl, sl, r0, lsl #12
    a4d8:	002aa800 	eoreq	sl, sl, r0, lsl #16
    a4dc:	0dc50100 	stfeqe	f0, [r5]
    a4e0:	00206d48 	eoreq	r6, r0, r8, asr #26
    a4e4:	002cba00 	eoreq	fp, ip, r0, lsl #20
    a4e8:	20792c00 	rsbscs	r2, r9, r0, lsl #24
    a4ec:	852c0000 	strhi	r0, [ip, #-0]!
    a4f0:	00000020 	andeq	r0, r0, r0, lsr #32
    a4f4:	1fe94700 	svcne	0x00e94700
    a4f8:	2ad80000 	bcs	ff60a500 <_estack+0xdf605500>
    a4fc:	2afc0000 	bcs	fff0a504 <_estack+0xdff05504>
    a500:	9c010000 	stcls	0, cr0, [r1], {-0}
    a504:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    a508:	001fe936 	andseq	lr, pc, r6, lsr r9	; <UNPREDICTABLE>
    a50c:	002ae200 	eoreq	lr, sl, r0, lsl #4
    a510:	002af000 	eoreq	pc, sl, r0
    a514:	01950100 	orrseq	r0, r5, r0, lsl #2
    a518:	1947000d 	stmdbne	r7, {r0, r2, r3}^
    a51c:	fc000020 	stc2	0, cr0, [r0], {32}
    a520:	5800002a 	stmdapl	r0, {r1, r3, r5}
    a524:	0100002b 	tsteq	r0, fp, lsr #32
    a528:	0023199c 	mlaeq	r3, ip, r9, r1
    a52c:	20194a00 	andscs	r4, r9, r0, lsl #20
    a530:	2b060000 	blcs	18a538 <__ccfg+0x16a590>
    a534:	2b420000 	blcs	108a53c <__ccfg+0x106a594>
    a538:	61010000 	mrsvs	r0, (UNDEF: 1)
    a53c:	282e0d01 	stmdacs	lr!, {r0, r8, sl, fp}
    a540:	06000022 	streq	r0, [r0], -r2, lsr #32
    a544:	7000002b 	andvc	r0, r0, fp, lsr #32
    a548:	0100000d 	tsteq	r0, sp
    a54c:	3802016f 	stmdacc	r2, {r0, r1, r2, r3, r5, r6, r8}
    a550:	00002092 	muleq	r0, r2, r0
    a554:	00002b2e 	andeq	r2, r0, lr, lsr #22
    a558:	00002b36 	andeq	r2, r0, r6, lsr fp
    a55c:	02017a01 	andeq	r7, r1, #4096	; 0x1000
    a560:	00002300 	andeq	r2, r0, r0, lsl #6
    a564:	0020a139 	eoreq	sl, r0, r9, lsr r1
    a568:	924a0000 	subls	r0, sl, #0
    a56c:	36000020 	strcc	r0, [r0], -r0, lsr #32
    a570:	3a00002b 	bcc	a624 <__exidx_end+0x48a4>
    a574:	0100002b 	tsteq	r0, fp, lsr #32
    a578:	3902017a 	stmdbcc	r2, {r1, r3, r4, r5, r6, r8}
    a57c:	000020a1 	andeq	r2, r0, r1, lsr #1
    a580:	47000000 	strmi	r0, [r0, -r0]
    a584:	0000202c 	andeq	r2, r0, ip, lsr #32
    a588:	00002b58 	andeq	r2, r0, r8, asr fp
    a58c:	00002b90 	muleq	r0, r0, fp
    a590:	23449c01 	movtcs	r9, #19457	; 0x4c01
    a594:	3a480000 	bcc	120a59c <__ccfg+0x11ea5f4>
    a598:	cd000020 	stcgt	0, cr0, [r0, #-128]	; 0xffffff80
    a59c:	4800002c 	stmdami	r0, {r2, r3, r5}
    a5a0:	00002046 	andeq	r2, r0, r6, asr #32
    a5a4:	00002ceb 	andeq	r2, r0, fp, ror #25
    a5a8:	00205239 	eoreq	r5, r0, r9, lsr r2
    a5ac:	234b0000 	movtcs	r0, #45056	; 0xb000
    a5b0:	90000020 	andls	r0, r0, r0, lsr #32
    a5b4:	1000002b 	andne	r0, r0, fp, lsr #32
    a5b8:	0100002d 	tsteq	r0, sp, lsr #32
    a5bc:	20af2a9c 	umlalcs	r2, pc, ip, sl	; <UNPREDICTABLE>
    a5c0:	2b900000 	blcs	fe40a5c8 <_estack+0xde4055c8>
    a5c4:	0d900000 	ldceq	0, cr0, [r0]
    a5c8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a5cc:	236e0201 	cmncs	lr, #268435456	; 0x10000000
    a5d0:	be390000 	cdplt	0, 3, cr0, cr9, cr0, {0}
    a5d4:	00000020 	andeq	r0, r0, r0, lsr #32
    a5d8:	0020af38 	eoreq	sl, r0, r8, lsr pc
    a5dc:	002b9c00 	eoreq	r9, fp, r0, lsl #24
    a5e0:	002ba000 	eoreq	sl, fp, r0
    a5e4:	01080100 	mrseq	r0, (UNDEF: 24)
    a5e8:	00238902 	eoreq	r8, r3, r2, lsl #18
    a5ec:	20be3900 	adcscs	r3, lr, r0, lsl #18
    a5f0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    a5f4:	00002232 	andeq	r2, r0, r2, lsr r2
    a5f8:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
    a5fc:	00000da8 	andeq	r0, r0, r8, lsr #27
    a600:	02011a01 	andeq	r1, r1, #4096	; 0x1000
    a604:	00216d2a 	eoreq	r6, r1, sl, lsr #26
    a608:	002bcc00 	eoreq	ip, fp, r0, lsl #24
    a60c:	000dc000 	andeq	ip, sp, r0
    a610:	01210100 			; <UNDEFINED> instruction: 0x01210100
    a614:	00240b02 	eoreq	r0, r4, r2, lsl #22
    a618:	21783a00 	cmncs	r8, r0, lsl #20
    a61c:	2bcc0000 	blcs	ff30a624 <_estack+0xdf305624>
    a620:	0dc00000 	stcleq	0, cr0, [r0]
    a624:	31040000 	mrscc	r0, (UNDEF: 4)
    a628:	b8380401 	ldmdalt	r8!, {r0, sl}
    a62c:	cc000021 	stcgt	0, cr0, [r0], {33}	; 0x21
    a630:	d800002b 	stmdale	r0, {r0, r1, r3, r5}
    a634:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    a638:	df040125 	svcle	0x00040125
    a63c:	4c000023 	stcmi	0, cr0, [r0], {35}	; 0x23
    a640:	000021c7 	andeq	r2, r0, r7, asr #3
    a644:	2100041c 	tstcs	r0, ip, lsl r4
    a648:	21833a00 	orrcs	r3, r3, r0, lsl #20
    a64c:	2bd80000 	blcs	ff60a654 <_estack+0xdf605654>
    a650:	0dc80000 	stcleq	0, cr0, [r8]
    a654:	26040000 	strcs	r0, [r4], -r0
    a658:	c82b0401 	stmdagt	fp!, {r0, sl}
    a65c:	4c00000d 	stcmi	0, cr0, [r0], {13}
    a660:	00002192 	muleq	r0, r2, r1
    a664:	21000340 	tstcs	r0, r0, asr #6
    a668:	00219f4c 	eoreq	r9, r1, ip, asr #30
    a66c:	0003bc00 	andeq	fp, r3, r0, lsl #24
    a670:	00000021 	andeq	r0, r0, r1, lsr #32
    a674:	20cc3a00 	sbccs	r3, ip, r0, lsl #20
    a678:	2bdc0000 	blcs	ff70a680 <_estack+0xdf705680>
    a67c:	0de00000 	stcleq	0, cr0, [r0]
    a680:	22010000 	andcs	r0, r1, #0
    a684:	e02b0201 	eor	r0, fp, r1, lsl #4
    a688:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    a68c:	000020db 	ldrdeq	r2, [r0], -fp
    a690:	00002d09 	andeq	r2, r0, r9, lsl #26
    a694:	0020e72d 	eoreq	lr, r0, sp, lsr #14
    a698:	002d1c00 	eoreq	r1, sp, r0, lsl #24
    a69c:	20f32c00 	rscscs	r2, r3, r0, lsl #24
    a6a0:	ff2d0000 			; <UNDEFINED> instruction: 0xff2d0000
    a6a4:	3a000020 	bcc	a72c <__exidx_end+0x49ac>
    a6a8:	2c00002d 	stccs	0, cr0, [r0], {45}	; 0x2d
    a6ac:	0000210b 	andeq	r2, r0, fp, lsl #2
    a6b0:	0021172d 	eoreq	r1, r1, sp, lsr #14
    a6b4:	002d4d00 	eoreq	r4, sp, r0, lsl #26
    a6b8:	21232c00 			; <UNDEFINED> instruction: 0x21232c00
    a6bc:	2f2d0000 	svccs	0x002d0000
    a6c0:	60000021 	andvs	r0, r0, r1, lsr #32
    a6c4:	2d00002d 	stccs	0, cr0, [r0, #-180]	; 0xffffff4c
    a6c8:	0000213b 	andeq	r2, r0, fp, lsr r1
    a6cc:	00002d73 	andeq	r2, r0, r3, ror sp
    a6d0:	0021472d 	eoreq	r4, r1, sp, lsr #14
    a6d4:	002d9e00 	eoreq	r9, sp, r0, lsl #28
    a6d8:	21532c00 	cmpcs	r3, r0, lsl #24
    a6dc:	00000000 	andeq	r0, r0, r0
    a6e0:	07310000 	ldreq	r0, [r1, -r0]!
    a6e4:	00030000 	andeq	r0, r3, r0
    a6e8:	000025f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a6ec:	00ac0104 	adceq	r0, ip, r4, lsl #2
    a6f0:	7b0c0000 	blvc	30a6f8 <__ccfg+0x2ea750>
    a6f4:	10000027 	andne	r0, r0, r7, lsr #32
    a6f8:	4800000e 	stmdami	r0, {r1, r2, r3}
    a6fc:	0000000f 	andeq	r0, r0, pc
    a700:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    a704:	02000064 	andeq	r0, r0, #100	; 0x64
    a708:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    a70c:	02020000 	andeq	r0, r2, #0
    a710:	000a6b05 	andeq	r6, sl, r5, lsl #22
    a714:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a718:	000007fd 	strdeq	r0, [r0], -sp
    a71c:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    a720:	03000007 	movweq	r0, #7
    a724:	00002a22 	andeq	r2, r0, r2, lsr #20
    a728:	4d172e02 	ldcmi	14, cr2, [r7, #-8]
    a72c:	02000000 	andeq	r0, r0, #0
    a730:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    a734:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    a738:	0200002e 	andeq	r0, r0, #46	; 0x2e
    a73c:	00601c31 	rsbeq	r1, r0, r1, lsr ip
    a740:	02020000 	andeq	r0, r2, #0
    a744:	000d6c07 	andeq	r6, sp, r7, lsl #24
    a748:	29ba0300 	ldmibcs	sl!, {r8, r9}
    a74c:	34020000 	strcc	r0, [r2], #-0
    a750:	0000731b 	andeq	r7, r0, fp, lsl r3
    a754:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a758:	00000426 	andeq	r0, r0, r6, lsr #8
    a75c:	21070802 	tstcs	r7, r2, lsl #16
    a760:	04000004 	streq	r0, [r0], #-4
    a764:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a768:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a76c:	00042b07 	andeq	r2, r4, r7, lsl #22
    a770:	051e0300 	ldreq	r0, [lr, #-768]	; 0xfffffd00
    a774:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a778:	00009b1b 	andeq	r9, r0, fp, lsl fp
    a77c:	0b900500 	bleq	fe40bb84 <_estack+0xde406b84>
    a780:	0a040000 	beq	10a788 <__ccfg+0xea7e0>
    a784:	0000b300 	andeq	fp, r0, r0, lsl #6
    a788:	086d0600 	stmdaeq	sp!, {r9, sl}^
    a78c:	00b30000 	adcseq	r0, r3, r0
    a790:	01000000 	mrseq	r0, (UNDEF: 0)
    a794:	03040700 	movweq	r0, #18176	; 0x4700
    a798:	00000b92 	muleq	r0, r2, fp
    a79c:	8f186303 	svchi	0x00186303
    a7a0:	03000000 	movweq	r0, #0
    a7a4:	00002901 	andeq	r2, r0, r1, lsl #18
    a7a8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    a7ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a7b0:	000000c1 	andeq	r0, r0, r1, asr #1
    a7b4:	001dc803 	andseq	ip, sp, r3, lsl #16
    a7b8:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
    a7bc:	00000041 	andeq	r0, r0, r1, asr #32
    a7c0:	0000d209 	andeq	sp, r0, r9, lsl #4
    a7c4:	29530300 	ldmdbcs	r3, {r8, r9}^
    a7c8:	2c040000 	stccs	0, cr0, [r4], {-0}
    a7cc:	00006712 	andeq	r6, r0, r2, lsl r7
    a7d0:	00e30800 	rsceq	r0, r3, r0, lsl #16
    a7d4:	46030000 	strmi	r0, [r3], -r0
    a7d8:	04000006 	streq	r0, [r0], #-6
    a7dc:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    a7e0:	b4030000 	strlt	r0, [r3], #-0
    a7e4:	0400000b 	streq	r0, [r0], #-11
    a7e8:	010c0f2e 	tsteq	ip, lr, lsr #30
    a7ec:	040a0000 	streq	r0, [sl], #-0
    a7f0:	000000c1 	andeq	r0, r0, r1, asr #1
    a7f4:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    a7f8:	0001a009 	andeq	sl, r1, r9
    a7fc:	00340c00 	eorseq	r0, r4, r0, lsl #24
    a800:	34040000 	strcc	r0, [r4], #-0
    a804:	0000d207 	andeq	sp, r0, r7, lsl #4
    a808:	07010100 	streq	r0, [r1, -r0, lsl #2]
    a80c:	064c0c00 	strbeq	r0, [ip], -r0, lsl #24
    a810:	35040000 	strcc	r0, [r4, #-0]
    a814:	0000d203 	andeq	sp, r0, r3, lsl #4
    a818:	06010100 	streq	r0, [r1], -r0, lsl #2
    a81c:	02e70c00 	rsceq	r0, r7, #0, 24
    a820:	36040000 	strcc	r0, [r4], -r0
    a824:	0000d203 	andeq	sp, r0, r3, lsl #4
    a828:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    a82c:	06b70c00 	ldrteq	r0, [r7], r0, lsl #24
    a830:	37040000 	strcc	r0, [r4, -r0]
    a834:	0000d203 	andeq	sp, r0, r3, lsl #4
    a838:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    a83c:	0a9f0c00 	beq	fe7cd844 <_estack+0xde7c8844>
    a840:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    a844:	0000d203 	andeq	sp, r0, r3, lsl #4
    a848:	00040100 	andeq	r0, r4, r0, lsl #2
    a84c:	065b0d00 	ldrbeq	r0, [fp], -r0, lsl #26
    a850:	3a040000 	bcc	10a858 <__ccfg+0xea8b0>
    a854:	0000d207 	andeq	sp, r0, r7, lsl #4
    a858:	fb0d0100 	blx	34ac62 <__ccfg+0x32acba>
    a85c:	04000008 	streq	r0, [r0], #-8
    a860:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    a864:	0d020000 	stceq	0, cr0, [r2, #-0]
    a868:	00000f40 	andeq	r0, r0, r0, asr #30
    a86c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    a870:	03000000 	movweq	r0, #0
    a874:	0009130d 	andeq	r1, r9, sp, lsl #6
    a878:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    a87c:	000000e3 	andeq	r0, r0, r3, ror #1
    a880:	1d030004 	stcne	0, cr0, [r3, #-16]
    a884:	04000003 	streq	r0, [r0], #-3
    a888:	01120341 	tsteq	r2, r1, asr #6
    a88c:	a0090000 	andge	r0, r9, r0
    a890:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a894:	000006be 			; <UNDEFINED> instruction: 0x000006be
    a898:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    a89c:	01000001 	tsteq	r0, r1
    a8a0:	01a00e01 	lsleq	r0, r1, #28
    a8a4:	45040000 	strmi	r0, [r4, #-0]
    a8a8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    a8ac:	0a010100 	beq	4acb4 <__ccfg+0x2ad0c>
    a8b0:	0001d304 	andeq	sp, r1, r4, lsl #6
    a8b4:	08010200 	stmdaeq	r1, {r9}
    a8b8:	00000c64 	andeq	r0, r0, r4, ror #24
    a8bc:	0001d308 	andeq	sp, r1, r8, lsl #6
    a8c0:	03260e00 			; <UNDEFINED> instruction: 0x03260e00
    a8c4:	45040000 	strmi	r0, [r4, #-0]
    a8c8:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    a8cc:	0b010100 	bleq	4acd4 <__ccfg+0x2ad2c>
    a8d0:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    a8d4:	0000021e 	andeq	r0, r0, lr, lsl r2
    a8d8:	000cd80d 	andeq	sp, ip, sp, lsl #16
    a8dc:	0b900500 	bleq	fe40bce4 <_estack+0xde406ce4>
    a8e0:	00000067 	andeq	r0, r0, r7, rrx
    a8e4:	107b0d00 	rsbsne	r0, fp, r0, lsl #26
    a8e8:	91050000 	mrsls	r0, (UNDEF: 5)
    a8ec:	0000c107 	andeq	ip, r0, r7, lsl #2
    a8f0:	c50d0400 	strgt	r0, [sp, #-1024]	; 0xfffffc00
    a8f4:	05000001 	streq	r0, [r0, #-1]
    a8f8:	00de1092 	smullseq	r1, lr, r2, r0
    a8fc:	00060000 	andeq	r0, r6, r0
    a900:	000ccc03 	andeq	ip, ip, r3, lsl #24
    a904:	03930500 	orrseq	r0, r3, #0, 10
    a908:	000001ed 	andeq	r0, r0, sp, ror #3
    a90c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    a910:	00023500 	andeq	r3, r2, r0, lsl #10
    a914:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    a918:	0000093d 	andeq	r0, r0, sp, lsr r9
    a91c:	2a0f9905 	bcs	3f0d38 <__ccfg+0x3d0d90>
    a920:	01000002 	tsteq	r0, r2
    a924:	06010b01 	streq	r0, [r1], -r1, lsl #22
    a928:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    a92c:	1a0c0000 	bne	30a934 <__ccfg+0x2ea98c>
    a930:	06000009 	streq	r0, [r0], -r9
    a934:	00d20793 	smullseq	r0, r2, r3, r7
    a938:	07010000 	streq	r0, [r1, -r0]
    a93c:	cc0c0001 	stcgt	0, cr0, [ip], {1}
    a940:	06000005 	streq	r0, [r0], -r5
    a944:	00d20394 	smullseq	r0, r2, r4, r3
    a948:	01010000 	mrseq	r0, (UNDEF: 1)
    a94c:	03000000 	movweq	r0, #0
    a950:	00000aab 	andeq	r0, r0, fp, lsr #21
    a954:	43039606 	movwmi	r9, #13830	; 0x3606
    a958:	08000002 	stmdaeq	r0, {r1}
    a95c:	0000026d 	andeq	r0, r0, sp, ror #4
    a960:	0002790f 	andeq	r7, r2, pc, lsl #18
    a964:	00028900 	andeq	r8, r2, r0, lsl #18
    a968:	08001000 	stmdaeq	r0, {ip}
    a96c:	0000027e 	andeq	r0, r0, lr, ror r2
    a970:	0003aa0e 	andeq	sl, r3, lr, lsl #20
    a974:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    a978:	00000289 	andeq	r0, r0, r9, lsl #5
    a97c:	cd0f0101 	stfgts	f0, [pc, #-4]	; a980 <__exidx_end+0x4c00>
    a980:	a7000000 	strge	r0, [r0, -r0]
    a984:	10000002 	andne	r0, r0, r2
    a988:	029c0800 	addseq	r0, ip, #0, 16
    a98c:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    a990:	07000006 	streq	r0, [r0, -r6]
    a994:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    a998:	01010000 	mrseq	r0, (UNDEF: 1)
    a99c:	0008dd0e 	andeq	sp, r8, lr, lsl #26
    a9a0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    a9a4:	000000e3 	andeq	r0, r0, r3, ror #1
    a9a8:	72110101 	andsvc	r0, r1, #1073741824	; 0x40000000
    a9ac:	0800000c 	stmdaeq	r0, {r2, r3}
    a9b0:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    a9b4:	0a000002 	beq	a9c4 <__exidx_end+0x4c44>
    a9b8:	0002db04 	andeq	sp, r2, r4, lsl #22
    a9bc:	e7011200 	str	r1, [r1, -r0, lsl #4]
    a9c0:	13000002 	movwne	r0, #2
    a9c4:	000000c1 	andeq	r0, r0, r1, asr #1
    a9c8:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    a9cc:	02f20000 	rscseq	r0, r2, #0
    a9d0:	00100000 	andseq	r0, r0, r0
    a9d4:	0002e708 	andeq	lr, r2, r8, lsl #14
    a9d8:	09e61400 	stmibeq	r6!, {sl, ip}^
    a9dc:	7f080000 	svcvc	0x00080000
    a9e0:	02f21301 	rscseq	r1, r2, #67108864	; 0x4000000
    a9e4:	01010000 	mrseq	r0, (UNDEF: 1)
    a9e8:	00039614 	andeq	r9, r3, r4, lsl r6
    a9ec:	01820800 	orreq	r0, r2, r0, lsl #16
    a9f0:	0000ef14 	andeq	lr, r0, r4, lsl pc
    a9f4:	0b010100 	bleq	4adfc <__ccfg+0x2ae54>
    a9f8:	09080904 	stmdbeq	r8, {r2, r8, fp}
    a9fc:	00000339 	andeq	r0, r0, r9, lsr r3
    aa00:	0001cb0d 	andeq	ip, r1, sp, lsl #22
    aa04:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    aa08:	000000c1 	andeq	r0, r0, r1, asr #1
    aa0c:	0ca20d00 	stceq	13, cr0, [r2]
    aa10:	10090000 	andne	r0, r9, r0
    aa14:	0000c103 	andeq	ip, r0, r3, lsl #2
    aa18:	03000200 	movweq	r0, #512	; 0x200
    aa1c:	00000d7f 	andeq	r0, r0, pc, ror sp
    aa20:	15031109 	strne	r1, [r3, #-265]	; 0xfffffef7
    aa24:	0b000003 	bleq	aa38 <__exidx_end+0x4cb8>
    aa28:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    aa2c:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    aa30:	0004ac0d 	andeq	sl, r4, sp, lsl #24
    aa34:	08170900 	ldmdaeq	r7, {r8, fp}
    aa38:	000003d1 	ldrdeq	r0, [r0], -r1
    aa3c:	090b0d00 	stmdbeq	fp, {r8, sl, fp}
    aa40:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    aa44:	0003ec08 	andeq	lr, r3, r8, lsl #24
    aa48:	c60d0400 	strgt	r0, [sp], -r0, lsl #8
    aa4c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    aa50:	04220819 	strteq	r0, [r2], #-2073	; 0xfffff7e7
    aa54:	0d080000 	stceq	0, cr0, [r8, #-0]
    aa58:	00000c9a 	muleq	r0, sl, ip
    aa5c:	3d081a09 	vstrcc	s2, [r8, #-36]	; 0xffffffdc
    aa60:	0c000004 	stceq	0, cr0, [r0], {4}
    aa64:	0009620d 	andeq	r6, r9, sp, lsl #4
    aa68:	081b0900 	ldmdaeq	fp, {r8, fp}
    aa6c:	00000453 	andeq	r0, r0, r3, asr r4
    aa70:	0a630d10 	beq	18cdeb8 <__ccfg+0x18adf10>
    aa74:	1c090000 	stcne	0, cr0, [r9], {-0}
    aa78:	00045308 	andeq	r5, r4, r8, lsl #6
    aa7c:	ae0d1400 	cfcpysge	mvf1, mvf13
    aa80:	09000001 	stmdbeq	r0, {r0}
    aa84:	0453081d 	ldrbeq	r0, [r3], #-2077	; 0xfffff7e3
    aa88:	0d180000 	ldceq	0, cr0, [r8, #-0]
    aa8c:	00000314 	andeq	r0, r0, r4, lsl r3
    aa90:	81061e09 	tsthi	r6, r9, lsl #28
    aa94:	1c000000 	stcne	0, cr0, [r0], {-0}
    aa98:	81011500 	tsthi	r1, r0, lsl #10
    aa9c:	d1000000 	mrsle	r0, (UNDEF: 0)
    aaa0:	13000003 	movwne	r0, #3
    aaa4:	00000081 	andeq	r0, r0, r1, lsl #1
    aaa8:	00008113 	andeq	r8, r0, r3, lsl r1
    aaac:	00b51300 	adcseq	r1, r5, r0, lsl #6
    aab0:	0a000000 	beq	aab8 <__exidx_end+0x4d38>
    aab4:	0003b704 	andeq	fp, r3, r4, lsl #14
    aab8:	81011500 	tsthi	r1, r0, lsl #10
    aabc:	ec000000 	stc	0, cr0, [r0], {-0}
    aac0:	13000003 	movwne	r0, #3
    aac4:	00000081 	andeq	r0, r0, r1, lsl #1
    aac8:	00008113 	andeq	r8, r0, r3, lsl r1
    aacc:	040a0000 	streq	r0, [sl], #-0
    aad0:	000003d7 	ldrdeq	r0, [r0], -r7
    aad4:	00810115 	addeq	r0, r1, r5, lsl r1
    aad8:	04160000 	ldreq	r0, [r6], #-0
    aadc:	81130000 	tsthi	r3, r0
    aae0:	13000000 	movwne	r0, #0
    aae4:	00000100 	andeq	r0, r0, r0, lsl #2
    aae8:	00008113 	andeq	r8, r0, r3, lsl r1
    aaec:	04161300 	ldreq	r1, [r6], #-768	; 0xfffffd00
    aaf0:	1c130000 	ldcne	0, cr0, [r3], {-0}
    aaf4:	00000004 	andeq	r0, r0, r4
    aaf8:	0081040a 	addeq	r0, r1, sl, lsl #8
    aafc:	040a0000 	streq	r0, [sl], #-0
    ab00:	00000339 	andeq	r0, r0, r9, lsr r3
    ab04:	03f2040a 	mvnseq	r0, #167772160	; 0xa000000
    ab08:	01150000 	tsteq	r5, r0
    ab0c:	00000081 	andeq	r0, r0, r1, lsl #1
    ab10:	0000043d 	andeq	r0, r0, sp, lsr r4
    ab14:	00010013 	andeq	r0, r1, r3, lsl r0
    ab18:	041c1300 	ldreq	r1, [ip], #-768	; 0xfffffd00
    ab1c:	0a000000 	beq	ab24 <__exidx_end+0x4da4>
    ab20:	00042804 	andeq	r2, r4, r4, lsl #16
    ab24:	81011500 	tsthi	r1, r0, lsl #10
    ab28:	53000000 	movwpl	r0, #0
    ab2c:	13000004 	movwne	r0, #4
    ab30:	00000100 	andeq	r0, r0, r0, lsl #2
    ab34:	43040a00 	movwmi	r0, #18944	; 0x4a00
    ab38:	03000004 	movweq	r0, #4
    ab3c:	00000d3b 	andeq	r0, r0, fp, lsr sp
    ab40:	45031f09 	strmi	r1, [r3, #-3849]	; 0xfffff0f7
    ab44:	08000003 	stmdaeq	r0, {r0, r1}
    ab48:	00000459 	andeq	r0, r0, r9, asr r4
    ab4c:	00036e14 	andeq	r6, r3, r4, lsl lr
    ab50:	02d80800 	sbcseq	r0, r8, #0, 16
    ab54:	0000e30e 	andeq	lr, r0, lr, lsl #6
    ab58:	16010100 	strne	r0, [r1], -r0, lsl #2
    ab5c:	03030808 	movweq	r0, #14344	; 0x3808
    ab60:	0004a009 	andeq	sl, r4, r9
    ab64:	3ca71700 	stccc	7, cr1, [r7]
    ab68:	07080000 	streq	r0, [r8, -r0]
    ab6c:	00c10703 	sbceq	r0, r1, r3, lsl #14
    ab70:	17000000 	strne	r0, [r0, -r0]
    ab74:	00000fd3 	ldrdeq	r0, [r0], -r3
    ab78:	08030808 	stmdaeq	r3, {r3, fp}
    ab7c:	000000f4 	strdeq	r0, [r0], -r4
    ab80:	09110004 	ldmdbeq	r1, {r2}
    ab84:	0800000a 	stmdaeq	r0, {r1, r3}
    ab88:	79030309 	stmdbvc	r3, {r0, r3, r8, r9}
    ab8c:	18000004 	stmdane	r0, {r2}
    ab90:	00000029 	andeq	r0, r0, r9, lsr #32
    ab94:	030b0830 	movweq	r0, #47152	; 0xb830
    ab98:	00051008 	andeq	r1, r5, r8
    ab9c:	1f2a1700 	svcne	0x002a1700
    aba0:	14080000 	strne	r0, [r8], #-0
    aba4:	00c10703 	sbceq	r0, r1, r3, lsl #14
    aba8:	17000000 	strne	r0, [r0, -r0]
    abac:	00000be7 	andeq	r0, r0, r7, ror #23
    abb0:	07031508 	streq	r1, [r3, -r8, lsl #10]
    abb4:	000000c1 	andeq	r0, r0, r1, asr #1
    abb8:	4c941702 	ldcmi	7, cr1, [r4], {2}
    abbc:	16080000 	strne	r0, [r8], -r0
    abc0:	02c80a03 	sbceq	r0, r8, #12288	; 0x3000
    abc4:	17040000 	strne	r0, [r4, -r0]
    abc8:	0000475a 	andeq	r4, r0, sl, asr r7
    abcc:	08031708 	stmdaeq	r3, {r3, r8, r9, sl, ip}
    abd0:	000000f4 	strdeq	r0, [r0], -r4
    abd4:	000f1708 	andeq	r1, pc, r8, lsl #14
    abd8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    abdc:	05100f03 	ldreq	r0, [r0, #-3843]	; 0xfffff0fd
    abe0:	170c0000 	strne	r0, [ip, -r0]
    abe4:	0000095d 	andeq	r0, r0, sp, asr r9
    abe8:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    abec:	00000520 	andeq	r0, r0, r0, lsr #10
    abf0:	a00f002c 	andge	r0, pc, ip, lsr #32
    abf4:	20000004 	andcs	r0, r0, r4
    abf8:	19000005 	stmdbne	r0, {r0, r2}
    abfc:	00000088 	andeq	r0, r0, r8, lsl #1
    ac00:	040a0003 	streq	r0, [sl], #-3
    ac04:	000004ad 	andeq	r0, r0, sp, lsr #9
    ac08:	000bdc11 	andeq	sp, fp, r1, lsl ip
    ac0c:	031c0800 	tsteq	ip, #0, 16
    ac10:	0004ad1b 	andeq	sl, r4, fp, lsl sp
    ac14:	0bbc1400 	bleq	fef0fc1c <_estack+0xdef0ac1c>
    ac18:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    ac1c:	05421403 	strbeq	r1, [r2, #-1027]	; 0xfffffbfd
    ac20:	01010000 	mrseq	r0, (UNDEF: 1)
    ac24:	0526040a 	streq	r0, [r6, #-1034]!	; 0xfffffbf6
    ac28:	161a0000 	ldrne	r0, [sl], -r0
    ac2c:	01000000 	mrseq	r0, (UNDEF: 0)
    ac30:	0465111a 	strbteq	r1, [r5], #-282	; 0xfffffee6
    ac34:	05010000 	streq	r0, [r1, #-0]
    ac38:	005d6003 	subseq	r6, sp, r3
    ac3c:	27e11b00 	strbcs	r1, [r1, r0, lsl #22]!
    ac40:	1f010000 	svcne	0x00010000
    ac44:	0004160d 	andeq	r1, r4, sp, lsl #12
    ac48:	fc030500 	stc2	5, cr0, [r3], {-0}
    ac4c:	1c200005 	stcne	0, cr0, [r0], #-20	; 0xffffffec
    ac50:	000027cd 	andeq	r2, r0, sp, asr #15
    ac54:	010c5801 	tsteq	ip, r1, lsl #16
    ac58:	00000081 	andeq	r0, r0, r1, lsl #1
    ac5c:	00003208 	andeq	r3, r0, r8, lsl #4
    ac60:	0000320c 	andeq	r3, r0, ip, lsl #4
    ac64:	05979c01 	ldreq	r9, [r7, #3073]	; 0xc01
    ac68:	701d0000 	andsvc	r0, sp, r0
    ac6c:	22580100 	subscs	r0, r8, #0, 2
    ac70:	00000100 	andeq	r0, r0, r0, lsl #2
    ac74:	00002db1 			; <UNDEFINED> instruction: 0x00002db1
    ac78:	278c1c00 	strcs	r1, [ip, r0, lsl #24]
    ac7c:	52010000 	andpl	r0, r1, #0
    ac80:	0081010c 	addeq	r0, r1, ip, lsl #2
    ac84:	32040000 	andcc	r0, r4, #0
    ac88:	32080000 	andcc	r0, r8, #0
    ac8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac90:	000005c1 	andeq	r0, r0, r1, asr #11
    ac94:	0100701d 	tsteq	r0, sp, lsl r0
    ac98:	01002252 	tsteq	r0, r2, asr r2
    ac9c:	2dc40000 	stclcs	0, cr0, [r4]
    aca0:	1c000000 	stcne	0, cr0, [r0], {-0}
    aca4:	000027b3 			; <UNDEFINED> instruction: 0x000027b3
    aca8:	010c4d01 	tsteq	ip, r1, lsl #26
    acac:	00000081 	andeq	r0, r0, r1, lsl #1
    acb0:	000031fc 	strdeq	r3, [r0], -ip
    acb4:	00003204 	andeq	r3, r0, r4, lsl #4
    acb8:	05f99c01 	ldrbeq	r9, [r9, #3073]!	; 0xc01
    acbc:	701d0000 	andsvc	r0, sp, r0
    acc0:	224d0100 	subcs	r0, sp, #0, 2
    acc4:	00000100 	andeq	r0, r0, r0, lsl #2
    acc8:	00002dd7 	ldrdeq	r2, [r0], -r7
    accc:	0027da1e 	eoreq	sp, r7, lr, lsl sl
    acd0:	2f4d0100 	svccs	0x004d0100
    acd4:	0000041c 	andeq	r0, r0, ip, lsl r4
    acd8:	1c005101 	stfnes	f5, [r0], {1}
    acdc:	00002799 	muleq	r0, r9, r7
    ace0:	010c4201 	tsteq	ip, r1, lsl #4
    ace4:	00000081 	andeq	r0, r0, r1, lsl #1
    ace8:	000031d8 	ldrdeq	r3, [r0], -r8
    acec:	000031fc 	strdeq	r3, [r0], -ip
    acf0:	06629c01 	strbteq	r9, [r2], -r1, lsl #24
    acf4:	701d0000 	andsvc	r0, sp, r0
    acf8:	01007968 	tsteq	r0, r8, ror #18
    acfc:	00811e42 	addeq	r1, r1, r2, asr #28
    ad00:	2dea0000 	stclcs	0, cr0, [sl]
    ad04:	701d0000 	andsvc	r0, sp, r0
    ad08:	2b420100 	blcs	108b110 <__ccfg+0x106b168>
    ad0c:	00000100 	andeq	r0, r0, r0, lsl #2
    ad10:	00002e08 	andeq	r2, r0, r8, lsl #28
    ad14:	6e656c1d 	mcrvs	12, 3, r6, cr5, cr13, {0}
    ad18:	32420100 	subcc	r0, r2, #0, 2
    ad1c:	00000081 	andeq	r0, r0, r1, lsl #1
    ad20:	00002e1b 	andeq	r2, r0, fp, lsl lr
    ad24:	7365731d 	cmnvc	r5, #1946157056	; 0x74000000
    ad28:	3c420100 	stfcce	f0, [r2], {-0}
    ad2c:	00000416 	andeq	r0, r0, r6, lsl r4
    ad30:	00002e2e 	andeq	r2, r0, lr, lsr #28
    ad34:	0027da1e 	eoreq	sp, r7, lr, lsl sl
    ad38:	17430100 	strbne	r0, [r3, -r0, lsl #2]
    ad3c:	0000041c 	andeq	r0, r0, ip, lsl r4
    ad40:	00009102 	andeq	r9, r0, r2, lsl #2
    ad44:	0027c01c 	eoreq	ip, r7, ip, lsl r0
    ad48:	0c370100 	ldfeqs	f0, [r7], #-0
    ad4c:	00008101 	andeq	r8, r0, r1, lsl #2
    ad50:	0031b400 	eorseq	fp, r1, r0, lsl #8
    ad54:	0031d800 	eorseq	sp, r1, r0, lsl #16
    ad58:	9b9c0100 	blls	fe70b160 <_estack+0xde706160>
    ad5c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    ad60:	00796870 	rsbseq	r6, r9, r0, ror r8
    ad64:	811e3701 	tsthi	lr, r1, lsl #14
    ad68:	41000000 	mrsmi	r0, (UNDEF: 0)
    ad6c:	1f00002e 	svcne	0x0000002e
    ad70:	01006466 	tsteq	r0, r6, ror #8
    ad74:	00812737 	addeq	r2, r1, r7, lsr r7
    ad78:	51010000 	mrspl	r0, (UNDEF: 1)
    ad7c:	27a62000 	strcs	r2, [r6, r0]!
    ad80:	21010000 	mrscs	r0, (UNDEF: 1)
    ad84:	0081010c 	addeq	r0, r1, ip, lsl #2
    ad88:	db010000 	blle	4ad90 <__ccfg+0x2ade8>
    ad8c:	21000006 	tstcs	r0, r6
    ad90:	00796870 	rsbseq	r6, r9, r0, ror r8
    ad94:	811e2101 	tsthi	lr, r1, lsl #2
    ad98:	21000000 	mrscs	r0, (UNDEF: 0)
    ad9c:	01006466 	tsteq	r0, r6, ror #8
    ada0:	00812721 	addeq	r2, r1, r1, lsr #14
    ada4:	b5220000 	strlt	r0, [r2, #-0]!
    ada8:	01000018 	tsteq	r0, r8, lsl r0
    adac:	00b53321 	adcseq	r3, r5, r1, lsr #6
    adb0:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    adb4:	06250100 	strteq	r0, [r5], -r0, lsl #2
    adb8:	00000081 	andeq	r0, r0, r1, lsl #1
    adbc:	069b2400 	ldreq	r2, [fp], r0, lsl #8
    adc0:	320c0000 	andcc	r0, ip, #0
    adc4:	32540000 	subscc	r0, r4, #0
    adc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    adcc:	0006ad25 	andeq	sl, r6, r5, lsr #26
    add0:	002e5f00 	eoreq	r5, lr, r0, lsl #30
    add4:	06b92500 	ldrteq	r2, [r9], r0, lsl #10
    add8:	2e7d0000 	cdpcs	0, 7, cr0, cr13, cr0, {0}
    addc:	c4250000 	strtgt	r0, [r5], #-0
    ade0:	9b000006 	blls	ae00 <__exidx_end+0x5080>
    ade4:	2600002e 	strcs	r0, [r0], -lr, lsr #32
    ade8:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    adec:	00069b27 	andeq	r9, r6, r7, lsr #22
    adf0:	00324200 	eorseq	r4, r2, r0, lsl #4
    adf4:	00325400 	eorseq	r5, r2, r0, lsl #8
    adf8:	0c210100 	stfeqs	f0, [r1], #-0
    adfc:	0006ad28 	andeq	sl, r6, r8, lsr #26
    ae00:	28550100 	ldmdacs	r5, {r8}^
    ae04:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    ae08:	c4295601 	strtgt	r5, [r9], #-1537	; 0xfffff9ff
    ae0c:	26000006 	strcs	r0, [r0], -r6
    ae10:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    ae14:	2d000000 	stccs	0, cr0, [r0, #-0]
    ae18:	03000004 	movweq	r0, #4
    ae1c:	00282400 	eoreq	r2, r8, r0, lsl #8
    ae20:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    ae24:	0c000000 	stceq	0, cr0, [r0], {-0}
    ae28:	000027f1 	strdeq	r2, [r0], -r1
    ae2c:	00000e10 	andeq	r0, r0, r0, lsl lr
    ae30:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    ae34:	00000000 	andeq	r0, r0, r0
    ae38:	00006748 	andeq	r6, r0, r8, asr #14
    ae3c:	5d060102 	stfpls	f0, [r6, #-8]
    ae40:	0200000c 	andeq	r0, r0, #12
    ae44:	0a6b0502 	beq	1acc254 <__ccfg+0x1aac2ac>
    ae48:	04020000 	streq	r0, [r2], #-0
    ae4c:	0007fd05 	andeq	pc, r7, r5, lsl #26
    ae50:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    ae54:	000007f8 	strdeq	r0, [r0], -r8
    ae58:	002a2203 	eoreq	r2, sl, r3, lsl #4
    ae5c:	182e0200 	stmdane	lr!, {r9}
    ae60:	0000004d 	andeq	r0, r0, sp, asr #32
    ae64:	5b080102 	blpl	20b274 <__ccfg+0x1eb2cc>
    ae68:	0300000c 	movweq	r0, #12
    ae6c:	00002e18 	andeq	r2, r0, r8, lsl lr
    ae70:	60193102 	andsvs	r3, r9, r2, lsl #2
    ae74:	02000000 	andeq	r0, r0, #0
    ae78:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
    ae7c:	ba030000 	blt	cae84 <__ccfg+0xaaedc>
    ae80:	02000029 	andeq	r0, r0, #41	; 0x29
    ae84:	00731934 	rsbseq	r1, r3, r4, lsr r9
    ae88:	04020000 	streq	r0, [r2], #-0
    ae8c:	00042607 	andeq	r2, r4, r7, lsl #12
    ae90:	07080200 	streq	r0, [r8, -r0, lsl #4]
    ae94:	00000421 	andeq	r0, r0, r1, lsr #8
    ae98:	69050404 	stmdbvs	r5, {r2, sl}
    ae9c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    aea0:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    aea4:	01030000 	mrseq	r0, (UNDEF: 3)
    aea8:	03000029 	movweq	r0, #41	; 0x29
    aeac:	00541227 	subseq	r1, r4, r7, lsr #4
    aeb0:	8f050000 	svchi	0x00050000
    aeb4:	03000000 	movweq	r0, #0
    aeb8:	00001dc8 	andeq	r1, r0, r8, asr #27
    aebc:	41122b03 	tstmi	r2, r3, lsl #22
    aec0:	06000000 	streq	r0, [r0], -r0
    aec4:	000000a0 	andeq	r0, r0, r0, lsr #1
    aec8:	00295303 	eoreq	r5, r9, r3, lsl #6
    aecc:	122c0300 	eorne	r0, ip, #0, 6
    aed0:	00000067 	andeq	r0, r0, r7, rrx
    aed4:	0000b105 	andeq	fp, r0, r5, lsl #2
    aed8:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    aedc:	2d030000 	stccs	0, cr0, [r3, #-0]
    aee0:	00006712 	andeq	r6, r0, r2, lsl r7
    aee4:	03080700 	movweq	r0, #34560	; 0x8700
    aee8:	015c0932 	cmpeq	ip, r2, lsr r9
    aeec:	34080000 	strcc	r0, [r8], #-0
    aef0:	03000000 	movweq	r0, #0
    aef4:	00a00734 	adceq	r0, r0, r4, lsr r7
    aef8:	01010000 	mrseq	r0, (UNDEF: 1)
    aefc:	4c080007 	stcmi	0, cr0, [r8], {7}
    af00:	03000006 	movweq	r0, #6
    af04:	00a00335 	adceq	r0, r0, r5, lsr r3
    af08:	01010000 	mrseq	r0, (UNDEF: 1)
    af0c:	e7080006 	str	r0, [r8, -r6]
    af10:	03000002 	movweq	r0, #2
    af14:	00a00336 	adceq	r0, r0, r6, lsr r3
    af18:	01010000 	mrseq	r0, (UNDEF: 1)
    af1c:	b7080005 	strlt	r0, [r8, -r5]
    af20:	03000006 	movweq	r0, #6
    af24:	00a00337 	adceq	r0, r0, r7, lsr r3
    af28:	01010000 	mrseq	r0, (UNDEF: 1)
    af2c:	9f080004 	svcls	0x00080004
    af30:	0300000a 	movweq	r0, #10
    af34:	00a00338 	adceq	r0, r0, r8, lsr r3
    af38:	04010000 	streq	r0, [r1], #-0
    af3c:	5b090000 	blpl	24af44 <__ccfg+0x22af9c>
    af40:	03000006 	movweq	r0, #6
    af44:	00a0073a 	adceq	r0, r0, sl, lsr r7
    af48:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    af4c:	000008fb 	strdeq	r0, [r0], -fp
    af50:	a0033c03 	andge	r3, r3, r3, lsl #24
    af54:	02000000 	andeq	r0, r0, #0
    af58:	000f4009 	andeq	r4, pc, r9
    af5c:	033d0300 	teqeq	sp, #0, 6
    af60:	000000a0 	andeq	r0, r0, r0, lsr #1
    af64:	09130903 	ldmdbeq	r3, {r0, r1, r8, fp}
    af68:	3f030000 	svccc	0x00030000
    af6c:	0000b108 	andeq	fp, r0, r8, lsl #2
    af70:	03000400 	movweq	r0, #1024	; 0x400
    af74:	0000031d 	andeq	r0, r0, sp, lsl r3
    af78:	ce034103 	adfgts	f4, f3, f3
    af7c:	06000000 	streq	r0, [r0], -r0
    af80:	0000015c 	andeq	r0, r0, ip, asr r1
    af84:	0006be0a 	andeq	fp, r6, sl, lsl #28
    af88:	1a430300 	bne	10cbb90 <__ccfg+0x10abbe8>
    af8c:	00000168 	andeq	r0, r0, r8, ror #2
    af90:	a00a0101 	andge	r0, sl, r1, lsl #2
    af94:	03000001 	movweq	r0, #1
    af98:	01890e45 	orreq	r0, r9, r5, asr #28
    af9c:	01010000 	mrseq	r0, (UNDEF: 1)
    afa0:	018f040b 	orreq	r0, pc, fp, lsl #8
    afa4:	01020000 	mrseq	r0, (UNDEF: 2)
    afa8:	000c6408 	andeq	r6, ip, r8, lsl #8
    afac:	018f0500 	orreq	r0, pc, r0, lsl #10
    afb0:	260a0000 	strcs	r0, [sl], -r0
    afb4:	03000003 	movweq	r0, #3
    afb8:	01891e45 	orreq	r1, r9, r5, asr #28
    afbc:	01010000 	mrseq	r0, (UNDEF: 1)
    afc0:	8f040807 	svchi	0x00040807
    afc4:	0001da09 	andeq	sp, r1, r9, lsl #20
    afc8:	0cd80900 			; <UNDEFINED> instruction: 0x0cd80900
    afcc:	90040000 	andls	r0, r4, r0
    afd0:	0000670b 	andeq	r6, r0, fp, lsl #14
    afd4:	7b090000 	blvc	24afdc <__ccfg+0x22b034>
    afd8:	04000010 	streq	r0, [r0], #-16
    afdc:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    afe0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    afe4:	000001c5 	andeq	r0, r0, r5, asr #3
    afe8:	ac109204 	lfmge	f1, 1, [r0], {4}
    afec:	06000000 	streq	r0, [r0], -r0
    aff0:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    aff4:	93040000 	movwls	r0, #16384	; 0x4000
    aff8:	0001a903 	andeq	sl, r1, r3, lsl #18
    affc:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    b000:	01f10000 	mvnseq	r0, r0
    b004:	000d0000 	andeq	r0, sp, r0
    b008:	00093d0a 	andeq	r3, r9, sl, lsl #26
    b00c:	0f990400 	svceq	0x00990400
    b010:	000001e6 	andeq	r0, r0, r6, ror #3
    b014:	01070101 	tsteq	r7, r1, lsl #2
    b018:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    b01c:	08000002 	stmdaeq	r0, {r1}
    b020:	0000091a 	andeq	r0, r0, sl, lsl r9
    b024:	a0079305 	andge	r9, r7, r5, lsl #6
    b028:	01000000 	mrseq	r0, (UNDEF: 0)
    b02c:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    b030:	000005cc 	andeq	r0, r0, ip, asr #11
    b034:	a0039405 	andge	r9, r3, r5, lsl #8
    b038:	01000000 	mrseq	r0, (UNDEF: 0)
    b03c:	00000001 	andeq	r0, r0, r1
    b040:	000aab03 	andeq	sl, sl, r3, lsl #22
    b044:	03960500 	orrseq	r0, r6, #0, 10
    b048:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b04c:	00022905 	andeq	r2, r2, r5, lsl #18
    b050:	02350c00 	eorseq	r0, r5, #0, 24
    b054:	02450000 	subeq	r0, r5, #0
    b058:	000d0000 	andeq	r0, sp, r0
    b05c:	00023a05 	andeq	r3, r2, r5, lsl #20
    b060:	03aa0a00 			; <UNDEFINED> instruction: 0x03aa0a00
    b064:	9c050000 	stcls	0, cr0, [r5], {-0}
    b068:	00024517 	andeq	r4, r2, r7, lsl r5
    b06c:	0c010100 	stfeqs	f0, [r1], {-0}
    b070:	0000009b 	muleq	r0, fp, r0
    b074:	00000263 	andeq	r0, r0, r3, ror #4
    b078:	5805000d 	stmdapl	r5, {r0, r2, r3}
    b07c:	0a000002 	beq	b08c <__exidx_end+0x530c>
    b080:	0000060e 	andeq	r0, r0, lr, lsl #12
    b084:	63130606 	tstvs	r3, #6291456	; 0x600000
    b088:	01000002 	tsteq	r0, r2
    b08c:	08dd0a01 	ldmeq	sp, {r0, r9, fp}^
    b090:	c3040000 	movwgt	r0, #16384	; 0x4000
    b094:	0000b10e 	andeq	fp, r0, lr, lsl #2
    b098:	0e010100 	adfeqs	f0, f1, f0
    b09c:	00000c72 	andeq	r0, r0, r2, ror ip
    b0a0:	10016e07 	andne	r6, r1, r7, lsl #28
    b0a4:	00000291 	muleq	r0, r1, r2
    b0a8:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    b0ac:	010f0000 	mrseq	r0, CPSR
    b0b0:	000002a3 	andeq	r0, r0, r3, lsr #5
    b0b4:	00008f10 	andeq	r8, r0, r0, lsl pc
    b0b8:	960c0000 	strls	r0, [ip], -r0
    b0bc:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    b0c0:	0d000002 	stceq	0, cr0, [r0, #-8]
    b0c4:	02a30500 	adceq	r0, r3, #0, 10
    b0c8:	e6110000 	ldr	r0, [r1], -r0
    b0cc:	07000009 	streq	r0, [r0, -r9]
    b0d0:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    b0d4:	01000002 	tsteq	r0, r2
    b0d8:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    b0dc:	82070000 	andhi	r0, r7, #0
    b0e0:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    b0e4:	01010000 	mrseq	r0, (UNDEF: 1)
    b0e8:	00036e11 	andeq	r6, r3, r1, lsl lr
    b0ec:	02d80700 	sbcseq	r0, r8, #0, 14
    b0f0:	0000b10e 	andeq	fp, r0, lr, lsl #2
    b0f4:	12010100 	andne	r0, r1, #0, 2
    b0f8:	03030708 	movweq	r0, #14088	; 0x3708
    b0fc:	00030709 	andeq	r0, r3, r9, lsl #14
    b100:	3ca71300 	stccc	3, cr1, [r7]
    b104:	07070000 	streq	r0, [r7, -r0]
    b108:	008f0703 	addeq	r0, pc, r3, lsl #14
    b10c:	13000000 	movwne	r0, #0
    b110:	00000fd3 	ldrdeq	r0, [r0], -r3
    b114:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    b118:	000000c2 	andeq	r0, r0, r2, asr #1
    b11c:	090e0004 	stmdbeq	lr, {r2}
    b120:	0700000a 	streq	r0, [r0, -sl]
    b124:	e0030309 	and	r0, r3, r9, lsl #6
    b128:	14000002 	strne	r0, [r0], #-2
    b12c:	00000029 	andeq	r0, r0, r9, lsr #32
    b130:	030b0730 	movweq	r0, #46896	; 0xb730
    b134:	00037708 	andeq	r7, r3, r8, lsl #14
    b138:	1f2a1300 	svcne	0x002a1300
    b13c:	14070000 	strne	r0, [r7], #-0
    b140:	008f0803 	addeq	r0, pc, r3, lsl #16
    b144:	13000000 	movwne	r0, #0
    b148:	00000be7 	andeq	r0, r0, r7, ror #23
    b14c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    b150:	0000008f 	andeq	r0, r0, pc, lsl #1
    b154:	4c941302 	ldcmi	3, cr1, [r4], {2}
    b158:	16070000 	strne	r0, [r7], -r0
    b15c:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    b160:	13040000 	movwne	r0, #16384	; 0x4000
    b164:	0000475a 	andeq	r4, r0, sl, asr r7
    b168:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    b16c:	000000c2 	andeq	r0, r0, r2, asr #1
    b170:	000f1308 	andeq	r1, pc, r8, lsl #6
    b174:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    b178:	03770f03 	cmneq	r7, #3, 30
    b17c:	130c0000 	movwne	r0, #49152	; 0xc000
    b180:	0000095d 	andeq	r0, r0, sp, asr r9
    b184:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    b188:	00000387 	andeq	r0, r0, r7, lsl #7
    b18c:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    b190:	87000003 	strhi	r0, [r0, -r3]
    b194:	15000003 	strne	r0, [r0, #-3]
    b198:	00000088 	andeq	r0, r0, r8, lsl #1
    b19c:	040b0003 	streq	r0, [fp], #-3
    b1a0:	00000314 	andeq	r0, r0, r4, lsl r3
    b1a4:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    b1a8:	031c0700 	tsteq	ip, #0, 14
    b1ac:	0003141b 	andeq	r1, r3, fp, lsl r4
    b1b0:	0bbc1100 	bleq	fef0f5b8 <_estack+0xdef0a5b8>
    b1b4:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    b1b8:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    b1bc:	01010000 	mrseq	r0, (UNDEF: 1)
    b1c0:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    b1c4:	01160000 	tsteq	r6, r0
    b1c8:	00002836 	andeq	r2, r0, r6, lsr r8
    b1cc:	01011d01 	tsteq	r1, r1, lsl #26
    b1d0:	00003254 	andeq	r3, r0, r4, asr r2
    b1d4:	000032c4 	andeq	r3, r0, r4, asr #5
    b1d8:	042a9c01 	strteq	r9, [sl], #-3073	; 0xfffff3ff
    b1dc:	33170000 	tstcc	r7, #0
    b1e0:	0100000c 	tsteq	r0, ip
    b1e4:	008f011d 	addeq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    b1e8:	2eb90000 	cdpcs	0, 11, cr0, cr9, cr0, {0}
    b1ec:	5a180000 	bpl	60b1f4 <__ccfg+0x5eb24c>
    b1f0:	01000047 	tsteq	r0, r7, asr #32
    b1f4:	042a011d 	strteq	r0, [sl], #-285	; 0xfffffee3
    b1f8:	2ee20000 	cdpcs	0, 14, cr0, cr2, cr0, {0}
    b1fc:	42190000 	andsmi	r0, r9, #0
    b200:	01000028 	tsteq	r0, r8, lsr #32
    b204:	801a0130 	andshi	r0, sl, r0, lsr r1
    b208:	1b00000f 	blne	b24c <__exidx_end+0x54cc>
    b20c:	00727470 	rsbseq	r7, r2, r0, ror r4
    b210:	2a152201 	bcs	553a1c <__ccfg+0x533a74>
    b214:	05000004 	streq	r0, [r0, #-4]
    b218:	00060403 	andeq	r0, r6, r3, lsl #8
    b21c:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    b220:	2301006e 	movwcs	r0, #4206	; 0x106e
    b224:	0000810d 	andeq	r8, r0, sp, lsl #2
    b228:	00030500 	andeq	r0, r3, r0, lsl #10
    b22c:	18200006 	stmdane	r0!, {r1, r2}
    b230:	000027eb 	andeq	r2, r0, fp, ror #15
    b234:	81062401 	tsthi	r6, r1, lsl #8
    b238:	0c000000 	stceq	0, cr0, [r0], {-0}
    b23c:	0000002f 	andeq	r0, r0, pc, lsr #32
    b240:	96040b00 	strls	r0, [r4], -r0, lsl #22
    b244:	00000001 	andeq	r0, r0, r1
    b248:	00000440 	andeq	r0, r0, r0, asr #8
    b24c:	29980003 	ldmibcs	r8, {r0, r1}
    b250:	01040000 	mrseq	r0, (UNDEF: 4)
    b254:	000000ac 	andeq	r0, r0, ip, lsr #1
    b258:	0028580c 	eoreq	r5, r8, ip, lsl #16
    b25c:	000e1000 	andeq	r1, lr, r0
    b260:	000fc800 	andeq	ip, pc, r0, lsl #16
    b264:	00000000 	andeq	r0, r0, r0
    b268:	0068f000 	rsbeq	pc, r8, r0
    b26c:	06010200 	streq	r0, [r1], -r0, lsl #4
    b270:	00000c5d 	andeq	r0, r0, sp, asr ip
    b274:	6b050202 	blvs	14ba84 <__ccfg+0x12badc>
    b278:	0200000a 	andeq	r0, r0, #10
    b27c:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    b280:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b284:	0007f805 	andeq	pc, r7, r5, lsl #16
    b288:	2a220300 	bcs	88be90 <__ccfg+0x86bee8>
    b28c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    b290:	00004d18 	andeq	r4, r0, r8, lsl sp
    b294:	08010200 	stmdaeq	r1, {r9}
    b298:	00000c5b 	andeq	r0, r0, fp, asr ip
    b29c:	002e1803 	eoreq	r1, lr, r3, lsl #16
    b2a0:	19310200 	ldmdbne	r1!, {r9}
    b2a4:	00000060 	andeq	r0, r0, r0, rrx
    b2a8:	6c070202 	sfmvs	f0, 4, [r7], {2}
    b2ac:	0300000d 	movweq	r0, #13
    b2b0:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    b2b4:	73193402 	tstvc	r9, #33554432	; 0x2000000
    b2b8:	02000000 	andeq	r0, r0, #0
    b2bc:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    b2c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b2c4:	00042107 	andeq	r2, r4, r7, lsl #2
    b2c8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    b2cc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b2d0:	2b070402 	blcs	1cc2e0 <__ccfg+0x1ac338>
    b2d4:	03000004 	movweq	r0, #4
    b2d8:	00002901 	andeq	r2, r0, r1, lsl #18
    b2dc:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    b2e0:	05000000 	streq	r0, [r0, #-0]
    b2e4:	0000008f 	andeq	r0, r0, pc, lsl #1
    b2e8:	001dc803 	andseq	ip, sp, r3, lsl #16
    b2ec:	122b0300 	eorne	r0, fp, #0, 6
    b2f0:	00000041 	andeq	r0, r0, r1, asr #32
    b2f4:	0000a006 	andeq	sl, r0, r6
    b2f8:	29530300 	ldmdbcs	r3, {r8, r9}^
    b2fc:	2c030000 	stccs	0, cr0, [r3], {-0}
    b300:	00006712 	andeq	r6, r0, r2, lsl r7
    b304:	00b10500 	adcseq	r0, r1, r0, lsl #10
    b308:	46030000 	strmi	r0, [r3], -r0
    b30c:	03000006 	movweq	r0, #6
    b310:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b314:	b4030000 	strlt	r0, [r3], #-0
    b318:	0300000b 	movweq	r0, #11
    b31c:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    b320:	04070000 	streq	r0, [r7], #-0
    b324:	0000008f 	andeq	r0, r0, pc, lsl #1
    b328:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    b32c:	00016e09 	andeq	r6, r1, r9, lsl #28
    b330:	00340900 	eorseq	r0, r4, r0, lsl #18
    b334:	34030000 	strcc	r0, [r3], #-0
    b338:	0000a007 	andeq	sl, r0, r7
    b33c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b340:	064c0900 	strbeq	r0, [ip], -r0, lsl #18
    b344:	35030000 	strcc	r0, [r3, #-0]
    b348:	0000a003 	andeq	sl, r0, r3
    b34c:	06010100 	streq	r0, [r1], -r0, lsl #2
    b350:	02e70900 	rsceq	r0, r7, #0, 18
    b354:	36030000 	strcc	r0, [r3], -r0
    b358:	0000a003 	andeq	sl, r0, r3
    b35c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b360:	06b70900 	ldrteq	r0, [r7], r0, lsl #18
    b364:	37030000 	strcc	r0, [r3, -r0]
    b368:	0000a003 	andeq	sl, r0, r3
    b36c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b370:	0a9f0900 	beq	fe7cd778 <_estack+0xde7c8778>
    b374:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    b378:	0000a003 	andeq	sl, r0, r3
    b37c:	00040100 	andeq	r0, r4, r0, lsl #2
    b380:	065b0a00 	ldrbeq	r0, [fp], -r0, lsl #20
    b384:	3a030000 	bcc	cb38c <__ccfg+0xab3e4>
    b388:	0000a007 	andeq	sl, r0, r7
    b38c:	fb0a0100 	blx	28b796 <__ccfg+0x26b7ee>
    b390:	03000008 	movweq	r0, #8
    b394:	00a0033c 	adceq	r0, r0, ip, lsr r3
    b398:	0a020000 	beq	8b3a0 <__ccfg+0x6b3f8>
    b39c:	00000f40 	andeq	r0, r0, r0, asr #30
    b3a0:	a0033d03 	andge	r3, r3, r3, lsl #26
    b3a4:	03000000 	movweq	r0, #0
    b3a8:	0009130a 	andeq	r1, r9, sl, lsl #6
    b3ac:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    b3b0:	000000b1 	strheq	r0, [r0], -r1
    b3b4:	1d030004 	stcne	0, cr0, [r3, #-16]
    b3b8:	03000003 	movweq	r0, #3
    b3bc:	00e00341 	rsceq	r0, r0, r1, asr #6
    b3c0:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    b3c4:	0b000001 	bleq	b3d0 <__exidx_end+0x5650>
    b3c8:	000006be 			; <UNDEFINED> instruction: 0x000006be
    b3cc:	7a1a4303 	bvc	69bfe0 <__ccfg+0x67c038>
    b3d0:	01000001 	tsteq	r0, r1
    b3d4:	01a00b01 	lsleq	r0, r1, #22
    b3d8:	45030000 	strmi	r0, [r3, #-0]
    b3dc:	00019b0e 	andeq	r9, r1, lr, lsl #22
    b3e0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b3e4:	0001a104 	andeq	sl, r1, r4, lsl #2
    b3e8:	08010200 	stmdaeq	r1, {r9}
    b3ec:	00000c64 	andeq	r0, r0, r4, ror #24
    b3f0:	0001a105 	andeq	sl, r1, r5, lsl #2
    b3f4:	03260b00 			; <UNDEFINED> instruction: 0x03260b00
    b3f8:	45030000 	strmi	r0, [r3, #-0]
    b3fc:	00019b1e 	andeq	r9, r1, lr, lsl fp
    b400:	08010100 	stmdaeq	r1, {r8}
    b404:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    b408:	000001ec 	andeq	r0, r0, ip, ror #3
    b40c:	000cd80a 	andeq	sp, ip, sl, lsl #16
    b410:	0b900400 	bleq	fe40c418 <_estack+0xde407418>
    b414:	00000067 	andeq	r0, r0, r7, rrx
    b418:	107b0a00 	rsbsne	r0, fp, r0, lsl #20
    b41c:	91040000 	mrsls	r0, (UNDEF: 4)
    b420:	00008f08 	andeq	r8, r0, r8, lsl #30
    b424:	c50a0400 	strgt	r0, [sl, #-1024]	; 0xfffffc00
    b428:	04000001 	streq	r0, [r0], #-1
    b42c:	00ac1092 	umlaleq	r1, ip, r2, r0
    b430:	00060000 	andeq	r0, r6, r0
    b434:	000ccc03 	andeq	ip, ip, r3, lsl #24
    b438:	03930400 	orrseq	r0, r3, #0, 8
    b43c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    b440:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    b444:	00020300 	andeq	r0, r2, r0, lsl #6
    b448:	0b000d00 	bleq	e850 <__exidx_end+0x8ad0>
    b44c:	0000093d 	andeq	r0, r0, sp, lsr r9
    b450:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    b454:	01000001 	tsteq	r0, r1
    b458:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    b45c:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    b460:	1a090000 	bne	24b468 <__ccfg+0x22b4c0>
    b464:	05000009 	streq	r0, [r0, #-9]
    b468:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    b46c:	07010000 	streq	r0, [r1, -r0]
    b470:	cc090001 	stcgt	0, cr0, [r9], {1}
    b474:	05000005 	streq	r0, [r0, #-5]
    b478:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    b47c:	01010000 	mrseq	r0, (UNDEF: 1)
    b480:	03000000 	movweq	r0, #0
    b484:	00000aab 	andeq	r0, r0, fp, lsr #21
    b488:	11039605 	tstne	r3, r5, lsl #12
    b48c:	05000002 	streq	r0, [r0, #-2]
    b490:	0000023b 	andeq	r0, r0, fp, lsr r2
    b494:	0002470c 	andeq	r4, r2, ip, lsl #14
    b498:	00025700 	andeq	r5, r2, r0, lsl #14
    b49c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b4a0:	0000024c 	andeq	r0, r0, ip, asr #4
    b4a4:	0003aa0b 	andeq	sl, r3, fp, lsl #20
    b4a8:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    b4ac:	00000257 	andeq	r0, r0, r7, asr r2
    b4b0:	9b0c0101 	blls	30b8bc <__ccfg+0x2eb914>
    b4b4:	75000000 	strvc	r0, [r0, #-0]
    b4b8:	0d000002 	stceq	0, cr0, [r0, #-8]
    b4bc:	026a0500 	rsbeq	r0, sl, #0, 10
    b4c0:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    b4c4:	06000006 	streq	r0, [r0], -r6
    b4c8:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    b4cc:	01010000 	mrseq	r0, (UNDEF: 1)
    b4d0:	0008dd0b 	andeq	sp, r8, fp, lsl #26
    b4d4:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    b4d8:	000000b1 	strheq	r0, [r0], -r1
    b4dc:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    b4e0:	0700000c 	streq	r0, [r0, -ip]
    b4e4:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    b4e8:	07000002 	streq	r0, [r0, -r2]
    b4ec:	0002a904 	andeq	sl, r2, r4, lsl #18
    b4f0:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    b4f4:	10000002 	andne	r0, r0, r2
    b4f8:	0000008f 	andeq	r0, r0, pc, lsl #1
    b4fc:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    b500:	02c00000 	sbceq	r0, r0, #0
    b504:	000d0000 	andeq	r0, sp, r0
    b508:	0002b505 	andeq	fp, r2, r5, lsl #10
    b50c:	09e61100 	stmibeq	r6!, {r8, ip}^
    b510:	7f070000 	svcvc	0x00070000
    b514:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    b518:	01010000 	mrseq	r0, (UNDEF: 1)
    b51c:	00039611 	andeq	r9, r3, r1, lsl r6
    b520:	01820700 	orreq	r0, r2, r0, lsl #14
    b524:	0000bd14 	andeq	fp, r0, r4, lsl sp
    b528:	11010100 	mrsne	r0, (UNDEF: 17)
    b52c:	0000036e 	andeq	r0, r0, lr, ror #6
    b530:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    b534:	000000b1 	strheq	r0, [r0], -r1
    b538:	08120101 	ldmdaeq	r2, {r0, r8}
    b53c:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    b540:	00000319 	andeq	r0, r0, r9, lsl r3
    b544:	003ca713 	eorseq	sl, ip, r3, lsl r7
    b548:	03070700 	movweq	r0, #30464	; 0x7700
    b54c:	00008f07 	andeq	r8, r0, r7, lsl #30
    b550:	d3130000 	tstle	r3, #0
    b554:	0700000f 	streq	r0, [r0, -pc]
    b558:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    b55c:	04000000 	streq	r0, [r0], #-0
    b560:	0a090e00 	beq	24ed68 <__ccfg+0x22edc0>
    b564:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    b568:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    b56c:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    b570:	30000000 	andcc	r0, r0, r0
    b574:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    b578:	00000389 	andeq	r0, r0, r9, lsl #7
    b57c:	001f2a13 	andseq	r2, pc, r3, lsl sl	; <UNPREDICTABLE>
    b580:	03140700 	tsteq	r4, #0, 14
    b584:	00008f08 	andeq	r8, r0, r8, lsl #30
    b588:	e7130000 	ldr	r0, [r3, -r0]
    b58c:	0700000b 	streq	r0, [r0, -fp]
    b590:	8f080315 	svchi	0x00080315
    b594:	02000000 	andeq	r0, r0, #0
    b598:	004c9413 	subeq	r9, ip, r3, lsl r4
    b59c:	03160700 	tsteq	r6, #0, 14
    b5a0:	0002960b 	andeq	r9, r2, fp, lsl #12
    b5a4:	5a130400 	bpl	4cc5ac <__ccfg+0x4ac604>
    b5a8:	07000047 	streq	r0, [r0, -r7, asr #32]
    b5ac:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    b5b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b5b4:	00000f13 	andeq	r0, r0, r3, lsl pc
    b5b8:	03180700 	tsteq	r8, #0, 14
    b5bc:	0003890f 	andeq	r8, r3, pc, lsl #18
    b5c0:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    b5c4:	07000009 	streq	r0, [r0, -r9]
    b5c8:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    b5cc:	2c000003 	stccs	0, cr0, [r0], {3}
    b5d0:	03190c00 	tsteq	r9, #0, 24
    b5d4:	03990000 	orrseq	r0, r9, #0
    b5d8:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    b5dc:	03000000 	movweq	r0, #0
    b5e0:	26040700 	strcs	r0, [r4], -r0, lsl #14
    b5e4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    b5e8:	00000bdc 	ldrdeq	r0, [r0], -ip
    b5ec:	1b031c07 	blne	d2610 <__ccfg+0xb2668>
    b5f0:	00000326 	andeq	r0, r0, r6, lsr #6
    b5f4:	000bbc11 	andeq	fp, fp, r1, lsl ip
    b5f8:	031e0700 	tsteq	lr, #0, 14
    b5fc:	0003bb14 	andeq	fp, r3, r4, lsl fp
    b600:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b604:	00039f04 	andeq	r9, r3, r4, lsl #30
    b608:	1e5f1600 	cdpne	6, 5, cr1, cr15, cr0, {0}
    b60c:	0d010000 	stceq	0, cr0, [r1, #-0]
    b610:	00019b07 	andeq	r9, r1, r7, lsl #22
    b614:	03050100 	movweq	r0, #20736	; 0x5100
    b618:	20000608 	andcs	r0, r0, r8, lsl #12
    b61c:	284d0117 	stmdacs	sp, {r0, r1, r2, r4, r8}^
    b620:	23010000 	movwcs	r0, #4096	; 0x1000
    b624:	32c40101 	sbccc	r0, r4, #1073741824	; 0x40000000
    b628:	33e00000 	mvncc	r0, #0
    b62c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b630:	000c3318 	andeq	r3, ip, r8, lsl r3
    b634:	01230100 			; <UNDEFINED> instruction: 0x01230100
    b638:	0000008f 	andeq	r0, r0, pc, lsl #1
    b63c:	00002f1f 	andeq	r2, r0, pc, lsl pc
    b640:	00475a19 	subeq	r5, r7, r9, lsl sl
    b644:	01230100 			; <UNDEFINED> instruction: 0x01230100
    b648:	000000ce 	andeq	r0, r0, lr, asr #1
    b64c:	00002f3d 	andeq	r2, r0, sp, lsr pc
    b650:	000fa81a 	andeq	sl, pc, sl, lsl r8	; <UNPREDICTABLE>
    b654:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    b658:	28010072 	stmdacs	r1, {r1, r4, r5, r6}
    b65c:	00019b0f 	andeq	r9, r1, pc, lsl #22
    b660:	10030500 	andne	r0, r3, r0, lsl #10
    b664:	1b200006 	blne	80b684 <__ccfg+0x7eb6dc>
    b668:	006e656c 	rsbeq	r6, lr, ip, ror #10
    b66c:	810d2901 	tsthi	sp, r1, lsl #18
    b670:	05000000 	streq	r0, [r0, #-0]
    b674:	00060c03 	andeq	r0, r6, r3, lsl #24
    b678:	27eb1920 	strbcs	r1, [fp, r0, lsr #18]!
    b67c:	2a010000 	bcs	4b684 <__ccfg+0x2b6dc>
    b680:	00008106 	andeq	r8, r0, r6, lsl #2
    b684:	002f9300 	eoreq	r9, pc, r0, lsl #6
    b688:	00000000 	andeq	r0, r0, r0
    b68c:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    b690:	2b100003 	blcs	40b6a4 <__ccfg+0x3eb6fc>
    b694:	01040000 	mrseq	r0, (UNDEF: 4)
    b698:	000000ac 	andeq	r0, r0, ip, lsr #1
    b69c:	00289c0c 	eoreq	r9, r8, ip, lsl #24
    b6a0:	000e1000 	andeq	r1, lr, r0
    b6a4:	00105000 	andseq	r5, r0, r0
    b6a8:	00000000 	andeq	r0, r0, r0
    b6ac:	006b4200 	rsbeq	r4, fp, r0, lsl #4
    b6b0:	06010200 	streq	r0, [r1], -r0, lsl #4
    b6b4:	00000c5d 	andeq	r0, r0, sp, asr ip
    b6b8:	6b050202 	blvs	14bec8 <__ccfg+0x12bf20>
    b6bc:	0200000a 	andeq	r0, r0, #10
    b6c0:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    b6c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b6c8:	0007f805 	andeq	pc, r7, r5, lsl #16
    b6cc:	2a220300 	bcs	88c2d4 <__ccfg+0x86c32c>
    b6d0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    b6d4:	00004d18 	andeq	r4, r0, r8, lsl sp
    b6d8:	08010200 	stmdaeq	r1, {r9}
    b6dc:	00000c5b 	andeq	r0, r0, fp, asr ip
    b6e0:	002e1803 	eoreq	r1, lr, r3, lsl #16
    b6e4:	19310200 	ldmdbne	r1!, {r9}
    b6e8:	00000060 	andeq	r0, r0, r0, rrx
    b6ec:	6c070202 	sfmvs	f0, 4, [r7], {2}
    b6f0:	0300000d 	movweq	r0, #13
    b6f4:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    b6f8:	73193402 	tstvc	r9, #33554432	; 0x2000000
    b6fc:	02000000 	andeq	r0, r0, #0
    b700:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    b704:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b708:	00042107 	andeq	r2, r4, r7, lsl #2
    b70c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    b710:	00746e69 	rsbseq	r6, r4, r9, ror #28
    b714:	2b070402 	blcs	1cc724 <__ccfg+0x1ac77c>
    b718:	03000004 	movweq	r0, #4
    b71c:	0000051e 	andeq	r0, r0, lr, lsl r5
    b720:	9b1b2803 	blls	6d5734 <__ccfg+0x6b578c>
    b724:	05000000 	streq	r0, [r0, #-0]
    b728:	00000b90 	muleq	r0, r0, fp
    b72c:	b3000904 	movwlt	r0, #2308	; 0x904
    b730:	06000000 	streq	r0, [r0], -r0
    b734:	0000086d 	andeq	r0, r0, sp, ror #16
    b738:	000000b3 	strheq	r0, [r0], -r3
    b73c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    b740:	0b920304 	bleq	fe48c358 <_estack+0xde487358>
    b744:	63030000 	movwvs	r0, #12288	; 0x3000
    b748:	00008f18 	andeq	r8, r0, r8, lsl pc
    b74c:	29010300 	stmdbcs	r1, {r8, r9}
    b750:	27040000 	strcs	r0, [r4, -r0]
    b754:	00005412 	andeq	r5, r0, r2, lsl r4
    b758:	00c10800 	sbceq	r0, r1, r0, lsl #16
    b75c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    b760:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    b764:	0041122b 	subeq	r1, r1, fp, lsr #4
    b768:	d2090000 	andle	r0, r9, #0
    b76c:	03000000 	movweq	r0, #0
    b770:	00002953 	andeq	r2, r0, r3, asr r9
    b774:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    b778:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b77c:	000000e3 	andeq	r0, r0, r3, ror #1
    b780:	00064603 	andeq	r4, r6, r3, lsl #12
    b784:	122d0400 	eorne	r0, sp, #0, 8
    b788:	00000067 	andeq	r0, r0, r7, rrx
    b78c:	000bb403 	andeq	fp, fp, r3, lsl #8
    b790:	102e0400 	eorne	r0, lr, r0, lsl #8
    b794:	0000010c 	andeq	r0, r0, ip, lsl #2
    b798:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    b79c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    b7a0:	a0093204 	andge	r3, r9, r4, lsl #4
    b7a4:	0c000001 	stceq	0, cr0, [r0], {1}
    b7a8:	00000034 	andeq	r0, r0, r4, lsr r0
    b7ac:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    b7b0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7b4:	0c000701 	stceq	7, cr0, [r0], {1}
    b7b8:	0000064c 	andeq	r0, r0, ip, asr #12
    b7bc:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    b7c0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7c4:	0c000601 	stceq	6, cr0, [r0], {1}
    b7c8:	000002e7 	andeq	r0, r0, r7, ror #5
    b7cc:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    b7d0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7d4:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    b7d8:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    b7dc:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    b7e0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7e4:	0c000401 	cfstrseq	mvf0, [r0], {1}
    b7e8:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    b7ec:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    b7f0:	01000000 	mrseq	r0, (UNDEF: 0)
    b7f4:	0d000004 	stceq	0, cr0, [r0, #-16]
    b7f8:	0000065b 	andeq	r0, r0, fp, asr r6
    b7fc:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    b800:	01000000 	mrseq	r0, (UNDEF: 0)
    b804:	0008fb0d 	andeq	pc, r8, sp, lsl #22
    b808:	033c0400 	teqeq	ip, #0, 8
    b80c:	000000d2 	ldrdeq	r0, [r0], -r2
    b810:	0f400d02 	svceq	0x00400d02
    b814:	3d040000 	stccc	0, cr0, [r4, #-0]
    b818:	0000d203 	andeq	sp, r0, r3, lsl #4
    b81c:	130d0300 	movwne	r0, #54016	; 0xd300
    b820:	04000009 	streq	r0, [r0], #-9
    b824:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    b828:	00040000 	andeq	r0, r4, r0
    b82c:	00031d03 	andeq	r1, r3, r3, lsl #26
    b830:	03410400 	movteq	r0, #5120	; 0x1400
    b834:	00000112 	andeq	r0, r0, r2, lsl r1
    b838:	0001a009 	andeq	sl, r1, r9
    b83c:	06be0e00 	ldrteq	r0, [lr], r0, lsl #28
    b840:	43040000 	movwmi	r0, #16384	; 0x4000
    b844:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    b848:	0e010100 	adfeqs	f0, f1, f0
    b84c:	000001a0 	andeq	r0, r0, r0, lsr #3
    b850:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    b854:	01000001 	tsteq	r0, r1
    b858:	d3040a01 	movwle	r0, #18945	; 0x4a01
    b85c:	02000001 	andeq	r0, r0, #1
    b860:	0c640801 	stcleq	8, cr0, [r4], #-4
    b864:	d3080000 	movwle	r0, #32768	; 0x8000
    b868:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b86c:	00000326 	andeq	r0, r0, r6, lsr #6
    b870:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    b874:	01000001 	tsteq	r0, r1
    b878:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    b87c:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    b880:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    b884:	0500000c 	streq	r0, [r0, #-12]
    b888:	00670b90 	mlseq	r7, r0, fp, r0
    b88c:	0d000000 	stceq	0, cr0, [r0, #-0]
    b890:	0000107b 	andeq	r1, r0, fp, ror r0
    b894:	c1089105 	tstgt	r8, r5, lsl #2
    b898:	04000000 	streq	r0, [r0], #-0
    b89c:	0001c50d 	andeq	ip, r1, sp, lsl #10
    b8a0:	10920500 	addsne	r0, r2, r0, lsl #10
    b8a4:	000000de 	ldrdeq	r0, [r0], -lr
    b8a8:	cc030006 	stcgt	0, cr0, [r3], {6}
    b8ac:	0500000c 	streq	r0, [r0, #-12]
    b8b0:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    b8b4:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    b8b8:	35000002 	strcc	r0, [r0, #-2]
    b8bc:	10000002 	andne	r0, r0, r2
    b8c0:	093d0e00 	ldmdbeq	sp!, {r9, sl, fp}
    b8c4:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    b8c8:	00022a0f 	andeq	r2, r2, pc, lsl #20
    b8cc:	0b010100 	bleq	4bcd4 <__ccfg+0x2bd2c>
    b8d0:	09910601 	ldmibeq	r1, {r0, r9, sl}
    b8d4:	0000026d 	andeq	r0, r0, sp, ror #4
    b8d8:	00091a0c 	andeq	r1, r9, ip, lsl #20
    b8dc:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    b8e0:	000000d2 	ldrdeq	r0, [r0], -r2
    b8e4:	00010701 	andeq	r0, r1, r1, lsl #14
    b8e8:	0005cc0c 	andeq	ip, r5, ip, lsl #24
    b8ec:	03940600 	orrseq	r0, r4, #0, 12
    b8f0:	000000d2 	ldrdeq	r0, [r0], -r2
    b8f4:	00000101 	andeq	r0, r0, r1, lsl #2
    b8f8:	0aab0300 	beq	feacc500 <_estack+0xdeac7500>
    b8fc:	96060000 	strls	r0, [r6], -r0
    b900:	00024303 	andeq	r4, r2, r3, lsl #6
    b904:	026d0800 	rsbeq	r0, sp, #0, 16
    b908:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    b90c:	89000002 	stmdbhi	r0, {r1}
    b910:	10000002 	andne	r0, r0, r2
    b914:	027e0800 	rsbseq	r0, lr, #0, 16
    b918:	aa0e0000 	bge	38b920 <__ccfg+0x36b978>
    b91c:	06000003 	streq	r0, [r0], -r3
    b920:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    b924:	01010000 	mrseq	r0, (UNDEF: 1)
    b928:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    b92c:	0002a700 	andeq	sl, r2, r0, lsl #14
    b930:	08001000 	stmdaeq	r0, {ip}
    b934:	0000029c 	muleq	r0, ip, r2
    b938:	00060e0e 	andeq	r0, r6, lr, lsl #28
    b93c:	13060700 	movwne	r0, #26368	; 0x6700
    b940:	000002a7 	andeq	r0, r0, r7, lsr #5
    b944:	dd0e0101 	stfles	f0, [lr, #-4]
    b948:	05000008 	streq	r0, [r0, #-8]
    b94c:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    b950:	01010000 	mrseq	r0, (UNDEF: 1)
    b954:	000c7211 	andeq	r7, ip, r1, lsl r2
    b958:	016e0800 	cmneq	lr, r0, lsl #16
    b95c:	0002d510 	andeq	sp, r2, r0, lsl r5
    b960:	db040a00 	blle	10e168 <__ccfg+0xee1c0>
    b964:	12000002 	andne	r0, r0, #2
    b968:	0002e701 	andeq	lr, r2, r1, lsl #14
    b96c:	00c11300 	sbceq	r1, r1, r0, lsl #6
    b970:	0f000000 	svceq	0x00000000
    b974:	000001da 	ldrdeq	r0, [r0], -sl
    b978:	000002f2 	strdeq	r0, [r0], -r2
    b97c:	e7080010 	smlad	r8, r0, r0, r0
    b980:	14000002 	strne	r0, [r0], #-2
    b984:	000009e6 	andeq	r0, r0, r6, ror #19
    b988:	16017f08 	strne	r7, [r1], -r8, lsl #30
    b98c:	000002f2 	strdeq	r0, [r0], -r2
    b990:	96140101 	ldrls	r0, [r4], -r1, lsl #2
    b994:	08000003 	stmdaeq	r0, {r0, r1}
    b998:	ef140182 	svc	0x00140182
    b99c:	01000000 	mrseq	r0, (UNDEF: 0)
    b9a0:	036e1401 	cmneq	lr, #16777216	; 0x1000000
    b9a4:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    b9a8:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    b9ac:	01010000 	mrseq	r0, (UNDEF: 1)
    b9b0:	03080815 	movweq	r0, #34837	; 0x8815
    b9b4:	034b0903 	movteq	r0, #47363	; 0xb903
    b9b8:	a7160000 	ldrge	r0, [r6, -r0]
    b9bc:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    b9c0:	c1070307 	tstgt	r7, r7, lsl #6
    b9c4:	00000000 	andeq	r0, r0, r0
    b9c8:	000fd316 	andeq	sp, pc, r6, lsl r3	; <UNPREDICTABLE>
    b9cc:	03080800 	movweq	r0, #34816	; 0x8800
    b9d0:	0000f408 	andeq	pc, r0, r8, lsl #8
    b9d4:	11000400 	tstne	r0, r0, lsl #8
    b9d8:	00000a09 	andeq	r0, r0, r9, lsl #20
    b9dc:	03030908 	movweq	r0, #14600	; 0x3908
    b9e0:	00000324 	andeq	r0, r0, r4, lsr #6
    b9e4:	00002917 	andeq	r2, r0, r7, lsl r9
    b9e8:	0b083000 	bleq	2179f0 <__ccfg+0x1f7a48>
    b9ec:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    b9f0:	2a160000 	bcs	58b9f8 <__ccfg+0x56ba50>
    b9f4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    b9f8:	c1080314 	tstgt	r8, r4, lsl r3
    b9fc:	00000000 	andeq	r0, r0, r0
    ba00:	000be716 	andeq	lr, fp, r6, lsl r7
    ba04:	03150800 	tsteq	r5, #0, 16
    ba08:	0000c108 	andeq	ip, r0, r8, lsl #2
    ba0c:	94160200 	ldrls	r0, [r6], #-512	; 0xfffffe00
    ba10:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    ba14:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    ba18:	04000002 	streq	r0, [r0], #-2
    ba1c:	00475a16 	subeq	r5, r7, r6, lsl sl
    ba20:	03170800 	tsteq	r7, #0, 16
    ba24:	0000f409 	andeq	pc, r0, r9, lsl #8
    ba28:	0f160800 	svceq	0x00160800
    ba2c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ba30:	bb0f0318 	bllt	3cc698 <__ccfg+0x3ac6f0>
    ba34:	0c000003 	stceq	0, cr0, [r0], {3}
    ba38:	00095d16 	andeq	r5, r9, r6, lsl sp
    ba3c:	03190800 	tsteq	r9, #0, 16
    ba40:	0003cb15 	andeq	ip, r3, r5, lsl fp
    ba44:	0f002c00 	svceq	0x00002c00
    ba48:	0000034b 	andeq	r0, r0, fp, asr #6
    ba4c:	000003cb 	andeq	r0, r0, fp, asr #7
    ba50:	00008818 	andeq	r8, r0, r8, lsl r8
    ba54:	0a000300 	beq	c65c <__exidx_end+0x68dc>
    ba58:	00035804 	andeq	r5, r3, r4, lsl #16
    ba5c:	0bdc1100 	bleq	ff70fe64 <_estack+0xdf70ae64>
    ba60:	1c080000 	stcne	0, cr0, [r8], {-0}
    ba64:	03581b03 	cmpeq	r8, #3072	; 0xc00
    ba68:	bc140000 	ldclt	0, cr0, [r4], {-0}
    ba6c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ba70:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    ba74:	01000003 	tsteq	r0, r3
    ba78:	d1040a01 	tstle	r4, r1, lsl #20
    ba7c:	19000003 	stmdbne	r0, {r0, r1}
    ba80:	0028f301 	eoreq	pc, r8, r1, lsl #6
    ba84:	07910100 	ldreq	r0, [r1, r0, lsl #2]
    ba88:	0001cd01 	andeq	ip, r1, r1, lsl #26
    ba8c:	00363000 	eorseq	r3, r6, r0
    ba90:	00368000 	eorseq	r8, r6, r0
    ba94:	689c0100 	ldmvs	ip, {r8}
    ba98:	1a000004 	bne	bab0 <__exidx_end+0x5d30>
    ba9c:	00736572 	rsbseq	r6, r3, r2, ror r5
    baa0:	cd149101 	ldfgtd	f1, [r4, #-4]
    baa4:	b1000001 	tstlt	r0, r1
    baa8:	1a00002f 	bne	bb6c <__exidx_end+0x5dec>
    baac:	01006d66 	tsteq	r0, r6, ror #26
    bab0:	04682591 	strbteq	r2, [r8], #-1425	; 0xfffffa6f
    bab4:	2ffb0000 	svccs	0x00fb0000
    bab8:	611a0000 	tstvs	sl, r0
    babc:	91010071 	tstls	r1, r1, ror r0
    bac0:	0000b531 	andeq	fp, r0, r1, lsr r5
    bac4:	00303a00 	eorseq	r3, r0, r0, lsl #20
    bac8:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    bacc:	9301006c 	movwls	r0, #4204	; 0x106c
    bad0:	0000c107 	andeq	ip, r0, r7, lsl #2
    bad4:	00306e00 	eorseq	r6, r0, r0, lsl #28
    bad8:	00641b00 	rsbeq	r1, r4, r0, lsl #22
    badc:	c10c9301 	tstgt	ip, r1, lsl #6
    bae0:	8c000000 	stchi	0, cr0, [r0], {-0}
    bae4:	1c000030 	stcne	0, cr0, [r0], {48}	; 0x30
    bae8:	000028db 	ldrdeq	r2, [r0], -fp
    baec:	5a019e01 	bpl	732f8 <__ccfg+0x53350>
    baf0:	00000036 	andeq	r0, r0, r6, lsr r0
    baf4:	01da040a 	bicseq	r0, sl, sl, lsl #8
    baf8:	011d0000 	tsteq	sp, r0
    bafc:	000028e6 	andeq	r2, r0, r6, ror #17
    bb00:	01060801 	tsteq	r6, r1, lsl #16
    bb04:	000000c1 	andeq	r0, r0, r1, asr #1
    bb08:	00003400 	andeq	r3, r0, r0, lsl #8
    bb0c:	00003630 	andeq	r3, r0, r0, lsr r6
    bb10:	721a9c01 	andsvc	r9, sl, #256	; 0x100
    bb14:	01007365 	tsteq	r0, r5, ror #6
    bb18:	01cd1a08 	biceq	r1, sp, r8, lsl #20
    bb1c:	309f0000 	addscc	r0, pc, r0
    bb20:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    bb24:	24080100 	strcs	r0, [r8], #-256	; 0xffffff00
    bb28:	000000c1 	andeq	r0, r0, r1, asr #1
    bb2c:	000030b2 	strheq	r3, [r0], -r2
    bb30:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    bb34:	68330801 	ldmdavs	r3!, {r0, fp}
    bb38:	c5000004 	strgt	r0, [r0, #-4]
    bb3c:	1a000030 	bne	bc04 <__exidx_end+0x5e84>
    bb40:	01007061 	tsteq	r0, r1, rrx
    bb44:	00b53f08 	adcseq	r3, r5, r8, lsl #30
    bb48:	30ee0000 	rsccc	r0, lr, r0
    bb4c:	631b0000 	tstvs	fp, #0
    bb50:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    bb54:	000001d3 	ldrdeq	r0, [r0], -r3
    bb58:	00003190 	muleq	r0, r0, r1
    bb5c:	0100641e 	tsteq	r0, lr, lsl r4
    bb60:	00c1070b 	sbceq	r0, r1, fp, lsl #14
    bb64:	91040000 	mrsls	r0, (UNDEF: 4)
    bb68:	1f062354 	svcne	0x00062354
    bb6c:	000028e1 	andeq	r2, r0, r1, ror #17
    bb70:	01070d01 	tsteq	r7, r1, lsl #26
    bb74:	000033e0 	andeq	r3, r0, r0, ror #7
    bb78:	00003400 	andeq	r3, r0, r0, lsl #8
    bb7c:	7c059c01 	stcvc	12, cr9, [r5], {1}
    bb80:	06082300 	streq	r2, [r8], -r0, lsl #6
    bb84:	00000509 	andeq	r0, r0, r9, lsl #10
    bb88:	01006320 	tsteq	r0, r0, lsr #6
    bb8c:	00c1120d 	sbceq	r1, r1, sp, lsl #4
    bb90:	50010000 	andpl	r0, r1, r0
    bb94:	6f452100 	svcvs	0x00452100
    bb98:	8801006c 	stmdahi	r1, {r2, r3, r5, r6}
    bb9c:	00343a01 	eorseq	r3, r4, r1, lsl #20
    bba0:	65522100 	ldrbvs	r2, [r2, #-256]	; 0xffffff00
    bba4:	8b010074 	blhi	4bd7c <__ccfg+0x2bdd4>
    bba8:	00349c01 	eorseq	r9, r4, r1, lsl #24
    bbac:	10002200 	andne	r2, r0, r0, lsl #4
    bbb0:	05450000 	strbeq	r0, [r5, #-0]
    bbb4:	76230000 	strtvc	r0, [r3], -r0
    bbb8:	01006c61 	tsteq	r0, r1, ror #24
    bbbc:	00c10a3a 	sbceq	r0, r1, sl, lsr sl
    bbc0:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    bbc4:	133a0100 	teqne	sl, #0, 2
    bbc8:	00000081 	andeq	r0, r0, r1, lsl #1
    bbcc:	00003276 	andeq	r3, r0, r6, ror r2
    bbd0:	0fd82200 	svceq	0x00d82200
    bbd4:	056d0000 	strbeq	r0, [sp, #-0]!
    bbd8:	761b0000 	ldrvc	r0, [fp], -r0
    bbdc:	01006c61 	tsteq	r0, r1, ror #24
    bbe0:	00c10a46 	sbceq	r0, r1, r6, asr #20
    bbe4:	32890000 	addcc	r0, r9, #0
    bbe8:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    bbec:	0f460100 	svceq	0x00460100
    bbf0:	000000c1 	andeq	r0, r0, r1, asr #1
    bbf4:	000032b2 			; <UNDEFINED> instruction: 0x000032b2
    bbf8:	10382200 	eorsne	r2, r8, r0, lsl #4
    bbfc:	05950000 	ldreq	r0, [r5]
    bc00:	761b0000 	ldrvc	r0, [fp], -r0
    bc04:	01006c61 	tsteq	r0, r1, ror #24
    bc08:	00e30c55 	rsceq	r0, r3, r5, asr ip
    bc0c:	32db0000 	sbcscc	r0, fp, #0
    bc10:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    bc14:	11550100 	cmpne	r5, r0, lsl #2
    bc18:	000000e3 	andeq	r0, r0, r3, ror #1
    bc1c:	000032ee 	andeq	r3, r0, lr, ror #5
    bc20:	35be2400 	ldrcc	r2, [lr, #1024]!	; 0x400
    bc24:	35e80000 	strbcc	r0, [r8, #0]!
    bc28:	05bf0000 	ldreq	r0, [pc, #0]!	; bc30 <__exidx_end+0x5eb0>
    bc2c:	761e0000 	ldrvc	r0, [lr], -r0
    bc30:	01006c61 	tsteq	r0, r1, ror #24
    bc34:	00e30c60 	rsceq	r0, r3, r0, ror #24
    bc38:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    bc3c:	0100691b 	tsteq	r0, fp, lsl r9
    bc40:	00810a61 	addeq	r0, r1, r1, ror #20
    bc44:	33170000 	tstcc	r7, #0
    bc48:	22000000 	andcs	r0, r0, #0
    bc4c:	00001020 	andeq	r1, r0, r0, lsr #32
    bc50:	000005d9 	ldrdeq	r0, [r0], -r9
    bc54:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bc58:	0a710100 	beq	1c4c060 <__ccfg+0x1c2c0b8>
    bc5c:	000000c1 	andeq	r0, r0, r1, asr #1
    bc60:	0000332a 	andeq	r3, r0, sl, lsr #6
    bc64:	36062500 	strcc	r2, [r6], -r0, lsl #10
    bc68:	36220000 	strtcc	r0, [r2], -r0
    bc6c:	731b0000 	tstvc	fp, #0
    bc70:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    bc74:	0001cd0b 	andeq	ip, r1, fp, lsl #26
    bc78:	00334a00 	eorseq	r4, r3, r0, lsl #20
    bc7c:	00000000 	andeq	r0, r0, r0
    bc80:	0000058f 	andeq	r0, r0, pc, lsl #11
    bc84:	2d220003 	stccs	0, cr0, [r2, #-12]!
    bc88:	01040000 	mrseq	r0, (UNDEF: 4)
    bc8c:	000000ac 	andeq	r0, r0, ip, lsr #1
    bc90:	0029060c 	eoreq	r0, r9, ip, lsl #12
    bc94:	000e1000 	andeq	r1, lr, r0
    bc98:	0010f800 	andseq	pc, r0, r0, lsl #16
    bc9c:	00000000 	andeq	r0, r0, r0
    bca0:	006f0600 	rsbeq	r0, pc, r0, lsl #12
    bca4:	06010200 	streq	r0, [r1], -r0, lsl #4
    bca8:	00000c5d 	andeq	r0, r0, sp, asr ip
    bcac:	6b050202 	blvs	14c4bc <__ccfg+0x12c514>
    bcb0:	0200000a 	andeq	r0, r0, #10
    bcb4:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    bcb8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    bcbc:	0007f805 	andeq	pc, r7, r5, lsl #16
    bcc0:	2a220300 	bcs	88c8c8 <__ccfg+0x86c920>
    bcc4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    bcc8:	00004d18 	andeq	r4, r0, r8, lsl sp
    bccc:	08010200 	stmdaeq	r1, {r9}
    bcd0:	00000c5b 	andeq	r0, r0, fp, asr ip
    bcd4:	002e1803 	eoreq	r1, lr, r3, lsl #16
    bcd8:	19310200 	ldmdbne	r1!, {r9}
    bcdc:	00000060 	andeq	r0, r0, r0, rrx
    bce0:	6c070202 	sfmvs	f0, 4, [r7], {2}
    bce4:	0300000d 	movweq	r0, #13
    bce8:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    bcec:	73193402 	tstvc	r9, #33554432	; 0x2000000
    bcf0:	02000000 	andeq	r0, r0, #0
    bcf4:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    bcf8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    bcfc:	00042107 	andeq	r2, r4, r7, lsl #2
    bd00:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    bd04:	00746e69 	rsbseq	r6, r4, r9, ror #28
    bd08:	2b070402 	blcs	1ccd18 <__ccfg+0x1acd70>
    bd0c:	03000004 	movweq	r0, #4
    bd10:	0000051e 	andeq	r0, r0, lr, lsl r5
    bd14:	9b1b2803 	blls	6d5d28 <__ccfg+0x6b5d80>
    bd18:	05000000 	streq	r0, [r0, #-0]
    bd1c:	00000b90 	muleq	r0, r0, fp
    bd20:	b3000904 	movwlt	r0, #2308	; 0x904
    bd24:	06000000 	streq	r0, [r0], -r0
    bd28:	0000086d 	andeq	r0, r0, sp, ror #16
    bd2c:	000000b3 	strheq	r0, [r0], -r3
    bd30:	07000100 	streq	r0, [r0, -r0, lsl #2]
    bd34:	0b920304 	bleq	fe48c94c <_estack+0xde48794c>
    bd38:	63030000 	movwvs	r0, #12288	; 0x3000
    bd3c:	00008f18 	andeq	r8, r0, r8, lsl pc
    bd40:	132e0300 			; <UNDEFINED> instruction: 0x132e0300
    bd44:	26040000 	strcs	r0, [r4], -r0
    bd48:	00004112 	andeq	r4, r0, r2, lsl r1
    bd4c:	29010300 	stmdbcs	r1, {r8, r9}
    bd50:	27040000 	strcs	r0, [r4, -r0]
    bd54:	00005412 	andeq	r5, r0, r2, lsl r4
    bd58:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    bd5c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    bd60:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    bd64:	0041122b 	subeq	r1, r1, fp, lsr #4
    bd68:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    bd6c:	03000000 	movweq	r0, #0
    bd70:	00002953 	andeq	r2, r0, r3, asr r9
    bd74:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    bd78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bd7c:	000000ef 	andeq	r0, r0, pc, ror #1
    bd80:	00064603 	andeq	r4, r6, r3, lsl #12
    bd84:	122d0400 	eorne	r0, sp, #0, 8
    bd88:	00000067 	andeq	r0, r0, r7, rrx
    bd8c:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    bd90:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    bd94:	a0093204 	andge	r3, r9, r4, lsl #4
    bd98:	0c000001 	stceq	0, cr0, [r0], {1}
    bd9c:	00000034 	andeq	r0, r0, r4, lsr r0
    bda0:	de073404 	cdple	4, 0, cr3, cr7, cr4, {0}
    bda4:	01000000 	mrseq	r0, (UNDEF: 0)
    bda8:	0c000701 	stceq	7, cr0, [r0], {1}
    bdac:	0000064c 	andeq	r0, r0, ip, asr #12
    bdb0:	de033504 	cfsh32le	mvfx3, mvfx3, #4
    bdb4:	01000000 	mrseq	r0, (UNDEF: 0)
    bdb8:	0c000601 	stceq	6, cr0, [r0], {1}
    bdbc:	000002e7 	andeq	r0, r0, r7, ror #5
    bdc0:	de033604 	cfmadd32le	mvax0, mvfx3, mvfx3, mvfx4
    bdc4:	01000000 	mrseq	r0, (UNDEF: 0)
    bdc8:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    bdcc:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    bdd0:	de033704 	cdple	7, 0, cr3, cr3, cr4, {0}
    bdd4:	01000000 	mrseq	r0, (UNDEF: 0)
    bdd8:	0c000401 	cfstrseq	mvf0, [r0], {1}
    bddc:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    bde0:	de033804 	cdple	8, 0, cr3, cr3, cr4, {0}
    bde4:	01000000 	mrseq	r0, (UNDEF: 0)
    bde8:	0d000004 	stceq	0, cr0, [r0, #-16]
    bdec:	0000065b 	andeq	r0, r0, fp, asr r6
    bdf0:	de073a04 	vmlale.f32	s6, s14, s8
    bdf4:	01000000 	mrseq	r0, (UNDEF: 0)
    bdf8:	0008fb0d 	andeq	pc, r8, sp, lsl #22
    bdfc:	033c0400 	teqeq	ip, #0, 8
    be00:	000000de 	ldrdeq	r0, [r0], -lr
    be04:	0f400d02 	svceq	0x00400d02
    be08:	3d040000 	stccc	0, cr0, [r4, #-0]
    be0c:	0000de03 	andeq	sp, r0, r3, lsl #28
    be10:	130d0300 	movwne	r0, #54016	; 0xd300
    be14:	04000009 	streq	r0, [r0], #-9
    be18:	00ef083f 	rsceq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    be1c:	00040000 	andeq	r0, r4, r0
    be20:	00031d03 	andeq	r1, r3, r3, lsl #26
    be24:	03410400 	movteq	r0, #5120	; 0x1400
    be28:	00000112 	andeq	r0, r0, r2, lsl r1
    be2c:	0001a009 	andeq	sl, r1, r9
    be30:	06be0e00 	ldrteq	r0, [lr], r0, lsl #28
    be34:	43040000 	movwmi	r0, #16384	; 0x4000
    be38:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    be3c:	0e010100 	adfeqs	f0, f1, f0
    be40:	000001a0 	andeq	r0, r0, r0, lsr #3
    be44:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    be48:	01000001 	tsteq	r0, r1
    be4c:	d3040a01 	movwle	r0, #18945	; 0x4a01
    be50:	02000001 	andeq	r0, r0, #1
    be54:	0c640801 	stcleq	8, cr0, [r4], #-4
    be58:	d3080000 	movwle	r0, #32768	; 0x8000
    be5c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    be60:	00000326 	andeq	r0, r0, r6, lsr #6
    be64:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    be68:	01000001 	tsteq	r0, r1
    be6c:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    be70:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    be74:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    be78:	0500000c 	streq	r0, [r0, #-12]
    be7c:	00670b90 	mlseq	r7, r0, fp, r0
    be80:	0d000000 	stceq	0, cr0, [r0, #-0]
    be84:	0000107b 	andeq	r1, r0, fp, ror r0
    be88:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    be8c:	04000000 	streq	r0, [r0], #-0
    be90:	0001c50d 	andeq	ip, r1, sp, lsl #10
    be94:	10920500 	addsne	r0, r2, r0, lsl #10
    be98:	000000ea 	andeq	r0, r0, sl, ror #1
    be9c:	cc030006 	stcgt	0, cr0, [r3], {6}
    bea0:	0500000c 	streq	r0, [r0, #-12]
    bea4:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    bea8:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    beac:	35000002 	strcc	r0, [r0, #-2]
    beb0:	10000002 	andne	r0, r0, r2
    beb4:	093d0e00 	ldmdbeq	sp!, {r9, sl, fp}
    beb8:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    bebc:	00022a0f 	andeq	r2, r2, pc, lsl #20
    bec0:	0b010100 	bleq	4c2c8 <__ccfg+0x2c320>
    bec4:	09910601 	ldmibeq	r1, {r0, r9, sl}
    bec8:	0000026d 	andeq	r0, r0, sp, ror #4
    becc:	00091a0c 	andeq	r1, r9, ip, lsl #20
    bed0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    bed4:	000000de 	ldrdeq	r0, [r0], -lr
    bed8:	00010701 	andeq	r0, r1, r1, lsl #14
    bedc:	0005cc0c 	andeq	ip, r5, ip, lsl #24
    bee0:	03940600 	orrseq	r0, r4, #0, 12
    bee4:	000000de 	ldrdeq	r0, [r0], -lr
    bee8:	00000101 	andeq	r0, r0, r1, lsl #2
    beec:	0aab0300 	beq	feaccaf4 <_estack+0xdeac7af4>
    bef0:	96060000 	strls	r0, [r6], -r0
    bef4:	00024303 	andeq	r4, r2, r3, lsl #6
    bef8:	026d0800 	rsbeq	r0, sp, #0, 16
    befc:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    bf00:	89000002 	stmdbhi	r0, {r1}
    bf04:	10000002 	andne	r0, r0, r2
    bf08:	027e0800 	rsbseq	r0, lr, #0, 16
    bf0c:	aa0e0000 	bge	38bf14 <__ccfg+0x36bf6c>
    bf10:	06000003 	streq	r0, [r0], -r3
    bf14:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    bf18:	01010000 	mrseq	r0, (UNDEF: 1)
    bf1c:	0000d90f 	andeq	sp, r0, pc, lsl #18
    bf20:	0002a700 	andeq	sl, r2, r0, lsl #14
    bf24:	08001000 	stmdaeq	r0, {ip}
    bf28:	0000029c 	muleq	r0, ip, r2
    bf2c:	00060e0e 	andeq	r0, r6, lr, lsl #28
    bf30:	13060700 	movwne	r0, #26368	; 0x6700
    bf34:	000002a7 	andeq	r0, r0, r7, lsr #5
    bf38:	dd0e0101 	stfles	f0, [lr, #-4]
    bf3c:	05000008 	streq	r0, [r0, #-8]
    bf40:	00ef0ec3 	rsceq	r0, pc, r3, asr #29
    bf44:	01010000 	mrseq	r0, (UNDEF: 1)
    bf48:	000c7211 	andeq	r7, ip, r1, lsl r2
    bf4c:	016e0800 	cmneq	lr, r0, lsl #16
    bf50:	0002d510 	andeq	sp, r2, r0, lsl r5
    bf54:	db040a00 	blle	10e75c <__ccfg+0xee7b4>
    bf58:	12000002 	andne	r0, r0, #2
    bf5c:	0002e701 	andeq	lr, r2, r1, lsl #14
    bf60:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    bf64:	0f000000 	svceq	0x00000000
    bf68:	000001da 	ldrdeq	r0, [r0], -sl
    bf6c:	000002f2 	strdeq	r0, [r0], -r2
    bf70:	e7080010 	smlad	r8, r0, r0, r0
    bf74:	14000002 	strne	r0, [r0], #-2
    bf78:	000009e6 	andeq	r0, r0, r6, ror #19
    bf7c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    bf80:	000002f2 	strdeq	r0, [r0], -r2
    bf84:	96140101 	ldrls	r0, [r4], -r1, lsl #2
    bf88:	08000003 	stmdaeq	r0, {r0, r1}
    bf8c:	fb140182 	blx	50c59e <__ccfg+0x4ec5f6>
    bf90:	01000000 	mrseq	r0, (UNDEF: 0)
    bf94:	036e1401 	cmneq	lr, #16777216	; 0x1000000
    bf98:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    bf9c:	00ef0e02 	rsceq	r0, pc, r2, lsl #28
    bfa0:	01010000 	mrseq	r0, (UNDEF: 1)
    bfa4:	03080815 	movweq	r0, #34837	; 0x8815
    bfa8:	034b0903 	movteq	r0, #47363	; 0xb903
    bfac:	a7160000 	ldrge	r0, [r6, -r0]
    bfb0:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    bfb4:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    bfb8:	00000000 	andeq	r0, r0, r0
    bfbc:	000fd316 	andeq	sp, pc, r6, lsl r3	; <UNPREDICTABLE>
    bfc0:	03080800 	movweq	r0, #34816	; 0x8800
    bfc4:	00010008 	andeq	r0, r1, r8
    bfc8:	11000400 	tstne	r0, r0, lsl #8
    bfcc:	00000a09 	andeq	r0, r0, r9, lsl #20
    bfd0:	03030908 	movweq	r0, #14600	; 0x3908
    bfd4:	00000324 	andeq	r0, r0, r4, lsr #6
    bfd8:	00002917 	andeq	r2, r0, r7, lsl r9
    bfdc:	0b083000 	bleq	217fe4 <__ccfg+0x1f803c>
    bfe0:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    bfe4:	2a160000 	bcs	58bfec <__ccfg+0x56c044>
    bfe8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    bfec:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    bff0:	00000000 	andeq	r0, r0, r0
    bff4:	000be716 	andeq	lr, fp, r6, lsl r7
    bff8:	03150800 	tsteq	r5, #0, 16
    bffc:	0000cd08 	andeq	ip, r0, r8, lsl #26
    c000:	94160200 	ldrls	r0, [r6], #-512	; 0xfffffe00
    c004:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    c008:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    c00c:	04000002 	streq	r0, [r0], #-2
    c010:	00475a16 	subeq	r5, r7, r6, lsl sl
    c014:	03170800 	tsteq	r7, #0, 16
    c018:	00010009 	andeq	r0, r1, r9
    c01c:	0f160800 	svceq	0x00160800
    c020:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c024:	bb0f0318 	bllt	3ccc8c <__ccfg+0x3acce4>
    c028:	0c000003 	stceq	0, cr0, [r0], {3}
    c02c:	00095d16 	andeq	r5, r9, r6, lsl sp
    c030:	03190800 	tsteq	r9, #0, 16
    c034:	0003cb15 	andeq	ip, r3, r5, lsl fp
    c038:	0f002c00 	svceq	0x00002c00
    c03c:	0000034b 	andeq	r0, r0, fp, asr #6
    c040:	000003cb 	andeq	r0, r0, fp, asr #7
    c044:	00008818 	andeq	r8, r0, r8, lsl r8
    c048:	0a000300 	beq	cc50 <__exidx_end+0x6ed0>
    c04c:	00035804 	andeq	r5, r3, r4, lsl #16
    c050:	0bdc1100 	bleq	ff710458 <_estack+0xdf70b458>
    c054:	1c080000 	stcne	0, cr0, [r8], {-0}
    c058:	03581b03 	cmpeq	r8, #3072	; 0xc00
    c05c:	bc140000 	ldclt	0, cr0, [r4], {-0}
    c060:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    c064:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    c068:	01000003 	tsteq	r0, r3
    c06c:	d1040a01 	tstle	r4, r1, lsl #20
    c070:	19000003 	stmdbne	r0, {r0, r1}
    c074:	00294501 	eoreq	r4, r9, r1, lsl #10
    c078:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    c07c:	00008101 	andeq	r8, r0, r1, lsl #2
    c080:	00368000 	eorseq	r8, r6, r0
    c084:	003a1000 	eorseq	r1, sl, r0
    c088:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    c08c:	1a000005 	bne	c0a8 <__exidx_end+0x6328>
    c090:	00667562 	rsbeq	r7, r6, r2, ror #10
    c094:	86180801 	ldrhi	r0, [r8], -r1, lsl #16
    c098:	5d000005 	stcpl	0, cr0, [r0, #-20]	; 0xffffffec
    c09c:	1a000033 	bne	c170 <__exidx_end+0x63f0>
    c0a0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    c0a4:	86290801 	strthi	r0, [r9], -r1, lsl #16
    c0a8:	54000005 	strpl	r0, [r0], #-5
    c0ac:	1a000035 	bne	c188 <__exidx_end+0x6408>
    c0b0:	01007061 	tsteq	r0, r1, rrx
    c0b4:	00b53608 	adcseq	r3, r5, r8, lsl #12
    c0b8:	35880000 	strcc	r0, [r8]
    c0bc:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
    c0c0:	0a010063 	beq	4c254 <__ccfg+0x2c2ac>
    c0c4:	00008106 	andeq	r8, r0, r6, lsl #2
    c0c8:	00362100 	eorseq	r2, r6, r0, lsl #2
    c0cc:	28f91c00 	ldmcs	r9!, {sl, fp, ip}^
    c0d0:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    c0d4:	294b1c11 	stmdbcs	fp, {r0, r4, sl, fp, ip}^
    c0d8:	55010000 	strpl	r0, [r1, #-0]
    c0dc:	37421d16 	smlaldcc	r1, r2, r6, sp
    c0e0:	37b20000 	ldrcc	r0, [r2, r0]!
    c0e4:	04880000 	streq	r0, [r8], #0
    c0e8:	761e0000 	ldrvc	r0, [lr], -r0
    c0ec:	01007061 	tsteq	r0, r1, rrx
    c0f0:	010c114e 	tsteq	ip, lr, asr #2
    c0f4:	56010000 	strpl	r0, [r1], -r0
    c0f8:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    c0fc:	c1114e01 	tstgt	r1, r1, lsl #28
    c100:	a2000000 	andge	r0, r0, #0
    c104:	00000036 	andeq	r0, r0, r6, lsr r0
    c108:	0037b21d 	eorseq	fp, r7, sp, lsl r2
    c10c:	0037fa00 	eorseq	pc, r7, r0, lsl #20
    c110:	0004a400 	andeq	sl, r4, r0, lsl #8
    c114:	61761e00 	cmnvs	r6, r0, lsl #28
    c118:	4f010070 	svcmi	0x00010070
    c11c:	00010c11 	andeq	r0, r1, r1, lsl ip
    c120:	005e0100 	subseq	r0, lr, r0, lsl #2
    c124:	0010a81f 	andseq	sl, r0, pc, lsl r8
    c128:	0004d500 	andeq	sp, r4, r0, lsl #10
    c12c:	61761e00 	cmnvs	r6, r0, lsl #28
    c130:	50010070 	andpl	r0, r1, r0, ror r0
    c134:	00010c11 	andeq	r0, r1, r1, lsl ip
    c138:	205e0100 	subscs	r0, lr, r0, lsl #2
    c13c:	01006364 	tsteq	r0, r4, ror #6
    c140:	00811150 	addeq	r1, r1, r0, asr r1
    c144:	631b0000 	tstvs	fp, #0
    c148:	11500100 	cmpne	r0, r0, lsl #2
    c14c:	000001d3 	ldrdeq	r0, [r0], -r3
    c150:	000036c0 	andeq	r3, r0, r0, asr #13
    c154:	10c01f00 	sbcne	r1, r0, r0, lsl #30
    c158:	04fc0000 	ldrbteq	r0, [ip], #0
    c15c:	761e0000 	ldrvc	r0, [lr], -r0
    c160:	01007061 	tsteq	r0, r1, rrx
    c164:	058c1655 	streq	r1, [ip, #1621]	; 0x655
    c168:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    c16c:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    c170:	c1165501 	tstgt	r6, r1, lsl #10
    c174:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    c178:	00000036 	andeq	r0, r0, r6, lsr r0
    c17c:	0010701f 	andseq	r7, r0, pc, lsl r0
    c180:	00051400 	andeq	r1, r5, r0, lsl #8
    c184:	61761e00 	cmnvs	r6, r0, lsl #28
    c188:	56010070 			; <UNDEFINED> instruction: 0x56010070
    c18c:	00058c16 	andeq	r8, r5, r6, lsl ip
    c190:	005e0100 	subseq	r0, lr, r0, lsl #2
    c194:	0010d81f 	andseq	sp, r0, pc, lsl r8
    c198:	00054500 	andeq	r4, r5, r0, lsl #10
    c19c:	61761e00 	cmnvs	r6, r0, lsl #28
    c1a0:	57010070 	smlsdxpl	r1, r0, r0, r0
    c1a4:	00058c16 	andeq	r8, r5, r6, lsl ip
    c1a8:	205e0100 	subscs	r0, lr, r0, lsl #2
    c1ac:	01006364 	tsteq	r0, r4, ror #6
    c1b0:	00811657 	addeq	r1, r1, r7, asr r6
    c1b4:	631b0000 	tstvs	fp, #0
    c1b8:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    c1bc:	000001d3 	ldrdeq	r0, [r0], -r3
    c1c0:	000036fc 	strdeq	r3, [r0], -ip
    c1c4:	39c21d00 	stmibcc	r2, {r8, sl, fp, ip}^
    c1c8:	39d60000 	ldmibcc	r6, {}^	; <UNPREDICTABLE>
    c1cc:	056f0000 	strbeq	r0, [pc, #-0]!	; c1d4 <__exidx_end+0x6454>
    c1d0:	631b0000 	tstvs	fp, #0
    c1d4:	095c0100 	ldmdbeq	ip, {r8}^
    c1d8:	000001d3 	ldrdeq	r0, [r0], -r3
    c1dc:	0000371a 	andeq	r3, r0, sl, lsl r7
    c1e0:	7061731e 	rsbvc	r7, r1, lr, lsl r3
    c1e4:	0d5c0100 	ldfeqe	f0, [ip, #-0]
    c1e8:	000001cd 	andeq	r0, r0, sp, asr #3
    c1ec:	21005601 	tstcs	r0, r1, lsl #12
    c1f0:	00001088 	andeq	r1, r0, r8, lsl #1
    c1f4:	7061731b 	rsbvc	r7, r1, fp, lsl r3
    c1f8:	0a660100 	beq	198c600 <__ccfg+0x196c658>
    c1fc:	000001cd 	andeq	r0, r0, sp, asr #3
    c200:	0000372d 	andeq	r3, r0, sp, lsr #14
    c204:	040a0000 	streq	r0, [sl], #-0
    c208:	000001da 	ldrdeq	r0, [r0], -sl
    c20c:	00ef040a 	rsceq	r0, pc, sl, lsl #8
    c210:	ea000000 	b	c218 <__exidx_end+0x6498>
    c214:	0300001f 	movweq	r0, #31
    c218:	002ede00 	eoreq	sp, lr, r0, lsl #28
    c21c:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    c220:	0c000000 	stceq	0, cr0, [r0], {-0}
    c224:	00002959 	andeq	r2, r0, r9, asr r9
    c228:	00000e10 	andeq	r0, r0, r0, lsl lr
    c22c:	000071d3 	ldrdeq	r7, [r0], -r3
    c230:	5d060102 	stfpls	f0, [r6, #-8]
    c234:	0300000c 	movweq	r0, #12
    c238:	000031f3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    c23c:	30182501 	andscc	r2, r8, r1, lsl #10
    c240:	02000000 	andeq	r0, r0, #0
    c244:	0a6b0502 	beq	1acd654 <__ccfg+0x1aad6ac>
    c248:	04020000 	streq	r0, [r2], #-0
    c24c:	0007fd05 	andeq	pc, r7, r5, lsl #26
    c250:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    c254:	000007f8 	strdeq	r0, [r0], -r8
    c258:	002a2203 	eoreq	r2, sl, r3, lsl #4
    c25c:	182e0100 	stmdane	lr!, {r8}
    c260:	00000051 	andeq	r0, r0, r1, asr r0
    c264:	5b080102 	blpl	20c674 <__ccfg+0x1ec6cc>
    c268:	0300000c 	movweq	r0, #12
    c26c:	00002e18 	andeq	r2, r0, r8, lsl lr
    c270:	64193101 	ldrvs	r3, [r9], #-257	; 0xfffffeff
    c274:	02000000 	andeq	r0, r0, #0
    c278:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
    c27c:	ba030000 	blt	cc284 <__ccfg+0xac2dc>
    c280:	01000029 	tsteq	r0, r9, lsr #32
    c284:	007c1934 	rsbseq	r1, ip, r4, lsr r9
    c288:	6b040000 	blvs	10c290 <__ccfg+0xec2e8>
    c28c:	02000000 	andeq	r0, r0, #0
    c290:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    c294:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c298:	00042107 	andeq	r2, r4, r7, lsl #2
    c29c:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    c2a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    c2a4:	2b070402 	blcs	1cd2b4 <__ccfg+0x1ad30c>
    c2a8:	03000004 	movweq	r0, #4
    c2ac:	000029a3 	andeq	r2, r0, r3, lsr #19
    c2b0:	911a5601 	tstls	sl, r1, lsl #12
    c2b4:	06000000 	streq	r0, [r0], -r0
    c2b8:	00000bd5 	ldrdeq	r0, [r0], -r5
    c2bc:	17015e02 	strne	r5, [r1, -r2, lsl #28]
    c2c0:	00000091 	muleq	r0, r1, r0
    c2c4:	000e4f03 	andeq	r4, lr, r3, lsl #30
    c2c8:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
    c2cc:	00000037 	andeq	r0, r0, r7, lsr r0
    c2d0:	0002ff03 	andeq	pc, r2, r3, lsl #30
    c2d4:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
    c2d8:	00000037 	andeq	r0, r0, r7, lsr r0
    c2dc:	a5030407 	strge	r0, [r3, #-1031]	; 0xfffffbf9
    c2e0:	0000eb03 	andeq	lr, r0, r3, lsl #22
    c2e4:	076c0800 	strbeq	r0, [ip, -r0, lsl #16]!
    c2e8:	a7030000 	strge	r0, [r3, -r0]
    c2ec:	0000a40c 	andeq	sl, r0, ip, lsl #8
    c2f0:	0ab40800 	beq	fed0e2f8 <_estack+0xded092f8>
    c2f4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    c2f8:	0000eb13 	andeq	lr, r0, r3, lsl fp
    c2fc:	51090000 	mrspl	r0, (UNDEF: 9)
    c300:	fb000000 	blx	c30a <__exidx_end+0x658a>
    c304:	0a000000 	beq	c30c <__exidx_end+0x658c>
    c308:	00000091 	muleq	r0, r1, r0
    c30c:	080b0003 	stmdaeq	fp, {r0, r1}
    c310:	1f09a203 	svcne	0x0009a203
    c314:	0c000001 	stceq	0, cr0, [r0], {1}
    c318:	0000038e 	andeq	r0, r0, lr, lsl #7
    c31c:	8a07a403 	bhi	1f5330 <__ccfg+0x1d5388>
    c320:	00000000 	andeq	r0, r0, r0
    c324:	0006010c 	andeq	r0, r6, ip, lsl #2
    c328:	05a90300 	streq	r0, [r9, #768]!	; 0x300
    c32c:	000000c9 	andeq	r0, r0, r9, asr #1
    c330:	b5030004 	strlt	r0, [r3, #-4]
    c334:	03000008 	movweq	r0, #8
    c338:	00fb03aa 	rscseq	r0, fp, sl, lsr #7
    c33c:	040d0000 	streq	r0, [sp], #-0
    c340:	00084203 	andeq	r4, r8, r3, lsl #4
    c344:	19160400 	ldmdbne	r6, {sl}
    c348:	0000007c 	andeq	r0, r0, ip, ror r0
    c34c:	00025303 	andeq	r5, r2, r3, lsl #6
    c350:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
    c354:	0000008a 	andeq	r0, r0, sl, lsl #1
    c358:	00072a03 	andeq	r2, r7, r3, lsl #20
    c35c:	1b230400 	blne	8cd364 <__ccfg+0x8ad3bc>
    c360:	00000139 	andeq	r0, r0, r9, lsr r1
    c364:	0003320e 	andeq	r3, r3, lr, lsl #4
    c368:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
    c36c:	0001ab08 	andeq	sl, r1, r8, lsl #22
    c370:	0eca0c00 	cdpeq	12, 12, cr0, cr10, cr0, {0}
    c374:	36040000 	strcc	r0, [r4], -r0
    c378:	0001ab13 	andeq	sl, r1, r3, lsl fp
    c37c:	5f0f0000 	svcpl	0x000f0000
    c380:	3704006b 	strcc	r0, [r4, -fp, rrx]
    c384:	00008a07 	andeq	r8, r0, r7, lsl #20
    c388:	620c0400 	andvs	r0, ip, #0, 8
    c38c:	0400000b 	streq	r0, [r0], #-11
    c390:	008a0b37 	addeq	r0, sl, r7, lsr fp
    c394:	0c080000 	stceq	0, cr0, [r8], {-0}
    c398:	000043fb 	strdeq	r4, [r0], -fp
    c39c:	8a143704 	bhi	519fb4 <__ccfg+0x4fa00c>
    c3a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    c3a4:	0004550c 	andeq	r5, r4, ip, lsl #10
    c3a8:	1b370400 	blne	dcd3b0 <__ccfg+0xdad408>
    c3ac:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3b0:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    c3b4:	0b380400 	bleq	e0d3bc <__ccfg+0xded414>
    c3b8:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    c3bc:	04100014 	ldreq	r0, [r0], #-20	; 0xffffffec
    c3c0:	00000151 	andeq	r0, r0, r1, asr r1
    c3c4:	00012d09 	andeq	r2, r1, r9, lsl #26
    c3c8:	0001c100 	andeq	ip, r1, r0, lsl #2
    c3cc:	00910a00 	addseq	r0, r1, r0, lsl #20
    c3d0:	00000000 	andeq	r0, r0, r0
    c3d4:	000b7d0e 	andeq	r7, fp, lr, lsl #26
    c3d8:	3c042400 	cfstrscc	mvf2, [r4], {-0}
    c3dc:	00024408 	andeq	r4, r2, r8, lsl #8
    c3e0:	056c0c00 	strbeq	r0, [ip, #-3072]!	; 0xfffff400
    c3e4:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    c3e8:	00008a09 	andeq	r8, r0, r9, lsl #20
    c3ec:	b70c0000 	strlt	r0, [ip, -r0]
    c3f0:	04000003 	streq	r0, [r0], #-3
    c3f4:	008a093f 	addeq	r0, sl, pc, lsr r9
    c3f8:	0c040000 	stceq	0, cr0, [r4], {-0}
    c3fc:	00000358 	andeq	r0, r0, r8, asr r3
    c400:	8a094004 	bhi	25c418 <__ccfg+0x23c470>
    c404:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c408:	0006740c 	andeq	r7, r6, ip, lsl #8
    c40c:	09410400 	stmdbeq	r1, {sl}^
    c410:	0000008a 	andeq	r0, r0, sl, lsl #1
    c414:	09540c0c 	ldmdbeq	r4, {r2, r3, sl, fp}^
    c418:	42040000 	andmi	r0, r4, #0
    c41c:	00008a09 	andeq	r8, r0, r9, lsl #20
    c420:	ce0c1000 	cdpgt	0, 0, cr1, cr12, cr0, {0}
    c424:	0400000a 	streq	r0, [r0], #-10
    c428:	008a0943 	addeq	r0, sl, r3, asr #18
    c42c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    c430:	00000346 	andeq	r0, r0, r6, asr #6
    c434:	8a094404 	bhi	25d44c <__ccfg+0x23d4a4>
    c438:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    c43c:	0005750c 	andeq	r7, r5, ip, lsl #10
    c440:	09450400 	stmdbeq	r5, {sl}^
    c444:	0000008a 	andeq	r0, r0, sl, lsl #1
    c448:	08f00c1c 	ldmeq	r0!, {r2, r3, r4, sl, fp}^
    c44c:	46040000 	strmi	r0, [r4], -r0
    c450:	00008a09 	andeq	r8, r0, r9, lsl #20
    c454:	11002000 	mrsne	r2, (UNDEF: 0)
    c458:	0000003b 	andeq	r0, r0, fp, lsr r0
    c45c:	4f040108 	svcmi	0x00040108
    c460:	00028908 	andeq	r8, r2, r8, lsl #18
    c464:	0d330c00 	ldceq	12, cr0, [r3, #-0]
    c468:	50040000 	andpl	r0, r4, r0
    c46c:	0002890a 	andeq	r8, r2, sl, lsl #18
    c470:	170c0000 	strne	r0, [ip, -r0]
    c474:	0400000c 	streq	r0, [r0], #-12
    c478:	02890951 	addeq	r0, r9, #1327104	; 0x144000
    c47c:	12800000 	addne	r0, r0, #0
    c480:	00000dcc 	andeq	r0, r0, ip, asr #27
    c484:	2d0a5304 	stccs	3, cr5, [sl, #-16]
    c488:	00000001 	andeq	r0, r0, r1
    c48c:	0ebd1201 	cdpeq	2, 11, cr1, cr13, cr1, {0}
    c490:	56040000 	strpl	r0, [r4], -r0
    c494:	00012d0a 	andeq	r2, r1, sl, lsl #26
    c498:	00010400 	andeq	r0, r1, r0, lsl #8
    c49c:	00012b09 	andeq	r2, r1, r9, lsl #22
    c4a0:	00029900 	andeq	r9, r2, r0, lsl #18
    c4a4:	00910a00 	addseq	r0, r1, r0, lsl #20
    c4a8:	001f0000 	andseq	r0, pc, r0
    c4ac:	000a1611 	andeq	r1, sl, r1, lsl r6
    c4b0:	04019000 	streq	r9, [r1], #-0
    c4b4:	02dc0862 	sbcseq	r0, ip, #6422528	; 0x620000
    c4b8:	ca0c0000 	bgt	30c4c0 <__ccfg+0x2ec518>
    c4bc:	0400000e 	streq	r0, [r0], #-14
    c4c0:	02dc1263 	sbcseq	r1, ip, #805306374	; 0x30000006
    c4c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    c4c8:	00000584 	andeq	r0, r0, r4, lsl #11
    c4cc:	8a066404 	bhi	1a54e4 <__ccfg+0x18553c>
    c4d0:	04000000 	streq	r0, [r0], #-0
    c4d4:	0003070c 	andeq	r0, r3, ip, lsl #14
    c4d8:	09660400 	stmdbeq	r6!, {sl}^
    c4dc:	000002e2 	andeq	r0, r0, r2, ror #5
    c4e0:	003b0c08 	eorseq	r0, fp, r8, lsl #24
    c4e4:	67040000 	strvs	r0, [r4, -r0]
    c4e8:	0002441e 	andeq	r4, r2, lr, lsl r4
    c4ec:	10008800 	andne	r8, r0, r0, lsl #16
    c4f0:	00029904 	andeq	r9, r2, r4, lsl #18
    c4f4:	02f20900 	rscseq	r0, r2, #0, 18
    c4f8:	02f20000 	rscseq	r0, r2, #0
    c4fc:	910a0000 	mrsls	r0, (UNDEF: 10)
    c500:	1f000000 	svcne	0x00000000
    c504:	f8041000 			; <UNDEFINED> instruction: 0xf8041000
    c508:	13000002 	movwne	r0, #2
    c50c:	0cc50e01 	stcleq	14, cr0, [r5], {1}
    c510:	04080000 	streq	r0, [r8], #-0
    c514:	0322087a 			; <UNDEFINED> instruction: 0x0322087a
    c518:	d70c0000 	strle	r0, [ip, -r0]
    c51c:	0400000c 	streq	r0, [r0], #-12
    c520:	0322117b 			; <UNDEFINED> instruction: 0x0322117b
    c524:	0c000000 	stceq	0, cr0, [r0], {-0}
    c528:	00001da6 	andeq	r1, r0, r6, lsr #27
    c52c:	8a067c04 	bhi	1ab544 <__ccfg+0x18b59c>
    c530:	04000000 	streq	r0, [r0], #-0
    c534:	51041000 	mrspl	r1, (UNDEF: 4)
    c538:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c53c:	0000044d 	andeq	r0, r0, sp, asr #8
    c540:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
    c544:	0000046b 	andeq	r0, r0, fp, ror #8
    c548:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    c54c:	2212bb04 	andscs	fp, r2, #4, 22	; 0x1000
    c550:	00000003 	andeq	r0, r0, r3
    c554:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
    c558:	8a07bc04 	bhi	1fb570 <__ccfg+0x1db5c8>
    c55c:	04000000 	streq	r0, [r0], #-0
    c560:	00775f0f 	rsbseq	r5, r7, pc, lsl #30
    c564:	8a07bd04 	bhi	1fb97c <__ccfg+0x1db9d4>
    c568:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c56c:	0001c40c 	andeq	ip, r1, ip, lsl #8
    c570:	09be0400 	ldmibeq	lr!, {sl}
    c574:	00000030 	andeq	r0, r0, r0, lsr r0
    c578:	08590c0c 	ldmdaeq	r9, {r2, r3, sl, fp}^
    c57c:	bf040000 	svclt	0x00040000
    c580:	00003009 	andeq	r3, r0, r9
    c584:	5f0f0e00 	svcpl	0x000f0e00
    c588:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
    c58c:	02fa11c0 	rscseq	r1, sl, #192, 2	; 0x30
    c590:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c594:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    c598:	8a07c104 	bhi	1fc9b0 <__ccfg+0x1dca08>
    c59c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    c5a0:	00030c0c 	andeq	r0, r3, ip, lsl #24
    c5a4:	0ac80400 	beq	ff20d5ac <_estack+0xdf2085ac>
    c5a8:	0000012b 	andeq	r0, r0, fp, lsr #2
    c5ac:	1d350c1c 	ldcne	12, cr0, [r5, #-112]!	; 0xffffff90
    c5b0:	ca040000 	bgt	10c5b8 <__ccfg+0xec610>
    c5b4:	0005f01d 	andeq	pc, r5, sp, lsl r0	; <UNPREDICTABLE>
    c5b8:	fc0c2000 	stc2	0, cr2, [ip], {-0}
    c5bc:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    c5c0:	061b1dcc 	ldreq	r1, [fp], -ip, asr #27
    c5c4:	0c240000 	stceq	0, cr0, [r4], #-0
    c5c8:	00000eea 	andeq	r0, r0, sl, ror #29
    c5cc:	400dcf04 	andmi	ip, sp, r4, lsl #30
    c5d0:	28000006 	stmdacs	r0, {r1, r2}
    c5d4:	001cea0c 	andseq	lr, ip, ip, lsl #20
    c5d8:	09d00400 	ldmibeq	r0, {sl}^
    c5dc:	0000065b 	andeq	r0, r0, fp, asr r6
    c5e0:	755f0f2c 	ldrbvc	r0, [pc, #-3884]	; b6bc <__exidx_end+0x593c>
    c5e4:	d3040062 	movwle	r0, #16482	; 0x4062
    c5e8:	0002fa11 	andeq	pc, r2, r1, lsl sl	; <UNPREDICTABLE>
    c5ec:	5f0f3000 	svcpl	0x000f3000
    c5f0:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
    c5f4:	032212d4 			; <UNDEFINED> instruction: 0x032212d4
    c5f8:	0f380000 	svceq	0x00380000
    c5fc:	0072755f 	rsbseq	r7, r2, pc, asr r5
    c600:	8a07d504 	bhi	201a18 <__ccfg+0x1e1a70>
    c604:	3c000000 	stccc	0, cr0, [r0], {-0}
    c608:	000f210c 	andeq	r2, pc, ip, lsl #2
    c60c:	11d80400 	bicsne	r0, r8, r0, lsl #8
    c610:	00000661 	andeq	r0, r0, r1, ror #12
    c614:	0e6a0c40 	cdpeq	12, 6, cr0, cr10, cr0, {2}
    c618:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    c61c:	00067111 	andeq	r7, r6, r1, lsl r1
    c620:	5f0f4300 	svcpl	0x000f4300
    c624:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
    c628:	02fa11dc 	rscseq	r1, sl, #220, 2	; 0x37
    c62c:	0c440000 	mareq	acc0, r0, r4
    c630:	00000b74 	andeq	r0, r0, r4, ror fp
    c634:	8a07df04 	bhi	20424c <__ccfg+0x1e42a4>
    c638:	4c000000 	stcmi	0, cr0, [r0], {-0}
    c63c:	00047c0c 	andeq	r7, r4, ip, lsl #24
    c640:	0ae00400 	beq	ff80d648 <_estack+0xdf808648>
    c644:	000000b1 	strheq	r0, [r0], -r1
    c648:	47590c50 			; <UNDEFINED> instruction: 0x47590c50
    c64c:	e3040000 	movw	r0, #16384	; 0x4000
    c650:	00048a12 	andeq	r8, r4, r2, lsl sl
    c654:	9a0c5400 	bls	32165c <__ccfg+0x3016b4>
    c658:	0400000b 	streq	r0, [r0], #-11
    c65c:	01450ce7 	smlaltteq	r0, r5, r7, ip
    c660:	0c580000 	mraeq	r0, r8, acc0
    c664:	00000a1e 	andeq	r0, r0, lr, lsl sl
    c668:	1f0ee904 	svcne	0x000ee904
    c66c:	5c000001 	stcpl	0, cr0, [r0], {1}
    c670:	000e9d0c 	andeq	r9, lr, ip, lsl #26
    c674:	09ea0400 	stmibeq	sl!, {sl}^
    c678:	0000008a 	andeq	r0, r0, sl, lsl #1
    c67c:	01140064 	tsteq	r4, r4, rrx
    c680:	0000008a 	andeq	r0, r0, sl, lsl #1
    c684:	0000048a 	andeq	r0, r0, sl, lsl #9
    c688:	00048a15 	andeq	r8, r4, r5, lsl sl
    c68c:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c690:	de150000 	cdple	0, 1, cr0, cr5, cr0, {0}
    c694:	15000005 	strne	r0, [r0, #-5]
    c698:	0000008a 	andeq	r0, r0, sl, lsl #1
    c69c:	95041000 	strls	r1, [r4, #-0]
    c6a0:	04000004 	streq	r0, [r0], #-4
    c6a4:	0000048a 	andeq	r0, r0, sl, lsl #9
    c6a8:	000d6516 	andeq	r6, sp, r6, lsl r5
    c6ac:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
    c6b0:	de080265 	cdple	2, 0, cr0, cr8, cr5, {3}
    c6b4:	17000005 	strne	r0, [r0, -r5]
    c6b8:	00000904 	andeq	r0, r0, r4, lsl #18
    c6bc:	07026704 	streq	r6, [r2, -r4, lsl #14]
    c6c0:	0000008a 	andeq	r0, r0, sl, lsl #1
    c6c4:	07e21700 	strbeq	r1, [r2, r0, lsl #14]!
    c6c8:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c6cc:	06cd0b02 	strbeq	r0, [sp], r2, lsl #22
    c6d0:	17040000 	strne	r0, [r4, -r0]
    c6d4:	000002f7 	strdeq	r0, [r0], -r7
    c6d8:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
    c6dc:	000006cd 	andeq	r0, r0, sp, asr #13
    c6e0:	0f101708 	svceq	0x00101708
    c6e4:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c6e8:	06cd1e02 	strbeq	r1, [sp], r2, lsl #28
    c6ec:	170c0000 	strne	r0, [ip, -r0]
    c6f0:	0000057f 	andeq	r0, r0, pc, ror r5
    c6f4:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
    c6f8:	0000008a 	andeq	r0, r0, sl, lsl #1
    c6fc:	04d41710 	ldrbeq	r1, [r4], #1808	; 0x710
    c700:	6f040000 	svcvs	0x00040000
    c704:	08cd0802 	stmiaeq	sp, {r1, fp}^
    c708:	17140000 	ldrne	r0, [r4, -r0]
    c70c:	00000e7d 	andeq	r0, r0, sp, ror lr
    c710:	07027204 	streq	r7, [r2, -r4, lsl #4]
    c714:	0000008a 	andeq	r0, r0, sl, lsl #1
    c718:	42a71730 	adcmi	r1, r7, #48, 14	; 0xc00000
    c71c:	73040000 	movwvc	r0, #16384	; 0x4000
    c720:	08e31602 	stmiaeq	r3!, {r1, r9, sl, ip}^
    c724:	17340000 	ldrne	r0, [r4, -r0]!
    c728:	0000078a 	andeq	r0, r0, sl, lsl #15
    c72c:	07027504 	streq	r7, [r2, -r4, lsl #10]
    c730:	0000008a 	andeq	r0, r0, sl, lsl #1
    c734:	08841738 	stmeq	r4, {r3, r4, r5, r8, r9, sl, ip}
    c738:	77040000 	strvc	r0, [r4, -r0]
    c73c:	08f50a02 	ldmeq	r5!, {r1, r9, fp}^
    c740:	173c0000 	ldrne	r0, [ip, -r0]!
    c744:	00000350 	andeq	r0, r0, r0, asr r3
    c748:	13027a04 	movwne	r7, #10756	; 0x2a04
    c74c:	000001ab 	andeq	r0, r0, fp, lsr #3
    c750:	040b1740 	streq	r1, [fp], #-1856	; 0xfffff8c0
    c754:	7b040000 	blvc	10c75c <__ccfg+0xec7b4>
    c758:	008a0702 	addeq	r0, sl, r2, lsl #14
    c75c:	17440000 	strbne	r0, [r4, -r0]
    c760:	00000609 	andeq	r0, r0, r9, lsl #12
    c764:	13027c04 	movwne	r7, #11268	; 0x2c04
    c768:	000001ab 	andeq	r0, r0, fp, lsr #3
    c76c:	081f1748 	ldmdaeq	pc, {r3, r6, r8, r9, sl, ip}	; <UNPREDICTABLE>
    c770:	7d040000 	stcvc	0, cr0, [r4, #-0]
    c774:	08fb1402 	ldmeq	fp!, {r1, sl, ip}^
    c778:	174c0000 	strbne	r0, [ip, -r0]
    c77c:	00000b5a 	andeq	r0, r0, sl, asr fp
    c780:	07028004 	streq	r8, [r2, -r4]
    c784:	0000008a 	andeq	r0, r0, sl, lsl #1
    c788:	0c531750 	mrrceq	7, 5, r1, r3, cr0
    c78c:	81040000 	mrshi	r0, (UNDEF: 4)
    c790:	05de0902 	ldrbeq	r0, [lr, #2306]	; 0x902
    c794:	17540000 	ldrbne	r0, [r4, -r0]
    c798:	00000c6d 	andeq	r0, r0, sp, ror #24
    c79c:	0702a404 	streq	sl, [r2, -r4, lsl #8]
    c7a0:	000008a8 	andeq	r0, r0, r8, lsr #17
    c7a4:	0a161858 	beq	59290c <__ccfg+0x572964>
    c7a8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    c7ac:	02dc1302 	sbcseq	r1, ip, #134217728	; 0x8000000
    c7b0:	01480000 	mrseq	r0, (UNDEF: 72)
    c7b4:	0006ae18 	andeq	sl, r6, r8, lsl lr
    c7b8:	02a90400 	adceq	r0, r9, #0, 8
    c7bc:	00029912 	andeq	r9, r2, r2, lsl r9
    c7c0:	18014c00 	stmdane	r1, {sl, fp, lr}
    c7c4:	00000695 	muleq	r0, r5, r6
    c7c8:	0c02ad04 	stceq	13, cr10, [r2], {4}
    c7cc:	0000090d 	andeq	r0, r0, sp, lsl #18
    c7d0:	e91802dc 	ldmdb	r8, {r2, r3, r4, r6, r7, r9}
    c7d4:	0400000c 	streq	r0, [r0], #-12
    c7d8:	8e1002b2 	mrchi	2, 0, r0, cr0, cr2, {5}
    c7dc:	e0000006 	and	r0, r0, r6
    c7e0:	0aa61802 	beq	fe9927f0 <_estack+0xde98d7f0>
    c7e4:	b4040000 	strlt	r0, [r4], #-0
    c7e8:	09190a02 	ldmdbeq	r9, {r1, r9, fp}
    c7ec:	02ec0000 	rsceq	r0, ip, #0
    c7f0:	e4041000 	str	r1, [r4], #-0
    c7f4:	02000005 	andeq	r0, r0, #5
    c7f8:	0c640801 	stcleq	8, cr0, [r4], #-4
    c7fc:	e4040000 	str	r0, [r4], #-0
    c800:	10000005 	andne	r0, r0, r5
    c804:	00046b04 	andeq	r6, r4, r4, lsl #22
    c808:	8a011400 	bhi	51810 <__ccfg+0x31868>
    c80c:	15000000 	strne	r0, [r0, #-0]
    c810:	15000006 	strne	r0, [r0, #-6]
    c814:	0000048a 	andeq	r0, r0, sl, lsl #9
    c818:	00012b15 	andeq	r2, r1, r5, lsl fp
    c81c:	06151500 	ldreq	r1, [r5], -r0, lsl #10
    c820:	8a150000 	bhi	54c828 <__ccfg+0x52c880>
    c824:	00000000 	andeq	r0, r0, r0
    c828:	05eb0410 	strbeq	r0, [fp, #1040]!	; 0x410
    c82c:	04100000 	ldreq	r0, [r0], #-0
    c830:	000005f6 	strdeq	r0, [r0], -r6
    c834:	00bd0114 	adcseq	r0, sp, r4, lsl r1
    c838:	06400000 	strbeq	r0, [r0], -r0
    c83c:	8a150000 	bhi	54c844 <__ccfg+0x52c89c>
    c840:	15000004 	strne	r0, [r0, #-4]
    c844:	0000012b 	andeq	r0, r0, fp, lsr #2
    c848:	0000bd15 	andeq	fp, r0, r5, lsl sp
    c84c:	008a1500 	addeq	r1, sl, r0, lsl #10
    c850:	10000000 	andne	r0, r0, r0
    c854:	00062104 	andeq	r2, r6, r4, lsl #2
    c858:	8a011400 	bhi	51860 <__ccfg+0x318b8>
    c85c:	5b000000 	blpl	c864 <__exidx_end+0x6ae4>
    c860:	15000006 	strne	r0, [r0, #-6]
    c864:	0000048a 	andeq	r0, r0, sl, lsl #9
    c868:	00012b15 	andeq	r2, r1, r5, lsl fp
    c86c:	04100000 	ldreq	r0, [r0], #-0
    c870:	00000646 	andeq	r0, r0, r6, asr #12
    c874:	00005109 	andeq	r5, r0, r9, lsl #2
    c878:	00067100 	andeq	r7, r6, r0, lsl #2
    c87c:	00910a00 	addseq	r0, r1, r0, lsl #20
    c880:	00020000 	andeq	r0, r2, r0
    c884:	00005109 	andeq	r5, r0, r9, lsl #2
    c888:	00068100 	andeq	r8, r6, r0, lsl #2
    c88c:	00910a00 	addseq	r0, r1, r0, lsl #20
    c890:	00000000 	andeq	r0, r0, r0
    c894:	00046e06 	andeq	r6, r4, r6, lsl #28
    c898:	01240400 			; <UNDEFINED> instruction: 0x01240400
    c89c:	0003281a 	andeq	r2, r3, sl, lsl r8
    c8a0:	0cdd1900 			; <UNDEFINED> instruction: 0x0cdd1900
    c8a4:	040c0000 	streq	r0, [ip], #-0
    c8a8:	c7080128 	strgt	r0, [r8, -r8, lsr #2]
    c8ac:	17000006 	strne	r0, [r0, -r6]
    c8b0:	00000eca 	andeq	r0, r0, sl, asr #29
    c8b4:	11012a04 	tstne	r1, r4, lsl #20
    c8b8:	000006c7 	andeq	r0, r0, r7, asr #13
    c8bc:	0bce1700 	bleq	ff3924c4 <_estack+0xdf38d4c4>
    c8c0:	2b040000 	blcs	10c8c8 <__ccfg+0xec920>
    c8c4:	008a0701 	addeq	r0, sl, r1, lsl #14
    c8c8:	17040000 	strne	r0, [r4, -r0]
    c8cc:	00000772 	andeq	r0, r0, r2, ror r7
    c8d0:	0b012c04 	bleq	578e8 <__ccfg+0x37940>
    c8d4:	000006cd 	andeq	r0, r0, sp, asr #13
    c8d8:	04100008 	ldreq	r0, [r0], #-8
    c8dc:	0000068e 	andeq	r0, r0, lr, lsl #13
    c8e0:	06810410 	pkhbteq	r0, r1, r0, lsl #8
    c8e4:	da190000 	ble	64c8ec <__ccfg+0x62c944>
    c8e8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    c8ec:	08014404 	stmdaeq	r1, {r2, sl, lr}
    c8f0:	0000070c 	andeq	r0, r0, ip, lsl #14
    c8f4:	00165117 	andseq	r5, r6, r7, lsl r1
    c8f8:	01450400 	cmpeq	r5, r0, lsl #8
    c8fc:	00070c12 	andeq	r0, r7, r2, lsl ip
    c900:	31170000 	tstcc	r7, r0
    c904:	04000008 	streq	r0, [r0], #-8
    c908:	0c120146 	ldfeqs	f0, [r2], {70}	; 0x46
    c90c:	06000007 	streq	r0, [r0], -r7
    c910:	00150317 	andseq	r0, r5, r7, lsl r3
    c914:	01470400 	cmpeq	r7, r0, lsl #8
    c918:	00006412 	andeq	r6, r0, r2, lsl r4
    c91c:	09000c00 	stmdbeq	r0, {sl, fp}
    c920:	00000064 	andeq	r0, r0, r4, rrx
    c924:	0000071c 	andeq	r0, r0, ip, lsl r7
    c928:	0000910a 	andeq	r9, r0, sl, lsl #2
    c92c:	1a000200 	bne	d134 <__exidx_end+0x73b4>
    c930:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
    c934:	00083107 	andeq	r3, r8, r7, lsl #2
    c938:	0e701700 	cdpeq	7, 7, cr1, cr0, cr0, {0}
    c93c:	87040000 	strhi	r0, [r4, -r0]
    c940:	00911802 	addseq	r1, r1, r2, lsl #16
    c944:	17000000 	strne	r0, [r0, -r0]
    c948:	00000cf1 	strdeq	r0, [r0], -r1
    c94c:	12028804 	andne	r8, r2, #4, 16	; 0x40000
    c950:	000005de 	ldrdeq	r0, [r0], -lr
    c954:	04381704 	ldrteq	r1, [r8], #-1796	; 0xfffff8fc
    c958:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
    c95c:	08311002 	ldmdaeq	r1!, {r1, ip}
    c960:	17080000 	strne	r0, [r8, -r0]
    c964:	00000b43 	andeq	r0, r0, r3, asr #22
    c968:	17028a04 	strne	r8, [r2, -r4, lsl #20]
    c96c:	000001c1 	andeq	r0, r0, r1, asr #3
    c970:	07e91724 	strbeq	r1, [r9, r4, lsr #14]!
    c974:	8b040000 	blhi	10c97c <__ccfg+0xec9d4>
    c978:	008a0f02 	addeq	r0, sl, r2, lsl #30
    c97c:	17480000 	strbne	r0, [r8, -r0]
    c980:	00000ec5 	andeq	r0, r0, r5, asr #29
    c984:	2c028c04 	stccs	12, cr8, [r2], {4}
    c988:	00000083 	andeq	r0, r0, r3, lsl #1
    c98c:	007f1750 	rsbseq	r1, pc, r0, asr r7	; <UNPREDICTABLE>
    c990:	8d040000 	stchi	0, cr0, [r4, #-0]
    c994:	06d31a02 	ldrbeq	r1, [r3], r2, lsl #20
    c998:	17580000 	ldrbne	r0, [r8, -r0]
    c99c:	00000639 	andeq	r0, r0, r9, lsr r6
    c9a0:	16028e04 	strne	r8, [r2], -r4, lsl #28
    c9a4:	0000011f 	andeq	r0, r0, pc, lsl r1
    c9a8:	0cfe1768 	ldcleq	7, cr1, [lr], #416	; 0x1a0
    c9ac:	8f040000 	svchi	0x00040000
    c9b0:	011f1602 	tsteq	pc, r2, lsl #12
    c9b4:	17700000 	ldrbne	r0, [r0, -r0]!
    c9b8:	00000071 	andeq	r0, r0, r1, ror r0
    c9bc:	16029004 	strne	r9, [r2], -r4
    c9c0:	0000011f 	andeq	r0, r0, pc, lsl r1
    c9c4:	0b6a1778 	bleq	1a927ac <__ccfg+0x1a72804>
    c9c8:	91040000 	mrsls	r0, (UNDEF: 4)
    c9cc:	08411002 	stmdaeq	r1, {r1, ip}^
    c9d0:	17800000 	strne	r0, [r0, r0]
    c9d4:	00000415 	andeq	r0, r0, r5, lsl r4
    c9d8:	10029204 	andne	r9, r2, r4, lsl #4
    c9dc:	00000851 	andeq	r0, r0, r1, asr r8
    c9e0:	0c8d1788 	stceq	7, cr1, [sp], {136}	; 0x88
    c9e4:	93040000 	movwls	r0, #16384	; 0x4000
    c9e8:	008a0f02 	addeq	r0, sl, r2, lsl #30
    c9ec:	17a00000 	strne	r0, [r0, r0]!
    c9f0:	000002ac 	andeq	r0, r0, ip, lsr #5
    c9f4:	16029404 	strne	r9, [r2], -r4, lsl #8
    c9f8:	0000011f 	andeq	r0, r0, pc, lsl r1
    c9fc:	069f17a4 	ldreq	r1, [pc], r4, lsr #15
    ca00:	95040000 	strls	r0, [r4, #-0]
    ca04:	011f1602 	tsteq	pc, r2, lsl #12
    ca08:	17ac0000 	strne	r0, [ip, r0]!
    ca0c:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    ca10:	16029604 	strne	r9, [r2], -r4, lsl #12
    ca14:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca18:	084a17b4 	stmdaeq	sl, {r2, r4, r5, r7, r8, r9, sl, ip}^
    ca1c:	97040000 	strls	r0, [r4, -r0]
    ca20:	011f1602 	tsteq	pc, r2, lsl #12
    ca24:	17bc0000 	ldrne	r0, [ip, r0]!
    ca28:	00000628 	andeq	r0, r0, r8, lsr #12
    ca2c:	16029804 	strne	r9, [r2], -r4, lsl #16
    ca30:	0000011f 	andeq	r0, r0, pc, lsl r1
    ca34:	090217c4 	stmdbeq	r2, {r2, r6, r7, r8, r9, sl, ip}
    ca38:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    ca3c:	008a0802 	addeq	r0, sl, r2, lsl #16
    ca40:	00cc0000 	sbceq	r0, ip, r0
    ca44:	0005e409 	andeq	lr, r5, r9, lsl #8
    ca48:	00084100 	andeq	r4, r8, r0, lsl #2
    ca4c:	00910a00 	addseq	r0, r1, r0, lsl #20
    ca50:	00190000 	andseq	r0, r9, r0
    ca54:	0005e409 	andeq	lr, r5, r9, lsl #8
    ca58:	00085100 	andeq	r5, r8, r0, lsl #2
    ca5c:	00910a00 	addseq	r0, r1, r0, lsl #20
    ca60:	00070000 	andeq	r0, r7, r0
    ca64:	0005e409 	andeq	lr, r5, r9, lsl #8
    ca68:	00086100 	andeq	r6, r8, r0, lsl #2
    ca6c:	00910a00 	addseq	r0, r1, r0, lsl #20
    ca70:	00170000 	andseq	r0, r7, r0
    ca74:	9e04f01a 	mcrls	0, 0, pc, cr4, cr10, {0}	; <UNPREDICTABLE>
    ca78:	08880702 	stmeq	r8, {r1, r8, r9, sl}
    ca7c:	c0170000 	andsgt	r0, r7, r0
    ca80:	04000003 	streq	r0, [r0], #-3
    ca84:	881b02a1 	ldmdahi	fp, {r0, r5, r7, r9}
    ca88:	00000008 	andeq	r0, r0, r8
    ca8c:	000f1817 	andeq	r1, pc, r7, lsl r8	; <UNPREDICTABLE>
    ca90:	02a20400 	adceq	r0, r2, #0, 8
    ca94:	00089818 	andeq	r9, r8, r8, lsl r8
    ca98:	09007800 	stmdbeq	r0, {fp, ip, sp, lr}
    ca9c:	00000322 	andeq	r0, r0, r2, lsr #6
    caa0:	00000898 	muleq	r0, r8, r8
    caa4:	0000910a 	andeq	r9, r0, sl, lsl #2
    caa8:	09001d00 	stmdbeq	r0, {r8, sl, fp, ip}
    caac:	00000091 	muleq	r0, r1, r0
    cab0:	000008a8 	andeq	r0, r0, r8, lsr #17
    cab4:	0000910a 	andeq	r9, r0, sl, lsl #2
    cab8:	1b001d00 	blne	13ec0 <__exidx_end+0xe140>
    cabc:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
    cac0:	0008cd03 	andeq	ip, r8, r3, lsl #26
    cac4:	0d651c00 	stcleq	12, cr1, [r5, #-0]
    cac8:	9a040000 	bls	10cad0 <__ccfg+0xecb28>
    cacc:	071c0b02 	ldreq	r0, [ip, -r2, lsl #22]
    cad0:	521c0000 	andspl	r0, ip, #0
    cad4:	0400000b 	streq	r0, [r0], #-11
    cad8:	610b02a3 	smlatbvs	fp, r3, r2, r0
    cadc:	00000008 	andeq	r0, r0, r8
    cae0:	0005e409 	andeq	lr, r5, r9, lsl #8
    cae4:	0008dd00 	andeq	sp, r8, r0, lsl #26
    cae8:	00910a00 	addseq	r0, r1, r0, lsl #20
    caec:	00180000 	andseq	r0, r8, r0
    caf0:	000ed01d 	andeq	sp, lr, sp, lsl r0
    caf4:	04100100 	ldreq	r0, [r0], #-256	; 0xffffff00
    caf8:	000008dd 	ldrdeq	r0, [r0], -sp
    cafc:	08f5011e 	ldmeq	r5!, {r1, r2, r3, r4, r8}^
    cb00:	8a150000 	bhi	54cb08 <__ccfg+0x52cb60>
    cb04:	00000004 	andeq	r0, r0, r4
    cb08:	08e90410 	stmiaeq	r9!, {r4, sl}^
    cb0c:	04100000 	ldreq	r0, [r0], #-0
    cb10:	000001ab 	andeq	r0, r0, fp, lsr #3
    cb14:	090d011e 	stmdbeq	sp, {r1, r2, r3, r4, r8}
    cb18:	8a150000 	bhi	54cb20 <__ccfg+0x52cb78>
    cb1c:	00000000 	andeq	r0, r0, r0
    cb20:	09130410 	ldmdbeq	r3, {r4, sl}
    cb24:	04100000 	ldreq	r0, [r0], #-0
    cb28:	00000901 	andeq	r0, r0, r1, lsl #18
    cb2c:	00068109 	andeq	r8, r6, r9, lsl #2
    cb30:	00092900 	andeq	r2, r9, r0, lsl #18
    cb34:	00910a00 	addseq	r0, r1, r0, lsl #20
    cb38:	00020000 	andeq	r0, r2, r0
    cb3c:	000ac21f 	andeq	ip, sl, pc, lsl r2
    cb40:	03330400 	teqeq	r3, #0, 8
    cb44:	00048a17 	andeq	r8, r4, r7, lsl sl
    cb48:	1f010100 	svcne	0x00010100
    cb4c:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    cb50:	1d033404 	cfstrsne	mvf3, [r3, #-16]
    cb54:	00000490 	muleq	r0, r0, r4
    cb58:	e7030101 	str	r0, [r3, -r1, lsl #2]
    cb5c:	06000024 	streq	r0, [r0], -r4, lsr #32
    cb60:	006b123b 	rsbeq	r1, fp, fp, lsr r2
    cb64:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    cb68:	77094006 	strvc	r4, [r9, -r6]
    cb6c:	0c000009 	stceq	0, cr0, [r0], {9}
    cb70:	00001fea 	andeq	r1, r0, sl, ror #31
    cb74:	770d4106 	strvc	r4, [sp, -r6, lsl #2]
    cb78:	00000009 	andeq	r0, r0, r9
    cb7c:	00222d0c 	eoreq	r2, r2, ip, lsl #26
    cb80:	0d420600 	stcleq	6, cr0, [r2, #-0]
    cb84:	00000977 	andeq	r0, r0, r7, ror r9
    cb88:	04100004 	ldreq	r0, [r0], #-4
    cb8c:	00000045 	andeq	r0, r0, r5, asr #32
    cb90:	00273203 	eoreq	r3, r7, r3, lsl #4
    cb94:	03430600 	movteq	r0, #13824	; 0x3600
    cb98:	00000953 	andeq	r0, r0, r3, asr r9
    cb9c:	0022ae03 	eoreq	sl, r2, r3, lsl #28
    cba0:	2b3c0700 	blcs	f0e7a8 <__ccfg+0xeee800>
    cba4:	00000995 	muleq	r0, r5, r9
    cba8:	00254d0e 	eoreq	r4, r5, lr, lsl #26
    cbac:	6f071000 	svcvs	0x00071000
    cbb0:	0009f115 	andeq	pc, r9, r5, lsl r1	; <UNPREDICTABLE>
    cbb4:	1f190c00 	svcne	0x00190c00
    cbb8:	70070000 	andvc	r0, r7, r0
    cbbc:	0000580d 	andeq	r5, r0, sp, lsl #16
    cbc0:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    cbc4:	07000007 	streq	r0, [r0, -r7]
    cbc8:	00580d71 	subseq	r0, r8, r1, ror sp
    cbcc:	0c020000 	stceq	0, cr0, [r2], {-0}
    cbd0:	0000228c 	andeq	r2, r0, ip, lsl #5
    cbd4:	28137407 	ldmdacs	r3, {r0, r1, r2, sl, ip, sp, lr}
    cbd8:	0400000b 	streq	r0, [r0], #-11
    cbdc:	00201b0c 	eoreq	r1, r0, ip, lsl #22
    cbe0:	0c750700 	ldcleq	7, cr0, [r5], #-0
    cbe4:	00000947 	andeq	r0, r0, r7, asr #18
    cbe8:	22bc0c08 	adcscs	r0, ip, #8, 24	; 0x800
    cbec:	7d070000 	stcvc	0, cr0, [r7, #-0]
    cbf0:	000ab406 	andeq	fp, sl, r6, lsl #8
    cbf4:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    cbf8:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cbfc:	0afe0681 	beq	fff8e608 <_estack+0xdff89608>
    cc00:	000d0000 	andeq	r0, sp, r0
    cc04:	00208f03 	eoreq	r8, r0, r3, lsl #30
    cc08:	2a3f0700 	bcs	fce810 <__ccfg+0xfae868>
    cc0c:	000009fd 	strdeq	r0, [r0], -sp
    cc10:	0020820e 	eoreq	r8, r0, lr, lsl #4
    cc14:	e0071800 	and	r1, r7, r0, lsl #16
    cc18:	000ab415 	andeq	fp, sl, r5, lsl r4
    cc1c:	1f190c00 	svcne	0x00190c00
    cc20:	e1070000 	mrs	r0, (UNDEF: 7)
    cc24:	0000580d 	andeq	r5, r0, sp, lsl #16
    cc28:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    cc2c:	07000007 	streq	r0, [r0, -r7]
    cc30:	00580de2 	subseq	r0, r8, r2, ror #27
    cc34:	0c020000 	stceq	0, cr0, [r2], {-0}
    cc38:	0000228c 	andeq	r2, r0, ip, lsl #5
    cc3c:	2813e507 	ldmdacs	r3, {r0, r1, r2, r8, sl, sp, lr, pc}
    cc40:	0400000b 	streq	r0, [r0], #-11
    cc44:	00201b0c 	eoreq	r1, r0, ip, lsl #22
    cc48:	0ce60700 	stcleq	7, cr0, [r6]
    cc4c:	00000947 	andeq	r0, r0, r7, asr #18
    cc50:	22bc0c08 	adcscs	r0, ip, #8, 24	; 0x800
    cc54:	ee070000 	cdp	0, 0, cr0, cr7, cr0, {0}
    cc58:	000b3406 	andeq	r3, fp, r6, lsl #8
    cc5c:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    cc60:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cc64:	0b7e06f2 	bleq	1f8e834 <__ccfg+0x1f6e88c>
    cc68:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    cc6c:	00002658 	andeq	r2, r0, r8, asr r6
    cc70:	580df307 	stmdapl	sp, {r0, r1, r2, r8, r9, ip, sp, lr, pc}
    cc74:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    cc78:	0023b00c 	eoreq	fp, r3, ip
    cc7c:	0df40700 	ldcleq	7, cr0, [r4]
    cc80:	00000058 	andeq	r0, r0, r8, asr r0
    cc84:	20c20c10 	sbccs	r0, r2, r0, lsl ip
    cc88:	fa070000 	blx	1ccc90 <__ccfg+0x1acce8>
    cc8c:	000ba806 	andeq	sl, fp, r6, lsl #16
    cc90:	6c0c1200 	sfmvs	f1, 4, [ip], {-0}
    cc94:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cc98:	00450cfb 	strdeq	r0, [r5], #-203	; 0xffffff35
    cc9c:	0c130000 	ldceq	0, cr0, [r3], {-0}
    cca0:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
    cca4:	450cfc07 	strmi	pc, [ip, #-3079]	; 0xfffff3f9
    cca8:	14000000 	strne	r0, [r0], #-0
    ccac:	0025c50c 	eoreq	ip, r5, ip, lsl #10
    ccb0:	0cfd0700 	ldcleq	7, cr0, [sp]
    ccb4:	00000045 	andeq	r0, r0, r5, asr #32
    ccb8:	25ce0c15 	strbcs	r0, [lr, #3093]	; 0xc15
    ccbc:	fe070000 	cdp2	0, 0, cr0, cr7, cr0, {0}
    ccc0:	0000580d 	andeq	r5, r0, sp, lsl #16
    ccc4:	0b001600 	bleq	124cc <__exidx_end+0xc74c>
    ccc8:	04760701 	ldrbteq	r0, [r6], #-1793	; 0xfffff8ff
    cccc:	00000afe 	strdeq	r0, [r0], -lr
    ccd0:	00276f20 	eoreq	r6, r7, r0, lsr #30
    ccd4:	0f770700 	svceq	0x00770700
    ccd8:	00000045 	andeq	r0, r0, r5, asr #32
    ccdc:	00040401 	andeq	r0, r4, r1, lsl #8
    cce0:	00210d20 	eoreq	r0, r1, r0, lsr #26
    cce4:	0f780700 	svceq	0x00780700
    cce8:	00000045 	andeq	r0, r0, r5, asr #32
    ccec:	00030101 	andeq	r0, r3, r1, lsl #2
    ccf0:	0021cd20 	eoreq	ip, r1, r0, lsr #26
    ccf4:	0f7a0700 	svceq	0x007a0700
    ccf8:	00000045 	andeq	r0, r0, r5, asr #32
    ccfc:	00010201 	andeq	r0, r1, r1, lsl #4
    cd00:	001f8820 	andseq	r8, pc, r0, lsr #16
    cd04:	0f7b0700 	svceq	0x007b0700
    cd08:	00000045 	andeq	r0, r0, r5, asr #32
    cd0c:	00000101 	andeq	r0, r0, r1, lsl #2
    cd10:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd14:	0b28047e 	bleq	a0df14 <__ccfg+0x9edf6c>
    cd18:	ea200000 	b	80cd20 <__ccfg+0x7ecd78>
    cd1c:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cd20:	00450f7f 	subeq	r0, r5, pc, ror pc
    cd24:	04010000 	streq	r0, [r1], #-0
    cd28:	3e200004 	cdpcc	0, 2, cr0, cr0, cr4, {0}
    cd2c:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cd30:	00450f80 	subeq	r0, r5, r0, lsl #31
    cd34:	04010000 	streq	r0, [r1], #-0
    cd38:	10000000 	andne	r0, r0, r0
    cd3c:	00098904 	andeq	r8, r9, r4, lsl #18
    cd40:	6b041000 	blvs	110d48 <__ccfg+0xf0da0>
    cd44:	0b000000 	bleq	cd4c <__exidx_end+0x6fcc>
    cd48:	04e70701 	strbteq	r0, [r7], #1793	; 0x701
    cd4c:	00000b7e 	andeq	r0, r0, lr, ror fp
    cd50:	00276f20 	eoreq	r6, r7, r0, lsr #30
    cd54:	0fe80700 	svceq	0x00e80700
    cd58:	00000045 	andeq	r0, r0, r5, asr #32
    cd5c:	00040401 	andeq	r0, r4, r1, lsl #8
    cd60:	00210d20 	eoreq	r0, r1, r0, lsr #26
    cd64:	0fe90700 	svceq	0x00e90700
    cd68:	00000045 	andeq	r0, r0, r5, asr #32
    cd6c:	00030101 	andeq	r0, r3, r1, lsl #2
    cd70:	0021cd20 	eoreq	ip, r1, r0, lsr #26
    cd74:	0feb0700 	svceq	0x00eb0700
    cd78:	00000045 	andeq	r0, r0, r5, asr #32
    cd7c:	00010201 	andeq	r0, r1, r1, lsl #4
    cd80:	001f8820 	andseq	r8, pc, r0, lsr #16
    cd84:	0fec0700 	svceq	0x00ec0700
    cd88:	00000045 	andeq	r0, r0, r5, asr #32
    cd8c:	00000101 	andeq	r0, r0, r1, lsl #2
    cd90:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd94:	0ba804ef 	bleq	fea0e158 <_estack+0xdea09158>
    cd98:	ea200000 	b	80cda0 <__ccfg+0x7ecdf8>
    cd9c:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cda0:	00450ff0 	strdeq	r0, [r5], #-240	; 0xffffff10
    cda4:	04010000 	streq	r0, [r1], #-0
    cda8:	3e200004 	cdpcc	0, 2, cr0, cr0, cr4, {0}
    cdac:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cdb0:	00450ff1 	strdeq	r0, [r5], #-241	; 0xffffff0f
    cdb4:	04010000 	streq	r0, [r1], #-0
    cdb8:	0b000000 	bleq	cdc0 <__exidx_end+0x7040>
    cdbc:	04f50701 	ldrbteq	r0, [r5], #1793	; 0x701
    cdc0:	00000bd2 	ldrdeq	r0, [r0], -r2
    cdc4:	0020f720 	eoreq	pc, r0, r0, lsr #14
    cdc8:	0ff60700 	svceq	0x00f60700
    cdcc:	00000045 	andeq	r0, r0, r5, asr #32
    cdd0:	00070101 	andeq	r0, r7, r1, lsl #2
    cdd4:	00275820 	eoreq	r5, r7, r0, lsr #16
    cdd8:	0ff80700 	svceq	0x00f80700
    cddc:	00000045 	andeq	r0, r0, r5, asr #32
    cde0:	00010601 	andeq	r0, r1, r1, lsl #12
    cde4:	7d041000 	stcvc	0, cr1, [r4, #-0]
    cde8:	03000009 	movweq	r0, #9
    cdec:	0000262d 	andeq	r2, r0, sp, lsr #12
    cdf0:	e42f3d08 	strt	r3, [pc], #-3336	; cdf8 <__exidx_end+0x7078>
    cdf4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    cdf8:	0000263f 	andeq	r2, r0, pc, lsr r6
    cdfc:	15780818 	ldrbne	r0, [r8, #-2072]!	; 0xfffff7e8
    ce00:	00000c74 	andeq	r0, r0, r4, ror ip
    ce04:	001f190c 	andseq	r1, pc, ip, lsl #18
    ce08:	0d790800 	ldcleq	8, cr0, [r9, #-0]
    ce0c:	00000058 	andeq	r0, r0, r8, asr r0
    ce10:	07780c00 	ldrbeq	r0, [r8, -r0, lsl #24]!
    ce14:	7a080000 	bvc	20ce1c <__ccfg+0x1ece74>
    ce18:	0000580d 	andeq	r5, r0, sp, lsl #16
    ce1c:	8c0c0200 	sfmhi	f0, 4, [ip], {-0}
    ce20:	08000022 	stmdaeq	r0, {r1, r5}
    ce24:	0b28137d 	bleq	a11c20 <__ccfg+0x9f1c78>
    ce28:	0c040000 	stceq	0, cr0, [r4], {-0}
    ce2c:	0000201b 	andeq	r2, r0, fp, lsl r0
    ce30:	470c7e08 	strmi	r7, [ip, -r8, lsl #28]
    ce34:	08000009 	stmdaeq	r0, {r0, r3}
    ce38:	0022bc0c 	eoreq	fp, r2, ip, lsl #24
    ce3c:	06860800 	streq	r0, [r6], r0, lsl #16
    ce40:	00000e67 	andeq	r0, r0, r7, ror #28
    ce44:	22060c0c 	andcs	r0, r6, #12, 24	; 0xc00
    ce48:	8a080000 	bhi	20ce50 <__ccfg+0x1ecea8>
    ce4c:	000eb106 	andeq	fp, lr, r6, lsl #2
    ce50:	600c0d00 	andvs	r0, ip, r0, lsl #26
    ce54:	08000020 	stmdaeq	r0, {r5}
    ce58:	0edb0693 	mrceq	6, 6, r0, cr11, cr3, {4}
    ce5c:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    ce60:	000025e3 	andeq	r2, r0, r3, ror #11
    ce64:	450c9408 	strmi	r9, [ip, #-1032]	; 0xfffffbf8
    ce68:	0f000000 	svceq	0x00000000
    ce6c:	0023420c 	eoreq	r4, r3, ip, lsl #4
    ce70:	0d950800 	ldceq	8, cr0, [r5]
    ce74:	0000006b 	andeq	r0, r0, fp, rrx
    ce78:	1f460c10 	svcne	0x00460c10
    ce7c:	96080000 	strls	r0, [r8], -r0
    ce80:	0009770d 	andeq	r7, r9, sp, lsl #14
    ce84:	03001400 	movweq	r1, #1024	; 0x400
    ce88:	00002499 	muleq	r0, r9, r4
    ce8c:	802f3e08 	eorhi	r3, pc, r8, lsl #28
    ce90:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    ce94:	00002191 	muleq	r0, r1, r1
    ce98:	159f0824 	ldrne	r0, [pc, #2084]	; d6c4 <__exidx_end+0x7944>
    ce9c:	00000d5e 	andeq	r0, r0, lr, asr sp
    cea0:	001f190c 	andseq	r1, pc, ip, lsl #18
    cea4:	0da00800 	stceq	8, cr0, [r0]
    cea8:	00000058 	andeq	r0, r0, r8, asr r0
    ceac:	07780c00 	ldrbeq	r0, [r8, -r0, lsl #24]!
    ceb0:	a1080000 	mrsge	r0, (UNDEF: 8)
    ceb4:	0000580d 	andeq	r5, r0, sp, lsl #16
    ceb8:	8c0c0200 	sfmhi	f0, 4, [ip], {-0}
    cebc:	08000022 	stmdaeq	r0, {r1, r5}
    cec0:	0b2813a4 	bleq	a11d58 <__ccfg+0x9f1db0>
    cec4:	0c040000 	stceq	0, cr0, [r4], {-0}
    cec8:	0000201b 	andeq	r2, r0, fp, lsl r0
    cecc:	470ca508 	strmi	sl, [ip, -r8, lsl #10]
    ced0:	08000009 	stmdaeq	r0, {r0, r3}
    ced4:	0022bc0c 	eoreq	fp, r2, ip, lsl #24
    ced8:	06ad0800 	strteq	r0, [sp], r0, lsl #16
    cedc:	00000f15 	andeq	r0, r0, r5, lsl pc
    cee0:	22060c0c 	andcs	r0, r6, #12, 24	; 0xc00
    cee4:	b1080000 	mrslt	r0, (UNDEF: 8)
    cee8:	000f5f06 	andeq	r5, pc, r6, lsl #30
    ceec:	600c0d00 	andvs	r0, ip, r0, lsl #26
    cef0:	08000020 	stmdaeq	r0, {r5}
    cef4:	0f8906c3 	svceq	0x008906c3
    cef8:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    cefc:	000023f7 	strdeq	r2, [r0], -r7
    cf00:	1306cd08 	movwne	ip, #27912	; 0x6d08
    cf04:	0f000010 	svceq	0x00000010
    cf08:	0023420c 	eoreq	r4, r3, ip, lsl #4
    cf0c:	0dce0800 	stcleq	8, cr0, [lr]
    cf10:	0000006b 	andeq	r0, r0, fp, rrx
    cf14:	21450c10 	cmpcs	r5, r0, lsl ip
    cf18:	cf080000 	svcgt	0x00080000
    cf1c:	0000450c 	andeq	r4, r0, ip, lsl #10
    cf20:	490c1400 	stmdbmi	ip, {sl, ip}
    cf24:	08000024 	stmdaeq	r0, {r2, r5}
    cf28:	00450cd1 	ldrdeq	r0, [r5], #-193	; 0xffffff3f
    cf2c:	0c150000 	ldceq	0, cr0, [r5], {-0}
    cf30:	00002452 	andeq	r2, r0, r2, asr r4
    cf34:	450cd208 	strmi	sp, [ip, #-520]	; 0xfffffdf8
    cf38:	16000000 	strne	r0, [r0], -r0
    cf3c:	0021a30c 	eoreq	sl, r1, ip, lsl #6
    cf40:	06db0800 	ldrbeq	r0, [fp], r0, lsl #16
    cf44:	0000108d 	andeq	r1, r0, sp, lsl #1
    cf48:	26920c17 			; <UNDEFINED> instruction: 0x26920c17
    cf4c:	dc080000 	stcle	0, cr0, [r8], {-0}
    cf50:	0009470c 	andeq	r4, r9, ip, lsl #14
    cf54:	d70c1800 	strle	r1, [ip, -r0, lsl #16]
    cf58:	08000021 	stmdaeq	r0, {r0, r5}
    cf5c:	0bd211dd 	bleq	ff4916d8 <_estack+0xdf48c6d8>
    cf60:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    cf64:	00001fab 	andeq	r1, r0, fp, lsr #31
    cf68:	770dde08 	strvc	sp, [sp, -r8, lsl #28]
    cf6c:	20000009 	andcs	r0, r0, r9
    cf70:	247a0300 	ldrbtcs	r0, [sl], #-768	; 0xfffffd00
    cf74:	43080000 	movwmi	r0, #32768	; 0x8000
    cf78:	000d6a3c 	andeq	r6, sp, ip, lsr sl
    cf7c:	245b1900 	ldrbcs	r1, [fp], #-2304	; 0xfffff700
    cf80:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    cf84:	6715021a 			; <UNDEFINED> instruction: 0x6715021a
    cf88:	1700000e 	strne	r0, [r0, -lr]
    cf8c:	00001f19 	andeq	r1, r0, r9, lsl pc
    cf90:	0d021b08 	vstreq	d1, [r2, #-32]	; 0xffffffe0
    cf94:	00000058 	andeq	r0, r0, r8, asr r0
    cf98:	07781700 	ldrbeq	r1, [r8, -r0, lsl #14]!
    cf9c:	1d080000 	stcne	0, cr0, [r8, #-0]
    cfa0:	00580d02 	subseq	r0, r8, r2, lsl #26
    cfa4:	17020000 	strne	r0, [r2, -r0]
    cfa8:	0000228c 	andeq	r2, r0, ip, lsl #5
    cfac:	13022008 	movwne	r2, #8200	; 0x2008
    cfb0:	00000b28 	andeq	r0, r0, r8, lsr #22
    cfb4:	201b1704 	andscs	r1, fp, r4, lsl #14
    cfb8:	21080000 	mrscs	r0, (UNDEF: 8)
    cfbc:	09470c02 	stmdbeq	r7, {r1, sl, fp}^
    cfc0:	17080000 	strne	r0, [r8, -r0]
    cfc4:	000022bc 			; <UNDEFINED> instruction: 0x000022bc
    cfc8:	06022908 	streq	r2, [r2], -r8, lsl #18
    cfcc:	000010d7 	ldrdeq	r1, [r0], -r7
    cfd0:	2206170c 	andcs	r1, r6, #12, 14	; 0x300000
    cfd4:	2d080000 	stccs	0, cr0, [r8, #-0]
    cfd8:	11260602 			; <UNDEFINED> instruction: 0x11260602
    cfdc:	170d0000 	strne	r0, [sp, -r0]
    cfe0:	00001f0e 	andeq	r1, r0, lr, lsl #30
    cfe4:	06023308 	streq	r3, [r2], -r8, lsl #6
    cfe8:	00001153 	andeq	r1, r0, r3, asr r1
    cfec:	2275170e 	rsbscs	r1, r5, #3670016	; 0x380000
    cff0:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    cff4:	11800602 	orrne	r0, r0, r2, lsl #12
    cff8:	17100000 	ldrne	r0, [r0, -r0]
    cffc:	000020a4 	andeq	r2, r0, r4, lsr #1
    d000:	0c023908 			; <UNDEFINED> instruction: 0x0c023908
    d004:	00000045 	andeq	r0, r0, r5, asr #32
    d008:	23381714 	teqcs	r8, #20, 14	; 0x500000
    d00c:	41080000 	mrsmi	r0, (UNDEF: 8)
    d010:	11ad0602 			; <UNDEFINED> instruction: 0x11ad0602
    d014:	17150000 	ldrne	r0, [r5, -r0]
    d018:	00002010 	andeq	r2, r0, r0, lsl r0
    d01c:	06025508 	streq	r5, [r2], -r8, lsl #10
    d020:	000011da 	ldrdeq	r1, [r0], -sl
    d024:	14831716 	strne	r1, [r3], #1814	; 0x716
    d028:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    d02c:	123a0602 	eorsne	r0, sl, #2097152	; 0x200000
    d030:	17180000 	ldrne	r0, [r8, -r0]
    d034:	0000209c 	muleq	r0, ip, r0
    d038:	0d026908 	vstreq.16	s12, [r2, #-16]	; <UNPREDICTABLE>
    d03c:	00000058 	andeq	r0, r0, r8, asr r0
    d040:	24da171a 	ldrbcs	r1, [sl], #1818	; 0x71a
    d044:	6a080000 	bvs	20d04c <__ccfg+0x1ed0a4>
    d048:	0b2e0e02 	bleq	b90858 <__ccfg+0xb708b0>
    d04c:	171c0000 	ldrne	r0, [ip, -r0]
    d050:	00001f4b 	andeq	r1, r0, fp, asr #30
    d054:	0d026c08 	stceq	12, cr6, [r2, #-32]	; 0xffffffe0
    d058:	00000058 	andeq	r0, r0, r8, asr r0
    d05c:	22941720 	addscs	r1, r4, #32, 14	; 0x800000
    d060:	70080000 	andvc	r0, r8, r0
    d064:	00240c02 	eoreq	r0, r4, r2, lsl #24
    d068:	17220000 	strne	r0, [r2, -r0]!
    d06c:	000023d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    d070:	0c027308 	stceq	3, cr7, [r2], {8}
    d074:	00000045 	andeq	r0, r0, r5, asr #32
    d078:	010b0024 	tsteq	fp, r4, lsr #32
    d07c:	b1047f08 	tstlt	r4, r8, lsl #30
    d080:	2000000e 	andcs	r0, r0, lr
    d084:	0000276f 	andeq	r2, r0, pc, ror #14
    d088:	450f8008 	strmi	r8, [pc, #-8]	; d088 <__exidx_end+0x7308>
    d08c:	01000000 	mrseq	r0, (UNDEF: 0)
    d090:	20000404 	andcs	r0, r0, r4, lsl #8
    d094:	0000210d 	andeq	r2, r0, sp, lsl #2
    d098:	450f8108 	strmi	r8, [pc, #-264]	; cf98 <__exidx_end+0x7218>
    d09c:	01000000 	mrseq	r0, (UNDEF: 0)
    d0a0:	20000301 	andcs	r0, r0, r1, lsl #6
    d0a4:	000021cd 	andeq	r2, r0, sp, asr #3
    d0a8:	450f8308 	strmi	r8, [pc, #-776]	; cda8 <__exidx_end+0x7028>
    d0ac:	01000000 	mrseq	r0, (UNDEF: 0)
    d0b0:	20000102 	andcs	r0, r0, r2, lsl #2
    d0b4:	00001f88 	andeq	r1, r0, r8, lsl #31
    d0b8:	450f8408 	strmi	r8, [pc, #-1032]	; ccb8 <__exidx_end+0x6f38>
    d0bc:	01000000 	mrseq	r0, (UNDEF: 0)
    d0c0:	00000001 	andeq	r0, r0, r1
    d0c4:	8708010b 	strhi	r0, [r8, -fp, lsl #2]
    d0c8:	000edb04 	andeq	sp, lr, r4, lsl #22
    d0cc:	25ea2000 	strbcs	r2, [sl, #0]!
    d0d0:	88080000 	stmdahi	r8, {}	; <UNPREDICTABLE>
    d0d4:	0000450f 	andeq	r4, r0, pc, lsl #10
    d0d8:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d0dc:	273e2000 	ldrcs	r2, [lr, -r0]!
    d0e0:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    d0e4:	0000450f 	andeq	r4, r0, pc, lsl #10
    d0e8:	00040100 	andeq	r0, r4, r0, lsl #2
    d0ec:	010b0000 	mrseq	r0, (UNDEF: 11)
    d0f0:	15048b08 	strne	r8, [r4, #-2824]	; 0xfffff4f8
    d0f4:	2000000f 	andcs	r0, r0, pc
    d0f8:	0000267d 	andeq	r2, r0, sp, ror r6
    d0fc:	450f8c08 	strmi	r8, [pc, #-3080]	; c4fc <__exidx_end+0x677c>
    d100:	01000000 	mrseq	r0, (UNDEF: 0)
    d104:	20000701 	andcs	r0, r0, r1, lsl #14
    d108:	00002705 	andeq	r2, r0, r5, lsl #14
    d10c:	450f8f08 	strmi	r8, [pc, #-3848]	; c20c <__exidx_end+0x648c>
    d110:	01000000 	mrseq	r0, (UNDEF: 0)
    d114:	20000401 	andcs	r0, r0, r1, lsl #8
    d118:	00001f3e 	andeq	r1, r0, lr, lsr pc
    d11c:	450f9108 	strmi	r9, [pc, #-264]	; d01c <__exidx_end+0x729c>
    d120:	01000000 	mrseq	r0, (UNDEF: 0)
    d124:	00000301 	andeq	r0, r0, r1, lsl #6
    d128:	a608010b 	strge	r0, [r8], -fp, lsl #2
    d12c:	000f5f04 	andeq	r5, pc, r4, lsl #30
    d130:	276f2000 	strbcs	r2, [pc, -r0]!
    d134:	a7080000 	strge	r0, [r8, -r0]
    d138:	0000450f 	andeq	r4, r0, pc, lsl #10
    d13c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d140:	210d2000 	mrscs	r2, (UNDEF: 13)
    d144:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
    d148:	0000450f 	andeq	r4, r0, pc, lsl #10
    d14c:	03010100 	movweq	r0, #4352	; 0x1100
    d150:	21cd2000 	biccs	r2, sp, r0
    d154:	aa080000 	bge	20d15c <__ccfg+0x1ed1b4>
    d158:	0000450f 	andeq	r4, r0, pc, lsl #10
    d15c:	01020100 	mrseq	r0, (UNDEF: 18)
    d160:	1f882000 	svcne	0x00882000
    d164:	ab080000 	blge	20d16c <__ccfg+0x1ed1c4>
    d168:	0000450f 	andeq	r4, r0, pc, lsl #10
    d16c:	00010100 	andeq	r0, r1, r0, lsl #2
    d170:	010b0000 	mrseq	r0, (UNDEF: 11)
    d174:	8904ae08 	stmdbhi	r4, {r3, r9, sl, fp, sp, pc}
    d178:	2000000f 	andcs	r0, r0, pc
    d17c:	000025ea 	andeq	r2, r0, sl, ror #11
    d180:	450faf08 	strmi	sl, [pc, #-3848]	; c280 <__exidx_end+0x6500>
    d184:	01000000 	mrseq	r0, (UNDEF: 0)
    d188:	20000404 	andcs	r0, r0, r4, lsl #8
    d18c:	0000273e 	andeq	r2, r0, lr, lsr r7
    d190:	450fb008 	strmi	fp, [pc, #-8]	; d190 <__exidx_end+0x7410>
    d194:	01000000 	mrseq	r0, (UNDEF: 0)
    d198:	00000004 	andeq	r0, r0, r4
    d19c:	b208010b 	andlt	r0, r8, #-1073741822	; 0xc0000002
    d1a0:	00101304 	andseq	r1, r0, r4, lsl #6
    d1a4:	267d2000 	ldrbtcs	r2, [sp], -r0
    d1a8:	b3080000 	movwlt	r0, #32768	; 0x8000
    d1ac:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1b0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d1b4:	1fb32000 	svcne	0x00b32000
    d1b8:	b5080000 	strlt	r0, [r8, #-0]
    d1bc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1c0:	06010100 	streq	r0, [r1], -r0, lsl #2
    d1c4:	255b2000 	ldrbcs	r2, [fp, #-0]
    d1c8:	b7080000 	strlt	r0, [r8, -r0]
    d1cc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    d1d4:	27052000 	strcs	r2, [r5, -r0]
    d1d8:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    d1dc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1e0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d1e4:	1f3e2000 	svcne	0x003e2000
    d1e8:	bb080000 	bllt	20d1f0 <__ccfg+0x1ed248>
    d1ec:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1f0:	03010100 	movweq	r0, #4352	; 0x1100
    d1f4:	269a2000 	ldrcs	r2, [sl], r0
    d1f8:	bd080000 	stclt	0, cr0, [r8, #-0]
    d1fc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d200:	02010100 	andeq	r0, r1, #0, 2
    d204:	21de2000 	bicscs	r2, lr, r0
    d208:	bf080000 	svclt	0x00080000
    d20c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d210:	01010100 	mrseq	r0, (UNDEF: 17)
    d214:	25662000 	strbcs	r2, [r6, #-0]!
    d218:	c1080000 	mrsgt	r0, (UNDEF: 8)
    d21c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d220:	00010100 	andeq	r0, r1, r0, lsl #2
    d224:	010b0000 	mrseq	r0, (UNDEF: 11)
    d228:	8d04c408 	cfstrshi	mvf12, [r4, #-32]	; 0xffffffe0
    d22c:	20000010 	andcs	r0, r0, r0, lsl r0
    d230:	0000229c 	muleq	r0, ip, r2
    d234:	450fc508 	strmi	ip, [pc, #-1288]	; cd34 <__exidx_end+0x6fb4>
    d238:	01000000 	mrseq	r0, (UNDEF: 0)
    d23c:	20000701 	andcs	r0, r0, r1, lsl #14
    d240:	000020d5 	ldrdeq	r2, [r0], -r5
    d244:	450fc608 	strmi	ip, [pc, #-1544]	; cc44 <__exidx_end+0x6ec4>
    d248:	01000000 	mrseq	r0, (UNDEF: 0)
    d24c:	20000601 	andcs	r0, r0, r1, lsl #12
    d250:	00002210 	andeq	r2, r0, r0, lsl r2
    d254:	450fc808 	strmi	ip, [pc, #-2056]	; ca54 <__exidx_end+0x6cd4>
    d258:	01000000 	mrseq	r0, (UNDEF: 0)
    d25c:	20000401 	andcs	r0, r0, r1, lsl #8
    d260:	00002179 	andeq	r2, r0, r9, ror r1
    d264:	450fc908 	strmi	ip, [pc, #-2312]	; c964 <__exidx_end+0x6be4>
    d268:	01000000 	mrseq	r0, (UNDEF: 0)
    d26c:	20000301 	andcs	r0, r0, r1, lsl #6
    d270:	000024ef 	andeq	r2, r0, pc, ror #9
    d274:	450fca08 	strmi	ip, [pc, #-2568]	; c874 <__exidx_end+0x6af4>
    d278:	01000000 	mrseq	r0, (UNDEF: 0)
    d27c:	20000201 	andcs	r0, r0, r1, lsl #4
    d280:	00002025 	andeq	r2, r0, r5, lsr #32
    d284:	450fcb08 	strmi	ip, [pc, #-2824]	; c784 <__exidx_end+0x6a04>
    d288:	01000000 	mrseq	r0, (UNDEF: 0)
    d28c:	20000101 	andcs	r0, r0, r1, lsl #2
    d290:	00001f23 	andeq	r1, r0, r3, lsr #30
    d294:	450fcc08 	strmi	ip, [pc, #-3080]	; c694 <__exidx_end+0x6914>
    d298:	01000000 	mrseq	r0, (UNDEF: 0)
    d29c:	00000001 	andeq	r0, r0, r1
    d2a0:	d408010b 	strle	r0, [r8], #-267	; 0xfffffef5
    d2a4:	0010d704 	andseq	sp, r0, r4, lsl #14
    d2a8:	276f2000 	strbcs	r2, [pc, -r0]!
    d2ac:	d5080000 	strle	r0, [r8, #-0]
    d2b0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2b4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d2b8:	210d2000 	mrscs	r2, (UNDEF: 13)
    d2bc:	d6080000 	strle	r0, [r8], -r0
    d2c0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2c4:	03010100 	movweq	r0, #4352	; 0x1100
    d2c8:	21cd2000 	biccs	r2, sp, r0
    d2cc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    d2d0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2d4:	01020100 	mrseq	r0, (UNDEF: 18)
    d2d8:	1f882000 	svcne	0x00882000
    d2dc:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    d2e0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2e4:	00010100 	andeq	r0, r1, r0, lsl #2
    d2e8:	011a0000 	tsteq	sl, r0
    d2ec:	04022208 	streq	r2, [r2], #-520	; 0xfffffdf8
    d2f0:	00001126 	andeq	r1, r0, r6, lsr #2
    d2f4:	00276f21 	eoreq	r6, r7, r1, lsr #30
    d2f8:	02230800 	eoreq	r0, r3, #0, 16
    d2fc:	0000450f 	andeq	r4, r0, pc, lsl #10
    d300:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d304:	210d2100 	mrscs	r2, (UNDEF: 29)
    d308:	24080000 	strcs	r0, [r8], #-0
    d30c:	00450f02 	subeq	r0, r5, r2, lsl #30
    d310:	01010000 	mrseq	r0, (UNDEF: 1)
    d314:	cd210003 	stcgt	0, cr0, [r1, #-12]!
    d318:	08000021 	stmdaeq	r0, {r0, r5}
    d31c:	450f0226 	strmi	r0, [pc, #-550]	; d0fe <__exidx_end+0x737e>
    d320:	01000000 	mrseq	r0, (UNDEF: 0)
    d324:	21000102 	tstcs	r0, r2, lsl #2
    d328:	00001f88 	andeq	r1, r0, r8, lsl #31
    d32c:	0f022708 	svceq	0x00022708
    d330:	00000045 	andeq	r0, r0, r5, asr #32
    d334:	00000101 	andeq	r0, r0, r1, lsl #2
    d338:	08011a00 	stmdaeq	r1, {r9, fp, ip}
    d33c:	5304022a 	movwpl	r0, #16938	; 0x422a
    d340:	21000011 	tstcs	r0, r1, lsl r0
    d344:	000025ea 	andeq	r2, r0, sl, ror #11
    d348:	0f022b08 	svceq	0x00022b08
    d34c:	00000045 	andeq	r0, r0, r5, asr #32
    d350:	00040401 	andeq	r0, r4, r1, lsl #8
    d354:	00273e21 	eoreq	r3, r7, r1, lsr #28
    d358:	022c0800 	eoreq	r0, ip, #0, 16
    d35c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d360:	00040100 	andeq	r0, r4, r0, lsl #2
    d364:	021a0000 	andseq	r0, sl, #0
    d368:	04022e08 	streq	r2, [r2], #-3592	; 0xfffff1f8
    d36c:	00001180 	andeq	r1, r0, r0, lsl #3
    d370:	00222521 	eoreq	r2, r2, r1, lsr #10
    d374:	022f0800 	eoreq	r0, pc, #0, 16
    d378:	00005810 	andeq	r5, r0, r0, lsl r8
    d37c:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    d380:	27212100 	strcs	r2, [r1, -r0, lsl #2]!
    d384:	32080000 	andcc	r0, r8, #0
    d388:	00581002 	subseq	r1, r8, r2
    d38c:	0d020000 	stceq	0, cr0, [r2, #-0]
    d390:	1a000000 	bne	d398 <__exidx_end+0x7618>
    d394:	02340804 	eorseq	r0, r4, #4, 16	; 0x40000
    d398:	0011ad04 	andseq	sl, r1, r4, lsl #26
    d39c:	23ba2100 			; <UNDEFINED> instruction: 0x23ba2100
    d3a0:	35080000 	strcc	r0, [r8, #-0]
    d3a4:	006b1002 	rsbeq	r1, fp, r2
    d3a8:	04040000 	streq	r0, [r4], #-0
    d3ac:	ca21001c 	bgt	84d424 <__ccfg+0x82d47c>
    d3b0:	08000024 	stmdaeq	r0, {r2, r5}
    d3b4:	6b100237 	blvs	40dc98 <__ccfg+0x3edcf0>
    d3b8:	04000000 	streq	r0, [r0], #-0
    d3bc:	00000315 	andeq	r0, r0, r5, lsl r3
    d3c0:	3a08011a 	bcc	20d830 <__ccfg+0x1ed888>
    d3c4:	11da0402 	bicsne	r0, sl, r2, lsl #8
    d3c8:	16210000 	strtne	r0, [r1], -r0
    d3cc:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d3d0:	450f023b 	strmi	r0, [pc, #-571]	; d19d <__exidx_end+0x741d>
    d3d4:	01000000 	mrseq	r0, (UNDEF: 0)
    d3d8:	21000206 	tstcs	r0, r6, lsl #4
    d3dc:	00001fe0 	andeq	r1, r0, r0, ror #31
    d3e0:	0f023d08 	svceq	0x00023d08
    d3e4:	00000045 	andeq	r0, r0, r5, asr #32
    d3e8:	00000201 	andeq	r0, r0, r1, lsl #4
    d3ec:	08021a00 	stmdaeq	r2, {r9, fp, ip}
    d3f0:	3a040242 	bcc	10dd00 <__ccfg+0xedd58>
    d3f4:	21000012 	tstcs	r0, r2, lsl r0
    d3f8:	000023c3 	andeq	r2, r0, r3, asr #7
    d3fc:	10024308 	andne	r4, r2, r8, lsl #6
    d400:	00000058 	andeq	r0, r0, r8, asr r0
    d404:	000a0602 	andeq	r0, sl, r2, lsl #12
    d408:	00225f21 	eoreq	r5, r2, r1, lsr #30
    d40c:	02440800 	subeq	r0, r4, #0, 16
    d410:	00005810 	andeq	r5, r0, r0, lsl r8
    d414:	09010200 	stmdbeq	r1, {r9}
    d418:	242b2100 	strtcs	r2, [fp], #-256	; 0xffffff00
    d41c:	46080000 	strmi	r0, [r8], -r0
    d420:	00581002 	subseq	r1, r8, r2
    d424:	01020000 	mrseq	r0, (UNDEF: 2)
    d428:	c8210008 	stmdagt	r1!, {r3}
    d42c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d430:	58100248 	ldmdapl	r0, {r3, r6, r9}
    d434:	02000000 	andeq	r0, r0, #0
    d438:	21000404 	tstcs	r0, r4, lsl #8
    d43c:	00001f6b 	andeq	r1, r0, fp, ror #30
    d440:	10024d08 	andne	r4, r2, r8, lsl #26
    d444:	00000058 	andeq	r0, r0, r8, asr r0
    d448:	00000302 	andeq	r0, r0, r2, lsl #6
    d44c:	08021a00 	stmdaeq	r2, {r9, fp, ip}
    d450:	89040256 	stmdbhi	r4, {r1, r2, r4, r6, r9}
    d454:	21000012 	tstcs	r0, r2, lsl r0
    d458:	000021c0 	andeq	r2, r0, r0, asr #3
    d45c:	10025708 	andne	r5, r2, r8, lsl #14
    d460:	00000058 	andeq	r0, r0, r8, asr r0
    d464:	000d0302 	andeq	r0, sp, r2, lsl #6
    d468:	00215f21 	eoreq	r5, r1, r1, lsr #30
    d46c:	025d0800 	subseq	r0, sp, #0, 16
    d470:	00005810 	andeq	r5, r0, r0, lsl r8
    d474:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    d478:	20ff2100 	rscscs	r2, pc, r0, lsl #2
    d47c:	5f080000 	svcpl	0x00080000
    d480:	00581002 	subseq	r1, r8, r2
    d484:	06020000 	streq	r0, [r2], -r0
    d488:	fe210006 	cdp2	0, 2, cr0, cr1, cr6, {0}
    d48c:	08000023 	stmdaeq	r0, {r0, r1, r5}
    d490:	58100266 	ldmdapl	r0, {r1, r2, r5, r6, r9}
    d494:	02000000 	andeq	r0, r0, #0
    d498:	00000501 	andeq	r0, r0, r1, lsl #10
    d49c:	00007709 	andeq	r7, r0, r9, lsl #14
    d4a0:	00129900 	andseq	r9, r2, r0, lsl #18
    d4a4:	00910a00 	addseq	r0, r1, r0, lsl #20
    d4a8:	00a20000 	adceq	r0, r2, r0
    d4ac:	00128904 	andseq	r8, r2, r4, lsl #18
    d4b0:	22c92200 	sbccs	r2, r9, #0, 4
    d4b4:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
    d4b8:	00129910 	andseq	r9, r2, r0, lsl r9
    d4bc:	ad028c00 	stcge	12, cr8, [r2, #-0]
    d4c0:	49210004 	stmdbmi	r1!, {r2}
    d4c4:	7d210004 	stcvc	0, cr0, [r1, #-16]!
    d4c8:	81210004 			; <UNDEFINED> instruction: 0x81210004
    d4cc:	11210004 			; <UNDEFINED> instruction: 0x11210004
    d4d0:	91210005 			; <UNDEFINED> instruction: 0x91210005
    d4d4:	41210005 			; <UNDEFINED> instruction: 0x41210005
    d4d8:	f8210006 			; <UNDEFINED> instruction: 0xf8210006
    d4dc:	f84710b5 			; <UNDEFINED> instruction: 0xf84710b5
    d4e0:	00460eb5 	strheq	r0, [r6], #-229	; 0xffffff1b
    d4e4:	ad250121 	stfges	f0, [r5, #-132]!	; 0xffffff7c
    d4e8:	0a473004 	beq	11d9500 <__ccfg+0x11b9558>
    d4ec:	00780348 	rsbseq	r0, r8, r8, asr #6
    d4f0:	9bf80ff0 	blls	ffe114b8 <_estack+0xdfe0c4b8>
    d4f4:	12d00b07 	sbcsne	r0, r0, #7168	; 0x1c00
    d4f8:	ff78204c 			; <UNDEFINED> instruction: 0xff78204c
    d4fc:	ffd00728 			; <UNDEFINED> instruction: 0xffd00728
    d500:	0e702121 	rpweqsp	f2, f0, f1
    d504:	24240f49 	strtcs	r0, [r4], #-3913	; 0xfffff0b7
    d508:	60432002 	subvs	r2, r3, r2
    d50c:	f882c831 			; <UNDEFINED> instruction: 0xf882c831
    d510:	01b5f8bd 			; <UNDEFINED> instruction: 0x01b5f8bd
    d514:	6b470048 	blvs	11cd63c <__ccfg+0x11ad694>
    d518:	e5210002 	str	r0, [r1, #-2]!
    d51c:	0900004c 	stmdbeq	r0, {r2, r3, r6}
    d520:	08e00148 	stmiaeq	r0!, {r3, r6, r8}^
    d524:	060c0048 	streq	r0, [ip], -r8, asr #32
    d528:	2249054c 	subcs	r0, r9, #76, 10	; 0x13000000
    d52c:	012aff78 	msreq	(UNDEF: 58), r8
    d530:	227acad1 	rsbscs	ip, sl, #856064	; 0xd1000
    d534:	c8316070 	ldmdagt	r1!, {r4, r5, r6, sp, lr}
    d538:	80467082 	subhi	r7, r6, r2, lsl #1
    d53c:	0047001c 	subeq	r0, r7, ip, lsl r0
    d540:	a4400862 	strbge	r0, [r0], #-2146	; 0xfffff79e
    d544:	07210006 	streq	r0, [r1, -r6]!
    d548:	f008080f 			; <UNDEFINED> instruction: 0xf008080f
    d54c:	704708b4 	strhvc	r0, [r7], #-132	; 0xffffff7c
    d550:	154603b5 	strbne	r0, [r6, #-949]	; 0xfffffc4b
    d554:	06290146 	strteq	r0, [r9], -r6, asr #2
    d558:	062900d0 			; <UNDEFINED> instruction: 0x062900d0
    d55c:	284a11d0 	stmdacs	sl, {r4, r6, r7, r8, ip}^
    d560:	bbf7ff46 	bllt	ffe0d280 <_estack+0xdfe08280>
    d564:	0fbd70ff 	svceq	0x00bd70ff
    d568:	0fe00048 	svceq	0x00e00048
    d56c:	83240548 			; <UNDEFINED> instruction: 0x83240548
    d570:	40d80342 	sbcsmi	r0, r8, r2, asr #6
    d574:	001e6408 	andseq	r6, lr, r8, lsl #8
    d578:	e3dcf92c 	bics	pc, ip, #44, 18	; 0xb0000
    d57c:	40200140 	eormi	r0, r0, r0, asr #2
    d580:	82181803 	andshi	r1, r8, #196608	; 0x30000
    d584:	0729010b 	streq	r0, [r9, -fp, lsl #2]!
    d588:	004906d0 	ldrdeq	r0, [r9], #-96	; 0xffffffa0
    d58c:	28318023 	ldmdacs	r1!, {r0, r1, r5, pc}
    d590:	a5f7ff46 	ldrbge	pc, [r7, #3910]!	; 0xf46	; <UNPREDICTABLE>
    d594:	70b2e0ff 	ldrshtvc	lr, [r2], pc
    d598:	044902bd 	strbeq	r0, [r9], #-701	; 0xfffffd43
    d59c:	f6316c4b 			; <UNDEFINED> instruction: 0xf6316c4b
    d5a0:	830000e7 	movwhi	r0, #231	; 0xe7
    d5a4:	a000005c 	andge	r0, r0, ip, asr r0
    d5a8:	002386bc 	strhteq	r8, [r3], -ip
    d5ac:	74230d83 	strtvc	r0, [r3], #-3459	; 0xfffff27d
    d5b0:	f8210006 			; <UNDEFINED> instruction: 0xf8210006
    d5b4:	054e1ab5 	strbeq	r1, [lr, #-2741]	; 0xfffff54b
    d5b8:	196b7146 	stmdbne	fp!, {r1, r2, r6, r8, ip, sp, lr}^
    d5bc:	e409cc48 	str	ip, [r9], #-3144	; 0xfffff3b8
    d5c0:	112d0001 			; <UNDEFINED> instruction: 0x112d0001
    d5c4:	094918d0 	stmdbeq	r9, {r4, r6, r7, fp, ip}^
    d5c8:	0f290278 	svceq	0x00290278
    d5cc:	047b00d0 	ldrbteq	r0, [fp], #-208	; 0xffffff30
    d5d0:	01b67243 			; <UNDEFINED> instruction: 0x01b67243
    d5d4:	404f1520 	submi	r1, pc, r0, lsr #10
    d5d8:	1147b802 	cmpne	r7, r2, lsl #16
    d5dc:	00382048 	eorseq	r2, r8, r8, asr #32
    d5e0:	c909c188 	stmdbgt	r9, {r3, r7, r8, lr, pc}
    d5e4:	16d00407 	ldrbne	r0, [r0], r7, lsl #8
    d5e8:	f07ac0e0 			; <UNDEFINED> instruction: 0xf07ac0e0
    d5ec:	ee7b40e7 	cdp	0, 7, cr4, cr11, cr7, {7}
    d5f0:	74490fe7 	strbvc	r0, [r9], #-4071	; 0xfffff019
    d5f4:	4061cc63 	rsbmi	ip, r1, r3, ror #24
    d5f8:	0c07c00a 	stceq	0, cr12, [r7], {10}
    d5fc:	802001d0 	ldrdhi	r0, [r0], -r0	; <UNPREDICTABLE>
    d600:	006b3103 	rsbeq	r3, fp, r3, lsl #2
    d604:	01d0012d 	bicseq	r0, r0, sp, lsr #2
    d608:	81e00043 	mvnhi	r0, r3, asr #32
    d60c:	31460843 	cmpcc	r6, r3, asr #16
    d610:	40490763 	submi	r0, r9, r3, ror #14
    d614:	00634839 	rsbeq	r4, r3, r9, lsr r8
    d618:	6247b820 	subvs	fp, r7, #32, 16	; 0x200000
    d61c:	80bdf8b6 	ldrhthi	pc, [sp], r6	; <UNPREDICTABLE>
    d620:	88210002 	stmdahi	r1!, {r1}
    d624:	9b210000 	blls	84d62c <__ccfg+0x82d684>
    d628:	7b210002 	blvc	84d638 <__ccfg+0x82d690>
    d62c:	4000003f 	andmi	r0, r0, pc, lsr r0
    d630:	10400440 	subne	r0, r0, r0, asr #8
    d634:	004a22b5 	strheq	r2, [sl], #-37	; 0xffffffdb
    d638:	21615121 	cmncs	r1, r1, lsr #2
    d63c:	c9688949 	stmdbgt	r8!, {r0, r3, r6, r8, fp, pc}^
    d640:	21d40900 	bicscs	r0, r4, r0, lsl #18
    d644:	ca4b2049 	bgt	12d5770 <__ccfg+0x12b57c8>
    d648:	4b429805 	blmi	10b3664 <__ccfg+0x10936bc>
    d64c:	13d8016b 	bicsne	r0, r8, #-1073741798	; 0xc000001a
    d650:	93e00043 	mvnls	r0, #67	; 0x43
    d654:	1d634b43 	fstmdbxne	r3!, {d20-d52}	;@ Deprecated
    d658:	77f7ff49 	ldrbvc	pc, [r7, r9, asr #30]!	; <UNPREDICTABLE>
    d65c:	38bd10ff 	popcc	{r0, r1, r2, r3, r4, r5, r6, r7, ip}
    d660:	284d1ab5 	stmdacs	sp, {r0, r2, r4, r5, r7, r9, fp, ip}^
    d664:	2728007f 			; <UNDEFINED> instruction: 0x2728007f
    d668:	00481ad1 	ldrdeq	r1, [r8], #-161	; 0xffffff5f
    d66c:	c009c088 	andgt	ip, r9, r8, lsl #1
    d670:	12d12207 	sbcsne	r2, r1, #1879048192	; 0x70000000
    d674:	0069604c 	rsbeq	r6, r9, ip, asr #32
    d678:	68d11e28 	ldmvs	r1, {r3, r5, r9, sl, fp, ip}^
    d67c:	45f00046 	ldrbmi	r0, [r0, #70]!	; 0x46
    d680:	004668f8 	strdeq	r6, [r6], #-136	; 0xffffff78
    d684:	17280178 			; <UNDEFINED> instruction: 0x17280178
    d688:	404668d1 	ldrdmi	r6, [r6], #-129	; 0xffffff7f
    d68c:	13281078 			; <UNDEFINED> instruction: 0x13281078
    d690:	602008d2 	ldrdvs	r0, [r0], -r2	; <UNPREDICTABLE>
    d694:	406a6861 	rsbmi	r6, sl, r1, ror #16
    d698:	20014009 	andcs	r4, r1, r9
    d69c:	004a0e60 	subeq	r0, sl, r0, ror #28
    d6a0:	0d62d121 	stfeqp	f5, [r2, #-132]!	; 0xffffff7c
    d6a4:	1121024a 			; <UNDEFINED> instruction: 0x1121024a
    d6a8:	08210160 	stmdaeq	r1!, {r5, r6, r8}
    d6ac:	03602043 	cmneq	r0, #67	; 0x43
    d6b0:	68430821 	stmdavs	r3, {r0, r5, fp}^
    d6b4:	38602062 	stmdacc	r0!, {r1, r5, r6, sp}^
    d6b8:	804809bd 	strhhi	r0, [r8], #-157	; 0xffffff63
    d6bc:	00bd3847 	adcseq	r3, sp, r7, asr #16
    d6c0:	18400440 	stmdane	r0, {r6, sl}^
    d6c4:	00210000 	eoreq	r0, r1, r0
    d6c8:	80089300 	andhi	r9, r8, r0, lsl #6
    d6cc:	cf210002 	svcgt	0x00210002
    d6d0:	68000068 	stmdavs	r0, {r3, r5, r6}
    d6d4:	00210000 	eoreq	r0, r1, r0
    d6d8:	80400411 	subhi	r0, r0, r1, lsl r4
    d6dc:	c3e000e2 	mvngt	r0, #226	; 0xe2
    d6e0:	0700003b 	smladxeq	r0, fp, r0, r0
    d6e4:	00280049 	eoreq	r0, r8, r9, asr #32
    d6e8:	062004d0 			; <UNDEFINED> instruction: 0x062004d0
    d6ec:	09b6724a 	ldmibeq	r6!, {r1, r3, r6, r9, ip, sp, lr}
    d6f0:	0107c978 	tsteq	r7, r8, ror r9
    d6f4:	005810d0 	ldrsbeq	r1, [r8], #-0
    d6f8:	622080e0 	eorvs	r8, r0, #224	; 0xe0
    d6fc:	70b240b6 	ldrhtvc	r4, [r2], r6
    d700:	6b000047 	blvs	d824 <__exidx_end+0x7aa4>
    d704:	58210002 	stmdapl	r1!, {r1}
    d708:	03400460 	movteq	r0, #1120	; 0x460
    d70c:	014801b4 	strheq	r0, [r8, #-20]	; 0xffffffec
    d710:	a5bd0190 	ldrge	r0, [sp, #400]!	; 0x190
    d714:	0000006f 	andeq	r0, r0, pc, rrx
    d718:	01000000 	mrseq	r0, (UNDEF: 0)
    d71c:	0a000300 	beq	e324 <__exidx_end+0x85a4>
    d720:	59001f00 	stmdbpl	r0, {r8, r9, sl, fp, ip}
    d724:	3900eb00 	stmdbcc	r0, {r8, r9, fp, sp, lr, pc}
    d728:	f904ea02 			; <UNDEFINED> instruction: 0xf904ea02
    d72c:	eb129709 	bl	4b3358 <__ccfg+0x4933b0>
    d730:	7832a11f 	ldmdavc	r2!, {r0, r1, r2, r3, r4, r8, sp, pc}
    d734:	fa660a4a 	blx	1990064 <__ccfg+0x19700bc>
    d738:	639e8c82 	orrsvs	r8, lr, #33280	; 0x8200
    d73c:	64c917b6 	strbvs	r1, [r9], #1974	; 0x7b6
    d740:	c1deedd6 	ldrsbgt	lr, [lr, #214]	; 0xd6
    d744:	ffe5e0e3 			; <UNDEFINED> instruction: 0xffe5e0e3
    d748:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    d74c:	00000077 	andeq	r0, r0, r7, ror r0
    d750:	00001549 	andeq	r1, r0, r9, asr #10
    d754:	00009123 	andeq	r9, r0, r3, lsr #2
    d758:	0001ac00 	andeq	sl, r1, r0, lsl #24
    d75c:	00153804 	andseq	r3, r5, r4, lsl #16
    d760:	23522200 	cmpcs	r2, #0, 4
    d764:	3a0a0000 	bcc	28d76c <__ccfg+0x26d7c4>
    d768:	00154910 	andseq	r4, r5, r0, lsl r9
    d76c:	a306b400 	movwge	fp, #25600	; 0x6400
    d770:	7f000061 	svcvc	0x00000061
    d774:	4d130714 	ldcmi	7, cr0, [r3, #-80]	; 0xffffffb0
    d778:	2e24f100 	abscss	f7, f0
    d77c:	b03f131f 	eorslt	r1, pc, pc, lsl r3	; <UNPREDICTABLE>
    d780:	07003f0a 	streq	r3, [r0, -sl, lsl #30]
    d784:	300000ff 	strdcc	r0, [r0], -pc	; <UNPREDICTABLE>
    d788:	01400040 	cmpeq	r0, r0, asr #32
    d78c:	07400340 	strbeq	r0, [r0, -r0, asr #6]
    d790:	4f400f40 	svcmi	0x00400f40
    d794:	cf40cf40 	svcgt	0x0040cf40
    d798:	cf43cf41 	svcgt	0x0043cf41
    d79c:	cf4fcf47 	svcgt	0x004fcf47
    d7a0:	cf2fcf3f 	svcgt	0x002fcf3f
    d7a4:	000fcf1f 	andeq	ip, pc, pc, lsl pc	; <UNPREDICTABLE>
    d7a8:	0f000000 	svceq	0x00000000
    d7ac:	00000800 	andeq	r0, r0, r0, lsl #16
    d7b0:	00003f00 	andeq	r3, r0, r0, lsl #30
    d7b4:	3f004000 	svccc	0x00004000
    d7b8:	04000000 	streq	r0, [r0], #-0
    d7bc:	0e006800 	cdpeq	8, 0, cr6, cr0, cr0, {0}
    d7c0:	0600dc00 	streq	sp, [r0], -r0, lsl #24
    d7c4:	1a004300 	bne	1e3cc <__exidx_end+0x1864c>
    d7c8:	00000500 	andeq	r0, r0, r0, lsl #10
    d7cc:	02000000 	andeq	r0, r0, #0
    d7d0:	3f000000 	svccc	0x00000000
    d7d4:	00000000 	andeq	r0, r0, r0
    d7d8:	c0000400 	andgt	r0, r0, r0, lsl #8
    d7dc:	04000000 	streq	r0, [r0], #-0
    d7e0:	0000c000 	andeq	ip, r0, r0
    d7e4:	50000700 	andpl	r0, r0, r0, lsl #14
    d7e8:	009100c0 	addseq	r0, r1, r0, asr #1
    d7ec:	00c07070 	sbceq	r7, r0, r0, ror r0
    d7f0:	82700091 	rsbshi	r0, r0, #145	; 0x91
    d7f4:	31002131 	tstcc	r0, r1, lsr r1
    d7f8:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    d7fc:	01810170 	orreq	r0, r1, r0, ror r1
    d800:	82a100b1 	adchi	r0, r1, #177	; 0xb1
    d804:	10913231 	addsne	r3, r1, r1, lsr r2
    d808:	119101b1 			; <UNDEFINED> instruction: 0x119101b1
    d80c:	41814110 	orrmi	r4, r1, r0, lsl r1
    d810:	f1404f22 			; <UNDEFINED> instruction: 0xf1404f22
    d814:	51700006 	cmnpl	r0, r6
    d818:	309101c0 	addscc	r0, r1, r0, asr #3
    d81c:	83391018 	teqhi	r9, #24
    d820:	18d00831 	ldmne	r0, {r0, r4, r5, fp}^
    d824:	316f4131 	cmncc	pc, r1, lsr r1	; <UNPREDICTABLE>
    d828:	10913100 	addsne	r3, r1, r0, lsl #2
    d82c:	141483b1 	ldrne	r8, [r4], #-945	; 0xfffffc4f
    d830:	00685b16 	rsbeq	r5, r8, r6, lsl fp
    d834:	50102570 	andspl	r2, r0, r0, ror r5
    d838:	f49100c0 			; <UNDEFINED> instruction: 0xf49100c0
    d83c:	20c0c0c3 	sbccs	ip, r0, r3, asr #1
    d840:	316f0314 	cmncc	pc, r4, lsl r3	; <UNPREDICTABLE>
    d844:	22044110 	andcs	r4, r4, #16, 2
    d848:	213182c0 	teqcs	r1, r0, asr #5
    d84c:	10913100 	addsne	r3, r1, r0, lsl #2
    d850:	313963b1 	teqcc	r9, r1	; <illegal shifter operand>
    d854:	82044110 	andhi	r4, r4, #16, 2
    d858:	213182c0 	teqcs	r1, r0, asr #5
    d85c:	10913100 	addsne	r3, r1, r0, lsl #2
    d860:	313963b1 	teqcc	r9, r1	; <illegal shifter operand>
    d864:	82c0a210 	sbchi	sl, r0, #16, 4
    d868:	31002131 	tstcc	r0, r1, lsr r1
    d86c:	50b11091 	umlalspl	r1, r1, r1, r0	; <UNPREDICTABLE>
    d870:	05311510 	ldreq	r1, [r1, #-1296]!	; 0xfffffaf0
    d874:	00920514 	addseq	r0, r2, r4, lsl r5
    d878:	52643f70 	rsbpl	r3, r4, #112, 30	; 0x1c0
    d87c:	311031c0 	tstcc	r0, r0, asr #3
    d880:	c1316106 	teqgt	r1, r6, lsl #2
    d884:	12644202 	rsbne	r4, r4, #536870912	; 0x20000000
    d888:	211031c1 	tstcs	r0, r1, asr #3
    d88c:	51067139 	tstpl	r6, r9, lsr r1
    d890:	4202e131 	andmi	lr, r2, #1073741836	; 0x4000000c
    d894:	8a700064 	bhi	1c0da2c <__ccfg+0x1beda84>
    d898:	88659965 	stmdahi	r5!, {r0, r2, r5, r6, r8, fp, ip, pc}^
    d89c:	508220c0 	addpl	r2, r2, r0, asr #1
    d8a0:	00398039 	eorseq	r8, r9, r9, lsr r0
    d8a4:	41409f1e 	cmpmi	r0, lr, lsl pc
    d8a8:	183001c0 	ldmdane	r0!, {r6, r7, r8}
    d8ac:	891a1814 	ldmdbhi	sl, {r2, r4, fp, ip}
    d8b0:	608230c0 	addvs	r3, r2, r0, asr #1
    d8b4:	00398039 	eorseq	r8, r9, r9, lsr r0
    d8b8:	4140a91e 	cmpmi	r0, lr, lsl r9
    d8bc:	193001c0 	ldmdbne	r0!, {r6, r7, r8}
    d8c0:	3c1a1914 			; <UNDEFINED> instruction: 0x3c1a1914
    d8c4:	10913664 	addsne	r3, r1, r4, ror #12
    d8c8:	109134b1 			; <UNDEFINED> instruction: 0x109134b1
    d8cc:	00b054b1 	ldrhteq	r5, [r0], r1
    d8d0:	64a05471 	strtvs	r5, [r0], #1137	; 0x471
    d8d4:	0080f0b0 	strheq	pc, [r0], r0	; <UNPREDICTABLE>
    d8d8:	4040af22 	submi	sl, r0, r2, lsr #30
    d8dc:	3290b012 	addscc	fp, r0, #18
    d8e0:	538253b0 	orrpl	r5, r2, #176, 6	; 0xc0000002
    d8e4:	85395339 	ldrhi	r5, [r9, #-825]!	; 0xfffffcc7
    d8e8:	11643f64 	cmnne	r4, r4, ror #30
    d8ec:	42c122c1 	sbcmi	r2, r1, #268435468	; 0x1000000c
    d8f0:	c2c17064 	sbcgt	r7, r1, #100	; 0x64
    d8f4:	c2c11168 	sbcgt	r1, r1, #104, 2
    d8f8:	706442c0 	rsbvc	r4, r4, r0, asr #5
    d8fc:	5068c7c1 	rsbpl	ip, r8, r1, asr #15
    d900:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    d904:	15929872 	ldrne	r9, [r2, #2162]	; 0x872
    d908:	42161416 	andsmi	r1, r6, #369098752	; 0x16000000
    d90c:	f0105310 			; <UNDEFINED> instruction: 0xf0105310
    d910:	318221c1 	orrcc	r2, r2, r1, asr #3
    d914:	81393131 	teqhi	r9, r1, lsr r1
    d918:	51313139 	teqpl	r1, r9, lsr r1
    d91c:	72b270b0 	adcsvc	r7, r2, #176	; 0xb0
    d920:	99722765 	ldmdbls	r2!, {r0, r2, r5, r6, r8, r9, sl, sp}^
    d924:	62b27092 	adcsvs	r7, r2, #146	; 0x92
    d928:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    d92c:	218231c3 	orrcs	r3, r2, r3, asr #3
    d930:	81392131 	teqhi	r9, r1, lsr r1
    d934:	72101b39 	andsvc	r1, r0, #58368	; 0xe400
    d938:	82c0e265 	sbchi	lr, r0, #1342177286	; 0x50000006
    d93c:	80826031 	addhi	r6, r2, r1, lsr r0
    d940:	02398031 	eorseq	r8, r9, #49	; 0x31
    d944:	00b06100 	adcseq	r6, r0, r0, lsl #2
    d948:	10913271 	addsne	r3, r1, r1, ror r2
    d94c:	61a051b1 	lsrvs	r5, r1	; <illegal shifter operand>
    d950:	307227b0 	ldrhtcc	r2, [r2], #-112	; 0xffffff90
    d954:	0068f3c2 	rsbeq	pc, r8, r2, asr #7
    d958:	b0128000 	andslt	r8, r2, r0
    d95c:	00b03290 	umlalseq	r3, r0, r0, r2
    d960:	00c05070 	sbceq	r5, r0, r0, ror r0
    d964:	99722791 	ldmdbls	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    d968:	73106292 	tstvc	r0, #536870921	; 0x20000009
    d96c:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    d970:	21312182 	teqcs	r1, r2, lsl #3
    d974:	51398139 	teqpl	r9, r9, lsr r1
    d978:	7eb270b0 	mrcvc	0, 5, r7, cr2, cr0, {5}
    d97c:	98722765 	ldmdals	r2!, {r0, r2, r5, r6, r8, r9, sl, sp}^
    d980:	42b27092 	adcsmi	r7, r2, #146	; 0x92
    d984:	f0105310 			; <UNDEFINED> instruction: 0xf0105310
    d988:	318221c1 	orrcc	r2, r2, r1, asr #3
    d98c:	81393131 	teqhi	r9, r1, lsr r1
    d990:	1a313139 	bne	c59e7c <__ccfg+0xc39ed4>
    d994:	51657e10 	cmnpl	r5, r0, lsl lr
    d998:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    d99c:	18c0b072 	stmiane	r0, {r1, r4, r5, r6, ip, sp, pc}^
    d9a0:	01643f69 	cmneq	r4, r9, ror #30
    d9a4:	42c122c1 	sbcmi	r2, r1, #268435468	; 0x1000000c
    d9a8:	c2c10164 	sbcgt	r0, r1, #100, 2
    d9ac:	156442c0 	strbne	r4, [r4, #-704]!	; 0xfffffd40
    d9b0:	35643c1a 	strbcc	r3, [r4, #-3098]!	; 0xfffff3e6
    d9b4:	53b11091 			; <UNDEFINED> instruction: 0x53b11091
    d9b8:	c0648582 	rsbgt	r8, r4, r2, lsl #11
    d9bc:	3290b012 	addscc	fp, r0, #18
    d9c0:	3f7000b0 	svccc	0x007000b0
    d9c4:	81c27264 	bichi	r7, r2, r4, ror #4
    d9c8:	226442c0 	rsbcs	r4, r4, #192, 4
    d9cc:	42c111c1 	sbcmi	r1, r1, #1073741872	; 0x40000030
    d9d0:	11c00264 	bicne	r0, r0, r4, ror #4
    d9d4:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    d9d8:	42c331c0 	sbcmi	r3, r3, #192, 2	; 0x30
    d9dc:	11c36264 	bicne	r6, r3, r4, ror #4
    d9e0:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    d9e4:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    d9e8:	53825364 	orrpl	r5, r2, #100, 6	; 0x90000001
    d9ec:	e2648539 	rsb	r8, r4, #239075328	; 0xe400000
    d9f0:	116447c3 	cmnne	r4, r3, asr #15
    d9f4:	42414022 	submi	r4, r1, #34	; 0x22
    d9f8:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    d9fc:	11c25264 	bicne	r5, r2, r4, ror #4
    da00:	726442c1 	rsbvc	r4, r4, #268435468	; 0x1000000c
    da04:	42cee1c2 	sbcmi	lr, lr, #-2147483600	; 0x80000030
    da08:	81c20264 	bichi	r0, r2, r4, ror #4
    da0c:	026442c8 	rsbeq	r4, r4, #200, 4	; 0x8000000c
    da10:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    da14:	54c0b064 	strbpl	fp, [r0], #100	; 0x64
    da18:	3f700069 	svccc	0x00700069
    da1c:	01c24264 	biceq	r4, r2, r4, ror #4
    da20:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    da24:	42c011c2 	sbcmi	r1, r0, #-2147483600	; 0x80000030
    da28:	e1c27264 	bic	r7, r2, r4, ror #4
    da2c:	026442c0 	rsbeq	r4, r4, #192, 4
    da30:	42c101c0 	sbcmi	r0, r1, #192, 2	; 0x30
    da34:	01c06264 	biceq	r6, r0, r4, ror #4
    da38:	226442c3 	rsbcs	r4, r4, #805306380	; 0x3000000c
    da3c:	42c101c1 	sbcmi	r0, r1, #1073741872	; 0x40000030
    da40:	01c36264 	biceq	r6, r3, r4, ror #4
    da44:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    da48:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    da4c:	85825364 	strhi	r5, [r2, #868]	; 0x364
    da50:	61700064 	cmnvs	r0, r4, rrx
    da54:	127100b0 	rsbsne	r0, r1, #176	; 0xb0
    da58:	7a1c2314 	bvc	7166b0 <__ccfg+0x6f6708>
    da5c:	1091334d 	addsne	r3, r1, sp, asr #6
    da60:	327000b1 	rsbscc	r0, r0, #177	; 0xb1
    da64:	72b11091 	adcsvc	r1, r1, #145	; 0x91
    da68:	61700069 	cmnvs	r0, r9, rrx
    da6c:	137100b0 	cmnne	r1, #176	; 0xb0
    da70:	861c3218 			; <UNDEFINED> instruction: 0x861c3218
    da74:	10913249 	addsne	r3, r1, r9, asr #4
    da78:	337000b1 	cmncc	r0, #177	; 0xb1
    da7c:	7eb11091 	mrcvc	0, 5, r1, cr1, cr1, {4}
    da80:	c2700069 	rsbsgt	r0, r0, #105	; 0x69
    da84:	156447c0 	strbne	r4, [r4, #-1984]!	; 0xfffff840
    da88:	12c0c210 	sbcne	ip, r0, #16, 4
    da8c:	41644716 	cmnmi	r4, r6, lsl r7
    da90:	c0141531 	andsgt	r1, r4, r1, lsr r5
    da94:	053180c0 	ldreq	r8, [r1, #-192]!	; 0xffffff40
    da98:	a0105414 	andsge	r5, r0, r4, lsl r4
    da9c:	00040478 	andeq	r0, r4, r8, ror r4
    daa0:	86c0e670 			; <UNDEFINED> instruction: 0x86c0e670
    daa4:	16cc0131 			; <UNDEFINED> instruction: 0x16cc0131
    daa8:	61106714 	tstvs	r0, r4, lsl r7
    daac:	01c3f082 	biceq	pc, r3, r2, lsl #1
    dab0:	00141704 	andseq	r1, r4, r4, lsl #14
    dab4:	05730670 	ldrbeq	r0, [r3, #-1648]!	; 0xfffff990
    dab8:	0e720b72 	vmoveq.s8	r0, d2[7]
    dabc:	00b05072 	adcseq	r5, r0, r2, ror r0
    dac0:	60808171 	addvs	r8, r0, r1, ror r1
    dac4:	92a050b0 	adcls	r5, r0, #176	; 0xb0
    dac8:	c3224180 			; <UNDEFINED> instruction: 0xc3224180
    dacc:	f1808045 			; <UNDEFINED> instruction: 0xf1808045
    dad0:	300410c1 	andcc	r1, r4, r1, asr #1
    dad4:	01110116 	tsteq	r1, r6, lsl r1
    dad8:	d66c0114 			; <UNDEFINED> instruction: 0xd66c0114
    dadc:	d861d761 	stmdale	r1!, {r0, r5, r6, r8, r9, sl, ip, lr, pc}^
    dae0:	da61d961 	ble	188406c <__ccfg+0x18640c4>
    dae4:	dc61db61 			; <UNDEFINED> instruction: 0xdc61db61
    dae8:	e061de61 	rsb	sp, r1, r1, ror #28
    daec:	e461e261 	strbt	lr, [r1], #-609	; 0xfffffd9f
    daf0:	39633661 	stmdbcc	r3!, {r0, r5, r6, r9, sl, ip, sp}^
    daf4:	f2809163 	vmla.f<illegal width 8>	d9, d0, d3[4]
    daf8:	210421c0 	smlabtcs	r4, r0, r1, r2
    dafc:	42808231 	addmi	r8, r0, #268435459	; 0x10000003
    db00:	3214122a 	andscc	r1, r4, #-1610612734	; 0xa0000002
    db04:	21110116 	tstcs	r1, r6, lsl r1
    db08:	ee6c0114 	mcr	1, 3, r0, cr12, cr4, {0}
    db0c:	f4620b61 			; <UNDEFINED> instruction: 0xf4620b61
    db10:	ee633961 	vnmul.f16	s7, s6, s3
    db14:	f4620b61 			; <UNDEFINED> instruction: 0xf4620b61
    db18:	e6633961 	strbt	r3, [r3], -r1, ror #18
    db1c:	e661e661 	strbt	lr, [r1], -r1, ror #12
    db20:	e661e661 	strbt	lr, [r1], -r1, ror #12
    db24:	9461e661 	strbtls	lr, [r1], #-1633	; 0xfffff99f
    db28:	f961e664 			; <UNDEFINED> instruction: 0xf961e664
    db2c:	2a61e664 	bcs	18874c4 <__ccfg+0x186751c>
    db30:	5661e665 	strbtpl	lr, [r1], -r5, ror #12
    db34:	4661e665 	strbtmi	lr, [r1], -r5, ror #12
    db38:	1061e667 	rsbne	lr, r1, r7, ror #12
    db3c:	0e90b012 	mrceq	0, 4, fp, cr0, cr2, {0}
    db40:	05730672 	ldrbeq	r0, [r3, #-1650]!	; 0xfffff98e
    db44:	30121072 	andscc	r1, r2, r2, ror r0
    db48:	f061a790 			; <UNDEFINED> instruction: 0xf061a790
    db4c:	d4673ccf 	strbtle	r3, [r7], #-3279	; 0xfffff331
    db50:	c0c003c1 	sbcgt	r0, r0, r1, asr #7
    db54:	406454c3 	rsbmi	r5, r4, r3, asr #9
    db58:	50915078 	addspl	r5, r1, r8, ror r0
    db5c:	60921078 	addsvs	r1, r2, r8, ror r0
    db60:	70922078 	addsvc	r2, r2, r8, ror r0
    db64:	80923078 	addshi	r3, r2, r8, ror r0
    db68:	90924078 	addsls	r4, r2, r8, ror r0
    db6c:	30926078 	addscc	r6, r2, r8, ror r0
    db70:	10919078 	addsne	r9, r1, r8, ror r0
    db74:	f0394082 			; <UNDEFINED> instruction: 0xf0394082
    db78:	10100106 	andsne	r0, r0, r6, lsl #2
    db7c:	00141031 	andseq	r1, r4, r1, lsr r0
    db80:	e6674292 			; <UNDEFINED> instruction: 0xe6674292
    db84:	e2a0bc61 	adc	fp, r0, #24832	; 0x6100
    db88:	f0a054a0 			; <UNDEFINED> instruction: 0xf0a054a0
    db8c:	15225080 	strne	r5, [r2, #-128]!	; 0xffffff80
    db90:	00804046 	addeq	r4, r0, r6, asr #32
    db94:	0d472b22 	vstreq	d18, [r7, #-136]	; 0xffffff78
    db98:	2da04062 	stccs	0, cr4, [r0, #392]!	; 0x188
    db9c:	8d318d82 	ldchi	13, cr8, [r1, #-520]!	; 0xfffffdf8
    dba0:	f1821039 			; <UNDEFINED> instruction: 0xf1821039
    dba4:	090410c0 	stmdbeq	r4, {r6, r7, ip}
    dba8:	4a821a10 	bmi	fe0943f0 <_estack+0xde08f3f0>
    dbac:	10041a39 	andne	r1, r4, r9, lsr sl
    dbb0:	10398082 	eorsne	r8, r9, r2, lsl #1
    dbb4:	ab100e04 	blge	4113cc <__ccfg+0x3f1424>
    dbb8:	c210bc10 	andsgt	fp, r0, #16, 24	; 0x1000
    dbbc:	29646310 	stmdbcs	r4!, {r4, r8, r9, sp, lr}^
    dbc0:	3ccfe072 	stclcc	0, cr14, [pc], {114}	; 0x72
    dbc4:	03b01367 	movseq	r1, #-1677721599	; 0x9c000001
    dbc8:	5366c8b0 	cmnpl	r6, #176, 16	; 0xb00000
    dbcc:	54b050b0 	ldrtpl	r5, [r0], #176	; 0xb0
    dbd0:	13b064b0 	movsne	r6, #176, 8	; 0xb0000000
    dbd4:	1066a5b0 	strhtne	sl, [r6], #-80	; 0xffffffb0
    dbd8:	3822e082 	stmdacc	r2!, {r1, r7, sp, lr, pc}
    dbdc:	0066ae46 	rsbeq	sl, r6, r6, asr #28
    dbe0:	01804171 	orreq	r4, r0, r1, ror r1
    dbe4:	f0472b22 			; <UNDEFINED> instruction: 0xf0472b22
    dbe8:	4b221080 	blmi	891df0 <__ccfg+0x871e48>
    dbec:	1822f046 	stmdane	r2!, {r1, r2, r6, ip, sp, lr, pc}
    dbf0:	31b06447 	asrscc	r6, r7, #8
    dbf4:	63423822 	movtvs	r3, #10274	; 0x2822
    dbf8:	1066ceb0 	strhtne	ip, [r6], #-224	; 0xffffff20
    dbfc:	3822e082 	stmdacc	r2!, {r1, r7, sp, lr, pc}
    dc00:	38667046 	stmdacc	r6!, {r1, r2, r6, ip, sp, lr}^
    dc04:	6fb06462 	svcvs	0x00b06462
    dc08:	8f318f81 	svchi	0x00318f81
    dc0c:	ffdfd03d 			; <UNDEFINED> instruction: 0xffdfd03d
    dc10:	00673c92 	mlseq	r7, r2, ip, r3
    dc14:	01804171 	orreq	r4, r0, r1, ror r1
    dc18:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    dc1c:	5080f0b0 	strhpl	pc, [r0], r0	; <UNPREDICTABLE>
    dc20:	63426522 	movtvs	r6, #9506	; 0x2522
    dc24:	c18211b0 			; <UNDEFINED> instruction: 0xc18211b0
    dc28:	ce466022 	cdpgt	0, 4, cr6, cr6, cr2, {1}
    dc2c:	11670566 	cmnne	r7, r6, ror #10
    dc30:	5222d182 	eorpl	sp, r2, #-2147483616	; 0x80000020
    dc34:	52667046 	rsbpl	r7, r6, #70	; 0x46
    dc38:	72816162 	addvc	r6, r1, #-2147483624	; 0x80000018
    dc3c:	81318181 	teqhi	r1, r1, lsl #3
    dc40:	8231823d 	eorshi	r8, r1, #-805306365	; 0xd0000003
    dc44:	f1efc03d 			; <UNDEFINED> instruction: 0xf1efc03d
    dc48:	3c930292 	lfmcc	f0, 4, [r3], {146}	; 0x92
    dc4c:	b0620b67 	rsblt	r0, r2, r7, ror #22
    dc50:	d391c081 	orrsle	ip, r1, #129	; 0x81
    dc54:	90829781 	addls	r9, r2, r1, lsl #15
    dc58:	7f18d3a2 	svcvc	0x0018d3a2
    dc5c:	130bf34e 	movwne	pc, #45902	; 0xb34e	; <UNPREDICTABLE>
    dc60:	a41ce316 	ldrge	lr, [ip], #-790	; 0xfffffcea
    dc64:	e391c34a 	orrs	ip, r1, #671088641	; 0x28000001
    dc68:	90143b81 	andsls	r3, r4, r1, lsl #23
    dc6c:	8b1cba62 	blhi	73c5fc <__ccfg+0x71c654>
    dc70:	8b1e2346 	blhi	796990 <__ccfg+0x7769e8>
    dc74:	8b1ce34a 	blhi	7469a4 <__ccfg+0x7269fc>
    dc78:	07b2904e 	ldreq	r9, [r2, lr, asr #32]!
    dc7c:	90428b22 	subls	r8, r2, r2, lsr #22
    dc80:	961a1ba2 	ldrls	r1, [sl], -r2, lsr #23
    dc84:	a41ce362 	ldrge	lr, [ip], #-866	; 0xfffffc9e
    dc88:	e391c34a 	orrs	ip, r1, #671088641	; 0x28000001
    dc8c:	ab183b81 	blge	61ca98 <__ccfg+0x5fcaf0>
    dc90:	9b4ea01c 	blls	13b5d08 <__ccfg+0x1395d60>
    dc94:	bc4aa21c 	sfmlt	f2, 3, [sl], {28}
    dc98:	b242a41c 	sublt	sl, r2, #28, 8	; 0x1c000000
    dc9c:	d0821010 	addle	r1, r2, r0, lsl r0
    dca0:	f0429d22 			; <UNDEFINED> instruction: 0xf0429d22
    dca4:	a4221080 	strtge	r1, [r2], #-128	; 0xffffff80
    dca8:	a5646346 	strbge	r6, [r4, #-838]!	; 0xfffffcba
    dcac:	ab62a466 	blge	18b6e4c <__ccfg+0x1896ea4>
    dcb0:	9b629410 	blls	18b2cf8 <__ccfg+0x1892d50>
    dcb4:	00629410 	rsbeq	r9, r2, r0, lsl r4
    dcb8:	f1823070 			; <UNDEFINED> instruction: 0xf1823070
    dcbc:	630410c0 	movwvs	r1, #16576	; 0x40c0
    dcc0:	a87100b0 	ldmdage	r1!, {r4, r5, r7}^
    dcc4:	e010bc6a 	ands	fp, r0, sl, ror #24
    dcc8:	b27000b0 	rsbslt	r0, r0, #176	; 0xb0
    dccc:	d291c281 	addsle	ip, r1, #268435464	; 0x10000008
    dcd0:	12820181 	addne	r0, r2, #1073741856	; 0x40000020
    dcd4:	12815118 	addne	r5, r1, #24, 2
    dcd8:	81824118 	orrhi	r4, r2, r8, lsl r1
    dcdc:	123d8131 	eorsne	r8, sp, #1073741836	; 0x4000000c
    dce0:	e24abf1c 	sub	fp, sl, #28, 30	; 0x70
    dce4:	b0b032b0 	ldrhtlt	r3, [r0], r0
    dce8:	3c92f2df 	lfmcc	f7, 1, [r2], {223}	; 0xdf
    dcec:	21c7f167 	biccs	pc, r7, r7, ror #2
    dcf0:	124ec314 	subne	ip, lr, #20, 6	; 0x50000000
    dcf4:	729162c8 	addsvc	r6, r1, #200, 4	; 0x8000000c
    dcf8:	e1b03191 	lsls	r3, r1	; <illegal shifter operand>
    dcfc:	087000b0 	ldmdaeq	r0!, {r4, r5, r7}^
    dd00:	00c006c0 	sbceq	r0, r0, r0, asr #13
    dd04:	709160c8 	addsvc	r6, r1, r8, asr #1
    dd08:	01700091 			; <UNDEFINED> instruction: 0x01700091
    dd0c:	c081b082 	addgt	fp, r1, r2, lsl #1
    dd10:	1081d091 	umullne	sp, r1, r1, r0
    dd14:	10815118 	addne	r5, r1, r8, lsl r1
    dd18:	e1140618 	tst	r4, r8, lsl r6
    dd1c:	82824280 	addhi	r4, r2, #128, 4
    dd20:	203d8231 	eorscs	r8, sp, r1, lsr r2
    dd24:	e24ae41c 	sub	lr, sl, #28, 8	; 0x1c000000
    dd28:	e82221b0 	stmda	r2!, {r4, r5, r7, r8, sp}
    dd2c:	05b03246 	ldreq	r3, [r0, #582]!	; 0x246
    dd30:	f5dfa010 			; <UNDEFINED> instruction: 0xf5dfa010
    dd34:	21673c92 			; <UNDEFINED> instruction: 0x21673c92
    dd38:	e242e822 	sub	lr, r2, #2228224	; 0x220000
    dd3c:	31b032a0 	lsrscc	r3, r0, #5
    dd40:	f0394182 			; <UNDEFINED> instruction: 0xf0394182
    dd44:	010401c0 	smlabteq	r4, r0, r1, r0
    dd48:	1842f61e 	stmdane	r2, {r1, r2, r3, r4, r9, sl, ip, sp, lr, pc}^
    dd4c:	10c01016 	sbcne	r1, r0, r6, lsl r0
    dd50:	041c0830 	ldreq	r0, [ip], #-2096	; 0xfffff7d0
    dd54:	10106047 	andsne	r6, r0, r7, asr #32
    dd58:	f110063c 			; <UNDEFINED> instruction: 0xf110063c
    dd5c:	fa1461c7 	blx	526480 <__ccfg+0x5064d8>
    dd60:	66c8164e 	strbvs	r1, [r8], lr, asr #12
    dd64:	81817191 			; <UNDEFINED> instruction: 0x81817191
    dd68:	163d8131 			; <UNDEFINED> instruction: 0x163d8131
    dd6c:	764b011c 			; <UNDEFINED> instruction: 0x764b011c
    dd70:	06b03191 	ssateq	r3, #17, r1, lsl #3
    dd74:	00c008c0 	sbceq	r0, r0, r0, asr #17
    dd78:	81816170 	orrhi	r6, r1, r0, ror r1
    dd7c:	403d8131 	eorsmi	r8, sp, r1, lsr r1
    dd80:	01398082 	teqeq	r9, r2, lsl #1
    dd84:	171cf118 	sdivne	ip, r8, r1
    dd88:	b014014b 	andslt	r0, r4, fp, asr #2
    dd8c:	1722c080 	strne	ip, [r2, -r0, lsl #1]!
    dd90:	33b0bc47 	movscc	fp, #18176	; 0x4700
    dd94:	f1ef90b0 			; <UNDEFINED> instruction: 0xf1ef90b0
    dd98:	3c930f92 	ldccc	15, cr0, [r3], {146}	; 0x92
    dd9c:	03700067 	cmneq	r0, #103	; 0x67
    dda0:	64b063a0 	ldrtvs	r6, [r0], #928	; 0x3a0
    dda4:	56b0efb0 			; <UNDEFINED> instruction: 0x56b0efb0
    dda8:	40710065 	rsbsmi	r0, r1, r5, rrx
    ddac:	2b220080 	blcs	88dfb4 <__ccfg+0x86e00c>
    ddb0:	2ab06447 	bcs	fec26ed4 <_estack+0xdec21ed4>
    ddb4:	00a0ef65 	adceq	lr, r0, r5, ror #30
    ddb8:	00804071 	addeq	r4, r0, r1, ror r0
    ddbc:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    ddc0:	38b003b0 	ldmcc	r0!, {r4, r5, r7, r8, r9}
    ddc4:	62820162 	addvs	r0, r2, #-2147483624	; 0x80000018
    ddc8:	82318281 	eorshi	r8, r1, #268435464	; 0x10000008
    ddcc:	f1ef803d 			; <UNDEFINED> instruction: 0xf1ef803d
    ddd0:	3c930292 	lfmcc	f0, 4, [r3], {146}	; 0x92
    ddd4:	56a00367 	strtpl	r0, [r0], r7, ror #6
    ddd8:	a261e665 	rsbge	lr, r1, #105906176	; 0x6500000
    dddc:	e6646380 	strbt	r6, [r4], -r0, lsl #7
    dde0:	00b05061 	adcseq	r5, r0, r1, rrx
    dde4:	e061e671 	rsb	lr, r1, r1, ror r6
    dde8:	0082d092 	umulleq	sp, r2, r2, r0
    ddec:	c0473d22 	subgt	r3, r7, r2, lsr #26
    ddf0:	a07000b2 	ldrhtge	r0, [r0], #-2
    ddf4:	5922f080 	stmdbpl	r2!, {r7, ip, sp, lr, pc}
    ddf8:	02b03043 	adcseq	r3, r0, #67	; 0x43
    ddfc:	013162c1 	teqeq	r1, r1, asr #5
    de00:	0080a0c0 	addeq	sl, r0, r0, asr #1
    de04:	f043521e 			; <UNDEFINED> instruction: 0xf043521e
    de08:	a0435322 	subge	r5, r3, r2, lsr #6
    de0c:	603160f5 	ldrshtvs	r6, [r1], -r5
    de10:	20635339 	rsbcs	r5, r3, r9, lsr r3
    de14:	131a1010 	tstne	sl, #16
    de18:	116e236f 	cmnne	lr, pc, ror #6
    de1c:	54161216 	ldrpl	r1, [r6], #-534	; 0xfffffdea
    de20:	0370006b 	cmneq	r0, #107	; 0x6b
    de24:	00002901 	andeq	r2, r0, r1, lsl #18
    de28:	5812270b 	ldmdapl	r2, {r0, r1, r3, r8, r9, sl, sp}
    de2c:	04000000 	streq	r0, [r0], #-0
    de30:	00001c10 	andeq	r1, r0, r0, lsl ip
    de34:	001c1024 	andseq	r1, ip, r4, lsr #32
    de38:	1dc80300 	stclne	3, cr0, [r8]
    de3c:	2b0b0000 	blcs	2cde44 <__ccfg+0x2ade9c>
    de40:	00004512 	andeq	r4, r0, r2, lsl r5
    de44:	1c262400 	cfstrsne	mvf2, [r6], #-0
    de48:	53030000 	movwpl	r0, #12288	; 0x3000
    de4c:	0b000029 	bleq	def8 <__exidx_end+0x8178>
    de50:	006b122c 	rsbeq	r1, fp, ip, lsr #4
    de54:	37040000 	strcc	r0, [r4, -r0]
    de58:	0300001c 	movweq	r0, #28
    de5c:	00000646 	andeq	r0, r0, r6, asr #12
    de60:	6b122d0b 	blvs	499294 <__ccfg+0x4792ec>
    de64:	0b000000 	bleq	de6c <__exidx_end+0x80ec>
    de68:	09320b08 	ldmdbeq	r2!, {r3, r8, r9, fp}
    de6c:	00001ce2 	andeq	r1, r0, r2, ror #25
    de70:	00003420 	andeq	r3, r0, r0, lsr #8
    de74:	07340b00 	ldreq	r0, [r4, -r0, lsl #22]!
    de78:	00001c26 	andeq	r1, r0, r6, lsr #24
    de7c:	00070101 	andeq	r0, r7, r1, lsl #2
    de80:	00064c20 	andeq	r4, r6, r0, lsr #24
    de84:	03350b00 	teqeq	r5, #0, 22
    de88:	00001c26 	andeq	r1, r0, r6, lsr #24
    de8c:	00060101 	andeq	r0, r6, r1, lsl #2
    de90:	0002e720 	andeq	lr, r2, r0, lsr #14
    de94:	03360b00 	teqeq	r6, #0, 22
    de98:	00001c26 	andeq	r1, r0, r6, lsr #24
    de9c:	00050101 	andeq	r0, r5, r1, lsl #2
    dea0:	0006b720 	andeq	fp, r6, r0, lsr #14
    dea4:	03370b00 	teqeq	r7, #0, 22
    dea8:	00001c26 	andeq	r1, r0, r6, lsr #24
    deac:	00040101 	andeq	r0, r4, r1, lsl #2
    deb0:	000a9f20 	andeq	r9, sl, r0, lsr #30
    deb4:	03380b00 	teqeq	r8, #0, 22
    deb8:	00001c26 	andeq	r1, r0, r6, lsr #24
    debc:	00000401 	andeq	r0, r0, r1, lsl #8
    dec0:	00065b0c 	andeq	r5, r6, ip, lsl #22
    dec4:	073a0b00 	ldreq	r0, [sl, -r0, lsl #22]!
    dec8:	00001c26 	andeq	r1, r0, r6, lsr #24
    decc:	08fb0c01 	ldmeq	fp!, {r0, sl, fp}^
    ded0:	3c0b0000 	stccc	0, cr0, [fp], {-0}
    ded4:	001c2603 	andseq	r2, ip, r3, lsl #12
    ded8:	400c0200 	andmi	r0, ip, r0, lsl #4
    dedc:	0b00000f 	bleq	df20 <__exidx_end+0x81a0>
    dee0:	1c26033d 	stcne	3, cr0, [r6], #-244	; 0xffffff0c
    dee4:	0c030000 	stceq	0, cr0, [r3], {-0}
    dee8:	00000913 	andeq	r0, r0, r3, lsl r9
    deec:	37083f0b 	strcc	r3, [r8, -fp, lsl #30]
    def0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    def4:	031d0300 	tsteq	sp, #0, 6
    def8:	410b0000 	mrsmi	r0, (UNDEF: 11)
    defc:	001c5403 	andseq	r5, ip, r3, lsl #8
    df00:	1ce22400 	cfstrdne	mvd2, [r2]
    df04:	be250000 	cdplt	0, 2, cr0, cr5, cr0, {0}
    df08:	0b000006 	bleq	df28 <__exidx_end+0x81a8>
    df0c:	1cee1a43 	vstmiane	lr!, {s3-s69}
    df10:	01010000 	mrseq	r0, (UNDEF: 1)
    df14:	0001a025 	andeq	sl, r1, r5, lsr #32
    df18:	0e450b00 	vmlaeq.f64	d16, d5, d0
    df1c:	000005de 	ldrdeq	r0, [r0], -lr
    df20:	26250101 	strtcs	r0, [r5], -r1, lsl #2
    df24:	0b000003 	bleq	df38 <__exidx_end+0x81b8>
    df28:	05de1e45 	ldrbeq	r1, [lr, #3653]	; 0xe45
    df2c:	01010000 	mrseq	r0, (UNDEF: 1)
    df30:	8f0c080b 	svchi	0x000c080b
    df34:	001d4e09 	andseq	r4, sp, r9, lsl #28
    df38:	0cd80c00 	ldcleq	12, cr0, [r8], {0}
    df3c:	900c0000 	andls	r0, ip, r0
    df40:	00006b0b 	andeq	r6, r0, fp, lsl #22
    df44:	7b0c0000 	blvc	30df4c <__ccfg+0x2edfa4>
    df48:	0c000010 	stceq	0, cr0, [r0], {16}
    df4c:	1c100891 	ldcne	8, cr0, [r0], {145}	; 0x91
    df50:	0c040000 	stceq	0, cr0, [r4], {-0}
    df54:	000001c5 	andeq	r0, r0, r5, asr #3
    df58:	3210920c 	andscc	r9, r0, #12, 4	; 0xc0000000
    df5c:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    df60:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    df64:	930c0000 	movwls	r0, #49152	; 0xc000
    df68:	001d1d03 	andseq	r1, sp, r3, lsl #26
    df6c:	1d4e0900 	vstrne.16	s1, [lr, #-0]	; <UNPREDICTABLE>
    df70:	1d650000 	stclne	0, cr0, [r5, #-0]
    df74:	00260000 	eoreq	r0, r6, r0
    df78:	00093d25 	andeq	r3, r9, r5, lsr #26
    df7c:	0f990c00 	svceq	0x00990c00
    df80:	00001d5a 	andeq	r1, r0, sl, asr sp
    df84:	010b0101 	tsteq	fp, r1, lsl #2
    df88:	9d09910d 	stflsd	f1, [r9, #-52]	; 0xffffffcc
    df8c:	2000001d 	andcs	r0, r0, sp, lsl r0
    df90:	0000091a 	andeq	r0, r0, sl, lsl r9
    df94:	2607930d 	strcs	r9, [r7], -sp, lsl #6
    df98:	0100001c 	tsteq	r0, ip, lsl r0
    df9c:	20000107 	andcs	r0, r0, r7, lsl #2
    dfa0:	000005cc 	andeq	r0, r0, ip, asr #11
    dfa4:	2603940d 	strcs	r9, [r3], -sp, lsl #8
    dfa8:	0100001c 	tsteq	r0, ip, lsl r0
    dfac:	00000001 	andeq	r0, r0, r1
    dfb0:	000aab03 	andeq	sl, sl, r3, lsl #22
    dfb4:	03960d00 	orrseq	r0, r6, #0, 26
    dfb8:	00001d73 	andeq	r1, r0, r3, ror sp
    dfbc:	001d9d04 	andseq	r9, sp, r4, lsl #26
    dfc0:	1da90900 			; <UNDEFINED> instruction: 0x1da90900
    dfc4:	1db90000 	ldcne	0, cr0, [r9]
    dfc8:	00260000 	eoreq	r0, r6, r0
    dfcc:	001dae04 	andseq	sl, sp, r4, lsl #28
    dfd0:	03aa2500 			; <UNDEFINED> instruction: 0x03aa2500
    dfd4:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    dfd8:	001db917 	andseq	fp, sp, r7, lsl r9
    dfdc:	09010100 	stmdbeq	r1, {r8}
    dfe0:	00001c1c 	andeq	r1, r0, ip, lsl ip
    dfe4:	00001dd7 	ldrdeq	r1, [r0], -r7
    dfe8:	cc040026 	stcgt	0, cr0, [r4], {38}	; 0x26
    dfec:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    dff0:	0000060e 	andeq	r0, r0, lr, lsl #12
    dff4:	d713060e 	ldrle	r0, [r3, -lr, lsl #12]
    dff8:	0100001d 	tsteq	r0, sp, lsl r0
    dffc:	08dd2501 	ldmeq	sp, {r0, r8, sl, sp}^
    e000:	c30c0000 	movwgt	r0, #49152	; 0xc000
    e004:	001c370e 	andseq	r3, ip, lr, lsl #14
    e008:	06010100 	streq	r0, [r1], -r0, lsl #2
    e00c:	00000c72 	andeq	r0, r0, r2, ror ip
    e010:	10016e0f 	andne	r6, r1, pc, lsl #28
    e014:	00001e05 	andeq	r1, r0, r5, lsl #28
    e018:	1e0b0410 	cfmvdlrne	mvd11, r0
    e01c:	011e0000 	tsteq	lr, r0
    e020:	00001e17 	andeq	r1, r0, r7, lsl lr
    e024:	001c1015 	andseq	r1, ip, r5, lsl r0
    e028:	eb090000 	bl	24e030 <__ccfg+0x22e088>
    e02c:	22000005 	andcs	r0, r0, #5
    e030:	2600001e 			; <UNDEFINED> instruction: 0x2600001e
    e034:	1e170400 	cfmulsne	mvf0, mvf7, mvf0
    e038:	e61f0000 	ldr	r0, [pc], -r0
    e03c:	0f000009 	svceq	0x00000009
    e040:	2216017f 	andscs	r0, r6, #-1073741793	; 0xc000001f
    e044:	0100001e 	tsteq	r0, lr, lsl r0
    e048:	03961f01 	orrseq	r1, r6, #1, 30
    e04c:	820f0000 	andhi	r0, pc, #0
    e050:	1c431401 	cfstrdne	mvd1, [r3], {1}
    e054:	01010000 	mrseq	r0, (UNDEF: 1)
    e058:	00036e1f 	andeq	r6, r3, pc, lsl lr
    e05c:	02d80f00 	sbcseq	r0, r8, #0, 30
    e060:	001c370e 	andseq	r3, ip, lr, lsl #14
    e064:	1a010100 	bne	4e46c <__ccfg+0x2e4c4>
    e068:	03030f08 	movweq	r0, #16136	; 0x3f08
    e06c:	001e7b09 	andseq	r7, lr, r9, lsl #22
    e070:	3ca71700 	stccc	7, cr1, [r7]
    e074:	070f0000 	streq	r0, [pc, -r0]
    e078:	1c100703 	ldcne	7, cr0, [r0], {3}
    e07c:	17000000 	strne	r0, [r0, -r0]
    e080:	00000fd3 	ldrdeq	r0, [r0], -r3
    e084:	0803080f 	stmdaeq	r3, {r0, r1, r2, r3, fp}
    e088:	00001c48 	andeq	r1, r0, r8, asr #24
    e08c:	09060004 	stmdbeq	r6, {r2}
    e090:	0f00000a 	svceq	0x0000000a
    e094:	54030309 	strpl	r0, [r3], #-777	; 0xfffffcf7
    e098:	1900001e 	stmdbne	r0, {r1, r2, r3, r4}
    e09c:	00000029 	andeq	r0, r0, r9, lsr #32
    e0a0:	030b0f30 	movweq	r0, #48944	; 0xbf30
    e0a4:	001eeb08 	andseq	lr, lr, r8, lsl #22
    e0a8:	1f2a1700 	svcne	0x002a1700
    e0ac:	140f0000 	strne	r0, [pc], #-0	; e0b4 <__exidx_end+0x8334>
    e0b0:	1c100803 	ldcne	8, cr0, [r0], {3}
    e0b4:	17000000 	strne	r0, [r0, -r0]
    e0b8:	00000be7 	andeq	r0, r0, r7, ror #23
    e0bc:	0803150f 	stmdaeq	r3, {r0, r1, r2, r3, r8, sl, ip}
    e0c0:	00001c10 	andeq	r1, r0, r0, lsl ip
    e0c4:	4c941702 	ldcmi	7, cr1, [r4], {2}
    e0c8:	160f0000 	strne	r0, [pc], -r0
    e0cc:	1df80b03 			; <UNDEFINED> instruction: 0x1df80b03
    e0d0:	17040000 	strne	r0, [r4, -r0]
    e0d4:	0000475a 	andeq	r4, r0, sl, asr r7
    e0d8:	0903170f 	stmdbeq	r3, {r0, r1, r2, r3, r8, r9, sl, ip}
    e0dc:	00001c48 	andeq	r1, r0, r8, asr #24
    e0e0:	000f1708 	andeq	r1, pc, r8, lsl #14
    e0e4:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    e0e8:	1eeb0f03 	cdpne	15, 14, cr0, cr11, cr3, {0}
    e0ec:	170c0000 	strne	r0, [ip, -r0]
    e0f0:	0000095d 	andeq	r0, r0, sp, asr r9
    e0f4:	1503190f 	strne	r1, [r3, #-2319]	; 0xfffff6f1
    e0f8:	00001efb 	strdeq	r1, [r0], -fp
    e0fc:	7b09002c 	blvc	24e1b4 <__ccfg+0x22e20c>
    e100:	fb00001e 	blx	e182 <__exidx_end+0x8402>
    e104:	0a00001e 	beq	e184 <__exidx_end+0x8404>
    e108:	00000091 	muleq	r0, r1, r0
    e10c:	04100003 	ldreq	r0, [r0], #-3
    e110:	00001e88 	andeq	r1, r0, r8, lsl #29
    e114:	000bdc06 	andeq	sp, fp, r6, lsl #24
    e118:	031c0f00 	tsteq	ip, #0, 30
    e11c:	001e881b 	andseq	r8, lr, fp, lsl r8
    e120:	0bbc1f00 	bleq	fef15d28 <_estack+0xdef10d28>
    e124:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    e128:	1f1d1403 	svcne	0x001d1403
    e12c:	01010000 	mrseq	r0, (UNDEF: 1)
    e130:	1f010410 	svcne	0x00010410
    e134:	0f250000 	svceq	0x00250000
    e138:	10000007 	andne	r0, r0, r7
    e13c:	1c10131d 	ldcne	3, cr1, [r0], {29}
    e140:	01010000 	mrseq	r0, (UNDEF: 1)
    e144:	0002ee25 	andeq	lr, r2, r5, lsr #28
    e148:	1a1e1000 	bne	792150 <__ccfg+0x7721a8>
    e14c:	00001c21 	andeq	r1, r0, r1, lsr #24
    e150:	69250101 	stmdbvs	r5!, {r0, r8}
    e154:	1000000c 	andne	r0, r0, ip
    e158:	1c21241e 	cfstrsne	mvf2, [r1], #-120	; 0xffffff88
    e15c:	01010000 	mrseq	r0, (UNDEF: 1)
    e160:	000c8725 	andeq	r8, ip, r5, lsr #14
    e164:	14221000 	strtne	r1, [r2], #-0
    e168:	00001f1d 	andeq	r1, r0, sp, lsl pc
    e16c:	41250101 			; <UNDEFINED> instruction: 0x41250101
    e170:	11000020 	tstne	r0, r0, lsr #32
    e174:	0d5e2739 	ldcleq	7, cr2, [lr, #-228]	; 0xffffff1c
    e178:	01010000 	mrseq	r0, (UNDEF: 1)
    e17c:	00232f25 	eoreq	r2, r3, r5, lsr #30
    e180:	153a1100 	ldrne	r1, [sl, #-256]!	; 0xffffff00
    e184:	000009f1 	strdeq	r0, [r0], -r1
    e188:	4b250101 	blmi	94e594 <__ccfg+0x92e5ec>
    e18c:	11000027 	tstne	r0, r7, lsr #32
    e190:	0bd81a3b 	bleq	ff614a84 <_estack+0xdf60fa84>
    e194:	01010000 	mrseq	r0, (UNDEF: 1)
    e198:	0025ef25 	eoreq	lr, r5, r5, lsr #30
    e19c:	1a3c1100 	bne	f125a4 <__ccfg+0xef25fc>
    e1a0:	00000c74 	andeq	r0, r0, r4, ror ip
    e1a4:	6b090101 	blvs	24e5b0 <__ccfg+0x22e608>
    e1a8:	a3000000 	movwge	r0, #0
    e1ac:	0a00001f 	beq	e230 <__exidx_end+0x84b0>
    e1b0:	00000091 	muleq	r0, r1, r0
    e1b4:	ad270014 	stcge	0, cr0, [r7, #-80]!	; 0xffffffb0
    e1b8:	12000029 	andne	r0, r0, #41	; 0x29
    e1bc:	1f93113d 	svcne	0x0093113d
    e1c0:	03050000 	movweq	r0, #20480	; 0x5000
    e1c4:	200000b8 	strhcs	r0, [r0], -r8
    e1c8:	001f5b28 	andseq	r5, pc, r8, lsr #22
    e1cc:	20721200 	rsbscs	r1, r2, r0, lsl #4
    e1d0:	00540305 	subseq	r0, r4, r5, lsl #6
    e1d4:	69282000 	stmdbvs	r8!, {sp}
    e1d8:	1200001f 	andne	r0, r0, #31
    e1dc:	03050e96 	movweq	r0, #24214	; 0x5e96
    e1e0:	2000003c 	andcs	r0, r0, ip, lsr r0
    e1e4:	001f7728 	andseq	r7, pc, r8, lsr #14
    e1e8:	13ad1200 			; <UNDEFINED> instruction: 0x13ad1200
    e1ec:	00a00305 	adceq	r0, r0, r5, lsl #6
    e1f0:	85282000 	strhi	r2, [r8, #-0]!
    e1f4:	1200001f 	andne	r0, r0, #31
    e1f8:	030513c2 	movweq	r1, #21442	; 0x53c2
    e1fc:	2000007c 	andcs	r0, r0, ip, ror r0
    e200:	00018a00 	andeq	r8, r1, r0, lsl #20
    e204:	03000400 	movweq	r0, #1024	; 0x400
    e208:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    e20c:	002a4501 	eoreq	r4, sl, r1, lsl #10
    e210:	2a2a0100 	bcs	a8e618 <__ccfg+0xa6e670>
    e214:	2b0c0000 	blcs	30e21c <__ccfg+0x2ee274>
    e218:	11080000 	mrsne	r0, (UNDEF: 8)
    e21c:	00000000 	andeq	r0, r0, r0
    e220:	74650000 	strbtvc	r0, [r5], #-0
    e224:	01020000 	mrseq	r0, (UNDEF: 2)
    e228:	000c5d06 	andeq	r5, ip, r6, lsl #26
    e22c:	2a200300 	bcs	80ee34 <__ccfg+0x7eee8c>
    e230:	1d020000 	stcne	0, cr0, [r2, #-0]
    e234:	00000037 	andeq	r0, r0, r7, lsr r0
    e238:	5b080102 	blpl	20e648 <__ccfg+0x1ee6a0>
    e23c:	0200000c 	andeq	r0, r0, #12
    e240:	0a6b0502 	beq	1acf650 <__ccfg+0x1aaf6a8>
    e244:	02020000 	andeq	r0, r2, #0
    e248:	000d6c07 	andeq	r6, sp, r7, lsl #24
    e24c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e250:	000007fd 	strdeq	r0, [r0], -sp
    e254:	0029b803 	eoreq	fp, r9, r3, lsl #16
    e258:	5e410200 	cdppl	2, 4, cr0, cr1, cr0, {0}
    e25c:	02000000 	andeq	r0, r0, #0
    e260:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    e264:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e268:	0007f805 	andeq	pc, r7, r5, lsl #16
    e26c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    e270:	00000421 	andeq	r0, r0, r1, lsr #8
    e274:	69050404 	stmdbvs	r5, {r2, sl}
    e278:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    e27c:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    e280:	22030000 	andcs	r0, r3, #0
    e284:	0300002a 	movweq	r0, #42	; 0x2a
    e288:	00002c14 	andeq	r2, r0, r4, lsl ip
    e28c:	29ba0300 	ldmibcs	sl!, {r8, r9}
    e290:	20030000 	andcs	r0, r3, r0
    e294:	00000053 	andeq	r0, r0, r3, asr r0
    e298:	0029e403 	eoreq	lr, r9, r3, lsl #8
    e29c:	a2330400 	eorsge	r0, r3, #0, 8
    e2a0:	05000000 	streq	r0, [r0, #-0]
    e2a4:	0000a804 	andeq	sl, r0, r4, lsl #16
    e2a8:	fa030600 	blx	cfab0 <__ccfg+0xafb08>
    e2ac:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    e2b0:	0000b434 	andeq	fp, r0, r4, lsr r4
    e2b4:	ba040500 	blt	10f6bc <__ccfg+0xef714>
    e2b8:	07000000 	streq	r0, [r0, -r0]
    e2bc:	000000c5 	andeq	r0, r0, r5, asr #1
    e2c0:	00008108 	andeq	r8, r0, r8, lsl #2
    e2c4:	13090000 	movwne	r0, #36864	; 0x9000
    e2c8:	0500002a 	streq	r0, [r0, #-42]	; 0xffffffd6
    e2cc:	003a1099 	mlaseq	sl, r9, r0, r1
    e2d0:	00002800 	andeq	r2, r0, r0, lsl #16
    e2d4:	0b9c0100 	bleq	fe70e6dc <_estack+0xde7096dc>
    e2d8:	0a000001 	beq	e2e4 <__exidx_end+0x8564>
    e2dc:	00002af5 	strdeq	r2, [r0], -r5
    e2e0:	00973501 	addseq	r3, r7, r1, lsl #10
    e2e4:	374b0000 	strbcc	r0, [fp, -r0]
    e2e8:	c30b0000 	movwgt	r0, #45056	; 0xb000
    e2ec:	01000029 	tsteq	r0, r9, lsr #32
    e2f0:	00010b37 	andeq	r0, r1, r7, lsr fp
    e2f4:	00379000 	eorseq	r9, r7, r0
    e2f8:	3a180c00 	bcc	611300 <__ccfg+0x5f1358>
    e2fc:	01770000 	cmneq	r7, r0
    e300:	320d0000 	andcc	r0, sp, #0
    e304:	8200003a 	andhi	r0, r0, #58	; 0x3a
    e308:	00000001 	andeq	r0, r0, r1
    e30c:	a7020102 	strge	r0, [r2, -r2, lsl #2]
    e310:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    e314:	000029cf 	andeq	r2, r0, pc, asr #19
    e318:	00009a05 	andeq	r9, r0, r5, lsl #20
    e31c:	002c0000 	eoreq	r0, ip, r0
    e320:	9c010000 	stcls	0, cr0, [r1], {-0}
    e324:	00000177 	andeq	r0, r0, r7, ror r1
    e328:	002af50a 	eoreq	pc, sl, sl, lsl #10
    e32c:	a9400100 	stmdbge	r0, {r8}^
    e330:	c5000000 	strgt	r0, [r0, #-0]
    e334:	0a000037 	beq	e418 <__exidx_end+0x8698>
    e338:	00002b6c 	andeq	r2, r0, ip, ror #22
    e33c:	00814001 	addeq	r4, r1, r1
    e340:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    e344:	c30b0000 	movwgt	r0, #45056	; 0xb000
    e348:	01000029 	tsteq	r0, r9, lsr #32
    e34c:	00010b42 	andeq	r0, r1, r2, asr #22
    e350:	00382b00 	eorseq	r2, r8, r0, lsl #22
    e354:	00000c00 	andeq	r0, r0, r0, lsl #24
    e358:	01770000 	cmneq	r7, r0
    e35c:	000f0000 	andeq	r0, pc, r0
    e360:	6d000000 	stcvs	0, cr0, [r0, #-0]
    e364:	10000001 	andne	r0, r0, r1
    e368:	77025001 	strvc	r5, [r2, -r1]
    e36c:	000d0000 	andeq	r0, sp, r0
    e370:	82000000 	andhi	r0, r0, #0
    e374:	00000001 	andeq	r0, r0, r1
    e378:	0029f511 	eoreq	pc, r9, r1, lsl r5	; <UNPREDICTABLE>
    e37c:	8c6a0600 	stclhi	6, cr0, [sl], #-0
    e380:	11000000 	mrsne	r0, (UNDEF: 0)
    e384:	00002a04 	andeq	r2, r0, r4, lsl #20
    e388:	008c8406 	addeq	r8, ip, r6, lsl #8
    e38c:	d5000000 	strle	r0, [r0, #-0]
    e390:	04000000 	streq	r0, [r0], #-0
    e394:	0031ef00 	eorseq	lr, r1, r0, lsl #30
    e398:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    e39c:	0100002a 	tsteq	r0, sl, lsr #32
    e3a0:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    e3a4:	00002b0c 	andeq	r2, r0, ip, lsl #22
    e3a8:	00001120 	andeq	r1, r0, r0, lsr #2
    e3ac:	00000000 	andeq	r0, r0, r0
    e3b0:	00007605 	andeq	r7, r0, r5, lsl #12
    e3b4:	002baf02 	eoreq	sl, fp, r2, lsl #30
    e3b8:	301b0200 	andscc	r0, fp, r0, lsl #4
    e3bc:	03000000 	movweq	r0, #0
    e3c0:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    e3c4:	01030000 	mrseq	r0, (UNDEF: 3)
    e3c8:	000c5b08 	andeq	r5, ip, r8, lsl #22
    e3cc:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    e3d0:	00000a6b 	andeq	r0, r0, fp, ror #20
    e3d4:	6c070203 	sfmvs	f0, 4, [r7], {3}
    e3d8:	0200000d 	andeq	r0, r0, #13
    e3dc:	00002ba5 	andeq	r2, r0, r5, lsr #23
    e3e0:	00573f02 	subseq	r3, r7, r2, lsl #30
    e3e4:	04030000 	streq	r0, [r3], #-0
    e3e8:	0007fd05 	andeq	pc, r7, r5, lsl #26
    e3ec:	07040300 	streq	r0, [r4, -r0, lsl #6]
    e3f0:	00000426 	andeq	r0, r0, r6, lsr #8
    e3f4:	f8050803 			; <UNDEFINED> instruction: 0xf8050803
    e3f8:	03000007 	movweq	r0, #7
    e3fc:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    e400:	04040000 	streq	r0, [r4], #-0
    e404:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e408:	07040300 	streq	r0, [r4, -r0, lsl #6]
    e40c:	0000042b 	andeq	r0, r0, fp, lsr #8
    e410:	002bb102 	eoreq	fp, fp, r2, lsl #2
    e414:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    e418:	02000000 	andeq	r0, r0, #0
    e41c:	00002ba7 	andeq	r2, r0, r7, lsr #23
    e420:	004c1f03 	subeq	r1, ip, r3, lsl #30
    e424:	76050000 	strvc	r0, [r5], -r0
    e428:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    e42c:	00008caa 	andeq	r8, r0, sl, lsr #25
    e430:	003a3800 	eorseq	r3, sl, r0, lsl #16
    e434:	00003000 	andeq	r3, r0, r0
    e438:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    e43c:	00002be9 	andeq	r2, r0, r9, ror #23
    e440:	008c3e01 	addeq	r3, ip, r1, lsl #28
    e444:	38600000 	stmdacc	r0!, {}^	; <UNPREDICTABLE>
    e448:	da060000 	ble	18e450 <__ccfg+0x16e4a8>
    e44c:	0100002b 	tsteq	r0, fp, lsr #32
    e450:	00008c3f 	andeq	r8, r0, pc, lsr ip
    e454:	00387900 	eorseq	r7, r8, r0, lsl #18
    e458:	2b980700 	blcs	fe610060 <_estack+0xde60b060>
    e45c:	40010000 	andmi	r0, r1, r0
    e460:	00000081 	andeq	r0, r0, r1, lsl #1
    e464:	00005101 	andeq	r5, r0, r1, lsl #2
    e468:	00000143 	andeq	r0, r0, r3, asr #2
    e46c:	325e0004 	subscc	r0, lr, #4
    e470:	01040000 	mrseq	r0, (UNDEF: 4)
    e474:	00002a45 	andeq	r2, r0, r5, asr #20
    e478:	002c9a01 	eoreq	r9, ip, r1, lsl #20
    e47c:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    e480:	00113000 	andseq	r3, r1, r0
    e484:	00000000 	andeq	r0, r0, r0
    e488:	00777000 	rsbseq	r7, r7, r0
    e48c:	06010200 	streq	r0, [r1], -r0, lsl #4
    e490:	00000c5d 	andeq	r0, r0, sp, asr ip
    e494:	5b080102 	blpl	20e8a4 <__ccfg+0x1ee8fc>
    e498:	0200000c 	andeq	r0, r0, #12
    e49c:	0a6b0502 	beq	1acf8ac <__ccfg+0x1aaf904>
    e4a0:	02020000 	andeq	r0, r2, #0
    e4a4:	000d6c07 	andeq	r6, sp, r7, lsl #24
    e4a8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e4ac:	000007fd 	strdeq	r0, [r0], -sp
    e4b0:	0029b803 	eoreq	fp, r9, r3, lsl #16
    e4b4:	53410200 	movtpl	r0, #4608	; 0x1200
    e4b8:	02000000 	andeq	r0, r0, #0
    e4bc:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    e4c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e4c4:	0007f805 	andeq	pc, r7, r5, lsl #16
    e4c8:	2c440300 	mcrrcs	3, 0, r0, r4, cr0
    e4cc:	5b020000 	blpl	8e4d4 <__ccfg+0x6e52c>
    e4d0:	0000006c 	andeq	r0, r0, ip, rrx
    e4d4:	21070802 	tstcs	r7, r2, lsl #16
    e4d8:	04000004 	streq	r0, [r0], #-4
    e4dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e4e0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e4e4:	00042b07 	andeq	r2, r4, r7, lsl #22
    e4e8:	29ba0300 	ldmibcs	sl!, {r8, r9}
    e4ec:	20030000 	andcs	r0, r3, r0
    e4f0:	00000048 	andeq	r0, r0, r8, asr #32
    e4f4:	002c4603 	eoreq	r4, ip, r3, lsl #12
    e4f8:	61260300 			; <UNDEFINED> instruction: 0x61260300
    e4fc:	05000000 	streq	r0, [r0, #-0]
    e500:	00002c0f 	andeq	r2, r0, pc, lsl #24
    e504:	81034504 	tsthi	r3, r4, lsl #10
    e508:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    e50c:	2000003a 	andcs	r0, r0, sl, lsr r0
    e510:	01000000 	mrseq	r0, (UNDEF: 0)
    e514:	0000dd9c 	muleq	r0, ip, sp
    e518:	2c000600 	stccs	6, cr0, [r0], {-0}
    e51c:	40010000 	andmi	r0, r1, r0
    e520:	00000081 	andeq	r0, r0, r1, lsl #1
    e524:	000038ae 	andeq	r3, r0, lr, lsr #17
    e528:	002c4f06 	eoreq	r4, ip, r6, lsl #30
    e52c:	81410100 	mrshi	r0, (UNDEF: 81)
    e530:	c1000000 	mrsgt	r0, (UNDEF: 0)
    e534:	07000038 	smladxeq	r0, r8, r0, r0
    e538:	00002c32 	andeq	r2, r0, r2, lsr ip
    e53c:	00814201 	addeq	r4, r1, r1, lsl #4
    e540:	52010000 	andpl	r0, r1, #0
    e544:	2c610500 	cfstr64cs	mvdx0, [r1], #-0
    e548:	53040000 	movwpl	r0, #16384	; 0x4000
    e54c:	00008c03 	andeq	r8, r0, r3, lsl #24
    e550:	003a8800 	eorseq	r8, sl, r0, lsl #16
    e554:	00001800 	andeq	r1, r0, r0, lsl #16
    e558:	2f9c0100 	svccs	0x009c0100
    e55c:	08000001 	stmdaeq	r0, {r0}
    e560:	16590108 	ldrbne	r0, [r9], -r8, lsl #2
    e564:	09000001 	stmdbeq	r0, {r0}
    e568:	00002bf4 	strdeq	r2, [r0], -r4
    e56c:	008c5a01 	addeq	r5, ip, r1, lsl #20
    e570:	8d090000 	stchi	0, cr0, [r9, #-0]
    e574:	0100002c 	tsteq	r0, ip, lsr #32
    e578:	00012f5b 	andeq	r2, r1, fp, asr pc
    e57c:	820a0000 	andhi	r0, sl, #0
    e580:	0100002c 	tsteq	r0, ip, lsr #32
    e584:	0000f75c 	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
    e588:	2c320700 	ldccs	7, cr0, [r2], #-0
    e58c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    e590:	00000081 	andeq	r0, r0, r1, lsl #1
    e594:	0b005101 	bleq	229a0 <__ccfg+0x29f8>
    e598:	00000081 	andeq	r0, r0, r1, lsl #1
    e59c:	0000013f 	andeq	r0, r0, pc, lsr r1
    e5a0:	00013f0c 	andeq	r3, r1, ip, lsl #30
    e5a4:	02000100 	andeq	r0, r0, #0, 2
    e5a8:	2cb90704 	ldccs	7, cr0, [r9], #16
    e5ac:	36000000 	strcc	r0, [r0], -r0
    e5b0:	04000001 	streq	r0, [r0], #-1
    e5b4:	00330800 	eorseq	r0, r3, r0, lsl #16
    e5b8:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    e5bc:	0100002a 	tsteq	r0, sl, lsr #32
    e5c0:	00002cf7 	strdeq	r2, [r0], -r7
    e5c4:	00002b0c 	andeq	r2, r0, ip, lsl #22
    e5c8:	00001148 	andeq	r1, r0, r8, asr #2
    e5cc:	00000000 	andeq	r0, r0, r0
    e5d0:	0000791d 	andeq	r7, r0, sp, lsl r9
    e5d4:	5d060102 	stfpls	f0, [r6, #-8]
    e5d8:	0200000c 	andeq	r0, r0, #12
    e5dc:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    e5e0:	02020000 	andeq	r0, r2, #0
    e5e4:	000a6b05 	andeq	r6, sl, r5, lsl #22
    e5e8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e5ec:	00000d6c 	andeq	r0, r0, ip, ror #26
    e5f0:	fd050402 	stc2	4, cr0, [r5, #-8]
    e5f4:	03000007 	movweq	r0, #7
    e5f8:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
    e5fc:	00534102 	subseq	r4, r3, r2, lsl #2
    e600:	04020000 	streq	r0, [r2], #-0
    e604:	00042607 	andeq	r2, r4, r7, lsl #12
    e608:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e60c:	000007f8 	strdeq	r0, [r0], -r8
    e610:	21070802 	tstcs	r7, r2, lsl #16
    e614:	04000004 	streq	r0, [r0], #-4
    e618:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e61c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e620:	00042b07 	andeq	r2, r4, r7, lsl #22
    e624:	29ba0300 	ldmibcs	sl!, {r8, r9}
    e628:	20030000 	andcs	r0, r3, r0
    e62c:	00000048 	andeq	r0, r0, r8, asr #32
    e630:	0029f505 	eoreq	pc, r9, r5, lsl #10
    e634:	766a0400 	strbtvc	r0, [sl], -r0, lsl #8
    e638:	a0000000 	andge	r0, r0, r0
    e63c:	0800003a 	stmdaeq	r0, {r1, r3, r4, r5}
    e640:	01000000 	mrseq	r0, (UNDEF: 0)
    e644:	0000a69c 	muleq	r0, ip, r6
    e648:	2ce50600 	stclcs	6, cr0, [r5]
    e64c:	77010000 	strvc	r0, [r1, -r0]
    e650:	00000076 	andeq	r0, r0, r6, ror r0
    e654:	2d120500 	cfldr32cs	mvfx0, [r2, #-0]
    e658:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    e65c:	00000076 	andeq	r0, r0, r6, ror r0
    e660:	00000000 	andeq	r0, r0, r0
    e664:	00000006 	andeq	r0, r0, r6
    e668:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    e66c:	e5060000 	str	r0, [r6, #-0]
    e670:	0100002c 	tsteq	r0, ip, lsr #32
    e674:	000076c2 	andeq	r7, r0, r2, asr #13
    e678:	04050000 	streq	r0, [r5], #-0
    e67c:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    e680:	00007684 	andeq	r7, r0, r4, lsl #13
    e684:	003aa800 	eorseq	sl, sl, r0, lsl #16
    e688:	00000800 	andeq	r0, r0, r0, lsl #16
    e68c:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    e690:	07000000 	streq	r0, [r0, -r0]
    e694:	00002ce5 	andeq	r2, r0, r5, ror #25
    e698:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    e69c:	00000000 	andeq	r0, r0, r0
    e6a0:	002cc208 	eoreq	ip, ip, r8, lsl #4
    e6a4:	015b0400 	cmpeq	fp, r0, lsl #8
    e6a8:	00000076 	andeq	r0, r0, r6, ror r0
    e6ac:	00000000 	andeq	r0, r0, r0
    e6b0:	00000006 	andeq	r0, r0, r6
    e6b4:	01189c01 	tsteq	r8, r1, lsl #24
    e6b8:	e5070000 	str	r0, [r7, #-0]
    e6bc:	0100002c 	tsteq	r0, ip, lsr #32
    e6c0:	0076015a 	rsbseq	r0, r6, sl, asr r1
    e6c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e6c8:	00002cd6 	ldrdeq	r2, [r0], -r6
    e6cc:	00016c04 	andeq	r6, r1, r4, lsl #24
    e6d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e6d4:	01000000 	mrseq	r0, (UNDEF: 0)
    e6d8:	2ced0a9c 	vstmiacs	sp!, {s1-s156}
    e6dc:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    e6e0:	00007601 	andeq	r7, r0, r1, lsl #12
    e6e4:	00500100 	subseq	r0, r0, r0, lsl #2
    e6e8:	0008bf00 	andeq	fp, r8, r0, lsl #30
    e6ec:	b8000400 	stmdalt	r0, {sl}
    e6f0:	04000033 	streq	r0, [r0], #-51	; 0xffffffcd
    e6f4:	002a4501 	eoreq	r4, sl, r1, lsl #10
    e6f8:	2e4a0100 	dvfcse	f0, f2, f0
    e6fc:	2b0c0000 	blcs	30e704 <__ccfg+0x2ee75c>
    e700:	11900000 	orrsne	r0, r0, r0
    e704:	00000000 	andeq	r0, r0, r0
    e708:	7abd0000 	bvc	fef4e710 <_estack+0xdef49710>
    e70c:	01020000 	mrseq	r0, (UNDEF: 2)
    e710:	000c5d06 	andeq	r5, ip, r6, lsl #26
    e714:	2a200300 	bcs	80f31c <__ccfg+0x7ef374>
    e718:	1d030000 	stcne	0, cr0, [r3, #-0]
    e71c:	00000037 	andeq	r0, r0, r7, lsr r0
    e720:	5b080102 	blpl	20eb30 <__ccfg+0x1eeb88>
    e724:	0300000c 	movweq	r0, #12
    e728:	000031f1 	strdeq	r3, [r0], -r1
    e72c:	00492903 	subeq	r2, r9, r3, lsl #18
    e730:	02020000 	andeq	r0, r2, #0
    e734:	000a6b05 	andeq	r6, sl, r5, lsl #22
    e738:	2e160300 	cdpcs	3, 1, cr0, cr6, cr0, {0}
    e73c:	2b030000 	blcs	ce744 <__ccfg+0xae79c>
    e740:	0000005b 	andeq	r0, r0, fp, asr r0
    e744:	6c070202 	sfmvs	f0, 4, [r7], {2}
    e748:	0300000d 	movweq	r0, #13
    e74c:	00002ba5 	andeq	r2, r0, r5, lsr #23
    e750:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    e754:	04020000 	streq	r0, [r2], #-0
    e758:	0007fd05 	andeq	pc, r7, r5, lsl #26
    e75c:	29b80300 	ldmibcs	r8!, {r8, r9}
    e760:	41030000 	mrsmi	r0, (UNDEF: 3)
    e764:	0000007f 	andeq	r0, r0, pc, ror r0
    e768:	26070402 	strcs	r0, [r7], -r2, lsl #8
    e76c:	02000004 	andeq	r0, r0, #4
    e770:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    e774:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e778:	00042107 	andeq	r2, r4, r7, lsl #2
    e77c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e780:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e784:	2b070402 	blcs	1cf794 <__ccfg+0x1af7ec>
    e788:	03000004 	movweq	r0, #4
    e78c:	00002a22 	andeq	r2, r0, r2, lsr #20
    e790:	002c1404 	eoreq	r1, ip, r4, lsl #8
    e794:	f3030000 	vhadd.u8	d0, d3, d0
    e798:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    e79c:	00003e19 	andeq	r3, r0, r9, lsl lr
    e7a0:	2e180300 	cdpcs	3, 1, cr0, cr8, cr0, {0}
    e7a4:	1a040000 	bne	10e7ac <__ccfg+0xee804>
    e7a8:	00000050 	andeq	r0, r0, r0, asr r0
    e7ac:	002ba703 	eoreq	sl, fp, r3, lsl #14
    e7b0:	621f0400 	andsvs	r0, pc, #0, 8
    e7b4:	03000000 	movweq	r0, #0
    e7b8:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    e7bc:	00742004 	rsbseq	r2, r4, r4
    e7c0:	e4030000 	str	r0, [r3], #-0
    e7c4:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    e7c8:	0000e433 	andeq	lr, r0, r3, lsr r4
    e7cc:	ea040500 	b	10fbd4 <__ccfg+0xefc2c>
    e7d0:	06000000 	streq	r0, [r0], -r0
    e7d4:	00f10405 	rscseq	r0, r1, r5, lsl #8
    e7d8:	fc070000 	stc2	0, cr0, [r7], {-0}
    e7dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e7e0:	000000a2 	andeq	r0, r0, r2, lsr #1
    e7e4:	311a0300 	tstcc	sl, r0, lsl #6
    e7e8:	42060000 	andmi	r0, r6, #0
    e7ec:	00000107 	andeq	r0, r0, r7, lsl #2
    e7f0:	010d0405 	tsteq	sp, r5, lsl #8
    e7f4:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e7f8:	26000000 	strcs	r0, [r0], -r0
    e7fc:	08000001 	stmdaeq	r0, {r0}
    e800:	00000126 	andeq	r0, r0, r6, lsr #2
    e804:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e808:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    e80c:	05000000 	streq	r0, [r0, #-0]
    e810:	0000a204 	andeq	sl, r0, r4, lsl #4
    e814:	32820300 	addcc	r0, r2, #0, 6
    e818:	46060000 	strmi	r0, [r6], -r0
    e81c:	00000137 	andeq	r0, r0, r7, lsr r1
    e820:	013d0405 	teqeq	sp, r5, lsl #8
    e824:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    e828:	03000000 	movweq	r0, #0
    e82c:	000032cb 	andeq	r3, r0, fp, asr #5
    e830:	01374806 	teqeq	r7, r6, lsl #16
    e834:	b2030000 	andlt	r0, r3, #0
    e838:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e83c:	0001584a 	andeq	r5, r1, sl, asr #16
    e840:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    e844:	09000001 	stmdbeq	r0, {r0}
    e848:	000000ce 	andeq	r0, r0, lr, asr #1
    e84c:	0000016d 	andeq	r0, r0, sp, ror #2
    e850:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e854:	c1030000 	mrsgt	r0, (UNDEF: 3)
    e858:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e85c:	0001374c 	andeq	r3, r1, ip, asr #14
    e860:	2e210300 	cdpcs	3, 2, cr0, cr1, cr0, {0}
    e864:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    e868:	00000107 	andeq	r0, r0, r7, lsl #2
    e86c:	002eb103 	eoreq	fp, lr, r3, lsl #2
    e870:	e4510600 	ldrb	r0, [r1], #-1536	; 0xfffffa00
    e874:	03000000 	movweq	r0, #0
    e878:	00002d3b 	andeq	r2, r0, fp, lsr sp
    e87c:	01995306 	orrseq	r5, r9, r6, lsl #6
    e880:	04050000 	streq	r0, [r5], #-0
    e884:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    e888:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e88c:	0001b800 	andeq	fp, r1, r0, lsl #16
    e890:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    e894:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    e898:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e89c:	000000b8 	strheq	r0, [r0], -r8
    e8a0:	b8040500 	stmdalt	r4, {r8, sl}
    e8a4:	03000000 	movweq	r0, #0
    e8a8:	00003130 	andeq	r3, r0, r0, lsr r1
    e8ac:	01c95706 	biceq	r5, r9, r6, lsl #14
    e8b0:	04050000 	streq	r0, [r5], #-0
    e8b4:	000001cf 	andeq	r0, r0, pc, asr #3
    e8b8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e8bc:	0001e300 	andeq	lr, r1, r0, lsl #6
    e8c0:	01e30800 	mvneq	r0, r0, lsl #16
    e8c4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e8c8:	00000000 	andeq	r0, r0, r0
    e8cc:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    e8d0:	24030000 	strcs	r0, [r3], #-0
    e8d4:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e8d8:	0001c95a 	andeq	ip, r1, sl, asr r9
    e8dc:	2fde0300 	svccs	0x00de0300
    e8e0:	5d060000 	stcpl	0, cr0, [r6, #-0]
    e8e4:	000001c9 	andeq	r0, r0, r9, asr #3
    e8e8:	002d4d03 	eoreq	r4, sp, r3, lsl #26
    e8ec:	c9600600 	stmdbgt	r0!, {r9, sl}^
    e8f0:	03000001 	movweq	r0, #1
    e8f4:	0000313e 	andeq	r3, r0, lr, lsr r1
    e8f8:	00e46306 	rsceq	r6, r4, r6, lsl #6
    e8fc:	8b030000 	blhi	ce904 <__ccfg+0xae95c>
    e900:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e904:	00022065 	andeq	r2, r2, r5, rrx
    e908:	26040500 	strcs	r0, [r4], -r0, lsl #10
    e90c:	07000002 	streq	r0, [r0, -r2]
    e910:	00000231 	andeq	r0, r0, r1, lsr r2
    e914:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e918:	dc030000 	stcle	0, cr0, [r3], {-0}
    e91c:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e920:	00022067 	andeq	r2, r2, r7, rrx
    e924:	30200300 	eorcc	r0, r0, r0, lsl #6
    e928:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    e92c:	000000eb 	andeq	r0, r0, fp, ror #1
    e930:	0032bb03 	eorseq	fp, r2, r3, lsl #22
    e934:	eb6b0600 	bl	1ad013c <__ccfg+0x1ab0194>
    e938:	03000000 	movweq	r0, #0
    e93c:	00002fed 	andeq	r2, r0, sp, ror #31
    e940:	00eb6d06 	rsceq	r6, fp, r6, lsl #26
    e944:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    e948:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e94c:	0000eb6f 	andeq	lr, r0, pc, ror #22
    e950:	064c0b00 	strbeq	r0, [ip], -r0, lsl #22
    e954:	0003557a 	andeq	r5, r3, sl, ror r5
    e958:	2fc30c00 	svccs	0x00c30c00
    e95c:	7c060000 	stcvc	0, cr0, [r6], {-0}
    e960:	000000fc 	strdeq	r0, [r0], -ip
    e964:	32ae0c00 	adccc	r0, lr, #0, 24
    e968:	7d060000 	stcvc	0, cr0, [r6, #-0]
    e96c:	0000012c 	andeq	r0, r0, ip, lsr #2
    e970:	2fd40c04 	svccs	0x00d40c04
    e974:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    e978:	00000142 	andeq	r0, r0, r2, asr #2
    e97c:	31cd0c08 	biccc	r0, sp, r8, lsl #24
    e980:	7f060000 	svcvc	0x00060000
    e984:	0000014d 	andeq	r0, r0, sp, asr #2
    e988:	31df0c0c 	bicscc	r0, pc, ip, lsl #24
    e98c:	80060000 	andhi	r0, r6, r0
    e990:	0000016d 	andeq	r0, r0, sp, ror #2
    e994:	2ed20c10 	mrccs	12, 6, r0, cr2, cr0, {0}
    e998:	81060000 	mrshi	r0, (UNDEF: 6)
    e99c:	00000178 	andeq	r0, r0, r8, ror r1
    e9a0:	2e8e0c14 	mcrcs	12, 4, r0, cr14, cr4, {0}
    e9a4:	82060000 	andhi	r0, r6, #0
    e9a8:	00000183 	andeq	r0, r0, r3, lsl #3
    e9ac:	2fc90c18 	svccs	0x00c90c18
    e9b0:	83060000 	movwhi	r0, #24576	; 0x6000
    e9b4:	0000018e 	andeq	r0, r0, lr, lsl #3
    e9b8:	31580c1c 	cmpcc	r8, ip, lsl ip
    e9bc:	84060000 	strhi	r0, [r6], #-0
    e9c0:	000001be 			; <UNDEFINED> instruction: 0x000001be
    e9c4:	2f500c20 	svccs	0x00500c20
    e9c8:	85060000 	strhi	r0, [r6, #-0]
    e9cc:	000001e9 	andeq	r0, r0, r9, ror #3
    e9d0:	2fa80c24 	svccs	0x00a80c24
    e9d4:	86060000 	strhi	r0, [r6], -r0
    e9d8:	000001f4 	strdeq	r0, [r0], -r4
    e9dc:	320d0c28 	andcc	r0, sp, #40, 24	; 0x2800
    e9e0:	87060000 	strhi	r0, [r6, -r0]
    e9e4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    e9e8:	2eed0c2c 	cdpcs	12, 14, cr0, cr13, cr12, {1}
    e9ec:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    e9f0:	00000215 	andeq	r0, r0, r5, lsl r2
    e9f4:	31fb0c30 	mvnscc	r0, r0, lsr ip
    e9f8:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    e9fc:	00000231 	andeq	r0, r0, r1, lsr r2
    ea00:	2dcc0c34 	stclcs	12, cr0, [ip, #208]	; 0xd0
    ea04:	8a060000 	bhi	18ea0c <__ccfg+0x16ea64>
    ea08:	0000020a 	andeq	r0, r0, sl, lsl #4
    ea0c:	300f0c38 	andcc	r0, pc, r8, lsr ip	; <UNPREDICTABLE>
    ea10:	8b060000 	blhi	18ea18 <__ccfg+0x16ea70>
    ea14:	0000023c 	andeq	r0, r0, ip, lsr r2
    ea18:	31ae0c3c 			; <UNDEFINED> instruction: 0x31ae0c3c
    ea1c:	8c060000 	stchi	0, cr0, [r6], {-0}
    ea20:	00000247 	andeq	r0, r0, r7, asr #4
    ea24:	2f320c40 	svccs	0x00320c40
    ea28:	8d060000 	stchi	0, cr0, [r6, #-0]
    ea2c:	00000252 	andeq	r0, r0, r2, asr r2
    ea30:	2d7c0c44 	ldclcs	12, cr0, [ip, #-272]!	; 0xfffffef0
    ea34:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    ea38:	0000025d 	andeq	r0, r0, sp, asr r2
    ea3c:	de030048 	cdple	0, 0, cr0, cr3, cr8, {2}
    ea40:	06000030 			; <UNDEFINED> instruction: 0x06000030
    ea44:	0002688f 	andeq	r6, r2, pc, lsl #17
    ea48:	01140b00 	tsteq	r4, r0, lsl #22
    ea4c:	0003a554 	andeq	sl, r3, r4, asr r5
    ea50:	2e320c00 	cdpcs	12, 3, cr0, cr2, cr0, {0}
    ea54:	55010000 	strpl	r0, [r1, #-0]
    ea58:	000000ce 	andeq	r0, r0, lr, asr #1
    ea5c:	30a40c00 	adccc	r0, r4, r0, lsl #24
    ea60:	56010000 	strpl	r0, [r1], -r0
    ea64:	000000ce 	andeq	r0, r0, lr, asr #1
    ea68:	2d9c0c04 	ldccs	12, cr0, [ip, #16]
    ea6c:	57010000 	strpl	r0, [r1, -r0]
    ea70:	000000ce 	andeq	r0, r0, lr, asr #1
    ea74:	2e650c08 	cdpcs	12, 6, cr0, cr5, cr8, {0}
    ea78:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    ea7c:	000000ce 	andeq	r0, r0, lr, asr #1
    ea80:	2ddf0c0c 	ldclcs	12, cr0, [pc, #48]	; eab8 <__exidx_end+0x8d38>
    ea84:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    ea88:	000000c3 	andeq	r0, r0, r3, asr #1
    ea8c:	cf030010 	svcgt	0x00030010
    ea90:	01000030 	tsteq	r0, r0, lsr r0
    ea94:	0003605a 	andeq	r6, r3, sl, asr r0
    ea98:	2d230d00 	stccs	13, cr0, [r3, #-0]
    ea9c:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    eaa0:	0003d301 	andeq	sp, r3, r1, lsl #6
    eaa4:	30fd0e00 	rscscc	r0, sp, r0, lsl #28
    eaa8:	65010000 	strvs	r0, [r1, #-0]
    eaac:	000000ce 	andeq	r0, r0, lr, asr #1
    eab0:	002d740e 	eoreq	r7, sp, lr, lsl #8
    eab4:	ce650100 	powgts	f0, f5, f0
    eab8:	00000000 	andeq	r0, r0, r0
    eabc:	002d5c0f 	eoreq	r5, sp, pc, lsl #24
    eac0:	01100200 	tsteq	r0, r0, lsl #4
    eac4:	000000ce 	andeq	r0, r0, lr, asr #1
    eac8:	0003fb01 	andeq	pc, r3, r1, lsl #22
    eacc:	30fd0e00 	rscscc	r0, sp, r0, lsl #28
    ead0:	a0010000 	andge	r0, r1, r0
    ead4:	000000ce 	andeq	r0, r0, lr, asr #1
    ead8:	0031bd10 	eorseq	fp, r1, r0, lsl sp
    eadc:	cea20100 	fdvgts	f0, f2, f0
    eae0:	00000000 	andeq	r0, r0, r0
    eae4:	0003b011 	andeq	fp, r3, r1, lsl r0
    eae8:	003ab000 	eorseq	fp, sl, r0
    eaec:	00005c00 	andeq	r5, r0, r0, lsl #24
    eaf0:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    eaf4:	12000004 	andne	r0, r0, #4
    eaf8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    eafc:	000038d4 	ldrdeq	r3, [r0], -r4
    eb00:	0003c712 	andeq	ip, r3, r2, lsl r7
    eb04:	00390000 	eorseq	r0, r9, r0
    eb08:	3aea1300 	bcc	ffa93710 <_estack+0xdfa8e710>
    eb0c:	00140000 	andseq	r0, r4, r0
    eb10:	04610000 	strbteq	r0, [r1], #-0
    eb14:	bc120000 	ldclt	0, cr0, [r2], {-0}
    eb18:	2c000003 	stccs	0, cr0, [r0], {3}
    eb1c:	12000039 	andne	r0, r0, #57	; 0x39
    eb20:	000003c7 	andeq	r0, r0, r7, asr #7
    eb24:	0000393f 	andeq	r3, r0, pc, lsr r9
    eb28:	003afe14 	eorseq	pc, sl, r4, lsl lr	; <UNPREDICTABLE>
    eb2c:	00740200 	rsbseq	r0, r4, r0, lsl #4
    eb30:	01530115 	cmpeq	r3, r5, lsl r1
    eb34:	52011532 	andpl	r1, r1, #209715200	; 0xc800000
    eb38:	01153c01 	tsteq	r5, r1, lsl #24
    eb3c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    eb40:	0c055001 	stceq	0, cr5, [r5], {1}
    eb44:	400ca000 	andmi	sl, ip, r0
    eb48:	ce160000 	cdpgt	0, 1, cr0, cr6, cr0, {0}
    eb4c:	0200003a 	andeq	r0, r0, #58	; 0x3a
    eb50:	048d0076 	streq	r0, [sp], #118	; 0x76
    eb54:	01150000 	tsteq	r5, r0
    eb58:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    eb5c:	31015201 	tstcc	r1, r1, lsl #4
    eb60:	01510115 	cmpeq	r1, r5, lsl r1
    eb64:	50011530 	andpl	r1, r1, r0, lsr r5
    eb68:	a0000c05 	andge	r0, r0, r5, lsl #24
    eb6c:	0215400c 	andseq	r4, r5, #12
    eb70:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    eb74:	e6140000 	ldr	r0, [r4], -r0
    eb78:	0200003a 	andeq	r0, r0, #58	; 0x3a
    eb7c:	01150076 	tsteq	r5, r6, ror r0
    eb80:	15310153 	ldrne	r0, [r1, #-339]!	; 0xfffffead
    eb84:	32015201 	andcc	r5, r1, #268435456	; 0x10000000
    eb88:	01510115 	cmpeq	r1, r5, lsl r1
    eb8c:	50011530 	andpl	r1, r1, r0, lsr r5
    eb90:	a0000c05 	andge	r0, r0, r5, lsl #24
    eb94:	0215400c 	andseq	r4, r5, #12
    eb98:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    eb9c:	11000000 	mrsne	r0, (UNDEF: 0)
    eba0:	000003d3 	ldrdeq	r0, [r0], -r3
    eba4:	00003b0c 	andeq	r3, r0, ip, lsl #22
    eba8:	0000002c 	andeq	r0, r0, ip, lsr #32
    ebac:	050d9c01 	streq	r9, [sp, #-3073]	; 0xfffff3ff
    ebb0:	e4120000 	ldr	r0, [r2], #-0
    ebb4:	60000003 	andvs	r0, r0, r3
    ebb8:	17000039 	smladxne	r0, r9, r0, r0
    ebbc:	000003ef 	andeq	r0, r0, pc, ror #7
    ebc0:	78185001 	ldmdavc	r8, {r0, ip, lr}
    ebc4:	f4000011 	vst4.8	{d0-d3}, [r0 :64], r1
    ebc8:	19000004 	stmdbne	r0, {r2}
    ebcc:	000003e4 	andeq	r0, r0, r4, ror #7
    ebd0:	11781a04 	cmnne	r8, r4, lsl #20
    ebd4:	ef1b0000 	svc	0x001b0000
    ebd8:	00000003 	andeq	r0, r0, r3
    ebdc:	3b2c1400 	blcc	b13be4 <__ccfg+0xaf3c3c>
    ebe0:	74020000 	strvc	r0, [r2], #-0
    ebe4:	51011500 	tstpl	r1, r0, lsl #10
    ebe8:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    ebec:	0c055001 	stceq	0, cr5, [r5], {1}
    ebf0:	400ca000 	andmi	sl, ip, r0
    ebf4:	931c0000 	tstls	ip, #0
    ebf8:	02000032 	andeq	r0, r0, #50	; 0x32
    ebfc:	00ce0184 	sbceq	r0, lr, r4, lsl #3
    ec00:	00000000 	andeq	r0, r0, r0
    ec04:	00900000 	addseq	r0, r0, r0
    ec08:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec0c:	00000576 	andeq	r0, r0, r6, ror r5
    ec10:	0030e91d 	eorseq	lr, r0, sp, lsl r9
    ec14:	cec20100 	polgts	f0, f2, f0
    ec18:	81000000 	mrshi	r0, (UNDEF: 0)
    ec1c:	1e000039 	mcrne	0, 0, r0, cr0, cr9, {1}
    ec20:	0000305c 	andeq	r3, r0, ip, asr r0
    ec24:	00cec401 	sbceq	ip, lr, r1, lsl #8
    ec28:	39ad0000 	stmibcc	sp!, {}	; <UNPREDICTABLE>
    ec2c:	751e0000 	ldrvc	r0, [lr, #-0]
    ec30:	01000030 	tsteq	r0, r0, lsr r0
    ec34:	0000c3c5 	andeq	ip, r0, r5, asr #7
    ec38:	0039c000 	eorseq	ip, r9, r0
    ec3c:	2deb1e00 	stclcs	14, cr1, [fp]
    ec40:	c6010000 	strgt	r0, [r1], -r0
    ec44:	000000ce 	andeq	r0, r0, lr, asr #1
    ec48:	000039e7 	andeq	r3, r0, r7, ror #19
    ec4c:	0000001f 	andeq	r0, r0, pc, lsl r0
    ec50:	00089e00 	andeq	r9, r8, r0, lsl #28
    ec54:	00001f00 	andeq	r1, r0, r0, lsl #30
    ec58:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    ec5c:	20000000 	andcs	r0, r0, r0
    ec60:	00002e9a 	muleq	r0, sl, lr
    ec64:	38019102 	stmdacc	r1, {r1, r8, ip, pc}
    ec68:	1800003b 	stmdane	r0, {r0, r1, r3, r4, r5}
    ec6c:	01000000 	mrseq	r0, (UNDEF: 0)
    ec70:	0005ae9c 	muleq	r5, ip, lr
    ec74:	3b422100 	blcc	109707c <__ccfg+0x10770d4>
    ec78:	03b00000 	movseq	r0, #0
    ec7c:	05a40000 	streq	r0, [r4, #0]!
    ec80:	01150000 	tsteq	r5, r0
    ec84:	15310151 	ldrne	r0, [r1, #-337]!	; 0xfffffeaf
    ec88:	33015001 	movwcc	r5, #4097	; 0x1001
    ec8c:	3b461f00 	blcc	1196894 <__ccfg+0x11768ec>
    ec90:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ec94:	22000000 	andcs	r0, r0, #0
    ec98:	000030b3 	strheq	r3, [r0], -r3	; <UNPREDICTABLE>
    ec9c:	bb012202 	bllt	574ac <__ccfg+0x37504>
    eca0:	03000005 	movweq	r0, #5
    eca4:	a7020102 	strge	r0, [r2, -r2, lsl #2]
    eca8:	2300000c 	movwcs	r0, #12
    ecac:	00003108 	andeq	r3, r0, r8, lsl #2
    ecb0:	03014002 	movweq	r4, #4098	; 0x1002
    ecb4:	002daa1c 	eoreq	sl, sp, ip, lsl sl
    ecb8:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
    ecbc:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    ecc0:	00003b50 	andeq	r3, r0, r0, asr fp
    ecc4:	00000060 	andeq	r0, r0, r0, rrx
    ecc8:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    eccc:	94240000 	strtls	r0, [r4], #-0
    ecd0:	01000030 	tsteq	r0, r0, lsr r0
    ecd4:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    ecd8:	3a3b0000 	bcc	ecece0 <__ccfg+0xeaed38>
    ecdc:	61240000 			; <UNDEFINED> instruction: 0x61240000
    ece0:	01000031 	tsteq	r0, r1, lsr r0
    ece4:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    ece8:	3a4e0000 	bcc	138ecf0 <__ccfg+0x136ed48>
    ecec:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    ecf0:	5c000005 	stcpl	0, cr0, [r0], {5}
    ecf4:	1000003b 	andne	r0, r0, fp, lsr r0
    ecf8:	01000000 	mrseq	r0, (UNDEF: 0)
    ecfc:	063c0109 	ldrteq	r0, [ip], -r9, lsl #2
    ed00:	6c140000 	ldcvs	0, cr0, [r4], {-0}
    ed04:	0200003b 	andeq	r0, r0, #59	; 0x3b
    ed08:	01150074 	tsteq	r5, r4, ror r0
    ed0c:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    ed10:	31015201 	tstcc	r1, r1, lsl #4
    ed14:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    ed18:	01153408 	tsteq	r5, r8, lsl #8
    ed1c:	000c0550 	andeq	r0, ip, r0, asr r5
    ed20:	00400ca0 	subeq	r0, r0, r0, lsr #25
    ed24:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    ed28:	3b6e0000 	blcc	1b8ed30 <__ccfg+0x1b6ed88>
    ed2c:	00080000 	andeq	r0, r8, r0
    ed30:	0a010000 	beq	4ed38 <__ccfg+0x2ed90>
    ed34:	00065a01 	andeq	r5, r6, r1, lsl #20
    ed38:	3b761f00 	blcc	1d96940 <__ccfg+0x1d76998>
    ed3c:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    ed40:	21000000 	mrscs	r0, (UNDEF: 0)
    ed44:	00003b58 	andeq	r3, r0, r8, asr fp
    ed48:	000003d3 	ldrdeq	r0, [r0], -r3
    ed4c:	0000066d 	andeq	r0, r0, sp, ror #12
    ed50:	01500115 	cmpeq	r0, r5, lsl r1
    ed54:	7a1f0031 	bvc	7cee20 <__ccfg+0x7aee78>
    ed58:	9e00003b 	mcrls	0, 0, r0, cr0, cr11, {1}
    ed5c:	00000008 	andeq	r0, r0, r8
    ed60:	002eff20 	eoreq	pc, lr, r0, lsr #30
    ed64:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
    ed68:	00003bb0 			; <UNDEFINED> instruction: 0x00003bb0
    ed6c:	00000034 	andeq	r0, r0, r4, lsr r0
    ed70:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    ed74:	c2250000 	eorgt	r0, r5, #0
    ed78:	c2000005 	andgt	r0, r0, #5
    ed7c:	0800003b 	stmdaeq	r0, {r0, r1, r3, r4, r5}
    ed80:	01000000 	mrseq	r0, (UNDEF: 0)
    ed84:	06ab012f 	strteq	r0, [fp], pc, lsr #2
    ed88:	ca1f0000 	bgt	7ced90 <__ccfg+0x7aede8>
    ed8c:	b500003b 	strlt	r0, [r0, #-59]	; 0xffffffc5
    ed90:	00000008 	andeq	r0, r0, r8
    ed94:	003bba21 	eorseq	fp, fp, r1, lsr #20
    ed98:	0003b000 	andeq	fp, r3, r0
    ed9c:	0006c300 	andeq	ip, r6, r0, lsl #6
    eda0:	51011500 	tstpl	r1, r0, lsl #10
    eda4:	01153001 	tsteq	r5, r1
    eda8:	00330150 	eorseq	r0, r3, r0, asr r1
    edac:	003bc021 	eorseq	ip, fp, r1, lsr #32
    edb0:	0003d300 	andeq	sp, r3, r0, lsl #6
    edb4:	0006d600 	andeq	sp, r6, r0, lsl #12
    edb8:	50011500 	andpl	r1, r1, r0, lsl #10
    edbc:	1f003101 	svcne	0x00003101
    edc0:	00003bce 	andeq	r3, r0, lr, asr #23
    edc4:	0000089e 	muleq	r0, lr, r8
    edc8:	003bd61f 	eorseq	sp, fp, pc, lsl r6
    edcc:	0008aa00 	andeq	sl, r8, r0, lsl #20
    edd0:	591c0000 	ldmdbpl	ip, {}	; <UNPREDICTABLE>
    edd4:	0200002f 	andeq	r0, r0, #47	; 0x2f
    edd8:	00c301f2 	strdeq	r0, [r3], #18
    eddc:	00000000 	andeq	r0, r0, r0
    ede0:	00380000 	eorseq	r0, r8, r0
    ede4:	9c010000 	stcls	0, cr0, [r1], {-0}
    ede8:	0000079a 	muleq	r0, sl, r7
    edec:	00312726 	eorseq	r2, r1, r6, lsr #14
    edf0:	013c0100 	teqeq	ip, r0, lsl #2
    edf4:	000000c3 	andeq	r0, r0, r3, asr #1
    edf8:	00003a61 	andeq	r3, r0, r1, ror #20
    edfc:	00308a27 	eorseq	r8, r0, r7, lsr #20
    ee00:	013f0100 	teqeq	pc, r0, lsl #2
    ee04:	000000ce 	andeq	r0, r0, lr, asr #1
    ee08:	ed275101 	stfs	f5, [r7, #-4]!
    ee0c:	01000032 	tsteq	r0, r2, lsr r0
    ee10:	00c30141 	sbceq	r0, r3, r1, asr #2
    ee14:	71050000 	mrsvc	r0, (UNDEF: 5)
    ee18:	9f264000 	svcls	0x00264000
    ee1c:	002dfe27 	eoreq	pc, sp, r7, lsr #28
    ee20:	01430100 	mrseq	r0, (UNDEF: 83)
    ee24:	000000c3 	andeq	r0, r0, r3, asr #1
    ee28:	40007107 	andmi	r7, r0, r7, lsl #2
    ee2c:	9f264824 	svcls	0x00264824
    ee30:	002e0627 	eoreq	r0, lr, r7, lsr #12
    ee34:	01450100 	mrseq	r0, (UNDEF: 85)
    ee38:	000000c3 	andeq	r0, r0, r3, asr #1
    ee3c:	48007107 	stmdami	r0, {r0, r1, r2, r8, ip, sp, lr}
    ee40:	9f264824 	svcls	0x00264824
    ee44:	002e0e24 	eoreq	r0, lr, r4, lsr #28
    ee48:	01470100 	mrseq	r0, (UNDEF: 87)
    ee4c:	000000c3 	andeq	r0, r0, r3, asr #1
    ee50:	00003a8f 	andeq	r3, r0, pc, lsl #21
    ee54:	002e7724 	eoreq	r7, lr, r4, lsr #14
    ee58:	01560100 	cmpeq	r6, r0, lsl #2
    ee5c:	000000c3 	andeq	r0, r0, r3, asr #1
    ee60:	00003aa8 	andeq	r3, r0, r8, lsr #21
    ee64:	00302f24 	eorseq	r2, r0, r4, lsr #30
    ee68:	01570100 	cmpeq	r7, r0, lsl #2
    ee6c:	000000c3 	andeq	r0, r0, r3, asr #1
    ee70:	00003acb 	andeq	r3, r0, fp, asr #21
    ee74:	01006428 	tsteq	r0, r8, lsr #8
    ee78:	00c30158 	sbceq	r0, r3, r8, asr r1
    ee7c:	3af40000 	bcc	ffd0ee84 <_estack+0xdfd09e84>
    ee80:	1c000000 	stcne	0, cr0, [r0], {-0}
    ee84:	00003172 	andeq	r3, r0, r2, ror r1
    ee88:	ad020e02 	stcge	14, cr0, [r2, #-8]
    ee8c:	00000000 	andeq	r0, r0, r0
    ee90:	0c000000 	stceq	0, cr0, [r0], {-0}
    ee94:	01000000 	mrseq	r0, (UNDEF: 0)
    ee98:	0007d59c 	muleq	r7, ip, r5
    ee9c:	30482600 	subcc	r2, r8, r0, lsl #12
    eea0:	63010000 	movwvs	r0, #4096	; 0x1000
    eea4:	0000c301 	andeq	ip, r0, r1, lsl #6
    eea8:	003b6e00 	eorseq	r6, fp, r0, lsl #28
    eeac:	32212400 	eorcc	r2, r1, #0, 8
    eeb0:	85010000 	strhi	r0, [r1, #-0]
    eeb4:	0000c301 	andeq	ip, r0, r1, lsl #6
    eeb8:	003b8f00 	eorseq	r8, fp, r0, lsl #30
    eebc:	831c0000 	tsthi	ip, #0
    eec0:	0200002f 	andeq	r0, r0, #47	; 0x2f
    eec4:	00ce01c2 	sbceq	r0, lr, r2, asr #3
    eec8:	00000000 	andeq	r0, r0, r0
    eecc:	00340000 	eorseq	r0, r4, r0
    eed0:	9c010000 	stcls	0, cr0, [r1], {-0}
    eed4:	00000842 	andeq	r0, r0, r2, asr #16
    eed8:	00327424 	eorseq	r7, r2, r4, lsr #8
    eedc:	01920100 	orrseq	r0, r2, r0, lsl #2
    eee0:	000000ce 	andeq	r0, r0, lr, asr #1
    eee4:	00003bcf 	andeq	r3, r0, pc, asr #23
    eee8:	00201b24 	eoreq	r1, r0, r4, lsr #22
    eeec:	01930100 	orrseq	r0, r3, r0, lsl #2
    eef0:	000000ce 	andeq	r0, r0, lr, asr #1
    eef4:	00003bf1 	strdeq	r3, [r0], -r1
    eef8:	002f4624 	eoreq	r4, pc, r4, lsr #12
    eefc:	01940100 	orrseq	r0, r4, r0, lsl #2
    ef00:	000000ce 	andeq	r0, r0, lr, asr #1
    ef04:	00003c04 	andeq	r3, r0, r4, lsl #24
    ef08:	002ee424 	eoreq	lr, lr, r4, lsr #8
    ef0c:	01950100 	orrseq	r0, r5, r0, lsl #2
    ef10:	000000ce 	andeq	r0, r0, lr, asr #1
    ef14:	00003c27 	andeq	r3, r0, r7, lsr #24
    ef18:	0000001f 	andeq	r0, r0, pc, lsl r0
    ef1c:	00089e00 	andeq	r9, r8, r0, lsl #28
    ef20:	00001f00 	andeq	r1, r0, r0, lsl #30
    ef24:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ef28:	1c000000 	stcne	0, cr0, [r0], {-0}
    ef2c:	00003240 	andeq	r3, r0, r0, asr #4
    ef30:	ce01d302 	cdpgt	3, 0, cr13, cr1, cr2, {0}
    ef34:	00000000 	andeq	r0, r0, r0
    ef38:	1c000000 	stcne	0, cr0, [r0], {-0}
    ef3c:	01000000 	mrseq	r0, (UNDEF: 0)
    ef40:	00088d9c 	muleq	r8, ip, sp
    ef44:	30c42400 	sbccc	r2, r4, r0, lsl #8
    ef48:	b7010000 	strlt	r0, [r1, -r0]
    ef4c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ef50:	003c4300 	eorseq	r4, ip, r0, lsl #6
    ef54:	32322400 	eorscc	r2, r2, #0, 8
    ef58:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    ef5c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ef60:	003c5600 	eorseq	r5, ip, r0, lsl #12
    ef64:	2e812400 	cdpcs	4, 8, cr2, cr1, cr0, {0}
    ef68:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    ef6c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ef70:	003c7100 	eorseq	r7, ip, r0, lsl #2
    ef74:	3b290000 	blcc	a4ef7c <__ccfg+0xa2efd4>
    ef78:	01000030 	tsteq	r0, r0, lsr r0
    ef7c:	0003a55c 	andeq	sl, r3, ip, asr r5
    ef80:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    ef84:	2a200006 	bcs	80efa4 <__ccfg+0x7eeffc>
    ef88:	00002c0f 	andeq	r2, r0, pc, lsl #24
    ef8c:	ce034507 	cfsh32gt	mvfx4, mvfx3, #7
    ef90:	2b000000 	blcs	ef98 <__exidx_end+0x9218>
    ef94:	00002b76 	andeq	r2, r0, r6, ror fp
    ef98:	00c3aa08 	sbceq	sl, r3, r8, lsl #20
    ef9c:	132c0000 			; <UNDEFINED> instruction: 0x132c0000
    efa0:	0600002a 	streq	r0, [r0], -sl, lsr #32
    efa4:	00d90899 	smullseq	r0, r9, r9, r8
    efa8:	00000000 	andeq	r0, r0, r0
    efac:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    efb0:	36150004 	ldrcc	r0, [r5], -r4
    efb4:	01040000 	mrseq	r0, (UNDEF: 4)
    efb8:	00002a45 	andeq	r2, r0, r5, asr #20
    efbc:	00341101 	eorseq	r1, r4, r1, lsl #2
    efc0:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    efc4:	0011e800 	andseq	lr, r1, r0, lsl #16
    efc8:	00000000 	andeq	r0, r0, r0
    efcc:	007d9700 	rsbseq	r9, sp, r0, lsl #14
    efd0:	06010200 	streq	r0, [r1], -r0, lsl #4
    efd4:	00000c5d 	andeq	r0, r0, sp, asr ip
    efd8:	002a2003 	eoreq	r2, sl, r3
    efdc:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    efe0:	02000000 	andeq	r0, r0, #0
    efe4:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    efe8:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    efec:	03000031 	movweq	r0, #49	; 0x31
    eff0:	00004929 	andeq	r4, r0, r9, lsr #18
    eff4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    eff8:	00000a6b 	andeq	r0, r0, fp, ror #20
    effc:	002e1603 	eoreq	r1, lr, r3, lsl #12
    f000:	5b2b0300 	blpl	acfc08 <__ccfg+0xaafc60>
    f004:	02000000 	andeq	r0, r0, #0
    f008:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
    f00c:	a5030000 	strge	r0, [r3, #-0]
    f010:	0300002b 	movweq	r0, #43	; 0x2b
    f014:	00006d3f 	andeq	r6, r0, pc, lsr sp
    f018:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    f01c:	000007fd 	strdeq	r0, [r0], -sp
    f020:	0029b803 	eoreq	fp, r9, r3, lsl #16
    f024:	7f410300 	svcvc	0x00410300
    f028:	02000000 	andeq	r0, r0, #0
    f02c:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    f030:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    f034:	0007f805 	andeq	pc, r7, r5, lsl #16
    f038:	07080200 	streq	r0, [r8, -r0, lsl #4]
    f03c:	00000421 	andeq	r0, r0, r1, lsr #8
    f040:	69050404 	stmdbvs	r5, {r2, sl}
    f044:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    f048:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    f04c:	22030000 	andcs	r0, r3, #0
    f050:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    f054:	00002c14 	andeq	r2, r0, r4, lsl ip
    f058:	31f30300 	mvnscc	r0, r0, lsl #6
    f05c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    f060:	0000003e 	andeq	r0, r0, lr, lsr r0
    f064:	002e1803 	eoreq	r1, lr, r3, lsl #16
    f068:	501a0400 	andspl	r0, sl, r0, lsl #8
    f06c:	03000000 	movweq	r0, #0
    f070:	00002ba7 	andeq	r2, r0, r7, lsr #23
    f074:	00621f04 	rsbeq	r1, r2, r4, lsl #30
    f078:	ba030000 	blt	cf080 <__ccfg+0xaf0d8>
    f07c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    f080:	00007420 	andeq	r7, r0, r0, lsr #8
    f084:	331a0300 	tstcc	sl, #0, 6
    f088:	d4050000 	strle	r0, [r5], #-0
    f08c:	0000009b 	muleq	r0, fp, r0
    f090:	b9070402 	stmdblt	r7, {r1, sl}
    f094:	0500002c 	streq	r0, [r0, #-44]	; 0xffffffd4
    f098:	08010204 	stmdaeq	r1, {r2, r9}
    f09c:	00000c64 	andeq	r0, r0, r4, ror #24
    f0a0:	0024e703 	eoreq	lr, r4, r3, lsl #14
    f0a4:	ce3b0600 	cfmsuba32gt	mvax0, mvax0, mvfx11, mvfx0
    f0a8:	06000000 	streq	r0, [r0], -r0
    f0ac:	0000a204 	andeq	sl, r0, r4, lsl #4
    f0b0:	22ae0300 	adccs	r0, lr, #0, 6
    f0b4:	3c070000 	stccc	0, cr0, [r7], {-0}
    f0b8:	00000110 	andeq	r0, r0, r0, lsl r1
    f0bc:	00254d07 	eoreq	r4, r5, r7, lsl #26
    f0c0:	6f071000 	svcvs	0x00071000
    f0c4:	00000165 	andeq	r0, r0, r5, ror #2
    f0c8:	001f1908 	andseq	r1, pc, r8, lsl #18
    f0cc:	b8700700 	ldmdalt	r0!, {r8, r9, sl}^
    f0d0:	00000000 	andeq	r0, r0, r0
    f0d4:	00077808 	andeq	r7, r7, r8, lsl #16
    f0d8:	b8710700 	ldmdalt	r1!, {r8, r9, sl}^
    f0dc:	02000000 	andeq	r0, r0, #0
    f0e0:	00228c08 	eoreq	r8, r2, r8, lsl #24
    f0e4:	6d740700 	ldclvs	7, cr0, [r4, #-0]
    f0e8:	04000002 	streq	r0, [r0], #-2
    f0ec:	00201b08 	eoreq	r1, r0, r8, lsl #22
    f0f0:	f4750700 			; <UNDEFINED> instruction: 0xf4750700
    f0f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f0f8:	0022bc08 	eoreq	fp, r2, r8, lsl #24
    f0fc:	017d0700 	cmneq	sp, r0, lsl #14
    f100:	0c000002 	stceq	0, cr0, [r0], {2}
    f104:	00220608 	eoreq	r0, r2, r8, lsl #12
    f108:	46810700 	strmi	r0, [r1], r0, lsl #14
    f10c:	0d000002 	stceq	0, cr0, [r0, #-8]
    f110:	34420300 	strbcc	r0, [r2], #-768	; 0xfffffd00
    f114:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    f118:	00000170 	andeq	r0, r0, r0, ror r1
    f11c:	00342c07 	eorseq	r2, r4, r7, lsl #24
    f120:	a5071800 	strge	r1, [r7, #-2048]	; 0xfffff800
    f124:	00000201 	andeq	r0, r0, r1, lsl #4
    f128:	001f1908 	andseq	r1, pc, r8, lsl #18
    f12c:	b8a60700 	stmialt	r6!, {r8, r9, sl}
    f130:	00000000 	andeq	r0, r0, r0
    f134:	00077808 	andeq	r7, r7, r8, lsl #16
    f138:	b8a70700 	stmialt	r7!, {r8, r9, sl}
    f13c:	02000000 	andeq	r0, r0, #0
    f140:	00228c08 	eoreq	r8, r2, r8, lsl #24
    f144:	6daa0700 	stcvs	7, cr0, [sl]
    f148:	04000002 	streq	r0, [r0], #-2
    f14c:	00201b08 	eoreq	r1, r0, r8, lsl #22
    f150:	f4ab0700 	vld4.16	{d0[0],d1[0],d2[0],d3[0]}, [fp], r0
    f154:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f158:	0022bc08 	eoreq	fp, r2, r8, lsl #24
    f15c:	73b30700 			; <UNDEFINED> instruction: 0x73b30700
    f160:	0c000002 	stceq	0, cr0, [r0], {2}
    f164:	00220608 	eoreq	r0, r2, r8, lsl #12
    f168:	b8b70700 	ldmlt	r7!, {r8, r9, sl}
    f16c:	0d000002 	stceq	0, cr0, [r0, #-8]
    f170:	00003608 	andeq	r3, r0, r8, lsl #12
    f174:	a2b80700 	adcsge	r0, r8, #0, 14
    f178:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f17c:	0023d208 	eoreq	sp, r3, r8, lsl #4
    f180:	a2bf0700 	adcsge	r0, pc, #0, 14
    f184:	0f000000 	svceq	0x00000000
    f188:	00148308 	andseq	r8, r4, r8, lsl #6
    f18c:	dfd40700 	svcle	0x00d40700
    f190:	10000002 	andne	r0, r0, r2
    f194:	00209c08 	eoreq	r9, r0, r8, lsl #24
    f198:	b8d50700 	ldmlt	r5, {r8, r9, sl}^
    f19c:	12000000 	andne	r0, r0, #0
    f1a0:	0024da08 	eoreq	sp, r4, r8, lsl #20
    f1a4:	24d60700 	ldrbcs	r0, [r6], #1792	; 0x700
    f1a8:	14000003 	strne	r0, [r0], #-3
    f1ac:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f1b0:	00024676 	andeq	r4, r2, r6, ror r6
    f1b4:	276f0a00 	strbcs	r0, [pc, -r0, lsl #20]!
    f1b8:	77070000 	strvc	r0, [r7, -r0]
    f1bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f1c0:	00040401 	andeq	r0, r4, r1, lsl #8
    f1c4:	00210d0a 	eoreq	r0, r1, sl, lsl #26
    f1c8:	a2780700 	rsbsge	r0, r8, #0, 14
    f1cc:	01000000 	mrseq	r0, (UNDEF: 0)
    f1d0:	0a000301 	beq	fddc <__exidx_end+0xa05c>
    f1d4:	000021cd 	andeq	r2, r0, sp, asr #3
    f1d8:	00a27a07 	adceq	r7, r2, r7, lsl #20
    f1dc:	02010000 	andeq	r0, r1, #0
    f1e0:	880a0001 	stmdahi	sl, {r0}
    f1e4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f1e8:	0000a27b 	andeq	sl, r0, fp, ror r2
    f1ec:	00010100 	andeq	r0, r1, r0, lsl #2
    f1f0:	01090000 	mrseq	r0, (UNDEF: 9)
    f1f4:	026d7e07 	rsbeq	r7, sp, #7, 28	; 0x70
    f1f8:	ea0a0000 	b	28f200 <__ccfg+0x26f258>
    f1fc:	07000025 	streq	r0, [r0, -r5, lsr #32]
    f200:	0000a27f 	andeq	sl, r0, pc, ror r2
    f204:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f208:	273e0a00 	ldrcs	r0, [lr, -r0, lsl #20]!
    f20c:	80070000 	andhi	r0, r7, r0
    f210:	000000a2 	andeq	r0, r0, r2, lsr #1
    f214:	00000401 	andeq	r0, r0, r1, lsl #8
    f218:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    f21c:	09000001 	stmdbeq	r0, {r0}
    f220:	b8ac0701 	stmialt	ip!, {r0, r8, r9, sl}
    f224:	0a000002 	beq	f234 <__exidx_end+0x94b4>
    f228:	0000276f 	andeq	r2, r0, pc, ror #14
    f22c:	00a2ad07 	adceq	sl, r2, r7, lsl #26
    f230:	04010000 	streq	r0, [r1], #-0
    f234:	0d0a0004 	stceq	0, cr0, [sl, #-16]
    f238:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f23c:	0000a2ae 	andeq	sl, r0, lr, lsr #5
    f240:	03010100 	movweq	r0, #4352	; 0x1100
    f244:	21cd0a00 	biccs	r0, sp, r0, lsl #20
    f248:	b0070000 	andlt	r0, r7, r0
    f24c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f250:	00010201 	andeq	r0, r1, r1, lsl #4
    f254:	001f880a 	andseq	r8, pc, sl, lsl #16
    f258:	a2b10700 	adcsge	r0, r1, #0, 14
    f25c:	01000000 	mrseq	r0, (UNDEF: 0)
    f260:	00000001 	andeq	r0, r0, r1
    f264:	b4070109 	strlt	r0, [r7], #-265	; 0xfffffef7
    f268:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f26c:	0025ea0a 	eoreq	lr, r5, sl, lsl #20
    f270:	a2b50700 	adcsge	r0, r5, #0, 14
    f274:	01000000 	mrseq	r0, (UNDEF: 0)
    f278:	0a000404 	beq	10290 <__exidx_end+0xa510>
    f27c:	0000273e 	andeq	r2, r0, lr, lsr r7
    f280:	00a2b607 	adceq	fp, r2, r7, lsl #12
    f284:	04010000 	streq	r0, [r1], #-0
    f288:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    f28c:	24c20702 	strbcs	r0, [r2], #1794	; 0x702
    f290:	0a000003 	beq	f2a4 <__exidx_end+0x9524>
    f294:	000021c0 	andeq	r2, r0, r0, asr #3
    f298:	00b8c307 	adcseq	ip, r8, r7, lsl #6
    f29c:	03020000 	movweq	r0, #8192	; 0x2000
    f2a0:	5f0a000d 	svcpl	0x000a000d
    f2a4:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f2a8:	0000b8c9 	andeq	fp, r0, r9, asr #17
    f2ac:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    f2b0:	20ff0a00 	rscscs	r0, pc, r0, lsl #20
    f2b4:	cb070000 	blgt	1cf2bc <__ccfg+0x1af314>
    f2b8:	000000b8 	strheq	r0, [r0], -r8
    f2bc:	00060602 	andeq	r0, r6, r2, lsl #12
    f2c0:	0023fe0a 	eoreq	pc, r3, sl, lsl #28
    f2c4:	b8d20700 	ldmlt	r2, {r8, r9, sl}^
    f2c8:	02000000 	andeq	r0, r0, #0
    f2cc:	00000501 	andeq	r0, r0, r1, lsl #10
    f2d0:	00ce0406 	sbceq	r0, lr, r6, lsl #8
    f2d4:	4f030000 	svcmi	0x00030000
    f2d8:	08000033 	stmdaeq	r0, {r0, r1, r4, r5}
    f2dc:	00033542 	andeq	r3, r3, r2, asr #10
    f2e0:	33df0b00 	bicscc	r0, pc, #0, 22
    f2e4:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    f2e8:	03f901c1 	mvnseq	r0, #1073741872	; 0x40000030
    f2ec:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    f2f0:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f2f4:	00b801c2 	adcseq	r0, r8, r2, asr #3
    f2f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    f2fc:	00000778 	andeq	r0, r0, r8, ror r7
    f300:	b801c308 	stmdalt	r1, {r3, r8, r9, lr, pc}
    f304:	02000000 	andeq	r0, r0, #0
    f308:	00228c0c 	eoreq	r8, r2, ip, lsl #24
    f30c:	01c60800 	biceq	r0, r6, r0, lsl #16
    f310:	0000026d 	andeq	r0, r0, sp, ror #4
    f314:	201b0c04 	andscs	r0, fp, r4, lsl #24
    f318:	c7080000 	strgt	r0, [r8, -r0]
    f31c:	0000f401 	andeq	pc, r0, r1, lsl #8
    f320:	bc0c0800 	stclt	8, cr0, [ip], {-0}
    f324:	08000022 	stmdaeq	r0, {r1, r5}
    f328:	04ef01cf 	strbteq	r0, [pc], #463	; f330 <__exidx_end+0x95b0>
    f32c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    f330:	00002206 	andeq	r2, r0, r6, lsl #4
    f334:	3901d308 	stmdbcc	r1, {r3, r8, r9, ip, lr, pc}
    f338:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    f33c:	001f0e0c 	andseq	r0, pc, ip, lsl #28
    f340:	01d90800 	bicseq	r0, r9, r0, lsl #16
    f344:	00000563 	andeq	r0, r0, r3, ror #10
    f348:	22750c0e 	rsbscs	r0, r5, #3584	; 0xe00
    f34c:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    f350:	00058d01 	andeq	r8, r5, r1, lsl #26
    f354:	a40c1000 	strge	r1, [ip], #-0
    f358:	08000020 	stmdaeq	r0, {r5}
    f35c:	00a201df 	ldrdeq	r0, [r2], pc	; <UNPREDICTABLE>
    f360:	0c140000 	ldceq	0, cr0, [r4], {-0}
    f364:	00002338 	andeq	r2, r0, r8, lsr r3
    f368:	b701e708 	strlt	lr, [r1, -r8, lsl #14]
    f36c:	15000005 	strne	r0, [r0, #-5]
    f370:	0020100c 	eoreq	r1, r0, ip
    f374:	01fb0800 	mvnseq	r0, r0, lsl #16
    f378:	000005e1 	andeq	r0, r0, r1, ror #11
    f37c:	14830c16 	strne	r0, [r3], #3094	; 0xc16
    f380:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    f384:	00063b02 	andeq	r3, r6, r2, lsl #22
    f388:	9c0c1800 	stcls	8, cr1, [ip], {-0}
    f38c:	08000020 	stmdaeq	r0, {r5}
    f390:	00b8020f 	adcseq	r0, r8, pc, lsl #4
    f394:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    f398:	000024da 	ldrdeq	r2, [r0], -sl
    f39c:	24021008 	strcs	r1, [r2], #-8
    f3a0:	1c000003 	stcne	0, cr0, [r0], {3}
    f3a4:	247a0300 	ldrbtcs	r0, [sl], #-768	; 0xfffffd00
    f3a8:	43080000 	movwmi	r0, #32768	; 0x8000
    f3ac:	00000404 	andeq	r0, r0, r4, lsl #8
    f3b0:	00245b0b 	eoreq	r5, r4, fp, lsl #22
    f3b4:	1a082800 	bne	2193bc <__ccfg+0x1f9414>
    f3b8:	0004ef02 	andeq	lr, r4, r2, lsl #30
    f3bc:	1f190c00 	svcne	0x00190c00
    f3c0:	1b080000 	blne	20f3c8 <__ccfg+0x1ef420>
    f3c4:	0000b802 	andeq	fp, r0, r2, lsl #16
    f3c8:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    f3cc:	08000007 	stmdaeq	r0, {r0, r1, r2}
    f3d0:	00b8021d 	adcseq	r0, r8, sp, lsl r2
    f3d4:	0c020000 	stceq	0, cr0, [r2], {-0}
    f3d8:	0000228c 	andeq	r2, r0, ip, lsl #5
    f3dc:	6d022008 	stcvs	0, cr2, [r2, #-32]	; 0xffffffe0
    f3e0:	04000002 	streq	r0, [r0], #-2
    f3e4:	00201b0c 	eoreq	r1, r0, ip, lsl #22
    f3e8:	02210800 	eoreq	r0, r1, #0, 16
    f3ec:	000000f4 	strdeq	r0, [r0], -r4
    f3f0:	22bc0c08 	adcscs	r0, ip, #8, 24	; 0x800
    f3f4:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    f3f8:	00068502 	andeq	r8, r6, r2, lsl #10
    f3fc:	060c0c00 	streq	r0, [ip], -r0, lsl #24
    f400:	08000022 	stmdaeq	r0, {r1, r5}
    f404:	06cf022d 	strbeq	r0, [pc], sp, lsr #4
    f408:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    f40c:	00001f0e 	andeq	r1, r0, lr, lsl #30
    f410:	f9023308 			; <UNDEFINED> instruction: 0xf9023308
    f414:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    f418:	0022750c 	eoreq	r7, r2, ip, lsl #10
    f41c:	02380800 	eorseq	r0, r8, #0, 16
    f420:	00000723 	andeq	r0, r0, r3, lsr #14
    f424:	20a40c10 	adccs	r0, r4, r0, lsl ip
    f428:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    f42c:	0000a202 	andeq	sl, r0, r2, lsl #4
    f430:	380c1400 	stmdacc	ip, {sl, ip}
    f434:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f438:	074d0241 	strbeq	r0, [sp, -r1, asr #4]
    f43c:	0c150000 	ldceq	0, cr0, [r5], {-0}
    f440:	00002010 	andeq	r2, r0, r0, lsl r0
    f444:	77025508 	strvc	r5, [r2, -r8, lsl #10]
    f448:	16000007 	strne	r0, [r0], -r7
    f44c:	0014830c 	andseq	r8, r4, ip, lsl #6
    f450:	02680800 	rsbeq	r0, r8, #0, 16
    f454:	000007d1 	ldrdeq	r0, [r0], -r1
    f458:	209c0c18 	addscs	r0, ip, r8, lsl ip
    f45c:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    f460:	0000b802 	andeq	fp, r0, r2, lsl #16
    f464:	da0c1a00 	ble	315c6c <__ccfg+0x2f5cc4>
    f468:	08000024 	stmdaeq	r0, {r2, r5}
    f46c:	0324026a 			; <UNDEFINED> instruction: 0x0324026a
    f470:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    f474:	00001f4b 	andeq	r1, r0, fp, asr #30
    f478:	b8026c08 	stmdalt	r2, {r3, sl, fp, sp, lr}
    f47c:	20000000 	andcs	r0, r0, r0
    f480:	0022940c 	eoreq	r9, r2, ip, lsl #8
    f484:	02700800 	rsbseq	r0, r0, #0, 16
    f488:	000000ad 	andeq	r0, r0, sp, lsr #1
    f48c:	23d20c22 	bicscs	r0, r2, #8704	; 0x2200
    f490:	73080000 	movwvc	r0, #32768	; 0x8000
    f494:	0000a202 	andeq	sl, r0, r2, lsl #4
    f498:	0d002400 	cfstrseq	mvf2, [r0, #-0]
    f49c:	01c80801 	biceq	r0, r8, r1, lsl #16
    f4a0:	00000539 	andeq	r0, r0, r9, lsr r5
    f4a4:	00276f0e 	eoreq	r6, r7, lr, lsl #30
    f4a8:	01c90800 	biceq	r0, r9, r0, lsl #16
    f4ac:	000000a2 	andeq	r0, r0, r2, lsr #1
    f4b0:	00040401 	andeq	r0, r4, r1, lsl #8
    f4b4:	00210d0e 	eoreq	r0, r1, lr, lsl #26
    f4b8:	01ca0800 	biceq	r0, sl, r0, lsl #16
    f4bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f4c0:	00030101 	andeq	r0, r3, r1, lsl #2
    f4c4:	0021cd0e 	eoreq	ip, r1, lr, lsl #26
    f4c8:	01cc0800 	biceq	r0, ip, r0, lsl #16
    f4cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f4d0:	00010201 	andeq	r0, r1, r1, lsl #4
    f4d4:	001f880e 	andseq	r8, pc, lr, lsl #16
    f4d8:	01cd0800 	biceq	r0, sp, r0, lsl #16
    f4dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f4e0:	00000101 	andeq	r0, r0, r1, lsl #2
    f4e4:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f4e8:	056301d0 	strbeq	r0, [r3, #-464]!	; 0xfffffe30
    f4ec:	ea0e0000 	b	38f4f4 <__ccfg+0x36f54c>
    f4f0:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f4f4:	00a201d1 	ldrdeq	r0, [r2], r1	; <UNPREDICTABLE>
    f4f8:	04010000 	streq	r0, [r1], #-0
    f4fc:	3e0e0004 	cdpcc	0, 0, cr0, cr14, cr4, {0}
    f500:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f504:	00a201d2 	ldrdeq	r0, [r2], r2	; <UNPREDICTABLE>
    f508:	04010000 	streq	r0, [r1], #-0
    f50c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f510:	01d40802 	bicseq	r0, r4, r2, lsl #16
    f514:	0000058d 	andeq	r0, r0, sp, lsl #11
    f518:	0022250e 	eoreq	r2, r2, lr, lsl #10
    f51c:	01d50800 	bicseq	r0, r5, r0, lsl #16
    f520:	000000b8 	strheq	r0, [r0], -r8
    f524:	000d0302 	andeq	r0, sp, r2, lsl #6
    f528:	0027210e 	eoreq	r2, r7, lr, lsl #2
    f52c:	01d80800 	bicseq	r0, r8, r0, lsl #16
    f530:	000000b8 	strheq	r0, [r0], -r8
    f534:	00000d02 	andeq	r0, r0, r2, lsl #26
    f538:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    f53c:	05b701da 	ldreq	r0, [r7, #474]!	; 0x1da
    f540:	ba0e0000 	blt	38f548 <__ccfg+0x36f5a0>
    f544:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f548:	00ce01db 	ldrdeq	r0, [lr], #27
    f54c:	04040000 	streq	r0, [r4], #-0
    f550:	ca0e001c 	bgt	38f5c8 <__ccfg+0x36f620>
    f554:	08000024 	stmdaeq	r0, {r2, r5}
    f558:	00ce01dd 	ldrdeq	r0, [lr], #29
    f55c:	15040000 	strne	r0, [r4, #-0]
    f560:	0d000003 	stceq	0, cr0, [r0, #-12]
    f564:	01e00801 	mvneq	r0, r1, lsl #16
    f568:	000005e1 	andeq	r0, r0, r1, ror #11
    f56c:	0026160e 	eoreq	r1, r6, lr, lsl #12
    f570:	01e10800 	mvneq	r0, r0, lsl #16
    f574:	000000a2 	andeq	r0, r0, r2, lsr #1
    f578:	00020601 	andeq	r0, r2, r1, lsl #12
    f57c:	001fe00e 	andseq	lr, pc, lr
    f580:	01e30800 	mvneq	r0, r0, lsl #16
    f584:	000000a2 	andeq	r0, r0, r2, lsr #1
    f588:	00000201 	andeq	r0, r0, r1, lsl #4
    f58c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f590:	063b01e8 	ldrteq	r0, [fp], -r8, ror #3
    f594:	c30e0000 	movwgt	r0, #57344	; 0xe000
    f598:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f59c:	00b801e9 	adcseq	r0, r8, r9, ror #3
    f5a0:	06020000 	streq	r0, [r2], -r0
    f5a4:	5f0e000a 	svcpl	0x000e000a
    f5a8:	08000022 	stmdaeq	r0, {r1, r5}
    f5ac:	00b801ea 	adcseq	r0, r8, sl, ror #3
    f5b0:	01020000 	mrseq	r0, (UNDEF: 2)
    f5b4:	2b0e0009 	blcs	38f5e0 <__ccfg+0x36f638>
    f5b8:	08000024 	stmdaeq	r0, {r2, r5}
    f5bc:	00b801ec 	adcseq	r0, r8, ip, ror #3
    f5c0:	01020000 	mrseq	r0, (UNDEF: 2)
    f5c4:	c80e0008 	stmdagt	lr, {r3}
    f5c8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f5cc:	00b801ee 	adcseq	r0, r8, lr, ror #3
    f5d0:	04020000 	streq	r0, [r2], #-0
    f5d4:	6b0e0004 	blvs	38f5ec <__ccfg+0x36f644>
    f5d8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f5dc:	00b801f3 	ldrshteq	r0, [r8], r3
    f5e0:	03020000 	movweq	r0, #8192	; 0x2000
    f5e4:	0d000000 	stceq	0, cr0, [r0, #-0]
    f5e8:	01fc0802 	mvnseq	r0, r2, lsl #16
    f5ec:	00000685 	andeq	r0, r0, r5, lsl #13
    f5f0:	0021c00e 	eoreq	ip, r1, lr
    f5f4:	01fd0800 	mvnseq	r0, r0, lsl #16
    f5f8:	000000b8 	strheq	r0, [r0], -r8
    f5fc:	000d0302 	andeq	r0, sp, r2, lsl #6
    f600:	00215f0e 	eoreq	r5, r1, lr, lsl #30
    f604:	02030800 	andeq	r0, r3, #0, 16
    f608:	000000b8 	strheq	r0, [r0], -r8
    f60c:	000c0102 	andeq	r0, ip, r2, lsl #2
    f610:	0020ff0e 	eoreq	pc, r0, lr, lsl #30
    f614:	02050800 	andeq	r0, r5, #0, 16
    f618:	000000b8 	strheq	r0, [r0], -r8
    f61c:	00060602 	andeq	r0, r6, r2, lsl #12
    f620:	0023fe0e 	eoreq	pc, r3, lr, lsl #28
    f624:	020c0800 	andeq	r0, ip, #0, 16
    f628:	000000b8 	strheq	r0, [r0], -r8
    f62c:	00050102 	andeq	r0, r5, r2, lsl #2
    f630:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f634:	06cf0222 	strbeq	r0, [pc], r2, lsr #4
    f638:	6f0e0000 	svcvs	0x000e0000
    f63c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f640:	00a20223 	adceq	r0, r2, r3, lsr #4
    f644:	04010000 	streq	r0, [r1], #-0
    f648:	0d0e0004 	stceq	0, cr0, [lr, #-16]
    f64c:	08000021 	stmdaeq	r0, {r0, r5}
    f650:	00a20224 	adceq	r0, r2, r4, lsr #4
    f654:	01010000 	mrseq	r0, (UNDEF: 1)
    f658:	cd0e0003 	stcgt	0, cr0, [lr, #-12]
    f65c:	08000021 	stmdaeq	r0, {r0, r5}
    f660:	00a20226 	adceq	r0, r2, r6, lsr #4
    f664:	02010000 	andeq	r0, r1, #0
    f668:	880e0001 	stmdahi	lr, {r0}
    f66c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f670:	00a20227 	adceq	r0, r2, r7, lsr #4
    f674:	01010000 	mrseq	r0, (UNDEF: 1)
    f678:	0d000000 	stceq	0, cr0, [r0, #-0]
    f67c:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    f680:	000006f9 	strdeq	r0, [r0], -r9
    f684:	0025ea0e 	eoreq	lr, r5, lr, lsl #20
    f688:	022b0800 	eoreq	r0, fp, #0, 16
    f68c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f690:	00040401 	andeq	r0, r4, r1, lsl #8
    f694:	00273e0e 	eoreq	r3, r7, lr, lsl #28
    f698:	022c0800 	eoreq	r0, ip, #0, 16
    f69c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6a0:	00000401 	andeq	r0, r0, r1, lsl #8
    f6a4:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f6a8:	0723022e 	streq	r0, [r3, -lr, lsr #4]!
    f6ac:	250e0000 	strcs	r0, [lr, #-0]
    f6b0:	08000022 	stmdaeq	r0, {r1, r5}
    f6b4:	00b8022f 	adcseq	r0, r8, pc, lsr #4
    f6b8:	03020000 	movweq	r0, #8192	; 0x2000
    f6bc:	210e000d 	tstcs	lr, sp
    f6c0:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f6c4:	00b80232 	adcseq	r0, r8, r2, lsr r2
    f6c8:	0d020000 	stceq	0, cr0, [r2, #-0]
    f6cc:	0d000000 	stceq	0, cr0, [r0, #-0]
    f6d0:	02340804 	eorseq	r0, r4, #4, 16	; 0x40000
    f6d4:	0000074d 	andeq	r0, r0, sp, asr #14
    f6d8:	0023ba0e 	eoreq	fp, r3, lr, lsl #20
    f6dc:	02350800 	eorseq	r0, r5, #0, 16
    f6e0:	000000ce 	andeq	r0, r0, lr, asr #1
    f6e4:	001c0404 	andseq	r0, ip, r4, lsl #8
    f6e8:	0024ca0e 	eoreq	ip, r4, lr, lsl #20
    f6ec:	02370800 	eorseq	r0, r7, #0, 16
    f6f0:	000000ce 	andeq	r0, r0, lr, asr #1
    f6f4:	00031504 	andeq	r1, r3, r4, lsl #10
    f6f8:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f6fc:	0777023a 			; <UNDEFINED> instruction: 0x0777023a
    f700:	160e0000 	strne	r0, [lr], -r0
    f704:	08000026 	stmdaeq	r0, {r1, r2, r5}
    f708:	00a2023b 	adceq	r0, r2, fp, lsr r2
    f70c:	06010000 	streq	r0, [r1], -r0
    f710:	e00e0002 	and	r0, lr, r2
    f714:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f718:	00a2023d 	adceq	r0, r2, sp, lsr r2
    f71c:	02010000 	andeq	r0, r1, #0
    f720:	0d000000 	stceq	0, cr0, [r0, #-0]
    f724:	02420802 	subeq	r0, r2, #131072	; 0x20000
    f728:	000007d1 	ldrdeq	r0, [r0], -r1
    f72c:	0023c30e 	eoreq	ip, r3, lr, lsl #6
    f730:	02430800 	subeq	r0, r3, #0, 16
    f734:	000000b8 	strheq	r0, [r0], -r8
    f738:	000a0602 	andeq	r0, sl, r2, lsl #12
    f73c:	00225f0e 	eoreq	r5, r2, lr, lsl #30
    f740:	02440800 	subeq	r0, r4, #0, 16
    f744:	000000b8 	strheq	r0, [r0], -r8
    f748:	00090102 	andeq	r0, r9, r2, lsl #2
    f74c:	00242b0e 	eoreq	r2, r4, lr, lsl #22
    f750:	02460800 	subeq	r0, r6, #0, 16
    f754:	000000b8 	strheq	r0, [r0], -r8
    f758:	00080102 	andeq	r0, r8, r2, lsl #2
    f75c:	001fc80e 	andseq	ip, pc, lr, lsl #16
    f760:	02480800 	subeq	r0, r8, #0, 16
    f764:	000000b8 	strheq	r0, [r0], -r8
    f768:	00040402 	andeq	r0, r4, r2, lsl #8
    f76c:	001f6b0e 	andseq	r6, pc, lr, lsl #22
    f770:	024d0800 	subeq	r0, sp, #0, 16
    f774:	000000b8 	strheq	r0, [r0], -r8
    f778:	00000302 	andeq	r0, r0, r2, lsl #6
    f77c:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f780:	081b0256 	ldmdaeq	fp, {r1, r2, r4, r6, r9}
    f784:	c00e0000 	andgt	r0, lr, r0
    f788:	08000021 	stmdaeq	r0, {r0, r5}
    f78c:	00b80257 	adcseq	r0, r8, r7, asr r2
    f790:	03020000 	movweq	r0, #8192	; 0x2000
    f794:	5f0e000d 	svcpl	0x000e000d
    f798:	08000021 	stmdaeq	r0, {r0, r5}
    f79c:	00b8025d 	adcseq	r0, r8, sp, asr r2
    f7a0:	01020000 	mrseq	r0, (UNDEF: 2)
    f7a4:	ff0e000c 			; <UNDEFINED> instruction: 0xff0e000c
    f7a8:	08000020 	stmdaeq	r0, {r5}
    f7ac:	00b8025f 	adcseq	r0, r8, pc, asr r2
    f7b0:	06020000 	streq	r0, [r2], -r0
    f7b4:	fe0e0006 	cdp2	0, 0, cr0, cr14, cr6, {0}
    f7b8:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f7bc:	00b80266 	adcseq	r0, r8, r6, ror #4
    f7c0:	01020000 	mrseq	r0, (UNDEF: 2)
    f7c4:	09000005 	stmdbeq	r0, {r0, r2}
    f7c8:	54480210 	strbpl	r0, [r8], #-528	; 0xfffffdf0
    f7cc:	08000008 	stmdaeq	r0, {r3}
    f7d0:	00002185 	andeq	r2, r0, r5, lsl #3
    f7d4:	00ce4902 	sbceq	r4, lr, r2, lsl #18
    f7d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f7dc:	000020e6 	andeq	r2, r0, r6, ror #1
    f7e0:	00ce4a02 	sbceq	r4, lr, r2, lsl #20
    f7e4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    f7e8:	00002531 	andeq	r2, r0, r1, lsr r5
    f7ec:	00ce4b02 	sbceq	r4, lr, r2, lsl #22
    f7f0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    f7f4:	00002684 	andeq	r2, r0, r4, lsl #13
    f7f8:	00ce4c02 	sbceq	r4, lr, r2, lsl #24
    f7fc:	000c0000 	andeq	r0, ip, r0
    f800:	001f9103 	andseq	r9, pc, r3, lsl #2
    f804:	1b4d0200 	blne	135000c <__ccfg+0x1330064>
    f808:	0f000008 	svceq	0x00000008
    f80c:	00003493 	muleq	r0, r3, r4
    f810:	03013e02 	movweq	r3, #7682	; 0x1e02
    f814:	0032f510 	eorseq	pc, r2, r0, lsl r5	; <UNPREDICTABLE>
    f818:	01140200 	tsteq	r4, r0, lsl #4
    f81c:	000000ce 	andeq	r0, r0, lr, asr #1
    f820:	00000000 	andeq	r0, r0, r0
    f824:	00000014 	andeq	r0, r0, r4, lsl r0
    f828:	08909c01 	ldmeq	r0, {r0, sl, fp, ip, pc}
    f82c:	ad110000 	ldcge	0, cr0, [r1, #-0]
    f830:	01000033 	tsteq	r0, r3, lsr r0
    f834:	0000ce6a 	andeq	ip, r0, sl, ror #28
    f838:	00500100 	subseq	r0, r0, r0, lsl #2
    f83c:	00347b10 	eorseq	r7, r4, r0, lsl fp
    f840:	014c0200 	mrseq	r0, (UNDEF: 108)
    f844:	000000ce 	andeq	r0, r0, lr, asr #1
    f848:	00003be4 	andeq	r3, r0, r4, ror #23
    f84c:	00000028 	andeq	r0, r0, r8, lsr #32
    f850:	08d89c01 	ldmeq	r8, {r0, sl, fp, ip, pc}^
    f854:	70120000 	andsvc	r0, r2, r0
    f858:	0100704f 	tsteq	r0, pc, asr #32
    f85c:	0000ce7a 	andeq	ip, r0, sl, ror lr
    f860:	003c8d00 	eorseq	r8, ip, r0, lsl #26
    f864:	085f1300 	ldmdaeq	pc, {r8, r9, ip}^	; <UNPREDICTABLE>
    f868:	3bec0000 	blcc	ffb0f870 <_estack+0xdfb0a870>
    f86c:	00040000 	andeq	r0, r4, r0
    f870:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    f874:	00085f13 	andeq	r5, r8, r3, lsl pc
    f878:	003bf800 	eorseq	pc, fp, r0, lsl #16
    f87c:	00000600 	andeq	r0, r0, r0, lsl #12
    f880:	00830100 	addeq	r0, r3, r0, lsl #2
    f884:	00337d14 	eorseq	r7, r3, r4, lsl sp
    f888:	01540200 	cmpeq	r4, r0, lsl #4
    f88c:	00003c0c 	andeq	r3, r0, ip, lsl #24
    f890:	0000004c 	andeq	r0, r0, ip, asr #32
    f894:	aa159c01 	bge	5768a0 <__ccfg+0x5568f8>
    f898:	02000034 	andeq	r0, r0, #52	; 0x34
    f89c:	3c58015c 	ldfcce	f0, [r8], {92}	; 0x5c
    f8a0:	01500000 	cmpeq	r0, r0
    f8a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8a8:	0000092a 	andeq	r0, r0, sl, lsr #18
    f8ac:	0033a416 	eorseq	sl, r3, r6, lsl r4
    f8b0:	6da40100 	stfvss	f0, [r4]
    f8b4:	01000002 	tsteq	r0, r2
    f8b8:	33fa1650 	mvnscc	r1, #80, 12	; 0x5000000
    f8bc:	a4010000 	strge	r0, [r1], #-0
    f8c0:	0000092a 	andeq	r0, r0, sl, lsr #18
    f8c4:	a2175101 	andsge	r5, r7, #1073741824	; 0x40000000
    f8c8:	01000034 	tsteq	r0, r4, lsr r0
    f8cc:	000094a6 	andeq	r9, r0, r6, lsr #9
    f8d0:	003cae00 	eorseq	sl, ip, r0, lsl #28
    f8d4:	04060000 	streq	r0, [r6], #-0
    f8d8:	00000854 	andeq	r0, r0, r4, asr r8
    f8dc:	00346c15 	eorseq	r6, r4, r5, lsl ip
    f8e0:	016c0200 	cmneq	ip, r0, lsl #4
    f8e4:	00003da8 	andeq	r3, r0, r8, lsr #27
    f8e8:	00000118 	andeq	r0, r0, r8, lsl r1
    f8ec:	09ac9c01 	stmibeq	ip!, {r0, sl, fp, ip, pc}
    f8f0:	a4180000 	ldrge	r0, [r8], #-0
    f8f4:	01000033 	tsteq	r0, r3, lsr r0
    f8f8:	00026df3 	strdeq	r6, [r2], -r3
    f8fc:	003ccc00 	eorseq	ip, ip, r0, lsl #24
    f900:	34a21700 	strtcc	r1, [r2], #1792	; 0x700
    f904:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    f908:	000000c3 	andeq	r0, r0, r3, asr #1
    f90c:	00003ced 	andeq	r3, r0, sp, ror #25
    f910:	00346017 	eorseq	r6, r4, r7, lsl r0
    f914:	cef60100 	cdpgt	1, 15, cr0, cr6, cr0, {0}
    f918:	3c000000 	stccc	0, cr0, [r0], {-0}
    f91c:	1700003d 	smladxne	r0, sp, r0, r0
    f920:	00003310 	andeq	r3, r0, r0, lsl r3
    f924:	0324f701 	msreq	CPSR_s, #262144	; 0x40000
    f928:	3d860000 	stccc	0, cr0, [r6]
    f92c:	21190000 	tstcs	r9, r0
    f930:	01000033 	tsteq	r0, r3, lsr r0
    f934:	0000c3f8 	strdeq	ip, [r0], -r8
    f938:	34021700 	strcc	r1, [r2], #-1792	; 0xfffff900
    f93c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    f940:	000000ce 	andeq	r0, r0, lr, asr #1
    f944:	00003dc9 	andeq	r3, r0, r9, asr #27
    f948:	00339517 	eorseq	r9, r3, r7, lsl r5
    f94c:	cefa0100 	cdpgt	1, 15, cr0, cr10, cr0, {0}
    f950:	21000000 	mrscs	r0, (UNDEF: 0)
    f954:	0000003e 	andeq	r0, r0, lr, lsr r0
    f958:	00336a15 	eorseq	r6, r3, r5, lsl sl
    f95c:	01640200 	cmneq	r4, r0, lsl #4
    f960:	00003ec0 	andeq	r3, r0, r0, asr #29
    f964:	00000020 	andeq	r0, r0, r0, lsr #32
    f968:	09d39c01 	ldmibeq	r3, {r0, sl, fp, ip, pc}^
    f96c:	fa1a0000 	blx	68f974 <__ccfg+0x66f9cc>
    f970:	01000033 	tsteq	r0, r3, lsr r0
    f974:	092a0177 	stmdbeq	sl!, {r0, r1, r2, r4, r5, r6, r8}
    f978:	3e570000 	cdpcc	0, 5, cr0, cr7, cr0, {0}
    f97c:	15000000 	strne	r0, [r0, #-0]
    f980:	000033c8 	andeq	r3, r0, r8, asr #7
    f984:	00017402 	andeq	r7, r1, r2, lsl #8
    f988:	60000000 	andvs	r0, r0, r0
    f98c:	01000000 	mrseq	r0, (UNDEF: 0)
    f990:	000a379c 	muleq	sl, ip, r7
    f994:	26621b00 	strbtcs	r1, [r2], -r0, lsl #22
    f998:	84010000 	strhi	r0, [r1], #-0
    f99c:	0000ff01 	andeq	pc, r0, r1, lsl #30
    f9a0:	00033800 	andeq	r3, r3, r0, lsl #16
    f9a4:	21201b21 			; <UNDEFINED> instruction: 0x21201b21
    f9a8:	85010000 	strhi	r0, [r1, #-0]
    f9ac:	00032401 	andeq	r2, r3, r1, lsl #8
    f9b0:	0003bc00 	andeq	fp, r3, r0, lsl #24
    f9b4:	00691c21 	rsbeq	r1, r9, r1, lsr #24
    f9b8:	94018901 	strls	r8, [r1], #-2305	; 0xfffff6ff
    f9bc:	85000000 	strhi	r0, [r0, #-0]
    f9c0:	1d00003e 	stcne	0, cr0, [r0, #-248]	; 0xffffff08
    f9c4:	00000000 	andeq	r0, r0, r0
    f9c8:	00000a9c 	muleq	r0, ip, sl
    f9cc:	0252011e 	subseq	r0, r2, #-2147483641	; 0x80000007
    f9d0:	011e8408 	tsteq	lr, r8, lsl #8
    f9d4:	ff080251 			; <UNDEFINED> instruction: 0xff080251
    f9d8:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    f9dc:	0003380c 	andeq	r3, r3, ip, lsl #16
    f9e0:	15000021 	strne	r0, [r0, #-33]	; 0xffffffdf
    f9e4:	00003330 	andeq	r3, r0, r0, lsr r3
    f9e8:	e0017c02 	and	r7, r1, r2, lsl #24
    f9ec:	1c00003e 	stcne	0, cr0, [r0], {62}	; 0x3e
    f9f0:	01000000 	mrseq	r0, (UNDEF: 0)
    f9f4:	000a5c9c 	muleq	sl, ip, ip
    f9f8:	34581f00 	ldrbcc	r1, [r8], #-3840	; 0xfffff100
    f9fc:	96010000 	strls	r0, [r1], -r0
    fa00:	000a5c01 	andeq	r5, sl, r1, lsl #24
    fa04:	00500100 	subseq	r0, r0, r0, lsl #2
    fa08:	a7020102 	strge	r0, [r2, -r2, lsl #2]
    fa0c:	2000000c 	andcs	r0, r0, ip
    fa10:	000000b8 	strheq	r0, [r0], -r8
    fa14:	00000a73 	andeq	r0, r0, r3, ror sl
    fa18:	0000e421 	andeq	lr, r0, r1, lsr #8
    fa1c:	22000b00 	andcs	r0, r0, #0, 22
    fa20:	000033b5 			; <UNDEFINED> instruction: 0x000033b5
    fa24:	0a975201 	beq	fe5e4230 <_estack+0xde5df230>
    fa28:	c3180000 	tstgt	r8, #0
    fa2c:	5d3a3d3b 	ldcpl	13, cr3, [sl, #-236]!	; 0xffffff14
    fa30:	a13a713a 	teqge	sl, sl, lsr r1
    fa34:	0f3a8f0a 	svceq	0x003a8f0a
    fa38:	4909b33b 	stmdbmi	r9, {r0, r1, r3, r4, r5, r8, r9, ip, sp, pc}
    fa3c:	2f0a855e 	svccs	0x000a855e
    fa40:	233b853b 	teqcs	fp, #247463936	; 0xec00000
    fa44:	00000a63 	andeq	r0, r0, r3, ror #20
    fa48:	0016a824 	andseq	sl, r6, r4, lsr #16
    fa4c:	eb190900 	bl	651e54 <__ccfg+0x631eac>
    fa50:	25000000 	strcs	r0, [r0, #-0]
    fa54:	000000eb 	andeq	r0, r0, fp, ror #1
    fa58:	00009425 	andeq	r9, r0, r5, lsr #8
    fa5c:	00d92500 	sbcseq	r2, r9, r0, lsl #10
    fa60:	00000000 	andeq	r0, r0, r0
    fa64:	00000207 	andeq	r0, r0, r7, lsl #4
    fa68:	38350004 	ldmdacc	r5!, {r2}
    fa6c:	01040000 	mrseq	r0, (UNDEF: 4)
    fa70:	00002a45 	andeq	r2, r0, r5, asr #20
    fa74:	00357a01 	eorseq	r7, r5, r1, lsl #20
    fa78:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    fa7c:	00123000 	andseq	r3, r2, r0
    fa80:	00000000 	andeq	r0, r0, r0
    fa84:	00814200 	addeq	r4, r1, r0, lsl #4
    fa88:	06010200 	streq	r0, [r1], -r0, lsl #4
    fa8c:	00000c5d 	andeq	r0, r0, sp, asr ip
    fa90:	5b080102 	blpl	20fea0 <__ccfg+0x1efef8>
    fa94:	0200000c 	andeq	r0, r0, #12
    fa98:	0a6b0502 	beq	1ad0ea8 <__ccfg+0x1ab0f00>
    fa9c:	02020000 	andeq	r0, r2, #0
    faa0:	000d6c07 	andeq	r6, sp, r7, lsl #24
    faa4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    faa8:	000007fd 	strdeq	r0, [r0], -sp
    faac:	0029b803 	eoreq	fp, r9, r3, lsl #16
    fab0:	53410300 	movtpl	r0, #4864	; 0x1300
    fab4:	02000000 	andeq	r0, r0, #0
    fab8:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    fabc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fac0:	0007f805 	andeq	pc, r7, r5, lsl #16
    fac4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    fac8:	00000421 	andeq	r0, r0, r1, lsr #8
    facc:	69050404 	stmdbvs	r5, {r2, sl}
    fad0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    fad4:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    fad8:	ba030000 	blt	cfae0 <__ccfg+0xafb38>
    fadc:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    fae0:	00004820 	andeq	r4, r0, r0, lsr #16
    fae4:	35d70500 	ldrbcc	r0, [r7, #1280]	; 0x500
    fae8:	30020000 	andcc	r0, r2, r0
    faec:	42060303 	andmi	r0, r6, #201326592	; 0xc000000
    faf0:	01000036 	tsteq	r0, r6, lsr r0
    faf4:	ea0501fd 	b	1502f0 <__ccfg+0x130348>
    faf8:	01000035 	tsteq	r0, r5, lsr r0
    fafc:	07010182 	streq	r0, [r1, -r2, lsl #3]
    fb00:	000034c5 	andeq	r3, r0, r5, asr #9
    fb04:	fc010d01 	vdot.bf16	d0, d1, d1
    fb08:	d400003e 	strle	r0, [r0], #-62	; 0xffffffc2
    fb0c:	01000000 	mrseq	r0, (UNDEF: 0)
    fb10:	00016d9c 	muleq	r1, ip, sp
    fb14:	35c50800 	strbcc	r0, [r5, #2048]	; 0x800
    fb18:	0d010000 	stceq	0, cr0, [r1, #-0]
    fb1c:	00007601 	andeq	r7, r0, r1, lsl #12
    fb20:	003f2900 	eorseq	r2, pc, r0, lsl #18
    fb24:	36310900 	ldrtcc	r0, [r1], -r0, lsl #18
    fb28:	0f010000 	svceq	0x00010000
    fb2c:	00007601 	andeq	r7, r0, r1, lsl #12
    fb30:	003f5500 	eorseq	r5, pc, r0, lsl #10
    fb34:	34be0900 	ldrtcc	r0, [lr], #2304	; 0x900
    fb38:	10010000 	andne	r0, r1, r0
    fb3c:	00007601 	andeq	r7, r0, r1, lsl #12
    fb40:	003f6800 	eorseq	r6, pc, r0, lsl #16
    fb44:	00810a00 	addeq	r0, r1, r0, lsl #20
    fb48:	3f2e0000 	svccc	0x002e0000
    fb4c:	00060000 	andeq	r0, r6, r0
    fb50:	36010000 	strcc	r0, [r1], -r0
    fb54:	3f540b01 	svccc	0x00540b01
    fb58:	002a0000 	eoreq	r0, sl, r0
    fb5c:	011f0000 	tsteq	pc, r0
    fb60:	b7090000 	strlt	r0, [r9, -r0]
    fb64:	01000036 	tsteq	r0, r6, lsr r0
    fb68:	00760153 	rsbseq	r0, r6, r3, asr r1
    fb6c:	3f810000 	svccc	0x00810000
    fb70:	13090000 	movwne	r0, #36864	; 0x9000
    fb74:	01000036 	tsteq	r0, r6, lsr r0
    fb78:	00760154 	rsbseq	r0, r6, r4, asr r1
    fb7c:	3f940000 	svccc	0x00940000
    fb80:	0c000000 	stceq	0, cr0, [r0], {-0}
    fb84:	00003f3e 	andeq	r3, r0, lr, lsr pc
    fb88:	000001c3 	andeq	r0, r0, r3, asr #3
    fb8c:	00000133 	andeq	r0, r0, r3, lsr r1
    fb90:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fb94:	0c000074 	stceq	0, cr0, [r0], {116}	; 0x74
    fb98:	00003f46 	andeq	r3, r0, r6, asr #30
    fb9c:	000001d4 	ldrdeq	r0, [r0], -r4
    fba0:	0000014d 	andeq	r0, r0, sp, asr #2
    fba4:	0251010d 	subseq	r0, r1, #1073741827	; 0x40000003
    fba8:	010d0074 	tsteq	sp, r4, ror r0
    fbac:	00750250 	rsbseq	r0, r5, r0, asr r2
    fbb0:	3f840c00 	svccc	0x00840c00
    fbb4:	01ea0000 	mvneq	r0, r0
    fbb8:	01610000 	cmneq	r1, r0
    fbbc:	010d0000 	mrseq	r0, (UNDEF: 13)
    fbc0:	00740250 	rsbseq	r0, r4, r0, asr r2
    fbc4:	3f8e0e00 	svccc	0x008e0e00
    fbc8:	010d0000 	mrseq	r0, (UNDEF: 13)
    fbcc:	00320150 	eorseq	r0, r2, r0, asr r1
    fbd0:	35fd0f00 	ldrbcc	r0, [sp, #3840]!	; 0xf00
    fbd4:	5f070000 	svcpl	0x00070000
    fbd8:	00003fd0 	ldrdeq	r3, [r0], -r0
    fbdc:	000000a4 	andeq	r0, r0, r4, lsr #1
    fbe0:	01c39c01 	biceq	r9, r3, r1, lsl #24
    fbe4:	c5100000 	ldrgt	r0, [r0, #-0]
    fbe8:	01000035 	tsteq	r0, r5, lsr r0
    fbec:	00007672 	andeq	r7, r0, r2, ror r6
    fbf0:	003fbf00 	eorseq	fp, pc, r0, lsl #30
    fbf4:	361e1000 	ldrcc	r1, [lr], -r0
    fbf8:	73010000 	movwvc	r0, #4096	; 0x1000
    fbfc:	00000076 	andeq	r0, r0, r6, ror r0
    fc00:	00003fd2 	ldrdeq	r3, [r0], -r2
    fc04:	003fe011 	eorseq	lr, pc, r1, lsl r0	; <UNPREDICTABLE>
    fc08:	0001fb00 	andeq	pc, r1, r0, lsl #22
    fc0c:	3ff41100 	svccc	0x00f41100
    fc10:	02030000 	andeq	r0, r3, #0
    fc14:	04120000 	ldreq	r0, [r2], #-0
    fc18:	9b000040 	blls	fd20 <__exidx_end+0x9fa0>
    fc1c:	0d000000 	stceq	0, cr0, [r0, #-0]
    fc20:	74025001 	strvc	r5, [r2], #-1
    fc24:	13000000 	movwne	r0, #0
    fc28:	000034ea 	andeq	r3, r0, sl, ror #9
    fc2c:	01d46c05 	bicseq	r6, r4, r5, lsl #24
    fc30:	76140000 	ldrvc	r0, [r4], -r0
    fc34:	00000000 	andeq	r0, r0, r0
    fc38:	00351a13 	eorseq	r1, r5, r3, lsl sl
    fc3c:	ea730500 	b	1cd1044 <__ccfg+0x1cb109c>
    fc40:	14000001 	strne	r0, [r0], #-1
    fc44:	00000076 	andeq	r0, r0, r6, ror r0
    fc48:	00007614 	andeq	r7, r0, r4, lsl r6
    fc4c:	4a130000 	bmi	4cfc54 <__ccfg+0x4afcac>
    fc50:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    fc54:	0001fb7a 	andeq	pc, r1, sl, ror fp	; <UNPREDICTABLE>
    fc58:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fc5c:	15000000 	strne	r0, [r0, #-0]
    fc60:	0000367a 	andeq	r3, r0, sl, ror r6
    fc64:	16024306 	strne	r4, [r2], -r6, lsl #6
    fc68:	00003597 	muleq	r0, r7, r5
    fc6c:	1700fd05 	strne	pc, [r0, -r5, lsl #26]
    fc70:	0400000b 	streq	r0, [r0], #-11
    fc74:	00397700 	eorseq	r7, r9, r0, lsl #14
    fc78:	45010400 	strmi	r0, [r1, #-1024]	; 0xfffffc00
    fc7c:	0100002a 	tsteq	r0, sl, lsr #32
    fc80:	000038fa 	strdeq	r3, [r0], -sl
    fc84:	00002b0c 	andeq	r2, r0, ip, lsl #22
    fc88:	00001278 	andeq	r1, r0, r8, ror r2
    fc8c:	00000000 	andeq	r0, r0, r0
    fc90:	0000832f 	andeq	r8, r0, pc, lsr #6
    fc94:	5d060102 	stfpls	f0, [r6, #-8]
    fc98:	0200000c 	andeq	r0, r0, #12
    fc9c:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    fca0:	02020000 	andeq	r0, r2, #0
    fca4:	000a6b05 	andeq	r6, sl, r5, lsl #22
    fca8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    fcac:	00000d6c 	andeq	r0, r0, ip, ror #26
    fcb0:	002ba503 	eoreq	sl, fp, r3, lsl #10
    fcb4:	4c3f0400 	cfldrsmi	mvf0, [pc], #-0	; fcbc <__exidx_end+0x9f3c>
    fcb8:	02000000 	andeq	r0, r0, #0
    fcbc:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    fcc0:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    fcc4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    fcc8:	00005e41 	andeq	r5, r0, r1, asr #28
    fccc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fcd0:	00000426 	andeq	r0, r0, r6, lsr #8
    fcd4:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    fcd8:	02000007 	andeq	r0, r0, #7
    fcdc:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    fce0:	04040000 	streq	r0, [r4], #-0
    fce4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fce8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fcec:	0000042b 	andeq	r0, r0, fp, lsr #8
    fcf0:	002ba703 	eoreq	sl, fp, r3, lsl #14
    fcf4:	411f0500 	tstmi	pc, r0, lsl #10
    fcf8:	03000000 	movweq	r0, #0
    fcfc:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    fd00:	00532005 	subseq	r2, r3, r5
    fd04:	8d050000 	stchi	0, cr0, [r5, #-0]
    fd08:	02000039 	andeq	r0, r0, #57	; 0x39
    fd0c:	000081e9 	andeq	r8, r0, r9, ror #3
    fd10:	00be0300 	adcseq	r0, lr, r0, lsl #6
    fd14:	dd060000 	stcle	0, cr0, [r6, #-0]
    fd18:	02000036 	andeq	r0, r0, #54	; 0x36
    fd1c:	00008ce9 	andeq	r8, r0, r9, ror #25
    fd20:	39e60700 	stmibcc	r6!, {r8, r9, sl}^
    fd24:	ef020000 	svc	0x00020000
    fd28:	00000081 	andeq	r0, r0, r1, lsl #1
    fd2c:	37120800 	ldrcc	r0, [r2, -r0, lsl #16]
    fd30:	ab020000 	blge	8fd38 <__ccfg+0x6fd90>
    fd34:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd38:	0000e701 	andeq	lr, r0, r1, lsl #14
    fd3c:	35c50900 	strbcc	r0, [r5, #2304]	; 0x900
    fd40:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    fd44:	00008c03 	andeq	r8, r0, r3, lsl #24
    fd48:	3a6f0a00 	bcc	1bd2550 <__ccfg+0x1bb25a8>
    fd4c:	2b010000 	blcs	4fd54 <__ccfg+0x2fdac>
    fd50:	00008c03 	andeq	r8, r0, r3, lsl #24
    fd54:	c5080000 	strgt	r0, [r8, #-0]
    fd58:	02000039 	andeq	r0, r0, #57	; 0x39
    fd5c:	00008c81 	andeq	r8, r0, r1, lsl #25
    fd60:	01100100 	tsteq	r0, r0, lsl #2
    fd64:	c5090000 	strgt	r0, [r9, #-0]
    fd68:	01000035 	tsteq	r0, r5, lsr r0
    fd6c:	008c033c 	addeq	r0, ip, ip, lsr r3
    fd70:	360a0000 	strcc	r0, [sl], -r0
    fd74:	0100003a 	tsteq	r0, sl, lsr r0
    fd78:	008c033e 	addeq	r0, ip, lr, lsr r3
    fd7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fd80:	00003873 	andeq	r3, r0, r3, ror r8
    fd84:	008c8802 	addeq	r8, ip, r2, lsl #16
    fd88:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    fd8c:	09000001 	stmdbeq	r0, {r0}
    fd90:	000035c5 	andeq	r3, r0, r5, asr #11
    fd94:	8c034f01 	stchi	15, cr4, [r3], {1}
    fd98:	0a000000 	beq	fda0 <__exidx_end+0xa020>
    fd9c:	000039aa 	andeq	r3, r0, sl, lsr #19
    fda0:	8c035101 	stfhis	f5, [r3], {1}
    fda4:	00000000 	andeq	r0, r0, r0
    fda8:	0037d708 	eorseq	sp, r7, r8, lsl #14
    fdac:	8cc80200 	sfmhi	f0, 2, [r8], {0}
    fdb0:	01000000 	mrseq	r0, (UNDEF: 0)
    fdb4:	0000016e 	andeq	r0, r0, lr, ror #2
    fdb8:	0035c509 	eorseq	ip, r5, r9, lsl #10
    fdbc:	03620100 	cmneq	r2, #0, 2
    fdc0:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdc4:	0037670a 	eorseq	r6, r7, sl, lsl #14
    fdc8:	03640100 	cmneq	r4, #0, 2
    fdcc:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdd0:	0038a80a 	eorseq	sl, r8, sl, lsl #16
    fdd4:	03650100 	cmneq	r5, #0, 2
    fdd8:	0000008c 	andeq	r0, r0, ip, lsl #1
    fddc:	38da0800 	ldmcc	sl, {fp}^
    fde0:	b2020000 	andlt	r0, r2, #0
    fde4:	0000008c 	andeq	r0, r0, ip, lsl #1
    fde8:	0001a301 	andeq	sl, r1, r1, lsl #6
    fdec:	35c50900 	strbcc	r0, [r5, #2304]	; 0x900
    fdf0:	94010000 	strls	r0, [r1], #-0
    fdf4:	00008c03 	andeq	r8, r0, r3, lsl #24
    fdf8:	37f60a00 	ldrbcc	r0, [r6, r0, lsl #20]!
    fdfc:	96010000 	strls	r0, [r1], -r0
    fe00:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe04:	38a80a00 	stmiacc	r8!, {r9, fp}
    fe08:	97010000 	strls	r0, [r1, -r0]
    fe0c:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe10:	a5080000 	strge	r0, [r8, #-0]
    fe14:	02000037 	andeq	r0, r0, #55	; 0x37
    fe18:	00008cb9 			; <UNDEFINED> instruction: 0x00008cb9
    fe1c:	01cc0100 	biceq	r0, ip, r0, lsl #2
    fe20:	c5090000 	strgt	r0, [r9, #-0]
    fe24:	01000035 	tsteq	r0, r5, lsr r0
    fe28:	008c03b4 			; <UNDEFINED> instruction: 0x008c03b4
    fe2c:	b20a0000 	andlt	r0, sl, #0
    fe30:	01000038 	tsteq	r0, r8, lsr r0
    fe34:	008c03b6 			; <UNDEFINED> instruction: 0x008c03b6
    fe38:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fe3c:	00003950 	andeq	r3, r0, r0, asr r9
    fe40:	008cdf02 	addeq	sp, ip, r2, lsl #30
    fe44:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    fe48:	09000001 	stmdbeq	r0, {r0}
    fe4c:	000035c5 	andeq	r3, r0, r5, asr #11
    fe50:	8c03c801 	stchi	8, cr12, [r3], {1}
    fe54:	0a000000 	beq	fe5c <__exidx_end+0xa0dc>
    fe58:	00003a8f 	andeq	r3, r0, pc, lsl #21
    fe5c:	8c03ca01 			; <UNDEFINED> instruction: 0x8c03ca01
    fe60:	00000000 	andeq	r0, r0, r0
    fe64:	003a1008 	eorseq	r1, sl, r8
    fe68:	8cd70200 	lfmhi	f0, 2, [r7], {0}
    fe6c:	01000000 	mrseq	r0, (UNDEF: 0)
    fe70:	00000212 	andeq	r0, r0, r2, lsl r2
    fe74:	003b420a 	eorseq	r4, fp, sl, lsl #4
    fe78:	02830100 	addeq	r0, r3, #0, 2
    fe7c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe80:	12d80b00 	sbcsne	r0, r8, #0, 22
    fe84:	c4030000 	strgt	r0, [r3], #-0
    fe88:	3b1f0c03 	blcc	7d2e9c <__ccfg+0x7b2ef4>
    fe8c:	0f020000 	svceq	0x00020000
    fe90:	00407401 	subeq	r7, r0, r1, lsl #8
    fe94:	00007c00 	andeq	r7, r0, r0, lsl #24
    fe98:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    fe9c:	0d000002 	stceq	0, cr0, [r0, #-8]
    fea0:	00003631 	andeq	r3, r0, r1, lsr r6
    fea4:	008c7f01 	addeq	r7, ip, r1, lsl #30
    fea8:	3fe50000 	svccc	0x00e50000
    feac:	37070000 	strcc	r0, [r7, -r0]
    feb0:	0100003b 	tsteq	r0, fp, lsr r0
    feb4:	00008c81 	andeq	r8, r0, r1, lsl #25
    feb8:	38cf0e00 	stmiacc	pc, {r9, sl, fp}^	; <UNPREDICTABLE>
    febc:	82010000 	andhi	r0, r1, #0
    fec0:	00000081 	andeq	r0, r0, r1, lsl #1
    fec4:	420f5201 	andmi	r5, pc, #268435456	; 0x10000000
    fec8:	01000037 	tsteq	r0, r7, lsr r0
    fecc:	00008183 	andeq	r8, r0, r3, lsl #3
    fed0:	00400600 	subeq	r0, r0, r0, lsl #12
    fed4:	38100f00 	ldmdacc	r0, {r8, r9, sl, fp}
    fed8:	84010000 	strhi	r0, [r1], #-0
    fedc:	00000081 	andeq	r0, r0, r1, lsl #1
    fee0:	00004019 	andeq	r4, r0, r9, lsl r0
    fee4:	00009710 	andeq	r9, r0, r0, lsl r7
    fee8:	00408200 	subeq	r8, r0, r0, lsl #4
    feec:	00124800 	andseq	r4, r2, r0, lsl #16
    fef0:	9b970100 	blls	fe5d02f8 <_estack+0xde5cb2f8>
    fef4:	11000002 	tstne	r0, r2
    fef8:	000000a7 	andeq	r0, r0, r7, lsr #1
    fefc:	00124812 	andseq	r4, r2, r2, lsl r8
    ff00:	00b21300 	adcseq	r1, r2, r0, lsl #6
    ff04:	52010000 	andpl	r0, r1, #0
    ff08:	97140000 	ldrls	r0, [r4, -r0]
    ff0c:	8c000000 	stchi	0, cr0, [r0], {-0}
    ff10:	06000040 	streq	r0, [r0], -r0, asr #32
    ff14:	01000000 	mrseq	r0, (UNDEF: 0)
    ff18:	00a71198 	umlaleq	r1, r7, r8, r1
    ff1c:	8c150000 	ldchi	0, cr0, [r5], {-0}
    ff20:	06000040 	streq	r0, [r0], -r0, asr #32
    ff24:	16000000 	strne	r0, [r0], -r0
    ff28:	000000b2 	strheq	r0, [r0], -r2
    ff2c:	00004047 	andeq	r4, r0, r7, asr #32
    ff30:	17000000 	strne	r0, [r0, -r0]
    ff34:	000034ea 	andeq	r3, r0, sl, ror #9
    ff38:	40f06c02 	rscsmi	r6, r0, r2, lsl #24
    ff3c:	00ac0000 	adceq	r0, ip, r0
    ff40:	9c010000 	stcls	0, cr0, [r1], {-0}
    ff44:	00000343 	andeq	r0, r0, r3, asr #6
    ff48:	0036310d 	eorseq	r3, r6, sp, lsl #2
    ff4c:	8cbf0100 	ldfhis	f0, [pc]	; ff54 <__exidx_end+0xa1d4>
    ff50:	5a000000 	bpl	ff58 <__exidx_end+0xa1d8>
    ff54:	0f000040 	svceq	0x00000040
    ff58:	00003a51 	andeq	r3, r0, r1, asr sl
    ff5c:	0081c101 	addeq	ip, r1, r1, lsl #2
    ff60:	408e0000 	addmi	r0, lr, r0
    ff64:	670f0000 	strvs	r0, [pc, -r0]
    ff68:	0100003b 	tsteq	r0, fp, lsr r0
    ff6c:	000081c2 	andeq	r8, r0, r2, asr #3
    ff70:	0040b700 	subeq	fp, r0, r0, lsl #14
    ff74:	00971800 	addseq	r1, r7, r0, lsl #16
    ff78:	41260000 			; <UNDEFINED> instruction: 0x41260000
    ff7c:	00060000 	andeq	r0, r6, r0
    ff80:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    ff84:	00000332 	andeq	r0, r0, r2, lsr r3
    ff88:	0000a711 	andeq	sl, r0, r1, lsl r7
    ff8c:	41261500 			; <UNDEFINED> instruction: 0x41261500
    ff90:	00060000 	andeq	r0, r6, r0
    ff94:	b2160000 	andslt	r0, r6, #0
    ff98:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    ff9c:	00000040 	andeq	r0, r0, r0, asr #32
    ffa0:	41141900 	tstmi	r4, r0, lsl #18
    ffa4:	021a0000 	andseq	r0, sl, #0
    ffa8:	011a0000 	tsteq	sl, r0
    ffac:	00740250 	rsbseq	r0, r4, r0, asr r2
    ffb0:	ed1b0000 	ldc	0, cr0, [fp, #-0]
    ffb4:	02000036 	andeq	r0, r0, #54	; 0x36
    ffb8:	00008ca4 	andeq	r8, r0, r4, lsr #25
    ffbc:	00419c00 	subeq	r9, r1, r0, lsl #24
    ffc0:	00005c00 	andeq	r5, r0, r0, lsl #24
    ffc4:	bd9c0100 	ldflts	f0, [ip]
    ffc8:	1c000003 	stcne	0, cr0, [r0], {3}
    ffcc:	00003631 	andeq	r3, r0, r1, lsr r6
    ffd0:	8c021f01 	stchi	15, cr1, [r2], {1}
    ffd4:	f1000000 	cps	#0
    ffd8:	1d000040 	stcne	0, cr0, [r0, #-256]	; 0xffffff00
    ffdc:	00003a01 	andeq	r3, r0, r1, lsl #20
    ffe0:	8c022101 	stfhis	f2, [r2], {1}
    ffe4:	12000000 	andne	r0, r0, #0
    ffe8:	1d000041 	stcne	0, cr0, [r0, #-260]	; 0xfffffefc
    ffec:	00003b03 	andeq	r3, r0, r3, lsl #22
    fff0:	8c022201 	sfmhi	f2, 4, [r2], {1}
    fff4:	25000000 	strcs	r0, [r0, #-0]
    fff8:	1d000041 	stcne	0, cr0, [r0, #-260]	; 0xfffffefc
    fffc:	00003b11 	andeq	r3, r0, r1, lsl fp
   10000:	8c022301 	stchi	3, cr2, [r2], {1}
   10004:	73000000 	movwvc	r0, #0
   10008:	1d000041 	stcne	0, cr0, [r0, #-260]	; 0xfffffefc
   1000c:	00003b50 	andeq	r3, r0, r0, asr fp
   10010:	81022401 	tsthi	r2, r1, lsl #8
   10014:	db000000 	blle	1001c <__exidx_end+0xa29c>
   10018:	1d000041 	stcne	0, cr0, [r0, #-260]	; 0xfffffefc
   1001c:	00003b42 	andeq	r3, r0, r2, asr #22
   10020:	8c022501 	cfstr32hi	mvfx2, [r2], {1}
   10024:	fa000000 	blx	1002c <__exidx_end+0xa2ac>
   10028:	00000041 	andeq	r0, r0, r1, asr #32
   1002c:	0039251b 	eorseq	r2, r9, fp, lsl r5
   10030:	8cc10200 	sfmhi	f0, 2, [r1], {0}
   10034:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
   10038:	18000041 	stmdane	r0, {r0, r6}
   1003c:	01000000 	mrseq	r0, (UNDEF: 0)
   10040:	0003e79c 	muleq	r3, ip, r7
   10044:	3b421d00 	blcc	109744c <__ccfg+0x10774a4>
   10048:	67010000 	strvs	r0, [r1, -r0]
   1004c:	00008c02 	andeq	r8, r0, r2, lsl #24
   10050:	00421f00 	subeq	r1, r2, r0, lsl #30
   10054:	f51e0000 			; <UNDEFINED> instruction: 0xf51e0000
   10058:	00000001 	andeq	r0, r0, r1
   1005c:	10000000 	andne	r0, r0, r0
   10060:	01000000 	mrseq	r0, (UNDEF: 0)
   10064:	0004049c 	muleq	r4, ip, r4
   10068:	02051600 	andeq	r1, r5, #0, 12
   1006c:	42460000 	submi	r0, r6, #0
   10070:	1b000000 	blne	10078 <__exidx_end+0xa2f8>
   10074:	00003853 	andeq	r3, r0, r3, asr r8
   10078:	008c9d02 	addeq	r9, ip, r2, lsl #26
   1007c:	42100000 	andsmi	r0, r0, #0
   10080:	00100000 	andseq	r0, r0, r0
   10084:	9c010000 	stcls	0, cr0, [r1], {-0}
   10088:	0000043e 	andeq	r0, r0, lr, lsr r4
   1008c:	003b421d 	eorseq	r4, fp, sp, lsl r2
   10090:	02970100 	addseq	r0, r7, #0, 2
   10094:	0000008c 	andeq	r0, r0, ip, lsl #1
   10098:	0000425f 	andeq	r4, r0, pc, asr r2
   1009c:	003a011d 	eorseq	r0, sl, sp, lsl r1
   100a0:	02980100 	addseq	r0, r8, #0, 2
   100a4:	0000008c 	andeq	r0, r0, ip, lsl #1
   100a8:	00004280 	andeq	r4, r0, r0, lsl #5
   100ac:	38331b00 	ldmdacc	r3!, {r8, r9, fp, ip}
   100b0:	96020000 	strls	r0, [r2], -r0
   100b4:	0000008c 	andeq	r0, r0, ip, lsl #1
   100b8:	00004220 	andeq	r4, r0, r0, lsr #4
   100bc:	00000014 	andeq	r0, r0, r4, lsl r0
   100c0:	04789c01 	ldrbteq	r9, [r8], #-3073	; 0xfffff3ff
   100c4:	421d0000 	andsmi	r0, sp, #0
   100c8:	0100003b 	tsteq	r0, fp, lsr r0
   100cc:	008c02ba 			; <UNDEFINED> instruction: 0x008c02ba
   100d0:	42930000 	addsmi	r0, r3, #0
   100d4:	011d0000 	tsteq	sp, r0
   100d8:	0100003a 	tsteq	r0, sl, lsr r0
   100dc:	008c02bb 			; <UNDEFINED> instruction: 0x008c02bb
   100e0:	42b40000 	adcsmi	r0, r4, #0
   100e4:	1b000000 	blne	100ec <__exidx_end+0xa36c>
   100e8:	00003ae2 	andeq	r3, r0, r2, ror #21
   100ec:	008c8f02 	addeq	r8, ip, r2, lsl #30
   100f0:	42340000 	eorsmi	r0, r4, #0
   100f4:	00640000 	rsbeq	r0, r4, r0
   100f8:	9c010000 	stcls	0, cr0, [r1], {-0}
   100fc:	000004fe 	strdeq	r0, [r0], -lr
   10100:	0035c51c 	eorseq	ip, r5, ip, lsl r5
   10104:	02db0100 	sbcseq	r0, fp, #0, 2
   10108:	0000008c 	andeq	r0, r0, ip, lsl #1
   1010c:	000042c7 	andeq	r4, r0, r7, asr #5
   10110:	003b421d 	eorseq	r4, fp, sp, lsl r2
   10114:	02dd0100 	sbcseq	r0, sp, #0, 2
   10118:	0000008c 	andeq	r0, r0, ip, lsl #1
   1011c:	000042e8 	andeq	r4, r0, r8, ror #5
   10120:	003a011d 	eorseq	r0, sl, sp, lsl r1
   10124:	02de0100 	sbcseq	r0, lr, #0, 2
   10128:	0000008c 	andeq	r0, r0, ip, lsl #1
   1012c:	0000431c 	andeq	r4, r0, ip, lsl r3
   10130:	00375b1d 	eorseq	r5, r7, sp, lsl fp
   10134:	02df0100 	sbcseq	r0, pc, #0, 2
   10138:	0000008c 	andeq	r0, r0, ip, lsl #1
   1013c:	0000432f 	andeq	r4, r0, pc, lsr #6
   10140:	003aba1d 	eorseq	fp, sl, sp, lsl sl
   10144:	02e00100 	rsceq	r0, r0, #0, 2
   10148:	0000008c 	andeq	r0, r0, ip, lsl #1
   1014c:	0000435d 	andeq	r4, r0, sp, asr r3
   10150:	0039f70a 	eorseq	pc, r9, sl, lsl #14
   10154:	02e10100 	rsceq	r0, r1, #0, 2
   10158:	0000008c 	andeq	r0, r0, ip, lsl #1
   1015c:	0037cb1d 	eorseq	ip, r7, sp, lsl fp
   10160:	02e20100 	rsceq	r0, r2, #0, 2
   10164:	00000081 	andeq	r0, r0, r1, lsl #1
   10168:	0000438b 	andeq	r4, r0, fp, lsl #7
   1016c:	00be1e00 	adcseq	r1, lr, r0, lsl #28
   10170:	42980000 	addsmi	r0, r8, #0
   10174:	00140000 	andseq	r0, r4, r0
   10178:	9c010000 	stcls	0, cr0, [r1], {-0}
   1017c:	0000054a 	andeq	r0, r0, sl, asr #10
   10180:	0000ce1f 	andeq	ip, r0, pc, lsl lr
   10184:	00440600 	subeq	r0, r4, r0, lsl #12
   10188:	00da1600 	sbcseq	r1, sl, r0, lsl #12
   1018c:	44270000 	strtmi	r0, [r7], #-0
   10190:	9a150000 	bls	550198 <__ccfg+0x5301f0>
   10194:	0a000042 	beq	102a4 <__exidx_end+0xa524>
   10198:	1f000000 	svcne	0x00000000
   1019c:	000000ce 	andeq	r0, r0, lr, asr #1
   101a0:	00004446 	andeq	r4, r0, r6, asr #8
   101a4:	00429a15 	subeq	r9, r2, r5, lsl sl
   101a8:	00000a00 	andeq	r0, r0, r0, lsl #20
   101ac:	00da1600 	sbcseq	r1, sl, r0, lsl #12
   101b0:	44670000 	strbtmi	r0, [r7], #-0
   101b4:	00000000 	andeq	r0, r0, r0
   101b8:	00e71e00 	rsceq	r1, r7, r0, lsl #28
   101bc:	42ac0000 	adcmi	r0, ip, #0
   101c0:	00140000 	andseq	r0, r4, r0
   101c4:	9c010000 	stcls	0, cr0, [r1], {-0}
   101c8:	00000596 	muleq	r0, r6, r5
   101cc:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
   101d0:	00447a00 	subeq	r7, r4, r0, lsl #20
   101d4:	01031600 	tsteq	r3, r0, lsl #12
   101d8:	449b0000 	ldrmi	r0, [fp], #0
   101dc:	ae150000 	cdpge	0, 1, cr0, cr5, cr0, {0}
   101e0:	0a000042 	beq	102f0 <__exidx_end+0xa570>
   101e4:	1f000000 	svcne	0x00000000
   101e8:	000000f7 	strdeq	r0, [r0], -r7
   101ec:	000044ba 			; <UNDEFINED> instruction: 0x000044ba
   101f0:	0042ae15 	subeq	sl, r2, r5, lsl lr
   101f4:	00000a00 	andeq	r0, r0, r0, lsl #20
   101f8:	01031600 	tsteq	r3, r0, lsl #12
   101fc:	44db0000 	ldrbmi	r0, [fp], #0
   10200:	00000000 	andeq	r0, r0, r0
   10204:	01101e00 	tsteq	r0, r0, lsl #28
   10208:	42c00000 	sbcmi	r0, r0, #0
   1020c:	00140000 	andseq	r0, r4, r0
   10210:	9c010000 	stcls	0, cr0, [r1], {-0}
   10214:	000005e2 	andeq	r0, r0, r2, ror #11
   10218:	0001201f 	andeq	r2, r1, pc, lsl r0
   1021c:	0044ee00 	subeq	lr, r4, r0, lsl #28
   10220:	012c1600 			; <UNDEFINED> instruction: 0x012c1600
   10224:	450f0000 	strmi	r0, [pc, #-0]	; 1022c <__exidx_end+0xa4ac>
   10228:	c2150000 	andsgt	r0, r5, #0
   1022c:	0a000042 	beq	1033c <__exidx_end+0xa5bc>
   10230:	1f000000 	svcne	0x00000000
   10234:	00000120 	andeq	r0, r0, r0, lsr #2
   10238:	0000452e 	andeq	r4, r0, lr, lsr #10
   1023c:	0042c215 	subeq	ip, r2, r5, lsl r2
   10240:	00000a00 	andeq	r0, r0, r0, lsl #20
   10244:	012c1600 			; <UNDEFINED> instruction: 0x012c1600
   10248:	454f0000 	strbmi	r0, [pc, #-0]	; 10250 <__exidx_end+0xa4d0>
   1024c:	00000000 	andeq	r0, r0, r0
   10250:	01391e00 	teqeq	r9, r0, lsl #28
   10254:	42d40000 	sbcsmi	r0, r4, #0
   10258:	00280000 	eoreq	r0, r8, r0
   1025c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10260:	0000063c 	andeq	r0, r0, ip, lsr r6
   10264:	0001491f 	andeq	r4, r1, pc, lsl r9
   10268:	00456200 	subeq	r6, r5, r0, lsl #4
   1026c:	01551600 	cmpeq	r5, r0, lsl #12
   10270:	45830000 	strmi	r0, [r3]
   10274:	61200000 			; <UNDEFINED> instruction: 0x61200000
   10278:	15000001 	strne	r0, [r0, #-1]
   1027c:	000042d6 	ldrdeq	r4, [r0], -r6
   10280:	0000001c 	andeq	r0, r0, ip, lsl r0
   10284:	0001491f 	andeq	r4, r1, pc, lsl r9
   10288:	0045a200 	subeq	sl, r5, r0, lsl #4
   1028c:	42d61500 	sbcsmi	r1, r6, #0, 10
   10290:	001c0000 	andseq	r0, ip, r0
   10294:	55160000 	ldrpl	r0, [r6, #-0]
   10298:	c3000001 	movwgt	r0, #1
   1029c:	16000045 	strne	r0, [r0], -r5, asr #32
   102a0:	00000161 	andeq	r0, r0, r1, ror #2
   102a4:	000045f0 	strdeq	r4, [r0], -r0
   102a8:	1b000000 	blne	102b0 <__exidx_end+0xa530>
   102ac:	00003780 	andeq	r3, r0, r0, lsl #15
   102b0:	008ccf02 	addeq	ip, ip, r2, lsl #30
   102b4:	42fc0000 	rscsmi	r0, ip, #0
   102b8:	00100000 	andseq	r0, r0, r0
   102bc:	9c010000 	stcls	0, cr0, [r1], {-0}
   102c0:	00000666 	andeq	r0, r0, r6, ror #12
   102c4:	00381a1d 	eorseq	r1, r8, sp, lsl sl
   102c8:	03840100 	orreq	r0, r4, #0, 2
   102cc:	0000008c 	andeq	r0, r0, ip, lsl #1
   102d0:	00004603 	andeq	r4, r0, r3, lsl #12
   102d4:	016e1e00 	cmneq	lr, r0, lsl #28
   102d8:	430c0000 	movwmi	r0, #49152	; 0xc000
   102dc:	002c0000 	eoreq	r0, ip, r0
   102e0:	9c010000 	stcls	0, cr0, [r1], {-0}
   102e4:	000006c0 	andeq	r0, r0, r0, asr #13
   102e8:	00017e1f 	andeq	r7, r1, pc, lsl lr
   102ec:	00461e00 	subeq	r1, r6, r0, lsl #28
   102f0:	018a1600 	orreq	r1, sl, r0, lsl #12
   102f4:	463f0000 	ldrtmi	r0, [pc], -r0
   102f8:	96200000 	strtls	r0, [r0], -r0
   102fc:	15000001 	strne	r0, [r0, #-1]
   10300:	0000430e 	andeq	r4, r0, lr, lsl #6
   10304:	0000001e 	andeq	r0, r0, lr, lsl r0
   10308:	00017e1f 	andeq	r7, r1, pc, lsl lr
   1030c:	00466200 	subeq	r6, r6, r0, lsl #4
   10310:	430e1500 	movwmi	r1, #58624	; 0xe500
   10314:	001e0000 	andseq	r0, lr, r0
   10318:	8a160000 	bhi	590320 <__ccfg+0x570378>
   1031c:	83000001 	movwhi	r0, #1
   10320:	16000046 	strne	r0, [r0], -r6, asr #32
   10324:	00000196 	muleq	r0, r6, r1
   10328:	000046b0 			; <UNDEFINED> instruction: 0x000046b0
   1032c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10330:	000001a3 	andeq	r0, r0, r3, lsr #3
   10334:	00004338 	andeq	r4, r0, r8, lsr r3
   10338:	00000014 	andeq	r0, r0, r4, lsl r0
   1033c:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
   10340:	b31f0000 	tstlt	pc, #0
   10344:	c3000001 	movwgt	r0, #1
   10348:	16000046 	strne	r0, [r0], -r6, asr #32
   1034c:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
   10350:	000046e4 	andeq	r4, r0, r4, ror #13
   10354:	00433a15 	subeq	r3, r3, r5, lsl sl
   10358:	00000a00 	andeq	r0, r0, r0, lsl #20
   1035c:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
   10360:	47030000 	strmi	r0, [r3, -r0]
   10364:	3a150000 	bcc	55036c <__ccfg+0x5303c4>
   10368:	0a000043 	beq	1047c <__exidx_end+0xa6fc>
   1036c:	16000000 	strne	r0, [r0], -r0
   10370:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
   10374:	00004724 	andeq	r4, r0, r4, lsr #14
   10378:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   1037c:	000001cc 	andeq	r0, r0, ip, asr #3
   10380:	0000434c 	andeq	r4, r0, ip, asr #6
   10384:	00000014 	andeq	r0, r0, r4, lsl r0
   10388:	07589c01 	ldrbeq	r9, [r8, -r1, lsl #24]
   1038c:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
   10390:	37000001 	strcc	r0, [r0, -r1]
   10394:	16000047 	strne	r0, [r0], -r7, asr #32
   10398:	000001e8 	andeq	r0, r0, r8, ror #3
   1039c:	00004758 	andeq	r4, r0, r8, asr r7
   103a0:	00434e15 	subeq	r4, r3, r5, lsl lr
   103a4:	00000a00 	andeq	r0, r0, r0, lsl #20
   103a8:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
   103ac:	47770000 	ldrbmi	r0, [r7, -r0]!
   103b0:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
   103b4:	0a000043 	beq	104c8 <__exidx_end+0xa748>
   103b8:	16000000 	strne	r0, [r0], -r0
   103bc:	000001e8 	andeq	r0, r0, r8, ror #3
   103c0:	00004798 	muleq	r0, r8, r7
   103c4:	17000000 	strne	r0, [r0, -r0]
   103c8:	0000351a 	andeq	r3, r0, sl, lsl r5
   103cc:	43607302 	cmnmi	r0, #134217728	; 0x8000000
   103d0:	01100000 	tsteq	r0, r0
   103d4:	9c010000 	stcls	0, cr0, [r1], {-0}
   103d8:	00000963 	andeq	r0, r0, r3, ror #18
   103dc:	0035c51c 	eorseq	ip, r5, ip, lsl r5
   103e0:	01270100 			; <UNDEFINED> instruction: 0x01270100
   103e4:	0000008c 	andeq	r0, r0, ip, lsl #1
   103e8:	000047ab 	andeq	r4, r0, fp, lsr #15
   103ec:	0036311c 	eorseq	r3, r6, ip, lsl r1
   103f0:	01270100 			; <UNDEFINED> instruction: 0x01270100
   103f4:	0000008c 	andeq	r0, r0, ip, lsl #1
   103f8:	000047d7 	ldrdeq	r4, [r0], -r7
   103fc:	0039841d 	eorseq	r8, r9, sp, lsl r4
   10400:	01290100 			; <UNDEFINED> instruction: 0x01290100
   10404:	0000008c 	andeq	r0, r0, ip, lsl #1
   10408:	000047f8 	strdeq	r4, [r0], -r8
   1040c:	0001f521 	andeq	pc, r1, r1, lsr #10
   10410:	00439000 	subeq	r9, r3, r0
   10414:	00126000 	andseq	r6, r2, r0
   10418:	01400100 	mrseq	r0, (UNDEF: 80)
   1041c:	000007c1 	andeq	r0, r0, r1, asr #15
   10420:	00126012 	andseq	r6, r2, r2, lsl r0
   10424:	02051600 	andeq	r1, r5, #0, 12
   10428:	48c60000 	stmiami	r6, {}^	; <UNPREDICTABLE>
   1042c:	00000000 	andeq	r0, r0, r0
   10430:	00436a22 	subeq	r6, r3, r2, lsr #20
   10434:	00034300 	andeq	r4, r3, r0, lsl #6
   10438:	0007d600 	andeq	sp, r7, r0, lsl #12
   1043c:	50011a00 	andpl	r1, r1, r0, lsl #20
   10440:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
   10444:	43762200 	cmnmi	r6, #0, 4
   10448:	0ad60000 	beq	ff590450 <_estack+0xdf58b450>
   1044c:	07ef0000 	strbeq	r0, [pc, r0]!
   10450:	011a0000 	tsteq	sl, r0
   10454:	1a480151 	bne	12109a0 <__ccfg+0x11f09f8>
   10458:	74025001 	strvc	r5, [r2], #-1
   1045c:	7a230000 	bvc	8d0464 <__ccfg+0x8b04bc>
   10460:	bd000043 	stclt	0, cr0, [r0, #-268]	; 0xfffffef4
   10464:	24000003 	strcs	r0, [r0], #-3
   10468:	00004390 	muleq	r0, r0, r3
   1046c:	1d007602 	stcne	6, cr7, [r0, #-8]
   10470:	1a000008 	bne	10498 <__exidx_end+0xa718>
   10474:	30015301 	andcc	r5, r1, r1, lsl #6
   10478:	0352011a 	cmpeq	r2, #-2147483642	; 0x80000006
   1047c:	1a03ff0a 	bne	1100ac <__ccfg+0xf0104>
   10480:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
   10484:	50011a2c 	andpl	r1, r1, ip, lsr #20
   10488:	00007402 	andeq	r7, r0, r2, lsl #8
   1048c:	0043a022 	subeq	sl, r3, r2, lsr #32
   10490:	000ad600 	andeq	sp, sl, r0, lsl #12
   10494:	00083600 	andeq	r3, r8, r0, lsl #12
   10498:	51011a00 	tstpl	r1, r0, lsl #20
   1049c:	011a4c01 	tsteq	sl, r1, lsl #24
   104a0:	00740250 	rsbseq	r0, r4, r0, asr r2
   104a4:	43a42300 			; <UNDEFINED> instruction: 0x43a42300
   104a8:	04040000 	streq	r0, [r4], #-0
   104ac:	ae220000 	cdpge	0, 2, cr0, cr2, cr0, {0}
   104b0:	d6000043 	strle	r0, [r0], -r3, asr #32
   104b4:	5800000a 	stmdapl	r0, {r1, r3}
   104b8:	1a000008 	bne	104e0 <__exidx_end+0xa760>
   104bc:	44015101 	strmi	r5, [r1], #-257	; 0xfffffeff
   104c0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   104c4:	23000074 	movwcs	r0, #116	; 0x74
   104c8:	000043b2 			; <UNDEFINED> instruction: 0x000043b2
   104cc:	0000043e 	andeq	r0, r0, lr, lsr r4
   104d0:	0043bc22 	subeq	fp, r3, r2, lsr #24
   104d4:	000ad600 	andeq	sp, sl, r0, lsl #12
   104d8:	00087a00 	andeq	r7, r8, r0, lsl #20
   104dc:	51011a00 	tstpl	r1, r0, lsl #20
   104e0:	011a4001 	tsteq	sl, r1
   104e4:	00740250 	rsbseq	r0, r4, r0, asr r2
   104e8:	43c22200 	bicmi	r2, r2, #0, 4
   104ec:	04780000 	ldrbteq	r0, [r8], #-0
   104f0:	088e0000 	stmeq	lr, {}	; <UNPREDICTABLE>
   104f4:	011a0000 	tsteq	sl, r0
   104f8:	00750250 	rsbseq	r0, r5, r0, asr r2
   104fc:	43cc2200 	bicmi	r2, ip, #0, 4
   10500:	0ad60000 	beq	ff590508 <_estack+0xdf58b508>
   10504:	08a70000 	stmiaeq	r7!, {}	; <UNPREDICTABLE>
   10508:	011a0000 	tsteq	sl, r0
   1050c:	1a3c0151 	bne	f10a58 <__ccfg+0xef0ab0>
   10510:	74025001 	strvc	r5, [r2], #-1
   10514:	d2220000 	eorle	r0, r2, #0
   10518:	e7000043 	str	r0, [r0, -r3, asr #32]
   1051c:	bb000000 	bllt	10524 <__exidx_end+0xa7a4>
   10520:	1a000008 	bne	10548 <__exidx_end+0xa7c8>
   10524:	75025001 	strvc	r5, [r2, #-1]
   10528:	e4220000 	strt	r0, [r2], #-0
   1052c:	10000043 	andne	r0, r0, r3, asr #32
   10530:	cf000001 	svcgt	0x00000001
   10534:	1a000008 	bne	1055c <__exidx_end+0xa7dc>
   10538:	75025001 	strvc	r5, [r2, #-1]
   1053c:	f2220000 	vhadd.s32	d0, d2, d0
   10540:	39000043 	stmdbcc	r0, {r0, r1, r6}
   10544:	e3000001 	movw	r0, #1
   10548:	1a000008 	bne	10570 <__exidx_end+0xa7f0>
   1054c:	75025001 	strvc	r5, [r2, #-1]
   10550:	fc220000 	stc2	0, cr0, [r2], #-0
   10554:	d6000043 	strle	r0, [r0], -r3, asr #32
   10558:	fd00000a 	stc2	0, cr0, [r0, #-40]	; 0xffffffd8
   1055c:	1a000008 	bne	10584 <__exidx_end+0xa804>
   10560:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
   10564:	50011a28 	andpl	r1, r1, r8, lsr #20
   10568:	00007402 	andeq	r7, r0, r2, lsl #8
   1056c:	00440222 	subeq	r0, r4, r2, lsr #4
   10570:	0000be00 	andeq	fp, r0, r0, lsl #28
   10574:	00091100 	andeq	r1, r9, r0, lsl #2
   10578:	50011a00 	andpl	r1, r1, r0, lsl #20
   1057c:	00007502 	andeq	r7, r0, r2, lsl #10
   10580:	00441422 	subeq	r1, r4, r2, lsr #8
   10584:	0001a300 	andeq	sl, r1, r0, lsl #6
   10588:	00092500 	andeq	r2, r9, r0, lsl #10
   1058c:	50011a00 	andpl	r1, r1, r0, lsl #20
   10590:	00007502 	andeq	r7, r0, r2, lsl #10
   10594:	00442622 	subeq	r2, r4, r2, lsr #12
   10598:	0001cc00 	andeq	ip, r1, r0, lsl #24
   1059c:	00093900 	andeq	r3, r9, r0, lsl #18
   105a0:	50011a00 	andpl	r1, r1, r0, lsl #20
   105a4:	00007502 	andeq	r7, r0, r2, lsl #10
   105a8:	00443a22 	subeq	r3, r4, r2, lsr #20
   105ac:	00016e00 	andeq	r6, r1, r0, lsl #28
   105b0:	00094d00 	andeq	r4, r9, r0, lsl #26
   105b4:	50011a00 	andpl	r1, r1, r0, lsl #20
   105b8:	00007502 	andeq	r7, r0, r2, lsl #10
   105bc:	00444419 	subeq	r4, r4, r9, lsl r4
   105c0:	000ad600 	andeq	sp, sl, r0, lsl #12
   105c4:	51011a00 	tstpl	r1, r0, lsl #20
   105c8:	011a3801 	tsteq	sl, r1, lsl #16
   105cc:	00740250 	rsbseq	r0, r4, r0, asr r2
   105d0:	97170000 	ldrls	r0, [r7, -r0]
   105d4:	02000035 	andeq	r0, r0, #53	; 0x35
   105d8:	004470fd 	strdeq	r7, [r4], #-13
   105dc:	00006400 	andeq	r6, r0, r0, lsl #8
   105e0:	899c0100 	ldmibhi	ip, {r8}
   105e4:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   105e8:	0000374e 	andeq	r3, r0, lr, asr #14
   105ec:	8c03eb01 			; <UNDEFINED> instruction: 0x8c03eb01
   105f0:	df000000 	svcle	0x00000000
   105f4:	00000048 	andeq	r0, r0, r8, asr #32
   105f8:	003ac40c 	eorseq	ip, sl, ip, lsl #8
   105fc:	01060200 	mrseq	r0, LR_usr
   10600:	000044d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10604:	00000028 	andeq	r0, r0, r8, lsr #32
   10608:	09b09c01 	ldmibeq	r0!, {r0, sl, fp, ip, pc}
   1060c:	1b1c0000 	blne	710614 <__ccfg+0x6f066c>
   10610:	01000039 	tsteq	r0, r9, lsr r0
   10614:	008c0413 	addeq	r0, ip, r3, lsl r4
   10618:	48fa0000 	ldmmi	sl!, {}^	; <UNPREDICTABLE>
   1061c:	17000000 	strne	r0, [r0, -r0]
   10620:	0000354a 	andeq	r3, r0, sl, asr #10
   10624:	44fc7a02 	ldrbtmi	r7, [ip], #2562	; 0xa02
   10628:	01500000 	cmpeq	r0, r0
   1062c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10630:	00000ad6 	ldrdeq	r0, [r0], -r6
   10634:	0036311c 	eorseq	r3, r6, ip, lsl r1
   10638:	019b0100 	orrseq	r0, fp, r0, lsl #2
   1063c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10640:	0000491b 	andeq	r4, r0, fp, lsl r9
   10644:	003a621d 	eorseq	r6, sl, sp, lsl r2
   10648:	019d0100 	orrseq	r0, sp, r0, lsl #2
   1064c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10650:	00004976 	andeq	r4, r0, r6, ror r9
   10654:	0039841d 	eorseq	r8, r9, sp, lsl r4
   10658:	019e0100 	orrseq	r0, lr, r0, lsl #2
   1065c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10660:	00004989 	andeq	r4, r0, r9, lsl #19
   10664:	0036ce1d 	eorseq	ip, r6, sp, lsl lr
   10668:	019f0100 	orrseq	r0, pc, r0, lsl #2
   1066c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10670:	0000499c 	muleq	r0, ip, r9
   10674:	0036c11d 	eorseq	ip, r6, sp, lsl r1
   10678:	01a00100 	lsleq	r0, r0, #2
   1067c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10680:	000049ba 			; <UNDEFINED> instruction: 0x000049ba
   10684:	00021225 	andeq	r1, r2, r5, lsr #4
   10688:	00460e00 	subeq	r0, r6, r0, lsl #28
   1068c:	00003e00 	andeq	r3, r0, r0, lsl #28
   10690:	02160100 	andseq	r0, r6, #0, 2
   10694:	00458623 	subeq	r8, r5, r3, lsr #12
   10698:	00063c00 	andeq	r3, r6, r0, lsl #24
   1069c:	45a82200 	strmi	r2, [r8, #512]!	; 0x200
   106a0:	0af20000 	beq	ffc906a8 <_estack+0xdfc8b6a8>
   106a4:	0a460000 	beq	11906ac <__ccfg+0x1170704>
   106a8:	011a0000 	tsteq	sl, r0
   106ac:	1a310151 	bne	c50bf8 <__ccfg+0xc30c50>
   106b0:	34015001 	strcc	r5, [r1], #-1
   106b4:	45ae2200 	strmi	r2, [lr, #512]!	; 0x200
   106b8:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
   106bc:	0a5d0000 	beq	17506c4 <__ccfg+0x173071c>
   106c0:	011a0000 	tsteq	sl, r0
   106c4:	bd0c0550 	cfstr32lt	mvfx0, [ip, #-320]	; 0xfffffec0
   106c8:	00008637 	andeq	r8, r0, r7, lsr r6
   106cc:	0045b423 	subeq	fp, r5, r3, lsr #8
   106d0:	000b0800 	andeq	r0, fp, r0, lsl #16
   106d4:	45be2200 	ldrmi	r2, [lr, #512]!	; 0x200
   106d8:	0af20000 	beq	ffc906e0 <_estack+0xdfc8b6e0>
   106dc:	0a7f0000 	beq	1fd06e4 <__ccfg+0x1fb073c>
   106e0:	011a0000 	tsteq	sl, r0
   106e4:	00740251 	rsbseq	r0, r4, r1, asr r2
   106e8:	0150011a 	cmpeq	r0, sl, lsl r1
   106ec:	c4220034 	strtgt	r0, [r2], #-52	; 0xffffffcc
   106f0:	08000045 	stmdaeq	r0, {r0, r2, r6}
   106f4:	9200000b 	andls	r0, r0, #11
   106f8:	1a00000a 	bne	10728 <__exidx_end+0xa9a8>
   106fc:	34015001 	strcc	r5, [r1], #-1
   10700:	45d42200 	ldrbmi	r2, [r4, #512]	; 0x200
   10704:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
   10708:	0aac0000 	beq	feb10710 <_estack+0xdeb0b710>
   1070c:	011a0000 	tsteq	sl, r0
   10710:	00740850 	rsbseq	r0, r4, r0, asr r8
   10714:	ffffff0c 			; <UNDEFINED> instruction: 0xffffff0c
   10718:	26001a00 	strcs	r1, [r0], -r0, lsl #20
   1071c:	000045e4 	andeq	r4, r0, r4, ror #11
   10720:	00000acc 	andeq	r0, r0, ip, asr #21
   10724:	0552011a 	ldrbeq	r0, [r2, #-282]	; 0xfffffee6
   10728:	0060000c 	rsbeq	r0, r0, ip
   1072c:	51011a60 	tstpl	r1, r0, ror #20
   10730:	011a3701 	tsteq	sl, r1, lsl #14
   10734:	00740450 	rsbseq	r0, r4, r0, asr r4
   10738:	23002548 	movwcs	r2, #1352	; 0x548
   1073c:	000045fa 	strdeq	r4, [r0], -sl
   10740:	00000af2 	strdeq	r0, [r0], -r2
   10744:	38942700 	ldmcc	r4, {r8, r9, sl, sp}
   10748:	ca060000 	bgt	190750 <__ccfg+0x1707a8>
   1074c:	000af201 	andeq	pc, sl, r1, lsl #4
   10750:	008c2800 	addeq	r2, ip, r0, lsl #16
   10754:	8c280000 	stchi	0, cr0, [r8], #-0
   10758:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   1075c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10760:	2d232900 			; <UNDEFINED> instruction: 0x2d232900
   10764:	f9070000 			; <UNDEFINED> instruction: 0xf9070000
   10768:	00000b08 	andeq	r0, r0, r8, lsl #22
   1076c:	00008c28 	andeq	r8, r0, r8, lsr #24
   10770:	008c2800 	addeq	r2, ip, r0, lsl #16
   10774:	2a000000 	bcs	1077c <__exidx_end+0xa9fc>
   10778:	00002d5c 	andeq	r2, r0, ip, asr sp
   1077c:	8c011007 	stchi	0, cr1, [r1], {7}
   10780:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   10784:	0000008c 	andeq	r0, r0, ip, lsl #1
   10788:	09230000 	stmdbeq	r3!, {}	; <UNPREDICTABLE>
   1078c:	00040000 	andeq	r0, r4, r0
   10790:	00003bd8 	ldrdeq	r3, [r0], -r8
   10794:	2a450104 	bcs	1150bac <__ccfg+0x1130c04>
   10798:	0b010000 	bleq	507a0 <__ccfg+0x307f8>
   1079c:	0c00003c 	stceq	0, cr0, [r0], {60}	; 0x3c
   107a0:	5000002b 	andpl	r0, r0, fp, lsr #32
   107a4:	00000013 	andeq	r0, r0, r3, lsl r0
   107a8:	8a000000 	bhi	107b0 <__exidx_end+0xaa30>
   107ac:	02000087 	andeq	r0, r0, #135	; 0x87
   107b0:	00002baf 	andeq	r2, r0, pc, lsr #23
   107b4:	00301b06 	eorseq	r1, r0, r6, lsl #22
   107b8:	01030000 	mrseq	r0, (UNDEF: 3)
   107bc:	000c5d06 	andeq	r5, ip, r6, lsl #26
   107c0:	2a200200 	bcs	810fc8 <__ccfg+0x7f1020>
   107c4:	1d060000 	stcne	0, cr0, [r6, #-0]
   107c8:	00000042 	andeq	r0, r0, r2, asr #32
   107cc:	5b080103 	blpl	210be0 <__ccfg+0x1f0c38>
   107d0:	0300000c 	movweq	r0, #12
   107d4:	0a6b0502 	beq	1ad1be4 <__ccfg+0x1ab1c3c>
   107d8:	16020000 	strne	r0, [r2], -r0
   107dc:	0600002e 	streq	r0, [r0], -lr, lsr #32
   107e0:	00005b2b 	andeq	r5, r0, fp, lsr #22
   107e4:	07020300 	streq	r0, [r2, -r0, lsl #6]
   107e8:	00000d6c 	andeq	r0, r0, ip, ror #26
   107ec:	002ba502 	eoreq	sl, fp, r2, lsl #10
   107f0:	6d3f0600 	ldcvs	6, cr0, [pc, #-0]	; 107f8 <__exidx_end+0xaa78>
   107f4:	03000000 	movweq	r0, #0
   107f8:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
   107fc:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
   10800:	06000029 	streq	r0, [r0], -r9, lsr #32
   10804:	00007f41 	andeq	r7, r0, r1, asr #30
   10808:	07040300 	streq	r0, [r4, -r0, lsl #6]
   1080c:	00000426 	andeq	r0, r0, r6, lsr #8
   10810:	f8050803 			; <UNDEFINED> instruction: 0xf8050803
   10814:	03000007 	movweq	r0, #7
   10818:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
   1081c:	04040000 	streq	r0, [r4], #-0
   10820:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   10824:	07040300 	streq	r0, [r4, -r0, lsl #6]
   10828:	0000042b 	andeq	r0, r0, fp, lsr #8
   1082c:	002bb102 	eoreq	fp, fp, r2, lsl #2
   10830:	25130700 	ldrcs	r0, [r3, #-1792]	; 0xfffff900
   10834:	02000000 	andeq	r0, r0, #0
   10838:	00002a22 	andeq	r2, r0, r2, lsr #20
   1083c:	00371407 	eorseq	r1, r7, r7, lsl #8
   10840:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
   10844:	0700002e 	streq	r0, [r0, -lr, lsr #32]
   10848:	0000501a 	andeq	r5, r0, sl, lsl r0
   1084c:	2ba70200 	blcs	fe9d1054 <_estack+0xde9cc054>
   10850:	1f070000 	svcne	0x00070000
   10854:	00000062 	andeq	r0, r0, r2, rrx
   10858:	0029ba02 	eoreq	fp, r9, r2, lsl #20
   1085c:	74200700 	strtvc	r0, [r0], #-1792	; 0xfffff900
   10860:	02000000 	andeq	r0, r0, #0
   10864:	000029e4 	andeq	r2, r0, r4, ror #19
   10868:	00e43308 	rsceq	r3, r4, r8, lsl #6
   1086c:	04050000 	streq	r0, [r5], #-0
   10870:	000000ea 	andeq	r0, r0, sl, ror #1
   10874:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
   10878:	07000000 	streq	r0, [r0, -r0]
   1087c:	000000fc 	strdeq	r0, [r0], -ip
   10880:	0000ad08 	andeq	sl, r0, r8, lsl #26
   10884:	1a020000 	bne	9088c <__ccfg+0x708e4>
   10888:	09000031 	stmdbeq	r0, {r0, r4, r5}
   1088c:	00010742 	andeq	r0, r1, r2, asr #14
   10890:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
   10894:	09000001 	stmdbeq	r0, {r0}
   10898:	000000ce 	andeq	r0, r0, lr, asr #1
   1089c:	00000126 	andeq	r0, r0, r6, lsr #2
   108a0:	00012608 	andeq	r2, r1, r8, lsl #12
   108a4:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   108a8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   108ac:	00000000 	andeq	r0, r0, r0
   108b0:	00ad0405 	adceq	r0, sp, r5, lsl #8
   108b4:	82020000 	andhi	r0, r2, #0
   108b8:	09000032 	stmdbeq	r0, {r1, r4, r5}
   108bc:	00013746 	andeq	r3, r1, r6, asr #14
   108c0:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
   108c4:	0a000001 	beq	108d0 <__exidx_end+0xab50>
   108c8:	000000ce 	andeq	r0, r0, lr, asr #1
   108cc:	0032cb02 	eorseq	ip, r2, r2, lsl #22
   108d0:	37480900 	strbcc	r0, [r8, -r0, lsl #18]
   108d4:	02000001 	andeq	r0, r0, #1
   108d8:	00002fb2 			; <UNDEFINED> instruction: 0x00002fb2
   108dc:	01584a09 	cmpeq	r8, r9, lsl #20
   108e0:	04050000 	streq	r0, [r5], #-0
   108e4:	0000015e 	andeq	r0, r0, lr, asr r1
   108e8:	0000ce09 	andeq	ip, r0, r9, lsl #28
   108ec:	00016d00 	andeq	r6, r1, r0, lsl #26
   108f0:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   108f4:	02000000 	andeq	r0, r0, #0
   108f8:	00002ec1 	andeq	r2, r0, r1, asr #29
   108fc:	01374c09 	teqeq	r7, r9, lsl #24
   10900:	21020000 	mrscs	r0, (UNDEF: 2)
   10904:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10908:	0001074e 	andeq	r0, r1, lr, asr #14
   1090c:	2eb10200 	cdpcs	2, 11, cr0, cr1, cr0, {0}
   10910:	51090000 	mrspl	r0, (UNDEF: 9)
   10914:	000000e4 	andeq	r0, r0, r4, ror #1
   10918:	002d3b02 	eoreq	r3, sp, r2, lsl #22
   1091c:	99530900 	ldmdbls	r3, {r8, fp}^
   10920:	05000001 	streq	r0, [r0, #-1]
   10924:	00019f04 	andeq	r9, r1, r4, lsl #30
   10928:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   1092c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
   10930:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   10934:	08000001 	stmdaeq	r0, {r0}
   10938:	000000b8 	strheq	r0, [r0], -r8
   1093c:	0000b808 	andeq	fp, r0, r8, lsl #16
   10940:	04050000 	streq	r0, [r5], #-0
   10944:	000000b8 	strheq	r0, [r0], -r8
   10948:	00313002 	eorseq	r3, r1, r2
   1094c:	c9570900 	ldmdbgt	r7, {r8, fp}^
   10950:	05000001 	streq	r0, [r0, #-1]
   10954:	0001cf04 	andeq	ip, r1, r4, lsl #30
   10958:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   1095c:	01e30000 	mvneq	r0, r0
   10960:	e3080000 	movw	r0, #32768	; 0x8000
   10964:	08000001 	stmdaeq	r0, {r0}
   10968:	000000ce 	andeq	r0, r0, lr, asr #1
   1096c:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
   10970:	02000000 	andeq	r0, r0, #0
   10974:	00002f24 	andeq	r2, r0, r4, lsr #30
   10978:	01c95a09 	biceq	r5, r9, r9, lsl #20
   1097c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   10980:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10984:	0001c95d 	andeq	ip, r1, sp, asr r9
   10988:	2d4d0200 	sfmcs	f0, 2, [sp, #-0]
   1098c:	60090000 	andvs	r0, r9, r0
   10990:	000001c9 	andeq	r0, r0, r9, asr #3
   10994:	00313e02 	eorseq	r3, r1, r2, lsl #28
   10998:	e4630900 	strbt	r0, [r3], #-2304	; 0xfffff700
   1099c:	02000000 	andeq	r0, r0, #0
   109a0:	00002d8b 	andeq	r2, r0, fp, lsl #27
   109a4:	02206509 	eoreq	r6, r0, #37748736	; 0x2400000
   109a8:	04050000 	streq	r0, [r5], #-0
   109ac:	00000226 	andeq	r0, r0, r6, lsr #4
   109b0:	00023107 	andeq	r3, r2, r7, lsl #2
   109b4:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   109b8:	02000000 	andeq	r0, r0, #0
   109bc:	000032dc 	ldrdeq	r3, [r0], -ip
   109c0:	02206709 	eoreq	r6, r0, #2359296	; 0x240000
   109c4:	20020000 	andcs	r0, r2, r0
   109c8:	09000030 	stmdbeq	r0, {r4, r5}
   109cc:	0000eb69 	andeq	lr, r0, r9, ror #22
   109d0:	32bb0200 	adcscc	r0, fp, #0, 4
   109d4:	6b090000 	blvs	2509dc <__ccfg+0x230a34>
   109d8:	000000eb 	andeq	r0, r0, fp, ror #1
   109dc:	002fed02 	eoreq	lr, pc, r2, lsl #26
   109e0:	eb6d0900 	bl	1b52de8 <__ccfg+0x1b32e40>
   109e4:	02000000 	andeq	r0, r0, #0
   109e8:	00002fff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   109ec:	00eb6f09 	rsceq	r6, fp, r9, lsl #30
   109f0:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
   109f4:	03557a09 	cmpeq	r5, #36864	; 0x9000
   109f8:	c30c0000 	movwgt	r0, #49152	; 0xc000
   109fc:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a00:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
   10a04:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
   10a08:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10a0c:	00012c7d 	andeq	r2, r1, sp, ror ip
   10a10:	d40c0400 	strle	r0, [ip], #-1024	; 0xfffffc00
   10a14:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a18:	0001427e 	andeq	r4, r1, lr, ror r2
   10a1c:	cd0c0800 	stcgt	8, cr0, [ip, #-0]
   10a20:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a24:	00014d7f 	andeq	r4, r1, pc, ror sp
   10a28:	df0c0c00 	svcle	0x000c0c00
   10a2c:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a30:	00016d80 	andeq	r6, r1, r0, lsl #27
   10a34:	d20c1000 	andle	r1, ip, #0
   10a38:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10a3c:	00017881 	andeq	r7, r1, r1, lsl #17
   10a40:	8e0c1400 	cfcpyshi	mvf1, mvf12
   10a44:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10a48:	00018382 	andeq	r8, r1, r2, lsl #7
   10a4c:	c90c1800 	stmdbgt	ip, {fp, ip}
   10a50:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a54:	00018e83 	andeq	r8, r1, r3, lsl #29
   10a58:	580c1c00 	stmdapl	ip, {sl, fp, ip}
   10a5c:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a60:	0001be84 	andeq	fp, r1, r4, lsl #29
   10a64:	500c2000 	andpl	r2, ip, r0
   10a68:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a6c:	0001e985 	andeq	lr, r1, r5, lsl #19
   10a70:	a80c2400 	stmdage	ip, {sl, sp}
   10a74:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10a78:	0001f486 	andeq	pc, r1, r6, lsl #9
   10a7c:	0d0c2800 	stceq	8, cr2, [ip, #-0]
   10a80:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10a84:	0001ff87 	andeq	pc, r1, r7, lsl #31
   10a88:	ed0c2c00 	stc	12, cr2, [ip, #-0]
   10a8c:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10a90:	00021588 	andeq	r1, r2, r8, lsl #11
   10a94:	fb0c3000 	blx	31ca9e <__ccfg+0x2fcaf6>
   10a98:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10a9c:	00023189 	andeq	r3, r2, r9, lsl #3
   10aa0:	cc0c3400 	cfstrsgt	mvf3, [ip], {-0}
   10aa4:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10aa8:	00020a8a 	andeq	r0, r2, sl, lsl #21
   10aac:	0f0c3800 	svceq	0x000c3800
   10ab0:	09000030 	stmdbeq	r0, {r4, r5}
   10ab4:	00023c8b 	andeq	r3, r2, fp, lsl #25
   10ab8:	ae0c3c00 	cdpge	12, 0, cr3, cr12, cr0, {0}
   10abc:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10ac0:	0002478c 	andeq	r4, r2, ip, lsl #15
   10ac4:	320c4000 	andcc	r4, ip, #0
   10ac8:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   10acc:	0002528d 	andeq	r5, r2, sp, lsl #5
   10ad0:	7c0c4400 	cfstrsvc	mvf4, [ip], {-0}
   10ad4:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10ad8:	00025d8e 	andeq	r5, r2, lr, lsl #27
   10adc:	02004800 	andeq	r4, r0, #0, 16
   10ae0:	000030de 	ldrdeq	r3, [r0], -lr
   10ae4:	02688f09 	rsbeq	r8, r8, #9, 30	; 0x24
   10ae8:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
   10aec:	03994e01 	orrseq	r4, r9, #1, 28
   10af0:	3a0c0000 	bcc	310af8 <__ccfg+0x2f0b50>
   10af4:	0100003d 	tsteq	r0, sp, lsr r0
   10af8:	0000ce4f 	andeq	ip, r0, pc, asr #28
   10afc:	6b0c0000 	blvs	310b04 <__ccfg+0x2f0b5c>
   10b00:	0100003d 	tsteq	r0, sp, lsr r0
   10b04:	0000b850 	andeq	fp, r0, r0, asr r8
   10b08:	a50c0400 	strge	r0, [ip, #-1024]	; 0xfffffc00
   10b0c:	0100003c 	tsteq	r0, ip, lsr r0
   10b10:	0000ad51 	andeq	sl, r0, r1, asr sp
   10b14:	580c0600 	stmdapl	ip, {r9, sl}
   10b18:	0100003c 	tsteq	r0, ip, lsr r0
   10b1c:	0000a252 	andeq	sl, r0, r2, asr r2
   10b20:	02000700 	andeq	r0, r0, #0, 14
   10b24:	00003d97 	muleq	r0, r7, sp
   10b28:	03605301 	cmneq	r0, #67108864	; 0x4000000
   10b2c:	c40d0000 	strgt	r0, [sp], #-0
   10b30:	0200000f 	andeq	r0, r0, #15
   10b34:	be0301dc 	mcrlt	1, 0, r0, cr3, cr12, {6}
   10b38:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   10b3c:	00000f7e 	andeq	r0, r0, lr, ror pc
   10b40:	ce01dc02 	cdpgt	12, 0, cr13, cr1, cr2, {0}
   10b44:	00000000 	andeq	r0, r0, r0
   10b48:	000fd90f 	andeq	sp, pc, pc, lsl #18
   10b4c:	022c0200 	eoreq	r0, ip, #0, 4
   10b50:	000000ce 	andeq	r0, r0, lr, asr #1
   10b54:	10dd1003 	sbcsne	r1, sp, r3
   10b58:	2a040000 	bcs	110b60 <__ccfg+0xf0bb8>
   10b5c:	8d110302 	ldchi	3, cr0, [r1, #-8]
   10b60:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
   10b64:	0000c3e9 	andeq	ip, r0, r9, ror #7
   10b68:	03fb0300 	mvnseq	r0, #0, 6
   10b6c:	dd120000 	ldcle	0, cr0, [r2, #-0]
   10b70:	05000036 	streq	r0, [r0, #-54]	; 0xffffffca
   10b74:	0000cee9 	andeq	ip, r0, r9, ror #29
   10b78:	39e61300 	stmibcc	r6!, {r8, r9, ip}^
   10b7c:	ef050000 	svc	0x00050000
   10b80:	000000c3 	andeq	r0, r0, r3, asr #1
   10b84:	3c6d0d00 	stclcc	13, cr0, [sp], #-0
   10b88:	5c040000 	stcpl	0, cr0, [r4], {-0}
   10b8c:	04150302 	ldreq	r0, [r5], #-770	; 0xfffffcfe
   10b90:	470e0000 	strmi	r0, [lr, -r0]
   10b94:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
   10b98:	00ce025c 	sbceq	r0, lr, ip, asr r2
   10b9c:	10000000 	andne	r0, r0, r0
   10ba0:	00003108 	andeq	r3, r0, r8, lsl #2
   10ba4:	03014003 	movweq	r4, #4099	; 0x1003
   10ba8:	003cf10f 	eorseq	pc, ip, pc, lsl #2
   10bac:	023e0400 	eorseq	r0, lr, #0, 8
   10bb0:	0000042b 	andeq	r0, r0, fp, lsr #8
   10bb4:	02010303 	andeq	r0, r1, #201326592	; 0xc000000
   10bb8:	00000ca7 	andeq	r0, r0, r7, lsr #25
   10bbc:	003d4114 	eorseq	r4, sp, r4, lsl r1
   10bc0:	009e0a00 	addseq	r0, lr, r0, lsl #20
   10bc4:	f4000000 	vst4.8	{d0-d3}, [r0], r0
   10bc8:	01000000 	mrseq	r0, (UNDEF: 0)
   10bcc:	0005cd9c 	muleq	r5, ip, sp
   10bd0:	3c9d1500 	cfldr32cc	mvfx1, [sp], {0}
   10bd4:	7b010000 	blvc	50bdc <__ccfg+0x30c34>
   10bd8:	000000ce 	andeq	r0, r0, lr, asr #1
   10bdc:	000049cd 	andeq	r4, r0, sp, asr #19
   10be0:	003c5f16 	eorseq	r5, ip, r6, lsl pc
   10be4:	ce7c0100 	rpwgte	f0, f4, f0
   10be8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   10bec:	03a41707 			; <UNDEFINED> instruction: 0x03a41707
   10bf0:	00000000 	andeq	r0, r0, r0
   10bf4:	13200000 	nopne	{0}	; <UNPREDICTABLE>
   10bf8:	81010000 	mrshi	r0, (UNDEF: 1)
   10bfc:	0000047d 	andeq	r0, r0, sp, ror r4
   10c00:	0003b118 	andeq	fp, r3, r8, lsl r1
   10c04:	19000100 	stmdbne	r0, {r8}
   10c08:	000003be 			; <UNDEFINED> instruction: 0x000003be
   10c0c:	00000000 	andeq	r0, r0, r0
   10c10:	00000004 	andeq	r0, r0, r4
   10c14:	151a8201 	ldrne	r8, [sl, #-513]	; 0xfffffdff
   10c18:	00000004 	andeq	r0, r0, r4
   10c1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10c20:	01000000 	mrseq	r0, (UNDEF: 0)
   10c24:	0004a9a1 	andeq	sl, r4, r1, lsr #19
   10c28:	00001b00 	andeq	r1, r0, r0, lsl #22
   10c2c:	08de0000 	ldmeq	lr, {}^	; <UNPREDICTABLE>
   10c30:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   10c34:	000003cb 	andeq	r0, r0, fp, asr #7
   10c38:	00000000 	andeq	r0, r0, r0
   10c3c:	00000006 	andeq	r0, r0, r6
   10c40:	1e19b101 	mnfnee	f3, f1
   10c44:	00000004 	andeq	r0, r0, r4
   10c48:	04000000 	streq	r0, [r0], #-0
   10c4c:	01000000 	mrseq	r0, (UNDEF: 0)
   10c50:	03fb1ab2 	mvnseq	r1, #729088	; 0xb2000
   10c54:	00000000 	andeq	r0, r0, r0
   10c58:	000a0000 	andeq	r0, sl, r0
   10c5c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   10c60:	000004e1 	andeq	r0, r0, r1, ror #9
   10c64:	00040818 	andeq	r0, r4, r8, lsl r8
   10c68:	19001100 	stmdbne	r0, {r8, ip}
   10c6c:	000003cb 	andeq	r0, r0, fp, asr #7
   10c70:	00000000 	andeq	r0, r0, r0
   10c74:	00000004 	andeq	r0, r0, r4
   10c78:	1e19b901 	vnmlsne.f16	s22, s18, s2	; <UNPREDICTABLE>
   10c7c:	00000004 	andeq	r0, r0, r4
   10c80:	02000000 	andeq	r0, r0, #0
   10c84:	01000000 	mrseq	r0, (UNDEF: 0)
   10c88:	03cb19ba 	biceq	r1, fp, #3047424	; 0x2e8000
   10c8c:	00000000 	andeq	r0, r0, r0
   10c90:	00060000 	andeq	r0, r6, r0
   10c94:	cf010000 	svcgt	0x00010000
   10c98:	00041e19 	andeq	r1, r4, r9, lsl lr
   10c9c:	00000000 	andeq	r0, r0, r0
   10ca0:	00000200 	andeq	r0, r0, r0, lsl #4
   10ca4:	1cd00100 	ldfnee	f0, [r0], {0}
   10ca8:	00000000 	andeq	r0, r0, r0
   10cac:	0000052e 	andeq	r0, r0, lr, lsr #10
   10cb0:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
   10cb4:	0007ff0a 	andeq	pc, r7, sl, lsl #30
   10cb8:	0000001c 	andeq	r0, r0, ip, lsl r0
   10cbc:	00053f00 	andeq	r3, r5, r0, lsl #30
   10cc0:	50011d00 	andpl	r1, r1, r0, lsl #26
   10cc4:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
   10cc8:	00001e00 	andeq	r1, r0, r0, lsl #28
   10ccc:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   10cd0:	05570000 	ldrbeq	r0, [r7, #-0]
   10cd4:	011d0000 	tsteq	sp, r0
   10cd8:	1d310151 	ldfnes	f0, [r1, #-324]!	; 0xfffffebc
   10cdc:	33015001 	movwcc	r5, #4097	; 0x1001
   10ce0:	00001e00 	andeq	r1, r0, r0, lsl #28
   10ce4:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   10ce8:	056f0000 	strbeq	r0, [pc, #-0]!	; 10cf0 <__exidx_end+0xaf70>
   10cec:	011d0000 	tsteq	sp, r0
   10cf0:	1d330151 	ldfnes	f0, [r3, #-324]!	; 0xfffffebc
   10cf4:	34015001 	strcc	r5, [r1], #-1
   10cf8:	00001e00 	andeq	r1, r0, r0, lsl #28
   10cfc:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
   10d00:	05820000 	streq	r0, [r2]
   10d04:	011d0000 	tsteq	sp, r0
   10d08:	00310150 	eorseq	r0, r1, r0, asr r1
   10d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d10:	00059100 	andeq	r9, r5, r0, lsl #2
   10d14:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d18:	1c003701 	stcne	7, cr3, [r0], {1}
   10d1c:	00000000 	andeq	r0, r0, r0
   10d20:	000005a0 	andeq	r0, r0, r0, lsr #11
   10d24:	0150011d 	cmpeq	r0, sp, lsl r1
   10d28:	001c0037 	andseq	r0, ip, r7, lsr r0
   10d2c:	b0000000 	andlt	r0, r0, r0
   10d30:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10d34:	76025001 	strvc	r5, [r2], -r1
   10d38:	001c0000 	andseq	r0, ip, r0
   10d3c:	c0000000 	andgt	r0, r0, r0
   10d40:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10d44:	76025001 	strvc	r5, [r2], -r1
   10d48:	001f0000 	andseq	r0, pc, r0
   10d4c:	1d000000 	stcne	0, cr0, [r0, #-0]
   10d50:	76025001 	strvc	r5, [r2], -r1
   10d54:	20000000 	andcs	r0, r0, r0
   10d58:	00003be3 	andeq	r3, r0, r3, ror #23
   10d5c:	4c01010a 	stfmis	f0, [r1], {10}
   10d60:	20000046 	andcs	r0, r0, r6, asr #32
   10d64:	01000002 	tsteq	r0, r2
   10d68:	0007c89c 	muleq	r7, ip, r8
   10d6c:	3ce32100 	stfcce	f2, [r3]
   10d70:	da010000 	ble	50d78 <__ccfg+0x30dd0>
   10d74:	000000ce 	andeq	r0, r0, lr, asr #1
   10d78:	000049f8 	strdeq	r4, [r0], -r8
   10d7c:	003b8715 	eorseq	r8, fp, r5, lsl r7
   10d80:	c3dc0100 	bicsgt	r0, ip, #0, 2
   10d84:	24000000 	strcs	r0, [r0], #-0
   10d88:	1500004a 	strne	r0, [r0, #-74]	; 0xffffffb6
   10d8c:	00003cfd 	strdeq	r3, [r0], -sp
   10d90:	00c3dd01 	sbceq	sp, r3, r1, lsl #26
   10d94:	4a420000 	bmi	1090d9c <__ccfg+0x1070df4>
   10d98:	c3150000 	tstgt	r5, #0
   10d9c:	0100003c 	tsteq	r0, ip, lsr r0
   10da0:	0000c3de 	ldrdeq	ip, [r0], -lr
   10da4:	004a9c00 	subeq	r9, sl, r0, lsl #24
   10da8:	3d891500 	cfstr32cc	mvfx1, [r9]
   10dac:	df010000 	svcle	0x00010000
   10db0:	000000c3 	andeq	r0, r0, r3, asr #1
   10db4:	00004aba 			; <UNDEFINED> instruction: 0x00004aba
   10db8:	003b7915 	eorseq	r7, fp, r5, lsl r9
   10dbc:	c3e00100 	mvngt	r0, #0, 2
   10dc0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
   10dc4:	2200004a 	andcs	r0, r0, #74	; 0x4a
   10dc8:	00003b8f 	andeq	r3, r0, pc, lsl #23
   10dcc:	00c3e101 	sbceq	lr, r3, r1, lsl #2
   10dd0:	53010000 	movwpl	r0, #4096	; 0x1000
   10dd4:	00363115 	eorseq	r3, r6, r5, lsl r1
   10dd8:	cee20100 	cdpgt	1, 14, cr0, cr2, cr0, {0}
   10ddc:	eb000000 	bl	10de4 <__exidx_end+0xb064>
   10de0:	1500004a 	strne	r0, [r0, #-74]	; 0xffffffb6
   10de4:	00003d21 	andeq	r3, r0, r1, lsr #26
   10de8:	00cee301 	sbceq	lr, lr, r1, lsl #6
   10dec:	4afe0000 	bmi	fff90df4 <_estack+0xdff8bdf4>
   10df0:	a3150000 	tstge	r5, #0
   10df4:	0100003b 	tsteq	r0, fp, lsr r0
   10df8:	0000cee4 	andeq	ip, r0, r4, ror #29
   10dfc:	004b1d00 	subeq	r1, fp, r0, lsl #26
   10e00:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   10e04:	cee50100 	cdpgt	1, 14, cr0, cr5, cr0, {0}
   10e08:	30000000 	andcc	r0, r0, r0
   10e0c:	2300004b 	movwcs	r0, #75	; 0x4b
   10e10:	00696964 	rsbeq	r6, r9, r4, ror #18
   10e14:	00cee601 	sbceq	lr, lr, r1, lsl #12
   10e18:	4b660000 	blmi	1990e20 <__ccfg+0x1970e78>
   10e1c:	74230000 	strtvc	r0, [r3], #-0
   10e20:	e7010069 	str	r0, [r1, -r9, rrx]
   10e24:	000000ce 	andeq	r0, r0, lr, asr #1
   10e28:	00004b9c 	muleq	r0, ip, fp
   10e2c:	00646323 	rsbeq	r6, r4, r3, lsr #6
   10e30:	00cee801 	sbceq	lr, lr, r1, lsl #16
   10e34:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
   10e38:	63230000 			; <UNDEFINED> instruction: 0x63230000
   10e3c:	e901006c 	stmdb	r1, {r2, r3, r5, r6}
   10e40:	000000ce 	andeq	r0, r0, lr, asr #1
   10e44:	00004c1f 	andeq	r4, r0, pc, lsl ip
   10e48:	003bb415 	eorseq	fp, fp, r5, lsl r4
   10e4c:	ceea0100 	cdpgt	1, 14, cr0, cr10, cr0, {0}
   10e50:	32000000 	andcc	r0, r0, #0
   10e54:	2400004c 	strcs	r0, [r0], #-76	; 0xffffffb4
   10e58:	eb01006b 	bl	5100c <__ccfg+0x31064>
   10e5c:	000000ce 	andeq	r0, r0, lr, asr #1
   10e60:	003c9513 	eorseq	r9, ip, r3, lsl r5
   10e64:	ceec0100 	cdpgt	1, 14, cr0, cr12, cr0, {0}
   10e68:	15000000 	strne	r0, [r0, #-0]
   10e6c:	00003c83 	andeq	r3, r0, r3, lsl #25
   10e70:	00ceed01 	sbceq	lr, lr, r1, lsl #26
   10e74:	4c500000 	mrami	r0, r0, acc0
   10e78:	53150000 	tstpl	r5, #0
   10e7c:	0100003c 	tsteq	r0, ip, lsr r0
   10e80:	0000ceee 	andeq	ip, r0, lr, ror #29
   10e84:	004c7900 	subeq	r7, ip, r0, lsl #18
   10e88:	3c7e1500 	cfldr64cc	mvdx1, [lr], #-0
   10e8c:	ef010000 	svc	0x00010000
   10e90:	000000ce 	andeq	r0, r0, lr, asr #1
   10e94:	00004c98 	muleq	r0, r8, ip
   10e98:	003d5e15 	eorseq	r5, sp, r5, lsl lr
   10e9c:	c8f00100 	ldmgt	r0!, {r8}^
   10ea0:	dc000007 	stcle	0, cr0, [r0], {7}
   10ea4:	2500004c 	strcs	r0, [r0, #-76]	; 0xffffffb4
   10ea8:	0000467a 	andeq	r4, r0, sl, ror r6
   10eac:	00000012 	andeq	r0, r0, r2, lsl r0
   10eb0:	0000073b 	andeq	r0, r0, fp, lsr r7
   10eb4:	003d0926 	eorseq	r0, sp, r6, lsr #18
   10eb8:	010a0100 	mrseq	r0, (UNDEF: 26)
   10ebc:	000000c3 	andeq	r0, r0, r3, asr #1
   10ec0:	00004cf4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10ec4:	03d42700 	bicseq	r2, r4, #0, 14
   10ec8:	46a00000 	strtmi	r0, [r0], r0
   10ecc:	00060000 	andeq	r0, r6, r0
   10ed0:	11010000 	mrsne	r0, (UNDEF: 1)
   10ed4:	00076801 	andeq	r6, r7, r1, lsl #16
   10ed8:	03e42800 	mvneq	r2, #0, 16
   10edc:	a0290000 	eorge	r0, r9, r0
   10ee0:	06000046 	streq	r0, [r0], -r6, asr #32
   10ee4:	2a000000 	bcs	10eec <__exidx_end+0xb16c>
   10ee8:	000003ef 	andeq	r0, r0, pc, ror #7
   10eec:	00004d07 	andeq	r4, r0, r7, lsl #26
   10ef0:	d4270000 	strtle	r0, [r7], #-0
   10ef4:	b8000003 	stmdalt	r0, {r0, r1}
   10ef8:	06000046 	streq	r0, [r0], -r6, asr #32
   10efc:	01000000 	mrseq	r0, (UNDEF: 0)
   10f00:	0795011b 			; <UNDEFINED> instruction: 0x0795011b
   10f04:	e4280000 	strt	r0, [r8], #-0
   10f08:	29000003 	stmdbcs	r0, {r0, r1}
   10f0c:	000046b8 			; <UNDEFINED> instruction: 0x000046b8
   10f10:	00000006 	andeq	r0, r0, r6
   10f14:	0003ef2a 	andeq	lr, r3, sl, lsr #30
   10f18:	004d1a00 	subeq	r1, sp, r0, lsl #20
   10f1c:	2b000000 	blcs	10f24 <__exidx_end+0xb1a4>
   10f20:	000003d4 	ldrdeq	r0, [r0], -r4
   10f24:	000046c2 	andeq	r4, r0, r2, asr #13
   10f28:	00001338 	andeq	r1, r0, r8, lsr r3
   10f2c:	be011f01 	cdplt	15, 0, cr1, cr1, cr1, {0}
   10f30:	28000007 	stmdacs	r0, {r0, r1, r2}
   10f34:	000003e4 	andeq	r0, r0, r4, ror #7
   10f38:	0013382c 	andseq	r3, r3, ip, lsr #16
   10f3c:	03ef2a00 	mvneq	r2, #0, 20
   10f40:	4d2d0000 	stcmi	0, cr0, [sp, #-0]
   10f44:	00000000 	andeq	r0, r0, r0
   10f48:	00466c1b 	subeq	r6, r6, fp, lsl ip
   10f4c:	00091b00 	andeq	r1, r9, r0, lsl #22
   10f50:	04050000 	streq	r0, [r5], #-0
   10f54:	000007ce 	andeq	r0, r0, lr, asr #15
   10f58:	0000ce2d 	andeq	ip, r0, sp, lsr #28
   10f5c:	3bb92000 	blcc	fee58f64 <_estack+0xdee53f64>
   10f60:	170a0000 	strne	r0, [sl, -r0]
   10f64:	00486c01 	subeq	r6, r8, r1, lsl #24
   10f68:	00006000 	andeq	r6, r0, r0
   10f6c:	339c0100 	orrscc	r0, ip, #0, 2
   10f70:	26000008 	strcs	r0, [r0], -r8
   10f74:	00003b87 	andeq	r3, r0, r7, lsl #23
   10f78:	c301b801 	movwgt	fp, #6145	; 0x1801
   10f7c:	40000000 	andmi	r0, r0, r0
   10f80:	2600004d 	strcs	r0, [r0], -sp, asr #32
   10f84:	00003cad 	andeq	r3, r0, sp, lsr #25
   10f88:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
   10f8c:	6b000000 	blvs	10f94 <__exidx_end+0xb214>
   10f90:	2600004d 	strcs	r0, [r0], -sp, asr #32
   10f94:	00002f46 	andeq	r2, r0, r6, asr #30
   10f98:	ce01ba01 	vmlagt.f32	s22, s2, s2
   10f9c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
   10fa0:	2600004d 	strcs	r0, [r0], -sp, asr #32
   10fa4:	00003c83 	andeq	r3, r0, r3, lsl #25
   10fa8:	ce01bb01 	vmlagt.f64	d11, d1, d1
   10fac:	a5000000 	strge	r0, [r0, #-0]
   10fb0:	1b00004d 	blne	110ec <__exidx_end+0xb36c>
   10fb4:	0000487a 	andeq	r4, r0, sl, ror r8
   10fb8:	0000091b 	andeq	r0, r0, fp, lsl r9
   10fbc:	3daa2000 	stccc	0, cr2, [sl]
   10fc0:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
   10fc4:	00000001 	andeq	r0, r0, r1
   10fc8:	00007800 	andeq	r7, r0, r0, lsl #16
   10fcc:	8a9c0100 	bhi	fe7113d4 <_estack+0xde70c3d4>
   10fd0:	26000008 	strcs	r0, [r0], -r8
   10fd4:	00003cd6 	ldrdeq	r3, [r0], -r6
   10fd8:	ce01e701 	cdpgt	7, 0, cr14, cr1, cr1, {0}
   10fdc:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
   10fe0:	2600004d 	strcs	r0, [r0], -sp, asr #32
   10fe4:	00003d7c 	andeq	r3, r0, ip, ror sp
   10fe8:	ce01e801 	cdpgt	8, 0, cr14, cr1, cr1, {0}
   10fec:	e1000000 	mrs	r0, (UNDEF: 0)
   10ff0:	2600004d 	strcs	r0, [r0], -sp, asr #32
   10ff4:	00003631 	andeq	r3, r0, r1, lsr r6
   10ff8:	ce01e901 	vmlagt.f16	s28, s2, s2	; <UNPREDICTABLE>
   10ffc:	f4000000 	vst4.8	{d0-d3}, [r0], r0
   11000:	2600004d 	strcs	r0, [r0], -sp, asr #32
   11004:	00003d2a 	andeq	r3, r0, sl, lsr #26
   11008:	ce01ea01 	vmlagt.f32	s28, s2, s2
   1100c:	07000000 	streq	r0, [r0, -r0]
   11010:	0000004e 	andeq	r0, r0, lr, asr #32
   11014:	003c2b2e 	eorseq	r2, ip, lr, lsr #22
   11018:	01420a00 	cmpeq	r2, r0, lsl #20
   1101c:	000000ce 	andeq	r0, r0, lr, asr #1
   11020:	000048cc 	andeq	r4, r0, ip, asr #17
   11024:	00000018 	andeq	r0, r0, r8, lsl r0
   11028:	d7229c01 	strle	r9, [r2, -r1, lsl #24]!
   1102c:	0100003d 	tsteq	r0, sp, lsr r0
   11030:	00039955 	andeq	r9, r3, r5, asr r9
   11034:	28030500 	stmdacs	r3, {r8, sl}
   11038:	2f200006 	svccs	0x00200006
   1103c:	000000ce 	andeq	r0, r0, lr, asr #1
   11040:	000008c1 	andeq	r0, r0, r1, asr #17
   11044:	0008c130 	andeq	ip, r8, r0, lsr r1
   11048:	03000c00 	movweq	r0, #3072	; 0xc00
   1104c:	2cb90704 	ldccs	7, cr0, [r9], #16
   11050:	11220000 			; <UNDEFINED> instruction: 0x11220000
   11054:	0100003d 	tsteq	r0, sp, lsr r0
   11058:	0008d961 	andeq	sp, r8, r1, ror #18
   1105c:	00030500 	andeq	r0, r3, r0, lsl #10
   11060:	2d000000 	stccs	0, cr0, [r0, #-0]
   11064:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   11068:	002a1331 	eoreq	r1, sl, r1, lsr r3
   1106c:	ef990900 	svc	0x00990900
   11070:	08000008 	stmdaeq	r0, {r3}
   11074:	000000d9 	ldrdeq	r0, [r0], -r9
   11078:	2d233100 	stfcss	f3, [r3, #-0]
   1107c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
   11080:	00000905 	andeq	r0, r0, r5, lsl #18
   11084:	0000ce08 	andeq	ip, r0, r8, lsl #28
   11088:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   1108c:	32000000 	andcc	r0, r0, #0
   11090:	00002d5c 	andeq	r2, r0, ip, asr sp
   11094:	ce011003 	cdpgt	0, 0, cr1, cr1, cr3, {0}
   11098:	1b000000 	blne	110a0 <__exidx_end+0xb320>
   1109c:	08000009 	stmdaeq	r0, {r0, r3}
   110a0:	000000ce 	andeq	r0, r0, lr, asr #1
   110a4:	2b763300 	blcs	1d9dcac <__ccfg+0x1d7dd04>
   110a8:	aa0b0000 	bge	2d10b0 <__ccfg+0x2b1108>
   110ac:	000000c3 	andeq	r0, r0, r3, asr #1
   110b0:	0003cc00 	andeq	ip, r3, r0, lsl #24
   110b4:	92000400 	andls	r0, r0, #0, 8
   110b8:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   110bc:	002a4501 	eoreq	r4, sl, r1, lsl #10
   110c0:	40be0100 	adcsmi	r0, lr, r0, lsl #2
   110c4:	2b0c0000 	blcs	3110cc <__ccfg+0x2f1124>
   110c8:	13b00000 	movsne	r0, #0
   110cc:	00000000 	andeq	r0, r0, r0
   110d0:	8af30000 	bhi	ffcd10d8 <_estack+0xdfccc0d8>
   110d4:	01020000 	mrseq	r0, (UNDEF: 2)
   110d8:	000c5d06 	andeq	r5, ip, r6, lsl #26
   110dc:	08010200 	stmdaeq	r1, {r9}
   110e0:	00000c5b 	andeq	r0, r0, fp, asr ip
   110e4:	6b050202 	blvs	1518f4 <__ccfg+0x13194c>
   110e8:	0200000a 	andeq	r0, r0, #10
   110ec:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
   110f0:	04020000 	streq	r0, [r2], #-0
   110f4:	0007fd05 	andeq	pc, r7, r5, lsl #26
   110f8:	29b80300 	ldmibcs	r8!, {r8, r9}
   110fc:	41030000 	mrsmi	r0, (UNDEF: 3)
   11100:	00000053 	andeq	r0, r0, r3, asr r0
   11104:	26070402 	strcs	r0, [r7], -r2, lsl #8
   11108:	02000004 	andeq	r0, r0, #4
   1110c:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
   11110:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   11114:	00042107 	andeq	r2, r4, r7, lsl #2
   11118:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   1111c:	00746e69 	rsbseq	r6, r4, r9, ror #28
   11120:	2b070402 	blcs	1d2130 <__ccfg+0x1b2188>
   11124:	03000004 	movweq	r0, #4
   11128:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
   1112c:	00482004 	subeq	r2, r8, r4
   11130:	01050000 	mrseq	r0, (UNDEF: 5)
   11134:	00a26302 	adceq	r6, r2, r2, lsl #6
   11138:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
   1113c:	0000003f 	andeq	r0, r0, pc, lsr r0
   11140:	00403806 	subeq	r3, r0, r6, lsl #16
   11144:	a8060200 	stmdage	r6, {r9}
   11148:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   1114c:	003de806 	eorseq	lr, sp, r6, lsl #16
   11150:	03000800 	movweq	r0, #2048	; 0x800
   11154:	00003f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
   11158:	00816802 	addeq	r6, r1, r2, lsl #16
   1115c:	01050000 	mrseq	r0, (UNDEF: 5)
   11160:	00daa502 	sbcseq	sl, sl, r2, lsl #10
   11164:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   11168:	7f000040 	svcvc	0x00000040
   1116c:	003e0006 	eorseq	r0, lr, r6
   11170:	5f060000 	svcpl	0x00060000
   11174:	01000041 	tsteq	r0, r1, asr #32
   11178:	003fec06 	eorseq	lr, pc, r6, lsl #24
   1117c:	51060200 	mrspl	r0, LR_usr
   11180:	03000041 	movweq	r0, #65	; 0x41
   11184:	003ee506 	eorseq	lr, lr, r6, lsl #10
   11188:	03000400 	movweq	r0, #1024	; 0x400
   1118c:	0000416b 	andeq	r4, r0, fp, ror #2
   11190:	00adac02 	adceq	sl, sp, r2, lsl #24
   11194:	01070000 	mrseq	r0, (UNDEF: 7)
   11198:	25013d02 	strcs	r3, [r1, #-3330]	; 0xfffff2fe
   1119c:	06000001 	streq	r0, [r0], -r1
   111a0:	00003fc2 	andeq	r3, r0, r2, asr #31
   111a4:	3eb0067f 	mrccc	6, 5, r0, cr0, cr15, {3}
   111a8:	06000000 	streq	r0, [r0], -r0
   111ac:	00003f0c 	andeq	r3, r0, ip, lsl #30
   111b0:	3f480601 	svccc	0x00480601
   111b4:	06020000 	streq	r0, [r2], -r0
   111b8:	00004093 	muleq	r0, r3, r0
   111bc:	3e0c0603 	cfmadd32cc	mvax0, mvfx0, mvfx12, mvfx3
   111c0:	06040000 	streq	r0, [r4], -r0
   111c4:	00003ed4 	ldrdeq	r3, [r0], -r4
   111c8:	406d0605 	rsbmi	r0, sp, r5, lsl #12
   111cc:	06060000 	streq	r0, [r6], -r0
   111d0:	00004080 	andeq	r4, r0, r0, lsl #1
   111d4:	98080007 	stmdals	r8, {r0, r1, r2}
   111d8:	0200003e 	andeq	r0, r0, #62	; 0x3e
   111dc:	00e50147 	rsceq	r0, r5, r7, asr #2
   111e0:	01070000 	mrseq	r0, (UNDEF: 7)
   111e4:	5f015902 	svcpl	0x00015902
   111e8:	06000001 	streq	r0, [r0], -r1
   111ec:	00003f39 	andeq	r3, r0, r9, lsr pc
   111f0:	3f62067f 	svccc	0x0062067f
   111f4:	06000000 	streq	r0, [r0], -r0
   111f8:	00003fde 	ldrdeq	r3, [r0], -lr
   111fc:	3e250601 	cfmadda32cc	mvax0, mvax0, mvfx5, mvfx1
   11200:	06020000 	streq	r0, [r2], -r0
   11204:	00004048 	andeq	r4, r0, r8, asr #32
   11208:	3efb0603 	cdpcc	6, 15, cr0, cr11, cr3, {0}
   1120c:	00040000 	andeq	r0, r4, r0
   11210:	003ec108 	eorseq	ip, lr, r8, lsl #2
   11214:	01600200 	cmneq	r0, r0, lsl #4
   11218:	00000131 	andeq	r0, r0, r1, lsr r1
   1121c:	b8020107 	stmdalt	r2, {r0, r1, r2, r8}
   11220:	00019901 	andeq	r9, r1, r1, lsl #18
   11224:	3f780600 	svccc	0x00780600
   11228:	067f0000 	ldrbteq	r0, [pc], -r0
   1122c:	000040a4 	andeq	r4, r0, r4, lsr #1
   11230:	4009060a 	andmi	r0, r9, sl, lsl #12
   11234:	06140000 	ldreq	r0, [r4], -r0
   11238:	0000402e 	andeq	r4, r0, lr, lsr #32
   1123c:	3fd40615 	svccc	0x00d40615
   11240:	06160000 	ldreq	r0, [r6], -r0
   11244:	0000405a 	andeq	r4, r0, sl, asr r0
   11248:	a3080017 	movwge	r0, #32791	; 0x8017
   1124c:	0200003e 	andeq	r0, r0, #62	; 0x3e
   11250:	016b01bf 	strheq	r0, [fp, #-31]!	; 0xffffffe1
   11254:	ea090000 	b	25125c <__ccfg+0x2312b4>
   11258:	02000040 	andeq	r0, r0, #64	; 0x40
   1125c:	00760107 	rsbseq	r0, r6, r7, lsl #2
   11260:	0a030000 	beq	d1268 <__ccfg+0xb12c0>
   11264:	00003e37 	andeq	r3, r0, r7, lsr lr
   11268:	5f016a02 	svcpl	0x00016a02
   1126c:	01000001 	tsteq	r0, r1
   11270:	000001da 	ldrdeq	r0, [r0], -sl
   11274:	003f700b 	eorseq	r7, pc, fp
   11278:	5f680100 	svcpl	0x00680100
   1127c:	0b000001 	bleq	11288 <__exidx_end+0xb508>
   11280:	00003e1d 	andeq	r3, r0, sp, lsl lr
   11284:	00766901 	rsbseq	r6, r6, r1, lsl #18
   11288:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   1128c:	00004198 	muleq	r0, r8, r1
   11290:	76013202 	strvc	r3, [r1], -r2, lsl #4
   11294:	03000000 	movweq	r0, #0
   11298:	00412a0c 	subeq	r2, r1, ip, lsl #20
   1129c:	a2720200 	rsbsge	r0, r2, #0, 4
   112a0:	00000000 	andeq	r0, r0, r0
   112a4:	10000000 	andne	r0, r0, r0
   112a8:	01000000 	mrseq	r0, (UNDEF: 0)
   112ac:	3e540d9c 	mrccc	13, 2, r0, cr4, cr12, {4}
   112b0:	b6020000 	strlt	r0, [r2], -r0
   112b4:	000000da 	ldrdeq	r0, [r0], -sl
   112b8:	00000000 	andeq	r0, r0, r0
   112bc:	00000018 	andeq	r0, r0, r8, lsl r0
   112c0:	02259c01 	eoreq	r9, r5, #256	; 0x100
   112c4:	8f0e0000 	svchi	0x000e0000
   112c8:	0100003e 	tsteq	r0, lr, lsr r0
   112cc:	0000da52 	andeq	sp, r0, r2, asr sl
   112d0:	004e1a00 	subeq	r1, lr, r0, lsl #20
   112d4:	b20f0000 	andlt	r0, pc, #0
   112d8:	e4000001 	str	r0, [r0], #-1
   112dc:	4c000048 	stcmi	0, cr0, [r0], {72}	; 0x48
   112e0:	01000000 	mrseq	r0, (UNDEF: 0)
   112e4:	00026e9c 	muleq	r2, ip, lr
   112e8:	01c31000 	biceq	r1, r3, r0
   112ec:	4e420000 	cdpmi	0, 4, cr0, cr2, cr0, {0}
   112f0:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
   112f4:	62000001 	andvs	r0, r0, #1
   112f8:	1100004e 	tstne	r0, lr, asr #32
   112fc:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   11300:	0000000e 	andeq	r0, r0, lr
   11304:	0001c312 	andeq	ip, r1, r2, lsl r3
   11308:	01ce1200 	biceq	r1, lr, r0, lsl #4
   1130c:	a5130000 	ldrge	r0, [r3, #-0]
   11310:	f4000001 	vst4.8	{d0-d3}, [r0], r1
   11314:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
   11318:	01000000 	mrseq	r0, (UNDEF: 0)
   1131c:	14000070 	strne	r0, [r0], #-112	; 0xffffff90
   11320:	00004013 	andeq	r4, r0, r3, lsl r0
   11324:	25015102 	strcs	r5, [r1, #-258]	; 0xfffffefe
   11328:	00000001 	andeq	r0, r0, r1
   1132c:	30000000 	andcc	r0, r0, r0
   11330:	01000000 	mrseq	r0, (UNDEF: 0)
   11334:	0002ca9c 	muleq	r2, ip, sl
   11338:	40640e00 	rsbmi	r0, r4, r0, lsl #28
   1133c:	85010000 	strhi	r0, [r1, #-0]
   11340:	00000125 	andeq	r0, r0, r5, lsr #2
   11344:	00004e96 	muleq	r0, r6, lr
   11348:	0040de0b 	subeq	sp, r0, fp, lsl #28
   1134c:	76860100 	strvc	r0, [r6], r0, lsl #2
   11350:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   11354:	00003f86 	andeq	r3, r0, r6, lsl #31
   11358:	00768701 	rsbseq	r8, r6, r1, lsl #14
   1135c:	4eb60000 	cdpmi	0, 11, cr0, cr6, cr0, {0}
   11360:	da130000 	ble	4d1368 <__ccfg+0x4b13c0>
   11364:	00000001 	andeq	r0, r0, r1
   11368:	04000000 	streq	r0, [r0], #-0
   1136c:	01000000 	mrseq	r0, (UNDEF: 0)
   11370:	00001586 	andeq	r1, r0, r6, lsl #11
   11374:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   11378:	16000000 	strne	r0, [r0], -r0
   1137c:	00004108 	andeq	r4, r0, r8, lsl #2
   11380:	76011902 	strvc	r1, [r1], -r2, lsl #18
   11384:	03000000 	movweq	r0, #0
   11388:	000002e8 	andeq	r0, r0, r8, ror #5
   1138c:	003ef217 	eorseq	pc, lr, r7, lsl r2	; <UNPREDICTABLE>
   11390:	011b0200 	tsteq	fp, r0, lsl #4
   11394:	00000076 	andeq	r0, r0, r6, ror r0
   11398:	3e721400 	cdpcc	4, 7, cr1, cr2, cr0, {0}
   1139c:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
   113a0:	00019901 	andeq	r9, r1, r1, lsl #18
   113a4:	00493000 	subeq	r3, r9, r0
   113a8:	00006c00 	andeq	r6, r0, r0, lsl #24
   113ac:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
   113b0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   113b4:	00003ece 	andeq	r3, r0, lr, asr #29
   113b8:	0199a801 	orrseq	sl, r9, r1, lsl #16
   113bc:	4ec90000 	cdpmi	0, 12, cr0, cr9, cr0, {0}
   113c0:	590b0000 	stmdbpl	fp, {}	; <UNPREDICTABLE>
   113c4:	0100003f 	tsteq	r0, pc, lsr r0
   113c8:	000076a9 	andeq	r7, r0, r9, lsr #13
   113cc:	411f1800 	tstmi	pc, r0, lsl #16
   113d0:	aa010000 	bge	513d8 <__ccfg+0x31430>
   113d4:	00000076 	andeq	r0, r0, r6, ror r0
   113d8:	a5195401 	ldrge	r5, [r9, #-1025]	; 0xfffffbff
   113dc:	32000001 	andcc	r0, r0, #1
   113e0:	80000049 	andhi	r0, r0, r9, asr #32
   113e4:	01000013 	tsteq	r0, r3, lsl r0
   113e8:	02ca1aa9 	sbceq	r1, sl, #692224	; 0xa9000
   113ec:	49360000 	ldmdbmi	r6!, {}	; <UNPREDICTABLE>
   113f0:	13980000 	orrsne	r0, r8, #0
   113f4:	aa010000 	bge	513fc <__ccfg+0x31454>
   113f8:	0000035b 	andeq	r0, r0, fp, asr r3
   113fc:	0013981b 	andseq	r9, r3, fp, lsl r8
   11400:	02db1000 	sbcseq	r1, fp, #0
   11404:	4f260000 	svcmi	0x00260000
   11408:	00000000 	andeq	r0, r0, r0
   1140c:	00494a15 	subeq	r4, r9, r5, lsl sl
   11410:	0001b200 	andeq	fp, r1, r0, lsl #4
   11414:	1d090000 	stcne	0, cr0, [r9, #-0]
   11418:	0200003f 	andeq	r0, r0, #63	; 0x3f
   1141c:	03720183 	cmneq	r2, #-1073741792	; 0xc0000020
   11420:	02030000 	andeq	r0, r3, #0
   11424:	0ca70201 	sfmeq	f0, 4, [r7], #4
   11428:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
   1142c:	02000041 	andeq	r0, r0, #65	; 0x41
   11430:	037201f0 	cmneq	r2, #240, 2	; 0x3c
   11434:	1c030000 	stcne	0, cr0, [r3], {-0}
   11438:	0000367a 	andeq	r3, r0, sl, ror r6
   1143c:	9c024302 	stcls	3, cr4, [r2], {2}
   11440:	16000049 	strne	r0, [r0], -r9, asr #32
   11444:	01000000 	mrseq	r0, (UNDEF: 0)
   11448:	03651d9c 	cmneq	r5, #156, 26	; 0x2700
   1144c:	499e0000 	ldmibmi	lr, {}	; <UNPREDICTABLE>
   11450:	00040000 	andeq	r0, r4, r0
   11454:	e2010000 	and	r0, r1, #0
   11458:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
   1145c:	0049a215 	subeq	sl, r9, r5, lsl r2
   11460:	0001b200 	andeq	fp, r1, r0, lsl #4
   11464:	791e0000 	ldmdbvc	lr, {}	; <UNPREDICTABLE>
   11468:	a6000003 	strge	r0, [r0], -r3
   1146c:	04000049 	streq	r0, [r0], #-73	; 0xffffffb7
   11470:	01000000 	mrseq	r0, (UNDEF: 0)
   11474:	49aa15e3 	stmibmi	sl!, {r0, r1, r5, r6, r7, r8, sl, ip}
   11478:	02e80000 	rsceq	r0, r8, #0
   1147c:	00000000 	andeq	r0, r0, r0
   11480:	0005a700 	andeq	sl, r5, r0, lsl #14
   11484:	60000400 	andvs	r0, r0, r0, lsl #8
   11488:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
   1148c:	002a4501 	eoreq	r4, sl, r1, lsl #10
   11490:	42700100 	rsbsmi	r0, r0, #0, 2
   11494:	2b0c0000 	blcs	31149c <__ccfg+0x2f14f4>
   11498:	13e80000 	mvnne	r0, #0
   1149c:	00000000 	andeq	r0, r0, r0
   114a0:	8d220000 	stchi	0, cr0, [r2, #-0]
   114a4:	01020000 	mrseq	r0, (UNDEF: 2)
   114a8:	000c5d06 	andeq	r5, ip, r6, lsl #26
   114ac:	2a200300 	bcs	8120b4 <__ccfg+0x7f210c>
   114b0:	1d030000 	stcne	0, cr0, [r3, #-0]
   114b4:	00000037 	andeq	r0, r0, r7, lsr r0
   114b8:	5b080102 	blpl	2118c8 <__ccfg+0x1f1920>
   114bc:	0200000c 	andeq	r0, r0, #12
   114c0:	0a6b0502 	beq	1ad28d0 <__ccfg+0x1ab2928>
   114c4:	16030000 	strne	r0, [r3], -r0
   114c8:	0300002e 	movweq	r0, #46	; 0x2e
   114cc:	0000502b 	andeq	r5, r0, fp, lsr #32
   114d0:	07020200 	streq	r0, [r2, -r0, lsl #4]
   114d4:	00000d6c 	andeq	r0, r0, ip, ror #26
   114d8:	fd050402 	stc2	4, cr0, [r5, #-8]
   114dc:	03000007 	movweq	r0, #7
   114e0:	000029b8 			; <UNDEFINED> instruction: 0x000029b8
   114e4:	00694103 	rsbeq	r4, r9, r3, lsl #2
   114e8:	04020000 	streq	r0, [r2], #-0
   114ec:	00042607 	andeq	r2, r4, r7, lsl #12
   114f0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   114f4:	000007f8 	strdeq	r0, [r0], -r8
   114f8:	21070802 	tstcs	r7, r2, lsl #16
   114fc:	04000004 	streq	r0, [r0], #-4
   11500:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11504:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   11508:	00042b07 	andeq	r2, r4, r7, lsl #22
   1150c:	2a220300 	bcs	892114 <__ccfg+0x87216c>
   11510:	14040000 	strne	r0, [r4], #-0
   11514:	0000002c 	andeq	r0, r0, ip, lsr #32
   11518:	002e1803 	eoreq	r1, lr, r3, lsl #16
   1151c:	451a0400 	ldrmi	r0, [sl, #-1024]	; 0xfffffc00
   11520:	03000000 	movweq	r0, #0
   11524:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
   11528:	005e2004 	subseq	r2, lr, r4
   1152c:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
   11530:	01000041 	tsteq	r0, r1, asr #32
   11534:	00e60389 	rsceq	r0, r6, r9, lsl #7
   11538:	cb060000 	blgt	191540 <__ccfg+0x171598>
   1153c:	01000041 	tsteq	r0, r1, asr #32
   11540:	0000a289 	andeq	sl, r0, r9, lsl #5
   11544:	423c0600 	eorsmi	r0, ip, #0, 12
   11548:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
   1154c:	000000a2 	andeq	r0, r0, r2, lsr #1
   11550:	00429706 	subeq	r9, r2, r6, lsl #14
   11554:	a2890100 	addge	r0, r9, #0, 2
   11558:	07000000 	streq	r0, [r0, -r0]
   1155c:	000029c3 	andeq	r2, r0, r3, asr #19
   11560:	00e68c01 	rsceq	r8, r6, r1, lsl #24
   11564:	02000000 	andeq	r0, r0, #0
   11568:	0ca70201 	sfmeq	f0, 4, [r7], #4
   1156c:	4a080000 	bmi	211574 <__ccfg+0x1f15cc>
   11570:	01000042 	tsteq	r0, r2, asr #32
   11574:	0000a2a9 	andeq	sl, r0, r9, lsr #5
   11578:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
   1157c:	cb060000 	blgt	191584 <__ccfg+0x1715dc>
   11580:	01000041 	tsteq	r0, r1, asr #32
   11584:	0000a2a9 	andeq	sl, r0, r9, lsr #5
   11588:	42970600 	addsmi	r0, r7, #0, 12
   1158c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
   11590:	000000a2 	andeq	r0, r0, r2, lsr #1
   11594:	0041e407 	subeq	lr, r1, r7, lsl #8
   11598:	a2ab0100 	adcge	r0, fp, #0, 2
   1159c:	07000000 	streq	r0, [r0, -r0]
   115a0:	000029c3 	andeq	r2, r0, r3, asr #19
   115a4:	00e6ad01 	rsceq	sl, r6, r1, lsl #26
   115a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   115ac:	000000ad 	andeq	r0, r0, sp, lsr #1
   115b0:	000049b4 			; <UNDEFINED> instruction: 0x000049b4
   115b4:	00000028 	andeq	r0, r0, r8, lsr #32
   115b8:	01719c01 	cmneq	r1, r1, lsl #24
   115bc:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
   115c0:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
   115c4:	0a00004f 	beq	11708 <__exidx_end+0xb988>
   115c8:	000000c4 	andeq	r0, r0, r4, asr #1
   115cc:	00004f7e 	andeq	r4, r0, lr, ror pc
   115d0:	0000da0b 	andeq	sp, r0, fp, lsl #20
   115d4:	004fc300 	subeq	ip, pc, r0, lsl #6
   115d8:	00cf0c00 	sbceq	r0, pc, r0, lsl #24
   115dc:	0d040000 	stceq	0, cr0, [r4, #-0]
   115e0:	000049be 			; <UNDEFINED> instruction: 0x000049be
   115e4:	00000594 	muleq	r0, r4, r5
   115e8:	0049d60e 	subeq	sp, r9, lr, lsl #12
   115ec:	00059f00 	andeq	r9, r5, r0, lsl #30
   115f0:	940f0000 	strls	r0, [pc], #-0	; 115f8 <__exidx_end+0xb878>
   115f4:	01000038 	tsteq	r0, r8, lsr r0
   115f8:	49dc01ca 	ldmibmi	ip, {r1, r3, r6, r7, r8}^
   115fc:	00080000 	andeq	r0, r8, r0
   11600:	9c010000 	stcls	0, cr0, [r1], {-0}
   11604:	000001d1 	ldrdeq	r0, [r0], -r1
   11608:	0011c010 	andseq	ip, r1, r0, lsl r0
   1160c:	a2420200 	subge	r0, r2, #0, 4
   11610:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
   11614:	1000004f 	andne	r0, r0, pc, asr #32
   11618:	000041ab 	andeq	r4, r0, fp, lsr #3
   1161c:	00a24202 	adceq	r4, r2, r2, lsl #4
   11620:	500a0000 	andpl	r0, sl, r0
   11624:	42100000 	andsmi	r0, r0, #0
   11628:	02000042 	andeq	r0, r0, #66	; 0x42
   1162c:	0000a243 	andeq	sl, r0, r3, asr #4
   11630:	00502b00 	subseq	r2, r0, r0, lsl #22
   11634:	49e41100 	stmibmi	r4!, {r8, ip}^
   11638:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
   1163c:	01120000 	tsteq	r2, r0
   11640:	01f30351 	mvnseq	r0, r1, asr r3
   11644:	50011252 	andpl	r1, r1, r2, asr r2
   11648:	5001f307 	andpl	pc, r1, r7, lsl #6
   1164c:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
   11650:	5c0f0000 	stcpl	0, cr0, [pc], {-0}
   11654:	01000042 	tsteq	r0, r2, asr #32
   11658:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1165c:	00220000 	eoreq	r0, r2, r0
   11660:	9c010000 	stcls	0, cr0, [r1], {-0}
   11664:	000002ea 	andeq	r0, r0, sl, ror #5
   11668:	0011c010 	andseq	ip, r1, r0, lsl r0
   1166c:	a2570200 	subsge	r0, r7, #0, 4
   11670:	4c000000 	stcmi	0, cr0, [r0], {-0}
   11674:	10000050 	andne	r0, r0, r0, asr r0
   11678:	000041ab 	andeq	r4, r0, fp, lsr #3
   1167c:	00a25702 	adceq	r5, r2, r2, lsl #14
   11680:	506d0000 	rsbpl	r0, sp, r0
   11684:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
   11688:	02000022 	andeq	r0, r0, #34	; 0x22
   1168c:	0000a258 	andeq	sl, r0, r8, asr r2
   11690:	00508e00 	subseq	r8, r0, r0, lsl #28
   11694:	42051000 	andmi	r1, r5, #0
   11698:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
   1169c:	000000a2 	andeq	r0, r0, r2, lsr #1
   116a0:	000050d9 	ldrdeq	r5, [r0], -r9
   116a4:	00428b13 	subeq	r8, r2, r3, lsl fp
   116a8:	a25a0200 	subsge	r0, sl, #0, 4
   116ac:	fa000000 	blx	116b4 <__exidx_end+0xb934>
   116b0:	13000050 	movwne	r0, #80	; 0x50
   116b4:	00004210 	andeq	r4, r0, r0, lsl r2
   116b8:	00a25b02 	adceq	r5, r2, r2, lsl #22
   116bc:	518e0000 	orrpl	r0, lr, r0
   116c0:	00110000 	andseq	r0, r1, r0
   116c4:	2a000000 	bcs	116cc <__exidx_end+0xb94c>
   116c8:	12000001 	andne	r0, r0, #1
   116cc:	f3455101 	vrhadd.u8	d21, d5, d1
   116d0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   116d4:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
   116d8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   116dc:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   116e0:	40131600 	andsmi	r1, r3, r0, lsl #12
   116e4:	01f33024 	mvnseq	r3, r4, lsr #32
   116e8:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
   116ec:	01f35201 	mvnseq	r5, r1, lsl #4
   116f0:	30254052 	eorcc	r4, r5, r2, asr r0
   116f4:	0001282e 	andeq	r2, r1, lr, lsr #16
   116f8:	01f31316 	mvnseq	r1, r6, lsl r3
   116fc:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
   11700:	2e305301 	cdpcs	3, 3, cr5, cr0, cr1, {0}
   11704:	16000128 	strne	r0, [r0], -r8, lsr #2
   11708:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
   1170c:	01282930 			; <UNDEFINED> instruction: 0x01282930
   11710:	21131600 	tstcs	r3, r0, lsl #12
   11714:	51500112 	cmppl	r0, r2, lsl r1
   11718:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   1171c:	5001f324 	andpl	pc, r1, r4, lsr #6
   11720:	04802322 	streq	r2, [r0], #802	; 0x322
   11724:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   11728:	5001f324 	andpl	pc, r1, r4, lsr #6
   1172c:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
   11730:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
   11734:	16000128 	strne	r0, [r0], -r8, lsr #2
   11738:	04842313 	streq	r2, [r4], #787	; 0x313
   1173c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   11740:	5001f324 	andpl	pc, r1, r4, lsr #6
   11744:	04802322 	streq	r2, [r0], #802	; 0x322
   11748:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   1174c:	5001f324 	andpl	pc, r1, r4, lsr #6
   11750:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
   11754:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
   11758:	16000128 	strne	r0, [r0], -r8, lsr #2
   1175c:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
   11760:	2e302540 	cfneg32cs	mvfx2, mvfx0
   11764:	16000128 	strne	r0, [r0], -r8, lsr #2
   11768:	0f000013 	svceq	0x00000013
   1176c:	00004223 	andeq	r4, r0, r3, lsr #4
   11770:	0001f601 	andeq	pc, r1, r1, lsl #12
   11774:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
   11778:	01000000 	mrseq	r0, (UNDEF: 0)
   1177c:	00041f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
   11780:	11c01000 	bicne	r1, r0, r0
   11784:	83020000 	movwhi	r0, #8192	; 0x2000
   11788:	000000a2 	andeq	r0, r0, r2, lsr #1
   1178c:	000051da 	ldrdeq	r5, [r0], -sl
   11790:	0041ab10 	subeq	sl, r1, r0, lsl fp
   11794:	a2830200 	addge	r0, r3, #0, 4
   11798:	fb000000 	blx	117a2 <__exidx_end+0xba22>
   1179c:	10000051 	andne	r0, r0, r1, asr r0
   117a0:	00002249 	andeq	r2, r0, r9, asr #4
   117a4:	00a28402 	adceq	r8, r2, r2, lsl #8
   117a8:	521c0000 	andspl	r0, ip, #0
   117ac:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
   117b0:	02000042 	andeq	r0, r0, #66	; 0x42
   117b4:	0000a284 	andeq	sl, r0, r4, lsl #5
   117b8:	00526d00 	subseq	r6, r2, r0, lsl #26
   117bc:	42101000 	andsmi	r1, r0, #0
   117c0:	85020000 	strhi	r0, [r2, #-0]
   117c4:	00000097 	muleq	r0, r7, r0
   117c8:	000052be 			; <UNDEFINED> instruction: 0x000052be
   117cc:	00428b13 	subeq	r8, r2, r3, lsl fp
   117d0:	a2870200 	addge	r0, r7, #0, 4
   117d4:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
   117d8:	13000052 	movwne	r0, #82	; 0x52
   117dc:	00004205 	andeq	r4, r0, r5, lsl #4
   117e0:	00a28802 	adceq	r8, r2, r2, lsl #16
   117e4:	53840000 	orrpl	r0, r4, #0
   117e8:	00110000 	andseq	r0, r1, r0
   117ec:	2a000000 	bcs	117f4 <__exidx_end+0xba74>
   117f0:	12000001 	andne	r0, r0, #1
   117f4:	f3405101 	vrhadd.u8	d21, d0, d1
   117f8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   117fc:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
   11800:	4b405301 	blmi	102640c <__ccfg+0x1006464>
   11804:	0f0c2224 	svceq	0x000c2224
   11808:	2b800000 	blcs	fe011810 <_estack+0xde00c810>
   1180c:	16000128 	strne	r0, [r0], -r8, lsr #2
   11810:	7d244013 	stcvc	0, cr4, [r4, #-76]!	; 0xffffffb4
   11814:	0a029400 	beq	b681c <__ccfg+0x96874>
   11818:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
   1181c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
   11820:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
   11824:	4b405301 	blmi	1026430 <__ccfg+0x1006488>
   11828:	0f0c2224 	svceq	0x000c2224
   1182c:	2b800000 	blcs	fe011834 <_estack+0xde00c834>
   11830:	16000128 	strne	r0, [r0], -r8, lsr #2
   11834:	12212413 	eorne	r2, r1, #318767104	; 0x13000000
   11838:	f3635001 	vhadd.u32	d21, d3, d1
   1183c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   11840:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11844:	f3048023 	vhadd.u8	d8, d4, d19
   11848:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   1184c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11850:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11854:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   11858:	8000000f 	andhi	r0, r0, pc
   1185c:	0001282c 	andeq	r2, r1, ip, lsr #16
   11860:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
   11864:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   11868:	01f32431 	mvnseq	r2, r1, lsr r4
   1186c:	80232250 	eorhi	r2, r3, r0, asr r2
   11870:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   11874:	01f32431 	mvnseq	r2, r1, lsr r4
   11878:	01f32250 	mvnseq	r2, r0, asr r2
   1187c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   11880:	000f0c22 	andeq	r0, pc, r2, lsr #24
   11884:	282c8000 	stmdacs	ip!, {pc}
   11888:	13160001 	tstne	r6, #1
   1188c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11890:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   11894:	8000000f 	andhi	r0, r0, pc
   11898:	0001282b 	andeq	r2, r1, fp, lsr #16
   1189c:	00001316 	andeq	r1, r0, r6, lsl r3
   118a0:	0041d114 	subeq	sp, r1, r4, lsl r1
   118a4:	02080100 	andeq	r0, r8, #0, 2
   118a8:	00000097 	muleq	r0, r7, r0
   118ac:	00000000 	andeq	r0, r0, r0
   118b0:	00000034 	andeq	r0, r0, r4, lsr r0
   118b4:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
   118b8:	c0100000 	andsgt	r0, r0, r0
   118bc:	02000011 	andeq	r0, r0, #17
   118c0:	0000a2af 	andeq	sl, r0, pc, lsr #5
   118c4:	0053e400 	subseq	lr, r3, r0, lsl #8
   118c8:	41ab1000 			; <UNDEFINED> instruction: 0x41ab1000
   118cc:	af020000 	svcge	0x00020000
   118d0:	000000a2 	andeq	r0, r0, r2, lsr #1
   118d4:	00005405 	andeq	r5, r0, r5, lsl #8
   118d8:	00224910 	eoreq	r4, r2, r0, lsl r9
   118dc:	a2af0200 	adcge	r0, pc, #0, 4
   118e0:	26000000 	strcs	r0, [r0], -r0
   118e4:	13000054 	movwne	r0, #84	; 0x54
   118e8:	0000428b 	andeq	r4, r0, fp, lsl #5
   118ec:	00a2b102 	adceq	fp, r2, r2, lsl #2
   118f0:	54630000 	strbtpl	r0, [r3], #-0
   118f4:	fc130000 	ldc2	0, cr0, [r3], {-0}
   118f8:	02000041 	andeq	r0, r0, #65	; 0x41
   118fc:	000097b2 			; <UNDEFINED> instruction: 0x000097b2
   11900:	00549d00 	subseq	r9, r4, r0, lsl #26
   11904:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   11908:	00000000 	andeq	r0, r0, r0
   1190c:	001a0000 	andseq	r0, sl, r0
   11910:	ca020000 	bgt	91918 <__ccfg+0x71970>
   11914:	0001080c 	andeq	r0, r1, ip, lsl #16
   11918:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   1191c:	b5000000 	strlt	r0, [r0, #-0]
   11920:	16000054 			; <UNDEFINED> instruction: 0x16000054
   11924:	00000000 	andeq	r0, r0, r0
   11928:	0000001a 	andeq	r0, r0, sl, lsl r0
   1192c:	0001130b 	andeq	r1, r1, fp, lsl #6
   11930:	0054ef00 	subseq	lr, r4, r0, lsl #30
   11934:	011e0b00 	tsteq	lr, r0, lsl #22
   11938:	55080000 	strpl	r0, [r8, #-0]
   1193c:	000d0000 	andeq	r0, sp, r0
   11940:	94000000 	strls	r0, [r0], #-0
   11944:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   11948:	00000000 	andeq	r0, r0, r0
   1194c:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   11950:	14000000 	strne	r0, [r0], #-0
   11954:	000041b3 			; <UNDEFINED> instruction: 0x000041b3
   11958:	97021d01 	strls	r1, [r2, -r1, lsl #26]
   1195c:	00000000 	andeq	r0, r0, r0
   11960:	40000000 	andmi	r0, r0, r0
   11964:	01000000 	mrseq	r0, (UNDEF: 0)
   11968:	0005949c 	muleq	r5, ip, r4
   1196c:	11c01000 	bicne	r1, r0, r0
   11970:	dd020000 	stcle	0, cr0, [r2, #-0]
   11974:	000000a2 	andeq	r0, r0, r2, lsr #1
   11978:	0000551f 	andeq	r5, r0, pc, lsl r5
   1197c:	0041ab10 	subeq	sl, r1, r0, lsl fp
   11980:	a2dd0200 	sbcsge	r0, sp, #0, 4
   11984:	40000000 	andmi	r0, r0, r0
   11988:	10000055 	andne	r0, r0, r5, asr r0
   1198c:	00002249 	andeq	r2, r0, r9, asr #4
   11990:	00a2de02 	adceq	sp, r2, r2, lsl #28
   11994:	55610000 	strbpl	r0, [r1, #-0]!
   11998:	19100000 	ldmdbne	r0, {}	; <UNPREDICTABLE>
   1199c:	02000042 	andeq	r0, r0, #66	; 0x42
   119a0:	0000a2de 	ldrdeq	sl, [r0], -lr
   119a4:	0055a400 	subseq	sl, r5, r0, lsl #8
   119a8:	428b1300 	addmi	r1, fp, #0, 6
   119ac:	e0020000 	and	r0, r2, r0
   119b0:	000000a2 	andeq	r0, r0, r2, lsr #1
   119b4:	000055e7 	andeq	r5, r0, r7, ror #11
   119b8:	0041fc13 	subeq	pc, r1, r3, lsl ip	; <UNPREDICTABLE>
   119bc:	97e10200 	strbls	r0, [r1, r0, lsl #4]!
   119c0:	42000000 	andmi	r0, r0, #0
   119c4:	15000056 	strne	r0, [r0, #-86]	; 0xffffffaa
   119c8:	000000ed 	andeq	r0, r0, sp, ror #1
   119cc:	00000000 	andeq	r0, r0, r0
   119d0:	0000001a 	andeq	r0, r0, sl, lsl r0
   119d4:	080cfa02 	stmdaeq	ip, {r1, r9, fp, ip, sp, lr, pc}
   119d8:	02000001 	andeq	r0, r0, #1
   119dc:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   119e0:	00566500 	subseq	r6, r6, r0, lsl #10
   119e4:	00001600 	andeq	r1, r0, r0, lsl #12
   119e8:	001a0000 	andseq	r0, sl, r0
   119ec:	130b0000 	movwne	r0, #45056	; 0xb000
   119f0:	a5000001 	strge	r0, [r0, #-1]
   119f4:	0b000056 	bleq	11b54 <__exidx_end+0xbdd4>
   119f8:	0000011e 	andeq	r0, r0, lr, lsl r1
   119fc:	000056be 			; <UNDEFINED> instruction: 0x000056be
   11a00:	0000000d 	andeq	r0, r0, sp
   11a04:	00059400 	andeq	r9, r5, r0, lsl #8
   11a08:	00000d00 	andeq	r0, r0, r0, lsl #26
   11a0c:	059f0000 	ldreq	r0, [pc]	; 11a14 <__exidx_end+0xbc94>
   11a10:	00000000 	andeq	r0, r0, r0
   11a14:	29f51700 	ldmibcs	r5!, {r8, r9, sl, ip}^
   11a18:	6a050000 	bvs	151a20 <__ccfg+0x131a78>
   11a1c:	000000a2 	andeq	r0, r0, r2, lsr #1
   11a20:	002a0417 	eoreq	r0, sl, r7, lsl r4
   11a24:	a2840500 	addge	r0, r4, #0, 10
   11a28:	00000000 	andeq	r0, r0, r0
   11a2c:	00000f31 	andeq	r0, r0, r1, lsr pc
   11a30:	41b40004 			; <UNDEFINED> instruction: 0x41b40004
   11a34:	01040000 	mrseq	r0, (UNDEF: 4)
   11a38:	0000455f 	andeq	r4, r0, pc, asr r5
   11a3c:	0044780c 	subeq	r7, r4, ip, lsl #16
   11a40:	0045fa00 	subeq	pc, r5, r0, lsl #20
   11a44:	0049e400 	subeq	lr, r9, r0, lsl #8
   11a48:	0000aa00 	andeq	sl, r0, r0, lsl #20
   11a4c:	008f4400 	addeq	r4, pc, r0, lsl #8
   11a50:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   11a54:	00746e69 	rsbseq	r6, r4, r9, ror #28
   11a58:	00331a03 	eorseq	r1, r3, r3, lsl #20
   11a5c:	17d80200 	ldrbne	r0, [r8, r0, lsl #4]
   11a60:	00000038 	andeq	r0, r0, r8, lsr r0
   11a64:	2b070404 	blcs	1d2a7c <__ccfg+0x1b2ad4>
   11a68:	05000004 	streq	r0, [r0, #-4]
   11a6c:	0000440c 	andeq	r4, r0, ip, lsl #8
   11a70:	18014802 	stmdane	r1, {r1, fp, lr}
   11a74:	00000038 	andeq	r0, r0, r8, lsr r0
   11a78:	f8050804 			; <UNDEFINED> instruction: 0xf8050804
   11a7c:	04000007 	streq	r0, [r0], #-7
   11a80:	44300408 	ldrtmi	r0, [r0], #-1032	; 0xfffffbf8
   11a84:	d5050000 	strle	r0, [r5, #-0]
   11a88:	0200000b 	andeq	r0, r0, #11
   11a8c:	38170165 	ldmdacc	r7, {r0, r2, r5, r6, r8}
   11a90:	04000000 	streq	r0, [r0], #-0
   11a94:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
   11a98:	01040000 	mrseq	r0, (UNDEF: 4)
   11a9c:	000c5b08 	andeq	r5, ip, r8, lsl #22
   11aa0:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
   11aa4:	00000a6b 	andeq	r0, r0, fp, ror #20
   11aa8:	6c070204 	sfmvs	f0, 4, [r7], {4}
   11aac:	0400000d 	streq	r0, [r0], #-13
   11ab0:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
   11ab4:	83060000 	movwhi	r0, #24576	; 0x6000
   11ab8:	04000000 	streq	r0, [r0], #-0
   11abc:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
   11ac0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11ac4:	00042107 	andeq	r2, r4, r7, lsl #2
   11ac8:	0e4f0300 	cdpeq	3, 4, cr0, cr15, cr0, {0}
   11acc:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
   11ad0:	0000830e 	andeq	r8, r0, lr, lsl #6
   11ad4:	02ff0300 	rscseq	r0, pc, #0, 6
   11ad8:	74030000 	strvc	r0, [r3], #-0
   11adc:	0000830e 	andeq	r8, r0, lr, lsl #6
   11ae0:	03040700 	movweq	r0, #18176	; 0x4700
   11ae4:	00d703a5 	sbcseq	r0, r7, r5, lsr #7
   11ae8:	6c080000 	stcvs	0, cr0, [r8], {-0}
   11aec:	03000007 	movweq	r0, #7
   11af0:	005a0ca7 	subseq	r0, sl, r7, lsr #25
   11af4:	b4080000 	strlt	r0, [r8], #-0
   11af8:	0300000a 	movweq	r0, #10
   11afc:	00d713a8 	sbcseq	r1, r7, r8, lsr #7
   11b00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11b04:	0000006e 	andeq	r0, r0, lr, rrx
   11b08:	000000e7 	andeq	r0, r0, r7, ror #1
   11b0c:	0000380a 	andeq	r3, r0, sl, lsl #16
   11b10:	0b000300 	bleq	12718 <__exidx_end+0xc998>
   11b14:	09a20308 	stmibeq	r2!, {r3, r8, r9}
   11b18:	0000010b 	andeq	r0, r0, fp, lsl #2
   11b1c:	00038e0c 	andeq	r8, r3, ip, lsl #28
   11b20:	07a40300 	streq	r0, [r4, r0, lsl #6]!
   11b24:	00000025 	andeq	r0, r0, r5, lsr #32
   11b28:	06010c00 	streq	r0, [r1], -r0, lsl #24
   11b2c:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
   11b30:	0000b505 	andeq	fp, r0, r5, lsl #10
   11b34:	03000400 	movweq	r0, #1024	; 0x400
   11b38:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
   11b3c:	e703aa03 	str	sl, [r3, -r3, lsl #20]
   11b40:	0d000000 	stceq	0, cr0, [r0, #-0]
   11b44:	01170e04 	tsteq	r7, r4, lsl #28
   11b48:	42030000 	andmi	r0, r3, #0
   11b4c:	04000008 	streq	r0, [r0], #-8
   11b50:	008f1916 	addeq	r1, pc, r6, lsl r9	; <UNPREDICTABLE>
   11b54:	53030000 	movwpl	r0, #12288	; 0x3000
   11b58:	05000002 	streq	r0, [r0, #-2]
   11b5c:	00250d0c 	eoreq	r0, r5, ip, lsl #26
   11b60:	2a030000 	bcs	d1b68 <__ccfg+0xb1bc0>
   11b64:	04000007 	streq	r0, [r0], #-7
   11b68:	012a1b23 			; <UNDEFINED> instruction: 0x012a1b23
   11b6c:	320f0000 	andcc	r0, pc, #0
   11b70:	18000003 	stmdane	r0, {r0, r1}
   11b74:	9c083404 	cfstrsls	mvf3, [r8], {4}
   11b78:	0c000001 	stceq	0, cr0, [r0], {1}
   11b7c:	00000eca 	andeq	r0, r0, sl, asr #29
   11b80:	9c133604 	ldcls	6, cr3, [r3], {4}
   11b84:	00000001 	andeq	r0, r0, r1
   11b88:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
   11b8c:	25073704 	strcs	r3, [r7, #-1796]	; 0xfffff8fc
   11b90:	04000000 	streq	r0, [r0], #-0
   11b94:	000b620c 	andeq	r6, fp, ip, lsl #4
   11b98:	0b370400 	bleq	dd2ba0 <__ccfg+0xdb2bf8>
   11b9c:	00000025 	andeq	r0, r0, r5, lsr #32
   11ba0:	43fb0c08 	mvnsmi	r0, #8, 24	; 0x800
   11ba4:	37040000 	strcc	r0, [r4, -r0]
   11ba8:	00002514 	andeq	r2, r0, r4, lsl r5
   11bac:	550c0c00 	strpl	r0, [ip, #-3072]	; 0xfffff400
   11bb0:	04000004 	streq	r0, [r0], #-4
   11bb4:	00251b37 	eoreq	r1, r5, r7, lsr fp
   11bb8:	10100000 	andsne	r0, r0, r0
   11bbc:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   11bc0:	01a20b38 			; <UNDEFINED> instruction: 0x01a20b38
   11bc4:	00140000 	andseq	r0, r4, r0
   11bc8:	01420411 	cmpeq	r2, r1, lsl r4
   11bcc:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
   11bd0:	b2000001 	andlt	r0, r0, #1
   11bd4:	0a000001 	beq	11be0 <__exidx_end+0xbe60>
   11bd8:	00000038 	andeq	r0, r0, r8, lsr r0
   11bdc:	7d0f0000 	stcvc	0, cr0, [pc, #-0]	; 11be4 <__exidx_end+0xbe64>
   11be0:	2400000b 	strcs	r0, [r0], #-11
   11be4:	35083c04 	strcc	r3, [r8, #-3076]	; 0xfffff3fc
   11be8:	0c000002 	stceq	0, cr0, [r0], {2}
   11bec:	0000056c 	andeq	r0, r0, ip, ror #10
   11bf0:	25093e04 	strcs	r3, [r9, #-3588]	; 0xfffff1fc
   11bf4:	00000000 	andeq	r0, r0, r0
   11bf8:	0003b70c 	andeq	fp, r3, ip, lsl #14
   11bfc:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   11c00:	00000025 	andeq	r0, r0, r5, lsr #32
   11c04:	03580c04 	cmpeq	r8, #4, 24	; 0x400
   11c08:	40040000 	andmi	r0, r4, r0
   11c0c:	00002509 	andeq	r2, r0, r9, lsl #10
   11c10:	740c0800 	strvc	r0, [ip], #-2048	; 0xfffff800
   11c14:	04000006 	streq	r0, [r0], #-6
   11c18:	00250941 	eoreq	r0, r5, r1, asr #18
   11c1c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   11c20:	00000954 	andeq	r0, r0, r4, asr r9
   11c24:	25094204 	strcs	r4, [r9, #-516]	; 0xfffffdfc
   11c28:	10000000 	andne	r0, r0, r0
   11c2c:	000ace0c 	andeq	ip, sl, ip, lsl #28
   11c30:	09430400 	stmdbeq	r3, {sl}^
   11c34:	00000025 	andeq	r0, r0, r5, lsr #32
   11c38:	03460c14 	movteq	r0, #27668	; 0x6c14
   11c3c:	44040000 	strmi	r0, [r4], #-0
   11c40:	00002509 	andeq	r2, r0, r9, lsl #10
   11c44:	750c1800 	strvc	r1, [ip, #-2048]	; 0xfffff800
   11c48:	04000005 	streq	r0, [r0], #-5
   11c4c:	00250945 	eoreq	r0, r5, r5, asr #18
   11c50:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   11c54:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11c58:	25094604 	strcs	r4, [r9, #-1540]	; 0xfffff9fc
   11c5c:	20000000 	andcs	r0, r0, r0
   11c60:	003b1200 	eorseq	r1, fp, r0, lsl #4
   11c64:	01080000 	mrseq	r0, (UNDEF: 8)
   11c68:	7a084f04 	bvc	225880 <__ccfg+0x2058d8>
   11c6c:	0c000002 	stceq	0, cr0, [r0], {2}
   11c70:	00000d33 	andeq	r0, r0, r3, lsr sp
   11c74:	7a0a5004 	bvc	2a5c8c <__ccfg+0x285ce4>
   11c78:	00000002 	andeq	r0, r0, r2
   11c7c:	000c170c 	andeq	r1, ip, ip, lsl #14
   11c80:	09510400 	ldmdbeq	r1, {sl}^
   11c84:	0000027a 	andeq	r0, r0, sl, ror r2
   11c88:	0dcc1380 	stcleq	3, cr1, [ip, #512]	; 0x200
   11c8c:	53040000 	movwpl	r0, #16384	; 0x4000
   11c90:	00011e0a 	andeq	r1, r1, sl, lsl #28
   11c94:	13010000 	movwne	r0, #4096	; 0x1000
   11c98:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
   11c9c:	1e0a5604 	cfmadd32ne	mvax0, mvfx5, mvfx10, mvfx4
   11ca0:	04000001 	streq	r0, [r0], #-1
   11ca4:	17090001 	strne	r0, [r9, -r1]
   11ca8:	8a000001 	bhi	11cb4 <__exidx_end+0xbf34>
   11cac:	0a000002 	beq	11cbc <__exidx_end+0xbf3c>
   11cb0:	00000038 	andeq	r0, r0, r8, lsr r0
   11cb4:	1612001f 			; <UNDEFINED> instruction: 0x1612001f
   11cb8:	9000000a 	andls	r0, r0, sl
   11cbc:	08620401 	stmdaeq	r2!, {r0, sl}^
   11cc0:	000002cd 	andeq	r0, r0, sp, asr #5
   11cc4:	000eca0c 	andeq	ip, lr, ip, lsl #20
   11cc8:	12630400 	rsbne	r0, r3, #0, 8
   11ccc:	000002cd 	andeq	r0, r0, sp, asr #5
   11cd0:	05840c00 	streq	r0, [r4, #3072]	; 0xc00
   11cd4:	64040000 	strvs	r0, [r4], #-0
   11cd8:	00002506 	andeq	r2, r0, r6, lsl #10
   11cdc:	070c0400 	streq	r0, [ip, -r0, lsl #8]
   11ce0:	04000003 	streq	r0, [r0], #-3
   11ce4:	02d30966 	sbcseq	r0, r3, #1671168	; 0x198000
   11ce8:	0c080000 	stceq	0, cr0, [r8], {-0}
   11cec:	0000003b 	andeq	r0, r0, fp, lsr r0
   11cf0:	351e6704 	ldrcc	r6, [lr, #-1796]	; 0xfffff8fc
   11cf4:	88000002 	stmdahi	r0, {r1}
   11cf8:	8a041100 	bhi	116100 <__ccfg+0xf6158>
   11cfc:	09000002 	stmdbeq	r0, {r1}
   11d00:	000002e3 	andeq	r0, r0, r3, ror #5
   11d04:	000002e3 	andeq	r0, r0, r3, ror #5
   11d08:	0000380a 	andeq	r3, r0, sl, lsl #16
   11d0c:	11001f00 	tstne	r0, r0, lsl #30
   11d10:	0002e904 	andeq	lr, r2, r4, lsl #18
   11d14:	c50f1400 	strgt	r1, [pc, #-1024]	; 1191c <__exidx_end+0xbb9c>
   11d18:	0800000c 	stmdaeq	r0, {r2, r3}
   11d1c:	12087a04 	andne	r7, r8, #4, 20	; 0x4000
   11d20:	0c000003 	stceq	0, cr0, [r0], {3}
   11d24:	00000cd7 	ldrdeq	r0, [r0], -r7
   11d28:	12117b04 	andsne	r7, r1, #4, 22	; 0x1000
   11d2c:	00000003 	andeq	r0, r0, r3
   11d30:	001da60c 	andseq	sl, sp, ip, lsl #12
   11d34:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   11d38:	00000025 	andeq	r0, r0, r5, lsr #32
   11d3c:	04110004 	ldreq	r0, [r1], #-4
   11d40:	0000006e 	andeq	r0, r0, lr, rrx
   11d44:	00044d0f 	andeq	r4, r4, pc, lsl #26
   11d48:	ba046800 	blt	12bd50 <__ccfg+0x10bda8>
   11d4c:	00045b08 	andeq	r5, r4, r8, lsl #22
   11d50:	705f1000 	subsvc	r1, pc, r0
   11d54:	12bb0400 	adcsne	r0, fp, #0, 8
   11d58:	00000312 	andeq	r0, r0, r2, lsl r3
   11d5c:	725f1000 	subsvc	r1, pc, #0
   11d60:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   11d64:	00000025 	andeq	r0, r0, r5, lsr #32
   11d68:	775f1004 	ldrbvc	r1, [pc, -r4]
   11d6c:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   11d70:	00000025 	andeq	r0, r0, r5, lsr #32
   11d74:	01c40c08 	biceq	r0, r4, r8, lsl #24
   11d78:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   11d7c:	00007509 	andeq	r7, r0, r9, lsl #10
   11d80:	590c0c00 	stmdbpl	ip, {sl, fp}
   11d84:	04000008 	streq	r0, [r0], #-8
   11d88:	007509bf 	ldrhteq	r0, [r5], #-159	; 0xffffff61
   11d8c:	100e0000 	andne	r0, lr, r0
   11d90:	0066625f 	rsbeq	r6, r6, pc, asr r2
   11d94:	ea11c004 	b	481dac <__ccfg+0x461e04>
   11d98:	10000002 	andne	r0, r0, r2
   11d9c:	0001bb0c 	andeq	fp, r1, ip, lsl #22
   11da0:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   11da4:	00000025 	andeq	r0, r0, r5, lsr #32
   11da8:	030c0c18 	movweq	r0, #52248	; 0xcc18
   11dac:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   11db0:	0001170a 	andeq	r1, r1, sl, lsl #14
   11db4:	350c1c00 	strcc	r1, [ip, #-3072]	; 0xfffff400
   11db8:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   11dbc:	05df1dca 	ldrbeq	r1, [pc, #3530]	; 12b8e <__exidx_end+0xce0e>
   11dc0:	0c200000 	stceq	0, cr0, [r0], #-0
   11dc4:	00001cfc 	strdeq	r1, [r0], -ip
   11dc8:	091dcc04 	ldmdbeq	sp, {r2, sl, fp, lr, pc}
   11dcc:	24000006 	strcs	r0, [r0], #-6
   11dd0:	000eea0c 	andeq	lr, lr, ip, lsl #20
   11dd4:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 11ddc <__exidx_end+0xc05c>
   11dd8:	0000062d 	andeq	r0, r0, sp, lsr #12
   11ddc:	1cea0c28 	stclne	12, cr0, [sl], #160	; 0xa0
   11de0:	d0040000 	andle	r0, r4, r0
   11de4:	00064709 	andeq	r4, r6, r9, lsl #14
   11de8:	5f102c00 	svcpl	0x00102c00
   11dec:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   11df0:	02ea11d3 	rsceq	r1, sl, #-1073741772	; 0xc0000034
   11df4:	10300000 	eorsne	r0, r0, r0
   11df8:	0070755f 	rsbseq	r7, r0, pc, asr r5
   11dfc:	1212d404 	andsne	sp, r2, #4, 8	; 0x4000000
   11e00:	38000003 	stmdacc	r0, {r0, r1}
   11e04:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
   11e08:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   11e0c:	00000025 	andeq	r0, r0, r5, lsr #32
   11e10:	0f210c3c 	svceq	0x00210c3c
   11e14:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   11e18:	00064d11 	andeq	r4, r6, r1, lsl sp
   11e1c:	6a0c4000 	bvs	321e24 <__ccfg+0x301e7c>
   11e20:	0400000e 	streq	r0, [r0], #-14
   11e24:	065d11d9 			; <UNDEFINED> instruction: 0x065d11d9
   11e28:	10430000 	subne	r0, r3, r0
   11e2c:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   11e30:	ea11dc04 	b	488e48 <__ccfg+0x468ea0>
   11e34:	44000002 	strmi	r0, [r0], #-2
   11e38:	000b740c 	andeq	r7, fp, ip, lsl #8
   11e3c:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   11e40:	00000025 	andeq	r0, r0, r5, lsr #32
   11e44:	047c0c4c 	ldrbteq	r0, [ip], #-3148	; 0xfffff3b4
   11e48:	e0040000 	and	r0, r4, r0
   11e4c:	00009d0a 	andeq	r9, r0, sl, lsl #26
   11e50:	590c5000 	stmdbpl	ip, {ip, lr}
   11e54:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   11e58:	047912e3 	ldrbteq	r1, [r9], #-739	; 0xfffffd1d
   11e5c:	0c540000 	mraeq	r0, r4, acc0
   11e60:	00000b9a 	muleq	r0, sl, fp
   11e64:	360ce704 	strcc	lr, [ip], -r4, lsl #14
   11e68:	58000001 	stmdapl	r0, {r0}
   11e6c:	000a1e0c 	andeq	r1, sl, ip, lsl #28
   11e70:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   11e74:	0000010b 	andeq	r0, r0, fp, lsl #2
   11e78:	0e9d0c5c 	mrceq	12, 4, r0, cr13, cr12, {2}
   11e7c:	ea040000 	b	111e84 <__ccfg+0xf1edc>
   11e80:	00002509 	andeq	r2, r0, r9, lsl #10
   11e84:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
   11e88:	00000025 	andeq	r0, r0, r5, lsr #32
   11e8c:	00000479 	andeq	r0, r0, r9, ror r4
   11e90:	00047916 	andeq	r7, r4, r6, lsl r9
   11e94:	01171600 	tsteq	r7, r0, lsl #12
   11e98:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   11e9c:	16000005 	strne	r0, [r0], -r5
   11ea0:	00000025 	andeq	r0, r0, r5, lsr #32
   11ea4:	84041100 	strhi	r1, [r4], #-256	; 0xffffff00
   11ea8:	06000004 	streq	r0, [r0], -r4
   11eac:	00000479 	andeq	r0, r0, r9, ror r4
   11eb0:	000d6517 	andeq	r6, sp, r7, lsl r5
   11eb4:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   11eb8:	cd080265 	sfmgt	f0, 4, [r8, #-404]	; 0xfffffe6c
   11ebc:	18000005 	stmdane	r0, {r0, r2}
   11ec0:	00000904 	andeq	r0, r0, r4, lsl #18
   11ec4:	07026704 	streq	r6, [r2, -r4, lsl #14]
   11ec8:	00000025 	andeq	r0, r0, r5, lsr #32
   11ecc:	07e21800 	strbeq	r1, [r2, r0, lsl #16]!
   11ed0:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11ed4:	06b90b02 	ldrteq	r0, [r9], r2, lsl #22
   11ed8:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
   11edc:	000002f7 	strdeq	r0, [r0], -r7
   11ee0:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   11ee4:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11ee8:	0f101808 	svceq	0x00101808
   11eec:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11ef0:	06b91e02 	ldrteq	r1, [r9], r2, lsl #28
   11ef4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
   11ef8:	0000057f 	andeq	r0, r0, pc, ror r5
   11efc:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   11f00:	00000025 	andeq	r0, r0, r5, lsr #32
   11f04:	04d41810 	ldrbeq	r1, [r4], #2064	; 0x810
   11f08:	6f040000 	svcvs	0x00040000
   11f0c:	08b90802 	ldmeq	r9!, {r1, fp}
   11f10:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
   11f14:	00000e7d 	andeq	r0, r0, sp, ror lr
   11f18:	07027204 	streq	r7, [r2, -r4, lsl #4]
   11f1c:	00000025 	andeq	r0, r0, r5, lsr #32
   11f20:	42a71830 	adcmi	r1, r7, #48, 16	; 0x300000
   11f24:	73040000 	movwvc	r0, #16384	; 0x4000
   11f28:	09501602 	ldmdbeq	r0, {r1, r9, sl, ip}^
   11f2c:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
   11f30:	0000078a 	andeq	r0, r0, sl, lsl #15
   11f34:	07027504 	streq	r7, [r2, -r4, lsl #10]
   11f38:	00000025 	andeq	r0, r0, r5, lsr #32
   11f3c:	08841838 	stmeq	r4, {r3, r4, r5, fp, ip}
   11f40:	77040000 	strvc	r0, [r4, -r0]
   11f44:	09610a02 	stmdbeq	r1!, {r1, r9, fp}^
   11f48:	183c0000 	ldmdane	ip!, {}	; <UNPREDICTABLE>
   11f4c:	00000350 	andeq	r0, r0, r0, asr r3
   11f50:	13027a04 	movwne	r7, #10756	; 0x2a04
   11f54:	0000019c 	muleq	r0, ip, r1
   11f58:	040b1840 	streq	r1, [fp], #-2112	; 0xfffff7c0
   11f5c:	7b040000 	blvc	111f64 <__ccfg+0xf1fbc>
   11f60:	00250702 	eoreq	r0, r5, r2, lsl #14
   11f64:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
   11f68:	00000609 	andeq	r0, r0, r9, lsl #12
   11f6c:	13027c04 	movwne	r7, #11268	; 0x2c04
   11f70:	0000019c 	muleq	r0, ip, r1
   11f74:	081f1848 	ldmdaeq	pc, {r3, r6, fp, ip}	; <UNPREDICTABLE>
   11f78:	7d040000 	stcvc	0, cr0, [r4, #-0]
   11f7c:	09671402 	stmdbeq	r7!, {r1, sl, ip}^
   11f80:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
   11f84:	00000b5a 	andeq	r0, r0, sl, asr fp
   11f88:	07028004 	streq	r8, [r2, -r4]
   11f8c:	00000025 	andeq	r0, r0, r5, lsr #32
   11f90:	0c531850 	mrrceq	8, 5, r1, r3, cr0
   11f94:	81040000 	mrshi	r0, (UNDEF: 4)
   11f98:	05cd0902 	strbeq	r0, [sp, #2306]	; 0x902
   11f9c:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
   11fa0:	00000c6d 	andeq	r0, r0, sp, ror #24
   11fa4:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   11fa8:	00000894 	muleq	r0, r4, r8
   11fac:	0a161958 	beq	598514 <__ccfg+0x57856c>
   11fb0:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   11fb4:	02cd1302 	sbceq	r1, sp, #134217728	; 0x8000000
   11fb8:	01480000 	mrseq	r0, (UNDEF: 72)
   11fbc:	0006ae19 	andeq	sl, r6, r9, lsl lr
   11fc0:	02a90400 	adceq	r0, r9, #0, 8
   11fc4:	00028a12 	andeq	r8, r2, r2, lsl sl
   11fc8:	19014c00 	stmdbne	r1, {sl, fp, lr}
   11fcc:	00000695 	muleq	r0, r5, r6
   11fd0:	0c02ad04 	stceq	13, cr10, [r2], {4}
   11fd4:	00000978 	andeq	r0, r0, r8, ror r9
   11fd8:	e91902dc 	ldmdb	r9, {r2, r3, r4, r6, r7, r9}
   11fdc:	0400000c 	streq	r0, [r0], #-12
   11fe0:	7a1002b2 	bvc	412ab0 <__ccfg+0x3f2b08>
   11fe4:	e0000006 	and	r0, r0, r6
   11fe8:	0aa61902 	beq	fe9983f8 <_estack+0xde9933f8>
   11fec:	b4040000 	strlt	r0, [r4], #-0
   11ff0:	09840a02 	stmibeq	r4, {r1, r9, fp}
   11ff4:	02ec0000 	rsceq	r0, ip, #0
   11ff8:	d3041100 	movwle	r1, #16640	; 0x4100
   11ffc:	04000005 	streq	r0, [r0], #-5
   12000:	0c640801 	stcleq	8, cr0, [r4], #-4
   12004:	d3060000 	movwle	r0, #24576	; 0x6000
   12008:	11000005 	tstne	r0, r5
   1200c:	00045b04 	andeq	r5, r4, r4, lsl #22
   12010:	00251500 	eoreq	r1, r5, r0, lsl #10
   12014:	06030000 	streq	r0, [r3], -r0
   12018:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   1201c:	16000004 	strne	r0, [r0], -r4
   12020:	00000117 	andeq	r0, r0, r7, lsl r1
   12024:	00060316 	andeq	r0, r6, r6, lsl r3
   12028:	00251600 	eoreq	r1, r5, r0, lsl #12
   1202c:	11000000 	mrsne	r0, (UNDEF: 0)
   12030:	0005da04 	andeq	sp, r5, r4, lsl #20
   12034:	e5041100 	str	r1, [r4, #-256]	; 0xffffff00
   12038:	15000005 	strne	r0, [r0, #-5]
   1203c:	000000a9 	andeq	r0, r0, r9, lsr #1
   12040:	0000062d 	andeq	r0, r0, sp, lsr #12
   12044:	00047916 	andeq	r7, r4, r6, lsl r9
   12048:	01171600 	tsteq	r7, r0, lsl #12
   1204c:	a9160000 	ldmdbge	r6, {}	; <UNPREDICTABLE>
   12050:	16000000 	strne	r0, [r0], -r0
   12054:	00000025 	andeq	r0, r0, r5, lsr #32
   12058:	0f041100 	svceq	0x00041100
   1205c:	15000006 	strne	r0, [r0, #-6]
   12060:	00000025 	andeq	r0, r0, r5, lsr #32
   12064:	00000647 	andeq	r0, r0, r7, asr #12
   12068:	00047916 	andeq	r7, r4, r6, lsl r9
   1206c:	01171600 	tsteq	r7, r0, lsl #12
   12070:	11000000 	mrsne	r0, (UNDEF: 0)
   12074:	00063304 	andeq	r3, r6, r4, lsl #6
   12078:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   1207c:	065d0000 	ldrbeq	r0, [sp], -r0
   12080:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12084:	02000000 	andeq	r0, r0, #0
   12088:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   1208c:	066d0000 	strbteq	r0, [sp], -r0
   12090:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12094:	00000000 	andeq	r0, r0, r0
   12098:	046e0500 	strbteq	r0, [lr], #-1280	; 0xfffffb00
   1209c:	24040000 	strcs	r0, [r4], #-0
   120a0:	03181a01 	tsteq	r8, #4096	; 0x1000
   120a4:	dd1a0000 	ldcle	0, cr0, [sl, #-0]
   120a8:	0c00000c 	stceq	0, cr0, [r0], {12}
   120ac:	08012804 	stmdaeq	r1, {r2, fp, sp}
   120b0:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
   120b4:	000eca18 	andeq	ip, lr, r8, lsl sl
   120b8:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   120bc:	0006b311 	andeq	fp, r6, r1, lsl r3
   120c0:	ce180000 	cdpgt	0, 1, cr0, cr8, cr0, {0}
   120c4:	0400000b 	streq	r0, [r0], #-11
   120c8:	2507012b 	strcs	r0, [r7, #-299]	; 0xfffffed5
   120cc:	04000000 	streq	r0, [r0], #-0
   120d0:	00077218 	andeq	r7, r7, r8, lsl r2
   120d4:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   120d8:	0006b90b 	andeq	fp, r6, fp, lsl #18
   120dc:	11000800 	tstne	r0, r0, lsl #16
   120e0:	00067a04 	andeq	r7, r6, r4, lsl #20
   120e4:	6d041100 	stfvss	f1, [r4, #-0]
   120e8:	1a000006 	bne	12108 <__exidx_end+0xc388>
   120ec:	000003da 	ldrdeq	r0, [r0], -sl
   120f0:	0144040e 	cmpeq	r4, lr, lsl #8
   120f4:	0006f808 	andeq	pc, r6, r8, lsl #16
   120f8:	16511800 	ldrbne	r1, [r1], -r0, lsl #16
   120fc:	45040000 	strmi	r0, [r4, #-0]
   12100:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   12104:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12108:	00000831 	andeq	r0, r0, r1, lsr r8
   1210c:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   12110:	000006f8 	strdeq	r0, [r0], -r8
   12114:	15031806 	strne	r1, [r3, #-2054]	; 0xfffff7fa
   12118:	47040000 	strmi	r0, [r4, -r0]
   1211c:	007c1201 	rsbseq	r1, ip, r1, lsl #4
   12120:	000c0000 	andeq	r0, ip, r0
   12124:	00007c09 	andeq	r7, r0, r9, lsl #24
   12128:	00070800 	andeq	r0, r7, r0, lsl #16
   1212c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12130:	00020000 	andeq	r0, r2, r0
   12134:	8504d01b 	strhi	sp, [r4, #-27]	; 0xffffffe5
   12138:	081d0702 	ldmdaeq	sp, {r1, r8, r9, sl}
   1213c:	70180000 	andsvc	r0, r8, r0
   12140:	0400000e 	streq	r0, [r0], #-14
   12144:	38180287 	ldmdacc	r8, {r0, r1, r2, r7, r9}
   12148:	00000000 	andeq	r0, r0, r0
   1214c:	000cf118 	andeq	pc, ip, r8, lsl r1	; <UNPREDICTABLE>
   12150:	02880400 	addeq	r0, r8, #0, 8
   12154:	0005cd12 	andeq	ip, r5, r2, lsl sp
   12158:	38180400 	ldmdacc	r8, {sl}
   1215c:	04000004 	streq	r0, [r0], #-4
   12160:	1d100289 	lfmne	f0, 4, [r0, #-548]	; 0xfffffddc
   12164:	08000008 	stmdaeq	r0, {r3}
   12168:	000b4318 	andeq	r4, fp, r8, lsl r3
   1216c:	028a0400 	addeq	r0, sl, #0, 8
   12170:	0001b217 	andeq	fp, r1, r7, lsl r2
   12174:	e9182400 	ldmdb	r8, {sl, sp}
   12178:	04000007 	streq	r0, [r0], #-7
   1217c:	250f028b 	strcs	r0, [pc, #-651]	; 11ef9 <__exidx_end+0xc179>
   12180:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   12184:	000ec518 	andeq	ip, lr, r8, lsl r5
   12188:	028c0400 	addeq	r0, ip, #0, 8
   1218c:	0000962c 	andeq	r9, r0, ip, lsr #12
   12190:	7f185000 	svcvc	0x00185000
   12194:	04000000 	streq	r0, [r0], #-0
   12198:	bf1a028d 	svclt	0x001a028d
   1219c:	58000006 	stmdapl	r0, {r1, r2}
   121a0:	00063918 	andeq	r3, r6, r8, lsl r9
   121a4:	028e0400 	addeq	r0, lr, #0, 8
   121a8:	00010b16 	andeq	r0, r1, r6, lsl fp
   121ac:	fe186800 	vcmla.f16	d6, d8, d0[0], #90
   121b0:	0400000c 	streq	r0, [r0], #-12
   121b4:	0b16028f 	bleq	592bf8 <__ccfg+0x572c50>
   121b8:	70000001 	andvc	r0, r0, r1
   121bc:	00007118 	andeq	r7, r0, r8, lsl r1
   121c0:	02900400 	addseq	r0, r0, #0, 8
   121c4:	00010b16 	andeq	r0, r1, r6, lsl fp
   121c8:	6a187800 	bvs	6301d0 <__ccfg+0x610228>
   121cc:	0400000b 	streq	r0, [r0], #-11
   121d0:	2d100291 	lfmcs	f0, 4, [r0, #-580]	; 0xfffffdbc
   121d4:	80000008 	andhi	r0, r0, r8
   121d8:	00041518 	andeq	r1, r4, r8, lsl r5
   121dc:	02920400 	addseq	r0, r2, #0, 8
   121e0:	00083d10 	andeq	r3, r8, r0, lsl sp
   121e4:	8d188800 	ldchi	8, cr8, [r8, #-0]
   121e8:	0400000c 	streq	r0, [r0], #-12
   121ec:	250f0293 	strcs	r0, [pc, #-659]	; 11f61 <__exidx_end+0xc1e1>
   121f0:	a0000000 	andge	r0, r0, r0
   121f4:	0002ac18 	andeq	sl, r2, r8, lsl ip
   121f8:	02940400 	addseq	r0, r4, #0, 8
   121fc:	00010b16 	andeq	r0, r1, r6, lsl fp
   12200:	9f18a400 	svcls	0x0018a400
   12204:	04000006 	streq	r0, [r0], #-6
   12208:	0b160295 	bleq	592c64 <__ccfg+0x572cbc>
   1220c:	ac000001 	stcge	0, cr0, [r0], {1}
   12210:	0005bb18 	andeq	fp, r5, r8, lsl fp
   12214:	02960400 	addseq	r0, r6, #0, 8
   12218:	00010b16 	andeq	r0, r1, r6, lsl fp
   1221c:	4a18b400 	bmi	63f224 <__ccfg+0x61f27c>
   12220:	04000008 	streq	r0, [r0], #-8
   12224:	0b160297 	bleq	592c88 <__ccfg+0x572ce0>
   12228:	bc000001 	stclt	0, cr0, [r0], {1}
   1222c:	00062818 	andeq	r2, r6, r8, lsl r8
   12230:	02980400 	addseq	r0, r8, #0, 8
   12234:	00010b16 	andeq	r0, r1, r6, lsl fp
   12238:	0218c400 	andseq	ip, r8, #0, 8
   1223c:	04000009 	streq	r0, [r0], #-9
   12240:	25080299 	strcs	r0, [r8, #-665]	; 0xfffffd67
   12244:	cc000000 	stcgt	0, cr0, [r0], {-0}
   12248:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   1224c:	082d0000 	stmdaeq	sp!, {}	; <UNPREDICTABLE>
   12250:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12254:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   12258:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   1225c:	083d0000 	ldmdaeq	sp!, {}	; <UNPREDICTABLE>
   12260:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12264:	07000000 	streq	r0, [r0, -r0]
   12268:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   1226c:	084d0000 	stmdaeq	sp, {}^	; <UNPREDICTABLE>
   12270:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12274:	17000000 	strne	r0, [r0, -r0]
   12278:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
   1227c:	7407029e 	strvc	r0, [r7], #-670	; 0xfffffd62
   12280:	18000008 	stmdane	r0, {r3}
   12284:	000003c0 	andeq	r0, r0, r0, asr #7
   12288:	1b02a104 	blne	ba6a0 <__ccfg+0x9a6f8>
   1228c:	00000874 	andeq	r0, r0, r4, ror r8
   12290:	0f181800 	svceq	0x00181800
   12294:	a2040000 	andge	r0, r4, #0
   12298:	08841802 	stmeq	r4, {r1, fp, ip}
   1229c:	00780000 	rsbseq	r0, r8, r0
   122a0:	00031209 	andeq	r1, r3, r9, lsl #4
   122a4:	00088400 	andeq	r8, r8, r0, lsl #8
   122a8:	00380a00 	eorseq	r0, r8, r0, lsl #20
   122ac:	001d0000 	andseq	r0, sp, r0
   122b0:	00003809 	andeq	r3, r0, r9, lsl #16
   122b4:	00089400 	andeq	r9, r8, r0, lsl #8
   122b8:	00380a00 	eorseq	r0, r8, r0, lsl #20
   122bc:	001d0000 	andseq	r0, sp, r0
   122c0:	8304f01c 	movwhi	pc, #16412	; 0x401c	; <UNPREDICTABLE>
   122c4:	08b90302 	ldmeq	r9!, {r1, r8, r9}
   122c8:	651d0000 	ldrvs	r0, [sp, #-0]
   122cc:	0400000d 	streq	r0, [r0], #-13
   122d0:	080b029a 	stmdaeq	fp, {r1, r3, r4, r7, r9}
   122d4:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
   122d8:	00000b52 	andeq	r0, r0, r2, asr fp
   122dc:	0b02a304 	bleq	baef4 <__ccfg+0x9af4c>
   122e0:	0000084d 	andeq	r0, r0, sp, asr #16
   122e4:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   122e8:	08c90000 	stmiaeq	r9, {}^	; <UNPREDICTABLE>
   122ec:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   122f0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   122f4:	0ed01200 	cdpeq	2, 13, cr1, cr0, cr0, {0}
   122f8:	016c0000 	cmneq	ip, r0
   122fc:	5008b206 	andpl	fp, r8, r6, lsl #4
   12300:	0c000009 	stceq	0, cr0, [r0], {9}
   12304:	00004538 	andeq	r4, r0, r8, lsr r5
   12308:	f80bb406 			; <UNDEFINED> instruction: 0xf80bb406
   1230c:	0000000d 	andeq	r0, r0, sp
   12310:	0044ed0c 	subeq	lr, r4, ip, lsl #26
   12314:	0bb50600 	bleq	fed53b1c <_estack+0xded4eb1c>
   12318:	00000e32 	andeq	r0, r0, r2, lsr lr
   1231c:	43830ce0 	orrmi	r0, r3, #224, 24	; 0xe000
   12320:	b7060000 	strlt	r0, [r6, -r0]
   12324:	000e610b 	andeq	r6, lr, fp, lsl #2
   12328:	f30ce400 	vshl.u8	d14, d0, d12
   1232c:	06000042 	streq	r0, [r0], -r2, asr #32
   12330:	00250ab9 	strhteq	r0, [r5], -r9
   12334:	0ce80000 	stcleq	0, cr0, [r8]
   12338:	000042bf 			; <UNDEFINED> instruction: 0x000042bf
   1233c:	cd0bba06 	vstrgt	s22, [fp, #-24]	; 0xffffffe8
   12340:	ec000005 	stc	0, cr0, [r0], {5}
   12344:	0042ed0c 	subeq	lr, r2, ip, lsl #26
   12348:	12bb0600 	adcsne	r0, fp, #0, 12
   1234c:	000009d2 	ldrdeq	r0, [r0], -r2
   12350:	440113f0 	strmi	r1, [r1], #-1008	; 0xfffffc10
   12354:	bd060000 	stclt	0, cr0, [r6, #-0]
   12358:	000e670b 	andeq	r6, lr, fp, lsl #14
   1235c:	13012800 	movwne	r2, #6144	; 0x1800
   12360:	00004422 	andeq	r4, r0, r2, lsr #8
   12364:	770bbe06 	strvc	fp, [fp, -r6, lsl #28]
   12368:	2a00000e 	bcs	123a8 <__exidx_end+0xc628>
   1236c:	43731301 	cmnmi	r3, #67108864	; 0x4000000
   12370:	bf060000 	svclt	0x00060000
   12374:	000e770b 	andeq	r7, lr, fp, lsl #14
   12378:	00014a00 	andeq	r4, r1, r0, lsl #20
   1237c:	08c90411 	stmiaeq	r9, {r0, r4, sl}^
   12380:	611e0000 	tstvs	lr, r0
   12384:	16000009 	strne	r0, [r0], -r9
   12388:	00000479 	andeq	r0, r0, r9, ror r4
   1238c:	56041100 	strpl	r1, [r4], -r0, lsl #2
   12390:	11000009 	tstne	r0, r9
   12394:	00019c04 	andeq	r9, r1, r4, lsl #24
   12398:	09781e00 	ldmdbeq	r8!, {r9, sl, fp, ip}^
   1239c:	25160000 	ldrcs	r0, [r6, #-0]
   123a0:	00000000 	andeq	r0, r0, r0
   123a4:	097e0411 	ldmdbeq	lr!, {r0, r4, sl}^
   123a8:	04110000 	ldreq	r0, [r1], #-0
   123ac:	0000096d 	andeq	r0, r0, sp, ror #18
   123b0:	00066d09 	andeq	r6, r6, r9, lsl #26
   123b4:	00099400 	andeq	r9, r9, r0, lsl #8
   123b8:	00380a00 	eorseq	r0, r8, r0, lsl #20
   123bc:	00020000 	andeq	r0, r2, r0
   123c0:	000ac21f 	andeq	ip, sl, pc, lsl r2
   123c4:	03330400 	teqeq	r3, #0, 8
   123c8:	00047917 	andeq	r7, r4, r7, lsl r9
   123cc:	0abb1f00 	beq	feed9fd4 <_estack+0xdeed4fd4>
   123d0:	34040000 	strcc	r0, [r4], #-0
   123d4:	047f1d03 	ldrbteq	r1, [pc], #-3331	; 123dc <__exidx_end+0xc65c>
   123d8:	04110000 	ldreq	r0, [r1], #-0
   123dc:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
   123e0:	0009ae0e 	andeq	sl, r9, lr, lsl #28
   123e4:	49212000 	stmdbmi	r1!, {sp}
   123e8:	07000044 	streq	r0, [r0, -r4, asr #32]
   123ec:	05cd0e67 	strbeq	r0, [sp, #3687]	; 0xe67
   123f0:	b6030000 	strlt	r0, [r3], -r0
   123f4:	08000008 	stmdaeq	r0, {r3}
   123f8:	010b1456 	tsteq	fp, r6, asr r4
   123fc:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 12404 <__exidx_end+0xc684>
   12400:	38000042 	stmdacc	r0, {r1, r6}
   12404:	18082a09 	stmdane	r8, {r0, r3, r9, fp, sp}
   12408:	0c00000b 	stceq	0, cr0, [r0], {11}
   1240c:	000043d6 	ldrdeq	r4, [r0], -r6
   12410:	cd092c09 	stcgt	12, cr2, [r9, #-36]	; 0xffffffdc
   12414:	00000005 	andeq	r0, r0, r5
   12418:	0044f80c 	subeq	pc, r4, ip, lsl #16
   1241c:	092d0900 	pusheq	{r8, fp}
   12420:	000005cd 	andeq	r0, r0, sp, asr #11
   12424:	43b10c04 			; <UNDEFINED> instruction: 0x43b10c04
   12428:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
   1242c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12430:	180c0800 	stmdane	ip, {fp}
   12434:	09000043 	stmdbeq	r0, {r0, r1, r6}
   12438:	05cd092f 	strbeq	r0, [sp, #2351]	; 0x92f
   1243c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   12440:	000042af 	andeq	r4, r0, pc, lsr #5
   12444:	cd093009 	stcgt	0, cr3, [r9, #-36]	; 0xffffffdc
   12448:	10000005 	andne	r0, r0, r5
   1244c:	0043d20c 	subeq	sp, r3, ip, lsl #4
   12450:	09310900 	ldmdbeq	r1!, {r8, fp}
   12454:	000005cd 	andeq	r0, r0, sp, asr #11
   12458:	44f40c14 	ldrbtmi	r0, [r4], #3092	; 0xc14
   1245c:	32090000 	andcc	r0, r9, #0
   12460:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12464:	ad0c1800 	stcge	8, cr1, [ip, #-0]
   12468:	09000043 	stmdbeq	r0, {r0, r1, r6}
   1246c:	05cd0933 	strbeq	r0, [sp, #2355]	; 0x933
   12470:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   12474:	00004414 	andeq	r4, r0, r4, lsl r4
   12478:	cd093409 	cfstrsgt	mvf3, [r9, #-36]	; 0xffffffdc
   1247c:	20000005 	andcs	r0, r0, r5
   12480:	0043f30c 	subeq	pc, r3, ip, lsl #6
   12484:	09350900 	ldmdbeq	r5!, {r8, fp}
   12488:	000005cd 	andeq	r0, r0, sp, asr #11
   1248c:	46580c24 	ldrbmi	r0, [r8], -r4, lsr #24
   12490:	36090000 	strcc	r0, [r9], -r0
   12494:	0005d308 	andeq	sp, r5, r8, lsl #6
   12498:	5c0c2800 	stcpl	8, cr2, [ip], {-0}
   1249c:	09000046 	stmdbeq	r0, {r1, r2, r6}
   124a0:	05d30837 	ldrbeq	r0, [r3, #2103]	; 0x837
   124a4:	0c290000 	stceq	0, cr0, [r9], #-0
   124a8:	000043c4 	andeq	r4, r0, r4, asr #7
   124ac:	d3083809 	movwle	r3, #34825	; 0x8809
   124b0:	2a000005 	bcs	124cc <__exidx_end+0xc74c>
   124b4:	0044570c 	subeq	r5, r4, ip, lsl #14
   124b8:	08390900 	ldmdaeq	r9!, {r8, fp}
   124bc:	000005d3 	ldrdeq	r0, [r0], -r3
   124c0:	446a0c2b 	strbtmi	r0, [sl], #-3115	; 0xfffff3d5
   124c4:	3a090000 	bcc	2524cc <__ccfg+0x232524>
   124c8:	0005d308 	andeq	sp, r5, r8, lsl #6
   124cc:	de0c2c00 	cdple	12, 0, cr2, cr12, cr0, {0}
   124d0:	09000042 	stmdbeq	r0, {r1, r6}
   124d4:	05d3083b 	ldrbeq	r0, [r3, #2107]	; 0x83b
   124d8:	0c2d0000 	stceq	0, cr0, [sp], #-0
   124dc:	000043a1 	andeq	r4, r0, r1, lsr #7
   124e0:	d3083c09 	movwle	r3, #35849	; 0x8c09
   124e4:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
   124e8:	0045470c 	subeq	r4, r5, ip, lsl #14
   124ec:	083d0900 	ldmdaeq	sp!, {r8, fp}
   124f0:	000005d3 	ldrdeq	r0, [r0], -r3
   124f4:	44660c2f 	strbtmi	r0, [r6], #-3119	; 0xfffff3d1
   124f8:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
   124fc:	0005d308 	andeq	sp, r5, r8, lsl #6
   12500:	da0c3000 	ble	31e508 <__ccfg+0x2fe560>
   12504:	09000042 	stmdbeq	r0, {r1, r6}
   12508:	05d3083f 	ldrbeq	r0, [r3, #2111]	; 0x83f
   1250c:	0c310000 	ldceq	0, cr0, [r1], #-0
   12510:	00004543 	andeq	r4, r0, r3, asr #10
   12514:	d3084009 	movwle	r4, #32777	; 0x8009
   12518:	32000005 	andcc	r0, r0, #5
   1251c:	0043c00c 	subeq	ip, r3, ip
   12520:	08410900 	stmdaeq	r1, {r8, fp}^
   12524:	000005d3 	ldrdeq	r0, [r0], -r3
   12528:	44530c33 	ldrbmi	r0, [r3], #-3123	; 0xfffff3cd
   1252c:	42090000 	andmi	r0, r9, #0
   12530:	0005d308 	andeq	sp, r5, r8, lsl #6
   12534:	9d0c3400 	cfstrsls	mvf3, [ip, #-0]
   12538:	09000043 	stmdbeq	r0, {r0, r1, r6}
   1253c:	05d30843 	ldrbeq	r0, [r3, #2115]	; 0x843
   12540:	00350000 	eorseq	r0, r5, r0
   12544:	0044d80f 	subeq	sp, r4, pc, lsl #16
   12548:	39060800 	stmdbcc	r6, {fp}
   1254c:	000b4008 	andeq	r4, fp, r8
   12550:	437b0c00 	cmnmi	fp, #0, 24
   12554:	3b060000 	blcc	19255c <__ccfg+0x1725b4>
   12558:	0006030f 	andeq	r0, r6, pc, lsl #6
   1255c:	010c0000 	mrseq	r0, (UNDEF: 12)
   12560:	06000044 	streq	r0, [r0], -r4, asr #32
   12564:	06030f3c 			; <UNDEFINED> instruction: 0x06030f3c
   12568:	00040000 	andeq	r0, r4, r0
   1256c:	000b1806 	andeq	r1, fp, r6, lsl #16
   12570:	433d2100 	teqmi	sp, #0, 2
   12574:	42060000 	andmi	r0, r6, #0
   12578:	000b4020 	andeq	r4, fp, r0, lsr #32
   1257c:	43650f00 	cmnmi	r5, #0, 30
   12580:	063c0000 	ldrteq	r0, [ip], -r0
   12584:	0c220844 	stceq	8, cr0, [r2], #-272	; 0xfffffef0
   12588:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
   1258c:	06000043 	streq	r0, [r0], -r3, asr #32
   12590:	06030f46 	streq	r0, [r3], -r6, asr #30
   12594:	0c000000 	stceq	0, cr0, [r0], {-0}
   12598:	000042af 	andeq	r4, r0, pc, lsr #5
   1259c:	030f4706 	movweq	r4, #63238	; 0xf706
   125a0:	04000006 	streq	r0, [r0], #-6
   125a4:	0043d20c 	subeq	sp, r3, ip, lsl #4
   125a8:	0f480600 	svceq	0x00480600
   125ac:	00000603 	andeq	r0, r0, r3, lsl #12
   125b0:	44f40c08 	ldrbtmi	r0, [r4], #3080	; 0xc08
   125b4:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
   125b8:	0006030f 	andeq	r0, r6, pc, lsl #6
   125bc:	ad0c0c00 	stcge	12, cr0, [ip, #-0]
   125c0:	06000043 	streq	r0, [r0], -r3, asr #32
   125c4:	06030f4a 	streq	r0, [r3], -sl, asr #30
   125c8:	0c100000 	ldceq	0, cr0, [r0], {-0}
   125cc:	00004414 	andeq	r4, r0, r4, lsl r4
   125d0:	030f4b06 	movweq	r4, #64262	; 0xfb06
   125d4:	14000006 	strne	r0, [r0], #-6
   125d8:	0043f30c 	subeq	pc, r3, ip, lsl #6
   125dc:	0f4c0600 	svceq	0x004c0600
   125e0:	00000603 	andeq	r0, r0, r3, lsl #12
   125e4:	46580c18 			; <UNDEFINED> instruction: 0x46580c18
   125e8:	4d060000 	stcmi	0, cr0, [r6, #-0]
   125ec:	0006030f 	andeq	r0, r6, pc, lsl #6
   125f0:	5c0c1c00 	stcpl	12, cr1, [ip], {-0}
   125f4:	06000046 	streq	r0, [r0], -r6, asr #32
   125f8:	06030f4e 	streq	r0, [r3], -lr, asr #30
   125fc:	0c200000 	stceq	0, cr0, [r0], #-0
   12600:	000043c4 	andeq	r4, r0, r4, asr #7
   12604:	030f4f06 	movweq	r4, #65286	; 0xff06
   12608:	24000006 	strcs	r0, [r0], #-6
   1260c:	0044570c 	subeq	r5, r4, ip, lsl #14
   12610:	0f500600 	svceq	0x00500600
   12614:	00000603 	andeq	r0, r0, r3, lsl #12
   12618:	446a0c28 	strbtmi	r0, [sl], #-3112	; 0xfffff3d8
   1261c:	51060000 	mrspl	r0, (UNDEF: 6)
   12620:	0006030f 	andeq	r0, r6, pc, lsl #6
   12624:	de0c2c00 	cdple	12, 0, cr2, cr12, cr0, {0}
   12628:	06000042 	streq	r0, [r0], -r2, asr #32
   1262c:	06030f52 			; <UNDEFINED> instruction: 0x06030f52
   12630:	0c300000 	ldceq	0, cr0, [r0], #-0
   12634:	000043a1 	andeq	r4, r0, r1, lsr #7
   12638:	030f5306 	movweq	r5, #62214	; 0xf306
   1263c:	34000006 	strcc	r0, [r0], #-6
   12640:	0045470c 	subeq	r4, r5, ip, lsl #14
   12644:	0f540600 	svceq	0x00540600
   12648:	00000603 	andeq	r0, r0, r3, lsl #12
   1264c:	51060038 	tstpl	r6, r8, lsr r0
   12650:	2100000b 	tstcs	r0, fp
   12654:	00004525 	andeq	r4, r0, r5, lsr #10
   12658:	22236506 	eorcs	r6, r3, #25165824	; 0x1800000
   1265c:	0f00000c 	svceq	0x0000000c
   12660:	000042fc 	strdeq	r4, [r0], -ip
   12664:	0867060c 	stmdaeq	r7!, {r2, r3, r9, sl}^
   12668:	00000c68 	andeq	r0, r0, r8, ror #24
   1266c:	0043d60c 	subeq	sp, r3, ip, lsl #12
   12670:	0f690600 	svceq	0x00690600
   12674:	00000603 	andeq	r0, r0, r3, lsl #12
   12678:	44f80c00 	ldrbtmi	r0, [r8], #3072	; 0xc00
   1267c:	6a060000 	bvs	192684 <__ccfg+0x1726dc>
   12680:	0006030f 	andeq	r0, r6, pc, lsl #6
   12684:	b10c0400 	tstlt	ip, r0, lsl #8
   12688:	06000043 	streq	r0, [r0], -r3, asr #32
   1268c:	06030f6b 	streq	r0, [r3], -fp, ror #30
   12690:	00080000 	andeq	r0, r8, r0
   12694:	000c3306 	andeq	r3, ip, r6, lsl #6
   12698:	429d2100 	addsmi	r2, sp, #0, 2
   1269c:	72060000 	andvc	r0, r6, #0
   126a0:	000c6822 	andeq	r6, ip, r2, lsr #16
   126a4:	43280f00 			; <UNDEFINED> instruction: 0x43280f00
   126a8:	06fc0000 	ldrbteq	r0, [ip], r0
   126ac:	0d640874 	stcleq	8, cr0, [r4, #-464]!	; 0xfffffe30
   126b0:	6d100000 	ldcvs	0, cr0, [r0, #-0]
   126b4:	06006e6f 	streq	r6, [r0], -pc, ror #28
   126b8:	0d690f76 	stcleq	15, cr0, [r9, #-472]!	; 0xfffffe28
   126bc:	0c000000 	stceq	0, cr0, [r0], {-0}
   126c0:	00004671 	andeq	r4, r0, r1, ror r6
   126c4:	690f7706 	stmdbvs	pc, {r1, r2, r8, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
   126c8:	3000000d 	andcc	r0, r0, sp
   126cc:	00034b0c 	andeq	r4, r3, ip, lsl #22
   126d0:	0f780600 	svceq	0x00780600
   126d4:	00000d79 	andeq	r0, r0, r9, ror sp
   126d8:	451d0c60 	ldrmi	r0, [sp, #-3168]	; 0xfffff3a0
   126dc:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
   126e0:	000d790f 	andeq	r7, sp, pc, lsl #18
   126e4:	ba0c7c00 	blt	3316ec <__ccfg+0x311744>
   126e8:	06000043 	streq	r0, [r0], -r3, asr #32
   126ec:	06030f7a 			; <UNDEFINED> instruction: 0x06030f7a
   126f0:	0c980000 	ldceq	0, cr0, [r8], {0}
   126f4:	00004443 	andeq	r4, r0, r3, asr #8
   126f8:	030f7b06 	movweq	r7, #64262	; 0xfb06
   126fc:	9c000006 	stcls	0, cr0, [r0], {6}
   12700:	0043e40c 	subeq	lr, r3, ip, lsl #8
   12704:	0f7c0600 	svceq	0x007c0600
   12708:	00000603 	andeq	r0, r0, r3, lsl #12
   1270c:	434d0ca0 	movtmi	r0, #56480	; 0xdca0
   12710:	7d060000 	stcvc	0, cr0, [r6, #-0]
   12714:	000d890f 	andeq	r8, sp, pc, lsl #18
   12718:	ea0ca400 	b	33b720 <__ccfg+0x31b778>
   1271c:	06000043 	streq	r0, [r0], -r3, asr #32
   12720:	06030f7e 			; <UNDEFINED> instruction: 0x06030f7e
   12724:	0cac0000 	stceq	0, cr0, [ip]
   12728:	0000466d 	andeq	r4, r0, sp, ror #12
   1272c:	690f7f06 	stmdbvs	pc, {r1, r2, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   12730:	b000000d 	andlt	r0, r0, sp
   12734:	0044b60c 	subeq	fp, r4, ip, lsl #12
   12738:	0f800600 	svceq	0x00800600
   1273c:	00000603 	andeq	r0, r0, r3, lsl #12
   12740:	45060ce0 	strmi	r0, [r6, #-3296]	; 0xfffff320
   12744:	81060000 	mrshi	r0, (UNDEF: 6)
   12748:	0006030f 	andeq	r0, r6, pc, lsl #6
   1274c:	6510e400 	ldrvs	lr, [r0, #-1024]	; 0xfffffc00
   12750:	06006172 			; <UNDEFINED> instruction: 0x06006172
   12754:	06030f82 	streq	r0, [r3], -r2, lsl #31
   12758:	0ce80000 	stcleq	0, cr0, [r8]
   1275c:	000044ce 	andeq	r4, r0, lr, asr #9
   12760:	030f8306 	movweq	r8, #62214	; 0xf306
   12764:	ec000006 	stc	0, cr0, [r0], {6}
   12768:	0043530c 	subeq	r5, r3, ip, lsl #6
   1276c:	0f840600 	svceq	0x00840600
   12770:	00000603 	andeq	r0, r0, r3, lsl #12
   12774:	44e30cf0 	strbtmi	r0, [r3], #3312	; 0xcf0
   12778:	85060000 	strhi	r0, [r6, #-0]
   1277c:	0006030f 	andeq	r0, r6, pc, lsl #6
   12780:	320cf400 	andcc	pc, ip, #0, 8
   12784:	06000043 	streq	r0, [r0], -r3, asr #32
   12788:	06030f86 	streq	r0, [r3], -r6, lsl #31
   1278c:	00f80000 	rscseq	r0, r8, r0
   12790:	000c7906 	andeq	r7, ip, r6, lsl #18
   12794:	06030900 	streq	r0, [r3], -r0, lsl #18
   12798:	0d790000 	ldcleq	0, cr0, [r9, #-0]
   1279c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   127a0:	0b000000 	bleq	127a8 <__exidx_end+0xca28>
   127a4:	06030900 	streq	r0, [r3], -r0, lsl #18
   127a8:	0d890000 	stceq	0, cr0, [r9]
   127ac:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   127b0:	06000000 	streq	r0, [r0], -r0
   127b4:	06030900 	streq	r0, [r3], -r0, lsl #18
   127b8:	0d990000 	ldceq	0, cr0, [r9]
   127bc:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   127c0:	01000000 	mrseq	r0, (UNDEF: 0)
   127c4:	43092100 	movwmi	r2, #37120	; 0x9100
   127c8:	9a060000 	bls	1927d0 <__ccfg+0x172828>
   127cc:	000d641f 	andeq	r6, sp, pc, lsl r4
   127d0:	450f0f00 	strmi	r0, [pc, #-3840]	; 118d8 <__exidx_end+0xbb58>
   127d4:	06100000 	ldreq	r0, [r0], -r0
   127d8:	0de7089c 	stcleq	8, cr0, [r7, #624]!	; 0x270
   127dc:	c60c0000 	strgt	r0, [ip], -r0
   127e0:	06000044 	streq	r0, [r0], -r4, asr #32
   127e4:	06030f9e 			; <UNDEFINED> instruction: 0x06030f9e
   127e8:	0c000000 	stceq	0, cr0, [r0], {-0}
   127ec:	0000443c 	andeq	r4, r0, ip, lsr r4
   127f0:	030f9f06 	movweq	r9, #65286	; 0xff06
   127f4:	04000006 	streq	r0, [r0], #-6
   127f8:	0044bf0c 	subeq	fp, r4, ip, lsl #30
   127fc:	0fa00600 	svceq	0x00a00600
   12800:	00000603 	andeq	r0, r0, r3, lsl #12
   12804:	435f0c08 	cmpmi	pc, #8, 24	; 0x800
   12808:	a1060000 	mrsge	r0, (UNDEF: 6)
   1280c:	0006030f 	andeq	r0, r6, pc, lsl #6
   12810:	06000c00 	streq	r0, [r0], -r0, lsl #24
   12814:	00000da5 	andeq	r0, r0, r5, lsr #27
   12818:	00438a21 	subeq	r8, r3, r1, lsr #20
   1281c:	23aa0600 			; <UNDEFINED> instruction: 0x23aa0600
   12820:	00000de7 	andeq	r0, r0, r7, ror #27
   12824:	0005d309 	andeq	sp, r5, r9, lsl #6
   12828:	000e0e00 	andeq	r0, lr, r0, lsl #28
   1282c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12830:	0a060000 	beq	192838 <__ccfg+0x172890>
   12834:	00000038 	andeq	r0, r0, r8, lsr r0
   12838:	2515001f 	ldrcs	r0, [r5, #-31]	; 0xffffffe1
   1283c:	2c000000 	stccs	0, cr0, [r0], {-0}
   12840:	1600000e 	strne	r0, [r0], -lr
   12844:	00000479 	andeq	r0, r0, r9, ror r4
   12848:	0005cd16 	andeq	ip, r5, r6, lsl sp
   1284c:	003f1600 	eorseq	r1, pc, r0, lsl #12
   12850:	2c160000 	ldccs	0, cr0, [r6], {-0}
   12854:	0000000e 	andeq	r0, r0, lr
   12858:	09c60411 	stmibeq	r6, {r0, r4, sl}^
   1285c:	04110000 	ldreq	r0, [r1], #-0
   12860:	00000e0e 	andeq	r0, r0, lr, lsl #28
   12864:	00002515 	andeq	r2, r0, r5, lsl r5
   12868:	000e5b00 	andeq	r5, lr, r0, lsl #22
   1286c:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   12870:	5b160000 	blpl	592878 <__ccfg+0x5728d0>
   12874:	1600000e 	strne	r0, [r0], -lr
   12878:	00000603 	andeq	r0, r0, r3, lsl #12
   1287c:	00002c16 	andeq	r2, r0, r6, lsl ip
   12880:	0e2c1600 	cfmadda32eq	mvax0, mvax1, mvfx12, mvfx0
   12884:	11000000 	mrsne	r0, (UNDEF: 0)
   12888:	00003f04 	andeq	r3, r0, r4, lsl #30
   1288c:	38041100 	stmdacc	r4, {r8, ip}
   12890:	0900000e 	stmdbeq	r0, {r1, r2, r3}
   12894:	000005d3 	ldrdeq	r0, [r0], -r3
   12898:	00000e77 	andeq	r0, r0, r7, ror lr
   1289c:	0000380a 	andeq	r3, r0, sl, lsl #16
   128a0:	09000100 	stmdbeq	r0, {r8}
   128a4:	000005d3 	ldrdeq	r0, [r0], -r3
   128a8:	00000e87 	andeq	r0, r0, r7, lsl #29
   128ac:	0000380a 	andeq	r3, r0, sl, lsl #16
   128b0:	22001f00 	andcs	r1, r0, #0, 30
   128b4:	0000166a 	andeq	r1, r0, sl, ror #12
   128b8:	17091f0a 	strne	r1, [r9, -sl, lsl #30]
   128bc:	e4000001 	str	r0, [r0], #-1
   128c0:	aa000049 	bge	129ec <__exidx_end+0xcc6c>
   128c4:	01000000 	mrseq	r0, (UNDEF: 0)
   128c8:	000f289c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
   128cc:	42c92300 	sbcmi	r2, r9, #0, 6
   128d0:	31010000 	mrscc	r0, (UNDEF: 1)
   128d4:	0001191a 	andeq	r1, r1, sl, lsl r9
   128d8:	24500100 	ldrbcs	r0, [r0], #-256	; 0xffffff00
   128dc:	00004668 	andeq	r4, r0, r8, ror #12
   128e0:	b4193201 	ldrlt	r3, [r9], #-513	; 0xfffffdff
   128e4:	e1000009 	tst	r0, r9
   128e8:	d5000056 	strle	r0, [r0, #-86]	; 0xffffffaa
   128ec:	24000056 	strcs	r0, [r0], #-86	; 0xffffffaa
   128f0:	00004653 	andeq	r4, r0, r3, asr r6
   128f4:	2c093301 	stccs	3, cr3, [r9], {1}
   128f8:	5c000000 	stcpl	0, cr0, [r0], {-0}
   128fc:	34000057 	strcc	r0, [r0], #-87	; 0xffffffa9
   12900:	25000057 	strcs	r0, [r0, #-87]	; 0xffffffa9
   12904:	00747364 	rsbseq	r7, r4, r4, ror #6
   12908:	cd094201 	sfmgt	f4, 4, [r9, #-4]
   1290c:	9b000005 	blls	12928 <__exidx_end+0xcba8>
   12910:	8b000058 	blhi	12a78 <__exidx_end+0xccf8>
   12914:	25000058 	strcs	r0, [r0, #-88]	; 0xffffffa8
   12918:	00637273 	rsbeq	r7, r3, r3, ror r2
   1291c:	030f4301 	movweq	r4, #62209	; 0xf301
   12920:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
   12924:	0e000059 	mcreq	0, 0, r0, cr0, cr9, {2}
   12928:	26000059 			; <UNDEFINED> instruction: 0x26000059
   1292c:	000042ce 	andeq	r4, r0, lr, asr #5
   12930:	28094401 	stmdacs	r9, {r0, sl, lr}
   12934:	af00000f 	svcge	0x0000000f
   12938:	97000059 	smlsdls	r0, r9, r0, r0
   1293c:	26000059 			; <UNDEFINED> instruction: 0x26000059
   12940:	00004553 	andeq	r4, r0, r3, asr r5
   12944:	2e0f4501 	cfsh32cs	mvfx4, mvfx15, #1
   12948:	a600000f 	strge	r0, [r0], -pc
   1294c:	8e00005a 	mcrhi	0, 0, r0, cr0, cr10, {2}
   12950:	0000005a 	andeq	r0, r0, sl, asr r0
   12954:	00830411 	addeq	r0, r3, r1, lsl r4
   12958:	04110000 	ldreq	r0, [r1], #-0
   1295c:	0000008a 	andeq	r0, r0, sl, lsl #1
   12960:	00097600 	andeq	r7, r9, r0, lsl #12
   12964:	d7000400 	strle	r0, [r0, -r0, lsl #8]
   12968:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   1296c:	00455f01 	subeq	r5, r5, r1, lsl #30
   12970:	46770c00 	ldrbtmi	r0, [r7], -r0, lsl #24
   12974:	46ac0000 	strtmi	r0, [ip], r0
   12978:	4a900000 	bmi	fe412980 <_estack+0xde40d980>
   1297c:	004c0000 	subeq	r0, ip, r0
   12980:	918b0000 	orrls	r0, fp, r0
   12984:	04020000 	streq	r0, [r2], #-0
   12988:	00042b07 	andeq	r2, r4, r7, lsl #22
   1298c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   12990:	00746e69 	rsbseq	r6, r4, r9, ror #28
   12994:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
   12998:	02000007 	andeq	r0, r0, #7
   1299c:	44300408 	ldrtmi	r0, [r0], #-1032	; 0xfffffbf8
   129a0:	d5040000 	strle	r0, [r4, #-0]
   129a4:	0200000b 	andeq	r0, r0, #11
   129a8:	25170165 	ldrcs	r0, [r7, #-357]	; 0xfffffe9b
   129ac:	02000000 	andeq	r0, r0, #0
   129b0:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
   129b4:	01020000 	mrseq	r0, (UNDEF: 2)
   129b8:	000c5b08 	andeq	r5, ip, r8, lsl #22
   129bc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   129c0:	00000a6b 	andeq	r0, r0, fp, ror #20
   129c4:	6c070202 	sfmvs	f0, 4, [r7], {2}
   129c8:	0200000d 	andeq	r0, r0, #13
   129cc:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
   129d0:	04020000 	streq	r0, [r2], #-0
   129d4:	00042607 	andeq	r2, r4, r7, lsl #12
   129d8:	07080200 	streq	r0, [r8, -r0, lsl #4]
   129dc:	00000421 	andeq	r0, r0, r1, lsr #8
   129e0:	000e4f05 	andeq	r4, lr, r5, lsl #30
   129e4:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
   129e8:	0000006a 	andeq	r0, r0, sl, rrx
   129ec:	0002ff05 	andeq	pc, r2, r5, lsl #30
   129f0:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
   129f4:	0000006a 	andeq	r0, r0, sl, rrx
   129f8:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
   129fc:	0000b903 	andeq	fp, r0, r3, lsl #18
   12a00:	076c0700 	strbeq	r0, [ip, -r0, lsl #14]!
   12a04:	a7030000 	strge	r0, [r3, -r0]
   12a08:	0000410c 	andeq	r4, r0, ip, lsl #2
   12a0c:	0ab40700 	beq	fed14614 <_estack+0xded0f614>
   12a10:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
   12a14:	0000b913 	andeq	fp, r0, r3, lsl r9
   12a18:	55080000 	strpl	r0, [r8, #-0]
   12a1c:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
   12a20:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   12a24:	00000025 	andeq	r0, r0, r5, lsr #32
   12a28:	080a0003 	stmdaeq	sl, {r0, r1}
   12a2c:	ed09a203 	sfm	f2, 1, [r9, #-12]
   12a30:	0b000000 	bleq	12a38 <__exidx_end+0xccb8>
   12a34:	0000038e 	andeq	r0, r0, lr, lsl #7
   12a38:	2c07a403 	cfstrscs	mvf10, [r7], {3}
   12a3c:	00000000 	andeq	r0, r0, r0
   12a40:	0006010b 	andeq	r0, r6, fp, lsl #2
   12a44:	05a90300 	streq	r0, [r9, #768]!	; 0x300
   12a48:	00000097 	muleq	r0, r7, r0
   12a4c:	b5050004 	strlt	r0, [r5, #-4]
   12a50:	03000008 	movweq	r0, #8
   12a54:	00c903aa 	sbceq	r0, r9, sl, lsr #7
   12a58:	040c0000 	streq	r0, [ip], #-0
   12a5c:	00084205 	andeq	r4, r8, r5, lsl #4
   12a60:	19160400 	ldmdbne	r6, {sl}
   12a64:	00000071 	andeq	r0, r0, r1, ror r0
   12a68:	00025305 	andeq	r5, r2, r5, lsl #6
   12a6c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   12a70:	0000002c 	andeq	r0, r0, ip, lsr #32
   12a74:	00072a05 	andeq	r2, r7, r5, lsl #20
   12a78:	1b230400 	blne	8d3a80 <__ccfg+0x8b3ad8>
   12a7c:	00000107 	andeq	r0, r0, r7, lsl #2
   12a80:	0003320d 	andeq	r3, r3, sp, lsl #4
   12a84:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   12a88:	00017908 	andeq	r7, r1, r8, lsl #18
   12a8c:	0eca0b00 	vdiveq.f64	d16, d10, d0
   12a90:	36040000 	strcc	r0, [r4], -r0
   12a94:	00017913 	andeq	r7, r1, r3, lsl r9
   12a98:	5f0e0000 	svcpl	0x000e0000
   12a9c:	3704006b 	strcc	r0, [r4, -fp, rrx]
   12aa0:	00002c07 	andeq	r2, r0, r7, lsl #24
   12aa4:	620b0400 	andvs	r0, fp, #0, 8
   12aa8:	0400000b 	streq	r0, [r0], #-11
   12aac:	002c0b37 	eoreq	r0, ip, r7, lsr fp
   12ab0:	0b080000 	bleq	212ab8 <__ccfg+0x1f2b10>
   12ab4:	000043fb 	strdeq	r4, [r0], -fp
   12ab8:	2c143704 	ldccs	7, cr3, [r4], {4}
   12abc:	0c000000 	stceq	0, cr0, [r0], {-0}
   12ac0:	0004550b 	andeq	r5, r4, fp, lsl #10
   12ac4:	1b370400 	blne	dd3acc <__ccfg+0xdb3b24>
   12ac8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12acc:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   12ad0:	0b380400 	bleq	e13ad8 <__ccfg+0xdf3b30>
   12ad4:	0000017f 	andeq	r0, r0, pc, ror r1
   12ad8:	040f0014 	streq	r0, [pc], #-20	; 12ae0 <__exidx_end+0xcd60>
   12adc:	0000011f 	andeq	r0, r0, pc, lsl r1
   12ae0:	0000fb08 	andeq	pc, r0, r8, lsl #22
   12ae4:	00018f00 	andeq	r8, r1, r0, lsl #30
   12ae8:	00250900 	eoreq	r0, r5, r0, lsl #18
   12aec:	00000000 	andeq	r0, r0, r0
   12af0:	000b7d0d 	andeq	r7, fp, sp, lsl #26
   12af4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   12af8:	00021208 	andeq	r1, r2, r8, lsl #4
   12afc:	056c0b00 	strbeq	r0, [ip, #-2816]!	; 0xfffff500
   12b00:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   12b04:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b08:	b70b0000 	strlt	r0, [fp, -r0]
   12b0c:	04000003 	streq	r0, [r0], #-3
   12b10:	002c093f 	eoreq	r0, ip, pc, lsr r9
   12b14:	0b040000 	bleq	112b1c <__ccfg+0xf2b74>
   12b18:	00000358 	andeq	r0, r0, r8, asr r3
   12b1c:	2c094004 	stccs	0, cr4, [r9], {4}
   12b20:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12b24:	0006740b 	andeq	r7, r6, fp, lsl #8
   12b28:	09410400 	stmdbeq	r1, {sl}^
   12b2c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b30:	09540b0c 	ldmdbeq	r4, {r2, r3, r8, r9, fp}^
   12b34:	42040000 	andmi	r0, r4, #0
   12b38:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b3c:	ce0b1000 	cdpgt	0, 0, cr1, cr11, cr0, {0}
   12b40:	0400000a 	streq	r0, [r0], #-10
   12b44:	002c0943 	eoreq	r0, ip, r3, asr #18
   12b48:	0b140000 	bleq	512b50 <__ccfg+0x4f2ba8>
   12b4c:	00000346 	andeq	r0, r0, r6, asr #6
   12b50:	2c094404 	cfstrscs	mvf4, [r9], {4}
   12b54:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12b58:	0005750b 	andeq	r7, r5, fp, lsl #10
   12b5c:	09450400 	stmdbeq	r5, {sl}^
   12b60:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b64:	08f00b1c 	ldmeq	r0!, {r2, r3, r4, r8, r9, fp}^
   12b68:	46040000 	strmi	r0, [r4], -r0
   12b6c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b70:	10002000 	andne	r2, r0, r0
   12b74:	0000003b 	andeq	r0, r0, fp, lsr r0
   12b78:	4f040108 	svcmi	0x00040108
   12b7c:	00025708 	andeq	r5, r2, r8, lsl #14
   12b80:	0d330b00 	vldmdbeq	r3!, {d0-d-1}
   12b84:	50040000 	andpl	r0, r4, r0
   12b88:	0002570a 	andeq	r5, r2, sl, lsl #14
   12b8c:	170b0000 	strne	r0, [fp, -r0]
   12b90:	0400000c 	streq	r0, [r0], #-12
   12b94:	02570951 	subseq	r0, r7, #1327104	; 0x144000
   12b98:	11800000 	orrne	r0, r0, r0
   12b9c:	00000dcc 	andeq	r0, r0, ip, asr #27
   12ba0:	fb0a5304 	blx	2a77ba <__ccfg+0x287812>
   12ba4:	00000000 	andeq	r0, r0, r0
   12ba8:	0ebd1101 	frdeqe	f1, f5, f1
   12bac:	56040000 	strpl	r0, [r4], -r0
   12bb0:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   12bb4:	00010400 	andeq	r0, r1, r0, lsl #8
   12bb8:	0000f908 	andeq	pc, r0, r8, lsl #18
   12bbc:	00026700 	andeq	r6, r2, r0, lsl #14
   12bc0:	00250900 	eoreq	r0, r5, r0, lsl #18
   12bc4:	001f0000 	andseq	r0, pc, r0
   12bc8:	000a1610 	andeq	r1, sl, r0, lsl r6
   12bcc:	04019000 	streq	r9, [r1], #-0
   12bd0:	02aa0862 	adceq	r0, sl, #6422528	; 0x620000
   12bd4:	ca0b0000 	bgt	2d2bdc <__ccfg+0x2b2c34>
   12bd8:	0400000e 	streq	r0, [r0], #-14
   12bdc:	02aa1263 	adceq	r1, sl, #805306374	; 0x30000006
   12be0:	0b000000 	bleq	12be8 <__exidx_end+0xce68>
   12be4:	00000584 	andeq	r0, r0, r4, lsl #11
   12be8:	2c066404 	cfstrscs	mvf6, [r6], {4}
   12bec:	04000000 	streq	r0, [r0], #-0
   12bf0:	0003070b 	andeq	r0, r3, fp, lsl #14
   12bf4:	09660400 	stmdbeq	r6!, {sl}^
   12bf8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
   12bfc:	003b0b08 	eorseq	r0, fp, r8, lsl #22
   12c00:	67040000 	strvs	r0, [r4, -r0]
   12c04:	0002121e 	andeq	r1, r2, lr, lsl r2
   12c08:	0f008800 	svceq	0x00008800
   12c0c:	00026704 	andeq	r6, r2, r4, lsl #14
   12c10:	02c00800 	sbceq	r0, r0, #0, 16
   12c14:	02c00000 	sbceq	r0, r0, #0
   12c18:	25090000 	strcs	r0, [r9, #-0]
   12c1c:	1f000000 	svcne	0x00000000
   12c20:	c6040f00 	strgt	r0, [r4], -r0, lsl #30
   12c24:	12000002 	andne	r0, r0, #2
   12c28:	000cc50d 	andeq	ip, ip, sp, lsl #10
   12c2c:	7a040800 	bvc	114c34 <__ccfg+0xf4c8c>
   12c30:	0002ef08 	andeq	lr, r2, r8, lsl #30
   12c34:	0cd70b00 	vldmiaeq	r7, {d16-d15}
   12c38:	7b040000 	blvc	112c40 <__ccfg+0xf2c98>
   12c3c:	0002ef11 	andeq	lr, r2, r1, lsl pc
   12c40:	a60b0000 	strge	r0, [fp], -r0
   12c44:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   12c48:	002c067c 	eoreq	r0, ip, ip, ror r6
   12c4c:	00040000 	andeq	r0, r4, r0
   12c50:	0055040f 	subseq	r0, r5, pc, lsl #8
   12c54:	4d0d0000 	stcmi	0, cr0, [sp, #-0]
   12c58:	68000004 	stmdavs	r0, {r2}
   12c5c:	3808ba04 	stmdacc	r8, {r2, r9, fp, ip, sp, pc}
   12c60:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   12c64:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   12c68:	02ef12bb 	rsceq	r1, pc, #-1342177269	; 0xb000000b
   12c6c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   12c70:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   12c74:	002c07bc 	strhteq	r0, [ip], -ip
   12c78:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   12c7c:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   12c80:	002c07bd 	strhteq	r0, [ip], -sp
   12c84:	0b080000 	bleq	212c8c <__ccfg+0x1f2ce4>
   12c88:	000001c4 	andeq	r0, r0, r4, asr #3
   12c8c:	5c09be04 	stcpl	14, cr11, [r9], {4}
   12c90:	0c000000 	stceq	0, cr0, [r0], {-0}
   12c94:	0008590b 	andeq	r5, r8, fp, lsl #18
   12c98:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   12c9c:	0000005c 	andeq	r0, r0, ip, asr r0
   12ca0:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   12ca4:	c0040066 	andgt	r0, r4, r6, rrx
   12ca8:	0002c711 	andeq	ip, r2, r1, lsl r7
   12cac:	bb0b1000 	bllt	2d6cb4 <__ccfg+0x2b6d0c>
   12cb0:	04000001 	streq	r0, [r0], #-1
   12cb4:	002c07c1 	eoreq	r0, ip, r1, asr #15
   12cb8:	0b180000 	bleq	612cc0 <__ccfg+0x5f2d18>
   12cbc:	0000030c 	andeq	r0, r0, ip, lsl #6
   12cc0:	f90ac804 			; <UNDEFINED> instruction: 0xf90ac804
   12cc4:	1c000000 	stcne	0, cr0, [r0], {-0}
   12cc8:	001d350b 	andseq	r3, sp, fp, lsl #10
   12ccc:	1dca0400 	cfstrdne	mvd0, [sl]
   12cd0:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
   12cd4:	1cfc0b20 	vldmiane	ip!, {d16-d31}
   12cd8:	cc040000 	stcgt	0, cr0, [r4], {-0}
   12cdc:	0005e61d 	andeq	lr, r5, sp, lsl r6
   12ce0:	ea0b2400 	b	2dbce8 <__ccfg+0x2bbd40>
   12ce4:	0400000e 	streq	r0, [r0], #-14
   12ce8:	060a0dcf 	streq	r0, [sl], -pc, asr #27
   12cec:	0b280000 	bleq	a12cf4 <__ccfg+0x9f2d4c>
   12cf0:	00001cea 	andeq	r1, r0, sl, ror #25
   12cf4:	2409d004 	strcs	sp, [r9], #-4
   12cf8:	2c000006 	stccs	0, cr0, [r0], {6}
   12cfc:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   12d00:	11d30400 	bicsne	r0, r3, r0, lsl #8
   12d04:	000002c7 	andeq	r0, r0, r7, asr #5
   12d08:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 11ee0 <__exidx_end+0xc160>
   12d0c:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   12d10:	0002ef12 	andeq	lr, r2, r2, lsl pc
   12d14:	5f0e3800 	svcpl	0x000e3800
   12d18:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   12d1c:	002c07d5 	ldrdeq	r0, [ip], -r5	; <UNPREDICTABLE>
   12d20:	0b3c0000 	bleq	f12d28 <__ccfg+0xef2d80>
   12d24:	00000f21 	andeq	r0, r0, r1, lsr #30
   12d28:	2a11d804 	bcs	488d40 <__ccfg+0x468d98>
   12d2c:	40000006 	andmi	r0, r0, r6
   12d30:	000e6a0b 	andeq	r6, lr, fp, lsl #20
   12d34:	11d90400 	bicsne	r0, r9, r0, lsl #8
   12d38:	0000063a 	andeq	r0, r0, sl, lsr r6
   12d3c:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   12d40:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   12d44:	0002c711 	andeq	ip, r2, r1, lsl r7
   12d48:	740b4400 	strvc	r4, [fp], #-1024	; 0xfffffc00
   12d4c:	0400000b 	streq	r0, [r0], #-11
   12d50:	002c07df 	ldrdeq	r0, [ip], -pc	; <UNPREDICTABLE>
   12d54:	0b4c0000 	bleq	1312d5c <__ccfg+0x12f2db4>
   12d58:	0000047c 	andeq	r0, r0, ip, ror r4
   12d5c:	7f0ae004 	svcvc	0x000ae004
   12d60:	50000000 	andpl	r0, r0, r0
   12d64:	0047590b 	subeq	r5, r7, fp, lsl #18
   12d68:	12e30400 	rscne	r0, r3, #0, 8
   12d6c:	00000456 	andeq	r0, r0, r6, asr r4
   12d70:	0b9a0b54 	bleq	fe695ac8 <_estack+0xde690ac8>
   12d74:	e7040000 	str	r0, [r4, -r0]
   12d78:	0001130c 	andeq	r1, r1, ip, lsl #6
   12d7c:	1e0b5800 	cdpne	8, 0, cr5, cr11, cr0, {0}
   12d80:	0400000a 	streq	r0, [r0], #-10
   12d84:	00ed0ee9 	rsceq	r0, sp, r9, ror #29
   12d88:	0b5c0000 	bleq	1712d90 <__ccfg+0x16f2de8>
   12d8c:	00000e9d 	muleq	r0, sp, lr
   12d90:	2c09ea04 			; <UNDEFINED> instruction: 0x2c09ea04
   12d94:	64000000 	strvs	r0, [r0], #-0
   12d98:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12d9c:	04560000 	ldrbeq	r0, [r6], #-0
   12da0:	56140000 	ldrpl	r0, [r4], -r0
   12da4:	14000004 	strne	r0, [r0], #-4
   12da8:	000000f9 	strdeq	r0, [r0], -r9
   12dac:	0005aa14 	andeq	sl, r5, r4, lsl sl
   12db0:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12db4:	0f000000 	svceq	0x00000000
   12db8:	00046104 	andeq	r6, r4, r4, lsl #2
   12dbc:	04561500 	ldrbeq	r1, [r6], #-1280	; 0xfffffb00
   12dc0:	65160000 	ldrvs	r0, [r6, #-0]
   12dc4:	2800000d 	stmdacs	r0, {r0, r2, r3}
   12dc8:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   12dcc:	0005aa08 	andeq	sl, r5, r8, lsl #20
   12dd0:	09041700 	stmdbeq	r4, {r8, r9, sl, ip}
   12dd4:	67040000 	strvs	r0, [r4, -r0]
   12dd8:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12ddc:	17000000 	strne	r0, [r0, -r0]
   12de0:	000007e2 	andeq	r0, r0, r2, ror #15
   12de4:	0b026c04 	bleq	addfc <__ccfg+0x8de54>
   12de8:	00000696 	muleq	r0, r6, r6
   12dec:	02f71704 	rscseq	r1, r7, #4, 14	; 0x100000
   12df0:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12df4:	06961402 	ldreq	r1, [r6], r2, lsl #8
   12df8:	17080000 	strne	r0, [r8, -r0]
   12dfc:	00000f10 	andeq	r0, r0, r0, lsl pc
   12e00:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   12e04:	00000696 	muleq	r0, r6, r6
   12e08:	057f170c 	ldrbeq	r1, [pc, #-1804]!	; 12704 <__exidx_end+0xc984>
   12e0c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   12e10:	002c0802 	eoreq	r0, ip, r2, lsl #16
   12e14:	17100000 	ldrne	r0, [r0, -r0]
   12e18:	000004d4 	ldrdeq	r0, [r0], -r4
   12e1c:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   12e20:	00000896 	muleq	r0, r6, r8
   12e24:	0e7d1714 	mrceq	7, 3, r1, cr13, cr4, {0}
   12e28:	72040000 	andvc	r0, r4, #0
   12e2c:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12e30:	17300000 	ldrne	r0, [r0, -r0]!
   12e34:	000042a7 	andeq	r4, r0, r7, lsr #5
   12e38:	16027304 	strne	r7, [r2], -r4, lsl #6
   12e3c:	000008ab 	andeq	r0, r0, fp, lsr #17
   12e40:	078a1734 			; <UNDEFINED> instruction: 0x078a1734
   12e44:	75040000 	strvc	r0, [r4, #-0]
   12e48:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12e4c:	17380000 	ldrne	r0, [r8, -r0]!
   12e50:	00000884 	andeq	r0, r0, r4, lsl #17
   12e54:	0a027704 	beq	b0a6c <__ccfg+0x90ac4>
   12e58:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
   12e5c:	0350173c 	cmpeq	r0, #60, 14	; 0xf00000
   12e60:	7a040000 	bvc	112e68 <__ccfg+0xf2ec0>
   12e64:	01791302 	cmneq	r9, r2, lsl #6
   12e68:	17400000 	strbne	r0, [r0, -r0]
   12e6c:	0000040b 	andeq	r0, r0, fp, lsl #8
   12e70:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   12e74:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e78:	06091744 	streq	r1, [r9], -r4, asr #14
   12e7c:	7c040000 	stcvc	0, cr0, [r4], {-0}
   12e80:	01791302 	cmneq	r9, r2, lsl #6
   12e84:	17480000 	strbne	r0, [r8, -r0]
   12e88:	0000081f 	andeq	r0, r0, pc, lsl r8
   12e8c:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   12e90:	000008c2 	andeq	r0, r0, r2, asr #17
   12e94:	0b5a174c 	bleq	1698bcc <__ccfg+0x1678c24>
   12e98:	80040000 	andhi	r0, r4, r0
   12e9c:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12ea0:	17500000 	ldrbne	r0, [r0, -r0]
   12ea4:	00000c53 	andeq	r0, r0, r3, asr ip
   12ea8:	09028104 	stmdbeq	r2, {r2, r8, pc}
   12eac:	000005aa 	andeq	r0, r0, sl, lsr #11
   12eb0:	0c6d1754 	stcleq	7, cr1, [sp], #-336	; 0xfffffeb0
   12eb4:	a4040000 	strge	r0, [r4], #-0
   12eb8:	08710702 	ldmdaeq	r1!, {r1, r8, r9, sl}^
   12ebc:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   12ec0:	00000a16 	andeq	r0, r0, r6, lsl sl
   12ec4:	1302a804 	movwne	sl, #10244	; 0x2804
   12ec8:	000002aa 	andeq	r0, r0, sl, lsr #5
   12ecc:	ae180148 	mufgeem	f0, f0, #0.0
   12ed0:	04000006 	streq	r0, [r0], #-6
   12ed4:	671202a9 	ldrvs	r0, [r2, -r9, lsr #5]
   12ed8:	4c000002 	stcmi	0, cr0, [r0], {2}
   12edc:	06951801 	ldreq	r1, [r5], r1, lsl #16
   12ee0:	ad040000 	stcge	0, cr0, [r4, #-0]
   12ee4:	08d30c02 	ldmeq	r3, {r1, sl, fp}^
   12ee8:	02dc0000 	sbcseq	r0, ip, #0
   12eec:	000ce918 	andeq	lr, ip, r8, lsl r9
   12ef0:	02b20400 	adcseq	r0, r2, #0, 8
   12ef4:	00065710 	andeq	r5, r6, r0, lsl r7
   12ef8:	1802e000 	stmdane	r2, {sp, lr, pc}
   12efc:	00000aa6 	andeq	r0, r0, r6, lsr #21
   12f00:	0a02b404 	beq	bff18 <__ccfg+0x9ff70>
   12f04:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12f08:	0f0002ec 	svceq	0x000002ec
   12f0c:	0005b004 	andeq	fp, r5, r4
   12f10:	08010200 	stmdaeq	r1, {r9}
   12f14:	00000c64 	andeq	r0, r0, r4, ror #24
   12f18:	0005b015 	andeq	fp, r5, r5, lsl r0
   12f1c:	38040f00 	stmdacc	r4, {r8, r9, sl, fp}
   12f20:	13000004 	movwne	r0, #4
   12f24:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f28:	000005e0 	andeq	r0, r0, r0, ror #11
   12f2c:	00045614 	andeq	r5, r4, r4, lsl r6
   12f30:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12f34:	e0140000 	ands	r0, r4, r0
   12f38:	14000005 	strne	r0, [r0], #-5
   12f3c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f40:	b7040f00 	strlt	r0, [r4, -r0, lsl #30]
   12f44:	0f000005 	svceq	0x00000005
   12f48:	0005c204 	andeq	ip, r5, r4, lsl #4
   12f4c:	008b1300 	addeq	r1, fp, r0, lsl #6
   12f50:	060a0000 	streq	r0, [sl], -r0
   12f54:	56140000 	ldrpl	r0, [r4], -r0
   12f58:	14000004 	strne	r0, [r0], #-4
   12f5c:	000000f9 	strdeq	r0, [r0], -r9
   12f60:	00008b14 	andeq	r8, r0, r4, lsl fp
   12f64:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12f68:	0f000000 	svceq	0x00000000
   12f6c:	0005ec04 	andeq	lr, r5, r4, lsl #24
   12f70:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12f74:	06240000 	strteq	r0, [r4], -r0
   12f78:	56140000 	ldrpl	r0, [r4], -r0
   12f7c:	14000004 	strne	r0, [r0], #-4
   12f80:	000000f9 	strdeq	r0, [r0], -r9
   12f84:	10040f00 	andne	r0, r4, r0, lsl #30
   12f88:	08000006 	stmdaeq	r0, {r1, r2}
   12f8c:	00000055 	andeq	r0, r0, r5, asr r0
   12f90:	0000063a 	andeq	r0, r0, sl, lsr r6
   12f94:	00002509 	andeq	r2, r0, r9, lsl #10
   12f98:	08000200 	stmdaeq	r0, {r9}
   12f9c:	00000055 	andeq	r0, r0, r5, asr r0
   12fa0:	0000064a 	andeq	r0, r0, sl, asr #12
   12fa4:	00002509 	andeq	r2, r0, r9, lsl #10
   12fa8:	04000000 	streq	r0, [r0], #-0
   12fac:	0000046e 	andeq	r0, r0, lr, ror #8
   12fb0:	1a012404 	bne	5bfc8 <__ccfg+0x3c020>
   12fb4:	000002f5 	strdeq	r0, [r0], -r5
   12fb8:	000cdd19 	andeq	sp, ip, r9, lsl sp
   12fbc:	28040c00 	stmdacs	r4, {sl, fp}
   12fc0:	06900801 	ldreq	r0, [r0], r1, lsl #16
   12fc4:	ca170000 	bgt	5d2fcc <__ccfg+0x5b3024>
   12fc8:	0400000e 	streq	r0, [r0], #-14
   12fcc:	9011012a 	andsls	r0, r1, sl, lsr #2
   12fd0:	00000006 	andeq	r0, r0, r6
   12fd4:	000bce17 	andeq	ip, fp, r7, lsl lr
   12fd8:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   12fdc:	00002c07 	andeq	r2, r0, r7, lsl #24
   12fe0:	72170400 	andsvc	r0, r7, #0, 8
   12fe4:	04000007 	streq	r0, [r0], #-7
   12fe8:	960b012c 	strls	r0, [fp], -ip, lsr #2
   12fec:	08000006 	stmdaeq	r0, {r1, r2}
   12ff0:	57040f00 	strpl	r0, [r4, -r0, lsl #30]
   12ff4:	0f000006 	svceq	0x00000006
   12ff8:	00064a04 	andeq	r4, r6, r4, lsl #20
   12ffc:	03da1900 	bicseq	r1, sl, #0, 18
   13000:	040e0000 	streq	r0, [lr], #-0
   13004:	d5080144 	strle	r0, [r8, #-324]	; 0xfffffebc
   13008:	17000006 	strne	r0, [r0, -r6]
   1300c:	00001651 	andeq	r1, r0, r1, asr r6
   13010:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   13014:	000006d5 	ldrdeq	r0, [r0], -r5
   13018:	08311700 	ldmdaeq	r1!, {r8, r9, sl, ip}
   1301c:	46040000 	strmi	r0, [r4], -r0
   13020:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   13024:	17060000 	strne	r0, [r6, -r0]
   13028:	00001503 	andeq	r1, r0, r3, lsl #10
   1302c:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   13030:	00000063 	andeq	r0, r0, r3, rrx
   13034:	6308000c 	movwvs	r0, #32780	; 0x800c
   13038:	e5000000 	str	r0, [r0, #-0]
   1303c:	09000006 	stmdbeq	r0, {r1, r2}
   13040:	00000025 	andeq	r0, r0, r5, lsr #32
   13044:	d01a0002 	andsle	r0, sl, r2
   13048:	07028504 	streq	r8, [r2, -r4, lsl #10]
   1304c:	000007fa 	strdeq	r0, [r0], -sl
   13050:	000e7017 	andeq	r7, lr, r7, lsl r0
   13054:	02870400 	addeq	r0, r7, #0, 8
   13058:	00002518 	andeq	r2, r0, r8, lsl r5
   1305c:	f1170000 			; <UNDEFINED> instruction: 0xf1170000
   13060:	0400000c 	streq	r0, [r0], #-12
   13064:	aa120288 	bge	493a8c <__ccfg+0x473ae4>
   13068:	04000005 	streq	r0, [r0], #-5
   1306c:	00043817 	andeq	r3, r4, r7, lsl r8
   13070:	02890400 	addeq	r0, r9, #0, 8
   13074:	0007fa10 	andeq	pc, r7, r0, lsl sl	; <UNPREDICTABLE>
   13078:	43170800 	tstmi	r7, #0, 16
   1307c:	0400000b 	streq	r0, [r0], #-11
   13080:	8f17028a 	svchi	0x0017028a
   13084:	24000001 	strcs	r0, [r0], #-1
   13088:	0007e917 	andeq	lr, r7, r7, lsl r9
   1308c:	028b0400 	addeq	r0, fp, #0, 8
   13090:	00002c0f 	andeq	r2, r0, pc, lsl #24
   13094:	c5174800 	ldrgt	r4, [r7, #-2048]	; 0xfffff800
   13098:	0400000e 	streq	r0, [r0], #-14
   1309c:	782c028c 	stmdavc	ip!, {r2, r3, r7, r9}
   130a0:	50000000 	andpl	r0, r0, r0
   130a4:	00007f17 	andeq	r7, r0, r7, lsl pc
   130a8:	028d0400 	addeq	r0, sp, #0, 8
   130ac:	00069c1a 	andeq	r9, r6, sl, lsl ip
   130b0:	39175800 	ldmdbcc	r7, {fp, ip, lr}
   130b4:	04000006 	streq	r0, [r0], #-6
   130b8:	ed16028e 	lfm	f0, 4, [r6, #-568]	; 0xfffffdc8
   130bc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   130c0:	000cfe17 	andeq	pc, ip, r7, lsl lr	; <UNPREDICTABLE>
   130c4:	028f0400 	addeq	r0, pc, #0, 8
   130c8:	0000ed16 	andeq	lr, r0, r6, lsl sp
   130cc:	71177000 	tstvc	r7, r0
   130d0:	04000000 	streq	r0, [r0], #-0
   130d4:	ed160290 	lfm	f0, 4, [r6, #-576]	; 0xfffffdc0
   130d8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   130dc:	000b6a17 	andeq	r6, fp, r7, lsl sl
   130e0:	02910400 	addseq	r0, r1, #0, 8
   130e4:	00080a10 	andeq	r0, r8, r0, lsl sl
   130e8:	15178000 	ldrne	r8, [r7, #-0]
   130ec:	04000004 	streq	r0, [r0], #-4
   130f0:	1a100292 	bne	413b40 <__ccfg+0x3f3b98>
   130f4:	88000008 	stmdahi	r0, {r3}
   130f8:	000c8d17 	andeq	r8, ip, r7, lsl sp
   130fc:	02930400 	addseq	r0, r3, #0, 8
   13100:	00002c0f 	andeq	r2, r0, pc, lsl #24
   13104:	ac17a000 	ldcge	0, cr10, [r7], {-0}
   13108:	04000002 	streq	r0, [r0], #-2
   1310c:	ed160294 	lfm	f0, 4, [r6, #-592]	; 0xfffffdb0
   13110:	a4000000 	strge	r0, [r0], #-0
   13114:	00069f17 	andeq	r9, r6, r7, lsl pc
   13118:	02950400 	addseq	r0, r5, #0, 8
   1311c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13120:	bb17ac00 	bllt	5fe128 <__ccfg+0x5de180>
   13124:	04000005 	streq	r0, [r0], #-5
   13128:	ed160296 	lfm	f0, 4, [r6, #-600]	; 0xfffffda8
   1312c:	b4000000 	strlt	r0, [r0], #-0
   13130:	00084a17 	andeq	r4, r8, r7, lsl sl
   13134:	02970400 	addseq	r0, r7, #0, 8
   13138:	0000ed16 	andeq	lr, r0, r6, lsl sp
   1313c:	2817bc00 	ldmdacs	r7, {sl, fp, ip, sp, pc}
   13140:	04000006 	streq	r0, [r0], #-6
   13144:	ed160298 	lfm	f0, 4, [r6, #-608]	; 0xfffffda0
   13148:	c4000000 	strgt	r0, [r0], #-0
   1314c:	00090217 	andeq	r0, r9, r7, lsl r2
   13150:	02990400 	addseq	r0, r9, #0, 8
   13154:	00002c08 	andeq	r2, r0, r8, lsl #24
   13158:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   1315c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   13160:	0000080a 	andeq	r0, r0, sl, lsl #16
   13164:	00002509 	andeq	r2, r0, r9, lsl #10
   13168:	08001900 	stmdaeq	r0, {r8, fp, ip}
   1316c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   13170:	0000081a 	andeq	r0, r0, sl, lsl r8
   13174:	00002509 	andeq	r2, r0, r9, lsl #10
   13178:	08000700 	stmdaeq	r0, {r8, r9, sl}
   1317c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   13180:	0000082a 	andeq	r0, r0, sl, lsr #16
   13184:	00002509 	andeq	r2, r0, r9, lsl #10
   13188:	1a001700 	bne	18d90 <__exidx_end+0x13010>
   1318c:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   13190:	00085107 	andeq	r5, r8, r7, lsl #2
   13194:	03c01700 	biceq	r1, r0, #0, 14
   13198:	a1040000 	mrsge	r0, (UNDEF: 4)
   1319c:	08511b02 	ldmdaeq	r1, {r1, r8, r9, fp, ip}^
   131a0:	17000000 	strne	r0, [r0, -r0]
   131a4:	00000f18 	andeq	r0, r0, r8, lsl pc
   131a8:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   131ac:	00000861 	andeq	r0, r0, r1, ror #16
   131b0:	ef080078 	svc	0x00080078
   131b4:	61000002 	tstvs	r0, r2
   131b8:	09000008 	stmdbeq	r0, {r3}
   131bc:	00000025 	andeq	r0, r0, r5, lsr #32
   131c0:	2508001d 	strcs	r0, [r8, #-29]	; 0xffffffe3
   131c4:	71000000 	mrsvc	r0, (UNDEF: 0)
   131c8:	09000008 	stmdbeq	r0, {r3}
   131cc:	00000025 	andeq	r0, r0, r5, lsr #32
   131d0:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   131d4:	03028304 	movweq	r8, #8964	; 0x2304
   131d8:	00000896 	muleq	r0, r6, r8
   131dc:	000d651c 	andeq	r6, sp, ip, lsl r5
   131e0:	029a0400 	addseq	r0, sl, #0, 8
   131e4:	0006e50b 	andeq	lr, r6, fp, lsl #10
   131e8:	0b521c00 	bleq	149a1f0 <__ccfg+0x147a248>
   131ec:	a3040000 	movwge	r0, #16384	; 0x4000
   131f0:	082a0b02 	stmdaeq	sl!, {r1, r8, r9, fp}
   131f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   131f8:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   131fc:	000008a6 	andeq	r0, r0, r6, lsr #17
   13200:	00002509 	andeq	r2, r0, r9, lsl #10
   13204:	1d001800 	stcne	8, cr1, [r0, #-0]
   13208:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1320c:	08a6040f 	stmiaeq	r6!, {r0, r1, r2, r3, sl}
   13210:	bc1e0000 	ldclt	0, cr0, [lr], {-0}
   13214:	14000008 	strne	r0, [r0], #-8
   13218:	00000456 	andeq	r0, r0, r6, asr r4
   1321c:	b1040f00 	tstlt	r4, r0, lsl #30
   13220:	0f000008 	svceq	0x00000008
   13224:	00017904 	andeq	r7, r1, r4, lsl #18
   13228:	08d31e00 	ldmeq	r3, {r9, sl, fp, ip}^
   1322c:	2c140000 	ldccs	0, cr0, [r4], {-0}
   13230:	00000000 	andeq	r0, r0, r0
   13234:	08d9040f 	ldmeq	r9, {r0, r1, r2, r3, sl}^
   13238:	040f0000 	streq	r0, [pc], #-0	; 13240 <__exidx_end+0xd4c0>
   1323c:	000008c8 	andeq	r0, r0, r8, asr #17
   13240:	00064a08 	andeq	r4, r6, r8, lsl #20
   13244:	0008ef00 	andeq	lr, r8, r0, lsl #30
   13248:	00250900 	eoreq	r0, r5, r0, lsl #18
   1324c:	00020000 	andeq	r0, r2, r0
   13250:	000ac21f 	andeq	ip, sl, pc, lsl r2
   13254:	03330400 	teqeq	r3, #0, 8
   13258:	00045617 	andeq	r5, r4, r7, lsl r6
   1325c:	0abb1f00 	beq	feedae64 <_estack+0xdeed5e64>
   13260:	34040000 	strcc	r0, [r4], #-0
   13264:	045c1d03 	ldrbeq	r1, [ip], #-3331	; 0xfffff2fd
   13268:	49200000 	stmdbmi	r0!, {}	; <UNPREDICTABLE>
   1326c:	06000044 	streq	r0, [r0], -r4, asr #32
   13270:	05aa0e67 	streq	r0, [sl, #3687]!	; 0xe67
   13274:	78210000 	stmdavc	r1!, {}	; <UNPREDICTABLE>
   13278:	0600000e 	streq	r0, [r0], -lr
   1327c:	002c0590 	mlaeq	ip, r0, r5, r0
   13280:	4aa40000 	bmi	fe913288 <_estack+0xde90e288>
   13284:	00380000 	eorseq	r0, r8, r0
   13288:	9c010000 	stcls	0, cr0, [r1], {-0}
   1328c:	00000944 	andeq	r0, r0, r4, asr #18
   13290:	00474d22 	subeq	r4, r7, r2, lsr #26
   13294:	12490100 	subne	r0, r9, #0, 2
   13298:	00000456 	andeq	r0, r0, r6, asr r4
   1329c:	00005b5c 	andeq	r5, r0, ip, asr fp
   132a0:	00005b56 	andeq	r5, r0, r6, asr fp
   132a4:	46a62300 	strtmi	r2, [r6], r0, lsl #6
   132a8:	9f060000 	svcls	0x00060000
   132ac:	004a9006 	subeq	r9, sl, r6
   132b0:	00001400 	andeq	r1, r0, r0, lsl #8
   132b4:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
   132b8:	00001652 	andeq	r1, r0, r2, asr r6
   132bc:	25153e01 	ldrcs	r3, [r5, #-3585]	; 0xfffff1ff
   132c0:	01000000 	mrseq	r0, (UNDEF: 0)
   132c4:	474d2250 	smlsldmi	r2, sp, r0, r2
   132c8:	40010000 	andmi	r0, r1, r0
   132cc:	00045612 	andeq	r5, r4, r2, lsl r6
   132d0:	005b8d00 	subseq	r8, fp, r0, lsl #26
   132d4:	005b8900 	subseq	r8, fp, r0, lsl #18
   132d8:	26000000 	strcs	r0, [r0], -r0
   132dc:	04000009 	streq	r0, [r0], #-9
   132e0:	0045e900 	subeq	lr, r5, r0, lsl #18
   132e4:	5f010400 	svcpl	0x00010400
   132e8:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   132ec:	0000475f 	andeq	r4, r0, pc, asr r7
   132f0:	00004700 	andeq	r4, r0, r0, lsl #14
   132f4:	00009300 	andeq	r9, r0, r0, lsl #6
   132f8:	69050402 	stmdbvs	r5, {r1, sl}
   132fc:	0300746e 	movweq	r7, #1134	; 0x46e
   13300:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
   13304:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13308:	0007f805 	andeq	pc, r7, r5, lsl #16
   1330c:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
   13310:	00004430 	andeq	r4, r0, r0, lsr r4
   13314:	000bd504 	andeq	sp, fp, r4, lsl #10
   13318:	01650100 	cmneq	r5, r0, lsl #2
   1331c:	00002417 	andeq	r2, r0, r7, lsl r4
   13320:	06010300 	streq	r0, [r1], -r0, lsl #6
   13324:	00000c5d 	andeq	r0, r0, sp, asr ip
   13328:	5b080103 	blpl	21373c <__ccfg+0x1f3794>
   1332c:	0300000c 	movweq	r0, #12
   13330:	0a6b0502 	beq	1ad4740 <__ccfg+0x1ab4798>
   13334:	02030000 	andeq	r0, r3, #0
   13338:	000d6c07 	andeq	r6, sp, r7, lsl #24
   1333c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   13340:	000007fd 	strdeq	r0, [r0], -sp
   13344:	26070403 	strcs	r0, [r7], -r3, lsl #8
   13348:	03000004 	movweq	r0, #4
   1334c:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
   13350:	4f050000 	svcmi	0x00050000
   13354:	0200000e 	andeq	r0, r0, #14
   13358:	00620e2e 	rsbeq	r0, r2, lr, lsr #28
   1335c:	ff050000 			; <UNDEFINED> instruction: 0xff050000
   13360:	02000002 	andeq	r0, r0, #2
   13364:	00620e74 	rsbeq	r0, r2, r4, ror lr
   13368:	04060000 	streq	r0, [r6], #-0
   1336c:	b103a502 	tstlt	r3, r2, lsl #10
   13370:	07000000 	streq	r0, [r0, -r0]
   13374:	0000076c 	andeq	r0, r0, ip, ror #14
   13378:	390ca702 	stmdbcc	ip, {r1, r8, r9, sl, sp, pc}
   1337c:	07000000 	streq	r0, [r0, -r0]
   13380:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
   13384:	b113a802 	tstlt	r3, r2, lsl #16
   13388:	00000000 	andeq	r0, r0, r0
   1338c:	00004d08 	andeq	r4, r0, r8, lsl #26
   13390:	0000c100 	andeq	ip, r0, r0, lsl #2
   13394:	00240900 	eoreq	r0, r4, r0, lsl #18
   13398:	00030000 	andeq	r0, r3, r0
   1339c:	a202080a 	andge	r0, r2, #655360	; 0xa0000
   133a0:	0000e509 	andeq	lr, r0, r9, lsl #10
   133a4:	038e0b00 	orreq	r0, lr, #0, 22
   133a8:	a4020000 	strge	r0, [r2], #-0
   133ac:	00001d07 	andeq	r1, r0, r7, lsl #26
   133b0:	010b0000 	mrseq	r0, (UNDEF: 11)
   133b4:	02000006 	andeq	r0, r0, #6
   133b8:	008f05a9 	addeq	r0, pc, r9, lsr #11
   133bc:	00040000 	andeq	r0, r4, r0
   133c0:	0008b505 	andeq	fp, r8, r5, lsl #10
   133c4:	03aa0200 			; <UNDEFINED> instruction: 0x03aa0200
   133c8:	000000c1 	andeq	r0, r0, r1, asr #1
   133cc:	4205040c 	andmi	r0, r5, #12, 8	; 0xc000000
   133d0:	03000008 	movweq	r0, #8
   133d4:	00691916 	rsbeq	r1, r9, r6, lsl r9
   133d8:	53050000 	movwpl	r0, #20480	; 0x5000
   133dc:	04000002 	streq	r0, [r0], #-2
   133e0:	001d0d0c 	andseq	r0, sp, ip, lsl #26
   133e4:	2a050000 	bcs	1533ec <__ccfg+0x133444>
   133e8:	03000007 	movweq	r0, #7
   133ec:	00ff1b23 	rscseq	r1, pc, r3, lsr #22
   133f0:	320d0000 	andcc	r0, sp, #0
   133f4:	18000003 	stmdane	r0, {r0, r1}
   133f8:	71083403 	tstvc	r8, r3, lsl #8
   133fc:	0b000001 	bleq	13408 <__exidx_end+0xd688>
   13400:	00000eca 	andeq	r0, r0, sl, asr #29
   13404:	71133603 	tstvc	r3, r3, lsl #12
   13408:	00000001 	andeq	r0, r0, r1
   1340c:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   13410:	1d073703 	stcne	7, cr3, [r7, #-12]
   13414:	04000000 	streq	r0, [r0], #-0
   13418:	000b620b 	andeq	r6, fp, fp, lsl #4
   1341c:	0b370300 	bleq	dd4024 <__ccfg+0xdb407c>
   13420:	0000001d 	andeq	r0, r0, sp, lsl r0
   13424:	43fb0b08 	mvnsmi	r0, #8, 22	; 0x2000
   13428:	37030000 	strcc	r0, [r3, -r0]
   1342c:	00001d14 	andeq	r1, r0, r4, lsl sp
   13430:	550b0c00 	strpl	r0, [fp, #-3072]	; 0xfffff400
   13434:	03000004 	movweq	r0, #4
   13438:	001d1b37 	andseq	r1, sp, r7, lsr fp
   1343c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   13440:	0300785f 	movweq	r7, #2143	; 0x85f
   13444:	01770b38 	cmneq	r7, r8, lsr fp
   13448:	00140000 	andseq	r0, r4, r0
   1344c:	0117040f 	tsteq	r7, pc, lsl #8
   13450:	f3080000 	vhadd.u8	d0, d8, d0
   13454:	87000000 	strhi	r0, [r0, -r0]
   13458:	09000001 	stmdbeq	r0, {r0}
   1345c:	00000024 	andeq	r0, r0, r4, lsr #32
   13460:	7d0d0000 	stcvc	0, cr0, [sp, #-0]
   13464:	2400000b 	strcs	r0, [r0], #-11
   13468:	0a083c03 	beq	22247c <__ccfg+0x2024d4>
   1346c:	0b000002 	bleq	1347c <__exidx_end+0xd6fc>
   13470:	0000056c 	andeq	r0, r0, ip, ror #10
   13474:	1d093e03 	stcne	14, cr3, [r9, #-12]
   13478:	00000000 	andeq	r0, r0, r0
   1347c:	0003b70b 	andeq	fp, r3, fp, lsl #14
   13480:	093f0300 	ldmdbeq	pc!, {r8, r9}	; <UNPREDICTABLE>
   13484:	0000001d 	andeq	r0, r0, sp, lsl r0
   13488:	03580b04 	cmpeq	r8, #4, 22	; 0x1000
   1348c:	40030000 	andmi	r0, r3, r0
   13490:	00001d09 	andeq	r1, r0, r9, lsl #26
   13494:	740b0800 	strvc	r0, [fp], #-2048	; 0xfffff800
   13498:	03000006 	movweq	r0, #6
   1349c:	001d0941 	andseq	r0, sp, r1, asr #18
   134a0:	0b0c0000 	bleq	3134a8 <__ccfg+0x2f3500>
   134a4:	00000954 	andeq	r0, r0, r4, asr r9
   134a8:	1d094203 	sfmne	f4, 4, [r9, #-12]
   134ac:	10000000 	andne	r0, r0, r0
   134b0:	000ace0b 	andeq	ip, sl, fp, lsl #28
   134b4:	09430300 	stmdbeq	r3, {r8, r9}^
   134b8:	0000001d 	andeq	r0, r0, sp, lsl r0
   134bc:	03460b14 	movteq	r0, #27412	; 0x6b14
   134c0:	44030000 	strmi	r0, [r3], #-0
   134c4:	00001d09 	andeq	r1, r0, r9, lsl #26
   134c8:	750b1800 	strvc	r1, [fp, #-2048]	; 0xfffff800
   134cc:	03000005 	movweq	r0, #5
   134d0:	001d0945 	andseq	r0, sp, r5, asr #18
   134d4:	0b1c0000 	bleq	7134dc <__ccfg+0x6f3534>
   134d8:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   134dc:	1d094603 	stcne	6, cr4, [r9, #-12]
   134e0:	20000000 	andcs	r0, r0, r0
   134e4:	003b1000 	eorseq	r1, fp, r0
   134e8:	01080000 	mrseq	r0, (UNDEF: 8)
   134ec:	4f084f03 	svcmi	0x00084f03
   134f0:	0b000002 	bleq	13500 <__exidx_end+0xd780>
   134f4:	00000d33 	andeq	r0, r0, r3, lsr sp
   134f8:	4f0a5003 	svcmi	0x000a5003
   134fc:	00000002 	andeq	r0, r0, r2
   13500:	000c170b 	andeq	r1, ip, fp, lsl #14
   13504:	09510300 	ldmdbeq	r1, {r8, r9}^
   13508:	0000024f 	andeq	r0, r0, pc, asr #4
   1350c:	0dcc1180 	stfeqe	f1, [ip, #512]	; 0x200
   13510:	53030000 	movwpl	r0, #12288	; 0x3000
   13514:	0000f30a 	andeq	pc, r0, sl, lsl #6
   13518:	11010000 	mrsne	r0, (UNDEF: 1)
   1351c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
   13520:	f30a5603 	vmax.u8	d5, d10, d3
   13524:	04000000 	streq	r0, [r0], #-0
   13528:	f1080001 	cps	#1
   1352c:	5f000000 	svcpl	0x00000000
   13530:	09000002 	stmdbeq	r0, {r1}
   13534:	00000024 	andeq	r0, r0, r4, lsr #32
   13538:	1610001f 			; <UNDEFINED> instruction: 0x1610001f
   1353c:	9000000a 	andls	r0, r0, sl
   13540:	08620301 	stmdaeq	r2!, {r0, r8, r9}^
   13544:	000002a2 	andeq	r0, r0, r2, lsr #5
   13548:	000eca0b 	andeq	ip, lr, fp, lsl #20
   1354c:	12630300 	rsbne	r0, r3, #0, 6
   13550:	000002a2 	andeq	r0, r0, r2, lsr #5
   13554:	05840b00 	streq	r0, [r4, #2816]	; 0xb00
   13558:	64030000 	strvs	r0, [r3], #-0
   1355c:	00001d06 	andeq	r1, r0, r6, lsl #26
   13560:	070b0400 	streq	r0, [fp, -r0, lsl #8]
   13564:	03000003 	movweq	r0, #3
   13568:	02a80966 	adceq	r0, r8, #1671168	; 0x198000
   1356c:	0b080000 	bleq	213574 <__ccfg+0x1f35cc>
   13570:	0000003b 	andeq	r0, r0, fp, lsr r0
   13574:	0a1e6703 	beq	7ad188 <__ccfg+0x78d1e0>
   13578:	88000002 	stmdahi	r0, {r1}
   1357c:	5f040f00 	svcpl	0x00040f00
   13580:	08000002 	stmdaeq	r0, {r1}
   13584:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
   13588:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
   1358c:	00002409 	andeq	r2, r0, r9, lsl #8
   13590:	0f001f00 	svceq	0x00001f00
   13594:	0002be04 	andeq	fp, r2, r4, lsl #28
   13598:	c50d1200 	strgt	r1, [sp, #-512]	; 0xfffffe00
   1359c:	0800000c 	stmdaeq	r0, {r2, r3}
   135a0:	e7087a03 	str	r7, [r8, -r3, lsl #20]
   135a4:	0b000002 	bleq	135b4 <__exidx_end+0xd834>
   135a8:	00000cd7 	ldrdeq	r0, [r0], -r7
   135ac:	e7117b03 	ldr	r7, [r1, -r3, lsl #22]
   135b0:	00000002 	andeq	r0, r0, r2
   135b4:	001da60b 	andseq	sl, sp, fp, lsl #12
   135b8:	067c0300 	ldrbteq	r0, [ip], -r0, lsl #6
   135bc:	0000001d 	andeq	r0, r0, sp, lsl r0
   135c0:	040f0004 	streq	r0, [pc], #-4	; 135c8 <__exidx_end+0xd848>
   135c4:	0000004d 	andeq	r0, r0, sp, asr #32
   135c8:	00044d0d 	andeq	r4, r4, sp, lsl #26
   135cc:	ba036800 	blt	ed5d4 <__ccfg+0xcd62c>
   135d0:	00043008 	andeq	r3, r4, r8
   135d4:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   135d8:	12bb0300 	adcsne	r0, fp, #0, 6
   135dc:	000002e7 	andeq	r0, r0, r7, ror #5
   135e0:	725f0e00 	subsvc	r0, pc, #0, 28
   135e4:	07bc0300 	ldreq	r0, [ip, r0, lsl #6]!
   135e8:	0000001d 	andeq	r0, r0, sp, lsl r0
   135ec:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   135f0:	07bd0300 	ldreq	r0, [sp, r0, lsl #6]!
   135f4:	0000001d 	andeq	r0, r0, sp, lsl r0
   135f8:	01c40b08 	biceq	r0, r4, r8, lsl #22
   135fc:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
   13600:	00005409 	andeq	r5, r0, r9, lsl #8
   13604:	590b0c00 	stmdbpl	fp, {sl, fp}
   13608:	03000008 	movweq	r0, #8
   1360c:	005409bf 	ldrheq	r0, [r4], #-159	; 0xffffff61
   13610:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   13614:	0066625f 	rsbeq	r6, r6, pc, asr r2
   13618:	bf11c003 	svclt	0x0011c003
   1361c:	10000002 	andne	r0, r0, r2
   13620:	0001bb0b 	andeq	fp, r1, fp, lsl #22
   13624:	07c10300 	strbeq	r0, [r1, r0, lsl #6]
   13628:	0000001d 	andeq	r0, r0, sp, lsl r0
   1362c:	030c0b18 	movweq	r0, #51992	; 0xcb18
   13630:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
   13634:	0000f10a 	andeq	pc, r0, sl, lsl #2
   13638:	350b1c00 	strcc	r1, [fp, #-3072]	; 0xfffff400
   1363c:	0300001d 	movweq	r0, #29
   13640:	05b41dca 	ldreq	r1, [r4, #3530]!	; 0xdca
   13644:	0b200000 	bleq	81364c <__ccfg+0x7f36a4>
   13648:	00001cfc 	strdeq	r1, [r0], -ip
   1364c:	de1dcc03 	cdple	12, 1, cr12, cr13, cr3, {0}
   13650:	24000005 	strcs	r0, [r0], #-5
   13654:	000eea0b 	andeq	lr, lr, fp, lsl #20
   13658:	0dcf0300 	stcleq	3, cr0, [pc]	; 13660 <__exidx_end+0xd8e0>
   1365c:	00000602 	andeq	r0, r0, r2, lsl #12
   13660:	1cea0b28 	vstmiane	sl!, {d16-<overflow reg d35>}
   13664:	d0030000 	andle	r0, r3, r0
   13668:	00061c09 	andeq	r1, r6, r9, lsl #24
   1366c:	5f0e2c00 	svcpl	0x000e2c00
   13670:	03006275 	movweq	r6, #629	; 0x275
   13674:	02bf11d3 	adcseq	r1, pc, #-1073741772	; 0xc0000034
   13678:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   1367c:	0070755f 	rsbseq	r7, r0, pc, asr r5
   13680:	e712d403 	ldr	sp, [r2, -r3, lsl #8]
   13684:	38000002 	stmdacc	r0, {r1}
   13688:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   1368c:	07d50300 	ldrbeq	r0, [r5, r0, lsl #6]
   13690:	0000001d 	andeq	r0, r0, sp, lsl r0
   13694:	0f210b3c 	svceq	0x00210b3c
   13698:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
   1369c:	00062211 	andeq	r2, r6, r1, lsl r2
   136a0:	6a0b4000 	bvs	2e36a8 <__ccfg+0x2c3700>
   136a4:	0300000e 	movweq	r0, #14
   136a8:	063211d9 			; <UNDEFINED> instruction: 0x063211d9
   136ac:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   136b0:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   136b4:	bf11dc03 	svclt	0x0011dc03
   136b8:	44000002 	strmi	r0, [r0], #-2
   136bc:	000b740b 	andeq	r7, fp, fp, lsl #8
   136c0:	07df0300 	ldrbeq	r0, [pc, r0, lsl #6]
   136c4:	0000001d 	andeq	r0, r0, sp, lsl r0
   136c8:	047c0b4c 	ldrbteq	r0, [ip], #-2892	; 0xfffff4b4
   136cc:	e0030000 	and	r0, r3, r0
   136d0:	0000770a 	andeq	r7, r0, sl, lsl #14
   136d4:	590b5000 	stmdbpl	fp, {ip, lr}
   136d8:	03000047 	movweq	r0, #71	; 0x47
   136dc:	044e12e3 	strbeq	r1, [lr], #-739	; 0xfffffd1d
   136e0:	0b540000 	bleq	15136e8 <__ccfg+0x14f3740>
   136e4:	00000b9a 	muleq	r0, sl, fp
   136e8:	0b0ce703 	bleq	34d2fc <__ccfg+0x32d354>
   136ec:	58000001 	stmdapl	r0, {r0}
   136f0:	000a1e0b 	andeq	r1, sl, fp, lsl #28
   136f4:	0ee90300 	cdpeq	3, 14, cr0, cr9, cr0, {0}
   136f8:	000000e5 	andeq	r0, r0, r5, ror #1
   136fc:	0e9d0b5c 			; <UNDEFINED> instruction: 0x0e9d0b5c
   13700:	ea030000 	b	d3708 <__ccfg+0xb3760>
   13704:	00001d09 	andeq	r1, r0, r9, lsl #26
   13708:	13006400 	movwne	r6, #1024	; 0x400
   1370c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13710:	0000044e 	andeq	r0, r0, lr, asr #8
   13714:	00044e14 	andeq	r4, r4, r4, lsl lr
   13718:	00f11400 	rscseq	r1, r1, r0, lsl #8
   1371c:	a2140000 	andsge	r0, r4, #0
   13720:	14000005 	strne	r0, [r0], #-5
   13724:	0000001d 	andeq	r0, r0, sp, lsl r0
   13728:	59040f00 	stmdbpl	r4, {r8, r9, sl, fp}
   1372c:	15000004 	strne	r0, [r0, #-4]
   13730:	0000044e 	andeq	r0, r0, lr, asr #8
   13734:	000d6516 	andeq	r6, sp, r6, lsl r5
   13738:	03042800 	movweq	r2, #18432	; 0x4800
   1373c:	a2080265 	andge	r0, r8, #1342177286	; 0x50000006
   13740:	17000005 	strne	r0, [r0, -r5]
   13744:	00000904 	andeq	r0, r0, r4, lsl #18
   13748:	07026703 	streq	r6, [r2, -r3, lsl #14]
   1374c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13750:	07e21700 	strbeq	r1, [r2, r0, lsl #14]!
   13754:	6c030000 	stcvs	0, cr0, [r3], {-0}
   13758:	068e0b02 	streq	r0, [lr], r2, lsl #22
   1375c:	17040000 	strne	r0, [r4, -r0]
   13760:	000002f7 	strdeq	r0, [r0], -r7
   13764:	14026c03 	strne	r6, [r2], #-3075	; 0xfffff3fd
   13768:	0000068e 	andeq	r0, r0, lr, lsl #13
   1376c:	0f101708 	svceq	0x00101708
   13770:	6c030000 	stcvs	0, cr0, [r3], {-0}
   13774:	068e1e02 	streq	r1, [lr], r2, lsl #28
   13778:	170c0000 	strne	r0, [ip, -r0]
   1377c:	0000057f 	andeq	r0, r0, pc, ror r5
   13780:	08026e03 	stmdaeq	r2, {r0, r1, r9, sl, fp, sp, lr}
   13784:	0000001d 	andeq	r0, r0, sp, lsl r0
   13788:	04d41710 	ldrbeq	r1, [r4], #1808	; 0x710
   1378c:	6f030000 	svcvs	0x00030000
   13790:	088e0802 	stmeq	lr, {r1, fp}
   13794:	17140000 	ldrne	r0, [r4, -r0]
   13798:	00000e7d 	andeq	r0, r0, sp, ror lr
   1379c:	07027203 	streq	r7, [r2, -r3, lsl #4]
   137a0:	0000001d 	andeq	r0, r0, sp, lsl r0
   137a4:	42a71730 	adcmi	r1, r7, #48, 14	; 0xc00000
   137a8:	73030000 	movwvc	r0, #12288	; 0x3000
   137ac:	08a31602 	stmiaeq	r3!, {r1, r9, sl, ip}
   137b0:	17340000 	ldrne	r0, [r4, -r0]!
   137b4:	0000078a 	andeq	r0, r0, sl, lsl #15
   137b8:	07027503 	streq	r7, [r2, -r3, lsl #10]
   137bc:	0000001d 	andeq	r0, r0, sp, lsl r0
   137c0:	08841738 	stmeq	r4, {r3, r4, r5, r8, r9, sl, ip}
   137c4:	77030000 	strvc	r0, [r3, -r0]
   137c8:	08b40a02 	ldmeq	r4!, {r1, r9, fp}
   137cc:	173c0000 	ldrne	r0, [ip, -r0]!
   137d0:	00000350 	andeq	r0, r0, r0, asr r3
   137d4:	13027a03 	movwne	r7, #10755	; 0x2a03
   137d8:	00000171 	andeq	r0, r0, r1, ror r1
   137dc:	040b1740 	streq	r1, [fp], #-1856	; 0xfffff8c0
   137e0:	7b030000 	blvc	d37e8 <__ccfg+0xb3840>
   137e4:	001d0702 	andseq	r0, sp, r2, lsl #14
   137e8:	17440000 	strbne	r0, [r4, -r0]
   137ec:	00000609 	andeq	r0, r0, r9, lsl #12
   137f0:	13027c03 	movwne	r7, #11267	; 0x2c03
   137f4:	00000171 	andeq	r0, r0, r1, ror r1
   137f8:	081f1748 	ldmdaeq	pc, {r3, r6, r8, r9, sl, ip}	; <UNPREDICTABLE>
   137fc:	7d030000 	stcvc	0, cr0, [r3, #-0]
   13800:	08ba1402 	ldmeq	sl!, {r1, sl, ip}
   13804:	174c0000 	strbne	r0, [ip, -r0]
   13808:	00000b5a 	andeq	r0, r0, sl, asr fp
   1380c:	07028003 	streq	r8, [r2, -r3]
   13810:	0000001d 	andeq	r0, r0, sp, lsl r0
   13814:	0c531750 	mrrceq	7, 5, r1, r3, cr0
   13818:	81030000 	mrshi	r0, (UNDEF: 3)
   1381c:	05a20902 	streq	r0, [r2, #2306]!	; 0x902
   13820:	17540000 	ldrbne	r0, [r4, -r0]
   13824:	00000c6d 	andeq	r0, r0, sp, ror #24
   13828:	0702a403 	streq	sl, [r2, -r3, lsl #8]
   1382c:	00000869 	andeq	r0, r0, r9, ror #16
   13830:	0a161858 	beq	599998 <__ccfg+0x5799f0>
   13834:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
   13838:	02a21302 	adceq	r1, r2, #134217728	; 0x8000000
   1383c:	01480000 	mrseq	r0, (UNDEF: 72)
   13840:	0006ae18 	andeq	sl, r6, r8, lsl lr
   13844:	02a90300 	adceq	r0, r9, #0, 6
   13848:	00025f12 	andeq	r5, r2, r2, lsl pc
   1384c:	18014c00 	stmdane	r1, {sl, fp, lr}
   13850:	00000695 	muleq	r0, r5, r6
   13854:	0c02ad03 	stceq	13, cr10, [r2], {3}
   13858:	000008cb 	andeq	r0, r0, fp, asr #17
   1385c:	e91802dc 	ldmdb	r8, {r2, r3, r4, r6, r7, r9}
   13860:	0300000c 	movweq	r0, #12
   13864:	4f1002b2 	svcmi	0x001002b2
   13868:	e0000006 	and	r0, r0, r6
   1386c:	0aa61802 	beq	fe99987c <_estack+0xde99487c>
   13870:	b4030000 	strlt	r0, [r3], #-0
   13874:	08d70a02 	ldmeq	r7, {r1, r9, fp}^
   13878:	02ec0000 	rsceq	r0, ip, #0
   1387c:	a8040f00 	stmdage	r4, {r8, r9, sl, fp}
   13880:	03000005 	movweq	r0, #5
   13884:	0c640801 	stcleq	8, cr0, [r4], #-4
   13888:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
   1388c:	0f000005 	svceq	0x00000005
   13890:	00043004 	andeq	r3, r4, r4
   13894:	001d1300 	andseq	r1, sp, r0, lsl #6
   13898:	05d80000 	ldrbeq	r0, [r8]
   1389c:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   138a0:	14000004 	strne	r0, [r0], #-4
   138a4:	000000f1 	strdeq	r0, [r0], -r1
   138a8:	0005d814 	andeq	sp, r5, r4, lsl r8
   138ac:	001d1400 	andseq	r1, sp, r0, lsl #8
   138b0:	0f000000 	svceq	0x00000000
   138b4:	0005af04 	andeq	sl, r5, r4, lsl #30
   138b8:	ba040f00 	blt	1174c0 <__ccfg+0xf7518>
   138bc:	13000005 	movwne	r0, #5
   138c0:	00000083 	andeq	r0, r0, r3, lsl #1
   138c4:	00000602 	andeq	r0, r0, r2, lsl #12
   138c8:	00044e14 	andeq	r4, r4, r4, lsl lr
   138cc:	00f11400 	rscseq	r1, r1, r0, lsl #8
   138d0:	83140000 	tsthi	r4, #0
   138d4:	14000000 	strne	r0, [r0], #-0
   138d8:	0000001d 	andeq	r0, r0, sp, lsl r0
   138dc:	e4040f00 	str	r0, [r4], #-3840	; 0xfffff100
   138e0:	13000005 	movwne	r0, #5
   138e4:	0000001d 	andeq	r0, r0, sp, lsl r0
   138e8:	0000061c 	andeq	r0, r0, ip, lsl r6
   138ec:	00044e14 	andeq	r4, r4, r4, lsl lr
   138f0:	00f11400 	rscseq	r1, r1, r0, lsl #8
   138f4:	0f000000 	svceq	0x00000000
   138f8:	00060804 	andeq	r0, r6, r4, lsl #16
   138fc:	004d0800 	subeq	r0, sp, r0, lsl #16
   13900:	06320000 	ldrteq	r0, [r2], -r0
   13904:	24090000 	strcs	r0, [r9], #-0
   13908:	02000000 	andeq	r0, r0, #0
   1390c:	004d0800 	subeq	r0, sp, r0, lsl #16
   13910:	06420000 	strbeq	r0, [r2], -r0
   13914:	24090000 	strcs	r0, [r9], #-0
   13918:	00000000 	andeq	r0, r0, r0
   1391c:	046e0400 	strbteq	r0, [lr], #-1024	; 0xfffffc00
   13920:	24030000 	strcs	r0, [r3], #-0
   13924:	02ed1a01 	rsceq	r1, sp, #4096	; 0x1000
   13928:	dd190000 	ldcle	0, cr0, [r9, #-0]
   1392c:	0c00000c 	stceq	0, cr0, [r0], {12}
   13930:	08012803 	stmdaeq	r1, {r0, r1, fp, sp}
   13934:	00000688 	andeq	r0, r0, r8, lsl #13
   13938:	000eca17 	andeq	ip, lr, r7, lsl sl
   1393c:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
   13940:	00068811 	andeq	r8, r6, r1, lsl r8
   13944:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
   13948:	0300000b 	movweq	r0, #11
   1394c:	1d07012b 	stfnes	f0, [r7, #-172]	; 0xffffff54
   13950:	04000000 	streq	r0, [r0], #-0
   13954:	00077217 	andeq	r7, r7, r7, lsl r2
   13958:	012c0300 			; <UNDEFINED> instruction: 0x012c0300
   1395c:	00068e0b 	andeq	r8, r6, fp, lsl #28
   13960:	0f000800 	svceq	0x00000800
   13964:	00064f04 	andeq	r4, r6, r4, lsl #30
   13968:	42040f00 	andmi	r0, r4, #0, 30
   1396c:	19000006 	stmdbne	r0, {r1, r2}
   13970:	000003da 	ldrdeq	r0, [r0], -sl
   13974:	0144030e 	cmpeq	r4, lr, lsl #6
   13978:	0006cd08 	andeq	ip, r6, r8, lsl #26
   1397c:	16511700 	ldrbne	r1, [r1], -r0, lsl #14
   13980:	45030000 	strmi	r0, [r3, #-0]
   13984:	06cd1201 	strbeq	r1, [sp], r1, lsl #4
   13988:	17000000 	strne	r0, [r0, -r0]
   1398c:	00000831 	andeq	r0, r0, r1, lsr r8
   13990:	12014603 	andne	r4, r1, #3145728	; 0x300000
   13994:	000006cd 	andeq	r0, r0, sp, asr #13
   13998:	15031706 	strne	r1, [r3, #-1798]	; 0xfffff8fa
   1399c:	47030000 	strmi	r0, [r3, -r0]
   139a0:	005b1201 	subseq	r1, fp, r1, lsl #4
   139a4:	000c0000 	andeq	r0, ip, r0
   139a8:	00005b08 	andeq	r5, r0, r8, lsl #22
   139ac:	0006dd00 	andeq	sp, r6, r0, lsl #26
   139b0:	00240900 	eoreq	r0, r4, r0, lsl #18
   139b4:	00020000 	andeq	r0, r2, r0
   139b8:	8503d01a 	strhi	sp, [r3, #-26]	; 0xffffffe6
   139bc:	07f20702 	ldrbeq	r0, [r2, r2, lsl #14]!
   139c0:	70170000 	andsvc	r0, r7, r0
   139c4:	0300000e 	movweq	r0, #14
   139c8:	24180287 	ldrcs	r0, [r8], #-647	; 0xfffffd79
   139cc:	00000000 	andeq	r0, r0, r0
   139d0:	000cf117 	andeq	pc, ip, r7, lsl r1	; <UNPREDICTABLE>
   139d4:	02880300 	addeq	r0, r8, #0, 6
   139d8:	0005a212 	andeq	sl, r5, r2, lsl r2
   139dc:	38170400 	ldmdacc	r7, {sl}
   139e0:	03000004 	movweq	r0, #4
   139e4:	f2100289 	vhsub.s16	d0, d16, d9
   139e8:	08000007 	stmdaeq	r0, {r0, r1, r2}
   139ec:	000b4317 	andeq	r4, fp, r7, lsl r3
   139f0:	028a0300 	addeq	r0, sl, #0, 6
   139f4:	00018717 	andeq	r8, r1, r7, lsl r7
   139f8:	e9172400 	ldmdb	r7, {sl, sp}
   139fc:	03000007 	movweq	r0, #7
   13a00:	1d0f028b 	sfmne	f0, 4, [pc, #-556]	; 137dc <__exidx_end+0xda5c>
   13a04:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   13a08:	000ec517 	andeq	ip, lr, r7, lsl r5
   13a0c:	028c0300 	addeq	r0, ip, #0, 6
   13a10:	0000702c 	andeq	r7, r0, ip, lsr #32
   13a14:	7f175000 	svcvc	0x00175000
   13a18:	03000000 	movweq	r0, #0
   13a1c:	941a028d 	ldrls	r0, [sl], #-653	; 0xfffffd73
   13a20:	58000006 	stmdapl	r0, {r1, r2}
   13a24:	00063917 	andeq	r3, r6, r7, lsl r9
   13a28:	028e0300 	addeq	r0, lr, #0, 6
   13a2c:	0000e516 	andeq	lr, r0, r6, lsl r5
   13a30:	fe176800 	vcmla.f16	d6, d7, d0[0], #90
   13a34:	0300000c 	movweq	r0, #12
   13a38:	e516028f 	ldr	r0, [r6, #-655]	; 0xfffffd71
   13a3c:	70000000 	andvc	r0, r0, r0
   13a40:	00007117 	andeq	r7, r0, r7, lsl r1
   13a44:	02900300 	addseq	r0, r0, #0, 6
   13a48:	0000e516 	andeq	lr, r0, r6, lsl r5
   13a4c:	6a177800 	bvs	5f1a54 <__ccfg+0x5d1aac>
   13a50:	0300000b 	movweq	r0, #11
   13a54:	02100291 	andseq	r0, r0, #268435465	; 0x10000009
   13a58:	80000008 	andhi	r0, r0, r8
   13a5c:	00041517 	andeq	r1, r4, r7, lsl r5
   13a60:	02920300 	addseq	r0, r2, #0, 6
   13a64:	00081210 	andeq	r1, r8, r0, lsl r2
   13a68:	8d178800 	ldchi	8, cr8, [r7, #-0]
   13a6c:	0300000c 	movweq	r0, #12
   13a70:	1d0f0293 	sfmne	f0, 4, [pc, #-588]	; 1382c <__exidx_end+0xdaac>
   13a74:	a0000000 	andge	r0, r0, r0
   13a78:	0002ac17 	andeq	sl, r2, r7, lsl ip
   13a7c:	02940300 	addseq	r0, r4, #0, 6
   13a80:	0000e516 	andeq	lr, r0, r6, lsl r5
   13a84:	9f17a400 	svcls	0x0017a400
   13a88:	03000006 	movweq	r0, #6
   13a8c:	e5160295 	ldr	r0, [r6, #-661]	; 0xfffffd6b
   13a90:	ac000000 	stcge	0, cr0, [r0], {-0}
   13a94:	0005bb17 	andeq	fp, r5, r7, lsl fp
   13a98:	02960300 	addseq	r0, r6, #0, 6
   13a9c:	0000e516 	andeq	lr, r0, r6, lsl r5
   13aa0:	4a17b400 	bmi	600aa8 <__ccfg+0x5e0b00>
   13aa4:	03000008 	movweq	r0, #8
   13aa8:	e5160297 	ldr	r0, [r6, #-663]	; 0xfffffd69
   13aac:	bc000000 	stclt	0, cr0, [r0], {-0}
   13ab0:	00062817 	andeq	r2, r6, r7, lsl r8
   13ab4:	02980300 	addseq	r0, r8, #0, 6
   13ab8:	0000e516 	andeq	lr, r0, r6, lsl r5
   13abc:	0217c400 	andseq	ip, r7, #0, 8
   13ac0:	03000009 	movweq	r0, #9
   13ac4:	1d080299 	sfmne	f0, 4, [r8, #-612]	; 0xfffffd9c
   13ac8:	cc000000 	stcgt	0, cr0, [r0], {-0}
   13acc:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13ad0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13ad4:	24090000 	strcs	r0, [r9], #-0
   13ad8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   13adc:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13ae0:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
   13ae4:	24090000 	strcs	r0, [r9], #-0
   13ae8:	07000000 	streq	r0, [r0, -r0]
   13aec:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13af0:	08220000 	stmdaeq	r2!, {}	; <UNPREDICTABLE>
   13af4:	24090000 	strcs	r0, [r9], #-0
   13af8:	17000000 	strne	r0, [r0, -r0]
   13afc:	03f01a00 	mvnseq	r1, #0, 20
   13b00:	4907029e 	stmdbmi	r7, {r1, r2, r3, r4, r7, r9}
   13b04:	17000008 	strne	r0, [r0, -r8]
   13b08:	000003c0 	andeq	r0, r0, r0, asr #7
   13b0c:	1b02a103 	blne	bbf20 <__ccfg+0x9bf78>
   13b10:	00000849 	andeq	r0, r0, r9, asr #16
   13b14:	0f181700 	svceq	0x00181700
   13b18:	a2030000 	andge	r0, r3, #0
   13b1c:	08591802 	ldmdaeq	r9, {r1, fp, ip}^
   13b20:	00780000 	rsbseq	r0, r8, r0
   13b24:	0002e708 	andeq	lr, r2, r8, lsl #14
   13b28:	00085900 	andeq	r5, r8, r0, lsl #18
   13b2c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13b30:	001d0000 	andseq	r0, sp, r0
   13b34:	00002408 	andeq	r2, r0, r8, lsl #8
   13b38:	00086900 	andeq	r6, r8, r0, lsl #18
   13b3c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13b40:	001d0000 	andseq	r0, sp, r0
   13b44:	8303f01b 	movwhi	pc, #12315	; 0x301b	; <UNPREDICTABLE>
   13b48:	088e0302 	stmeq	lr, {r1, r8, r9}
   13b4c:	651c0000 	ldrvs	r0, [ip, #-0]
   13b50:	0300000d 	movweq	r0, #13
   13b54:	dd0b029a 	sfmle	f0, 4, [fp, #-616]	; 0xfffffd98
   13b58:	1c000006 	stcne	0, cr0, [r0], {6}
   13b5c:	00000b52 	andeq	r0, r0, r2, asr fp
   13b60:	0b02a303 	bleq	bc774 <__ccfg+0x9c7cc>
   13b64:	00000822 	andeq	r0, r0, r2, lsr #16
   13b68:	05a80800 	streq	r0, [r8, #2048]!	; 0x800
   13b6c:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
   13b70:	24090000 	strcs	r0, [r9], #-0
   13b74:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13b78:	0ed01d00 	cdpeq	13, 13, cr1, cr0, cr0, {0}
   13b7c:	040f0000 	streq	r0, [pc], #-0	; 13b84 <__exidx_end+0xde04>
   13b80:	0000089e 	muleq	r0, lr, r8
   13b84:	0008b41e 	andeq	fp, r8, lr, lsl r4
   13b88:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   13b8c:	0f000000 	svceq	0x00000000
   13b90:	0008a904 	andeq	sl, r8, r4, lsl #18
   13b94:	71040f00 	tstvc	r4, r0, lsl #30
   13b98:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   13b9c:	000008cb 	andeq	r0, r0, fp, asr #17
   13ba0:	00001d14 	andeq	r1, r0, r4, lsl sp
   13ba4:	040f0000 	streq	r0, [pc], #-0	; 13bac <__exidx_end+0xde2c>
   13ba8:	000008d1 	ldrdeq	r0, [r0], -r1
   13bac:	08c0040f 	stmiaeq	r0, {r0, r1, r2, r3, sl}^
   13bb0:	42080000 	andmi	r0, r8, #0
   13bb4:	e7000006 	str	r0, [r0, -r6]
   13bb8:	09000008 	stmdbeq	r0, {r3}
   13bbc:	00000024 	andeq	r0, r0, r4, lsr #32
   13bc0:	c21f0002 	andsgt	r0, pc, #2
   13bc4:	0300000a 	movweq	r0, #10
   13bc8:	4e170333 	mrcmi	3, 0, r0, cr7, cr3, {1}
   13bcc:	1f000004 	svcne	0x00000004
   13bd0:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
   13bd4:	1d033403 	cfstrsne	mvf3, [r3, #-12]
   13bd8:	00000454 	andeq	r0, r0, r4, asr r4
   13bdc:	00475320 	subeq	r5, r7, r0, lsr #6
   13be0:	30170500 	andscc	r0, r7, r0, lsl #10
   13be4:	00000459 	andeq	r0, r0, r9, asr r4
   13be8:	01180305 	tsteq	r8, r5, lsl #6
   13bec:	e7212000 	str	r2, [r1, -r0]!
   13bf0:	05000008 	streq	r0, [r0, #-8]
   13bf4:	00011003 	andeq	r1, r1, r3
   13bf8:	08f42120 	ldmeq	r4!, {r5, r8, sp}^
   13bfc:	03050000 	movweq	r0, #20480	; 0x5000
   13c00:	00000000 	andeq	r0, r0, r0
   13c04:	000a9200 	andeq	r9, sl, r0, lsl #4
   13c08:	a1000400 	tstge	r0, r0, lsl #8
   13c0c:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   13c10:	004ab001 	subeq	fp, sl, r1
   13c14:	490a0c00 	stmdbmi	sl, {sl, fp}
   13c18:	522d0000 	eorpl	r0, sp, #0
   13c1c:	4adc0000 	bmi	ff713c24 <_estack+0xdf70ec24>
   13c20:	00540000 	subseq	r0, r4, r0
   13c24:	93e00000 	mvnls	r0, #0
   13c28:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13c2c:	00042107 	andeq	r2, r4, r7, lsl #2
   13c30:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   13c34:	00746e69 	rsbseq	r6, r4, r9, ror #28
   13c38:	2b070402 	blcs	1d4c48 <__ccfg+0x1b4ca0>
   13c3c:	02000004 	andeq	r0, r0, #4
   13c40:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
   13c44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13c48:	00443004 	subeq	r3, r4, r4
   13c4c:	4b9b0400 	blmi	fe6d4c54 <_estack+0xde6cfc54>
   13c50:	2a020000 	bcs	93c58 <__ccfg+0x73cb0>
   13c54:	00003316 	andeq	r3, r0, r6, lsl r3
   13c58:	4f480400 	svcmi	0x00480400
   13c5c:	2f020000 	svccs	0x00020000
   13c60:	00006015 	andeq	r6, r0, r5, lsl r0
   13c64:	66040500 	strvs	r0, [r4], -r0, lsl #10
   13c68:	06000000 	streq	r0, [r0], -r0
   13c6c:	00000048 	andeq	r0, r0, r8, asr #32
   13c70:	00000075 	andeq	r0, r0, r5, ror r0
   13c74:	00007507 	andeq	r7, r0, r7, lsl #10
   13c78:	04050000 	streq	r0, [r5], #-0
   13c7c:	0000007b 	andeq	r0, r0, fp, ror r0
   13c80:	56aa0408 	strtpl	r0, [sl], r8, lsl #8
   13c84:	36020000 	strcc	r0, [r2], -r0
   13c88:	0000880f 	andeq	r8, r0, pc, lsl #16
   13c8c:	8e040500 	cfsh32hi	mvfx0, mvfx4, #0
   13c90:	06000000 	streq	r0, [r0], -r0
   13c94:	0000002c 	andeq	r0, r0, ip, lsr #32
   13c98:	000000a2 	andeq	r0, r0, r2, lsr #1
   13c9c:	00007507 	andeq	r7, r0, r7, lsl #10
   13ca0:	00750700 	rsbseq	r0, r5, r0, lsl #14
   13ca4:	02000000 	andeq	r0, r0, #0
   13ca8:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
   13cac:	62090000 	andvs	r0, r9, #0
   13cb0:	02000051 	andeq	r0, r0, #81	; 0x51
   13cb4:	005412bb 	ldrheq	r1, [r4], #-43	; 0xffffffd5
   13cb8:	dd090000 	stcle	0, cr0, [r9, #-0]
   13cbc:	02000056 	andeq	r0, r0, #86	; 0x56
   13cc0:	007c10be 	ldrhteq	r1, [ip], #-14
   13cc4:	01020000 	mrseq	r0, (UNDEF: 2)
   13cc8:	000c5d06 	andeq	r5, ip, r6, lsl #26
   13ccc:	4e680a00 	vmulmi.f32	s1, s16, s0
   13cd0:	01070000 	mrseq	r0, (UNDEF: 7)
   13cd4:	000000a2 	andeq	r0, r0, r2, lsr #1
   13cd8:	f5061703 			; <UNDEFINED> instruction: 0xf5061703
   13cdc:	0b000001 	bleq	13ce8 <__exidx_end+0xdf68>
   13ce0:	0000493e 	andeq	r4, r0, lr, lsr r9
   13ce4:	4d670b00 	vstmdbmi	r7!, {d16-d15}
   13ce8:	0b010000 	bleq	53cf0 <__ccfg+0x33d48>
   13cec:	0000528f 	andeq	r5, r0, pc, lsl #5
   13cf0:	55f00b02 	ldrbpl	r0, [r0, #2818]!	; 0xb02
   13cf4:	0b030000 	bleq	d3cfc <__ccfg+0xb3d54>
   13cf8:	000051d1 	ldrdeq	r5, [r0], -r1
   13cfc:	550d0b04 	strpl	r0, [sp, #-2820]	; 0xfffff4fc
   13d00:	0b050000 	bleq	153d08 <__ccfg+0x133d60>
   13d04:	00005471 	andeq	r5, r0, r1, ror r4
   13d08:	495f0b06 	ldmdbmi	pc, {r1, r2, r8, r9, fp}^	; <UNPREDICTABLE>
   13d0c:	0b070000 	bleq	1d3d14 <__ccfg+0x1b3d6c>
   13d10:	00005522 	andeq	r5, r0, r2, lsr #10
   13d14:	55300b08 	ldrpl	r0, [r0, #-2824]!	; 0xfffff4f8
   13d18:	0b090000 	bleq	253d20 <__ccfg+0x233d78>
   13d1c:	000055e3 	andeq	r5, r0, r3, ror #11
   13d20:	51280b0a 			; <UNDEFINED> instruction: 0x51280b0a
   13d24:	0b0b0000 	bleq	2d3d2c <__ccfg+0x2b3d84>
   13d28:	00004bdc 	ldrdeq	r4, [r0], -ip
   13d2c:	4bf00b0c 	blmi	ffc16964 <_estack+0xdfc11964>
   13d30:	0b0d0000 	bleq	353d38 <__ccfg+0x333d90>
   13d34:	00004eac 	andeq	r4, r0, ip, lsr #29
   13d38:	4ec20b0e 	vdivmi.f64	d16, d2, d14
   13d3c:	0b0f0000 	bleq	3d3d44 <__ccfg+0x3b3d9c>
   13d40:	00004da1 	andeq	r4, r0, r1, lsr #27
   13d44:	51b50b10 			; <UNDEFINED> instruction: 0x51b50b10
   13d48:	0b110000 	bleq	453d50 <__ccfg+0x433da8>
   13d4c:	00004e2b 	andeq	r4, r0, fp, lsr #28
   13d50:	58a80b12 	stmiapl	r8!, {r1, r4, r8, r9, fp}
   13d54:	0b130000 	bleq	4d3d5c <__ccfg+0x4b3db4>
   13d58:	000049c8 	andeq	r4, r0, r8, asr #19
   13d5c:	4e4f0b14 	vmovmi.8	d15[0], r0
   13d60:	0b150000 	bleq	553d68 <__ccfg+0x533dc0>
   13d64:	000048dd 	ldrdeq	r4, [r0], -sp
   13d68:	56130b16 			; <UNDEFINED> instruction: 0x56130b16
   13d6c:	0b170000 	bleq	5d3d74 <__ccfg+0x5b3dcc>
   13d70:	00005736 	andeq	r5, r0, r6, lsr r7
   13d74:	4e740b18 	vmovmi.s8	r0, d4[4]
   13d78:	0b190000 	bleq	653d80 <__ccfg+0x633dd8>
   13d7c:	00005301 	andeq	r5, r0, r1, lsl #6
   13d80:	56210b1a 			; <UNDEFINED> instruction: 0x56210b1a
   13d84:	0b1b0000 	bleq	6d3d8c <__ccfg+0x6b3de4>
   13d88:	000047fe 	strdeq	r4, [r0], -lr
   13d8c:	562f0b1c 			; <UNDEFINED> instruction: 0x562f0b1c
   13d90:	0b1d0000 	bleq	753d98 <__ccfg+0x733df0>
   13d94:	0000563d 	andeq	r5, r0, sp, lsr r6
   13d98:	47ac0b1e 			; <UNDEFINED> instruction: 0x47ac0b1e
   13d9c:	0b1f0000 	bleq	7d3da4 <__ccfg+0x7b3dfc>
   13da0:	00005667 	andeq	r5, r0, r7, ror #12
   13da4:	53b20b20 			; <UNDEFINED> instruction: 0x53b20b20
   13da8:	0b210000 	bleq	853db0 <__ccfg+0x833e08>
   13dac:	00005187 	andeq	r5, r0, r7, lsl #3
   13db0:	56060b22 	strpl	r0, [r6], -r2, lsr #22
   13db4:	0b230000 	bleq	8d3dbc <__ccfg+0x8b3e14>
   13db8:	000050a9 	andeq	r5, r0, r9, lsr #1
   13dbc:	4fab0b24 	svcmi	0x00ab0b24
   13dc0:	0b250000 	bleq	953dc8 <__ccfg+0x933e20>
   13dc4:	00004ca7 	andeq	r4, r0, r7, lsr #25
   13dc8:	4fc90b26 	svcmi	0x00c90b26
   13dcc:	0b270000 	bleq	9d3dd4 <__ccfg+0x9b3e2c>
   13dd0:	00004d43 	andeq	r4, r0, r3, asr #26
   13dd4:	4fd90b28 	svcmi	0x00d90b28
   13dd8:	0b290000 	bleq	a53de0 <__ccfg+0xa33e38>
   13ddc:	00004fe9 	andeq	r4, r0, r9, ror #31
   13de0:	510e0b2a 	tstpl	lr, sl, lsr #22
   13de4:	0b2b0000 	bleq	ad3dec <__ccfg+0xab3e44>
   13de8:	00004f52 	andeq	r4, r0, r2, asr pc
   13dec:	53bf0b2c 			; <UNDEFINED> instruction: 0x53bf0b2c
   13df0:	0b2d0000 	bleq	b53df8 <__ccfg+0xb33e50>
   13df4:	00004ce8 	andeq	r4, r0, r8, ror #25
   13df8:	e40a002e 	str	r0, [sl], #-46	; 0xffffffd2
   13dfc:	0700004e 	streq	r0, [r0, -lr, asr #32]
   13e00:	0000a201 	andeq	sl, r0, r1, lsl #4
   13e04:	06170400 	ldreq	r0, [r7], -r0, lsl #8
   13e08:	000003d6 	ldrdeq	r0, [r0], -r6
   13e0c:	004c120b 	subeq	r1, ip, fp, lsl #4
   13e10:	450b0000 	strmi	r0, [fp, #-0]
   13e14:	01000048 	tsteq	r0, r8, asr #32
   13e18:	0058420b 	subseq	r4, r8, fp, lsl #4
   13e1c:	b20b0200 	andlt	r0, fp, #0, 4
   13e20:	03000056 	movweq	r0, #86	; 0x56
   13e24:	004c320b 	subeq	r3, ip, fp, lsl #4
   13e28:	2a0b0400 	bcs	2d4e30 <__ccfg+0x2b4e88>
   13e2c:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
   13e30:	004cc40b 	subeq	ip, ip, fp, lsl #8
   13e34:	220b0600 	andcs	r0, fp, #0, 12
   13e38:	0700004c 	streq	r0, [r0, -ip, asr #32]
   13e3c:	00555e0b 	subseq	r5, r5, fp, lsl #28
   13e40:	920b0800 	andls	r0, fp, #0, 16
   13e44:	09000056 	stmdbeq	r0, {r1, r2, r4, r6}
   13e48:	0054950b 	subseq	r9, r4, fp, lsl #10
   13e4c:	7d0b0a00 	vstrvc	s0, [fp, #-0]
   13e50:	0b000049 	bleq	13f7c <__exidx_end+0xe1fc>
   13e54:	004c650b 	subeq	r6, ip, fp, lsl #10
   13e58:	c60b0c00 	strgt	r0, [fp], -r0, lsl #24
   13e5c:	0d000048 	stceq	0, cr0, [r0, #-288]	; 0xfffffee0
   13e60:	0058770b 	subseq	r7, r8, fp, lsl #14
   13e64:	fb0b0e00 	blx	2d766e <__ccfg+0x2b76c6>
   13e68:	0f000050 	svceq	0x00000050
   13e6c:	004df60b 	subeq	pc, sp, fp, lsl #12
   13e70:	380b1000 	stmdacc	fp, {ip}
   13e74:	11000051 	qaddne	r0, r1, r0
   13e78:	0057780b 	subseq	r7, r7, fp, lsl #16
   13e7c:	480b1200 	stmdami	fp, {r9, ip}
   13e80:	1300004a 	movwne	r0, #74	; 0x4a
   13e84:	004e090b 	subeq	r0, lr, fp, lsl #18
   13e88:	6c0b1400 	cfstrsvs	mvf1, [fp], {-0}
   13e8c:	15000050 	strne	r0, [r0, #-80]	; 0xffffffb0
   13e90:	004bfd0b 	subeq	pc, fp, fp, lsl #26
   13e94:	b80b1600 	stmdalt	fp, {r9, sl, ip}
   13e98:	17000050 	smlsdne	r0, r0, r0, r0
   13e9c:	004ece0b 	subeq	ip, lr, fp, lsl #28
   13ea0:	480b1800 	stmdami	fp, {fp, ip}
   13ea4:	19000049 	stmdbne	r0, {r0, r3, r6}
   13ea8:	00571f0b 	subseq	r1, r7, fp, lsl #30
   13eac:	380b1a00 	stmdacc	fp, {r9, fp, ip}
   13eb0:	1b000050 	blne	13ff8 <__exidx_end+0xe278>
   13eb4:	004dc20b 	subeq	ip, sp, fp, lsl #4
   13eb8:	e70b1c00 	str	r1, [fp, -r0, lsl #24]
   13ebc:	1d000047 	stcne	0, cr0, [r0, #-284]	; 0xfffffee4
   13ec0:	004f830b 	subeq	r8, pc, fp, lsl #6
   13ec4:	6f0b1e00 	svcvs	0x000b1e00
   13ec8:	1f00004f 	svcne	0x0000004f
   13ecc:	0054520b 	subseq	r5, r4, fp, lsl #4
   13ed0:	dd0b2000 	stcle	0, cr2, [fp, #-0]
   13ed4:	21000054 	qaddcs	r0, r4, r0
   13ed8:	0056fe0b 	subseq	pc, r6, fp, lsl #28
   13edc:	f50b2200 			; <UNDEFINED> instruction: 0xf50b2200
   13ee0:	2300004c 	movwcs	r0, #76	; 0x4c
   13ee4:	0052b10b 	subseq	fp, r2, fp, lsl #2
   13ee8:	aa0b2400 	bge	2dcef0 <__ccfg+0x2bcf48>
   13eec:	25000054 	strcs	r0, [r0, #-84]	; 0xffffffac
   13ef0:	0053ce0b 	subseq	ip, r3, fp, lsl #28
   13ef4:	e20b2600 	and	r2, fp, #0, 12
   13ef8:	27000053 	smlsdcs	r0, r3, r0, r0
   13efc:	0053f60b 	subseq	pc, r3, fp, lsl #12
   13f00:	860b2800 	strhi	r2, [fp], -r0, lsl #16
   13f04:	2900004b 	stmdbcs	r0, {r0, r1, r3, r6}
   13f08:	004a330b 	subeq	r3, sl, fp, lsl #6
   13f0c:	5b0b2a00 	blpl	2de714 <__ccfg+0x2be76c>
   13f10:	2b00004a 	blcs	14040 <__exidx_end+0xe2c0>
   13f14:	0057b70b 	subseq	fp, r7, fp, lsl #14
   13f18:	8d0b2c00 	stchi	12, cr2, [fp, #-0]
   13f1c:	2d00004a 	stccs	0, cr0, [r0, #-296]	; 0xfffffed8
   13f20:	0055a70b 	subseq	sl, r5, fp, lsl #14
   13f24:	bb0b2e00 	bllt	2df72c <__ccfg+0x2bf784>
   13f28:	2f000055 	svccs	0x00000055
   13f2c:	0055cf0b 	subseq	ip, r5, fp, lsl #30
   13f30:	770b3000 	strvc	r3, [fp, -r0]
   13f34:	3100004c 	tstcc	r0, ip, asr #32
   13f38:	004c510b 	subeq	r5, ip, fp, lsl #2
   13f3c:	970b3200 	strls	r3, [fp, -r0, lsl #4]
   13f40:	3300004f 	movwcc	r0, #79	; 0x4f
   13f44:	00514b0b 	subseq	r4, r1, fp, lsl #22
   13f48:	cb0b3400 	blgt	2e0f50 <__ccfg+0x2c0fa8>
   13f4c:	35000057 	strcc	r0, [r0, #-87]	; 0xffffffa9
   13f50:	00478f0b 	subeq	r8, r7, fp, lsl #30
   13f54:	770b3600 	strvc	r3, [fp, -r0, lsl #12]
   13f58:	3700004d 	strcc	r0, [r0, -sp, asr #32]
   13f5c:	004d8c0b 	subeq	r8, sp, fp, lsl #24
   13f60:	f90b3800 			; <UNDEFINED> instruction: 0xf90b3800
   13f64:	3900004f 	stmdbcc	r0, {r0, r1, r2, r3, r6}
   13f68:	0050230b 	subseq	r2, r0, fp, lsl #6
   13f6c:	f40b3a00 	vst1.8	{d3-d4}, [fp], r0
   13f70:	3b000057 	blcc	140d4 <__exidx_end+0xe354>
   13f74:	00529c0b 	subseq	r9, r2, fp, lsl #24
   13f78:	1a0b3c00 	bne	2e2f80 <__ccfg+0x2c2fd8>
   13f7c:	3d00004d 	stccc	0, cr0, [r0, #-308]	; 0xfffffecc
   13f80:	0048570b 	subeq	r5, r8, fp, lsl #14
   13f84:	0c0b3e00 	stceq	14, cr3, [fp], {-0}
   13f88:	3f000048 	svccc	0x00000048
   13f8c:	0051970b 	subseq	r9, r1, fp, lsl #14
   13f90:	1d0b4000 	stcne	0, cr4, [fp, #-0]
   13f94:	41000053 	qaddmi	r0, r3, r0
   13f98:	0054340b 	subseq	r3, r4, fp, lsl #8
   13f9c:	0e0b4200 	cdpeq	2, 0, cr4, cr11, cr0, {0}
   13fa0:	43000050 	movwmi	r0, #80	; 0x50
   13fa4:	00582d0b 	subseq	r2, r8, fp, lsl #26
   13fa8:	c70b4400 	strgt	r4, [fp, -r0, lsl #8]
   13fac:	45000052 	strmi	r0, [r0, #-82]	; 0xffffffae
   13fb0:	004a770b 	subeq	r7, sl, fp, lsl #14
   13fb4:	d80b4600 	stmdale	fp, {r9, sl, lr}
   13fb8:	4700004d 	strmi	r0, [r0, -sp, asr #32]
   13fbc:	004f1c0b 	subeq	r1, pc, fp, lsl #24
   13fc0:	cb0b4800 	blgt	2e5fc8 <__ccfg+0x2c6020>
   13fc4:	49000047 	stmdbmi	r0, {r0, r1, r2, r6}
   13fc8:	0048ed0b 	subeq	lr, r8, fp, lsl #26
   13fcc:	2e0b4a00 	vmlacs.f32	s8, s22, s0
   13fd0:	4b00004d 	blmi	1410c <__exidx_end+0xe38c>
   13fd4:	00504a0b 	subseq	r4, r0, fp, lsl #20
   13fd8:	02004c00 	andeq	r4, r0, #0, 24
   13fdc:	0d6c0702 	stcleq	7, cr0, [ip, #-8]!
   13fe0:	f30c0000 	vhadd.u8	d0, d12, d0
   13fe4:	e8000003 	stmda	r0, {r0, r1}
   13fe8:	0d000003 	stceq	0, cr0, [r0, #-12]
   13fec:	03dd0e00 	bicseq	r0, sp, #0, 28
   13ff0:	04050000 	streq	r0, [r5], #-0
   13ff4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13ff8:	0003ed0e 	andeq	lr, r3, lr, lsl #26
   13ffc:	08010200 	stmdaeq	r1, {r9}
   14000:	00000c64 	andeq	r0, r0, r4, ror #24
   14004:	0003f80e 	andeq	pc, r3, lr, lsl #16
   14008:	49b90f00 	ldmibmi	r9!, {r8, r9, sl, fp}
   1400c:	4c050000 	stcmi	0, cr0, [r5], {-0}
   14010:	03e81a01 	mvneq	r1, #4096	; 0x1000
   14014:	b20f0000 	andlt	r0, pc, #0
   14018:	0500004d 	streq	r0, [r0, #-77]	; 0xffffffb3
   1401c:	e81a0182 	ldmda	sl, {r1, r7, r8}
   14020:	0c000003 	stceq	0, cr0, [r0], {3}
   14024:	000003f8 	strdeq	r0, [r0], -r8
   14028:	00000429 	andeq	r0, r0, r9, lsr #8
   1402c:	bb09000d 	bllt	254068 <__ccfg+0x2340c0>
   14030:	0600004f 	streq	r0, [r0], -pc, asr #32
   14034:	041e0d2d 	ldreq	r0, [lr], #-3373	; 0xfffff2d3
   14038:	77090000 	strvc	r0, [r9, -r0]
   1403c:	06000056 			; <UNDEFINED> instruction: 0x06000056
   14040:	01f51c38 	mvnseq	r1, r8, lsr ip
   14044:	8b0a0000 	blhi	29404c <__ccfg+0x2740a4>
   14048:	0700004c 	streq	r0, [r0, -ip, asr #32]
   1404c:	0000a201 	andeq	sl, r0, r1, lsl #4
   14050:	0e3a0600 	cfmsuba32eq	mvax0, mvax0, mvfx10, mvfx0
   14054:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
   14058:	0047e00b 	subeq	lr, r7, fp
   1405c:	bb0b0000 	bllt	2d4064 <__ccfg+0x2b40bc>
   14060:	0100004e 	tsteq	r0, lr, asr #32
   14064:	00578a0b 	subseq	r8, r7, fp, lsl #20
   14068:	4d0b0200 	sfmmi	f0, 4, [fp, #-0]
   1406c:	03000057 	movweq	r0, #87	; 0x57
   14070:	0051f40b 	subseq	pc, r1, fp, lsl #8
   14074:	1b0b0400 	blne	2d507c <__ccfg+0x2b50d4>
   14078:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   1407c:	004a040b 	subeq	r0, sl, fp, lsl #8
   14080:	de0b0600 	cfmadd32le	mvax0, mvfx0, mvfx11, mvfx0
   14084:	07000049 	streq	r0, [r0, -r9, asr #32]
   14088:	004be90b 	subeq	lr, fp, fp, lsl #18
   1408c:	ce0b0800 	cdpgt	8, 0, cr0, cr11, cr0, {0}
   14090:	09000050 	stmdbeq	r0, {r4, r6}
   14094:	004a0b0b 	subeq	r0, sl, fp, lsl #22
   14098:	d50b0a00 	strle	r0, [fp, #-2560]	; 0xfffff600
   1409c:	0b000050 	bleq	141e4 <__exidx_end+0xe464>
   140a0:	004a700b 	subeq	r7, sl, fp
   140a4:	f50b0c00 			; <UNDEFINED> instruction: 0xf50b0c00
   140a8:	0d000049 	stceq	0, cr0, [r0, #-292]	; 0xfffffedc
   140ac:	0055720b 	subseq	r7, r5, fp, lsl #4
   140b0:	3b0b0e00 	blcc	2d78b8 <__ccfg+0x2b7910>
   140b4:	0f000053 	svceq	0x00000053
   140b8:	546a0400 	strbtpl	r0, [sl], #-1024	; 0xfffffc00
   140bc:	3f060000 	svccc	0x00060000
   140c0:	00044101 	andeq	r4, r4, r1, lsl #2
   140c4:	54fe0900 	ldrbtpl	r0, [lr], #2304	; 0x900
   140c8:	41060000 	mrsmi	r0, (UNDEF: 6)
   140cc:	0004b40f 	andeq	fp, r4, pc, lsl #8
   140d0:	55860900 	strpl	r0, [r6, #2304]	; 0x900
   140d4:	4a060000 	bmi	1940dc <__ccfg+0x174134>
   140d8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   140dc:	499d0900 	ldmibmi	sp, {r8, fp}
   140e0:	4b060000 	blmi	1940e8 <__ccfg+0x174140>
   140e4:	00002c0c 	andeq	r2, r0, ip, lsl #24
   140e8:	564b1000 	strbpl	r1, [fp], -r0
   140ec:	97090000 	strls	r0, [r9, -r0]
   140f0:	06000055 			; <UNDEFINED> instruction: 0x06000055
   140f4:	04f5144c 	ldrbteq	r1, [r5], #1100	; 0x44c
   140f8:	04050000 	streq	r0, [r5], #-0
   140fc:	000004e4 	andeq	r0, r0, r4, ror #9
   14100:	4e850911 			; <UNDEFINED> instruction: 0x4e850911
   14104:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
   14108:	0005080f 	andeq	r0, r5, pc, lsl #16
   1410c:	fb040500 	blx	115516 <__ccfg+0xf556e>
   14110:	12000004 	andne	r0, r0, #4
   14114:	00005480 	andeq	r5, r0, r0, lsl #9
   14118:	0051e109 	subseq	lr, r1, r9, lsl #2
   1411c:	0d520600 	ldcleq	6, cr0, [r2, #-0]
   14120:	0000051f 	andeq	r0, r0, pc, lsl r5
   14124:	050e0405 	streq	r0, [lr, #-1029]	; 0xfffffbfb
   14128:	cf130000 	svcgt	0x00130000
   1412c:	3400004b 	strcc	r0, [r0], #-75	; 0xffffffb5
   14130:	15016706 	strne	r6, [r1, #-1798]	; 0xfffff8fa
   14134:	00000550 	andeq	r0, r0, r0, asr r5
   14138:	004fc414 	subeq	ip, pc, r4, lsl r4	; <UNPREDICTABLE>
   1413c:	01690600 	cmneq	r9, r0, lsl #12
   14140:	0003ed0f 	andeq	lr, r3, pc, lsl #26
   14144:	b3140000 	tstlt	r4, #0
   14148:	0600004b 	streq	r0, [r0], -fp, asr #32
   1414c:	5514016a 	ldrpl	r0, [r4, #-362]	; 0xfffffe96
   14150:	04000005 	streq	r0, [r0], #-5
   14154:	05250e00 	streq	r0, [r5, #-3584]!	; 0xfffff200
   14158:	c80c0000 	stmdagt	ip, {}	; <UNPREDICTABLE>
   1415c:	65000000 	strvs	r0, [r0, #-0]
   14160:	15000005 	strne	r0, [r0, #-5]
   14164:	00000033 	andeq	r0, r0, r3, lsr r0
   14168:	500c002d 	andpl	r0, ip, sp, lsr #32
   1416c:	70000005 	andvc	r0, r0, r5
   14170:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   14174:	05650e00 	strbeq	r0, [r5, #-3584]!	; 0xfffff200
   14178:	f30f0000 	vhadd.u8	d0, d15, d0
   1417c:	0600004e 	streq	r0, [r0], -lr, asr #32
   14180:	7003016b 	andvc	r0, r3, fp, ror #2
   14184:	0f000005 	svceq	0x00000005
   14188:	0000511b 	andeq	r5, r0, fp, lsl r1
   1418c:	0c016e06 	stceq	14, cr6, [r1], {6}
   14190:	0000002c 	andeq	r0, r0, ip, lsr #32
   14194:	0054be16 	subseq	fp, r4, r6, lsl lr
   14198:	a2010700 	andge	r0, r1, #0, 14
   1419c:	06000000 	streq	r0, [r0], -r0
   141a0:	39060181 	stmdbcc	r6, {r0, r7, r8}
   141a4:	0b000006 	bleq	141c4 <__exidx_end+0xe444>
   141a8:	0000487e 	andeq	r4, r0, lr, ror r8
   141ac:	488a0b00 	stmmi	sl, {r8, r9, fp}
   141b0:	0b020000 	bleq	941b8 <__ccfg+0x74210>
   141b4:	00004896 	muleq	r0, r6, r8
   141b8:	4cb70b03 	fldmiaxmi	r7!, {d0}	;@ Deprecated
   141bc:	0b030000 	bleq	d41c4 <__ccfg+0xb421c>
   141c0:	000048a2 	andeq	r4, r0, r2, lsr #17
   141c4:	4e1e0b04 	vnmlsmi.f64	d0, d14, d4
   141c8:	0b040000 	bleq	1141d0 <__ccfg+0xf4228>
   141cc:	00004f04 	andeq	r4, r0, r4, lsl #30
   141d0:	4e5a0b05 	vnmlsmi.f64	d16, d10, d5
   141d4:	0b050000 	bleq	1541dc <__ccfg+0x134234>
   141d8:	0000498e 	andeq	r4, r0, lr, lsl #19
   141dc:	48ae0b05 	stmiami	lr!, {r0, r2, r8, r9, fp}
   141e0:	0b060000 	bleq	1941e8 <__ccfg+0x174240>
   141e4:	00005082 	andeq	r5, r0, r2, lsl #1
   141e8:	4ba50b06 	blmi	fe956e08 <_estack+0xde951e08>
   141ec:	0b060000 	bleq	1941f4 <__ccfg+0x17424c>
   141f0:	0000508f 	andeq	r5, r0, pc, lsl #1
   141f4:	553e0b06 	ldrpl	r0, [lr, #-2822]!	; 0xfffff4fa
   141f8:	0b060000 	bleq	194200 <__ccfg+0x174258>
   141fc:	0000509c 	muleq	r0, ip, r0
   14200:	50dc0b06 	sbcspl	r0, ip, r6, lsl #22
   14204:	0b060000 	bleq	19420c <__ccfg+0x174264>
   14208:	000048ba 			; <UNDEFINED> instruction: 0x000048ba
   1420c:	51c40b07 	bicpl	r0, r4, r7, lsl #22
   14210:	0b070000 	bleq	1d4218 <__ccfg+0x1b4270>
   14214:	00005211 	andeq	r5, r0, r1, lsl r2
   14218:	55790b07 	ldrbpl	r0, [r9, #-2823]!	; 0xfffff4f9
   1421c:	0b070000 	bleq	1d4224 <__ccfg+0x1b427c>
   14220:	00004aa2 	andeq	r4, r0, r2, lsr #21
   14224:	52f40b07 	rscspl	r0, r4, #7168	; 0x1c00
   14228:	0b080000 	bleq	214230 <__ccfg+0x1f4288>
   1422c:	00004833 	andeq	r4, r0, r3, lsr r8
   14230:	554c0b08 	strbpl	r0, [ip, #-2824]	; 0xfffff4f8
   14234:	0b080000 	bleq	21423c <__ccfg+0x1f4294>
   14238:	00005310 	andeq	r5, r0, r0, lsl r3
   1423c:	a40f0008 	strge	r0, [pc], #-8	; 14244 <__exidx_end+0xe4c4>
   14240:	06000057 			; <UNDEFINED> instruction: 0x06000057
   14244:	8f1f019f 	svchi	0x001f019f
   14248:	0f000005 	svceq	0x00000005
   1424c:	00005342 	andeq	r5, r0, r2, asr #6
   14250:	0c01a206 	sfmeq	f2, 1, [r1], {6}
   14254:	0000002c 	andeq	r0, r0, ip, lsr #32
   14258:	004f110f 	subeq	r1, pc, pc, lsl #2
   1425c:	01a50600 			; <UNDEFINED> instruction: 0x01a50600
   14260:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14264:	58890f00 	stmpl	r9, {r8, r9, sl, fp}
   14268:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   1426c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14270:	ad0f0000 	stcge	0, cr0, [pc, #-0]	; 14278 <__exidx_end+0xe4f8>
   14274:	06000049 	streq	r0, [r0], -r9, asr #32
   14278:	2c0c01ab 	stfcss	f0, [ip], {171}	; 0xab
   1427c:	0f000000 	svceq	0x00000000
   14280:	0000534c 	andeq	r5, r0, ip, asr #6
   14284:	0c01ae06 	stceq	14, cr10, [r1], {6}
   14288:	0000002c 	andeq	r0, r0, ip, lsr #32
   1428c:	0051fb0f 	subseq	pc, r1, pc, lsl #22
   14290:	01b10600 			; <UNDEFINED> instruction: 0x01b10600
   14294:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14298:	52060f00 	andpl	r0, r6, #0, 30
   1429c:	b4060000 	strlt	r0, [r6], #-0
   142a0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142a4:	560f0000 	strpl	r0, [pc], -r0
   142a8:	06000053 			; <UNDEFINED> instruction: 0x06000053
   142ac:	2c0c01b7 	stfcss	f0, [ip], {183}	; 0xb7
   142b0:	0f000000 	svceq	0x00000000
   142b4:	0000505e 	andeq	r5, r0, lr, asr r0
   142b8:	0c01ba06 			; <UNDEFINED> instruction: 0x0c01ba06
   142bc:	0000002c 	andeq	r0, r0, ip, lsr #32
   142c0:	0057e80f 	subseq	lr, r7, pc, lsl #16
   142c4:	01bd0600 			; <UNDEFINED> instruction: 0x01bd0600
   142c8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142cc:	53600f00 	cmnpl	r0, #0, 30
   142d0:	c0060000 	andgt	r0, r6, r0
   142d4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142d8:	c00f0000 	andgt	r0, pc, r0
   142dc:	06000058 			; <UNDEFINED> instruction: 0x06000058
   142e0:	2c0c01c3 	stfcss	f0, [ip], {195}	; 0xc3
   142e4:	0f000000 	svceq	0x00000000
   142e8:	00005754 	andeq	r5, r0, r4, asr r7
   142ec:	0c01c606 	stceq	6, cr12, [r1], {6}
   142f0:	0000002c 	andeq	r0, r0, ip, lsr #32
   142f4:	0057600f 	subseq	r6, r7, pc
   142f8:	01c90600 	biceq	r0, r9, r0, lsl #12
   142fc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14300:	576c0f00 	strbpl	r0, [ip, -r0, lsl #30]!
   14304:	cc060000 	stcgt	0, cr0, [r6], {-0}
   14308:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1430c:	910f0000 	mrsls	r0, CPSR
   14310:	06000057 			; <UNDEFINED> instruction: 0x06000057
   14314:	2c0c01d0 	stfcss	f0, [ip], {208}	; 0xd0
   14318:	0f000000 	svceq	0x00000000
   1431c:	000058b3 			; <UNDEFINED> instruction: 0x000058b3
   14320:	0c01d306 	stceq	3, cr13, [r1], {6}
   14324:	0000002c 	andeq	r0, r0, ip, lsr #32
   14328:	004a120f 	subeq	r1, sl, pc, lsl #4
   1432c:	01d60600 	bicseq	r0, r6, r0, lsl #12
   14330:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14334:	47bb0f00 	ldrmi	r0, [fp, r0, lsl #30]!
   14338:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
   1433c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14340:	d70f0000 	strle	r0, [pc, -r0]
   14344:	0600004c 	streq	r0, [r0], -ip, asr #32
   14348:	2c0c01dc 	stfcss	f0, [ip], {220}	; 0xdc
   1434c:	0f000000 	svceq	0x00000000
   14350:	000049e5 	andeq	r4, r0, r5, ror #19
   14354:	0c01df06 	stceq	15, cr13, [r1], {6}
   14358:	0000002c 	andeq	r0, r0, ip, lsr #32
   1435c:	0053710f 	subseq	r7, r3, pc, lsl #2
   14360:	01e20600 	mvneq	r0, r0, lsl #12
   14364:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14368:	4f3a0f00 	svcmi	0x003a0f00
   1436c:	e5060000 	str	r0, [r6, #-0]
   14370:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14374:	740f0000 	strvc	r0, [pc], #-0	; 1437c <__exidx_end+0xe5fc>
   14378:	06000051 			; <UNDEFINED> instruction: 0x06000051
   1437c:	2c0c01e8 	stfcss	f0, [ip], {232}	; 0xe8
   14380:	0f000000 	svceq	0x00000000
   14384:	00005680 	andeq	r5, r0, r0, lsl #13
   14388:	0c01ef06 	stceq	15, cr14, [r1], {6}
   1438c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14390:	0058570f 	subseq	r5, r8, pc, lsl #14
   14394:	01f20600 	mvnseq	r0, r0, lsl #12
   14398:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1439c:	58670f00 	stmdapl	r7!, {r8, r9, sl, fp}^
   143a0:	f5060000 			; <UNDEFINED> instruction: 0xf5060000
   143a4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143a8:	bc0f0000 	stclt	0, cr0, [pc], {-0}
   143ac:	0600004b 	streq	r0, [r0], -fp, asr #32
   143b0:	2c0c01f8 	stfcss	f0, [ip], {248}	; 0xf8
   143b4:	0f000000 	svceq	0x00000000
   143b8:	000056c8 	andeq	r5, r0, r8, asr #13
   143bc:	0c01fb06 			; <UNDEFINED> instruction: 0x0c01fb06
   143c0:	0000002c 	andeq	r0, r0, ip, lsr #32
   143c4:	0052dc0f 	subseq	sp, r2, pc, lsl #24
   143c8:	01fe0600 	mvnseq	r0, r0, lsl #12
   143cc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143d0:	4d500f00 	ldclmi	15, cr0, [r0, #-0]
   143d4:	02060000 	andeq	r0, r6, #0
   143d8:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   143dc:	d00f0000 	andle	r0, pc, r0
   143e0:	06000054 			; <UNDEFINED> instruction: 0x06000054
   143e4:	2c0c020a 	sfmcs	f0, 4, [ip], {10}
   143e8:	0f000000 	svceq	0x00000000
   143ec:	00004c43 	andeq	r4, r0, r3, asr #24
   143f0:	0c020d06 	stceq	13, cr0, [r2], {6}
   143f4:	0000002c 	andeq	r0, r0, ip, lsr #32
   143f8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143fc:	0007fe00 	andeq	pc, r7, r0, lsl #28
   14400:	0f000d00 	svceq	0x00000d00
   14404:	00004e3a 	andeq	r4, r0, sl, lsr lr
   14408:	0c03fb06 			; <UNDEFINED> instruction: 0x0c03fb06
   1440c:	000007f3 	strdeq	r0, [r0], -r3
   14410:	0004f50c 	andeq	pc, r4, ip, lsl #10
   14414:	00081b00 	andeq	r1, r8, r0, lsl #22
   14418:	00331500 	eorseq	r1, r3, r0, lsl #10
   1441c:	000d0000 	andeq	r0, sp, r0
   14420:	00539d0f 	subseq	r9, r3, pc, lsl #26
   14424:	05840600 	streq	r0, [r4, #1536]	; 0x600
   14428:	00080b14 	andeq	r0, r8, r4, lsl fp
   1442c:	4efc1600 	cdpmi	6, 15, cr1, cr12, cr0, {0}
   14430:	01070000 	mrseq	r0, (UNDEF: 7)
   14434:	000000a2 	andeq	r0, r0, r2, lsr #1
   14438:	06058b06 	streq	r8, [r5], -r6, lsl #22
   1443c:	00000866 	andeq	r0, r0, r6, ror #16
   14440:	004c990b 	subeq	r9, ip, fp, lsl #18
   14444:	e90b0000 	stmdb	fp, {}	; <UNPREDICTABLE>
   14448:	01000050 	qaddeq	r0, r0, r0
   1444c:	0048690b 	subeq	r6, r8, fp, lsl #18
   14450:	190b0200 	stmdbne	fp, {r9}
   14454:	03000058 	movweq	r0, #88	; 0x58
   14458:	0054170b 	subseq	r1, r4, fp, lsl #14
   1445c:	0a0b0400 	beq	2d5464 <__ccfg+0x2b54bc>
   14460:	05000054 	streq	r0, [r0, #-84]	; 0xffffffac
   14464:	00496d0b 	subeq	r6, r9, fp, lsl #26
   14468:	0f000600 	svceq	0x00000600
   1446c:	00005809 	andeq	r5, r0, r9, lsl #16
   14470:	15059806 	strne	r9, [r5, #-2054]	; 0xfffff7fa
   14474:	00000828 	andeq	r0, r0, r8, lsr #16
   14478:	0056ed0f 	subseq	lr, r6, pc, lsl #26
   1447c:	07990600 	ldreq	r0, [r9, r0, lsl #12]
   14480:	00003311 	andeq	r3, r0, r1, lsl r3
   14484:	538a0f00 	orrpl	r0, sl, #0, 30
   14488:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   1448c:	002c0c07 	eoreq	r0, ip, r7, lsl #24
   14490:	5f040000 	svcpl	0x00040000
   14494:	07000056 	smlsdeq	r0, r6, r0, r0
   14498:	00a2167b 	adceq	r1, r2, fp, ror r6
   1449c:	8d0e0000 	stchi	0, cr0, [lr, #-0]
   144a0:	02000008 	andeq	r0, r0, #8
   144a4:	0a6b0502 	beq	1ad58b4 <__ccfg+0x1ab590c>
   144a8:	03040000 	movweq	r0, #16384	; 0x4000
   144ac:	07000049 	streq	r0, [r0, -r9, asr #32]
   144b0:	002c0f80 	eoreq	r0, ip, r0, lsl #31
   144b4:	02040000 	andeq	r0, r4, #0
   144b8:	07000049 	streq	r0, [r0, -r9, asr #32]
   144bc:	00331681 	eorseq	r1, r3, r1, lsl #13
   144c0:	6a040000 	bvs	1144c8 <__ccfg+0xf4520>
   144c4:	07000053 	smlsdeq	r0, r3, r0, r0
   144c8:	003a0f84 	eorseq	r0, sl, r4, lsl #31
   144cc:	04020000 	streq	r0, [r2], #-0
   144d0:	004a2d04 	subeq	r2, sl, r4, lsl #26
   144d4:	03080200 	movweq	r0, #33280	; 0x8200
   144d8:	00004a25 	andeq	r4, r0, r5, lsr #20
   144dc:	35040802 	strcc	r0, [r4, #-2050]	; 0xfffff7fe
   144e0:	02000044 	andeq	r0, r0, #68	; 0x44
   144e4:	54250310 	strtpl	r0, [r5], #-784	; 0xfffffcf0
   144e8:	81130000 	tsthi	r3, r0
   144ec:	08000053 	stmdaeq	r0, {r0, r1, r4, r6}
   144f0:	0a01ed07 	beq	8f914 <__ccfg+0x6f96c>
   144f4:	00000910 	andeq	r0, r0, r0, lsl r9
   144f8:	776f6c17 			; <UNDEFINED> instruction: 0x776f6c17
   144fc:	01ed0700 	mvneq	r0, r0, lsl #14
   14500:	0008a51a 	andeq	sl, r8, sl, lsl r5
   14504:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
   14508:	07000048 	streq	r0, [r0, -r8, asr #32]
   1450c:	a51f01ed 	ldrge	r0, [pc, #-493]	; 14327 <__exidx_end+0xe5a7>
   14510:	04000008 	streq	r0, [r0], #-8
   14514:	07081800 	streq	r1, [r8, -r0, lsl #16]
   14518:	320901f4 	andcc	r0, r9, #244, 2	; 0x3d
   1451c:	19000009 	stmdbne	r0, {r0, r3}
   14520:	f6070073 			; <UNDEFINED> instruction: 0xf6070073
   14524:	08e51301 	stmiaeq	r5!, {r0, r8, r9, ip}^
   14528:	6c190000 	ldcvs	0, cr0, [r9], {-0}
   1452c:	f707006c 			; <UNDEFINED> instruction: 0xf707006c
   14530:	08bd0a01 	popeq	{r0, r9, fp}
   14534:	1a000000 	bne	1453c <__exidx_end+0xe7bc>
   14538:	000049fc 	strdeq	r4, [r0], -ip
   1453c:	0301f807 	movweq	pc, #6151	; 0x1807	; <UNPREDICTABLE>
   14540:	00000910 	andeq	r0, r0, r0, lsl r9
   14544:	0009320e 	andeq	r3, r9, lr, lsl #4
   14548:	08990c00 	ldmeq	r9, {sl, fp}
   1454c:	09540000 	ldmdbeq	r4, {}^	; <UNPREDICTABLE>
   14550:	33150000 	tstcc	r5, #0
   14554:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   14558:	09440e00 	stmdbeq	r4, {r9, sl, fp}^
   1455c:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
   14560:	07000052 	smlsdeq	r0, r2, r0, r0
   14564:	541601fc 	ldrpl	r0, [r6], #-508	; 0xfffffe04
   14568:	0f000009 	svceq	0x00000009
   1456c:	000049d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   14570:	16020207 	strne	r0, [r2], -r7, lsl #4
   14574:	00000954 	andeq	r0, r0, r4, asr r9
   14578:	00482a1b 	subeq	r2, r8, fp, lsl sl
   1457c:	02240100 	eoreq	r0, r4, #0, 2
   14580:	0008bd01 	andeq	fp, r8, r1, lsl #26
   14584:	004adc00 	subeq	sp, sl, r0, lsl #24
   14588:	00005400 	andeq	r5, r0, r0, lsl #8
   1458c:	1c9c0100 	ldfnes	f0, [ip], {0}
   14590:	24010075 	strcs	r0, [r1], #-117	; 0xffffff8b
   14594:	08bd1202 	popeq	{r1, r9, ip}
   14598:	5bb00000 	blpl	fec145a0 <_estack+0xdec0f5a0>
   1459c:	5bac0000 	blpl	feb145a4 <_estack+0xdeb0f5a4>
   145a0:	761c0000 	ldrvc	r0, [ip], -r0
   145a4:	02240100 	eoreq	r0, r4, #0, 2
   145a8:	0008bd1c 	andeq	fp, r8, ip, lsl sp
   145ac:	005bdc00 	subseq	sp, fp, r0, lsl #24
   145b0:	005bd800 	subseq	sp, fp, r0, lsl #16
   145b4:	75751d00 	ldrbvc	r1, [r5, #-3328]!	; 0xfffff300
   145b8:	02260100 	eoreq	r0, r6, #0, 2
   145bc:	00093f11 	andeq	r3, r9, r1, lsl pc
   145c0:	76761d00 	ldrbtvc	r1, [r6], -r0, lsl #26
   145c4:	02270100 	eoreq	r0, r7, #0, 2
   145c8:	00093f11 	andeq	r3, r9, r1, lsl pc
   145cc:	00771d00 	rsbseq	r1, r7, r0, lsl #26
   145d0:	0b022801 	bleq	9e5dc <__ccfg+0x7e634>
   145d4:	00000932 	andeq	r0, r0, r2, lsr r9
   145d8:	0014201e 	andseq	r2, r4, lr, lsl r0
   145dc:	5f5f1d00 	svcpl	0x005f1d00
   145e0:	28010077 	stmdacs	r1, {r0, r1, r2, r4, r5, r6}
   145e4:	09321602 	ldmdbeq	r2!, {r1, r9, sl, ip}
   145e8:	201e0000 	andscs	r0, lr, r0
   145ec:	1f000014 	svcne	0x00000014
   145f0:	00005894 	muleq	r0, r4, r8
   145f4:	16022801 	strne	r2, [r2], -r1, lsl #16
   145f8:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   145fc:	00005c06 	andeq	r5, r0, r6, lsl #24
   14600:	00005c04 	andeq	r5, r0, r4, lsl #24
   14604:	0058991f 	subseq	r9, r8, pc, lsl r9
   14608:	02280100 	eoreq	r0, r8, #0, 2
   1460c:	0008b116 	andeq	fp, r8, r6, lsl r1
   14610:	005c1f00 	subseq	r1, ip, r0, lsl #30
   14614:	005c1900 	subseq	r1, ip, r0, lsl #18
   14618:	589e1f00 	ldmpl	lr, {r8, r9, sl, fp, ip}
   1461c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   14620:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14624:	5c510000 	mrapl	r0, r1, acc0
   14628:	5c4d0000 	marpl	acc0, r0, sp
   1462c:	a31f0000 	tstge	pc, #0
   14630:	01000058 	qaddeq	r0, r8, r0
   14634:	b1160228 	tstlt	r6, r8, lsr #4
   14638:	7c000008 	stcvc	0, cr0, [r0], {8}
   1463c:	7a00005c 	bvc	147b4 <__exidx_end+0xea34>
   14640:	1f00005c 	svcne	0x0000005c
   14644:	000056c3 	andeq	r5, r0, r3, asr #13
   14648:	16022801 	strne	r2, [r2], -r1, lsl #16
   1464c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   14650:	00005c93 	muleq	r0, r3, ip
   14654:	00005c8f 	andeq	r5, r0, pc, lsl #25
   14658:	0057b21f 	subseq	fp, r7, pc, lsl r2
   1465c:	02280100 	eoreq	r0, r8, #0, 2
   14660:	0008b116 	andeq	fp, r8, r6, lsl r1
   14664:	005cbb00 	subseq	fp, ip, r0, lsl #22
   14668:	005cb700 	subseq	fp, ip, r0, lsl #14
   1466c:	56a51f00 	strtpl	r1, [r5], r0, lsl #30
   14670:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   14674:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14678:	5ce30000 	stclpl	0, cr0, [r3]
   1467c:	5cdf0000 	ldclpl	0, cr0, [pc], {0}
   14680:	9f1f0000 	svcls	0x001f0000
   14684:	01000057 	qaddeq	r0, r7, r0
   14688:	b1160228 	tstlt	r6, r8, lsr #4
   1468c:	09000008 	stmdbeq	r0, {r3}
   14690:	0500005d 	streq	r0, [r0, #-93]	; 0xffffffa3
   14694:	0000005d 	andeq	r0, r0, sp, asr r0
   14698:	Address 0x0000000000014698 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <NOROM_RFCRfTrimRead+0xd0>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet[1] = message->gid;
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     104:	14000005 	strne	r0, [r0], #-5
		*p = message->tpe;p++;
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
		*p = message->request_number;p++;
     10c:	15150000 	ldrne	r0, [r5, #-0]
		*p = message->sender_id;p++;
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		*p = message->receiver_id;p++;
     114:	00130113 	andseq	r0, r3, r3, lsl r1
		switch(message->tpe) {
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
		tcv_endp(packet);
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
}
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
		finish;
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				*p = message->padding;p++;
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
				strncpy(p, message->record, sizeof(message->record));
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				strncpy(p, message->record, sizeof(message->record));
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     158:	131b0000 	tstne	fp, #0
				strncpy(p, message->record, sizeof(message->record));
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
				break;
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
				*p = message->record_index;p++;
     164:	010b3905 	tsteq	fp, r5, lsl #18
				*p = message->padding;
     168:	1c000013 	stcne	0, cr0, [r0], {19}
				break;
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
struct Node* init_node(struct Node* node){
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
    node2->gid = 0;
     194:	00001349 	andeq	r1, r0, r9, asr #6
    node2->data_base.item_count = 0;
     198:	0300131f 	movweq	r1, #799	; 0x31f
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
     1a0:	01152000 	tsteq	r5, r0
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a8:	34210000 	strtcc	r0, [r1], #-0
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    node2->index = 0;
     1b4:	3f13490b 	svccc	0x0013490b
};
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    return (uint8_t) (rand() % 255);
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
}
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
        for (int i = 0; i < NUMB_OF_ENT; i++){
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
                node->data_base.item_array[i].owner_id = owner_id;
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
                node->data_base.item_count += 1;
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
                node->data_base.item_count += 1;
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	34290000 	strtcc	r0, [r9], #-0
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	3f13490b 	svccc	0x0013490b
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
};
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
        return false;
     244:	01120111 	tsteq	r2, r1, lsl r1
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
     24c:	052b0000 	streq	r0, [fp, #-0]!
            node->nnodes[i] = 0; // set to null byte
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
};
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	01110b39 	tsteq	r1, r9, lsr fp
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
     270:	00065501 	andeq	r5, r6, r1, lsl #10
     274:	00342e00 	eorseq	r2, r4, r0, lsl #28
        node->data_base.item_count -= 1;
     278:	0b3a0803 	bleq	e8228c <__ccfg+0xe622e4>
        node->data_base.item_array[index].timestamp = 0;
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
        node->data_base.item_count -= 1;
     280:	0a021349 	beq	84fac <__ccfg+0x65004>
};
     284:	0b2f0000 	bleq	bc028c <__ccfg+0xba02e4>
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     288:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     28c:	00130101 	andseq	r0, r3, r1, lsl #2
     290:	00343000 	eorseq	r3, r4, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	0b3a0e03 	bleq	e83aa8 <__ccfg+0xe63b00>
     298:	0b39053b 	bleq	e4178c <__ccfg+0xe217e4>
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	0a021349 	beq	84fc8 <__ccfg+0x65020>
            node->data_base.item_array[i].timestamp = 0;
     2a0:	1d310000 	ldcne	0, cr0, [r1, #-0]
    node->data_base.item_count = 0;
     2a4:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     2ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
}
     2b0:	3200000b 	andcc	r0, r0, #11
        return true;
     2b4:	13310005 	teqne	r1, #5
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b8:	00000602 	andeq	r0, r0, r2, lsl #12
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	55010b33 	strpl	r0, [r1, #-2867]	; 0xfffff4cd
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	00130106 	andseq	r0, r3, r6, lsl #2
     2c4:	00343400 	eorseq	r3, r4, r0, lsl #8
     2c8:	0b3a0803 	bleq	e822dc <__ccfg+0xe62334>
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	0b39053b 	bleq	e417c0 <__ccfg+0xe21818>
	response_message->tpe = RESPONSE;
     2d0:	06021349 	streq	r1, [r2], -r9, asr #6
	response_message->status = status;
     2d4:	1d350000 	ldcne	0, cr0, [r5, #-0]
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	11133101 	tstne	r3, r1, lsl #2
	response_message->gid = gid;
     2dc:	58011201 	stmdapl	r1, {r0, r9, ip}
	response_message->sender_id = receiver_id;
     2e0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	response_message->status = status;
     2e4:	3600000b 	strcc	r0, [r0], -fp
	if (!padding){
     2e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		response_message->padding = padding;
     2ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (rec != NULL){
     2f0:	13490b39 	movtne	r0, #39737	; 0x9b39
     2f4:	00000602 	andeq	r0, r0, r2, lsl #12
		strncpy(response_message->record, rec, 20);
     2f8:	11010b37 	tstne	r1, r7, lsr fp
     2fc:	00011201 	andeq	r1, r1, r1, lsl #4
     300:	00343800 	eorseq	r3, r4, r0, lsl #16
};
     304:	0b3a0e03 	bleq	e83b18 <__ccfg+0xe63b70>
fsm receiver(struct Node* node_db) {
     308:	0b39053b 	bleq	e417fc <__ccfg+0xe21854>
     30c:	00001349 	andeq	r1, r0, r9, asr #6
     310:	3f012e39 	svccc	0x00012e39
     314:	3a0e030c 	bcc	380f4c <__ccfg+0x360fa4>
     318:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     31c:	110c270b 	tstne	ip, fp, lsl #14
     320:	40011201 	andmi	r1, r1, r1, lsl #4
     324:	0013010a 	andseq	r0, r3, sl, lsl #2
		DEBUG_PRINT("\r\nreceiving 0");
     328:	00053a00 	andeq	r3, r5, r0, lsl #20
     32c:	0b3a0e03 	bleq	e83b40 <__ccfg+0xe63b98>
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	0b390b3b 	bleq	e43024 <__ccfg+0xe2307c>
     334:	06021349 	streq	r1, [r2], -r9, asr #6
     338:	343b0000 	ldrtcc	r0, [fp], #-0
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
     340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		DEBUG_PRINT("\r\nreceiving 2");
     344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     348:	3c000006 	stccc	0, cr0, [r0], {6}
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	0b3b0b3a 	bleq	ec3040 <__ccfg+0xea3098>
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	01110b39 	tsteq	r1, r9, lsr fp
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	343d0000 	ldrtcc	r0, [sp], #-0
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	3a0e0300 	bcc	380f64 <__ccfg+0x360fbc>
		switch (response_message_5->tpe){
     360:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     364:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     368:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
     36c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     370:	0b3b0b3a 	bleq	ec3060 <__ccfg+0xea30b8>
     374:	13490b39 	movtne	r0, #39737	; 0x9b39
     378:	00000b1c 	andeq	r0, r0, ip, lsl fp
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37c:	0300343f 	movweq	r3, #1087	; 0x43f
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	3b0b3a08 	blcc	2ceba8 <__ccfg+0x2aec00>
				if (discovery_request_message->gid == node_db->gid){
     384:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     388:	00060213 	andeq	r0, r6, r3, lsl r2
					DEBUG_PRINT("\r\nSending to sender");
     38c:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
     390:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
					DEBUG_PRINT("\r\nSending to sender");
     394:	0b3b0b3a 	bleq	ec3084 <__ccfg+0xea30dc>
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	01111349 	tsteq	r1, r9, asr #6
					response_message_0->sender_id = node_db->id;
     3a0:	0a400112 	beq	10007f0 <__ccfg+0xfe0848>
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	00001301 	andeq	r1, r0, r1, lsl #6
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	03000541 	movweq	r0, #1345	; 0x541
					call sender(response_message_0, done_case);
     3ac:	3b0b3a08 	blcc	2cebd4 <__ccfg+0x2aec2c>
     3b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3b4:	00060213 	andeq	r0, r6, r3, lsl r2
     3b8:	00054200 	andeq	r4, r5, r0, lsl #4
     3bc:	0b3a0e03 	bleq	e83bd0 <__ccfg+0xe63c28>
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	0b390b3b 	bleq	e430b4 <__ccfg+0xe2310c>
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	0a021349 	beq	850f0 <__ccfg+0x65148>
     3c8:	05430000 	strbeq	r0, [r3, #-0]
     3cc:	3a080300 	bcc	200fd4 <__ccfg+0x1e102c>
     3d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3d8:	4400000a 	strmi	r0, [r0], #-10
     3dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 32c <receiver+0x24>
     3e0:	0b3a0e03 	bleq	e83bf4 <__ccfg+0xe63c4c>
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	0b390b3b 	bleq	e430d8 <__ccfg+0xe23130>
					node_db->index+=1;
     3e8:	13490c27 	movtne	r0, #39975	; 0x9c27
     3ec:	13010b20 	movwne	r0, #6944	; 0x1b20
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	05450000 	strbeq	r0, [r5, #-0]
		tcv_endp(incoming_packet);
     3f4:	3a0e0300 	bcc	380ffc <__ccfg+0x361054>
     3f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	0013490b 	andseq	r4, r3, fp, lsl #18
     400:	010b4600 	tsteq	fp, r0, lsl #12
		proceed receiving;
     404:	34470000 	strbcc	r0, [r7], #-0
		ser_out(response_1_create, "\r\nData Saved");
     408:	3a080300 	bcc	201010 <__ccfg+0x1e1068>
     40c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		proceed receiving;
     410:	0013490b 	andseq	r4, r3, fp, lsl #18
     414:	001d4800 	andseq	r4, sp, r0, lsl #16
		ser_out(response_1_delete, "\r\nRecord Deleted");
     418:	01521331 	cmpeq	r2, r1, lsr r3
     41c:	0b580655 	bleq	1601d78 <__ccfg+0x15e1dd0>
		proceed receiving;
     420:	0b570b59 	bleq	15c318c <__ccfg+0x15a31e4>
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     424:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
     428:	030c3f00 	movweq	r3, #52992	; 0xcf00
     42c:	3b0b3a0e 	blcc	2cec6c <__ccfg+0x2aecc4>
     430:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     434:	1113490c 	tstne	r3, ip, lsl #18
		proceed receiving;
     438:	40011201 	andmi	r1, r1, r1, lsl #4
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     43c:	4a00000a 	bmi	46c <receiver+0x164>
     440:	08030005 	stmdaeq	r3, {r0, r2}
     444:	0b3b0b3a 	bleq	ec3134 <__ccfg+0xea318c>
     448:	13490b39 	movtne	r0, #39737	; 0x9b39
		proceed receiving;
     44c:	2e4b0000 	cdpcs	0, 4, cr0, cr11, cr0, {0}
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	3a0e0300 	bcc	381058 <__ccfg+0x3610b0>
     454:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     458:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     45c:	000b2013 	andeq	r2, fp, r3, lsl r0
		proceed receiving;
     460:	012e4c00 			; <UNDEFINED> instruction: 0x012e4c00
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	01111331 	tsteq	r1, r1, lsr r3
     468:	0a400112 	beq	10008b8 <__ccfg+0xfe0910>
     46c:	00001301 	andeq	r1, r0, r1, lsl #6
     470:	3100054d 	tstcc	r0, sp, asr #10
		proceed receiving;
     474:	000a0213 	andeq	r0, sl, r3, lsl r2
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	012e4e00 			; <UNDEFINED> instruction: 0x012e4e00
     47c:	01111331 	tsteq	r1, r1, lsr r3
		proceed receiving;
     480:	0a400112 	beq	10008d0 <__ccfg+0xfe0928>
}
     484:	0b4f0000 	bleq	13c048c <__ccfg+0x13a04e4>
     488:	11133101 	tstne	r3, r1, lsl #2
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	01011201 	tsteq	r1, r1, lsl #4
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	50000013 	andpl	r0, r0, r3, lsl r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     494:	13310034 	teqne	r1, #52	; 0x34
     498:	00000602 	andeq	r0, r0, r2, lsl #12
     49c:	31011d51 	tstcc	r1, r1, asr sp
     4a0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
					break;
     4a8:	000b570b 	andeq	r5, fp, fp, lsl #14
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	11010000 	mrsne	r0, (UNDEF: 1)
     4b0:	130e2501 	movwne	r2, #58625	; 0xe501
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	1b0e030b 	blne	3810e8 <__ccfg+0x361140>
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	1106550e 	tstne	r6, lr, lsl #10
     4bc:	00061001 	andeq	r1, r6, r1
     4c0:	00240200 	eoreq	r0, r4, r0, lsl #4
     4c4:	0b3e0b0b 	bleq	f830f8 <__ccfg+0xf63150>
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	00000e03 	andeq	r0, r0, r3, lsl #28
						status = (uint8_t) SUCCESS;
     4cc:	03001603 	movweq	r1, #1539	; 0x603
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	3b0b3a0e 	blcc	2ced10 <__ccfg+0x2aed68>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     4dc:	0b0b0024 	bleq	2c0574 <__ccfg+0x2a05cc>
     4e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4e4:	26050000 	strcs	r0, [r5], -r0
     4e8:	00134900 	andseq	r4, r3, r0, lsl #18
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	00350600 	eorseq	r0, r5, r0, lsl #12
     4f0:	00001349 	andeq	r1, r0, r9, asr #6
					call sender(response_message_2, done_case);
     4f4:	0b000f07 	bleq	4118 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x28>
     4f8:	0013490b 	andseq	r4, r3, fp, lsl #18
     4fc:	01130800 	tsteq	r3, r0, lsl #16
     500:	0b3a0b0b 	bleq	e83134 <__ccfg+0xe6318c>
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	0b390b3b 	bleq	e431f8 <__ccfg+0xe23250>
						status = (uint8_t) DB_FULL;
     508:	00001301 	andeq	r1, r0, r1, lsl #6
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	03000d09 	movweq	r0, #3337	; 0xd09
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     51c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     520:	0a00000b 	beq	554 <receiver+0x24c>
     524:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	0b3b0b3a 	bleq	ec3218 <__ccfg+0xea3270>
     52c:	13490b39 	movtne	r0, #39737	; 0x9b39
     530:	00000b38 	andeq	r0, r0, r8, lsr fp
     534:	0300340b 	movweq	r3, #1035	; 0x40b
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	3b0b3a0e 	blcc	2ced78 <__ccfg+0x2aedd0>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     540:	3c0c3f13 	stccc	15, cr3, [ip], {19}
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	0c00000c 	stceq	0, cr0, [r0], {12}
     548:	13490101 	movtne	r0, #37121	; 0x9101
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	00001301 	andeq	r1, r0, r1, lsl #6
     550:	0000210d 	andeq	r2, r0, sp, lsl #2
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	00160e00 	andseq	r0, r6, r0, lsl #28
     558:	0b3a0e03 	bleq	e83d6c <__ccfg+0xe63dc4>
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	0b39053b 	bleq	e41a50 <__ccfg+0xe21aa8>
     560:	00001349 	andeq	r1, r0, r9, asr #6
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
     568:	0013010c 	andseq	r0, r3, ip, lsl #2
     56c:	00051000 	andeq	r1, r5, r0
     570:	00001349 	andeq	r1, r0, r9, asr #6
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	03003411 	movweq	r3, #1041	; 0x411
     578:	3b0b3a0e 	blcc	2cedb8 <__ccfg+0x2aee10>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     580:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     584:	1200000c 	andne	r0, r0, #12
     588:	0b0b0113 	bleq	2c09dc <__ccfg+0x2a0a34>
     58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     590:	13010b39 	movwne	r0, #6969	; 0x1b39
     594:	0d130000 	ldceq	0, cr0, [r3, #-0]
     598:	3a0e0300 	bcc	3811a0 <__ccfg+0x3611f8>
     59c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     5a4:	1400000b 	strne	r0, [r0], #-11
     5a8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     5ac:	0b3a0b0b 	bleq	e831e0 <__ccfg+0xe63238>
     5b0:	0b39053b 	bleq	e41aa4 <__ccfg+0xe21afc>
     5b4:	00001301 	andeq	r1, r0, r1, lsl #6
     5b8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
     5bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     5c0:	00341600 	eorseq	r1, r4, r0, lsl #12
     5c4:	0b3a0e03 	bleq	e83dd8 <__ccfg+0xe63e30>
     5c8:	0b390b3b 	bleq	e432bc <__ccfg+0xe23314>
     5cc:	00001349 	andeq	r1, r0, r9, asr #6
     5d0:	03003417 	movweq	r3, #1047	; 0x417
     5d4:	3b0b3a0e 	blcc	2cee14 <__ccfg+0x2aee6c>
     5d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     5dc:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     5e0:	1800000a 	stmdane	r0, {r1, r3}
     5e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     5f0:	00000a02 	andeq	r0, r0, r2, lsl #20
     5f4:	47003419 	smladmi	r0, r9, r4, r3
     5f8:	3b0b3a13 	blcc	2cee4c <__ccfg+0x2aeea4>
     5fc:	020b3905 	andeq	r3, fp, #81920	; 0x14000
     600:	1a00000a 	bne	630 <receiver+0x328>
     604:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 554 <receiver+0x24c>
     608:	0b3a0e03 	bleq	e83e1c <__ccfg+0xe63e74>
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	0b39053b 	bleq	e41b00 <__ccfg+0xe21b58>
     610:	13490c27 	movtne	r0, #39975	; 0x9c27
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	01120111 	tsteq	r2, r1, lsl r1
				DEBUG_PRINT("\r\nretrieve rec");
     618:	13010a40 	movwne	r0, #6720	; 0x1a40
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	0b1b0000 	bleq	6c0624 <__ccfg+0x6a067c>
     620:	01065501 	tsteq	r6, r1, lsl #10
     624:	1c000013 	stcne	0, cr0, [r0], {19}
     628:	08030034 	stmdaeq	r3, {r2, r4, r5}
     62c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     630:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
     638:	11133100 	tstne	r3, r0, lsl #2
     63c:	58011201 	stmdapl	r1, {r0, r9, ip}
    return node->data_base.item_array[index];
     640:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     644:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
     648:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 598 <receiver+0x290>
     64c:	0b3a0e03 	bleq	e83e60 <__ccfg+0xe63eb8>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	0b39053b 	bleq	e41b44 <__ccfg+0xe21b9c>
    return node->data_base.item_array[index];
     654:	01120111 	tsteq	r2, r1, lsl r1
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	13010a40 	movwne	r0, #6720	; 0x1a40
     65c:	0a1f0000 	beq	7c0664 <__ccfg+0x7a06bc>
     660:	3a0e0300 	bcc	381268 <__ccfg+0x3612c0>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     668:	2000000b 	andcs	r0, r0, fp
     66c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     670:	06550152 			; <UNDEFINED> instruction: 0x06550152
     674:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     678:	13010b57 	movwne	r0, #6999	; 0x1b57
     67c:	05210000 	streq	r0, [r1, #-0]!
     680:	00133100 	andseq	r3, r3, r0, lsl #2
				DEBUG_PRINT("\r\nResponse");
     684:	011d2200 	tsteq	sp, r0, lsl #4
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	01521331 	cmpeq	r2, r1, lsr r3
				DEBUG_PRINT("\r\nResponse");
     68c:	0b580655 	bleq	1601fe8 <__ccfg+0x15e2040>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	0b570b59 	bleq	15c33fc <__ccfg+0x15a3454>
     694:	00001301 	andeq	r1, r0, r1, lsl #6
     698:	55010b23 	strpl	r0, [r1, #-2851]	; 0xfffff4dd
     69c:	24000006 	strcs	r0, [r0], #-6
     6a0:	1331000a 	teqne	r1, #10
				if(!response_flag){
     6a4:	00000111 	andeq	r0, r0, r1, lsl r1
     6a8:	31001d25 	tstcc	r0, r5, lsr #26
					response_flag=1;
     6ac:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
					trigger(&response_flag);
     6b0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				switch(response_message_5->status){
     6b4:	000b5705 	andeq	r5, fp, r5, lsl #14
     6b8:	011d2600 	tsteq	sp, r0, lsl #12
     6bc:	01111331 	tsteq	r1, r1, lsr r3
     6c0:	0b580112 	bleq	1600b10 <__ccfg+0x15e0b68>
     6c4:	0b570559 	bleq	15c1c30 <__ccfg+0x15a1c88>
						if (response_checker[0] == response_message_5->request_number){
     6c8:	00001301 	andeq	r1, r0, r1, lsl #6
     6cc:	31011d27 	tstcc	r1, r7, lsr #26
     6d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
							switch(response_checker[1]){
     6d4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     6d8:	000b5705 	andeq	r5, fp, r5, lsl #14
     6dc:	001d2800 	andseq	r2, sp, r0, lsl #16
     6e0:	01111331 	tsteq	r1, r1, lsr r3
						proceed response_4;
     6e4:	0b580112 	bleq	1600b34 <__ccfg+0x15e0b8c>
						break;
     6e8:	0b570b59 	bleq	15c3454 <__ccfg+0x15a34ac>
									proceed response_1_delete;
     6ec:	34290000 	strtcc	r0, [r9], #-0
									proceed response_1_retrieve;
     6f0:	3a080300 	bcc	2012f8 <__ccfg+0x1e1350>
						proceed response_2;
     6f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
						proceed response_3;
     6f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
						proceed response_4;
     6fc:	2a000006 	bcs	71c <receiver+0x414>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	0e03012e 	adfeqsp	f0, f3, #0.5
     704:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     708:	0b200b39 	bleq	8033f4 <__ccfg+0x7e344c>
     70c:	00001301 	andeq	r1, r0, r1, lsl #6
     710:	03000a2b 	movweq	r0, #2603	; 0xa2b
     714:	3b0b3a0e 	blcc	2cef54 <__ccfg+0x2aefac>
     718:	000b3905 	andeq	r3, fp, r5, lsl #18
     71c:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     720:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
fsm root {
     724:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     728:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     72c:	01120111 	tsteq	r2, r1, lsl r1
     730:	13010a40 	movwne	r0, #6720	; 0x1a40
     734:	052d0000 	streq	r0, [sp, #-0]!
     738:	3a0e0300 	bcc	381340 <__ccfg+0x361398>
     73c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     740:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     744:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     748:	0111010b 	tsteq	r1, fp, lsl #2
     74c:	13010112 	movwne	r0, #4370	; 0x1112
     750:	342f0000 	strtcc	r0, [pc], #-0	; 758 <root+0x34>
     754:	00133100 	andseq	r3, r3, r0, lsl #2
     758:	010b3000 	mrseq	r3, (UNDEF: 11)
     75c:	06551331 			; <UNDEFINED> instruction: 0x06551331
     760:	34310000 	ldrtcc	r0, [r1], #-0
     764:	02133100 	andseq	r3, r3, #0, 2
     768:	32000006 	andcc	r0, r0, #6
     76c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     770:	06550152 			; <UNDEFINED> instruction: 0x06550152
		node_db = init_node(node_db);
     774:	0b590b58 	bleq	16434dc <__ccfg+0x1623534>
     778:	00000b57 	andeq	r0, r0, r7, asr fp
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	31011d33 	tstcc	r1, r3, lsr sp
     780:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     784:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		tcv_plug (0, &plug_null);
     788:	000b5705 	andeq	r5, fp, r5, lsl #14
     78c:	00053400 	andeq	r3, r5, r0, lsl #8
		sfd = tcv_open (WNONE, 0, 0);
     790:	0b3a0803 	bleq	e827a4 <__ccfg+0xe627fc>
     794:	0b39053b 	bleq	e41c88 <__ccfg+0xe21ce0>
     798:	0a021349 	beq	854c4 <__ccfg+0x6551c>
		if (sfd < 0) {
     79c:	05350000 	ldreq	r0, [r5, #-0]!
     7a0:	02133100 	andseq	r3, r3, #0, 2
			diag("Cannot open tcv interface");
     7a4:	36000006 	strcc	r0, [r0], -r6
			halt();
     7a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	0b3b0b3a 	bleq	ec349c <__ccfg+0xea34f4>
     7b0:	13490b39 	movtne	r0, #39737	; 0x9b39
		runfsm receiver(node_db);
     7b4:	00000602 	andeq	r0, r0, r2, lsl #12
     7b8:	11010b37 	tstne	r1, r7, lsr fp
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	00011201 	andeq	r1, r1, r1, lsl #4
     7c0:	002e3800 	eoreq	r3, lr, r0, lsl #16
     7c4:	0b3a0e03 	bleq	e83fd8 <__ccfg+0xe64030>
     7c8:	0b39053b 	bleq	e41cbc <__ccfg+0xe21d14>
     7cc:	00000b20 	andeq	r0, r0, r0, lsr #22
     7d0:	03012e39 	movweq	r2, #7737	; 0x1e39
     7d4:	3b0b3a0e 	blcc	2cf014 <__ccfg+0x2af06c>
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     7dc:	1201110c 	andne	r1, r1, #12, 2
     7e0:	010a4001 	tsteq	sl, r1
		switch(CHOICE) {
     7e4:	3a000013 	bcc	838 <root+0x114>
     7e8:	0e03012e 	adfeqsp	f0, f3, #0.5
     7ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7f4:	01111349 	tsteq	r1, r9, asr #6
     7f8:	0a400112 	beq	1000c48 <__ccfg+0xfe0ca0>
     7fc:	00001301 	andeq	r1, r0, r1, lsl #6
     800:	0300053b 	movweq	r0, #1339	; 0x53b
     804:	3b0b3a08 	blcc	2cf02c <__ccfg+0x2af084>
     808:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     80c:	00060213 	andeq	r0, r6, r3, lsl r2
				proceed menu;
     810:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
				proceed get_new_group_id;
     814:	0b3a0e03 	bleq	e84028 <__ccfg+0xe64080>
				proceed menu;
     818:	0b39053b 	bleq	e41d0c <__ccfg+0xe21d64>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	01120111 	tsteq	r2, r1, lsl r1
     820:	13010a40 	movwne	r0, #6720	; 0x1a40
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     828:	030c3f01 	movweq	r3, #52993	; 0xcf01
     82c:	3b0b3a0e 	blcc	2cf06c <__ccfg+0x2af0c4>
		DEBUG_PRINT("setting node group ID");
     830:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	2013490c 	andscs	r4, r3, ip, lsl #18
    node->gid = gid; 
     838:	0013010b 	andseq	r0, r3, fp, lsl #2
		proceed menu;
     83c:	00053e00 	andeq	r3, r5, r0, lsl #28
     840:	0b3a0803 	bleq	e82854 <__ccfg+0xe628ac>
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	0b39053b 	bleq	e41d38 <__ccfg+0xe21d90>
     848:	00001349 	andeq	r1, r0, r9, asr #6
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	03000a3f 	movweq	r0, #2623	; 0xa3f
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     850:	3b0b3a08 	blcc	2cf078 <__ccfg+0x2af0d0>
     854:	000b3905 	andeq	r3, fp, r5, lsl #18
     858:	00344000 	eorseq	r4, r4, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	0b3a0e03 	bleq	e84070 <__ccfg+0xe640c8>
    node->id = id;
     860:	0b39053b 	bleq	e41d54 <__ccfg+0xe21dac>
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	06021349 	streq	r1, [r2], -r9, asr #6
     868:	0a410000 	beq	1040870 <__ccfg+0x10208c8>
			strncpy(reason, "Out of Range", 50);
     86c:	3a080300 	bcc	201474 <__ccfg+0x1e14cc>
     870:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     874:	0001110b 	andeq	r1, r1, fp, lsl #2
			proceed invalid_node_id;
     878:	011d4200 	tsteq	sp, r0, lsl #4
fsm root {
     87c:	01111331 	tsteq	r1, r1, lsr r3
				strncpy(reason, "ID is already in use", 50);
     880:	0b580112 	bleq	1600cd0 <__ccfg+0x15e0d28>
		for(int i = 0; i < node_db->index; i++){
     884:	0b570b59 	bleq	15c35f0 <__ccfg+0x15a3648>
     888:	00001301 	andeq	r1, r0, r1, lsl #6
		proceed menu;
     88c:	31011d43 	tstcc	r1, r3, asr #26
     890:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     898:	000b570b 	andeq	r5, fp, fp, lsl #14
     89c:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
     8a0:	0b3a0e03 	bleq	e840b4 <__ccfg+0xe6410c>
		proceed get_new_node_id;
     8a4:	0b39053b 	bleq	e41d98 <__ccfg+0xe21df0>
		if (!clear_node_neighbour_array(node_db)){
     8a8:	13490c27 	movtne	r0, #39975	; 0x9c27
     8ac:	13010b20 	movwne	r0, #6944	; 0x1b20
     8b0:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	3a0e0300 	bcc	3814bc <__ccfg+0x361514>
     8b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			proceed error;
     8bc:	2013490b 	andscs	r4, r3, fp, lsl #18
     8c0:	4600000b 	strmi	r0, [r0], -fp
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	0e03012e 	adfeqsp	f0, f3, #0.5
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	0b3b0b3a 	bleq	ec35b8 <__ccfg+0xea3610>
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	0b200b39 	bleq	8035b8 <__ccfg+0x7e3610>
		request_packet->gid = node_db->gid;
     8d0:	00001301 	andeq	r1, r0, r1, lsl #6
     8d4:	03003447 	movweq	r3, #1095	; 0x447
		request_packet->request_number = generate_request_num();
     8d8:	3b0b3a08 	blcc	2cf100 <__ccfg+0x2af158>
		request_packet->sender_id = node_db->id;
     8dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8e0:	48000013 	stmdami	r0, {r0, r1, r4}
     8e4:	0000010b 	andeq	r0, r0, fp, lsl #2
		call sender(request_packet, wait_discovery);
     8e8:	3f012e49 	svccc	0x00012e49
     8ec:	3a0e030c 	bcc	381524 <__ccfg+0x36157c>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			release;
     8f4:	110c270b 	tstne	ip, fp, lsl #14
				proceed get_new_node_id;
     8f8:	40011201 	andmi	r1, r1, r1, lsl #4
				proceed clear_neighbour_array;
     8fc:	0013010a 	andseq	r0, r3, sl, lsl #2
				proceed create_proto_start;
     900:	00054a00 	andeq	r4, r5, r0, lsl #20
				proceed start_delete_proto;
     904:	0b3a0803 	bleq	e82918 <__ccfg+0xe62970>
				proceed start_retrieve_proto;
     908:	0b390b3b 	bleq	e435fc <__ccfg+0xe23654>
				proceed display_db;
     90c:	06021349 	streq	r1, [r2], -r9, asr #6
				proceed del_local;
     910:	344b0000 	strbcc	r0, [fp], #-0
			if(node_db->id == node_db->nnodes[i]){
     914:	3a0e0300 	bcc	38151c <__ccfg+0x361574>
     918:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     91c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				strncpy(reason, "ID is already in use", 50);
     920:	4c00000a 	stcmi	0, cr0, [r0], {10}
     924:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     928:	0b3b0b3a 	bleq	ec3618 <__ccfg+0xea3670>
				proceed invalid_node_id;
     92c:	01110b39 	tsteq	r1, r9, lsr fp
		for(int i = 0; i < node_db->index; i++){
     930:	1d4d0000 	stclne	0, cr0, [sp, #-0]
		if (discovery_wait_flag == 0){
     934:	52133100 	andspl	r3, r3, #0, 2
     938:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			delay(3000, find_proto_start);
     93c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     940:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
     944:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 894 <root+0x170>
     948:	0b3a0e03 	bleq	e8415c <__ccfg+0xe641b4>
		if (discovery_wait_flag == 1){
     94c:	0b390b3b 	bleq	e43640 <__ccfg+0xe23698>
			delay(3000, display_neighbour_nodes);
     950:	01110c27 	tsteq	r1, r7, lsr #24
     954:	0a400112 	beq	1000da4 <__ccfg+0xfe0dfc>
     958:	054f0000 	strbeq	r0, [pc, #-0]	; 960 <root+0x23c>
     95c:	3a080300 	bcc	201564 <__ccfg+0x1e15bc>
     960:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     964:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     968:	5000000a 	andpl	r0, r0, sl
     96c:	0e03012e 	adfeqsp	f0, f3, #0.5
     970:	0b3b0b3a 	bleq	ec3660 <__ccfg+0xea36b8>
     974:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     978:	13010b20 	movwne	r0, #6944	; 0x1b20
     97c:	05510000 	ldrbeq	r0, [r1, #-0]
     980:	3a080300 	bcc	201588 <__ccfg+0x1e15e0>
     984:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     988:	0013490b 	andseq	r4, r3, fp, lsl #18
     98c:	012e5200 			; <UNDEFINED> instruction: 0x012e5200
     990:	0b3a0e03 	bleq	e841a4 <__ccfg+0xe641fc>
     994:	0b39053b 	bleq	e41e88 <__ccfg+0xe21ee0>
     998:	0b200c27 	bleq	803a3c <__ccfg+0x7e3a94>
     99c:	00001301 	andeq	r1, r0, r1, lsl #6
     9a0:	03000553 	movweq	r0, #1363	; 0x553
		if(node_db->index == 0){
     9a4:	3b0b3a0e 	blcc	2cf1e4 <__ccfg+0x2af23c>
     9a8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     9ac:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
			proceed menu;
     9b0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
fsm root {
     9b4:	0b3b0b3a 	bleq	ec36a4 <__ccfg+0xea36fc>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		for (int i=0; i<node_db->index; i++) {
     9bc:	00000b20 	andeq	r0, r0, r0, lsr #22
     9c0:	03012e55 	movweq	r2, #7765	; 0x1e55
     9c4:	3b0b3a0e 	blcc	2cf204 <__ccfg+0x2af25c>
		proceed menu;
     9c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	2013490c 	andscs	r4, r3, ip, lsl #18
     9d0:	0013010b 	andseq	r0, r3, fp, lsl #2
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	002e5600 	eoreq	r5, lr, r0, lsl #12
     9d8:	0b3a0e03 	bleq	e841ec <__ccfg+0xe64244>
     9dc:	0b39053b 	bleq	e41ed0 <__ccfg+0xe21f28>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	0b200c27 	bleq	803a84 <__ccfg+0x7e3adc>
     9e4:	2e570000 	cdpcs	0, 5, cr0, cr7, cr0, {0}
			strncpy(reason, "Error: improper ID", 50);
     9e8:	3a0e0300 	bcc	3815f0 <__ccfg+0x361648>
     9ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			proceed error;
     9f4:	000b2013 	andeq	r2, fp, r3, lsl r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	002e5800 	eoreq	r5, lr, r0, lsl #16
     9fc:	0b3a0e03 	bleq	e84210 <__ccfg+0xe64268>
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	0b39053b 	bleq	e41ef4 <__ccfg+0xe21f4c>
     a04:	13490c27 	movtne	r0, #39975	; 0x9c27
     a08:	00000b20 	andeq	r0, r0, r0, lsr #22
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	31012e59 	tstcc	r1, r9, asr lr
		create_message->gid = node_db->gid;
     a10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a14:	000a4001 	andeq	r4, sl, r1
     a18:	11010000 	mrsne	r0, (UNDEF: 1)
		create_message->tpe = CREATE_RECORD;
     a1c:	130e2501 	movwne	r2, #58625	; 0xe501
		create_message->request_number = generate_request_num();
     a20:	1b0e030b 	blne	381654 <__ccfg+0x3616ac>
		create_message->sender_id = node_db->id;
     a24:	1106550e 	tstne	r6, lr, lsl #10
     a28:	00061001 	andeq	r1, r6, r1
     a2c:	00240200 	eoreq	r0, r4, r0, lsl #4
		strncpy(create_message->record, user_provided_record, 20);
     a30:	0b3e0b0b 	bleq	f83664 <__ccfg+0xf636bc>
		create_message->receiver_id = user_provided_receiver_id;
     a34:	00000e03 	andeq	r0, r0, r3, lsl #28
		strncpy(create_message->record, user_provided_record, 20);
     a38:	03001603 	movweq	r1, #1539	; 0x603
		response_checker[0] = create_message->request_number;
     a3c:	3b0b3a0e 	blcc	2cf27c <__ccfg+0x2af2d4>
		call sender(create_message, wait);
     a40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		response_checker[1] = create_message->tpe;
     a44:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     a48:	0b0b0024 	bleq	2c0ae0 <__ccfg+0x2a0b38>
		call sender(create_message, wait);
     a4c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     a50:	13050000 	movwne	r0, #20480	; 0x5000
     a54:	0b0e0301 	bleq	381660 <__ccfg+0x3616b8>
     a58:	3b0b3a0b 	blcc	2cf28c <__ccfg+0x2af2e4>
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5c:	0013010b 	andseq	r0, r3, fp, lsl #2
     a60:	000d0600 	andeq	r0, sp, r0, lsl #12
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a64:	13490e03 	movtne	r0, #40451	; 0x9e03
     a68:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     a6c:	0f070000 	svceq	0x00070000
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	000b0b00 	andeq	r0, fp, r0, lsl #22
     a74:	00260800 	eoreq	r0, r6, r0, lsl #16
			strncpy(reason, "Error: improper node ID", 50);
     a78:	00001349 	andeq	r1, r0, r9, asr #6
     a7c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
			proceed error;
     a80:	0a000013 	beq	ad4 <root+0x3b0>
     a84:	0b0b000f 	bleq	2c0ac8 <__ccfg+0x2a0b20>
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a88:	00001349 	andeq	r1, r0, r9, asr #6
     a8c:	0b01130b 	bleq	456c0 <__ccfg+0x25718>
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a90:	3b0b3a0b 	blcc	2cf2c4 <__ccfg+0x2af31c>
     a94:	010b390b 	tsteq	fp, fp, lsl #18
     a98:	0c000013 	stceq	0, cr0, [r0], {19}
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			strncpy(reason, "Error: invalid index", 50);
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
     aa8:	0b0d0b0b 	bleq	3436dc <__ccfg+0x323734>
			proceed error;
     aac:	0b380b0c 	bleq	e036e4 <__ccfg+0xde373c>
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     ab4:	3a0e0300 	bcc	3816bc <__ccfg+0x361714>
     ab8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		delete_record->gid = node_db->gid;
     abc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		delete_record->tpe = DELETE_RECORD;
     ac0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		delete_record->request_number = generate_request_num();
     ac4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ac8:	0b3b0b3a 	bleq	ec37b8 <__ccfg+0xea3810>
		call sender(delete_record, wait);
     acc:	13490b39 	movtne	r0, #39737	; 0x9b39
		delete_record->sender_id = node_db->id;
     ad0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		delete_record->receiver_id = user_provided_receiver_id;
     ad4:	010f0000 	mrseq	r0, CPSR
		delete_record->record_index = us_pr_in;
     ad8:	01134901 	tsteq	r3, r1, lsl #18
     adc:	10000013 	andne	r0, r0, r3, lsl r0
		response_checker[0] = delete_record->request_number;
     ae0:	00000021 	andeq	r0, r0, r1, lsr #32
		call sender(delete_record, wait);
     ae4:	03001611 	movweq	r1, #1553	; 0x611
     ae8:	3b0b3a0e 	blcc	2cf328 <__ccfg+0x2af380>
     aec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     af0:	12000013 	andne	r0, r0, #19
     af4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	00001301 	andeq	r1, r0, r1, lsl #6
     afc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     b04:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (get_id < 1 || get_id > 25){
     b0c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b10:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			strncpy(reason, "Error: improper node ID", 50);
     b14:	13150000 	tstne	r5, #0
     b18:	3a0b0b01 	bcc	2c3724 <__ccfg+0x2a377c>
     b1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			proceed error;
     b20:	0013010b 	andseq	r0, r3, fp, lsl #2
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	000d1600 	andeq	r1, sp, r0, lsl #12
     b28:	0b3a0e03 	bleq	e8433c <__ccfg+0xe64394>
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	0b39053b 	bleq	e42020 <__ccfg+0xe22078>
     b30:	0b381349 	bleq	e0585c <__ccfg+0xde58b4>
     b34:	13170000 	tstne	r7, #0
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	0b0e0301 	bleq	381744 <__ccfg+0x36179c>
     b3c:	3b0b3a0b 	blcc	2cf370 <__ccfg+0x2af3c8>
			strncpy(reason, "Error: invalid index", 50);
     b40:	010b3905 	tsteq	fp, r5, lsl #18
     b44:	18000013 	stmdane	r0, {r0, r1, r4}
			proceed error;
     b48:	13490021 	movtne	r0, #36897	; 0x9021
     b4c:	00000b2f 	andeq	r0, r0, pc, lsr #22
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	27011519 	smladcs	r1, r9, r5, r1
     b54:	0113490c 	tsteq	r3, ip, lsl #18
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	1a000013 	bne	bac <root+0x488>
     b5c:	13470034 	movtne	r0, #28724	; 0x7034
     b60:	0b3b0b3a 	bleq	ec3850 <__ccfg+0xea38a8>
		retrieve_record->gid = node_db->gid;
     b64:	0a020b39 	beq	83850 <__ccfg+0x638a8>
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	341b0000 	ldrcc	r0, [fp], #-0
		retrieve_record->request_number = generate_request_num();
     b6c:	3a0e0300 	bcc	381774 <__ccfg+0x3617cc>
     b70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		retrieve_record->receiver_id = get_id;
     b74:	3f13490b 	svccc	0x0013490b
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	000a020c 	andeq	r0, sl, ip, lsl #4
		retrieve_record->record_index = beg_for_index;
     b7c:	00341c00 	eorseq	r1, r4, r0, lsl #24
     b80:	0b3a0e03 	bleq	e84394 <__ccfg+0xe643ec>
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	0b390b3b 	bleq	e43878 <__ccfg+0xe238d0>
		response_checker[0] = retrieve_record->request_number;
     b88:	0a021349 	beq	858b4 <__ccfg+0x6590c>
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	341d0000 	ldrcc	r0, [sp], #-0
		response_checker[1] = retrieve_record->tpe;
     b90:	3a0e0300 	bcc	381798 <__ccfg+0x3617f0>
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		call sender(retrieve_record, wait);
     b9c:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     ba0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; af0 <root+0x3cc>
     ba4:	0b3a0e03 	bleq	e843b8 <__ccfg+0xe64410>
     ba8:	0b39053b 	bleq	e4209c <__ccfg+0xe220f4>
     bac:	13490c27 	movtne	r0, #39975	; 0x9c27
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	01120111 	tsteq	r2, r1, lsl r1
     bb4:	00000a40 	andeq	r0, r0, r0, asr #20
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb8:	3f012e1f 	svccc	0x00012e1f
     bbc:	3a0e030c 	bcc	3817f4 <__ccfg+0x36184c>
     bc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if(node_db->data_base.item_count != 0){
     bc4:	110c270b 	tstne	ip, fp, lsl #14
     bc8:	40011201 	andmi	r1, r1, r1, lsl #4
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	0013010a 	andseq	r0, r3, sl, lsl #2
     bd0:	00052000 	andeq	r2, r5, r0
			while(i <= node_db->data_base.item_count){
     bd4:	0b3a0e03 	bleq	e843e8 <__ccfg+0xe64440>
     bd8:	0b39053b 	bleq	e420cc <__ccfg+0xe22124>
     bdc:	06021349 	streq	r1, [r2], -r9, asr #6
			i = 0;
     be0:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
		ser_out(menu, "\r\n");
     be4:	22000000 	andcs	r0, r0, #0
     be8:	08030034 	stmdaeq	r3, {r2, r4, r5}
		delete_all(node_db);
     bec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bf0:	13490b39 	movtne	r0, #39737	; 0x9b39
		proceed menu;
     bf4:	00000602 	andeq	r0, r0, r2, lsl #12
		delay(3000, timeout);
     bf8:	03003423 	movweq	r3, #1059	; 0x423
     bfc:	3b0b3a08 	blcc	2cf424 <__ccfg+0x2af47c>
     c00:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		when(&response_flag, menu);
     c04:	000a0213 	andeq	r0, sl, r3, lsl r2
     c08:	00342400 	eorseq	r2, r4, r0, lsl #8
			if(i == 0){
     c0c:	0b3a0803 	bleq	e82c20 <__ccfg+0xe62c78>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c10:	0b39053b 	bleq	e42104 <__ccfg+0xe2215c>
     c14:	00001349 	andeq	r1, r0, r9, asr #6
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c18:	03000a25 	movweq	r0, #2597	; 0xa25
     c1c:	3b0b3a0e 	blcc	2cf45c <__ccfg+0x2af4b4>
     c20:	110b3905 	tstne	fp, r5, lsl #18
     c24:	26000001 	strcs	r0, [r0], -r1
		for (int i=0; i<node_db->index; i++) {
     c28:	0111010b 	tsteq	r1, fp, lsl #2
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	13010112 	movwne	r0, #4370	; 0x1112
     c30:	0b270000 	bleq	9c0c38 <__ccfg+0x9a0c90>
     c34:	01065501 	tsteq	r6, r1, lsl #10
     c38:	28000013 	stmdacs	r0, {r0, r1, r4}
     c3c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c40:	06550152 			; <UNDEFINED> instruction: 0x06550152
     c44:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     c48:	00000b57 	andeq	r0, r0, r7, asr fp
		ser_out(timeout, "\r\nFailed to reach the destination");
     c4c:	31000529 	tstcc	r0, r9, lsr #10
     c50:	2a000013 	bcs	ca4 <root+0x580>
		proceed menu;
     c54:	0e03012e 	adfeqsp	f0, f3, #0.5
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c5c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     c60:	01120111 	tsteq	r2, r1, lsl r1
		proceed menu;
     c64:	13010a40 	movwne	r0, #6720	; 0x1a40
}
     c68:	052b0000 	streq	r0, [fp, #-0]!
     c6c:	3a080300 	bcc	201874 <__ccfg+0x1e18cc>
     c70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c74:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c78:	2c000006 	stccs	0, cr0, [r0], {6}
     c7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bcc <root+0x4a8>
     c80:	0b3a0e03 	bleq	e84494 <__ccfg+0xe644ec>
     c84:	0b39053b 	bleq	e42178 <__ccfg+0xe221d0>
     c88:	13490c27 	movtne	r0, #39975	; 0x9c27
     c8c:	01120111 	tsteq	r2, r1, lsl r1
     c90:	13010a40 	movwne	r0, #6720	; 0x1a40
     c94:	342d0000 	strtcc	r0, [sp], #-0
     c98:	3a0e0300 	bcc	3818a0 <__ccfg+0x3618f8>
     c9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ca0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ca4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     ca8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bf8 <root+0x4d4>
     cac:	0b3a0e03 	bleq	e844c0 <__ccfg+0xe64518>
     cb0:	0b39053b 	bleq	e421a4 <__ccfg+0xe221fc>
     cb4:	0b200c27 	bleq	803d58 <__ccfg+0x7e3db0>
     cb8:	00001301 	andeq	r1, r0, r1, lsl #6
     cbc:	0300052f 	movweq	r0, #1327	; 0x52f
     cc0:	3b0b3a08 	blcc	2cf4e8 <__ccfg+0x2af540>
     cc4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     cc8:	30000013 	andcc	r0, r0, r3, lsl r0
     ccc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; c1c <root+0x4f8>
     cd0:	0b3a0e03 	bleq	e844e4 <__ccfg+0xe6453c>
     cd4:	0b39053b 	bleq	e421c8 <__ccfg+0xe22220>
     cd8:	01120111 	tsteq	r2, r1, lsl r1
     cdc:	13010a40 	movwne	r0, #6720	; 0x1a40
     ce0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
static void devinit_uart (int devnum) {
     ce4:	030c3f01 	movweq	r3, #52993	; 0xcf01
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	3b0b3a08 	blcc	2cf510 <__ccfg+0x2af568>
     cec:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
void udelay (volatile word n) {
     cf0:	1113490c 	tstne	r3, ip, lsl #18
     cf4:	40011201 	andmi	r1, r1, r1, lsl #4
	while (n) {
     cf8:	0013010a 	andseq	r0, r3, sl, lsl #2
     cfc:	00053200 	andeq	r3, r5, r0, lsl #4
}
     d00:	0b3a0803 	bleq	e82d14 <__ccfg+0xe62d6c>
	while (n--);
     d04:	0b39053b 	bleq	e421f8 <__ccfg+0xe22250>
     d08:	0a021349 	beq	85a34 <__ccfg+0x65a8c>
     d0c:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
		n--;
     d10:	030c3f00 	movweq	r3, #52992	; 0xcf00
     d14:	3b0b3a0e 	blcc	2cf554 <__ccfg+0x2af5ac>
     d18:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
void mdelay (volatile word n) {
     d1c:	1201110c 	andne	r1, r1, #12, 2
     d20:	000a4001 	andeq	r4, sl, r1
	while (n) {
     d24:	00053400 	andeq	r3, r5, r0, lsl #8
     d28:	0b3a0e03 	bleq	e8453c <__ccfg+0xe64594>
}
     d2c:	0b39053b 	bleq	e42220 <__ccfg+0xe22278>
		udelay (999);
     d30:	0a021349 	beq	85a5c <__ccfg+0x65ab4>
     d34:	05350000 	ldreq	r0, [r5, #-0]!
		n--;
     d38:	3a0e0300 	bcc	381940 <__ccfg+0x361998>
     d3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d40:	0013490b 	andseq	r4, r3, fp, lsl #18
     d44:	010b3600 	tsteq	fp, r0, lsl #12
void __pi_ondomain (lword d) {
     d48:	00000655 	andeq	r0, r0, r5, asr r6
     d4c:	3f012e37 	svccc	0x00012e37
		if (__pi_systat.effpdm > 1)
     d50:	3a0e030c 	bcc	381988 <__ccfg+0x3619e0>
     d54:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			__pi_systat.effpdm = 1;
     d58:	200c270b 	andcs	r2, ip, fp, lsl #14
	PRCMPowerDomainOn (d);
     d5c:	0013010b 	andseq	r0, r3, fp, lsl #2
     d60:	00053800 	andeq	r3, r5, r0, lsl #16
     d64:	0b3a0803 	bleq	e82d78 <__ccfg+0xe62dd0>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d68:	0b390b3b 	bleq	e43a5c <__ccfg+0xe23ab4>
     d6c:	00001349 	andeq	r1, r0, r9, asr #6
     d70:	03000539 	movweq	r0, #1337	; 0x539
	__pi_systat.ondmns |= d;
     d74:	3b0b3a0e 	blcc	2cf5b4 <__ccfg+0x2af60c>
     d78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
     d7c:	3a000013 	bcc	dd0 <__pi_syserror+0xc>
     d80:	08030034 	stmdaeq	r3, {r2, r4, r5}
void __pi_offdomain (lword d) {
     d84:	0b3b0b3a 	bleq	ec3a74 <__ccfg+0xea3acc>
     d88:	13490b39 	movtne	r0, #39737	; 0x9b39
	PRCMPowerDomainOff (d);
     d8c:	0a3b0000 	beq	ec0d94 <__ccfg+0xea0dec>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	3a080300 	bcc	201998 <__ccfg+0x1e19f0>
     d94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d98:	3c00000b 	stccc	0, cr0, [r0], {11}
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; cec <devinit_uart+0x8>
     da0:	0b3a0e03 	bleq	e845b4 <__ccfg+0xe6460c>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
     da8:	01110c27 	tsteq	r1, r7, lsr #24
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	0a400112 	beq	10011fc <__ccfg+0xfe1254>
     db0:	00001301 	andeq	r1, r0, r1, lsl #6
	__pi_systat.ondmns &= ~d;
     db4:	0300053d 	movweq	r0, #1341	; 0x53d
     db8:	3b0b3a08 	blcc	2cf5e0 <__ccfg+0x2af638>
}
     dbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     dc0:	00060213 	andeq	r0, r6, r3, lsl r2
void __pi_syserror (word ec, const char *m) {
     dc4:	00343e00 	eorseq	r3, r4, r0, lsl #28
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	0b3a0803 	bleq	e82ddc <__ccfg+0xe62e34>
     dcc:	0b390b3b 	bleq	e43ac0 <__ccfg+0xe23b18>
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	06021349 	streq	r1, [r2], -r9, asr #6
     dd4:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
     dd8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     ddc:	3b0b3a0e 	blcc	2cf61c <__ccfg+0x2af674>
		all_leds_blink;
     de0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     de4:	1201110c 	andne	r1, r1, #12, 2
     de8:	000a4001 	andeq	r4, sl, r1
     dec:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	0b3a0e03 	bleq	e84604 <__ccfg+0xe6465c>
     df4:	0b390b3b 	bleq	e43ae8 <__ccfg+0xe23b40>
     df8:	13490c27 	movtne	r0, #39975	; 0x9c27
     dfc:	13010b20 	movwne	r0, #6944	; 0x1b20
     e00:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     e04:	3a0e0301 	bcc	381a10 <__ccfg+0x361a68>
	while (1) {
     e08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e0c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     e10:	010b2013 	tsteq	fp, r3, lsl r0
     e14:	42000013 	andmi	r0, r0, #19
void tci_run_delay_timer () {
     e18:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
	setdel = __pi_mintk - __pi_old;
     e1c:	01120111 	tsteq	r2, r1, lsl r1
     e20:	13010a40 	movwne	r0, #6720	; 0x1a40
     e24:	05430000 	strbeq	r0, [r3, #-0]
     e28:	02133100 	andseq	r3, r3, #0, 2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2c:	44000006 	strmi	r0, [r0], #-6
     e30:	13310034 	teqne	r1, #52	; 0x34
     e34:	00000602 	andeq	r0, r0, r2, lsl #12
     e38:	31011d45 	tstcc	r1, r5, asr #26
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	sti_tim;
     e40:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
}
     e44:	000b570b 	andeq	r5, fp, fp, lsl #14
     e48:	00344600 	eorseq	r4, r4, r0, lsl #12
     e4c:	00001331 	andeq	r1, r0, r1, lsr r3
     e50:	31011d47 	tstcc	r1, r7, asr #26
     e54:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	cli_aux;
     e58:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     e5c:	000b570b 	andeq	r5, fp, fp, lsl #14
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	000a4800 	andeq	r4, sl, r0, lsl #16
     e64:	01111331 	tsteq	r1, r1, lsr r3
     e68:	1d490000 	stclne	0, cr0, [r9, #-0]
     e6c:	11133101 	tstne	r3, r1, lsl #2
	sti_aux;
     e70:	58011201 	stmdapl	r1, {r0, r9, ip}
}
     e74:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     e78:	4a00000b 	bmi	eac <AONRTCIntHandler+0x2c>
     e7c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
void AONRTCIntHandler () {
     e80:	01120111 	tsteq	r2, r1, lsl r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	00000a40 	andeq	r0, r0, r0, asr #20
     e88:	01110100 	tsteq	r1, r0, lsl #2
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	0b130e25 	bleq	4c4728 <__ccfg+0x4a4780>
		if (__pi_utims [0] == 0)
     e90:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e94:	01110655 	tsteq	r1, r5, asr r6
		if (*(__pi_utims [0])) {
     e98:	00000610 	andeq	r0, r0, r0, lsl r6
     e9c:	0b002402 	bleq	9eac <__exidx_end+0x412c>
			(*(__pi_utims [0]))--;
     ea0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if (__pi_utims [1] == 0)
     ea4:	0300000e 	movweq	r0, #14
		if (*(__pi_utims [1])) {
     ea8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			aux_timer_inactive = 0;
     eac:	0b3b0b3a 	bleq	ec3b9c <__ccfg+0xea3bf4>
			(*(__pi_utims [1]))--;
     eb0:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (__pi_utims [2] == 0)
     eb4:	24040000 	strcs	r0, [r4], #-0
		if (*(__pi_utims [2])) {
     eb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			(*(__pi_utims [2]))--;
     ebc:	0008030b 	andeq	r0, r8, fp, lsl #6
		if (__pi_utims [3] != 0) {
     ec0:	01130500 	tsteq	r3, r0, lsl #10
			if (*(__pi_utims [3])) {
     ec4:	0b0b0e03 	bleq	2c46d8 <__ccfg+0x2a4730>
				aux_timer_inactive = 0;
     ec8:	0b3b0b3a 	bleq	ec3bb8 <__ccfg+0xea3c10>
				(*(__pi_utims [3]))--;
     ecc:	00001301 	andeq	r1, r0, r1, lsl #6
	if (__pi_systat.ledsts) {
     ed0:	03000d06 	movweq	r0, #3334	; 0xd06
     ed4:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
		if (__pi_systat.ledblc++ == 0) {
     ed8:	000c340b 	andeq	r3, ip, fp, lsl #8
     edc:	000f0700 	andeq	r0, pc, r0, lsl #14
			if (__pi_systat.ledblk) {
     ee0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ee4:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
     ee8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	13490035 	movtne	r0, #36917	; 0x9035
     ef0:	0f0a0000 	svceq	0x000a0000
				if (__pi_systat.ledsts & 0x2)
     ef4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ef8:	0b000013 	bleq	f4c <AONRTCIntHandler+0xcc>
     efc:	0b0b0113 	bleq	2c1350 <__ccfg+0x2a13a8>
				if (__pi_systat.ledsts & 0x4)
     f00:	0b3b0b3a 	bleq	ec3bf0 <__ccfg+0xea3c48>
				__pi_systat.ledblk = 0;
     f04:	13010b39 	movwne	r0, #6969	; 0x1b39
     f08:	0d0c0000 	stceq	0, cr0, [ip, #-0]
			if (__pi_systat.fstblk)
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				__pi_systat.ledblc = 200;
     f14:	0b13490b 	bleq	4d3348 <__ccfg+0x4b33a0>
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
		cli_tim;
     f1c:	000b380b 	andeq	r3, fp, fp, lsl #16
		__pi_new += setdel;
     f20:	000d0d00 	andeq	r0, sp, r0, lsl #26
     f24:	0b3a0e03 	bleq	e84738 <__ccfg+0xe64790>
		setdel = 0;
     f28:	0b390b3b 	bleq	e43c1c <__ccfg+0xe23c74>
		RISE_N_SHINE;
     f2c:	0b381349 	bleq	e05c58 <__ccfg+0xde5cb0>
		__pi_new += setdel;
     f30:	340e0000 	strcc	r0, [lr], #-0
		RISE_N_SHINE;
     f34:	3a0e0300 	bcc	381b3c <__ccfg+0x361b94>
     f38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		aux_timer_inactive = 1;
     f3c:	3f13490b 	svccc	0x0013490b
     f40:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				if (__pi_systat.ledsts & 0x1)
     f44:	01010f00 	tsteq	r1, r0, lsl #30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	13011349 	movwne	r1, #4937	; 0x1349
     f4c:	21100000 	tstcs	r0, r0
				if (__pi_systat.ledsts & 0x2)
     f50:	11000000 	mrsne	r0, (UNDEF: 0)
     f54:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (__pi_systat.ledsts & 0x8)
     f5c:	13490b39 	movtne	r0, #39737	; 0x9b39
				__pi_systat.ledblk = 1;
     f60:	15120000 	ldrne	r0, [r2, #-0]
     f64:	010c2701 	tsteq	ip, r1, lsl #14
		if (aux_timer_inactive) {
     f68:	13000013 	movwne	r0, #19
			cli_aux;
     f6c:	13490005 	movtne	r0, #36869	; 0x9005
     f70:	34140000 	ldrcc	r0, [r4], #-0
     f74:	3a0e0300 	bcc	381b7c <__ccfg+0x361bd4>
     f78:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f7c:	3f13490b 	svccc	0x0013490b
     f80:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     f84:	01151500 	tsteq	r5, r0, lsl #10
     f88:	13490c27 	movtne	r0, #39975	; 0x9c27
     f8c:	00001301 	andeq	r1, r0, r1, lsl #6
     f90:	03011316 	movweq	r1, #4886	; 0x1316
word tci_update_delay_ticks (Boolean force) {
     f94:	3a0b0b0e 	bcc	2c3bd4 <__ccfg+0x2a3c2c>
	cli_tim;
     f98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f9c:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (setdel) {
     fa0:	01171700 	tsteq	r7, r0, lsl #14
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fa4:	0b3a0b0b 	bleq	e83bd8 <__ccfg+0xe63c30>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	0b390b3b 	bleq	e43c9c <__ccfg+0xe23cf4>
     fac:	00001301 	andeq	r1, r0, r1, lsl #6
     fb0:	03000d18 	movweq	r0, #3352	; 0xd18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	3b0b3a0e 	blcc	2cf7f4 <__ccfg+0x2af84c>
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	return NO;
     fbc:	19000013 	stmdbne	r0, {r0, r1, r4}
			setdel = 0;
     fc0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc4:	0b3b0b3a 	bleq	ec3cb4 <__ccfg+0xea3d0c>
     fc8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     fcc:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
		sti_tim;
     fd0:	3a080300 	bcc	201bd8 <__ccfg+0x1e1c30>
		return YES;
     fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fdc:	1b00000b 	blne	1010 <__pi_uart_setrate+0x2c>
     fe0:	0b0b0113 	bleq	2c1434 <__ccfg+0x2a148c>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	UARTDisable (UART0_BASE);
     fe8:	13010b39 	movwne	r0, #6969	; 0x1b39
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
	UARTDisable (UART0_BASE);
     ff0:	3a0e0300 	bcc	381bf8 <__ccfg+0x361c50>
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ffc:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    1000:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	0b3a0b0b 	bleq	e83c38 <__ccfg+0xe63c90>
    1008:	0b39053b 	bleq	e424fc <__ccfg+0xe22554>
    100c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
    1014:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1018:	00341f00 	eorseq	r1, r4, r0, lsl #30
	urates [0] = rate;
    101c:	0b3a0e03 	bleq	e84830 <__ccfg+0xe64888>
}
    1020:	0b390b3b 	bleq	e43d14 <__ccfg+0xe23d6c>
    1024:	0a021349 	beq	85d50 <__ccfg+0x65da8>
    1028:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    102c:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1030:	3b0b3a0e 	blcc	2cf870 <__ccfg+0x2af8c8>
    1034:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	1201110c 	andne	r1, r1, #12, 2
    103c:	000a4001 	andeq	r4, sl, r1
    1040:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1048:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1050:	01111349 	tsteq	r1, r9, asr #6
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	0a400112 	beq	10014a4 <__ccfg+0xfe14fc>
    1058:	00001301 	andeq	r1, r0, r1, lsl #6
    105c:	03000522 	movweq	r0, #1314	; 0x522
    1060:	3b0b3a08 	blcc	2cf888 <__ccfg+0x2af8e0>
    1064:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1068:	00060213 	andeq	r0, r6, r3, lsl r2
    106c:	011d2300 	tsteq	sp, r0, lsl #6
	switch (operation) {
    1070:	01521331 	cmpeq	r2, r1, lsr r3
static int ioreq_uart_a (int operation, char *buf, int len) {
    1074:	0b580655 	bleq	16029d0 <__ccfg+0x15e2a28>
    1078:	0b570559 	bleq	15c25e4 <__ccfg+0x15a263c>
    107c:	05240000 	streq	r0, [r4, #-0]!
    1080:	02133100 	andseq	r3, r3, #0, 2
    1084:	25000006 	strcs	r0, [r0, #-6]
				*buf++ = uart_a_read;
    1088:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    108c:	34260000 	strtcc	r0, [r6], #-0
			while (len && uart_a_char_available) {
    1090:	02133100 	andseq	r3, r3, #0, 2
    1094:	27000006 	strcs	r0, [r0, -r6]
    1098:	0c3f012e 	ldfeqs	f0, [pc], #-184	; fe8 <__pi_uart_setrate+0x4>
			if (len != operation) {
    109c:	0b3a0e03 	bleq	e848b0 <__ccfg+0xe64908>
}
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
    10a4:	01110c27 	tsteq	r1, r7, lsr #24
			uart_a_disable_int;
    10a8:	0a400112 	beq	10014f8 <__ccfg+0xfe1550>
			if (uart_a_char_available) {
    10ac:	00001301 	andeq	r1, r0, r1, lsl #6
				*buf++ = uart_a_read;
    10b0:	03003428 	movweq	r3, #1064	; 0x428
			uart_a_disable_int;
    10b4:	3b0b3a08 	blcc	2cf8dc <__ccfg+0x2af934>
    10b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (uart_a_char_available) {
    10bc:	00060213 	andeq	r0, r6, r3, lsl r2
    10c0:	00342900 	eorseq	r2, r4, r0, lsl #18
				uart_a_enable_int;
    10c4:	0b3a0803 	bleq	e830d8 <__ccfg+0xe63130>
    10c8:	0b39053b 	bleq	e425bc <__ccfg+0xe22614>
				goto Redo_rx;
    10cc:	00001349 	andeq	r1, r0, r9, asr #6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10d0:	0300342a 	movweq	r3, #1066	; 0x42a
    10d4:	3b0b3a08 	blcc	2cf8fc <__ccfg+0x2af954>
			return -2;
    10d8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    10dc:	000a0213 	andeq	r0, sl, r3, lsl r2
				uart_a_write (*buf);
    10e0:	00052b00 	andeq	r2, r5, r0, lsl #22
    10e4:	0b3a0e03 	bleq	e848f8 <__ccfg+0xe64950>
			while (len && uart_a_room_in_tx) {
    10e8:	0b39053b 	bleq	e425dc <__ccfg+0xe22634>
    10ec:	06021349 	streq	r1, [r2], -r9, asr #6
    10f0:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
			if (len != operation) {
    10f4:	030c3f01 	movweq	r3, #52993	; 0xcf01
			uart_a_disable_int;
    10f8:	3b0b3a0e 	blcc	2cf938 <__ccfg+0x2af990>
    10fc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			if (uart_a_room_in_tx) {
    1100:	2013490c 	andscs	r4, r3, ip, lsl #18
    1104:	0013010b 	andseq	r0, r3, fp, lsl #2
				uart_a_enable_int;
    1108:	00052d00 	andeq	r2, r5, r0, lsl #26
    110c:	0b3a0e03 	bleq	e84920 <__ccfg+0xe64978>
				*buf++ = uart_a_read;
    1110:	0b39053b 	bleq	e42604 <__ccfg+0xe2265c>
			if (uart_a_room_in_tx) {
    1114:	00001349 	andeq	r1, r0, r9, asr #6
				uart_a_write (*buf);
    1118:	0300052e 	movweq	r0, #1326	; 0x52e
    111c:	3b0b3a08 	blcc	2cf944 <__ccfg+0x2af99c>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1124:	2f000013 	svccs	0x00000013
			uart_a_enable_int;
    1128:	0111010b 	tsteq	r1, fp, lsl #2
    112c:	00000112 	andeq	r0, r0, r2, lsl r1
    1130:	03003430 	movweq	r3, #1072	; 0x430
			return 0;
    1134:	3b0b3a0e 	blcc	2cf974 <__ccfg+0x2af9cc>
			if (len == UART_CNTRL_SETRATE) {
    1138:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				if (__pi_uart_setrate (*((word*)buf),
    113c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1140:	000a3100 	andeq	r3, sl, r0, lsl #2
    1144:	0b3a0e03 	bleq	e84958 <__ccfg+0xe649b0>
				syserror (EREQPAR, "uar");
    1148:	0b39053b 	bleq	e4263c <__ccfg+0xe22694>
			syserror (ENOOPER, "uai");
    114c:	00000111 	andeq	r0, r0, r1, lsl r1
			if (len == UART_CNTRL_GETRATE) {
    1150:	31011d32 	tstcc	r1, r2, lsr sp
				return 1;
    1154:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
			syserror (ENOOPER, "uai");
    115c:	000b5705 	andeq	r5, fp, r5, lsl #14
    1160:	00053300 	andeq	r3, r5, r0, lsl #6
    1164:	00001331 	andeq	r1, r0, r1, lsr r3
    1168:	03000534 	movweq	r0, #1332	; 0x534
    116c:	3b0b3a08 	blcc	2cf994 <__ccfg+0x2af9ec>
    1170:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1174:	000a0213 	andeq	r0, sl, r3, lsl r2
    1178:	00183500 	andseq	r3, r8, r0, lsl #10
    117c:	34360000 	ldrtcc	r0, [r6], #-0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	3a0e0300 	bcc	381d88 <__ccfg+0x361de0>
void UART0IntHandler () {
    1184:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	0013490b 	andseq	r4, r3, fp, lsl #18
    118c:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
    1190:	0b3a0803 	bleq	e831a4 <__ccfg+0xe631fc>
    1194:	0b39053b 	bleq	e42688 <__ccfg+0xe226e0>
    1198:	13490c27 	movtne	r0, #39975	; 0x9c27
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	01120111 	tsteq	r2, r1, lsl r1
    11a0:	13010a40 	movwne	r0, #6720	; 0x1a40
		RISE_N_SHINE;
    11a4:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    11a8:	3a080301 	bcc	201db4 <__ccfg+0x1e1e0c>
		i_trigger (devevent (UART_A, READ));
    11ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11b0:	110c270b 	tstne	ip, fp, lsl #14
    11b4:	40011201 	andmi	r1, r1, r1, lsl #4
    11b8:	0013010a 	andseq	r0, r3, sl, lsl #2
    11bc:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
    11c0:	0b3a0e03 	bleq	e849d4 <__ccfg+0xe64a2c>
    11c4:	0b390b3b 	bleq	e43eb8 <__ccfg+0xe23f10>
    11c8:	0b200c27 	bleq	80426c <__ccfg+0x7e42c4>
    11cc:	00001301 	andeq	r1, r0, r1, lsl #6
    11d0:	0300053a 	movweq	r0, #1338	; 0x53a
    11d4:	3b0b3a08 	blcc	2cf9fc <__ccfg+0x2afa54>
    11d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	3b000013 	blcc	1230 <UART0IntHandler+0xb0>
    11e0:	0e03012e 	adfeqsp	f0, f3, #0.5
    11e4:	0b3b0b3a 	bleq	ec3ed4 <__ccfg+0xea3f2c>
		i_trigger (devevent (UART_A, WRITE));
    11e8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	0b201349 	bleq	805f18 <__ccfg+0x7e5f70>
    11f0:	00001301 	andeq	r1, r0, r1, lsl #6
		RISE_N_SHINE;
    11f4:	0300343c 	movweq	r3, #1084	; 0x43c
    11f8:	3b0b3a08 	blcc	2cfa20 <__ccfg+0x2afa78>
    11fc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		i_trigger (devevent (UART_A, WRITE));
    1200:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
    1204:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    1208:	0b3b0b3a 	bleq	ec3ef8 <__ccfg+0xea3f50>
    120c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1210:	13010b20 	movwne	r0, #6944	; 0x1b20
    1214:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    1218:	11133101 	tstne	r3, r1, lsl #2
    121c:	40011201 	andmi	r1, r1, r1, lsl #4
    1220:	0013010a 	andseq	r0, r3, sl, lsl #2
    1224:	00053f00 	andeq	r3, r5, r0, lsl #30
    1228:	0a021331 	beq	85ef4 <__ccfg+0x65f4c>
}
    122c:	1d400000 	stclne	0, cr0, [r0, #-0]
    1230:	11133101 	tstne	r3, r1, lsl #2
    1234:	58011201 	stmdapl	r1, {r0, r9, ip}
    1238:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    123c:	4100000b 	tstmi	r0, fp
void __buttons_setirq (int val) {
    1240:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1248:	0b590b58 	bleq	1643fb0 <__ccfg+0x1624008>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	00000b57 	andeq	r0, r0, r7, asr fp
    1250:	31012e42 	tstcc	r1, r2, asr #28
    1254:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	000a4001 	andeq	r4, sl, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125c:	00344300 	eorseq	r4, r4, r0, lsl #6
    1260:	00001331 	andeq	r1, r0, r1, lsr r3
    1264:	01110100 	tsteq	r1, r0, lsl #2
    1268:	0b130e25 	bleq	4c4b04 <__ccfg+0x4a4b5c>
    126c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1270:	01110655 	tsteq	r1, r5, asr r6
}
    1274:	00000610 	andeq	r0, r0, r0, lsl r6
    1278:	0b002402 	bleq	a288 <__exidx_end+0x4508>
    127c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1280:	0300000e 	movweq	r0, #14
void __pinlist_setirq (int val) {
    1284:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	for (i = 0; i < N_PINLIST; i++) {
    1288:	0b3b0b3a 	bleq	ec3f78 <__ccfg+0xea3fd0>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	13490b39 	movtne	r0, #39737	; 0x9b39
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	24040000 	strcs	r0, [r4], #-0
	for (i = 0; i < N_PINLIST; i++) {
    1294:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	0008030b 	andeq	r0, r8, fp, lsl #6
    129c:	000f0500 	andeq	r0, pc, r0, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    12a4:	26060000 	strcs	r0, [r6], -r0
    12a8:	00134900 	andseq	r4, r3, r0, lsl #18
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	00150700 	andseq	r0, r5, r0, lsl #14
}
    12b0:	00000c27 	andeq	r0, r0, r7, lsr #24
    12b4:	03003408 	movweq	r3, #1032	; 0x408
    12b8:	3b0b3a0e 	blcc	2cfaf8 <__ccfg+0x2afb50>
    12bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
void GPIOIntHandler () {
    12c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
if (buttons_int) {
    12c4:	0900000c 	stmdbeq	r0, {r2, r3}
    12c8:	13490101 	movtne	r0, #37121	; 0x9101
	buttons_disable ();
    12cc:	00001301 	andeq	r1, r0, r1, lsl #6
    12d0:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
	i_trigger ((aword)&__button_list);
    12d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    12d8:	00340b00 	eorseq	r0, r4, r0, lsl #22
    12dc:	0b3a0e03 	bleq	e84af0 <__ccfg+0xe64b48>
    12e0:	0b390b3b 	bleq	e43fd4 <__ccfg+0xe2402c>
    12e4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 11c8 <UART0IntHandler+0x48>
    12e8:	00000a02 	andeq	r0, r0, r2, lsl #20
    12ec:	03002e0c 	movweq	r2, #3596	; 0xe0c
    12f0:	3b0b3a0e 	blcc	2cfb30 <__ccfg+0x2afb88>
    12f4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    12f8:	1201110c 	andne	r1, r1, #12, 2
    12fc:	000a4001 	andeq	r4, sl, r1
	RISE_N_SHINE;
    1300:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    1304:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1308:	0b3b0b3a 	bleq	ec3ff8 <__ccfg+0xea4050>
if (pin_sensor_int) {
    130c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1310:	01120111 	tsteq	r2, r1, lsl r1
	i_trigger ((aword)(&__input_pins));
    1314:	00000a40 	andeq	r0, r0, r0, asr #20
    1318:	0300340e 	movweq	r3, #1038	; 0x40e
    131c:	3b0b3a0e 	blcc	2cfb5c <__ccfg+0x2afbb4>
    1320:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1324:	00060213 	andeq	r0, r6, r3, lsl r2
    1328:	11010000 	mrsne	r0, (UNDEF: 1)
    132c:	130e2501 	movwne	r2, #58625	; 0xe501
    1330:	1b0e030b 	blne	381f64 <__ccfg+0x361fbc>
    1334:	0006100e 	andeq	r1, r6, lr
    1338:	00240200 	eoreq	r0, r4, r0, lsl #4
    133c:	0b3e0b0b 	bleq	f83f70 <__ccfg+0xf63fc8>
	__pinsen_disable_and_clear;
    1340:	00000e03 	andeq	r0, r0, r3, lsl #28
	RISE_N_SHINE;
    1344:	03001603 	movweq	r1, #1539	; 0x603
    1348:	3b0b3a0e 	blcc	2cfb88 <__ccfg+0x2afbe0>
    134c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1350:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1354:	0b0b0024 	bleq	2c13ec <__ccfg+0x2a1444>
    1358:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    135c:	13050000 	movwne	r0, #20480	; 0x5000
    1360:	3a0b0b01 	bcc	2c3f6c <__ccfg+0x2a3fc4>
void system_init () {
    1364:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	0013010b 	andseq	r0, r3, fp, lsl #2
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	000d0600 	andeq	r0, sp, r0, lsl #12
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	0b3a0e03 	bleq	e84b84 <__ccfg+0xe64bdc>
    1374:	0b390b3b 	bleq	e44068 <__ccfg+0xe240c0>
    1378:	0b381349 	bleq	e060a4 <__ccfg+0xde60fc>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137c:	26070000 	strcs	r0, [r7], -r0
    1380:	00134900 	andseq	r4, r3, r0, lsl #18
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	00340800 	eorseq	r0, r4, r0, lsl #16
    1388:	0b3a0e03 	bleq	e84b9c <__ccfg+0xe64bf4>
    138c:	0b390b3b 	bleq	e44080 <__ccfg+0xe240d8>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1274 <__buttons_setirq+0x34>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1394:	00000c3c 	andeq	r0, r0, ip, lsr ip
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	0a000013 	beq	13f0 <system_init+0x8c>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	0b3b0b3a 	bleq	ec4094 <__ccfg+0xea40ec>
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	0b0d0b0b 	bleq	343fe0 <__ccfg+0x324038>
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	0b380b0c 	bleq	e03fe8 <__ccfg+0xde4040>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	0f0b0000 	svceq	0x000b0000
    13b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    13bc:	0c000013 	stceq	0, cr0, [r0], {19}
    13c0:	13490101 	movtne	r0, #37121	; 0x9101
		if (port_confs [i] & 0x80)
    13c4:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	0000210d 	andeq	r2, r0, sp, lsl #2
    13cc:	00160e00 	andseq	r0, r6, r0, lsl #28
		if (port_confs [i] & 0x40)
    13d0:	0b3a0e03 	bleq	e84be4 <__ccfg+0xe64c3c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	0b39053b 	bleq	e428c8 <__ccfg+0xe22920>
    13d8:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13e0:	0013010c 	andseq	r0, r3, ip, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e4:	00051000 	andeq	r1, r5, r0
	all_leds_blink;
    13e8:	00001349 	andeq	r1, r0, r9, asr #6
    13ec:	03003411 	movweq	r3, #1041	; 0x411
    13f0:	3b0b3a0e 	blcc	2cfc30 <__ccfg+0x2afc88>
    13f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    13f8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    13fc:	1200000c 	andne	r0, r0, #12
    1400:	0b0b0113 	bleq	2c1854 <__ccfg+0x2a18ac>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1408:	13010b39 	movwne	r0, #6969	; 0x1b39
    140c:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1410:	3a0e0300 	bcc	382018 <__ccfg+0x362070>
    1414:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	1400000b 	strne	r0, [r0], #-11
    1420:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	IntEnable (INT_AON_RTC_COMB);
    1424:	0b3a0b0b 	bleq	e84058 <__ccfg+0xe640b0>
    1428:	0b39053b 	bleq	e4291c <__ccfg+0xe22974>
    142c:	00001301 	andeq	r1, r0, r1, lsl #6
	__pi_malloc_init ();
    1430:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1438:	00341600 	eorseq	r1, r4, r0, lsl #12
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143c:	0b3a1347 	bleq	e86160 <__ccfg+0xe661b8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	0b39053b 	bleq	e42934 <__ccfg+0xe2298c>
    1444:	00000a02 	andeq	r0, r0, r2, lsl #20
    1448:	01110100 	tsteq	r1, r0, lsl #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	0b130e25 	bleq	4c4ce8 <__ccfg+0x4a4d40>
    1450:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	01110655 	tsteq	r1, r5, asr r6
    1458:	00000610 	andeq	r0, r0, r0, lsl r6
    145c:	0b002402 	bleq	a46c <__exidx_end+0x46ec>
	urates [0] = UART_RATE / 100;
    1460:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1464:	0300000e 	movweq	r0, #14
	reinit_uart ();
    1468:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	EXTRA_INITIALIZERS;
    146c:	0b3b0b3a 	bleq	ec415c <__ccfg+0xea41b4>
    1470:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1474:	24040000 	strcs	r0, [r4], #-0
    1478:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    147c:	0008030b 	andeq	r0, r8, fp, lsl #6
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1480:	00260500 	eoreq	r0, r6, r0, lsl #10
    1484:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1488:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    148c:	07000013 	smladeq	r0, r3, r0, r0
			devinit [i] . init (devinit [i] . param);
    1490:	0b0b000f 	bleq	2c14d4 <__ccfg+0x2a152c>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1494:	00001349 	andeq	r1, r0, r9, asr #6
    1498:	0b011308 	bleq	460c0 <__ccfg+0x26118>
    149c:	3b0b3a0b 	blcc	2cfcd0 <__ccfg+0x2afd28>
	IntEnable (INT_UART0_COMB);
    14a0:	010b390b 	tsteq	fp, fp, lsl #18
    14a4:	09000013 	stmdbeq	r0, {r0, r1, r4}
}
    14a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	tci_run_auxiliary_timer ();
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
		diag ("");
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b4:	0b0d0b0b 	bleq	3440e8 <__ccfg+0x324140>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b8:	0b380b0c 	bleq	e040f0 <__ccfg+0xde4148>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
		diag ("Leftover RAM: %d bytes",
    14c0:	3a0e0300 	bcc	3820c8 <__ccfg+0x362120>
    14c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14cc:	0b00000b 	bleq	1500 <system_init+0x19c>
    14d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14d4:	0b3b0b3a 	bleq	ec41c4 <__ccfg+0xea421c>
    14d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    14dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    14e0:	010c0000 	mrseq	r0, (UNDEF: 12)
    14e4:	01134901 	tsteq	r3, r1, lsl #18
    14e8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    14ec:	00000021 	andeq	r0, r0, r1, lsr #32
    14f0:	0300160e 	movweq	r1, #1550	; 0x60e
    14f4:	3b0b3a0e 	blcc	2cfd34 <__ccfg+0x2afd8c>
    14f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    14fc:	0f000013 	svceq	0x00000013
    1500:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1504:	00001301 	andeq	r1, r0, r1, lsl #6
    1508:	49000510 	stmdbmi	r0, {r4, r8, sl}
    150c:	11000013 	tstne	r0, r3, lsl r0
    1510:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1518:	13490b39 	movtne	r0, #39737	; 0x9b39
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1520:	13120000 	tstne	r2, #0
    1524:	3a0b0b01 	bcc	2c4130 <__ccfg+0x2a4188>
    1528:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    152c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1530:	000d1300 	andeq	r1, sp, r0, lsl #6
    1534:	0b3a0e03 	bleq	e84d48 <__ccfg+0xe64da0>
    1538:	0b39053b 	bleq	e42a2c <__ccfg+0xe22a84>
}
    153c:	0b381349 	bleq	e06268 <__ccfg+0xde62c0>
__attribute__ ((noreturn)) void __pi_release () {
    1540:	13140000 	tstne	r4, #0
    1544:	0b0e0301 	bleq	382150 <__ccfg+0x3621a8>
    1548:	3b0b3a0b 	blcc	2cfd7c <__ccfg+0x2afdd4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    154c:	010b3905 	tsteq	fp, r5, lsl #18
	check_stack_overflow;
    1550:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1554:	13490021 	movtne	r0, #36897	; 0x9021
    1558:	00000b2f 	andeq	r0, r0, pc, lsr #22
	update_n_wake (MAX_WORD, NO);
    155c:	47003416 	smladmi	r0, r6, r4, r3
    1560:	3b0b3a13 	blcc	2cfdb4 <__ccfg+0x2afe0c>
    1564:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
	for_all_tasks (__pi_curr) {
    1568:	1700000a 	strne	r0, [r0, -sl]
    156c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 14bc <system_init+0x158>
    1570:	0b3a0e03 	bleq	e84d84 <__ccfg+0xe64ddc>
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
	__SLEEP;
    1578:	01110c27 	tsteq	r1, r7, lsr #24
    157c:	0a400112 	beq	10019cc <__ccfg+0xfe1a24>
    1580:	00001301 	andeq	r1, r0, r1, lsl #6
    1584:	03000518 	movweq	r0, #1304	; 0x518
	system_event_count ++;
    1588:	3b0b3a08 	blcc	2cfdb0 <__ccfg+0x2afe08>
    158c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	switch (__pi_systat.effpdm) {
    1590:	00060213 	andeq	r0, r6, r3, lsl r2
    1594:	00051900 	andeq	r1, r5, r0, lsl #18
    1598:	0b3a0e03 	bleq	e84dac <__ccfg+0xe64e04>
    159c:	0b390b3b 	bleq	e44290 <__ccfg+0xe242e8>
			__WFI ();
    15a0:	06021349 	streq	r1, [r2], -r9, asr #6
    15a4:	341a0000 	ldrcc	r0, [sl], #-0
    15a8:	3a080300 	bcc	2021b0 <__ccfg+0x1e2208>
	check_stack_overflow;
    15ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b0:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b4:	00341b00 	eorseq	r1, r4, r0, lsl #22
    15b8:	0b3a0803 	bleq	e835cc <__ccfg+0xe63624>
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	0b390b3b 	bleq	e442b0 <__ccfg+0xe24308>
			goto Redo;
    15c0:	06021349 	streq	r1, [r2], -r9, asr #6
	for_all_tasks (__pi_curr) {
    15c4:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	11133100 	tstne	r3, r0, lsl #2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15cc:	58011201 	stmdapl	r1, {r0, r9, ip}
    15d0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    15d8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    15dc:	06550152 			; <UNDEFINED> instruction: 0x06550152
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15e0:	0b590b58 	bleq	1644348 <__ccfg+0x16243a0>
    15e4:	00000b57 	andeq	r0, r0, r7, asr fp
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	3100051e 	tstcc	r0, lr, lsl r5
    15ec:	00060213 	andeq	r0, r6, r3, lsl r2
			__WFI ();
    15f0:	002e1f00 	eoreq	r1, lr, r0, lsl #30
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    15f8:	0b3b0b3a 	bleq	ec42e8 <__ccfg+0xea4340>
}
    15fc:	01110b39 	tsteq	r1, r9, lsr fp
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1600:	0a400112 	beq	1001a50 <__ccfg+0xfe1aa8>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1604:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1608:	3a0e0300 	bcc	382210 <__ccfg+0x362268>
    160c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1610:	200c270b 	andcs	r2, ip, fp, lsl #14
    1614:	2100000b 	tstcs	r0, fp
    1618:	0e03012e 	adfeqsp	f0, f3, #0.5
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161c:	0b3b0b3a 	bleq	ec430c <__ccfg+0xea4364>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1620:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1624:	0b201349 	bleq	806350 <__ccfg+0x7e63a8>
    1628:	05220000 	streq	r0, [r2, #-0]!
    162c:	3a0e0300 	bcc	382234 <__ccfg+0x36228c>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1634:	0013490b 	andseq	r4, r3, fp, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	11010000 	mrsne	r0, (UNDEF: 1)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    163c:	130e2501 	movwne	r2, #58625	; 0xe501
    1640:	1b0e030b 	blne	382274 <__ccfg+0x3622cc>
    1644:	1106550e 	tstne	r6, lr, lsl #10
    1648:	00061001 	andeq	r1, r6, r1
    164c:	00240200 	eoreq	r0, r4, r0, lsl #4
			SysCtrlSetRechargeBeforePowerDown
    1650:	0b3e0b0b 	bleq	f84284 <__ccfg+0xf642dc>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1654:	00000e03 	andeq	r0, r0, r3, lsl #28
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1658:	03001603 	movweq	r1, #1539	; 0x603
    165c:	3b0b3a0e 	blcc	2cfe9c <__ccfg+0x2afef4>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1664:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1668:	0b0b0024 	bleq	2c1700 <__ccfg+0x2a1758>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1670:	26050000 	strcs	r0, [r5], -r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	00134900 	andseq	r4, r3, r0, lsl #18
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	00350600 	eorseq	r0, r5, r0, lsl #12
    167c:	00001349 	andeq	r1, r0, r9, asr #6
    1680:	0b011307 	bleq	462a4 <__ccfg+0x262fc>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1684:	3b0b3a0b 	blcc	2cfeb8 <__ccfg+0x2aff10>
			while (!(AONWUCPowerStatusGet () &
    1688:	010b390b 	tsteq	fp, fp, lsl #18
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1690:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
    169c:	0b0d0b0b 	bleq	3442d0 <__ccfg+0x324328>
    16a0:	0b380b0c 	bleq	e042d8 <__ccfg+0xde4330>
    16a4:	0d090000 	stceq	0, cr0, [r9, #-0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	3a0e0300 	bcc	3822b0 <__ccfg+0x362308>
    16ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    16b4:	0a00000b 	beq	16e8 <__pi_release+0x1a8>
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			reinit_uart ();
    16bc:	0b3b0b3a 	bleq	ec43ac <__ccfg+0xea4404>
    16c0:	13490b39 	movtne	r0, #39737	; 0x9b39
    16c4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
}
    16c8:	0f0b0000 	svceq	0x000b0000
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    16cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    16d0:	0c000013 	stceq	0, cr0, [r0], {19}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	13490101 	movtne	r0, #37121	; 0x9101
    16d8:	00001301 	andeq	r1, r0, r1, lsl #6
    16dc:	0000210d 	andeq	r2, r0, sp, lsl #2
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	00160e00 	andseq	r0, r6, r0, lsl #28
    16e4:	0b3a0e03 	bleq	e84ef8 <__ccfg+0xe64f50>
    16e8:	0b39053b 	bleq	e42bdc <__ccfg+0xe22c34>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ec:	00001349 	andeq	r1, r0, r9, asr #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	0013010c 	andseq	r0, r3, ip, lsl #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	00051000 	andeq	r1, r5, r0
    16fc:	00001349 	andeq	r1, r0, r9, asr #6
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1700:	03003411 	movweq	r3, #1041	; 0x411
    1704:	3b0b3a0e 	blcc	2cff44 <__ccfg+0x2aff9c>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1708:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1710:	1200000c 	andne	r0, r0, #12
    1714:	0b0b0113 	bleq	2c1b68 <__ccfg+0x2a1bc0>
			PRCMPowerDomainOff (
    1718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    171c:	13010b39 	movwne	r0, #6969	; 0x1b39
	__SLEEP;
    1720:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1724:	3a0e0300 	bcc	38232c <__ccfg+0x362384>
  __ASM volatile ("cpsie i" : : : "memory");
    1728:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	goto Redo;
    172c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1730:	1400000b 	strne	r0, [r0], #-11
    1734:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1738:	0b3a0b0b 	bleq	e8436c <__ccfg+0xe643c4>
    173c:	0b39053b 	bleq	e42c30 <__ccfg+0xe22c88>
    1740:	00001301 	andeq	r1, r0, r1, lsl #6
    1744:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1748:	000b2f13 	andeq	r2, fp, r3, lsl pc
    174c:	00341600 	eorseq	r1, r4, r0, lsl #12
    1750:	0b3a0e03 	bleq	e84f64 <__ccfg+0xe64fbc>
    1754:	0b390b3b 	bleq	e44448 <__ccfg+0xe244a0>
    1758:	0a021349 	beq	86484 <__ccfg+0x664dc>
    175c:	34170000 	ldrcc	r0, [r7], #-0
    1760:	3a134700 	bcc	4d3368 <__ccfg+0x4b33c0>
    1764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1768:	000a020b 	andeq	r0, sl, fp, lsl #4
    176c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    1770:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
    1778:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    177c:	01120111 	tsteq	r2, r1, lsl r1
    1780:	13010a40 	movwne	r0, #6720	; 0x1a40
    1784:	05190000 	ldreq	r0, [r9, #-0]
    1788:	3a080300 	bcc	202390 <__ccfg+0x1e23e8>
    178c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1790:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1794:	1a000006 	bne	17b4 <halt+0x1c>
	cli_tim;
    1798:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    179c:	0b3b0b3a 	bleq	ec448c <__ccfg+0xea44e4>
    17a0:	13490b39 	movtne	r0, #39737	; 0x9b39
	diag ("PicOS halted");
    17a4:	00000602 	andeq	r0, r0, r2, lsl #12
	mdelay (500);
    17a8:	03000a1b 	movweq	r0, #2587	; 0xa1b
    17ac:	3b0b3a0e 	blcc	2cffec <__ccfg+0x2b0044>
	setpowermode (2);
    17b0:	110b390b 	tstne	fp, fp, lsl #18
	__PCB = NULL;
    17b4:	1c000001 	stcne	0, cr0, [r0], {1}
	release;
    17b8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    17bc:	06550152 			; <UNDEFINED> instruction: 0x06550152
    17c0:	0b590b58 	bleq	1644528 <__ccfg+0x1624580>
    17c4:	13010b57 	movwne	r0, #6999	; 0x1b57
int main (void) {
    17c8:	051d0000 	ldreq	r0, [sp, #-0]
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	00133100 	andseq	r3, r3, r0, lsl #2
    17d0:	011d1e00 	tsteq	sp, r0, lsl #28
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	01521331 	cmpeq	r2, r1, lsr r3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17d8:	0b580655 	bleq	1603134 <__ccfg+0x15e318c>
	system_init ();
    17dc:	0b570b59 	bleq	15c4548 <__ccfg+0x15a45a0>
	tcv_init ();
    17e0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e4:	3a0e0301 	bcc	3823f0 <__ccfg+0x362448>
    17e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17ec:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    17f0:	000b2013 	andeq	r2, fp, r3, lsl r0
    17f4:	00052000 	andeq	r2, r5, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    17f8:	0b3a0e03 	bleq	e8500c <__ccfg+0xe65064>
    17fc:	0b390b3b 	bleq	e444f0 <__ccfg+0xe24548>
	delay (16, 0);
    1800:	00001349 	andeq	r1, r0, r9, asr #6
    1804:	01110100 	tsteq	r1, r0, lsl #2
    1808:	0b130e25 	bleq	4c50a4 <__ccfg+0x4a50fc>
	__pi_release ();
    180c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1810:	01110655 	tsteq	r1, r5, asr r6
    1814:	00000610 	andeq	r0, r0, r0, lsl r6
    1818:	0b002402 	bleq	a828 <__exidx_end+0x4aa8>
    181c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1820:	0300000e 	movweq	r0, #14
    1824:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
static void killev (__pi_pcb_t *pid) {
    1828:	0b3b0b3a 	bleq	ec4518 <__ccfg+0xea4570>
	wfun = (aword)(pid->code);
    182c:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i) {
    1830:	24040000 	strcs	r0, [r4], #-0
		for (j = 0; j < nevents (i); j++) {
    1834:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1838:	0008030b 	andeq	r0, r8, fp, lsl #6
    183c:	00260500 	eoreq	r0, r6, r0, lsl #10
			    || i->Events [j] . Event == wfun
    1840:	00001349 	andeq	r1, r0, r9, asr #6
		for (j = 0; j < nevents (i); j++) {
    1844:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
			if (i->Events [j] . Event == (aword)pid
    1848:	07000013 	smladeq	r0, r3, r0, r0
    184c:	0b0b0113 	bleq	2c1ca0 <__ccfg+0x2a1cf8>
    1850:	0b3b0b3a 	bleq	ec4540 <__ccfg+0xea4598>
				wakeupev (i, j);
    1854:	13010b39 	movwne	r0, #6969	; 0x1b39
    1858:	0d080000 	stceq	0, cr0, [r8, #-0]
	for_all_tasks (i) {
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
}
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	0b13490b 	bleq	4d3c98 <__ccfg+0x4b3cf0>
static void qfree (aword *ch) {
    1868:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186c:	000b380b 	andeq	r3, fp, fp, lsl #16
	cc = (aword*)(mpools + MA_NP);
    1870:	000d0900 	andeq	r0, sp, r0, lsl #18
	m_setnextp (ch, chunk);
    1874:	0b3a0e03 	bleq	e85088 <__ccfg+0xe650e0>
	m_setnextp (cc, ch);
    1878:	0b390b3b 	bleq	e4456c <__ccfg+0xe245c4>
}
    187c:	0b381349 	bleq	e065a8 <__ccfg+0xde6600>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1880:	340a0000 	strcc	r0, [sl], #-0
    1884:	3a0e0300 	bcc	38248c <__ccfg+0x3624e4>
    1888:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			m_setnextp (cc, m_nextp (chunk));
    188c:	3f13490b 	svccc	0x0013490b
			m_size (chunk) += m_hdrlen + m_size (ch);
    1890:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1894:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1898:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    189c:	010c0000 	mrseq	r0, (UNDEF: 12)
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	01134901 	tsteq	r3, r1, lsl #18
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    18a8:	00000021 	andeq	r0, r0, r1, lsr #32
    18ac:	0300160e 	movweq	r1, #1550	; 0x60e
			m_setnextp (cc, m_nextp (chunk));
    18b0:	3b0b3a0e 	blcc	2d00f0 <__ccfg+0x2b0148>
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    18b8:	0f000013 	svceq	0x00000013
    18bc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    18c0:	00001301 	andeq	r1, r0, r1, lsl #6
    18c4:	49000510 	stmdbmi	r0, {r4, r8, sl}
    18c8:	11000013 	tstne	r0, r3, lsl r0
			if (m_size (chunk) >= m_size (ch))
    18cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18d4:	13490b39 	movtne	r0, #39737	; 0x9b39
		chunk = m_nextp (chunk))
    18d8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    18dc:	13120000 	tstne	r2, #0
    18e0:	3a0b0b01 	bcc	2c44ec <__ccfg+0x2a4544>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_wait (a);
    18e8:	0013010b 	andseq	r0, r3, fp, lsl #2
	diag_wchar (c, a);
    18ec:	000d1300 	andeq	r1, sp, r0, lsl #6
    18f0:	0b3a0e03 	bleq	e85104 <__ccfg+0xe6515c>
}
    18f4:	0b39053b 	bleq	e42de8 <__ccfg+0xe22e40>
    18f8:	0b381349 	bleq	e06624 <__ccfg+0xde667c>
	syserror (ESTATE, "state");
    18fc:	13140000 	tstne	r4, #0
    1900:	0b0e0301 	bleq	38250c <__ccfg+0x362564>
    1904:	3b0b3a0b 	blcc	2d0138 <__ccfg+0x2b0190>
    1908:	010b3905 	tsteq	fp, r5, lsl #18
	for (i = 0; i < MAX_UTIMERS; i++)
    190c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
void utimer_add (address ut) {
    1910:	13490021 	movtne	r0, #36897	; 0x9021
    1914:	00000b2f 	andeq	r0, r0, pc, lsr #22
		if (__pi_utims [i] == NULL)
    1918:	03003416 	movweq	r3, #1046	; 0x416
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	3b0b3a0e 	blcc	2d015c <__ccfg+0x2b01b4>
    1920:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		syserror (ERESOURCE, "ut a");
    1924:	000a0213 	andeq	r0, sl, r3, lsl r2
	__pi_utims [i] = ut;
    1928:	002e1700 	eoreq	r1, lr, r0, lsl #14
}
    192c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1930:	0b3b0b3a 	bleq	ec4620 <__ccfg+0xea4678>
    1934:	01110b39 	tsteq	r1, r9, lsr fp
	*t = v;
    1938:	0a400112 	beq	1001d88 <__ccfg+0xfe1de0>
	TCI_RUN_AUXILIARY_TIMER;
    193c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
void update_n_wake (word min, Boolean force) {
    1940:	030c3f01 	movweq	r3, #52993	; 0xcf01
	if (TCI_UPDATE_DELAY_TICKS (force))
    1944:	3b0b3a0e 	blcc	2d0184 <__ccfg+0x2b01dc>
    1948:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    194c:	1113490c 	tstne	r3, ip, lsl #18
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1950:	40011201 	andmi	r1, r1, r1, lsl #4
    1954:	0013010a 	andseq	r0, r3, sl, lsl #2
    1958:	00051900 	andeq	r1, r5, r0, lsl #18
    195c:	0b3a0803 	bleq	e83970 <__ccfg+0xe639c8>
    1960:	0b390b3b 	bleq	e44654 <__ccfg+0xe246ac>
    1964:	06021349 	streq	r1, [r2], -r9, asr #6
    1968:	051a0000 	ldreq	r0, [sl, #-0]
    196c:	3a080300 	bcc	202574 <__ccfg+0x1e25cc>
    1970:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1974:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1978:	1b00000a 	blne	19a8 <update_n_wake+0x68>
    197c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 18cc <qfree+0x68>
    1980:	0b3a0e03 	bleq	e85194 <__ccfg+0xe651ec>
		for_all_tasks (i) {
    1984:	0b39053b 	bleq	e42e78 <__ccfg+0xe22ed0>
	__pi_mintk = znew + min;
    1988:	13490c27 	movtne	r0, #39975	; 0x9c27
    198c:	01120111 	tsteq	r2, r1, lsl r1
			if (!twaiting (i))
    1990:	13010a40 	movwne	r0, #6720	; 0x1a40
    1994:	051c0000 	ldreq	r0, [ip, #-0]
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1998:	3a080300 	bcc	2025a0 <__ccfg+0x1e25f8>
    199c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    19a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19a4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    19a8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18f8 <dgout+0x14>
    19ac:	0b3a0e03 	bleq	e851c0 <__ccfg+0xe65218>
    19b0:	0b39053b 	bleq	e42ea4 <__ccfg+0xe22efc>
    19b4:	01120111 	tsteq	r2, r1, lsl r1
    19b8:	00000a40 	andeq	r0, r0, r0, asr #20
    19bc:	0300341e 	movweq	r3, #1054	; 0x41e
    19c0:	3b0b3a08 	blcc	2d01e8 <__ccfg+0x2b0240>
    19c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				wakeuptm (i);
    19c8:	00060213 	andeq	r0, r6, r3, lsl r2
    19cc:	000a1f00 	andeq	r1, sl, r0, lsl #30
		for_all_tasks (i) {
    19d0:	0b3a0e03 	bleq	e851e4 <__ccfg+0xe6523c>
				d = i->Timer - znew;
    19d4:	0b39053b 	bleq	e42ec8 <__ccfg+0xe22f20>
    19d8:	00000111 	andeq	r0, r0, r1, lsl r1
    19dc:	31011d20 	tstcc	r1, r0, lsr #26
		if ((word)(__pi_mintk - znew) < min) 
    19e0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    19e4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    19e8:	010b5705 	tsteq	fp, r5, lsl #14
	__pi_old = znew;
    19ec:	21000013 	tstcs	r0, r3, lsl r0
}
    19f0:	13310005 	teqne	r1, #5
	TCI_RUN_DELAY_TIMER;
    19f4:	1d220000 	stcne	0, cr0, [r2, #-0]
}
    19f8:	11133101 	tstne	r3, r1, lsl #2
    19fc:	58011201 	stmdapl	r1, {r0, r9, ip}
    1a00:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1a04:	2300000b 	movwcs	r0, #11
    1a08:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
void proceed (word state) {
    1a0c:	0b3b0b3a 	bleq	ec46fc <__ccfg+0xea4754>
	prcdstate (__pi_curr, state);
    1a10:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a14:	00000602 	andeq	r0, r0, r2, lsl #12
	release;
    1a18:	03000a24 	movweq	r0, #2596	; 0xa24
    1a1c:	3b0b3a0e 	blcc	2d025c <__ccfg+0x2b02b4>
void __pi_wait (aword event, word state) {
    1a20:	110b390b 	tstne	fp, fp, lsl #18
	sint j = nevents (__pi_curr);
    1a24:	25000001 	strcs	r0, [r0, #-1]
	if (j >= MAX_EVENTS_PER_TASK)
    1a28:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1a2c:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1a30:	0b590b58 	bleq	1644798 <__ccfg+0x16247f0>
		syserror (ENEVENTS, "sw");
    1a34:	00000b57 	andeq	r0, r0, r7, asr fp
    1a38:	31000526 	tstcc	r0, r6, lsr #10
	setestate (__pi_curr->Events [j], state, event);
    1a3c:	00060213 	andeq	r0, r6, r3, lsl r2
	incwait (__pi_curr);
    1a40:	011d2700 	tsteq	sp, r0, lsl #14
	setestate (__pi_curr->Events [j], state, event);
    1a44:	01521331 	cmpeq	r2, r1, lsr r3
}
    1a48:	0b580655 	bleq	16033a4 <__ccfg+0x15e33fc>
    1a4c:	0b570b59 	bleq	15c47b8 <__ccfg+0x15a4810>
    1a50:	00001301 	andeq	r1, r0, r1, lsl #6
void __pi_trigger (aword event) {
    1a54:	31011d28 	tstcc	r1, r8, lsr #26
	for_all_tasks (i) {
    1a58:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		for (j = 0; j < nevents (i); j++) {
    1a5c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1a60:	000b570b 	andeq	r5, fp, fp, lsl #14
    1a64:	002e2900 	eoreq	r2, lr, r0, lsl #18
    1a68:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			if (i->Events [j] . Event == event) {
    1a6c:	0b3b0b3a 	bleq	ec475c <__ccfg+0xea47b4>
    1a70:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a74:	01120111 	tsteq	r2, r1, lsl r1
				wakeupev (i, j);
    1a78:	00000a40 	andeq	r0, r0, r0, asr #20
    1a7c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
	for_all_tasks (i) {
    1a80:	3b0b3a0e 	blcc	2d02c0 <__ccfg+0x2b0318>
}
    1a84:	110b390b 	tstne	fp, fp, lsl #18
aword __pi_join (aword pid, word st) {
    1a88:	40011201 	andmi	r1, r1, r1, lsl #4
	for_all_tasks (i) {
    1a8c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1a90:	002e2b00 	eoreq	r2, lr, r0, lsl #22
	return 0;
    1a94:	0b3a0e03 	bleq	e852a8 <__ccfg+0xe65300>
		if ((aword)i == pid) {
    1a98:	0b390b3b 	bleq	e4478c <__ccfg+0xe247e4>
			__pi_wait (pid, st);
    1a9c:	00000b20 	andeq	r0, r0, r0, lsr #22
}
    1aa0:	03012e2c 	movweq	r2, #7724	; 0x1e2c
	for_all_tasks (i) {
    1aa4:	3b0b3a0e 	blcc	2d02e4 <__ccfg+0x2b033c>
    1aa8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
void delay (word d, word state) {
    1aac:	1201110c 	andne	r1, r1, #12, 2
	settstate (__pi_curr, state);
    1ab0:	010a4001 	tsteq	sl, r1
    1ab4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1ab8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1abc:	342e0000 	strtcc	r0, [lr], #-0
	update_n_wake (d, YES);
    1ac0:	02133100 	andseq	r3, r3, #0, 2
    1ac4:	2f000006 	svccs	0x00000006
	__pi_curr->Timer = __pi_old + d;
    1ac8:	0e03012e 	adfeqsp	f0, f3, #0.5
    1acc:	0b3b0b3a 	bleq	ec47bc <__ccfg+0xea4814>
	inctimer (__pi_curr);
    1ad0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ad4:	13010b20 	movwne	r0, #6944	; 0x1b20
    1ad8:	34300000 	ldrtcc	r0, [r0], #-0
}
    1adc:	3a080300 	bcc	2026e4 <__ccfg+0x1e273c>
    1ae0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (fun == NULL)
    1ae4:	0013490b 	andseq	r4, r3, fp, lsl #18
		return (int) __pi_curr;
    1ae8:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    1aec:	0b3a0e03 	bleq	e85300 <__ccfg+0xe65358>
	for_all_tasks (i)
    1af0:	0b390b3b 	bleq	e447e4 <__ccfg+0xe2483c>
}
    1af4:	0b200c27 	bleq	804b98 <__ccfg+0x7e4bf0>
		if (i->code == fun)
    1af8:	00001301 	andeq	r1, r0, r1, lsl #6
	for_all_tasks (i)
    1afc:	03000532 	movweq	r0, #1330	; 0x532
    1b00:	3b0b3a08 	blcc	2d0328 <__ccfg+0x2b0380>
    1b04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
int __pi_strlen (const char *s) {
    1b08:	33000013 	movwcc	r0, #19
	for (i = 0; *(s+i) != '\0'; i++);
    1b0c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
    1b10:	01120111 	tsteq	r2, r1, lsl r1
	for (i = 0; *(s+i) != '\0'; i++);
    1b14:	0b590b58 	bleq	164487c <__ccfg+0x16248d4>
	while ((Boolean)(*d++ = *s++));
    1b18:	13010b57 	movwne	r0, #6999	; 0x1b57
    1b1c:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
    1b20:	3a0e0301 	bcc	38272c <__ccfg+0x362784>
}
    1b24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (n-- && (*s != '\0'))
    1b28:	1113490b 	tstne	r3, fp, lsl #18
    1b2c:	40011201 	andmi	r1, r1, r1, lsl #4
	*d = '\0';
    1b30:	0013010a 	andseq	r0, r3, sl, lsl #2
	while (n-- && (*s != '\0'))
    1b34:	00343500 	eorseq	r3, r4, r0, lsl #10
    1b38:	0b3a0803 	bleq	e83b4c <__ccfg+0xe63ba4>
		*d++ = *s++;
    1b3c:	0b390b3b 	bleq	e44830 <__ccfg+0xe24888>
    1b40:	06021349 	streq	r1, [r2], -r9, asr #6
	while (n--)
    1b44:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    1b48:	3a0e0301 	bcc	382754 <__ccfg+0x3627ac>
		*dest++ = *src++;
    1b4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b50:	200c270b 	andcs	r2, ip, fp, lsl #14
    1b54:	0013010b 	andseq	r0, r3, fp, lsl #2
	while (n--)
    1b58:	00053700 	andeq	r3, r5, r0, lsl #14
}
    1b5c:	0b3a0e03 	bleq	e85370 <__ccfg+0xe653c8>
		*dest++ = c;
    1b60:	0b39053b 	bleq	e43054 <__ccfg+0xe230ac>
void adddevfunc (devreqfun_t rf, int loc) {
    1b64:	00001349 	andeq	r1, r0, r9, asr #6
		syserror (EREQPAR, "addv");
    1b68:	03012e38 	movweq	r2, #7736	; 0x1e38
		syserror (ERESOURCE, "addv");
    1b6c:	3b0b3a0e 	blcc	2d03ac <__ccfg+0x2b0404>
	if (ioreq [loc] != NULL)
    1b70:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1b74:	2013490c 	andscs	r4, r3, ip, lsl #18
		syserror (ERESOURCE, "addv");
    1b78:	0013010b 	andseq	r0, r3, fp, lsl #2
	ioreq [loc] = rf;
    1b7c:	00053900 	andeq	r3, r5, r0, lsl #18
}
    1b80:	0b3a0e03 	bleq	e85394 <__ccfg+0xe653ec>
    1b84:	0b390b3b 	bleq	e44878 <__ccfg+0xe248d0>
sint io (word retry, word dev, word operation, char *buf, word len) {
    1b88:	00001349 	andeq	r1, r0, r9, asr #6
    1b8c:	31012e3a 	tstcc	r1, sl, lsr lr
    1b90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1b94:	000a4001 	andeq	r4, sl, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1b98:	001d3b00 	andseq	r3, sp, r0, lsl #22
    1b9c:	01111331 	tsteq	r1, r1, lsr r3
    1ba0:	0b580112 	bleq	1601ff0 <__ccfg+0x15e2048>
		syserror (ENODEVICE, "io");
    1ba4:	0b570b59 	bleq	15c4910 <__ccfg+0x15a4968>
    1ba8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (len == 0)
    1bac:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	ret = (ioreq [dev]) (operation, buf, len);
    1bb0:	0e030b13 	vmoveq.32	d3[0], r0
    1bb4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	if (ret >= 0)
    1bb8:	06100111 			; <UNDEFINED> instruction: 0x06100111
	if (ret == -1) {
    1bbc:	24020000 	strcs	r0, [r2], #-0
    1bc0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		if (retry == WNONE)
    1bc4:	000e030b 	andeq	r0, lr, fp, lsl #6
		iowait (dev, operation, retry);
    1bc8:	00160300 	andseq	r0, r6, r0, lsl #6
    1bcc:	0b3a0e03 	bleq	e853e0 <__ccfg+0xe65438>
    1bd0:	0b390b3b 	bleq	e448c4 <__ccfg+0xe2491c>
			release;
    1bd4:	00001349 	andeq	r1, r0, r9, asr #6
	if (ret == -2) {
    1bd8:	0b002404 	bleq	abf0 <__exidx_end+0x4e70>
		if (retry != WNONE) {
    1bdc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1be0:	05000008 	streq	r0, [r0, #-8]
			iowait (dev, operation, retry);
    1be4:	13490026 	movtne	r0, #36902	; 0x9026
    1be8:	35060000 	strcc	r0, [r6, #-0]
			(ioreq [dev]) (NONE, buf, len);
    1bec:	00134900 	andseq	r4, r3, r0, lsl #18
    1bf0:	000f0700 	andeq	r0, pc, r0, lsl #14
    1bf4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		(ioreq [dev]) (NONE, buf, len);
    1bf8:	13080000 	movwne	r0, #32768	; 0x8000
    1bfc:	3a0b0b01 	bcc	2c4808 <__ccfg+0x2a4860>
    1c00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1c04:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (retry != WNONE) {
    1c08:	000d0900 	andeq	r0, sp, r0, lsl #18
		delay (-ret - 2, retry);
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
    1c14:	0b0b1349 	bleq	2c6940 <__ccfg+0x2a6998>
    1c18:	0b0c0b0d 	bleq	304854 <__ccfg+0x2e48ac>
		release;
    1c1c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1c20:	03000d0a 	movweq	r0, #3338	; 0xd0a
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c24:	3b0b3a0e 	blcc	2d0464 <__ccfg+0x2b04bc>
    1c28:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c2c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1c30:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1c34:	0b3a0e03 	bleq	e85448 <__ccfg+0xe654a0>
		syserror (ERESOURCE, "mal1");
    1c38:	0b390b3b 	bleq	e4492c <__ccfg+0xe24984>
    1c3c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1b20 <__pi_strcpy+0xa>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1c40:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1c44:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c48:	00130113 	andseq	r0, r3, r3, lsl r1
	m_size (mpools [0]) = mlen - m_hdrlen;
    1c4c:	00210d00 	eoreq	r0, r1, r0, lsl #26
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c50:	160e0000 	strne	r0, [lr], -r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1c54:	3a0e0300 	bcc	38285c <__ccfg+0x3628b4>
    1c58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1c5c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c60:	01150f00 	tsteq	r5, r0, lsl #30
    1c64:	13010c27 	movwne	r0, #7207	; 0x1c27
    1c68:	05100000 	ldreq	r0, [r0, #-0]
    1c6c:	00134900 	andseq	r4, r3, r0, lsl #18
    1c70:	00341100 	eorseq	r1, r4, r0, lsl #2
void __pi_free (aword *ch) {
    1c74:	0b3a0e03 	bleq	e85488 <__ccfg+0xe654e0>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1c78:	0b39053b 	bleq	e4316c <__ccfg+0xe231c4>
    1c7c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1b60 <__pi_memset+0xa>
		syserror (EMALLOC, "malg");
    1c80:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1c84:	0b011312 	bleq	468d4 <__ccfg+0x2692c>
	mcfree [MA_NP] += m_size (ch);
    1c88:	3b0b3a0b 	blcc	2d04bc <__ccfg+0x2b0514>
		m_size (ch) ^= MALLOC_UMASK;
    1c8c:	010b3905 	tsteq	fp, r5, lsl #18
    1c90:	13000013 	movwne	r0, #19
	mcfree [MA_NP] += m_size (ch);
    1c94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	QFREE;
    1c98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (mevent [MA_NP] . nwait) {
    1c9c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ca0:	00000b38 	andeq	r0, r0, r8, lsr fp
		trigger ((aword)(&(mevent [MA_NP])));
    1ca4:	03011314 	movweq	r1, #4884	; 0x1314
		mevent [MA_NP] . nwait --;
    1ca8:	3a0b0b0e 	bcc	2c48e8 <__ccfg+0x2a4940>
}
    1cac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cb0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1cb4:	00211500 	eoreq	r1, r1, r0, lsl #10
    1cb8:	0b2f1349 	bleq	bc69e4 <__ccfg+0xba6a3c>
void kill (aword pid) {
    1cbc:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
		pid = (aword) __pi_curr;
    1cc0:	030c3f01 	movweq	r3, #52993	; 0xcf01
	j = NULL;
    1cc4:	3b0b3a0e 	blcc	2d0504 <__ccfg+0x2b055c>
	for_all_tasks (i) {
    1cc8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	syserror (EREQPAR, "kpi");
    1ccc:	1113490c 	tstne	r3, ip, lsl #18
    1cd0:	40011201 	andmi	r1, r1, r1, lsl #4
		if ((aword)i == pid) {
    1cd4:	0013010a 	andseq	r0, r3, sl, lsl #2
    1cd8:	00051700 	andeq	r1, r5, r0, lsl #14
				__PCB = i->Next;
    1cdc:	0b3a0803 	bleq	e83cf0 <__ccfg+0xe63d48>
			killev (i);
    1ce0:	0b390b3b 	bleq	e449d4 <__ccfg+0xe24a2c>
			ufree (i);
    1ce4:	06021349 	streq	r1, [r2], -r9, asr #6
			if (i == __pi_curr)
    1ce8:	34180000 	ldrcc	r0, [r8], #-0
    1cec:	3a0e0300 	bcc	3828f4 <__ccfg+0x36294c>
				release;
    1cf0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				j->Next = i->Next;
    1cf4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1cf8:	19000006 	stmdbne	r0, {r1, r2}
    1cfc:	08030034 	stmdaeq	r3, {r2, r4, r5}
}
    1d00:	0b3b0b3a 	bleq	ec49f0 <__ccfg+0xea4a48>
    1d04:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d08:	00000602 	andeq	r0, r0, r2, lsl #12
	if (size < 8)
    1d0c:	01110100 	tsteq	r1, r0, lsl #2
		_size = 2;
    1d10:	0b130e25 	bleq	4c55ac <__ccfg+0x4a5604>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d14:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		_size = (((aword)size) + 3) >> 2;
    1d18:	01110655 	tsteq	r1, r5, asr r6
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d1c:	00000610 	andeq	r0, r0, r0, lsl r6
		_size = (((aword)size) + 3) >> 2;
    1d20:	0b002402 	bleq	ad30 <__exidx_end+0x4fb0>
		if (mevent [MA_NP] . nfail != 255)
    1d24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1d28:	0300000e 	movweq	r0, #14
			mevent [MA_NP] . nfail ++;
    1d2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		mnfree [MA_NP] = 0;
    1d30:	0b3b0b3a 	bleq	ec4a20 <__ccfg+0xea4a78>
    1d34:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d38:	24040000 	strcs	r0, [r4], #-0
    1d3c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			syserror (EMALLOC, "malc");
    1d40:	0008030b 	andeq	r0, r8, fp, lsl #6
    1d44:	00260500 	eoreq	r0, r6, r0, lsl #10
		if (m_size (chunk) >= _size)
    1d48:	00001349 	andeq	r1, r0, r9, asr #6
    1d4c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
		chunk = m_nextp (chunk)) {
    1d50:	07000013 	smladeq	r0, r3, r0, r0
		m_setnextp (cc, m_nextp (chunk));
    1d54:	0b0b0113 	bleq	2c21a8 <__ccfg+0x2a2200>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1d58:	0b3b0b3a 	bleq	ec4a48 <__ccfg+0xea4aa0>
    1d5c:	13010b39 	movwne	r0, #6969	; 0x1b39
			m_size (chunk) = _size;
    1d60:	0d080000 	stceq	0, cr0, [r8, #-0]
			cc = chunk + _size + m_hdrlen;
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			m_size (cc) = waste - m_hdrlen;
    1d6c:	0b13490b 	bleq	4d41a0 <__ccfg+0x4b41f8>
			QFREE;
    1d70:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
		mevent [MA_NP] . nfail = 0;
    1d74:	000b380b 	andeq	r3, fp, fp, lsl #16
		mcfree [MA_NP] -= m_size (chunk);
    1d78:	000d0900 	andeq	r0, sp, r0, lsl #18
    1d7c:	0b3a0e03 	bleq	e85590 <__ccfg+0xe655e8>
    1d80:	0b390b3b 	bleq	e44a74 <__ccfg+0xe24acc>
    1d84:	0b381349 	bleq	e06ab0 <__ccfg+0xde6b08>
		m_size (chunk) |= MALLOC_UMASK;
    1d88:	340a0000 	strcc	r0, [sl], #-0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d8c:	3a0e0300 	bcc	382994 <__ccfg+0x3629ec>
		m_size (chunk) |= MALLOC_UMASK;
    1d90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			mnfree [MA_NP] = mcfree [MA_NP];
    1d94:	3f13490b 	svccc	0x0013490b
}
    1d98:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1d9c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1da0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1da4:	010c0000 	mrseq	r0, (UNDEF: 12)
    1da8:	01134901 	tsteq	r3, r1, lsl #18
    1dac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1db0:	00000021 	andeq	r0, r0, r1, lsr #32
aword __pi_fork (fsmcode func, aword data) {
    1db4:	0300160e 	movweq	r1, #1550	; 0x60e
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1db8:	3b0b3a0e 	blcc	2d05f8 <__ccfg+0x2b0650>
    1dbc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1dc0:	0f000013 	svceq	0x00000013
		if ((j = __PCB) == NULL)
    1dc4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	i->Next = NULL;
    1dc8:	00001301 	andeq	r1, r0, r1, lsl #6
	i->data = data;
    1dcc:	49000510 	stmdbmi	r0, {r4, r8, sl}
		if ((j = __PCB) == NULL)
    1dd0:	11000013 	tstne	r0, r3, lsl r0
}
    1dd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			for (; j->Next != NULL; j = j->Next);
    1dd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ddc:	13490b39 	movtne	r0, #39737	; 0x9b39
	return (aword) i;
    1de0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1de4:	13120000 	tstne	r2, #0
	if (mevent [MA_NP] . nwait != 255)
    1de8:	3a0b0b01 	bcc	2c49f4 <__ccfg+0x2a4a4c>
    1dec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1df0:	0013010b 	andseq	r0, r3, fp, lsl #2
		mevent [MA_NP] . nwait ++;
    1df4:	000d1300 	andeq	r1, sp, r0, lsl #6
	wait ((aword)(&(mevent [MA_NP])), state);
    1df8:	0b3a0e03 	bleq	e8560c <__ccfg+0xe65664>
    1dfc:	0b39053b 	bleq	e432f0 <__ccfg+0xe23348>
void diag (const char *mess, ...) {
    1e00:	0b381349 	bleq	e06b2c <__ccfg+0xde6b84>
    1e04:	13140000 	tstne	r4, #0
    1e08:	0b0e0301 	bleq	382a14 <__ccfg+0x362a6c>
	diag_disable_int (a, is);
    1e0c:	3b0b3a0b 	blcc	2d0640 <__ccfg+0x2b0698>
    1e10:	010b3905 	tsteq	fp, r5, lsl #18
    1e14:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
				d = (bc == 16) ? 10000 : 1000000000;
    1e18:	13490021 	movtne	r0, #36897	; 0x9021
	diag_disable_int (a, is);
    1e1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
	while (*mess != '\0') {
    1e20:	3f012e16 	svccc	0x00012e16
	dgout ('\r');
    1e24:	3a0e030c 	bcc	382a5c <__ccfg+0x362ab4>
	dgout ('\n');
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e2c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1e30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	diag_wait (a);
    1e34:	000a4001 	andeq	r4, sl, r1
	diag_enable_int (a, is);
    1e38:	00051700 	andeq	r1, r5, r0, lsl #14
    1e3c:	0b3a0803 	bleq	e83e50 <__ccfg+0xe63ea8>
}
    1e40:	0b390b3b 	bleq	e44b34 <__ccfg+0xe24b8c>
    1e44:	06021349 	streq	r1, [r2], -r9, asr #6
    1e48:	34180000 	ldrcc	r0, [r8], #-0
		if (*mess == '%') {
    1e4c:	3a0e0300 	bcc	382a54 <__ccfg+0x362aac>
    1e50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (*mess == 'l') {
    1e54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e58:	00000006 	andeq	r0, r0, r6
				mess++;
    1e5c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				val = va_arg (ap, lword);
    1e60:	030b130e 	movweq	r1, #45838	; 0xb30e
				bc = 32;
    1e64:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				bc = 16;
    1e68:	10011106 	andne	r1, r1, r6, lsl #2
			switch (*mess) {
    1e6c:	02000006 	andeq	r0, r0, #6
    1e70:	0b0b0024 	bleq	2c1f08 <__ccfg+0x2a1f60>
    1e74:	0e030b3e 	vmoveq.16	d3[0], r0
				dgout ('%');
    1e78:	16030000 	strne	r0, [r3], -r0
    1e7c:	3a0e0300 	bcc	382a84 <__ccfg+0x362adc>
				dgout (*mess);
    1e80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e84:	0013490b 	andseq	r4, r3, fp, lsl #18
			switch (*mess) {
    1e88:	00240400 	eoreq	r0, r4, r0, lsl #8
					v = __pi_hex_enc_table [
    1e8c:	0b3e0b0b 	bleq	f84ac0 <__ccfg+0xf64b18>
					i += 4;
    1e90:	00000803 	andeq	r0, r0, r3, lsl #16
					(val >> (bc - i)) & 0xf];
    1e94:	03011305 	movweq	r1, #4869	; 0x1305
    1e98:	3a0b0b0e 	bcc	2c4ad8 <__ccfg+0x2a4b30>
					dgout (v);
    1e9c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1ea0:	06000013 			; <UNDEFINED> instruction: 0x06000013
				while (i < bc) {
    1ea4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			mess++;
    1ea8:	0b381349 	bleq	e06bd4 <__ccfg+0xde6c2c>
					d /= 10;
    1eac:	00000c34 	andeq	r0, r0, r4, lsr ip
				if ((val >> (bc - 1)) & 1) {
    1eb0:	0b000f07 	bleq	5ad4 <patchImageGenfsk+0x24>
    1eb4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
					dgout ('-');
    1eb8:	13490026 	movtne	r0, #36902	; 0x9026
    1ebc:	35090000 	strcc	r0, [r9, #-0]
						val |= 0xffff0000;
    1ec0:	00134900 	andseq	r4, r3, r0, lsl #18
    1ec4:	01130a00 	tsteq	r3, r0, lsl #20
    1ec8:	0b3a0b0b 	bleq	e84afc <__ccfg+0xe64b54>
				d = (bc == 16) ? 10000 : 1000000000;
    1ecc:	0b390b3b 	bleq	e44bc0 <__ccfg+0xe24c18>
    1ed0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ed4:	03000d0b 	movweq	r0, #3339	; 0xd0b
					v = (word) (val / d);
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
					if (v || d == 1) break;
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ee0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
					d /= 10;
    1ee4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
				d = (bc == 16) ? 10000 : 1000000000;
    1ee8:	0c00000b 	stceq	0, cr0, [r0], {11}
					dgout (v + '0');
    1eec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ef0:	0b3b0b3a 	bleq	ec4be0 <__ccfg+0xea4c38>
    1ef4:	13490b39 	movtne	r0, #39737	; 0x9b39
					d /= 10;
    1ef8:	00000b38 	andeq	r0, r0, r8, lsr fp
					val = val - (v * d);
    1efc:	0300340d 	movweq	r3, #1037	; 0x40d
					if (d == 0) break;
    1f00:	3b0b3a0e 	blcc	2d0740 <__ccfg+0x2b0798>
					v = (word) (val / d);
    1f04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f08:	3c0c3f13 	stccc	15, cr3, [ip], {19}
				if (bc == 16)
    1f0c:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1f10:	0b0b000f 	bleq	2c1f54 <__ccfg+0x2a1fac>
					val &= 0xffff;
    1f14:	00001349 	andeq	r1, r0, r9, asr #6
					dgout (*s);
    1f18:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
					s++;
    1f1c:	00130113 	andseq	r0, r3, r3, lsl r1
				while (*s != '\0') {
    1f20:	00211000 	eoreq	r1, r1, r0
    1f24:	16110000 	ldrne	r0, [r1], -r0
			dgout (*mess++);
    1f28:	3a0e0300 	bcc	382b30 <__ccfg+0x362b88>
    1f2c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f30:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f34:	01151200 	tsteq	r5, r0, lsl #4
    1f38:	13010c27 	movwne	r0, #7207	; 0x1c27
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1f3c:	05130000 	ldreq	r0, [r3, #-0]
    1f40:	00134900 	andseq	r4, r3, r0, lsl #18
    1f44:	00341400 	eorseq	r1, r4, r0, lsl #8
    1f48:	0b3a0e03 	bleq	e8575c <__ccfg+0xe657b4>
	^ entropy
    1f4c:	0b39053b 	bleq	e43440 <__ccfg+0xe23498>
}
    1f50:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1e34 <diag+0x34>
    1f54:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1f58:	0b011315 	bleq	46bb4 <__ccfg+0x26c0c>
    1f5c:	3b0b3a0b 	blcc	2d0790 <__ccfg+0x2b07e8>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1f60:	010b3905 	tsteq	fp, r5, lsl #18
	word cs = size + hblenb;
    1f64:	16000013 			; <UNDEFINED> instruction: 0x16000013
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1f68:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1f6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	p -> length = size;
    1f70:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1f74:	00000b38 	andeq	r0, r0, r8, lsr fp
	if (p->attributes.b.queued) {
    1f78:	03011317 	movweq	r1, #4887	; 0x1317
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1f7c:	3a0b0b0e 	bcc	2c4bbc <__ccfg+0x2a4c14>
    1f80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1f84:	0013010b 	andseq	r0, r3, fp, lsl #2
		p->attributes.b.queued = 0;
    1f88:	00211800 	eoreq	r1, r1, r0, lsl #16
    1f8c:	0b2f1349 	bleq	bc6cb8 <__ccfg+0xba6d10>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1f90:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
	deq (p);	// Remove from queue
    1f94:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
    1f98:	3b0b3a0e 	blcc	2d07d8 <__ccfg+0x2b0830>
	tfree ((address)p);
    1f9c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa0:	1113490c 	tstne	r3, ip, lsl #18
    1fa4:	40011201 	andmi	r1, r1, r1, lsl #4
    1fa8:	0013010a 	andseq	r0, r3, sl, lsl #2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fac:	00051a00 	andeq	r1, r5, r0, lsl #20
    1fb0:	0b3a0803 	bleq	e83fc4 <__ccfg+0xe6401c>
	if (q_empty (q))
    1fb4:	0b390b3b 	bleq	e44ca8 <__ccfg+0xe24d00>
    1fb8:	06021349 	streq	r1, [r2], -r9, asr #6
		trigger (q);
    1fbc:	051b0000 	ldreq	r0, [fp, #-0]
	if (p->attributes.b.urgent) {
    1fc0:	3a080300 	bcc	202bc8 <__ccfg+0x1e2c20>
		p->u.bqueue.next = q->next;
    1fc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		p->u.bqueue.prev = q;
    1fc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		q->next->prev = (qitem_t*) p;
    1fcc:	1c00000a 	stcne	0, cr0, [r0], {10}
	p->attributes.b.queued = 1;
    1fd0:	00000018 	andeq	r0, r0, r8, lsl r0
    1fd4:	0300341d 	movweq	r3, #1053	; 0x41d
}
    1fd8:	3b0b3a0e 	blcc	2d0818 <__ccfg+0x2b0870>
		p->u.bqueue.prev = q->prev;
    1fdc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		q->prev->next = (qitem_t*) p;
    1fe0:	00060213 	andeq	r0, r6, r3, lsl r2
		q->prev = (qitem_t*) p;
    1fe4:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1fe8:	0b3a0803 	bleq	e83ffc <__ccfg+0xe64054>
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1fec:	0b390b3b 	bleq	e44ce0 <__ccfg+0xe24d38>
	deq (p);	// Soft dequeue, timer and hook left intact
    1ff0:	06021349 	streq	r1, [r2], -r9, asr #6
	switch (dv) {
    1ff4:	341f0000 	ldrcc	r0, [pc], #-0	; 1ffc <dispose+0x10>
    1ff8:	3a080300 	bcc	202c00 <__ccfg+0x1e2c58>
    1ffc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2000:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			p->attributes.b.urgent = 1;
    2004:	0000000a 	andeq	r0, r0, sl
    2008:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			verify_ses (p, "dispose ses");
    200c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2010:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2014:	10011106 	andne	r1, r1, r6, lsl #2
    2018:	02000006 	andeq	r0, r0, #6
    201c:	0b0b0024 	bleq	2c20b4 <__ccfg+0x2a210c>
			verify_phy (p, "dispose phy");
    2020:	0e030b3e 	vmoveq.16	d3[0], r0
    2024:	16030000 	strne	r0, [r3], -r0
}
    2028:	3a0e0300 	bcc	382c30 <__ccfg+0x362c88>
			enq (oqueues [p->attributes.b.phys], p);
    202c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			p->attributes.b.urgent = 1;
    2030:	0013490b 	andseq	r4, r3, fp, lsl #18
    2034:	00240400 	eoreq	r0, r4, r0, lsl #8
			verify_phy (p, "dispose phy");
    2038:	0b3e0b0b 	bleq	f84c6c <__ccfg+0xf64cc4>
    203c:	00000803 	andeq	r0, r0, r3, lsl #16
    2040:	03011305 	movweq	r1, #4869	; 0x1305
    2044:	3a0b0b0e 	bcc	2c4c84 <__ccfg+0x2a4cdc>
    2048:	010b3b0b 	tsteq	fp, fp, lsl #22
    204c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			enq (oqueues [p->attributes.b.phys], p);
    2050:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2054:	0b381349 	bleq	e06d80 <__ccfg+0xde6dd8>
}
    2058:	00000c34 	andeq	r0, r0, r4, lsr ip
			rlp (p);
    205c:	0b000f07 	bleq	5c80 <patchImageGenfsk+0x1d0>
}
    2060:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2064:	13490026 	movtne	r0, #36902	; 0x9026
    2068:	35090000 	strcc	r0, [r9, #-0]
    206c:	00134900 	andseq	r4, r3, r0, lsl #18
    2070:	01130a00 	tsteq	r3, r0, lsl #20
    2074:	0b3a0b0b 	bleq	e84ca8 <__ccfg+0xe64d00>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    2078:	0b390b3b 	bleq	e44d6c <__ccfg+0xe24dc4>
	if (b->attributes.b.outgoing) {
    207c:	00001301 	andeq	r1, r0, r1, lsl #6
	b = header (p);
    2080:	03000d0b 	movweq	r0, #3339	; 0xd0b
	if (b->attributes.b.outgoing) {
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
		verify_ses (b, "tcv02");
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    208c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2090:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2094:	0c00000b 	stceq	0, cr0, [r0], {11}
    2098:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		verify_plg (b, tcv_out, "tcv03");
    209c:	0b3b0b3a 	bleq	ec4d8c <__ccfg+0xea4de4>
    20a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    20a4:	00000b38 	andeq	r0, r0, r8, lsr fp
    20a8:	0300340d 	movweq	r3, #1037	; 0x40d
    20ac:	3b0b3a0e 	blcc	2d08ec <__ccfg+0x2b0944>
    20b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20b4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    20b8:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    20bc:	0b0b000f 	bleq	2c2100 <__ccfg+0x2a2158>
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c0:	00001349 	andeq	r1, r0, r9, asr #6
}
    20c4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c8:	00130113 	andseq	r0, r3, r3, lsl r1
		rlp (b);
    20cc:	00211000 	eoreq	r1, r1, r0
}
    20d0:	16110000 	ldrne	r0, [r1], -r0
		rlp (b);
    20d4:	3a0e0300 	bcc	382cdc <__ccfg+0x362d34>
    20d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    20e0:	01151200 	tsteq	r5, r0, lsl #4
    20e4:	13010c27 	movwne	r0, #7207	; 0x1c27
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20e8:	05130000 	ldreq	r0, [r3, #-0]
    20ec:	00134900 	andseq	r4, r3, r0, lsl #18
    20f0:	00341400 	eorseq	r1, r4, r0, lsl #8
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20f4:	0b3a0e03 	bleq	e85908 <__ccfg+0xe65960>
	va_start (ap, plid);
    20f8:	0b39053b 	bleq	e435ec <__ccfg+0xe23644>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20fc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1fe0 <enq+0x40>
    2100:	00000c3c 	andeq	r0, r0, ip, lsr ip
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2104:	0b011315 	bleq	46d60 <__ccfg+0x26db8>
    2108:	3b0b3a0b 	blcc	2d093c <__ccfg+0x2b0994>
    210c:	010b3905 	tsteq	fp, r5, lsl #18
    2110:	16000013 			; <UNDEFINED> instruction: 0x16000013
			syserror (ENODEVICE, "tcv04");
    2114:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (EMALLOC, "tcv05");
    2118:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	attp.b.outgoing = 1;
    211c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2120:	00000b38 	andeq	r0, r0, r8, lsr fp
    2124:	03011317 	movweq	r1, #4887	; 0x1317
    2128:	3a0b0b0e 	bcc	2c4d68 <__ccfg+0x2a4dc0>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    212c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (descriptors [fd] == NULL)
    2130:	0013010b 	andseq	r0, r3, fp, lsl #2
    2134:	00211800 	eoreq	r1, r1, r0, lsl #16
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2138:	0b2f1349 	bleq	bc6e64 <__ccfg+0xba6ebc>
		return ERROR;
    213c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
}
    2140:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2144:	3b0b3a0e 	blcc	2d0984 <__ccfg+0x2b09dc>
    2148:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	s->attpattern.b.session = fd;
    214c:	1113490c 	tstne	r3, ip, lsl #18
    2150:	40011201 	andmi	r1, r1, r1, lsl #4
	descriptors [fd] = s;
    2154:	0013010a 	andseq	r0, r3, sl, lsl #2
	q_init (&(s->rqueue));
    2158:	00051a00 	andeq	r1, r5, r0, lsl #20
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    215c:	0b3a0803 	bleq	e84170 <__ccfg+0xe641c8>
    2160:	0b390b3b 	bleq	e44e54 <__ccfg+0xe24eac>
    2164:	06021349 	streq	r1, [r2], -r9, asr #6
    2168:	051b0000 	ldreq	r0, [fp, #-0]
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    216c:	3a080300 	bcc	202d74 <__ccfg+0x1e2dcc>
    2170:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2174:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	descriptors [fd] = s;
    2178:	1c00000a 	stcne	0, cr0, [r0], {10}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    217c:	00000018 	andeq	r0, r0, r8, lsl r0
    2180:	0300341d 	movweq	r3, #1053	; 0x41d
	if (s == NULL)
    2184:	3b0b3a0e 	blcc	2d09c4 <__ccfg+0x2b0a1c>
		syserror (EMALLOC, "tcv05");
    2188:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    218c:	00060213 	andeq	r0, r6, r3, lsl r2
    2190:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2194:	0b3a0803 	bleq	e841a8 <__ccfg+0xe64200>
    2198:	0b390b3b 	bleq	e44e8c <__ccfg+0xe24ee4>
    219c:	0a021349 	beq	86ec8 <__ccfg+0x66f20>
    21a0:	01000000 	mrseq	r0, (UNDEF: 0)
    21a4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21a8:	0e030b13 	vmoveq.32	d3[0], r0
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21ac:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    21b0:	06100111 			; <UNDEFINED> instruction: 0x06100111
    21b4:	16020000 	strne	r0, [r2], -r0
	plugins [ord] = pl;
    21b8:	3a0e0300 	bcc	382dc0 <__ccfg+0x362e18>
	return 0;
    21bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return ERROR;
    21c0:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    21c4:	00240300 	eoreq	r0, r4, r0, lsl #6
    21c8:	0b3e0b0b 	bleq	f84dfc <__ccfg+0xf64e54>
	verify_fds (fd, "tcv10");
    21cc:	00000e03 	andeq	r0, r0, r3, lsl #28
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    21d0:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
	verify_fds (fd, "tcv10");
    21d4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    21d8:	13490035 	movtne	r0, #36917	; 0x9035
    21dc:	24060000 	strcs	r0, [r6], #-0
	verify_plg (b, tcv_frm, "tcv11");
    21e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	b = q_first (rq);
    21e4:	0008030b 	andeq	r0, r8, fp, lsl #6
	if (q_end (b, rq)) {
    21e8:	00160700 	andseq	r0, r6, r0, lsl #14
		if (state != WNONE) {
    21ec:	0b3a0e03 	bleq	e85a00 <__ccfg+0xe65a58>
    21f0:	0b39053b 	bleq	e436e4 <__ccfg+0xe2373c>
			when (rq, state);
    21f4:	00001349 	andeq	r1, r0, r9, asr #6
			release;
    21f8:	0b011708 	bleq	47e20 <__ccfg+0x27e78>
	deq (b);	// Dequeue the packet ...
    21fc:	3b0b3a0b 	blcc	2d0a30 <__ccfg+0x2b0a88>
    2200:	010b390b 	tsteq	fp, fp, lsl #18
	p = ((address)(b + 1));
    2204:	09000013 	stmdbeq	r0, {r0, r1, r4}
	verify_plg (b, tcv_frm, "tcv11");
    2208:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    220c:	0b3b0b3a 	bleq	ec4efc <__ccfg+0xea4f54>
    2210:	13490b39 	movtne	r0, #39737	; 0x9b39
    2214:	010a0000 	mrseq	r0, (UNDEF: 10)
    2218:	01134901 	tsteq	r3, r1, lsl #18
    221c:	0b000013 	bleq	2270 <tcv_wnps+0x24>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2220:	13490021 	movtne	r0, #36897	; 0x9021
    2224:	00000b2f 	andeq	r0, r0, pc, lsr #22
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2228:	0b01130c 	bleq	46e60 <__ccfg+0x26eb8>
    222c:	3b0b3a0b 	blcc	2d0a60 <__ccfg+0x2b0ab8>
	b->u.pointers.tail =
    2230:	010b390b 	tsteq	fp, fp, lsl #18
}
    2234:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
		return NULL;
    2238:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    223c:	0b3b0b3a 	bleq	ec4f2c <__ccfg+0xea4f84>
    2240:	13490b39 	movtne	r0, #39737	; 0x9b39
    2244:	00000b38 	andeq	r0, r0, r8, lsr fp
    2248:	0b000f0e 	bleq	5e88 <__exidx_end+0x108>
	verify_fds (fd, "tcv16");
    224c:	0f00000b 	svceq	0x0000000b
								Boolean urg) {
    2250:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2254:	0b3a0b0b 	bleq	e84e88 <__ccfg+0xe64ee0>
	verify_fds (fd, "tcv16");
    2258:	0b390b3b 	bleq	e44f4c <__ccfg+0xe24fa4>
    225c:	00001301 	andeq	r1, r0, r1, lsl #6
    2260:	03000d10 	movweq	r0, #3344	; 0xd10
	verify_pld (s, tcv_frm, "tcv17");
    2264:	3b0b3a08 	blcc	2d0a8c <__ccfg+0x2b0ae4>
    2268:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    226c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2270:	000f1100 	andeq	r1, pc, r0, lsl #2
    2274:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2278:	13120000 	tstne	r2, #0
    227c:	0b0e0301 	bleq	382e88 <__ccfg+0x362ee0>
    2280:	3b0b3a05 	blcc	2d0a9c <__ccfg+0x2b0af4>
	ptrs.head = (word) fd;
    2284:	010b390b 	tsteq	fp, fp, lsl #18
	ptrs.tail = (word) urg;
    2288:	13000013 	movwne	r0, #19
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    228c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2290:	0b3b0b3a 	bleq	ec4f80 <__ccfg+0xea4fd8>
		if (state != WNONE) {
    2294:	13490b39 	movtne	r0, #39737	; 0x9b39
    2298:	00000538 	andeq	r0, r0, r8, lsr r5
}
    229c:	27001514 	smladcs	r0, r4, r5, r1
			when (eid, state);
    22a0:	1500000c 	strne	r0, [r0, #-12]
    22a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			release;
    22a8:	13011349 	movwne	r1, #4937	; 0x1349
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    22ac:	05160000 	ldreq	r0, [r6, #-0]
    22b0:	00134900 	andseq	r4, r3, r0, lsl #18
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    22b4:	01131700 	tsteq	r3, r0, lsl #14
    22b8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    22bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22c0:	13010b39 	movwne	r0, #6969	; 0x1b39
    22c4:	0d180000 	ldceq	0, cr0, [r8, #-0]
    22c8:	3a0e0300 	bcc	382ed0 <__ccfg+0x362f28>
		if (state != WNONE) {
    22cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22d0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			tmwait (state);
    22d4:	1900000b 	stmdbne	r0, {r0, r1, r3}
    22d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	b->attributes = s->attpattern;
    22dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		b->attributes.b.urgent = 1;
    22e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    22e4:	00000538 	andeq	r0, r0, r8, lsr r5
	b->u.pointers.head = ptrs.head;
    22e8:	0301131a 	movweq	r1, #4890	; 0x131a
	b->u.pointers.tail = length;
    22ec:	3a0b0b0e 	bcc	2c4f2c <__ccfg+0x2a4f84>
	return (address) (b + 1);
    22f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    22f8:	01131b00 	tsteq	r3, r0, lsl #22
    22fc:	0b3a0b0b 	bleq	e84f30 <__ccfg+0xe64f88>
    2300:	0b39053b 	bleq	e437f4 <__ccfg+0xe2384c>
    2304:	00001301 	andeq	r1, r0, r1, lsl #6
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2308:	0b01171c 	bleq	47f80 <__ccfg+0x27fd8>
    230c:	3b0b3a0b 	blcc	2d0b40 <__ccfg+0x2b0b98>
    2310:	010b3905 	tsteq	fp, r5, lsl #18
	verify_fph (phy, "tcv23");
    2314:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    2318:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    231c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2320:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2324:	131e0000 	tstne	lr, #0
	return (physical [phy]) (opt, arg);
    2328:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    232c:	1f00000c 	svcne	0x0000000c
    2330:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2334:	00001301 	andeq	r1, r0, r1, lsl #6
	if (opt < 0) {
    2338:	03003420 	movweq	r3, #1056	; 0x420
		if (fd < 0)
    233c:	3b0b3a0e 	blcc	2d0b7c <__ccfg+0x2b0bd4>
		if (opt == PHYSOPT_PLUGINFO) {
    2340:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (fd >= TCV_MAX_PLUGS)
    2344:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			if ((p = plugins [fd]) == NULL)
    2348:	2100000c 	tstcs	r0, ip
    234c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    2350:	0b3b0b3a 	bleq	ec5040 <__ccfg+0xea5098>
		if (fd >= TCV_MAX_PHYS)
    2354:	13490b39 	movtne	r0, #39737	; 0x9b39
		return physinfo [fd];
    2358:	0b0d0b0b 	bleq	344f8c <__ccfg+0x324fe4>
    235c:	0b380b0c 	bleq	e04f94 <__ccfg+0xde4fec>
	verify_fds (fd, "tcv22");
    2360:	0d220000 	stceq	0, cr0, [r2, #-0]
    2364:	3a0e0300 	bcc	382f6c <__ccfg+0x362fc4>
    2368:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    236c:	0b13490b 	bleq	4d47a0 <__ccfg+0x4b47f8>
    2370:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
}
    2374:	000b380b 	andeq	r3, fp, fp, lsl #16
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2378:	00342300 	eorseq	r2, r4, r0, lsl #6
    237c:	0b3a0e03 	bleq	e85b90 <__ccfg+0xe65be8>
			return 0;
    2380:	0b390b3b 	bleq	e45074 <__ccfg+0xe250cc>
    2384:	0a021349 	beq	870b0 <__ccfg+0x67108>
    2388:	21240000 			; <UNDEFINED> instruction: 0x21240000
    238c:	2f134900 	svccs	0x00134900
    2390:	25000005 	strcs	r0, [r0, #-5]
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2394:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2398:	0b3b0b3a 	bleq	ec5088 <__ccfg+0xea50e0>
	if (dsp != TCV_DSP_PASS) {
    239c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (ses == NONE)
    23a0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			syserror (EREQPAR, "tcv26");
    23a4:	21260000 			; <UNDEFINED> instruction: 0x21260000
		verify_fds (ses, "tcv27");
    23a8:	27000000 	strcs	r0, [r0, -r0]
    23ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    23b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    23b8:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
		if ((p = apb (size)) != NULL) {
    23bc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    23c0:	3b0b3a0e 	blcc	2d0c00 <__ccfg+0x2b0c58>
		return NULL;
    23c4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			p->attributes = descriptors [ses] -> attpattern;
    23c8:	1201110c 	andne	r1, r1, #12, 2
			dispose (p, dsp);
    23cc:	010a4001 	tsteq	sl, r1
			p->attributes = descriptors [ses] -> attpattern;
    23d0:	29000013 	stmdbcs	r0, {r0, r1, r4}
			p->attributes.b.outgoing = 0;
    23d4:	08030005 	stmdaeq	r3, {r0, r2}
			dispose (p, dsp);
    23d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			return (address)(p + 1);
    23dc:	13490b39 	movtne	r0, #39737	; 0x9b39
    23e0:	00000602 	andeq	r0, r0, r2, lsl #12
	if ((p = apb (size)) != NULL)
    23e4:	31011d2a 	tstcc	r1, sl, lsr #26
    23e8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		return (address)(p + 1);
    23ec:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    23f0:	010b5705 	tsteq	fp, r5, lsl #14
    23f4:	2b000013 	blcs	2448 <tcvphy_reg+0x4c>
    23f8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    23fc:	342c0000 	strtcc	r0, [ip], #-0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2400:	00133100 	andseq	r3, r3, r0, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2404:	00342d00 	eorseq	r2, r4, r0, lsl #26
    2408:	06021331 			; <UNDEFINED> instruction: 0x06021331
		syserror (EREQPAR, "tcv28");
    240c:	1d2e0000 	stcne	0, cr0, [lr, #-0]
		syserror (EMALLOC, "tcv29");
    2410:	52133100 	andspl	r3, r3, #0, 2
	physical [phy] = ps;
    2414:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	physinfo [phy] = info;
    2418:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    241c:	2f00000b 	svccs	0x0000000b
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2420:	0e03012e 	adfeqsp	f0, f3, #0.5
    2424:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2428:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		syserror (EMALLOC, "tcv29");
    242c:	01111349 	tsteq	r1, r9, asr #6
    2430:	0a400112 	beq	1002880 <__ccfg+0xfe28d8>
	q_init (q);
    2434:	00001301 	andeq	r1, r0, r1, lsl #6
}
    2438:	03003430 	movweq	r3, #1072	; 0x430
    243c:	3b0b3a08 	blcc	2d0c64 <__ccfg+0x2b0cbc>
    2440:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2444:	00060213 	andeq	r0, r6, r3, lsl r2
    2448:	000a3100 	andeq	r3, sl, r0, lsl #2
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    244c:	0b3a0e03 	bleq	e85c60 <__ccfg+0xe65cb8>
	verify_fph (phy, "tcv30");
    2450:	0b39053b 	bleq	e43944 <__ccfg+0xe2399c>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2454:	00000111 	andeq	r0, r0, r1, lsl r1
    2458:	11010b32 	tstne	r1, r2, lsr fp
	verify_fph (phy, "tcv30");
    245c:	00011201 	andeq	r1, r1, r1, lsl #4
    2460:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    2464:	0b3a0e03 	bleq	e85c78 <__ccfg+0xe65cd0>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2468:	0b39053b 	bleq	e4395c <__ccfg+0xe239b4>
    246c:	13010b20 	movwne	r0, #6944	; 0x1b20
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2470:	34340000 	ldrtcc	r0, [r4], #-0
    2474:	3a080300 	bcc	20307c <__ccfg+0x1e30d4>
		if (plugins [plg] == NULL)
    2478:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    247c:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2480:	00053500 	andeq	r3, r5, r0, lsl #10
}
    2484:	0b3a0e03 	bleq	e85c98 <__ccfg+0xe65cf0>
    2488:	0b39053b 	bleq	e4397c <__ccfg+0xe239d4>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    248c:	06021349 	streq	r1, [r2], -r9, asr #6
    2490:	1d360000 	ldcne	0, cr0, [r6, #-0]
    2494:	11133100 	tstne	r3, r0, lsl #2
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2498:	58011201 	stmdapl	r1, {r0, r9, ip}
    249c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    24a0:	3700000b 	strcc	r0, [r0, -fp]
    24a4:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    24a8:	00001301 	andeq	r1, r0, r1, lsl #6
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    24ac:	31011d38 	tstcc	r1, r8, lsr sp
	len -= (ap.head + ap.tail);
    24b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    24b4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    24b8:	010b5705 	tsteq	fp, r5, lsl #14
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    24bc:	39000013 	stmdbcc	r0, {r0, r1, r4}
    24c0:	13310005 	teqne	r1, #5
    24c4:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    24c8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    24cc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    24d0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	return 1;
    24d4:	3b00000b 	blcc	2508 <tcvphy_get+0x20>
    24d8:	0e03012e 	adfeqsp	f0, f3, #0.5
    24dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    24e0:	01110b39 	tsteq	r1, r9, lsr fp
    24e4:	0a400112 	beq	1002934 <__ccfg+0xfe298c>
	verify_fph (phy, "tcv32");
    24e8:	00001301 	andeq	r1, r0, r1, lsl #6
    24ec:	03002e3c 	movweq	r2, #3644	; 0xe3c
    24f0:	3b0b3a0e 	blcc	2d0d30 <__ccfg+0x2b0d88>
    24f4:	200b3905 	andcs	r3, fp, r5, lsl #18
    24f8:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    24fc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	oq = oqueues [phy];
    2500:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	b = q_first (oq);
    2504:	01110b39 	tsteq	r1, r9, lsr fp
	if (q_end (b, oq)) {
    2508:	0a400112 	beq	1002958 <__ccfg+0xfe29b0>
	*len = b->length;
    250c:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
	deq (b);	// Dequeue the packet ...
    2510:	3a0e0300 	bcc	383118 <__ccfg+0x363170>
}
    2514:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return NULL;
    2518:	000b200b 	andeq	r2, fp, fp
    251c:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
    2520:	0b3a0e03 	bleq	e85d34 <__ccfg+0xe65d8c>
    2524:	0b390b3b 	bleq	e45218 <__ccfg+0xe25270>
	verify_fph (phy, "tcv33");
    2528:	0b200c27 	bleq	8055cc <__ccfg+0x7e5624>
    252c:	00001301 	andeq	r1, r0, r1, lsl #6
    2530:	03000540 	movweq	r0, #1344	; 0x540
    2534:	3b0b3a08 	blcc	2d0d5c <__ccfg+0x2b0db4>
    2538:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    253c:	41000013 	tstmi	r0, r3, lsl r0
	oq = oqueues [phy];
    2540:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	b = q_first (oq);
    2544:	0b3b0b3a 	bleq	ec5234 <__ccfg+0xea528c>
		return NULL;
    2548:	13490b39 	movtne	r0, #39737	; 0x9b39
	return (address)(b + 1);
    254c:	34420000 	strbcc	r0, [r2], #-0
}
    2550:	3a080300 	bcc	203158 <__ccfg+0x1e31b0>
    2554:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2558:	0013490b 	andseq	r4, r3, fp, lsl #18
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    255c:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
	verify_plg (b, tcv_xmt, "tcv34");
    2560:	0b3a0e03 	bleq	e85d74 <__ccfg+0xe65dcc>
	hblock_t *b = header (pkt);
    2564:	0b39053b 	bleq	e43a58 <__ccfg+0xe23ab0>
	verify_plg (b, tcv_xmt, "tcv34");
    2568:	0b200c27 	bleq	80560c <__ccfg+0x7e5664>
    256c:	00001301 	andeq	r1, r0, r1, lsl #6
    2570:	03000544 	movweq	r0, #1348	; 0x544
    2574:	3b0b3a0e 	blcc	2d0db4 <__ccfg+0x2b0e0c>
    2578:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    257c:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
    2580:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	dispose (b, plugins [b->attributes.b.plugin] ->
    2584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    2588:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	dispose (b, plugins [b->attributes.b.plugin] ->
    258c:	00000b20 	andeq	r0, r0, r0, lsr #22
    2590:	03002e46 	movweq	r2, #3654	; 0xe46
    2594:	3b0b3a0e 	blcc	2d0dd4 <__ccfg+0x2b0e2c>
}
    2598:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    while(1)
    259c:	000b200c 	andeq	r2, fp, ip
{
    25a0:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
    SetupTrimDevice();
    25a4:	01111331 	tsteq	r1, r1, lsr r3
    pui32Src = &_etext;
    25a8:	0a400112 	beq	10029f8 <__ccfg+0xfe2a50>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    25ac:	00001301 	andeq	r1, r0, r1, lsl #6
    __asm("    ldr     r0, =_bss\n"
    25b0:	31000548 	tstcc	r0, r8, asr #10
    25b4:	00060213 	andeq	r0, r6, r3, lsl r2
    25b8:	011d4900 	tsteq	sp, r0, lsl #18
    25bc:	01111331 	tsteq	r1, r1, lsr r3
    25c0:	0b580112 	bleq	1602a10 <__ccfg+0x15e2a68>
   main();
    25c4:	0b570b59 	bleq	15c5330 <__ccfg+0x15a5388>
    FaultISR();
    25c8:	1d4a0000 	stclne	0, cr0, [sl, #-0]
        *pui32Dest++ = *pui32Src++;
    25cc:	11133101 	tstne	r3, r1, lsl #2
    25d0:	58011201 	stmdapl	r1, {r0, r9, ip}
    25d4:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    25d8:	4b00000b 	blmi	260c <get_byte+0x20>
    25dc:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    25e0:	01120111 	tsteq	r2, r1, lsl r1
    25e4:	00000a40 	andeq	r0, r0, r0, asr #20
    25e8:	3100344c 	tstcc	r0, ip, asr #8
static byte get_byte () {
    25ec:	00061c13 	andeq	r1, r6, r3, lsl ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25f0:	11010000 	mrsne	r0, (UNDEF: 1)
    25f4:	130e2501 	movwne	r2, #58625	; 0xe501
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25f8:	1b0e030b 	blne	38322c <__ccfg+0x363284>
    25fc:	1106550e 	tstne	r6, lr, lsl #10
		if (ee_inp)
    2600:	00061001 	andeq	r1, r6, r1
			b |= 1;
    2604:	00240200 	eoreq	r0, r4, r0, lsl #4
    2608:	0b3e0b0b 	bleq	f8523c <__ccfg+0xf65294>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    260c:	00000e03 	andeq	r0, r0, r3, lsl #28
	for (b = 0, i = 0; i < 8; i++) {
    2610:	03001603 	movweq	r1, #1539	; 0x603
}
    2614:	3b0b3a0e 	blcc	2d0e54 <__ccfg+0x2b0eac>
    2618:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    261c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
static void put_byte (byte b) {
    2620:	0b0b0024 	bleq	2c26b8 <__ccfg+0x2a2710>
    2624:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2628:	13050000 	movwne	r0, #20480	; 0x5000
    262c:	0b0e0301 	bleq	383238 <__ccfg+0x363290>
		if (b & 0x80)
    2630:	3b0b3a0b 	blcc	2d0e64 <__ccfg+0x2b0ebc>
    2634:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2638:	000d0600 	andeq	r0, sp, r0, lsl #12
	for (i = 0; i < 8; i++) {
    263c:	13490e03 	movtne	r0, #40451	; 0x9e03
		b <<= 1;
    2640:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
	for (i = 0; i < 8; i++) {
    2644:	0f070000 	svceq	0x00070000
}
    2648:	000b0b00 	andeq	r0, fp, r0, lsl #22
    264c:	00260800 	eoreq	r0, r6, r0, lsl #16
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2650:	00001349 	andeq	r1, r0, r9, asr #6
    2654:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	put_byte (cmd);
    2658:	0a000013 	beq	26ac <wwait+0x44>
    265c:	0b0b000f 	bleq	2c26a0 <__ccfg+0x2a26f8>
}
    2660:	00001349 	andeq	r1, r0, r9, asr #6
    2664:	0b01130b 	bleq	47298 <__ccfg+0x272f0>
static void wwait (word st, word del) {
    2668:	3b0b3a0b 	blcc	2d0e9c <__ccfg+0x2b0ef4>
    266c:	010b390b 	tsteq	fp, fp, lsl #18
    2670:	0c000013 	stceq	0, cr0, [r0], {19}
	while (dopen && (rdsr () & 1)) {
    2674:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2680:	0b0d0b0b 	bleq	3452b4 <__ccfg+0x32530c>
	put_byte (CMD_RDSR);
    2684:	0b380b0c 	bleq	e052bc <__ccfg+0xde5314>
	r = get_byte ();
    2688:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    268c:	3a0e0300 	bcc	383294 <__ccfg+0x3632ec>
	while (dopen && (rdsr () & 1)) {
    2690:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    2694:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		if (st == WNONE)
    2698:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    269c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			mdelay (1);
    26a0:	0b3b0b3a 	bleq	ec5390 <__ccfg+0xea53e8>
    26a4:	13490b39 	movtne	r0, #39737	; 0x9b39
			delay (del, st);
    26a8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    26ac:	010f0000 	mrseq	r0, CPSR
			release;
    26b0:	01134901 	tsteq	r3, r1, lsl #18
    26b4:	10000013 	andne	r0, r0, r3, lsl r0
    26b8:	00000021 	andeq	r0, r0, r1, lsr #32
static void ready () {
    26bc:	03001611 	movweq	r1, #1553	; 0x611
	if (dopen) {
    26c0:	3b0b3a0e 	blcc	2d0f00 <__ccfg+0x2b0f58>
		wwait (WNONE, 1);
    26c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    26c8:	12000013 	andne	r0, r0, #19
    26cc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	dstat = 0;
    26d0:	00001301 	andeq	r1, r0, r1, lsl #6
}
    26d4:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    26d8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    26dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	udelay (1);
    26e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26e4:	13490b39 	movtne	r0, #39737	; 0x9b39
	udelay (1);
    26e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		dopen = DOPEN_TEMP;
    26ec:	15150000 	ldrne	r0, [r5, #-0]
    26f0:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    26f4:	00130113 	andseq	r0, r3, r3, lsl r1
    26f8:	01131600 	tsteq	r3, r0, lsl #12
static void cclose () {
    26fc:	0b3a0b0b 	bleq	e85330 <__ccfg+0xe65388>
	if (dopen == DOPEN_TEMP) {
    2700:	0b39053b 	bleq	e43bf4 <__ccfg+0xe23c4c>
    2704:	00001301 	andeq	r1, r0, r1, lsl #6
		wwait (WNONE, 1);
    2708:	03000d17 	movweq	r0, #3351	; 0xd17
    270c:	3b0b3a0e 	blcc	2d0f4c <__ccfg+0x2b0fa4>
	cmd_0 (CMD_DP);
    2710:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2714:	000b3813 	andeq	r3, fp, r3, lsl r8
		dopen = 0;
    2718:	01131800 	tsteq	r3, r0, lsl #16
}
    271c:	0b0b0e03 	bleq	2c5f30 <__ccfg+0x2a5f88>
word ee_open () {
    2720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	ready ();
    2724:	13010b39 	movwne	r0, #6969	; 0x1b39
	dopen = DOPEN_PERM;
    2728:	21190000 	tstcs	r9, r0
    272c:	2f134900 	svccs	0x00134900
}
    2730:	1a00000b 	bne	2764 <ser_out+0x1c>
	if (dopen) {
    2734:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2738:	0b3b0b3a 	bleq	ec5428 <__ccfg+0xea5480>
		dopen = DOPEN_TEMP;
    273c:	13490b39 	movtne	r0, #39737	; 0x9b39
		cclose ();
    2740:	0a020c3f 	beq	85844 <__ccfg+0x6589c>
}
    2744:	341b0000 	ldrcc	r0, [fp], #-0
int ser_out (word st, const char *m) {
    2748:	3a0e0300 	bcc	383350 <__ccfg+0x3633a8>
	if ((prcs = running (__outserial)) != 0) {
    274c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2750:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2754:	1c00000a 	stcne	0, cr0, [r0], {10}
		join (prcs, st);
    2758:	0e03012e 	adfeqsp	f0, f3, #0.5
		release;
    275c:	0b3b0b3a 	bleq	ec544c <__ccfg+0xea54a4>
	if (*m)
    2760:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		prcs = strlen (m) +1;
    2764:	01111349 	tsteq	r1, r9, asr #6
    2768:	0a400112 	beq	1002bb8 <__ccfg+0xfe2c10>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    276c:	00001301 	andeq	r1, r0, r1, lsl #6
    2770:	0300051d 	movweq	r0, #1309	; 0x51d
    2774:	3b0b3a08 	blcc	2d0f9c <__ccfg+0x2b0ff4>
		umwait (st);
    2778:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    277c:	00060213 	andeq	r0, r6, r3, lsl r2
		prcs =  m [1] + 3;
    2780:	00051e00 	andeq	r1, r5, r0, lsl #28
	if (*m)
    2784:	0b3a0e03 	bleq	e85f98 <__ccfg+0xe65ff0>
		strcpy (buf, m);
    2788:	0b390b3b 	bleq	e4547c <__ccfg+0xe254d4>
    278c:	0a021349 	beq	874b8 <__ccfg+0x67510>
	if (runstrand (__outserial, buf) == 0) {
    2790:	051f0000 	ldreq	r0, [pc, #-0]	; 2798 <ser_out+0x50>
    2794:	3a080300 	bcc	20339c <__ccfg+0x1e33f4>
		ufree (buf);
    2798:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    279c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		memcpy (buf, m, prcs);
    27a0:	2000000a 	andcs	r0, r0, sl
    27a4:	0e03012e 	adfeqsp	f0, f3, #0.5
    27a8:	0b3b0b3a 	bleq	ec5498 <__ccfg+0xea54f0>
}
    27ac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    27b0:	0b201349 	bleq	8074dc <__ccfg+0x7e7534>
int ser_in (word st, char *buf, int len) {
    27b4:	00001301 	andeq	r1, r0, r1, lsl #6
    27b8:	03000521 	movweq	r0, #1313	; 0x521
	if (len == 0)
    27bc:	3b0b3a08 	blcc	2d0fe4 <__ccfg+0x2b103c>
	if (__inpline == NULL) {
    27c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if ((prcs = running (__inserial)) == 0) {
    27c4:	22000013 	andcs	r0, r0, #19
    27c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			prcs = runthread (__inserial);
    27cc:	0b3b0b3a 	bleq	ec54bc <__ccfg+0xea5514>
    27d0:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (prcs == 0) {
    27d4:	34230000 	strtcc	r0, [r3], #-0
				npwait (st);
    27d8:	3a080300 	bcc	2033e0 <__ccfg+0x1e3438>
		release;
    27dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		join (prcs, st);
    27e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    27e4:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
	if (*__inpline == NULL) // bin cmd
    27e8:	01111331 	tsteq	r1, r1, lsr r3
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    27ec:	0a400112 	beq	1002c3c <__ccfg+0xfe2c94>
	if (prcs >= len)
    27f0:	05250000 	streq	r0, [r5, #-0]!
		prcs = len-1;
    27f4:	02133100 	andseq	r3, r3, #0, 2
	memcpy (buf, __inpline, prcs);
    27f8:	26000006 	strcs	r0, [r0], -r6
    27fc:	13310034 	teqne	r1, #52	; 0x34
    2800:	1d270000 	stcne	0, cr0, [r7, #-0]
	ufree (__inpline);
    2804:	11133101 	tstne	r3, r1, lsl #2
	__inpline = NULL;
    2808:	58011201 	stmdapl	r1, {r0, r9, ip}
	if (*buf) // if it's NULL, it's a bin cmd
    280c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		buf [prcs] = '\0';
    2810:	2800000b 	stmdacs	r0, {r0, r1, r3}
}
    2814:	13310005 	teqne	r1, #5
		prcs = strlen (__inpline);
    2818:	00000a02 	andeq	r0, r0, r2, lsl #20
    281c:	31000529 	tstcc	r0, r9, lsr #10
		return 0;
    2820:	00000013 	andeq	r0, r0, r3, lsl r0
    2824:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2828:	030b130e 	movweq	r1, #45838	; 0xb30e
int ser_outf (word st, const char *m, ...) {
    282c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2830:	10011106 	andne	r1, r1, r6, lsl #2
	if ((prcs = running (__outserial)) != 0) {
    2834:	02000006 	andeq	r0, r0, #6
    2838:	0b0b0024 	bleq	2c28d0 <__ccfg+0x2a2928>
		join (prcs, st);
    283c:	0e030b3e 	vmoveq.16	d3[0], r0
    2840:	16030000 	strne	r0, [r3], -r0
		release;
    2844:	3a0e0300 	bcc	38344c <__ccfg+0x3634a4>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    284c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2850:	00240400 	eoreq	r0, r4, r0, lsl #8
		umwait (st);
    2854:	0b3e0b0b 	bleq	f85488 <__ccfg+0xf654e0>
    2858:	00000803 	andeq	r0, r0, r3, lsl #16
	if (runstrand (__outserial, buf) == 0) {
    285c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2860:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2864:	13490035 	movtne	r0, #36917	; 0x9035
		ufree (buf);
    2868:	13070000 	movwne	r0, #28672	; 0x7000
		npwait (st);
    286c:	3a0b0b01 	bcc	2c5478 <__ccfg+0x2a54d0>
}
    2870:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2874:	0013010b 	andseq	r0, r3, fp, lsl #2
    2878:	000d0800 	andeq	r0, sp, r0, lsl #16
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
int ser_inf (word st, const char *fmt, ...) {
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
    2884:	0b0b1349 	bleq	2c75b0 <__ccfg+0x2a7608>
	if (fmt == NULL)
    2888:	0b0c0b0d 	bleq	3054c4 <__ccfg+0x2e551c>
	if (__inpline == NULL) {
    288c:	00000b38 	andeq	r0, r0, r8, lsr fp
		if ((prcs = running (__inserial)) == 0) {
    2890:	03000d09 	movweq	r0, #3337	; 0xd09
    2894:	3b0b3a0e 	blcc	2d10d4 <__ccfg+0x2b112c>
			prcs = runthread (__inserial);
    2898:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    289c:	000b3813 	andeq	r3, fp, r3, lsl r8
			if (prcs == 0) {
    28a0:	00340a00 	eorseq	r0, r4, r0, lsl #20
				npwait (st);
    28a4:	0b3a0e03 	bleq	e860b8 <__ccfg+0xe66110>
		release;
    28a8:	0b390b3b 	bleq	e4559c <__ccfg+0xe255f4>
		join (prcs, st);
    28ac:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2790 <ser_out+0x48>
    28b0:	00000c3c 	andeq	r0, r0, ip, lsr ip
	va_start (ap, fmt);
    28b4:	0b000f0b 	bleq	64e8 <__exidx_end+0x768>
	prcs = vscan (__inpline, fmt, ap);
    28b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    28bc:	01010c00 	tsteq	r1, r0, lsl #24
	ufree (__inpline);
    28c0:	13011349 	movwne	r1, #4937	; 0x1349
	__inpline = NULL;
    28c4:	210d0000 	mrscs	r0, (UNDEF: 13)
}
    28c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    28cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    28d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		return 0;
    28d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    28d8:	150f0000 	strne	r0, [pc, #-0]	; 28e0 <plugch>
    28dc:	010c2701 	tsteq	ip, r1, lsl #14
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    28e0:	10000013 	andne	r0, r0, r3, lsl r0
    28e4:	13490005 	movtne	r0, #36869	; 0x9005
    28e8:	34110000 	ldrcc	r0, [r1], #-0
	RF_cmdFs.frequency = 
    28ec:	3a0e0300 	bcc	3834f4 <__ccfg+0x36354c>
}
    28f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28f4:	3f13490b 	svccc	0x0013490b
    28f8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    28fc:	01131200 	tsteq	r3, r0, lsl #4
static int option (int opt, address val) {
    2900:	0b3a0b0b 	bleq	e85534 <__ccfg+0xe6558c>
    2904:	0b39053b 	bleq	e43df8 <__ccfg+0xe23e50>
    2908:	00001301 	andeq	r1, r0, r1, lsl #6
    290c:	03000d13 	movweq	r0, #3347	; 0xd13
    2910:	3b0b3a0e 	blcc	2d1150 <__ccfg+0x2b11a8>
    2914:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2918:	000b3813 	andeq	r3, fp, r3, lsl r8
    291c:	01131400 	tsteq	r3, r0, lsl #8
    2920:	0b0b0e03 	bleq	2c6134 <__ccfg+0x2a618c>
    2924:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2928:	13010b39 	movwne	r0, #6969	; 0x1b39
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    292c:	21150000 	tstcs	r5, r0
    2930:	2f134900 	svccs	0x00134900
			goto RVal;
    2934:	1600000b 	strne	r0, [r0], -fp
			_BIS (dstate, DSTATE_RXON);
    2938:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2888 <ser_inf+0x8>
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
	int ret = 0;
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
			p_trigger (drvprcs, qevent);
    2944:	01110c27 	tsteq	r1, r7, lsr #24
    2948:	0a400112 	beq	1002d98 <__ccfg+0xfe2df0>
    294c:	00001301 	andeq	r1, r0, r1, lsl #6
    2950:	03000517 	movweq	r0, #1303	; 0x517
    2954:	3b0b3a0e 	blcc	2d1194 <__ccfg+0x2b11ec>
    2958:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    295c:	00060213 	andeq	r0, r6, r3, lsl r2
    2960:	00341800 	eorseq	r1, r4, r0, lsl #16
    2964:	0b3a0e03 	bleq	e86178 <__ccfg+0xe661d0>
    2968:	0b390b3b 	bleq	e4565c <__ccfg+0xe256b4>
}
    296c:	06021349 	streq	r1, [r2], -r9, asr #6
			_BIC (dstate, DSTATE_RXON);
    2970:	0a190000 	beq	642978 <__ccfg+0x6229d0>
    2974:	3a0e0300 	bcc	38357c <__ccfg+0x3635d4>
			statid = (val == NULL) ? 0 : *val;
    2978:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    297c:	1a00000b 	bne	29b0 <option+0xb0>
	int ret = 0;
    2980:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
			ret = (int) statid;
    2984:	341b0000 	ldrcc	r0, [fp], #-0
	if (val != NULL)
    2988:	3a080300 	bcc	203590 <__ccfg+0x1e35e8>
		*val = ret;
    298c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			ret = rbuffl + 2;
    2990:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2994:	0000000a 	andeq	r0, r0, sl
			if (val != NULL) {
    2998:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				memcpy (val, &rxstat,
    299c:	030b130e 	movweq	r1, #45838	; 0xb30e
    29a0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				memset (&rxstat, 0, 
    29a4:	10011106 	andne	r1, r1, r6, lsl #2
    29a8:	02000006 	andeq	r0, r0, #6
			if (val == NULL)
    29ac:	0b0b0024 	bleq	2c2a44 <__ccfg+0x2a2a9c>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    29b0:	0e030b3e 	vmoveq.16	d3[0], r0
    29b4:	16030000 	strne	r0, [r3], -r0
				utimer_set (bckf_timer, *val);
    29b8:	3a0e0300 	bcc	3835c0 <__ccfg+0x363618>
    29bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29c0:	0013490b 	andseq	r4, r3, fp, lsl #18
			for (ret = 0; ret < 8; ret++)
    29c4:	00240400 	eoreq	r0, r4, r0, lsl #8
				if (RF_cmdPropRadioDivSetup.txPower
    29c8:	0b3e0b0b 	bleq	f855fc <__ccfg+0xf65654>
					== patable [ret])
    29cc:	00000803 	andeq	r0, r0, r3, lsl #16
				if (RF_cmdPropRadioDivSetup.txPower
    29d0:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
			for (ret = 0; ret < 8; ret++)
    29d4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    29d8:	13490035 	movtne	r0, #36917	; 0x9035
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29dc:	0f070000 	svceq	0x00070000
    29e0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    29e4:	08000013 	stmdaeq	r0, {r0, r1, r4}
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    29e8:	0b0b0113 	bleq	2c2e3c <__ccfg+0x2a2e94>
    29ec:	0b3b0b3a 	bleq	ec56dc <__ccfg+0xea5734>
			_BIS (dstate, DSTATE_IRST);
    29f0:	13010b39 	movwne	r0, #6969	; 0x1b39
    29f4:	0d090000 	stceq	0, cr0, [r9, #-0]
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
			ret = (int) channel;
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			goto RVal;
    2a00:	0b13490b 	bleq	4d4e34 <__ccfg+0x4b4e8c>
				(*val > 7) ? 7 : *val;
    2a04:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2a08:	000b380b 	andeq	r3, fp, fp, lsl #16
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a0c:	000d0a00 	andeq	r0, sp, r0, lsl #20
    2a10:	0b3a0e03 	bleq	e86224 <__ccfg+0xe6627c>
			plugch ();
    2a14:	0b390b3b 	bleq	e45708 <__ccfg+0xe25760>
			_BIS (dstate, DSTATE_IRST);
    2a18:	0b381349 	bleq	e07744 <__ccfg+0xde779c>
    2a1c:	340b0000 	strcc	r0, [fp], #-0
			ret = (int) vrate;
    2a20:	3a0e0300 	bcc	383628 <__ccfg+0x363680>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a28:	3f13490b 	svccc	0x0013490b
    2a2c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2a30:	01010c00 	tsteq	r1, r0, lsl #24
    2a34:	13011349 	movwne	r1, #4937	; 0x1349
    2a38:	210d0000 	mrscs	r0, (UNDEF: 13)
    2a3c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2a40:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a48:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a4c:	150f0000 	strne	r0, [pc, #-0]	; 2a54 <option+0x154>
    2a50:	010c2701 	tsteq	ip, r1, lsl #14
			syserror (EREQPAR, "cc13 op");
    2a54:	10000013 	andne	r0, r0, r3, lsl r0
    2a58:	13490005 	movtne	r0, #36869	; 0x9005
    2a5c:	34110000 	ldrcc	r0, [r1], #-0
    2a60:	3a0e0300 	bcc	383668 <__ccfg+0x3636c0>
    2a64:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a68:	3f13490b 	svccc	0x0013490b
    2a6c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2a70:	01131200 	tsteq	r3, r0, lsl #4
    2a74:	0b3a0b0b 	bleq	e856a8 <__ccfg+0xe65700>
    2a78:	0b39053b 	bleq	e43f6c <__ccfg+0xe23fc4>
    2a7c:	00001301 	andeq	r1, r0, r1, lsl #6
    2a80:	03000d13 	movweq	r0, #3347	; 0xd13
    2a84:	3b0b3a0e 	blcc	2d12c4 <__ccfg+0x2b131c>
    2a88:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2a8c:	000b3813 	andeq	r3, fp, r3, lsl r8
static void issue_cmd (lword cmd) {
    2a90:	01131400 	tsteq	r3, r0, lsl #8
    2a94:	0b0b0e03 	bleq	2c62a8 <__ccfg+0x2a6300>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a9c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2aa0:	21150000 	tstcs	r5, r0
		if (res != 0x86)
    2aa4:	2f134900 	svccs	0x00134900
			syserror (EHARDWARE, "hang ic0");
    2aa8:	1600000b 	strne	r0, [r0], -fp
    2aac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if (cnt-- == 0) {
    2ab0:	0b3b0b3a 	bleq	ec57a0 <__ccfg+0xea57f8>
			diag ("HUP %lx %lx", cmd, res);
    2ab4:	13490b39 	movtne	r0, #39737	; 0x9b39
    2ab8:	0a020c3f 	beq	85bbc <__ccfg+0x65c14>
			syserror (EHARDWARE, "hang ic0");
    2abc:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
		udelay (1);
    2ac0:	030c3f01 	movweq	r3, #52993	; 0xcf01
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2ac4:	3b0b3a0e 	blcc	2d1304 <__ccfg+0x2b135c>
}
    2ac8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2acc:	1201110c 	andne	r1, r1, #12, 2
    2ad0:	000a4001 	andeq	r4, sl, r1
    2ad4:	00051800 	andeq	r1, r5, r0, lsl #16
static void rx_de () {
    2ad8:	0b3a0e03 	bleq	e862ec <__ccfg+0xe66344>
	if ((dstate & DSTATE_RXAC) == 0)
    2adc:	0b390b3b 	bleq	e457d0 <__ccfg+0xe25828>
    2ae0:	06021349 	streq	r1, [r2], -r9, asr #6
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2ae4:	34190000 	ldrcc	r0, [r9], #-0
	_BIC (dstate, DSTATE_RXAC);
    2ae8:	3a0e0300 	bcc	3836f0 <__ccfg+0x363748>
    2aec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    2af0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2af4:	1a000006 	bne	2b14 <rf_off+0x18>
    2af8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
static void rf_off () {
    2afc:	341b0000 	ldrcc	r0, [fp], #-0
	if ((dstate & DSTATE_RFON) == 0)
    2b00:	3a080300 	bcc	203708 <__ccfg+0x1e3760>
    2b04:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	IntDisable (INT_RFC_CPE_0);
    2b08:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b0c:	0000000a 	andeq	r0, r0, sl
    2b10:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	RFCAdi3VcoLdoVoltageMode (false);
    2b14:	030b130e 	movweq	r1, #45838	; 0xb30e
	RFCSynthPowerDown ();
    2b18:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2b1c:	10011106 	andne	r1, r1, r6, lsl #2
    2b20:	02000006 	andeq	r0, r0, #6
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2b24:	0b0b0024 	bleq	2c2bbc <__ccfg+0x2a2c14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b28:	0e030b3e 	vmoveq.16	d3[0], r0
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2b2c:	16030000 	strne	r0, [r3], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2b30:	3a0e0300 	bcc	383738 <__ccfg+0x363790>
    2b34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b38:	0013490b 	andseq	r4, r3, fp, lsl #18
	_BIC (dstate, DSTATE_RFON);
    2b3c:	00240400 	eoreq	r0, r4, r0, lsl #8
    2b40:	0b3e0b0b 	bleq	f85774 <__ccfg+0xf657cc>
}
    2b44:	00000803 	andeq	r0, r0, r3, lsl #16
    2b48:	03011305 	movweq	r1, #4869	; 0x1305
    2b4c:	3a0b0b0e 	bcc	2c578c <__ccfg+0x2a57e4>
    2b50:	010b3b0b 	tsteq	fp, fp, lsl #22
    2b54:	06000013 			; <UNDEFINED> instruction: 0x06000013
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2b58:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2b5c:	0b381349 	bleq	e07888 <__ccfg+0xde78e0>
    2b60:	00000c34 	andeq	r0, r0, r4, lsr ip
		if (cmd->status == tstat)
    2b64:	0b000f07 	bleq	6788 <__exidx_end+0xa08>
		if (timeout-- == 0) {
    2b68:	0800000b 	stmdaeq	r0, {r0, r1, r3}
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2b6c:	13490026 	movtne	r0, #36902	; 0x9026
    2b70:	35090000 	strcc	r0, [r9, #-0]
    2b74:	00134900 	andseq	r4, r3, r0, lsl #18
			syserror (EHARDWARE, "rt2");
    2b78:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2b7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		udelay (1);
    2b80:	130b0000 	movwne	r0, #45056	; 0xb000
		if (cmd->status == tstat)
    2b84:	3a0b0b01 	bcc	2c5790 <__ccfg+0x2a57e8>
}
    2b88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b8c:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2b90:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
static void rf_on () {
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
    2b9c:	0b0b1349 	bleq	2c78c8 <__ccfg+0x2a7920>
	OSCHF_TurnOnXosc();
    2ba0:	0b0c0b0d 	bleq	3057dc <__ccfg+0x2e5834>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2ba4:	00000b38 	andeq	r0, r0, r8, lsr fp
    2ba8:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2bac:	3b0b3a0e 	blcc	2d13ec <__ccfg+0x2b1444>
    2bb0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb4:	000b3813 	andeq	r3, fp, r3, lsl r8
    2bb8:	00340e00 	eorseq	r0, r4, r0, lsl #28
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bbc:	0b3a0e03 	bleq	e863d0 <__ccfg+0xe66428>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2bc0:	0b390b3b 	bleq	e458b4 <__ccfg+0xe2590c>
	issue_cmd (
    2bc4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2aa8 <issue_cmd+0x18>
    2bc8:	00000c3c 	andeq	r0, r0, ip, lsr ip
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2bcc:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2bd0:	00130113 	andseq	r0, r3, r3, lsl r1
    2bd4:	00211000 	eoreq	r1, r1, r0
   pPatchTab[80] = 0;
    2bd8:	16110000 	ldrne	r0, [r1], -r0
   } while (--nIterations);
    2bdc:	3a0e0300 	bcc	3837e4 <__ccfg+0x36383c>
   pPatchTab[53] = 2;
    2be0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2be4:	0013490b 	andseq	r4, r3, fp, lsl #18
   pPatchTab[55] = 3;
    2be8:	01151200 	tsteq	r5, r0, lsl #4
   pPatchTab[110] = 4;
    2bec:	13010c27 	movwne	r0, #7207	; 0x1c27
   pPatchTab[107] = 5;
    2bf0:	05130000 	ldreq	r0, [r3, #-0]
   pPatchTab[65] = 6;
    2bf4:	00134900 	andseq	r4, r3, r0, lsl #18
    2bf8:	00341400 	eorseq	r1, r4, r0, lsl #8
   pPatchTab[57] = 1;
    2bfc:	0b3a0e03 	bleq	e86410 <__ccfg+0xe66468>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2c00:	0b39053b 	bleq	e440f4 <__ccfg+0xe2414c>
   const uint32_t *pS = patchGenfskRfe;
    2c04:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2ae8 <rx_de+0x10>
      t2 = *pS++;
    2c08:	00000c3c 	andeq	r0, r0, ip, lsr ip
      t4 = *pS++;
    2c0c:	0b011315 	bleq	47868 <__ccfg+0x278c0>
      t6 = *pS++;
    2c10:	3b0b3a0b 	blcc	2d1444 <__ccfg+0x2b149c>
      t8 = *pS++;
    2c14:	010b3905 	tsteq	fp, r5, lsl #18
      *pD++ = t1;
    2c18:	16000013 			; <UNDEFINED> instruction: 0x16000013
      *pD++ = t2;
    2c1c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      *pD++ = t3;
    2c20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      *pD++ = t5;
    2c24:	13490b39 	movtne	r0, #39737	; 0x9b39
      *pD++ = t7;
    2c28:	00000b38 	andeq	r0, r0, r8, lsr fp
   } while (--nIterations);
    2c2c:	03011317 	movweq	r1, #4887	; 0x1317
    2c30:	3a0b0b0e 	bcc	2c5870 <__ccfg+0x2a58c8>
      *pD++ = t8;
    2c34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
   } while (--nIterations);
    2c38:	0013010b 	andseq	r0, r3, fp, lsl #2
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2c3c:	00211800 	eoreq	r1, r1, r0, lsl #16
   *pD++ = t2;
    2c40:	0b2f1349 	bleq	bc796c <__ccfg+0xba79c4>
   *pD++ = t3;
    2c44:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
   *pD++ = t4;
    2c48:	030c3f01 	movweq	r3, #52993	; 0xcf01
   *pD++ = t5;
    2c4c:	3b0b3a0e 	blcc	2d148c <__ccfg+0x2b14e4>
    2c50:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	RFCAdi3VcoLdoVoltageMode (true);
    2c54:	1113490c 	tstne	r3, ip, lsl #18
    2c58:	40011201 	andmi	r1, r1, r1, lsl #4
       	RFCRfTrimSet (&rfTrim);
    2c5c:	0013010a 	andseq	r0, r3, sl, lsl #2
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2c60:	00051a00 	andeq	r1, r5, r0, lsl #20
    2c64:	0b3a0803 	bleq	e84c78 <__ccfg+0xe64cd0>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2c68:	0b390b3b 	bleq	e4595c <__ccfg+0xe259b4>
    2c6c:	06021349 	streq	r1, [r2], -r9, asr #6
	issue_cmd ((lword)&cmd_srt);
    2c70:	341b0000 	ldrcc	r0, [fp], #-0
    2c74:	3a080300 	bcc	20387c <__ccfg+0x1e38d4>
	issue_cmd ((lword)&RF_cmdFs);
    2c78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2c7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c80:	1c000006 	stcne	0, cr0, [r0], {6}
    2c84:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	IntEnable (INT_RFC_CPE_0);
    2c88:	0b3b0b3a 	bleq	ec5978 <__ccfg+0xea59d0>
	_BIC (dstate, DSTATE_IRST);
    2c8c:	01110b39 	tsteq	r1, r9, lsr fp
    2c90:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    2c94:	030c3f01 	movweq	r3, #52993	; 0xcf01
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2c98:	3b0b3a0e 	blcc	2d14d8 <__ccfg+0x2b1530>
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2c9c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	IntEnable (INT_RFC_CPE_0);
    2ca0:	1113490c 	tstne	r3, ip, lsl #18
    2ca4:	40011201 	andmi	r1, r1, r1, lsl #4
}
    2ca8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
	IntEnable (INT_RFC_CPE_0);
    2cac:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2cb0:	0b3b0b3a 	bleq	ec59a0 <__ccfg+0xea59f8>
    2cb4:	13490b39 	movtne	r0, #39737	; 0x9b39
    2cb8:	00000a02 	andeq	r0, r0, r2, lsl #20
    2cbc:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    2cc0:	3b0b3a0e 	blcc	2d1500 <__ccfg+0x2b1558>
    2cc4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2cc8:	1201110c 	andne	r1, r1, #12, 2
    2ccc:	480a4001 	stmdami	sl, {r0, lr}
    2cd0:	0013010a 	andseq	r0, r3, sl, lsl #2
    2cd4:	00052000 	andeq	r2, r5, r0
    2cd8:	0b3a0803 	bleq	e84cec <__ccfg+0xe64d44>
    2cdc:	0b390b3b 	bleq	e459d0 <__ccfg+0xe25a28>
    2ce0:	0a021349 	beq	87a0c <__ccfg+0x67a64>
    2ce4:	0a210000 	beq	842cec <__ccfg+0x822d44>
    2ce8:	3a080300 	bcc	2038f0 <__ccfg+0x1e3948>
    2cec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cf0:	0001110b 	andeq	r1, r1, fp, lsl #2
    2cf4:	010b2200 	mrseq	r2, R11_fiq
    2cf8:	13010655 	movwne	r0, #5717	; 0x1655
    2cfc:	34230000 	strtcc	r0, [r3], #-0
    2d00:	3a080300 	bcc	203908 <__ccfg+0x1e3960>
    2d04:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d08:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d0c:	010b2400 	tsteq	fp, r0, lsl #8
static void rx_int_enable () {
    2d10:	01120111 	tsteq	r2, r1, lsl r1
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2d14:	00001301 	andeq	r1, r0, r1, lsl #6
    2d18:	11010b25 	tstne	r1, r5, lsr #22
    2d1c:	00011201 	andeq	r1, r1, r1, lsl #4
    2d20:	11010000 	mrsne	r0, (UNDEF: 1)
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2d24:	130e2501 	movwne	r2, #58625	; 0xe501
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2d28:	1b0e030b 	blne	38395c <__ccfg+0x3639b4>
    2d2c:	1106550e 	tstne	r6, lr, lsl #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2d30:	00061001 	andeq	r1, r6, r1
    2d34:	00240200 	eoreq	r0, r4, r0, lsl #4
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d38:	0b3e0b0b 	bleq	f8596c <__ccfg+0xf659c4>
    2d3c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2d40:	03001603 	movweq	r1, #1539	; 0x603
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d44:	3b0b3a0e 	blcc	2d1584 <__ccfg+0x2b15dc>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d48:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d4c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		if (db->status == DATA_ENTRY_FINISHED) {
    2d50:	0b0b0024 	bleq	2c2de8 <__ccfg+0x2a2e40>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d54:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2d58:	13050000 	movwne	r0, #20480	; 0x5000
			nr++;
    2d5c:	0b0e0301 	bleq	383968 <__ccfg+0x3639c0>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d60:	3b0b3a0b 	blcc	2d1594 <__ccfg+0x2b15ec>
    2d64:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d68:	000d0600 	andeq	r0, sp, r0, lsl #12
    2d6c:	13490e03 	movtne	r0, #40451	; 0x9e03
				__dp [pl + 1] = __dp [pl] - 128;
    2d70:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
				pl = __dp [1] + 2;
    2d74:	0f070000 	svceq	0x00070000
				__dp [pl + 1] = __dp [pl] - 128;
    2d78:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2d7c:	00260800 	eoreq	r0, r6, r0, lsl #16
				__dp [pl] = 0;
    2d80:	00001349 	andeq	r1, r0, r9, asr #6
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d84:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2d88:	0a000013 	beq	2ddc <rx_int_enable+0xcc>
    2d8c:	0b0b000f 	bleq	2c2dd0 <__ccfg+0x2a2e28>
			db->status = DATA_ENTRY_PENDING;
    2d90:	00001349 	andeq	r1, r0, r9, asr #6
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d94:	0b01130b 	bleq	479c8 <__ccfg+0x27a20>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2d98:	3b0b3a0b 	blcc	2d15cc <__ccfg+0x2b1624>
				diag ("BAD RX");
    2d9c:	010b390b 	tsteq	fp, fp, lsl #18
    2da0:	0c000013 	stceq	0, cr0, [r0], {19}
	if (nr) {
    2da4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
}
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2db0:	0b0d0b0b 	bleq	3459e4 <__ccfg+0x325a3c>
    2db4:	0b380b0c 	bleq	e059ec <__ccfg+0xde5a44>
    2db8:	0d0d0000 	stceq	0, cr0, [sp, #-0]
}
    2dbc:	3a0e0300 	bcc	3839c4 <__ccfg+0x363a1c>
    2dc0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dc4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2dc8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2dcc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2dd0:	0b3b0b3a 	bleq	ec5ac0 <__ccfg+0xea5b18>
    2dd4:	13490b39 	movtne	r0, #39737	; 0x9b39
    2dd8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2ddc:	010f0000 	mrseq	r0, CPSR
thread (cc1350_driver)
    2de0:	01134901 	tsteq	r3, r1, lsl #18
    2de4:	10000013 	andne	r0, r0, r3, lsl r0
    2de8:	00000021 	andeq	r0, r0, r1, lsr #32
    2dec:	03001611 	movweq	r1, #1553	; 0x611
    2df0:	3b0b3a0e 	blcc	2d1630 <__ccfg+0x2b1688>
		if (dstate & DSTATE_IRST) {
    2df4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2df8:	12000013 	andne	r0, r0, #19
    2dfc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			rf_off ();
    2e00:	00001301 	andeq	r1, r0, r1, lsl #6
			_BIC (dstate,
    2e04:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2e08:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		if (dstate & DSTATE_RXAC) {
    2e0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2e10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if ((dstate & DSTATE_RXON) == 0)
    2e14:	13490b39 	movtne	r0, #39737	; 0x9b39
				rx_de ();
    2e18:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		if (paylen == 0) {
    2e1c:	13150000 	tstne	r5, #0
    2e20:	3a0b0b01 	bcc	2c5a2c <__ccfg+0x2a5a84>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2e24:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e28:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e2c:	000d1600 	andeq	r1, sp, r0, lsl #12
    2e30:	0b3a0e03 	bleq	e86644 <__ccfg+0xe6669c>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e34:	0b39053b 	bleq	e44328 <__ccfg+0xe24380>
    2e38:	0b381349 	bleq	e07b64 <__ccfg+0xde7bbc>
    2e3c:	13170000 	tstne	r7, #0
    2e40:	0b0e0301 	bleq	383a4c <__ccfg+0x363aa4>
    2e44:	3b0b3a0b 	blcc	2d1678 <__ccfg+0x2b16d0>
    2e48:	010b3905 	tsteq	fp, r5, lsl #18
    2e4c:	18000013 	stmdane	r0, {r0, r1, r4}
    2e50:	13490021 	movtne	r0, #36897	; 0x9021
		} else if (dstate & DSTATE_RXON) {
    2e54:	00000b2f 	andeq	r0, r0, pc, lsr #22
	if (dstate & DSTATE_RFON)
    2e58:	3f012e19 	svccc	0x00012e19
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2e5c:	3a0e030c 	bcc	383a94 <__ccfg+0x363aec>
		re->status = DATA_ENTRY_PENDING;
    2e60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2e64:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	issue_cmd ((lword)&RF_cmdPropRx);
    2e68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	_BIS (dstate, DSTATE_RXAC);
    2e6c:	010a4001 	tsteq	sl, r1
    2e70:	1a000013 	bne	2ec4 <cc1350_driver+0xe4>
    2e74:	08030005 	stmdaeq	r3, {r0, r2}
    2e78:	0b3b0b3a 	bleq	ec5b68 <__ccfg+0xea5bc0>
	if (dstate & DSTATE_RXAC)
    2e7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e80:	00000602 	andeq	r0, r0, r2, lsl #12
				if (statid != 0xffff)
    2e84:	0300341b 	movweq	r3, #1051	; 0x41b
    2e88:	3b0b3a08 	blcc	2d16b0 <__ccfg+0x2b1708>
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2e8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				RF_cmdPropTx.pktLen = (byte) paylen;
    2e90:	00060213 	andeq	r0, r6, r3, lsl r2
		if (paylen == 0) {
    2e94:	000a1c00 	andeq	r1, sl, r0, lsl #24
			wait (qevent, DR_LOOP);
    2e98:	0b3a0e03 	bleq	e866ac <__ccfg+0xe66704>
    2e9c:	0b390b3b 	bleq	e45b90 <__ccfg+0xe25be8>
			if (dstate & DSTATE_RXAC) {
    2ea0:	0b1d0000 	bleq	742ea8 <__ccfg+0x722f00>
    2ea4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
				rx_int_enable ();
    2ea8:	00130101 	andseq	r0, r3, r1, lsl #2
			release;
    2eac:	00341e00 	eorseq	r1, r4, r0, lsl #28
			} else if (dstate & DSTATE_RFON) {
    2eb0:	0b3a0803 	bleq	e84ec4 <__ccfg+0xe64f1c>
				delay (offdelay, DR_GOOF);
    2eb4:	0b390b3b 	bleq	e45ba8 <__ccfg+0xe25c00>
    2eb8:	0a021349 	beq	87be4 <__ccfg+0x67c3c>
    2ebc:	0b1f0000 	bleq	7c2ec4 <__ccfg+0x7a2f1c>
		if (bckf_timer) {
    2ec0:	01065501 	tsteq	r6, r1, lsl #10
			wait (qevent, DR_LOOP);
    2ec4:	20000013 	andcs	r0, r0, r3, lsl r0
    2ec8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2ecc:	0b3b0b3a 	bleq	ec5bbc <__ccfg+0xea5c14>
			delay (bckf_timer, DR_LOOP);
    2ed0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2ed4:	0b210000 	bleq	842edc <__ccfg+0x822f34>
			if (dstate & DSTATE_RXAC)
    2ed8:	00065501 	andeq	r5, r6, r1, lsl #10
    2edc:	11010000 	mrsne	r0, (UNDEF: 1)
	if (dstate & DSTATE_RFON)
    2ee0:	130e2501 	movwne	r2, #58625	; 0xe501
    2ee4:	1b0e030b 	blne	383b18 <__ccfg+0x363b70>
		rx_de ();
    2ee8:	0006100e 	andeq	r1, r6, lr
		RF_cmdPropTx . status = 0;
    2eec:	00240200 	eoreq	r0, r4, r0, lsl #4
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef0:	0b3e0b0b 	bleq	f85b24 <__ccfg+0xf65b7c>
    2ef4:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ef8:	03001603 	movweq	r1, #1539	; 0x603
		issue_cmd ((lword)&cmd_cs);
    2efc:	3b0b3a0e 	blcc	2d173c <__ccfg+0x2b1794>
		if (dstate & DSTATE_IRST)
    2f00:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f04:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2f08:	13490026 	movtne	r0, #36902	; 0x9026
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f0c:	24050000 	strcs	r0, [r5], #-0
    2f10:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			delay (1, DR_XMIT);
    2f14:	0008030b 	andeq	r0, r8, fp, lsl #6
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2f18:	00160600 	andseq	r0, r6, r0, lsl #12
    2f1c:	0b3a0e03 	bleq	e86730 <__ccfg+0xe66788>
    2f20:	0b39053b 	bleq	e44414 <__ccfg+0xe2446c>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2f24:	00001349 	andeq	r1, r0, r9, asr #6
    2f28:	0b011707 	bleq	48b4c <__ccfg+0x28ba4>
				RF_cmdPropTx . status = 0;
    2f2c:	3b0b3a0b 	blcc	2d1760 <__ccfg+0x2b17b8>
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2f30:	010b390b 	tsteq	fp, fp, lsl #18
				issue_cmd ((lword)&RF_cmdPropTx);
    2f34:	08000013 	stmdaeq	r0, {r0, r1, r4}
				proceed (DR_XMIT);
    2f38:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f3c:	0b3b0b3a 	bleq	ec5c2c <__ccfg+0xea5c84>
			txtries++;
    2f40:	13490b39 	movtne	r0, #39737	; 0x9b39
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2f44:	01090000 	mrseq	r0, (UNDEF: 9)
    2f48:	01134901 	tsteq	r3, r1, lsl #18
    2f4c:	0a000013 	beq	2fa0 <cc1350_driver+0x1c0>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f50:	13490021 	movtne	r0, #36897	; 0x9021
		goto DR_LOOP__;
    2f54:	00000b2f 	andeq	r0, r0, pc, lsr #22
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2f58:	0b01130b 	bleq	47b8c <__ccfg+0x27be4>
		paylen = 0;
    2f5c:	3b0b3a0b 	blcc	2d1790 <__ccfg+0x2b17e8>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f60:	010b390b 	tsteq	fp, fp, lsl #18
		txtries = 0;
    2f64:	0c000013 	stceq	0, cr0, [r0], {19}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f68:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f6c:	0b3b0b3a 	bleq	ec5c5c <__ccfg+0xea5cb4>
    2f70:	13490b39 	movtne	r0, #39737	; 0x9b39
    2f74:	00000b38 	andeq	r0, r0, r8, lsr fp
    2f78:	0b000f0d 	bleq	6bb4 <__exidx_end+0xe34>
		    tcvphy_top (physid) == NULL)
    2f7c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2f80:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f84:	0b3a0b0b 	bleq	e85bb8 <__ccfg+0xe65c10>
    2f88:	0b390b3b 	bleq	e45c7c <__ccfg+0xe25cd4>
			rf_off ();
    2f8c:	00001301 	andeq	r1, r0, r1, lsl #6
endthread
    2f90:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2f94:	3b0b3a08 	blcc	2d17bc <__ccfg+0x2b1814>
    2f98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f9c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2fa0:	000f1000 	andeq	r1, pc, r0
    2fa4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2fa8:	13110000 	tstne	r1, #0
    2fac:	0b0e0301 	bleq	383bb8 <__ccfg+0x363c10>
    2fb0:	3b0b3a05 	blcc	2d17cc <__ccfg+0x2b1824>
    2fb4:	010b390b 	tsteq	fp, fp, lsl #18
    2fb8:	12000013 	andne	r0, r0, #19
    2fbc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fc0:	0b3b0b3a 	bleq	ec5cb0 <__ccfg+0xea5d08>
    2fc4:	13490b39 	movtne	r0, #39737	; 0x9b39
    2fc8:	00000538 	andeq	r0, r0, r8, lsr r5
    2fcc:	27001513 	smladcs	r0, r3, r5, r1
void RFCCPE0IntHandler (void) {
    2fd0:	1400000c 	strne	r0, [r0], #-12
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2fd4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		_BIS (dstate, DSTATE_IRST);
    2fd8:	13011349 	movwne	r1, #4937	; 0x1349
    2fdc:	05150000 	ldreq	r0, [r5, #-0]
    2fe0:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2fe4:	01131600 	tsteq	r3, r0, lsl #12
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2fe8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2fec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	p_trigger (drvprcs, qevent);
    2ff0:	13010b39 	movwne	r0, #6969	; 0x1b39
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ff4:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2ff8:	3a0e0300 	bcc	383c00 <__ccfg+0x363c58>
    2ffc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3000:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3004:	1800000b 	stmdane	r0, {r0, r1, r3}
    3008:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    300c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3010:	13490b39 	movtne	r0, #39737	; 0x9b39
    3014:	00000538 	andeq	r0, r0, r8, lsr r5
    3018:	03011319 	movweq	r1, #4889	; 0x1319
	RISE_N_SHINE;
    301c:	3a0b0b0e 	bcc	2c5c5c <__ccfg+0x2a5cb4>
    3020:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3024:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    3028:	01131a00 	tsteq	r3, r0, lsl #20
    302c:	0b3a0b0b 	bleq	e85c60 <__ccfg+0xe65cb8>
    3030:	0b39053b 	bleq	e44524 <__ccfg+0xe2457c>
    3034:	00001301 	andeq	r1, r0, r1, lsl #6
    3038:	0b01171b 	bleq	48cac <__ccfg+0x28d04>
    303c:	3b0b3a0b 	blcc	2d1870 <__ccfg+0x2b18c8>
void phys_cc1350 (int phy, int mbs) {
    3040:	010b3905 	tsteq	fp, r5, lsl #18
	if (rbuffl != 0)
    3044:	1c000013 	stcne	0, cr0, [r0], {19}
    3048:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (ETOOMANY, "cc13");
    304c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		syserror (EREQPAR, "cc13 mb");
    3050:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (mbs == 0)
    3054:	131d0000 	tstne	sp, #0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    3058:	3c0e0300 	stccc	3, cr0, [lr], {-0}
		syserror (EREQPAR, "cc13 mb");
    305c:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    3060:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	i = 0;
    3064:	00001301 	andeq	r1, r0, r1, lsl #6
	rbuffl = (byte) mbs;
    3068:	0300341f 	movweq	r3, #1055	; 0x41f
		db->config.type = 0;	// General (data in structure)
    306c:	3b0b3a0e 	blcc	2d18ac <__ccfg+0x2b1904>
	rbuffl = (byte) mbs;
    3070:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    3074:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    3078:	2000000c 	andcs	r0, r0, ip
		if (db == NULL)
    307c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			syserror (EMALLOC, "cc13");
    3080:	0b3b0b3a 	bleq	ec5d70 <__ccfg+0xea5dc8>
    3084:	13490b39 	movtne	r0, #39737	; 0x9b39
    3088:	0b0d0b0b 	bleq	345cbc <__ccfg+0x325d14>
		db->status = DATA_ENTRY_PENDING;
    308c:	0b380b0c 	bleq	e05cc4 <__ccfg+0xde5d1c>
		if (i)
    3090:	0d210000 	stceq	0, cr0, [r1, #-0]
			da->pNextEntry = (byte*) db;
    3094:	3a0e0300 	bcc	383c9c <__ccfg+0x363cf4>
		db->length = rbuffl + 2;
    3098:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    309c:	0b13490b 	bleq	4d54d0 <__ccfg+0x4b5528>
		db->config.type = 0;	// General (data in structure)
    30a0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
		db->length = rbuffl + 2;
    30a4:	000b380b 	andeq	r3, fp, fp, lsl #16
	db->pNextEntry = (byte*) re;
    30a8:	00342200 	eorseq	r2, r4, r0, lsl #4
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    30ac:	0b3a0e03 	bleq	e868c0 <__ccfg+0xe66918>
    30b0:	0b390b3b 	bleq	e45da4 <__ccfg+0xe25dfc>
	if (rbuffs == NULL)
    30b4:	031c1349 	tsteq	ip, #603979777	; 0x24000001
	rbuffs->pCurrEntry = (byte*) re;
    30b8:	21230000 			; <UNDEFINED> instruction: 0x21230000
	rbuffs->pLastEntry = NULL;
    30bc:	2f134900 	svccs	0x00134900
    30c0:	24000005 	strcs	r0, [r0], #-5
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30c4:	13490035 	movtne	r0, #36917	; 0x9035
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    30c8:	34250000 	strtcc	r0, [r5], #-0
    30cc:	3a0e0300 	bcc	383cd4 <__ccfg+0x363d2c>
    30d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	rbuffl -= 2;
    30d4:	3f13490b 	svccc	0x0013490b
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30d8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	rbuffl -= 2;
    30dc:	00212600 	eoreq	r2, r1, r0, lsl #12
	physid = phy;
    30e0:	34270000 	strtcc	r0, [r7], #-0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30e4:	3a0e0300 	bcc	383cec <__ccfg+0x363d44>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30f0:	2800000a 	stmdacs	r0, {r1, r3}
    30f4:	13470034 	movtne	r0, #28724	; 0x7034
	utimer_add (&bckf_timer);
    30f8:	0b3b0b3a 	bleq	ec5de8 <__ccfg+0xea5e40>
	drvprcs = runthread (cc1350_driver);
    30fc:	0a020b39 	beq	85de8 <__ccfg+0x65e40>
    3100:	01000000 	mrseq	r0, (UNDEF: 0)
    3104:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	if (drvprcs == 0)
    3108:	0e030b13 	vmoveq.32	d3[0], r0
		syserror (ERESOURCE, "cc13");
    310c:	17550e1b 	smmlane	r5, fp, lr, r0
    3110:	17100111 			; <UNDEFINED> instruction: 0x17100111
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3114:	24020000 	strcs	r0, [r2], #-0
    3118:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    311c:	000e030b 	andeq	r0, lr, fp, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3120:	00160300 	andseq	r0, r6, r0, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3124:	0b3a0e03 	bleq	e86938 <__ccfg+0xe66990>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    312c:	24040000 	strcs	r0, [r4], #-0
    3130:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3134:	0008030b 	andeq	r0, r8, fp, lsl #6
    3138:	000f0500 	andeq	r0, pc, r0, lsl #10
    313c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3140:	15060000 	strne	r0, [r6, #-0]
    3144:	00192700 	andseq	r2, r9, r0, lsl #14
    3148:	01150700 	tsteq	r5, r0, lsl #14
	plugch ();
    314c:	13011927 	movwne	r1, #6439	; 0x1927
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3150:	05080000 	streq	r0, [r8, #-0]
    3154:	00134900 	andseq	r4, r3, r0, lsl #18
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3158:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    315c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3160:	0b3b0b3a 	bleq	ec5e50 <__ccfg+0xea5ea8>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3164:	01111927 	tsteq	r1, r7, lsr #18
}
    3168:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    316c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    3170:	0a000013 	beq	31c4 <tcv_clo_null+0x10>
    3174:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3178:	0b3b0b3a 	bleq	ec5e68 <__ccfg+0xea5ec0>
    317c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3180:	340b0000 	strcc	r0, [fp], #-0
    3184:	3a0e0300 	bcc	383d8c <__ccfg+0x363de4>
    3188:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    318c:	00170213 	andseq	r0, r7, r3, lsl r2
    3190:	82890c00 	addhi	r0, r9, #0, 24
    3194:	01110001 	tsteq	r1, r1
    3198:	00001331 	andeq	r1, r0, r1, lsr r3
    319c:	0182890d 	orreq	r8, r2, sp, lsl #18
    31a0:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    31a4:	13311942 	teqne	r1, #1081344	; 0x108000
    31a8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    31ac:	03193f01 	tsteq	r9, #1, 30
    31b0:	3b0b3a0e 	blcc	2d19f0 <__ccfg+0x2b1a48>
    31b4:	1119270b 	tstne	r9, fp, lsl #14
    31b8:	40061201 	andmi	r1, r6, r1, lsl #4
    31bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    31c0:	00001301 	andeq	r1, r0, r1, lsl #6
    31c4:	0182890f 	orreq	r8, r2, pc, lsl #18
    31c8:	01011101 	tsteq	r1, r1, lsl #2
    31cc:	10000013 	andne	r0, r0, r3, lsl r0
    31d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    31d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    31d8:	11000018 	tstne	r0, r8, lsl r0
    31dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    31e0:	0b3a0e03 	bleq	e869f4 <__ccfg+0xe66a4c>
    31e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    31e8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    31ec:	01000000 	mrseq	r0, (UNDEF: 0)
    31f0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    31f4:	0e030b13 	vmoveq.32	d3[0], r0
    31f8:	17550e1b 	smmlane	r5, fp, lr, r0
    31fc:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3200:	16020000 	strne	r0, [r2], -r0
    3204:	3a0e0300 	bcc	383e0c <__ccfg+0x363e64>
    3208:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    320c:	03000013 	movweq	r0, #19
    3210:	0b0b0024 	bleq	2c32a8 <__ccfg+0x2a3300>
    3214:	0e030b3e 	vmoveq.16	d3[0], r0
    3218:	24040000 	strcs	r0, [r4], #-0
    321c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3220:	0008030b 	andeq	r0, r8, fp, lsl #6
    3224:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3228:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    322c:	0b3b0b3a 	bleq	ec5f1c <__ccfg+0xea5f74>
    3230:	13491927 	movtne	r1, #39207	; 0x9927
    3234:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3238:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    323c:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3240:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3244:	0b3b0b3a 	bleq	ec5f34 <__ccfg+0xea5f8c>
    3248:	17021349 	strne	r1, [r2, -r9, asr #6]
    324c:	34070000 	strcc	r0, [r7], #-0
    3250:	3a0e0300 	bcc	383e58 <__ccfg+0x363eb0>
strand (__outserial, const char*)
    3254:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3258:	00180213 	andseq	r0, r8, r3, lsl r2
    325c:	11010000 	mrsne	r0, (UNDEF: 1)
    3260:	130e2501 	movwne	r2, #58625	; 0xe501
endstrand
    3264:	1b0e030b 	blne	383e98 <__ccfg+0x363ef0>
    3268:	1117550e 	tstne	r7, lr, lsl #10
	ptr = data;
    326c:	00171001 	andseq	r1, r7, r1
    3270:	00240200 	eoreq	r0, r4, r0, lsl #4
	if (*ptr)
    3274:	0b3e0b0b 	bleq	f85ea8 <__ccfg+0xf65f00>
		len = strlen (ptr);
    3278:	00000e03 	andeq	r0, r0, r3, lsl #28
    327c:	03001603 	movweq	r1, #1539	; 0x603
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3280:	3b0b3a0e 	blcc	2d1ac0 <__ccfg+0x2b1b18>
    3284:	0013490b 	andseq	r4, r3, fp, lsl #18
    3288:	00240400 	eoreq	r0, r4, r0, lsl #8
    328c:	0b3e0b0b 	bleq	f85ec0 <__ccfg+0xf65f18>
    3290:	00000803 	andeq	r0, r0, r3, lsl #16
	len -= quant;
    3294:	3f012e05 	svccc	0x00012e05
    3298:	3a0e0319 	bcc	383f04 <__ccfg+0x363f5c>
    329c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
	if (len == 0) {
    32a0:	11134919 	tstne	r3, r9, lsl r9
		ufree (data);
    32a4:	40061201 	andmi	r1, r6, r1, lsl #4
		finish;
    32a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    32ac:	00001301 	andeq	r1, r0, r1, lsl #6
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    32b0:	03003406 	movweq	r3, #1030	; 0x406
    32b4:	3b0b3a0e 	blcc	2d1af4 <__ccfg+0x2b1b4c>
    32b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32bc:	07000017 	smladeq	r0, r7, r0, r0
    32c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
strand (__inserial, address)
    32c4:	0b3b0b3a 	bleq	ec5fb4 <__ccfg+0xea600c>
    32c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    32cc:	17080000 	strne	r0, [r8, -r0]
    32d0:	3a0b0b01 	bcc	2c5edc <__ccfg+0x2a5f34>
    32d4:	010b3b0b 	tsteq	fp, fp, lsl #22
	if (__inpline != NULL)
    32d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    32dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		finish;
    32e0:	0b3b0b3a 	bleq	ec5fd0 <__ccfg+0xea6028>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    32e4:	00001349 	andeq	r1, r0, r9, asr #6
    32e8:	0300340a 	movweq	r3, #1034	; 0x40a
    32ec:	3b0b3a0e 	blcc	2d1b2c <__ccfg+0x2b1b84>
    32f0:	0013490b 	andseq	r4, r3, fp, lsl #18
		umwait (IM_INIT);
    32f4:	01010b00 	tsteq	r1, r0, lsl #22
		release;
    32f8:	13011349 	movwne	r1, #4937	; 0x1349
	savedata (data);
    32fc:	210c0000 	mrscs	r0, (UNDEF: 12)
	len = MAX_LINE_LENGTH;
    3300:	2f134900 	svccs	0x00134900
	io (IM_READ, __cport, READ, ptr, 1);
    3304:	0000000b 	andeq	r0, r0, fp
    3308:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    330c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3310:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	if (ptr == (char*) data) { // new line
    3314:	10011117 	andne	r1, r1, r7, lsl r1
    3318:	02000017 	andeq	r0, r0, #23
		if (*ptr == '\0') { // bin cmd
    331c:	0b0b0024 	bleq	2c33b4 <__ccfg+0x2a340c>
			proceed (IM_BIN);
    3320:	0e030b3e 	vmoveq.16	d3[0], r0
    3324:	16030000 	strne	r0, [r3], -r0
		if (*ptr < 0x20)
    3328:	3a0e0300 	bcc	383f30 <__ccfg+0x363f88>
    332c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			proceed (IM_READ);
    3330:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3334:	0b0b0024 	bleq	2c33cc <__ccfg+0x2a3424>
	if (*ptr == '\n' || *ptr == '\r') {
    3338:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    333c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3340:	03193f01 	tsteq	r9, #1, 30
		*ptr = '\0';
    3344:	3b0b3a0e 	blcc	2d1b84 <__ccfg+0x2b1bdc>
		__inpline = (char*)data;
    3348:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
		finish;
    334c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (len) {
    3350:	97184006 	ldrls	r4, [r8, -r6]
		ptr++;
    3354:	13011942 	movwne	r1, #6466	; 0x1942
    3358:	34060000 	strcc	r0, [r6], #-0
		len--;
    335c:	3a0e0300 	bcc	383f64 <__ccfg+0x363fbc>
	proceed (IM_READ);
    3360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	io (IM_BIN, __cport, READ, ptr, 1);
    3364:	07000013 	smladeq	r0, r3, r0, r0
    3368:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    336c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3370:	00001349 	andeq	r1, r0, r9, asr #6
    3374:	3f012e08 	svccc	0x00012e08
	len -= 2;
    3378:	3a0e0319 	bcc	383fe4 <__ccfg+0x36403c>
	if (len > *ptr + 1) // 1 for 0x04
    337c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3380:	11134919 	tstne	r3, r9, lsl r9
		len = *ptr + 1;
    3384:	40061201 	andmi	r1, r6, r1, lsl #4
    3388:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
	ptr++;
    338c:	00001301 	andeq	r1, r0, r1, lsl #6
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3390:	3f012e09 	svccc	0x00012e09
    3394:	3a0e0319 	bcc	384000 <__ccfg+0x364058>
    3398:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    339c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    33a0:	97184006 	ldrls	r4, [r8, -r6]
    33a4:	00001942 	andeq	r1, r0, r2, asr #18
	len -= quant;
    33a8:	0300050a 	movweq	r0, #1290	; 0x50a
		__inpline = (char*)data;
    33ac:	3b0b3a0e 	blcc	2d1bec <__ccfg+0x2b1c44>
		finish;
    33b0:	02134905 	andseq	r4, r3, #81920	; 0x14000
	ptr += quant;
    33b4:	00000018 	andeq	r0, r0, r8, lsl r0
    33b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
endstrand
    33bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    33c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	proceed (IM_BINL);
    33c4:	10011117 	andne	r1, r1, r7, lsl r1
endstrand
    33c8:	02000017 	andeq	r0, r0, #23
    33cc:	0b0b0024 	bleq	2c3464 <__ccfg+0x2a34bc>
    33d0:	0e030b3e 	vmoveq.16	d3[0], r0
    33d4:	16030000 	strne	r0, [r3], -r0
    33d8:	3a0e0300 	bcc	383fe0 <__ccfg+0x364038>
    33dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (res && (d < n))
    33e0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    33e4:	0b0b0024 	bleq	2c347c <__ccfg+0x2a34d4>
    33e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    33ec:	0f050000 	svceq	0x00050000
			res [d] = (char) c;
    33f0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		d++;
    33f4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    33f8:	19270015 	stmdbne	r7!, {r0, r2, r4}
    33fc:	15070000 	strne	r0, [r7, #-0]
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3400:	01192701 	tsteq	r9, r1, lsl #14
    3404:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3408:	13490005 	movtne	r0, #36869	; 0x9005
				enci (10000);
    340c:	15090000 	strne	r0, [r9, #-0]
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3410:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3414:	00130113 	andseq	r0, r3, r3, lsl r1
	d = 0;
    3418:	00150a00 	andseq	r0, r5, r0, lsl #20
		c = *fm++;
    341c:	13491927 	movtne	r1, #39207	; 0x9927
		if (c == '\\') {
    3420:	130b0000 	movwne	r0, #45056	; 0xb000
			if ((c = *fm++) == '\0') {
    3424:	3a0b0b01 	bcc	2c6030 <__ccfg+0x2a6088>
    3428:	010b3b0b 	tsteq	fp, fp, lsl #22
				outc ('\\');
    342c:	0c000013 	stceq	0, cr0, [r0], {19}
			if ((c = *fm++) == '\0') {
    3430:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				outc ('\\');
    3434:	0b3b0b3a 	bleq	ec6124 <__ccfg+0xea617c>
    3438:	0b381349 	bleq	e08164 <__ccfg+0xde81bc>
			outc (c);
    343c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3440:	03193f01 	tsteq	r9, #1, 30
			if (c == '\0')
    3444:	3b0b3a0e 	blcc	2d1c84 <__ccfg+0x2b1cdc>
    3448:	2019270b 	andscs	r2, r9, fp, lsl #14
			outc (c);
    344c:	0013010b 	andseq	r0, r3, fp, lsl #2
				outc (val);
    3450:	00050e00 	andeq	r0, r5, r0, lsl #28
				val = (word) va_arg (ap, aword);
    3454:	0b3a0e03 	bleq	e86c68 <__ccfg+0xe66cc0>
		if (c == '%') {
    3458:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    345c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
			c = *fm++;
    3460:	03193f01 	tsteq	r9, #1, 30
			switch (c) {
    3464:	3b0b3a0e 	blcc	2d1ca4 <__ccfg+0x2b1cfc>
    3468:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    346c:	010b2013 	tsteq	fp, r3, lsl r0
    3470:	10000013 	andne	r0, r0, r3, lsl r0
    3474:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3478:	0b3b0b3a 	bleq	ec6168 <__ccfg+0xea61c0>
    347c:	00001349 	andeq	r1, r0, r9, asr #6
    3480:	31012e11 	tstcc	r1, r1, lsl lr
				outc ('%');
    3484:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3488:	97184006 	ldrls	r4, [r8, -r6]
				outc (c);
    348c:	13011942 	movwne	r1, #6466	; 0x1942
    3490:	05120000 	ldreq	r0, [r2, #-0]
    3494:	02133100 	andseq	r3, r3, #0, 2
				if (c == '\0')
    3498:	13000017 	movwne	r0, #23
				return d;
    349c:	0111010b 	tsteq	r1, fp, lsl #2
}
    34a0:	13010612 	movwne	r0, #5650	; 0x1612
    34a4:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
			switch (c) {
    34a8:	11010182 	smlabbne	r1, r2, r1, r0
    34ac:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    34b0:	8a150000 	bhi	5434b8 <__ccfg+0x523510>
				for (i = 12; ; i -= 4) {
    34b4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
				val = (word) va_arg (ap, aword);
    34b8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
						[ (val >> i) & 0xf ]);
    34bc:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    34c0:	11010182 	smlabbne	r1, r2, r1, r0
    34c4:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
					outc (__pi_hex_enc_table
    34c8:	00001301 	andeq	r1, r0, r1, lsl #6
    34cc:	31003417 	tstcc	r0, r7, lsl r4
					if (i == 0)
    34d0:	00180213 	andseq	r0, r8, r3, lsl r2
    34d4:	010b1800 	tsteq	fp, r0, lsl #16
				for (i = 12; ; i -= 4) {
    34d8:	13011755 	movwne	r1, #5973	; 0x1755
				val = (word) va_arg (ap, aword);
    34dc:	05190000 	ldreq	r0, [r9, #-0]
				if (c == 'd' && (val & 0x8000) != 0) {
    34e0:	1c133100 	ldfnes	f3, [r3], {-0}
				val = (word) va_arg (ap, aword);
    34e4:	1a00000b 	bne	3518 <__pi_vfparse+0x118>
				if (c == 'd' && (val & 0x8000) != 0) {
    34e8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    34ec:	341b0000 	ldrcc	r0, [fp], #-0
					outc ('-');
    34f0:	00133100 	andseq	r3, r3, r0, lsl #2
    34f4:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
					val = (~val) + 1;
    34f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    34fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				for (i = 12; ; i -= 4) {
    3500:	13491927 	movtne	r1, #39207	; 0x9927
				enci (10000);
    3504:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3508:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    350c:	00130119 	andseq	r0, r3, r9, lsl r1
    3510:	00051d00 	andeq	r1, r5, r0, lsl #26
    3514:	0b3a0e03 	bleq	e86d28 <__ccfg+0xe66d80>
    3518:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    351c:	00001702 	andeq	r1, r0, r2, lsl #14
    3520:	0300341e 	movweq	r3, #1054	; 0x41e
    3524:	3b0b3a0e 	blcc	2d1d64 <__ccfg+0x2b1dbc>
    3528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    352c:	1f000017 	svcne	0x00000017
    3530:	00018289 	andeq	r8, r1, r9, lsl #5
    3534:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3538:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    353c:	03193f01 	tsteq	r9, #1, 30
    3540:	3b0b3a0e 	blcc	2d1d80 <__ccfg+0x2b1dd8>
    3544:	11192705 	tstne	r9, r5, lsl #14
    3548:	40061201 	andmi	r1, r6, r1, lsl #4
				if (c == 'd' || c == 'u') {
    354c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3550:	00001301 	andeq	r1, r0, r1, lsl #6
					if (c == 'd' &&
    3554:	01828921 	orreq	r8, r2, r1, lsr #18
					val = va_arg (ap, lword);
    3558:	31011101 	tstcc	r1, r1, lsl #2
					fm++;
    355c:	00130113 	andseq	r0, r3, r3, lsl r1
					if (c == 'd' &&
    3560:	002e2200 	eoreq	r2, lr, r0, lsl #4
    3564:	0b3a0e03 	bleq	e86d78 <__ccfg+0xe66dd0>
						outc ('-');
    3568:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    356c:	0b201349 	bleq	808298 <__ccfg+0x7e82f0>
						val = (~val) + 1;
    3570:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
				enci (10000);
    3574:	3a0e0300 	bcc	38417c <__ccfg+0x3641d4>
					enci (1000000000UL);
    3578:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    357c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3580:	00342400 	eorseq	r2, r4, r0, lsl #8
    3584:	0b3a0e03 	bleq	e86d98 <__ccfg+0xe66df0>
    3588:	1349053b 	movtne	r0, #38203	; 0x953b
    358c:	00001702 	andeq	r1, r0, r2, lsl #14
    3590:	31011d25 	tstcc	r1, r5, lsr #26
    3594:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3598:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    359c:	00130105 	andseq	r0, r3, r5, lsl #2
    35a0:	00052600 	andeq	r2, r5, r0, lsl #12
    35a4:	0b3a0e03 	bleq	e86db8 <__ccfg+0xe66e10>
    35a8:	1349053b 	movtne	r0, #38203	; 0x953b
    35ac:	00001702 	andeq	r1, r0, r2, lsl #14
    35b0:	03003427 	movweq	r3, #1063	; 0x427
    35b4:	3b0b3a0e 	blcc	2d1df4 <__ccfg+0x2b1e4c>
    35b8:	02134905 	andseq	r4, r3, #81920	; 0x14000
				} else if (c == 'x') {
    35bc:	28000018 	stmdacs	r0, {r3, r4}
					for (i = 28; ; i -= 4) {
    35c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
					val = va_arg (ap, lword);
    35c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
							[ (val >> i) & 0xf ]);
    35c8:	17021349 	strne	r1, [r2, -r9, asr #6]
    35cc:	34290000 	strtcc	r0, [r9], #-0
						outc (__pi_hex_enc_table
    35d0:	3a0e0300 	bcc	3841d8 <__ccfg+0x364230>
    35d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    35d8:	00180213 	andseq	r0, r8, r3, lsl r2
						if (i == 0)
    35dc:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    35e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
					for (i = 28; ; i -= 4) {
    35e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					outc ('%');
    35e8:	13491927 	movtne	r1, #39207	; 0x9927
    35ec:	0000193c 	andeq	r1, r0, ip, lsr r9
    35f0:	3f002e2b 	svccc	0x00002e2b
					outc ('l');
    35f4:	3a0e0319 	bcc	384260 <__ccfg+0x3642b8>
    35f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
				val = (word) va_arg (ap, aword);
    35fc:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
				outc (val);
    3600:	2c000019 	stccs	0, cr0, [r0], {25}
    3604:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
				while (*st != '\0') {
    3608:	0b3a0e03 	bleq	e86e1c <__ccfg+0xe66e74>
    360c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3610:	0000193c 	andeq	r1, r0, ip, lsr r9
    3614:	01110100 	tsteq	r1, r0, lsl #2
					outc (*st);
    3618:	0b130e25 	bleq	4c6eb4 <__ccfg+0x4a6f0c>
    361c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
					st++;
    3620:	01111755 	tsteq	r1, r5, asr r7
		c = *fm++;
    3624:	00001710 	andeq	r1, r0, r0, lsl r7
    3628:	0b002402 	bleq	c638 <__exidx_end+0x68b8>
    362c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
char *vform (char *res, const char *fm, va_list aq) {
    3630:	0300000e 	movweq	r0, #14
    3634:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if (res != NULL) {
    3638:	0b3b0b3a 	bleq	ec6328 <__ccfg+0xea6380>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    363c:	00001349 	andeq	r1, r0, r9, asr #6
    3640:	0b002404 	bleq	c658 <__exidx_end+0x68d8>
    3644:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    3648:	05000008 	streq	r0, [r0, #-8]
    364c:	0b0b000f 	bleq	2c3690 <__ccfg+0x2a36e8>
	fml = strlen (fm) + 17;
    3650:	0f060000 	svceq	0x00060000
    3654:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3658:	07000013 	smladeq	r0, r3, r0, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    365c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3660:	0b3a0b0b 	bleq	e86294 <__ccfg+0xe662ec>
    3664:	13010b3b 	movwne	r0, #6971	; 0x1b3b
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3668:	0d080000 	stceq	0, cr0, [r8, #-0]
    366c:	3a0e0300 	bcc	384274 <__ccfg+0x3642cc>
    3670:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3674:	000b3813 	andeq	r3, fp, r3, lsl r8
		ufree (res);
    3678:	01130900 	tsteq	r3, r0, lsl #18
		goto Again;
    367c:	0b3a0b0b 	bleq	e862b0 <__ccfg+0xe66308>
	if (buf == NULL || fmt == NULL)
    3680:	13010b3b 	movwne	r0, #6971	; 0x1b3b
int vscan (const char *buf, const char *fmt, va_list ap) {
    3684:	0d0a0000 	stceq	0, cr0, [sl, #-0]
	if (buf == NULL || fmt == NULL)
    3688:	3a0e0300 	bcc	384290 <__ccfg+0x3642e8>
    368c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3690:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		    	    case 'u': scanu (lword); break;
    3694:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			while (isspace (*buf)) buf++;
    3698:	0b00000b 	bleq	36cc <vscan+0x4c>
    369c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	while (*fmt != '\0') {
    36a0:	0b3a0b0b 	bleq	e862d4 <__ccfg+0xe6632c>
		if (*fmt++ != '%')
    36a4:	1301053b 	movwne	r0, #5435	; 0x153b
		switch (*fmt++) {
    36a8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    36ac:	3a0e0300 	bcc	3842b4 <__ccfg+0x36430c>
    36b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36b4:	000b3813 	andeq	r3, fp, r3, lsl r8
    36b8:	01130d00 	tsteq	r3, r0, lsl #26
    36bc:	0b3a0b0b 	bleq	e862f0 <__ccfg+0xe66348>
    36c0:	1301053b 	movwne	r0, #5435	; 0x153b
}
    36c4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
		switch (*fmt++) {
    36c8:	3a0e0300 	bcc	3842d0 <__ccfg+0x364328>
    36cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    36d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			while (isspace (*buf)) buf++;
    36d8:	0f00000b 	svceq	0x0000000b
    36dc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    36e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36e4:	0b201927 	bleq	809b88 <__ccfg+0x7e9be0>
    36e8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    36ec:	03193f01 	tsteq	r9, #1, 30
			if (*buf == '\0')
    36f0:	3b0b3a0e 	blcc	2d1f30 <__ccfg+0x2b1f88>
			if (*buf != ',') {
    36f4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
			sap = va_arg (ap, char*);
    36f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			nc++;
    36fc:	97184006 	ldrls	r4, [r8, -r6]
			if (*buf != ',') {
    3700:	13011942 	movwne	r1, #6466	; 0x1942
				while (!isspace (*buf) && *buf != ',' &&
    3704:	34110000 	ldrcc	r0, [r1], #-0
    3708:	3a0e0300 	bcc	384310 <__ccfg+0x364368>
    370c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3710:	00180213 	andseq	r0, r8, r3, lsl r2
    3714:	00051200 	andeq	r1, r5, r0, lsl #4
    3718:	0b3a0803 	bleq	e8572c <__ccfg+0xe65784>
    371c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			while (isspace (*buf)) buf++;
    3720:	00001702 	andeq	r1, r0, r2, lsl #14
    3724:	31001d13 	tstcc	r0, r3, lsl sp
    3728:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    372c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3730:	1400000b 	strne	r0, [r0], #-11
			if (*buf == ',') buf++;
    3734:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3738:	0b3a0e03 	bleq	e86f4c <__ccfg+0xe66fa4>
			*sap = '\0';
    373c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
			break;
    3740:	06120111 			; <UNDEFINED> instruction: 0x06120111
		    case 'd': scani (word); break;
    3744:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3748:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    374c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3750:	0b3a0e03 	bleq	e86f64 <__ccfg+0xe66fbc>
    3754:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3758:	06120111 			; <UNDEFINED> instruction: 0x06120111
    375c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3760:	00130119 	andseq	r0, r3, r9, lsl r1
    3764:	00051600 	andeq	r1, r5, r0, lsl #12
    3768:	0b3a0e03 	bleq	e86f7c <__ccfg+0xe66fd4>
    376c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3770:	00001802 	andeq	r1, r0, r2, lsl #16
    3774:	03003417 	movweq	r3, #1047	; 0x417
    3778:	3b0b3a0e 	blcc	2d1fb8 <__ccfg+0x2b2010>
    377c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3780:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    3784:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3788:	0b3b0b3a 	bleq	ec6478 <__ccfg+0xea64d0>
    378c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3790:	34190000 	ldrcc	r0, [r9], #-0
    3794:	3a0e0300 	bcc	38439c <__ccfg+0x3643f4>
    3798:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    379c:	1a000013 	bne	37f0 <vscan+0x170>
    37a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37a8:	17021349 	strne	r1, [r2, -r9, asr #6]
    37ac:	341b0000 	ldrcc	r0, [fp], #-0
    37b0:	3a0e0300 	bcc	3843b8 <__ccfg+0x364410>
		    case 'u': scanu (word); break;
    37b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    37b8:	00061c13 	andeq	r1, r6, r3, lsl ip
    37bc:	00341c00 	eorseq	r1, r4, r0, lsl #24
    37c0:	0b3a0803 	bleq	e857d4 <__ccfg+0xe6582c>
    37c4:	1349053b 	movtne	r0, #38203	; 0x953b
    37c8:	00001702 	andeq	r1, r0, r2, lsl #14
    37cc:	0182891d 	orreq	r8, r2, sp, lsl r9
    37d0:	31011101 	tstcc	r1, r1, lsl #2
    37d4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    37d8:	0001828a 	andeq	r8, r1, sl, lsl #5
    37dc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    37e0:	1f000018 	svcne	0x00000018
    37e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    37f0:	01200000 			; <UNDEFINED> instruction: 0x01200000
    37f4:	01134901 	tsteq	r3, r1, lsl #18
    37f8:	21000013 	tstcs	r0, r3, lsl r0
		    case 'x': scanx (word); break;
    37fc:	13490021 	movtne	r0, #36897	; 0x9021
    3800:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3804:	03003422 	movweq	r3, #1058	; 0x422
    3808:	3b0b3a0e 	blcc	2d2048 <__ccfg+0x2b20a0>
    380c:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    3810:	2300000a 	movwcs	r0, #10
    3814:	13490026 	movtne	r0, #36902	; 0x9026
    3818:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    381c:	03193f01 	tsteq	r9, #1, 30
    3820:	3b0b3a0e 	blcc	2d2060 <__ccfg+0x2b20b8>
    3824:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3828:	00193c13 	andseq	r3, r9, r3, lsl ip
    382c:	00052500 	andeq	r2, r5, r0, lsl #10
    3830:	00001349 	andeq	r1, r0, r9, asr #6
    3834:	01110100 	tsteq	r1, r0, lsl #2
    3838:	0b130e25 	bleq	4c70d4 <__ccfg+0x4a712c>
    383c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3840:	01111755 	tsteq	r1, r5, asr r7
    3844:	00001710 	andeq	r1, r0, r0, lsl r7
    3848:	0b002402 	bleq	c858 <__exidx_end+0x6ad8>
    384c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3850:	0300000e 	movweq	r0, #14
    3854:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3858:	0b3b0b3a 	bleq	ec6548 <__ccfg+0xea65a0>
    385c:	00001349 	andeq	r1, r0, r9, asr #6
    3860:	0b002404 	bleq	c878 <__exidx_end+0x6af8>
    3864:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3868:	05000008 	streq	r0, [r0, #-8]
    386c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3870:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			switch (*fmt++) {
    3874:	0b201927 	bleq	809d18 <__ccfg+0x7e9d70>
    3878:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    387c:	3a0e0300 	bcc	384484 <__ccfg+0x3644dc>
    3880:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3884:	000b2019 	andeq	r2, fp, r9, lsl r0
    3888:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
		    	    case 'd': scani (lword); break;
    388c:	0b3a0e03 	bleq	e870a0 <__ccfg+0xe670f8>
    3890:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3894:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3898:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    389c:	00130119 	andseq	r0, r3, r9, lsl r1
    38a0:	00050800 	andeq	r0, r5, r0, lsl #16
    38a4:	0b3a0e03 	bleq	e870b8 <__ccfg+0xe67110>
    38a8:	1349053b 	movtne	r0, #38203	; 0x953b
    38ac:	00001702 	andeq	r1, r0, r2, lsl #14
    38b0:	03003409 	movweq	r3, #1033	; 0x409
    38b4:	3b0b3a0e 	blcc	2d20f4 <__ccfg+0x2b214c>
    38b8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    38bc:	0a000017 	beq	3920 <vscan+0x2a0>
    38c0:	1331001d 	teqne	r1, #29
    38c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    38c8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    38cc:	0b0b0000 	bleq	2c38d4 <__ccfg+0x2a392c>
    38d0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    38d4:	00130106 	andseq	r0, r3, r6, lsl #2
    38d8:	82890c00 	addhi	r0, r9, #0, 24
    38dc:	01110101 	tsteq	r1, r1, lsl #2
    38e0:	13011331 	movwne	r1, #4913	; 0x1331
    38e4:	8a0d0000 	bhi	3438ec <__ccfg+0x323944>
		    	    case 'x': scanx (lword); break;
    38e8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    38ec:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    38f0:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    38f4:	11010182 	smlabbne	r1, r2, r1, r0
    38f8:	0f000001 	svceq	0x00000001
    38fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3900:	0b3a0e03 	bleq	e87114 <__ccfg+0xe6716c>
    3904:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3908:	06120111 			; <UNDEFINED> instruction: 0x06120111
    390c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3910:	00130119 	andseq	r0, r3, r9, lsl r1
    3914:	00341000 	eorseq	r1, r4, r0
    3918:	0b3a0e03 	bleq	e8712c <__ccfg+0xe67184>
    391c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3920:	00001702 	andeq	r1, r0, r2, lsl #14
    3924:	01828911 	orreq	r8, r2, r1, lsl r9
    3928:	31011100 	mrscc	r1, (UNDEF: 17)
    392c:	12000013 	andne	r0, r0, #19
    3930:	01018289 	smlabbeq	r1, r9, r2, r8
    3934:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3938:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    393c:	03193f01 	tsteq	r9, #1, 30
    3940:	3b0b3a0e 	blcc	2d2180 <__ccfg+0x2b21d8>
    3944:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3948:	00130119 	andseq	r0, r3, r9, lsl r1
    394c:	00051400 	andeq	r1, r5, r0, lsl #8
    3950:	00001349 	andeq	r1, r0, r9, asr #6
    3954:	3f002e15 	svccc	0x00002e15
		    	    case 'd': scani (lword); break;
    3958:	3a0e0319 	bcc	3845c4 <__ccfg+0x36461c>
    395c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3960:	00193c19 	andseq	r3, r9, r9, lsl ip
    3964:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3968:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    396c:	0b3b0b3a 	bleq	ec665c <__ccfg+0xea66b4>
    3970:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
		    	    case 'u': scanu (lword); break;
    3974:	01000000 	mrseq	r0, (UNDEF: 0)
    3978:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    397c:	0e030b13 	vmoveq.32	d3[0], r0
    3980:	17550e1b 	smmlane	r5, fp, lr, r0
    3984:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3988:	24020000 	strcs	r0, [r2], #-0
    398c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3990:	000e030b 	andeq	r0, lr, fp, lsl #6
    3994:	00160300 	andseq	r0, r6, r0, lsl #6
    3998:	0b3a0e03 	bleq	e871ac <__ccfg+0xe67204>
    399c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39a0:	24040000 	strcs	r0, [r4], #-0
    39a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    39a8:	0008030b 	andeq	r0, r8, fp, lsl #6
    39ac:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    39b0:	0b3a0e03 	bleq	e871c4 <__ccfg+0xe6721c>
    39b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39b8:	0b201349 	bleq	8086e4 <__ccfg+0x7e873c>
		    	    case 'x': scanx (lword); break;
    39bc:	00001301 	andeq	r1, r0, r1, lsl #6
    39c0:	03000506 	movweq	r0, #1286	; 0x506
			if ((c = *buf++) == '\0')
    39c4:	3b0b3a0e 	blcc	2d2204 <__ccfg+0x2b225c>
    39c8:	0013490b 	andseq	r4, r3, fp, lsl #18
			sap = va_arg (ap, char*);
    39cc:	00340700 	eorseq	r0, r4, r0, lsl #14
			nc++;
    39d0:	0b3a0e03 	bleq	e871e4 <__ccfg+0xe6723c>
			break;
    39d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
			while (isspace (*buf)) buf++;
    39d8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    39dc:	03193f01 	tsteq	r9, #1, 30
    39e0:	3b0b3a0e 	blcc	2d2220 <__ccfg+0x2b2278>
						*sap++ = *buf++;
    39e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    39e8:	010b2013 	tsteq	fp, r3, lsl r0
			while (isspace (*buf)) buf++;
    39ec:	09000013 	stmdbeq	r0, {r0, r1, r4}
    39f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    39f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		return 0;
    39f8:	00001349 	andeq	r1, r0, r9, asr #6
    39fc:	0300340a 	movweq	r3, #1034	; 0x40a
		    case 'x': scanx (word); break;
    3a00:	3b0b3a0e 	blcc	2d2240 <__ccfg+0x2b2298>
    3a04:	00134905 	andseq	r4, r3, r5, lsl #18
		    	    case 'x': scanx (lword); break;
    3a08:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    3a0c:	0b3a0e03 	bleq	e87220 <__ccfg+0xe67278>
    3a10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3a14:	00000b20 	andeq	r0, r0, r0, lsr #22
    3a18:	3f012e0c 	svccc	0x00012e0c
    3a1c:	3a0e0319 	bcc	384688 <__ccfg+0x3646e0>
    3a20:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3a24:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a28:	97184006 	ldrls	r4, [r8, -r6]
    3a2c:	13011942 	movwne	r1, #6466	; 0x1942
    3a30:	050d0000 	streq	r0, [sp, #-0]
    3a34:	3a0e0300 	bcc	38463c <__ccfg+0x364694>
    3a38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a3c:	00170213 	andseq	r0, r7, r3, lsl r2
    3a40:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3a44:	0b3a0e03 	bleq	e87258 <__ccfg+0xe672b0>
    3a48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a4c:	00001802 	andeq	r1, r0, r2, lsl #16
    3a50:	0300340f 	movweq	r3, #1039	; 0x40f
    3a54:	3b0b3a0e 	blcc	2d2294 <__ccfg+0x2b22ec>
    3a58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3a5c:	10000017 	andne	r0, r0, r7, lsl r0
    3a60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a64:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3a68:	0b590b58 	bleq	16467d0 <__ccfg+0x1626828>
    3a6c:	00001301 	andeq	r1, r0, r1, lsl #6
    3a70:	31000511 	tstcc	r0, r1, lsl r5
    3a74:	12000013 	andne	r0, r0, #19
    3a78:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3a7c:	34130000 	ldrcc	r0, [r3], #-0
    3a80:	02133100 	andseq	r3, r3, #0, 2
    3a84:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3a88:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a90:	0b590b58 	bleq	16467f8 <__ccfg+0x1626850>
    3a94:	0b150000 	bleq	543a9c <__ccfg+0x523af4>
    3a98:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3a9c:	16000006 	strne	r0, [r0], -r6
    3aa0:	13310034 	teqne	r1, #52	; 0x34
    3aa4:	00001702 	andeq	r1, r0, r2, lsl #14
    3aa8:	3f012e17 	svccc	0x00012e17
    3aac:	3a0e0319 	bcc	384718 <__ccfg+0x364770>
    3ab0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3ab4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3ab8:	97184006 	ldrls	r4, [r8, -r6]
    3abc:	13011942 	movwne	r1, #6466	; 0x1942
    3ac0:	1d180000 	ldcne	0, cr0, [r8, #-0]
    3ac4:	11133101 	tstne	r3, r1, lsl #2
    3ac8:	58061201 	stmdapl	r6, {r0, r9, ip}
    3acc:	010b590b 	tsteq	fp, fp, lsl #18
    3ad0:	19000013 	stmdbne	r0, {r0, r1, r4}
    3ad4:	01018289 	smlabbeq	r1, r9, r2, r8
    3ad8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3adc:	8a1a0000 	bhi	683ae4 <__ccfg+0x663b3c>
    3ae0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3ae4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3ae8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    3aec:	03193f01 	tsteq	r9, #1, 30
    3af0:	3b0b3a0e 	blcc	2d2330 <__ccfg+0x2b2388>
    3af4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3af8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3afc:	97184006 	ldrls	r4, [r8, -r6]
    3b00:	13011942 	movwne	r1, #6466	; 0x1942
    3b04:	051c0000 	ldreq	r0, [ip, #-0]
    3b08:	3a0e0300 	bcc	384710 <__ccfg+0x364768>
    3b0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b10:	00170213 	andseq	r0, r7, r3, lsl r2
    3b14:	00341d00 	eorseq	r1, r4, r0, lsl #26
    3b18:	0b3a0e03 	bleq	e8732c <__ccfg+0xe67384>
    3b1c:	1349053b 	movtne	r0, #38203	; 0x953b
    3b20:	00001702 	andeq	r1, r0, r2, lsl #14
    3b24:	31012e1e 	tstcc	r1, lr, lsl lr
    3b28:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3b2c:	97184006 	ldrls	r4, [r8, -r6]
    3b30:	13011942 	movwne	r1, #6466	; 0x1942
    3b34:	051f0000 	ldreq	r0, [pc, #-0]	; 3b3c <NOROM_OSCHF_TurnOnXosc+0x4>
    3b38:	02133100 	andseq	r3, r3, #0, 2
    3b3c:	20000017 	andcs	r0, r0, r7, lsl r0
    3b40:	13310034 	teqne	r1, #52	; 0x34
    3b44:	1d210000 	stcne	0, cr0, [r1, #-0]
    3b48:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3b4c:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3b50:	0105590b 	tsteq	r5, fp, lsl #18
    3b54:	22000013 	andcs	r0, r0, #19
    3b58:	01018289 	smlabbeq	r1, r9, r2, r8
    3b5c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3b60:	00001301 	andeq	r1, r0, r1, lsl #6
    3b64:	01828923 	orreq	r8, r2, r3, lsr #18
    3b68:	31011100 	mrscc	r1, (UNDEF: 17)
    3b6c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3b70:	01018289 	smlabbeq	r1, r9, r2, r8
    3b74:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3b78:	00130118 	andseq	r0, r3, r8, lsl r1
    3b7c:	001d2500 	andseq	r2, sp, r0, lsl #10
    3b80:	01111331 	tsteq	r1, r1, lsr r3
    3b84:	0b580612 	bleq	16053d4 <__ccfg+0x15e542c>
    3b88:	00000559 	andeq	r0, r0, r9, asr r5
    3b8c:	01828926 	orreq	r8, r2, r6, lsr #18
    3b90:	01011101 	tsteq	r1, r1, lsl #2
    3b94:	27000013 	smladcs	r0, r3, r0, r0
    3b98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b9c:	0b3a0e03 	bleq	e873b0 <__ccfg+0xe67408>
    3ba0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3ba4:	1301193c 	movwne	r1, #6460	; 0x193c
    3ba8:	05280000 	streq	r0, [r8, #-0]!
    3bac:	00134900 	andseq	r4, r3, r0, lsl #18
    3bb0:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    3bb4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3bb8:	0b3b0b3a 	bleq	ec68a8 <__ccfg+0xea6900>
    3bbc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3bc0:	00001301 	andeq	r1, r0, r1, lsl #6
    3bc4:	3f012e2a 	svccc	0x00012e2a
    3bc8:	3a0e0319 	bcc	384834 <__ccfg+0x36488c>
    3bcc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3bd0:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3bd4:	00000019 	andeq	r0, r0, r9, lsl r0
    3bd8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3bdc:	030b130e 	movweq	r1, #45838	; 0xb30e
    3be0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3be4:	10011117 	andne	r1, r1, r7, lsl r1
    3be8:	02000017 	andeq	r0, r0, #23
    3bec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3bf0:	0b3b0b3a 	bleq	ec68e0 <__ccfg+0xea6938>
    3bf4:	00001349 	andeq	r1, r0, r9, asr #6
    3bf8:	0b002403 	bleq	cc0c <__exidx_end+0x6e8c>
    3bfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3c00:	0400000e 	streq	r0, [r0], #-14
    3c04:	0b0b0024 	bleq	2c3c9c <__ccfg+0x2a3cf4>
    3c08:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3c0c:	0f050000 	svceq	0x00050000
    3c10:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3c14:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3c18:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3c1c:	15070000 	strne	r0, [r7, #-0]
    3c20:	01192701 	tsteq	r9, r1, lsl #14
    3c24:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3c28:	13490005 	movtne	r0, #36869	; 0x9005
    3c2c:	15090000 	strne	r0, [r9, #-0]
    3c30:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3c34:	00130113 	andseq	r0, r3, r3, lsl r1
    3c38:	00150a00 	andseq	r0, r5, r0, lsl #20
    3c3c:	13491927 	movtne	r1, #39207	; 0x9927
    3c40:	130b0000 	movwne	r0, #45056	; 0xb000
    3c44:	3a0b0b01 	bcc	2c6850 <__ccfg+0x2a68a8>
    3c48:	010b3b0b 	tsteq	fp, fp, lsl #22
    3c4c:	0c000013 	stceq	0, cr0, [r0], {19}
    3c50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3c54:	0b3b0b3a 	bleq	ec6944 <__ccfg+0xea699c>
    3c58:	0b381349 	bleq	e08984 <__ccfg+0xde89dc>
    3c5c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3c60:	3a0e0301 	bcc	38486c <__ccfg+0x3648c4>
    3c64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c68:	010b2019 	tsteq	fp, r9, lsl r0
    3c6c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3c70:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c78:	00001349 	andeq	r1, r0, r9, asr #6
    3c7c:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3c80:	3b0b3a0e 	blcc	2d24c0 <__ccfg+0x2b2518>
    3c84:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3c88:	000b2013 	andeq	r2, fp, r3, lsl r0
    3c8c:	002e1000 	eoreq	r1, lr, r0
    3c90:	0b3a0e03 	bleq	e874a4 <__ccfg+0xe674fc>
    3c94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c98:	00000b20 	andeq	r0, r0, r0, lsr #22
    3c9c:	03012e11 	movweq	r2, #7697	; 0x1e11
    3ca0:	3b0b3a0e 	blcc	2d24e0 <__ccfg+0x2b2538>
    3ca4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3ca8:	010b2013 	tsteq	fp, r3, lsl r0
    3cac:	12000013 	andne	r0, r0, #19
    3cb0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3cb4:	0b3b0b3a 	bleq	ec69a4 <__ccfg+0xea69fc>
    3cb8:	00001349 	andeq	r1, r0, r9, asr #6
    3cbc:	03003413 	movweq	r3, #1043	; 0x413
    3cc0:	3b0b3a0e 	blcc	2d2500 <__ccfg+0x2b2558>
    3cc4:	0013490b 	andseq	r4, r3, fp, lsl #18
    3cc8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3ccc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3cd0:	0b3b0b3a 	bleq	ec69c0 <__ccfg+0xea6a18>
    3cd4:	01111927 	tsteq	r1, r7, lsr #18
    3cd8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3cdc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3ce0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3ce4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3ce8:	0b3b0b3a 	bleq	ec69d8 <__ccfg+0xea6a30>
    3cec:	17021349 	strne	r1, [r2, -r9, asr #6]
    3cf0:	34160000 	ldrcc	r0, [r6], #-0
    3cf4:	3a0e0300 	bcc	3848fc <__ccfg+0x364954>
    3cf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cfc:	00051c13 	andeq	r1, r5, r3, lsl ip
    3d00:	011d1700 	tsteq	sp, r0, lsl #14
    3d04:	01521331 	cmpeq	r2, r1, lsr r3
    3d08:	0b581755 	bleq	1609a64 <__ccfg+0x15e9abc>
    3d0c:	13010b59 	movwne	r0, #7001	; 0x1b59
    3d10:	05180000 	ldreq	r0, [r8, #-0]
    3d14:	1c133100 	ldfnes	f3, [r3], {-0}
    3d18:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3d1c:	1331001d 	teqne	r1, #29
    3d20:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d24:	0b590b58 	bleq	1646a8c <__ccfg+0x1626ae4>
    3d28:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3d2c:	11133101 	tstne	r3, r1, lsl #2
    3d30:	58061201 	stmdapl	r6, {r0, r9, ip}
    3d34:	010b590b 	tsteq	fp, fp, lsl #18
    3d38:	1b000013 	blne	3d8c <NOROM_RFCRfTrimRead+0x134>
    3d3c:	00018289 	andeq	r8, r1, r9, lsl #5
    3d40:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3d44:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3d48:	11010182 	smlabbne	r1, r2, r1, r0
    3d4c:	00130101 	andseq	r0, r3, r1, lsl #2
    3d50:	828a1d00 	addhi	r1, sl, #0, 26
    3d54:	18020001 	stmdane	r2, {r0}
    3d58:	00184291 	mulseq	r8, r1, r2
    3d5c:	82891e00 	addhi	r1, r9, #0, 28
    3d60:	01110101 	tsteq	r1, r1, lsl #2
    3d64:	13011331 	movwne	r1, #4913	; 0x1331
    3d68:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3d6c:	11010182 	smlabbne	r1, r2, r1, r0
    3d70:	20000001 	andcs	r0, r0, r1
    3d74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3d78:	0b3a0e03 	bleq	e8758c <__ccfg+0xe675e4>
    3d7c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3d80:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d84:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d88:	00130119 	andseq	r0, r3, r9, lsl r1
    3d8c:	00052100 	andeq	r2, r5, r0, lsl #2
    3d90:	0b3a0e03 	bleq	e875a4 <__ccfg+0xe675fc>
    3d94:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d98:	00001702 	andeq	r1, r0, r2, lsl #14
    3d9c:	03003422 	movweq	r3, #1058	; 0x422
    3da0:	3b0b3a0e 	blcc	2d25e0 <__ccfg+0x2b2638>
    3da4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3da8:	23000018 	movwcs	r0, #24
    3dac:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3db0:	0b3b0b3a 	bleq	ec6aa0 <__ccfg+0xea6af8>
    3db4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3db8:	34240000 	strtcc	r0, [r4], #-0
    3dbc:	3a080300 	bcc	2049c4 <__ccfg+0x1e4a1c>
    3dc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3dc4:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3dc8:	0111010b 	tsteq	r1, fp, lsl #2
    3dcc:	13010612 	movwne	r0, #5650	; 0x1612
    3dd0:	34260000 	strtcc	r0, [r6], #-0
    3dd4:	3a0e0300 	bcc	3849dc <__ccfg+0x364a34>
    3dd8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ddc:	00170213 	andseq	r0, r7, r3, lsl r2
    3de0:	011d2700 	tsteq	sp, r0, lsl #14
    3de4:	01111331 	tsteq	r1, r1, lsr r3
    3de8:	0b580612 	bleq	1605638 <__ccfg+0x15e5690>
    3dec:	13010559 	movwne	r0, #5465	; 0x1559
    3df0:	05280000 	streq	r0, [r8, #-0]!
    3df4:	00133100 	andseq	r3, r3, r0, lsl #2
    3df8:	010b2900 	tsteq	fp, r0, lsl #18
    3dfc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e00:	342a0000 	strtcc	r0, [sl], #-0
    3e04:	02133100 	andseq	r3, r3, #0, 2
    3e08:	2b000017 	blcs	3e6c <NOROM_RFCRTrim+0xc4>
    3e0c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3e10:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3e14:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3e18:	00001301 	andeq	r1, r0, r1, lsl #6
    3e1c:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3e20:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3e24:	13490026 	movtne	r0, #36902	; 0x9026
    3e28:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3e2c:	03193f00 	tsteq	r9, #0, 30
    3e30:	3b0b3a0e 	blcc	2d2670 <__ccfg+0x2b26c8>
    3e34:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e3c:	97184006 	ldrls	r4, [r8, -r6]
    3e40:	00001942 	andeq	r1, r0, r2, asr #18
    3e44:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3e48:	00130113 	andseq	r0, r3, r3, lsl r1
    3e4c:	00213000 	eoreq	r3, r1, r0
    3e50:	0b2f1349 	bleq	bc8b7c <__ccfg+0xba8bd4>
    3e54:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3e58:	03193f01 	tsteq	r9, #1, 30
    3e5c:	3b0b3a0e 	blcc	2d269c <__ccfg+0x2b26f4>
    3e60:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3e64:	00130119 	andseq	r0, r3, r9, lsl r1
    3e68:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3e6c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3e70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3e74:	13491927 	movtne	r1, #39207	; 0x9927
    3e78:	1301193c 	movwne	r1, #6460	; 0x193c
    3e7c:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3e80:	03193f00 	tsteq	r9, #0, 30
    3e84:	3b0b3a0e 	blcc	2d26c4 <__ccfg+0x2b271c>
    3e88:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3e8c:	00193c13 	andseq	r3, r9, r3, lsl ip
    3e90:	11010000 	mrsne	r0, (UNDEF: 1)
    3e94:	130e2501 	movwne	r2, #58625	; 0xe501
    3e98:	1b0e030b 	blne	384acc <__ccfg+0x364b24>
    3e9c:	1117550e 	tstne	r7, lr, lsl #10
    3ea0:	00171001 	andseq	r1, r7, r1
    3ea4:	00240200 	eoreq	r0, r4, r0, lsl #4
    3ea8:	0b3e0b0b 	bleq	f86adc <__ccfg+0xf66b34>
    3eac:	00000e03 	andeq	r0, r0, r3, lsl #28
    3eb0:	03001603 	movweq	r1, #1539	; 0x603
    3eb4:	3b0b3a0e 	blcc	2d26f4 <__ccfg+0x2b274c>
    3eb8:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ebc:	00240400 	eoreq	r0, r4, r0, lsl #8
    3ec0:	0b3e0b0b 	bleq	f86af4 <__ccfg+0xf66b4c>
    3ec4:	00000803 	andeq	r0, r0, r3, lsl #16
    3ec8:	0b010405 	bleq	44ee4 <__ccfg+0x24f3c>
    3ecc:	3b0b3a0b 	blcc	2d2700 <__ccfg+0x2b2758>
    3ed0:	0013010b 	andseq	r0, r3, fp, lsl #2
    3ed4:	00280600 	eoreq	r0, r8, r0, lsl #12
    3ed8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3edc:	04070000 	streq	r0, [r7], #-0
    3ee0:	3a0b0b01 	bcc	2c6aec <__ccfg+0x2a6b44>
    3ee4:	01053b0b 	tsteq	r5, fp, lsl #22
    3ee8:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3eec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3ef0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ef4:	00001349 	andeq	r1, r0, r9, asr #6
    3ef8:	03002e09 	movweq	r2, #3593	; 0xe09
    3efc:	3b0b3a0e 	blcc	2d273c <__ccfg+0x2b2794>
    3f00:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f04:	000b2013 	andeq	r2, fp, r3, lsl r0
    3f08:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3f0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3f10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3f14:	13491927 	movtne	r1, #39207	; 0x9927
    3f18:	13010b20 	movwne	r0, #6944	; 0x1b20
    3f1c:	340b0000 	strcc	r0, [fp], #-0
    3f20:	3a0e0300 	bcc	384b28 <__ccfg+0x364b80>
    3f24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f28:	0c000013 	stceq	0, cr0, [r0], {19}
    3f2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3f30:	0b3a0e03 	bleq	e87744 <__ccfg+0xe6779c>
    3f34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3f38:	01111349 	tsteq	r1, r9, asr #6
    3f3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f40:	00194297 	mulseq	r9, r7, r2
    3f44:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3f48:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3f4c:	0b3b0b3a 	bleq	ec6c3c <__ccfg+0xea6c94>
    3f50:	13491927 	movtne	r1, #39207	; 0x9927
    3f54:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f58:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3f5c:	00130119 	andseq	r0, r3, r9, lsl r1
    3f60:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3f64:	0b3a0e03 	bleq	e87778 <__ccfg+0xe677d0>
    3f68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f6c:	00001702 	andeq	r1, r0, r2, lsl #14
    3f70:	31012e0f 	tstcc	r1, pc, lsl #28
    3f74:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f78:	97184006 	ldrls	r4, [r8, -r6]
    3f7c:	13011942 	movwne	r1, #6466	; 0x1942
    3f80:	34100000 	ldrcc	r0, [r0], #-0
    3f84:	02133100 	andseq	r3, r3, #0, 2
    3f88:	11000017 	tstne	r0, r7, lsl r0
    3f8c:	0111010b 	tsteq	r1, fp, lsl #2
    3f90:	00000612 	andeq	r0, r0, r2, lsl r6
    3f94:	31003412 	tstcc	r0, r2, lsl r4
    3f98:	13000013 	movwne	r0, #19
    3f9c:	1331001d 	teqne	r1, #29
    3fa0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3fa4:	0b590b58 	bleq	1646d0c <__ccfg+0x1626d64>
    3fa8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3fac:	03193f01 	tsteq	r9, #1, 30
    3fb0:	3b0b3a0e 	blcc	2d27f0 <__ccfg+0x2b2848>
    3fb4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3fb8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3fbc:	97184006 	ldrls	r4, [r8, -r6]
    3fc0:	13011942 	movwne	r1, #6466	; 0x1942
    3fc4:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3fc8:	11000182 	smlabbne	r0, r2, r1, r0
    3fcc:	00133101 	andseq	r3, r3, r1, lsl #2
    3fd0:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3fd4:	0b3a0e03 	bleq	e877e8 <__ccfg+0xe67840>
    3fd8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fdc:	0b201349 	bleq	808d08 <__ccfg+0x7e8d60>
    3fe0:	00001301 	andeq	r1, r0, r1, lsl #6
    3fe4:	03003417 	movweq	r3, #1047	; 0x417
    3fe8:	3b0b3a0e 	blcc	2d2828 <__ccfg+0x2b2880>
    3fec:	00134905 	andseq	r4, r3, r5, lsl #18
    3ff0:	00341800 	eorseq	r1, r4, r0, lsl #16
    3ff4:	0b3a0e03 	bleq	e87808 <__ccfg+0xe67860>
    3ff8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3ffc:	00001802 	andeq	r1, r0, r2, lsl #16
    4000:	31001d19 	tstcc	r0, r9, lsl sp
    4004:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    4008:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    400c:	1a00000b 	bne	4040 <NOROM_SetupTrimDevice+0x70>
    4010:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    4014:	17550152 			; <UNDEFINED> instruction: 0x17550152
    4018:	0b590b58 	bleq	1646d80 <__ccfg+0x1626dd8>
    401c:	00001301 	andeq	r1, r0, r1, lsl #6
    4020:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    4024:	1c000017 	stcne	0, cr0, [r0], {23}
    4028:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    402c:	0b3a0e03 	bleq	e87840 <__ccfg+0xe67898>
    4030:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    4034:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4038:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    403c:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    4040:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    4044:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4048:	0b590b58 	bleq	1646db0 <__ccfg+0x1626e08>
    404c:	00001301 	andeq	r1, r0, r1, lsl #6
    4050:	31011d1e 	tstcc	r1, lr, lsl sp
    4054:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4058:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    405c:	0000000b 	andeq	r0, r0, fp
    4060:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4064:	030b130e 	movweq	r1, #45838	; 0xb30e
    4068:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    406c:	10011117 	andne	r1, r1, r7, lsl r1
    4070:	02000017 	andeq	r0, r0, #23
    4074:	0b0b0024 	bleq	2c410c <__ccfg+0x2a4164>
    4078:	0e030b3e 	vmoveq.16	d3[0], r0
    407c:	16030000 	strne	r0, [r3], -r0
    4080:	3a0e0300 	bcc	384c88 <__ccfg+0x364ce0>
    4084:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4088:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    408c:	0b0b0024 	bleq	2c4124 <__ccfg+0x2a417c>
    4090:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    4094:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4098:	3a0e0301 	bcc	384ca4 <__ccfg+0x364cfc>
    409c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    40a0:	010b2019 	tsteq	fp, r9, lsl r0
    40a4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    40a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    40ac:	0b3b0b3a 	bleq	ec6d9c <__ccfg+0xea6df4>
    40b0:	00001349 	andeq	r1, r0, r9, asr #6
    40b4:	03003407 	movweq	r3, #1031	; 0x407
    40b8:	3b0b3a0e 	blcc	2d28f8 <__ccfg+0x2b2950>
    40bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    40c0:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    40c4:	0b3a0e03 	bleq	e878d8 <__ccfg+0xe67930>
    40c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    40cc:	0b201349 	bleq	808df8 <__ccfg+0x7e8e50>
    40d0:	00001301 	andeq	r1, r0, r1, lsl #6
    40d4:	31012e09 	tstcc	r1, r9, lsl #28
    40d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    40dc:	97184006 	ldrls	r4, [r8, -r6]
    40e0:	13011942 	movwne	r1, #6466	; 0x1942
    40e4:	050a0000 	streq	r0, [sl, #-0]
    40e8:	02133100 	andseq	r3, r3, #0, 2
    40ec:	0b000017 	bleq	4150 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x60>
    40f0:	13310034 	teqne	r1, #52	; 0x34
    40f4:	00001702 	andeq	r1, r0, r2, lsl #14
    40f8:	3100050c 	tstcc	r0, ip, lsl #10
    40fc:	000b1c13 	andeq	r1, fp, r3, lsl ip
    4100:	82890d00 	addhi	r0, r9, #0, 26
    4104:	01110001 	tsteq	r1, r1
    4108:	00001331 	andeq	r1, r0, r1, lsr r3
    410c:	0182890e 	orreq	r8, r2, lr, lsl #18
    4110:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    4114:	13311942 	teqne	r1, #1081344	; 0x108000
    4118:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    411c:	03193f01 	tsteq	r9, #1, 30
    4120:	3b0b3a0e 	blcc	2d2960 <__ccfg+0x2b29b8>
    4124:	11192705 	tstne	r9, r5, lsl #14
    4128:	40061201 	andmi	r1, r6, r1, lsl #4
    412c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4130:	00001301 	andeq	r1, r0, r1, lsl #6
    4134:	03000510 	movweq	r0, #1296	; 0x510
    4138:	3b0b3a0e 	blcc	2d2978 <__ccfg+0x2b29d0>
    413c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4140:	11000017 	tstne	r0, r7, lsl r0
    4144:	01018289 	smlabbeq	r1, r9, r2, r8
    4148:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    414c:	00133119 	andseq	r3, r3, r9, lsl r1
    4150:	828a1200 	addhi	r1, sl, #0, 4
    4154:	18020001 	stmdane	r2, {r0}
    4158:	00184291 	mulseq	r8, r1, r2
    415c:	00341300 	eorseq	r1, r4, r0, lsl #6
    4160:	0b3a0e03 	bleq	e87974 <__ccfg+0xe679cc>
    4164:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4168:	00001702 	andeq	r1, r0, r2, lsl #14
    416c:	3f012e14 	svccc	0x00012e14
    4170:	3a0e0319 	bcc	384ddc <__ccfg+0x364e34>
    4174:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    4178:	11134919 	tstne	r3, r9, lsl r9
    417c:	40061201 	andmi	r1, r6, r1, lsl #4
    4180:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4184:	00001301 	andeq	r1, r0, r1, lsl #6
    4188:	31011d15 	tstcc	r1, r5, lsl sp
    418c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4190:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4194:	1600000b 	strne	r0, [r0], -fp
    4198:	0111010b 	tsteq	r1, fp, lsl #2
    419c:	00000612 	andeq	r0, r0, r2, lsl r6
    41a0:	3f002e17 	svccc	0x00002e17
    41a4:	3a0e0319 	bcc	384e10 <__ccfg+0x364e68>
    41a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    41ac:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    41b0:	00000019 	andeq	r0, r0, r9, lsl r0
    41b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    41b8:	030b130e 	movweq	r1, #45838	; 0xb30e
    41bc:	110e1b0e 	tstne	lr, lr, lsl #22
    41c0:	10061201 	andne	r1, r6, r1, lsl #4
    41c4:	02000017 	andeq	r0, r0, #23
    41c8:	0b0b0024 	bleq	2c4260 <__ccfg+0x2a42b8>
    41cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    41d0:	16030000 	strne	r0, [r3], -r0
    41d4:	3a0e0300 	bcc	384ddc <__ccfg+0x364e34>
    41d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    41e0:	00240400 	eoreq	r0, r4, r0, lsl #8
    41e4:	0b3e0b0b 	bleq	f86e18 <__ccfg+0xf66e70>
    41e8:	00000e03 	andeq	r0, r0, r3, lsl #28
    41ec:	03001605 	movweq	r1, #1541	; 0x605
    41f0:	3b0b3a0e 	blcc	2d2a30 <__ccfg+0x2b2a88>
    41f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41f8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    41fc:	13490026 	movtne	r0, #36902	; 0x9026
    4200:	17070000 	strne	r0, [r7, -r0]
    4204:	3a0b0b01 	bcc	2c6e10 <__ccfg+0x2a6e68>
    4208:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    420c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4210:	000d0800 	andeq	r0, sp, r0, lsl #16
    4214:	0b3a0e03 	bleq	e87a28 <__ccfg+0xe67a80>
    4218:	0b390b3b 	bleq	e46f0c <__ccfg+0xe26f64>
    421c:	00001349 	andeq	r1, r0, r9, asr #6
    4220:	49010109 	stmdbmi	r1, {r0, r3, r8}
    4224:	00130113 	andseq	r0, r3, r3, lsl r1
    4228:	00210a00 	eoreq	r0, r1, r0, lsl #20
    422c:	0b2f1349 	bleq	bc8f58 <__ccfg+0xba8fb0>
    4230:	130b0000 	movwne	r0, #45056	; 0xb000
    4234:	3a0b0b01 	bcc	2c6e40 <__ccfg+0x2a6e98>
    4238:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    423c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4240:	000d0c00 	andeq	r0, sp, r0, lsl #24
    4244:	0b3a0e03 	bleq	e87a58 <__ccfg+0xe67ab0>
    4248:	0b390b3b 	bleq	e46f3c <__ccfg+0xe26f94>
    424c:	0b381349 	bleq	e08f78 <__ccfg+0xde8fd0>
    4250:	0f0d0000 	svceq	0x000d0000
    4254:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4258:	00370e00 	eorseq	r0, r7, r0, lsl #28
    425c:	00001349 	andeq	r1, r0, r9, asr #6
    4260:	0301130f 	movweq	r1, #4879	; 0x130f
    4264:	3a0b0b0e 	bcc	2c6ea4 <__ccfg+0x2a6efc>
    4268:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    426c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4270:	000d1000 	andeq	r1, sp, r0
    4274:	0b3a0803 	bleq	e86288 <__ccfg+0xe662e0>
    4278:	0b390b3b 	bleq	e46f6c <__ccfg+0xe26fc4>
    427c:	0b381349 	bleq	e08fa8 <__ccfg+0xde9000>
    4280:	0f110000 	svceq	0x00110000
    4284:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4288:	12000013 	andne	r0, r0, #19
    428c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4290:	0b3a050b 	bleq	e856c4 <__ccfg+0xe6571c>
    4294:	0b390b3b 	bleq	e46f88 <__ccfg+0xe26fe0>
    4298:	00001301 	andeq	r1, r0, r1, lsl #6
    429c:	03000d13 	movweq	r0, #3347	; 0xd13
    42a0:	3b0b3a0e 	blcc	2d2ae0 <__ccfg+0x2b2b38>
    42a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    42a8:	00053813 	andeq	r3, r5, r3, lsl r8
    42ac:	00151400 	andseq	r1, r5, r0, lsl #8
    42b0:	00001927 	andeq	r1, r0, r7, lsr #18
    42b4:	27011515 	smladcs	r1, r5, r5, r1
    42b8:	01134919 	tsteq	r3, r9, lsl r9
    42bc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    42c0:	13490005 	movtne	r0, #36869	; 0x9005
    42c4:	13170000 	tstne	r7, #0
    42c8:	0b0e0301 	bleq	384ed4 <__ccfg+0x364f2c>
    42cc:	3b0b3a05 	blcc	2d2ae8 <__ccfg+0x2b2b40>
    42d0:	010b3905 	tsteq	fp, r5, lsl #18
    42d4:	18000013 	stmdane	r0, {r0, r1, r4}
    42d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    42e4:	00000b38 	andeq	r0, r0, r8, lsr fp
    42e8:	03000d19 	movweq	r0, #3353	; 0xd19
    42ec:	3b0b3a0e 	blcc	2d2b2c <__ccfg+0x2b2b84>
    42f0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42f4:	00053813 	andeq	r3, r5, r3, lsl r8
    42f8:	01131a00 	tsteq	r3, r0, lsl #20
    42fc:	0b0b0e03 	bleq	2c7b10 <__ccfg+0x2a7b68>
    4300:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4304:	13010b39 	movwne	r0, #6969	; 0x1b39
    4308:	131b0000 	tstne	fp, #0
    430c:	3a0b0b01 	bcc	2c6f18 <__ccfg+0x2a6f70>
    4310:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4314:	0013010b 	andseq	r0, r3, fp, lsl #2
    4318:	01171c00 	tsteq	r7, r0, lsl #24
    431c:	0b3a0b0b 	bleq	e86f50 <__ccfg+0xe66fa8>
    4320:	0b39053b 	bleq	e45814 <__ccfg+0xe2586c>
    4324:	00001301 	andeq	r1, r0, r1, lsl #6
    4328:	03000d1d 	movweq	r0, #3357	; 0xd1d
    432c:	3b0b3a0e 	blcc	2d2b6c <__ccfg+0x2b2bc4>
    4330:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4334:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4338:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    433c:	00001301 	andeq	r1, r0, r1, lsl #6
    4340:	0300341f 	movweq	r3, #1055	; 0x41f
    4344:	3b0b3a0e 	blcc	2d2b84 <__ccfg+0x2b2bdc>
    4348:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    434c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4350:	20000019 	andcs	r0, r0, r9, lsl r0
    4354:	00000026 	andeq	r0, r0, r6, lsr #32
    4358:	03003421 	movweq	r3, #1057	; 0x421
    435c:	3b0b3a0e 	blcc	2d2b9c <__ccfg+0x2b2bf4>
    4360:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4364:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4368:	22000019 	andcs	r0, r0, #25
    436c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4370:	0b3a0e03 	bleq	e87b84 <__ccfg+0xe67bdc>
    4374:	0b390b3b 	bleq	e47068 <__ccfg+0xe270c0>
    4378:	13491927 	movtne	r1, #39207	; 0x9927
    437c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4380:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4384:	00130119 	andseq	r0, r3, r9, lsl r1
    4388:	00052300 	andeq	r2, r5, r0, lsl #6
    438c:	0b3a0e03 	bleq	e87ba0 <__ccfg+0xe67bf8>
    4390:	0b390b3b 	bleq	e47084 <__ccfg+0xe270dc>
    4394:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4398:	05240000 	streq	r0, [r4, #-0]!
    439c:	3a0e0300 	bcc	384fa4 <__ccfg+0x364ffc>
    43a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    43a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    43a8:	1742b717 	smlaldne	fp, r2, r7, r7
    43ac:	34250000 	strtcc	r0, [r5], #-0
    43b0:	3a080300 	bcc	204fb8 <__ccfg+0x1e5010>
    43b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    43b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    43bc:	1742b717 	smlaldne	fp, r2, r7, r7
    43c0:	34260000 	strtcc	r0, [r6], #-0
    43c4:	3a0e0300 	bcc	384fcc <__ccfg+0x365024>
    43c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    43cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    43d0:	1742b717 	smlaldne	fp, r2, r7, r7
    43d4:	01000000 	mrseq	r0, (UNDEF: 0)
    43d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    43dc:	0e030b13 	vmoveq.32	d3[0], r0
    43e0:	01110e1b 	tsteq	r1, fp, lsl lr
    43e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    43e8:	24020000 	strcs	r0, [r2], #-0
    43ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43f0:	000e030b 	andeq	r0, lr, fp, lsl #6
    43f4:	00240300 	eoreq	r0, r4, r0, lsl #6
    43f8:	0b3e0b0b 	bleq	f8702c <__ccfg+0xf67084>
    43fc:	00000803 	andeq	r0, r0, r3, lsl #16
    4400:	03001604 	movweq	r1, #1540	; 0x604
    4404:	3b0b3a0e 	blcc	2d2c44 <__ccfg+0x2b2c9c>
    4408:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    440c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    4410:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    4414:	0b3b0b3a 	bleq	ec7104 <__ccfg+0xea715c>
    4418:	13490b39 	movtne	r0, #39737	; 0x9b39
    441c:	17060000 	strne	r0, [r6, -r0]
    4420:	3a0b0b01 	bcc	2c702c <__ccfg+0x2a7084>
    4424:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4428:	0013010b 	andseq	r0, r3, fp, lsl #2
    442c:	000d0700 	andeq	r0, sp, r0, lsl #14
    4430:	0b3a0e03 	bleq	e87c44 <__ccfg+0xe67c9c>
    4434:	0b390b3b 	bleq	e47128 <__ccfg+0xe27180>
    4438:	00001349 	andeq	r1, r0, r9, asr #6
    443c:	49010108 	stmdbmi	r1, {r3, r8}
    4440:	00130113 	andseq	r0, r3, r3, lsl r1
    4444:	00210900 	eoreq	r0, r1, r0, lsl #18
    4448:	0b2f1349 	bleq	bc9174 <__ccfg+0xba91cc>
    444c:	130a0000 	movwne	r0, #40960	; 0xa000
    4450:	3a0b0b01 	bcc	2c705c <__ccfg+0x2a70b4>
    4454:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4458:	0013010b 	andseq	r0, r3, fp, lsl #2
    445c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4460:	0b3a0e03 	bleq	e87c74 <__ccfg+0xe67ccc>
    4464:	0b390b3b 	bleq	e47158 <__ccfg+0xe271b0>
    4468:	0b381349 	bleq	e09194 <__ccfg+0xde91ec>
    446c:	0f0c0000 	svceq	0x000c0000
    4470:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4474:	01130d00 	tsteq	r3, r0, lsl #26
    4478:	0b0b0e03 	bleq	2c7c8c <__ccfg+0x2a7ce4>
    447c:	0b3b0b3a 	bleq	ec716c <__ccfg+0xea71c4>
    4480:	13010b39 	movwne	r0, #6969	; 0x1b39
    4484:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4488:	3a080300 	bcc	205090 <__ccfg+0x1e50e8>
    448c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4490:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4494:	0f00000b 	svceq	0x0000000b
    4498:	0b0b000f 	bleq	2c44dc <__ccfg+0x2a4534>
    449c:	00001349 	andeq	r1, r0, r9, asr #6
    44a0:	03011310 	movweq	r1, #4880	; 0x1310
    44a4:	3a050b0e 	bcc	1470e4 <__ccfg+0x12713c>
    44a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    44ac:	0013010b 	andseq	r0, r3, fp, lsl #2
    44b0:	000d1100 	andeq	r1, sp, r0, lsl #2
    44b4:	0b3a0e03 	bleq	e87cc8 <__ccfg+0xe67d20>
    44b8:	0b390b3b 	bleq	e471ac <__ccfg+0xe27204>
    44bc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    44c0:	15120000 	ldrne	r0, [r2, #-0]
    44c4:	00192700 	andseq	r2, r9, r0, lsl #14
    44c8:	01151300 	tsteq	r5, r0, lsl #6
    44cc:	13491927 	movtne	r1, #39207	; 0x9927
    44d0:	00001301 	andeq	r1, r0, r1, lsl #6
    44d4:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    44d8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    44dc:	13490026 	movtne	r0, #36902	; 0x9026
    44e0:	13160000 	tstne	r6, #0
    44e4:	0b0e0301 	bleq	3850f0 <__ccfg+0x365148>
    44e8:	3b0b3a05 	blcc	2d2d04 <__ccfg+0x2b2d5c>
    44ec:	010b3905 	tsteq	fp, r5, lsl #18
    44f0:	17000013 	smladne	r0, r3, r0, r0
    44f4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    44f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44fc:	13490b39 	movtne	r0, #39737	; 0x9b39
    4500:	00000b38 	andeq	r0, r0, r8, lsr fp
    4504:	03000d18 	movweq	r0, #3352	; 0xd18
    4508:	3b0b3a0e 	blcc	2d2d48 <__ccfg+0x2b2da0>
    450c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4510:	00053813 	andeq	r3, r5, r3, lsl r8
    4514:	01131900 	tsteq	r3, r0, lsl #18
    4518:	0b0b0e03 	bleq	2c7d2c <__ccfg+0x2a7d84>
    451c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4520:	13010b39 	movwne	r0, #6969	; 0x1b39
    4524:	131a0000 	tstne	sl, #0
    4528:	3a0b0b01 	bcc	2c7134 <__ccfg+0x2a718c>
    452c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4530:	0013010b 	andseq	r0, r3, fp, lsl #2
    4534:	01171b00 	tsteq	r7, r0, lsl #22
    4538:	0b3a0b0b 	bleq	e8716c <__ccfg+0xe671c4>
    453c:	0b39053b 	bleq	e45a30 <__ccfg+0xe25a88>
    4540:	00001301 	andeq	r1, r0, r1, lsl #6
    4544:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4548:	3b0b3a0e 	blcc	2d2d88 <__ccfg+0x2b2de0>
    454c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4550:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4554:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4558:	0000193c 	andeq	r1, r0, ip, lsr r9
    455c:	2701151e 	smladcs	r1, lr, r5, r1
    4560:	00130119 	andseq	r0, r3, r9, lsl r1
    4564:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4568:	0b3a0e03 	bleq	e87d7c <__ccfg+0xe67dd4>
    456c:	0b39053b 	bleq	e45a60 <__ccfg+0xe25ab8>
    4570:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4574:	0000193c 	andeq	r1, r0, ip, lsr r9
    4578:	03003420 	movweq	r3, #1056	; 0x420
    457c:	3b0b3a0e 	blcc	2d2dbc <__ccfg+0x2b2e14>
    4580:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4584:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4588:	21000019 	tstcs	r0, r9, lsl r0
    458c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4590:	0b3a0e03 	bleq	e87da4 <__ccfg+0xe67dfc>
    4594:	0b390b3b 	bleq	e47288 <__ccfg+0xe272e0>
    4598:	13491927 	movtne	r1, #39207	; 0x9927
    459c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    45a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    45a4:	00130119 	andseq	r0, r3, r9, lsl r1
    45a8:	00342200 	eorseq	r2, r4, r0, lsl #4
    45ac:	0b3a0e03 	bleq	e87dc0 <__ccfg+0xe67e18>
    45b0:	0b390b3b 	bleq	e472a4 <__ccfg+0xe272fc>
    45b4:	17021349 	strne	r1, [r2, -r9, asr #6]
    45b8:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    45bc:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    45c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    45c4:	0b3b0b3a 	bleq	ec72b4 <__ccfg+0xea730c>
    45c8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    45cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    45d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    45d4:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    45d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    45dc:	0b3b0b3a 	bleq	ec72cc <__ccfg+0xea7324>
    45e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    45e4:	00001802 	andeq	r1, r0, r2, lsl #16
    45e8:	01110100 	tsteq	r1, r0, lsl #2
    45ec:	0b130e25 	bleq	4c7e88 <__ccfg+0x4a7ee0>
    45f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    45f4:	00001710 	andeq	r1, r0, r0, lsl r7
    45f8:	0b002402 	bleq	d608 <__exidx_end+0x7888>
    45fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4600:	03000008 	movweq	r0, #8
    4604:	0b0b0024 	bleq	2c469c <__ccfg+0x2a46f4>
    4608:	0e030b3e 	vmoveq.16	d3[0], r0
    460c:	16040000 	strne	r0, [r4], -r0
    4610:	3a0e0300 	bcc	385218 <__ccfg+0x365270>
    4614:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4618:	0013490b 	andseq	r4, r3, fp, lsl #18
    461c:	00160500 	andseq	r0, r6, r0, lsl #10
    4620:	0b3a0e03 	bleq	e87e34 <__ccfg+0xe67e8c>
    4624:	0b390b3b 	bleq	e47318 <__ccfg+0xe27370>
    4628:	00001349 	andeq	r1, r0, r9, asr #6
    462c:	0b011706 	bleq	4a24c <__ccfg+0x2a2a4>
    4630:	3b0b3a0b 	blcc	2d2e64 <__ccfg+0x2b2ebc>
    4634:	010b390b 	tsteq	fp, fp, lsl #18
    4638:	07000013 	smladeq	r0, r3, r0, r0
    463c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4640:	0b3b0b3a 	bleq	ec7330 <__ccfg+0xea7388>
    4644:	13490b39 	movtne	r0, #39737	; 0x9b39
    4648:	01080000 	mrseq	r0, (UNDEF: 8)
    464c:	01134901 	tsteq	r3, r1, lsl #18
    4650:	09000013 	stmdbeq	r0, {r0, r1, r4}
    4654:	13490021 	movtne	r0, #36897	; 0x9021
    4658:	00000b2f 	andeq	r0, r0, pc, lsr #22
    465c:	0b01130a 	bleq	4928c <__ccfg+0x292e4>
    4660:	3b0b3a0b 	blcc	2d2e94 <__ccfg+0x2b2eec>
    4664:	010b390b 	tsteq	fp, fp, lsl #18
    4668:	0b000013 	bleq	46bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x70>
    466c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4670:	0b3b0b3a 	bleq	ec7360 <__ccfg+0xea73b8>
    4674:	13490b39 	movtne	r0, #39737	; 0x9b39
    4678:	00000b38 	andeq	r0, r0, r8, lsr fp
    467c:	0b000f0c 	bleq	82b4 <__exidx_end+0x2534>
    4680:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    4684:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4688:	0b3a0b0b 	bleq	e872bc <__ccfg+0xe67314>
    468c:	0b390b3b 	bleq	e47380 <__ccfg+0xe273d8>
    4690:	00001301 	andeq	r1, r0, r1, lsl #6
    4694:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4698:	3b0b3a08 	blcc	2d2ec0 <__ccfg+0x2b2f18>
    469c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    46a0:	000b3813 	andeq	r3, fp, r3, lsl r8
    46a4:	000f0f00 	andeq	r0, pc, r0, lsl #30
    46a8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    46ac:	13100000 	tstne	r0, #0
    46b0:	0b0e0301 	bleq	3852bc <__ccfg+0x365314>
    46b4:	3b0b3a05 	blcc	2d2ed0 <__ccfg+0x2b2f28>
    46b8:	010b390b 	tsteq	fp, fp, lsl #18
    46bc:	11000013 	tstne	r0, r3, lsl r0
    46c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    46c4:	0b3b0b3a 	bleq	ec73b4 <__ccfg+0xea740c>
    46c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    46cc:	00000538 	andeq	r0, r0, r8, lsr r5
    46d0:	27001512 	smladcs	r0, r2, r5, r1
    46d4:	13000019 	movwne	r0, #25
    46d8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    46dc:	13011349 	movwne	r1, #4937	; 0x1349
    46e0:	05140000 	ldreq	r0, [r4, #-0]
    46e4:	00134900 	andseq	r4, r3, r0, lsl #18
    46e8:	00261500 	eoreq	r1, r6, r0, lsl #10
    46ec:	00001349 	andeq	r1, r0, r9, asr #6
    46f0:	03011316 	movweq	r1, #4886	; 0x1316
    46f4:	3a050b0e 	bcc	147334 <__ccfg+0x12738c>
    46f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    4700:	000d1700 	andeq	r1, sp, r0, lsl #14
    4704:	0b3a0e03 	bleq	e87f18 <__ccfg+0xe67f70>
    4708:	0b39053b 	bleq	e45bfc <__ccfg+0xe25c54>
    470c:	0b381349 	bleq	e09438 <__ccfg+0xde9490>
    4710:	0d180000 	ldceq	0, cr0, [r8, #-0]
    4714:	3a0e0300 	bcc	38531c <__ccfg+0x365374>
    4718:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    471c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4720:	19000005 	stmdbne	r0, {r0, r2}
    4724:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4728:	0b3a0b0b 	bleq	e8735c <__ccfg+0xe673b4>
    472c:	0b39053b 	bleq	e45c20 <__ccfg+0xe25c78>
    4730:	00001301 	andeq	r1, r0, r1, lsl #6
    4734:	0b01131a 	bleq	493a4 <__ccfg+0x293fc>
    4738:	3b0b3a0b 	blcc	2d2f6c <__ccfg+0x2b2fc4>
    473c:	010b3905 	tsteq	fp, r5, lsl #18
    4740:	1b000013 	blne	4794 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x148>
    4744:	0b0b0117 	bleq	2c4ba8 <__ccfg+0x2a4c00>
    4748:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    474c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4750:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    4754:	3a0e0300 	bcc	38535c <__ccfg+0x3653b4>
    4758:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    475c:	0013490b 	andseq	r4, r3, fp, lsl #18
    4760:	00131d00 	andseq	r1, r3, r0, lsl #26
    4764:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4768:	151e0000 	ldrne	r0, [lr, #-0]
    476c:	01192701 	tsteq	r9, r1, lsl #14
    4770:	1f000013 	svcne	0x00000013
    4774:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4778:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    477c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4780:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4784:	34200000 	strtcc	r0, [r0], #-0
    4788:	3a0e0300 	bcc	385390 <__ccfg+0x3653e8>
    478c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4790:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4794:	21000018 	tstcs	r0, r8, lsl r0
    4798:	13470034 	movtne	r0, #28724	; 0x7034
    479c:	00001802 	andeq	r1, r0, r2, lsl #16
    47a0:	01110100 	tsteq	r1, r0, lsl #2
    47a4:	0b130e25 	bleq	4c8040 <__ccfg+0x4a8098>
    47a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    47ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
    47b0:	00001710 	andeq	r1, r0, r0, lsl r7
    47b4:	0b002402 	bleq	d7c4 <__exidx_end+0x7a44>
    47b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    47bc:	0300000e 	movweq	r0, #14
    47c0:	0b0b0024 	bleq	2c4858 <__ccfg+0x2a48b0>
    47c4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    47c8:	16040000 	strne	r0, [r4], -r0
    47cc:	3a0e0300 	bcc	3853d4 <__ccfg+0x36542c>
    47d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47d4:	0013490b 	andseq	r4, r3, fp, lsl #18
    47d8:	000f0500 	andeq	r0, pc, r0, lsl #10
    47dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    47e0:	15060000 	strne	r0, [r6, #-0]
    47e4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    47e8:	00130113 	andseq	r0, r3, r3, lsl r1
    47ec:	00050700 	andeq	r0, r5, r0, lsl #14
    47f0:	00001349 	andeq	r1, r0, r9, asr #6
    47f4:	00002608 	andeq	r2, r0, r8, lsl #12
    47f8:	00340900 	eorseq	r0, r4, r0, lsl #18
    47fc:	0b3a0e03 	bleq	e88010 <__ccfg+0xe68068>
    4800:	0b390b3b 	bleq	e474f4 <__ccfg+0xe2754c>
    4804:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4808:	0000193c 	andeq	r1, r0, ip, lsr r9
    480c:	0301040a 	movweq	r0, #5130	; 0x140a
    4810:	0b0b3e0e 	bleq	2d4050 <__ccfg+0x2b40a8>
    4814:	3a13490b 	bcc	4d6c48 <__ccfg+0x4b6ca0>
    4818:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    481c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4820:	00280b00 	eoreq	r0, r8, r0, lsl #22
    4824:	0b1c0e03 	bleq	708038 <__ccfg+0x6e8090>
    4828:	010c0000 	mrseq	r0, (UNDEF: 12)
    482c:	01134901 	tsteq	r3, r1, lsl #18
    4830:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    4834:	00000021 	andeq	r0, r0, r1, lsr #32
    4838:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    483c:	0f000013 	svceq	0x00000013
    4840:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4844:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4848:	13490b39 	movtne	r0, #39737	; 0x9b39
    484c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4850:	13100000 	tstne	r0, #0
    4854:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4858:	11000019 	tstne	r0, r9, lsl r0
    485c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4860:	17120000 	ldrne	r0, [r2, -r0]
    4864:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4868:	13000019 	movwne	r0, #25
    486c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4870:	0b3a0b0b 	bleq	e874a4 <__ccfg+0xe674fc>
    4874:	0b39053b 	bleq	e45d68 <__ccfg+0xe25dc0>
    4878:	00001301 	andeq	r1, r0, r1, lsl #6
    487c:	03000d14 	movweq	r0, #3348	; 0xd14
    4880:	3b0b3a0e 	blcc	2d30c0 <__ccfg+0x2b3118>
    4884:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4888:	000b3813 	andeq	r3, fp, r3, lsl r8
    488c:	00211500 	eoreq	r1, r1, r0, lsl #10
    4890:	0b2f1349 	bleq	bc95bc <__ccfg+0xba9614>
    4894:	04160000 	ldreq	r0, [r6], #-0
    4898:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    489c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    48a0:	3b0b3a13 	blcc	2d30f4 <__ccfg+0x2b314c>
    48a4:	010b3905 	tsteq	fp, r5, lsl #18
    48a8:	17000013 	smladne	r0, r3, r0, r0
    48ac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    48b8:	00000b38 	andeq	r0, r0, r8, lsr fp
    48bc:	0b011718 	bleq	4a524 <__ccfg+0x2a57c>
    48c0:	3b0b3a0b 	blcc	2d30f4 <__ccfg+0x2b314c>
    48c4:	010b3905 	tsteq	fp, r5, lsl #18
    48c8:	19000013 	stmdbne	r0, {r0, r1, r4}
    48cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    48d8:	161a0000 	ldrne	r0, [sl], -r0
    48dc:	3a0e0300 	bcc	3854e4 <__ccfg+0x36553c>
    48e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    48e8:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    48ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    48f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    48f8:	01111349 	tsteq	r1, r9, asr #6
    48fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    4900:	00194297 	mulseq	r9, r7, r2
    4904:	00051c00 	andeq	r1, r5, r0, lsl #24
    4908:	0b3a0803 	bleq	e8691c <__ccfg+0xe66974>
    490c:	0b39053b 	bleq	e45e00 <__ccfg+0xe25e58>
    4910:	17021349 	strne	r1, [r2, -r9, asr #6]
    4914:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4918:	00341d00 	eorseq	r1, r4, r0, lsl #26
    491c:	0b3a0803 	bleq	e86930 <__ccfg+0xe66988>
    4920:	0b39053b 	bleq	e45e14 <__ccfg+0xe25e6c>
    4924:	00001349 	andeq	r1, r0, r9, asr #6
    4928:	55010b1e 	strpl	r0, [r1, #-2846]	; 0xfffff4e2
    492c:	1f000017 	svcne	0x00000017
    4930:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4934:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4938:	13490b39 	movtne	r0, #39737	; 0x9b39
    493c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4940:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000724 	andeq	r0, r0, r4, lsr #14
       4:	00000778 	andeq	r0, r0, r8, ror r7
       8:	4a500001 	bmi	1400014 <__ccfg+0x13e006c>
       c:	4c00000c 	stcmi	0, cr0, [r0], {12}
    return node->data_base.item_array[index];
      10:	0100000c 	tsteq	r0, ip
      14:	0c6c5000 	stcleq	0, cr5, [ip], #-0
      18:	0c6f0000 	stcleq	0, cr0, [pc], #-0	; 20 <g_pfnVectors+0x20>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	00083c00 	andeq	r3, r8, r0, lsl #24
      2c:	00084000 	andeq	r4, r8, r0
      30:	91000200 	mrsls	r0, R8_usr
      34:	00000066 	andeq	r0, r0, r6, rrx
      38:	00000000 	andeq	r0, r0, r0
      3c:	00083c00 	andeq	r3, r8, r0, lsl #24
			i = k;
      40:	00084000 	andeq	r4, r8, r0
				j->Next = k;
      44:	53000100 	movwpl	r0, #256	; 0x100
	...
}
      50:	00000882 	andeq	r0, r0, r2, lsl #17
      54:	00000892 	muleq	r0, r2, r8
		release;
      58:	14540001 	ldrbne	r0, [r4], #-1
      5c:	34000009 	strcc	r0, [r0], #-9
			nq++;
      60:	01000009 	tsteq	r0, r9
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00005400 	andeq	r5, r0, r0, lsl #8
      68:	00000000 	andeq	r0, r0, r0
      6c:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
      70:	08620000 	stmdaeq	r2!, {}^	; <UNPREDICTABLE>
      74:	00010000 	andeq	r0, r1, r0
      78:	00000051 	andeq	r0, r0, r1, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	00086000 	andeq	r6, r8, r0
      84:	00086200 	andeq	r6, r8, r0, lsl #4
      88:	52000100 	andpl	r0, r0, #0, 2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	000008ce 	andeq	r0, r0, lr, asr #17
      98:	000008d9 	ldrdeq	r0, [r0], -r9
	if (baction == NULL)
      9c:	d9500001 	ldmdble	r0, {r0}^
      a0:	f4000008 	vst4.8	{d0-d3}, [r0], r8
	(*baction) (pbutton);
      a4:	01000008 	tsteq	r0, r8
endthread
      a8:	00005400 	andeq	r5, r0, r0, lsl #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	09ba0000 	ldmibeq	sl!, {}	; <UNPREDICTABLE>
endthread
      b4:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
      b8:	00010000 	andeq	r0, r1, r0
      bc:	000c0c54 	andeq	r0, ip, r4, asr ip
      c0:	000c2a00 	andeq	r2, ip, r0, lsl #20
      c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
fsm sender(struct ResponseMessage *message) {
      d0:	00000a14 	andeq	r0, r0, r4, lsl sl
}
      d4:	00000a21 	andeq	r0, r0, r1, lsr #20
      d8:	21500001 	cmpcs	r0, r1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	5a00000a 	bpl	10c <_Min_Stack_Size+0xc>
      e0:	0100000a 	tsteq	r0, sl
      e4:	00005400 	andeq	r5, r0, r0, lsl #8
      e8:	00000000 	andeq	r0, r0, r0
      ec:	0aba0000 	beq	fee800f4 <_estack+0xdee7b0f4>
		packet[1] = message->gid;
      f0:	0ac70000 	beq	ff1c00f8 <_estack+0xdf1bb0f8>
      f4:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	000ac750 	andeq	ip, sl, r0, asr r7
      fc:	000af800 	andeq	pc, sl, r0, lsl #16
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		*p = message->request_number;p++;
     10c:	00000b62 	andeq	r0, r0, r2, ror #22
		*p = message->sender_id;p++;
     110:	00000b6f 	andeq	r0, r0, pc, ror #22
		*p = message->receiver_id;p++;
     114:	6f500001 	svcvs	0x00500001
		switch(message->tpe) {
     118:	ae00000b 	cdpge	0, 0, cr0, cr0, cr11, {0}
     11c:	0100000b 	tsteq	r0, fp
     120:	00005400 	andeq	r5, r0, r0, lsl #8
		tcv_endp(packet);
     124:	00000000 	andeq	r0, r0, r0
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	03080000 	movweq	r0, #32768	; 0x8000
     12c:	032a0000 			; <UNDEFINED> instruction: 0x032a0000
}
     130:	00010000 	andeq	r0, r1, r0
		finish;
     134:	00070850 	andeq	r0, r7, r0, asr r8
     138:	00070b00 	andeq	r0, r7, r0, lsl #22
     13c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				strncpy(p, message->record, sizeof(message->record));
     148:	00000314 	andeq	r0, r0, r4, lsl r3
     14c:	000003ae 	andeq	r0, r0, lr, lsr #7
     150:	c0540001 	subsgt	r0, r4, r1
				strncpy(p, message->record, sizeof(message->record));
     154:	ee000003 	cdp	0, 0, cr0, cr0, cr3, {0}
     158:	01000003 	tsteq	r0, r3
				strncpy(p, message->record, sizeof(message->record));
     15c:	048a5400 	streq	r5, [sl], #1024	; 0x400
				break;
     160:	04d80000 	ldrbeq	r0, [r8], #0
				*p = message->record_index;p++;
     164:	00010000 	andeq	r0, r1, r0
				*p = message->padding;
     168:	00050254 	andeq	r0, r5, r4, asr r2
				break;
     16c:	00056600 	andeq	r6, r5, r0, lsl #12
     170:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     174:	0000057c 	andeq	r0, r0, ip, ror r5
     178:	0000066a 	andeq	r0, r0, sl, ror #12
     17c:	82540001 	subshi	r0, r4, #1
     180:	24000006 	strcs	r0, [r0], #-6
struct Node* init_node(struct Node* node){
     184:	01000007 	tsteq	r0, r7
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	00005400 	andeq	r5, r0, r0, lsl #8
     18c:	00000000 	andeq	r0, r0, r0
     190:	03880000 	orreq	r0, r8, #0
    node2->gid = 0;
     194:	038e0000 	orreq	r0, lr, #0
    node2->data_base.item_count = 0;
     198:	00010000 	andeq	r0, r1, r0
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	00038e50 	andeq	r8, r3, r0, asr lr
     1a0:	0003ae00 	andeq	sl, r3, r0, lsl #28
     1a4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1b0:	000004ec 	andeq	r0, r0, ip, ror #9
    node2->index = 0;
     1b4:	000004ee 	andeq	r0, r0, lr, ror #9
};
     1b8:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    return (uint8_t) (rand() % 255);
     1bc:	02000004 	andeq	r0, r0, #4
     1c0:	01000005 	tsteq	r0, r5
     1c4:	00005400 	andeq	r5, r0, r0, lsl #8
}
     1c8:	00000000 	andeq	r0, r0, r0
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	04ce0000 	strbeq	r0, [lr], #0
     1d0:	05020000 	streq	r0, [r2, #-0]
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	00010000 	andeq	r0, r1, r0
     1d8:	00055c56 	andeq	r5, r5, r6, asr ip
     1dc:	00057400 	andeq	r7, r5, r0, lsl #8
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	0000063e 	andeq	r0, r0, lr, lsr r6
     1f0:	00000644 	andeq	r0, r0, r4, asr #12
     1f4:	44550001 	ldrbmi	r0, [r5], #-1
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	58000006 	stmdapl	r0, {r1, r2}
     1fc:	02000006 	andeq	r0, r0, #6
     200:	00087800 	andeq	r7, r8, r0, lsl #16
     204:	00000000 	andeq	r0, r0, r0
     208:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
                node->data_base.item_array[i].owner_id = owner_id;
     20c:	58000006 	stmdapl	r0, {r1, r2}
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	01000006 	tsteq	r0, r6
                node->data_base.item_count += 1;
     214:	00005400 	andeq	r5, r0, r0, lsl #8
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	00000000 	andeq	r0, r0, r0
                node->data_base.item_count += 1;
     21c:	00c80000 	sbceq	r0, r8, r0
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	00d90000 	sbcseq	r0, r9, r0
     224:	00010000 	andeq	r0, r1, r0
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	0000da50 	andeq	sp, r0, r0, asr sl
     22c:	0000eb00 	andeq	lr, r0, r0, lsl #22
     230:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23c:	000000dc 	ldrdeq	r0, [r0], -ip
     240:	000000e0 	andeq	r0, r0, r0, ror #1
        return false;
     244:	00730005 	rsbseq	r0, r3, r5
     248:	00082306 	andeq	r2, r8, r6, lsl #6
     24c:	00000000 	andeq	r0, r0, r0
            node->nnodes[i] = 0; // set to null byte
     250:	50000000 	andpl	r0, r0, r0
     254:	52000001 	andpl	r0, r0, #1
     258:	01000001 	tsteq	r0, r1
     25c:	00005000 	andeq	r5, r0, r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	00000000 	andeq	r0, r0, r0
};
     264:	02b60000 	adcseq	r0, r6, #0
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	02be0000 	adcseq	r0, lr, #0
     26c:	00010000 	andeq	r0, r1, r0
     270:	00000050 	andeq	r0, r0, r0, asr r0
     274:	00000000 	andeq	r0, r0, r0
        node->data_base.item_count -= 1;
     278:	0002b600 	andeq	fp, r2, r0, lsl #12
        node->data_base.item_array[index].timestamp = 0;
     27c:	0002cf00 	andeq	ip, r2, r0, lsl #30
        node->data_base.item_count -= 1;
     280:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     28c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
     290:	000002cf 	andeq	r0, r0, pc, asr #5
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	00520001 	subseq	r0, r2, r1
     298:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	b6000000 	strlt	r0, [r0], -r0
            node->data_base.item_array[i].timestamp = 0;
     2a0:	cf000002 	svcgt	0x00000002
    node->data_base.item_count = 0;
     2a4:	01000002 	tsteq	r0, r2
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	00005300 	andeq	r5, r0, r0, lsl #6
     2ac:	00000000 	andeq	r0, r0, r0
}
     2b0:	02da0000 	sbcseq	r0, sl, #0
        return true;
     2b4:	02fe0000 	rscseq	r0, lr, #0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b8:	00010000 	andeq	r0, r1, r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	0002fe50 	andeq	pc, r2, r0, asr lr	; <UNPREDICTABLE>
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	00030800 	andeq	r0, r3, r0, lsl #16
     2c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	response_message->tpe = RESPONSE;
     2d0:	00000266 	andeq	r0, r0, r6, ror #4
	response_message->status = status;
     2d4:	00000284 	andeq	r0, r0, r4, lsl #5
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	00500001 	subseq	r0, r0, r1
	response_message->gid = gid;
     2dc:	00000000 	andeq	r0, r0, r0
	response_message->sender_id = receiver_id;
     2e0:	66000000 	strvs	r0, [r0], -r0
	response_message->status = status;
     2e4:	72000002 	andvc	r0, r0, #2
	if (!padding){
     2e8:	01000002 	tsteq	r0, r2
		response_message->padding = padding;
     2ec:	00005100 	andeq	r5, r0, r0, lsl #2
	if (rec != NULL){
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	02500000 	subseq	r0, r0, #0
		strncpy(response_message->record, rec, 20);
     2f8:	025a0000 	subseq	r0, sl, #0
     2fc:	00010000 	andeq	r0, r1, r0
     300:	00000050 	andeq	r0, r0, r0, asr r0
};
     304:	00000000 	andeq	r0, r0, r0
fsm receiver(struct Node* node_db) {
     308:	0001cc00 	andeq	ip, r1, r0, lsl #24
     30c:	0001da00 	andeq	sp, r1, r0, lsl #20
     310:	50000100 	andpl	r0, r0, r0, lsl #2
     314:	000001da 	ldrdeq	r0, [r0], -sl
     318:	0000022e 	andeq	r0, r0, lr, lsr #4
     31c:	3a540001 	bcc	1500328 <__ccfg+0x14e0380>
     320:	50000002 	andpl	r0, r0, r2
     324:	01000002 	tsteq	r0, r2
		DEBUG_PRINT("\r\nreceiving 0");
     328:	00005400 	andeq	r5, r0, r0, lsl #8
     32c:	00000000 	andeq	r0, r0, r0
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	01cc0000 	biceq	r0, ip, r0
     334:	01dc0000 	bicseq	r0, ip, r0
     338:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	0001dc51 	andeq	sp, r1, r1, asr ip
     340:	0001df00 	andeq	sp, r1, r0, lsl #30
		DEBUG_PRINT("\r\nreceiving 2");
     344:	52000100 	andpl	r0, r0, #0, 2
     348:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	00000250 	andeq	r0, r0, r0, asr r2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	00570001 	subseq	r0, r7, r1
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	cc000000 	stcgt	0, cr0, [r0], {-0}
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	d6000001 	strle	r0, [r0], -r1
		switch (response_message_5->tpe){
     360:	01000001 	tsteq	r0, r1
     364:	00005200 	andeq	r5, r0, r0, lsl #4
     368:	00000000 	andeq	r0, r0, r0
     36c:	01f60000 	mvnseq	r0, r0
     370:	02280000 	eoreq	r0, r8, #0
     374:	00010000 	andeq	r0, r1, r0
     378:	00022856 	andeq	r2, r2, r6, asr r8
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37c:	00023600 	andeq	r3, r2, r0, lsl #12
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	59000100 	stmdbpl	r0, {r8}
	...
					DEBUG_PRINT("\r\nSending to sender");
     38c:	000001ee 	andeq	r0, r0, lr, ror #3
     390:	00000236 	andeq	r0, r0, r6, lsr r2
					DEBUG_PRINT("\r\nSending to sender");
     394:	3a560001 	bcc	15803a0 <__ccfg+0x15603f8>
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	42000002 	andmi	r0, r0, #2
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	01000002 	tsteq	r0, r2
					response_message_0->sender_id = node_db->id;
     3a0:	00005600 	andeq	r5, r0, r0, lsl #12
	...
					call sender(response_message_0, done_case);
     3b0:	00010000 	andeq	r0, r1, r0
     3b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     3d0:	00000184 	andeq	r0, r0, r4, lsl #3
     3d4:	0000018a 	andeq	r0, r0, sl, lsl #3
     3d8:	00500001 	subseq	r0, r0, r1
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	92000000 	andls	r0, r0, #0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	a2000001 	andge	r0, r0, #1
					node_db->index+=1;
     3e8:	01000001 	tsteq	r0, r1
     3ec:	01a25000 			; <UNDEFINED> instruction: 0x01a25000
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
		tcv_endp(incoming_packet);
     3f4:	00010000 	andeq	r0, r1, r0
     3f8:	00000054 	andeq	r0, r0, r4, asr r0
	...
		ser_out(response_1_create, "\r\nData Saved");
     408:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_out(response_1_delete, "\r\nRecord Deleted");
     41c:	00500001 	subseq	r0, r0, r1
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     42c:	01000000 	mrseq	r0, (UNDEF: 0)
     430:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     440:	00010000 	andeq	r0, r1, r0
     444:	00000052 	andeq	r0, r0, r2, asr r0
     448:	00000000 	andeq	r0, r0, r0
		proceed receiving;
     44c:	00028600 	andeq	r8, r2, r0, lsl #12
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	0002aa00 	andeq	sl, r2, r0, lsl #20
     454:	50000100 	andpl	r0, r0, r0, lsl #2
     458:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     45c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
		proceed receiving;
     460:	00500001 	subseq	r0, r0, r1
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	00000000 	andeq	r0, r0, r0
     468:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     46c:	9a000002 	bls	47c <receiver+0x174>
     470:	01000002 	tsteq	r0, r2
		proceed receiving;
     474:	02a25300 	adceq	r5, r2, #0, 6
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	02b00000 	adcseq	r0, r0, #0
     47c:	00010000 	andeq	r0, r1, r0
		proceed receiving;
     480:	00000053 	andeq	r0, r0, r3, asr r0
}
     484:	00000000 	andeq	r0, r0, r0
     488:	0002a400 	andeq	sl, r2, r0, lsl #8
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	0002aa00 	andeq	sl, r2, r0, lsl #20
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	00500001 	subseq	r0, r0, r1
					break;
     4a8:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	1c000000 	stcne	0, cr0, [r0], {-0}
     4b0:	1c000015 	stcne	0, cr0, [r0], {21}
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	01000015 	tsteq	r0, r5, lsl r0
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	00005000 	andeq	r5, r0, r0
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	13a80000 			; <UNDEFINED> instruction: 0x13a80000
     4c4:	13ae0000 			; <UNDEFINED> instruction: 0x13ae0000
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	00010000 	andeq	r0, r1, r0
						status = (uint8_t) SUCCESS;
     4cc:	0013de56 	andseq	sp, r3, r6, asr lr
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	0013e200 	andseq	lr, r3, r0, lsl #4
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     4e0:	00001292 	muleq	r0, r2, r2
     4e4:	00001296 	muleq	r0, r6, r2
     4e8:	ac520001 	mrrcge	0, 0, r0, r2, cr1
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	c0000012 	andgt	r0, r0, r2, lsl r0
     4f0:	01000012 	tsteq	r0, r2, lsl r0
					call sender(response_message_2, done_case);
     4f4:	00005200 	andeq	r5, r0, r0, lsl #4
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	129a0000 	addsne	r0, sl, #0
     500:	12a00000 	adcne	r0, r0, #0
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	00010000 	andeq	r0, r1, r0
						status = (uint8_t) DB_FULL;
     508:	00000053 	andeq	r0, r0, r3, asr r0
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	00125000 	andseq	r5, r2, r0
     514:	00125a00 	andseq	r5, r2, r0, lsl #20
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	53000100 	movwpl	r0, #256	; 0x100
	...
     524:	00001250 	andeq	r1, r0, r0, asr r2
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	00001256 	andeq	r1, r0, r6, asr r2
     52c:	00530001 	subseq	r0, r3, r1
     530:	00000000 	andeq	r0, r0, r0
     534:	e6000000 	str	r0, [r0], -r0
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	f0000012 			; <UNDEFINED> instruction: 0xf0000012
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	01000012 	tsteq	r0, r2, lsl r0
     540:	00005300 	andeq	r5, r0, r0, lsl #6
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	00000000 	andeq	r0, r0, r0
     548:	12d80000 	sbcsne	r0, r8, #0
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	13020000 	movwne	r0, #8192	; 0x2000
     550:	00010000 	andeq	r0, r1, r0
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	00000052 	andeq	r0, r0, r2, asr r0
     558:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	00132600 	andseq	r2, r3, r0, lsl #12
     560:	00133000 	andseq	r3, r3, r0
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	53000100 	movwpl	r0, #256	; 0x100
	...
     570:	00001318 	andeq	r1, r0, r8, lsl r3
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	0000134e 	andeq	r1, r0, lr, asr #6
     578:	00500001 	subseq	r0, r0, r1
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	00000000 	andeq	r0, r0, r0
     580:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
     584:	c8000011 	stmdagt	r0, {r0, r4}
     588:	01000011 	tsteq	r0, r1, lsl r0
     58c:	00005300 	andeq	r5, r0, r0, lsl #6
     590:	00000000 	andeq	r0, r0, r0
     594:	11b00000 	movsne	r0, r0
     598:	11da0000 	bicsne	r0, sl, r0
     59c:	00010000 	andeq	r0, r1, r0
     5a0:	00000052 	andeq	r0, r0, r2, asr r0
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	00121000 	andseq	r1, r2, r0
     5ac:	00121a00 	andseq	r1, r2, r0, lsl #20
     5b0:	53000100 	movwpl	r0, #256	; 0x100
	...
     5bc:	00001202 	andeq	r1, r0, r2, lsl #4
     5c0:	0000122a 	andeq	r1, r0, sl, lsr #4
     5c4:	00520001 	subseq	r0, r2, r1
     5c8:	00000000 	andeq	r0, r0, r0
     5cc:	e4000000 	str	r0, [r0], #-0
     5d0:	e800000c 	stmda	r0, {r2, r3}
     5d4:	0100000c 	tsteq	r0, ip
     5d8:	0ce85000 	stcleq	0, cr5, [r8]
     5dc:	0ceb0000 	stcleq	0, cr0, [fp]
     5e0:	00010000 	andeq	r0, r1, r0
     5e4:	00000051 	andeq	r0, r0, r1, asr r0
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	00107000 	andseq	r7, r0, r0
     5f0:	00107200 	andseq	r7, r0, r0, lsl #4
     5f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     600:	00001070 	andeq	r1, r0, r0, ror r0
     604:	00001086 	andeq	r1, r0, r6, lsl #1
     608:	86510001 	ldrbhi	r0, [r1], -r1
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	8a000010 	bhi	654 <receiver+0x34c>
     610:	01000010 	tsteq	r0, r0, lsl r0
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	10905500 	addsne	r5, r0, r0, lsl #10
				DEBUG_PRINT("\r\nretrieve rec");
     618:	10a60000 	adcne	r0, r6, r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	00010000 	andeq	r0, r1, r0
     620:	0010a655 	andseq	sl, r0, r5, asr r6
     624:	0010b400 	andseq	fp, r0, r0, lsl #8
     628:	51000100 	mrspl	r0, (UNDEF: 16)
     62c:	000010b4 	strheq	r1, [r0], -r4
     630:	000010e2 	andeq	r1, r0, r2, ror #1
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	e8550001 	ldmda	r5, {r0}^
     638:	10000010 	andne	r0, r0, r0, lsl r0
     63c:	01000011 	tsteq	r0, r1, lsl r0
    return node->data_base.item_array[index];
     640:	11105500 	tstne	r0, r0, lsl #10
     644:	111e0000 	tstne	lr, r0
     648:	00010000 	andeq	r0, r1, r0
     64c:	00111e51 	andseq	r1, r1, r1, asr lr
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	00112800 	andseq	r2, r1, r0, lsl #16
    return node->data_base.item_array[index];
     654:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	00001128 	andeq	r1, r0, r8, lsr #2
     65c:	00001133 	andeq	r1, r0, r3, lsr r1
     660:	33510001 	cmpcc	r1, #1
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	36000011 			; <UNDEFINED> instruction: 0x36000011
     668:	01000011 	tsteq	r0, r1, lsl r0
     66c:	11365500 	teqne	r6, r0, lsl #10
     670:	113c0000 	teqne	ip, r0
     674:	00010000 	andeq	r0, r1, r0
     678:	00113c51 	andseq	r3, r1, r1, asr ip
     67c:	00114e00 	andseq	r4, r1, r0, lsl #28
     680:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
				DEBUG_PRINT("\r\nResponse");
     684:	0000114e 	andeq	r1, r0, lr, asr #2
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	00001160 	andeq	r1, r0, r0, ror #2
				DEBUG_PRINT("\r\nResponse");
     68c:	60510001 	subsvs	r0, r1, r1
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	80000011 	andhi	r0, r0, r1, lsl r0
     694:	01000011 	tsteq	r0, r1, lsl r0
     698:	00005500 	andeq	r5, r0, r0, lsl #10
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	10700000 	rsbsne	r0, r0, r0
				if(!response_flag){
     6a4:	10860000 	addne	r0, r6, r0
     6a8:	00010000 	andeq	r0, r1, r0
					response_flag=1;
     6ac:	00108652 	andseq	r8, r0, r2, asr r6
					trigger(&response_flag);
     6b0:	00108c00 	andseq	r8, r0, r0, lsl #24
				switch(response_message_5->status){
     6b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
     6b8:	00001090 	muleq	r0, r0, r0
     6bc:	000010a0 	andeq	r1, r0, r0, lsr #1
     6c0:	a6560001 	ldrbge	r0, [r6], -r1
     6c4:	b4000010 	strlt	r0, [r0], #-16
						if (response_checker[0] == response_message_5->request_number){
     6c8:	01000010 	tsteq	r0, r0, lsl r0
     6cc:	10b45200 	adcsne	r5, r4, r0, lsl #4
     6d0:	10e40000 	rscne	r0, r4, r0
							switch(response_checker[1]){
     6d4:	00010000 	andeq	r0, r1, r0
     6d8:	0010e856 	andseq	lr, r0, r6, asr r8
     6dc:	00111000 	andseq	r1, r1, r0
     6e0:	56000100 	strpl	r0, [r0], -r0, lsl #2
						proceed response_4;
     6e4:	00001110 	andeq	r1, r0, r0, lsl r1
						break;
     6e8:	0000111e 	andeq	r1, r0, lr, lsl r1
									proceed response_1_delete;
     6ec:	1e520001 	cdpne	0, 5, cr0, cr2, cr1, {0}
									proceed response_1_retrieve;
     6f0:	28000011 	stmdacs	r0, {r0, r4}
						proceed response_2;
     6f4:	01000011 	tsteq	r0, r1, lsl r0
						proceed response_3;
     6f8:	11285600 			; <UNDEFINED> instruction: 0x11285600
						proceed response_4;
     6fc:	11330000 	teqne	r3, r0
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	00010000 	andeq	r0, r1, r0
     704:	00113652 	andseq	r3, r1, r2, asr r6
}
     708:	00114100 	andseq	r4, r1, r0, lsl #2
     70c:	52000100 	andpl	r0, r0, #0, 2
     710:	00001141 	andeq	r1, r0, r1, asr #2
     714:	0000114e 	andeq	r1, r0, lr, asr #2
     718:	4e540001 	cdpmi	0, 5, cr0, cr4, cr1, {0}
     71c:	80000011 	andhi	r0, r0, r1, lsl r0
     720:	01000011 	tsteq	r0, r1, lsl r0
fsm root {
     724:	00005200 	andeq	r5, r0, r0, lsl #4
     728:	00000000 	andeq	r0, r0, r0
     72c:	0fe40000 	svceq	0x00e40000
     730:	0ff20000 	svceq	0x00f20000
     734:	00010000 	andeq	r0, r1, r0
     738:	00000050 	andeq	r0, r0, r0, asr r0
     73c:	00000000 	andeq	r0, r0, r0
     740:	000fe400 	andeq	lr, pc, r0, lsl #8
     744:	000ff300 	andeq	pc, pc, r0, lsl #6
     748:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     754:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     758:	00000fab 	andeq	r0, r0, fp, lsr #31
     75c:	ce500001 	cdpgt	0, 5, cr0, cr0, cr1, {0}
     760:	e400000f 	str	r0, [r0], #-15
     764:	0100000f 	tsteq	r0, pc
     768:	00005000 	andeq	r5, r0, r0
     76c:	00000000 	andeq	r0, r0, r0
     770:	0e8a0000 	cdpeq	0, 8, cr0, cr10, cr0, {0}
		node_db = init_node(node_db);
     774:	0e9a0000 	cdpeq	0, 9, cr0, cr10, cr0, {0}
     778:	00010000 	andeq	r0, r1, r0
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	000e9a52 	andeq	r9, lr, r2, asr sl
     780:	000ea200 	andeq	sl, lr, r0, lsl #4
     784:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
		tcv_plug (0, &plug_null);
     788:	40092004 	andmi	r2, r9, r4
     78c:	00000f3c 	andeq	r0, r0, ip, lsr pc
		sfd = tcv_open (WNONE, 0, 0);
     790:	00000f40 	andeq	r0, r0, r0, asr #30
     794:	040c0005 	streq	r0, [ip], #-5
     798:	40400920 	submi	r0, r0, r0, lsr #18
		if (sfd < 0) {
     79c:	4200000f 	andmi	r0, r0, #15
     7a0:	0100000f 	tsteq	r0, pc
			diag("Cannot open tcv interface");
     7a4:	0f425200 	svceq	0x00425200
			halt();
     7a8:	0f440000 	svceq	0x00440000
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	00050000 	andeq	r0, r5, r0
     7b0:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
		runfsm receiver(node_db);
     7b4:	00000040 	andeq	r0, r0, r0, asr #32
     7b8:	00000000 	andeq	r0, r0, r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	000ea400 	andeq	sl, lr, r0, lsl #8
     7c0:	000eae00 	andeq	sl, lr, r0, lsl #28
     7c4:	52000100 	andpl	r0, r0, #0, 2
     7c8:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
     7cc:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     7d0:	c0520001 	subsgt	r0, r2, r1
     7d4:	ca00000e 	bgt	814 <root+0xf0>
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	0100000e 	tsteq	r0, lr
     7dc:	0ece5200 	cdpeq	2, 12, cr5, cr14, cr0, {0}
     7e0:	0eda0000 	cdpeq	0, 13, cr0, cr10, cr0, {0}
		switch(CHOICE) {
     7e4:	00010000 	andeq	r0, r1, r0
     7e8:	000f6652 	andeq	r6, pc, r2, asr r6	; <UNPREDICTABLE>
     7ec:	000f6a00 	andeq	r6, pc, r0, lsl #20
     7f0:	52000100 	andpl	r0, r0, #0, 2
	...
     7fc:	00000e2a 	andeq	r0, r0, sl, lsr #28
     800:	00000e3c 	andeq	r0, r0, ip, lsr lr
     804:	00540001 	subseq	r0, r4, r1
     808:	00000000 	andeq	r0, r0, r0
     80c:	c4000000 	strgt	r0, [r0], #-0
				proceed menu;
     810:	cc00000d 	stcgt	0, cr0, [r0], {13}
				proceed get_new_group_id;
     814:	0100000d 	tsteq	r0, sp
				proceed menu;
     818:	00005000 	andeq	r5, r0, r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	00000000 	andeq	r0, r0, r0
     820:	0dc40000 	stcleq	0, cr0, [r4]
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	0dca0000 	stcleq	0, cr0, [sl]
     828:	00010000 	andeq	r0, r1, r0
     82c:	000dca51 	andeq	ip, sp, r1, asr sl
		DEBUG_PRINT("setting node group ID");
     830:	000dcf00 	andeq	ip, sp, r0, lsl #30
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	52000100 	andpl	r0, r0, #0, 2
	...
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     848:	00500001 	subseq	r0, r0, r1
	...
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     858:	01000000 	mrseq	r0, (UNDEF: 0)
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	00005100 	andeq	r5, r0, r0, lsl #2
    node->id = id;
     860:	00000000 	andeq	r0, r0, r0
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	00010000 	andeq	r0, r1, r0
     868:	00000051 	andeq	r0, r0, r1, asr r0
	...
			proceed invalid_node_id;
     878:	52000100 	andpl	r0, r0, #0, 2
	...
		for(int i = 0; i < node_db->index; i++){
     884:	00540001 	subseq	r0, r4, r1
     888:	00000000 	andeq	r0, r0, r0
		proceed menu;
     88c:	84000000 	strhi	r0, [r0], #-0
     890:	8f00000d 	svchi	0x0000000d
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	0100000d 	tsteq	r0, sp
     898:	0d8f5000 	stceq	0, cr5, [pc]	; 8a0 <root+0x17c>
     89c:	0db80000 	ldceq	0, cr0, [r8]
     8a0:	00010000 	andeq	r0, r1, r0
		proceed get_new_node_id;
     8a4:	00000054 	andeq	r0, r0, r4, asr r0
		if (!clear_node_neighbour_array(node_db)){
     8a8:	00000000 	andeq	r0, r0, r0
     8ac:	000d4800 	andeq	r4, sp, r0, lsl #16
     8b0:	000d6000 	andeq	r6, sp, r0
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	50000100 	andpl	r0, r0, r0, lsl #2
     8b8:	00000d60 	andeq	r0, r0, r0, ror #26
			proceed error;
     8bc:	00000d78 	andeq	r0, r0, r8, ror sp
     8c0:	00540001 	subseq	r0, r4, r1
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	00000000 	andeq	r0, r0, r0
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	1c000000 	stcne	0, cr0, [r0], {-0}
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	2200000d 	andcs	r0, r0, #13
		request_packet->gid = node_db->gid;
     8d0:	0100000d 	tsteq	r0, sp
     8d4:	00005000 	andeq	r5, r0, r0
	...
		request_packet->sender_id = node_db->id;
     8e4:	00010000 	andeq	r0, r1, r0
		call sender(request_packet, wait_discovery);
     8e8:	00000050 	andeq	r0, r0, r0, asr r0
     8ec:	00000000 	andeq	r0, r0, r0
     8f0:	001e0000 	andseq	r0, lr, r0
			release;
     8f4:	001e1e00 	andseq	r1, lr, r0, lsl #28
				proceed get_new_node_id;
     8f8:	91000200 	mrsls	r0, R8_usr
				proceed clear_neighbour_array;
     8fc:	001e1e70 	andseq	r1, lr, r0, ror lr
				proceed create_proto_start;
     900:	001e4600 	andseq	r4, lr, r0, lsl #12
				proceed start_delete_proto;
     904:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				proceed start_retrieve_proto;
     908:	00001e4a 	andeq	r1, r0, sl, asr #28
				proceed display_db;
     90c:	00001e52 	andeq	r1, r0, r2, asr lr
				proceed del_local;
     910:	60540001 	subsvs	r0, r4, r1
			if(node_db->id == node_db->nnodes[i]){
     914:	aa00001e 	bge	994 <root+0x270>
     918:	0100001e 	tsteq	r0, lr, lsl r0
     91c:	1eae5600 	cdpne	6, 10, cr5, cr14, cr0, {0}
				strncpy(reason, "ID is already in use", 50);
     920:	1f260000 	svcne	0x00260000
     924:	00010000 	andeq	r0, r1, r0
     928:	00000056 	andeq	r0, r0, r6, asr r0
				proceed invalid_node_id;
     92c:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
     930:	001e6a00 	andseq	r6, lr, r0, lsl #20
		if (discovery_wait_flag == 0){
     934:	001ea800 	andseq	sl, lr, r0, lsl #16
     938:	51000100 	mrspl	r0, (UNDEF: 16)
			delay(3000, find_proto_start);
     93c:	00001eae 	andeq	r1, r0, lr, lsr #29
     940:	00001ec0 	andeq	r1, r0, r0, asr #29
     944:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
     948:	d600001e 			; <UNDEFINED> instruction: 0xd600001e
		if (discovery_wait_flag == 1){
     94c:	0100001e 	tsteq	r0, lr, lsl r0
			delay(3000, display_neighbour_nodes);
     950:	1ee85100 	cdpne	1, 14, cr5, cr8, cr0, {0}
     954:	1eec0000 	cdpne	0, 14, cr0, cr12, cr0, {0}
     958:	00010000 	andeq	r0, r1, r0
     95c:	001f0c51 	andseq	r0, pc, r1, asr ip	; <UNPREDICTABLE>
     960:	001f1000 	andseq	r1, pc, r0
     964:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     970:	00001e6a 	andeq	r1, r0, sl, ror #28
     974:	00001ea8 	andeq	r1, r0, r8, lsr #29
     978:	ae550001 	cdpge	0, 5, cr0, cr5, cr1, {0}
     97c:	d600001e 			; <UNDEFINED> instruction: 0xd600001e
     980:	0100001e 	tsteq	r0, lr, lsl r0
     984:	1ee85500 	cdpne	5, 14, cr5, cr8, cr0, {0}
     988:	1eec0000 	cdpne	0, 14, cr0, cr12, cr0, {0}
     98c:	00010000 	andeq	r0, r1, r0
     990:	001f0c55 	andseq	r0, pc, r5, asr ip	; <UNPREDICTABLE>
     994:	001f2600 	andseq	r2, pc, r0, lsl #12
     998:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if(node_db->index == 0){
     9a4:	00001edc 	ldrdeq	r1, [r0], -ip
     9a8:	00001ee8 	andeq	r1, r0, r8, ror #29
     9ac:	ec550001 	mrrc	0, 0, r0, r5, cr1
			proceed menu;
     9b0:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
fsm root {
     9b4:	0100001f 	tsteq	r0, pc, lsl r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	1f0a5500 	svcne	0x000a5500
		for (int i=0; i<node_db->index; i++) {
     9bc:	1f0c0000 	svcne	0x000c0000
     9c0:	00010000 	andeq	r0, r1, r0
     9c4:	00000055 	andeq	r0, r0, r5, asr r0
		proceed menu;
     9c8:	00000000 	andeq	r0, r0, r0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	001e9000 	andseq	r9, lr, r0
     9d0:	001ea800 	andseq	sl, lr, r0, lsl #16
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	00001ed6 	ldrdeq	r1, [r0], -r6
     9e4:	00001ee8 	andeq	r1, r0, r8, ror #29
			strncpy(reason, "Error: improper ID", 50);
     9e8:	ec540001 	mrrc	0, 0, r0, r4, cr1
     9ec:	0000001e 	andeq	r0, r0, lr, lsl r0
     9f0:	0100001f 	tsteq	r0, pc, lsl r0
			proceed error;
     9f4:	1f005400 	svcne	0x00005400
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	1f0c0000 	svcne	0x000c0000
     9fc:	00010000 	andeq	r0, r1, r0
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	00000053 	andeq	r0, r0, r3, asr r0
     a04:	00000000 	andeq	r0, r0, r0
     a08:	001f1800 	andseq	r1, pc, r0, lsl #16
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	001f2600 	andseq	r2, pc, r0, lsl #12
		create_message->gid = node_db->gid;
     a10:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		create_message->tpe = CREATE_RECORD;
     a1c:	000018e4 	andeq	r1, r0, r4, ror #17
		create_message->request_number = generate_request_num();
     a20:	000018f0 	strdeq	r1, [r0], -r0
		create_message->sender_id = node_db->id;
     a24:	00500001 	subseq	r0, r0, r1
	...
		create_message->receiver_id = user_provided_receiver_id;
     a34:	01000000 	mrseq	r0, (UNDEF: 0)
		strncpy(create_message->record, user_provided_record, 20);
     a38:	00005000 	andeq	r5, r0, r0
		response_checker[0] = create_message->request_number;
     a3c:	00000000 	andeq	r0, r0, r0
		call sender(create_message, wait);
     a40:	00010000 	andeq	r0, r1, r0
		response_checker[1] = create_message->tpe;
     a44:	00000050 	andeq	r0, r0, r0, asr r0
	...
		call sender(create_message, wait);
     a54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a60:	00510001 	subseq	r0, r1, r1
	...
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	01000000 	mrseq	r0, (UNDEF: 0)
     a74:	00005200 	andeq	r5, r0, r0, lsl #4
			strncpy(reason, "Error: improper node ID", 50);
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	00010000 	andeq	r0, r1, r0
			proceed error;
     a80:	00000052 	andeq	r0, r0, r2, asr r0
	...
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a90:	53000100 	movwpl	r0, #256	; 0x100
	...
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	00530001 	subseq	r0, r3, r1
			strncpy(reason, "Error: invalid index", 50);
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	01000000 	mrseq	r0, (UNDEF: 0)
     aa8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	00010000 	andeq	r0, r1, r0
		delete_record->gid = node_db->gid;
     abc:	00000050 	andeq	r0, r0, r0, asr r0
		delete_record->tpe = DELETE_RECORD;
     ac0:	00000000 	andeq	r0, r0, r0
		delete_record->request_number = generate_request_num();
     ac4:	001de800 	andseq	lr, sp, r0, lsl #16
     ac8:	001df000 	andseq	pc, sp, r0
		call sender(delete_record, wait);
     acc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		delete_record->record_index = us_pr_in;
     ad8:	00001d0c 	andeq	r1, r0, ip, lsl #26
     adc:	00001d12 	andeq	r1, r0, r2, lsl sp
		response_checker[0] = delete_record->request_number;
     ae0:	00500001 	subseq	r0, r0, r1
		call sender(delete_record, wait);
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	22000000 	andcs	r0, r0, #0
     aec:	4e00001d 	mcrmi	0, 0, r0, cr0, cr13, {0}
     af0:	0100001d 	tsteq	r0, sp, lsl r0
     af4:	1d4e5400 	cfstrdne	mvd5, [lr, #-0]
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	1d540000 	ldclne	0, cr0, [r4, #-0]
     afc:	00010000 	andeq	r0, r1, r0
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	001d5452 	andseq	r5, sp, r2, asr r4
     b04:	001d9c00 	andseq	r9, sp, r0, lsl #24
     b08:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (get_id < 1 || get_id > 25){
     b0c:	00001d9c 	muleq	r0, ip, sp
     b10:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
			strncpy(reason, "Error: improper node ID", 50);
     b14:	00500001 	subseq	r0, r0, r1
     b18:	00000000 	andeq	r0, r0, r0
     b1c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
			proceed error;
     b20:	5200001d 	andpl	r0, r0, #29
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	0100001d 	tsteq	r0, sp, lsl r0
     b28:	1d525400 	cfldrdne	mvd5, [r2, #-0]
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	1d540000 	ldclne	0, cr0, [r4, #-0]
     b30:	00010000 	andeq	r0, r1, r0
     b34:	001d6a53 	andseq	r6, sp, r3, asr sl
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	001d7300 	andseq	r7, sp, r0, lsl #6
     b3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			proceed error;
     b48:	00001d5c 	andeq	r1, r0, ip, asr sp
     b4c:	00001d6c 	andeq	r1, r0, ip, ror #26
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	00530001 	subseq	r0, r3, r1
     b54:	00000000 	andeq	r0, r0, r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	22000000 	andcs	r0, r0, #0
     b5c:	4000001d 	andmi	r0, r0, sp, lsl r0
     b60:	0100001d 	tsteq	r0, sp, lsl r0
		retrieve_record->gid = node_db->gid;
     b64:	1d465000 	stclne	0, cr5, [r6, #-0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	1d660000 	stclne	0, cr0, [r6, #-0]
		retrieve_record->request_number = generate_request_num();
     b6c:	00010000 	andeq	r0, r1, r0
     b70:	001d6650 	andseq	r6, sp, r0, asr r6
		retrieve_record->receiver_id = get_id;
     b74:	001d7000 	andseq	r7, sp, r0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
		retrieve_record->record_index = beg_for_index;
     b7c:	0000007c 	andeq	r0, r0, ip, ror r0
     b80:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	00186400 	andseq	r6, r8, r0, lsl #8
		response_checker[0] = retrieve_record->request_number;
     b88:	00189200 	andseq	r9, r8, r0, lsl #4
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	50000100 	andpl	r0, r0, r0, lsl #2
		response_checker[1] = retrieve_record->tpe;
     b90:	000018a0 	andeq	r1, r0, r0, lsr #17
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	000018e4 	andeq	r1, r0, r4, ror #17
     b98:	00500001 	subseq	r0, r0, r1
		call sender(retrieve_record, wait);
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	6c000000 	stcvs	0, cr0, [r0], {-0}
     ba4:	78000018 	stmdavc	r0, {r3, r4}
     ba8:	01000018 	tsteq	r0, r8, lsl r0
     bac:	18785300 	ldmdane	r8!, {r8, r9, ip, lr}^
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	187a0000 	ldmdane	sl!, {}^	; <UNPREDICTABLE>
     bb4:	00020000 	andeq	r0, r2, r0
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb8:	187e0070 	ldmdane	lr!, {r4, r5, r6}^
     bbc:	18d60000 	ldmne	r6, {}^	; <UNPREDICTABLE>
     bc0:	00010000 	andeq	r0, r1, r0
		if(node_db->data_base.item_count != 0){
     bc4:	0018d653 	andseq	sp, r8, r3, asr r6
     bc8:	0018da00 	andseq	sp, r8, r0, lsl #20
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	73000200 	movwvc	r0, #512	; 0x200
     bd0:	0018da00 	andseq	sp, r8, r0, lsl #20
			while(i <= node_db->data_base.item_count){
     bd4:	0018e400 	andseq	lr, r8, r0, lsl #8
     bd8:	53000100 	movwpl	r0, #256	; 0x100
	...
		ser_out(menu, "\r\n");
     be4:	0000186c 	andeq	r1, r0, ip, ror #16
     be8:	0000186e 	andeq	r1, r0, lr, ror #16
		delete_all(node_db);
     bec:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
     bf0:	be000018 	mcrlt	0, 0, r0, cr0, cr8, {0}
		proceed menu;
     bf4:	01000018 	tsteq	r0, r8, lsl r0
		delay(3000, timeout);
     bf8:	18d65200 	ldmne	r6, {r9, ip, lr}^
     bfc:	18da0000 	ldmne	sl, {}^	; <UNPREDICTABLE>
     c00:	00010000 	andeq	r0, r1, r0
		when(&response_flag, menu);
     c04:	0018da53 	andseq	sp, r8, r3, asr sl
     c08:	0018e400 	andseq	lr, r8, r0, lsl #8
			if(i == 0){
     c0c:	52000100 	andpl	r0, r0, #0, 2
	...
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c18:	00001c34 	andeq	r1, r0, r4, lsr ip
     c1c:	00001c3c 	andeq	r1, r0, ip, lsr ip
     c20:	40510001 	subsmi	r0, r1, r1
     c24:	4200001c 	andmi	r0, r0, #28
		for (int i=0; i<node_db->index; i++) {
     c28:	0100001c 	tsteq	r0, ip, lsl r0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	00005100 	andeq	r5, r0, r0, lsl #2
     c30:	00000000 	andeq	r0, r0, r0
     c34:	1b880000 	blne	fe200c3c <_estack+0xde1fbc3c>
     c38:	1ba40000 	blne	fe900c40 <_estack+0xde8fbc40>
     c3c:	00010000 	andeq	r0, r1, r0
     c40:	001baa50 	andseq	sl, fp, r0, asr sl
     c44:	001bb600 	andseq	fp, fp, r0, lsl #12
     c48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		proceed menu;
     c54:	00001b88 	andeq	r1, r0, r8, lsl #23
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	00001ba6 	andeq	r1, r0, r6, lsr #23
     c5c:	aa510001 	bge	1440c68 <__ccfg+0x1420cc0>
     c60:	b400001b 	strlt	r0, [r0], #-27	; 0xffffffe5
		proceed menu;
     c64:	0100001b 	tsteq	r0, fp, lsl r0
}
     c68:	00005100 	andeq	r5, r0, r0, lsl #2
     c6c:	00000000 	andeq	r0, r0, r0
     c70:	1b880000 	blne	fe200c78 <_estack+0xde1fbc78>
     c74:	1ba90000 	blne	fea40c7c <_estack+0xdea3bc7c>
     c78:	00010000 	andeq	r0, r1, r0
     c7c:	001baa52 	andseq	sl, fp, r2, asr sl
     c80:	001bb200 	andseq	fp, fp, r0, lsl #4
     c84:	52000100 	andpl	r0, r0, #0, 2
	...
     c90:	00001b88 	andeq	r1, r0, r8, lsl #23
     c94:	00001ba0 	andeq	r1, r0, r0, lsr #23
     c98:	a0530001 	subsge	r0, r3, r1
     c9c:	2400001b 	strcs	r0, [r0], #-27	; 0xffffffe5
     ca0:	0100001c 	tsteq	r0, ip, lsl r0
     ca4:	00005500 	andeq	r5, r0, r0, lsl #10
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	1b880000 	blne	fe200cb4 <_estack+0xde1fbcb4>
     cb0:	1c080000 	stcne	0, cr0, [r8], {-0}
     cb4:	00020000 	andeq	r0, r2, r0
     cb8:	1c080091 	stcne	0, cr0, [r8], {145}	; 0x91
     cbc:	1c240000 	stcne	0, cr0, [r4], #-0
     cc0:	00020000 	andeq	r0, r2, r0
     cc4:	00000091 	muleq	r0, r1, r0
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	1bb80000 	blne	fee00cd4 <_estack+0xdedfbcd4>
     cd0:	1bce0000 	blne	ff380cd8 <_estack+0xdf37bcd8>
     cd4:	00010000 	andeq	r0, r1, r0
     cd8:	001bd650 	andseq	sp, fp, r0, asr r6
     cdc:	001be800 	andseq	lr, fp, r0, lsl #16
     ce0:	50000100 	andpl	r0, r0, r0, lsl #2
static void devinit_uart (int devnum) {
     ce4:	00001bf8 	strdeq	r1, [r0], -r8
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	00001c00 	andeq	r1, r0, r0, lsl #24
     cec:	08500001 	ldmdaeq	r0, {r0}^
void udelay (volatile word n) {
     cf0:	1000001c 	andne	r0, r0, ip, lsl r0
     cf4:	0100001c 	tsteq	r0, ip, lsl r0
	while (n) {
     cf8:	00005000 	andeq	r5, r0, r0
     cfc:	00000000 	andeq	r0, r0, r0
}
     d00:	1b640000 	blne	1900d08 <__ccfg+0x18e0d60>
	while (n--);
     d04:	1b6a0000 	blne	1a80d0c <__ccfg+0x1a60d64>
     d08:	00010000 	andeq	r0, r1, r0
     d0c:	001b7050 	andseq	r7, fp, r0, asr r0
		n--;
     d10:	001b7800 	andseq	r7, fp, r0, lsl #16
     d14:	50000100 	andpl	r0, r0, r0, lsl #2
     d18:	00001b7c 	andeq	r1, r0, ip, ror fp
void mdelay (volatile word n) {
     d1c:	00001b88 	andeq	r1, r0, r8, lsl #23
     d20:	00500001 	subseq	r0, r0, r1
	while (n) {
     d24:	00000000 	andeq	r0, r0, r0
     d28:	64000000 	strvs	r0, [r0], #-0
}
     d2c:	6c00001b 	stcvs	0, cr0, [r0], {27}
		udelay (999);
     d30:	0100001b 	tsteq	r0, fp, lsl r0
     d34:	1b705100 	blne	1c1513c <__ccfg+0x1bf5194>
		n--;
     d38:	1b7a0000 	blne	1e80d40 <__ccfg+0x1e60d98>
     d3c:	00010000 	andeq	r0, r1, r0
     d40:	001b7c51 	andseq	r7, fp, r1, asr ip
     d44:	001b8800 	andseq	r8, fp, r0, lsl #16
void __pi_ondomain (lword d) {
     d48:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (__pi_systat.effpdm > 1)
     d54:	00001b56 	andeq	r1, r0, r6, asr fp
			__pi_systat.effpdm = 1;
     d58:	00001b5e 	andeq	r1, r0, lr, asr fp
	PRCMPowerDomainOn (d);
     d5c:	62500001 	subsvs	r0, r0, #1
     d60:	6400001b 	strvs	r0, [r0], #-27	; 0xffffffe5
     d64:	0100001b 	tsteq	r0, fp, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d68:	00005000 	andeq	r5, r0, r0
     d6c:	00000000 	andeq	r0, r0, r0
     d70:	1b560000 	blne	1580d78 <__ccfg+0x1560dd0>
	__pi_systat.ondmns |= d;
     d74:	1b580000 	blne	1600d7c <__ccfg+0x15e0dd4>
     d78:	00010000 	andeq	r0, r1, r0
}
     d7c:	00000052 	andeq	r0, r0, r2, asr r0
     d80:	00000000 	andeq	r0, r0, r0
void __pi_offdomain (lword d) {
     d84:	001b4200 	andseq	r4, fp, r0, lsl #4
     d88:	001b4400 	andseq	r4, fp, r0, lsl #8
	PRCMPowerDomainOff (d);
     d8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d98:	00001b42 	andeq	r1, r0, r2, asr #22
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	00001b4c 	andeq	r1, r0, ip, asr #22
     da0:	50510001 	subspl	r0, r1, r1
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	5600001b 			; <UNDEFINED> instruction: 0x5600001b
     da8:	0100001b 	tsteq	r0, fp, lsl r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	00005100 	andeq	r5, r0, r0, lsl #2
     db0:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns &= ~d;
     db4:	1b420000 	blne	1080dbc <__ccfg+0x1060e14>
     db8:	1b460000 	blne	1180dc0 <__ccfg+0x1160e18>
}
     dbc:	00010000 	andeq	r0, r1, r0
     dc0:	00000052 	andeq	r0, r0, r2, asr r0
	...
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		all_leds_blink;
     de4:	00510001 	subseq	r0, r1, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df4:	01000000 	mrseq	r0, (UNDEF: 0)
     df8:	00005000 	andeq	r5, r0, r0
     dfc:	00000000 	andeq	r0, r0, r0
     e00:	00010000 	andeq	r0, r1, r0
     e04:	00000050 	andeq	r0, r0, r0, asr r0
	...
	while (1) {
     e14:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	setdel = __pi_mintk - __pi_old;
     e20:	00001b26 	andeq	r1, r0, r6, lsr #22
     e24:	00001b3c 	andeq	r1, r0, ip, lsr fp
     e28:	40500001 	subsmi	r0, r0, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2c:	4200001b 	andmi	r0, r0, #27
     e30:	0100001b 	tsteq	r0, fp, lsl r0
     e34:	00005000 	andeq	r5, r0, r0
     e38:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	1b260000 	blne	980e44 <__ccfg+0x960e9c>
	sti_tim;
     e40:	1b280000 	blne	a00e48 <__ccfg+0x9e0ea0>
}
     e44:	00010000 	andeq	r0, r1, r0
     e48:	00000051 	andeq	r0, r0, r1, asr r0
     e4c:	00000000 	andeq	r0, r0, r0
     e50:	001b2600 	andseq	r2, fp, r0, lsl #12
     e54:	001b2a00 	andseq	r2, fp, r0, lsl #20
	cli_aux;
     e58:	52000100 	andpl	r0, r0, #0, 2
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e64:	00001b16 	andeq	r1, r0, r6, lsl fp
     e68:	00001b18 	andeq	r1, r0, r8, lsl fp
     e6c:	00500001 	subseq	r0, r0, r1
	sti_aux;
     e70:	00000000 	andeq	r0, r0, r0
}
     e74:	16000000 	strne	r0, [r0], -r0
     e78:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
     e7c:	0100001b 	tsteq	r0, fp, lsl r0
void AONRTCIntHandler () {
     e80:	1b1c5100 	blne	715288 <__ccfg+0x6f52e0>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	1b260000 	blne	980e8c <__ccfg+0x960ee4>
     e88:	00010000 	andeq	r0, r1, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	00000051 	andeq	r0, r0, r1, asr r0
		if (__pi_utims [0] == 0)
     e90:	00000000 	andeq	r0, r0, r0
     e94:	001b0800 	andseq	r0, fp, r0, lsl #16
		if (*(__pi_utims [0])) {
     e98:	001b0c00 	andseq	r0, fp, r0, lsl #24
     e9c:	50000100 	andpl	r0, r0, r0, lsl #2
			(*(__pi_utims [0]))--;
     ea0:	00001b0c 	andeq	r1, r0, ip, lsl #22
		if (__pi_utims [1] == 0)
     ea4:	00001b16 	andeq	r1, r0, r6, lsl fp
		if (*(__pi_utims [1])) {
     ea8:	00530001 	subseq	r0, r3, r1
			aux_timer_inactive = 0;
     eac:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [1]))--;
     eb0:	0c000000 	stceq	0, cr0, [r0], {-0}
		if (__pi_utims [2] == 0)
     eb4:	1600001b 			; <UNDEFINED> instruction: 0x1600001b
		if (*(__pi_utims [2])) {
     eb8:	0100001b 	tsteq	r0, fp, lsl r0
			(*(__pi_utims [2]))--;
     ebc:	00005000 	andeq	r5, r0, r0
	...
				(*(__pi_utims [3]))--;
     ecc:	00010000 	andeq	r0, r1, r0
	if (__pi_systat.ledsts) {
     ed0:	00000050 	andeq	r0, r0, r0, asr r0
     ed4:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
     ed8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	00520001 	subseq	r0, r2, r1
     ef0:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     ef4:	01000000 	mrseq	r0, (UNDEF: 0)
     ef8:	00005200 	andeq	r5, r0, r0, lsl #4
	...
				__pi_systat.ledblk = 0;
     f08:	00010000 	andeq	r0, r1, r0
			if (__pi_systat.fstblk)
     f0c:	00000050 	andeq	r0, r0, r0, asr r0
     f10:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
     f14:	001ae400 	andseq	lr, sl, r0, lsl #8
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	001aec00 	andseq	lr, sl, r0, lsl #24
		cli_tim;
     f1c:	50000100 	andpl	r0, r0, r0, lsl #2
		__pi_new += setdel;
     f20:	00001aee 	andeq	r1, r0, lr, ror #21
     f24:	00001af2 	strdeq	r1, [r0], -r2
		setdel = 0;
     f28:	f2500001 	vhadd.s16	d16, d0, d1
		RISE_N_SHINE;
     f2c:	0800001a 	stmdaeq	r0, {r1, r3, r4}
		__pi_new += setdel;
     f30:	0100001b 	tsteq	r0, fp, lsl r0
		RISE_N_SHINE;
     f34:	00005300 	andeq	r5, r0, r0, lsl #6
	...
				if (__pi_systat.ledsts & 0x1)
     f44:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	00000050 	andeq	r0, r0, r0, asr r0
     f4c:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     f50:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				__pi_systat.ledblk = 1;
     f64:	00500001 	subseq	r0, r0, r1
		if (aux_timer_inactive) {
     f68:	00000000 	andeq	r0, r0, r0
			cli_aux;
     f6c:	01000000 	mrseq	r0, (UNDEF: 0)
     f70:	00005000 	andeq	r5, r0, r0
	...
     f80:	00010000 	andeq	r0, r1, r0
     f84:	00000050 	andeq	r0, r0, r0, asr r0
     f88:	00000000 	andeq	r0, r0, r0
     f8c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	if (setdel) {
     fa0:	00560001 	subseq	r0, r6, r1
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fb0:	01000000 	mrseq	r0, (UNDEF: 0)
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	00005000 	andeq	r5, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	00000000 	andeq	r0, r0, r0
	return NO;
     fbc:	00010000 	andeq	r0, r1, r0
			setdel = 0;
     fc0:	00000050 	andeq	r0, r0, r0, asr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	58000100 	stmdapl	r0, {r8}
	...
		return YES;
     fd4:	00500001 	subseq	r0, r0, r1
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	01000000 	mrseq	r0, (UNDEF: 0)
	UARTDisable (UART0_BASE);
     fe8:	00005400 	andeq	r5, r0, r0, lsl #8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     ff0:	00010000 	andeq	r0, r1, r0
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	00000054 	andeq	r0, r0, r4, asr r0
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	58000100 	stmdapl	r0, {r8}
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	00580001 	subseq	r0, r8, r1
    1014:	00000000 	andeq	r0, r0, r0
    1018:	bc000000 	stclt	0, cr0, [r0], {-0}
	urates [0] = rate;
    101c:	c400001c 	strgt	r0, [r0], #-28	; 0xffffffe4
}
    1020:	0100001c 	tsteq	r0, ip, lsl r0
    1024:	1cc45000 	stclne	0, cr5, [r4], {0}
    1028:	1cce0000 	stclne	0, cr0, [lr], {0}
    102c:	00010000 	andeq	r0, r1, r0
    1030:	001cd450 	andseq	sp, ip, r0, asr r4
    1034:	001ce000 	andseq	lr, ip, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	50000100 	andpl	r0, r0, r0, lsl #2
    103c:	00001cf4 	strdeq	r1, [r0], -r4
    1040:	00001cfe 	strdeq	r1, [r0], -lr
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	00500001 	subseq	r0, r0, r1
    1048:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104c:	ca000000 	bgt	1054 <reinit_uart+0x1c>
    1050:	fc00001c 	stc2	0, cr0, [r0], {28}
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	0100001c 	tsteq	r0, ip, lsl r0
    1058:	1cfc5400 	cfldrdne	mvd5, [ip]
    105c:	1cfe0000 	ldclne	0, cr0, [lr]
    1060:	00010000 	andeq	r0, r1, r0
    1064:	001cfe52 	andseq	pc, ip, r2, asr lr	; <UNPREDICTABLE>
    1068:	001d0000 	andseq	r0, sp, r0
    106c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
    1078:	0000182e 	andeq	r1, r0, lr, lsr #16
    107c:	00001860 	andeq	r1, r0, r0, ror #16
    1080:	00560001 	subseq	r0, r6, r1
    1084:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
    1088:	44000000 	strmi	r0, [r0], #-0
    108c:	4e000018 	mcrmi	0, 0, r0, cr0, cr8, {0}
			while (len && uart_a_char_available) {
    1090:	01000018 	tsteq	r0, r8, lsl r0
    1094:	00005300 	andeq	r5, r0, r0, lsl #6
	...
}
    10a4:	00010000 	andeq	r0, r1, r0
			uart_a_disable_int;
    10a8:	00000050 	andeq	r0, r0, r0, asr r0
			if (uart_a_char_available) {
    10ac:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
    10b0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				uart_a_enable_int;
    10c4:	00500001 	subseq	r0, r0, r1
    10c8:	00000000 	andeq	r0, r0, r0
				goto Redo_rx;
    10cc:	01000000 	mrseq	r0, (UNDEF: 0)
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10d0:	00005000 	andeq	r5, r0, r0
    10d4:	00000000 	andeq	r0, r0, r0
			return -2;
    10d8:	1aac0000 	bne	feb010e0 <_estack+0xdeafc0e0>
    10dc:	1ac50000 	bne	ff1410e4 <_estack+0xdf13c0e4>
				uart_a_write (*buf);
    10e0:	00010000 	andeq	r0, r1, r0
    10e4:	00000050 	andeq	r0, r0, r0, asr r0
			while (len && uart_a_room_in_tx) {
    10e8:	00000000 	andeq	r0, r0, r0
    10ec:	001aac00 	andseq	sl, sl, r0, lsl #24
    10f0:	001ac200 	andseq	ip, sl, r0, lsl #4
			if (len != operation) {
    10f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (uart_a_room_in_tx) {
    1100:	00001a88 	andeq	r1, r0, r8, lsl #21
    1104:	00001a9c 	muleq	r0, ip, sl
				uart_a_enable_int;
    1108:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    110c:	a000001a 	andge	r0, r0, sl, lsl r0
				*buf++ = uart_a_read;
    1110:	0100001a 	tsteq	r0, sl, lsl r0
			if (uart_a_room_in_tx) {
    1114:	1aa45400 	bne	fe91611c <_estack+0xde91111c>
				uart_a_write (*buf);
    1118:	1aac0000 	bne	feb01120 <_estack+0xdeafc120>
    111c:	00010000 	andeq	r0, r1, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	00000050 	andeq	r0, r0, r0, asr r0
    1124:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
    1128:	001a8800 	andseq	r8, sl, r0, lsl #16
    112c:	001a9f00 	andseq	r9, sl, r0, lsl #30
    1130:	51000100 	mrspl	r0, (UNDEF: 16)
			return 0;
    1134:	00001aa4 	andeq	r1, r0, r4, lsr #21
			if (len == UART_CNTRL_SETRATE) {
    1138:	00001aac 	andeq	r1, r0, ip, lsr #21
				if (__pi_uart_setrate (*((word*)buf),
    113c:	00510001 	subseq	r0, r1, r1
    1140:	00000000 	andeq	r0, r0, r0
    1144:	90000000 	andls	r0, r0, r0
				syserror (EREQPAR, "uar");
    1148:	9f00001a 	svcls	0x0000001a
			syserror (ENOOPER, "uai");
    114c:	0100001a 	tsteq	r0, sl, lsl r0
			if (len == UART_CNTRL_GETRATE) {
    1150:	1aa45300 	bne	fe915d58 <_estack+0xde910d58>
				return 1;
    1154:	1aac0000 	bne	feb0115c <_estack+0xdeafc15c>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	00010000 	andeq	r0, r1, r0
			syserror (ENOOPER, "uai");
    115c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    116c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	00510001 	subseq	r0, r1, r1
void UART0IntHandler () {
    1184:	00000000 	andeq	r0, r0, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	01000000 	mrseq	r0, (UNDEF: 0)
    118c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	00010000 	andeq	r0, r1, r0
    11a0:	00000052 	andeq	r0, r0, r2, asr r0
		RISE_N_SHINE;
    11a4:	00000000 	andeq	r0, r0, r0
    11a8:	52000100 	andpl	r0, r0, #0, 2
	...
		i_trigger (devevent (UART_A, READ));
    11b4:	00001a68 	andeq	r1, r0, r8, ror #20
    11b8:	00001a72 	andeq	r1, r0, r2, ror sl
    11bc:	00530001 	subseq	r0, r3, r1
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    11c8:	1200001a 	andne	r0, r0, #26
    11cc:	0100001a 	tsteq	r0, sl, lsl r0
    11d0:	00005000 	andeq	r5, r0, r0
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	1db40000 	ldcne	0, cr0, [r4]
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	1dba0000 	ldcne	0, cr0, [sl]
    11e0:	00010000 	andeq	r0, r1, r0
    11e4:	001dba50 	andseq	fp, sp, r0, asr sl
		i_trigger (devevent (UART_A, WRITE));
    11e8:	001de800 	andseq	lr, sp, r0, lsl #16
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		RISE_N_SHINE;
    11f8:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
    11fc:	00001dbf 			; <UNDEFINED> instruction: 0x00001dbf
		i_trigger (devevent (UART_A, WRITE));
    1200:	bf510001 	svclt	0x00510001
    1204:	e800001d 	stmda	r0, {r0, r2, r3, r4}
    1208:	0100001d 	tsteq	r0, sp, lsl r0
    120c:	00005400 	andeq	r5, r0, r0, lsl #8
    1210:	00000000 	andeq	r0, r0, r0
    1214:	1dd00000 	ldclne	0, cr0, [r0]
    1218:	1dd40000 	ldclne	0, cr0, [r4]
    121c:	00010000 	andeq	r0, r1, r0
    1220:	001dd653 	andseq	sp, sp, r3, asr r6
    1224:	001dda00 	andseq	sp, sp, r0, lsl #20
    1228:	53000100 	movwpl	r0, #256	; 0x100
}
    122c:	00001dda 	ldrdeq	r1, [r0], -sl
    1230:	00001de8 	andeq	r1, r0, r8, ror #27
    1234:	00520001 	subseq	r0, r2, r1
    1238:	00000000 	andeq	r0, r0, r0
    123c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
void __buttons_setirq (int val) {
    1240:	3d000019 	stccc	0, cr0, [r0, #-100]	; 0xffffff9c
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	01000019 	tsteq	r0, r9, lsl r0
    1248:	00005000 	andeq	r5, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	00000000 	andeq	r0, r0, r0
    1250:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    1254:	193d0000 	ldmdbne	sp!, {}	; <UNPREDICTABLE>
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	00010000 	andeq	r0, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    126c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1278:	00500001 	subseq	r0, r0, r1
	...
	for (i = 0; i < N_PINLIST; i++) {
    1288:	01000000 	mrseq	r0, (UNDEF: 0)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	00005300 	andeq	r5, r0, r0, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
    1294:	00010000 	andeq	r0, r1, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	00000053 	andeq	r0, r0, r3, asr r0
    129c:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	00190c00 	andseq	r0, r9, r0, lsl #24
    12a4:	00191400 	andseq	r1, r9, r0, lsl #8
    12a8:	50000100 	andpl	r0, r0, r0, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	00001914 	andeq	r1, r0, r4, lsl r9
}
    12b0:	00001927 	andeq	r1, r0, r7, lsr #18
    12b4:	28530001 	ldmdacs	r3, {r0}^
    12b8:	38000019 	stmdacc	r0, {r0, r3, r4}
    12bc:	01000019 	tsteq	r0, r9, lsl r0
void GPIOIntHandler () {
    12c0:	00005300 	andeq	r5, r0, r0, lsl #6
if (buttons_int) {
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	19160000 	ldmdbne	r6, {}	; <UNPREDICTABLE>
	buttons_disable ();
    12cc:	19270000 	stmdbne	r7!, {}	; <UNPREDICTABLE>
    12d0:	00010000 	andeq	r0, r1, r0
	i_trigger ((aword)&__button_list);
    12d4:	00192850 	andseq	r2, r9, r0, asr r8
    12d8:	00193800 	andseq	r3, r9, r0, lsl #16
    12dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    12f0:	00500001 	subseq	r0, r0, r1
    12f4:	00000000 	andeq	r0, r0, r0
    12f8:	01000000 	mrseq	r0, (UNDEF: 0)
    12fc:	00005300 	andeq	r5, r0, r0, lsl #6
	RISE_N_SHINE;
    1300:	00000000 	andeq	r0, r0, r0
    1304:	00010000 	andeq	r0, r1, r0
    1308:	00000053 	andeq	r0, r0, r3, asr r0
	...
	i_trigger ((aword)(&__input_pins));
    1318:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1324:	00500001 	subseq	r0, r0, r1
	...
    1334:	01000000 	mrseq	r0, (UNDEF: 0)
    1338:	00005300 	andeq	r5, r0, r0, lsl #6
    133c:	00000000 	andeq	r0, r0, r0
	__pinsen_disable_and_clear;
    1340:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
	RISE_N_SHINE;
    1344:	19460000 	stmdbne	r6, {}^	; <UNPREDICTABLE>
    1348:	00010000 	andeq	r0, r1, r0
    134c:	00000050 	andeq	r0, r0, r0, asr r0
}
    1350:	00000000 	andeq	r0, r0, r0
    1354:	00194000 	andseq	r4, r9, r0
    1358:	00194900 	andseq	r4, r9, r0, lsl #18
    135c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	0000194e 	andeq	r1, r0, lr, asr #18
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	0000198c 	andeq	r1, r0, ip, lsl #19
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	90540001 	subsls	r0, r4, r1
    1374:	de000019 	mcrle	0, 0, r0, cr0, cr9, {0}
    1378:	01000019 	tsteq	r0, r9, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137c:	19e05400 	stmibne	r0!, {sl, ip, lr}^
    1380:	19ea0000 	stmibne	sl!, {}^	; <UNPREDICTABLE>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	00010000 	andeq	r0, r1, r0
    1388:	00000054 	andeq	r0, r0, r4, asr r0
    138c:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	00198600 	andseq	r8, r9, r0, lsl #12
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1394:	00198800 	andseq	r8, r9, r0, lsl #16
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	00001990 	muleq	r0, r0, r9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	000019e0 	andeq	r1, r0, r0, ror #19
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	00500001 	subseq	r0, r0, r1
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	20000000 	andcs	r0, r0, r0
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	3400001a 	strcc	r0, [r0], #-26	; 0xffffffe6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	0100001a 	tsteq	r0, sl, lsl r0
    13b8:	1a3a5000 	bne	e953c0 <__ccfg+0xe75418>
    13bc:	1a540000 	bne	15013c4 <__ccfg+0x14e141c>
    13c0:	00010000 	andeq	r0, r1, r0
		if (port_confs [i] & 0x80)
    13c4:	00000050 	andeq	r0, r0, r0, asr r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	00000000 	andeq	r0, r0, r0
    13cc:	001a2000 	andseq	r2, sl, r0
		if (port_confs [i] & 0x40)
    13d0:	001a3600 	andseq	r3, sl, r0, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	51000100 	mrspl	r0, (UNDEF: 16)
    13d8:	00001a3a 	andeq	r1, r0, sl, lsr sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	00001a40 	andeq	r1, r0, r0, asr #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13e0:	00510001 	subseq	r0, r1, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e4:	00000000 	andeq	r0, r0, r0
	all_leds_blink;
    13e8:	32000000 	andcc	r0, r0, #0
    13ec:	3400001a 	strcc	r0, [r0], #-26	; 0xffffffe6
    13f0:	0100001a 	tsteq	r0, sl, lsl r0
    13f4:	00005000 	andeq	r5, r0, r0
    13f8:	00000000 	andeq	r0, r0, r0
    13fc:	1a320000 	bne	c81404 <__ccfg+0xc6145c>
    1400:	1a360000 	bne	d81408 <__ccfg+0xd61460>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	00010000 	andeq	r0, r1, r0
    1408:	00000051 	andeq	r0, r0, r1, asr r0
    140c:	00000000 	andeq	r0, r0, r0
    1410:	001c7400 	andseq	r7, ip, r0, lsl #8
    1414:	001c8200 	andseq	r8, ip, r0, lsl #4
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	50000100 	andpl	r0, r0, r0, lsl #2
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	00001c88 	andeq	r1, r0, r8, lsl #25
    1420:	00001c9b 	muleq	r0, fp, ip
	IntEnable (INT_AON_RTC_COMB);
    1424:	00500001 	subseq	r0, r0, r1
    1428:	00000000 	andeq	r0, r0, r0
    142c:	80000000 	andhi	r0, r0, r0
	__pi_malloc_init ();
    1430:	8200001c 	andhi	r0, r0, #28
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	0100001c 	tsteq	r0, ip, lsl r0
    1438:	00005000 	andeq	r5, r0, r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1448:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	00000050 	andeq	r0, r0, r0, asr r0
    1450:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	reinit_uart ();
    1468:	00550001 	subseq	r0, r5, r1
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1478:	01000000 	mrseq	r0, (UNDEF: 0)
    147c:	00005400 	andeq	r5, r0, r0, lsl #8
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1480:	00000000 	andeq	r0, r0, r0
    1484:	00010000 	andeq	r0, r1, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1488:	00000050 	andeq	r0, r0, r0, asr r0
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1498:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	IntEnable (INT_UART0_COMB);
    14a4:	00500001 	subseq	r0, r0, r1
}
    14a8:	00000000 	andeq	r0, r0, r0
	tci_run_auxiliary_timer ();
    14ac:	02000000 	andeq	r0, r0, #0
		diag ("");
    14b0:	00007500 	andeq	r7, r0, r0, lsl #10
    14b4:	00000000 	andeq	r0, r0, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b8:	5c000000 	stcpl	0, cr0, [r0], {-0}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	7c000025 	stcvc	0, cr0, [r0], {37}	; 0x25
		diag ("Leftover RAM: %d bytes",
    14c0:	01000025 	tsteq	r0, r5, lsr #32
    14c4:	25825000 	strcs	r5, [r2]
    14c8:	25830000 	strcs	r0, [r3]
    14cc:	00010000 	andeq	r0, r1, r0
    14d0:	00000050 	andeq	r0, r0, r0, asr r0
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	00256600 	eoreq	r6, r5, r0, lsl #12
    14dc:	00258c00 	eoreq	r8, r5, r0, lsl #24
    14e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    14e4:	0000258c 	andeq	r2, r0, ip, lsl #11
    14e8:	0000258f 	andeq	r2, r0, pc, lsl #11
    14ec:	00500001 	subseq	r0, r0, r1
    14f0:	00000000 	andeq	r0, r0, r0
    14f4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    14f8:	38000025 	stmdacc	r0, {r0, r2, r5}
    14fc:	01000025 	tsteq	r0, r5, lsr #32
    1500:	253e5000 	ldrcs	r5, [lr, #-0]!
    1504:	25460000 	strbcs	r0, [r6, #-0]
    1508:	00010000 	andeq	r0, r1, r0
    150c:	00000050 	andeq	r0, r0, r0, asr r0
    1510:	00000000 	andeq	r0, r0, r0
    1514:	00254400 	eoreq	r4, r5, r0, lsl #8
    1518:	00255000 	eoreq	r5, r5, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1528:	00002546 	andeq	r2, r0, r6, asr #10
    152c:	0000254c 	andeq	r2, r0, ip, asr #10
    1530:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1534:	50000025 	andpl	r0, r0, r5, lsr #32
    1538:	02000025 	andeq	r0, r0, #37	; 0x25
}
    153c:	00007300 	andeq	r7, r0, r0, lsl #6
__attribute__ ((noreturn)) void __pi_release () {
    1540:	00000000 	andeq	r0, r0, r0
    1544:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1548:	f8000024 			; <UNDEFINED> instruction: 0xf8000024
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    154c:	01000024 	tsteq	r0, r4, lsr #32
	check_stack_overflow;
    1550:	24fe5000 	ldrbtcs	r5, [lr], #0
    1554:	25060000 	strcs	r0, [r6, #-0]
    1558:	00010000 	andeq	r0, r1, r0
	update_n_wake (MAX_WORD, NO);
    155c:	00000050 	andeq	r0, r0, r0, asr r0
    1560:	00000000 	andeq	r0, r0, r0
    1564:	0024e800 	eoreq	lr, r4, r0, lsl #16
	for_all_tasks (__pi_curr) {
    1568:	0024fa00 	eoreq	pc, r4, r0, lsl #20
    156c:	51000100 	mrspl	r0, (UNDEF: 16)
    1570:	000024fe 	strdeq	r2, [r0], -lr
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	00002528 	andeq	r2, r0, r8, lsr #10
	__SLEEP;
    1578:	00510001 	subseq	r0, r1, r1
    157c:	00000000 	andeq	r0, r0, r0
    1580:	04000000 	streq	r0, [r0], #-0
    1584:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
	system_event_count ++;
    1588:	01000025 	tsteq	r0, r5, lsr #32
    158c:	25165300 	ldrcs	r5, [r6, #-768]	; 0xfffffd00
	switch (__pi_systat.effpdm) {
    1590:	25280000 	strcs	r0, [r8, #-0]!
    1594:	00010000 	andeq	r0, r1, r0
    1598:	00000053 	andeq	r0, r0, r3, asr r0
    159c:	00000000 	andeq	r0, r0, r0
			__WFI ();
    15a0:	00250600 	eoreq	r0, r5, r0, lsl #12
    15a4:	00251400 	eoreq	r1, r5, r0, lsl #8
    15a8:	50000100 	andpl	r0, r0, r0, lsl #2
	check_stack_overflow;
    15ac:	00002516 	andeq	r2, r0, r6, lsl r5
    15b0:	00002518 	andeq	r2, r0, r8, lsl r5
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b4:	18500001 	ldmdane	r0, {r0}^
    15b8:	28000025 	stmdacs	r0, {r0, r2, r5}
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	02000025 	andeq	r0, r0, #37	; 0x25
			goto Redo;
    15c0:	00007300 	andeq	r7, r0, r0, lsl #6
	for_all_tasks (__pi_curr) {
    15c4:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	4c000000 	stcmi	0, cr0, [r0], {-0}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15cc:	66000024 	strvs	r0, [r0], -r4, lsr #32
    15d0:	01000024 	tsteq	r0, r4, lsr #32
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d4:	24665000 	strbtcs	r5, [r6], #-0
    15d8:	246c0000 	strbtcs	r0, [ip], #-0
    15dc:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15e0:	00246c55 	eoreq	r6, r4, r5, asr ip
    15e4:	00247600 	eoreq	r7, r4, r0, lsl #12
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	50000100 	andpl	r0, r0, r0, lsl #2
    15ec:	00002476 	andeq	r2, r0, r6, ror r4
			__WFI ();
    15f0:	000024e8 	andeq	r2, r0, r8, ror #9
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f4:	00550001 	subseq	r0, r5, r1
    15f8:	00000000 	andeq	r0, r0, r0
}
    15fc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1600:	66000024 	strvs	r0, [r0], -r4, lsr #32
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1604:	01000024 	tsteq	r0, r4, lsr #32
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1608:	24665100 	strbtcs	r5, [r6], #-256	; 0xffffff00
    160c:	246c0000 	strbtcs	r0, [ip], #-0
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1610:	00010000 	andeq	r0, r1, r0
    1614:	00246c57 	eoreq	r6, r4, r7, asr ip
    1618:	00247600 	eoreq	r7, r4, r0, lsl #12
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161c:	51000100 	mrspl	r0, (UNDEF: 16)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1620:	00002476 	andeq	r2, r0, r6, ror r4
    1624:	000024e8 	andeq	r2, r0, r8, ror #9
    1628:	00570001 	subseq	r0, r7, r1
    162c:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1634:	66000024 	strvs	r0, [r0], -r4, lsr #32
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	01000024 	tsteq	r0, r4, lsr #32
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    163c:	24665200 	strbtcs	r5, [r6], #-512	; 0xfffffe00
    1640:	246c0000 	strbtcs	r0, [ip], #-0
    1644:	00010000 	andeq	r0, r1, r0
    1648:	00246c54 	eoreq	r6, r4, r4, asr ip
    164c:	00247600 	eoreq	r7, r4, r0, lsl #12
			SysCtrlSetRechargeBeforePowerDown
    1650:	52000100 	andpl	r0, r0, #0, 2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1654:	00002476 	andeq	r2, r0, r6, ror r4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1658:	000024e8 	andeq	r2, r0, r8, ror #9
    165c:	00540001 	subseq	r0, r4, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	00000000 	andeq	r0, r0, r0
    1664:	a6000000 	strge	r0, [r0], -r0
    1668:	be000024 	cdplt	0, 0, cr0, cr0, cr4, {1}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166c:	01000024 	tsteq	r0, r4, lsr #32
    1670:	24be5000 	ldrtcs	r5, [lr], #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	24c30000 	strbcs	r0, [r3], #0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	00010000 	andeq	r0, r1, r0
    167c:	00000051 	andeq	r0, r0, r1, asr r0
    1680:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1684:	0024c400 	eoreq	ip, r4, r0, lsl #8
			while (!(AONWUCPowerStatusGet () &
    1688:	0024d300 	eoreq	sp, r4, r0, lsl #6
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1698:	000023fc 	strdeq	r2, [r0], -ip
    169c:	0000240a 	andeq	r2, r0, sl, lsl #8
    16a0:	0a500001 	beq	14016ac <__ccfg+0x13e1704>
    16a4:	38000024 	stmdacc	r0, {r2, r5}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	01000024 	tsteq	r0, r4, lsr #32
    16ac:	00005400 	andeq	r5, r0, r0, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	00000000 	andeq	r0, r0, r0
    16b4:	23fc0000 	mvnscs	r0, #0
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b8:	24100000 	ldrcs	r0, [r0], #-0
			reinit_uart ();
    16bc:	00010000 	andeq	r0, r1, r0
    16c0:	00241451 	eoreq	r1, r4, r1, asr r4
    16c4:	00242300 	eoreq	r2, r4, r0, lsl #6
}
    16c8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	000023fc 	strdeq	r2, [r0], -ip
    16d8:	00002410 	andeq	r2, r0, r0, lsl r4
    16dc:	14520001 	ldrbne	r0, [r2], #-1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	23000024 	movwcs	r0, #36	; 0x24
    16e4:	01000024 	tsteq	r0, r4, lsr #32
    16e8:	00005200 	andeq	r5, r0, r0, lsl #4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ec:	00000000 	andeq	r0, r0, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	24240000 	strtcs	r0, [r4], #-0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	242e0000 	strtcs	r0, [lr], #-0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	00010000 	andeq	r0, r1, r0
    16fc:	00242e50 	eoreq	r2, r4, r0, asr lr
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1700:	00243200 	eoreq	r3, r4, r0, lsl #4
    1704:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1708:	72243200 	eorvc	r3, r4, #0, 4
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170c:	24322200 	ldrtcs	r2, [r2], #-512	; 0xfffffe00
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1710:	244c0000 	strbcs	r0, [ip], #-0
    1714:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (
    1718:	00000050 	andeq	r0, r0, r0, asr r0
	...
  __ASM volatile ("cpsie i" : : : "memory");
    1728:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	goto Redo;
    173c:	00510001 	subseq	r0, r1, r1
	...
    174c:	01000000 	mrseq	r0, (UNDEF: 0)
    1750:	00005000 	andeq	r5, r0, r0
    1754:	00000000 	andeq	r0, r0, r0
    1758:	00010000 	andeq	r0, r1, r0
    175c:	00000055 	andeq	r0, r0, r5, asr r0
	...
    176c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1778:	00560001 	subseq	r0, r6, r1
	...
    1788:	01000000 	mrseq	r0, (UNDEF: 0)
    178c:	00005000 	andeq	r5, r0, r0
    1790:	00000000 	andeq	r0, r0, r0
    1794:	00010000 	andeq	r0, r1, r0
	cli_tim;
    1798:	00000054 	andeq	r0, r0, r4, asr r0
	...
	mdelay (500);
    17a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__PCB = NULL;
    17b4:	00500001 	subseq	r0, r0, r1
	...
	release;
    17c4:	01000000 	mrseq	r0, (UNDEF: 0)
int main (void) {
    17c8:	00005100 	andeq	r5, r0, r0, lsl #2
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	00000000 	andeq	r0, r0, r0
    17d0:	00010000 	andeq	r0, r1, r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	00000051 	andeq	r0, r0, r1, asr r0
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17f0:	00500001 	subseq	r0, r0, r1
	...
	delay (16, 0);
    1800:	01000000 	mrseq	r0, (UNDEF: 0)
    1804:	00005100 	andeq	r5, r0, r0, lsl #2
    1808:	00000000 	andeq	r0, r0, r0
	__pi_release ();
    180c:	00010000 	andeq	r0, r1, r0
    1810:	00000051 	andeq	r0, r0, r1, asr r0
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00233400 	eoreq	r3, r3, r0, lsl #8
    181c:	00234c00 	eoreq	r4, r3, r0, lsl #24
    1820:	50000100 	andpl	r0, r0, r0, lsl #2
    1824:	00002352 	andeq	r2, r0, r2, asr r3
static void killev (__pi_pcb_t *pid) {
    1828:	0000235c 	andeq	r2, r0, ip, asr r3
	wfun = (aword)(pid->code);
    182c:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
	for_all_tasks (i) {
    1830:	6c000023 	stcvs	0, cr0, [r0], {35}	; 0x23
		for (j = 0; j < nevents (i); j++) {
    1834:	01000023 	tsteq	r0, r3, lsr #32
    1838:	23725000 	cmncs	r2, #0
    183c:	23740000 	cmncs	r4, #0
			    || i->Events [j] . Event == wfun
    1840:	00010000 	andeq	r0, r1, r0
		for (j = 0; j < nevents (i); j++) {
    1844:	00237e50 	eoreq	r7, r3, r0, asr lr
			if (i->Events [j] . Event == (aword)pid
    1848:	00238000 	eoreq	r8, r3, r0
    184c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				wakeupev (i, j);
    1858:	00002334 	andeq	r2, r0, r4, lsr r3
	for_all_tasks (i) {
    185c:	0000236e 	andeq	r2, r0, lr, ror #6
}
    1860:	72510001 	subsvc	r0, r1, #1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	7d000023 	stcvc	0, cr0, [r0, #-140]	; 0xffffff74
static void qfree (aword *ch) {
    1868:	01000023 	tsteq	r0, r3, lsr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186c:	237e5100 	cmncs	lr, #0, 2
	cc = (aword*)(mpools + MA_NP);
    1870:	23940000 	orrscs	r0, r4, #0
	m_setnextp (ch, chunk);
    1874:	00010000 	andeq	r0, r1, r0
	m_setnextp (cc, ch);
    1878:	00000051 	andeq	r0, r0, r1, asr r0
}
    187c:	00000000 	andeq	r0, r0, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1880:	00233400 	eoreq	r3, r3, r0, lsl #8
    1884:	00237100 	eoreq	r7, r3, r0, lsl #2
    1888:	52000100 	andpl	r0, r0, #0, 2
			m_setnextp (cc, m_nextp (chunk));
    188c:	00002372 	andeq	r2, r0, r2, ror r3
			m_size (chunk) += m_hdrlen + m_size (ch);
    1890:	0000237d 	andeq	r2, r0, sp, ror r3
    1894:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
    1898:	94000023 	strls	r0, [r0], #-35	; 0xffffffdd
    189c:	01000023 	tsteq	r0, r3, lsr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	00005200 	andeq	r5, r0, r0, lsl #4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	234c0000 	movtcs	r0, #49152	; 0xc000
    18ac:	23500000 	cmpcs	r0, #0
			m_setnextp (cc, m_nextp (chunk));
    18b0:	00010000 	andeq	r0, r1, r0
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    18c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (m_size (chunk) >= m_size (ch))
    18d0:	00500001 	subseq	r0, r0, r1
	...
		chunk = m_nextp (chunk))
    18e0:	01000000 	mrseq	r0, (UNDEF: 0)
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	00005000 	andeq	r5, r0, r0
	diag_wait (a);
    18e8:	00000000 	andeq	r0, r0, r0
	diag_wchar (c, a);
    18ec:	00010000 	andeq	r0, r1, r0
    18f0:	00000054 	andeq	r0, r0, r4, asr r0
	...
	syserror (ESTATE, "state");
    1900:	51000100 	mrspl	r0, (UNDEF: 16)
	...
void utimer_add (address ut) {
    1914:	00520001 	subseq	r0, r2, r1
		if (__pi_utims [i] == NULL)
    1918:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	01000000 	mrseq	r0, (UNDEF: 0)
    1920:	00005500 	andeq	r5, r0, r0, lsl #10
	...
}
    1930:	00010000 	andeq	r0, r1, r0
    1934:	00000050 	andeq	r0, r0, r0, asr r0
	*t = v;
    1938:	00000000 	andeq	r0, r0, r0
	TCI_RUN_AUXILIARY_TIMER;
    193c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1950:	00510001 	subseq	r0, r1, r1
    1954:	00000000 	andeq	r0, r0, r0
    1958:	01000000 	mrseq	r0, (UNDEF: 0)
    195c:	00005000 	andeq	r5, r0, r0
	...
    196c:	00010000 	andeq	r0, r1, r0
    1970:	00000052 	andeq	r0, r0, r2, asr r0
    1974:	00000000 	andeq	r0, r0, r0
    1978:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		for_all_tasks (i) {
    1984:	0000224c 	andeq	r2, r0, ip, asr #4
	__pi_mintk = znew + min;
    1988:	00002262 	andeq	r2, r0, r2, ror #4
    198c:	68500001 	ldmdavs	r0, {r0}^
			if (!twaiting (i))
    1990:	88000022 	stmdahi	r0, {r1, r5}
    1994:	01000022 	tsteq	r0, r2, lsr #32
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1998:	00005000 	andeq	r5, r0, r0
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	224c0000 	subcs	r0, ip, #0
    19a4:	22620000 	rsbcs	r0, r2, #0
    19a8:	00010000 	andeq	r0, r1, r0
    19ac:	00226851 	eoreq	r6, r2, r1, asr r8
    19b0:	00228000 	eoreq	r8, r2, r0
    19b4:	51000100 	mrspl	r0, (UNDEF: 16)
    19b8:	00002282 	andeq	r2, r0, r2, lsl #5
    19bc:	0000228e 	andeq	r2, r0, lr, lsl #5
    19c0:	00510001 	subseq	r0, r1, r1
    19c4:	00000000 	andeq	r0, r0, r0
				wakeuptm (i);
    19c8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    19cc:	62000022 	andvs	r0, r0, #34	; 0x22
		for_all_tasks (i) {
    19d0:	01000022 	tsteq	r0, r2, lsr #32
				d = i->Timer - znew;
    19d4:	22625200 	rsbcs	r5, r2, #0, 4
    19d8:	22680000 	rsbcs	r0, r8, #0
    19dc:	00010000 	andeq	r0, r1, r0
		if ((word)(__pi_mintk - znew) < min) 
    19e0:	00226854 	eoreq	r6, r2, r4, asr r8
    19e4:	00227400 	eoreq	r7, r2, r0, lsl #8
    19e8:	52000100 	andpl	r0, r0, #0, 2
	__pi_old = znew;
    19ec:	00002274 	andeq	r2, r0, r4, ror r2
}
    19f0:	0000229a 	muleq	r0, sl, r2
	TCI_RUN_DELAY_TIMER;
    19f4:	a0540001 	subsge	r0, r4, r1
}
    19f8:	a6000022 	strge	r0, [r0], -r2, lsr #32
    19fc:	01000022 	tsteq	r0, r2, lsr #32
    1a00:	22aa5400 	adccs	r5, sl, #0, 8
    1a04:	22be0000 	adcscs	r0, lr, #0
    1a08:	00010000 	andeq	r0, r1, r0
void proceed (word state) {
    1a0c:	00000054 	andeq	r0, r0, r4, asr r0
	prcdstate (__pi_curr, state);
    1a10:	00000000 	andeq	r0, r0, r0
    1a14:	00224c00 	eoreq	r4, r2, r0, lsl #24
	release;
    1a18:	00225a00 	eoreq	r5, r2, r0, lsl #20
    1a1c:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (j >= MAX_EVENTS_PER_TASK)
    1a28:	000022c8 	andeq	r2, r0, r8, asr #5
    1a2c:	000022d4 	ldrdeq	r2, [r0], -r4
    1a30:	da500001 	ble	1401a3c <__ccfg+0x13e1a94>
		syserror (ENEVENTS, "sw");
    1a34:	f2000022 	vhadd.s8	d0, d0, d18
    1a38:	01000022 	tsteq	r0, r2, lsr #32
	setestate (__pi_curr->Events [j], state, event);
    1a3c:	00005000 	andeq	r5, r0, r0
	incwait (__pi_curr);
    1a40:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    1a44:	22900000 	addscs	r0, r0, #0
}
    1a48:	229a0000 	addscs	r0, sl, #0
    1a4c:	00010000 	andeq	r0, r1, r0
    1a50:	0022a050 	eoreq	sl, r2, r0, asr r0
void __pi_trigger (aword event) {
    1a54:	0022a500 	eoreq	sl, r2, r0, lsl #10
	for_all_tasks (i) {
    1a58:	50000100 	andpl	r0, r0, r0, lsl #2
		for (j = 0; j < nevents (i); j++) {
    1a5c:	000022aa 	andeq	r2, r0, sl, lsr #5
    1a60:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    1a64:	00500001 	subseq	r0, r0, r1
	...
			if (i->Events [j] . Event == event) {
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
				wakeupev (i, j);
    1a78:	00005000 	andeq	r5, r0, r0
    1a7c:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1a80:	00010000 	andeq	r0, r1, r0
}
    1a84:	00000050 	andeq	r0, r0, r0, asr r0
aword __pi_join (aword pid, word st) {
    1a88:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1a8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((aword)i == pid) {
    1a98:	00500001 	subseq	r0, r0, r1
	...
	for_all_tasks (i) {
    1aa8:	01000000 	mrseq	r0, (UNDEF: 0)
void delay (word d, word state) {
    1aac:	00005100 	andeq	r5, r0, r0, lsl #2
	settstate (__pi_curr, state);
    1ab0:	00000000 	andeq	r0, r0, r0
    1ab4:	00010000 	andeq	r0, r1, r0
    1ab8:	00000051 	andeq	r0, r0, r1, asr r0
    1abc:	00000000 	andeq	r0, r0, r0
	update_n_wake (d, YES);
    1ac0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	__pi_curr->Timer = __pi_old + d;
    1acc:	00510001 	subseq	r0, r1, r1
	...
}
    1adc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ae0:	00005400 	andeq	r5, r0, r0, lsl #8
	if (fun == NULL)
    1ae4:	00000000 	andeq	r0, r0, r0
		return (int) __pi_curr;
    1ae8:	000a0000 	andeq	r0, sl, r0
    1aec:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	for_all_tasks (i)
    1af0:	00056c03 	andeq	r6, r5, r3, lsl #24
}
    1af4:	00002220 	andeq	r2, r0, r0, lsr #4
		if (i->code == fun)
    1af8:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i)
    1afc:	00010000 	andeq	r0, r1, r0
    1b00:	00000054 	andeq	r0, r0, r4, asr r0
    1b04:	00000000 	andeq	r0, r0, r0
int __pi_strlen (const char *s) {
    1b08:	70000a00 	andvc	r0, r0, r0, lsl #20
	for (i = 0; *(s+i) != '\0'; i++);
    1b0c:	03243200 			; <UNDEFINED> instruction: 0x03243200
}
    1b10:	2000056c 	andcs	r0, r0, ip, ror #10
	for (i = 0; *(s+i) != '\0'; i++);
    1b14:	00000022 	andeq	r0, r0, r2, lsr #32
	while ((Boolean)(*d++ = *s++));
    1b18:	00000000 	andeq	r0, r0, r0
    1b1c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	while (n-- && (*s != '\0'))
    1b28:	0070000a 	rsbseq	r0, r0, sl
    1b2c:	6c032432 	cfstrsvs	mvf2, [r3], {50}	; 0x32
	*d = '\0';
    1b30:	22200005 	eorcs	r0, r0, #5
	...
	while (n--)
    1b44:	00550001 	subseq	r0, r5, r1
    1b48:	00000000 	andeq	r0, r0, r0
		*dest++ = *src++;
    1b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b50:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		*dest++ = c;
    1b60:	00010000 	andeq	r0, r1, r0
void adddevfunc (devreqfun_t rf, int loc) {
    1b64:	00000054 	andeq	r0, r0, r4, asr r0
		syserror (EREQPAR, "addv");
    1b68:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "addv");
    1b6c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1b80:	00500001 	subseq	r0, r0, r1
    1b84:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1b88:	01000000 	mrseq	r0, (UNDEF: 0)
    1b8c:	00005000 	andeq	r5, r0, r0
    1b90:	00000000 	andeq	r0, r0, r0
    1b94:	00010000 	andeq	r0, r1, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1b98:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (ENODEVICE, "io");
    1ba8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (ret == -1) {
    1bbc:	00500001 	subseq	r0, r0, r1
	...
		iowait (dev, operation, retry);
    1bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd0:	00005000 	andeq	r5, r0, r0
			release;
    1bd4:	00000000 	andeq	r0, r0, r0
	if (ret == -2) {
    1bd8:	00010000 	andeq	r0, r1, r0
		if (retry != WNONE) {
    1bdc:	00000050 	andeq	r0, r0, r0, asr r0
    1be0:	00000000 	andeq	r0, r0, r0
			iowait (dev, operation, retry);
    1be4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			(ioreq [dev]) (NONE, buf, len);
    1bf0:	00500001 	subseq	r0, r0, r1
	...
		(ioreq [dev]) (NONE, buf, len);
    1c00:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1c04:	00005100 	andeq	r5, r0, r0, lsl #2
	if (retry != WNONE) {
    1c08:	00000000 	andeq	r0, r0, r0
		delay (-ret - 2, retry);
    1c0c:	00010000 	andeq	r0, r1, r0
    1c10:	00000051 	andeq	r0, r0, r1, asr r0
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c2c:	00530001 	subseq	r0, r3, r1
    1c30:	00000000 	andeq	r0, r0, r0
    1c34:	0a000000 	beq	1c3c <__pi_malloc_init+0x18>
		syserror (ERESOURCE, "mal1");
    1c38:	32007000 	andcc	r7, r0, #0
    1c3c:	056c0324 	strbeq	r0, [ip, #-804]!	; 0xfffffcdc
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1c40:	00222000 	eoreq	r2, r2, r0
    1c44:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c48:	01000000 	mrseq	r0, (UNDEF: 0)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1c4c:	00005300 	andeq	r5, r0, r0, lsl #6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c50:	00000000 	andeq	r0, r0, r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1c54:	000a0000 	andeq	r0, sl, r0
    1c58:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
}
    1c5c:	00056c03 	andeq	r6, r5, r3, lsl #24
    1c60:	00002220 	andeq	r2, r0, r0, lsr #4
    1c64:	00000000 	andeq	r0, r0, r0
    1c68:	00010000 	andeq	r0, r1, r0
    1c6c:	00000053 	andeq	r0, r0, r3, asr r0
    1c70:	00000000 	andeq	r0, r0, r0
void __pi_free (aword *ch) {
    1c74:	70000a00 	andvc	r0, r0, r0, lsl #20
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1c78:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1c7c:	2000056c 	andcs	r0, r0, ip, ror #10
		syserror (EMALLOC, "malg");
    1c80:	00000022 	andeq	r0, r0, r2, lsr #32
	...
		m_size (ch) ^= MALLOC_UMASK;
    1c90:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (mevent [MA_NP] . nwait) {
    1c9c:	00500001 	subseq	r0, r0, r1
	...
}
    1cac:	01000000 	mrseq	r0, (UNDEF: 0)
    1cb0:	00005300 	andeq	r5, r0, r0, lsl #6
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	00010000 	andeq	r0, r1, r0
void kill (aword pid) {
    1cbc:	00000053 	andeq	r0, r0, r3, asr r0
		pid = (aword) __pi_curr;
    1cc0:	00000000 	andeq	r0, r0, r0
	j = NULL;
    1cc4:	53000100 	movwpl	r0, #256	; 0x100
	...
		if ((aword)i == pid) {
    1cd8:	00520001 	subseq	r0, r2, r1
				__PCB = i->Next;
    1cdc:	00000000 	andeq	r0, r0, r0
			killev (i);
    1ce0:	01000000 	mrseq	r0, (UNDEF: 0)
			ufree (i);
    1ce4:	00005200 	andeq	r5, r0, r0, lsl #4
			if (i == __pi_curr)
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	00010000 	andeq	r0, r1, r0
				release;
    1cf0:	00000052 	andeq	r0, r0, r2, asr r0
				j->Next = i->Next;
    1cf4:	00000000 	andeq	r0, r0, r0
    1cf8:	52000100 	andpl	r0, r0, #0, 2
	...
}
    1d04:	000021cc 	andeq	r2, r0, ip, asr #3
    1d08:	000021da 	ldrdeq	r2, [r0], -sl
	if (size < 8)
    1d0c:	00500001 	subseq	r0, r0, r1
		_size = 2;
    1d10:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d14:	cc000000 	stcgt	0, cr0, [r0], {-0}
		_size = (((aword)size) + 3) >> 2;
    1d18:	de000021 	cdple	0, 0, cr0, cr0, cr1, {1}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d1c:	01000021 	tsteq	r0, r1, lsr #32
		_size = (((aword)size) + 3) >> 2;
    1d20:	21e45100 	mvncs	r5, r0, lsl #2
		if (mevent [MA_NP] . nfail != 255)
    1d24:	21f40000 	mvnscs	r0, r0
    1d28:	00010000 	andeq	r0, r1, r0
			mevent [MA_NP] . nfail ++;
    1d2c:	0021fc51 	eoreq	pc, r1, r1, asr ip	; <UNPREDICTABLE>
		mnfree [MA_NP] = 0;
    1d30:	00221e00 	eoreq	r1, r2, r0, lsl #28
    1d34:	51000100 	mrspl	r0, (UNDEF: 16)
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d38:	00002220 	andeq	r2, r0, r0, lsr #4
    1d3c:	00002222 	andeq	r2, r0, r2, lsr #4
			syserror (EMALLOC, "malc");
    1d40:	36510001 	ldrbcc	r0, [r1], -r1
    1d44:	4c000022 	stcmi	0, cr0, [r0], {34}	; 0x22
		if (m_size (chunk) >= _size)
    1d48:	01000022 	tsteq	r0, r2, lsr #32
    1d4c:	00005100 	andeq	r5, r0, r0, lsl #2
		chunk = m_nextp (chunk)) {
    1d50:	00000000 	andeq	r0, r0, r0
		m_setnextp (cc, m_nextp (chunk));
    1d54:	22080000 	andcs	r0, r8, #0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1d58:	22320000 	eorscs	r0, r2, #0
    1d5c:	00010000 	andeq	r0, r1, r0
			m_size (chunk) = _size;
    1d60:	00000055 	andeq	r0, r0, r5, asr r0
			cc = chunk + _size + m_hdrlen;
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	0021e600 	eoreq	lr, r1, r0, lsl #12
			m_size (cc) = waste - m_hdrlen;
    1d6c:	00221000 	eoreq	r1, r2, r0
			QFREE;
    1d70:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		mevent [MA_NP] . nfail = 0;
    1d74:	00002210 	andeq	r2, r0, r0, lsl r2
		mcfree [MA_NP] -= m_size (chunk);
    1d78:	00002224 	andeq	r2, r0, r4, lsr #4
    1d7c:	24500001 	ldrbcs	r0, [r0], #-1
    1d80:	4c000022 	stcmi	0, cr0, [r0], {34}	; 0x22
    1d84:	01000022 	tsteq	r0, r2, lsr #32
		m_size (chunk) |= MALLOC_UMASK;
    1d88:	00005400 	andeq	r5, r0, r0, lsl #8
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d8c:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    1d90:	21e40000 	mvncs	r0, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1d94:	21f70000 	mvnscs	r0, r0
}
    1d98:	00010000 	andeq	r0, r1, r0
    1d9c:	0021fc50 	eoreq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
    1da0:	0021fe00 	eoreq	pc, r1, r0, lsl #28
    1da4:	50000100 	andpl	r0, r0, r0, lsl #2
    1da8:	000021fe 	strdeq	r2, [r0], -lr
    1dac:	00002201 	andeq	r2, r0, r1, lsl #4
    1db0:	00710007 	rsbseq	r0, r1, r7
aword __pi_fork (fsmcode func, aword data) {
    1db4:	00722432 	rsbseq	r2, r2, r2, lsr r4
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1db8:	00223622 	eoreq	r3, r2, r2, lsr #12
    1dbc:	00224c00 	eoreq	r4, r2, r0, lsl #24
    1dc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	i->data = data;
    1dcc:	000021a8 	andeq	r2, r0, r8, lsr #3
		if ((j = __PCB) == NULL)
    1dd0:	000021be 			; <UNDEFINED> instruction: 0x000021be
}
    1dd4:	c0500001 	subsgt	r0, r0, r1
			for (; j->Next != NULL; j = j->Next);
    1dd8:	c4000021 	strgt	r0, [r0], #-33	; 0xffffffdf
    1ddc:	01000021 	tsteq	r0, r1, lsr #32
	return (aword) i;
    1de0:	00005000 	andeq	r5, r0, r0
	...
	if (mevent [MA_NP] . nwait != 255)
    1df0:	00010000 	andeq	r0, r1, r0
		mevent [MA_NP] . nwait ++;
    1df4:	00000050 	andeq	r0, r0, r0, asr r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1df8:	00000000 	andeq	r0, r0, r0
    1dfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	diag_disable_int (a, is);
    1e10:	00510001 	subseq	r0, r1, r1
    1e14:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1e18:	01000000 	mrseq	r0, (UNDEF: 0)
	diag_disable_int (a, is);
    1e1c:	00005500 	andeq	r5, r0, r0, lsl #10
	while (*mess != '\0') {
    1e20:	00000000 	andeq	r0, r0, r0
	dgout ('\r');
    1e24:	00010000 	andeq	r0, r1, r0
	dgout ('\n');
    1e28:	00000051 	andeq	r0, r0, r1, asr r0
    1e2c:	00000000 	andeq	r0, r0, r0
    1e30:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	diag_enable_int (a, is);
    1e3c:	00510001 	subseq	r0, r1, r1
}
    1e40:	00000000 	andeq	r0, r0, r0
    1e44:	01000000 	mrseq	r0, (UNDEF: 0)
    1e48:	00005500 	andeq	r5, r0, r0, lsl #10
	...
			if (*mess == 'l') {
    1e58:	00010000 	andeq	r0, r1, r0
				mess++;
    1e5c:	00000056 	andeq	r0, r0, r6, asr r0
	...
			switch (*mess) {
    1e6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				dgout ('%');
    1e78:	000020e8 	andeq	r2, r0, r8, ror #1
    1e7c:	00002116 	andeq	r2, r0, r6, lsl r1
				dgout (*mess);
    1e80:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1e84:	3c000021 	stccc	0, cr0, [r0], {33}	; 0x21
			switch (*mess) {
    1e88:	01000021 	tsteq	r0, r1, lsr #32
					v = __pi_hex_enc_table [
    1e8c:	217c5000 	cmncs	ip, r0
					i += 4;
    1e90:	217e0000 	cmncs	lr, r0
					(val >> (bc - i)) & 0xf];
    1e94:	00010000 	andeq	r0, r1, r0
    1e98:	00000050 	andeq	r0, r0, r0, asr r0
					dgout (v);
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	0020e800 	eoreq	lr, r0, r0, lsl #16
				while (i < bc) {
    1ea4:	00211800 	eoreq	r1, r1, r0, lsl #16
			mess++;
    1ea8:	51000100 	mrspl	r0, (UNDEF: 16)
					d /= 10;
    1eac:	00002118 	andeq	r2, r0, r8, lsl r1
				if ((val >> (bc - 1)) & 1) {
    1eb0:	0000211c 	andeq	r2, r0, ip, lsl r1
    1eb4:	1c570001 	mrrcne	0, 0, r0, r7, cr1
					dgout ('-');
    1eb8:	3c000021 	stccc	0, cr0, [r0], {33}	; 0x21
    1ebc:	01000021 	tsteq	r0, r1, lsr #32
						val |= 0xffff0000;
    1ec0:	213c5100 	teqcs	ip, r0, lsl #2
    1ec4:	21480000 	mrscs	r0, (UNDEF: 72)
    1ec8:	00010000 	andeq	r0, r1, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1ecc:	00214c57 	eoreq	r4, r1, r7, asr ip
    1ed0:	00217c00 	eoreq	r7, r1, r0, lsl #24
    1ed4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
					v = (word) (val / d);
    1ed8:	0000217c 	andeq	r2, r0, ip, ror r1
					if (v || d == 1) break;
    1edc:	00002181 	andeq	r2, r0, r1, lsl #3
    1ee0:	81510001 	cmphi	r1, r1
					d /= 10;
    1ee4:	a8000021 	stmdage	r0, {r0, r5}
				d = (bc == 16) ? 10000 : 1000000000;
    1ee8:	01000021 	tsteq	r0, r1, lsr #32
					dgout (v + '0');
    1eec:	00005700 	andeq	r5, r0, r0, lsl #14
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	20e80000 	rsccs	r0, r8, r0
					d /= 10;
    1ef8:	21180000 	tstcs	r8, r0
					val = val - (v * d);
    1efc:	00020000 	andeq	r0, r2, r0
					if (d == 0) break;
    1f00:	211c7891 			; <UNDEFINED> instruction: 0x211c7891
					v = (word) (val / d);
    1f04:	213c0000 	teqcs	ip, r0
    1f08:	00020000 	andeq	r0, r2, r0
				if (bc == 16)
    1f0c:	214c7891 			; <UNDEFINED> instruction: 0x214c7891
				d = (bc == 16) ? 10000 : 1000000000;
    1f10:	21580000 	cmpcs	r8, r0
					val &= 0xffff;
    1f14:	00020000 	andeq	r0, r2, r0
					dgout (*s);
    1f18:	217c7891 			; <UNDEFINED> instruction: 0x217c7891
					s++;
    1f1c:	21a80000 			; <UNDEFINED> instruction: 0x21a80000
				while (*s != '\0') {
    1f20:	00020000 	andeq	r0, r2, r0
    1f24:	00007891 	muleq	r0, r1, r8
			dgout (*mess++);
    1f28:	00000000 	andeq	r0, r0, r0
    1f2c:	21300000 	teqcs	r0, r0
    1f30:	21400000 	mrscs	r0, (UNDEF: 64)
    1f34:	00010000 	andeq	r0, r1, r0
    1f38:	00214c56 	eoreq	r4, r1, r6, asr ip
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1f3c:	0021a800 	eoreq	sl, r1, r0, lsl #16
    1f40:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	^ entropy
    1f4c:	0000214c 	andeq	r2, r0, ip, asr #2
}
    1f50:	00002166 	andeq	r2, r0, r6, ror #2
    1f54:	66500001 	ldrbvs	r0, [r0], -r1
    1f58:	6a000021 	bvs	1fe4 <enq+0x44>
    1f5c:	01000021 	tsteq	r0, r1, lsr #32
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1f60:	216a5400 	cmncs	sl, r0, lsl #8
	word cs = size + hblenb;
    1f64:	216e0000 	cmncs	lr, r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1f68:	00010000 	andeq	r0, r1, r0
    1f6c:	00216e50 	eoreq	r6, r1, r0, asr lr
	p -> length = size;
    1f70:	00217c00 	eoreq	r7, r1, r0, lsl #24
}
    1f74:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	if (p->attributes.b.queued) {
    1f78:	00002182 	andeq	r2, r0, r2, lsl #3
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1f7c:	0000218a 	andeq	r2, r0, sl, lsl #3
    1f80:	8a500001 	bhi	1401f8c <__ccfg+0x13e1fe4>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1f84:	a8000021 	stmdage	r0, {r0, r5}
		p->attributes.b.queued = 0;
    1f88:	01000021 	tsteq	r0, r1, lsr #32
    1f8c:	00005400 	andeq	r5, r0, r0, lsl #8
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1f90:	00000000 	andeq	r0, r0, r0
	deq (p);	// Remove from queue
    1f94:	20780000 	rsbscs	r0, r8, r0
}
    1f98:	209e0000 	addscs	r0, lr, r0
	tfree ((address)p);
    1f9c:	00010000 	andeq	r0, r1, r0
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa0:	0020a250 	eoreq	sl, r0, r0, asr r2
    1fa4:	0020bf00 	eoreq	fp, r0, r0, lsl #30
    1fa8:	50000100 	andpl	r0, r0, r0, lsl #2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fac:	000020cc 	andeq	r2, r0, ip, asr #1
    1fb0:	000020ce 	andeq	r2, r0, lr, asr #1
	if (q_empty (q))
    1fb4:	00500001 	subseq	r0, r0, r1
    1fb8:	00000000 	andeq	r0, r0, r0
		trigger (q);
    1fbc:	82000000 	andhi	r0, r0, #0
	if (p->attributes.b.urgent) {
    1fc0:	c8000020 	stmdagt	r0, {r5}
		p->u.bqueue.next = q->next;
    1fc4:	01000020 	tsteq	r0, r0, lsr #32
		p->u.bqueue.prev = q;
    1fc8:	20c85400 	sbccs	r5, r8, r0, lsl #8
		q->next->prev = (qitem_t*) p;
    1fcc:	20cb0000 	sbccs	r0, fp, r0
	p->attributes.b.queued = 1;
    1fd0:	00010000 	andeq	r0, r1, r0
    1fd4:	0020cc50 	eoreq	ip, r0, r0, asr ip
}
    1fd8:	0020d200 	eoreq	sp, r0, r0, lsl #4
		p->u.bqueue.prev = q->prev;
    1fdc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		q->prev->next = (qitem_t*) p;
    1fe0:	000020d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
		q->prev = (qitem_t*) p;
    1fe4:	000020d5 	ldrdeq	r2, [r0], -r5
    1fe8:	00500001 	subseq	r0, r0, r1
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1fec:	00000000 	andeq	r0, r0, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1ff0:	60000000 	andvs	r0, r0, r0
	switch (dv) {
    1ff4:	6600001f 			; <UNDEFINED> instruction: 0x6600001f
    1ff8:	0100001f 	tsteq	r0, pc, lsl r0
    1ffc:	00005000 	andeq	r5, r0, r0
    2000:	00000000 	andeq	r0, r0, r0
			p->attributes.b.urgent = 1;
    2004:	1f900000 	svcne	0x00900000
    2008:	1f9d0000 	svcne	0x009d0000
			verify_ses (p, "dispose ses");
    200c:	00010000 	andeq	r0, r1, r0
    2010:	00000050 	andeq	r0, r0, r0, asr r0
    2014:	00000000 	andeq	r0, r0, r0
    2018:	001f7c00 	andseq	r7, pc, r0, lsl #24
    201c:	001f8e00 	andseq	r8, pc, r0, lsl #28
			verify_phy (p, "dispose phy");
    2020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			enq (oqueues [p->attributes.b.phys], p);
    202c:	00001fa0 	andeq	r1, r0, r0, lsr #31
			p->attributes.b.urgent = 1;
    2030:	00001fae 	andeq	r1, r0, lr, lsr #31
    2034:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
			verify_phy (p, "dispose phy");
    2038:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
    203c:	0100001f 	tsteq	r0, pc, lsl r0
    2040:	1fb45500 	svcne	0x00b45500
    2044:	1fbd0000 	svcne	0x00bd0000
    2048:	00010000 	andeq	r0, r1, r0
    204c:	001fbd50 	andseq	fp, pc, r0, asr sp	; <UNPREDICTABLE>
			enq (oqueues [p->attributes.b.phys], p);
    2050:	001fec00 	andseq	lr, pc, r0, lsl #24
    2054:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    2060:	00001fa0 	andeq	r1, r0, r0, lsr #31
    2064:	00001fb0 			; <UNDEFINED> instruction: 0x00001fb0
    2068:	b0510001 	subslt	r0, r1, r1
    206c:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
    2070:	0100001f 	tsteq	r0, pc, lsl r0
    2074:	1fb45400 	svcne	0x00b45400
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    2078:	1fbd0000 	svcne	0x00bd0000
	if (b->attributes.b.outgoing) {
    207c:	00010000 	andeq	r0, r1, r0
	b = header (p);
    2080:	001fbd51 	andseq	fp, pc, r1, asr sp	; <UNPREDICTABLE>
	if (b->attributes.b.outgoing) {
    2084:	001fec00 	andseq	lr, pc, r0, lsl #24
		verify_ses (b, "tcv02");
    2088:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2094:	00001fac 	andeq	r1, r0, ip, lsr #31
    2098:	00001fae 	andeq	r1, r0, lr, lsr #31
		verify_plg (b, tcv_out, "tcv03");
    209c:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    20a0:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
    20a4:	0100001f 	tsteq	r0, pc, lsl r0
    20a8:	00005500 	andeq	r5, r0, r0, lsl #10
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	1fac0000 	svcne	0x00ac0000
    20b4:	1fb00000 	svcne	0x00b00000
    20b8:	00010000 	andeq	r0, r1, r0
    20bc:	001fb051 	andseq	fp, pc, r1, asr r0	; <UNPREDICTABLE>
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c0:	001fb400 	andseq	fp, pc, r0, lsl #8
}
    20c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    20d0:	00001fec 	andeq	r1, r0, ip, ror #31
		rlp (b);
    20d4:	0000201c 	andeq	r2, r0, ip, lsl r0
    20d8:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    20dc:	28000020 	stmdacs	r0, {r5}
    20e0:	01000020 	tsteq	r0, r0, lsr #32
    20e4:	20285400 	eorcs	r5, r8, r0, lsl #8
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20e8:	202f0000 	eorcs	r0, pc, r0
    20ec:	00010000 	andeq	r0, r1, r0
    20f0:	00203051 	eoreq	r3, r0, r1, asr r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20f4:	00205600 	eoreq	r5, r0, r0, lsl #12
	va_start (ap, plid);
    20f8:	50000100 	andpl	r0, r0, r0, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20fc:	00002056 	andeq	r2, r0, r6, asr r0
    2100:	00002058 	andeq	r2, r0, r8, asr r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2104:	58540001 	ldmdapl	r4, {r0}^
    2108:	5f000020 	svcpl	0x00000020
    210c:	01000020 	tsteq	r0, r0, lsr #32
    2110:	20605000 	rsbcs	r5, r0, r0
			syserror (ENODEVICE, "tcv04");
    2114:	20780000 	rsbscs	r0, r8, r0
		syserror (EMALLOC, "tcv05");
    2118:	00010000 	andeq	r0, r1, r0
	attp.b.outgoing = 1;
    211c:	00000050 	andeq	r0, r0, r0, asr r0
    2120:	00000000 	andeq	r0, r0, r0
    2124:	001fec00 	andseq	lr, pc, r0, lsl #24
    2128:	001ff600 	andseq	pc, pc, r0, lsl #12
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    212c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2138:	00002038 	andeq	r2, r0, r8, lsr r0
		return ERROR;
    213c:	00002056 	andeq	r2, r0, r6, asr r0
}
    2140:	56500001 	ldrbpl	r0, [r0], -r1
    2144:	58000020 	stmdapl	r0, {r5}
    2148:	01000020 	tsteq	r0, r0, lsr #32
	s->attpattern.b.session = fd;
    214c:	00005400 	andeq	r5, r0, r0, lsl #8
    2150:	00000000 	andeq	r0, r0, r0
	descriptors [fd] = s;
    2154:	23080000 	movwcs	r0, #32768	; 0x8000
	q_init (&(s->rqueue));
    2158:	230e0000 	movwcs	r0, #57344	; 0xe000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    215c:	00010000 	andeq	r0, r1, r0
    2160:	00230e50 	eoreq	r0, r3, r0, asr lr
    2164:	00231a00 	eoreq	r1, r3, r0, lsl #20
    2168:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2174:	00002308 	andeq	r2, r0, r8, lsl #6
	descriptors [fd] = s;
    2178:	00002312 	andeq	r2, r0, r2, lsl r3
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    217c:	12510001 	subsne	r0, r1, #1
    2180:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
	if (s == NULL)
    2184:	01000023 	tsteq	r0, r3, lsr #32
		syserror (EMALLOC, "tcv05");
    2188:	23245000 			; <UNDEFINED> instruction: 0x23245000
    218c:	23290000 			; <UNDEFINED> instruction: 0x23290000
    2190:	00010000 	andeq	r0, r1, r0
    2194:	00000050 	andeq	r0, r0, r0, asr r0
    2198:	00000000 	andeq	r0, r0, r0
    219c:	00230800 	eoreq	r0, r3, r0, lsl #16
    21a0:	00231600 	eoreq	r1, r3, r0, lsl #12
    21a4:	52000100 	andpl	r0, r0, #0, 2
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21a8:	00002316 	andeq	r2, r0, r6, lsl r3
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21ac:	00002320 	andeq	r2, r0, r0, lsr #6
    21b0:	24510001 	ldrbcs	r0, [r1], #-1
    21b4:	29000023 	stmdbcs	r0, {r0, r1, r5}
	plugins [ord] = pl;
    21b8:	01000023 	tsteq	r0, r3, lsr #32
	return 0;
    21bc:	00005100 	andeq	r5, r0, r0, lsl #2
		return ERROR;
    21c0:	00000000 	andeq	r0, r0, r0
}
    21c4:	231c0000 	tstcs	ip, #0
    21c8:	231e0000 	tstcs	lr, #0
	verify_fds (fd, "tcv10");
    21cc:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    21d0:	00000050 	andeq	r0, r0, r0, asr r0
	verify_fds (fd, "tcv10");
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	00231c00 	eoreq	r1, r3, r0, lsl #24
    21dc:	00232000 	eoreq	r2, r3, r0
	verify_plg (b, tcv_frm, "tcv11");
    21e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (state != WNONE) {
    21ec:	00002394 	muleq	r0, r4, r3
    21f0:	00002398 	muleq	r0, r8, r3
			when (rq, state);
    21f4:	00500001 	subseq	r0, r0, r1
			release;
    21f8:	00000000 	andeq	r0, r0, r0
	deq (b);	// Dequeue the packet ...
    21fc:	94000000 	strls	r0, [r0], #-0
    2200:	a6000023 	strge	r0, [r0], -r3, lsr #32
	p = ((address)(b + 1));
    2204:	01000023 	tsteq	r0, r3, lsr #32
	verify_plg (b, tcv_frm, "tcv11");
    2208:	23a65100 			; <UNDEFINED> instruction: 0x23a65100
    220c:	23aa0000 			; <UNDEFINED> instruction: 0x23aa0000
    2210:	00010000 	andeq	r0, r1, r0
    2214:	0023aa56 	eoreq	sl, r3, r6, asr sl
    2218:	0023ba00 	eoreq	fp, r3, r0, lsl #20
    221c:	51000100 	mrspl	r0, (UNDEF: 16)
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2220:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    2224:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2228:	bc560001 	mrrclt	0, 0, r0, r6, cr1
    222c:	bf000023 	svclt	0x00000023
	b->u.pointers.tail =
    2230:	01000023 	tsteq	r0, r3, lsr #32
}
    2234:	23bf5100 			; <UNDEFINED> instruction: 0x23bf5100
		return NULL;
    2238:	23e20000 	mvncs	r0, #0
    223c:	00010000 	andeq	r0, r1, r0
    2240:	0023e256 	eoreq	lr, r3, r6, asr r2
    2244:	0023e500 	eoreq	lr, r3, r0, lsl #10
    2248:	51000100 	mrspl	r0, (UNDEF: 16)
	verify_fds (fd, "tcv16");
    224c:	000023e5 	andeq	r2, r0, r5, ror #7
								Boolean urg) {
    2250:	000023fc 	strdeq	r2, [r0], -ip
    2254:	00560001 	subseq	r0, r6, r1
	verify_fds (fd, "tcv16");
    2258:	00000000 	andeq	r0, r0, r0
    225c:	94000000 	strls	r0, [r0], #-0
    2260:	a9000023 	stmdbge	r0, {r0, r1, r5}
	verify_pld (s, tcv_frm, "tcv17");
    2264:	01000023 	tsteq	r0, r3, lsr #32
    2268:	23a95200 			; <UNDEFINED> instruction: 0x23a95200
    226c:	23aa0000 			; <UNDEFINED> instruction: 0x23aa0000
    2270:	00010000 	andeq	r0, r1, r0
    2274:	0023aa55 	eoreq	sl, r3, r5, asr sl
    2278:	0023bf00 	eoreq	fp, r3, r0, lsl #30
    227c:	52000100 	andpl	r0, r0, #0, 2
    2280:	000023bf 			; <UNDEFINED> instruction: 0x000023bf
	ptrs.head = (word) fd;
    2284:	000023e2 	andeq	r2, r0, r2, ror #7
	ptrs.tail = (word) urg;
    2288:	e2550001 	subs	r0, r5, #1
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    228c:	e5000023 	str	r0, [r0, #-35]	; 0xffffffdd
    2290:	01000023 	tsteq	r0, r3, lsr #32
		if (state != WNONE) {
    2294:	23e55200 	mvncs	r5, #0, 4
    2298:	23fc0000 	mvnscs	r0, #0
}
    229c:	00010000 	andeq	r0, r1, r0
			when (eid, state);
    22a0:	00000055 	andeq	r0, r0, r5, asr r0
    22a4:	00000000 	andeq	r0, r0, r0
			release;
    22a8:	0023c000 	eoreq	ip, r3, r0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    22ac:	0023c600 	eoreq	ip, r3, r0, lsl #12
    22b0:	50000100 	andpl	r0, r0, r0, lsl #2
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    22b4:	000023c8 	andeq	r2, r0, r8, asr #7
    22b8:	000023db 	ldrdeq	r2, [r0], -fp
    22bc:	db500001 	blle	14022c8 <__ccfg+0x13e2320>
    22c0:	e2000023 	and	r0, r0, #35	; 0x23
    22c4:	01000023 	tsteq	r0, r3, lsr #32
    22c8:	23e65400 	mvncs	r5, #0, 8
		if (state != WNONE) {
    22cc:	23ec0000 	mvncs	r0, #0
    22d0:	00010000 	andeq	r0, r1, r0
			tmwait (state);
    22d4:	00000050 	andeq	r0, r0, r0, asr r0
    22d8:	00000000 	andeq	r0, r0, r0
	b->attributes = s->attpattern;
    22dc:	0023a200 	eoreq	sl, r3, r0, lsl #4
		b->attributes.b.urgent = 1;
    22e0:	0023a600 	eoreq	sl, r3, r0, lsl #12
    22e4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	return (address) (b + 1);
    22f0:	000025ac 	andeq	r2, r0, ip, lsr #11
    22f4:	000025c5 	andeq	r2, r0, r5, asr #11
    22f8:	d0520001 	subsle	r0, r2, r1
    22fc:	e4000025 	str	r0, [r0], #-37	; 0xffffffdb
    2300:	01000025 	tsteq	r0, r5, lsr #32
    2304:	00005200 	andeq	r5, r0, r0, lsl #4
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2308:	00000000 	andeq	r0, r0, r0
    230c:	25ac0000 	strcs	r0, [ip, #0]!
    2310:	25c50000 	strbcs	r0, [r5]
	verify_fph (phy, "tcv23");
    2314:	00010000 	andeq	r0, r1, r0
    2318:	0025d453 	eoreq	sp, r5, r3, asr r4
    231c:	0025e400 	eoreq	lr, r5, r0, lsl #8
    2320:	53000100 	movwpl	r0, #256	; 0x100
	...
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2334:	00500001 	subseq	r0, r0, r1
	if (opt < 0) {
    2338:	00000000 	andeq	r0, r0, r0
		if (fd < 0)
    233c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (opt == PHYSOPT_PLUGINFO) {
    2340:	00005000 	andeq	r5, r0, r0
	...
}
    2350:	00010000 	andeq	r0, r1, r0
		if (fd >= TCV_MAX_PHYS)
    2354:	00000051 	andeq	r0, r0, r1, asr r0
		return physinfo [fd];
    2358:	00000000 	andeq	r0, r0, r0
    235c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	verify_fds (fd, "tcv22");
    2370:	00520001 	subseq	r0, r2, r1
}
    2374:	00000000 	andeq	r0, r0, r0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2378:	01000000 	mrseq	r0, (UNDEF: 0)
    237c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
			return 0;
    238c:	00010000 	andeq	r0, r1, r0
    2390:	00000051 	andeq	r0, r0, r1, asr r0
	...
		if (ses == NONE)
    23a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		verify_fds (ses, "tcv27");
    23b4:	00500001 	subseq	r0, r0, r1
    23b8:	00000000 	andeq	r0, r0, r0
		if ((p = apb (size)) != NULL) {
    23bc:	05000000 	streq	r0, [r0, #-0]
    23c0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
			dispose (p, dsp);
    23cc:	00010000 	andeq	r0, r1, r0
			p->attributes = descriptors [ses] -> attpattern;
    23d0:	00000050 	andeq	r0, r0, r0, asr r0
			p->attributes.b.outgoing = 0;
    23d4:	00000000 	andeq	r0, r0, r0
			dispose (p, dsp);
    23d8:	03000500 	movweq	r0, #1280	; 0x500
	...
		return (address)(p + 1);
    23f0:	00500001 	subseq	r0, r0, r1
    23f4:	00000000 	andeq	r0, r0, r0
    23f8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    23fc:	00005000 	andeq	r5, r0, r0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2400:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2404:	00010000 	andeq	r0, r1, r0
    2408:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EREQPAR, "tcv28");
    240c:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "tcv29");
    2410:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2424:	00500001 	subseq	r0, r0, r1
	...
	q_init (q);
    2434:	01000000 	mrseq	r0, (UNDEF: 0)
}
    2438:	00005000 	andeq	r5, r0, r0
	...
    2448:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    244c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	verify_fph (phy, "tcv30");
    245c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2468:	00560001 	subseq	r0, r6, r1
	...
		if (plugins [plg] == NULL)
    2478:	01000000 	mrseq	r0, (UNDEF: 0)
    247c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    248c:	00010000 	andeq	r0, r1, r0
    2490:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    24a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    24ac:	00540001 	subseq	r0, r4, r1
	len -= (ap.head + ap.tail);
    24b0:	00000000 	andeq	r0, r0, r0
    24b4:	01000000 	mrseq	r0, (UNDEF: 0)
    24b8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    24c8:	00010000 	andeq	r0, r1, r0
    24cc:	00000050 	andeq	r0, r0, r0, asr r0
    24d0:	00000000 	andeq	r0, r0, r0
	return 1;
    24d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_fph (phy, "tcv32");
    24e8:	00510001 	subseq	r0, r1, r1
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	01000000 	mrseq	r0, (UNDEF: 0)
    24f4:	00005600 	andeq	r5, r0, r0, lsl #12
    24f8:	00000000 	andeq	r0, r0, r0
    24fc:	00010000 	andeq	r0, r1, r0
	oq = oqueues [phy];
    2500:	00000051 	andeq	r0, r0, r1, asr r0
	...
	deq (b);	// Dequeue the packet ...
    2510:	52000100 	andpl	r0, r0, #0, 2
	...
		return NULL;
    251c:	00540001 	subseq	r0, r4, r1
	...
	verify_fph (phy, "tcv33");
    252c:	01000000 	mrseq	r0, (UNDEF: 0)
    2530:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	oq = oqueues [phy];
    2540:	00010000 	andeq	r0, r1, r0
	b = q_first (oq);
    2544:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    2554:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_plg (b, tcv_xmt, "tcv34");
    2560:	00550001 	subseq	r0, r5, r1
	hblock_t *b = header (pkt);
    2564:	00000000 	andeq	r0, r0, r0
	verify_plg (b, tcv_xmt, "tcv34");
    2568:	01000000 	mrseq	r0, (UNDEF: 0)
    256c:	00005000 	andeq	r5, r0, r0
	...
    257c:	00010000 	andeq	r0, r1, r0
    2580:	00000051 	andeq	r0, r0, r1, asr r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    2584:	00000000 	andeq	r0, r0, r0
}
    2588:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	dispose (b, plugins [b->attributes.b.plugin] ->
    2594:	00560001 	subseq	r0, r6, r1
}
    2598:	00000000 	andeq	r0, r0, r0
    while(1)
    259c:	01000000 	mrseq	r0, (UNDEF: 0)
{
    25a0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    25b0:	00010000 	andeq	r0, r1, r0
    25b4:	00000052 	andeq	r0, r0, r2, asr r0
    25b8:	00000000 	andeq	r0, r0, r0
    25bc:	52000100 	andpl	r0, r0, #0, 2
	...
    FaultISR();
    25c8:	00002668 	andeq	r2, r0, r8, ror #12
        *pui32Dest++ = *pui32Src++;
    25cc:	00002678 	andeq	r2, r0, r8, ror r6
    25d0:	00500001 	subseq	r0, r0, r1
    25d4:	00000000 	andeq	r0, r0, r0
    25d8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    25dc:	78000026 	stmdavc	r0, {r1, r2, r5}
    25e0:	01000026 	tsteq	r0, r6, lsr #32
    25e4:	00005100 	andeq	r5, r0, r0, lsl #2
    25e8:	00000000 	andeq	r0, r0, r0
static byte get_byte () {
    25ec:	268a0000 	strcs	r0, [sl], r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25f0:	268e0000 	strcs	r0, [lr], r0
    25f4:	00010000 	andeq	r0, r1, r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25f8:	00000050 	andeq	r0, r0, r0, asr r0
    25fc:	00000000 	andeq	r0, r0, r0
		if (ee_inp)
    2600:	00265000 	eoreq	r5, r6, r0
			b |= 1;
    2604:	00265b00 	eoreq	r5, r6, r0, lsl #22
    2608:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    2614:	00002620 	andeq	r2, r0, r0, lsr #12
    2618:	0000263c 	andeq	r2, r0, ip, lsr r6
    261c:	44500001 	ldrbmi	r0, [r0], #-1
static void put_byte (byte b) {
    2620:	50000026 	andpl	r0, r0, r6, lsr #32
    2624:	01000026 	tsteq	r0, r6, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2628:	00005000 	andeq	r5, r0, r0
    262c:	00000000 	andeq	r0, r0, r0
		if (b & 0x80)
    2630:	25fc0000 	ldrbcs	r0, [ip, #0]!
    2634:	26000000 	strcs	r0, [r0], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2638:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < 8; i++) {
    263c:	00260450 	eoreq	r0, r6, r0, asr r4
		b <<= 1;
    2640:	00262000 	eoreq	r2, r6, r0
	for (i = 0; i < 8; i++) {
    2644:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2650:	00002748 	andeq	r2, r0, r8, asr #14
    2654:	0000274e 	andeq	r2, r0, lr, asr #14
	put_byte (cmd);
    2658:	00500001 	subseq	r0, r0, r1
    265c:	00000000 	andeq	r0, r0, r0
}
    2660:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2664:	53000027 	movwpl	r0, #39	; 0x27
static void wwait (word st, word del) {
    2668:	01000027 	tsteq	r0, r7, lsr #32
    266c:	27535100 	ldrbcs	r5, [r3, -r0, lsl #2]
    2670:	27ae0000 	strcs	r0, [lr, r0]!
	while (dopen && (rdsr () & 1)) {
    2674:	00010000 	andeq	r0, r1, r0
    2678:	00000054 	andeq	r0, r0, r4, asr r0
    267c:	00000000 	andeq	r0, r0, r0
    2680:	00275400 	eoreq	r5, r7, r0, lsl #8
	put_byte (CMD_RDSR);
    2684:	00275b00 	eoreq	r5, r7, r0, lsl #22
	r = get_byte ();
    2688:	50000100 	andpl	r0, r0, r0, lsl #2
    268c:	00002760 	andeq	r2, r0, r0, ror #14
	while (dopen && (rdsr () & 1)) {
    2690:	00002766 	andeq	r2, r0, r6, ror #14
}
    2694:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		if (st == WNONE)
    2698:	7e000027 	cdpvc	0, 0, cr0, cr0, cr7, {1}
    269c:	01000027 	tsteq	r0, r7, lsr #32
			mdelay (1);
    26a0:	277e5500 	ldrbcs	r5, [lr, -r0, lsl #10]!
    26a4:	27820000 	strcs	r0, [r2, r0]
			delay (del, st);
    26a8:	00010000 	andeq	r0, r1, r0
    26ac:	00278250 	eoreq	r8, r7, r0, asr r2
			release;
    26b0:	0027ae00 	eoreq	sl, r7, r0, lsl #28
    26b4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (dopen) {
    26c0:	00002772 	andeq	r2, r0, r2, ror r7
		wwait (WNONE, 1);
    26c4:	00002776 	andeq	r2, r0, r6, ror r7
    26c8:	76500001 	ldrbvc	r0, [r0], -r1
    26cc:	7e000027 	cdpvc	0, 0, cr0, cr0, cr7, {1}
	dstat = 0;
    26d0:	01000027 	tsteq	r0, r7, lsr #32
}
    26d4:	27845700 	strcs	r5, [r4, r0, lsl #14]
    26d8:	278d0000 	strcs	r0, [sp, r0]
    26dc:	00010000 	andeq	r0, r1, r0
	udelay (1);
    26e0:	00278d50 	eoreq	r8, r7, r0, asr sp
    26e4:	0027a000 	eoreq	sl, r7, r0
	udelay (1);
    26e8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
		dopen = DOPEN_TEMP;
    26ec:	000027a0 	andeq	r2, r0, r0, lsr #15
    26f0:	000027a7 	andeq	r2, r0, r7, lsr #15
    26f4:	a7500001 	ldrbge	r0, [r0, -r1]
    26f8:	ae000027 	cdpge	0, 0, cr0, cr0, cr7, {1}
static void cclose () {
    26fc:	01000027 	tsteq	r0, r7, lsr #32
	if (dopen == DOPEN_TEMP) {
    2700:	00005700 	andeq	r5, r0, r0, lsl #14
    2704:	00000000 	andeq	r0, r0, r0
		wwait (WNONE, 1);
    2708:	27b40000 	ldrcs	r0, [r4, r0]!
    270c:	27c20000 	strbcs	r0, [r2, r0]
	cmd_0 (CMD_DP);
    2710:	00010000 	andeq	r0, r1, r0
    2714:	00281e50 	eoreq	r1, r8, r0, asr lr
		dopen = 0;
    2718:	00282c00 	eoreq	r2, r8, r0, lsl #24
}
    271c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	dopen = DOPEN_PERM;
    2728:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
    272c:	000027c9 	andeq	r2, r0, r9, asr #15
}
    2730:	c9510001 	ldmdbgt	r1, {r0}^
	if (dopen) {
    2734:	e8000027 	stmda	r0, {r0, r1, r2, r5}
    2738:	01000027 	tsteq	r0, r7, lsr #32
		dopen = DOPEN_TEMP;
    273c:	27e85700 	strbcs	r5, [r8, r0, lsl #14]!
		cclose ();
    2740:	27f00000 	ldrbcs	r0, [r0, r0]!
}
    2744:	00010000 	andeq	r0, r1, r0
int ser_out (word st, const char *m) {
    2748:	0027f051 	eoreq	pc, r7, r1, asr r0	; <UNPREDICTABLE>
	if ((prcs = running (__outserial)) != 0) {
    274c:	00281600 	eoreq	r1, r8, r0, lsl #12
    2750:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2754:	00002816 	andeq	r2, r0, r6, lsl r8
		join (prcs, st);
    2758:	00002819 	andeq	r2, r0, r9, lsl r8
		release;
    275c:	19510001 	ldmdbne	r1, {r0}^
	if (*m)
    2760:	1e000028 	cdpne	0, 0, cr0, cr0, cr8, {1}
		prcs = strlen (m) +1;
    2764:	01000028 	tsteq	r0, r8, lsr #32
    2768:	281e5700 	ldmdacs	lr, {r8, r9, sl, ip, lr}
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    276c:	282c0000 	stmdacs	ip!, {}	; <UNPREDICTABLE>
    2770:	00010000 	andeq	r0, r1, r0
    2774:	00000051 	andeq	r0, r0, r1, asr r0
		umwait (st);
    2778:	00000000 	andeq	r0, r0, r0
    277c:	0027b400 	eoreq	fp, r7, r0, lsl #8
		prcs =  m [1] + 3;
    2780:	0027c900 	eoreq	ip, r7, r0, lsl #18
	if (*m)
    2784:	52000100 	andpl	r0, r0, #0, 2
		strcpy (buf, m);
    2788:	000027c9 	andeq	r2, r0, r9, asr #15
    278c:	000027e8 	andeq	r2, r0, r8, ror #15
	if (runstrand (__outserial, buf) == 0) {
    2790:	e8550001 	ldmda	r5, {r0}^
    2794:	f0000027 			; <UNDEFINED> instruction: 0xf0000027
		ufree (buf);
    2798:	01000027 	tsteq	r0, r7, lsr #32
    279c:	27f05200 	ldrbcs	r5, [r0, r0, lsl #4]!
		memcpy (buf, m, prcs);
    27a0:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    27a4:	00010000 	andeq	r0, r1, r0
    27a8:	00281655 	eoreq	r1, r8, r5, asr r6
}
    27ac:	00281900 	eoreq	r1, r8, r0, lsl #18
    27b0:	52000100 	andpl	r0, r0, #0, 2
int ser_in (word st, char *buf, int len) {
    27b4:	00002819 	andeq	r2, r0, r9, lsl r8
    27b8:	0000281e 	andeq	r2, r0, lr, lsl r8
	if (len == 0)
    27bc:	1e550001 	cdpne	0, 5, cr0, cr5, cr1, {0}
	if (__inpline == NULL) {
    27c0:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
		if ((prcs = running (__inserial)) == 0) {
    27c4:	01000028 	tsteq	r0, r8, lsr #32
    27c8:	00005200 	andeq	r5, r0, r0, lsl #4
			prcs = runthread (__inserial);
    27cc:	00000000 	andeq	r0, r0, r0
    27d0:	27ca0000 	strbcs	r0, [sl, r0]
			if (prcs == 0) {
    27d4:	27d00000 	ldrbcs	r0, [r0, r0]
				npwait (st);
    27d8:	00010000 	andeq	r0, r1, r0
		release;
    27dc:	0027d050 	eoreq	sp, r7, r0, asr r0
		join (prcs, st);
    27e0:	0027d300 	eoreq	sp, r7, r0, lsl #6
    27e4:	51000100 	mrspl	r0, (UNDEF: 16)
	if (*__inpline == NULL) // bin cmd
    27e8:	000027d4 	ldrdeq	r2, [r0], -r4
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    27ec:	000027d8 	ldrdeq	r2, [r0], -r8
	if (prcs >= len)
    27f0:	e0500001 	subs	r0, r0, r1
		prcs = len-1;
    27f4:	e5000027 	str	r0, [r0, #-39]	; 0xffffffd9
	memcpy (buf, __inpline, prcs);
    27f8:	01000027 	tsteq	r0, r7, lsr #32
    27fc:	27f05000 	ldrbcs	r5, [r0, r0]!
    2800:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
	ufree (__inpline);
    2804:	00010000 	andeq	r0, r1, r0
	__inpline = NULL;
    2808:	00281c54 	eoreq	r1, r8, r4, asr ip
	if (*buf) // if it's NULL, it's a bin cmd
    280c:	00281e00 	eoreq	r1, r8, r0, lsl #28
		buf [prcs] = '\0';
    2810:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		prcs = strlen (__inpline);
    281c:	0000282c 	andeq	r2, r0, ip, lsr #16
		return 0;
    2820:	00002834 	andeq	r2, r0, r4, lsr r8
    2824:	00500001 	subseq	r0, r0, r1
    2828:	00000000 	andeq	r0, r0, r0
int ser_outf (word st, const char *m, ...) {
    282c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2830:	41000028 	tstmi	r0, r8, lsr #32
	if ((prcs = running (__outserial)) != 0) {
    2834:	01000028 	tsteq	r0, r8, lsr #32
    2838:	28415000 	stmdacs	r1, {ip, lr}^
		join (prcs, st);
    283c:	28460000 	stmdacs	r6, {}^	; <UNPREDICTABLE>
    2840:	00010000 	andeq	r0, r1, r0
		release;
    2844:	00284656 	eoreq	r4, r8, r6, asr r6
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2848:	00284f00 	eoreq	r4, r8, r0, lsl #30
    284c:	50000100 	andpl	r0, r0, r0, lsl #2
    2850:	0000284f 	andeq	r2, r0, pc, asr #16
		umwait (st);
    2854:	00002876 	andeq	r2, r0, r6, ror r8
    2858:	76560001 	ldrbvc	r0, [r6], -r1
	if (runstrand (__outserial, buf) == 0) {
    285c:	80000028 	andhi	r0, r0, r8, lsr #32
    2860:	01000028 	tsteq	r0, r8, lsr #32
    2864:	00005000 	andeq	r5, r0, r0
		ufree (buf);
    2868:	00000000 	andeq	r0, r0, r0
		npwait (st);
    286c:	28500000 	ldmdacs	r0, {}^	; <UNPREDICTABLE>
}
    2870:	28540000 	ldmdacs	r4, {}^	; <UNPREDICTABLE>
    2874:	00010000 	andeq	r0, r1, r0
    2878:	00285450 	eoreq	r5, r8, r0, asr r4
    287c:	00285c00 	eoreq	r5, r8, r0, lsl #24
int ser_inf (word st, const char *fmt, ...) {
    2880:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2884:	0000285c 	andeq	r2, r0, ip, asr r8
	if (fmt == NULL)
    2888:	00002860 	andeq	r2, r0, r0, ror #16
	if (__inpline == NULL) {
    288c:	60500001 	subsvs	r0, r0, r1
		if ((prcs = running (__inserial)) == 0) {
    2890:	76000028 	strvc	r0, [r0], -r8, lsr #32
    2894:	01000028 	tsteq	r0, r8, lsr #32
			prcs = runthread (__inserial);
    2898:	00005500 	andeq	r5, r0, r0, lsl #10
    289c:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    28a0:	28800000 	stmcs	r0, {}	; <UNPREDICTABLE>
				npwait (st);
    28a4:	288e0000 	stmcs	lr, {}	; <UNPREDICTABLE>
		release;
    28a8:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    28ac:	0028d450 	eoreq	sp, r8, r0, asr r4
    28b0:	0028e000 	eoreq	lr, r8, r0
	va_start (ap, fmt);
    28b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	ufree (__inpline);
    28c0:	00002896 	muleq	r0, r6, r8
	__inpline = NULL;
    28c4:	0000289c 	muleq	r0, ip, r8
}
    28c8:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    28cc:	9f000028 	svcls	0x00000028
    28d0:	01000028 	tsteq	r0, r8, lsr #32
		return 0;
    28d4:	28a05100 	stmiacs	r0!, {r8, ip, lr}
    28d8:	28a40000 	stmiacs	r4!, {}	; <UNPREDICTABLE>
    28dc:	00010000 	andeq	r0, r1, r0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    28e0:	0028ac50 	eoreq	sl, r8, r0, asr ip
    28e4:	0028b100 	eoreq	fp, r8, r0, lsl #2
    28e8:	50000100 	andpl	r0, r0, r0, lsl #2
	RF_cmdFs.frequency = 
    28ec:	000028be 			; <UNDEFINED> instruction: 0x000028be
}
    28f0:	000028c0 	andeq	r2, r0, r0, asr #17
    28f4:	c0500001 	subsgt	r0, r0, r1
    28f8:	c8000028 	stmdagt	r0, {r3, r5}
    28fc:	01000028 	tsteq	r0, r8, lsr #32
static int option (int opt, address val) {
    2900:	00005400 	andeq	r5, r0, r0, lsl #8
    2904:	00000000 	andeq	r0, r0, r0
    2908:	30400000 	subcc	r0, r0, r0
    290c:	304e0000 	subcc	r0, lr, r0
    2910:	00010000 	andeq	r0, r1, r0
    2914:	00304e50 	eorseq	r4, r0, r0, asr lr
    2918:	00305400 	eorseq	r5, r0, r0, lsl #8
    291c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2920:	00003054 	andeq	r3, r0, r4, asr r0
    2924:	0000305e 	andeq	r3, r0, lr, asr r0
    2928:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    292c:	62000030 	andvs	r0, r0, #48	; 0x30
    2930:	01000030 	tsteq	r0, r0, lsr r0
			goto RVal;
    2934:	30625600 	rsbcc	r5, r2, r0, lsl #12
			_BIS (dstate, DSTATE_RXON);
    2938:	30720000 	rsbscc	r0, r2, r0
    293c:	00010000 	andeq	r0, r1, r0
	int ret = 0;
    2940:	00307250 	eorseq	r7, r0, r0, asr r2
			p_trigger (drvprcs, qevent);
    2944:	00316a00 	eorseq	r6, r1, r0, lsl #20
    2948:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2954:	00003040 	andeq	r3, r0, r0, asr #32
    2958:	00003050 	andeq	r3, r0, r0, asr r0
    295c:	54510001 	ldrbpl	r0, [r1], #-1
    2960:	60000030 	andvs	r0, r0, r0, lsr r0
    2964:	01000030 	tsteq	r0, r0, lsr r0
    2968:	30625100 	rsbcc	r5, r2, r0, lsl #2
}
    296c:	30720000 	rsbscc	r0, r2, r0
			_BIC (dstate, DSTATE_RXON);
    2970:	00010000 	andeq	r0, r1, r0
    2974:	00000051 	andeq	r0, r0, r1, asr r0
			statid = (val == NULL) ? 0 : *val;
    2978:	00000000 	andeq	r0, r0, r0
    297c:	0030a800 	eorseq	sl, r0, r0, lsl #16
	int ret = 0;
    2980:	0030bc00 	eorseq	fp, r0, r0, lsl #24
			ret = (int) statid;
    2984:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	if (val != NULL)
    2988:	000030bc 	strheq	r3, [r0], -ip
		*val = ret;
    298c:	000030c2 	andeq	r3, r0, r2, asr #1
			ret = rbuffl + 2;
    2990:	00700002 	rsbseq	r0, r0, r2
	...
				memcpy (val, &rxstat,
    299c:	00003072 	andeq	r3, r0, r2, ror r0
    29a0:	0000307b 	andeq	r3, r0, fp, ror r0
				memset (&rxstat, 0, 
    29a4:	7b530001 	blvc	14c29b0 <__ccfg+0x14a2a08>
    29a8:	de000030 	mcrle	0, 0, r0, cr0, cr0, {1}
			if (val == NULL)
    29ac:	01000030 	tsteq	r0, r0, lsr r0
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    29b0:	31105b00 	tstcc	r0, r0, lsl #22
    29b4:	31140000 	tstcc	r4, r0
				utimer_set (bckf_timer, *val);
    29b8:	00010000 	andeq	r0, r1, r0
    29bc:	0000005b 	andeq	r0, r0, fp, asr r0
    29c0:	00000000 	andeq	r0, r0, r0
			for (ret = 0; ret < 8; ret++)
    29c4:	00307c00 	eorseq	r7, r0, r0, lsl #24
				if (RF_cmdPropRadioDivSetup.txPower
    29c8:	00308000 	eorseq	r8, r0, r0
					== patable [ret])
    29cc:	50000100 	andpl	r0, r0, r0, lsl #2
				if (RF_cmdPropRadioDivSetup.txPower
    29d0:	00003086 	andeq	r3, r0, r6, lsl #1
			for (ret = 0; ret < 8; ret++)
    29d4:	000030ac 	andeq	r3, r0, ip, lsr #1
    29d8:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29dc:	af000030 	svcge	0x00000030
    29e0:	01000030 	tsteq	r0, r0, lsr r0
    29e4:	31105300 	tstcc	r0, r0, lsl #6
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    29e8:	31140000 	tstcc	r4, r0
    29ec:	00010000 	andeq	r0, r1, r0
			_BIS (dstate, DSTATE_IRST);
    29f0:	00000050 	andeq	r0, r0, r0, asr r0
    29f4:	00000000 	andeq	r0, r0, r0
    29f8:	00290000 	eoreq	r0, r9, r0
			ret = (int) channel;
    29fc:	00292e00 	eoreq	r2, r9, r0, lsl #28
			goto RVal;
    2a00:	50000100 	andpl	r0, r0, r0, lsl #2
				(*val > 7) ? 7 : *val;
    2a04:	00002936 	andeq	r2, r0, r6, lsr r9
    2a08:	00002940 	andeq	r2, r0, r0, asr #18
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a0c:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    2a10:	80000029 	andhi	r0, r0, r9, lsr #32
			plugch ();
    2a14:	01000029 	tsteq	r0, r9, lsr #32
			_BIS (dstate, DSTATE_IRST);
    2a18:	29845000 	stmibcs	r4, {ip, lr}
    2a1c:	29880000 	stmibcs	r8, {}	; <UNPREDICTABLE>
			ret = (int) vrate;
    2a20:	00010000 	andeq	r0, r1, r0
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a24:	00299050 	eoreq	r9, r9, r0, asr r0
    2a28:	00299400 	eoreq	r9, r9, r0, lsl #8
    2a2c:	50000100 	andpl	r0, r0, r0, lsl #2
    2a30:	00002996 	muleq	r0, r6, r9
    2a34:	0000299c 	muleq	r0, ip, r9
    2a38:	a4500001 	ldrbge	r0, [r0], #-1
    2a3c:	a6000029 	strge	r0, [r0], -r9, lsr #32
    2a40:	01000029 	tsteq	r0, r9, lsr #32
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a44:	29ac5000 	stmibcs	ip!, {ip, lr}
    2a48:	29b10000 	ldmibcs	r1!, {}	; <UNPREDICTABLE>
    2a4c:	00010000 	andeq	r0, r1, r0
    2a50:	0029c050 	eoreq	ip, r9, r0, asr r0
			syserror (EREQPAR, "cc13 op");
    2a54:	0029c600 	eoreq	ip, r9, r0, lsl #12
    2a58:	50000100 	andpl	r0, r0, r0, lsl #2
    2a5c:	000029dc 	ldrdeq	r2, [r0], -ip
    2a60:	000029e0 	andeq	r2, r0, r0, ror #19
    2a64:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2a68:	00000029 	andeq	r0, r0, r9, lsr #32
    2a6c:	0100002a 	tsteq	r0, sl, lsr #32
    2a70:	2a025000 	bcs	96a78 <__ccfg+0x76ad0>
    2a74:	2a540000 	bcs	1502a7c <__ccfg+0x14e2ad4>
    2a78:	00010000 	andeq	r0, r1, r0
    2a7c:	00000050 	andeq	r0, r0, r0, asr r0
    2a80:	00000000 	andeq	r0, r0, r0
    2a84:	00290000 	eoreq	r0, r9, r0
    2a88:	00294000 	eoreq	r4, r9, r0
    2a8c:	51000100 	mrspl	r0, (UNDEF: 16)
static void issue_cmd (lword cmd) {
    2a90:	0000296e 	andeq	r2, r0, lr, ror #18
    2a94:	00002980 	andeq	r2, r0, r0, lsl #19
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a98:	84510001 	ldrbhi	r0, [r1], #-1
    2a9c:	88000029 	stmdahi	r0, {r0, r3, r5}
    2aa0:	01000029 	tsteq	r0, r9, lsr #32
		if (res != 0x86)
    2aa4:	29885100 	stmibcs	r8, {r8, ip, lr}
			syserror (EHARDWARE, "hang ic0");
    2aa8:	29900000 	ldmibcs	r0, {}	; <UNPREDICTABLE>
    2aac:	00010000 	andeq	r0, r1, r0
		if (cnt-- == 0) {
    2ab0:	00299054 	eoreq	r9, r9, r4, asr r0
			diag ("HUP %lx %lx", cmd, res);
    2ab4:	00299e00 	eoreq	r9, r9, r0, lsl #28
    2ab8:	51000100 	mrspl	r0, (UNDEF: 16)
			syserror (EHARDWARE, "hang ic0");
    2abc:	0000299e 	muleq	r0, lr, r9
		udelay (1);
    2ac0:	000029a4 	andeq	r2, r0, r4, lsr #19
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2ac4:	a4540001 	ldrbge	r0, [r4], #-1
}
    2ac8:	a9000029 	stmdbge	r0, {r0, r3, r5}
    2acc:	01000029 	tsteq	r0, r9, lsr #32
    2ad0:	29a95100 	stmibcs	r9!, {r8, ip, lr}
    2ad4:	29ac0000 	stmibcs	ip!, {}	; <UNPREDICTABLE>
static void rx_de () {
    2ad8:	00010000 	andeq	r0, r1, r0
	if ((dstate & DSTATE_RXAC) == 0)
    2adc:	0029ac54 	eoreq	sl, r9, r4, asr ip
    2ae0:	0029b100 	eoreq	fp, r9, r0, lsl #2
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2ae4:	51000100 	mrspl	r0, (UNDEF: 16)
	_BIC (dstate, DSTATE_RXAC);
    2ae8:	000029b1 			; <UNDEFINED> instruction: 0x000029b1
    2aec:	000029c0 	andeq	r2, r0, r0, asr #19
}
    2af0:	c0540001 	subsgt	r0, r4, r1
    2af4:	c2000029 	andgt	r0, r0, #41	; 0x29
    2af8:	01000029 	tsteq	r0, r9, lsr #32
static void rf_off () {
    2afc:	29c25100 	stmibcs	r2, {r8, ip, lr}^
	if ((dstate & DSTATE_RFON) == 0)
    2b00:	29c40000 	stmibcs	r4, {}^	; <UNPREDICTABLE>
    2b04:	00010000 	andeq	r0, r1, r0
	IntDisable (INT_RFC_CPE_0);
    2b08:	0029c454 	eoreq	ip, r9, r4, asr r4
    2b0c:	0029cc00 	eoreq	ip, r9, r0, lsl #24
    2b10:	51000100 	mrspl	r0, (UNDEF: 16)
	RFCAdi3VcoLdoVoltageMode (false);
    2b14:	000029cc 	andeq	r2, r0, ip, asr #19
	RFCSynthPowerDown ();
    2b18:	000029dc 	ldrdeq	r2, [r0], -ip
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2b1c:	dc540001 	mrrcle	0, 0, r0, r4, cr1
    2b20:	56000029 	strpl	r0, [r0], -r9, lsr #32
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2b24:	0100002a 	tsteq	r0, sl, lsr #32
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b28:	2a565100 	bcs	1596f30 <__ccfg+0x1576f88>
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2b2c:	2a900000 	bcs	fe402b34 <_estack+0xde3fdb34>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2b30:	00010000 	andeq	r0, r1, r0
    2b34:	00000054 	andeq	r0, r0, r4, asr r0
    2b38:	00000000 	andeq	r0, r0, r0
	_BIC (dstate, DSTATE_RFON);
    2b3c:	00293400 	eoreq	r3, r9, r0, lsl #8
    2b40:	00293600 	eoreq	r3, r9, r0, lsl #12
}
    2b44:	50000100 	andpl	r0, r0, r0, lsl #2
    2b48:	00002942 	andeq	r2, r0, r2, asr #18
    2b4c:	0000296c 	andeq	r2, r0, ip, ror #18
    2b50:	88500001 	ldmdahi	r0, {r0}^
    2b54:	90000029 	andls	r0, r0, r9, lsr #32
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2b58:	01000029 	tsteq	r0, r9, lsr #32
    2b5c:	29cc5000 	stmibcs	ip, {ip, lr}^
    2b60:	29dc0000 	ldmibcs	ip, {}^	; <UNPREDICTABLE>
		if (cmd->status == tstat)
    2b64:	00010000 	andeq	r0, r1, r0
		if (timeout-- == 0) {
    2b68:	0029e650 	eoreq	lr, r9, r0, asr r6
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2b6c:	0029fc00 	eoreq	pc, r9, r0, lsl #24
    2b70:	50000100 	andpl	r0, r0, r0, lsl #2
    2b74:	00002a00 	andeq	r2, r0, r0, lsl #20
			syserror (EHARDWARE, "rt2");
    2b78:	00002a02 	andeq	r2, r0, r2, lsl #20
    2b7c:	00500001 	subseq	r0, r0, r1
		udelay (1);
    2b80:	00000000 	andeq	r0, r0, r0
		if (cmd->status == tstat)
    2b84:	56000000 	strpl	r0, [r0], -r0
}
    2b88:	60000029 	andvs	r0, r0, r9, lsr #32
    2b8c:	01000029 	tsteq	r0, r9, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2b90:	00005300 	andeq	r5, r0, r0, lsl #6
    2b94:	00000000 	andeq	r0, r0, r0
static void rf_on () {
    2b98:	2de00000 	stclcs	0, cr0, [r0]
    2b9c:	2df40000 	ldclcs	0, cr0, [r4]
	OSCHF_TurnOnXosc();
    2ba0:	00010000 	andeq	r0, r1, r0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2ba4:	002f6850 	eoreq	r6, pc, r0, asr r8	; <UNPREDICTABLE>
    2ba8:	002f8000 	eoreq	r8, pc, r0
    2bac:	50000100 	andpl	r0, r0, r0, lsl #2
    2bb0:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb4:	00002f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    2bb8:	00500001 	subseq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bbc:	00000000 	andeq	r0, r0, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2bc0:	60000000 	andvs	r0, r0, r0
	issue_cmd (
    2bc4:	6800002e 	stmdavs	r0, {r1, r2, r3, r5}
    2bc8:	0100002e 	tsteq	r0, lr, lsr #32
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2bcc:	2e685200 	cdpcs	2, 6, cr5, cr8, cr0, {0}
    2bd0:	2e6b0000 	cdpcs	0, 6, cr0, cr11, cr0, {0}
    2bd4:	00020000 	andeq	r0, r2, r0
   pPatchTab[80] = 0;
    2bd8:	00000072 	andeq	r0, r0, r2, ror r0
   } while (--nIterations);
    2bdc:	00000000 	andeq	r0, r0, r0
   pPatchTab[53] = 2;
    2be0:	30060000 	andcc	r0, r6, r0
    2be4:	30100000 	andscc	r0, r0, r0
   pPatchTab[55] = 3;
    2be8:	00010000 	andeq	r0, r1, r0
   pPatchTab[110] = 4;
    2bec:	00000053 	andeq	r0, r0, r3, asr r0
   pPatchTab[107] = 5;
    2bf0:	00000000 	andeq	r0, r0, r0
   pPatchTab[65] = 6;
    2bf4:	002d4e00 	eoreq	r4, sp, r0, lsl #28
    2bf8:	002d9200 	eoreq	r9, sp, r0, lsl #4
   pPatchTab[57] = 1;
    2bfc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
   pIrqPatch[1] = _IRQ_PATCH_0;
    2c00:	00002d92 	muleq	r0, r2, sp
   const uint32_t *pS = patchGenfskRfe;
    2c04:	00002d9a 	muleq	r0, sl, sp
      t2 = *pS++;
    2c08:	00740002 	rsbseq	r0, r4, r2
      t4 = *pS++;
    2c0c:	00002d9a 	muleq	r0, sl, sp
      t6 = *pS++;
    2c10:	00002da4 	andeq	r2, r0, r4, lsr #27
      t8 = *pS++;
    2c14:	a4540001 	ldrbge	r0, [r4], #-1
      *pD++ = t1;
    2c18:	a900002d 	stmdbge	r0, {r0, r2, r3, r5}
      *pD++ = t2;
    2c1c:	0200002d 	andeq	r0, r0, #45	; 0x2d
      *pD++ = t3;
    2c20:	ba007400 	blt	1fc28 <__exidx_end+0x19ea8>
      *pD++ = t5;
    2c24:	be00002d 	cdplt	0, 0, cr0, cr0, cr13, {1}
      *pD++ = t7;
    2c28:	0200002d 	andeq	r0, r0, #45	; 0x2d
   } while (--nIterations);
    2c2c:	00007400 	andeq	r7, r0, r0, lsl #8
    2c30:	00000000 	andeq	r0, r0, r0
      *pD++ = t8;
    2c34:	76000000 	strvc	r0, [r0], -r0
   } while (--nIterations);
    2c38:	8d00002d 	stchi	0, cr0, [r0, #-180]	; 0xffffff4c
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2c3c:	0100002d 	tsteq	r0, sp, lsr #32
   *pD++ = t2;
    2c40:	00005200 	andeq	r5, r0, r0, lsl #4
   *pD++ = t3;
    2c44:	00000000 	andeq	r0, r0, r0
   *pD++ = t4;
    2c48:	2d4e0000 	stclcs	0, cr0, [lr, #-0]
   *pD++ = t5;
    2c4c:	2dae0000 	stccs	0, cr0, [lr]
    2c50:	00010000 	andeq	r0, r1, r0
	RFCAdi3VcoLdoVoltageMode (true);
    2c54:	002dba55 	eoreq	fp, sp, r5, asr sl
    2c58:	002dbe00 	eoreq	fp, sp, r0, lsl #28
       	RFCRfTrimSet (&rfTrim);
    2c5c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2c68:	00002a90 	muleq	r0, r0, sl
    2c6c:	00002a96 	muleq	r0, r6, sl
	issue_cmd ((lword)&cmd_srt);
    2c70:	96500001 	ldrbls	r0, [r0], -r1
    2c74:	c800002a 	stmdagt	r0, {r1, r3, r5}
	issue_cmd ((lword)&RF_cmdFs);
    2c78:	0100002a 	tsteq	r0, sl, lsr #32
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2c7c:	00005400 	andeq	r5, r0, r0, lsl #8
    2c80:	00000000 	andeq	r0, r0, r0
    2c84:	2a9e0000 	bcs	fe782c8c <_estack+0xde77dc8c>
	IntEnable (INT_RFC_CPE_0);
    2c88:	2aa80000 	bcs	fea02c90 <_estack+0xde9fdc90>
	_BIC (dstate, DSTATE_IRST);
    2c8c:	00010000 	andeq	r0, r1, r0
    2c90:	002aae52 	eoreq	sl, sl, r2, asr lr
    2c94:	002ab900 	eoreq	fp, sl, r0, lsl #18
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2c98:	52000100 	andpl	r0, r0, #0, 2
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2c9c:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
	IntEnable (INT_RFC_CPE_0);
    2ca0:	00002ac3 	andeq	r2, r0, r3, asr #21
    2ca4:	c6520001 	ldrbgt	r0, [r2], -r1
}
    2ca8:	d800002a 	stmdale	r0, {r1, r3, r5}
	IntEnable (INT_RFC_CPE_0);
    2cac:	0100002a 	tsteq	r0, sl, lsr #32
    2cb0:	00005200 	andeq	r5, r0, r0, lsl #4
    2cb4:	00000000 	andeq	r0, r0, r0
    2cb8:	2aa60000 	bcs	fe982cc0 <_estack+0xde97dcc0>
    2cbc:	2aa80000 	bcs	fea02cc4 <_estack+0xde9fdcc4>
    2cc0:	00010000 	andeq	r0, r1, r0
    2cc4:	00000054 	andeq	r0, r0, r4, asr r0
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	002b5800 	eoreq	r5, fp, r0, lsl #16
    2cd0:	002b6200 	eoreq	r6, fp, r0, lsl #4
    2cd4:	50000100 	andpl	r0, r0, r0, lsl #2
    2cd8:	00002b62 	andeq	r2, r0, r2, ror #22
    2cdc:	00002b88 	andeq	r2, r0, r8, lsl #23
    2ce0:	00540001 	subseq	r0, r4, r1
    2ce4:	00000000 	andeq	r0, r0, r0
    2ce8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2cec:	6200002b 	andvs	r0, r0, #43	; 0x2b
    2cf0:	0100002b 	tsteq	r0, fp, lsr #32
    2cf4:	2b625100 	blcs	18970fc <__ccfg+0x1877154>
    2cf8:	2b880000 	blcs	fe202d00 <_estack+0xde1fdd00>
    2cfc:	00010000 	andeq	r0, r1, r0
    2d00:	00000055 	andeq	r0, r0, r5, asr r0
    2d04:	00000000 	andeq	r0, r0, r0
    2d08:	002c3200 	eoreq	r3, ip, r0, lsl #4
    2d0c:	002c3a00 	eoreq	r3, ip, r0, lsl #20
static void rx_int_enable () {
    2d10:	52000100 	andpl	r0, r0, #0, 2
	...
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2d1c:	00002c06 	andeq	r2, r0, r6, lsl #24
    2d20:	00002c32 	andeq	r2, r0, r2, lsr ip
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2d24:	36530001 	ldrbcc	r0, [r3], -r1
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2d28:	3a00002c 	bcc	2de0 <cc1350_driver>
    2d2c:	0100002c 	tsteq	r0, ip, lsr #32
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2d30:	00005300 	andeq	r5, r0, r0, lsl #6
    2d34:	00000000 	andeq	r0, r0, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d38:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    2d3c:	2c3a0000 	ldccs	0, cr0, [sl], #-0
    2d40:	00010000 	andeq	r0, r1, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d44:	0000005e 	andeq	r0, r0, lr, asr r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d48:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d4c:	002c1000 	eoreq	r1, ip, r0
		if (db->status == DATA_ENTRY_FINISHED) {
    2d50:	002c3a00 	eoreq	r3, ip, r0, lsl #20
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d54:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    2d60:	00002c14 	andeq	r2, r0, r4, lsl ip
    2d64:	00002c50 	andeq	r2, r0, r0, asr ip
    2d68:	00550001 	subseq	r0, r5, r1
    2d6c:	00000000 	andeq	r0, r0, r0
				__dp [pl + 1] = __dp [pl] - 128;
    2d70:	14000000 	strne	r0, [r0], #-0
				pl = __dp [1] + 2;
    2d74:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
				__dp [pl + 1] = __dp [pl] - 128;
    2d78:	0100002c 	tsteq	r0, ip, lsr #32
    2d7c:	2c2c5000 	stccs	0, cr5, [ip], #-0
				__dp [pl] = 0;
    2d80:	2c360000 	ldccs	0, cr0, [r6], #-0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d84:	00020000 	andeq	r0, r2, r0
    2d88:	2c361873 	ldccs	8, cr1, [r6], #-460	; 0xfffffe34
    2d8c:	2c380000 	ldccs	0, cr0, [r8], #-0
			db->status = DATA_ENTRY_PENDING;
    2d90:	00020000 	andeq	r0, r2, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d94:	00001870 	andeq	r1, r0, r0, ror r8
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2d98:	00000000 	andeq	r0, r0, r0
				diag ("BAD RX");
    2d9c:	2c320000 	ldccs	0, cr0, [r2], #-0
    2da0:	2c500000 	mracs	r0, r0, acc0
	if (nr) {
    2da4:	00010000 	andeq	r0, r1, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2da8:	00000054 	andeq	r0, r0, r4, asr r0
}
    2dac:	00000000 	andeq	r0, r0, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2db0:	00320800 	eorseq	r0, r2, r0, lsl #16
    2db4:	00320a00 	eorseq	r0, r2, r0, lsl #20
    2db8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    2dc4:	00003204 	andeq	r3, r0, r4, lsl #4
    2dc8:	00003206 	andeq	r3, r0, r6, lsl #4
    2dcc:	00500001 	subseq	r0, r0, r1
    2dd0:	00000000 	andeq	r0, r0, r0
    2dd4:	fc000000 	stc2	0, cr0, [r0], {-0}
    2dd8:	fe000031 	mcr2	0, 0, r0, cr0, cr1, {1}
    2ddc:	01000031 	tsteq	r0, r1, lsr r0
thread (cc1350_driver)
    2de0:	00005000 	andeq	r5, r0, r0
    2de4:	00000000 	andeq	r0, r0, r0
    2de8:	31d80000 	bicscc	r0, r8, r0
    2dec:	31e20000 	mvncc	r0, r0
    2df0:	00010000 	andeq	r0, r1, r0
		if (dstate & DSTATE_IRST) {
    2df4:	0031e450 	eorseq	lr, r1, r0, asr r4
    2df8:	0031f200 	eorseq	pc, r1, r0, lsl #4
    2dfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			_BIC (dstate,
    2e08:	000031d8 	ldrdeq	r3, [r0], -r8
		if (dstate & DSTATE_RXAC) {
    2e0c:	000031da 	ldrdeq	r3, [r0], -sl
    2e10:	00510001 	subseq	r0, r1, r1
			if ((dstate & DSTATE_RXON) == 0)
    2e14:	00000000 	andeq	r0, r0, r0
				rx_de ();
    2e18:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
		if (paylen == 0) {
    2e1c:	dc000031 	stcle	0, cr0, [r0], {49}	; 0x31
    2e20:	01000031 	tsteq	r0, r1, lsr r0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2e24:	00005200 	andeq	r5, r0, r0, lsl #4
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	31d80000 	bicscc	r0, r8, r0
    2e30:	31f00000 	mvnscc	r0, r0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e34:	00010000 	andeq	r0, r1, r0
    2e38:	00000053 	andeq	r0, r0, r3, asr r0
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	0031b400 	eorseq	fp, r1, r0, lsl #8
    2e44:	0031c000 	eorseq	ip, r1, r0
    2e48:	50000100 	andpl	r0, r0, r0, lsl #2
    2e4c:	000031c0 	andeq	r3, r0, r0, asr #3
    2e50:	000031d8 	ldrdeq	r3, [r0], -r8
		} else if (dstate & DSTATE_RXON) {
    2e54:	00530001 	subseq	r0, r3, r1
	if (dstate & DSTATE_RFON)
    2e58:	00000000 	andeq	r0, r0, r0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2e5c:	0c000000 	stceq	0, cr0, [r0], {-0}
		re->status = DATA_ENTRY_PENDING;
    2e60:	1a000032 	bne	2f30 <cc1350_driver+0x150>
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2e64:	01000032 	tsteq	r0, r2, lsr r0
	issue_cmd ((lword)&RF_cmdPropRx);
    2e68:	321a5000 	andscc	r5, sl, #0
	_BIS (dstate, DSTATE_RXAC);
    2e6c:	32540000 	subscc	r0, r4, #0
    2e70:	00010000 	andeq	r0, r1, r0
    2e74:	00000055 	andeq	r0, r0, r5, asr r0
    2e78:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RXAC)
    2e7c:	00320c00 	eorseq	r0, r2, r0, lsl #24
    2e80:	00321d00 	eorseq	r1, r2, r0, lsl #26
				if (statid != 0xffff)
    2e84:	51000100 	mrspl	r0, (UNDEF: 16)
    2e88:	0000321d 	andeq	r3, r0, sp, lsl r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2e8c:	00003254 	andeq	r3, r0, r4, asr r2
				RF_cmdPropTx.pktLen = (byte) paylen;
    2e90:	00560001 	subseq	r0, r6, r1
		if (paylen == 0) {
    2e94:	00000000 	andeq	r0, r0, r0
			wait (qevent, DR_LOOP);
    2e98:	0c000000 	stceq	0, cr0, [r0], {-0}
    2e9c:	1d000032 	stcne	0, cr0, [r0, #-200]	; 0xffffff38
			if (dstate & DSTATE_RXAC) {
    2ea0:	01000032 	tsteq	r0, r2, lsr r0
    2ea4:	322c5200 	eorcc	r5, ip, #0, 4
				rx_int_enable ();
    2ea8:	32320000 	eorscc	r0, r2, #0
			release;
    2eac:	00010000 	andeq	r0, r1, r0
			} else if (dstate & DSTATE_RFON) {
    2eb0:	00000052 	andeq	r0, r0, r2, asr r0
				delay (offdelay, DR_GOOF);
    2eb4:	00000000 	andeq	r0, r0, r0
    2eb8:	00325400 	eorseq	r5, r2, r0, lsl #8
    2ebc:	00326b00 	eorseq	r6, r2, r0, lsl #22
		if (bckf_timer) {
    2ec0:	50000100 	andpl	r0, r0, r0, lsl #2
			wait (qevent, DR_LOOP);
    2ec4:	0000326c 	andeq	r3, r0, ip, ror #4
    2ec8:	00003278 	andeq	r3, r0, r8, ror r2
    2ecc:	b0500001 	subslt	r0, r0, r1
			delay (bckf_timer, DR_LOOP);
    2ed0:	c4000032 	strgt	r0, [r0], #-50	; 0xffffffce
    2ed4:	01000032 	tsteq	r0, r2, lsr r0
			if (dstate & DSTATE_RXAC)
    2ed8:	00005000 	andeq	r5, r0, r0
    2edc:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RFON)
    2ee0:	325c0000 	subscc	r0, ip, #0
    2ee4:	32680000 	rsbcc	r0, r8, #0
		rx_de ();
    2ee8:	00010000 	andeq	r0, r1, r0
		RF_cmdPropTx . status = 0;
    2eec:	00326855 	eorseq	r6, r2, r5, asr r8
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef0:	00326b00 	eorseq	r6, r2, r0, lsl #22
    2ef4:	73000200 	movwvc	r0, #512	; 0x200
    2ef8:	00326c08 	eorseq	r6, r2, r8, lsl #24
		issue_cmd ((lword)&cmd_cs);
    2efc:	0032c400 	eorseq	ip, r2, r0, lsl #8
		if (dstate & DSTATE_IRST)
    2f00:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f0c:	00003292 	muleq	r0, r2, r2
    2f10:	000032a4 	andeq	r3, r0, r4, lsr #5
			delay (1, DR_XMIT);
    2f14:	00500001 	subseq	r0, r0, r1
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2f18:	00000000 	andeq	r0, r0, r0
    2f1c:	c4000000 	strgt	r0, [r0], #-0
    2f20:	e0000032 	and	r0, r0, r2, lsr r0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2f24:	01000032 	tsteq	r0, r2, lsr r0
    2f28:	33c65000 	biccc	r5, r6, #0
				RF_cmdPropTx . status = 0;
    2f2c:	33cf0000 	biccc	r0, pc, #0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2f30:	00010000 	andeq	r0, r1, r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2f34:	00000050 	andeq	r0, r0, r0, asr r0
				proceed (DR_XMIT);
    2f38:	00000000 	andeq	r0, r0, r0
    2f3c:	0032cc00 	eorseq	ip, r2, r0, lsl #24
			txtries++;
    2f40:	0032ee00 	eorseq	lr, r2, r0, lsl #28
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2f44:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2f48:	000032ee 	andeq	r3, r0, lr, ror #5
    2f4c:	000032f5 	strdeq	r3, [r0], -r5
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f50:	f5500001 			; <UNDEFINED> instruction: 0xf5500001
		goto DR_LOOP__;
    2f54:	fa000032 	blx	3024 <RFCCPE0IntHandler+0x54>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2f58:	01000032 	tsteq	r0, r2, lsr r0
		paylen = 0;
    2f5c:	32fa5400 	rscscc	r5, sl, #0, 8
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f60:	33040000 	movwcc	r0, #16384	; 0x4000
		txtries = 0;
    2f64:	00010000 	andeq	r0, r1, r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f68:	00330450 	eorseq	r0, r3, r0, asr r4
    2f6c:	0033c200 	eorseq	ip, r3, r0, lsl #4
    2f70:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2f74:	000033c6 	andeq	r3, r0, r6, asr #7
    2f78:	000033cc 	andeq	r3, r0, ip, asr #7
		    tcvphy_top (physid) == NULL)
    2f7c:	cc540001 	mrrcgt	0, 0, r0, r4, cr1
    2f80:	cf000033 	svcgt	0x00000033
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f84:	02000033 	andeq	r0, r0, #51	; 0x33
    2f88:	00087200 	andeq	r7, r8, r0, lsl #4
			rf_off ();
    2f8c:	00000000 	andeq	r0, r0, r0
endthread
    2f90:	a6000000 	strge	r0, [r0], -r0
    2f94:	a8000033 	stmdage	r0, {r0, r1, r4, r5}
    2f98:	01000033 	tsteq	r0, r3, lsr r0
    2f9c:	33a85000 			; <UNDEFINED> instruction: 0x33a85000
    2fa0:	33c20000 	biccc	r0, r2, #0
    2fa4:	00010000 	andeq	r0, r1, r0
    2fa8:	00000056 	andeq	r0, r0, r6, asr r0
    2fac:	00000000 	andeq	r0, r0, r0
    2fb0:	00363000 	eorseq	r3, r6, r0
    2fb4:	00364700 	eorseq	r4, r6, r0, lsl #14
    2fb8:	50000100 	andpl	r0, r0, r0, lsl #2
    2fbc:	00003647 	andeq	r3, r0, r7, asr #12
    2fc0:	0000364e 	andeq	r3, r0, lr, asr #12
    2fc4:	4e540001 	cdpmi	0, 5, cr0, cr4, cr1, {0}
    2fc8:	50000036 	andpl	r0, r0, r6, lsr r0
    2fcc:	01000036 	tsteq	r0, r6, lsr r0
void RFCCPE0IntHandler (void) {
    2fd0:	36505000 	ldrbcc	r5, [r0], -r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2fd4:	36600000 	strbtcc	r0, [r0], -r0
		_BIS (dstate, DSTATE_IRST);
    2fd8:	00010000 	andeq	r0, r1, r0
    2fdc:	00366054 	eorseq	r6, r6, r4, asr r0
    2fe0:	00366f00 	eorseq	r6, r6, r0, lsl #30
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2fe4:	50000100 	andpl	r0, r0, r0, lsl #2
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2fe8:	0000366f 	andeq	r3, r0, pc, ror #12
    2fec:	00003680 	andeq	r3, r0, r0, lsl #13
	p_trigger (drvprcs, qevent);
    2ff0:	00540001 	subseq	r0, r4, r1
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ff4:	00000000 	andeq	r0, r0, r0
    2ff8:	30000000 	andcc	r0, r0, r0
    2ffc:	44000036 	strmi	r0, [r0], #-54	; 0xffffffca
    3000:	01000036 	tsteq	r0, r6, lsr r0
    3004:	36445100 	strbcc	r5, [r4], -r0, lsl #2
    3008:	36470000 	strbcc	r0, [r7], -r0
    300c:	00010000 	andeq	r0, r1, r0
    3010:	00364752 	eorseq	r4, r6, r2, asr r7
    3014:	00364e00 	eorseq	r4, r6, r0, lsl #28
    3018:	56000100 	strpl	r0, [r0], -r0, lsl #2
	RISE_N_SHINE;
    301c:	0000364e 	andeq	r3, r0, lr, asr #12
    3020:	00003653 	andeq	r3, r0, r3, asr r6
    3024:	53510001 	cmppl	r1, #1
}
    3028:	80000036 	andhi	r0, r0, r6, lsr r0
    302c:	01000036 	tsteq	r0, r6, lsr r0
    3030:	00005600 	andeq	r5, r0, r0, lsl #12
    3034:	00000000 	andeq	r0, r0, r0
    3038:	36300000 	ldrtcc	r0, [r0], -r0
    303c:	36380000 	ldrtcc	r0, [r8], -r0
void phys_cc1350 (int phy, int mbs) {
    3040:	00010000 	andeq	r0, r1, r0
	if (rbuffl != 0)
    3044:	00363c52 	eorseq	r3, r6, r2, asr ip
    3048:	00364000 	eorseq	r4, r6, r0
		syserror (ETOOMANY, "cc13");
    304c:	52000100 	andpl	r0, r0, #0, 2
		syserror (EREQPAR, "cc13 mb");
    3050:	00003648 	andeq	r3, r0, r8, asr #12
	if (mbs == 0)
    3054:	0000364e 	andeq	r3, r0, lr, asr #12
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    3058:	5a570001 	bpl	15c3064 <__ccfg+0x15a30bc>
		syserror (EREQPAR, "cc13 mb");
    305c:	80000036 	andhi	r0, r0, r6, lsr r0
    3060:	01000036 	tsteq	r0, r6, lsr r0
	i = 0;
    3064:	00005700 	andeq	r5, r0, r0, lsl #14
	rbuffl = (byte) mbs;
    3068:	00000000 	andeq	r0, r0, r0
		db->config.type = 0;	// General (data in structure)
    306c:	365a0000 	ldrbcc	r0, [sl], -r0
	rbuffl = (byte) mbs;
    3070:	367c0000 	ldrbtcc	r0, [ip], -r0
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    3074:	00010000 	andeq	r0, r1, r0
    3078:	00367c55 	eorseq	r7, r6, r5, asr ip
		if (db == NULL)
    307c:	00368000 	eorseq	r8, r6, r0
			syserror (EMALLOC, "cc13");
    3080:	58000100 	stmdapl	r0, {r8}
	...
		db->status = DATA_ENTRY_PENDING;
    308c:	00003674 	andeq	r3, r0, r4, ror r6
		if (i)
    3090:	00003678 	andeq	r3, r0, r8, ror r6
			da->pNextEntry = (byte*) db;
    3094:	00500001 	subseq	r0, r0, r1
	...
		db->config.type = 0;	// General (data in structure)
    30a0:	1a000034 	bne	3178 <phys_cc1350+0x138>
		db->length = rbuffl + 2;
    30a4:	01000034 	tsteq	r0, r4, lsr r0
	db->pNextEntry = (byte*) re;
    30a8:	00005000 	andeq	r5, r0, r0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    30ac:	00000000 	andeq	r0, r0, r0
    30b0:	34000000 	strcc	r0, [r0], #-0
	if (rbuffs == NULL)
    30b4:	341a0000 	ldrcc	r0, [sl], #-0
	rbuffs->pCurrEntry = (byte*) re;
    30b8:	00010000 	andeq	r0, r1, r0
	rbuffs->pLastEntry = NULL;
    30bc:	00000051 	andeq	r0, r0, r1, asr r0
    30c0:	00000000 	andeq	r0, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30c4:	00340000 	eorseq	r0, r4, r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    30c8:	00341a00 	eorseq	r1, r4, r0, lsl #20
    30cc:	52000100 	andpl	r0, r0, #0, 2
    30d0:	0000342a 	andeq	r3, r0, sl, lsr #8
	rbuffl -= 2;
    30d4:	00003456 	andeq	r3, r0, r6, asr r4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30d8:	64550001 	ldrbvs	r0, [r5], #-1
	rbuffl -= 2;
    30dc:	22000034 	andcs	r0, r0, #52	; 0x34
	physid = phy;
    30e0:	01000036 	tsteq	r0, r6, lsr r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30e4:	00005500 	andeq	r5, r0, r0, lsl #10
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30e8:	00000000 	andeq	r0, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30ec:	34000000 	strcc	r0, [r0], #-0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30f0:	34040000 	strcc	r0, [r4], #-0
    30f4:	00010000 	andeq	r0, r1, r0
	utimer_add (&bckf_timer);
    30f8:	00340653 	eorseq	r0, r4, r3, asr r6
	drvprcs = runthread (cc1350_driver);
    30fc:	00340800 	eorseq	r0, r4, r0, lsl #16
    3100:	53000300 	movwpl	r0, #768	; 0x300
    3104:	34080493 	strcc	r0, [r8], #-1171	; 0xfffffb6d
	if (drvprcs == 0)
    3108:	34520000 	ldrbcc	r0, [r2], #-0
		syserror (ERESOURCE, "cc13");
    310c:	00030000 	andeq	r0, r3, r0
    3110:	52049354 	andpl	r9, r4, #84, 6	; 0x50000001
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3114:	a6000034 			; <UNDEFINED> instruction: 0xa6000034
    3118:	03000034 	movweq	r0, #52	; 0x34
    311c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3120:	000034a6 	andeq	r3, r0, r6, lsr #9
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3124:	000034b2 			; <UNDEFINED> instruction: 0x000034b2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3128:	93540003 	cmpls	r4, #3
    312c:	0034ba04 	eorseq	fp, r4, r4, lsl #20
    3130:	0034dc00 	eorseq	sp, r4, r0, lsl #24
    3134:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    3138:	34e00493 	strbtcc	r0, [r0], #1171	; 0x493
    313c:	355a0000 	ldrbcc	r0, [sl, #-0]
    3140:	00030000 	andeq	r0, r3, r0
    3144:	60049354 	andvs	r9, r4, r4, asr r3
    3148:	74000035 	strvc	r0, [r0], #-53	; 0xffffffcb
	plugch ();
    314c:	03000035 	movweq	r0, #53	; 0x35
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3150:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3154:	000035ba 			; <UNDEFINED> instruction: 0x000035ba
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3158:	000035c6 	andeq	r3, r0, r6, asr #11
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    315c:	93540003 	cmpls	r4, #3
    3160:	0035e804 	eorseq	lr, r5, r4, lsl #16
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3164:	0035fa00 	eorseq	pc, r5, r0, lsl #20
}
    3168:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    316c:	35fe0493 	ldrbcc	r0, [lr, #1171]!	; 0x493
    3170:	36060000 	strcc	r0, [r6], -r0
    3174:	00030000 	andeq	r0, r3, r0
    3178:	0a049354 	beq	127ed0 <__ccfg+0x107f28>
    317c:	30000036 	andcc	r0, r0, r6, lsr r0
    3180:	03000036 	movweq	r0, #54	; 0x36
    3184:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	...
    3190:	0000341e 	andeq	r3, r0, lr, lsl r4
    3194:	00003428 	andeq	r3, r0, r8, lsr #8
    3198:	28590001 	ldmdacs	r9, {r0}^
    319c:	2a000034 	bcs	3274 <__outserial+0x20>
    31a0:	02000034 	andeq	r0, r0, #52	; 0x34
    31a4:	2a007200 	bcs	1f9ac <__exidx_end+0x19c2c>
    31a8:	4e000034 	mcrmi	0, 0, r0, cr0, cr4, {1}
    31ac:	01000034 	tsteq	r0, r4, lsr r0
    31b0:	34565900 	ldrbcc	r5, [r6], #-2304	; 0xfffff700
    31b4:	34640000 	strbtcc	r0, [r4], #-0
    31b8:	00010000 	andeq	r0, r1, r0
    31bc:	00346459 	eorseq	r6, r4, r9, asr r4
    31c0:	00349c00 	eorseq	r9, r4, r0, lsl #24
    31c4:	58000100 	stmdapl	r0, {r8}
    31c8:	000034a6 	andeq	r3, r0, r6, lsr #9
    31cc:	000034b6 			; <UNDEFINED> instruction: 0x000034b6
    31d0:	b6580001 	ldrblt	r0, [r8], -r1
    31d4:	be000034 	mcrlt	0, 0, r0, cr0, cr4, {1}
    31d8:	02000034 	andeq	r0, r0, #52	; 0x34
    31dc:	dc017200 	sfmle	f7, 4, [r1], {-0}
    31e0:	06000034 			; <UNDEFINED> instruction: 0x06000034
    31e4:	01000035 	tsteq	r0, r5, lsr r0
    31e8:	350a5800 	strcc	r5, [sl, #-2048]	; 0xfffff800
    31ec:	350e0000 	strcc	r0, [lr, #-0]
    31f0:	00010000 	andeq	r0, r1, r0
    31f4:	00351850 	eorseq	r1, r5, r0, asr r8
    31f8:	00352200 	eorseq	r2, r5, r0, lsl #4
    31fc:	50000100 	andpl	r0, r0, r0, lsl #2
    3200:	00003542 	andeq	r3, r0, r2, asr #10
    3204:	00003544 	andeq	r3, r0, r4, asr #10
    3208:	4a500001 	bmi	1403214 <__ccfg+0x13e326c>
    320c:	4c000035 	stcmi	0, cr0, [r0], {53}	; 0x35
    3210:	01000035 	tsteq	r0, r5, lsr r0
    3214:	354c5800 	strbcc	r5, [ip, #-2048]	; 0xfffff800
    3218:	356f0000 	strbcc	r0, [pc, #-0]!	; 3220 <tcv_ope_null+0x14>
    321c:	00010000 	andeq	r0, r1, r0
    3220:	00357e53 	eorseq	r7, r5, r3, asr lr
    3224:	00358200 	eorseq	r8, r5, r0, lsl #4
    3228:	59000100 	stmdbpl	r0, {r8}
    322c:	0000358c 	andeq	r3, r0, ip, lsl #11
    3230:	000035ac 	andeq	r3, r0, ip, lsr #11
    3234:	b2590001 	subslt	r0, r9, #1
    3238:	b4000035 	strlt	r0, [r0], #-53	; 0xffffffcb
    323c:	01000035 	tsteq	r0, r5, lsr r0
    3240:	35ba5900 	ldrcc	r5, [sl, #2304]!	; 0x900
    3244:	35c80000 	strbcc	r0, [r8]
    3248:	00010000 	andeq	r0, r1, r0
    324c:	0035e853 	eorseq	lr, r5, r3, asr r8
    3250:	0035f100 	eorseq	pc, r5, r0, lsl #2
strand (__outserial, const char*)
    3254:	53000100 	movwpl	r0, #256	; 0x100
    3258:	000035fa 	strdeq	r3, [r0], -sl
    325c:	0000360e 	andeq	r3, r0, lr, lsl #12
    3260:	22580001 	subscs	r0, r8, #1
endstrand
    3264:	30000036 	andcc	r0, r0, r6, lsr r0
    3268:	01000036 	tsteq	r0, r6, lsr r0
	ptr = data;
    326c:	00005900 	andeq	r5, r0, r0, lsl #18
    3270:	00000000 	andeq	r0, r0, r0
	if (*ptr)
    3274:	34be0000 	ldrtcc	r0, [lr], #0
		len = strlen (ptr);
    3278:	34dc0000 	ldrbcc	r0, [ip], #0
    327c:	00010000 	andeq	r0, r1, r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3280:	00000058 	andeq	r0, r0, r8, asr r0
    3284:	00000000 	andeq	r0, r0, r0
    3288:	0034e800 	eorseq	lr, r4, r0, lsl #16
    328c:	0034fc00 	eorseq	pc, r4, r0, lsl #24
    3290:	59000100 	stmdbpl	r0, {r8}
	len -= quant;
    3294:	00003500 	andeq	r3, r0, r0, lsl #10
    3298:	0000352e 	andeq	r3, r0, lr, lsr #10
    329c:	36590001 	ldrbcc	r0, [r9], -r1
	if (len == 0) {
    32a0:	4a000035 	bmi	337c <__inserial+0xb8>
		ufree (data);
    32a4:	01000035 	tsteq	r0, r5, lsr r0
		finish;
    32a8:	00005900 	andeq	r5, r0, r0, lsl #18
    32ac:	00000000 	andeq	r0, r0, r0
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    32b0:	35060000 	strcc	r0, [r6, #-0]
    32b4:	35380000 	ldrcc	r0, [r8, #-0]!
    32b8:	00010000 	andeq	r0, r1, r0
    32bc:	00353858 	eorseq	r3, r5, r8, asr r8
    32c0:	00354400 	eorseq	r4, r5, r0, lsl #8
strand (__inserial, address)
    32c4:	53000100 	movwpl	r0, #256	; 0x100
    32c8:	00003544 	andeq	r3, r0, r4, asr #10
    32cc:	0000354a 	andeq	r3, r0, sl, asr #10
    32d0:	00580001 	subseq	r0, r8, r1
    32d4:	00000000 	andeq	r0, r0, r0
	if (__inpline != NULL)
    32d8:	74000000 	strvc	r0, [r0], #-0
    32dc:	ba000035 	blt	33b8 <__inserial+0xf4>
		finish;
    32e0:	01000035 	tsteq	r0, r5, lsr r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    32e4:	00005a00 	andeq	r5, r0, r0, lsl #20
    32e8:	00000000 	andeq	r0, r0, r0
    32ec:	357a0000 	ldrbcc	r0, [sl, #-0]!
    32f0:	35a40000 	strcc	r0, [r4, #0]!
		umwait (IM_INIT);
    32f4:	00010000 	andeq	r0, r1, r0
		release;
    32f8:	0035a458 	eorseq	sl, r5, r8, asr r4
	savedata (data);
    32fc:	0035b400 	eorseq	fp, r5, r0, lsl #8
	len = MAX_LINE_LENGTH;
    3300:	53000100 	movwpl	r0, #256	; 0x100
	io (IM_READ, __cport, READ, ptr, 1);
    3304:	000035b4 			; <UNDEFINED> instruction: 0x000035b4
    3308:	000035ba 			; <UNDEFINED> instruction: 0x000035ba
    330c:	00580001 	subseq	r0, r8, r1
    3310:	00000000 	andeq	r0, r0, r0
	if (ptr == (char*) data) { // new line
    3314:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3318:	e8000035 	stmda	r0, {r0, r2, r4, r5}
		if (*ptr == '\0') { // bin cmd
    331c:	01000035 	tsteq	r0, r5, lsr r0
			proceed (IM_BIN);
    3320:	00005800 	andeq	r5, r0, r0, lsl #16
    3324:	00000000 	andeq	r0, r0, r0
		if (*ptr < 0x20)
    3328:	35fa0000 	ldrbcc	r0, [sl, #0]!
    332c:	35fe0000 	ldrbcc	r0, [lr, #0]!
			proceed (IM_READ);
    3330:	00020000 	andeq	r0, r2, r0
    3334:	35fe0074 	ldrbcc	r0, [lr, #116]!	; 0x74
	if (*ptr == '\n' || *ptr == '\r') {
    3338:	36060000 	strcc	r0, [r6], -r0
    333c:	00020000 	andeq	r0, r2, r0
    3340:	00007c74 	andeq	r7, r0, r4, ror ip
		*ptr = '\0';
    3344:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    3348:	36120000 	ldrcc	r0, [r2], -r0
		finish;
    334c:	36200000 	strtcc	r0, [r0], -r0
	if (len) {
    3350:	00010000 	andeq	r0, r1, r0
		ptr++;
    3354:	00000058 	andeq	r0, r0, r8, asr r0
    3358:	00000000 	andeq	r0, r0, r0
		len--;
    335c:	00368000 	eorseq	r8, r6, r0
	proceed (IM_READ);
    3360:	00369c00 	eorseq	r9, r6, r0, lsl #24
	io (IM_BIN, __cport, READ, ptr, 1);
    3364:	50000100 	andpl	r0, r0, r0, lsl #2
    3368:	000036da 	ldrdeq	r3, [r0], -sl
    336c:	000036ec 	andeq	r3, r0, ip, ror #13
    3370:	ec530001 	mrrc	0, 0, r0, r3, cr1
    3374:	00000036 	andeq	r0, r0, r6, lsr r0
	len -= 2;
    3378:	01000037 	tsteq	r0, r7, lsr r0
	if (len > *ptr + 1) // 1 for 0x04
    337c:	37025600 	strcc	r5, [r2, -r0, lsl #12]
    3380:	371e0000 	ldrcc	r0, [lr, -r0]
		len = *ptr + 1;
    3384:	00010000 	andeq	r0, r1, r0
    3388:	00373056 	eorseq	r3, r7, r6, asr r0
	ptr++;
    338c:	00373c00 	eorseq	r3, r7, r0, lsl #24
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3390:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3394:	0000373c 	andeq	r3, r0, ip, lsr r7
    3398:	00003742 	andeq	r3, r0, r2, asr #14
    339c:	48530001 	ldmdami	r3, {r0}^
    33a0:	4c000037 	stcmi	0, cr0, [r0], {55}	; 0x37
    33a4:	01000037 	tsteq	r0, r7, lsr r0
	len -= quant;
    33a8:	374c5300 	strbcc	r5, [ip, -r0, lsl #6]
		__inpline = (char*)data;
    33ac:	375c0000 	ldrbcc	r0, [ip, -r0]
		finish;
    33b0:	00010000 	andeq	r0, r1, r0
	ptr += quant;
    33b4:	00375c5e 	eorseq	r5, r7, lr, asr ip
    33b8:	00377200 	eorseq	r7, r7, r0, lsl #4
endstrand
    33bc:	53000100 	movwpl	r0, #256	; 0x100
    33c0:	00003772 	andeq	r3, r0, r2, ror r7
	proceed (IM_BINL);
    33c4:	0000377a 	andeq	r3, r0, sl, ror r7
endstrand
    33c8:	805e0001 	subshi	r0, lr, r1
    33cc:	9c000037 	stcls	0, cr0, [r0], {55}	; 0x37
    33d0:	01000037 	tsteq	r0, r7, lsr r0
    33d4:	379c5300 	ldrcc	r5, [ip, r0, lsl #6]
    33d8:	37a20000 	strcc	r0, [r2, r0]!
    33dc:	00010000 	andeq	r0, r1, r0
		if (res && (d < n))
    33e0:	0037a25e 	eorseq	sl, r7, lr, asr r2
    33e4:	0037a400 	eorseq	sl, r7, r0, lsl #8
    33e8:	53000100 	movwpl	r0, #256	; 0x100
    33ec:	000037b0 			; <UNDEFINED> instruction: 0x000037b0
			res [d] = (char) c;
    33f0:	000037b2 			; <UNDEFINED> instruction: 0x000037b2
		d++;
    33f4:	b25e0001 	subslt	r0, lr, #1
    33f8:	c6000037 			; <UNDEFINED> instruction: 0xc6000037
    33fc:	01000037 	tsteq	r0, r7, lsr r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3400:	37c65300 	strbcc	r5, [r6, r0, lsl #6]
    3404:	37d60000 	ldrbcc	r0, [r6, r0]
    3408:	00010000 	andeq	r0, r1, r0
				enci (10000);
    340c:	0037d656 	eorseq	sp, r7, r6, asr r6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3410:	0037ea00 	eorseq	lr, r7, r0, lsl #20
    3414:	53000100 	movwpl	r0, #256	; 0x100
	d = 0;
    3418:	000037f8 	strdeq	r3, [r0], -r8
		c = *fm++;
    341c:	000037fa 	strdeq	r3, [r0], -sl
		if (c == '\\') {
    3420:	fa560001 	blx	158342c <__ccfg+0x1563484>
			if ((c = *fm++) == '\0') {
    3424:	12000037 	andne	r0, r0, #55	; 0x37
    3428:	01000038 	tsteq	r0, r8, lsr r0
				outc ('\\');
    342c:	38125300 	ldmdacc	r2, {r8, r9, ip, lr}
			if ((c = *fm++) == '\0') {
    3430:	382c0000 	stmdacc	ip!, {}	; <UNPREDICTABLE>
				outc ('\\');
    3434:	00010000 	andeq	r0, r1, r0
    3438:	00383256 	eorseq	r3, r8, r6, asr r2
			outc (c);
    343c:	00385400 	eorseq	r5, r8, r0, lsl #8
    3440:	53000100 	movwpl	r0, #256	; 0x100
			if (c == '\0')
    3444:	00003854 	andeq	r3, r0, r4, asr r8
    3448:	00003866 	andeq	r3, r0, r6, ror #16
			outc (c);
    344c:	8c560001 	mrrchi	0, 0, r0, r6, cr1
				outc (val);
    3450:	90000038 	andls	r0, r0, r8, lsr r0
				val = (word) va_arg (ap, aword);
    3454:	01000038 	tsteq	r0, r8, lsr r0
		if (c == '%') {
    3458:	38905300 	ldmcc	r0, {r8, r9, ip, lr}
    345c:	38a00000 	stmiacc	r0!, {}	; <UNPREDICTABLE>
			c = *fm++;
    3460:	00010000 	andeq	r0, r1, r0
			switch (c) {
    3464:	0038a058 	eorseq	sl, r8, r8, asr r0
    3468:	0038b000 	eorseq	fp, r8, r0
    346c:	53000100 	movwpl	r0, #256	; 0x100
    3470:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
    3474:	000038ba 			; <UNDEFINED> instruction: 0x000038ba
    3478:	c0580001 	subsgt	r0, r8, r1
    347c:	e2000038 	and	r0, r0, #56	; 0x38
    3480:	01000038 	tsteq	r0, r8, lsr r0
				outc ('%');
    3484:	38e85300 	stmiacc	r8!, {r8, r9, ip, lr}^
    3488:	38f80000 	ldmcc	r8!, {}^	; <UNPREDICTABLE>
				outc (c);
    348c:	00010000 	andeq	r0, r1, r0
    3490:	0038f853 	eorseq	pc, r8, r3, asr r8	; <UNPREDICTABLE>
    3494:	00391200 	eorseq	r1, r9, r0, lsl #4
				if (c == '\0')
    3498:	56000100 	strpl	r0, [r0], -r0, lsl #2
				return d;
    349c:	00003918 	andeq	r3, r0, r8, lsl r9
}
    34a0:	00003938 	andeq	r3, r0, r8, lsr r9
    34a4:	38530001 	ldmdacc	r3, {r0}^
			switch (c) {
    34a8:	4a000039 	bmi	3594 <__pi_vfparse+0x194>
    34ac:	01000039 	tsteq	r0, r9, lsr r0
    34b0:	395e5600 	ldmdbcc	lr, {r9, sl, ip, lr}^
				for (i = 12; ; i -= 4) {
    34b4:	39620000 	stmdbcc	r2!, {}^	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    34b8:	00010000 	andeq	r0, r1, r0
						[ (val >> i) & 0xf ]);
    34bc:	00396258 	eorseq	r6, r9, r8, asr r2
    34c0:	00396600 	eorseq	r6, r9, r0, lsl #12
    34c4:	53000100 	movwpl	r0, #256	; 0x100
					outc (__pi_hex_enc_table
    34c8:	00003970 	andeq	r3, r0, r0, ror r9
    34cc:	00003972 	andeq	r3, r0, r2, ror r9
					if (i == 0)
    34d0:	72580001 	subsvc	r0, r8, #1
    34d4:	88000039 	stmdahi	r0, {r0, r3, r4, r5}
				for (i = 12; ; i -= 4) {
    34d8:	01000039 	tsteq	r0, r9, lsr r0
				val = (word) va_arg (ap, aword);
    34dc:	39885300 	stmibcc	r8, {r8, r9, ip, lr}
				if (c == 'd' && (val & 0x8000) != 0) {
    34e0:	39980000 	ldmibcc	r8, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    34e4:	00010000 	andeq	r0, r1, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    34e8:	00399856 	eorseq	r9, r9, r6, asr r8
    34ec:	0039ae00 	eorseq	sl, r9, r0, lsl #28
					outc ('-');
    34f0:	53000100 	movwpl	r0, #256	; 0x100
    34f4:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
					val = (~val) + 1;
    34f8:	000039ba 			; <UNDEFINED> instruction: 0x000039ba
    34fc:	ba560001 	blt	1583508 <__ccfg+0x1563560>
				for (i = 12; ; i -= 4) {
    3500:	c2000039 	andgt	r0, r0, #57	; 0x39
				enci (10000);
    3504:	01000039 	tsteq	r0, r9, lsr r0
    3508:	39c65300 	stmibcc	r6, {r8, r9, ip, lr}^
    350c:	39d60000 	ldmibcc	r6, {}^	; <UNPREDICTABLE>
    3510:	00010000 	andeq	r0, r1, r0
    3514:	0039d653 	eorseq	sp, r9, r3, asr r6
    3518:	0039e400 	eorseq	lr, r9, r0, lsl #8
    351c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3520:	000039e4 	andeq	r3, r0, r4, ror #19
    3524:	000039ea 	andeq	r3, r0, sl, ror #19
    3528:	ea580001 	b	1603534 <__ccfg+0x15e358c>
    352c:	f6000039 			; <UNDEFINED> instruction: 0xf6000039
    3530:	01000039 	tsteq	r0, r9, lsr r0
    3534:	39f65600 	ldmibcc	r6!, {r9, sl, ip, lr}^
    3538:	39fe0000 	ldmibcc	lr!, {}^	; <UNPREDICTABLE>
    353c:	00010000 	andeq	r0, r1, r0
    3540:	0039fe50 	eorseq	pc, r9, r0, asr lr	; <UNPREDICTABLE>
    3544:	003a1000 	eorseq	r1, sl, r0
    3548:	53000100 	movwpl	r0, #256	; 0x100
	...
					if (c == 'd' &&
    3554:	00003680 	andeq	r3, r0, r0, lsl #13
					val = va_arg (ap, lword);
    3558:	0000369e 	muleq	r0, lr, r6
					fm++;
    355c:	9e510001 	cdpls	0, 5, cr0, cr1, cr1, {0}
					if (c == 'd' &&
    3560:	a4000036 	strge	r0, [r0], #-54	; 0xffffffca
    3564:	01000036 	tsteq	r0, r6, lsr r0
						outc ('-');
    3568:	36a45600 	strtcc	r5, [r4], r0, lsl #12
    356c:	36c20000 	strbcc	r0, [r2], r0
						val = (~val) + 1;
    3570:	00010000 	andeq	r0, r1, r0
				enci (10000);
    3574:	0036c851 	eorseq	ip, r6, r1, asr r8
					enci (1000000000UL);
    3578:	003a1000 	eorseq	r1, sl, r0
    357c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3588:	00003680 	andeq	r3, r0, r0, lsl #13
    358c:	00003680 	andeq	r3, r0, r0, lsl #13
    3590:	80520001 	subshi	r0, r2, r1
    3594:	9c000036 	stcls	0, cr0, [r0], {54}	; 0x36
    3598:	03000036 	movweq	r0, #54	; 0x36
    359c:	04935200 	ldreq	r5, [r3], #512	; 0x200
    35a0:	00003742 	andeq	r3, r0, r2, asr #14
    35a4:	00003776 	andeq	r3, r0, r6, ror r7
    35a8:	9c520001 	mrrcls	0, 0, r0, r2, cr1
    35ac:	a2000037 	andge	r0, r0, #55	; 0x37
    35b0:	01000037 	tsteq	r0, r7, lsr r0
    35b4:	37b25200 	ldrcc	r5, [r2, r0, lsl #4]!
    35b8:	37cc0000 	strbcc	r0, [ip, r0]
				} else if (c == 'x') {
    35bc:	00010000 	andeq	r0, r1, r0
					for (i = 28; ; i -= 4) {
    35c0:	0037fa52 	eorseq	pc, r7, r2, asr sl	; <UNPREDICTABLE>
					val = va_arg (ap, lword);
    35c4:	00382200 	eorseq	r2, r8, r0, lsl #4
							[ (val >> i) & 0xf ]);
    35c8:	52000100 	andpl	r0, r0, #0, 2
    35cc:	00003874 	andeq	r3, r0, r4, ror r8
						outc (__pi_hex_enc_table
    35d0:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
    35d4:	e2520001 	subs	r0, r2, #1
    35d8:	08000038 	stmdaeq	r0, {r3, r4, r5}
						if (i == 0)
    35dc:	01000039 	tsteq	r0, r9, lsr r0
    35e0:	39585200 	ldmdbcc	r8, {r9, ip, lr}^
					for (i = 28; ; i -= 4) {
    35e4:	39620000 	stmdbcc	r2!, {}^	; <UNPREDICTABLE>
					outc ('%');
    35e8:	00010000 	andeq	r0, r1, r0
    35ec:	00397252 	eorseq	r7, r9, r2, asr r2
    35f0:	00398e00 	eorseq	r8, r9, r0, lsl #28
					outc ('l');
    35f4:	52000100 	andpl	r0, r0, #0, 2
    35f8:	000039ba 			; <UNDEFINED> instruction: 0x000039ba
				val = (word) va_arg (ap, aword);
    35fc:	000039d0 	ldrdeq	r3, [r0], -r0
				outc (val);
    3600:	d6520001 	ldrble	r0, [r2], -r1
    3604:	e4000039 	str	r0, [r0], #-57	; 0xffffffc7
				while (*st != '\0') {
    3608:	01000039 	tsteq	r0, r9, lsr r0
    360c:	39f65200 	ldmibcc	r6!, {r9, ip, lr}^
    3610:	39fe0000 	ldmibcc	lr!, {}^	; <UNPREDICTABLE>
    3614:	00010000 	andeq	r0, r1, r0
					outc (*st);
    3618:	00000052 	andeq	r0, r0, r2, asr r0
    361c:	00000000 	andeq	r0, r0, r0
					st++;
    3620:	0036fe00 	eorseq	pc, r6, r0, lsl #28
		c = *fm++;
    3624:	00370000 	eorseq	r0, r7, r0
    3628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    362c:	00003778 	andeq	r3, r0, r8, ror r7
char *vform (char *res, const char *fm, va_list aq) {
    3630:	0000379c 	muleq	r0, ip, r7
    3634:	a2540001 	subsge	r0, r4, #1
	if (res != NULL) {
    3638:	b2000037 	andlt	r0, r0, #55	; 0x37
		__pi_vfparse (res, MAX_WORD, fm, aq);
    363c:	01000037 	tsteq	r0, r7, lsr r0
    3640:	37ce5400 	strbcc	r5, [lr, r0, lsl #8]
    3644:	37fa0000 	ldrbcc	r0, [sl, r0]!
}
    3648:	00010000 	andeq	r0, r1, r0
    364c:	00382454 	eorseq	r2, r8, r4, asr r4
	fml = strlen (fm) + 17;
    3650:	00387400 	eorseq	r7, r8, r0, lsl #8
    3654:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3658:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
	if ((res = (char*) umalloc (fml)) == NULL)
    365c:	000038e2 	andeq	r3, r0, r2, ror #17
    3660:	0a540001 	beq	150366c <__ccfg+0x14e36c4>
    3664:	58000039 	stmdapl	r0, {r0, r3, r4, r5}
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3668:	01000039 	tsteq	r0, r9, lsr r0
    366c:	39625400 	stmdbcc	r2!, {sl, ip, lr}^
    3670:	39720000 	ldmdbcc	r2!, {}^	; <UNPREDICTABLE>
    3674:	00010000 	andeq	r0, r1, r0
		ufree (res);
    3678:	00399054 	eorseq	r9, r9, r4, asr r0
		goto Again;
    367c:	0039ba00 	eorseq	fp, r9, r0, lsl #20
	if (buf == NULL || fmt == NULL)
    3680:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
int vscan (const char *buf, const char *fmt, va_list ap) {
    3684:	000039d2 	ldrdeq	r3, [r0], -r2
	if (buf == NULL || fmt == NULL)
    3688:	000039d6 	ldrdeq	r3, [r0], -r6
    368c:	fe540001 	cdp2	0, 5, cr0, cr4, cr1, {0}
    3690:	10000039 	andne	r0, r0, r9, lsr r0
		    	    case 'u': scanu (lword); break;
    3694:	0100003a 	tsteq	r0, sl, lsr r0
			while (isspace (*buf)) buf++;
    3698:	00005400 	andeq	r5, r0, r0, lsl #8
    369c:	00000000 	andeq	r0, r0, r0
	while (*fmt != '\0') {
    36a0:	37720000 	ldrbcc	r0, [r2, -r0]!
		if (*fmt++ != '%')
    36a4:	379c0000 	ldrcc	r0, [ip, r0]
		switch (*fmt++) {
    36a8:	00010000 	andeq	r0, r1, r0
    36ac:	0037a258 	eorseq	sl, r7, r8, asr r2
    36b0:	0037b200 	eorseq	fp, r7, r0, lsl #4
    36b4:	58000100 	stmdapl	r0, {r8}
	...
    36c0:	00003854 	andeq	r3, r0, r4, asr r8
}
    36c4:	00003866 	andeq	r3, r0, r6, ror #16
		switch (*fmt++) {
    36c8:	66590001 	ldrbvs	r0, [r9], -r1
    36cc:	6e000038 	mcrvs	0, 0, r0, cr0, cr8, {1}
    36d0:	01000038 	tsteq	r0, r8, lsr r0
    36d4:	00005000 	andeq	r5, r0, r0
			while (isspace (*buf)) buf++;
    36d8:	00000000 	andeq	r0, r0, r0
    36dc:	38b00000 	ldmcc	r0!, {}	; <UNPREDICTABLE>
    36e0:	38da0000 	ldmcc	sl, {}^	; <UNPREDICTABLE>
    36e4:	00010000 	andeq	r0, r1, r0
    36e8:	00396250 	eorseq	r6, r9, r0, asr r2
    36ec:	00397200 	eorseq	r7, r9, r0, lsl #4
			if (*buf == '\0')
    36f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			nc++;
    36fc:	00003938 	andeq	r3, r0, r8, lsr r9
			if (*buf != ',') {
    3700:	0000394a 	andeq	r3, r0, sl, asr #18
				while (!isspace (*buf) && *buf != ',' &&
    3704:	4a590001 	bmi	1643710 <__ccfg+0x1623768>
    3708:	52000039 	andpl	r0, r0, #57	; 0x39
    370c:	01000039 	tsteq	r0, r9, lsr r0
    3710:	00005000 	andeq	r5, r0, r0
    3714:	00000000 	andeq	r0, r0, r0
    3718:	39c60000 	stmibcc	r6, {}^	; <UNPREDICTABLE>
    371c:	39d60000 	ldmibcc	r6, {}^	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    3720:	00010000 	andeq	r0, r1, r0
    3724:	00000050 	andeq	r0, r0, r0, asr r0
    3728:	00000000 	andeq	r0, r0, r0
    372c:	00370200 	eorseq	r0, r7, r0, lsl #4
    3730:	00371e00 	eorseq	r1, r7, r0, lsl #28
			if (*buf == ',') buf++;
    3734:	5e000100 	adfpls	f0, f0, f0
    3738:	000039e8 	andeq	r3, r0, r8, ror #19
			*sap = '\0';
    373c:	000039ea 	andeq	r3, r0, sl, ror #19
			break;
    3740:	005e0001 	subseq	r0, lr, r1
		    case 'd': scani (word); break;
    3744:	00000000 	andeq	r0, r0, r0
    3748:	10000000 	andne	r0, r0, r0
    374c:	1700003a 	smladxne	r0, sl, r0, r0
    3750:	0100003a 	tsteq	r0, sl, lsr r0
    3754:	3a175000 	bcc	5d775c <__ccfg+0x5b77b4>
    3758:	3a2e0000 	bcc	b83760 <__ccfg+0xb637b8>
    375c:	00010000 	andeq	r0, r1, r0
    3760:	003a2e56 	eorseq	r2, sl, r6, asr lr
    3764:	003a3200 	eorseq	r3, sl, r0, lsl #4
    3768:	f3000400 	vshl.u8	d0, d0, d0
    376c:	329f5001 	addscc	r5, pc, #1
    3770:	3400003a 	strcc	r0, [r0], #-58	; 0xffffffc6
    3774:	0100003a 	tsteq	r0, sl, lsr r0
    3778:	3a345600 	bcc	d18f80 <__ccfg+0xcf8fd8>
    377c:	3a380000 	bcc	e03784 <__ccfg+0xde37dc>
    3780:	00040000 	andeq	r0, r4, r0
    3784:	9f5001f3 	svcls	0x005001f3
	...
    3790:	00003a1a 	andeq	r3, r0, sl, lsl sl
    3794:	00003a23 	andeq	r3, r0, r3, lsr #20
    3798:	00700005 	rsbseq	r0, r0, r5
    379c:	239f2930 	orrscs	r2, pc, #48, 18	; 0xc0000
    37a0:	2e00003a 	mcrcs	0, 0, r0, cr0, cr10, {1}
    37a4:	0500003a 	streq	r0, [r0, #-58]	; 0xffffffc6
    37a8:	30007500 	andcc	r7, r0, r0, lsl #10
    37ac:	3a329f29 	bcc	cab458 <__ccfg+0xc8b4b0>
    37b0:	3a340000 	bcc	d037b8 <__ccfg+0xce3810>
		    case 'u': scanu (word); break;
    37b4:	00050000 	andeq	r0, r5, r0
    37b8:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    37bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    37cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    37d8:	00560001 	subseq	r0, r6, r1
    37dc:	00000000 	andeq	r0, r0, r0
    37e0:	04000000 	streq	r0, [r0], #-0
    37e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    37e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37ec:	00000000 	andeq	r0, r0, r0
    37f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		    case 'x': scanx (word); break;
    37fc:	01f30004 	mvnseq	r0, r4
    3800:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3810:	00010000 	andeq	r0, r1, r0
    3814:	00000051 	andeq	r0, r0, r1, asr r0
    3818:	00000000 	andeq	r0, r0, r0
    381c:	f3000400 	vshl.u8	d0, d0, d0
    3820:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3830:	05000000 	streq	r0, [r0, #-0]
    3834:	30007000 	andcc	r7, r0, r0
    3838:	00009f29 	andeq	r9, r0, r9, lsr #30
    383c:	00000000 	andeq	r0, r0, r0
    3840:	00050000 	andeq	r0, r5, r0
    3844:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3848:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    384c:	00000000 	andeq	r0, r0, r0
    3850:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3854:	9f293000 	svcls	0x00293000
	...
    3860:	00003a3c 	andeq	r3, r0, ip, lsr sl
    3864:	00003a4e 	andeq	r3, r0, lr, asr #20
    3868:	00700007 	rsbseq	r0, r0, r7
    386c:	263f243f 			; <UNDEFINED> instruction: 0x263f243f
    3870:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			switch (*fmt++) {
    3874:	00000000 	andeq	r0, r0, r0
    3878:	003a4400 	eorseq	r4, sl, r0, lsl #8
    387c:	003a4c00 	eorseq	r4, sl, r0, lsl #24
    3880:	72000d00 	andvc	r0, r0, #0, 26
    3884:	00717a80 	rsbseq	r7, r1, r0, lsl #21
    3888:	26482448 	strbcs	r2, [r8], -r8, asr #8
		    	    case 'd': scani (lword); break;
    388c:	9f26341e 	svcls	0x0026341e
    3890:	00003a4c 	andeq	r3, r0, ip, asr #20
    3894:	00003a68 	andeq	r3, r0, r8, ror #20
    3898:	0071000c 	rsbseq	r0, r1, ip
    389c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    38a0:	341e0072 	ldrcc	r0, [lr], #-114	; 0xffffff8e
    38a4:	00009f26 	andeq	r9, r0, r6, lsr #30
    38a8:	00000000 	andeq	r0, r0, r0
    38ac:	3a6e0000 	bcc	1b838b4 <__ccfg+0x1b6390c>
    38b0:	3a780000 	bcc	1e038b8 <__ccfg+0x1de3910>
    38b4:	00010000 	andeq	r0, r1, r0
    38b8:	00000053 	andeq	r0, r0, r3, asr r0
    38bc:	00000000 	andeq	r0, r0, r0
    38c0:	003a7000 	eorseq	r7, sl, r0
    38c4:	003a7c00 	eorseq	r7, sl, r0, lsl #24
    38c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    38d4:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
    38d8:	00003ac8 	andeq	r3, r0, r8, asr #21
    38dc:	c8500001 	ldmdagt	r0, {r0}^
    38e0:	0200003a 	andeq	r0, r0, #58	; 0x3a
    38e4:	0100003b 	tsteq	r0, fp, lsr r0
		    	    case 'x': scanx (lword); break;
    38e8:	3b025500 	blcc	98cf0 <__ccfg+0x78d48>
    38ec:	3b0c0000 	blcc	3038f4 <__ccfg+0x2e394c>
    38f0:	00040000 	andeq	r0, r4, r0
    38f4:	9f5001f3 	svcls	0x005001f3
	...
    3900:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
    3904:	00003ab6 			; <UNDEFINED> instruction: 0x00003ab6
    3908:	b6510001 	ldrblt	r0, [r1], -r1
    390c:	ee00003a 	mcr	0, 0, r0, cr0, cr10, {1}
    3910:	0100003a 	tsteq	r0, sl, lsr r0
    3914:	3aee5400 	bcc	ffb9891c <_estack+0xdfb9391c>
    3918:	3b0c0000 	blcc	303920 <__ccfg+0x2e3978>
    391c:	00040000 	andeq	r0, r4, r0
    3920:	9f5101f3 	svcls	0x005101f3
	...
    392c:	00003aea 	andeq	r3, r0, sl, ror #21
    3930:	00003afe 	strdeq	r3, [r0], -lr
    3934:	00550001 	subseq	r0, r5, r1
    3938:	00000000 	andeq	r0, r0, r0
    393c:	ea000000 	b	3944 <vscan+0x2c4>
    3940:	ee00003a 	mcr	0, 0, r0, cr0, cr10, {1}
    3944:	0100003a 	tsteq	r0, sl, lsr r0
    3948:	3aee5400 	bcc	ffb98950 <_estack+0xdfb93950>
    394c:	3afe0000 	bcc	fff83954 <_estack+0xdff7e954>
    3950:	00040000 	andeq	r0, r4, r0
    3954:	9f5101f3 	svcls	0x005101f3
	...
		    	    case 'd': scani (lword); break;
    3960:	00003b0c 	andeq	r3, r0, ip, lsl #22
    3964:	00003b2a 	andeq	r3, r0, sl, lsr #22
    3968:	2a500001 	bcs	1403974 <__ccfg+0x13e39cc>
    396c:	3800003b 	stmdacc	r0, {r0, r1, r3, r4, r5}
    3970:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
		    	    case 'u': scanu (lword); break;
    3974:	5001f300 	andpl	pc, r1, r0, lsl #6
    3978:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3988:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3994:	00560001 	subseq	r0, r6, r1
    3998:	00000000 	andeq	r0, r0, r0
    399c:	04000000 	streq	r0, [r0], #-0
    39a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    39a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    39b4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			if ((c = *buf++) == '\0')
    39c8:	00700007 	rsbseq	r0, r0, r7
			sap = va_arg (ap, char*);
    39cc:	191c0073 	ldmdbne	ip, {r0, r1, r4, r5, r6}
			nc++;
    39d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			break;
    39d4:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    39d8:	70000400 	andvc	r0, r0, r0, lsl #8
    39dc:	009f1900 	addseq	r1, pc, r0, lsl #18
	...
			while (isspace (*buf)) buf++;
    39ec:	04000000 	streq	r0, [r0], #-0
    39f0:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    39f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
		return 0;
    39f8:	00000000 	andeq	r0, r0, r0
    39fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    3a08:	00720005 	rsbseq	r0, r2, r5
    3a0c:	009f2540 	addseq	r2, pc, r0, asr #10
    3a10:	00000000 	andeq	r0, r0, r0
    3a14:	01000000 	mrseq	r0, (UNDEF: 0)
    3a18:	00005000 	andeq	r5, r0, r0
    3a1c:	00000000 	andeq	r0, r0, r0
    3a20:	00040000 	andeq	r0, r4, r0
    3a24:	9f07d00a 	svcls	0x0007d00a
	...
    3a30:	00500001 	subseq	r0, r0, r1
    3a34:	00000000 	andeq	r0, r0, r0
    3a38:	8a000000 	bhi	3a40 <NOROM_AONBatMonTemperatureGetDegC+0x8>
    3a3c:	9600003b 			; <UNDEFINED> instruction: 0x9600003b
    3a40:	0100003b 	tsteq	r0, fp, lsr r0
    3a44:	00005000 	andeq	r5, r0, r0
    3a48:	00000000 	andeq	r0, r0, r0
    3a4c:	3b8a0000 	blcc	fe283a54 <_estack+0xde27ea54>
    3a50:	3b960000 	blcc	fe583a58 <_estack+0xde57ea58>
    3a54:	00010000 	andeq	r0, r1, r0
    3a58:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3a68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3a74:	1b700003 	blne	1c03a88 <__ccfg+0x1be3ae0>
    3a78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a7c:	00000000 	andeq	r0, r0, r0
    3a80:	f3000400 	vshl.u8	d0, d0, d0
    3a84:	009f5001 	addseq	r5, pc, r1
	...
    3a94:	07000000 	streq	r0, [r0, -r0]
    3a98:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    3a9c:	9f264824 	svcls	0x00264824
	...
    3ab0:	00500001 	subseq	r0, r0, r1
    3ab4:	00000000 	andeq	r0, r0, r0
    3ab8:	06000000 	streq	r0, [r0], -r0
    3abc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3ac0:	009f1c4b 	addseq	r1, pc, fp, asr #24
	...
    3ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ad4:	00005500 	andeq	r5, r0, r0, lsl #10
    3ad8:	00000000 	andeq	r0, r0, r0
    3adc:	000c0000 	andeq	r0, ip, r0
    3ae0:	4b5001f3 	blmi	14042b4 <__ccfg+0x13e430c>
    3ae4:	5001f31c 	andpl	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
    3ae8:	9f1e1c4b 	svcls	0x001e1c4b
	...
    3afc:	0071002c 	rsbseq	r0, r1, ip, lsr #32
    3b00:	00712640 	rsbseq	r2, r1, r0, asr #12
    3b04:	26482440 	strbcs	r2, [r8], -r0, asr #8
    3b08:	331e0070 	tstcc	lr, #112	; 0x70
    3b0c:	00712226 	rsbseq	r2, r1, r6, lsr #4
    3b10:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3b14:	3a1e0075 	bcc	783cf0 <__ccfg+0x763d48>
    3b18:	00742226 	rsbseq	r2, r4, r6, lsr #4
    3b1c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3b20:	701e0075 	andsvc	r0, lr, r5, ror r0
    3b24:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    3b28:	00009f22 	andeq	r9, r0, r2, lsr #30
    3b2c:	00000000 	andeq	r0, r0, r0
    3b30:	00320000 	eorseq	r0, r2, r0
    3b34:	26400071 			; <UNDEFINED> instruction: 0x26400071
    3b38:	4b5001f3 	blmi	140430c <__ccfg+0x13e4364>
    3b3c:	4000711c 	andmi	r7, r0, ip, lsl r1
    3b40:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3b44:	71222633 			; <UNDEFINED> instruction: 0x71222633
    3b48:	48244800 	stmdami	r4!, {fp, lr}
    3b4c:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    3b50:	f322263a 	vmin.u32	d2, d2, d26
    3b54:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3b58:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3b5c:	751e2648 	ldrvc	r2, [lr, #-1608]	; 0xfffff9b8
    3b60:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    3b64:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
    3b74:	00010000 	andeq	r0, r1, r0
    3b78:	00000050 	andeq	r0, r0, r0, asr r0
    3b7c:	00000000 	andeq	r0, r0, r0
    3b80:	f3000400 	vshl.u8	d0, d0, d0
    3b84:	009f5001 	addseq	r5, pc, r1
	...
    3b94:	0b000000 	bleq	3b9c <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>
    3b98:	70007000 	andvc	r7, r0, r0
    3b9c:	26461e00 	strbcs	r1, [r6], -r0, lsl #28
    3ba0:	9f1c0070 	svcls	0x001c0070
	...
    3bac:	00500001 	subseq	r0, r0, r1
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3bb8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3bbc:	1e5001f3 	mrcne	1, 2, r0, cr0, cr3, {7}
    3bc0:	01f32646 	mvnseq	r2, r6, asr #12
    3bc4:	009f1c50 	addseq	r1, pc, r0, asr ip	; <UNPREDICTABLE>
	...
    3bd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3bd8:	00005500 	andeq	r5, r0, r0, lsl #10
    3bdc:	00000000 	andeq	r0, r0, r0
    3be0:	00050000 	andeq	r0, r5, r0
    3be4:	0910380c 	ldmdbeq	r0, {r2, r3, fp, ip, sp}
    3be8:	00000040 	andeq	r0, r0, r0, asr #32
	...
    3bf8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3c0c:	00700006 	rsbseq	r0, r0, r6
    3c10:	9f1c0076 	svcls	0x001c0076
	...
    3c1c:	00500001 	subseq	r0, r0, r1
	...
    3c2c:	0a000000 	beq	3c34 <NOROM_RFCSynthPowerDown+0x28>
    3c30:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3c34:	1a2444fc 	bne	91502c <__ccfg+0x8f5084>
    3c38:	009f2546 	addseq	r2, pc, r6, asr #10
	...
    3c48:	01000000 	mrseq	r0, (UNDEF: 0)
    3c4c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    3c5c:	00090000 	andeq	r0, r9, r0
    3c60:	000a0073 	andeq	r0, sl, r3, ror r0
    3c64:	253a1afc 	ldrcs	r1, [sl, #-2812]!	; 0xfffff504
    3c68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3c78:	73000a00 	movwvc	r0, #2560	; 0xa00
    3c7c:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    3c80:	25421a24 	strbcs	r1, [r2, #-2596]	; 0xfffff5dc
    3c84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c88:	00000000 	andeq	r0, r0, r0
    3c8c:	003be400 	eorseq	lr, fp, r0, lsl #8
    3c90:	003c0200 	eorseq	r0, ip, r0, lsl #4
    3c94:	50000100 	andpl	r0, r0, r0, lsl #2
    3c98:	00003c02 	andeq	r3, r0, r2, lsl #24
    3c9c:	00003c0c 	andeq	r3, r0, ip, lsl #24
    3ca0:	01f30004 	mvnseq	r0, r4
    3ca4:	00009f50 	andeq	r9, r0, r0, asr pc
    3ca8:	00000000 	andeq	r0, r0, r0
    3cac:	3c6e0000 	stclcc	0, cr0, [lr], #-0
    3cb0:	3c700000 	ldclcc	0, cr0, [r0], #-0
    3cb4:	00010000 	andeq	r0, r1, r0
    3cb8:	003c7253 	eorseq	r7, ip, r3, asr r2
    3cbc:	003c7400 	eorseq	r7, ip, r0, lsl #8
    3cc0:	53000100 	movwpl	r0, #256	; 0x100
	...
    3ccc:	00003da8 	andeq	r3, r0, r8, lsr #27
    3cd0:	00003dde 	ldrdeq	r3, [r0], -lr
    3cd4:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
    3cd8:	c000003d 	andgt	r0, r0, sp, lsr r0
    3cdc:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    3ce0:	5001f300 	andpl	pc, r1, r0, lsl #6
    3ce4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ce8:	00000000 	andeq	r0, r0, r0
    3cec:	003dc600 	eorseq	ip, sp, r0, lsl #12
    3cf0:	003dca00 	eorseq	ip, sp, r0, lsl #20
    3cf4:	51000100 	mrspl	r0, (UNDEF: 16)
    3cf8:	00003dca 	andeq	r3, r0, sl, asr #27
    3cfc:	00003dd0 	ldrdeq	r3, [r0], -r0
    3d00:	9f320002 	svcls	0x00320002
    3d04:	00003dd4 	ldrdeq	r3, [r0], -r4
    3d08:	00003e5e 	andeq	r3, r0, lr, asr lr
    3d0c:	5e510001 	cdppl	0, 5, cr0, cr1, cr1, {0}
    3d10:	6200003e 	andvs	r0, r0, #62	; 0x3e
    3d14:	0300003e 	movweq	r0, #62	; 0x3e
    3d18:	9f057100 	svcls	0x00057100
    3d1c:	00003e84 	andeq	r3, r0, r4, lsl #29
    3d20:	00003e9a 	muleq	r0, sl, lr
    3d24:	9a510001 	bls	1443d30 <__ccfg+0x1423d88>
    3d28:	9c00003e 	stcls	0, cr0, [r0], {62}	; 0x3e
    3d2c:	0300003e 	movweq	r0, #62	; 0x3e
    3d30:	9f057100 	svcls	0x00057100
	...
    3d3c:	00003e2a 	andeq	r3, r0, sl, lsr #28
    3d40:	00003e30 	andeq	r3, r0, r0, lsr lr
    3d44:	38530001 	ldmdacc	r3, {r0}^
    3d48:	3a00003e 	bcc	3e48 <NOROM_RFCRTrim+0xa0>
    3d4c:	0100003e 	tsteq	r0, lr, lsr r0
    3d50:	3e4e5300 	cdpcc	3, 4, cr5, cr14, cr0, {0}
    3d54:	3e500000 	cdpcc	0, 5, cr0, cr0, cr0, {0}
    3d58:	00010000 	andeq	r0, r1, r0
    3d5c:	003e5853 	eorseq	r5, lr, r3, asr r8
    3d60:	003e6400 	eorseq	r6, lr, r0, lsl #8
    3d64:	53000100 	movwpl	r0, #256	; 0x100
    3d68:	00003e84 	andeq	r3, r0, r4, lsl #29
    3d6c:	00003e90 	muleq	r0, r0, lr
    3d70:	94530001 	ldrbls	r0, [r3], #-1
    3d74:	9c00003e 	stcls	0, cr0, [r0], {62}	; 0x3e
    3d78:	0100003e 	tsteq	r0, lr, lsr r0
    3d7c:	00005300 	andeq	r5, r0, r0, lsl #6
    3d80:	00000000 	andeq	r0, r0, r0
    3d84:	3dc80000 	stclcc	0, cr0, [r8]
    3d88:	3dca0000 	stclcc	0, cr0, [sl]
    3d8c:	00010000 	andeq	r0, r1, r0
    3d90:	003dcc53 	eorseq	ip, sp, r3, asr ip
    3d94:	003dd000 	eorseq	sp, sp, r0
    3d98:	53000100 	movwpl	r0, #256	; 0x100
    3d9c:	00003dd6 	ldrdeq	r3, [r0], -r6
    3da0:	00003dde 	ldrdeq	r3, [r0], -lr
    3da4:	de530001 	cdple	0, 5, cr0, cr3, cr1, {0}
    3da8:	f400003d 	vst4.8	{d0-d3}, [r0 :256]!
    3dac:	0300003d 	movweq	r0, #61	; 0x3d
    3db0:	9f6c7400 	svcls	0x006c7400
    3db4:	00003df8 	strdeq	r3, [r0], -r8
    3db8:	00003dfe 	strdeq	r3, [r0], -lr
    3dbc:	6c740003 	ldclvs	0, cr0, [r4], #-12
    3dc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3dc4:	00000000 	andeq	r0, r0, r0
    3dc8:	003dee00 	eorseq	lr, sp, r0, lsl #28
    3dcc:	003e7200 	eorseq	r7, lr, r0, lsl #4
    3dd0:	52000100 	andpl	r0, r0, #0, 2
    3dd4:	00003e72 	andeq	r3, r0, r2, ror lr
    3dd8:	00003e78 	andeq	r3, r0, r8, ror lr
    3ddc:	00700002 	rsbseq	r0, r0, r2
    3de0:	00003e78 	andeq	r3, r0, r8, ror lr
    3de4:	00003e7c 	andeq	r3, r0, ip, ror lr
    3de8:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
    3dec:	8200003e 	andhi	r0, r0, #62	; 0x3e
    3df0:	0200003e 	andeq	r0, r0, #62	; 0x3e
    3df4:	84007000 	strhi	r7, [r0], #-0
    3df8:	8c00003e 	stchi	0, cr0, [r0], {62}	; 0x3e
    3dfc:	0100003e 	tsteq	r0, lr, lsr r0
    3e00:	3e8c5200 	cdpcc	2, 8, cr5, cr12, cr0, {0}
    3e04:	3e920000 	cdpcc	0, 9, cr0, cr2, cr0, {0}
    3e08:	00020000 	andeq	r0, r2, r0
    3e0c:	3e940070 	mrccc	0, 4, r0, cr4, cr0, {3}
    3e10:	3e9c0000 	cdpcc	0, 9, cr0, cr12, cr0, {0}
    3e14:	00010000 	andeq	r0, r1, r0
    3e18:	00000052 	andeq	r0, r0, r2, asr r0
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	003da800 	eorseq	sl, sp, r0, lsl #16
    3e24:	003df400 	eorseq	pc, sp, r0, lsl #8
    3e28:	30000200 	andcc	r0, r0, r0, lsl #4
    3e2c:	003df49f 	mlaseq	sp, pc, r4, pc	; <UNPREDICTABLE>
    3e30:	003df800 	eorseq	pc, sp, r0, lsl #16
    3e34:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3e38:	00003df8 	strdeq	r3, [r0], -r8
    3e3c:	00003dfe 	strdeq	r3, [r0], -lr
    3e40:	9f300002 	svcls	0x00300002
    3e44:	00003dfe 	strdeq	r3, [r0], -lr
    3e48:	00003e9c 	muleq	r0, ip, lr
    3e4c:	00540001 	subseq	r0, r4, r1
    3e50:	00000000 	andeq	r0, r0, r0
    3e54:	c0000000 	andgt	r0, r0, r0
    3e58:	ca00003e 	bgt	3f58 <TrimAfterColdResetWakeupFromShutDown+0x5c>
    3e5c:	0100003e 	tsteq	r0, lr, lsr r0
    3e60:	3eca5000 	cdpcc	0, 12, cr5, cr10, cr0, {0}
    3e64:	3edc0000 	cdpcc	0, 13, cr0, cr12, cr0, {0}
    3e68:	00030000 	andeq	r0, r3, r0
    3e6c:	dc9f7075 	ldcle	0, cr7, [pc], {117}	; 0x75
    3e70:	e000003e 	and	r0, r0, lr, lsr r0
    3e74:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    3e78:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3e8c:	30000200 	andcc	r0, r0, r0, lsl #4
    3e90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e94:	00000000 	andeq	r0, r0, r0
    3e98:	31000200 	mrscc	r0, R8_usr
    3e9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ea0:	00000000 	andeq	r0, r0, r0
    3ea4:	32000200 	andcc	r0, r0, #0, 4
    3ea8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3eac:	00000000 	andeq	r0, r0, r0
    3eb0:	33000200 	movwcc	r0, #512	; 0x200
    3eb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3eb8:	00000000 	andeq	r0, r0, r0
    3ebc:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    3ec0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ec4:	00000000 	andeq	r0, r0, r0
    3ec8:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    3ecc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ed0:	00000000 	andeq	r0, r0, r0
    3ed4:	36000200 	strcc	r0, [r0], -r0, lsl #4
    3ed8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	37000200 	strcc	r0, [r0, -r0, lsl #4]
    3ee4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ee8:	00000000 	andeq	r0, r0, r0
    3eec:	38000200 	stmdacc	r0, {r9}
    3ef0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ef4:	00000000 	andeq	r0, r0, r0
    3ef8:	39000200 	stmdbcc	r0, {r9}
    3efc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f00:	00000000 	andeq	r0, r0, r0
    3f04:	3a000200 	bcc	470c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc0>
    3f08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f0c:	00000000 	andeq	r0, r0, r0
    3f10:	3b000200 	blcc	4718 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xcc>
    3f14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	3c000200 	sfmcc	f0, 4, [r0], {-0}
    3f20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f24:	00000000 	andeq	r0, r0, r0
    3f28:	003efc00 	eorseq	pc, lr, r0, lsl #24
    3f2c:	003f3a00 	eorseq	r3, pc, r0, lsl #20
    3f30:	50000100 	andpl	r0, r0, r0, lsl #2
    3f34:	00003f3a 	andeq	r3, r0, sl, lsr pc
    3f38:	00003f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    3f3c:	9c550001 	mrrcls	0, 0, r0, r5, cr1
    3f40:	d000003f 	andle	r0, r0, pc, lsr r0
    3f44:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    3f48:	5001f300 	andpl	pc, r1, r0, lsl #6
    3f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f50:	00000000 	andeq	r0, r0, r0
    3f54:	003f3800 	eorseq	r3, pc, r0, lsl #16
    3f58:	003f9c00 	eorseq	r9, pc, r0, lsl #24
    3f5c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3f68:	00003f4e 	andeq	r3, r0, lr, asr #30
    3f6c:	00003f50 	andeq	r3, r0, r0, asr pc
    3f70:	00730007 	rsbseq	r0, r3, r7
    3f74:	1affff0a 	bne	3ba4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>
    3f78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	003f5e00 	eorseq	r5, pc, r0, lsl #28
    3f84:	003f7800 	eorseq	r7, pc, r0, lsl #16
    3f88:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f94:	00003f62 	andeq	r3, r0, r2, ror #30
    3f98:	00003f6e 	andeq	r3, r0, lr, ror #30
    3f9c:	6e520001 	cdpvs	0, 5, cr0, cr2, cr1, {0}
    3fa0:	7200003f 	andvc	r0, r0, #63	; 0x3f
    3fa4:	0300003f 	movweq	r0, #63	; 0x3f
    3fa8:	9f067100 	svcls	0x00067100
    3fac:	00003f72 	andeq	r3, r0, r2, ror pc
    3fb0:	00003f7a 	andeq	r3, r0, sl, ror pc
    3fb4:	00520001 	subseq	r0, r2, r1
    3fb8:	00000000 	andeq	r0, r0, r0
    3fbc:	d6000000 	strle	r0, [r0], -r0
    3fc0:	5000003f 	andpl	r0, r0, pc, lsr r0
    3fc4:	01000040 	tsteq	r0, r0, asr #32
    3fc8:	00005400 	andeq	r5, r0, r0, lsl #8
    3fcc:	00000000 	andeq	r0, r0, r0
    3fd0:	403c0000 	eorsmi	r0, ip, r0
    3fd4:	40460000 	submi	r0, r6, r0
    3fd8:	00010000 	andeq	r0, r1, r0
    3fdc:	00000053 	andeq	r0, r0, r3, asr r0
    3fe0:	00000000 	andeq	r0, r0, r0
    3fe4:	00407400 	subeq	r7, r0, r0, lsl #8
    3fe8:	00409a00 	subeq	r9, r0, r0, lsl #20
    3fec:	50000100 	andpl	r0, r0, r0, lsl #2
    3ff0:	0000409a 	muleq	r0, sl, r0
    3ff4:	000040f0 	strdeq	r4, [r0], -r0
    3ff8:	01f30004 	mvnseq	r0, r4
    3ffc:	00009f50 	andeq	r9, r0, r0, asr pc
    4000:	00000000 	andeq	r0, r0, r0
    4004:	409c0000 	addsmi	r0, ip, r0
    4008:	40d00000 	sbcsmi	r0, r0, r0
    400c:	00010000 	andeq	r0, r1, r0
    4010:	00000053 	andeq	r0, r0, r3, asr r0
    4014:	00000000 	andeq	r0, r0, r0
    4018:	0040a000 	subeq	sl, r0, r0
    401c:	0040ae00 	subeq	sl, r0, r0, lsl #28
    4020:	51000100 	mrspl	r0, (UNDEF: 16)
    4024:	000040ae 	andeq	r4, r0, lr, lsr #1
    4028:	000040b0 	strheq	r4, [r0], -r0
    402c:	00720006 	rsbseq	r0, r2, r6
    4030:	9f1c0073 	svcls	0x001c0073
    4034:	000040b0 	strheq	r4, [r0], -r0
    4038:	000040b6 	strheq	r4, [r0], -r6
    403c:	00510001 	subseq	r0, r1, r1
    4040:	00000000 	andeq	r0, r0, r0
    4044:	8c000000 	stchi	0, cr0, [r0], {-0}
    4048:	9e000040 	cdpls	0, 0, cr0, cr0, cr0, {2}
    404c:	01000040 	tsteq	r0, r0, asr #32
    4050:	00005300 	andeq	r5, r0, r0, lsl #6
    4054:	00000000 	andeq	r0, r0, r0
    4058:	40f00000 	rscsmi	r0, r0, r0
    405c:	41130000 	tstmi	r3, r0
    4060:	00010000 	andeq	r0, r1, r0
    4064:	00411350 	subeq	r1, r1, r0, asr r3
    4068:	00411e00 	subeq	r1, r1, r0, lsl #28
    406c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4070:	0000411e 	andeq	r4, r0, lr, lsl r1
    4074:	00004126 	andeq	r4, r0, r6, lsr #2
    4078:	26500001 	ldrbcs	r0, [r0], -r1
    407c:	72000041 	andvc	r0, r0, #65	; 0x41
    4080:	01000041 	tsteq	r0, r1, asr #32
    4084:	00005400 	andeq	r5, r0, r0, lsl #8
    4088:	00000000 	andeq	r0, r0, r0
    408c:	412c0000 			; <UNDEFINED> instruction: 0x412c0000
    4090:	41300000 	teqmi	r0, r0
    4094:	00010000 	andeq	r0, r1, r0
    4098:	00413253 	subeq	r3, r1, r3, asr r2
    409c:	00414000 	subeq	r4, r1, r0
    40a0:	53000100 	movwpl	r0, #256	; 0x100
    40a4:	00004142 	andeq	r4, r0, r2, asr #2
    40a8:	0000414a 	andeq	r4, r0, sl, asr #2
    40ac:	00530001 	subseq	r0, r3, r1
    40b0:	00000000 	andeq	r0, r0, r0
    40b4:	2c000000 	stccs	0, cr0, [r0], {-0}
    40b8:	60000041 	andvs	r0, r0, r1, asr #32
    40bc:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    40c0:	4c007400 	cfstrsmi	mvf7, [r0], {-0}
    40c4:	41609f26 	cmnmi	r0, r6, lsr #30
    40c8:	419c0000 	orrsmi	r0, ip, r0
    40cc:	00060000 	andeq	r0, r6, r0
    40d0:	4c5001f3 	ldfmie	f0, [r0], {243}	; 0xf3
    40d4:	00009f26 	andeq	r9, r0, r6, lsr #30
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	41260000 			; <UNDEFINED> instruction: 0x41260000
    40e0:	41300000 	teqmi	r0, r0
    40e4:	00010000 	andeq	r0, r1, r0
    40e8:	00000053 	andeq	r0, r0, r3, asr r0
    40ec:	00000000 	andeq	r0, r0, r0
    40f0:	00419c00 	subeq	r9, r1, r0, lsl #24
    40f4:	0041b000 	subeq	fp, r1, r0
    40f8:	50000100 	andpl	r0, r0, r0, lsl #2
    40fc:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
    4100:	000041f8 	strdeq	r4, [r0], -r8
    4104:	01f30004 	mvnseq	r0, r4
    4108:	00009f50 	andeq	r9, r0, r0, asr pc
    410c:	00000000 	andeq	r0, r0, r0
    4110:	41a20000 			; <UNDEFINED> instruction: 0x41a20000
    4114:	41aa0000 			; <UNDEFINED> instruction: 0x41aa0000
    4118:	00010000 	andeq	r0, r1, r0
    411c:	00000053 	andeq	r0, r0, r3, asr r0
    4120:	00000000 	andeq	r0, r0, r0
    4124:	0041a600 	subeq	sl, r1, r0, lsl #12
    4128:	0041b800 	subeq	fp, r1, r0, lsl #16
    412c:	52000100 	andpl	r0, r0, #0, 2
    4130:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    4134:	000041ba 			; <UNDEFINED> instruction: 0x000041ba
    4138:	00720005 	rsbseq	r0, r2, r5
    413c:	ba9f2531 	blt	fe7cd608 <_estack+0xde7c8608>
    4140:	c0000041 	andgt	r0, r0, r1, asr #32
    4144:	01000041 	tsteq	r0, r1, asr #32
    4148:	41c45200 	bicmi	r5, r4, r0, lsl #4
    414c:	41d60000 	bicsmi	r0, r6, r0
    4150:	00010000 	andeq	r0, r1, r0
    4154:	0041da52 	subeq	sp, r1, r2, asr sl
    4158:	0041e400 	subeq	lr, r1, r0, lsl #8
    415c:	52000100 	andpl	r0, r0, #0, 2
    4160:	000041e6 	andeq	r4, r0, r6, ror #3
    4164:	000041f8 	strdeq	r4, [r0], -r8
    4168:	00520001 	subseq	r0, r2, r1
    416c:	00000000 	andeq	r0, r0, r0
    4170:	aa000000 	bge	4178 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x88>
    4174:	b4000041 	strlt	r0, [r0], #-65	; 0xffffffbf
    4178:	01000041 	tsteq	r0, r1, asr #32
    417c:	41b45300 			; <UNDEFINED> instruction: 0x41b45300
    4180:	41b60000 			; <UNDEFINED> instruction: 0x41b60000
    4184:	00050000 	andeq	r0, r5, r0
    4188:	25310073 	ldrcs	r0, [r1, #-115]!	; 0xffffff8d
    418c:	0041b69f 	umaaleq	fp, r1, pc, r6	; <UNPREDICTABLE>
    4190:	0041b800 	subeq	fp, r1, r0, lsl #16
    4194:	53000100 	movwpl	r0, #256	; 0x100
    4198:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    419c:	000041c4 	andeq	r4, r0, r4, asr #3
    41a0:	ff0a0004 			; <UNDEFINED> instruction: 0xff0a0004
    41a4:	41c49fff 	strdmi	r9, [r4, #255]	; 0xff
    41a8:	41ca0000 	bicmi	r0, sl, r0
    41ac:	00010000 	andeq	r0, r1, r0
    41b0:	0041ce53 	subeq	ip, r1, r3, asr lr
    41b4:	0041d400 	subeq	sp, r1, r0, lsl #8
    41b8:	53000100 	movwpl	r0, #256	; 0x100
    41bc:	000041d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    41c0:	000041e6 	andeq	r4, r0, r6, ror #3
    41c4:	9f310002 	svcls	0x00310002
    41c8:	000041e6 	andeq	r4, r0, r6, ror #3
    41cc:	000041f8 	strdeq	r4, [r0], -r8
    41d0:	00530001 	subseq	r0, r3, r1
    41d4:	00000000 	andeq	r0, r0, r0
    41d8:	aa000000 	bge	41e0 <NOROM_SetupGetTrimForAnabypassValue1+0x44>
    41dc:	b0000041 	andlt	r0, r0, r1, asr #32
    41e0:	02000041 	andeq	r0, r0, #65	; 0x41
    41e4:	b09f3000 	addslt	r3, pc, r0
    41e8:	ec000041 	stc	0, cr0, [r0], {65}	; 0x41
    41ec:	01000041 	tsteq	r0, r1, asr #32
    41f0:	00005000 	andeq	r5, r0, r0
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	41ec0000 	mvnmi	r0, r0
    41fc:	41f00000 	mvnsmi	r0, r0
    4200:	00080000 	andeq	r0, r8, r0
    4204:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    4208:	9f210073 	svcls	0x00210073
    420c:	000041f0 	strdeq	r4, [r0], -r0
    4210:	000041f8 	strdeq	r4, [r0], -r8
    4214:	00500001 	subseq	r0, r0, r1
    4218:	00000000 	andeq	r0, r0, r0
    421c:	02000000 	andeq	r0, r0, #0
    4220:	06000042 	streq	r0, [r0], -r2, asr #32
    4224:	0a000042 	beq	4334 <NOROM_SetupGetTrimForRadcExtCfg+0x28>
    4228:	33007000 	movwcc	r7, #0
    422c:	7324381a 			; <UNDEFINED> instruction: 0x7324381a
    4230:	0a9f2100 	beq	fe7cc638 <_estack+0xde7c7638>
    4234:	10000042 	andne	r0, r0, r2, asr #32
    4238:	01000042 	tsteq	r0, r2, asr #32
    423c:	00005000 	andeq	r5, r0, r0
	...
    424c:	00070000 	andeq	r0, r7, r0
    4250:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    4254:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    4258:	00000000 	andeq	r0, r0, r0
    425c:	14000000 	strne	r0, [r0], #-0
    4260:	18000042 	stmdane	r0, {r1, r6}
    4264:	0f000042 	svceq	0x00000042
    4268:	08007000 	stmdaeq	r0, {ip, sp, lr}
    426c:	00701afc 	ldrshteq	r1, [r0], #-172	; 0xffffff54
    4270:	f3f88011 	vshr.u32	d24, d1, #8
    4274:	9f211a67 	svcls	0x00211a67
	...
    4280:	00004214 	andeq	r4, r0, r4, lsl r2
    4284:	00004218 	andeq	r4, r0, r8, lsl r2
    4288:	00500001 	subseq	r0, r0, r1
    428c:	00000000 	andeq	r0, r0, r0
    4290:	24000000 	strcs	r0, [r0], #-0
    4294:	28000042 	stmdacs	r0, {r1, r6}
    4298:	0f000042 	svceq	0x00000042
    429c:	08007000 	stmdaeq	r0, {ip, sp, lr}
    42a0:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    42a4:	fcffc00c 	ldc2l	0, cr12, [pc], #48	; 42dc <NOROM_SetupGetTrimForXoscHfCtl+0x8>
    42a8:	9f211a00 	svcls	0x00211a00
	...
    42b4:	00004224 	andeq	r4, r0, r4, lsr #4
    42b8:	00004228 	andeq	r4, r0, r8, lsr #4
    42bc:	00500001 	subseq	r0, r0, r1
    42c0:	00000000 	andeq	r0, r0, r0
    42c4:	34000000 	strcc	r0, [r0], #-0
    42c8:	8a000042 	bhi	43d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x78>
    42cc:	01000042 	tsteq	r0, r2, asr #32
    42d0:	428a5000 	addmi	r5, sl, #0
    42d4:	42980000 	addsmi	r0, r8, #0
    42d8:	00040000 	andeq	r0, r4, r0
    42dc:	9f5001f3 	svcls	0x005001f3
	...
    42e8:	00004274 	andeq	r4, r0, r4, ror r2
    42ec:	0000427c 	andeq	r4, r0, ip, ror r2
    42f0:	00740017 	rsbseq	r0, r4, r7, lsl r0
    42f4:	1aff000a 	bne	fffc4324 <_estack+0xdffbf324>
    42f8:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
    42fc:	0072211a 	rsbseq	r2, r2, sl, lsl r1
    4300:	73212444 			; <UNDEFINED> instruction: 0x73212444
    4304:	21244000 			; <UNDEFINED> instruction: 0x21244000
    4308:	0042809f 	umaaleq	r8, r2, pc, r0	; <UNPREDICTABLE>
    430c:	00429800 	subeq	r9, r2, r0, lsl #16
    4310:	53000100 	movwpl	r0, #256	; 0x100
	...
    431c:	0000423c 	andeq	r4, r0, ip, lsr r2
    4320:	00004286 	andeq	r4, r0, r6, lsl #5
    4324:	00540001 	subseq	r0, r4, r1
    4328:	00000000 	andeq	r0, r0, r0
    432c:	42000000 	andmi	r0, r0, #0
    4330:	56000042 	strpl	r0, [r0], -r2, asr #32
    4334:	01000042 	tsteq	r0, r2, asr #32
    4338:	42565200 	subsmi	r5, r6, #0, 4
    433c:	42620000 	rsbmi	r0, r2, #0
    4340:	00060000 	andeq	r0, r6, r0
    4344:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    4348:	42749f24 	rsbsmi	r9, r4, #36, 30	; 0x90
    434c:	427c0000 	rsbsmi	r0, ip, #0
    4350:	00010000 	andeq	r0, r1, r0
    4354:	00000052 	andeq	r0, r0, r2, asr r0
    4358:	00000000 	andeq	r0, r0, r0
    435c:	00424a00 	subeq	r4, r2, r0, lsl #20
    4360:	00426800 	subeq	r6, r2, r0, lsl #16
    4364:	53000100 	movwpl	r0, #256	; 0x100
    4368:	00004268 	andeq	r4, r0, r8, ror #4
    436c:	00004274 	andeq	r4, r0, r4, ror r2
    4370:	00740006 	rsbseq	r0, r4, r6
    4374:	9f24f009 	svcls	0x0024f009
    4378:	00004274 	andeq	r4, r0, r4, ror r2
    437c:	00004280 	andeq	r4, r0, r0, lsl #5
    4380:	00530001 	subseq	r0, r3, r1
    4384:	00000000 	andeq	r0, r0, r0
    4388:	54000000 	strpl	r0, [r0], #-0
    438c:	56000042 	strpl	r0, [r0], -r2, asr #32
    4390:	06000042 	streq	r0, [r0], -r2, asr #32
    4394:	72007600 	andvc	r7, r0, #0, 12
    4398:	569f2200 	ldrpl	r2, [pc], r0, lsl #4
    439c:	5e000042 	cdppl	0, 0, cr0, cr0, cr2, {2}
    43a0:	01000042 	tsteq	r0, r2, asr #32
    43a4:	425e5200 	subsmi	r5, lr, #0, 4
    43a8:	42600000 	rsbmi	r0, r0, #0
    43ac:	00090000 	andeq	r0, r9, r0
    43b0:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    43b4:	22007624 	andcs	r7, r0, #36, 12	; 0x2400000
    43b8:	0042609f 	umaaleq	r6, r2, pc, r0	; <UNPREDICTABLE>
    43bc:	00426200 	subeq	r6, r2, r0, lsl #4
    43c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    43c4:	00004266 	andeq	r4, r0, r6, ror #4
    43c8:	00004268 	andeq	r4, r0, r8, ror #4
    43cc:	00710006 	rsbseq	r0, r1, r6
    43d0:	9f220073 	svcls	0x00220073
    43d4:	00004268 	andeq	r4, r0, r8, ror #4
    43d8:	00004270 	andeq	r4, r0, r0, ror r2
    43dc:	70530001 	subsvc	r0, r3, r1
    43e0:	72000042 	andvc	r0, r0, #66	; 0x42
    43e4:	09000042 	stmdbeq	r0, {r1, r6}
    43e8:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    43ec:	007124f0 	ldrshteq	r2, [r1], #-64	; 0xffffffc0
    43f0:	42729f22 	rsbsmi	r9, r2, #34, 30	; 0x88
    43f4:	42740000 	rsbsmi	r0, r4, #0
    43f8:	00020000 	andeq	r0, r2, r0
    43fc:	00009f30 	andeq	r9, r0, r0, lsr pc
    4400:	00000000 	andeq	r0, r0, r0
    4404:	42980000 	addsmi	r0, r8, #0
    4408:	42a00000 	adcmi	r0, r0, #0
    440c:	00010000 	andeq	r0, r1, r0
    4410:	0042a050 	subeq	sl, r2, r0, asr r0
    4414:	0042ac00 	subeq	sl, r2, r0, lsl #24
    4418:	f3000400 	vshl.u8	d0, d0, d0
    441c:	009f5001 	addseq	r5, pc, r1
    4420:	00000000 	andeq	r0, r0, r0
    4424:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4428:	a6000042 	strge	r0, [r0], -r2, asr #32
    442c:	02000042 	andeq	r0, r0, #66	; 0x42
    4430:	a69f3000 	ldrge	r3, [pc], r0
    4434:	ac000042 	stcge	0, cr0, [r0], {66}	; 0x42
    4438:	01000042 	tsteq	r0, r2, asr #32
    443c:	00005000 	andeq	r5, r0, r0
    4440:	00000000 	andeq	r0, r0, r0
    4444:	429a0000 	addsmi	r0, sl, #0
    4448:	42a00000 	adcmi	r0, r0, #0
    444c:	00010000 	andeq	r0, r1, r0
    4450:	0042a050 	subeq	sl, r2, r0, asr r0
    4454:	0042ac00 	subeq	sl, r2, r0, lsl #24
    4458:	f3000400 	vshl.u8	d0, d0, d0
    445c:	009f5001 	addseq	r5, pc, r1
    4460:	00000000 	andeq	r0, r0, r0
    4464:	a4000000 	strge	r0, [r0], #-0
    4468:	a6000042 	strge	r0, [r0], -r2, asr #32
    446c:	01000042 	tsteq	r0, r2, asr #32
    4470:	00005000 	andeq	r5, r0, r0
    4474:	00000000 	andeq	r0, r0, r0
    4478:	42ac0000 	adcmi	r0, ip, #0
    447c:	42b40000 	adcsmi	r0, r4, #0
    4480:	00010000 	andeq	r0, r1, r0
    4484:	0042b450 	subeq	fp, r2, r0, asr r4
    4488:	0042c000 	subeq	ip, r2, r0
    448c:	f3000400 	vshl.u8	d0, d0, d0
    4490:	009f5001 	addseq	r5, pc, r1
    4494:	00000000 	andeq	r0, r0, r0
    4498:	ac000000 	stcge	0, cr0, [r0], {-0}
    449c:	ba000042 	blt	45ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb0>
    44a0:	02000042 	andeq	r0, r0, #66	; 0x42
    44a4:	ba9f3100 	blt	fe7d08ac <_estack+0xde7cb8ac>
    44a8:	c0000042 	andgt	r0, r0, r2, asr #32
    44ac:	01000042 	tsteq	r0, r2, asr #32
    44b0:	00005000 	andeq	r5, r0, r0
    44b4:	00000000 	andeq	r0, r0, r0
    44b8:	42ae0000 	adcmi	r0, lr, #0
    44bc:	42b40000 	adcsmi	r0, r4, #0
    44c0:	00010000 	andeq	r0, r1, r0
    44c4:	0042b450 	subeq	fp, r2, r0, asr r4
    44c8:	0042c000 	subeq	ip, r2, r0
    44cc:	f3000400 	vshl.u8	d0, d0, d0
    44d0:	009f5001 	addseq	r5, pc, r1
    44d4:	00000000 	andeq	r0, r0, r0
    44d8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    44dc:	ba000042 	blt	45ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    44e0:	01000042 	tsteq	r0, r2, asr #32
    44e4:	00005000 	andeq	r5, r0, r0
    44e8:	00000000 	andeq	r0, r0, r0
    44ec:	42c00000 	sbcmi	r0, r0, #0
    44f0:	42c80000 	sbcmi	r0, r8, #0
    44f4:	00010000 	andeq	r0, r1, r0
    44f8:	0042c850 	subeq	ip, r2, r0, asr r8
    44fc:	0042d400 	subeq	sp, r2, r0, lsl #8
    4500:	f3000400 	vshl.u8	d0, d0, d0
    4504:	009f5001 	addseq	r5, pc, r1
    4508:	00000000 	andeq	r0, r0, r0
    450c:	c0000000 	andgt	r0, r0, r0
    4510:	ce000042 	cdpgt	0, 0, cr0, cr0, cr2, {2}
    4514:	02000042 	andeq	r0, r0, #66	; 0x42
    4518:	ce9f3100 	fmlgte	f3, f7, f0
    451c:	d4000042 	strle	r0, [r0], #-66	; 0xffffffbe
    4520:	01000042 	tsteq	r0, r2, asr #32
    4524:	00005000 	andeq	r5, r0, r0
    4528:	00000000 	andeq	r0, r0, r0
    452c:	42c20000 	sbcmi	r0, r2, #0
    4530:	42c80000 	sbcmi	r0, r8, #0
    4534:	00010000 	andeq	r0, r1, r0
    4538:	0042c850 	subeq	ip, r2, r0, asr r8
    453c:	0042d400 	subeq	sp, r2, r0, lsl #8
    4540:	f3000400 	vshl.u8	d0, d0, d0
    4544:	009f5001 	addseq	r5, pc, r1
    4548:	00000000 	andeq	r0, r0, r0
    454c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4550:	ce000042 	cdpgt	0, 0, cr0, cr0, cr2, {2}
    4554:	01000042 	tsteq	r0, r2, asr #32
    4558:	00005000 	andeq	r5, r0, r0
    455c:	00000000 	andeq	r0, r0, r0
    4560:	42d40000 	sbcsmi	r0, r4, #0
    4564:	42e00000 	rscmi	r0, r0, #0
    4568:	00010000 	andeq	r0, r1, r0
    456c:	0042e050 	subeq	lr, r2, r0, asr r0
    4570:	0042fc00 	subeq	pc, r2, r0, lsl #24
    4574:	f3000400 	vshl.u8	d0, d0, d0
    4578:	009f5001 	addseq	r5, pc, r1
    457c:	00000000 	andeq	r0, r0, r0
    4580:	d4000000 	strle	r0, [r0], #-0
    4584:	f6000042 			; <UNDEFINED> instruction: 0xf6000042
    4588:	02000042 	andeq	r0, r0, #66	; 0x42
    458c:	f69f3000 			; <UNDEFINED> instruction: 0xf69f3000
    4590:	fc000042 	stc2	0, cr0, [r0], {66}	; 0x42
    4594:	01000042 	tsteq	r0, r2, asr #32
    4598:	00005000 	andeq	r5, r0, r0
    459c:	00000000 	andeq	r0, r0, r0
    45a0:	42d60000 	sbcsmi	r0, r6, #0
    45a4:	42e00000 	rscmi	r0, r0, #0
    45a8:	00010000 	andeq	r0, r1, r0
    45ac:	0042e050 	subeq	lr, r2, r0, asr r0
    45b0:	0042fc00 	subeq	pc, r2, r0, lsl #24
    45b4:	f3000400 	vshl.u8	d0, d0, d0
    45b8:	009f5001 	addseq	r5, pc, r1
    45bc:	00000000 	andeq	r0, r0, r0
    45c0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    45c4:	f0000042 			; <UNDEFINED> instruction: 0xf0000042
    45c8:	10000042 	andne	r0, r0, r2, asr #32
    45cc:	4c007300 	stcmi	3, cr7, [r0], {-0}
    45d0:	481a2446 	ldmdami	sl, {r1, r2, r6, sl, sp}
    45d4:	72243225 	eorvc	r3, r4, #1342177282	; 0x50000002
    45d8:	21243800 			; <UNDEFINED> instruction: 0x21243800
    45dc:	0042f29f 	umaaleq	pc, r2, pc, r2	; <UNPREDICTABLE>
    45e0:	0042f600 	subeq	pc, r2, r0, lsl #12
    45e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    45f0:	000042dc 	ldrdeq	r4, [r0], -ip
    45f4:	000042f0 	strdeq	r4, [r0], -r0
    45f8:	00530001 	subseq	r0, r3, r1
	...
    4604:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    4608:	09000043 	stmdbeq	r0, {r0, r1, r6}
    460c:	48007000 	stmdami	r0, {ip, sp, lr}
    4610:	431a2440 	tstmi	sl, #64, 8	; 0x40000000
    4614:	00009f25 	andeq	r9, r0, r5, lsr #30
    4618:	00000000 	andeq	r0, r0, r0
    461c:	430c0000 	movwmi	r0, #49152	; 0xc000
    4620:	43180000 	tstmi	r8, #0
    4624:	00010000 	andeq	r0, r1, r0
    4628:	00431850 	subeq	r1, r3, r0, asr r8
    462c:	00433800 	subeq	r3, r3, r0, lsl #16
    4630:	f3000400 	vshl.u8	d0, d0, d0
    4634:	009f5001 	addseq	r5, pc, r1
    4638:	00000000 	andeq	r0, r0, r0
    463c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4640:	2e000043 	cdpcs	0, 0, cr0, cr0, cr3, {2}
    4644:	06000043 	streq	r0, [r0], -r3, asr #32
    4648:	80000c00 	andhi	r0, r0, r0, lsl #24
    464c:	2e9f403f 	mrccs	0, 4, r4, cr15, cr15, {1}
    4650:	38000043 	stmdacc	r0, {r0, r1, r6}
    4654:	01000043 	tsteq	r0, r3, asr #32
    4658:	00005000 	andeq	r5, r0, r0
    465c:	00000000 	andeq	r0, r0, r0
    4660:	430e0000 	movwmi	r0, #57344	; 0xe000
    4664:	43180000 	tstmi	r8, #0
    4668:	00010000 	andeq	r0, r1, r0
    466c:	00431850 	subeq	r1, r3, r0, asr r8
    4670:	00433800 	subeq	r3, r3, r0, lsl #16
    4674:	f3000400 	vshl.u8	d0, d0, d0
    4678:	009f5001 	addseq	r5, pc, r1
    467c:	00000000 	andeq	r0, r0, r0
    4680:	1c000000 	stcne	0, cr0, [r0], {-0}
    4684:	22000043 	andcs	r0, r0, #67	; 0x43
    4688:	10000043 	andne	r0, r0, r3, asr #32
    468c:	0a007300 	beq	21294 <__ccfg+0x12ec>
    4690:	341a03f0 	ldrcc	r0, [sl], #-1008	; 0xfffffc10
    4694:	72244025 	eorvc	r4, r4, #37	; 0x25
    4698:	21244600 			; <UNDEFINED> instruction: 0x21244600
    469c:	00432c9f 	umaaleq	r2, r3, pc, ip	; <UNPREDICTABLE>
    46a0:	00432e00 	subeq	r2, r3, r0, lsl #28
    46a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46b0:	00004314 	andeq	r4, r0, r4, lsl r3
    46b4:	00004322 	andeq	r4, r0, r2, lsr #6
    46b8:	00530001 	subseq	r0, r3, r1
    46bc:	00000000 	andeq	r0, r0, r0
    46c0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    46c4:	40000043 	andmi	r0, r0, r3, asr #32
    46c8:	01000043 	tsteq	r0, r3, asr #32
    46cc:	43405000 	movtmi	r5, #0
    46d0:	434c0000 	movtmi	r0, #49152	; 0xc000
    46d4:	00040000 	andeq	r0, r4, r0
    46d8:	9f5001f3 	svcls	0x005001f3
	...
    46e4:	00004338 	andeq	r4, r0, r8, lsr r3
    46e8:	00004346 	andeq	r4, r0, r6, asr #6
    46ec:	9f300002 	svcls	0x00300002
    46f0:	00004346 	andeq	r4, r0, r6, asr #6
    46f4:	0000434c 	andeq	r4, r0, ip, asr #6
    46f8:	00500001 	subseq	r0, r0, r1
    46fc:	00000000 	andeq	r0, r0, r0
    4700:	3a000000 	bcc	4708 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xbc>
    4704:	40000043 	andmi	r0, r0, r3, asr #32
    4708:	01000043 	tsteq	r0, r3, asr #32
    470c:	43405000 	movtmi	r5, #0
    4710:	434c0000 	movtmi	r0, #49152	; 0xc000
    4714:	00040000 	andeq	r0, r4, r0
    4718:	9f5001f3 	svcls	0x005001f3
	...
    4724:	00004344 	andeq	r4, r0, r4, asr #6
    4728:	00004346 	andeq	r4, r0, r6, asr #6
    472c:	00500001 	subseq	r0, r0, r1
    4730:	00000000 	andeq	r0, r0, r0
    4734:	4c000000 	stcmi	0, cr0, [r0], {-0}
    4738:	54000043 	strpl	r0, [r0], #-67	; 0xffffffbd
    473c:	01000043 	tsteq	r0, r3, asr #32
    4740:	43545000 	cmpmi	r4, #0
    4744:	43600000 	cmnmi	r0, #0
    4748:	00040000 	andeq	r0, r4, r0
    474c:	9f5001f3 	svcls	0x005001f3
	...
    4758:	0000434c 	andeq	r4, r0, ip, asr #6
    475c:	0000435a 	andeq	r4, r0, sl, asr r3
    4760:	9f300002 	svcls	0x00300002
    4764:	0000435a 	andeq	r4, r0, sl, asr r3
    4768:	00004360 	andeq	r4, r0, r0, ror #6
    476c:	00500001 	subseq	r0, r0, r1
    4770:	00000000 	andeq	r0, r0, r0
    4774:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    4778:	54000043 	strpl	r0, [r0], #-67	; 0xffffffbd
    477c:	01000043 	tsteq	r0, r3, asr #32
    4780:	43545000 	cmpmi	r4, #0
    4784:	43600000 	cmnmi	r0, #0
    4788:	00040000 	andeq	r0, r4, r0
    478c:	9f5001f3 	svcls	0x005001f3
	...
    4798:	00004358 	andeq	r4, r0, r8, asr r3
    479c:	0000435a 	andeq	r4, r0, sl, asr r3
    47a0:	00500001 	subseq	r0, r0, r1
    47a4:	00000000 	andeq	r0, r0, r0
    47a8:	60000000 	andvs	r0, r0, r0
    47ac:	66000043 	strvs	r0, [r0], -r3, asr #32
    47b0:	01000043 	tsteq	r0, r3, asr #32
    47b4:	43665000 	cmnmi	r6, #0
    47b8:	44500000 	ldrbmi	r0, [r0], #-0
    47bc:	00010000 	andeq	r0, r1, r0
    47c0:	00445055 	subeq	r5, r4, r5, asr r0
    47c4:	00447000 	subeq	r7, r4, r0
    47c8:	f3000400 	vshl.u8	d0, d0, d0
    47cc:	009f5001 	addseq	r5, pc, r1
    47d0:	00000000 	andeq	r0, r0, r0
    47d4:	60000000 	andvs	r0, r0, r0
    47d8:	69000043 	stmdbvs	r0, {r0, r1, r6}
    47dc:	01000043 	tsteq	r0, r3, asr #32
    47e0:	43695100 	cmnmi	r9, #0, 2
    47e4:	44700000 	ldrbtmi	r0, [r0], #-0
    47e8:	00040000 	andeq	r0, r4, r0
    47ec:	9f5101f3 	svcls	0x005101f3
	...
    47f8:	0000436e 	andeq	r4, r0, lr, ror #6
    47fc:	00004372 	andeq	r4, r0, r2, ror r3
    4800:	72500001 	subsvc	r0, r0, #1
    4804:	75000043 	strvc	r0, [r0, #-67]	; 0xffffffbd
    4808:	01000043 	tsteq	r0, r3, asr #32
    480c:	437a5200 	cmnmi	sl, #0, 4
    4810:	437e0000 	cmnmi	lr, #0
    4814:	00010000 	andeq	r0, r1, r0
    4818:	0043a850 	subeq	sl, r3, r0, asr r8
    481c:	0043aa00 	subeq	sl, r3, r0, lsl #20
    4820:	50000100 	andpl	r0, r0, r0, lsl #2
    4824:	000043aa 	andeq	r4, r0, sl, lsr #7
    4828:	000043ad 	andeq	r4, r0, sp, lsr #7
    482c:	b6520001 	ldrblt	r0, [r2], -r1
    4830:	b8000043 	stmdalt	r0, {r0, r1, r6}
    4834:	01000043 	tsteq	r0, r3, asr #32
    4838:	43b85000 			; <UNDEFINED> instruction: 0x43b85000
    483c:	43bb0000 			; <UNDEFINED> instruction: 0x43bb0000
    4840:	00010000 	andeq	r0, r1, r0
    4844:	0043c652 	subeq	ip, r3, r2, asr r6
    4848:	0043c800 	subeq	ip, r3, r0, lsl #16
    484c:	50000100 	andpl	r0, r0, r0, lsl #2
    4850:	000043c8 	andeq	r4, r0, r8, asr #7
    4854:	000043cb 	andeq	r4, r0, fp, asr #7
    4858:	d2520001 	subsle	r0, r2, #1
    485c:	d4000043 	strle	r0, [r0], #-67	; 0xffffffbd
    4860:	01000043 	tsteq	r0, r3, asr #32
    4864:	43e45000 	mvnmi	r5, #0
    4868:	43e80000 	mvnmi	r0, #0
    486c:	00010000 	andeq	r0, r1, r0
    4870:	0043f650 	subeq	pc, r3, r0, asr r6	; <UNPREDICTABLE>
    4874:	0043f800 	subeq	pc, r3, r0, lsl #16
    4878:	50000100 	andpl	r0, r0, r0, lsl #2
    487c:	000043f8 	strdeq	r4, [r0], -r8
    4880:	000043fb 	strdeq	r4, [r0], -fp
    4884:	02520001 	subseq	r0, r2, #1
    4888:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
    488c:	01000044 	tsteq	r0, r4, asr #32
    4890:	44145000 	ldrmi	r5, [r4], #-0
    4894:	44160000 	ldrmi	r0, [r6], #-0
    4898:	00010000 	andeq	r0, r1, r0
    489c:	00442650 	subeq	r2, r4, r0, asr r6
    48a0:	00442a00 	subeq	r2, r4, r0, lsl #20
    48a4:	50000100 	andpl	r0, r0, r0, lsl #2
    48a8:	0000443e 	andeq	r4, r0, lr, lsr r4
    48ac:	00004440 	andeq	r4, r0, r0, asr #8
    48b0:	40500001 	subsmi	r0, r0, r1
    48b4:	43000044 	movwmi	r0, #68	; 0x44
    48b8:	01000044 	tsteq	r0, r4, asr #32
    48bc:	00005200 	andeq	r5, r0, r0, lsl #4
    48c0:	00000000 	andeq	r0, r0, r0
    48c4:	43960000 	orrsmi	r0, r6, #0
    48c8:	439c0000 	orrsmi	r0, ip, #0
    48cc:	00070000 	andeq	r0, r7, r0
    48d0:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    48d4:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    48d8:	00000000 	andeq	r0, r0, r0
    48dc:	8a000000 	bhi	48e4 <NOROM_ChipInfo_GetChipFamily>
    48e0:	94000044 	strls	r0, [r0], #-68	; 0xffffffbc
    48e4:	09000044 	stmdbeq	r0, {r2, r6}
    48e8:	0c007300 	stceq	3, cr7, [r0], {-0}
    48ec:	20000004 	andcs	r0, r0, r4
    48f0:	00009f21 	andeq	r9, r0, r1, lsr #30
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	44d40000 	ldrbmi	r0, [r4], #0
    48fc:	44dc0000 	ldrbmi	r0, [ip], #0
    4900:	00010000 	andeq	r0, r1, r0
    4904:	0044dc50 	subeq	sp, r4, r0, asr ip
    4908:	0044fc00 	subeq	pc, r4, r0, lsl #24
    490c:	f3000400 	vshl.u8	d0, d0, d0
    4910:	009f5001 	addseq	r5, pc, r1
    4914:	00000000 	andeq	r0, r0, r0
    4918:	fc000000 	stc2	0, cr0, [r0], {-0}
    491c:	24000044 	strcs	r0, [r0], #-68	; 0xffffffbc
    4920:	01000045 	tsteq	r0, r5, asr #32
    4924:	45245000 	strmi	r5, [r4, #-0]!
    4928:	45640000 	strbmi	r0, [r4, #-0]!
    492c:	00010000 	andeq	r0, r1, r0
    4930:	00456454 	subeq	r6, r5, r4, asr r4
    4934:	00456c00 	subeq	r6, r5, r0, lsl #24
    4938:	50000100 	andpl	r0, r0, r0, lsl #2
    493c:	0000456c 	andeq	r4, r0, ip, ror #10
    4940:	000045b6 			; <UNDEFINED> instruction: 0x000045b6
    4944:	b6540001 	ldrblt	r0, [r4], -r1
    4948:	f2000045 	vhadd.s8	q0, q0, <illegal reg q2.5>
    494c:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
    4950:	5001f300 	andpl	pc, r1, r0, lsl #6
    4954:	0045f29f 	umaaleq	pc, r5, pc, r2	; <UNPREDICTABLE>
    4958:	0045f600 	subeq	pc, r5, r0, lsl #12
    495c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4960:	000045f6 	strdeq	r4, [r0], -r6
    4964:	0000464c 	andeq	r4, r0, ip, asr #12
    4968:	01f30004 	mvnseq	r0, r4
    496c:	00009f50 	andeq	r9, r0, r0, asr pc
    4970:	00000000 	andeq	r0, r0, r0
    4974:	45120000 	ldrmi	r0, [r2, #-0]
    4978:	45540000 	ldrbmi	r0, [r4, #-0]
    497c:	00010000 	andeq	r0, r1, r0
    4980:	00000053 	andeq	r0, r0, r3, asr r0
    4984:	00000000 	andeq	r0, r0, r0
    4988:	00458600 	subeq	r8, r5, r0, lsl #12
    498c:	00458c00 	subeq	r8, r5, r0, lsl #24
    4990:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    499c:	000045b6 			; <UNDEFINED> instruction: 0x000045b6
    49a0:	000045b8 			; <UNDEFINED> instruction: 0x000045b8
    49a4:	b8500001 	ldmdalt	r0, {r0}^
    49a8:	cc000045 	stcgt	0, cr0, [r0], {69}	; 0x45
    49ac:	01000045 	tsteq	r0, r5, asr #32
    49b0:	00005400 	andeq	r5, r0, r0, lsl #8
    49b4:	00000000 	andeq	r0, r0, r0
    49b8:	45cc0000 	strbmi	r0, [ip]
    49bc:	45ec0000 	strbmi	r0, [ip, #0]!
    49c0:	00010000 	andeq	r0, r1, r0
    49c4:	00000054 	andeq	r0, r0, r4, asr r0
	...
    49d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    49e0:	7f750003 	svcvc	0x00750003
    49e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    49e8:	00000000 	andeq	r0, r0, r0
    49ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    49f8:	0000464c 	andeq	r4, r0, ip, asr #12
    49fc:	0000466b 	andeq	r4, r0, fp, ror #12
    4a00:	6b500001 	blvs	1404a0c <__ccfg+0x13e4a64>
    4a04:	2c000046 	stccs	0, cr0, [r0], {70}	; 0x46
    4a08:	01000047 	tsteq	r0, r7, asr #32
    4a0c:	472c5700 	strmi	r5, [ip, -r0, lsl #14]!
    4a10:	486c0000 	stmdami	ip!, {}^	; <UNPREDICTABLE>
    4a14:	00040000 	andeq	r0, r4, r0
    4a18:	9f5001f3 	svcls	0x005001f3
	...
    4a24:	0000466c 	andeq	r4, r0, ip, ror #12
    4a28:	000047ec 	andeq	r4, r0, ip, ror #15
    4a2c:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    4a30:	28000047 	stmdacs	r0, {r0, r1, r2, r6}
    4a34:	01000048 	tsteq	r0, r8, asr #32
    4a38:	00005000 	andeq	r5, r0, r0
    4a3c:	00000000 	andeq	r0, r0, r0
    4a40:	47140000 	ldrmi	r0, [r4, -r0]
    4a44:	47180000 	ldrmi	r0, [r8, -r0]
    4a48:	00030000 	andeq	r0, r3, r0
    4a4c:	189f7170 	ldmne	pc, {r4, r5, r6, r8, ip, sp, lr}	; <UNPREDICTABLE>
    4a50:	1e000047 	cdpne	0, 0, cr0, cr0, cr7, {2}
    4a54:	01000047 	tsteq	r0, r7, asr #32
    4a58:	471e5100 	ldrmi	r5, [lr, -r0, lsl #2]
    4a5c:	473e0000 	ldrmi	r0, [lr, -r0]!
    4a60:	00020000 	andeq	r0, r2, r0
    4a64:	473e5491 			; <UNDEFINED> instruction: 0x473e5491
    4a68:	474a0000 	strbmi	r0, [sl, -r0]
    4a6c:	00010000 	andeq	r0, r1, r0
    4a70:	00474a51 	subeq	r4, r7, r1, asr sl
    4a74:	00474c00 	subeq	r4, r7, r0, lsl #24
    4a78:	91000200 	mrsls	r0, R8_usr
    4a7c:	00474c54 	subeq	r4, r7, r4, asr ip
    4a80:	00474e00 	subeq	r4, r7, r0, lsl #28
    4a84:	51000100 	mrspl	r0, (UNDEF: 16)
    4a88:	0000474e 	andeq	r4, r0, lr, asr #14
    4a8c:	000047f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4a90:	54910002 	ldrpl	r0, [r1], #2
	...
    4a9c:	00004678 	andeq	r4, r0, r8, ror r6
    4aa0:	000046d2 	ldrdeq	r4, [r0], -r2
    4aa4:	da510001 	ble	1444ab0 <__ccfg+0x1424b08>
    4aa8:	dc000046 	stcle	0, cr0, [r0], {70}	; 0x46
    4aac:	01000046 	tsteq	r0, r6, asr #32
    4ab0:	00005100 	andeq	r5, r0, r0, lsl #2
    4ab4:	00000000 	andeq	r0, r0, r0
    4ab8:	46ca0000 	strbmi	r0, [sl], r0
    4abc:	46d80000 	ldrbmi	r0, [r8], r0
    4ac0:	00010000 	andeq	r0, r1, r0
    4ac4:	0046da52 	subeq	sp, r6, r2, asr sl
    4ac8:	0047bc00 	subeq	fp, r7, r0, lsl #24
    4acc:	52000100 	andpl	r0, r0, #0, 2
	...
    4ad8:	000046ca 	andeq	r4, r0, sl, asr #13
    4adc:	000047b2 			; <UNDEFINED> instruction: 0x000047b2
    4ae0:	00530001 	subseq	r0, r3, r1
    4ae4:	00000000 	andeq	r0, r0, r0
    4ae8:	70000000 	andvc	r0, r0, r0
    4aec:	c6000046 	strgt	r0, [r0], -r6, asr #32
    4af0:	01000047 	tsteq	r0, r7, asr #32
    4af4:	00005500 	andeq	r5, r0, r0, lsl #10
    4af8:	00000000 	andeq	r0, r0, r0
    4afc:	466c0000 	strbtmi	r0, [ip], -r0
    4b00:	46f40000 	ldrbtmi	r0, [r4], r0
    4b04:	00020000 	andeq	r0, r2, r0
    4b08:	46f49f30 			; <UNDEFINED> instruction: 0x46f49f30
    4b0c:	48280000 	stmdami	r8!, {}	; <UNPREDICTABLE>
    4b10:	00010000 	andeq	r0, r1, r0
    4b14:	00000054 	andeq	r0, r0, r4, asr r0
    4b18:	00000000 	andeq	r0, r0, r0
    4b1c:	0046ec00 	subeq	lr, r6, r0, lsl #24
    4b20:	0046f600 	subeq	pc, r6, r0, lsl #12
    4b24:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4b30:	00004714 	andeq	r4, r0, r4, lsl r7
    4b34:	00004764 	andeq	r4, r0, r4, ror #14
    4b38:	9f300002 	svcls	0x00300002
    4b3c:	00004764 	andeq	r4, r0, r4, ror #14
    4b40:	00004784 	andeq	r4, r0, r4, lsl #15
    4b44:	84510001 	ldrbhi	r0, [r1], #-1
    4b48:	8a000047 	bhi	4c6c <__aeabi_lmul+0x190>
    4b4c:	02000047 	andeq	r0, r0, #71	; 0x47
    4b50:	8a9f3000 	bhi	fe7d0b58 <_estack+0xde7cbb58>
    4b54:	c4000047 	strgt	r0, [r0], #-71	; 0xffffffb9
    4b58:	01000047 	tsteq	r0, r7, asr #32
    4b5c:	00005100 	andeq	r5, r0, r0, lsl #2
    4b60:	00000000 	andeq	r0, r0, r0
    4b64:	47400000 	strbmi	r0, [r0, -r0]
    4b68:	47440000 	strbmi	r0, [r4, -r0]
    4b6c:	00010000 	andeq	r0, r1, r0
    4b70:	00474c5e 	subeq	r4, r7, lr, asr ip
    4b74:	00474e00 	subeq	r4, r7, r0, lsl #28
    4b78:	5e000100 	adfpls	f0, f0, f0
    4b7c:	0000474e 	andeq	r4, r0, lr, asr #14
    4b80:	00004754 	andeq	r4, r0, r4, asr r7
    4b84:	54510001 	ldrbpl	r0, [r1], #-1
    4b88:	5c000047 	stcpl	0, cr0, [r0], {71}	; 0x47
    4b8c:	03000047 	movweq	r0, #71	; 0x47
    4b90:	9f7f7100 	svcls	0x007f7100
	...
    4b9c:	00004714 	andeq	r4, r0, r4, lsl r7
    4ba0:	0000473e 	andeq	r4, r0, lr, lsr r7
    4ba4:	9f300002 	svcls	0x00300002
    4ba8:	0000473e 	andeq	r4, r0, lr, lsr r7
    4bac:	00004748 	andeq	r4, r0, r8, asr #14
    4bb0:	485e0001 	ldmdami	lr, {r0}^
    4bb4:	4a000047 	bmi	4cd8 <__aeabi_lmul+0x1fc>
    4bb8:	05000047 	streq	r0, [r0, #-71]	; 0xffffffb9
    4bbc:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    4bc0:	474a9f26 	strbmi	r9, [sl, -r6, lsr #30]
    4bc4:	474c0000 	strbmi	r0, [ip, -r0]
    4bc8:	00060000 	andeq	r0, r6, r0
    4bcc:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    4bd0:	474c9f26 	strbmi	r9, [ip, -r6, lsr #30]
    4bd4:	474e0000 	strbmi	r0, [lr, -r0]
    4bd8:	00010000 	andeq	r0, r1, r0
    4bdc:	00474e5e 	subeq	r4, r7, lr, asr lr
    4be0:	00478400 	subeq	r8, r7, r0, lsl #8
    4be4:	91000600 	tstls	r0, r0, lsl #12
    4be8:	26380654 			; <UNDEFINED> instruction: 0x26380654
    4bec:	0047849f 	umaaleq	r8, r7, pc, r4	; <UNPREDICTABLE>
    4bf0:	00478a00 	subeq	r8, r7, r0, lsl #20
    4bf4:	30000200 	andcc	r0, r0, r0, lsl #4
    4bf8:	00478a9f 	umaaleq	r8, r7, pc, sl	; <UNPREDICTABLE>
    4bfc:	0047f400 	subeq	pc, r7, r0, lsl #8
    4c00:	5e000100 	adfpls	f0, f0, f0
	...
    4c0c:	00004760 	andeq	r4, r0, r0, ror #14
    4c10:	00004784 	andeq	r4, r0, r4, lsl #15
    4c14:	005c0001 	subseq	r0, ip, r1
    4c18:	00000000 	andeq	r0, r0, r0
    4c1c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    4c20:	f4000047 	vst4.16	{d0-d3}, [r0], r7
    4c24:	01000047 	tsteq	r0, r7, asr #32
    4c28:	00005a00 	andeq	r5, r0, r0, lsl #20
    4c2c:	00000000 	andeq	r0, r0, r0
    4c30:	47920000 	ldrmi	r0, [r2, r0]
    4c34:	47ce0000 	strbmi	r0, [lr, r0]
    4c38:	00010000 	andeq	r0, r1, r0
    4c3c:	0047ce5c 	subeq	ip, r7, ip, asr lr
    4c40:	0047d200 	subeq	sp, r7, r0, lsl #4
    4c44:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4c50:	000047d2 	ldrdeq	r4, [r0], -r2
    4c54:	000047dc 	ldrdeq	r4, [r0], -ip
    4c58:	00710017 	rsbseq	r0, r1, r7, lsl r0
    4c5c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4c60:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    4c64:	4b401416 	blmi	1009cc4 <__ccfg+0xfe9d1c>
    4c68:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    4c6c:	13160001 	tstne	r6, #1
    4c70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c74:	00000000 	andeq	r0, r0, r0
    4c78:	0047fc00 	subeq	pc, r7, r0, lsl #24
    4c7c:	00480800 	subeq	r0, r8, r0, lsl #16
    4c80:	30000200 	andcc	r0, r0, r0, lsl #4
    4c84:	0048089f 	umaaleq	r0, r8, pc, r8	; <UNPREDICTABLE>
    4c88:	00482800 	subeq	r2, r8, r0, lsl #16
    4c8c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4c98:	000047fe 	strdeq	r4, [r0], -lr
    4c9c:	00004800 	andeq	r4, r0, r0, lsl #16
    4ca0:	00530001 	subseq	r0, r3, r1
    4ca4:	08000048 	stmdaeq	r0, {r3, r6}
    4ca8:	02000048 	andeq	r0, r0, #72	; 0x48
    4cac:	089f4f00 	ldmeq	pc, {r8, r9, sl, fp, lr}	; <UNPREDICTABLE>
    4cb0:	18000048 	stmdane	r0, {r3, r6}
    4cb4:	01000048 	tsteq	r0, r8, asr #32
    4cb8:	48185300 	ldmdami	r8, {r8, r9, ip, lr}
    4cbc:	481c0000 	ldmdami	ip, {}	; <UNPREDICTABLE>
    4cc0:	00050000 	andeq	r0, r5, r0
    4cc4:	25340073 	ldrcs	r0, [r4, #-115]!	; 0xffffff8d
    4cc8:	00481c9f 	umaaleq	r1, r8, pc, ip	; <UNPREDICTABLE>
    4ccc:	00482000 	subeq	r2, r8, r0
    4cd0:	53000100 	movwpl	r0, #256	; 0x100
	...
    4cdc:	00004714 	andeq	r4, r0, r4, lsl r7
    4ce0:	000047f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4ce4:	9c0c0006 	stcls	0, cr0, [ip], {6}
    4ce8:	9f500013 	svcls	0x00500013
	...
    4cf4:	00004680 	andeq	r4, r0, r0, lsl #13
    4cf8:	0000468c 	andeq	r4, r0, ip, lsl #13
    4cfc:	00530001 	subseq	r0, r3, r1
    4d00:	00000000 	andeq	r0, r0, r0
    4d04:	a0000000 	andge	r0, r0, r0
    4d08:	ac000046 	stcge	0, cr0, [r0], {70}	; 0x46
    4d0c:	01000046 	tsteq	r0, r6, asr #32
    4d10:	00005200 	andeq	r5, r0, r0, lsl #4
    4d14:	00000000 	andeq	r0, r0, r0
    4d18:	46b60000 	ldrtmi	r0, [r6], r0
    4d1c:	46c20000 	strbmi	r0, [r2], r0
    4d20:	00010000 	andeq	r0, r1, r0
    4d24:	00000052 	andeq	r0, r0, r2, asr r0
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	0046c200 	subeq	ip, r6, r0, lsl #4
    4d30:	0047b200 	subeq	fp, r7, r0, lsl #4
    4d34:	53000100 	movwpl	r0, #256	; 0x100
	...
    4d40:	0000487a 	andeq	r4, r0, sl, ror r8
    4d44:	00004884 	andeq	r4, r0, r4, lsl #17
    4d48:	84500001 	ldrbhi	r0, [r0], #-1
    4d4c:	8e000048 	cdphi	0, 0, cr0, cr0, cr8, {2}
    4d50:	0e000048 	cdpeq	0, 0, cr0, cr0, cr8, {2}
    4d54:	12007000 	andne	r7, r0, #0
    4d58:	14168009 	ldrne	r8, [r6], #-9
    4d5c:	0001282b 	andeq	r2, r1, fp, lsr #16
    4d60:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4d64:	00000000 	andeq	r0, r0, r0
    4d68:	74000000 	strvc	r0, [r0], #-0
    4d6c:	a0000048 	andge	r0, r0, r8, asr #32
    4d70:	01000048 	tsteq	r0, r8, asr #32
    4d74:	00005400 	andeq	r5, r0, r0, lsl #8
    4d78:	00000000 	andeq	r0, r0, r0
    4d7c:	48a40000 	stmiami	r4!, {}	; <UNPREDICTABLE>
    4d80:	48aa0000 	stmiami	sl!, {}	; <UNPREDICTABLE>
    4d84:	00150000 	andseq	r0, r5, r0
    4d88:	40120073 	andsmi	r0, r2, r3, ror r0
    4d8c:	4f22244b 	svcmi	0x0022244b
    4d90:	4b401416 	blmi	1009df0 <__ccfg+0xfe9e48>
    4d94:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    4d98:	13160001 	tstne	r6, #1
    4d9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4da0:	00000000 	andeq	r0, r0, r0
    4da4:	0048b000 	subeq	fp, r8, r0
    4da8:	0048ba00 	subeq	fp, r8, r0, lsl #20
    4dac:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    4db0:	4b401200 	blmi	10095b8 <__ccfg+0xfe9610>
    4db4:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    4db8:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    4dbc:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4dc0:	16000128 	strne	r0, [r0], -r8, lsr #2
    4dc4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4dd4:	00010000 	andeq	r0, r1, r0
    4dd8:	00000052 	andeq	r0, r0, r2, asr r0
	...
    4de8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4dfc:	00510001 	subseq	r0, r1, r1
	...
    4e0c:	01000000 	mrseq	r0, (UNDEF: 0)
    4e10:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    4e20:	00160000 	andseq	r0, r6, r0
    4e24:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    4e28:	4b400070 	blmi	1004ff0 <__ccfg+0xfe5048>
    4e2c:	050c2224 	streq	r2, [ip, #-548]	; 0xfffffddc
    4e30:	2d800000 	stccs	0, cr0, [r0]
    4e34:	16000128 	strne	r0, [r0], -r8, lsr #2
    4e38:	00009f13 	andeq	r9, r0, r3, lsl pc
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	48e40000 	stmiami	r4!, {}^	; <UNPREDICTABLE>
    4e44:	49260000 	stmdbmi	r6!, {}	; <UNPREDICTABLE>
    4e48:	00030000 	andeq	r0, r3, r0
    4e4c:	269fff09 	ldrcs	pc, [pc], r9, lsl #30
    4e50:	30000049 	andcc	r0, r0, r9, asr #32
    4e54:	01000049 	tsteq	r0, r9, asr #32
    4e58:	00005000 	andeq	r5, r0, r0
    4e5c:	00000000 	andeq	r0, r0, r0
    4e60:	48f00000 	ldmmi	r0!, {}^	; <UNPREDICTABLE>
    4e64:	48fe0000 	ldmmi	lr!, {}^	; <UNPREDICTABLE>
    4e68:	00010000 	andeq	r0, r1, r0
    4e6c:	00490250 	subeq	r0, r9, r0, asr r2
    4e70:	00491e00 	subeq	r1, r9, r0, lsl #28
    4e74:	50000100 	andpl	r0, r0, r0, lsl #2
    4e78:	00004920 	andeq	r4, r0, r0, lsr #18
    4e7c:	00004922 	andeq	r4, r0, r2, lsr #18
    4e80:	24500001 	ldrbcs	r0, [r0], #-1
    4e84:	26000049 	strcs	r0, [r0], -r9, asr #32
    4e88:	01000049 	tsteq	r0, r9, asr #32
    4e8c:	00005000 	andeq	r5, r0, r0
	...
    4e9c:	00030000 	andeq	r0, r3, r0
    4ea0:	009fff09 	addseq	pc, pc, r9, lsl #30
    4ea4:	00000000 	andeq	r0, r0, r0
    4ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    4eac:	00005000 	andeq	r5, r0, r0
	...
    4ebc:	00010000 	andeq	r0, r1, r0
    4ec0:	00000054 	andeq	r0, r0, r4, asr r0
    4ec4:	00000000 	andeq	r0, r0, r0
    4ec8:	00493000 	subeq	r3, r9, r0
    4ecc:	00496a00 	subeq	r6, r9, r0, lsl #20
    4ed0:	09000300 	stmdbeq	r0, {r8, r9}
    4ed4:	496a9fff 	stmdbmi	sl!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    4ed8:	496e0000 	stmdbmi	lr!, {}^	; <UNPREDICTABLE>
    4edc:	00020000 	andeq	r0, r2, r0
    4ee0:	496e9f44 	stmdbmi	lr!, {r2, r6, r8, r9, sl, fp, ip, pc}^
    4ee4:	49720000 	ldmdbmi	r2!, {}^	; <UNPREDICTABLE>
    4ee8:	00020000 	andeq	r0, r2, r0
    4eec:	49729f45 	ldmdbmi	r2!, {r0, r2, r6, r8, r9, sl, fp, ip, pc}^
    4ef0:	49900000 	ldmibmi	r0, {}	; <UNPREDICTABLE>
    4ef4:	00030000 	andeq	r0, r3, r0
    4ef8:	909fff09 	addsls	pc, pc, r9, lsl #30
    4efc:	92000049 	andls	r0, r0, #73	; 0x49
    4f00:	01000049 	tsteq	r0, r9, asr #32
    4f04:	49925000 	ldmibmi	r2, {ip, lr}
    4f08:	49940000 	ldmibmi	r4, {}	; <UNPREDICTABLE>
    4f0c:	00030000 	andeq	r0, r3, r0
    4f10:	949fff09 	ldrls	pc, [pc], #3849	; 4f18 <__aeabi_lmul+0x43c>
    4f14:	9c000049 	stcls	0, cr0, [r0], {73}	; 0x49
    4f18:	01000049 	tsteq	r0, r9, asr #32
    4f1c:	00005000 	andeq	r5, r0, r0
    4f20:	00000000 	andeq	r0, r0, r0
    4f24:	49400000 	stmdbmi	r0, {}^	; <UNPREDICTABLE>
    4f28:	49980000 	ldmibmi	r8, {}	; <UNPREDICTABLE>
    4f2c:	00010000 	andeq	r0, r1, r0
    4f30:	00000054 	andeq	r0, r0, r4, asr r0
    4f34:	00000000 	andeq	r0, r0, r0
    4f38:	0049b400 	subeq	fp, r9, r0, lsl #8
    4f3c:	0049bd00 	subeq	fp, r9, r0, lsl #26
    4f40:	50000100 	andpl	r0, r0, r0, lsl #2
    4f44:	000049bd 			; <UNDEFINED> instruction: 0x000049bd
    4f48:	000049d2 	ldrdeq	r4, [r0], -r2
    4f4c:	d2540001 	subsle	r0, r4, #1
    4f50:	d6000049 	strle	r0, [r0], -r9, asr #32
    4f54:	04000049 	streq	r0, [r0], #-73	; 0xffffffb7
    4f58:	5001f300 	andpl	pc, r1, r0, lsl #6
    4f5c:	0049d69f 	umaaleq	sp, r9, pc, r6	; <UNPREDICTABLE>
    4f60:	0049d800 	subeq	sp, r9, r0, lsl #16
    4f64:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4f68:	000049d8 	ldrdeq	r4, [r0], -r8
    4f6c:	000049dc 	ldrdeq	r4, [r0], -ip
    4f70:	01f30004 	mvnseq	r0, r4
    4f74:	00009f50 	andeq	r9, r0, r0, asr pc
    4f78:	00000000 	andeq	r0, r0, r0
    4f7c:	49b40000 	ldmibmi	r4!, {}	; <UNPREDICTABLE>
    4f80:	49bd0000 	ldmibmi	sp!, {}	; <UNPREDICTABLE>
    4f84:	00010000 	andeq	r0, r1, r0
    4f88:	0049bd51 	subeq	fp, r9, r1, asr sp
    4f8c:	0049d200 	subeq	sp, r9, r0, lsl #4
    4f90:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4f94:	000049d2 	ldrdeq	r4, [r0], -r2
    4f98:	000049d6 	ldrdeq	r4, [r0], -r6
    4f9c:	01f30004 	mvnseq	r0, r4
    4fa0:	49d69f51 	ldmibmi	r6, {r0, r4, r6, r8, r9, sl, fp, ip, pc}^
    4fa4:	49d80000 	ldmibmi	r8, {}^	; <UNPREDICTABLE>
    4fa8:	00010000 	andeq	r0, r1, r0
    4fac:	0049d855 	subeq	sp, r9, r5, asr r8
    4fb0:	0049dc00 	subeq	sp, r9, r0, lsl #24
    4fb4:	f3000400 	vshl.u8	d0, d0, d0
    4fb8:	009f5101 	addseq	r5, pc, r1, lsl #2
    4fbc:	00000000 	andeq	r0, r0, r0
    4fc0:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    4fc4:	d5000049 	strle	r0, [r0, #-73]	; 0xffffffb7
    4fc8:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
    4fcc:	30007000 	andcc	r7, r0, r0
    4fd0:	49d69f29 	ldmibmi	r6, {r0, r3, r5, r8, r9, sl, fp, ip, pc}^
    4fd4:	49dc0000 	ldmibmi	ip, {}^	; <UNPREDICTABLE>
    4fd8:	00050000 	andeq	r0, r5, r0
    4fdc:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4fe0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4fe4:	00000000 	andeq	r0, r0, r0
    4fe8:	0049dc00 	subeq	sp, r9, r0, lsl #24
    4fec:	0049de00 	subeq	sp, r9, r0, lsl #28
    4ff0:	50000100 	andpl	r0, r0, r0, lsl #2
    4ff4:	000049de 	ldrdeq	r4, [r0], -lr
    4ff8:	000049e4 	andeq	r4, r0, r4, ror #19
    4ffc:	01f30004 	mvnseq	r0, r4
    5000:	00009f50 	andeq	r9, r0, r0, asr pc
    5004:	00000000 	andeq	r0, r0, r0
    5008:	49dc0000 	ldmibmi	ip, {}^	; <UNPREDICTABLE>
    500c:	49e00000 	stmibmi	r0!, {}^	; <UNPREDICTABLE>
    5010:	00010000 	andeq	r0, r1, r0
    5014:	0049e051 	subeq	lr, r9, r1, asr r0
    5018:	0049e400 	subeq	lr, r9, r0, lsl #8
    501c:	f3000400 	vshl.u8	d0, d0, d0
    5020:	009f5101 	addseq	r5, pc, r1, lsl #2
    5024:	00000000 	andeq	r0, r0, r0
    5028:	dc000000 	stcle	0, cr0, [r0], {-0}
    502c:	e3000049 	movw	r0, #73	; 0x49
    5030:	01000049 	tsteq	r0, r9, asr #32
    5034:	49e35200 	stmibmi	r3!, {r9, ip, lr}^
    5038:	49e40000 	stmibmi	r4!, {}^	; <UNPREDICTABLE>
    503c:	00040000 	andeq	r0, r4, r0
    5040:	9f5201f3 	svcls	0x005201f3
	...
    5054:	00500001 	subseq	r0, r0, r1
    5058:	00000000 	andeq	r0, r0, r0
    505c:	04000000 	streq	r0, [r0], #-0
    5060:	5001f300 	andpl	pc, r1, r0, lsl #6
    5064:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5074:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5080:	01f30004 	mvnseq	r0, r4
    5084:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5094:	00010000 	andeq	r0, r1, r0
    5098:	00000052 	andeq	r0, r0, r2, asr r0
    509c:	00000000 	andeq	r0, r0, r0
    50a0:	f3000400 	vshl.u8	d0, d0, d0
    50a4:	009f5201 	addseq	r5, pc, r1, lsl #4
    50a8:	00000000 	andeq	r0, r0, r0
    50ac:	01000000 	mrseq	r0, (UNDEF: 0)
    50b0:	00005200 	andeq	r5, r0, r0, lsl #4
    50b4:	00000000 	andeq	r0, r0, r0
    50b8:	00150000 	andseq	r0, r5, r0
    50bc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50c0:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    50c4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50c8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    50cc:	13160001 	tstne	r6, #1
    50d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    50e0:	53000100 	movwpl	r0, #256	; 0x100
	...
    50ec:	01f30004 	mvnseq	r0, r4
    50f0:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    5100:	00040000 	andeq	r0, r4, r0
    5104:	9f048070 	svcls	0x00048070
	...
    5110:	01f3000d 	mvnseq	r0, sp
    5114:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5118:	23225001 			; <UNDEFINED> instruction: 0x23225001
    511c:	009f0480 	addseq	r0, pc, r0, lsl #9
    5120:	00000000 	andeq	r0, r0, r0
    5124:	01000000 	mrseq	r0, (UNDEF: 0)
    5128:	00005000 	andeq	r5, r0, r0
    512c:	00000000 	andeq	r0, r0, r0
    5130:	00520000 	subseq	r0, r2, r0
    5134:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5138:	5001f324 	andpl	pc, r1, r4, lsr #6
    513c:	04802322 	streq	r2, [r0], #802	; 0x322
    5140:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5144:	5001f324 	andpl	pc, r1, r4, lsr #6
    5148:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    514c:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    5150:	16000128 	strne	r0, [r0], -r8, lsr #2
    5154:	04842313 	streq	r2, [r4], #787	; 0x313
    5158:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    515c:	5001f324 	andpl	pc, r1, r4, lsr #6
    5160:	04802322 	streq	r2, [r0], #802	; 0x322
    5164:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5168:	5001f324 	andpl	pc, r1, r4, lsr #6
    516c:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5170:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    5174:	16000128 	strne	r0, [r0], -r8, lsr #2
    5178:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    517c:	2e302540 	cfneg32cs	mvfx2, mvfx0
    5180:	16000128 	strne	r0, [r0], -r8, lsr #2
    5184:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5194:	00010000 	andeq	r0, r1, r0
    5198:	00000051 	andeq	r0, r0, r1, asr r0
    519c:	00000000 	andeq	r0, r0, r0
    51a0:	30002f00 	andcc	r2, r0, r0, lsl #30
    51a4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    51a8:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    51ac:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    51b0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    51b4:	13160001 	tstne	r6, #1
    51b8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    51bc:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    51c0:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    51c4:	f3131600 	vmax.u16	d1, d3, d0
    51c8:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    51cc:	16000128 	strne	r0, [r0], -r8, lsr #2
    51d0:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    51e0:	00010000 	andeq	r0, r1, r0
    51e4:	00000050 	andeq	r0, r0, r0, asr r0
    51e8:	00000000 	andeq	r0, r0, r0
    51ec:	f3000400 	vshl.u8	d0, d0, d0
    51f0:	009f5001 	addseq	r5, pc, r1
	...
    5200:	01000000 	mrseq	r0, (UNDEF: 0)
    5204:	00005100 	andeq	r5, r0, r0, lsl #2
    5208:	00000000 	andeq	r0, r0, r0
    520c:	00040000 	andeq	r0, r4, r0
    5210:	9f5101f3 	svcls	0x005101f3
	...
    5224:	00520001 	subseq	r0, r2, r1
    5228:	00000000 	andeq	r0, r0, r0
    522c:	04000000 	streq	r0, [r0], #-0
    5230:	5201f300 	andpl	pc, r1, #0, 6
    5234:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5238:	00000000 	andeq	r0, r0, r0
    523c:	52000100 	andpl	r0, r0, #0, 2
	...
    5248:	01f3001b 	mvnseq	r0, fp, lsl r0
    524c:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    5250:	01f35201 	mvnseq	r5, r1, lsl #4
    5254:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5258:	000f0c22 	andeq	r0, pc, r2, lsr #24
    525c:	282b8000 	stmdacs	fp!, {pc}
    5260:	13160001 	tstne	r6, #1
    5264:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5274:	53000100 	movwpl	r0, #256	; 0x100
	...
    5280:	01f30004 	mvnseq	r0, r4
    5284:	00009f53 	andeq	r9, r0, r3, asr pc
    5288:	00000000 	andeq	r0, r0, r0
    528c:	00010000 	andeq	r0, r1, r0
    5290:	00000053 	andeq	r0, r0, r3, asr r0
    5294:	00000000 	andeq	r0, r0, r0
    5298:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    529c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    52a0:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    52a4:	4b405301 	blmi	1019eb0 <__ccfg+0xff9f08>
    52a8:	0f0c2224 	svceq	0x000c2224
    52ac:	2b800000 	blcs	fe0052b4 <_estack+0xde0002b4>
    52b0:	16000128 	strne	r0, [r0], -r8, lsr #2
    52b4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    52c4:	00020000 	andeq	r0, r2, r0
    52c8:	00000091 	muleq	r0, r1, r0
    52cc:	00000000 	andeq	r0, r0, r0
    52d0:	00020000 	andeq	r0, r2, r0
    52d4:	0000007d 	andeq	r0, r0, sp, ror r0
	...
    52e4:	00040000 	andeq	r0, r4, r0
    52e8:	9f048070 	svcls	0x00048070
	...
    52f4:	01f3000d 	mvnseq	r0, sp
    52f8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    52fc:	23225001 			; <UNDEFINED> instruction: 0x23225001
    5300:	009f0480 	addseq	r0, pc, r0, lsl #9
    5304:	00000000 	andeq	r0, r0, r0
    5308:	01000000 	mrseq	r0, (UNDEF: 0)
    530c:	00005000 	andeq	r5, r0, r0
    5310:	00000000 	andeq	r0, r0, r0
    5314:	00640000 	rsbeq	r0, r4, r0
    5318:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    531c:	5001f324 	andpl	pc, r1, r4, lsr #6
    5320:	04802322 	streq	r2, [r0], #802	; 0x322
    5324:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    5328:	5001f324 	andpl	pc, r1, r4, lsr #6
    532c:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5330:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5334:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5338:	01282c80 	smlawbeq	r8, r0, ip, r2
    533c:	23131600 	tstcs	r3, #0, 12
    5340:	01f30484 	mvnseq	r0, r4, lsl #9
    5344:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5348:	23225001 			; <UNDEFINED> instruction: 0x23225001
    534c:	01f30480 	mvnseq	r0, r0, lsl #9
    5350:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    5354:	f3225001 	vhadd.u32	d5, d2, d1
    5358:	4b405301 	blmi	1019f64 <__ccfg+0xff9fbc>
    535c:	0f0c2224 	svceq	0x000c2224
    5360:	2c800000 	stccs	0, cr0, [r0], {0}
    5364:	16000128 	strne	r0, [r0], -r8, lsr #2
    5368:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    536c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5370:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5374:	01282b80 	smlawbeq	r8, r0, fp, r2
    5378:	9f131600 	svcls	0x00131600
	...
    538c:	0074000a 	rsbseq	r0, r4, sl
    5390:	1affff0a 	bne	4fc0 <__aeabi_lmul+0x4e4>
    5394:	9f240073 	svcls	0x00240073
	...
    53a0:	007d000c 	rsbseq	r0, sp, ip
    53a4:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    53a8:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    53ac:	00009f24 	andeq	r9, r0, r4, lsr #30
    53b0:	00000000 	andeq	r0, r0, r0
    53b4:	00240000 	eoreq	r0, r4, r0
    53b8:	0294007d 	addseq	r0, r4, #125	; 0x7d
    53bc:	1affff0a 	bne	4fec <__aeabi_lmul+0x510>
    53c0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    53c4:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    53c8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    53cc:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    53d0:	8000000f 	andhi	r0, r0, pc
    53d4:	0001282b 	andeq	r2, r1, fp, lsr #16
    53d8:	9f241316 	svcls	0x00241316
	...
    53ec:	00500001 	subseq	r0, r0, r1
    53f0:	00000000 	andeq	r0, r0, r0
    53f4:	04000000 	streq	r0, [r0], #-0
    53f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    53fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    540c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5418:	01f30004 	mvnseq	r0, r4
    541c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    542c:	00010000 	andeq	r0, r1, r0
    5430:	00000052 	andeq	r0, r0, r2, asr r0
    5434:	00000000 	andeq	r0, r0, r0
    5438:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    5444:	01f30015 	mvnseq	r0, r5, lsl r0
    5448:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    544c:	01f35201 	mvnseq	r5, r1, lsl #4
    5450:	30254052 	eorcc	r4, r5, r2, asr r0
    5454:	0001282e 	andeq	r2, r1, lr, lsr #16
    5458:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5468:	01000000 	mrseq	r0, (UNDEF: 0)
    546c:	00005500 	andeq	r5, r0, r0, lsl #10
    5470:	00000000 	andeq	r0, r0, r0
    5474:	001d0000 	andseq	r0, sp, r0
    5478:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    547c:	23225101 			; <UNDEFINED> instruction: 0x23225101
    5480:	5001f302 	andpl	pc, r1, r2, lsl #6
    5484:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5488:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    548c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    5490:	13160001 	tstne	r6, #1
    5494:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54a4:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    54a8:	1a007400 	bne	224b0 <__ccfg+0x2508>
    54ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54bc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    54c8:	01f3001d 	mvnseq	r0, sp, lsl r0
    54cc:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    54d0:	f3022322 	vcgt.u8	d2, d2, d18
    54d4:	01f35001 	mvnseq	r5, r1
    54d8:	01f32251 	mvnseq	r2, r1, asr r2
    54dc:	30254052 	eorcc	r4, r5, r2, asr r0
    54e0:	0001282e 	andeq	r2, r1, lr, lsr #16
    54e4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    54f4:	07000000 	streq	r0, [r0, -r0]
    54f8:	0a007500 	beq	22900 <__ccfg+0x2958>
    54fc:	9f1affff 	svcls	0x001affff
	...
    5510:	00700005 	rsbseq	r0, r0, r5
    5514:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    5524:	01000000 	mrseq	r0, (UNDEF: 0)
    5528:	00005000 	andeq	r5, r0, r0
    552c:	00000000 	andeq	r0, r0, r0
    5530:	00040000 	andeq	r0, r4, r0
    5534:	9f5001f3 	svcls	0x005001f3
	...
    5548:	00510001 	subseq	r0, r1, r1
    554c:	00000000 	andeq	r0, r0, r0
    5550:	04000000 	streq	r0, [r0], #-0
    5554:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5558:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5568:	52000100 	andpl	r0, r0, #0, 2
	...
    5574:	00540001 	subseq	r0, r4, r1
    5578:	00000000 	andeq	r0, r0, r0
    557c:	1b000000 	blne	5584 <patchGenfskRfe+0x188>
    5580:	5201f300 	andpl	pc, r1, #0, 6
    5584:	01f32540 	mvnseq	r2, r0, asr #10
    5588:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    558c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5590:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5594:	01282b80 	smlawbeq	r8, r0, fp, r2
    5598:	9f131600 	svcls	0x00131600
	...
    55ac:	00530001 	subseq	r0, r3, r1
    55b0:	00000000 	andeq	r0, r0, r0
    55b4:	01000000 	mrseq	r0, (UNDEF: 0)
    55b8:	00005500 	andeq	r5, r0, r0, lsl #10
    55bc:	00000000 	andeq	r0, r0, r0
    55c0:	001b0000 	andseq	r0, fp, r0
    55c4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    55c8:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    55cc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    55d0:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    55d4:	8000000f 	andhi	r0, r0, pc
    55d8:	0001282b 	andeq	r2, r1, fp, lsr #16
    55dc:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    55ec:	01000000 	mrseq	r0, (UNDEF: 0)
    55f0:	00005600 	andeq	r5, r0, r0, lsl #12
    55f4:	00000000 	andeq	r0, r0, r0
    55f8:	00060000 	andeq	r0, r6, r0
    55fc:	00710070 	rsbseq	r0, r1, r0, ror r0
    5600:	00009f22 	andeq	r9, r0, r2, lsr #30
    5604:	00000000 	andeq	r0, r0, r0
    5608:	00010000 	andeq	r0, r1, r0
    560c:	00000056 	andeq	r0, r0, r6, asr r0
    5610:	00000000 	andeq	r0, r0, r0
    5614:	f3002300 	vcgt.u8	d2, d0, d0
    5618:	01f35001 	mvnseq	r5, r1
    561c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    5620:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5624:	f3225101 	vrhadd.u32	d5, d2, d1
    5628:	4b405301 	blmi	101a234 <__ccfg+0xffa28c>
    562c:	0f0c2224 	svceq	0x000c2224
    5630:	2b800000 	blcs	fe005638 <_estack+0xde000638>
    5634:	16000128 	strne	r0, [r0], -r8, lsr #2
    5638:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5648:	00060000 	andeq	r0, r6, r0
    564c:	00740076 	rsbseq	r0, r4, r6, ror r0
    5650:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5654:	00000000 	andeq	r0, r0, r0
    5658:	00010000 	andeq	r0, r1, r0
    565c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    566c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5678:	01f30023 	mvnseq	r0, r3, lsr #32
    567c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5680:	f3022322 	vcgt.u8	d2, d2, d18
    5684:	01f35001 	mvnseq	r5, r1
    5688:	01f32251 	mvnseq	r2, r1, asr r2
    568c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5690:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5694:	282b8000 	stmdacs	fp!, {pc}
    5698:	13160001 	tstne	r6, #1
    569c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    56ac:	76000700 	strvc	r0, [r0], -r0, lsl #14
    56b0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    56b4:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    56c4:	00050000 	andeq	r0, r5, r0
    56c8:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    56cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    56e4:	00005200 	andeq	r5, r0, r0, lsl #4
    56e8:	51000100 	mrspl	r0, (UNDEF: 16)
    56ec:	00000052 	andeq	r0, r0, r2, asr r0
    56f0:	00000096 	muleq	r0, r6, r0
    56f4:	01f30004 	mvnseq	r0, r4
    56f8:	00969f51 	addseq	r9, r6, r1, asr pc
    56fc:	00980000 	addseq	r0, r8, r0
    5700:	00010000 	andeq	r0, r1, r0
    5704:	00009851 	andeq	r9, r0, r1, asr r8
    5708:	0000a000 	andeq	sl, r0, r0
    570c:	f3000400 	vshl.u8	d0, d0, d0
    5710:	a09f5101 	addsge	r5, pc, r1, lsl #2
    5714:	a6000000 	strge	r0, [r0], -r0
    5718:	01000000 	mrseq	r0, (UNDEF: 0)
    571c:	00a65100 	adceq	r5, r6, r0, lsl #2
    5720:	00aa0000 	adceq	r0, sl, r0
    5724:	00040000 	andeq	r0, r4, r0
    5728:	9f5101f3 	svcls	0x005101f3
	...
    5734:	02000000 	andeq	r0, r0, #0
    5738:	00000002 	andeq	r0, r0, r2
    573c:	01000000 	mrseq	r0, (UNDEF: 0)
    5740:	00000001 	andeq	r0, r0, r1
	...
    5760:	0000002a 	andeq	r0, r0, sl, lsr #32
    5764:	2a520001 	bcs	1485770 <__ccfg+0x14657c8>
    5768:	40000000 	andmi	r0, r0, r0
    576c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5770:	72007100 	andvc	r7, r0, #0, 2
    5774:	00742200 	rsbseq	r2, r4, r0, lsl #4
    5778:	00409f1c 	subeq	r9, r0, ip, lsl pc
    577c:	00420000 	subeq	r0, r2, r0
    5780:	000b0000 	andeq	r0, fp, r0
    5784:	00720071 	rsbseq	r0, r2, r1, ror r0
    5788:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    578c:	429f1c40 	addsmi	r1, pc, #64, 24	; 0x4000
    5790:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5794:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5798:	72007100 	andvc	r7, r0, #0, 2
    579c:	00742200 	rsbseq	r2, r4, r0, lsl #4
    57a0:	00569f1c 	subseq	r9, r6, ip, lsl pc
    57a4:	005a0000 	subseq	r0, sl, r0
    57a8:	00010000 	andeq	r0, r1, r0
    57ac:	00005a53 	andeq	r5, r0, r3, asr sl
    57b0:	00005e00 	andeq	r5, r0, r0, lsl #28
    57b4:	73000600 	movwvc	r0, #1536	; 0x600
    57b8:	1c007600 	stcne	6, cr7, [r0], {-0}
    57bc:	00005e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    57c0:	00006000 	andeq	r6, r0, r0
    57c4:	73000800 	movwvc	r0, #2048	; 0x800
    57c8:	1c007600 	stcne	6, cr7, [r0], {-0}
    57cc:	609f1c34 	addsvs	r1, pc, r4, lsr ip	; <UNPREDICTABLE>
    57d0:	6a000000 	bvs	57d8 <patchGenfskRfe+0x3dc>
    57d4:	06000000 	streq	r0, [r0], -r0
    57d8:	76007300 	strvc	r7, [r0], -r0, lsl #6
    57dc:	6a9f1c00 	bvs	fe7cc7e4 <_estack+0xde7c77e4>
    57e0:	72000000 	andvc	r0, r0, #0
    57e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    57e8:	3f007200 	svccc	0x00007200
    57ec:	1c00761a 	stcne	6, cr7, [r0], {26}
    57f0:	0000729f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    57f4:	00007600 	andeq	r7, r0, r0, lsl #12
    57f8:	f3000900 	vmls.i8	d0, d0, d0
    57fc:	1a3f5201 	bne	fda008 <__ccfg+0xfba060>
    5800:	9f1c0076 	svcls	0x001c0076
    5804:	00000076 	andeq	r0, r0, r6, ror r0
    5808:	00000078 	andeq	r0, r0, r8, ror r0
    580c:	78520001 	ldmdavc	r2, {r0}^
    5810:	80000000 	andhi	r0, r0, r0
    5814:	01000000 	mrseq	r0, (UNDEF: 0)
    5818:	00805600 	addeq	r5, r0, r0, lsl #12
    581c:	00820000 	addeq	r0, r2, r0
    5820:	00070000 	andeq	r0, r7, r0
    5824:	76200073 			; <UNDEFINED> instruction: 0x76200073
    5828:	829f2200 	addshi	r2, pc, #0, 4
    582c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    5830:	06000000 	streq	r0, [r0], -r0
    5834:	73007600 	movwvc	r7, #1536	; 0x600
    5838:	889f1c00 	ldmhi	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    583c:	8c000000 	stchi	0, cr0, [r0], {-0}
    5840:	07000000 	streq	r0, [r0, -r0]
    5844:	20007300 	andcs	r7, r0, r0, lsl #6
    5848:	9f220076 	svcls	0x00220076
    584c:	00000096 	muleq	r0, r6, r0
    5850:	0000009a 	muleq	r0, sl, r0
    5854:	9a520001 	bls	1485860 <__ccfg+0x14658b8>
    5858:	a0000000 	andge	r0, r0, r0
    585c:	01000000 	mrseq	r0, (UNDEF: 0)
    5860:	00a05600 	adceq	r5, r0, r0, lsl #12
    5864:	00a20000 	adceq	r0, r2, r0
    5868:	00010000 	andeq	r0, r1, r0
    586c:	0000a252 	andeq	sl, r0, r2, asr r2
    5870:	0000a600 	andeq	sl, r0, r0, lsl #12
    5874:	56000100 	strpl	r0, [r0], -r0, lsl #2
    5878:	000000a6 	andeq	r0, r0, r6, lsr #1
    587c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5880:	00530001 	subseq	r0, r3, r1
    5884:	00000000 	andeq	r0, r0, r0
    5888:	02000000 	andeq	r0, r0, #0
    588c:	00000000 	andeq	r0, r0, r0
    5890:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    589c:	76000000 	strvc	r0, [r0], -r0
    58a0:	01000000 	mrseq	r0, (UNDEF: 0)
    58a4:	00765000 	rsbseq	r5, r6, r0
    58a8:	00800000 	addeq	r0, r0, r0
    58ac:	00010000 	andeq	r0, r1, r0
    58b0:	00008055 	andeq	r8, r0, r5, asr r0
    58b4:	00008200 	andeq	r8, r0, r0, lsl #4
    58b8:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    58bc:	22007300 	andcs	r7, r0, #0, 6
    58c0:	829f0123 	addshi	r0, pc, #-1073741816	; 0xc0000008
    58c4:	82000000 	andhi	r0, r0, #0
    58c8:	06000000 	streq	r0, [r0], -r0
    58cc:	73007500 	movwvc	r7, #1280	; 0x500
    58d0:	829f2200 	addshi	r2, pc, #0, 4
    58d4:	8c000000 	stchi	0, cr0, [r0], {-0}
    58d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    58dc:	73007500 	movwvc	r7, #1280	; 0x500
    58e0:	01232200 			; <UNDEFINED> instruction: 0x01232200
    58e4:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    58e8:	00009800 	andeq	r9, r0, r0, lsl #16
    58ec:	50000100 	andpl	r0, r0, r0, lsl #2
    58f0:	00000098 	muleq	r0, r8, r0
    58f4:	000000a0 	andeq	r0, r0, r0, lsr #1
    58f8:	a0550001 	subsge	r0, r5, r1
    58fc:	aa000000 	bge	5904 <patchGenfskRfe+0x508>
    5900:	01000000 	mrseq	r0, (UNDEF: 0)
    5904:	00005000 	andeq	r5, r0, r0
    5908:	00000000 	andeq	r0, r0, r0
    590c:	00030000 	andeq	r0, r3, r0
    5910:	00000000 	andeq	r0, r0, r0
    5914:	01000000 	mrseq	r0, (UNDEF: 0)
    5918:	00000001 	andeq	r0, r0, r1
    591c:	00000000 	andeq	r0, r0, r0
    5920:	00520000 	subseq	r0, r2, r0
    5924:	00010000 	andeq	r0, r1, r0
    5928:	00005251 	andeq	r5, r0, r1, asr r2
    592c:	00007600 	andeq	r7, r0, r0, lsl #12
    5930:	f3000400 	vshl.u8	d0, d0, d0
    5934:	769f5101 	ldrvc	r5, [pc], r1, lsl #2
    5938:	80000000 	andhi	r0, r0, r0
    593c:	01000000 	mrseq	r0, (UNDEF: 0)
    5940:	00805100 	addeq	r5, r0, r0, lsl #2
    5944:	00820000 	addeq	r0, r2, r0
    5948:	00080000 	andeq	r0, r8, r0
    594c:	00730071 	rsbseq	r0, r3, r1, ror r0
    5950:	9f012322 	svcls	0x00012322
    5954:	00000082 	andeq	r0, r0, r2, lsl #1
    5958:	00000082 	andeq	r0, r0, r2, lsl #1
    595c:	00710006 	rsbseq	r0, r1, r6
    5960:	9f220073 	svcls	0x00220073
    5964:	00000082 	andeq	r0, r0, r2, lsl #1
    5968:	0000008c 	andeq	r0, r0, ip, lsl #1
    596c:	00710008 	rsbseq	r0, r1, r8
    5970:	23220073 			; <UNDEFINED> instruction: 0x23220073
    5974:	00969f01 	addseq	r9, r6, r1, lsl #30
    5978:	00a60000 	adceq	r0, r6, r0
    597c:	00010000 	andeq	r0, r1, r0
    5980:	0000a651 	andeq	sl, r0, r1, asr r6
    5984:	0000aa00 	andeq	sl, r0, r0, lsl #20
    5988:	f3000400 	vshl.u8	d0, d0, d0
    598c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    5998:	01010101 	tsteq	r1, r1, lsl #2
    599c:	01010202 	tsteq	r1, r2, lsl #4
    59a0:	00000000 	andeq	r0, r0, r0
    59a4:	01010000 	mrseq	r0, (UNDEF: 1)
    59a8:	00000000 	andeq	r0, r0, r0
    59ac:	2a000000 	bcs	59b4 <patchGenfskRfe+0x5b8>
    59b0:	2c000000 	stccs	0, cr0, [r0], {-0}
    59b4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    59b8:	71007000 	mrsvc	r7, (UNDEF: 0)
    59bc:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    59c0:	002c9f22 	eoreq	r9, ip, r2, lsr #30
    59c4:	003a0000 	eorseq	r0, sl, r0
    59c8:	000b0000 	andeq	r0, fp, r0
    59cc:	00710070 	rsbseq	r0, r1, r0, ror r0
    59d0:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    59d4:	3a9f0423 	bcc	fe7c6a68 <_estack+0xde7c1a68>
    59d8:	3a000000 	bcc	59e0 <patchGenfskRfe+0x5e4>
    59dc:	0b000000 	bleq	59e4 <patchGenfskRfe+0x5e8>
    59e0:	71007000 	mrsvc	r7, (UNDEF: 0)
    59e4:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    59e8:	9f082322 	svcls	0x00082322
    59ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    59f0:	00000040 	andeq	r0, r0, r0, asr #32
    59f4:	0070000b 	rsbseq	r0, r0, fp
    59f8:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    59fc:	0c232200 	sfmeq	f2, 4, [r3], #-0
    5a00:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5a04:	00004200 	andeq	r4, r0, r0, lsl #4
    5a08:	70000b00 	andvc	r0, r0, r0, lsl #22
    5a0c:	1c007100 	stfnes	f7, [r0], {-0}
    5a10:	23220074 			; <UNDEFINED> instruction: 0x23220074
    5a14:	00429f10 	subeq	r9, r2, r0, lsl pc
    5a18:	004c0000 	subeq	r0, ip, r0
    5a1c:	00090000 	andeq	r0, r9, r0
    5a20:	00710070 	rsbseq	r0, r1, r0, ror r0
    5a24:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5a28:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5a2c:	00005a00 	andeq	r5, r0, r0, lsl #20
    5a30:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5a34:	0000005a 	andeq	r0, r0, sl, asr r0
    5a38:	0000005a 	andeq	r0, r0, sl, asr r0
    5a3c:	00750006 	rsbseq	r0, r5, r6
    5a40:	9f220076 	svcls	0x00220076
    5a44:	0000005a 	andeq	r0, r0, sl, asr r0
    5a48:	00000060 	andeq	r0, r0, r0, rrx
    5a4c:	00750008 	rsbseq	r0, r5, r8
    5a50:	23220076 			; <UNDEFINED> instruction: 0x23220076
    5a54:	00609f04 	rsbeq	r9, r0, r4, lsl #30
    5a58:	00740000 	rsbseq	r0, r4, r0
    5a5c:	00060000 	andeq	r0, r6, r0
    5a60:	00760075 	rsbseq	r0, r6, r5, ror r0
    5a64:	00749f22 	rsbseq	r9, r4, r2, lsr #30
    5a68:	00780000 	rsbseq	r0, r8, r0
    5a6c:	000b0000 	andeq	r0, fp, r0
    5a70:	2434017c 	ldrtcs	r0, [r4], #-380	; 0xfffffe84
    5a74:	76220070 			; <UNDEFINED> instruction: 0x76220070
    5a78:	a69f2200 	ldrge	r2, [pc], r0, lsl #4
    5a7c:	aa000000 	bge	5a84 <patchGenfskRfe+0x688>
    5a80:	01000000 	mrseq	r0, (UNDEF: 0)
    5a84:	00005500 	andeq	r5, r0, r0, lsl #10
    5a88:	00000000 	andeq	r0, r0, r0
    5a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    5a90:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    5a94:	00010102 	andeq	r0, r1, r2, lsl #2
    5a98:	00000000 	andeq	r0, r0, r0
    5a9c:	00010100 	andeq	r0, r1, r0, lsl #2
    5aa0:	00000000 	andeq	r0, r0, r0
    5aa4:	002a0000 	eoreq	r0, sl, r0
    5aa8:	002c0000 	eoreq	r0, ip, r0
    5aac:	00010000 	andeq	r0, r1, r0
    5ab0:	00002c54 	andeq	r2, r0, r4, asr ip
    5ab4:	00003a00 	andeq	r3, r0, r0, lsl #20
    5ab8:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5abc:	003a9f04 	eorseq	r9, sl, r4, lsl #30
    5ac0:	003a0000 	eorseq	r0, sl, r0
    5ac4:	00030000 	andeq	r0, r3, r0
    5ac8:	3a9f0874 	bcc	fe7c7ca0 <_estack+0xde7c2ca0>
    5acc:	40000000 	andmi	r0, r0, r0
    5ad0:	03000000 	movweq	r0, #0
    5ad4:	9f0c7400 	svcls	0x000c7400
    5ad8:	00000040 	andeq	r0, r0, r0, asr #32
    5adc:	00000042 	andeq	r0, r0, r2, asr #32
    5ae0:	10740003 	rsbsne	r0, r4, r3
    5ae4:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5ae8:	00004c00 	andeq	r4, r0, r0, lsl #24
    5aec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5af0:	00000054 	andeq	r0, r0, r4, asr r0
    5af4:	0000005a 	andeq	r0, r0, sl, asr r0
    5af8:	5a510001 	bpl	1445b04 <__ccfg+0x1425b5c>
    5afc:	5a000000 	bpl	5b04 <patchImageGenfsk+0x54>
    5b00:	06000000 	streq	r0, [r0], -r0
    5b04:	76007100 	strvc	r7, [r0], -r0, lsl #2
    5b08:	5a9f2200 	bpl	fe7ce310 <_estack+0xde7c9310>
    5b0c:	60000000 	andvs	r0, r0, r0
    5b10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5b14:	76007100 	strvc	r7, [r0], -r0, lsl #2
    5b18:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    5b1c:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5b20:	00007600 	andeq	r7, r0, r0, lsl #12
    5b24:	71000600 	tstvc	r0, r0, lsl #12
    5b28:	22007600 	andcs	r7, r0, #0, 12
    5b2c:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5b30:	00007800 	andeq	r7, r0, r0, lsl #16
    5b34:	7c000c00 	stcvc	12, cr0, [r0], {-0}
    5b38:	f3243401 	vshl.u32	d3, d1, d4
    5b3c:	76225101 	strtvc	r5, [r2], -r1, lsl #2
    5b40:	a69f2200 	ldrge	r2, [pc], r0, lsl #4
    5b44:	aa000000 	bge	5b4c <patchImageGenfsk+0x9c>
    5b48:	01000000 	mrseq	r0, (UNDEF: 0)
    5b4c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5b58:	01000000 	mrseq	r0, (UNDEF: 0)
    5b5c:	0000001a 	andeq	r0, r0, sl, lsl r0
    5b60:	0000001c 	andeq	r0, r0, ip, lsl r0
    5b64:	1c540001 	mrrcne	0, 0, r0, r4, cr1
    5b68:	24000000 	strcs	r0, [r0], #-0
    5b6c:	02000000 	andeq	r0, r0, #0
    5b70:	27007300 	strcs	r7, [r0, -r0, lsl #6]
    5b74:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5b78:	04000000 	streq	r0, [r0], #-0
    5b7c:	7ed87400 	cdpvc	4, 13, cr7, cr8, cr0, {0}
    5b80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5b8c:	00000400 	andeq	r0, r0, r0, lsl #8
    5b90:	00000600 	andeq	r0, r0, r0, lsl #12
    5b94:	73000200 	movwvc	r0, #512	; 0x200
    5b98:	00000600 	andeq	r0, r0, r0, lsl #12
    5b9c:	00000800 	andeq	r0, r0, r0, lsl #16
    5ba0:	53000100 	movwpl	r0, #256	; 0x100
	...
    5bb4:	0000000e 	andeq	r0, r0, lr
    5bb8:	93500006 	cmpls	r0, #6
    5bbc:	04935104 	ldreq	r5, [r3], #260	; 0x104
    5bc0:	0000000e 	andeq	r0, r0, lr
    5bc4:	00000054 	andeq	r0, r0, r4, asr r0
    5bc8:	03f30006 	mvnseq	r0, #6
    5bcc:	9f2500f5 	svcls	0x002500f5
	...
    5be0:	0000003e 	andeq	r0, r0, lr, lsr r0
    5be4:	93520006 	cmpls	r2, #6
    5be8:	04935304 	ldreq	r5, [r3], #772	; 0x304
    5bec:	0000003e 	andeq	r0, r0, lr, lsr r0
    5bf0:	00000054 	andeq	r0, r0, r4, asr r0
    5bf4:	03f30006 	mvnseq	r0, #6
    5bf8:	9f2502f5 	svcls	0x002502f5
	...
    5c04:	001a0200 	andseq	r0, sl, r0, lsl #4
    5c08:	004a0000 	subeq	r0, sl, r0
    5c0c:	00010000 	andeq	r0, r1, r0
    5c10:	00000056 	andeq	r0, r0, r6, asr r0
    5c14:	00000000 	andeq	r0, r0, r0
    5c18:	00000100 	andeq	r0, r0, r0, lsl #2
    5c1c:	1a000000 	bne	5c24 <patchImageGenfsk+0x174>
    5c20:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5c24:	06000000 	streq	r0, [r0], -r0
    5c28:	74007000 	strvc	r7, [r0], #-0
    5c2c:	1e9f1e00 	cdpne	14, 9, cr1, cr15, cr0, {0}
    5c30:	22000000 	andcs	r0, r0, #0
    5c34:	01000000 	mrseq	r0, (UNDEF: 0)
    5c38:	00265000 	eoreq	r5, r6, r0
    5c3c:	00440000 	subeq	r0, r4, r0
    5c40:	00010000 	andeq	r0, r1, r0
    5c44:	00000054 	andeq	r0, r0, r4, asr r0
	...
    5c50:	00001c00 	andeq	r1, r0, r0, lsl #24
    5c54:	00003600 	andeq	r3, r0, r0, lsl #12
    5c58:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5c5c:	00000036 	andeq	r0, r0, r6, lsr r0
    5c60:	0000003e 	andeq	r0, r0, lr, lsr r0
    5c64:	0072000c 	rsbseq	r0, r2, ip
    5c68:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5c6c:	2540007c 	strbcs	r0, [r0, #-124]	; 0xffffff84
    5c70:	00009f1e 	andeq	r9, r0, lr, lsl pc
	...
    5c7c:	00000020 	andeq	r0, r0, r0, lsr #32
    5c80:	0000003c 	andeq	r0, r0, ip, lsr r0
    5c84:	00510001 	subseq	r0, r1, r1
	...
    5c90:	12000000 	andne	r0, r0, #0
    5c94:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5c98:	01000000 	mrseq	r0, (UNDEF: 0)
    5c9c:	001e5000 	andseq	r5, lr, r0
    5ca0:	00540000 	subseq	r0, r4, r0
    5ca4:	00070000 	andeq	r0, r7, r0
    5ca8:	2440007c 	strbcs	r0, [r0], #-124	; 0xffffff84
    5cac:	009f2540 	addseq	r2, pc, r0, asr #10
	...
    5cb8:	16000000 	strne	r0, [r0], -r0
    5cbc:	1c000000 	stcne	0, cr0, [r0], {-0}
    5cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    5cc4:	001c5500 	andseq	r5, ip, r0, lsl #10
    5cc8:	003e0000 	eorseq	r0, lr, r0
    5ccc:	00070000 	andeq	r0, r7, r0
    5cd0:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    5cd4:	009f2540 	addseq	r2, pc, r0, asr #10
	...
    5ce0:	14000000 	strne	r0, [r0], #-0
    5ce4:	20000000 	andcs	r0, r0, r0
    5ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    5cec:	00205100 	eoreq	r5, r0, r0, lsl #2
    5cf0:	00540000 	subseq	r0, r4, r0
    5cf4:	00050000 	andeq	r0, r5, r0
    5cf8:	2540007c 	strbcs	r0, [r0, #-124]	; 0xffffff84
    5cfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5d00:	00000000 	andeq	r0, r0, r0
    5d04:	00000100 	andeq	r0, r0, r0, lsl #2
    5d08:	00001600 	andeq	r1, r0, r0, lsl #12
    5d0c:	00002400 	andeq	r2, r0, r0, lsl #8
    5d10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5d14:	00000024 	andeq	r0, r0, r4, lsr #32
    5d18:	0000003e 	andeq	r0, r0, lr, lsr r0
    5d1c:	00720005 	rsbseq	r0, r2, r5
    5d20:	009f2540 	addseq	r2, pc, r0, asr #10
    5d24:	00000000 	andeq	r0, r0, r0
    5d28:	Address 0x0000000000005d28 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000bc 	strheq	r0, [r0], -ip
  18:	00000184 	andeq	r0, r0, r4, lsl #3
};
  1c:	00000036 	andeq	r0, r0, r6, lsr r0
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000006 	andeq	r0, r0, r6
  30:	00000000 	andeq	r0, r0, r0
  34:	00000008 	andeq	r0, r0, r8
  38:	00000000 	andeq	r0, r0, r0
  3c:	00000014 	andeq	r0, r0, r4, lsl r0
			i = k;
  40:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	000001cc 	andeq	r0, r0, ip, asr #3
}
  4c:	00000084 	andeq	r0, r0, r4, lsl #1
  50:	00000250 	andeq	r0, r0, r0, asr r2
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	00000266 	andeq	r0, r0, r6, ror #4
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
			nq++;
  60:	00000000 	andeq	r0, r0, r0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	0000001e 	andeq	r0, r0, lr, lsl r0
  68:	00000286 	andeq	r0, r0, r6, lsl #5
  6c:	00000030 	andeq	r0, r0, r0, lsr r0
  70:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
  74:	00000052 	andeq	r0, r0, r2, asr r0
  78:	00000308 	andeq	r0, r0, r8, lsl #6
  7c:	0000041c 	andeq	r0, r0, ip, lsl r4
  80:	00000724 	andeq	r0, r0, r4, lsr #14
  84:	000005c0 	andeq	r0, r0, r0, asr #11
	...
	if (!button_still_pressed (__button_list [pbutton]))
  90:	000000e4 	andeq	r0, r0, r4, ror #1
  94:	1c4c0002 	mcrrne	0, 0, r0, ip, cr2
  98:	00040000 	andeq	r0, r4, r0
	if (baction == NULL)
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00000ce4 	andeq	r0, r0, r4, ror #25
	(*baction) (pbutton);
  a4:	0000000c 	andeq	r0, r0, ip
endthread
  a8:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	00000d1c 	andeq	r0, r0, ip, lsl sp
endthread
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	00000d48 	andeq	r0, r0, r8, asr #26
  bc:	0000003c 	andeq	r0, r0, ip, lsr r0
  c0:	00000d84 	andeq	r0, r0, r4, lsl #27
  c4:	00000040 	andeq	r0, r0, r0, asr #32
fsm sender(struct ResponseMessage *message) {
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000dc4 	andeq	r0, r0, r4, asr #27
}
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000e18 	andeq	r0, r0, r8, lsl lr
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00000e58 	andeq	r0, r0, r8, asr lr
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000e80 	andeq	r0, r0, r0, lsl #29
  ec:	00000114 	andeq	r0, r0, r4, lsl r1
		packet[1] = message->gid;
  f0:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
  f4:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	00000fe4 	andeq	r0, r0, r4, ror #31
  fc:	00000054 	andeq	r0, r0, r4, asr r0
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
 100:	00001038 	andeq	r1, r0, r8, lsr r0
 104:	00000038 	andeq	r0, r0, r8, lsr r0
		*p = message->tpe;p++;
 108:	00001070 	andeq	r1, r0, r0, ror r0
		*p = message->request_number;p++;
 10c:	00000110 	andeq	r0, r0, r0, lsl r1
		*p = message->sender_id;p++;
 110:	00000000 	andeq	r0, r0, r0
		*p = message->receiver_id;p++;
 114:	0000000c 	andeq	r0, r0, ip
		switch(message->tpe) {
 118:	00001180 	andeq	r1, r0, r0, lsl #3
 11c:	000000c0 	andeq	r0, r0, r0, asr #1
 120:	00001240 	andeq	r1, r0, r0, asr #4
		tcv_endp(packet);
 124:	00000044 	andeq	r0, r0, r4, asr #32
		ser_out(CONFIRM_message, "Message sent\r\n");
 128:	00001284 	andeq	r1, r0, r4, lsl #5
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 130:	000012c0 	andeq	r1, r0, r0, asr #5
		finish;
 134:	000000a4 	andeq	r0, r0, r4, lsr #1
 138:	00001364 	andeq	r1, r0, r4, ror #6
 13c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
				strncpy(p, message->record, sizeof(message->record));
 140:	0000151c 	andeq	r1, r0, ip, lsl r5
				*p = message->padding;p++;
 144:	00000024 	andeq	r0, r0, r4, lsr #32
				strncpy(p, message->record, sizeof(message->record));
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
 150:	00001540 	andeq	r1, r0, r0, asr #10
				strncpy(p, message->record, sizeof(message->record));
 154:	00000258 	andeq	r0, r0, r8, asr r2
 158:	00001798 	muleq	r0, r8, r7
				strncpy(p, message->record, sizeof(message->record));
 15c:	00000030 	andeq	r0, r0, r0, lsr r0
				break;
 160:	00000000 	andeq	r0, r0, r0
				*p = message->record_index;p++;
 164:	0000005c 	andeq	r0, r0, ip, asr r0
				*p = message->padding;
 168:	000017c8 	andeq	r1, r0, r8, asr #15
				break;
 16c:	00000060 	andeq	r0, r0, r0, rrx
	...
 178:	00000154 	andeq	r0, r0, r4, asr r1
 17c:	30dc0002 	sbcscc	r0, ip, r2
 180:	00040000 	andeq	r0, r4, r0
struct Node* init_node(struct Node* node){
 184:	00000000 	andeq	r0, r0, r0
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
 188:	00001828 	andeq	r1, r0, r8, lsr #16
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
 190:	00001864 	andeq	r1, r0, r4, ror #16
    node2->gid = 0;
 194:	00000080 	andeq	r0, r0, r0, lsl #1
    node2->data_base.item_count = 0;
 198:	000018e4 	andeq	r1, r0, r4, ror #17
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	00000024 	andeq	r0, r0, r4, lsr #32
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
 1a8:	000018fc 	strdeq	r1, [r0], -ip
 1ac:	00000010 	andeq	r0, r0, r0, lsl r0
 1b0:	0000190c 	andeq	r1, r0, ip, lsl #18
    node2->index = 0;
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
};
 1b8:	00000000 	andeq	r0, r0, r0
    return (uint8_t) (rand() % 255);
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
 1c0:	00001938 	andeq	r1, r0, r8, lsr r9
 1c4:	00000006 	andeq	r0, r0, r6
}
 1c8:	00001940 	andeq	r1, r0, r0, asr #18
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
 1cc:	000000cc 	andeq	r0, r0, ip, asr #1
 1d0:	00001a0c 	andeq	r1, r0, ip, lsl #20
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
 1d8:	00001a20 	andeq	r1, r0, r0, lsr #20
 1dc:	00000034 	andeq	r0, r0, r4, lsr r0
    if (node->data_base.item_count == NUMB_OF_ENT){
 1e0:	00001a54 	andeq	r1, r0, r4, asr sl
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
        for (int i = 0; i < NUMB_OF_ENT; i++){
 1e8:	00000000 	andeq	r0, r0, r0
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	00001a88 	andeq	r1, r0, r8, lsl #21
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
 1f8:	00001aac 	andeq	r1, r0, ip, lsr #21
 1fc:	00000038 	andeq	r0, r0, r8, lsr r0
 200:	00000000 	andeq	r0, r0, r0
 204:	00000014 	andeq	r0, r0, r4, lsl r0
 208:	00000000 	andeq	r0, r0, r0
                node->data_base.item_array[i].owner_id = owner_id;
 20c:	00000040 	andeq	r0, r0, r0, asr #32
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
 210:	00000000 	andeq	r0, r0, r0
                node->data_base.item_count += 1;
 214:	00000018 	andeq	r0, r0, r8, lsl r0
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
 218:	00001ae4 	andeq	r1, r0, r4, ror #21
                node->data_base.item_count += 1;
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
 220:	00000000 	andeq	r0, r0, r0
 224:	00000020 	andeq	r0, r0, r0, lsr #32
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
 228:	00001b08 	andeq	r1, r0, r8, lsl #22
 22c:	0000000e 	andeq	r0, r0, lr
 230:	00001b16 	andeq	r1, r0, r6, lsl fp
 234:	00000010 	andeq	r0, r0, r0, lsl r0
};
 238:	00001b26 	andeq	r1, r0, r6, lsr #22
        for (int i = 0; i < NUMB_OF_ENT; i++){
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	00000000 	andeq	r0, r0, r0
        return false;
 244:	00000010 	andeq	r0, r0, r0, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000006 	andeq	r0, r0, r6
            node->nnodes[i] = 0; // set to null byte
 250:	00001b42 	andeq	r1, r0, r2, asr #22
 254:	00000014 	andeq	r0, r0, r4, lsl r0
 258:	00001b56 	andeq	r1, r0, r6, asr fp
 25c:	0000000e 	andeq	r0, r0, lr
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 260:	00001b64 	andeq	r1, r0, r4, ror #22
};
 264:	00000024 	andeq	r0, r0, r4, lsr #32
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
 268:	00001b88 	andeq	r1, r0, r8, lsl #23
 26c:	0000009c 	muleq	r0, ip, r0
 270:	00001c24 	andeq	r1, r0, r4, lsr #24
 274:	00000050 	andeq	r0, r0, r0, asr r0
        node->data_base.item_count -= 1;
 278:	00001c74 	andeq	r1, r0, r4, ror ip
        node->data_base.item_array[index].timestamp = 0;
 27c:	00000048 	andeq	r0, r0, r8, asr #32
        node->data_base.item_count -= 1;
 280:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
};
 284:	00000050 	andeq	r0, r0, r0, asr r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
 288:	00000000 	andeq	r0, r0, r0
 28c:	00000058 	andeq	r0, r0, r8, asr r0
 290:	00001d0c 	andeq	r1, r0, ip, lsl #26
        for(int i = 0; i <= node->data_base.item_count; i++){
 294:	000000a8 	andeq	r0, r0, r8, lsr #1
 298:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
            node->data_base.item_array[i].data_entry[0] = '\0';
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
            node->data_base.item_array[i].timestamp = 0;
 2a0:	00001de8 	andeq	r1, r0, r8, ror #27
    node->data_base.item_count = 0;
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	00000030 	andeq	r0, r0, r0, lsr r0
}
 2b0:	00000000 	andeq	r0, r0, r0
        return true;
 2b4:	00000038 	andeq	r0, r0, r8, lsr r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 2b8:	00001e00 	andeq	r1, r0, r0, lsl #28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 2bc:	0000013c 	andeq	r0, r0, ip, lsr r1
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 2c0:	00001f3c 	andeq	r1, r0, ip, lsr pc
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
	response_message->tpe = RESPONSE;
 2d0:	00000104 	andeq	r0, r0, r4, lsl #2
	response_message->status = status;
 2d4:	42ff0002 	rscsmi	r0, pc, #2
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 2d8:	00040000 	andeq	r0, r4, r0
	response_message->gid = gid;
 2dc:	00000000 	andeq	r0, r0, r0
	response_message->sender_id = receiver_id;
 2e0:	00001f60 	andeq	r1, r0, r0, ror #30
	response_message->status = status;
 2e4:	00000016 	andeq	r0, r0, r6, lsl r0
	if (!padding){
 2e8:	00001f76 	andeq	r1, r0, r6, ror pc
		response_message->padding = padding;
 2ec:	0000001a 	andeq	r0, r0, sl, lsl r0
	if (rec != NULL){
 2f0:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
 2f4:	0000000e 	andeq	r0, r0, lr
		strncpy(response_message->record, rec, 20);
 2f8:	00001fa0 	andeq	r1, r0, r0, lsr #31
 2fc:	0000004c 	andeq	r0, r0, ip, asr #32
 300:	00001fec 	andeq	r1, r0, ip, ror #31
};
 304:	0000008c 	andeq	r0, r0, ip, lsl #1
fsm receiver(struct Node* node_db) {
 308:	00002078 	andeq	r2, r0, r8, ror r0
 30c:	00000070 	andeq	r0, r0, r0, ror r0
 310:	000020e8 	andeq	r2, r0, r8, ror #1
 314:	000000c0 	andeq	r0, r0, r0, asr #1
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000006c 	andeq	r0, r0, ip, rrx
 320:	000021a8 	andeq	r2, r0, r8, lsr #3
 324:	00000024 	andeq	r0, r0, r4, lsr #32
		DEBUG_PRINT("\r\nreceiving 0");
 328:	000021cc 	andeq	r2, r0, ip, asr #3
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
		incoming_packet = tcv_rnp(receiving, sfd);
 330:	00000000 	andeq	r0, r0, r0
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nreceiving 1");
 33c:	00000078 	andeq	r0, r0, r8, ror r0
 340:	0000224c 	andeq	r2, r0, ip, asr #4
		DEBUG_PRINT("\r\nreceiving 2");
 344:	000000bc 	strheq	r0, [r0], -ip
 348:	00000000 	andeq	r0, r0, r0
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
 350:	00000000 	andeq	r0, r0, r0
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
 354:	00000038 	andeq	r0, r0, r8, lsr r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
 358:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nreceiving 3");
 35c:	0000000a 	andeq	r0, r0, sl
		switch (response_message_5->tpe){
 360:	00002308 	andeq	r2, r0, r8, lsl #6
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	00002334 	andeq	r2, r0, r4, lsr r3
 36c:	00000060 	andeq	r0, r0, r0, rrx
 370:	00000000 	andeq	r0, r0, r0
 374:	00000040 	andeq	r0, r0, r0, asr #32
 378:	00000000 	andeq	r0, r0, r0
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 37c:	0000002c 	andeq	r0, r0, ip, lsr #32
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
 380:	00000000 	andeq	r0, r0, r0
				if (discovery_request_message->gid == node_db->gid){
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
 388:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nSending to sender");
 38c:	00000006 	andeq	r0, r0, r6
 390:	00002394 	muleq	r0, r4, r3
					DEBUG_PRINT("\r\nSending to sender");
 394:	00000068 	andeq	r0, r0, r8, rrx
					response_message_0->tpe = DISCOVERY_RESPONSE;
 398:	000023fc 	strdeq	r2, [r0], -ip
					response_message_0->request_number = discovery_request_message->request_number;
 39c:	00000050 	andeq	r0, r0, r0, asr r0
					response_message_0->sender_id = node_db->id;
 3a0:	0000244c 	andeq	r2, r0, ip, asr #8
					response_message_0->receiver_id = discovery_request_message->sender_id;
 3a4:	0000009c 	muleq	r0, ip, r0
					DEBUG_PRINT("\r\nSending to sender");
 3a8:	000024e8 	andeq	r2, r0, r8, ror #9
					call sender(response_message_0, done_case);
 3ac:	00000040 	andeq	r0, r0, r0, asr #32
 3b0:	00002528 	andeq	r2, r0, r8, lsr #10
 3b4:	00000034 	andeq	r0, r0, r4, lsr r0
 3b8:	0000255c 	andeq	r2, r0, ip, asr r5
 3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
 3c0:	00000000 	andeq	r0, r0, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c8:	00002598 	muleq	r0, r8, r5
 3cc:	00000002 	andeq	r0, r0, r2
	...
 3d8:	00000034 	andeq	r0, r0, r4, lsr r0
 3dc:	56360002 	ldrtpl	r0, [r6], -r2
 3e0:	00040000 	andeq	r0, r4, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 3e4:	00000000 	andeq	r0, r0, r0
					node_db->index+=1;
 3e8:	0000259a 	muleq	r0, sl, r5
 3ec:	00000002 	andeq	r0, r0, r2
		DEBUG_PRINT("\r\nIn done_case");
 3f0:	0000259c 	muleq	r0, ip, r5
		tcv_endp(incoming_packet);
 3f4:	00000002 	andeq	r0, r0, r2
 3f8:	0000259e 	muleq	r0, lr, r5
		DEBUG_PRINT("\r\nIn done_case");
 3fc:	00000002 	andeq	r0, r0, r2
 400:	000025a0 	andeq	r2, r0, r0, lsr #11
		proceed receiving;
 404:	00000044 	andeq	r0, r0, r4, asr #32
	...
		proceed receiving;
 410:	00000014 	andeq	r0, r0, r4, lsl r0
 414:	57ae0002 	strpl	r0, [lr, r2]!
		ser_out(response_1_delete, "\r\nRecord Deleted");
 418:	00040000 	andeq	r0, r4, r0
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	5ce90002 	stclpl	0, cr0, [r9], #8
 430:	00040000 	andeq	r0, r4, r0
	...
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
 43c:	00000002 	andeq	r0, r0, r2
 440:	00000000 	andeq	r0, r0, r0
 444:	00000058 	andeq	r0, r0, r8, asr r0
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
 450:	00000024 	andeq	r0, r0, r4, lsr #32
 454:	61ed0002 	mvnvs	r0, r2
 458:	00040000 	andeq	r0, r4, r0
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
 464:	000000cc 	andeq	r0, r0, ip, asr #1
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 478:	0000008c 	andeq	r0, r0, ip, lsl #1
 47c:	66e70002 	strbtvs	r0, [r7], r2
		proceed receiving;
 480:	00040000 	andeq	r0, r4, r0
}
 484:	00000000 	andeq	r0, r0, r0
 488:	000025ec 	andeq	r2, r0, ip, ror #11
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 48c:	00000034 	andeq	r0, r0, r4, lsr r0
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
 490:	00002620 	andeq	r2, r0, r0, lsr #12
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
 494:	00000030 	andeq	r0, r0, r0, lsr r0
 498:	00002650 	andeq	r2, r0, r0, asr r6
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	00002668 	andeq	r2, r0, r8, ror #12
					DEBUG_PRINT("\r\nDelete rec first if");
 4a4:	00000054 	andeq	r0, r0, r4, asr r0
					break;
 4a8:	000026bc 			; <UNDEFINED> instruction: 0x000026bc
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
 4b0:	000026fc 	strdeq	r2, [r0], -ip
					DEBUG_PRINT("\r\nCreate rec second if");
 4b4:	00000024 	andeq	r0, r0, r4, lsr #32
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
 4b8:	00002720 	andeq	r2, r0, r0, lsr #14
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	00002734 	andeq	r2, r0, r4, lsr r7
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
						DEBUG_PRINT("\r\nCreate rec third if");
 4c8:	00000000 	andeq	r0, r0, r0
						status = (uint8_t) SUCCESS;
 4cc:	00000064 	andeq	r0, r0, r4, rrx
					DEBUG_PRINT("\r\nCreate rec out if");
 4d0:	00000000 	andeq	r0, r0, r0
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
 4d4:	00000128 	andeq	r0, r0, r8, lsr #2
 4d8:	00000000 	andeq	r0, r0, r0
 4dc:	000000ec 	andeq	r0, r0, ip, ror #1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
 4ec:	00000004 	andeq	r0, r0, r4
 4f0:	00000000 	andeq	r0, r0, r0
					call sender(response_message_2, done_case);
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
						status = (uint8_t) DB_FULL;
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 50c:	71920002 	orrsvc	r0, r2, r2
				DEBUG_PRINT("\r\nDelete rec");/*
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
 518:	00002748 	andeq	r2, r0, r8, asr #14
 51c:	0000006c 	andeq	r0, r0, ip, rrx
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	75b40002 	ldrvc	r0, [r4, #2]!
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nDelete rec first if");
 538:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 53c:	00000078 	andeq	r0, r0, r8, ror r0
	...
					DEBUG_PRINT("\r\nDelete rec second if");
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
					if (delete_record(node_db, delete_record_message->record_index)){
 54c:	79ca0002 	stmibvc	sl, {r1}^
 550:	00040000 	andeq	r0, r4, r0
						DEBUG_PRINT("\r\nDelete rec third if");
 554:	00000000 	andeq	r0, r0, r0
 558:	0000282c 	andeq	r2, r0, ip, lsr #16
					DEBUG_PRINT("\r\nDelete assemble le response");
 55c:	00000054 	andeq	r0, r0, r4, asr r0
	...
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	7e1a0002 	cdpvc	0, 1, cr0, cr10, cr2, {0}
 570:	00040000 	andeq	r0, r4, r0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 574:	00000000 	andeq	r0, r0, r0
 578:	00002880 	andeq	r2, r0, r0, lsl #17
						DEBUG_PRINT("\r\nDelete rec fourth if");
 57c:	00000060 	andeq	r0, r0, r0, rrx
	...
 588:	0000006c 	andeq	r0, r0, ip, rrx
 58c:	826a0002 	rsbhi	r0, sl, #2
 590:	00040000 	andeq	r0, r4, r0
 594:	00000000 	andeq	r0, r0, r0
 598:	000028e0 	andeq	r2, r0, r0, ror #17
 59c:	00000020 	andeq	r0, r0, r0, lsr #32
 5a0:	00002900 	andeq	r2, r0, r0, lsl #18
 5a4:	00000190 	muleq	r0, r0, r1
 5a8:	00002a90 	muleq	r0, r0, sl
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
 5b0:	00002ad8 	ldrdeq	r2, [r0], -r8
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
 5b8:	00002afc 	strdeq	r2, [r0], -ip
 5bc:	0000005c 	andeq	r0, r0, ip, asr r0
 5c0:	00002b58 	andeq	r2, r0, r8, asr fp
 5c4:	00000038 	andeq	r0, r0, r8, lsr r0
 5c8:	00002b90 	muleq	r0, r0, fp
 5cc:	00000180 	andeq	r0, r0, r0, lsl #3
 5d0:	00002d10 	andeq	r2, r0, r0, lsl sp
 5d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5d8:	00002de0 	andeq	r2, r0, r0, ror #27
 5dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e0:	00002fd0 	ldrdeq	r2, [r0], -r0
 5e4:	00000070 	andeq	r0, r0, r0, ror r0
 5e8:	00003040 	andeq	r3, r0, r0, asr #32
 5ec:	00000174 	andeq	r0, r0, r4, ror r1
	...
 5f8:	00000044 	andeq	r0, r0, r4, asr #32
 5fc:	a6e20002 	strbtge	r0, [r2], r2
 600:	00040000 	andeq	r0, r4, r0
 604:	00000000 	andeq	r0, r0, r0
 608:	000031b4 			; <UNDEFINED> instruction: 0x000031b4
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 60c:	00000024 	andeq	r0, r0, r4, lsr #32
 610:	000031d8 	ldrdeq	r3, [r0], -r8
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
 614:	00000024 	andeq	r0, r0, r4, lsr #32
				DEBUG_PRINT("\r\nretrieve rec");
 618:	000031fc 	strdeq	r3, [r0], -ip
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 61c:	00000008 	andeq	r0, r0, r8
 620:	00003204 	andeq	r3, r0, r4, lsl #4
 624:	00000004 	andeq	r0, r0, r4
 628:	00003208 	andeq	r3, r0, r8, lsl #4
 62c:	00000004 	andeq	r0, r0, r4
 630:	0000320c 	andeq	r3, r0, ip, lsl #4
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 634:	00000048 	andeq	r0, r0, r8, asr #32
	...
    return node->data_base.item_array[index];
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	ae170002 	cdpge	0, 1, cr0, cr7, cr2, {0}
 648:	00040000 	andeq	r0, r4, r0
 64c:	00000000 	andeq	r0, r0, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 650:	00003254 	andeq	r3, r0, r4, asr r2
    return node->data_base.item_array[index];
 654:	00000070 	andeq	r0, r0, r0, ror r0
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 664:	b2480002 	sublt	r0, r8, #2
 668:	00040000 	andeq	r0, r4, r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	000032c4 	andeq	r3, r0, r4, asr #5
 674:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 680:	0000002c 	andeq	r0, r0, ip, lsr #32
				DEBUG_PRINT("\r\nResponse");
 684:	b68c0002 	strlt	r0, [ip], r2
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 688:	00040000 	andeq	r0, r4, r0
				DEBUG_PRINT("\r\nResponse");
 68c:	00000000 	andeq	r0, r0, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 690:	000033e0 	andeq	r3, r0, r0, ror #7
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	00003400 	andeq	r3, r0, r0, lsl #8
 69c:	00000230 	andeq	r0, r0, r0, lsr r2
 6a0:	00003630 	andeq	r3, r0, r0, lsr r6
				if(!response_flag){
 6a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
					trigger(&response_flag);
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
				switch(response_message_5->status){
 6b4:	bc800002 	stclt	0, cr0, [r0], {2}
 6b8:	00040000 	andeq	r0, r4, r0
 6bc:	00000000 	andeq	r0, r0, r0
 6c0:	00003680 	andeq	r3, r0, r0, lsl #13
 6c4:	00000390 	muleq	r0, r0, r3
	...
						if (response_checker[0] == response_message_5->request_number){
 6d0:	00000014 	andeq	r0, r0, r4, lsl r0
							switch(response_checker[1]){
 6d4:	c2130002 	andsgt	r0, r3, #2
 6d8:	00040000 	andeq	r0, r4, r0
	...
						break;
 6e8:	00000024 	andeq	r0, r0, r4, lsr #32
									proceed response_1_delete;
 6ec:	e2010002 	and	r0, r1, #2
									proceed response_1_retrieve;
 6f0:	00040000 	andeq	r0, r4, r0
						proceed response_2;
 6f4:	00000000 	andeq	r0, r0, r0
						proceed response_3;
 6f8:	00003a10 	andeq	r3, r0, r0, lsl sl
						proceed response_4;
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
 700:	00000000 	andeq	r0, r0, r0
 704:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
}
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	e38f0002 	orr	r0, pc, #2
 718:	00040000 	andeq	r0, r4, r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	00003a38 	andeq	r3, r0, r8, lsr sl
fsm root {
 724:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 730:	00000024 	andeq	r0, r0, r4, lsr #32
 734:	e4680002 	strbt	r0, [r8], #-2
 738:	00040000 	andeq	r0, r4, r0
 73c:	00000000 	andeq	r0, r0, r0
 740:	00003a68 	andeq	r3, r0, r8, ror #20
 744:	00000020 	andeq	r0, r0, r0, lsr #32
 748:	00003a88 	andeq	r3, r0, r8, lsl #21
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 758:	0000003c 	andeq	r0, r0, ip, lsr r0
 75c:	e5af0002 	str	r0, [pc, #2]!	; 766 <root+0x42>
 760:	00040000 	andeq	r0, r4, r0
 764:	00000000 	andeq	r0, r0, r0
 768:	00003aa0 	andeq	r3, r0, r0, lsr #21
 76c:	00000008 	andeq	r0, r0, r8
 770:	00000000 	andeq	r0, r0, r0
		node_db = init_node(node_db);
 774:	00000006 	andeq	r0, r0, r6
 778:	00003aa8 	andeq	r3, r0, r8, lsr #21
		phys_cc1350(0, MAX_PKT_LEN);
 77c:	00000008 	andeq	r0, r0, r8
 780:	00000000 	andeq	r0, r0, r0
 784:	00000006 	andeq	r0, r0, r6
		tcv_plug (0, &plug_null);
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000008 	andeq	r0, r0, r8
	...
		sfd = tcv_open (WNONE, 0, 0);
 798:	00000064 	andeq	r0, r0, r4, rrx
		if (sfd < 0) {
 79c:	e6e90002 	strbt	r0, [r9], r2
 7a0:	00040000 	andeq	r0, r4, r0
			diag("Cannot open tcv interface");
 7a4:	00000000 	andeq	r0, r0, r0
			halt();
 7a8:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	00003b0c 	andeq	r3, r0, ip, lsl #22
		runfsm receiver(node_db);
 7b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7b8:	00000000 	andeq	r0, r0, r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
 7bc:	00000090 	muleq	r0, r0, r0
 7c0:	00003b38 	andeq	r3, r0, r8, lsr fp
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00003b50 	andeq	r3, r0, r0, asr fp
 7cc:	00000060 	andeq	r0, r0, r0, rrx
 7d0:	00003bb0 			; <UNDEFINED> instruction: 0x00003bb0
 7d4:	00000034 	andeq	r0, r0, r4, lsr r0
		ser_inf(get_choice, "%c", &CHOICE);
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
 7e0:	00000000 	andeq	r0, r0, r0
		switch(CHOICE) {
 7e4:	0000000c 	andeq	r0, r0, ip
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00000034 	andeq	r0, r0, r4, lsr r0
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 800:	00000054 	andeq	r0, r0, r4, asr r0
 804:	efac0002 	svc	0x00ac0002
 808:	00040000 	andeq	r0, r4, r0
	...
				proceed get_new_group_id;
 814:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed menu;
 818:	00003be4 	andeq	r3, r0, r4, ror #23
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 81c:	00000028 	andeq	r0, r0, r8, lsr #32
 820:	00003c0c 	andeq	r3, r0, ip, lsl #24
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
 824:	0000004c 	andeq	r0, r0, ip, asr #32
 828:	00003c58 	andeq	r3, r0, r8, asr ip
 82c:	00000150 	andeq	r0, r0, r0, asr r1
		DEBUG_PRINT("setting node group ID");
 830:	00003da8 	andeq	r3, r0, r8, lsr #27
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 834:	00000118 	andeq	r0, r0, r8, lsl r1
    node->gid = gid; 
 838:	00003ec0 	andeq	r3, r0, r0, asr #29
		proceed menu;
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
 840:	00000000 	andeq	r0, r0, r0
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
 844:	00000060 	andeq	r0, r0, r0, rrx
 848:	00003ee0 	andeq	r3, r0, r0, ror #29
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
 858:	00000024 	andeq	r0, r0, r4, lsr #32
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 85c:	fa640002 	blx	190086c <__ccfg+0x18e08c4>
    node->id = id;
 860:	00040000 	andeq	r0, r4, r0
		if((node_db->id < 1) || (node_db->id > 25)){
 864:	00000000 	andeq	r0, r0, r0
 868:	00003efc 	strdeq	r3, [r0], -ip
			strncpy(reason, "Out of Range", 50);
 86c:	000000d4 	ldrdeq	r0, [r0], -r4
 870:	00003fd0 	ldrdeq	r3, [r0], -r0
 874:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
				strncpy(reason, "ID is already in use", 50);
 880:	000000b4 	strheq	r0, [r0], -r4
		for(int i = 0; i < node_db->index; i++){
 884:	fc6f0002 	stc2l	0, cr0, [pc], #-8	; 884 <root+0x160>
 888:	00040000 	andeq	r0, r4, r0
		proceed menu;
 88c:	00000000 	andeq	r0, r0, r0
 890:	00004074 	andeq	r4, r0, r4, ror r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 894:	0000007c 	andeq	r0, r0, ip, ror r0
 898:	000040f0 	strdeq	r4, [r0], -r0
 89c:	000000ac 	andeq	r0, r0, ip, lsr #1
 8a0:	0000419c 	muleq	r0, ip, r1
		proceed get_new_node_id;
 8a4:	0000005c 	andeq	r0, r0, ip, asr r0
		if (!clear_node_neighbour_array(node_db)){
 8a8:	000041f8 	strdeq	r4, [r0], -r8
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
 8b0:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error Clearing Node Array", 50);
 8b4:	00000010 	andeq	r0, r0, r0, lsl r0
 8b8:	00004210 	andeq	r4, r0, r0, lsl r2
			proceed error;
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
 8c0:	00004220 	andeq	r4, r0, r0, lsr #4
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 8c4:	00000014 	andeq	r0, r0, r4, lsl r0
		request_packet->tpe = DISCOVERY_REQUEST;
 8c8:	00004234 	andeq	r4, r0, r4, lsr r2
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 8cc:	00000064 	andeq	r0, r0, r4, rrx
		request_packet->gid = node_db->gid;
 8d0:	00004298 	muleq	r0, r8, r2
 8d4:	00000014 	andeq	r0, r0, r4, lsl r0
		request_packet->request_number = generate_request_num();
 8d8:	000042ac 	andeq	r4, r0, ip, lsr #5
		request_packet->sender_id = node_db->id;
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
 8e0:	000042c0 	andeq	r4, r0, r0, asr #5
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
		call sender(request_packet, wait_discovery);
 8e8:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 8ec:	00000028 	andeq	r0, r0, r8, lsr #32
 8f0:	000042fc 	strdeq	r4, [r0], -ip
			release;
 8f4:	00000010 	andeq	r0, r0, r0, lsl r0
				proceed get_new_node_id;
 8f8:	0000430c 	andeq	r4, r0, ip, lsl #6
				proceed clear_neighbour_array;
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
				proceed create_proto_start;
 900:	00004338 	andeq	r4, r0, r8, lsr r3
				proceed start_delete_proto;
 904:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed start_retrieve_proto;
 908:	0000434c 	andeq	r4, r0, ip, asr #6
				proceed display_db;
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed del_local;
 910:	00004360 	andeq	r4, r0, r0, ror #6
			if(node_db->id == node_db->nnodes[i]){
 914:	00000110 	andeq	r0, r0, r0, lsl r1
 918:	00004470 	andeq	r4, r0, r0, ror r4
 91c:	00000064 	andeq	r0, r0, r4, rrx
				strncpy(reason, "ID is already in use", 50);
 920:	000044d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 924:	00000028 	andeq	r0, r0, r8, lsr #32
 928:	000044fc 	strdeq	r4, [r0], -ip
				proceed invalid_node_id;
 92c:	00000150 	andeq	r0, r0, r0, asr r1
	...
		if (discovery_wait_flag == 0){
 938:	0000003c 	andeq	r0, r0, ip, lsr r0
			delay(3000, find_proto_start);
 93c:	078a0002 	streq	r0, [sl, r2]
 940:	00040001 	andeq	r0, r4, r1
	...
		if (discovery_wait_flag == 1){
 94c:	000000f4 	strdeq	r0, [r0], -r4
			delay(3000, display_neighbour_nodes);
 950:	0000464c 	andeq	r4, r0, ip, asr #12
 954:	00000220 	andeq	r0, r0, r0, lsr #4
 958:	0000486c 	andeq	r4, r0, ip, ror #16
 95c:	00000060 	andeq	r0, r0, r0, rrx
 960:	00000000 	andeq	r0, r0, r0
 964:	00000078 	andeq	r0, r0, r8, ror r0
 968:	000048cc 	andeq	r4, r0, ip, asr #17
 96c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 978:	00000044 	andeq	r0, r0, r4, asr #32
 97c:	10b10002 	adcsne	r0, r1, r2
 980:	00040001 	andeq	r0, r4, r1
	...
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
 990:	00000000 	andeq	r0, r0, r0
 994:	00000018 	andeq	r0, r0, r8, lsl r0
 998:	000048e4 	andeq	r4, r0, r4, ror #17
 99c:	0000004c 	andeq	r0, r0, ip, asr #32
 9a0:	00000000 	andeq	r0, r0, r0
		if(node_db->index == 0){
 9a4:	00000030 	andeq	r0, r0, r0, lsr r0
 9a8:	00004930 	andeq	r4, r0, r0, lsr r9
 9ac:	0000006c 	andeq	r0, r0, ip, rrx
			proceed menu;
 9b0:	0000499c 	muleq	r0, ip, r9
fsm root {
 9b4:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		for (int i=0; i<node_db->index; i++) {
 9c0:	00000044 	andeq	r0, r0, r4, asr #32
 9c4:	14810002 	strne	r0, [r1], #2
		proceed menu;
 9c8:	00040001 	andeq	r0, r4, r1
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 9cc:	00000000 	andeq	r0, r0, r0
 9d0:	000049b4 			; <UNDEFINED> instruction: 0x000049b4
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
 9d4:	00000028 	andeq	r0, r0, r8, lsr #32
 9d8:	000049dc 	ldrdeq	r4, [r0], -ip
 9dc:	00000008 	andeq	r0, r0, r8
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 9e0:	00000000 	andeq	r0, r0, r0
 9e4:	00000022 	andeq	r0, r0, r2, lsr #32
			strncpy(reason, "Error: improper ID", 50);
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 9f0:	00000000 	andeq	r0, r0, r0
			proceed error;
 9f4:	00000034 	andeq	r0, r0, r4, lsr r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
 9f8:	00000000 	andeq	r0, r0, r0
 9fc:	00000040 	andeq	r0, r0, r0, asr #32
	...
		ser_in(get_record_to_create, user_provided_record, 20);
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 a0c:	1a2c0002 	bne	b00a1c <__ccfg+0xae0a74>
		create_message->gid = node_db->gid;
 a10:	00040001 	andeq	r0, r4, r1
 a14:	00000000 	andeq	r0, r0, r0
 a18:	000049e4 	andeq	r4, r0, r4, ror #19
		create_message->tpe = CREATE_RECORD;
 a1c:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		create_message->sender_id = node_db->id;
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
 a2c:	29610002 	stmdbcs	r1!, {r1}^
		strncpy(create_message->record, user_provided_record, 20);
 a30:	00040001 	andeq	r0, r4, r1
		create_message->receiver_id = user_provided_receiver_id;
 a34:	00000000 	andeq	r0, r0, r0
		strncpy(create_message->record, user_provided_record, 20);
 a38:	00004a90 	muleq	r0, r0, sl
		response_checker[0] = create_message->request_number;
 a3c:	0000004c 	andeq	r0, r0, ip, asr #32
	...
		response_checker[1] = create_message->tpe;
 a48:	00000014 	andeq	r0, r0, r4, lsl r0
		call sender(create_message, wait);
 a4c:	32db0002 	sbcscc	r0, fp, #2
 a50:	00040001 	andeq	r0, r4, r1
	...
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
 a60:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
 a64:	3c050002 	stccc	0, cr0, [r5], {2}
 a68:	00040001 	andeq	r0, r4, r1
 a6c:	00000000 	andeq	r0, r0, r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 a70:	00004adc 	ldrdeq	r4, [r0], -ip
 a74:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000130 	andeq	r0, r0, r0, lsr r1
      28:	00000134 	andeq	r0, r0, r4, lsr r1
      2c:	00000184 	andeq	r0, r0, r4, lsl #3
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	00000128 	andeq	r0, r0, r8, lsr #2
      50:	0000013a 	andeq	r0, r0, sl, lsr r1
      54:	00000184 	andeq	r0, r0, r4, lsl #3
	...
			nq++;
      60:	000001e8 	andeq	r0, r0, r8, ror #3
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000228 	andeq	r0, r0, r8, lsr #4
      68:	0000023a 	andeq	r0, r0, sl, lsr r2
      6c:	00000242 	andeq	r0, r0, r2, asr #4
	...
      78:	00000208 	andeq	r0, r0, r8, lsl #4
      7c:	0000020a 	andeq	r0, r0, sl, lsl #4
      80:	0000020e 	andeq	r0, r0, lr, lsl #4
      84:	00000210 	andeq	r0, r0, r0, lsl r2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	0000037a 	andeq	r0, r0, sl, ror r3
      94:	000003ee 	andeq	r0, r0, lr, ror #7
      98:	0000048a 	andeq	r0, r0, sl, lsl #9
	if (baction == NULL)
      9c:	00000708 	andeq	r0, r0, r8, lsl #14
	...
endthread
      a8:	0000063e 	andeq	r0, r0, lr, lsr r6
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000650 	andeq	r0, r0, r0, asr r6
      b0:	00000654 	andeq	r0, r0, r4, asr r6
endthread
      b4:	00000658 	andeq	r0, r0, r8, asr r6
	...
      c0:	00000774 	andeq	r0, r0, r4, ror r7
      c4:	0000087c 	andeq	r0, r0, ip, ror r8
fsm sender(struct ResponseMessage *message) {
      c8:	0000087e 	andeq	r0, r0, lr, ror r8
      cc:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
      d0:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
}
      d4:	00000c68 	andeq	r0, r0, r8, ror #24
      d8:	00000c6c 	andeq	r0, r0, ip, ror #24
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	00000c70 	andeq	r0, r0, r0, ror ip
	...
      e8:	00000836 	andeq	r0, r0, r6, lsr r8
      ec:	0000083a 	andeq	r0, r0, sl, lsr r8
		packet[1] = message->gid;
      f0:	0000083c 	andeq	r0, r0, ip, lsr r8
      f4:	0000083c 	andeq	r0, r0, ip, lsr r8
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	0000083e 	andeq	r0, r0, lr, lsr r8
      fc:	00000840 	andeq	r0, r0, r0, asr #16
	...
		*p = message->tpe;p++;
     108:	0000084c 	andeq	r0, r0, ip, asr #16
		*p = message->request_number;p++;
     10c:	0000087c 	andeq	r0, r0, ip, ror r8
		*p = message->sender_id;p++;
     110:	0000087e 	andeq	r0, r0, lr, ror r8
		*p = message->receiver_id;p++;
     114:	00000892 	muleq	r0, r2, r8
		switch(message->tpe) {
     118:	00000914 	andeq	r0, r0, r4, lsl r9
     11c:	00000934 	andeq	r0, r0, r4, lsr r9
	...
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0000087e 	andeq	r0, r0, lr, ror r8
     12c:	0000088c 	andeq	r0, r0, ip, lsl #17
}
     130:	00000914 	andeq	r0, r0, r4, lsl r9
		finish;
     134:	00000934 	andeq	r0, r0, r4, lsr r9
	...
				strncpy(p, message->record, sizeof(message->record));
     140:	000008c2 	andeq	r0, r0, r2, asr #17
				*p = message->padding;p++;
     144:	000008f4 	strdeq	r0, [r0], -r4
				strncpy(p, message->record, sizeof(message->record));
     148:	00000934 	andeq	r0, r0, r4, lsr r9
     14c:	00000934 	andeq	r0, r0, r4, lsr r9
	...
				strncpy(p, message->record, sizeof(message->record));
     158:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
				strncpy(p, message->record, sizeof(message->record));
     15c:	000009c6 	andeq	r0, r0, r6, asr #19
				break;
     160:	00000c0c 	andeq	r0, r0, ip, lsl #24
				*p = message->record_index;p++;
     164:	00000c2a 	andeq	r0, r0, sl, lsr #24
	...
				break;
     170:	000000c8 	andeq	r0, r0, r8, asr #1
     174:	00000184 	andeq	r0, r0, r4, lsl #3
     178:	00000184 	andeq	r0, r0, r4, lsl #3
     17c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     180:	00000001 	andeq	r0, r0, r1
struct Node* init_node(struct Node* node){
     184:	00000001 	andeq	r0, r0, r1
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	00000001 	andeq	r0, r0, r1
     18c:	00000001 	andeq	r0, r0, r1
     190:	00000001 	andeq	r0, r0, r1
    node2->gid = 0;
     194:	00000001 	andeq	r0, r0, r1
    node2->data_base.item_count = 0;
     198:	00000001 	andeq	r0, r0, r1
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	00000001 	andeq	r0, r0, r1
     1a0:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     1a4:	000001cc 	andeq	r0, r0, ip, asr #3
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a8:	000001cc 	andeq	r0, r0, ip, asr #3
     1ac:	00000250 	andeq	r0, r0, r0, asr r2
     1b0:	00000250 	andeq	r0, r0, r0, asr r2
    node2->index = 0;
     1b4:	00000266 	andeq	r0, r0, r6, ror #4
};
     1b8:	00000266 	andeq	r0, r0, r6, ror #4
    return (uint8_t) (rand() % 255);
     1bc:	00000286 	andeq	r0, r0, r6, lsl #5
     1c0:	00000001 	andeq	r0, r0, r1
     1c4:	00000001 	andeq	r0, r0, r1
}
     1c8:	00000286 	andeq	r0, r0, r6, lsl #5
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
     1d0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	00000308 	andeq	r0, r0, r8, lsl #6
     1d8:	00000308 	andeq	r0, r0, r8, lsl #6
     1dc:	00000724 	andeq	r0, r0, r4, lsr #14
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	00000724 	andeq	r0, r0, r4, lsr #14
     1e4:	00000ce4 	andeq	r0, r0, r4, ror #25
	...
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1f0:	00000dd2 	ldrdeq	r0, [r0], -r2
     1f4:	00000dd8 	ldrdeq	r0, [r0], -r8
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	00000dd8 	ldrdeq	r0, [r0], -r8
     1fc:	00000dd8 	ldrdeq	r0, [r0], -r8
     200:	00000ddc 	ldrdeq	r0, [r0], -ip
     204:	00000dde 	ldrdeq	r0, [r0], -lr
	...
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	00000dd8 	ldrdeq	r0, [r0], -r8
                node->data_base.item_count += 1;
     214:	00000dda 	ldrdeq	r0, [r0], -sl
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	00000dde 	ldrdeq	r0, [r0], -lr
                node->data_base.item_count += 1;
     21c:	00000de0 	andeq	r0, r0, r0, ror #27
	...
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     22c:	00000df2 	strdeq	r0, [r0], -r2
     230:	00000df4 	strdeq	r0, [r0], -r4
     234:	00000df6 	strdeq	r0, [r0], -r6
	...
        for (int i = 0; i < NUMB_OF_ENT; i++){
     240:	00000e2a 	andeq	r0, r0, sl, lsr #28
        return false;
     244:	00000e2e 	andeq	r0, r0, lr, lsr #28
     248:	00000e30 	andeq	r0, r0, r0, lsr lr
     24c:	00000e32 	andeq	r0, r0, r2, lsr lr
            node->nnodes[i] = 0; // set to null byte
     250:	00000e34 	andeq	r0, r0, r4, lsr lr
     254:	00000e3c 	andeq	r0, r0, ip, lsr lr
	...
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	00000e60 	andeq	r0, r0, r0, ror #28
};
     264:	00000e66 	andeq	r0, r0, r6, ror #28
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	00000e68 	andeq	r0, r0, r8, ror #28
     26c:	00000e6e 	andeq	r0, r0, lr, ror #28
	...
        node->data_base.item_count -= 1;
     278:	00000e90 	muleq	r0, r0, lr
        node->data_base.item_array[index].timestamp = 0;
     27c:	00000f16 	andeq	r0, r0, r6, lsl pc
        node->data_base.item_count -= 1;
     280:	00000f3c 	andeq	r0, r0, ip, lsr pc
};
     284:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
	...
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     290:	00001004 	andeq	r1, r0, r4
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	00001006 	andeq	r1, r0, r6
     298:	00001008 	andeq	r1, r0, r8
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	0000101c 	andeq	r1, r0, ip, lsl r0
	...
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	00001038 	andeq	r1, r0, r8, lsr r0
     2ac:	0000103a 	andeq	r1, r0, sl, lsr r0
}
     2b0:	0000103c 	andeq	r1, r0, ip, lsr r0
        return true;
     2b4:	00001044 	andeq	r1, r0, r4, asr #32
	...
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	00001180 	andeq	r1, r0, r0, lsl #3
     2c4:	00001184 	andeq	r1, r0, r4, lsl #3
     2c8:	00001186 	andeq	r1, r0, r6, lsl #3
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	00001188 	andeq	r1, r0, r8, lsl #3
	response_message->tpe = RESPONSE;
     2d0:	0000118a 	andeq	r1, r0, sl, lsl #3
	response_message->status = status;
     2d4:	0000118c 	andeq	r1, r0, ip, lsl #3
	...
	response_message->sender_id = receiver_id;
     2e0:	000011e8 	andeq	r1, r0, r8, ror #3
	response_message->status = status;
     2e4:	000011ec 	andeq	r1, r0, ip, ror #3
	if (!padding){
     2e8:	000011fe 	strdeq	r1, [r0], -lr
		response_message->padding = padding;
     2ec:	0000122a 	andeq	r1, r0, sl, lsr #4
	...
		strncpy(response_message->record, rec, 20);
     2f8:	00001240 	andeq	r1, r0, r0, asr #4
     2fc:	00001240 	andeq	r1, r0, r0, asr #4
     300:	00001242 	andeq	r1, r0, r2, asr #4
};
     304:	00001244 	andeq	r1, r0, r4, asr #4
	...
fsm receiver(struct Node* node_db) {
     310:	00001244 	andeq	r1, r0, r4, asr #4
     314:	00001246 	andeq	r1, r0, r6, asr #4
     318:	00001248 	andeq	r1, r0, r8, asr #4
     31c:	0000124a 	andeq	r1, r0, sl, asr #4
     320:	00001250 	andeq	r1, r0, r0, asr r2
     324:	00001256 	andeq	r1, r0, r6, asr r2
		DEBUG_PRINT("\r\nreceiving 0");
     328:	00001260 	andeq	r1, r0, r0, ror #4
     32c:	00001262 	andeq	r1, r0, r2, ror #4
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	0000126e 	andeq	r1, r0, lr, ror #4
     334:	00001270 	andeq	r1, r0, r0, ror r2
	...
		DEBUG_PRINT("\r\nreceiving 1");
     340:	00001284 	andeq	r1, r0, r4, lsl #5
		DEBUG_PRINT("\r\nreceiving 2");
     344:	00001284 	andeq	r1, r0, r4, lsl #5
     348:	00001286 	andeq	r1, r0, r6, lsl #5
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	00001288 	andeq	r1, r0, r8, lsl #5
	...
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	0000128a 	andeq	r1, r0, sl, lsl #5
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	0000128c 	andeq	r1, r0, ip, lsl #5
		switch (response_message_5->tpe){
     360:	0000128e 	andeq	r1, r0, lr, lsl #5
     364:	00001290 	muleq	r0, r0, r2
     368:	0000129a 	muleq	r0, sl, r2
     36c:	0000129e 	muleq	r0, lr, r2
     370:	000012a8 	andeq	r1, r0, r8, lsr #5
     374:	000012aa 	andeq	r1, r0, sl, lsr #5
	...
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	0000138e 	andeq	r1, r0, lr, lsl #7
				if (discovery_request_message->gid == node_db->gid){
     384:	00001390 	muleq	r0, r0, r3
     388:	00001392 	muleq	r0, r2, r3
					DEBUG_PRINT("\r\nSending to sender");
     38c:	00001396 	muleq	r0, r6, r3
     390:	000013a6 	andeq	r1, r0, r6, lsr #7
					DEBUG_PRINT("\r\nSending to sender");
     394:	000013a8 	andeq	r1, r0, r8, lsr #7
	...
					response_message_0->sender_id = node_db->id;
     3a0:	00001390 	muleq	r0, r0, r3
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	00001392 	muleq	r0, r2, r3
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	00001396 	muleq	r0, r6, r3
					call sender(response_message_0, done_case);
     3ac:	000013a6 	andeq	r1, r0, r6, lsr #7
     3b0:	000013a8 	andeq	r1, r0, r8, lsr #7
     3b4:	000013e2 	andeq	r1, r0, r2, ror #7
	...
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	0000139a 	muleq	r0, sl, r3
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	0000139e 	muleq	r0, lr, r3
     3c8:	000013c6 	andeq	r1, r0, r6, asr #7
     3cc:	000013ce 	andeq	r1, r0, lr, asr #7
	...
     3d8:	0000139e 	muleq	r0, lr, r3
     3dc:	000013a2 	andeq	r1, r0, r2, lsr #7
     3e0:	000013da 	ldrdeq	r1, [r0], -sl
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	000013de 	ldrdeq	r1, [r0], -lr
	...
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	000013a2 	andeq	r1, r0, r2, lsr #7
		tcv_endp(incoming_packet);
     3f4:	000013a6 	andeq	r1, r0, r6, lsr #7
     3f8:	000013d4 	ldrdeq	r1, [r0], -r4
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	000013da 	ldrdeq	r1, [r0], -sl
	...
		ser_out(response_1_create, "\r\nData Saved");
     408:	000013e2 	andeq	r1, r0, r2, ror #7
     40c:	000013e4 	andeq	r1, r0, r4, ror #7
		proceed receiving;
     410:	000013e6 	andeq	r1, r0, r6, ror #7
     414:	000013e8 	andeq	r1, r0, r8, ror #7
		ser_out(response_1_delete, "\r\nRecord Deleted");
     418:	000013ea 	andeq	r1, r0, sl, ror #7
     41c:	000013ec 	andeq	r1, r0, ip, ror #7
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     428:	000013e4 	andeq	r1, r0, r4, ror #7
     42c:	000013e6 	andeq	r1, r0, r6, ror #7
     430:	000013ec 	andeq	r1, r0, ip, ror #7
     434:	000013ee 	andeq	r1, r0, lr, ror #7
	...
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     440:	000013fe 	strdeq	r1, [r0], -lr
     444:	00001400 	andeq	r1, r0, r0, lsl #8
     448:	00001402 	andeq	r1, r0, r2, lsl #8
		proceed receiving;
     44c:	00001404 	andeq	r1, r0, r4, lsl #8
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     458:	00001416 	andeq	r1, r0, r6, lsl r4
     45c:	00001418 	andeq	r1, r0, r8, lsl r4
		proceed receiving;
     460:	0000141a 	andeq	r1, r0, sl, lsl r4
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	0000141c 	andeq	r1, r0, ip, lsl r4
	...
     470:	0000145e 	andeq	r1, r0, lr, asr r4
		proceed receiving;
     474:	0000145e 	andeq	r1, r0, lr, asr r4
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	00001462 	andeq	r1, r0, r2, ror #8
     47c:	00001464 	andeq	r1, r0, r4, ror #8
	...
}
     488:	00001494 	muleq	r0, r4, r4
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	00001496 	muleq	r0, r6, r4
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	00001498 	muleq	r0, r8, r4
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     494:	000014a0 	andeq	r1, r0, r0, lsr #9
	...
     4a0:	00001540 	andeq	r1, r0, r0, asr #10
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	00001540 	andeq	r1, r0, r0, asr #10
					break;
     4a8:	00001546 	andeq	r1, r0, r6, asr #10
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	00001548 	andeq	r1, r0, r8, asr #10
     4b0:	0000154a 	andeq	r1, r0, sl, asr #10
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	0000154e 	andeq	r1, r0, lr, asr #10
	...
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4c0:	0000155a 	andeq	r1, r0, sl, asr r5
     4c4:	0000155c 	andeq	r1, r0, ip, asr r5
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	00001572 	andeq	r1, r0, r2, ror r5
						status = (uint8_t) SUCCESS;
     4cc:	00001574 	andeq	r1, r0, r4, ror r5
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	00001586 	andeq	r1, r0, r6, lsl #11
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	000015a2 	andeq	r1, r0, r2, lsr #11
     4d8:	000015c6 	andeq	r1, r0, r6, asr #11
     4dc:	00001720 	andeq	r1, r0, r0, lsr #14
	...
     4e8:	0000155a 	andeq	r1, r0, sl, asr r5
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	0000155c 	andeq	r1, r0, ip, asr r5
     4f0:	000015fa 	strdeq	r1, [r0], -sl
					call sender(response_message_2, done_case);
     4f4:	000015fe 	strdeq	r1, [r0], -lr
	...
     500:	000015fe 	strdeq	r1, [r0], -lr
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	000015fe 	strdeq	r1, [r0], -lr
						status = (uint8_t) DB_FULL;
     508:	00001602 	andeq	r1, r0, r2, lsl #12
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	00001606 	andeq	r1, r0, r6, lsl #12
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	0000160a 	andeq	r1, r0, sl, lsl #12
     514:	0000160c 	andeq	r1, r0, ip, lsl #12
	...
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     520:	000015fe 	strdeq	r1, [r0], -lr
     524:	00001602 	andeq	r1, r0, r2, lsl #12
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	00001618 	andeq	r1, r0, r8, lsl r6
     52c:	0000161a 	andeq	r1, r0, sl, lsl r6
     530:	0000161e 	andeq	r1, r0, lr, lsl r6
     534:	00001622 	andeq	r1, r0, r2, lsr #12
	...
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     540:	00001606 	andeq	r1, r0, r6, lsl #12
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	0000160a 	andeq	r1, r0, sl, lsl #12
     548:	0000160c 	andeq	r1, r0, ip, lsl #12
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	0000160e 	andeq	r1, r0, lr, lsl #12
     550:	00001612 	andeq	r1, r0, r2, lsl r6
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	00001616 	andeq	r1, r0, r6, lsl r6
	...
					DEBUG_PRINT("\r\nDelete assemble le response");
     560:	0000161a 	andeq	r1, r0, sl, lsl r6
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	0000161e 	andeq	r1, r0, lr, lsl r6
     568:	00001638 	andeq	r1, r0, r8, lsr r6
     56c:	0000163c 	andeq	r1, r0, ip, lsr r6
     570:	0000163e 	andeq	r1, r0, lr, lsr r6
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	00001646 	andeq	r1, r0, r6, asr #12
	...
						DEBUG_PRINT("\r\nDelete rec fourth if");
     580:	00001630 	andeq	r1, r0, r0, lsr r6
     584:	00001632 	andeq	r1, r0, r2, lsr r6
     588:	00001634 	andeq	r1, r0, r4, lsr r6
     58c:	00001638 	andeq	r1, r0, r8, lsr r6
	...
     598:	00001674 	andeq	r1, r0, r4, ror r6
     59c:	00001678 	andeq	r1, r0, r8, ror r6
     5a0:	0000167a 	andeq	r1, r0, sl, ror r6
     5a4:	00001682 	andeq	r1, r0, r2, lsl #13
	...
     5b0:	00001678 	andeq	r1, r0, r8, ror r6
     5b4:	0000167a 	andeq	r1, r0, sl, ror r6
     5b8:	00001686 	andeq	r1, r0, r6, lsl #13
     5bc:	00001688 	andeq	r1, r0, r8, lsl #13
	...
     5c8:	000016a6 	andeq	r1, r0, r6, lsr #13
     5cc:	000016a8 	andeq	r1, r0, r8, lsr #13
     5d0:	000016aa 	andeq	r1, r0, sl, lsr #13
     5d4:	000016ac 	andeq	r1, r0, ip, lsr #13
	...
     5e0:	000016a8 	andeq	r1, r0, r8, lsr #13
     5e4:	000016aa 	andeq	r1, r0, sl, lsr #13
     5e8:	000016ac 	andeq	r1, r0, ip, lsr #13
     5ec:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
	...
     5f8:	00001706 	andeq	r1, r0, r6, lsl #14
     5fc:	00001708 	andeq	r1, r0, r8, lsl #14
     600:	00001708 	andeq	r1, r0, r8, lsl #14
     604:	0000170a 	andeq	r1, r0, sl, lsl #14
	...
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     610:	0000170e 	andeq	r1, r0, lr, lsl #14
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	00001712 	andeq	r1, r0, r2, lsl r7
				DEBUG_PRINT("\r\nretrieve rec");
     618:	00001714 	andeq	r1, r0, r4, lsl r7
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	00001716 	andeq	r1, r0, r6, lsl r7
	...
     628:	00000001 	andeq	r0, r0, r1
     62c:	00000001 	andeq	r0, r0, r1
     630:	00000001 	andeq	r0, r0, r1
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	00000001 	andeq	r0, r0, r1
	...
    return node->data_base.item_array[index];
     640:	000017c8 	andeq	r1, r0, r8, asr #15
     644:	000017c8 	andeq	r1, r0, r8, asr #15
     648:	000017cc 	andeq	r1, r0, ip, asr #15
     64c:	000017d8 	ldrdeq	r1, [r0], -r8
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	00000ce4 	andeq	r0, r0, r4, ror #25
     65c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     660:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	00000d1c 	andeq	r0, r0, ip, lsl sp
     668:	00000d1c 	andeq	r0, r0, ip, lsl sp
     66c:	00000d46 	andeq	r0, r0, r6, asr #26
     670:	00000d48 	andeq	r0, r0, r8, asr #26
     674:	00000d84 	andeq	r0, r0, r4, lsl #27
     678:	00000d84 	andeq	r0, r0, r4, lsl #27
     67c:	00000dc4 	andeq	r0, r0, r4, asr #27
     680:	00000001 	andeq	r0, r0, r1
				DEBUG_PRINT("\r\nResponse");
     684:	00000001 	andeq	r0, r0, r1
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	00000dc4 	andeq	r0, r0, r4, asr #27
				DEBUG_PRINT("\r\nResponse");
     68c:	00000e18 	andeq	r0, r0, r8, lsl lr
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	00000e18 	andeq	r0, r0, r8, lsl lr
     694:	00000e58 	andeq	r0, r0, r8, asr lr
     698:	00000e58 	andeq	r0, r0, r8, asr lr
     69c:	00000e80 	andeq	r0, r0, r0, lsl #29
     6a0:	00000e80 	andeq	r0, r0, r0, lsl #29
				if(!response_flag){
     6a4:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     6a8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
					response_flag=1;
     6ac:	00000fe4 	andeq	r0, r0, r4, ror #31
					trigger(&response_flag);
     6b0:	00000fe4 	andeq	r0, r0, r4, ror #31
				switch(response_message_5->status){
     6b4:	00001038 	andeq	r1, r0, r8, lsr r0
     6b8:	00001038 	andeq	r1, r0, r8, lsr r0
     6bc:	00001070 	andeq	r1, r0, r0, ror r0
     6c0:	00001070 	andeq	r1, r0, r0, ror r0
     6c4:	00001180 	andeq	r1, r0, r0, lsl #3
						if (response_checker[0] == response_message_5->request_number){
     6c8:	00000001 	andeq	r0, r0, r1
     6cc:	00000001 	andeq	r0, r0, r1
     6d0:	00001180 	andeq	r1, r0, r0, lsl #3
							switch(response_checker[1]){
     6d4:	00001240 	andeq	r1, r0, r0, asr #4
     6d8:	00001240 	andeq	r1, r0, r0, asr #4
     6dc:	00001284 	andeq	r1, r0, r4, lsl #5
     6e0:	00001284 	andeq	r1, r0, r4, lsl #5
						proceed response_4;
     6e4:	000012c0 	andeq	r1, r0, r0, asr #5
						break;
     6e8:	000012c0 	andeq	r1, r0, r0, asr #5
									proceed response_1_delete;
     6ec:	00001364 	andeq	r1, r0, r4, ror #6
									proceed response_1_retrieve;
     6f0:	00001364 	andeq	r1, r0, r4, ror #6
						proceed response_2;
     6f4:	0000151c 	andeq	r1, r0, ip, lsl r5
						proceed response_3;
     6f8:	0000151c 	andeq	r1, r0, ip, lsl r5
						proceed response_4;
     6fc:	00001540 	andeq	r1, r0, r0, asr #10
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
}
     708:	00001540 	andeq	r1, r0, r0, asr #10
     70c:	00001798 	muleq	r0, r8, r7
     710:	00001798 	muleq	r0, r8, r7
     714:	000017c8 	andeq	r1, r0, r8, asr #15
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	000017c8 	andeq	r1, r0, r8, asr #15
fsm root {
     724:	00001828 	andeq	r1, r0, r8, lsr #16
	...
     730:	000018e4 	andeq	r1, r0, r4, ror #17
     734:	000018e6 	andeq	r1, r0, r6, ror #17
     738:	000018e6 	andeq	r1, r0, r6, ror #17
     73c:	000018e8 	andeq	r1, r0, r8, ror #17
	...
     748:	0000194e 	andeq	r1, r0, lr, asr #18
     74c:	000019f0 	strdeq	r1, [r0], -r0
     750:	000019f4 	strdeq	r1, [r0], -r4
     754:	000019f8 	strdeq	r1, [r0], -r8
	...
     760:	00001dc4 	andeq	r1, r0, r4, asr #27
     764:	00001dc6 	andeq	r1, r0, r6, asr #27
     768:	00001dca 	andeq	r1, r0, sl, asr #27
     76c:	00001dcc 	andeq	r1, r0, ip, asr #27
     770:	00001dd0 	ldrdeq	r1, [r0], -r0
		node_db = init_node(node_db);
     774:	00001dd4 	ldrdeq	r1, [r0], -r4
     778:	00001dd6 	ldrdeq	r1, [r0], -r6
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	00001de0 	andeq	r1, r0, r0, ror #27
	...
		tcv_plug (0, &plug_null);
     788:	00001e12 	andeq	r1, r0, r2, lsl lr
     78c:	00001e14 	andeq	r1, r0, r4, lsl lr
		sfd = tcv_open (WNONE, 0, 0);
     790:	00001e16 	andeq	r1, r0, r6, lsl lr
     794:	00001e1a 	andeq	r1, r0, sl, lsl lr
     798:	00001eaa 	andeq	r1, r0, sl, lsr #29
		if (sfd < 0) {
     79c:	00001f0c 	andeq	r1, r0, ip, lsl #30
     7a0:	00001f10 	andeq	r1, r0, r0, lsl pc
			diag("Cannot open tcv interface");
     7a4:	00001f14 	andeq	r1, r0, r4, lsl pc
			halt();
     7a8:	00001f16 	andeq	r1, r0, r6, lsl pc
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	00001f18 	andeq	r1, r0, r8, lsl pc
	...
		runfsm receiver(node_db);
     7b8:	00001e2e 	andeq	r1, r0, lr, lsr #28
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	00001e30 	andeq	r1, r0, r0, lsr lr
     7c0:	00001e30 	andeq	r1, r0, r0, lsr lr
     7c4:	00001e32 	andeq	r1, r0, r2, lsr lr
	...
     7d0:	00001828 	andeq	r1, r0, r8, lsr #16
     7d4:	00001864 	andeq	r1, r0, r4, ror #16
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	00001864 	andeq	r1, r0, r4, ror #16
     7dc:	000018e4 	andeq	r1, r0, r4, ror #17
     7e0:	000018e4 	andeq	r1, r0, r4, ror #17
		switch(CHOICE) {
     7e4:	000018fc 	strdeq	r1, [r0], -ip
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	000018fc 	strdeq	r1, [r0], -ip
     7f4:	0000190c 	andeq	r1, r0, ip, lsl #18
     7f8:	0000190c 	andeq	r1, r0, ip, lsl #18
     7fc:	00001938 	andeq	r1, r0, r8, lsr r9
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
     808:	00001938 	andeq	r1, r0, r8, lsr r9
     80c:	0000193e 	andeq	r1, r0, lr, lsr r9
				proceed menu;
     810:	00001940 	andeq	r1, r0, r0, asr #18
				proceed get_new_group_id;
     814:	00001a0c 	andeq	r1, r0, ip, lsl #20
				proceed menu;
     818:	00001a0c 	andeq	r1, r0, ip, lsl #20
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	00001a20 	andeq	r1, r0, r0, lsr #20
     820:	00001a20 	andeq	r1, r0, r0, lsr #20
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	00001a54 	andeq	r1, r0, r4, asr sl
     828:	00001a54 	andeq	r1, r0, r4, asr sl
     82c:	00001a88 	andeq	r1, r0, r8, lsl #21
		DEBUG_PRINT("setting node group ID");
     830:	00000001 	andeq	r0, r0, r1
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	00000001 	andeq	r0, r0, r1
    node->gid = gid; 
     838:	00001a88 	andeq	r1, r0, r8, lsl #21
		proceed menu;
     83c:	00001aac 	andeq	r1, r0, ip, lsr #21
     840:	00001aac 	andeq	r1, r0, ip, lsr #21
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	00001ae4 	andeq	r1, r0, r4, ror #21
     848:	00000001 	andeq	r0, r0, r1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	00000001 	andeq	r0, r0, r1
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	00000001 	andeq	r0, r0, r1
    node->id = id;
     860:	00001ae4 	andeq	r1, r0, r4, ror #21
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	00001b08 	andeq	r1, r0, r8, lsl #22
     868:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Out of Range", 50);
     86c:	00000001 	andeq	r0, r0, r1
     870:	00001b08 	andeq	r1, r0, r8, lsl #22
     874:	00001b16 	andeq	r1, r0, r6, lsl fp
			proceed invalid_node_id;
     878:	00001b16 	andeq	r1, r0, r6, lsl fp
fsm root {
     87c:	00001b26 	andeq	r1, r0, r6, lsr #22
				strncpy(reason, "ID is already in use", 50);
     880:	00001b26 	andeq	r1, r0, r6, lsr #22
		for(int i = 0; i < node_db->index; i++){
     884:	00001b42 	andeq	r1, r0, r2, asr #22
     888:	00000001 	andeq	r0, r0, r1
		proceed menu;
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	00000001 	andeq	r0, r0, r1
     898:	00001b42 	andeq	r1, r0, r2, asr #22
     89c:	00001b56 	andeq	r1, r0, r6, asr fp
     8a0:	00001b56 	andeq	r1, r0, r6, asr fp
		proceed get_new_node_id;
     8a4:	00001b64 	andeq	r1, r0, r4, ror #22
		if (!clear_node_neighbour_array(node_db)){
     8a8:	00001b64 	andeq	r1, r0, r4, ror #22
     8ac:	00001b88 	andeq	r1, r0, r8, lsl #23
     8b0:	00001b88 	andeq	r1, r0, r8, lsl #23
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	00001c24 	andeq	r1, r0, r4, lsr #24
     8b8:	00001c24 	andeq	r1, r0, r4, lsr #24
			proceed error;
     8bc:	00001c74 	andeq	r1, r0, r4, ror ip
     8c0:	00001c74 	andeq	r1, r0, r4, ror ip
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	00001d0c 	andeq	r1, r0, ip, lsl #26
		request_packet->gid = node_db->gid;
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
		request_packet->request_number = generate_request_num();
     8d8:	00001d0c 	andeq	r1, r0, ip, lsl #26
		request_packet->sender_id = node_db->id;
     8dc:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
     8e0:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
     8e4:	00001de8 	andeq	r1, r0, r8, ror #27
		call sender(request_packet, wait_discovery);
     8e8:	00001de8 	andeq	r1, r0, r8, ror #27
     8ec:	00001e00 	andeq	r1, r0, r0, lsl #28
     8f0:	00000001 	andeq	r0, r0, r1
			release;
     8f4:	00000001 	andeq	r0, r0, r1
				proceed get_new_node_id;
     8f8:	00000001 	andeq	r0, r0, r1
				proceed clear_neighbour_array;
     8fc:	00000001 	andeq	r0, r0, r1
				proceed create_proto_start;
     900:	00001e00 	andeq	r1, r0, r0, lsl #28
				proceed start_delete_proto;
     904:	00001f3c 	andeq	r1, r0, ip, lsr pc
				proceed start_retrieve_proto;
     908:	00001f3c 	andeq	r1, r0, ip, lsr pc
				proceed display_db;
     90c:	00001f60 	andeq	r1, r0, r0, ror #30
	...
			if(node_db->id == node_db->nnodes[i]){
     918:	00002020 	andeq	r2, r0, r0, lsr #32
     91c:	00002026 	andeq	r2, r0, r6, lsr #32
				strncpy(reason, "ID is already in use", 50);
     920:	0000202c 	andeq	r2, r0, ip, lsr #32
     924:	00002030 	andeq	r2, r0, r0, lsr r0
     928:	00002038 	andeq	r2, r0, r8, lsr r0
				proceed invalid_node_id;
     92c:	00002058 	andeq	r2, r0, r8, asr r0
	...
		if (discovery_wait_flag == 0){
     938:	00000001 	andeq	r0, r0, r1
			delay(3000, find_proto_start);
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
	...
			delay(3000, display_neighbour_nodes);
     950:	00001f60 	andeq	r1, r0, r0, ror #30
     954:	00001f76 	andeq	r1, r0, r6, ror pc
     958:	00001f76 	andeq	r1, r0, r6, ror pc
     95c:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     960:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     964:	00001f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
     968:	00001fa0 	andeq	r1, r0, r0, lsr #31
     96c:	00001fec 	andeq	r1, r0, ip, ror #31
     970:	00001fec 	andeq	r1, r0, ip, ror #31
     974:	00002078 	andeq	r2, r0, r8, ror r0
     978:	00002078 	andeq	r2, r0, r8, ror r0
     97c:	000020e8 	andeq	r2, r0, r8, ror #1
     980:	000020e8 	andeq	r2, r0, r8, ror #1
     984:	000021a8 	andeq	r2, r0, r8, lsr #3
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
     990:	000021a8 	andeq	r2, r0, r8, lsr #3
     994:	000021cc 	andeq	r2, r0, ip, asr #3
     998:	000021cc 	andeq	r2, r0, ip, asr #3
     99c:	0000224c 	andeq	r2, r0, ip, asr #4
     9a0:	00000001 	andeq	r0, r0, r1
		if(node_db->index == 0){
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
			proceed menu;
     9b0:	0000224c 	andeq	r2, r0, ip, asr #4
fsm root {
     9b4:	00002308 	andeq	r2, r0, r8, lsl #6
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	00000001 	andeq	r0, r0, r1
		for (int i=0; i<node_db->index; i++) {
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
		proceed menu;
     9c8:	00000001 	andeq	r0, r0, r1
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	00000001 	andeq	r0, r0, r1
     9d0:	00002308 	andeq	r2, r0, r8, lsl #6
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	00002334 	andeq	r2, r0, r4, lsr r3
     9d8:	00002334 	andeq	r2, r0, r4, lsr r3
     9dc:	00002394 	muleq	r0, r4, r3
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper ID", 50);
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
     9f0:	00000001 	andeq	r0, r0, r1
			proceed error;
     9f4:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	00000001 	andeq	r0, r0, r1
     9fc:	00000001 	andeq	r0, r0, r1
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	00002394 	muleq	r0, r4, r3
     a04:	000023fc 	strdeq	r2, [r0], -ip
     a08:	000023fc 	strdeq	r2, [r0], -ip
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	0000244c 	andeq	r2, r0, ip, asr #8
		create_message->gid = node_db->gid;
     a10:	0000244c 	andeq	r2, r0, ip, asr #8
     a14:	000024e8 	andeq	r2, r0, r8, ror #9
     a18:	000024e8 	andeq	r2, r0, r8, ror #9
		create_message->tpe = CREATE_RECORD;
     a1c:	00002528 	andeq	r2, r0, r8, lsr #10
		create_message->request_number = generate_request_num();
     a20:	00002528 	andeq	r2, r0, r8, lsr #10
		create_message->sender_id = node_db->id;
     a24:	0000255c 	andeq	r2, r0, ip, asr r5
     a28:	0000255c 	andeq	r2, r0, ip, asr r5
     a2c:	00002598 	muleq	r0, r8, r5
		strncpy(create_message->record, user_provided_record, 20);
     a30:	00000001 	andeq	r0, r0, r1
		create_message->receiver_id = user_provided_receiver_id;
     a34:	00000001 	andeq	r0, r0, r1
		strncpy(create_message->record, user_provided_record, 20);
     a38:	00002598 	muleq	r0, r8, r5
		response_checker[0] = create_message->request_number;
     a3c:	0000259a 	muleq	r0, sl, r5
	...
		response_checker[1] = create_message->tpe;
     a48:	0000259a 	muleq	r0, sl, r5
		call sender(create_message, wait);
     a4c:	0000259c 	muleq	r0, ip, r5
     a50:	0000259c 	muleq	r0, ip, r5
     a54:	0000259e 	muleq	r0, lr, r5
     a58:	0000259e 	muleq	r0, lr, r5
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5c:	000025a0 	andeq	r2, r0, r0, lsr #11
     a60:	000025a0 	andeq	r2, r0, r0, lsr #11
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a64:	000025e4 	andeq	r2, r0, r4, ror #11
	...
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper node ID", 50);
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
			proceed error;
     a80:	00000001 	andeq	r0, r0, r1
     a84:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a88:	00000001 	andeq	r0, r0, r1
     a8c:	00000001 	andeq	r0, r0, r1
	...
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a98:	00000001 	andeq	r0, r0, r1
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: invalid index", 50);
     aa0:	00000001 	andeq	r0, r0, r1
     aa4:	00000001 	andeq	r0, r0, r1
	...
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	00000001 	andeq	r0, r0, r1
     ab4:	00000001 	andeq	r0, r0, r1
     ab8:	00000001 	andeq	r0, r0, r1
		delete_record->gid = node_db->gid;
     abc:	00000001 	andeq	r0, r0, r1
		delete_record->tpe = DELETE_RECORD;
     ac0:	00000001 	andeq	r0, r0, r1
		delete_record->request_number = generate_request_num();
     ac4:	00000001 	andeq	r0, r0, r1
     ac8:	00000001 	andeq	r0, r0, r1
		call sender(delete_record, wait);
     acc:	00000001 	andeq	r0, r0, r1
	...
		delete_record->record_index = us_pr_in;
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
		response_checker[0] = delete_record->request_number;
     ae0:	00000001 	andeq	r0, r0, r1
		call sender(delete_record, wait);
     ae4:	00000001 	andeq	r0, r0, r1
	...
     af0:	00000001 	andeq	r0, r0, r1
     af4:	00000001 	andeq	r0, r0, r1
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	00000001 	andeq	r0, r0, r1
     afc:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	00000001 	andeq	r0, r0, r1
     b04:	00000001 	andeq	r0, r0, r1
	...
		if (get_id < 1 || get_id > 25){
     b10:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper node ID", 50);
     b14:	00000001 	andeq	r0, r0, r1
     b18:	00000001 	andeq	r0, r0, r1
     b1c:	00000001 	andeq	r0, r0, r1
	...
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b28:	000025f0 	strdeq	r2, [r0], -r0
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	000025f4 	strdeq	r2, [r0], -r4
     b30:	000025fa 	strdeq	r2, [r0], -sl
     b34:	000025fc 	strdeq	r2, [r0], -ip
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	0000260a 	andeq	r2, r0, sl, lsl #12
     b3c:	0000260a 	andeq	r2, r0, sl, lsl #12
			strncpy(reason, "Error: invalid index", 50);
     b40:	0000260c 	andeq	r2, r0, ip, lsl #12
     b44:	0000260e 	andeq	r2, r0, lr, lsl #12
	...
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	000025f6 	strdeq	r2, [r0], -r6
     b54:	000025f8 	strdeq	r2, [r0], -r8
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	0000260e 	andeq	r2, r0, lr, lsl #12
     b5c:	00002610 	andeq	r2, r0, r0, lsl r6
	...
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	000025f8 	strdeq	r2, [r0], -r8
		retrieve_record->request_number = generate_request_num();
     b6c:	000025fa 	strdeq	r2, [r0], -sl
     b70:	000025fc 	strdeq	r2, [r0], -ip
		retrieve_record->receiver_id = get_id;
     b74:	000025fe 	strdeq	r2, [r0], -lr
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	00002604 	andeq	r2, r0, r4, lsl #12
		retrieve_record->record_index = beg_for_index;
     b7c:	00002604 	andeq	r2, r0, r4, lsl #12
	...
		response_checker[0] = retrieve_record->request_number;
     b88:	00002628 	andeq	r2, r0, r8, lsr #12
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	00002630 	andeq	r2, r0, r0, lsr r6
		response_checker[1] = retrieve_record->tpe;
     b90:	0000263a 	andeq	r2, r0, sl, lsr r6
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	0000263a 	andeq	r2, r0, sl, lsr r6
     b98:	0000263e 	andeq	r2, r0, lr, lsr r6
		call sender(retrieve_record, wait);
     b9c:	00002640 	andeq	r2, r0, r0, asr #12
	...
     ba8:	00002640 	andeq	r2, r0, r0, asr #12
     bac:	00002640 	andeq	r2, r0, r0, asr #12
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	00002642 	andeq	r2, r0, r2, asr #12
     bb4:	00002644 	andeq	r2, r0, r4, asr #12
	...
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bc0:	00002650 	andeq	r2, r0, r0, asr r6
		if(node_db->data_base.item_count != 0){
     bc4:	00002652 	andeq	r2, r0, r2, asr r6
     bc8:	00002654 	andeq	r2, r0, r4, asr r6
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	00002658 	andeq	r2, r0, r8, asr r6
	...
			while(i <= node_db->data_base.item_count){
     bd8:	00002670 	andeq	r2, r0, r0, ror r6
     bdc:	00002672 	andeq	r2, r0, r2, ror r6
			i = 0;
     be0:	00002676 	andeq	r2, r0, r6, ror r6
		ser_out(menu, "\r\n");
     be4:	00002678 	andeq	r2, r0, r8, ror r6
     be8:	0000267e 	andeq	r2, r0, lr, ror r6
		delete_all(node_db);
     bec:	0000268e 	andeq	r2, r0, lr, lsl #13
	...
		delay(3000, timeout);
     bf8:	00002670 	andeq	r2, r0, r0, ror r6
     bfc:	00002672 	andeq	r2, r0, r2, ror r6
     c00:	00002676 	andeq	r2, r0, r6, ror r6
		when(&response_flag, menu);
     c04:	00002678 	andeq	r2, r0, r8, ror r6
     c08:	0000267e 	andeq	r2, r0, lr, ror r6
			if(i == 0){
     c0c:	0000267e 	andeq	r2, r0, lr, ror r6
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c10:	00002680 	andeq	r2, r0, r0, lsl #13
     c14:	00002682 	andeq	r2, r0, r2, lsl #13
	...
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c20:	000026d6 	ldrdeq	r2, [r0], -r6
     c24:	000026da 	ldrdeq	r2, [r0], -sl
		for (int i=0; i<node_db->index; i++) {
     c28:	000026dc 	ldrdeq	r2, [r0], -ip
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	000026de 	ldrdeq	r2, [r0], -lr
	...
     c38:	000026e2 	andeq	r2, r0, r2, ror #13
     c3c:	000026e2 	andeq	r2, r0, r2, ror #13
     c40:	000026e4 	andeq	r2, r0, r4, ror #13
     c44:	000026e6 	andeq	r2, r0, r6, ror #13
	...
		ser_out(timeout, "\r\nFailed to reach the destination");
     c50:	00000001 	andeq	r0, r0, r1
		proceed menu;
     c54:	00000001 	andeq	r0, r0, r1
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	00000001 	andeq	r0, r0, r1
     c5c:	00000001 	andeq	r0, r0, r1
	...
}
     c68:	00000001 	andeq	r0, r0, r1
     c6c:	00000001 	andeq	r0, r0, r1
     c70:	00000001 	andeq	r0, r0, r1
     c74:	00000001 	andeq	r0, r0, r1
	...
     c80:	00000001 	andeq	r0, r0, r1
     c84:	00000001 	andeq	r0, r0, r1
     c88:	00000001 	andeq	r0, r0, r1
     c8c:	00000001 	andeq	r0, r0, r1
	...
     c98:	00000001 	andeq	r0, r0, r1
     c9c:	00000001 	andeq	r0, r0, r1
     ca0:	00000001 	andeq	r0, r0, r1
     ca4:	00000001 	andeq	r0, r0, r1
	...
     cb0:	000025ec 	andeq	r2, r0, ip, ror #11
     cb4:	00002620 	andeq	r2, r0, r0, lsr #12
     cb8:	00002620 	andeq	r2, r0, r0, lsr #12
     cbc:	00002650 	andeq	r2, r0, r0, asr r6
     cc0:	00002650 	andeq	r2, r0, r0, asr r6
     cc4:	00002668 	andeq	r2, r0, r8, ror #12
     cc8:	00002668 	andeq	r2, r0, r8, ror #12
     ccc:	000026bc 			; <UNDEFINED> instruction: 0x000026bc
     cd0:	000026bc 			; <UNDEFINED> instruction: 0x000026bc
     cd4:	000026fc 	strdeq	r2, [r0], -ip
     cd8:	000026fc 	strdeq	r2, [r0], -ip
     cdc:	00002720 	andeq	r2, r0, r0, lsr #14
     ce0:	00002720 	andeq	r2, r0, r0, lsr #14
static void devinit_uart (int devnum) {
     ce4:	00002734 	andeq	r2, r0, r4, lsr r7
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	00002734 	andeq	r2, r0, r4, lsr r7
     cec:	00002748 	andeq	r2, r0, r8, asr #14
void udelay (volatile word n) {
     cf0:	00000001 	andeq	r0, r0, r1
     cf4:	00000001 	andeq	r0, r0, r1
	while (n) {
     cf8:	00000001 	andeq	r0, r0, r1
     cfc:	00000001 	andeq	r0, r0, r1
}
     d00:	00000001 	andeq	r0, r0, r1
	while (n--);
     d04:	00000001 	andeq	r0, r0, r1
     d08:	00000001 	andeq	r0, r0, r1
     d0c:	00000001 	andeq	r0, r0, r1
		n--;
     d10:	00000001 	andeq	r0, r0, r1
     d14:	00000001 	andeq	r0, r0, r1
     d18:	00000001 	andeq	r0, r0, r1
void mdelay (volatile word n) {
     d1c:	00000001 	andeq	r0, r0, r1
     d20:	00000001 	andeq	r0, r0, r1
	while (n) {
     d24:	00000001 	andeq	r0, r0, r1
	...
		udelay (999);
     d30:	00002748 	andeq	r2, r0, r8, asr #14
     d34:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
	...
		n--;
     d40:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
     d44:	0000282c 	andeq	r2, r0, ip, lsr #16
	...
		if (__pi_systat.effpdm > 1)
     d50:	0000282c 	andeq	r2, r0, ip, lsr #16
     d54:	00002880 	andeq	r2, r0, r0, lsl #17
	...
	PRCMPowerDomainOn (d);
     d60:	00002880 	andeq	r2, r0, r0, lsl #17
     d64:	000028e0 	andeq	r2, r0, r0, ror #17
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d70:	00002b06 	andeq	r2, r0, r6, lsl #22
	__pi_systat.ondmns |= d;
     d74:	00002b08 	andeq	r2, r0, r8, lsl #22
     d78:	00002b1c 	andeq	r2, r0, ip, lsl fp
}
     d7c:	00002b1e 	andeq	r2, r0, lr, lsl fp
     d80:	00002b20 	andeq	r2, r0, r0, lsr #22
void __pi_offdomain (lword d) {
     d84:	00002b22 	andeq	r2, r0, r2, lsr #22
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	00002b90 	muleq	r0, r0, fp
     d94:	00002b96 	muleq	r0, r6, fp
     d98:	00002b9a 	muleq	r0, sl, fp
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	00002b9c 	muleq	r0, ip, fp
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da8:	00002bbe 			; <UNDEFINED> instruction: 0x00002bbe
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	00002bc4 	andeq	r2, r0, r4, asr #23
     db0:	00002bc6 	andeq	r2, r0, r6, asr #23
	__pi_systat.ondmns &= ~d;
     db4:	00002bc8 	andeq	r2, r0, r8, asr #23
	...
}
     dc0:	00002bcc 	andeq	r2, r0, ip, asr #23
void __pi_syserror (word ec, const char *m) {
     dc4:	00002bd8 	ldrdeq	r2, [r0], -r8
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	00002bd8 	ldrdeq	r2, [r0], -r8
     dcc:	00002bdc 	ldrdeq	r2, [r0], -ip
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	00002bde 	ldrdeq	r2, [r0], -lr
     dd4:	00002c02 	andeq	r2, r0, r2, lsl #24
	...
		all_leds_blink;
     de0:	00002bdc 	ldrdeq	r2, [r0], -ip
     de4:	00002bde 	ldrdeq	r2, [r0], -lr
     de8:	00002c02 	andeq	r2, r0, r2, lsl #24
     dec:	00002c3c 	andeq	r2, r0, ip, lsr ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	00002c3e 	andeq	r2, r0, lr, lsr ip
     df4:	00002c50 	andeq	r2, r0, r0, asr ip
	...
     e00:	00002d10 	andeq	r2, r0, r0, lsl sp
     e04:	00002d10 	andeq	r2, r0, r0, lsl sp
	while (1) {
     e08:	00002d14 	andeq	r2, r0, r4, lsl sp
     e0c:	00002d2e 	andeq	r2, r0, lr, lsr #26
     e10:	00002d30 	andeq	r2, r0, r0, lsr sp
     e14:	00002d32 	andeq	r2, r0, r2, lsr sp
void tci_run_delay_timer () {
     e18:	00002d34 	andeq	r2, r0, r4, lsr sp
	setdel = __pi_mintk - __pi_old;
     e1c:	00002d36 	andeq	r2, r0, r6, lsr sp
     e20:	00002d3a 	andeq	r2, r0, sl, lsr sp
     e24:	00002d44 	andeq	r2, r0, r4, asr #26
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e30:	00002e56 	andeq	r2, r0, r6, asr lr
     e34:	00002e5a 	andeq	r2, r0, sl, asr lr
     e38:	00002e76 	andeq	r2, r0, r6, ror lr
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	00002e7a 	andeq	r2, r0, sl, ror lr
	...
}
     e48:	00002e5a 	andeq	r2, r0, sl, asr lr
     e4c:	00002e76 	andeq	r2, r0, r6, ror lr
     e50:	00002e7a 	andeq	r2, r0, sl, ror lr
     e54:	00002e82 	andeq	r2, r0, r2, lsl #29
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	00002fee 	andeq	r2, r0, lr, ror #31
     e64:	00002ff0 	strdeq	r2, [r0], -r0
     e68:	00002ff2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     e6c:	00002ff6 	strdeq	r2, [r0], -r6
	...
}
     e78:	00002ff0 	strdeq	r2, [r0], -r0
     e7c:	00002ff2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
void AONRTCIntHandler () {
     e80:	00002ff6 	strdeq	r2, [r0], -r6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	0000301c 	andeq	r3, r0, ip, lsl r0
	...
		if (__pi_utims [0] == 0)
     e90:	00003064 	andeq	r3, r0, r4, rrx
     e94:	00003066 	andeq	r3, r0, r6, rrx
		if (*(__pi_utims [0])) {
     e98:	0000306a 	andeq	r3, r0, sl, rrx
     e9c:	00003070 	andeq	r3, r0, r0, ror r0
			(*(__pi_utims [0]))--;
     ea0:	00003072 	andeq	r3, r0, r2, ror r0
		if (__pi_utims [1] == 0)
     ea4:	000030be 	strheq	r3, [r0], -lr
		if (*(__pi_utims [1])) {
     ea8:	000030c0 	andeq	r3, r0, r0, asr #1
			aux_timer_inactive = 0;
     eac:	000030c4 	andeq	r3, r0, r4, asr #1
			(*(__pi_utims [1]))--;
     eb0:	000030c6 	andeq	r3, r0, r6, asr #1
		if (__pi_utims [2] == 0)
     eb4:	000030d6 	ldrdeq	r3, [r0], -r6
		if (*(__pi_utims [2])) {
     eb8:	000030da 	ldrdeq	r3, [r0], -sl
			(*(__pi_utims [2]))--;
     ebc:	000030de 	ldrdeq	r3, [r0], -lr
		if (__pi_utims [3] != 0) {
     ec0:	00003110 	andeq	r3, r0, r0, lsl r1
			if (*(__pi_utims [3])) {
     ec4:	00003114 	andeq	r3, r0, r4, lsl r1
	...
	if (__pi_systat.ledsts) {
     ed0:	0000311a 	andeq	r3, r0, sl, lsl r1
     ed4:	0000311c 	andeq	r3, r0, ip, lsl r1
		if (__pi_systat.ledblc++ == 0) {
     ed8:	0000311e 	andeq	r3, r0, lr, lsl r1
     edc:	0000314c 	andeq	r3, r0, ip, asr #2
	...
			if (__pi_systat.ledblk) {
     ee8:	000028e0 	andeq	r2, r0, r0, ror #17
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	00002900 	andeq	r2, r0, r0, lsl #18
     ef0:	00002900 	andeq	r2, r0, r0, lsl #18
				if (__pi_systat.ledsts & 0x2)
     ef4:	00002a90 	muleq	r0, r0, sl
     ef8:	00002a90 	muleq	r0, r0, sl
     efc:	00002ad8 	ldrdeq	r2, [r0], -r8
				if (__pi_systat.ledsts & 0x4)
     f00:	00002ad8 	ldrdeq	r2, [r0], -r8
				__pi_systat.ledblk = 0;
     f04:	00002afc 	strdeq	r2, [r0], -ip
     f08:	00002afc 	strdeq	r2, [r0], -ip
			if (__pi_systat.fstblk)
     f0c:	00002b58 	andeq	r2, r0, r8, asr fp
     f10:	00002b58 	andeq	r2, r0, r8, asr fp
				__pi_systat.ledblc = 200;
     f14:	00002b90 	muleq	r0, r0, fp
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	00002b90 	muleq	r0, r0, fp
		cli_tim;
     f1c:	00002d10 	andeq	r2, r0, r0, lsl sp
		__pi_new += setdel;
     f20:	00002d10 	andeq	r2, r0, r0, lsl sp
     f24:	00002de0 	andeq	r2, r0, r0, ror #27
		setdel = 0;
     f28:	00002de0 	andeq	r2, r0, r0, ror #27
		RISE_N_SHINE;
     f2c:	00002fd0 	ldrdeq	r2, [r0], -r0
		__pi_new += setdel;
     f30:	00002fd0 	ldrdeq	r2, [r0], -r0
		RISE_N_SHINE;
     f34:	00003040 	andeq	r3, r0, r0, asr #32
     f38:	00003040 	andeq	r3, r0, r0, asr #32
		aux_timer_inactive = 1;
     f3c:	000031b4 			; <UNDEFINED> instruction: 0x000031b4
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	000031b4 			; <UNDEFINED> instruction: 0x000031b4
     f4c:	000031d8 	ldrdeq	r3, [r0], -r8
				if (__pi_systat.ledsts & 0x2)
     f50:	000031d8 	ldrdeq	r3, [r0], -r8
     f54:	000031fc 	strdeq	r3, [r0], -ip
     f58:	000031fc 	strdeq	r3, [r0], -ip
				if (__pi_systat.ledsts & 0x8)
     f5c:	00003204 	andeq	r3, r0, r4, lsl #4
				__pi_systat.ledblk = 1;
     f60:	00003204 	andeq	r3, r0, r4, lsl #4
     f64:	00003208 	andeq	r3, r0, r8, lsl #4
		if (aux_timer_inactive) {
     f68:	00003208 	andeq	r3, r0, r8, lsl #4
			cli_aux;
     f6c:	0000320c 	andeq	r3, r0, ip, lsl #4
     f70:	0000320c 	andeq	r3, r0, ip, lsl #4
     f74:	00003254 	andeq	r3, r0, r4, asr r2
	...
     f80:	00003262 	andeq	r3, r0, r2, ror #4
     f84:	00003262 	andeq	r3, r0, r2, ror #4
     f88:	00003268 	andeq	r3, r0, r8, ror #4
     f8c:	000032c4 	andeq	r3, r0, r4, asr #5
	...
	cli_tim;
     f98:	00003254 	andeq	r3, r0, r4, asr r2
     f9c:	000032c4 	andeq	r3, r0, r4, asr #5
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	000032d8 	ldrdeq	r3, [r0], -r8
     fac:	000033bc 			; <UNDEFINED> instruction: 0x000033bc
     fb0:	000033c2 	andeq	r3, r0, r2, asr #7
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	000033c6 	andeq	r3, r0, r6, asr #7
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	000033cc 	andeq	r3, r0, ip, asr #7
	return NO;
     fbc:	000033e0 	andeq	r3, r0, r0, ror #7
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc8:	000032c4 	andeq	r3, r0, r4, asr #5
}
     fcc:	000033e0 	andeq	r3, r0, r0, ror #7
	...
		return YES;
     fd8:	0000340c 	andeq	r3, r0, ip, lsl #8
     fdc:	0000340e 	andeq	r3, r0, lr, lsl #8
     fe0:	000034dc 	ldrdeq	r3, [r0], -ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	00003500 	andeq	r3, r0, r0, lsl #10
	UARTDisable (UART0_BASE);
     fe8:	00003502 	andeq	r3, r0, r2, lsl #10
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	0000354a 	andeq	r3, r0, sl, asr #10
	UARTDisable (UART0_BASE);
     ff0:	00003574 	andeq	r3, r0, r4, ror r5
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	00003576 	andeq	r3, r0, r6, ror r5
	...
    1000:	0000340e 	andeq	r3, r0, lr, lsl #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	00003410 	andeq	r3, r0, r0, lsl r4
    1008:	000034b2 			; <UNDEFINED> instruction: 0x000034b2
    100c:	000034dc 	ldrdeq	r3, [r0], -ip
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	00003500 	andeq	r3, r0, r0, lsl #10
    1014:	00003502 	andeq	r3, r0, r2, lsl #10
	...
}
    1020:	0000344e 	andeq	r3, r0, lr, asr #8
    1024:	00003456 	andeq	r3, r0, r6, asr r4
    1028:	000035fa 	strdeq	r3, [r0], -sl
    102c:	00003606 	andeq	r3, r0, r6, lsl #12
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	00003554 	andeq	r3, r0, r4, asr r5
    103c:	00003574 	andeq	r3, r0, r4, ror r5
    1040:	00003576 	andeq	r3, r0, r6, ror r5
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	000035ba 			; <UNDEFINED> instruction: 0x000035ba
	...
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    1050:	000033e0 	andeq	r3, r0, r0, ror #7
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	00003400 	andeq	r3, r0, r0, lsl #8
    1058:	00003400 	andeq	r3, r0, r0, lsl #8
    105c:	00003630 	andeq	r3, r0, r0, lsr r6
    1060:	00003630 	andeq	r3, r0, r0, lsr r6
    1064:	00003680 	andeq	r3, r0, r0, lsl #13
	...
	switch (operation) {
    1070:	00003694 	muleq	r0, r4, r6
static int ioreq_uart_a (int operation, char *buf, int len) {
    1074:	00003698 	muleq	r0, r8, r6
    1078:	00003972 	andeq	r3, r0, r2, ror r9
    107c:	000039ba 			; <UNDEFINED> instruction: 0x000039ba
	...
				*buf++ = uart_a_read;
    1088:	00003698 	muleq	r0, r8, r6
    108c:	0000369e 	muleq	r0, lr, r6
			while (len && uart_a_char_available) {
    1090:	000036d6 	ldrdeq	r3, [r0], -r6
    1094:	00003742 	andeq	r3, r0, r2, asr #14
    1098:	000039d6 	ldrdeq	r3, [r0], -r6
			if (len != operation) {
    109c:	000039f6 	strdeq	r3, [r0], -r6
	...
			uart_a_disable_int;
    10a8:	000037fa 	strdeq	r3, [r0], -sl
			if (uart_a_char_available) {
    10ac:	00003874 	andeq	r3, r0, r4, ror r8
				*buf++ = uart_a_read;
    10b0:	000039fe 	strdeq	r3, [r0], -lr
			uart_a_disable_int;
    10b4:	00003a06 	andeq	r3, r0, r6, lsl #20
	...
			if (uart_a_char_available) {
    10c0:	0000388c 	andeq	r3, r0, ip, lsl #17
				uart_a_enable_int;
    10c4:	000038e2 	andeq	r3, r0, r2, ror #17
    10c8:	00003958 	andeq	r3, r0, r8, asr r9
				goto Redo_rx;
    10cc:	00003972 	andeq	r3, r0, r2, ror r9
	...
			return -2;
    10d8:	000038e8 	andeq	r3, r0, r8, ror #17
    10dc:	00003958 	andeq	r3, r0, r8, asr r9
				uart_a_write (*buf);
    10e0:	000039ba 			; <UNDEFINED> instruction: 0x000039ba
    10e4:	000039c2 	andeq	r3, r0, r2, asr #19
			while (len && uart_a_room_in_tx) {
    10e8:	00003a06 	andeq	r3, r0, r6, lsl #20
    10ec:	00003a10 	andeq	r3, r0, r0, lsl sl
	...
			uart_a_disable_int;
    10f8:	00003680 	andeq	r3, r0, r0, lsl #13
    10fc:	00003a10 	andeq	r3, r0, r0, lsl sl
	...
				uart_a_enable_int;
    1108:	00003a10 	andeq	r3, r0, r0, lsl sl
    110c:	00003a38 	andeq	r3, r0, r8, lsr sl
				*buf++ = uart_a_read;
    1110:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
    1114:	00000001 	andeq	r0, r0, r1
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	00003a38 	andeq	r3, r0, r8, lsr sl
    1124:	00003a68 	andeq	r3, r0, r8, ror #20
	...
			uart_a_enable_int;
    1130:	00003a68 	andeq	r3, r0, r8, ror #20
			return 0;
    1134:	00003a88 	andeq	r3, r0, r8, lsl #21
			if (len == UART_CNTRL_SETRATE) {
    1138:	00003a88 	andeq	r3, r0, r8, lsl #21
				if (__pi_uart_setrate (*((word*)buf),
    113c:	00003aa0 	andeq	r3, r0, r0, lsr #21
	...
				syserror (EREQPAR, "uar");
    1148:	00003aa0 	andeq	r3, r0, r0, lsr #21
			syserror (ENOOPER, "uai");
    114c:	00003aa8 	andeq	r3, r0, r8, lsr #21
			if (len == UART_CNTRL_GETRATE) {
    1150:	00000001 	andeq	r0, r0, r1
				return 1;
    1154:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	00003aa8 	andeq	r3, r0, r8, lsr #21
			syserror (ENOOPER, "uai");
    115c:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
    1160:	00000001 	andeq	r0, r0, r1
    1164:	00000001 	andeq	r0, r0, r1
    1168:	00000001 	andeq	r0, r0, r1
    116c:	00000001 	andeq	r0, r0, r1
	...
    1178:	00003b12 	andeq	r3, r0, r2, lsl fp
    117c:	00003b22 	andeq	r3, r0, r2, lsr #22
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	00003b28 	andeq	r3, r0, r8, lsr #22
void UART0IntHandler () {
    1184:	00003b2a 	andeq	r3, r0, sl, lsr #22
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1190:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
    1194:	00003b0c 	andeq	r3, r0, ip, lsl #22
    1198:	00003b0c 	andeq	r3, r0, ip, lsl #22
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	00003b38 	andeq	r3, r0, r8, lsr fp
    11a0:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
    11a4:	00000001 	andeq	r0, r0, r1
    11a8:	00003b38 	andeq	r3, r0, r8, lsr fp
		i_trigger (devevent (UART_A, READ));
    11ac:	00003b50 	andeq	r3, r0, r0, asr fp
    11b0:	00003b50 	andeq	r3, r0, r0, asr fp
    11b4:	00003bb0 			; <UNDEFINED> instruction: 0x00003bb0
    11b8:	00003bb0 			; <UNDEFINED> instruction: 0x00003bb0
    11bc:	00003be4 	andeq	r3, r0, r4, ror #23
    11c0:	00000001 	andeq	r0, r0, r1
    11c4:	00000001 	andeq	r0, r0, r1
    11c8:	00000001 	andeq	r0, r0, r1
    11cc:	00000001 	andeq	r0, r0, r1
    11d0:	00000001 	andeq	r0, r0, r1
    11d4:	00000001 	andeq	r0, r0, r1
    11d8:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	00000001 	andeq	r0, r0, r1
	...
		i_trigger (devevent (UART_A, WRITE));
    11e8:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	00000001 	andeq	r0, r0, r1
    11f0:	00003be4 	andeq	r3, r0, r4, ror #23
		RISE_N_SHINE;
    11f4:	00003c0c 	andeq	r3, r0, ip, lsl #24
    11f8:	00003c0c 	andeq	r3, r0, ip, lsl #24
    11fc:	00003c58 	andeq	r3, r0, r8, asr ip
		i_trigger (devevent (UART_A, WRITE));
    1200:	00003c58 	andeq	r3, r0, r8, asr ip
    1204:	00003da8 	andeq	r3, r0, r8, lsr #27
    1208:	00003da8 	andeq	r3, r0, r8, lsr #27
    120c:	00003ec0 	andeq	r3, r0, r0, asr #29
    1210:	00003ec0 	andeq	r3, r0, r0, asr #29
    1214:	00003ee0 	andeq	r3, r0, r0, ror #29
    1218:	00000001 	andeq	r0, r0, r1
    121c:	00000001 	andeq	r0, r0, r1
    1220:	00003ee0 	andeq	r3, r0, r0, ror #29
    1224:	00003efc 	strdeq	r3, [r0], -ip
	...
}
    1230:	00003efc 	strdeq	r3, [r0], -ip
    1234:	00003fd0 	ldrdeq	r3, [r0], -r0
    1238:	00003fd0 	ldrdeq	r3, [r0], -r0
    123c:	00004074 	andeq	r4, r0, r4, ror r0
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1248:	00004082 	andeq	r4, r0, r2, lsl #1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	00004084 	andeq	r4, r0, r4, lsl #1
    1250:	00004088 	andeq	r4, r0, r8, lsl #1
    1254:	0000408c 	andeq	r4, r0, ip, lsl #1
	...
    1260:	00004390 	muleq	r0, r0, r3
    1264:	00004392 	muleq	r0, r2, r3
    1268:	00004394 	muleq	r0, r4, r3
    126c:	00004396 	muleq	r0, r6, r3
	...
}
    1278:	00004074 	andeq	r4, r0, r4, ror r0
    127c:	000040f0 	strdeq	r4, [r0], -r0
    1280:	000040f0 	strdeq	r4, [r0], -r0
void __pinlist_setirq (int val) {
    1284:	0000419c 	muleq	r0, ip, r1
	for (i = 0; i < N_PINLIST; i++) {
    1288:	0000419c 	muleq	r0, ip, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	000041f8 	strdeq	r4, [r0], -r8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	000041f8 	strdeq	r4, [r0], -r8
	for (i = 0; i < N_PINLIST; i++) {
    1294:	00004210 	andeq	r4, r0, r0, lsl r2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	00000001 	andeq	r0, r0, r1
    129c:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	00004210 	andeq	r4, r0, r0, lsl r2
    12a4:	00004220 	andeq	r4, r0, r0, lsr #4
    12a8:	00004220 	andeq	r4, r0, r0, lsr #4
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	00004234 	andeq	r4, r0, r4, lsr r2
}
    12b0:	00004234 	andeq	r4, r0, r4, lsr r2
    12b4:	00004298 	muleq	r0, r8, r2
    12b8:	00004298 	muleq	r0, r8, r2
    12bc:	000042ac 	andeq	r4, r0, ip, lsr #5
void GPIOIntHandler () {
    12c0:	000042ac 	andeq	r4, r0, ip, lsr #5
if (buttons_int) {
    12c4:	000042c0 	andeq	r4, r0, r0, asr #5
    12c8:	000042c0 	andeq	r4, r0, r0, asr #5
	buttons_disable ();
    12cc:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    12d0:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	i_trigger ((aword)&__button_list);
    12d4:	000042fc 	strdeq	r4, [r0], -ip
    12d8:	000042fc 	strdeq	r4, [r0], -ip
    12dc:	0000430c 	andeq	r4, r0, ip, lsl #6
    12e0:	0000430c 	andeq	r4, r0, ip, lsl #6
    12e4:	00004338 	andeq	r4, r0, r8, lsr r3
    12e8:	00004338 	andeq	r4, r0, r8, lsr r3
    12ec:	0000434c 	andeq	r4, r0, ip, asr #6
    12f0:	0000434c 	andeq	r4, r0, ip, asr #6
    12f4:	00004360 	andeq	r4, r0, r0, ror #6
    12f8:	00004360 	andeq	r4, r0, r0, ror #6
    12fc:	00004470 	andeq	r4, r0, r0, ror r4
	RISE_N_SHINE;
    1300:	00004470 	andeq	r4, r0, r0, ror r4
    1304:	000044d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1308:	000044d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
if (pin_sensor_int) {
    130c:	000044fc 	strdeq	r4, [r0], -ip
    1310:	000044fc 	strdeq	r4, [r0], -ip
	i_trigger ((aword)(&__input_pins));
    1314:	0000464c 	andeq	r4, r0, ip, asr #12
	...
    1320:	00000001 	andeq	r0, r0, r1
    1324:	00000001 	andeq	r0, r0, r1
    1328:	00000001 	andeq	r0, r0, r1
    132c:	00000001 	andeq	r0, r0, r1
	...
    1338:	000046c2 	andeq	r4, r0, r2, asr #13
    133c:	000046c4 	andeq	r4, r0, r4, asr #13
	__pinsen_disable_and_clear;
    1340:	000046c6 	andeq	r4, r0, r6, asr #13
	RISE_N_SHINE;
    1344:	000046ca 	andeq	r4, r0, sl, asr #13
	...
}
    1350:	00000001 	andeq	r0, r0, r1
    1354:	00000001 	andeq	r0, r0, r1
    1358:	0000464c 	andeq	r4, r0, ip, asr #12
    135c:	0000486c 	andeq	r4, r0, ip, ror #16
    1360:	0000486c 	andeq	r4, r0, ip, ror #16
void system_init () {
    1364:	000048cc 	andeq	r4, r0, ip, asr #17
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	000048cc 	andeq	r4, r0, ip, asr #17
    1374:	000048e4 	andeq	r4, r0, r4, ror #17
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1380:	00004932 	andeq	r4, r0, r2, lsr r9
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	00004936 	andeq	r4, r0, r6, lsr r9
    1388:	0000493c 	andeq	r4, r0, ip, lsr r9
    138c:	0000493e 	andeq	r4, r0, lr, lsr r9
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	00004936 	andeq	r4, r0, r6, lsr r9
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	0000493c 	andeq	r4, r0, ip, lsr r9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	0000493e 	andeq	r4, r0, lr, lsr r9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	00004946 	andeq	r4, r0, r6, asr #18
	...
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	00000001 	andeq	r0, r0, r1
    13b8:	00000001 	andeq	r0, r0, r1
    13bc:	00000001 	andeq	r0, r0, r1
    13c0:	000048e4 	andeq	r4, r0, r4, ror #17
		if (port_confs [i] & 0x80)
    13c4:	00004930 	andeq	r4, r0, r0, lsr r9
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	00000001 	andeq	r0, r0, r1
    13cc:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x40)
    13d0:	00004930 	andeq	r4, r0, r0, lsr r9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	0000499c 	muleq	r0, ip, r9
    13d8:	0000499c 	muleq	r0, ip, r9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	000049b2 			; <UNDEFINED> instruction: 0x000049b2
	...
	all_leds_blink;
    13e8:	000049b4 			; <UNDEFINED> instruction: 0x000049b4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13ec:	000049dc 	ldrdeq	r4, [r0], -ip
    13f0:	000049dc 	ldrdeq	r4, [r0], -ip
    13f4:	000049e4 	andeq	r4, r0, r4, ror #19
    13f8:	00000001 	andeq	r0, r0, r1
    13fc:	00000001 	andeq	r0, r0, r1
    1400:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	00000001 	andeq	r0, r0, r1
    1408:	00000001 	andeq	r0, r0, r1
    140c:	00000001 	andeq	r0, r0, r1
    1410:	00000001 	andeq	r0, r0, r1
    1414:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_RTC_COMB);
    1428:	00000004 	andeq	r0, r0, r4
    142c:	00000006 	andeq	r0, r0, r6
	__pi_malloc_init ();
    1430:	0000000a 	andeq	r0, r0, sl
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	00000026 	andeq	r0, r0, r6, lsr #32
    1438:	00000028 	andeq	r0, r0, r8, lsr #32
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143c:	00000038 	andeq	r0, r0, r8, lsr r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	0000003e 	andeq	r0, r0, lr, lsr r0
    1444:	00000040 	andeq	r0, r0, r0, asr #32
    1448:	00000042 	andeq	r0, r0, r2, asr #32
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000e29 	andeq	r0, r0, r9, lsr #28
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      24:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      28:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      2c:	706f746b 	rsbvc	r7, pc, fp, ror #8
      30:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      34:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      38:	4349502f 	movtmi	r5, #36911	; 0x902f
      3c:	502f534f 	eorpl	r5, pc, pc, asr #6
			i = k;
      40:	534f6369 	movtpl	r6, #62313	; 0xf369
				j->Next = k;
      44:	3143432f 	cmpcc	r3, pc, lsr #6
      48:	2f585833 	svccs	0x00585833
}
      4c:	33314343 	teqcc	r1, #201326593	; 0xc000001
      50:	41575858 	cmpmi	r7, r8, asr r8
      54:	642f4552 	strtvs	r4, [pc], #-1362	; 5c <g_pfnVectors+0x5c>
		release;
      58:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
      5c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
			nq++;
      60:	73752f00 	cmnvc	r5, #0, 30
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
      68:	63672f62 	cmnvs	r7, #392	; 0x188
      6c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
      70:	6f6e2d6d 	svcvs	0x006e2d6d
      74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
      78:	2f696261 	svccs	0x00696261
      7c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
      80:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
      84:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      88:	752f0065 	strvc	r0, [pc, #-101]!	; 2b <g_pfnVectors+0x2b>
      8c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
	if (!button_still_pressed (__button_list [pbutton]))
      90:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      94:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
      98:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
	if (baction == NULL)
      9c:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
      a0:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
	(*baction) (pbutton);
      a4:	2f656d6f 	svccs	0x00656d6f
endthread
      a8:	70657473 	rsbvc	r7, r5, r3, ror r4
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	2f6e6568 	svccs	0x006e6568
      b0:	6b736544 	blvs	1cd95c8 <__ccfg+0x1cb9620>
endthread
      b4:	2f706f74 	svccs	0x00706f74
      b8:	4f534c4f 	svcmi	0x00534c4f
      bc:	2f54454e 	svccs	0x0054454e
      c0:	4f434950 	svcmi	0x00434950
      c4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
fsm sender(struct ResponseMessage *message) {
      c8:	2f534f63 	svccs	0x00534f63
      cc:	33314343 	teqcc	r1, #201326593	; 0xc000001
      d0:	2f005858 	svccs	0x00005858
}
      d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      d8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
      e8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      ec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		packet[1] = message->gid;
      f0:	4349502f 	movtmi	r5, #36911	; 0x902f
      f4:	502f534f 	eorpl	r5, pc, pc, asr #6
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	534f6369 	movtpl	r6, #62313	; 0xf369
      fc:	6f682f00 	svcvs	0x00682f00
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
     104:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		*p = message->tpe;p++;
     108:	442f6e65 	strtmi	r6, [pc], #-3685	; 110 <_Min_Stack_Size+0x10>
		*p = message->request_number;p++;
     10c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		*p = message->sender_id;p++;
     110:	4f2f706f 	svcmi	0x002f706f
		*p = message->receiver_id;p++;
     114:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		switch(message->tpe) {
     118:	502f5445 	eorpl	r5, pc, r5, asr #8
     11c:	534f4349 	movtpl	r4, #62281	; 0xf349
     120:	6369502f 	cmnvs	r9, #47	; 0x2f
		tcv_endp(packet);
     124:	502f534f 	eorpl	r5, pc, pc, asr #6
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
     12c:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
}
     130:	2f004974 	svccs	0x00004974
		finish;
     134:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     138:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     13c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
				strncpy(p, message->record, sizeof(message->record));
     140:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				*p = message->padding;p++;
     144:	706f746b 	rsbvc	r7, pc, fp, ror #8
				strncpy(p, message->record, sizeof(message->record));
     148:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     14c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     150:	4349502f 	movtmi	r5, #36911	; 0x902f
				strncpy(p, message->record, sizeof(message->record));
     154:	502f534f 	eorpl	r5, pc, pc, asr #6
     158:	534f6369 	movtpl	r6, #62313	; 0xf369
				strncpy(p, message->record, sizeof(message->record));
     15c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
				break;
     160:	006c656e 	rsbeq	r6, ip, lr, ror #10
				*p = message->record_index;p++;
     164:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; b0 <g_pfnVectors+0xb0>
				*p = message->padding;
     168:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				break;
     16c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
     170:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     174:	6f746b73 	svcvs	0x00746b73
     178:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     17c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     180:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
struct Node* init_node(struct Node* node){
     184:	2f534f43 	svccs	0x00534f43
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	4f636950 	svcmi	0x00636950
     18c:	4c562f53 	mrrcmi	15, 5, r2, r6, cr3
     190:	2f736269 	svccs	0x00736269
    node2->gid = 0;
     194:	67756c50 			; <UNDEFINED> instruction: 0x67756c50
    node2->data_base.item_count = 0;
     198:	6c6c754e 	cfstr64vs	mvdx7, [ip], #-312	; 0xfffffec8
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	00002e00 	andeq	r2, r0, r0, lsl #28
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a8:	6f610000 	svcvs	0x00610000
     1ac:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
     1b0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    node2->index = 0;
     1b4:	73000001 	movwvc	r0, #1
};
     1b8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    return (uint8_t) (rand() % 255);
     1bc:	00682e66 	rsbeq	r2, r8, r6, ror #28
     1c0:	5f000002 	svcpl	0x00000002
     1c4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
}
     1c8:	00682e73 	rsbeq	r2, r8, r3, ror lr
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	72000003 	andvc	r0, r0, #3
     1d0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	0300682e 	movweq	r6, #2094	; 0x82e
     1d8:	6f6c0000 	svcvs	0x006c0000
     1dc:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	00000300 	andeq	r0, r0, r0, lsl #6
     1e4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
        for (int i = 0; i < NUMB_OF_ENT; i++){
     1e8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	00000200 	andeq	r0, r0, r0, lsl #4
     1f0:	61647473 	smcvs	18243	; 0x4743
     1f4:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	00000200 	andeq	r0, r0, r0, lsl #4
     1fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     200:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     204:	616d0000 	cmnvs	sp, r0
     208:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
                node->data_base.item_array[i].owner_id = owner_id;
     20c:	00000400 	andeq	r0, r0, r0, lsl #8
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
                node->data_base.item_count += 1;
     214:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
                node->data_base.item_count += 1;
     21c:	75620000 	strbvc	r0, [r2, #-0]!
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     224:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	00682e73 	rsbeq	r2, r8, r3, ror lr
     22c:	73000004 	movwvc	r0, #4
     230:	6f697379 	svcvs	0x00697379
     234:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
};
     238:	63740000 	cmnvs	r4, #0
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23c:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
     240:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
        return false;
     244:	00000600 	andeq	r0, r0, r0, lsl #12
     248:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     24c:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
            node->nnodes[i] = 0; // set to null byte
     250:	00000700 	andeq	r0, r0, r0, lsl #14
     254:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     258:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
     25c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	68000008 	stmdavs	r0, {r3}
};
     264:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	70682e72 	rsbvc	r2, r8, r2, ror lr
     26c:	00090070 	andeq	r0, r9, r0, ror r0
     270:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
     274:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
        node->data_base.item_count -= 1;
     278:	003e6e69 	eorseq	r6, lr, r9, ror #28
        node->data_base.item_array[index].timestamp = 0;
     27c:	00000000 	andeq	r0, r0, r0
        node->data_base.item_count -= 1;
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
};
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     288:	01c60300 	biceq	r0, r6, r0, lsl #6
     28c:	011e0501 	tsteq	lr, r1, lsl #10
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
     298:	1305206e 	movwne	r2, #20590	; 0x506e
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	4a3a0306 	bmi	e80ebc <__ccfg+0xe60f14>
            node->data_base.item_array[i].timestamp = 0;
     2a0:	01060105 	tsteq	r6, r5, lsl #2
    node->data_base.item_count = 0;
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	2e460365 	cdpcs	3, 4, cr0, cr6, cr5, {3}
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
}
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
        return true;
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	21060205 	tstcs	r6, r5, lsl #4
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
     2c8:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	0a052116 	beq	14872c <__ccfg+0x128784>
	response_message->tpe = RESPONSE;
     2d0:	220d051e 	andcs	r0, sp, #125829120	; 0x7800000
	response_message->status = status;
     2d4:	051e0a05 	ldreq	r0, [lr, #-2565]	; 0xfffff5fb
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	13210603 			; <UNDEFINED> instruction: 0x13210603
	response_message->gid = gid;
     2dc:	4d3d1413 	cfldrsmi	mvf1, [sp, #-76]!	; 0xffffffb4
	response_message->sender_id = receiver_id;
     2e0:	01060f05 	tsteq	r6, r5, lsl #30
	response_message->status = status;
     2e4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
	if (!padding){
     2e8:	05200615 	streq	r0, [r0, #-1557]!	; 0xfffff9eb
		response_message->padding = padding;
     2ec:	0f051303 	svceq	0x00051303
	if (rec != NULL){
     2f0:	06050106 	streq	r0, [r5], -r6, lsl #2
     2f4:	06200520 	strteq	r0, [r0], -r0, lsr #10
		strncpy(response_message->record, rec, 20);
     2f8:	13030520 	movwne	r0, #13600	; 0x3520
     2fc:	01060f05 	tsteq	r6, r5, lsl #30
     300:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
};
     304:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
fsm receiver(struct Node* node_db) {
     308:	0f051303 	svceq	0x00051303
     30c:	06050106 	streq	r0, [r5], -r6, lsl #2
     310:	061d0520 	ldreq	r0, [sp], -r0, lsr #10
     314:	14030520 	strne	r0, [r3], #-1312	; 0xfffffae0
     318:	01061105 	tsteq	r6, r5, lsl #2
     31c:	03060305 	movweq	r0, #25349	; 0x6305
     320:	4c40661f 	mcrrmi	6, 1, r6, r0, cr15
     324:	13060105 	movwne	r0, #24837	; 0x6105
		DEBUG_PRINT("\r\nreceiving 0");
     328:	052d0305 	streq	r0, [sp, #-773]!	; 0xfffffcfb
     32c:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	06110558 			; <UNDEFINED> instruction: 0x06110558
     334:	23050501 	movwcs	r0, #21761	; 0x5501
     338:	051d0805 	ldreq	r0, [sp, #-2053]	; 0xfffff7fb
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
     340:	11051305 	tstne	r5, r5, lsl #6
		DEBUG_PRINT("\r\nreceiving 2");
     344:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     348:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	20061b05 	andcs	r1, r6, r5, lsl #22
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	03140505 	tsteq	r4, #20971520	; 0x1400000
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	03063c6f 	movweq	r3, #27759	; 0x6c6f
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	2f065811 	svccs	0x00065811
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
		switch (response_message_5->tpe){
     360:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     364:	20052008 	andcs	r2, r5, r8
     368:	05052006 	streq	r2, [r5, #-6]
     36c:	06110513 			; <UNDEFINED> instruction: 0x06110513
     370:	20080501 	andcs	r0, r8, r1, lsl #10
     374:	21060505 	tstcs	r6, r5, lsl #10
     378:	01000d02 	tsteq	r0, r2, lsl #26
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37c:	002a0501 	eoreq	r0, sl, r1, lsl #10
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	01840205 	orreq	r0, r4, r5, lsl #4
				if (discovery_request_message->gid == node_db->gid){
     384:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     388:	13050501 	movwne	r0, #21761	; 0x5501
					DEBUG_PRINT("\r\nSending to sender");
     38c:	11062a05 	tstne	r6, r5, lsl #20
     390:	05213205 	streq	r3, [r1, #-517]!	; 0xfffffdfb
					DEBUG_PRINT("\r\nSending to sender");
     394:	32054c0f 	andcc	r4, r5, #3840	; 0xf00
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	0605051e 			; <UNDEFINED> instruction: 0x0605051e
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	060f0522 	streq	r0, [pc], -r2, lsr #10
					response_message_0->sender_id = node_db->id;
     3a0:	06050501 	streq	r0, [r5], -r1, lsl #10
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	06100521 	ldreq	r0, [r0], -r1, lsr #10
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	06050501 	streq	r0, [r5], -r1, lsl #10
					call sender(response_message_0, done_case);
     3ac:	06210521 	strteq	r0, [r1], -r1, lsr #10
     3b0:	06050501 	streq	r0, [r5], -r1, lsl #10
     3b4:	0567672f 	strbeq	r6, [r7, #-1839]!	; 0xfffff8d1
     3b8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     3bc:	052f0605 	streq	r0, [pc, #-1541]!	; fffffdbf <_estack+0xdfffadbf>
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	0e030601 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx1
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	00020201 	andeq	r0, r2, r1, lsl #4
     3c8:	2f050101 	svccs	0x00050101
     3cc:	00020500 	andeq	r0, r2, r0, lsl #10
     3d0:	03000000 	movweq	r0, #0
     3d4:	05050132 	streq	r0, [r5, #-306]	; 0xfffffece
     3d8:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
     3dc:	06050501 	streq	r0, [r5], -r1, lsl #10
     3e0:	06010521 	streq	r0, [r1], -r1, lsr #10
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	00020213 	andeq	r0, r2, r3, lsl r2
					node_db->index+=1;
     3e8:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
     3ec:	00020500 	andeq	r0, r2, r0, lsl #10
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	03000000 	movweq	r0, #0
		tcv_endp(incoming_packet);
     3f4:	05050137 	streq	r0, [r5, #-311]	; 0xfffffec9
     3f8:	060f0513 			; <UNDEFINED> instruction: 0x060f0513
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	06050501 	streq	r0, [r5], -r1, lsl #10
     400:	06010521 	streq	r0, [r1], -r1, lsr #10
		proceed receiving;
     404:	00020213 	andeq	r0, r2, r3, lsl r2
		ser_out(response_1_create, "\r\nData Saved");
     408:	3e050101 	adfccs	f0, f5, f1
     40c:	00020500 	andeq	r0, r2, r0, lsl #10
		proceed receiving;
     410:	03000000 	movweq	r0, #0
     414:	0505013d 	streq	r0, [r5, #-317]	; 0xfffffec3
		ser_out(response_1_delete, "\r\nRecord Deleted");
     418:	06110513 			; <UNDEFINED> instruction: 0x06110513
     41c:	06050501 	streq	r0, [r5], -r1, lsl #10
		proceed receiving;
     420:	0601052f 	streq	r0, [r1], -pc, lsr #10
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     424:	00020213 	andeq	r0, r2, r3, lsl r2
     428:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
     42c:	00020500 	andeq	r0, r2, r0, lsl #10
     430:	03000000 	movweq	r0, #0
     434:	050100c4 	streq	r0, [r1, #-196]	; 0xffffff3c
		proceed receiving;
     438:	07051302 	streq	r1, [r5, -r2, lsl #6]
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     43c:	01100501 	tsteq	r0, r1, lsl #10
     440:	13061305 	movwne	r1, #25349	; 0x6305
     444:	58060305 	stmdapl	r6, {r0, r2, r8, r9}
     448:	01061305 	tsteq	r6, r5, lsl #6
		proceed receiving;
     44c:	2d061605 	stccs	6, cr1, [r6, #-20]	; 0xffffffec
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	05011005 	streq	r1, [r1, #-5]
     454:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
     458:	01023101 	tsteq	r2, r1, lsl #2
     45c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		proceed receiving;
     460:	02050023 	andeq	r0, r5, #35	; 0x23
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     468:	0100cb03 	tsteq	r0, r3, lsl #22
     46c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     470:	05110623 	ldreq	r0, [r1, #-1571]	; 0xfffff9dd
		proceed receiving;
     474:	1e052117 	mcrne	1, 0, r2, cr5, cr7, {0}
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	4b01052e 	blmi	41938 <__ccfg+0x21990>
     47c:	01000202 	tsteq	r0, r2, lsl #4
		proceed receiving;
     480:	004b0501 	subeq	r0, fp, r1, lsl #10
}
     484:	01cc0205 	biceq	r0, ip, r5, lsl #4
     488:	d0030000 	andle	r0, r3, r0
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	4b051315 	blmi	1450ec <__ccfg+0x125144>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     494:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
     498:	4b053205 	blmi	14ccb4 <__ccfg+0x12cd0c>
     49c:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
     4a0:	08054d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, lr}
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
					break;
     4a8:	2f39054f 	svccs	0x0039054f
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	20060d05 	andcs	r0, r6, r5, lsl #26
     4b0:	2e061005 	cdpcs	0, 0, cr1, cr6, cr5, {0}
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	2f060f05 	svccs	0x00060f05
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	05131105 	ldreq	r1, [r3, #-261]	; 0xfffffefb
     4bc:	0501063c 	streq	r0, [r1, #-1596]	; 0xfffff9c4
     4c0:	59063c11 	stmdbpl	r6, {r0, r4, sl, fp, ip, sp}
     4c4:	0d050204 	sfmeq	f0, 4, [r5, #-16]
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	02f80306 	rscseq	r0, r8, #402653184	; 0x18000000
						status = (uint8_t) SUCCESS;
     4cc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	7d880338 	stcvc	3, cr0, [r8, #224]	; 0xe0
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	06110520 	ldreq	r0, [r1], -r0, lsr #10
     4d8:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
     4dc:	02f60305 	rscseq	r0, r6, #335544320	; 0x14000000
     4e0:	060d0501 	streq	r0, [sp], -r1, lsl #10
     4e4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     4e8:	7d8c0311 	stcvc	3, cr0, [ip, #68]	; 0x44
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	1e390520 	cfabs64ne	mvdx0, mvdx9
     4f0:	21061105 	tstcs	r6, r5, lsl #2
					call sender(response_message_2, done_case);
     4f4:	01062c05 	tsteq	r6, r5, lsl #24
     4f8:	052f1105 	streq	r1, [pc, #-261]!	; 3fb <receiver+0xf3>
     4fc:	11051f2c 	tstne	r5, ip, lsr #30
     500:	053d3d06 	ldreq	r3, [sp, #-3334]!	; 0xfffff2fa
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	0605220a 	streq	r2, [r5], -sl, lsl #4
						status = (uint8_t) DB_FULL;
     508:	15050513 	strne	r0, [r5, #-1299]	; 0xfffffaed
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	01063205 	tsteq	r6, r5, lsl #4
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
     514:	0e054e01 	cdpeq	14, 0, cr4, cr5, cr1, {0}
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
     51c:	76032105 	strvc	r2, [r3], -r5, lsl #2
     520:	06220501 	strteq	r0, [r2], -r1, lsl #10
     524:	06190501 	ldreq	r0, [r9], -r1, lsl #10
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	06090520 	streq	r0, [r9], -r0, lsr #10
     52c:	380f0501 	stmdacc	pc, {r0, r8, sl}	; <UNPREDICTABLE>
     530:	01000702 	tsteq	r0, r2, lsl #14
     534:	00320501 	eorseq	r0, r2, r1, lsl #10
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	02500205 	subseq	r0, r0, #1342177280	; 0x50000000
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	f2030000 	vhadd.s8	d0, d3, d0
     540:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	15090514 	strne	r0, [r9, #-1300]	; 0xfffffaec
     548:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	1d050119 	stfnes	f0, [r5, #-100]	; 0xffffff9c
     550:	0d051306 	stceq	3, cr1, [r5, #-24]	; 0xffffffe8
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	1d055806 	stcne	8, cr5, [r5, #-24]	; 0xffffffe8
     558:	21050106 	tstcs	r5, r6, lsl #2
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	19052d06 	stmdbne	r5, {r1, r2, r8, sl, fp, sp}
     560:	06090501 	streq	r0, [r9], -r1, lsl #10
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	060a0501 	streq	r0, [sl], -r1, lsl #10
     568:	13090530 	movwne	r0, #38192	; 0x9530
     56c:	17060105 	strne	r0, [r6, -r5, lsl #2]
     570:	01000202 	tsteq	r0, r2, lsl #4
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	00340501 	eorseq	r0, r4, r1, lsl #10
     578:	02660205 	rsbeq	r0, r6, #1342177280	; 0x50000000
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	82030000 	andhi	r0, r3, #0
     580:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     584:	06180515 			; <UNDEFINED> instruction: 0x06180515
     588:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
     58c:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     590:	05320609 	ldreq	r0, [r2, #-1545]!	; 0xfffff9f7
     594:	05010639 	streq	r0, [r1, #-1593]	; 0xfffff9c7
     598:	39052224 	stmdbcc	r5, {r2, r5, r9, sp}
     59c:	0609051e 			; <UNDEFINED> instruction: 0x0609051e
     5a0:	06350521 	ldrteq	r0, [r5], -r1, lsr #10
     5a4:	06090501 	streq	r0, [r9], -r1, lsl #10
     5a8:	06240521 	strteq	r0, [r4], -r1, lsr #10
     5ac:	06060501 	streq	r0, [r6], -r1, lsl #10
     5b0:	1505052f 	strne	r0, [r5, #-1327]	; 0xfffffad1
     5b4:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
     5b8:	02150601 	andseq	r0, r5, #1048576	; 0x100000
     5bc:	01010002 	tsteq	r1, r2
     5c0:	05004005 	streq	r4, [r0, #-5]
     5c4:	00000002 	andeq	r0, r0, r2
     5c8:	01960300 	orrseq	r0, r6, r0, lsl #6
     5cc:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
     5d0:	0f064005 	svceq	0x00064005
     5d4:	05232605 	streq	r2, [r3, #-1541]!	; 0xfffff9fb
     5d8:	26052b40 	strcs	r2, [r5], -r0, asr #22
     5dc:	92010523 	andls	r0, r1, #146800640	; 0x8c00000
     5e0:	01000202 	tsteq	r0, r2, lsl #4
     5e4:	00220501 	eoreq	r0, r2, r1, lsl #10
     5e8:	02860205 	addeq	r0, r6, #1342177280	; 0x50000000
     5ec:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
     5f0:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     5f4:	06220515 			; <UNDEFINED> instruction: 0x06220515
     5f8:	2318050f 	tstcs	r8, #62914560	; 0x3c00000
     5fc:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
     600:	11052029 	tstne	r5, r9, lsr #32
     604:	2f390531 	svccs	0x00390531
     608:	20060d05 	andcs	r0, r6, r5, lsl #26
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	11063a05 	tstne	r6, r5, lsl #20
     610:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	0d052139 	stfeqs	f2, [r5, #-228]	; 0xffffff1c
				DEBUG_PRINT("\r\nretrieve rec");
     618:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	39050106 	stmdbcc	r5, {r1, r2, r8}
     620:	18052c06 	stmdane	r5, {r1, r2, sl, fp, sp}
     624:	06090501 	streq	r0, [r9], -r1, lsl #10
     628:	06060501 	streq	r0, [r6], -r1, lsl #10
     62c:	13050524 	movwne	r0, #21796	; 0x5524
     630:	01062005 	tsteq	r6, r5
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	30060505 	andcc	r0, r6, r5, lsl #10
     638:	01060705 	tsteq	r6, r5, lsl #14
     63c:	054e0105 	strbeq	r0, [lr, #-261]	; 0xfffffefb
    return node->data_base.item_array[index];
     640:	2073030f 	rsbscs	r0, r3, pc, lsl #6
     644:	01000202 	tsteq	r0, r2, lsl #4
     648:	01af0501 			; <UNDEFINED> instruction: 0x01af0501
     64c:	b6020500 	strlt	r0, [r2], -r0, lsl #10
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	03000002 	movweq	r0, #2
    return node->data_base.item_array[index];
     654:	050101b1 	streq	r0, [r1, #-433]	; 0xfffffe4f
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	af051302 	svcge	0x00051302
     65c:	2e110601 	cfmsub32cs	mvax0, mvfx0, mvfx1, mvfx1
     660:	05215005 	streq	r5, [r1, #-5]!
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	051f01af 	ldreq	r0, [pc, #-431]	; 4bd <receiver+0x1b5>
     668:	18057550 	stmdane	r5, {r4, r6, r8, sl, ip, sp, lr}
     66c:	321b0531 	andscc	r0, fp, #205520896	; 0xc400000
     670:	79035005 	stmdbvc	r3, {r0, r2, ip, lr}
     674:	0602052e 	streq	r0, [r2], -lr, lsr #10
     678:	06180522 	ldreq	r0, [r8], -r2, lsr #10
     67c:	06020501 	streq	r0, [r2], -r1, lsl #10
     680:	2305132f 	movwcs	r1, #21295	; 0x532f
				DEBUG_PRINT("\r\nResponse");
     684:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	1e052106 	adfnes	f2, f5, f6
				DEBUG_PRINT("\r\nResponse");
     68c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	20052106 	andcs	r2, r5, r6, lsl #2
     694:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     698:	1b052106 	blne	148ab8 <__ccfg+0x128b10>
     69c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     6a0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
				if(!response_flag){
     6a4:	03050106 	movweq	r0, #20742	; 0x5106
     6a8:	1d053d06 	stcne	13, cr3, [r5, #-24]	; 0xffffffe8
					response_flag=1;
     6ac:	03050106 	movweq	r0, #20742	; 0x5106
					trigger(&response_flag);
     6b0:	02052f06 	andeq	r2, r5, #6, 30
				switch(response_message_5->status){
     6b4:	06050513 			; <UNDEFINED> instruction: 0x06050513
     6b8:	06030501 	streq	r0, [r3], -r1, lsl #10
     6bc:	0205673d 	andeq	r6, r5, #15990784	; 0xf40000
     6c0:	06010514 			; <UNDEFINED> instruction: 0x06010514
     6c4:	00030214 	andeq	r0, r3, r4, lsl r2
						if (response_checker[0] == response_message_5->request_number){
     6c8:	1e050101 	adfnes	f0, f5, f1
     6cc:	08020500 	stmdaeq	r2, {r8, sl}
     6d0:	03000003 	movweq	r0, #3
							switch(response_checker[1]){
     6d4:	05010283 	streq	r0, [r1, #-643]	; 0xfffffd7d
     6d8:	1e050120 	adfnesp	f0, f5, f0
     6dc:	51050106 	tstpl	r5, r6, lsl #2
     6e0:	201e052e 	andscs	r0, lr, lr, lsr #10
						proceed response_4;
     6e4:	05205105 	streq	r5, [r0, #-261]!	; 0xfffffefb
						break;
     6e8:	052e065a 	streq	r0, [lr, #-1626]!	; 0xfffff9a6
									proceed response_1_delete;
     6ec:	053ea503 	ldreq	sl, [lr, #-1283]!	; 0xfffffafd
									proceed response_1_retrieve;
     6f0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
						proceed response_2;
     6f4:	03055813 	movweq	r5, #22547	; 0x5813
						proceed response_3;
     6f8:	05402f06 	strbeq	r2, [r0, #-3846]	; 0xfffff0fa
						proceed response_4;
     6fc:	05130642 	ldreq	r0, [r3, #-1602]	; 0xfffff9be
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	3d061f03 	stccc	15, cr1, [r6, #-12]
     704:	01064205 	tsteq	r6, r5, lsl #4
}
     708:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
     70c:	03052042 	movweq	r2, #20546	; 0x5042
     710:	2d160521 	cfldr32cs	mvfx0, [r6, #-132]	; 0xffffff7c
     714:	21060305 	tstcs	r6, r5, lsl #6
     718:	1d05412f 	stfnes	f4, [r5, #-188]	; 0xffffff44
     71c:	1c050106 	stfnes	f0, [r5], {6}
     720:	c80e0306 	stmdagt	lr, {r1, r2, r8, r9}
fsm root {
     724:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
     728:	05010655 	streq	r0, [r1, #-1621]	; 0xfffff9ab
     72c:	08053e72 	stmdaeq	r5, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
     730:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
     734:	2e720355 	mrccs	3, 3, r0, cr2, cr5, {2}
     738:	22060505 	andcs	r0, r6, #20971520	; 0x1400000
     73c:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
     740:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     744:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 734 <root+0x10>
     748:	01063905 	tsteq	r6, r5, lsl #18
     74c:	05270605 	streq	r0, [r7, #-1541]!	; 0xfffff9fb
     750:	2079031e 	rsbscs	r0, r9, lr, lsl r3
     754:	21060605 	tstcs	r6, r5, lsl #12
     758:	01061e05 	tsteq	r6, r5, lsl #28
     75c:	2f060605 	svccs	0x00060605
     760:	01064405 	tsteq	r6, r5, lsl #8
     764:	05202905 	streq	r2, [r0, #-2309]!	; 0xfffff6fb
     768:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
     76c:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
     770:	06052024 	streq	r2, [r5], -r4, lsr #32
		node_db = init_node(node_db);
     774:	41052106 	tstmi	r5, r6, lsl #2
     778:	26050106 	strcs	r0, [r5], -r6, lsl #2
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	06060520 	streq	r0, [r6], -r0, lsr #10
     780:	0b052f23 	bleq	14c414 <__ccfg+0x12c46c>
     784:	060f0501 	streq	r0, [pc], -r1, lsl #10
		tcv_plug (0, &plug_null);
     788:	740e0501 	strvc	r0, [lr], #-1281	; 0xfffffaff
     78c:	20065905 	andcs	r5, r6, r5, lsl #18
		sfd = tcv_open (WNONE, 0, 0);
     790:	0d031d05 	stceq	13, cr1, [r3, #-20]	; 0xffffffec
     794:	1405052e 	strne	r0, [r5], #-1326	; 0xfffffad2
     798:	01066d05 	tsteq	r6, r5, lsl #26
		if (sfd < 0) {
     79c:	03060505 	movweq	r0, #25861	; 0x6505
     7a0:	2505200a 	strcs	r2, [r5, #-10]
			diag("Cannot open tcv interface");
     7a4:	64050106 	strvs	r0, [r5], #-262	; 0xfffffefa
			halt();
     7a8:	20750566 	rsbscs	r0, r5, r6, ror #10
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	3c3c2505 	cfldr32cc	mvfx2, [ip], #-20	; 0xffffffec
     7b0:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
		runfsm receiver(node_db);
     7b4:	01060805 	tsteq	r6, r5, lsl #16
     7b8:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	01061405 	tsteq	r6, r5, lsl #8
     7c0:	03060405 	movweq	r0, #25605	; 0x6405
     7c4:	053c01b0 	ldreq	r0, [ip, #-432]!	; 0xfffffe50
     7c8:	4b3d1403 	blmi	f457dc <__ccfg+0xf25834>
     7cc:	3e4b403d 	mcrcc	0, 2, r4, cr11, cr13, {1}
     7d0:	56053e4b 	strpl	r3, [r5], -fp, asr #28
     7d4:	03050106 	movweq	r0, #20742	; 0x5106
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	20560520 	subscs	r0, r6, r0, lsr #10
     7dc:	06200305 	strteq	r0, [r0], -r5, lsl #6
     7e0:	56054067 	strpl	r4, [r5], -r7, rrx
		switch(CHOICE) {
     7e4:	03050106 	movweq	r0, #20742	; 0x5106
     7e8:	20560520 	subscs	r0, r6, r0, lsr #10
     7ec:	06200305 	strteq	r0, [r0], -r5, lsl #6
     7f0:	57053e4b 	strpl	r3, [r5, -fp, asr #28]
     7f4:	03050106 	movweq	r0, #20742	; 0x5106
     7f8:	20570520 	subscs	r0, r7, r0, lsr #10
     7fc:	06200305 	strteq	r0, [r0], -r5, lsl #6
     800:	56053e4b 	strpl	r3, [r5], -fp, asr #28
     804:	03050106 	movweq	r0, #20742	; 0x5106
     808:	20560520 	subscs	r0, r6, r0, lsr #10
     80c:	06200305 	strteq	r0, [r0], -r5, lsl #6
				proceed menu;
     810:	053f404b 	ldreq	r4, [pc, #-75]!	; 7cd <root+0xa9>
				proceed get_new_group_id;
     814:	18053e01 	stmdane	r5, {r0, r9, sl, fp, ip, sp}
				proceed menu;
     818:	3c7eb403 	cfldrdcc	mvd11, [lr], #-12
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     820:	05010655 	streq	r0, [r1, #-1621]	; 0xfffff9ab
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
     828:	05010666 	streq	r0, [r1, #-1638]	; 0xfffff99a
     82c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		DEBUG_PRINT("setting node group ID");
     830:	0c031305 	stceq	3, cr1, [r3], {5}
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	06080501 	streq	r0, [r8], -r1, lsl #10
    node->gid = gid; 
     838:	4a3b0501 	bmi	ec1c44 <__ccfg+0xea1c9c>
		proceed menu;
     83c:	4b060605 	blmi	182058 <__ccfg+0x1620b0>
     840:	20290306 	eorcs	r0, r9, r6, lsl #6
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	58032f06 	stmdapl	r3, {r1, r2, r8, r9, sl, fp, sp}
     848:	15050520 	strne	r0, [r5, #-1312]	; 0xfffffae0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	1406054b 	strne	r0, [r6], #-1355	; 0xfffffab5
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     850:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
     854:	66090501 	strvs	r0, [r9], -r1, lsl #10
     858:	21060705 	tstcs	r6, r5, lsl #14
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	060e053d 			; <UNDEFINED> instruction: 0x060e053d
    node->id = id;
     860:	06070501 	streq	r0, [r7], -r1, lsl #10
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	13060524 	movwne	r0, #25892	; 0x6524
     868:	061b053d 			; <UNDEFINED> instruction: 0x061b053d
			strncpy(reason, "Out of Range", 50);
     86c:	06060501 	streq	r0, [r6], -r1, lsl #10
     870:	0b053dbb 	bleq	14ff64 <__ccfg+0x12ffbc>
     874:	060f0501 	streq	r0, [pc], -r1, lsl #10
			proceed invalid_node_id;
     878:	06070501 	streq	r0, [r7], -r1, lsl #10
fsm root {
     87c:	3d827a03 	vstrcc	s14, [r2, #12]
				strncpy(reason, "ID is already in use", 50);
     880:	0c031805 	stceq	8, cr1, [r3], {5}
		for(int i = 0; i < node_db->index; i++){
     884:	13050520 	movwne	r0, #21792	; 0x5520
     888:	01065505 	tsteq	r6, r5, lsl #10
		proceed menu;
     88c:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
     890:	66051406 	strvs	r1, [r5], -r6, lsl #8
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	0605051e 			; <UNDEFINED> instruction: 0x0605051e
     898:	2e090322 	cdpcs	3, 0, cr0, cr9, cr2, {1}
     89c:	06080583 	streq	r0, [r8], -r3, lsl #11
     8a0:	4a340501 	bmi	d01cac <__ccfg+0xce1d04>
		proceed get_new_node_id;
     8a4:	4b060605 	blmi	1820c0 <__ccfg+0x162118>
		if (!clear_node_neighbour_array(node_db)){
     8a8:	15050530 	strne	r0, [r5, #-1328]	; 0xfffffad0
     8ac:	01060805 	tsteq	r6, r5, lsl #16
     8b0:	4b060605 	blmi	1820cc <__ccfg+0x162124>
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	060a053e 			; <UNDEFINED> instruction: 0x060a053e
     8b8:	4a090501 	bmi	241cc4 <__ccfg+0x221d1c>
			proceed error;
     8bc:	21060705 	tstcs	r6, r5, lsl #14
     8c0:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	0607053b 			; <UNDEFINED> instruction: 0x0607053b
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	14060525 	strne	r0, [r6], #-1317	; 0xfffffadb
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	061b053d 			; <UNDEFINED> instruction: 0x061b053d
		request_packet->gid = node_db->gid;
     8d0:	031c0501 	tsteq	ip, #4194304	; 0x400000
     8d4:	0705901d 	smladeq	r5, sp, r0, r9
		request_packet->request_number = generate_request_num();
     8d8:	4a5e0306 	bmi	17814f8 <__ccfg+0x1761550>
		request_packet->sender_id = node_db->id;
     8dc:	031a0513 	tsteq	sl, #79691776	; 0x4c00000
     8e0:	0148020c 	cmpeq	r8, ip, lsl #4
     8e4:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
		call sender(request_packet, wait_discovery);
     8e8:	05010655 	streq	r0, [r1, #-1621]	; 0xfffff9ab
     8ec:	063d0605 	ldrteq	r0, [sp], -r5, lsl #12
     8f0:	1d6c0515 	cfstr64ne	mvdx0, [ip, #-84]!	; 0xffffffac
			release;
     8f4:	2f060505 	svccs	0x00060505
				proceed get_new_node_id;
     8f8:	08053114 	stmdaeq	r5, {r2, r4, r8, ip, sp}
				proceed clear_neighbour_array;
     8fc:	34050106 	strcc	r0, [r5], #-262	; 0xfffffefa
				proceed create_proto_start;
     900:	06060566 	streq	r0, [r6], -r6, ror #10
				proceed start_delete_proto;
     904:	15050568 	strne	r0, [r5, #-1384]	; 0xfffffa98
				proceed start_retrieve_proto;
     908:	01064d05 	tsteq	r6, r5, lsl #26
				proceed display_db;
     90c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
				proceed del_local;
     910:	053d0606 	ldreq	r0, [sp, #-1542]!	; 0xfffff9fa
			if(node_db->id == node_db->nnodes[i]){
     914:	7dd30305 	ldclvc	3, cr0, [r3, #20]
     918:	06260501 	strteq	r0, [r6], -r1, lsl #10
     91c:	03190501 	tsteq	r9, #4194304	; 0x400000
				strncpy(reason, "ID is already in use", 50);
     920:	059002ad 	ldreq	r0, [r0, #685]	; 0x2ad
     924:	7dd30326 	ldclvc	3, cr0, [r3, #152]	; 0x98
     928:	0319052e 	tsteq	r9, #192937984	; 0xb800000
				proceed invalid_node_id;
     92c:	052e02ad 	streq	r0, [lr, #-685]!	; 0xfffffd53
		for(int i = 0; i < node_db->index; i++){
     930:	05670606 	strbeq	r0, [r7, #-1542]!	; 0xfffff9fa
		if (discovery_wait_flag == 0){
     934:	05131707 	ldreq	r1, [r3, #-1799]	; 0xfffff8f9
     938:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
			delay(3000, find_proto_start);
     93c:	05ec0613 	strbeq	r0, [ip, #1555]!	; 0x613
     940:	43051305 	movwmi	r1, #21253	; 0x5305
     944:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     948:	1e430522 	cdpne	5, 4, cr0, cr3, cr2, {1}
		if (discovery_wait_flag == 1){
     94c:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
			delay(3000, display_neighbour_nodes);
     950:	30220605 	eorcc	r0, r2, r5, lsl #12
     954:	01061b05 	tsteq	r6, r5, lsl #22
     958:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     95c:	06055831 			; <UNDEFINED> instruction: 0x06055831
     960:	05055a06 	streq	r5, [r5, #-2566]	; 0xfffff5fa
     964:	06080514 			; <UNDEFINED> instruction: 0x06080514
     968:	20070501 	andcs	r0, r7, r1, lsl #10
     96c:	2f060605 	svccs	0x00060605
     970:	01061305 	tsteq	r6, r5, lsl #6
     974:	2f060605 	svccs	0x00060605
     978:	05310505 	ldreq	r0, [r1, #-1285]!	; 0xfffffafb
     97c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
     980:	05a30607 	streq	r0, [r3, #1543]!	; 0x607
     984:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
     988:	0a052034 	beq	148a60 <__ccfg+0x128ab8>
     98c:	06080520 	streq	r0, [r8], -r0, lsr #10
     990:	061f054b 	ldreq	r0, [pc], -fp, asr #10
     994:	060a0501 	streq	r0, [sl], -r1, lsl #10
     998:	06070584 	streq	r0, [r7], -r4, lsl #11
     99c:	06201403 	strteq	r1, [r0], -r3, lsl #8
     9a0:	030a052f 	movweq	r0, #42287	; 0xa52f
		if(node_db->index == 0){
     9a4:	0531206e 	ldreq	r2, [r1, #-110]!	; 0xffffff92
     9a8:	31313607 	teqcc	r1, r7, lsl #12
     9ac:	0b030505 	bleq	c1dc8 <__ccfg+0xa1e20>
			proceed menu;
     9b0:	13054b2e 	movwne	r4, #23342	; 0x5b2e
fsm root {
     9b4:	05202603 	streq	r2, [r0, #-1539]!	; 0xfffff9fd
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
		for (int i=0; i<node_db->index; i++) {
     9bc:	0101000c 	tsteq	r1, ip
     9c0:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
     9c4:	00072402 	andeq	r2, r7, r2, lsl #8
		proceed menu;
     9c8:	04b30300 	ldrteq	r0, [r3], #768	; 0x300
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	011c0501 	tsteq	ip, r1, lsl #10
     9d0:	01061a05 	tsteq	r6, r5, lsl #20
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	02060205 	andeq	r0, r6, #1342177280	; 0x50000000
     9d8:	03051928 	movweq	r1, #22824	; 0x5928
     9dc:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	4c030501 	cfstr32mi	mvfx0, [r3], {1}
     9e4:	051e0b05 	ldreq	r0, [lr, #-2821]	; 0xfffff4fb
			strncpy(reason, "Error: improper ID", 50);
     9e8:	03220603 			; <UNDEFINED> instruction: 0x03220603
     9ec:	11033c0e 	tstne	r3, lr, lsl #24
     9f0:	0609054a 	streq	r0, [r9], -sl, asr #10
			proceed error;
     9f4:	66070501 	strvs	r0, [r7], -r1, lsl #10
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	05220605 	streq	r0, [r2, #-1541]!	; 0xfffff9fb
     9fc:	03051e07 	movweq	r1, #24071	; 0x5e07
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	06052206 	streq	r2, [r5], -r6, lsl #4
     a04:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     a08:	2f3d2106 	svccs	0x003d2106
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	4c1a0305 	ldcmi	3, cr0, [sl], {5}
		create_message->gid = node_db->gid;
     a10:	029e054d 	addseq	r0, lr, #322961408	; 0x13400000
     a14:	03052006 	movweq	r2, #20486	; 0x5006
     a18:	67a1062e 	strvs	r0, [r1, lr, lsr #12]!
		create_message->tpe = CREATE_RECORD;
     a1c:	23030505 	movwcs	r0, #13573	; 0x3505
		create_message->request_number = generate_request_num();
     a20:	60036608 	andvs	r6, r3, r8, lsl #12
		create_message->sender_id = node_db->id;
     a24:	2003062e 	andcs	r0, r3, lr, lsr #12
     a28:	052f0620 	streq	r0, [pc, #-1568]!	; 410 <receiver+0x108>
     a2c:	134e1603 	movtne	r1, #58883	; 0xe603
		strncpy(create_message->record, user_provided_record, 20);
     a30:	08053e68 	stmdaeq	r5, {r3, r5, r6, r9, sl, fp, ip, sp}
		create_message->receiver_id = user_provided_receiver_id;
     a34:	0f050106 	svceq	0x00050106
		strncpy(create_message->record, user_provided_record, 20);
     a38:	207b9103 	rsbscs	r9, fp, r3, lsl #2
		response_checker[0] = create_message->request_number;
     a3c:	ef030805 	svc	0x00030805
		call sender(create_message, wait);
     a40:	05052e04 	streq	r2, [r5, #-3588]	; 0xfffff1fc
		response_checker[1] = create_message->tpe;
     a44:	7b910306 	blvc	fe441664 <_estack+0xde43c664>
     a48:	06030520 	streq	r0, [r3], -r0, lsr #10
		call sender(create_message, wait);
     a4c:	0104f503 	tsteq	r4, r3, lsl #10	; <UNPREDICTABLE>
     a50:	8b030f05 	blhi	c466c <__ccfg+0xa46c4>
     a54:	0505207b 	streq	r2, [r5, #-123]	; 0xffffff85
     a58:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5c:	0104f203 	tsteq	r4, r3, lsl #4	; <UNPREDICTABLE>
     a60:	31140305 	tstcc	r4, r5, lsl #6
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a64:	0805134d 	stmdaeq	r5, {r0, r2, r3, r6, r8, r9, ip}
     a68:	03051506 	movweq	r1, #21766	; 0x5506
     a6c:	0569061d 	strbeq	r0, [r9, #-1565]!	; 0xfffff9e3
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     a74:	fc030605 	stc2	6, cr0, [r3], {5}
			strncpy(reason, "Error: improper node ID", 50);
     a78:	0e053c7a 	mcreq	12, 0, r3, cr5, cr10, {3}
     a7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			proceed error;
     a80:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
     a84:	01058603 	tsteq	r5, r3, lsl #12
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a88:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
     a8c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a90:	05052018 	streq	r2, [r5, #-24]	; 0xffffffe8
     a94:	06040520 	streq	r0, [r4], -r0, lsr #10
     a98:	1a05593d 	bne	156f94 <__ccfg+0x136fec>
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	7ef40306 	cdpvc	3, 15, cr0, cr4, cr6, {0}
			strncpy(reason, "Error: invalid index", 50);
     aa0:	0305053c 	movweq	r0, #21820	; 0x553c
     aa4:	05200192 	streq	r0, [r0, #-402]!	; 0xfffffe6e
     aa8:	052c0612 	streq	r0, [ip, #-1554]!	; 0xfffff9ee
			proceed error;
     aac:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	04053c03 	streq	r3, [r5], #-3075	; 0xfffff3fd
     ab4:	03053306 	movweq	r3, #21254	; 0x5306
     ab8:	56054114 			; <UNDEFINED> instruction: 0x56054114
		delete_record->gid = node_db->gid;
     abc:	03050106 	movweq	r0, #20742	; 0x5106
		delete_record->tpe = DELETE_RECORD;
     ac0:	20560520 	subscs	r0, r6, r0, lsr #10
		delete_record->request_number = generate_request_num();
     ac4:	06200305 	strteq	r0, [r0], -r5, lsl #6
     ac8:	3c0e0359 	stccc	3, cr0, [lr], {89}	; 0x59
		call sender(delete_record, wait);
     acc:	01060805 	tsteq	r6, r5, lsl #16
		delete_record->sender_id = node_db->id;
     ad0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
		delete_record->receiver_id = user_provided_receiver_id;
     ad4:	59210604 	stmdbpl	r1!, {r2, r9, sl}
		delete_record->record_index = us_pr_in;
     ad8:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
     adc:	06370513 			; <UNDEFINED> instruction: 0x06370513
		response_checker[0] = delete_record->request_number;
     ae0:	3f170501 	svccc	0x00170501
		call sender(delete_record, wait);
     ae4:	051f2005 	ldreq	r2, [pc, #-5]	; ae7 <root+0x3c3>
     ae8:	03051e37 	movweq	r1, #24119	; 0x5e37
     aec:	20052206 	andcs	r2, r5, r6, lsl #4
     af0:	17050106 	strne	r0, [r5, -r6, lsl #2]
     af4:	03051f2f 	movweq	r1, #24367	; 0x5f2f
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
     afc:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	03052e22 	movweq	r2, #24098	; 0x5e22
     b04:	26052106 	strcs	r2, [r5], -r6, lsl #2
     b08:	0c050106 	stfeqs	f0, [r5], {6}
		if (get_id < 1 || get_id > 25){
     b0c:	1d260523 	cfstr32ne	mvfx0, [r6, #-140]!	; 0xffffff74
     b10:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
			strncpy(reason, "Error: improper node ID", 50);
     b14:	03051d1d 	movweq	r1, #23837	; 0x5d1d
     b18:	1e052106 	adfnes	f2, f5, f6
     b1c:	03050106 	movweq	r0, #20742	; 0x5106
			proceed error;
     b20:	08052206 	stmdaeq	r5, {r1, r2, r9, sp}
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	060c0501 	streq	r0, [ip], -r1, lsl #10
     b28:	580b0501 	stmdapl	fp, {r0, r8, sl}
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	26060405 	strcs	r0, [r6], -r5, lsl #8
     b30:	89030505 	stmdbhi	r3, {r0, r2, r8, sl}
     b34:	32322e7f 	eorscc	r2, r2, #2032	; 0x7f0
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	32323233 	eorscc	r3, r2, #805306371	; 0x30000003
     b3c:	2e030405 	cdpcs	4, 0, cr0, cr3, cr5, {0}
			strncpy(reason, "Error: invalid index", 50);
     b40:	0625052e 	strteq	r0, [r5], -lr, lsr #10
     b44:	20060501 	andcs	r0, r6, r1, lsl #10
			proceed error;
     b48:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
     b4c:	26053d59 			; <UNDEFINED> instruction: 0x26053d59
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	0627050e 	strteq	r0, [r7], -lr, lsl #10
     b54:	06700501 	ldrbteq	r0, [r0], -r1, lsl #10
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	052e2b03 	streq	r2, [lr, #-2819]!	; 0xfffff4fd
     b5c:	1b051503 	blne	145f70 <__ccfg+0x125fc8>
     b60:	06050106 	streq	r0, [r5], -r6, lsl #2
		retrieve_record->gid = node_db->gid;
     b64:	0604052e 	streq	r0, [r4], -lr, lsr #10
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	06170521 	ldreq	r0, [r7], -r1, lsr #10
		retrieve_record->request_number = generate_request_num();
     b6c:	21040501 	tstcs	r4, r1, lsl #10
     b70:	051f1705 	ldreq	r1, [pc, #-1797]	; 473 <receiver+0x16b>
		retrieve_record->receiver_id = get_id;
     b74:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	06055b03 	streq	r5, [r5], -r3, lsl #22
		retrieve_record->record_index = beg_for_index;
     b7c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     b80:	17052f06 	strne	r2, [r5, -r6, lsl #30]
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		response_checker[0] = retrieve_record->request_number;
     b88:	1f170521 	svcne	0x00170521
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	21060405 	tstcs	r6, r5, lsl #8
		response_checker[1] = retrieve_record->tpe;
     b90:	28020305 	stmdacs	r2, {r0, r2, r8, r9}
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
     b98:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
		call sender(retrieve_record, wait);
     b9c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
     ba0:	03061a05 	movweq	r1, #27141	; 0x6a05
     ba4:	053c7eb5 	ldreq	r7, [ip, #-3765]!	; 0xfffff14b
     ba8:	01cf0305 	biceq	r0, pc, r5, lsl #6
     bac:	22040520 	andcs	r0, r4, #32, 10	; 0x8000000
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	1c061105 	stfnes	f1, [r6], {5}
     bb4:	01061a05 	tsteq	r6, r5, lsl #20
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb8:	063c0305 	ldrteq	r0, [ip], -r5, lsl #6
     bbc:	3c0d0342 	stccc	3, cr0, [sp], {66}	; 0x42
     bc0:	2705684d 	strcs	r6, [r5, -sp, asr #16]
		if(node_db->data_base.item_count != 0){
     bc4:	06050106 	streq	r0, [r5], -r6, lsl #2
     bc8:	06040520 	streq	r0, [r4], -r0, lsr #10
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     bd0:	5c4d1503 	cfstr64pl	mvdx1, [sp], {3}
			while(i <= node_db->data_base.item_count){
     bd4:	06370513 			; <UNDEFINED> instruction: 0x06370513
     bd8:	3d200501 	cfstr32cc	mvfx0, [r0, #-4]!
     bdc:	051f3705 	ldreq	r3, [pc, #-1797]	; 4df <receiver+0x1d7>
			i = 0;
     be0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
		ser_out(menu, "\r\n");
     be4:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
     be8:	03052e17 	movweq	r2, #24087	; 0x5e17
		delete_all(node_db);
     bec:	17052106 	strne	r2, [r5, -r6, lsl #2]
     bf0:	03050106 	movweq	r0, #20742	; 0x5106
		proceed menu;
     bf4:	24052f06 	strcs	r2, [r5], #-3846	; 0xfffff0fa
		delay(3000, timeout);
     bf8:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
     bfc:	0603052e 	streq	r0, [r3], -lr, lsr #10
     c00:	06260521 	strteq	r0, [r6], -r1, lsr #10
		when(&response_flag, menu);
     c04:	22030501 	andcs	r0, r3, #4194304	; 0x400000
     c08:	051e2605 	ldreq	r2, [lr, #-1541]	; 0xfffff9fb
			if(i == 0){
     c0c:	1d052203 	sfmne	f2, 4, [r5, #-12]
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c10:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     c14:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c18:	21030501 	tstcs	r3, r1, lsl #10
     c1c:	052d1f05 	streq	r1, [sp, #-3845]!	; 0xfffff0fb
     c20:	312f0603 			; <UNDEFINED> instruction: 0x312f0603
     c24:	01062705 	tsteq	r6, r5, lsl #14
		for (int i=0; i<node_db->index; i++) {
     c28:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	2705230c 	strcs	r2, [r5, -ip, lsl #6]
     c30:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
     c34:	06270521 	strteq	r0, [r7], -r1, lsr #10
     c38:	220c0501 	andcs	r0, ip, #4194304	; 0x400000
     c3c:	051e2705 	ldreq	r2, [lr, #-1797]	; 0xfffff8fb
     c40:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     c44:	0c050108 	stfeqs	f0, [r5], {8}
     c48:	0b050106 	bleq	141068 <__ccfg+0x1210c0>
		ser_out(timeout, "\r\nFailed to reach the destination");
     c4c:	06660558 			; <UNDEFINED> instruction: 0x06660558
     c50:	0303053c 	movweq	r0, #13628	; 0x353c
		proceed menu;
     c54:	684d010c 	stmdavs	sp, {r2, r3, r8}^
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	01062705 	tsteq	r6, r5, lsl #14
     c5c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     c60:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
		proceed menu;
     c64:	1503053d 	strne	r0, [r3, #-1341]	; 0xfffffac3
}
     c68:	0605684d 	streq	r6, [r5], -sp, asr #16
     c6c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     c70:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
     c74:	13160305 	tstne	r6, #335544320	; 0x14000000
     c78:	01063705 	tsteq	r6, r5, lsl #14
     c7c:	053d1f05 	ldreq	r1, [sp, #-3845]!	; 0xfffff0fb
     c80:	03051f37 	movweq	r1, #24375	; 0x5f37
     c84:	1f052106 	svcne	0x00052106
     c88:	16050106 	strne	r0, [r5], -r6, lsl #2
     c8c:	0603052e 	streq	r0, [r3], -lr, lsr #10
     c90:	06160521 	ldreq	r0, [r6], -r1, lsr #10
     c94:	06030501 	streq	r0, [r3], -r1, lsl #10
     c98:	0623052f 	strteq	r0, [r3], -pc, lsr #10
     c9c:	2e210501 	cfsh64cs	mvdx0, mvdx1, #1
     ca0:	21060305 	tstcs	r6, r5, lsl #6
     ca4:	01062505 	tsteq	r6, r5, lsl #10
     ca8:	09030c05 	stmdbeq	r3, {r0, r2, sl, fp}
     cac:	03250520 			; <UNDEFINED> instruction: 0x03250520
     cb0:	1c052077 	stcne	0, cr2, [r5], {119}	; 0x77
     cb4:	06030520 	streq	r0, [r3], -r0, lsr #10
     cb8:	061e0521 	ldreq	r0, [lr], -r1, lsr #10
     cbc:	06030501 	streq	r0, [r3], -r1, lsl #10
     cc0:	061f053d 			; <UNDEFINED> instruction: 0x061f053d
     cc4:	06030501 	streq	r0, [r3], -r1, lsl #10
     cc8:	06170540 	ldreq	r0, [r7], -r0, asr #10
     ccc:	20260501 	eorcs	r0, r6, r1, lsl #10
     cd0:	21060305 	tstcs	r6, r5, lsl #6
     cd4:	01062605 	tsteq	r6, r5, lsl #12
     cd8:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
     cdc:	03051e26 	movweq	r1, #24102	; 0x5e26
     ce0:	08052206 	stmdaeq	r5, {r1, r2, r9, sp}
static void devinit_uart (int devnum) {
     ce4:	060c0501 	streq	r0, [ip], -r1, lsl #10
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	580b0501 	stmdapl	fp, {r0, r8, sl}
     cec:	3c066505 	cfstr32cc	mvfx6, [r6], {5}
void udelay (volatile word n) {
     cf0:	0c030305 	stceq	3, cr0, [r3], {5}
     cf4:	05684d01 	strbeq	r4, [r8, #-3329]!	; 0xfffff2ff
	while (n) {
     cf8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     cfc:	04052006 	streq	r2, [r5], #-6
}
     d00:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
	while (n--);
     d04:	4d150305 	ldcmi	3, cr0, [r5, #-20]	; 0xffffffec
     d08:	06060568 	streq	r0, [r6], -r8, ror #10
     d0c:	06040501 	streq	r0, [r4], -r1, lsl #10
		n--;
     d10:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     d14:	135a1603 	cmpne	sl, #3145728	; 0x300000
     d18:	01063905 	tsteq	r6, r5, lsl #18
void mdelay (volatile word n) {
     d1c:	053d2105 	ldreq	r2, [sp, #-261]!	; 0xfffffefb
     d20:	03051f39 	movweq	r1, #24377	; 0x5f39
	while (n) {
     d24:	21052106 	tstcs	r5, r6, lsl #2
     d28:	18050106 	stmdane	r5, {r1, r2, r8}
}
     d2c:	0603052e 	streq	r0, [r3], -lr, lsr #10
		udelay (999);
     d30:	06180521 	ldreq	r0, [r8], -r1, lsr #10
     d34:	06030501 	streq	r0, [r3], -r1, lsl #10
		n--;
     d38:	0625052f 	strteq	r0, [r5], -pc, lsr #10
     d3c:	2e230501 	cfsh64cs	mvdx0, mvdx3, #1
     d40:	21060305 	tstcs	r6, r5, lsl #6
     d44:	01062705 	tsteq	r6, r5, lsl #14
void __pi_ondomain (lword d) {
     d48:	05212005 	streq	r2, [r1, #-5]!
     d4c:	03051f27 	movweq	r1, #24359	; 0x5f27
		if (__pi_systat.effpdm > 1)
     d50:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
     d54:	21060305 	tstcs	r6, r5, lsl #6
			__pi_systat.effpdm = 1;
     d58:	13062105 	movwne	r2, #24837	; 0x6105
	PRCMPowerDomainOn (d);
     d5c:	051f2005 	ldreq	r2, [pc, #-5]	; d5f <__pi_ondomain+0x17>
     d60:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     d64:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d68:	30300603 	eorscc	r0, r0, r3, lsl #12
     d6c:	01061705 	tsteq	r6, r5, lsl #14
     d70:	05202805 	streq	r2, [r0, #-2053]!	; 0xfffff7fb
	__pi_systat.ondmns |= d;
     d74:	28052203 	stmdacs	r5, {r0, r1, r9, sp}
     d78:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
}
     d7c:	06280521 	strteq	r0, [r8], -r1, lsr #10
     d80:	06030501 	streq	r0, [r3], -r1, lsl #10
void __pi_offdomain (lword d) {
     d84:	08053e2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
     d88:	060c0501 	streq	r0, [ip], -r1, lsl #10
	PRCMPowerDomainOff (d);
     d8c:	740b0501 	strvc	r0, [fp], #-1281	; 0xfffffaff
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	3c066705 	stccc	7, cr6, [r6], {5}
     d94:	4d150305 	ldcmi	3, cr0, [r5, #-20]	; 0xffffffec
     d98:	01063005 	tsteq	r6, r5
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     da0:	03052030 	movweq	r2, #20528	; 0x5030
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	054b0620 	strbeq	r0, [fp, #-1568]	; 0xfffff9e0
     da8:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	05402005 	strbeq	r2, [r0, #-5]
     db0:	05051e0c 	streq	r1, [r5, #-3596]	; 0xfffff1f4
	__pi_systat.ondmns &= ~d;
     db4:	06090522 	streq	r0, [r9], -r2, lsr #10
     db8:	0616051e 			; <UNDEFINED> instruction: 0x0616051e
}
     dbc:	200c0501 	andcs	r0, ip, r1, lsl #10
     dc0:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
void __pi_syserror (word ec, const char *m) {
     dc4:	04052e09 	streq	r2, [r5], #-3593	; 0xfffff1f7
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	06053206 	streq	r3, [r5], -r6, lsl #4
     dcc:	03050106 	movweq	r0, #20742	; 0x5106
     dd0:	4b4e3006 	blmi	138cdf0 <__ccfg+0x136ce48>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd4:	054b593f 	strbeq	r5, [fp, #-2367]	; 0xfffff6c1
     dd8:	7ed10304 	cdpvc	3, 13, cr0, cr1, cr4, {0}
     ddc:	06060520 	streq	r0, [r6], -r0, lsr #10
		all_leds_blink;
     de0:	06050501 	streq	r0, [r5], -r1, lsl #10
     de4:	4c040521 	cfstr32mi	mvfx0, [r4], {33}	; 0x21
     de8:	01063d05 	tsteq	r6, r5, lsl #26
     dec:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	0405203d 	streq	r2, [r5], #-61	; 0xffffffc3
     df4:	06230520 	strteq	r0, [r3], -r0, lsr #10
     df8:	06240554 			; <UNDEFINED> instruction: 0x06240554
     dfc:	06050501 	streq	r0, [r5], -r1, lsl #10
     e00:	2e01a103 	mvfcss	f2, f3
     e04:	01060605 	tsteq	r6, r5, lsl #12
	while (1) {
     e08:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
     e0c:	053c01b7 	ldreq	r0, [ip, #-439]!	; 0xfffffe49
     e10:	05052d06 	streq	r2, [r5, #-3334]	; 0xfffff2fa
     e14:	03052106 	movweq	r2, #20742	; 0x5106
void tci_run_delay_timer () {
     e18:	4b901103 	blmi	fe40522c <_estack+0xde40022c>
	setdel = __pi_mintk - __pi_old;
     e1c:	01055940 	tsteq	r5, r0, asr #18
     e20:	2e13053d 	mrccs	5, 0, r0, cr3, cr13, {1}
     e24:	2e060105 	adfcss	f0, f6, f5
     e28:	01003a02 	tsteq	r0, r2, lsl #20
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2c:	00156201 	andseq	r6, r5, r1, lsl #4
     e30:	a1000300 	mrsge	r0, LR_irq
     e34:	02000002 	andeq	r0, r0, #2
     e38:	0d0efb01 	vstreq	d15, [lr, #-4]
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	01010100 	mrseq	r0, (UNDEF: 17)
	sti_tim;
     e40:	00000001 	andeq	r0, r0, r1
}
     e44:	01000001 	tsteq	r0, r1
     e48:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d94 <__pi_offdomain+0x10>
     e4c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
     e50:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
     e54:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	cli_aux;
     e58:	6f746b73 	svcvs	0x00746b73
     e5c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     e64:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     e68:	2f534f43 	svccs	0x00534f43
     e6c:	4f636950 	svcmi	0x00636950
	sti_aux;
     e70:	43432f53 	movtmi	r2, #16211	; 0x3f53
}
     e74:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     e78:	6f682f00 	svcvs	0x00682f00
     e7c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
void AONRTCIntHandler () {
     e80:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	442f6e65 	strtmi	r6, [pc], #-3685	; e8c <AONRTCIntHandler+0xc>
     e88:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	4f2f706f 	svcmi	0x002f706f
		if (__pi_utims [0] == 0)
     e90:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     e94:	502f5445 	eorpl	r5, pc, r5, asr #8
		if (*(__pi_utims [0])) {
     e98:	534f4349 	movtpl	r4, #62281	; 0xf349
     e9c:	6369502f 	cmnvs	r9, #47	; 0x2f
			(*(__pi_utims [0]))--;
     ea0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		if (__pi_utims [1] == 0)
     ea4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		if (*(__pi_utims [1])) {
     ea8:	43432f58 	movtmi	r2, #16216	; 0x3f58
			aux_timer_inactive = 0;
     eac:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
			(*(__pi_utims [1]))--;
     eb0:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
		if (__pi_utims [2] == 0)
     eb4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		if (*(__pi_utims [2])) {
     eb8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
			(*(__pi_utims [2]))--;
     ebc:	2f006269 	svccs	0x00006269
		if (__pi_utims [3] != 0) {
     ec0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			if (*(__pi_utims [3])) {
     ec4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
				aux_timer_inactive = 0;
     ec8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
				(*(__pi_utims [3]))--;
     ecc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	if (__pi_systat.ledsts) {
     ed0:	706f746b 	rsbvc	r7, pc, fp, ror #8
     ed4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if (__pi_systat.ledblc++ == 0) {
     ed8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     edc:	4349502f 	movtmi	r5, #36911	; 0x902f
			if (__pi_systat.ledblk) {
     ee0:	502f534f 	eorpl	r5, pc, pc, asr #6
     ee4:	534f6369 	movtpl	r6, #62313	; 0xf369
     ee8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
     ef0:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x2)
     ef4:	2f656d6f 	svccs	0x00656d6f
     ef8:	70657473 	rsbvc	r7, r5, r3, ror r4
     efc:	2f6e6568 	svccs	0x006e6568
				if (__pi_systat.ledsts & 0x4)
     f00:	6b736544 	blvs	1cda418 <__ccfg+0x1cba470>
				__pi_systat.ledblk = 0;
     f04:	2f706f74 	svccs	0x00706f74
     f08:	4f534c4f 	svcmi	0x00534c4f
			if (__pi_systat.fstblk)
     f0c:	2f54454e 	svccs	0x0054454e
     f10:	4f434950 	svcmi	0x00434950
				__pi_systat.ledblc = 200;
     f14:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	2f534f63 	svccs	0x00534f63
		cli_tim;
     f1c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		__pi_new += setdel;
     f20:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
     f24:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		setdel = 0;
     f28:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
		RISE_N_SHINE;
     f2c:	2f656d6f 	svccs	0x00656d6f
		__pi_new += setdel;
     f30:	70657473 	rsbvc	r7, r5, r3, ror r4
		RISE_N_SHINE;
     f34:	2f6e6568 	svccs	0x006e6568
     f38:	6b736544 	blvs	1cda450 <__ccfg+0x1cba4a8>
		aux_timer_inactive = 1;
     f3c:	2f706f74 	svccs	0x00706f74
     f40:	4f534c4f 	svcmi	0x00534c4f
				if (__pi_systat.ledsts & 0x1)
     f44:	2f54454e 	svccs	0x0054454e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	4f434950 	svcmi	0x00434950
     f4c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				if (__pi_systat.ledsts & 0x2)
     f50:	2f534f63 	svccs	0x00534f63
     f54:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     f58:	2f006c65 	svccs	0x00006c65
				if (__pi_systat.ledsts & 0x8)
     f5c:	2f727375 	svccs	0x00727375
				__pi_systat.ledblk = 1;
     f60:	2f62696c 	svccs	0x0062696c
     f64:	2f636367 	svccs	0x00636367
		if (aux_timer_inactive) {
     f68:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
			cli_aux;
     f6c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     f70:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     f74:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
     f78:	2f312e32 	svccs	0x00312e32
     f7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     f80:	00656475 	rsbeq	r6, r5, r5, ror r4
     f84:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ed0 <AONRTCIntHandler+0x50>
     f88:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
     f8c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
     f90:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
word tci_update_delay_ticks (Boolean force) {
     f94:	6f746b73 	svcvs	0x00746b73
	cli_tim;
     f98:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     f9c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if (setdel) {
     fa0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fa4:	2f534f43 	svccs	0x00534f43
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	4f636950 	svcmi	0x00636950
     fac:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     fb0:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	00010063 	andeq	r0, r1, r3, rrx
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	73797300 	cmnvc	r9, #0, 6
	return NO;
     fbc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
			setdel = 0;
     fc0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc4:	63000002 	movwvs	r0, #2
     fc8:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
}
     fcc:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
		sti_tim;
     fd0:	0100682e 	tsteq	r0, lr, lsr #16
		return YES;
     fd4:	70670000 	rsbvc	r0, r7, r0
     fd8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     fdc:	00000200 	andeq	r0, r0, r0, lsl #4
     fe0:	5f717269 	svcpl	0x00717269
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	UARTDisable (UART0_BASE);
     fe8:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
	UARTDisable (UART0_BASE);
     ff0:	00000300 	andeq	r0, r0, r0, lsl #6
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     ff8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ffc:	72690000 	rsbvc	r0, r9, #0
    1000:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1008:	00682e73 	rsbeq	r2, r8, r3, ror lr
    100c:	69000003 	stmdbvs	r0, {r0, r1}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
    1014:	735f6e69 	cmpvc	pc, #1680	; 0x690
    1018:	6f736e65 	svcvs	0x00736e65
	urates [0] = rate;
    101c:	00682e72 	rsbeq	r2, r8, r2, ror lr
}
    1020:	70000004 	andvc	r0, r0, r4
    1024:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    1028:	00020068 	andeq	r0, r2, r8, rrx
    102c:	6e6f6100 	powvse	f6, f7, f0
    1030:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    1034:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	77700000 	ldrbvc	r0, [r0, -r0]!
    103c:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
    1040:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	00000200 	andeq	r0, r0, r0, lsl #4
    1048:	5f6e6f61 	svcpl	0x006e6f61
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104c:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
    1050:	00020068 	andeq	r0, r2, r8, rrx
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
    1058:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    105c:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    1060:	00000500 	andeq	r0, r0, r0, lsl #10
    1064:	5f6e6f61 	svcpl	0x006e6f61
    1068:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    106c:	00020068 	andeq	r0, r2, r8, rrx
	switch (operation) {
    1070:	6e6f6100 	powvse	f6, f7, f0
static int ioreq_uart_a (int operation, char *buf, int len) {
    1074:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    1078:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    107c:	00020068 	andeq	r0, r2, r8, rrx
    1080:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1084:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
				*buf++ = uart_a_read;
    1088:	00060068 	andeq	r0, r6, r8, rrx
    108c:	63726100 	cmnvs	r2, #0, 2
			while (len && uart_a_char_available) {
    1090:	00682e68 	rsbeq	r2, r8, r8, ror #28
    1094:	6d000001 	stcvs	0, cr0, [r0, #-4]
    1098:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
			if (len != operation) {
    109c:	00010068 	andeq	r0, r1, r8, rrx
}
    10a0:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    10a4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			uart_a_disable_int;
    10a8:	00682e73 	rsbeq	r2, r8, r3, ror lr
			if (uart_a_char_available) {
    10ac:	62000001 	andvs	r0, r0, #1
				*buf++ = uart_a_read;
    10b0:	6f747475 	svcvs	0x00747475
			uart_a_disable_int;
    10b4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    10b8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
			if (uart_a_char_available) {
    10bc:	00000100 	andeq	r0, r0, r0, lsl #2
    10c0:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
				uart_a_enable_int;
    10c4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    10c8:	6b000007 	blvs	10ec <ioreq_uart_a+0x7c>
				goto Redo_rx;
    10cc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10d0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    10d4:	00000005 	andeq	r0, r0, r5
			return -2;
    10d8:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    10dc:	000ce402 	andeq	lr, ip, r2, lsl #8
				uart_a_write (*buf);
    10e0:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
    10e4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			while (len && uart_a_room_in_tx) {
    10e8:	10062705 	andne	r2, r6, r5, lsl #14
    10ec:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
    10f0:	01010005 	tsteq	r1, r5
			if (len != operation) {
    10f4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
			uart_a_disable_int;
    10f8:	000cf002 	andeq	pc, ip, r2
    10fc:	01180300 	tsteq	r8, r0, lsl #6
			if (uart_a_room_in_tx) {
    1100:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
    1104:	09050108 	stmdbeq	r5, {r3, r8}
				uart_a_enable_int;
    1108:	08050106 	stmdaeq	r5, {r1, r2, r8}
    110c:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
				*buf++ = uart_a_read;
    1110:	2b060305 	blcs	181d2c <__ccfg+0x161d84>
			if (uart_a_room_in_tx) {
    1114:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
				uart_a_write (*buf);
    1118:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
    111c:	060a0501 	streq	r0, [sl], -r1, lsl #10
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
    1124:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
			uart_a_enable_int;
    1128:	01060405 	tsteq	r6, r5, lsl #8
    112c:	01000702 	tsteq	r0, r2, lsl #14
    1130:	001f0501 	andseq	r0, pc, r1, lsl #10
			return 0;
    1134:	0d1c0205 	lfmeq	f0, 4, [ip, #-20]	; 0xffffffec
			if (len == UART_CNTRL_SETRATE) {
    1138:	1f030000 	svcne	0x00030000
				if (__pi_uart_setrate (*((word*)buf),
    113c:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
    1140:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    1144:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
				syserror (EREQPAR, "uar");
    1148:	01053c08 	tsteq	r5, r8, lsl #24
			syserror (ENOOPER, "uai");
    114c:	06030524 	streq	r0, [r3], -r4, lsr #10
			if (len == UART_CNTRL_GETRATE) {
    1150:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
				return 1;
    1154:	07020106 	streq	r0, [r2, -r6, lsl #2]
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			syserror (ENOOPER, "uai");
    115c:	0205001e 	andeq	r0, r5, #30
    1160:	00000d48 	andeq	r0, r0, r8, asr #26
    1164:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
    1168:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
    116c:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    1170:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
    1174:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    1178:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    117c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
void UART0IntHandler () {
    1184:	17052106 	strne	r2, [r5, -r6, lsl #2]
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    118c:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    1190:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
    1194:	06090501 	streq	r0, [r9], -r1, lsl #10
    1198:	4a080501 	bmi	2025a4 <__ccfg+0x1e25fc>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	30060205 	andcc	r0, r6, r5, lsl #4
    11a0:	01061505 	tsteq	r6, r5, lsl #10
		RISE_N_SHINE;
    11a4:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    11a8:	01010005 	tsteq	r1, r5
		i_trigger (devevent (UART_A, READ));
    11ac:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    11b0:	000d8402 	andeq	r8, sp, r2, lsl #8
    11b4:	013a0300 	teqeq	sl, r0, lsl #6
    11b8:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    11bc:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    11c0:	1f052502 	svcne	0x00052502
    11c4:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
    11c8:	3c053d06 	stccc	13, cr3, [r5], {6}
    11cc:	01080501 	tsteq	r8, r1, lsl #10
    11d0:	01060905 	tsteq	r6, r5, lsl #18
    11d4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    11d8:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    11e0:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
    11e4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		i_trigger (devevent (UART_A, WRITE));
    11e8:	06052027 	streq	r2, [r5], -r7, lsr #32
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	06040520 	streq	r0, [r4], -r0, lsr #10
    11f0:	06240521 	strteq	r0, [r4], -r1, lsr #10
		RISE_N_SHINE;
    11f4:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    11f8:	23060205 	movwcs	r0, #25093	; 0x6205
    11fc:	01061505 	tsteq	r6, r5, lsl #10
		i_trigger (devevent (UART_A, WRITE));
    1200:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1204:	01010005 	tsteq	r1, r5
    1208:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
    120c:	00000002 	andeq	r0, r0, r2
    1210:	00ce0300 	sbceq	r0, lr, r0, lsl #6
    1214:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1218:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
    121c:	06220205 	strteq	r0, [r2], -r5, lsl #4
    1220:	03053633 	movweq	r3, #22067	; 0x5633
    1224:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
    1228:	01f00304 	mvnseq	r0, r4, lsl #6
}
    122c:	5c053001 	stcpl	0, cr3, [r5], {1}
    1230:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1234:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
    1238:	0502100a 	streq	r1, [r2, #-10]
    123c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
void __buttons_setirq (int val) {
    1240:	0205002d 	andeq	r0, r5, #45	; 0x2d
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	00000dc4 	andeq	r0, r0, r4, asr #27
    1248:	01019703 	tsteq	r1, r3, lsl #14
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	01140205 	tsteq	r4, r5, lsl #4
    1250:	2d051701 	stccs	7, cr1, [r5, #-4]
    1254:	01790306 	cmneq	r9, r6, lsl #6
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125c:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    1260:	03030503 	movweq	r0, #13571	; 0x3503
    1264:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
    1268:	062d0504 	strteq	r0, [sp], -r4, lsl #10
    126c:	2001cb03 	andcs	ip, r1, r3, lsl #22
    1270:	02050104 	andeq	r0, r5, #4, 2
}
    1274:	7f8f0306 	svcvc	0x008f0306
    1278:	1303053c 	movwne	r0, #13628	; 0x353c
    127c:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
    1280:	eb032905 	bl	cb69c <__ccfg+0xab6f4>
void __pinlist_setirq (int val) {
    1284:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
	for (i = 0; i < N_PINLIST; i++) {
    1288:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	7f900303 	svcvc	0x00900303
	for (i = 0; i < N_PINLIST; i++) {
    1294:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	00f0032d 	rscseq	r0, r0, sp, lsr #6
    129c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	90030603 	andls	r0, r3, r3, lsl #12
    12a4:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
    12a8:	eb032905 	bl	cb6c4 <__ccfg+0xab71c>
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
}
    12b0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    12b4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    12b8:	90030603 	andls	r0, r3, r3, lsl #12
    12bc:	0101207f 	tsteq	r1, pc, ror r0
void GPIOIntHandler () {
    12c0:	01010101 	tsteq	r1, r1, lsl #2
if (buttons_int) {
    12c4:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    12c8:	29050404 	stmdbcs	r5, {r2, sl}
	buttons_disable ();
    12cc:	0101a103 	tsteq	r1, r3, lsl #2
    12d0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	i_trigger ((aword)&__button_list);
    12d4:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    12d8:	03030501 	movweq	r0, #13569	; 0x3501
    12dc:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    12e0:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    12e4:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
    12e8:	06030501 	streq	r0, [r3], -r1, lsl #10
    12ec:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    12f0:	29050404 	stmdbcs	r5, {r2, sl}
    12f4:	0101a103 	tsteq	r1, r3, lsl #2
    12f8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    12fc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	RISE_N_SHINE;
    1300:	06030501 	streq	r0, [r3], -r1, lsl #10
    1304:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    1308:	01010101 	tsteq	r1, r1, lsl #2
if (pin_sensor_int) {
    130c:	01580101 	cmpeq	r8, r1, lsl #2
    1310:	1108052e 	tstne	r8, lr, lsr #10
	i_trigger ((aword)(&__input_pins));
    1314:	01000902 	tsteq	r0, r2, lsl #18
    1318:	001d0501 	andseq	r0, sp, r1, lsl #10
    131c:	0e180205 	cdpeq	2, 1, cr0, cr8, cr5, {0}
    1320:	9d030000 	stcls	0, cr0, [r3, #-0]
    1324:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1328:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
    132c:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
    1330:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1334:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
    1338:	0602052e 	streq	r0, [r2], -lr, lsr #10
    133c:	01760323 	cmneq	r6, r3, lsr #6
	__pinsen_disable_and_clear;
    1340:	01061105 	tsteq	r6, r5, lsl #2
	RISE_N_SHINE;
    1344:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
    1348:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
    134c:	2a052073 	bcs	149520 <__ccfg+0x129578>
}
    1350:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
    1354:	2076032f 	rsbscs	r0, r6, pc, lsr #6
    1358:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    135c:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
    1360:	23060205 	movwcs	r0, #25093	; 0x6205
void system_init () {
    1364:	2f060105 	svccs	0x00060105
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	01000b02 	tsteq	r0, r2, lsl #22
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	00210501 	eoreq	r0, r1, r1, lsl #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	0e580205 	cdpeq	2, 5, cr0, cr8, cr5, {0}
    1374:	aa030000 	bge	c137c <__ccfg+0xa13d4>
    1378:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137c:	06210517 			; <UNDEFINED> instruction: 0x06210517
    1380:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
    1388:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    138c:	11050169 	tstne	r5, r9, ror #2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	2f050106 	svccs	0x00050106
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1394:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	2f052017 	svccs	0x00052017
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	2a052e36 	bcs	14cc80 <__ccfg+0x12ccd8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	01052e09 	tsteq	r5, r9, lsl #28
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	06021306 	streq	r1, [r2], -r6, lsl #6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    13b8:	0205001a 	andeq	r0, r5, #26
    13bc:	00000e80 	andeq	r0, r0, r0, lsl #29
    13c0:	0102b703 	tsteq	r2, r3, lsl #14
		if (port_confs [i] & 0x80)
    13c4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	0e061a05 	vmlaeq.f32	s2, s12, s10
    13cc:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
		if (port_confs [i] & 0x40)
    13d0:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
    13d8:	2b051406 	blcs	1463f8 <__ccfg+0x126450>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13e0:	06050522 	streq	r0, [r5], -r2, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e4:	06030501 	streq	r0, [r3], -r1, lsl #10
	all_leds_blink;
    13e8:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
    13ec:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    13f0:	03052e06 	movweq	r2, #24070	; 0x5e06
    13f4:	07053006 	streq	r3, [r5, -r6]
    13f8:	06050106 	streq	r0, [r5], -r6, lsl #2
    13fc:	06040520 	streq	r0, [r4], -r0, lsr #10
    1400:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	06040501 	streq	r0, [r4], -r1, lsl #10
    1408:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
    140c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1410:	06120522 	ldreq	r0, [r2], -r2, lsr #10
    1414:	20060501 	andcs	r0, r6, r1, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	01060705 	tsteq	r6, r5, lsl #14
    1420:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
	IntEnable (INT_AON_RTC_COMB);
    1424:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1428:	1f130617 	svcne	0x00130617
    142c:	2f060405 	svccs	0x00060405
	__pi_malloc_init ();
    1430:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1438:	03052006 	movweq	r2, #20486	; 0x5006
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143c:	07052206 	streq	r2, [r5, -r6, lsl #4]
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	06050106 	streq	r0, [r5], -r6, lsl #2
    1444:	06040520 	streq	r0, [r4], -r0, lsr #10
    1448:	06170521 	ldreq	r0, [r7], -r1, lsr #10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
    1450:	03052f06 	movweq	r2, #24326	; 0x5f06
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	06120514 			; <UNDEFINED> instruction: 0x06120514
    1458:	20060501 	andcs	r0, r6, r1, lsl #10
    145c:	21060405 	tstcs	r6, r5, lsl #8
	urates [0] = UART_RATE / 100;
    1460:	01060805 	tsteq	r6, r5, lsl #16
    1464:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
	reinit_uart ();
    1468:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	EXTRA_INITIALIZERS;
    146c:	1f130618 	svcne	0x00130618
    1470:	2f060505 	svccs	0x00060505
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1474:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
    1478:	017da303 	cmneq	sp, r3, lsl #6
    147c:	01061105 	tsteq	r6, r5, lsl #2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1480:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    1484:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1488:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    148c:	06052019 			; <UNDEFINED> instruction: 0x06052019
			devinit [i] . init (devinit [i] . param);
    1490:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1494:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    1498:	20070501 	andcs	r0, r7, r1, lsl #10
    149c:	052f1405 	streq	r1, [pc, #-1029]!	; 109f <ioreq_uart_a+0x2f>
	IntEnable (INT_UART0_COMB);
    14a0:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    14a4:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
}
    14a8:	06050106 	streq	r0, [r5], -r6, lsl #2
	tci_run_auxiliary_timer ();
    14ac:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
		diag ("");
    14b0:	96032905 	strls	r2, [r3], -r5, lsl #18
    14b4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
		diag ("Leftover RAM: %d bytes",
    14c0:	e6030605 	str	r0, [r3], -r5, lsl #12
    14c4:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    14c8:	08050106 	stmdaeq	r5, {r1, r2, r8}
    14cc:	06060520 	streq	r0, [r6], -r0, lsr #10
    14d0:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    14d4:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
    14d8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    14dc:	01062d05 	tsteq	r6, r5, lsl #26
    14e0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    14e4:	7de80306 	stclvc	3, cr0, [r8, #24]!
    14e8:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    14ec:	06060501 	streq	r0, [r6], -r1, lsl #10
    14f0:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    14f4:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
    14f8:	06050106 	streq	r0, [r5], -r6, lsl #2
    14fc:	01012106 	tsteq	r1, r6, lsl #2
    1500:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    1504:	03010618 	movweq	r0, #5656	; 0x1618
    1508:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
    150c:	13052206 	movwne	r2, #20998	; 0x5206
    1510:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1514:	06050520 	streq	r0, [r5], -r0, lsr #10
    1518:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1520:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
    1524:	02052e02 	andeq	r2, r5, #2, 28
    1528:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
    152c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1530:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
    1534:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
    1538:	0c052206 	sfmeq	f2, 4, [r5], {6}
}
    153c:	0a050106 	beq	14195c <__ccfg+0x1219b4>
__attribute__ ((noreturn)) void __pi_release () {
    1540:	1f0c052f 	svcne	0x000c052f
    1544:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
    1548:	03051e0c 	movweq	r1, #24076	; 0x5e0c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    154c:	01132f06 	tsteq	r3, r6, lsl #30
	check_stack_overflow;
    1550:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
    1554:	13060105 	movwne	r0, #24837	; 0x6105
    1558:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
	update_n_wake (MAX_WORD, NO);
    155c:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
    1560:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
    1564:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
	for_all_tasks (__pi_curr) {
    1568:	06050106 	streq	r0, [r5], -r6, lsl #2
    156c:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    1570:	c2032905 	andgt	r2, r3, #81920	; 0x14000
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
	__SLEEP;
    1578:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    157c:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    1580:	ba030605 	blt	c2d9c <__ccfg+0xa2df4>
    1584:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
	system_event_count ++;
    1588:	08050106 	stmdaeq	r5, {r1, r2, r8}
    158c:	06060520 	streq	r0, [r6], -r0, lsr #10
	switch (__pi_systat.effpdm) {
    1590:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    1594:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
    1598:	17050501 	strne	r0, [r5, -r1, lsl #10]
    159c:	01062d05 	tsteq	r6, r5, lsl #26
			__WFI ();
    15a0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    15a4:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
    15a8:	0614054a 	ldreq	r0, [r4], -sl, asr #10
	check_stack_overflow;
    15ac:	06060501 	streq	r0, [r6], -r1, lsl #10
    15b0:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b4:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
    15b8:	06050106 	streq	r0, [r5], -r6, lsl #2
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	01012106 	tsteq	r1, r6, lsl #2
			goto Redo;
    15c0:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
	for_all_tasks (__pi_curr) {
    15c4:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	06030501 	streq	r0, [r3], -r1, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15cc:	4a02ce03 	bmi	b4de0 <__ccfg+0x94e38>
    15d0:	01060605 	tsteq	r6, r5, lsl #12
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d4:	30060405 	andcc	r0, r6, r5, lsl #8
    15d8:	01001502 	tsteq	r0, r2, lsl #10
    15dc:	002d0501 	eoreq	r0, sp, r1, lsl #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15e0:	0f940205 	svceq	0x00940205
    15e4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    15ec:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
			__WFI ();
    15f0:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f4:	052f0605 	streq	r0, [pc, #-1541]!	; ff7 <__pi_uart_setrate+0x13>
    15f8:	21061f02 	tstcs	r6, r2, lsl #30
}
    15fc:	01060605 	tsteq	r6, r5, lsl #12
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1600:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1604:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1608:	06060520 	streq	r0, [r6], -r0, lsr #10
    160c:	06040501 	streq	r0, [r4], -r1, lsl #10
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1610:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    1614:	06020501 	streq	r0, [r2], -r1, lsl #10
    1618:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161c:	01061005 	tsteq	r6, r5
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1620:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
    1624:	0187031a 	orreq	r0, r7, sl, lsl r3
    1628:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
    162c:	1f170520 	svcne	0x00170520
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	0a030905 	beq	c3a4c <__ccfg+0xa3aa4>
    1634:	030d0520 	movweq	r0, #54560	; 0xd520
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	0b052076 	bleq	149818 <__ccfg+0x129870>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    163c:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
    1640:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
    1644:	06010513 			; <UNDEFINED> instruction: 0x06010513
    1648:	06030519 			; <UNDEFINED> instruction: 0x06030519
    164c:	0a052f29 	beq	14d2f8 <__ccfg+0x12d350>
			SysCtrlSetRechargeBeforePowerDown
    1650:	09020106 	stmdbeq	r2, {r1, r2, r8}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1654:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1658:	02050033 	andeq	r0, r5, #51	; 0x33
    165c:	00000fe4 	andeq	r0, r0, r4, ror #31
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	0105d303 	tsteq	r5, r3, lsl #6
    1664:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
    1668:	03063305 	movweq	r3, #25349	; 0x6305
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166c:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    1670:	03330527 	teqeq	r3, #163577856	; 0x9c00000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	02053c79 	andeq	r3, r5, #30976	; 0x7900
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
    167c:	03050502 	movweq	r0, #21762	; 0x5502
    1680:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1684:	06020501 	streq	r0, [r2], -r1, lsl #10
			while (!(AONWUCPowerStatusGet () &
    1688:	0104ab03 	tsteq	r4, r3, lsl #22
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
    1690:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1694:	017dd903 	cmneq	sp, r3, lsl #18
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1698:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    169c:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    16a0:	03010501 	movweq	r0, #5377	; 0x1501
    16a4:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	03230506 			; <UNDEFINED> instruction: 0x03230506
    16ac:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	054f0605 	strbeq	r0, [pc, #-1541]	; 10b3 <ioreq_uart_a+0x43>
    16b4:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b8:	06020501 	streq	r0, [r2], -r1, lsl #10
			reinit_uart ();
    16bc:	66029e03 	strvs	r9, [r2], -r3, lsl #28
    16c0:	01060d05 	tsteq	r6, r5, lsl #26
    16c4:	2f060205 	svccs	0x00060205
}
    16c8:	13060105 	movwne	r0, #24837	; 0x6105
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    16cc:	01000c02 	tsteq	r0, r2, lsl #24
    16d0:	001c0501 	andseq	r0, ip, r1, lsl #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	10380205 	eorsne	r0, r8, r5, lsl #4
    16d8:	ef030000 	svc	0x00030000
    16dc:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
    16e4:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
    16e8:	17050501 	strne	r0, [r5, -r1, lsl #10]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ec:	01062305 	tsteq	r6, r5, lsl #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	02050104 	andeq	r0, r5, #4, 2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	20028803 	andcs	r8, r2, r3, lsl #16
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	23050604 	movwcs	r0, #22020	; 0x5604
    16fc:	207df803 	rsbscs	pc, sp, r3, lsl #16
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1700:	02050104 	andeq	r0, r5, #4, 2
    1704:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1708:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170c:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1710:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
    1714:	17050517 	smladne	r5, r7, r5, r0
			PRCMPowerDomainOff (
    1718:	01062305 	tsteq	r6, r5, lsl #6
    171c:	02050104 	andeq	r0, r5, #4, 2
	__SLEEP;
    1720:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
    1724:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
  __ASM volatile ("cpsie i" : : : "memory");
    1728:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
	goto Redo;
    172c:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
    1730:	01062405 	tsteq	r6, r5, lsl #8
    1734:	02050104 	andeq	r0, r5, #4, 2
    1738:	7db20306 	ldcvc	3, cr0, [r2, #24]!
    173c:	000e0258 	andeq	r0, lr, r8, asr r2
    1740:	3d050101 	stfccs	f0, [r5, #-4]
    1744:	70020500 	andvc	r0, r2, r0, lsl #10
    1748:	03000010 	movweq	r0, #16
    174c:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
    1750:	3d051402 	cfstrscc	mvf1, [r5, #-8]
    1754:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
    1758:	0b030605 	bleq	c2f74 <__ccfg+0xa2fcc>
    175c:	060e0582 	streq	r0, [lr], -r2, lsl #11
    1760:	2f080501 	svccs	0x00080501
    1764:	051f0e05 	ldreq	r0, [pc, #-3589]	; 967 <root+0x243>
    1768:	052f0605 	streq	r0, [pc, #-1541]!	; 116b <ioreq_uart_a+0xfb>
    176c:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
    1770:	0f052006 	svceq	0x00052006
    1774:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1778:	06070534 			; <UNDEFINED> instruction: 0x06070534
    177c:	06050501 	streq	r0, [r5], -r1, lsl #10
    1780:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
    1784:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    1788:	20340301 	eorscs	r0, r4, r1, lsl #6
    178c:	a0030905 	andge	r0, r3, r5, lsl #18
    1790:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
    1794:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
	cli_tim;
    1798:	0e052108 	adfeqs	f2, f5, #0.0
    179c:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
    17a0:	0b030604 	bleq	c2fb8 <__ccfg+0xa3010>
	diag ("PicOS halted");
    17a4:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
	mdelay (500);
    17a8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    17ac:	0605052e 	streq	r0, [r5], -lr, lsr #10
	setpowermode (2);
    17b0:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
	__PCB = NULL;
    17b4:	060b0524 	streq	r0, [fp], -r4, lsr #10
	release;
    17b8:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
    17bc:	21062d04 	tstcs	r6, r4, lsl #26
    17c0:	01060b05 	tsteq	r6, r5, lsl #22
    17c4:	03060505 	movweq	r0, #25861	; 0x6505
int main (void) {
    17c8:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	05053006 	streq	r3, [r5, #-6]
    17d0:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17d8:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
	system_init ();
    17dc:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
	tcv_init ();
    17e0:	07053506 	streq	r3, [r5, -r6, lsl #10]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    17e8:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17ec:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    17f0:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
    17f4:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    17f8:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
    17fc:	03040520 	movweq	r0, #17696	; 0x4520
	delay (16, 0);
    1800:	08052030 	stmdaeq	r5, {r4, r5, sp}
    1804:	03050521 	movweq	r0, #21793	; 0x5521
    1808:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
	__pi_release ();
    180c:	3c110306 	ldccc	3, cr0, [r1], {6}
    1810:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
    1814:	1f04053d 	svcne	0x0004053d
    1818:	0b052f06 	bleq	14d438 <__ccfg+0x12d490>
    181c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1820:	07052506 	streq	r2, [r5, -r6, lsl #10]
    1824:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
static void killev (__pi_pcb_t *pid) {
    1828:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
	wfun = (aword)(pid->code);
    182c:	08050106 	stmdaeq	r5, {r1, r2, r8}
	for_all_tasks (i) {
    1830:	0605054a 	streq	r0, [r5], -sl, asr #10
		for (j = 0; j < nevents (i); j++) {
    1834:	06040531 			; <UNDEFINED> instruction: 0x06040531
    1838:	062e1603 	strteq	r1, [lr], -r3, lsl #12
    183c:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
			    || i->Events [j] . Event == wfun
    1840:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
		for (j = 0; j < nevents (i); j++) {
    1844:	052f0605 	streq	r0, [pc, #-1541]!	; 1247 <__buttons_setirq+0x7>
			if (i->Events [j] . Event == (aword)pid
    1848:	7f880302 	svcvc	0x00880302
    184c:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    1850:	030c0501 	movweq	r0, #50433	; 0xc501
				wakeupev (i, j);
    1854:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
    1858:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
	for_all_tasks (i) {
    185c:	0c052f06 	stceq	15, cr2, [r5], {6}
}
    1860:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	20110306 	andscs	r0, r1, r6, lsl #6
static void qfree (aword *ch) {
    1868:	01001202 	tsteq	r0, r2, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186c:	002b0501 	eoreq	r0, fp, r1, lsl #10
	cc = (aword*)(mpools + MA_NP);
    1870:	00000205 	andeq	r0, r0, r5, lsl #4
	m_setnextp (ch, chunk);
    1874:	ea030000 	b	c187c <__ccfg+0xa18d4>
	m_setnextp (cc, ch);
    1878:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
}
    187c:	06010514 			; <UNDEFINED> instruction: 0x06010514
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1880:	00060213 	andeq	r0, r6, r3, lsl r2
    1884:	19050101 	stmdbne	r5, {r0, r8}
    1888:	80020500 	andhi	r0, r2, r0, lsl #10
			m_setnextp (cc, m_nextp (chunk));
    188c:	03000011 	movweq	r0, #17
			m_size (chunk) += m_hdrlen + m_size (ch);
    1890:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
    1894:	06041402 	streq	r1, [r4], -r2, lsl #8
    1898:	12032405 	andne	r2, r3, #83886080	; 0x5000000
    189c:	17050501 	strne	r0, [r5, -r1, lsl #10]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	01062205 	tsteq	r6, r5, lsl #4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	19050104 	stmdbne	r5, {r2, r8}
    18a8:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
    18ac:	03220506 			; <UNDEFINED> instruction: 0x03220506
			m_setnextp (cc, m_nextp (chunk));
    18b0:	01042019 	tsteq	r4, r9, lsl r0
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	6b030605 	blvs	c30d0 <__ccfg+0xa3128>
    18b8:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    18bc:	20150322 	andscs	r0, r5, r2, lsr #6
    18c0:	02050104 	andeq	r0, r5, #4, 2
    18c4:	206b0306 	rsbcs	r0, fp, r6, lsl #6
    18c8:	01060605 	tsteq	r6, r5, lsl #12
			if (m_size (chunk) >= m_size (ch))
    18cc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    18d0:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
    18d4:	0603052e 	streq	r0, [r3], -lr, lsr #10
		chunk = m_nextp (chunk))
    18d8:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
    18dc:	01010113 	tsteq	r1, r3, lsl r1
    18e0:	0620062e 	strteq	r0, [r0], -lr, lsr #12
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	4a662e66 	bmi	198d284 <__ccfg+0x196d2dc>
	diag_wait (a);
    18e8:	02052e01 	andeq	r2, r5, #1, 28
	diag_wchar (c, a);
    18ec:	06060515 			; <UNDEFINED> instruction: 0x06060515
    18f0:	20050501 	andcs	r0, r5, r1, lsl #10
}
    18f4:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
    18f8:	03052e18 	movweq	r2, #24088	; 0x5e18
	syserror (ESTATE, "state");
    18fc:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
    1900:	014b062c 	cmpeq	fp, ip, lsr #12
    1904:	01011358 	tsteq	r1, r8, asr r3
    1908:	20062e01 	andcs	r2, r6, r1, lsl #28
	for (i = 0; i < MAX_UTIMERS; i++)
    190c:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
void utimer_add (address ut) {
    1910:	0105014a 	tsteq	r5, sl, asr #2
    1914:	0b023206 	bleq	8e134 <__ccfg+0x6e18c>
		if (__pi_utims [i] == NULL)
    1918:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	02050021 	andeq	r0, r5, #33	; 0x21
    1920:	00001240 	andeq	r1, r0, r0, asr #4
		syserror (ERESOURCE, "ut a");
    1924:	0107d903 	tsteq	r7, r3, lsl #18
	__pi_utims [i] = ut;
    1928:	13140205 	tstne	r4, #1342177280	; 0x50000000
}
    192c:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1930:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    1934:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	*t = v;
    1938:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
	TCI_RUN_AUXILIARY_TIMER;
    193c:	03040106 	movweq	r0, #16646	; 0x4106
void update_n_wake (word min, Boolean force) {
    1940:	83030305 	movwhi	r0, #13061	; 0x3305
	if (TCI_UPDATE_DELAY_TICKS (force))
    1944:	01042079 	tsteq	r4, r9, ror r0
    1948:	03060205 	movweq	r0, #25093	; 0x6205
    194c:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1950:	0305010e 	movweq	r0, #20750	; 0x510e
    1954:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
    1958:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
    195c:	0104017d 	tsteq	r4, sp, ror r1
    1960:	d3030805 	movwle	r0, #14341	; 0x3805
    1964:	04042002 	streq	r2, [r4], #-2
    1968:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
    196c:	0104207d 	tsteq	r4, sp, ror r0
    1970:	d3030805 	movwle	r0, #14341	; 0x3805
    1974:	03052002 	movweq	r2, #20482	; 0x5002
    1978:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    197c:	21060305 	tstcs	r6, r5, lsl #6
    1980:	29050404 	stmdbcs	r5, {r2, sl}
		for_all_tasks (i) {
    1984:	017da703 	cmneq	sp, r3, lsl #14
	__pi_mintk = znew + min;
    1988:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    198c:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
			if (!twaiting (i))
    1990:	01042e2d 	tsteq	r4, sp, lsr #28
    1994:	03060305 	movweq	r0, #25349	; 0x6305
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1998:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    199c:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
    19a0:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
    19a4:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
    19a8:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
    19ac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    19b0:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
    19b4:	58410520 	stmdapl	r1, {r5, r8, sl}^
    19b8:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
    19bc:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    19c0:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
    19c4:	03290504 			; <UNDEFINED> instruction: 0x03290504
				wakeuptm (i);
    19c8:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
    19cc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		for_all_tasks (i) {
    19d0:	01040106 	tsteq	r4, r6, lsl #2
				d = i->Timer - znew;
    19d4:	03060305 	movweq	r0, #25349	; 0x6305
    19d8:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    19dc:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
		if ((word)(__pi_mintk - znew) < min) 
    19e0:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    19e4:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    19e8:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
	__pi_old = znew;
    19ec:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
}
    19f0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	TCI_RUN_DELAY_TIMER;
    19f4:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
}
    19f8:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    19fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1a00:	02050021 	andeq	r0, r5, #33	; 0x21
    1a04:	00001284 	andeq	r1, r0, r4, lsl #5
    1a08:	0107ec03 	tsteq	r7, r3, lsl #24
void proceed (word state) {
    1a0c:	13140205 	tstne	r4, #1342177280	; 0x50000000
	prcdstate (__pi_curr, state);
    1a10:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1a14:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
	release;
    1a18:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a1c:	90030621 	andls	r0, r3, r1, lsr #12
void __pi_wait (aword event, word state) {
    1a20:	03040107 	movweq	r0, #16647	; 0x4107
	sint j = nevents (__pi_curr);
    1a24:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
	if (j >= MAX_EVENTS_PER_TASK)
    1a28:	01042078 	tsteq	r4, r8, ror r0
    1a2c:	03060205 	movweq	r0, #25093	; 0x6205
    1a30:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
		syserror (ENEVENTS, "sw");
    1a34:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
    1a38:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
	setestate (__pi_curr->Events [j], state, event);
    1a3c:	9b033305 	blls	ce658 <__ccfg+0xae6b0>
	incwait (__pi_curr);
    1a40:	0104207d 	tsteq	r4, sp, ror r0
	setestate (__pi_curr->Events [j], state, event);
    1a44:	e6030805 	str	r0, [r3], -r5, lsl #16
}
    1a48:	04042002 	streq	r2, [r4], #-2
    1a4c:	9a032d05 	bls	cce68 <__ccfg+0xacec0>
    1a50:	0104207d 	tsteq	r4, sp, ror r0
void __pi_trigger (aword event) {
    1a54:	e8030305 	stmda	r3, {r0, r2, r8, r9}
	for_all_tasks (i) {
    1a58:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
		for (j = 0; j < nevents (i); j++) {
    1a5c:	01060805 	tsteq	r6, r5, lsl #16
    1a60:	051f1e05 	ldreq	r1, [pc, #-3589]	; c63 <root+0x53f>
    1a64:	03052106 	movweq	r2, #20742	; 0x5106
    1a68:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
			if (i->Events [j] . Event == event) {
    1a6c:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
    1a70:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    1a74:	06330517 			; <UNDEFINED> instruction: 0x06330517
				wakeupev (i, j);
    1a78:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a7c:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	for_all_tasks (i) {
    1a80:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
}
    1a84:	2d050404 	cfstrscs	mvf0, [r5, #-16]
aword __pi_join (aword pid, word st) {
    1a88:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
	for_all_tasks (i) {
    1a8c:	03050104 	movweq	r0, #20740	; 0x5104
    1a90:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
	return 0;
    1a94:	06410520 	strbeq	r0, [r1], -r0, lsr #10
		if ((aword)i == pid) {
    1a98:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
			__pi_wait (pid, st);
    1a9c:	010e051d 	tsteq	lr, sp, lsl r5
}
    1aa0:	01060205 	tsteq	r6, r5, lsl #4
	for_all_tasks (i) {
    1aa4:	03042606 	movweq	r2, #17926	; 0x4606
    1aa8:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
void delay (word d, word state) {
    1aac:	01040178 	tsteq	r4, r8, ror r1
	settstate (__pi_curr, state);
    1ab0:	03060105 	movweq	r0, #24837	; 0x6105
    1ab4:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
    1ab8:	01010008 	tsteq	r1, r8
    1abc:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
	update_n_wake (d, YES);
    1ac0:	0012c002 	andseq	ip, r2, r2
    1ac4:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
	__pi_curr->Timer = __pi_old + d;
    1ac8:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
    1acc:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
	inctimer (__pi_curr);
    1ad0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1ad4:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
    1ad8:	07040107 	streq	r0, [r4, -r7, lsl #2]
}
    1adc:	bb030505 	bllt	c2ef8 <__ccfg+0xa2f50>
    1ae0:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
	if (fun == NULL)
    1ae4:	0602052e 	streq	r0, [r2], -lr, lsr #10
		return (int) __pi_curr;
    1ae8:	01013d3d 	tsteq	r1, sp, lsr sp
    1aec:	20063c01 	andcs	r3, r6, r1, lsl #24
	for_all_tasks (i)
    1af0:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
}
    1af4:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		if (i->code == fun)
    1af8:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
	for_all_tasks (i)
    1afc:	050f0105 	streq	r0, [pc, #-261]	; 19ff <update_n_wake+0xbf>
    1b00:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1b04:	02052004 	andeq	r2, r5, #4
int __pi_strlen (const char *s) {
    1b08:	01013d06 	tsteq	r1, r6, lsl #26
	for (i = 0; *(s+i) != '\0'; i++);
    1b0c:	20063c01 	andcs	r3, r6, r1, lsl #24
}
    1b10:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	for (i = 0; *(s+i) != '\0'; i++);
    1b14:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
	while ((Boolean)(*d++ = *s++));
    1b18:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
    1b1c:	06010501 	streq	r0, [r1], -r1, lsl #10
    1b20:	0107d003 	tsteq	r7, r3
}
    1b24:	01000b02 	tsteq	r0, r2, lsl #22
	while (n-- && (*s != '\0'))
    1b28:	00150501 	andseq	r0, r5, r1, lsl #10
    1b2c:	13640205 	cmnne	r4, #1342177280	; 0x50000000
	*d = '\0';
    1b30:	80030000 	andhi	r0, r3, r0
	while (n-- && (*s != '\0'))
    1b34:	02050108 	andeq	r0, r5, #8, 2
    1b38:	06150514 			; <UNDEFINED> instruction: 0x06150514
		*d++ = *s++;
    1b3c:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
    1b40:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
	while (n--)
    1b44:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
    1b48:	a7030505 	strge	r0, [r3, -r5, lsl #10]
		*dest++ = *src++;
    1b4c:	3105017c 	tstcc	r5, ip, ror r1
    1b50:	01040106 	tsteq	r4, r6, lsl #2
    1b54:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
	while (n--)
    1b58:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
}
    1b5c:	bb033105 	bllt	cdf78 <__ccfg+0xadfd0>
		*dest++ = c;
    1b60:	01042002 	tsteq	r4, r2
void adddevfunc (devreqfun_t rf, int loc) {
    1b64:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
		syserror (EREQPAR, "addv");
    1b68:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
		syserror (ERESOURCE, "addv");
    1b6c:	9b030505 	blls	c2f88 <__ccfg+0xa2fe0>
	if (ioreq [loc] != NULL)
    1b70:	2d052e02 	stccs	14, cr2, [r5, #-8]
    1b74:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
		syserror (ERESOURCE, "addv");
    1b78:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
	ioreq [loc] = rf;
    1b7c:	03310509 	teqeq	r1, #37748736	; 0x2400000
}
    1b80:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
    1b84:	06020501 	streq	r0, [r2], -r1, lsl #10
sint io (word retry, word dev, word operation, char *buf, word len) {
    1b88:	2003dc03 	andcs	sp, r3, r3, lsl #24
    1b8c:	0179e703 	cmneq	r9, r3, lsl #14
    1b90:	01070514 	tsteq	r7, r4, lsl r5
    1b94:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1b98:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
    1b9c:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
    1ba0:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
		syserror (ENODEVICE, "io");
    1ba4:	2f060305 	svccs	0x00060305
    1ba8:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
	if (len == 0)
    1bac:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
	ret = (ioreq [dev]) (operation, buf, len);
    1bb0:	052f0603 	streq	r0, [pc, #-1539]!	; 15b5 <__pi_release+0x75>
    1bb4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	if (ret >= 0)
    1bb8:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
	if (ret == -1) {
    1bbc:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1bc0:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
		if (retry == WNONE)
    1bc4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
		iowait (dev, operation, retry);
    1bc8:	06380517 			; <UNDEFINED> instruction: 0x06380517
    1bcc:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    1bd0:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
			release;
    1bd4:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
	if (ret == -2) {
    1bd8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		if (retry != WNONE) {
    1bdc:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    1be0:	27032905 	strcs	r2, [r3, -r5, lsl #18]
			iowait (dev, operation, retry);
    1be4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1be8:	01062d05 	tsteq	r6, r5, lsl #26
			(ioreq [dev]) (NONE, buf, len);
    1bec:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1bf0:	3c560306 	mrrccc	3, 0, r0, r6, cr6
    1bf4:	29050404 	stmdbcs	r5, {r2, sl}
		(ioreq [dev]) (NONE, buf, len);
    1bf8:	0100db03 	tsteq	r0, r3, lsl #22
    1bfc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1c00:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
}
    1c04:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
	if (retry != WNONE) {
    1c08:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
		delay (-ret - 2, retry);
    1c0c:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
    1c10:	06010602 	streq	r0, [r1], -r2, lsl #12
    1c14:	2e069a03 	vmlacs.f32	s18, s12, s6
    1c18:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
		release;
    1c1c:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
    1c20:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c24:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1c28:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1c2c:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
    1c30:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    1c34:	7a9a032d 	bvc	fe6828f0 <_estack+0xde67d8f0>
		syserror (ERESOURCE, "mal1");
    1c38:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1c3c:	e6030602 	str	r0, [r3], -r2, lsl #12
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1c40:	04042005 	streq	r2, [r4], #-5
    1c44:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c48:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
	m_size (mpools [0]) = mlen - m_hdrlen;
    1c4c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c50:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1c54:	e6030602 	str	r0, [r3], -r2, lsl #12
    1c58:	01012005 	tsteq	r1, r5
}
    1c5c:	01010101 	tsteq	r1, r1, lsl #2
    1c60:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1c64:	29050404 	stmdbcs	r5, {r2, sl}
    1c68:	017acb03 	cmneq	sl, r3, lsl #22
    1c6c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1c70:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
void __pi_free (aword *ch) {
    1c74:	03020501 	movweq	r0, #9473	; 0x2501
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1c78:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
    1c7c:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
		syserror (EMALLOC, "malg");
    1c80:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
    1c84:	06020501 	streq	r0, [r2], -r1, lsl #10
	mcfree [MA_NP] += m_size (ch);
    1c88:	2005b003 	andcs	fp, r5, r3
		m_size (ch) ^= MALLOC_UMASK;
    1c8c:	29050404 	stmdbcs	r5, {r2, sl}
    1c90:	017acb03 	cmneq	sl, r3, lsl #22
	mcfree [MA_NP] += m_size (ch);
    1c94:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	QFREE;
    1c98:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	if (mevent [MA_NP] . nwait) {
    1c9c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1ca0:	2005b003 	andcs	fp, r5, r3
		trigger ((aword)(&(mevent [MA_NP])));
    1ca4:	01010101 	tsteq	r1, r1, lsl #2
		mevent [MA_NP] . nwait --;
    1ca8:	23050101 	movwcs	r0, #20737	; 0x5101
}
    1cac:	01100306 	tsteq	r0, r6, lsl #6
    1cb0:	70030205 	andvc	r0, r3, r5, lsl #4
    1cb4:	01580620 	cmpeq	r8, r0, lsr #12
    1cb8:	010d032e 	tsteq	sp, lr, lsr #6
void kill (aword pid) {
    1cbc:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
		pid = (aword) __pi_curr;
    1cc0:	017ecd03 	cmneq	lr, r3, lsl #26
	j = NULL;
    1cc4:	01062f05 	tsteq	r6, r5, lsl #30
	for_all_tasks (i) {
    1cc8:	27050104 	strcs	r0, [r5, -r4, lsl #2]
	syserror (EREQPAR, "kpi");
    1ccc:	2001ba03 	andcs	fp, r1, r3, lsl #20
    1cd0:	2f050a04 	svccs	0x00050a04
		if ((aword)i == pid) {
    1cd4:	207ec603 	rsbscs	ip, lr, r3, lsl #12
    1cd8:	02050104 	andeq	r0, r5, #4, 2
				__PCB = i->Next;
    1cdc:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
			killev (i);
    1ce0:	06230520 	strteq	r0, [r3], -r0, lsr #10
			ufree (i);
    1ce4:	03020513 	movweq	r0, #9491	; 0x2513
			if (i == __pi_curr)
    1ce8:	2305200c 	movwcs	r2, #20492	; 0x500c
    1cec:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
				release;
    1cf0:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
				j->Next = i->Next;
    1cf4:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    1cf8:	27052802 	strcs	r2, [r5, -r2, lsl #16]
    1cfc:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
}
    1d00:	3f280602 	svccc	0x00280602
    1d04:	4a0a0331 	bmi	2829d0 <__ccfg+0x262a28>
    1d08:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
	if (size < 8)
    1d0c:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
		_size = 2;
    1d10:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d14:	017eae03 	cmneq	lr, r3, lsl #28
		_size = (((aword)size) + 3) >> 2;
    1d18:	0d050104 	stfeqs	f0, [r5, #-16]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d1c:	01d40306 	bicseq	r0, r4, r6, lsl #6
		_size = (((aword)size) + 3) >> 2;
    1d20:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
		if (mevent [MA_NP] . nfail != 255)
    1d24:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
    1d28:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
			mevent [MA_NP] . nfail ++;
    1d2c:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
		mnfree [MA_NP] = 0;
    1d30:	0d052001 	stceq	0, cr2, [r5, #-4]
    1d34:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d38:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
    1d3c:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
			syserror (EMALLOC, "malc");
    1d40:	0605152e 	streq	r1, [r5], -lr, lsr #10
    1d44:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if (m_size (chunk) >= _size)
    1d48:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1d4c:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
		chunk = m_nextp (chunk)) {
    1d50:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
		m_setnextp (cc, m_nextp (chunk));
    1d54:	030c0401 	movweq	r0, #50177	; 0xc401
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1d58:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
    1d5c:	0b040106 	bleq	10217c <__ccfg+0xe21d4>
			m_size (chunk) = _size;
    1d60:	03060505 	movweq	r0, #25861	; 0x6505
			cc = chunk + _size + m_hdrlen;
    1d64:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
    1d68:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			m_size (cc) = waste - m_hdrlen;
    1d6c:	01044b06 	tsteq	r4, r6, lsl #22
			QFREE;
    1d70:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
		mevent [MA_NP] . nfail = 0;
    1d74:	03054a06 	movweq	r4, #23046	; 0x5a06
		mcfree [MA_NP] -= m_size (chunk);
    1d78:	13040513 	movwne	r0, #17683	; 0x4513
    1d7c:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
    1d80:	cb031902 	blgt	c8190 <__ccfg+0xa81e8>
    1d84:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
		m_size (chunk) |= MALLOC_UMASK;
    1d88:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d8c:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
		m_size (chunk) |= MALLOC_UMASK;
    1d90:	06230517 			; <UNDEFINED> instruction: 0x06230517
			mnfree [MA_NP] = mcfree [MA_NP];
    1d94:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1d98:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
    1d9c:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    1da0:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
    1da4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1da8:	dd030602 	stcle	6, cr0, [r3, #-8]
    1dac:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
    1db0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
aword __pi_fork (fsmcode func, aword data) {
    1db4:	03052d02 	movweq	r2, #23810	; 0x5d02
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1db8:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
    1dbc:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
    1dc0:	03051306 	movweq	r1, #21254	; 0x5306
		if ((j = __PCB) == NULL)
    1dc4:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
	i->Next = NULL;
    1dc8:	1f050101 	svcne	0x00050101
	i->data = data;
    1dcc:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
		if ((j = __PCB) == NULL)
    1dd0:	03000015 	movweq	r0, #21
}
    1dd4:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
			for (; j->Next != NULL; j = j->Next);
    1dd8:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
    1ddc:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
	return (aword) i;
    1de0:	2c056615 	stccs	6, cr6, [r5], {21}
    1de4:	20150520 	andscs	r0, r5, r0, lsr #10
	if (mevent [MA_NP] . nwait != 255)
    1de8:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    1dec:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
    1df0:	03022301 	movweq	r2, #8961	; 0x2301
		mevent [MA_NP] . nwait ++;
    1df4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	wait ((aword)(&(mevent [MA_NP])), state);
    1df8:	0205001c 	andeq	r0, r5, #28
    1dfc:	00000000 	andeq	r0, r0, r0
void diag (const char *mess, ...) {
    1e00:	010adb03 	tsteq	sl, r3, lsl #22
    1e04:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1e08:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
	diag_disable_int (a, is);
    1e0c:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
    1e10:	07052506 	streq	r2, [r5, -r6, lsl #10]
    1e14:	58060520 	stmdapl	r6, {r5, r8, sl}
				d = (bc == 16) ? 10000 : 1000000000;
    1e18:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
	diag_disable_int (a, is);
    1e1c:	01060605 	tsteq	r6, r5, lsl #12
	while (*mess != '\0') {
    1e20:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
	dgout ('\r');
    1e24:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
	dgout ('\n');
    1e28:	06200602 	strteq	r0, [r0], -r2, lsl #12
    1e2c:	0601054d 	streq	r0, [r1], -sp, asr #10
    1e30:	00040213 	andeq	r0, r4, r3, lsl r2
	diag_wait (a);
    1e34:	31050101 	tstcc	r5, r1, lsl #2
	diag_enable_int (a, is);
    1e38:	40020500 	andmi	r0, r2, r0, lsl #10
    1e3c:	03000015 	movweq	r0, #21
}
    1e40:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
    1e44:	03041402 	movweq	r1, #17410	; 0x4402
    1e48:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
		if (*mess == '%') {
    1e4c:	01040177 	tsteq	r4, r7, ror r1
    1e50:	03063105 	movweq	r3, #24837	; 0x6105
			if (*mess == 'l') {
    1e54:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
    1e58:	03030503 	movweq	r0, #13571	; 0x3503
				mess++;
    1e5c:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
				val = va_arg (ap, lword);
    1e60:	03310501 	teqeq	r1, #4194304	; 0x400000
				bc = 32;
    1e64:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
				bc = 16;
    1e68:	03030503 	movweq	r0, #13571	; 0x3503
			switch (*mess) {
    1e6c:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
    1e70:	06020501 	streq	r0, [r2], -r1, lsl #10
    1e74:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
				dgout ('%');
    1e78:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1e7c:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
				dgout (*mess);
    1e80:	01046676 	tsteq	r4, r6, ror r6
    1e84:	03060205 	movweq	r0, #25093	; 0x6205
			switch (*mess) {
    1e88:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
					v = __pi_hex_enc_table [
    1e8c:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
					i += 4;
    1e90:	19010101 	stmdbne	r1, {r0, r8}
					(val >> (bc - i)) & 0xf];
    1e94:	01044a5b 	tsteq	r4, fp, asr sl
    1e98:	03061a05 	movweq	r1, #27141	; 0x6a05
					dgout (v);
    1e9c:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
    1ea0:	0602050d 	streq	r0, [r2], -sp, lsl #10
				while (i < bc) {
    1ea4:	2076f903 	rsbscs	pc, r6, r3, lsl #18
			mess++;
    1ea8:	01010101 	tsteq	r1, r1, lsl #2
					d /= 10;
    1eac:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
				if ((val >> (bc - 1)) & 1) {
    1eb0:	01360303 	teqeq	r6, r3, lsl #6
    1eb4:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
					dgout ('-');
    1eb8:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
    1ebc:	eb030104 	bl	c22d4 <__ccfg+0xa232c>
						val |= 0xffff0000;
    1ec0:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
    1ec4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1ec8:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
				d = (bc == 16) ? 10000 : 1000000000;
    1ecc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1ed0:	20150520 	andscs	r0, r5, r0, lsr #10
    1ed4:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
					v = (word) (val / d);
    1ed8:	216a0604 	cmncs	sl, r4, lsl #12
					if (v || d == 1) break;
    1edc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1ee0:	01778e03 	cmneq	r7, r3, lsl #28
					d /= 10;
    1ee4:	03050304 	movweq	r0, #21252	; 0x5304
				d = (bc == 16) ? 10000 : 1000000000;
    1ee8:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
					dgout (v + '0');
    1eec:	0302050d 	movweq	r0, #9485	; 0x250d
    1ef0:	20202055 	eorcs	r2, r0, r5, asr r0
    1ef4:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
					d /= 10;
    1ef8:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
					val = val - (v * d);
    1efc:	a6030305 	strge	r0, [r3], -r5, lsl #6
					if (d == 0) break;
    1f00:	10054a75 	andne	r4, r5, r5, ror sl
					v = (word) (val / d);
    1f04:	06050106 	streq	r0, [r5], -r6, lsl #2
    1f08:	20230520 	eorcs	r0, r3, r0, lsr #10
				if (bc == 16)
    1f0c:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
				d = (bc == 16) ? 10000 : 1000000000;
    1f10:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
					val &= 0xffff;
    1f14:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
					dgout (*s);
    1f18:	052f0604 	streq	r0, [pc, #-1540]!	; 191c <utimer_add+0x10>
					s++;
    1f1c:	01041c02 	tsteq	r4, r2, lsl #24
				while (*s != '\0') {
    1f20:	8f030405 	svchi	0x00030405
    1f24:	2a052e09 	bcs	14d750 <__ccfg+0x12d7a8>
			dgout (*mess++);
    1f28:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1f2c:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
    1f30:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1f34:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
    1f38:	017fb203 	cmneq	pc, r3, lsl #4
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1f3c:	01062905 	tsteq	r6, r5, lsl #18
    1f40:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1f44:	00d10306 	sbcseq	r0, r1, r6, lsl #6
    1f48:	02044d66 	andeq	r4, r4, #6528	; 0x1980
	^ entropy
    1f4c:	9f030505 	svcls	0x00030505
}
    1f50:	01040178 	tsteq	r4, r8, ror r1
    1f54:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    1f58:	1a052007 	bne	149f7c <__ccfg+0x129fd4>
    1f5c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1f60:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
	word cs = size + hblenb;
    1f64:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1f68:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    1f6c:	03050502 	movweq	r0, #21762	; 0x5502
	p -> length = size;
    1f70:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
}
    1f74:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
	if (p->attributes.b.queued) {
    1f78:	06040501 	streq	r0, [r4], -r1, lsl #10
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1f7c:	2007f103 	andcs	pc, r7, r3, lsl #2
    1f80:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1f84:	0178a003 	cmneq	r8, r3
		p->attributes.b.queued = 0;
    1f88:	31050904 	tstcc	r5, r4, lsl #18
    1f8c:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1f90:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
	deq (p);	// Remove from queue
    1f94:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
}
    1f98:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
	tfree ((address)p);
    1f9c:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa0:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1fa4:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
    1fa8:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fac:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
    1fb0:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
	if (q_empty (q))
    1fb4:	a0033105 	andge	r3, r3, r5, lsl #2
    1fb8:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
		trigger (q);
    1fbc:	06520515 			; <UNDEFINED> instruction: 0x06520515
	if (p->attributes.b.urgent) {
    1fc0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		p->u.bqueue.next = q->next;
    1fc4:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
		p->u.bqueue.prev = q;
    1fc8:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
		q->next->prev = (qitem_t*) p;
    1fcc:	7a9b0352 	bvc	fe6c2d1c <_estack+0xde6bdd1c>
	p->attributes.b.queued = 1;
    1fd0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1fd4:	e0030604 	and	r0, r3, r4, lsl #12
}
    1fd8:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
		p->u.bqueue.prev = q->prev;
    1fdc:	86030505 	strhi	r0, [r3], -r5, lsl #10
		q->prev->next = (qitem_t*) p;
    1fe0:	01040178 	tsteq	r4, r8, ror r1
		q->prev = (qitem_t*) p;
    1fe4:	fc030405 	stc2	4, cr0, [r3], {5}
    1fe8:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1fec:	ea030505 	b	c3408 <__ccfg+0xa3460>
	deq (p);	// Soft dequeue, timer and hook left intact
    1ff0:	3105017a 	tstcc	r5, sl, ror r1
	switch (dv) {
    1ff4:	29050106 	stmdbcs	r5, {r1, r2, r8}
    1ff8:	2004b603 	andcs	fp, r4, r3, lsl #12
    1ffc:	ca033105 	bgt	ce418 <__ccfg+0xae470>
    2000:	01042e7b 	tsteq	r4, fp, ror lr
			p->attributes.b.urgent = 1;
    2004:	03060405 	movweq	r0, #25605	; 0x6405
    2008:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
			verify_ses (p, "dispose ses");
    200c:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    2010:	6a062004 	bvs	18a028 <__ccfg+0x16a080>
    2014:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    2018:	01799f03 	cmneq	r9, r3, lsl #30
    201c:	01063f05 	tsteq	r6, r5, lsl #30
			verify_phy (p, "dispose phy");
    2020:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2024:	2006ed03 	andcs	lr, r6, r3, lsl #26
}
    2028:	3f050904 	svccc	0x00050904
			enq (oqueues [p->attributes.b.phys], p);
    202c:	20799303 	rsbscs	r9, r9, r3, lsl #6
			p->attributes.b.urgent = 1;
    2030:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2034:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
			verify_phy (p, "dispose phy");
    2038:	0309042e 	movweq	r0, #37934	; 0x942e
    203c:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    2040:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    2044:	03040501 	movweq	r0, #17665	; 0x4501
    2048:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
    204c:	03290509 			; <UNDEFINED> instruction: 0x03290509
			enq (oqueues [p->attributes.b.phys], p);
    2050:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
    2054:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    2058:	4a00f303 	bmi	3ec6c <__ccfg+0x1ecc4>
			rlp (p);
    205c:	0204404d 	andeq	r4, r4, #77	; 0x4d
}
    2060:	ea030505 	b	c347c <__ccfg+0xa34d4>
    2064:	01040177 	tsteq	r4, r7, ror r1
    2068:	99030405 	stmdbls	r3, {r0, r2, sl}
    206c:	1a052008 	bne	14a094 <__ccfg+0x12a0ec>
    2070:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2074:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    2078:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	if (b->attributes.b.outgoing) {
    207c:	1a052304 	bne	14ac94 <__ccfg+0x12acec>
	b = header (p);
    2080:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
	if (b->attributes.b.outgoing) {
    2084:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
		verify_ses (b, "tcv02");
    2088:	017eee03 	cmneq	lr, r3, lsl #28
    208c:	01062905 	tsteq	r6, r5, lsl #18
    2090:	0d050e04 	stceq	14, cr0, [r5, #-16]
    2094:	2e7bdb03 	vaddcs.f64	d29, d11, d3
    2098:	29050904 	stmdbcs	r5, {r2, r8, fp}
		verify_plg (b, tcv_out, "tcv03");
    209c:	2004a503 	andcs	sl, r4, r3, lsl #10
    20a0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    20a4:	01970306 	orrseq	r0, r7, r6, lsl #6
    20a8:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
    20ac:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    20b0:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    20b4:	01065205 	tsteq	r6, r5, lsl #4
    20b8:	1a050104 	bne	1424d0 <__ccfg+0x122528>
    20bc:	068c0306 	streq	r0, [ip], r6, lsl #6
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c0:	110a052e 	tstne	sl, lr, lsr #10
}
    20c4:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c8:	017ac303 	cmneq	sl, r3, lsl #6
		rlp (b);
    20cc:	01060d05 	tsteq	r6, r5, lsl #26
}
    20d0:	0a050104 	beq	1424e8 <__ccfg+0x122540>
		rlp (b);
    20d4:	2005bd03 	andcs	fp, r5, r3, lsl #26
    20d8:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    20dc:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    20e0:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    20e4:	110a0521 	tstne	sl, r1, lsr #10
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20e8:	01060b05 	tsteq	r6, r5, lsl #22
    20ec:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
    20f0:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20f4:	03050509 	movweq	r0, #21769	; 0x5509
	va_start (ap, plid);
    20f8:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20fc:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    2100:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2104:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    2108:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
    210c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2110:	2005cb03 	andcs	ip, r5, r3, lsl #22
			syserror (ENODEVICE, "tcv04");
    2114:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
		syserror (EMALLOC, "tcv05");
    2118:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
	attp.b.outgoing = 1;
    211c:	01063f05 	tsteq	r6, r5, lsl #30
    2120:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2124:	07920306 	ldreq	r0, [r2, r6, lsl #6]
    2128:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    212c:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
		if (descriptors [fd] == NULL)
    2130:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    2134:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2138:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
		return ERROR;
    213c:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
}
    2140:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    2144:	01040177 	tsteq	r4, r7, ror r1
    2148:	ba030405 	blt	c3164 <__ccfg+0xa31bc>
	s->attpattern.b.session = fd;
    214c:	09032008 	stmdbeq	r3, {r3, sp}
    2150:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
	descriptors [fd] = s;
    2154:	017db003 	cmneq	sp, r3
	q_init (&(s->rqueue));
    2158:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    215c:	017ed403 	cmneq	lr, r3, lsl #8
    2160:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2164:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    2168:	03010501 	movweq	r0, #5377	; 0x1501
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    216c:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
    2170:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
    2174:	055b2002 	ldrbeq	r2, [fp, #-2]
	descriptors [fd] = s;
    2178:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    217c:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
    2180:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
	if (s == NULL)
    2184:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
		syserror (EMALLOC, "tcv05");
    2188:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    218c:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
    2190:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    2194:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2198:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    219c:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
    21a0:	03050502 	movweq	r0, #21762	; 0x5502
    21a4:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21a8:	03040501 	movweq	r0, #17665	; 0x4501
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21ac:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
    21b0:	0305050e 	movweq	r0, #21774	; 0x550e
    21b4:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
	plugins [ord] = pl;
    21b8:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
	return 0;
    21bc:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
		return ERROR;
    21c0:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
}
    21c4:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
    21c8:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
	verify_fds (fd, "tcv10");
    21cc:	06040501 	streq	r0, [r4], -r1, lsl #10
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    21d0:	3c05f703 	stccc	7, cr15, [r5], {3}
	verify_fds (fd, "tcv10");
    21d4:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    21d8:	01778503 	cmneq	r7, r3, lsl #10
    21dc:	0d050e04 	stceq	14, cr0, [r5, #-16]
	verify_plg (b, tcv_frm, "tcv11");
    21e0:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
	b = q_first (rq);
    21e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	if (q_end (b, rq)) {
    21e8:	96030639 			; <UNDEFINED> instruction: 0x96030639
		if (state != WNONE) {
    21ec:	0a052006 	beq	14a20c <__ccfg+0x12a264>
    21f0:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
			when (rq, state);
    21f4:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
			release;
    21f8:	060d0501 	streq	r0, [sp], -r1, lsl #10
	deq (b);	// Dequeue the packet ...
    21fc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    2200:	0696030a 	ldreq	r0, [r6], sl, lsl #6
	p = ((address)(b + 1));
    2204:	06040520 	streq	r0, [r4], -r0, lsr #10
	verify_plg (b, tcv_frm, "tcv11");
    2208:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    220c:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
    2210:	06410501 	strbeq	r0, [r1], -r1, lsl #10
    2214:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    2218:	08970304 	ldmeq	r7, {r2, r8, r9}
    221c:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2220:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    2224:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2228:	97030604 	strls	r0, [r3, -r4, lsl #12]
    222c:	04522008 	ldrbeq	r2, [r2], #-8
	b->u.pointers.tail =
    2230:	0302050d 	movweq	r0, #9485	; 0x250d
}
    2234:	4a2075d1 	bmi	81f980 <__ccfg+0x7ff9d8>
		return NULL;
    2238:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
    223c:	03030503 	movweq	r0, #13571	; 0x3503
    2240:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
    2244:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    2248:	37021620 	strcc	r1, [r2, -r0, lsr #12]
	verify_fds (fd, "tcv16");
    224c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
								Boolean urg) {
    2250:	02050012 	andeq	r0, r5, #18
    2254:	00001798 	muleq	r0, r8, r7
	verify_fds (fd, "tcv16");
    2258:	0100e103 	tsteq	r0, r3, lsl #2
    225c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2260:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
	verify_pld (s, tcv_frm, "tcv17");
    2264:	1f212202 	svcne	0x00212202
    2268:	4b2f2106 	blmi	bca688 <__ccfg+0xbaa6e0>
    226c:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    2270:	06020501 	streq	r0, [r2], -r1, lsl #10
    2274:	0008022f 	andeq	r0, r8, pc, lsr #4
    2278:	3a050101 	bcc	142684 <__ccfg+0x1226dc>
    227c:	00020500 	andeq	r0, r2, r0, lsl #10
    2280:	03000000 	movweq	r0, #0
	ptrs.head = (word) fd;
    2284:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
	ptrs.tail = (word) urg;
    2288:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    228c:	200e063a 	andcs	r0, lr, sl, lsr r6
    2290:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
		if (state != WNONE) {
    2294:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
    2298:	06030524 	streq	r0, [r3], -r4, lsr #10
}
    229c:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
			when (eid, state);
    22a0:	06040501 	streq	r0, [r4], -r1, lsl #10
    22a4:	06120530 			; <UNDEFINED> instruction: 0x06120530
			release;
    22a8:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    22ac:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    22b0:	01060905 	tsteq	r6, r5, lsl #18
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    22b4:	2f050f04 	svccs	0x00050f04
    22b8:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    22bc:	03090501 	movweq	r0, #38145	; 0x9501
    22c0:	0305206b 	movweq	r2, #20587	; 0x506b
    22c4:	0f042106 	svceq	0x00042106
    22c8:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
		if (state != WNONE) {
    22cc:	062f0501 	strteq	r0, [pc], -r1, lsl #10
    22d0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			tmwait (state);
    22d4:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    22d8:	03060405 	movweq	r0, #25605	; 0x6405
	b->attributes = s->attpattern;
    22dc:	0f04206f 	svceq	0x0004206f
		b->attributes.b.urgent = 1;
    22e0:	c3030505 	movwgt	r0, #13573	; 0x3505
    22e4:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
	b->u.pointers.head = ptrs.head;
    22e8:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
	b->u.pointers.tail = length;
    22ec:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
	return (address) (b + 1);
    22f0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    22f4:	017fb603 	cmneq	pc, r3, lsl #12
    22f8:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    22fc:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    2300:	062f050e 	strteq	r0, [pc], -lr, lsl #10
    2304:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2308:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    230c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2310:	06053f04 	streq	r3, [r5], -r4, lsl #30
	verify_fph (phy, "tcv23");
    2314:	0604052b 	streq	r0, [r4], -fp, lsr #10
    2318:	03052f23 	movweq	r2, #24355	; 0x5f23
    231c:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    2320:	03051f09 	movweq	r1, #24329	; 0x5f09
}
    2324:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
	return (physical [phy]) (opt, arg);
    2328:	01010009 	tsteq	r1, r9
    232c:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    2330:	0017c802 	andseq	ip, r7, r2, lsl #16
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2334:	0af10300 	beq	ffc42f3c <_estack+0xdfc3df3c>
	if (opt < 0) {
    2338:	16030501 	strne	r0, [r3], -r1, lsl #10
		if (fd < 0)
    233c:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
		if (opt == PHYSOPT_PLUGINFO) {
    2340:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
			if (fd >= TCV_MAX_PLUGS)
    2344:	26250520 	strtcs	r0, [r5], -r0, lsr #10
			if ((p = plugins [fd]) == NULL)
    2348:	051f0305 	ldreq	r0, [pc, #-773]	; 204b <dispose+0x5f>
    234c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
}
    2350:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
		if (fd >= TCV_MAX_PHYS)
    2354:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
		return physinfo [fd];
    2358:	0305010f 	movweq	r0, #20751	; 0x510f
    235c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	verify_fds (fd, "tcv22");
    2360:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
    2364:	06207903 	strteq	r7, [r0], -r3, lsl #18
    2368:	5b5b3231 	blpl	16cec34 <__ccfg+0x16aec8c>
    236c:	01061c05 	tsteq	r6, r5, lsl #24
    2370:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
}
    2374:	0c052302 	stceq	3, cr2, [r5], {2}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2378:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    237c:	03043e23 	movweq	r3, #20003	; 0x4e23
			return 0;
    2380:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
    2384:	01040175 	tsteq	r4, r5, ror r1
    2388:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
    238c:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
    2390:	e4010100 	str	r0, [r1], #-256	; 0xffffff00
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2394:	0300000e 	movweq	r0, #14
    2398:	00019400 	andeq	r9, r1, r0, lsl #8
	if (dsp != TCV_DSP_PASS) {
    239c:	fb010200 	blx	42ba6 <__ccfg+0x22bfe>
		if (ses == NONE)
    23a0:	01000d0e 	tsteq	r0, lr, lsl #26
			syserror (EREQPAR, "tcv26");
    23a4:	00010101 	andeq	r0, r1, r1, lsl #2
		verify_fds (ses, "tcv27");
    23a8:	00010000 	andeq	r0, r1, r0
    23ac:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    23b0:	2f656d6f 	svccs	0x00656d6f
    23b4:	70657473 	rsbvc	r7, r5, r3, ror r4
    23b8:	2f6e6568 	svccs	0x006e6568
		if ((p = apb (size)) != NULL) {
    23bc:	6b736544 	blvs	1cdb8d4 <__ccfg+0x1cbb92c>
    23c0:	2f706f74 	svccs	0x00706f74
		return NULL;
    23c4:	4f534c4f 	svcmi	0x00534c4f
			p->attributes = descriptors [ses] -> attpattern;
    23c8:	2f54454e 	svccs	0x0054454e
			dispose (p, dsp);
    23cc:	4f434950 	svcmi	0x00434950
			p->attributes = descriptors [ses] -> attpattern;
    23d0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			p->attributes.b.outgoing = 0;
    23d4:	2f534f63 	svccs	0x00534f63
			dispose (p, dsp);
    23d8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
			return (address)(p + 1);
    23dc:	2f006c65 	svccs	0x00006c65
    23e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if ((p = apb (size)) != NULL)
    23e4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    23e8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
		return (address)(p + 1);
    23ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    23f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    23f4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    23f8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    23fc:	4349502f 	movtmi	r5, #36911	; 0x902f
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2400:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2404:	534f6369 	movtpl	r6, #62313	; 0xf369
    2408:	3143432f 	cmpcc	r3, pc, lsr #6
		syserror (EREQPAR, "tcv28");
    240c:	2f585833 	svccs	0x00585833
		syserror (EMALLOC, "tcv29");
    2410:	33314343 	teqcc	r1, #201326593	; 0xc000001
	physical [phy] = ps;
    2414:	41575858 	cmpmi	r7, r8, asr r8
	physinfo [phy] = info;
    2418:	642f4552 	strtvs	r4, [pc], #-1362	; 2420 <tcvphy_reg+0x24>
    241c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2420:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2424:	73752f00 	cmnvc	r5, #0, 30
    2428:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
		syserror (EMALLOC, "tcv29");
    242c:	63672f62 	cmnvs	r7, #392	; 0x188
    2430:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
	q_init (q);
    2434:	6f6e2d6d 	svcvs	0x006e2d6d
}
    2438:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    243c:	2f696261 	svccs	0x00696261
    2440:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    2444:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    2448:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    244c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	verify_fph (phy, "tcv30");
    2450:	2f656d6f 	svccs	0x00656d6f
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2454:	70657473 	rsbvc	r7, r5, r3, ror r4
    2458:	2f6e6568 	svccs	0x006e6568
	verify_fph (phy, "tcv30");
    245c:	6b736544 	blvs	1cdb974 <__ccfg+0x1cbb9cc>
    2460:	2f706f74 	svccs	0x00706f74
    2464:	4f534c4f 	svcmi	0x00534c4f
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2468:	2f54454e 	svccs	0x0054454e
    246c:	4f434950 	svcmi	0x00434950
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2470:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2474:	2f534f63 	svccs	0x00534f63
		if (plugins [plg] == NULL)
    2478:	33314343 	teqcc	r1, #201326593	; 0xc000001
    247c:	2f005858 	svccs	0x00005858
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2480:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    2484:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    2488:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    248c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2490:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2494:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2498:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    249c:	4349502f 	movtmi	r5, #36911	; 0x902f
    24a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    24a4:	534f6369 	movtpl	r6, #62313	; 0xf369
    24a8:	656b0000 	strbvs	r0, [fp, #-0]!
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    24ac:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	len -= (ap.head + ap.tail);
    24b0:	0100632e 	tsteq	r0, lr, lsr #6
    24b4:	61750000 	cmnvs	r5, r0
    24b8:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    24bc:	00000200 	andeq	r0, r0, r0, lsl #4
    24c0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    24c4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    24c8:	00000300 	andeq	r0, r0, r0, lsl #6
    24cc:	61647473 	smcvs	18243	; 0x4743
    24d0:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
	return 1;
    24d4:	00000300 	andeq	r0, r0, r0, lsl #6
    24d8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    24dc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    24e0:	616d0000 	cmnvs	sp, r0
    24e4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
	verify_fph (phy, "tcv32");
    24e8:	00000400 	andeq	r0, r0, r0, lsl #8
    24ec:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    24f0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    24f4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    24f8:	75620000 	strbvc	r0, [r2, #-0]!
    24fc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	oq = oqueues [phy];
    2500:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	b = q_first (oq);
    2504:	00682e73 	rsbeq	r2, r8, r3, ror lr
	if (q_end (b, oq)) {
    2508:	73000004 	movwvc	r0, #4
	*len = b->length;
    250c:	6f697379 	svcvs	0x00697379
	deq (b);	// Dequeue the packet ...
    2510:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
}
    2514:	656b0000 	strbvs	r0, [fp, #-0]!
		return NULL;
    2518:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    251c:	0100682e 	tsteq	r0, lr, lsr #16
    2520:	623c0000 	eorsvs	r0, ip, #0
    2524:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
	verify_fph (phy, "tcv33");
    2528:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    252c:	00000000 	andeq	r0, r0, r0
    2530:	00260500 	eoreq	r0, r6, r0, lsl #10
    2534:	18280205 	stmdane	r8!, {r0, r2, r9}
    2538:	c3030000 	movwgt	r0, #12288	; 0x3000
    253c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
	oq = oqueues [phy];
    2540:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
	b = q_first (oq);
    2544:	03062605 	movweq	r2, #26117	; 0x6605
		return NULL;
    2548:	02050178 	andeq	r0, r5, #120, 2
	return (address)(b + 1);
    254c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
}
    2550:	02051f07 	andeq	r1, r5, #7, 30
    2554:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
    2558:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    255c:	13053c0a 	movwne	r3, #23562	; 0x5c0a
	verify_plg (b, tcv_xmt, "tcv34");
    2560:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
	hblock_t *b = header (pkt);
    2564:	2c060f05 	stccs	15, cr0, [r6], {5}
	verify_plg (b, tcv_xmt, "tcv34");
    2568:	01060305 	tsteq	r6, r5, lsl #6
    256c:	2f060405 	svccs	0x00060405
    2570:	01061605 	tsteq	r6, r5, lsl #12
    2574:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    2578:	4b310605 	blmi	c43d94 <__ccfg+0xc23dec>
    257c:	7a030205 	bvc	c2d98 <__ccfg+0xa2df0>
    2580:	06010501 	streq	r0, [r1], -r1, lsl #10
	dispose (b, plugins [b->attributes.b.plugin] ->
    2584:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
}
    2588:	01010003 	tsteq	r1, r3
	dispose (b, plugins [b->attributes.b.plugin] ->
    258c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    2590:	00186402 	andseq	r6, r8, r2, lsl #8
    2594:	06c90300 	strbeq	r0, [r9], r0, lsl #6
}
    2598:	03020501 	movweq	r0, #9473	; 0x2501
    while(1)
    259c:	1314010d 	tstne	r4, #1073741827	; 0x40000003
{
    25a0:	01060d05 	tsteq	r6, r5, lsl #26
    SetupTrimDevice();
    25a4:	70031f05 	andvc	r1, r3, r5, lsl #30
    pui32Src = &_etext;
    25a8:	030d0520 	movweq	r0, #54560	; 0xd520
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    25ac:	1f052e10 	svcne	0x00052e10
    __asm("    ldr     r0, =_bss\n"
    25b0:	02052006 	andeq	r2, r5, #6
    25b4:	03060106 	movweq	r0, #24838	; 0x6106
    25b8:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
    25bc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    25c0:	1f051f05 	svcne	0x00051f05
   main();
    25c4:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    FaultISR();
    25c8:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
        *pui32Dest++ = *pui32Src++;
    25cc:	060f0521 	streq	r0, [pc], -r1, lsr #10
    25d0:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
    25d4:	0f052306 	svceq	0x00052306
    25d8:	01050106 	tsteq	r5, r6, lsl #2
    25dc:	06030524 	streq	r0, [r3], -r4, lsr #10
    25e0:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    25e4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    25e8:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
static byte get_byte () {
    25ec:	05213006 	streq	r3, [r1, #-6]!
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25f0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    25f4:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25f8:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    25fc:	0a050106 	beq	142a1c <__ccfg+0x122a74>
		if (ee_inp)
    2600:	1f053406 	svcne	0x00053406
			b |= 1;
    2604:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    2608:	06040558 			; <UNDEFINED> instruction: 0x06040558
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    260c:	10052f22 	andne	r2, r5, r2, lsr #30
	for (b = 0, i = 0; i < 8; i++) {
    2610:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
}
    2614:	ac0b0306 	stcge	3, cr0, [fp], {6}
    2618:	01060705 	tsteq	r6, r5, lsl #14
    261c:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
static void put_byte (byte b) {
    2620:	13060905 	movwne	r0, #26885	; 0x6905
    2624:	01000702 	tsteq	r0, r2, lsl #14
    2628:	001c0501 	andseq	r0, ip, r1, lsl #10
    262c:	18e40205 	stmiane	r4!, {r0, r2, r9}^
		if (b & 0x80)
    2630:	c6030000 	strgt	r0, [r3], -r0
    2634:	02050108 	andeq	r0, r5, #8, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2638:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
	for (i = 0; i < 8; i++) {
    263c:	df03060d 	svcle	0x0003060d
		b <<= 1;
    2640:	0104017c 	tsteq	r4, ip, ror r1
	for (i = 0; i < 8; i++) {
    2644:	03060f05 	movweq	r0, #28421	; 0x6f05
}
    2648:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    264c:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2650:	da032405 	ble	cb66c <__ccfg+0xab6c4>
    2654:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
	put_byte (cmd);
    2658:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    265c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    2660:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    2664:	052f0620 	streq	r0, [pc, #-1568]!	; 204c <dispose+0x60>
static void wwait (word st, word del) {
    2668:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    266c:	01010005 	tsteq	r1, r5
    2670:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
	while (dopen && (rdsr () & 1)) {
    2674:	00000002 	andeq	r0, r0, r2
    2678:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    267c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2680:	06270514 			; <UNDEFINED> instruction: 0x06270514
	put_byte (CMD_RDSR);
    2684:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
	r = get_byte ();
    2688:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
    268c:	20062402 	andcs	r2, r6, r2, lsl #8
	while (dopen && (rdsr () & 1)) {
    2690:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
}
    2694:	01060605 	tsteq	r6, r5, lsl #12
		if (st == WNONE)
    2698:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    269c:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
			mdelay (1);
    26a0:	01000502 	tsteq	r0, r2, lsl #10
    26a4:	001b0501 	andseq	r0, fp, r1, lsl #10
			delay (del, st);
    26a8:	18fc0205 	ldmne	ip!, {r0, r2, r9}^
    26ac:	fa030000 	blx	c26b4 <__ccfg+0xa270c>
			release;
    26b0:	02050100 	andeq	r0, r5, #0, 2
    26b4:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    26b8:	2102051f 	tstcs	r2, pc, lsl r5
static void ready () {
    26bc:	01000602 	tsteq	r0, r2, lsl #12
	if (dopen) {
    26c0:	001e0501 	andseq	r0, lr, r1, lsl #10
		wwait (WNONE, 1);
    26c4:	190c0205 	stmdbne	ip, {r0, r2, r9}
    26c8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    26cc:	02050100 	andeq	r0, r5, #0, 2
	dstat = 0;
    26d0:	0e051416 	cfmvdlreq	mvd5, r1
}
    26d4:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    26d8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    26dc:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
	udelay (1);
    26e0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    26e4:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
	udelay (1);
    26e8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		dopen = DOPEN_TEMP;
    26ec:	1f052e06 	svcne	0x00052e06
    26f0:	20051f06 	andcs	r1, r5, r6, lsl #30
    26f4:	0e050106 	adfeqs	f0, f5, f6
    26f8:	02052006 	andeq	r2, r5, #6
static void cclose () {
    26fc:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
	if (dopen == DOPEN_TEMP) {
    2700:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    2704:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
		wwait (WNONE, 1);
    2708:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    270c:	06022f01 	streq	r2, [r2], -r1, lsl #30
	cmd_0 (CMD_DP);
    2710:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2714:	02050021 	andeq	r0, r5, #33	; 0x21
		dopen = 0;
    2718:	00000000 	andeq	r0, r0, r0
}
    271c:	01018e03 	tsteq	r1, r3, lsl #28
word ee_open () {
    2720:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
	ready ();
    2724:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
	dopen = DOPEN_PERM;
    2728:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    272c:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
}
    2730:	27060305 	strcs	r0, [r6, -r5, lsl #6]
	if (dopen) {
    2734:	01061205 	tsteq	r6, r5, lsl #4
    2738:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		dopen = DOPEN_TEMP;
    273c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		cclose ();
    2740:	06054b03 	streq	r4, [r5], -r3, lsl #22
}
    2744:	1f050106 	svcne	0x00050106
int ser_out (word st, const char *m) {
    2748:	20052b06 	andcs	r2, r5, r6, lsl #22
	if ((prcs = running (__outserial)) != 0) {
    274c:	0e050106 	adfeqs	f0, f5, f6
    2750:	02052006 	andeq	r2, r5, #6
    2754:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
		join (prcs, st);
    2758:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
		release;
    275c:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
	if (*m)
    2760:	2f030501 	svccs	0x00030501
		prcs = strlen (m) +1;
    2764:	01061f05 	tsteq	r6, r5, lsl #30
    2768:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    276c:	03052012 	movweq	r2, #20498	; 0x5012
    2770:	06052f06 	streq	r2, [r5], -r6, lsl #30
    2774:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		umwait (st);
    2778:	0b053206 	bleq	14ef98 <__ccfg+0x12eff0>
    277c:	0601052e 	streq	r0, [r1], -lr, lsr #10
		prcs =  m [1] + 3;
    2780:	00070213 	andeq	r0, r7, r3, lsl r2
	if (*m)
    2784:	2a050101 	bcs	142b90 <__ccfg+0x122be8>
		strcpy (buf, m);
    2788:	38020500 	stmdacc	r2, {r8, sl}
    278c:	03000019 	movweq	r0, #25
	if (runstrand (__outserial, buf) == 0) {
    2790:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
    2794:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
		ufree (buf);
    2798:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    279c:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
		memcpy (buf, m, prcs);
    27a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    27a4:	0205002e 	andeq	r0, r5, #46	; 0x2e
    27a8:	00001940 	andeq	r1, r0, r0, asr #18
}
    27ac:	0101ae03 	tsteq	r1, r3, lsl #28
    27b0:	02052006 	andeq	r2, r5, #6
int ser_in (word st, char *buf, int len) {
    27b4:	200e0306 	andcs	r0, lr, r6, lsl #6
    27b8:	01100313 	tsteq	r0, r3, lsl r3
	if (len == 0)
    27bc:	01060605 	tsteq	r6, r5, lsl #12
	if (__inpline == NULL) {
    27c0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
		if ((prcs = running (__inserial)) == 0) {
    27c4:	09030602 	stmdbeq	r3, {r1, r9, sl}
    27c8:	0606052e 	streq	r0, [r6], -lr, lsr #10
			prcs = runthread (__inserial);
    27cc:	58050501 	stmdapl	r5, {r0, r8, sl}
    27d0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
			if (prcs == 0) {
    27d4:	27080603 	strcs	r0, [r8, -r3, lsl #12]
				npwait (st);
    27d8:	0302052e 	movweq	r0, #9518	; 0x252e
		release;
    27dc:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
		join (prcs, st);
    27e0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    27e4:	0604052e 	streq	r0, [r4], -lr, lsr #10
	if (*__inpline == NULL) // bin cmd
    27e8:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    27ec:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	if (prcs >= len)
    27f0:	04052007 	streq	r2, [r5], #-7
		prcs = len-1;
    27f4:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
	memcpy (buf, __inpline, prcs);
    27f8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    27fc:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    2800:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
	ufree (__inpline);
    2804:	0303053e 	movweq	r0, #13630	; 0x353e
	__inpline = NULL;
    2808:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
	if (*buf) // if it's NULL, it's a bin cmd
    280c:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
		buf [prcs] = '\0';
    2810:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
}
    2814:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
		prcs = strlen (__inpline);
    2818:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    281c:	17030603 	strne	r0, [r3, -r3, lsl #12]
		return 0;
    2820:	06070566 	streq	r0, [r7], -r6, ror #10
    2824:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2828:	03060205 	movweq	r0, #25093	; 0x6205
int ser_outf (word st, const char *m, ...) {
    282c:	0b053c16 	bleq	15188c <__ccfg+0x1318e4>
    2830:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if ((prcs = running (__outserial)) != 0) {
    2834:	01054006 	tsteq	r5, r6
    2838:	010d0306 	tsteq	sp, r6, lsl #6
		join (prcs, st);
    283c:	73030205 	movwvc	r0, #12805	; 0x3205
    2840:	0301052e 	movweq	r0, #5422	; 0x152e
		release;
    2844:	0a022e0d 	beq	8e080 <__ccfg+0x6e0d8>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2848:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    284c:	0205001b 	andeq	r0, r5, #27
    2850:	00001a0c 	andeq	r1, r0, ip, lsl #20
		umwait (st);
    2854:	0102d203 	tsteq	r2, r3, lsl #4
    2858:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	if (runstrand (__outserial, buf) == 0) {
    285c:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    2860:	4b062202 	blmi	18b070 <__ccfg+0x16b0c8>
    2864:	01000502 	tsteq	r0, r2, lsl #10
		ufree (buf);
    2868:	002a0501 	eoreq	r0, sl, r1, lsl #10
		npwait (st);
    286c:	1a200205 	bne	803088 <__ccfg+0x7e30e0>
}
    2870:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2874:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2878:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    287c:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
int ser_inf (word st, const char *fmt, ...) {
    2880:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    2884:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
	if (fmt == NULL)
    2888:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
	if (__inpline == NULL) {
    288c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
		if ((prcs = running (__inserial)) == 0) {
    2890:	06014c02 	streq	r4, [r1], -r2, lsl #24
    2894:	20061f3d 	andcs	r1, r6, sp, lsr pc
			prcs = runthread (__inserial);
    2898:	01051320 	tsteq	r5, r0, lsr #6
    289c:	06022106 	streq	r2, [r2], -r6, lsl #2
			if (prcs == 0) {
    28a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				npwait (st);
    28a4:	02050021 	andeq	r0, r5, #33	; 0x21
		release;
    28a8:	00001a54 	andeq	r1, r0, r4, asr sl
		join (prcs, st);
    28ac:	0102e503 	tsteq	r2, r3, lsl #10
    28b0:	13160205 	tstne	r6, #1342177280	; 0x50000000
	va_start (ap, fmt);
    28b4:	06210514 			; <UNDEFINED> instruction: 0x06210514
	prcs = vscan (__inpline, fmt, ap);
    28b8:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    28bc:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
	ufree (__inpline);
    28c0:	21061305 	tstcs	r6, r5, lsl #6
	__inpline = NULL;
    28c4:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
}
    28c8:	0f052013 	svceq	0x00052013
    28cc:	03054a06 	movweq	r4, #23046	; 0x5a06
    28d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		return 0;
    28d4:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    28d8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    28dc:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    28e0:	01050d02 	tsteq	r5, r2, lsl #26
    28e4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    28e8:	01000302 	tsteq	r0, r2, lsl #6
	RF_cmdFs.frequency = 
    28ec:	002d0501 	eoreq	r0, sp, r1, lsl #10
}
    28f0:	00000205 	andeq	r0, r0, r5, lsl #4
    28f4:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    28f8:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    28fc:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
static int option (int opt, address val) {
    2900:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    2904:	02052001 	andeq	r2, r5, #1
    2908:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    290c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2910:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    2914:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2918:	01053c02 	tsteq	r5, r2, lsl #24
    291c:	06030533 			; <UNDEFINED> instruction: 0x06030533
    2920:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2924:	1f200501 	svcne	0x00200501
    2928:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    292c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2930:	0102641f 	tsteq	r2, pc, lsl r4
			goto RVal;
    2934:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			_BIS (dstate, DSTATE_RXON);
    2938:	02050026 	andeq	r0, r5, #38	; 0x26
    293c:	00001a88 	andeq	r1, r0, r8, lsl #21
	int ret = 0;
    2940:	01038703 	tsteq	r3, r3, lsl #14
			p_trigger (drvprcs, qevent);
    2944:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2948:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    294c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2950:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    2954:	03052806 	movweq	r2, #22534	; 0x5806
    2958:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    295c:	01060605 	tsteq	r6, r5, lsl #12
    2960:	30060405 	andcc	r0, r6, r5, lsl #8
    2964:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    2968:	06020517 			; <UNDEFINED> instruction: 0x06020517
}
    296c:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
			_BIC (dstate, DSTATE_RXON);
    2970:	01010004 	tsteq	r1, r4
    2974:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
			statid = (val == NULL) ? 0 : *val;
    2978:	001aac02 	andseq	sl, sl, r2, lsl #24
    297c:	03990300 	orrseq	r0, r9, #0, 6
	int ret = 0;
    2980:	16020501 	strne	r0, [r2], -r1, lsl #10
			ret = (int) statid;
    2984:	0e062105 	adfeqs	f2, f6, f5
	if (val != NULL)
    2988:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
		*val = ret;
    298c:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
			ret = rbuffl + 2;
    2990:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    2994:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
			if (val != NULL) {
    2998:	20130520 	andscs	r0, r3, r0, lsr #10
				memcpy (val, &rxstat,
    299c:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    29a0:	59060105 	stmdbpl	r6, {r0, r2, r8}
				memset (&rxstat, 0, 
    29a4:	01000502 	tsteq	r0, r2, lsl #10
    29a8:	00140501 	andseq	r0, r4, r1, lsl #10
			if (val == NULL)
    29ac:	00000205 	andeq	r0, r0, r5, lsl #4
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    29b0:	a7030000 	strge	r0, [r3, -r0]
    29b4:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
				utimer_set (bckf_timer, *val);
    29b8:	06010516 			; <UNDEFINED> instruction: 0x06010516
    29bc:	00040267 	andeq	r0, r4, r7, ror #4
    29c0:	18050101 	stmdane	r5, {r0, r8}
			for (ret = 0; ret < 8; ret++)
    29c4:	00020500 	andeq	r0, r2, r0, lsl #10
				if (RF_cmdPropRadioDivSetup.txPower
    29c8:	03000000 	movweq	r0, #0
					== patable [ret])
    29cc:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
				if (RF_cmdPropRadioDivSetup.txPower
    29d0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
			for (ret = 0; ret < 8; ret++)
    29d4:	200e0618 	andcs	r0, lr, r8, lsl r6
    29d8:	06240205 	strteq	r0, [r4], -r5, lsl #4
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29dc:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    29e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    29e4:	06050521 	streq	r0, [r5], -r1, lsr #10
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    29e8:	06020501 	streq	r0, [r2], -r1, lsl #10
    29ec:	06120535 			; <UNDEFINED> instruction: 0x06120535
			_BIS (dstate, DSTATE_IRST);
    29f0:	59010501 	stmdbpl	r1, {r0, r8, sl}
    29f4:	03060305 	movweq	r0, #25349	; 0x6305
    29f8:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
			ret = (int) channel;
    29fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			goto RVal;
    2a00:	0b052e17 	bleq	14e264 <__ccfg+0x12e2bc>
				(*val > 7) ? 7 : *val;
    2a04:	0008023d 	andeq	r0, r8, sp, lsr r2
    2a08:	1d050101 	stfnes	f0, [r5, #-4]
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a0c:	00020500 	andeq	r0, r2, r0, lsl #10
    2a10:	03000000 	movweq	r0, #0
			plugch ();
    2a14:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
			_BIS (dstate, DSTATE_IRST);
    2a18:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2a1c:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
			ret = (int) vrate;
    2a20:	03052405 	movweq	r2, #21509	; 0x5405
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a24:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2a28:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2a2c:	01053206 	tsteq	r5, r6, lsl #4
    2a30:	03051306 	movweq	r1, #21254	; 0x5306
    2a34:	06022b06 	streq	r2, [r2], -r6, lsl #22
    2a38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2a3c:	0205001d 	andeq	r0, r5, #29
    2a40:	00001ae4 	andeq	r1, r0, r4, ror #21
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a44:	01049e03 	tsteq	r4, r3, lsl #28
    2a48:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2a4c:	01060505 	tsteq	r6, r5, lsl #10
    2a50:	2f060305 	svccs	0x00060305
			syserror (EREQPAR, "cc13 op");
    2a54:	01060a05 	tsteq	r6, r5, lsl #20
    2a58:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    2a5c:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2a60:	06030525 	streq	r0, [r3], -r5, lsr #10
    2a64:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2a68:	06020501 	streq	r0, [r2], -r1, lsl #10
    2a6c:	0006023b 	andeq	r0, r6, fp, lsr r2
    2a70:	1d050101 	stfnes	f0, [r5, #-4]
    2a74:	00020500 	andeq	r0, r2, r0, lsl #10
    2a78:	03000000 	movweq	r0, #0
    2a7c:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    2a80:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2a84:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    2a88:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2a8c:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
static void issue_cmd (lword cmd) {
    2a90:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    2a94:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a98:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    2a9c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2aa0:	06051f02 	streq	r1, [r5], -r2, lsl #30
		if (res != 0x86)
    2aa4:	06040521 	streq	r0, [r4], -r1, lsr #10
			syserror (EHARDWARE, "hang ic0");
    2aa8:	06050521 	streq	r0, [r5], -r1, lsr #10
    2aac:	06020501 	streq	r0, [r2], -r1, lsl #10
		if (cnt-- == 0) {
    2ab0:	0004023a 	andeq	r0, r4, sl, lsr r2
			diag ("HUP %lx %lx", cmd, res);
    2ab4:	21050101 	tstcs	r5, r1, lsl #2
    2ab8:	08020500 	stmdaeq	r2, {r8, sl}
			syserror (EHARDWARE, "hang ic0");
    2abc:	0300001b 	movweq	r0, #27
		udelay (1);
    2ac0:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2ac4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
}
    2ac8:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    2acc:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    2ad0:	02052006 	andeq	r2, r5, #6
    2ad4:	01050106 	tsteq	r5, r6, lsl #2
static void rx_de () {
    2ad8:	06220531 			; <UNDEFINED> instruction: 0x06220531
	if ((dstate & DSTATE_RXAC) == 0)
    2adc:	011e051d 	tsteq	lr, sp, lsl r5
    2ae0:	01061f05 	tsteq	r6, r5, lsl #30
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2ae4:	01000202 	tsteq	r0, r2, lsl #4
	_BIC (dstate, DSTATE_RXAC);
    2ae8:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2aec:	1b160205 	blne	583308 <__ccfg+0x563360>
}
    2af0:	c1030000 	mrsgt	r0, (UNDEF: 3)
    2af4:	02050104 	andeq	r0, r5, #4, 2
    2af8:	20200514 	eorcs	r0, r0, r4, lsl r5
static void rf_off () {
    2afc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
	if ((dstate & DSTATE_RFON) == 0)
    2b00:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2b04:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
	IntDisable (INT_RFC_CPE_0);
    2b08:	2f01052e 	svccs	0x0001052e
    2b0c:	01000102 	tsteq	r0, r2, lsl #2
    2b10:	00330501 	eorseq	r0, r3, r1, lsl #10
	RFCAdi3VcoLdoVoltageMode (false);
    2b14:	1b260205 	blne	983330 <__ccfg+0x963388>
	RFCSynthPowerDown ();
    2b18:	c6030000 	strgt	r0, [r3], -r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2b1c:	02050104 	andeq	r0, r5, #4, 2
    2b20:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2b24:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b28:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2b2c:	11052f01 	tstne	r5, r1, lsl #30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2b30:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
    2b34:	2f060305 	svccs	0x00060305
    2b38:	01060805 	tsteq	r6, r5, lsl #16
	_BIC (dstate, DSTATE_RFON);
    2b3c:	01000302 	tsteq	r0, r2, lsl #6
    2b40:	002b0501 	eoreq	r0, fp, r1, lsl #10
}
    2b44:	00000205 	andeq	r0, r0, r5, lsl #4
    2b48:	cd030000 	stcgt	0, cr0, [r3, #-0]
    2b4c:	02050104 	andeq	r0, r5, #4, 2
    2b50:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2b54:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2b58:	01010002 	tsteq	r1, r2
    2b5c:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2b60:	00000002 	andeq	r0, r0, r2
		if (cmd->status == tstat)
    2b64:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
		if (timeout-- == 0) {
    2b68:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2b6c:	01000302 	tsteq	r0, r2, lsl #6
    2b70:	00370501 	eorseq	r0, r7, r1, lsl #10
    2b74:	1b420205 	blne	1083390 <__ccfg+0x10633e8>
			syserror (EHARDWARE, "rt2");
    2b78:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2b7c:	02050104 	andeq	r0, r5, #4, 2
		udelay (1);
    2b80:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
		if (cmd->status == tstat)
    2b84:	30060105 	andcc	r0, r6, r5, lsl #2
}
    2b88:	1f060305 	svcne	0x00060305
    2b8c:	01060d05 	tsteq	r6, r5, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2b90:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    2b94:	01010003 	tsteq	r1, r3
static void rf_on () {
    2b98:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2b9c:	001b5602 	andseq	r5, fp, r2, lsl #12
	OSCHF_TurnOnXosc();
    2ba0:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2ba4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2ba8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2bac:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2bb0:	051f0603 	ldreq	r0, [pc, #-1539]	; 25b5 <ResetISR+0x15>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb4:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    2bb8:	01010003 	tsteq	r1, r3
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bbc:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2bc0:	001b6402 	andseq	r6, fp, r2, lsl #8
	issue_cmd (
    2bc4:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    2bc8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2bcc:	10062b05 	andne	r2, r6, r5, lsl #22
    2bd0:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    2bd4:	06210603 	strteq	r0, [r1], -r3, lsl #12
   pPatchTab[80] = 0;
    2bd8:	06020531 			; <UNDEFINED> instruction: 0x06020531
   } while (--nIterations);
    2bdc:	060c052d 	streq	r0, [ip], -sp, lsr #10
   pPatchTab[53] = 2;
    2be0:	20050501 	andcs	r0, r5, r1, lsl #10
    2be4:	2f060305 	svccs	0x00060305
   pPatchTab[55] = 3;
    2be8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
   pPatchTab[110] = 4;
    2bec:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
   pPatchTab[107] = 5;
    2bf0:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
   pPatchTab[65] = 6;
    2bf4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2bf8:	02050045 	andeq	r0, r5, #69	; 0x45
   pPatchTab[57] = 1;
    2bfc:	00001b88 	andeq	r1, r0, r8, lsl #23
   pIrqPatch[1] = _IRQ_PATCH_0;
    2c00:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
   const uint32_t *pS = patchGenfskRfe;
    2c04:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
      t2 = *pS++;
    2c08:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
      t4 = *pS++;
    2c0c:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
      t6 = *pS++;
    2c10:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
      t8 = *pS++;
    2c14:	03054a19 	movweq	r4, #23065	; 0x5a19
      *pD++ = t1;
    2c18:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
      *pD++ = t2;
    2c1c:	0605054c 	streq	r0, [r5], -ip, asr #10
      *pD++ = t3;
    2c20:	06020501 	streq	r0, [r2], -r1, lsl #10
      *pD++ = t5;
    2c24:	060f0540 	streq	r0, [pc], -r0, asr #10
      *pD++ = t7;
    2c28:	06020501 	streq	r0, [r2], -r1, lsl #10
   } while (--nIterations);
    2c2c:	0605054c 	streq	r0, [r5], -ip, asr #10
    2c30:	06020501 	streq	r0, [r2], -r1, lsl #10
      *pD++ = t8;
    2c34:	06050531 			; <UNDEFINED> instruction: 0x06050531
   } while (--nIterations);
    2c38:	06030501 	streq	r0, [r3], -r1, lsl #10
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2c3c:	0606054f 	streq	r0, [r6], -pc, asr #10
   *pD++ = t2;
    2c40:	06030501 	streq	r0, [r3], -r1, lsl #10
   *pD++ = t3;
    2c44:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
   *pD++ = t4;
    2c48:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
   *pD++ = t5;
    2c4c:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2c50:	01060505 	tsteq	r6, r5, lsl #10
	RFCAdi3VcoLdoVoltageMode (true);
    2c54:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    2c58:	01060605 	tsteq	r6, r5, lsl #12
       	RFCRfTrimSet (&rfTrim);
    2c5c:	4b060405 	blmi	183c78 <__ccfg+0x163cd0>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2c60:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2c64:	06030501 	streq	r0, [r3], -r1, lsl #10
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2c68:	060a0569 	streq	r0, [sl], -r9, ror #10
    2c6c:	06030501 	streq	r0, [r3], -r1, lsl #10
	issue_cmd ((lword)&cmd_srt);
    2c70:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2c74:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
	issue_cmd ((lword)&RF_cmdFs);
    2c78:	20290301 	eorcs	r0, r9, r1, lsl #6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2c7c:	03060205 	movweq	r0, #25093	; 0x6205
    2c80:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2c84:	03050106 	movweq	r0, #20742	; 0x5106
	IntEnable (INT_RFC_CPE_0);
    2c88:	02752f06 	rsbseq	r2, r5, #6, 30
	_BIC (dstate, DSTATE_IRST);
    2c8c:	01010005 	tsteq	r1, r5
    2c90:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    2c94:	001c2402 	andseq	r2, ip, r2, lsl #8
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2c98:	05ef0300 	strbeq	r0, [pc, #768]!	; 2fa0 <cc1350_driver+0x1c0>
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2c9c:	17020501 	strne	r0, [r2, -r1, lsl #10]
	IntEnable (INT_RFC_CPE_0);
    2ca0:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    2ca4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
}
    2ca8:	2068031a 	rsbcs	r0, r8, sl, lsl r3
	IntEnable (INT_RFC_CPE_0);
    2cac:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    2cb0:	580c0520 	stmdapl	ip, {r5, r8, sl}
    2cb4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2cb8:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2cbc:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    2cc0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2cc4:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    2cc8:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    2ccc:	2016052b 	andscs	r0, r6, fp, lsr #10
    2cd0:	21060205 	tstcs	r6, r5, lsl #4
    2cd4:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    2cd8:	31060205 	tstcc	r6, r5, lsl #4
    2cdc:	01061a05 	tsteq	r6, r5, lsl #20
    2ce0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    2ce4:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    2ce8:	01000d02 	tsteq	r0, r2, lsl #26
    2cec:	001c0501 	andseq	r0, ip, r1, lsl #10
    2cf0:	1c740205 	lfmne	f0, 2, [r4], #-20	; 0xffffffec
    2cf4:	fb030000 	blx	c2cfe <__ccfg+0xa2d56>
    2cf8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2cfc:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2d00:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2d04:	03050501 	movweq	r0, #21761	; 0x5501
    2d08:	0205200c 	andeq	r2, r5, #12
    2d0c:	07052506 	streq	r2, [r5, -r6, lsl #10]
static void rx_int_enable () {
    2d10:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2d14:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2d18:	11054c2f 	tstne	r5, pc, lsr #24
    2d1c:	0f051606 	svceq	0x00051606
    2d20:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2d24:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2d28:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2d2c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2d30:	30300602 	eorscc	r0, r0, r2, lsl #12
    2d34:	01061505 	tsteq	r6, r5, lsl #10
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d38:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2d3c:	2f2f0603 	svccs	0x002f0603
    2d40:	01061a05 	tsteq	r6, r5, lsl #20
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d44:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d48:	01010008 	tsteq	r1, r8
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d4c:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
		if (db->status == DATA_ENTRY_FINISHED) {
    2d50:	001cbc02 	andseq	fp, ip, r2, lsl #24
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d54:	03d80300 	bicseq	r0, r8, #0, 6
    2d58:	16020501 	strne	r0, [r2], -r1, lsl #10
			nr++;
    2d5c:	06170514 			; <UNDEFINED> instruction: 0x06170514
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d60:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2d64:	03052605 	movweq	r2, #22021	; 0x5605
    2d68:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2d6c:	07050106 	streq	r0, [r5, -r6, lsl #2]
				__dp [pl + 1] = __dp [pl] - 128;
    2d70:	06020520 	streq	r0, [r2], -r0, lsr #10
				pl = __dp [1] + 2;
    2d74:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
				__dp [pl + 1] = __dp [pl] - 128;
    2d78:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    2d7c:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
				__dp [pl] = 0;
    2d80:	0305200f 	movweq	r2, #20495	; 0x500f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d84:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    2d88:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2d8c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
			db->status = DATA_ENTRY_PENDING;
    2d90:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d94:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2d98:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
				diag ("BAD RX");
    2d9c:	3d230604 	stccc	6, cr0, [r3, #-16]!
    2da0:	060a052f 	streq	r0, [sl], -pc, lsr #10
	if (nr) {
    2da4:	20070501 	andcs	r0, r7, r1, lsl #10
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2da8:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
}
    2dac:	060d052a 	streq	r0, [sp], -sl, lsr #10
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2db0:	03010501 	movweq	r0, #5377	; 0x1501
    2db4:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    2db8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    2dbc:	0205001c 	andeq	r0, r5, #28
    2dc0:	00000000 	andeq	r0, r0, r0
    2dc4:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    2dc8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2dcc:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    2dd0:	7703061c 	smladvc	r3, ip, r6, r0
    2dd4:	36040501 	strcc	r0, [r4], -r1, lsl #10
    2dd8:	051f0605 	ldreq	r0, [pc, #-1541]	; 27db <ser_in+0x27>
    2ddc:	1c052209 	sfmne	f2, 4, [r5], {9}
thread (cc1350_driver)
    2de0:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2de4:	2010030a 	andscs	r0, r0, sl, lsl #6
    2de8:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    2dec:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2df0:	06020520 	streq	r0, [r2], -r0, lsr #10
		if (dstate & DSTATE_IRST) {
    2df4:	11030601 	tstne	r3, r1, lsl #12
    2df8:	06050520 	streq	r0, [r5], -r0, lsr #10
    2dfc:	06030501 	streq	r0, [r3], -r1, lsl #10
			rf_off ();
    2e00:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
			_BIC (dstate,
    2e04:	01060605 	tsteq	r6, r5, lsl #12
    2e08:	59060405 	stmdbpl	r6, {r0, r2, sl}
		if (dstate & DSTATE_RXAC) {
    2e0c:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2e10:	06050501 	streq	r0, [r5], -r1, lsl #10
			if ((dstate & DSTATE_RXON) == 0)
    2e14:	060b0521 	streq	r0, [fp], -r1, lsr #10
				rx_de ();
    2e18:	06040501 	streq	r0, [r4], -r1, lsl #10
		if (paylen == 0) {
    2e1c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2e20:	2f090501 	svccs	0x00090501
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2e24:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    2e28:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    2e2c:	060d0545 	streq	r0, [sp], -r5, asr #10
    2e30:	03010501 	movweq	r0, #5377	; 0x1501
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e34:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    2e38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2e3c:	02050020 	andeq	r0, r5, #32
    2e40:	00001d0c 	andeq	r1, r0, ip, lsl #26
    2e44:	0107a203 	tsteq	r7, r3, lsl #4
    2e48:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    2e4c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2e50:	06030501 	streq	r0, [r3], -r1, lsl #10
		} else if (dstate & DSTATE_RXON) {
    2e54:	06090525 	streq	r0, [r9], -r5, lsr #10
	if (dstate & DSTATE_RFON)
    2e58:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2e5c:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
		re->status = DATA_ENTRY_PENDING;
    2e60:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2e64:	2070031a 	rsbscs	r0, r0, sl, lsl r3
	issue_cmd ((lword)&RF_cmdPropRx);
    2e68:	10030d05 	andne	r0, r3, r5, lsl #26
	_BIS (dstate, DSTATE_RXAC);
    2e6c:	2306052e 	movwcs	r0, #25902	; 0x652e
    2e70:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2e74:	06020520 	streq	r0, [r2], -r0, lsr #10
    2e78:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
	if (dstate & DSTATE_RXAC)
    2e7c:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
    2e80:	06010602 	streq	r0, [r1], -r2, lsl #12
				if (statid != 0xffff)
    2e84:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2e88:	01190303 	tsteq	r9, r3, lsl #6
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2e8c:	01061605 	tsteq	r6, r5, lsl #12
				RF_cmdPropTx.pktLen = (byte) paylen;
    2e90:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		if (paylen == 0) {
    2e94:	052f0604 	streq	r0, [pc, #-1540]!	; 2898 <ser_inf+0x18>
			wait (qevent, DR_LOOP);
    2e98:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2e9c:	0d030603 	stceq	6, cr0, [r3, #-12]
			if (dstate & DSTATE_RXAC) {
    2ea0:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2ea4:	06020501 	streq	r0, [r2], -r1, lsl #10
				rx_int_enable ();
    2ea8:	06090540 	streq	r0, [r9], -r0, asr #10
			release;
    2eac:	06030501 	streq	r0, [r3], -r1, lsl #10
			} else if (dstate & DSTATE_RFON) {
    2eb0:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
				delay (offdelay, DR_GOOF);
    2eb4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2eb8:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    2ebc:	06054c03 	streq	r4, [r5], -r3, lsl #24
		if (bckf_timer) {
    2ec0:	2e050106 	adfcss	f0, f5, f6
			wait (qevent, DR_LOOP);
    2ec4:	4a7a0306 	bmi	1e83ae4 <__ccfg+0x1e63b3c>
    2ec8:	13060905 	movwne	r0, #26885	; 0x6905
    2ecc:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
			delay (bckf_timer, DR_LOOP);
    2ed0:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    2ed4:	01060e05 	tsteq	r6, r5, lsl #28
			if (dstate & DSTATE_RXAC)
    2ed8:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    2edc:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
	if (dstate & DSTATE_RFON)
    2ee0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2ee4:	052f0604 	streq	r0, [pc, #-1540]!	; 28e8 <plugch+0x8>
		rx_de ();
    2ee8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
		RF_cmdPropTx . status = 0;
    2eec:	04052007 	streq	r2, [r5], #-7
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef0:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    2ef4:	10050106 	andne	r0, r5, r6, lsl #2
    2ef8:	06040520 	streq	r0, [r4], -r0, lsr #10
		issue_cmd ((lword)&cmd_cs);
    2efc:	2e090530 	cfmv64hrcs	mvdx9, r0
		if (dstate & DSTATE_IRST)
    2f00:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2f04:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2f08:	1a053012 	bne	14ef58 <__ccfg+0x12efb0>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f0c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2f10:	06150522 	ldreq	r0, [r5], -r2, lsr #10
			delay (1, DR_XMIT);
    2f14:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2f18:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2f1c:	01060e05 	tsteq	r6, r5, lsl #28
    2f20:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2f24:	12052906 	andne	r2, r5, #98304	; 0x18000
    2f28:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
				RF_cmdPropTx . status = 0;
    2f2c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2f30:	01061305 	tsteq	r6, r5, lsl #6
				issue_cmd ((lword)&RF_cmdPropTx);
    2f34:	31060305 	tstcc	r6, r5, lsl #6
				proceed (DR_XMIT);
    2f38:	03060105 	movweq	r0, #24837	; 0x6105
    2f3c:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
			txtries++;
    2f40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2f44:	0205002c 	andeq	r0, r5, #44	; 0x2c
    2f48:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
    2f4c:	0102ab03 	tsteq	r2, r3, lsl #22
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f50:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
		goto DR_LOOP__;
    2f54:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2f58:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
		paylen = 0;
    2f5c:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f60:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
		txtries = 0;
    2f64:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f68:	060a0523 	streq	r0, [sl], -r3, lsr #10
    2f6c:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2f70:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2f74:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    2f78:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
		    tcvphy_top (physid) == NULL)
    2f7c:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2f80:	13140305 	tstne	r4, #335544320	; 0x14000000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f84:	01060605 	tsteq	r6, r5, lsl #12
    2f88:	21060405 	tstcs	r6, r5, lsl #8
			rf_off ();
    2f8c:	01060a05 	tsteq	r6, r5, lsl #20
endthread
    2f90:	0f030105 	svceq	0x00030105
    2f94:	060b0520 	streq	r0, [fp], -r0, lsr #10
    2f98:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    2f9c:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    2fa0:	2f062004 	svccs	0x00062004
    2fa4:	01060c05 	tsteq	r6, r5, lsl #24
    2fa8:	03060205 	movweq	r0, #25093	; 0x6205
    2fac:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    2fb0:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    2fb4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fb8:	02050020 	andeq	r0, r5, #32
    2fbc:	00001de8 	andeq	r1, r0, r8, ror #27
    2fc0:	01088103 	tsteq	r8, r3, lsl #2
    2fc4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2fc8:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    2fcc:	03200501 			; <UNDEFINED> instruction: 0x03200501
void RFCCPE0IntHandler (void) {
    2fd0:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2fd4:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
		_BIS (dstate, DSTATE_IRST);
    2fd8:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    2fdc:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    2fe0:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2fe4:	06020501 	streq	r0, [r2], -r1, lsl #10
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2fe8:	0004023e 	andeq	r0, r4, lr, lsr r2
    2fec:	21050101 	tstcs	r5, r1, lsl #2
	p_trigger (drvprcs, qevent);
    2ff0:	00020500 	andeq	r0, r2, r0, lsl #10
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ff4:	03000000 	movweq	r0, #0
    2ff8:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    2ffc:	01090302 	tsteq	r9, r2, lsl #6
    3000:	03062105 	movweq	r2, #24837	; 0x6105
    3004:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    3008:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    300c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3010:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    3014:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    3018:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
	RISE_N_SHINE;
    301c:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    3020:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
    3024:	09051402 	stmdbeq	r5, {r1, sl, ip}
}
    3028:	01050106 	tsteq	r5, r6, lsl #2
    302c:	0006025a 	andeq	r0, r6, sl, asr r2
    3030:	20050101 	andcs	r0, r5, r1, lsl #2
    3034:	00020500 	andeq	r0, r2, r0, lsl #10
    3038:	03000000 	movweq	r0, #0
    303c:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
void phys_cc1350 (int phy, int mbs) {
    3040:	01090302 	tsteq	r9, r2, lsl #6
	if (rbuffl != 0)
    3044:	20051413 	andcs	r1, r5, r3, lsl r4
    3048:	01740306 	cmneq	r4, r6, lsl #6
		syserror (ETOOMANY, "cc13");
    304c:	0c031d05 	stceq	13, cr1, [r3], {5}
		syserror (EREQPAR, "cc13 mb");
    3050:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
	if (mbs == 0)
    3054:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    3058:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
		syserror (EREQPAR, "cc13 mb");
    305c:	06010602 	streq	r0, [r1], -r2, lsl #12
    3060:	06050524 	streq	r0, [r5], -r4, lsr #10
	i = 0;
    3064:	0603052e 	streq	r0, [r3], -lr, lsr #10
	rbuffl = (byte) mbs;
    3068:	06070521 	streq	r0, [r7], -r1, lsr #10
		db->config.type = 0;	// General (data in structure)
    306c:	06020501 	streq	r0, [r2], -r1, lsl #10
	rbuffl = (byte) mbs;
    3070:	0609054c 	streq	r0, [r9], -ip, asr #10
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    3074:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    3078:	03060305 	movweq	r0, #25349	; 0x6305
		if (db == NULL)
    307c:	23052e79 	movwcs	r2, #24185	; 0x5e79
			syserror (EMALLOC, "cc13");
    3080:	06052d06 	streq	r2, [r5], -r6, lsl #26
    3084:	0e054a06 	vmlaeq.f32	s8, s10, s12
    3088:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
		db->status = DATA_ENTRY_PENDING;
    308c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (i)
    3090:	02050023 	andeq	r0, r5, #35	; 0x23
			da->pNextEntry = (byte*) db;
    3094:	00001e00 	andeq	r1, r0, r0, lsl #28
		db->length = rbuffl + 2;
    3098:	01098103 	tsteq	r9, r3, lsl #2
    309c:	13410205 	movtne	r0, #4613	; 0x1205
		db->config.type = 0;	// General (data in structure)
    30a0:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
		db->length = rbuffl + 2;
    30a4:	03062305 	movweq	r2, #25349	; 0x6305
	db->pNextEntry = (byte*) re;
    30a8:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    30ac:	1f3c0c03 	svcne	0x003c0c03
    30b0:	01012106 	tsteq	r1, r6, lsl #2
	if (rbuffs == NULL)
    30b4:	03060805 	movweq	r0, #26629	; 0x6805
	rbuffs->pCurrEntry = (byte*) re;
    30b8:	02052028 	andeq	r2, r5, #40	; 0x28
	rbuffs->pLastEntry = NULL;
    30bc:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    30c0:	2023031c 	eorcs	r0, r3, ip, lsl r3
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30c4:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    30c8:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    30cc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    30d0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	rbuffl -= 2;
    30d4:	02052008 	andeq	r2, r5, #8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30d8:	00c70306 	sbceq	r0, r7, r6, lsl #6
	rbuffl -= 2;
    30dc:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
	physid = phy;
    30e0:	060d0502 	streq	r0, [sp], -r2, lsl #10
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30e4:	017bcf03 	cmneq	fp, r3, lsl #30
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30e8:	0f050104 	svceq	0x00050104
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30ec:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30f0:	01020520 	tsteq	r2, r0, lsr #10
    30f4:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
	utimer_add (&bckf_timer);
    30f8:	017bca03 	cmneq	fp, r3, lsl #20
	drvprcs = runthread (cc1350_driver);
    30fc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3100:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    3104:	03020501 	movweq	r0, #9473	; 0x2501
	if (drvprcs == 0)
    3108:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
		syserror (ERESOURCE, "cc13");
    310c:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    3110:	13060105 	movwne	r0, #24837	; 0x6105
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3114:	03060305 	movweq	r0, #25349	; 0x6305
    3118:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    311c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3120:	134b0604 	movtne	r0, #46596	; 0xb604
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3124:	20060705 	andcs	r0, r6, r5, lsl #14
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3128:	4b060505 	blmi	184544 <__ccfg+0x16459c>
    312c:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    3130:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    3134:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    3138:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    313c:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    3140:	0f060805 	svceq	0x00060805
    3144:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    3148:	31030505 	tstcc	r3, r5, lsl #10
	plugch ();
    314c:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3150:	4a4e0306 	bmi	1383d70 <__ccfg+0x1363dc8>
    3154:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3158:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    315c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    3160:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3164:	11060b05 	tstne	r6, r5, lsl #22
}
    3168:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    316c:	0b052f06 	bleq	14ed8c <__ccfg+0x12ede4>
    3170:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    3174:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    3178:	03010608 	movweq	r0, #5640	; 0x1608
    317c:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    3180:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    3184:	06150513 			; <UNDEFINED> instruction: 0x06150513
    3188:	200e0501 	andcs	r0, lr, r1, lsl #10
    318c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3190:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 3180 <phys_cc1350+0x140>
    3194:	01060905 	tsteq	r6, r5, lsl #18
    3198:	21060705 	tstcs	r6, r5, lsl #14
    319c:	01060b05 	tsteq	r6, r5, lsl #22
    31a0:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    31a4:	01060a05 	tsteq	r6, r5, lsl #20
    31a8:	23060505 	movwcs	r0, #25861	; 0x6505
    31ac:	01061c05 	tsteq	r6, r5, lsl #24
    31b0:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    31b4:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    31b8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    31bc:	06052e08 	streq	r2, [r5], -r8, lsl #28
    31c0:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    31c4:	0c050106 	stfeqs	f0, [r5], {6}
    31c8:	06060520 	streq	r0, [r6], -r0, lsr #10
    31cc:	0608052f 	streq	r0, [r8], -pc, lsr #10
    31d0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    31d4:	0608052a 	streq	r0, [r8], -sl, lsr #10
    31d8:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    31dc:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    31e0:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    31e4:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    31e8:	051f0805 	ldreq	r0, [pc, #-2053]	; 29eb <option+0xeb>
    31ec:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    31f0:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    31f4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    31f8:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    31fc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3200:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    3204:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    3208:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    320c:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    3210:	06080520 	streq	r0, [r8], -r0, lsr #10
    3214:	06060501 	streq	r0, [r6], -r1, lsl #10
    3218:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    321c:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    3220:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
    3224:	03060505 	movweq	r0, #25861	; 0x6505
    3228:	0605206e 	streq	r2, [r5], -lr, rrx
    322c:	2f201703 	svccs	0x00201703
    3230:	01060705 	tsteq	r6, r5, lsl #14
    3234:	1e060b05 	vmlane.f64	d0, d6, d5
    3238:	01060c05 	tsteq	r6, r5, lsl #24
    323c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    3240:	0c030604 	stceq	6, cr0, [r3], {4}
    3244:	000b023c 	andeq	r0, fp, ip, lsr r2
    3248:	0f050101 	svceq	0x00050101
    324c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    3250:	0300001f 	movweq	r0, #31
strand (__outserial, const char*)
    3254:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    3258:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    325c:	18050106 	stmdane	r5, {r1, r2, r8}
    3260:	2025052e 	eorcs	r0, r5, lr, lsr #10
endstrand
    3264:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    3268:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
	ptr = data;
    326c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3270:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
	if (*ptr)
    3274:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
		len = strlen (ptr);
    3278:	bb010100 	bllt	43680 <__ccfg+0x236d8>
    327c:	0300000c 	movweq	r0, #12
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3280:	0001a500 	andeq	sl, r1, r0, lsl #10
    3284:	fb010200 	blx	43a8e <__ccfg+0x23ae6>
    3288:	01000d0e 	tsteq	r0, lr, lsl #26
    328c:	00010101 	andeq	r0, r1, r1, lsl #2
    3290:	00010000 	andeq	r0, r1, r0
	len -= quant;
    3294:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3298:	2f656d6f 	svccs	0x00656d6f
    329c:	70657473 	rsbvc	r7, r5, r3, ror r4
	if (len == 0) {
    32a0:	2f6e6568 	svccs	0x006e6568
		ufree (data);
    32a4:	6b736544 	blvs	1cdc7bc <__ccfg+0x1cbc814>
		finish;
    32a8:	2f706f74 	svccs	0x00706f74
    32ac:	4f534c4f 	svcmi	0x00534c4f
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    32b0:	2f54454e 	svccs	0x0054454e
    32b4:	4f434950 	svcmi	0x00434950
    32b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    32bc:	2f534f63 	svccs	0x00534f63
    32c0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
strand (__inserial, address)
    32c4:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    32c8:	00497465 	subeq	r7, r9, r5, ror #8
    32cc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    32d0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    32d4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
	if (__inpline != NULL)
    32d8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    32dc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
		finish;
    32e0:	61652d65 	cmnvs	r5, r5, ror #26
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    32e4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    32e8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    32ec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    32f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		umwait (IM_INIT);
    32f4:	6f682f00 	svcvs	0x00682f00
		release;
    32f8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	savedata (data);
    32fc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	len = MAX_LINE_LENGTH;
    3300:	442f6e65 	strtmi	r6, [pc], #-3685	; 3308 <__inserial+0x44>
	io (IM_READ, __cport, READ, ptr, 1);
    3304:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3308:	4f2f706f 	svcmi	0x002f706f
    330c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3310:	502f5445 	eorpl	r5, pc, r5, asr #8
	if (ptr == (char*) data) { // new line
    3314:	534f4349 	movtpl	r4, #62281	; 0xf349
    3318:	6369502f 	cmnvs	r9, #47	; 0x2f
		if (*ptr == '\0') { // bin cmd
    331c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
			proceed (IM_BIN);
    3320:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3324:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
		if (*ptr < 0x20)
    3328:	2f656d6f 	svccs	0x00656d6f
    332c:	70657473 	rsbvc	r7, r5, r3, ror r4
			proceed (IM_READ);
    3330:	2f6e6568 	svccs	0x006e6568
    3334:	6b736544 	blvs	1cdc84c <__ccfg+0x1cbc8a4>
	if (*ptr == '\n' || *ptr == '\r') {
    3338:	2f706f74 	svccs	0x00706f74
    333c:	4f534c4f 	svcmi	0x00534c4f
    3340:	2f54454e 	svccs	0x0054454e
		*ptr = '\0';
    3344:	4f434950 	svcmi	0x00434950
		__inpline = (char*)data;
    3348:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		finish;
    334c:	00534f63 	subseq	r4, r3, r3, ror #30
	if (len) {
    3350:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 329c <__outserial+0x48>
		ptr++;
    3354:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    3358:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
		len--;
    335c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	proceed (IM_READ);
    3360:	6f746b73 	svcvs	0x00746b73
	io (IM_BIN, __cport, READ, ptr, 1);
    3364:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3368:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    336c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3370:	2f534f43 	svccs	0x00534f43
    3374:	4f636950 	svcmi	0x00636950
	len -= 2;
    3378:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
	if (len > *ptr + 1) // 1 for 0x04
    337c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3380:	63740000 	cmnvs	r4, #0
		len = *ptr + 1;
    3384:	00632e76 	rsbeq	r2, r3, r6, ror lr
    3388:	73000001 	movwvc	r0, #1
	ptr++;
    338c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3390:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3394:	73000002 	movwvc	r0, #2
    3398:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    339c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    33a0:	61000002 	tstvs	r0, r2
    33a4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
	len -= quant;
    33a8:	00030068 	andeq	r0, r3, r8, rrx
		__inpline = (char*)data;
    33ac:	63616d00 	cmnvs	r1, #0, 26
		finish;
    33b0:	00682e68 	rsbeq	r2, r8, r8, ror #28
	ptr += quant;
    33b4:	70000003 	andvc	r0, r0, r3
    33b8:	5f736e69 	svcpl	0x00736e69
endstrand
    33bc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    33c0:	00030068 	andeq	r0, r3, r8, rrx
	proceed (IM_BINL);
    33c4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
endstrand
    33c8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    33cc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    33d0:	0300682e 	movweq	r6, #2094	; 0x82e
    33d4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    33d8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    33dc:	00040068 	andeq	r0, r4, r8, rrx
		if (res && (d < n))
    33e0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    33e4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    33e8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    33ec:	6b000001 	blvs	33f8 <outc.5724+0x18>
			res [d] = (char) c;
    33f0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
		d++;
    33f4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    33f8:	74000005 	strvc	r0, [r0], #-5
    33fc:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3400:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3404:	00000100 	andeq	r0, r0, r0, lsl #2
    3408:	5f766374 	svcpl	0x00766374
				enci (10000);
    340c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3410:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    3414:	00682e61 	rsbeq	r2, r8, r1, ror #28
	d = 0;
    3418:	3c000001 	stccc	0, cr0, [r0], {1}
		c = *fm++;
    341c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
		if (c == '\\') {
    3420:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
			if ((c = *fm++) == '\0') {
    3424:	0000003e 	andeq	r0, r0, lr, lsr r0
    3428:	31050000 	mrscc	r0, (UNDEF: 5)
				outc ('\\');
    342c:	60020500 	andvs	r0, r2, r0, lsl #10
			if ((c = *fm++) == '\0') {
    3430:	0300001f 	movweq	r0, #31
				outc ('\\');
    3434:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    3438:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
			outc (c);
    343c:	03063105 	movweq	r3, #24837	; 0x6105
    3440:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
			if (c == '\0')
    3444:	16052607 	strne	r2, [r5], -r7, lsl #12
    3448:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
			outc (c);
    344c:	26060205 	strcs	r0, [r6], -r5, lsl #4
				outc (val);
    3450:	13061a05 	movwne	r1, #27141	; 0x6a05
				val = (word) va_arg (ap, aword);
    3454:	051f0e05 	ldreq	r0, [pc, #-3589]	; 2657 <cmd_0+0x7>
		if (c == '%') {
    3458:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    345c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
			c = *fm++;
    3460:	0c030602 	stceq	6, cr0, [r3], {2}
			switch (c) {
    3464:	06010520 	streq	r0, [r1], -r0, lsr #10
    3468:	00010216 	andeq	r0, r1, r6, lsl r2
    346c:	2e050101 	adfcss	f0, f5, f1
    3470:	76020500 	strvc	r0, [r2], -r0, lsl #10
    3474:	0300001f 	movweq	r0, #31
    3478:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    347c:	06051602 	streq	r1, [r5], -r2, lsl #12
    3480:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				outc ('%');
    3484:	06030520 	streq	r0, [r3], -r0, lsr #10
    3488:	0629052f 	strteq	r0, [r9], -pc, lsr #10
				outc (c);
    348c:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    3490:	21060305 	tstcs	r6, r5, lsl #6
    3494:	01062905 	tsteq	r6, r5, lsl #18
				if (c == '\0')
    3498:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
				return d;
    349c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
}
    34a0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    34a4:	01024c01 	tsteq	r2, r1, lsl #24
			switch (c) {
    34a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34ac:	0205002e 	andeq	r0, r5, #46	; 0x2e
    34b0:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    34b4:	01028303 	tsteq	r2, r3, lsl #6
				val = (word) va_arg (ap, aword);
    34b8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
						[ (val >> i) & 0xf ]);
    34bc:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    34c0:	2f062402 	svccs	0x00062402
    34c4:	01130101 	tsteq	r3, r1, lsl #2
					outc (__pi_hex_enc_table
    34c8:	01051401 	tsteq	r5, r1, lsl #8
    34cc:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
					if (i == 0)
    34d0:	0002022d 	andeq	r0, r2, sp, lsr #4
    34d4:	3a050101 	bcc	1438e0 <__ccfg+0x123938>
				for (i = 12; ; i -= 4) {
    34d8:	a0020500 	andge	r0, r2, r0, lsl #10
				val = (word) va_arg (ap, aword);
    34dc:	0300001f 	movweq	r0, #31
				if (c == 'd' && (val & 0x8000) != 0) {
    34e0:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
				val = (word) va_arg (ap, aword);
    34e4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
				if (c == 'd' && (val & 0x8000) != 0) {
    34e8:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    34ec:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
					outc ('-');
    34f0:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    34f4:	20062402 	andcs	r2, r6, r2, lsl #8
					val = (~val) + 1;
    34f8:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    34fc:	03050106 	movweq	r0, #20742	; 0x5106
				for (i = 12; ; i -= 4) {
    3500:	02053d06 	andeq	r3, r5, #384	; 0x180
				enci (10000);
    3504:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3508:	20050501 	andcs	r0, r5, r1, lsl #10
    350c:	30060305 	andcc	r0, r6, r5, lsl #6
    3510:	01061705 	tsteq	r6, r5, lsl #14
    3514:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    3518:	052f0603 	streq	r0, [pc, #-1539]!	; 2f1d <cc1350_driver+0x13d>
    351c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3520:	03052011 	movweq	r2, #20497	; 0x5011
    3524:	0b052106 	bleq	14b944 <__ccfg+0x12b99c>
    3528:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    352c:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    3530:	01050106 	tsteq	r5, r6, lsl #2
    3534:	0603054b 	streq	r0, [r3], -fp, asr #10
    3538:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    353c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    3540:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3544:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    3548:	03052014 	movweq	r2, #20500	; 0x5014
				if (c == 'd' || c == 'u') {
    354c:	11052106 	tstne	r5, r6, lsl #2
    3550:	03050106 	movweq	r0, #20742	; 0x5106
					if (c == 'd' &&
    3554:	0b052106 	bleq	14b974 <__ccfg+0x12b9cc>
					val = va_arg (ap, lword);
    3558:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
					fm++;
    355c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
					if (c == 'd' &&
    3560:	0205003a 	andeq	r0, r5, #58	; 0x3a
    3564:	00001fec 	andeq	r1, r0, ip, ror #31
						outc ('-');
    3568:	0101df03 	tsteq	r1, r3, lsl #30
    356c:	02052006 	andeq	r2, r5, #6
						val = (~val) + 1;
    3570:	20090306 	andcs	r0, r9, r6, lsl #6
				enci (10000);
    3574:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
					enci (1000000000UL);
    3578:	01061b05 	tsteq	r6, r5, lsl #22
    357c:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    3580:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    3584:	0627064a 	strteq	r0, [r7], -sl, asr #12
    3588:	133c7903 	teqne	ip, #49152	; 0xc000
    358c:	03060105 	movweq	r0, #24837	; 0x6105
    3590:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    3594:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    3598:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    359c:	06040501 	streq	r0, [r4], -r1, lsl #10
    35a0:	2e90014c 	fmlcssm	f0, f0, #4.0
    35a4:	01055b13 	tsteq	r5, r3, lsl fp
    35a8:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    35ac:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    35b0:	0c023601 	stceq	6, cr3, [r2], {1}
    35b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35b8:	02050031 	andeq	r0, r5, #49	; 0x31
				} else if (c == 'x') {
    35bc:	00002078 	andeq	r2, r0, r8, ror r0
					for (i = 28; ; i -= 4) {
    35c0:	0102ba03 	tsteq	r2, r3, lsl #20
					val = va_arg (ap, lword);
    35c4:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
							[ (val >> i) & 0xf ]);
    35c8:	03063105 	movweq	r3, #24837	; 0x6105
    35cc:	06050178 			; <UNDEFINED> instruction: 0x06050178
						outc (__pi_hex_enc_table
    35d0:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    35d4:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    35d8:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
						if (i == 0)
    35dc:	03050106 	movweq	r0, #20742	; 0x5106
    35e0:	06012f06 	streq	r2, [r1], -r6, lsl #30
					for (i = 28; ; i -= 4) {
    35e4:	064a0666 	strbeq	r0, [sl], -r6, ror #12
					outc ('%');
    35e8:	133b0621 	teqne	fp, #34603008	; 0x2100000
    35ec:	4a660601 	bmi	1984df8 <__ccfg+0x1964e50>
    35f0:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
					outc ('l');
    35f4:	03060105 	movweq	r0, #24837	; 0x6105
    35f8:	03053c09 	movweq	r3, #23561	; 0x5c09
				val = (word) va_arg (ap, aword);
    35fc:	062e7703 	strteq	r7, [lr], -r3, lsl #14
				outc (val);
    3600:	06010536 			; <UNDEFINED> instruction: 0x06010536
    3604:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
				while (*st != '\0') {
    3608:	01000b02 	tsteq	r0, r2, lsl #22
    360c:	004a0501 	subeq	r0, sl, r1, lsl #10
    3610:	20e80205 	rsccs	r0, r8, r5, lsl #4
    3614:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
					outc (*st);
    3618:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    361c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
					st++;
    3620:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
		c = *fm++;
    3624:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    3628:	0b030505 	bleq	c4a44 <__ccfg+0xa4a9c>
    362c:	034a053c 	movteq	r0, #42300	; 0xa53c
char *vform (char *res, const char *fm, va_list aq) {
    3630:	02052075 	andeq	r2, r5, #117	; 0x75
    3634:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
	if (res != NULL) {
    3638:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
		__pi_vfparse (res, MAX_WORD, fm, aq);
    363c:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    3640:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    3644:	053c3005 	ldreq	r3, [ip, #-5]!
}
    3648:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    364c:	03054b06 	movweq	r4, #23302	; 0x5b06
	fml = strlen (fm) + 17;
    3650:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    3654:	03060205 	movweq	r0, #25093	; 0x6205
    3658:	13132e6e 	tstne	r3, #1760	; 0x6e0
	if ((res = (char*) umalloc (fml)) == NULL)
    365c:	06120517 			; <UNDEFINED> instruction: 0x06120517
    3660:	06020501 	streq	r0, [r2], -r1, lsl #10
    3664:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3668:	20060a05 	andcs	r0, r6, r5, lsl #20
    366c:	2f060305 	svccs	0x00060305
    3670:	01061305 	tsteq	r6, r5, lsl #6
    3674:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		ufree (res);
    3678:	051f0622 	ldreq	r0, [pc, #-1570]	; 305e <phys_cc1350+0x1e>
		goto Again;
    367c:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
	if (buf == NULL || fmt == NULL)
    3680:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
int vscan (const char *buf, const char *fmt, va_list ap) {
    3684:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
	if (buf == NULL || fmt == NULL)
    3688:	0105330a 	tsteq	r5, sl, lsl #6
    368c:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    3690:	73030602 	movwvc	r0, #13826	; 0x3602
		    	    case 'u': scanu (lword); break;
    3694:	061a0566 	ldreq	r0, [sl], -r6, ror #10
			while (isspace (*buf)) buf++;
    3698:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    369c:	2f060205 	svccs	0x00060205
	while (*fmt != '\0') {
    36a0:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
		if (*fmt++ != '%')
    36a4:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
		switch (*fmt++) {
    36a8:	0114132f 	tsteq	r4, pc, lsr #6
    36ac:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    36b0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    36b4:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    36b8:	13053206 	movwne	r3, #20998	; 0x5206
    36bc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    36c0:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
}
    36c4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		switch (*fmt++) {
    36c8:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    36cc:	06130515 			; <UNDEFINED> instruction: 0x06130515
    36d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    36d4:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
			while (isspace (*buf)) buf++;
    36d8:	06030501 	streq	r0, [r3], -r1, lsl #10
    36dc:	0010023d 	andseq	r0, r0, sp, lsr r2
    36e0:	3a050101 	bcc	143aec <__ccfg+0x123b44>
    36e4:	00020500 	andeq	r0, r2, r0, lsl #10
    36e8:	03000000 	movweq	r0, #0
    36ec:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
			if (*buf == '\0')
    36f0:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
			if (*buf != ',') {
    36f4:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
			sap = va_arg (ap, char*);
    36f8:	0205201b 	andeq	r2, r5, #27
			nc++;
    36fc:	4a062025 	bmi	18b798 <__ccfg+0x16b7f0>
			if (*buf != ',') {
    3700:	03062706 	movweq	r2, #26374	; 0x6706
				while (!isspace (*buf) && *buf != ',' &&
    3704:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    3708:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    370c:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    3710:	06060514 			; <UNDEFINED> instruction: 0x06060514
    3714:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3718:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    371c:	13410603 	movtne	r0, #5635	; 0x1603
			while (isspace (*buf)) buf++;
    3720:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    3724:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    3728:	02052008 	andeq	r2, r5, #8
    372c:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    3730:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
			if (*buf == ',') buf++;
    3734:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3738:	02130601 	andseq	r0, r3, #1048576	; 0x100000
			*sap = '\0';
    373c:	0101000b 	tsteq	r1, fp
			break;
    3740:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
		    case 'd': scani (word); break;
    3744:	0021a802 	eoreq	sl, r1, r2, lsl #16
    3748:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    374c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3750:	01060505 	tsteq	r6, r5, lsl #10
    3754:	052f0f05 	streq	r0, [pc, #-3845]!	; 2857 <ser_outf+0x2b>
    3758:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    375c:	06020521 	streq	r0, [r2], -r1, lsr #10
    3760:	06100531 			; <UNDEFINED> instruction: 0x06100531
    3764:	06020501 	streq	r0, [r2], -r1, lsl #10
    3768:	0609052f 	streq	r0, [r9], -pc, lsr #10
    376c:	2b0a0501 	blcs	284b78 <__ccfg+0x264bd0>
    3770:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    3774:	01010004 	tsteq	r1, r4
    3778:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    377c:	0021cc02 	eoreq	ip, r1, r2, lsl #24
    3780:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    3784:	19020501 	stmdbne	r2, {r0, r8, sl}
    3788:	01141313 	tsteq	r4, r3, lsl r3
    378c:	03063c05 	movweq	r3, #27653	; 0x6c05
    3790:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    3794:	200b0302 	andcs	r0, fp, r2, lsl #6
    3798:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    379c:	06201303 	strteq	r1, [r0], -r3, lsl #6
    37a0:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    37a4:	06040513 			; <UNDEFINED> instruction: 0x06040513
    37a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    37ac:	06050521 	streq	r0, [r5], -r1, lsr #10
    37b0:	06030501 	streq	r0, [r3], -r1, lsl #10
		    case 'u': scanu (word); break;
    37b4:	06060530 			; <UNDEFINED> instruction: 0x06060530
    37b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    37bc:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    37c0:	01013d33 	tsteq	r1, r3, lsr sp
    37c4:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    37c8:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    37cc:	06013006 	streq	r3, [r1], -r6
    37d0:	2e064a4a 	vmlscs.f32	s8, s12, s20
    37d4:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    37d8:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    37dc:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    37e0:	01052306 	tsteq	r5, r6, lsl #6
    37e4:	0a051306 	beq	148404 <__ccfg+0x12845c>
    37e8:	022e7003 	eoreq	r7, lr, #3
    37ec:	0101000b 	tsteq	r1, fp
    37f0:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    37f4:	00000002 	andeq	r0, r0, r2
    37f8:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
		    case 'x': scanx (word); break;
    37fc:	16020501 	strne	r0, [r2], -r1, lsl #10
    3800:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    3804:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    3808:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    380c:	20090302 	andcs	r0, r9, r2, lsl #6
    3810:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    3814:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    3818:	0602052e 	streq	r0, [r2], -lr, lsr #10
    381c:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    3820:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    3824:	20050501 	andcs	r0, r5, r1, lsl #10
    3828:	2f060305 	svccs	0x00060305
    382c:	13190205 	tstne	r9, #1342177280	; 0x50000000
    3830:	01061b05 	tsteq	r6, r5, lsl #22
    3834:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3838:	0a030603 	beq	c504c <__ccfg+0xa50a4>
    383c:	06050520 	streq	r0, [r5], -r0, lsr #10
    3840:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    3844:	200b030a 	andcs	r0, fp, sl, lsl #6
    3848:	20061a05 	andcs	r1, r6, r5, lsl #20
    384c:	01060305 	tsteq	r6, r5, lsl #6
    3850:	2f060405 	svccs	0x00060405
    3854:	11062c05 	tstne	r6, r5, lsl #24
    3858:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    385c:	051f062a 	ldreq	r0, [pc, #-1578]	; 323a <tcv_ope_null+0x2e>
    3860:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    3864:	01062105 	tsteq	r6, r5, lsl #2
    3868:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    386c:	052f0603 	streq	r0, [pc, #-1539]!	; 3271 <__outserial+0x1d>
    3870:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
			switch (*fmt++) {
    3874:	20052006 	andcs	r2, r5, r6
    3878:	20060520 	andcs	r0, r6, r0, lsr #10
    387c:	33060205 	movwcc	r0, #25093	; 0x6205
    3880:	06050513 			; <UNDEFINED> instruction: 0x06050513
    3884:	06030501 	streq	r0, [r3], -r1, lsl #10
    3888:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
		    	    case 'd': scani (lword); break;
    388c:	0a050f06 	beq	1474ac <__ccfg+0x127504>
    3890:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    3894:	06030520 	streq	r0, [r3], -r0, lsr #10
    3898:	03010501 	movweq	r0, #5377	; 0x1501
    389c:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    38a0:	20740306 	rsbscs	r0, r4, r6, lsl #6
    38a4:	01060805 	tsteq	r6, r5, lsl #16
    38a8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    38ac:	052f0605 	streq	r0, [pc, #-1541]!	; 32af <__outserial+0x5b>
    38b0:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    38b4:	2a052207 	bcs	14c0d8 <__ccfg+0x12c130>
    38b8:	0a021e06 	beq	8b0d8 <__ccfg+0x6b130>
    38bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    38c0:	02050038 	andeq	r0, r5, #56	; 0x38
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	0105a303 	tsteq	r5, r3, lsl #6
    38cc:	13160205 	tstne	r6, #1342177280	; 0x50000000
    38d0:	01141313 	tsteq	r4, r3, lsl r3
    38d4:	03063805 	movweq	r3, #26629	; 0x6805
    38d8:	02052077 	andeq	r2, r5, #119	; 0x77
    38dc:	20200903 	eorcs	r0, r0, r3, lsl #18
    38e0:	03054a06 	movweq	r4, #23046	; 0x5a06
    38e4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
		    	    case 'x': scanx (lword); break;
    38e8:	03060205 	movweq	r0, #25093	; 0x6205
    38ec:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    38f0:	01061a05 	tsteq	r6, r5, lsl #20
    38f4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    38f8:	052f0603 	streq	r0, [pc, #-1539]!	; 32fd <__inserial+0x39>
    38fc:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    3900:	1b050106 	blne	143d20 <__ccfg+0x123d78>
    3904:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    3908:	0305206b 	movweq	r2, #20587	; 0x506b
    390c:	7cb30306 	ldcvc	3, cr0, [r3], #24
    3910:	06050520 	streq	r0, [r5], -r0, lsr #10
    3914:	06030501 	streq	r0, [r3], -r1, lsl #10
    3918:	06060521 	streq	r0, [r6], -r1, lsr #10
    391c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3920:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3924:	01061305 	tsteq	r6, r5, lsl #6
    3928:	20060f05 	andcs	r0, r6, r5, lsl #30
    392c:	13060505 	movwne	r0, #25861	; 0x6505
    3930:	03060905 	movweq	r0, #26885	; 0x6905
    3934:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    3938:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    393c:	0305200c 	movweq	r2, #20492	; 0x500c
    3940:	20052f06 	andcs	r2, r5, r6, lsl #30
    3944:	06050106 	streq	r0, [r5], -r6, lsl #2
    3948:	20200520 	eorcs	r0, r0, r0, lsr #10
    394c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3950:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3954:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
		    	    case 'd': scani (lword); break;
    3958:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    395c:	0a030601 	beq	c5168 <__ccfg+0xa51c0>
    3960:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    3964:	06090521 	streq	r0, [r9], -r1, lsr #10
    3968:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    396c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3970:	03010501 	movweq	r0, #5377	; 0x1501
		    	    case 'u': scanu (lword); break;
    3974:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3978:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    397c:	01061e05 	tsteq	r6, r5, lsl #28
    3980:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3984:	2f300604 	svccs	0x00300604
    3988:	01060605 	tsteq	r6, r5, lsl #12
    398c:	21060405 	tstcs	r6, r5, lsl #8
    3990:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    3994:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    3998:	0101000a 	tsteq	r1, sl
    399c:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    39a0:	00224c02 	eoreq	r4, r2, r2, lsl #24
    39a4:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    39a8:	13020501 	movwne	r0, #9473	; 0x2501
    39ac:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    39b0:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    39b4:	20207a03 	eorcs	r7, r0, r3, lsl #20
    39b8:	20420205 	subcs	r0, r2, r5, lsl #4
		    	    case 'x': scanx (lword); break;
    39bc:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    39c0:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
			if ((c = *buf++) == '\0')
    39c4:	4a580601 	bmi	16051d0 <__ccfg+0x15e5228>
    39c8:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
			sap = va_arg (ap, char*);
    39cc:	01060e05 	tsteq	r6, r5, lsl #28
			nc++;
    39d0:	2f060205 	svccs	0x00060205
			break;
    39d4:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
			while (isspace (*buf)) buf++;
    39d8:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    39dc:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    39e0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
						*sap++ = *buf++;
    39e4:	03052e05 	movweq	r2, #24069	; 0x5e05
    39e8:	06052206 	streq	r2, [r5], -r6, lsl #4
			while (isspace (*buf)) buf++;
    39ec:	0a050106 	beq	143e0c <__ccfg+0x123e64>
    39f0:	0301054e 	movweq	r0, #5454	; 0x154e
    39f4:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
		return 0;
    39f8:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    39fc:	0117033d 	tsteq	r7, sp, lsr r3
		    case 'x': scanx (word); break;
    3a00:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3a04:	2e3c012e 	rsfcsep	f0, f4, #0.5
		    	    case 'x': scanx (lword); break;
    3a08:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3a0c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3a10:	0b054a17 	bleq	156274 <__ccfg+0x1362cc>
    3a14:	58050520 	stmdapl	r5, {r5, r8, sl}
    3a18:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    3a1c:	01060605 	tsteq	r6, r5, lsl #12
    3a20:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    3a24:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3a28:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    3a2c:	052f0602 	streq	r0, [pc, #-1538]!	; 3432 <__pi_vfparse+0x32>
    3a30:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3a34:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3a38:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3a3c:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3a40:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3a44:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2b37 <rf_off+0x3b>
    3a48:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    3a4c:	01060905 	tsteq	r6, r5, lsl #18
    3a50:	01000c02 	tsteq	r0, r2, lsl #24
    3a54:	00440501 	subeq	r0, r4, r1, lsl #10
    3a58:	00000205 	andeq	r0, r0, r5, lsl #4
    3a5c:	87030000 	strhi	r0, [r3, -r0]
    3a60:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3a64:	06440516 			; <UNDEFINED> instruction: 0x06440516
    3a68:	0205200e 	andeq	r2, r5, #14
    3a6c:	1a052606 	bne	14d28c <__ccfg+0x12d2e4>
    3a70:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    3a74:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3a78:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3a7c:	0605054a 	streq	r0, [r5], -sl, asr #10
    3a80:	06030501 	streq	r0, [r3], -r1, lsl #10
    3a84:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3a88:	03050106 	movweq	r0, #20742	; 0x5106
    3a8c:	16056706 	strne	r6, [r5], -r6, lsl #14
    3a90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3a94:	01055b06 	tsteq	r5, r6, lsl #22
    3a98:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3a9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3aa0:	0205004b 	andeq	r0, r5, #75	; 0x4b
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	01069903 	tsteq	r6, r3, lsl #18
    3aac:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    3ab0:	03064b05 	movweq	r4, #27397	; 0x6b05
    3ab4:	1a05017a 	bne	1440a4 <__ccfg+0x1240fc>
    3ab8:	034b0526 	movteq	r0, #46374	; 0xb526
    3abc:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    3ac0:	4a090306 	bmi	2446e0 <__ccfg+0x224738>
    3ac4:	01060505 	tsteq	r6, r5, lsl #10
    3ac8:	2f060305 	svccs	0x00060305
    3acc:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3ad0:	06030501 	streq	r0, [r3], -r1, lsl #10
    3ad4:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3ad8:	06020501 	streq	r0, [r2], -r1, lsl #10
    3adc:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    3ae0:	00020213 	andeq	r0, r2, r3, lsl r2
    3ae4:	31050101 	tstcc	r5, r1, lsl #2
    3ae8:	00020500 	andeq	r0, r2, r0, lsl #10
    3aec:	03000000 	movweq	r0, #0
    3af0:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    3af4:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    3af8:	03050106 	movweq	r0, #20742	; 0x5106
    3afc:	01052106 	tsteq	r5, r6, lsl #2
    3b00:	01023d06 	tsteq	r2, r6, lsl #26
    3b04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3b08:	02050048 	andeq	r0, r5, #72	; 0x48
    3b0c:	00002308 	andeq	r2, r0, r8, lsl #6
    3b10:	0106d103 	tsteq	r6, r3, lsl #2
    3b14:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3b18:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    3b1c:	01240602 			; <UNDEFINED> instruction: 0x01240602
    3b20:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3b24:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3b28:	4a4a0620 	bmi	12853b0 <__ccfg+0x1265408>
    3b2c:	06010513 			; <UNDEFINED> instruction: 0x06010513
    3b30:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3b34:	01000602 	tsteq	r0, r2, lsl #12
    3b38:	00460501 	subeq	r0, r6, r1, lsl #10
    3b3c:	23340205 	teqcs	r4, #1342177280	; 0x50000000
    3b40:	b2030000 	andlt	r0, r3, #0
    3b44:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3b48:	06460517 			; <UNDEFINED> instruction: 0x06460517
    3b4c:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    3b50:	2f060305 	svccs	0x00060305
    3b54:	01060605 	tsteq	r6, r5, lsl #12
    3b58:	30060305 	andcc	r0, r6, r5, lsl #6
    3b5c:	01060605 	tsteq	r6, r5, lsl #12
    3b60:	2f060405 	svccs	0x00060405
    3b64:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3b68:	06040501 	streq	r0, [r4], -r1, lsl #10
    3b6c:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    3b70:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3b74:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3b78:	01060c05 	tsteq	r6, r5, lsl #24
    3b7c:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3b80:	06030520 	streq	r0, [r3], -r0, lsr #10
    3b84:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3b88:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3b8c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3b90:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3b94:	014c0602 	cmpeq	ip, r2, lsl #12
    3b98:	4a062e06 	bmi	18f3b8 <__ccfg+0x16f410>
    3b9c:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    3ba0:	01050106 	tsteq	r5, r6, lsl #2
    3ba4:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    3ba8:	71030b05 	tstvc	r3, r5, lsl #22
    3bac:	000b023c 	andeq	r0, fp, ip, lsr r2
    3bb0:	3d050101 	stfccs	f0, [r5, #-4]
    3bb4:	00020500 	andeq	r0, r2, r0, lsl #10
    3bb8:	03000000 	movweq	r0, #0
    3bbc:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    3bc0:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3bc4:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3bc8:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3bcc:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3bd0:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    3bd4:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    3bd8:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    3bdc:	43052e22 	movwmi	r2, #24098	; 0x5e22
    3be0:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    3be4:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    3be8:	01010005 	tsteq	r1, r5
    3bec:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3bf0:	00000002 	andeq	r0, r0, r2
    3bf4:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    3bf8:	16020501 	strne	r0, [r2], -r1, lsl #10
    3bfc:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3c00:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3c04:	4a4a0620 	bmi	128548c <__ccfg+0x12654e4>
    3c08:	06220513 			; <UNDEFINED> instruction: 0x06220513
    3c0c:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    3c10:	01000502 	tsteq	r0, r2, lsl #10
    3c14:	00400501 	subeq	r0, r0, r1, lsl #10
    3c18:	00000205 	andeq	r0, r0, r5, lsl #4
    3c1c:	ea030000 	b	c3c24 <__ccfg+0xa3c7c>
    3c20:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3c24:	40051416 	andmi	r1, r5, r6, lsl r4
    3c28:	017a0306 	cmneq	sl, r6, lsl #6
    3c2c:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3c30:	7a034005 	bvc	d3c4c <__ccfg+0xb3ca4>
    3c34:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3c38:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3c3c:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3c40:	01061105 	tsteq	r6, r5, lsl #2
    3c44:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3c48:	02051d11 	andeq	r1, r5, #1088	; 0x440
    3c4c:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3c50:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3c54:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3c58:	01060905 	tsteq	r6, r5, lsl #18
    3c5c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3c60:	01010002 	tsteq	r1, r2
    3c64:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3c68:	00000002 	andeq	r0, r0, r2
    3c6c:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    3c70:	16020501 	strne	r0, [r2], -r1, lsl #10
    3c74:	01000302 	tsteq	r0, r2, lsl #6
    3c78:	00450501 	subeq	r0, r5, r1, lsl #10
    3c7c:	23940205 	orrscs	r0, r4, #1342177280	; 0x50000000
    3c80:	85030000 	strhi	r0, [r3, #-0]
    3c84:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3c88:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    3c8c:	017a0306 	cmneq	sl, r6, lsl #6
    3c90:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3c94:	31060305 	tstcc	r6, r5, lsl #6
    3c98:	01060605 	tsteq	r6, r5, lsl #12
    3c9c:	2f060405 	svccs	0x00060405
    3ca0:	2f060305 	svccs	0x00060305
    3ca4:	06012e06 	streq	r2, [r1], -r6, lsl #28
    3ca8:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    3cac:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    3cb0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3cb4:	0a052e06 	beq	14f4d4 <__ccfg+0x12f52c>
    3cb8:	27010535 	smladxcs	r1, r5, r5, r0
    3cbc:	03060405 	movweq	r0, #25605	; 0x6405
    3cc0:	20052073 	andcs	r2, r5, r3, ror r0
    3cc4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3cc8:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    3ccc:	30060405 	andcc	r0, r6, r5, lsl #8
    3cd0:	01061d05 	tsteq	r6, r5, lsl #26
    3cd4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    3cd8:	060b052f 	streq	r0, [fp], -pc, lsr #10
    3cdc:	06020501 	streq	r0, [r2], -r1, lsl #10
    3ce0:	060b0541 	streq	r0, [fp], -r1, asr #10
    3ce4:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3ce8:	2f060305 	svccs	0x00060305
    3cec:	01060a05 	tsteq	r6, r5, lsl #20
    3cf0:	01000902 	tsteq	r0, r2, lsl #18
    3cf4:	00480501 	subeq	r0, r8, r1, lsl #10
    3cf8:	23fc0205 	mvnscs	r0, #1342177280	; 0x50000000
    3cfc:	86030000 	strhi	r0, [r3], -r0
    3d00:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3d04:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3d08:	48050106 	stmdami	r5, {r1, r2, r8}
    3d0c:	20207803 	eorcs	r7, r0, r3, lsl #16
    3d10:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3d14:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3d18:	06030520 	streq	r0, [r3], -r0, lsr #10
    3d1c:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3d20:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3d24:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3d28:	052f0602 	streq	r0, [pc, #-1538]!	; 372e <vscan+0xae>
    3d2c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3d30:	11052221 	tstne	r5, r1, lsr #4
    3d34:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3d38:	06210530 			; <UNDEFINED> instruction: 0x06210530
    3d3c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3d40:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3d44:	01060505 	tsteq	r6, r5, lsl #10
    3d48:	21060305 	tstcs	r6, r5, lsl #6
    3d4c:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3d50:	13060105 	movwne	r0, #24837	; 0x6105
    3d54:	01000b02 	tsteq	r0, r2, lsl #22
    3d58:	00440501 	subeq	r0, r4, r1, lsl #10
    3d5c:	244c0205 	strbcs	r0, [ip], #-517	; 0xfffffdfb
    3d60:	a0030000 	andge	r0, r3, r0
    3d64:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3d68:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    3d6c:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    3d70:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3d74:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3d78:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    3d7c:	03020520 	movweq	r0, #9504	; 0x2520
    3d80:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3d84:	0603054a 	streq	r0, [r3], -sl, asr #10
    3d88:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3d8c:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    3d90:	0f054706 	svceq	0x00054706
    3d94:	06050106 	streq	r0, [r5], -r6, lsl #2
    3d98:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    3d9c:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3da0:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    3da4:	0a050106 	beq	1441c4 <__ccfg+0x12421c>
    3da8:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    3dac:	200d0301 	andcs	r0, sp, r1, lsl #6
    3db0:	03060305 	movweq	r0, #25349	; 0x6305
    3db4:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    3db8:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    3dbc:	06050106 	streq	r0, [r5], -r6, lsl #2
    3dc0:	06020574 			; <UNDEFINED> instruction: 0x06020574
    3dc4:	06050542 	streq	r0, [r5], -r2, asr #10
    3dc8:	06020501 	streq	r0, [r2], -r1, lsl #10
    3dcc:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    3dd0:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    3dd4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    3dd8:	02052006 	andeq	r2, r5, #6
    3ddc:	0b052306 	bleq	14c9fc <__ccfg+0x12ca54>
    3de0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3de4:	0602054a 	streq	r0, [r2], -sl, asr #10
    3de8:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    3dec:	0a020106 	beq	8420c <__ccfg+0x64264>
    3df0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3df4:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3df8:	000024e8 	andeq	r2, r0, r8, ror #9
    3dfc:	0109d103 	tsteq	r9, r3, lsl #2
    3e00:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3e04:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3e08:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3e0c:	20280205 	eorcs	r0, r8, r5, lsl #4
    3e10:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3e14:	01060505 	tsteq	r6, r5, lsl #10
    3e18:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3e1c:	01060405 	tsteq	r6, r5, lsl #8
    3e20:	21060205 	tstcs	r6, r5, lsl #4
    3e24:	01060505 	tsteq	r6, r5, lsl #10
    3e28:	33060205 	movwcc	r0, #25093	; 0x6205
    3e2c:	01060a05 	tsteq	r6, r5, lsl #20
    3e30:	2f060205 	svccs	0x00060205
    3e34:	1301012f 	movwne	r0, #4399	; 0x112f
    3e38:	01060905 	tsteq	r6, r5, lsl #18
    3e3c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3e40:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3e44:	01000902 	tsteq	r0, r2, lsl #18
    3e48:	00340501 	eorseq	r0, r4, r1, lsl #10
    3e4c:	25280205 	strcs	r0, [r8, #-517]!	; 0xfffffdfb
    3e50:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3e54:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3e58:	01141316 	tsteq	r4, r6, lsl r3
    3e5c:	03063405 	movweq	r3, #25605	; 0x6405
    3e60:	02052079 	andeq	r2, r5, #121	; 0x79
    3e64:	4a062027 	bmi	18bf08 <__ccfg+0x16bf60>
    3e68:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    3e6c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e70:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3e74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e78:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3e7c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e80:	0a052306 	beq	14caa0 <__ccfg+0x12caf8>
    3e84:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3e88:	21010530 	tstcs	r1, r0, lsr r5
    3e8c:	01000702 	tsteq	r0, r2, lsl #14
    3e90:	00350501 	eorseq	r0, r5, r1, lsl #10
    3e94:	255c0205 	ldrbcs	r0, [ip, #-517]	; 0xfffffdfb
    3e98:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    3e9c:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3ea0:	06350516 			; <UNDEFINED> instruction: 0x06350516
    3ea4:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    3ea8:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    3eac:	01300602 	teqeq	r0, r2, lsl #12
    3eb0:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    3eb4:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    3eb8:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    3ebc:	06022c02 	streq	r2, [r2], -r2, lsl #24
    3ec0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3ec4:	02050032 	andeq	r0, r5, #50	; 0x32
    3ec8:	00000000 	andeq	r0, r0, r0
    3ecc:	010a8403 	tsteq	sl, r3, lsl #8
    3ed0:	01160205 	tsteq	r6, r5, lsl #4
    3ed4:	1c063205 	sfmne	f3, 4, [r6], {5}
    3ed8:	20240205 	eorcs	r0, r4, r5, lsl #4
    3edc:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3ee0:	03060a05 	movweq	r0, #27141	; 0x6a05
    3ee4:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    3ee8:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    3eec:	06020520 	streq	r0, [r2], -r0, lsr #10
    3ef0:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    3ef4:	03051413 	movweq	r1, #21523	; 0x5413
    3ef8:	06050513 			; <UNDEFINED> instruction: 0x06050513
    3efc:	06030501 	streq	r0, [r3], -r1, lsl #10
    3f00:	06060521 	streq	r0, [r6], -r1, lsr #10
    3f04:	06030501 	streq	r0, [r3], -r1, lsl #10
    3f08:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3f0c:	01061305 	tsteq	r6, r5, lsl #6
    3f10:	20060f05 	andcs	r0, r6, r5, lsl #30
    3f14:	13060505 	movwne	r0, #25861	; 0x6505
    3f18:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    3f1c:	08022008 	stmdaeq	r2, {r3, sp}
    3f20:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3f24:	02050028 	andeq	r0, r5, #40	; 0x28
    3f28:	00002598 	muleq	r0, r8, r5
    3f2c:	010a8c03 	tsteq	sl, r3, lsl #24
    3f30:	1a030105 	bne	c434c <__ccfg+0xa43a4>
    3f34:	00010201 	andeq	r0, r1, r1, lsl #4
    3f38:	01240101 			; <UNDEFINED> instruction: 0x01240101
    3f3c:	00030000 	andeq	r0, r3, r0
    3f40:	0000008a 	andeq	r0, r0, sl, lsl #1
    3f44:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3f48:	0101000d 	tsteq	r1, sp
    3f4c:	00000101 	andeq	r0, r0, r1, lsl #2
    3f50:	00000100 	andeq	r0, r0, r0, lsl #2
    3f54:	6f682f01 	svcvs	0x00682f01
    3f58:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3f5c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3f60:	442f6e65 	strtmi	r6, [pc], #-3685	; 3f68 <TrimAfterColdResetWakeupFromShutDown+0x6c>
    3f64:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3f68:	4f2f706f 	svcmi	0x002f706f
    3f6c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3f70:	502f5445 	eorpl	r5, pc, r5, asr #8
    3f74:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f78:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f7c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3f80:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3f84:	752f0058 	strvc	r0, [pc, #-88]!	; 3f34 <TrimAfterColdResetWakeupFromShutDown+0x38>
    3f88:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3dc4 <NOROM_RFCRTrim+0x1c>
    3f8c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3f90:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3f94:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3f98:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3f9c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3fa0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3fa4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3fa8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3fac:	00006564 	andeq	r6, r0, r4, ror #10
    3fb0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3fb4:	5f707574 	svcpl	0x00707574
    3fb8:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    3fbc:	00010063 	andeq	r0, r1, r3, rrx
    3fc0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3fc4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3fc8:	00020068 	andeq	r0, r2, r8, rrx
    3fcc:	01050000 	mrseq	r0, (UNDEF: 5)
    3fd0:	9a020500 	bls	853d8 <__ccfg+0x65430>
    3fd4:	03000025 	movweq	r0, #37	; 0x25
    3fd8:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    3fdc:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3fe0:	0102100a 	tsteq	r2, sl
    3fe4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3fe8:	02050001 	andeq	r0, r5, #1
    3fec:	0000259c 	muleq	r0, ip, r5
    3ff0:	01029603 	tsteq	r2, r3, lsl #12
    3ff4:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3ff8:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3ffc:	01010001 	tsteq	r1, r1
    4000:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    4004:	00259e02 	eoreq	r9, r5, r2, lsl #28
    4008:	02a80300 	adceq	r0, r8, #0, 6
    400c:	16050501 	strne	r0, [r5], -r1, lsl #10
    4010:	100a0514 	andne	r0, sl, r4, lsl r5
    4014:	01000102 	tsteq	r0, r2, lsl #2
    4018:	00010501 	andeq	r0, r1, r1, lsl #10
    401c:	25a00205 	strcs	r0, [r0, #517]!	; 0x205
    4020:	d2030000 	andle	r0, r3, #0
    4024:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4028:	01051713 	tsteq	r5, r3, lsl r7
    402c:	017a0306 	cmneq	sl, r6, lsl #6
    4030:	06260505 	strteq	r0, [r6], -r5, lsl #10
    4034:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    4038:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    403c:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    4040:	06050520 	streq	r0, [r5], -r0, lsr #10
    4044:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    4048:	900d0304 	andls	r0, sp, r4, lsl #6
    404c:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    4050:	052f0601 	streq	r0, [pc, #-1537]!	; 3a57 <NOROM_AONBatMonTemperatureGetDegC+0x1f>
    4054:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    4058:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    405c:	00100201 	andseq	r0, r0, r1, lsl #4
    4060:	01890101 	orreq	r0, r9, r1, lsl #2
    4064:	00030000 	andeq	r0, r3, r0
    4068:	00000183 	andeq	r0, r0, r3, lsl #3
    406c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4070:	0101000d 	tsteq	r1, sp
    4074:	00000101 	andeq	r0, r0, r1, lsl #2
    4078:	00000100 	andeq	r0, r0, r0, lsl #2
    407c:	73752f01 	cmnvc	r5, #1, 30
    4080:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4084:	63672f62 	cmnvs	r7, #392	; 0x188
    4088:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    408c:	6f6e2d6d 	svcvs	0x006e2d6d
    4090:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4094:	2f696261 	svccs	0x00696261
    4098:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    409c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    40a0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    40a4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    40a8:	2f656d6f 	svccs	0x00656d6f
    40ac:	70657473 	rsbvc	r7, r5, r3, ror r4
    40b0:	2f6e6568 	svccs	0x006e6568
    40b4:	6b736544 	blvs	1cdd5cc <__ccfg+0x1cbd624>
    40b8:	2f706f74 	svccs	0x00706f74
    40bc:	4f534c4f 	svcmi	0x00534c4f
    40c0:	2f54454e 	svccs	0x0054454e
    40c4:	4f434950 	svcmi	0x00434950
    40c8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    40cc:	2f534f63 	svccs	0x00534f63
    40d0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    40d4:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    40d8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    40dc:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    40e0:	6e692f45 	cdpvs	15, 6, cr2, cr9, cr5, {2}
    40e4:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    40e8:	2f656d6f 	svccs	0x00656d6f
    40ec:	70657473 	rsbvc	r7, r5, r3, ror r4
    40f0:	2f6e6568 	svccs	0x006e6568
    40f4:	6b736544 	blvs	1cdd60c <__ccfg+0x1cbd664>
    40f8:	2f706f74 	svccs	0x00706f74
    40fc:	4f534c4f 	svcmi	0x00534c4f
    4100:	2f54454e 	svccs	0x0054454e
    4104:	4f434950 	svcmi	0x00434950
    4108:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    410c:	2f534f63 	svccs	0x00534f63
    4110:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4114:	2f005858 	svccs	0x00005858
    4118:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    411c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4120:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4124:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4128:	706f746b 	rsbvc	r7, pc, fp, ror #8
    412c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4130:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4134:	4349502f 	movtmi	r5, #36911	; 0x902f
    4138:	502f534f 	eorpl	r5, pc, pc, asr #6
    413c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4140:	6f682f00 	svcvs	0x00682f00
    4144:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4148:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    414c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4154 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x64>
    4150:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4154:	4f2f706f 	svcmi	0x002f706f
    4158:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    415c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4160:	534f4349 	movtpl	r4, #62281	; 0xf349
    4164:	6369502f 	cmnvs	r9, #47	; 0x2f
    4168:	6b2f534f 	blvs	bd8eac <__ccfg+0xbb8f04>
    416c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4170:	7300006c 	movwvc	r0, #108	; 0x6c
    4174:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4178:	00682e74 	rsbeq	r2, r8, r4, ror lr
    417c:	68000001 	stmdavs	r0, {r0}
    4180:	63635f77 	cmnvs	r3, #476	; 0x1dc
    4184:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    4188:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    418c:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    4190:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    4194:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4198:	72610000 	rsbvc	r0, r1, #0
    419c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    41a0:	00000300 	andeq	r0, r0, r0, lsl #6
    41a4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    41a8:	0300682e 	movweq	r6, #2094	; 0x82e
    41ac:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    41b0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    41b4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    41b8:	00000300 	andeq	r0, r0, r0, lsl #6
    41bc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    41c0:	5f736e6f 	svcpl	0x00736e6f
    41c4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    41c8:	00030068 	andeq	r0, r3, r8, rrx
    41cc:	73797300 	cmnvc	r9, #0, 6
    41d0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    41d4:	00000400 	andeq	r0, r0, r0, lsl #8
    41d8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    41dc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    41e0:	00000500 	andeq	r0, r0, r0, lsl #10
    41e4:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    41e8:	0300632e 	movweq	r6, #814	; 0x32e
    41ec:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    41f0:	03000002 	movweq	r0, #2
    41f4:	0001c500 	andeq	ip, r1, r0, lsl #10
    41f8:	fb010200 	blx	44a02 <__ccfg+0x24a5a>
    41fc:	01000d0e 	tsteq	r0, lr, lsl #26
    4200:	00010101 	andeq	r0, r1, r1, lsl #2
    4204:	00010000 	andeq	r0, r1, r0
    4208:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    420c:	2f656d6f 	svccs	0x00656d6f
    4210:	70657473 	rsbvc	r7, r5, r3, ror r4
    4214:	2f6e6568 	svccs	0x006e6568
    4218:	6b736544 	blvs	1cdd730 <__ccfg+0x1cbd788>
    421c:	2f706f74 	svccs	0x00706f74
    4220:	4f534c4f 	svcmi	0x00534c4f
    4224:	2f54454e 	svccs	0x0054454e
    4228:	4f434950 	svcmi	0x00434950
    422c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4230:	2f534f63 	svccs	0x00534f63
    4234:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4238:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    423c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    4240:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    4244:	2f656d6f 	svccs	0x00656d6f
    4248:	70657473 	rsbvc	r7, r5, r3, ror r4
    424c:	2f6e6568 	svccs	0x006e6568
    4250:	6b736544 	blvs	1cdd768 <__ccfg+0x1cbd7c0>
    4254:	2f706f74 	svccs	0x00706f74
    4258:	4f534c4f 	svcmi	0x00534c4f
    425c:	2f54454e 	svccs	0x0054454e
    4260:	4f434950 	svcmi	0x00434950
    4264:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4268:	2f534f63 	svccs	0x00534f63
    426c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4270:	2f005858 	svccs	0x00005858
    4274:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4278:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    427c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4280:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4284:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4288:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    428c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4290:	4349502f 	movtmi	r5, #36911	; 0x902f
    4294:	502f534f 	eorpl	r5, pc, pc, asr #6
    4298:	534f6369 	movtpl	r6, #62313	; 0xf369
    429c:	3143432f 	cmpcc	r3, pc, lsr #6
    42a0:	2f585833 	svccs	0x00585833
    42a4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    42a8:	41575858 	cmpmi	r7, r8, asr r8
    42ac:	642f4552 	strtvs	r4, [pc], #-1362	; 42b4 <NOROM_SetupGetTrimForAdcShModeEn+0x8>
    42b0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    42b4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    42b8:	73752f00 	cmnvc	r5, #0, 30
    42bc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    42c0:	63672f62 	cmnvs	r7, #392	; 0x188
    42c4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    42c8:	6f6e2d6d 	svcvs	0x006e2d6d
    42cc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    42d0:	2f696261 	svccs	0x00696261
    42d4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    42d8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    42dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    42e0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    42e4:	2f656d6f 	svccs	0x00656d6f
    42e8:	70657473 	rsbvc	r7, r5, r3, ror r4
    42ec:	2f6e6568 	svccs	0x006e6568
    42f0:	6b736544 	blvs	1cdd808 <__ccfg+0x1cbd860>
    42f4:	2f706f74 	svccs	0x00706f74
    42f8:	4f534c4f 	svcmi	0x00534c4f
    42fc:	2f54454e 	svccs	0x0054454e
    4300:	4f434950 	svcmi	0x00434950
    4304:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4308:	00534f63 	subseq	r4, r3, r3, ror #30
    430c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4258 <NOROM_SetupGetTrimForAmpcompCtrl+0x24>
    4310:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4314:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4318:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    431c:	6f746b73 	svcvs	0x00746b73
    4320:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4324:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4328:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    432c:	2f534f43 	svccs	0x00534f43
    4330:	4f636950 	svcmi	0x00636950
    4334:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    4338:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    433c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4340:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    4344:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    4348:	0100632e 	tsteq	r0, lr, lsr #6
    434c:	6d630000 	stclvs	0, cr0, [r3, #-0]
    4350:	5f736973 	svcpl	0x00736973
    4354:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    4358:	00020068 	andeq	r0, r2, r8, rrx
    435c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4360:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4364:	73000003 	movwvc	r0, #3
    4368:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    436c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4370:	61000004 	tstvs	r0, r4
    4374:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4378:	00020068 	andeq	r0, r2, r8, rrx
    437c:	63616d00 	cmnvs	r1, #0, 26
    4380:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4384:	70000002 	andvc	r0, r0, r2
    4388:	5f736e69 	svcpl	0x00736e69
    438c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4390:	00020068 	andeq	r0, r2, r8, rrx
    4394:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4398:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    439c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    43a0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    43a4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    43a8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    43ac:	00050068 	andeq	r0, r5, r8, rrx
    43b0:	72656b00 	rsbvc	r6, r5, #0, 22
    43b4:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    43b8:	00060068 	andeq	r0, r6, r8, rrx
    43bc:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    43c0:	00020500 	andeq	r0, r2, r0, lsl #10
    43c4:	03000000 	movweq	r0, #0
    43c8:	1b05010e 	blne	144808 <__ccfg+0x124860>
    43cc:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    43d0:	02010601 	andeq	r0, r1, #1048576	; 0x100000
    43d4:	01010001 	tsteq	r1, r1
    43d8:	05003f05 	streq	r3, [r0, #-3845]	; 0xfffff0fb
    43dc:	00000002 	andeq	r0, r0, r2
    43e0:	01100300 	tsteq	r0, r0, lsl #6
    43e4:	13140205 	tstne	r4, #1342177280	; 0x50000000
    43e8:	3f051413 	svccc	0x00051413
    43ec:	017a0306 	cmneq	sl, r6, lsl #6
    43f0:	26050520 	strcs	r0, [r5], -r0, lsr #10
    43f4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    43f8:	01060605 	tsteq	r6, r5, lsl #12
    43fc:	4d060305 	stcmi	3, cr0, [r6, #-20]	; 0xffffffec
    4400:	c1030204 	tstgt	r3, r4, lsl #4
    4404:	01040100 	mrseq	r0, (UNDEF: 20)
    4408:	3d204003 	stccc	0, cr4, [r0, #-12]!
    440c:	0302044b 	movweq	r0, #9291	; 0x244b
    4410:	01040133 	tsteq	r4, r3, lsr r1
    4414:	05204e03 	streq	r4, [r0, #-3587]!	; 0xfffff1fd
    4418:	07053102 	streq	r3, [r5, -r2, lsl #2]
    441c:	03040106 	movweq	r0, #16646	; 0x4106
    4420:	8b030f05 	blhi	c803c <__ccfg+0xa8094>
    4424:	01042e01 	tsteq	r4, r1, lsl #28
    4428:	f5030705 			; <UNDEFINED> instruction: 0xf5030705
    442c:	0205207e 	andeq	r2, r5, #126	; 0x7e
    4430:	0b052106 	bleq	14c850 <__ccfg+0x12c8a8>
    4434:	13030513 	movwne	r0, #13587	; 0x3513
    4438:	29050304 	stmdbcs	r5, {r2, r8, r9}
    443c:	01018303 	tsteq	r1, r3, lsl #6
    4440:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4444:	060b0501 	streq	r0, [fp], -r1, lsl #10
    4448:	017ef803 	cmneq	lr, r3, lsl #16	; <UNPREDICTABLE>
    444c:	0f050304 	svceq	0x00050304
    4450:	20018803 	andcs	r8, r1, r3, lsl #16
    4454:	0b050104 	bleq	14486c <__ccfg+0x1248c4>
    4458:	207ef803 	rsbscs	pc, lr, r3, lsl #16
    445c:	33050304 	movwcc	r0, #21252	; 0x5304
    4460:	2e018803 	cdpcs	8, 0, cr8, cr1, cr3, {0}
    4464:	04204205 	strteq	r4, [r0], #-517	; 0xfffffdfb
    4468:	030b0501 	movweq	r0, #46337	; 0xb501
    446c:	052e7ef8 	streq	r7, [lr, #-3832]!	; 0xfffff108
    4470:	1f052e08 	svcne	0x00052e08
    4474:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    4478:	051e0205 	ldreq	r0, [lr, #-517]	; 0xfffffdfb
    447c:	3a052208 	bcc	14cca4 <__ccfg+0x12ccfc>
    4480:	0b051f06 	bleq	14c0a0 <__ccfg+0x12c0f8>
    4484:	06020501 	streq	r0, [r2], -r1, lsl #10
    4488:	23010511 	movwcs	r0, #5393	; 0x1511
    448c:	01000602 	tsteq	r0, r2, lsl #12
    4490:	00034101 	andeq	r4, r3, r1, lsl #2
    4494:	ae000300 	cdpge	3, 0, cr0, cr0, cr0, {0}
    4498:	02000001 	andeq	r0, r0, #1
    449c:	0d0efb01 	vstreq	d15, [lr, #-4]
    44a0:	01010100 	mrseq	r0, (UNDEF: 17)
    44a4:	00000001 	andeq	r0, r0, r1
    44a8:	01000001 	tsteq	r0, r1
    44ac:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 43f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x98>
    44b0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    44b4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    44b8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    44bc:	6f746b73 	svcvs	0x00746b73
    44c0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    44c4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    44c8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    44cc:	2f534f43 	svccs	0x00534f43
    44d0:	4f636950 	svcmi	0x00636950
    44d4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    44d8:	2f736269 	svccs	0x00736269
    44dc:	2f004f49 	svccs	0x00004f49
    44e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    44e4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    44e8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    44ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    44f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    44f4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    44f8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    44fc:	4349502f 	movtmi	r5, #36911	; 0x902f
    4500:	502f534f 	eorpl	r5, pc, pc, asr #6
    4504:	534f6369 	movtpl	r6, #62313	; 0xf369
    4508:	3143432f 	cmpcc	r3, pc, lsr #6
    450c:	2f585833 	svccs	0x00585833
    4510:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4514:	41575858 	cmpmi	r7, r8, asr r8
    4518:	642f4552 	strtvs	r4, [pc], #-1362	; 4520 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x24>
    451c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4520:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4524:	73752f00 	cmnvc	r5, #0, 30
    4528:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    452c:	63672f62 	cmnvs	r7, #392	; 0x188
    4530:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4534:	6f6e2d6d 	svcvs	0x006e2d6d
    4538:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    453c:	2f696261 	svccs	0x00696261
    4540:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4544:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4548:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    454c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4550:	2f656d6f 	svccs	0x00656d6f
    4554:	70657473 	rsbvc	r7, r5, r3, ror r4
    4558:	2f6e6568 	svccs	0x006e6568
    455c:	6b736544 	blvs	1cdda74 <__ccfg+0x1cbdacc>
    4560:	2f706f74 	svccs	0x00706f74
    4564:	4f534c4f 	svcmi	0x00534c4f
    4568:	2f54454e 	svccs	0x0054454e
    456c:	4f434950 	svcmi	0x00434950
    4570:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4574:	2f534f63 	svccs	0x00534f63
    4578:	33314343 	teqcc	r1, #201326593	; 0xc000001
    457c:	2f005858 	svccs	0x00005858
    4580:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4584:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4588:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    458c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4590:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4594:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4598:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    459c:	4349502f 	movtmi	r5, #36911	; 0x902f
    45a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    45a4:	534f6369 	movtpl	r6, #62313	; 0xf369
    45a8:	6f682f00 	svcvs	0x00682f00
    45ac:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    45b0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    45b4:	442f6e65 	strtmi	r6, [pc], #-3685	; 45bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc0>
    45b8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    45bc:	4f2f706f 	svcmi	0x002f706f
    45c0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    45c4:	502f5445 	eorpl	r5, pc, r5, asr #8
    45c8:	534f4349 	movtpl	r4, #62281	; 0xf349
    45cc:	6369502f 	cmnvs	r9, #47	; 0x2f
    45d0:	6b2f534f 	blvs	bd9314 <__ccfg+0xbb936c>
    45d4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    45d8:	6200006c 	andvs	r0, r0, #108	; 0x6c
    45dc:	6f747475 	svcvs	0x00747475
    45e0:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    45e4:	00000100 	andeq	r0, r0, r0, lsl #2
    45e8:	6f697067 	svcvs	0x00697067
    45ec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    45f0:	74730000 	ldrbtvc	r0, [r3], #-0
    45f4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    45f8:	0300682e 	movweq	r6, #2094	; 0x82e
    45fc:	72610000 	rsbvc	r0, r1, #0
    4600:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4604:	00000400 	andeq	r0, r0, r0, lsl #8
    4608:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    460c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4610:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4614:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4618:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    461c:	00000400 	andeq	r0, r0, r0, lsl #8
    4620:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4624:	5f736e6f 	svcpl	0x00736e6f
    4628:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    462c:	00040068 	andeq	r0, r4, r8, rrx
    4630:	73797300 	cmnvc	r9, #0, 6
    4634:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4638:	00000500 	andeq	r0, r0, r0, lsl #10
    463c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4640:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4644:	00000600 	andeq	r0, r0, r0, lsl #12
    4648:	00010500 	andeq	r0, r1, r0, lsl #10
    464c:	00000205 	andeq	r0, r0, r5, lsl #4
    4650:	1b030000 	blne	c4658 <__ccfg+0xa46b0>
    4654:	2e060101 	adfcss	f0, f6, f1
    4658:	6a060205 	bvs	184e74 <__ccfg+0x164ecc>
    465c:	01060e05 	tsteq	r6, r5, lsl #28
    4660:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4664:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    4668:	0f054002 	svceq	0x00054002
    466c:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    4670:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    4674:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4678:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    467c:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    4680:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    4684:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    4688:	03062002 	movweq	r2, #24578	; 0x6002
    468c:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    4690:	71030305 	tstvc	r3, r5, lsl #6
    4694:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4698:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    469c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    46a0:	07050104 	streq	r0, [r5, -r4, lsl #2]
    46a4:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    46a8:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    46ac:	0183030f 	orreq	r0, r3, pc, lsl #6
    46b0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    46b4:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    46b8:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    46bc:	01830333 	orreq	r0, r3, r3, lsr r3
    46c0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    46c4:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    46c8:	06040520 	streq	r0, [r4], -r0, lsr #10
    46cc:	06050530 			; <UNDEFINED> instruction: 0x06050530
    46d0:	06040501 	streq	r0, [r4], -r1, lsl #10
    46d4:	06030540 	streq	r0, [r3], -r0, asr #10
    46d8:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    46dc:	0306052f 	movweq	r0, #25903	; 0x652f
    46e0:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    46e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    46e8:	3c160306 	ldccc	3, cr0, [r6], {6}
    46ec:	01060705 	tsteq	r6, r5, lsl #14
    46f0:	29050204 	stmdbcs	r5, {r2, r9}
    46f4:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    46f8:	17050558 	smlsdne	r5, r8, r5, r0
    46fc:	01060f05 	tsteq	r6, r5, lsl #30
    4700:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4704:	207f9003 	rsbscs	r9, pc, r3
    4708:	0f050204 	svceq	0x00050204
    470c:	2000f003 	andcs	pc, r0, r3
    4710:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    4714:	03050501 	movweq	r0, #21761	; 0x5501
    4718:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    471c:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    4720:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4724:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    4728:	07055102 	streq	r5, [r5, -r2, lsl #2]
    472c:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    4730:	03062905 	movweq	r2, #26885	; 0x6905
    4734:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    4738:	0f051705 	svceq	0x00051705
    473c:	01040106 	tsteq	r4, r6, lsl #2
    4740:	9c030705 	stcls	7, cr0, [r3], {5}
    4744:	0204207f 	andeq	r2, r4, #127	; 0x7f
    4748:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    474c:	01042e00 	tsteq	r4, r0, lsl #28
    4750:	9c030705 	stcls	7, cr0, [r3], {5}
    4754:	0204207f 	andeq	r2, r4, #127	; 0x7f
    4758:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    475c:	01042000 	mrseq	r2, (UNDEF: 4)
    4760:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    4764:	0205207f 	andeq	r2, r5, #127	; 0x7f
    4768:	0e053106 	adfeqs	f3, f5, f6
    476c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4770:	0602052e 	streq	r0, [r2], -lr, lsr #10
    4774:	06030531 			; <UNDEFINED> instruction: 0x06030531
    4778:	06020501 	streq	r0, [r2], -r1, lsl #10
    477c:	06010522 	streq	r0, [r1], -r2, lsr #10
    4780:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    4784:	4c060105 	stfmis	f0, [r6], {5}
    4788:	01000c02 	tsteq	r0, r2, lsl #24
    478c:	00290501 	eoreq	r0, r9, r1, lsl #10
    4790:	00000205 	andeq	r0, r0, r5, lsl #4
    4794:	d7030000 	strle	r0, [r3, -r0]
    4798:	02050100 	andeq	r0, r5, #0, 2
    479c:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    47a0:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    47a4:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    47a8:	03052005 	movweq	r2, #20485	; 0x5005
    47ac:	01052106 	tsteq	r5, r6, lsl #2
    47b0:	03051a06 	movweq	r1, #23046	; 0x5a06
    47b4:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    47b8:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    47bc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    47c0:	03053c05 	movweq	r3, #23557	; 0x5c05
    47c4:	052f2f06 	streq	r2, [pc, #-3846]!	; 38c6 <vscan+0x246>
    47c8:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    47cc:	01052c03 	tsteq	r5, r3, lsl #24
    47d0:	0006023e 	andeq	r0, r6, lr, lsr r2
    47d4:	09360101 	ldmdbeq	r6!, {r0, r8}
    47d8:	00030000 	andeq	r0, r3, r0
    47dc:	000001d1 	ldrdeq	r0, [r0], -r1
    47e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    47e4:	0101000d 	tsteq	r1, sp
    47e8:	00000101 	andeq	r0, r0, r1, lsl #2
    47ec:	00000100 	andeq	r0, r0, r0, lsl #2
    47f0:	6f682f01 	svcvs	0x00682f01
    47f4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    47f8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    47fc:	442f6e65 	strtmi	r6, [pc], #-3685	; 4804 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b8>
    4800:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4804:	4f2f706f 	svcmi	0x002f706f
    4808:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    480c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4810:	534f4349 	movtpl	r4, #62281	; 0xf349
    4814:	6369502f 	cmnvs	r9, #47	; 0x2f
    4818:	502f534f 	eorpl	r5, pc, pc, asr #6
    481c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4820:	6f74532f 	svcvs	0x0074532f
    4824:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4828:	6f682f00 	svcvs	0x00682f00
    482c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4830:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4834:	442f6e65 	strtmi	r6, [pc], #-3685	; 483c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>
    4838:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    483c:	4f2f706f 	svcmi	0x002f706f
    4840:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4844:	502f5445 	eorpl	r5, pc, r5, asr #8
    4848:	534f4349 	movtpl	r4, #62281	; 0xf349
    484c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4850:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4854:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4858:	43432f58 	movtmi	r2, #16216	; 0x3f58
    485c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4860:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    4864:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4868:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    486c:	2f006269 	svccs	0x00006269
    4870:	2f727375 	svccs	0x00727375
    4874:	2f62696c 	svccs	0x0062696c
    4878:	2f636367 	svccs	0x00636367
    487c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4880:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4884:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4888:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    488c:	2f312e32 	svccs	0x00312e32
    4890:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4894:	00656475 	rsbeq	r6, r5, r5, ror r4
    4898:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 47e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x198>
    489c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    48a0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    48a4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    48a8:	6f746b73 	svcvs	0x00746b73
    48ac:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    48b0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    48b4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    48b8:	2f534f43 	svccs	0x00534f43
    48bc:	4f636950 	svcmi	0x00636950
    48c0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    48c4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    48c8:	6f682f00 	svcvs	0x00682f00
    48cc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    48d0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    48d4:	442f6e65 	strtmi	r6, [pc], #-3685	; 48dc <NOROM_SysCtrlResetSourceGet+0x10>
    48d8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    48dc:	4f2f706f 	svcmi	0x002f706f
    48e0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    48e4:	502f5445 	eorpl	r5, pc, r5, asr #8
    48e8:	534f4349 	movtpl	r4, #62281	; 0xf349
    48ec:	6369502f 	cmnvs	r9, #47	; 0x2f
    48f0:	2f00534f 	svccs	0x0000534f
    48f4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    48f8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    48fc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4900:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4904:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4908:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    490c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4910:	4349502f 	movtmi	r5, #36911	; 0x902f
    4914:	502f534f 	eorpl	r5, pc, pc, asr #6
    4918:	534f6369 	movtpl	r6, #62313	; 0xf369
    491c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4920:	006c656e 	rsbeq	r6, ip, lr, ror #10
    4924:	6f747300 	svcvs	0x00747300
    4928:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    492c:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    4930:	30387235 	eorscc	r7, r8, r5, lsr r2
    4934:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    4938:	00000100 	andeq	r0, r0, r0, lsl #2
    493c:	6f697067 	svcvs	0x00697067
    4940:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4944:	74730000 	ldrbtvc	r0, [r3], #-0
    4948:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    494c:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    4950:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 4798 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x14c>
    4954:	0100682e 	tsteq	r0, lr, lsr #16
    4958:	74730000 	ldrbtvc	r0, [r3], #-0
    495c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4960:	0300682e 	movweq	r6, #2094	; 0x82e
    4964:	72610000 	rsbvc	r0, r1, #0
    4968:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    496c:	00000400 	andeq	r0, r0, r0, lsl #8
    4970:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4974:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4978:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    497c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4980:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4984:	00000400 	andeq	r0, r0, r0, lsl #8
    4988:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    498c:	5f736e6f 	svcpl	0x00736e6f
    4990:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4994:	00040068 	andeq	r0, r4, r8, rrx
    4998:	73797300 	cmnvc	r9, #0, 6
    499c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    49a0:	00000500 	andeq	r0, r0, r0, lsl #10
    49a4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    49a8:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    49ac:	00000600 	andeq	r0, r0, r0, lsl #12
    49b0:	00190500 	andseq	r0, r9, r0, lsl #10
    49b4:	25ec0205 	strbcs	r0, [ip, #517]!	; 0x205
    49b8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    49bc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    49c0:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    49c4:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    49c8:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    49cc:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    49d0:	20028a03 	andcs	r8, r2, r3, lsl #20
    49d4:	19050104 	stmdbne	r5, {r2, r8}
    49d8:	2e7df103 	expcse	f7, f3
    49dc:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    49e0:	2002c503 	andcs	ip, r2, r3, lsl #10
    49e4:	d0030f05 	andle	r0, r3, r5, lsl #30
    49e8:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    49ec:	2000fa03 	andcs	pc, r0, r3, lsl #20
    49f0:	03050104 	movweq	r0, #20740	; 0x5104
    49f4:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    49f8:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    49fc:	8f03060f 	svchi	0x0003060f
    4a00:	01040101 	tsteq	r4, r1, lsl #2
    4a04:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    4a08:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    4a0c:	1f050521 	svcne	0x00050521
    4a10:	21060305 	tstcs	r6, r5, lsl #6
    4a14:	29050204 	stmdbcs	r5, {r2, r9}
    4a18:	01018903 	tsteq	r1, r3, lsl #18
    4a1c:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4a20:	03040501 	movweq	r0, #17665	; 0x4501
    4a24:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    4a28:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4a2c:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    4a30:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4a34:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4a38:	01041705 	tsteq	r4, r5, lsl #14
    4a3c:	03060205 	movweq	r0, #25093	; 0x6205
    4a40:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    4a44:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4a48:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4a4c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4a50:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    4a54:	29050204 	stmdbcs	r5, {r2, r9}
    4a58:	0102b603 	tsteq	r2, r3, lsl #12
    4a5c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4a60:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    4a64:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4a68:	207dc003 	rsbscs	ip, sp, r3
    4a6c:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    4a70:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    4a74:	20090301 	andcs	r0, r9, r1, lsl #6
    4a78:	01000702 	tsteq	r0, r2, lsl #14
    4a7c:	001f0501 	andseq	r0, pc, r1, lsl #10
    4a80:	26200205 	strtcs	r0, [r0], -r5, lsl #4
    4a84:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4a88:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4a8c:	010e0514 	tsteq	lr, r4, lsl r5
    4a90:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    4a94:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4a98:	01ff032d 	mvnseq	r0, sp, lsr #6
    4a9c:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    4aa0:	86030603 	strhi	r0, [r3], -r3, lsl #12
    4aa4:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    4aa8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4aac:	02042f06 	andeq	r2, r4, #6, 30
    4ab0:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    4ab4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4ab8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4abc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4ac0:	89030604 	stmdbhi	r3, {r2, r9, sl}
    4ac4:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    4ac8:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    4acc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4ad0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4ad4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4ad8:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    4adc:	0204207d 	andeq	r2, r4, #125	; 0x7d
    4ae0:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    4ae4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4ae8:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4aec:	017e8c03 	cmneq	lr, r3, lsl #24
    4af0:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4af4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4af8:	01fb032d 	mvnseq	r0, sp, lsr #6
    4afc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4b00:	8b030603 	blhi	c6314 <__ccfg+0xa636c>
    4b04:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4b08:	a6032905 	strge	r2, [r3], -r5, lsl #18
    4b0c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4b10:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4b14:	017dd603 	cmneq	sp, r3, lsl #12
    4b18:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4b1c:	2002aa03 	andcs	sl, r2, r3, lsl #20
    4b20:	03050104 	movweq	r0, #20740	; 0x5104
    4b24:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4b28:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    4b2c:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    4b30:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b34:	03010501 	movweq	r0, #5377	; 0x1501
    4b38:	05022009 	streq	r2, [r2, #-9]
    4b3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4b40:	0205001e 	andeq	r0, r5, #30
    4b44:	00002650 	andeq	r2, r0, r0, asr r6
    4b48:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4b4c:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    4b50:	cf032905 	svcgt	0x00032905
    4b54:	3d050103 	stfccs	f0, [r5, #-12]
    4b58:	17050514 	smladne	r5, r4, r5, r0
    4b5c:	01063805 	tsteq	r6, r5, lsl #16
    4b60:	1e050104 	adfnes	f0, f5, f4
    4b64:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4b68:	38050204 	stmdacc	r5, {r2, r9}
    4b6c:	2003d803 	andcs	sp, r3, r3, lsl #16
    4b70:	02050104 	andeq	r0, r5, #4, 2
    4b74:	7cab0306 	stcvc	3, cr0, [fp], #24
    4b78:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4b7c:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    4b80:	3d050103 	stfccs	f0, [r5, #-12]
    4b84:	17050514 	smladne	r5, r4, r5, r0
    4b88:	01063805 	tsteq	r6, r5, lsl #16
    4b8c:	01050104 	tsteq	r5, r4, lsl #2
    4b90:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    4b94:	01000402 	tsteq	r0, r2, lsl #8
    4b98:	00270501 	eoreq	r0, r7, r1, lsl #10
    4b9c:	26680205 	strbtcs	r0, [r8], -r5, lsl #4
    4ba0:	d7030000 	strle	r0, [r3, -r0]
    4ba4:	02050100 	andeq	r0, r5, #0, 2
    4ba8:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4bac:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    4bb0:	ba033805 	blt	d2bcc <__ccfg+0xb2c24>
    4bb4:	01042e03 	tsteq	r4, r3, lsl #28
    4bb8:	ca030905 	bgt	c6fd4 <__ccfg+0xa702c>
    4bbc:	0204207c 	andeq	r2, r4, #124	; 0x7c
    4bc0:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    4bc4:	01042e03 	tsteq	r4, r3, lsl #28
    4bc8:	03060805 	movweq	r0, #26629	; 0x6805
    4bcc:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    4bd0:	3c730302 	ldclcc	3, cr0, [r3], #-8
    4bd4:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4bd8:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    4bdc:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4be0:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4be4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4be8:	017cc003 	cmneq	ip, r3
    4bec:	38050204 	stmdacc	r5, {r2, r9}
    4bf0:	2003c003 	andcs	ip, r3, r3
    4bf4:	02050104 	andeq	r0, r5, #4, 2
    4bf8:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4bfc:	06052f20 	streq	r2, [r5], -r0, lsr #30
    4c00:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4c04:	02042f06 	andeq	r2, r4, #6, 30
    4c08:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    4c0c:	3d050103 	stfccs	f0, [r5, #-12]
    4c10:	17050514 	smladne	r5, r4, r5, r0
    4c14:	01063805 	tsteq	r6, r5, lsl #16
    4c18:	02050104 	andeq	r0, r5, #4, 2
    4c1c:	7cc30306 	stclvc	3, cr0, [r3], {6}
    4c20:	060f052e 	streq	r0, [pc], -lr, lsr #10
    4c24:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4c28:	03060305 	movweq	r0, #25349	; 0x6305
    4c2c:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    4c30:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4c34:	4b4c4b06 	blmi	1317854 <__ccfg+0x12f78ac>
    4c38:	01000702 	tsteq	r0, r2, lsl #14
    4c3c:	00160501 	andseq	r0, r6, r1, lsl #10
    4c40:	26bc0205 	ldrtcs	r0, [ip], r5, lsl #4
    4c44:	81030000 	mrshi	r0, (UNDEF: 3)
    4c48:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4c4c:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4c50:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4c54:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4c58:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4c5c:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    4c60:	01050106 	tsteq	r5, r6, lsl #2
    4c64:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4c68:	0302051b 	movweq	r0, #9499	; 0x251b
    4c6c:	01010166 	tsteq	r1, r6, ror #2
    4c70:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4c74:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4c78:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4c7c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4c80:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4c84:	03020501 	movweq	r0, #9473	; 0x2501
    4c88:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4c8c:	03380502 	teqeq	r8, #8388608	; 0x800000
    4c90:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    4c94:	06020501 	streq	r0, [r2], -r1, lsl #10
    4c98:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4c9c:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4ca0:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    4ca4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4ca8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4cac:	06020501 	streq	r0, [r2], -r1, lsl #10
    4cb0:	017ce303 	cmneq	ip, r3, lsl #6
    4cb4:	38050204 	stmdacc	r5, {r2, r9}
    4cb8:	20039d03 	andcs	r9, r3, r3, lsl #26
    4cbc:	02050104 	andeq	r0, r5, #4, 2
    4cc0:	7ce30306 	stclvc	3, cr0, [r3], #24
    4cc4:	03030520 	movweq	r0, #13600	; 0x3520
    4cc8:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    4ccc:	09020106 	stmdbeq	r2, {r1, r2, r8}
    4cd0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4cd4:	02050017 	andeq	r0, r5, #23
    4cd8:	000026fc 	strdeq	r2, [r0], -ip
    4cdc:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    4ce0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4ce4:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    4ce8:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    4cec:	06030520 	streq	r0, [r3], -r0, lsr #10
    4cf0:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    4cf4:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    4cf8:	3c130303 	ldccc	3, cr0, [r3], {3}
    4cfc:	01060905 	tsteq	r6, r5, lsl #18
    4d00:	2f060305 	svccs	0x00060305
    4d04:	01050101 	tsteq	r5, r1, lsl #2
    4d08:	03021406 	movweq	r1, #9222	; 0x2406
    4d0c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4d10:	02050011 	andeq	r0, r5, #17
    4d14:	00002720 	andeq	r2, r0, r0, lsr #14
    4d18:	01019203 	tsteq	r1, r3, lsl #4
    4d1c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4d20:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    4d24:	2f062402 	svccs	0x00062402
    4d28:	01060805 	tsteq	r6, r5, lsl #16
    4d2c:	0e030105 	adfeqs	f0, f3, f5
    4d30:	0308052e 	movweq	r0, #34094	; 0x852e
    4d34:	02052072 	andeq	r2, r5, #114	; 0x72
    4d38:	200d0306 	andcs	r0, sp, r6, lsl #6
    4d3c:	13060105 	movwne	r0, #24837	; 0x6105
    4d40:	01000302 	tsteq	r0, r2, lsl #6
    4d44:	00120501 	andseq	r0, r2, r1, lsl #10
    4d48:	27340205 	ldrcs	r0, [r4, -r5, lsl #4]!
    4d4c:	a7030000 	strge	r0, [r3, -r0]
    4d50:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4d54:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4d58:	20050501 	andcs	r0, r5, r1, lsl #10
    4d5c:	2f060305 	svccs	0x00060305
    4d60:	01060905 	tsteq	r6, r5, lsl #18
    4d64:	2f060305 	svccs	0x00060305
    4d68:	30060105 	andcc	r0, r6, r5, lsl #2
    4d6c:	01000302 	tsteq	r0, r2, lsl #6
    4d70:	002b0501 	eoreq	r0, fp, r1, lsl #10
    4d74:	00000205 	andeq	r0, r0, r5, lsl #4
    4d78:	af030000 	svcge	0x00030000
    4d7c:	20060101 	andcs	r0, r6, r1, lsl #2
    4d80:	30060205 	andcc	r0, r6, r5, lsl #4
    4d84:	01060505 	tsteq	r6, r5, lsl #10
    4d88:	31060205 	tstcc	r6, r5, lsl #4
    4d8c:	01060505 	tsteq	r6, r5, lsl #10
    4d90:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    4d94:	02052012 	andeq	r2, r5, #18
    4d98:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4d9c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4da0:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    4da4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4da8:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4dac:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4db0:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    4db4:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4db8:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    4dbc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4dc0:	aa030602 	bge	c65d0 <__ccfg+0xa6628>
    4dc4:	4b2f207d 	blmi	bccfc0 <__ccfg+0xbad018>
    4dc8:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4dcc:	31020520 	tstcc	r2, r0, lsr #10
    4dd0:	29050204 	stmdbcs	r5, {r2, r9}
    4dd4:	0102c703 	tsteq	r2, r3, lsl #14
    4dd8:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4ddc:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4de0:	01040106 	tsteq	r4, r6, lsl #2
    4de4:	03060205 	movweq	r0, #25093	; 0x6205
    4de8:	302e7db4 	strhtcc	r7, [lr], -r4
    4dec:	13060105 	movwne	r0, #24837	; 0x6105
    4df0:	03060305 	movweq	r0, #25349	; 0x6305
    4df4:	0a052e79 	beq	1507e0 <__ccfg+0x130838>
    4df8:	08050106 	stmdaeq	r5, {r1, r2, r8}
    4dfc:	030a052e 	movweq	r0, #42286	; 0xa52e
    4e00:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    4e04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4e08:	02050031 	andeq	r0, r5, #49	; 0x31
    4e0c:	00000000 	andeq	r0, r0, r0
    4e10:	0101ca03 	tsteq	r1, r3, lsl #20
    4e14:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4e18:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4e1c:	3105220c 	tstcc	r5, ip, lsl #4
    4e20:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    4e24:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4e28:	03053005 	movweq	r3, #20485	; 0x5005
    4e2c:	06053206 	streq	r3, [r5], -r6, lsl #4
    4e30:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4e34:	20060520 	andcs	r0, r6, r0, lsr #10
    4e38:	30060305 	andcc	r0, r6, r5, lsl #6
    4e3c:	01060605 	tsteq	r6, r5, lsl #12
    4e40:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4e44:	30320603 	eorscc	r0, r2, r3, lsl #12
    4e48:	0a030405 	beq	c5e64 <__ccfg+0xa5ebc>
    4e4c:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    4e50:	20090501 	andcs	r0, r9, r1, lsl #10
    4e54:	05201005 	streq	r1, [r0, #-5]!
    4e58:	04052009 	streq	r2, [r5], #-9
    4e5c:	11052206 	tstne	r5, r6, lsl #4
    4e60:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4e64:	201f0520 	andscs	r0, pc, r0, lsr #10
    4e68:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4e6c:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    4e70:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4e74:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4e78:	0b053106 	bleq	151298 <__ccfg+0x1312f0>
    4e7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4e80:	052f2f06 	streq	r2, [pc, #-3846]!	; 3f82 <TrimAfterColdResetWakeupFromShutDown+0x86>
    4e84:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4e88:	20310301 	eorscs	r0, r1, r1, lsl #6
    4e8c:	03060405 	movweq	r0, #25605	; 0x6405
    4e90:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    4e94:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4e98:	20250520 	eorcs	r0, r5, r0, lsr #10
    4e9c:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    4ea0:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    4ea4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4ea8:	0b052804 	bleq	14eec0 <__ccfg+0x12ef18>
    4eac:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    4eb0:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    4eb4:	03063805 	movweq	r3, #26629	; 0x6805
    4eb8:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    4ebc:	03040501 	movweq	r0, #17665	; 0x4501
    4ec0:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    4ec4:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    4ec8:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4ecc:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    4ed0:	3d050103 	stfccs	f0, [r5, #-12]
    4ed4:	17050514 	smladne	r5, r4, r5, r0
    4ed8:	01063805 	tsteq	r6, r5, lsl #16
    4edc:	02050104 	andeq	r0, r5, #4, 2
    4ee0:	7cb20306 	ldcvc	3, cr0, [r2], #24
    4ee4:	4b4b2f20 	blmi	12d0b6c <__ccfg+0x12b0bc4>
    4ee8:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    4eec:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    4ef0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4ef4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4ef8:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4efc:	06020501 	streq	r0, [r2], -r1, lsl #10
    4f00:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    4f04:	03060b05 	movweq	r0, #27397	; 0x6b05
    4f08:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    4f0c:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    4f10:	01061305 	tsteq	r6, r5, lsl #6
    4f14:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4f18:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4f1c:	06050520 	streq	r0, [r5], -r0, lsr #10
    4f20:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4f24:	06050501 	streq	r0, [r5], -r1, lsl #10
    4f28:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4f2c:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    4f30:	03060405 	movweq	r0, #25605	; 0x6405
    4f34:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4f38:	03010609 	movweq	r0, #5641	; 0x1609
    4f3c:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    4f40:	6b032106 	blvs	cd360 <__ccfg+0xad3b8>
    4f44:	0b035920 	bleq	db3cc <__ccfg+0xbb424>
    4f48:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4f4c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4f50:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4f54:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4f58:	ba030603 	blt	c676c <__ccfg+0xa67c4>
    4f5c:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    4f60:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4f64:	0100083b 	tsteq	r0, fp, lsr r8
    4f68:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4f6c:	00000205 	andeq	r0, r0, r5, lsl #4
    4f70:	a0030000 	andge	r0, r3, r0
    4f74:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4f78:	3b051414 	blcc	149fd0 <__ccfg+0x12a028>
    4f7c:	0c050e06 	stceq	14, cr0, [r5], {6}
    4f80:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    4f84:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4f88:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4f8c:	06030532 			; <UNDEFINED> instruction: 0x06030532
    4f90:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4f94:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4f98:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4f9c:	053f0603 	ldreq	r0, [pc, #-1539]!	; 49a1 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x5>
    4fa0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4fa4:	052f0603 	streq	r0, [pc, #-1539]!	; 49a9 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0xd>
    4fa8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4fac:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    4fb0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4fb4:	2f300603 	svccs	0x00300603
    4fb8:	01060905 	tsteq	r6, r5, lsl #18
    4fbc:	30060305 	andcc	r0, r6, r5, lsl #6
    4fc0:	01060c05 	tsteq	r6, r5, lsl #24
    4fc4:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4fc8:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4fcc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4fd0:	2f210604 	svccs	0x00210604
    4fd4:	03060105 	movweq	r0, #24837	; 0x6105
    4fd8:	03050122 	movweq	r0, #20770	; 0x5122
    4fdc:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    4fe0:	01061105 	tsteq	r6, r5, lsl #2
    4fe4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4fe8:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    4fec:	304a0624 	subcc	r0, sl, r4, lsr #12
    4ff0:	29050204 	stmdbcs	r5, {r2, r9}
    4ff4:	0101c803 	tsteq	r1, r3, lsl #16
    4ff8:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4ffc:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    5000:	01040106 	tsteq	r4, r6, lsl #2
    5004:	b3030305 	movwlt	r0, #13061	; 0x3305
    5008:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    500c:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    5010:	01042001 	tsteq	r4, r1
    5014:	03060305 	movweq	r0, #25349	; 0x6305
    5018:	2f2e7eb3 	svccs	0x002e7eb3
    501c:	01061905 	tsteq	r6, r5, lsl #18
    5020:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    5024:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    5028:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    502c:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    5030:	2308052e 	movwcs	r0, #34094	; 0x852e
    5034:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    5038:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    503c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    5040:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    5044:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    5048:	06380517 			; <UNDEFINED> instruction: 0x06380517
    504c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5050:	c1030602 	tstgt	r3, r2, lsl #12
    5054:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    5058:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    505c:	054b4006 	strbeq	r4, [fp, #-6]
    5060:	20730304 	rsbscs	r0, r3, r4, lsl #6
    5064:	01061305 	tsteq	r6, r5, lsl #6
    5068:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    506c:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    5070:	06040501 	streq	r0, [r4], -r1, lsl #10
    5074:	06080559 			; <UNDEFINED> instruction: 0x06080559
    5078:	030b0501 	movweq	r0, #46337	; 0xb501
    507c:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    5080:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5084:	02050012 	andeq	r0, r5, #18
    5088:	00000000 	andeq	r0, r0, r0
    508c:	0102da03 	tsteq	r2, r3, lsl #20
    5090:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    5094:	01010001 	tsteq	r1, r1
    5098:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    509c:	00000002 	andeq	r0, r0, r2
    50a0:	02df0300 	sbcseq	r0, pc, #0, 6
    50a4:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    50a8:	13060105 	movwne	r0, #24837	; 0x6105
    50ac:	01000202 	tsteq	r0, r2, lsl #4
    50b0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    50b4:	02050029 	andeq	r0, r5, #41	; 0x29
    50b8:	00000000 	andeq	r0, r0, r0
    50bc:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    50c0:	01060505 	tsteq	r6, r5, lsl #10
    50c4:	21060305 	tstcs	r6, r5, lsl #6
    50c8:	01060705 	tsteq	r6, r5, lsl #14
    50cc:	30060205 	andcc	r0, r6, r5, lsl #4
    50d0:	01060505 	tsteq	r6, r5, lsl #10
    50d4:	21060305 	tstcs	r6, r5, lsl #6
    50d8:	01060805 	tsteq	r6, r5, lsl #16
    50dc:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    50e0:	13060105 	movwne	r0, #24837	; 0x6105
    50e4:	01000302 	tsteq	r0, r2, lsl #6
    50e8:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    50ec:	02050017 	andeq	r0, r5, #23
    50f0:	00000000 	andeq	r0, r0, r0
    50f4:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    50f8:	17051402 	strne	r1, [r5, -r2, lsl #8]
    50fc:	02051006 	andeq	r1, r5, #6
    5100:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    5104:	13060105 	movwne	r0, #24837	; 0x6105
    5108:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    510c:	01010002 	tsteq	r1, r2
    5110:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    5114:	01250003 			; <UNDEFINED> instruction: 0x01250003
    5118:	01020000 	mrseq	r0, (UNDEF: 2)
    511c:	000d0efb 	strdeq	r0, [sp], -fp
    5120:	01010101 	tsteq	r1, r1, lsl #2
    5124:	01000000 	mrseq	r0, (UNDEF: 0)
    5128:	2f010000 	svccs	0x00010000
    512c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5130:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5134:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5138:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    513c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5140:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5144:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5148:	4349502f 	movtmi	r5, #36911	; 0x902f
    514c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5150:	534f6369 	movtpl	r6, #62313	; 0xf369
    5154:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5158:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    515c:	61697265 	cmnvs	r9, r5, ror #4
    5160:	752f006c 	strvc	r0, [pc, #-108]!	; 50fc <__aeabi_lmul+0x620>
    5164:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4fa0 <__aeabi_lmul+0x4c4>
    5168:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    516c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5170:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5174:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5178:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    517c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5180:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5184:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5188:	2f006564 	svccs	0x00006564
    518c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5190:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5194:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5198:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    519c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51a8:	4349502f 	movtmi	r5, #36911	; 0x902f
    51ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    51b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    51b4:	3143432f 	cmpcc	r3, pc, lsr #6
    51b8:	00585833 	subseq	r5, r8, r3, lsr r8
    51bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5108 <__aeabi_lmul+0x62c>
    51c0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    51c4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    51c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    51cc:	6f746b73 	svcvs	0x00746b73
    51d0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    51d4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    51d8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    51dc:	2f534f43 	svccs	0x00534f43
    51e0:	4f636950 	svcmi	0x00636950
    51e4:	73000053 	movwvc	r0, #83	; 0x53
    51e8:	6f5f7265 	svcvs	0x005f7265
    51ec:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
    51f0:	00000100 	andeq	r0, r0, r0, lsl #2
    51f4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    51f8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    51fc:	00000200 	andeq	r0, r0, r0, lsl #4
    5200:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5204:	0300682e 	movweq	r6, #2094	; 0x82e
    5208:	616d0000 	cmnvs	sp, r0
    520c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5210:	00000300 	andeq	r0, r0, r0, lsl #6
    5214:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    521c:	0300682e 	movweq	r6, #2094	; 0x82e
    5220:	75620000 	strbvc	r0, [r2, #-0]!
    5224:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    5228:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    522c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5230:	73000003 	movwvc	r0, #3
    5234:	6f697379 	svcvs	0x00697379
    5238:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    523c:	05000000 	streq	r0, [r0, #-0]
    5240:	02050026 	andeq	r0, r5, #38	; 0x26
    5244:	00002748 	andeq	r2, r0, r8, asr #14
    5248:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    524c:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    5250:	0d062605 	stceq	6, cr2, [r6, #-20]	; 0xffffffec
    5254:	250e0520 	strcs	r0, [lr, #-1312]	; 0xfffffae0
    5258:	051b2605 	ldreq	r2, [fp, #-1541]	; 0xfffff9fb
    525c:	0505250e 	streq	r2, [r5, #-1294]	; 0xfffffaf2
    5260:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5264:	0d033d22 	stceq	13, cr3, [r3, #-136]	; 0xffffff78
    5268:	03020501 	movweq	r0, #9473	; 0x2501
    526c:	05052e76 	streq	r2, [r5, #-3702]	; 0xfffff18a
    5270:	03050106 	movweq	r0, #20742	; 0x5106
    5274:	0a052f06 	beq	150e94 <__ccfg+0x130eec>
    5278:	08050106 	stmdaeq	r5, {r1, r2, r8}
    527c:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    5280:	06150524 	ldreq	r0, [r5], -r4, lsr #10
    5284:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    5288:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    528c:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    5290:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5294:	02052008 	andeq	r2, r5, #8
    5298:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    529c:	01060505 	tsteq	r6, r5, lsl #10
    52a0:	2f060305 	svccs	0x00060305
    52a4:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    52a8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    52ac:	03054a05 	movweq	r4, #23045	; 0x5a05
    52b0:	033e2206 	teqeq	lr, #1610612736	; 0x60000000
    52b4:	0205207a 	andeq	r2, r5, #122	; 0x7a
    52b8:	05580a03 	ldrbeq	r0, [r8, #-2563]	; 0xfffff5fd
    52bc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    52c0:	01010005 	tsteq	r1, r5
    52c4:	000001c4 	andeq	r0, r0, r4, asr #3
    52c8:	01240003 			; <UNDEFINED> instruction: 0x01240003
    52cc:	01020000 	mrseq	r0, (UNDEF: 2)
    52d0:	000d0efb 	strdeq	r0, [sp], -fp
    52d4:	01010101 	tsteq	r1, r1, lsl #2
    52d8:	01000000 	mrseq	r0, (UNDEF: 0)
    52dc:	2f010000 	svccs	0x00010000
    52e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    52e4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    52e8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    52ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    52f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    52f4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    52f8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    52fc:	4349502f 	movtmi	r5, #36911	; 0x902f
    5300:	502f534f 	eorpl	r5, pc, pc, asr #6
    5304:	534f6369 	movtpl	r6, #62313	; 0xf369
    5308:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    530c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5310:	61697265 	cmnvs	r9, r5, ror #4
    5314:	752f006c 	strvc	r0, [pc, #-108]!	; 52b0 <port_confs+0x4c>
    5318:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5154 <__aeabi_lmul+0x678>
    531c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5320:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5324:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5328:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    532c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5330:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5334:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5338:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    533c:	2f006564 	svccs	0x00006564
    5340:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5344:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5348:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    534c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5350:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5354:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5358:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    535c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5360:	502f534f 	eorpl	r5, pc, pc, asr #6
    5364:	534f6369 	movtpl	r6, #62313	; 0xf369
    5368:	3143432f 	cmpcc	r3, pc, lsr #6
    536c:	00585833 	subseq	r5, r8, r3, lsr r8
    5370:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 52bc <port_confs+0x58>
    5374:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5378:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    537c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5380:	6f746b73 	svcvs	0x00746b73
    5384:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5388:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    538c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5390:	2f534f43 	svccs	0x00534f43
    5394:	4f636950 	svcmi	0x00636950
    5398:	73000053 	movwvc	r0, #83	; 0x53
    539c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    53a0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    53a4:	73000001 	movwvc	r0, #1
    53a8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    53ac:	00682e74 	rsbeq	r2, r8, r4, ror lr
    53b0:	61000002 	tstvs	r0, r2
    53b4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    53b8:	00030068 	andeq	r0, r3, r8, rrx
    53bc:	63616d00 	cmnvs	r1, #0, 26
    53c0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    53c4:	70000003 	andvc	r0, r0, r3
    53c8:	5f736e69 	svcpl	0x00736e69
    53cc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    53d0:	00030068 	andeq	r0, r3, r8, rrx
    53d4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    53d8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    53dc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    53e0:	0300682e 	movweq	r6, #2094	; 0x82e
    53e4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    53e8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    53ec:	00040068 	andeq	r0, r4, r8, rrx
    53f0:	2a050000 	bcs	1453f8 <__ccfg+0x125450>
    53f4:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    53f8:	03000027 	movweq	r0, #39	; 0x27
    53fc:	0205010c 	andeq	r0, r5, #12, 2
    5400:	2a051416 	bcs	14a460 <__ccfg+0x12a4b8>
    5404:	017a0306 	cmneq	sl, r6, lsl #6
    5408:	34050520 	strcc	r0, [r5], #-1312	; 0xfffffae0
    540c:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    5410:	01061005 	tsteq	r6, r5
    5414:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5418:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    541c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5420:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    5424:	0b052106 	bleq	14d844 <__ccfg+0x12d89c>
    5428:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    542c:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    5430:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5434:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    5438:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    543c:	05054f02 	streq	r4, [r5, #-3842]	; 0xfffff0fe
    5440:	03050106 	movweq	r0, #20742	; 0x5106
    5444:	13052f06 	movwne	r2, #24326	; 0x5f06
    5448:	08050106 	stmdaeq	r5, {r1, r2, r8}
    544c:	06020520 	streq	r0, [r2], -r0, lsr #10
    5450:	06050524 	streq	r0, [r5], -r4, lsr #10
    5454:	06030501 	streq	r0, [r3], -r1, lsl #10
    5458:	06080521 	streq	r0, [r8], -r1, lsr #10
    545c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5460:	053d593e 	ldreq	r5, [sp, #-2366]!	; 0xfffff6c2
    5464:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5468:	052f0602 	streq	r0, [pc, #-1538]!	; 4e6e <__aeabi_lmul+0x392>
    546c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5470:	052f0603 	streq	r0, [pc, #-1539]!	; 4e75 <__aeabi_lmul+0x399>
    5474:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5478:	03052201 	movweq	r2, #20993	; 0x5201
    547c:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    5480:	01060a05 	tsteq	r6, r5, lsl #20
    5484:	024a6e03 	subeq	r6, sl, #3, 28	; 0x30
    5488:	01010007 	tsteq	r1, r7
    548c:	000001a1 	andeq	r0, r0, r1, lsr #3
    5490:	01400003 	cmpeq	r0, r3
    5494:	01020000 	mrseq	r0, (UNDEF: 2)
    5498:	000d0efb 	strdeq	r0, [sp], -fp
    549c:	01010101 	tsteq	r1, r1, lsl #2
    54a0:	01000000 	mrseq	r0, (UNDEF: 0)
    54a4:	2f010000 	svccs	0x00010000
    54a8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    54ac:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    54b0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    54b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    54b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    54bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    54c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    54c4:	4349502f 	movtmi	r5, #36911	; 0x902f
    54c8:	502f534f 	eorpl	r5, pc, pc, asr #6
    54cc:	534f6369 	movtpl	r6, #62313	; 0xf369
    54d0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    54d4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    54d8:	61697265 	cmnvs	r9, r5, ror #4
    54dc:	752f006c 	strvc	r0, [pc, #-108]!	; 5478 <patchGenfskRfe+0x7c>
    54e0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 531c <__pi_hex_enc_table+0x4b>
    54e4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    54e8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    54ec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    54f0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    54f4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    54f8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    54fc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5500:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5504:	2f006564 	svccs	0x00006564
    5508:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    550c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5510:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5514:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5518:	706f746b 	rsbvc	r7, pc, fp, ror #8
    551c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5520:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5524:	4349502f 	movtmi	r5, #36911	; 0x902f
    5528:	502f534f 	eorpl	r5, pc, pc, asr #6
    552c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5530:	3143432f 	cmpcc	r3, pc, lsr #6
    5534:	00585833 	subseq	r5, r8, r3, lsr r8
    5538:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5484 <patchGenfskRfe+0x88>
    553c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5540:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5544:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5548:	6f746b73 	svcvs	0x00746b73
    554c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5550:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5554:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5558:	2f534f43 	svccs	0x00534f43
    555c:	4f636950 	svcmi	0x00636950
    5560:	73000053 	movwvc	r0, #83	; 0x53
    5564:	6f5f7265 	svcvs	0x005f7265
    5568:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    556c:	00010063 	andeq	r0, r1, r3, rrx
    5570:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5574:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5578:	00020068 	andeq	r0, r2, r8, rrx
    557c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5580:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5584:	00020068 	andeq	r0, r2, r8, rrx
    5588:	63726100 	cmnvs	r2, #0, 2
    558c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5590:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5594:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5598:	00030068 	andeq	r0, r3, r8, rrx
    559c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    55a0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    55a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    55a8:	62000003 	andvs	r0, r0, #3
    55ac:	6f747475 	svcvs	0x00747475
    55b0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55b4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55b8:	00000300 	andeq	r0, r0, r0, lsl #6
    55bc:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    55c0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    55c4:	3c000004 	stccc	0, cr0, [r0], {4}
    55c8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    55cc:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    55d0:	0000003e 	andeq	r0, r0, lr, lsr r0
    55d4:	2c050000 	stccs	0, cr0, [r5], {-0}
    55d8:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    55dc:	03000028 	movweq	r0, #40	; 0x28
    55e0:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    55e4:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    55e8:	03062c05 	movweq	r2, #27653	; 0x6c05
    55ec:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    55f0:	0505260e 	streq	r2, [r5, #-1550]	; 0xfffff9f2
    55f4:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    55f8:	0a033d30 	beq	d4ac0 <__ccfg+0xb4b18>
    55fc:	03020501 	movweq	r0, #9473	; 0x2501
    5600:	0d052e79 	stceq	14, cr2, [r5, #-484]	; 0xfffffe1c
    5604:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    5608:	0522061e 	streq	r0, [r2, #-1566]!	; 0xfffff9e2
    560c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5610:	03052e05 	movweq	r2, #24069	; 0x5e05
    5614:	02053206 	andeq	r3, r5, #1610612736	; 0x60000000
    5618:	0606054e 	streq	r0, [r6], -lr, asr #10
    561c:	4a050501 	bmi	146a28 <__ccfg+0x126a80>
    5620:	21060305 	tstcs	r6, r5, lsl #6
    5624:	2402053d 	strcs	r0, [r2], #-1341	; 0xfffffac3
    5628:	13060105 	movwne	r0, #24837	; 0x6105
    562c:	01000902 	tsteq	r0, r2, lsl #18
    5630:	0001b201 	andeq	fp, r1, r1, lsl #4
    5634:	3f000300 	svccc	0x00000300
    5638:	02000001 	andeq	r0, r0, #1
    563c:	0d0efb01 	vstreq	d15, [lr, #-4]
    5640:	01010100 	mrseq	r0, (UNDEF: 17)
    5644:	00000001 	andeq	r0, r0, r1
    5648:	01000001 	tsteq	r0, r1
    564c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5598 <patchGenfskRfe+0x19c>
    5650:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5654:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5658:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    565c:	6f746b73 	svcvs	0x00746b73
    5660:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5664:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5668:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    566c:	2f534f43 	svccs	0x00534f43
    5670:	4f636950 	svcmi	0x00636950
    5674:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5678:	2f736269 	svccs	0x00736269
    567c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5680:	2f006c61 	svccs	0x00006c61
    5684:	2f727375 	svccs	0x00727375
    5688:	2f62696c 	svccs	0x0062696c
    568c:	2f636367 	svccs	0x00636367
    5690:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5694:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5698:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    569c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    56a0:	2f312e32 	svccs	0x00312e32
    56a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    56a8:	00656475 	rsbeq	r6, r5, r5, ror r4
    56ac:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 55f8 <patchGenfskRfe+0x1fc>
    56b0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    56b4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    56b8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    56bc:	6f746b73 	svcvs	0x00746b73
    56c0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    56c4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    56c8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    56cc:	2f534f43 	svccs	0x00534f43
    56d0:	4f636950 	svcmi	0x00636950
    56d4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    56d8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    56dc:	6f682f00 	svcvs	0x00682f00
    56e0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    56e4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    56e8:	442f6e65 	strtmi	r6, [pc], #-3685	; 56f0 <patchGenfskRfe+0x2f4>
    56ec:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    56f0:	4f2f706f 	svcmi	0x002f706f
    56f4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    56f8:	502f5445 	eorpl	r5, pc, r5, asr #8
    56fc:	534f4349 	movtpl	r4, #62281	; 0xf349
    5700:	6369502f 	cmnvs	r9, #47	; 0x2f
    5704:	0000534f 	andeq	r5, r0, pc, asr #6
    5708:	5f726573 	svcpl	0x00726573
    570c:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    5710:	00010063 	andeq	r0, r1, r3, rrx
    5714:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5718:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    571c:	00020068 	andeq	r0, r2, r8, rrx
    5720:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5724:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5728:	00020068 	andeq	r0, r2, r8, rrx
    572c:	63726100 	cmnvs	r2, #0, 2
    5730:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5734:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5738:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    573c:	00030068 	andeq	r0, r3, r8, rrx
    5740:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5744:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5748:	00682e73 	rsbeq	r2, r8, r3, ror lr
    574c:	62000003 	andvs	r0, r0, #3
    5750:	6f747475 	svcvs	0x00747475
    5754:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5758:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    575c:	00000300 	andeq	r0, r0, r0, lsl #6
    5760:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5764:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5768:	3c000004 	stccc	0, cr0, [r0], {4}
    576c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5770:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5774:	0000003e 	andeq	r0, r0, lr, lsr r0
    5778:	2d050000 	stccs	0, cr0, [r5, #-0]
    577c:	80020500 	andhi	r0, r2, r0, lsl #10
    5780:	03000028 	movweq	r0, #40	; 0x28
    5784:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    5788:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    578c:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    5790:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    5794:	06020536 			; <UNDEFINED> instruction: 0x06020536
    5798:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    579c:	20050501 	andcs	r0, r5, r1, lsl #10
    57a0:	2f060305 	svccs	0x00060305
    57a4:	01060f05 	tsteq	r6, r5, lsl #30
    57a8:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    57ac:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    57b0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    57b4:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    57b8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    57bc:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    57c0:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    57c4:	304f0205 	subcc	r0, pc, r5, lsl #4
    57c8:	01060905 	tsteq	r6, r5, lsl #18
    57cc:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    57d0:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    57d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    57d8:	06010530 			; <UNDEFINED> instruction: 0x06010530
    57dc:	030a0513 	movweq	r0, #42259	; 0xa513
    57e0:	06026669 	streq	r6, [r2], -r9, ror #12
    57e4:	ae010100 	adfges	f0, f1, f0
    57e8:	0300000c 	movweq	r0, #12
    57ec:	00029e00 	andeq	r9, r2, r0, lsl #28
    57f0:	fb010200 	blx	45ffa <__ccfg+0x26052>
    57f4:	01000d0e 	tsteq	r0, lr, lsl #26
    57f8:	00010101 	andeq	r0, r1, r1, lsl #2
    57fc:	00010000 	andeq	r0, r1, r0
    5800:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5804:	2f656d6f 	svccs	0x00656d6f
    5808:	70657473 	rsbvc	r7, r5, r3, ror r4
    580c:	2f6e6568 	svccs	0x006e6568
    5810:	6b736544 	blvs	1cded28 <__ccfg+0x1cbed80>
    5814:	2f706f74 	svccs	0x00706f74
    5818:	4f534c4f 	svcmi	0x00534c4f
    581c:	2f54454e 	svccs	0x0054454e
    5820:	4f434950 	svcmi	0x00434950
    5824:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5828:	2f534f63 	svccs	0x00534f63
    582c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5830:	2f005858 	svccs	0x00005858
    5834:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5838:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    583c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5840:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5844:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5848:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    584c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5850:	4349502f 	movtmi	r5, #36911	; 0x902f
    5854:	502f534f 	eorpl	r5, pc, pc, asr #6
    5858:	534f6369 	movtpl	r6, #62313	; 0xf369
    585c:	3143432f 	cmpcc	r3, pc, lsr #6
    5860:	2f585833 	svccs	0x00585833
    5864:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5868:	41575858 	cmpmi	r7, r8, asr r8
    586c:	642f4552 	strtvs	r4, [pc], #-1362	; 5874 <patchGenfskRfe+0x478>
    5870:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5874:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5878:	6f682f00 	svcvs	0x00682f00
    587c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5880:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5884:	442f6e65 	strtmi	r6, [pc], #-3685	; 588c <patchGenfskRfe+0x490>
    5888:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    588c:	4f2f706f 	svcmi	0x002f706f
    5890:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5894:	502f5445 	eorpl	r5, pc, r5, asr #8
    5898:	534f4349 	movtpl	r4, #62281	; 0xf349
    589c:	6369502f 	cmnvs	r9, #47	; 0x2f
    58a0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    58a4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    58a8:	43432f58 	movtmi	r2, #16216	; 0x3f58
    58ac:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    58b0:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    58b4:	5f66722f 	svcpl	0x0066722f
    58b8:	63746170 	cmnvs	r4, #112, 2
    58bc:	00736568 	rsbseq	r6, r3, r8, ror #10
    58c0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    58c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    58c8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    58cc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    58d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    58d4:	61652d65 	cmnvs	r5, r5, ror #26
    58d8:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    58dc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    58e0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    58e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    58e8:	73752f00 	cmnvc	r5, #0, 30
    58ec:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    58f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    58f4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    58f8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    58fc:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5900:	6f682f00 	svcvs	0x00682f00
    5904:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5908:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    590c:	442f6e65 	strtmi	r6, [pc], #-3685	; 5914 <patchGenfskRfe+0x518>
    5910:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5914:	4f2f706f 	svcmi	0x002f706f
    5918:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    591c:	502f5445 	eorpl	r5, pc, r5, asr #8
    5920:	534f4349 	movtpl	r4, #62281	; 0xf349
    5924:	6369502f 	cmnvs	r9, #47	; 0x2f
    5928:	2f00534f 	svccs	0x0000534f
    592c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5930:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5934:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5938:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    593c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5940:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5944:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5948:	4349502f 	movtmi	r5, #36911	; 0x902f
    594c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5950:	534f6369 	movtpl	r6, #62313	; 0xf369
    5954:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    5958:	006c656e 	rsbeq	r6, ip, lr, ror #10
    595c:	70667200 	rsbvc	r7, r6, r0, lsl #4
    5960:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    5964:	00010063 	andeq	r0, r1, r3, rrx
    5968:	63667200 	cmnvs	r6, #0, 4
    596c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5970:	70670000 	rsbvc	r0, r7, r0
    5974:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5978:	00000200 	andeq	r0, r0, r0, lsl #4
    597c:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    5980:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    5984:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
    5988:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    598c:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    5990:	00030068 	andeq	r0, r3, r8, rrx
    5994:	5f667200 	svcpl	0x00667200
    5998:	63746170 	cmnvs	r4, #112, 2
    599c:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
    59a0:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    59a4:	6b73666e 	blvs	1cdf364 <__ccfg+0x1cbf3bc>
    59a8:	0300682e 	movweq	r6, #2094	; 0x82e
    59ac:	74730000 	ldrbtvc	r0, [r3], #-0
    59b0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    59b4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    59b8:	74730000 	ldrbtvc	r0, [r3], #-0
    59bc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    59c0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    59c4:	745f0000 	ldrbvc	r0, [pc], #-0	; 59cc <patchGenfskRfe+0x5d0>
    59c8:	73657079 	cmnvc	r5, #121	; 0x79
    59cc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    59d0:	65720000 	ldrbvs	r0, [r2, #-0]!
    59d4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    59d8:	00050068 	andeq	r0, r5, r8, rrx
    59dc:	636f6c00 	cmnvs	pc, #0, 24
    59e0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    59e4:	72000005 	andvc	r0, r0, #5
    59e8:	616d5f66 	cmnvs	sp, r6, ror #30
    59ec:	6f626c69 	svcvs	0x00626c69
    59f0:	00682e78 	rsbeq	r2, r8, r8, ror lr
    59f4:	72000002 	andvc	r0, r0, #2
    59f8:	6f635f66 	svcvs	0x00635f66
    59fc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    5a00:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    5a04:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5a08:	66720000 	ldrbtvs	r0, [r2], -r0
    5a0c:	6f72705f 	svcvs	0x0072705f
    5a10:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    5a14:	00682e64 	rsbeq	r2, r8, r4, ror #28
    5a18:	72000002 	andvc	r0, r0, #2
    5a1c:	61645f66 	cmnvs	r4, r6, ror #30
    5a20:	655f6174 	ldrbvs	r6, [pc, #-372]	; 58b4 <patchGenfskRfe+0x4b8>
    5a24:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    5a28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5a2c:	72610000 	rsbvc	r0, r1, #0
    5a30:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5a34:	00000100 	andeq	r0, r0, r0, lsl #2
    5a38:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5a3c:	0100682e 	tsteq	r0, lr, lsr #16
    5a40:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    5a44:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5a48:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5a4c:	00000100 	andeq	r0, r0, r0, lsl #2
    5a50:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    5a54:	5f736e6f 	svcpl	0x00736e6f
    5a58:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5a5c:	00010068 	andeq	r0, r1, r8, rrx
    5a60:	73797300 	cmnvc	r9, #0, 6
    5a64:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5a68:	00000600 	andeq	r0, r0, r0, lsl #12
    5a6c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    5a70:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    5a74:	00000700 	andeq	r0, r0, r0, lsl #14
    5a78:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    5a7c:	5f667274 	svcpl	0x00667274
    5a80:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    5a84:	73676e69 	cmnvc	r7, #1680	; 0x690
    5a88:	0100682e 	tsteq	r0, lr, lsr #16
    5a8c:	05000000 	streq	r0, [r0, #-0]
    5a90:	02050017 	andeq	r0, r5, #23
    5a94:	000028e0 	andeq	r2, r0, r0, ror #17
    5a98:	01039f03 	tsteq	r3, r3, lsl #30
    5a9c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    5aa0:	05140638 	ldreq	r0, [r4, #-1592]	; 0xfffff9c8
    5aa4:	38052026 	stmdacc	r5, {r1, r2, r5, sp}
    5aa8:	3c260520 	cfstr32cc	mvfx0, [r6], #-128	; 0xffffff80
    5aac:	051e1505 	ldreq	r1, [lr, #-1285]	; 0xfffffafb
    5ab0:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    5ab4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5ab8:	0205002a 	andeq	r0, r5, #42	; 0x2a
    5abc:	00002900 	andeq	r2, r0, r0, lsl #18
    5ac0:	0106c903 	tsteq	r6, r3, lsl #18
    5ac4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5ac8:	0e062a05 	vmlaeq.f32	s4, s12, s10
    5acc:	06040520 	streq	r0, [r4], -r0, lsr #10
    5ad0:	17054408 	strne	r4, [r5, -r8, lsl #8]
    5ad4:	0c050106 	stfeqs	f0, [r5], {6}
    5ad8:	03080520 	movweq	r0, #34080	; 0x8520
    5adc:	04053c20 	streq	r3, [r5], #-3104	; 0xfffff3e0
    5ae0:	64032106 	strvs	r2, [r3], #-262	; 0xfffffefa
    5ae4:	06060520 	streq	r0, [r6], -r0, lsr #10
    5ae8:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    5aec:	0d030604 	stceq	6, cr0, [r3, #-16]
    5af0:	9e010120 	adflssp	f0, f1, f0
    5af4:	054a582e 	strbeq	r5, [sl, #-2094]	; 0xfffff7d2
    5af8:	fa030601 	blx	c7304 <__ccfg+0xa735c>
    5afc:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    5b00:	7f900306 	svcvc	0x00900306
    5b04:	0b055d20 	bleq	15cf8c <__ccfg+0x13cfe4>
    5b08:	20200106 	eorcs	r0, r0, r6, lsl #2
    5b0c:	2f060405 	svccs	0x00060405
    5b10:	03060605 	movweq	r0, #26117	; 0x6605
    5b14:	04050163 	streq	r0, [r5], #-355	; 0xfffffe9d
    5b18:	2e210306 	cdpcs	3, 2, cr0, cr1, cr6, {0}
    5b1c:	01060a05 	tsteq	r6, r5, lsl #20
    5b20:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    5b24:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5b28:	00e20302 	rsceq	r0, r2, r2, lsl #6
    5b2c:	06050501 	streq	r0, [r5], -r1, lsl #10
    5b30:	06030501 	streq	r0, [r3], -r1, lsl #10
    5b34:	0f02052f 	svceq	0x0002052f
    5b38:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
    5b3c:	051d0905 	ldreq	r0, [sp, #-2309]	; 0xfffff6fb
    5b40:	a4030604 	strge	r0, [r3], #-1540	; 0xfffff9fc
    5b44:	1105207f 	tstne	r5, pc, ror r0
    5b48:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5b4c:	05054106 	streq	r4, [r5, #-262]	; 0xfffffefa
    5b50:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5b54:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    5b58:	04055b21 	streq	r5, [r5], #-2849	; 0xfffff4df
    5b5c:	06070552 			; <UNDEFINED> instruction: 0x06070552
    5b60:	06050501 	streq	r0, [r5], -r1, lsl #10
    5b64:	06010122 	streq	r0, [r1], -r2, lsr #2
    5b68:	054a065a 	strbeq	r0, [sl, #-1626]	; 0xfffff9a6
    5b6c:	0535060d 	ldreq	r0, [r5, #-1549]!	; 0xfffff9f3
    5b70:	05052120 	streq	r2, [r5, #-288]	; 0xfffffee0
    5b74:	11053c06 	tstne	r5, r6, lsl #24
    5b78:	08051306 	stmdaeq	r5, {r1, r2, r8, r9, ip}
    5b7c:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    5b80:	061e052d 	ldreq	r0, [lr], -sp, lsr #10
    5b84:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    5b88:	06040520 	streq	r0, [r4], -r0, lsr #10
    5b8c:	10030601 	andne	r0, r3, r1, lsl #12
    5b90:	062e053c 			; <UNDEFINED> instruction: 0x062e053c
    5b94:	21140501 	tstcs	r4, r1, lsl #10
    5b98:	051f2e05 	ldreq	r2, [pc, #-3589]	; 4d9b <__aeabi_lmul+0x2bf>
    5b9c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5ba0:	0501062e 	streq	r0, [r1, #-1582]	; 0xfffff9d2
    5ba4:	04052024 	streq	r2, [r5], #-36	; 0xffffffdc
    5ba8:	24594b06 	ldrbcs	r4, [r9], #-2822	; 0xfffff4fa
    5bac:	01060a05 	tsteq	r6, r5, lsl #20
    5bb0:	0e030805 	cdpeq	8, 0, cr0, cr3, cr5, {0}
    5bb4:	06040520 	streq	r0, [r4], -r0, lsr #10
    5bb8:	20750322 	rsbscs	r0, r5, r2, lsr #6
    5bbc:	01060c05 	tsteq	r6, r5, lsl #24
    5bc0:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    5bc4:	0520490c 	streq	r4, [r0, #-2316]!	; 0xfffff6f4
    5bc8:	03300604 	teqeq	r0, #4, 12	; 0x400000
    5bcc:	032f0111 			; <UNDEFINED> instruction: 0x032f0111
    5bd0:	0a055875 	beq	15bdac <__ccfg+0x13be04>
    5bd4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5bd8:	0a053606 	beq	1533f8 <__ccfg+0x133450>
    5bdc:	06050106 	streq	r0, [r5], -r6, lsl #2
    5be0:	1f0a0521 	svcne	0x000a0521
    5be4:	3c20202e 	stccc	0, cr2, [r0], #-184	; 0xffffff48
    5be8:	03060405 	movweq	r0, #25605	; 0x6405
    5bec:	0d056609 	stceq	6, cr6, [r5, #-36]	; 0xffffffdc
    5bf0:	20200106 	eorcs	r0, r0, r6, lsl #2
    5bf4:	30060405 	andcc	r0, r6, r5, lsl #8
    5bf8:	1e060d05 	cdpne	13, 0, cr0, cr6, cr5, {0}
    5bfc:	42060405 	andmi	r0, r6, #83886080	; 0x5000000
    5c00:	01001f02 	tsteq	r0, r2, lsl #30
    5c04:	00230501 	eoreq	r0, r3, r1, lsl #10
    5c08:	2a900205 	bcs	fe406424 <_estack+0xde401424>
    5c0c:	c4030000 	strgt	r0, [r3], #-0
    5c10:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5c14:	23051517 	movwcs	r1, #21783	; 0x5517
    5c18:	01780306 	cmneq	r8, r6, lsl #6
    5c1c:	06020520 	streq	r0, [r2], -r0, lsr #10
    5c20:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    5c24:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    5c28:	0c050106 	stfeqs	f0, [r5], {6}
    5c2c:	2006053c 	andcs	r0, r6, ip, lsr r5
    5c30:	31060305 	tstcc	r6, r5, lsl #6
    5c34:	01060605 	tsteq	r6, r5, lsl #12
    5c38:	30060405 	andcc	r0, r6, r5, lsl #8
    5c3c:	03052606 	movweq	r2, #22022	; 0x5606
    5c40:	06053a06 	streq	r3, [r5], -r6, lsl #20
    5c44:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5c48:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
    5c4c:	08053103 	stmdaeq	r5, {r0, r1, r8, ip, sp}
    5c50:	053c7103 	ldreq	r7, [ip, #-259]!	; 0xfffffefd
    5c54:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5c58:	20100301 	andscs	r0, r0, r1, lsl #6
    5c5c:	01000902 	tsteq	r0, r2, lsl #18
    5c60:	00160501 	andseq	r0, r6, r1, lsl #10
    5c64:	2ad80205 	bcs	ff606480 <_estack+0xdf601480>
    5c68:	94030000 	strls	r0, [r3], #-0
    5c6c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    5c70:	06160516 			; <UNDEFINED> instruction: 0x06160516
    5c74:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5c78:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5c7c:	3d3f0602 	ldccc	6, cr0, [pc, #-8]!	; 5c7c <patchImageGenfsk+0x1cc>
    5c80:	4b060105 	blmi	18609c <__ccfg+0x1660f4>
    5c84:	01000602 	tsteq	r0, r2, lsl #12
    5c88:	00170501 	andseq	r0, r7, r1, lsl #10
    5c8c:	2afc0205 	bcs	fff064a8 <_estack+0xdff014a8>
    5c90:	e0030000 	and	r0, r3, r0
    5c94:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    5c98:	06170516 			; <UNDEFINED> instruction: 0x06170516
    5c9c:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5ca0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5ca4:	043f0602 	ldrteq	r0, [pc], #-1538	; 5cac <patchImageGenfsk+0x1fc>
    5ca8:	06350502 	ldrteq	r0, [r5], -r2, lsl #10
    5cac:	017eb903 	cmneq	lr, r3, lsl #18
    5cb0:	02050104 	andeq	r0, r5, #4, 2
    5cb4:	2001c703 	andcs	ip, r1, r3, lsl #14
    5cb8:	303f5a06 	eorscc	r5, pc, r6, lsl #20
    5cbc:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5cc0:	017eb203 	cmneq	lr, r3, lsl #4
    5cc4:	01063505 	tsteq	r6, r5, lsl #10
    5cc8:	02050104 	andeq	r0, r5, #4, 2
    5ccc:	2001d003 	andcs	sp, r1, r3
    5cd0:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5cd4:	207eb003 	rsbscs	fp, lr, r3
    5cd8:	02050104 	andeq	r0, r5, #4, 2
    5cdc:	01d00306 	bicseq	r0, r0, r6, lsl #6
    5ce0:	48053120 	stmdami	r5, {r5, r8, ip, sp}
    5ce4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5ce8:	01313106 	teqeq	r1, r6, lsl #2
    5cec:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5cf0:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
    5cf4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5cf8:	01040106 	tsteq	r4, r6, lsl #2
    5cfc:	03060205 	movweq	r0, #25093	; 0x6205
    5d00:	03044a1c 	movweq	r4, #18972	; 0x4a1c
    5d04:	5f032905 	svcpl	0x00032905
    5d08:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5d0c:	01062d05 	tsteq	r6, r5, lsl #26
    5d10:	02050104 	andeq	r0, r5, #4, 2
    5d14:	2e1c0306 	cdpcs	3, 1, cr0, cr12, cr6, {0}
    5d18:	01014b14 	tsteq	r1, r4, lsl fp
    5d1c:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    5d20:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5d24:	0101000b 	tsteq	r1, fp
    5d28:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5d2c:	002b5802 	eoreq	r5, fp, r2, lsl #16
    5d30:	01e10300 	mvneq	r0, r0, lsl #6
    5d34:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    5d38:	054f0602 	strbeq	r0, [pc, #-1538]	; 573e <patchGenfskRfe+0x342>
    5d3c:	0a051303 	beq	14a950 <__ccfg+0x12a9a8>
    5d40:	06050106 	streq	r0, [r5], -r6, lsl #2
    5d44:	06030520 	streq	r0, [r3], -r0, lsr #10
    5d48:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5d4c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5d50:	03055b30 	movweq	r5, #23344	; 0x5b30
    5d54:	0308054c 	movweq	r0, #34124	; 0x854c
    5d58:	06053c75 			; <UNDEFINED> instruction: 0x06053c75
    5d5c:	01051306 	tsteq	r5, r6, lsl #6
    5d60:	02200c03 	eoreq	r0, r0, #768	; 0x300
    5d64:	01010005 	tsteq	r1, r5
    5d68:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5d6c:	002b9002 	eoreq	r9, fp, r2
    5d70:	01fe0300 	mvnseq	r0, r0, lsl #6
    5d74:	03020501 	movweq	r0, #9473	; 0x2501
    5d78:	04010109 	streq	r0, [r1], #-265	; 0xfffffef7
    5d7c:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5d80:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5d84:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5d88:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5d8c:	3c57030d 	mrrccc	3, 0, r0, r7, cr13
    5d90:	2d050304 	stccs	3, cr0, [r5, #-16]
    5d94:	042e2903 	strteq	r2, [lr], #-2307	; 0xfffff6fd
    5d98:	06020501 	streq	r0, [r2], -r1, lsl #10
    5d9c:	04206003 	strteq	r6, [r0], #-3
    5da0:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5da4:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5da8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5dac:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5db0:	60030602 	andvs	r0, r3, r2, lsl #12
    5db4:	052f192e 	streq	r1, [pc, #-2350]!	; 548e <patchGenfskRfe+0x92>
    5db8:	1c050107 	stfnes	f0, [r5], {7}
    5dbc:	061e053c 			; <UNDEFINED> instruction: 0x061e053c
    5dc0:	2e020501 	cfsh32cs	mvfx0, mvfx2, #1
    5dc4:	48053106 	stmdami	r5, {r1, r2, r8, ip, sp}
    5dc8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5dcc:	1c480532 	cfstr64ne	mvdx0, [r8], {50}	; 0x32
    5dd0:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5dd4:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    5dd8:	7ee40305 	cdpvc	3, 14, cr0, cr4, cr5, {0}
    5ddc:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    5de0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5de4:	019f0302 	orrseq	r0, pc, r2, lsl #6
    5de8:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    5dec:	7ee10335 	mcrvc	3, 7, r0, cr1, cr5, {1}
    5df0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5df4:	9f030602 	svcls	0x00030602
    5df8:	04322001 	ldrteq	r2, [r2], #-1
    5dfc:	03040504 	movweq	r0, #17668	; 0x4504
    5e00:	73030110 	movwvc	r0, #12560	; 0x3110
    5e04:	03010501 	movweq	r0, #5377	; 0x1501
    5e08:	0405016b 	streq	r0, [r5], #-363	; 0xfffffe95
    5e0c:	03011603 	movweq	r1, #5635	; 0x1603
    5e10:	03150161 	tsteq	r5, #1073741848	; 0x40000018
    5e14:	6d03661d 	stcvs	6, cr6, [r3, #-116]	; 0xffffff8c
    5e18:	05151301 	ldreq	r1, [r5, #-769]	; 0xfffffcff
    5e1c:	04010612 	streq	r0, [r1], #-1554	; 0xfffff9ee
    5e20:	03040505 	movweq	r0, #17669	; 0x4505
    5e24:	042e01f1 	strteq	r0, [lr], #-497	; 0xfffffe0f
    5e28:	03120504 	tsteq	r2, #4, 10	; 0x1000000
    5e2c:	05207e8f 	streq	r7, [r0, #-3727]!	; 0xfffff171
    5e30:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5e34:	3d130612 	ldccc	6, cr0, [r3, #-72]	; 0xffffffb8
    5e38:	2f3d1305 	svccs	0x003d1305
    5e3c:	052f1205 	streq	r1, [pc, #-517]!	; 5c3f <patchImageGenfsk+0x18f>
    5e40:	12053e11 	andne	r3, r5, #272	; 0x110
    5e44:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    5e48:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    5e4c:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    5e50:	01061105 	tsteq	r6, r5, lsl #2
    5e54:	1c050504 	cfstr32ne	mvfx0, [r5], {4}
    5e58:	2001d403 	andcs	sp, r1, r3, lsl #8
    5e5c:	051f1405 	ldreq	r1, [pc, #-1029]	; 5a5f <patchGenfskRfe+0x663>
    5e60:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    5e64:	0a051307 	beq	14aa88 <__ccfg+0x12aae0>
    5e68:	051b1806 	ldreq	r1, [fp, #-2054]	; 0xfffff7fa
    5e6c:	052f0607 	streq	r0, [pc, #-1543]!	; 586d <patchGenfskRfe+0x471>
    5e70:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5e74:	052f0607 	streq	r0, [pc, #-1543]!	; 5875 <patchGenfskRfe+0x479>
    5e78:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5e7c:	132f0607 			; <UNDEFINED> instruction: 0x132f0607
    5e80:	01060a05 	tsteq	r6, r5, lsl #20
    5e84:	2f210d05 	svccs	0x00210d05
    5e88:	21212f2f 			; <UNDEFINED> instruction: 0x21212f2f
    5e8c:	30040521 	andcc	r0, r4, r1, lsr #10
    5e90:	03060705 	movweq	r0, #26373	; 0x6705
    5e94:	13133c78 	tstne	r3, #120, 24	; 0x7800
    5e98:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5e9c:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    5ea0:	060c052e 	streq	r0, [ip], -lr, lsr #10
    5ea4:	06040521 	streq	r0, [r4], -r1, lsr #10
    5ea8:	13220601 			; <UNDEFINED> instruction: 0x13220601
    5eac:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5eb0:	01060a05 	tsteq	r6, r5, lsl #20
    5eb4:	09050104 	stmdbeq	r5, {r2, r8}
    5eb8:	207e9503 	rsbscs	r9, lr, r3, lsl #10
    5ebc:	0a050504 	beq	1472d4 <__ccfg+0x12732c>
    5ec0:	2001eb03 	andcs	lr, r1, r3, lsl #22
    5ec4:	21060405 	tstcs	r6, r5, lsl #8
    5ec8:	01060a05 	tsteq	r6, r5, lsl #20
    5ecc:	2f060405 	svccs	0x00060405
    5ed0:	01060a05 	tsteq	r6, r5, lsl #20
    5ed4:	2f060405 	svccs	0x00060405
    5ed8:	01060a05 	tsteq	r6, r5, lsl #20
    5edc:	2f060405 	svccs	0x00060405
    5ee0:	01060a05 	tsteq	r6, r5, lsl #20
    5ee4:	09050104 	stmdbeq	r5, {r2, r8}
    5ee8:	7e910306 	cdpvc	3, 9, cr0, cr1, cr6, {0}
    5eec:	3602052e 	strcc	r0, [r2], -lr, lsr #10
    5ef0:	053f0905 	ldreq	r0, [pc, #-2309]!	; 55f3 <patchGenfskRfe+0x1f7>
    5ef4:	3c120302 	ldccc	3, cr0, [r2], {2}
    5ef8:	3d435c3e 	stclcc	12, cr5, [r3, #-248]	; 0xffffff08
    5efc:	2506135a 	strcs	r1, [r6, #-858]	; 0xfffffca6
    5f00:	0569061b 	strbeq	r0, [r9, #-1563]!	; 0xfffff9e5
    5f04:	05010630 	streq	r0, [r1, #-1584]	; 0xfffff9d0
    5f08:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5f0c:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    5f10:	052f0602 	streq	r0, [pc, #-1538]!	; 5916 <patchGenfskRfe+0x51a>
    5f14:	051f062d 	ldreq	r0, [pc, #-1581]	; 58ef <patchGenfskRfe+0x4f3>
    5f18:	01052102 	tsteq	r5, r2, lsl #2
    5f1c:	03020528 	movweq	r0, #9512	; 0x2528
    5f20:	33022e78 	movwcc	r2, #11896	; 0x2e78
    5f24:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5f28:	0205001e 	andeq	r0, r5, #30
    5f2c:	00002d10 	andeq	r2, r0, r0, lsl sp
    5f30:	0103b403 	tsteq	r3, r3, lsl #8
    5f34:	13140205 	tstne	r4, #1342177280	; 0x50000000
    5f38:	04010903 	streq	r0, [r1], #-2307	; 0xfffff6fd
    5f3c:	03030502 	movweq	r0, #13570	; 0x3502
    5f40:	04017dee 	streq	r7, [r1], #-3566	; 0xfffff212
    5f44:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    5f48:	01028603 	tsteq	r2, r3, lsl #12
    5f4c:	30050204 	andcc	r0, r5, r4, lsl #4
    5f50:	2e7dfa03 	vaddcs.f32	s31, s26, s6
    5f54:	057b3205 	ldrbeq	r3, [fp, #-517]!	; 0xfffffdfb
    5f58:	05290603 	streq	r0, [r9, #-1539]!	; 0xfffff9fd
    5f5c:	32051705 	andcc	r1, r5, #1310720	; 0x140000
    5f60:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5f64:	0a052106 	beq	14e384 <__ccfg+0x12e3dc>
    5f68:	03050106 	movweq	r0, #20742	; 0x5106
    5f6c:	04330620 	ldrteq	r0, [r3], #-1568	; 0xfffff9e0
    5f70:	060a0501 	streq	r0, [sl], -r1, lsl #10
    5f74:	01028b03 	tsteq	r2, r3, lsl #22
    5f78:	30050204 	andcc	r0, r5, r4, lsl #4
    5f7c:	207df503 	rsbscs	pc, sp, r3, lsl #10
    5f80:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    5f84:	20029e03 	andcs	r9, r2, r3, lsl #28
    5f88:	30050204 	andcc	r0, r5, r4, lsl #4
    5f8c:	207de203 	rsbscs	lr, sp, r3, lsl #4
    5f90:	2d050104 	stfcss	f0, [r5, #-16]
    5f94:	20029103 	andcs	r9, r2, r3, lsl #2
    5f98:	30050204 	andcc	r0, r5, r4, lsl #4
    5f9c:	2e7def03 	cdpcs	15, 7, cr14, cr13, cr3, {0}
    5fa0:	02050104 	andeq	r0, r5, #4, 2
    5fa4:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    5fa8:	06270558 			; <UNDEFINED> instruction: 0x06270558
    5fac:	03050501 	movweq	r0, #21761	; 0x5501
    5fb0:	0a05200f 	beq	14dff4 <__ccfg+0x12e04c>
    5fb4:	052e7103 	streq	r7, [lr, #-259]!	; 0xfffffefd
    5fb8:	052f0606 	streq	r0, [pc, #-1542]!	; 59ba <patchGenfskRfe+0x5be>
    5fbc:	06051303 	streq	r1, [r5], -r3, lsl #6
    5fc0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5fc4:	01013d06 	tsteq	r1, r6, lsl #26
    5fc8:	06190513 			; <UNDEFINED> instruction: 0x06190513
    5fcc:	200d0514 	andcs	r0, sp, r4, lsl r5
    5fd0:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    5fd4:	06052007 	streq	r2, [r5], -r7
    5fd8:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    5fdc:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5fe0:	20210501 	eorcs	r0, r1, r1, lsl #10
    5fe4:	054a3705 	strbeq	r3, [sl, #-1797]	; 0xfffff8fb
    5fe8:	053f0605 	ldreq	r0, [pc, #-1541]!	; 59eb <patchGenfskRfe+0x5ef>
    5fec:	05160615 	ldreq	r0, [r6, #-1557]	; 0xfffff9eb
    5ff0:	05052a08 	streq	r2, [r5, #-2568]	; 0xfffff5f8
    5ff4:	1f052406 	svcne	0x00052406
    5ff8:	13050106 	movwne	r0, #20742	; 0x5106
    5ffc:	201f0520 	andscs	r0, pc, r0, lsr #10
    6000:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    6004:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    6008:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    600c:	052f0605 	streq	r0, [pc, #-1541]!	; 5a0f <patchGenfskRfe+0x613>
    6010:	0f056e04 	svceq	0x00056e04
    6014:	13050106 	movwne	r0, #20742	; 0x5106
    6018:	2e6a0306 	cdpcs	3, 6, cr0, cr10, cr6, {0}
    601c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6020:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    6024:	05052f1b 	streq	r2, [r5, #-3867]	; 0xfffff0e5
    6028:	3c120306 	ldccc	3, cr0, [r2], {6}
    602c:	0a030205 	beq	c6848 <__ccfg+0xa68a0>
    6030:	0605054a 	streq	r0, [r5], -sl, asr #10
    6034:	06030501 	streq	r0, [r3], -r1, lsl #10
    6038:	14010121 	strne	r0, [r1], #-289	; 0xfffffedf
    603c:	01050101 	tsteq	r5, r1, lsl #2
    6040:	03053106 	movweq	r3, #20742	; 0x5106
    6044:	6901052b 	stmdbvs	r1, {r0, r1, r3, r5, r8, sl}
    6048:	01001302 	tsteq	r0, r2, lsl #6
    604c:	00010501 	andeq	r0, r1, r1, lsl #10
    6050:	2de00205 	sfmcs	f0, 2, [r0, #20]!
    6054:	8c030000 	stchi	0, cr0, [r3], {-0}
    6058:	06010104 	streq	r0, [r1], -r4, lsl #2
    605c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6060:	05820a03 	streq	r0, [r2, #2563]	; 0xa03
    6064:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6068:	04052006 	streq	r2, [r5], #-6
    606c:	05304c06 	ldreq	r4, [r0, #-3078]!	; 0xfffff3fa
    6070:	0e054f03 	cdpeq	15, 0, cr4, cr5, cr3, {0}
    6074:	06050106 	streq	r0, [r5], -r6, lsl #2
    6078:	06040520 	streq	r0, [r4], -r0, lsr #10
    607c:	0607054b 	streq	r0, [r7], -fp, asr #10
    6080:	06050501 	streq	r0, [r5], -r1, lsl #10
    6084:	36030521 	strcc	r0, [r3], -r1, lsr #10
    6088:	01060e05 	tsteq	r6, r5, lsl #28
    608c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    6090:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    6094:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    6098:	0705581b 	smladeq	r5, fp, r8, r5
    609c:	06050520 	streq	r0, [r5], -r0, lsr #10
    60a0:	05130633 	ldreq	r0, [r3, #-1587]	; 0xfffff9cd
    60a4:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    60a8:	1f0c0521 	svcne	0x000c0521
    60ac:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    60b0:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    60b4:	06012106 	streq	r2, [r1], -r6, lsl #2
    60b8:	2e062e20 	cdpcs	14, 0, cr2, cr6, cr0, {1}
    60bc:	72030a05 	andvc	r0, r3, #20480	; 0x5000
    60c0:	060d054a 	streq	r0, [sp], -sl, asr #10
    60c4:	06040501 	streq	r0, [r4], -r1, lsl #10
    60c8:	03020530 	movweq	r0, #9520	; 0x2530
    60cc:	05017dde 	streq	r7, [r1, #-3550]	; 0xfffff222
    60d0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    60d4:	88030602 	stmdahi	r3, {r1, r9, sl}
    60d8:	27052e01 	strcs	r2, [r5, -r1, lsl #28]
    60dc:	0a050106 	beq	1464fc <__ccfg+0x126554>
    60e0:	06060520 	streq	r0, [r6], -r0, lsr #10
    60e4:	1303052f 	movwne	r0, #13615	; 0x352f
    60e8:	01060e05 	tsteq	r6, r5, lsl #28
    60ec:	2d061305 	stccs	3, cr1, [r6, #-20]	; 0xffffffec
    60f0:	01061b05 	tsteq	r6, r5, lsl #22
    60f4:	20060605 	andcs	r0, r6, r5, lsl #12
    60f8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    60fc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6100:	051f0613 	ldreq	r0, [pc, #-1555]	; 5af5 <patchImageGenfsk+0x45>
    6104:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6108:	47033016 	smladmi	r3, r6, r0, r3
    610c:	05010174 	streq	r0, [r1, #-372]	; 0xfffffe8c
    6110:	01cd0304 	biceq	r0, sp, r4, lsl #6
    6114:	03020501 	movweq	r0, #9473	; 0x2501
    6118:	13017ede 	movwne	r7, #7902	; 0x1ede
    611c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    6120:	aa030601 	bge	c792c <__ccfg+0xa7984>
    6124:	01154a01 	tsteq	r5, r1, lsl #20
    6128:	08051401 	stmdaeq	r5, {r0, sl, ip}
    612c:	10050106 	andne	r0, r5, r6, lsl #2
    6130:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    6134:	22060605 	andcs	r0, r6, #5242880	; 0x500000
    6138:	01062905 	tsteq	r6, r5, lsl #18
    613c:	31060505 	tstcc	r6, r5, lsl #10
    6140:	01061b05 	tsteq	r6, r5, lsl #22
    6144:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    6148:	01060605 	tsteq	r6, r5, lsl #12
    614c:	30060405 	andcc	r0, r6, r5, lsl #8
    6150:	060f054b 	streq	r0, [pc], -fp, asr #10
    6154:	20070501 	andcs	r0, r7, r1, lsl #10
    6158:	30060505 	andcc	r0, r6, r5, lsl #10
    615c:	05350405 	ldreq	r0, [r5, #-1029]!	; 0xfffffbfb
    6160:	0e052a0b 	vmlaeq.f32	s4, s10, s22
    6164:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6168:	03053006 	movweq	r3, #20486	; 0x5006
    616c:	0607056b 	streq	r0, [r7], -fp, ror #10
    6170:	20060501 	andcs	r0, r6, r1, lsl #10
    6174:	33060405 	movwcc	r0, #25605	; 0x6405
    6178:	07054b59 	smlsdeq	r5, r9, fp, r4
    617c:	03050106 	movweq	r0, #20742	; 0x5106
    6180:	4a100306 	bmi	406da0 <__ccfg+0x3e6df8>
    6184:	9e030205 	cdpls	2, 0, cr0, cr3, cr5, {0}
    6188:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    618c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6190:	00d60306 	sbcseq	r0, r6, r6, lsl #6
    6194:	05010158 	streq	r0, [r1, #-344]	; 0xfffffea8
    6198:	028d0303 	addeq	r0, sp, #201326592	; 0xc000000
    619c:	2e1e0301 	cdpcs	3, 1, cr0, cr14, cr1, {0}
    61a0:	01061905 	tsteq	r6, r5, lsl #18
    61a4:	05213105 	streq	r3, [r1, #-261]!	; 0xfffffefb
    61a8:	03052d19 	movweq	r2, #23833	; 0x5d19
    61ac:	31052106 	tstcc	r5, r6, lsl #2
    61b0:	03050106 	movweq	r0, #20742	; 0x5106
    61b4:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    61b8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    61bc:	06070532 			; <UNDEFINED> instruction: 0x06070532
    61c0:	20060501 	andcs	r0, r6, r1, lsl #10
    61c4:	5b060305 	blpl	186de0 <__ccfg+0x166e38>
    61c8:	01060805 	tsteq	r6, r5, lsl #16
    61cc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    61d0:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    61d4:	13054103 	movwne	r4, #20739	; 0x5103
    61d8:	06050106 	streq	r0, [r5], -r6, lsl #2
    61dc:	0604052e 	streq	r0, [r4], -lr, lsr #10
    61e0:	0607054b 	streq	r0, [r7], -fp, asr #10
    61e4:	06050501 	streq	r0, [r5], -r1, lsl #10
    61e8:	061b0541 	ldreq	r0, [fp], -r1, asr #10
    61ec:	06050501 	streq	r0, [r5], -r1, lsl #10
    61f0:	0633052f 	ldrteq	r0, [r3], -pc, lsr #10
    61f4:	06050501 	streq	r0, [r5], -r1, lsl #10
    61f8:	04052f3e 	streq	r2, [r5], #-3902	; 0xfffff0c2
    61fc:	060b053f 			; <UNDEFINED> instruction: 0x060b053f
    6200:	06040501 	streq	r0, [r4], -r1, lsl #10
    6204:	013c0903 	teqeq	ip, r3, lsl #18
    6208:	06030501 	streq	r0, [r3], -r1, lsl #10
    620c:	5800c303 	stmdapl	r0, {r0, r1, r8, r9, lr, pc}
    6210:	6d034206 	sfmvs	f4, 4, [r3, #-24]	; 0xffffffe8
    6214:	0a053d20 	beq	15569c <__ccfg+0x1356f4>
    6218:	03050106 	movweq	r0, #20742	; 0x5106
    621c:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    6220:	2074030a 	rsbscs	r0, r4, sl, lsl #6
    6224:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    6228:	01060b05 	tsteq	r6, r5, lsl #22
    622c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6230:	03150101 	tsteq	r5, #1073741824	; 0x40000000
    6234:	0705200b 	streq	r2, [r5, -fp]
    6238:	06050106 	streq	r0, [r5], -r6, lsl #2
    623c:	581f052e 	ldmdapl	pc, {r1, r2, r3, r5, r8, sl}	; <UNPREDICTABLE>
    6240:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
    6244:	0405493e 	streq	r4, [r5], #-2366	; 0xfffff6c2
    6248:	01053e06 	tsteq	r5, r6, lsl #28
    624c:	2002013f 	andcs	r0, r2, pc, lsr r1
    6250:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6254:	0205001f 	andeq	r0, r5, #31
    6258:	00002fd0 	ldrdeq	r2, [r0], -r0
    625c:	0103eb03 	tsteq	r3, r3, lsl #22
    6260:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    6264:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    6268:	05052506 	streq	r2, [r5, #-1286]	; 0xfffffafa
    626c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6270:	05020423 	streq	r0, [r2, #-1059]	; 0xfffffbdd
    6274:	b0030630 	andlt	r0, r3, r0, lsr r6
    6278:	0305667e 	movweq	r6, #22142	; 0x567e
    627c:	05051b06 	streq	r1, [r5, #-2822]	; 0xfffff4fa
    6280:	06300517 			; <UNDEFINED> instruction: 0x06300517
    6284:	060a0501 	streq	r0, [sl], -r1, lsl #10
    6288:	060b0521 	streq	r0, [fp], -r1, lsr #10
    628c:	20030501 	andcs	r0, r3, r1, lsl #10
    6290:	02050104 	andeq	r0, r5, #4, 2
    6294:	01d60306 	bicseq	r0, r6, r6, lsl #6
    6298:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    629c:	7e810303 	cdpvc	3, 8, cr0, cr1, cr3, {0}
    62a0:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    62a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    62a8:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    62ac:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    62b0:	7dfe0332 	ldclvc	3, cr0, [lr, #200]!	; 0xc8
    62b4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    62b8:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    62bc:	2e82062e 	cdpcs	6, 8, cr0, cr2, cr14, {1}
    62c0:	14014a58 	strne	r4, [r1], #-2648	; 0xfffff5a8
    62c4:	01055801 	tsteq	r5, r1, lsl #16
    62c8:	0d021306 	stceq	3, cr1, [r2, #-24]	; 0xffffffe8
    62cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    62d0:	02050025 	andeq	r0, r5, #37	; 0x25
    62d4:	00003040 	andeq	r3, r0, r0, asr #32
    62d8:	0107d603 	tsteq	r7, r3, lsl #12
    62dc:	09030205 	stmdbeq	r3, {r0, r2, r9}
    62e0:	06250501 	strteq	r0, [r5], -r1, lsl #10
    62e4:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    62e8:	2e09030d 	cdpcs	3, 0, cr0, cr9, cr13, {0}
    62ec:	77032505 	strvc	r2, [r3, -r5, lsl #10]
    62f0:	03050520 	movweq	r0, #21792	; 0x5520
    62f4:	03052009 	movweq	r2, #20489	; 0x5009
    62f8:	36063006 	strcc	r3, [r6], -r6
    62fc:	03060205 	movweq	r0, #25093	; 0x6205
    6300:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    6304:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6308:	0e052406 	cdpeq	4, 0, cr2, cr5, cr6, {0}
    630c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6310:	06030520 	streq	r0, [r3], -r0, lsr #10
    6314:	06070530 			; <UNDEFINED> instruction: 0x06070530
    6318:	06020537 			; <UNDEFINED> instruction: 0x06020537
    631c:	06040528 	streq	r0, [r4], -r8, lsr #10
    6320:	017ea103 	cmneq	lr, r3, lsl #2
    6324:	df030905 	svcle	0x00030905
    6328:	0e052001 	cdpeq	0, 0, cr2, cr5, cr1, {0}
    632c:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    6330:	05281305 	streq	r1, [r8, #-773]!	; 0xfffffcfb
    6334:	01cc030b 	biceq	r0, ip, fp, lsl #6
    6338:	0602052e 	streq	r0, [r2], -lr, lsr #10
    633c:	7e9b0323 	cdpvc	3, 9, cr0, cr11, cr3, {1}
    6340:	13141301 	tstne	r4, #67108864	; 0x4000000
    6344:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    6348:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    634c:	055d0603 	ldrbeq	r0, [sp, #-1539]	; 0xfffff9fd
    6350:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6354:	052f0604 	streq	r0, [pc, #-1540]!	; 5d58 <ratable+0x1c>
    6358:	0e055a03 	vmlaeq.f32	s10, s10, s6
    635c:	03050106 	movweq	r0, #20742	; 0x5106
    6360:	06053006 	streq	r3, [r5], -r6
    6364:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6368:	13053006 	movwne	r3, #20486	; 0x5006
    636c:	03050106 	movweq	r0, #20742	; 0x5106
    6370:	13133206 	tstne	r3, #1610612736	; 0x60000000
    6374:	14060605 	strne	r0, [r6], #-1541	; 0xfffff9fb
    6378:	051f1705 	ldreq	r1, [pc, #-1797]	; 5c7b <patchImageGenfsk+0x1cb>
    637c:	17052106 	strne	r2, [r5, -r6, lsl #2]
    6380:	2b13051f 	blcs	4c7804 <__ccfg+0x4a785c>
    6384:	31060305 	tstcc	r6, r5, lsl #6
    6388:	01060e05 	tsteq	r6, r5, lsl #28
    638c:	21060305 	tstcs	r6, r5, lsl #6
    6390:	01060605 	tsteq	r6, r5, lsl #12
    6394:	26060205 	strcs	r0, [r6], -r5, lsl #4
    6398:	01061105 	tsteq	r6, r5, lsl #2
    639c:	23060205 	movwcs	r0, #25093	; 0x6205
    63a0:	01061a05 	tsteq	r6, r5, lsl #20
    63a4:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
    63a8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    63ac:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    63b0:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    63b4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    63b8:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    63bc:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    63c0:	0b052002 	bleq	14e3d0 <__ccfg+0x12e428>
    63c4:	2001c003 	andcs	ip, r1, r3
    63c8:	c0031505 	andgt	r1, r3, r5, lsl #10
    63cc:	0205207e 	andeq	r2, r5, #126	; 0x7e
    63d0:	19052306 	stmdbne	r5, {r1, r2, r8, r9, sp}
    63d4:	0b050106 	bleq	1467f4 <__ccfg+0x12684c>
    63d8:	2001bd03 	andcs	fp, r1, r3, lsl #26
    63dc:	c3031905 	movwgt	r1, #14597	; 0x3905
    63e0:	0205207e 	andeq	r2, r5, #126	; 0x7e
    63e4:	15132306 	ldrne	r2, [r3, #-774]	; 0xfffffcfa
    63e8:	25051613 	strcs	r1, [r5, #-1555]	; 0xfffff9ed
    63ec:	01770306 	cmneq	r7, r6, lsl #6
    63f0:	03060205 	movweq	r0, #25093	; 0x6205
    63f4:	0905660c 	stmdbeq	r5, {r2, r3, r9, sl, sp, lr}
    63f8:	0b050106 	bleq	146818 <__ccfg+0x126870>
    63fc:	2001ae03 	andcs	sl, r1, r3, lsl #28
    6400:	d2030905 	andle	r0, r3, #81920	; 0x14000
    6404:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    6408:	01ab0306 			; <UNDEFINED> instruction: 0x01ab0306
    640c:	0609052e 	streq	r0, [r9], -lr, lsr #10
    6410:	06020501 	streq	r0, [r2], -r1, lsl #10
    6414:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    6418:	2e090501 	cfsh32cs	mvfx0, mvfx9, #1
    641c:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
    6420:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    6424:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    6428:	01130101 	tsteq	r3, r1, lsl #2
    642c:	01011301 	tsteq	r1, r1, lsl #6
    6430:	053f4f15 	ldreq	r4, [pc, #-3861]!	; 5523 <patchGenfskRfe+0x127>
    6434:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6438:	02054a0a 	andeq	r4, r5, #40960	; 0xa000
    643c:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    6440:	03050106 	movweq	r0, #20742	; 0x5106
    6444:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    6448:	06220560 	strteq	r0, [r2], -r0, ror #10
    644c:	03440501 	movteq	r0, #17665	; 0x4501
    6450:	053c7ba0 	ldreq	r7, [ip, #-2976]!	; 0xfffff460
    6454:	04e00322 	strbteq	r0, [r0], #802	; 0x322
    6458:	06020520 	streq	r0, [r2], -r0, lsr #10
    645c:	7b9b0324 	blvc	fe6c70f4 <_estack+0xde6c20f4>
    6460:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    6464:	06020501 	streq	r0, [r2], -r1, lsl #10
    6468:	0644053d 			; <UNDEFINED> instruction: 0x0644053d
    646c:	2d2e0501 	cfstr32cs	mvfx0, [lr, #-4]!
    6470:	03060205 	movweq	r0, #25093	; 0x6205
    6474:	200804e7 	andcs	r0, r8, r7, ror #9
    6478:	06280532 			; <UNDEFINED> instruction: 0x06280532
    647c:	23020501 	movwcs	r0, #9473	; 0x2501
    6480:	051d2805 	ldreq	r2, [sp, #-2053]	; 0xfffff7fb
    6484:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    6488:	02052f09 	andeq	r2, r5, #9, 30	; 0x24
    648c:	0630054e 	ldrteq	r0, [r0], -lr, asr #10
    6490:	2f010501 	svccs	0x00010501
    6494:	01002702 	tsteq	r0, r2, lsl #14
    6498:	0002ab01 	andeq	sl, r2, r1, lsl #22
    649c:	4f000300 	svcmi	0x00000300
    64a0:	02000001 	andeq	r0, r0, #1
    64a4:	0d0efb01 	vstreq	d15, [lr, #-4]
    64a8:	01010100 	mrseq	r0, (UNDEF: 17)
    64ac:	00000001 	andeq	r0, r0, r1
    64b0:	01000001 	tsteq	r0, r1
    64b4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    64b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    64bc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    64c0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    64c4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    64c8:	61652d65 	cmnvs	r5, r5, ror #26
    64cc:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    64d0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    64d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    64d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    64dc:	6f682f00 	svcvs	0x00682f00
    64e0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    64e4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    64e8:	442f6e65 	strtmi	r6, [pc], #-3685	; 64f0 <__exidx_end+0x770>
    64ec:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    64f0:	4f2f706f 	svcmi	0x002f706f
    64f4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    64f8:	502f5445 	eorpl	r5, pc, r5, asr #8
    64fc:	534f4349 	movtpl	r4, #62281	; 0xf349
    6500:	6369502f 	cmnvs	r9, #47	; 0x2f
    6504:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6508:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    650c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6510:	2f656d6f 	svccs	0x00656d6f
    6514:	70657473 	rsbvc	r7, r5, r3, ror r4
    6518:	2f6e6568 	svccs	0x006e6568
    651c:	6b736544 	blvs	1cdfa34 <__ccfg+0x1cbfa8c>
    6520:	2f706f74 	svccs	0x00706f74
    6524:	4f534c4f 	svcmi	0x00534c4f
    6528:	2f54454e 	svccs	0x0054454e
    652c:	4f434950 	svcmi	0x00434950
    6530:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6534:	00534f63 	subseq	r4, r3, r3, ror #30
    6538:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6484 <__exidx_end+0x704>
    653c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6540:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6544:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6548:	6f746b73 	svcvs	0x00746b73
    654c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6550:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6554:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6558:	2f534f43 	svccs	0x00534f43
    655c:	4f636950 	svcmi	0x00636950
    6560:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6564:	2f736269 	svccs	0x00736269
    6568:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    656c:	70000049 	andvc	r0, r0, r9, asr #32
    6570:	5f67756c 	svcpl	0x0067756c
    6574:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    6578:	0063632e 	rsbeq	r6, r3, lr, lsr #6
    657c:	73000000 	movwvc	r0, #0
    6580:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6584:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6588:	73000001 	movwvc	r0, #1
    658c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6590:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6594:	61000001 	tstvs	r0, r1
    6598:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    659c:	00020068 	andeq	r0, r2, r8, rrx
    65a0:	63616d00 	cmnvs	r1, #0, 26
    65a4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    65a8:	70000002 	andvc	r0, r0, r2
    65ac:	5f736e69 	svcpl	0x00736e69
    65b0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    65b4:	00020068 	andeq	r0, r2, r8, rrx
    65b8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    65bc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    65c0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    65c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    65c8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    65cc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    65d0:	00030068 	andeq	r0, r3, r8, rrx
    65d4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    65d8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    65dc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    65e0:	3c000004 	stccc	0, cr0, [r0], {4}
    65e4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    65e8:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    65ec:	0000003e 	andeq	r0, r0, lr, lsr r0
    65f0:	2b050000 	blcs	1465f8 <__ccfg+0x126650>
    65f4:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    65f8:	03000031 	movweq	r0, #49	; 0x31
    65fc:	02050136 	andeq	r0, r5, #-2147483635	; 0x8000000d
    6600:	062b0516 			; <UNDEFINED> instruction: 0x062b0516
    6604:	2410050e 	ldrcs	r0, [r0], #-1294	; 0xfffffaf2
    6608:	051c2b05 	ldreq	r2, [ip, #-2821]	; 0xfffff4fb
    660c:	05052410 	streq	r2, [r5, #-1040]	; 0xfffffbf0
    6610:	2015053c 	andscs	r0, r5, ip, lsr r5
    6614:	3f060205 	svccc	0x00060205
    6618:	01061205 	tsteq	r6, r5, lsl #4
    661c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    6620:	01060905 	tsteq	r6, r5, lsl #18
    6624:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    6628:	01010004 	tsteq	r1, r4
    662c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    6630:	0031d802 	eorseq	sp, r1, r2, lsl #16
    6634:	00c20300 	sbceq	r0, r2, r0, lsl #6
    6638:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    663c:	01061005 	tsteq	r6, r5
    6640:	051e1f05 	ldreq	r1, [lr, #-3845]	; 0xfffff0fb
    6644:	05052210 	streq	r2, [r5, #-528]	; 0xfffffdf0
    6648:	210a0520 	tstcs	sl, r0, lsr #10
    664c:	052d2a05 	streq	r2, [sp, #-2565]!	; 0xfffff5fb
    6650:	15052e1e 	strne	r2, [r5, #-3614]	; 0xfffff1e2
    6654:	06020520 	streq	r0, [r2], -r0, lsr #10
    6658:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
    665c:	22090501 	andcs	r0, r9, #4194304	; 0x400000
    6660:	051e1e05 	ldreq	r1, [lr, #-3589]	; 0xfffff1fb
    6664:	0205200f 	andeq	r2, r5, #15
    6668:	01052206 	tsteq	r5, r6, lsl #4
    666c:	03021306 	movweq	r1, #8966	; 0x2306
    6670:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6674:	02050037 	andeq	r0, r5, #55	; 0x37
    6678:	000031fc 	strdeq	r3, [r0], -ip
    667c:	0100cc03 	tsteq	r0, r3, lsl #24
    6680:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    6684:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    6688:	01052e16 	tsteq	r5, r6, lsl lr
    668c:	00010221 	andeq	r0, r1, r1, lsr #4
    6690:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    6694:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    6698:	03000032 	movweq	r0, #50	; 0x32
    669c:	050100d1 	streq	r0, [r1, #-209]	; 0xffffff2f
    66a0:	01051402 	tsteq	r5, r2, lsl #8
    66a4:	02021406 	andeq	r1, r2, #100663296	; 0x6000000
    66a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    66ac:	02050025 	andeq	r0, r5, #37	; 0x25
    66b0:	00003208 	andeq	r3, r0, r8, lsl #4
    66b4:	0100d703 	tsteq	r0, r3, lsl #14
    66b8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    66bc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    66c0:	01010002 	tsteq	r1, r2
    66c4:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
    66c8:	00320c02 	eorseq	r0, r2, r2, lsl #24
    66cc:	01200300 			; <UNDEFINED> instruction: 0x01200300
    66d0:	26061005 	strcs	r1, [r6], -r5
    66d4:	7a033905 	bvc	d4af0 <__ccfg+0xb4b48>
    66d8:	06020520 	streq	r0, [r2], -r0, lsr #10
    66dc:	05051424 	streq	r1, [r5, #-1060]	; 0xfffffbdc
    66e0:	39050106 	stmdbcc	r5, {r1, r2, r8}
    66e4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    66e8:	03052605 	movweq	r2, #22021	; 0x5605
    66ec:	20052106 	andcs	r2, r5, r6, lsl #2
    66f0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    66f4:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    66f8:	06060521 	streq	r0, [r6], -r1, lsr #10
    66fc:	060f0501 	streq	r0, [pc], -r1, lsl #10
    6700:	13040522 	movwne	r0, #17698	; 0x4522
    6704:	01061205 	tsteq	r6, r5, lsl #4
    6708:	49061605 	stmdbmi	r6, {r0, r2, r9, sl, ip}
    670c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    6710:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    6714:	16050106 	strne	r0, [r5], -r6, lsl #2
    6718:	0f051f06 	svceq	0x00051f06
    671c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    6720:	01061005 	tsteq	r6, r5
    6724:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6728:	053f0602 	ldreq	r0, [pc, #-1538]!	; 612e <__exidx_end+0x3ae>
    672c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6730:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6734:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6738:	01051d0a 	tsteq	r5, sl, lsl #26
    673c:	06040532 			; <UNDEFINED> instruction: 0x06040532
    6740:	02207503 	eoreq	r7, r0, #12582912	; 0xc00000
    6744:	01010009 	tsteq	r1, r9
    6748:	000001a4 	andeq	r0, r0, r4, lsr #3
    674c:	01290003 			; <UNDEFINED> instruction: 0x01290003
    6750:	01020000 	mrseq	r0, (UNDEF: 2)
    6754:	000d0efb 	strdeq	r0, [sp], -fp
    6758:	01010101 	tsteq	r1, r1, lsl #2
    675c:	01000000 	mrseq	r0, (UNDEF: 0)
    6760:	2f010000 	svccs	0x00010000
    6764:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6768:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    676c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6770:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6774:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6778:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    677c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6780:	4349502f 	movtmi	r5, #36911	; 0x902f
    6784:	502f534f 	eorpl	r5, pc, pc, asr #6
    6788:	534f6369 	movtpl	r6, #62313	; 0xf369
    678c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6790:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    6794:	61697265 	cmnvs	r9, r5, ror #4
    6798:	752f006c 	strvc	r0, [pc, #-108]!	; 6734 <__exidx_end+0x9b4>
    679c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 65d8 <__exidx_end+0x858>
    67a0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    67a4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    67a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    67ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    67b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    67b4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    67b8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    67bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    67c0:	2f006564 	svccs	0x00006564
    67c4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    67c8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    67cc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    67d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    67d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    67d8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    67dc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    67e0:	4349502f 	movtmi	r5, #36911	; 0x902f
    67e4:	502f534f 	eorpl	r5, pc, pc, asr #6
    67e8:	534f6369 	movtpl	r6, #62313	; 0xf369
    67ec:	3143432f 	cmpcc	r3, pc, lsr #6
    67f0:	00585833 	subseq	r5, r8, r3, lsr r8
    67f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6740 <__exidx_end+0x9c0>
    67f8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    67fc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6800:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6804:	6f746b73 	svcvs	0x00746b73
    6808:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    680c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6810:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6814:	2f534f43 	svccs	0x00534f43
    6818:	4f636950 	svcmi	0x00636950
    681c:	5f000053 	svcpl	0x00000053
    6820:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    6824:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    6828:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    682c:	00000100 	andeq	r0, r0, r0, lsl #2
    6830:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6834:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6838:	00000200 	andeq	r0, r0, r0, lsl #4
    683c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6840:	0300682e 	movweq	r6, #2094	; 0x82e
    6844:	616d0000 	cmnvs	sp, r0
    6848:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    684c:	00000300 	andeq	r0, r0, r0, lsl #6
    6850:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6854:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6858:	0300682e 	movweq	r6, #2094	; 0x82e
    685c:	75620000 	strbvc	r0, [r2, #-0]!
    6860:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6864:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6868:	00682e73 	rsbeq	r2, r8, r3, ror lr
    686c:	73000003 	movwvc	r0, #3
    6870:	6f697379 	svcvs	0x00697379
    6874:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6878:	05000000 	streq	r0, [r0, #-0]
    687c:	02050001 	andeq	r0, r5, #1
    6880:	00003254 	andeq	r3, r0, r4, asr r2
    6884:	01011c03 	tsteq	r1, r3, lsl #24
    6888:	3c062006 	stccc	0, cr2, [r6], {6}
    688c:	013c2603 	teqeq	ip, r3, lsl #12
    6890:	5f030205 	svcpl	0x00030205
    6894:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    6898:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    689c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    68a0:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    68a4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    68a8:	052f0603 	streq	r0, [pc, #-1539]!	; 62ad <__exidx_end+0x52d>
    68ac:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    68b0:	0a053c07 	beq	1558d4 <__ccfg+0x13592c>
    68b4:	06020528 	streq	r0, [r2], -r8, lsr #10
    68b8:	060a052e 	streq	r0, [sl], -lr, lsr #10
    68bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    68c0:	06060583 	streq	r0, [r6], -r3, lsl #11
    68c4:	211f2101 	tstcs	pc, r1, lsl #2
    68c8:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    68cc:	06060521 	streq	r0, [r6], -r1, lsr #10
    68d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    68d4:	06050521 	streq	r0, [r5], -r1, lsr #10
    68d8:	06030501 	streq	r0, [r3], -r1, lsl #10
    68dc:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    68e0:	060d054a 	streq	r0, [sp], -sl, asr #10
    68e4:	20110501 	andscs	r0, r1, r1, lsl #10
    68e8:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    68ec:	01010008 	tsteq	r1, r8
    68f0:	0000024e 	andeq	r0, r0, lr, asr #4
    68f4:	01280003 			; <UNDEFINED> instruction: 0x01280003
    68f8:	01020000 	mrseq	r0, (UNDEF: 2)
    68fc:	000d0efb 	strdeq	r0, [sp], -fp
    6900:	01010101 	tsteq	r1, r1, lsl #2
    6904:	01000000 	mrseq	r0, (UNDEF: 0)
    6908:	2f010000 	svccs	0x00010000
    690c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6910:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6914:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6918:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    691c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6920:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6924:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6928:	4349502f 	movtmi	r5, #36911	; 0x902f
    692c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6930:	534f6369 	movtpl	r6, #62313	; 0xf369
    6934:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6938:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    693c:	61697265 	cmnvs	r9, r5, ror #4
    6940:	752f006c 	strvc	r0, [pc, #-108]!	; 68dc <__exidx_end+0xb5c>
    6944:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6780 <__exidx_end+0xa00>
    6948:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    694c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    6950:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6954:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6958:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    695c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    6960:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6964:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6968:	2f006564 	svccs	0x00006564
    696c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6970:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6974:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6978:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    697c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6980:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6984:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6988:	4349502f 	movtmi	r5, #36911	; 0x902f
    698c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6990:	534f6369 	movtpl	r6, #62313	; 0xf369
    6994:	3143432f 	cmpcc	r3, pc, lsr #6
    6998:	00585833 	subseq	r5, r8, r3, lsr r8
    699c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 68e8 <__exidx_end+0xb68>
    69a0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    69a4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    69a8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    69ac:	6f746b73 	svcvs	0x00746b73
    69b0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    69b4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    69b8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    69bc:	2f534f43 	svccs	0x00534f43
    69c0:	4f636950 	svcmi	0x00636950
    69c4:	5f000053 	svcpl	0x00000053
    69c8:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    69cc:	61697265 	cmnvs	r9, r5, ror #4
    69d0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    69d4:	73000001 	movwvc	r0, #1
    69d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    69dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    69e0:	61000002 	tstvs	r0, r2
    69e4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    69e8:	00030068 	andeq	r0, r3, r8, rrx
    69ec:	63616d00 	cmnvs	r1, #0, 26
    69f0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    69f4:	70000003 	andvc	r0, r0, r3
    69f8:	5f736e69 	svcpl	0x00736e69
    69fc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6a00:	00030068 	andeq	r0, r3, r8, rrx
    6a04:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6a08:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6a0c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6a10:	0300682e 	movweq	r6, #2094	; 0x82e
    6a14:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6a18:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6a1c:	00040068 	andeq	r0, r4, r8, rrx
    6a20:	01050000 	mrseq	r0, (UNDEF: 5)
    6a24:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    6a28:	03000032 	movweq	r0, #50	; 0x32
    6a2c:	06010122 	streq	r0, [r1], -r2, lsr #2
    6a30:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    6a34:	13136b02 	tstne	r3, #2048	; 0x800
    6a38:	06100516 			; <UNDEFINED> instruction: 0x06100516
    6a3c:	20050501 	andcs	r0, r5, r1, lsl #10
    6a40:	30060305 	andcc	r0, r6, r5, lsl #6
    6a44:	053f0205 	ldreq	r0, [pc, #-517]!	; 6847 <__exidx_end+0xac7>
    6a48:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    6a4c:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    6a50:	200b0520 	andcs	r0, fp, r0, lsr #10
    6a54:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6a58:	2f240603 	svccs	0x00240603
    6a5c:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    6a60:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    6a64:	2f061f02 	svccs	0x00061f02
    6a68:	01060605 	tsteq	r6, r5, lsl #12
    6a6c:	30060205 	andcc	r0, r6, r5, lsl #4
    6a70:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    6a74:	01060505 	tsteq	r6, r5, lsl #10
    6a78:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    6a7c:	01060605 	tsteq	r6, r5, lsl #12
    6a80:	2f060405 	svccs	0x00060405
    6a84:	01060705 	tsteq	r6, r5, lsl #14
    6a88:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    6a8c:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    6a90:	03052106 	movweq	r2, #20742	; 0x5106
    6a94:	06070531 			; <UNDEFINED> instruction: 0x06070531
    6a98:	20060501 	andcs	r0, r6, r1, lsl #10
    6a9c:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    6aa0:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    6aa4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6aa8:	13052e05 	movwne	r2, #24069	; 0x5e05
    6aac:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6ab0:	0608052f 	streq	r0, [r8], -pc, lsr #10
    6ab4:	06030501 	streq	r0, [r3], -r1, lsl #10
    6ab8:	060d052f 	streq	r0, [sp], -pc, lsr #10
    6abc:	06030501 	streq	r0, [r3], -r1, lsl #10
    6ac0:	3102052f 	tstcc	r2, pc, lsr #10
    6ac4:	01060605 	tsteq	r6, r5, lsl #12
    6ac8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    6acc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6ad0:	21010606 	tstcs	r1, r6, lsl #12
    6ad4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    6ad8:	0606052f 	streq	r0, [r6], -pc, lsr #10
    6adc:	06020501 	streq	r0, [r2], -r1, lsl #10
    6ae0:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    6ae4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6ae8:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6aec:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6af0:	07053c11 	smladeq	r5, r1, ip, r3
    6af4:	06020521 	streq	r0, [r2], -r1, lsr #10
    6af8:	0605054b 	streq	r0, [r5], -fp, asr #10
    6afc:	06020501 	streq	r0, [r2], -r1, lsl #10
    6b00:	060a0524 	streq	r0, [sl], -r4, lsr #10
    6b04:	9f060501 	svcls	0x00060501
    6b08:	051f0a05 	ldreq	r0, [pc, #-2565]	; 610b <__exidx_end+0x38b>
    6b0c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    6b10:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6b14:	052f0602 	streq	r0, [pc, #-1538]!	; 651a <__exidx_end+0x79a>
    6b18:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6b1c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6b20:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    6b24:	052f0603 	streq	r0, [pc, #-1539]!	; 6529 <__exidx_end+0x7a9>
    6b28:	06053002 	streq	r3, [r5], -r2
    6b2c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6b30:	01053d06 	tsteq	r5, r6, lsl #26
    6b34:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    6b38:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    6b3c:	000d0230 	andeq	r0, sp, r0, lsr r2
    6b40:	03c00101 	biceq	r0, r0, #1073741824	; 0x40000000
    6b44:	00030000 	andeq	r0, r3, r0
    6b48:	0000013d 	andeq	r0, r0, sp, lsr r1
    6b4c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6b50:	0101000d 	tsteq	r1, sp
    6b54:	00000101 	andeq	r0, r0, r1, lsl #2
    6b58:	00000100 	andeq	r0, r0, r0, lsl #2
    6b5c:	6f682f01 	svcvs	0x00682f01
    6b60:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6b64:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6b68:	442f6e65 	strtmi	r6, [pc], #-3685	; 6b70 <__exidx_end+0xdf0>
    6b6c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6b70:	4f2f706f 	svcmi	0x002f706f
    6b74:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6b78:	502f5445 	eorpl	r5, pc, r5, asr #8
    6b7c:	534f4349 	movtpl	r4, #62281	; 0xf349
    6b80:	6369502f 	cmnvs	r9, #47	; 0x2f
    6b84:	502f534f 	eorpl	r5, pc, pc, asr #6
    6b88:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6b8c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6b90:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6b94:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6b98:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6b9c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6ba0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6ba4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6ba8:	61652d65 	cmnvs	r5, r5, ror #26
    6bac:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6bb0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6bb4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6bb8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6bbc:	6f682f00 	svcvs	0x00682f00
    6bc0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6bc4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6bc8:	442f6e65 	strtmi	r6, [pc], #-3685	; 6bd0 <__exidx_end+0xe50>
    6bcc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6bd0:	4f2f706f 	svcmi	0x002f706f
    6bd4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6bd8:	502f5445 	eorpl	r5, pc, r5, asr #8
    6bdc:	534f4349 	movtpl	r4, #62281	; 0xf349
    6be0:	6369502f 	cmnvs	r9, #47	; 0x2f
    6be4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6be8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6bec:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6bf0:	2f656d6f 	svccs	0x00656d6f
    6bf4:	70657473 	rsbvc	r7, r5, r3, ror r4
    6bf8:	2f6e6568 	svccs	0x006e6568
    6bfc:	6b736544 	blvs	1ce0114 <__ccfg+0x1cc016c>
    6c00:	2f706f74 	svccs	0x00706f74
    6c04:	4f534c4f 	svcmi	0x00534c4f
    6c08:	2f54454e 	svccs	0x0054454e
    6c0c:	4f434950 	svcmi	0x00434950
    6c10:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6c14:	00534f63 	subseq	r4, r3, r3, ror #30
    6c18:	6f667600 	svcvs	0x00667600
    6c1c:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    6c20:	00000100 	andeq	r0, r0, r0, lsl #2
    6c24:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6c28:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6c2c:	00000200 	andeq	r0, r0, r0, lsl #4
    6c30:	61647473 	smcvs	18243	; 0x4743
    6c34:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6c38:	00000200 	andeq	r0, r0, r0, lsl #4
    6c3c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6c40:	0300682e 	movweq	r6, #2094	; 0x82e
    6c44:	616d0000 	cmnvs	sp, r0
    6c48:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6c4c:	00000300 	andeq	r0, r0, r0, lsl #6
    6c50:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6c54:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6c58:	0300682e 	movweq	r6, #2094	; 0x82e
    6c5c:	75620000 	strbvc	r0, [r2, #-0]!
    6c60:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6c64:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6c68:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6c6c:	73000003 	movwvc	r0, #3
    6c70:	6f697379 	svcvs	0x00697379
    6c74:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6c78:	623c0000 	eorsvs	r0, ip, #0
    6c7c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6c80:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6c84:	00000000 	andeq	r0, r0, r0
    6c88:	00150500 	andseq	r0, r5, r0, lsl #10
    6c8c:	33e00205 	mvncc	r0, #1342177280	; 0x50000000
    6c90:	0c030000 	stceq	0, cr0, [r3], {-0}
    6c94:	13030501 	movwne	r0, #13569	; 0x3501
    6c98:	01060605 	tsteq	r6, r5, lsl #12
    6c9c:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    6ca0:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6ca4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6ca8:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6cac:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6cb0:	01025902 	tsteq	r2, r2, lsl #18
    6cb4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6cb8:	02050043 	andeq	r0, r5, #67	; 0x43
    6cbc:	00003400 	andeq	r3, r0, r0, lsl #8
    6cc0:	052e0619 	streq	r0, [lr, #-1561]!	; 0xfffff9e7
    6cc4:	04052006 	streq	r2, [r5], #-6
    6cc8:	052e1d03 	streq	r1, [lr, #-3331]!	; 0xfffff2fd
    6ccc:	20280305 	eorcs	r0, r8, r5, lsl #6
    6cd0:	71030705 	tstvc	r3, r5, lsl #14
    6cd4:	03060520 	movweq	r0, #25888	; 0x6520
    6cd8:	0205204a 	andeq	r2, r5, #74	; 0x4a
    6cdc:	14133e06 	ldrne	r3, [r3], #-3590	; 0xfffff1fa
    6ce0:	05180305 	ldreq	r0, [r8, #-773]	; 0xfffffcfb
    6ce4:	01120302 	tsteq	r2, r2, lsl #6
    6ce8:	01060405 	tsteq	r6, r5, lsl #8
    6cec:	30060205 	andcc	r0, r6, r5, lsl #4
    6cf0:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    6cf4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6cf8:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6cfc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6d00:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6d04:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6d08:	05052e10 	streq	r2, [r5, #-3600]	; 0xfffff1f0
    6d0c:	2d070521 	cfstr32cs	mvfx0, [r7, #-132]	; 0xffffff7c
    6d10:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    6d14:	0304053d 	movweq	r0, #17725	; 0x453d
    6d18:	590100da 	stmdbpl	r1, {r1, r3, r4, r6, r7}
    6d1c:	01060705 	tsteq	r6, r5, lsl #14
    6d20:	03060405 	movweq	r0, #25605	; 0x6405
    6d24:	054a7fa7 	strbeq	r7, [sl, #-4007]	; 0xfffff059
    6d28:	c2030605 	andgt	r0, r3, #5242880	; 0x500000
    6d2c:	2f062000 	svccs	0x00062000
    6d30:	10061205 	andne	r1, r6, r5, lsl #4
    6d34:	03060305 	movweq	r0, #25349	; 0x6305
    6d38:	06052e43 	streq	r2, [r5], -r3, asr #28
    6d3c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6d40:	06054c06 	streq	r4, [r5], -r6, lsl #24
    6d44:	0b050106 	bleq	147164 <__ccfg+0x1271bc>
    6d48:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6d4c:	03050521 	movweq	r0, #21793	; 0x5521
    6d50:	59e400c9 	stmibpl	r4!, {r0, r3, r6, r7}^
    6d54:	06080559 			; <UNDEFINED> instruction: 0x06080559
    6d58:	06050501 	streq	r0, [r5], -r1, lsl #10
    6d5c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    6d60:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6d64:	04053101 	streq	r3, [r5], #-257	; 0xfffffeff
    6d68:	3c7fa903 			; <UNDEFINED> instruction: 0x3c7fa903
    6d6c:	68060505 	stmdavs	r6, {r0, r2, r8, sl}
    6d70:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    6d74:	0c051305 	stceq	3, cr1, [r5], {5}
    6d78:	12051306 	andne	r1, r5, #402653184	; 0x18000000
    6d7c:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6d80:	060e052f 	streq	r0, [lr], -pc, lsr #10
    6d84:	06060514 			; <UNDEFINED> instruction: 0x06060514
    6d88:	060e052d 	streq	r0, [lr], -sp, lsr #10
    6d8c:	2e140513 	mrccs	5, 0, r0, cr4, cr3, {0}
    6d90:	062d0605 	strteq	r0, [sp], -r5, lsl #12
    6d94:	0609055a 			; <UNDEFINED> instruction: 0x0609055a
    6d98:	06140501 	ldreq	r0, [r4], -r1, lsl #10
    6d9c:	06160539 			; <UNDEFINED> instruction: 0x06160539
    6da0:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    6da4:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6da8:	06050513 			; <UNDEFINED> instruction: 0x06050513
    6dac:	13200903 			; <UNDEFINED> instruction: 0x13200903
    6db0:	01061205 	tsteq	r6, r5, lsl #4
    6db4:	052f0805 	streq	r0, [pc, #-2053]!	; 65b7 <__exidx_end+0x837>
    6db8:	05052d09 	streq	r2, [r5, #-3337]	; 0xfffff2f7
    6dbc:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    6dc0:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6dc4:	06060520 	streq	r0, [r6], -r0, lsr #10
    6dc8:	0a055930 	beq	15d290 <__ccfg+0x13d2e8>
    6dcc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6dd0:	0c054c06 	stceq	12, cr4, [r5], {6}
    6dd4:	016f0306 	cmneq	pc, r6, lsl #6
    6dd8:	11030505 	tstne	r3, r5, lsl #10
    6ddc:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    6de0:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6de4:	8274014a 	rsbshi	r0, r4, #-2147483630	; 0x80000012
    6de8:	204a2020 	subcs	r2, sl, r0, lsr #32
    6dec:	0705252e 	streq	r2, [r5, -lr, lsr #10]
    6df0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6df4:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    6df8:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6dfc:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6e00:	09051330 	stmdbeq	r5, {r4, r5, r8, r9, ip}
    6e04:	0a051406 	beq	14be24 <__ccfg+0x12be7c>
    6e08:	2d08051f 	cfstr32cs	mvfx0, [r8, #-124]	; 0xffffff84
    6e0c:	2f060605 	svccs	0x00060605
    6e10:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6e14:	20130501 	andscs	r0, r3, r1, lsl #10
    6e18:	3f060705 	svccc	0x00060705
    6e1c:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    6e20:	06060501 	streq	r0, [r6], -r1, lsl #10
    6e24:	06050530 			; <UNDEFINED> instruction: 0x06050530
    6e28:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    6e2c:	20110306 	andscs	r0, r1, r6, lsl #6
    6e30:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6e34:	4a063c06 	bmi	195e54 <__ccfg+0x175eac>
    6e38:	01666601 	cmneq	r6, r1, lsl #12
    6e3c:	2e20582e 	cdpcs	8, 2, cr5, cr0, cr14, {1}
    6e40:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
    6e44:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    6e48:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6e4c:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    6e50:	2d0a0514 	cfstr32cs	mvfx0, [sl, #-80]	; 0xffffffb0
    6e54:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6e58:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    6e5c:	0f051407 	svceq	0x00051407
    6e60:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    6e64:	2d07052e 	cfstr32cs	mvfx0, [r7, #-184]	; 0xffffff48
    6e68:	0a055a06 	beq	15d688 <__ccfg+0x13d6e0>
    6e6c:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    6e70:	17054706 	strne	r4, [r5, -r6, lsl #14]
    6e74:	13050106 	movwne	r0, #20742	; 0x5106
    6e78:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    6e7c:	06051306 	streq	r1, [r5], -r6, lsl #6
    6e80:	05592606 	ldrbeq	r2, [r9, #-1542]	; 0xfffff9fa
    6e84:	13134f05 	tstne	r3, #5, 30
    6e88:	11060905 	tstne	r6, r5, lsl #18
    6e8c:	062f0505 	strteq	r0, [pc], -r5, lsl #10
    6e90:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6e94:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
    6e98:	0b050106 	bleq	1472b8 <__ccfg+0x127310>
    6e9c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6ea0:	0a054b3d 	beq	159b9c <__ccfg+0x139bf4>
    6ea4:	7fad0306 	svcvc	0x00ad0306
    6ea8:	00070220 	andeq	r0, r7, r0, lsr #4
    6eac:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    6eb0:	30020500 	andcc	r0, r2, r0, lsl #10
    6eb4:	03000036 	movweq	r0, #54	; 0x36
    6eb8:	05010190 	streq	r0, [r1, #-400]	; 0xfffffe70
    6ebc:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    6ec0:	2e0e0635 	mcrcs	6, 0, r0, cr14, cr5, {1}
    6ec4:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    6ec8:	67300603 	ldrvs	r0, [r0, -r3, lsl #12]!
    6ecc:	03060105 	movweq	r0, #24837	; 0x6105
    6ed0:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    6ed4:	3c720306 	ldclcc	3, cr0, [r2], #-24	; 0xffffffe8
    6ed8:	01060805 	tsteq	r6, r5, lsl #16
    6edc:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    6ee0:	053f0602 	ldreq	r0, [pc, #-1538]!	; 68e6 <__exidx_end+0xb66>
    6ee4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6ee8:	02053c05 	andeq	r3, r5, #1280	; 0x500
    6eec:	0b054006 	bleq	156f0c <__ccfg+0x136f64>
    6ef0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6ef4:	200b0558 	andcs	r0, fp, r8, asr r5
    6ef8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6efc:	3d220603 	stccc	6, cr0, [r2, #-12]!
    6f00:	00020213 	andeq	r0, r2, r3, lsl r2
    6f04:	02c90101 	sbceq	r0, r9, #1073741824	; 0x40000000
    6f08:	00030000 	andeq	r0, r3, r0
    6f0c:	0000013d 	andeq	r0, r0, sp, lsr r1
    6f10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6f14:	0101000d 	tsteq	r1, sp
    6f18:	00000101 	andeq	r0, r0, r1, lsl #2
    6f1c:	00000100 	andeq	r0, r0, r0, lsl #2
    6f20:	6f682f01 	svcvs	0x00682f01
    6f24:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6f28:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6f2c:	442f6e65 	strtmi	r6, [pc], #-3685	; 6f34 <__exidx_end+0x11b4>
    6f30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6f34:	4f2f706f 	svcmi	0x002f706f
    6f38:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6f3c:	502f5445 	eorpl	r5, pc, r5, asr #8
    6f40:	534f4349 	movtpl	r4, #62281	; 0xf349
    6f44:	6369502f 	cmnvs	r9, #47	; 0x2f
    6f48:	502f534f 	eorpl	r5, pc, pc, asr #6
    6f4c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6f50:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6f54:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6f58:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6f5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6f60:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6f64:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6f68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6f6c:	61652d65 	cmnvs	r5, r5, ror #26
    6f70:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6f74:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6f78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6f7c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6f80:	6f682f00 	svcvs	0x00682f00
    6f84:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6f88:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6f8c:	442f6e65 	strtmi	r6, [pc], #-3685	; 6f94 <__exidx_end+0x1214>
    6f90:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6f94:	4f2f706f 	svcmi	0x002f706f
    6f98:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6f9c:	502f5445 	eorpl	r5, pc, r5, asr #8
    6fa0:	534f4349 	movtpl	r4, #62281	; 0xf349
    6fa4:	6369502f 	cmnvs	r9, #47	; 0x2f
    6fa8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6fac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6fb0:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6fb4:	2f656d6f 	svccs	0x00656d6f
    6fb8:	70657473 	rsbvc	r7, r5, r3, ror r4
    6fbc:	2f6e6568 	svccs	0x006e6568
    6fc0:	6b736544 	blvs	1ce04d8 <__ccfg+0x1cc0530>
    6fc4:	2f706f74 	svccs	0x00706f74
    6fc8:	4f534c4f 	svcmi	0x00534c4f
    6fcc:	2f54454e 	svccs	0x0054454e
    6fd0:	4f434950 	svcmi	0x00434950
    6fd4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6fd8:	00534f63 	subseq	r4, r3, r3, ror #30
    6fdc:	63737600 	cmnvs	r3, #0, 12
    6fe0:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    6fe4:	00000100 	andeq	r0, r0, r0, lsl #2
    6fe8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6fec:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6ff0:	00000200 	andeq	r0, r0, r0, lsl #4
    6ff4:	61647473 	smcvs	18243	; 0x4743
    6ff8:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6ffc:	00000200 	andeq	r0, r0, r0, lsl #4
    7000:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    7004:	0300682e 	movweq	r6, #2094	; 0x82e
    7008:	616d0000 	cmnvs	sp, r0
    700c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    7010:	00000300 	andeq	r0, r0, r0, lsl #6
    7014:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    7018:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    701c:	0300682e 	movweq	r6, #2094	; 0x82e
    7020:	75620000 	strbvc	r0, [r2, #-0]!
    7024:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    7028:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    702c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7030:	73000003 	movwvc	r0, #3
    7034:	6f697379 	svcvs	0x00697379
    7038:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    703c:	623c0000 	eorsvs	r0, ip, #0
    7040:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    7044:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    7048:	00000000 	andeq	r0, r0, r0
    704c:	003a0500 	eorseq	r0, sl, r0, lsl #10
    7050:	36800205 	strcc	r0, [r0], r5, lsl #4
    7054:	05190000 	ldreq	r0, [r9, #-0]
    7058:	3a031402 	bcc	cc068 <__ccfg+0xac0c0>
    705c:	06050501 	streq	r0, [r5], -r1, lsl #10
    7060:	033a0501 	teqeq	sl, #4194304	; 0x400000
    7064:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    7068:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    706c:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    7070:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    7074:	0b05200e 	bleq	14f0b4 <__ccfg+0x12f10c>
    7078:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    707c:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    7080:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    7084:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    7088:	21060305 	tstcs	r6, r5, lsl #6
    708c:	01060605 	tsteq	r6, r5, lsl #12
    7090:	30060305 	andcc	r0, r6, r5, lsl #6
    7094:	01060b05 	tsteq	r6, r5, lsl #22
    7098:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    709c:	01052003 	tsteq	r5, r3
    70a0:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    70a4:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    70a8:	1b030b05 	blne	c9cc4 <__ccfg+0xa9d1c>
    70ac:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    70b0:	060b052e 	streq	r0, [fp], -lr, lsr #10
    70b4:	06040501 	streq	r0, [r4], -r1, lsl #10
    70b8:	060705ad 	streq	r0, [r7], -sp, lsr #11
    70bc:	06040501 	streq	r0, [r4], -r1, lsl #10
    70c0:	06070530 			; <UNDEFINED> instruction: 0x06070530
    70c4:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    70c8:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    70cc:	142f0604 	strtne	r0, [pc], #-1540	; 70d4 <__exidx_end+0x1354>
    70d0:	01060705 	tsteq	r6, r5, lsl #14
    70d4:	2f060b05 	svccs	0x00060b05
    70d8:	01060d05 	tsteq	r6, r5, lsl #26
    70dc:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    70e0:	2b052e1c 	blcs	152958 <__ccfg+0x1329b0>
    70e4:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    70e8:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    70ec:	01060b05 	tsteq	r6, r5, lsl #22
    70f0:	83060405 	movwhi	r0, #25605	; 0x6405
    70f4:	01061805 	tsteq	r6, r5, lsl #16
    70f8:	4b060405 	blmi	188114 <__ccfg+0x16816c>
    70fc:	01060905 	tsteq	r6, r5, lsl #18
    7100:	2f060405 	svccs	0x00060405
    7104:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    7108:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    710c:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    7110:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    7114:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    7118:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    711c:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    7120:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    7124:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    7128:	2e060106 	adfcss	f0, f6, f6
    712c:	4a219082 	bmi	86b33c <__ccfg+0x84b394>
    7130:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    7134:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    7138:	3c062e06 	stccc	14, cr2, [r6], {6}
    713c:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    7140:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    7144:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    7148:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    714c:	16052010 			; <UNDEFINED> instruction: 0x16052010
    7150:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    7154:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    7158:	3c063c06 	stccc	12, cr3, [r6], {6}
    715c:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    7160:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    7164:	9006923c 	andls	r9, r6, ip, lsr r2
    7168:	013c5806 	teqeq	ip, r6, lsl #16
    716c:	2e06012e 	adfcssp	f0, f6, #0.5
    7170:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    7174:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    7178:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    717c:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    7180:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    7184:	01062e01 	tsteq	r6, r1, lsl #28
    7188:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    718c:	4f040521 	svcmi	0x00040521
    7190:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    7194:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    7198:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    719c:	13060805 	movwne	r0, #26629	; 0x6805
    71a0:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    71a4:	13210604 			; <UNDEFINED> instruction: 0x13210604
    71a8:	01060905 	tsteq	r6, r5, lsl #18
    71ac:	21060405 	tstcs	r6, r5, lsl #8
    71b0:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    71b4:	03060705 	movweq	r0, #26373	; 0x6705
    71b8:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    71bc:	0b050106 	bleq	1475dc <__ccfg+0x127634>
    71c0:	030a053e 	movweq	r0, #42302	; 0xa53e
    71c4:	11056654 	tstne	r5, r4, asr r6
    71c8:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    71cc:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    71d0:	8e010100 	adfhis	f0, f1, f0
    71d4:	03000002 	movweq	r0, #2
    71d8:	00028800 	andeq	r8, r2, r0, lsl #16
    71dc:	fb010200 	blx	479e6 <__ccfg+0x27a3e>
    71e0:	01000d0e 	tsteq	r0, lr, lsl #26
    71e4:	00010101 	andeq	r0, r1, r1, lsl #2
    71e8:	00010000 	andeq	r0, r1, r0
    71ec:	752f0100 	strvc	r0, [pc, #-256]!	; 70f4 <__exidx_end+0x1374>
    71f0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 702c <__exidx_end+0x12ac>
    71f4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    71f8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    71fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7200:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7204:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7208:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    720c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    7210:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7214:	2f006564 	svccs	0x00006564
    7218:	2f727375 	svccs	0x00727375
    721c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7220:	2f656475 	svccs	0x00656475
    7224:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7228:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    722c:	2f007379 	svccs	0x00007379
    7230:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    7234:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    7238:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    723c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    7240:	706f746b 	rsbvc	r7, pc, fp, ror #8
    7244:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    7248:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    724c:	4349502f 	movtmi	r5, #36911	; 0x902f
    7250:	502f534f 	eorpl	r5, pc, pc, asr #6
    7254:	534f6369 	movtpl	r6, #62313	; 0xf369
    7258:	3143432f 	cmpcc	r3, pc, lsr #6
    725c:	2f585833 	svccs	0x00585833
    7260:	33314343 	teqcc	r1, #201326593	; 0xc000001
    7264:	41575858 	cmpmi	r7, r8, asr r8
    7268:	642f4552 	strtvs	r4, [pc], #-1362	; 7270 <__exidx_end+0x14f0>
    726c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7270:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7274:	6f682f00 	svcvs	0x00682f00
    7278:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    727c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    7280:	442f6e65 	strtmi	r6, [pc], #-3685	; 7288 <__exidx_end+0x1508>
    7284:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    7288:	4f2f706f 	svcmi	0x002f706f
    728c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    7290:	502f5445 	eorpl	r5, pc, r5, asr #8
    7294:	534f4349 	movtpl	r4, #62281	; 0xf349
    7298:	6369502f 	cmnvs	r9, #47	; 0x2f
    729c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    72a0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    72a4:	43432f58 	movtmi	r2, #16216	; 0x3f58
    72a8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    72ac:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    72b0:	5f66722f 	svcpl	0x0066722f
    72b4:	63746170 	cmnvs	r4, #112, 2
    72b8:	00736568 	rsbseq	r6, r3, r8, ror #10
    72bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7208 <__exidx_end+0x1488>
    72c0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    72c4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    72c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    72cc:	6f746b73 	svcvs	0x00746b73
    72d0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    72d4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    72d8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    72dc:	2f534f43 	svccs	0x00534f43
    72e0:	4f636950 	svcmi	0x00636950
    72e4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    72e8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    72ec:	6f682f00 	svcvs	0x00682f00
    72f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    72f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    72f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 7300 <__exidx_end+0x1580>
    72fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    7300:	4f2f706f 	svcmi	0x002f706f
    7304:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    7308:	502f5445 	eorpl	r5, pc, r5, asr #8
    730c:	534f4349 	movtpl	r4, #62281	; 0xf349
    7310:	6369502f 	cmnvs	r9, #47	; 0x2f
    7314:	2f00534f 	svccs	0x0000534f
    7318:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    731c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    7320:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    7324:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    7328:	706f746b 	rsbvc	r7, pc, fp, ror #8
    732c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    7330:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    7334:	4349502f 	movtmi	r5, #36911	; 0x902f
    7338:	502f534f 	eorpl	r5, pc, pc, asr #6
    733c:	534f6369 	movtpl	r6, #62313	; 0xf369
    7340:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    7344:	006c656e 	rsbeq	r6, ip, lr, ror #10
    7348:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    734c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7350:	00010068 	andeq	r0, r1, r8, rrx
    7354:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7358:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    735c:	00010068 	andeq	r0, r1, r8, rrx
    7360:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    7364:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7368:	00020068 	andeq	r0, r2, r8, rrx
    736c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    7370:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7374:	00000200 	andeq	r0, r0, r0, lsl #4
    7378:	6b636f6c 	blvs	18e3130 <__ccfg+0x18c3188>
    737c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7380:	66720000 	ldrbtvs	r0, [r2], -r0
    7384:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    7388:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    738c:	0300682e 	movweq	r6, #2094	; 0x82e
    7390:	66720000 	ldrbtvs	r0, [r2], -r0
    7394:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 7220 <__exidx_end+0x14a0>
    7398:	5f6e6f6d 	svcpl	0x006e6f6d
    739c:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    73a0:	00030068 	andeq	r0, r3, r8, rrx
    73a4:	5f667200 	svcpl	0x00667200
    73a8:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    73ac:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    73b0:	0300682e 	movweq	r6, #2094	; 0x82e
    73b4:	66720000 	ldrbtvs	r0, [r2], -r0
    73b8:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    73bc:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    73c0:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
    73c4:	73666e65 	cmnvc	r6, #1616	; 0x650
    73c8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    73cc:	72000004 	andvc	r0, r0, #4
    73d0:	61705f66 	cmnvs	r0, r6, ror #30
    73d4:	5f686374 	svcpl	0x00686374
    73d8:	5f656672 	svcpl	0x00656672
    73dc:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    73e0:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    73e4:	00000400 	andeq	r0, r0, r0, lsl #8
    73e8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    73ec:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    73f0:	616d0000 	cmnvs	sp, r0
    73f4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    73f8:	00000500 	andeq	r0, r0, r0, lsl #10
    73fc:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    7400:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    7404:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7408:	75620000 	strbvc	r0, [r2, #-0]!
    740c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    7410:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7414:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7418:	73000005 	movwvc	r0, #5
    741c:	6f697379 	svcvs	0x00697379
    7420:	0600682e 	streq	r6, [r0], -lr, lsr #16
    7424:	656b0000 	strbvs	r0, [fp, #-0]!
    7428:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    742c:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    7430:	6d730000 	ldclvs	0, cr0, [r3, #-0]
    7434:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    7438:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    743c:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    7440:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    7444:	00000500 	andeq	r0, r0, r0, lsl #10
    7448:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    744c:	5f667274 	svcpl	0x00667274
    7450:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    7454:	73676e69 	cmnvc	r7, #1680	; 0x690
    7458:	5f706c5f 	svcpl	0x00706c5f
    745c:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    7460:	00000500 	andeq	r0, r0, r0, lsl #10
    7464:	00019c00 	andeq	r9, r1, r0, lsl #24
    7468:	5f000200 	svcpl	0x00000200
    746c:	02000001 	andeq	r0, r0, #1
    7470:	0d0efb01 	vstreq	d15, [lr, #-4]
    7474:	01010100 	mrseq	r0, (UNDEF: 17)
    7478:	00000001 	andeq	r0, r0, r1
    747c:	01000001 	tsteq	r0, r1
    7480:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7484:	2f2e2e2f 	svccs	0x002e2e2f
    7488:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7490 <__exidx_end+0x1710>
    748c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7490:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7494:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7498:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    749c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    74a0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    74a4:	31303030 	teqcc	r0, r0, lsr r0
    74a8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    74ac:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    74b0:	61746562 	cmnvs	r4, r2, ror #10
    74b4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    74b8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    74bc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 72f4 <__exidx_end+0x1574>
    74c0:	6f635c73 	svcvs	0x00635c73
    74c4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    74c8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    74cc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    74d0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    74d4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    74d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    74dc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    74e0:	3130322d 	teqcc	r0, sp, lsr #4
    74e4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    74e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    74ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    74f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    74f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    74f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    74fc:	616d5c65 	cmnvs	sp, r5, ror #24
    7500:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7504:	3a630065 	bcc	18c76a0 <__ccfg+0x18a76f8>
    7508:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    750c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7510:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7514:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7518:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    751c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7520:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7524:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7528:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    752c:	6f6f745c 	svcvs	0x006f745c
    7530:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7534:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7538:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    753c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7540:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7544:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7548:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    754c:	5f342d69 	svcpl	0x00342d69
    7550:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7554:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7558:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    755c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7560:	61652d65 	cmnvs	r5, r5, ror #26
    7564:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7568:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    756c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7570:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7574:	2f2e2e2f 	svccs	0x002e2e2f
    7578:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    757c:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7580:	61000063 	tstvs	r0, r3, rrx
    7584:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    7588:	00000100 	andeq	r0, r0, r0, lsl #2
    758c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7590:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7594:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7598:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    759c:	00000200 	andeq	r0, r0, r0, lsl #4
    75a0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    75a4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    75a8:	00030068 	andeq	r0, r3, r8, rrx
    75ac:	5f776800 	svcpl	0x00776800
    75b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    75b4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    75b8:	72000004 	andvc	r0, r0, #4
    75bc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    75c0:	00000100 	andeq	r0, r0, r0, lsl #2
    75c4:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    75c8:	00010068 	andeq	r0, r1, r8, rrx
    75cc:	05000000 	streq	r0, [r0, #-0]
    75d0:	003a1002 	eorseq	r1, sl, r2
    75d4:	01350300 	teqeq	r5, r0, lsl #6
    75d8:	02002120 	andeq	r2, r0, #32, 2
    75dc:	4b3d0104 	blmi	f479f4 <__ccfg+0xf27a4c>
    75e0:	2c232f21 	stccs	15, cr2, [r3], #-132	; 0xffffff7c
    75e4:	01000502 	tsteq	r0, r2, lsl #10
    75e8:	02050001 	andeq	r0, r5, #1
    75ec:	00000000 	andeq	r0, r0, r0
    75f0:	0100c003 	tsteq	r0, r3
    75f4:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
    75f8:	4b3d0104 	blmi	f47a10 <__ccfg+0xf27a68>
    75fc:	2c232f2f 	stccs	15, cr2, [r3], #-188	; 0xffffff44
    7600:	01000502 	tsteq	r0, r2, lsl #10
    7604:	00016701 	andeq	r6, r1, r1, lsl #14
    7608:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    760c:	02000001 	andeq	r0, r0, #1
    7610:	0d0efb01 	vstreq	d15, [lr, #-4]
    7614:	01010100 	mrseq	r0, (UNDEF: 17)
    7618:	00000001 	andeq	r0, r0, r1
    761c:	01000001 	tsteq	r0, r1
    7620:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7624:	2f2e2e2f 	svccs	0x002e2e2f
    7628:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7630 <__exidx_end+0x18b0>
    762c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7630:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7634:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7638:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    763c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7640:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7644:	31303030 	teqcc	r0, r0, lsr r0
    7648:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    764c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7650:	61746562 	cmnvs	r4, r2, ror #10
    7654:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7658:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    765c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7494 <__exidx_end+0x1714>
    7660:	6f635c73 	svcvs	0x00635c73
    7664:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7668:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    766c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7670:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7674:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7678:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    767c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7680:	3130322d 	teqcc	r0, sp, lsr #4
    7684:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7688:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    768c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7690:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7694:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7698:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    769c:	616d5c65 	cmnvs	sp, r5, ror #24
    76a0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    76a4:	3a630065 	bcc	18c7840 <__ccfg+0x18a7898>
    76a8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    76ac:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    76b0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    76b4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    76b8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    76bc:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    76c0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    76c4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    76c8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    76cc:	6f6f745c 	svcvs	0x006f745c
    76d0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    76d4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    76d8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    76dc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    76e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    76e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    76e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    76ec:	5f342d69 	svcpl	0x00342d69
    76f0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    76f4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    76f8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    76fc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7700:	61652d65 	cmnvs	r5, r5, ror #26
    7704:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7708:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    770c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7710:	00007379 	andeq	r7, r0, r9, ror r3
    7714:	5f6e6f61 	svcpl	0x006e6f61
    7718:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    771c:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    7720:	00000100 	andeq	r0, r0, r0, lsl #2
    7724:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7728:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    772c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7730:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7734:	00000200 	andeq	r0, r0, r0, lsl #4
    7738:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    773c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7740:	00030068 	andeq	r0, r3, r8, rrx
    7744:	6e6f6100 	powvse	f6, f7, f0
    7748:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    774c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    7750:	00010068 	andeq	r0, r1, r8, rrx
    7754:	05000000 	streq	r0, [r0, #-0]
    7758:	003a3802 	eorseq	r3, sl, r2, lsl #16
    775c:	013c0300 	teqeq	ip, r0, lsl #6
    7760:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    7764:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    7768:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    776c:	01010009 	tsteq	r1, r9
    7770:	000001a9 	andeq	r0, r0, r9, lsr #3
    7774:	01410002 	cmpeq	r1, r2
    7778:	01020000 	mrseq	r0, (UNDEF: 2)
    777c:	000d0efb 	strdeq	r0, [sp], -fp
    7780:	01010101 	tsteq	r1, r1, lsl #2
    7784:	01000000 	mrseq	r0, (UNDEF: 0)
    7788:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    778c:	2f2e2e2f 	svccs	0x002e2e2f
    7790:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7794:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7798:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    779c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    77a0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    77a4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    77a8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    77ac:	302e302e 	eorcc	r3, lr, lr, lsr #32
    77b0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    77b4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    77b8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    77bc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    77c0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    77c4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    77c8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    77cc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7664 <__exidx_end+0x18e4>
    77d0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    77d4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    77d8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    77dc:	6f6e2d6d 	svcvs	0x006e2d6d
    77e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    77e4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    77e8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    77ec:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    77f0:	615c3371 	cmpvs	ip, r1, ror r3
    77f4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    77f8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    77fc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7800:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7804:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7808:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    780c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7810:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7814:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7818:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    781c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7820:	31303030 	teqcc	r0, r0, lsr r0
    7824:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7828:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    782c:	61746562 	cmnvs	r4, r2, ror #10
    7830:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7834:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7838:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7670 <__exidx_end+0x18f0>
    783c:	6f635c73 	svcvs	0x00635c73
    7840:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7844:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7848:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    784c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7850:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7854:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7858:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    785c:	3130322d 	teqcc	r0, sp, lsr #4
    7860:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7864:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7868:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    786c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7870:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7874:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7878:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    787c:	61000073 	tstvs	r0, r3, ror r0
    7880:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    7884:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    7888:	00000100 	andeq	r0, r0, r0, lsl #2
    788c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7890:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7894:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7898:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    789c:	00000200 	andeq	r0, r0, r0, lsl #4
    78a0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    78a4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    78a8:	00030068 	andeq	r0, r3, r8, rrx
    78ac:	6e6f6100 	powvse	f6, f7, f0
    78b0:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    78b4:	0100682e 	tsteq	r0, lr, lsr #16
    78b8:	00000000 	andeq	r0, r0, r0
    78bc:	3a680205 	bcc	1a080d8 <__ccfg+0x19e8130>
    78c0:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    78c4:	04020001 	streq	r0, [r2], #-1
    78c8:	010a0301 	tsteq	sl, r1, lsl #6
    78cc:	01040200 	mrseq	r0, R12_usr
    78d0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    78d4:	02001f01 	andeq	r1, r0, #1, 30
    78d8:	00210104 	eoreq	r0, r1, r4, lsl #2
    78dc:	21010402 	tstcs	r1, r2, lsl #8
    78e0:	01040200 	mrseq	r0, R12_usr
    78e4:	02213021 	eoreq	r3, r1, #33	; 0x21
    78e8:	01010008 	tsteq	r1, r8
    78ec:	88020500 	stmdahi	r2, {r8, sl}
    78f0:	0300003a 	movweq	r0, #58	; 0x3a
    78f4:	000100d7 	ldrdeq	r0, [r1], -r7
    78f8:	03010402 	movweq	r0, #5122	; 0x1402
    78fc:	0200010c 	andeq	r0, r0, #12, 2
    7900:	00210104 	eoreq	r0, r1, r4, lsl #2
    7904:	1f010402 	svcne	0x00010402
    7908:	01040200 	mrseq	r0, R12_usr
    790c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    7910:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    7914:	31210104 			; <UNDEFINED> instruction: 0x31210104
    7918:	01000502 	tsteq	r0, r2, lsl #10
    791c:	00019c01 	andeq	r9, r1, r1, lsl #24
    7920:	39000200 	stmdbcc	r0, {r9}
    7924:	02000001 	andeq	r0, r0, #1
    7928:	0d0efb01 	vstreq	d15, [lr, #-4]
    792c:	01010100 	mrseq	r0, (UNDEF: 17)
    7930:	00000001 	andeq	r0, r0, r1
    7934:	01000001 	tsteq	r0, r1
    7938:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    793c:	2f2e2e2f 	svccs	0x002e2e2f
    7940:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7948 <__exidx_end+0x1bc8>
    7944:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7948:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    794c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7950:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7954:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7958:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    795c:	31303030 	teqcc	r0, r0, lsr r0
    7960:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7964:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7968:	61746562 	cmnvs	r4, r2, ror #10
    796c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7970:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7974:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 77ac <__exidx_end+0x1a2c>
    7978:	6f635c73 	svcvs	0x00635c73
    797c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7980:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7984:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7988:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    798c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7990:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7994:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7998:	3130322d 	teqcc	r0, sp, lsr #4
    799c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    79a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    79a4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    79a8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    79ac:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    79b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    79b4:	616d5c65 	cmnvs	sp, r5, ror #24
    79b8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    79bc:	3a630065 	bcc	18c7b58 <__ccfg+0x18a7bb0>
    79c0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    79c4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    79c8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    79cc:	3030302e 	eorscc	r3, r0, lr, lsr #32
    79d0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    79d4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    79d8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    79dc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    79e0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    79e4:	6f6f745c 	svcvs	0x006f745c
    79e8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    79ec:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    79f0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    79f4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    79f8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    79fc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7a00:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7a04:	5f342d69 	svcpl	0x00342d69
    7a08:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7a0c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7a10:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7a14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7a18:	61652d65 	cmnvs	r5, r5, ror #26
    7a1c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7a20:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7a24:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7a28:	00007379 	andeq	r7, r0, r9, ror r3
    7a2c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    7a30:	00010063 	andeq	r0, r1, r3, rrx
    7a34:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7a38:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7a3c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7a40:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7a44:	00020068 	andeq	r0, r2, r8, rrx
    7a48:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7a4c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7a50:	0300682e 	movweq	r6, #2094	; 0x82e
    7a54:	70630000 	rsbvc	r0, r3, r0
    7a58:	00682e75 	rsbeq	r2, r8, r5, ror lr
    7a5c:	00000001 	andeq	r0, r0, r1
    7a60:	a0020500 	andge	r0, r2, r0, lsl #10
    7a64:	0300003a 	movweq	r0, #58	; 0x3a
    7a68:	030100f5 	movweq	r0, #4341	; 0x10f5
    7a6c:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    7a70:	00010100 	andeq	r0, r1, r0, lsl #2
    7a74:	00000205 	andeq	r0, r0, r5, lsl #4
    7a78:	c0030000 	andgt	r0, r3, r0
    7a7c:	11030101 	tstne	r3, r1, lsl #2
    7a80:	00030201 	andeq	r0, r3, r1, lsl #4
    7a84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7a88:	003aa802 	eorseq	sl, sl, r2, lsl #16
    7a8c:	028d0300 	addeq	r0, sp, #0, 6
    7a90:	01120301 	tsteq	r2, r1, lsl #6
    7a94:	01000402 	tsteq	r0, r2, lsl #8
    7a98:	02050001 	andeq	r0, r5, #1
    7a9c:	00000000 	andeq	r0, r0, r0
    7aa0:	0102d803 	tsteq	r2, r3, lsl #16
    7aa4:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    7aa8:	01010003 	tsteq	r1, r3
    7aac:	00020500 	andeq	r0, r2, r0, lsl #10
    7ab0:	03000000 	movweq	r0, #0
    7ab4:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    7ab8:	01000402 	tsteq	r0, r2, lsl #8
    7abc:	0002d601 	andeq	sp, r2, r1, lsl #12
    7ac0:	7c000200 	sfmvc	f0, 4, [r0], {-0}
    7ac4:	02000001 	andeq	r0, r0, #1
    7ac8:	0d0efb01 	vstreq	d15, [lr, #-4]
    7acc:	01010100 	mrseq	r0, (UNDEF: 17)
    7ad0:	00000001 	andeq	r0, r0, r1
    7ad4:	01000001 	tsteq	r0, r1
    7ad8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7adc:	2f2e2e2f 	svccs	0x002e2e2f
    7ae0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7ae8 <__exidx_end+0x1d68>
    7ae4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7ae8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7aec:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7af0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7af4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7af8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7afc:	31303030 	teqcc	r0, r0, lsr r0
    7b00:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7b04:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7b08:	61746562 	cmnvs	r4, r2, ror #10
    7b0c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7b10:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7b14:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 794c <__exidx_end+0x1bcc>
    7b18:	6f635c73 	svcvs	0x00635c73
    7b1c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7b20:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7b24:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7b28:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7b2c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7b30:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7b34:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7b38:	3130322d 	teqcc	r0, sp, lsr #4
    7b3c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7b40:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7b44:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7b48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7b4c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7b50:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7b54:	616d5c65 	cmnvs	sp, r5, ror #24
    7b58:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7b5c:	3a630065 	bcc	18c7cf8 <__ccfg+0x18a7d50>
    7b60:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7b64:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7b68:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7b6c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7b70:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7b74:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7b78:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7b7c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7b80:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7b84:	6f6f745c 	svcvs	0x006f745c
    7b88:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7b8c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7b90:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7b94:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7b98:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7b9c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7ba0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7ba4:	5f342d69 	svcpl	0x00342d69
    7ba8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7bac:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7bb0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7bb4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7bb8:	61652d65 	cmnvs	r5, r5, ror #26
    7bbc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7bc0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7bc4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7bc8:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7bcc:	2f2e2e2f 	svccs	0x002e2e2f
    7bd0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7bd4:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7bd8:	6f000063 	svcvs	0x00000063
    7bdc:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    7be0:	00000100 	andeq	r0, r0, r0, lsl #2
    7be4:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7be8:	00010068 	andeq	r0, r1, r8, rrx
    7bec:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7bf0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7bf4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7bf8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7bfc:	00020068 	andeq	r0, r2, r8, rrx
    7c00:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7c04:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7c08:	0300682e 	movweq	r6, #2094	; 0x82e
    7c0c:	77680000 	strbvc	r0, [r8, -r0]!
    7c10:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7c14:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7c18:	00000400 	andeq	r0, r0, r0, lsl #8
    7c1c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    7c20:	00010068 	andeq	r0, r1, r8, rrx
    7c24:	6e6f6100 	powvse	f6, f7, f0
    7c28:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    7c2c:	0100682e 	tsteq	r0, lr, lsr #16
    7c30:	6f610000 	svcvs	0x00610000
    7c34:	61625f6e 	cmnvs	r2, lr, ror #30
    7c38:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    7c3c:	0100682e 	tsteq	r0, lr, lsr #16
    7c40:	00000000 	andeq	r0, r0, r0
    7c44:	3ab00205 	bcc	fec08460 <_estack+0xdec03460>
    7c48:	e5030000 	str	r0, [r3, #-0]
    7c4c:	03200100 	nopeq	{0}	; <UNPREDICTABLE>
    7c50:	7103200f 	tstvc	r3, pc
    7c54:	200f0320 	andcs	r0, pc, r0, lsr #6
    7c58:	9e090325 	cdpls	3, 0, cr0, cr9, cr5, {1}
    7c5c:	9e090330 	mcrls	3, 0, r0, cr9, cr0, {1}
    7c60:	0702a333 	smladxeq	r2, r3, r3, sl
    7c64:	00010100 	andeq	r0, r1, r0, lsl #2
    7c68:	3b0c0205 	blcc	308484 <__ccfg+0x2e84dc>
    7c6c:	a0030000 	andge	r0, r3, r0
    7c70:	0c030101 	stfeqs	f0, [r3], {1}
    7c74:	0388222e 	orreq	r2, r8, #-536870910	; 0xe0000002
    7c78:	25263c7a 	strcs	r3, [r6, #-3194]!	; 0xfffff386
    7c7c:	01000602 	tsteq	r0, r2, lsl #12
    7c80:	02050001 	andeq	r0, r5, #1
    7c84:	00000000 	andeq	r0, r0, r0
    7c88:	0101c203 	tsteq	r1, r3, lsl #4
    7c8c:	34912520 	ldrcc	r2, [r1], #1312	; 0x520
    7c90:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    7c94:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    7c98:	01040200 	mrseq	r0, R12_usr
    7c9c:	00207a03 	eoreq	r7, r0, r3, lsl #20
    7ca0:	50010402 	andpl	r0, r1, r2, lsl #8
    7ca4:	1f302d30 	svcne	0x00302d30
    7ca8:	1f3d4b24 	svcne	0x003d4b24
    7cac:	326c3d34 	rsbcc	r3, ip, #52, 26	; 0xd00
    7cb0:	03666d03 	cmneq	r6, #3, 26	; 0xc0
    7cb4:	02263c10 	eoreq	r3, r6, #16, 24	; 0x1000
    7cb8:	01010009 	tsteq	r1, r9
    7cbc:	38020500 	stmdacc	r2, {r8, sl}
    7cc0:	0300003b 	movweq	r0, #59	; 0x3b
    7cc4:	210101f3 	strdcs	r0, [r1, -r3]
    7cc8:	0007024b 	andeq	r0, r7, fp, asr #4
    7ccc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7cd0:	003b5002 	eorseq	r5, fp, r2
    7cd4:	02800300 	addeq	r0, r0, #0, 6
    7cd8:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
    7cdc:	04582203 	ldrbeq	r2, [r8], #-515	; 0xfffffdfd
    7ce0:	82620301 	rsbhi	r0, r2, #67108864	; 0x4000000
    7ce4:	3c030204 	sfmcc	f0, 4, [r3], {4}
    7ce8:	03010420 	movweq	r0, #5152	; 0x1420
    7cec:	1f3d4a4a 	svcne	0x003d4a4a
    7cf0:	221f3d21 	andscs	r3, pc, #2112	; 0x840
    7cf4:	22301f30 	eorscs	r1, r0, #48, 30	; 0xc0
    7cf8:	000c0223 	andeq	r0, ip, r3, lsr #4
    7cfc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7d00:	003bb002 	eorseq	fp, fp, r2
    7d04:	02a30300 	adceq	r0, r3, #0, 6
    7d08:	044f2501 	strbeq	r2, [pc], #-1281	; 7d10 <__exidx_end+0x1f90>
    7d0c:	4a170302 	bmi	5c891c <__ccfg+0x5a8974>
    7d10:	6d030104 	stfvss	f0, [r3, #-16]
    7d14:	09024b4a 	stmdbeq	r2, {r1, r3, r6, r8, r9, fp, lr}
    7d18:	00010100 	andeq	r0, r1, r0, lsl #2
    7d1c:	00000205 	andeq	r0, r0, r5, lsl #4
    7d20:	bc030000 	stclt	0, cr0, [r3], {-0}
    7d24:	03220102 			; <UNDEFINED> instruction: 0x03220102
    7d28:	69032017 	stmdbvs	r3, {r0, r1, r2, r4, sp}
    7d2c:	10032820 	andne	r2, r3, r0, lsr #16
    7d30:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    7d34:	032e1503 			; <UNDEFINED> instruction: 0x032e1503
    7d38:	1303586d 	movwne	r5, #14445	; 0x386d
    7d3c:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    7d40:	3f201103 	svccc	0x00201103
    7d44:	01000602 	tsteq	r0, r2, lsl #12
    7d48:	02050001 	andeq	r0, r5, #1
    7d4c:	00000000 	andeq	r0, r0, r0
    7d50:	0102e303 	tsteq	r2, r3, lsl #6
    7d54:	4d012103 	stfmis	f2, [r1, #-12]
    7d58:	01000202 	tsteq	r0, r2, lsl #4
    7d5c:	02050001 	andeq	r0, r5, #1
    7d60:	00000000 	andeq	r0, r0, r0
    7d64:	01039003 	tsteq	r3, r3
    7d68:	21201003 			; <UNDEFINED> instruction: 0x21201003
    7d6c:	0021211f 	eoreq	r2, r1, pc, lsl r1
    7d70:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
    7d74:	01040200 	mrseq	r0, R12_usr
    7d78:	1d313d3d 	ldcne	13, cr3, [r1, #-244]!	; 0xffffff0c
    7d7c:	00070234 	andeq	r0, r7, r4, lsr r2
    7d80:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7d84:	00000002 	andeq	r0, r0, r2
    7d88:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
    7d8c:	2c311701 	ldccs	7, cr1, [r1], #-4
    7d90:	05023d33 	streq	r3, [r2, #-3379]	; 0xfffff2cd
    7d94:	a7010100 	strge	r0, [r1, -r0, lsl #2]
    7d98:	02000003 	andeq	r0, r0, #3
    7d9c:	00026500 	andeq	r6, r2, r0, lsl #10
    7da0:	fb010200 	blx	485aa <__ccfg+0x28602>
    7da4:	01000d0e 	tsteq	r0, lr, lsl #26
    7da8:	00010101 	andeq	r0, r1, r1, lsl #2
    7dac:	00010000 	andeq	r0, r1, r0
    7db0:	2f2e0100 	svccs	0x002e0100
    7db4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7db8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7dbc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7dc0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7dc4:	63006269 	movwvs	r6, #617	; 0x269
    7dc8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7dcc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7dd0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7dd4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7dd8:	5f393130 	svcpl	0x00393130
    7ddc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7de0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7de4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7de8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7dec:	6f745c36 	svcvs	0x00745c36
    7df0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7df4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7df8:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7dfc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7e00:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7e04:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7e08:	61652d65 	cmnvs	r5, r5, ror #26
    7e0c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7e10:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7e14:	71353130 	teqvc	r5, r0, lsr r1
    7e18:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7e1c:	6f6e2d6d 	svcvs	0x006e2d6d
    7e20:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7e24:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7e28:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7e2c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7e30:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7e34:	00656e69 	rsbeq	r6, r5, r9, ror #28
    7e38:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7e3c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7e40:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7e44:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7e48:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7e4c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7e50:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7e54:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7e58:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7e5c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7e60:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7e64:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7cfc <__exidx_end+0x1f7c>
    7e68:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7e6c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7e70:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7e74:	6f6e2d6d 	svcvs	0x006e2d6d
    7e78:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7e7c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7e80:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7e84:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7e88:	615c3371 	cmpvs	ip, r1, ror r3
    7e8c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7e90:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7e94:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7e98:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7e9c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7ea0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7ea4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7ea8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7eac:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7eb0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7eb4:	31303030 	teqcc	r0, r0, lsr r0
    7eb8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7ebc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7ec0:	61746562 	cmnvs	r4, r2, ror #10
    7ec4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7ec8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7ecc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7d04 <__exidx_end+0x1f84>
    7ed0:	6f635c73 	svcvs	0x00635c73
    7ed4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7ed8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7edc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7ee0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7ee4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7ee8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7eec:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7ef0:	3130322d 	teqcc	r0, sp, lsr #4
    7ef4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7ef8:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
    7efc:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    7f00:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7f04:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7f08:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7f0c:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    7f10:	5c332e39 	ldcpl	14, cr2, [r3], #-228	; 0xffffff1c
    7f14:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7f18:	00656475 	rsbeq	r6, r5, r5, ror r4
    7f1c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7f20:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7f24:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7f28:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7f2c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7f30:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7f34:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7f38:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7f3c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7f40:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7f44:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7f48:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7de0 <__exidx_end+0x2060>
    7f4c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7f50:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7f54:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7f58:	6f6e2d6d 	svcvs	0x006e2d6d
    7f5c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7f60:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7f64:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7f68:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7f6c:	615c3371 	cmpvs	ip, r1, ror r3
    7f70:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7f74:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7f78:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7f7c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7f80:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7f84:	66720000 	ldrbtvs	r0, [r2], -r0
    7f88:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7f8c:	72000001 	andvc	r0, r0, #1
    7f90:	682e6366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sp, lr}
    7f94:	00000100 	andeq	r0, r0, r0, lsl #2
    7f98:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7f9c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7fa0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7fa4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7fa8:	00000200 	andeq	r0, r0, r0, lsl #4
    7fac:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7fb0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7fb4:	00030068 	andeq	r0, r3, r8, rrx
    7fb8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7fbc:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7fc0:	00040068 	andeq	r0, r4, r8, rrx
    7fc4:	5f667200 	svcpl	0x00667200
    7fc8:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    7fcc:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    7fd0:	00010068 	andeq	r0, r1, r8, rrx
    7fd4:	5f667200 	svcpl	0x00667200
    7fd8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    7fdc:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    7fe0:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7fe4:	00000100 	andeq	r0, r0, r0, lsl #2
    7fe8:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7fec:	5f706f72 	svcpl	0x00706f72
    7ff0:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7ff4:	00010068 	andeq	r0, r1, r8, rrx
    7ff8:	72747300 	rsbsvc	r7, r4, #0, 6
    7ffc:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    8000:	00050068 	andeq	r0, r5, r8, rrx
    8004:	05000000 	streq	r0, [r0, #-0]
    8008:	00000002 	andeq	r0, r0, r2
    800c:	00e80300 	rsceq	r0, r8, r0, lsl #6
    8010:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    8014:	00310104 	eorseq	r0, r1, r4, lsl #2
    8018:	2f010402 	svccs	0x00010402
    801c:	0003023f 	andeq	r0, r3, pc, lsr r2
    8020:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8024:	003be402 	eorseq	lr, fp, r2, lsl #8
    8028:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    802c:	04020001 	streq	r0, [r2], #-1
    8030:	02041301 	andeq	r1, r4, #67108864	; 0x4000000
    8034:	4a01c703 	bmi	79c48 <__ccfg+0x59ca0>
    8038:	bd030104 	stflts	f0, [r3, #-16]
    803c:	02002e7e 	andeq	r2, r0, #2016	; 0x7e0
    8040:	04220104 	strteq	r0, [r2], #-260	; 0xfffffefc
    8044:	01c10302 	biceq	r0, r1, r2, lsl #6
    8048:	0301043c 	movweq	r0, #5180	; 0x143c
    804c:	2f3c7ec2 	svccs	0x003c7ec2
    8050:	01000502 	tsteq	r0, r2, lsl #10
    8054:	02050001 	andeq	r0, r5, #1
    8058:	00003c0c 	andeq	r3, r0, ip, lsl #24
    805c:	01018f03 	tsteq	r1, r3, lsl #30
    8060:	251d2314 	ldrcs	r2, [sp, #-788]	; 0xfffffcec
    8064:	2f3d761b 	svccs	0x003d761b
    8068:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    806c:	2121212d 			; <UNDEFINED> instruction: 0x2121212d
    8070:	01000c02 	tsteq	r0, r2, lsl #24
    8074:	02050001 	andeq	r0, r5, #1
    8078:	00003c58 	andeq	r3, r0, r8, asr ip
    807c:	0101a403 	tsteq	r1, r3, lsl #8
    8080:	1c2f9615 	stcne	6, cr9, [pc], #-84	; 8034 <__exidx_end+0x22b4>
    8084:	21252521 			; <UNDEFINED> instruction: 0x21252521
    8088:	0a032f1f 	beq	d3d0c <__ccfg+0xb3d64>
    808c:	2f3d3d66 	svccs	0x003d3d66
    8090:	03587303 	cmpeq	r8, #201326592	; 0xc000000
    8094:	3d3d6618 	ldccc	6, cr6, [sp, #-96]!	; 0xffffffa0
    8098:	5868032f 	stmdapl	r8!, {r0, r1, r2, r3, r5, r8, r9}^
    809c:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    80a0:	3d3d580b 	ldccc	8, cr5, [sp, #-44]!	; 0xffffffd4
    80a4:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    80a8:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7fbc <__exidx_end+0x223c>
    80ac:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7fc0 <__exidx_end+0x2240>
    80b0:	492f3e3d 	stmdbmi	pc!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    80b4:	01002f02 	tsteq	r0, r2, lsl #30
    80b8:	02050001 	andeq	r0, r5, #1
    80bc:	00003da8 	andeq	r3, r0, r8, lsr #27
    80c0:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    80c4:	03010903 	movweq	r0, #6403	; 0x1903
    80c8:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    80cc:	2121af20 			; <UNDEFINED> instruction: 0x2121af20
    80d0:	22221f23 	eorcs	r1, r2, #35, 30	; 0x8c
    80d4:	0b03262f 	bleq	d1998 <__ccfg+0xb19f0>
    80d8:	5a2f2d4a 	bpl	bd3608 <__ccfg+0xbb3660>
    80dc:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    80e0:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    80e4:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    80e8:	6f03f214 	svcvs	0x0003f214
    80ec:	4a23032e 	bmi	8c8dac <__ccfg+0x8a8e04>
    80f0:	4c3c6203 	lfmmi	f6, 4, [ip], #-12
    80f4:	32363222 	eorscc	r3, r6, #536870914	; 0x20000002
    80f8:	0350224c 	cmpeq	r0, #76, 4	; 0xc0000004
    80fc:	595eac09 	ldmdbpl	lr, {r0, r3, sl, fp, sp, pc}^
    8100:	62033626 	andvs	r3, r3, #39845888	; 0x2600000
    8104:	00160266 	andseq	r0, r6, r6, ror #4
    8108:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    810c:	003ec002 	eorseq	ip, lr, r2
    8110:	02f70300 	rscseq	r0, r7, #0, 6
    8114:	02ad2f01 	adceq	r2, sp, #1, 30
    8118:	01010003 	tsteq	r1, r3
    811c:	00020500 	andeq	r0, r2, r0, lsl #10
    8120:	03000000 	movweq	r0, #0
    8124:	24010382 	strcs	r0, [r1], #-898	; 0xfffffc7e
    8128:	002a025d 	eoreq	r0, sl, sp, asr r2
    812c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8130:	003ee002 	eorseq	lr, lr, r2
    8134:	03960300 	orrseq	r0, r6, #0, 6
    8138:	3e232101 	sufccs	f2, f3, f1
    813c:	00060241 	andeq	r0, r6, r1, asr #4
    8140:	01e90101 	mvneq	r0, r1, lsl #2
    8144:	00020000 	andeq	r0, r2, r0
    8148:	00000167 	andeq	r0, r0, r7, ror #2
    814c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8150:	0101000d 	tsteq	r1, sp
    8154:	00000101 	andeq	r0, r0, r1, lsl #2
    8158:	00000100 	andeq	r0, r0, r0, lsl #2
    815c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8160:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8164:	2f2e2e2f 	svccs	0x002e2e2f
    8168:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    816c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8170:	3a630062 	bcc	18c8300 <__ccfg+0x18a8358>
    8174:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8178:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    817c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8180:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8184:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8188:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    818c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8190:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8194:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8198:	6f6f745c 	svcvs	0x006f745c
    819c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    81a0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    81a4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    81a8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    81ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    81b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    81b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    81b8:	5f342d69 	svcpl	0x00342d69
    81bc:	30322d39 	eorscc	r2, r2, r9, lsr sp
    81c0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    81c4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    81c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    81cc:	61652d65 	cmnvs	r5, r5, ror #26
    81d0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    81d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    81d8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    81dc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    81e0:	6300656e 	movwvs	r6, #1390	; 0x56e
    81e4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    81e8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    81ec:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    81f0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    81f4:	5f393130 	svcpl	0x00393130
    81f8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    81fc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8200:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8204:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8208:	6f745c36 	svcvs	0x00745c36
    820c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8210:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8214:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8218:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    821c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8220:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8224:	61652d65 	cmnvs	r5, r5, ror #26
    8228:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    822c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8230:	71353130 	teqvc	r5, r0, lsr r1
    8234:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8238:	6f6e2d6d 	svcvs	0x006e2d6d
    823c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8240:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8244:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8248:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    824c:	00737973 	rsbseq	r7, r3, r3, ror r9
    8250:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8254:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    8258:	00000100 	andeq	r0, r0, r0, lsl #2
    825c:	5f6e6f61 	svcpl	0x006e6f61
    8260:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    8264:	00010068 	andeq	r0, r1, r8, rrx
    8268:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    826c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8270:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8274:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8278:	00020068 	andeq	r0, r2, r8, rrx
    827c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8280:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8284:	0300682e 	movweq	r6, #2094	; 0x82e
    8288:	65730000 	ldrbvs	r0, [r3, #-0]!
    828c:	5f707574 	svcpl	0x00707574
    8290:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8294:	00010068 	andeq	r0, r1, r8, rrx
    8298:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    829c:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    82a0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    82a4:	73000001 	movwvc	r0, #1
    82a8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    82ac:	0100682e 	tsteq	r0, lr, lsr #16
    82b0:	00000000 	andeq	r0, r0, r0
    82b4:	3efc0205 	cdpcc	2, 15, cr0, cr12, cr5, {0}
    82b8:	8d030000 	stchi	0, cr0, [r3, #-0]
    82bc:	03200102 			; <UNDEFINED> instruction: 0x03200102
    82c0:	0200200a 	andeq	r2, r0, #10
    82c4:	4f410104 	svcmi	0x00410104
    82c8:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    82cc:	0302041f 	movweq	r0, #9247	; 0x241f
    82d0:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    82d4:	7c860301 	stcvc	3, cr0, [r6], {1}
    82d8:	0342363c 	movteq	r3, #9788	; 0x263c
    82dc:	3d2d4a09 	vpushcc	{s8-s16}
    82e0:	2f1f2f2f 	svccs	0x001f2f2f
    82e4:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    82e8:	0a032548 	beq	d1810 <__ccfg+0xb1868>
    82ec:	3f5d4158 	svccc	0x005d4158
    82f0:	01001e02 	tsteq	r0, r2, lsl #28
    82f4:	02050001 	andeq	r0, r5, #1
    82f8:	00003fd0 	ldrdeq	r3, [r0], -r0
    82fc:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    8300:	33433028 	movtcc	r3, #12328	; 0x3028
    8304:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    8308:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    830c:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    8310:	03207903 			; <UNDEFINED> instruction: 0x03207903
    8314:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    8318:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    831c:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    8320:	4b69242d 	blmi	1a513dc <__ccfg+0x1a31434>
    8324:	01040200 	mrseq	r0, R12_usr
    8328:	13024d27 	movwne	r4, #11559	; 0x2d27
    832c:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    8330:	02000004 	andeq	r0, r0, #4
    8334:	00016500 	andeq	r6, r1, r0, lsl #10
    8338:	fb010200 	blx	48b42 <__ccfg+0x28b9a>
    833c:	01000d0e 	tsteq	r0, lr, lsl #26
    8340:	00010101 	andeq	r0, r1, r1, lsl #2
    8344:	00010000 	andeq	r0, r1, r0
    8348:	2f2e0100 	svccs	0x002e0100
    834c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8350:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8354:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    8358:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    835c:	63006269 	movwvs	r6, #617	; 0x269
    8360:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8364:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8368:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    836c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8370:	5f393130 	svcpl	0x00393130
    8374:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8378:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    837c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8380:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8384:	6f745c36 	svcvs	0x00745c36
    8388:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    838c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8390:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8394:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8398:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    839c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    83a0:	61652d65 	cmnvs	r5, r5, ror #26
    83a4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    83a8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    83ac:	71353130 	teqvc	r5, r0, lsr r1
    83b0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    83b4:	6f6e2d6d 	svcvs	0x006e2d6d
    83b8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    83bc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    83c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    83c4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    83c8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    83cc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    83d0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    83d4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    83d8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    83dc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    83e0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    83e4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    83e8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    83ec:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    83f0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    83f4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    83f8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    83fc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8294 <__exidx_end+0x2514>
    8400:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8404:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8408:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    840c:	6f6e2d6d 	svcvs	0x006e2d6d
    8410:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8414:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8418:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    841c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8420:	615c3371 	cmpvs	ip, r1, ror r3
    8424:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8428:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    842c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8430:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8434:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8438:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    843c:	65730000 	ldrbvs	r0, [r3, #-0]!
    8440:	5f707574 	svcpl	0x00707574
    8444:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8448:	00010063 	andeq	r0, r1, r3, rrx
    844c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8450:	725f7075 	subsvc	r7, pc, #117	; 0x75
    8454:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    8458:	00000100 	andeq	r0, r0, r0, lsl #2
    845c:	5f737973 	svcpl	0x00737973
    8460:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    8464:	0100682e 	tsteq	r0, lr, lsr #16
    8468:	645f0000 	ldrbvs	r0, [pc], #-0	; 8470 <__exidx_end+0x26f0>
    846c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8470:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8478 <__exidx_end+0x26f8>
    8474:	73657079 	cmnvc	r5, #121	; 0x79
    8478:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    847c:	735f0000 	cmpvc	pc, #0
    8480:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8484:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8488:	64000003 	strvs	r0, [r0], #-3
    848c:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    8490:	00000100 	andeq	r0, r0, r0, lsl #2
    8494:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    8498:	00010068 	andeq	r0, r1, r8, rrx
    849c:	05000000 	streq	r0, [r0, #-0]
    84a0:	00407402 	subeq	r7, r0, r2, lsl #8
    84a4:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    84a8:	200b0301 	andcs	r0, fp, r1, lsl #6
    84ac:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    84b0:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    84b4:	0302042e 	movweq	r0, #9262	; 0x242e
    84b8:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    84bc:	7fa80301 	svcvc	0x00a80301
    84c0:	03020420 	movweq	r0, #9248	; 0x2420
    84c4:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    84c8:	03010421 	movweq	r0, #5153	; 0x1421
    84cc:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    84d0:	652f214d 	strvs	r2, [pc, #-333]!	; 838b <__exidx_end+0x260b>
    84d4:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    84d8:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    84dc:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    84e0:	10033c73 	andne	r3, r3, r3, ror ip
    84e4:	21212120 			; <UNDEFINED> instruction: 0x21212120
    84e8:	000d0221 	andeq	r0, sp, r1, lsr #4
    84ec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84f0:	0040f002 	subeq	pc, r0, r2
    84f4:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    84f8:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    84fc:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    8500:	7a03200e 	bvc	d0540 <__ccfg+0xb0598>
    8504:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    8508:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    850c:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    8510:	01042130 	tsteq	r4, r0, lsr r1
    8514:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    8518:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    851c:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    8520:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    8524:	0015022d 	andseq	r0, r5, sp, lsr #4
    8528:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    852c:	00419c02 	subeq	r9, r1, r2, lsl #24
    8530:	049f0300 	ldreq	r0, [pc], #768	; 8538 <__exidx_end+0x27b8>
    8534:	010c0301 	tsteq	ip, r1, lsl #6
    8538:	03200903 			; <UNDEFINED> instruction: 0x03200903
    853c:	31212077 			; <UNDEFINED> instruction: 0x31212077
    8540:	30302733 	eorscc	r2, r0, r3, lsr r7
    8544:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    8548:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    854c:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    8550:	20760327 	rsbscs	r0, r6, r7, lsr #6
    8554:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    8558:	01010006 	tsteq	r1, r6
    855c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    8560:	03000041 	movweq	r0, #65	; 0x41
    8564:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    8568:	20790334 	rsbscs	r0, r9, r4, lsr r3
    856c:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    8570:	00010100 	andeq	r0, r1, r0, lsl #2
    8574:	00000205 	andeq	r0, r0, r5, lsl #4
    8578:	81030000 	mrshi	r0, (UNDEF: 3)
    857c:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    8580:	01000602 	tsteq	r0, r2, lsl #12
    8584:	02050001 	andeq	r0, r5, #1
    8588:	00004210 	andeq	r4, r0, r0, lsl r2
    858c:	01059503 	tsteq	r5, r3, lsl #10
    8590:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    8594:	01000602 	tsteq	r0, r2, lsl #12
    8598:	02050001 	andeq	r0, r5, #1
    859c:	00004220 	andeq	r4, r0, r0, lsr #4
    85a0:	0105b803 	tsteq	r5, r3, lsl #16
    85a4:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    85a8:	01000802 	tsteq	r0, r2, lsl #16
    85ac:	02050001 	andeq	r0, r5, #1
    85b0:	00004234 	andeq	r4, r0, r4, lsr r2
    85b4:	0105db03 	tsteq	r5, r3, lsl #22
    85b8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    85bc:	77032009 	strvc	r2, [r3, -r9]
    85c0:	20090320 	andcs	r0, r9, r0, lsr #6
    85c4:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    85c8:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    85cc:	27473230 	smlaldxcs	r3, r7, r0, r2
    85d0:	03473230 	movteq	r3, #29232	; 0x7230
    85d4:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    85d8:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    85dc:	00010100 	andeq	r0, r1, r0, lsl #2
    85e0:	42980205 	addsmi	r0, r8, #1342177280	; 0x50000000
    85e4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    85e8:	21150106 	tstcs	r5, r6, lsl #2
    85ec:	20090355 	andcs	r0, r9, r5, asr r3
    85f0:	01000302 	tsteq	r0, r2, lsl #6
    85f4:	02050001 	andeq	r0, r5, #1
    85f8:	000042ac 	andeq	r4, r0, ip, lsr #5
    85fc:	0106bc03 	tsteq	r6, r3, lsl #24
    8600:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    8604:	03022009 	movweq	r2, #8201	; 0x2009
    8608:	00010100 	andeq	r0, r1, r0, lsl #2
    860c:	42c00205 	sbcmi	r0, r0, #1342177280	; 0x50000000
    8610:	cf030000 	svcgt	0x00030000
    8614:	21150106 	tstcs	r5, r6, lsl #2
    8618:	20090355 	andcs	r0, r9, r5, asr r3
    861c:	01000302 	tsteq	r0, r2, lsl #6
    8620:	02050001 	andeq	r0, r5, #1
    8624:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    8628:	0106e203 	tsteq	r6, r3, lsl #4
    862c:	2f432116 	svccs	0x00432116
    8630:	40207a03 	eormi	r7, r0, r3, lsl #20
    8634:	71032c35 	tstvc	r3, r5, lsr ip
    8638:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    863c:	01000302 	tsteq	r0, r2, lsl #6
    8640:	02050001 	andeq	r0, r5, #1
    8644:	000042fc 	strdeq	r4, [r0], -ip
    8648:	01078203 	tsteq	r7, r3, lsl #4
    864c:	06023316 			; <UNDEFINED> instruction: 0x06023316
    8650:	00010100 	andeq	r0, r1, r0, lsl #2
    8654:	430c0205 	movwmi	r0, #49669	; 0xc205
    8658:	94030000 	strls	r0, [r3], #-0
    865c:	21160107 	tstcs	r6, r7, lsl #2
    8660:	33342943 	teqcc	r4, #1097728	; 0x10c000
    8664:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    8668:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    866c:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    8670:	01010005 	tsteq	r1, r5
    8674:	38020500 	stmdacc	r2, {r8, sl}
    8678:	03000043 	movweq	r0, #67	; 0x43
    867c:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    8680:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    8684:	00030220 	andeq	r0, r3, r0, lsr #4
    8688:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    868c:	00434c02 	subeq	r4, r3, r2, lsl #24
    8690:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    8694:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    8698:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    869c:	01010003 	tsteq	r1, r3
    86a0:	60020500 	andvs	r0, r2, r0, lsl #10
    86a4:	03000043 	movweq	r0, #67	; 0x43
    86a8:	200102a7 	andcs	r0, r1, r7, lsr #5
    86ac:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    86b0:	2f4e211f 	svccs	0x004e211f
    86b4:	ac02d103 	stfged	f5, [r2], {3}
    86b8:	207db903 	rsbscs	fp, sp, r3, lsl #18
    86bc:	2002c703 	andcs	ip, r2, r3, lsl #14
    86c0:	207db903 	rsbscs	fp, sp, r3, lsl #18
    86c4:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    86c8:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    86cc:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    86d0:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    86d4:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    86d8:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    86dc:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    86e0:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    86e4:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    86e8:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    86ec:	00010100 	andeq	r0, r1, r0, lsl #2
    86f0:	44700205 	ldrbtmi	r0, [r0], #-517	; 0xfffffdfb
    86f4:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    86f8:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    86fc:	0e030104 	adfeqs	f0, f3, f4
    8700:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    8704:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    8708:	207a034b 	rsbscs	r0, sl, fp, asr #6
    870c:	02004134 	andeq	r4, r0, #52, 2
    8710:	5b3d0104 	blpl	f48b28 <__ccfg+0xf28b80>
    8714:	000b0231 	andeq	r0, fp, r1, lsr r2
    8718:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    871c:	0044d402 	subeq	sp, r4, r2, lsl #8
    8720:	08930300 	ldmeq	r3, {r8, r9}
    8724:	01090301 	tsteq	r9, r1, lsl #6
    8728:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    872c:	01040200 	mrseq	r0, R12_usr
    8730:	07024b3d 	smladxeq	r2, sp, fp, r4
    8734:	00010100 	andeq	r0, r1, r0, lsl #2
    8738:	44fc0205 	ldrbtmi	r0, [ip], #517	; 0x205
    873c:	9b030000 	blls	c8744 <__ccfg+0xa879c>
    8740:	09030103 	stmdbeq	r3, {r0, r1, r8}
    8744:	3c770301 	ldclcc	3, cr0, [r7], #-4
    8748:	20090320 	andcs	r0, r9, r0, lsr #6
    874c:	03313052 	teqeq	r1, #82	; 0x52
    8750:	2b234a0a 	blcs	8daf80 <__ccfg+0x8bafd8>
    8754:	2f24484c 	svccs	0x0024484c
    8758:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    875c:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    8760:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 8620 <__exidx_end+0x28a0>
    8764:	4b845d2f 	blmi	fe11fc28 <_estack+0xde11ac28>
    8768:	003d243d 	eorseq	r2, sp, sp, lsr r4
    876c:	4b010402 	blmi	4977c <__ccfg+0x297d4>
    8770:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    8774:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    8778:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    877c:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    8780:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    8784:	001f024a 	andseq	r0, pc, sl, asr #4
    8788:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    878c:	00020000 	andeq	r0, r2, r0
    8790:	000001a8 	andeq	r0, r0, r8, lsr #3
    8794:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8798:	0101000d 	tsteq	r1, sp
    879c:	00000101 	andeq	r0, r0, r1, lsl #2
    87a0:	00000100 	andeq	r0, r0, r0, lsl #2
    87a4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    87a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    87ac:	2f2e2e2f 	svccs	0x002e2e2f
    87b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    87b4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    87b8:	3a630062 	bcc	18c8948 <__ccfg+0x18a89a0>
    87bc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    87c0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    87c4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    87c8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    87cc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    87d0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    87d4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    87d8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    87dc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    87e0:	6f6f745c 	svcvs	0x006f745c
    87e4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    87e8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    87ec:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    87f0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    87f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    87f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    87fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8800:	5f342d69 	svcpl	0x00342d69
    8804:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8808:	33713531 	cmncc	r1, #205520896	; 0xc400000
    880c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8810:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8814:	61652d65 	cmnvs	r5, r5, ror #26
    8818:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    881c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8820:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8824:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8828:	6300656e 	movwvs	r6, #1390	; 0x56e
    882c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8830:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8834:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8838:	30302e30 	eorscc	r2, r0, r0, lsr lr
    883c:	5f393130 	svcpl	0x00393130
    8840:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8844:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8848:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    884c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8850:	6f745c36 	svcvs	0x00745c36
    8854:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8858:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    885c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8860:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8864:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8868:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    886c:	61652d65 	cmnvs	r5, r5, ror #26
    8870:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8874:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8878:	71353130 	teqvc	r5, r0, lsr r1
    887c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8880:	6f6e2d6d 	svcvs	0x006e2d6d
    8884:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8888:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    888c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8890:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8894:	00737973 	rsbseq	r7, r3, r3, ror r9
    8898:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    889c:	2f2e2e2f 	svccs	0x002e2e2f
    88a0:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    88a4:	0000636e 	andeq	r6, r0, lr, ror #6
    88a8:	5f737973 	svcpl	0x00737973
    88ac:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    88b0:	0100632e 	tsteq	r0, lr, lsr #6
    88b4:	6f610000 	svcvs	0x00610000
    88b8:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    88bc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    88c0:	6f000001 	svcvs	0x00000001
    88c4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    88c8:	00000100 	andeq	r0, r0, r0, lsl #2
    88cc:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    88d0:	0100682e 	tsteq	r0, lr, lsr #16
    88d4:	65730000 	ldrbvs	r0, [r3, #-0]!
    88d8:	5f707574 	svcpl	0x00707574
    88dc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    88e0:	00010068 	andeq	r0, r1, r8, rrx
    88e4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    88e8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    88ec:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    88f0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    88f4:	00020068 	andeq	r0, r2, r8, rrx
    88f8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    88fc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8900:	0300682e 	movweq	r6, #2094	; 0x82e
    8904:	77680000 	strbvc	r0, [r8, -r0]!
    8908:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    890c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8910:	00000400 	andeq	r0, r0, r0, lsl #8
    8914:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8918:	00010068 	andeq	r0, r1, r8, rrx
    891c:	73797300 	cmnvc	r9, #0, 6
    8920:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    8924:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    8928:	61000001 	tstvs	r0, r1
    892c:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    8930:	6f6d7461 	svcvs	0x006d7461
    8934:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    8938:	00000001 	andeq	r0, r0, r1
    893c:	00020500 	andeq	r0, r2, r0, lsl #10
    8940:	03000000 	movweq	r0, #0
    8944:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    8948:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    894c:	03010401 	movweq	r0, #5121	; 0x1401
    8950:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    8954:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    8958:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    895c:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    8960:	00010420 	andeq	r0, r1, r0, lsr #8
    8964:	03010402 	movweq	r0, #5122	; 0x1402
    8968:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    896c:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    8970:	89670104 	stmdbhi	r7!, {r2, r8}^
    8974:	4a09034b 	bmi	2496a8 <__ccfg+0x229700>
    8978:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    897c:	01045801 	tsteq	r4, r1, lsl #16
    8980:	4a7ee403 	bmi	1fc1994 <__ccfg+0x1fa19ec>
    8984:	01040200 	mrseq	r0, R12_usr
    8988:	0304045d 	movweq	r0, #17501	; 0x445d
    898c:	00740381 	rsbseq	r0, r4, r1, lsl #7
    8990:	03010402 	movweq	r0, #5122	; 0x1402
    8994:	01043c14 	tsteq	r4, r4, lsl ip
    8998:	01040200 	mrseq	r0, R12_usr
    899c:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    89a0:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    89a4:	1c322e03 	ldcne	14, cr2, [r2], #-12
    89a8:	20420324 	subcs	r0, r2, r4, lsr #6
    89ac:	01040200 	mrseq	r0, R12_usr
    89b0:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    89b4:	04020001 	streq	r0, [r2], #-1
    89b8:	7cf70301 	ldclvc	3, cr0, [r7], #4
    89bc:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    89c0:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    89c4:	1b24384b 	blne	916af8 <__ccfg+0x8f6b50>
    89c8:	e7030404 	str	r0, [r3, -r4, lsl #8]
    89cc:	02002e02 	andeq	r2, r0, #2, 28
    89d0:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    89d4:	0001043c 	andeq	r0, r1, ip, lsr r4
    89d8:	03010402 	movweq	r0, #5122	; 0x1402
    89dc:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    89e0:	01001702 	tsteq	r0, r2, lsl #14
    89e4:	02050001 	andeq	r0, r5, #1
    89e8:	0000464c 	andeq	r4, r0, ip, asr #12
    89ec:	0101da03 	tsteq	r1, r3, lsl #20
    89f0:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    89f4:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    89f8:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    89fc:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    8a00:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    8a04:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    8a08:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    8a0c:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    8a10:	1b32432e 	blne	c996d0 <__ccfg+0xc79728>
    8a14:	03050433 	movweq	r0, #21555	; 0x5433
    8a18:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    8a1c:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    8a20:	51030504 	tstpl	r3, r4, lsl #10
    8a24:	0301042e 	movweq	r0, #5166	; 0x142e
    8a28:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    8a2c:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    8a30:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    8a34:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    8a38:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    8a3c:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    8a40:	58060104 	stmdapl	r6, {r2, r8}
    8a44:	4a0f0306 	bmi	3c9664 <__ccfg+0x3a96bc>
    8a48:	2a2f3fca 	bcs	bd8978 <__ccfg+0xbb89d0>
    8a4c:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    8a50:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    8a54:	213e3d3e 	teqcs	lr, lr, lsr sp
    8a58:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    8a5c:	31202603 			; <UNDEFINED> instruction: 0x31202603
    8a60:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    8a64:	0b03213e 	bleq	d0f64 <__ccfg+0xb0fbc>
    8a68:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    8a6c:	2009033c 	andcs	r0, r9, ip, lsr r3
    8a70:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    8a74:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    8a78:	0f032071 	svceq	0x00032071
    8a7c:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    8a80:	21226521 			; <UNDEFINED> instruction: 0x21226521
    8a84:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    8a88:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    8a8c:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    8a90:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    8a94:	01002102 	tsteq	r0, r2, lsl #2
    8a98:	02050001 	andeq	r0, r5, #1
    8a9c:	0000486c 	andeq	r4, r0, ip, ror #16
    8aa0:	0103b603 	tsteq	r3, r3, lsl #12
    8aa4:	2f224027 	svccs	0x00224027
    8aa8:	404e24a2 	submi	r2, lr, r2, lsr #9
    8aac:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    8ab0:	01010009 	tsteq	r1, r9
    8ab4:	00020500 	andeq	r0, r2, r0, lsl #10
    8ab8:	03000000 	movweq	r0, #0
    8abc:	030103e5 	movweq	r0, #5093	; 0x13e5
    8ac0:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    8ac4:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    8ac8:	211f322d 	tstcs	pc, sp, lsr #4
    8acc:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    8ad0:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    8ad4:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    8ad8:	0c023e1e 	stceq	14, cr3, [r2], {30}
    8adc:	00010100 	andeq	r0, r1, r0, lsl #2
    8ae0:	48cc0205 	stmiami	ip, {r0, r2, r9}^
    8ae4:	a6030000 	strge	r0, [r3], -r0
    8ae8:	3f130104 	svccc	0x00130104
    8aec:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    8af0:	2b010100 	blcs	48ef8 <__ccfg+0x28f50>
    8af4:	02000002 	andeq	r0, r0, #2
    8af8:	00014300 	andeq	r4, r1, r0, lsl #6
    8afc:	fb010200 	blx	49306 <__ccfg+0x2935e>
    8b00:	01000d0e 	tsteq	r0, lr, lsl #26
    8b04:	00010101 	andeq	r0, r1, r1, lsl #2
    8b08:	00010000 	andeq	r0, r1, r0
    8b0c:	2f2e0100 	svccs	0x002e0100
    8b10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8b14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8b18:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    8b1c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    8b20:	63006269 	movwvs	r6, #617	; 0x269
    8b24:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8b28:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8b2c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8b30:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8b34:	5f393130 	svcpl	0x00393130
    8b38:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8b3c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8b40:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8b44:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8b48:	6f745c36 	svcvs	0x00745c36
    8b4c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8b50:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8b54:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8b58:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8b5c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8b60:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8b64:	61652d65 	cmnvs	r5, r5, ror #26
    8b68:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8b6c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8b70:	71353130 	teqvc	r5, r0, lsr r1
    8b74:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8b78:	6f6e2d6d 	svcvs	0x006e2d6d
    8b7c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8b80:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8b84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8b88:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8b8c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8b90:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8b94:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8b98:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8b9c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8ba0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8ba4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8ba8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8bac:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8bb0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8bb4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8bb8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8bbc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8bc0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8a58 <__exidx_end+0x2cd8>
    8bc4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8bc8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8bcc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8bd0:	6f6e2d6d 	svcvs	0x006e2d6d
    8bd4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8bd8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8bdc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8be0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8be4:	615c3371 	cmpvs	ip, r1, ror r3
    8be8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8bec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8bf0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8bf4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8bf8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8bfc:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8c00:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    8c04:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    8c08:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    8c0c:	00000100 	andeq	r0, r0, r0, lsl #2
    8c10:	70696863 	rsbvc	r6, r9, r3, ror #16
    8c14:	6f666e69 	svcvs	0x00666e69
    8c18:	0100682e 	tsteq	r0, lr, lsr #16
    8c1c:	645f0000 	ldrbvs	r0, [pc], #-0	; 8c24 <__exidx_end+0x2ea4>
    8c20:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8c24:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8c2c <__exidx_end+0x2eac>
    8c28:	73657079 	cmnvc	r5, #121	; 0x79
    8c2c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8c30:	735f0000 	cmpvc	pc, #0
    8c34:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8c38:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8c3c:	00000003 	andeq	r0, r0, r3
    8c40:	00020500 	andeq	r0, r2, r0, lsl #10
    8c44:	03000000 	movweq	r0, #0
    8c48:	130100c4 	movwne	r0, #4292	; 0x10c4
    8c4c:	0006022f 	andeq	r0, r6, pc, lsr #4
    8c50:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8c54:	00000002 	andeq	r0, r0, r2
    8c58:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    8c5c:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    8c60:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    8c64:	00010100 	andeq	r0, r1, r0, lsl #2
    8c68:	48e40205 	stmiami	r4!, {r0, r2, r9}^
    8c6c:	e6030000 	str	r0, [r3], -r0
    8c70:	2a1a0100 	bcs	689078 <__ccfg+0x6690d0>
    8c74:	0302044e 	movweq	r0, #9294	; 0x244e
    8c78:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    8c7c:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    8c80:	4b4c232e 	blmi	1311940 <__ccfg+0x12f1998>
    8c84:	242f724b 	strtcs	r7, [pc], #-587	; 8c8c <__exidx_end+0x2f0c>
    8c88:	01000502 	tsteq	r0, r2, lsl #10
    8c8c:	02050001 	andeq	r0, r5, #1
    8c90:	00000000 	andeq	r0, r0, r0
    8c94:	01018303 	tsteq	r1, r3, lsl #6
    8c98:	b0030204 	andlt	r0, r3, r4, lsl #4
    8c9c:	01042001 	tsteq	r4, r1
    8ca0:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    8ca4:	03233139 			; <UNDEFINED> instruction: 0x03233139
    8ca8:	0a033c78 	beq	d7e90 <__ccfg+0xb7ee8>
    8cac:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    8cb0:	00050225 	andeq	r0, r5, r5, lsr #4
    8cb4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8cb8:	00493002 	subeq	r3, r9, r2
    8cbc:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    8cc0:	03020401 	movweq	r0, #9217	; 0x2401
    8cc4:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    8cc8:	6f032e11 	svcvs	0x00032e11
    8ccc:	2011033c 	andscs	r0, r1, ip, lsr r3
    8cd0:	03010425 	movweq	r0, #5157	; 0x1425
    8cd4:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    8cd8:	21222195 			; <UNDEFINED> instruction: 0x21222195
    8cdc:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    8ce0:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    8ce4:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    8ce8:	03206403 			; <UNDEFINED> instruction: 0x03206403
    8cec:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    8cf0:	00010100 	andeq	r0, r1, r0, lsl #2
    8cf4:	499c0205 	ldmibmi	ip, {r0, r2, r9}
    8cf8:	e0030000 	and	r0, r3, r0
    8cfc:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8d00:	2001a403 	andcs	sl, r1, r3, lsl #8
    8d04:	dd030104 	stfles	f0, [r3, #-16]
    8d08:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    8d0c:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    8d10:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    8d14:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    8d18:	09030104 	stmdbeq	r3, {r2, r8}
    8d1c:	0002022e 	andeq	r0, r2, lr, lsr #4
    8d20:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    8d24:	00020000 	andeq	r0, r2, r0
    8d28:	00000142 	andeq	r0, r0, r2, asr #2
    8d2c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8d30:	0101000d 	tsteq	r1, sp
    8d34:	00000101 	andeq	r0, r0, r1, lsl #2
    8d38:	00000100 	andeq	r0, r0, r0, lsl #2
    8d3c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8d40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8d44:	2f2e2e2f 	svccs	0x002e2e2f
    8d48:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8d4c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8d50:	3a630062 	bcc	18c8ee0 <__ccfg+0x18a8f38>
    8d54:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8d58:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8d5c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8d60:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8d64:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8d68:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8d6c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8d70:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8d74:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8d78:	6f6f745c 	svcvs	0x006f745c
    8d7c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8d80:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8d84:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8d88:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8d8c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8d90:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8d94:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8d98:	5f342d69 	svcpl	0x00342d69
    8d9c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8da0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8da4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8da8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8dac:	61652d65 	cmnvs	r5, r5, ror #26
    8db0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8db4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8db8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8dbc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8dc0:	6300656e 	movwvs	r6, #1390	; 0x56e
    8dc4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8dc8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8dcc:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8dd0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8dd4:	5f393130 	svcpl	0x00393130
    8dd8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8ddc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8de0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8de4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8de8:	6f745c36 	svcvs	0x00745c36
    8dec:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8df0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8df4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8df8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8dfc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8e00:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8e04:	61652d65 	cmnvs	r5, r5, ror #26
    8e08:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8e0c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8e10:	71353130 	teqvc	r5, r0, lsr r1
    8e14:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8e18:	6f6e2d6d 	svcvs	0x006e2d6d
    8e1c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8e20:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8e24:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8e28:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8e2c:	00737973 	rsbseq	r7, r3, r3, ror r9
    8e30:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8e34:	0100682e 	tsteq	r0, lr, lsr #16
    8e38:	64640000 	strbtvs	r0, [r4], #-0
    8e3c:	00632e69 	rsbeq	r2, r3, r9, ror #28
    8e40:	5f000001 	svcpl	0x00000001
    8e44:	61666564 	cmnvs	r6, r4, ror #10
    8e48:	5f746c75 	svcpl	0x00746c75
    8e4c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8e50:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8e54:	5f000002 	svcpl	0x00000002
    8e58:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8e5c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8e60:	00000300 	andeq	r0, r0, r0, lsl #6
    8e64:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    8e68:	00010068 	andeq	r0, r1, r8, rrx
    8e6c:	05000000 	streq	r0, [r0, #-0]
    8e70:	0049b402 	subeq	fp, r9, r2, lsl #8
    8e74:	01880300 	orreq	r0, r8, r0, lsl #6
    8e78:	30312001 	eorscc	r2, r1, r1
    8e7c:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    8e80:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    8e84:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8e88:	02050002 	andeq	r0, r5, #2
    8e8c:	000049dc 	ldrdeq	r4, [r0], -ip
    8e90:	0100c303 	tsteq	r0, r3, lsl #6
    8e94:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    8e98:	01010004 	tsteq	r1, r4
    8e9c:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8ea0:	00000002 	andeq	r0, r0, r2
    8ea4:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    8ea8:	010e0301 	tsteq	lr, r1, lsl #6
    8eac:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    8eb0:	4f35352e 	svcmi	0x0035352e
    8eb4:	01000402 	tsteq	r0, r2, lsl #8
    8eb8:	00020401 	andeq	r0, r2, r1, lsl #8
    8ebc:	00000205 	andeq	r0, r0, r5, lsl #4
    8ec0:	85030000 	strhi	r0, [r3, #-0]
    8ec4:	11030101 	tstne	r3, r1, lsl #2
    8ec8:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    8ecc:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    8ed0:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    8ed4:	7103342e 	tstvc	r3, lr, lsr #8
    8ed8:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    8edc:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    8ee0:	01010002 	tsteq	r1, r2
    8ee4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8ee8:	00000002 	andeq	r0, r0, r2
    8eec:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    8ef0:	20110301 	andscs	r0, r1, r1, lsl #6
    8ef4:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    8ef8:	2f201303 	svccs	0x00201303
    8efc:	69030104 	stmdbvs	r3, {r2, r8}
    8f00:	234d3020 	movtcs	r3, #53280	; 0xd020
    8f04:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8f08:	1d030204 	sfmne	f0, 4, [r3, #-16]
    8f0c:	0005022e 	andeq	r0, r5, lr, lsr #4
    8f10:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8f14:	00020500 	andeq	r0, r2, r0, lsl #10
    8f18:	03000000 	movweq	r0, #0
    8f1c:	030101de 	movweq	r0, #4574	; 0x11de
    8f20:	031b2011 	tsteq	fp, #17
    8f24:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    8f28:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    8f2c:	7fb90301 	svcvc	0x00b90301
    8f30:	234d3020 	movtcs	r3, #53280	; 0xd020
    8f34:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8f38:	c8030204 	stmdagt	r3, {r2, r9}
    8f3c:	02422e00 	subeq	r2, r2, #0, 28
    8f40:	01010005 	tsteq	r1, r5
    8f44:	00000243 	andeq	r0, r0, r3, asr #4
    8f48:	01950003 	orrseq	r0, r5, r3
    8f4c:	01020000 	mrseq	r0, (UNDEF: 2)
    8f50:	000d0efb 	strdeq	r0, [sp], -fp
    8f54:	01010101 	tsteq	r1, r1, lsl #2
    8f58:	01000000 	mrseq	r0, (UNDEF: 0)
    8f5c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8f60:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8f64:	2f2e2e2f 	svccs	0x002e2e2f
    8f68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8f6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8f70:	2f2e2e2f 	svccs	0x002e2e2f
    8f74:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8f78:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f7c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8f80:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 8e00 <__exidx_end+0x3080>
    8f84:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8f88:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    8f8c:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    8f90:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8f94:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    8f98:	00676e69 	rsbeq	r6, r7, r9, ror #28
    8f9c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8fa0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8fa4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8fa8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8fac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8fb0:	61652d65 	cmnvs	r5, r5, ror #26
    8fb4:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8fb8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8fbc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8fc0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8fc4:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8fc8:	2f646c69 	svccs	0x00646c69
    8fcc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8fd0:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8fd4:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8fd8:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8fdc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8fe0:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8fe4:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8fe8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8fec:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8ff0:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8ff4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8ff8:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8ffc:	2f007379 	svccs	0x00007379
    9000:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9004:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    9008:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    900c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    9010:	2f787945 	svccs	0x00787945
    9014:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9018:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    901c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    9020:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9024:	2f62696c 	svccs	0x0062696c
    9028:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    902c:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    9030:	00656c61 	rsbeq	r6, r5, r1, ror #24
    9034:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9038:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    903c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9040:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    9044:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    9048:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    904c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9050:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    9054:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    9058:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    905c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9060:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9064:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9068:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    906c:	70636d65 	rsbvc	r6, r3, r5, ror #26
    9070:	00632e79 	rsbeq	r2, r3, r9, ror lr
    9074:	73000001 	movwvc	r0, #1
    9078:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    907c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    9080:	5f000002 	svcpl	0x00000002
    9084:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    9088:	00682e73 	rsbeq	r2, r8, r3, ror lr
    908c:	72000003 	andvc	r0, r0, #3
    9090:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    9094:	0300682e 	movweq	r6, #2094	; 0x82e
    9098:	6f6c0000 	svcvs	0x006c0000
    909c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    90a0:	00000300 	andeq	r0, r0, r0, lsl #6
    90a4:	6c746573 	cfldr64vs	mvdx6, [r4], #-460	; 0xfffffe34
    90a8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    90ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
    90b0:	73000004 	movwvc	r0, #4
    90b4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    90b8:	00682e62 	rsbeq	r2, r8, r2, ror #28
    90bc:	77000005 	strvc	r0, [r0, -r5]
    90c0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    90c4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    90c8:	6f6c0000 	svcvs	0x006c0000
    90cc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    90d0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    90d4:	74730000 	ldrbtvc	r0, [r3], #-0
    90d8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    90dc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    90e0:	05000000 	streq	r0, [r0, #-0]
    90e4:	02050001 	andeq	r0, r5, #1
    90e8:	000049e4 	andeq	r4, r0, r4, ror #19
    90ec:	05013303 	streq	r3, [r1, #-771]	; 0xfffffcfd
    90f0:	010e0303 	tsteq	lr, r3, lsl #6
    90f4:	16131313 			; <UNDEFINED> instruction: 0x16131313
    90f8:	03060105 	movweq	r0, #24837	; 0x6105
    90fc:	0605016b 	streq	r0, [r5], -fp, ror #2
    9100:	053c1503 	ldreq	r1, [ip, #-1283]!	; 0xfffffafd
    9104:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    9108:	18052e01 	stmdane	r5, {r0, r9, sl, fp, sp}
    910c:	01040200 	mrseq	r0, R12_usr
    9110:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    9114:	0b059e01 	bleq	170920 <__ccfg+0x150978>
    9118:	1a052806 	bne	153138 <__ccfg+0x133190>
    911c:	39301306 	ldmdbcc	r0!, {r1, r2, r8, r9, ip}
    9120:	2f060b05 	svccs	0x00060b05
    9124:	061a0513 			; <UNDEFINED> instruction: 0x061a0513
    9128:	060b0501 	streq	r0, [fp], -r1, lsl #10
    912c:	0106133d 	tsteq	r6, sp, lsr r3
    9130:	7a030d05 	bvc	cc54c <__ccfg+0xac5a4>
    9134:	4a0a0320 	bmi	289dbc <__ccfg+0x269e14>
    9138:	20203c20 	eorcs	r3, r0, r0, lsr #24
    913c:	30060b05 	andcc	r0, r6, r5, lsl #22
    9140:	01061a05 	tsteq	r6, r5, lsl #20
    9144:	2f060b05 	svccs	0x00060b05
    9148:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    914c:	204a581d 	subcs	r5, sl, sp, lsl r8
    9150:	0b030e05 	bleq	cc96c <__ccfg+0xac9c4>
    9154:	20090520 	andcs	r0, r9, r0, lsr #10
    9158:	2e2e5e03 	cdpcs	14, 2, cr5, cr14, cr3, {0}
    915c:	03060505 	movweq	r0, #25861	; 0x6505
    9160:	0c052023 	stceq	0, cr2, [r5], {35}	; 0x23
    9164:	09050106 	stmdbeq	r5, {r1, r2, r8}
    9168:	3301053b 	movwcc	r0, #5435	; 0x153b
    916c:	59030905 	stmdbpl	r3, {r0, r2, r8, fp}
    9170:	030e0558 	movweq	r0, #58712	; 0xe558
    9174:	09052022 	stmdbeq	r5, {r1, r5, sp}
    9178:	3c0e0520 	cfstr32cc	mvfx0, [lr], {32}
    917c:	5e030905 	vmlapl.f16	s0, s6, s10	; <UNPREDICTABLE>
    9180:	030d0520 	movweq	r0, #54560	; 0xd520
    9184:	02022e17 	andeq	r2, r2, #368	; 0x170
    9188:	71010100 	mrsvc	r0, (UNDEF: 17)
    918c:	03000001 	movweq	r0, #1
    9190:	00011700 	andeq	r1, r1, r0, lsl #14
    9194:	fb010200 	blx	4999e <__ccfg+0x299f6>
    9198:	01000d0e 	tsteq	r0, lr, lsl #26
    919c:	00010101 	andeq	r0, r1, r1, lsl #2
    91a0:	00010000 	andeq	r0, r1, r0
    91a4:	2e2e0100 	sufcse	f0, f6, f0
    91a8:	2f2e2e2f 	svccs	0x002e2e2f
    91ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    91b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    91b4:	2f2e2e2f 	svccs	0x002e2e2f
    91b8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    91bc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    91c0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    91c4:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    91c8:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    91cc:	752f0062 	strvc	r0, [pc, #-98]!	; 9172 <__exidx_end+0x33f2>
    91d0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 900c <__exidx_end+0x328c>
    91d4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    91d8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    91dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    91e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    91e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    91e8:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    91ec:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    91f0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    91f4:	2f006564 	svccs	0x00006564
    91f8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    91fc:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    9200:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9204:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    9208:	2f787945 	svccs	0x00787945
    920c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9210:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    9214:	302e332e 	eorcc	r3, lr, lr, lsr #6
    9218:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    921c:	2f62696c 	svccs	0x0062696c
    9220:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    9224:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    9228:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    922c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    9230:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    9234:	2f646c69 	svccs	0x00646c69
    9238:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    923c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    9240:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    9244:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    9248:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    924c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    9250:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    9254:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9258:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    925c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    9260:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    9264:	00006564 	andeq	r6, r0, r4, ror #10
    9268:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    926c:	0100632e 	tsteq	r0, lr, lsr #6
    9270:	74730000 	ldrbtvc	r0, [r3], #-0
    9274:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    9278:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    927c:	745f0000 	ldrbvc	r0, [pc], #-0	; 9284 <__exidx_end+0x3504>
    9280:	73657079 	cmnvc	r5, #121	; 0x79
    9284:	0300682e 	movweq	r6, #2094	; 0x82e
    9288:	65720000 	ldrbvs	r0, [r2, #-0]!
    928c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    9290:	00030068 	andeq	r0, r3, r8, rrx
    9294:	636f6c00 	cmnvs	pc, #0, 24
    9298:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    929c:	73000003 	movwvc	r0, #3
    92a0:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    92a4:	00682e62 	rsbeq	r2, r8, r2, ror #28
    92a8:	00000004 	andeq	r0, r0, r4
    92ac:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    92b0:	004a9002 	subeq	r9, sl, r2
    92b4:	013e0300 	teqeq	lr, r0, lsl #6
    92b8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    92bc:	0305141d 	movweq	r1, #21533	; 0x541d
    92c0:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    92c4:	20202e01 	eorcs	r2, r0, r1, lsl #28
    92c8:	062f0105 	strteq	r0, [pc], -r5, lsl #2
    92cc:	1303054e 	movwne	r0, #13646	; 0x354e
    92d0:	01061205 	tsteq	r6, r5, lsl #4
    92d4:	051f0105 	ldreq	r0, [pc, #-261]	; 91d7 <__exidx_end+0x3457>
    92d8:	1d052112 	stfnes	f2, [r5, #-72]	; 0xffffffb8
    92dc:	03052506 	movweq	r2, #21766	; 0x5506
    92e0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    92e4:	201e0513 	andscs	r0, lr, r3, lsl r5
    92e8:	2e44054a 	cdpcs	5, 4, cr0, cr4, cr10, {2}
    92ec:	05491b05 	strbeq	r1, [r9, #-2821]	; 0xfffff4fb
    92f0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    92f4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    92f8:	02012f01 	andeq	r2, r1, #1, 30
    92fc:	0101000a 	tsteq	r1, sl
    9300:	000000dc 	ldrdeq	r0, [r0], -ip
    9304:	00d60003 	sbcseq	r0, r6, r3
    9308:	01020000 	mrseq	r0, (UNDEF: 2)
    930c:	000d0efb 	strdeq	r0, [sp], -fp
    9310:	01010101 	tsteq	r1, r1, lsl #2
    9314:	01000000 	mrseq	r0, (UNDEF: 0)
    9318:	2f010000 	svccs	0x00010000
    931c:	2f727375 	svccs	0x00727375
    9320:	2f62696c 	svccs	0x0062696c
    9324:	2f636367 	svccs	0x00636367
    9328:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    932c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    9330:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    9334:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    9338:	2f312e33 	svccs	0x00312e33
    933c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9340:	00656475 	rsbeq	r6, r5, r5, ror r4
    9344:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9348:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    934c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9350:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    9354:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    9358:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    935c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9360:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    9364:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    9368:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    936c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9370:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9374:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9378:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    937c:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    9380:	2f2e2e2f 	svccs	0x002e2e2f
    9384:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9388:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    938c:	2f2e2e2f 	svccs	0x002e2e2f
    9390:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    9394:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9398:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    939c:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    93a0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    93a4:	74730000 	ldrbtvc	r0, [r3], #-0
    93a8:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    93ac:	0100682e 	tsteq	r0, lr, lsr #16
    93b0:	745f0000 	ldrbvc	r0, [pc], #-0	; 93b8 <__exidx_end+0x3638>
    93b4:	73657079 	cmnvc	r5, #121	; 0x79
    93b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    93bc:	65720000 	ldrbvs	r0, [r2, #-0]!
    93c0:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    93c4:	00020068 	andeq	r0, r2, r8, rrx
    93c8:	636f6c00 	cmnvs	pc, #0, 24
    93cc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    93d0:	69000002 	stmdbvs	r0, {r1}
    93d4:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    93d8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    93dc:	00000003 	andeq	r0, r0, r3
    93e0:	0000019b 	muleq	r0, fp, r1
    93e4:	00e20003 	rsceq	r0, r2, r3
    93e8:	01020000 	mrseq	r0, (UNDEF: 2)
    93ec:	000d0efb 	strdeq	r0, [sp], -fp
    93f0:	01010101 	tsteq	r1, r1, lsl #2
    93f4:	01000000 	mrseq	r0, (UNDEF: 0)
    93f8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    93fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9400:	2f2e2e2f 	svccs	0x002e2e2f
    9404:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9408:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    940c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    9410:	2f2e2e00 	svccs	0x002e2e00
    9414:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9418:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    941c:	2f2e2e2f 	svccs	0x002e2e2f
    9420:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    9424:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    9428:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    942c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9430:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    9434:	2f2e2e2f 	svccs	0x002e2e2f
    9438:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    943c:	2f2e2f2e 	svccs	0x002e2f2e
    9440:	00636367 	rsbeq	r6, r3, r7, ror #6
    9444:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9448:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    944c:	2f2e2e2f 	svccs	0x002e2e2f
    9450:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 93a0 <__exidx_end+0x3620>
    9454:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    9458:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    945c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    9460:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    9464:	2f676966 	svccs	0x00676966
    9468:	006d7261 	rsbeq	r7, sp, r1, ror #4
    946c:	62696c00 	rsbvs	r6, r9, #0, 24
    9470:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    9474:	0100632e 	tsteq	r0, lr, lsr #6
    9478:	61680000 	cmnvs	r8, r0
    947c:	61746873 	cmnvs	r4, r3, ror r8
    9480:	00682e62 	rsbeq	r2, r8, r2, ror #28
    9484:	61000002 	tstvs	r0, r2
    9488:	692d6d72 	pushvs	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    948c:	682e6173 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}
    9490:	00000300 	andeq	r0, r0, r0, lsl #6
    9494:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    9498:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    949c:	00030068 	andeq	r0, r3, r8, rrx
    94a0:	736e6900 	cmnvc	lr, #0, 18
    94a4:	6f632d6e 	svcvs	0x00632d6e
    94a8:	6174736e 	cmnvs	r4, lr, ror #6
    94ac:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    94b0:	00030068 	andeq	r0, r3, r8, rrx
    94b4:	6d726100 	ldfvse	f6, [r2, #-0]
    94b8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    94bc:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    94c0:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    94c4:	00682e32 	rsbeq	r2, r8, r2, lsr lr
    94c8:	00000001 	andeq	r0, r0, r1
    94cc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    94d0:	004adc02 	subeq	sp, sl, r2, lsl #24
    94d4:	04a40300 	strteq	r0, [r4], #768	; 0x300
    94d8:	13030501 	movwne	r0, #13569	; 0x3501
    94dc:	16051313 			; <UNDEFINED> instruction: 0x16051313
    94e0:	01010101 	tsteq	r1, r1, lsl #2
    94e4:	06010501 	streq	r0, [r1], -r1, lsl #10
    94e8:	3116050f 	tstcc	r6, pc, lsl #10
    94ec:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    94f0:	062e3116 			; <UNDEFINED> instruction: 0x062e3116
    94f4:	0120202e 			; <UNDEFINED> instruction: 0x0120202e
    94f8:	0620012e 	strteq	r0, [r0], -lr, lsr #2
    94fc:	20200620 	eorcs	r0, r0, r0, lsr #12
    9500:	20062006 	andcs	r2, r6, r6
    9504:	0f060105 	svceq	0x00060105
    9508:	00231605 	eoreq	r1, r3, r5, lsl #12
    950c:	06010402 	streq	r0, [r1], -r2, lsl #8
    9510:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    9514:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    9518:	20060304 	andcs	r0, r6, r4, lsl #6
    951c:	03040200 	movweq	r0, #16896	; 0x4200
    9520:	22052006 	andcs	r2, r5, #6
    9524:	03040200 	movweq	r0, #16896	; 0x4200
    9528:	1e051406 	cdpne	4, 0, cr1, cr5, cr6, {0}
    952c:	03040200 	movweq	r0, #16896	; 0x4200
    9530:	0016052f 	andseq	r0, r6, pc, lsr #10
    9534:	1d030402 	cfstrsne	mvf0, [r3, #-8]
    9538:	02000c05 	andeq	r0, r0, #1280	; 0x500
    953c:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
    9540:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    9544:	02001e03 	andeq	r1, r0, #3, 28	; 0x30
    9548:	00200304 	eoreq	r0, r0, r4, lsl #6
    954c:	06030402 	streq	r0, [r3], -r2, lsl #8
    9550:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    9554:	03050103 	movweq	r0, #20739	; 0x5103
    9558:	03040200 	movweq	r0, #16896	; 0x4200
    955c:	000c0514 	andeq	r0, ip, r4, lsl r5
    9560:	06030402 	streq	r0, [r3], -r2, lsl #8
    9564:	00030501 	andeq	r0, r3, r1, lsl #10
    9568:	06030402 	streq	r0, [r3], -r2, lsl #8
    956c:	00010523 	andeq	r0, r1, r3, lsr #10
    9570:	06030402 	streq	r0, [r3], -r2, lsl #8
    9574:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    9578:	05020103 	streq	r0, [r2, #-259]	; 0xfffffefd
    957c:	Address 0x000000000000957c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	705f7375 	subsvc	r7, pc, r5, ror r3	; <UNPREDICTABLE>
      24:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
      28:	705f5f00 	subsvc	r5, pc, r0, lsl #30
      2c:	63705f69 	cmnvs	r0, #420	; 0x1a4
      30:	00735f62 	rsbseq	r5, r3, r2, ror #30
      34:	6f6d6470 	svcvs	0x006d6470
      38:	5f006564 	svcpl	0x00006564
      3c:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff1d5 <_estack+0xdfffa1d5>
			i = k;
      40:	5f746978 	svcpl	0x00746978
				j->Next = k;
      44:	73677261 	cmnvc	r7, #268435462	; 0x10000006
      48:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
}
      4c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
      50:	00796172 	rsbseq	r6, r9, r2, ror r1
      54:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		release;
      58:	5f62616c 	svcpl	0x0062616c
      5c:	5f6b7361 	svcpl	0x006b7361
			nq++;
      60:	5f726f66 	svcpl	0x00726f66
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	6f636572 	svcvs	0x00636572
      68:	695f6472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
      6c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
      70:	63775f00 	cmnvs	r7, #0, 30
      74:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
      78:	6174735f 	cmnvs	r4, pc, asr r3
      7c:	5f006574 	svcpl	0x00006574
      80:	00383472 	eorseq	r3, r8, r2, ror r4
      84:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
      88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      8c:	735f5f00 	cmpvc	pc, #0, 30
	if (!button_still_pressed (__button_list [pbutton]))
      90:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      94:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
      98:	6f68635f 	svcvs	0x0068635f
	if (baction == NULL)
      9c:	00656369 	rsbeq	r6, r5, r9, ror #6
      a0:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
	(*baction) (pbutton);
      a4:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
endthread
      a8:	00796172 	rsbseq	r6, r9, r2, ror r1
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	20554e47 	subscs	r4, r5, r7, asr #28
      b0:	20393943 	eorscs	r3, r9, r3, asr #18
endthread
      b4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
      b8:	30322031 	eorscc	r2, r2, r1, lsr r0
      bc:	30313931 	eorscc	r3, r1, r1, lsr r9
      c0:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
      c4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
fsm sender(struct ResponseMessage *message) {
      c8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      cc:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
      d0:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
}
      d4:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
      d8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      e0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      e4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      e8:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
      ec:	205d3939 	subscs	r3, sp, r9, lsr r9
		packet[1] = message->gid;
      f0:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
      f4:	6f633d75 	svcvs	0x00633d75
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      fc:	20336d2d 	eorscs	r6, r3, sp, lsr #26
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     104:	20626d75 	rsbcs	r6, r2, r5, ror sp
		*p = message->tpe;p++;
     108:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
		*p = message->request_number;p++;
     10c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
		*p = message->sender_id;p++;
     110:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
		*p = message->receiver_id;p++;
     114:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
		switch(message->tpe) {
     118:	616d2d20 	cmnvs	sp, r0, lsr #26
     11c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     120:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
		tcv_endp(packet);
     124:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     12c:	61776467 	cmnvs	r7, r7, ror #8
}
     130:	332d6672 			; <UNDEFINED> instruction: 0x332d6672
		finish;
     134:	73672d20 	cmnvc	r7, #32, 26	; 0x800
     138:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     13c:	77642d74 			; <UNDEFINED> instruction: 0x77642d74
				strncpy(p, message->record, sizeof(message->record));
     140:	20667261 	rsbcs	r7, r6, r1, ror #4
				*p = message->padding;p++;
     144:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
				strncpy(p, message->record, sizeof(message->record));
     148:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     14c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     150:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
				strncpy(p, message->record, sizeof(message->record));
     154:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     158:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
				strncpy(p, message->record, sizeof(message->record));
     15c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
				break;
     160:	736e6f69 	cmnvc	lr, #420	; 0x1a4
				*p = message->record_index;p++;
     164:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
				*p = message->padding;
     168:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
				break;
     16c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     170:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     174:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     178:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
     17c:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     180:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
struct Node* init_node(struct Node* node){
     184:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	662d2067 	strtvs	r2, [sp], -r7, rrx
     18c:	206d7361 	rsbcs	r7, sp, r1, ror #6
     190:	616d662d 	cmnvs	sp, sp, lsr #12
    node2->gid = 0;
     194:	72652d78 	rsbvc	r2, r5, #120, 26	; 0x1e00
    node2->data_base.item_count = 0;
     198:	73726f72 	cmnvc	r2, #456	; 0x1c8
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	0030313d 	eorseq	r3, r0, sp, lsr r1
     1a0:	73625f5f 	cmnvc	r2, #380	; 0x17c
     1a4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a8:	5f747261 	svcpl	0x00747261
     1ac:	6374005f 	cmnvs	r4, #95	; 0x5f
     1b0:	6d745f76 	ldclvs	15, cr5, [r4, #-472]!	; 0xfffffe28
    node2->index = 0;
     1b4:	6f720074 	svcvs	0x00720074
};
     1b8:	5f00746f 	svcpl	0x0000746f
    return (uint8_t) (rand() % 255);
     1bc:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
     1c0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     1c4:	616c665f 	cmnvs	ip, pc, asr r6
}
     1c8:	68007367 	stmdavs	r0, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	00646165 	rsbeq	r6, r4, r5, ror #2
     1d0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	5f62616c 	svcpl	0x0062616c
     1d8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     1dc:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     1e4:	6f72705f 	svcvs	0x0072705f
        for (int i = 0; i < NUMB_OF_ENT; i++){
     1e8:	5f006f74 	svcpl	0x00006f74
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1f0:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
     1f4:	675f7765 	ldrbvs	r7, [pc, -r5, ror #14]
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     1fc:	0064695f 	rsbeq	r6, r4, pc, asr r9
     200:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     204:	5f62616c 	svcpl	0x0062616c
     208:	5f746567 	svcpl	0x00746567
                node->data_base.item_array[i].owner_id = owner_id;
     20c:	665f6469 	ldrbvs	r6, [pc], -r9, ror #8
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	645f726f 	ldrbvs	r7, [pc], #-623	; 218 <insert_record+0x4c>
                node->data_base.item_count += 1;
     214:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
                node->data_base.item_count += 1;
     21c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 5c <g_pfnVectors+0x5c>
     224:	61737365 	cmnvs	r3, r5, ror #6
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	305f6567 	subscc	r6, pc, r7, ror #10
     22c:	73657200 	cmnvc	r5, #0, 4
     230:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     234:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
};
     238:	67617373 			; <UNDEFINED> instruction: 0x67617373
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23c:	00315f65 	eorseq	r5, r1, r5, ror #30
     240:	70736572 	rsbsvc	r6, r3, r2, ror r5
        return false;
     244:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     248:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     24c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
            node->nnodes[i] = 0; // set to null byte
     250:	5f00325f 	svcpl	0x0000325f
     254:	4b434f4c 	blmi	10d3f8c <__ccfg+0x10b3fe4>
     258:	4345525f 	movtmi	r5, #21087	; 0x525f
     25c:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	545f4556 	ldrbpl	r4, [pc], #-1366	; 268 <delete_record+0x2>
};
     264:	73657200 	cmnvc	r5, #0, 4
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     26c:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     270:	67617373 			; <UNDEFINED> instruction: 0x67617373
     274:	00345f65 	eorseq	r5, r4, r5, ror #30
        node->data_base.item_count -= 1;
     278:	70736572 	rsbsvc	r6, r3, r2, ror r5
        node->data_base.item_array[index].timestamp = 0;
     27c:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
        node->data_base.item_count -= 1;
     280:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
};
     284:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     288:	7500355f 	strvc	r3, [r0, #-1375]	; 0xfffffaa1
     28c:	5f726573 	svcpl	0x00726573
     290:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
     298:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
            node->data_base.item_array[i].timestamp = 0;
     2a0:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
    node->data_base.item_count = 0;
     2a4:	6f6e6e00 	svcvs	0x006e6e00
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	00736564 	rsbseq	r6, r3, r4, ror #10
     2ac:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
}
     2b0:	5f6e656c 	svcpl	0x006e656c
        return true;
     2b4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b8:	69440065 	stmdbvs	r4, {r0, r2, r5, r6}^
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	52797265 	rsbspl	r7, r9, #1342177286	; 0x50000006
     2c4:	6f707365 	svcvs	0x00707365
     2c8:	4d65736e 	stclmi	3, cr7, [r5, #-440]!	; 0xfffffe48
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	61737365 	cmnvs	r3, r5, ror #6
	response_message->tpe = RESPONSE;
     2d0:	5f006567 	svcpl	0x00006567
	response_message->status = status;
     2d4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
	response_message->gid = gid;
     2dc:	6e5f7765 	cdpvs	7, 5, cr7, cr15, cr5, {3}
	response_message->sender_id = receiver_id;
     2e0:	5f65646f 	svcpl	0x0065646f
	response_message->status = status;
     2e4:	66006469 	strvs	r6, [r0], -r9, ror #8
	if (!padding){
     2e8:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
		response_message->padding = padding;
     2ec:	5f5f006b 	svcpl	0x005f006b
	if (rec != NULL){
     2f0:	6f5f6970 	svcvs	0x005f6970
     2f4:	5f00646c 	svcpl	0x0000646c
		strncpy(response_message->record, rec, 20);
     2f8:	6f647473 	svcvs	0x00647473
     2fc:	5f007475 	svcpl	0x00007475
     300:	736f7066 	cmnvc	pc, #102	; 0x66
};
     304:	5f00745f 	svcpl	0x0000745f
fsm receiver(struct Node* node_db) {
     308:	00736e66 	rsbseq	r6, r3, r6, ror #28
     30c:	6f6f635f 	svcvs	0x006f635f
     310:	0065696b 	rsbeq	r6, r5, fp, ror #18
     314:	5f766374 	svcpl	0x00766374
     318:	6f666e69 	svcvs	0x00666e69
     31c:	73797300 	cmnvc	r9, #0, 6
     320:	5f746174 	svcpl	0x00746174
     324:	5f5f0074 	svcpl	0x005f0074
		DEBUG_PRINT("\r\nreceiving 0");
     328:	5f737362 	svcpl	0x00737362
     32c:	5f646e65 	svcpl	0x00646e65
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	425f005f 	subsmi	r0, pc, #95	; 0x5f
     334:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     338:	544f0074 	strbpl	r0, [pc], #-116	; 340 <receiver+0x38>
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	5f524548 	svcpl	0x00524548
     340:	4f525245 	svcmi	0x00525245
		DEBUG_PRINT("\r\nreceiving 2");
     344:	5f5f0052 	svcpl	0x005f0052
     348:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	00796164 	rsbseq	r6, r9, r4, ror #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	00746c75 	rsbseq	r6, r4, r5, ror ip
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffffb05 <_estack+0xdfffab05>
		switch (response_message_5->tpe){
     360:	454e0072 	strbmi	r0, [lr, #-114]	; 0xffffff8e
     364:	4f4e5f57 	svcmi	0x004e5f57
     368:	495f4544 	ldmdbmi	pc, {r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     36c:	6e650044 	cdpvs	0, 6, cr0, cr5, cr4, {2}
     370:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
     374:	5f5f0079 	svcpl	0x005f0079
     378:	616c7473 	smcvs	51011	; 0xc743
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
				if (discovery_request_message->gid == node_db->gid){
     384:	6f6e5f77 	svcvs	0x006e5f77
     388:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
					DEBUG_PRINT("\r\nSending to sender");
     38c:	5f5f0064 	svcpl	0x005f0064
     390:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
					DEBUG_PRINT("\r\nSending to sender");
     394:	6f680074 	svcvs	0x00680074
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	61700064 	cmnvs	r0, r4, rrx
					response_message_0->sender_id = node_db->id;
     3a0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	7a69735f 	bvc	1a5d128 <__ccfg+0x1a3d180>
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	5f5f0065 	svcpl	0x005f0065
					call sender(response_message_0, done_case);
     3ac:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
     3b0:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3b4:	5f00736e 	svcpl	0x0000736e
     3b8:	5f6d745f 	svcpl	0x006d745f
     3bc:	006e696d 	rsbeq	r6, lr, sp, ror #18
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	72006674 	andvc	r6, r0, #116, 12	; 0x7400000
     3c8:	6f707365 	svcvs	0x00707365
     3cc:	5f65736e 	svcpl	0x0065736e
     3d0:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     3d4:	5f656761 	svcpl	0x00656761
     3d8:	725f0033 	subsvc	r0, pc, #51	; 0x33
     3dc:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
     3e0:	6e690038 	mcrvs	0, 3, r0, cr9, cr8, {1}
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
					node_db->index+=1;
     3e8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     3ec:	0064726f 	rsbeq	r7, r4, pc, ror #4
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		tcv_endp(incoming_packet);
     3f4:	5f62616c 	svcpl	0x0062616c
     3f8:	61657263 	cmnvs	r5, r3, ror #4
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
     400:	6f746f72 	svcvs	0x00746f72
		proceed receiving;
     404:	6174735f 	cmnvs	r4, pc, asr r3
		ser_out(response_1_create, "\r\nData Saved");
     408:	5f007472 	svcpl	0x00007472
     40c:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
		proceed receiving;
     410:	6b5f746c 	blvs	17dd5c8 <__ccfg+0x17bd620>
     414:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
		ser_out(response_1_delete, "\r\nRecord Deleted");
     418:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
     41c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
		proceed receiving;
     420:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     424:	6f6c2067 	svcvs	0x006c2067
     428:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     42c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     430:	2064656e 	rsbcs	r6, r4, lr, ror #10
     434:	00746e69 	rsbseq	r6, r4, r9, ror #28
		proceed receiving;
     438:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     43c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     440:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     444:	646f6e00 	strbtvs	r6, [pc], #-3584	; 44c <receiver+0x144>
     448:	62645f65 	rsbvs	r5, r4, #404	; 0x194
		proceed receiving;
     44c:	735f5f00 	cmpvc	pc, #0, 30
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     454:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
     458:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
     45c:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
		proceed receiving;
     460:	646f4e00 	strbtvs	r4, [pc], #-3584	; 468 <receiver+0x160>
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	42440065 	submi	r0, r4, #101	; 0x65
     468:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
     46c:	5f5f004c 	svcpl	0x005f004c
     470:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
		proceed receiving;
     474:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	0064695f 	rsbeq	r6, r4, pc, asr r9
     47c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
		proceed receiving;
     480:	00746573 	rsbseq	r6, r4, r3, ror r5
}
     484:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     488:	6f72705f 	svcvs	0x0072705f
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     494:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     498:	735f5f00 	cmpvc	pc, #0, 30
     49c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4a0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
					break;
     4a8:	0062645f 	rsbeq	r6, r2, pc, asr r4
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	5f766374 	svcpl	0x00766374
     4b0:	0065706f 	rsbeq	r7, r5, pc, rrx
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	6f72705f 	svcvs	0x0072705f
     4bc:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     4c0:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     4c4:	00786564 	rsbseq	r6, r8, r4, ror #10
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	5f746573 	svcpl	0x00746573
						status = (uint8_t) SUCCESS;
     4cc:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	0064695f 	rsbeq	r6, r4, pc, asr r9
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     4d8:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     4dc:	73007963 	movwvc	r7, #2403	; 0x963
     4e0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     4e4:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     4e8:	735f5f00 	cmpvc	pc, #0, 30
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4f0:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
					call sender(response_message_2, done_case);
     4f4:	76656972 			; <UNDEFINED> instruction: 0x76656972
     4f8:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
     4fc:	006f746f 	rsbeq	r7, pc, pc, ror #8
     500:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	5f62616c 	svcpl	0x0062616c
						status = (uint8_t) DB_FULL;
     508:	61656c63 	cmnvs	r5, r3, ror #24
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
     514:	5f72756f 	svcpl	0x0072756f
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	61727261 	cmnvs	r2, r1, ror #4
     51c:	5f5f0079 	svcpl	0x005f0079
     520:	63756e67 	cmnvs	r5, #1648	; 0x670
     524:	5f61765f 	svcpl	0x0061765f
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     52c:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
     530:	6f635f6d 	svcvs	0x00635f6d
     534:	00746e75 	rsbseq	r6, r4, r5, ror lr
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	5f62616c 	svcpl	0x0062616c
     540:	70736572 	rsbsvc	r6, r3, r2, ror r5
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     548:	645f315f 	ldrbvs	r3, [pc], #-351	; 550 <receiver+0x248>
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     550:	5f5f0065 	svcpl	0x005f0065
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	616c7473 	smcvs	51011	; 0xc743
     558:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     560:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     568:	00657461 	rsbeq	r7, r5, r1, ror #8
     56c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     570:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 57c <receiver+0x274>
     578:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	5f007961 	svcpl	0x00007961
     580:	00636e69 	rsbeq	r6, r3, r9, ror #28
     584:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     588:	6e656700 	cdpvs	7, 6, cr6, cr5, cr0, {0}
     58c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     590:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     594:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     598:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
     59c:	5f5f006d 	svcpl	0x005f006d
     5a0:	616c7473 	smcvs	51011	; 0xc743
     5a4:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
     5a8:	5f747261 	svcpl	0x00747261
     5ac:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     5b0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     5b4:	6f72705f 	svcvs	0x0072705f
     5b8:	5f006f74 	svcpl	0x00006f74
     5bc:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
     5c0:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     5c4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     5c8:	00657461 	rsbeq	r7, r5, r1, ror #8
     5cc:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
     5d0:	735f5f00 	cmpvc	pc, #0, 30
     5d4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     5d8:	006b6f5f 	rsbeq	r6, fp, pc, asr pc
     5dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     5e0:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
     5e4:	6c630070 	stclvs	0, cr0, [r3], #-448	; 0xfffffe40
     5e8:	5f726165 	svcpl	0x00726165
     5ec:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     5f0:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     5f4:	6f626867 	svcvs	0x00626867
     5f8:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
     5fc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     600:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     604:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     608:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	5f5f0073 	svcpl	0x005f0073
     610:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
				DEBUG_PRINT("\r\nretrieve rec");
     618:	00747369 	rsbseq	r7, r4, r9, ror #6
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     620:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
     624:	00657079 	rsbeq	r7, r5, r9, ror r0
     628:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
     62c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 46c <receiver+0x164>
     630:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     638:	626d5f00 	rsbvs	r5, sp, #0, 30
     63c:	5f6e656c 	svcpl	0x006e656c
    return node->data_base.item_array[index];
     640:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     644:	77610065 	strbvc	r0, [r1, -r5, rrx]!
     648:	0064726f 	rsbeq	r7, r4, pc, ror #4
     64c:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	53006e70 	movwpl	r6, #3696	; 0xe70
    return node->data_base.item_array[index];
     654:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	6c005353 	stcvs	3, cr5, [r0], {83}	; 0x53
     65c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     660:	5f5f0063 	svcpl	0x005f0063
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	616c7473 	smcvs	51011	; 0xc743
     668:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     66c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     670:	00676e69 	rsbeq	r6, r7, r9, ror #28
     674:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     678:	61646d5f 	cmnvs	r4, pc, asr sp
     67c:	5f5f0079 	svcpl	0x005f0079
     680:	616c7473 	smcvs	51011	; 0xc743
				DEBUG_PRINT("\r\nResponse");
     684:	61775f62 	cmnvs	r7, r2, ror #30
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	645f7469 	ldrbvs	r7, [pc], #-1129	; 690 <receiver+0x388>
				DEBUG_PRINT("\r\nResponse");
     68c:	6f637369 	svcvs	0x00637369
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     694:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     698:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     69c:	5f00636e 	svcpl	0x0000636e
     6a0:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
				if(!response_flag){
     6a4:	5f63776f 	svcpl	0x0063776f
     6a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
					response_flag=1;
     6ac:	615f0065 	cmpvs	pc, r5, rrx
					trigger(&response_flag);
     6b0:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
				switch(response_message_5->status){
     6b4:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
     6b8:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     6bc:	5f5f006b 	svcpl	0x005f006b
     6c0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     6c4:	61747379 	cmnvs	r4, r9, ror r3
						if (response_checker[0] == response_message_5->request_number){
     6c8:	5f5f0074 	svcpl	0x005f0074
     6cc:	616c7473 	smcvs	51011	; 0xc743
     6d0:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
							switch(response_checker[1]){
     6d4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     6d8:	315f6573 	cmpcc	pc, r3, ror r5	; <UNPREDICTABLE>
     6dc:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     6e0:	76656972 			; <UNDEFINED> instruction: 0x76656972
						proceed response_4;
     6e4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
						break;
     6e8:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
									proceed response_1_delete;
     6ec:	635f6573 	cmpvs	pc, #482344960	; 0x1cc00000
									proceed response_1_retrieve;
     6f0:	6b636568 	blvs	18d9c98 <__ccfg+0x18b9cf0>
						proceed response_2;
     6f4:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
						proceed response_3;
     6f8:	6f637369 	svcvs	0x00637369
						proceed response_4;
     6fc:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
     704:	4d747365 	ldclmi	3, cr7, [r4, #-404]!	; 0xfffffe6c
}
     708:	61737365 	cmnvs	r3, r5, ror #6
     70c:	5f006567 	svcpl	0x00006567
     710:	5f69705f 	svcpl	0x0069705f
     714:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
     718:	5f5f006b 	svcpl	0x005f006b
     71c:	616c7473 	smcvs	51011	; 0xc743
     720:	69745f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
fsm root {
     724:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1bf <generate_request_num+0x5>
     728:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     72c:	6b636f6c 	blvs	18dc4e4 <__ccfg+0x18bc53c>
     730:	5f00745f 	svcpl	0x0000745f
     734:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     738:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
     73c:	6f707365 	svcvs	0x00707365
     740:	5f65736e 	svcpl	0x0065736e
     744:	5f5f0032 	svcpl	0x005f0032
     748:	616c7473 	smcvs	51011	; 0xc743
     74c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     750:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     754:	335f6573 	cmpcc	pc, #482344960	; 0x1cc00000
     758:	735f5f00 	cmpvc	pc, #0, 30
     75c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     760:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     764:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     768:	00345f65 	eorseq	r5, r4, r5, ror #30
     76c:	63775f5f 	cmnvs	r7, #380	; 0x17c
     770:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
		node_db = init_node(node_db);
     774:	0073626f 	rsbseq	r6, r3, pc, ror #4
     778:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	64007375 	strvs	r7, [r0], #-885	; 0xfffffc8b
     780:	5f617461 	svcpl	0x00617461
     784:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
		tcv_plug (0, &plug_null);
     788:	5f5f0079 	svcpl	0x005f0079
     78c:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
		sfd = tcv_open (WNONE, 0, 0);
     790:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     794:	735f5f00 	cmpvc	pc, #0, 30
     798:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		if (sfd < 0) {
     79c:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
     7a0:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
			diag("Cannot open tcv interface");
     7a4:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 7ac <root+0x88>
			halt();
     7a8:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	735f5f00 	cmpvc	pc, #0, 30
     7b0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		runfsm receiver(node_db);
     7b4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     7b8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	5f64726f 	svcpl	0x0064726f
     7c0:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
     7c4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     7c8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     7cc:	69657274 	stmdbvs	r5!, {r2, r4, r5, r6, r9, ip, sp, lr}^
     7d0:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
     7d4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
     7dc:	67617373 			; <UNDEFINED> instruction: 0x67617373
     7e0:	735f0065 	cmpvc	pc, #101	; 0x65
		switch(CHOICE) {
     7e4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     7e8:	61675f00 	cmnvs	r7, r0, lsl #30
     7ec:	5f616d6d 	svcpl	0x00616d6d
     7f0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     7f4:	006d6167 	rsbeq	r6, sp, r7, ror #2
     7f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     7fc:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     800:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     804:	5f5f0074 	svcpl	0x005f0074
     808:	616c7473 	smcvs	51011	; 0xc743
     80c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
				proceed menu;
     810:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
				proceed get_new_group_id;
     814:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
				proceed menu;
     818:	5f70756f 	svcpl	0x0070756f
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	5f006469 	svcpl	0x00006469
     820:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     828:	64617000 	strbtvs	r7, [r1], #-0
     82c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
		DEBUG_PRINT("setting node group ID");
     830:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	4b00746c 	blmi	1d9ec <__exidx_end+0x17c6c>
    node->gid = gid; 
     838:	2f504d54 	svccs	0x00504d54
		proceed menu;
     83c:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
     840:	5f5f0063 	svcpl	0x005f0063
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
     848:	775f0067 	ldrbvc	r0, [pc, -r7, rrx]
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	6f747263 	svcvs	0x00747263
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     850:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     854:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     858:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
    node->id = id;
     860:	6f707365 	svcvs	0x00707365
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	5f65736e 	svcpl	0x0065736e
     868:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
			strncpy(reason, "Out of Range", 50);
     86c:	615f5f00 	cmpvs	pc, r0, lsl #30
     870:	5f5f0070 	svcpl	0x005f0070
     874:	616c7473 	smcvs	51011	; 0xc743
			proceed invalid_node_id;
     878:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
fsm root {
     87c:	6f6c5f6c 	svcvs	0x006c5f6c
				strncpy(reason, "ID is already in use", 50);
     880:	006c6163 	rsbeq	r6, ip, r3, ror #2
		for(int i = 0; i < node_db->index; i++){
     884:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
     888:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
		proceed menu;
     88c:	5f5f0070 	svcpl	0x005f0070
     890:	616c7473 	smcvs	51011	; 0xc743
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	6f6c5f62 	svcvs	0x006c5f62
     898:	745f706f 	ldrbvc	r7, [pc], #-111	; 8a0 <root+0x17c>
     89c:	756f7268 	strbvc	r7, [pc, #-616]!	; 63c <receiver+0x334>
     8a0:	645f6867 	ldrbvs	r6, [pc], #-2151	; 8a8 <root+0x184>
		proceed get_new_node_id;
     8a4:	00617461 	rsbeq	r7, r1, r1, ror #8
		if (!clear_node_neighbour_array(node_db)){
     8a8:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
     8ac:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 360 <receiver+0x58>
     8b0:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	626d5f00 	rsbvs	r5, sp, #0, 30
     8b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
			proceed error;
     8bc:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8c0:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	756f6268 	strbvc	r6, [pc, #-616]!	; 664 <receiver+0x35c>
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	006b6365 	rsbeq	r6, fp, r5, ror #6
		request_packet->gid = node_db->gid;
     8d0:	5f746573 	svcpl	0x00746573
     8d4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
		request_packet->request_number = generate_request_num();
     8d8:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
		request_packet->sender_id = node_db->id;
     8dc:	73797300 	cmnvc	r9, #0, 6
     8e0:	5f6d6574 	svcpl	0x006d6574
     8e4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
		call sender(request_packet, wait_discovery);
     8e8:	6f635f74 	svcvs	0x00635f74
     8ec:	00746e75 	rsbseq	r6, r4, r5, ror lr
     8f0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
			release;
     8f4:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
				proceed get_new_node_id;
     8f8:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
				proceed clear_neighbour_array;
     8fc:	64707165 	ldrbtvs	r7, [r0], #-357	; 0xfffffe9b
				proceed create_proto_start;
     900:	685f006d 	ldmdavs	pc, {r0, r2, r3, r5, r6}^	; <UNPREDICTABLE>
				proceed start_delete_proto;
     904:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
				proceed start_retrieve_proto;
     908:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
				proceed display_db;
     90c:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
				proceed del_local;
     910:	6f006f6c 	svcvs	0x00006f6c
			if(node_db->id == node_db->nnodes[i]){
     914:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
     918:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
     91c:	5f006d75 	svcpl	0x00006d75
				strncpy(reason, "ID is already in use", 50);
     920:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     924:	6d5f6261 	lfmvs	f6, 2, [pc, #-388]	; 7a8 <root+0x84>
     928:	00756e65 	rsbseq	r6, r5, r5, ror #28
				proceed invalid_node_id;
     92c:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
		for(int i = 0; i < node_db->index; i++){
     930:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
		if (discovery_wait_flag == 0){
     934:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
     938:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
			delay(3000, find_proto_start);
     93c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     940:	61755f69 	cmnvs	r5, r9, ror #30
     944:	41007472 	tstmi	r0, r2, ror r4
     948:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
		if (discovery_wait_flag == 1){
     94c:	63655343 	cmnvs	r5, #201326593	; 0xc000001
			delay(3000, display_neighbour_nodes);
     950:	00746547 	rsbseq	r6, r4, r7, asr #10
     954:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     958:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
     95c:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
     960:	63740074 	cmnvs	r4, #116	; 0x74
     964:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffff9f6 <_estack+0xdfffa9f6>
     968:	5f5f0074 	svcpl	0x005f0074
     96c:	616c7473 	smcvs	51011	; 0xc743
     970:	69665f62 	stmdbvs	r6!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     974:	705f646e 	subsvc	r6, pc, lr, ror #8
     978:	6f746f72 	svcvs	0x00746f72
     97c:	6174735f 	cmnvs	r4, pc, asr r3
     980:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
     984:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
     988:	5f455645 	svcpl	0x00455645
     98c:	4f434552 	svcmi	0x00434552
     990:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
     994:	6f637369 	svcvs	0x00637369
     998:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     99c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     9a0:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
		if(node_db->index == 0){
     9a4:	5f006761 	svcpl	0x00006761
     9a8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     9ac:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
			proceed menu;
     9b0:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
fsm root {
     9b4:	6f665f64 	svcvs	0x00665f64
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
		for (int i=0; i<node_db->index; i++) {
     9bc:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9c0:	44006576 	strmi	r6, [r0], #-1398	; 0xfffffa8a
     9c4:	4f435349 	svcmi	0x00435349
		proceed menu;
     9c8:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	5345525f 	movtpl	r5, #21087	; 0x525f
     9d0:	534e4f50 	movtpl	r4, #61264	; 0xef50
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
     9d8:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9dc:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     9e4:	5f5f0064 	svcpl	0x005f0064
			strncpy(reason, "Error: improper ID", 50);
     9e8:	685f6970 	ldmdavs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
     9ec:	655f7865 	ldrbvs	r7, [pc, #-2149]	; 18f <init_node+0xb>
     9f0:	745f636e 	ldrbvc	r6, [pc], #-878	; 9f8 <root+0x2d4>
			proceed error;
     9f4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	735f5f00 	cmpvc	pc, #0, 30
     9fc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     a04:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     a08:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
		create_message->gid = node_db->gid;
     a10:	5f746e65 	svcpl	0x00746e65
     a14:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     a18:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		create_message->tpe = CREATE_RECORD;
     a1c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 854 <root+0x130>
		create_message->request_number = generate_request_num();
     a20:	61747362 	cmnvs	r4, r2, ror #6
		create_message->sender_id = node_db->id;
     a24:	5f006574 	svcpl	0x00006574
     a28:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     a2c:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
		strncpy(create_message->record, user_provided_record, 20);
     a30:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		create_message->receiver_id = user_provided_receiver_id;
     a34:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
		strncpy(create_message->record, user_provided_record, 20);
     a38:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
		response_checker[0] = create_message->request_number;
     a3c:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		call sender(create_message, wait);
     a40:	76656972 			; <UNDEFINED> instruction: 0x76656972
		response_checker[1] = create_message->tpe;
     a44:	5f5f0065 	svcpl	0x005f0065
     a48:	616c7473 	smcvs	51011	; 0xc743
		call sender(create_message, wait);
     a4c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     a50:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     a54:	5f786564 	svcpl	0x00786564
     a58:	5f726f66 	svcpl	0x00726f66
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
     a60:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a64:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     a68:	7300746d 	movwvc	r7, #1133	; 0x46d
     a6c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     a74:	735f5f00 	cmpvc	pc, #0, 30
			strncpy(reason, "Error: improper node ID", 50);
     a78:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a7c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
			proceed error;
     a80:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
     a84:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a88:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     a8c:	5f64726f 	svcpl	0x0064726f
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a90:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     a94:	00656761 	rsbeq	r6, r5, r1, ror #14
     a98:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
			strncpy(reason, "Error: invalid index", 50);
     aa0:	74736465 	ldrbtvc	r6, [r3], #-1125	; 0xfffffb9b
     aa4:	5f5f0073 	svcpl	0x005f0073
     aa8:	70006673 	andvc	r6, r0, r3, ror r6
			proceed error;
     aac:	6f696e69 	svcvs	0x00696e69
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	00745f64 	rsbseq	r5, r4, r4, ror #30
     ab4:	63775f5f 	cmnvs	r7, #380	; 0x17c
     ab8:	5f006268 	svcpl	0x00006268
		delete_record->gid = node_db->gid;
     abc:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
		delete_record->tpe = DELETE_RECORD;
     ac0:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		delete_record->request_number = generate_request_num();
     ac4:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
     ac8:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
		call sender(delete_record, wait);
     acc:	5f5f0072 	svcpl	0x005f0072
		delete_record->sender_id = node_db->id;
     ad0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		delete_record->receiver_id = user_provided_receiver_id;
     ad4:	00726165 	rsbseq	r6, r2, r5, ror #2
		delete_record->record_index = us_pr_in;
     ad8:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
     adc:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
		response_checker[0] = delete_record->request_number;
     ae0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		call sender(delete_record, wait);
     ae4:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     ae8:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     aec:	67617373 			; <UNDEFINED> instruction: 0x67617373
     af0:	5f5f0065 	svcpl	0x005f0065
     af4:	616c7473 	smcvs	51011	; 0xc743
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	73615f62 	cmnvc	r1, #392	; 0x188
     afc:	6f665f6b 	svcvs	0x00665f6b
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
     b04:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     b08:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		if (get_id < 1 || get_id > 25){
     b0c:	76656972 			; <UNDEFINED> instruction: 0x76656972
     b10:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
			strncpy(reason, "Error: improper node ID", 50);
     b14:	00786564 	rsbseq	r6, r8, r4, ror #10
     b18:	52544552 	subspl	r4, r4, #343932928	; 0x14800000
     b1c:	45564549 	ldrbmi	r4, [r6, #-1353]	; 0xfffffab7
			proceed error;
     b20:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	5f00524f 	svcpl	0x0000524f
     b28:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	655f6261 	ldrbvs	r6, [pc, #-609]	; 8d3 <root+0x1af>
     b30:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     b34:	4c454400 	cfstrdmi	mvd4, [r5], {-0}
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	5f455445 	svcpl	0x00455445
     b3c:	4f434552 	svcmi	0x00434552
			strncpy(reason, "Error: invalid index", 50);
     b40:	5f004452 	svcpl	0x00004452
     b44:	61636f6c 	cmnvs	r3, ip, ror #30
			proceed error;
     b48:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
     b4c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	755f0066 	ldrbvc	r0, [pc, #-102]	; af2 <root+0x3ce>
     b54:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	635f0064 	cmpvs	pc, #100	; 0x64
     b5c:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
     b60:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 9b0 <root+0x28c>
		retrieve_record->gid = node_db->gid;
     b64:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	6c5f0073 	mrrcvs	0, 7, r0, pc, cr3	; <UNPREDICTABLE>
		retrieve_record->request_number = generate_request_num();
     b6c:	5f613436 	svcpl	0x00613436
     b70:	00667562 	rsbeq	r7, r6, r2, ror #10
		retrieve_record->receiver_id = get_id;
     b74:	6b6c625f 	blvs	1b194f8 <__ccfg+0x1af9550>
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
		retrieve_record->record_index = beg_for_index;
     b7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; b84 <root+0x460>
     b80:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
		response_checker[0] = retrieve_record->request_number;
     b88:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	0064726f 	rsbeq	r7, r4, pc, ror #4
		response_checker[1] = retrieve_record->tpe;
     b90:	61765f5f 	cmnvs	r6, pc, asr pc
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     b98:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
		call sender(retrieve_record, wait);
     b9c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     ba0:	61657243 	cmnvs	r5, r3, asr #4
     ba4:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     ba8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     bac:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	00656761 	rsbeq	r6, r5, r1, ror #14
     bb4:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb8:	00737365 	rsbseq	r7, r3, r5, ror #6
     bbc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     bc0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
		if(node_db->data_base.item_count != 0){
     bc4:	63740072 	cmnvs	r4, #114	; 0x72
     bc8:	63725f76 	cmnvs	r2, #472	; 0x1d8
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	6e5f0076 	mrcvs	0, 2, r0, cr15, cr6, {3}
     bd0:	73626f69 	cmnvc	r2, #420	; 0x1a4
			while(i <= node_db->data_base.item_count){
     bd4:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
     bd8:	00745f74 	rsbseq	r5, r4, r4, ror pc
     bdc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			i = 0;
     be0:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
		ser_out(menu, "\r\n");
     be4:	5400745f 	strpl	r7, [r0], #-1119	; 0xfffffba1
     be8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
		delete_all(node_db);
     bec:	53494400 	movtpl	r4, #37888	; 0x9400
     bf0:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
		proceed menu;
     bf4:	525f5952 	subspl	r5, pc, #1343488	; 0x148000
		delay(3000, timeout);
     bf8:	45555145 	ldrbmi	r5, [r5, #-325]	; 0xfffffebb
     bfc:	5f005453 	svcpl	0x00005453
     c00:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		when(&response_flag, menu);
     c04:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     c08:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
			if(i == 0){
     c0c:	6d5f4d52 	ldclvs	13, cr4, [pc, #-328]	; acc <root+0x3a8>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c10:	61737365 	cmnvs	r3, r5, ror #6
     c14:	5f006567 	svcpl	0x00006567
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c18:	5f6f7364 	svcpl	0x006f7364
     c1c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     c20:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     c24:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; a74 <root+0x350>
		for (int i=0; i<node_db->index; i++) {
     c28:	5f676e69 	svcpl	0x00676e69
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	6b636170 	blvs	18d91f4 <__ccfg+0x18b924c>
     c30:	5f007465 	svcpl	0x00007465
     c34:	5f69705f 	svcpl	0x0069705f
     c38:	5f007473 	svcpl	0x00007473
     c3c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     c40:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     c44:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     c48:	7a696c61 	bvc	1a5bdd4 <__ccfg+0x1a3be2c>
		ser_out(timeout, "\r\nFailed to reach the destination");
     c4c:	6f6e5f65 	svcvs	0x006e5f65
     c50:	5f006564 	svcpl	0x00006564
		proceed menu;
     c54:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
     c5c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     c60:	2064656e 	rsbcs	r6, r4, lr, ror #10
		proceed menu;
     c64:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
}
     c68:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c6c:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
     c70:	73660077 	cmnvc	r6, #119	; 0x77
     c74:	646f636d 	strbtvs	r6, [pc], #-877	; c7c <root+0x558>
     c78:	454e0065 	strbmi	r0, [lr, #-101]	; 0xffffff9b
     c7c:	4f4e5f57 	svcmi	0x004e5f57
     c80:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
     c84:	5f004449 	svcpl	0x00004449
     c88:	4243505f 	submi	r5, r3, #95	; 0x5f
     c8c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     c90:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
     c94:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     c98:	63740072 	cmnvs	r4, #114	; 0x72
     c9c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
     ca0:	6174006d 	cmnvs	r4, sp, rrx
     ca4:	5f006c69 	svcpl	0x00006c69
     ca8:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; ba8 <root+0x484>
     cac:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     cb0:	6f6e5f74 	svcvs	0x006e5f74
     cb4:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
     cb8:	665f6765 	ldrbvs	r6, [pc], -r5, ror #14
     cbc:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     cc0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     cc4:	735f5f00 	cmpvc	pc, #0, 30
     cc8:	00667562 	rsbeq	r7, r6, r2, ror #10
     ccc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     cd0:	6400745f 	strvs	r7, [r0], #-1119	; 0xfffffba1
     cd4:	5f617461 	svcpl	0x00617461
     cd8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
     cdc:	6c675f00 	stclvs	15, cr5, [r7], #-0
     ce0:	6e006575 	cfrshl64vs	mvdx0, mvdx5, r6
static void devinit_uart (int devnum) {
     ce4:	3265646f 	rsbcc	r6, r5, #1862270976	; 0x6f000000
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	735f5f00 	cmpvc	pc, #0, 30
     cec:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
void udelay (volatile word n) {
     cf0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     cf4:	6b6f7472 	blvs	1bddec4 <__ccfg+0x1bbdf1c>
	while (n) {
     cf8:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
     cfc:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; b34 <root+0x410>
}
     d00:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
	while (n--);
     d04:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
     d08:	00657461 	rsbeq	r7, r5, r1, ror #8
     d0c:	63736964 	cmnvs	r3, #100, 18	; 0x190000
		n--;
     d10:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     d14:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
     d18:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
void mdelay (volatile word n) {
     d1c:	656d5f74 	strbvs	r5, [sp, #-3956]!	; 0xfffff08c
     d20:	67617373 			; <UNDEFINED> instruction: 0x67617373
	while (n) {
     d24:	5f5f0065 	svcpl	0x005f0065
     d28:	616c7473 	smcvs	51011	; 0xc743
}
     d2c:	61775f62 	cmnvs	r7, r2, ror #30
		udelay (999);
     d30:	5f007469 	svcpl	0x00007469
     d34:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
		n--;
     d38:	74007367 	strvc	r7, [r0], #-871	; 0xfffffc99
     d3c:	6c707663 	ldclvs	6, cr7, [r0], #-396	; 0xfffffe74
     d40:	745f6775 	ldrbvc	r6, [pc], #-1909	; d48 <__pi_ondomain>
     d44:	735f5f00 	cmpvc	pc, #0, 30
void __pi_ondomain (lword d) {
     d48:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     d4c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
		if (__pi_systat.effpdm > 1)
     d50:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     d54:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
			__pi_systat.effpdm = 1;
     d58:	6f626867 	svcvs	0x00626867
	PRCMPowerDomainOn (d);
     d5c:	6e5f7275 	mrcvs	2, 2, r7, cr15, cr5, {3}
     d60:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
     d64:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d68:	00746e65 	rsbseq	r6, r4, r5, ror #28
     d6c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     d70:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
	__pi_systat.ondmns |= d;
     d74:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     d78:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
}
     d7c:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
     d80:	64617663 	strbtvs	r7, [r1], #-1635	; 0xfffff99d
void __pi_offdomain (lword d) {
     d84:	00745f70 	rsbseq	r5, r4, r0, ror pc
     d88:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
	PRCMPowerDomainOff (d);
     d8c:	5f747365 	svcpl	0x00747365
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
     d94:	5f007265 	svcpl	0x00007265
     d98:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     da0:	5f74696e 	svcpl	0x0074696e
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
     da8:	725f6574 	subsvc	r6, pc, #116, 10	; 0x1d000000
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     db0:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
	__pi_systat.ondmns &= ~d;
     db4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     db8:	5f5f0065 	svcpl	0x005f0065
}
     dbc:	616c7473 	smcvs	51011	; 0xc743
     dc0:	6f645f62 	svcvs	0x00645f62
void __pi_syserror (word ec, const char *m) {
     dc4:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	00657361 	rsbeq	r7, r5, r1, ror #6
     dcc:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	73657079 	cmnvc	r5, #121	; 0x79
     dd4:	735f5f00 	cmpvc	pc, #0, 30
     dd8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     ddc:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		all_leds_blink;
     de0:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     de4:	5f315f65 	svcpl	0x00315f65
     de8:	61657263 	cmnvs	r5, r3, ror #4
     dec:	5f006574 	svcpl	0x00006574
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     df4:	615f6261 	cmpvs	pc, r1, ror #4
     df8:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
     dfc:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
     e00:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     e04:	6f745f64 	svcvs	0x00745f64
	while (1) {
     e08:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     e0c:	00657461 	rsbeq	r7, r5, r1, ror #8
     e10:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d5c <__pi_ondomain+0x14>
     e14:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
void tci_run_delay_timer () {
     e18:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	setdel = __pi_mintk - __pi_old;
     e1c:	6f442f6e 	svcvs	0x00442f6e
     e20:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     e24:	2f73746e 	svccs	0x0073746e
     e28:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2c:	442f6275 	strtmi	r6, [pc], #-629	; e34 <tci_run_delay_timer+0x1c>
     e30:	72747369 	rsbsvc	r7, r4, #-1543503871	; 0xa4000001
     e34:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
     e38:	442d6465 	strtmi	r6, [sp], #-1125	; 0xfffffb9b
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
	sti_tim;
     e40:	6f727453 	svcvs	0x00727453
}
     e44:	2d656761 	stclcs	7, cr6, [r5, #-388]!	; 0xfffffe7c
     e48:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     e4c:	5f006d65 	svcpl	0x00006d65
     e50:	5f66666f 	svcpl	0x0066666f
     e54:	65440074 	strbvs	r0, [r4, #-116]	; 0xffffff8c
	cli_aux;
     e58:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     e5c:	6f636552 	svcvs	0x00636552
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	654d6472 	strbvs	r6, [sp, #-1138]	; 0xfffffb8e
     e64:	67617373 			; <UNDEFINED> instruction: 0x67617373
     e68:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     e6c:	00667562 	rsbeq	r7, r6, r2, ror #10
	sti_aux;
     e70:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
}
     e74:	5f646573 	svcpl	0x00646573
     e78:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     e7c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
void AONRTCIntHandler () {
     e80:	63657073 	cmnvs	r5, #115	; 0x73
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     e88:	6f6c5f64 	svcvs	0x006c5f64
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
		if (__pi_utims [0] == 0)
     e90:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
     e94:	4843006f 	stmdami	r3, {r0, r1, r2, r3, r5, r6}^
		if (*(__pi_utims [0])) {
     e98:	4543494f 	strbmi	r4, [r3, #-2383]	; 0xfffff6b1
     e9c:	6c665f00 	stclvs	15, cr5, [r6], #-0
			(*(__pi_utims [0]))--;
     ea0:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
		if (__pi_utims [1] == 0)
     ea4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
		if (*(__pi_utims [1])) {
     ea8:	646f6e5f 	strbtvs	r6, [pc], #-3679	; eb0 <AONRTCIntHandler+0x30>
			aux_timer_inactive = 0;
     eac:	62645f65 	rsbvs	r5, r4, #404	; 0x194
			(*(__pi_utims [1]))--;
     eb0:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
		if (__pi_utims [2] == 0)
     eb4:	635f7972 	cmpvs	pc, #1867776	; 0x1c8000
		if (*(__pi_utims [2])) {
     eb8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
			(*(__pi_utims [2]))--;
     ebc:	73695f00 	cmnvc	r9, #0, 30
		if (__pi_utims [3] != 0) {
     ec0:	6178635f 	cmnvs	r8, pc, asr r3
			if (*(__pi_utims [3])) {
     ec4:	61725f00 	cmnvs	r2, r0, lsl #30
				aux_timer_inactive = 0;
     ec8:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
				(*(__pi_utims [3]))--;
     ecc:	00747865 	rsbseq	r7, r4, r5, ror #16
	if (__pi_systat.ledsts) {
     ed0:	6f6c5f5f 	svcvs	0x006c5f5f
     ed4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
		if (__pi_systat.ledblc++ == 0) {
     ed8:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
     edc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
			if (__pi_systat.ledblk) {
     ee0:	705f7473 	subsvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
     ee4:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
     ee8:	735f0074 	cmpvc	pc, #116	; 0x74
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	006b6565 	rsbeq	r6, fp, r5, ror #10
     ef0:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
				if (__pi_systat.ledsts & 0x2)
     ef4:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     ef8:	6f636552 	svcvs	0x00636552
     efc:	654d6472 	strbvs	r6, [sp, #-1138]	; 0xfffffb8e
				if (__pi_systat.ledsts & 0x4)
     f00:	67617373 			; <UNDEFINED> instruction: 0x67617373
				__pi_systat.ledblk = 0;
     f04:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
     f08:	6e655f77 	mcrvs	15, 3, r5, cr5, cr7, {3}
			if (__pi_systat.fstblk)
     f0c:	00797274 	rsbseq	r7, r9, r4, ror r2
     f10:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
				__pi_systat.ledblc = 200;
     f14:	00727265 	rsbseq	r7, r2, r5, ror #4
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	616d6e5f 	cmnvs	sp, pc, asr lr
		cli_tim;
     f1c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
		__pi_new += setdel;
     f20:	62755f00 	rsbsvs	r5, r5, #0, 30
     f24:	43006675 	movwmi	r6, #1653	; 0x675
		setdel = 0;
     f28:	54414552 	strbpl	r4, [r1], #-1362	; 0xfffffaae
		RISE_N_SHINE;
     f2c:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xfffff0bb
		__pi_new += setdel;
     f30:	44524f43 	ldrbmi	r4, [r2], #-3907	; 0xfffff0bd
		RISE_N_SHINE;
     f34:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     f38:	5f657465 	svcpl	0x00657465
		aux_timer_inactive = 1;
     f3c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
     f40:	70666665 	rsbvc	r6, r6, r5, ror #12
				if (__pi_systat.ledsts & 0x1)
     f44:	6f006d64 	svcvs	0x00006d64
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
     f4c:	0064695f 	rsbeq	r6, r4, pc, asr r9
				if (__pi_systat.ledsts & 0x2)
     f50:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     f54:	50470074 	subpl	r0, r7, r4, ror r0
     f58:	735f4f49 	cmpvc	pc, #292	; 0x124
				if (__pi_systat.ledsts & 0x8)
     f5c:	754f7465 	strbvc	r7, [pc, #-1125]	; aff <root+0x3db>
				__pi_systat.ledblk = 1;
     f60:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     f64:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
		if (aux_timer_inactive) {
     f68:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
			cli_aux;
     f6c:	4f41006f 	svcmi	0x0041006f
     f70:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     f74:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
     f78:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     f7c:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     f80:	6f4d3233 	svcvs	0x004d3233
     f84:	5f006564 	svcpl	0x00006564
     f88:	5f69705f 	svcpl	0x0069705f
     f8c:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
     f90:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
word tci_update_delay_ticks (Boolean force) {
     f94:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
	cli_tim;
     f98:	76617474 			; <UNDEFINED> instruction: 0x76617474
     f9c:	61727500 	cmnvs	r2, r0, lsl #10
	if (setdel) {
     fa0:	00736574 	rsbseq	r6, r3, r4, ror r5
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fa4:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     fac:	7172695f 	cmnvc	r2, pc, asr r9
     fb0:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
	return NO;
     fbc:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
			setdel = 0;
     fc0:	00745f6e 	rsbseq	r5, r4, lr, ror #30
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc4:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     fc8:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
}
     fcc:	6b615778 	blvs	1856db4 <__ccfg+0x1836e0c>
		sti_tim;
     fd0:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
		return YES;
     fd4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     fd8:	4e4f4100 	dvfmie	f4, f7, f0
     fdc:	50435557 	subpl	r5, r3, r7, asr r5
     fe0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
	UARTDisable (UART0_BASE);
     fe8:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	41550074 	cmpmi	r5, r4, ror r0
	UARTDisable (UART0_BASE);
     ff0:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
     ff8:	73007261 	movwvc	r7, #609	; 0x261
     ffc:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1000:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	41007469 	tstmi	r0, r9, ror #8
    1008:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
    100c:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    1014:	616e456e 	cmnvs	lr, lr, ror #10
    1018:	00656c62 	rsbeq	r6, r5, r2, ror #24
	urates [0] = rate;
    101c:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
}
    1020:	50006c65 	andpl	r6, r0, r5, ror #24
    1024:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
    1028:	6f507563 	svcvs	0x00507563
    102c:	4f726577 	svcmi	0x00726577
    1030:	5f006666 	svcpl	0x00006666
    1034:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	50534d5f 	subspl	r4, r3, pc, asr sp
    103c:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    1040:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	5f00745f 	svcpl	0x0000745f
    1048:	5f69705f 	svcpl	0x0069705f
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104c:	6f646e6f 	svcvs	0x00646e6f
    1050:	6e69616d 	powvsez	f6, f1, #5.0
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	52415500 	subpl	r5, r1, #0, 10
    1058:	46774854 			; <UNDEFINED> instruction: 0x46774854
    105c:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1060:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1064:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1068:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    106c:	5f5f0065 	svcpl	0x005f0065
	switch (operation) {
    1070:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 708 <receiver+0x400>
static int ioreq_uart_a (int operation, char *buf, int len) {
    1074:	5f747261 	svcpl	0x00747261
    1078:	72746567 	rsbsvc	r6, r4, #432013312	; 0x19c00000
    107c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1080:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
    1084:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
				*buf++ = uart_a_read;
    1088:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
    108c:	61736944 	cmnvs	r3, r4, asr #18
			while (len && uart_a_char_available) {
    1090:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1094:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1098:	654c7852 	strbvs	r7, [ip, #-2130]	; 0xfffff7ae
			if (len != operation) {
    109c:	006c6576 	rsbeq	r6, ip, r6, ror r5
}
    10a0:	6f646552 	svcvs	0x00646552
    10a4:	0078725f 	rsbseq	r7, r8, pc, asr r2
			uart_a_disable_int;
    10a8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			if (uart_a_char_available) {
    10ac:	654c7854 	strbvs	r7, [ip, #-2132]	; 0xfffff7ac
				*buf++ = uart_a_read;
    10b0:	006c6576 	rsbeq	r6, ip, r6, ror r5
			uart_a_disable_int;
    10b4:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    10b8:	436c7274 	cmnmi	ip, #116, 4	; 0x40000007
			if (uart_a_char_available) {
    10bc:	6b636f6c 	blvs	18dce74 <__ccfg+0x18bcecc>
    10c0:	00746547 	rsbseq	r6, r4, r7, asr #10
				uart_a_enable_int;
    10c4:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    10c8:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
				goto Redo_rx;
    10cc:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10d0:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    10d4:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
			return -2;
    10d8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    10dc:	43525000 	cmpmi	r2, #0
				uart_a_write (*buf);
    10e0:	616f4c4d 	cmnvs	pc, sp, asr #24
    10e4:	74655364 	strbtvc	r5, [r5], #-868	; 0xfffffc9c
			while (len && uart_a_room_in_tx) {
    10e8:	33697500 	cmncc	r9, #0, 10
    10ec:	616e4532 	cmnvs	lr, r2, lsr r5
    10f0:	00656c62 	rsbeq	r6, r5, r2, ror #24
			if (len != operation) {
    10f4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
			uart_a_disable_int;
    10f8:	755f656c 	ldrbvc	r6, [pc, #-1388]	; b94 <root+0x470>
    10fc:	5f747261 	svcpl	0x00747261
			if (uart_a_room_in_tx) {
    1100:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1104:	70757272 	rsbsvc	r7, r5, r2, ror r2
				uart_a_enable_int;
    1108:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
    110c:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
				*buf++ = uart_a_read;
    1110:	454f4649 	strbmi	r4, [pc, #-1609]	; acf <root+0x3ab>
			if (uart_a_room_in_tx) {
    1114:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
				uart_a_write (*buf);
    1118:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    111c:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	616c4674 	smcvs	50276	; 0xc464
    1124:	64007367 	strvs	r7, [r0], #-871	; 0xfffffc99
			uart_a_enable_int;
    1128:	754e6f69 	strbvc	r6, [lr, #-3945]	; 0xfffff097
    112c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1130:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			return 0;
    1134:	61755f69 	cmnvs	r5, r9, ror #30
			if (len == UART_CNTRL_SETRATE) {
    1138:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
				if (__pi_uart_setrate (*((word*)buf),
    113c:	61727465 	cmnvs	r2, r5, ror #8
    1140:	50006574 	andpl	r6, r0, r4, ror r5
    1144:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
				syserror (EREQPAR, "uar");
    1148:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
			syserror (ENOOPER, "uai");
    114c:	72464f49 	subvc	r4, r6, #292	; 0x124
			if (len == UART_CNTRL_GETRATE) {
    1150:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
				return 1;
    1154:	61736944 	cmnvs	r3, r4, asr #18
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	00656c62 	rsbeq	r6, r5, r2, ror #24
			syserror (ENOOPER, "uai");
    115c:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    1160:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    1164:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
    1168:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    116c:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1170:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1174:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
    1178:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
    117c:	6f6d7265 	svcvs	0x006d7265
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	6f006564 	svcvs	0x00006564
void UART0IntHandler () {
    1184:	61726570 	cmnvs	r2, r0, ror r5
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    118c:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
    1190:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1194:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1198:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	00657669 	rsbeq	r7, r5, r9, ror #12
    11a0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
		RISE_N_SHINE;
    11a4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    11a8:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
		i_trigger (devevent (UART_A, READ));
    11ac:	5f6f6465 	svcpl	0x006f6465
    11b0:	75007874 	strvc	r7, [r0, #-2164]	; 0xfffff78c
    11b4:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    11b8:	6156636e 	cmpvs	r6, lr, ror #6
    11bc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    11c0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    11c4:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    11c8:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 11d0 <UART0IntHandler+0x50>
    11cc:	66775f6f 	ldrbtvs	r5, [r7], -pc, ror #30
    11d0:	73615f69 	cmnvc	r1, #420	; 0x1a4
    11d4:	65656e5f 	strbvs	r6, [r5, #-3679]!	; 0xfffff1a1
    11d8:	00646564 	rsbeq	r6, r4, r4, ror #10
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	524e4f41 	subpl	r4, lr, #260	; 0x104
    11e0:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
    11e4:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
		i_trigger (devevent (UART_A, WRITE));
    11e8:	68436575 	stmdavs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	74655332 	strbtvc	r5, [r5], #-818	; 0xfffffcce
    11f0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
		RISE_N_SHINE;
    11f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    11f8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    11fc:	4f410074 	svcmi	0x00410074
		i_trigger (devevent (UART_A, WRITE));
    1200:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    1204:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    1208:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    120c:	70007265 	andvc	r7, r0, r5, ror #4
    1210:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1214:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
    1218:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
    121c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1220:	745f7961 	ldrbvc	r7, [pc], #-2401	; 1228 <UART0IntHandler+0xa8>
    1224:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1228:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
    122c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1230:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    1234:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    1238:	70006f64 	andvc	r6, r0, r4, ror #30
    123c:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
void __buttons_setirq (int val) {
    1240:	755f7469 	ldrbvc	r7, [pc, #-1129]	; ddf <__pi_syserror+0x1b>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	00747261 	rsbseq	r7, r4, r1, ror #4
    1248:	63726f66 	cmnvs	r2, #408	; 0x198
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	41550065 	cmpmi	r5, r5, rrx
    1250:	6e455452 	mcrvs	4, 2, r5, cr5, cr2, {2}
    1254:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125c:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
    1260:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0xfffffe9b
    1264:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1268:	006f6944 	rsbeq	r6, pc, r4, asr #18
    126c:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
    1270:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
}
    1274:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    1278:	71726974 	cmnvc	r2, r4, ror r9
    127c:	65646d00 	strbvs	r6, [r4, #-3328]!	; 0xfffff300
    1280:	0079616c 	rsbseq	r6, r9, ip, ror #2
void __pinlist_setirq (int val) {
    1284:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	for (i = 0; i < N_PINLIST; i++) {
    1288:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	72695f65 	rsbvc	r5, r9, #404	; 0x194
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	682f0071 	stmdavs	pc!, {r0, r4, r5, r6}	; <UNPREDICTABLE>
	for (i = 0; i < N_PINLIST; i++) {
    1294:	2f656d6f 	svccs	0x00656d6f
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	70657473 	rsbvc	r7, r5, r3, ror r4
    129c:	2f6e6568 	svccs	0x006e6568
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	6b736544 	blvs	1cda7b8 <__ccfg+0x1cba810>
    12a4:	2f706f74 	svccs	0x00706f74
    12a8:	4f534c4f 	svcmi	0x00534c4f
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	2f54454e 	svccs	0x0054454e
}
    12b0:	4f434950 	svcmi	0x00434950
    12b4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    12b8:	2f534f63 	svccs	0x00534f63
    12bc:	33314343 	teqcc	r1, #201326593	; 0xc000001
void GPIOIntHandler () {
    12c0:	6d2f5858 	stcvs	8, cr5, [pc, #-352]!	; 1168 <ioreq_uart_a+0xf8>
if (buttons_int) {
    12c4:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    12c8:	50470063 	subpl	r0, r7, r3, rrx
	buttons_disable ();
    12cc:	635f4f49 	cmpvs	pc, #292	; 0x124
    12d0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
	i_trigger ((aword)&__button_list);
    12d4:	006f6944 	rsbeq	r6, pc, r4, asr #18
    12d8:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    12dc:	416c7274 	smcmi	50980	; 0xc724
    12e0:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    12e4:	5f00636e 	svcpl	0x0000636e
    12e8:	5f69705f 	svcpl	0x0069705f
    12ec:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    12f0:	6572666b 	ldrbvs	r6, [r2, #-1643]!	; 0xfffff995
    12f4:	63740065 	cmnvs	r4, #101	; 0x65
    12f8:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
    12fc:	75615f6e 	strbvc	r5, [r1, #-3950]!	; 0xfffff092
	RISE_N_SHINE;
    1300:	696c6978 	stmdbvs	ip!, {r3, r4, r5, r6, r8, fp, sp, lr}^
    1304:	5f797261 	svcpl	0x00797261
    1308:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
if (pin_sensor_int) {
    130c:	5f5f0072 	svcpl	0x005f0072
    1310:	6c6e6970 			; <UNDEFINED> instruction: 0x6c6e6970
	i_trigger ((aword)(&__input_pins));
    1314:	5f747369 	svcpl	0x00747369
    1318:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    131c:	47007172 	smlsdxmi	r0, r2, r1, r7
    1320:	494f4950 	stmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1324:	6148746e 	cmpvs	r8, lr, ror #8
    1328:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    132c:	6f420072 	svcvs	0x00420072
    1330:	61656c6f 	cmnvs	r5, pc, ror #24
    1334:	4155006e 	cmpmi	r5, lr, rrx
    1338:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
    133c:	654c4f46 	strbvs	r4, [ip, #-3910]	; 0xfffff0ba
	__pinsen_disable_and_clear;
    1340:	536c6576 	cmnpl	ip, #494927872	; 0x1d800000
	RISE_N_SHINE;
    1344:	53007465 	movwpl	r7, #1125	; 0x465
    1348:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    134c:	79536c72 	ldmdbvc	r3, {r1, r4, r5, r6, sl, fp, sp, lr}^
}
    1350:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1354:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1358:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
    135c:	76617474 			; <UNDEFINED> instruction: 0x76617474
    1360:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0xfffffb00
void system_init () {
    1364:	0073746e 	rsbseq	r7, r3, lr, ror #8
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	6c656475 	cfstrdvs	mvd6, [r5], #-468	; 0xfffffe2c
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	41007961 	tstmi	r0, r1, ror #18
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	61424e4f 	cmpvs	r2, pc, asr #28
    1374:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
    1378:	61736944 	cmnvs	r3, r4, asr #18
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1380:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    1388:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    138c:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1394:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	4100656c 	tstmi	r0, ip, ror #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	61424e4f 	cmpvs	r2, pc, asr #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	61746c6f 	cmnvs	r4, pc, ror #24
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
    13b8:	6f690074 	svcvs	0x00690074
    13bc:	5f716572 	svcpl	0x00716572
    13c0:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
		if (port_confs [i] & 0x80)
    13c4:	5f00615f 	svcpl	0x0000615f
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	5f69705f 	svcpl	0x0069705f
    13cc:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
		if (port_confs [i] & 0x40)
    13d0:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	4700746e 	strmi	r7, [r0, -lr, ror #8]
    13d8:	5f4f4950 	svcpl	0x004f4950
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13e0:	64006f69 	strvs	r6, [r0], #-3945	; 0xfffff097
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e4:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
	all_leds_blink;
    13e8:	5f007469 	svcpl	0x00007469
    13ec:	5f69705f 	svcpl	0x0069705f
    13f0:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
    13f4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    13f8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    13fc:	006d756e 	rsbeq	r7, sp, lr, ror #10
    1400:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1408:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
    140c:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
    1410:	55007972 	strpl	r7, [r0, #-2418]	; 0xfffff68e
    1414:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1420:	43525000 	cmpmi	r2, #0
	IntEnable (INT_AON_RTC_COMB);
    1424:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
    1428:	6f646c55 	svcvs	0x00646c55
    142c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	__pi_malloc_init ();
    1430:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	756f0065 	strbvc	r0, [pc, #-101]!	; 13d7 <system_init+0x73>
    1438:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	6156656c 	cmpvs	r6, ip, ror #10
    1444:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1448:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	706f7400 	rsbvc	r7, pc, r0, lsl #8
    1450:	614d664f 	cmpvs	sp, pc, asr #12
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	74536e69 	ldrbvc	r6, [r3], #-3689	; 0xfffff197
    1458:	006b6361 	rsbeq	r6, fp, r1, ror #6
    145c:	6564675f 	strbvs	r6, [r4, #-1887]!	; 0xfffff8a1
	urates [0] = UART_RATE / 100;
    1460:	0079616c 	rsbseq	r6, r9, ip, ror #2
    1464:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	reinit_uart ();
    1468:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
	EXTRA_INITIALIZERS;
    146c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1470:	0072656c 	rsbseq	r6, r2, ip, ror #10
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1474:	70656544 	rsbvc	r6, r5, r4, asr #10
    1478:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    147c:	6f700070 	svcvs	0x00700070
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1480:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
    1484:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1488:	63740067 	cmnvs	r4, #103	; 0x67
    148c:	70755f69 	rsbsvc	r5, r5, r9, ror #30
			devinit [i] . init (devinit [i] . param);
    1490:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1494:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    1498:	745f7961 	ldrbvc	r7, [pc], #-2401	; 14a0 <system_init+0x13c>
    149c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
	IntEnable (INT_UART0_COMB);
    14a0:	61654d00 	cmnvs	r5, r0, lsl #26
    14a4:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
}
    14a8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
	tci_run_auxiliary_timer ();
    14ac:	66716572 			; <UNDEFINED> instruction: 0x66716572
		diag ("");
    14b0:	745f6e75 	ldrbvc	r6, [pc], #-3701	; 14b8 <system_init+0x154>
    14b4:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b8:	0076656c 	rsbseq	r6, r6, ip, ror #10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		diag ("Leftover RAM: %d bytes",
    14c0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    14c4:	00797063 	rsbseq	r7, r9, r3, rrx
    14c8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    14cc:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
    14d0:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    14d4:	61776e75 	cmnvs	r7, r5, ror lr
    14d8:	71007469 	tstvc	r0, r9, ror #8
    14dc:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    14e0:	726f6900 	rsbvc	r6, pc, #0, 18
    14e4:	5f007165 	svcpl	0x00007165
    14e8:	5f69705f 	svcpl	0x0069705f
    14ec:	6b726f66 	blvs	1c9d28c <__ccfg+0x1c7d2e4>
    14f0:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    14f4:	706d006c 	rsbvc	r0, sp, ip, rrx
    14f8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    14fc:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
    1500:	5f72656d 	svcpl	0x0072656d
    1504:	00646461 	rsbeq	r6, r4, r1, ror #8
    1508:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    150c:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    1510:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1514:	616d5f69 	cmnvs	sp, r9, ror #30
    1518:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1520:	5f5f0074 	svcpl	0x005f0074
    1524:	745f6970 	ldrbvc	r6, [pc], #-2416	; 152c <setpowermode+0x10>
    1528:	67676972 			; <UNDEFINED> instruction: 0x67676972
    152c:	5f007265 	svcpl	0x00007265
    1530:	5f69705f 	svcpl	0x0069705f
    1534:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    1538:	5f006e65 	svcpl	0x00006e65
}
    153c:	5f69705f 	svcpl	0x0069705f
__attribute__ ((noreturn)) void __pi_release () {
    1540:	6678616d 	ldrbtvs	r6, [r8], -sp, ror #2
    1544:	00656572 	rsbeq	r6, r5, r2, ror r5
    1548:	6e757263 	cdpvs	2, 7, cr7, cr5, cr3, {3}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    154c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
	check_stack_overflow;
    1550:	68636e00 	stmdavs	r3!, {r9, sl, fp, sp, lr}^
    1554:	6e6d006b 	cdpvs	0, 6, cr0, cr13, cr11, {3}
    1558:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
	update_n_wake (MAX_WORD, NO);
    155c:	6f727000 	svcvs	0x00727000
    1560:	64656563 	strbtvs	r6, [r5], #-1379	; 0xfffffa9d
    1564:	656c6d00 	strbvs	r6, [ip, #-3328]!	; 0xfffff300
	for_all_tasks (__pi_curr) {
    1568:	5f5f006e 	svcpl	0x005f006e
    156c:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    1570:	67697274 			; <UNDEFINED> instruction: 0x67697274
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	00726567 	rsbseq	r6, r2, r7, ror #10
	__SLEEP;
    1578:	64646461 	strbtvs	r6, [r4], #-1121	; 0xfffffb9f
    157c:	75667665 	strbvc	r7, [r6, #-1637]!	; 0xfffff99b
    1580:	7000636e 	andvc	r6, r0, lr, ror #6
    1584:	65766469 	ldrbvs	r6, [r6, #-1129]!	; 0xfffffb97
	system_event_count ++;
    1588:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    158c:	5f006761 	svcpl	0x00006761
	switch (__pi_systat.effpdm) {
    1590:	5f69705f 	svcpl	0x0069705f
    1594:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    1598:	6d007461 	cfstrsvs	mvf7, [r0, #-388]	; 0xfffffe7c
    159c:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
			__WFI ();
    15a0:	00745f74 	rsbseq	r5, r4, r4, ror pc
    15a4:	7266636d 	rsbvc	r6, r6, #-1275068415	; 0xb4000001
    15a8:	77006565 	strvc	r6, [r0, -r5, ror #10]
	check_stack_overflow;
    15ac:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    15b0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b4:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
    15b8:	00747365 	rsbseq	r7, r4, r5, ror #6
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
			goto Redo;
    15c0:	6f682f00 	svcvs	0x00682f00
	for_all_tasks (__pi_curr) {
    15c4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15cc:	442f6e65 	strtmi	r6, [pc], #-3685	; 15d4 <__pi_release+0x94>
    15d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d4:	4f2f706f 	svcmi	0x002f706f
    15d8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    15dc:	502f5445 	eorpl	r5, pc, r5, asr #8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15e0:	534f4349 	movtpl	r4, #62281	; 0xf349
    15e4:	6369502f 	cmnvs	r9, #47	; 0x2f
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	6b2f534f 	blvs	bd632c <__ccfg+0xbb6384>
    15ec:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			__WFI ();
    15f0:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    15f8:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
}
    15fc:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1600:	5f5f0074 	svcpl	0x005f0074
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1604:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1608:	74736461 	ldrbtvc	r6, [r3], #-1121	; 0xfffffb9f
    160c:	00657461 	rsbeq	r7, r5, r1, ror #8
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1610:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1614:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1618:	5f5f0074 	svcpl	0x005f0074
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161c:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1620:	6d746961 			; <UNDEFINED> instruction: 0x6d746961
    1624:	6c006d65 	stcvs	13, cr6, [r0], {101}	; 0x65
    1628:	00646e72 	rsbeq	r6, r4, r2, ror lr
    162c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    1634:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	75686300 	strbvc	r6, [r8, #-768]!	; 0xfffffd00
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    163c:	75006b6e 	strvc	r6, [r0, #-2926]	; 0xfffff492
    1640:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    1644:	5f6e5f65 	svcpl	0x006e5f65
    1648:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
    164c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			SysCtrlSetRechargeBeforePowerDown
    1650:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xfffff097
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1654:	67006465 	strvs	r6, [r0, -r5, ror #8]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1658:	6f637465 	svcvs	0x00637465
    165c:	64006564 	strvs	r6, [r0], #-1380	; 0xfffffa9c
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
    1664:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1668:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166c:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    1670:	6f676400 	svcvs	0x00676400
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	5f007475 	svcpl	0x00007475
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	5f69705f 	svcpl	0x0069705f
    167c:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    1680:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1684:	77007465 	strvc	r7, [r0, -r5, ror #8]
			while (!(AONWUCPowerStatusGet () &
    1688:	006e7566 	rsbeq	r7, lr, r6, ror #10
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	6961666e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
    1690:	5f5f006c 	svcpl	0x005f006c
    1694:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1698:	00656572 	rsbeq	r6, r5, r2, ror r5
    169c:	535f4944 	cmppl	pc, #68, 18	; 0x110000
    16a0:	5f004749 	svcpl	0x00004749
    16a4:	5f69705f 	svcpl	0x0069705f
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    16ac:	6b007465 	blvs	1e848 <__exidx_end+0x18ac8>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	616c6c69 	cmnvs	ip, r9, ror #24
    16b4:	5f006c6c 	svcpl	0x00006c6c
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b8:	5f69705f 	svcpl	0x0069705f
			reinit_uart ();
    16bc:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    16c0:	00797063 	rsbseq	r7, r9, r3, rrx
    16c4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
}
    16c8:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    16cc:	7475006e 	ldrbtvc	r0, [r5], #-110	; 0xffffff92
    16d0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    16d8:	00657465 	rsbeq	r7, r5, r5, ror #8
    16dc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    16e4:	7461636e 	strbtvc	r6, [r1], #-878	; 0xfffffc92
    16e8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ec:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	7000657a 	andvc	r6, r0, sl, ror r5
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	00766572 	rsbseq	r6, r6, r2, ror r5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	63745f5f 	cmnvs	r4, #380	; 0x17c
    16fc:	61625f76 	smcvs	9718	; 0x25f6
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1700:	5f727474 	svcpl	0x00727474
    1704:	63740074 	cmnvs	r4, #116	; 0x74
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1708:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170c:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1710:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1714:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
			PRCMPowerDomainOff (
    1718:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1550 <__pi_release+0x10>
    171c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__SLEEP;
    1720:	6165725f 	cmnvs	r5, pc, asr r2
    1724:	63740064 	cmnvs	r4, #100	; 0x64
  __ASM volatile ("cpsie i" : : : "memory");
    1728:	645f7076 	ldrbvs	r7, [pc], #-118	; 1730 <__pi_release+0x1f0>
	goto Redo;
    172c:	6f707369 	svcvs	0x00707369
    1730:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
    1734:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    1738:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
    173c:	74630067 	strbtvc	r0, [r3], #-103	; 0xffffff99
    1740:	75666c72 	strbvc	r6, [r6, #-3186]!	; 0xfffff38e
    1744:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    1748:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1694 <__pi_release+0x154>
    174c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    1750:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1754:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1758:	6f746b73 	svcvs	0x00746b73
    175c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1760:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1764:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1768:	2f534f43 	svccs	0x00534f43
    176c:	4f636950 	svcmi	0x00636950
    1770:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1774:	2f736269 	svccs	0x00736269
    1778:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    177c:	63742f49 	cmnvs	r4, #292	; 0x124
    1780:	00632e76 	rsbeq	r2, r3, r6, ror lr
    1784:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1788:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
    178c:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
    1790:	6f5f7663 	svcvs	0x005f7663
    1794:	006e6570 	rsbeq	r6, lr, r0, ror r5
	cli_tim;
    1798:	5f766374 	svcpl	0x00766374
    179c:	706f7264 	rsbvc	r7, pc, r4, ror #4
    17a0:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
	diag ("PicOS halted");
    17a4:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
	mdelay (500);
    17a8:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
    17ac:	00797470 	rsbseq	r7, r9, r0, ror r4
	setpowermode (2);
    17b0:	70766374 	rsbsvc	r6, r6, r4, ror r3
	__PCB = NULL;
    17b4:	655f7968 	ldrbvs	r7, [pc, #-2408]	; e54 <tci_run_delay_timer+0x3c>
	release;
    17b8:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    17bc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    17c0:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
    17c4:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
int main (void) {
    17c8:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	73657565 	cmnvc	r5, #423624704	; 0x19400000
    17d0:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17d8 <main+0x10>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	715f7663 	cmpvc	pc, r3, ror #12
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17d8:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
	system_init ();
    17dc:	5f00735f 	svcpl	0x0000735f
	tcv_init ();
    17e0:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e4:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
    17e8:	745f6d65 	ldrbvc	r6, [pc], #-3429	; 17f0 <main+0x28>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17ec:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17f4 <main+0x2c>
    17f0:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    17f4:	636f6c62 	cmnvs	pc, #25088	; 0x6200
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    17f8:	00745f6b 	rsbseq	r5, r4, fp, ror #30
    17fc:	70747461 	rsbsvc	r7, r4, r1, ror #8
	delay (16, 0);
    1800:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
    1804:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1808:	725f7245 	subsvc	r7, pc, #1342177284	; 0x50000004
	__pi_release ();
    180c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    1810:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1814:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    1818:	63740073 	cmnvs	r4, #115	; 0x73
    181c:	72655f76 	rsbvc	r5, r5, #472	; 0x1d8
    1820:	00657361 	rsbeq	r7, r5, r1, ror #6
    1824:	5f766374 	svcpl	0x00766374
static void killev (__pi_pcb_t *pid) {
    1828:	70646e65 	rsbvc	r6, r4, r5, ror #28
	wfun = (aword)(pid->code);
    182c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	for_all_tasks (i) {
    1830:	656e5f70 	strbvs	r5, [lr, #-3952]!	; 0xfffff090
		for (j = 0; j < nevents (i); j++) {
    1834:	71720077 	cmnvc	r2, r7, ror r0
    1838:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    183c:	72747000 	rsbsvc	r7, r4, #0
			    || i->Events [j] . Event == wfun
    1840:	6f700073 	svcvs	0x00700073
		for (j = 0; j < nevents (i); j++) {
    1844:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
			if (i->Events [j] . Event == (aword)pid
    1848:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
    184c:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    1850:	0073706e 	rsbseq	r7, r3, lr, rrx
				wakeupev (i, j);
    1854:	5f766374 	svcpl	0x00766374
    1858:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
	for_all_tasks (i) {
    185c:	63740065 	cmnvs	r4, #101	; 0x65
}
    1860:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	0065736f 	rsbeq	r7, r5, pc, ror #6
static void qfree (aword *ch) {
    1868:	63745f5f 	cmnvs	r4, #380	; 0x17c
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186c:	65735f76 	ldrbvs	r5, [r3, #-3958]!	; 0xfffff08a
	cc = (aword*)(mpools + MA_NP);
    1870:	73656473 	cmnvc	r5, #1929379840	; 0x73000000
	m_setnextp (ch, chunk);
    1874:	00745f63 	rsbseq	r5, r4, r3, ror #30
	m_setnextp (cc, ch);
    1878:	73796870 	cmnvc	r9, #112, 16	; 0x700000
}
    187c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1880:	61636973 	smcvs	13971	; 0x3693
    1884:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
    1888:	64657565 	strbtvs	r7, [r5], #-1381	; 0xfffffa9b
			m_setnextp (cc, m_nextp (chunk));
    188c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			m_size (chunk) += m_hdrlen + m_size (ch);
    1890:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1894:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
    1898:	6f697373 	svcvs	0x00697373
    189c:	6374006e 	cmnvs	r4, #110	; 0x6e
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	635f7076 	cmpvs	pc, #118	; 0x76
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
    18a8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    18ac:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
			m_setnextp (cc, m_nextp (chunk));
    18b0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
    18b8:	63740064 	cmnvs	r4, #100	; 0x64
    18bc:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    18c0:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
    18c4:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    18c8:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
			if (m_size (chunk) >= m_size (ch))
    18cc:	006e7265 	rsbeq	r7, lr, r5, ror #4
    18d0:	5f766374 	svcpl	0x00766374
    18d4:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
		chunk = m_nextp (chunk))
    18d8:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    18dc:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
    18e0:	00736574 	rsbseq	r6, r3, r4, ror r5
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	63745f5f 	cmnvs	r4, #380	; 0x17c
	diag_wait (a);
    18e8:	68715f76 	ldmdavs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	diag_wchar (c, a);
    18ec:	5f646165 	svcpl	0x00646165
    18f0:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
}
    18f4:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
    18f8:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
	syserror (ESTATE, "state");
    18fc:	00687467 	rsbeq	r7, r8, r7, ror #8
    1900:	70736964 	rsbsvc	r6, r3, r4, ror #18
    1904:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1908:	706e725f 	rsbvc	r7, lr, pc, asr r2
	for (i = 0; i < MAX_UTIMERS; i++)
    190c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
void utimer_add (address ut) {
    1910:	5f796870 	svcpl	0x00796870
    1914:	00766372 	rsbseq	r6, r6, r2, ror r3
		if (__pi_utims [i] == NULL)
    1918:	65757162 	ldrbvs	r7, [r5, #-354]!	; 0xfffffe9e
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	70006575 	andvc	r6, r0, r5, ror r5
    1920:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
		syserror (ERESOURCE, "ut a");
    1924:	5f00736e 	svcpl	0x0000736e
	__pi_utims [i] = ut;
    1928:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
}
    192c:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
    1930:	5f6b636f 	svcpl	0x006b636f
    1934:	756f0073 	strbvc	r0, [pc, #-115]!	; 18c9 <qfree+0x65>
	*t = v;
    1938:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
	TCI_RUN_AUXILIARY_TIMER;
    193c:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
void update_n_wake (word min, Boolean force) {
    1940:	5f707663 	svcpl	0x00707663
	if (TCI_UPDATE_DELAY_TICKS (force))
    1944:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1948:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    194c:	7473655f 	ldrbtvc	r6, [r3], #-1375	; 0xfffffaa1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1950:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1954:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    1958:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
    195c:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
    1960:	5349746c 	movtpl	r7, #37996	; 0x946c
    1964:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
    1968:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    196c:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
    1970:	61485253 	cmpvs	r8, r3, asr r2
    1974:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1978:	655f0072 	ldrbvs	r0, [pc, #-114]	; 190e <utimer_add+0x2>
    197c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    1980:	62655f00 	rsbvs	r5, r5, #0, 30
		for_all_tasks (i) {
    1984:	2f007373 	svccs	0x00007373
	__pi_mintk = znew + min;
    1988:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    198c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			if (!twaiting (i))
    1990:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1994:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1998:	706f746b 	rsbvc	r7, pc, fp, ror #8
    199c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    19a0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    19a4:	4349502f 	movtmi	r5, #36911	; 0x902f
    19a8:	502f534f 	eorpl	r5, pc, pc, asr #6
    19ac:	534f6369 	movtpl	r6, #62313	; 0xf369
    19b0:	3143432f 	cmpcc	r3, pc, lsr #6
    19b4:	2f585833 	svccs	0x00585833
    19b8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    19bc:	5f707574 	svcpl	0x00707574
    19c0:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    19c4:	625f0063 	subsvs	r0, pc, #99	; 0x63
				wakeuptm (i);
    19c8:	5f007373 	svcpl	0x00007373
    19cc:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
		for_all_tasks (i) {
    19d0:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
				d = i->Timer - znew;
    19d4:	66654474 			; <UNDEFINED> instruction: 0x66654474
    19d8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    19dc:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
		if ((word)(__pi_mintk - znew) < min) 
    19e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    19e4:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
    19e8:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
	__pi_old = znew;
    19ec:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
}
    19f0:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
	TCI_RUN_DELAY_TIMER;
    19f4:	65443233 	strbvs	r3, [r4, #-563]	; 0xfffffdcd
}
    19f8:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
    19fc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1a00:	00525349 	subseq	r5, r2, r9, asr #6
    1a04:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a08:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
void proceed (word state) {
    1a0c:	4f4c5f54 	svcmi	0x004c5f54
	prcdstate (__pi_curr, state);
    1a10:	305f4441 	subscc	r4, pc, r1, asr #8
    1a14:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	release;
    1a18:	4f565f47 	svcmi	0x00565f47
    1a1c:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
void __pi_wait (aword event, word state) {
    1a20:	5f44414f 	svcpl	0x0044414f
	sint j = nevents (__pi_curr);
    1a24:	43430031 	movtmi	r0, #12337	; 0x3031
	if (j >= MAX_EVENTS_PER_TASK)
    1a28:	425f4746 	subsmi	r4, pc, #18350080	; 0x1180000
    1a2c:	4f435f4c 	svcmi	0x00435f4c
    1a30:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
		syserror (ENEVENTS, "sw");
    1a34:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1a38:	54525f47 	ldrbpl	r5, [r2], #-3911	; 0xfffff0b9
	setestate (__pi_curr->Events [j], state, event);
    1a3c:	464f5f43 	strbmi	r5, [pc], -r3, asr #30
	incwait (__pi_curr);
    1a40:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
	setestate (__pi_curr->Events [j], state, event);
    1a44:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    1a48:	4f4d5f47 	svcmi	0x004d5f47
    1a4c:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
    1a50:	00464e4f 	subeq	r4, r6, pc, asr #28
void __pi_trigger (aword event) {
    1a54:	63635f5f 	cmnvs	r3, #380	; 0x17c
	for_all_tasks (i) {
    1a58:	43006766 	movwmi	r6, #1894	; 0x766
		for (j = 0; j < nevents (i); j++) {
    1a5c:	5f474643 	svcpl	0x00474643
    1a60:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    1a64:	444e415f 	strbmi	r4, [lr], #-351	; 0xfffffea1
    1a68:	5349445f 	movtpl	r4, #37983	; 0x945f
			if (i->Events [j] . Event == event) {
    1a6c:	414c465f 	cmpmi	ip, pc, asr r6
    1a70:	43005347 	movwmi	r5, #839	; 0x347
    1a74:	5f474643 	svcpl	0x00474643
				wakeupev (i, j);
    1a78:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1a7c:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
	for_all_tasks (i) {
    1a80:	4300305f 	movwmi	r3, #95	; 0x5f
}
    1a84:	5f474643 	svcpl	0x00474643
aword __pi_join (aword pid, word st) {
    1a88:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
	for_all_tasks (i) {
    1a8c:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
    1a90:	2f00315f 	svccs	0x0000315f
	return 0;
    1a94:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if ((aword)i == pid) {
    1a98:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			__pi_wait (pid, st);
    1a9c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
}
    1aa0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	for_all_tasks (i) {
    1aa4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1aa8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
void delay (word d, word state) {
    1aac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	settstate (__pi_curr, state);
    1ab0:	4349502f 	movtmi	r5, #36911	; 0x902f
    1ab4:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ab8:	534f6369 	movtpl	r6, #62313	; 0xf369
    1abc:	3143432f 	cmpcc	r3, pc, lsr #6
	update_n_wake (d, YES);
    1ac0:	2f585833 	svccs	0x00585833
    1ac4:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
	__pi_curr->Timer = __pi_old + d;
    1ac8:	4300632e 	movwmi	r6, #814	; 0x32e
    1acc:	5f474643 	svcpl	0x00474643
	inctimer (__pi_curr);
    1ad0:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    1ad4:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1ad8:	00315f46 	eorseq	r5, r1, r6, asr #30
}
    1adc:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1ae0:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	if (fun == NULL)
    1ae4:	41545f47 	cmpmi	r4, r7, asr #30
		return (int) __pi_curr;
    1ae8:	41445f50 	cmpmi	r4, r0, asr pc
    1aec:	00305f50 	eorseq	r5, r0, r0, asr pc
	for_all_tasks (i)
    1af0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    1af4:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
		if (i->code == fun)
    1af8:	41545f47 	cmpmi	r4, r7, asr #30
	for_all_tasks (i)
    1afc:	41445f50 	cmpmi	r4, r0, asr pc
    1b00:	00315f50 	eorseq	r5, r1, r0, asr pc
    1b04:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
int __pi_strlen (const char *s) {
    1b08:	4300745f 	movwmi	r7, #1119	; 0x45f
	for (i = 0; *(s+i) != '\0'; i++);
    1b0c:	5f474643 	svcpl	0x00474643
}
    1b10:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for (i = 0; *(s+i) != '\0'; i++);
    1b14:	4f52505f 	svcmi	0x0052505f
	while ((Boolean)(*d++ = *s++));
    1b18:	32315f54 	eorscc	r5, r1, #84, 30	; 0x150
    1b1c:	36395f37 	shasxcc	r5, r9, r7
    1b20:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    1b24:	52455f47 	subpl	r5, r5, #284	; 0x11c
	while (n-- && (*s != '\0'))
    1b28:	5f455341 	svcpl	0x00455341
    1b2c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
	*d = '\0';
    1b30:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	while (n-- && (*s != '\0'))
    1b34:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1b38:	505f4746 	subspl	r4, pc, r6, asr #14
		*d++ = *s++;
    1b3c:	5f544f52 	svcpl	0x00544f52
    1b40:	305f3133 	subscc	r3, pc, r3, lsr r1	; <UNPREDICTABLE>
	while (n--)
    1b44:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b48:	4d495f47 	stclmi	15, cr5, [r9, #-284]	; 0xfffffee4
		*dest++ = *src++;
    1b4c:	5f454741 	svcpl	0x00454741
    1b50:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
    1b54:	4f435f44 	svcmi	0x00435f44
	while (n--)
    1b58:	4300464e 	movwmi	r4, #1614	; 0x64e
}
    1b5c:	5f474643 	svcpl	0x00474643
		*dest++ = c;
    1b60:	51455246 	cmppl	r5, r6, asr #4
void adddevfunc (devreqfun_t rf, int loc) {
    1b64:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
		syserror (EREQPAR, "addv");
    1b68:	00544553 	subseq	r4, r4, r3, asr r5
		syserror (ERESOURCE, "addv");
    1b6c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (ioreq [loc] != NULL)
    1b70:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1b74:	52505f47 	subspl	r5, r0, #284	; 0x11c
		syserror (ERESOURCE, "addv");
    1b78:	365f544f 	ldrbcc	r5, [pc], -pc, asr #8
	ioreq [loc] = rf;
    1b7c:	32335f33 	eorscc	r5, r3, #51, 30	; 0xcc
}
    1b80:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b84:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
sint io (word retry, word dev, word operation, char *buf, word len) {
    1b88:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
    1b8c:	305f454c 	subscc	r4, pc, ip, asr #10
    1b90:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b94:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1b98:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
    1b9c:	315f454c 	cmpcc	pc, ip, asr #10
    1ba0:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		syserror (ENODEVICE, "io");
    1ba4:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1ba8:	505f4746 	subspl	r4, pc, r6, asr #14
	if (len == 0)
    1bac:	5f544f52 	svcpl	0x00544f52
	ret = (ioreq [dev]) (operation, buf, len);
    1bb0:	365f3539 			; <UNDEFINED> instruction: 0x365f3539
    1bb4:	43430034 	movtmi	r0, #12340	; 0x3034
	if (ret >= 0)
    1bb8:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 147a <system_init+0x116>
	if (ret == -1) {
    1bbc:	4c5f5458 	cfldrdmi	mvd5, [pc], {88}	; 0x58
    1bc0:	4c435f46 	mcrrmi	15, 4, r5, r3, cr6
		if (retry == WNONE)
    1bc4:	4343004b 	movtmi	r0, #12363	; 0x304b
		iowait (dev, operation, retry);
    1bc8:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1bcc:	5f474643 	svcpl	0x00474643
    1bd0:	4f5f4954 	svcmi	0x005f4954
			release;
    1bd4:	4f495450 	svcmi	0x00495450
	if (ret == -2) {
    1bd8:	4700534e 	strmi	r5, [r0, -lr, asr #6]
		if (retry != WNONE) {
    1bdc:	5f4f4950 	svcpl	0x004f4950
    1be0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
			iowait (dev, operation, retry);
    1be4:	006f6944 	rsbeq	r6, pc, r4, asr #18
    1be8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b34 <__pi_strncpy+0xe>
			(ioreq [dev]) (NONE, buf, len);
    1bec:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    1bf0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1bf4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		(ioreq [dev]) (NONE, buf, len);
    1bf8:	6f746b73 	svcvs	0x00746b73
    1bfc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1c00:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
}
    1c04:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	if (retry != WNONE) {
    1c08:	2f534f43 	svccs	0x00534f43
		delay (-ret - 2, retry);
    1c0c:	4f636950 	svcmi	0x00636950
    1c10:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1c14:	2f736269 	svccs	0x00736269
    1c18:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
		release;
    1c1c:	2f73726f 	svccs	0x0073726f
    1c20:	5f6e6970 	svcpl	0x006e6970
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1c24:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    1c28:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    1c2c:	6e756a00 	vaddvs.f32	s13, s10, s0
    1c30:	6970006b 	ldmdbvs	r0!, {r0, r1, r3, r5, r6}^
    1c34:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
		syserror (ERESOURCE, "mal1");
    1c38:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    1c3c:	6165725f 	cmnvs	r5, pc, asr r2
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1c40:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
    1c44:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c48:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
	m_size (mpools [0]) = mlen - m_hdrlen;
    1c4c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1c50:	65540074 	ldrbvs	r0, [r4, #-116]	; 0xffffff8c
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1c54:	62006d72 	andvs	r6, r0, #7296	; 0x1c80
    1c58:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
}
    1c5c:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
    1c60:	756f6265 	strbvc	r6, [pc, #-613]!	; 1a03 <update_n_wake+0xc3>
    1c64:	0065636e 	rsbeq	r6, r5, lr, ror #6
    1c68:	74756270 	ldrbtvc	r6, [r5], #-624	; 0xfffffd90
    1c6c:	006e6f74 	rsbeq	r6, lr, r4, ror pc
    1c70:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void __pi_free (aword *ch) {
    1c74:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1c78:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    1c7c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
		syserror (EMALLOC, "malg");
    1c80:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    1c84:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
	mcfree [MA_NP] += m_size (ch);
    1c88:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		m_size (ch) ^= MALLOC_UMASK;
    1c8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1bd8 <io+0x50>
    1c90:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	mcfree [MA_NP] += m_size (ch);
    1c94:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	QFREE;
    1c98:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	if (mevent [MA_NP] . nwait) {
    1c9c:	6f746b73 	svcvs	0x00746b73
    1ca0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		trigger ((aword)(&(mevent [MA_NP])));
    1ca4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		mevent [MA_NP] . nwait --;
    1ca8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
}
    1cac:	2f534f43 	svccs	0x00534f43
    1cb0:	4f636950 	svcmi	0x00636950
    1cb4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1cb8:	2f736269 	svccs	0x00736269
void kill (aword pid) {
    1cbc:	622f4f49 	eorvs	r4, pc, #292	; 0x124
		pid = (aword) __pi_curr;
    1cc0:	6f747475 	svcvs	0x00747475
	j = NULL;
    1cc4:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
	for_all_tasks (i) {
    1cc8:	6f434500 	svcvs	0x00434500
	syserror (EREQPAR, "kpi");
    1ccc:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
    1cd0:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
		if ((aword)i == pid) {
    1cd4:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 1873 <qfree+0xf>
    1cd8:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
				__PCB = i->Next;
    1cdc:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
			killev (i);
    1ce0:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
			ufree (i);
    1ce4:	00305f64 	eorseq	r5, r0, r4, ror #30
			if (i == __pi_curr)
    1ce8:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
    1cec:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
				release;
    1cf0:	5f656500 	svcpl	0x00656500
				j->Next = i->Next;
    1cf4:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    1cf8:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    1cfc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
}
    1d00:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    1d04:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    1d08:	5f656500 	svcpl	0x00656500
	if (size < 8)
    1d0c:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		_size = 2;
    1d10:	6f435700 	svcvs	0x00435700
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1d14:	6300746e 	movwvs	r7, #1134	; 0x46e
		_size = (((aword)size) + 3) >> 2;
    1d18:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d1c:	5f656500 	svcpl	0x00656500
		_size = (((aword)size) + 3) >> 2;
    1d20:	696e6170 	stmdbvs	lr!, {r4, r5, r6, r8, sp, lr}^
		if (mevent [MA_NP] . nfail != 255)
    1d24:	65650063 	strbvs	r0, [r5, #-99]!	; 0xffffff9d
    1d28:	6e79735f 	mrcvs	3, 3, r7, cr9, cr15, {2}
			mevent [MA_NP] . nfail ++;
    1d2c:	72660063 	rsbvc	r0, r6, #99	; 0x63
		mnfree [MA_NP] = 0;
    1d30:	65006d6f 	strvs	r6, [r0, #-3439]	; 0xfffff291
    1d34:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
		if (m_magic (chunk) != MALLOC_MAGIC)
    1d38:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
    1d3c:	00727364 	rsbseq	r7, r2, r4, ror #6
			syserror (EMALLOC, "malc");
    1d40:	6f6c6363 	svcvs	0x006c6363
    1d44:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
		if (m_size (chunk) >= _size)
    1d48:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1d4c:	6f682f00 	svcvs	0x00682f00
		chunk = m_nextp (chunk)) {
    1d50:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		m_setnextp (cc, m_nextp (chunk));
    1d54:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1d58:	442f6e65 	strtmi	r6, [pc], #-3685	; 1d60 <__pi_malloc+0x54>
    1d5c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			m_size (chunk) = _size;
    1d60:	4f2f706f 	svcmi	0x002f706f
			cc = chunk + _size + m_hdrlen;
    1d64:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1d68:	502f5445 	eorpl	r5, pc, r5, asr #8
			m_size (cc) = waste - m_hdrlen;
    1d6c:	534f4349 	movtpl	r4, #62281	; 0xf349
			QFREE;
    1d70:	6369502f 	cmnvs	r9, #47	; 0x2f
		mevent [MA_NP] . nfail = 0;
    1d74:	502f534f 	eorpl	r5, pc, pc, asr #6
		mcfree [MA_NP] -= m_size (chunk);
    1d78:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1d7c:	6f74532f 	svcvs	0x0074532f
    1d80:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    1d84:	6f74732f 	svcvs	0x0074732f
		m_size (chunk) |= MALLOC_UMASK;
    1d88:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1d8c:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
		m_size (chunk) |= MALLOC_UMASK;
    1d90:	30387235 	eorscc	r7, r8, r5, lsr r2
			mnfree [MA_NP] = mcfree [MA_NP];
    1d94:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
}
    1d98:	706f6300 	rsbvc	r6, pc, r0, lsl #6
    1d9c:	63006e65 	movwvs	r6, #3685	; 0xe65
    1da0:	00727470 	rsbseq	r7, r2, r0, ror r4
    1da4:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    1da8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1dac:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1db0:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
aword __pi_fork (fsmcode func, aword data) {
    1db4:	00656e6f 	rsbeq	r6, r5, pc, ror #28
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1db8:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
    1dbc:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
    1dc0:	00746961 	rsbseq	r6, r4, r1, ror #18
		if ((j = __PCB) == NULL)
    1dc4:	5f746567 	svcpl	0x00746567
	i->Next = NULL;
    1dc8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
	i->data = data;
    1dcc:	74757000 	ldrbtvc	r7, [r5], #-0
		if ((j = __PCB) == NULL)
    1dd0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
}
    1dd4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
			for (; j->Next != NULL; j = j->Next);
    1dd8:	2f656d6f 	svccs	0x00656d6f
    1ddc:	70657473 	rsbvc	r7, r5, r3, ror r4
	return (aword) i;
    1de0:	2f6e6568 	svccs	0x006e6568
    1de4:	6b736544 	blvs	1cdb2fc <__ccfg+0x1cbb354>
	if (mevent [MA_NP] . nwait != 255)
    1de8:	2f706f74 	svccs	0x00706f74
    1dec:	4f534c4f 	svcmi	0x00534c4f
    1df0:	2f54454e 	svccs	0x0054454e
		mevent [MA_NP] . nwait ++;
    1df4:	4f434950 	svcmi	0x00434950
	wait ((aword)(&(mevent [MA_NP])), state);
    1df8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1dfc:	2f534f63 	svccs	0x00534f63
void diag (const char *mess, ...) {
    1e00:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1e04:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1e08:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
	diag_disable_int (a, is);
    1e0c:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1e10:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1e14:	7300632e 	movwvc	r6, #814	; 0x32e
				d = (bc == 16) ? 10000 : 1000000000;
    1e18:	6f5f7265 	svcvs	0x005f7265
	diag_disable_int (a, is);
    1e1c:	2f007475 	svccs	0x00007475
	while (*mess != '\0') {
    1e20:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	dgout ('\r');
    1e24:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	dgout ('\n');
    1e28:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1e2c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1e30:	706f746b 	rsbvc	r7, pc, fp, ror #8
	diag_wait (a);
    1e34:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	diag_enable_int (a, is);
    1e38:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1e3c:	4349502f 	movtmi	r5, #36911	; 0x902f
}
    1e40:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e44:	534f6369 	movtpl	r6, #62313	; 0xf369
    1e48:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		if (*mess == '%') {
    1e4c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1e50:	61697265 	cmnvs	r9, r5, ror #4
			if (*mess == 'l') {
    1e54:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1e58:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
				mess++;
    1e5c:	5f00632e 	svcpl	0x0000632e
				val = va_arg (ap, lword);
    1e60:	706e695f 	rsbvc	r6, lr, pc, asr r9
				bc = 32;
    1e64:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
				bc = 16;
    1e68:	72657300 	rsbvc	r7, r5, #0, 6
			switch (*mess) {
    1e6c:	006e695f 	rsbeq	r6, lr, pc, asr r9
    1e70:	5f726573 	svcpl	0x00726573
    1e74:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
				dgout ('%');
    1e78:	6f682f00 	svcvs	0x00682f00
    1e7c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
				dgout (*mess);
    1e80:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1e84:	442f6e65 	strtmi	r6, [pc], #-3685	; 1e8c <diag+0x8c>
			switch (*mess) {
    1e88:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
					v = __pi_hex_enc_table [
    1e8c:	4f2f706f 	svcmi	0x002f706f
					i += 4;
    1e90:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
					(val >> (bc - i)) & 0xf];
    1e94:	502f5445 	eorpl	r5, pc, r5, asr #8
    1e98:	534f4349 	movtpl	r4, #62281	; 0xf349
					dgout (v);
    1e9c:	6369502f 	cmnvs	r9, #47	; 0x2f
    1ea0:	502f534f 	eorpl	r5, pc, pc, asr #6
				while (i < bc) {
    1ea4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
			mess++;
    1ea8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
					d /= 10;
    1eac:	2f6c6169 	svccs	0x006c6169
				if ((val >> (bc - 1)) & 1) {
    1eb0:	5f726573 	svcpl	0x00726573
    1eb4:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
					dgout ('-');
    1eb8:	2f00632e 	svccs	0x0000632e
    1ebc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
						val |= 0xffff0000;
    1ec0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1ec4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1ec8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				d = (bc == 16) ? 10000 : 1000000000;
    1ecc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1ed0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1ed4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
					v = (word) (val / d);
    1ed8:	4349502f 	movtmi	r5, #36911	; 0x902f
					if (v || d == 1) break;
    1edc:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ee0:	534f6369 	movtpl	r6, #62313	; 0xf369
					d /= 10;
    1ee4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
				d = (bc == 16) ? 10000 : 1000000000;
    1ee8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
					dgout (v + '0');
    1eec:	61697265 	cmnvs	r9, r5, ror #4
    1ef0:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1ef4:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
					d /= 10;
    1ef8:	00632e66 	rsbeq	r2, r3, r6, ror #28
					val = val - (v * d);
    1efc:	5f726573 	svcpl	0x00726573
					if (d == 0) break;
    1f00:	00666e69 	rsbeq	r6, r6, r9, ror #28
					v = (word) (val / d);
    1f04:	75737369 	ldrbvc	r7, [r3, #-873]!	; 0xfffffc97
    1f08:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
				if (bc == 16)
    1f0c:	6f6d0064 	svcvs	0x006d0064
				d = (bc == 16) ? 10000 : 1000000000;
    1f10:	616c7564 	cmnvs	ip, r4, ror #10
					val &= 0xffff;
    1f14:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
					dgout (*s);
    1f18:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 1f20 <diag+0x120>
					s++;
    1f1c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
				while (*s != '\0') {
    1f20:	62006f4e 	andvs	r6, r0, #312	; 0x138
    1f24:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
			dgout (*mess++);
    1f28:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
    1f2c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f30:	5f667200 	svcpl	0x00667200
    1f34:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
    1f38:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1f3c:	5662006d 	strbtpl	r0, [r2], -sp, rrx
    1f40:	654c7261 	strbvs	r7, [ip, #-609]	; 0xfffffd9f
    1f44:	5070006e 	rsbspl	r0, r0, lr, rrx
    1f48:	6300746b 	movwvs	r7, #1131	; 0x46b
	^ entropy
    1f4c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
}
    1f50:	65724672 	ldrbvs	r4, [r2, #-1650]!	; 0xfffff98e
    1f54:	6f630071 	svcvs	0x00630071
    1f58:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f5c:	47657275 			; <UNDEFINED> instruction: 0x47657275
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1f60:	73666e65 	cmnvc	r6, #1616	; 0x650
	word cs = size + hblenb;
    1f64:	7461506b 	strbtvc	r5, [r1], #-107	; 0xffffff95
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1f68:	77006863 	strvc	r6, [r0, -r3, ror #16]
    1f6c:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
	p -> length = size;
    1f70:	646f4d6e 	strbtvs	r4, [pc], #-3438	; 1f78 <deq+0x2>
}
    1f74:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
	if (p->attributes.b.queued) {
    1f78:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1f7c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1f80:	435f504f 	cmpmi	pc, #79	; 0x4f
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1f84:	00735f53 	rsbseq	r5, r3, r3, asr pc
		p->attributes.b.queued = 0;
    1f88:	74736170 	ldrbtvc	r6, [r3], #-368	; 0xfffffe90
    1f8c:	67697254 			; <UNDEFINED> instruction: 0x67697254
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1f90:	54667200 	strbtpl	r7, [r6], #-512	; 0xfffffe00
	deq (p);	// Remove from queue
    1f94:	5f6d6972 	svcpl	0x006d6972
}
    1f98:	62720074 	rsbsvs	r0, r2, #116	; 0x74
	tfree ((address)p);
    1f9c:	6c666675 	stclvs	6, cr6, [r6], #-468	; 0xfffffe2c
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1fa0:	5f524400 	svcpl	0x00524400
    1fa4:	504f4f4c 	subpl	r4, pc, ip, asr #30
    1fa8:	70005f5f 	andvc	r5, r0, pc, asr pc
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1fac:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1fb0:	62007475 	andvs	r7, r0, #1962934272	; 0x75000000
	if (q_empty (q))
    1fb4:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
    1fb8:	6b4f7461 	blvs	13df144 <__ccfg+0x13bf19c>
		trigger (q);
    1fbc:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
	if (p->attributes.b.urgent) {
    1fc0:	6f6e6749 	svcvs	0x006e6749
		p->u.bqueue.next = q->next;
    1fc4:	00646572 	rsbeq	r6, r4, r2, ror r5
		p->u.bqueue.prev = q;
    1fc8:	4d636566 	cfstr64mi	mvdx6, [r3, #-408]!	; 0xfffffe68
		q->next->prev = (qitem_t*) p;
    1fcc:	0065646f 	rsbeq	r6, r5, pc, ror #8
	p->attributes.b.queued = 1;
    1fd0:	4e78526e 	cdpmi	2, 7, cr5, cr8, cr14, {3}
    1fd4:	6f006b6f 	svcvs	0x00006b6f
}
    1fd8:	65646666 	strbvs	r6, [r4, #-1638]!	; 0xfffff99a
		p->u.bqueue.prev = q->prev;
    1fdc:	0079616c 	rsbseq	r6, r9, ip, ror #2
		q->prev->next = (qitem_t*) p;
    1fe0:	61657270 	smcvs	22304	; 0x5720
		q->prev = (qitem_t*) p;
    1fe4:	646f4d6d 	strbtvs	r4, [pc], #-3437	; 1fec <dispose>
    1fe8:	43700065 	cmnmi	r0, #101	; 0x65
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1fec:	45727275 	ldrbmi	r7, [r2, #-629]!	; 0xfffffd8b
	deq (p);	// Soft dequeue, timer and hook left intact
    1ff0:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
	switch (dv) {
    1ff4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1ff8:	61745365 	cmnvs	r4, r5, ror #6
    1ffc:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
    2000:	6e497172 	mcrvs	1, 2, r7, cr9, cr2, {3}
			p->attributes.b.urgent = 1;
    2004:	77007674 	smlsdxvc	r0, r4, r6, r7
    2008:	5f746961 	svcpl	0x00746961
			verify_ses (p, "dispose ses");
    200c:	00646d63 	rsbeq	r6, r4, r3, ror #26
    2010:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    2014:	6f437461 	svcvs	0x00437461
    2018:	7300666e 	movwvc	r6, #1646	; 0x66e
    201c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
			verify_phy (p, "dispose phy");
    2020:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2024:	70416200 	subvc	r6, r1, r0, lsl #4
}
    2028:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
			enq (oqueues [p->attributes.b.phys], p);
    202c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
			p->attributes.b.urgent = 1;
    2030:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
    2034:	4e700070 	mrcmi	0, 3, r0, cr0, cr0, {3}
			verify_phy (p, "dispose phy");
    2038:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0xfffff79b
    203c:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2040:	5f465200 	svcpl	0x00465200
    2044:	50646d63 	rsbpl	r6, r4, r3, ror #26
    2048:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    204c:	6f696461 	svcvs	0x00696461
			enq (oqueues [p->attributes.b.phys], p);
    2050:	53766944 	cmnpl	r6, #68, 18	; 0x110000
    2054:	70757465 	rsbsvc	r7, r5, r5, ror #8
}
    2058:	76657100 	strbtvc	r7, [r5], -r0, lsl #2
			rlp (p);
    205c:	00746e65 	rsbseq	r6, r4, r5, ror #28
}
    2060:	43746b70 	cmnmi	r4, #112, 22	; 0x1c000
    2064:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    2068:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    206c:	3163635f 	cmncc	r3, pc, asr r3
    2070:	00303533 	eorseq	r3, r0, r3, lsr r5
    2074:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    2078:	645f3035 	ldrbvs	r3, [pc], #-53	; 2080 <tcv_endp+0x8>
	if (b->attributes.b.outgoing) {
    207c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
	b = header (p);
    2080:	66720072 			; <UNDEFINED> instruction: 0x66720072
	if (b->attributes.b.outgoing) {
    2084:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
		verify_ses (b, "tcv02");
    2088:	53465f44 	movtpl	r5, #28484	; 0x6f44
    208c:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    2090:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2094:	465f444d 	ldrbmi	r4, [pc], -sp, asr #8
    2098:	00745f53 	rsbseq	r5, r4, r3, asr pc
		verify_plg (b, tcv_out, "tcv03");
    209c:	6f507874 	svcvs	0x00507874
    20a0:	00726577 	rsbseq	r6, r2, r7, ror r5
    20a4:	77427872 	smlsldxvc	r7, r2, r2, r8
    20a8:	70706100 	rsbsvc	r6, r0, r0, lsl #2
    20ac:	6547796c 	strbvs	r7, [r7, #-2412]	; 0xfffff694
    20b0:	6b73666e 	blvs	1cdba70 <__ccfg+0x1cbbac8>
    20b4:	63746150 	cmnvs	r4, #80, 2
    20b8:	68630068 	stmdavs	r3!, {r3, r5, r6}^
    20bc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c0:	7973006c 	ldmdbvc	r3!, {r2, r3, r5, r6}^
}
    20c4:	4368746e 	cmnmi	r8, #1845493760	; 0x6e000000
		dispose (b, plugins [b->attributes.b.plugin] ->
    20c8:	00666e6f 	rsbeq	r6, r6, pc, ror #28
		rlp (b);
    20cc:	616e4562 	cmnvs	lr, r2, ror #10
}
    20d0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
		rlp (b);
    20d4:	75416200 	strbvc	r6, [r1, #-512]	; 0xfffffe00
    20d8:	6c466f74 	mcrrvs	15, 7, r6, r6, cr4
    20dc:	43687375 	cmnmi	r8, #-738197503	; 0xd4000001
    20e0:	72456372 	subvc	r6, r5, #-939524095	; 0xc8000001
    20e4:	6f630072 	svcvs	0x00630072
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    20e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20ec:	72466652 	subvc	r6, r6, #85983232	; 0x5200000
    20f0:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20f4:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
	va_start (ap, plid);
    20f8:	6f4d7854 	svcvs	0x004d7854
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    20fc:	61006564 	tstvs	r0, r4, ror #10
    2100:	6f6c616e 	svcvs	0x006c616e
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2104:	67664367 	strbvs	r4, [r6, -r7, ror #6]!
    2108:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    210c:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    2110:	646d4361 	strbtvs	r4, [sp], #-865	; 0xfffffc9f
			syserror (ENODEVICE, "tcv04");
    2114:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
		syserror (EMALLOC, "tcv05");
    2118:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
	attp.b.outgoing = 1;
    211c:	00766e49 	rsbseq	r6, r6, r9, asr #28
    2120:	71724970 	cmnvc	r2, r0, ror r9
    2124:	63746150 	cmnvs	r4, #80, 2
    2128:	50700068 	rsbspl	r0, r0, r8, rrx
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    212c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
		if (descriptors [fd] == NULL)
    2130:	00636556 	rsbeq	r6, r3, r6, asr r5
    2134:	43434652 	movtmi	r4, #13906	; 0x3652
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2138:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
		return ERROR;
    213c:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
}
    2140:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2144:	78616d00 	stmdavc	r1!, {r8, sl, fp, sp, lr}^
    2148:	4c746b50 			; <UNDEFINED> instruction: 0x4c746b50
	s->attpattern.b.session = fd;
    214c:	63006e65 	movwvs	r6, #3685	; 0xe65
    2150:	4372726f 	cmnmi	r2, #-268435450	; 0xf0000006
	descriptors [fd] = s;
    2154:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	q_init (&(s->rqueue));
    2158:	61720067 	cmnvs	r2, r7, rrx
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    215c:	62003074 	andvs	r3, r0, #116	; 0x74
    2160:	4d736169 	ldfmie	f6, [r3, #-420]!	; 0xfffffe5c
    2164:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2168:	43434652 	movtmi	r4, #13906	; 0x3652
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    216c:	49306570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, sp, lr}
    2170:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
    2174:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	descriptors [fd] = s;
    2178:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    217c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2180:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
	if (s == NULL)
    2184:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
		syserror (EMALLOC, "tcv05");
    2188:	49676966 	stmdbmi	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    218c:	63644166 	cmnvs	r4, #-2147483623	; 0x80000019
    2190:	63667200 	cmnvs	r6, #0, 4
    2194:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2198:	4f52505f 	svcmi	0x0052505f
    219c:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
    21a0:	6500735f 	strvs	r7, [r0, #-863]	; 0xfffffca1
    21a4:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    21a8:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
	    (plugins [ord] != NULL && plugins [ord] != pl))
    21ac:	66720072 			; <UNDEFINED> instruction: 0x66720072
    21b0:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    21b4:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
	plugins [ord] = pl;
    21b8:	435f504f 	cmpmi	pc, #79	; 0x4f
	return 0;
    21bc:	00745f53 	rsbseq	r5, r4, r3, asr pc
		return ERROR;
    21c0:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
}
    21c4:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    21c8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	verify_fds (fd, "tcv10");
    21cc:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    21d0:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
	verify_fds (fd, "tcv10");
    21d4:	70006f4e 	andvc	r6, r0, lr, asr #30
    21d8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    21dc:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
	verify_plg (b, tcv_frm, "tcv11");
    21e0:	70795464 	rsbsvc	r5, r9, r4, ror #8
	b = q_first (rq);
    21e4:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
	if (q_end (b, rq)) {
    21e8:	73635f64 	cmnvc	r3, #100, 30	; 0x190
		if (state != WNONE) {
    21ec:	73737200 	cmnvc	r3, #0, 4
    21f0:	72685469 	rsbvc	r5, r8, #1761607680	; 0x69000000
			when (rq, state);
    21f4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
			release;
    21f8:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
	deq (b);	// Dequeue the packet ...
    21fc:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    2200:	61565200 	cmpvs	r6, r0, lsl #4
	p = ((address)(b + 1));
    2204:	6f63006c 	svcvs	0x0063006c
	verify_plg (b, tcv_frm, "tcv11");
    2208:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    220c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2210:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    2214:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2218:	00726448 	rsbseq	r6, r2, r8, asr #8
    221c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2220:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    2224:	646f6d00 	strbtvs	r6, [pc], #-3328	; 222c <tcv_rnp+0x60>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2228:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    222c:	614c7000 	mrsvs	r7, (UNDEF: 76)
	b->u.pointers.tail =
    2230:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
}
    2234:	00797274 	rsbseq	r7, r9, r4, ror r2
		return NULL;
    2238:	4278526e 	rsbsmi	r5, r8, #-536870906	; 0xe0000006
    223c:	75466675 	strbvc	r6, [r6, #-1653]	; 0xfffff98b
    2240:	72006c6c 	andvc	r6, r0, #108, 24	; 0x6c00
    2244:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
    2248:	33697500 	cmncc	r9, #0, 10
	verify_fds (fd, "tcv16");
    224c:	73614d32 	cmnvc	r1, #3200	; 0xc80
								Boolean urg) {
    2250:	7363006b 	cmnvc	r3, #107	; 0x6b
    2254:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
	verify_fds (fd, "tcv16");
    2258:	67676972 			; <UNDEFINED> instruction: 0x67676972
    225c:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
    2260:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
	verify_pld (s, tcv_frm, "tcv17");
    2264:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
    2268:	006c6173 	rsbeq	r6, ip, r3, ror r1
    226c:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    2270:	30796d6d 	rsbscc	r6, r9, sp, ror #26
    2274:	6d797300 	ldclvs	3, cr7, [r9, #-0]
    2278:	526c6f62 	rsbpl	r6, ip, #392	; 0x188
    227c:	00657461 	rsbeq	r7, r5, r1, ror #8
    2280:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	ptrs.head = (word) fd;
    2284:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
	ptrs.tail = (word) urg;
    2288:	00736666 	rsbseq	r6, r3, r6, ror #12
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    228c:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
    2290:	00704f74 	rsbseq	r4, r0, r4, ror pc
		if (state != WNONE) {
    2294:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
    2298:	00716572 	rsbseq	r6, r1, r2, ror r5
}
    229c:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
			when (eid, state);
    22a0:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
    22a4:	67496873 	smlsldxvs	r6, r9, r3, r8
			release;
    22a8:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    22ac:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
    22b0:	61725f63 	cmnvs	r2, r3, ror #30
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    22b4:	4f6f6964 	svcmi	0x006f6964
    22b8:	00745f70 	rsbseq	r5, r4, r0, ror pc
    22bc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    22c0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    22c4:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    22c8:	74617000 	strbtvc	r7, [r1], #-0
		if (state != WNONE) {
    22cc:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
    22d0:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
			tmwait (state);
    22d4:	73666e65 	cmnvc	r6, #1616	; 0x650
    22d8:	6672006b 	ldrbtvs	r0, [r2], -fp, rrx
	b->attributes = s->attpattern;
    22dc:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
		b->attributes.b.urgent = 1;
    22e0:	6f682f00 	svcvs	0x00682f00
    22e4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	b->u.pointers.head = ptrs.head;
    22e8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	b->u.pointers.tail = length;
    22ec:	442f6e65 	strtmi	r6, [pc], #-3685	; 22f4 <tcv_wnps+0xa8>
	return (address) (b + 1);
    22f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    22f4:	4f2f706f 	svcmi	0x002f706f
    22f8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    22fc:	502f5445 	eorpl	r5, pc, r5, asr #8
    2300:	534f4349 	movtpl	r4, #62281	; 0xf349
    2304:	6369502f 	cmnvs	r9, #47	; 0x2f
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2308:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    230c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    2310:	66722f58 	uhsaxvs	r2, r2, r8
	verify_fph (phy, "tcv23");
    2314:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    2318:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
    231c:	43616e45 	cmnmi	r1, #1104	; 0x450
    2320:	0072726f 	rsbseq	r7, r2, pc, ror #4
}
    2324:	4f734662 	svcmi	0x00734662
	return (physical [phy]) (opt, arg);
    2328:	64496666 	strbvs	r6, [r9], #-1638	; 0xfffff99a
    232c:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    2330:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2334:	00734664 	rsbseq	r4, r3, r4, ror #12
	if (opt < 0) {
    2338:	61657270 	smcvs	22304	; 0x5720
		if (fd < 0)
    233c:	6e6f436d 	cdpvs	3, 6, cr4, cr15, cr13, {3}
		if (opt == PHYSOPT_PLUGINFO) {
    2340:	79730066 	ldmdbvc	r3!, {r1, r2, r5, r6}^
			if (fd >= TCV_MAX_PLUGS)
    2344:	6f57636e 	svcvs	0x0057636e
			if ((p = plugins [fd]) == NULL)
    2348:	6f006472 	svcvs	0x00006472
    234c:	6f697470 	svcvs	0x00697470
}
    2350:	6170006e 	cmnvs	r0, lr, rrx
		if (fd >= TCV_MAX_PHYS)
    2354:	47686374 			; <UNDEFINED> instruction: 0x47686374
		return physinfo [fd];
    2358:	73666e65 	cmnvc	r6, #1616	; 0x650
    235c:	6566526b 	strbvs	r5, [r6, #-619]!	; 0xfffffd95
	verify_fds (fd, "tcv22");
    2360:	45736300 	ldrbmi	r6, [r3, #-768]!	; 0xfffffd00
    2364:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2368:	7200656d 	andvc	r6, r0, #457179136	; 0x1b400000
    236c:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
    2370:	745f656c 	ldrbvc	r6, [pc], #-1388	; 2378 <tcv_control+0x44>
}
    2374:	726f6300 	rsbvc	r6, pc, #0, 6
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2378:	72655072 	rsbvc	r5, r5, #114	; 0x72
    237c:	00646f69 	rsbeq	r6, r4, r9, ror #30
			return 0;
    2380:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    2384:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
    2388:	70434346 	subvc	r4, r3, r6, asr #6
    238c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    2390:	61656c43 	cmnvs	r5, r3, asr #24
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2394:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
    2398:	68636775 	stmdavs	r3!, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
	if (dsp != TCV_DSP_PASS) {
    239c:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
		if (ses == NONE)
    23a0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			syserror (EREQPAR, "tcv26");
    23a4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
		verify_fds (ses, "tcv27");
    23a8:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    23ac:	00736552 	rsbseq	r6, r3, r2, asr r5
    23b0:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    23b4:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    23b8:	72700071 	rsbsvc	r0, r0, #113	; 0x71
		if ((p = apb (size)) != NULL) {
    23bc:	61635365 	cmnvs	r3, r5, ror #6
    23c0:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
		return NULL;
    23c4:	69427753 	stmdbvs	r2, {r0, r1, r4, r6, r8, r9, sl, ip, sp, lr}^
			p->attributes = descriptors [ses] -> attpattern;
    23c8:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
			dispose (p, dsp);
    23cc:	4f797375 	svcmi	0x00797375
			p->attributes = descriptors [ses] -> attpattern;
    23d0:	6f6c0070 	svcvs	0x006c0070
			p->attributes.b.outgoing = 0;
    23d4:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
			dispose (p, dsp);
    23d8:	00726564 	rsbseq	r6, r2, r4, ror #10
			return (address)(p + 1);
    23dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    23e0:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
	if ((p = apb (size)) != NULL)
    23e4:	61705f66 	cmnvs	r0, r6, ror #30
    23e8:	5f686374 	svcpl	0x00686374
		return (address)(p + 1);
    23ec:	5f657063 	svcpl	0x00657063
    23f0:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    23f4:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
    23f8:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    23fc:	4e620066 	cdpmi	0, 6, cr0, cr2, cr6, {3}
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2400:	5073466f 	rsbspl	r4, r3, pc, ror #12
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2404:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    2408:	4f007055 	svcmi	0x00007055
		syserror (EREQPAR, "tcv28");
    240c:	6e764552 	mrcvs	5, 3, r4, cr6, cr2, {2}
		syserror (EMALLOC, "tcv29");
    2410:	46620074 			; <UNDEFINED> instruction: 0x46620074
	physical [phy] = ps;
    2414:	66664f73 	uqsub16vs	r4, r6, r3
	physinfo [phy] = info;
    2418:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    241c:	61727600 	cmnvs	r2, r0, lsl #12
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2420:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    2424:	69727478 	ldmdbvs	r2!, {r3, r4, r5, r6, sl, ip, sp, lr}^
    2428:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
		syserror (EMALLOC, "tcv29");
    242c:	4662734d 	strbtmi	r7, [r2], -sp, asr #6
    2430:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
	q_init (q);
    2434:	5f787200 	svcpl	0x00787200
}
    2438:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
    243c:	6e695f78 	mcrvs	15, 3, r5, cr9, cr8, {3}
    2440:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    2444:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2448:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    244c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
	verify_fph (phy, "tcv30");
    2450:	64610030 	strbtvs	r0, [r1], #-48	; 0xffffffd0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2454:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2458:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
	verify_fph (phy, "tcv30");
    245c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2460:	505f444d 	subspl	r4, pc, sp, asr #8
    2464:	5f504f52 	svcpl	0x00504f52
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2468:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    246c:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2470:	45535f56 	ldrbmi	r5, [r3, #-3926]	; 0xfffff0aa
    2474:	5f505554 	svcpl	0x00505554
		if (plugins [plg] == NULL)
    2478:	66720073 			; <UNDEFINED> instruction: 0x66720073
    247c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2480:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
}
    2484:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2488:	4f494441 	svcmi	0x00494441
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    248c:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
    2490:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2494:	745f5055 	ldrbvc	r5, [pc], #-85	; 249c <tcvphy_rcv+0x50>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2498:	63667200 	cmnvs	r6, #0, 4
    249c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    24a0:	4f52505f 	svcmi	0x0052505f
    24a4:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
    24a8:	7000745f 	andvc	r7, r0, pc, asr r4
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    24ac:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
	len -= (ap.head + ap.tail);
    24b0:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    24b4:	74537852 	ldrbvc	r7, [r3], #-2130	; 0xfffff7ae
    24b8:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    24bc:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
    24c0:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
    24c4:	6c644969 			; <UNDEFINED> instruction: 0x6c644969
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    24c8:	61720065 	cmnvs	r2, r5, rrx
    24cc:	6f576574 	svcvs	0x00576574
    24d0:	72006472 	andvc	r6, r0, #1912602624	; 0x72000000
	return 1;
    24d4:	61747378 	cmnvs	r4, r8, ror r3
    24d8:	52700074 	rsbspl	r0, r0, #116	; 0x74
    24dc:	764f6765 	strbvc	r6, [pc], -r5, ror #14
    24e0:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    24e4:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
	verify_fph (phy, "tcv32");
    24e8:	726d7461 	rsbvc	r7, sp, #1627389952	; 0x61000000
    24ec:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
    24f0:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
    24f4:	7352646e 	cmpvc	r2, #1845493760	; 0x6e000000
    24f8:	72006973 	andvc	r6, r0, #1884160	; 0x1cc000
    24fc:	705f6366 	subsvc	r6, pc, r6, ror #6
	oq = oqueues [phy];
    2500:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
	b = q_first (oq);
    2504:	74754f78 	ldrbtvc	r4, [r5], #-3960	; 0xfffff088
	if (q_end (b, oq)) {
    2508:	5f747570 	svcpl	0x00747570
	*len = b->length;
    250c:	66720073 			; <UNDEFINED> instruction: 0x66720073
	deq (b);	// Dequeue the packet ...
    2510:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
}
    2514:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
		return NULL;
    2518:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    251c:	745f7475 	ldrbvc	r7, [pc], #-1141	; 2524 <tcvphy_get+0x3c>
    2520:	43465200 	movtmi	r5, #25088	; 0x6200
    2524:	636f6c43 	cmnvs	pc, #17152	; 0x4300
	verify_fph (phy, "tcv33");
    2528:	7369446b 	cmnvc	r9, #1795162112	; 0x6b000000
    252c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2530:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    2534:	53676966 	cmnpl	r7, #1671168	; 0x198000
    2538:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
    253c:	63787400 	cmnvs	r8, #0, 8
	oq = oqueues [phy];
    2540:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
	b = q_first (oq);
    2544:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
		return NULL;
    2548:	7a536e65 	bvc	14ddee4 <__ccfg+0x14bdf3c>
	return (address)(b + 1);
    254c:	63667200 	cmnvs	r6, #0, 4
}
    2550:	6461725f 	strbtvs	r7, [r1], #-607	; 0xfffffda1
    2554:	704f6f69 	subvc	r6, pc, r9, ror #30
    2558:	6200735f 	andvs	r7, r0, #2080374785	; 0x7c000001
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    255c:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
	verify_plg (b, tcv_xmt, "tcv34");
    2560:	6f4e7461 	svcvs	0x004e7461
	hblock_t *b = header (pkt);
    2564:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
	verify_plg (b, tcv_xmt, "tcv34");
    2568:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    256c:	7200704f 	andvc	r7, r0, #79	; 0x4f
    2570:	645f6366 	ldrbvs	r6, [pc], #-870	; 2578 <tcvphy_end+0x1c>
    2574:	45617461 	strbmi	r7, [r1, #-1121]!	; 0xfffffb9f
    2578:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    257c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    2580:	5f6c6172 	svcpl	0x006c6172
	dispose (b, plugins [b->attributes.b.plugin] ->
    2584:	66720073 			; <UNDEFINED> instruction: 0x66720073
}
    2588:	61645f63 	cmnvs	r4, r3, ror #30
	dispose (b, plugins [b->attributes.b.plugin] ->
    258c:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
    2590:	47797274 			; <UNDEFINED> instruction: 0x47797274
    2594:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
}
    2598:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 25a0 <ResetISR>
    while(1)
    259c:	5f667200 	svcpl	0x00667200
{
    25a0:	63746170 	cmnvs	r4, #112, 2
    SetupTrimDevice();
    25a4:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
    pui32Src = &_etext;
    25a8:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    25ac:	6b73666e 	blvs	1cdbf6c <__ccfg+0x1cbbfc4>
    __asm("    ldr     r0, =_bss\n"
    25b0:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    25b4:	52006b4f 	andpl	r6, r0, #80896	; 0x13c00
    25b8:	00746552 	rsbseq	r6, r4, r2, asr r5
    25bc:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    25c0:	31796d6d 	cmncc	r9, sp, ror #26
   main();
    25c4:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 25cc <zero_loop+0x14>
    FaultISR();
    25c8:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
        *pui32Dest++ = *pui32Src++;
    25cc:	5f5f0032 	svcpl	0x005f0032
    25d0:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    25d4:	6e003379 	mcrvs	3, 0, r3, cr0, cr9, {3}
    25d8:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
    25dc:	6f697461 	svcvs	0x00697461
    25e0:	7000736e 	andvc	r7, r0, lr, ror #6
    25e4:	654c746b 	strbvs	r7, [ip, #-1131]	; 0xfffffb95
    25e8:	7572006e 	ldrbvc	r0, [r2, #-110]!	; 0xffffff92
static byte get_byte () {
    25ec:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    25f0:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    25f4:	6f725064 	svcvs	0x00725064
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    25f8:	00785270 	rsbseq	r5, r8, r0, ror r2
    25fc:	43434652 	movtmi	r4, #13906	; 0x3652
		if (ee_inp)
    2600:	49304550 	ldmdbmi	r0!, {r4, r6, r8, sl, lr}
			b |= 1;
    2604:	6148746e 	cmpvs	r8, lr, ror #8
    2608:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    260c:	72640072 	rsbvc	r0, r4, #114	; 0x72
	for (b = 0, i = 0; i < 8; i++) {
    2610:	63727076 	cmnvs	r2, #118	; 0x76
}
    2614:	506e0073 	rsbpl	r0, lr, r3, ror r0
    2618:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    261c:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
static void put_byte (byte b) {
    2620:	63620073 	cmnvs	r2, #115	; 0x73
    2624:	745f666b 	ldrbvc	r6, [pc], #-1643	; 262c <put_byte+0xc>
    2628:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    262c:	63667200 	cmnvs	r6, #0, 4
		if (b & 0x80)
    2630:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2634:	4f52505f 	svcmi	0x0052505f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2638:	58545f50 	ldmdapl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
	for (i = 0; i < 8; i++) {
    263c:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
		b <<= 1;
    2640:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
	for (i = 0; i < 8; i++) {
    2644:	505f444d 	subspl	r4, pc, sp, asr #8
}
    2648:	5f504f52 	svcpl	0x00504f52
    264c:	735f5854 	cmpvc	pc, #84, 16	; 0x540000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2650:	6c646900 			; <UNDEFINED> instruction: 0x6c646900
    2654:	00704f65 	rsbseq	r4, r0, r5, ror #30
	put_byte (cmd);
    2658:	71657266 	cmnvc	r5, r6, ror #4
    265c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
}
    2660:	50700079 	rsbspl	r0, r0, r9, ror r0
    2664:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
static void wwait (word st, word del) {
    2668:	00626154 	rsbeq	r6, r2, r4, asr r1
    266c:	73467363 	movtvc	r7, #25443	; 0x6363
    2670:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	while (dopen && (rdsr () & 1)) {
    2674:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
    2678:	7472735f 	ldrbtvc	r7, [r2], #-863	; 0xfffffca1
    267c:	73466200 	movtvc	r6, #25088	; 0x6200
    2680:	0066664f 	rsbeq	r6, r6, pc, asr #12
	put_byte (CMD_RDSR);
    2684:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
	r = get_byte ();
    2688:	694d6769 	stmdbvs	sp, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    268c:	64416373 	strbvs	r6, [r1], #-883	; 0xfffffc8d
	while (dopen && (rdsr () & 1)) {
    2690:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
}
    2694:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
		if (st == WNONE)
    2698:	43620065 	cmnmi	r2, #101	; 0x65
    269c:	64416b68 	strbvs	r6, [r1], #-2920	; 0xfffff498
			mdelay (1);
    26a0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    26a4:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
			delay (del, st);
    26a8:	47726574 			; <UNDEFINED> instruction: 0x47726574
    26ac:	73666e65 	cmnvc	r6, #1616	; 0x650
			release;
    26b0:	6570436b 	ldrbvs	r4, [r0, #-875]!	; 0xfffffc95
    26b4:	63746150 	cmnvs	r4, #80, 2
    26b8:	66720068 	ldrbtvs	r0, [r2], -r8, rrx
static void ready () {
    26bc:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	if (dopen) {
    26c0:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
		wwait (WNONE, 1);
    26c4:	535f434e 	cmppl	pc, #939524097	; 0x38000001
    26c8:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
    26cc:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
	dstat = 0;
    26d0:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
}
    26d4:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    26d8:	535f444d 	cmppl	pc, #1291845632	; 0x4d000000
    26dc:	5f434e59 	svcpl	0x00434e59
	udelay (1);
    26e0:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    26e4:	41525f54 	cmpmi	r2, r4, asr pc
	udelay (1);
    26e8:	00745f54 	rsbseq	r5, r4, r4, asr pc
		dopen = DOPEN_TEMP;
    26ec:	6c796170 	ldfvse	f6, [r9], #-448	; 0xfffffe40
    26f0:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
    26f4:	73526d75 	cmpvc	r2, #7488	; 0x1d40
    26f8:	75426973 	strbvc	r6, [r2, #-2419]	; 0xfffff68d
static void cclose () {
    26fc:	74007973 	strvc	r7, [r0], #-2419	; 0xfffff68d
	if (dopen == DOPEN_TEMP) {
    2700:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2704:	73556200 	cmpvc	r5, #0, 4
		wwait (WNONE, 1);
    2708:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
    270c:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
	cmd_0 (CMD_DP);
    2710:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
    2714:	6b73666e 	blvs	1cdc0d4 <__ccfg+0x1cbc12c>
		dopen = 0;
    2718:	50737953 	rsbspl	r7, r3, r3, asr r9
}
    271c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
word ee_open () {
    2720:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
	ready ();
    2724:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
	dopen = DOPEN_PERM;
    2728:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    272c:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
}
    2730:	61640066 	cmnvs	r4, r6, rrx
	if (dopen) {
    2734:	75516174 	ldrbvc	r6, [r1, #-372]	; 0xfffffe8c
    2738:	5f657565 	svcpl	0x00657565
		dopen = DOPEN_TEMP;
    273c:	536e0074 	cmnpl	lr, #116	; 0x74
		cclose ();
    2740:	0070696b 	rsbseq	r6, r0, fp, ror #18
}
    2744:	73796870 	cmnvc	r9, #112, 16	; 0x700000
int ser_out (word st, const char *m) {
    2748:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
	if ((prcs = running (__outserial)) != 0) {
    274c:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    2750:	6f725064 	svcvs	0x00725064
    2754:	00785470 	rsbseq	r5, r8, r0, ror r4
		join (prcs, st);
    2758:	46666572 			; <UNDEFINED> instruction: 0x46666572
		release;
    275c:	00716572 	rsbseq	r6, r1, r2, ror r5
	if (*m)
    2760:	43434652 	movtmi	r4, #13906	; 0x3652
		prcs = strlen (m) +1;
    2764:	6b636f6c 	blvs	18de51c <__ccfg+0x18be574>
    2768:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    276c:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    2770:	67676972 			; <UNDEFINED> instruction: 0x67676972
    2774:	79547265 	ldmdbvc	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
		umwait (st);
    2778:	4b006570 	blmi	1bd40 <__exidx_end+0x15fc0>
    277c:	2f504d54 	svccs	0x00504d54
		prcs =  m [1] + 3;
    2780:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
	if (*m)
    2784:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
		strcpy (buf, m);
    2788:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    278c:	5f766374 	svcpl	0x00766374
	if (runstrand (__outserial, buf) == 0) {
    2790:	5f74756f 	svcpl	0x0074756f
    2794:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
		ufree (buf);
    2798:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    279c:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
		memcpy (buf, m, prcs);
    27a0:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    27a4:	6374006c 	cmnvs	r4, #108	; 0x6c
    27a8:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
}
    27ac:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    27b0:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
int ser_in (word st, char *buf, int len) {
    27b4:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
    27b8:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
	if (len == 0)
    27bc:	006c6c75 	rsbeq	r6, ip, r5, ror ip
	if (__inpline == NULL) {
    27c0:	5f766374 	svcpl	0x00766374
		if ((prcs = running (__inserial)) == 0) {
    27c4:	5f6f6c63 	svcpl	0x006f6c63
    27c8:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
			prcs = runthread (__inserial);
    27cc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    27d0:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
			if (prcs == 0) {
    27d4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
				npwait (st);
    27d8:	6f62006c 	svcvs	0x0062006c
		release;
    27dc:	73646e75 	cmnvc	r4, #1872	; 0x750
		join (prcs, st);
    27e0:	73646e00 	cmnvc	r4, #0, 28
    27e4:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
	if (*__inpline == NULL) // bin cmd
    27e8:	71006c6c 	tstvc	r0, ip, ror #24
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    27ec:	746e6175 	strbtvc	r6, [lr], #-373	; 0xfffffe8b
	if (prcs >= len)
    27f0:	6f682f00 	svcvs	0x00682f00
		prcs = len-1;
    27f4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	memcpy (buf, __inpline, prcs);
    27f8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    27fc:	442f6e65 	strtmi	r6, [pc], #-3685	; 2804 <ser_in+0x50>
    2800:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	ufree (__inpline);
    2804:	4f2f706f 	svcmi	0x002f706f
	__inpline = NULL;
    2808:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	if (*buf) // if it's NULL, it's a bin cmd
    280c:	502f5445 	eorpl	r5, pc, r5, asr #8
		buf [prcs] = '\0';
    2810:	534f4349 	movtpl	r4, #62281	; 0xf349
}
    2814:	6369502f 	cmnvs	r9, #47	; 0x2f
		prcs = strlen (__inpline);
    2818:	502f534f 	eorpl	r5, pc, pc, asr #6
    281c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		return 0;
    2820:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    2824:	2f6c6169 	svccs	0x006c6169
    2828:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 18d1 <qfree+0x6d>
int ser_outf (word st, const char *m, ...) {
    282c:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    2830:	2e6c6169 	powcsez	f6, f4, #1.0
	if ((prcs = running (__outserial)) != 0) {
    2834:	5f5f0063 	svcpl	0x005f0063
    2838:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
		join (prcs, st);
    283c:	61697265 	cmnvs	r9, r5, ror #4
    2840:	5f5f006c 	svcpl	0x005f006c
		release;
    2844:	575f4d4f 	ldrbpl	r4, [pc, -pc, asr #26]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2848:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0xfffff6ae
    284c:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2850:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
		umwait (st);
    2854:	006c6169 	rsbeq	r6, ip, r9, ror #2
    2858:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 27a4 <ser_out+0x5c>
	if (runstrand (__outserial, buf) == 0) {
    285c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    2860:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    2864:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		ufree (buf);
    2868:	6f746b73 	svcvs	0x00746b73
		npwait (st);
    286c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
    2870:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2874:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2878:	2f534f43 	svccs	0x00534f43
    287c:	4f636950 	svcmi	0x00636950
int ser_inf (word st, const char *fmt, ...) {
    2880:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2884:	2f736269 	svccs	0x00736269
	if (fmt == NULL)
    2888:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
	if (__inpline == NULL) {
    288c:	5f2f6c61 	svcpl	0x002f6c61
		if ((prcs = running (__inserial)) == 0) {
    2890:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    2894:	61697265 	cmnvs	r9, r5, ror #4
			prcs = runthread (__inserial);
    2898:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    289c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 27e8 <ser_in+0x34>
			if (prcs == 0) {
    28a0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				npwait (st);
    28a4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
		release;
    28a8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		join (prcs, st);
    28ac:	6f746b73 	svcvs	0x00746b73
    28b0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	va_start (ap, fmt);
    28b4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	prcs = vscan (__inpline, fmt, ap);
    28b8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    28bc:	2f534f43 	svccs	0x00534f43
	ufree (__inpline);
    28c0:	4f636950 	svcmi	0x00636950
	__inpline = NULL;
    28c4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
}
    28c8:	2f736269 	svccs	0x00736269
    28cc:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    28d0:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
		return 0;
    28d4:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    28d8:	4100632e 	tstmi	r0, lr, lsr #6
    28dc:	6e696167 	powvsez	f6, f1, f7
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    28e0:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
    28e4:	5f5f0063 	svcpl	0x005f0063
    28e8:	765f6970 			; <UNDEFINED> instruction: 0x765f6970
	RF_cmdFs.frequency = 
    28ec:	72617066 	rsbvc	r7, r1, #102	; 0x66
}
    28f0:	76006573 			; <UNDEFINED> instruction: 0x76006573
    28f4:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    28f8:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    28fc:	645f7972 	ldrbvs	r7, [pc], #-2418	; 2904 <option+0x4>
static int option (int opt, address val) {
    2900:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    2904:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
    2908:	2f656d6f 	svccs	0x00656d6f
    290c:	70657473 	rsbvc	r7, r5, r3, ror r4
    2910:	2f6e6568 	svccs	0x006e6568
    2914:	6b736544 	blvs	1cdbe2c <__ccfg+0x1cbbe84>
    2918:	2f706f74 	svccs	0x00706f74
    291c:	4f534c4f 	svcmi	0x00534c4f
    2920:	2f54454e 	svccs	0x0054454e
    2924:	4f434950 	svcmi	0x00434950
    2928:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    292c:	2f534f63 	svccs	0x00534f63
    2930:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			goto RVal;
    2934:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
			_BIS (dstate, DSTATE_RXON);
    2938:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    293c:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
	int ret = 0;
    2940:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
			p_trigger (drvprcs, qevent);
    2944:	63737600 	cmnvs	r3, #0, 12
    2948:	52006e61 	andpl	r6, r0, #1552	; 0x610
    294c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2950:	6c5f645f 	cfldrdvs	mvd6, [pc], {95}	; 0x5f
    2954:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    2958:	6f682f00 	svcvs	0x00682f00
    295c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    2960:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2964:	442f6e65 	strtmi	r6, [pc], #-3685	; 296c <option+0x6c>
    2968:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
}
    296c:	4f2f706f 	svcmi	0x002f706f
			_BIC (dstate, DSTATE_RXON);
    2970:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2974:	502f5445 	eorpl	r5, pc, r5, asr #8
			statid = (val == NULL) ? 0 : *val;
    2978:	534f4349 	movtpl	r4, #62281	; 0xf349
    297c:	6369502f 	cmnvs	r9, #47	; 0x2f
	int ret = 0;
    2980:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
			ret = (int) statid;
    2984:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	if (val != NULL)
    2988:	6d732f58 	ldclvs	15, cr2, [r3, #-352]!	; 0xfffffea0
		*val = ret;
    298c:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
			ret = rbuffl + 2;
    2990:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    2994:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
			if (val != NULL) {
    2998:	6c5f7367 	mrrcvs	3, 6, r7, pc, cr7	; <UNPREDICTABLE>
				memcpy (val, &rxstat,
    299c:	72685f70 	rsbvc	r5, r8, #112, 30	; 0x1c0
    29a0:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
				memset (&rxstat, 0, 
    29a4:	70746e69 	rsbsvc	r6, r4, r9, ror #28
    29a8:	745f7274 	ldrbvc	r7, [pc], #-628	; 29b0 <option+0xb0>
			if (val == NULL)
    29ac:	764f7000 	strbvc	r7, [pc], -r0
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    29b0:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    29b4:	00736564 	rsbseq	r6, r3, r4, ror #10
				utimer_set (bckf_timer, *val);
    29b8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    29bc:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    29c0:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
			for (ret = 0; ret < 8; ret++)
    29c4:	45717249 	ldrbmi	r7, [r1, #-585]!	; 0xfffffdb7
				if (RF_cmdPropRadioDivSetup.txPower
    29c8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
					== patable [ret])
    29cc:	53006465 	movwpl	r6, #1125	; 0x465
				if (RF_cmdPropRadioDivSetup.txPower
    29d0:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
			for (ret = 0; ret < 8; ret++)
    29d4:	41697061 	cmnmi	r9, r1, rrx
    29d8:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    29dc:	6c655369 	stclvs	3, cr5, [r5], #-420	; 0xfffffe5c
    29e0:	00746365 	rsbseq	r6, r4, r5, ror #6
    29e4:	52545046 	subspl	r5, r4, #70	; 0x46
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    29e8:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    29ec:	4f565f44 	svcmi	0x00565f44
			_BIS (dstate, DSTATE_IRST);
    29f0:	545f4449 	ldrbpl	r4, [pc], #-1097	; 29f8 <option+0xf8>
    29f4:	524f4e00 	subpl	r4, pc, #0, 28
    29f8:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
			ret = (int) channel;
    29fc:	70635550 	rsbvc	r5, r3, r0, asr r5
			goto RVal;
    2a00:	00646973 	rsbeq	r6, r4, r3, ror r9
				(*val > 7) ? 7 : *val;
    2a04:	4f524f4e 	svcmi	0x00524f4e
    2a08:	50435f4d 	subpl	r5, r3, sp, asr #30
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2a0c:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
    2a10:	53006569 	movwpl	r6, #1385	; 0x569
			plugch ();
    2a14:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
			_BIS (dstate, DSTATE_IRST);
    2a18:	56697061 	strbtpl	r7, [r9], -r1, rrx
    2a1c:	0064696f 	rsbeq	r6, r4, pc, ror #18
			ret = (int) vrate;
    2a20:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2a24:	5f38746e 	svcpl	0x0038746e
    2a28:	2f2e0074 	svccs	0x002e0074
    2a2c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2a30:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a34:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2a38:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2a3c:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2a40:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2a44:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    2a48:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
    2a4c:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    2a50:	31303220 	teqcc	r0, r0, lsr #4
			syserror (EREQPAR, "cc13 op");
    2a54:	32353035 	eorscc	r3, r5, #53	; 0x35
    2a58:	72282039 	eorvc	r2, r8, #57	; 0x39
    2a5c:	61656c65 	cmnvs	r5, r5, ror #24
    2a60:	20296573 	eorcs	r6, r9, r3, ror r5
    2a64:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    2a68:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
    2a6c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
    2a70:	5f342d64 	svcpl	0x00342d64
    2a74:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    2a78:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    2a7c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    2a80:	6f697369 	svcvs	0x00697369
    2a84:	3232206e 	eorscc	r2, r2, #110	; 0x6e
    2a88:	37373937 			; <UNDEFINED> instruction: 0x37373937
    2a8c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
static void issue_cmd (lword cmd) {
    2a90:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    2a94:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a98:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
    2a9c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    2aa0:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
		if (res != 0x86)
    2aa4:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
			syserror (EHARDWARE, "hang ic0");
    2aa8:	734f2d20 	movtvc	r2, #64800	; 0xfd20
    2aac:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
		if (cnt-- == 0) {
    2ab0:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
			diag ("HUP %lx %lx", cmd, res);
    2ab4:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
    2ab8:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
			syserror (EHARDWARE, "hang ic0");
    2abc:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
		udelay (1);
    2ac0:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2ac4:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
}
    2ac8:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
    2acc:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
    2ad0:	6f697463 	svcvs	0x00697463
    2ad4:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
static void rx_de () {
    2ad8:	6f697463 	svcvs	0x00697463
	if ((dstate & DSTATE_RXAC) == 0)
    2adc:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
    2ae0:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2ae4:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
	_BIC (dstate, DSTATE_RXAC);
    2ae8:	6f697463 	svcvs	0x00697463
    2aec:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
}
    2af0:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
    2af4:	74506600 	ldrbvc	r6, [r0], #-1536	; 0xfffffa00
    2af8:	50460072 	subpl	r0, r6, r2, ror r0
static void rf_off () {
    2afc:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
	if ((dstate & DSTATE_RFON) == 0)
    2b00:	5f44494f 	svcpl	0x0044494f
    2b04:	544e4955 	strbpl	r4, [lr], #-2389	; 0xfffff6ab
	IntDisable (INT_RFC_CPE_0);
    2b08:	00545f38 	subseq	r5, r4, r8, lsr pc
    2b0c:	4a5c3a43 	bmi	1711420 <__ccfg+0x16f1478>
    2b10:	696b6e65 	stmdbvs	fp!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	RFCAdi3VcoLdoVoltageMode (false);
    2b14:	6a5c736e 	bvs	171f8d4 <__ccfg+0x16ff92c>
	RFCSynthPowerDown ();
    2b18:	5c73626f 	lfmpl	f6, 2, [r3], #-444	; 0xfffffe44
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2b1c:	72475746 	subvc	r5, r7, #18350080	; 0x1180000
    2b20:	2d70756f 	cfldr64cs	mvdx7, [r0, #-444]!	; 0xfffffe44
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2b24:	76697244 	strbtvc	r7, [r9], -r4, asr #4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b28:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2b2c:	6f775c62 	svcvs	0x00775c62
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2b30:	70736b72 	rsbsvc	r6, r3, r2, ror fp
    2b34:	5c656361 	stclpl	3, cr6, [r5], #-388	; 0xfffffe7c
    2b38:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
	_BIC (dstate, DSTATE_RFON);
    2b3c:	5c73656c 	cfldr64pl	mvdx6, [r3], #-432	; 0xfffffe50
    2b40:	7074756f 	rsbsvc	r7, r4, pc, ror #10
}
    2b44:	635c7475 	cmpvs	ip, #1962934272	; 0x75000000
    2b48:	78333163 	ldmdavc	r3!, {r0, r1, r5, r6, r8, ip, sp}
    2b4c:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b50:	5f325f61 	svcpl	0x00325f61
    2b54:	78655f30 	stmdavc	r5!, {r4, r5, r8, r9, sl, fp, ip, lr}^
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2b58:	72645c74 	rsbvc	r5, r4, #116, 24	; 0x7400
    2b5c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2b60:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
		if (cmd->status == tstat)
    2b64:	5c6e6962 			; <UNDEFINED> instruction: 0x5c6e6962
		if (timeout-- == 0) {
    2b68:	00636367 	rsbeq	r6, r3, r7, ror #6
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2b6c:	53387475 	teqpl	r8, #1962934272	; 0x75000000
    2b70:	616e6769 	cmnvs	lr, r9, ror #14
    2b74:	4f4e006c 	svcmi	0x004e006c
			syserror (EHARDWARE, "rt2");
    2b78:	5f4d4f52 	svcpl	0x004d4f52
    2b7c:	424e4f41 	submi	r4, lr, #260	; 0x104
		udelay (1);
    2b80:	6f4d7461 	svcvs	0x004d7461
		if (cmd->status == tstat)
    2b84:	6d65546e 	cfstrdvs	mvd5, [r5, #-440]!	; 0xfffffe48
}
    2b88:	61726570 	cmnvs	r2, r0, ror r5
    2b8c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2b90:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    2b94:	00436765 	subeq	r6, r3, r5, ror #14
static void rf_on () {
    2b98:	746c6f76 	strbtvc	r6, [ip], #-3958	; 0xfffff08a
    2b9c:	53656761 	cmnpl	r5, #25427968	; 0x1840000
	OSCHF_TurnOnXosc();
    2ba0:	65706f6c 	ldrbvs	r6, [r0, #-3948]!	; 0xfffff094
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2ba4:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2ba8:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    2bac:	5f00745f 	svcpl	0x0000745f
    2bb0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2bb4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2bb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2bbc:	2f2e2e2f 	svccs	0x002e2e2f
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2bc0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2bc8 <rf_on.part.0+0x38>
	issue_cmd (
    2bc4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2bc8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2bcc:	6e6f612f 	powvsep	f6, f7, #10.0
    2bd0:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    2bd4:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
   pPatchTab[80] = 0;
    2bd8:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
   } while (--nIterations);
    2bdc:	6f43706d 	svcvs	0x0043706d
   pPatchTab[53] = 2;
    2be0:	63657272 	cmnvs	r5, #536870919	; 0x20000007
    2be4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
   pPatchTab[55] = 3;
    2be8:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
   pPatchTab[110] = 4;
    2bec:	5464656e 	strbtpl	r6, [r4], #-1390	; 0xfffffa92
   pPatchTab[107] = 5;
    2bf0:	00706d65 	rsbseq	r6, r0, r5, ror #26
   pPatchTab[65] = 6;
    2bf4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
    2bf8:	61566e72 	cmpvs	r6, r2, ror lr
   pPatchTab[57] = 1;
    2bfc:	0065756c 	rsbeq	r7, r5, ip, ror #10
   pIrqPatch[1] = _IRQ_PATCH_0;
    2c00:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
   const uint32_t *pS = patchGenfskRfe;
    2c04:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
      t2 = *pS++;
    2c08:	53746e65 	cmnpl	r4, #1616	; 0x650
      t4 = *pS++;
    2c0c:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
      t6 = *pS++;
    2c10:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2adc <rx_de+0x4>
      t8 = *pS++;
    2c14:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
      *pD++ = t1;
    2c18:	43435452 	movtmi	r5, #13394	; 0x3452
      *pD++ = t2;
    2c1c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
      *pD++ = t3;
    2c20:	6f43746e 	svcvs	0x0043746e
      *pD++ = t5;
    2c24:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
      *pD++ = t7;
    2c28:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
   } while (--nIterations);
    2c2c:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    2c30:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
      *pD++ = t8;
    2c34:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
   } while (--nIterations);
    2c38:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2c3c:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
   *pD++ = t2;
    2c40:	00646165 	rsbeq	r6, r4, r5, ror #2
   *pD++ = t3;
    2c44:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   *pD++ = t4;
    2c48:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
   *pD++ = t5;
    2c4c:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
    2c50:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	RFCAdi3VcoLdoVoltageMode (true);
    2c54:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2c58:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
       	RFCRfTrimSet (&rfTrim);
    2c5c:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2c60:	524f4e00 	subpl	r4, pc, #0, 28
    2c64:	415f4d4f 	cmpmi	pc, pc, asr #26
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2c68:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    2c6c:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
	issue_cmd ((lword)&cmd_srt);
    2c70:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c74:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
	issue_cmd ((lword)&RF_cmdFs);
    2c78:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2c7c:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    2c80:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    2c84:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
	IntEnable (INT_RFC_CPE_0);
    2c88:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
	_BIC (dstate, DSTATE_IRST);
    2c8c:	63657300 	cmnvs	r5, #0, 6
    2c90:	53646e41 	cmnpl	r4, #1040	; 0x410
    2c94:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2c98:	2f2e0063 	svccs	0x002e0063
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2c9c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	IntEnable (INT_RFC_CPE_0);
    2ca0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2ca4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
}
    2ca8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	IntEnable (INT_RFC_CPE_0);
    2cac:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2cb0:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    2cb4:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    2cb8:	7a697300 	bvc	1a5f8c0 <__ccfg+0x1a3f918>
    2cbc:	70797465 	rsbsvc	r7, r9, r5, ror #8
    2cc0:	4f4e0065 	svcmi	0x004e0065
    2cc4:	5f4d4f52 	svcpl	0x004d4f52
    2cc8:	62555043 	subsvs	r5, r5, #67	; 0x43
    2ccc:	70657361 	rsbvc	r7, r5, r1, ror #6
    2cd0:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
    2cd4:	4f4e0074 	svcmi	0x004e0074
    2cd8:	5f4d4f52 	svcpl	0x004d4f52
    2cdc:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
    2ce0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    2ce4:	33697500 	cmncc	r9, #0, 10
    2ce8:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
    2cec:	33697500 	cmncc	r9, #0, 10
    2cf0:	756f4332 	strbvc	r4, [pc, #-818]!	; 29c6 <option+0xc6>
    2cf4:	2e00746e 	cdpcs	4, 0, cr7, cr0, cr14, {3}
    2cf8:	2f2e2e2f 	svccs	0x002e2e2f
    2cfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2d00:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2d04:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2d08:	2f62696c 	svccs	0x0062696c
    2d0c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
static void rx_int_enable () {
    2d10:	4f4e0063 	svcmi	0x004e0063
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2d14:	5f4d4f52 	svcpl	0x004d4f52
    2d18:	70555043 	subsvc	r5, r5, r3, asr #32
    2d1c:	616d6972 	smcvs	54930	; 0xd692
    2d20:	4e006b73 	vmovmi.16	d0[1], r6
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2d24:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2bf0 <rf_on.part.0+0x60>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2d28:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2d2c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2d30:	756f536b 	strbvc	r5, [pc, #-875]!	; 29cd <option+0xcd>
    2d34:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d38:	46007465 	strmi	r7, [r0], -r5, ror #8
    2d3c:	5f525450 	svcpl	0x00525450
    2d40:	54454c46 	strbpl	r4, [r5], #-3142	; 0xfffff3ba
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d44:	52454843 	subpl	r4, r5, #4390912	; 0x430000
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d48:	545f3233 	ldrbpl	r3, [pc], #-563	; 2d50 <rx_int_enable+0x40>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d4c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
		if (db->status == DATA_ENTRY_FINISHED) {
    2d50:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d54:	41564444 	cmpmi	r6, r4, asr #8
    2d58:	00545f4c 	subseq	r5, r4, ip, asr #30
			nr++;
    2d5c:	4f524f4e 	svcmi	0x00524f4e
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2d60:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2d64:	6f6c4343 	svcvs	0x006c4343
    2d68:	6f536b63 	svcvs	0x00536b63
    2d6c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
				__dp [pl + 1] = __dp [pl] - 128;
    2d70:	00746547 	rsbseq	r6, r4, r7, asr #10
				pl = __dp [1] + 2;
    2d74:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				__dp [pl + 1] = __dp [pl] - 128;
    2d78:	0063734f 	rsbeq	r7, r3, pc, asr #6
    2d7c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
				__dp [pl] = 0;
    2d80:	6f437463 	svcvs	0x00437463
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2d84:	5242706d 	subpl	r7, r2, #109	; 0x6d
    2d88:	46006665 	strmi	r6, [r0], -r5, ror #12
    2d8c:	5f525450 	svcpl	0x00525450
			db->status = DATA_ENTRY_PENDING;
    2d90:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2d94:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2d98:	00545f34 	subseq	r5, r4, r4, lsr pc
				diag ("BAD RX");
    2d9c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2da0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	if (nr) {
    2da4:	435f6e4f 	cmpmi	pc, #1264	; 0x4f0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2da8:	4f4e0056 	svcmi	0x004e0056
}
    2dac:	5f4d4f52 	svcpl	0x004d4f52
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2db0:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2db4:	74415f46 	strbvc	r5, [r1], #-3910	; 0xfffff0ba
    2db8:	706d6574 	rsbvc	r6, sp, r4, ror r5
}
    2dbc:	536f5474 	cmnpl	pc, #116, 8	; 0x74000000
    2dc0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2dc4:	586f5468 	stmdapl	pc!, {r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2dc8:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2dcc:	6f534648 	svcvs	0x00534648
    2dd0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2dd4:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    2dd8:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2ddc:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
thread (cc1350_driver)
    2de0:	58706d65 	ldmdapl	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    2de4:	4f63736f 	svcmi	0x0063736f
    2de8:	6e006666 	cfmadd32vs	mvax3, mvfx6, mvfx0, mvfx6
    2dec:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
    2df0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
		if (dstate & DSTATE_IRST) {
    2df4:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2df8:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2dfc:	61700073 	cmnvs	r0, r3, ror r0
			rf_off ();
    2e00:	506d6172 	rsbpl	r6, sp, r2, ror r1
			_BIC (dstate,
    2e04:	61700031 	cmnvs	r0, r1, lsr r0
    2e08:	506d6172 	rsbpl	r6, sp, r2, ror r1
		if (dstate & DSTATE_RXAC) {
    2e0c:	61700032 	cmnvs	r0, r2, lsr r0
    2e10:	506d6172 	rsbpl	r6, sp, r2, ror r1
			if ((dstate & DSTATE_RXON) == 0)
    2e14:	5f5f0033 	svcpl	0x005f0033
				rx_de ();
    2e18:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
		if (paylen == 0) {
    2e1c:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2e24 <cc1350_driver+0x44>
    2e20:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2e24:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2e28:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2e2c:	5f334445 	svcpl	0x00334445
    2e30:	72700054 	rsbsvc	r0, r0, #84	; 0x54
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2e34:	6f697665 	svcvs	0x00697665
    2e38:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
    2e3c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2e40:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2e44:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2e48:	2f2e0073 	svccs	0x002e0073
    2e4c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e50:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		} else if (dstate & DSTATE_RXON) {
    2e54:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	if (dstate & DSTATE_RFON)
    2e58:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2e5c:	6f2f6269 	svcvs	0x002f6269
		re->status = DATA_ENTRY_PENDING;
    2e60:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2e64:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
	issue_cmd ((lword)&RF_cmdPropRx);
    2e68:	736f5865 	cmnvc	pc, #6619136	; 0x650000
	_BIS (dstate, DSTATE_RXAC);
    2e6c:	61745363 	cmnvs	r4, r3, ror #6
    2e70:	5f656c62 	svcpl	0x00656c62
    2e74:	74005643 	strvc	r5, [r0], #-1603	; 0xfffff9bd
    2e78:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
	if (dstate & DSTATE_RXAC)
    2e7c:	61746c65 	cmnvs	r4, r5, ror #24
    2e80:	776f6c00 	strbvc	r6, [pc, -r0, lsl #24]!
				if (statid != 0xffff)
    2e84:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    2e88:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2cc4 <rf_on.part.0+0x134>
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2e8c:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
				RF_cmdPropTx.pktLen = (byte) paylen;
    2e90:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
		if (paylen == 0) {
    2e94:	63697665 	cmnvs	r9, #105906176	; 0x6500000
			wait (qevent, DR_LOOP);
    2e98:	4f4e0065 	svcmi	0x004e0065
    2e9c:	5f4d4f52 	svcpl	0x004d4f52
			if (dstate & DSTATE_RXAC) {
    2ea0:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2ea4:	75545f46 	ldrbvc	r5, [r4, #-3910]	; 0xfffff0ba
				rx_int_enable ();
    2ea8:	6e4f6e72 	mcrvs	14, 2, r6, cr15, cr2, {3}
			release;
    2eac:	63736f58 	cmnvs	r3, #88, 30	; 0x160
			} else if (dstate & DSTATE_RFON) {
    2eb0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
				delay (offdelay, DR_GOOF);
    2eb4:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2eb8:	44544553 	ldrbmi	r4, [r4], #-1363	; 0xfffffaad
    2ebc:	545f5645 	ldrbpl	r5, [pc], #-1605	; 2ec4 <cc1350_driver+0xe4>
		if (bckf_timer) {
    2ec0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
			wait (qevent, DR_LOOP);
    2ec4:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2ec8:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2ecc:	5f324445 	svcpl	0x00324445
			delay (bckf_timer, DR_LOOP);
    2ed0:	65520054 	ldrbvs	r0, [r2, #-84]	; 0xffffffac
    2ed4:	76726573 			; <UNDEFINED> instruction: 0x76726573
			if (dstate & DSTATE_RXAC)
    2ed8:	6f4c6465 	svcvs	0x004c6465
    2edc:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
	if (dstate & DSTATE_RFON)
    2ee0:	00336e6f 	eorseq	r6, r3, pc, ror #28
    2ee4:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
		rx_de ();
    2ee8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
		RF_cmdPropTx . status = 0;
    2eec:	73655200 	cmnvc	r5, #0, 4
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ef0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2ef4:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2ef8:	6f697461 	svcvs	0x00697461
		issue_cmd ((lword)&cmd_cs);
    2efc:	4e00346e 	cdpmi	4, 0, cr3, cr0, cr14, {3}
		if (dstate & DSTATE_IRST)
    2f00:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2dcc <rx_int_enable+0xbc>
    2f04:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2f08:	535f4648 	cmppl	pc, #72, 12	; 0x4800000
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f0c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2f10:	526f5468 	rsbpl	r5, pc, #104, 8	; 0x68000000
			delay (1, DR_XMIT);
    2f14:	63734f63 	cmnvs	r3, #396	; 0x18c
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2f18:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    2f1c:	5866664f 	stmdapl	r6!, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    2f20:	0063736f 	rsbeq	r7, r3, pc, ror #6
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2f24:	52545046 	subspl	r5, r4, #70	; 0x46
    2f28:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
				RF_cmdPropTx . status = 0;
    2f2c:	5f4c4156 	svcpl	0x004c4156
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2f30:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
				issue_cmd ((lword)&RF_cmdPropTx);
    2f34:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
				proceed (DR_XMIT);
    2f38:	43434441 	movtmi	r4, #13377	; 0x3441
    2f3c:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
			txtries++;
    2f40:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2f44:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2f48:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2f4c:	00656d69 	rsbeq	r6, r5, r9, ror #26
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f50:	5678614d 	ldrbtpl	r6, [r8], -sp, asr #2
		goto DR_LOOP__;
    2f54:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2f58:	524f4e00 	subpl	r4, pc, #0, 28
		paylen = 0;
    2f5c:	4f5f4d4f 	svcmi	0x005f4d4f
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2f60:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
		txtries = 0;
    2f64:	43534f50 	cmpmi	r3, #80, 30	; 0x140
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f68:	616c6552 	cmnvs	ip, r2, asr r5
    2f6c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    2f70:	71657246 	cmnvc	r5, r6, asr #4
    2f74:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2f78:	66664f79 	uqsub16vs	r4, r6, r9
		    tcvphy_top (physid) == NULL)
    2f7c:	47746573 			; <UNDEFINED> instruction: 0x47746573
    2f80:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2f84:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e50 <cc1350_driver+0x70>
    2f88:	43534f5f 	cmpmi	r3, #380	; 0x17c
			rf_off ();
    2f8c:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2f94 <cc1350_driver+0x1b4>
endthread
    2f90:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    2f94:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2f98:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2f9c:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2fa0:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2fa4:	00656475 	rsbeq	r6, r5, r5, ror r4
    2fa8:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
    2fac:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2fb0:	50460065 	subpl	r0, r6, r5, rrx
    2fb4:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2fb8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2fbc:	31444556 	cmpcc	r4, r6, asr r5
    2fc0:	4300545f 	movwmi	r5, #1119	; 0x45f
    2fc4:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    2fc8:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
    2fcc:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
void RFCCPE0IntHandler (void) {
    2fd0:	00323372 	eorseq	r3, r2, r2, ror r3
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2fd4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
		_BIS (dstate, DSTATE_IRST);
    2fd8:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2fdc:	50460064 	subpl	r0, r6, r4, rrx
    2fe0:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2e98 <cc1350_driver+0xb8>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2fe4:	564e4145 	strbpl	r4, [lr], -r5, asr #2
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2fe8:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2ff0 <RFCCPE0IntHandler+0x20>
    2fec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	p_trigger (drvprcs, qevent);
    2ff0:	44415f52 	strbmi	r5, [r1], #-3922	; 0xfffff0ae
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ff4:	4d4f4343 	stclmi	3, cr4, [pc, #-268]	; 2ef0 <cc1350_driver+0x110>
    2ff8:	4e494250 	mcrmi	2, 2, r4, cr9, cr0, {2}
    2ffc:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    3000:	5f525450 	svcpl	0x00525450
    3004:	504d4f43 	subpl	r4, sp, r3, asr #30
    3008:	46455242 	strbmi	r5, [r5], -r2, asr #4
    300c:	5300545f 	movwpl	r5, #1119	; 0x45f
    3010:	63656c65 	cmnvs	r5, #25856	; 0x6500
    3014:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2e4c <cc1350_driver+0x6c>
    3018:	6e494170 	mcrvs	1, 2, r4, cr9, cr0, {3}
	RISE_N_SHINE;
    301c:	00747570 	rsbseq	r7, r4, r0, ror r5
    3020:	52545046 	subspl	r5, r4, #70	; 0x46
    3024:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2eb0 <cc1350_driver+0xd0>
}
    3028:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
    302c:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    3030:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    3034:	61746c65 	cmnvs	r4, r5, ror #24
    3038:	6f003258 	svcvs	0x00003258
    303c:	66486373 			; <UNDEFINED> instruction: 0x66486373
void phys_cc1350 (int phy, int mbs) {
    3040:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
	if (rbuffl != 0)
    3044:	00736c61 	rsbseq	r6, r3, r1, ror #24
    3048:	534f5048 	movtpl	r5, #61512	; 0xf048
		syserror (ETOOMANY, "cc13");
    304c:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xfffff0bd
		syserror (EREQPAR, "cc13 mb");
    3050:	6572466c 	ldrbvs	r4, [r2, #-1644]!	; 0xfffff994
	if (mbs == 0)
    3054:	66664f71 	uqsub16vs	r4, r6, r1
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    3058:	00746573 	rsbseq	r6, r4, r3, ror r5
		syserror (EREQPAR, "cc13 mb");
    305c:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3060:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
	i = 0;
    3064:	6e695365 	cdpvs	3, 6, cr5, cr9, cr5, {3}
	rbuffl = (byte) mbs;
    3068:	6f586563 	svcvs	0x00586563
		db->config.type = 0;	// General (data in structure)
    306c:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
	rbuffl = (byte) mbs;
    3070:	734d6e49 	movtvc	r6, #56905	; 0xde49
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    3074:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    3078:	65546174 	ldrbvs	r6, [r4, #-372]	; 0xfffffe8c
		if (db == NULL)
    307c:	6953706d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, ip, sp, lr}^
			syserror (EMALLOC, "cc13");
    3080:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    3084:	4f63736f 	svcmi	0x0063736f
    3088:	6966006e 	stmdbvs	r6!, {r1, r2, r3, r5, r6}^
		db->status = DATA_ENTRY_PENDING;
    308c:	72615074 	rsbvc	r5, r1, #116	; 0x74
		if (i)
    3090:	00736d61 	rsbseq	r6, r3, r1, ror #26
			da->pNextEntry = (byte*) db;
    3094:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
		db->length = rbuffl + 2;
    3098:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    309c:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
		db->config.type = 0;	// General (data in structure)
    30a0:	0073556e 	rsbseq	r5, r3, lr, ror #10
		db->length = rbuffl + 2;
    30a4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	db->pNextEntry = (byte*) re;
    30a8:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    30ac:	5f66664f 	svcpl	0x0066664f
    30b0:	4f005643 	svcmi	0x00005643
	if (rbuffs == NULL)
    30b4:	66484353 			; <UNDEFINED> instruction: 0x66484353
	rbuffs->pCurrEntry = (byte*) re;
    30b8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
	rbuffs->pLastEntry = NULL;
    30bc:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    30c0:	00796461 	rsbseq	r6, r9, r1, ror #8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30c4:	43706d61 	cmnmi	r0, #6208	; 0x1840
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    30c8:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    30cc:	4f003168 	svcmi	0x00003168
    30d0:	66486373 			; <UNDEFINED> instruction: 0x66486373
	rbuffl -= 2;
    30d4:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30d8:	5f736c61 	svcpl	0x00736c61
	rbuffl -= 2;
    30dc:	41480074 	hvcmi	32772	; 0x8004
	physid = phy;
    30e0:	415f4452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30e4:	545f4950 	ldrbpl	r4, [pc], #-2384	; 30ec <phys_cc1350+0xac>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30e8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    30ec:	746e5565 	strbtvc	r5, [lr], #-1381	; 0xfffffa9b
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    30f0:	61576c69 	cmpvs	r7, r9, ror #24
    30f4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
	utimer_add (&bckf_timer);
    30f8:	734d6e49 	movtvc	r6, #56905	; 0xde49
	drvprcs = runthread (cc1350_driver);
    30fc:	33697500 	cmncc	r9, #0, 10
    3100:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
    3104:	006b6c43 	rsbeq	r6, fp, r3, asr #24
	if (drvprcs == 0)
    3108:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
		syserror (ERESOURCE, "cc13");
    310c:	756f5366 	strbvc	r5, [pc, #-870]!	; 2dae <rx_int_enable+0x9e>
    3110:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3114:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    3118:	50460068 	subpl	r0, r6, r8, rrx
    311c:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3120:	32334352 	eorscc	r4, r3, #1207959553	; 0x48000001
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3124:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3128:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    312c:	00436765 	subeq	r6, r3, r5, ror #14
    3130:	52545046 	subspl	r5, r4, #70	; 0x46
    3134:	4e494d5f 	mcrmi	13, 2, r4, cr9, cr15, {2}
    3138:	5f4c4156 	svcpl	0x004c4156
    313c:	50460054 	subpl	r0, r6, r4, asr r0
    3140:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    3144:	554f5346 	strbpl	r5, [pc, #-838]	; 2e06 <cc1350_driver+0x26>
    3148:	53454352 	movtpl	r4, #21330	; 0x5352
	plugch ();
    314c:	53454641 	movtpl	r4, #22081	; 0x5641
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3150:	43544957 	cmpmi	r4, #1425408	; 0x15c000
    3154:	00545f48 	subseq	r5, r4, r8, asr #30
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3158:	566e694d 	strbtpl	r6, [lr], -sp, asr #18
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    315c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3160:	65727000 	ldrbvs	r7, [r2, #-0]!
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3164:	6d694c76 	stclvs	12, cr4, [r9, #-472]!	; 0xfffffe28
}
    3168:	3274696d 	rsbscc	r6, r4, #1785856	; 0x1b4000
    316c:	556e4935 	strbpl	r4, [lr, #-2357]!	; 0xfffff6cb
    3170:	4f4e0073 	svcmi	0x004e0073
    3174:	5f4d4f52 	svcpl	0x004d4f52
    3178:	5f43534f 	svcpl	0x0043534f
    317c:	534f5048 	movtpl	r5, #61512	; 0xf048
    3180:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    3184:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    3188:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    318c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    3190:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    3194:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3198:	46526f54 	usaxmi	r6, r2, r4
    319c:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    31a0:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    31a4:	6f437461 	svcvs	0x00437461
    31a8:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    31ac:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
    31b0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    31b4:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    31b8:	66655241 	strbtvs	r5, [r5], -r1, asr #4
    31bc:	33697500 	cmncc	r9, #0, 10
    31c0:	6f6c4332 	svcvs	0x006c4332
    31c4:	6f536b63 	svcvs	0x00536b63
    31c8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    31cc:	73655200 	cmnvc	r5, #0, 4
    31d0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    31d4:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    31d8:	6f697461 	svcvs	0x00697461
    31dc:	5200316e 	andpl	r3, r0, #-2147483621	; 0x8000001b
    31e0:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    31e4:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    31e8:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    31ec:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
    31f0:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    31f4:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    31f8:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
    31fc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    3200:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    3204:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    3208:	356e6f69 	strbcc	r6, [lr, #-3945]!	; 0xfffff097
    320c:	61745300 	cmnvs	r4, r0, lsl #6
    3210:	6544646e 	strbvs	r6, [r4, #-1134]	; 0xfffffb92
    3214:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
    3218:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    321c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3220:	43667200 	cmnmi	r6, #0, 4
    3224:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    3228:	4f716572 	svcmi	0x00716572
    322c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    3230:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    3234:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
    3238:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    323c:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    3240:	4f524f4e 	svcmi	0x00524f4e
    3244:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    3248:	5f464843 	svcpl	0x00464843
    324c:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    3250:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
strand (__outserial, const char*)
    3254:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
    3258:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
    325c:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    3260:	43656761 	cmnmi	r5, #25427968	; 0x1840000
endstrand
    3264:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    3268:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
	ptr = data;
    326c:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    3270:	00656475 	rsbeq	r6, r5, r5, ror r4
	if (*ptr)
    3274:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
		len = strlen (ptr);
    3278:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    327c:	706f4367 	rsbvc	r4, pc, r7, ror #6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3280:	50460079 	subpl	r0, r6, r9, ror r0
    3284:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    3288:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
    328c:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    3290:	4e00545f 	cfmvsrmi	mvf0, r5
	len -= quant;
    3294:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3160 <phys_cc1350+0x120>
    3298:	43534f5f 	cmpmi	r3, #380	; 0x17c
    329c:	475f4648 	ldrbmi	r4, [pc, -r8, asr #12]
	if (len == 0) {
    32a0:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
		ufree (data);
    32a4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
		finish;
    32a8:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    32ac:	6c460065 	mcrrvs	0, 6, r0, r6, cr5
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    32b0:	47687361 	strbmi	r7, [r8, -r1, ror #6]!
    32b4:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    32b8:	4600657a 			; <UNDEFINED> instruction: 0x4600657a
    32bc:	5f525450 	svcpl	0x00525450
    32c0:	504d4f43 	subpl	r4, sp, r3, asr #30
strand (__inserial, address)
    32c4:	46455241 	strbmi	r5, [r5], -r1, asr #4
    32c8:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    32cc:	5f525450 	svcpl	0x00525450
    32d0:	43544547 	cmpmi	r4, #297795584	; 0x11c00000
    32d4:	49504948 	ldmdbmi	r0, {r3, r6, r8, fp, lr}^
	if (__inpline != NULL)
    32d8:	00545f44 	subseq	r5, r4, r4, asr #30
    32dc:	52545046 	subspl	r5, r4, #70	; 0x46
		finish;
    32e0:	5345525f 	movtpl	r5, #21087	; 0x525f
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    32e4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    32e8:	545f3544 	ldrbpl	r3, [pc], #-1348	; 32f0 <__inserial+0x2c>
    32ec:	72617000 	rsbvc	r7, r1, #0
    32f0:	30506d61 	subscc	r6, r0, r1, ror #26
		umwait (IM_INIT);
    32f4:	524f4e00 	subpl	r4, pc, #0, 28
		release;
    32f8:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
	savedata (data);
    32fc:	70434346 	subvc	r4, r3, r6, asr #6
	len = MAX_LINE_LENGTH;
    3300:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
	io (IM_READ, __cport, READ, ptr, 1);
    3304:	41746547 	cmnmi	r4, r7, asr #10
    3308:	6c43646e 	cfstrdvs	mvd6, [r3], {110}	; 0x6e
    330c:	00726165 	rsbseq	r6, r2, r5, ror #2
    3310:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
	if (ptr == (char*) data) { // new line
    3314:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    3318:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
		if (*ptr == '\0') { // bin cmd
    331c:	745f657a 	ldrbvc	r6, [pc], #-1402	; 3324 <__inserial+0x60>
			proceed (IM_BIN);
    3320:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
    3324:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
		if (*ptr < 0x20)
    3328:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    332c:	00786564 	rsbseq	r6, r8, r4, ror #10
			proceed (IM_READ);
    3330:	4f524f4e 	svcmi	0x00524f4e
    3334:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
	if (*ptr == '\n' || *ptr == '\r') {
    3338:	69644143 	stmdbvs	r4!, {r0, r1, r6, r8, lr}^
    333c:	6f635633 	svcvs	0x00635633
    3340:	566f644c 	strbtpl	r6, [pc], -ip, asr #8
		*ptr = '\0';
    3344:	61746c6f 	cmnvs	r4, pc, ror #24
		__inpline = (char*)data;
    3348:	6f4d6567 	svcvs	0x004d6567
		finish;
    334c:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
	if (len) {
    3350:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
		ptr++;
    3354:	505f444d 	subspl	r4, pc, sp, asr #8
    3358:	5f504f52 	svcpl	0x00504f52
		len--;
    335c:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
	proceed (IM_READ);
    3360:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
	io (IM_BIN, __cport, READ, ptr, 1);
    3364:	5f505554 	svcpl	0x00505554
    3368:	4f4e0074 	svcmi	0x004e0074
    336c:	5f4d4f52 	svcpl	0x004d4f52
    3370:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
    3374:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
	len -= 2;
    3378:	7465536d 	strbtvc	r5, [r5], #-877	; 0xfffffc93
	if (len > *ptr + 1) // 1 for 0x04
    337c:	524f4e00 	subpl	r4, pc, #0, 28
    3380:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
		len = *ptr + 1;
    3384:	79534346 	ldmdbvc	r3, {r1, r2, r6, r8, r9, lr}^
    3388:	5068746e 	rsbpl	r7, r8, lr, ror #8
	ptr++;
    338c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3390:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3394:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
    3398:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    339c:	74725f65 	ldrbtvc	r5, [r2], #-3941	; 0xfffff09b
    33a0:	006d6972 	rsbeq	r6, sp, r2, ror r9
    33a4:	53704f70 	cmnpl	r0, #112, 30	; 0x1c0
	len -= quant;
    33a8:	70757465 	rsbsvc	r7, r5, r5, ror #8
		__inpline = (char*)data;
    33ac:	33697500 	cmncc	r9, #0, 10
		finish;
    33b0:	67664932 			; <UNDEFINED> instruction: 0x67664932
	ptr += quant;
    33b4:	63667200 	cmnvs	r6, #0, 4
    33b8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
endstrand
    33bc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    33c0:	41717249 	cmnmi	r1, r9, asr #4
	proceed (IM_BINL);
    33c4:	00726464 	rsbseq	r6, r2, r4, ror #8
endstrand
    33c8:	4f524f4e 	svcmi	0x00524f4e
    33cc:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    33d0:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
    33d4:	63746150 	cmnvs	r4, #80, 2
    33d8:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    33dc:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
		if (res && (d < n))
    33e0:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    33e4:	505f444d 	subspl	r4, pc, sp, asr #8
    33e8:	5f504f52 	svcpl	0x00504f52
    33ec:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
			res [d] = (char) c;
    33f0:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
		d++;
    33f4:	5f505554 	svcpl	0x00505554
    33f8:	52700073 	rsbspl	r0, r0, #115	; 0x73
    33fc:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3400:	766f006d 	strbtvc	r0, [pc], -sp, rrx
    3404:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3408:	765f6564 	ldrbvc	r6, [pc], -r4, ror #10
				enci (10000);
    340c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3410:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3414:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	d = 0;
    3418:	2f2e2e2f 	svccs	0x002e2e2f
		c = *fm++;
    341c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		if (c == '\\') {
    3420:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			if ((c = *fm++) == '\0') {
    3424:	66722f62 	ldrbtvs	r2, [r2], -r2, ror #30
    3428:	00632e63 	rsbeq	r2, r3, r3, ror #28
				outc ('\\');
    342c:	5f636672 	svcpl	0x00636672
			if ((c = *fm++) == '\0') {
    3430:	5f444d43 	svcpl	0x00444d43
				outc ('\\');
    3434:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    3438:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
			outc (c);
    343c:	5f505554 	svcpl	0x00505554
    3440:	66720073 			; <UNDEFINED> instruction: 0x66720073
			if (c == '\0')
    3444:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    3448:	41525f44 	cmpmi	r2, r4, asr #30
			outc (c);
    344c:	5f4f4944 	svcpl	0x004f4944
				outc (val);
    3450:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
				val = (word) va_arg (ap, aword);
    3454:	00745f50 	rsbseq	r5, r4, r0, asr pc
		if (c == '%') {
    3458:	616e4562 	cmnvs	lr, r2, ror #10
    345c:	00656c62 	rsbeq	r6, r5, r2, ror #24
			c = *fm++;
    3460:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
			switch (c) {
    3464:	74725f31 	ldrbtvc	r5, [r2], #-3889	; 0xfffff0cf
    3468:	006d6972 	rsbeq	r6, sp, r2, ror r9
    346c:	4f524f4e 	svcmi	0x00524f4e
    3470:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    3474:	72545243 	subsvc	r5, r4, #805306372	; 0x30000004
    3478:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    347c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3348 <__inserial+0x84>
    3480:	4346525f 	movtmi	r5, #25183	; 0x625f
				outc ('%');
    3484:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
    3488:	6c6c6562 	cfstr64vs	mvdx6, [ip], #-392	; 0xfffffe78
				outc (c);
    348c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    3490:	52006f54 	andpl	r6, r0, #84, 30	; 0x150
    3494:	63414346 	movtvs	r4, #4934	; 0x1346
				if (c == '\0')
    3498:	746e496b 	strbtvc	r4, [lr], #-2411	; 0xfffff695
				return d;
    349c:	61656c43 	cmnvs	r5, r3, asr #24
}
    34a0:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    34a4:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
			switch (c) {
    34a8:	4f4e0072 	svcmi	0x004e0072
    34ac:	5f4d4f52 	svcpl	0x004d4f52
    34b0:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
				for (i = 12; ; i -= 4) {
    34b4:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
				val = (word) va_arg (ap, aword);
    34b8:	6165526d 	cmnvs	r5, sp, ror #4
						[ (val >> i) & 0xf ]);
    34bc:	706d0064 	rsbvc	r0, sp, r4, rrx
    34c0:	76657231 			; <UNDEFINED> instruction: 0x76657231
    34c4:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
					outc (__pi_hex_enc_table
    34c8:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    34cc:	6f437265 	svcvs	0x00437265
					if (i == 0)
    34d0:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    34d4:	57746573 			; <UNDEFINED> instruction: 0x57746573
				for (i = 12; ; i -= 4) {
    34d8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
				val = (word) va_arg (ap, aword);
    34dc:	6f724670 	svcvs	0x00724670
				if (c == 'd' && (val & 0x8000) != 0) {
    34e0:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
				val = (word) va_arg (ap, aword);
    34e4:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
				if (c == 'd' && (val & 0x8000) != 0) {
    34e8:	4f4e006e 	svcmi	0x004e006e
    34ec:	5f4d4f52 	svcpl	0x004d4f52
					outc ('-');
    34f0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    34f4:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
					val = (~val) + 1;
    34f8:	6f437265 	svcvs	0x00437265
    34fc:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
				for (i = 12; ; i -= 4) {
    3500:	57746573 			; <UNDEFINED> instruction: 0x57746573
				enci (10000);
    3504:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3508:	6f724670 	svcvs	0x00724670
    350c:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3510:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    3514:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3518:	4f4e0031 	svcmi	0x004e0031
    351c:	5f4d4f52 	svcpl	0x004d4f52
    3520:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3524:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
    3528:	6f437265 	svcvs	0x00437265
    352c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3530:	57746573 			; <UNDEFINED> instruction: 0x57746573
    3534:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3538:	6f724670 	svcvs	0x00724670
    353c:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3540:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    3544:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3548:	4f4e0032 	svcmi	0x004e0032
				if (c == 'd' || c == 'u') {
    354c:	5f4d4f52 	svcpl	0x004d4f52
    3550:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
					if (c == 'd' &&
    3554:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
					val = va_arg (ap, lword);
    3558:	6f437265 	svcvs	0x00437265
					fm++;
    355c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
					if (c == 'd' &&
    3560:	57746573 			; <UNDEFINED> instruction: 0x57746573
    3564:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
						outc ('-');
    3568:	6f724670 	svcvs	0x00724670
    356c:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
						val = (~val) + 1;
    3570:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
				enci (10000);
    3574:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
					enci (1000000000UL);
    3578:	2f2e0033 	svccs	0x002e0033
    357c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3580:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3584:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3588:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    358c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3590:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3594:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3598:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3464 <__pi_vfparse+0x64>
    359c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    35a0:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    35a4:	63614374 	cmnvs	r1, #116, 6	; 0xd0000001
    35a8:	6f4d6568 	svcvs	0x004d6568
    35ac:	63416564 	movtvs	r6, #5476	; 0x1564
    35b0:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    35b4:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    35b8:	6663436f 	strbtvs	r4, [r3], -pc, ror #6
				} else if (c == 'x') {
    35bc:	74655367 	strbtvc	r5, [r5], #-871	; 0xfffffc99
					for (i = 28; ; i -= 4) {
    35c0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
					val = va_arg (ap, lword);
    35c4:	33697500 	cmncc	r9, #0, 10
							[ (val >> i) & 0xf ]);
    35c8:	66634632 			; <UNDEFINED> instruction: 0x66634632
    35cc:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
						outc (__pi_hex_enc_table
    35d0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    35d4:	41006e6f 	tstmi	r0, pc, ror #28
    35d8:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
						if (i == 0)
    35dc:	61744a43 	cmnvs	r4, r3, asr #20
    35e0:	776f5067 	strbvc	r5, [pc, -r7, rrx]!
					for (i = 28; ; i -= 4) {
    35e4:	664f7265 	strbvs	r7, [pc], -r5, ror #4
					outc ('%');
    35e8:	72540066 	subsvc	r0, r4, #102	; 0x66
    35ec:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    35f0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
					outc ('l');
    35f4:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    35f8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
				val = (word) va_arg (ap, aword);
    35fc:	524f4e00 	subpl	r4, pc, #0, 28
				outc (val);
    3600:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3604:	70757465 	rsbsvc	r7, r5, r5, ror #8
				while (*st != '\0') {
    3608:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    360c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3610:	76006563 	strvc	r6, [r0], -r3, ror #10
    3614:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
					outc (*st);
    3618:	6964755f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    361c:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
					st++;
    3620:	6f413233 	svcvs	0x00413233
		c = *fm++;
    3624:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    3628:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    362c:	6c746374 	ldclvs	3, cr6, [r4], #-464	; 0xfffffe30
char *vform (char *res, const char *fm, va_list aq) {
    3630:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    3634:	6f4d5f67 	svcvs	0x004d5f67
	if (res != NULL) {
    3638:	6f436564 	svcvs	0x00436564
		__pi_vfparse (res, MAX_WORD, fm, aq);
    363c:	6552666e 	ldrbvs	r6, [r2, #-1646]	; 0xfffff992
    3640:	72540067 	subsvc	r0, r4, #103	; 0x67
    3644:	66416d69 	strbvs	r6, [r1], -r9, ror #26
}
    3648:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    364c:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
	fml = strlen (fm) + 17;
    3650:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3654:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    3658:	72467075 	subvc	r7, r6, #117	; 0x75
	if ((res = (char*) umalloc (fml)) == NULL)
    365c:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3660:	6f447475 	svcvs	0x00447475
    3664:	61576e77 	cmpvs	r7, r7, ror lr
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3668:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    366c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 355c <__pi_vfparse+0x15c>
    3670:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3674:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
		ufree (res);
    3678:	4f4e006e 	svcmi	0x004e006e
		goto Again;
    367c:	5f4d4f52 	svcpl	0x004d4f52
	if (buf == NULL || fmt == NULL)
    3680:	73696854 	cmnvc	r9, #84, 16	; 0x540000
int vscan (const char *buf, const char *fmt, va_list ap) {
    3684:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
	if (buf == NULL || fmt == NULL)
    3688:	75427349 	strbvc	r7, [r2, #-841]	; 0xfffffcb7
    368c:	46746c69 	ldrbtmi	r6, [r4], -r9, ror #24
    3690:	4343726f 	movtmi	r7, #12911	; 0x326f
		    	    case 'u': scanu (lword); break;
    3694:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
			while (isspace (*buf)) buf++;
    3698:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    369c:	41303276 	teqmi	r0, r6, ror r2
	while (*fmt != '\0') {
    36a0:	614c646e 	cmpvs	ip, lr, ror #8
		if (*fmt++ != '%')
    36a4:	5f726574 	svcpl	0x00726574
		switch (*fmt++) {
    36a8:	746c6148 	strbtvc	r6, [ip], #-328	; 0xfffffeb8
    36ac:	69566649 	ldmdbvs	r6, {r0, r3, r6, r9, sl, sp, lr}^
    36b0:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    36b4:	76006465 	strvc	r6, [r0], -r5, ror #8
    36b8:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    36bc:	646f625f 	strbtvs	r6, [pc], #-607	; 36c4 <vscan+0x44>
    36c0:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
}
    36c4:	74784567 	ldrbtvc	r4, [r8], #-1383	; 0xfffffa99
		switch (*fmt++) {
    36c8:	6c43664c 	mcrrvs	6, 4, r6, r3, cr12
    36cc:	7563006b 	strbvc	r0, [r3, #-107]!	; 0xffffff95
    36d0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    36d4:	43664874 	cmnmi	r6, #116, 16	; 0x740000
			while (isspace (*buf)) buf++;
    36d8:	6b636f6c 	blvs	18df490 <__ccfg+0x18bf4e8>
    36dc:	33697500 	cmncc	r9, #0, 10
    36e0:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    36e4:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    36e8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    36ec:	524f4e00 	subpl	r4, pc, #0, 28
			if (*buf == '\0')
    36f0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
			if (*buf != ',') {
    36f4:	70757465 	rsbsvc	r7, r5, r5, ror #8
			sap = va_arg (ap, char*);
    36f8:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
			nc++;
    36fc:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
			if (*buf != ',') {
    3700:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
				while (!isspace (*buf) && *buf != ',' &&
    3704:	70796261 	rsbsvc	r6, r9, r1, ror #4
    3708:	56737361 	ldrbtpl	r7, [r3], -r1, ror #6
    370c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3710:	4f4e0031 	svcmi	0x004e0031
    3714:	5f4d4f52 	svcpl	0x004d4f52
    3718:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    371c:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
			while (isspace (*buf)) buf++;
    3720:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3724:	44726f46 	ldrbtmi	r6, [r2], #-3910	; 0xfffff0ba
    3728:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    372c:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    3730:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
			if (*buf == ',') buf++;
    3734:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    3738:	6f567465 	svcvs	0x00567465
			*sap = '\0';
    373c:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
			break;
    3740:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
		    case 'd': scani (word); break;
    3744:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3748:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    374c:	6976006d 	ldmdbvs	r6!, {r0, r2, r3, r5, r6}^
    3750:	7443736d 	strbvc	r7, [r3], #-877	; 0xfffffc93
    3754:	646f4d6c 	strbtvs	r4, [pc], #-3436	; 375c <vscan+0xdc>
    3758:	69003065 	stmdbvs	r0, {r0, r2, r5, r6, ip, sp}
    375c:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3760:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    3764:	67007465 	strvs	r7, [r0, -r5, ror #8]
    3768:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    376c:	6f466d69 	svcvs	0x00466d69
    3770:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3774:	43666863 	cmnmi	r6, #6488064	; 0x630000
    3778:	61566c74 	cmpvs	r6, r4, ror ip
    377c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3780:	4f524f4e 	svcmi	0x00524f4e
    3784:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3788:	47707574 			; <UNDEFINED> instruction: 0x47707574
    378c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3790:	6f466d69 	svcvs	0x00466d69
    3794:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3798:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    379c:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    37a0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    37a4:	524f4e00 	subpl	r4, pc, #0, 28
    37a8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    37ac:	70757465 	rsbsvc	r7, r5, r5, ror #8
    37b0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
		    case 'u': scanu (word); break;
    37b4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    37b8:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    37bc:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    37c0:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    37c4:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    37c8:	64006d69 	strvs	r6, [r0], #-3433	; 0xfffff297
    37cc:	61746c65 	cmnvs	r4, r5, ror #24
    37d0:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    37d4:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
    37d8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 36a4 <vscan+0x24>
    37dc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    37e0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    37e4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37e8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37ec:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    37f0:	74436648 	strbvc	r6, [r3], #-1608	; 0xfffff9b8
    37f4:	6567006c 	strbvs	r0, [r7, #-108]!	; 0xffffff94
    37f8:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
		    case 'x': scanx (word); break;
    37fc:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3800:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    3804:	43747845 	cmnmi	r4, #4521984	; 0x450000
    3808:	61566766 	cmpvs	r6, r6, ror #14
    380c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3810:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3814:	69725461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, lr}^
    3818:	6975006d 	ldmdbvs	r5!, {r0, r2, r3, r5, r6}^
    381c:	6f583233 	svcvs	0x00583233
    3820:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3824:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    3828:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    382c:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    3830:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    3834:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3700 <vscan+0x80>
    3838:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    383c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3840:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3844:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3848:	63706d41 	cmnvs	r0, #4160	; 0x1040
    384c:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    3850:	4e003168 	adfmisz	f3, f0, #0.0
    3854:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3720 <vscan+0xa0>
    3858:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    385c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3860:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3864:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3868:	63706d41 	cmnvs	r0, #4160	; 0x1040
    386c:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    3870:	4e003268 	cdpmi	2, 0, cr3, cr0, cr8, {3}
			switch (*fmt++) {
    3874:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3740 <vscan+0xc0>
    3878:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    387c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3880:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3884:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3888:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
		    	    case 'd': scani (lword); break;
    388c:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
    3890:	006e4566 	rsbeq	r4, lr, r6, ror #10
    3894:	4f524f4e 	svcmi	0x00524f4e
    3898:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    389c:	52323349 	eorspl	r3, r2, #603979777	; 0x24000001
    38a0:	72576765 	subsvc	r6, r7, #26476544	; 0x1940000
    38a4:	00657469 	rsbeq	r7, r5, r9, ror #8
    38a8:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    38ac:	74614431 	strbtvc	r4, [r1], #-1073	; 0xfffffbcf
    38b0:	72740061 	rsbsvc	r0, r4, #97	; 0x61
    38b4:	6f466d69 	svcvs	0x00466d69
    38b8:	4f635272 	svcmi	0x00635272
    38bc:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    38c0:	61694249 	cmnvs	r9, r9, asr #4
    38c4:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    38c8:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    38cc:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    38d0:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    38d4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    38d8:	4f4e006d 	svcmi	0x004e006d
    38dc:	5f4d4f52 	svcpl	0x004d4f52
    38e0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    38e4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
		    	    case 'x': scanx (lword); break;
    38e8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    38ec:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    38f0:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    38f4:	66437478 			; <UNDEFINED> instruction: 0x66437478
    38f8:	2f2e0067 	svccs	0x002e0067
    38fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3900:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3904:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3908:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    390c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3910:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3914:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 37a0 <vscan+0x120>
    3918:	7300632e 	movwvc	r6, #814	; 0x32e
    391c:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    3920:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    3924:	524f4e00 	subpl	r4, pc, #0, 28
    3928:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    392c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3930:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3934:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3938:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    393c:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    3940:	75745266 	ldrbvc	r5, [r4, #-614]!	; 0xfffffd9a
    3944:	7443656e 	strbvc	r6, [r3], #-1390	; 0xfffffa92
    3948:	54656e75 	strbtpl	r6, [r5], #-3701	; 0xfffff18b
    394c:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3950:	4f524f4e 	svcmi	0x00524f4e
    3954:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
		    	    case 'd': scani (lword); break;
    3958:	47707574 			; <UNDEFINED> instruction: 0x47707574
    395c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3960:	6f466d69 	svcvs	0x00466d69
    3964:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3968:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    396c:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    3970:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
		    	    case 'u': scanu (lword); break;
    3974:	43646e41 	cmnmi	r4, #1040	; 0x410
    3978:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    397c:	61527277 	cmpvs	r2, r7, ror r2
    3980:	006f6974 	rsbeq	r6, pc, r4, ror r9	; <UNPREDICTABLE>
    3984:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3988:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    398c:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    3990:	69537075 	ldmdbvs	r3, {r0, r2, r4, r5, r6, ip, sp, lr}^
    3994:	78456e67 	stmdavc	r5, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    3998:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    399c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    39a0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    39a4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    39a8:	65670065 	strbvs	r0, [r7, #-101]!	; 0xffffff9b
    39ac:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    39b0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    39b4:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    39b8:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
		    	    case 'x': scanx (lword); break;
    39bc:	566e4566 	strbtpl	r4, [lr], -r6, ror #10
    39c0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
			if ((c = *buf++) == '\0')
    39c4:	524f4e00 	subpl	r4, pc, #0, 28
    39c8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
			sap = va_arg (ap, char*);
    39cc:	70757465 	rsbsvc	r7, r5, r5, ror #8
			nc++;
    39d0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
			break;
    39d4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
			while (isspace (*buf)) buf++;
    39d8:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    39dc:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    39e0:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
						*sap++ = *buf++;
    39e4:	3369006e 	cmncc	r9, #110	; 0x6e
    39e8:	67695332 			; <UNDEFINED> instruction: 0x67695332
			while (isspace (*buf)) buf++;
    39ec:	5664656e 	strbtpl	r6, [r4], -lr, ror #10
    39f0:	56726464 	ldrbtpl	r6, [r2], -r4, ror #8
    39f4:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
		return 0;
    39f8:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    39fc:	31666e6f 	cmncc	r6, pc, ror #28
		    case 'x': scanx (word); break;
    3a00:	33697500 	cmncc	r9, #0, 10
    3a04:	66634632 			; <UNDEFINED> instruction: 0x66634632
		    	    case 'x': scanx (lword); break;
    3a08:	61563167 	cmpvs	r6, r7, ror #2
    3a0c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3a10:	4f524f4e 	svcmi	0x00524f4e
    3a14:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3a18:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3a1c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3a20:	6f466d69 	svcvs	0x00466d69
    3a24:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3a28:	49664863 	stmdbmi	r6!, {r0, r1, r5, r6, fp, lr}^
    3a2c:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3a30:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    3a34:	6567006d 	strbvs	r0, [r7, #-109]!	; 0xffffff93
    3a38:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3a3c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a40:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    3a44:	646f4d68 	strbtvs	r4, [pc], #-3432	; 3a4c <NOROM_AONBatMonTemperatureGetDegC+0x14>
    3a48:	566e4565 	strbtpl	r4, [lr], -r5, ror #10
    3a4c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3a50:	32336900 	eorscc	r6, r3, #0, 18
    3a54:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3a58:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3a5c:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3a60:	6366006d 	cmnvs	r6, #109	; 0x6d
    3a64:	4f316766 	svcmi	0x00316766
    3a68:	6f436373 	svcvs	0x00436373
    3a6c:	6400666e 	strvs	r6, [r0], #-1646	; 0xfffff992
    3a70:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    3a74:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    3a78:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    3a7c:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    3a80:	6f567465 	svcvs	0x00567465
    3a84:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    3a88:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    3a8c:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    3a90:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3a94:	6f58726f 	svcvs	0x0058726f
    3a98:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3a9c:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    3aa0:	6f74616c 	svcvs	0x0074616c
    3aa4:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    3aa8:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    3aac:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    3ab0:	6f697461 	svcvs	0x00697461
    3ab4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3ab8:	62690065 	rsbvs	r0, r9, #101	; 0x65
    3abc:	49736169 	ldmdbmi	r3!, {r0, r3, r5, r6, r8, sp, lr}^
    3ac0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3ac4:	4f524f4e 	svcmi	0x00524f4e
    3ac8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3acc:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    3ad0:	6f417465 	svcvs	0x00417465
    3ad4:	6374526e 	cmnvs	r4, #-536870906	; 0xe0000006
    3ad8:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    3adc:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    3ae0:	4f4e0063 	svcmi	0x004e0063
    3ae4:	5f4d4f52 	svcpl	0x004d4f52
    3ae8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3aec:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3af0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3af4:	41726f46 	cmnmi	r2, r6, asr #30
    3af8:	6f63706d 	svcvs	0x0063706d
    3afc:	7443706d 	strbvc	r7, [r3], #-109	; 0xffffff93
    3b00:	75006c72 	strvc	r6, [r0, #-3186]	; 0xfffff38e
    3b04:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3b08:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3b0c:	776f5266 	strbvc	r5, [pc, -r6, ror #4]!
    3b10:	33697500 	cmncc	r9, #0, 10
    3b14:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3b18:	43664863 	cmnmi	r6, #6488064	; 0x630000
    3b1c:	4e006c6f 	cdpmi	12, 0, cr6, cr0, cr15, {3}
    3b20:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 39ec <vscan+0x36c>
    3b24:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3b28:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3b2c:	64645674 	strbtvs	r5, [r4], #-1652	; 0xfffff98c
    3b30:	76654c72 			; <UNDEFINED> instruction: 0x76654c72
    3b34:	6e006c65 	cdpvs	12, 0, cr6, cr0, cr5, {3}
    3b38:	72547765 	subsvc	r7, r4, #26476544	; 0x1940000
    3b3c:	61526d69 	cmpvs	r2, r9, ror #26
    3b40:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    3b44:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
    3b48:	61566d69 	cmpvs	r6, r9, ror #26
    3b4c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3b50:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    3b54:	6f747375 	svcvs	0x00747375
    3b58:	4472656d 	ldrbtmi	r6, [r2], #-1389	; 0xfffffa93
    3b5c:	61746c65 	cmnvs	r4, r5, ror #24
    3b60:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    3b64:	69007473 	stmdbvs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    3b68:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    3b6c:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3b70:	44706565 	ldrbtmi	r6, [r0], #-1381	; 0xfffffa9b
    3b74:	61746c65 	cmnvs	r4, r5, ror #24
    3b78:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3b7c:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3b80:	7463416d 	strbtvc	r4, [r3], #-365	; 0xfffffe93
    3b84:	63006576 	movwvs	r6, #1398	; 0x576
    3b88:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    3b8c:	6400706d 	strvs	r7, [r0], #-109	; 0xffffff93
    3b90:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    3b94:	41726464 	cmnmi	r2, r4, ror #8
    3b98:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    3b9c:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    3ba0:	70007065 	andvc	r7, r0, r5, rrx
    3ba4:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    3ba8:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    3bac:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    3bb0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3bb4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    3bb8:	524f4e00 	subpl	r4, pc, #0, 28
    3bbc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3bc0:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3bc4:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    3bc8:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    3bcc:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3bd0:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3bd4:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3bd8:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    3bdc:	6f447265 	svcvs	0x00447265
    3be0:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    3be4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3ab0 <NOROM_OSCClockSourceSet>
    3be8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3bec:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3bf0:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3bf4:	61686365 	cmnvs	r8, r5, ror #6
    3bf8:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    3bfc:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    3c00:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    3c04:	6f447265 	svcvs	0x00447265
    3c08:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3c0c:	2f2e2e2f 	svccs	0x002e2e2f
    3c10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3c14:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3c18:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3c1c:	2f62696c 	svccs	0x0062696c
    3c20:	5f737973 	svcpl	0x00737973
    3c24:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    3c28:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3c2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3af8 <NOROM_OSCClockSourceSet+0x48>
    3c30:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3c34:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3c38:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3c3c:	756f5374 	strbvc	r5, [pc, #-884]!	; 38d0 <vscan+0x250>
    3c40:	47656372 			; <UNDEFINED> instruction: 0x47656372
    3c44:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    3c48:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    3c4c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3c50:	7000736e 	andvc	r7, r0, lr, ror #6
    3c54:	00457265 	subeq	r7, r5, r5, ror #4
    3c58:	65546470 	ldrbvs	r6, [r4, #-1136]	; 0xfffffb90
    3c5c:	7500706d 	strvc	r7, [r0, #-109]	; 0xffffff93
    3c60:	41323369 	teqmi	r2, r9, ror #6
    3c64:	6c437875 	mcrrvs	8, 7, r7, r3, cr5
    3c68:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    3c6c:	43525000 	cmpmi	r2, #0
    3c70:	6d6f444d 	cfstrdvs	mvd4, [pc, #-308]!	; 3b44 <NOROM_OSCHF_TurnOnXosc+0xc>
    3c74:	456e6961 	strbmi	r6, [lr, #-2401]!	; 0xfffff69f
    3c78:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3c7c:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
    3c80:	6e004d72 	mcrvs	13, 0, r4, cr0, cr2, {3}
    3c84:	65527765 	ldrbvs	r7, [r2, #-1893]	; 0xfffff89b
    3c88:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3c8c:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3c90:	646f6972 	strbtvs	r6, [pc], #-2418	; 3c98 <NOROM_RFCRfTrimRead+0x40>
    3c94:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3c98:	70614372 	rsbvc	r4, r1, r2, ror r3
    3c9c:	33697500 	cmncc	r9, #0, 10
    3ca0:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    3ca4:	53647000 	cmnpl	r4, #0
    3ca8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3cac:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    3cb0:	74736567 	ldrbtvc	r6, [r3], #-1383	; 0xfffffa99
    3cb4:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3cb8:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3cbc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3cc0:	6400646f 	strvs	r6, [r0], #-1135	; 0xfffffb91
    3cc4:	61746c65 	cmnvs	r4, r5, ror #24
    3cc8:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3ccc:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3cd0:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3cd4:	6162006d 	cmnvs	r2, sp, rrx
    3cd8:	72685474 	rsbvc	r5, r8, #116, 8	; 0x74000000
    3cdc:	6f687365 	svcvs	0x00687365
    3ce0:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
    3ce4:	5063736f 	rsbpl	r7, r3, pc, ror #6
    3ce8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3cec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3cf0:	43525000 	cmpmi	r2, #0
    3cf4:	616f4c4d 	cmnvs	pc, sp, asr #24
    3cf8:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
    3cfc:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    3d00:	64657466 	strbtvs	r7, [r5], #-1126	; 0xfffffb9a
    3d04:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3d08:	44637400 	strbtmi	r7, [r3], #-1024	; 0xfffffc00
    3d0c:	61746c65 	cmnvs	r4, r5, ror #24
    3d10:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3d14:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3d18:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xfffff0b3
    3d1c:	4743656c 	strbmi	r6, [r3, -ip, ror #10]
    3d20:	72756300 	rsbsvc	r6, r5, #0, 6
    3d24:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3d28:	6f610065 	svcvs	0x00610065
    3d2c:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    3d30:	506c7463 	rsbpl	r7, ip, r3, ror #8
    3d34:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    3d38:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    3d3c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    3d40:	524f4e00 	subpl	r4, pc, #0, 28
    3d44:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3d48:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3d4c:	6f506c72 	svcvs	0x00506c72
    3d50:	45726577 	ldrbmi	r6, [r2, #-1399]!	; 0xfffffa89
    3d54:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3d58:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    3d5c:	4c700067 	ldclmi	0, cr0, [r0], #-412	; 0xfffffe64
    3d60:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
    3d64:	62615470 	rsbvs	r5, r1, #112, 8	; 0x70000000
    3d68:	7000656c 	andvc	r6, r0, ip, ror #10
    3d6c:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    3d70:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3d74:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3d78:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3d7c:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    3d80:	6f6d7461 	svcvs	0x006d7461
    3d84:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3d88:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3d8c:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3d90:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    3d94:	50007065 	andpl	r7, r0, r5, rrx
    3d98:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3d9c:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3da0:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3da4:	5f736c61 	svcpl	0x00736c61
    3da8:	4f4e0074 	svcmi	0x004e0074
    3dac:	5f4d4f52 	svcpl	0x004d4f52
    3db0:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3db4:	5f6c7274 	svcpl	0x006c7274
    3db8:	43444344 	movtmi	r4, #17220	; 0x4344
    3dbc:	6c6f565f 	stclvs	6, cr5, [pc], #-380	; 3c48 <NOROM_RFCSynthPowerDown+0x3c>
    3dc0:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3dc4:	646e6f43 	strbtvs	r6, [lr], #-3907	; 0xfffff0bd
    3dc8:	6f697469 	svcvs	0x00697469
    3dcc:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    3dd0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    3dd4:	70006c6f 	andvc	r6, r0, pc, ror #24
    3dd8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3ddc:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3de0:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3de4:	00736c61 	rsbseq	r6, r3, r1, ror #24
    3de8:	544f5250 	strbpl	r5, [pc], #-592	; 3df0 <NOROM_RFCRTrim+0x48>
    3dec:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3df0:	5f544942 	svcpl	0x00544942
    3df4:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    3df8:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    3dfc:	00797261 	rsbseq	r7, r9, r1, ror #4
    3e00:	4b434150 	blmi	10d4348 <__ccfg+0x10b43a0>
    3e04:	5f454741 	svcpl	0x00454741
    3e08:	00347834 	eorseq	r7, r4, r4, lsr r8
    3e0c:	50494843 	subpl	r4, r9, r3, asr #16
    3e10:	5059545f 	subspl	r5, r9, pc, asr r4
    3e14:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3e18:	30343632 	eorscc	r3, r4, r2, lsr r6
    3e1c:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    3e20:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3e24:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3e28:	5f594c49 	svcpl	0x00594c49
    3e2c:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3e30:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    3e34:	4e007a69 	vmlsmi.f32	s14, s0, s19
    3e38:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3d04 <NOROM_RFCRfTrimRead+0xac>
    3e3c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3e40:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3e44:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3e48:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    3e4c:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3e50:	00796c69 	rsbseq	r6, r9, r9, ror #24
    3e54:	4f524f4e 	svcmi	0x00524f4e
    3e58:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e5c:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3e60:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3e64:	61507465 	cmpvs	r0, r5, ror #8
    3e68:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    3e6c:	70795465 	rsbsvc	r5, r9, r5, ror #8
    3e70:	4f4e0065 	svcmi	0x004e0065
    3e74:	5f4d4f52 	svcpl	0x004d4f52
    3e78:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e7c:	6f666e49 	svcvs	0x00666e49
    3e80:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e84:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3e88:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3e8c:	70006e6f 	andvc	r6, r0, pc, ror #28
    3e90:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    3e94:	00657079 	rsbeq	r7, r5, r9, ror r0
    3e98:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e9c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3ea0:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3ea4:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3ea8:	6f697369 	svcvs	0x00697369
    3eac:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    3eb0:	50494843 	subpl	r4, r9, r3, asr #16
    3eb4:	5059545f 	subspl	r5, r9, pc, asr r4
    3eb8:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3ebc:	30313331 	eorscc	r3, r1, r1, lsr r3
    3ec0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3ec4:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3ec8:	5f796c69 	svcpl	0x00796c69
    3ecc:	77680074 			; <UNDEFINED> instruction: 0x77680074
    3ed0:	00766552 	rsbseq	r6, r6, r2, asr r5
    3ed4:	50494843 	subpl	r4, r9, r3, asr #16
    3ed8:	5059545f 	subspl	r5, r9, pc, asr r4
    3edc:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3ee0:	30353632 	eorscc	r3, r5, r2, lsr r6
    3ee4:	43415000 	movtmi	r5, #4096	; 0x1000
    3ee8:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3eec:	5343575f 	movtpl	r5, #14175	; 0x375f
    3ef0:	696d0050 	stmdbvs	sp!, {r4, r6}^
    3ef4:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    3ef8:	46007665 	strmi	r7, [r0], -r5, ror #12
    3efc:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3f00:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3f04:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3f08:	0032525f 	eorseq	r5, r2, pc, asr r2
    3f0c:	50494843 	subpl	r4, r9, r3, asr #16
    3f10:	5059545f 	subspl	r5, r9, pc, asr r4
    3f14:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3f18:	30353331 	eorscc	r3, r5, r1, lsr r3
    3f1c:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3f20:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3f24:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f28:	61467069 	cmpvs	r6, r9, rrx
    3f2c:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    3f30:	43437349 	movtmi	r7, #13129	; 0x3349
    3f34:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3f38:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3f3c:	5f594c49 	svcpl	0x00594c49
    3f40:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3f44:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3f48:	50494843 	subpl	r4, r9, r3, asr #16
    3f4c:	5059545f 	subspl	r5, r9, pc, asr r4
    3f50:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3f54:	30323632 	eorscc	r3, r2, r2, lsr r6
    3f58:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3f5c:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    3f60:	41460076 	hvcmi	24582	; 0x6006
    3f64:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3f68:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3f6c:	00787836 	rsbseq	r7, r8, r6, lsr r8
    3f70:	70696863 	rsbvc	r6, r9, r3, ror #16
    3f74:	006d6146 	rsbeq	r6, sp, r6, asr #2
    3f78:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3f7c:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    3f80:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3f84:	6366006e 	cmnvs	r6, #110	; 0x6e
    3f88:	50316766 	eorspl	r6, r1, r6, ror #14
    3f8c:	6f746f72 	svcvs	0x00746f72
    3f90:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    3f94:	746f7250 	strbtvc	r7, [pc], #-592	; 3f9c <TrimAfterColdResetWakeupFromShutDown+0xa0>
    3f98:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3de4 <NOROM_RFCRTrim+0x3c>
    3f9c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    3fa0:	6f746365 	svcvs	0x00746365
    3fa4:	00745f72 	rsbseq	r5, r4, r2, ror pc
    3fa8:	544f5250 	strbpl	r5, [pc], #-592	; 3fb0 <TrimAfterColdResetWakeupFromShutDown+0xb4>
    3fac:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3fb0:	5f544942 	svcpl	0x00544942
    3fb4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    3fb8:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    3fbc:	5f35315f 	svcpl	0x0035315f
    3fc0:	48430034 	stmdami	r3, {r2, r4, r5}^
    3fc4:	545f5049 	ldrbpl	r5, [pc], #-73	; 3fcc <TrimAfterColdResetWakeupFromShutDown+0xd0>
    3fc8:	5f455059 	svcpl	0x00455059
    3fcc:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3fd0:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3fd4:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3fd8:	5f325f56 	svcpl	0x00325f56
    3fdc:	41460032 	cmpmi	r6, r2, lsr r0
    3fe0:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3fe4:	3143435f 	cmpcc	r3, pc, asr r3
    3fe8:	00787833 	rsbseq	r7, r8, r3, lsr r8
    3fec:	4b434150 	blmi	10d4534 <__ccfg+0x10b458c>
    3ff0:	5f454741 	svcpl	0x00454741
    3ff4:	00377837 	eorseq	r7, r7, r7, lsr r8
    3ff8:	544f5250 	strbpl	r5, [pc], #-592	; 4000 <NOROM_SetupTrimDevice+0x30>
    3ffc:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    4000:	6b6e555f 	blvs	1b99584 <__ccfg+0x1b795dc>
    4004:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    4008:	52574800 	subspl	r4, r7, #0, 16
    400c:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    4010:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    4014:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3ee0 <NOROM_RFCAdi3VcoLdoVoltageMode>
    4018:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    401c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    4020:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    4024:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    4028:	70795470 	rsbsvc	r5, r9, r0, ror r4
    402c:	57480065 	strbpl	r0, [r8, -r5, rrx]
    4030:	5f564552 	svcpl	0x00564552
    4034:	00315f32 	eorseq	r5, r1, r2, lsr pc
    4038:	544f5250 	strbpl	r5, [pc], #-592	; 4040 <NOROM_SetupTrimDevice+0x70>
    403c:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    4040:	5f544942 	svcpl	0x00544942
    4044:	00454c42 	subeq	r4, r5, r2, asr #24
    4048:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    404c:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    4050:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    4054:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    4058:	57480061 	strbpl	r0, [r8, -r1, rrx]
    405c:	5f564552 	svcpl	0x00564552
    4060:	00335f32 	eorseq	r5, r3, r2, lsr pc
    4064:	70696863 	rsbvc	r6, r9, r3, ror #16
    4068:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    406c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    4070:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    4074:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    4078:	4f545355 	svcmi	0x00545355
    407c:	00305f4d 	eorseq	r5, r0, sp, asr #30
    4080:	50494843 	subpl	r4, r9, r3, asr #16
    4084:	5059545f 	subspl	r5, r9, pc, asr r4
    4088:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    408c:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 3f48 <TrimAfterColdResetWakeupFromShutDown+0x4c>
    4090:	4300315f 	movwmi	r3, #351	; 0x15f
    4094:	5f504948 	svcpl	0x00504948
    4098:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    409c:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    40a0:	00303336 	eorseq	r3, r0, r6, lsr r3
    40a4:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    40a8:	5f315f56 	svcpl	0x00315f56
    40ac:	41500030 	cmpmi	r0, r0, lsr r0
    40b0:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    40b4:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    40b8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    40bc:	2f2e006e 	svccs	0x002e006e
    40c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    40c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40c8:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    40cc:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    40d0:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    40d4:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    40d8:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    40dc:	63660063 	cmnvs	r6, #99	; 0x63
    40e0:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    40e4:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    40e8:	68430064 	stmdavs	r3, {r2, r5, r6}^
    40ec:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    40f0:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    40f4:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    40f8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    40fc:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    4100:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    4104:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4108:	70696843 	rsbvc	r6, r9, r3, asr #16
    410c:	6f666e49 	svcvs	0x00666e49
    4110:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    4114:	6f6e694d 	svcvs	0x006e694d
    4118:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    411c:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    4120:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    4124:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4128:	4f4e0076 	svcmi	0x004e0076
    412c:	5f4d4f52 	svcpl	0x004d4f52
    4130:	70696843 	rsbvc	r6, r9, r3, asr #16
    4134:	6f666e49 	svcvs	0x00666e49
    4138:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    413c:	70707553 	rsbsvc	r7, r0, r3, asr r5
    4140:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4144:	6f725064 	svcvs	0x00725064
    4148:	6f636f74 	svcvs	0x00636f74
    414c:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    4150:	43415000 	movtmi	r5, #4096	; 0x1000
    4154:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    4158:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    415c:	50005245 	andpl	r5, r0, r5, asr #4
    4160:	414b4341 	cmpmi	fp, r1, asr #6
    4164:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 3c25 <NOROM_RFCSynthPowerDown+0x19>
    4168:	50003578 	andpl	r3, r0, r8, ror r5
    416c:	616b6361 	cmnvs	fp, r1, ror #6
    4170:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    4174:	745f6570 	ldrbvc	r6, [pc], #-1392	; 417c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>
    4178:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    417c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    4180:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    4184:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    4188:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    418c:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    4190:	5f514554 	svcpl	0x00514554
    4194:	00305f32 	eorseq	r5, r0, r2, lsr pc
    4198:	70696843 	rsbvc	r6, r9, r3, asr #16
    419c:	6f666e49 	svcvs	0x00666e49
    41a0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    41a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    41a8:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    41ac:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    41b0:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    41b4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 4080 <NOROM_SetupSetVddrLevel+0xc>
    41b8:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    41bc:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    41c0:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    41c4:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    41c8:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    41cc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    41d0:	524f4e00 	subpl	r4, pc, #0, 28
    41d4:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 41dc <NOROM_SetupGetTrimForAnabypassValue1+0x40>
    41d8:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    41dc:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    41e0:	00646165 	rsbeq	r6, r4, r5, ror #2
    41e4:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    41e8:	78754100 	ldmdavc	r5!, {r8, lr}^
    41ec:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    41f0:	61536964 	cmpvs	r3, r4, ror #18
    41f4:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    41f8:	00657469 	rsbeq	r7, r5, r9, ror #8
    41fc:	36316975 			; <UNDEFINED> instruction: 0x36316975
    4200:	61746144 	cmnvs	r4, r4, asr #2
    4204:	33697500 	cmncc	r9, #0, 10
    4208:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    420c:	00617461 	rsbeq	r7, r1, r1, ror #8
    4210:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    4214:	61746144 	cmnvs	r4, r4, asr #2
    4218:	33697500 	cmncc	r9, #0, 10
    421c:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    4220:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    4224:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 40f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    4228:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    422c:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    4230:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    4234:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    4238:	00657469 	rsbeq	r7, r5, r9, ror #8
    423c:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    4240:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    4244:	61563233 	cmpvs	r6, r3, lsr r2
    4248:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    424c:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    4250:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    4254:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    4258:	00646165 	rsbeq	r6, r4, r5, ror #2
    425c:	4f524f4e 	svcmi	0x00524f4e
    4260:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    4264:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    4268:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    426c:	00657469 	rsbeq	r7, r5, r9, ror #8
    4270:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4274:	2f2e2e2f 	svccs	0x002e2e2f
    4278:	642f2e2e 	strtvs	r2, [pc], #-3630	; 4280 <NOROM_SetupGetTrimForAmpcompCtrl+0x4c>
    427c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4280:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4284:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4288:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    428c:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    4290:	64416765 	strbvs	r6, [r1], #-1893	; 0xfffff89b
    4294:	6e007264 	cdpvs	2, 0, cr7, cr0, cr4, {3}
    4298:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    429c:	5f435f00 	svcpl	0x00435f00
    42a0:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
    42a4:	5f636972 	svcpl	0x00636972
    42a8:	61636f6c 	cmnvs	r3, ip, ror #30
    42ac:	6300656c 	movwvs	r6, #1388	; 0x56c
    42b0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    42b4:	5f79636e 	svcpl	0x0079636e
    42b8:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    42bc:	63006c6f 	movwvs	r6, #3183	; 0xc6f
    42c0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    42c4:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    42c8:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    42cc:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    42d0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    42d4:	73645f64 	cmnvc	r4, #100, 30	; 0x190
    42d8:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    42dc:	5f6e5f74 	svcpl	0x006e5f74
    42e0:	5f706573 	svcpl	0x00706573
    42e4:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    42e8:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    42ec:	6f636c00 	svcvs	0x00636c00
    42f0:	6300766e 	movwvs	r7, #1646	; 0x66e
    42f4:	6c5f6b6a 	mrrcvs	11, 6, r6, pc, cr10	; <UNPREDICTABLE>
    42f8:	00676e61 	rsbeq	r6, r7, r1, ror #28
    42fc:	6e5f636c 	cdpvs	3, 5, cr6, cr15, cr12, {3}
    4300:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    4304:	545f6369 	ldrbpl	r6, [pc], #-873	; 430c <NOROM_SetupGetTrimForRadcExtCfg>
    4308:	5f435f00 	svcpl	0x00435f00
    430c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4310:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    4314:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4318:	5f746e69 	svcpl	0x00746e69
    431c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    4320:	6d79735f 	ldclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    4324:	006c6f62 	rsbeq	r6, ip, r2, ror #30
    4328:	745f636c 	ldrbvc	r6, [pc], #-876	; 4330 <NOROM_SetupGetTrimForRadcExtCfg+0x24>
    432c:	5f656d69 	svcpl	0x00656d69
    4330:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
    4334:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4338:	73746967 	cmnvc	r4, #1687552	; 0x19c000
    433c:	5f435f00 	svcpl	0x00435f00
    4340:	70797463 	rsbsvc	r7, r9, r3, ror #8
    4344:	6f6c5f65 	svcvs	0x006c5f65
    4348:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    434c:	5f6d6100 	svcpl	0x006d6100
    4350:	65006d70 	strvs	r6, [r0, #-3440]	; 0xfffff290
    4354:	645f6172 	ldrbvs	r6, [pc], #-370	; 435c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>
    4358:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    435c:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    4360:	7274736f 	rsbsvc	r7, r4, #-1140850687	; 0xbc000001
    4364:	5f636c00 	svcpl	0x00636c00
    4368:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    436c:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    4370:	6d00545f 	cfstrsvs	mvf5, [r0, #-380]	; 0xfffffe84
    4374:	61737365 	cmnvs	r3, r5, ror #6
    4378:	635f6567 	cmpvs	pc, #432013312	; 0x19c00000
    437c:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    4380:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
    4384:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    4388:	435f0063 	cmpmi	pc, #99	; 0x63
    438c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    4390:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4394:	6f6c5f73 	svcvs	0x006c5f73
    4398:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    439c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    43a0:	735f705f 	cmpvc	pc, #95	; 0x5f
    43a4:	5f6e6769 	svcpl	0x006e6769
    43a8:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    43ac:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    43b0:	6f72675f 	svcvs	0x0072675f
    43b4:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
    43b8:	5f580067 	svcpl	0x00580067
    43bc:	00746d66 	rsbseq	r6, r4, r6, ror #26
    43c0:	5f746e69 	svcpl	0x00746e69
    43c4:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
    43c8:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    43cc:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    43d0:	6f6d0073 	svcvs	0x006d0073
    43d4:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
    43d8:	616d6963 	cmnvs	sp, r3, ror #18
    43dc:	6f705f6c 	svcvs	0x00705f6c
    43e0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    43e4:	6d665f63 	stclvs	15, cr5, [r6, #-396]!	; 0xfffffe74
    43e8:	61640074 	smcvs	16388	; 0x4004
    43ec:	665f6574 			; <UNDEFINED> instruction: 0x665f6574
    43f0:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    43f4:	74616765 	strbtvc	r6, [r1], #-1893	; 0xfffff89b
    43f8:	5f657669 	svcpl	0x00657669
    43fc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    4400:	5f626d00 	svcpl	0x00626d00
    4404:	5f727563 	svcpl	0x00727563
    4408:	0078616d 	rsbseq	r6, r8, sp, ror #2
    440c:	61686377 	smcvs	34359	; 0x8637
    4410:	00745f72 	rsbseq	r5, r4, r2, ror pc
    4414:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4418:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    441c:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    4420:	7463006e 	strbtvc	r0, [r3], #-110	; 0xffffff92
    4424:	5f657079 	svcpl	0x00657079
    4428:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    442c:	00746573 	rsbseq	r6, r4, r3, ror r5
    4430:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    4434:	756f6420 	strbvc	r6, [pc, #-1056]!	; 401c <NOROM_SetupTrimDevice+0x4c>
    4438:	00656c62 	rsbeq	r6, r5, r2, ror #24
    443c:	78656f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4440:	78007270 	stmdavc	r0, {r4, r5, r6, r9, ip, sp, lr}
    4444:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4448:	62757300 	rsbsvs	r7, r5, #0, 6
    444c:	6174706f 	cmnvs	r4, pc, rrx
    4450:	69006772 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4454:	705f746e 	subsvc	r7, pc, lr, ror #8
    4458:	7065735f 	rsbvc	r7, r5, pc, asr r3
    445c:	5f79625f 	svcpl	0x0079625f
    4460:	63617073 	cmnvs	r1, #115	; 0x73
    4464:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4468:	5f6e5f74 	svcpl	0x006e5f74
    446c:	705f7363 	subsvc	r7, pc, r3, ror #6
    4470:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4474:	00736564 	rsbseq	r6, r3, r4, ror #10
    4478:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    447c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4480:	2f2e2e2f 	svccs	0x002e2e2f
    4484:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4488:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    448c:	2f2e2e2f 	svccs	0x002e2e2f
    4490:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4494:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 42f8 <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    4498:	2f636269 	svccs	0x00636269
    449c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    44a0:	2f656e69 	svccs	0x00656e69
    44a4:	2f6d7261 	svccs	0x006d7261
    44a8:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    44ac:	732d7970 			; <UNDEFINED> instruction: 0x732d7970
    44b0:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    44b4:	646d0063 	strbtvs	r0, [sp], #-99	; 0xffffff9d
    44b8:	64726f5f 	ldrbtvs	r6, [r2], #-3935	; 0xfffff0a1
    44bc:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    44c0:	74737365 	ldrbtvc	r7, [r3], #-869	; 0xfffffc9b
    44c4:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    44c8:	70786573 	rsbsvc	r6, r8, r3, ror r5
    44cc:	72650072 	rsbvc	r0, r5, #114	; 0x72
    44d0:	5f645f61 	svcpl	0x00645f61
    44d4:	00746d66 	rsbseq	r6, r4, r6, ror #26
    44d8:	635f636c 	cmpvs	pc, #108, 6	; 0xb0000001
    44dc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    44e0:	6500545f 	strvs	r5, [r0, #-1119]	; 0xfffffba1
    44e4:	745f6172 	ldrbvc	r6, [pc], #-370	; 44ec <NOROM_SetupSetAonRtcSubSecInc+0x18>
    44e8:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    44ec:	74637700 	strbtvc	r7, [r3], #-1792	; 0xfffff900
    44f0:	00626d6f 	rsbeq	r6, r2, pc, ror #26
    44f4:	5f6e6f6d 	svcpl	0x006e6f6d
    44f8:	756f6874 	strbvc	r6, [pc, #-2164]!	; 3c8c <NOROM_RFCRfTrimRead+0x34>
    44fc:	646e6173 	strbtvs	r6, [lr], #-371	; 0xfffffe8d
    4500:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    4504:	6d610070 	stclvs	0, cr0, [r1, #-448]!	; 0xfffffe40
    4508:	665f6d70 			; <UNDEFINED> instruction: 0x665f6d70
    450c:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    4510:	656d5f63 	strbvs	r5, [sp, #-3939]!	; 0xfffff09d
    4514:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4518:	545f7365 	ldrbpl	r7, [pc], #-869	; 4520 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x24>
    451c:	65657700 	strbvs	r7, [r5, #-1792]!	; 0xfffff900
    4520:	7961646b 	stmdbvc	r1!, {r0, r1, r3, r5, r6, sl, sp, lr}^
    4524:	5f435f00 	svcpl	0x00435f00
    4528:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    452c:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    4530:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    4534:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4538:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    453c:	69726f67 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    4540:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4544:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    4548:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    454c:	6f705f6e 	svcvs	0x00705f6e
    4550:	61006e73 	tstvs	r0, r3, ror lr
    4554:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    4558:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    455c:	47006372 	smlsdxmi	r0, r2, r3, r6
    4560:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    4564:	38203731 	stmdacc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
    4568:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    456c:	31303220 	teqcc	r0, r0, lsr #4
    4570:	30373039 	eorscc	r3, r7, r9, lsr r0
    4574:	72282033 	eorvc	r2, r8, #51	; 0x33
    4578:	61656c65 	cmnvs	r5, r5, ror #24
    457c:	20296573 	eorcs	r6, r9, r3, ror r5
    4580:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
    4584:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
    4588:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    458c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    4590:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4594:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    4598:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
    459c:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    45a0:	6f6c666d 	svcvs	0x006c666d
    45a4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    45a8:	733d6962 	teqvc	sp, #1605632	; 0x188000
    45ac:	2074666f 	rsbscs	r6, r4, pc, ror #12
    45b0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    45b4:	20626d75 	rsbcs	r6, r2, r5, ror sp
    45b8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    45bc:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    45c0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    45c4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    45c8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    45cc:	613d7570 	teqvs	sp, r0, ror r5
    45d0:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    45d4:	20696d64 	rsbcs	r6, r9, r4, ror #26
    45d8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    45dc:	613d6863 	teqvs	sp, r3, ror #16
    45e0:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    45e4:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    45e8:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    45ec:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    45f0:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    45f4:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    45f8:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    45fc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4600:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4604:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4608:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    460c:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    4610:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4614:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4618:	2f302e33 	svccs	0x00302e33
    461c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4620:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    4624:	6f6e2d6d 	svcvs	0x006e2d6d
    4628:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    462c:	2f696261 	svccs	0x00696261
    4630:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4634:	6f6e2f62 	svcvs	0x006e2f62
    4638:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    463c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4640:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4644:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 44c4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>
    4648:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    464c:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4650:	6c006d72 	stcvs	13, cr6, [r0], {114}	; 0x72
    4654:	00306e65 	eorseq	r6, r0, r5, ror #28
    4658:	5f746e69 	svcpl	0x00746e69
    465c:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    4660:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    4664:	00737469 	rsbseq	r7, r3, r9, ror #8
    4668:	30637273 	rsbcc	r7, r3, r3, ror r2
    466c:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    4670:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    4674:	2e006874 	mcrcs	8, 0, r6, cr0, cr4, {3}
    4678:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    467c:	2f2e2e2f 	svccs	0x002e2e2f
    4680:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4684:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4688:	2f2e2e2f 	svccs	0x002e2e2f
    468c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4690:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 44f4 <NOROM_SetupSetAonRtcSubSecInc+0x20>
    4694:	2f636269 	svccs	0x00636269
    4698:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    469c:	722f6269 	eorvc	r6, pc, #-1879048186	; 0x90000006
    46a0:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    46a4:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    46a8:	00646e61 	rsbeq	r6, r4, r1, ror #28
    46ac:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    46b0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    46b4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46b8:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    46bc:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    46c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46c4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46c8:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    46cc:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    46d0:	2f646c69 	svccs	0x00646c69
    46d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    46d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    46dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    46e0:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    46e4:	2f626d75 	svccs	0x00626d75
    46e8:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    46ec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46f0:	2f62696c 	svccs	0x0062696c
    46f4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    46f8:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    46fc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4700:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4704:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4708:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    470c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    4710:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    4714:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4718:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    471c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    4720:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    4724:	2f646c69 	svccs	0x00646c69
    4728:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    472c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4730:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4734:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    4738:	2f626d75 	svccs	0x00626d75
    473c:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    4740:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4744:	2f62696c 	svccs	0x0062696c
    4748:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    474c:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    4750:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4754:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    4758:	61645f65 	cmnvs	r4, r5, ror #30
    475c:	2e006174 	mcrcs	1, 0, r6, cr0, cr4, {3}
    4760:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4764:	2f2e2e2f 	svccs	0x002e2e2f
    4768:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    476c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4770:	2f2e2e2f 	svccs	0x002e2e2f
    4774:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4778:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 45dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xe0>
    477c:	2f636269 	svccs	0x00636269
    4780:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4784:	6d692f74 	stclvs	15, cr2, [r9, #-464]!	; 0xfffffe30
    4788:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    478c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    4790:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4794:	50435f54 	subpl	r5, r3, r4, asr pc
    4798:	6f635f55 	svcvs	0x00635f55
    479c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    47a0:	63373161 	teqvs	r7, #1073741848	; 0x40000018
    47a4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    47a8:	00376178 	eorseq	r6, r7, r8, ror r1
    47ac:	5f617369 	svcpl	0x00617369
    47b0:	5f746962 	svcpl	0x00746962
    47b4:	645f7066 	ldrbvs	r7, [pc], #-102	; 47bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x170>
    47b8:	61006c62 	tstvs	r0, r2, ror #24
    47bc:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    47c0:	5f686372 	svcpl	0x00686372
    47c4:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    47c8:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
    47cc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47d0:	50435f54 	subpl	r5, r3, r4, asr pc
    47d4:	6f635f55 	svcvs	0x00635f55
    47d8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    47dc:	0033326d 	eorseq	r3, r3, sp, ror #4
    47e0:	5f4d5241 	svcpl	0x004d5241
    47e4:	54005145 	strpl	r5, [r0], #-325	; 0xfffffebb
    47e8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47ec:	50435f54 	subpl	r5, r3, r4, asr pc
    47f0:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    47f4:	3531316d 	ldrcc	r3, [r1, #-365]!	; 0xfffffe93
    47f8:	66327436 			; <UNDEFINED> instruction: 0x66327436
    47fc:	73690073 	cmnvc	r9, #115	; 0x73
    4800:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4804:	68745f74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4808:	00626d75 	rsbeq	r6, r2, r5, ror sp
    480c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4810:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4814:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4818:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    481c:	37356178 			; <UNDEFINED> instruction: 0x37356178
    4820:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4824:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4828:	5f5f0033 	svcpl	0x005f0033
    482c:	646c756d 	strbtvs	r7, [ip], #-1389	; 0xfffffa93
    4830:	42003369 	andmi	r3, r0, #-1543503871	; 0xa4000001
    4834:	5f455341 	svcpl	0x00455341
    4838:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    483c:	5f4d385f 	svcpl	0x004d385f
    4840:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4844:	52415400 	subpl	r5, r1, #0, 8
    4848:	5f544547 	svcpl	0x00544547
    484c:	5f555043 	svcpl	0x00555043
    4850:	386d7261 	stmdacc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4854:	54003031 	strpl	r3, [r0], #-49	; 0xffffffcf
    4858:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    485c:	50435f54 	subpl	r5, r3, r4, asr pc
    4860:	67785f55 			; <UNDEFINED> instruction: 0x67785f55
    4864:	31656e65 	cmncc	r5, r5, ror #28
    4868:	4d524100 	ldfmie	f4, [r2, #-0]
    486c:	5343505f 	movtpl	r5, #12383	; 0x305f
    4870:	5041415f 	subpl	r4, r1, pc, asr r1
    4874:	495f5343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    4878:	584d4d57 	stmdapl	sp, {r0, r1, r2, r4, r6, r8, sl, fp, lr}^
    487c:	41420054 	qdaddmi	r0, r4, r2
    4880:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4884:	5f484352 	svcpl	0x00484352
    4888:	41420030 	cmpmi	r2, r0, lsr r0
    488c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4890:	5f484352 	svcpl	0x00484352
    4894:	41420032 	cmpmi	r2, r2, lsr r0
    4898:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    489c:	5f484352 	svcpl	0x00484352
    48a0:	41420033 	cmpmi	r2, r3, lsr r0
    48a4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    48a8:	5f484352 	svcpl	0x00484352
    48ac:	41420034 	cmpmi	r2, r4, lsr r0
    48b0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    48b4:	5f484352 	svcpl	0x00484352
    48b8:	41420036 	cmpmi	r2, r6, lsr r0
    48bc:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    48c0:	5f484352 	svcpl	0x00484352
    48c4:	41540037 	cmpmi	r4, r7, lsr r0
    48c8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    48cc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    48d0:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    48d4:	00656c61 	rsbeq	r6, r5, r1, ror #24
    48d8:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    48dc:	61736900 	cmnvs	r3, r0, lsl #18
    48e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    48e4:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    48e8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    48ec:	52415400 	subpl	r5, r1, #0, 8
    48f0:	5f544547 	svcpl	0x00544547
    48f4:	5f555043 	svcpl	0x00555043
    48f8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    48fc:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4900:	53550033 	cmppl	r5, #51	; 0x33
    4904:	70797449 	rsbsvc	r7, r9, r9, asr #8
    4908:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    490c:	2f2e2e2f 	svccs	0x002e2e2f
    4910:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4914:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4918:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    491c:	2f636367 	svccs	0x00636367
    4920:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4924:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    4928:	41540063 	cmpmi	r4, r3, rrx
    492c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4930:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4934:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4938:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    493c:	73690069 	cmnvc	r9, #105	; 0x69
    4940:	6f6e5f61 	svcvs	0x006e5f61
    4944:	00746962 	rsbseq	r6, r4, r2, ror #18
    4948:	47524154 			; <UNDEFINED> instruction: 0x47524154
    494c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4950:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4954:	31316d72 	teqcc	r1, r2, ror sp
    4958:	7a6a3637 	bvc	1a9223c <__ccfg+0x1a72294>
    495c:	69007366 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    4960:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4964:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
    4968:	32767066 	rsbscc	r7, r6, #102	; 0x66
    496c:	4d524100 	ldfmie	f4, [r2, #-0]
    4970:	5343505f 	movtpl	r5, #12383	; 0x305f
    4974:	4b4e555f 	blmi	1399ef8 <__ccfg+0x1379f50>
    4978:	4e574f4e 	cdpmi	15, 5, cr4, cr7, cr14, {2}
    497c:	52415400 	subpl	r5, r1, #0, 8
    4980:	5f544547 	svcpl	0x00544547
    4984:	5f555043 	svcpl	0x00555043
    4988:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    498c:	41420065 	cmpmi	r2, r5, rrx
    4990:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4994:	5f484352 	svcpl	0x00484352
    4998:	4a455435 	bmi	1159a74 <__ccfg+0x1139acc>
    499c:	6d726100 	ldfvse	f6, [r2, #-0]
    49a0:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    49a4:	735f6d73 	cmpvc	pc, #7360	; 0x1cc0
    49a8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    49ac:	6d726100 	ldfvse	f6, [r2, #-0]
    49b0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    49b4:	65743568 	ldrbvs	r3, [r4, #-1384]!	; 0xfffffa98
    49b8:	736e7500 	cmnvc	lr, #0, 10
    49bc:	5f636570 	svcpl	0x00636570
    49c0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    49c4:	0073676e 	rsbseq	r6, r3, lr, ror #14
    49c8:	5f617369 	svcpl	0x00617369
    49cc:	5f746962 	svcpl	0x00746962
    49d0:	00636573 	rsbeq	r6, r3, r3, ror r5
    49d4:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    49d8:	61745f7a 	cmnvs	r4, sl, ror pc
    49dc:	52410062 	subpl	r0, r1, #98	; 0x62
    49e0:	43565f4d 	cmpmi	r6, #308	; 0x134
    49e4:	6d726100 	ldfvse	f6, [r2, #-0]
    49e8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    49ec:	73785f68 	cmnvc	r8, #104, 30	; 0x1a0
    49f0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    49f4:	4d524100 	ldfmie	f4, [r2, #-0]
    49f8:	00454c5f 	subeq	r4, r5, pc, asr ip
    49fc:	6e755744 	cdpvs	7, 7, cr5, cr5, cr4, {2}
    4a00:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    4a04:	5f4d5241 	svcpl	0x004d5241
    4a08:	41005356 	tstmi	r0, r6, asr r3
    4a0c:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    4a10:	72610045 	rsbvc	r0, r1, #69	; 0x45
    4a14:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4a18:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    4a1c:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    4a20:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    4a24:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 4a2c <memcpy+0x48>
    4a28:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    4a2c:	6f6c6620 	svcvs	0x006c6620
    4a30:	54007461 	strpl	r7, [r0], #-1121	; 0xfffffb9f
    4a34:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a38:	50435f54 	subpl	r5, r3, r4, asr pc
    4a3c:	6f635f55 	svcvs	0x00635f55
    4a40:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a44:	00353161 	eorseq	r3, r5, r1, ror #2
    4a48:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a4c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a50:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4a54:	36323761 	ldrtcc	r3, [r2], -r1, ror #14
    4a58:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4a5c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a60:	50435f54 	subpl	r5, r3, r4, asr pc
    4a64:	6f635f55 	svcvs	0x00635f55
    4a68:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a6c:	00373161 	eorseq	r3, r7, r1, ror #2
    4a70:	5f4d5241 	svcpl	0x004d5241
    4a74:	54005447 	strpl	r5, [r0], #-1095	; 0xfffffbb9
    4a78:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a7c:	50435f54 	subpl	r5, r3, r4, asr pc
    4a80:	656e5f55 	strbvs	r5, [lr, #-3925]!	; 0xfffff0ab
    4a84:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    4a88:	316e6573 	smccc	58963	; 0xe653
    4a8c:	52415400 	subpl	r5, r1, #0, 8
    4a90:	5f544547 	svcpl	0x00544547
    4a94:	5f555043 	svcpl	0x00555043
    4a98:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a9c:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    4aa0:	41420066 	cmpmi	r2, r6, rrx
    4aa4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4aa8:	5f484352 	svcpl	0x00484352
    4aac:	004d4537 	subeq	r4, sp, r7, lsr r5
    4ab0:	20554e47 	subscs	r4, r5, r7, asr #28
    4ab4:	20373143 	eorscs	r3, r7, r3, asr #2
    4ab8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4abc:	30322031 	eorscc	r2, r2, r1, lsr r0
    4ac0:	30313931 	eorscc	r3, r1, r1, lsr r9
    4ac4:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    4ac8:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    4acc:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4ad0:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    4ad4:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
    4ad8:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
    4adc:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    4ae0:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    4ae4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4ae8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    4aec:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
    4af0:	205d3939 	subscs	r3, sp, r9, lsr r9
    4af4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4af8:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4afc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4b00:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    4b04:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4b08:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    4b0c:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    4b10:	613d7570 	teqvs	sp, r0, ror r5
    4b14:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4b18:	20696d64 	rsbcs	r6, r9, r4, ror #26
    4b1c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    4b20:	613d6863 	teqvs	sp, r3, ror #16
    4b24:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    4b28:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    4b2c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4b30:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b34:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b38:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b3c:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b40:	69756266 	ldmdbvs	r5!, {r1, r2, r5, r6, r9, sp, lr}^
    4b44:	6e69646c 	cdpvs	4, 6, cr6, cr9, cr12, {3}
    4b48:	696c2d67 	stmdbvs	ip!, {r0, r1, r2, r5, r6, r8, sl, fp, sp}^
    4b4c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4b50:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    4b54:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    4b58:	2d6b6361 	stclcs	3, cr6, [fp, #-388]!	; 0xfffffe7c
    4b5c:	746f7270 	strbtvc	r7, [pc], #-624	; 4b64 <__aeabi_lmul+0x88>
    4b60:	6f746365 	svcvs	0x00746365
    4b64:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
    4b68:	692d6f6e 	pushvs	{r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4b6c:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
    4b70:	662d2065 	strtvs	r2, [sp], -r5, rrx
    4b74:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4b78:	696c6962 	stmdbvs	ip!, {r1, r5, r6, r8, fp, sp, lr}^
    4b7c:	683d7974 	ldmdavs	sp!, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    4b80:	65646469 	strbvs	r6, [r4, #-1129]!	; 0xfffffb97
    4b84:	4154006e 	cmpmi	r4, lr, rrx
    4b88:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4b8c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4b90:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4b94:	61786574 	cmnvs	r8, r4, ror r5
    4b98:	68003231 	stmdavs	r0, {r0, r4, r5, r9, ip, sp}
    4b9c:	76687361 	strbtvc	r7, [r8], -r1, ror #6
    4ba0:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 4ba8 <__aeabi_lmul+0xcc>
    4ba4:	53414200 	movtpl	r4, #4608	; 0x1200
    4ba8:	52415f45 	subpl	r5, r1, #276	; 0x114
    4bac:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    4bb0:	69005a4b 	stmdbvs	r0, {r0, r1, r3, r6, r9, fp, ip, lr}
    4bb4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4bb8:	00737469 	rsbseq	r7, r3, r9, ror #8
    4bbc:	5f6d7261 	svcpl	0x006d7261
    4bc0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4bc4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4bc8:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    4bcc:	61007669 	tstvs	r0, r9, ror #12
    4bd0:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    4bd4:	645f7570 	ldrbvs	r7, [pc], #-1392	; 4bdc <__aeabi_lmul+0x100>
    4bd8:	00637365 	rsbeq	r7, r3, r5, ror #6
    4bdc:	5f617369 	svcpl	0x00617369
    4be0:	5f746962 	svcpl	0x00746962
    4be4:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    4be8:	4d524100 	ldfmie	f4, [r2, #-0]
    4bec:	0049485f 	subeq	r4, r9, pc, asr r8
    4bf0:	5f617369 	svcpl	0x00617369
    4bf4:	5f746962 	svcpl	0x00746962
    4bf8:	76696461 	strbtvc	r6, [r9], -r1, ror #8
    4bfc:	52415400 	subpl	r5, r1, #0, 8
    4c00:	5f544547 	svcpl	0x00544547
    4c04:	5f555043 	svcpl	0x00555043
    4c08:	316d7261 	cmncc	sp, r1, ror #4
    4c0c:	6a363331 	bvs	d918d8 <__ccfg+0xd71930>
    4c10:	41540073 	cmpmi	r4, r3, ror r0
    4c14:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c18:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c1c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c20:	41540038 	cmpmi	r4, r8, lsr r0
    4c24:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c28:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c2c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c30:	41540039 	cmpmi	r4, r9, lsr r0
    4c34:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c38:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c3c:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4c40:	61003632 	tstvs	r0, r2, lsr r6
    4c44:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4c48:	5f686372 	svcpl	0x00686372
    4c4c:	65736d63 	ldrbvs	r6, [r3, #-3427]!	; 0xfffff29d
    4c50:	52415400 	subpl	r5, r1, #0, 8
    4c54:	5f544547 	svcpl	0x00544547
    4c58:	5f555043 	svcpl	0x00555043
    4c5c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c60:	346d7865 	strbtcc	r7, [sp], #-2149	; 0xfffff79b
    4c64:	52415400 	subpl	r5, r1, #0, 8
    4c68:	5f544547 	svcpl	0x00544547
    4c6c:	5f555043 	svcpl	0x00555043
    4c70:	316d7261 	cmncc	sp, r1, ror #4
    4c74:	54006530 	strpl	r6, [r0], #-1328	; 0xfffffad0
    4c78:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c7c:	50435f54 	subpl	r5, r3, r4, asr pc
    4c80:	6f635f55 	svcvs	0x00635f55
    4c84:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c88:	6100376d 	tstvs	r0, sp, ror #14
    4c8c:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    4c90:	5f646e6f 	svcpl	0x00646e6f
    4c94:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    4c98:	4d524100 	ldfmie	f4, [r2, #-0]
    4c9c:	5343505f 	movtpl	r5, #12383	; 0x305f
    4ca0:	5041415f 	subpl	r4, r1, pc, asr r1
    4ca4:	69005343 	stmdbvs	r0, {r0, r1, r6, r8, r9, ip, lr}
    4ca8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4cac:	615f7469 	cmpvs	pc, r9, ror #8
    4cb0:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4cb4:	4200325f 	andmi	r3, r0, #-268435451	; 0xf0000005
    4cb8:	5f455341 	svcpl	0x00455341
    4cbc:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4cc0:	004d335f 	subeq	r3, sp, pc, asr r3
    4cc4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4cc8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ccc:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4cd0:	31376d72 	teqcc	r7, r2, ror sp
    4cd4:	61007430 	tstvs	r0, r0, lsr r4
    4cd8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4cdc:	5f686372 	svcpl	0x00686372
    4ce0:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    4ce4:	00327478 	eorseq	r7, r2, r8, ror r4
    4ce8:	5f617369 	svcpl	0x00617369
    4cec:	5f6d756e 	svcpl	0x006d756e
    4cf0:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4cf4:	52415400 	subpl	r5, r1, #0, 8
    4cf8:	5f544547 	svcpl	0x00544547
    4cfc:	5f555043 	svcpl	0x00555043
    4d00:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4d04:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4d08:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    4d0c:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4d10:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4d14:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    4d18:	41540079 	cmpmi	r4, r9, ror r0
    4d1c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d20:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d24:	7978655f 	ldmdbvc	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    4d28:	6d736f6e 	ldclvs	15, cr6, [r3, #-440]!	; 0xfffffe48
    4d2c:	41540031 	cmpmi	r4, r1, lsr r0
    4d30:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d34:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d38:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d3c:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    4d40:	69003235 	stmdbvs	r0, {r0, r2, r4, r5, r9, ip, sp}
    4d44:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d48:	745f7469 	ldrbvc	r7, [pc], #-1129	; 4d50 <__aeabi_lmul+0x274>
    4d4c:	00766964 	rsbseq	r6, r6, r4, ror #18
    4d50:	66657270 			; <UNDEFINED> instruction: 0x66657270
    4d54:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    4d58:	5f6e6f65 	svcpl	0x006e6f65
    4d5c:	5f726f66 	svcpl	0x00726f66
    4d60:	69623436 	stmdbvs	r2!, {r1, r2, r4, r5, sl, ip, sp}^
    4d64:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4d68:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d6c:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4d70:	66363170 			; <UNDEFINED> instruction: 0x66363170
    4d74:	54006c6d 	strpl	r6, [r0], #-3181	; 0xfffff393
    4d78:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d7c:	50435f54 	subpl	r5, r3, r4, asr pc
    4d80:	6f635f55 	svcvs	0x00635f55
    4d84:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d88:	00323361 	eorseq	r3, r2, r1, ror #6
    4d8c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d90:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d94:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d98:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d9c:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    4da0:	61736900 	cmnvs	r3, r0, lsl #18
    4da4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4da8:	3170665f 	cmncc	r0, pc, asr r6
    4dac:	6e6f6336 	mcrvs	3, 3, r6, cr15, cr6, {1}
    4db0:	6e750076 	mrcvs	0, 3, r0, cr5, cr6, {3}
    4db4:	63657073 	cmnvs	r5, #115	; 0x73
    4db8:	74735f76 	ldrbtvc	r5, [r3], #-3958	; 0xfffff08a
    4dbc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4dc0:	41540073 	cmpmi	r4, r3, ror r0
    4dc4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dc8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4dcc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4dd0:	36353131 			; <UNDEFINED> instruction: 0x36353131
    4dd4:	00733274 	rsbseq	r3, r3, r4, ror r2
    4dd8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ddc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4de0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4de4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4de8:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    4dec:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4df0:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4df4:	41540035 	cmpmi	r4, r5, lsr r0
    4df8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dfc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4e00:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4e04:	65743630 	ldrbvs	r3, [r4, #-1584]!	; 0xfffff9d0
    4e08:	52415400 	subpl	r5, r1, #0, 8
    4e0c:	5f544547 	svcpl	0x00544547
    4e10:	5f555043 	svcpl	0x00555043
    4e14:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4e18:	6a653632 	bvs	19526e8 <__ccfg+0x1932740>
    4e1c:	41420073 	hvcmi	8195	; 0x2003
    4e20:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4e24:	5f484352 	svcpl	0x00484352
    4e28:	69005434 	stmdbvs	r0, {r2, r4, r5, sl, ip, lr}
    4e2c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e30:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    4e34:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    4e38:	7261006f 	rsbvc	r0, r1, #111	; 0x6f
    4e3c:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    4e40:	695f7367 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4e44:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    4e48:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    4e4c:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    4e50:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e54:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    4e58:	41420062 	cmpmi	r2, r2, rrx
    4e5c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4e60:	5f484352 	svcpl	0x00484352
    4e64:	00455435 	subeq	r5, r5, r5, lsr r4
    4e68:	5f617369 	svcpl	0x00617369
    4e6c:	74616566 	strbtvc	r6, [r1], #-1382	; 0xfffffa9a
    4e70:	00657275 	rsbeq	r7, r5, r5, ror r2
    4e74:	5f617369 	svcpl	0x00617369
    4e78:	5f746962 	svcpl	0x00746962
    4e7c:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4e80:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4e84:	6d726100 	ldfvse	f6, [r2, #-0]
    4e88:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    4e8c:	756f5f67 	strbvc	r5, [pc, #-3943]!	; 3f2d <TrimAfterColdResetWakeupFromShutDown+0x31>
    4e90:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    4e94:	6a626f5f 	bvs	18a0c18 <__ccfg+0x1880c70>
    4e98:	5f746365 	svcpl	0x00746365
    4e9c:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    4ea0:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
    4ea4:	685f7365 	ldmdavs	pc, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4ea8:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    4eac:	5f617369 	svcpl	0x00617369
    4eb0:	5f746962 	svcpl	0x00746962
    4eb4:	645f7066 	ldrbvs	r7, [pc], #-102	; 4ebc <__aeabi_lmul+0x3e0>
    4eb8:	41003233 	tstmi	r0, r3, lsr r2
    4ebc:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    4ec0:	73690045 	cmnvc	r9, #69	; 0x45
    4ec4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ec8:	65625f74 	strbvs	r5, [r2, #-3956]!	; 0xfffff08c
    4ecc:	41540038 	cmpmi	r4, r8, lsr r0
    4ed0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4ed4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ed8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4edc:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4ee0:	00737a6a 	rsbseq	r7, r3, sl, ror #20
    4ee4:	636f7270 	cmnvs	pc, #112, 4
    4ee8:	6f737365 	svcvs	0x00737365
    4eec:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ef0:	61006570 	tstvs	r0, r0, ror r5
    4ef4:	665f6c6c 	ldrbvs	r6, [pc], -ip, ror #24
    4ef8:	00737570 	rsbseq	r7, r3, r0, ror r5
    4efc:	5f6d7261 	svcpl	0x006d7261
    4f00:	00736370 	rsbseq	r6, r3, r0, ror r3
    4f04:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4f08:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4f0c:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4f10:	6d726100 	ldfvse	f6, [r2, #-0]
    4f14:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4f18:	00743468 	rsbseq	r3, r4, r8, ror #8
    4f1c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4f20:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4f24:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4f28:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4f2c:	36376178 			; <UNDEFINED> instruction: 0x36376178
    4f30:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f34:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4f38:	72610035 	rsbvc	r0, r1, #53	; 0x35
    4f3c:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4f40:	775f656e 	ldrbvc	r6, [pc, -lr, ror #10]
    4f44:	00667562 	rsbeq	r7, r6, r2, ror #10
    4f48:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4f4c:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    4f50:	73690068 	cmnvc	r9, #104	; 0x68
    4f54:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f58:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    4f5c:	5f6b7269 	svcpl	0x006b7269
    4f60:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    4f64:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    4f68:	5f656c69 	svcpl	0x00656c69
    4f6c:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    4f70:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f74:	50435f54 	subpl	r5, r3, r4, asr pc
    4f78:	6f635f55 	svcvs	0x00635f55
    4f7c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f80:	5400306d 	strpl	r3, [r0], #-109	; 0xffffff93
    4f84:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f88:	50435f54 	subpl	r5, r3, r4, asr pc
    4f8c:	6f635f55 	svcvs	0x00635f55
    4f90:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f94:	5400316d 	strpl	r3, [r0], #-365	; 0xfffffe93
    4f98:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f9c:	50435f54 	subpl	r5, r3, r4, asr pc
    4fa0:	6f635f55 	svcvs	0x00635f55
    4fa4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4fa8:	6900336d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    4fac:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fb0:	615f7469 	cmpvs	pc, r9, ror #8
    4fb4:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fb8:	6100315f 	tstvs	r0, pc, asr r1
    4fbc:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4fc0:	5f686372 	svcpl	0x00686372
    4fc4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    4fc8:	61736900 	cmnvs	r3, r0, lsl #18
    4fcc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fd0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fd4:	335f3876 	cmpcc	pc, #7733248	; 0x760000
    4fd8:	61736900 	cmnvs	r3, r0, lsl #18
    4fdc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fe0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fe4:	345f3876 	ldrbcc	r3, [pc], #-2166	; 4fec <__aeabi_lmul+0x510>
    4fe8:	61736900 	cmnvs	r3, r0, lsl #18
    4fec:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ff0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ff4:	355f3876 	ldrbcc	r3, [pc, #-2166]	; 4786 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13a>
    4ff8:	52415400 	subpl	r5, r1, #0, 8
    4ffc:	5f544547 	svcpl	0x00544547
    5000:	5f555043 	svcpl	0x00555043
    5004:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5008:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    500c:	41540033 	cmpmi	r4, r3, lsr r0
    5010:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5014:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5018:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    501c:	61786574 	cmnvs	r8, r4, ror r5
    5020:	54003535 	strpl	r3, [r0], #-1333	; 0xfffffacb
    5024:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5028:	50435f54 	subpl	r5, r3, r4, asr pc
    502c:	6f635f55 	svcvs	0x00635f55
    5030:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5034:	00373561 	eorseq	r3, r7, r1, ror #10
    5038:	47524154 			; <UNDEFINED> instruction: 0x47524154
    503c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5040:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 4f08 <__aeabi_lmul+0x42c>
    5044:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    5048:	41540065 	cmpmi	r4, r5, rrx
    504c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5050:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5054:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5058:	6e6f6e5f 	mcrvs	14, 3, r6, cr15, cr15, {2}
    505c:	72610065 	rsbvc	r0, r1, #101	; 0x65
    5060:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5064:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    5068:	006d746f 	rsbeq	r7, sp, pc, ror #8
    506c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5070:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5074:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5078:	30316d72 	eorscc	r6, r1, r2, ror sp
    507c:	6a653632 	bvs	195294c <__ccfg+0x19329a4>
    5080:	41420073 	hvcmi	8195	; 0x2003
    5084:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5088:	5f484352 	svcpl	0x00484352
    508c:	42004a36 	andmi	r4, r0, #221184	; 0x36000
    5090:	5f455341 	svcpl	0x00455341
    5094:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5098:	004b365f 	subeq	r3, fp, pc, asr r6
    509c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    50a0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    50a4:	4d365f48 	ldcmi	15, cr5, [r6, #-288]!	; 0xfffffee0
    50a8:	61736900 	cmnvs	r3, r0, lsl #18
    50ac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    50b0:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    50b4:	0074786d 	rsbseq	r7, r4, sp, ror #16
    50b8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    50bc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    50c0:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    50c4:	31316d72 	teqcc	r1, r2, ror sp
    50c8:	666a3633 			; <UNDEFINED> instruction: 0x666a3633
    50cc:	52410073 	subpl	r0, r1, #115	; 0x73
    50d0:	534c5f4d 	movtpl	r5, #53069	; 0xcf4d
    50d4:	4d524100 	ldfmie	f4, [r2, #-0]
    50d8:	00544c5f 	subseq	r4, r4, pc, asr ip
    50dc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    50e0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    50e4:	5a365f48 	bpl	d9ce0c <__ccfg+0xd7ce64>
    50e8:	4d524100 	ldfmie	f4, [r2, #-0]
    50ec:	5343505f 	movtpl	r5, #12383	; 0x305f
    50f0:	5041415f 	subpl	r4, r1, pc, asr r1
    50f4:	565f5343 	ldrbpl	r5, [pc], -r3, asr #6
    50f8:	54005046 	strpl	r5, [r0], #-70	; 0xffffffba
    50fc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5100:	50435f54 	subpl	r5, r3, r4, asr pc
    5104:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    5108:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    510c:	73690032 	cmnvc	r9, #50	; 0x32
    5110:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5114:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
    5118:	61006e6f 	tstvs	r0, pc, ror #28
    511c:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    5120:	615f7570 	cmpvs	pc, r0, ror r5	; <UNPREDICTABLE>
    5124:	00727474 	rsbseq	r7, r2, r4, ror r4
    5128:	5f617369 	svcpl	0x00617369
    512c:	5f746962 	svcpl	0x00746962
    5130:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5134:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    5138:	47524154 			; <UNDEFINED> instruction: 0x47524154
    513c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5140:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    5144:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    5148:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    514c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5150:	50435f54 	subpl	r5, r3, r4, asr pc
    5154:	616d5f55 	cmnvs	sp, r5, asr pc
    5158:	6c657672 	stclvs	6, cr7, [r5], #-456	; 0xfffffe38
    515c:	6a705f6c 	bvs	1c1cf14 <__ccfg+0x1bfcf6c>
    5160:	74680034 	strbtvc	r0, [r8], #-52	; 0xffffffcc
    5164:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    5168:	5f687361 	svcpl	0x00687361
    516c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    5170:	00726574 	rsbseq	r6, r2, r4, ror r5
    5174:	5f6d7261 	svcpl	0x006d7261
    5178:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    517c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5180:	5f786574 	svcpl	0x00786574
    5184:	69003961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp}
    5188:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    518c:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5190:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    5194:	54003274 	strpl	r3, [r0], #-628	; 0xfffffd8c
    5198:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    519c:	50435f54 	subpl	r5, r3, r4, asr pc
    51a0:	6f635f55 	svcvs	0x00635f55
    51a4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    51a8:	63323761 	teqvs	r2, #25427968	; 0x1840000
    51ac:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    51b0:	33356178 	teqcc	r5, #120, 2
    51b4:	61736900 	cmnvs	r3, r0, lsl #18
    51b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    51bc:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    51c0:	0032626d 	eorseq	r6, r2, sp, ror #4
    51c4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    51c8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    51cc:	41375f48 	teqmi	r7, r8, asr #30
    51d0:	61736900 	cmnvs	r3, r0, lsl #18
    51d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    51d8:	746f645f 	strbtvc	r6, [pc], #-1119	; 51e0 <__aeabi_lmul+0x704>
    51dc:	646f7270 	strbtvs	r7, [pc], #-624	; 51e4 <__aeabi_lmul+0x708>
    51e0:	6d726100 	ldfvse	f6, [r2, #-0]
    51e4:	3170665f 	cmncc	r0, pc, asr r6
    51e8:	79745f36 	ldmdbvc	r4!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    51ec:	6e5f6570 	mrcvs	5, 2, r6, cr15, cr0, {3}
    51f0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    51f4:	5f4d5241 	svcpl	0x004d5241
    51f8:	6100494d 	tstvs	r0, sp, asr #18
    51fc:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5200:	36686372 			; <UNDEFINED> instruction: 0x36686372
    5204:	7261006b 	rsbvc	r0, r1, #107	; 0x6b
    5208:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    520c:	6d366863 	ldcvs	8, cr6, [r6, #-396]!	; 0xfffffe74
    5210:	53414200 	movtpl	r4, #4608	; 0x1200
    5214:	52415f45 	subpl	r5, r1, #276	; 0x114
    5218:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    521c:	5f5f0052 	svcpl	0x005f0052
    5220:	63706f70 	cmnvs	r0, #112, 30	; 0x1c0
    5224:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    5228:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    522c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    5230:	2f646c69 	svccs	0x00646c69
    5234:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5238:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    523c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5240:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5244:	6c472d69 	mcrrvs	13, 6, r2, r7, cr9
    5248:	39546b39 	ldmdbcc	r4, {r0, r3, r4, r5, r8, r9, fp, sp, lr}^
    524c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5250:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5254:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5258:	61652d65 	cmnvs	r5, r5, ror #26
    525c:	392d6962 	pushcc	{r1, r5, r6, r8, fp, sp, lr}
    5260:	3130322d 	teqcc	r0, sp, lsr #4
    5264:	34712d39 	ldrbtcc	r2, [r1], #-3385	; 0xfffff2c7
    5268:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    526c:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    5270:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5274:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5278:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    527c:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    5280:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    5284:	2f70666f 	svccs	0x0070666f
    5288:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    528c:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    5290:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5294:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5298:	0065736d 	rsbeq	r7, r5, sp, ror #6
    529c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    52a0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    52a4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    52a8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    52ac:	33376178 	teqcc	r7, #120, 2
    52b0:	52415400 	subpl	r5, r1, #0, 8
    52b4:	5f544547 	svcpl	0x00544547
    52b8:	5f555043 	svcpl	0x00555043
    52bc:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    52c0:	76636972 			; <UNDEFINED> instruction: 0x76636972
    52c4:	54006137 	strpl	r6, [r0], #-311	; 0xfffffec9
    52c8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    52cc:	50435f54 	subpl	r5, r3, r4, asr pc
    52d0:	6f635f55 	svcvs	0x00635f55
    52d4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    52d8:	00363761 	eorseq	r3, r6, r1, ror #14
    52dc:	5f6d7261 	svcpl	0x006d7261
    52e0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    52e4:	5f6f6e5f 	svcpl	0x006f6e5f
    52e8:	616c6f76 	smcvs	50934	; 0xc6f6
    52ec:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
    52f0:	0065635f 	rsbeq	r6, r5, pc, asr r3
    52f4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    52f8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    52fc:	41385f48 	teqmi	r8, r8, asr #30
    5300:	61736900 	cmnvs	r3, r0, lsl #18
    5304:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5308:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    530c:	00743576 	rsbseq	r3, r4, r6, ror r5
    5310:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5314:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5318:	52385f48 	eorspl	r5, r8, #72, 30	; 0x120
    531c:	52415400 	subpl	r5, r1, #0, 8
    5320:	5f544547 	svcpl	0x00544547
    5324:	5f555043 	svcpl	0x00555043
    5328:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    532c:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    5330:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    5334:	61786574 	cmnvs	r8, r4, ror r5
    5338:	41003533 	tstmi	r0, r3, lsr r5
    533c:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    5340:	72610056 	rsbvc	r0, r1, #86	; 0x56
    5344:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5348:	00346863 	eorseq	r6, r4, r3, ror #16
    534c:	5f6d7261 	svcpl	0x006d7261
    5350:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5354:	72610036 	rsbvc	r0, r1, #54	; 0x36
    5358:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    535c:	00376863 	eorseq	r6, r7, r3, ror #16
    5360:	5f6d7261 	svcpl	0x006d7261
    5364:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5368:	49440038 	stmdbmi	r4, {r3, r4, r5}^
    536c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5370:	6d726100 	ldfvse	f6, [r2, #-0]
    5374:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    5378:	73785f65 	cmnvc	r8, #404	; 0x194
    537c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    5380:	73574400 	cmpvc	r7, #0, 8
    5384:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    5388:	616d0074 	smcvs	53252	; 0xd004
    538c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    5390:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    5394:	745f7473 	ldrbvc	r7, [pc], #-1139	; 539c <__button_list+0x1a>
    5398:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    539c:	75687400 	strbvc	r7, [r8, #-1024]!	; 0xfffffc00
    53a0:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    53a4:	5f6c6c61 	svcpl	0x006c6c61
    53a8:	5f616976 	svcpl	0x00616976
    53ac:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    53b0:	7369006c 	cmnvc	r9, #108	; 0x6c
    53b4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    53b8:	70665f74 	rsbvc	r5, r6, r4, ror pc
    53bc:	69003576 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp}
    53c0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    53c4:	615f7469 	cmpvs	pc, r9, ror #8
    53c8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    53cc:	4154006b 	cmpmi	r4, fp, rrx
    53d0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53d4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53d8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53dc:	61786574 	cmnvs	r8, r4, ror r5
    53e0:	41540037 	cmpmi	r4, r7, lsr r0
    53e4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53e8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53ec:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53f0:	61786574 	cmnvs	r8, r4, ror r5
    53f4:	41540038 	cmpmi	r4, r8, lsr r0
    53f8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53fc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5400:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5404:	61786574 	cmnvs	r8, r4, ror r5
    5408:	52410039 	subpl	r0, r1, #57	; 0x39
    540c:	43505f4d 	cmpmi	r0, #308	; 0x134
    5410:	50415f53 	subpl	r5, r1, r3, asr pc
    5414:	41005343 	tstmi	r0, r3, asr #6
    5418:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    541c:	415f5343 	cmpmi	pc, r3, asr #6
    5420:	53435054 	movtpl	r5, #12372	; 0x3054
    5424:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 542c <patchGenfskRfe+0x30>
    5428:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    542c:	756f6420 	strbvc	r6, [pc, #-1056]!	; 5014 <__aeabi_lmul+0x538>
    5430:	00656c62 	rsbeq	r6, r5, r2, ror #24
    5434:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5438:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    543c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5440:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5444:	33376178 	teqcc	r7, #120, 2
    5448:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    544c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5450:	41540033 	cmpmi	r4, r3, lsr r0
    5454:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5458:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    545c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5460:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    5464:	756c7030 	strbvc	r7, [ip, #-48]!	; 0xffffffd0
    5468:	72610073 	rsbvc	r0, r1, #115	; 0x73
    546c:	63635f6d 	cmnvs	r3, #436	; 0x1b4
    5470:	61736900 	cmnvs	r3, r0, lsl #18
    5474:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5478:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    547c:	00656c61 	rsbeq	r6, r5, r1, ror #24
    5480:	6e6f645f 	mcrvs	4, 3, r6, cr15, cr15, {2}
    5484:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
    5488:	72745f65 	rsbsvc	r5, r4, #404	; 0x194
    548c:	685f6565 	ldmdavs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    5490:	5f657265 	svcpl	0x00657265
    5494:	52415400 	subpl	r5, r1, #0, 8
    5498:	5f544547 	svcpl	0x00544547
    549c:	5f555043 	svcpl	0x00555043
    54a0:	316d7261 	cmncc	sp, r1, ror #4
    54a4:	6d647430 	cfstrdvs	mvd7, [r4, #-192]!	; 0xffffff40
    54a8:	41540069 	cmpmi	r4, r9, rrx
    54ac:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    54b0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    54b4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    54b8:	61786574 	cmnvs	r8, r4, ror r5
    54bc:	61620035 	cmnvs	r2, r5, lsr r0
    54c0:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    54c4:	69686372 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    54c8:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    54cc:	00657275 	rsbeq	r7, r5, r5, ror r2
    54d0:	5f6d7261 	svcpl	0x006d7261
    54d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    54d8:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    54dc:	52415400 	subpl	r5, r1, #0, 8
    54e0:	5f544547 	svcpl	0x00544547
    54e4:	5f555043 	svcpl	0x00555043
    54e8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    54ec:	316d7865 	cmncc	sp, r5, ror #16
    54f0:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    54f4:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    54f8:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    54fc:	72610079 	rsbvc	r0, r1, #121	; 0x79
    5500:	75635f6d 	strbvc	r5, [r3, #-3949]!	; 0xfffff093
    5504:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    5508:	63635f74 	cmnvs	r3, #116, 30	; 0x1d0
    550c:	61736900 	cmnvs	r3, r0, lsl #18
    5510:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5514:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    5518:	41003233 	tstmi	r0, r3, lsr r2
    551c:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5520:	7369004c 	cmnvc	r9, #76	; 0x4c
    5524:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5528:	66765f74 	uhsub16vs	r5, r6, r4
    552c:	00337670 	eorseq	r7, r3, r0, ror r6
    5530:	5f617369 	svcpl	0x00617369
    5534:	5f746962 	svcpl	0x00746962
    5538:	76706676 			; <UNDEFINED> instruction: 0x76706676
    553c:	41420034 	cmpmi	r2, r4, lsr r0
    5540:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5544:	5f484352 	svcpl	0x00484352
    5548:	00325436 	eorseq	r5, r2, r6, lsr r4
    554c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5550:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5554:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    5558:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    555c:	4154004e 	cmpmi	r4, lr, asr #32
    5560:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5564:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5568:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    556c:	6d647439 	cfstrdvs	mvd7, [r4, #-228]!	; 0xffffff1c
    5570:	52410069 	subpl	r0, r1, #105	; 0x69
    5574:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
    5578:	53414200 	movtpl	r4, #4608	; 0x1200
    557c:	52415f45 	subpl	r5, r1, #276	; 0x114
    5580:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    5584:	7261004d 	rsbvc	r0, r1, #77	; 0x4d
    5588:	61745f6d 	cmnvs	r4, sp, ror #30
    558c:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    5590:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
    5594:	61006c65 	tstvs	r0, r5, ror #24
    5598:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 55a0 <patchGenfskRfe+0x1a4>
    559c:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    55a0:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    55a4:	54006e73 	strpl	r6, [r0], #-3699	; 0xfffff18d
    55a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55ac:	50435f54 	subpl	r5, r3, r4, asr pc
    55b0:	6f635f55 	svcvs	0x00635f55
    55b4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55b8:	54003572 	strpl	r3, [r0], #-1394	; 0xfffffa8e
    55bc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55c0:	50435f54 	subpl	r5, r3, r4, asr pc
    55c4:	6f635f55 	svcvs	0x00635f55
    55c8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55cc:	54003772 	strpl	r3, [r0], #-1906	; 0xfffff88e
    55d0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55d4:	50435f54 	subpl	r5, r3, r4, asr pc
    55d8:	6f635f55 	svcvs	0x00635f55
    55dc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55e0:	69003872 	stmdbvs	r0, {r1, r4, r5, r6, fp, ip, sp}
    55e4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    55e8:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    55ec:	00656170 	rsbeq	r6, r5, r0, ror r1
    55f0:	5f617369 	svcpl	0x00617369
    55f4:	5f746962 	svcpl	0x00746962
    55f8:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    55fc:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    5600:	6b36766d 	blvs	da2fbc <__ccfg+0xd83014>
    5604:	7369007a 	cmnvc	r9, #122	; 0x7a
    5608:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    560c:	6f6e5f74 	svcvs	0x006e5f74
    5610:	69006d74 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
    5614:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5618:	615f7469 	cmpvs	pc, r9, ror #8
    561c:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    5620:	61736900 	cmnvs	r3, r0, lsl #18
    5624:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5628:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    562c:	69003676 	stmdbvs	r0, {r1, r2, r4, r5, r6, r9, sl, ip, sp}
    5630:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5634:	615f7469 	cmpvs	pc, r9, ror #8
    5638:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    563c:	61736900 	cmnvs	r3, r0, lsl #18
    5640:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5644:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5648:	5f003876 	svcpl	0x00003876
    564c:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    5650:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    5654:	7874725f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
    5658:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    565c:	55005f65 	strpl	r5, [r0, #-3941]	; 0xfffff09b
    5660:	79744951 	ldmdbvc	r4!, {r0, r4, r6, r8, fp, lr}^
    5664:	69006570 	stmdbvs	r0, {r4, r5, r6, r8, sl, sp, lr}
    5668:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    566c:	615f7469 	cmpvs	pc, r9, ror #8
    5670:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    5674:	61006574 	tstvs	r0, r4, ror r5
    5678:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5680 <patchGenfskRfe+0x284>
    567c:	00656e75 	rsbeq	r6, r5, r5, ror lr
    5680:	5f6d7261 	svcpl	0x006d7261
    5684:	5f707063 	svcpl	0x00707063
    5688:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    568c:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    5690:	4154006b 	cmpmi	r4, fp, rrx
    5694:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5698:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    569c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    56a0:	74303239 	ldrtvc	r3, [r0], #-569	; 0xfffffdc7
    56a4:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 47ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x160>
    56a8:	74680068 	strbtvc	r0, [r8], #-104	; 0xffffff98
    56ac:	655f6261 	ldrbvs	r6, [pc, #-609]	; 5453 <patchGenfskRfe+0x57>
    56b0:	41540071 	cmpmi	r4, r1, ror r0
    56b4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    56b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    56bc:	3561665f 	strbcc	r6, [r1, #-1631]!	; 0xfffff9a1
    56c0:	5f003632 	svcpl	0x00003632
    56c4:	006c755f 	rsbeq	r7, ip, pc, asr r5
    56c8:	5f6d7261 	svcpl	0x006d7261
    56cc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    56d0:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    56d4:	685f626d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    56d8:	76696477 			; <UNDEFINED> instruction: 0x76696477
    56dc:	61746800 	cmnvs	r4, r0, lsl #16
    56e0:	71655f62 	cmnvc	r5, r2, ror #30
    56e4:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    56e8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    56ec:	6d726100 	ldfvse	f6, [r2, #-0]
    56f0:	6369705f 	cmnvs	r9, #95	; 0x5f
    56f4:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    56f8:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    56fc:	41540072 	cmpmi	r4, r2, ror r0
    5700:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5704:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5708:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    570c:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    5710:	616d7330 	cmnvs	sp, r0, lsr r3
    5714:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
    5718:	7069746c 	rsbvc	r7, r9, ip, ror #8
    571c:	5400796c 	strpl	r7, [r0], #-2412	; 0xfffff694
    5720:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5724:	50435f54 	subpl	r5, r3, r4, asr pc
    5728:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    572c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    5730:	66766f6e 	ldrbtvs	r6, [r6], -lr, ror #30
    5734:	73690070 	cmnvc	r9, #112	; 0x70
    5738:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    573c:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    5740:	5f6b7269 	svcpl	0x006b7269
    5744:	5f336d63 	svcpl	0x00336d63
    5748:	6472646c 	ldrbtvs	r6, [r2], #-1132	; 0xfffffb94
    574c:	4d524100 	ldfmie	f4, [r2, #-0]
    5750:	0043435f 	subeq	r4, r3, pc, asr r3
    5754:	5f6d7261 	svcpl	0x006d7261
    5758:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    575c:	00325f38 	eorseq	r5, r2, r8, lsr pc
    5760:	5f6d7261 	svcpl	0x006d7261
    5764:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5768:	00335f38 	eorseq	r5, r3, r8, lsr pc
    576c:	5f6d7261 	svcpl	0x006d7261
    5770:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5774:	00345f38 	eorseq	r5, r4, r8, lsr pc
    5778:	47524154 			; <UNDEFINED> instruction: 0x47524154
    577c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5780:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    5784:	3236706d 	eorscc	r7, r6, #109	; 0x6d
    5788:	52410036 	subpl	r0, r1, #54	; 0x36
    578c:	53435f4d 	movtpl	r5, #16205	; 0x3f4d
    5790:	6d726100 	ldfvse	f6, [r2, #-0]
    5794:	3170665f 	cmncc	r0, pc, asr r6
    5798:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
    579c:	5f007473 	svcpl	0x00007473
    57a0:	0068765f 	rsbeq	r7, r8, pc, asr r6
    57a4:	5f6d7261 	svcpl	0x006d7261
    57a8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    57ac:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    57b0:	5f5f0068 	svcpl	0x005f0068
    57b4:	54006c76 	strpl	r6, [r0], #-3190	; 0xfffff38a
    57b8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    57bc:	50435f54 	subpl	r5, r3, r4, asr pc
    57c0:	6f635f55 	svcvs	0x00635f55
    57c4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57c8:	54003472 	strpl	r3, [r0], #-1138	; 0xfffffb8e
    57cc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    57d0:	50435f54 	subpl	r5, r3, r4, asr pc
    57d4:	6f635f55 	svcvs	0x00635f55
    57d8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57dc:	63353161 	teqvs	r5, #1073741848	; 0x40000018
    57e0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    57e4:	00376178 	eorseq	r6, r7, r8, ror r1
    57e8:	5f6d7261 	svcpl	0x006d7261
    57ec:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    57f0:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    57f4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    57f8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    57fc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5800:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5804:	32376178 	eorscc	r6, r7, #120, 2
    5808:	6d726100 	ldfvse	f6, [r2, #-0]
    580c:	7363705f 	cmnvc	r3, #95	; 0x5f
    5810:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5814:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5818:	4d524100 	ldfmie	f4, [r2, #-0]
    581c:	5343505f 	movtpl	r5, #12383	; 0x305f
    5820:	5041415f 	subpl	r4, r1, pc, asr r1
    5824:	4c5f5343 	mrrcmi	3, 4, r5, pc, cr3	; <UNPREDICTABLE>
    5828:	4c41434f 	mcrrmi	3, 4, r4, r1, cr15
    582c:	52415400 	subpl	r5, r1, #0, 8
    5830:	5f544547 	svcpl	0x00544547
    5834:	5f555043 	svcpl	0x00555043
    5838:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    583c:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    5840:	41540035 	cmpmi	r4, r5, lsr r0
    5844:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5848:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    584c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    5850:	61676e6f 	cmnvs	r7, pc, ror #28
    5854:	61006d72 	tstvs	r0, r2, ror sp
    5858:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    585c:	5f686372 	svcpl	0x00686372
    5860:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5864:	61003162 	tstvs	r0, r2, ror #2
    5868:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    586c:	5f686372 	svcpl	0x00686372
    5870:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5874:	54003262 	strpl	r3, [r0], #-610	; 0xfffffd9e
    5878:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    587c:	50435f54 	subpl	r5, r3, r4, asr pc
    5880:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    5884:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    5888:	6d726100 	ldfvse	f6, [r2, #-0]
    588c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5890:	00743568 	rsbseq	r3, r4, r8, ror #10
    5894:	30785f5f 	rsbscc	r5, r8, pc, asr pc
    5898:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    589c:	5f5f0031 	svcpl	0x005f0031
    58a0:	5f003278 	svcpl	0x00003278
    58a4:	0033785f 	eorseq	r7, r3, pc, asr r8
    58a8:	5f617369 	svcpl	0x00617369
    58ac:	5f746962 	svcpl	0x00746962
    58b0:	6100706d 	tstvs	r0, sp, rrx
    58b4:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    58b8:	63735f64 	cmnvs	r3, #100, 30	; 0x190
    58bc:	00646568 	rsbeq	r6, r4, r8, ror #10
    58c0:	5f6d7261 	svcpl	0x006d7261
    58c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    58c8:	00315f38 	eorseq	r5, r1, r8, lsr pc

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet[1] = message->gid;
  f0:	61656c65 	cmnvs	r5, r5, ror #24
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		*p = message->tpe;p++;
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		*p = message->request_number;p++;
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
		*p = message->sender_id;p++;
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		*p = message->receiver_id;p++;
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	00000034 	andeq	r0, r0, r4, lsr r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000bc 	strheq	r0, [r0], -ip
      20:	83180e41 	tsthi	r8, #1040	; 0x410
      24:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
      28:	87038604 	strhi	r8, [r3, -r4, lsl #12]
      2c:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      30:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
      34:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      38:	6d0b4200 	sfmvs	f4, 4, [fp, #-0]
      3c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
			i = k;
      40:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
				j->Next = k;
      44:	000b4300 	andeq	r4, fp, r0, lsl #6
      48:	00000018 	andeq	r0, r0, r8, lsl r0
}
      4c:	00000000 	andeq	r0, r0, r0
      50:	00000184 	andeq	r0, r0, r4, lsl #3
      54:	00000036 	andeq	r0, r0, r6, lsr r0
      58:	83100e41 	tsthi	r0, #1040	; 0x410
      5c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			nq++;
      60:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	0000000c 	andeq	r0, r0, ip
	...
      70:	00000006 	andeq	r0, r0, r6
      74:	0000000c 	andeq	r0, r0, ip
	...
      80:	00000006 	andeq	r0, r0, r6
      84:	0000000c 	andeq	r0, r0, ip
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000008 	andeq	r0, r0, r8
      94:	0000000c 	andeq	r0, r0, ip
	...
	if (baction == NULL)
      a0:	00000014 	andeq	r0, r0, r4, lsl r0
	(*baction) (pbutton);
      a4:	00000014 	andeq	r0, r0, r4, lsl r0
endthread
      a8:	00000000 	andeq	r0, r0, r0
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
      b0:	00000012 	andeq	r0, r0, r2, lsl r0
endthread
      b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
      b8:	00018e02 	andeq	r8, r1, r2, lsl #28
      bc:	00000020 	andeq	r0, r0, r0, lsr #32
      c0:	00000000 	andeq	r0, r0, r0
      c4:	000001cc 	andeq	r0, r0, ip, asr #3
fsm sender(struct ResponseMessage *message) {
      c8:	00000084 	andeq	r0, r0, r4, lsl #1
      cc:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
      d0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
}
      d4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
      d8:	89038804 	stmdbhi	r3, {r2, fp, pc}
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	00018e02 	andeq	r8, r1, r2, lsl #28
      e0:	0000000c 	andeq	r0, r0, ip
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00000250 	andeq	r0, r0, r0, asr r2
      ec:	00000016 	andeq	r0, r0, r6, lsl r0
		packet[1] = message->gid;
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	00000266 	andeq	r0, r0, r6, ror #4
      fc:	00000020 	andeq	r0, r0, r0, lsr #32
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		*p = message->request_number;p++;
     10c:	0000001e 	andeq	r0, r0, lr, lsl r0
		*p = message->sender_id;p++;
     110:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		*p = message->receiver_id;p++;
     114:	86038504 	strhi	r8, [r3], -r4, lsl #10
		switch(message->tpe) {
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
     11c:	00000014 	andeq	r0, r0, r4, lsl r0
     120:	00000000 	andeq	r0, r0, r0
		tcv_endp(packet);
     124:	00000286 	andeq	r0, r0, r6, lsl #5
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	00000030 	andeq	r0, r0, r0, lsr r0
     12c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
     130:	00018e02 	andeq	r8, r1, r2, lsl #28
		finish;
     134:	00000020 	andeq	r0, r0, r0, lsr #32
     138:	00000000 	andeq	r0, r0, r0
     13c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
				strncpy(p, message->record, sizeof(message->record));
     140:	00000052 	andeq	r0, r0, r2, asr r0
				*p = message->padding;p++;
     144:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
				strncpy(p, message->record, sizeof(message->record));
     148:	86078508 	strhi	r8, [r7], -r8, lsl #10
     14c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     150:	8a038904 	bhi	e2568 <__ccfg+0xc25c0>
				strncpy(p, message->record, sizeof(message->record));
     154:	00018e02 	andeq	r8, r1, r2, lsl #28
     158:	00000028 	andeq	r0, r0, r8, lsr #32
				strncpy(p, message->record, sizeof(message->record));
     15c:	00000000 	andeq	r0, r0, r0
				break;
     160:	00000308 	andeq	r0, r0, r8, lsl #6
				*p = message->record_index;p++;
     164:	0000041c 	andeq	r0, r0, ip, lsl r4
				*p = message->padding;
     168:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
				break;
     16c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     170:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     174:	42018e02 	andmi	r8, r1, #2, 28
     178:	bb02600e 	bllt	981b8 <__ccfg+0x78210>
     17c:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
     180:	0000000b 	andeq	r0, r0, fp
struct Node* init_node(struct Node* node){
     184:	00000024 	andeq	r0, r0, r4, lsr #32
    struct Node* node2 = (struct Node*)umalloc(sizeof(struct Node));
     188:	00000000 	andeq	r0, r0, r0
     18c:	00000724 	andeq	r0, r0, r4, lsr #14
     190:	000005c0 	andeq	r0, r0, r0, asr #11
    node2->gid = 0;
     194:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    node2->data_base.item_count = 0;
     198:	86048505 	strhi	r8, [r4], -r5, lsl #10
    memset(node2->data_base.item_array, 0, sizeof(node2->data_base.item_array)); // Null out the item_array field
     19c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     1a0:	280e4101 	stmdacs	lr, {r0, r8, lr}
     1a4:	0e02a103 	mvfeqs	f2, f3
    memset(node2->nnodes, 0, sizeof(node2->nnodes)); // Null out the nnodes field
     1a8:	00000014 	andeq	r0, r0, r4, lsl r0
     1ac:	0000000c 	andeq	r0, r0, ip
     1b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    node2->index = 0;
     1b4:	7c020001 	stcvc	0, cr0, [r2], {1}
};
     1b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return (uint8_t) (rand() % 255);
     1bc:	0000000c 	andeq	r0, r0, ip
     1c0:	000001ac 	andeq	r0, r0, ip, lsr #3
     1c4:	00000ce4 	andeq	r0, r0, r4, ror #25
}
     1c8:	0000000c 	andeq	r0, r0, ip
bool insert_record(struct Node *node, char new_entry[20], uint8_t owner_id){
     1cc:	00000018 	andeq	r0, r0, r8, lsl r0
     1d0:	000001ac 	andeq	r0, r0, ip, lsr #3
    DEBUG_PRINT("owner id %d\n new_entry %s", owner_id, new_entry);
     1d4:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     1dc:	47080e41 	strmi	r0, [r8, -r1, asr #28]
    if (node->data_base.item_count == NUMB_OF_ENT){
     1e0:	41000e0a 	tstmi	r0, sl, lsl #28
     1e4:	0000000b 	andeq	r0, r0, fp
        for (int i = 0; i < NUMB_OF_ENT; i++){
     1e8:	00000018 	andeq	r0, r0, r8, lsl r0
            if (node->data_base.item_array[i].data_entry[0] == '\0'){
     1ec:	000001ac 	andeq	r0, r0, ip, lsr #3
     1f0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     1f4:	0000002a 	andeq	r0, r0, sl, lsr #32
                strncpy(node->data_base.item_array[i].data_entry, new_entry, 20); 
     1f8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
     1fc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     200:	000b4204 	andeq	r4, fp, r4, lsl #4
     204:	00000018 	andeq	r0, r0, r8, lsl r0
     208:	000001ac 	andeq	r0, r0, ip, lsr #3
                node->data_base.item_array[i].owner_id = owner_id;
     20c:	00000d48 	andeq	r0, r0, r8, asr #26
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     210:	0000003c 	andeq	r0, r0, ip, lsr r0
                node->data_base.item_count += 1;
     214:	83100e41 	tsthi	r0, #1040	; 0x410
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     218:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
                node->data_base.item_count += 1;
     21c:	00018e02 	andeq	r8, r1, r2, lsl #28
                DEBUG_PRINT("owner id %d\n new_entry %s", node->data_base.item_array[i].owner_id, node->data_base.item_array[i].data_entry);
     220:	00000018 	andeq	r0, r0, r8, lsl r0
     224:	000001ac 	andeq	r0, r0, ip, lsr #3
    if(node->data_base.item_array[num].data_entry[0] == '\0'){
     228:	00000d84 	andeq	r0, r0, r4, lsl #27
     22c:	00000040 	andeq	r0, r0, r0, asr #32
     230:	83100e41 	tsthi	r0, #1040	; 0x410
     234:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
};
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
        for (int i = 0; i < NUMB_OF_ENT; i++){
     23c:	00000014 	andeq	r0, r0, r4, lsl r0
     240:	000001ac 	andeq	r0, r0, ip, lsr #3
        return false;
     244:	00000000 	andeq	r0, r0, r0
     248:	00000020 	andeq	r0, r0, r0, lsr #32
     24c:	83080e42 	movwhi	r0, #36418	; 0x8e42
            node->nnodes[i] = 0; // set to null byte
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
     254:	00000014 	andeq	r0, r0, r4, lsl r0
     258:	000001ac 	andeq	r0, r0, ip, lsr #3
     25c:	00000dc4 	andeq	r0, r0, r4, asr #27
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     260:	00000054 	andeq	r0, r0, r4, asr r0
};
     264:	87080e42 	strhi	r0, [r8, -r2, asr #28]
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry[0] == '\0'){
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	000001ac 	andeq	r0, r0, ip, lsr #3
     274:	00000e18 	andeq	r0, r0, r8, lsl lr
        node->data_base.item_count -= 1;
     278:	00000040 	andeq	r0, r0, r0, asr #32
        node->data_base.item_array[index].timestamp = 0;
     27c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        node->data_base.item_count -= 1;
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
};
     284:	00000014 	andeq	r0, r0, r4, lsl r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry[0] == '\0'){
     288:	000001ac 	andeq	r0, r0, ip, lsr #3
     28c:	00000e58 	andeq	r0, r0, r8, asr lr
     290:	00000028 	andeq	r0, r0, r8, lsr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
     294:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     298:	00018e02 	andeq	r8, r1, r2, lsl #28
            node->data_base.item_array[i].data_entry[0] = '\0';
     29c:	00000014 	andeq	r0, r0, r4, lsl r0
            node->data_base.item_array[i].timestamp = 0;
     2a0:	000001ac 	andeq	r0, r0, ip, lsr #3
    node->data_base.item_count = 0;
     2a4:	00000e80 	andeq	r0, r0, r0, lsl #29
    if(node->data_base.item_array[0].data_entry[0] != '\0'){
     2a8:	00000114 	andeq	r0, r0, r4, lsl r1
     2ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
     2b0:	00018e02 	andeq	r8, r1, r2, lsl #28
        return true;
     2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2b8:	000001ac 	andeq	r0, r0, ip, lsr #3
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2bc:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     2c0:	00000050 	andeq	r0, r0, r0, asr r0
     2c4:	83180e41 	tsthi	r8, #1040	; 0x410
     2c8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2cc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	response_message->tpe = RESPONSE;
     2d0:	00018e02 	andeq	r8, r1, r2, lsl #28
	response_message->status = status;
     2d4:	00000018 	andeq	r0, r0, r8, lsl r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d8:	000001ac 	andeq	r0, r0, ip, lsr #3
	response_message->gid = gid;
     2dc:	00000fe4 	andeq	r0, r0, r4, ror #31
	response_message->sender_id = receiver_id;
     2e0:	00000054 	andeq	r0, r0, r4, asr r0
	response_message->status = status;
     2e4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	if (!padding){
     2e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
		response_message->padding = padding;
     2ec:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (rec != NULL){
     2f0:	0000000c 	andeq	r0, r0, ip
     2f4:	000001ac 	andeq	r0, r0, ip, lsr #3
		strncpy(response_message->record, rec, 20);
     2f8:	00001038 	andeq	r1, r0, r8, lsr r0
     2fc:	00000038 	andeq	r0, r0, r8, lsr r0
     300:	00000020 	andeq	r0, r0, r0, lsr #32
};
     304:	000001ac 	andeq	r0, r0, ip, lsr #3
fsm receiver(struct Node* node_db) {
     308:	00001070 	andeq	r1, r0, r0, ror r0
     30c:	00000110 	andeq	r0, r0, r0, lsl r1
     310:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     314:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     318:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     31c:	89038804 	stmdbhi	r3, {r2, fp, pc}
     320:	00018e02 	andeq	r8, r1, r2, lsl #28
     324:	0000000c 	andeq	r0, r0, ip
		DEBUG_PRINT("\r\nreceiving 0");
     328:	000001ac 	andeq	r0, r0, ip, lsr #3
     32c:	00000000 	andeq	r0, r0, r0
		incoming_packet = tcv_rnp(receiving, sfd);
     330:	0000000c 	andeq	r0, r0, ip
     334:	00000018 	andeq	r0, r0, r8, lsl r0
     338:	000001ac 	andeq	r0, r0, ip, lsr #3
		DEBUG_PRINT("\r\nreceiving 1");
     33c:	00001180 	andeq	r1, r0, r0, lsl #3
     340:	000000c0 	andeq	r0, r0, r0, asr #1
		DEBUG_PRINT("\r\nreceiving 2");
     344:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     348:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     34c:	00000001 	andeq	r0, r0, r1
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     350:	00000018 	andeq	r0, r0, r8, lsl r0
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     354:	000001ac 	andeq	r0, r0, ip, lsr #3
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     358:	00001240 	andeq	r1, r0, r0, asr #4
		DEBUG_PRINT("\r\nreceiving 3");
     35c:	00000044 	andeq	r0, r0, r4, asr #32
		switch (response_message_5->tpe){
     360:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     364:	86038504 	strhi	r8, [r3], -r4, lsl #10
     368:	00018e02 	andeq	r8, r1, r2, lsl #28
     36c:	0000001c 	andeq	r0, r0, ip, lsl r0
     370:	000001ac 	andeq	r0, r0, ip, lsr #3
     374:	00001284 	andeq	r1, r0, r4, lsl #5
     378:	0000003c 	andeq	r0, r0, ip, lsr r0
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     37c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     380:	86048505 	strhi	r8, [r4], -r5, lsl #10
				if (discovery_request_message->gid == node_db->gid){
     384:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     388:	00000001 	andeq	r0, r0, r1
					DEBUG_PRINT("\r\nSending to sender");
     38c:	00000018 	andeq	r0, r0, r8, lsl r0
     390:	000001ac 	andeq	r0, r0, ip, lsr #3
					DEBUG_PRINT("\r\nSending to sender");
     394:	000012c0 	andeq	r1, r0, r0, asr #5
					response_message_0->tpe = DISCOVERY_RESPONSE;
     398:	000000a4 	andeq	r0, r0, r4, lsr #1
					response_message_0->request_number = discovery_request_message->request_number;
     39c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					response_message_0->sender_id = node_db->id;
     3a0:	86038504 	strhi	r8, [r3], -r4, lsl #10
					response_message_0->receiver_id = discovery_request_message->sender_id;
     3a4:	00018e02 	andeq	r8, r1, r2, lsl #28
					DEBUG_PRINT("\r\nSending to sender");
     3a8:	00000030 	andeq	r0, r0, r0, lsr r0
					call sender(response_message_0, done_case);
     3ac:	000001ac 	andeq	r0, r0, ip, lsr #3
     3b0:	00001364 	andeq	r1, r0, r4, ror #6
     3b4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     3b8:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     3bc:	86078508 	strhi	r8, [r7], -r8, lsl #10
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     3c0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     3c4:	8a038904 	bhi	e27dc <__ccfg+0xc2834>
     3c8:	02018e02 	andeq	r8, r1, #2, 28
     3cc:	cace0aa2 	bgt	ff382e5c <_estack+0xdf37de5c>
     3d0:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     3d4:	000ec4c5 	andeq	ip, lr, r5, asr #9
     3d8:	00000b42 	andeq	r0, r0, r2, asr #22
     3dc:	0000000c 	andeq	r0, r0, ip
     3e0:	000001ac 	andeq	r0, r0, ip, lsr #3
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     3e4:	0000151c 	andeq	r1, r0, ip, lsl r5
					node_db->index+=1;
     3e8:	00000024 	andeq	r0, r0, r4, lsr #32
     3ec:	0000000c 	andeq	r0, r0, ip
		DEBUG_PRINT("\r\nIn done_case");
     3f0:	000001ac 	andeq	r0, r0, ip, lsr #3
		tcv_endp(incoming_packet);
     3f4:	00000000 	andeq	r0, r0, r0
     3f8:	00000028 	andeq	r0, r0, r8, lsr #32
		DEBUG_PRINT("\r\nIn done_case");
     3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     400:	000001ac 	andeq	r0, r0, ip, lsr #3
		proceed receiving;
     404:	00001540 	andeq	r1, r0, r0, asr #10
		ser_out(response_1_create, "\r\nData Saved");
     408:	00000258 	andeq	r0, r0, r8, asr r2
     40c:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
		proceed receiving;
     410:	8e028b03 	vmlahi.f64	d8, d2, d3
     414:	180e4101 	stmdane	lr, {r0, r8, lr}
		ser_out(response_1_delete, "\r\nRecord Deleted");
     418:	00070d42 	andeq	r0, r7, r2, asr #26
     41c:	00000014 	andeq	r0, r0, r4, lsl r0
		proceed receiving;
     420:	000001ac 	andeq	r0, r0, ip, lsr #3
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     424:	00001798 	muleq	r0, r8, r7
     428:	00000030 	andeq	r0, r0, r0, lsr r0
     42c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     430:	00018e02 	andeq	r8, r1, r2, lsl #28
     434:	00000018 	andeq	r0, r0, r8, lsl r0
		proceed receiving;
     438:	000001ac 	andeq	r0, r0, ip, lsr #3
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     43c:	00000000 	andeq	r0, r0, r0
     440:	0000005c 	andeq	r0, r0, ip, asr r0
     444:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     448:	86038504 	strhi	r8, [r3], -r4, lsl #10
		proceed receiving;
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     450:	00000014 	andeq	r0, r0, r4, lsl r0
     454:	000001ac 	andeq	r0, r0, ip, lsr #3
     458:	000017c8 	andeq	r1, r0, r8, asr #15
     45c:	00000060 	andeq	r0, r0, r0, rrx
		proceed receiving;
     460:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
     468:	0000000c 	andeq	r0, r0, ip
     46c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     470:	7c020001 	stcvc	0, cr0, [r2], {1}
		proceed receiving;
     474:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     478:	00000018 	andeq	r0, r0, r8, lsl r0
     47c:	00000468 	andeq	r0, r0, r8, ror #8
		proceed receiving;
     480:	00001828 	andeq	r1, r0, r8, lsr #16
}
     484:	0000003c 	andeq	r0, r0, ip, lsr r0
     488:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     48c:	86038504 	strhi	r8, [r3], -r4, lsl #10
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     490:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     494:	00000018 	andeq	r0, r0, r8, lsl r0
     498:	00000468 	andeq	r0, r0, r8, ror #8
     49c:	00001864 	andeq	r1, r0, r4, ror #16
     4a0:	00000080 	andeq	r0, r0, r0, lsl #1
					DEBUG_PRINT("\r\nDelete rec first if");
     4a4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
					break;
     4a8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     4ac:	00000001 	andeq	r0, r0, r1
     4b0:	0000000c 	andeq	r0, r0, ip
					DEBUG_PRINT("\r\nCreate rec second if");
     4b4:	00000468 	andeq	r0, r0, r8, ror #8
					if (insert_record(node_db, create_record_message->record, create_record_message->sender_id)){
     4b8:	000018e4 	andeq	r1, r0, r4, ror #17
     4bc:	00000018 	andeq	r0, r0, r8, lsl r0
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	00000468 	andeq	r0, r0, r8, ror #8
						DEBUG_PRINT("\r\nCreate rec third if");
     4c8:	00000000 	andeq	r0, r0, r0
						status = (uint8_t) SUCCESS;
     4cc:	00000024 	andeq	r0, r0, r4, lsr #32
					DEBUG_PRINT("\r\nCreate rec out if");
     4d0:	83080e41 	movwhi	r0, #36417	; 0x8e41
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, create_record_message->sender_id, create_record_message->receiver_id, status, 0, array);
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
     4dc:	00000468 	andeq	r0, r0, r8, ror #8
     4e0:	000018fc 	strdeq	r1, [r0], -ip
     4e4:	00000010 	andeq	r0, r0, r0, lsl r0
     4e8:	83080e42 	movwhi	r0, #36418	; 0x8e42
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f0:	00000014 	andeq	r0, r0, r4, lsl r0
					call sender(response_message_2, done_case);
     4f4:	00000468 	andeq	r0, r0, r8, ror #8
     4f8:	0000190c 	andeq	r1, r0, ip, lsl #18
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     500:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
						DEBUG_PRINT("\r\nCreate rec third else");
     504:	00018e02 	andeq	r8, r1, r2, lsl #28
						status = (uint8_t) DB_FULL;
     508:	00000014 	andeq	r0, r0, r4, lsl r0
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     50c:	00000468 	andeq	r0, r0, r8, ror #8
				DEBUG_PRINT("\r\nDelete rec");/*
     510:	00000000 	andeq	r0, r0, r0
     514:	0000004c 	andeq	r0, r0, ip, asr #32
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     518:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     51c:	00018e02 	andeq	r8, r1, r2, lsl #28
     520:	0000000c 	andeq	r0, r0, ip
     524:	00000468 	andeq	r0, r0, r8, ror #8
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     528:	00001938 	andeq	r1, r0, r8, lsr r9
     52c:	00000006 	andeq	r0, r0, r6
     530:	00000028 	andeq	r0, r0, r8, lsr #32
     534:	00000468 	andeq	r0, r0, r8, ror #8
					DEBUG_PRINT("\r\nDelete rec first if");
     538:	00001940 	andeq	r1, r0, r0, asr #18
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     53c:	000000cc 	andeq	r0, r0, ip, asr #1
     540:	83180e41 	tsthi	r8, #1040	; 0x410
					DEBUG_PRINT("\r\nDelete rec second if");
     544:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     548:	87038604 	strhi	r8, [r3, -r4, lsl #12]
					if (delete_record(node_db, delete_record_message->record_index)){
     54c:	02018e02 	andeq	r8, r1, #2, 28
     550:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
						DEBUG_PRINT("\r\nDelete rec third if");
     554:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     558:	0b42000e 	bleq	1080598 <__ccfg+0x10605f0>
					DEBUG_PRINT("\r\nDelete assemble le response");
     55c:	00000014 	andeq	r0, r0, r4, lsl r0
     560:	00000468 	andeq	r0, r0, r8, ror #8
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, delete_record_message->sender_id, delete_record_message->receiver_id, status, 0, array);
     564:	00001a0c 	andeq	r1, r0, ip, lsl #20
     568:	00000014 	andeq	r0, r0, r4, lsl r0
     56c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     570:	00018e02 	andeq	r8, r1, r2, lsl #28
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     574:	00000014 	andeq	r0, r0, r4, lsl r0
     578:	00000468 	andeq	r0, r0, r8, ror #8
						DEBUG_PRINT("\r\nDelete rec fourth if");
     57c:	00001a20 	andeq	r1, r0, r0, lsr #20
     580:	00000034 	andeq	r0, r0, r4, lsr r0
     584:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     588:	00018e02 	andeq	r8, r1, r2, lsl #28
     58c:	00000018 	andeq	r0, r0, r8, lsl r0
     590:	00000468 	andeq	r0, r0, r8, ror #8
     594:	00001a54 	andeq	r1, r0, r4, asr sl
     598:	00000034 	andeq	r0, r0, r4, lsr r0
     59c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     5a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     5a4:	00000001 	andeq	r0, r0, r1
     5a8:	00000018 	andeq	r0, r0, r8, lsl r0
     5ac:	00000468 	andeq	r0, r0, r8, ror #8
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	0000002c 	andeq	r0, r0, ip, lsr #32
     5b8:	83100e41 	tsthi	r0, #1040	; 0x410
     5bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c4:	00000014 	andeq	r0, r0, r4, lsl r0
     5c8:	00000468 	andeq	r0, r0, r8, ror #8
     5cc:	00001a88 	andeq	r1, r0, r8, lsl #21
     5d0:	00000024 	andeq	r0, r0, r4, lsr #32
     5d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5dc:	00000018 	andeq	r0, r0, r8, lsl r0
     5e0:	00000468 	andeq	r0, r0, r8, ror #8
     5e4:	00001aac 	andeq	r1, r0, ip, lsr #21
     5e8:	00000038 	andeq	r0, r0, r8, lsr r0
     5ec:	83100e41 	tsthi	r0, #1040	; 0x410
     5f0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f8:	0000000c 	andeq	r0, r0, ip
     5fc:	00000468 	andeq	r0, r0, r8, ror #8
     600:	00000000 	andeq	r0, r0, r0
     604:	00000014 	andeq	r0, r0, r4, lsl r0
     608:	00000014 	andeq	r0, r0, r4, lsl r0
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     60c:	00000468 	andeq	r0, r0, r8, ror #8
     610:	00000000 	andeq	r0, r0, r0
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     614:	00000040 	andeq	r0, r0, r0, asr #32
				DEBUG_PRINT("\r\nretrieve rec");
     618:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     61c:	00018e02 	andeq	r8, r1, r2, lsl #28
     620:	00000014 	andeq	r0, r0, r4, lsl r0
     624:	00000468 	andeq	r0, r0, r8, ror #8
     628:	00000000 	andeq	r0, r0, r0
     62c:	00000018 	andeq	r0, r0, r8, lsl r0
     630:	83080e41 	movwhi	r0, #36417	; 0x8e41
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     634:	00018e02 	andeq	r8, r1, r2, lsl #28
     638:	0000000c 	andeq	r0, r0, ip
     63c:	00000468 	andeq	r0, r0, r8, ror #8
    return node->data_base.item_array[index];
     640:	00001ae4 	andeq	r1, r0, r4, ror #21
     644:	00000024 	andeq	r0, r0, r4, lsr #32
     648:	0000000c 	andeq	r0, r0, ip
     64c:	00000468 	andeq	r0, r0, r8, ror #8
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     650:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
     654:	00000020 	andeq	r0, r0, r0, lsr #32
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     658:	0000000c 	andeq	r0, r0, ip
     65c:	00000468 	andeq	r0, r0, r8, ror #8
     660:	00001b08 	andeq	r1, r0, r8, lsl #22
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, retreive_record_message->sender_id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     664:	0000000e 	andeq	r0, r0, lr
     668:	0000000c 	andeq	r0, r0, ip
     66c:	00000468 	andeq	r0, r0, r8, ror #8
     670:	00001b16 	andeq	r1, r0, r6, lsl fp
     674:	00000010 	andeq	r0, r0, r0, lsl r0
     678:	0000000c 	andeq	r0, r0, ip
     67c:	00000468 	andeq	r0, r0, r8, ror #8
     680:	00001b26 	andeq	r1, r0, r6, lsr #22
				DEBUG_PRINT("\r\nResponse");
     684:	0000001c 	andeq	r0, r0, ip, lsl r0
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     688:	0000000c 	andeq	r0, r0, ip
				DEBUG_PRINT("\r\nResponse");
     68c:	00000468 	andeq	r0, r0, r8, ror #8
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     690:	00000000 	andeq	r0, r0, r0
     694:	00000010 	andeq	r0, r0, r0, lsl r0
     698:	0000000c 	andeq	r0, r0, ip
     69c:	00000468 	andeq	r0, r0, r8, ror #8
     6a0:	00000000 	andeq	r0, r0, r0
				if(!response_flag){
     6a4:	00000006 	andeq	r0, r0, r6
     6a8:	0000000c 	andeq	r0, r0, ip
					response_flag=1;
     6ac:	00000468 	andeq	r0, r0, r8, ror #8
					trigger(&response_flag);
     6b0:	00001b42 	andeq	r1, r0, r2, asr #22
				switch(response_message_5->status){
     6b4:	00000014 	andeq	r0, r0, r4, lsl r0
     6b8:	0000000c 	andeq	r0, r0, ip
     6bc:	00000468 	andeq	r0, r0, r8, ror #8
     6c0:	00001b56 	andeq	r1, r0, r6, asr fp
     6c4:	0000000e 	andeq	r0, r0, lr
						if (response_checker[0] == response_message_5->request_number){
     6c8:	00000014 	andeq	r0, r0, r4, lsl r0
     6cc:	00000468 	andeq	r0, r0, r8, ror #8
     6d0:	00001b64 	andeq	r1, r0, r4, ror #22
							switch(response_checker[1]){
     6d4:	00000024 	andeq	r0, r0, r4, lsr #32
     6d8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     6e0:	00000020 	andeq	r0, r0, r0, lsr #32
						proceed response_4;
     6e4:	00000468 	andeq	r0, r0, r8, ror #8
						break;
     6e8:	00001b88 	andeq	r1, r0, r8, lsl #23
									proceed response_1_delete;
     6ec:	0000009c 	muleq	r0, ip, r0
									proceed response_1_retrieve;
     6f0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
						proceed response_2;
     6f4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
						proceed response_3;
     6f8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
						proceed response_4;
     6fc:	89038804 	stmdbhi	r3, {r2, fp, pc}
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
     704:	00000014 	andeq	r0, r0, r4, lsl r0
}
     708:	00000468 	andeq	r0, r0, r8, ror #8
     70c:	00001c24 	andeq	r1, r0, r4, lsr #24
     710:	00000050 	andeq	r0, r0, r0, asr r0
     714:	83080e42 	movwhi	r0, #36418	; 0x8e42
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
     71c:	00000014 	andeq	r0, r0, r4, lsl r0
     720:	00000468 	andeq	r0, r0, r8, ror #8
fsm root {
     724:	00001c74 	andeq	r1, r0, r4, ror ip
     728:	00000048 	andeq	r0, r0, r8, asr #32
     72c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     730:	00018e02 	andeq	r8, r1, r2, lsl #28
     734:	00000014 	andeq	r0, r0, r4, lsl r0
     738:	00000468 	andeq	r0, r0, r8, ror #8
     73c:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
     740:	00000050 	andeq	r0, r0, r0, asr r0
     744:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     748:	00018e02 	andeq	r8, r1, r2, lsl #28
     74c:	00000020 	andeq	r0, r0, r0, lsr #32
     750:	00000468 	andeq	r0, r0, r8, ror #8
     754:	00000000 	andeq	r0, r0, r0
     758:	00000058 	andeq	r0, r0, r8, asr r0
     75c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     760:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     764:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     768:	89038804 	stmdbhi	r3, {r2, fp, pc}
     76c:	00018e02 	andeq	r8, r1, r2, lsl #28
     770:	00000018 	andeq	r0, r0, r8, lsl r0
		node_db = init_node(node_db);
     774:	00000468 	andeq	r0, r0, r8, ror #8
     778:	00001d0c 	andeq	r1, r0, ip, lsl #26
		phys_cc1350(0, MAX_PKT_LEN);
     77c:	000000a8 	andeq	r0, r0, r8, lsr #1
     780:	83100e44 	tsthi	r0, #68, 28	; 0x440
     784:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		tcv_plug (0, &plug_null);
     788:	00018e02 	andeq	r8, r1, r2, lsl #28
     78c:	00000018 	andeq	r0, r0, r8, lsl r0
		sfd = tcv_open (WNONE, 0, 0);
     790:	00000468 	andeq	r0, r0, r8, ror #8
     794:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
     798:	00000034 	andeq	r0, r0, r4, lsr r0
		if (sfd < 0) {
     79c:	83100e41 	tsthi	r0, #1040	; 0x410
     7a0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			diag("Cannot open tcv interface");
     7a4:	00018e02 	andeq	r8, r1, r2, lsl #28
			halt();
     7a8:	0000000c 	andeq	r0, r0, ip
		tcv_control(sfd, PHYSOPT_ON, NULL);
     7ac:	00000468 	andeq	r0, r0, r8, ror #8
     7b0:	00001de8 	andeq	r1, r0, r8, ror #27
		runfsm receiver(node_db);
     7b4:	00000018 	andeq	r0, r0, r8, lsl r0
     7b8:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->data_base.item_count, NUMB_OF_ENT);
     7bc:	00000468 	andeq	r0, r0, r8, ror #8
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	00000030 	andeq	r0, r0, r0, lsr r0
     7c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     7d0:	00000014 	andeq	r0, r0, r4, lsl r0
     7d4:	00000468 	andeq	r0, r0, r8, ror #8
		ser_inf(get_choice, "%c", &CHOICE);
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	00000038 	andeq	r0, r0, r8, lsr r0
     7e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		switch(CHOICE) {
     7e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7e8:	00000040 	andeq	r0, r0, r0, asr #32
     7ec:	00000468 	andeq	r0, r0, r8, ror #8
     7f0:	00001e00 	andeq	r1, r0, r0, lsl #28
     7f4:	0000013c 	andeq	r0, r0, ip, lsr r1
     7f8:	80100e41 	andshi	r0, r0, r1, asr #28
     7fc:	82038104 	andhi	r8, r3, #4, 2
     800:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     804:	0b84380e 	bleq	fe10e844 <_estack+0xde109844>
     808:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     80c:	07880887 	streq	r0, [r8, r7, lsl #17]
				proceed menu;
     810:	058e0689 	streq	r0, [lr, #1673]	; 0x689
				proceed get_new_group_id;
     814:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
				proceed menu;
     818:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     81c:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     820:	c341100e 	movtgt	r1, #4110	; 0x100e
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     824:	0ec0c1c2 	acseqdm	f4, f2
     828:	000b4100 	andeq	r4, fp, r0, lsl #2
     82c:	0000000c 	andeq	r0, r0, ip
		DEBUG_PRINT("setting node group ID");
     830:	00000468 	andeq	r0, r0, r8, ror #8
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     834:	00001f3c 	andeq	r1, r0, ip, lsr pc
    node->gid = gid; 
     838:	00000024 	andeq	r0, r0, r4, lsr #32
		proceed menu;
     83c:	0000000c 	andeq	r0, r0, ip
     840:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     844:	7c020001 	stcvc	0, cr0, [r2], {1}
     848:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     84c:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     850:	0000083c 	andeq	r0, r0, ip, lsr r8
     854:	00001f60 	andeq	r1, r0, r0, ror #30
     858:	00000016 	andeq	r0, r0, r6, lsl r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     85c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    node->id = id;
     860:	00018e02 	andeq	r8, r1, r2, lsl #28
		if((node_db->id < 1) || (node_db->id > 25)){
     864:	0000000c 	andeq	r0, r0, ip
     868:	0000083c 	andeq	r0, r0, ip, lsr r8
			strncpy(reason, "Out of Range", 50);
     86c:	00001f76 	andeq	r1, r0, r6, ror pc
     870:	0000001a 	andeq	r0, r0, sl, lsl r0
     874:	00000018 	andeq	r0, r0, r8, lsl r0
			proceed invalid_node_id;
     878:	0000083c 	andeq	r0, r0, ip, lsr r8
fsm root {
     87c:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
				strncpy(reason, "ID is already in use", 50);
     880:	0000000e 	andeq	r0, r0, lr
		for(int i = 0; i < node_db->index; i++){
     884:	83080e41 	movwhi	r0, #36417	; 0x8e41
     888:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
		proceed menu;
     88c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     890:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     894:	0000083c 	andeq	r0, r0, ip, lsr r8
     898:	00001fa0 	andeq	r1, r0, r0, lsr #31
     89c:	0000004c 	andeq	r0, r0, ip, asr #32
     8a0:	83100e41 	tsthi	r0, #1040	; 0x410
		proceed get_new_node_id;
     8a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (!clear_node_neighbour_array(node_db)){
     8a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8ac:	00000020 	andeq	r0, r0, r0, lsr #32
     8b0:	0000083c 	andeq	r0, r0, ip, lsr r8
			strncpy(reason, "Error Clearing Node Array", 50);
     8b4:	00001fec 	andeq	r1, r0, ip, ror #31
     8b8:	0000008c 	andeq	r0, r0, ip, lsl #1
			proceed error;
     8bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8c0:	5f018e02 	svcpl	0x00018e02
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8c4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		request_packet->tpe = DISCOVERY_REQUEST;
     8c8:	560b4200 	strpl	r4, [fp], -r0, lsl #4
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     8cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
		request_packet->gid = node_db->gid;
     8d0:	00000020 	andeq	r0, r0, r0, lsr #32
     8d4:	0000083c 	andeq	r0, r0, ip, lsr r8
		request_packet->request_number = generate_request_num();
     8d8:	00002078 	andeq	r2, r0, r8, ror r0
		request_packet->sender_id = node_db->id;
     8dc:	00000070 	andeq	r0, r0, r0, ror r0
     8e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8e4:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		call sender(request_packet, wait_discovery);
     8e8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8ec:	430b4200 	movwmi	r4, #45568	; 0xb200
     8f0:	000ec4ce 	andeq	ip, lr, lr, asr #9
			release;
     8f4:	0000003c 	andeq	r0, r0, ip, lsr r0
				proceed get_new_node_id;
     8f8:	0000083c 	andeq	r0, r0, ip, lsr r8
				proceed clear_neighbour_array;
     8fc:	000020e8 	andeq	r2, r0, r8, ror #1
				proceed create_proto_start;
     900:	000000c0 	andeq	r0, r0, r0, asr #1
				proceed start_delete_proto;
     904:	82080e41 	andhi	r0, r8, #1040	; 0x410
				proceed start_retrieve_proto;
     908:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
				proceed display_db;
     90c:	0a84300e 	beq	fe10c94c <_estack+0xde10794c>
				proceed del_local;
     910:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
			if(node_db->id == node_db->nnodes[i]){
     914:	06880787 	streq	r0, [r8], r7, lsl #15
     918:	048a0589 	streq	r0, [sl], #1417	; 0x589
     91c:	0a6b038e 	beq	1ac175c <__ccfg+0x1aa17b4>
				strncpy(reason, "ID is already in use", 50);
     920:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     924:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     928:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
				proceed invalid_node_id;
     92c:	c2c34108 	sbcgt	r4, r3, #8, 2
		for(int i = 0; i < node_db->index; i++){
     930:	0b41000e 	bleq	1040970 <__ccfg+0x10209c8>
		if (discovery_wait_flag == 0){
     934:	0000001c 	andeq	r0, r0, ip, lsl r0
     938:	0000083c 	andeq	r0, r0, ip, lsr r8
			delay(3000, find_proto_start);
     93c:	00000000 	andeq	r0, r0, r0
     940:	0000006c 	andeq	r0, r0, ip, rrx
     944:	83180e42 	tsthi	r8, #1056	; 0x420
     948:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (discovery_wait_flag == 1){
     94c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			delay(3000, display_neighbour_nodes);
     950:	00018e02 	andeq	r8, r1, r2, lsl #28
     954:	0000000c 	andeq	r0, r0, ip
     958:	0000083c 	andeq	r0, r0, ip, lsr r8
     95c:	000021a8 	andeq	r2, r0, r8, lsr #3
     960:	00000024 	andeq	r0, r0, r4, lsr #32
     964:	00000018 	andeq	r0, r0, r8, lsl r0
     968:	0000083c 	andeq	r0, r0, ip, lsr r8
     96c:	000021cc 	andeq	r2, r0, ip, asr #3
     970:	00000080 	andeq	r0, r0, r0, lsl #1
     974:	83100e42 	tsthi	r0, #1056	; 0x420
     978:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     97c:	00018e02 	andeq	r8, r1, r2, lsl #28
     980:	00000014 	andeq	r0, r0, r4, lsl r0
     984:	0000083c 	andeq	r0, r0, ip, lsr r8
     988:	00000000 	andeq	r0, r0, r0
     98c:	00000070 	andeq	r0, r0, r0, ror r0
     990:	83080e42 	movwhi	r0, #36418	; 0x8e42
     994:	00018e02 	andeq	r8, r1, r2, lsl #28
     998:	00000018 	andeq	r0, r0, r8, lsl r0
     99c:	0000083c 	andeq	r0, r0, ip, lsr r8
     9a0:	00000000 	andeq	r0, r0, r0
		if(node_db->index == 0){
     9a4:	00000078 	andeq	r0, r0, r8, ror r0
     9a8:	83100e42 	tsthi	r0, #1056	; 0x420
     9ac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			proceed menu;
     9b0:	00018e02 	andeq	r8, r1, r2, lsl #28
fsm root {
     9b4:	00000020 	andeq	r0, r0, r0, lsr #32
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     9b8:	0000083c 	andeq	r0, r0, ip, lsr r8
		for (int i=0; i<node_db->index; i++) {
     9bc:	0000224c 	andeq	r2, r0, ip, asr #4
     9c0:	000000bc 	strheq	r0, [r0], -ip
     9c4:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
		proceed menu;
     9c8:	86048505 	strhi	r8, [r4], -r5, lsl #10
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     9cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     9d0:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     9d4:	000b4114 	andeq	r4, fp, r4, lsl r1
     9d8:	00000018 	andeq	r0, r0, r8, lsl r0
     9dc:	0000083c 	andeq	r0, r0, ip, lsr r8
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0000003a 	andeq	r0, r0, sl, lsr r0
			strncpy(reason, "Error: improper ID", 50);
     9e8:	83100e41 	tsthi	r0, #1040	; 0x410
     9ec:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     9f0:	00018e02 	andeq	r8, r1, r2, lsl #28
			proceed error;
     9f4:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     9f8:	0000083c 	andeq	r0, r0, ip, lsr r8
     9fc:	00000000 	andeq	r0, r0, r0
		ser_in(get_record_to_create, user_provided_record, 20);
     a00:	00000038 	andeq	r0, r0, r8, lsr r0
     a04:	83100e41 	tsthi	r0, #1040	; 0x410
     a08:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     a0c:	00018e02 	andeq	r8, r1, r2, lsl #28
		create_message->gid = node_db->gid;
     a10:	0000000c 	andeq	r0, r0, ip
     a14:	0000083c 	andeq	r0, r0, ip, lsr r8
     a18:	00000000 	andeq	r0, r0, r0
		create_message->tpe = CREATE_RECORD;
     a1c:	0000000a 	andeq	r0, r0, sl
		create_message->request_number = generate_request_num();
     a20:	00000018 	andeq	r0, r0, r8, lsl r0
		create_message->sender_id = node_db->id;
     a24:	0000083c 	andeq	r0, r0, ip, lsr r8
     a28:	00002308 	andeq	r2, r0, r8, lsl #6
     a2c:	0000002c 	andeq	r0, r0, ip, lsr #32
		strncpy(create_message->record, user_provided_record, 20);
     a30:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		create_message->receiver_id = user_provided_receiver_id;
     a34:	4c018e02 	stcmi	14, cr8, [r1], {2}
		strncpy(create_message->record, user_provided_record, 20);
     a38:	000ec4ce 	andeq	ip, lr, lr, asr #9
		response_checker[0] = create_message->request_number;
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
		call sender(create_message, wait);
     a40:	0000083c 	andeq	r0, r0, ip, lsr r8
		response_checker[1] = create_message->tpe;
     a44:	00002334 	andeq	r2, r0, r4, lsr r3
     a48:	00000060 	andeq	r0, r0, r0, rrx
		call sender(create_message, wait);
     a4c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a50:	61018e02 	tstvs	r1, r2, lsl #28
     a54:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     a58:	000b4300 	andeq	r4, fp, r0, lsl #6
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     a5c:	00000014 	andeq	r0, r0, r4, lsl r0
     a60:	0000083c 	andeq	r0, r0, ip, lsr r8
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     a64:	00000000 	andeq	r0, r0, r0
     a68:	00000040 	andeq	r0, r0, r0, asr #32
     a6c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     a70:	00018e02 	andeq	r8, r1, r2, lsl #28
     a74:	00000014 	andeq	r0, r0, r4, lsl r0
			strncpy(reason, "Error: improper node ID", 50);
     a78:	0000083c 	andeq	r0, r0, ip, lsr r8
     a7c:	00000000 	andeq	r0, r0, r0
			proceed error;
     a80:	0000002c 	andeq	r0, r0, ip, lsr #32
     a84:	83080e42 	movwhi	r0, #36418	; 0x8e42
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     a88:	00018e02 	andeq	r8, r1, r2, lsl #28
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     a90:	0000083c 	andeq	r0, r0, ip, lsr r8
     a94:	00000000 	andeq	r0, r0, r0
     a98:	0000003c 	andeq	r0, r0, ip, lsr r0
		if (us_pr_in < 0 || us_pr_in > 40){
     a9c:	83180e41 	tsthi	r8, #1040	; 0x410
			strncpy(reason, "Error: invalid index", 50);
     aa0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     aa4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     aa8:	00018e02 	andeq	r8, r1, r2, lsl #28
			proceed error;
     aac:	0000000c 	andeq	r0, r0, ip
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab0:	0000083c 	andeq	r0, r0, ip, lsr r8
     ab4:	00000000 	andeq	r0, r0, r0
     ab8:	00000006 	andeq	r0, r0, r6
		delete_record->gid = node_db->gid;
     abc:	0000001c 	andeq	r0, r0, ip, lsl r0
		delete_record->tpe = DELETE_RECORD;
     ac0:	0000083c 	andeq	r0, r0, ip, lsr r8
		delete_record->request_number = generate_request_num();
     ac4:	00002394 	muleq	r0, r4, r3
     ac8:	00000068 	andeq	r0, r0, r8, rrx
		call sender(delete_record, wait);
     acc:	83180e41 	tsthi	r8, #1040	; 0x410
		delete_record->sender_id = node_db->id;
     ad0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		delete_record->receiver_id = user_provided_receiver_id;
     ad4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		delete_record->record_index = us_pr_in;
     ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
     adc:	00000014 	andeq	r0, r0, r4, lsl r0
		response_checker[0] = delete_record->request_number;
     ae0:	0000083c 	andeq	r0, r0, ip, lsr r8
		call sender(delete_record, wait);
     ae4:	000023fc 	strdeq	r2, [r0], -ip
     ae8:	00000050 	andeq	r0, r0, r0, asr r0
     aec:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     af0:	00018e02 	andeq	r8, r1, r2, lsl #28
     af4:	0000002c 	andeq	r0, r0, ip, lsr #32
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     af8:	0000083c 	andeq	r0, r0, ip, lsr r8
     afc:	0000244c 	andeq	r2, r0, ip, asr #8
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     b00:	0000009c 	muleq	r0, ip, r0
     b04:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     b08:	86088509 	strhi	r8, [r8], -r9, lsl #10
		if (get_id < 1 || get_id > 25){
     b0c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     b10:	8a048905 	bhi	122f2c <__ccfg+0x102f84>
			strncpy(reason, "Error: improper node ID", 50);
     b14:	8e028b03 	vmlahi.f64	d8, d2, d3
     b18:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     b1c:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
			proceed error;
     b20:	00000b42 	andeq	r0, r0, r2, asr #22
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     b24:	00000014 	andeq	r0, r0, r4, lsl r0
     b28:	0000083c 	andeq	r0, r0, ip, lsr r8
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     b2c:	000024e8 	andeq	r2, r0, r8, ror #9
     b30:	00000040 	andeq	r0, r0, r0, asr #32
     b34:	83080e42 	movwhi	r0, #36418	; 0x8e42
		if (beg_for_index < 0 || beg_for_index > 40){
     b38:	00018e02 	andeq	r8, r1, r2, lsl #28
     b3c:	00000014 	andeq	r0, r0, r4, lsl r0
			strncpy(reason, "Error: invalid index", 50);
     b40:	0000083c 	andeq	r0, r0, ip, lsr r8
     b44:	00002528 	andeq	r2, r0, r8, lsr #10
			proceed error;
     b48:	00000034 	andeq	r0, r0, r4, lsr r0
     b4c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b50:	00018e02 	andeq	r8, r1, r2, lsl #28
     b54:	00000018 	andeq	r0, r0, r8, lsl r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     b58:	0000083c 	andeq	r0, r0, ip, lsr r8
     b5c:	0000255c 	andeq	r2, r0, ip, asr r5
     b60:	0000003c 	andeq	r0, r0, ip, lsr r0
		retrieve_record->gid = node_db->gid;
     b64:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		retrieve_record->tpe = RETRIEVE_RECORD;
     b68:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
		retrieve_record->request_number = generate_request_num();
     b6c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b70:	00000018 	andeq	r0, r0, r8, lsl r0
		retrieve_record->receiver_id = get_id;
     b74:	0000083c 	andeq	r0, r0, ip, lsr r8
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b78:	00000000 	andeq	r0, r0, r0
		retrieve_record->record_index = beg_for_index;
     b7c:	0000003c 	andeq	r0, r0, ip, lsr r0
     b80:	83100e42 	tsthi	r0, #1056	; 0x420
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     b84:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		response_checker[0] = retrieve_record->request_number;
     b88:	00018e02 	andeq	r8, r1, r2, lsl #28
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b8c:	0000000c 	andeq	r0, r0, ip
		response_checker[1] = retrieve_record->tpe;
     b90:	0000083c 	andeq	r0, r0, ip, lsr r8
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     b94:	00002598 	muleq	r0, r8, r5
     b98:	00000002 	andeq	r0, r0, r2
		call sender(retrieve_record, wait);
     b9c:	0000000c 	andeq	r0, r0, ip
     ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ba4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ba8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bac:	0000000c 	andeq	r0, r0, ip
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     bb0:	00000b9c 	muleq	r0, ip, fp
     bb4:	0000259a 	muleq	r0, sl, r5
		DEBUG_PRINT("\r\nitem count: %d", node_db->data_base.item_count);
     bb8:	00000002 	andeq	r0, r0, r2
     bbc:	0000000c 	andeq	r0, r0, ip
     bc0:	00000b9c 	muleq	r0, ip, fp
		if(node_db->data_base.item_count != 0){
     bc4:	0000259c 	muleq	r0, ip, r5
     bc8:	00000002 	andeq	r0, r0, r2
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     bcc:	0000000c 	andeq	r0, r0, ip
     bd0:	00000b9c 	muleq	r0, ip, fp
			while(i <= node_db->data_base.item_count){
     bd4:	0000259e 	muleq	r0, lr, r5
     bd8:	00000002 	andeq	r0, r0, r2
     bdc:	00000014 	andeq	r0, r0, r4, lsl r0
			i = 0;
     be0:	00000b9c 	muleq	r0, ip, fp
		ser_out(menu, "\r\n");
     be4:	000025a0 	andeq	r2, r0, r0, lsr #11
     be8:	00000044 	andeq	r0, r0, r4, asr #32
		delete_all(node_db);
     bec:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bf0:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed menu;
     bf4:	0000000c 	andeq	r0, r0, ip
		delay(3000, timeout);
     bf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bfc:	7c020001 	stcvc	0, cr0, [r2], {1}
     c00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		when(&response_flag, menu);
     c04:	0000000c 	andeq	r0, r0, ip
     c08:	00000bf4 	strdeq	r0, [r0], -r4
			if(i == 0){
     c0c:	00000000 	andeq	r0, r0, r0
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     c10:	00000002 	andeq	r0, r0, r2
     c14:	00000018 	andeq	r0, r0, r8, lsl r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     c18:	00000bf4 	strdeq	r0, [r0], -r4
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	00000058 	andeq	r0, r0, r8, asr r0
     c24:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		for (int i=0; i<node_db->index; i++) {
     c28:	86038504 	strhi	r8, [r3], -r4, lsl #10
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     c2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c30:	0000000c 	andeq	r0, r0, ip
     c34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c38:	7c020001 	stcvc	0, cr0, [r2], {1}
     c3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c40:	0000002c 	andeq	r0, r0, ip, lsr #32
     c44:	00000c30 	andeq	r0, r0, r0, lsr ip
     c48:	00000000 	andeq	r0, r0, r0
		ser_out(timeout, "\r\nFailed to reach the destination");
     c4c:	000000cc 	andeq	r0, r0, ip, asr #1
     c50:	83100e42 	tsthi	r0, #1056	; 0x420
		proceed menu;
     c54:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     c58:	02018e02 	andeq	r8, r1, #2, 28
     c5c:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
     c60:	000ec3c4 	andeq	ip, lr, r4, asr #7
		proceed menu;
     c64:	ce420b44 	vmlsgt.f64	d16, d2, d4
}
     c68:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     c6c:	00000000 	andeq	r0, r0, r0
     c70:	00000024 	andeq	r0, r0, r4, lsr #32
     c74:	00000c30 	andeq	r0, r0, r0, lsr ip
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	00000038 	andeq	r0, r0, r8, lsr r0
     c80:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     c84:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     c88:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     c8c:	4a0b4300 	bmi	2d1894 <__ccfg+0x2b18ec>
     c90:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     c94:	000b4300 	andeq	r4, fp, r0, lsl #6
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ca0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ca4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ca8:	00000018 	andeq	r0, r0, r8, lsl r0
     cac:	00000c98 	muleq	r0, r8, ip
     cb0:	000025ec 	andeq	r2, r0, ip, ror #11
     cb4:	00000034 	andeq	r0, r0, r4, lsr r0
     cb8:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     cbc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     cc0:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc4:	00000018 	andeq	r0, r0, r8, lsl r0
     cc8:	00000c98 	muleq	r0, r8, ip
     ccc:	00002620 	andeq	r2, r0, r0, lsr #12
     cd0:	00000030 	andeq	r0, r0, r0, lsr r0
     cd4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     cd8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     cdc:	00000001 	andeq	r0, r0, r1
     ce0:	00000014 	andeq	r0, r0, r4, lsl r0
static void devinit_uart (int devnum) {
     ce4:	00000c98 	muleq	r0, r8, ip
	adddevfunc (ioreq_uart_a, devnum);
     ce8:	00002650 	andeq	r2, r0, r0, asr r6
     cec:	00000018 	andeq	r0, r0, r8, lsl r0
void udelay (volatile word n) {
     cf0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     cf4:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n) {
     cf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     cfc:	00000c98 	muleq	r0, r8, ip
}
     d00:	00002668 	andeq	r2, r0, r8, ror #12
	while (n--);
     d04:	00000054 	andeq	r0, r0, r4, asr r0
     d08:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     d0c:	86058506 	strhi	r8, [r5], -r6, lsl #10
		n--;
     d10:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     d14:	00018e02 	andeq	r8, r1, r2, lsl #28
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
void mdelay (volatile word n) {
     d1c:	00000c98 	muleq	r0, r8, ip
     d20:	000026bc 			; <UNDEFINED> instruction: 0x000026bc
	while (n) {
     d24:	00000040 	andeq	r0, r0, r0, asr #32
     d28:	83180e41 	tsthi	r8, #1040	; 0x410
}
     d2c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		udelay (999);
     d30:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
		n--;
     d38:	00000014 	andeq	r0, r0, r4, lsl r0
     d3c:	00000c98 	muleq	r0, r8, ip
     d40:	000026fc 	strdeq	r2, [r0], -ip
     d44:	00000024 	andeq	r0, r0, r4, lsr #32
void __pi_ondomain (lword d) {
     d48:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d4c:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_systat.effpdm > 1)
     d50:	00000014 	andeq	r0, r0, r4, lsl r0
     d54:	00000c98 	muleq	r0, r8, ip
			__pi_systat.effpdm = 1;
     d58:	00002720 	andeq	r2, r0, r0, lsr #14
	PRCMPowerDomainOn (d);
     d5c:	00000014 	andeq	r0, r0, r4, lsl r0
     d60:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d64:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     d68:	0000000c 	andeq	r0, r0, ip
     d6c:	00000c98 	muleq	r0, r8, ip
     d70:	00002734 	andeq	r2, r0, r4, lsr r7
	__pi_systat.ondmns |= d;
     d74:	00000014 	andeq	r0, r0, r4, lsl r0
     d78:	0000001c 	andeq	r0, r0, ip, lsl r0
}
     d7c:	00000c98 	muleq	r0, r8, ip
     d80:	00000000 	andeq	r0, r0, r0
void __pi_offdomain (lword d) {
     d84:	00000064 	andeq	r0, r0, r4, rrx
     d88:	83180e41 	tsthi	r8, #1040	; 0x410
	PRCMPowerDomainOff (d);
     d8c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     d90:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d94:	00018e02 	andeq	r8, r1, r2, lsl #28
     d98:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (d & PRCM_DOMAIN_RFCORE) {
     d9c:	00000c98 	muleq	r0, r8, ip
     da0:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     da4:	00000128 	andeq	r0, r0, r8, lsr #2
     da8:	83180e41 	tsthi	r8, #1040	; 0x410
			__pi_systat.effpdm = __pi_systat.reqpdm;
     dac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     db0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	__pi_systat.ondmns &= ~d;
     db4:	00018e02 	andeq	r8, r1, r2, lsl #28
     db8:	00000024 	andeq	r0, r0, r4, lsr #32
}
     dbc:	00000c98 	muleq	r0, r8, ip
     dc0:	00000000 	andeq	r0, r0, r0
void __pi_syserror (word ec, const char *m) {
     dc4:	000000ec 	andeq	r0, r0, ip, ror #1
	diag ("SYSERR: %x, %s", ec, m);
     dc8:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     dcc:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
  __ASM volatile ("cpsid i" : : : "memory");
     dd0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     dd4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     dd8:	8b038a04 	blhi	e35f0 <__ccfg+0xc3648>
     ddc:	00018e02 	andeq	r8, r1, r2, lsl #28
		all_leds_blink;
     de0:	0000000c 	andeq	r0, r0, ip
     de4:	00000c98 	muleq	r0, r8, ip
     de8:	00000000 	andeq	r0, r0, r0
     dec:	00000002 	andeq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     df0:	0000000c 	andeq	r0, r0, ip
     df4:	00000c98 	muleq	r0, r8, ip
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	00000004 	andeq	r0, r0, r4
     e00:	0000000c 	andeq	r0, r0, ip
     e04:	00000c98 	muleq	r0, r8, ip
	while (1) {
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	00000014 	andeq	r0, r0, r4, lsl r0
     e10:	00000018 	andeq	r0, r0, r8, lsl r0
     e14:	00000c98 	muleq	r0, r8, ip
void tci_run_delay_timer () {
     e18:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
     e1c:	0000001a 	andeq	r0, r0, sl, lsl r0
     e20:	83080e41 	movwhi	r0, #36417	; 0x8e41
     e24:	4a018e02 	bmi	64634 <__ccfg+0x4468c>
     e28:	000ec3ce 	andeq	ip, lr, lr, asr #7
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e2c:	0000000c 	andeq	r0, r0, ip
     e30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e34:	7c020001 	stcvc	0, cr0, [r2], {1}
     e38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     e3c:	0000001c 	andeq	r0, r0, ip, lsl r0
	sti_tim;
     e40:	00000e2c 	andeq	r0, r0, ip, lsr #28
}
     e44:	00002748 	andeq	r2, r0, r8, asr #14
     e48:	0000006c 	andeq	r0, r0, ip, rrx
     e4c:	83180e41 	tsthi	r8, #1040	; 0x410
     e50:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e54:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	cli_aux;
     e58:	00018e02 	andeq	r8, r1, r2, lsl #28
     e5c:	0000000c 	andeq	r0, r0, ip
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e64:	7c020001 	stcvc	0, cr0, [r2], {1}
     e68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e6c:	0000001c 	andeq	r0, r0, ip, lsl r0
	sti_aux;
     e70:	00000e5c 	andeq	r0, r0, ip, asr lr
}
     e74:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
     e78:	00000078 	andeq	r0, r0, r8, ror r0
     e7c:	83180e41 	tsthi	r8, #1040	; 0x410
void AONRTCIntHandler () {
     e80:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     e84:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e88:	00018e02 	andeq	r8, r1, r2, lsl #28
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     e8c:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [0] == 0)
     e90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e94:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (*(__pi_utims [0])) {
     e98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e9c:	00000030 	andeq	r0, r0, r0, lsr r0
			(*(__pi_utims [0]))--;
     ea0:	00000e8c 	andeq	r0, r0, ip, lsl #29
		if (__pi_utims [1] == 0)
     ea4:	0000282c 	andeq	r2, r0, ip, lsr #16
		if (*(__pi_utims [1])) {
     ea8:	00000054 	andeq	r0, r0, r4, asr r0
			aux_timer_inactive = 0;
     eac:	810c0e41 	tsthi	ip, r1, asr #28
			(*(__pi_utims [1]))--;
     eb0:	83028203 	movwhi	r8, #8707	; 0x2203
		if (__pi_utims [2] == 0)
     eb4:	280e4101 	stmdacs	lr, {r0, r8, lr}
		if (*(__pi_utims [2])) {
     eb8:	06850784 	streq	r0, [r5], r4, lsl #15
			(*(__pi_utims [2]))--;
     ebc:	048e0586 	streq	r0, [lr], #1414	; 0x586
		if (__pi_utims [3] != 0) {
     ec0:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
			if (*(__pi_utims [3])) {
     ec4:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
				aux_timer_inactive = 0;
     ec8:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
				(*(__pi_utims [3]))--;
     ecc:	000ec1c2 	andeq	ip, lr, r2, asr #3
	if (__pi_systat.ledsts) {
     ed0:	0000000c 	andeq	r0, r0, ip
     ed4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (__pi_systat.ledblc++ == 0) {
     ed8:	7c020001 	stcvc	0, cr0, [r2], {1}
     edc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			if (__pi_systat.ledblk) {
     ee0:	00000030 	andeq	r0, r0, r0, lsr r0
     ee4:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ee8:	00002880 	andeq	r2, r0, r0, lsl #17
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     eec:	00000060 	andeq	r0, r0, r0, rrx
     ef0:	810c0e41 	tsthi	ip, r1, asr #28
				if (__pi_systat.ledsts & 0x2)
     ef4:	83028203 	movwhi	r8, #8707	; 0x2203
     ef8:	200e4101 	andcs	r4, lr, r1, lsl #2
     efc:	05850684 	streq	r0, [r5, #1668]	; 0x684
				if (__pi_systat.ledsts & 0x4)
     f00:	0a64048e 	beq	1902140 <__ccfg+0x18e2198>
				__pi_systat.ledblk = 0;
     f04:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     f08:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
			if (__pi_systat.fstblk)
     f0c:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     f10:	0b41000e 	bleq	1040f50 <__ccfg+0x1020fa8>
				__pi_systat.ledblc = 200;
     f14:	0000000c 	andeq	r0, r0, ip
	if (events & AON_RTC_EVFLAGS_CH0) {
     f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		cli_tim;
     f1c:	7c020001 	stcvc	0, cr0, [r2], {1}
		__pi_new += setdel;
     f20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f24:	0000000c 	andeq	r0, r0, ip
		setdel = 0;
     f28:	00000f14 	andeq	r0, r0, r4, lsl pc
		RISE_N_SHINE;
     f2c:	000028e0 	andeq	r2, r0, r0, ror #17
		__pi_new += setdel;
     f30:	00000020 	andeq	r0, r0, r0, lsr #32
		RISE_N_SHINE;
     f34:	00000018 	andeq	r0, r0, r8, lsl r0
     f38:	00000f14 	andeq	r0, r0, r4, lsl pc
		aux_timer_inactive = 1;
     f3c:	00002900 	andeq	r2, r0, r0, lsl #18
     f40:	00000190 	muleq	r0, r0, r1
				if (__pi_systat.ledsts & 0x1)
     f44:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     f48:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f4c:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x2)
     f50:	00000018 	andeq	r0, r0, r8, lsl r0
     f54:	00000f14 	andeq	r0, r0, r4, lsl pc
     f58:	00002a90 	muleq	r0, r0, sl
				if (__pi_systat.ledsts & 0x8)
     f5c:	00000048 	andeq	r0, r0, r8, asr #32
				__pi_systat.ledblk = 1;
     f60:	83100e41 	tsthi	r0, #1040	; 0x410
     f64:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (aux_timer_inactive) {
     f68:	00018e02 	andeq	r8, r1, r2, lsl #28
			cli_aux;
     f6c:	00000014 	andeq	r0, r0, r4, lsl r0
     f70:	00000f14 	andeq	r0, r0, r4, lsl pc
     f74:	00002ad8 	ldrdeq	r2, [r0], -r8
     f78:	00000024 	andeq	r0, r0, r4, lsr #32
     f7c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f80:	00018e02 	andeq	r8, r1, r2, lsl #28
     f84:	00000018 	andeq	r0, r0, r8, lsl r0
     f88:	00000f14 	andeq	r0, r0, r4, lsl pc
     f8c:	00002afc 	strdeq	r2, [r0], -ip
     f90:	0000005c 	andeq	r0, r0, ip, asr r0
word tci_update_delay_ticks (Boolean force) {
     f94:	83100e41 	tsthi	r0, #1040	; 0x410
	cli_tim;
     f98:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f9c:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (setdel) {
     fa0:	00000018 	andeq	r0, r0, r8, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fa4:	00000f14 	andeq	r0, r0, r4, lsl pc
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     fa8:	00002b58 	andeq	r2, r0, r8, asr fp
     fac:	00000038 	andeq	r0, r0, r8, lsr r0
     fb0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fb4:	86038504 	strhi	r8, [r3], -r4, lsl #10
				AON_RTC_O_CH0CMP)) - gettav ());
     fb8:	00018e02 	andeq	r8, r1, r2, lsl #28
	return NO;
     fbc:	00000028 	andeq	r0, r0, r8, lsr #32
			setdel = 0;
     fc0:	00000f14 	andeq	r0, r0, r4, lsl pc
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     fc4:	00002b90 	muleq	r0, r0, fp
     fc8:	00000180 	andeq	r0, r0, r0, lsl #3
}
     fcc:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
		sti_tim;
     fd0:	86058506 	strhi	r8, [r5], -r6, lsl #10
		return YES;
     fd4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     fd8:	02018e02 	andeq	r8, r1, #2, 28
     fdc:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     fe0:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fe4:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     fe8:	00000030 	andeq	r0, r0, r0, lsr r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     fec:	00000f14 	andeq	r0, r0, r4, lsl pc
	UARTDisable (UART0_BASE);
     ff0:	00002d10 	andeq	r2, r0, r0, lsl sp
	UARTConfigSetExpClk (UART0_BASE,
     ff4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ff8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     ffc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    1000:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1004:	89038804 	stmdbhi	r3, {r2, fp, pc}
    1008:	02018e02 	andeq	r8, r1, #2, 28
    100c:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    1010:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
    1014:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1018:	00000b46 	andeq	r0, r0, r6, asr #22
	urates [0] = rate;
    101c:	00000020 	andeq	r0, r0, r0, lsr #32
}
    1020:	00000f14 	andeq	r0, r0, r4, lsl pc
    1024:	00002de0 	andeq	r2, r0, r0, ror #27
    1028:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    102c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1030:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1034:	02018e02 	andeq	r8, r1, #2, 28
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
    1038:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    103c:	00000ec4 	andeq	r0, r0, r4, asr #29
    1040:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
    1044:	00000f14 	andeq	r0, r0, r4, lsl pc
    1048:	00002fd0 	ldrdeq	r2, [r0], -r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
    104c:	00000070 	andeq	r0, r0, r0, ror r0
    1050:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	__pi_uart_setrate (urates [0], __pi_uart);
    1054:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1058:	00000001 	andeq	r0, r0, r1
    105c:	00000024 	andeq	r0, r0, r4, lsr #32
    1060:	00000f14 	andeq	r0, r0, r4, lsl pc
    1064:	00003040 	andeq	r3, r0, r0, asr #32
    1068:	00000174 	andeq	r0, r0, r4, ror r1
    106c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
	switch (operation) {
    1070:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
static int ioreq_uart_a (int operation, char *buf, int len) {
    1074:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    1078:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    107c:	8b038a04 	blhi	e3894 <__ccfg+0xc38ec>
    1080:	00018e02 	andeq	r8, r1, r2, lsl #28
    1084:	0000000c 	andeq	r0, r0, ip
				*buf++ = uart_a_read;
    1088:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    108c:	7c020001 	stcvc	0, cr0, [r2], {1}
			while (len && uart_a_char_available) {
    1090:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1094:	00000014 	andeq	r0, r0, r4, lsl r0
    1098:	00001084 	andeq	r1, r0, r4, lsl #1
			if (len != operation) {
    109c:	000031b4 			; <UNDEFINED> instruction: 0x000031b4
}
    10a0:	00000024 	andeq	r0, r0, r4, lsr #32
    10a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			uart_a_disable_int;
    10a8:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (uart_a_char_available) {
    10ac:	0000000c 	andeq	r0, r0, ip
				*buf++ = uart_a_read;
    10b0:	00001084 	andeq	r1, r0, r4, lsl #1
			uart_a_disable_int;
    10b4:	000031d8 	ldrdeq	r3, [r0], -r8
    10b8:	00000024 	andeq	r0, r0, r4, lsr #32
			if (uart_a_char_available) {
    10bc:	0000000c 	andeq	r0, r0, ip
    10c0:	00001084 	andeq	r1, r0, r4, lsl #1
				uart_a_enable_int;
    10c4:	000031fc 	strdeq	r3, [r0], -ip
    10c8:	00000008 	andeq	r0, r0, r8
				goto Redo_rx;
    10cc:	0000000c 	andeq	r0, r0, ip
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    10d0:	00001084 	andeq	r1, r0, r4, lsl #1
    10d4:	00003204 	andeq	r3, r0, r4, lsl #4
			return -2;
    10d8:	00000004 	andeq	r0, r0, r4
    10dc:	0000000c 	andeq	r0, r0, ip
				uart_a_write (*buf);
    10e0:	00001084 	andeq	r1, r0, r4, lsl #1
    10e4:	00003208 	andeq	r3, r0, r8, lsl #4
			while (len && uart_a_room_in_tx) {
    10e8:	00000004 	andeq	r0, r0, r4
    10ec:	00000018 	andeq	r0, r0, r8, lsl r0
    10f0:	00001084 	andeq	r1, r0, r4, lsl #1
			if (len != operation) {
    10f4:	0000320c 	andeq	r3, r0, ip, lsl #4
			uart_a_disable_int;
    10f8:	00000048 	andeq	r0, r0, r8, asr #32
    10fc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			if (uart_a_room_in_tx) {
    1100:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1104:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_enable_int;
    1108:	0000000c 	andeq	r0, r0, ip
    110c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				*buf++ = uart_a_read;
    1110:	7c020001 	stcvc	0, cr0, [r2], {1}
			if (uart_a_room_in_tx) {
    1114:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				uart_a_write (*buf);
    1118:	00000028 	andeq	r0, r0, r8, lsr #32
    111c:	00001108 	andeq	r1, r0, r8, lsl #2
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1120:	00003254 	andeq	r3, r0, r4, asr r2
    1124:	00000070 	andeq	r0, r0, r0, ror r0
			uart_a_enable_int;
    1128:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    112c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1130:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
			return 0;
    1134:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
			if (len == UART_CNTRL_SETRATE) {
    1138:	c7ce4214 	bfigt	r4, r4, #4, #11
				if (__pi_uart_setrate (*((word*)buf),
    113c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1140:	000b4200 	andeq	r4, fp, r0, lsl #4
    1144:	0000000c 	andeq	r0, r0, ip
				syserror (EREQPAR, "uar");
    1148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			syserror (ENOOPER, "uai");
    114c:	7c020001 	stcvc	0, cr0, [r2], {1}
			if (len == UART_CNTRL_GETRATE) {
    1150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				return 1;
    1154:	00000028 	andeq	r0, r0, r8, lsr #32
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1158:	00001144 	andeq	r1, r0, r4, asr #2
			syserror (ENOOPER, "uai");
    115c:	000032c4 	andeq	r3, r0, r4, asr #5
    1160:	0000011c 	andeq	r0, r0, ip, lsl r1
    1164:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1168:	86048505 	strhi	r8, [r4], -r5, lsl #10
    116c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1170:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    1174:	c7ce4214 	bfigt	r4, r4, #4, #11
    1178:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    117c:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1180:	0000000c 	andeq	r0, r0, ip
void UART0IntHandler () {
    1184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    1188:	7c020001 	stcvc	0, cr0, [r2], {1}
    118c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00001180 	andeq	r1, r0, r0, lsl #3
    1198:	000033e0 	andeq	r3, r0, r0, ror #7
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    119c:	00000020 	andeq	r0, r0, r0, lsr #32
    11a0:	00000028 	andeq	r0, r0, r8, lsr #32
		RISE_N_SHINE;
    11a4:	00001180 	andeq	r1, r0, r0, lsl #3
    11a8:	00003400 	andeq	r3, r0, r0, lsl #8
		i_trigger (devevent (UART_A, READ));
    11ac:	00000230 	andeq	r0, r0, r0, lsr r2
    11b0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    11b4:	86078508 	strhi	r8, [r7], -r8, lsl #10
    11b8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    11bc:	8a038904 	bhi	e35d4 <__ccfg+0xc362c>
    11c0:	02018e02 	andeq	r8, r1, #2, 28
    11c4:	200e0a4f 	andcs	r0, lr, pc, asr #20
    11c8:	00000b42 	andeq	r0, r0, r2, asr #22
    11cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d0:	00001180 	andeq	r1, r0, r0, lsl #3
    11d4:	00003630 	andeq	r3, r0, r0, lsr r6
    11d8:	00000050 	andeq	r0, r0, r0, asr r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    11dc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    11e0:	86058506 	strhi	r8, [r5], -r6, lsl #10
    11e4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
		i_trigger (devevent (UART_A, WRITE));
    11e8:	00018e02 	andeq	r8, r1, r2, lsl #28
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		RISE_N_SHINE;
    11f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11fc:	00000020 	andeq	r0, r0, r0, lsr #32
		i_trigger (devevent (UART_A, WRITE));
    1200:	000011ec 	andeq	r1, r0, ip, ror #3
    1204:	00003680 	andeq	r3, r0, r0, lsl #13
    1208:	00000390 	muleq	r0, r0, r3
    120c:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    1210:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1214:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1218:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    121c:	00000001 	andeq	r0, r0, r1
    1220:	0000000c 	andeq	r0, r0, ip
    1224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1228:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    122c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1230:	00000024 	andeq	r0, r0, r4, lsr #32
    1234:	00001220 	andeq	r1, r0, r0, lsr #4
    1238:	00003a10 	andeq	r3, r0, r0, lsl sl
    123c:	00000028 	andeq	r0, r0, r8, lsr #32
void __buttons_setirq (int val) {
    1240:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1244:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1248:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    124c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1250:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    1254:	0000000b 	andeq	r0, r0, fp
		bn = BUTTON_GPIO (__button_list [i]);
    1258:	00000028 	andeq	r0, r0, r8, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    125c:	00001220 	andeq	r1, r0, r0, lsr #4
    1260:	00000000 	andeq	r0, r0, r0
    1264:	0000002c 	andeq	r0, r0, ip, lsr #32
    1268:	83180e41 	tsthi	r8, #1040	; 0x410
    126c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1270:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
    1274:	50018e02 	andpl	r8, r1, r2, lsl #28
    1278:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    127c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1280:	000b4200 	andeq	r4, fp, r0, lsl #4
void __pinlist_setirq (int val) {
    1284:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < N_PINLIST; i++) {
    1288:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    128c:	7c020001 	stcvc	0, cr0, [r2], {1}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1290:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1294:	0000000c 	andeq	r0, r0, ip
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1298:	00001284 	andeq	r1, r0, r4, lsl #5
    129c:	00003a38 	andeq	r3, r0, r8, lsr sl
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    12a0:	00000030 	andeq	r0, r0, r0, lsr r0
    12a4:	0000000c 	andeq	r0, r0, ip
    12a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (i = 0; i < N_PINLIST; i++) {
    12ac:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    12b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	000012a4 	andeq	r1, r0, r4, lsr #5
    12bc:	00003a68 	andeq	r3, r0, r8, ror #20
void GPIOIntHandler () {
    12c0:	00000020 	andeq	r0, r0, r0, lsr #32
if (buttons_int) {
    12c4:	0000000c 	andeq	r0, r0, ip
    12c8:	000012a4 	andeq	r1, r0, r4, lsr #5
	buttons_disable ();
    12cc:	00003a88 	andeq	r3, r0, r8, lsl #21
    12d0:	00000018 	andeq	r0, r0, r8, lsl r0
	i_trigger ((aword)&__button_list);
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12dc:	7c020001 	stcvc	0, cr0, [r2], {1}
    12e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	000012d4 	ldrdeq	r1, [r0], -r4
    12ec:	00003aa0 	andeq	r3, r0, r0, lsr #21
    12f0:	00000008 	andeq	r0, r0, r8
    12f4:	0000000c 	andeq	r0, r0, ip
    12f8:	000012d4 	ldrdeq	r1, [r0], -r4
    12fc:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
    1300:	00000006 	andeq	r0, r0, r6
    1304:	0000000c 	andeq	r0, r0, ip
    1308:	000012d4 	ldrdeq	r1, [r0], -r4
if (pin_sensor_int) {
    130c:	00003aa8 	andeq	r3, r0, r8, lsr #21
    1310:	00000008 	andeq	r0, r0, r8
	i_trigger ((aword)(&__input_pins));
    1314:	0000000c 	andeq	r0, r0, ip
    1318:	000012d4 	ldrdeq	r1, [r0], -r4
    131c:	00000000 	andeq	r0, r0, r0
    1320:	00000006 	andeq	r0, r0, r6
    1324:	0000000c 	andeq	r0, r0, ip
    1328:	000012d4 	ldrdeq	r1, [r0], -r4
    132c:	00000000 	andeq	r0, r0, r0
    1330:	00000008 	andeq	r0, r0, r8
    1334:	0000000c 	andeq	r0, r0, ip
    1338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    133c:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pinsen_disable_and_clear;
    1340:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1344:	0000001c 	andeq	r0, r0, ip, lsl r0
	RISE_N_SHINE;
    1348:	00001334 	andeq	r1, r0, r4, lsr r3
    134c:	00003ab0 			; <UNDEFINED> instruction: 0x00003ab0
}
    1350:	0000005c 	andeq	r0, r0, ip, asr r0
    1354:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1358:	86038504 	strhi	r8, [r3], -r4, lsl #10
    135c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1360:	0000100e 	andeq	r1, r0, lr
void system_init () {
    1364:	00000014 	andeq	r0, r0, r4, lsl r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1368:	00001334 	andeq	r1, r0, r4, lsr r3
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    136c:	00003b0c 	andeq	r3, r0, ip, lsl #22
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1370:	0000002c 	andeq	r0, r0, ip, lsr #32
    1374:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1378:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    137c:	00000018 	andeq	r0, r0, r8, lsl r0
    1380:	00001334 	andeq	r1, r0, r4, lsr r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1384:	00000000 	andeq	r0, r0, r0
    1388:	00000090 	muleq	r0, r0, r0
    138c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1390:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    139c:	00001334 	andeq	r1, r0, r4, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a0:	00003b38 	andeq	r3, r0, r8, lsr fp
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a4:	00000018 	andeq	r0, r0, r8, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
    13a8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
		pin = (port_confs [i] >> 19) & 0x1f;
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    13b4:	00001334 	andeq	r1, r0, r4, lsr r3
    13b8:	00003b50 	andeq	r3, r0, r0, asr fp
    13bc:	00000060 	andeq	r0, r0, r0, rrx
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (port_confs [i] & 0x80)
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13c8:	00000014 	andeq	r0, r0, r4, lsl r0
    13cc:	00001334 	andeq	r1, r0, r4, lsr r3
		if (port_confs [i] & 0x40)
    13d0:	00003bb0 			; <UNDEFINED> instruction: 0x00003bb0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	00000034 	andeq	r0, r0, r4, lsr r0
    13d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13dc:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    13e0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13e4:	00001334 	andeq	r1, r0, r4, lsr r3
	all_leds_blink;
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	00000038 	andeq	r0, r0, r8, lsr r0
    13f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13f4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13f8:	00000001 	andeq	r0, r0, r1
    13fc:	0000000c 	andeq	r0, r0, ip
    1400:	00001334 	andeq	r1, r0, r4, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1404:	00000000 	andeq	r0, r0, r0
    1408:	0000000c 	andeq	r0, r0, ip
    140c:	00000018 	andeq	r0, r0, r8, lsl r0
    1410:	00001334 	andeq	r1, r0, r4, lsr r3
    1414:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1418:	00000034 	andeq	r0, r0, r4, lsr r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    141c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1420:	86038504 	strhi	r8, [r3], -r4, lsl #10
	IntEnable (INT_AON_RTC_COMB);
    1424:	00018e02 	andeq	r8, r1, r2, lsl #28
    1428:	0000000c 	andeq	r0, r0, ip
    142c:	00001334 	andeq	r1, r0, r4, lsr r3
	__pi_malloc_init ();
    1430:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_GPIO_EDGE);
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
    1438:	0000000c 	andeq	r0, r0, ip
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    143c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1440:	7c020001 	stcvc	0, cr0, [r2], {1}
    1444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1448:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    144c:	00001438 	andeq	r1, r0, r8, lsr r4
    1450:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1454:	00000014 	andeq	r0, r0, r4, lsl r0
    1458:	0000000c 	andeq	r0, r0, ip
    145c:	00001438 	andeq	r1, r0, r8, lsr r4
	urates [0] = UART_RATE / 100;
    1460:	00003be4 	andeq	r3, r0, r4, ror #23
    1464:	00000028 	andeq	r0, r0, r8, lsr #32
	reinit_uart ();
    1468:	0000000c 	andeq	r0, r0, ip
	EXTRA_INITIALIZERS;
    146c:	00001438 	andeq	r1, r0, r8, lsr r4
    1470:	00003c0c 	andeq	r3, r0, ip, lsl #24
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1474:	0000004c 	andeq	r0, r0, ip, asr #32
    1478:	0000000c 	andeq	r0, r0, ip
    147c:	00001438 	andeq	r1, r0, r8, lsr r4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1480:	00003c58 	andeq	r3, r0, r8, asr ip
    1484:	00000150 	andeq	r0, r0, r0, asr r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1488:	00000018 	andeq	r0, r0, r8, lsl r0
    148c:	00001438 	andeq	r1, r0, r8, lsr r4
			devinit [i] . init (devinit [i] . param);
    1490:	00003da8 	andeq	r3, r0, r8, lsr #27
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1494:	00000118 	andeq	r0, r0, r8, lsl r1
    1498:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    149c:	86038504 	strhi	r8, [r3], -r4, lsl #10
	IntEnable (INT_UART0_COMB);
    14a0:	00018e02 	andeq	r8, r1, r2, lsl #28
    14a4:	00000018 	andeq	r0, r0, r8, lsl r0
}
    14a8:	00001438 	andeq	r1, r0, r8, lsr r4
	tci_run_auxiliary_timer ();
    14ac:	00003ec0 	andeq	r3, r0, r0, asr #29
		diag ("");
    14b0:	00000020 	andeq	r0, r0, r0, lsr #32
    14b4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    14b8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    14bc:	00000001 	andeq	r0, r0, r1
		diag ("Leftover RAM: %d bytes",
    14c0:	00000014 	andeq	r0, r0, r4, lsl r0
    14c4:	00001438 	andeq	r1, r0, r8, lsr r4
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	00000060 	andeq	r0, r0, r0, rrx
    14d0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    14d8:	0000000c 	andeq	r0, r0, ip
    14dc:	00001438 	andeq	r1, r0, r8, lsr r4
    14e0:	00003ee0 	andeq	r3, r0, r0, ror #29
    14e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e8:	0000000c 	andeq	r0, r0, ip
    14ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    14f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14f8:	00000018 	andeq	r0, r0, r8, lsl r0
    14fc:	000014e8 	andeq	r1, r0, r8, ror #9
    1500:	00003efc 	strdeq	r3, [r0], -ip
    1504:	000000d4 	ldrdeq	r0, [r0], -r4
    1508:	83100e41 	tsthi	r0, #1040	; 0x410
    150c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1510:	00018e02 	andeq	r8, r1, r2, lsl #28
    1514:	00000014 	andeq	r0, r0, r4, lsl r0
    1518:	000014e8 	andeq	r1, r0, r8, ror #9
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    151c:	00003fd0 	ldrdeq	r3, [r0], -r0
    1520:	000000a4 	andeq	r0, r0, r4, lsr #1
    1524:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1528:	00018e02 	andeq	r8, r1, r2, lsl #28
    152c:	0000000c 	andeq	r0, r0, ip
    1530:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1534:	7c020001 	stcvc	0, cr0, [r2], {1}
    1538:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    153c:	00000018 	andeq	r0, r0, r8, lsl r0
__attribute__ ((noreturn)) void __pi_release () {
    1540:	0000152c 	andeq	r1, r0, ip, lsr #10
    1544:	00004074 	andeq	r4, r0, r4, ror r0
    1548:	0000007c 	andeq	r0, r0, ip, ror r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    154c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	check_stack_overflow;
    1550:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1554:	00000001 	andeq	r0, r0, r1
    1558:	00000014 	andeq	r0, r0, r4, lsl r0
	update_n_wake (MAX_WORD, NO);
    155c:	0000152c 	andeq	r1, r0, ip, lsr #10
    1560:	000040f0 	strdeq	r4, [r0], -r0
    1564:	000000ac 	andeq	r0, r0, ip, lsr #1
	for_all_tasks (__pi_curr) {
    1568:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    156c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1570:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("cpsid i" : : : "memory");
    1574:	0000152c 	andeq	r1, r0, ip, lsr #10
	__SLEEP;
    1578:	0000419c 	muleq	r0, ip, r1
    157c:	0000005c 	andeq	r0, r0, ip, asr r0
    1580:	0000000c 	andeq	r0, r0, ip
    1584:	0000152c 	andeq	r1, r0, ip, lsr #10
	system_event_count ++;
    1588:	000041f8 	strdeq	r4, [r0], -r8
    158c:	00000018 	andeq	r0, r0, r8, lsl r0
	switch (__pi_systat.effpdm) {
    1590:	0000000c 	andeq	r0, r0, ip
    1594:	0000152c 	andeq	r1, r0, ip, lsr #10
    1598:	00000000 	andeq	r0, r0, r0
    159c:	00000010 	andeq	r0, r0, r0, lsl r0
			__WFI ();
    15a0:	0000000c 	andeq	r0, r0, ip
    15a4:	0000152c 	andeq	r1, r0, ip, lsr #10
    15a8:	00004210 	andeq	r4, r0, r0, lsl r2
	check_stack_overflow;
    15ac:	00000010 	andeq	r0, r0, r0, lsl r0
    15b0:	0000000c 	andeq	r0, r0, ip
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    15b4:	0000152c 	andeq	r1, r0, ip, lsr #10
    15b8:	00004220 	andeq	r4, r0, r0, lsr #4
			(__pi_curr->code) (tstate (__pi_curr));
    15bc:	00000014 	andeq	r0, r0, r4, lsl r0
			goto Redo;
    15c0:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (__pi_curr) {
    15c4:	0000152c 	andeq	r1, r0, ip, lsr #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15c8:	00004234 	andeq	r4, r0, r4, lsr r2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    15cc:	00000064 	andeq	r0, r0, r4, rrx
    15d0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15d4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15dc:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    15e0:	0000152c 	andeq	r1, r0, ip, lsr #10
    15e4:	00004298 	muleq	r0, r8, r2
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15e8:	00000014 	andeq	r0, r0, r4, lsl r0
    15ec:	0000000c 	andeq	r0, r0, ip
			__WFI ();
    15f0:	0000152c 	andeq	r1, r0, ip, lsr #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15f4:	000042ac 	andeq	r4, r0, ip, lsr #5
    15f8:	00000014 	andeq	r0, r0, r4, lsl r0
}
    15fc:	0000000c 	andeq	r0, r0, ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1600:	0000152c 	andeq	r1, r0, ip, lsr #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1604:	000042c0 	andeq	r4, r0, r0, asr #5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1608:	00000014 	andeq	r0, r0, r4, lsl r0
    160c:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1610:	0000152c 	andeq	r1, r0, ip, lsr #10
    1614:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    1618:	00000028 	andeq	r0, r0, r8, lsr #32
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    161c:	0000000c 	andeq	r0, r0, ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1620:	0000152c 	andeq	r1, r0, ip, lsr #10
    1624:	000042fc 	strdeq	r4, [r0], -ip
    1628:	00000010 	andeq	r0, r0, r0, lsl r0
    162c:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1630:	0000152c 	andeq	r1, r0, ip, lsr #10
    1634:	0000430c 	andeq	r4, r0, ip, lsl #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1638:	0000002c 	andeq	r0, r0, ip, lsr #32
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    163c:	0000000c 	andeq	r0, r0, ip
    1640:	0000152c 	andeq	r1, r0, ip, lsr #10
    1644:	00004338 	andeq	r4, r0, r8, lsr r3
    1648:	00000014 	andeq	r0, r0, r4, lsl r0
    164c:	0000000c 	andeq	r0, r0, ip
			SysCtrlSetRechargeBeforePowerDown
    1650:	0000152c 	andeq	r1, r0, ip, lsr #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1654:	0000434c 	andeq	r4, r0, ip, asr #6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1658:	00000014 	andeq	r0, r0, r4, lsl r0
    165c:	0000001c 	andeq	r0, r0, ip, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1660:	0000152c 	andeq	r1, r0, ip, lsr #10
    1664:	00004360 	andeq	r4, r0, r0, ror #6
    1668:	00000110 	andeq	r0, r0, r0, lsl r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    166c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1670:	86038504 	strhi	r8, [r3], -r4, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1674:	02018e02 	andeq	r8, r1, #2, 28
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1678:	00100e76 	andseq	r0, r0, r6, ror lr
    167c:	00000018 	andeq	r0, r0, r8, lsl r0
    1680:	0000152c 	andeq	r1, r0, ip, lsr #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1684:	00004470 	andeq	r4, r0, r0, ror r4
			while (!(AONWUCPowerStatusGet () &
    1688:	00000064 	andeq	r0, r0, r4, rrx
			PRCMPowerDomainOn (__pi_systat.ondmns);
    168c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1690:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1694:	00000001 	andeq	r0, r0, r1
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    1698:	0000000c 	andeq	r0, r0, ip
    169c:	0000152c 	andeq	r1, r0, ip, lsr #10
    16a0:	000044d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    16a4:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    16a8:	00000014 	andeq	r0, r0, r4, lsl r0
    16ac:	0000152c 	andeq	r1, r0, ip, lsr #10
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    16b0:	000044fc 	strdeq	r4, [r0], -ip
    16b4:	00000150 	andeq	r0, r0, r0, asr r1
			SysCtrlAdjustRechargeAfterPowerDown ();
    16b8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
			reinit_uart ();
    16bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    16c0:	0000000c 	andeq	r0, r0, ip
    16c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    16c8:	7c020001 	stcvc	0, cr0, [r2], {1}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    16cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16d0:	0000001c 	andeq	r0, r0, ip, lsl r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    16d4:	000016c0 	andeq	r1, r0, r0, asr #13
    16d8:	00000000 	andeq	r0, r0, r0
    16dc:	000000f4 	strdeq	r0, [r0], -r4
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    16e0:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    16e4:	86058506 	strhi	r8, [r5], -r6, lsl #10
    16e8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    16ec:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    16f0:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    16f4:	000016c0 	andeq	r1, r0, r0, asr #13
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    16f8:	0000464c 	andeq	r4, r0, ip, asr #12
    16fc:	00000220 	andeq	r0, r0, r0, lsr #4
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1700:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    1704:	86088509 	strhi	r8, [r8], -r9, lsl #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1708:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    170c:	8a048905 	bhi	123b28 <__ccfg+0x103b80>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1710:	8e028b03 	vmlahi.f64	d8, d2, d3
    1714:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
			PRCMPowerDomainOff (
    1718:	00000024 	andeq	r0, r0, r4, lsr #32
    171c:	00000014 	andeq	r0, r0, r4, lsl r0
	__SLEEP;
    1720:	000016c0 	andeq	r1, r0, r0, asr #13
    1724:	0000486c 	andeq	r4, r0, ip, ror #16
  __ASM volatile ("cpsie i" : : : "memory");
    1728:	00000060 	andeq	r0, r0, r0, rrx
	goto Redo;
    172c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1730:	00018e02 	andeq	r8, r1, r2, lsl #28
    1734:	00000014 	andeq	r0, r0, r4, lsl r0
    1738:	000016c0 	andeq	r1, r0, r0, asr #13
    173c:	00000000 	andeq	r0, r0, r0
    1740:	00000078 	andeq	r0, r0, r8, ror r0
    1744:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1748:	00018e02 	andeq	r8, r1, r2, lsl #28
    174c:	0000000c 	andeq	r0, r0, ip
    1750:	000016c0 	andeq	r1, r0, r0, asr #13
    1754:	000048cc 	andeq	r4, r0, ip, asr #17
    1758:	00000018 	andeq	r0, r0, r8, lsl r0
    175c:	0000000c 	andeq	r0, r0, ip
    1760:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1764:	7c020001 	stcvc	0, cr0, [r2], {1}
    1768:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    176c:	0000000c 	andeq	r0, r0, ip
    1770:	0000175c 	andeq	r1, r0, ip, asr r7
    1774:	00000000 	andeq	r0, r0, r0
    1778:	00000010 	andeq	r0, r0, r0, lsl r0
    177c:	0000000c 	andeq	r0, r0, ip
    1780:	0000175c 	andeq	r1, r0, ip, asr r7
    1784:	00000000 	andeq	r0, r0, r0
    1788:	00000018 	andeq	r0, r0, r8, lsl r0
    178c:	0000000c 	andeq	r0, r0, ip
    1790:	0000175c 	andeq	r1, r0, ip, asr r7
    1794:	000048e4 	andeq	r4, r0, r4, ror #17
	cli_tim;
    1798:	0000004c 	andeq	r0, r0, ip, asr #32
    179c:	00000014 	andeq	r0, r0, r4, lsl r0
    17a0:	0000175c 	andeq	r1, r0, ip, asr r7
	diag ("PicOS halted");
    17a4:	00000000 	andeq	r0, r0, r0
	mdelay (500);
    17a8:	00000030 	andeq	r0, r0, r0, lsr r0
    17ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	setpowermode (2);
    17b0:	00018e02 	andeq	r8, r1, r2, lsl #28
	__PCB = NULL;
    17b4:	00000018 	andeq	r0, r0, r8, lsl r0
	release;
    17b8:	0000175c 	andeq	r1, r0, ip, asr r7
    17bc:	00004930 	andeq	r4, r0, r0, lsr r9
    17c0:	0000006c 	andeq	r0, r0, ip, rrx
    17c4:	83100e41 	tsthi	r0, #1040	; 0x410
int main (void) {
    17c8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    17cc:	00018e02 	andeq	r8, r1, r2, lsl #28
    17d0:	00000014 	andeq	r0, r0, r4, lsl r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    17d4:	0000175c 	andeq	r1, r0, ip, asr r7
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17d8:	0000499c 	muleq	r0, ip, r9
	system_init ();
    17dc:	00000016 	andeq	r0, r0, r6, lsl r0
	tcv_init ();
    17e0:	83080e41 	movwhi	r0, #36417	; 0x8e41
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    17e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    17e8:	0000000c 	andeq	r0, r0, ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    17ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17f8:	00000024 	andeq	r0, r0, r4, lsr #32
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    17fc:	000017e8 	andeq	r1, r0, r8, ror #15
	delay (16, 0);
    1800:	000049b4 			; <UNDEFINED> instruction: 0x000049b4
    1804:	00000028 	andeq	r0, r0, r8, lsr #32
    1808:	83100e41 	tsthi	r0, #1040	; 0x410
	__pi_release ();
    180c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1810:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    1814:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    1818:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    181c:	0000000b 	andeq	r0, r0, fp
    1820:	0000000c 	andeq	r0, r0, ip
    1824:	000017e8 	andeq	r1, r0, r8, ror #15
static void killev (__pi_pcb_t *pid) {
    1828:	000049dc 	ldrdeq	r4, [r0], -ip
	wfun = (aword)(pid->code);
    182c:	00000008 	andeq	r0, r0, r8
	for_all_tasks (i) {
    1830:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
    1834:	000017e8 	andeq	r1, r0, r8, ror #15
    1838:	00000000 	andeq	r0, r0, r0
    183c:	00000022 	andeq	r0, r0, r2, lsr #32
			    || i->Events [j] . Event == wfun
    1840:	00000018 	andeq	r0, r0, r8, lsl r0
		for (j = 0; j < nevents (i); j++) {
    1844:	000017e8 	andeq	r1, r0, r8, ror #15
			if (i->Events [j] . Event == (aword)pid
    1848:	00000000 	andeq	r0, r0, r0
    184c:	0000002e 	andeq	r0, r0, lr, lsr #32
    1850:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				wakeupev (i, j);
    1854:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1858:	000ec4ce 	andeq	ip, lr, lr, asr #9
	for_all_tasks (i) {
    185c:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1860:	000017e8 	andeq	r1, r0, r8, ror #15
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1864:	00000000 	andeq	r0, r0, r0
static void qfree (aword *ch) {
    1868:	00000034 	andeq	r0, r0, r4, lsr r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    186c:	83100e41 	tsthi	r0, #1040	; 0x410
	cc = (aword*)(mpools + MA_NP);
    1870:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	m_setnextp (ch, chunk);
    1874:	00018e02 	andeq	r8, r1, r2, lsl #28
	m_setnextp (cc, ch);
    1878:	00000018 	andeq	r0, r0, r8, lsl r0
}
    187c:	000017e8 	andeq	r1, r0, r8, ror #15
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1880:	00000000 	andeq	r0, r0, r0
    1884:	00000040 	andeq	r0, r0, r0, asr #32
    1888:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			m_setnextp (cc, m_nextp (chunk));
    188c:	86038504 	strhi	r8, [r3], -r4, lsl #10
			m_size (chunk) += m_hdrlen + m_size (ch);
    1890:	00018e02 	andeq	r8, r1, r2, lsl #28
    1894:	0000000c 	andeq	r0, r0, ip
    1898:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    189c:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    18a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    18a4:	00000020 	andeq	r0, r0, r0, lsr #32
    18a8:	00001894 	muleq	r0, r4, r8
    18ac:	000049e4 	andeq	r4, r0, r4, ror #19
			m_setnextp (cc, m_nextp (chunk));
    18b0:	000000aa 	andeq	r0, r0, sl, lsr #1
			m_size (ch) += m_hdrlen + m_size (chunk);
    18b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    18b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18c0:	180e4201 	stmdane	lr, {r0, r9, lr}
    18c4:	00000688 	andeq	r0, r0, r8, lsl #13
    18c8:	0000000c 	andeq	r0, r0, ip
			if (m_size (chunk) >= m_size (ch))
    18cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    18d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		chunk = m_nextp (chunk))
    18d8:	0000000c 	andeq	r0, r0, ip
    18dc:	000018c8 	andeq	r1, r0, r8, asr #17
    18e0:	00004a90 	muleq	r0, r0, sl
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    18e4:	00000014 	andeq	r0, r0, r4, lsl r0
	diag_wait (a);
    18e8:	00000014 	andeq	r0, r0, r4, lsl r0
	diag_wchar (c, a);
    18ec:	000018c8 	andeq	r1, r0, r8, asr #17
    18f0:	00004aa4 	andeq	r4, r0, r4, lsr #21
}
    18f4:	00000038 	andeq	r0, r0, r8, lsr r0
    18f8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	syserror (ESTATE, "state");
    18fc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1900:	0000000c 	andeq	r0, r0, ip
    1904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1908:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (i = 0; i < MAX_UTIMERS; i++)
    190c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
void utimer_add (address ut) {
    1910:	00000020 	andeq	r0, r0, r0, lsr #32
    1914:	00001900 	andeq	r1, r0, r0, lsl #18
		if (__pi_utims [i] == NULL)
    1918:	00004adc 	ldrdeq	r4, [r0], -ip
	for (i = 0; i < MAX_UTIMERS; i++)
    191c:	00000054 	andeq	r0, r0, r4, asr r0
    1920:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
		syserror (ERESOURCE, "ut a");
    1924:	86048505 	strhi	r8, [r4], -r5, lsl #10
	__pi_utims [i] = ut;
    1928:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
}
    192c:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
    1930:	00000688 	andeq	r0, r0, r8, lsl #13
